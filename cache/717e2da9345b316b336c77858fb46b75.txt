
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Vsonic12138/p/18838123" title="发布于 2025-04-21 10:55">
    <span role="heading" aria-level="2">Windows下将QT打包为可执行文件（exe）的完整流程，包含第三方库。</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="打包我的-qtc-视觉应用从依赖部署到单文件-exe-的踩坑之旅">打包我的 Qt/C++ 视觉应用：从依赖部署到单文件 EXE 的踩坑之旅</h1>
<h2 id="一前言">一、前言</h2>
<p>最近完成了一个基于 Qt/C++ 的桌面视觉应用项目（<code>proj_ai_vision_app</code>）。这个项目功能还挺复杂，不仅用了 Qt 做界面，还集成了 OpenCV 进行图像处理，并且通过我们自研的 AIEngine 库（它内部又调用了 MNN 推理框架）来实现 AI 功能。开发完成后，接下来的重要一步就是将它打包，以便在没有安装开发环境的其他 Windows 电脑上也能顺利运行。</p>
<p>通常，Windows 应用打包有两种主流方式：</p>
<ol>
<li><strong>部署依赖</strong>：创建一个包含 EXE 文件和所有必需的 DLL、资源文件的文件夹。用户直接运行这个文件夹里的 EXE。</li>
<li><strong>单文件打包</strong>：将 EXE 和所有依赖项“塞”进一个单独的可执行文件中。用户只需双击这一个文件即可运行。</li>
</ol>
<p>这篇文章就记录一下我为 <code>proj_ai_vision_app</code> 这个项目打包的过程，特别是后面尝试创建单个可执行文件时遇到的一些坑以及最终的解决方案。</p>
<h2 id="二打包-exe-文件流程带依赖文件夹">二、打包 EXE 文件流程（带依赖文件夹）</h2>
<p>这是最基础也是最标准的打包方式，主要依赖 Qt 官方提供的 <code>windeployqt</code> 工具。</p>
<p><strong>1. 构建 Release 版本</strong></p>
<p>首先，在 Qt Creator 中，确保你的项目配置是 "Release" 模式。Release 构建会进行代码优化，生成的可执行文件运行效率更高，体积也可能更小。点击构建按钮，生成 <code>proj_ai_vision_app.exe</code> 文件。<br>
<img src="https://img2024.cnblogs.com/blog/3089600/202504/3089600-20250421104843406-1611715298.png" alt="image" loading="lazy"></p>
<p><strong>2. 创建部署目录</strong></p>
<p>新建一个干净的文件夹，专门用来存放打包后的所有文件。我这里创建了一个名为 <code>exe</code> 的目录 (<code>D:\DeskTop\QT_Program\exe\</code>)。然后，将 Qt Creator 构建生成的 <code>proj_ai_vision_app.exe</code> 文件复制到这个 <code>exe</code> 目录中。</p>
<p><strong>3. 使用 <code>windeployqt</code> 收集 Qt 依赖</strong></p>
<p><code>windeployqt.exe</code> 是 Qt SDK 自带的一个命令行工具，它的作用是分析你的 EXE 文件，然后自动将运行该 EXE 所需的 Qt 库 DLL、必要的插件（如平台插件 <code>qwindows.dll</code>、图片格式插件 <code>qjpeg.dll</code> 等）、翻译文件（<code>.qm</code>）等复制到 EXE 所在的目录。</p>
<p>搜索windows下的qt终端，记得打开的是带有你编译器环境的终端（我这里使用的是MVSC，所以打开的也是带有MVSC环境的QT终端），切换到你的部署目录 (<code>exe</code> 目录)，<br>
<img src="https://img2024.cnblogs.com/blog/3089600/202504/3089600-20250421104931200-198746220.png" alt="image" loading="lazy"></p>
<p>然后执行：</p>
<pre><code class="language-powershell"># 确保 windeployqt 在你的系统 PATH 中，或者使用 Qt 安装目录下的完整路径
windeployqt .\proj_ai_vision_app.exe
</code></pre>
<p>执行后，你会看到类似这样的输出，提示它添加了哪些模块和插件：</p>
<pre><code>D:\DeskTop\QT_Program\exe\proj_ai_vision_app.exe 64 bit, release executable
Adding in plugin type platforms for module: Qt6Gui
... (省略其他插件和依赖)
Updating Qt6Core.dll.
Updating Qt6Gui.dll.
Updating Qt6Widgets.dll.
...
Creating directory D:/DeskTop/QT_Program/exe/platforms.
Updating qwindows.dll.
...
Creating D:\DeskTop\QT_Program\exe\translations...
Creating qt_zh_CN.qm...
...
</code></pre>
<p>现在查看 <code>exe</code> 目录，你会发现多了很多 <code>Qt6*.dll</code> 文件，以及 <code>platforms</code>, <code>imageformats</code>, <code>styles</code>, <code>translations</code> 等子文件夹，里面也包含了相应的 <code>.dll</code> 或 <code>.qm</code> 文件。</p>
<p><strong>4. 手动添加非 Qt 依赖</strong></p>
<p><code>windeployqt</code> 只负责 Qt 自身的依赖。我的项目还依赖了 OpenCV、MNN 和我自己编译的 AIEngine。这些库的 DLL 文件需要我们手动复制到 <code>exe</code> 目录中。</p>
<p>根据我的项目配置 (<code>CMakeLists.txt</code>)，这些 DLL 位于：</p>
<ul>
<li><strong>AIEngine.dll</strong>: <code>lib/AIEngine/proj_ai_engine/Arch/x86/Windows/build/bin/Release/AIEngine.dll</code></li>
<li><strong>MNN.dll</strong>: <code>lib/MNN/bin/MNN.dll</code></li>
<li><strong>OpenCV DLLs</strong>: <code>lib/opencv/x64/vc17/bin/</code> 目录下的所有 <code>opencv_*.dll</code> 文件。</li>
</ul>
<p>将这些 DLL 文件全部复制到 <code>exe</code> 目录下，与 <code>proj_ai_vision_app.exe</code> 和 <code>Qt6*.dll</code> 放在一起。</p>
<p>至此，这个 <code>exe</code> 文件夹就包含了运行 <code>proj_ai_vision_app</code> 所需的所有基本文件。理论上，将这个文件夹拷贝到其他 Windows 电脑上（前提是目标电脑安装了对应版本的 Microsoft Visual C++ Redistributable，因为 AIEngine 是用 MSVC 编译的），应该就能运行了。</p>
<h2 id="三创建单个可执行文件使用-enigma-virtual-box">三、创建单个可执行文件（使用 Enigma Virtual Box）</h2>
<p>虽然带依赖文件夹的方式很标准，但有时分发一个单独的 EXE 文件会更方便。我选择了 <strong>Enigma Virtual Box</strong> 这款免费工具来尝试实现这个目标。它的原理是将所有依赖文件虚拟化地打包进主 EXE 中。</p>
<p><strong>1. 下载与安装</strong></p>
<p>前往 <a href="https://enigmaprotector.com/en/downloads.html" target="_blank" rel="noopener nofollow">Enigma Virtual Box 官网</a> 下载并安装。</p>
<p><strong>2. Enigma Virtual Box 基本配置</strong></p>
<ul>
<li>打开 Enigma Virtual Box。</li>
<li><strong>Enter Input File Name</strong>: 选择我们之前准备好的、位于 <strong>部署目录</strong> (<code>D:\DeskTop\QT_Program\exe\</code>) 中的主程序 <code>proj_ai_vision_app.exe</code>。</li>
<li><strong>Enter Output File Name</strong>: 指定打包后生成的单文件名，例如 <code>D:\DeskTop\QT_Program\exe\proj_ai_vision_app_boxed.exe</code>。</li>
</ul>
<p><strong>3. 添加虚拟文件（关键步骤与踩坑记录）</strong></p>
<p>这是最关键也是我踩坑最多的地方。目标是把所有依赖项都“告诉”Enigma Virtual Box，让它打包进去。</p>
<ul>
<li>
<p><strong>错误尝试 1：直接添加整个部署目录 (<code>exe</code>) 作为子文件夹</strong><br>
我最初的想法是，既然所有东西都在 <code>exe</code> 目录里，那我就把这个 <code>exe</code> 文件夹整个添加到 Enigma 的虚拟文件系统 <code>%DEFAULT FOLDER%</code> 下。<br>
<em>结果：</em> 运行打包后的程序，直接报错 “Cannot load library AIEngine.dll”。<br>
<em>原因：</em> Enigma 创建的虚拟文件系统 <code>%DEFAULT FOLDER%</code> 对于运行在其中的 <code>proj_ai_vision_app.exe</code> 来说，就是它认为的“当前目录”。Windows 加载器默认只在 EXE 所在的当前目录查找直接依赖的 DLL。我把 DLL 都放到了虚拟的 <code>exe</code> 子文件夹里，程序自然在它认为的当前目录（虚拟根目录）找不到它们。</p>
</li>
<li>
<p><strong>错误尝试 2：添加了错误的源文件（Qt 构建目录）</strong><br>
我还尝试过把 Qt Creator 的构建目录 (<code>Desktop_Qt_6_7_3_MSVC2022_64bit-Release</code>) 添加进去。<br>
<em>结果：</em> 同样失败。<br>
<em>原因：</em> 构建目录里包含的是编译中间产物，而不是最终部署需要的文件，结构完全不对。</p>
</li>
<li>
<p><strong>关键依赖：VC++ 运行时库</strong><br>
反复失败后，我们排查到 <code>AIEngine.dll</code> 是我自己用 Visual Studio 2022 (MSVC) 编译的，它运行时依赖特定版本的 <strong>Microsoft Visual C++ Redistributable</strong> 运行时库。<code>windeployqt</code> 不会处理这个依赖。这些运行时库（主要是 <code>vcruntime140.dll</code>, <code>msvcp140.dll</code>, <code>vcruntime140_1.dll</code> 等）也必须被打包进去！<br>
<em>查找路径：</em> 这些 DLL 可以在 VS 安装目录下的 <code>VC\Redist\MSVC\&lt;version_number&gt;\x64\Microsoft.VC143.CRT</code> 找到。<br>
<em>操作：</em> 将这个 <code>Microsoft.VC143.CRT</code> 文件夹下的<strong>所有 DLL 文件</strong>复制出来。</p>
</li>
<li>
<p><strong>正确的做法：重建部署目录结构于虚拟根目录</strong><br>
最终的解决方案是，模拟程序运行时所需的真实文件结构，将其“平铺”到 Enigma Virtual Box 的虚拟根目录 (<code>%DEFAULT FOLDER%</code>) 下：</p>
<ol>
<li><strong>移除</strong>之前错误添加的 <code>exe</code> 文件夹或构建目录。</li>
<li><strong>添加 DLL 文件</strong>：将物理部署目录 (<code>D:\DeskTop\QT_Program\exe</code>) 下的<strong>所有 <code>.dll</code> 文件</strong>（包括 <code>AIEngine.dll</code>, <code>MNN.dll</code>, 所有 <code>opencv_*.dll</code>, 所有 <code>Qt6*.dll</code>, <code>opengl32sw.dll</code> 等）直接添加到 <code>%DEFAULT FOLDER%</code> 下。</li>
<li><strong>添加 VC++ 运行时 DLL</strong>：将从 VS Redist 目录找到的 <code>Microsoft.VC143.CRT</code> 文件夹下的所有 <code>.dll</code> 文件也添加到 <code>%DEFAULT FOLDER%</code> 下。</li>
<li><strong>添加 Qt 插件文件夹</strong>：将物理部署目录 (<code>D:\DeskTop\QT_Program\exe</code>) 下的 <code>platforms</code>, <code>imageformats</code>, <code>styles</code>, <code>translations</code> 等<strong>子文件夹</strong>（使用 "Add Folder Recursively" 或类似选项）添加到 <code>%DEFAULT FOLDER%</code> 下，保持它们的子文件夹结构。</li>
</ol>
</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/3089600/202504/3089600-20250421105202356-1218353995.png" alt="image" loading="lazy"></p>
<p>最终，<code>%DEFAULT FOLDER%</code> 下应该直接包含所有必需的 DLL，以及顶级的 Qt 插件文件夹和 VC++ 运行时 DLLs。</p>
<p><strong>4. 打包与测试</strong></p>
<p>确认 Enigma Virtual Box 的文件列表结构正确后，点击界面右下角的 "Process" 按钮。等待打包完成。然后，将生成的 <code>proj_ai_vision_app_boxed.exe</code> 文件复制到一台<strong>没有</strong>安装 Qt、VS 开发环境和相关库的干净 Windows 电脑上，双击运行。</p>
<p>经过上面正确的步骤处理后，这次终于成功运行了！</p>
<p><strong>总结</strong></p>
<p>创建单文件 EXE 对于分发确实更简洁，但需要对程序的运行时依赖有更清晰的认识。使用 Enigma Virtual Box 这类工具的关键在于，在它的虚拟文件系统中正确地重建程序运行时所期望的文件和目录结构。特别是对于自己编译的库，千万不要忘记它依赖的 VC++ 运行时库。同时，程序运行时需要加载的数据文件（如 AI 模型）也必须一并打包进去。这次踩坑经历虽然曲折，但也加深了对 Windows 程序部署和依赖管理的理解。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.12472544427199074" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-21 11:24">2025-04-21 10:55</span>&nbsp;
<a href="https://www.cnblogs.com/Vsonic12138">笑眯眯办大事</a>&nbsp;
阅读(<span id="post_view_count">111</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18838123);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18838123', targetLink: 'https://www.cnblogs.com/Vsonic12138/p/18838123', title: 'Windows下将QT打包为可执行文件（exe）的完整流程，包含第三方库。' })">举报</a>
</div>
        