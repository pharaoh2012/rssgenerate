
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/longronglang/p/18701906" title="发布于 2025-02-06 23:51">
    <span role="heading" aria-level="2">VSCODE接入DeepSeek R1实现AI完成自动化脚本实战开发</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>大家好，我是六哥，今天还是我们喜爱的DeepSeek的玩法，今天来个实战案例，和大家分享一下如何将DeepSeek接入VS Code，结合AI Toolkit插件完成自动化脚本的实战开发。</p>
<h2 id="一准备">一、准备</h2>
<p>微软官方为我们提供了一个针对AI辅助的插件——AI Toolkit for Visual Studio Code。这个插件功能强大，可以利用各种开源或商用的大模型，目前已经集成了DeepSeek R1模型，能让我们在VS Code中方便地借助DeepSeek进行代码开发。</p>
<h3 id="安装ai-toolkit插件并启用deepseek">安装AI ToolKit插件并启用DeepSeek</h3>
<p>在VS Code的插件中心找到AI Toolkit并完成安装。<br>
<img src="https://img2024.cnblogs.com/blog/718867/202502/718867-20250206234933210-913044255.png" alt="" loading="lazy"></p>
<p>安装完成后，在插件页面选择Catalog中的Models模型页面，通过筛选条件“hosted by Github”以及“publisher DeepSeek”来使用DeepSeek - R1模型。</p>
<p><img src="https://img2024.cnblogs.com/blog/718867/202502/718867-20250206234945523-1099217348.png" alt="" loading="lazy"></p>
<h2 id="二使用ai帮助生成脚本">二、使用AI帮助生成脚本</h2>
<p>有了DeepSeek模型后，我们就可以新建一个Playground让DeepSeek帮助我们生成自动化脚本。以下是我让DeepSeek生成的针对saucedemo的测试脚本的相关思考过程：</p>
<p><img src="https://img2024.cnblogs.com/blog/718867/202502/718867-20250206235001746-1750631003.png" alt="" loading="lazy"></p>
<h3 id="1项目结构确定">1、项目结构确定</h3>
<p>POM模式下，通常会有page对象、测试用例、配置文件、数据文件等。可能需要这样的目录结构：</p>
<pre><code class="language-bash">├── data
│   └── users.yml
├── pages
│   ├── __init__.py
│   ├── login_page.py
│   ├── products_page.py
│   └── checkout_page.py
├── tests
│   └── test_saucedemo.py
├── conftest.py
└── requirements.txt
</code></pre>
<h3 id="2用户数据处理">2、用户数据处理</h3>
<p>用户数据存放在user.yml里，里面应该有不同的用户类型，比如标准用户、锁定用户、错误密码用户、没有用户名或密码的用户等。测试用例要读取这些数据，可能用pyYAML库来读取user.yml文件，在测试时用<code>@pytest.mark.parametrize</code>参数化输入不同的用户数据。</p>
<pre><code class="language-yaml">valid_user:
  username: "standard_user"
  password: "secret_sauce"

invalid_users:
  - username: "locked_out_user"
    password: "secret_sauce"
    error: "Epic sadface: Sorry, this user has been locked out."
  - username: "invalid_user"
    password: "wrong_password"
    error: "Epic sadface: Username and password do not match any user in this service"
</code></pre>
<h3 id="3page-object-model实现">3、Page Object Model实现</h3>
<p>每个页面比如登录页、商品页、结算页都有自己的类，封装元素和操作。例如，LoginPage有用户名、密码输入框，登录按钮，错误提示的方法。</p>
<p><strong>pages/login_page.py</strong></p>
<pre><code class="language-python">from playwright.sync_api import Page

class LoginPage:
    def __init__(self, page: Page):
        self.page = page
        self.username = page.locator("#user-name")
        self.password = page.locator("#password")
        self.login_button = page.locator("#login-button")
        self.error_message = page.locator(".error-message-container")

    def navigate(self):
        self.page.goto("https://www.saucedemo.com/")

    def login(self, username: str, password: str):
        self.username.fill(username)
        self.password.fill(password)
        self.login_button.click()
</code></pre>
<p><strong>pages/products_page.py</strong></p>
<pre><code class="language-python">from playwright.sync_api import Page

class ProductsPage:
    def __init__(self, page: Page):
        self.page = page
        self.title = page.locator(".title")
        self.inventory_items = page.locator(".inventory_item")
        self.cart_button = page.locator(".shopping_cart_link")

    def add_to_cart(self, index: int = 0):
        self.inventory_items.nth(index).locator("button").click()

    def go_to_cart(self):
        self.cart_button.click()
</code></pre>
<p><strong>pages/checkout_page.py</strong></p>
<pre><code class="language-python">from playwright.sync_api import Page

class CheckoutPage:
    def __init__(self, page: Page):
        self.page = page
        self.first_name = page.locator("#first-name")
        self.last_name = page.locator("#last-name")
        self.postal_code = page.locator("#postal-code")
        self.continue_button = page.locator("#continue")
        self.finish_button = page.locator("#finish")
        self.complete_header = page.locator(".complete-header")

    def fill_info(self, first: str, last: str, zipcode: str):
        self.first_name.fill(first)
        self.last_name.fill(last)
        self.postal_code.fill(zipcode)
        self.continue_button.click()

    def complete_checkout(self):
        self.finish_button.click()
</code></pre>
<h3 id="4测试用例设计">4、测试用例设计</h3>
<p>测试用例应该使用pytest的参数化来覆盖不同的用户场景。比如正常登录成功、无效密码、锁定用户等。同时，checkout流程需要正常流程的测试，可能还有填写信息不完整的情况。</p>
<pre><code class="language-python">import pytest
import yaml
from playwright.sync_api import Page

with open("data/users.yml") as f:
    test_data = yaml.safe_load(f)

@pytest.mark.parametrize("user", test_data["invalid_users"])
def test_invalid_login(page: Page, user):
    login_page = LoginPage(page)
    login_page.navigate()
    login_page.login(user["username"], user["password"])
    assert login_page.error_message.is_visible()
    assert user["error"] in login_page.error_message.inner_text()

def test_valid_login_and_checkout(page: Page):
    # Login
    login_page = LoginPage(page)
    login_page.navigate()
    login_page.login(test_data["valid_user"]["username"], 
                    test_data["valid_user"]["password"])
    
    # Add product
    products_page = ProductsPage(page)
    assert products_page.title.inner_text() == "Products"
    products_page.add_to_cart()
    products_page.go_to_cart()

    # Checkout
    page.click("#checkout")
    checkout_page = CheckoutPage(page)
    checkout_page.fill_info("John", "Doe", "12345")
    checkout_page.complete_checkout()
    
    assert checkout_page.complete_header.inner_text() == "THANK YOU FOR YOUR ORDER"
</code></pre>
<h3 id="5fixture设置">5、fixture设置</h3>
<p>在conftest.py里面设置Playwright的fixture，比如browser、page，以及各个page对象的fixture。比如，每次测试前都转到登录页，登录后到库存页，这样可以处理前置条件。</p>
<pre><code class="language-python">import pytest
from playwright.sync_api import Playwright

@pytest.fixture(scope="function")
def page(playwright: Playwright):
    browser = playwright.chromium.launch(headless=False)
    context = browser.new_context()
    page = context.new_page()
    yield page
    context.close()
    browser.close()
</code></pre>
<h3 id="6依赖库">6、依赖库</h3>
<pre><code class="language-bash">pytest
playwright
PyYAML
</code></pre>
<p><strong>关键点说明：</strong></p>
<ol>
<li>POM模式分层清晰，每个页面封装对应的操作和元素定位</li>
<li>使用YAML文件管理测试数据，便于维护和扩展</li>
<li>参数化测试支持多种异常场景验证</li>
<li>完整的端到端测试流程覆盖登录-加购-结账全流程</li>
<li>使用Playwright的同步API简化测试编写</li>
<li>通过conftest管理浏览器实例</li>
</ol>
<h2 id="三整合项目步骤">三、整合项目步骤</h2>
<h3 id="1需要检查的测试场景">1、需要检查的测试场景</h3>
<h4 id="登录">登录</h4>
<ul>
<li>正确用户密码登录成功。</li>
<li>错误密码提示错误信息。</li>
<li>锁定用户无法登录。</li>
<li>空用户名或密码提示错误。</li>
</ul>
<h4 id="checkout">Checkout</h4>
<ul>
<li>正常填写所有信息，完成订单。</li>
<li>必填字段缺失（如first name为空）提示错误。</li>
<li>取消订单流程。</li>
</ul>
<h3 id="2实施步骤">2、实施步骤</h3>
<ul>
<li>创建项目结构，安装依赖：pytest、playwright、pyyaml。</li>
<li>编写user.yml，包含不同类型的用户数据。</li>
<li>实现各个页面的Page类，包含元素定位和操作方法。</li>
<li>在conftest.py中定义fixture，例如初始化page，创建各page对象的实例。</li>
<li>编写测试用例，参数化用户数据，覆盖正常和异常流程。</li>
<li>处理测试中的等待和断言，确保元素的存在或文本正确。</li>
</ul>
<h3 id="3关键点说明">3、关键点说明</h3>
<ul>
<li>POM模式分层清晰，每个页面封装对应的操作和元素定位</li>
<li>使用YAML文件管理测试数据，便于维护和扩展</li>
<li>参数化测试支持多种异常场景验证</li>
<li>完整的端到端测试流程覆盖登录-加购-结账全流程</li>
<li>使用Playwright的同步API简化测试编写</li>
<li>通过conftest管理浏览器实例</li>
</ul>
<h2 id="四效果">四、效果</h2>
<p><img src="https://img2024.cnblogs.com/blog/718867/202502/718867-20250206235020377-1378878650.png" alt="" loading="lazy"></p>
<h2 id="五结论">五、结论</h2>
<p>参照DeepSeek给出的结果，基本不用做太大的微调就可以执行成功，确实极大提升了我们进行自动化实现的效率。最难能可贵的是，DeepSeek给出的思考过程，对于我们代码实现和用例设计的要点也有极大的参考价值！</p>

</div>
<div id="MySignature" role="contentinfo">
    <p><span style="font-family: 微软雅黑; font-size: 22px; font-weight: normal; font-style: italic; text-decoration: none"><strong>优秀不够，你是否无可替代</strong></span></p>
<p><span style="font-family: 微软雅黑; font-size: 18px; font-weight: normal; font-style: italic; text-decoration: none"><strong>
软件测试交流QQ群：721256703，期待你的加入！！</strong></span></p>
<p><span style="font-family: 微软雅黑; font-size: 18px; font-weight: normal; font-style: italic; text-decoration: none"><strong>欢迎关注我的微信公众号：软件测试君 </strong></span></p>
<img src="https://www.cnblogs.com/images/cnblogs_com/longronglang/1061549/o_QQ%E6%88%AA%E5%9B%BE20190728134401.jpg" height="200" width="450"><br>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.017052278358796295" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-06 23:51">2025-02-06 23:51</span>&nbsp;
<a href="https://www.cnblogs.com/longronglang">久曲健</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18701906" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18701906);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18701906', targetLink: 'https://www.cnblogs.com/longronglang/p/18701906', title: 'VSCODE接入DeepSeek R1实现AI完成自动化脚本实战开发' })">举报</a>
</div>
        