<!----> <meta itemprop="headline" content="三年 Vue 跑来学习 React，确实有点难"> <meta itemprop="keywords" content="前端,Vue.js,React.js"> <meta itemprop="datePublished" content="2024-11-03T07:44:00.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="岁月可贵"> <meta itemprop="url" content="https://juejin.cn/user/1258302989143437"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-7cdd11fb="">
            三年 Vue 跑来学习 React，确实有点难
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-7cdd11fb=""><div class="author-info-box" data-v-7cdd11fb=""><div class="author-name" data-v-7cdd11fb=""><a href="/user/1258302989143437/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-7cdd11fb=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    岁月可贵
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-7cdd11fb=""><time datetime="2024-11-03T07:44:00.000Z" title="Sun Nov 03 2024 07:44:00 GMT+0000 (Coordinated Universal Time)" class="time" data-v-7cdd11fb="">
                    2024-11-03
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-7cdd11fb=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-7cdd11fb=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-7cdd11fb=""></circle></svg> <span class="views-count" data-v-7cdd11fb="">
                    13,794
                  </span> <span class="read-time" data-v-7cdd11fb=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-7cdd11fb=""><rect width="16" height="16" fill="none" data-v-7cdd11fb=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-7cdd11fb=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-7cdd11fb=""></path></svg>
                    阅读7分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-7cdd11fb=""></div> <!----> <!----></div> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-7cdd11fb=""><div class="article-viewer markdown-body result"><h2 data-id="heading-0">一、前言</h2>
<p>本人 22 届的，21年参加工作，满打满算也快三年了😁😁</p>
<p>平常主要的技术栈是 vue。之所以跑来学习 React，是因为公司在使用一款 sciter 开发一些应用。</p>
<p>不知道 sciter <a href="https://link.juejin.cn?target=https%3A%2F%2Fsciter.com%2F" target="_blank" title="https://sciter.com/" ref="nofollow noopener noreferrer">可以点击这里了解一下</a>（跟 electron 类似，ToDesk 应用就是使用这个框架开发的）</p>
<p>由于没有现成的组件库，所以需要内部自行开发。组件都偏向于 <strong>JXS 编程</strong>。故过来学习一下 React 及 其 React 周边框架。</p>
<p>之前也有了解学过一些但都没怎么实践过。内容如有不对，也请掘友们指出，谢谢。
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/81a12dadaae64d29a7d625b61cc1c100~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bKB5pyI5Y-v6LS1:q75.awebp?rk3s=f64ab15b&amp;x-expires=1738543737&amp;x-signature=7e5eUmXqmn9hr4zb3VQXlKWdVeg%3D" alt="img" loading="lazy"></p>
<p>接下来进入正文。。。。</p>
<h2 data-id="heading-1">二、基本使用</h2>
<h3 data-id="heading-2">1、✍️ 创建项目</h3>
<ul>
<li>创建 React 项目（ <code>npx create-react-app demo</code>）</li>
<li>进入 React 项目目录（<code>cd demo</code>）</li>
<li>启动 React 项目（<code>npm run start</code>）</li>
</ul>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/2d3995af148f4b1db00140109a097ce0~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bKB5pyI5Y-v6LS1:q75.awebp?rk3s=f64ab15b&amp;x-expires=1738543737&amp;x-signature=l7u9W%2FOdFuMgNR3mIk8gbReXMuo%3D" alt="1.png" loading="lazy"></p>
<h3 data-id="heading-3">2、✍️ 基本语法及注意事项</h3>
<p><code>src 创建入口 index.js</code></p>
<pre><code class="hljs language-jsx" lang="jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">"react-dom"</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./App'</span>
<span class="hljs-comment">// ReactDOM.render(组件名称，要注入的元素)</span>
<span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span>/&gt;</span></span>,
  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'root'</span>)
);
</code></pre>
<p><code>src 创建组件 App.jsx</code></p>
<pre><code class="hljs language-jsx" lang="jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>
<span class="hljs-keyword">const</span> title = <span class="hljs-string">"你好世界"</span>
<span class="hljs-comment">// 类组件</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> {
   <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>){
     <span class="hljs-keyword">return</span> (
       <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
         <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{title}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
     )
   }
}
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/6fd5b0c6724e41dc9c06d1fa50d00149~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bKB5pyI5Y-v6LS1:q75.awebp?rk3s=f64ab15b&amp;x-expires=1738543737&amp;x-signature=dO%2BXG8g2YPmh3PtbSj3w71ol5Uo%3D" alt="1.png" loading="lazy"></p>
<h3 data-id="heading-4">3、✍️ React 使用上的区别</h3>
<h4 data-id="heading-5">3.1、✨ 渲染方面`</h4>
<pre><code class="hljs language-jsx" lang="jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">const</span> msg = <span class="hljs-string">"你好世界"</span>
<span class="hljs-keyword">const</span> mystyle = {<span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">'red'</span>}
<span class="hljs-keyword">let</span> flag = <span class="hljs-literal">true</span>;
<span class="hljs-keyword">let</span> arr  = [<span class="hljs-string">"刘备"</span>, <span class="hljs-string">"关羽"</span>, <span class="hljs-string">"张飞"</span>]
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> {
  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> (
      <span class="xml"><span class="hljs-tag">&lt;&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{msg}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
       
        {/* 不能使用 for 改成 htmlFor */}
        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">htmlFor</span>=<span class="hljs-string">"username"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"username"</span>/&gt;</span>

        {/* 不能使用 class 改成 className */}
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"box"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
       
        {/* 双括号 */}
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">{{backgroundColor:</span> '<span class="hljs-attr">red</span>'}}&gt;</span>内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        {/* 单括号 */}
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">{mystyle}</span>&gt;</span>内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        {/* 三元运算符 */}
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">{{backgroundColor:</span> <span class="hljs-attr">flag</span>? '<span class="hljs-attr">green</span>'<span class="hljs-attr">:</span>'<span class="hljs-attr">red</span>'}}&gt;</span>内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
         {/* 循环 */}
        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>
          {
            {/* 只能使用 map 不能使用 forEach (forEach 没有返回值，而 map 有返回值) */}
            arr.map((item, index) =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{index}</span>&gt;</span>{item}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>)
          }
        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>
      <span class="hljs-tag">&lt;/&gt;</span></span>
    )
  }
}
</code></pre>
<h4 data-id="heading-6">3.2、✨ 事件方面</h4>
<pre><code class="hljs language-jsx" lang="jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> {
 <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>){
   <span class="hljs-variable language_">super</span>(props);
   <span class="hljs-comment">// 状态管理</span>
   <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = {
     <span class="hljs-attr">num</span>: <span class="hljs-number">1</span>
   }
 }
  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> (
     <span class="xml"><span class="hljs-tag">&lt;&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{this.state.num}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
      {/* 方式一：普通 */}
      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>this.setState({num: this.state.num + 1})}&gt;按钮1 - 累加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
      {/* 方式二：需要改变 this 指向，否则 this 为空 */}
      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{this.addNum.bind(this)}</span>&gt;</span>按钮2 - 累加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
      {/* 方式三：箭头函数 */}
      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span>this.addNum()}&gt;按钮3 - 累加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
     <span class="hljs-tag">&lt;/&gt;</span></span>
    )
  }
  <span class="hljs-title function_">addNum</span>(<span class="hljs-params"></span>){
      <span class="hljs-comment">// 修改状态</span>
      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>({<span class="hljs-attr">num</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">num</span> + <span class="hljs-number">1</span>})
  }
}
</code></pre>
<h4 data-id="heading-7">3.3、✨ 通信方面</h4>
<p><code>父 =》子</code></p>
<pre><code class="hljs language-jsx" lang="jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span> 
<span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">props</span>) { 
    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>子组件{props.num}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span> 
} 

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Father</span>(<span class="hljs-params"></span>) { 
    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">num</span>=<span class="hljs-string">{123}/</span>&gt;</span></span> 
}
</code></pre>
<p><code> 子 =》父</code></p>
<pre><code class="hljs language-jsx" lang="jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">props</span>) {
    <span class="hljs-keyword">return</span> (
       <span class="xml"><span class="hljs-tag">&lt;&gt;</span>
         <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>子组件{props.num}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
         <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>props.changeNum(321)}&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
       <span class="hljs-tag">&lt;/&gt;</span></span>
    )
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Father</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> [num, setNum] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">123</span>)
  <span class="hljs-comment">// 提供给子组件用来修改 num 的函数</span>
  <span class="hljs-keyword">const</span> <span class="hljs-title function_">changeNumFn</span> = (<span class="hljs-params">num</span>) =&gt; <span class="hljs-title function_">setNum</span>(num)
  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">num</span>=<span class="hljs-string">{num}</span> <span class="hljs-attr">changeNum</span>=<span class="hljs-string">{changeNumFn}/</span>&gt;</span></span>
}
</code></pre>
<blockquote>
<p>跟 Vue 不同的地方是：</p>
<ul>
<li>父传子没太大区别</li>
<li>子传父：
<ul>
<li>Vue 是通过触发器将值传出，父组件对子组件进行监听</li>
<li>React 是将处理函数传递给子组件</li>
</ul>
</li>
</ul>
</blockquote>
<p><code>跨代传值</code></p>
<pre><code class="hljs language-jsx" lang="jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useState, createContext } <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>

<span class="hljs-comment">// 创建上下文空间 （Provider 提供者，Consumer 消费者）</span>
<span class="hljs-keyword">const</span> <span class="hljs-title class_">NumContext</span> = <span class="hljs-title function_">createContext</span>()

<span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>) {
     <span class="hljs-keyword">return</span> (
         <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">NumContext.Consumer</span>&gt;</span>
            {
              ({num, setNum})=&gt;{
                  return (
                     <span class="hljs-tag">&lt;&gt;</span>
                       <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>子组件{num}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
                       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>setNum(456)}&gt;修改Num<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
                     <span class="hljs-tag">&lt;/&gt;</span></span>
                  )
              }     
            }
         &lt;/<span class="hljs-title class_">NumContext</span>.<span class="hljs-property">Consumer</span>&gt;
     )
}

<span class="hljs-keyword">const</span> <span class="hljs-title class_">Father</span>() =&gt; <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Child</span> /&gt;</span></span>

<span class="hljs-comment">// 顶级组件</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">const</span> [num, setNum] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">123</span>);
    <span class="hljs-keyword">return</span> (
        {<span class="hljs-comment">/* 透传 */</span>}
        &lt;<span class="hljs-title class_">NumContext</span>.<span class="hljs-property">Provider</span> value={{num, setNum}}&gt;
             &lt;<span class="hljs-title class_">Father</span>&gt;
        &lt;/<span class="hljs-title class_">NumContext</span>.<span class="hljs-property">Provider</span>&gt;
    )
}
</code></pre>
<h4 data-id="heading-8">3.4、✨ 生命周期</h4>
<p><code>挂载完成 mounted</code></p>
<pre><code class="hljs language-jsx" lang="jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>
<span class="hljs-keyword">import</span> { useEffect } <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) {
   <span class="hljs-comment">// Hook 只能用在组件函数中的最顶层 </span>
   <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {
    <span class="hljs-comment">// 这里主要用于发送 axios 请求</span>
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"挂载完成"</span>)
  })
}
</code></pre>
<p><code>数据更新 update</code></p>
<pre><code class="hljs language-jsx" lang="jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>
<span class="hljs-keyword">import</span> { useState, useEffect } <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> [num1, setNum1] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>);
  <span class="hljs-keyword">const</span> [num2, setNum2] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>); 
   <span class="hljs-comment">// 监听一个数据</span>
   <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {
       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'num1更新'</span>)
   }, [num1])
    
   <span class="hljs-comment">// 监听多个数据</span>
   <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'更新'</span>)
  }, [num1, num2])
    
  <span class="hljs-comment">// 监听所有</span>
  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'更新'</span>)
  })
   
  <span class="hljs-comment">// 不监听</span>
  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'更新'</span>)
  }, [])
}
</code></pre>
<p><code>销毁前 beforeDestroy</code></p>
<pre><code class="hljs language-jsx" lang="jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>
<span class="hljs-keyword">import</span> { useEffect } <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) {
  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">()=&gt;</span>{
      <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> {
        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'销毁阶段'</span>);
      }
  })
}
</code></pre>
<p><em>组件这部分写得比较简单😂😂，只了解了几个比较常用的钩子。实际 React 生命周期函数也是很丰富的，如后面有时间会加深这部分的了解。</em></p>
<h2 data-id="heading-9">三、高阶组件</h2>
<p><strong>下面例子是获取鼠标移动位置，将这部分逻辑进行抽离</strong></p>
<h3 data-id="heading-10">1、✍️ Props 和&nbsp;Render 抽离公共逻辑</h3>
<pre><code class="hljs language-jsx" lang="jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> {
  state = { <span class="hljs-attr">position</span>: { <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">0</span> } }
  
  <span class="hljs-comment">// 去处理一些公共逻辑</span>
  mousemove = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {
    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>({ <span class="hljs-attr">position</span>: { <span class="hljs-attr">x</span>: event.<span class="hljs-property">clientX</span>, <span class="hljs-attr">y</span>: event.<span class="hljs-property">clientY</span> } });
  }
  
  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) {
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onMousemove</span>=<span class="hljs-string">{this.mousemove}</span>&gt;</span>{this.props.render(this.state)}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
  }
}
</code></pre>
<pre><code class="hljs language-jsx" lang="jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">MouseComponentRP</span> = (<span class="hljs-params">props</span>) =&gt; {
    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">RPFactory</span> <span class="hljs-attr">render</span>=<span class="hljs-string">{</span>
            (<span class="hljs-attr">props</span>) =&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 300px; height: 300px; background:yellow;"</span>&gt;</span>x:{props.position.x} - y:{props.position.y}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        } /&gt;</span>
    )
}
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/0ffb31a21e36452786ae87945c0ec119~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bKB5pyI5Y-v6LS1:q75.awebp?rk3s=f64ab15b&amp;x-expires=1738543737&amp;x-signature=EmV0FawDgOTWEp1SjjKWLxfBKMg%3D" alt="1.png" loading="lazy"></p>
<h3 data-id="heading-11">2、✍️ 使用 HOC 抽离公共逻辑</h3>
<pre><code class="hljs language-jsx" lang="jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">HOCFactory</span> = (<span class="hljs-params">Component</span>) =&gt; {
  <span class="hljs-keyword">class</span> <span class="hljs-title class_">HOC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> {
      state = { <span class="hljs-attr">position</span>: { <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">0</span> } }
      
      <span class="hljs-comment">// 去处理一些公共逻辑</span>
      mousemove = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {
        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>({
            <span class="hljs-attr">position</span>: {
                <span class="hljs-attr">x</span>: event.<span class="hljs-property">clientX</span>,
                <span class="hljs-attr">y</span>: event.<span class="hljs-property">clientY</span>
            }
        });
      }
      
      <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) {
            <span class="hljs-keyword">return</span> (
                <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hoc-factory"</span> <span class="hljs-attr">onMousemove</span>=<span class="hljs-string">{this.mousemove}</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">Component</span> {<span class="hljs-attr">...this.props</span>} <span class="hljs-attr">position</span>=<span class="hljs-string">{this.state.position}</span> /&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
            )
      }
  }
  <span class="hljs-keyword">return</span> <span class="hljs-variable constant_">HOC</span>
}
</code></pre>
<pre><code class="hljs language-jsx" lang="jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MouseComponentOne</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> {
    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) {
        <span class="hljs-keyword">return</span> (
            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 300px; height: 300px; background:red;"</span>&gt;</span>
               x:{this.props.position.x} - y:{this.props.position.y}
            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
        )
    }
}
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">MouseComponentHOC</span> = <span class="hljs-title class_">HOCFactory</span>(<span class="hljs-title class_">MouseComponentOne</span>);
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/65dc154efb724316808685039f08e8dc~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bKB5pyI5Y-v6LS1:q75.awebp?rk3s=f64ab15b&amp;x-expires=1738543737&amp;x-signature=wykl%2FFN5ybiUB9gziwdTgBzFkHM%3D" alt="1.png" loading="lazy"></p>
<h2 data-id="heading-12">四、React 周边框架</h2>
<h3 data-id="heading-13">1、✍️ <strong>Redux</strong> 与 <strong>react-redux</strong> 使用</h3>
<h4 data-id="heading-14">1.1、✨ 创建 store</h4>
<pre><code class="hljs language-jsx" lang="jsx"><span class="hljs-keyword">import</span> { createStore } <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span>;

<span class="hljs-keyword">const</span> defaultState = {
    <span class="hljs-attr">language</span>: <span class="hljs-string">'zh'</span>,
    <span class="hljs-attr">languageList</span>: [
        { <span class="hljs-attr">name</span>: <span class="hljs-string">'中文'</span>, <span class="hljs-attr">code</span>: <span class="hljs-string">'zh'</span> },
        { <span class="hljs-attr">name</span>: <span class="hljs-string">'英文'</span>, <span class="hljs-attr">code</span>: <span class="hljs-string">'en'</span> }
    ]
}

<span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">state = defaultState, action</span>) =&gt; {
    <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) {
        <span class="hljs-keyword">case</span> <span class="hljs-string">"change_language"</span>:
            <span class="hljs-keyword">return</span> { ...state, <span class="hljs-attr">language</span>: action.<span class="hljs-property">payload</span> };
        <span class="hljs-attr">default</span>:
            <span class="hljs-keyword">return</span> state
    }
}

<span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(reducer);
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;

</code></pre>
<p><strong>注意</strong></p>
<ul>
<li><strong>参数 state 是旧数据</strong></li>
<li>在 redux 中&nbsp;<strong>不能直接修改参数 state</strong>&nbsp;, 其 state 是&nbsp;<code>immutable</code>（不可修改的），需要将参数 state 赋值给一个新对象，在该新对象对状态进行修改。</li>
</ul>
<h4 data-id="heading-15">1.2、✨ 入口文件导入 store</h4>
<pre><code class="hljs language-jsx" lang="jsx"><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">'redux/index'</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Provider</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>
<span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">{store}</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span>,
    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'root'</span>)
)
</code></pre>
<h4 data-id="heading-16">1.3、✨ 在类组件中使用</h4>
<pre><code class="hljs language-jsx" lang="jsx"><span class="hljs-keyword">import</span> { connect } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>;

<span class="hljs-comment">// 将 store 中的数据注入到 props </span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">mapStateTopProps</span> = (<span class="hljs-params">state</span>) =&gt; {
    <span class="hljs-keyword">return</span> {
        <span class="hljs-attr">language</span>: state.<span class="hljs-property">language</span>,
        <span class="hljs-attr">languageList</span>: state.<span class="hljs-property">languageList</span>
    }
}

<span class="hljs-comment">// 将 dispatch 导入到 props</span>
<span class="hljs-keyword">const</span> mapDispatchToProps = (dispatch) {
    <span class="hljs-keyword">return</span> {
        <span class="hljs-attr">changeLanguage</span>: <span class="hljs-function">(<span class="hljs-params">code</span>) =&gt;</span> {
            <span class="hljs-keyword">const</span> action = {
                <span class="hljs-attr">type</span>: <span class="hljs-string">"change_language"</span>,
                <span class="hljs-attr">payload</span>: code
            }
            <span class="hljs-title function_">dispatch</span>(action);
        }
    }
}

<span class="hljs-keyword">class</span> <span class="hljs-title class_">HeaderComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> {

    menuClickHander = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">changeLanguage</span>(e.<span class="hljs-property">key</span>);
    }

    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) {
        <span class="hljs-keyword">return</span> (
            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"header"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">Dropdown.Button</span>
                    <span class="hljs-attr">overlay</span>=<span class="hljs-string">{</span>
                        &lt;<span class="hljs-attr">Menu</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> this.menuClickHander} items={this.props.languageList.map(l =&gt; { return { key: l.code, label: l.name } })} /&gt;
                    }&gt;{this.props.language === 'zh' ? '中文' : 'English'}<span class="hljs-tag">&lt;/<span class="hljs-name">Dropdown.Button</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
        )
    }
}
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">HeaderClass</span> = <span class="hljs-title function_">connect</span>(mapStateTopProps, mapDispatchToProps)(<span class="hljs-title class_">HeaderComponent</span>);
</code></pre>
<h4 data-id="heading-17">1.4、✨ 函数组件中使用</h4>
<pre><code class="hljs language-jsx" lang="jsx"><span class="hljs-keyword">import</span> { useSelector, useDispatch } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>;
<span class="hljs-keyword">const</span> <span class="hljs-title function_">HeaderFC</span> = (<span class="hljs-params"></span>) =&gt; {
    <span class="hljs-comment">// 获取 store 数据</span>
    <span class="hljs-keyword">const</span> language = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">language</span>);
    <span class="hljs-keyword">const</span> languageList = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">languageList</span>);

    <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>();

    <span class="hljs-keyword">const</span> <span class="hljs-title function_">menuClickHander</span> = (<span class="hljs-params">e</span>) =&gt; {
        <span class="hljs-keyword">const</span> action = {
            <span class="hljs-attr">type</span>: <span class="hljs-string">'change_labguage'</span>,
            <span class="hljs-attr">payload</span>: e.<span class="hljs-property">key</span>
        }
        <span class="hljs-title function_">dispatch</span>(action);
    }

    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"header"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">Dropdown.Button</span>
                <span class="hljs-attr">overlay</span>=<span class="hljs-string">{</span> &lt;<span class="hljs-attr">Menu</span> 
                            <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> this.menuClickHander} 
                            items={languageList.map(l =&gt; { return { key: l.code, label: l.name } })} /&gt;
                }&gt;{language === 'zh' ? '中文' : 'English'}
                <span class="hljs-tag">&lt;/<span class="hljs-name">Dropdown.Button</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
    )
}
 <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HeaderFC</span>;
</code></pre>
<h3 data-id="heading-18">2、✍️ <strong>Redux-toolkit</strong>&nbsp;、<strong>React-redux</strong>、<strong>Redux-persist</strong></h3>
<p><strong>实现 store 数据持久化</strong></p>
<h4 data-id="heading-19">2.1、✨ store 入口文件（redux/index.js）</h4>
<pre><code class="hljs language-jsx" lang="jsx"><span class="hljs-comment">// 导入各个模块的 reducer</span>
<span class="hljs-keyword">import</span> <span class="hljs-variable language_">global</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./modules/global'</span>;
<span class="hljs-keyword">import</span> auth <span class="hljs-keyword">from</span> <span class="hljs-string">'./modules/auth'</span>;

<span class="hljs-keyword">import</span> reduxThunk <span class="hljs-keyword">from</span> <span class="hljs-string">"redux-thunk"</span>;
<span class="hljs-keyword">import</span> reduxPromise <span class="hljs-keyword">from</span> <span class="hljs-string">"redux-promise"</span>;

<span class="hljs-keyword">import</span> { configureStore, combineReducers } <span class="hljs-keyword">from</span> <span class="hljs-string">"@reduxjs/toolkit"</span>;

<span class="hljs-keyword">const</span> reducer = <span class="hljs-title function_">combineReducers</span>({
    <span class="hljs-variable language_">global</span>,
    auth
});

<span class="hljs-comment">// 持久化 reducer 配置</span>
<span class="hljs-keyword">const</span> persistConfig = {
    <span class="hljs-attr">key</span>: <span class="hljs-string">"redux-state"</span>,
	<span class="hljs-attr">storage</span>: storage
}
<span class="hljs-keyword">const</span> persistReducerConfig = <span class="hljs-title function_">persistReducer</span>(persistConfig, reducer);

<span class="hljs-comment">// redux middleWares</span>
<span class="hljs-keyword">const</span> middleWares = [reduxThunk, reduxPromise];

<span class="hljs-comment">// 创建 store</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">configureStore</span>({
	<span class="hljs-attr">reducer</span>: persistReducerConfig,
	<span class="hljs-attr">middleware</span>: middleWares,
	<span class="hljs-attr">devTools</span>: <span class="hljs-literal">true</span>
});

<span class="hljs-comment">// 创建持久化 store</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> persistor = <span class="hljs-title function_">persistStore</span>(store);
</code></pre>
<h4 data-id="heading-20">2.2、✨ 创建模块</h4>
<p><strong>global 模块（redux/modules/global.js）</strong></p>
<pre><code class="hljs language-jsx" lang="jsx"><span class="hljs-keyword">import</span> { createSlice, <span class="hljs-title class_">PayloadAction</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"@reduxjs/toolkit"</span>;
<span class="hljs-keyword">const</span> globalState = {
    <span class="hljs-attr">themeConfig</span>: {
        <span class="hljs-comment">// 默认 primary 主题颜色</span>
        <span class="hljs-attr">primary</span>: <span class="hljs-string">"#1890ff"</span>,
        <span class="hljs-comment">// 深色模式</span>
        <span class="hljs-attr">isDark</span>: <span class="hljs-literal">false</span>,
        <span class="hljs-comment">// 色弱模式(weak) || 灰色模式(gray)</span>
        <span class="hljs-attr">weakOrGray</span>: <span class="hljs-string">""</span>,
        <span class="hljs-comment">// 面包屑导航</span>
        <span class="hljs-attr">breadcrumb</span>: <span class="hljs-literal">true</span>,
        <span class="hljs-comment">// 标签页</span>
        <span class="hljs-attr">tabs</span>: <span class="hljs-literal">true</span>,
        <span class="hljs-comment">// 页脚</span>
        <span class="hljs-attr">footer</span>: <span class="hljs-literal">true</span>
    }
    <span class="hljs-comment">// ....</span>
}

<span class="hljs-keyword">const</span> globalSlice = <span class="hljs-title function_">createSlice</span>({
    <span class="hljs-attr">name</span>: <span class="hljs-string">'global'</span>,
    <span class="hljs-attr">initialState</span>: globalState,
    <span class="hljs-attr">reducers</span>: {
        <span class="hljs-title function_">setThemeConfig</span>(<span class="hljs-params">state, {payload}</span>) {
            state.<span class="hljs-property">themeConfig</span>.<span class="hljs-property">isDark</span> = payload;
        }
    }
});

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> { setThemeConfig } = globalSlice.<span class="hljs-property">actions</span>;
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> globalSlice.<span class="hljs-property">reducer</span>;
</code></pre>
<h4 data-id="heading-21">2.3、✨ 对 reudx 进行注册</h4>
<pre><code class="hljs language-jsx" lang="jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Provider</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"react-redux"</span>;
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">PersistGate</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"redux-persist/integration/react"</span>;
<span class="hljs-keyword">import</span> { store, persistor } <span class="hljs-keyword">from</span> <span class="hljs-string">"@/redux/index.js"</span>;
<span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(
   <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">{store}</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">PersistGate</span> <span class="hljs-attr">persistor</span>=<span class="hljs-string">{persistor}</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">PersistGate</span>&gt;</span> 
   <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span>,
   <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">"root"</span>)
)
</code></pre>
<h4 data-id="heading-22">2.4、 ✨ 使用 redux</h4>
<p><strong>创建修改主题色组件</strong></p>
<pre><code class="hljs language-jsx" lang="jsx"><span class="hljs-keyword">import</span> { useDispatch, useSelector } <span class="hljs-keyword">from</span> <span class="hljs-string">"react-redux"</span>;
<span class="hljs-keyword">import</span> { setThemeConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">"@/redux/modules/global"</span>;

<span class="hljs-keyword">const</span> <span class="hljs-title function_">SwitchDark</span> = (<span class="hljs-params"></span>) =&gt; {
    <span class="hljs-keyword">const</span> themeConfig = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">global</span>.<span class="hljs-property">themeConfig</span>);
    <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>();
    <span class="hljs-keyword">const</span> <span class="hljs-title function_">onChange</span> = (<span class="hljs-params"></span>) =&gt; {
        <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">setThemeConfig</span>(!themeConfig.<span class="hljs-property">isDark</span>))
    }
    <span class="hljs-keyword">return</span> (
       <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>
            <span class="hljs-attr">className</span>=<span class="hljs-string">"dark"</span>
            <span class="hljs-attr">defaultChecked</span>=<span class="hljs-string">{themeConfig.isDark}</span>
            <span class="hljs-attr">checkedChildren</span>=<span class="hljs-string">{</span>&lt;&gt;</span>🌞<span class="hljs-tag">&lt;/&gt;</span></span>}
            unCheckedChildren={<span class="xml"><span class="hljs-tag">&lt;&gt;</span>🌜<span class="hljs-tag">&lt;/&gt;</span></span>}
            onChange={onChange}
	   /&gt;
    )
}
</code></pre>
<h3 data-id="heading-23">3、✍️ Vuex 与 Redux 的区别</h3>
<h4 data-id="heading-24">3.1、✨ Redux 工作流程</h4>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/87fbf6af028f4770b70b8eac3bfe6634~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bKB5pyI5Y-v6LS1:q75.awebp?rk3s=f64ab15b&amp;x-expires=1738543737&amp;x-signature=LCzclxIg8zoliDdsC9Z%2Fmp%2Baecc%3D" alt="1.png" loading="lazy"></p>
<ul>
<li>首先，用户（通过 view）发送 Action，发送方式就用到了 dispatch 方法。</li>
<li>然后，Store 自动调用 Reducer，并传入俩个参数，当前 State 和 收到的 Action。而 Reducer 会返回新的 State。</li>
<li>最后，Store 根据接收到的 State，判断是否发生变化。一旦发生变化，Store 中的数据会进行更新。</li>
<li>同时，Store 会回调监听函数，来更新 View（外部通过subscribe 来订阅事件）</li>
</ul>
<p>store 类似于&nbsp;<strong>数据存储中心</strong></p>
<p>但是他要更改数据的时候不能直接修改，数据修改更新的角色由Reducers来担任，store只做存储</p>
<h4 data-id="heading-25">3.2、 ✨ Vuex 工作流程</h4>
<ul>
<li>Vuex 由于 Vue<strong>自动重新渲染</strong>的特性，无需订阅重新渲染函数，只要生成新的State即可</li>
<li>Vuex 改进了Redux中的 Action 和 Reducer 函数，以 mutations 变化函数取代Reducer，无需switch，只需在对应的 <strong>mutation函数</strong> 里改变 state 值即可</li>
<li>Vuex 数据流的顺序是∶View 调用 store.commit 提交对应的请求到 Store 中对应的mutation函数-&gt;store 改变（<strong>vue检测到数据变化自动渲染</strong>）</li>
</ul>
<h3 data-id="heading-26">4、✍️ React-router-dom 使用</h3>
<p>之前了解过 <a href="https://juejin.cn/post/7167626383521218590" target="_blank" title="https://juejin.cn/post/7167626383521218590"># react-router-dom 路由系统</a></p>
<h2 data-id="heading-27">五、总结</h2>
<p>花了一个多星期学了 React 及其周边框架的基本使用。最大的感受是相比较下 Vue 会提供很多 API 去供开发者使用，而 React 更多的是自力更生，比较考验 JavaScript 的编程功底。</p>
<p>vue 和 React 各有千秋，都有各自的优势。就不做更多评价。
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/cc8d9274234243d2acb91ed1aeed56a3~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bKB5pyI5Y-v6LS1:q75.awebp?rk3s=f64ab15b&amp;x-expires=1738543737&amp;x-signature=CsYsn9Tq%2Bd0LdoNhkRQTTTnsWBY%3D" alt="img" loading="lazy"></p>
<p>最后，感谢掘友的阅读！！！
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/9fda788343c24fffa41984dc1c05d575~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bKB5pyI5Y-v6LS1:q75.awebp?rk3s=f64ab15b&amp;x-expires=1738543737&amp;x-signature=Wye54mdsM8kx9WkMy0h2bKsQj2I%3D" alt="img" loading="lazy"></p>
<p>内容如有不对，也请大家能够指出。
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/81a12dadaae64d29a7d625b61cc1c100~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bKB5pyI5Y-v6LS1:q75.awebp?rk3s=f64ab15b&amp;x-expires=1738543737&amp;x-signature=7e5eUmXqmn9hr4zb3VQXlKWdVeg%3D" alt="img" loading="lazy"></p></div></div>