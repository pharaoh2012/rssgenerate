
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18762039" title="发布于 2025-03-10 10:28">
    <span role="heading" aria-level="2">manim边学边做--线性变换的场景类</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在数学可视化领域，<code>Manim</code>的<code>LinearTransformationScene</code>类为线性代数教学提供了强大的工具。</p>
<p>这个专门设计的场景类继承自<code>VectorScene</code>，通过内置的变换动画和坐标系管理，能够直观展示线性变换的几何意义。</p>
<p>其核心功能包括：</p>
<ul>
<li>自动管理坐标系和基向量的变换</li>
<li>支持矩阵变换、逆变换、转置变换等多种变换类型</li>
<li>自动保留变换痕迹</li>
<li>集成向量和单位正方形的动态展示</li>
</ul>
<h1 id="1-lineartransformationscene概要">1. LinearTransformationScene概要</h1>
<p><strong>线性变换</strong>是线性代数中的核心概念之一，它描述了如何通过矩阵将一个向量空间映射到另一个向量空间。</p>
<p>在实际教学和研究中，理解线性变换的几何意义往往比单纯计算矩阵乘法更具挑战性。</p>
<p><code>LinearTransformationScene</code>正是为了帮助学习者更好地理解线性变换的几何本质而设计的。</p>
<p>它提供了许多参数和方法，用于定制和控制线性变换动画的行为。</p>
<h2 id="11-主要参数">1.1. 主要参数</h2>
<p><code>LinearTransformationScene</code>的主要参数有：</p>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>include_background_plane</td>
<td>bool</td>
<td>是否在场景中包含背景平面。背景平面是一个坐标网格，用于帮助观察线性变换对整个空间的影响。</td>
</tr>
<tr>
<td>include_foreground_plane</td>
<td>bool</td>
<td>是否包含前景平面。前景平面通常用于突出显示某些特定的几何对象，如向量或图形。</td>
</tr>
<tr>
<td>show_coordinates</td>
<td>bool</td>
<td>是否显示背景平面的坐标轴。</td>
</tr>
<tr>
<td>show_basis_vectors</td>
<td>bool</td>
<td>是否显示基向量</td>
</tr>
<tr>
<td>leave_ghost_vectors</td>
<td>bool</td>
<td>是否在变换后保留基向量的原始位置。这对于观察变换的动态过程非常有用。</td>
</tr>
<tr>
<td>i_hat_color</td>
<td>Color</td>
<td>基向量<code>i_hat</code>的颜色（默认绿色）</td>
</tr>
<tr>
<td>j_hat_color</td>
<td>Color</td>
<td>基向量<code>j_hat</code>的颜色（默认红色）</td>
</tr>
</tbody>
</table>
<h2 id="12-主要方法">1.2. 主要方法</h2>
<p><code>LinearTransformationScene</code>的主要方法有：</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>apply_matrix</td>
<td>应用一个矩阵变换到整个场景中。</td>
</tr>
<tr>
<td>apply_inverse</td>
<td>应用矩阵的逆变换。</td>
</tr>
<tr>
<td>apply_nonlinear_transformation</td>
<td>应用非线性变换。</td>
</tr>
<tr>
<td>add_vector</td>
<td>添加一个向量到场景中，并将其加入可移动向量列表。</td>
</tr>
<tr>
<td>add_unit_square</td>
<td>添加一个单位正方形到场景中。</td>
</tr>
<tr>
<td>write_vector_coordinates</td>
<td>显示向量的坐标矩阵。</td>
</tr>
</tbody>
</table>
<h1 id="2-使用示例">2. 使用示例</h1>
<p>为了更好地理解<code>LinearTransformationScene</code>的强大功能，下面通过示例展示其在不同场景下的应用。</p>
<h2 id="21-矩阵变换">2.1. 矩阵变换</h2>
<p>在这个示例中，我们展示了如何通过矩阵<code>[[2, 1], [0, 1]]</code>对整个坐标系进行变换。</p>
<p><code>show_coordinates=True</code>和<code>leave_ghost_vectors=True</code>参数使得变换过程更加直观。</p>
<pre><code class="language-python"># 在__init__函数中
# 设置LinearTransformationScene的参数
def __init__(self, **kwargs):
    super().__init__(
        show_coordinates=True,
        leave_ghost_vectors=True,
        **kwargs,
    )

matrix = [[2, 1], [0, 1]]
self.apply_matrix(matrix)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250310102813557-1713549328.gif" alt="" loading="lazy"></p>
<h2 id="22-向量的变换">2.2. 向量的变换</h2>
<p>此示例中，我们添加了一个黄色的向量<code>[2, 1]</code>，并应用了一个矩阵变换。</p>
<p>通过观察向量在变换前后的变化，可以更直观地理解线性变换对向量的影响。</p>
<pre><code class="language-python">vector = Arrow(ORIGIN, [2, 1, 0], color=YELLOW)
self.add_vector(vector)
self.apply_matrix([[1, -1], [1, 1]])
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250310102813543-737336270.gif" alt="" loading="lazy"></p>
<h2 id="23-单位正方形的变换">2.3. 单位正方形的变换</h2>
<p>此示例中，我们添加了一个单位正方形，并对其应用了一个矩阵变换。</p>
<p>通过观察单位正方形在变换下的变化，可以直观地理解线性变换对面积和形状的影响。</p>
<pre><code class="language-python">self.add_unit_square(animate=True)
self.apply_matrix([[1, -1], [1, 1]])
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250310102813602-614150514.gif" alt="" loading="lazy"></p>
<p>这个示例在<code>ManimCE v0.19.0</code>版本运行有点问题，源码中似乎少引用了两个类，</p>
<p>对源码文件（<code>manim\scene\vector_space_scene.py</code>）做如下修改。</p>
<pre><code class="language-python"># ... ...

# 这里加上 DrawBorderThenFill 
from ..animation.creation import Create, Write, DrawBorderThenFill

# ... ...

# 这里加上 Group 
from ..mobject.mobject import Mobject, Group
</code></pre>
<h1 id="3-附件">3. 附件</h1>
<p>文中的代码只是关键部分的截取，完整的代码共享在网盘中（<code>linear.py</code>），</p>
<p>下载地址: <a href="https://url11.ctfile.com/d/45455611-65421115-a8be22?p=6872" target="_blank" rel="noopener nofollow">完整代码</a> (访问密码: 6872)</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.8229579300636574" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-10 10:29">2025-03-10 10:28</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">83</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18762039" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18762039);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18762039', targetLink: 'https://www.cnblogs.com/wang_yb/p/18762039', title: 'manim边学边做--线性变换的场景类' })">举报</a>
</div>
        