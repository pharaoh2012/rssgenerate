
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18673860" title="发布于 2025-01-15 22:50">
    <span role="heading" aria-level="2">Peewee：Python 简洁强大的 ORM 框架</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在 <code>Python</code> 的开发世界中，数据库操作是至关重要的一环。</p>
<p>今天介绍的 <code>Peewee</code> 作为一款简洁且功能强大的 <code>ORM</code>（对象关系映射）框架，为开发者提供了高效便捷的数据库交互方式。</p>
<h1 id="1-peewee概述">1. Peewee概述</h1>
<p><code>Peewee</code> 是一个简单小巧的 <code>ORM</code>，它的概念简洁明了，易于学习和使用。</p>
<p>能够与 <code>SQLite</code>、<code>MySQL</code>、<code>MariaDB</code>、<code>PostgreSQL</code> 等多种数据库协同工作，拥有丰富的扩展功能，其源代码托管于 <a href="https://github.com/coleifer/peewee" target="_blank" rel="noopener nofollow">GitHub-peewee</a>。</p>
<p>使用过<code>Python</code>的都知道，<code>SQLAlchemy</code>几乎已经是<code>Python</code>中的标准<code>ORM</code>框架了，功能强大，</p>
<p>为什么还要使用<code>Peewee</code>呢？</p>
<p>首先，<code>Peewee</code> 设计更为简洁，其 API 简单直观，学习曲线平缓，新手能快速上手，而 <code>SQLAlchemy</code> 相对复杂，需要花费更多时间去掌握。</p>
<p>其次，<code>Peewee</code> 代码量较少，在一些简单项目中，其轻量级的特点能使项目结构更清晰，开发效率更高。</p>
<p>例如在小型数据库应用场景下，<code>Peewee</code> 能快速搭建起数据操作模块。</p>
<p>再者，<code>Peewee</code> 的性能在特定场景下表现出色，如对 <code>SQLite</code> 数据库的操作，其资源占用相对较低，能为应用带来更好的运行效果。</p>
<p>总之，如果项目规模不大，或者做一些小工具，那么<code>Peewee</code> 会更加趁手。</p>
<h1 id="2-快速上手">2. 快速上手</h1>
<h2 id="21-初始化数据库">2.1. 初始化数据库</h2>
<p>针对不同的数据库类型，有相应的初始化方式。</p>
<p>下面我们选择使用<code>SQLite</code>：</p>
<pre><code class="language-python">from peewee import SqliteDatabase

db = SqliteDatabase('my_database.db')
</code></pre>
<h2 id="22-模型定义">2.2. 模型定义</h2>
<p>在 <code>Peewee</code> 中，通过定义类来创建模型，类的属性对应数据库表中的字段。例如：</p>
<pre><code class="language-python">from peewee import Model, CharField, IntegerField

class User(Model):
    class Meta:
        database = db

    username = CharField(unique=True)
    age = IntegerField()
</code></pre>
<h2 id="23-创建数据库和表">2.3. 创建数据库和表</h2>
<p>连接数据库，然后就可通过<code>SqliteDatabase</code>来创建表。</p>
<pre><code class="language-python">if __name__ == "__main__":
    db.connect()
    db.create_tables([User])
</code></pre>
<p>执行之后，就会发现创建了sqlite数据库和表。</p>
<pre><code class="language-python">$  sqlite3.exe .\my_database.db
SQLite version 3.45.3 2024-04-15 13:34:05 (UTF-16 console I/O)
Enter ".help" for usage hints.
sqlite&gt; .tables
user
</code></pre>
<p><code>db.create_tables</code>反复执行也没关系，如果表已经存在，不会重复创建。</p>
<h2 id="24-数据存储与检索">2.4. 数据存储与检索</h2>
<p>存储数据时，先创建模型实例并赋值，然后调用 <code>save</code> 方法即可将数据保存到数据库。</p>
<pre><code class="language-python">if __name__ == "__main__":
    user = User(username="Harry", age=23)
    user.save()
</code></pre>
<p>运行之后，查询数据库，发现数据已经写入了数据库。</p>
<pre><code class="language-powershell">sqlite&gt; select * from user;
┌────┬──────────┬─────┐
│ id │ username │ age │
├────┼──────────┼─────┤
│ 1  │ Harry    │ 23  │
└────┴──────────┴─────┘
</code></pre>
<p>检索数据可以使用各种查询方法。如获取单个记录：</p>
<pre><code class="language-powershell">user = User.get(User.username == "Harry")
print(f"name: {user.username}, age: {user.age}")

# 运行结果：
# name: Harry, age: 23
</code></pre>
<h2 id="25-更新记录">2.5. 更新记录</h2>
<p>更新记录，比如将上面的年龄改为30。</p>
<pre><code class="language-python">User.update(age=30).where(User.username == 'Harry').execute()
</code></pre>
<p>运行之后：</p>
<pre><code class="language-powershell">sqlite&gt; select * from user;
┌────┬──────────┬─────┐
│ id │ username │ age │
├────┼──────────┼─────┤
│ 1  │ Harry    │ 30  │
└────┴──────────┴─────┘
</code></pre>
<h2 id="26-删除记录">2.6. 删除记录</h2>
<p>删除记录也很简单：</p>
<pre><code class="language-python">User.delete().where(User.username == 'Harry').execute()
</code></pre>
<p>运行之后：</p>
<pre><code class="language-powershell">sqlite&gt; select * from user;
sqlite&gt; select count(1) from user;
┌──────────┐
│ count(1) │
├──────────┤
│ 0        │
└──────────┘
</code></pre>
<h1 id="3-高级查询功能">3. 高级查询功能</h1>
<p>高级的查询功能包括多条件过滤，排序以及分页查询等等。</p>
<h2 id="31-批量插入数据">3.1. 批量插入数据</h2>
<p>为了演示高级查询功能，先批量插入一批数据。</p>
<pre><code class="language-python">User.insert_many(users, fields=[User.username, User.age]).execute()
</code></pre>
<p>运行结果：</p>
<pre><code class="language-powershell">sqlite&gt; select * from user;
┌────┬──────────┬─────┐
│ id │ username │ age │
├────┼──────────┼─────┤
│ 1  │ harry    │ 23  │
│ 2  │ lily     │ 20  │
│ 3  │ tom      │ 35  │
│ 4  │ jerry    │ 12  │
│ 5  │ kate     │ 42  │
└────┴──────────┴─────┘
</code></pre>
<h2 id="32-多条件查询">3.2. 多条件查询</h2>
<p>多个条件的交集，比如<code>id&gt;2</code><strong>并且</strong><code>age&gt;30</code>的数据：</p>
<pre><code class="language-python">users = User.select().where((User.id &gt; 2) &amp; (User.age &gt; 30)).execute()

print("满足条件的用户：")
for u in users:
    print(f"{u.username}: {u.age}")
</code></pre>
<p>运行结果：</p>
<pre><code class="language-powershell">$  python.exe .\main.py
满足条件的用户：
tom: 35
kate: 42
</code></pre>
<p>多个条件的并集，比如<code>id&gt;4</code><strong>或者</strong><code>age&gt;20</code>的数据：</p>
<pre><code class="language-python">users = User.select().where((User.id &gt; 4) | (User.age &gt; 20)).execute()
</code></pre>
<p>运行结果：</p>
<pre><code class="language-powershell">$  python.exe .\main.py
满足条件的用户：
harry: 23
tom: 35
kate: 42
</code></pre>
<h2 id="33-排序">3.3. 排序</h2>
<p>按照年龄增长排序：</p>
<pre><code class="language-python">users = User.select().order_by(User.age)
</code></pre>
<p>运行结果：</p>
<pre><code class="language-powershell">$  python.exe .\main.py
按照年龄增长排序：
jerry: 12
lily: 20
harry: 23
tom: 35
kate: 42
</code></pre>
<p>按照年龄减少方向排序：</p>
<pre><code class="language-python">users = User.select().order_by(User.age.desc())
</code></pre>
<p>运行结果：</p>
<pre><code class="language-powershell">$  python.exe .\main.py
按照年龄减少排序：
kate: 42
tom: 35
harry: 23
lily: 20
jerry: 12
</code></pre>
<h2 id="34-分页查询">3.4. 分页查询</h2>
<p>最后，再来看看分页查询，这在前端展示大规模数据时非常有用。</p>
<p>一般的<code>ORM</code>会通过<code>SQL</code>语句中的<code>limit</code>和<code>offset</code>来实现分页查询，而<code>Peewee</code>直接提供了分页查询的API。</p>
<pre><code class="language-python">page_number = 1 # 页序号，从1开始
page_size = 3  # 每页数据的数量

users = User.select().paginate(page_number, page_size)
print(f"第{page_number}页数据：")
for u in users:
    print(f"{u.username}: {u.age}")
</code></pre>
<p>运行结果：</p>
<pre><code class="language-powershell">$  python.exe .\main.py
第1页数据：
harry: 23
lily: 20
tom: 35
</code></pre>
<p>这样就显示了前3个数据，如果把上面的<code>page_numberg=2</code>，那么会返回剩下的<strong>2条</strong>数据。</p>
<h1 id="4-总结">4. 总结</h1>
<p><code>Peewee</code> 还拥有众多扩展，如 <code>Playhouse</code> 提供了更多高级功能，包括对不同数据库的特定扩展（如 <code>SQLite</code> 的扩展函数）、模型生成工具、数据库迁移工具、反射功能等，大大增强了 <code>Peewee</code> 的实用性和灵活性。</p>
<p>本篇介绍的是最基本的使用方法，其他还有多表之间关系的建立和查询，请参考官方的文档。</p>
<p>总之，<code>Peewee</code> 以其简洁的语法、丰富的功能和良好的扩展性，成为 <code>Python</code> 开发者在数据库操作方面的有力工具，无论是小型项目还是大型应用，都能提供高效可靠的数据库交互支持。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.06389953361689815" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-15 22:50">2025-01-15 22:50</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">7</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18673860" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18673860);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18673860', targetLink: 'https://www.cnblogs.com/wang_yb/p/18673860', title: 'Peewee：Python 简洁强大的 ORM 框架' })">举报</a>
</div>
        