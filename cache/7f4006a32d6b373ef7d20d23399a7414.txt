
	<h1 class="postTitle"><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/MikeZhang/p/19042729/fsTee2ws20250816" title="发布于 2025-08-16 22:22">
    <span role="heading" aria-level="2">一种FreeSWITCH流量镜像WebSocket音频推流方案</span>
    

</a>
</h1>
	<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><span>环境：CentOS 7.9_x64</span></p>
<p><span>FreeSWITCH版本： 1.10.11（docker 23.0.6部署）</span></p>
<p><span>Python版本：3.9.12</span></p>
<p><strong>之前遇到过一个需求：</strong></p>
<p><span><span>在不影响生产系统业务（FreeSWITCH服务）的情况下，实时推送WebSocket格式语音流给解析服务器，以完成后续服务（比如实时辅助、实时质检等）。</span></span></p>
<p><span><strong>今天整理下该需求的可行性验证笔记并提供示例代码</strong>，如需商业使用请参考文章自行实现。</span></p>
<p><span>本文使用的FreeSWITCH是基于docker部署，如有使用docker部署FreeSWITCH的需求，可参考如下文章：</span></p>
<div><a href="https://www.cnblogs.com/MikeZhang/p/dockerPackFs20230617.html" target="_blank">https://www.cnblogs.com/MikeZhang/p/dockerPackFs20230617.html</a></div>
<div>
<h1><span><span>一、整体结构</span></span></h1>
<p><span>为了演示方便，本文使用基于主机的流量镜像方案，生产环境可使用交换机的镜像口来替换。</span></p>
<p><span>此外，关于编码方面，这里做下简化：</span></p>
<p><span>1）流量镜像rtp编码是g711a（pcma）；</span></p>
<p><span>2）ws推流的目标编码是 L16（16k）；</span></p>
<p>&nbsp;</p>
<p><span>整体结构如下：</span></p>
<p><img src="https://img2024.cnblogs.com/blog/300959/202508/300959-20250816220224367-380512008.png" alt="image" loading="lazy"></p>
<p>&nbsp;</p>
<h1><span><span>二、流量镜像环境准备及策略实现</span></span></h1>
<h2><span><span>1、环境说明</span></span></h2>
<p><span>整体结构如下：</span></p>
<p><img src="https://img2024.cnblogs.com/blog/300959/202508/300959-20250816220258381-739948352.png" alt="image" loading="lazy"></p>
<p>&nbsp;</p>
<p><span>说明：</span></p>
<p><span>1）192.168.137.100机器部署freeswitch，并配置流量镜像推流；</span></p>
<p><span>2）192.168.137.101机器部署流量镜像推流程序、ws模拟服务程序；</span></p>
<h2><span><span>2、推流策略实现及效果验证</span></span></h2>
<p><span>这里使用iptables的tee模块实现流量镜像功能，为了演示方便，这里使用udp流量全推的方案。</span></p>
<p>1）推流策略配置</p>
<p><span>流量镜像配置示例：</span></p>
<div class="cnblogs_code">
<pre>[root@host100 pbx]# <span style="color: rgba(0, 0, 255, 1)">cat</span> /root/tee1.<span style="color: rgba(0, 0, 255, 1)">sh</span><span style="color: rgba(0, 0, 0, 1)">
#</span>! /bin/<span style="color: rgba(0, 0, 0, 1)">bash
iptables </span>-t mangle -<span style="color: rgba(0, 0, 0, 1)">F
iptables </span>-t mangle -I PREROUTING <span style="color: rgba(128, 0, 128, 1)">1</span> -p udp  -j TEE --gateway <span style="color: rgba(128, 0, 128, 1)">192.168</span>.<span style="color: rgba(128, 0, 128, 1)">137.101</span><span style="color: rgba(0, 0, 0, 1)">
iptables </span>-t mangle -I POSTROUTING <span style="color: rgba(128, 0, 128, 1)">1</span> -p udp -j TEE --gateway <span style="color: rgba(128, 0, 128, 1)">192.168</span>.<span style="color: rgba(128, 0, 128, 1)">137.101</span><span style="color: rgba(0, 0, 0, 1)">
iptables </span>-t mangle -L -<span style="color: rgba(0, 0, 0, 1)">v
[root@host100 pbx]#</span></pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202508/300959-20250816220342217-913510059.png" alt="image" loading="lazy"></p>
<p>&nbsp;2）推流效果验证</p>
<p><span>在100机器上执行如下命令：</span></p>
<div class="cnblogs_code">
<pre>nc -u <span style="color: rgba(128, 0, 128, 1)">192.168</span>.<span style="color: rgba(128, 0, 128, 1)">137.108</span> <span style="color: rgba(128, 0, 128, 1)">33330</span></pre>
</div>
<p><span>输入 123456 ，然后执行 ctrl + d 键进行发送。</span></p>
<p><span>在101机器上进行抓包：</span></p>
<div class="cnblogs_code">
<pre>tcpdump -i enp0s3 udp  port <span style="color: rgba(128, 0, 128, 1)">33330</span>  -vvvvvvvvvvvvvvvv</pre>
</div>
<p><span>使用tcpdump验证效果如下：</span></p>
<div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202508/300959-20250816220430401-1294914235.png" alt="image" loading="lazy"></p>
<p>&nbsp;使用wireshark验证效果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/300959/202508/300959-20250816220452335-1560549033.png" alt="image" loading="lazy"></p>
<p>&nbsp;</p>
<h1><span><span>三、<span><span>搭建<span><span>ws验证服务器</span></span></span></span></span></span></h1>
<p><span>为了方便方案验证，这里使用python模拟个ws服务器，该服务器会将收到的音频数据存储为本地pcm文件以便验证。</span></p>
<p><span>这里用的python3.9环境，环境部署可参考如下文章：</span></p>
</div>
<div><a href="https://www.cnblogs.com/MikeZhang/p/centos7-install-py39-20220704.html" target="_blank">https://www.cnblogs.com/MikeZhang/p/centos7-install-py39-20220704.html</a></div>
<p><span>配合验证的ws服务器代码如下（wsServer2.py）：</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> os,json,time
</span><span style="color: rgba(0, 0, 255, 1)">from</span> websockets.sync.server <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> serve
gPcmDir</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">pcmFiles</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> handler(ws):
    callid,tag </span>= <span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">,0
    fout,fName </span>= None,<span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">
    clientId </span>=<span style="color: rgba(0, 0, 0, 1)"> id(ws)
    </span><span style="color: rgba(0, 0, 255, 1)">for</span> msg <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> ws:
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">print("%s,len msg : %d "% (fName,len(msg)))</span>
        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">msg2 = "I got your message: {}".format(msg)</span>
        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">websocket.send(msg)</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> type(msg) ==<span style="color: rgba(0, 0, 0, 1)"> str:
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">if msg.find("initConfig") &gt; -1:</span>
            <span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(msg)
            dtmp </span>=<span style="color: rgba(0, 0, 0, 1)"> json.loads(msg)
            var1 </span>= dtmp.get(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">call_id</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> var1 : call_id =<span style="color: rgba(0, 0, 0, 1)"> var1
            var2 </span>= dtmp.get(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">tag</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> None != var2 : tag =<span style="color: rgba(0, 0, 0, 1)"> var2 
            </span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(call_id,tag)
            </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">fName = "%s-%d.pcm" % (call_id,role)</span>
            fName = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%s/%s.pcm</span><span style="color: rgba(128, 0, 0, 1)">"</span> %<span style="color: rgba(0, 0, 0, 1)"> (gPcmDir,tag)
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> None == fout : fout = open(fName,<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">wb</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">end</span><span style="color: rgba(128, 0, 0, 1)">"</span> == dtmp.get(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">type</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">):
                fout.close()
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> type(msg) ==<span style="color: rgba(0, 0, 0, 1)"> bytes:
            fout.write(msg)
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> None
</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> main():
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(0, 0, 255, 1)">not</span><span style="color: rgba(0, 0, 0, 1)"> os.path.isdir(gPcmDir):os.makedirs(gPcmDir)
    with serve(handler, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">0.0.0.0</span><span style="color: rgba(128, 0, 0, 1)">"</span>, 8765<span style="color: rgba(0, 0, 0, 1)">) as server:
        server.serve_forever()
</span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(128, 0, 128, 1)">__name__</span> == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">__main__</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
    main()</span></pre>
</div>
<p>启动脚本如下（start.sh）</p>
<div class="cnblogs_code">
<pre>#! /bin/<span style="color: rgba(0, 0, 0, 1)">bash
#pydir</span>=<span style="color: rgba(0, 0, 0, 1)">$PWD
pydir</span>=/root/<span style="color: rgba(0, 0, 0, 1)">python39
export CFLAGS</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">-I$pydir/include</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
export LDFLAGS</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">-L$pydir/lib</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
export LD_LIBRARY_PATH</span>=$LD_LIBRARY_PATH:$pydir/<span style="color: rgba(0, 0, 0, 1)">lib
$pydir</span>/bin/python3.<span style="color: rgba(128, 0, 128, 1)">9</span> wsServer2.py</pre>
</div>
<p>运行效果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/300959/202508/300959-20250816220623818-1792629667.png" alt="image" loading="lazy"></p>
<h1>四、核心功能实现</h1>
<p><span>这里列举下核心功能，并提供python示例代码。</span></p>
<h2><span><span>1、从抓包数据中提取alaw音频</span></span></h2>
<p><span>关键点如下：</span></p>
<p><span>1）抓包功能通过libpcap实现；</span></p>
<p><span>2）解析sdp获取rtp端口信息；</span></p>
<p><span>3）根据rtp协议从payload中解析并提取音频数据；</span></p>
<p><span>4）使用ffmpeg将提取的alaw格式音频转换为wav格式，以便验证音频的正确性；</span></p>
<p><span>示例代码如下（pcap2alaw.py）：</span></p>
<p><img src="https://img2024.cnblogs.com/blog/300959/202508/300959-20250816220655636-106783424.png" alt="image" loading="lazy"></p>
<p>完整代码可从如下渠道获取：</p>
<div>关注微信公众号（聊聊博文，文末可扫码）后回复&nbsp;20250816&nbsp;获取。</div>
<h2><span><span>2、alaw音频转换成pcm音频（L16）</span></span></h2>
<p><span>alaw2pcm示例代码：</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> os,struct,socket
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> ctypes as ct
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> audioop
rawFile </span>= b<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">g711a_export1.raw</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
sampwidth </span>= 4<span style="color: rgba(0, 0, 0, 1)">
i,step </span>= 0,160//<span style="color: rgba(0, 0, 0, 1)">sampwidth
fout </span>= open(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">pcm_export1.raw</span><span style="color: rgba(128, 0, 0, 1)">"</span>,<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">wb</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
with open(rawFile,</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">rb</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">) as fin:
    </span><span style="color: rgba(0, 0, 255, 1)">while</span><span style="color: rgba(0, 0, 0, 1)"> True:
        data </span>=<span style="color: rgba(0, 0, 0, 1)"> fin.read(step)
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(0, 0, 255, 1)">not</span> data : <span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">
        data2 </span>=<span style="color: rgba(0, 0, 0, 1)"> audioop.alaw2lin(data, sampwidth)
        fout.write(data2)</span></pre>
</div>
<p><span>提取的音频导入效果如下：</span></p>
<div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202508/300959-20250816220810765-2080589196.png" alt="image" loading="lazy"></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/300959/202508/300959-20250816220821184-1561521890.png" alt="image" loading="lazy"></p>
<p>&nbsp;关于pcm音频的播放可参考如下文章：</p>
<div><a href="https://www.cnblogs.com/MikeZhang/p/pcm20232330.html" target="_blank">https://www.cnblogs.com/MikeZhang/p/pcm20232330.html</a></div>
<div>
<h2><span><span>3、pcm音频以ws格式发送</span></span></h2>
<p><span>pcm转ws示例代码如下（pcm2ws.py）：</span></p>
</div>
</div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202508/300959-20250816220857101-70215487.png" alt="image" loading="lazy"></p>
<p>完整代码可从如下渠道获取：</p>
<div>关注微信公众号（聊聊博文，文末可扫码）后回复&nbsp;20250816&nbsp;获取。</div>
<p>运行效果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/300959/202508/300959-20250816220931514-1792906264.png" alt="image" loading="lazy"></p>
<h1><span><span>五、WebSocket音频推流方案</span></span></h1>
<p><span>这里描述下独立程序的推流方案，即：所有功能都在一个程序里面实现，比如单独的python脚本。</span></p>
<h2><span><span>1、模块设计</span></span></h2>
<p><span>模块设计如下：</span></p>
<p><img src="https://img2024.cnblogs.com/blog/300959/202508/300959-20250816221015518-950574166.png" alt="image" loading="lazy"></p>
<h2>&nbsp;2、程序设计</h2>
<p><span>大致设计思路如下：</span></p>
<p><span>1）启动独立线程ThrdLiveCap，使用libpcap实时抓取流量镜像过来的数据，并将数据推送到指定队列；</span></p>
<p><span>2）启动独立线程ThrdPktParse，解析sip协议，提取uuid、rtp端口等关键信息，并将解析的数据存储到全局缓存中；</span></p>
<p><span>3）启动独立线程ThrdRtp2Ws，监测并启动独立线程，进行ws推流；</span></p>
<h2><span><span>3、示例代码</span></span></h2>
<p><span>这里提供下示例代码。</span></p>
<p><img src="https://img2024.cnblogs.com/blog/300959/202508/300959-20250816221039243-1228594471.png" alt="image" loading="lazy"></p>
<p>完整代码可从如下渠道获取：</p>
<div>关注微信公众号（聊聊博文，文末可扫码）后回复&nbsp;20250816&nbsp;获取。</div>
<h2><span><span>4、运行效果</span></span></h2>
<p><span>1）编写拨号方案</span></p>
<p><span>内容如下：</span></p>
<div class="cnblogs_code">
<pre>  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">extension </span><span style="color: rgba(255, 0, 0, 1)">name</span><span style="color: rgba(0, 0, 255, 1)">="playTest"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
      <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">condition </span><span style="color: rgba(255, 0, 0, 1)">field</span><span style="color: rgba(0, 0, 255, 1)">="destination_number"</span><span style="color: rgba(255, 0, 0, 1)"> expression</span><span style="color: rgba(0, 0, 255, 1)">="^10087$"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">action </span><span style="color: rgba(255, 0, 0, 1)">application</span><span style="color: rgba(0, 0, 255, 1)">="answer"</span><span style="color: rgba(0, 0, 255, 1)">/&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">action </span><span style="color: rgba(255, 0, 0, 1)">application</span><span style="color: rgba(0, 0, 255, 1)">="playback"</span><span style="color: rgba(255, 0, 0, 1)"> data</span><span style="color: rgba(0, 0, 255, 1)">="local_stream://moh"</span><span style="color: rgba(0, 0, 255, 1)">/&gt;</span>
      <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">condition</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">extension</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre>
</div>
<p><span>2）注册1000分机，拨打10087号码，在101机器上启动rtp2ws脚本、wsServer脚本，可成功接收rtp文件。</span></p>
<p><span>运行效果如下：</span>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/300959/202508/300959-20250816221237952-590201508.png" alt="image" loading="lazy"></p>
<p>&nbsp;文件导入效果如下（s16le 16K）：</p>
<p><img src="https://img2024.cnblogs.com/blog/300959/202508/300959-20250816221424563-1582425801.png" alt="image" loading="lazy"></p>
<p>可正常播放。</p>
<p>对应的pcm文件可从文末提供的渠道获取。</p>
<h1>六、资源下载</h1>
<p><span>本文相关资源及运行环境，可从如下渠道获取：</span></p>
<div>关注微信公众号（聊聊博文，文末可扫码）后回复&nbsp;20250816&nbsp;获取。</div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202508/300959-20250816221519197-1850485673.png" alt="image" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/300959/202508/300959-20250816221526536-1994303162.png" alt="image" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
</div>
<div id="MySignature" role="contentinfo">
    如果你对该文章有疑问，可通过微信公众号（聊聊博文）向我提问：<br>
<a href="https://files.cnblogs.com/files/MikeZhang/201804weixingongzhong1.gif" target="_blank">
<img src="https://files.cnblogs.com/files/MikeZhang/201804weixingongzhong1.gif" width="170"></a><br>
转载请注明出处，谢谢！
</div>
<div class="clear"></div>

	<div class="postDesc">posted on 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-16 22:22">2025-08-16 22:22</span>&nbsp;
<a href="https://www.cnblogs.com/MikeZhang">Mike_Zhang</a>&nbsp;
阅读(<span id="post_view_count">97</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19042729);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19042729', targetLink: 'https://www.cnblogs.com/MikeZhang/p/19042729/fsTee2ws20250816', title: '一种FreeSWITCH流量镜像WebSocket音频推流方案' })">举报</a>
</div>
