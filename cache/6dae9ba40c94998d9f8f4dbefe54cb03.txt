<!----> <meta itemprop="headline" content="webSocket封装，心跳检测+断线重连基于ES6 class,已在生产环境上使用，已发布包"> <meta itemprop="keywords" content="前端,JavaScript"> <meta itemprop="datePublished" content="2024-11-07T08:15:43.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="禅思院"> <meta itemprop="url" content="https://juejin.cn/user/4160207732084509"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-7cdd11fb="">
            webSocket封装，心跳检测+断线重连基于ES6 class,已在生产环境上使用，已发布包
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-7cdd11fb=""><div class="author-info-box" data-v-7cdd11fb=""><div class="author-name" data-v-7cdd11fb=""><a href="/user/4160207732084509/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-7cdd11fb=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    禅思院
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-7cdd11fb=""><time datetime="2024-11-07T08:15:43.000Z" title="Thu Nov 07 2024 08:15:43 GMT+0000 (Coordinated Universal Time)" class="time" data-v-7cdd11fb="">
                    2024-11-07
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-7cdd11fb=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-7cdd11fb=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-7cdd11fb=""></circle></svg> <span class="views-count" data-v-7cdd11fb="">
                    8,122
                  </span> <span class="read-time" data-v-7cdd11fb=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-7cdd11fb=""><rect width="16" height="16" fill="none" data-v-7cdd11fb=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-7cdd11fb=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-7cdd11fb=""></path></svg>
                    阅读7分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-7cdd11fb=""></div> <!----> <!----></div> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-7cdd11fb=""><div class="article-viewer markdown-body result"><h2 data-id="heading-0">ES6 class 封装websocket 使用</h2>
<h3 data-id="heading-1">介绍</h3>
<blockquote>
<p>在《菜鸟教程中》这样介绍<code>WebSocket</code></p>
</blockquote>
<ul>
<li><code>WebSocket</code> 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</li>
<li><code>WebSocket</code> 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 <code>WebSocket API</code> 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</li>
<li>在 <code>WebSocket API</code> 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</li>
<li>现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明- 显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。</li>
<li>HTML5 定义的 <code>WebSocket</code> 协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。</li>
<li>浏览器通过 JavaScript 向服务器发出建立 <code>WebSocket</code> 连接的请求，连接建立以后，客户端和服务器端就可以通过 TCP 连接直接交换数据。
当你获取 Web Socket 连接后，你可以通过 send() 方法来向服务器发送数据，并通过 onmessage 事件来接收服务器返回的数据。</li>
</ul>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/041615a8b41e470299425d2a765edb98~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg56aF5oCd6Zmi:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735548429&amp;x-signature=2GM2Nlu1MIxWGH5Nk3P7WjYS1bw%3D" alt="在这里插入图片描述" loading="lazy"></p>
<h3 data-id="heading-2">特点</h3>
<ul>
<li>建立在 TCP 协议之上，服务器端的实现比较容易。</li>
<li>与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</li>
<li>数据格式比较轻量，性能开销小，通信高效。服务器与客户端之间交换的标头信息大概只有2字节;</li>
<li>可以发送文本，也可以发送二进制数据。</li>
<li>没有同源限制，客户端可以与任意服务器通信。</li>
<li>协议标识符是 ws（如果加密，则为wss），服务器网址就是 URL。ex：ws://example.com:80/some/path</li>
<li>不用频繁创建及销毁TCP请求，减少网络带宽资源的占用，同时也节省服务器资源。</li>
<li>WebSocket 是纯事件驱动的，一旦连接建立，通过监听事件可以处理到来的数据和改变的连接状态，数据都以帧序列的形式传输。服务端发送数据后，消息和事件会异步到达。</li>
<li>无超时处理。</li>
</ul>
<h3 data-id="heading-3">适用场景</h3>
<blockquote>
<p>对数据的实时性要求比较强，客户端与服务频繁交互的场景, 比如：</p>
</blockquote>
<ul>
<li>通信</li>
<li>股票</li>
<li>直播</li>
<li>共享桌面</li>
<li>聊天室</li>
<li>实时共享</li>
<li>多人协作
....</li>
</ul>
<h3 data-id="heading-4"><code>WebSocket API</code> 介绍</h3>
<ul>
<li>构造函数WebSocket(url, protocols)：构造WebSocket对象，以及建立和服务器连接; protocols可选字段，代表选择的子协议。</li>
<li>状态变量readyState: 代表当前连接的状态，短整型数据，取值为CONNECTING(值为0)， OPEN(值为1), CLOSING(值为2), CLOSED(值为3)。</li>
<li>方法变量close(code, reason)： 关闭此WebSocket连接。</li>
<li>状态变量bufferedAmount: send函数调用后，被缓存并且未发送到网络上的数据长度。</li>
<li>方法变量send(data): 将数据data通过此WebSocket发送到对端。</li>
<li>回调函数onopen/onmessage/onerror/onclose: 当相应的事件发生时会触发此回调函数</li>
</ul>
<h3 data-id="heading-5"><code>WebSocket</code> 封装思想</h3>
<ol>
<li>基于上述的API上扩展方法，上述的API 方法通过初始化，和参数一起传入，不用做任何操作，还有直接初始化，之后通过对象调用</li>
<li>扩展心跳检测</li>
<li>断线重连</li>
</ol>
<h3 data-id="heading-6">基础知识</h3>
<ol>
<li>ES6的基础语法</li>
<li>ES6的class</li>
</ol>
<h3 data-id="heading-7">E6封装部分源码</h3>
<h4 data-id="heading-8">封装心跳基类</h4>
<blockquote>
<p>什么是心跳？其实心跳就像人类的心脏一样，有跳动，说明还活着。为什么要使用心跳呢？因为我们在使用WebSocket 的过程中，总会遇到网络断开的情况等各种情况，但是在遇到这些情况的时候服务器端并没有触发 onclose 的事件。这样会有：服务器会继续向客户端发送多余的链接，并且这些数据还会丢失。所以就需要一种机制来检测客户端和服务端是否处于正常的链接状态。因此就有了 WebSocket 的心跳了。还有心跳，说明还活着，没有心跳说明已经挂掉了，是不是相当于人类的心脏。</p>
</blockquote>
<blockquote>
<p>心跳机制: 本次封装的封装心跳基类，每隔一段时间会向服务器发送一个数据包，告诉服务器自己还活着，同时客户端会确认服务器端是否还活着，如果还活着的话，就会回传一个数据包给客户端来确定服务器端也还活着，否则的话，有可能是网络断开连接了。需要重连。这个间隔时间参数开放，心跳完成有回调函数，该基类适合大多数有这样原理的场景。做到啦全局复用。</p>
</blockquote>
<blockquote>
<p>心跳基类源码：</p>
</blockquote>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">/**
 * 心跳基类
 */</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">Heart</span> {
  <span class="hljs-variable constant_">HEART_TIMEOUT</span> = <span class="hljs-literal">null</span> <span class="hljs-comment">// 心跳计时器</span>
  <span class="hljs-variable constant_">SERVER_HEART_TIMEOUT</span> = <span class="hljs-literal">null</span> <span class="hljs-comment">// 心跳计时器</span>

  <span class="hljs-title function_">constructor</span> () {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">timeout</span> = <span class="hljs-number">5000</span>
  }
  <span class="hljs-comment">// 重置</span>
  reset () {
    <span class="hljs-built_in">clearTimeout</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">HEART_TIMEOUT</span>)
    <span class="hljs-built_in">clearTimeout</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">SERVER_HEART_TIMEOUT</span>)
    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>
  }
  <span class="hljs-comment">/**
   * 启动心跳
   * <span class="hljs-doctag">@param</span> {<span class="hljs-type">Function</span>} cb 回调函数
   */</span>
  start (cb) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">HEART_TIMEOUT</span> = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {
      <span class="hljs-title function_">cb</span>()
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">SERVER_HEART_TIMEOUT</span> = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {
        <span class="hljs-title function_">cb</span>()
        <span class="hljs-comment">// 重新开始检测</span>
        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">reset</span>().<span class="hljs-title function_">start</span>(cb) <span class="hljs-comment">// this.reset().start(cb())</span>
      }, <span class="hljs-variable language_">this</span>.<span class="hljs-property">timeout</span>)
    }, <span class="hljs-variable language_">this</span>.<span class="hljs-property">timeout</span>)
  }
}
</code></pre>
<h4 data-id="heading-9">封装WebSocket API</h4>
<blockquote>
<p>该封装可以在首次吃实话传入各种配置，永久使用，也可以通过实例化进行调用。</p>
</blockquote>
<blockquote>
<p>封装WebSocket类源码：</p>
</blockquote>
<pre><code class="hljs language-javascript" lang="javascript">**
 *  <span class="hljs-variable constant_">OPTIONS</span> = {
 *    <span class="hljs-attr">url</span>: <span class="hljs-literal">null</span>, <span class="hljs-comment">// 链接的通道的地址</span>
 *    <span class="hljs-attr">heartTime</span>: <span class="hljs-number">5000</span>, <span class="hljs-comment">// 心跳时间间隔</span>
 *    <span class="hljs-attr">heartMsg</span>: <span class="hljs-string">'ping'</span>, <span class="hljs-comment">// 心跳信息,默认为'ping'</span>
 *    <span class="hljs-attr">isReconnect</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否自动重连</span>
 *    <span class="hljs-attr">isRestory</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 是否销毁</span>
 *    <span class="hljs-attr">reconnectTime</span>: <span class="hljs-number">5000</span>, <span class="hljs-comment">// 重连时间间隔</span>
 *    <span class="hljs-attr">reconnectCount</span>: <span class="hljs-number">5</span>, <span class="hljs-comment">// 重连次数 -1 则不限制</span>
 *    <span class="hljs-attr">openCb</span>: <span class="hljs-literal">null</span>, <span class="hljs-comment">// 连接成功的回调</span>
 *    <span class="hljs-attr">closeCb</span>: <span class="hljs-literal">null</span>, <span class="hljs-comment">// 关闭的回调</span>
 *    <span class="hljs-attr">messageCb</span>: <span class="hljs-literal">null</span>, <span class="hljs-comment">// 消息的回调</span>
 *    <span class="hljs-attr">errorCb</span>: <span class="hljs-literal">null</span> <span class="hljs-comment">// 错误的回调</span>
 *   }
 */
<span class="hljs-keyword">class</span> <span class="hljs-title class_">Socket</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Heart</span> {
  ws = <span class="hljs-literal">null</span>

  <span class="hljs-variable constant_">RECONNEC_TTIMER</span> = <span class="hljs-literal">null</span> <span class="hljs-comment">// 重连计时器</span>
  <span class="hljs-variable constant_">RECONNECT_COUNT</span> = <span class="hljs-number">10</span> <span class="hljs-comment">// 变量保存，防止丢失</span>

  <span class="hljs-variable constant_">OPTIONS</span> = {
    <span class="hljs-attr">url</span>: <span class="hljs-literal">null</span>, <span class="hljs-comment">// 链接的通道的地址</span>
    <span class="hljs-attr">heartTime</span>: <span class="hljs-number">5000</span>, <span class="hljs-comment">// 心跳时间间隔</span>
    <span class="hljs-attr">heartMsg</span>: <span class="hljs-string">'ping'</span>, <span class="hljs-comment">// 心跳信息,默认为'ping'</span>
    <span class="hljs-attr">isReconnect</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否自动重连</span>
    <span class="hljs-attr">isRestory</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 是否销毁</span>
    <span class="hljs-attr">reconnectTime</span>: <span class="hljs-number">5000</span>, <span class="hljs-comment">// 重连时间间隔</span>
    <span class="hljs-attr">reconnectCount</span>: <span class="hljs-number">5</span>, <span class="hljs-comment">// 重连次数 -1 则不限制</span>
    <span class="hljs-attr">openCb</span>: <span class="hljs-literal">null</span>, <span class="hljs-comment">// 连接成功的回调</span>
    <span class="hljs-attr">closeCb</span>: <span class="hljs-literal">null</span>, <span class="hljs-comment">// 关闭的回调</span>
    <span class="hljs-attr">messageCb</span>: <span class="hljs-literal">null</span>, <span class="hljs-comment">// 消息的回调</span>
    <span class="hljs-attr">errorCb</span>: <span class="hljs-literal">null</span> <span class="hljs-comment">// 错误的回调</span>
  }
  <span class="hljs-title function_">constructor</span> (ops) {
    <span class="hljs-variable language_">super</span>()
    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">OPTIONS</span>, ops)
    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">create</span>()
  }
  <span class="hljs-comment">/**
   * 建立连接
   */</span>
  create () {
    <span class="hljs-keyword">if</span> (!(<span class="hljs-string">'WebSocket'</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>)) {
      <span class="hljs-comment">/* eslint-disable no-new */</span>
      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">'当前浏览器不支持，无法使用'</span>)
      <span class="hljs-keyword">return</span>
    }
    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">OPTIONS</span>.<span class="hljs-property">url</span>) {
      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">'地址不存在，无法建立通道'</span>)
      <span class="hljs-keyword">return</span>
    }
    <span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">ws</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">ws</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">OPTIONS</span>.<span class="hljs-property">url</span>)
    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">onopen</span>()
    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">onclose</span>()
    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">onmessage</span>()
  }
  <span class="hljs-comment">/**
   * 自定义连接成功事件
   * 如果callback存在，调用callback，不存在调用OPTIONS中的回调
   * <span class="hljs-doctag">@param</span> {<span class="hljs-type">Function</span>} callback 回调函数
   */</span>
  onopen (callback) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">ws</span>.<span class="hljs-property">onopen</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {
      <span class="hljs-built_in">clearTimeout</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">RECONNEC_TTIMER</span>) <span class="hljs-comment">// 清除重连定时器</span>
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">OPTIONS</span>.<span class="hljs-property">reconnectCount</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">RECONNECT_COUNT</span> <span class="hljs-comment">// 计数器重置</span>
      <span class="hljs-comment">// 建立心跳机制</span>
      <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">reset</span>().<span class="hljs-title function_">start</span>(<span class="hljs-function">() =&gt;</span> {
        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">send</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">OPTIONS</span>.<span class="hljs-property">heartMsg</span>)
      })
      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> callback === <span class="hljs-string">'function'</span>) {
        <span class="hljs-title function_">callback</span>(event)
      } <span class="hljs-keyword">else</span> {
        (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">OPTIONS</span>.<span class="hljs-property">openCb</span> === <span class="hljs-string">'function'</span>) &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">OPTIONS</span>.<span class="hljs-title function_">openCb</span>(event)
      }
    }
  }
  <span class="hljs-comment">/**
   * 自定义关闭事件
   * 如果callback存在，调用callback，不存在调用OPTIONS中的回调
   * <span class="hljs-doctag">@param</span> {<span class="hljs-type">Function</span>} callback 回调函数
   */</span>
  onclose (callback) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">ws</span>.<span class="hljs-property">onclose</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {
      <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">reset</span>()
      !<span class="hljs-variable language_">this</span>.<span class="hljs-property">OPTIONS</span>.<span class="hljs-property">isRestory</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">onreconnect</span>()
      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> callback === <span class="hljs-string">'function'</span>) {
        <span class="hljs-title function_">callback</span>(event)
      } <span class="hljs-keyword">else</span> {
        (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">OPTIONS</span>.<span class="hljs-property">closeCb</span> === <span class="hljs-string">'function'</span>) &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">OPTIONS</span>.<span class="hljs-title function_">closeCb</span>(event)
      }
    }
  }
  <span class="hljs-comment">/**
   * 自定义错误事件
   * 如果callback存在，调用callback，不存在调用OPTIONS中的回调
   * <span class="hljs-doctag">@param</span> {<span class="hljs-type">Function</span>} callback 回调函数
   */</span>
  onerror (callback) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">ws</span>.<span class="hljs-property">onerror</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {
      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> callback === <span class="hljs-string">'function'</span>) {
        <span class="hljs-title function_">callback</span>(event)
      } <span class="hljs-keyword">else</span> {
        (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">OPTIONS</span>.<span class="hljs-property">errorCb</span> === <span class="hljs-string">'function'</span>) &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">OPTIONS</span>.<span class="hljs-title function_">errorCb</span>(event)
      }
    }
  }
........
  <span class="hljs-comment">/**
   * 销毁
   */</span>
  destroy () {
    <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">reset</span>()
    <span class="hljs-built_in">clearTimeout</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">RECONNEC_TTIMER</span>) <span class="hljs-comment">// 清除重连定时器</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">OPTIONS</span>.<span class="hljs-property">isRestory</span> = <span class="hljs-literal">true</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">ws</span>.<span class="hljs-title function_">close</span>()
  }
}
</code></pre>
<h3 data-id="heading-10">测试</h3>
<blockquote>
<p>本次测试是基于nodejs 的 nodejs-websocket 模块来实现的一个简单的demo</p>
</blockquote>
<h4 data-id="heading-11">部分源码</h4>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">const</span> createServer = ws.<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">conn</span>) {
  <span class="hljs-comment">//计算心跳时间</span>
  conn.<span class="hljs-property">heart_time</span> = <span class="hljs-number">0</span>

  <span class="hljs-keyword">let</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> {
    <span class="hljs-comment">//检查心跳时间</span>
    <span class="hljs-keyword">if</span> (conn.<span class="hljs-property">heart_time</span> &gt; heart_beat) {
      <span class="hljs-built_in">clearInterval</span>(timer);
      conn.<span class="hljs-title function_">close</span>()
    }
    conn.<span class="hljs-property">heart_time</span>++
  }, <span class="hljs-number">1000</span>)
  <span class="hljs-comment">//uid</span>
  <span class="hljs-keyword">let</span> uid = conn.<span class="hljs-property">path</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">'/'</span>)[conn.<span class="hljs-property">path</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">'/'</span>).<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] || <span class="hljs-string">'0'</span>
  conn.<span class="hljs-property">uid</span> = uid
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`用户<span class="hljs-subst">${uid}</span>已经连接`</span>)
  conn.<span class="hljs-title function_">sendText</span>(<span class="hljs-string">`Hello 用户<span class="hljs-subst">${uid}</span>!`</span>)
.....
  <span class="hljs-comment">//处理错误事件信息</span>
  conn.<span class="hljs-title function_">on</span>(<span class="hljs-string">'error'</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'用户'</span> + uid + <span class="hljs-string">' 已经断开连接，错误原因： '</span> + err)
  })
}).<span class="hljs-title function_">listen</span>(<span class="hljs-number">7041</span>);

</code></pre>
<h4 data-id="heading-12">测试截图</h4>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/b00bb1238c57406da38a5ab91a72d4c6~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg56aF5oCd6Zmi:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735548429&amp;x-signature=3SXm20sb2DfqD8YRg9N3Se0nNO0%3D" alt="在这里插入图片描述" loading="lazy">
<img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/29db47a2afb74dc3b9c74f88967124ef~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg56aF5oCd6Zmi:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735548429&amp;x-signature=O9zZzS%2BDxAH5IMO1Ho07pje%2Bcwk%3D" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/1a3f9bece7054a269d2f0d7113f72e02~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg56aF5oCd6Zmi:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735548429&amp;x-signature=S%2BV%2Bi0tdG08QfVC1Ej9JXWEukuQ%3D" alt="在这里插入图片描述" loading="lazy">
<img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/036d382c62784e829e4b0aaf83c00745~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg56aF5oCd6Zmi:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735548429&amp;x-signature=CzOnX6SD4soyKgD4VSmo6YiA87Q%3D" alt="在这里插入图片描述" loading="lazy"></p>
<p><img alt="在这里插入图片描述转存失败，建议直接上传图片文件" src="" loading="lazy"></p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/14f01c397f7c4e28a0d1c47c39b164cd~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg56aF5oCd6Zmi:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735548429&amp;x-signature=i4tphL7fMVYXYHvShYxpRn1H%2FDs%3D" alt="在这里插入图片描述" loading="lazy"></p>
<h3 data-id="heading-13">资源</h3>
<p>【Websocket  详解】<a href="https://link.juejin.cn?target=http%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2017%2F05%2Fwebsocket.html" target="_blank" title="http://www.ruanyifeng.com/blog/2017/05/websocket.html" ref="nofollow noopener noreferrer">www.ruanyifeng.com/blog/2017/0…</a>
【Node 模拟 Websocket 知识点链接】<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Ftheturtle32%2FWebSocket-Node" target="_blank" title="https://github.com/theturtle32/WebSocket-Node" ref="nofollow noopener noreferrer">github.com/theturtle32…</a></p>
<h3 data-id="heading-14">下面仓库地址</h3>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Flaibin-wang%2Fsocket-heart" target="_blank" title="https://github.com/laibin-wang/socket-heart" ref="nofollow noopener noreferrer">Github</a>
<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fsocket-heart" target="_blank" title="https://www.npmjs.com/package/socket-heart" ref="nofollow noopener noreferrer">npm</a></p></div></div>