<!----> <meta itemprop="headline" content="前端实现画中画超简单，让网页飞出浏览器"> <meta itemprop="keywords" content="前端,JavaScript"> <meta itemprop="datePublished" content="2024-11-28T01:17:54.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="前端金熊"> <meta itemprop="url" content="https://juejin.cn/user/97193028493655"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-7cdd11fb="">
            前端实现画中画超简单，让网页飞出浏览器
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-7cdd11fb=""><div class="author-info-box" data-v-7cdd11fb=""><div class="author-name" data-v-7cdd11fb=""><a href="/user/97193028493655/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-7cdd11fb=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    前端金熊
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-7cdd11fb=""><time datetime="2024-11-28T01:17:54.000Z" title="Thu Nov 28 2024 01:17:54 GMT+0000 (Coordinated Universal Time)" class="time" data-v-7cdd11fb="">
                    2024-11-28
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-7cdd11fb=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-7cdd11fb=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-7cdd11fb=""></circle></svg> <span class="views-count" data-v-7cdd11fb="">
                    6,668
                  </span> <span class="read-time" data-v-7cdd11fb=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-7cdd11fb=""><rect width="16" height="16" fill="none" data-v-7cdd11fb=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-7cdd11fb=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-7cdd11fb=""></path></svg>
                    阅读6分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-7cdd11fb=""></div> <!----> <!----></div> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-7cdd11fb=""><div class="article-viewer markdown-body result"><h2 data-id="heading-0">Document Picture-in-Picture 介绍</h2>
<p>&nbsp;&nbsp;&nbsp;&nbsp;今天，我来介绍一个非常酷的前端功能：<strong>文档画中画</strong> (Document Picture-in-Picture, 本文简称 PiP)。你有没有想过，网页上的任何内容能悬浮在桌面上？😏</p>
<h3 data-id="heading-1">🎬 视频流媒体的画中画功能</h3>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;你可能已经在视频平台（如<code>腾讯视频</code>、<code>哔哩哔哩</code>等网页）见过这种效果：视频播放时，可以点击画中画后。无论你切换页面，它都始终显示在屏幕的最上层，非常适合<code>上班偷偷看电视</code>💻</p>
<p align="center"><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ade085da74d54c76847fda6173496d02~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5YmN56uv6YeR54aK:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736853724&amp;x-signature=9uFgp6ymUuGjaw1lT5tx9JfburI%3D" alt="pip.gif" width="70%" loading="lazy"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在今天的教程中，不仅仅是视频，我将教你如何<code>将任何 HTML 内容放入画中画</code>模式，无论是动态内容、文本、图片，还是纯炫酷的 div，统统都能“飞”起来。✨</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个如此有趣的功能，在网上却很少有详细的教程来介绍这个功能的使用。于是我决定写一篇详细的教程来教大家如何实现画中画 (建议收藏)😁</p>
<h4 data-id="heading-2"><a href="https://link.juejin.cn?target=https%3A%2F%2Fxionglongbing.github.io%2FTreasure-Navigation" target="_blank" title="https://xionglongbing.github.io/Treasure-Navigation" ref="nofollow noopener noreferrer">体验网址：Treasure-Navigation<img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f8ed6f00c976489182de9932a5bfa3d1~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5YmN56uv6YeR54aK:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736853724&amp;x-signature=yr4DlEva0pfVVMb%2FIoYzNKrEnqA%3D" alt="pip08.gif" width="100%" loading="lazy"></a></h4>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fxionglongbing%2FTreasure-Navigation" target="_blank" title="https://github.com/xionglongbing/Treasure-Navigation" ref="nofollow noopener noreferrer">github地址</a></p>
<hr>
<h2 data-id="heading-3">📖 Document Picture-in-Picture 详细教程</h2>
<h3 data-id="heading-4">🛠 HTML 基本代码结构</h3>
<p>&nbsp;&nbsp;&nbsp;&nbsp;首先，我们随便写一个简单的 <code>HTML 页面</code>，后续的 JS 和样式都会基于它实现。</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document Picture-in-Picture API 示例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">
        <span class="hljs-selector-id">#pipContent</span> {
            <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;
            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;
            <span class="hljs-attribute">background</span>: pink;
            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;
        }
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"container"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"pipContent"</span>&gt;</span>这是一个将要放入画中画的 div 元素！<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"clickBtn"</span>&gt;</span>切换画中画<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
        <span class="hljs-comment">// 在这里写你的 JavaScript 代码</span>
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>
</code></pre>
<hr>
<h3 data-id="heading-5">1️. 请求 PiP 窗口</h3>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<code>PiP</code> 的核心方法是 <code>window.documentPictureInPicture.requestWindow</code>。它是一个 <code>异步方法</code>，返回一个新创建的 <code>window</code> 对象。<br>
&nbsp;&nbsp;&nbsp;&nbsp;<code>PIP 窗口</code>可以将其看作一个新的网页，但它始终悬浮在屏幕上方。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">"clickBtn"</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"click"</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
    <span class="hljs-comment">// 获取将要放入 PiP 窗口的 DOM 元素</span>
    <span class="hljs-keyword">const</span> pipContent = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">"pipContent"</span>);
    <span class="hljs-comment">// 请求创建一个 PiP 窗口</span>
    <span class="hljs-keyword">const</span> pipWindow = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">documentPictureInPicture</span>.<span class="hljs-title function_">requestWindow</span>({
        <span class="hljs-attr">width</span>: <span class="hljs-number">200</span>,  <span class="hljs-comment">// 设置窗口的宽度</span>
        <span class="hljs-attr">height</span>: <span class="hljs-number">300</span>  <span class="hljs-comment">// 设置窗口的高度</span>
    });

    <span class="hljs-comment">// 将原始元素添加到 PiP 窗口中</span>
    pipWindow.<span class="hljs-property">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(pipContent);
});
</code></pre>
<h4 data-id="heading-6">演示：</h4>
<p align="center"><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/e9c58e9a1b9149fb99cf596a391e86e8~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5YmN56uv6YeR54aK:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736853724&amp;x-signature=mOxMzE35Dj8ZZrur2bXw7qRcnys%3D" alt="pip01.gif" width="100%" loading="lazy"></p>
<p>👏 <strong>现在，我们已经成功创建了一个画中画窗口！</strong>
这段代码展示了如何将网页中的元素放入一个新的画中画窗口，并让它悬浮在最上面。非常简单吧<br></p>
<h4 data-id="heading-7">关闭PIP窗口</h4>
<p>可以直接点右上角关闭PIP窗口，如果我们想在代码中实现关闭，直接调用<code>window上的api</code>就可以了</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">documentPictureInPicture</span>.<span class="hljs-property">window</span>.<span class="hljs-title function_">close</span>();
</code></pre>
<hr>
<h3 data-id="heading-8">2️. 检查是否支持 PiP 功能</h3>
<p>&nbsp;&nbsp;&nbsp;&nbsp;一切不能<strong>兼容浏览器</strong>的功能介绍都是耍流氓，我们需要检查浏览器是否<code>支持PIIP功能</code>。
实际就是检查documentPictureInPicture属性是否存在于window上 🔧</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">if</span> (<span class="hljs-string">'documentPictureInPicture'</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"🚀 浏览器支持 PiP 功能！"</span>);
} <span class="hljs-keyword">else</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">"⚠️ 当前浏览器不支持 PiP 功能，更新浏览器或者换台电脑吧！"</span>);
}
</code></pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;如果是只需要将视频实现画中画功能，<code>视频画中画 (Picture-in-Picture)</code> 的兼容性会好一点，但是它只能将元素放入画中画窗口。它与本文介绍的 <code>文档画中画(Document Picture-in-Picture)</code> 使用方法也是十分相似的。</p>
<hr>
<h3 data-id="heading-9">3️. 设置 PiP 样式</h3>
<p>&nbsp;&nbsp;&nbsp;&nbsp;我们会发现刚刚创建的画中画<code>没有样式</code>，一点都不美观。那是因为我们只放入了dom元素，没有添加css样式。</p>
<h4 data-id="heading-10">3.1. 全局样式同步</h4>
<p>假设网页中的所有样式如下：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">
        <span class="hljs-selector-id">#pipContent</span> {
            <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;
            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;
            <span class="hljs-attribute">background</span>: pink;
            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;
        }
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://abc.css"</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
</code></pre>
<p>为了方便，我们可以直接把之前的网页的<code>css样式全部赋值给画中画</code>。<br></p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 1. document.styleSheets获取所有的css样式信息</span>
[...<span class="hljs-variable language_">document</span>.<span class="hljs-property">styleSheets</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">styleSheet</span>) =&gt;</span> {
    <span class="hljs-keyword">try</span> {
        <span class="hljs-comment">// 转成字符串方便赋值</span>
        <span class="hljs-keyword">const</span> cssRules = [...styleSheet.<span class="hljs-property">cssRules</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">rule</span>) =&gt;</span> rule.<span class="hljs-property">cssText</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">''</span>);
        <span class="hljs-comment">// 创建style标签</span>
        <span class="hljs-keyword">const</span> style = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">'style'</span>);
        <span class="hljs-comment">// 设置为之前页面中的css信息</span>
        style.<span class="hljs-property">textContent</span> = cssRules;
        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'style'</span>, style);
        <span class="hljs-comment">// 把style标签放到画中画的&lt;head&gt;&lt;head/&gt;标签中</span>
        pipWindow.<span class="hljs-property">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(style);
    } <span class="hljs-keyword">catch</span> (e) {
        <span class="hljs-comment">// 通过 link 引入样式，如果有跨域，访问styleSheet.cssRules时会报错。没有跨域则不会报错</span>
        <span class="hljs-keyword">const</span> link = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">'link'</span>);
        <span class="hljs-comment">/**
         * rel = stylesheet 导入样式表
         * type: 对应的格式
         * media: 媒体查询（如 screen and (max-width: 600px)）
         *  href: 外部样式表的 URL
         */</span>
        link.<span class="hljs-property">rel</span> = <span class="hljs-string">'stylesheet'</span>;
        link.<span class="hljs-property">type</span> = styleSheet.<span class="hljs-property">type</span>;
        link.<span class="hljs-property">media</span> = styleSheet.<span class="hljs-property">media</span>;
        link.<span class="hljs-property">href</span> = styleSheet.<span class="hljs-property">href</span> ?? <span class="hljs-string">''</span>;
        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'error: link'</span>, link);
        pipWindow.<span class="hljs-property">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(link);
    }
});
</code></pre>
<h5 data-id="heading-11">演示：</h5>
<p align="center"><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/5b2806a03f494ac29ab7b194f4ceec99~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5YmN56uv6YeR54aK:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736853724&amp;x-signature=%2BEV3nsB0JV0YrQ3ptRK%2FnU28b5g%3D" alt="image.png" width="100%" loading="lazy"></p>
<hr>
<h4 data-id="heading-12">3.2. 使用 <code>link</code> 引入外部 CSS 文件</h4>
<p>向其他普通<code>html</code>文件一样，可以通过<code>link</code>标签引入特定<code>css</code>文件:</p>
<p>创建 <code>pip.css</code> 文件:</p>
<pre><code class="hljs language-css" lang="css"><span class="hljs-selector-id">#pipContent</span> {
    <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;
    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;
    <span class="hljs-attribute">background</span>: skyblue;
}
</code></pre>
<p><code>js</code>引用：</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 其他不变</span>
<span class="hljs-keyword">const</span> link = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">'link'</span>);
link.<span class="hljs-property">rel</span> = <span class="hljs-string">'stylesheet'</span>;
link.<span class="hljs-property">href</span> = <span class="hljs-string">'./pip.css'</span>;  <span class="hljs-comment">// 引入外部 CSS 文件</span>
pipWindow.<span class="hljs-property">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(link);
pipWindow.<span class="hljs-property">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(pipContent);
</code></pre>
<h5 data-id="heading-13">演示：</h5>
<p align="center"><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f68a70e7d85d40baad68719b4bb06d86~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5YmN56uv6YeR54aK:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736853724&amp;x-signature=SxtpsQsUvxhZomXgTlxTJugpZzM%3D" alt="pip02.gif" width="70%" loading="lazy"></p>
<h4 data-id="heading-14">3.3. 媒体查询的支持</h4>
<p>可以设置媒体查询 <code>@media (display-mode: picture-in-picture)</code>。在普通页面中会自动忽略样式，在画中画模式会自动渲染样式</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">
    <span class="hljs-selector-id">#pipContent</span> {
        <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;
        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;
        <span class="hljs-attribute">background</span>: pink;
        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;
    }
    
    &lt;!-- 普通网页中会忽略 --&gt;
    <span class="hljs-keyword">@media</span> (<span class="hljs-attribute">display-mode</span>: picture-in-picture) {
        <span class="hljs-selector-id">#pipContent</span> {
            <span class="hljs-attribute">background</span>: lightgreen;
        }
    }
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
</code></pre>
<p>在普通页面中显示为<code>粉色</code>，在画中画自动变为<code>浅绿色</code></p>
<h5 data-id="heading-15">演示：</h5>
<p align="center"><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ea5c057d81874147aae9e801fb9bafc8~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5YmN56uv6YeR54aK:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736853724&amp;x-signature=qlNzBqHuJiDdoGwA7eWXMDsT8Wc%3D" alt="pip03.gif" width="70%" loading="lazy"></p>
<hr>
<h3 data-id="heading-16">4️. 监听进入和退出 PiP 模式的事件</h3>
<p>我们还可以为 <code>PiP 窗口</code> 添加<code>事件监听</code>，监控画中画模式的 <strong>进入</strong> 和 <strong>退出</strong>。这样，你就可以在用户操作时，做出相应的反馈，比如显示提示或执行其他操作。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 进入 PIP 事件</span>
documentPictureInPicture.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"enter"</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"已进入 PIP 窗口"</span>);
});

<span class="hljs-keyword">const</span> pipWindow = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">documentPictureInPicture</span>.<span class="hljs-title function_">requestWindow</span>({
    <span class="hljs-attr">width</span>: <span class="hljs-number">200</span>,
    <span class="hljs-attr">height</span>: <span class="hljs-number">300</span>
});
<span class="hljs-comment">// 退出 PIP 事件</span>
pipWindow.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"pagehide"</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"已退出 PIP 窗口"</span>);
});
</code></pre>
<h4 data-id="heading-17">演示</h4>
<p align="center"><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/70197163347c43a3973c2370d480674a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5YmN56uv6YeR54aK:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736853724&amp;x-signature=NCxjxW0vntbc1g54QKp6UEkgiTA%3D" alt="pip04.gif" width="70%" loading="lazy"></p>
<hr>
<h3 data-id="heading-18">5️. 监听 PiP 焦点和失焦事件</h3>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> pipWindow = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">documentPictureInPicture</span>.<span class="hljs-title function_">requestWindow</span>({
    <span class="hljs-attr">width</span>: <span class="hljs-number">200</span>,
    <span class="hljs-attr">height</span>: <span class="hljs-number">300</span>
});

pipWindow.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'focus'</span>, <span class="hljs-function">() =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"PiP 窗口进入了焦点状态"</span>);
});

pipWindow.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'blur'</span>, <span class="hljs-function">() =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"PiP 窗口失去了焦点"</span>);
});
</code></pre>
<h4 data-id="heading-19">演示</h4>
<p align="center"><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/648479b07cf440f8803569be686c4588~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5YmN56uv6YeR54aK:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736853724&amp;x-signature=cppRZkhvXi0KsHXBYW8KsQd49RE%3D" alt="pip05.gif" width="70%" loading="lazy"></p>
<hr>
<h3 data-id="heading-20">6. 克隆节点画中画</h3>
<p>我们会发现我们把原始元素传入到PIP窗口后，原来窗口中的元素就不见了。<br>
我们可以把原始元素克隆后再传入给PIP窗口，这样原始窗口中的元素就不会消失了</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> pipContent = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">"pipContent"</span>);
<span class="hljs-keyword">const</span> pipWindow = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">documentPictureInPicture</span>.<span class="hljs-title function_">requestWindow</span>({
    <span class="hljs-attr">width</span>: <span class="hljs-number">200</span>,
    <span class="hljs-attr">height</span>: <span class="hljs-number">300</span>
});
<span class="hljs-comment">// 核心代码：pipContent.cloneNode(true)</span>
pipWindow.<span class="hljs-property">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(pipContent.<span class="hljs-title function_">cloneNode</span>(<span class="hljs-literal">true</span>));
</code></pre>
<h4 data-id="heading-21">演示</h4>
<p align="center"><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/acece07feb034fb68d1fe8e716aacbd7~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5YmN56uv6YeR54aK:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736853724&amp;x-signature=E7CoF7kOSNK4VT0AcJPT8qoWutU%3D" alt="pip07.gif" width="70%" loading="lazy"></p>
<h3 data-id="heading-22">PIP 完整示例代码</h3>
<pre><code class="hljs language-html" lang="html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document Picture-in-Picture API 示例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">
        <span class="hljs-selector-id">#pipContent</span> {
            <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;
            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;
            <span class="hljs-attribute">background</span>: pink;
            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;
        }
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"container"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"pipContent"</span>&gt;</span>这是一个将要放入画中画的 div 元素！<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"clickBtn"</span>&gt;</span>切换画中画<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
        <span class="hljs-comment">// 检查是否支持 PiP 功能</span>
        <span class="hljs-keyword">if</span> (<span class="hljs-string">'documentPictureInPicture'</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>) {
            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"🚀 浏览器支持 PiP 功能！"</span>);
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">"⚠️ 当前浏览器不支持 PiP 功能，更新浏览器或者换台电脑吧！"</span>);
        }

        <span class="hljs-comment">// 请求 PiP 窗口</span>
        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">"clickBtn"</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"click"</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
            <span class="hljs-keyword">const</span> pipContent = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">"pipContent"</span>);

            <span class="hljs-comment">// 请求创建一个 PiP 窗口</span>
            <span class="hljs-keyword">const</span> pipWindow = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">documentPictureInPicture</span>.<span class="hljs-title function_">requestWindow</span>({
                <span class="hljs-attr">width</span>: <span class="hljs-number">200</span>,  <span class="hljs-comment">// 设置窗口的宽度</span>
                <span class="hljs-attr">height</span>: <span class="hljs-number">300</span>  <span class="hljs-comment">// 设置窗口的高度</span>
            });

            <span class="hljs-comment">// 将原始元素克隆并添加到 PiP 窗口中</span>
            pipWindow.<span class="hljs-property">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(pipContent.<span class="hljs-title function_">cloneNode</span>(<span class="hljs-literal">true</span>));

            <span class="hljs-comment">// 设置 PiP 样式同步</span>
            [...<span class="hljs-variable language_">document</span>.<span class="hljs-property">styleSheets</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">styleSheet</span>) =&gt;</span> {
                <span class="hljs-keyword">try</span> {
                    <span class="hljs-keyword">const</span> cssRules = [...styleSheet.<span class="hljs-property">cssRules</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">rule</span>) =&gt;</span> rule.<span class="hljs-property">cssText</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">''</span>);
                    <span class="hljs-keyword">const</span> style = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">'style'</span>);
                    style.<span class="hljs-property">textContent</span> = cssRules;
                    pipWindow.<span class="hljs-property">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(style);
                } <span class="hljs-keyword">catch</span> (e) {
                    <span class="hljs-keyword">const</span> link = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">'link'</span>);
                    link.<span class="hljs-property">rel</span> = <span class="hljs-string">'stylesheet'</span>;
                    link.<span class="hljs-property">type</span> = styleSheet.<span class="hljs-property">type</span>;
                    link.<span class="hljs-property">media</span> = styleSheet.<span class="hljs-property">media</span>;
                    link.<span class="hljs-property">href</span> = styleSheet.<span class="hljs-property">href</span> ?? <span class="hljs-string">''</span>;
                    pipWindow.<span class="hljs-property">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(link);
                }
            });

            <span class="hljs-comment">// 监听进入和退出 PiP 模式的事件</span>
            pipWindow.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"pagehide"</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {
                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"已退出 PIP 窗口"</span>);
            });

            pipWindow.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'focus'</span>, <span class="hljs-function">() =&gt;</span> {
                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"PiP 窗口进入了焦点状态"</span>);
            });

            pipWindow.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'blur'</span>, <span class="hljs-function">() =&gt;</span> {
                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"PiP 窗口失去了焦点"</span>);
            });
        });

        <span class="hljs-comment">// 关闭 PiP 窗口</span>
        <span class="hljs-comment">// pipWindow.close();  // 可以手动调用关闭窗口</span>
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>

</code></pre>
<hr>
<h2 data-id="heading-23">总结</h2>
<p>🎉 <strong>你现在已经掌握了如何使用 <code>Document Picture-in-Picture</code> API 来悬浮任意 HTML 内容！
希望能带来更灵活的交互体验。✨</strong></p>
<p>如果你有什么问题，或者对 PiP 功能有更多的想法，欢迎在评论区与我讨论！👇📬</p></div></div>