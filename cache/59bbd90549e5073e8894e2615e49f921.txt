
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Can-daydayup/p/18881315" title="发布于 2025-05-17 16:21">
    <span role="heading" aria-level="2">实际工作中 Git Commit 代码提交规范是什么样的？</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h2 data-tool="mdnice编辑器"><span>前言</span></h2>
<p data-tool="mdnice编辑器"><span>Git 是我们日常工作中使用最为广泛的分布式版本代码控制系统，因此在我们的实际工作中，<code><span>git commit</span></code><span>&nbsp;代码提交规范能够让每一次代码提交都变得有据可循，方便后续的代码审查、问题追踪和版本管理。同时，规范的提交信息也能够为自动化工具提供便利，如生成变更日志、自动化部署等。</span></span></p>
<h2 data-tool="mdnice编辑器"><span>git commit 规范写法示例</span></h2>
<p data-tool="mdnice编辑器"><span>首先我们一起来看看行业统一认可且标准的 <span>angular 项目的&nbsp;<code><span>git commit</span></code><span>&nbsp;规范写法。</span></span></span></p>
<ul class="list-paddingleft-1">
<li><a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-angular" target="_blank" rel="noopener nofollow"><span>https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-angular</span></a></li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/1336199/202505/1336199-20250517162009547-1162259799.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1336199/202505/1336199-20250517162021640-1997989831.png" alt="" loading="lazy"></p>
<h2 data-tool="mdnice编辑器"><span>基本格式</span></h2>
<p data-tool="mdnice编辑器"><span>首先一个规范的&nbsp;<code><span>git commit message</span></code><span>&nbsp;通常包含 Header、Body 和 Footer 三部分，各部分之间使用空行分隔。</span></span></p>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31cTKQWgXlXEyRyEvzribiaOicskiawSIgpwmJpbO3MCpOZaEEeBFLvCBVRC8jWHmrN0DTldiaFwf5Y5LQ/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>&lt;header&gt;<span><br><span>// 空一行<span><br><span>&lt;body&gt;<span><br><span>// 空一行<span><br><span>&lt;footer&gt;<span><br></span></span></span></span></span></span></span></span></span></span></code></span></pre>
<h3 data-tool="mdnice编辑器"><span>Header 必填</span></h3>
<p data-tool="mdnice编辑器"><span>描述提交类型和简短说明。格式为：<code><span>&lt;类型&gt;(&lt;作用域&gt;): &lt;主题&gt;</span></code><span>(<code><span>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></code><span>)。</span></span></span></p>
<ul class="list-paddingleft-1">
<li><strong>类型（Type）：</strong><span>&nbsp;必填，指明本次提交的目的，如 feat 表示新开发的功能（feature）、fix 表示修复 bug、refactor 表示代码重构等。</span></li>
<li><strong>作用域（Scope）：</strong><span>&nbsp;可选，描述修改的影响范围，如模块名、功能名等，视项目不同而不同。</span></li>
<li><strong>主题（Subject）：</strong><span>&nbsp;必填，是 commit 简明扼要的提交描述。长度建议不超过 50 个字符。</span></li>
</ul>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31cTKQWgXlXEyRyEvzribiaOicskiawSIgpwmJpbO3MCpOZaEEeBFLvCBVRC8jWHmrN0DTldiaFwf5Y5LQ/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>feat(payment): 微信支付功能集成<span><br></span></span></code></span></pre>
<h3 data-tool="mdnice编辑器"><span>Body 可选</span></h3>
<p data-tool="mdnice编辑器"><span>详细说明本次 commit 修改的内容。使用空行分隔段落，保持可读性。</span></p>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31cTKQWgXlXEyRyEvzribiaOicskiawSIgpwmJpbO3MCpOZaEEeBFLvCBVRC8jWHmrN0DTldiaFwf5Y5LQ/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>- 新增微信支付SDK依赖<span><br><span>- 实现支付结果回调处理<span><br><span>- 添加支付相关的单元测试<span><br></span></span></span></span></span></span></code></span></pre>
<h3 data-tool="mdnice编辑器"><span>Footer 可选</span></h3>
<p data-tool="mdnice编辑器"><span>主要用于关联 Issue、描述破坏性变更（BREAKING CHANGE）等。</span></p>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31cTKQWgXlXEyRyEvzribiaOicskiawSIgpwmJpbO3MCpOZaEEeBFLvCBVRC8jWHmrN0DTldiaFwf5Y5LQ/640?wx_fmt=svg&amp;from=appmsg" data-sec-load-status="2"><code><span>Closes&nbsp;#889<span><br><span>BREAKING CHANGE: 旧版支付回调接口已废弃，需迁移至 /api/v2/callback<span><br></span></span></span></span></code></span></pre>
<h2 data-tool="mdnice编辑器"><span>实际工作常用的 git commit 规范写法</span></h2>
<p data-tool="mdnice编辑器"><span>其实在实际开发工作中很多时候我们主要关注和使用的是&nbsp;<code><span>git commit message</span></code><span>&nbsp;的 Header 部分。Header 通常包含了提交的类型、作用域和简短的主题描述，这些信息对于快速了解每次提交的内容和目的已经足够。</span></span></p>
<p data-tool="mdnice编辑器"><span>描述提交类型和简短说明。格式为：<code><span>&lt;类型&gt;(&lt;作用域&gt;): &lt;主题&gt;</span></code><span>。</span></span></p>
<p data-tool="mdnice编辑器"><strong>格式：</strong><code><span>type(scope) : subject</span></code></p>
<h3 data-tool="mdnice编辑器"><span>常用的提交类型包括</span></h3>
<table>
<thead>
<tr><th><span>提交类型</span></th><th><span>描述</span></th><th><span>示例</span></th></tr>
</thead>
<tbody>
<tr>
<td><span>feat</span></td>
<td><span>新功能增加（feature）</span></td>
<td><span>feat: add user login feature</span></td>
</tr>
<tr>
<td><span>fix</span></td>
<td><span>修复BUG</span></td>
<td><span>fix: correct user authentication</span></td>
</tr>
<tr>
<td><span>refactor</span></td>
<td><span>代码重构（既不是新增功能，也不是修复 Bug）</span></td>
<td><span>refactor: simplify user validation logic</span></td>
</tr>
<tr>
<td><span>docs</span></td>
<td><span>文档/注释</span></td>
<td><span>docs: update API documentation</span></td>
</tr>
<tr>
<td><span>style</span></td>
<td><span>代码风格相关无影响运行结果的</span></td>
<td><span>style: format code with prettier</span></td>
</tr>
<tr>
<td><span>test</span></td>
<td><span>测试相关</span></td>
<td><span>test: add unit tests for login feature</span></td>
</tr>
<tr>
<td><span>build</span></td>
<td><span>影响构建系统或外部依赖的更改（例如：gulp，broccoli，npm）</span></td>
<td><span>build: update webpack config</span></td>
</tr>
<tr>
<td><span>revert</span></td>
<td><span>代码撤销修改</span></td>
<td><span>revert: revert commit 12345abc</span></td>
</tr>
<tr>
<td><span>ci</span></td>
<td><span>持续集成的配置文件和脚本的变动（例如：Travis，Circle，BrowserStack，SauceLabs）</span></td>
<td><span>ci: update Travis configuration</span></td>
</tr>
<tr>
<td><span>chore</span></td>
<td><span>依赖更新/脚手架配置修改等</span></td>
<td><span>chore: upgrade React to the latest version</span></td>
</tr>
<tr>
<td><span>perf</span></td>
<td><span>性能优化</span></td>
<td><span>perf(core): optimize virtual DOM diffing algorithm</span></td>
</tr>
</tbody>
</table>
</div>
<div id="MySignature" role="contentinfo">
    <blockquote>
<p style="font-family:YouYuan;font-size: 16px;margin: 0 auto 0.01em auto;"><span style="font-size: 17px; ">作者名称：</span><a href="https://www.cnblogs.com/Can-daydayup/" target="_blank">追逐时光者</a></p>
<p style="font-family:YouYuan;font-size: 16px;margin: 0 auto 0.01em auto;"><span style="font-size: 17px; ">作者简介：</span>一个热爱编程、善于分享、喜欢学习、探索、尝试新事物和新技术的全栈软件工程师。</p>
<p style="font-family:YouYuan;font-size: 16px;margin: 0 auto 0.01em auto;">
本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接，否则保留追究法律责任的权利。如果该篇文章对您有帮助的话，可以点一下右下角的<a onclick="votePost(cb_entryId,'Digg')" href="javascript:void(0)" style="color:red;">【♥推荐♥】</a>，希望能够持续的为大家带来好的技术文章，文中可能存在描述不正确的地方，欢迎指正或补充，不胜感激。
</p>
</blockquote>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.9155399945347222" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-17 16:22">2025-05-17 16:21</span>&nbsp;
<a href="https://www.cnblogs.com/Can-daydayup">追逐时光者</a>&nbsp;
阅读(<span id="post_view_count">120</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18881315);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18881315', targetLink: 'https://www.cnblogs.com/Can-daydayup/p/18881315', title: '实际工作中 Git Commit 代码提交规范是什么样的？' })">举报</a>
</div>
        