
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Can-daydayup/p/18948939" title="发布于 2025-06-26 08:00">
    <span role="heading" aria-level="2">使用 xUnit 快速编写 .NET 应用单元测试</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h2 data-tool="mdnice编辑器"><span>前言</span></h2>
<p data-tool="mdnice编辑器"><span>在当今快速迭代的软件开发环境中，单元测试已成为保障代码质量和项目可靠性的重要基石，通过验证程序最小单元（如函数、方法、类等）的独立行为，能够在开发阶段快速发现逻辑错误或边界条件问题。今天大姚将带领大家使用 xUnit 快速编写 .NET 应用单元测试。</span></p>
<h2 data-tool="mdnice编辑器"><span>项目介绍</span></h2>
<p data-tool="mdnice编辑器"><span>xUnit 是一个开源、免费、以社区为中心的 .NET 单元测试框架，是用于 C# 和 F#（其他 .NET 语言可能也能运行，但未提供官方支持）进行单元测试的最新技术。xUnit 能够与&nbsp;<code><span>Visual Studio、Visual Studio Code、ReSharper、CodeRush 和 TestDriven.NET</span></code><span>&nbsp;兼容。它是.NET 基金会的一部分，并遵循其行为准则。</span></span></p>
<h2 data-tool="mdnice编辑器"><span>单元测试最佳做法</span></h2>
<blockquote>
<p>微软官方出品的 .NET 单元测试最佳做法：<span style="color: rgba(0, 0, 255, 1)"><a href="https://learn.microsoft.com/zh-cn/dotnet/core/testing/unit-testing-best-practices" target="_blank" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">https://learn.microsoft.com/zh-cn/dotnet/core/testing/unit-testing-best-practices</span></a></span></p>
</blockquote>
<ul class="list-paddingleft-1">
<li><span>避免基础结构依赖项。</span></li>
<li><span>以最精简方式编写通过测试。</span></li>
<li><span>避免使用魔法字符串。</span></li>
<li><span>避免在单元测试中编写代码逻辑。</span></li>
<li><span>遵循测试命名标准：</span></li>
<ul class="list-paddingleft-1">
<li><span>要测试的方法的名称。</span></li>
<li><span>测试方法的情境。</span></li>
<li><span>调用方案时的预期行为。</span></li>
</ul>
</ul>
<p data-tool="mdnice编辑器"><span>命名标准非常重要，因为它们有助于表达测试目的和应用程序。测试不仅仅是确保代码正常工作。它们还提供文档。只需查看单元测试套件，即可推断代码的行为，不必查看代码本身。此外，测试失败时，可以确切地看到哪些方案不符合预期。</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1336199/202506/1336199-20250625220605749-743225052.png" alt="" loading="lazy"></p>
<h2 data-tool="mdnice编辑器"><span>单元测试基本步骤</span></h2>
<p data-tool="mdnice编辑器"><span>我们在编写单元测试的时候通常遵循 3A 模式（Arrange-Act-Assert），这是单元测试的核心方法论：</span></p>
<ul class="list-paddingleft-1">
<li><strong>Arrange（准备阶段）：</strong><span>&nbsp;该阶段用于模拟数据、初始化对象等准备工作。</span></li>
<li><strong>Act（执行阶段）：</strong><span>&nbsp;该阶段用于准备好的数据调用要测试的最小单元方法。</span></li>
<li><strong>Assert（断言阶段）：</strong><span>&nbsp;该阶段是单元测试中的验证环节，它通过将目标方法返回的实际结果与预期结果进行比对，来判定测试是否通过。</span></li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/1336199/202506/1336199-20250625220620761-1640072661.png" alt="" loading="lazy"></p>
<h2 data-tool="mdnice编辑器"><span>创建单元测试项目</span></h2>
<p data-tool="mdnice编辑器"><span>因为 xUnit 框架与 Visual Studio 是兼容的，我们可以直接在 Visual Studio 中搜索：<code><span>xUnit 测试项目</span></code><span>&nbsp;模板，然后创建一个名为：<code><span>xUnitExercise</span></code><span>&nbsp;的 .NET 9 单元测试项目。</span></span></span></p>
<p><img src="https://img2024.cnblogs.com/blog/1336199/202506/1336199-20250625220634182-1506606927.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1336199/202506/1336199-20250625220639126-1833979943.png" alt="" loading="lazy"></p>
<h2 data-tool="mdnice编辑器"><span>编写简单的单元测试</span></h2>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31VV21y5mCJibz5MsARVYSBZnlrqdTM4BYD74icdPeC5dSGyc0RIBr0dKQnkiapyo8odZyy2TFGqwACK/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>&nbsp; &nbsp; public class UnitTest<span><br><span>&nbsp; &nbsp; {<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; /// &lt;summary&gt;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; /// 测试 Calculator 的 Add 方法功能<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; /// 验证两个正数相加返回正确的和<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; /// &lt;/summary&gt;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; [Fact]// 标识这是一个独立的测试用例<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; public void&nbsp;Add_TwoPositiveNumbers_ReturnsCorrectSum<span>()<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; {<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // ===== Arrange（准备阶段） =====<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var calculator = new Calculator();<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int num1 = 5;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int num2 = 7;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int expected = 12;<span><br><span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // ===== Act（执行阶段） =====<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int actual = calculator.Add(num1, num2);<span><br><span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // ===== Assert（断言阶段） =====<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Assert.Equal(expected, actual);<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; }<span><br><span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; /// &lt;summary&gt;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; /// 测试 Calculator 的 Divide 方法异常处理<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; /// 验证除数为零时正确抛出 DivideByZeroException 异常<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; /// &lt;/summary&gt;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; [Fact]<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; public void&nbsp;Divide_ByZero_ThrowsDivideByZeroException<span>()<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; {<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Arrange<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var calculator = new Calculator();<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int dividend = 10;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int divisor = 0; //触发异常的除数<span><br><span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Act &amp; Assert<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 验证执行除法时是否抛出特定异常<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var exception = Assert.Throws&lt;DivideByZeroException&gt;(<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; () =&gt; calculator.Divide(dividend, divisor));<span><br><span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 验证异常消息是否符合预期<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Assert.Equal("除数不能为零"<span>, exception.Message);<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; }<span><br><span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; /// &lt;summary&gt;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; /// 参数化测试 Calculator 的 IsEven 方法功能<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; /// 验证不同输入数值的奇偶判断是否正确<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; /// &lt;/summary&gt;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; /// &lt;param name="number"<span>&gt;测试输入值&lt;/param&gt;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; /// &lt;param name="expected"<span>&gt;预期结果（true<span>=偶数，false<span>=奇数）&lt;/param&gt;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; [Theory] // 标识这是一个参数化测试<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; [InlineData(4,&nbsp;true<span>)] &nbsp; // 测试数据1：偶数4，预期true<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; [InlineData(7,&nbsp;false<span>)] &nbsp;// 测试数据2：奇数7，预期false<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; [InlineData(8,&nbsp;false<span>)] &nbsp;// 测试数据3：偶数8，预期false<span>&nbsp;【这里是特意为了查看预期结果不一致的情况】<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; public void IsEven_Number_ReturnsCorrectResult(int number, bool expected)<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; {<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Arrange<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var calculator = new Calculator();<span><br><span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Act<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bool actual = calculator.IsEven(number);<span><br><span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Assert<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Assert.Equal(expected, actual);<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; }<span><br><span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; public class Calculator<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; {<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public int Add(int a, int b)<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;return<span>&nbsp;a + b;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<span><br><span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public bool IsEven(int number)<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;return<span>&nbsp;number % 2 == 0;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<span><br><span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public double Divide(int dividend, int divisor)<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;if<span>&nbsp;(divisor == 0)<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; throw new DivideByZeroException("除数不能为零"<span>);<span><br><span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;return<span>&nbsp;(double)dividend / divisor;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; }<span><br><span>&nbsp; &nbsp; }<span><br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></span></pre>
<h2 data-tool="mdnice编辑器"><span>运行单元测试</span></h2>
<p data-tool="mdnice编辑器"><strong>选择项目右键 =&gt; 运行测试：</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/1336199/202506/1336199-20250625220656999-1614420791.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1336199/202506/1336199-20250625220702759-622101747.png" alt="" loading="lazy"></p>
<p><strong>&nbsp;或者直接在对应的方法正上方选择 Run：</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/1336199/202506/1336199-20250625220728079-1596690394.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1336199/202506/1336199-20250625220732722-1769909310.png" alt="" loading="lazy"></p>
<h2 data-tool="mdnice编辑器"><span>调试单元测试</span></h2>
<p data-tool="mdnice编辑器"><strong>选择项目右键 =&gt; 运行调试：</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/1336199/202506/1336199-20250625220747776-345447501.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1336199/202506/1336199-20250625220752928-55216601.png" alt="" loading="lazy"></p>
<p><strong>&nbsp;或者直接在对应的方法正上方选择 Debug：</strong></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1336199/202506/1336199-20250625220822563-659859034.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1336199/202506/1336199-20250625220832527-170014950.png" alt="" loading="lazy"></p>
<h2 data-tool="mdnice编辑器"><span>项目源码地址</span></h2>
<p data-tool="mdnice编辑器"><span>更多项目实用功能和特性欢迎前往项目开源地址查看👀，别忘了给项目一个Star支持💖。</span></p>
<ul class="list-paddingleft-1">
<li><strong>GitHub开源地址：</strong><span style="color: rgba(0, 0, 255, 1)"><a href="https://github.com/xunit/xunit" target="_blank" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">https://github.com/xunit/xunit</span></a></span></li>
<li><strong>本文示例源码地址：</strong><span style="color: rgba(0, 0, 255, 1)"><a href="https://github.com/YSGStudyHards/DotNetExercises/tree/master/xUnitExercise" target="_blank" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">https://github.com/YSGStudyHards/DotNetExercises/tree/master/xUnitExercise</span></a></span></li>
</ul>
<h2 data-tool="mdnice编辑器"><span>优秀项目和框架精选</span></h2>
<p data-tool="mdnice编辑器"><span>该项目已收录到C#/.NET/.NET Core优秀项目和框架精选中，关注优秀项目和框架精选能让你及时了解C#、.NET和.NET Core领域的最新动态和最佳实践，提高开发工作效率和质量。坑已挖，欢迎大家踊跃提交PR推荐或自荐（让优秀的项目和框架不被埋没🤞）。</span></p>
<ul class="list-paddingleft-1">
<li><strong>GitHub开源地址：</strong><span style="color: rgba(0, 0, 255, 1)"><a href="https://github.com/YSGStudyHards/DotNetGuide/blob/main/docs/DotNet/DotNetProjectPicks.md" target="_blank" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">https://github.com/YSGStudyHards/DotNetGuide/blob/main/docs/DotNet/DotNetProjectPicks.md</span></a></span></li>
<li><strong>Gitee开源地址：</strong><span style="color: rgba(0, 0, 255, 1)"><a href="https://gitee.com/ysgdaydayup/DotNetGuide/blob/main/docs/DotNet/DotNetProjectPicks.md" target="_blank" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">https://gitee.com/ysgdaydayup/DotNetGuide/blob/main/docs/DotNet/DotNetProjectPicks.md</span></a></span></li>
</ul>
</div>
<div id="MySignature" role="contentinfo">
    <blockquote>
<p style="font-family:YouYuan;font-size: 16px;margin: 0 auto 0.01em auto;"><span style="font-size: 17px; ">作者名称：</span><a href="https://www.cnblogs.com/Can-daydayup/" target="_blank">追逐时光者</a></p>
<p style="font-family:YouYuan;font-size: 16px;margin: 0 auto 0.01em auto;"><span style="font-size: 17px; ">作者简介：</span>一个热爱编程、善于分享、喜欢学习、探索、尝试新事物和新技术的全栈软件工程师。</p>
<p style="font-family:YouYuan;font-size: 16px;margin: 0 auto 0.01em auto;">
本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接，否则保留追究法律责任的权利。如果该篇文章对您有帮助的话，可以点一下右下角的<a onclick="votePost(cb_entryId,'Digg')" href="javascript:void(0)" style="color:red;">【♥推荐♥】</a>，希望能够持续的为大家带来好的技术文章，文中可能存在描述不正确的地方，欢迎指正或补充，不胜感激。
</p>
</blockquote>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-26 08:00">2025-06-26 08:00</span>&nbsp;
<a href="https://www.cnblogs.com/Can-daydayup">追逐时光者</a>&nbsp;
阅读(<span id="post_view_count">159</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18948939);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18948939', targetLink: 'https://www.cnblogs.com/Can-daydayup/p/18948939', title: '使用 xUnit 快速编写 .NET 应用单元测试' })">举报</a>
</div>
        