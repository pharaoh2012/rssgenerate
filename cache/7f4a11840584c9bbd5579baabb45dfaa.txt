
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/qq21497936/p/18768431" title="发布于 2025-03-12 20:25">
    <span role="heading" aria-level="2">OpenCV开发笔记（八十三）：图像remap实现哈哈镜效果</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div class="cl-preview-section">
<h1>前言</h1>
</div>
<div class="cl-preview-section">
<p>  对图像进行非规则的扭曲，实现哈哈镜就是一种非常规的扭曲方式，本文先描述remap的原理，然后通过remap实现哈哈镜。</p>
</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="Demo_5"></a>Demo</h1>
</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533620-1874486769.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533598-2097040040.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533543-1489469571.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533618-317085091.png" alt="在这里插入图片描述"><br>  基于原始算法，可以进行二次开发，实现一些其他效果：</p>


</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533541-1761114115.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533591-200689805.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533685-996454618.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="remap_24"></a>矫正映射remap（畸变映射）</h1>


</div>
<div class="cl-preview-section">
<p>  当进行图像矫正时，必须指定输入图像的每个像素在输出图像中移动到的位置，成为“矫正映射”（畸变映射）。</p>


</div>
<div class="cl-preview-section">
<h2><a id="_26"></a>双通道浮点数表示方式</h2>


</div>
<div class="cl-preview-section">
<p>  N x M的矩阵A中，重映射由双通道浮点数的N x M的矩阵B表示，对于图像A中的任意一点aPoint(i, j)，映射为b1Point(i’, j’)和b2Point(i’, j’)，在A中假设i=2，j=3，那么（假设重映射之后4.5，5.5）在B1中b1Point(i’, j’)值为4.5，b2Point(i’, j’)值为5.5，由于坐标是浮点数，那么需要插值得到整数位置以及中间过渡的区域颜色（平滑处理）。<br>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533585-141800578.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<h2><a id="_30"></a>双矩阵浮点数表示方式</h2>


</div>
<div class="cl-preview-section">
<p>  双矩阵浮点数表示，N x M的矩阵A中，重映射由一对N x M的矩阵B和C描述，这里所有的N x M矩阵都是单通道浮点矩阵，在A中的点aPoint(i, j)，重映射矩阵B中的点bPoint(i,j)存储了重映射后的i’ （映射后的i坐标）， 重映射矩阵C中的点cPoint(i,j)存储了重映射后的j’（映射后的j坐标）。<br>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533625-528001865.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<h2><a id="_34"></a>定点表示方式</h2>


</div>
<div class="cl-preview-section">
<p>  映射由双通道有符号整数矩阵（即CV_16SC2类型）表示。该方式与双通道浮点数表示方式相同，但使用此格式要快得多（笔者理解：由浮点数插值改为整数插值，会要快一些，但是肯定双通道浮点数的表示方式图像效果会稍微好一些）。<br>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533610-721036710.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="remap_41"></a>remap核心关键</h1>


</div>
<div class="cl-preview-section">
<p>  在于得到插值的坐标系来映射新位置的x和y位置，要渐近等，所以本方法的核心关键在于得到标定后的矩阵，得到映射矩阵的方式可以自己写算法，也可以使用其他方式，后续文章继续深入这块。</p>


</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="remap_46"></a>remap演示</h1>


</div>
<div class="cl-preview-section">
<p>  为了更好的展示remap的作用，我们使用一张100x100的图，这样可以更好的看到remap的原理效果。<br>  先做一张100x100的图，图里面用不同的颜色，如下：<br>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533567-418214599.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<p>  使用opencv打开：<br>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533639-1198616972.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<h2><a id="Map1_54"></a>Map1使用第一种表示点的方式</h2>


</div>
<div class="cl-preview-section">
<p>  使用点的方式映射：</p>


</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp"><span class="token comment">// 表示点的第一种
std<span class="token double-colon punctuation">::vector<span class="token operator">&lt;cv<span class="token double-colon punctuation">::Point2f<span class="token operator">&gt; vectorPoints<span class="token punctuation">;
<span class="token keyword">for<span class="token punctuation">(<span class="token keyword">int index <span class="token operator">= <span class="token number">0<span class="token punctuation">; index <span class="token operator">&lt; <span class="token number">10<span class="token punctuation">; index<span class="token operator">++<span class="token punctuation">)
<span class="token punctuation">{
    vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">0<span class="token punctuation">, <span class="token number">0<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">10<span class="token punctuation">, <span class="token number">10<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">20<span class="token punctuation">, <span class="token number">20<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">30<span class="token punctuation">, <span class="token number">30<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">40<span class="token punctuation">, <span class="token number">40<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">50<span class="token punctuation">, <span class="token number">50<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">60<span class="token punctuation">, <span class="token number">60<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">70<span class="token punctuation">, <span class="token number">70<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">80<span class="token punctuation">, <span class="token number">80<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">90<span class="token punctuation">, <span class="token number">90<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
<span class="token punctuation">}
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533611-782250057.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<p>  这是相当于把点提取出来映射到一个mat里面，一直堆下去：</p>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp"><span class="token comment">// 表示点的第一种
std<span class="token double-colon punctuation">::vector<span class="token operator">&lt;cv<span class="token double-colon punctuation">::Point2f<span class="token operator">&gt; vectorPoints<span class="token punctuation">;
<span class="token keyword">for<span class="token punctuation">(<span class="token keyword">int index <span class="token operator">= <span class="token number">0<span class="token punctuation">; index <span class="token operator">&lt; <span class="token number">50<span class="token punctuation">; index<span class="token operator">++<span class="token punctuation">)
<span class="token punctuation">{
    vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">0<span class="token punctuation">, <span class="token number">0<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">10<span class="token punctuation">, <span class="token number">10<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">20<span class="token punctuation">, <span class="token number">20<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">30<span class="token punctuation">, <span class="token number">30<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">40<span class="token punctuation">, <span class="token number">40<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">50<span class="token punctuation">, <span class="token number">50<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">60<span class="token punctuation">, <span class="token number">60<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">70<span class="token punctuation">, <span class="token number">70<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">80<span class="token punctuation">, <span class="token number">80<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">90<span class="token punctuation">, <span class="token number">90<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
<span class="token punctuation">}
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533576-2073197155.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<h2><a id="Map1_95"></a>Map1使用第二种表示点的方式</h2>
</div>
<div class="cl-preview-section">
<p>  直接初始化：</p>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp">cv<span class="token double-colon punctuation">::Mat <span class="token function">mapX<span class="token punctuation">(srcMat<span class="token punctuation">.rows<span class="token punctuation">, srcMat<span class="token punctuation">.cols<span class="token punctuation">, CV_32F<span class="token punctuation">)<span class="token punctuation">; <span class="token comment">// x 方向
cv<span class="token double-colon punctuation">::Mat <span class="token function">mapY<span class="token punctuation">(srcMat<span class="token punctuation">.rows<span class="token punctuation">, srcMat<span class="token punctuation">.cols<span class="token punctuation">, CV_32F<span class="token punctuation">)<span class="token punctuation">; <span class="token comment">// y 方向
<span class="token keyword">for<span class="token punctuation">(<span class="token keyword">int row <span class="token operator">= <span class="token number">0<span class="token punctuation">; row <span class="token operator">&lt; <span class="token number">100<span class="token punctuation">; row<span class="token operator">++<span class="token punctuation">)
<span class="token punctuation">{
    <span class="token keyword">for<span class="token punctuation">(<span class="token keyword">int col <span class="token operator">= <span class="token number">0<span class="token punctuation">; col <span class="token operator">&lt; <span class="token number">100<span class="token punctuation">; col<span class="token operator">++<span class="token punctuation">)
    <span class="token punctuation">{
        std<span class="token double-colon punctuation">::cout <span class="token operator">&lt;&lt; mapX<span class="token punctuation">.<span class="token generic-function"><span class="token function">at<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">double<span class="token operator">&gt;<span class="token punctuation">(row<span class="token punctuation">, col<span class="token punctuation">)<span class="token punctuation">;
    <span class="token punctuation">}
<span class="token punctuation">}
cv<span class="token double-colon punctuation">::<span class="token function">remap<span class="token punctuation">(srcMat<span class="token punctuation">, dstMat<span class="token punctuation">, mapX<span class="token punctuation">, mapY<span class="token punctuation">, cv<span class="token double-colon punctuation">::INTER_LINEAR<span class="token punctuation">)<span class="token punctuation">;
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  打印输出都是0：<br>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533686-444263760.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533590-1035725280.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533704-1358704098.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533691-1995549676.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533678-505875822.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533702-803403063.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<p>  这里map保存的是原来现在这个位置的点映射到原来图片哪个坐标点（注意：不是原来哪个位置映射到map哪个位置，是map的纵横坐标点映射原来值里面的那个坐标）左右从中间向两边拉伸则是：<br>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533663-437221628.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp">cv<span class="token double-colon punctuation">::Mat <span class="token function">mapX<span class="token punctuation">(srcMat<span class="token punctuation">.rows<span class="token punctuation">, srcMat<span class="token punctuation">.cols<span class="token punctuation">, CV_32F<span class="token punctuation">)<span class="token punctuation">; <span class="token comment">// x 方向
cv<span class="token double-colon punctuation">::Mat <span class="token function">mapY<span class="token punctuation">(srcMat<span class="token punctuation">.rows<span class="token punctuation">, srcMat<span class="token punctuation">.cols<span class="token punctuation">, CV_32F<span class="token punctuation">)<span class="token punctuation">; <span class="token comment">// y 方向
<span class="token keyword">for<span class="token punctuation">(<span class="token keyword">int row <span class="token operator">= <span class="token number">0<span class="token punctuation">; row <span class="token operator">&lt; <span class="token number">100<span class="token punctuation">; row<span class="token operator">++<span class="token punctuation">)
<span class="token punctuation">{
    <span class="token keyword">for<span class="token punctuation">(<span class="token keyword">int col <span class="token operator">= <span class="token number">0<span class="token punctuation">; col <span class="token operator">&lt; <span class="token number">100<span class="token punctuation">; col<span class="token operator">++<span class="token punctuation">)
    <span class="token punctuation">{
        <span class="token keyword">if<span class="token punctuation">(col <span class="token operator">&lt; <span class="token number">25<span class="token punctuation">)
        <span class="token punctuation">{
            <span class="token comment">// 0~24
            mapX<span class="token punctuation">.<span class="token generic-function"><span class="token function">at<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">float<span class="token operator">&gt;<span class="token punctuation">(row<span class="token punctuation">, col<span class="token punctuation">) <span class="token operator">= col <span class="token operator">* <span class="token number">2<span class="token punctuation">;
            mapY<span class="token punctuation">.<span class="token generic-function"><span class="token function">at<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">float<span class="token operator">&gt;<span class="token punctuation">(row<span class="token punctuation">, col<span class="token punctuation">) <span class="token operator">= row<span class="token punctuation">;
        <span class="token punctuation">}<span class="token keyword">else <span class="token keyword">if<span class="token punctuation">(col <span class="token operator">&lt; <span class="token number">50<span class="token punctuation">)
        <span class="token punctuation">{
            <span class="token comment">// 25-49
            mapX<span class="token punctuation">.<span class="token generic-function"><span class="token function">at<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">float<span class="token operator">&gt;<span class="token punctuation">(row<span class="token punctuation">, col<span class="token punctuation">) <span class="token operator">= <span class="token number">49<span class="token punctuation">;
            mapY<span class="token punctuation">.<span class="token generic-function"><span class="token function">at<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">float<span class="token operator">&gt;<span class="token punctuation">(row<span class="token punctuation">, col<span class="token punctuation">) <span class="token operator">= row<span class="token punctuation">;
        <span class="token punctuation">}<span class="token keyword">else <span class="token keyword">if<span class="token punctuation">(col <span class="token operator">&lt; <span class="token number">75<span class="token punctuation">)
        <span class="token punctuation">{
            <span class="token comment">// 50~74
            mapX<span class="token punctuation">.<span class="token generic-function"><span class="token function">at<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">float<span class="token operator">&gt;<span class="token punctuation">(row<span class="token punctuation">, col<span class="token punctuation">) <span class="token operator">= <span class="token number">50<span class="token punctuation">;
            mapY<span class="token punctuation">.<span class="token generic-function"><span class="token function">at<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">float<span class="token operator">&gt;<span class="token punctuation">(row<span class="token punctuation">, col<span class="token punctuation">) <span class="token operator">= row<span class="token punctuation">;
        <span class="token punctuation">}<span class="token keyword">else
        <span class="token punctuation">{
            <span class="token comment">// 75~99
            mapX<span class="token punctuation">.<span class="token generic-function"><span class="token function">at<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">float<span class="token operator">&gt;<span class="token punctuation">(row<span class="token punctuation">, col<span class="token punctuation">) <span class="token operator">= <span class="token number">99 <span class="token operator">- <span class="token punctuation">(<span class="token number">99 <span class="token operator">- col<span class="token punctuation">) <span class="token operator">* <span class="token number">2<span class="token punctuation">;
            mapY<span class="token punctuation">.<span class="token generic-function"><span class="token function">at<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">float<span class="token operator">&gt;<span class="token punctuation">(row<span class="token punctuation">, col<span class="token punctuation">) <span class="token operator">= row<span class="token punctuation">;
        <span class="token punctuation">}
    <span class="token punctuation">}
<span class="token punctuation">}
cv<span class="token double-colon punctuation">::<span class="token function">remap<span class="token punctuation">(srcMat<span class="token punctuation">, dstMat<span class="token punctuation">, mapX<span class="token punctuation">, mapY<span class="token punctuation">, cv<span class="token double-colon punctuation">::INTER_LINEAR<span class="token punctuation">)<span class="token punctuation">;
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533546-1155081594.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="_161"></a>核心桥梁：椭圆</h1>
</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533650-171810034.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<p>  &nbsp;<img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533697-649525175.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<p>  &nbsp;<img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533749-1696285799.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<p>   椭圆的标准方程，对于一个中心在原点、长轴在x轴上的椭圆，其标准方程为：<br>  &nbsp;<img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533650-422772414.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<p>   其中，a是椭圆长轴的一半，b是椭圆短轴的一半。<br>   给定一个参数t（通常称为参数或偏心率角），椭圆上的点(x,y)可以用以下参数方程表示：<br>  &nbsp;<img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533590-1292328014.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<p>   其中，t的取值范围是[0,2π)，通过改变t的值，可以得到椭圆上的不同点。例如，假设有一个椭圆，其长轴为10，短轴为6。那么，a=5，b=3。</p>


</div>
<div class="cl-preview-section">
<ul>
<li>当t=0时，点(x,y)=(5,0)，这是椭圆长轴上的一个端点。</li>
<li>当 t=2π时，点(x,y)=(0,3)，这是椭圆短轴上的一个端点。</li>
<li>当t=π时，点(x,y)=(−5,0)，这是椭圆长轴上的另一个端点。</li>
<li>当t=2/3*π时，点(x,y)=(0,−3)，这是椭圆短轴上的另一个端点。<br>   通过改变t的值，可以得到椭圆上的任意点。</li>


</ul>


</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="_184"></a>哈哈镜实现</h1>


</div>
<div class="cl-preview-section">
<p>  </p>


</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp"><span class="token keyword">int cols <span class="token operator">= srcMat<span class="token punctuation">.cols<span class="token punctuation">;
<span class="token keyword">int rows <span class="token operator">= srcMat<span class="token punctuation">.rows<span class="token punctuation">;
<span class="token keyword">double horizontalStrength <span class="token operator">= <span class="token number">1.0f<span class="token punctuation">;
<span class="token keyword">double verticalStrength <span class="token operator">= <span class="token number">1.0f<span class="token punctuation">;
<span class="token keyword">double zoom <span class="token operator">= <span class="token number">1.0<span class="token punctuation">;
<span class="token keyword">int cx <span class="token operator">= cols <span class="token operator">/ <span class="token number">2<span class="token punctuation">;
<span class="token keyword">int cy <span class="token operator">= rows <span class="token operator">/ <span class="token number">2<span class="token punctuation">;
<span class="token keyword">for<span class="token punctuation">(<span class="token keyword">int x <span class="token operator">= <span class="token number">0<span class="token punctuation">; x <span class="token operator">&lt; cols<span class="token punctuation">; x<span class="token operator">++<span class="token punctuation">)
<span class="token punctuation">{
    <span class="token keyword">for<span class="token punctuation">(<span class="token keyword">int y <span class="token operator">= <span class="token number">0<span class="token punctuation">; y <span class="token operator">&lt; rows<span class="token punctuation">; y<span class="token operator">++<span class="token punctuation">)
    <span class="token punctuation">{
        <span class="token comment">// 先求的范围内的点离中心点的偏移比例
        <span class="token keyword">double dx <span class="token operator">= <span class="token punctuation">(x <span class="token operator">- cx<span class="token punctuation">) <span class="token operator">* <span class="token number">1.0f <span class="token operator">/ cx<span class="token punctuation">;
        <span class="token keyword">double dy <span class="token operator">= <span class="token punctuation">(y <span class="token operator">- cy<span class="token punctuation">) <span class="token operator">* <span class="token number">1.0f <span class="token operator">/ cy<span class="token punctuation">;
        <span class="token comment">// 求得中心点的距离
        <span class="token keyword">double distance <span class="token operator">= <span class="token function">sqrt<span class="token punctuation">(dx <span class="token operator">* dx <span class="token operator">+ dy <span class="token operator">* dy<span class="token punctuation">)<span class="token punctuation">;
       <span class="token comment">// 缩放半径
       <span class="token keyword">double r <span class="token operator">= distance <span class="token operator">/ zoom<span class="token punctuation">;
       <span class="token comment">// 后面除0操作，这里防止为0
       <span class="token keyword">if<span class="token punctuation">(r <span class="token operator">== <span class="token number">0<span class="token punctuation">)
       <span class="token punctuation">{
           r <span class="token operator">= <span class="token number">1e-6<span class="token punctuation">;
        <span class="token punctuation">}
        <span class="token comment">// 求出角度
        <span class="token keyword">double theta <span class="token operator">= <span class="token function">atan<span class="token punctuation">(r<span class="token punctuation">)<span class="token punctuation">;
        <span class="token comment">// 求出最新比例覆盖点的rX
        <span class="token keyword">double rDistortedX <span class="token operator">= horizontalStrength <span class="token operator">* theta <span class="token operator">/ r<span class="token punctuation">;
        <span class="token comment">// 求出最新比例覆盖点的rY
        <span class="token keyword">double rDistortedY <span class="token operator">= verticalStrength <span class="token operator">* theta <span class="token operator">/ r<span class="token punctuation">;
        <span class="token comment">// 求出当前这个点使用原来哪个点映射
        <span class="token keyword">double dstX <span class="token operator">= cx <span class="token operator">+ rDistortedX <span class="token operator">* dx <span class="token operator">* cx<span class="token punctuation">;
        <span class="token keyword">double dstY <span class="token operator">= cy <span class="token operator">+ rDistortedY <span class="token operator">* dy <span class="token operator">* cy<span class="token punctuation">;
        <span class="token comment">// 给map赋值
        mapX<span class="token punctuation">.<span class="token generic-function"><span class="token function">at<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">float<span class="token operator">&gt;<span class="token punctuation">(y<span class="token punctuation">, x<span class="token punctuation">) <span class="token operator">= <span class="token generic-function"><span class="token function">static_cast<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">float<span class="token operator">&gt;<span class="token punctuation">(dstX<span class="token punctuation">)<span class="token punctuation">;
        mapY<span class="token punctuation">.<span class="token generic-function"><span class="token function">at<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">float<span class="token operator">&gt;<span class="token punctuation">(y<span class="token punctuation">, x<span class="token punctuation">) <span class="token operator">= <span class="token generic-function"><span class="token function">static_cast<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">float<span class="token operator">&gt;<span class="token punctuation">(dstY<span class="token punctuation">)<span class="token punctuation">;
    <span class="token punctuation">}
<span class="token punctuation">}
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="_228"></a>函数原型</h1>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp"><span class="token keyword">void <span class="token function">remap<span class="token punctuation">(InputArray src<span class="token punctuation">,
           OutputArray dst<span class="token punctuation">,
           InputArray map1<span class="token punctuation">,
           InputArray map2<span class="token punctuation">,
           <span class="token keyword">int interpolation<span class="token punctuation">,
           <span class="token keyword">int borderMode <span class="token operator">= BORDER_CONSTANT<span class="token punctuation">,
           <span class="token keyword">const Scalar<span class="token operator">&amp; borderValue <span class="token operator">= <span class="token function">Scalar<span class="token punctuation">(<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<ul>
<li>
<p>参数一：InputArray类型的src，一般为cv::Mat;</p>
</li>
<li>
<p>参数二：OutputArray类型的dst，目标图像。它的大小与map1相同，类型与src相同。</p>
</li>
<li>
<p>参数三：InputArray类型的map1，它有两种可能的表示对象：表示点（x，y）的第一个映射或者表示CV_16SC2 , CV_32FC1或CV_32FC2类型的x值。</p>
</li>
<li>
<p>参数四：InputArray类型的map2，它也有两种可能的表示对象，而且他是根据map1来确定表示哪种对象。若map1表示点（x，y）时，这个参数不代表任何值，否则，表示CV_16UC1 , rCV_32FC1类型的y值（第二个值）。</p>
</li>
<li>
<p>参数五：int类型的interpolation，使用的插值方法；<br>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533668-1505730837.png" alt="在这里插入图片描述"></p>


</li>
<li>
<p>参数六：int类型的borderMode，边界处理方式；</p>


</li>
<li>
<p>参数七：Scalar类型的borderValue，重映射后，离群点的背景，需要broderMode设置为BORDER_CONSTRANT时才有效。（离群点：当图片大小为400x300，那么对应的map1和map2范围为0399、0299，小于0或者大于299的则为离散点，使用该颜色填充）;</p>


</li>


</ul>


</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="Demo_250"></a>Demo源码</h1>


</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp"><span class="token keyword">void <span class="token class-name">OpenCVManager<span class="token double-colon punctuation">::<span class="token function">testDistortingMirror<span class="token punctuation">(<span class="token punctuation">)
<span class="token punctuation">{
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">if <span class="token expression"><span class="token number">1
    <span class="token comment">// 测试remap的Demo
<span class="token comment">//    cv::Mat srcMat = cv::imread("D:/qtProject/openCVDemo/openCVDemo/modules/openCVManager/images/41.png");
<span class="token comment">//    cv::Mat srcMat = cv::imread("D:/qtProject/openCVDemo/openCVDemo/modules/openCVManager/images/25.jpg");
    cv<span class="token double-colon punctuation">::Mat srcMat <span class="token operator">= cv<span class="token double-colon punctuation">::<span class="token function">imread<span class="token punctuation">(<span class="token string">"D:/qtProject/openCVDemo/openCVDemo/modules/openCVManager/images/42.jpg"<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">if<span class="token punctuation">(srcMat<span class="token punctuation">.data <span class="token operator">== <span class="token number">0<span class="token punctuation">)
    <span class="token punctuation">{
        <span class="token keyword">return<span class="token punctuation">;
    <span class="token punctuation">}
    cv<span class="token double-colon punctuation">::<span class="token function">imshow<span class="token punctuation">(<span class="token string">"srcMat"<span class="token punctuation">, srcMat<span class="token punctuation">)<span class="token punctuation">;
    <span class="token comment">// remap的
    <span class="token comment">/*
        插值方法：
        INTER_NEAREST        = 0,
        INTER_LINEAR         = 1,
        INTER_CUBIC          = 2,
        INTER_AREA           = 3,
        INTER_LANCZOS4       = 4,
        INTER_LINEAR_EXACT = 5,
        INTER_MAX            = 7,
        WARP_FILL_OUTLIERS   = 8,
        WARP_INVERSE_MAP     = 16
    */
    cv<span class="token double-colon punctuation">::Mat dstMat <span class="token operator">= cv<span class="token double-colon punctuation">::<span class="token function">Mat<span class="token punctuation">(srcMat<span class="token punctuation">.rows<span class="token punctuation">, srcMat<span class="token punctuation">.cols<span class="token punctuation">, srcMat<span class="token punctuation">.<span class="token function">type<span class="token punctuation">(<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">if <span class="token expression"><span class="token number">0
    <span class="token comment">// 表示点的第一种
    std<span class="token double-colon punctuation">::vector<span class="token operator">&lt;cv<span class="token double-colon punctuation">::Point2f<span class="token operator">&gt; vectorPoints<span class="token punctuation">;
    <span class="token keyword">for<span class="token punctuation">(<span class="token keyword">int index <span class="token operator">= <span class="token number">0<span class="token punctuation">; index <span class="token operator">&lt; <span class="token number">50<span class="token punctuation">; index<span class="token operator">++<span class="token punctuation">)
    <span class="token punctuation">{
        vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">0<span class="token punctuation">, <span class="token number">0<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
        vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">10<span class="token punctuation">, <span class="token number">10<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
        vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">20<span class="token punctuation">, <span class="token number">20<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
        vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">30<span class="token punctuation">, <span class="token number">30<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
        vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">40<span class="token punctuation">, <span class="token number">40<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
        vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">50<span class="token punctuation">, <span class="token number">50<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
        vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">60<span class="token punctuation">, <span class="token number">60<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
        vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">70<span class="token punctuation">, <span class="token number">70<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
        vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">80<span class="token punctuation">, <span class="token number">80<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
        vectorPoints<span class="token punctuation">.<span class="token function">push_back<span class="token punctuation">(cv<span class="token double-colon punctuation">::<span class="token function">Point2f<span class="token punctuation">(<span class="token number">90<span class="token punctuation">, <span class="token number">90<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    <span class="token punctuation">}
    cv<span class="token double-colon punctuation">::<span class="token function">remap<span class="token punctuation">(srcMat<span class="token punctuation">, dstMat<span class="token punctuation">, vectorPoints<span class="token punctuation">, cv<span class="token double-colon punctuation">::<span class="token function">Mat<span class="token punctuation">(<span class="token punctuation">)<span class="token punctuation">, cv<span class="token double-colon punctuation">::INTER_LINEAR<span class="token punctuation">)<span class="token punctuation">;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">endif
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">if <span class="token expression"><span class="token number">0
    cv<span class="token double-colon punctuation">::Mat <span class="token function">mapX<span class="token punctuation">(srcMat<span class="token punctuation">.rows<span class="token punctuation">, srcMat<span class="token punctuation">.cols<span class="token punctuation">, CV_32F<span class="token punctuation">)<span class="token punctuation">; <span class="token comment">// x 方向
    cv<span class="token double-colon punctuation">::Mat <span class="token function">mapY<span class="token punctuation">(srcMat<span class="token punctuation">.rows<span class="token punctuation">, srcMat<span class="token punctuation">.cols<span class="token punctuation">, CV_32F<span class="token punctuation">)<span class="token punctuation">; <span class="token comment">// y 方向
    <span class="token keyword">for<span class="token punctuation">(<span class="token keyword">int row <span class="token operator">= <span class="token number">0<span class="token punctuation">; row <span class="token operator">&lt; <span class="token number">100<span class="token punctuation">; row<span class="token operator">++<span class="token punctuation">)
    <span class="token punctuation">{
        <span class="token keyword">for<span class="token punctuation">(<span class="token keyword">int col <span class="token operator">= <span class="token number">0<span class="token punctuation">; col <span class="token operator">&lt; <span class="token number">100<span class="token punctuation">; col<span class="token operator">++<span class="token punctuation">)
        <span class="token punctuation">{
            <span class="token keyword">if<span class="token punctuation">(col <span class="token operator">&lt; <span class="token number">25<span class="token punctuation">)
            <span class="token punctuation">{
                <span class="token comment">// 0~24
                mapX<span class="token punctuation">.<span class="token generic-function"><span class="token function">at<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">float<span class="token operator">&gt;<span class="token punctuation">(row<span class="token punctuation">, col<span class="token punctuation">) <span class="token operator">= col <span class="token operator">* <span class="token number">2<span class="token punctuation">;
                mapY<span class="token punctuation">.<span class="token generic-function"><span class="token function">at<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">float<span class="token operator">&gt;<span class="token punctuation">(row<span class="token punctuation">, col<span class="token punctuation">) <span class="token operator">= row<span class="token punctuation">;
            <span class="token punctuation">}<span class="token keyword">else <span class="token keyword">if<span class="token punctuation">(col <span class="token operator">&lt; <span class="token number">50<span class="token punctuation">)
            <span class="token punctuation">{
                <span class="token comment">// 25-49
                mapX<span class="token punctuation">.<span class="token generic-function"><span class="token function">at<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">float<span class="token operator">&gt;<span class="token punctuation">(row<span class="token punctuation">, col<span class="token punctuation">) <span class="token operator">= <span class="token number">49<span class="token punctuation">;
                mapY<span class="token punctuation">.<span class="token generic-function"><span class="token function">at<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">float<span class="token operator">&gt;<span class="token punctuation">(row<span class="token punctuation">, col<span class="token punctuation">) <span class="token operator">= row<span class="token punctuation">;
            <span class="token punctuation">}<span class="token keyword">else <span class="token keyword">if<span class="token punctuation">(col <span class="token operator">&lt; <span class="token number">75<span class="token punctuation">)
            <span class="token punctuation">{
                <span class="token comment">// 50~74
                mapX<span class="token punctuation">.<span class="token generic-function"><span class="token function">at<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">float<span class="token operator">&gt;<span class="token punctuation">(row<span class="token punctuation">, col<span class="token punctuation">) <span class="token operator">= <span class="token number">50<span class="token punctuation">;
                mapY<span class="token punctuation">.<span class="token generic-function"><span class="token function">at<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">float<span class="token operator">&gt;<span class="token punctuation">(row<span class="token punctuation">, col<span class="token punctuation">) <span class="token operator">= row<span class="token punctuation">;
            <span class="token punctuation">}<span class="token keyword">else
            <span class="token punctuation">{
                <span class="token comment">// 75~99
                mapX<span class="token punctuation">.<span class="token generic-function"><span class="token function">at<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">float<span class="token operator">&gt;<span class="token punctuation">(row<span class="token punctuation">, col<span class="token punctuation">) <span class="token operator">= <span class="token number">99 <span class="token operator">- <span class="token punctuation">(<span class="token number">99 <span class="token operator">- col<span class="token punctuation">) <span class="token operator">* <span class="token number">2<span class="token punctuation">;
                mapY<span class="token punctuation">.<span class="token generic-function"><span class="token function">at<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">float<span class="token operator">&gt;<span class="token punctuation">(row<span class="token punctuation">, col<span class="token punctuation">) <span class="token operator">= row<span class="token punctuation">;
            <span class="token punctuation">}
        <span class="token punctuation">}
    <span class="token punctuation">}
    cv<span class="token double-colon punctuation">::<span class="token function">remap<span class="token punctuation">(srcMat<span class="token punctuation">, dstMat<span class="token punctuation">, mapX<span class="token punctuation">, mapY<span class="token punctuation">, cv<span class="token double-colon punctuation">::INTER_LINEAR<span class="token punctuation">)<span class="token punctuation">;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">endif
    cv<span class="token double-colon punctuation">::Mat <span class="token function">mapX<span class="token punctuation">(srcMat<span class="token punctuation">.rows<span class="token punctuation">, srcMat<span class="token punctuation">.cols<span class="token punctuation">, CV_32F<span class="token punctuation">)<span class="token punctuation">; <span class="token comment">// x 方向
    cv<span class="token double-colon punctuation">::Mat <span class="token function">mapY<span class="token punctuation">(srcMat<span class="token punctuation">.rows<span class="token punctuation">, srcMat<span class="token punctuation">.cols<span class="token punctuation">, CV_32F<span class="token punctuation">)<span class="token punctuation">; <span class="token comment">// y 方向
    <span class="token comment">// 这里显示原本的图
    <span class="token keyword">for<span class="token punctuation">(<span class="token keyword">int row <span class="token operator">= <span class="token number">0<span class="token punctuation">; row <span class="token operator">&lt; srcMat<span class="token punctuation">.rows<span class="token punctuation">; row<span class="token operator">++<span class="token punctuation">)
    <span class="token punctuation">{
        <span class="token keyword">for<span class="token punctuation">(<span class="token keyword">int col <span class="token operator">= <span class="token number">0<span class="token punctuation">; col <span class="token operator">&lt; srcMat<span class="token punctuation">.cols<span class="token punctuation">; col<span class="token operator">++<span class="token punctuation">)
        <span class="token punctuation">{
            mapX<span class="token punctuation">.<span class="token generic-function"><span class="token function">at<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">float<span class="token operator">&gt;<span class="token punctuation">(row<span class="token punctuation">, col<span class="token punctuation">) <span class="token operator">= col<span class="token punctuation">;
            mapY<span class="token punctuation">.<span class="token generic-function"><span class="token function">at<span class="token generic class-name"><span class="token operator">&lt;<span class="token keyword">float<span class="token operator">&gt;<span class="token punctuation">(row<span class="token punctuation">, col<span class="token punctuation">) <span class="token operator">= row<span class="token punctuation">;
        <span class="token punctuation">}
    <span class="token punctuation">}
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">if <span class="token expression"><span class="token number">0
    <span class="token comment">// 使用径向畸变
    <span class="token punctuation">{
        <span class="token comment">// 这里a永远是长边，长边是纵向的
        <span class="token punctuation">{
            <span class="token keyword">int cols <span class="token operator">= srcMat<span class="token punctuation">.cols<span class="token punctuation">;
            <span class="token keyword">int rows <span class="token operator">= srcMat<span class="token punctuation">.rows<span class="token punctuation">;
            <span class="token keyword">double horizontalStrength </span><span class="token operator">= </span><span class="token number">2.0f</span><span class="token punctuation">;
            </span><span class="token keyword">double verticalStrength  </span><span class="token operator">= </span><span class="token number">2.0f</span><span class="token punctuation">;
            </span><span class="token keyword">double zoom </span><span class="token operator">= </span><span class="token number">1.0</span><span class="token punctuation">;
            </span><span class="token keyword">int cx </span><span class="token operator">= cols </span><span class="token operator">/ </span><span class="token number">2</span><span class="token punctuation">;
            </span><span class="token keyword">int cy </span><span class="token operator">= rows </span><span class="token operator">/ </span><span class="token number">2</span><span class="token punctuation">;
            </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int x </span><span class="token operator">= </span><span class="token number">0</span><span class="token punctuation">; x </span><span class="token operator">&lt; cols</span><span class="token punctuation">; x</span><span class="token operator">++</span><span class="token punctuation">)
            </span><span class="token punctuation">{
                </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int y </span><span class="token operator">= </span><span class="token number">0</span><span class="token punctuation">; y </span><span class="token operator">&lt; rows</span><span class="token punctuation">; y</span><span class="token operator">++</span><span class="token punctuation">)
                </span><span class="token punctuation">{
                    </span><span class="token comment">// 先求的范围内的点离中心点的偏移比例
                    </span><span class="token keyword">double dx </span><span class="token operator">= </span><span class="token punctuation">(x </span><span class="token operator">- cx</span><span class="token punctuation">) </span><span class="token operator">* </span><span class="token number">1.0f </span><span class="token operator">/ cx</span><span class="token punctuation">;
                    </span><span class="token keyword">double dy </span><span class="token operator">= </span><span class="token punctuation">(y </span><span class="token operator">- cy</span><span class="token punctuation">) </span><span class="token operator">* </span><span class="token number">1.0f </span><span class="token operator">/ cy</span><span class="token punctuation">;
                    </span><span class="token comment">// 求得中心点的距离
                    </span><span class="token keyword">double distance </span><span class="token operator">= </span><span class="token function">sqrt</span><span class="token punctuation">(dx </span><span class="token operator">* dx </span><span class="token operator">+ dy </span><span class="token operator">* dy</span><span class="token punctuation">)</span><span class="token punctuation">;
                    </span><span class="token comment">// 缩放半径
                    </span><span class="token keyword">double r </span><span class="token operator">= distance </span><span class="token operator">/ zoom</span><span class="token punctuation">;
                    </span><span class="token comment">// 后面除0操作，这里防止为0
                    </span><span class="token keyword">if</span><span class="token punctuation">(r </span><span class="token operator">== </span><span class="token number">0</span><span class="token punctuation">)
                    </span><span class="token punctuation">{
                        r </span><span class="token operator">= </span><span class="token number">1e-6</span><span class="token punctuation">;
                    </span><span class="token punctuation">}
                    </span><span class="token comment">// 求出角度
                    </span><span class="token keyword">double theta </span><span class="token operator">= </span><span class="token function">atan</span><span class="token punctuation">(r</span><span class="token punctuation">)</span><span class="token punctuation">;
                    </span><span class="token comment">// 求出最新比例覆盖点的rX
                    </span><span class="token keyword">double rDistortedX </span><span class="token operator">= horizontalStrength </span><span class="token operator">* theta </span><span class="token operator">/ r</span><span class="token punctuation">;
                    </span><span class="token comment">// 求出最新比例覆盖点的rY
                    </span><span class="token keyword">double rDistortedY </span><span class="token operator">= verticalStrength </span><span class="token operator">* theta </span><span class="token operator">/ r</span><span class="token punctuation">;
                    </span><span class="token comment">// 求出当前这个点使用原来哪个点映射
                    </span><span class="token keyword">double dstX </span><span class="token operator">= cx </span><span class="token operator">+ rDistortedX </span><span class="token operator">* dx </span><span class="token operator">* cx</span><span class="token punctuation">;
                    </span><span class="token keyword">double dstY </span><span class="token operator">= cy </span><span class="token operator">+ rDistortedY </span><span class="token operator">* dy </span><span class="token operator">* cy</span><span class="token punctuation">;
                    </span><span class="token comment">// 给map赋值
                    mapX</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span><span class="token punctuation">(y</span><span class="token punctuation">, x</span><span class="token punctuation">) </span><span class="token operator">= </span><span class="token function">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span><span class="token punctuation">(dstX</span><span class="token punctuation">)</span><span class="token punctuation">;
                    mapY</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span><span class="token punctuation">(y</span><span class="token punctuation">, x</span><span class="token punctuation">) </span><span class="token operator">= </span><span class="token function">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span><span class="token punctuation">(dstY</span><span class="token punctuation">)</span><span class="token punctuation">;
                </span><span class="token punctuation">}
            </span><span class="token punctuation">}
        </span><span class="token punctuation">}
        cv</span><span class="token double-colon punctuation">::</span><span class="token function">remap</span><span class="token punctuation">(srcMat</span><span class="token punctuation">, dstMat</span><span class="token punctuation">, mapX</span><span class="token punctuation">, mapY</span><span class="token punctuation">, cv</span><span class="token double-colon punctuation">::INTER_LINEAR</span><span class="token punctuation">)</span><span class="token punctuation">;
    </span><span class="token punctuation">}
</span><span class="token directive-hash">#</span><span class="token directive keyword">endif

</span><span class="token directive-hash">#</span><span class="token directive keyword">if </span><span class="token number">1
    </span><span class="token comment">// 使用径向畸变
    </span><span class="token punctuation">{
        </span><span class="token comment">// 这里a永远是长边，长边是纵向的
        </span><span class="token punctuation">{
            </span><span class="token keyword">int cols </span><span class="token operator">= srcMat</span><span class="token punctuation">.cols</span><span class="token punctuation">;
            </span><span class="token keyword">int rows </span><span class="token operator">= srcMat</span><span class="token punctuation">.rows</span><span class="token punctuation">;
            </span><span class="token keyword">double horizontalStrength </span><span class="token operator">= </span><span class="token number">1.0f</span><span class="token punctuation">;
            </span><span class="token keyword">double verticalStrength </span><span class="token operator">= </span><span class="token number">1.0f</span><span class="token punctuation">;
            </span><span class="token keyword">double zoom </span><span class="token operator">= </span><span class="token number">1.0</span><span class="token punctuation">;
            </span><span class="token keyword">int cx </span><span class="token operator">= cols </span><span class="token operator">/ </span><span class="token number">2</span><span class="token punctuation">;
            </span><span class="token keyword">int cy </span><span class="token operator">= rows </span><span class="token operator">/ </span><span class="token number">2</span><span class="token punctuation">;
            </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int x </span><span class="token operator">= </span><span class="token number">0</span><span class="token punctuation">; x </span><span class="token operator">&lt; cols</span><span class="token punctuation">; x</span><span class="token operator">++</span><span class="token punctuation">)
            </span><span class="token punctuation">{
                </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int y </span><span class="token operator">= </span><span class="token number">0</span><span class="token punctuation">; y </span><span class="token operator">&lt; rows</span><span class="token punctuation">; y</span><span class="token operator">++</span><span class="token punctuation">)
                </span><span class="token punctuation">{
                    </span><span class="token comment">// 先求的范围内的点离中心点的偏移比例
                    </span><span class="token keyword">double dx </span><span class="token operator">= </span><span class="token punctuation">(x </span><span class="token operator">- cx</span><span class="token punctuation">) </span><span class="token operator">* </span><span class="token number">1.0f </span><span class="token operator">/ cx</span><span class="token punctuation">;
                    </span><span class="token keyword">double dy </span><span class="token operator">= </span><span class="token punctuation">(y </span><span class="token operator">- cy</span><span class="token punctuation">) </span><span class="token operator">* </span><span class="token number">1.0f </span><span class="token operator">/ cy</span><span class="token punctuation">;
                    </span><span class="token comment">// 求得中心点的距离
                    </span><span class="token keyword">double distance </span><span class="token operator">= </span><span class="token function">sqrt</span><span class="token punctuation">(dx </span><span class="token operator">* dx </span><span class="token operator">+ dy </span><span class="token operator">* dy</span><span class="token punctuation">)</span><span class="token punctuation">;
                    </span><span class="token comment">// 缩放半径
                    </span><span class="token keyword">double r </span><span class="token operator">= distance </span><span class="token operator">/ zoom</span><span class="token punctuation">;
                    </span><span class="token comment">// 后面除0操作，这里防止为0
                    </span><span class="token keyword">if</span><span class="token punctuation">(r </span><span class="token operator">== </span><span class="token number">0</span><span class="token punctuation">)
                    </span><span class="token punctuation">{
                        r </span><span class="token operator">= </span><span class="token number">1e-6</span><span class="token punctuation">;
                    </span><span class="token punctuation">}
                    </span><span class="token comment">// 求出角度
                    </span><span class="token keyword">double theta </span><span class="token operator">= </span><span class="token function">atan</span><span class="token punctuation">(r</span><span class="token punctuation">)</span><span class="token punctuation">;
                    </span><span class="token comment">// 求出最新比例覆盖点的rX
                    </span><span class="token keyword">double rDistortedX </span><span class="token operator">= horizontalStrength </span><span class="token operator">* theta </span><span class="token operator">/ r</span><span class="token punctuation">;
                    </span><span class="token comment">// 求出最新比例覆盖点的rY
                    </span><span class="token keyword">double rDistortedY </span><span class="token operator">= verticalStrength </span><span class="token operator">* theta </span><span class="token operator">/ r</span><span class="token punctuation">;
                    </span><span class="token comment">// 求出当前这个点使用原来哪个点映射
                    </span><span class="token keyword">double dstX </span><span class="token operator">= cx </span><span class="token operator">+ rDistortedX </span><span class="token operator">* dx </span><span class="token operator">* cx</span><span class="token punctuation">;
                    </span><span class="token keyword">double dstY </span><span class="token operator">= cy </span><span class="token operator">+ rDistortedY </span><span class="token operator">* dy </span><span class="token operator">* cy</span><span class="token punctuation">;
                    </span><span class="token comment">// 给map赋值
                    mapX</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span><span class="token punctuation">(y</span><span class="token punctuation">, x</span><span class="token punctuation">) </span><span class="token operator">= </span><span class="token function">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span><span class="token punctuation">(dstX</span><span class="token punctuation">)</span><span class="token punctuation">;
                    mapY</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span><span class="token punctuation">(y</span><span class="token punctuation">, x</span><span class="token punctuation">) </span><span class="token operator">= </span><span class="token function">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span><span class="token punctuation">(dstY</span><span class="token punctuation">)</span><span class="token punctuation">;
                </span><span class="token punctuation">}
            </span><span class="token punctuation">}
        </span><span class="token punctuation">}
        cv</span><span class="token double-colon punctuation">::</span><span class="token function">remap</span><span class="token punctuation">(srcMat</span><span class="token punctuation">, dstMat</span><span class="token punctuation">, mapX</span><span class="token punctuation">, mapY</span><span class="token punctuation">, cv</span><span class="token double-colon punctuation">::INTER_LINEAR</span><span class="token punctuation">)</span><span class="token punctuation">;
    </span><span class="token punctuation">}
</span><span class="token directive-hash">#</span><span class="token directive keyword">endif

    cv</span><span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"dstMat"</span><span class="token punctuation">, dstMat</span><span class="token punctuation">)</span><span class="token punctuation">;
    </span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)
    </span><span class="token punctuation">{
        cv</span><span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;
    </span><span class="token punctuation">}
</span><span class="token directive-hash">#</span><span class="token directive keyword">endif
</span><span class="token punctuation">}
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="v1730_444"></a>工程模板v1.73.0</h1>
</div>
<div class="cl-preview-section">
<p>  &nbsp;<img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533587-968415137.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="_449"></a>入坑</h1>
</div>
<div class="cl-preview-section">
<h2><a id="map1map2_450"></a>入坑一：map1和map2映射崩溃</h2>
</div>
<div class="cl-preview-section">
<h3><a id="_451"></a>问题</h3>
</div>
<div class="cl-preview-section">
<p>   映射崩溃，图是100x100，那么坐标x和y都是099，099，但是运行崩溃。<br>  &nbsp;<img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533663-1118887621.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<p>  &nbsp;<img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533659-437837710.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<h3><a id="_457"></a>原因</h3>


</div>
<div class="cl-preview-section">
<p>   定位到remap奔溃，发现map的类型是float不是double。</p>


</div>
<div class="cl-preview-section">
<h3><a id="_459"></a>解决</h3>


</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533731-1369948924.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<p>  &nbsp;<img src="https://img2024.cnblogs.com/blog/1971530/202503/1971530-20250312202533588-702474813.png" alt="在这里插入图片描述"></p>


</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.021209097935185" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-12 20:26">2025-03-12 20:25</span>&nbsp;
<a href="https://www.cnblogs.com/qq21497936">长沙红胖子Qt创微智科</a>&nbsp;
阅读(<span id="post_view_count">150</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18768431" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18768431);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18768431', targetLink: 'https://www.cnblogs.com/qq21497936/p/18768431', title: 'OpenCV开发笔记（八十三）：图像remap实现哈哈镜效果' })">举报</a>
</div>
        