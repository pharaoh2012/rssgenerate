
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/noear/p/19055328" title="发布于 2025-08-24 11:50">
    <span role="heading" aria-level="2">Solon StateMachine 实现状态机使用示例详解</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        Solon StateMachine是基于Solon Framework的状态机框架，用于管理复杂的状态流转场景。摘要如下： 状态机通过定义状态集合、转移规则和触发事件，精确控制系统行为逻辑。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="什么是状态机">什么是状态机</h2>
<p>状态机是计算机科学中的<strong>核心建模工具</strong>，用于描述对象在其生命周期内状态变化的逻辑模型。它通过定义<strong>有限状态集合</strong>、<strong>状态转移规则</strong>和<strong>触发事件</strong>，精确控制系统的行为逻辑。</p>
<p>Solon StateMachine 是 Solon Framework  提供的一个功能强大的状态机框架，可实现复杂的工作流、订单管理等需要状态流转的场景。通过对状态、事件和转移的管理，开发者能够构建出简洁而灵活的状态机逻辑。</p>
<h2 id="使用示例">使用示例</h2>
<h4 id="1导入maven依赖">1、导入maven依赖</h4>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.noear&lt;/groupId&gt;
    &lt;artifactId&gt;solon-statemachine&lt;/artifactId&gt;
    &lt;version&gt;3.5.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h4 id="2创建订单状态枚举类">2、创建订单状态枚举类</h4>
<pre><code class="language-java">import org.noear.solon.statemachine.State;

public enum OrderStatus implements State{
    WAITING_PAYMENT,//待支付
    WAITING_RECEIVE,//待取货
    FINISHED,//已完成
    CANCELED;//已取消
}
</code></pre>
<h4 id="3创建订单转悠事件枚举类">3、创建订单转悠事件枚举类</h4>
<pre><code class="language-java">import org.noear.solon.statemachine.Event;

public enum OrderEvent implements Event {
    CREATE_ORDER,//创建订单
    PAY_ORDER,//支付订单
    RECEIVE_ORDER,//取货
    CANCEL_ORDER,//取消订单
    FINISH_ORDER//完成订单
}
</code></pre>
<h4 id="4创建订单实体并实现-eventcontext-接口也可以不实现改用-eventcontextof">4、创建订单实体，并实现 EventContext 接口（也可以不实现，改用 EventContext.of(...)）</h4>
<pre><code class="language-java">public class Order implements EventContext&lt;OrderStatus, Order&gt; {
    private final String orderId;
    private OrderStatus status;

    public Order(String orderId, OrderStatus status) {
        this.orderId = orderId;
        this.status = status;
    }

    public String getOrderId() {
        return orderId;
    }

    public OrderStatus getStatus() {
        return status;
    }

    public void setStatus(OrderStatus status) {
        this.status = status;
    }

    // for EventContext

    @Override
    public OrderStatus getCurrentState() {
        return status;
    }

    @Override
    public Order getPayload() {
        return this;
    }
}
</code></pre>
<h4 id="5定义订单状态机组件并添加状态转移规则这里是重点了">5、定义订单状态机组件，并添加状态转移规则。这里是重点了</h4>
<p>Solon StateMachine 不管理当前状态，不涉及持久化。具有可复用、多线程安全特性。</p>
<pre><code class="language-java">import org.noear.solon.annotation.Managed;
import org.noear.solon.statemachine.StateMachine;

@Managed
public class OrderStateMachine extends StateMachine&lt;OrderStatus, OrderEvent,Order&gt; {
    public OrderStateMachine() {
        // 订单待支付 -&gt; 待取货
        addTransition(t -&gt; t
                .from(OrderStatus.WAITING_PAYMENT)
                .to(OrderStatus.WAITING_RECEIVE)
                .on(OrderEvent.PAY_ORDER)
                .then(c -&gt; c.getPayload().setStatus(c.getTo())));

        // 订单待取货 -&gt; 已完成
        addTransition(t -&gt; t
                .from(OrderStatus.WAITING_RECEIVE)
                .to(OrderStatus.FINISHED)
                .on(OrderEvent.FINISH_ORDER)
                .then(c -&gt; c.getPayload().setStatus(c.getTo())));

        // 订单待支付 -&gt; 已取消
        addTransition(t -&gt; t
                .from(OrderStatus.WAITING_PAYMENT)
                .to(OrderStatus.CANCELED)
                .on(OrderEvent.CANCEL_ORDER)
                .then(c -&gt; c.getPayload().setStatus(c.getTo())));
    }
}
</code></pre>
<h4 id="6创建调用示例服务">6、创建调用示例服务</h4>
<p>Solon StateMachine 在发送事件时，通过 EventContext 传递当前状态和装载。</p>
<pre><code class="language-java">@Managed
public class OrderService {
    @Inject
    private OrderStateMachine orderStateMachine;

    //支付
    public Order pay() {
        Order order = new Order("1", OrderStatus.WAITING_RECEIVE);

        System.out.println("尝试支付，订单号：" + order.getOrderId());

        try {
            //事件： 支付, 状态转换：待支付 → 待发货
            orderStateMachine.sendEvent(OrderEvent.PAY_ORDER, order);

            System.out.println("支付成功，订单号：" + order.getOrderId());
        } catch (Exception ex) {
            System.out.println("支付失败, 状态异常，订单号：" + order.getOrderId());
        }

        return order;
    }
}
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-24 11:51">2025-08-24 11:50</span>&nbsp;
<a href="https://www.cnblogs.com/noear">带刺的坐椅</a>&nbsp;
阅读(<span id="post_view_count">7</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19055328);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19055328', targetLink: 'https://www.cnblogs.com/noear/p/19055328', title: 'Solon StateMachine 实现状态机使用示例详解' })">举报</a>
</div>
        