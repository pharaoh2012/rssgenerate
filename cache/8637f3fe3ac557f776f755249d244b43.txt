
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/vipsoft/p/18702001" title="发布于 2025-02-07 08:48">
    <span role="heading" aria-level="2">C#  Winform 实现静态变量属性的值变了，触发事件，类似WPF的双向绑定</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在C# WinForms中，虽然没有像WPF那样内置的双向绑定机制，但你可以通过事件和属性封装来实现类似的功能。具体来说，你可以在静态属性的<code>set</code>访问器中触发一个自定义事件，然后在需要的地方订阅这个事件，以便在属性值发生变化时执行相应的操作。</p>
<p>以下是一个简单的示例，展示了如何实现这一功能：</p>
<pre><code class="language-c#">using System;
using System.Windows.Forms;

public static class MyStaticClass
{
    // 定义事件
    public static event EventHandler&lt;EventArgs&gt; MyPropertyChanged;

    private static string _myProperty;
    public static string MyProperty
    {
        get { return _myProperty; }
        set
        {
            if (_myProperty != value)
            {
                _myProperty = value;
                // 触发事件
                OnMyPropertyChanged();
            }
        }
    }

    // 触发事件的方法
    private static void OnMyPropertyChanged()
    {
        MyPropertyChanged?.Invoke(null, EventArgs.Empty);
    }
}

public class MyForm : Form
{
    private Label myLabel;

    public MyForm()
    {
        myLabel = new Label();
        myLabel.Text = "Initial Value";
        myLabel.Location = new System.Drawing.Point(10, 10);
        this.Controls.Add(myLabel);

        // 订阅事件
        MyStaticClass.MyPropertyChanged += MyStaticClass_MyPropertyChanged;
    }

    // 事件处理程序
    private void MyStaticClass_MyPropertyChanged(object sender, EventArgs e)
    {
        // 当属性值变化时，更新Label的文本
        myLabel.Text = MyStaticClass.MyProperty;
    }

    [STAThread]
    public static void Main()
    {
        Application.EnableVisualStyles();
        Application.Run(new MyForm());
    }
}
</code></pre>
<p>使用示例：<br>
你可以在其他地方修改 MyStaticClass.MyProperty 的值，例如：</p>
<pre><code class="language-c#">MyStaticClass.MyProperty = "New Value";
</code></pre>
<p>注意事项：</p>
<ul>
<li>由于 MyProperty 是静态的，它的值在整个应用程序生命周期内是共享的。</li>
<li>如果你需要在多个窗体或控件之间共享状态，这种方法是有效的。</li>
</ul>
<p>通过这种方式，你可以在WinForms中实现类似WPF的双向绑定效果。</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/vipsoft/" target="_blank">VipSoft</a>  转载请注明原文链接：<a href="https://www.cnblogs.com/vipsoft/p/18702001" target="_blank">https://www.cnblogs.com/vipsoft/p/18702001</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.008014012675925926" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-07 08:49">2025-02-07 08:48</span>&nbsp;
<a href="https://www.cnblogs.com/vipsoft">VipSoft</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18702001" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18702001);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18702001', targetLink: 'https://www.cnblogs.com/vipsoft/p/18702001', title: 'C#  Winform 实现静态变量属性的值变了，触发事件，类似WPF的双向绑定' })">举报</a>
</div>
        