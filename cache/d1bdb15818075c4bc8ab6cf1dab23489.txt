
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenshibao/p/18642334" title="发布于 2024-12-30 20:24">
    <span role="heading" aria-level="2">WPF中的DataGrid自动行列显示</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="新建wpf页面datagridautoview">新建wpf页面DataGridAutoView</h2>
<p>引用空间： xmlns:ga="clr-namespace:WPFDemoMVVM.Helpers"</p>
<pre><code>		&lt;Window x:Class="WPFDemoMVVM.View.DataGridAutoView"
				xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
				xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
				xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
				xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
				xmlns:local="clr-namespace:WPFDemoMVVM.View"
				xmlns:ga="clr-namespace:WPFDemoMVVM.Helpers"
				mc:Ignorable="d"
				Title="DataGridAutoView" Height="450" Width="800"&gt;
			&lt;Grid&gt;

				&lt;Grid ga:GridAssist.AutoRowColumn="_,2"&gt;
					&lt;Grid.Resources&gt;
						&lt;Style TargetType="Label" BasedOn="{StaticResource {x:Type Label}}"&gt;
							&lt;Setter Property="VerticalContentAlignment" Value="Center"&gt;&lt;/Setter&gt;
							&lt;Setter Property="Width" Value="120"&gt;&lt;/Setter&gt;
							&lt;Setter Property="Height" Value="40"&gt;&lt;/Setter&gt;
						&lt;/Style&gt;
						&lt;Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}"&gt;
							&lt;Setter Property="VerticalAlignment" Value="Center"&gt;&lt;/Setter&gt;
							&lt;Setter Property="Width" Value="180"&gt;&lt;/Setter&gt;
						&lt;/Style&gt;
					&lt;/Grid.Resources&gt;


					&lt;Label Content="IP Address"&gt;&lt;/Label&gt;
					&lt;TextBox Text="127.0.0.1"&gt;&lt;/TextBox&gt;

					&lt;Label Content="Port"&gt;&lt;/Label&gt;
					&lt;TextBox Text="8080"&gt;&lt;/TextBox&gt;

					&lt;Label Content="TimeOut"&gt;&lt;/Label&gt;
					&lt;TextBox Text="10000"&gt;&lt;/TextBox&gt;

				&lt;/Grid&gt;


			&lt;/Grid&gt;
		&lt;/Window&gt;
</code></pre>
<h2 id="新建一个类gridassist">新建一个类GridAssist</h2>
<p>在命名空间clr-namespace:WPFDemoMVVM.Helpers下，新建GridAssist类</p>
<pre><code>		static class GridAssist
		{
			#region AutoRowColumn

			public static string GetAutoRowColumn(DependencyObject obj)
			{
				return (string)obj.GetValue(AutoRowColumnProperty);
			}

			public static void SetAutoRowColumn(DependencyObject obj, string value)
			{
				obj.SetValue(AutoRowColumnProperty, value);
			}

			/// &lt;summary&gt;
			/// 自动排列 Grid 容器中的所有控件
			/// &lt;/summary&gt;
			/// &lt;remarks&gt;
			/// 值为一个逗号隔开的字符串，形如：&lt;br/&gt;
			/// - 2,3（2 行 3 列，列宽默认为 1*，行高为 Auto）&lt;br/&gt;
			/// - _,3（3 列，行数根据子控件而定）&lt;br/&gt;
			/// - 2,3,Auto（列的宽度为 Auto）&lt;br/&gt;
			/// Grid 中的所有控件将自动按照从左到右、从上到下的顺序进行排列&lt;br/&gt;
			/// 控件各自的 RowSpan 以及 ColumnSpan 也会被考虑
			/// &lt;/remarks&gt;
			/// &lt;example&gt;
			/// &lt;code&gt;
			/// &lt;![CDATA[
			/// &lt;Window xmlns:ap="clr-namespace:NemoDemo.AttachedProperties"&gt;
			///     &lt;Grid ap:GridHelper.AutoRowColumn="2,3"&gt;
			///         &lt;Button /&gt;                     // 1,1
			///         &lt;Label /&gt;                      // 1,2
			///         &lt;TextBox /&gt;                    // 1,3
			///         &lt;Button /&gt;                     // 2,1
			///         &lt;Label Grid.ColumnSpan="2" /&gt;  // 2,2-3
			///     &lt;/Grid&gt;
			/// &lt;/Window&gt;
			/// ]]&gt;
			/// &lt;/code&gt;
			/// &lt;/example&gt;
			public static readonly DependencyProperty AutoRowColumnProperty = DependencyProperty.RegisterAttached(
				"AutoRowColumn",
				typeof(string),
				typeof(GridAssist),
				new FrameworkPropertyMetadata("", FrameworkPropertyMetadataOptions.AffectsMeasure, OnAutoRowColumnChanged)
			);

			private static void OnAutoRowColumnChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
			{
				if (!(d is Grid grid))
					return;

				var value = e.NewValue as string;
				if (string.IsNullOrEmpty(value))
				{
					grid.RowDefinitions.Clear();
					grid.ColumnDefinitions.Clear();

					grid.Loaded -= OnGridLoaded;
					return;
				}

				grid.Loaded += OnGridLoaded;

				if (grid.IsLoaded)
					OnGridLoaded(grid, null);
			}

			private static void OnGridLoaded(object sender, RoutedEventArgs e)
			{
				var grid = sender as Grid;

				// 列宽，默认为 Star，即平均分布
				var width = new GridLength(1.0, GridUnitType.Star);
				var split = GridAssist.GetAutoRowColumn(grid).Split(',');
				var r = split[0] != "_" ? int.Parse(split[0]) : 1;
				var c = int.Parse(split[1]);
				// 如果有第三个参数且值为 auto，则宽度为 Auto
				if (split.Length == 3 &amp;&amp; split[2].Equals("auto", StringComparison.OrdinalIgnoreCase))
					width = GridLength.Auto;
				grid.RowDefinitions.Clear();
				grid.ColumnDefinitions.Clear();
				for (int i = 0; i &lt; r; i++)
					grid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto });
				for (int i = 0; i &lt; c; i++)
					grid.ColumnDefinitions.Add(new ColumnDefinition { Width = width });

				var cols = grid.ColumnDefinitions.Count;

				var map = new List&lt;bool[]&gt;();

				int x = 0,
					y = 0;
				foreach (UIElement item in grid.Children)
				{
					var rowSpan = Grid.GetRowSpan(item);
					var colSpan = Grid.GetColumnSpan(item);

					// 默认从上到下，从左到右，即任何时候控件的下方和右方都是空的
					// 可能会出现中途有一个 RowSpan &gt; 1 导致其左下方的右侧不为空的情况，暂不处理
					// 同时默认当前的 (x, y) 位置是一个可用位置

					// 当前控件占据的格子
					for (int i = 0; i &lt; rowSpan; i++)
					{
						// 如果 RowDefinition 不够用，则自动添加
						if (map.Count &lt;= y + i)
						{
							while (map.Count &lt;= y + i)
							{
								grid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto });
								map.Add(new bool[cols]);
							}
						}

						map[y + i][x] = true;
					}

					for (int i = 0; i &lt; colSpan; i++)
					{
						if (x + i &gt;= cols)
							break;
						map[y][x + i] = true;
					}

					Grid.SetRow(item, y);
					Grid.SetColumn(item, x);

					// 寻找下一个可用的格子
					while (map[y][x])
					{
						x++;
						if (x &gt;= cols)
						{
							x = 0;
							y++;
							if (y &gt;= map.Count)
							{
								grid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto });
								map.Add(new bool[cols]);
							}
						}
					}
				}
			}

			#endregion
		}
</code></pre>
<p>wpf项目：<a href="https://gitee.com/chenshibao/wpfdemo" target="_blank" rel="noopener nofollow">https://gitee.com/chenshibao/wpfdemo</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.4291852697002314" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-31 11:57">2024-12-30 20:24</span>&nbsp;
<a href="https://www.cnblogs.com/chenshibao">似梦亦非梦</a>&nbsp;
阅读(<span id="post_view_count">38</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18642334" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18642334);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18642334', targetLink: 'https://www.cnblogs.com/chenshibao/p/18642334', title: 'WPF中的DataGrid自动行列显示' })">举报</a>
</div>
        