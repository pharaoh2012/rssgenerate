
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/vipstone/p/18742921" title="发布于 2025-02-28 11:45">
    <span role="heading" aria-level="2">快收藏！一个技巧从此不再搞混缓存穿透和缓存击穿</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在 Redis 中有两个定义：一个缓存击穿、一个缓存穿透，因为二者的名字比较像，因此很容易就搞混了。但本文会给你提供一个记忆的小技巧，帮你彻底区分二者的定义。</p>
<p>在讲这个技巧之前，我们先来了解一下二者的区别。</p>
<h2 id="1定义与区别"><font style="color: rgba(6, 6, 7, 1)">1.定义与区别</font></h2>
<ul>
<li><strong>缓存穿透（Cache Penetration）</strong>：缓存穿透是指查询的数据既不在缓存中，也不在数据库中，但用户仍然频繁请求该数据，导致请求直接穿透到数据库，增加数据库压力。<img src="https://cdn.nlark.com/yuque/0/2025/png/92791/1740711786342-b10d671d-b3f5-4f87-b49a-998424d83459.png" alt="" loading="lazy">
<ul>
<li><strong>核心问题</strong>：请求的数据根本不存在，但请求量很大，导致数据库被无效查询。</li>
</ul>
</li>
<li><strong>缓存击穿（Cache Breakdown）</strong>：缓存击穿是指 热点数据的缓存失效，大量并发请求同时查询该数据，导致请求直接冲击数据库，增加数据库压力。<img src="https://cdn.nlark.com/yuque/0/2025/png/92791/1740711962945-2b3be460-d08f-4a1f-9747-42cdee7a4395.png" alt="" loading="lazy">
<ul>
<li><strong>核心问题</strong>：缓存中的数据失效，但数据库中有对应的数据，请求量集中导致数据库压力骤增。</li>
</ul>
</li>
</ul>
<h2 id="2常见场景">2.常见场景</h2>
<ul>
<li><strong>缓存穿透</strong>：
<ul>
<li>用户请求不存在的 ID（如负数 ID 或非法字符）。</li>
<li>恶意攻击者故意请求不存在的数据。</li>
<li>示例：请求用户 ID 为 -1 或不存在的用户信息。</li>
</ul>
</li>
<li><strong>缓存击穿</strong>：
<ul>
<li>热点数据（如热门商品信息、热门新闻）的缓存过期。</li>
<li>大量用户同时请求该热点数据。</li>
<li>示例：促销活动中的热门商品信息突然失效。</li>
</ul>
</li>
</ul>
<h2 id="3-解决方案">3. 解决方案</h2>
<h3 id="31-缓存穿透的解决方案">3.1 缓存穿透的解决方案</h3>
<ol>
<li><strong>布隆过滤器（Bloom Filter）</strong>：在缓存层前加一层布隆过滤器，预存所有合法 Key 的哈希值。请求到达时，先检查布隆过滤器：
<ul>
<li>如果不存在，直接拦截请求，返回空。</li>
<li>如果存在，再查询缓存或数据库。</li>
<li>优点：内存占用少，能有效拦截不存在的请求。</li>
<li>缺点：可能存在误判，需要合理设置参数。</li>
</ul>
</li>
<li><strong>缓存空值（Cache Null）</strong>：对查询结果为空的 Key，缓存一个 Null 值，避免重复穿透。
<ul>
<li>优点：实现简单，能有效减少数据库压力。</li>
<li>缺点：可能会占用额外的缓存空间。</li>
</ul>
</li>
<li><strong>参数校验</strong>：在查询缓存之前，先对请求的参数进行合法性检查，如过滤非法字符、判断参数范围等，对于明显错误的参数，直接拦截返回。</li>
</ol>
<h3 id="32-缓存击穿的解决方案">3.2 缓存击穿的解决方案</h3>
<ol>
<li><strong>互斥锁（Mutex Lock）</strong>：当缓存失效时，通过分布式锁让一个线程重建缓存，其他线程等待锁释放后重试。
<ul>
<li>优点：能有效避免多个线程同时查询数据库。</li>
<li>缺点：实现复杂，可能会影响性能。</li>
</ul>
</li>
<li><strong>永不过期（Logical Expiration）</strong>：对热点 Key 设置物理永不过期，通过后台异步线程定期更新缓存，保证数据新鲜度。
<ul>
<li>优点：避免缓存失效导致的数据库压力。</li>
<li>缺点：需要额外的逻辑来管理缓存更新。</li>
</ul>
</li>
<li><strong>熔断降级</strong>：在缓存失效期间，启用降级策略（如返回默认值或静态页面），保护数据库。
<ul>
<li>优点：能有效缓解数据库压力。</li>
<li>缺点：用户体验可能受影响。</li>
</ul>
</li>
</ol>
<h2 id="4对比">4.对比</h2>
<table>
<thead>
<tr>
<th><strong>问题</strong></th>
<th><strong>定义</strong></th>
<th><strong>常见场景</strong></th>
<th><strong>解决方案</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>缓存穿透</strong></td>
<td>请求的数据既不在缓存中，也不在数据库中，但请求量很大，导致数据库压力增大</td>
<td>非法请求、恶意攻击</td>
<td>布隆过滤器、缓存空值、参数校验</td>
</tr>
<tr>
<td><strong>缓存击穿</strong></td>
<td>热点数据的缓存失效，大量并发请求直接冲击数据库</td>
<td>热点数据失效、高并发场景</td>
<td>互斥锁、永不过期、熔断降级</td>
</tr>
</tbody>
</table>
<p>通过理解它们的定义、场景和解决方案，你可以更清晰地区分缓存穿透和缓存击穿，并在实际开发中选择合适的解决方法。</p>
<h2 id="5记忆秘诀">5.记忆秘诀</h2>
<ul>
<li><strong>缓存击穿</strong>：核心是热点数据失效 -&gt; 解决方案是<strong>重建热点数据</strong>。</li>
<li><strong>缓存穿透</strong>：核心是 Redis 和 MySQL 都没有数据 -&gt; 解决方案是<strong>拦截无效请求</strong>。</li>
</ul>
<p>因此，我们可以认为：</p>
<ul>
<li>缓存击穿 -&gt; <strong>正常的数据失效引发的问题</strong>。</li>
<li>缓存穿透 -&gt; <strong>非正常的数据访问引发的问题</strong>。</li>
</ul>
<p>就像警察叔叔审讯犯人一样，我们可以用“<strong>击穿犯罪嫌疑人的心里防线</strong>”，但<strong>不能用“穿透犯罪嫌疑的心里防线”</strong>，所以，<strong>击穿是“正义之词”，而穿透是“非正义之词”</strong>，例如，你这点小心思，我还看不“透”，“透”这个词通常是用来描述不好的事情的，因此我们可以使用这个技巧来彻底区分缓存击穿和缓存穿透了，如下图所示：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2025/png/92791/1740712757367-8a0598d5-64f8-4e48-afb7-3d597d4a5ac3.png" alt="" loading="lazy"></p>
<h2 id="小结">小结</h2>
<p>缓存击穿和缓存穿透是 Redis 中两个常见的高频面试问题，但又很容易搞混二者的定义，我们通过学习本文的内容，相信可以彻底的区分二者的定义。</p>
<blockquote>
<p>PS：我是磊哥，一个不爱讲“标准答案”，但爱琢磨标准答案背后原因和原理的一位技术爱好者。关注我，一起学习更多 Java 干货知识。</p>
</blockquote>
<blockquote>
<p>本文已收录到我的面试小站 <a href="https://www.javacn.site" target="_blank" rel="noopener nofollow">www.javacn.site</a>，其中包含的内容有：场景题、并发编程、MySQL、Redis、Spring、Spring MVC、Spring Boot、Spring Cloud、MyBatis、JVM、设计模式、消息队列等模块。</p>
</blockquote>

</div>
<div id="MySignature" role="contentinfo">
    <div style="text-align: center; color: red">
关注下面二维码，订阅更多精彩内容。
<br>
<img style="margin-left: 0px" src="https://images.cnblogs.com/cnblogs_com/vipstone/848916/o_211225130402_gognzhonghao.jpg">
</div>

<div style="display: none">
    <img src="http://icdn.apigo.cn/gitchat/rabbitmq.png?imageView2/0/w/500/h/400">
</div>
<div style="margin-bottom: 50px; display: none">

<img title="微信打赏" src="http://icdn.apigo.cn/myinfo/wchat-pay.png" alt="微信打赏">
<br>

<div style="display: none">
<span style="display: block; position: absolute; height: 40px; top: 50%; margin-top: -20px">关注公众号（加好友）：</span>

<img style="margin-left: 144px" src="http://icdn.apigo.cn/gongzhonghao2.png?imageView2/0/w/120/h/120">
</div>
<p></p>

<div id="AllanboltSignature">
    <p style="border-top: #e0e0e0 1px dashed; border-right: #e0e0e0 1px dashed; border-bottom: #e0e0e0 1px dashed; border-left: #e0e0e0 1px dashed; padding-top: 10px; padding-right: 10px; padding-bottom: 10px; padding-left: 60px; background: url(&quot;https://images.cnblogs.com/cnblogs_com/lloydsheng/239039/o_copyright.gif&quot;) #e5f1f4 no-repeat 1% 50%; font-family: 微软雅黑; font-size: 11px" id="PSignature">
        <br> 作者：
        <a href="http://vipstone.cnblogs.com/" target="_blank">王磊的博客</a>
        <br> 出处：
        <a href="http://vipstone.cnblogs.com/" target="_blank">http://vipstone.cnblogs.com/</a>
        <br>
    </p>
</div></div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.19385164559375" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-28 11:46">2025-02-28 11:45</span>&nbsp;
<a href="https://www.cnblogs.com/vipstone">磊哥|www.javacn.site</a>&nbsp;
阅读(<span id="post_view_count">281</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18742921" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18742921);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18742921', targetLink: 'https://www.cnblogs.com/vipstone/p/18742921', title: '快收藏！一个技巧从此不再搞混缓存穿透和缓存击穿' })">举报</a>
</div>
        