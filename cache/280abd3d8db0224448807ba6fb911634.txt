
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mengps/p/18674699" title="发布于 2025-01-16 11:33">
    <span role="heading" aria-level="2">Qml 中实现时间轴组件</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/802097/202501/802097-20250116113327957-411173614.png" alt="Qml 中实现时间轴组件" class="desc_img">
        时间轴组件是现代用户界面中常见的元素，用于按时间顺序展示事件。
本文将介绍如何使用 Qml 实现一个灵活且可定制的时间轴组件,并探讨其设计思路和实现细节。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h3 id="写在前面">【写在前面】</h3>
<p>时间轴组件是现代用户界面中常见的元素，用于按时间顺序展示事件。</p>
<p>本文将介绍如何使用 Qml 实现一个灵活且可定制的时间轴组件,并探讨其设计思路和实现细节。</p>
<hr>
<h3 id="正文开始">【正文开始】</h3>
<h4 id="效果图">效果图</h4>
<p><img src="https://img2024.cnblogs.com/blog/802097/202501/802097-20250116112957434-1654597253.gif" alt="" loading="lazy"></p>
<h4 id="组件概述">组件概述</h4>
<p>我们实现的时间轴组件具有以下特点：</p>
<ol>
<li><strong>支持自定义节点样式</strong>：可以设置节点的图标、背景颜色、边框颜色等。</li>
<li><strong>支持自定义线条样式</strong>：可以设置线条的颜色和宽度。</li>
<li><strong>支持自定义时间显示格式</strong>：可以设置时间的显示格式和字体样式。</li>
<li><strong>支持自定义内容样式</strong>：可以设置内容的背景颜色、边框颜色、字体样式等。</li>
<li><strong>支持正序和倒序排列</strong>：可以根据时间戳对事件进行正序或倒序排列。</li>
</ol>
<h4 id="实现细节">实现细节</h4>
<h5 id="1-组件结构">1. 组件结构</h5>
<p>时间轴组件的核心是一个 <code>ListView</code>，它用于展示所有的事件项。每个事件项由三个部分组成：</p>
<ul>
<li><strong>节点</strong>：表示事件的时间点，可以是图标或圆形背景。</li>
<li><strong>线条</strong>：连接相邻事件的节点。</li>
<li><strong>内容</strong>：显示事件的具体内容和时间。</li>
</ul>
<h5 id="2-属性定义">2. 属性定义</h5>
<p>组件提供了多个属性来定制时间轴的外观和行为：</p>
<ul>
<li><strong>节点样式</strong>：<code>defaultNodeIconColor</code>、<code>defaultNodeBackgroundRadius</code>、<code>defaultNodeBackgroundColor</code>、<code>defaultNodeBorderColor</code>、<code>defaultNodeBorderWidth</code>。</li>
<li><strong>线条样式</strong>：<code>defaultLineColor</code>、<code>defaultLineWidth</code>。</li>
<li><strong>时间样式</strong>：<code>defaultTimeFont</code>、<code>defaultTimeFontColor</code>、<code>defaultTimeFormat</code>。</li>
<li><strong>内容样式</strong>：<code>defaultContentFormat</code>、<code>defaultContentFont</code>、<code>defaultContentFontColor</code>、<code>defaultContentBackgroundRadius</code>、<code>defaultContentBackgroundColor</code>、<code>defaultContentBorderColor</code>、<code>defaultContentBorderWidth</code>。</li>
</ul>
<h5 id="3-数据模型">3. 数据模型</h5>
<p>时间轴组件使用 <code>ListModel</code> 来存储事件数据。每个事件项包含以下属性：</p>
<ul>
<li><code>timestamp</code>：事件的时间戳。</li>
<li><code>content</code>：事件的内容。</li>
<li><code>nodeOptions</code>：节点的样式选项。</li>
<li><code>lineOptions</code>：线条的样式选项。</li>
<li><code>timeOptions</code>：时间的样式选项。</li>
<li><code>contentOptions</code>：内容的样式选项。</li>
</ul>
<h5 id="4-事件项的添加和排序">4. 事件项的添加和排序</h5>
<p>组件提供了 <code>append</code> 函数来添加新的事件项，并根据时间戳进行排序。<code>sort</code> 函数用于对现有的事件项进行重新排序。</p>
<pre><code class="language-js">function append(object) {
    __initOptions(object);

    let index = 0;
    let rowCount = listModel.count;
    for (let i = 0; i &lt; rowCount; i++) {
        if (root.reverse) {
            if (listModel.get(i).__timestamp &lt; object.__timestamp) {
                index = i + 1;
            } else break;
        } else {
            if (listModel.get(i).__timestamp &gt; object.__timestamp) {
                index = i + 1;
            } else break;
        }
    }
    listModel.insert(index, object);
}

function sort() {
    let rowCount = listModel.count;
    for (let i = 0; i &lt; rowCount; i++) {
        for (let j = 0; i + j &lt; rowCount - 1; j++) {
            if (root.reverse) {
                if (listModel.get(j).__timestamp &gt; listModel.get(j + 1).__timestamp) {
                    listModel.move(j, j + 1, 1);
                }
            } else {
                if (listModel.get(j).__timestamp &lt; listModel.get(j + 1).__timestamp) {
                    listModel.move(j, j + 1, 1);
                }
            }
        }
    }
}
</code></pre>
<h5 id="5-事件项的渲染">5. 事件项的渲染</h5>
<p>每个事件项通过 <code>Loader</code> 动态加载节点、线条和内容组合组件：</p>
<pre><code class="language-js">Loader {
    id: lineLoader
    active: index !== (listModel.count - 1)
    width: nodeLoader.width
    height: parent.height - nodeLoader.height
    anchors.top: nodeLoader.bottom
    sourceComponent: lineDelegate
    property var lineOptions: __lineOptions
}

Loader {
    id: nodeLoader
    sourceComponent: nodeDelegate
    property var nodeOptions: __nodeOptions
}

Loader {
    id: contentLoader
    anchors.left: nodeLoader.right
    anchors.leftMargin: 10
    anchors.right: parent.right
    sourceComponent: contentDelegate
    property var content: __content
    property var contentOptions: __contentOptions
    property var timestamp: __timestamp
    property var timeOptions: __timeOptions
}
</code></pre>
<h4 id="如何使用">如何使用</h4>
<p>我们可以像使用标准的 qml 元素一样使用时间轴组件：</p>
<pre><code class="language-js">import QtQuick 2.15
import QtQuick.Controls 2.15

ApplicationWindow {
    visible: true
    width: 800
    height: 600
    title: "Timeline Example"

    Timeline {
        id: timeline
        width: 400
        anchors.top: row.bottom
        anchors.topMargin: 10
        anchors.bottom: parent.bottom
        anchors.horizontalCenter: parent.horizontalCenter
        defaultNodeBackgroundColor: "transparent"
        defaultNodeBorderWidth: 1
        defaultTimeFormat: "yyyy-MM-dd hh:mm:ss"
        initModel: [
            {
                timestamp: new Date(2024, 7, 1, 1),
                content: "更新 Github 模板 1",
                nodeOptions: { icon: "\uf27b" }
            },
            {
                timestamp: new Date(2024, 7, 7, 11),
                content: "更新 Github 模板 2",
                nodeOptions: { backgroundColor: "blue" },
                lineOptions: { color: "red" }
            },
            {
                timestamp: new Date(2024, 7, 7, 16),
                content: "更新 Github 模板 2",
                lineOptions: { width: 5 }
            },
            {
                timestamp: new Date(2024, 7, 9, 5, 30),
                content: "更新 Github 模板 3"
            },
            {
                timestamp: new Date(2024, 7, 12, 9),
                timeOptions: {
                    font: { family: "华文彩云", pointSize: 12 },
                    fontColor: "green",
                    format: "yyyy-MM-dd hh:mm:ss:zzz"
                },
                content: "更新 Github 模板 4",
            },
            {
                timestamp: new Date(2024, 7, 12, 18, 30),
                content: "更新 Github 模板 5",
                contentOptions: {
                    font: { family: "微软雅黑", pointSize: 14 },
                    fontColor: "red",
                    backgroundColor: "#ddd"
                }
            },
            {
                timestamp: new Date(2024, 7, 17, 5, 35),
                content: "更新 Github 模板 6 ===================================",
                contentOptions: {
                    borderColor: "#ddd"
                }
            }
        ]
    }
}
</code></pre>
<hr>
<h3 id="结语">【结语】</h3>
<p>通过自定义 Qml 组件，我们实现了一个灵活且可定制的时间轴组件。</p>
<p>该组件不仅支持基本的时间轴功能，还提供了丰富的样式定制选项，能够满足各种实际开发需求。</p>
<p>最后：项目链接(多多star呀..⭐_⭐)：</p>
<p>Github: <a href="https://github.com/mengps/QmlControls" target="_blank" rel="noopener nofollow">https://github.com/mengps/QmlControls</a></p>
<p>Gitee: <a href="https://gitee.com/MenPenS/QmlControls" target="_blank" rel="noopener nofollow">https://gitee.com/MenPenS/QmlControls</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.3695209078912037" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-16 11:34">2025-01-16 11:33</span>&nbsp;
<a href="https://www.cnblogs.com/mengps">梦起丶</a>&nbsp;
阅读(<span id="post_view_count">16</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18674699" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18674699);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18674699', targetLink: 'https://www.cnblogs.com/mengps/p/18674699', title: 'Qml 中实现时间轴组件' })">举报</a>
</div>
        