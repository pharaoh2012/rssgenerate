
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mjunz/p/18876811" title="发布于 2025-05-14 22:57">
    <span role="heading" aria-level="2">Seata源码—2.seata-samples项目介绍</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p data-track="4" data-pm-slice="0 0 []"><strong>大纲</strong></p>
<p data-track="5"><strong>1.seata-samples的配置文件和启动类</strong></p>
<p data-track="6"><strong>2.seata-samples业务服务启动时的核心工作</strong></p>
<p data-track="7"><strong>3.seata-samples库存服务的连接池配置</strong></p>
<p data-track="8"><strong>4.Seata对数据库连接池代理配置的分析</strong></p>
<p data-track="9"><strong>5.Dubbo RPC通信过程中传递全局事务XID</strong></p>
<p data-track="10"><strong>6.Seata跟Dubbo整合的Filter(基于SPI机制)</strong></p>
<p data-track="11"><strong>7.seata-samples的AT事务例子原理流程</strong></p>
<p data-track="12"><strong>8.Seata核心配置文件file.conf的内容介绍</strong></p>
<p data-track="13">&nbsp;</p>
<p data-track="14"><strong>1.seata-samples的配置文件和启动类</strong></p>
<p data-track="15"><strong>(1)seata-samples的测试步骤</strong></p>
<p data-track="16"><strong>(2)seata-samples用户服务的配置和启动类</strong></p>
<p data-track="17"><strong>(3)seata-samples库存服务的配置和启动类</strong></p>
<p data-track="18"><strong>(4)seata-samples订单服务的配置和启动类</strong></p>
<p data-track="19"><strong>(5)seata-samples业务服务的配置和启动类</strong></p>
<p data-track="20">&nbsp;</p>
<p data-track="21">示例仓库：</p>
<pre class="highlighter-hljs"><code>https://github.com/seata/seata-samples</code></pre>
<p data-track="23">示例代码的模块ID：seata-samples-dubbo</p>
<p data-track="24">&nbsp;</p>
<p data-track="25"><strong>(1)seata-samples的测试步骤</strong></p>
<p data-track="26">步骤一：启动DubboAccountServiceStarter</p>
<p data-track="27">步骤二：启动DubboStorageServiceStarter</p>
<p data-track="28">步骤三：启动DubboOrderServiceStarter</p>
<p data-track="29">步骤四：运行DubboBusinessTester</p>
<p data-track="30">&nbsp;</p>
<p data-track="31"><strong>(2)seata-samples用户服务的配置和启动类</strong></p>
<p data-track="32">dubbo-account-service.xml配置文件：</p>
<pre class="highlighter-hljs"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
     xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd"&gt;
    
    &lt;!-- 把jdbc.properties文件里的配置加载进来 --&gt;
    &lt;bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"&gt;
        &lt;property name="locations" value="classpath:jdbc.properties"/&gt;
    &lt;/bean&gt;
    
    &lt;!-- 将配置文件里的值注入到库存服务的数据库连接池accountDataSource中 --&gt;
    &lt;bean name="accountDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"&gt;
        &lt;property name="url" value="${jdbc.account.url}"/&gt;
        &lt;property name="username" value="${jdbc.account.username}"/&gt;
        &lt;property name="password" value="${jdbc.account.password}"/&gt;
        &lt;property name="driverClassName" value="${jdbc.account.driver}"/&gt;
        &lt;property name="initialSize" value="0"/&gt;
        &lt;property name="maxActive" value="180"/&gt;
        &lt;property name="minIdle" value="0"/&gt;
        &lt;property name="maxWait" value="60000"/&gt;
        &lt;property name="validationQuery" value="Select 'x' from DUAL"/&gt;
        &lt;property name="testOnBorrow" value="false"/&gt;
        &lt;property name="testOnReturn" value="false"/&gt;
        &lt;property name="testWhileIdle" value="true"/&gt;
        &lt;property name="timeBetweenEvictionRunsMillis" value="60000"/&gt;
        &lt;property name="minEvictableIdleTimeMillis" value="25200000"/&gt;
        &lt;property name="removeAbandoned" value="true"/&gt;
        &lt;property name="removeAbandonedTimeout" value="1800"/&gt;
        &lt;property name="logAbandoned" value="true"/&gt;
        &lt;property name="filters" value="mergeStat"/&gt;
    &lt;/bean&gt;
    
    &lt;!-- 创建数据库连接池代理，通过DataSourceProxy代理accountDataSourceProxy数据库连接池 --&gt;
    &lt;bean id="accountDataSourceProxy" class="io.seata.rm.datasource.DataSourceProxy"&gt;
        &lt;constructor-arg ref="accountDataSource"/&gt;
    &lt;/bean&gt;
    
    &lt;!-- 将数据库连接池代理accountDataSourceProxy注入到JdbcTemplate数据库操作组件中--&gt;
    &lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;
        &lt;property name="dataSource" ref="accountDataSourceProxy"/&gt;
    &lt;/bean&gt;

    &lt;dubbo:application name="dubbo-demo-account-service"&gt;
        &lt;dubbo:parameter key="qos.enable" value="false"/&gt;
    &lt;/dubbo:application&gt;
    &lt;dubbo:registry address="zookeeper://localhost:2181" /&gt;
    &lt;dubbo:protocol name="dubbo" port="20881"/&gt;
    &lt;dubbo:service interface="io.seata.samples.dubbo.service.AccountService" ref="service" timeout="10000"/&gt;
    
    &lt;!-- 将JdbcTemplate数据库操作组件注入到AccountServiceImpl中 --&gt;
    &lt;bean id="service" class="io.seata.samples.dubbo.service.impl.AccountServiceImpl"&gt;
        &lt;property name="jdbcTemplate" ref="jdbcTemplate"/&gt;
    &lt;/bean&gt;
    
    &lt;!-- 全局事务注解扫描组件 --&gt;
    &lt;bean class="io.seata.spring.annotation.GlobalTransactionScanner"&gt;
        &lt;constructor-arg value="dubbo-demo-account-service"/&gt;
        &lt;constructor-arg value="my_test_tx_group"/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;</code></pre>
<p data-track="34">启动类：</p>
<pre class="highlighter-hljs"><code>public class DubboAccountServiceStarter {
    //Account service is ready. A buyer register an account: U100001 on my e-commerce platform
    public static void main(String[] args) {
        ClassPathXmlApplicationContext accountContext = new ClassPathXmlApplicationContext(
            new String[] {"spring/dubbo-account-service.xml"}
        );
        accountContext.getBean("service");
        JdbcTemplate accountJdbcTemplate = (JdbcTemplate)accountContext.getBean("jdbcTemplate");
        accountJdbcTemplate.update("delete from account_tbl where user_id = 'U100001'");
        accountJdbcTemplate.update("insert into account_tbl(user_id, money) values ('U100001', 999)");
        new ApplicationKeeper(accountContext).keep();
    }
}

//The type Application keeper.
public class ApplicationKeeper {
    private static final Logger LOGGER = LoggerFactory.getLogger(ApplicationKeeper.class);
    private final ReentrantLock LOCK = new ReentrantLock();
    private final Condition STOP = LOCK.newCondition();

    //Instantiates a new Application keeper.
    public ApplicationKeeper(AbstractApplicationContext applicationContext) {
        addShutdownHook(applicationContext);
    }
    
    private void addShutdownHook(final AbstractApplicationContext applicationContext) {
        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    applicationContext.close();
                    LOGGER.info("ApplicationContext " + applicationContext + " is closed.");
                } catch (Exception e) {
                    LOGGER.error("Failed to close ApplicationContext", e);
                }

                LOCK.lock();
                try {
                    STOP.signal();
                } finally {
                    LOCK.unlock();
                }
            }
        }));
    }
    
    public void keep() {
        LOCK.lock();
        try {
            LOGGER.info("Application is keep running ... ");
            STOP.await();
        } catch (InterruptedException e) {
            LOGGER.error("ApplicationKeeper.keep() is interrupted by InterruptedException!", e);
        } finally {
            LOCK.unlock();
        }
    }
}</code></pre>
<p data-track="36"><strong>(3)seata-samples库存服务的配置和启动类</strong></p>
<p data-track="37">dubbo-stock-service.xml配置文件：</p>
<pre class="highlighter-hljs"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
     xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd"&gt;
    
    &lt;!-- 把jdbc.properties文件里的配置加载进来 --&gt;
    &lt;bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"&gt;
        &lt;property name="locations" value="classpath:jdbc.properties"/&gt;
    &lt;/bean&gt;
    
    &lt;!-- 将配置文件里的值注入到库存服务的数据库连接池stockDataSource中 --&gt;
    &lt;bean name="stockDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"&gt;
        &lt;property name="url" value="${jdbc.stock.url}"/&gt;
        &lt;property name="username" value="${jdbc.stock.username}"/&gt;
        &lt;property name="password" value="${jdbc.stock.password}"/&gt;
        &lt;property name="driverClassName" value="${jdbc.stock.driver}"/&gt;
        &lt;property name="initialSize" value="0"/&gt;
        &lt;property name="maxActive" value="180"/&gt;
        &lt;property name="minIdle" value="0"/&gt;
        &lt;property name="maxWait" value="60000"/&gt;
        &lt;property name="validationQuery" value="Select 'x' from DUAL"/&gt;
        &lt;property name="testOnBorrow" value="false"/&gt;
        &lt;property name="testOnReturn" value="false"/&gt;
        &lt;property name="testWhileIdle" value="true"/&gt;
        &lt;property name="timeBetweenEvictionRunsMillis" value="60000"/&gt;
        &lt;property name="minEvictableIdleTimeMillis" value="25200000"/&gt;
        &lt;property name="removeAbandoned" value="true"/&gt;
        &lt;property name="removeAbandonedTimeout" value="1800"/&gt;
        &lt;property name="logAbandoned" value="true"/&gt;
        &lt;property name="filters" value="mergeStat"/&gt;
    &lt;/bean&gt;
    
    &lt;!-- 创建数据库连接池代理，通过DataSourceProxy代理stockDataSource数据库连接池 --&gt;
    &lt;bean id="stockDataSourceProxy" class="io.seata.rm.datasource.DataSourceProxy"&gt;
        &lt;constructor-arg ref="stockDataSource"/&gt;
    &lt;/bean&gt;

    &lt;!-- 将数据库连接池代理stockDataSourceProxy注入到JdbcTemplate数据库操作组件中--&gt;
    &lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;
        &lt;property name="dataSource" ref="stockDataSourceProxy"/&gt;
    &lt;/bean&gt;

    &lt;dubbo:application name="dubbo-demo-stock-service"&gt;
        &lt;dubbo:parameter key="qos.enable" value="false"/&gt;
    &lt;/dubbo:application&gt;
    &lt;dubbo:registry address="zookeeper://localhost:2181" /&gt;
    &lt;dubbo:protocol name="dubbo" port="20882"/&gt;
    &lt;dubbo:service interface="io.seata.samples.dubbo.service.StockService" ref="service" timeout="10000"/&gt;
    
    &lt;!-- 将JdbcTemplate数据库操作组件注入到StockServiceImpl中 --&gt;
    &lt;bean id="service" class="io.seata.samples.dubbo.service.impl.StockServiceImpl"&gt;
        &lt;property name="jdbcTemplate" ref="jdbcTemplate"/&gt;
    &lt;/bean&gt;
    
    &lt;!-- 全局事务注解扫描组件 --&gt;
    &lt;bean class="io.seata.spring.annotation.GlobalTransactionScanner"&gt;
        &lt;constructor-arg value="dubbo-demo-stock-service"/&gt;
        &lt;constructor-arg value="my_test_tx_group"/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;</code></pre>
<p data-track="39">启动类：</p>
<pre class="highlighter-hljs"><code>//The type Dubbo stock service starter.
public class DubboStockServiceStarter {
    //Stock service is ready. A seller add 100 stock to a sku: C00321
    public static void main(String[] args) {
        ClassPathXmlApplicationContext stockContext = new ClassPathXmlApplicationContext(
            new String[] {"spring/dubbo-stock-service.xml"}
        );
        stockContext.getBean("service");
        JdbcTemplate stockJdbcTemplate = (JdbcTemplate)stockContext.getBean("jdbcTemplate");
        stockJdbcTemplate.update("delete from stock_tbl where commodity_code = 'C00321'");
        stockJdbcTemplate.update("insert into stock_tbl(commodity_code, count) values ('C00321', 100)");
        new ApplicationKeeper(stockContext).keep();
    }
}</code></pre>
<p data-track="41"><strong>(4)seata-samples订单服务的配置和启动类</strong></p>
<p data-track="42">dubbo-order-service.xml配置文件：</p>
<pre class="highlighter-hljs"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
     xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd"&gt;
    
    &lt;!-- 把jdbc.properties文件里的配置加载进来 --&gt;
    &lt;bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"&gt;
        &lt;property name="locations" value="classpath:jdbc.properties"/&gt;
    &lt;/bean&gt;
    
    &lt;!-- 将配置文件里的值注入到库存服务的数据库连接池orderDataSource中 --&gt;
    &lt;bean name="orderDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"&gt;
        &lt;property name="url" value="${jdbc.order.url}"/&gt;
        &lt;property name="username" value="${jdbc.order.username}"/&gt;
        &lt;property name="password" value="${jdbc.order.password}"/&gt;
        &lt;property name="driverClassName" value="${jdbc.order.driver}"/&gt;
        &lt;property name="initialSize" value="0"/&gt;
        &lt;property name="maxActive" value="180"/&gt;
        &lt;property name="minIdle" value="0"/&gt;
        &lt;property name="maxWait" value="60000"/&gt;
        &lt;property name="validationQuery" value="Select 'x' from DUAL"/&gt;
        &lt;property name="testOnBorrow" value="false"/&gt;
        &lt;property name="testOnReturn" value="false"/&gt;
        &lt;property name="testWhileIdle" value="true"/&gt;
        &lt;property name="timeBetweenEvictionRunsMillis" value="60000"/&gt;
        &lt;property name="minEvictableIdleTimeMillis" value="25200000"/&gt;
        &lt;property name="removeAbandoned" value="true"/&gt;
        &lt;property name="removeAbandonedTimeout" value="1800"/&gt;
        &lt;property name="logAbandoned" value="true"/&gt;
        &lt;property name="filters" value="mergeStat"/&gt;
    &lt;/bean&gt;
    
    &lt;!-- 创建数据库连接池代理，通过DataSourceProxy代理stockDataSource数据库连接池 --&gt;
    &lt;bean id="orderDataSourceProxy" class="io.seata.rm.datasource.DataSourceProxy"&gt;
        &lt;constructor-arg ref="orderDataSource"/&gt;
    &lt;/bean&gt;
    
    &lt;!-- 将数据库连接池代理orderDataSourceProxy注入到JdbcTemplate数据库操作组件中--&gt;
    &lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;
        &lt;property name="dataSource" ref="orderDataSourceProxy"/&gt;
    &lt;/bean&gt;

    &lt;dubbo:application name="dubbo-demo-order-service"&gt;
        &lt;dubbo:parameter key="qos.enable" value="false"/&gt;
    &lt;/dubbo:application&gt;
    &lt;dubbo:registry address="zookeeper://localhost:2181" /&gt;
    &lt;dubbo:protocol name="dubbo" port="20883"/&gt;
    &lt;dubbo:service interface="io.seata.samples.dubbo.service.OrderService" ref="service" timeout="10000"/&gt;
    &lt;dubbo:reference id="accountService" check="false" interface="io.seata.samples.dubbo.service.AccountService"/&gt;
    
    &lt;!-- 将JdbcTemplate数据库操作组件注入到OrderServiceImpl中 --&gt;
    &lt;bean id="service" class="io.seata.samples.dubbo.service.impl.OrderServiceImpl"&gt;
        &lt;property name="jdbcTemplate" ref="jdbcTemplate"/&gt;
        &lt;property name="accountService" ref="accountService"/&gt;
    &lt;/bean&gt;
    
    &lt;!-- 全局事务注解扫描组件 --&gt;
    &lt;bean class="io.seata.spring.annotation.GlobalTransactionScanner"&gt;
        &lt;constructor-arg value="dubbo-demo-order-service"/&gt;
        &lt;constructor-arg value="my_test_tx_group"/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;</code></pre>
<p data-track="44">启动类：</p>
<pre class="highlighter-hljs"><code>//The type Dubbo order service starter.
public class DubboOrderServiceStarter {
    //The entry point of application.
    public static void main(String[] args) {
        //Order service is ready . Waiting for buyers to order
        ClassPathXmlApplicationContext orderContext = new ClassPathXmlApplicationContext(
            new String[] {"spring/dubbo-order-service.xml"}
        );
        orderContext.getBean("service");
        new ApplicationKeeper(orderContext).keep();
    }
}</code></pre>
<p data-track="46"><strong>(5)seata-samples业务服务的配置和启动类</strong></p>
<p data-track="47">dubbo-business.xml配置文件：</p>
<pre class="highlighter-hljs"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
     xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd"&gt;

    &lt;dubbo:application name="dubbo-demo-app"&gt;
        &lt;dubbo:parameter key="qos.enable" value="false"/&gt;
        &lt;dubbo:parameter key="qos.accept.foreign.ip" value="false"/&gt;
        &lt;dubbo:parameter key="qos.port" value="33333"/&gt;
    &lt;/dubbo:application&gt;
    &lt;dubbo:registry address="zookeeper://localhost:2181" /&gt;
    &lt;dubbo:reference id="orderService" check="false" interface="io.seata.samples.dubbo.service.OrderService"/&gt;
    &lt;dubbo:reference id="stockService" check="false" interface="io.seata.samples.dubbo.service.StockService"/&gt;

    &lt;bean id="business" class="io.seata.samples.dubbo.service.impl.BusinessServiceImpl"&gt;
        &lt;property name="orderService" ref="orderService"/&gt;
        &lt;property name="stockService" ref="stockService"/&gt;
    &lt;/bean&gt;
    
    &lt;!-- 全局事务注解扫描组件 --&gt;
    &lt;bean class="io.seata.spring.annotation.GlobalTransactionScanner"&gt;
        &lt;constructor-arg value="dubbo-demo-app"/&gt;
        &lt;constructor-arg value="my_test_tx_group"/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;</code></pre>
<p data-track="49">启动类：</p>
<pre class="highlighter-hljs"><code>//The type Dubbo business tester.
public class DubboBusinessTester {
    //The entry point of application.
    public static void main(String[] args) {
        //The whole e-commerce platform is ready, The buyer(U100001) create an order on the sku(C00321) , the count is 2
        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
            new String[] {"spring/dubbo-business.xml"}
        );
        //模拟调用下单接口
        final BusinessService business = (BusinessService)context.getBean("business");
        business.purchase("U100001", "C00321", 2);
    }
}</code></pre>
<p data-track="51">&nbsp;</p>
<p data-track="52"><strong>2.seata-samples业务服务启动时的核心工作</strong></p>
<p data-track="53">BusinessService业务服务启动时，会创建两个服务接口的动态代理。一个是OrderService订单服务接口的Dubbo动态代理，另一个是StockService库存服务接口的Dubbo动态代理。BusinessService业务服务的下单接口会添加@GlobalTransaction注解，通过@GlobalTransaction注解开启一个分布式事务，Seata的内核组件GlobalTransactionScanner就会扫描到这个注解。</p>
<div class="pgc-img"><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/f3bda1d746c34642ab71d85cdc989eb3~tplv-obj.image?lk3s=ef143cfe&amp;traceid=20250514223416B0FBACEC8B288E91AA9A&amp;x-expires=2147483647&amp;x-signature=N6Ja7SHmmwooQZq0YcWZflA7GZ8%3D" data-ic="false" data-width="1080" data-height="500" data-ic-uri=""></div>
<pre class="highlighter-hljs"><code>//The type Dubbo business tester.
public class DubboBusinessTester {
    //The entry point of application.
    public static void main(String[] args) {
        //The whole e-commerce platform is ready , The buyer(U100001) create an order on the sku(C00321) , the count is 2
        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
            new String[] {"spring/dubbo-business.xml"}
        );
        //模拟调用下单接口
        final BusinessService business = (BusinessService)context.getBean("business");
        business.purchase("U100001", "C00321", 2);
    }
}

public class BusinessServiceImpl implements BusinessService {
    private static final Logger LOGGER = LoggerFactory.getLogger(BusinessService.class);
    private StockService stockService;
    private OrderService orderService;
    private Random random = new Random();

    @Override
    @GlobalTransactional(timeoutMills = 300000, name = "dubbo-demo-tx")//分布式事务如果5分钟还没跑完，就是超时
    public void purchase(String userId, String commodityCode, int orderCount) {
        LOGGER.info("purchase begin ... xid: " + RootContext.getXID());
        stockService.deduct(commodityCode, orderCount);
        orderService.create(userId, commodityCode, orderCount);
        if (random.nextBoolean()) {
            throw new RuntimeException("random exception mock!");
        }
    }
    
    //Sets stock service.
    public void setStockService(StockService stockService) {
        this.stockService = stockService;
    }
    
    //Sets order service.
    public void setOrderService(OrderService orderService) {
        this.orderService = orderService;
    }
}</code></pre>
<p data-track="55">&nbsp;</p>
<p data-track="56"><strong>3.seata-samples库存服务的连接池配置</strong></p>
<p data-track="57">首先会把jdbc.properties文件里的配置加载进来，然后将配置配置的值注入到库存服务的数据库连接池，接着通过Seata的DataSourceProxy对数据库连接池进行代理。</p>
<p data-track="58">&nbsp;</p>
<p data-track="59"><strong>一.启动类</strong></p>
<pre class="highlighter-hljs"><code>//The type Dubbo stock service starter.
public class DubboStockServiceStarter {
    //Stock service is ready. A seller add 100 stock to a sku: C00321
    public static void main(String[] args) {
        ClassPathXmlApplicationContext stockContext = new ClassPathXmlApplicationContext(
            new String[] {"spring/dubbo-stock-service.xml"}
        );
        stockContext.getBean("service");
        JdbcTemplate stockJdbcTemplate = (JdbcTemplate)stockContext.getBean("jdbcTemplate");
        stockJdbcTemplate.update("delete from stock_tbl where commodity_code = 'C00321'");
        stockJdbcTemplate.update("insert into stock_tbl(commodity_code, count) values ('C00321', 100)");
        new ApplicationKeeper(stockContext).keep();
    }
}</code></pre>
<p data-track="61"><strong>二.dubbo-stock-service.xml文件</strong></p>
<pre class="highlighter-hljs"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd"&gt;
    
    &lt;!-- 把jdbc.properties文件里的配置加载进来 --&gt;
    &lt;bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"&gt;
        &lt;property name="locations" value="classpath:jdbc.properties"/&gt;
    &lt;/bean&gt;
    
    &lt;!-- 将配置文件里的值注入到库存服务的数据库连接池stockDataSource中 --&gt;
    &lt;bean name="stockDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"&gt;
        &lt;property name="url" value="${jdbc.stock.url}"/&gt;
        &lt;property name="username" value="${jdbc.stock.username}"/&gt;
        &lt;property name="password" value="${jdbc.stock.password}"/&gt;
        &lt;property name="driverClassName" value="${jdbc.stock.driver}"/&gt;
        &lt;property name="initialSize" value="0"/&gt;
        &lt;property name="maxActive" value="180"/&gt;
        &lt;property name="minIdle" value="0"/&gt;
        &lt;property name="maxWait" value="60000"/&gt;
        &lt;property name="validationQuery" value="Select 'x' from DUAL"/&gt;
        &lt;property name="testOnBorrow" value="false"/&gt;
        &lt;property name="testOnReturn" value="false"/&gt;
        &lt;property name="testWhileIdle" value="true"/&gt;
        &lt;property name="timeBetweenEvictionRunsMillis" value="60000"/&gt;
        &lt;property name="minEvictableIdleTimeMillis" value="25200000"/&gt;
        &lt;property name="removeAbandoned" value="true"/&gt;
        &lt;property name="removeAbandonedTimeout" value="1800"/&gt;
        &lt;property name="logAbandoned" value="true"/&gt;
        &lt;property name="filters" value="mergeStat"/&gt;
    &lt;/bean&gt;
    
    &lt;!-- 创建数据库连接池代理，通过DataSourceProxy代理stockDataSource数据库连接池 --&gt;
    &lt;bean id="stockDataSourceProxy" class="io.seata.rm.datasource.DataSourceProxy"&gt;
        &lt;constructor-arg ref="stockDataSource"/&gt;
    &lt;/bean&gt;
    
    &lt;!-- 将数据库连接池代理stockDataSourceProxy注入到JdbcTemplate数据库操作组件中--&gt;
    &lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;
        &lt;property name="dataSource" ref="stockDataSourceProxy"/&gt;
    &lt;/bean&gt;
    &lt;dubbo:application name="dubbo-demo-stock-service"&gt;
        &lt;dubbo:parameter key="qos.enable" value="false"/&gt;
    &lt;/dubbo:application&gt;
    &lt;dubbo:registry address="zookeeper://localhost:2181" /&gt;
    &lt;dubbo:protocol name="dubbo" port="20882"/&gt;
    &lt;dubbo:service interface="io.seata.samples.dubbo.service.StockService" ref="service" timeout="10000"/&gt;
    
    &lt;!-- 将JdbcTemplate数据库操作组件注入到StockServiceImpl中 --&gt;
    &lt;bean id="service" class="io.seata.samples.dubbo.service.impl.StockServiceImpl"&gt;
        &lt;property name="jdbcTemplate" ref="jdbcTemplate"/&gt;
    &lt;/bean&gt;
    
    &lt;!-- 全局事务注解扫描组件 --&gt;
    &lt;bean class="io.seata.spring.annotation.GlobalTransactionScanner"&gt;
        &lt;constructor-arg value="dubbo-demo-stock-service"/&gt;
        &lt;constructor-arg value="my_test_tx_group"/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;</code></pre>
<p data-track="63"><strong>三.jdbc.properties文件文件</strong></p>
<pre class="highlighter-hljs"><code>jdbc.account.url=jdbc:mysql://localhost:3306/seata
jdbc.account.username=root
jdbc.account.password=123456
jdbc.account.driver=com.mysql.jdbc.Driver
# stock db config
jdbc.stock.url=jdbc:mysql://localhost:3306/seata
jdbc.stock.username=root
jdbc.stock.password=123456
jdbc.stock.driver=com.mysql.jdbc.Driver
# order db config
jdbc.order.url=jdbc:mysql://localhost:3306/seata
jdbc.order.username=root
jdbc.order.password=123456
jdbc.order.driver=com.mysql.jdbc.Driver</code></pre>
<p data-track="65">&nbsp;</p>
<p data-track="66"><strong>4.Seata对数据库连接池代理配置的分析</strong></p>
<p data-track="67">数据库连接池代理DataSourceProxy，会注入到JdbcTemplate数据库操作组件中。这样库存或者订单服务就可以通过Spring数据库操作组件JdbcTemplate，向Seata数据库连接池代理DataSourceProxy获取一个数据库连接。然后通过数据库连接，把SQL请求发送给MySQL进行处理。</p>
<div class="pgc-img"><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/20d8e930f9b741b683da02cf7c432841~tplv-obj.image?lk3s=ef143cfe&amp;traceid=20250514223416B0FBACEC8B288E91AA9A&amp;x-expires=2147483647&amp;x-signature=sOLwKJmGRwXDmVYMr8%2BbuZfsiws%3D" data-ic="false" data-width="1080" data-height="565" data-ic-uri=""></div>
<p data-track="68">&nbsp;</p>
<p data-track="69"><strong>5.Dubbo RPC通信过程中传递全局事务XID</strong></p>
<p data-track="70">BusinessService对StockService进行RPC调用时，会传递全局事务XID。StockService便可以根据RootContext.getXID()获取到全局事务XID。</p>
<pre class="highlighter-hljs"><code>public class BusinessServiceImpl implements BusinessService {
    private static final Logger LOGGER = LoggerFactory.getLogger(BusinessService.class);
    private StockService stockService;
    private OrderService orderService;
    private Random random = new Random();

    @Override
    @GlobalTransactional(timeoutMills = 300000, name = "dubbo-demo-tx")//分布式事务如果5分钟还没跑完，就是超时
    public void purchase(String userId, String commodityCode, int orderCount) {
        LOGGER.info("purchase begin ... xid: " + RootContext.getXID());
        stockService.deduct(commodityCode, orderCount);
        orderService.create(userId, commodityCode, orderCount);
        if (random.nextBoolean()) {
            throw new RuntimeException("random exception mock!");
        }
    }
    ...
}

public class StockServiceImpl implements StockService {
    private static final Logger LOGGER = LoggerFactory.getLogger(StockService.class);
    private JdbcTemplate jdbcTemplate;

    @Override
    public void deduct(String commodityCode, int count) {
        LOGGER.info("Stock Service Begin ... xid: " + RootContext.getXID());
        LOGGER.info("Deducting inventory SQL: update stock_tbl set count = count - {} where commodity_code = {}", count, commodityCode);

        jdbcTemplate.update("update stock_tbl set count = count - ? where commodity_code = ?", new Object[] {count, commodityCode});
        LOGGER.info("Stock Service End ... ");
    }
    ...
}</code></pre>
<div class="pgc-img"><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/949f4ea327eb44a8b38acfe5b0badcbf~tplv-obj.image?lk3s=ef143cfe&amp;traceid=20250514223416B0FBACEC8B288E91AA9A&amp;x-expires=2147483647&amp;x-signature=mtc%2Bxc7ZiJZekelsyUgbPE%2Bv1D0%3D" data-ic="false" data-width="1080" data-height="629" data-ic-uri=""></div>
<p data-track="72">&nbsp;</p>
<p data-track="73"><strong>6.Seata跟Dubbo整合的Filter(基于SPI机制)</strong></p>
<p data-track="74">Seata与Dubbo整合的Filter过滤器ApacheDubboTransactionPropagationFilter会将向SeataServer注册的全局事务xid，设置到RootContext中。</p>
<div class="pgc-img"><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/f9d7fc5ac7a747b7b1712faf86a8b302~tplv-obj.image?lk3s=ef143cfe&amp;traceid=20250514223416B0FBACEC8B288E91AA9A&amp;x-expires=2147483647&amp;x-signature=LEIxOufN%2B0gH5oKWAOFd99LVt0A%3D" data-ic="false" data-width="1080" data-height="845" data-ic-uri=""></div>
<div class="pgc-img"><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/a362608037974b1eabfa84168e54d8bf~tplv-obj.image?lk3s=ef143cfe&amp;traceid=20250514223416B0FBACEC8B288E91AA9A&amp;x-expires=2147483647&amp;x-signature=roWkbeivSdsBATC5FOJ3gWL51Ak%3D" data-ic="false" data-width="1080" data-height="630" data-ic-uri=""></div>
<p data-track="75">&nbsp;</p>
<p data-track="76"><strong>7.seata-samples的AT事务例子原理流程</strong></p>
<div class="pgc-img"><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/b0afd57f41984a99bf46a3582fd53a1a~tplv-obj.image?lk3s=ef143cfe&amp;traceid=20250514223416B0FBACEC8B288E91AA9A&amp;x-expires=2147483647&amp;x-signature=qz6yS1LB9ym5Y9Bstc6rrZQRnH0%3D" data-ic="false" data-width="1080" data-height="628" data-ic-uri=""></div>
<p data-track="77">&nbsp;</p>
<p data-track="78"><strong>8.Seata核心配置文件file.conf的内容介绍</strong></p>
<pre class="highlighter-hljs"><code># Seata网络通信相关的配置
transport {
    # 网络通信的类型是TCP
    type = "TCP"
    # 网络服务端使用NIO模式
    server = "NIO"
    # 是否开启心跳
    heartbeat = true
    # 是否允许Seata的客户端批量发送请求
    enableClientBatchSendRequest = true
    # 使用Netty进行网络通信时的线程配置
    threadFactory {
        bossThreadPrefix = "NettyBoss"
        workerThreadPrefix = "NettyServerNIOWorker"
        serverExecutorThread-prefix = "NettyServerBizHandler"
        shareBossWorker = false
        clientSelectorThreadPrefix = "NettyClientSelector"
        clientSelectorThreadSize = 1
        clientWorkerThreadPrefix = "NettyClientWorkerThread"
        # 用来监听和建立网络连接的Boss线程的数量
        bossThreadSize = 1
        # 默认的Worker线程数量是8
        workerThreadSize = "default"
    }
    shutdown {
        # 销毁服务端的时候的等待时间是多少秒
        wait = 3
    }
    # 序列化类型是Seata
    serialization = "seata"
    # 是否开启压缩
    compressor = "none"
}

# Seata服务端相关的配置
service {
    # 分布式事务的分组
    vgroupMapping.my_test_tx_group = "default"
    # only support when registry.type=file, please don't set multiple addresses
    default.grouplist = "127.0.0.1:8091"
    # 是否开启降级
    enableDegrade = false
    # 是否禁用全局事务
    disableGlobalTransaction = false
}

# Seata客户端相关的配置
client {
    # 数据源管理组件的配置
    rm {
        # 异步提交缓冲区的大小
        asyncCommitBufferLimit = 10000
        # 锁相关的配置：重试间隔、重试次数、回滚冲突处理
        lock {
            retryInterval = 10
            retryTimes = 30
            retryPolicyBranchRollbackOnConflict = true
        }
        reportRetryCount = 5
        tableMetaCheckEnable = false
        reportSuccessEnable = false
    }
    # 事务管理组件的配置
    tm {
        commitRetryCount = 5
        rollbackRetryCount = 5
    }
    # 回滚日志的配置
    undo {
        dataValidation = true
        logSerialization = "jackson"
        logTable = "undo_log"
    }
    # log日志的配置
    log {
        exceptionRate = 100
    }
}</code></pre>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5572790287060185" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-14 22:57">2025-05-14 22:57</span>&nbsp;
<a href="https://www.cnblogs.com/mjunz">东阳马生架构</a>&nbsp;
阅读(<span id="post_view_count">70</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18876811);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18876811', targetLink: 'https://www.cnblogs.com/mjunz/p/18876811', title: 'Seata源码—2.seata-samples项目介绍' })">举报</a>
</div>
        