
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ThinkerQAQ/p/18950788" title="发布于 2025-06-26 19:11">
    <span role="heading" aria-level="2">Java源码分析系列笔记-14.ThreadPool</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p></p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#1-是什么" rel="noopener nofollow">1. 是什么</a></li><li><a href="#2-如何使用" rel="noopener nofollow">2. 如何使用</a></li><li><a href="#3-原理分析" rel="noopener nofollow">3. 原理分析</a><ul><li><a href="#31-uml" rel="noopener nofollow">3.1. uml</a></li><li><a href="#32-构造方法" rel="noopener nofollow">3.2. 构造方法</a></li><li><a href="#33-set方法" rel="noopener nofollow">3.3. set方法</a><ul><li><a href="#331-先获取thread对应的threadlocalmap" rel="noopener nofollow">3.3.1. 先获取Thread对应的ThreadLocalMap</a></li><li><a href="#332-有的话调用threadlocalmap-set方法插入threadlocalvalue" rel="noopener nofollow">3.3.2. 有的话调用ThreadLocalMap set方法插入ThreadLocal:value</a><ul><li><a href="#3321-发生hash冲突则使用开放寻址法" rel="noopener nofollow">3.3.2.1. 发生Hash冲突则使用开放寻址法</a></li></ul></li><li><a href="#333-没有则创建threadlocalmap并放入threadlocalvalue" rel="noopener nofollow">3.3.3. 没有则创建ThreadLocalMap并放入ThreadLocal:value</a><ul><li><a href="#3331-threadlocalmap构造方法" rel="noopener nofollow">3.3.3.1. ThreadLocalMap构造方法</a></li></ul></li></ul></li><li><a href="#34-get方法" rel="noopener nofollow">3.4. get方法</a><ul><li><a href="#341-先获取thread对应的threadlocalmap" rel="noopener nofollow">3.4.1. 先获取Thread对应的ThreadLocalMap</a></li><li><a href="#342-map不为空那么从map中获取key为当前threadlocal对象的entry" rel="noopener nofollow">3.4.2. Map不为空，那么从Map中获取key为当前ThreadLocal对象的Entry</a><ul><li><a href="#3421-使用开放寻址法继续寻找下一个位置" rel="noopener nofollow">3.4.2.1. 使用开放寻址法继续寻找下一个位置</a></li></ul></li><li><a href="#343-map为空则向创建后初始化默认值null" rel="noopener nofollow">3.4.3. Map为空，则向创建后初始化默认值Null</a></li></ul></li><li><a href="#35-remove方法" rel="noopener nofollow">3.5. remove方法</a><ul><li><a href="#351-先获取thread对应的threadlocalmap" rel="noopener nofollow">3.5.1. 先获取Thread对应的ThreadLocalMap</a></li><li><a href="#352-通过threadlocalmap-remove-key为当前threadlocal的entry" rel="noopener nofollow">3.5.2. 通过ThreadLocalMap remove key为当前ThreadLocal的Entry</a></li></ul></li></ul></li><li><a href="#4-总结" rel="noopener nofollow">4. 总结</a></li><li><a href="#5-参考" rel="noopener nofollow">5. 参考</a></li></ul></div><p></p>
<h2 id="1-是什么">1. 是什么</h2>
<p>不是线程同步机制，是一种线程数据隔离机制。<br>
多线程共享变量通信的情况下，我们需要保证线程安全。一种方法是使用锁，另一种就是数据隔离机制。<br>
ThreadLocal用的是后一种，即每个线程操作的是自己独有的数据，因此互相之间不会影响</p>
<h2 id="2-如何使用">2. 如何使用</h2>
<pre><code class="language-java">public class ThreadLocalTest
{
    public static void main(String[] args) throws InterruptedException
    {
        ThreadLocal&lt;String&gt; threadLocal = new ThreadLocal&lt;&gt;();
        threadLocal.set("main");
        System.out.println(Thread.currentThread().getName() + ":" + threadLocal.get());//main:main

        Thread thread1 = new Thread(()-&gt;{
            threadLocal.set("thread1");
            System.out.println(Thread.currentThread().getName() + ":" + threadLocal.get());//Thread-0:thread1
        });

        Thread thread2 = new Thread(()-&gt;{
            threadLocal.set("thread2");
            System.out.println(Thread.currentThread().getName() + ":" + threadLocal.get());//Thread-1:thread2
        });

        thread1.start();
        thread2.start();

        thread1.join();
        thread2.join();

        System.out.println(Thread.currentThread().getName() + ":" + threadLocal.get());//main:main

        threadLocal.remove();

        System.out.println(Thread.currentThread().getName() + ":" + threadLocal.get());//main:null


    }
}
</code></pre>
<h2 id="3-原理分析">3. 原理分析</h2>
<h3 id="31-uml">3.1. uml</h3>
<p><img alt="" loading="lazy" data-src="https://raw.githubusercontent.com/TDoct/images/master/img/20191230160756.png" class="lazyload"><br>
Thread有一个ThreadLocalMap属性，<br>
ThreadLocalMap有一个Entry数组属性<br>
Entry有key和value属性，其中key为ThreadLocal，value为Object。并且Entry继承了WeakReference</p>
<h3 id="32-构造方法">3.2. 构造方法</h3>
<pre><code class="language-java"> //记录hash值
 private static AtomicInteger nextHashCode =
        new AtomicInteger();
 
 public ThreadLocal() {
 }
</code></pre>
<h3 id="33-set方法">3.3. set方法</h3>
<pre><code class="language-java">public void set(T value) {
    Thread t = Thread.currentThread();
    //获取当前线程对应的ThreadLocalMap属性
    ThreadLocalMap map = getMap(t);
    if (map != null)
    	//将（ThreadLocal，value）构造成Entry放入ThreadLocalMap
        map.set(this, value);
    else
    	//创建新的map关联当前线程，并且并放入（ThreadLocal，value）
        createMap(t, value);
}
</code></pre>
<ul>
<li>4行：先获取Thread对应的ThreadLocalMap</li>
<li>5-7行：有的话调用ThreadLocalMap set方法插入ThreadLocal:value</li>
<li>8-10行：没有则创建ThreadLocalMap并放入ThreadLocal:value</li>
</ul>
<p>下面具体分析：</p>
<h4 id="331-先获取thread对应的threadlocalmap">3.3.1. 先获取Thread对应的ThreadLocalMap</h4>
<pre><code class="language-java">Thread t = Thread.currentThread();
//获取当前线程对应的ThreadLocalMap属性
ThreadLocalMap map = getMap(t);
</code></pre>
<ul>
<li>getMap</li>
</ul>
<pre><code class="language-java">ThreadLocalMap getMap(Thread t) {
	//获取当前Thread对应的ThreadLocalMap对象
    return t.threadLocals;
}
</code></pre>
<h4 id="332-有的话调用threadlocalmap-set方法插入threadlocalvalue">3.3.2. 有的话调用ThreadLocalMap set方法插入ThreadLocal:value</h4>
<ul>
<li>调用ThreadLocalMap set</li>
</ul>
<pre><code class="language-java">private void set(ThreadLocal&lt;?&gt; key, Object value) {

    Entry[] tab = table;
    int len = tab.length;
   	//计算当前元素在数组中的位置
    int i = key.threadLocalHashCode &amp; (len-1);

	//如果key不在数组中，那么一直找到空位置
    for (Entry e = tab[i];
         e != null;
     	//开放寻址法
         e = tab[i = nextIndex(i, len)]) {
        ThreadLocal&lt;?&gt; k = e.get();

		//key相等，替换值
        if (k == key) {
            e.value = value;
            return;
        }

		//key为空，那么构造entry放入
        if (k == null) {
            replaceStaleEntry(key, value, i);
            return;
        }
    }

	//走到这里说明退出循环，找到了空位置
    tab[i] = new Entry(key, value);
    int sz = ++size;
    //是否需要扩容
    if (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)
        rehash();
}
</code></pre>
<h5 id="3321-发生hash冲突则使用开放寻址法">3.3.2.1. 发生Hash冲突则使用开放寻址法</h5>
<ul>
<li>nextIndex</li>
</ul>
<pre><code class="language-java">private static int nextIndex(int i, int len) {
	//线性探测i+1的位置
    return ((i + 1 &lt; len) ? i + 1 : 0);
}
</code></pre>
<h4 id="333-没有则创建threadlocalmap并放入threadlocalvalue">3.3.3. 没有则创建ThreadLocalMap并放入ThreadLocal:value</h4>
<pre><code class="language-java"> else
    //创建新的map关联当前线程，并且并放入（ThreadLocal，value）
    createMap(t, value);
</code></pre>
<ul>
<li>createMap</li>
</ul>
<pre><code class="language-java">void createMap(Thread t, T firstValue) {
	//当前ThreadLocal对象作为key，value作为value构造entry并构造map
	//thread的ThreadLocalMap属性是这里设置的
    t.threadLocals = new ThreadLocalMap(this, firstValue);
}
</code></pre>
<h5 id="3331-threadlocalmap构造方法">3.3.3.1. ThreadLocalMap构造方法</h5>
<pre><code class="language-java">static class ThreadLocalMap {

	//由于Entry继承了WeakRefence
	static class Entry extends WeakReference&lt;ThreadLocal&lt;?&gt;&gt; {
		Object value;

		Entry(ThreadLocal&lt;?&gt; k, Object v) {
		//key是个弱引用（即一旦发生垃圾回收就会回收这个引用指向的对象）。
		//当key被回收后，也即ThreadLocal被回收了，但是Entry中value的引用还在无法回收，可能会造成内存泄漏
		    super(k);
		    value = v;
		}
	}

	//初始容量为16，必须为2的次方
	private static final int INITIAL_CAPACITY = 16;

	//使用数组+线性探测法
	private Entry[] table;

	//实际使用的长度
	private int size = 0;

	//实际使用的长度达到这个长度时需要扩容
	private int threshold; 
	
	ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) {
		table = new Entry[INITIAL_CAPACITY];
		//计算下标并且存入entry
		int i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - 1);
		table[i] = new Entry(firstKey, firstValue);
		
		size = 1;
		setThreshold(INITIAL_CAPACITY);//设置threshold为16*2/3=10
	}

	private void setThreshold(int len) {
        threshold = len * 2 / 3;
    }

</code></pre>
<h3 id="34-get方法">3.4. get方法</h3>
<pre><code class="language-java">public T get() {
    Thread t = Thread.currentThread();
    //获取当前线程对应的ThreadLocalMap
    ThreadLocalMap map = getMap(t);
    if (map != null) {
    	//以当前ThreadLocal对象作为key从ThreadLocalMap中获取entry
        ThreadLocalMap.Entry e = map.getEntry(this);
    	//从entry中获取value并返回	
        if (e != null) {
            @SuppressWarnings("unchecked")
            T result = (T)e.value;
            return result;
        }
    }
    //初始化map
    return setInitialValue();
}
</code></pre>
<ul>
<li>4行：先获取Thread对应的ThreadLocalMap</li>
<li>5-14行：Map不为空，那么从Map中获取key为当前ThreadLocal对象的Entry</li>
<li>15-16行：Map为空，则向创建后初始化默认值Null</li>
</ul>
<h4 id="341-先获取thread对应的threadlocalmap">3.4.1. 先获取Thread对应的ThreadLocalMap</h4>
<pre><code class="language-java">Thread t = Thread.currentThread();
//获取当前线程对应的ThreadLocalMap属性
ThreadLocalMap map = getMap(t);
</code></pre>
<ul>
<li>getMap</li>
</ul>
<pre><code class="language-java">ThreadLocalMap getMap(Thread t) {
	//获取当前Thread对应的ThreadLocalMap对象
    return t.threadLocals;
}
</code></pre>
<h4 id="342-map不为空那么从map中获取key为当前threadlocal对象的entry">3.4.2. Map不为空，那么从Map中获取key为当前ThreadLocal对象的Entry</h4>
<pre><code class="language-java">private Entry getEntry(ThreadLocal&lt;?&gt; key) {
	//计算下标
    int i = key.threadLocalHashCode &amp; (table.length - 1);
    Entry e = table[i];
    //很幸运第一个位置就是要找的元素
    if (e != null &amp;&amp; e.get() == key)
        return e;
    else
    	//很不幸，需要用线性探测法
        return getEntryAfterMiss(key, i, e);
}

</code></pre>
<h5 id="3421-使用开放寻址法继续寻找下一个位置">3.4.2.1. 使用开放寻址法继续寻找下一个位置</h5>
<ul>
<li>getEntryAfterMiss</li>
</ul>
<pre><code class="language-java">private Entry getEntryAfterMiss(ThreadLocal&lt;?&gt; key, int i, Entry e) {
    Entry[] tab = table;
    int len = tab.length;

	//一直线性探测到为null（不存在）
    while (e != null) {
        ThreadLocal&lt;?&gt; k = e.get();
        //key是否相等
        if (k == key)
            return e;
        //ThreadLocal被回收了，那么回收value对象
        if (k == null)
            expungeStaleEntry(i);
        else//继续下一个
            i = nextIndex(i, len);
        e = tab[i];
    }
    
    return null;
}
</code></pre>
<h4 id="343-map为空则向创建后初始化默认值null">3.4.3. Map为空，则向创建后初始化默认值Null</h4>
<ul>
<li>setInitialValue</li>
</ul>
<pre><code class="language-java">private T setInitialValue() {
    T value = initialValue();//return null;
    //下面这段代码同set方法
    Thread t = Thread.currentThread();
    ThreadLocalMap map = getMap(t);
    if (map != null)
        map.set(this, value);
    else
        createMap(t, value);
    return value;
}
</code></pre>
<h3 id="35-remove方法">3.5. remove方法</h3>
<pre><code class="language-java">public void remove() {
//获取当前线程对应的map
 ThreadLocalMap m = getMap(Thread.currentThread());
 if (m != null)
     m.remove(this);
}
</code></pre>
<ul>
<li>3行：先获取Thread对应的ThreadLocalMap</li>
<li>4-5行：通过ThreadLocalMap remove key为当前ThreadLocal的Entry</li>
</ul>
<h4 id="351-先获取thread对应的threadlocalmap">3.5.1. 先获取Thread对应的ThreadLocalMap</h4>
<pre><code class="language-java">//获取当前线程对应的map
 ThreadLocalMap m = getMap(Thread.currentThread());
</code></pre>
<ul>
<li>getMap</li>
</ul>
<pre><code class="language-java">ThreadLocalMap getMap(Thread t) {
	//获取当前Thread对应的ThreadLocalMap对象
    return t.threadLocals;
}
</code></pre>
<h4 id="352-通过threadlocalmap-remove-key为当前threadlocal的entry">3.5.2. 通过ThreadLocalMap remove key为当前ThreadLocal的Entry</h4>
<pre><code class="language-java">private void remove(ThreadLocal&lt;?&gt; key) {
    Entry[] tab = table;
    int len = tab.length;
    int i = key.threadLocalHashCode &amp; (len-1);
    //从map中找到对应的key并把entry删除
    for (Entry e = tab[i];
         e != null;
         e = tab[i = nextIndex(i, len)]) {
        if (e.get() == key) {
            e.clear();//清空key引用
            expungeStaleEntry(i);//回收value对象
            return;
        }
    }
</code></pre>
<p>}</p>
<h2 id="4-总结">4. 总结</h2>
<ul>
<li>每个Thread都有ThreadLocalMap属性。可以想象成一个HashMap，这个Map中Entry 的key为ThreadLocal，value为要存储的值</li>
<li>由于key为ThreadLocal自己，因此一个ThreadLocal只能存储一个Object对象，如果需要存储多个Object对象那么就需要多个ThreadLocal</li>
<li>由于Entry继承了WeakRefence，key是个弱引用（即一旦发生垃圾回收就会回收这个引用指向的对象）。当key被回收后，也即ThreadLocal被回收了，但是Entry中value的引用还在无法回收，可能会造成内存泄漏。因此我们需要用static引用ThreadLocal变量且手动remove</li>
</ul>
<h2 id="5-参考">5. 参考</h2>
<ul>
<li><a href="http://ifeve.com/%E6%89%8B%E6%92%95%E9%9D%A2%E8%AF%95%E9%A2%98threadlocal%EF%BC%81%EF%BC%81%EF%BC%81/" target="_blank" rel="noopener nofollow">手撕面试题ThreadLocal！！！ | 并发编程网 – ifeve.com</a></li>
<li><a href="https://juejin.im/post/5a64a581f265da3e3b7aa02d" target="_blank" rel="noopener nofollow">Java面试必问，ThreadLocal终极篇 - 掘金</a></li>
<li><a href="https://juejin.im/post/5ba9a6665188255c791b0520" target="_blank" rel="noopener nofollow">ThreadLocal内存泄漏问题 - 掘金</a></li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-26 19:11">2025-06-26 19:11</span>&nbsp;
<a href="https://www.cnblogs.com/ThinkerQAQ">ThinkerQAQ</a>&nbsp;
阅读(<span id="post_view_count">40</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18950788);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18950788', targetLink: 'https://www.cnblogs.com/ThinkerQAQ/p/18950788', title: 'Java源码分析系列笔记-14.ThreadPool' })">举报</a>
</div>
        