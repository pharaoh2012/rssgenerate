
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/CrescentWind/p/18625054" title="发布于 2024-12-23 21:20">
    <span role="heading" aria-level="2">Vscode实现应用qss样式表</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="qss简介">qss简介</h2>
<p>qss（Qt Style Sheets）是一种基于CSS的样式语言，用于描述用户界面元素的外观和感觉。qss可以让用户在不修改代码的情况下，轻松地自定义应用程序的外观。</p>
<p>其语法基本如下：</p>
<pre><code class="language-qt">objectName{
  property: value;
}
</code></pre>
<p>其中，objectName是要设置样式的对象名，property是要设置的属性，value是属性的值。比如，要设置按钮的背景色为红色，可以这样写：</p>
<pre><code class="language-qt">QPushButton{
  background-color: red;
}
</code></pre>
<p>若想对同一控件设置多套样式，可以指定姓名</p>
<pre><code class="language-qt">QLabel#label1{
    background-color: blue;
}
QLabel#label2{
    background-color: green;
}
</code></pre>
<p>在程序中使用<code>setObjectName();</code>方法设置控件名称对应到qss中的名称即可使用对应的样式。</p>
<pre><code class="language-c++">QLabel *label = new QLabel(this);
label-&gt;setObjectName("label1"); // 此label背景色为蓝色
QLabel *label2 = new QLabel(this);
label2-&gt;setObjectName("label2"); // 此label背景色为绿色
</code></pre>
<p>对于一些拥有不同状态的控件，如按钮在普通状态以下按下状态，以及鼠标悬停状态等，可以用不同的qss样式表实现不同状态的样式。</p>
<pre><code class="language-qt">QPushButton:pressed{
    background-color: green;
}
// 按下按钮时改变背景颜色为绿色

QPushButton:hover{
    background-color: yellow;
}
// 鼠标悬停在按钮上时改变背景颜色为黄色

</code></pre>
<p>可以混合使用，比如：</p>
<pre><code class="language-qt">QPushButton#btn1:pressed{
    background-color: green;
}
// 按下btn1按钮时改变背景颜色为绿色
</code></pre>
<h2 id="qrc文件">qrc文件</h2>
<p>对于样式表，可以使用一个后缀为<code>.qrc</code>的文件来管理<code>.qss</code>以及编写时所用的图片资源。其实质上就是一个xml文件，里面可以包含多个<code>&lt;file&gt;</code>标签，每个标签对应一个资源文件。</p>
<pre><code class="language-xml">&lt;RCC&gt;
    &lt;qresource prefix="/"&gt;
        &lt;file&gt;ui/img/img.png&lt;/file&gt;
        &lt;file&gt;ui/img/close.png&lt;/file&gt;
        &lt;file&gt;ui/img/min.png&lt;/file&gt;
        &lt;file&gt;ui/img/max.png&lt;/file&gt;
        &lt;file&gt;ui/img/R.svg&lt;/file&gt;
        &lt;file&gt;ui/style/style.qss&lt;/file&gt;
    &lt;/qresource&gt;
&lt;/RCC&gt;
</code></pre>
<p>其中<code>&lt;RCC&gt;</code>表示该文件为资源文件集合，<code>&lt;qresource&gt;</code>表示资源文件，<code>prefix</code>属性表示资源文件的前缀，这里设置为<code>/</code>表示资源文件位于程序根目录下。<code>&lt;file&gt;</code>标签表示资源文件名，这里可以指定多个资源文件。</p>
<blockquote>
<p>注意，这里使用<code>prefix</code>设置的路径是虚拟路径。在下面的<code>&lt;file&gt; &lt;/file&gt;</code>中设置的资源文件的路径应当是相对于<code>.qrc</code>文件的路径。这样设置后，在程序中可以通过如下方式获取资源文件：</p>
</blockquote>
<pre><code class="language-qt">QFile file(":/ui/style/style.qss");
/*通过":"表示使用虚拟路径访问文件*/
</code></pre>
<p>倘若更改<code>prefix</code>如下</p>
<pre><code class="language-xml">&lt;qresource prefix="/source"&gt;
</code></pre>
<p>则在程序中获取资源文件时，应当使用如下方式：</p>
<pre><code class="language-qt">QFile file(":/source/ui/style/style.qss");
/*通过":"表示使用虚拟路径访问文件*/
</code></pre>
<p>也就是说这里定义的虚拟路径不需要它在物理地址中存在，即可使用Qt这种资源管理机制来管理资源文件。方便的实现资源的分组、共享以及版本控制。</p>
<p>设置好<code>.qrc</code>文件后，在程序中可以用如下方式获取资源文件中整合的文件：</p>
<pre><code class="language-qt">QFile file(":/ui/style/style.qss");
/*通过":"表示资源文件*/
</code></pre>
<p>在<code>qss</code>文件中，也可以使用这种方法来引用资源文件中的资源：</p>
<pre><code class="language-qt">QLabel{
    background-image: url(":/ui/img/img.png");
}
</code></pre>
<h2 id="vscode应用qss样式表">Vscode应用qss样式表</h2>
<p>在扩展安装界面安装<code>QSSEditor</code>插件，这样可以提供qss相关的代码补全以及高亮显示功能。</p>
<p>在写qss时，可能输出以下，大概是由于这个插件可以联动QtDesigner来实时显示样式。这方面我也不太会。不影响对qss代码的补全高亮。<br>
<img src="https://img2024.cnblogs.com/blog/3147612/202412/3147612-20241223212031527-1417779064.png" alt="image" loading="lazy"></p>
<p>建立文件树如下的目录结构：</p>
<pre><code>├── ui
│&nbsp;&nbsp; ├── img
│&nbsp;&nbsp; │&nbsp;&nbsp; ├── close.png
│&nbsp;&nbsp; │&nbsp;&nbsp; ├── img.png
│&nbsp;&nbsp; │&nbsp;&nbsp; ├── max.png
│&nbsp;&nbsp; │&nbsp;&nbsp; ├── min.png
│&nbsp;&nbsp; │&nbsp;&nbsp; └── R.svg
│&nbsp;&nbsp; └── style
│&nbsp;&nbsp;     └── style.qss
└── ui.qrc

</code></pre>
<p>名称任意取。其中<code>ui.qrc</code>文件的要求上面已经说明。若要使用该文件，需要修改CMakeLists.txt文件，添加如下内容：</p>
<pre><code class="language-cmake">find_package(Qt5 REQUIRED COMPONENTS Core Widgets REQUIRED)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON) # RCC编译器将qrc文件编译为cpp文件
set(CMAKE AUTOUIC ON)
# 注意 ： 要想使用qt5_add_resources，必须先find_package到Qt的路径或者手动指定QT_DIR
set(QT_SOURCE_FILE ui.qrc) # 将资源文件放到工程目录下，该部分会由RCC编译器预编译为cpp文件

# 添加资源文件
qt5_add_resources(QT_RESOURCES ${QT_SOURCE_FILE})

# 添加源文件
set(SOURCE_FILES main.cpp)

# 生成可执行文件
add_executable(main ${SOURCE_FILES} ${QT_RESOURCES})

</code></pre>
<p>这样在主程序中就可以通过Qt的资源管理机制来访问资源文件了。</p>
<p>要想应用qss样式表，在主程序中调用<code>setStyleSheet()</code>方法即可。</p>
<pre><code class="language-c++">#include &lt;QApplication&gt;
int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    QFile file(":/ui/style/style.qss"); # 读取样式表文件
    if (file.open(QFile::ReadOnly))
    {
        QTextStream stream(&amp;file);
        QString styleSheet = stream.readAll();
        app.setStyleSheet(styleSheet);
    }
    MainWindow win;
    win.show();
    return app.exec();
}
</code></pre>
<p>当然，在Qt中，每个控件都有属于自己的<code>setStyleSheet()</code>接口用于单独设置样式，用起来也是很简单粗暴，其参数是一个qss样式表字符串。</p>
<pre><code class="language-c++">QLabel *label = new QLabel(this);
/*设置label的背景色为红色*/
label-&gt;setStyleSheet("background-color: red;");
/*当然下面这种写法也ok*/
label-&gt;setStyleSheet("QLabel{background-color: red;}");
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.03878731469907407" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-23 21:21">2024-12-23 21:20</span>&nbsp;
<a href="https://www.cnblogs.com/CrescentWind">凪风sama</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18625054" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18625054);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18625054', targetLink: 'https://www.cnblogs.com/CrescentWind/p/18625054', title: 'Vscode实现应用qss样式表' })">举报</a>
</div>
        