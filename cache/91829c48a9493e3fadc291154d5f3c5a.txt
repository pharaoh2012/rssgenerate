
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/SmalBox/p/19055858" title="发布于 2025-08-24 20:48">
    <span role="heading" aria-level="2">【渲染流水线】[逐片元阶段]-[深度测试]以UnityURP为例</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/3685400/202508/3685400-20250824205418856-2035852705.png" alt="【渲染流水线】[逐片元阶段]-[深度测试]以UnityURP为例" class="desc_img">
        本文深入解析Unity URP管线中的深度测试机制，重点介绍其技术演进历程和现代URP体系下的深度优化方案。文章详细对比了传统深度测试、URP初期版本和现代URP体系在深度处理上的差异，并提供了完整的Shader代码示例（包括URP_ZTestExample.shader、WaterDepth.shader等），展示如何实现水体交互、景深特效等核心应用场景。同时，文章还给出了深度测试的优化建议，包括格式选择、渲染策略、静态合批等性能优化技巧，并强调通过FrameDebugger等工具进行验证调试的重要性。最
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<ul>
<li>深度测试是通过比较当前片元深度值与深度缓冲区值决定是否丢弃该片元。URP自2018年随Unity 2019.1推出后，逐步替代了传统内置管线，其深度测试机制在移动端和PC平台均采用更高效的GPU指令优化。</li>
</ul>
<blockquote>
<p><a href="https://blog.csdn.net/chenghai37/category_13021255.html?fromshare=blogcolumn&amp;sharetype=blogcolumn&amp;sharerId=13021255&amp;sharerefer=PC&amp;sharesource=chenghai37&amp;sharefrom=from_link" target="_blank" rel="noopener nofollow">【从UnityURP开始探索游戏渲染】</a><strong>专栏-直达</strong></p>
</blockquote>
<h1 id="技术演进历程">技术演进历程</h1>
<h2 id="传统深度测试阶段2017年前"><strong>传统深度测试阶段</strong>（2017年前）</h2>
<ul>
<li>基于Built-in RP的深度缓冲机制</li>
<li>硬编码实现Z-buffer算法</li>
<li>缺乏跨平台统一管理</li>
</ul>
<h2 id="urp初期版本2017-2020"><strong>URP初期版本</strong>（2017-2020）</h2>
<ul>
<li>引入可编程渲染管线架构</li>
<li>实现轻量级深度预通道(DepthPrepass)</li>
<li>支持_CameraDepthTexture自动生成</li>
</ul>
<h2 id="现代urp体系2021至今"><strong>现代URP体系</strong>（2021至今）</h2>
<ul>
<li>深度与法线图联合渲染(DepthNormalsPass)</li>
<li>多平台深度格式优化(k_DepthStencilFormat)</li>
<li>模板测试深度集成(Stencil Op枚举)</li>
</ul>
<h1 id="深度测试命令使用样例">深度测试命令使用样例</h1>
<h2 id="现代urp优化">‌<strong>现代URP优化</strong>‌</h2>
<ul>
<li>结合SRP Batcher减少SetPass Calls，深度测试与模板测试并行处理提升性能</li>
<li>通过Z值比较实现三维空间遮挡关系</li>
<li>可配置Less/Equal/Greater等比较模式‌</li>
</ul>
<h2 id="urp_ztestexampleshader"><strong>URP_ZTestExample.shader</strong></h2>
<ul>
<li>通过Properties面板可动态配置8种ZTest模式</li>
<li>支持深度写入(ZWrite)开关控制</li>
<li>完整包含URP标准HLSL语法结构</li>
<li>使用CBUFFER实现材质参数序列化</li>
<li>默认渲染队列设置为Geometry(2000)</li>
</ul>
<h2 id="关键参数说明">关键参数说明</h2>
<ul>
<li><code>_ZTestMode</code>对应深度测试枚举值：
<ul>
<li>1&nbsp;2&nbsp;3</li>
<li>4(默认) 5</li>
<li>6&nbsp;7&nbsp;8:Always</li>
</ul>
</li>
<li><code>_ZWrite</code>控制深度缓冲写入(0=Off,1=On)</li>
<li>包含基础纹理采样和颜色混合功能</li>
</ul>
<h2 id="urp_ztestexampleshader-1">URP_ZTestExample.shader</h2>
<pre><code class="language-c">Shader "Custom/URP_ZTestExample"
{
    Properties
    {
        _MainTex("Base Texture", 2D) = "white" {}
        _Color("Tint Color", Color) = (1,1,1,1)
        [Enum(UnityEngine.Rendering.CompareFunction)]
        _ZTestMode("ZTest Mode", Int) = 4 // 默认LEqual
        [Toggle]_ZWrite("ZWrite", Float) = 1
    }

    SubShader
    {
        Tags {
            "RenderType"="Opaque"
            "RenderPipeline"="UniversalRenderPipeline"
            "Queue"="Geometry"
        }

        Pass
        {
            // ShaderLab命令配置
            ZTest [_ZTestMode]
            ZWrite [_ZWrite]
            Cull Back
            Blend Off
            
            HLSLPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"

            CBUFFER_START(UnityPerMaterial)
                float4 _Color;
                int _ZTestMode;
                float _ZWrite;
            CBUFFER_END

            TEXTURE2D(_MainTex);
            SAMPLER(sampler_MainTex);

            struct Attributes
            {
                float4 positionOS : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct Varyings
            {
                float4 positionHCS : SV_POSITION;
                float2 uv : TEXCOORD0;
            };

            Varyings vert(Attributes IN)
            {
                Varyings OUT;
                OUT.positionHCS = TransformObjectToHClip(IN.positionOS.xyz);
                OUT.uv = IN.uv;
                return OUT;
            }

            half4 frag(Varyings IN) : SV_Target
            {
                half4 col = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, IN.uv) * _Color;
                return col;
            }
            ENDHLSL
        }
    }
}

</code></pre>
<h2 id="命令选项">命令选项</h2>
<p>通过ShaderLab命令<code>ZTest</code>可设置深度测试比较规则，支持以下选项：</p>
<ul>
<li><code>Less</code>：深度小于当前缓存则通过（默认值）‌</li>
<li><code>Greater</code>：深度大于当前缓存则通过</li>
<li><code>LEqual</code>：深度小于等于当前缓存则通过</li>
<li><code>GEqual</code>：深度大于等于当前缓存则通过</li>
<li><code>Equal</code>：深度等于当前缓存则通过</li>
<li><code>NotEqual</code>：深度不等于当前缓存则通过</li>
<li><code>Always</code>：始终通过（等同于关闭深度测试）‌</li>
</ul>
<h1 id="urp深度测试渲染管线深度相关变量">URP深度测试渲染管线深度相关变量</h1>
<h2 id="核心深度纹理变量"><strong>核心深度纹理变量</strong></h2>
<h3 id="_cameradepthtexture">‌_CameraDepthTexture</h3>
<ul>
<li>
<p>场景深度纹理，存储非线性深度值（0-1范围）</p>
</li>
<li>
<p>启用要求：URP Asset中勾选 ‌<strong>Depth Texture</strong>‌ 选项</p>
</li>
<li>
<p>着色器声明：</p>
<pre><code class="language-c">hlsl
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DeclareDepthTexture.hlsl"
</code></pre>
</li>
</ul>
<h3 id="_cameraopaquetexture"><code>_CameraOpaqueTexture</code></h3>
<ul>
<li>不透明通道后的屏幕图像（含深度信息）</li>
<li>启用要求：URP Asset中勾选 ‌<strong>Opaque Texture</strong>‌ 选项</li>
<li>典型应用：透明物体折射/毛玻璃效果</li>
</ul>
<h2 id="辅助深度相关功能"><strong>辅助深度相关功能</strong></h2>
<h3 id="深度重建函数需包含corehlsl">深度重建函数（需包含&nbsp;<code>Core.hlsl</code>）</h3>
<pre><code class="language-c">hlsl
float linearDepth = LinearEyeDepth(depthSample, _ZBufferParams); // 转换为线性深度
float normalizedDepth = Linear01Depth(depthSample, _ZBufferParams); // [0,1]归一化
</code></pre>
<h3 id="深度降采样控制urp-asset设置">深度降采样控制（URP Asset设置）</h3>
<ul>
<li><code>Opaque Downsampling</code>：调整不透明纹理分辨率（None/2x/4x）</li>
</ul>
<h2 id="注意事项"><strong>注意事项</strong></h2>
<ul>
<li>默认不生成&nbsp;<code>_CameraDepthNormalsTexture</code>，需通过 ‌<strong>Renderer Feature</strong>‌ 手动实现</li>
<li>移动平台需谨慎使用深度纹理，可能影响性能</li>
<li>深度测试模式通过&nbsp;<code>ZTest</code>&nbsp;指令动态调整（如&nbsp;<code>ZTest Greater</code>）</li>
</ul>
<h1 id="核心应用场景">核心应用场景</h1>
<h2 id="水体交互效果"><strong>水体交互效果</strong></h2>
<h3 id="实现原理">实现原理</h3>
<ul>
<li>通过深度差计算水面淹没区域</li>
</ul>
<h3 id="关键技术">关键技术</h3>
<ul>
<li>观察空间坐标转换</li>
</ul>
<h3 id="性能优化">性能优化</h3>
<ul>
<li>半透明队列+深度写入关闭</li>
</ul>
<h3 id="代码举例-waterdepthshader">代码举例 WaterDepth.shader</h3>
<ul>
<li>实现透明水体的深度效果，包含深度纹理采样和透明度计算。</li>
<li>包含深度纹理声明和采样</li>
<li>支持UV变换和材质参数序列化</li>
<li>保持原Shader的透明混合效果</li>
</ul>
<pre><code class="language-c">Shader "Custom/WaterDepth"
{
    Properties
    {
        [MainTexture] _MainTex("Base (RGB)", 2D) = "white" {}
        _DepthFactor("Depth Factor", Range(0,1)) = 0.5
    }

    SubShader
    {
        Tags 
        {
            "Queue"="Transparent"
            "RenderType"="Transparent"
            "RenderPipeline"="UniversalRenderPipeline"
        }

        Pass
        {
            ZWrite Off
            Blend SrcAlpha OneMinusSrcAlpha

            HLSLPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DeclareDepthTexture.hlsl"

            TEXTURE2D(_MainTex);
            SAMPLER(sampler_MainTex);

            CBUFFER_START(UnityPerMaterial)
                float4 _MainTex_ST;
                float _DepthFactor;
            CBUFFER_END

            struct Attributes
            {
                float4 positionOS : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct Varyings
            {
                float4 positionHCS : SV_POSITION;
                float4 screenPos : TEXCOORD0;
                float2 uv : TEXCOORD1;
            };

            Varyings vert(Attributes IN)
            {
                Varyings OUT;
                OUT.positionHCS = TransformObjectToHClip(IN.positionOS.xyz);
                OUT.screenPos = ComputeScreenPos(OUT.positionHCS);
                OUT.uv = TRANSFORM_TEX(IN.uv, _MainTex);
                return OUT;
            }

            half4 frag(Varyings IN) : SV_Target
            {
                float2 screenUV = IN.screenPos.xy / IN.screenPos.w;
                float depth = SampleSceneDepth(screenUV);
                depth = LinearEyeDepth(depth, _ZBufferParams);
                float sceneZ = depth - IN.screenPos.w;
                float waterDepth = saturate(sceneZ * _DepthFactor);

                half4 col = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, IN.uv);
                col.a = waterDepth;
                return col;
            }
            ENDHLSL
        }
    }
}
</code></pre>
<h2 id="遮挡剔除优化"><strong>遮挡剔除优化</strong></h2>
<h3 id="实现原理-1">实现原理</h3>
<ul>
<li>Early-Z技术预判</li>
</ul>
<h3 id="关键技术-1">关键技术</h3>
<ul>
<li>DepthPrepass优先机制</li>
</ul>
<h3 id="性能优化-1">性能优化</h3>
<ul>
<li>实例化批处理</li>
</ul>
<h3 id="代码举例-depthoffieldshader">代码举例 <strong>DepthOfField.shader</strong></h3>
<ul>
<li>实现URP后处理景深效果</li>
<li>包含深度纹理采样</li>
<li>支持焦点距离和模糊强度调节</li>
<li>保持原Shader的景深计算逻辑</li>
<li>采用URP的深度采样API</li>
</ul>
<pre><code class="language-c">Shader "Hidden/DepthOfField"
{
    SubShader
    {
        Tags { "RenderType"="Opaque" "RenderPipeline"="UniversalRenderPipeline" }
        
        Cull Off 
        ZWrite Off 
        ZTest Always

        Pass
        {
            HLSLPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DeclareDepthTexture.hlsl"

            TEXTURE2D(_MainTex);
            SAMPLER(sampler_MainTex);

            CBUFFER_START(UnityPerMaterial)
                float _FocusDistance;
                float _BlurSize;
            CBUFFER_END

            struct Attributes
            {
                float4 positionOS : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct Varyings
            {
                float4 positionHCS : SV_POSITION;
                float2 uv : TEXCOORD0;
            };

            Varyings vert(Attributes IN)
            {
                Varyings OUT;
                OUT.positionHCS = TransformObjectToHClip(IN.positionOS.xyz);
                OUT.uv = IN.uv;
                return OUT;
            }

            half4 frag(Varyings IN) : SV_Target
            {
                float depth = SampleSceneDepth(IN.uv);
                depth = Linear01Depth(depth, _ZBufferParams);
                
                float blur = saturate(abs(depth - _FocusDistance) * _BlurSize);
                half4 col = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, IN.uv);
                col.rgb = lerp(col.rgb, col.rgb * 0.5, blur);
                return col;
            }
            ENDHLSL
        }
    }
}

</code></pre>
<h2 id="景深特效系统"><strong>景深特效系统</strong></h2>
<h3 id="实现原理-2">实现原理</h3>
<ul>
<li>线性深度值插值计算</li>
</ul>
<h3 id="关键技术-2">关键技术</h3>
<ul>
<li>SAMPLE_DEPTH_TEXTURE宏</li>
</ul>
<h3 id="性能优化-2">性能优化</h3>
<ul>
<li>降采样+高斯模糊迭代</li>
</ul>
<h3 id="代码举例-stencildepthshader">代码举例 <strong>StencilDepth.shader</strong></h3>
<ul>
<li>实现URP模板测试功能</li>
<li>支持模板缓冲测试</li>
<li>保留原Shader的纹理采样功能</li>
<li>采用CBUFFER管理材质参数</li>
</ul>
<pre><code class="language-c">Shader "Custom/StencilDepth"
{
    Properties
    {
        [MainTexture] _MainTex("Texture", 2D) = "white" {}
        _StencilRef("Stencil Ref", Int) = 1
    }

    SubShader
    {
        Tags 
        {
            "Queue"="Geometry"
            "RenderPipeline"="UniversalRenderPipeline"
        }

        Stencil
        {
            Ref [_StencilRef]
            Comp Less
            Pass Replace
        }

        Pass
        {
            HLSLPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"

            TEXTURE2D(_MainTex);
            SAMPLER(sampler_MainTex);

            CBUFFER_START(UnityPerMaterial)
                float4 _MainTex_ST;
                int _StencilRef;
            CBUFFER_END

            struct Attributes
            {
                float4 positionOS : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct Varyings
            {
                float4 positionHCS : SV_POSITION;
                float2 uv : TEXCOORD0;
            };

            Varyings vert(Attributes IN)
            {
                Varyings OUT;
                OUT.positionHCS = TransformObjectToHClip(IN.positionOS.xyz);
                OUT.uv = TRANSFORM_TEX(IN.uv, _MainTex);
                return OUT;
            }

            half4 frag(Varyings IN) : SV_Target
            {
                return SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, IN.uv);
            }
            ENDHLSL
        }
    }
}

</code></pre>
<h1 id="深度测试优化建议"><strong>深度测试优化建议</strong></h1>
<h2 id="格式选择"><strong>格式选择</strong></h2>
<ul>
<li>移动端使用16-bit深度(k_DepthBufferBits)</li>
<li>PC端推荐32-bit精度</li>
</ul>
<h2 id="渲染策略"><strong>渲染策略</strong></h2>
<h3 id="静态场景启用depthprepass">静态场景启用DepthPrepass</h3>
<ul>
<li>
<p>‌<strong>URP Asset配置</strong>‌</p>
<p>启用深度纹理生成：</p>
<p><code>Project Settings &gt; Graphics &gt; URP Global Settings</code>&nbsp;→ 勾选‌<strong>Depth Texture</strong>‌选项。</p>
</li>
<li>
<p>‌<strong>Renderer Data设置</strong>‌</p>
<p>在使用的Renderer Asset（如<code>UniversalRenderer_Forward</code>)中：</p>
<p>→ 添加‌<strong>SSAO效果</strong>‌（Screen Space Ambient Occlusion）</p>
<p>→ 将SSAO的‌<strong>Source属性设为Depth</strong>‌</p>
<p>此操作强制URP启用DepthPrepass通道渲染静态物体深度到<code>_CameraDepthTexture</code>。</p>
<ul>
<li>‌<strong>性能影响</strong>‌DepthPrepass增加Draw Call，建议静态物体使用‌<strong>Batching静态合批</strong></li>
<li><strong>启用静态合批全局设置‌</strong>
<ul>
<li>‌<strong>路径</strong>‌：<code>Edit &gt; Project Settings &gt; Player</code></li>
<li>‌<strong>操作</strong>‌：在<code>Other Settings</code>面板中勾选‌<strong>Static Batching</strong>‌选项</li>
<li>‌<strong>作用</strong>‌：允许Unity在构建时合并静态物体的网格数据，减少运行时Draw Call数量</li>
</ul>
</li>
<li><strong>标记静态物体‌</strong>
<ul>
<li>选中场景中的静态物体</li>
<li>在Inspector窗口右上角点击‌<strong>Static</strong>‌下拉菜单</li>
<li>勾选‌<strong>Batching Static</strong>‌选项（若仅需合批可不勾选其他Static选项）</li>
<li>‌<strong>注意</strong>‌：标记为静态的物体将无法在运行时移动，否则会导致合批失效</li>
</ul>
</li>
<li><strong>Shader兼容性检查‌</strong>
<ul>
<li>‌<strong>要求</strong>‌：静态物体需使用‌<strong>相同Shader变体</strong>‌，且材质属性结构一致</li>
<li>‌<strong>验证</strong>‌：通过<code>Frame Debugger</code>检查合批效果，确认是否存在‌<strong>SRP Batch</strong>‌或‌<strong>Static Batch</strong>‌条目</li>
<li><strong>SRP Batcher优先级</strong>‌：若同时启用SRP Batcher，其优先级高于静态合批，需确保Shader代码兼容SRP Batcher（如避免使用MaterialPropertyBlock）</li>
<li>‌<strong>GPU Instancing</strong>‌：对重复静态物体（如植被）可启用GPU Instancing，进一步减少Draw Call</li>
</ul>
</li>
<li><strong>性能验证与调试‌</strong>
<ul>
<li>‌<strong>工具</strong>‌：使用<code>Window &gt; Analysis &gt; Frame Debugger</code>
<ul>
<li>检查‌<strong>DepthPrepass</strong>‌通道的Draw Call数量</li>
<li>确认静态物体是否合并为‌<strong>StaticBatch</strong>‌条目</li>
</ul>
</li>
<li>‌<strong>指标</strong>‌：重点关注‌<strong>SetPass Call</strong>‌的减少情况，而非仅Draw Call数量</li>
</ul>
</li>
<li><strong>注意事项</strong>
<ul>
<li>‌<strong>平台差异</strong>‌：OpenGL等平台需处理深度值范围（<code>UNITY_REVERSED_Z</code>）</li>
<li>‌<strong>动态物体</strong>‌：若场景含动态物体，需通过CopyDepth模式单独处理其深度，避免与静态合批冲突</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="动态物体使用copydepth模式">动态物体使用CopyDepth模式</h3>
<ul>
<li>
<p>‌<strong>Shader队列要求</strong>‌</p>
<p>动态物体Shader需使用‌<strong>不透明渲染队列</strong>‌：</p>
<pre><code class="language-c">Tags {
  "Queue"="Geometry"  // 半透明队列无法使用深度图
  "RenderType"="Opaque"
}
</code></pre>
</li>
<li>
<p>‌<strong>深度采样声明</strong>‌</p>
<p>在动态物体的Shader中显式声明深度纹理：</p>
<pre><code class="language-c">hlsl
TEXTURE2D(_CameraDepthTexture);
SAMPLER(sampler_CameraDepthTexture);
</code></pre>
</li>
<li>
<p>‌<strong>摄像机设置</strong>‌</p>
<p>确保动态物体所在摄像机的渲染路径：</p>
<pre><code class="language-c">csharpCopy Code
var cameraData = camera.GetUniversalAdditionalCameraData();
cameraData.requiresDepthTexture = true;// 强制深度纹理可用
</code></pre>
</li>
<li>
<p>‌<strong>RenderPass优先级</strong>‌</p>
<p>DepthPrepass默认在‌<strong>阴影渲染后执行</strong>‌，优先于CopyDepth Pass。动态物体深度通过后续的CopyDepth Pass复制到同一<code>_CameraDepthTexture</code>。</p>
</li>
</ul>
<h3 id="验证与调试"><strong>验证与调试‌</strong></h3>
<ul>
<li>
<p>‌<strong>Frame Debugger检查</strong>‌</p>
<p>开启<code>Window &gt; Analysis &gt; Frame Debugger</code>：</p>
<p>→ 确认存在‌<strong>DepthPrepass</strong>‌通道（静态物体深度）</p>
<p>→ 检查‌<strong>CopyDepth</strong>‌通道是否处理动态物体深度</p>
</li>
<li>
<p>‌<strong>深度值测试</strong>‌</p>
<p>在Shader中输出线性深度验证：</p>
<pre><code class="language-c">hlsl
float depth = SampleSceneDepth(uv);
depth = Linear01Depth(depth, _ZBufferParams);
return float4(depth.xxx, 1); // 灰度图显示深度
</code></pre>
</li>
</ul>
<h3 id="注意事项-1"><strong>注意事项</strong></h3>
<ul>
<li>‌<strong>平台兼容性</strong>‌OpenGL平台需特殊处理深度值范围（<code>UNITY_REVERSED_Z</code>宏判断）。‌</li>
</ul>
<h2 id="内存控制"><strong>内存控制</strong></h2>
<ul>
<li>按需开启_CameraDepthTexture</li>
<li>避免多Pass重复采样</li>
</ul>
<hr>
<blockquote>
<p><a href="https://blog.csdn.net/chenghai37/category_13021255.html?fromshare=blogcolumn&amp;sharetype=blogcolumn&amp;sharerId=13021255&amp;sharerefer=PC&amp;sharesource=chenghai37&amp;sharefrom=from_link" target="_blank" rel="noopener nofollow">【从UnityURP开始探索游戏渲染】</a><strong>专栏-直达</strong></p>
</blockquote>
<p>（欢迎<em>点赞留言</em>探讨，更多人加入进来能更加完善这个探索的过程，🙏）</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.004861111111111111" data-date-updated="2025-08-24 20:55">2025-08-24 20:48</span>&nbsp;
<a href="https://www.cnblogs.com/SmalBox">SmalBox</a>&nbsp;
阅读(<span id="post_view_count">6</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19055858);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19055858', targetLink: 'https://www.cnblogs.com/SmalBox/p/19055858', title: '【渲染流水线】[逐片元阶段]-[深度测试]以UnityURP为例' })">举报</a>
</div>
        