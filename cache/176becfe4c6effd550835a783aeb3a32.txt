
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zhaoweiwei/p/19004139/GPT-SoVITS" title="发布于 2025-07-26 23:12">
    <span role="heading" aria-level="2">GPT-SoVITS初探</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        本文详细介绍了GPT-SoVITS的安装过程，并结合一个应用实例介绍了它的使用方法，最后对其和IndexTTS进行了简单的对比。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>1 简介</h1>
<p>GPT-SoVITS是一种语音合成模型，于2024年2月18日发布，它基于深度学习的语音合成框架，通过整合GPT（Generative Pre-trained Transformer）的自然语言理解能力与SoVITS（Soft Voice Isolation and Timbre Synthesis）的声纹特征建模技术，实现了「文本 – 语音」的高保真映射与个性化声音克隆。其核心优势在于：​</p>
<p><strong>多模态融合</strong>：支持文本、声纹、情感标签等多维度输入，生成兼具语义理解与情感表达的自然语音；​<br><strong>低资源适配</strong>：通过少量样本即可完成声线迁移，降低专业配音的门槛；​<br><strong>场景化定制</strong>：可针对短视频创作、智能客服、有声书制作等场景优化韵律与音色，满足工业化部署需求。</p>
<h2>1.1 安装</h2>
<h3>1. 下载</h3>
<p>首先，从github上下载项目：</p>
<div class="cnblogs_code">
<pre>git clone https:<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">github.com/RVC-Boss/GPT-SoVITS</span></pre>
</div>
<h3>2. 自动安装</h3>
<p>然后根据系统版本进行相应安装，如windows可以用如下命令进行安装：</p>
<div class="cnblogs_code">
<pre>conda create -n GPTSoVits python=<span style="color: rgba(128, 0, 128, 1)">3.10</span><span style="color: rgba(0, 0, 0, 1)">
conda activate GPTSoVits
pwsh </span>-F <span style="color: rgba(0, 0, 255, 1)">install</span>.ps1 --Device CU128 --Source HF-Mirror --DownloadUVR5</pre>
</div>
<p>其中CU128对应CUDA 12.8，这里可以根据自己环境配置CPU还是CUDA其他版本，HF-Mirror表示从清华镜像加速下载，--DownloadUVR5表明额外下载一个音源分离工具（可选）。</p>
<p>在执行该命令进行安装时，命令行提示找不到pwsh命令，这是因为：pwsh是PowerShell 7.x（即PowerShell Core）的命令行启动命令，不是旧版Windows自带的PowerShell 5.x（用powershell.exe启动）。这里需要执行以下命令安装最新版PowerShell 7：</p>
<div class="cnblogs_code">
<pre>winget <span style="color: rgba(0, 0, 255, 1)">install</span> --<span style="color: rgba(0, 0, 255, 1)">id</span> Microsoft.Powershell --source winget</pre>
</div>
<p>安装PowerShell 7(pwsh) 后，打开的PowerShell终端中Conda环境没有前缀提示了，比如不再显示：</p>
<div class="cnblogs_code">
<pre>(base) PS C:\Users\you&gt;</pre>
</div>
<p>而是变成：</p>
<div class="cnblogs_code">
<pre>PS C:\Users\you&gt;</pre>
</div>
<p>这是因为Conda的环境激活脚本默认只对PowerShell 5.x做了配置，而你现在用的是PowerShell 7（pwsh），它需要你手动初始化一下Conda环境支持。执行命令：</p>
<div class="cnblogs_code">
<pre>conda init powershell</pre>
</div>
<p>成功后它会提示你重启shell，重启后shell恢复前缀提示。</p>
<h3>3. 手动安装</h3>
<p>不知道是兼容性还是什么原因，pwsh -F install.ps1 --Device CU128 --Source HF-Mirror --DownloadUVR5命令执行过程中也会出现各种问题，不再调用这个脚本进行安装，而是一步步手动进行安装，首先安装必要依赖（省略conda环境创建及激活）：</p>
<div class="cnblogs_code">
<pre>conda <span style="color: rgba(0, 0, 255, 1)">install</span><span style="color: rgba(0, 0, 0, 1)"> ffmpeg cmake
torch torchaudio </span>--index-url <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://download.pytorch.org/whl/cu128</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
pip </span><span style="color: rgba(0, 0, 255, 1)">install</span> -r extra-req.txt --no-<span style="color: rgba(0, 0, 0, 1)">deps
pip </span><span style="color: rgba(0, 0, 255, 1)">install</span> -r requirements.txt</pre>
</div>
<p>安装完成后，可以用以下python文件检查torch是否支持显卡：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">import torch

print(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">CUDA 可用:</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, torch.cuda.is_available())
print(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">当前设备:</span><span style="color: rgba(128, 0, 0, 1)">"</span>, torch.cuda.get_device_name(<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">))
print(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">CUDA 版本:</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, torch.version.cuda)
print(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">cuDNN 版本:</span><span style="color: rgba(128, 0, 0, 1)">"</span>, torch.backends.cudnn.version())</pre>
</div>
<p>结果显示如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250725121115767-381756982.png" alt="image" width="432" height="92" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>根据实际网络情况选择下载源，下载5个文件：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">HF</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> {
    Write</span>-Info <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Download Model From HuggingFace</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    $PretrainedURL </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://huggingface.co/XXXXRT/GPT-SoVITS-Pretrained/resolve/main/pretrained_models.zip</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    $G2PWURL       </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://huggingface.co/XXXXRT/GPT-SoVITS-Pretrained/resolve/main/G2PWModel.zip</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    $UVR5URL       </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://huggingface.co/XXXXRT/GPT-SoVITS-Pretrained/resolve/main/uvr5_weights.zip</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    $NLTKURL       </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://huggingface.co/XXXXRT/GPT-SoVITS-Pretrained/resolve/main/nltk_data.zip</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    $OpenJTalkURL  </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://huggingface.co/XXXXRT/GPT-SoVITS-Pretrained/resolve/main/open_jtalk_dic_utf_8-1.11.tar.gz</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
}
</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">HF-Mirror</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> {
    Write</span>-Info <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Download Model From HuggingFace-Mirror</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    $PretrainedURL </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://hf-mirror.com/XXXXRT/GPT-SoVITS-Pretrained/resolve/main/pretrained_models.zip</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    $G2PWURL       </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://hf-mirror.com/XXXXRT/GPT-SoVITS-Pretrained/resolve/main/G2PWModel.zip</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    $UVR5URL       </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://hf-mirror.com/XXXXRT/GPT-SoVITS-Pretrained/resolve/main/uvr5_weights.zip</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    $NLTKURL       </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://hf-mirror.com/XXXXRT/GPT-SoVITS-Pretrained/resolve/main/nltk_data.zip</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    $OpenJTalkURL  </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://hf-mirror.com/XXXXRT/GPT-SoVITS-Pretrained/resolve/main/open_jtalk_dic_utf_8-1.11.tar.gz</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
}
</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ModelScope</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> {
    Write</span>-Info <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Download Model From ModelScope</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    $PretrainedURL </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://www.modelscope.cn/models/XXXXRT/GPT-SoVITS-Pretrained/resolve/master/pretrained_models.zip</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    $G2PWURL       </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://www.modelscope.cn/models/XXXXRT/GPT-SoVITS-Pretrained/resolve/master/G2PWModel.zip</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    $UVR5URL       </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://www.modelscope.cn/models/XXXXRT/GPT-SoVITS-Pretrained/resolve/master/uvr5_weights.zip</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    $NLTKURL       </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://www.modelscope.cn/models/XXXXRT/GPT-SoVITS-Pretrained/resolve/master/nltk_data.zip</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    $OpenJTalkURL  </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://www.modelscope.cn/models/XXXXRT/GPT-SoVITS-Pretrained/resolve/master/open_jtalk_dic_utf_8-1.11.tar.gz</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
}</span></pre>
</div>
<p>之后将前三个压缩包pretrained_models.zip、G2PWModel.zip、uvr5_weights.zip分别解压到当前目录下的：GPT_SoVITS、GPT_SoVITS/text、tools/uvr5目录下，再将nltk_data.zip解压到当前目录，最后将open_jtalk_dic_utf_8-1.11.tar.gz压缩包解压到env的python环境site-packages库目录下，可参考如下内容进行操作：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250725124241268-2130753518.png" alt="image" width="922" height="69" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<h2>1.2 音频预处理</h2>
<p>以下几个小结内容主要转载了文章最后参考1内容，运行以下命令，启动GUI：</p>
<div class="cnblogs_code">
<pre>python webui.py zh_CN</pre>
</div>
<p>用浏览器登陆http://localhost:9874，进入后台Web主界面，如下所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250725160012698-2033684842.png" alt="image" width="1139" height="601" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<h3>1. 人声分离</h3>
<p>我们收集到的数据不一定是纯粹的语音，需要进一步的提取人声，例如去除伴奏，去除混响（可以理解为回音）等，在主界面中单击“开启人声分离WebUI”，浏览器会打开UVR5的webui，如果没有跳转就在游览器输入<a href="http://localhost:9873" target="_blank" rel="noopener nofollow">http://localhost:9873</a>进行访问即可。</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250725165234953-541338618.png" alt="image" width="1093" height="587" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>在该webui主界面最上面已经介绍了其主要功能，下方左侧，首先需要选择使用的“模型”，然后需要“输入待处理音频文件夹路径”或者“批量输入音频文件”，这两种方式二选一，如果文件夹路径不为空则优先读文件夹。右侧指定输出人声及非人声文件夹路径，导出文件格式部分有4种格式文件可选，这里选择未压缩格式wav，最后单击“转换”即可。</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250725172207420-1553877563.png" alt="image" width="1103" height="478" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>接下来要举一个实例l说明如何纯净的人声，该实例需过三遍模型，分别是提取人（去除伴奏），去除混响，去除第二次混响。</p>
<p>第一遍：提取人声，选择模型model_bs_roformer_ep_317_sdr_12.9755，该模型的用途是提取人声，我们的音频中可能会混有bgm，杂音等等，我们需要用这个模型来提取我们需要的纯粹的人声。运行过程中，在输出信息框有一个告警提示信息，非致命可忽略。这时在output\uvr5_opt目录可以看到两种文件，一种文件名会带_other，是分离出来的伴奏音乐或者杂音，另一种文件名会带_vocals，是分离出来的纯人声，正是我们需要的。将_other删除，并在项目根目录下创建wav\proc1文件夹，将_vocals.wav文件剪切到该文件夹。</p>
<p>第二遍：去除混响，选择模型onnx_dereverb_By_FoxJoy，混响可以理解为录音时的回音，去除混响可以理解成降噪，去除混响后的音频文件会是更加纯净的人声，有助于模型训练学习。以下产生了第二遍的结果，可以看到带有_main名字的文件名和_other的文件名，同样的，把带_other的文件全部删掉，那是不需要的混响音。然后再建一个新的文件夹wav\proc2，将uvr5_opt文件夹下_main文件移过去，为第三次提纯做准备。</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250725190552487-319333242.png" alt="image" width="838" height="403" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>第三遍：去除混响，选择模型VR-DeEchoAggressive，操作都大差不差，这是第三次提纯，同样是去除混响。继续等待完成即可，完成后，会有文件名带有instrument_的音频文件，还有vocal_的音频文件，instrument_的音频文件为提纯后的杂音，删除即可。然后全部转移到新文件夹wav\proc3。</p>
<p>到这一步人声提取就完成了，我们得到了去除杂音和混响的干人声，可以关闭人声分离webui了，防止自己搞不清工具界面和节省显存。</p>
<h3>2.&nbsp;语音切分</h3>
<p>首先先要理解为什么要切割音频：</p>
<p><strong>显存限制</strong>：TTS模型通常以固定长度的音频片段为输入，长音频直接训练会导致显存溢出（OOM）。切割后，每段音频长度适配模型输入（例如3~10秒）</p>
<p><strong>数据标准化</strong>：避免一句话包含过多静音或杂音，提升训练效率和质量。便于文本与音频的严格对齐（强制对齐工具对短句效果更好）</p>
<p><strong>音量均衡</strong>：切割前统一音量（如-9dB到-6dB）可防止部分片段过响或过轻，影响声学模型稳定性</p>
<p>一段完美的音频应该是没有任何噪音杂音混响等，音量统一在-9dB到-6dB之间。配置部分只有min_interval参数按照参考文章1中的建议改为100，其他值都保留默认值，之后点击开始语音切分：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250726093523606-883999950.png" alt="image" width="1041" height="509" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>输出信息中显示“语音切分已完成”后，进入输出路径进行查看：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250726094049587-1561766359.png" alt="image" width="873" height="268" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>音频文件音质正常，长度在5s左右，则语音切分完毕。</p>
<h3>3.&nbsp;语音识别</h3>
<p>这一步也可以称为ai标注，为什么要做标注，因为训练的时候是根据你的音频文件还有你的文本文件来进行训练的，相当于你需要叫模型，这一个字是这样读的（然后给出你的文本和音频），这个语音识别只是一个辅助工具，帮你大概的识别出人物所讲出的句子，</p>
<p>你文本的句子准确度越高，训练出来的模型质量也会越好。之后保持默认配置，直接“开启语音识别”：</p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250726100841773-815327388.png" alt="image" width="1178" height="431" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>第一次执行这一步时会下载一些模型文件时间较长，请耐心等待，最终会生成语音识别文本文件：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250726101540863-2000065639.png" alt="image" width="1054" height="430" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>到这一步，我们就有了ai出来的文本和处理好的音频素材了。</p>
<h3>4.&nbsp;音频标注</h3>
<p>上一步语音识别只是一个大概，是ai出来的文本，还需要手动来校准，单击“开启音频标注WebUI”：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250726101929695-1380732547.png" alt="image" width="1077" height="300" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>稍作等待后，就会出现新的音频标注webui界面，会自动跳转游览器，如果没有跳转，在浏览器中输入http://localhost:9871/即可，这一步就是在教模型这个字要怎么念的其中一个过程，每校对完一页就点击submit text提交文本，否则你翻到下一页的话，文本是不会保存的。</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250726121329241-2073918360.png" alt="image" width="1179" height="610" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>这一步需要相当的耐心，你的语料越大，需要校对的文本也就越多，文本修正的越好，你训练出来的模型质量也会越好。但你如果太懒或者语料实在太多搞不过来也可以省略这一步，追求完美的可以完成这一步，还是那句话，你数据处理的越好，训练出来的模型效果也会越好（追求完美的话），全部处理完后，数据就处理完毕了，接下来就是微调和训练我们的模型了。</p>
<h2>1.3&nbsp;模型微调训练</h2>
<p>从主页面切换到子页面，大多数参数和路径动不用改：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250726132507101-1956529580.png" alt="image" width="1216" height="545" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<h3>1. 训练集格式化</h3>
<p>这一阶段的目标是将原始音频和文本数据转化为模型可训练的格式化数据</p>
<table style="height: 131px; width: 521px" border="0" align="center">
<tbody>
<tr>
<td style="text-align: center"><strong>步骤</strong></td>
<td style="text-align: center"><strong>核心功能</strong></td>
</tr>
<tr>
<td>1Aa-文本分词与特征提取</td>
<td>文本→分词+语义特征</td>
</tr>
<tr>
<td>1Ab-语音自监督特征提取</td>
<td>音频→HuBERT声学特征</td>
</tr>
<tr>
<td>1Ac-语义Token提取</td>
<td>音频→SoVITS专属的离散语义Token</td>
</tr>
</tbody>
</table>
<p>&nbsp;之后内容也无需做特别改动，保持默认就行：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250726132710085-503397204.png" alt="image" width="1153" height="747" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>直接单击“开启训练集格式化一键三连”即可，完成后logs里产生格式化的训练集：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250726181025670-1982971960.png" alt="image" width="1096" height="519" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<h3>2.&nbsp;微调模型</h3>
<p>按以下配置，点击“开始SoVITS训练”后开始等待：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250726181443783-1201950627.png" alt="image" width="1051" height="391" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>batch_size在合理的范围内越高，训练模型的速度就越快，下面给出一张官方的指标：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250726181736087-1807530276.png" alt="image" width="515" height="262" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>除了SoVITS训练，还有GPT训练，GPT训练可以开启dpo模式</p>
<p>&nbsp;</p>
<p>GPT的dpo模式可以大幅提升模型的效果，但是小b硬件不允许，所以在本教程不做演示</p>
<p>（等我成为高手了把你们都吊起来打.jpg）</p>
<p>下面放出官方的指标进行参考</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250726182330796-1922129159.png" alt="image" width="526" height="274" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>训练耗费时间也较长，最后当控制台输出：</p>
<div>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250726183325749-1738984828.png" alt="image" width="1043" height="411" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
</div>
<p>就证明模型已经训练好了。最终训练好的模型保存在以下路径：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250726183544939-2115383256.png" alt="image" width="662" height="428" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<h2>1.4&nbsp;开启TTS推理</h2>
<p>这一步就可以验证你的模型效果了</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250726222224857-1334204152.png" alt="image" width="955" height="307" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>等待一会游览器会自动跳转，如果没有自动跳转的话在游览器访问http://localhost:9872/即可，随即进入TTSwebui界面：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250726223341182-1000825289.png" alt="image" width="931" height="741" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>第1部分中随便选一个存在的GPT模型，第2部分选择我们刚刚训练的模型，第3部分选择要克隆的音频文件，第4部分是该音频语音的文本内容，第5部分输入要进行克隆的文本内容，第6进行语音合成，第7部分产生第5部分文本内容的克隆声音。不清楚的部分都可以保持默认配置。</p>
<h1>2 和IndexTTS比较</h1>
<p>在2025年的现状下，<strong data-start="13" data-end="27">GPT-SoVITS</strong>和<strong data-start="30" data-end="43">index-tts</strong>都是语音合成技术中的强者，但它们定位不同，适用场景也有差异。下面是一个直接对比，帮助你判断哪种方案生成效果更好，取决于你的需求。</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250726225010240-2053978265.png" alt="image" width="506" height="169" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<h2>2.1&nbsp;背景介绍</h2>
<h3><strong>1. GPT-SoVITS</strong></h3>
<p><strong>特点</strong></p>
<p>1. 是SoVITS（基于 VITS 的语音合成）和GPT分词、语言建模能力的结合体。</p>
<p>2. 使用某个“音色克隆”的语音模型（通常是基于 VITS）+ 语义编码器（如 HuBERT/GPT），实现拟人化 TTS。</p>
<p>3. 支持换声、语气、风格迁移，甚至跨语言说话。</p>
<p>4. 通常配合 RVC 音色模型（如RVC v2/v3）使用。</p>
<p><strong>优势</strong></p>
<p>1. 支持音色克隆：训练十几秒音频就能拟声。</p>
<p>2. 语音自然，停顿、语调模拟人类非常像。</p>
<p>3. 可以“演戏”式表达，比如愤怒、哭泣、兴奋。</p>
<p><strong>缺点</strong></p>
<p>1. 对输入文本“精准朗读”能力差一些，容易漏词、错词。</p>
<p>2. 推理时间可能比 index-tts 慢，尤其在低配置机器。</p>
<p>3. 有时候会出现“滑词”、“语义混乱”等现象。</p>
<h3>2. index-tts</h3>
<p><strong>特点</strong></p>
<p>少样本克隆：支持通过少量语音样本（如几秒到几十秒）快速克隆目标音色，保留说话人的语音特征（如音调、语速、口音）。</p>
<p>音色 - 情感解耦：采用分离建模机制，可将 “音色” 与 “情感” 独立控制，例如用 A 的音色合成 B 的情感语气，提升克隆的灵活性。</p>
<p>跨场景适应性：克隆的语音在不同文本内容（如新闻、对话、旁白）中保持一致性，减少因文本风格变化导致的音色偏移。</p>
<p><strong>优势</strong><br>对文本的朗读更稳定，停顿、标点处理准确。</p>
<p>支持多语种，语音平稳、不卡顿。</p>
<p>精准发音处理：采用 “字符 - 拼音混合建模”，有效解决中文多音字、生僻字、方言词汇的发音问题，提升合成准确性。</p>
<p>韵律适配中文特性：针对中文声调（阴平、阳平、上声、去声）和语流音变（如轻声、儿化）优化模型，使合成语音更符合中文表达习惯。</p>
<p><strong>缺点</strong><br>生成声音稍微“机器人”一点，没有 GPT-SoVITS 拟人的自然。</p>
<p>很难做精确的音色模仿。</p>
<p>情感语调弱，无法生成演讲式、激动等语音风格。</p>
<h2>2.2 各自用途</h2>
<p><img src="https://img2024.cnblogs.com/blog/465567/202507/465567-20250726230433621-725173466.png" alt="image" loading="lazy"></p>
<h2>2.3&nbsp;技术结合</h2>
<p>你可以用 index-tts 生成结构清晰的语音，然后 用 GPT-SoVITS 对其风格转换。即：</p>
<p>1. 用index-tts合成基础语音（保证发音准确）；</p>
<p>2 喂给 GPT-SoVITS 进行风格“拟人化”迁移；</p>
<p>3. 得到最自然、最清晰、最像人的音频。</p>
<p>这种做法在AI虚拟主播、AI歌手中非常流行。</p>
<p>&nbsp;</p>
<h1>参考</h1>
<p><a href="https://blog.csdn.net/abbuibuibui/article/details/148061101" target="_blank" rel="noopener nofollow">https://blog.csdn.net/abbuibuibui/article/details/148061101</a></p>
<p><a href="https://github.com/RVC-Boss/GPT-SoVITS" target="_blank" rel="noopener nofollow">https://github.com/RVC-Boss/GPT-SoVITS</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-26 23:12">2025-07-26 23:12</span>&nbsp;
<a href="https://www.cnblogs.com/zhaoweiwei">weiwei22844</a>&nbsp;
阅读(<span id="post_view_count">115</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19004139);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19004139', targetLink: 'https://www.cnblogs.com/zhaoweiwei/p/19004139/GPT-SoVITS', title: 'GPT-SoVITS初探' })">举报</a>
</div>
        