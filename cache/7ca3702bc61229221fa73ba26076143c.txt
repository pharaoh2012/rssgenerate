
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/blknemo/p/12814838.html" title="发布于 2025-03-29 20:17">
    <span role="heading" aria-level="2">【计算机组成】浮点数在计算机中的表示与转二进制</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="前文先看现象">前文先看现象</h1>
<h2 id="double的精度损失">double的精度损失</h2>
<p>老大说：谁要再用double定义商品金额，就自己收拾东西走<br>
先看现象<br>
涉及诸如float或者double这两种浮点型数据的处理时，偶尔总会有一些怪怪的现象，不知道大家注意过没，举几个常见的栗子：</p>
<p>典型现象（一）：条件判断超预期</p>
<pre><code class="language-java">System.out.println( 1f == 0.9999999f ); // 打印：false
System.out.println( 1f == 0.99999999f ); // 打印：true
</code></pre>
<p>典型现象（二）：数据转换超预期</p>
<pre><code class="language-java">float f = 1.1f;
double d = (double) f;
System.out.println(f); // 打印：1.1
System.out.println(d); // 打印：1.100000023841858
</code></pre>
<p>典型现象（三）：基本运算超预期</p>
<pre><code class="language-java">System.out.println( 0.2 + 0.7 ); // 打印：0.8999999999999999
</code></pre>
<p>典型现象（四）：数据自增超预期</p>
<pre><code class="language-java">float f1 = 8455263f;
for (int i = 0; i &lt; 5; i++) {
    System.out.println(f1);
    f1++;
}
// 打印：8455263.0
// 打印：8455264.0
// 打印：8455265.0
// 打印：8455266.0
// 打印：8455267.0


float f2 = 84552631f;
for (int i = 0; i &lt; 5; i++) {
    System.out.println(f2);
    f2++;
}
// 打印：8.4552632E7 （纳尼？不是+1了吗？）
// 打印：8.4552632E7
// 打印：8.4552632E7
// 打印：8.4552632E7
// 打印：8.4552632E7
</code></pre>
<p>看到没，这些简单场景下的使用情况都很难满足我们的需求，所以说用浮点数（包括double和float）处理问题有非常多隐晦的坑在等着咱们！</p>
<p>怪不得技术总监发狠话：谁要是敢在处理诸如&nbsp;商品金额、订单交易、以及货币计算时用浮点型数据（double/float），直接让我们走人！</p>
<h2 id="python为什么连0102都算不对">Python为什么连0.1+0.2都算不对</h2>
<pre><code class="language-python">&gt;&gt;&gt; 0.1 + 0.2
0.30000000000000004

&gt;&gt;&gt; 0.1 + 0.2 == 0.3
False
</code></pre>
<p>绝大多数编程语言都有这个问题，这是因为电脑的内存是有限的但是数字是无限的，计算机采用二进制保存数据，对于一个16bit大小的存储空间，最多只能保存<span class="math inline">\(2^{16} = 65536\)</span>个数字。<br>
<img src="https://img2022.cnblogs.com/blog/1542615/202205/1542615-20220508143253922-1010434609.png" alt="image" loading="lazy"></p>
<p>这明显不够用，怎样在有限的内存中存储更多的数字呢？</p>
<p>在十进制中可以使用科学记数法，比如<span class="math inline">\(65537 = +6.5537 × 10^4\)</span>、<span class="math inline">\(0.65537 = +6.5537 × 10^{-1}\)</span>，这样相当大范围的数字只需要这三个元素就可以表示出来</p>
<ul>
<li>指数</li>
<li>因数</li>
<li>符号</li>
</ul>
<p><img src="https://img2022.cnblogs.com/blog/1542615/202205/1542615-20220508143653949-1117500230.png" alt="image" loading="lazy"></p>
<p>计算机中浮点数的表示方法与此类似，在64bit存储方式中，用1bit存储符号，11bit存储指数，52bit表示分数作为因数。<br>
<img src="https://img2022.cnblogs.com/blog/1542615/202205/1542615-20220508143956869-1754089784.png" alt="image" loading="lazy"></p>
<p>这种方法就是IEEE 754浮点数标准，遗憾的是这种方法节省了空间却牺牲了精确性，不精确的0.1 + 不精确的0.2 = 更不精确的0.3，更不精确的0.3 ≠ 本来就无法精确表示的0.3，这就是Python连0.1+0.2都算不对的原因了</p>
<h1 id="浮点数在计算机中是如何表示的">浮点数在计算机中是如何表示的？</h1>
<p>学过&nbsp;<strong>《计算机组成原理》&nbsp;<strong>或者类似</strong>&nbsp;《计算机系统》&nbsp;<strong>这些课程的小伙伴们应该都知道，浮点数在计算机中的存储方式遵循</strong>IEEE 754 浮点数计数标准</strong>，可以表示为：</p>
<p></p><div class="math display">\[1.M... × 2^E
\]</div><p></p><p><img src="https://img2022.cnblogs.com/blog/1542615/202205/1542615-20220508141425557-1542746455.png" alt="image" loading="lazy"></p>
<p>采用<strong>尾数 + 阶码</strong>的编码方式，更通俗一点说，就是类似于数学课本上所学的<strong>科学计数法</strong>表示方式：<strong>有效数字 + 指数位</strong>！</p>
<p>因此，只要给出：**符号（S）、阶码部分（E）、尾数部分（M）&nbsp;**这三个维度的信息，一个浮点数的表示就完全确定下来了，所以float和double这两种类型的浮点数在计算机中的存储结构就表示成下图所示这个样子：</p>
<p><img src="https://img2022.cnblogs.com/blog/1542615/202205/1542615-20220508141507361-1812591754.png" alt="image" loading="lazy"></p>
<p><img src="https://img2022.cnblogs.com/blog/1542615/202205/1542615-20220508141518103-719657575.png" alt="image" loading="lazy"></p>
<p>1、<strong>符号部分（S）</strong></p>
<ul>
<li>0：正</li>
<li>1：负</li>
</ul>
<p>2、<strong>阶码部分（E）（指数部分）：</strong></p>
<ul>
<li>对于float型浮点数，指数部分8位，考虑可正可负，因此可以表示的指数范围为-127 ~ 128</li>
<li>对于double型浮点数，指数部分11位，考虑可正可负，因此可以表示的指数范围为-1023 ~ 1024</li>
</ul>
<p>3、<strong>尾数部分（M）：</strong>浮点数的精度是由尾数的位数来决定的：</p>
<ul>
<li>对于float型浮点数，尾数部分23位，换算成十进制就是&nbsp;<span class="math inline">\(2^23=8388608\)</span>，所以十进制精度只有6 ~ 7位；</li>
<li>对于double型浮点数，尾数部分52位，换算成十进制就是&nbsp;<span class="math inline">\(2^52 = 4503599627370496\)</span>，所以十进制精度只有15 ~ 16位</li>
</ul>
<p>所以，浮点数交给计算机存储的时候，可能会有<strong>精度丢失</strong>问题！！！因此使用时需要格外小心，如果真因为这一块出了bug，定位问题还是非常艰难的，所以预防工作要做好。</p>
<h1 id="进制转换计算案例">进制转换计算案例</h1>
<p>上面说的是IEEE标准规定的内容，属于理论规约。那一个小数到底要怎么换算成二进制呢？我们得拿实际例子来解释。</p>
<h2 id="先来个简单的例子">先来个简单的例子</h2>
<p>比如：<strong>把十进制小数0.875转换成二进制</strong>，具体怎么操作？</p>
<p>可以分几大步走：</p>
<p>1、<strong>以小数点为界，拆分</strong></p>
<p>2、<strong>整数部分转换</strong><br>
整数转二进制我想大家应该都熟悉，使用：<strong>除2取余法</strong>&nbsp;即可。而这里的0.875整数部分为0，无需操作。</p>
<p>3、<strong>小数部分转换</strong><br>
小数部分的转换不同于整数部分，采用的是&nbsp;“<strong>乘2取整法</strong>”&nbsp;，图示一下就明白了：<br>
<img src="https://img2022.cnblogs.com/blog/1542615/202205/1542615-20220508141753681-813169105.png" alt="image" loading="lazy"></p>
<p>4、<strong>合并结果</strong></p>
<p>整数部分 + 小数部分，最终得到二进制结果为<strong>0.111</strong>。</p>
<p>所以该结果按照上一节所述的<strong>尾数 + 阶码</strong>的计算机计数方式，则可以表示为：</p>
<p></p><div class="math display">\[1.11 × 2^{-1}
\]</div><p></p><p><img src="https://img2022.cnblogs.com/blog/1542615/202205/1542615-20220508141912729-1338171702.png" alt="image" loading="lazy"></p>
<p>所以对应可得：</p>
<ul>
<li>
<p>符号位：<strong>0</strong></p>
</li>
<li>
<p>阶码（E）部分：若以float为例，应为&nbsp;127 +（-1）= 126，因此二进制表示为：<strong>01111110</strong></p>
</li>
<li>
<p>尾数部分（M）：若以float为例，应为23位，因此尾部补齐后为<strong>11000000000000000000000</strong>。</p>
</li>
</ul>
<p>因此最终的总结果为（以32位精度float表示）：<strong>00111111011000000000000000000000</strong></p>
<h2 id="再来个复杂点例子">再来个复杂点例子</h2>
<p>再比如：把十进制小数6.36转换成二进制，具体怎么操作？</p>
<p>但凡能用图示，我就不想写文字，所以用一张图就可以解释得明明白白：<br>
<img src="https://img2022.cnblogs.com/blog/1542615/202205/1542615-20220508142409110-1600632644.png" alt="image" loading="lazy"></p>
<p>整数部分 + 小数部分，因此最终得到的结果二进制结果为<strong>110.01011100...</strong>。</p>
<p>还是按照上一节所述的<strong>尾数 + 阶码</strong>的计算机计数方式，则可以表示为：</p>
<p></p><div class="math display">\[1.1001011100... × 2^2
\]</div><p></p><p><img src="https://img2022.cnblogs.com/blog/1542615/202205/1542615-20220508142428270-304412498.png" alt="image" loading="lazy"></p>
<p>所以对应可得：</p>
<ul>
<li>
<p>符号位：0</p>
</li>
<li>
<p>阶码（E）部分：若以float为例，应为&nbsp;127 +（2）= 129，因此二进制表示为：10000001</p>
</li>
<li>
<p>尾数部分（M）：1001011100...，其实它本身无限不循环，但若以float型精度来截取23位，则可以表示为10010111000010100011111</p>
</li>
</ul>
<p>因此最终的总结果为（以32位精度float表示）：<strong>01000000110010111000010100011111</strong></p>
<p>所以像这种无限位数的尾数情况，用计算机存储产生截取是必然的，必定会有一定的<strong>精度损失</strong>！所以这也从根本上解释了为什么float或者double这种类型数据使用时的风险性，因此必须要结合实际业务理性考量。</p>
<h1 id="神器加持">神器加持</h1>
<p>大家如果对上面的计算结果不放心，或者想检查手动换算的结果是否正确，也有直接的这种二进制转换工具站，典型的比如binaryconvert<br>
<img src="https://img2022.cnblogs.com/blog/1542615/202205/1542615-20220508142600541-715269026.png" alt="image" loading="lazy"></p>
<p>不想手动换算的，直接去上面输入，转换一下即可得到结果，而且可以进制互换，使用非常方便。</p>
<blockquote>
<p>IEEE754在线计算工具工具：<a href="http://weitz.de/ieee/" target="_blank" rel="noopener nofollow">http://weitz.de/ieee/</a><br>
IEEE754快速教程：<a href="https://zhuanlan.zhihu.com/p/564458140" target="_blank" rel="noopener nofollow">https://zhuanlan.zhihu.com/p/564458140</a></p>
</blockquote>

</div>
<div id="MySignature" role="contentinfo">
    <b>请你务必，一而再，再而三，三而不竭，千次万次，毫不犹豫地救自己于这世间水火。</b>
<br>
<br>
笔者将不定期更新<b>【考研或就业】</b>的专业相关知识以及自身理解，希望大家能<b>【关注】</b>我。<br>
如果觉得对您有用，请点击左下角的<b>【点赞】</b>按钮，给我一些鼓励，谢谢！<br>
如果有更好的理解或建议，请在<b>【评论】</b>中写出，我会及时修改，谢谢啦！
<br>
<br>
<p>本文来自博客园，作者：<a href="https://www.cnblogs.com/blknemo/" target="_blank">Nemo&amp;</a></p>
<p>转载请注明原文链接：<a href="https://www.cnblogs.com/blknemo/p/12814838.html" target="_blank">https://www.cnblogs.com/blknemo/p/12814838.html</a></p>



















<!-- 左下角五个按钮 -->
<div id="div_digga" onclick="DiggIt(cb_entryId,cb_blogId,1);" style="position: fixed; left: 0px; bottom: 0px;">
	<div class="diggit" style="height: 20px; background-image: none; color: #FFFFFF; background-color: #E33100; border: medium none; font-size: 10px; font-weight: bold; text-decoration: none; text-shadow: 0 -1px 1px rgba(0, 0, 0, 0.25);">
		<span class="diggnum" style="color: #ffffff; font-size: 10px;">顶</span>
	</div>
</div>



<div id="div_diggb" onclick="my_follow();" style="position: fixed; left: 0px; bottom: 30px;">
	<div class="diggit" style="height: 20px; background-image: none; color: #FFFFFF; background-color: green; border: medium none; font-size: 10px; font-weight: bold; text-decoration: none; text-shadow: 0 -1px 1px rgba(0, 0, 0, 0.25);">
		<span class="diggnum" style="color: #ffffff; font-size: 10px;">关注</span>
	</div>
</div>

<div id="div_diggc" style="position: fixed; left: 0px; bottom: 60px;" onclick="$('#tbCommentBody').focus();">
	<div class="diggit" style="height: 20px; background-image: none; color: #FFFFFF; background-color: black; border: medium none; font-size: 10px; font-weight: bold; text-decoration: none; text-shadow: 0 -1px 1px rgba(0, 0, 0, 0.25);">
		<span class="diggnum" style="color: #FFFFFF; font-size: 10px;">评论</span>
	</div>
</div>


<div id="div_diggc" style="position: fixed; left: 0px; bottom: 90px;" onclick="AddToWz(cb_entryId)">
	<div class="diggit" style="height: 20px; background-image: none; color: #FFFFFF; background-color: #FFB515; border: medium none; font-size: 10px; font-weight: bold; text-decoration: none; text-shadow: 0 -1px 1px rgba(0, 0, 0, 0.25);">
		<span class="diggnum" style="color: #FFFFFF; font-size: 10px;">收藏</span>
	</div>
</div>


<div id="div_diggc" style="position: fixed; left: 0px; bottom: 120px;">
	<div class="diggit" style="height: 20px; background-image: none; color: #FFFFFF; background-color: #2DAEBF; border: medium none; font-size: 10px; font-weight: bold; text-decoration: none; text-shadow: 0 -1px 1px rgba(0, 0, 0, 0.25);">
		<a href="#top" style="color: #FFFFFF; font-size: 10px;">Top</a>
	</div>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.16637893661689815" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-29 20:18">2025-03-29 20:17</span>&nbsp;
<a href="https://www.cnblogs.com/blknemo">Nemo&amp;</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12814838" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12814838);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '12814838', targetLink: 'https://www.cnblogs.com/blknemo/p/12814838.html', title: '【计算机组成】浮点数在计算机中的表示与转二进制' })">举报</a>
</div>
        