<!----> <meta itemprop="headline" content="首页加载速度优化"> <meta itemprop="keywords" content="前端,面试"> <meta itemprop="datePublished" content="2024-10-22T06:17:51.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="Var985"> <meta itemprop="url" content="https://juejin.cn/user/1058178957839502"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-7cdd11fb="">
            首页加载速度优化
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-7cdd11fb=""><div class="author-info-box" data-v-7cdd11fb=""><div class="author-name" data-v-7cdd11fb=""><a href="/user/1058178957839502/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-7cdd11fb=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    Var985
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-7cdd11fb=""><time datetime="2024-10-22T06:17:51.000Z" title="Tue Oct 22 2024 06:17:51 GMT+0000 (Coordinated Universal Time)" class="time" data-v-7cdd11fb="">
                    2024-10-22
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-7cdd11fb=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-7cdd11fb=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-7cdd11fb=""></circle></svg> <span class="views-count" data-v-7cdd11fb="">
                    4,107
                  </span> <span class="read-time" data-v-7cdd11fb=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-7cdd11fb=""><rect width="16" height="16" fill="none" data-v-7cdd11fb=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-7cdd11fb=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-7cdd11fb=""></path></svg>
                    阅读5分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-7cdd11fb=""></div> <!----> <!----></div> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-7cdd11fb=""><div class="article-viewer markdown-body result"><blockquote>
<p>要说面试的时候问到最多的问题，那性能优化绝对是躲不开的话题，基本每个公司面试我都遇到了相关问题，其中，首页加载速度优化又是其中最常问的问题，网上的文章比较零零散散，没有一个总结到十分满意的，于是自己便来总结一下</p>
</blockquote>
<p>这张图是我发现的比较宝藏，比较全面的一张首页加载优化图，便以此图来进行相关总结</p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/476b1e3dbe7d4230b5e877f8f7165ecb~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgVmFyOTg1:q75.awebp?rk3s=f64ab15b&amp;x-expires=1737507115&amp;x-signature=48blPYdXMzM%2FkxU5%2B4MGmFY35ww%3D" alt="首页.png" loading="lazy"></p>
<h2 data-id="heading-0">目录</h2>
<p>一. <a href="#%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E4%BC%98%E5%8C%96" title="#%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E4%BC%98%E5%8C%96">资源加载优化</a></p>
<ol>
<li><a href="#%5B%E5%8E%8B%E7%BC%A9%E8%B5%84%E6%BA%90%5D" title="#%5B%E5%8E%8B%E7%BC%A9%E8%B5%84%E6%BA%90%5D">压缩资源</a></li>
<li><a href="#%E5%90%AF%E7%94%A8gzip%E5%8E%8B%E7%BC%A9" title="#%E5%90%AF%E7%94%A8gzip%E5%8E%8B%E7%BC%A9">启用Gzip压缩</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98" title="#%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98">使用缓存</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9C-cdn" title="#%E4%BD%BF%E7%94%A8%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9C-cdn">使用内容分发网络 (CDN)</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8http2" title="#%E4%BD%BF%E7%94%A8http2">使用HTTP/2</a></li>
<li><a href="#%E4%BC%98%E5%8C%96dns%E8%A7%A3%E6%9E%90" title="#%E4%BC%98%E5%8C%96dns%E8%A7%A3%E6%9E%90">优化DNS解析</a></li>
<li><a href="#%E5%87%8F%E5%B0%91http%E8%AF%B7%E6%B1%82%E6%95%B0" title="#%E5%87%8F%E5%B0%91http%E8%AF%B7%E6%B1%82%E6%95%B0">减少HTTP请求数</a></li>
<li><a href="#%E9%A2%84%E5%8A%A0%E8%BD%BD%E5%92%8C%E9%A2%84%E8%8E%B7%E5%8F%96" title="#%E9%A2%84%E5%8A%A0%E8%BD%BD%E5%92%8C%E9%A2%84%E8%8E%B7%E5%8F%96">预加载和预获取</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E6%9B%B4%E9%AB%98%E6%95%88%E7%9A%84%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F" title="#%E4%BD%BF%E7%94%A8%E6%9B%B4%E9%AB%98%E6%95%88%E7%9A%84%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F">使用更高效的图片格式</a></li>
<li><a href="#%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD%E5%92%8C%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD" title="#%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD%E5%92%8C%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD">图片懒加载和路由懒加载</a></li>
</ol>
<p>二. <a href="#%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96" title="#%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96">页面渲染优化</a></p>
<ol>
<li><a href="#%E4%BC%98%E5%8C%96css" title="#%E4%BC%98%E5%8C%96css">优化CSS</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8css3%E5%8A%A8%E7%94%BB%E4%BB%A3%E6%9B%BFjavascript%E5%8A%A8%E7%94%BB" title="#%E4%BD%BF%E7%94%A8css3%E5%8A%A8%E7%94%BB%E4%BB%A3%E6%9B%BFjavascript%E5%8A%A8%E7%94%BB">使用CSS3动画代替JavaScript动画</a></li>
<li><a href="#%E5%B0%86javascript%E6%94%BE%E5%9C%A8%E9%A1%B5%E9%9D%A2%E5%BA%95%E9%83%A8" title="#%E5%B0%86javascript%E6%94%BE%E5%9C%A8%E9%A1%B5%E9%9D%A2%E5%BA%95%E9%83%A8">将JavaScript放在页面底部</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8async%E5%92%8Cdefer%E5%B1%9E%E6%80%A7" title="#%E4%BD%BF%E7%94%A8async%E5%92%8Cdefer%E5%B1%9E%E6%80%A7">使用async和defer属性</a></li>
<li><a href="#%E5%87%8F%E5%B0%91%E5%92%8C%E4%BC%98%E5%8C%96dom%E6%93%8D%E4%BD%9C" title="#%E5%87%8F%E5%B0%91%E5%92%8C%E4%BC%98%E5%8C%96dom%E6%93%8D%E4%BD%9C">减少和优化DOM操作</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8virtual-dom" title="#%E4%BD%BF%E7%94%A8virtual-dom">使用Virtual DOM</a></li>
<li><a href="#%E9%81%BF%E5%85%8D%E5%B8%83%E5%B1%80%E6%8A%96%E5%8A%A8" title="#%E9%81%BF%E5%85%8D%E5%B8%83%E5%B1%80%E6%8A%96%E5%8A%A8">避免布局抖动</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8will-change%E6%8F%90%E7%A4%BA%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%98%E5%8C%96" title="#%E4%BD%BF%E7%94%A8will-change%E6%8F%90%E7%A4%BA%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%98%E5%8C%96">使用will-change提示浏览器优化</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93-ssr" title="#%E4%BD%BF%E7%94%A8%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93-ssr">使用服务端渲染 (SSR)</a></li>
<li><a href="#%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E8%B5%84%E6%BA%90" title="#%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E8%B5%84%E6%BA%90">延迟加载资源</a></li>
</ol>
<h2 data-id="heading-1">资源加载优化</h2>
<h3 data-id="heading-2">压缩资源</h3>
<p>通过 Webpack 配置，可以自动压缩 HTML、CSS 和 JavaScript 文件。</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// webpack.config.js</span>
<span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">'html-webpack-plugin'</span>);
<span class="hljs-keyword">const</span> <span class="hljs-title class_">MiniCssExtractPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">'mini-css-extract-plugin'</span>);
<span class="hljs-keyword">const</span> <span class="hljs-title class_">TerserPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">'terser-webpack-plugin'</span>);
<span class="hljs-keyword">const</span> <span class="hljs-title class_">CssMinimizerPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">'css-minimizer-webpack-plugin'</span>);

<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
    <span class="hljs-attr">mode</span>: <span class="hljs-string">'production'</span>,
    <span class="hljs-attr">entry</span>: <span class="hljs-string">'./src/index.js'</span>,
    <span class="hljs-attr">output</span>: {
        <span class="hljs-attr">filename</span>: <span class="hljs-string">'bundle.js'</span>,
        <span class="hljs-attr">path</span>: __dirname + <span class="hljs-string">'/dist'</span>
    },
    <span class="hljs-attr">module</span>: {
        <span class="hljs-attr">rules</span>: [
            {
                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,
                <span class="hljs-attr">use</span>: [<span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>, <span class="hljs-string">'css-loader'</span>]
            }
        ]
    },
    <span class="hljs-attr">optimization</span>: {
        <span class="hljs-attr">minimize</span>: <span class="hljs-literal">true</span>,
        <span class="hljs-attr">minimizer</span>: [
            <span class="hljs-keyword">new</span> <span class="hljs-title class_">TerserPlugin</span>(),
            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CssMinimizerPlugin</span>()
        ]
    },
    <span class="hljs-attr">plugins</span>: [
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>({
            <span class="hljs-attr">template</span>: <span class="hljs-string">'./src/index.html'</span>,
            <span class="hljs-attr">minify</span>: {
                <span class="hljs-attr">collapseWhitespace</span>: <span class="hljs-literal">true</span>,
                <span class="hljs-attr">removeComments</span>: <span class="hljs-literal">true</span>,
                <span class="hljs-attr">removeRedundantAttributes</span>: <span class="hljs-literal">true</span>,
                <span class="hljs-attr">useShortDoctype</span>: <span class="hljs-literal">true</span>
            }
        }),
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniCssExtractPlugin</span>({
            <span class="hljs-attr">filename</span>: <span class="hljs-string">'styles.css'</span>
        })
    ]
};
</code></pre>
<h3 data-id="heading-3">启用Gzip压缩</h3>
<p>通过 Webpack 配置，可以生成 Gzip 压缩文件。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">//在请求时会带上该请求头，声明它支持的压缩算法</span>
<span class="hljs-title class_">Accept</span>-<span class="hljs-title class_">Encoding</span>: gzip, deflate, br
</code></pre>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// webpack.config.js</span>
<span class="hljs-keyword">const</span> <span class="hljs-title class_">CompressionPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">'compression-webpack-plugin'</span>);

<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
    <span class="hljs-comment">// 其他配置...</span>
    <span class="hljs-attr">plugins</span>: [
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompressionPlugin</span>({
            <span class="hljs-attr">filename</span>: <span class="hljs-string">'[path][base].gz'</span>,
            <span class="hljs-attr">algorithm</span>: <span class="hljs-string">'gzip'</span>,
            <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(js|css|html|svg)$/</span>,
            <span class="hljs-attr">threshold</span>: <span class="hljs-number">10240</span>,
            <span class="hljs-attr">minRatio</span>: <span class="hljs-number">0.8</span>
        })
    ]
};
</code></pre>
<h3 data-id="heading-4">使用缓存</h3>
<p>服务端通过配置协商缓存和强缓存，来实现请求的缓存，这里以强缓存为例</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// 设置强缓存</span>
<span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);
<span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);

<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();

<span class="hljs-comment">// 强缓存中间件</span>
app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> {
    <span class="hljs-keyword">const</span> options = {
        <span class="hljs-attr">maxAge</span>: <span class="hljs-string">'1y'</span>, <span class="hljs-comment">// 缓存一年</span>
        <span class="hljs-attr">immutable</span>: <span class="hljs-literal">true</span>
    };

    <span class="hljs-comment">// 设置 Cache-Control 头</span>
    res.<span class="hljs-title function_">set</span>(<span class="hljs-string">'Cache-Control'</span>, <span class="hljs-string">`public, max-age=<span class="hljs-subst">${options.maxAge}</span>, immutable`</span>);
    <span class="hljs-title function_">next</span>();
});

<span class="hljs-comment">// 将静态文件托管到 public 目录</span>
app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">'public'</span>), {
    <span class="hljs-attr">maxAge</span>: <span class="hljs-string">'1y'</span> <span class="hljs-comment">// 缓存一年</span>
}));

<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PORT</span> = process.<span class="hljs-property">env</span>.<span class="hljs-property">PORT</span> || <span class="hljs-number">3000</span>;
app.<span class="hljs-title function_">listen</span>(<span class="hljs-variable constant_">PORT</span>, <span class="hljs-function">() =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Server is running on port <span class="hljs-subst">${PORT}</span>`</span>);
});

</code></pre>
<h3 data-id="heading-5">使用内容分发网络 (CDN)</h3>
<p>通过 Webpack 配置，将静态资源路径指向 CDN。</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-attr">output</span>: { 
<span class="hljs-attr">filename</span>: <span class="hljs-string">'[name].[contenthash].js'</span>,
<span class="hljs-attr">path</span>: __dirname + <span class="hljs-string">'/dist'</span>,
<span class="hljs-attr">publicPath</span>: <span class="hljs-string">'https://cdn.example.com/'</span> <span class="hljs-comment">// 指向你的 CDN 地址 </span>
},
</code></pre>
<h3 data-id="heading-6">使用HTTP/2</h3>
<p>启用 HTTP/2 需要在服务器配置中完成，Webpack 本身不直接支持 HTTP/2 配置。</p>
<pre><code class="hljs language-http" lang="http"># Nginx 配置
server {
    listen 443 ssl http2;
    server_name example.com;
    # SSL 配置
}
</code></pre>
<h3 data-id="heading-7">优化DNS解析</h3>
<p>在 HTML 中添加 DNS 预获取。</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"dns-prefetch"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"//example.com"</span>&gt;</span>
</code></pre>
<h3 data-id="heading-8">减少HTTP请求数</h3>
<p>通过 Webpack 配置，合并文件和使用图片精灵，同时我们可以将一些小图片转为base64格式（虽然会减少请求，但是转为base64资源体积会变大一点，所有不推荐进行大图片base64处理）</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// webpack.config.js</span>
<span class="hljs-keyword">const</span> <span class="hljs-title class_">SpriteLoaderPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">'svg-sprite-loader/plugin'</span>);

<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
    <span class="hljs-comment">// 其他配置...</span>
    <span class="hljs-attr">module</span>: {
        <span class="hljs-attr">rules</span>: [
            {
                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.svg$/</span>,
                <span class="hljs-attr">use</span>: [<span class="hljs-string">'svg-sprite-loader'</span>]
            }
        ]
    },
    <span class="hljs-attr">plugins</span>: [
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpriteLoaderPlugin</span>()
    ]
};
</code></pre>
<h3 data-id="heading-9">预加载和预获取</h3>
<p>使用 Webpack 插件进行预加载和预获取。</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// webpack.config.js</span>
<span class="hljs-keyword">const</span> <span class="hljs-title class_">PreloadWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">'preload-webpack-plugin'</span>);

<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
    <span class="hljs-comment">// 其他配置...</span>
    <span class="hljs-attr">plugins</span>: [
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">PreloadWebpackPlugin</span>({
            <span class="hljs-attr">rel</span>: <span class="hljs-string">'preload'</span>,
            <span class="hljs-attr">as</span>: <span class="hljs-string">'script'</span>,
            <span class="hljs-attr">include</span>: <span class="hljs-string">'allChunks'</span>
        })
    ]
};
</code></pre>
<h3 data-id="heading-10">使用更高效的图片格式</h3>
<p>通过 Webpack 配置，使用现代图片格式，如 WebP（但是得注意浏览器兼容性）。</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// webpack.config.js</span>
<span class="hljs-keyword">const</span> <span class="hljs-title class_">ImageMinimizerPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">'image-minimizer-webpack-plugin'</span>);

<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
    <span class="hljs-comment">// 其他配置...</span>
    <span class="hljs-attr">module</span>: {
        <span class="hljs-attr">rules</span>: [
            {
                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(jpe?g|png|gif|svg)$/i</span>,
                <span class="hljs-attr">type</span>: <span class="hljs-string">'asset'</span>,
                <span class="hljs-attr">use</span>: [
                    {
                        <span class="hljs-attr">loader</span>: <span class="hljs-title class_">ImageMinimizerPlugin</span>.<span class="hljs-property">loader</span>,
                        <span class="hljs-attr">options</span>: {
                            <span class="hljs-attr">minimizerOptions</span>: {
                                <span class="hljs-attr">plugins</span>: [
                                    [<span class="hljs-string">'imagemin-webp'</span>, { <span class="hljs-attr">quality</span>: <span class="hljs-number">75</span> }]
                                ]
                            }
                        }
                    }
                ]
            }
        ]
    }
};
</code></pre>
<h3 data-id="heading-11">图片懒加载和路由懒加载</h3>
<p>通过IntersectionObserver API和自定义指令来实现图片懒加载，路由懒加载即用vue的动态路由@import引入即可</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
    <span class="hljs-title function_">inserted</span>(<span class="hljs-params">el</span>) {
        <span class="hljs-keyword">const</span> <span class="hljs-title function_">loadImage</span> = (<span class="hljs-params"></span>) =&gt; {
            <span class="hljs-keyword">const</span> imageElement = el.<span class="hljs-property">tagName</span> === <span class="hljs-string">'IMG'</span> ? el : el.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">'img'</span>);
            
            <span class="hljs-keyword">if</span> (imageElement) {
                imageElement.<span class="hljs-property">src</span> = imageElement.<span class="hljs-property">dataset</span>.<span class="hljs-property">src</span>;
                imageElement.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> el.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">'loaded'</span>);
            }
        };

        <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleIntersect</span> = (<span class="hljs-params">entries, observer</span>) =&gt; {
            entries.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">entry</span> =&gt;</span> {
                <span class="hljs-keyword">if</span> (entry.<span class="hljs-property">isIntersecting</span>) {
                    <span class="hljs-title function_">loadImage</span>();
                    observer.<span class="hljs-title function_">unobserve</span>(el);
                }
            });
        };

        <span class="hljs-keyword">const</span> options = {
            <span class="hljs-attr">root</span>: <span class="hljs-literal">null</span>,
            <span class="hljs-attr">threshold</span>: <span class="hljs-number">0.1</span>
        };

        <span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObserver</span>(handleIntersect, options);
        observer.<span class="hljs-title function_">observe</span>(el);
    }
};

</code></pre>
<h2 data-id="heading-12">页面渲染优化</h2>
<h3 data-id="heading-13">优化CSS</h3>
<p>将 CSS 外链放在页面顶部，因为这样可以确保页面在加载时尽快应用样式，从而避免样式闪烁（FOUC，Flash of Unstyled Content）并提升用户体验。</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Example Page<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- 将 CSS 外链放在页面顶部 --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"styles/main.css"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"styles/theme.css"</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>

</code></pre>
<h3 data-id="heading-14">使用CSS3动画代替JavaScript动画</h3>
<p>使用 CSS3 动画而不是 JavaScript 动画（原理： transform等css3属于是独立的图层，不会影响其他图层，而且使用GPU加速），以减少重排和重绘。</p>
<pre><code class="hljs language-css" lang="css"><span class="hljs-selector-class">.box</span> {
    <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">0.5s</span>, opacity <span class="hljs-number">0.5s</span>;
}

<span class="hljs-selector-class">.box</span><span class="hljs-selector-pseudo">:hover</span> {
    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">100px</span>);
    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.5</span>;
}
</code></pre>
<h3 data-id="heading-15">将JavaScript放在页面底部</h3>
<p>将 JavaScript 文件放在 <code>&lt;body&gt;</code> 标签的底部（现代浏览器支持async和defer后就不需要了）</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- Content --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"bundle.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
</code></pre>
<h3 data-id="heading-16">使用async和defer属性</h3>
<p>使用 <code>async</code> 或 <code>defer</code> 属性加载外部 JavaScript 文件。</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"bundle.js"</span> <span class="hljs-attr">async</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-comment">&lt;!-- 或者 --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"bundle.js"</span> <span class="hljs-attr">defer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<h3 data-id="heading-17">减少和优化DOM操作</h3>
<p>减少不必要的 DOM 操作，合并多次操作为一次。</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// Before</span>
element.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">'100px'</span>;
element.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = <span class="hljs-string">'100px'</span>;

<span class="hljs-comment">// After</span>
element.<span class="hljs-property">style</span>.<span class="hljs-property">cssText</span> = <span class="hljs-string">'width: 100px; height: 100px;'</span>;
</code></pre>
<h3 data-id="heading-18">使用Virtual DOM</h3>
<p>使用虚拟 DOM 技术（如 React）减少直接操作 DOM 带来的开销。</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// 使用 React 示例</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;

<span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);

    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{count}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> setCount(count + 1)}&gt;Increment<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
    );
}
</code></pre>
<h3 data-id="heading-19">避免布局抖动</h3>
<p>在操作 DOM 和样式时，避免可能导致重排的操作，对样式进行统一处理</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// Before</span>
element.<span class="hljs-property">style</span>.<span class="hljs-property">margin</span> = <span class="hljs-string">'10px'</span>;
element.<span class="hljs-property">style</span>.<span class="hljs-property">padding</span> = <span class="hljs-string">'20px'</span>;
element.<span class="hljs-property">style</span>.<span class="hljs-property">border</span> = <span class="hljs-string">'1px solid #000'</span>;

<span class="hljs-comment">// After</span>
element.<span class="hljs-property">style</span>.<span class="hljs-property">cssText</span> = <span class="hljs-string">'margin: 10px; padding: 20px; border: 1px solid #000;'</span>;
</code></pre>
<h3 data-id="heading-20">使用will-change提示浏览器优化</h3>
<p>使用 <code>will-change</code> 属性可以提示浏览器即将发生的变化，使浏览器提前进行优化。</p>
<pre><code class="hljs language-css" lang="css"><span class="hljs-selector-class">.box</span> {
    <span class="hljs-attribute">will-change</span>: transform, opacity;
}
</code></pre>
<h3 data-id="heading-21">使用服务端渲染 (SSR)</h3>
<p>使用服务端渲染技术提前生成 HTML 内容，减少客户端渲染的负担。</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// 使用 Next.js 进行 SSR 示例</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> { renderToString } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom/server'</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./App'</span>;

<span class="hljs-keyword">const</span> html = <span class="hljs-title function_">renderToString</span>(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>);
</code></pre>
<h3 data-id="heading-22">延迟加载资源</h3>
<p>延迟加载图片和非关键 CSS、JavaScript 文件。</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"image.jpg"</span> <span class="hljs-attr">loading</span>=<span class="hljs-string">"lazy"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"Lazy loaded image"</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
    <span class="hljs-keyword">var</span> link = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">'link'</span>);
    link.<span class="hljs-property">rel</span> = <span class="hljs-string">'stylesheet'</span>;
    link.<span class="hljs-property">href</span> = <span class="hljs-string">'non-critical-styles.css'</span>;
    <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(link);
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre></div></div>