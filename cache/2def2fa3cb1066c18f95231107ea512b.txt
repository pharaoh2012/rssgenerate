
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Big-Yellow/p/18689868" title="发布于 2025-01-24 17:44">
    <span role="heading" aria-level="2">深度学习基础理论————CV中常用Backbone(Resnet/Unet/Vit系列/多模态系列等)以及代码</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>主要介绍在CV中常用的Backbone<strong>原理</strong>简易<a href="https://www.big-yellow-j.top/code/cv_backbone.html" target="_blank" rel="noopener nofollow">代码</a>（<em>代码以及原理经常更新</em>），参考论文中的表格，对不同的任务所使用的backbone如下:<br>
<img src="https://img2024.cnblogs.com/blog/3395559/202501/3395559-20250124174432806-1863823342.png" alt="image" loading="lazy"></p>
<p>针对上面内容分为两块内容：1、基于卷积神经网络的CV Backbone：1.<code>Resnet</code>系列;2.<code>Unet</code>系列等；2、基于Transformer的 CV Backbone：1.<code>Vit</code>系列等；3、在多模态中常用的backbone如：SAM/Clip等</p>
<blockquote>
<p>FROM:<a href="https://www.big-yellow-j.top/posts/2025/01/18/CV-Backbone.html" target="_blank" rel="noopener nofollow">https://www.big-yellow-j.top/posts/2025/01/18/CV-Backbone.html</a></p>
</blockquote>
<h2 id="一基于卷积神经网络的cv-backbone">一、基于卷积神经网络的CV Backbone：</h2>
<h3 id="1-resnet系列">1. <code>Resnet</code>系列</h3>
<p>主要有<a href="https://arxiv.org/pdf/1512.03385" target="_blank" rel="noopener nofollow">何凯明大佬</a>提出，主要有<code>resnet18</code>，<code>resnet34</code>，<code>resnet50</code>，<code>resnet101</code>，<code>resnet152</code>，这几种区别主要就在于卷积层数上存在差异（18：18个卷积后面依次类推）,对于<code>Resnet</code>论文中最重要的一个就是<code>残差连接</code>：<br>
<img src="https://img2024.cnblogs.com/blog/3395559/202501/3395559-20250124174431969-1565643960.png" alt="残差连接" loading="lazy"></p>
<p>因为随着不断的叠加卷积层数，那么就容易导致 <strong>梯度消失</strong>以及 <strong>退化</strong>问题，残差连接就是通过跳跃连接（skip connection），允许输入信息绕过若干层直接传递到后面的层：</p>
<p></p><div class="math display">\[h^{l+1} = h^l + F(h^l, W^l)
\]</div><p></p><p>其中<span class="math inline">\(x\)</span>表示我们输入，<span class="math inline">\(h^l\)</span>第<span class="math inline">\(l\)</span>层的输入，<span class="math inline">\(F(h^l, W^l)\)</span>残差分支的非线性变换。对于上面提到的两个问题，残差连接之所以能够缓解，是因为：<br>
1、对于<strong>梯度消失问题</strong>（对于一个神经网络结构，由于反向传播时梯度不断地被链式法则的多个小梯度乘积缩小，最终在靠近输入层的地方梯度变得接近于零，导致参数无法有效更新），残差连接在反向传播时引入了一个 <strong>恒等映射（identity mapping）</strong>，使得梯度可以沿着跳跃路径直接传递给前层。这避免了梯度完全依赖深层网络中的权重进行传播。数学上表述就是，对于残差网络连接而言<strong>梯度传递</strong>为：</p>
<p></p><div class="math display">\[\frac{\partial h^{L}}{\partial h^{l}} = I + \sum_{k=l}^{L-1} \prod_{j=k+1}^{L-1} \frac{\partial F(h^j, W^j)}{\partial h^j}
\]</div><p></p><p><span class="math inline">\(I\)</span>: 恒等映射项，确保梯度具有直接路径传播至浅层。<span class="math inline">\(\sum_{k=l}^{L-1}\)</span>: 累积的非线性变换贡献。对于前馈神经网络而言<strong>梯度传递</strong>为：</p>
<p></p><div class="math display">\[\frac{\partial h^L}{\partial h^l} = \prod_{k=l}^{L-1} \frac{\partial F(h^k, W^k)}{\partial h^k}
\]</div><p></p><p>对比很容易发现，如果某一层出现梯度值很大/小问题，那么就会导致这个效果被不断的扩大，但是残差连接就可以较好的避免这个问题，从另外一种角度而言，<strong>对于第<span class="math inline">\(l+1\)</span>层的输入不仅仅只考虑<span class="math inline">\(l\)</span>层的信息，还要去结合输入<span class="math inline">\(l\)</span>层的信息<span class="math inline">\(x\)</span></strong>（就好比：<strong>传递口号，在A这里错了，后面（B，C）可能就都是错了，但是A传递正确给B，B如果传递错误给C但是C还要听一下A怎么给B讲的，这样就可以很好的保证后面口令都不错误</strong>）</p>
<p>2、对于 <strong>退化问题</strong>：网络深度增加时，传统深层网络会因优化难度增大而导致训练误差不降反升。残差连接引入恒等映射，使网络每层只需学习输入与目标之间的 <strong>差值（residual）</strong>，降低了优化的难度：</p>
<ul>
<li>如果某层优化失败，跳跃连接仍能保留输入特征，从而避免性能下降。</li>
<li>在极端情况下，残差网络等价于浅层网络（当 <span class="math inline">\(F(x) = 0\)</span>时）。</li>
</ul>
<p>简易代码<code>Demo</code>（直接用<code>torch</code>）:</p>
<pre><code class="language-python">import torch
import torchvision.models as models

model = models.resnet50(pretrained=False) # true就会下载权重
</code></pre>
<p>具体修改某一层参数，可以先将模型<code>print</code>出来然后直接进行修改。比如说修改<code>resnet50</code>中最后的线性层：</p>
<pre><code># 原始结构：(fc): Linear(in_features=2048, out_features=1000, bias=True)
model.fc = nn.Linear(2048, 10) # 预测10个类别
</code></pre>
<p>总结一下上面提到的<code>Resnet</code>的输出，假设输入图片为：<span class="math inline">\(1 \times 3 \times 512 \times 512\)</span></p>
<table>
<thead>
<tr>
<th style="text-align: center">模型</th>
<th style="text-align: center"><code>Layer1</code> (blocks)</th>
<th style="text-align: center"><code>Layer2</code> (blocks)</th>
<th style="text-align: center"><code>Layer3</code> (blocks)</th>
<th style="text-align: center"><code>Layer4</code> (blocks)</th>
<th style="text-align: center">总 block 数量</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center"><strong>ResNet-50</strong></td>
<td style="text-align: center">3:<code>1, 256, 128, 128</code></td>
<td style="text-align: center">4:<code>1, 512, 64, 64</code></td>
<td style="text-align: center">6:<code>1, 1024, 32, 32</code></td>
<td style="text-align: center">3:<code>1, 2048, 16, 16</code></td>
<td style="text-align: center">16 (Bottleneck)</td>
</tr>
<tr>
<td style="text-align: center"><strong>ResNet-101</strong></td>
<td style="text-align: center">3:<code>1, 256, 128, 128</code></td>
<td style="text-align: center">4:<code>1, 512, 64, 64</code></td>
<td style="text-align: center">23:<code>1, 1024, 32, 32</code></td>
<td style="text-align: center">3:<code>1, 2048, 16, 16</code></td>
<td style="text-align: center">33 (Bottleneck)</td>
</tr>
<tr>
<td style="text-align: center"><strong>ResNet-152</strong></td>
<td style="text-align: center">3:<code>1, 256, 128, 128</code></td>
<td style="text-align: center">8:<code>1, 512, 64, 64</code></td>
<td style="text-align: center">36:<code>1, 1024, 32, 32</code></td>
<td style="text-align: center">3:<code>1, 2048, 16, 16</code></td>
<td style="text-align: center">50 (Bottleneck)</td>
</tr>
<tr>
<td style="text-align: center"><strong>ResNet-18</strong></td>
<td style="text-align: center">2:<code>1, 64, 256, 256</code></td>
<td style="text-align: center">2:<code>1, 128, 128, 128</code></td>
<td style="text-align: center">2:<code>1, 256, 64, 64</code></td>
<td style="text-align: center">2:<code>1, 512, 32, 32</code></td>
<td style="text-align: center">8</td>
</tr>
<tr>
<td style="text-align: center"><strong>ResNet-34</strong></td>
<td style="text-align: center">3:<code>1, 64, 256, 256</code></td>
<td style="text-align: center">4:<code>1, 128, 128, 128</code></td>
<td style="text-align: center">6:<code>1, 256, 64, 64</code></td>
<td style="text-align: center">3:<code>1, 512, 32, 32</code></td>
<td style="text-align: center">16</td>
</tr>
</tbody>
</table>
<p><strong>Bottleneck 层的具体结构</strong>：</p>
<p>假设我们有一个输入张量 ( X )，其通道数为 ( C_{in} )，输出通道数为 ( C_{out} )，通过 Bottleneck 结构后，网络的计算可以分为以下几个步骤：</p>
<ol>
<li>
<p><strong>第一层卷积</strong>（瓶颈）：( 1 \times 1 ) 卷积，将输入通道数从 ( C_{in} ) 降低到一个较小的中间通道数 ( C_{mid} )（通常 ( C_{mid} &lt; C_{in} )）。</p>
<ul>
<li>输出形状：$$ H \times W \times C_{mid} $$</li>
</ul>
</li>
<li>
<p><strong>第二层卷积</strong>：( 3 \times 3 ) 卷积，进行特征提取。</p>
<ul>
<li>输出形状：$$ H \times W \times C_{mid} $$</li>
</ul>
</li>
<li>
<p><strong>第三层卷积</strong>：再次使用 ( 1 \times 1 ) 卷积，将中间通道数 ( C_{mid} ) 恢复到输出通道数 ( C_{out} )。</p>
<ul>
<li>输出形状：$$ H \times W \times C_{out} $$</li>
</ul>
</li>
</ol>
<p>最终，输入 ( X ) 和输出 ( Y ) 通过残差连接相加，形成一个新的输出。残差连接使得信息能够直接流经网络的不同层，从而避免梯度消失问题。</p>
<h3 id="2unet系列">2.<code>Unet</code>系列</h3>
<p><code>Unet</code>主要介绍3种：<code>Unet1</code>，<code>Unet++</code>，<code>Unet3</code>，主要应用在医学影像分割（当然图像分割领域都适用）</p>
<p><img src="https://img2024.cnblogs.com/blog/3395559/202501/3395559-20250124174432946-717203740.png" alt="2" loading="lazy"></p>
<p>对比上面三种结构，主体结构上并无太大差异，都是首先通过下采样（左边），然后通过上采样（右边）+特征融合。主要差异就在于<strong>如何进行特征融合</strong>。以<code>Unet</code>进行理解：</p>
<p><img src="https://img2024.cnblogs.com/blog/3395559/202501/3395559-20250124174432419-1489702584.png" alt="2" loading="lazy"></p>
<p><strong>左侧encoder操作</strong>：首先通过两层<span class="math inline">\(3 \times3\)</span>卷积进行处理，然后通过一个 <strong>池化</strong>处理<br>
<strong>右侧decoder操作</strong>：一个上采样的卷积层（去卷积层）+特征拼接concat（上图中白色部分就是要拼接的encoder内容）+两个3x3的卷积层（ReLU）反复构成。<br>
<code>Unet</code>相比更早提出的<code>FCN</code>网络，使用拼接来作为特征图的融合方式。<code>FCN</code>是通过特征图对应像素值的<strong>相加</strong>来融合特征的；<code>U-net</code>通过<strong>通道数的拼接</strong>。<br>
<strong><code>Unet</code>好处就在于，因为是逐层的去累加卷积操作，随着卷积的“深入”，越往下的卷积就拥有更加大的 <em>感受野</em>，但局部细节可能会逐渐丢失。为了解决这个问题，通过 <em>上采样</em>操作来恢复这些细节。上采样操作将低分辨率的特征图尺寸恢复到较高分辨率，从而保留更多的局部特征，弥补下采样过程中丢失的细节。最后将两部分内容继续融合（里面的skip-connection操作）相互进行弥补实现较好性能</strong></p>
<blockquote>
<p><strong>感受野</strong>：可以简单理解：比如说一个512x512图像，最开始用卷积核（假设为3x3）去“扫”，那么这个卷积核就会把其“扫”的内容“汇总”起来，比如说某一个值是汇聚了他周围其他的值，这样一来<strong>细节的感知就很多</strong>，但是随着网络层数叠加，这些细节内容就会越来越少，但是计算得到的每个值却是“了解”到了更加“全局”的内容，如下图展示一样<br>
<img src="https://img2024.cnblogs.com/blog/3395559/202501/3395559-20250124174432344-1927252217.png" alt="3" loading="lazy"></p>
<p><strong>上采样</strong>：可以简单理解为：将图片给“扩大”，既然要扩大，那么就会需要对内容进行填补，因此就会有不同的插值方式：'nearest', 'linear', 'bilinear', 'bicubic'（<code>pytorch</code>提供的）<br>
<img src="https://img2024.cnblogs.com/blog/3395559/202501/3395559-20250124174432809-2014809916.webp" alt="4" loading="lazy"></p>
<p>补充一点： <strong>亚像素上采样 (Pixel Shuffle)</strong>：普通的上采样采用的临近像素填充算法，主要考虑空间因素，没有考虑channel因素，上采样的特征图人为修改痕迹明显，图像分割与GAN生成图像中效果不好。为了解决这个问题，ESPCN中提到了亚像素上采样方式。<a href="https://www.cnblogs.com/zhaozhibo/p/15024928.html" target="_blank">具体原理</a>如下<br>
<img src="https://img2024.cnblogs.com/blog/3395559/202501/3395559-20250124174432649-1337801162.png" alt="" loading="lazy"></p>
<p>根据上图，可以得出将维度为<span class="math inline">\([B,C,H,W]\)</span>的 feature map 通过亚像素上采样的方式恢复到维度<span class="math inline">\([B,C,sH,sW]\)</span>的过程分为两步：<br>
1.首先通过卷积进行特征提取，将<span class="math inline">\([B,C,H,W]=&gt;[B,s^2C,H,W]\)</span><br>
2.然后通过Pixel Shuffle 的操作，将<span class="math inline">\([B,s^2C,H,W]=&gt;[B,C,sH,sW]\)</span><br>
Pixel Shuffle的主要功能就是将这<span class="math inline">\(s^2\)</span>个通道的特征图组合为新的<span class="math inline">\([B,C,sH,sW]\)</span>的上采样结果。具体来说，就是将原来一个低分辨的像素划分为<span class="math inline">\(s^2\)</span>个更小的格子，利用<span class="math inline">\(s^2\)</span>个特征图对应位置的值按照一定的规则来填充这些小格子。按照同样的规则将每个低分辨像素划分出的小格子填满就完成了重组过程。在这一过程中模型可以调整<span class="math inline">\(s^2\)</span>个shuffle通道权重不断优化生成的结果。</p>
</blockquote>
<pre><code class="language-python">class Net(nn.Module):
    def __init__(self, upscale_factor):
        super(Net, self).__init__()

        self.conv1 = nn.Conv2d(1, 64, (5, 5), (1, 1), (2, 2))
        self.conv2 = nn.Conv2d(64, 32, (3, 3), (1, 1), (1, 1))
        self.conv3 = nn.Conv2d(32, 1 * (upscale_factor ** 2), (3, 3), (1, 1), (1, 1))	# 最终将输入转换成 [32, 9, H, W]
        self.pixel_shuffle = nn.PixelShuffle(upscale_factor)	# 通过 Pixel Shuffle 来将 [32, 9, H, W] 重组为 [32, 1, 3H, 3W]
    def forward(self, x):
        x = torch.tanh(self.conv1(x))
        x = torch.tanh(self.conv2(x))
        x = torch.sigmoid(self.pixel_shuffle(self.conv3(x)))
        return x
    
if __name__ == "__main__":
    model = Net(upscale_factor=3)
    input = torch.arange(1, 10, dtype = torch.float32).view(1,1,3,3)
    output = model(input)
    print(output.size())

# 输出结果为：
torch.Size([1, 1, 9, 9])

</code></pre>
<p>对比三种<code>UNet</code>操作，从<span class="math inline">\(1\rightarrow 3\)</span>进行特征融合的程度更加多，1：将<strong>同“水平”</strong> 的特征以及“下面”特征进行使用；3：将“左侧”所有的特征以及“下面”特征都进行使用；<code>Unet++</code>:不是直接使用简单的<code>skip-connection</code>而是回去结合 <strong>邻近水平</strong>和 <strong>邻近水平下</strong>的特征，比如说下面图c通过卷积操作结合<span class="math inline">\(X^{0,0}\text{和}X^{1,0}\)</span>的特征。</p>
<p>总结上面三种网络结构改进在于：1、<code>Skip-connection</code>方式上区别（也就是<strong>如何进行特征连接过程</strong>）</p>
<blockquote>
<p><code>Unet++</code>网络结构<br>
<img src="https://img2024.cnblogs.com/blog/3395559/202501/3395559-20250124174432995-977600229.png" alt="" loading="lazy"></p>
</blockquote>
<h3 id="3其他">3.其他</h3>
<p>对于传统的<code>AlexNet</code>，<code>LeNet</code>，<code>GoogleNet</code>可以去看之前写的内容：<br>
1、<a href="https://www.big-yellow-j.top/code/AlexNet.html" target="_blank" rel="noopener nofollow">https://www.big-yellow-j.top/code/AlexNet.html</a><br>
2、<a href="https://www.big-yellow-j.top/code/LeNet.html" target="_blank" rel="noopener nofollow">https://www.big-yellow-j.top/code/LeNet.html</a><br>
3、<a href="https://www.big-yellow-j.top/code/googlenet.html" target="_blank" rel="noopener nofollow">https://www.big-yellow-j.top/code/googlenet.html</a></p>
<h2 id="二基于transformer的cv-backbone">二、基于Transformer的CV Backbone</h2>
<p>主要介绍两种：<code>Vit</code>和<code>MAE</code>。<code>Vit</code>:核心思想是将图像划分为小块（<code>Patch</code>），将每个小块视为一个 "单词"（类似 NLP 中的 Token），然后通过标准的 Transformer 架构对这些 Patch 进行处理。</p>
<p><img src="https://img2024.cnblogs.com/blog/3395559/202501/3395559-20250124174432642-1988306429.png" alt="2" loading="lazy"></p>
<p><code>Vit</code>主要操作流程：</p>
<ul>
<li>1、<code>patch embedding</code>和<code>position embeeding</code>：将图片进行切分为固定大小的patch，比如说输入一张224x224RGB图像，path=16x16。那么的话就会生成：<span class="math inline">\(\frac{224\times224}{16\times16}=196\)</span>个patch，那么输入模型的序列数量：<strong>196</strong>，经过拉长处理之后得到的序列长度为：<span class="math inline">\(16\times 16\times 3=768\)</span>。通过线性投射层处理之后维度为：<span class="math inline">\(196\times 768\)</span>一共为 <strong>196</strong>个token，然后补充一个位置编码，对于位置编码最简单的就是直接对每一个patch都生成一个1维的向量（类似one-hot，但是对于位置编码的方式有很多）然后去拼接起来（同时还需要补充一个<code>CLS</code>），最后维度就是：<span class="math inline">\(197\times768\)</span></li>
</ul>
<blockquote>
<p><strong>值得注意的是</strong>：正如上提到的<strong>亚像素上采样 (Pixel Shuffle)</strong>可以通过他的逆操作将token数量减少（其实就是将尺寸改变，比如[b,c,w,h]--&gt;[b,c/r^2,w/2,h/2]）</p>
</blockquote>
<ul>
<li>2、<code>transformer encoder</code>：就是一个正常的transformer的encoder处理输入多少维度输出多少维度，依旧是<span class="math inline">\(197\times768\)</span></li>
</ul>
<p><code>MAE</code> 主要操作流程</p>
<ul>
<li>1、<code>patch embedding</code> 和 <code>position embedding</code>：前面操作和<code>Vit</code>操作差异不大，区别在于<code>MAE</code>进行 <strong>随机遮盖（Masking）</strong>，例如遮盖 75% 的 Patch，只保留 <strong>25%</strong> 的 Token，用于后续的编码器输入。最终，编码器的输入维度变为：<span class="math inline">\(49 \times 768\)</span>（假设保留的 Token 为 49）。与此同时，补充位置编码，最简单的方式是为每个 Patch Token 添加一个唯一的向量（类似于 One-Hot），拼接后维度保持不变。</li>
<li>2、<code>masked token reconstruction</code>：将编码器的输出输入到解码器中，同时将被遮盖的 Token 填充为一个固定的嵌入（称为 Mask Token）。解码器的输入维度恢复为：<span class="math inline">\(196 \times 768\)</span>解码器通过 Transformer 操作，将未遮盖的 Token 特征与 Mask Token 结合，并尝试重建完整图像。重建的目标是尽可能接近原始图像像素值。</li>
</ul>
<blockquote>
<p><strong>值得注意的是</strong>：MAE 的优势在于编码器仅处理未遮盖的部分 Token，大大减少了计算成本。同时，解码器可以设计得更轻量，仅用于重建任务，最终可以通过重建损失（如 L2 损失）优化模型。</p>
</blockquote>
<blockquote>
<p>在<code>MAE</code>中是分与训练和微调的，与训练就是去预测mask内容，微调就是直接根据不同任务进行微调即可（换输出头/微调里面参数）</p>
</blockquote>
<pre><code class="language-python">class DetectionHead(nn.Module):
    def __init__(self, embed_dim, num_classes):
        super().__init__()
        self.cls_head = nn.Linear(embed_dim, num_classes)  # 分类头
        self.reg_head = nn.Linear(embed_dim, 4)           # 边框回归头

    def forward(self, x):
        cls_preds = self.cls_head(x)  # [B, num_patches, num_classes]
        reg_preds = self.reg_head(x)  # [B, num_patches, 4]
        return cls_preds, reg_preds
</code></pre>
<p><strong>然后将检测头补充到最后的decoder输出后面即可</strong></p>
<p><strong>补充</strong><br>
1、在<code>Vit</code>和<code>MAE</code>的代码中（两部分代码差异不大，以<code>MAE</code>为例）一般而言有如下参数：<br>
<code>img_size=224, patch_size=16, in_chans=3, embed_dim=768, encoder_layers=12, decoder_embed_dim=512, decoder_layers=4, mask_ratio=0.75</code><br>
<strong>第一步</strong>：对于一个输入图片<strong>首先</strong>通过<code>PatchEmbedding</code>（用卷积（<code>in_channels=3</code>， <code>out_channels=embed_dim=768</code>）去“扫”）然后拉平（<code>x.flatten(2).transpose(1, 2) </code>）输出维度为：<code>[B, num_patches, embed_dim]</code>然后与位置编码相加维度为：<code>[B, num_patches, embed_dim]</code><br>
<strong>第二步</strong>：随机mask部分内容：<code>x_masked, mask, keep = self.random_masking(x)</code>，<code>x_masked</code>为随机mask后内容，<code>mask</code>为mask掉的内容，<code>keep</code>为mask余下内容（比如1到100，其中<code>x_maked</code>，<code>keep</code>都为25）主要用来保证顺序，在输入<code>decoder</code>之前需要把之前mask内容补充进来<br>
2、<strong>transformer框架模型一般而言需要较多的数据进行训练，如果数据少还是用卷积效果会好一点</strong></p>
<p><code>Swin Transformer</code>模型</p>
<p><img src="https://img2024.cnblogs.com/blog/3395559/202501/3395559-20250124174432863-1234556831.png" alt="" loading="lazy"></p>
<p>对比之前的<code>Vit</code>和<code>MAE</code>存在<strong>问题</strong>在计算注意力的时候都是<strong>全局计算</strong>的（每个token之间都是进行注意力计算）因此在<code>Swin Transformer</code>中作者认为这种操作不利于：高分辨率图像（像素点多计算量大）以及密集预测任务（全局的话可能对有些细节就会丢失）</p>
<blockquote>
<p>The global computation leads to quadratic complexity with respect to the number of tokens, making it unsuitable for many vision problems requiring an immense set of tokens for dense prediction or to represent a high-resolution image.</p>
</blockquote>
<p>要去避免全局计算，一个最简单的办法就是：我去从不同的patch中挑选出一部分内容组合起来，然后再组合的这一块内容中去计算注意力。</p>
<p><img src="https://img2024.cnblogs.com/blog/3395559/202501/3395559-20250124174432586-748914072.png" alt="" loading="lazy"></p>
<ul>
<li>
<p>1、<code>Patch Merging</code>操作，这部分操作就是进行 <strong>挑选组合</strong>操作，对<code>patch</code>之间进行组合，作者论文中表示是：挑选2x2的邻居进行分组（这里操作和<code>Unet</code>中下采样很像，每个stage中都进行一次减小尺寸，这样一来就可以看到更加“全局”）<br>
<img src="https://img2024.cnblogs.com/blog/3395559/202501/3395559-20250124174432389-2134613897.png" alt="" loading="lazy"></p>
</li>
<li>
<p>2、<code>Swin Transformer Block</code>：在将<code>patch</code>组合操作之后，输入到Transformer中，在这里作者将传统的注意力计算改为两种：<code>W-MSA</code>（Window-Multi-Head Self Attention）和<code>SW-MSA</code>（Shift-Window-Multi-Head Self Attention）之所以这样，作者还是在解决上面提到的问题：去避免全局计算。<br>
<code>W-MSA</code>操作：对于传统的计算量大问题（<span class="math inline">\(MSA=4hwC^2+2(hw)^2C\)</span>）提出改进（<span class="math inline">\(W\text{-}MSA=4hwC^2+ 2M^2hwC\)</span>）这部分操作好理解，对于（H，W，C）划分为MxM的窗口得到：（N，MxM，C），然后就只需要对这部分计算Attention-Score即可<br>
<code>SW-MSA</code>操作：弥补上面（<code>W-MSA</code>）存在问题，如果只是计算窗口内部的Attention-Score，就会导致不同窗口之间关系是不知道的，通过下面Shifted-Window来移动窗口位置<br>
<img src="https://img2024.cnblogs.com/blog/3395559/202501/3395559-20250124174433276-1984557736.gif" alt="" loading="lazy"></p>
</li>
</ul>
<p>通过上面移动进而构成下面图像：<br>
<img src="https://img2024.cnblogs.com/blog/3395559/202501/3395559-20250124174432753-1670261070.png" alt="" loading="lazy"></p>
<p>这里就会有9块，再<code>W-MSA</code>中是4块（都是4x4），无疑加大了计算量，因此只需要将9块重新进行拼接起来（保证最后为4x4即可）就可以，比如下面，<br>
<img src="https://img2024.cnblogs.com/blog/3395559/202501/3395559-20250124174432292-716331830.png" alt="" loading="lazy"></p>
<blockquote>
<p>对于上面的操作，可以直接通过<code>torch.roll</code>实现先<strong>左移动3然后上移动3</strong>。<code>torch.roll(x, shifts=(-self.shift_size, -self.shift_size), dims=(1, 2))</code></p>
</blockquote>
<p>这样一来就都满足（4x4）还可以实现不同window之间进行交互（5，3为例，将他们视作整体，计算AttentionScore）不过值得注意的是，5和3之间像素都是有差异的，直接计算会引入误差，因此原文在计算注意力时，在执行softmax之前，分别将模块3像素对应的注意力值分别减去100，使得softmax后，权重都是0，从而实现模块<a href="https://www.cnblogs.com/chentiao/p/18379629" target="_blank">3对模块5的影响</a>。<br>
<img src="https://img2024.cnblogs.com/blog/3395559/202501/3395559-20250124174432467-1070013136.png" alt="" loading="lazy"></p>
<p>具体操作：</p>
<pre><code class="language-python">...
attn_mask = attn_mask.masked_fill(attn_mask != 0, float(-100.0)).masked_fill(attn_mask == 0, float(0.0))
...
# con atten
q, k, v = qkv[0], qkv[1], qkv[2]  # make torchscript happy (cannot use tensor as tuple)

q = q * self.scale
attn = (q @ k.transpose(-2, -1))
...
if mask is not None:
    nW = mask.shape[0]
    attn = attn.view(B_ // nW, nW, self.num_heads, N, N) + mask.unsqueeze(1).unsqueeze(0)
    attn = attn.view(-1, self.num_heads, N, N)
    attn = self.softmax(attn)
else:
    attn = self.softmax(attn)
</code></pre>
<blockquote>
<p>上面操作很容易理解：对于<strong>注意力计算</strong>：计算<span class="math inline">\(QK^T\)</span>之后，得到各个点的<strong>权重</strong>，然后把这个权重加权到<span class="math inline">\(V\)</span>上，上面操作通过加<span class="math inline">\(-100\)</span>然后通过softmax处理，那么不属于分区内的“点”（比如53组合）权重就会被处理为0</p>
</blockquote>
<h2 id="三多模态backbone">三、多模态backbone</h2>
<p>这部分内容主要介绍在多模态算法中常用的几类<code>backbone</code>，主要为代码（SAM/Clip等）</p>
<blockquote>
<p>多模态算法涉及到的<code>backbone</code>比较杂，传统卷积/Transformer都有</p>
</blockquote>
<p>简短介绍：<code>Clip</code>：将文本和图像已经通过对齐；<code>SAM</code>：主要用来作分割（简单理解为：抠图）</p>
<pre><code class="language-python"># Clip
'''
预先下载/直接transformer下载：
config.json, preprocessor_config.json, tokenizer.json vocab.json pytorch_model.bin
'''
import transformers
import torch
import torch.nn as nn
from transformers import CLIPProcessor, CLIPModel

class ClipBackbone(nn.Module):
    def __init__(self, ):
        super(ClipBackbone, self).__init__()
        self.clip_model = CLIPModel.from_pretrained('./clip/')
        self.processor = CLIPProcessor.from_pretrained('./clip/')
        ...
        # 加载llm
        ...
    def forward(self, image, text):
        # clip提取特征
        inputs = self.processor(images= image, return_tensors= "pt")
        with torch.no_grad():
            image_embeddings = self.clip_model.get_image_features(**inputs)
        ...
        # 将image_embeddings和llm尺寸对其
        ...
        # llm处理
        ...
        return image_embeddings
</code></pre>
<p>输出为维度<code>config.json</code>中参数<code>"projection_dim": 768</code></p>
<h1 id="参考">参考:</h1>
<p>1、<a href="https://arxiv.org/pdf/2206.08016" target="_blank" rel="noopener nofollow">https://arxiv.org/pdf/2206.08016</a><br>
2、<a href="https://arxiv.org/pdf/1512.03385" target="_blank" rel="noopener nofollow">https://arxiv.org/pdf/1512.03385</a><br>
3、<a href="https://arxiv.org/pdf/2010.11929" target="_blank" rel="noopener nofollow">https://arxiv.org/pdf/2010.11929</a><br>
4、<a href="https://arxiv.org/pdf/2111.06377" target="_blank" rel="noopener nofollow">https://arxiv.org/pdf/2111.06377</a><br>
5、<a href="https://arxiv.org/pdf/1505.04597" target="_blank" rel="noopener nofollow">https://arxiv.org/pdf/1505.04597</a><br>
6、<a href="https://arxiv.org/pdf/2311.17791" target="_blank" rel="noopener nofollow">https://arxiv.org/pdf/2311.17791</a><br>
7、<a href="https://arxiv.org/pdf/2004.08790" target="_blank" rel="noopener nofollow">https://arxiv.org/pdf/2004.08790</a><br>
8、<a href="https://pytorch.org/docs/stable/generated/torch.nn.Upsample.html" target="_blank" rel="noopener nofollow">https://pytorch.org/docs/stable/generated/torch.nn.Upsample.html</a><br>
9、<a href="https://www.cnblogs.com/zhaozhibo/p/15024928.html" target="_blank">https://www.cnblogs.com/zhaozhibo/p/15024928.html</a><br>
10、<a href="https://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Shi_Real-Time_Single_Image_CVPR_2016_paper.pdf" target="_blank" rel="noopener nofollow">https://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Shi_Real-Time_Single_Image_CVPR_2016_paper.pdf</a><br>
11、<a href="https://arxiv.org/pdf/1807.10165v1" target="_blank" rel="noopener nofollow">https://arxiv.org/pdf/1807.10165v1</a><br>
12、<a href="https://arxiv.org/pdf/2103.14030" target="_blank" rel="noopener nofollow">https://arxiv.org/pdf/2103.14030</a><br>
13、<a href="https://www.cnblogs.com/chentiao/p/18379629" target="_blank">https://www.cnblogs.com/chentiao/p/18379629</a><br>
14、<a href="https://github.com/facebookresearch/segment-anything" target="_blank" rel="noopener nofollow">https://github.com/facebookresearch/segment-anything</a><br>
15、<a href="https://github.com/openai/CLIP" target="_blank" rel="noopener nofollow">https://github.com/openai/CLIP</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.36008220533217594" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-24 17:45">2025-01-24 17:44</span>&nbsp;
<a href="https://www.cnblogs.com/Big-Yellow">Big-Yellow-J</a>&nbsp;
阅读(<span id="post_view_count">54</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18689868" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18689868);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18689868', targetLink: 'https://www.cnblogs.com/Big-Yellow/p/18689868', title: '深度学习基础理论————CV中常用Backbone(Resnet/Unet/Vit系列/多模态系列等)以及代码' })">举报</a>
</div>
        