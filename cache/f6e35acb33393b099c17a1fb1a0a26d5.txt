
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/timothy020/p/19043508" title="发布于 2025-08-17 18:03">
    <span role="heading" aria-level="2">Langchain4j-0-基本概念与依赖导入</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="模型开发和常规开发层级对比">模型开发和常规开发层级对比</h2>
<ul>
<li>Prompt：好比UI层，进行用户交互</li>
<li>Langchain4j, Spring AI：好比Controller，调用AI大模型</li>
<li>各类AI大模型：好比Service，提供人工智能服务</li>
<li>向量数据库：好比Mapper，进行数据存储<br>
<img src="https://my-pic.miaops.sbs/2025/07/20250718161503.png" alt="image.png" loading="lazy"></li>
</ul>
<h2 id="大模型调用三件套">大模型调用三件套</h2>
<p><img src="https://my-pic.miaops.sbs/2025/07/20250718222818.png" alt="image.png" loading="lazy"></p>
<h2 id="导入依赖">导入依赖</h2>
<h3 id="导入-lanchain4j-依赖">导入 Lanchain4j 依赖</h3>
<h4 id="导入-bom-包管理版本">导入 BOM 包管理版本</h4>
<p>参考文档： <a href="https://docs.langchain4j.info/get-started" target="_blank" rel="noopener nofollow">快速开始</a></p>
<pre><code class="language-xml">&lt;properties&gt;  
    &lt;!-- langchain4j --&gt;  
    &lt;langchain4j.version&gt;1.0.1&lt;/langchain4j.version&gt;  
&lt;/properties&gt;

&lt;dependencyManagement&gt;  
	&lt;dependencies&gt;
        &lt;!--langchain4j的依赖清单，加载BOM后所有langchain4j版本号可以被统一管理起来  
        https://docs.langchain4j.dev/get-started        --&gt;        
        &lt;dependency&gt;  
            &lt;groupId&gt;dev.langchain4j&lt;/groupId&gt;  
            &lt;artifactId&gt;langchain4j-bom&lt;/artifactId&gt;  
            &lt;version&gt;${langchain4j.version}&lt;/version&gt;  
            &lt;type&gt;pom&lt;/type&gt;  
            &lt;scope&gt;import&lt;/scope&gt;  
		&lt;/dependency&gt;
	&lt;dependencies&gt;
&lt;/dependencyManagement&gt;

</code></pre>
<h4 id="导入原生依赖包">导入原生依赖包</h4>
<ul>
<li>导入 Low-Level API 和 High-Level API 的依赖包</li>
</ul>
<pre><code class="language-xml">&lt;!--langchain4j-open-ai 基础--&gt;  
&lt;dependency&gt;  
    &lt;groupId&gt;dev.langchain4j&lt;/groupId&gt;  
    &lt;artifactId&gt;langchain4j-open-ai&lt;/artifactId&gt;  
&lt;/dependency&gt;  
&lt;!--langchain4j 高阶--&gt;  
&lt;dependency&gt;  
    &lt;groupId&gt;dev.langchain4j&lt;/groupId&gt;  
    &lt;artifactId&gt;langchain4j&lt;/artifactId&gt;  
&lt;/dependency&gt;
</code></pre>
<h4 id="导入springboot-集成依赖包">导入SpringBoot 集成依赖包</h4>
<p>参考文档： <a href="https://docs.langchain4j.info/tutorials/spring-boot-integration" target="_blank" rel="noopener nofollow">SprintBoot 集成</a></p>
<ul>
<li>导入和 SpringBoot 的整合包</li>
</ul>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;dev.langchain4j&lt;/groupId&gt;
    &lt;artifactId&gt;langchain4j-open-ai-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;1.0.0-beta3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;dev.langchain4j&lt;/groupId&gt;
    &lt;artifactId&gt;langchain4j-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;1.0.0-beta3&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h3 id="第三方集成-通义千问为例">第三方集成 (通义千问为例)</h3>
<p>参考文档：<a href="https://docs.langchain4j.info/integrations/language-models/dashscope" target="_blank" rel="noopener nofollow">通义千问</a></p>
<h4 id="导入-bom-包管理版本-1">导入 BOM 包管理版本</h4>
<pre><code class="language-xml">&lt;properties&gt;  
    &lt;!--langchain4j-community 引入阿里云百炼平台依赖管理清单--&gt;  
    &lt;langchain4j-community.version&gt;1.0.1-beta6&lt;/langchain4j-community.version&gt;  
&lt;/properties&gt;

&lt;dependencyManagement&gt;  
	&lt;dependencies&gt;
		&lt;!--引入阿里云百炼平台依赖管理清单  
		https://docs.langchain4j.dev/integrations/language-models/dashscope  
		--&gt;  
		 &lt;dependency&gt;  
			 &lt;groupId&gt;dev.langchain4j&lt;/groupId&gt;  
			 &lt;artifactId&gt;langchain4j-community-bom&lt;/artifactId&gt;  
			 &lt;version&gt;${langchain4j-community.version}&lt;/version&gt;  
			 &lt;type&gt;pom&lt;/type&gt;  
			 &lt;scope&gt;import&lt;/scope&gt;  
		 &lt;/dependency&gt;
	&lt;/dependencies&gt;  
&lt;/dependencyManagement&gt;

</code></pre>
<h4 id="导入-springboot-集成依赖包">导入 SpringBoot 集成依赖包</h4>
<pre><code class="language-xml">&lt;dependency&gt;  
	&lt;groupId&gt;dev.langchain4j&lt;/groupId&gt;  
	&lt;artifactId&gt;langchain4j-community-dashscope-spring-boot-starter&lt;/artifactId&gt;  
&lt;/dependency&gt;
</code></pre>
<h2 id="创建-chatmodel">创建 ChatModel</h2>
<p><strong>APIKey 要从环境变量中获取。</strong> 设置方法：<a href="https://bailian.console.aliyun.com/?tab=api#/api/?type=model&amp;url=2803795" target="_blank" rel="noopener nofollow">百炼平台文档</a></p>
<pre><code class="language-java">@Bean  
public ChatModel chatModelQwen()  
{  
    System.out.println("ALIQWEN_API: "+System.getenv("ALIQWEN_API"));  
    return OpenAiChatModel.builder()  
                    .apiKey(System.getenv("ALIQWEN_API"))  
                    .modelName("qwen-plus")  
                    .baseUrl("https://dashscope.aliyuncs.com/compatible-mode/v1")  
            .build();  
}
</code></pre>
<h2 id="创建-ai-service">创建 AI Service</h2>
<p>原生整合：手动创建 AI Service</p>
<pre><code class="language-java">// ChatAssistant.java
public interface ChatAssistant  
{  
    String chat(String prompt);  
}

// Config.java
@Bean  
public ChatAssistant chatAssistant(@Qualifier("qwen") ChatModel chatModelQwen)  
{  
    return AiServices.create(ChatAssistant.class, chatModelQwen);  
}

// Controller.java
@RestController  
@Slf4j  
public class HighApiController  
{  
    @Resource  
    private ChatAssistant chatAssistant;  
  
    @GetMapping(value = "/highapi/highapi")  
    public String highApi(@RequestParam(value = "prompt", defaultValue = "你是谁") String prompt)  
    {  
        return chatAssistant.chat(prompt);  
    }  
}

</code></pre>
<ul>
<li>和 SpringBoot 整合：声明式创建 AI Service</li>
</ul>
<pre><code class="language-java">// ChatAssiatant.java
@AiService  
public interface ChatAssistant  
{  
    String chat(String prompt);  
}

// Controller.java
@RestController  
public class DeclarativeAIServiceController  
{  
    @Resource  
    private ChatAssistant chatAssistant;    
  
    @GetMapping(value = "/lc4j/boot/chatAssistant")  
    public String deepseekAI(@RequestParam(value = "prompt", defaultValue = "你是谁") String prompt)  
    {  
        return chatAssistant.chat(prompt);   
    }  
  
}
</code></pre>
<p><code>@AIService(wiringMode = EXPLICIT, chatModel = "chatModelQwen")</code> 可以指定改 AI Service 使用的是 chatModelQwen 模型。</p>
<h2 id="模型参数">模型参数</h2>
<pre><code class="language-java">// Config.java
@Configuration  
public class LLMConfig  
{  
    @Bean(name = "qwen")  
    public ChatModel chatModelQwen()  
    {  
        return OpenAiChatModel.builder()  
                    .apiKey(System.getenv("ALIQWEN_API"))  
                    .modelName("qwen-plus")  
                    .baseUrl("https://dashscope.aliyuncs.com/compatible-mode/v1")  
                .logRequests(true) // 日志级别设置为debug才有效  
                .logResponses(true)// 日志级别设置为debug才有效  
                .listeners(List.of(new TestChatModelListener()))  // 事件监听
                .maxRetries(2) // 最大重试次数
                .timeout(Duration.ofSeconds(5)) // 请求大模型的超时时间
                .build();  
    }  
}
// Linstener.java
@Slf4j  
public class TestChatModelListener implements ChatModelListener  
{  
    @Override  
    public void onRequest(ChatModelRequestContext requestContext)  
    {  
  
        // onRequest配置的k:v键值对，在onResponse阶段可以获得，上下文传递参数好用  
        String uuidValue = IdUtil.simpleUUID();  
        requestContext.attributes().put("TraceID",uuidValue);  
        log.info("请求参数requestContext:{}", requestContext+"\t"+uuidValue);  
    }  
  
    @Override  
    public void onResponse(ChatModelResponseContext responseContext)  
    {  
        Object object = responseContext.attributes().get("TraceID");  
  
        log.info("返回结果responseContext:{}", object);  
    }  
  
    @Override  
    public void onError(ChatModelErrorContext errorContext)  
    {  
        log.error("请求异常ChatModelErrorContext:{}", errorContext);  
    }  
}
</code></pre>
<h2 id="图片生产模型">图片生产模型</h2>
<p>使用 <code>qwen-vl-max</code> 模型</p>
<pre><code class="language-java">// Config.java
@Configuration  
public class LLMConfig  
{  
    @Bean  
    public ChatModel ImageModel() {  
        return OpenAiChatModel.builder()  
                .apiKey(System.getenv("ALIQWEN_API"))  
                //qwen-vl-max 是一个多模态大模型，支持图片和文本的结合输入，适用于视觉-语言任务。  
                .modelName("qwen-vl-max")  
                .baseUrl("https://dashscope.aliyuncs.com/compatible-mode/v1")  
                .build();  
    }
}
</code></pre>
<p>发送用户消息：</p>
<ul>
<li>图片转 Base 64 编码</li>
<li>构造请求消息 <code>UserMessage</code> ：包含文字和转码后的图片</li>
<li>调用 <code>.chat</code> 接口</li>
<li>打印请求结果</li>
</ul>
<pre><code class="language-java">// ImageModeController.java
@RestController  
@Slf4j  
public class ImageModelController  
{  
    @Autowired  
    private ChatModel chatModel;  
  
    @Value("classpath:static/images/mi.jpg")  
    private Resource resource;//import org.springframework.core.io.Resource;  
  
    /**  
    * @Description: 通过Base64编码将图片转化为字符串  
     *              结合ImageContent和TextContent形成UserMessage一起发送到模型进行处理。  
    * @Auther: zzyybs@126.com  
     *     *测试地址：http://localhost:9006/image/call  
    */    @GetMapping(value = "/image/call")  
    public String readImageContent() throws IOException  
    {  
        String result = null;  
  
        //第一步，图片转码：通过Base64编码将图片转化为字符串  
        byte[] byteArray = resource.getContentAsByteArray();  
        String base64Data = Base64.getEncoder().encodeToString(byteArray);  
  
        //第二步，提示词指定：结合ImageContent和TextContent一起发送到模型进行处理。  
        UserMessage userMessage = UserMessage.from(  
                TextContent.from("从下面图片种获取来源网站名称，股价走势和5月30号股价"),  
                ImageContent.from(base64Data, "image/jpg")  
        );  
        //第三步，API调用：使用OpenAiChatModel来构建请求，并通过chat()方法调用模型。  
        //请求内容包括文本提示和图片，模型会根据输入返回分析结果。  
        ChatResponse chatResponse = chatModel.chat(userMessage);  
  
        //第四步，解析与输出：从ChatResponse中获取AI大模型的回复，打印出处理后的结果。  
        result = chatResponse.aiMessage().text();  
  
        //后台打印  
        System.out.println(result);  
  
        //返回前台  
        return result;  
    }  
}
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-17 18:03">2025-08-17 18:03</span>&nbsp;
<a href="https://www.cnblogs.com/timothy020">Miaops</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19043508);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19043508', targetLink: 'https://www.cnblogs.com/timothy020/p/19043508', title: 'Langchain4j-0-基本概念与依赖导入' })">举报</a>
</div>
        