
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/hubuguilai/p/18924504" title="发布于 2025-06-11 20:38">
    <span role="heading" aria-level="2">压缩感知的感性认识</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="压缩感知的感性认识">压缩感知的感性认识</h2>
<p>压缩感知（Compressed sensing），也被称为压缩采样（Compressive sampling）或稀疏采样（Sparse sampling），是一种寻找欠定线性系统的稀疏解的技术。压缩感知被应用于电子工程尤其是信号处理中，用于获取和重构稀疏或可压缩的信号。这个方法利用信号稀疏的特性，突破了奈奎斯特采样理论，得以从较少的测量值还原出原来整个欲得知的信号。</p>
<p>这种方法的数学理论较为复杂，本文给出一种简易的感性认识压缩感知的思路，抛开各种公式。</p>
<p>先说结论：压缩感知的是在某个域稀疏的信号，在一个不那么稀疏的域中进行欠采样，然后变换到稀疏的域之后，欠采样产生的<strong>混叠可以视作不相干的noise</strong>，然后通过各种算法(soft-thresholding/POCS)恢复出原始信号。</p>
<h3 id="压缩感知的前置知识奈奎斯特采样定律">压缩感知的前置知识———奈奎斯特采样定律</h3>
<p>压缩感知的作用是突破奈奎斯特采样理论，从较少的测量值中还原出原来整个欲得知的信号。</p>
<p>奈奎斯特采样理论：<br>
奈奎斯特采样定理是信号处理和通信领域中最基本的定理之一。它指出，对于一个信号，只要采样频率高于<strong>信号最高频率的两倍</strong>，就可以完全恢复信号的全部信息。</p>
<p>那么，为什么信号的采样频率要高于信号频率的两倍呢？我们来看看如果不能满足这个条件的情况下，会发生什么。</p>
<p>比如我们现在有两个信号：</p>
<p></p><div class="math display">\[f_1(t) = \cos(\pi t) + \cos(2\pi t)
\]</div><p></p><p></p><div class="math display">\[f_2(t) = 2\cos(\pi t)
\]</div><p></p><p><img src="https://img2024.cnblogs.com/blog/2486645/202506/2486645-20250611203520465-1587527584.png" alt="" loading="lazy"></p>
<p>我们现在要对这两个信号进行采样，采样频率分别为：0.5Hz、1Hz、1.5Hz、2.5Hz。</p>
<p>如果我们的采样率为1Hz，那么就会如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/2486645/202506/2486645-20250611203547212-283363700.png" alt="" loading="lazy"></p>
<p>不难发现，在1Hz的采样率情况下，我们采到的两个信号的信息是相同的，也就是意味着我们完全无法区分<span class="math inline">\(f_1(t)\)</span>和<span class="math inline">\(f_2(t)\)</span>。在1Hz的采样率下，我们采到的信号只有直流分量，也就是说与<span class="math inline">\(f(t)=2\)</span>的信息完全相同。在这种情况下，混叠导致的结果是明显<strong>相干</strong>的。如果我们变动采样率，只要采样率无法满足奈奎斯特采样定理，那么我们采到的信号就会有混叠的情况。</p>
<p>同时，我们需要注意，就算采样频率达到了奈奎斯特采样定律，仍然会出现频谱泄漏的现象，这可能需要另开一个blog来说明。因此很多时候对信号进行采样，需要使用信号的采样频率高于信号频率的3-5倍。</p>
<p>而压缩感知则是需要在不满足奈奎斯特采样定律的情况下来获取信号的信息，也就是说我们不单无法高于信号频率的3-5倍，还要低于奈奎斯特采样定律的最低要求高于信号频率的两倍。</p>
<h3 id="压缩感知的思路">压缩感知的思路</h3>
<p>压缩感知则是如果现在我们有一个稀疏的信号，比如一个在时域连续的一维信号，但经过傅立叶变换后只有5个频率分量，在0-128内，并且是稀疏的。那么在这种情况下，我们如果需要按照奈奎斯特采样定律在时域进行采样，我们就需要采样128个点。但是有了压缩感知方法之后，是不需要在时域采样128个点的。</p>
<p>上文已经给出了一个案例，在<span class="math inline">\(f_1(t)\)</span>和<span class="math inline">\(f_2(t)\)</span>中，我们必须要满足奈奎斯特采样定律，因为<span class="math inline">\(f_1(t)\)</span>和<span class="math inline">\(f_2(t)\)</span>在频率领域仍然是稠密的。</p>
<p>我们构造一个频域仅含5个非零分量的稀疏信号，如下所示：<br>
<img src="https://img2024.cnblogs.com/blog/2486645/202506/2486645-20250611203602853-1920419955.png" alt="" loading="lazy"></p>
<p>然后我们现在进行50%的欠采样，如下所示：<br>
<img src="https://img2024.cnblogs.com/blog/2486645/202506/2486645-20250611203615113-1446981956.png" alt="" loading="lazy"></p>
<p>不难发现，在随机欠采样之后，我们得到的频域信号类似于在原始的信号中加入了噪声，这就是我们在稀疏信号中进行随机欠采样的效果。这种情况下，我们的混叠可以视作<strong>不相干的noise</strong>，就可以使用去噪的方法来恢复出原始信号。</p>
<p>这里展示使用soft-thresholding算法来恢复出原始信号，如下所示：</p>
<p>soft-thresholding:</p>
<p></p><div class="math display">\[x_{soft} = \text{sign}(x) \max(|x| - \lambda, 0)
\]</div><p></p><p>其中，<span class="math inline">\(\lambda\)</span>是一个阈值，用于控制软阈值化的强度。<br>
<img src="https://img2024.cnblogs.com/blog/2486645/202506/2486645-20250611203627613-150014488.png" alt="" loading="lazy"></p>
<p>25%的欠采样：<br>
<img src="https://img2024.cnblogs.com/blog/2486645/202506/2486645-20250611203635948-1031631844.png" alt="" loading="lazy"></p>
<p>25%的欠采样使用soft-thresholding算法来恢复出原始信号，如下所示：<br>
<img src="https://img2024.cnblogs.com/blog/2486645/202506/2486645-20250611203646783-1946687146.png" alt="" loading="lazy"></p>
<p>同时，我们可以关注欠采样的mask的傅立叶变换，看看他与全采样的情况下的傅立叶变换的区别，全采样的情况下频域是<span class="math inline">\(Sa\)</span>函数(或者叫<span class="math inline">\(sinc\)</span>函数)。<br>
<img src="https://img2024.cnblogs.com/blog/2486645/202506/2486645-20250611203654479-2098786836.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/2486645/202506/2486645-20250611203702709-224402982.png" alt="" loading="lazy"></p>
<p>时域乘mask相当于在频域中与mask的频域进行卷积，因此就算是全采样的信号，也会有频谱泄漏(未来可能再开一个blog来介绍)的现象，如下图所示：<br>
<img src="https://img2024.cnblogs.com/blog/2486645/202506/2486645-20250611203710364-734165441.png" alt="" loading="lazy"></p>
<p>在这种情况下也可以使用soft-thresholding算法:<br>
<img src="https://img2024.cnblogs.com/blog/2486645/202506/2486645-20250611203723493-686625432.png" alt="" loading="lazy"></p>
<h3 id="总结">总结</h3>
<p>压缩感知的本质是在一个不那么稀疏的域中进行欠采样，然后变换到稀疏的域之后，欠采样产生的混叠可以视作<strong>不相干的noise</strong>，然后通过各种算法(soft-thresholding/POCS)恢复出原始信号。</p>
<p>压缩感知在实际中的应用：MRI重建、音频压缩等等，具体应用场景不在此赘述。</p>
<p>本blog的实现代码在<a href="https://github.com/Hubuguilai/compressedSensingBlog" target="_blank" rel="noopener nofollow">compressedSensingBlog</a>代码：<a href="https://github.com/Hubuguilai/compressedSensingBlog" target="_blank" rel="noopener nofollow">https://github.com/Hubuguilai/compressedSensingBlog</a><br>
，如有兴趣可访问并帮忙点点star。</p>
<p>参考：<br>
[1] Donoho D L. Compressed sensing[J]. IEEE Transactions on information theory, 2006, 52(4): 1289-1306.<br>
[2] 压缩感知理论与应用, 机械工业出版社, 2019.<br>
[3] <a href="https://web.stanford.edu/class/ee369c/" target="_blank" rel="noopener nofollow">https://web.stanford.edu/class/ee369c/</a><br>
[4] 形象易懂讲解算法II——压缩感知 - 咚懂咚懂咚的文章 - 知乎<br>
<a href="https://zhuanlan.zhihu.com/p/22445302" target="_blank" rel="noopener nofollow">https://zhuanlan.zhihu.com/p/22445302</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-11 20:38">2025-06-11 20:38</span>&nbsp;
<a href="https://www.cnblogs.com/hubuguilai">胡不归来</a>&nbsp;
阅读(<span id="post_view_count">1</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18924504);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18924504', targetLink: 'https://www.cnblogs.com/hubuguilai/p/18924504', title: '压缩感知的感性认识' })">举报</a>
</div>
        