
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/IwishIcould/p/19039395" title="发布于 2025-08-17 16:19">
    <span role="heading" aria-level="2">使用URLSearchParams 优雅的获取URL携带的参数</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h4 id="需求描述">需求描述</h4>
<p>今天遇见一个问题，再请求接口的时候。<br>
需要知道返回来的url中某个参数的值与返回来的数据是否匹配。<br>
因此我们需要获取URL携带的参数的参数值。<br>
我知道这个需求对很多小伙伴来说，非常简单。三下五除二就写下了如下的代码</p>
<h4 id="获取url地址栏中的参数">获取url地址栏中的参数</h4>
<p>思路如下：<br>
1，通过string.split方法通过?分割成为2部分，得到aaa=newList&amp;regionDd=12345&amp;user=zhangsan<br>
2，然后在通过 &amp; 分割成为2部分，得到aaa=newList， regionDd=12345， user=zhangsan<br>
3，最后在通过 = 分割成为key:value的形式</p>
<pre><code>const responseURL  = "http://localhost:8088/list/query-list/?aaa=newList&amp;regionDd=12345&amp;user=zhangsan"
// 上面这个字符串，我想获取到aaa的值是 newList。应该如何实现
function parseUrlParams(url,keyName) {
  const queryString = url.split('?')[1];
  if (!queryString) return undefined;
  const params = {};
  const pairs = queryString.split('&amp;');
  console.log('pairs', pairs)
  for (let pairItem of pairs) {
    const [key, value] = pairItem.split('=');
    params[decodeURIComponent(key)] = decodeURIComponent(value || '');
  }
  return params[keyName];
}

console.log(parseUrlParams(responseURL,'user'))
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1425695/202508/1425695-20250815122717271-1441733036.png" alt="image" loading="lazy"></p>
<h4 id="decodeuricomponent-的作用">decodeURIComponent 的作用</h4>
<p>有的小伙伴看见我使用了decodeURIComponent，想知道decodeURIComponent的作用？<br>
decodeURIComponent 的作用是 将 URL 编码后的参数名和参数值还原为人类可读的原始字符。<br>
确保解析后的参数值符合预期。<br>
具体说明:<br>
URL 中某些特殊字符（如空格、&amp;, =, 中文等）会被编码成 % 开头的格式（例如空格变成 %20，中文可能变成 %E4%B8%AD）。<br>
decodeURIComponent 兼容性非常好。</p>
<h4 id="encodeuricomponent-的作用说明">encodeURIComponent 的作用说明</h4>
<p>假设 URL 是：</p>
<pre><code>"http://example.com?user=abc%20test&amp;name=%E5%BC%A0%E4%B8%89"
</code></pre>
<p>原始参数值：</p>
<pre><code>user = abc test
name= '张三'
</code></pre>
<p>未解码的结果</p>
<pre><code>{user: 'abc%20test', name: '%E5%BC%A0%E4%B8%89'}
</code></pre>
<p>使用 decodeURIComponent 解码后：</p>
<pre><code>{user: 'abc test', name: '张三'}
</code></pre>
<h4 id="urlsearchparams-的简单说明">URLSearchParams 的简单说明</h4>
<p>除了使用上面的方法，其实还有一个方法可以更加优雅的实现。<br>
掌声有请我们今天的主角。URLSearchParams 闪亮登场。<br>
URLSearchParams 是 ECMAScript 2015(ES6)引入的内置对象，用于解析和操作 URL 中的查询参数（即 URL 地址栏中 "?" 后面的部分）<br>
URLSearchParams 是浏览器原生 API，能自动处理 URL 编码（如 %20 转空格）。<br>
通过 .get(name) 获取参数值，若参数不存在则返回 null<br>
如果 URL 中存在多个同名参数（如 dim=abc&amp;dim=cvm）, get() 会返回第一个值abc<br>
params.set(key, value) 如果key不存在就是新增参数，如果key存在就是修改参数值<br>
params.del(key) 删除某个参数</p>
<h4 id="urlsearchparams-新增修改删除参数">URLSearchParams 新增，修改，删除参数</h4>
<pre><code>const responseURL  = "http://example.com?user=abc%20test&amp;name=%E5%BC%A0%E4%B8%89"
const queryString = responseURL.split('?')[1];
if(queryString){
  const params = new URLSearchParams(queryString);
  // name存在，更改参数
  params.set('name', '华佗'); 
  // sex不存在，设置新的参数  
  params.set('sex', '男'); 
  // 删除user这个参数
  params.delete('user')
  console.log(22, params)
}
</code></pre>
<h4 id="使用-urlsearchparams-解析参数">使用 URLSearchParams 解析参数</h4>
<pre><code>// url还是之前那个参数
const responseURL  = "http://example.com?user=abc%20test&amp;name=%E5%BC%A0%E4%B8%89"
function parseUrlParams(url) {
  // 分割出查询参数部分
  const queryString = url.split('?')[1];
  if (!queryString) return undefined;
 
  // 使用 URLSearchParams 解析参数
  const params = new URLSearchParams(queryString);
  // 直接获取 user 参数值
  return params.get('user'); // 返回 "abc test"
}
console.log(parseUrlParams(responseURL))
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1425695/202508/1425695-20250815123140030-1610309926.png" alt="image" loading="lazy"></p>
<h4 id="urlsearchparams浏览器的兼容性">URLSearchParams浏览器的兼容性</h4>
<p>Chrome 49+<br>
Firefox 18+<br>
Edge 14+<br>
Safari 10.1+<br>
Opera 36+<br>
以上支持。<br>
不支持：Internet Explorer 全系列（包括 IE11）</p>
<h4 id="兼容性处理">兼容性处理</h4>
<pre><code>const responseURL  = "http://localhost:8088/list/query-list/?aaa=newList&amp;regionDd=12345&amp;user=zhangsan"
function parseUrlParams(url, keyName) {
  try {
    const queryString = url.split('?')[1];
    if (!queryString) return undefined;
    
    // 优先使用原生 API
    if (window.URLSearchParams) {
      return new URLSearchParams(queryString).get(keyName);
    }
    // 兼容旧版浏览器的解析方案
    const params = {};
    queryString.split('&amp;').forEach(pairItem =&gt; {
      const [key, value] = pairItem.split('=');
      params[decodeURIComponent(key)] = decodeURIComponent(value || '');
    });
    return params[keyName];
  } catch (e) {
    console.error('URL 解析失败:', e);
    return undefined;
  }
}
console.log(parseUrlParams(responseURL, 'aaa'));
</code></pre>
<h4 id="尾声">尾声</h4>
<p>大佬们，怎么如果你觉得写得不错，请给我鼓励。如：打赏，推荐。</p>

</div>
<div id="MySignature" role="contentinfo">
    <div style="width:818px;background:#f5f5f5; padding: 10px 10px 10px 10px; border: 1px dashed rgb(224, 224, 224); font-family: 微软雅黑; font-size: 13px;">
            <h1 style="font-size: 24px;"> 遇见问题，这是你成长的机会，如果你能够解决，这就是收获。 </h1>
		    <div style="padding:10px">
		        作者：<a href="https://www.cnblogs.com/IwishIcould/" target="_blank">晚来南风晚相识</a> <br>
		        出处：<a href="https://www.cnblogs.com/IwishIcould/">https://www.cnblogs.com/IwishIcould/</a> <br>
                        <p> 想问问题，打赏了卑微的博主，求求你备注一下的扣扣或者微信；这样我好联系你；(っ•̀ω•́)っ✎⁾⁾！</p>
		        <p>如果觉得这篇文章对你有小小的帮助的话，记得在右下角点个“推荐”哦，或者关注博主，在此感谢！</p>
		        <p> 万水千山总是情，打赏5毛买辣条行不行，所以如果你心情还比较高兴，也是可以扫码打赏博主(っ•̀ω•́)っ✎⁾⁾！</p>
                        <p> 想问问题，打赏了卑微的博主，求求你备注一下的扣扣或者微信；这样我好联系你；(っ•̀ω•́)っ✎⁾⁾！</p>
				<div style="display: flex;">
					<div style="margin-right: 100px;text-align: center;">
						<img src="//images.cnblogs.com/cnblogs_com/IwishIcould/1900124/t_201214043958支付宝收款码.jpg?a=1607924145179">
						<div>
							支付宝
						</div>
					</div>
					<div style="text-align: center;">
						<img src="//images.cnblogs.com/cnblogs_com/IwishIcould/1900124/t_20121604194271E6E296CCB71A007F4E22073D5EB64A.jpg">
						<div>微信</div>
					</div>
				</div>
		        本文版权归作者所有，欢迎转载，未经作者同意须保留此段声明，在文章页面明显位置给出原文连接 <br>
		        如果文中有什么错误，欢迎指出。以免更多的人被误导。 <br>
               
		    </div>
           
            
		</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-17 16:20">2025-08-17 16:19</span>&nbsp;
<a href="https://www.cnblogs.com/IwishIcould">南风晚来晚相识</a>&nbsp;
阅读(<span id="post_view_count">61</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19039395);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19039395', targetLink: 'https://www.cnblogs.com/IwishIcould/p/19039395', title: '使用URLSearchParams 优雅的获取URL携带的参数' })">举报</a>
</div>
        