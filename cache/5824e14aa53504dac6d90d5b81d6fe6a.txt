
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/powertoolsteam/p/18944095" title="发布于 2025-06-23 12:02">
    <span role="heading" aria-level="2">基于 Spread，在 Blazor 框架中导入 / 导出 Excel</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="引言">引言</h2>
<p>在现代 Web 应用开发中，处理 Excel 文件的导入和导出是一项常见且重要的需求。Blazor 框架是微软推出的用于构建具有 .NET 强大功能的交互式客户端 Web UI 的相对较新的框架。而 Spread.net（是一个非常强大且可扩展的 JavaScript 电子表格组件，它能使在 Blazor 框架中进行 Excel 文件的导入和导出变得更加简单。本文将详细介绍如何基于 SpreadJS，在 Blazor 框架中实现 Excel 文件的导入和导出功能。<br>
<img src="https://img2024.cnblogs.com/blog/139239/202506/139239-20250623120200865-1212071433.png" alt="" loading="lazy"></p>
<h3 id="blazor-框架与-spreadjs-简介">Blazor 框架与 SpreadJS 简介</h3>
<p>Blazor 框架允许开发者使用 .NET 构建交互式 Web UI，一个常见的应用场景是将现有的 Excel 文件导入 Blazor 应用程序，将电子表格数据呈现给用户，并支持在线 Excel 编辑。用户可以对表格进行各种操作和修改，之后可以将数据再次导出为 Excel 文件或将其保存到数据库。通过 Blazor + WebAssembly，还能在前端以更高的性能处理大型 Excel 文件。</p>
<p><a href="https://www.grapecity.com.cn/developer/spreadjs" target="_blank" rel="noopener nofollow">SpreadJS</a> 则为实现这一过程提供了强大支持，它能够简化 Excel 文件处理的复杂性，让开发者更便捷地实现所需功能。</p>
<h3 id="在-blazor-中使用-spreadjs-的准备工作">在 Blazor 中使用 SpreadJS 的准备工作</h3>
<h4 id="创建-spreadjs-blazor-组件">创建 SpreadJS Blazor 组件</h4>
<p>在将 SpreadJS 集成到 Blazor 应用程序之前，需要创建一个 Blazor 组件来封装 SpreadJS 前端组件。具体步骤如下：</p>
<ol>
<li><strong>创建 Razor 类库</strong>：使用 Visual Studio 2022，创建一个名为 “SpreadJS_Blazor_Lib” 的 Razor 类库项目。</li>
<li><strong>配置项目</strong>：将 SpreadJS 相关的 JS 和 CSS 文件复制到 “wwwroot” 文件夹。同时，编辑 “exampleJSInterop.js” 文件，添加有助于将 C# 代码对接 SpreadJS 的 JavaScript 代码逻辑，示例代码如下：</li>
</ol>
<pre><code class="language-javascript">window.sjsAdaptor = {
    init: function (host, config) {
        if (config.hostStyle) {
            var hostStyle = config.hostStyle;
            var styles = hostStyle.split(';');
            styles.forEach((styleStr) =&gt; {
                var style = styleStr.split(':');
                host.style[style[0]] = style[1];
            });
            delete config.hostStyle;
        }
        return new GC.Spread.Sheets.Workbook(host, config);
    },
    setValue: function (host, sheetIndex, row, col, value) {
        var spread = GC.Spread.Sheets.findControl(host);
        if (spread) {
            var sheet = spread.getSheet(sheetIndex);
            sheet.setValue(row, col, value);
        }
    },
    openExcel: function (host, inputFile) {
        var spread = GC.Spread.Sheets.findControl(host);
        if (spread) {
            var excelIO = new GC.Spread.Excel.IO();
            excelIO.open(inputFile.files[0], function (json) {
                spread.fromJSON(json);
            })
        }
    }
};
</code></pre>
<ol>
<li><strong>重命名组件文件</strong>：将默认的 “Component1.razor” 文件重命名为 “SpreadJS.razor”，作为包装器组件，示例代码如下：</li>
</ol>
<pre><code class="language-razor">@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
&lt;div @ref="host"&gt;&lt;/div&gt;
@code {
    [Parameter]
    public int SheetCount { get; set; }
    [Parameter]
    public string HostStyle { get; set; }
    private ElementReference host;
    public void setValue(int sheetIndex, int row, int col, object value)
    {
        JSRuntime.InvokeVoidAsync("sjsAdaptor.setValue", host, sheetIndex, row, col, value);
    }
    public void OpenExcel(ElementReference inputFile)
    {
        JSRuntime.InvokeVoidAsync("sjsAdaptor.openExcel", host, inputFile);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("sjsAdaptor.init", host, new Dictionary&lt;string, object&gt;() {
                { "sheetCount", SheetCount},
                { "hostStyle", HostStyle }
            });
        }
    }
}
</code></pre>
<h4 id="创建-blazor-应用程序并集成组件">创建 Blazor 应用程序并集成组件</h4>
<ol>
<li><strong>添加新项目</strong>：使用 “Blazor WebAssemblyApp” 模板添加一个新项目。</li>
<li><strong>添加项目引用</strong>：在解决方案资源管理器中右键单击新项目的依赖项，选择 “添加项目引用”，添加之前创建的 “SpreadJS_Blazor_Lib” 组件。</li>
<li><strong>编辑 Index.razor 文件</strong>：设置 HTML 的代码隐藏，示例代码如下：</li>
</ol>
<pre><code class="language-razor">@page "/"
@using SpreadJS_Blazor_Lib
&lt;h1&gt;Hello, SpreadJS!&lt;/h1&gt;
&lt;SpreadJS SheetCount="3" HostStyle="@HostStyle" /&gt;
@code {
    private string HostStyle { get; set; } = "width:90wh;height:70vh;border: 1px solid darkgray";
}
</code></pre>
<p>2.<strong>编辑 index.html 文件</strong>：添加对 SpreadJS JavaScript 和 CSS 文件的引用，示例代码如下：</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8" /&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" /&gt;
    &lt;title&gt; BlazorApp1&lt;/title&gt;
    &lt;base href="/" /&gt;
    &lt;link href="css/bootstrap/bootstrap.min.css" rel="stylesheet" /&gt;
    &lt;link href="css/app.css" rel="stylesheet" /&gt;
    &lt;link href="https://cdn.grapecity.com/spreadjs/hosted/css/gc.spread.sheets.excel2013white.16.0.5.css" rel="stylesheet" /&gt;
    &lt;script type="text/javascript" src="https://cdn.grapecity.com/spreadjs/hosted/scripts/gc.spread.sheets.all.16.0.5.min.js"&gt; &lt;/script&gt;
    &lt;script type="text/javascript" src="https://cdn.grapecity.com/spreadjs/hosted/scripts/plugins/gc.spread.sheets.charts.16.0.5.min.js"&gt; &lt;/script&gt;
    &lt;script type="text/javascript" src="https://cdn.grapecity.com/spreadjs/hosted/scripts/plugins/gc.spread.sheets.shapes.16.0.5.min.js"&gt; &lt;/script&gt;
    &lt;script type="text/javascript" src="https://cdn.grapecity.com/spreadjs/hosted/scripts/plugins/gc.spread.sheets.slicers.16.0.5.min.js"&gt; &lt;/script&gt;
    &lt;script type="text/javascript" src="https://cdn.grapecity.com/spreadjs/hosted/scripts/plugins/gc.spread.sheets.print.16.0.5.min.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="https://cdn.grapecity.com/spreadjs/hosted/scripts/plugins/gc.spread.sheets.barcode.16.0.5.min.js"&gt; &lt;/script&gt;
    &lt;script type="text/javascript" src="https://cdn.grapecity.com/spreadjs/hosted/scripts/plugins/gc.spread.sheets.pdf.16.0.5.min.js"&gt; &lt;/script&gt;
    &lt;script type="text/javascript" src="https://cdn.grapecity.com/spreadjs/hosted/scripts/plugins/gc.spread.sheets.tablesheet.16.0.5.min.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="https://cdn.grapecity.com/spreadjs/hosted/scripts/interop/gc.spread.excelio.16.0.5.min.js"&gt; &lt;/script&gt;
    &lt;script src="_content/SJS_Blazor_Lib/exampleJsInterop.js" type="text/javascript"&gt; &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;app&gt;Loading...&lt;/app&gt;
    &lt;div id="blazor-error-ui"&gt;
        An unhandled error has occurred.
        &lt;a href="" class="reload"&gt;Reload&lt;/a&gt;
        &lt;a class="dismiss"&gt;??&lt;/a&gt;
    &lt;/div&gt;
    &lt;script src="_framework/blazor.webassembly.js"&gt; &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<ol>
<li><strong>进一步编辑 Index.razor 文件</strong>：添加输入框和按钮，用于操作表格和导入 Excel 文件，示例代码如下：</li>
</ol>
<pre><code class="language-razor">@page "/"
@using SJS_Blazor_Lib
&lt;h1&gt;Hello, SpreadJS!&lt;/h1&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;label&gt;Sheet Index&lt;/label&gt;
            &lt;input @bind-value="@SheetIndex" /&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;label&gt;Row Index&lt;/label&gt;
            &lt;input @bind-value="@Row" /&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;label&gt;Column Index&lt;/label&gt;
            &lt;input @bind-value="@Column" /&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;lable&gt;Value&lt;/lable&gt;
            &lt;input @bind-value="@Value" /&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;button @onclick="doSomething"&gt;Update Text&lt;/button&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;input type="file" @ref="inputFileEle" /&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;button @onclick="ImportExcel"&gt;Import File&lt;/button&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;br /&gt;
&lt;SpreadJS SheetCount="3" HostStyle="@HostStyle" @ref="ss" /&gt;
@code {
    private SpreadJS ss;
    private ElementReference inputFileEle;
    public int SheetIndex { get; set; } = 0;
    public int Row { get; set; } = 0;
    public int Column { get; set; } = 0;
    public string Value { get; set; } = "";
    private string HostStyle { get; set; } = "width:90wh;height:70vh;border: 1px solid darkgray";
    private void doSomething()
    {
        ss.setValue(SheetIndex, Row, Column, Value);
    }
    private void ImportExcel()
    {
        ss.OpenExcel(inputFileEle);
    }
}
</code></pre>
<h3 id="在-blazor-应用中实现-excel-导入和导出功能">在 Blazor 应用中实现 Excel 导入和导出功能</h3>
<h4 id="excel-导入">Excel 导入</h4>
<p>在上述代码基础上，通过编辑 Index.razor 文件，添加用于选定并打开 Excel 文件的代码，即可实现 Excel 文件的导入。由于前面已经在 “SpreadJS_Blazor_Lib” 项目中的 “SpreadJS.razor” 和 “exampleJsInterop.js” 文件中添加了相关代码，所以可以直接使用。示例代码如下：</p>
<pre><code class="language-razor">@page "/"
@using SpreadJS_Blazor_Lib
&lt;h1&gt;Hello, SpreadJS!&lt;/h1&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;label&gt;Sheet Index&lt;/label&gt;
            &lt;input @bind-value="@SheetIndex" /&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;label&gt;Row Index&lt;/label&gt;
            &lt;input @bind-value="@Row" /&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;label&gt;Column Index&lt;/label&gt;
            &lt;input @bind-value="@Column" /&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;lable&gt;Value&lt;/lable&gt;
            &lt;input @bind-value="@Value" /&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;button @onclick="doSomething"&gt;Update Text&lt;/button&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;input type="file" @ref="inputFileEle" @onchange="ImportExcel" /&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;br /&gt;
&lt;SpreadJS SheetCount="3" HostStyle="@HostStyle" @ref="ss" /&gt;
@code {
    private SpreadJS ss;
    private ElementReference inputFileEle;
    public int SheetIndex { get; set; } = 0;
    public int Row { get; set; } = 0;
    public int Column { get; set; } = 0;
    public string Value { get; set; } = "";
    private string HostStyle { get; set; } = "width:90wh;height:70vh;border: 1px solid darkgray";
    private void doSomething()
    {
        ss.setValue(SheetIndex, Row, Column, Value);
    }
    private void ImportExcel()
    {
        ss.OpenExcel(inputFileEle);
    }
}
</code></pre>
<h4 id="excel-导出">Excel 导出</h4>
<p>要实现 Excel 文件的导出功能，需要进行以下操作：</p>
<ol>
<li><strong>修改 exampleJsInterop.js 文件</strong>：添加保存 Excel 文件的函数，示例代码如下：</li>
</ol>
<pre><code class="language-javascript">window.sjsAdaptor = {
    // 原有代码...
    saveExcel: function (host) {
        var spread = GC.Spread.Sheets.findControl(host);
        if (spread) {
            var json = spread.toJSON();
            var excelIO = new GC.Spread.Excel.IO();
            excelIO.save(json, function (blob) {
                saveAs(blob, "export.xlsx");
            }, function (e) {
                console.log(e);
            });
        }
    }
};
</code></pre>
<p>2.<strong>修改 index.html 文件</strong>：添加对 FileSaver 库的引用，示例代码如下：</p>
<pre><code class="language-html">&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.0/FileSaver.min.js"&gt;&lt;/script&gt;
</code></pre>
<p>3.<strong>修改 Index.razor 文件</strong>：添加导出按钮和导出函数调用，示例代码如下：</p>
<p>razor</p>
<pre><code class="language-razor">@page "/"
@using SpreadJS_Blazor_Lib
&lt;h1&gt;Hello, SpreadJS!&lt;/h1&gt;
&lt;table&gt;
    &lt;!-- 原有代码... --&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;button @onclick="ExportExcel"&gt;Export File&lt;/button&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;br /&gt;
&lt;SpreadJS SheetCount="3" HostStyle="@HostStyle" @ref="ss" /&gt;
@code {
    // 原有代码...
    private void ExportExcel()
    {
        ss.SaveExcel();
    }
}
</code></pre>
<ol>
<li><strong>修改 SpreadJS.razor 文件</strong>：添加指向 “exampleJsInterop.js” 文件中保存 Excel 函数的代码，示例代码如下：</li>
</ol>
<pre><code class="language-razor">@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
&lt;div @ref="host"&gt;&lt;/div&gt;
@code {
    // 原有代码...
    public void SaveExcel()
    {
        JSRuntime.InvokeVoidAsync("sjsAdaptor.saveExcel", host);
    }
    // 原有代码...
}
</code></pre>
<h2 id="结论">结论</h2>
<p>通过以上步骤，我们成功地基于 SpreadJS，在 Blazor 框架中实现了 Excel 文件的导入和导出功能。利用 SpreadJS 的强大功能和 Blazor 框架的 .NET 支持，开发者可以更便捷地处理 Excel 文件，满足 Web 应用中常见的 Excel 数据交互需求。如果你想尝试该功能或查看 SpreadJS 的其他惊人功能，可前往葡萄城官网立即下载试用版。</p>
<p><a href="https://www.grapecity.com.cn/developer/spreadjs" target="_blank" rel="noopener nofollow">SpreadJS，可嵌入您系统的在线 Exce</a>l</p>

</div>
<div id="MySignature" role="contentinfo">
    <hr>
<br>
<p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">本文是由葡萄城技术开发团队发布，转载请注明出处：<a href="https://www.grapecity.com.cn/" target="_blank">葡萄城官网</a></p>
<!--p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">了解企业级低代码开发平台，请前往<a href="https://www.grapecity.com.cn/solutions/huozige" target="_blank">活字格</a>
</p><p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">了解可嵌入您系统的在线 Excel，请前往<a href="https://www.grapecity.com.cn/developer/spreadjs" target="_blank">SpreadJS纯前端表格控件</a></p>
<p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">了解嵌入式的商业智能和报表软件，请前往<a href="https://www.grapecity.com.cn/solutions/wyn" target="_blank">Wyn Enterprise
</a></p-->

<br>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-23 12:02">2025-06-23 12:02</span>&nbsp;
<a href="https://www.cnblogs.com/powertoolsteam">葡萄城技术团队</a>&nbsp;
阅读(<span id="post_view_count">6</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18944095);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18944095', targetLink: 'https://www.cnblogs.com/powertoolsteam/p/18944095', title: '基于 Spread，在 Blazor 框架中导入 / 导出 Excel' })">举报</a>
</div>
        