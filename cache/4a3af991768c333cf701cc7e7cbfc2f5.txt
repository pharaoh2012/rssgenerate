
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Tomorrowland/p/18677571" title="发布于 2025-01-17 19:35">
    <span role="heading" aria-level="2">Java中StringBuilder类常用的几个方法</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="stringbuilder类">StringBuilder类</h2>
<p><code>StringBuilder</code> 类是 Java 中用于处理可变字符串的类，它提供了在字符串内部进行修改的方法，相比之下，<code>String</code> 类是不可变的，每次对字符串做修改都会创建一个新的字符串对象。因此，如果需要频繁对字符串进行修改操作，使用 <code>StringBuilder</code> 类会更加高效。</p>
<p>以下是 <code>StringBuilder</code> 类的一些常见方法：</p>
<ol>
<li>
<p><strong><code>append(String str)</code></strong>：将指定字符串追加到当前 <code>StringBuilder</code> 对象的末尾。</p>
</li>
<li>
<p><strong><code>insert(int offset, String str)</code></strong>：在指定位置插入指定字符串。</p>
</li>
<li>
<p><strong><code>delete(int start, int end)</code></strong>：删除从起始位置到结束位置（不包括结束位置）的子串。</p>
</li>
<li>
<p><strong><code>deleteCharAt(int index)</code></strong>：删除指定位置的字符。</p>
</li>
<li>
<p><strong><code>replace(int start, int end, String str)</code></strong>：用指定字符串替换从起始位置到结束位置的子串。</p>
</li>
<li>
<p><strong><code>reverse()</code></strong>：反转当前 <code>StringBuilder</code> 对象中的字符序列。</p>
</li>
<li>
<p><strong><code>length()</code></strong>：返回当前字符序列的长度。</p>
</li>
<li>
<p><strong><code>charAt(int index)</code></strong>：返回指定索引位置的字符。</p>
</li>
<li>
<p><strong><code>substring(int start)</code></strong> 和 <strong><code>substring(int start, int end)</code></strong>：用于获取子字符串，可以传递开始位置和结束位置。</p>
</li>
<li>
<p><strong><code>toString()</code></strong>：将 <code>StringBuilder</code> 对象转换为一个普通的不可变的 <code>String</code> 对象。</p>
</li>
</ol>
<p>由于 <code>StringBuilder</code> 是可变的，可以对其进行多次修改操作而不必每次都创建新的对象，因此在需要频繁更改字符串内容的场景下，使用 <code>StringBuilder</code> 类可以提高效率。</p>
<p>以下是StringBuilder类的这些方法的具体使用示例：</p>
<h3 id="各种方法的使用示例">各种方法的使用示例</h3>
<p>下面是对 <code>StringBuilder</code> 中列出的方法的详细介绍和常见使用：</p>
<ol>
<li>
<p><strong><code>append(String str)</code></strong>：</p>
<ul>
<li>
<p><strong>常用场景：</strong> 用于在当前字符串的末尾追加指定字符串。</p>
</li>
<li>
<p><strong>示例用法：</strong></p>
<pre><code class="language-java">StringBuilder sb = new StringBuilder("Hello");
sb.append(" World");
System.out.println(sb.toString()); // 输出：Hello World
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong><code>insert(int offset, String str)</code></strong>：</p>
<ul>
<li>
<p><strong>常用场景：</strong> 在指定的位置插入字符串。</p>
</li>
<li>
<p><strong>示例用法：</strong></p>
<pre><code class="language-java">StringBuilder sb = new StringBuilder("Hello");
sb.insert(5, " World");
System.out.println(sb.toString()); // 输出：Hello World
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong><code>delete(int start, int end)</code></strong>：</p>
<ul>
<li>
<p><strong>常用场景：</strong> 从起始位置到结束位置（不包括结束位置）删除子串。</p>
</li>
<li>
<p><strong>示例用法：</strong></p>
<pre><code class="language-java">StringBuilder sb = new StringBuilder("Hello World");
sb.delete(5, 11);
System.out.println(sb.toString()); // 输出：Hello
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong><code>deleteCharAt(int index)</code></strong>：</p>
<ul>
<li>
<p><strong>常用场景：</strong> 删除指定位置的字符。</p>
</li>
<li>
<p><strong>示例用法：</strong></p>
<pre><code class="language-java">StringBuilder sb = new StringBuilder("Hello");
sb.deleteCharAt(1);
System.out.println(sb.toString()); // 输出：Helo
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong><code>replace(int start, int end, String str)</code></strong>：</p>
<ul>
<li>
<p><strong>常用场景：</strong> 用指定字符串替换从起始位置到结束位置的子串。</p>
</li>
<li>
<p><strong>示例用法：</strong></p>
<pre><code class="language-java">StringBuilder sb = new StringBuilder("Hello");
sb.replace(1, 4, "i");
System.out.println(sb.toString()); // 输出：Hilo
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong><code>reverse()</code></strong>：</p>
<ul>
<li>
<p><strong>常用场景：</strong> 反转字符串内容。</p>
</li>
<li>
<p><strong>示例用法：</strong></p>
<pre><code class="language-java">StringBuilder sb = new StringBuilder("Hello");
sb.reverse();
System.out.println(sb.toString()); // 输出：olleH
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong><code>length()</code></strong>：</p>
<ul>
<li>
<p><strong>常用场景：</strong> 返回当前字符序列的长度。</p>
</li>
<li>
<p><strong>示例用法：</strong></p>
<pre><code class="language-java">StringBuilder sb = new StringBuilder("Hello");
System.out.println(sb.length()); // 输出：5
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong><code>charAt(int index)</code></strong>：</p>
<ul>
<li>
<p><strong>常用场景：</strong> 返回指定索引位置的字符。</p>
</li>
<li>
<p><strong>示例用法：</strong></p>
<pre><code class="language-java">StringBuilder sb = new StringBuilder("Hello");
System.out.println(sb.charAt(2)); // 输出：l
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong><code>substring(int start)</code> 和 <code>substring(int start, int end)</code></strong>：</p>
<ul>
<li>
<p><strong>常用场景：</strong> 获取子字符串，可根据需要传递开始位置和结束位置。</p>
</li>
<li>
<p><strong>示例用法：</strong></p>
<pre><code class="language-java">StringBuilder sb = new StringBuilder("Hello World");
System.out.println(sb.substring(3)); // 输出：lo World
System.out.println(sb.substring(3, 7)); // 输出：lo W
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong><code>toString()</code></strong>：</p>
<ul>
<li>
<p><strong>常用场景：</strong> 将 <code>StringBuilder</code> 对象转换为一个普通的不可变的 <code>String</code> 对象。</p>
</li>
<li>
<p><strong>示例用法：</strong></p>
<pre><code class="language-java">StringBuilder sb = new StringBuilder("Hello World");
String str = sb.toString();
System.out.println(str); // 输出：Hello World
</code></pre>
</li>
</ul>
</li>
</ol>
<p>使用这些方法，您可以对 <code>StringBuilder</code> 中的字符串进行各种修改操作，从而更高效地处理字符串拼接、删除、替换等操作。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.2299069522199074" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-17 19:35">2025-01-17 19:35</span>&nbsp;
<a href="https://www.cnblogs.com/Tomorrowland">Tomorrowland_D</a>&nbsp;
阅读(<span id="post_view_count">2</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18677571" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18677571);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18677571', targetLink: 'https://www.cnblogs.com/Tomorrowland/p/18677571', title: 'Java中StringBuilder类常用的几个方法' })">举报</a>
</div>
        