
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/linx/p/18922032" title="发布于 2025-06-10 13:51">
    <span role="heading" aria-level="2">Web前端入门第 64 问：JavaScript 几种函数定义方式有什么区别？</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><code>函数</code> 作为 JS 的一等公民，随处可见它的身影。</p>
<p>我理解的它最主要作用就是用来提取重复代码，但凡有 JS 代码需要<strong>复制粘贴</strong>的时候，那么这时候就可以考虑使用函数封装了。</p>
<p>当函数写在对象中的时候，这时候它变了一个名字，称之为 <code>方法</code>。</p>
<h2 id="function-声明">function 声明</h2>
<p>在使用 <code>function</code> 关键字声明函数时，需注意声明提升问题，意思就是 <code>function</code> 声明的函数，不存在先后顺序，任意位置都可以调用。</p>
<pre><code class="language-js">function test() {
  console.log('前端路引');
}
test() // 调用函数
</code></pre>
<p><code>test</code> 就是函数的名字，函数名的规则和变量声明差不多，只要不是数字和特殊字符开头，语法规则都是允许的，包括都可以使用中文定义函数，虽然<strong>不建议</strong>这么使用！</p>
<pre><code class="language-js">function 测试() {
  console.log('前端路引');
}
测试() // 调用函数
</code></pre>
<h3 id="声明提升">声明提升</h3>
<p>function 定义的函数会提升到作用域顶部，所以可以在函数定义之前调用，比如：</p>
<pre><code class="language-js">test() // 此处可以调用 function 声明的函数

const var1 = '前端路引 -- 1'
console.log(var1)

function test() {
  console.log('前端路引 -- 2');
}
</code></pre>
<p>输出：</p>
<pre><code class="language-bash">前端路引 -- 2
前端路引 -- 1
</code></pre>
<p>包括写在 if 判断中的 function 都会提升到作用域顶部，比如：</p>
<pre><code class="language-js">test()
if (false) {
  console.log('前端路引 -- 1'); // 此行代码不会执行
  function test() {
    console.log('前端路引 --2');
  }
}
</code></pre>
<p>输出：</p>
<pre><code class="language-bash">前端路引 -- 2
</code></pre>
<p><strong>所以不建议在条件语句中去使用 function 声明函数！</strong></p>
<h2 id="函数表达式">函数表达式</h2>
<p>函数表达式就是使用一个变量来保存函数，这种写法有个好处是可以控制定义函数的逻辑。</p>
<p>声明方式：</p>
<pre><code class="language-js">const test = function() {
  console.log('前端路引');
}
test()
</code></pre>
<p>表达式声明的函数只能在声明之后调用，如果在声明之前调用，代码会报错：</p>
<pre><code class="language-js">test() // 报错 ReferenceError: test is not defined
const test = function() {
  console.log('前端路引');
}
</code></pre>
<p>使用 var 声明时会报错 <code>TypeError: test is not a function</code>:</p>
<pre><code class="language-js">test() // 报错 TypeError: test is not a function
var test = function() {
  console.log('前端路引');
}
</code></pre>
<p>在 if 中声明的函数表达式，在外部无法调用：</p>
<pre><code class="language-js">if (false) {
  const test = function() {
    console.log('前端路引');
  }
}
test() // 报错 ReferenceError: test is not defined
</code></pre>
<h2 id="箭头函数">箭头函数</h2>
<p>箭头函数的声明与函数表达式有些相似，都需要通过变量保存。</p>
<p>声明方式：</p>
<pre><code class="language-js">const test1 = () =&gt; {
  console.log('前端路引');
}
const test2 = (a, b) =&gt; a + b; // 单行时候可以省略花括号，直接返回值
// 等价于
// const test2 = (a, b) =&gt; {return a + b}
test1() // 输出：前端路引
console.log(test2(1, 2)) // 输出：3
</code></pre>
<p>箭头函数和函数表达式的区别：</p>
<ul>
<li>箭头函数自身没有 <code>this</code> 绑定，继承外层作用域的 <code>this</code>。</li>
</ul>
<pre><code class="language-js">const test1 = function () {
  console.log(this)
}
const test2 = () =&gt; {
  console.log(this)
}
test1.bind({a: '123'})() // 获得对象 {a: '123'}
test2.bind({a: '123'})() // 获得全局对象 window
</code></pre>
<ul>
<li>由于没有 <code>this</code>，所以也无法作为构造函数使用，不能使用 <code>new</code> 实例化。</li>
</ul>
<pre><code class="language-js">const test1 = function () {
  console.log('前端路引')
}
const test2 = () =&gt; {
  console.log('前端路引')
}
new test1()
new test2() // 报错 TypeError: test2 is not a constructor
</code></pre>
<ul>
<li>箭头函数也没有 <code>arguments</code> 对象，所以无法通过 <code>arguments</code> 相关方法，比如 <code>arguments.callee</code> 获取函数自身。</li>
</ul>
<pre><code class="language-js">const test1 = function () {
  console.log(arguments) // 获取到参数对象
}
const test2 = () =&gt; {
  console.log(arguments) // 报错 ReferenceError: arguments is not defined
}
test1('前端路引')
test2('前端路引')
</code></pre>
<h2 id="生成器函数">生成器函数</h2>
<p>ES6 新增的声明方式，常规的业务代码一般很少使用（也可能是我的段位太低~~）。</p>
<pre><code class="language-js">function* test() {
  yield 1;
  yield 2;
}
const temp = test()
console.log(temp.next()) // 输出：{value: 1, done: false}
console.log(temp.next()) // 输出：{value: 2, done: false}
console.log(temp.next()) // 输出：{value: undefined, done: true}
</code></pre>
<p>这种方式可以使用 <code>yield</code> 暂停函数执行，多用于异步迭代场景。</p>
<p>看一个异步使用 <code>yield</code> 例子：</p>
<pre><code class="language-js">function* testAsync() {
  const data = yield new Promise(resolve =&gt; {
    setTimeout(() =&gt; resolve('Hello World'), 1000); // 模拟异步操作
  });
  console.log(data); // 此处的 data 是 next 传入数据，不是 Promise 返回数据
}
 
async function run() {
  const generator = testAsync();
  const result = await generator.next().value; // 等待 Promise
  generator.next(result); // 将结果传递回生成器并继续执行
}
run()
</code></pre>
<h2 id="构造函数-function-声明">构造函数 Function 声明</h2>
<p>虽然<strong>不建议</strong>使用这种声明函数，咱们学习了解一下还是没问题的。</p>
<pre><code class="language-js">const test = new Function('a', 'b', 'return a + b');
console.log(test(1, 2))
</code></pre>
<p>问题：</p>
<p>1、通过字符串动态生成代码，存在安全风险，容易出现代码注入攻击。<br>
2、每次都会解析字符串，性能会比较低。</p>
<h2 id="写在最后">写在最后</h2>
<p><code>函数</code> 作为 JS 语言中的一等公民，几种声明方式区别是面试中的常客，经常被问及 <code>箭头函数</code> 与 <code>function</code> 有哪些区别。</p>
<p><code>函数</code> 是基础，也是函数式编程的核心，必须熟练掌握~~</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>&nbsp;</p>
<p style="font-size: 18px;font-weight: bold;">文章首发于微信公众号【<span style="color:rgb(255, 71, 87)">前端路引</span>】，欢迎 <span style="color:#4ec259">微信扫一扫</span> 查看更多文章。</p>
<p>
  <img style="max-width: 320px;" src="https://images.cnblogs.com/cnblogs_com/linx/2447020/o_250228035031_%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png">
</p>
<p>本文来自博客园，作者：<a href="https://www.cnblogs.com/linx/" target="_blank">前端路引</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/linx/p/18922032" target="_blank">https://www.cnblogs.com/linx/p/18922032</a></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-10 13:51">2025-06-10 13:51</span>&nbsp;
<a href="https://www.cnblogs.com/linx">前端路引</a>&nbsp;
Views(<span id="post_view_count">250</span>)&nbsp;
Comments(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18922032);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18922032', targetLink: 'https://www.cnblogs.com/linx/p/18922032', title: 'Web前端入门第 64 问：JavaScript 几种函数定义方式有什么区别？' })">举报</a>
</div>
	