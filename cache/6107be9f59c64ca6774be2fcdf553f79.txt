
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lradian/p/18866514" title="发布于 2025-05-08 16:14">
    <span role="heading" aria-level="2">共享内存和信号结合练习</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        共享内存和信号结合练习
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>设计三个程序，三个程序申请一块共享内存，并分别映射到各自进程的地址空间，进程A和进程B对共享内存段中的数据进行修改，然后进程B不断输出共享内存段中的数据，实现进程间的互斥，避免竞争。</p>
<pre><code>/********************************************************************************
*
*
* 使用信号对共享内存进行互斥访问
* author：jindouliu2024@163.com 
* date：2025.5.8
* 
*
* Copyright (c)  2024-2025   jindouliu2024@163.com   All right Reserved
* ******************************************************************************/
</code></pre>
<pre><code>//进程A
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;sys/wait.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;errno.h&gt;
#include &lt;time.h&gt;
#include &lt;sys/ipc.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/ipc.h&gt;
#include &lt;sys/shm.h&gt;
char *shm_map;
int id,i=0;
void sig_handler(int signal)
{
	//如果是接受到的信号是SIGUSR1，则执行
	if(signal == SIGUSR1){
		i++;
		//向内存写入数据
		sprintf(shm_map,"shm_a.c data = %d\n",i);
		printf("请输入进程id：");
		scanf("%d",&amp;id);
		//给进程B发送信号
		kill(id,SIGUSR2);
	}

}
int main()
{
	
	//设置键值
	key_t key = ftok(".",2);
	//创建一块共享内存空间
	int shm_id = shmget(key,256,IPC_CREAT|IPC_EXCL|0644);
	if(shm_id == -1){
		printf("shmget error\n");
		shm_id = shmget(key,256,0644);
		
	}
	
	//连接映射空间，并写入数据
	shm_map = (char *)shmat(shm_id,NULL,0);
	printf("running a\n");
	
	
	signal(SIGUSR1,sig_handler);
	while(1);
	
	
	return 0;
}
</code></pre>
<pre><code>//进程B

#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;sys/wait.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;errno.h&gt;
#include &lt;time.h&gt;
#include &lt;sys/ipc.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/ipc.h&gt;
#include &lt;sys/shm.h&gt;
char *shm_map;
int id;
//信号处理函数
void sig_handler(int signal)
{
	//如果是接受到的信号是SIGUSR2，则执行
	if(signal == SIGUSR2){
		//从内存中读取数据
		printf("%s\n",shm_map);
	}
	printf("请输入进程id：");
	scanf("%d",&amp;id);
	//给进程A或者进程B发送信号
	kill(id,SIGUSR1);

}
int main()
{
	//设置键值
	key_t key = ftok(".",2);
	//创建一块共享内存空间
	int shm_id = shmget(key,256,IPC_CREAT|IPC_EXCL|0644);
	if(shm_id == -1){
		printf("shmget error\n");
		shm_id = shmget(key,256,0644);
		
	}
	//连接映射空间，并读取数据
	shm_map = (char *)shmat(shm_id,NULL,0);
	printf("请输入进程id：");
	scanf("%d",&amp;id);
	kill(id,SIGUSR1);
	signal(SIGUSR2,sig_handler);
	while(1){
		
	}
	
	shmdt(shm_map);
	return 0;
}
</code></pre>
<pre><code>//进程C
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;sys/wait.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;errno.h&gt;
#include &lt;time.h&gt;
#include &lt;sys/ipc.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/ipc.h&gt;
#include &lt;sys/shm.h&gt;
char *shm_map;
int id,i=100;
void sig_handler(int signal)
{
	//如果是接受到的信号是SIGUSR1，则执行
	if(signal == SIGUSR1){
		i--;
		//向内存写入数据
		sprintf(shm_map,"shm_a.c data = %d\n",i);
		printf("请输入进程id：");
		scanf("%d",&amp;id);
		//给进程B发送信号
		kill(id,SIGUSR2);
	}

}
int main()
{
	
	//设置键值
	key_t key = ftok(".",2);
	//创建一块共享内存空间
	int shm_id = shmget(key,256,IPC_CREAT|IPC_EXCL|0644);
	if(shm_id == -1){
		printf("shmget error\n");
		shm_id = shmget(key,256,0644);
		
	}
	
	//连接映射空间，并写入数据
	shm_map = (char *)shmat(shm_id,NULL,0);
	printf("running c\n");
	
	
	signal(SIGUSR1,sig_handler);
	while(1);
	
	
	return 0;
}
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="9.541528038288195" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-08 17:14">2025-05-08 16:14</span>&nbsp;
<a href="https://www.cnblogs.com/lradian">LRadian</a>&nbsp;
阅读(<span id="post_view_count">45</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18866514);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18866514', targetLink: 'https://www.cnblogs.com/lradian/p/18866514', title: '共享内存和信号结合练习' })">举报</a>
</div>
        