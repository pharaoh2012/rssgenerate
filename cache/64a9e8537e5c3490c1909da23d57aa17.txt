
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/01am/p/18743968" title="发布于 2025-02-28 19:52">
    <span role="heading" aria-level="2">【Streamlit】关于我在使用Steamlit中碰到的问题及解决方案总结一：路径选择，调试运行，自定义图表ECharts，分页渲染</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="steamlit-并不支持一个可以预览本地文件的路径选择器并不上传文件">Steamlit 并不支持一个可以预览本地文件的路径选择器（并不上传文件）</h2>
<p>解决方案：使用 Python 自带的 tkinter 来完成<br>
参考：<a href="https://blog.csdn.net/qq_39749966/article/details/136619410" target="_blank" rel="noopener nofollow">【Streamlit 选择文件夹的曲折方案】Streamlit选择文件夹-CSDN博客</a></p>
<pre><code class="language-python">import streamlit as st
from tkinter import filedialog, Tk

# Set up tkinter
root = Tk()
root.withdraw()
# Make folder picker dialog appear on top of other windows
root.wm_attributes('-topmost', 1)

def path_set(label_name: str, segment_name: str, note: str = '', init_path: str = '') -&gt; str:
	'''
	label_name: 标题，用来分割不同的地址获取
	segment_name: 标记，作为 session_state 的 key 以及 streamlit 组件的 key 的生成
	note: 一些提示，写在地址选择上面
	init_path: 初始路径，传入保存在本地的路径或其它
	'''
	# 会话保证刷新网页后不会丢失
    if segment_name not in st.session_state:
        st.session_state[segment_name] = init_path

	# 选择路径提示
    st.markdown('##### ' + label_name)
    # 其它文本
    st.write(note)
    
    dirname_selected = None
    col1, col2 = st.columns([4, 1])
    empty_text = col1.empty()
    empty_text.text_input(
        label='1', 
        value=st.session_state[segment_name], 
        label_visibility='collapsed', 
        autocomplete='on',
        key=segment_name + 'input' + 'a',
    )
    choice = col2.button('浏览文件', key=segment_name + 'button' + 'a')
    if choice:
        dirname_selected = filedialog.askdirectory(master=root)
    if dirname_selected:
        st.session_state[segment_name] = dirname_selected
    empty_text.text_input(
        label='2', 
        value=st.session_state[segment_name], 
        label_visibility='collapsed', 
        autocomplete='on',
        key=segment_name + 'input' + 'b',
    )
    # st.write(st.session_state[segment_name]) # 测试时候用的，用来观察是否成功记录
</code></pre>
<p>思路就是用 <a href="https://docs.streamlit.io/develop/api-reference/layout/st.columns" target="_blank" rel="noopener nofollow"><code>st.columns</code></a> 将页面分两栏，然后使用 <a href="https://docs.streamlit.io/develop/api-reference/layout/st.empty" target="_blank" rel="noopener nofollow"><code>st.empty</code></a> 来占位，将传入的 <code>init_path</code> 保存在 <a href="https://docs.streamlit.io/develop/api-reference/caching-and-state/st.session_state" target="_blank" rel="noopener nofollow"><code>st.session_state</code></a> 的字典中用来保证刷新后不会丢失，先创建一个 <a href="https://docs.streamlit.io/develop/api-reference/widgets/st.text_input" target="_blank" rel="noopener nofollow"><code>st.text_input</code></a>来显示初始的 <code>init_path</code> ，然后通过 <code>filedialog.askdirectory</code> 获取到文件地址后，更新 <a href="https://docs.streamlit.io/develop/api-reference/layout/st.empty" target="_blank" rel="noopener nofollow"><code>st.empty</code></a>，使得输入来显示选择的地址。</p>
<p>这个东西花了我很长时间，主要是不太理解 Streamlit 的运作模式，又到处找能用的代码</p>
<h2 id="streamlit运行">Streamlit运行</h2>
<p>Streamlit 的运行比较反常，不是通过 Python 而是通过 Python 环境中的 Streamlit 命令进行的，很多时候运行和调试起来很麻烦（VSCode上），下面是几种运行方式</p>
<h3 id="vscode-调试">VSCode 调试</h3>
<p>在项目文件夹下的 <code>.vscode</code> 文件夹，里面的 <code>launch.json</code> 文件中加入</p>
<pre><code class="language-json">{
    // 使用 IntelliSense 了解相关属性。 
    // 悬停以查看现有属性的描述。
    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Streamlit",
            "type": "debugpy",
            "request": "launch",
            "module": "streamlit.web.cli",
            "env": {
                "STREAMLIT_ENABLE_COLAB_BACKEND": "true"
            },
            "args": [
                "run",
                "${file}",
                "--server.port", "667",
                "--server.address", "127.0.0.1"
            ]
        }
    ]
}
</code></pre>
<p>这样使用 <code>CodeRunner</code> 中的调试和直接按 F5 调试就可以直接启动了</p>
<p>另附，虽然 Streamlit 有点麻烦，不过正常调试还是可以调试的，打上断点之后启动调试就会卡住，或是随便在代码里加入一个无关紧要的空格（随便改改，不影响代码就行）后，点页面右上角的 <code>Rerun</code><img src="https://img2024.cnblogs.com/blog/2544214/202502/2544214-20250228194704689-1565045094.png" alt="image" loading="lazy">就OK（没有的话就在那三个点里）</p>
<h3 id="通过-python-直接运行">通过 Python 直接运行</h3>
<p>其实就是通过 Python 来执行命令</p>
<pre><code class="language-python">import streamlit.web.cli as stcli
import os, sys

if __name__ == "__main__":
    if getattr(sys, 'frozen', False):
        current_dir = sys._MEIPASS
    else:
        current_dir = os.path.dirname(os.path.abspath(__file__))
    file_path = os.path.join(current_dir, "main.py")

    sys.argv = ["streamlit", "run", file_path, 
        "--server.enableCORS=true", "--server.enableXsrfProtection=false", 
        "--global.developmentMode=false", "--client.toolbarMode=minimal"]
    sys.exit(stcli.main())
</code></pre>
<p>注：这种是在 Python 环境中的命令，如果 Python 环境没有激活，也可以使用 <code>Python.exe -m streamlit run &lt;streamlit文件&gt;</code> 的形式来运行，例如：<img src="https://img2024.cnblogs.com/blog/2544214/202502/2544214-20250228194611160-118032826.png" alt="image" loading="lazy"><br>
可以把这个写成批处理脚本，例如：</p>
<pre><code class="language-bat">.\runtime\python.exe -m streamlit run .\src\main.py
</code></pre>
<h2 id="关于图表主要是柱状图">关于图表（主要是柱状图）</h2>
<p>Streamlit 提供的 <a href="https://docs.streamlit.io/develop/api-reference/charts" target="_blank" rel="noopener nofollow">图表</a> 可拓展的能力实在是太低，需要做一些精细化调整时就会出现问题（不过要求不太多的话还是很好使的，也很美观），如：</p>
<ol>
<li>标签输出不能修改</li>
<li>不能取消<a href="https://docs.streamlit.io/develop/api-reference/charts/st.bar_chart" target="_blank" rel="noopener nofollow">柱状图表</a>鼠标滚轮缩放</li>
<li>不能取消某个坐标轴的显示</li>
<li>会乱序</li>
</ol>
<p>等等，不过毕竟是封装好的简单易用的功能，如果可以忍受瑕疵的话就不要使用第三方的组件（会出现一些奇怪的问题，后面会介绍）所以为了使用更加精细的表格生成，可以通过第三方组件引入 <code>Apache EChart</code> ，其中有两个（在<a href="https://streamlit.io/components?category=charts" target="_blank" rel="noopener nofollow">官网</a>上发布的）：</p>
<ol>
<li>ECharts：<a href="https://github.com/andfanilo/streamlit-echarts" target="_blank" rel="noopener nofollow">streamlit-echarts</a></li>
<li>Raw ECarts：<a href="https://github.com/liunux4odoo/streamlit-raw-echarts" target="_blank" rel="noopener nofollow">streamlit-raw-echarts</a></li>
</ol>
<p>它们本身功能类似，参考链接里的写法，其中配置项 <code>option</code> 的配置方法参考<a href="https://echarts.apache.org/zh/option.html" target="_blank" rel="noopener nofollow">ECharts配置项手册</a>。</p>
<p><strong>注：由于在 Python 中，<code>option</code> 表现为一个字典，且 Python 内是没有对应的变量，所以要将 <code>key</code> 写为字符串形式，<code>value</code> 同理，除去传入的数据，布尔类型，数字，基本上剩下的都是字符串形式</strong></p>
<p>它们的不同之处在一些更加细节的地方：</p>
<h3 id="区别1参数可不可以为-javascript-函数">区别1：参数可不可以为 JavaScript 函数</h3>
<p>它们都包含一个 <code>JScode</code> 函数，可以通过库来导入，但是这个函数在 <code>streamlit-echart</code> 中用处就不大（可能，至少我在尝试使用的时候只能报错），而在 <code>streamlit-raw-echart</code> 中是可以使用的，这个函数可以帮助部分配置项配置 <code>JavaScript函数</code> ，如：</p>
<pre><code class="language-python">options = {
	"tooltip": {
		"show": True,
		"trigger": "item",
		"showContent": True,
		"triggerOn": "mousemove",
		"formatter": JsCode('''function(params){return params.name+'&lt;br&gt;抽数：'+ params.data.value +'&lt;br&gt;时间：'+ params.data.time}''')
	},
}
</code></pre>
<p>其中 <code>"formatter"</code> 就对应了一个函数，用来为悬停提示加入部分数据，这种操作在 <code>streamlit-echart</code> 中就只会报错：</p>
<pre><code class="language-shell">MarshallComponentException: ('Could not convert component args to JSON', TypeError('Object of type JsCode is not JSON serializable'))
</code></pre>
<p>大概意思就是说 JsCode 类不能被 Json 序列化</p>
<h3 id="区别二参数名字不同">区别二：参数名字不同</h3>
<p>切记注意两个库中函数名同样是 <code>st_echarts</code> 的两个函数，其中的参数名却不一样</p>
<ul>
<li><code>streamlit-echarts</code>：options</li>
<li><code>streamlit-raw-echarts</code>：option</li>
</ul>
<h3 id="引入该第三方库所带来的缺点">引入该第三方库所带来的缺点</h3>
<p>由于该库并非是官方自带的，加上一些其它的问题（感觉是 Streamlit 渲染的问题），导致该表格无法使用在分页当中（<a href="https://docs.streamlit.io/develop/api-reference/widgets/st.button" target="_blank" rel="noopener nofollow"><code>st.tabs</code></a>）；如果存在多个分页并且每个分页中都有这样的图表，那么它只会渲染出来一个当前被选中页面中的图表，可以在图表未加载出来之前对页面进行切换来加载其它页面的图表，但很不方便。<br>
因此，选择了第三方库就意味着不能使用分页（<code>st.tabs</code>），可以使用<a href="https://docs.streamlit.io/develop/concepts/multipage-apps" target="_blank" rel="noopener nofollow">多页应用</a>和<a href="https://docs.streamlit.io/develop/api-reference/widgets/st.button" target="_blank" rel="noopener nofollow">按钮 <code>st.button</code></a>来替代<br>
使用按钮来替代分页的代码可以参考：</p>
<pre><code class="language-python"># 均分一行，使得按钮在同一列
eql = st.columns(7, gap="small")
button_list = []
# 循环创建按钮，并将结果保存在一个列表中，跳出分栏当中，防止后续的内容也被分栏
for i in range(7):
	with eql[i]:
		button_list.append(st.button("button" + str(i)))
for i in range(len(button_list)):
	if button_list[i]:
		break
# 下面这几行与 Streamlit 和 ECharts 无关，只是在根据按钮来获取对应的数据
gacha_name = gacha_type[i + 1]
level_page = level_pages[i]
level = levels[i]
t = db.table(
	data_to_analysis_name_trans(gacha_name, level)
)
df = pd.DataFrame(t.all())
# 生成 ECharts 图表
options = {
	"xAxis": {
		"show": False,
	},
	"yAxis": {
		"data": list(df['name'])[::-1]
	},
	"tooltip": {
		"show": True,
		"trigger": "item",
		"showContent": True,
		"triggerOn": "mousemove"
	},
	"series": [
		{
			"name": "抽数",
			"type": "bar",
			"colorBy": "data",
			"data": list(df["pity_num"])[::-1],
			"barMinWidth": 20,
			"barMaxWidth": 20,
			# "barGap": 7,
			"barCategoryGap": 20,
		}
	]
}
st_echarts(
	options=options,
	height=str(len(df) * 50 + 150) + "px", 
)
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.034667722386574076" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-01 11:28">2025-02-28 19:52</span>&nbsp;
<a href="https://www.cnblogs.com/01am">01am</a>&nbsp;
阅读(<span id="post_view_count">38</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18743968" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18743968);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18743968', targetLink: 'https://www.cnblogs.com/01am/p/18743968', title: '【Streamlit】关于我在使用Steamlit中碰到的问题及解决方案总结一：路径选择，调试运行，自定义图表ECharts，分页渲染' })">举报</a>
</div>
        