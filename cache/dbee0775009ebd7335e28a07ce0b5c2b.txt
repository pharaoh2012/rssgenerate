
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/shaogong/p/19022705" title="发布于 2025-08-05 10:15">
    <span role="heading" aria-level="2">duxapp中主题系统是如何实现动态切换的</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/2661484/202508/2661484-20250805101519525-2081429775.png" alt="duxapp中主题系统是如何实现动态切换的" class="desc_img">
        在旧版本的duxapp，支持主题功能，但是那时候的主体是静态配置的，并不支持动态切换，新版本，在旧的静态主题基础上扩展，实现了动态主题切换
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在旧版本的duxapp，支持主题功能，但是那时候的主体是静态配置的，并不支持动态切换，新版本，在旧的静态主题基础上扩展，实现了动态主题切换</p>
<h2 id="旧版本静态主题">旧版本静态主题</h2>
<p>在之前的版本中已经支持主题功能，在用户配置用，使用模块的 theme 字段配置主题，像下面这样</p>
<pre><code class="language-js">// configs/config/index.js
option: {
  // 基础模块
  duxapp: {
    theme: {
      primaryColor: '#CDDE00',
      secondaryColor: '#FDD000',
      successColor: '#34a853',
      warningColor: '#fbbc05',
      dangerColor: '#ea4335',
      pageColor: '#fafbf8'
    }
  }
}
</code></pre>
<p>配置了这些主题参数，会通过一个脚本转化为scss变量被加入到全局scss变量中，就像下面这样</p>
<pre><code class="language-css">$duxappPrimaryColor: #CDDE00;
$duxappSecondaryColor: #FDD000;
$duxappSuccessColor: #34a853;
$duxappDangerColor: #ea4335;
$duxappWarningColor: #fbbc05;
$duxappPageColor: #fafbf8;
</code></pre>
<p>然后你就能在任何scss文件中调用这些变量,例如 duxappStyle 的全局scss中调用这些变量，当然也不局限于这个文件，任何的scss都能调用这些变量</p>
<pre><code class="language-css">// src/duxappStyle/app.scss
.bg-primary {
  background-color: $duxappPrimaryColor;
}

.bg-secondary {
  background-color: $duxappSecondaryColor;
}

.bg-success {
  background-color: $duxappSuccessColor;
}
</code></pre>
<p>然后在你的项目中就可以调用这些全局类名就能获得对应的样式</p>
<pre><code class="language-jsx">&lt;View className='bg-primary' /&gt;
</code></pre>
<p>如果要编写 style 的时候获取这些主题参数，可以像下面这样</p>
<pre><code class="language-js">import { duxappTheme } from '@/duxapp'

&lt;View style={{ backgroundColor: duxappTheme.primaryColor }} /&gt;
</code></pre>
<ul>
<li>关于如何定制自己模块的主题，查看<a href="https://duxapp.com/docs/course/started/theme#%E9%85%8D%E7%BD%AE%E8%87%AA%E5%B7%B1%E6%A8%A1%E5%9D%97%E7%9A%84%E4%B8%BB%E9%A2%98" target="_blank" rel="noopener nofollow">这个文档</a></li>
</ul>
<h2 id="新版本的动态主题">新版本的动态主题</h2>
<p>为了最小的升级成本，系统未对之前的主题系统进行大改，而是在当前的主题系统模式上进行简单调整就能使用</p>
<p>之前所有的内容在新的主题系统中都是生效的，如果你要切换到动态主题，只需要在用户配置中，配置多套主题即可</p>
<ul>
<li>将当前的模块配置中的 <code>theme</code> 移动到 <code>themes.light</code> （每个模块的配置都需要同样的操作）</li>
<li>在 <code>themes</code> 里面新增一个主题配置 <code>dark</code>，表示夜间模式的主题<br>
:::info</li>
<li>如果没有指定 <code>themeConfig.default</code> light将会作为默认主题，</li>
<li>在你配置 <code>dark</code> 的主题的时候，如果和默认配置 <code>light</code> 相同的配置，你可以不配置，只需要与 <code>light</code> 不同的部分即可<br>
:::</li>
<li>新增 <code>themeConfig</code> 配置项目，参考下面的示例，需要在里面配置主题列表 <code>themes</code> (必须配置) 其他三个选项为可选配配置，<code>dark</code> 用于指定页面模式主题，<code>light</code> 用于指定白天模式主题，<code>default</code> 指定默认主题</li>
<li>只有当夜间模式和白天模式两个主题都存在的情况下系统才会跟随系统主题进行系统切换</li>
<li>除了 <code>light</code> <code>dark</code> 你还可以配置更多的主题，通过 <code>theme.setMode(主题)</code> 切换</li>
</ul>
<pre><code class="language-js">const config = {
  option: {
    // 基础模块
    duxapp: {
      themeConfig: {
        themes: {
          light: {
            name: '明亮主题',
            color: '#fff'
          },
          dark: {
            name: '暗黑主题',
            color: '#333'
          }
        },
        // dark: 'dark',
        // light: 'light',
        // default: 'light'
      },
      themes: {
        light: {
          primaryColor: '#E70012',
          secondaryColor: '#0092e8',
          successColor: '#34a853',
          warningColor: '#fbbc05',
          dangerColor: '#ea4335',
          pageColor: '#F7F9FC',

          textColor1: '#373D52',
          textColor2: '#73778E',
          textColor3: '#A1A6B6',
          textColor4: '#FFF',
          header: {
            color: '#fff', // 仅支持rgb hex值，请勿使用纯单词 设置为数组将显示一个渐变按钮
            textColor: '#000', // 文本颜色
            showWechat: true, // 微信公众号是否显示header
            showWap: true, // h5是否显示header
          }
        },
        dark: {
          pageColor: '#1E1E1E',

          whiteColor: '#181818',
          blackColor: '#fff',
          lineColor: '#1F1F1F',

          textColor1: '#FFF',
          textColor2: '#A1A6B6',
          textColor3: '#73778E',
          textColor4: '#373D52',
          header: {
            color: '#121212',
            textColor: '#fff'
          },
          loading: {
            dark: '#fff',
            blank: '#7a7a7a'
          }
        }
      }
    },
    duxui: {
      themes: {
        light: {
          button: {
            radiusType: 'round'
          }
        },
        dark: {
          tabBar: {
            nameColor: '#888',
            nameHoverColor: '#fff'
          }
        }
      }
    }
  }
}

export default config
</code></pre>
<h2 id="动态切换">动态切换</h2>
<p>默认情况下只需要你配置了 <code>light</code> 和 <code>dark</code> 两个主题，程序就能跟随系统自动切换</p>
<p>如果你需要手动切换，下面是一动态切换主题的示例代码，参考这个进行开发，<code>theme</code> 是基础模块导出的工具</p>
<p>:::info</p>
<ul>
<li>动态切换（包括自动切换）现在仅支持 小程序 H5端，其他平台还在开发中</li>
<li>不支持的平台会按照配置的默认主题显示<br>
:::</li>
</ul>
<pre><code class="language-jsx">import { Header, ScrollView, TopView, GroupList, theme, Button } from '@/duxuiExample'

export default function ThemeExample() {

  const mode = theme.useMode(true)

  const modes = theme.useModes()

  return &lt;TopView&gt;
    &lt;Header title='Theme' /&gt;
    &lt;ScrollView&gt;
      &lt;GroupList&gt;
        &lt;GroupList.Item title='主题切换功能' desc='主题切换当前仅支持小程序和H5端，其他端还在努力开发中'
          className='gap-3'
        &gt;
          {
            modes.map(item =&gt; &lt;Button
              type='primary'
              plain={item.mode !== mode}
              key={item.name}
              onClick={() =&gt; item.switch()}
              size='l'
            &gt;{item.name}&lt;/Button&gt;)
          }
        &lt;/GroupList.Item&gt;
      &lt;/GroupList&gt;
    &lt;/ScrollView&gt;
  &lt;/TopView&gt;
}
</code></pre>
<h2 id="如何实现的">如何实现的</h2>
<p>动态主题在不同的平台使用了不同的实现方案，具体来说，小程序 H5端使用了css变量，RN端使用了插件动态修改组件代码实现动态切换</p>
<h3 id="小程序-h5端">小程序 H5端</h3>
<p>小程序 H5端 css 变量 的实现流程</p>
<ul>
<li>duxapp-cli 先将用户配置的主题名称进行统计并存储</li>
<li>duxapp-cli 根据用户主题配置生成主题scss文件 <code>src/duxapp/userTheme/index.scss</code>，这个文件会自动被 TopView组件引用</li>
<li>编写一个 <code>theme-loader</code> 将其插入到 webpack 的 loader 中，在处理 scss 之前，先解析动态主题，目的是将调用到scss主题变量的代码，替换为调用css变量</li>
<li>主题系统通过一个改变类型动态切换css变量的流程</li>
</ul>
<h2 id="rn端">RN端</h2>
<ul>
<li>duxapp-cli 先将用户配置的主题名称进行统计并存储</li>
<li>duxapp-cli 根据用户主题配置生成主题js文件 <code>src/duxapp/userTheme/index.rn.js</code></li>
<li>编写一个 <code>theme-loader</code> 将其插入到 webpack 的 loader 中，在处理 scss 之前，先解析动态主题，目的是将调用到scss主题变量的代码，替换为调用css变量</li>
<li>使用 patch-package 修改了 rn 端相关插件，主要改变的功能是，解析 <code>theme-loader</code> 生成的css变量，并替换成主题变量，并且将之前的 <code>styleSheet</code> 修改为函数的方式导出，函数接受一个主题名称，传入不同的主题名称，返回不同的 <code>styleSheet</code></li>
<li>修改插件，让插件在函数组件的头部，插入一个 hook ，这个 hook 会监听主题改变，并更新 <code>styleSheet</code> 并且在主题更新后，重新渲染组件</li>
</ul>
<p>因为 React 组件的编写形式太过灵活多变，因此最后一步，在函数组件头部插入一个hook的操作，并不一定所有组件都能插入，局具体使用的显示参考<a href="https://duxapp.com/docs/course/started/theme#rn-%E7%AB%AF" target="_blank" rel="noopener nofollow">这个说明</a></p>
<h2 id="最后">最后</h2>
<p>duxapp的主题系统经历了从静态配置到动态切换的演进过程：</p>
<ul>
<li>
<p>兼容性：新版本完美兼容旧版的静态主题配置</p>
</li>
<li>
<p>灵活性：支持多主题配置和动态切换</p>
</li>
<li>
<p>跨平台：针对不同平台采用最优实现方案</p>
</li>
<li>
<p>易用性：提供简洁的API和配置方式</p>
</li>
</ul>
<p>开发者可以根据项目需求选择合适的主题方案，通过简单的配置即可实现强大的主题功能。未来版本将继续优化各平台的兼容性和性能表现。</p>
<p><a href="https://duxapp.com/docs/course/started/theme" target="_blank" rel="noopener nofollow">主题开发文档</a></p>
<p><a href="https://duxapp.com" target="_blank" rel="noopener nofollow">开发文档</a><br>
<a href="https://github.com/duxapp" target="_blank" rel="noopener nofollow">GitHub</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-05 10:16">2025-08-05 10:15</span>&nbsp;
<a href="https://www.cnblogs.com/shaogong">少恭写代码</a>&nbsp;
阅读(<span id="post_view_count">7</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19022705);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19022705', targetLink: 'https://www.cnblogs.com/shaogong/p/19022705', title: 'duxapp中主题系统是如何实现动态切换的' })">举报</a>
</div>
        