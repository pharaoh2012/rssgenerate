
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xiezhr/p/18825774" title="发布于 2025-04-15 09:01">
    <span role="heading" aria-level="2">SpringBoot3整合SpringSecurity6(一)快速入门</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><strong>大家好，我是晓凡。</strong></p>
<h3 id="写在前面">写在前面</h3>
<p>不知道小伙伴们在学<code>SpringSecurity</code>过程中有没有和我一样的经历和烦恼。</p>
<p>①看完一篇文章或者一个教程，感觉学会了。但是一到实际项目中就不知道怎么用；</p>
<p>②被<code>SprintSecurity</code> 源码和各种专业名词搞得一头雾水，不知道如何下手，直接劝退；</p>
<p>③技术更新迭代非常快，网上一些文章教程知识点已经过时了，在新版本中已经不适用了。</p>
<p>晓凡在学习过程中也同样遇到了这些问题，也被劝退过。但是，现在的安全框架也就那么几个，难啃也得硬着头皮上。</p>
<p>原本打算一篇文章写完，但是基于<code>SprintSecurity</code>涉及到的知识点确实挺多，文章篇幅肯定很长。</p>
<p>基于这些原因，晓凡打算将<code>SpringBoot3</code>整合<code>SpringSecurity6</code>写成一个系列文章，文章尽可能的通俗易懂，循序渐进，并穿插实际项目开发实例。</p>
<p>让小伙伴们学起来没啥压力，学完之后能将<code>SpringSecurity</code>运用到实际项目中。</p>
<p>当然，每个人的理解方式不同，可能有些重要的细节没讲到位，欢迎大家在评论区提问。受限于个人水平，一定有说的不对的地方，大家理解一下，友善白嫖哈。</p>
<h3 id="一环境说明">一、环境说明</h3>
<blockquote>
<p>现在技术更新迭代真的很快，不少小伙伴还在抱怨，怎么又更新了，学不动了。晓凡也采用当前最新稳定版本的进行讲解，具体如下</p>
</blockquote>
<ul>
<li><code>SpringBoot 3.2.0</code></li>
<li><code>SpringSecurity 6.2.0</code></li>
<li><code>JDK 17</code></li>
<li><code>MySQL 8.0</code></li>
</ul>
<h3 id="二springsecurity-简介">二、SpringSecurity 简介</h3>
<p><code>SpringSecurity </code> 是<code>Spring</code>大家族中一名重要成员，是专门负责安全的框架。</p>
<p>提到安全框架，做过Java开发的小伙伴可能还听说过<code>Shiro</code>。<code>Shiro</code>相对于<code>Spring Security</code>来说，更加简单。一般小型项目使用得比较多，</p>
<p>这里就不展开说了，感兴趣的小伙伴可以评论区留言，晓凡后面出教程。<code>Spring Security</code>一般用在中大型项目中。</p>
<p><strong><code>Spring Security </code>能为项目做什么呢？</strong></p>
<p>我们来看看<strong>官方文档：<a href="https://docs.spring.io/spring-security/reference/index.html" target="_blank" rel="noopener nofollow">https://docs.spring.io/spring-security/reference/index.html</a></strong>怎么说的？</p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202504/2381533-20250414214907419-799801178.png" alt="SpringSecurity官方介绍" loading="lazy"></p>
<p>翻译过来大概就是：<code>Spring Security</code> 是一个提供了<strong>身份验证</strong>、<strong>授权</strong>和<strong>防止常见攻击</strong>的功能的框架。</p>
<h3 id="三常用名词解释">三、常用名词解释</h3>
<p>上面提到了<strong>身份验证</strong>、<strong>授权</strong>和<strong>防止常见攻击</strong> 三个专业名词。晓凡这里以小区中的保安系统来说明，大家肯定就秒懂了。</p>
<p>为了小区的安全，小区上了保安系统，确保只有合法的居民可以进入小区，并且他们只能访问自己的家，同时防止小偷和法外狂徒张三进来捣乱。</p>
<ol>
<li><strong>身份认证（Authentication）</strong>：
<ul>
<li>就是确认你是谁的过程。<code>Spring Security</code> 会要求你提供一些信息，比如用户名和密码，然后它会检查这些信息是否正确。如果信息正确，就相当于给你发了一张小区的门禁卡，你就可以进入小区了。</li>
</ul>
</li>
<li><strong>授权（Authorization）</strong>：
<ul>
<li>就是决定你可以做什么的过程。即使你进了小区，也不能随便去别人家。<code>Spring Security</code> 会检查你是否有权限去某个地方，比如你的家。你有权限，就可以进入；而隔壁老王，没有你家的权限，就会被拒之门外。</li>
</ul>
</li>
<li><strong>防御常见攻击</strong>：
<ul>
<li>就像小区保安要防止小偷和张三一样，<code>Spring Security</code> 也提供了很多功能来防止各种网络攻击：
<ul>
<li><strong>CSRF（跨站请求伪造）</strong>：防止有人伪造你的请求，比如在你不知情的情况下，让你的账号发一些你不想要的帖子。</li>
<li><strong>XSS（跨站脚本攻击）</strong>：防止有人通过网页注入恶意脚本，偷取你的个人信息。</li>
<li><strong>SQL注入</strong>：防止有人通过输入特殊的命令，来操纵数据库，获取或破坏数据。</li>
<li><strong>点击劫持</strong>：防止有人通过一些手段，让你在不知情的情况下点击一些链接，从而执行一些你不想执行的操作。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="四快速入门">四、快速入门</h3>
<p>说了一堆理论知识，下面晓凡带着大家敲代码，快速上手</p>
<h4 id="41-搭建一个spring-boot-web项目">4.1 搭建一个Spring Boot Web项目</h4>
<p>① 创建<code>SecurityQuickStart</code>项目</p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202504/2381533-20250414214922157-1134766993.png" alt="创建项目" loading="lazy"></p>
<p>② 创建controller</p>
<pre><code class="language-java">@RestController
public class HelloController {

    @GetMapping("/hello")
    public String hello(){

        return "晓凡，你好！";
    }
}
</code></pre>
<p>③ 启动项目，浏览器访问/hello接口</p>
<p>浏览器中访问：<a href="http://localhost:8080/hello" target="_blank" rel="noopener nofollow">http://localhost:8080/hello</a></p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202504/2381533-20250414214907425-774846014.png" alt="接口访问正常" loading="lazy"></p>
<h4 id="42-引入springsecurity">4.2 引入SpringSecurity</h4>
<p>① 引入依赖</p>
<p>在<code>SpringBoot</code>项目中使用<code>SpringSecurity</code>,我们只需要引入如下依赖即可</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<p>② 访问接口</p>
<p>依然在浏览器中输入：<a href="http://localhost:8080/hello" target="_blank" rel="noopener nofollow">http://localhost:8080/hello</a></p>
<p>这时候，我们发现hello接口不能访问了，而是跳转到一个登录页面：<a href="http://localhost:8080/login" target="_blank" rel="noopener nofollow">http://localhost:8080/login</a></p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202504/2381533-20250414214907397-1727208581.png" alt="登陆页面" loading="lazy"></p>
<p>这时候我们需要输入用户名和密码才能访问接口</p>
<p>用户名默认为：user</p>
<p>密码会在控制台中打印出来</p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202504/2381533-20250414214907469-1057698509.png" alt="打印密码" loading="lazy"></p>
<p><strong>注意</strong>：如果你没使用魔法上网，可能登录页面会如下图所示一样</p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202504/2381533-20250414214907422-138418874.png" alt="丢失样式" loading="lazy"></p>
<p>遇到这样的，小伙伴也不用慌，这是由于访问不了<code>bootstrap.min.css</code>样式造成的，并不影响正常业务流程</p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202504/2381533-20250414214907473-1001912244.png" alt="bootstrap.min.css反问不了" loading="lazy"></p>
<p>点击"Sign in"进行登录，就可以正常访问接口了</p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202504/2381533-20250414214907446-2055913411.png" alt="正常访问接口" loading="lazy"></p>
<h4 id="43-配置默认用户密码">4.3 配置默认用户/密码</h4>
<p>默认情况下<code>SpringSecurity</code>  会为我们默认生成一个user用户，密码采用uuid随机生成（通过下图中<code>SecurityProperties</code>类的静态内部类user生成）。</p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202504/2381533-20250414214907454-1340193121.png" alt="初始化用户名和密码" loading="lazy"></p>
<p>我们还可以通过<code>application.yml</code>配置文件来配置用户名和密码</p>
<pre><code class="language-yml">spring:
  security:
    user:
      password: 123456
      name: admin

</code></pre>
<p>通过上面配置之后，控制台将不再输出随机生成的密码，我们也可以通过admin/123456 登录</p>
<h4 id="44-注销">4.4 注销</h4>
<p>既然能登陆，那必然也是可以注销的。</p>
<p>我们只需浏览器输入：<a href="http://localhost:8080/logout" target="_blank" rel="noopener nofollow">http://localhost:8080/logout</a>  然后点击Log Out 即可注销</p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202504/2381533-20250414214907472-1029039868.png" alt="注销" loading="lazy"></p>
<h3 id="五springsecurity-默认做了什么">五、SpringSecurity 默认做了什么？</h3>
<p>到这儿，我们算是正是入门了。其实我们出了引入依赖，其他啥也没干。那么<code>SpringSecurity</code>默认为我们做了些什么？</p>
<p>① 保护我们创建的/hello接口，不是随便一个老王就能来访问，要求对应用程序的任何交互进行身份验证；</p>
<p>② 程序启动时生成一个默认用户“user”；</p>
<p>③ 生成一个默认的随机密码，并将此密码记录在控制台上；</p>
<p>④ 生成默认的登录表单和注销页面，并提供登录和注销功能；</p>
<p>⑤ 对于请求，重定向到登录页面</p>
<p>本期内容到这儿就结束了，希望对您有所帮助。</p>
<p>我们下期再见~ ヾ(•ω•`)o  (●'◡'●)</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/xiezhr/" target="_blank">程序员晓凡</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/xiezhr/p/18825774" target="_blank">https://www.cnblogs.com/xiezhr/p/18825774</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.08506002382523148" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-15 09:02">2025-04-15 09:01</span>&nbsp;
<a href="https://www.cnblogs.com/xiezhr">程序员晓凡</a>&nbsp;
阅读(<span id="post_view_count">53</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18825774);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18825774', targetLink: 'https://www.cnblogs.com/xiezhr/p/18825774', title: 'SpringBoot3整合SpringSecurity6(一)快速入门' })">举报</a>
</div>
        