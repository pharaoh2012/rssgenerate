
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/apocelipes/p/18882732" title="发布于 2025-05-18 22:19">
    <span role="heading" aria-level="2">使用libdivide加速整数除法运算</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在x86和ARM平台上，整数除法是相对较慢的操作。不巧的是除法在日常开发中使用频率并不低，而且还有一些其他常用的运算依赖于除法操作，比如取模。因此频繁的除法操作很容易成为程序的性能瓶颈，尤其是在一些数值计算程序里。</p>
<p>人们当然也想了很多办法优化，比如在除数是2的幂的时候，除法可以用速度更快的位运算来替换。比较新的编译器都会自动进行这类优化。然而不是所有的除数都是2的幂，也不是所有表达式里的除数在编译期间可知，因此我们还需要一些别的手段。</p>
<p><img src="https://img2024.cnblogs.com/blog/1434464/202505/1434464-20250518221811887-2116352331.png" alt="" loading="lazy"></p>
<p><code>libdivide</code>就是这样一种整数除法的优化手段，它不仅能应用前面提到的位运算优化，它还可以在运行时根据除数和被除数的特性选择速度最快的算法来模拟除法操作，最有意义的地方在于如果硬件平台支持SIMD指令，它还会在条件允许下尽量使用SSE2/AVX2/AVX256/NEON等SIMD指令做优化，重复发挥了现代cpu的性能优势。按照项目文档的说法，在有SIMD的加持下，64位整数的除法运算最大可以提升10倍。</p>
<p><code>libdivide</code>是个头文件库，这意味着只需要简单包含一下它提供的头文件就可以使用了，不需要额外的编译和安装。同时它的使用方法也很简单，库做了运算符重载，只要初始化一下它需要的对象就可以了：</p>
<pre><code class="language-c++">int64_t a = 1000;
libdivide::divider&lt;int64_t&gt; fast_d(10);
int64_t result = a / fast_d;
a /= fast_d;
</code></pre>
<p>c语言没有提供运算符重载的功能，因此得用<code>libdivide_s64_gen</code>等包装函数来完成相同的操作。</p>
<p>简单来说它几乎可以平替项目中的除法运算，不过在这之前我们得先检验下它承诺的性能提升是不是确有其事。</p>
<p><code>libdivide</code>在测试用例里自带了一个性能测试程序，但这个程序的输出比较抽象，测试的场景也不够全面，因此我重新写了三个场景的场景做测试。</p>
<p>三个场景分别是除数未知、除数已知但是2的幂以及除数已知但不是2的幂。覆盖的情况是编译器做不了优化、编译器可以优化成位运算以及编译器能优化但不能直接用位运算进行替换这三种。</p>
<p>由于c++的编译期计算太强大，为了避免编译期计算搅局影响结果，测试数据中的大部分都是随机生成的，理论上性能测试中应该尽量减少这种随机生成的数据，但这里我们别无他法，而且说到底也是“评估”一下库的大致性能，不需要那么精确。测试用例不长，因此我就全搬上来了：</p>
<pre><code class="language-c++">// 场景1，除数未知，为了模拟除数未知所以除数也用了随机数
void bench_div(benchmark::State &amp;stat)
{
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution&lt;int64_t&gt; dis(1, 114515);
    std::vector&lt;int64_t&gt; v;
    for (int i = 0; i &lt; 10; ++i) {
	    v.push_back(dis(gen));
    }
    int64_t d = dis(gen);
    for (auto _ : stat) {
	    for (auto n : v) {
            benchmark::DoNotOptimize(n/=d);
	    }
    }
}
BENCHMARK(bench_div);

void bench_libdiv(benchmark::State &amp;stat)
{
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution&lt;int64_t&gt; dis(1, 114515);
    std::vector&lt;int64_t&gt; v;
    for (int i = 0; i &lt; 10; ++i) {
	    v.push_back(dis(gen));
    }
    libdivide::divider&lt;int64_t&gt; fast_d(dis(gen));
    for (auto _ : stat) {
	    for (auto n : v) {
            benchmark::DoNotOptimize(n/=fast_d);
	    }
    }
}
BENCHMARK(bench_libdiv);

// 场景2，除数的4，2的2次幂
void bench_div4(benchmark::State &amp;stat)
{
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution&lt;uint64_t&gt; dis(1, 114515);
    std::vector&lt;uint64_t&gt; v;
    for (int i = 0; i &lt; 10; ++i) {
	    v.push_back(dis(gen));
    }
    uint64_t d = 4;
    for (auto _ : stat) {
	    for (auto n : v) {
            benchmark::DoNotOptimize(n&gt;&gt;=d);
	    }
    }
}
BENCHMARK(bench_div4);

void bench_libdiv4(benchmark::State &amp;stat)
{
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution&lt;uint64_t&gt; dis(1, 114515);
    std::vector&lt;uint64_t&gt; v;
    for (int i = 0; i &lt; 10; ++i) {
	    v.push_back(dis(gen));
    }
    uint64_t d = 4;
    libdivide::divider&lt;uint64_t&gt; fast_d(d);
    for (auto _ : stat) {
	    for (auto n : v) {
            benchmark::DoNotOptimize(n/=fast_d);
	    }
    }
}
BENCHMARK(bench_libdiv4);

// 场景3，除数已知但不是2的幂，特地选了一个素数23
void bench_div_const(benchmark::State &amp;stat)
{
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution&lt;int64_t&gt; dis(1, 114515);
    std::vector&lt;int64_t&gt; v;
    for (int i = 0; i &lt; 10; ++i) {
	    v.push_back(dis(gen));
    }
    int64_t d = 23;
    for (auto _ : stat) {
	    for (auto n : v) {
            benchmark::DoNotOptimize(n/=d);
	    }
    }
}
BENCHMARK(bench_div_const);

void bench_libdiv_const(benchmark::State &amp;stat)
{
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution&lt;int64_t&gt; dis(1, 114515);
    std::vector&lt;int64_t&gt; v;
    for (int i = 0; i &lt; 10; ++i) {
	    v.push_back(dis(gen));
    }
    libdivide::divider&lt;int64_t&gt; fast_d(23);
    for (auto _ : stat) {
	    for (auto n : v) {
            benchmark::DoNotOptimize(n/=fast_d);
	    }
    }
}
BENCHMARK(bench_libdiv_const);

BENCHMARK_MAIN();
</code></pre>
<p>测试内容是连续除十个随机生成的被除数，现代cpu性能还是很强悍的，如果只测除一次的情况，那么会得到一堆0.X纳秒的结果，那样对比不够明显，也容易引入统计误差和噪音。</p>
<p>测试运行也分两部分，一是使用<code>-O2</code>优化级别进行测试，在这个级别下编译器会采用比较保守的优化策略，并且只应用少量的SIMD指令；另一个是用<code>-O3 -march=native</code>进行优化，在这个级别下编译器会最大限度优化程序性能并且尽可能利用当前cpu上所有可用的指令（包括SIMD）进行优化。</p>
<p>先来看看老机器上(10代i5台式机)的结果：</p>
<p><img src="https://img2024.cnblogs.com/blog/1434464/202505/1434464-20250518221740996-2094559745.png" alt="" loading="lazy"></p>
<p>下面是开启native之后的结果：</p>
<p><img src="https://img2024.cnblogs.com/blog/1434464/202505/1434464-20250518221728785-1040305910.png" alt="" loading="lazy"></p>
<p>结果符合预期，在除数未知的情形下<code>libdivide</code>性能提升了8倍左右，除数已知且是2的幂的时候两者差不多，只有第三种情形下libdivide稍慢与直接除，原因大概是因为编译器也做了和libdivide类似的优化，但libdivide还需要额外探测除数的性质以及需要多几次函数调用，因此性能上稍慢了一些。</p>
<p>最大化利用SIMD结果类似，情形3下的差距缩小了很多。</p>
<p>然后我们看看在更新的机器上的表现（14代i7）：</p>
<p><img src="https://img2024.cnblogs.com/blog/1434464/202505/1434464-20250518221704655-138000184.png" alt="" loading="lazy"></p>
<p>不启用最高级别优化时结果与老机器类似，但性能差距缩小了。</p>
<p><img src="https://img2024.cnblogs.com/blog/1434464/202505/1434464-20250518221650887-749038707.png" alt="" loading="lazy"></p>
<p>最大程度利用SIMD后现在情形3变快，但场景2又稍显落后了。在场景1中的提升也只有5倍左右。</p>
<p>总体来说在<code>libdivide</code>宣称的场景下，性能提升确实很可观，但还没到1个数量级这么夸张，不过我的测试环境都没有avx512支持，对于支持这个指令集的cpu来说也许性能还能再提升一些最终达到文档里说的10倍。在其他场景下libdivide的优势并不明显，所以追求极致性能的时候不是很建议在非场景1的情况下使用这个库。</p>
<h2 id="总结">总结</h2>
<p>如果整数除法成为了性能瓶颈的话，可以尝试使用<code>libdivide</code>。这里总结下优缺点。</p>
<p>优点：</p>
<ol>
<li>使用方便，只需要导入头文件</li>
<li>在除数未知的情况下能获得显著的性能提升</li>
<li>能利用SIMD，充分释放现代cpu性能</li>
</ol>
<p>缺点：</p>
<ol>
<li>只适用于除数未知的情况下</li>
<li>且除数要固定，因为频繁创建销毁<code>libdivide::divider</code>对象要付出额外的代价，会导致优化效果打折甚至负优化</li>
<li><code>libdivide::divider</code>对象比整数要多占用一个字节，尽管这个对象是栈分配的，但对空间消耗比较敏感的程序可能需要谨慎使用，尤其是账面是虽然只多一字节，但遇到需要内存对齐的时候可能占用就要翻倍了。</li>
</ol>
<p>总得来说libdivide还是很值得一试的库，但任何优化都要有性能测试做依据。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5863056839988426" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-18 22:20">2025-05-18 22:19</span>&nbsp;
<a href="https://www.cnblogs.com/apocelipes">apocelipes</a>&nbsp;
阅读(<span id="post_view_count">36</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18882732);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18882732', targetLink: 'https://www.cnblogs.com/apocelipes/p/18882732', title: '使用libdivide加速整数除法运算' })">举报</a>
</div>
        