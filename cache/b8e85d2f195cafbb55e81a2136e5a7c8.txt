
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/akvicor/p/18865404" title="发布于 2025-05-08 01:00">
    <span role="heading" aria-level="2">ufw配置自动管理端口转发和DNAT+MASQUERADE</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<ul>
<li>端口A转发到本地的端口B</li>
<li>端口A转发到另一台机器的端口B(需借助DNAT)</li>
</ul>
<p>一般情况下, 我们配置ufw来实现端口转发时会在修改 <code>/etc/ufw/before.rules</code> 文件, 增加<code>*nat</code>部分.</p>
<p>但当<code>ufw reload</code>或重启ufw时, ufw并不会自动帮我们清除原本的<code>*nat</code>规则, 导致每次刷新ufw都会产生一份新的<code>*nat</code>, 重启一次增加一份.</p>
<p>除非手动执行<code>iptables -F -t nat</code>来清除旧规则, 但这又会导致另一个问题, <strong>docker</strong>创建的规则也会被这个命令清理.</p>
<p>再除非你创建一个新Chain......</p>
<p>上面的操作不管怎么套娃, 都避免不了手动执行某个命令, 因此我期望寻找一种让ufw自动管理的方案, 于是就有了这篇文章.</p>
<h2 id="思路构建">思路构建</h2>
<ul>
<li>首先我不想让ufw默认允许转发, 也就是说我不想修改<code>/etc/default/ufw</code>文件</li>
<li>其次, 我不想修改<code>/etc/ufw/sysctl.conf</code>文件, 因为我在<code>/etc/sysctl.conf</code>中开启了<code>net.ipv4.ip_forward</code></li>
</ul>
<p>我们知道<code>MASQUERADE</code>规则需要配置在<code>POSTROUTING</code>中, <code>REDIRECT</code>和<code>DNAT</code>规则需要配置在<code>POSTROUTING</code>中.</p>
<p>所以我们需要自定义两个新的Chain, 分别附加到 <code>PREROUTING</code> 和 <code>POSTROUTING</code> 两个部分.</p>
<p>我们仍然将规则编写在<code>/etc/ufw/before.rules</code>中, 并附加在自己的这两个Chain中</p>
<p>每次ufw创建规则前, 自动删除我们自定义的这两个Chain的所有规则, 之后ufw会再次将<code>/etc/ufw/before.rules</code>中自定义的规则添加</p>
<h2 id="beforeinit-自动删除">before.init 自动删除</h2>
<p>首先我们要修改的是 <code>/etc/ufw/before.init</code> 这个文件, 虽然ufw并没有自动帮我们删除的功能, 但是它贴心的准备了这个文件, 用于在ufw初始化之前执行一些指令.</p>
<p>我们需要为这个文件添加执行权限, 这样ufw才会执行这个文件</p>
<pre><code class="language-bash">chmod a+x /etc/ufw/before.init
</code></pre>
<p>在这个文件中, 我们主要修改的就是<code>case</code>中<code>start</code>和<code>stop</code>这两个部分.</p>
<ul>
<li>创建了 <code>ufw-nat-pre</code> 附加到 <code>PREROUTING</code></li>
<li>创建了 <code>ufw-nat-post</code> 附加到 <code>POSTROUTING</code></li>
</ul>
<p>我的完整<code>case</code>如下, 如果想重新起名直接替换即可</p>
<pre><code class="language-shell">case "$1" in
start)
    # typically required
    if iptables -t nat -L -n &gt;/dev/null 2&gt;&amp;1;then
        printf "*nat\n"\
":PREROUTING ACCEPT [0:0]\n"\
":POSTROUTING ACCEPT [0:0]\n"\
"COMMIT\n" | iptables-restore -n
    fi
    # flush the chains (if they exist)
    if iptables -t nat -L ufw-nat-pre -n &gt;/dev/null 2&gt;&amp;1; then
        iptables -t nat -D PREROUTING -j ufw-nat-pre 2&gt;/dev/null || true
        iptables -t nat -F ufw-nat-pre 2&gt;/dev/null || true
        iptables -t nat -X ufw-nat-pre 2&gt;/dev/null || true
    else
        # setup nat chains
        printf "*nat\n"\
":ufw-nat-pre - [0:0]\n"\
"-A PREROUTING -j ufw-nat-pre\n"\
"COMMIT\n" | iptables-restore -n
    fi
    if iptables -t nat -L ufw-nat-post -n &gt;/dev/null 2&gt;&amp;1; then
        iptables -t nat -D POSTROUTING -j ufw-nat-post 2&gt;/dev/null || true
        iptables -t nat -F ufw-nat-post 2&gt;/dev/null || true
        iptables -t nat -X ufw-nat-post 2&gt;/dev/null || true
    else
        # setup nat chains
        printf "*nat\n"\
":ufw-nat-post - [0:0]\n"\
"-A POSTROUTING -j ufw-nat-post\n"\
"COMMIT\n" | iptables-restore -n
    fi
    ;;
stop)
    # typically required
    if iptables -t nat -L ufw-nat-pre -n &gt;/dev/null 2&gt;&amp;1; then
        iptables -t nat -D PREROUTING -j ufw-nat-pre 2&gt;/dev/null || true
        iptables -t nat -F ufw-nat-pre 2&gt;/dev/null || true
        iptables -t nat -X ufw-nat-pre 2&gt;/dev/null || true
    fi
    if iptables -t nat -L ufw-nat-post -n &gt;/dev/null 2&gt;&amp;1; then
        iptables -t nat -D POSTROUTING -j ufw-nat-post 2&gt;/dev/null || true
        iptables -t nat -F ufw-nat-post 2&gt;/dev/null || true
        iptables -t nat -X ufw-nat-post 2&gt;/dev/null || true
    fi
    ;;
status)
    # optional
    ;;
flush-all)
    # optional
    ;;
*)
    echo "'$1' not supported"
    echo "Usage: before.init {start|stop|flush-all|status}"
    ;;
esac
</code></pre>
<h2 id="beforerules-自定义规则">before.rules 自定义规则</h2>
<p>首先我们要修改的是 <code>/etc/ufw/before.rules</code> 这个文件, 直接在文件的末尾添加即可</p>
<p>如何添加iptables规则需要自行搜索或询问AI, 我这里仅提供示例便于读者知道自定义规则怎么添加, 以及添加在什么地方</p>
<p>注意端口转发到另一个IP的端口需要在两个部分都配置</p>
<pre><code class="language-conf">*nat
:ufw-nat-pre - [0:0]
# 本机的 20000 端口的 tcp 和 udp 转发到本机的 22 端口
-A ufw-nat-pre -p tcp --dport 20000 -j REDIRECT --to-port 22
-A ufw-nat-pre -p udp --dport 20000 -j REDIRECT --to-port 22
# 本机的 20001 端口的 tcp 和 udp 转发到 1.1.1.1 的 22 端口 (注意: 还需要配置 ufw-nat-post
-A ufw-nat-pre -p tcp --dport 20001 -j DNAT --to-destination 1.1.1.1:22
-A ufw-nat-pre -p udp --dport 20001 -j DNAT --to-destination 1.1.1.1:22
# end
COMMIT

*nat
:ufw-nat-post - [0:0]
# 本机的 20001 端口的 tcp 和 udp 转发到 1.1.1.1 的 22 端口 (注意: 还需要配置 ufw-nat-pre
-A ufw-nat-post -d 1.1.1.1 -p tcp --dport 22 -j MASQUERADE
-A ufw-nat-post -d 1.1.1.1 -p udp --dport 22 -j MASQUERADE
# end
COMMIT
</code></pre>
<h2 id="完成">完成</h2>
<blockquote>
<p>注意: 如果先前就创建了规则且没有删除, 或者不小心把docker的规则删掉了, 可以重启下系统来刷新</p>
</blockquote>
<p>这样我们就可以愉快的在 <code>before.rules</code> 添加规则, 然后使用 <code>ufw reload</code> 重载规则了</p>
<p>同时发布在个人博客中 <a href="https://blog.akvicor.com/posts/ufw/forward/" target="_blank" rel="noopener nofollow">https://blog.akvicor.com/posts/ufw/forward/</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.060009442655092594" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-08 01:01">2025-05-08 01:00</span>&nbsp;
<a href="https://www.cnblogs.com/akvicor">Akvicor</a>&nbsp;
阅读(<span id="post_view_count">6</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18865404);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18865404', targetLink: 'https://www.cnblogs.com/akvicor/p/18865404', title: 'ufw配置自动管理端口转发和DNAT+MASQUERADE' })">举报</a>
</div>
        