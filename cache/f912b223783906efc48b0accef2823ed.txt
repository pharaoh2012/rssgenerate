
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/yupi/p/18961201" title="发布于 2025-07-02 11:17">
    <span role="heading" aria-level="2">我救了一个网站，性能提升了1500 多倍！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/2225420/202507/2225420-20250702104113688-355438185.png" alt="我救了一个网站，性能提升了1500 多倍！" class="desc_img">
        虽然这并不是所有的网站优化方法（还有后端优化、Web Workers、Service Worker、WebAssembly 等等），但已经能够覆盖绝大多数优化场景了。大家可以按照上面提到的方法，一步步按需优化自己的网站。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p class="md-end-block md-heading"><span class="md-plain">这是一个加载慢慢慢慢慢到不行的网站，据说是由一位低级程序员鱼皮开发的，等了几分钟都没加载完：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751358807614-3678c190-c95e-415d-9157-15614d10637d.png"><img data-src="https://pic.yupi.icu/1/1751358807614-3678c190-c95e-415d-9157-15614d10637d.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">你能想到多少种办法，来拯救这个网站的加载速度呢？</span></p>
<p class="md-end-block md-p"><span class="md-plain">我能想到 <span class="md-pair-s "><strong>至少 12 种</strong><span class="md-plain">，如果你能想到更多方法，先受我一拜，你真的很厉害；如果你想到的方法比我少，那么这期内容，一定会让你有收获。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">下面我们就来聊聊《网站性能优化》。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">如何测量网站性能？</span></h2>
<p class="md-end-block md-p"><span class="md-plain">衡量网站性能的指标非常多，比如首屏加载时间、白屏时间、可交互时间等等。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751346004371-a76e8350-e620-41b2-a541-eb598e903477.png"><img data-src="https://pic.yupi.icu/1/1751346004371-a76e8350-e620-41b2-a541-eb598e903477.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">但这里为了帮助大家理解，我们主要关注用户最直观能感受到的 <span class="md-pair-s "><strong>网站加载时长</strong><span class="md-plain">。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">怎么测量网站加载时长呢？</span></p>
<p class="md-end-block md-p"><span class="md-plain">最简单的方法就是按 F12 打开浏览器的开发者工具，切换到 Network 网络面板，刷新页面就能看到每个资源的加载时间了。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751359017153-35193de3-a6bb-4c37-afe3-4a30daf357e3.png"><img data-src="https://pic.yupi.icu/1/1751359017153-35193de3-a6bb-4c37-afe3-4a30daf357e3.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">当然，还有更专业的网站性能分析工具，在本期的最后会分享。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">网站性能优化的关键</span></h2>
<p class="md-end-block md-p"><span class="md-plain">虽然网站性能优化的方法非常多，但思路很简单。</span></p>
<p class="md-end-block md-p"><span class="md-plain">问个问题，大家都收过快递吧？快递是怎么送到你家的呢？</span></p>
<p class="md-end-block md-p"><span class="md-plain">首先，商家从仓库把商品打包，然后通过物流网络和快递员配送到你手里，你拆开包裹就能使用了。</span></p>
<p class="md-end-block md-p"><span class="md-plain">访问网站也是一样的：<span class="md-pair-s "><strong>从服务器获取到网站文件，然后在浏览器中加载</strong><span class="md-plain">。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">要让网站访问更快，我们可以从三个方向来优化：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">网站传输更快</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">网站体积更小</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">网站加载更快</span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-plain">下面我们就按照这些方向，来优化现在这个要加载 3 分多钟的辣鸡网站，看看最后能优化到多少秒。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701163951767.png"><img data-src="https://pic.yupi.icu/1/image-20250701163951767.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">一、网站传输优化</span></h2>
<p class="md-end-block md-p"><span class="md-plain">想要更快获取到网站文件，我们可以按照网站文件传输的路径 <span class="md-pair-s "><strong>服务器 =&gt; 网络传输 =&gt; 客户端</strong><span class="md-plain"> 进行优化。</span></span></span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">升级服务器配置</span></h3>
<p class="md-end-block md-p"><span class="md-plain">毫无疑问，从服务器获取网站文件是需要网络的，服务器带宽越大，网速越快，网站文件下载越快。</span></p>
<p class="md-end-block md-p"><span class="md-plain">所以如果你不知道怎么优化网站性能，最简单粗暴的方法就是加钱！升级服务器的带宽！</span></p>
<p class="md-end-block md-p"><span class="md-plain">比如我把 2M 带宽的小水管升级到 8M，网站加载时长就从 3 分钟优化到了 40 秒，速度优化了 4 倍多！</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701164218189.png"><img data-src="https://pic.yupi.icu/1/image-20250701164218189.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">不过一般来说，对于个人小网站，1-5M 就够用了，毕竟带宽挺贵的。</span></p>
<p class="md-end-block md-p"><span class="md-plain">有同学会问了，光升级带宽就够了么？升级内存、CPU、硬盘有没有用？</span></p>
<p class="md-end-block md-p"><span class="md-plain">这就要看你网站的类别了，对于纯静态网站来说，服务器要做的就是把网站文件发送出去，这个过程主要受带宽限制。但如果你的网站有复杂的后端逻辑，那 CPU 和内存就很重要了。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">CDN 缓存加速</span></h3>
<p class="md-end-block md-p"><span class="md-plain">如果用户离我们的网站服务器较远，传输网站文件的时间就会更长，很影响体验。</span></p>
<p class="md-end-block md-p"><span class="md-plain">如何解决这个问题呢？我们不妨类比一下网购，平台会在全国建立区域仓库，提前把热门商品分配到各地仓库，用户下单后从最近的仓库发货，而不是都从总仓发货，就能更快收货。</span></p>
<p class="md-end-block md-p"><span class="md-plain">这就是 CDN 内容分发网络的原理，提前从源服务器获取到网站文件并缓存到全国各地的节点，用户访问时就可以直接从最近的节点获取资源。不仅延迟更低，而且能同时支持更多用户的访问。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701171252966.png"><img alt="CDN 架构图" data-src="https://pic.yupi.icu/1/image-20250701171252966.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">我们使用云服务平台配置一下 CDN，指定原始网站服务器作为源站。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701164325513.png"><img data-src="https://pic.yupi.icu/1/image-20250701164325513.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">然后设置缓存，可以只缓存图片等媒体资源，也可以缓存整套网站文件，这里我全都要。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701164356857.png"><img data-src="https://pic.yupi.icu/1/image-20250701164356857.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">试一下效果，首次访问会比较慢，因为 CDN 节点还没有缓存，需要从网站服务器拉取文件；之后速度就飚起来了，直接从 40 秒优化到了 6 秒，性能优化了 6 倍多！效果显著。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701164505057.png"><img data-src="https://pic.yupi.icu/1/image-20250701164505057.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">不过 CDN 可是把双刃剑，按流量计费，鉴于我被刷了上万元流量费的血泪经验，建议 CDN 能不用就不用，即使要用 CDN 也要做好访问频率限制、用量封顶配置和监控告警。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701164554987.png"><img data-src="https://pic.yupi.icu/1/image-20250701164554987.png" class="lazyload"></span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">浏览器缓存</span></h3>
<p class="md-end-block md-p"><span class="md-plain">除了 CDN 外，但还有一个更彻底的优化方案：<span class="md-pair-s "><strong>让网站文件根本不用传输</strong><span class="md-plain">！</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">这就是 <span class="md-pair-s "><strong>浏览器缓存</strong><span class="md-plain"> 的作用，将已经请求过的网站文件存储到用户本地，下次再访问网站时，都不用去找服务器了，直接从本地加载资源。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">我们可以通过 Web 服务器的 HTTP 缓存头配置或者 CDN 的浏览器缓存过期配置来更改缓存策略，更新不频繁的网站缓存时间可以设置长一些。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701164636187.png"><img alt="CDN 浏览器缓存过期配置" data-src="https://pic.yupi.icu/1/image-20250701164636187.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">我这里设置为 1 小时，效果很明显，直接从 6 秒优化到了 1.69 秒，不过理论上还可以更快。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701164740757.png"><img data-src="https://pic.yupi.icu/1/image-20250701164740757.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">这样一来，我们就形成了一个完整的网站缓存体系：<span class="md-pair-s "><strong>CDN 缓存解决地理距离问题，浏览器缓存解决重复访问的问题</strong><span class="md-plain">。实际情况下两种方法建议结合使用。</span></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">升级 HTTP 协议</span></h3>
<p class="md-end-block md-p"><span class="md-plain">此外，想要升级网站传输的速度，可以升级请求协议到 HTTP/2。</span></p>
<p class="md-end-block md-p"><span class="md-plain">相比于 HTTP/1.1，HTTP/2 最大的改进是 <span class="md-pair-s "><strong>多路复用</strong><span class="md-plain">。HTTP/1.1 虽然可以建立多个连接，但每个连接内的请求必须按顺序处理，容易产生队头阻塞问题。而 HTTP/2 在单个连接上就能同时处理多个请求，真正实现了并行传输。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">升级 HTTP/2 的方式很简单，只需要在 Web 服务器（比如 Nginx）添加配置：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-variable-2">server&nbsp;{<br><span>&nbsp; &nbsp;<span class="cm-string-2">listen&nbsp;<span class="cm-number">443 ssl&nbsp;http2; &nbsp;<span class="cm-comment"># 开启HTTP/2支持<br><span>&nbsp; &nbsp;<span class="cm-string-2">server_name&nbsp;<span class="cm-number">your-domain.com;<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-keyword">ssl_certificate&nbsp;/path/to/cert.pem;<br><span>&nbsp; &nbsp;<span class="cm-keyword">ssl_certificate_key&nbsp;/path/to/key.pem;<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment"># 其他配置...<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">如果你用的是 CDN，只需要在 CDN 配置页面一键开启 HTTP/2 即可：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701165037465.png"><img data-src="https://pic.yupi.icu/1/image-20250701165037465.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">测试一下效果，这次没有用到本地缓存，网站加载时长也从 6 秒缩短到了 1.6 秒，性能优化了 3 倍多！</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701165146579.png"><img data-src="https://pic.yupi.icu/1/image-20250701165146579.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">仅仅点了一下按钮，速度就上来了，是不是没想到？</span></p>
<p class="md-end-block md-p"><span class="md-plain">那你可能问了，现在不是还有 HTTP/3 吗？</span></p>
<p class="md-end-block md-p"><span class="md-plain">HTTP/3 确实更先进，它基于 QUIC 协议，有更快的连接建立速度、更好的多路复用性能和更少的队头阻塞问题，但兼容性和稳定性还需要时间验证，选用 HTTP/2 就足够了。</span></p>
<p class="md-end-block md-p"><span class="md-plain">至此，在没有改变网站本身的情况下，我们就已经把网站加载时间优化到了秒级！</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">二、网站体积优化</span></h2>
<p class="md-end-block md-p"><span class="md-plain">如果把网站文件当做货物，体积越小，自然传送越快。</span></p>
<p class="md-end-block md-p"><span class="md-plain">如何优化网站文件体积呢？</span></p>
<p class="md-end-block md-p"><span class="md-plain">核心就 2 个字 —— <span class="md-pair-s "><strong>压缩</strong><span class="md-plain">。</span></span></span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">网站资源压缩</span></h3>
<p class="md-end-block md-p"><span class="md-plain">首先可以压缩网站引用的媒体资源，比如图片、音视频、字体文件等等。</span></p>
<p class="md-end-block md-p"><span class="md-plain">很多朋友都知道这个道理，但是经常忽略。不信打开浏览器控制台看看你们自己的网站，有哪些资源可以进一步优化呢？</span></p>
<p class="md-end-block md-p"><span class="md-plain">对很多网站来说，图片是消耗流量较多的一类资源，因此我们性能优化时，要重点关注图片。</span></p>
<p class="md-end-block md-p"><span class="md-plain">只需要把 JPG 和 PNG 的图片统一压缩为 WebP（或 AVIF）格式，这样就能减少 20% 以上的文件体积；想追求更高的压缩比例，还可以调整图片压缩的质量，一般 80% 左右对原图的影响是可以接受的。</span></p>
<p class="md-end-block md-p"><span class="md-plain">举个例子，我让 AI 通过编写 Python 脚本批量压缩网站内的图片，总体积直接减少了 20 多倍！</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751277084844-a48f3f53-0017-4175-84cf-a589d0001803.png"><img alt="img" data-src="https://pic.yupi.icu/1/1751277084844-a48f3f53-0017-4175-84cf-a589d0001803.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">再次访问网站时，相比之前从服务器加载耗时 40 秒，这次直接缩短到了 2 秒！竟然跟使用 CDN + HTTP 2 的效果旗鼓相当，优化了 20 倍！</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701165304875.png"><img data-src="https://pic.yupi.icu/1/image-20250701165304875.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">而且不仔细看的话，你能分辨出来优化前后图片的区别么？</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751277342885-6acd861a-dcff-493f-98ca-4be2c3905aea.png"><img data-src="https://pic.yupi.icu/1/1751277342885-6acd861a-dcff-493f-98ca-4be2c3905aea.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">需要注意的是，如果你的网站允许用户自主上传图片，一定要在后端服务器对这些图片进行压缩，否则可能就会出现下图这种惨状：一个用户头像都消耗了 5M 流量。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751254875176-e11155d8-1256-4ec6-a1e2-5de80431c6c2.png"><img data-src="https://pic.yupi.icu/1/1751254875176-e11155d8-1256-4ec6-a1e2-5de80431c6c2.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">网站代码压缩</span></h3>
<p class="md-end-block md-p"><span class="md-plain">除了引用的资源外，网站代码本身也是可以压缩的。</span></p>
<p class="md-end-block md-p"><span class="md-plain">代码压缩的原理很好理解，去掉代码中的空格、注释、换行，把变量名缩短就可以了。举个例子：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/%E5%8E%8B%E7%BC%A9%E5%89%8D%E5%90%8E.png"><img data-src="https://pic.yupi.icu/1/%E5%8E%8B%E7%BC%A9%E5%89%8D%E5%90%8E.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">虽然网站代码压缩的工具网上一抓一大把（比如 <span class="md-meta-i-c  md-link"><a href="https://www.minifier.org/" rel="noopener nofollow"><span class="md-plain">Minifier</span></a><span class="md-plain"> 和 <span class="md-meta-i-c  md-link"><a href="https://jscompress.com/" rel="noopener nofollow"><span class="md-plain">JSCompress</span></a><span class="md-plain">），但一般我们不需要手动压缩代码。对于独立的 CSS 和 JS 脚本文件，可以直接使用 <span class="md-meta-i-c  md-link"><a href="https://www.bootcdn.cn/" rel="noopener nofollow"><span class="md-plain">官方提供的 Min 压缩版本</span></a><span class="md-plain">。</span></span></span></span></span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701170016615.png"><img data-src="https://pic.yupi.icu/1/image-20250701170016615.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">而对于目前主流的 Vue / React 前端工程化项目，一般会使用打包工具（比如 Vite / Webpack）自动对代码文件进行优化、压缩和打包。</span></p>
<p class="md-end-block md-p"><span class="md-plain">比如经典的 Tree Shaking（摇树优化），就像摇树一样，通过静态分析，把代码中没用到的地方 “摇” 掉，从而减小 JS 文件体积。</span></p>
<p class="md-end-block md-p"><span class="md-plain">来试试看，我的网站项目使用了 Vite 作为打包工具，添加这么一段配置，然后构建和部署项目。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701170124266.png"><img data-src="https://pic.yupi.icu/1/image-20250701170124266.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">对比一下，效果立竿见影！原本 363 KB 的代码，压缩后只有 159 KB，减少到了一半！</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701170309721.png"><img data-src="https://pic.yupi.icu/1/image-20250701170309721.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">网站加载时长也进一步缩短到了 1.62 秒，又优化了 20%。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701170341720.png"><img data-src="https://pic.yupi.icu/1/image-20250701170341720.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">Gzip 传输压缩</span></h3>
<p class="md-end-block md-p"><span class="md-plain">除了手动压缩外，还可以在网站传输时利用 Gzip 实现自动压缩。</span></p>
<p class="md-end-block md-p"><span class="md-plain">它的原理也很简单，浏览器和服务器之间有个约定：</span></p>
<p class="md-end-block md-p"><span class="md-plain">1）浏览器请求网站时通过请求头告诉服务器：“我支持 gzip 压缩”。</span></p>
<p class="md-end-block md-p"><span class="md-plain">示例 Accept-Encoding 请求头：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>GET /index.html HTTP/1.1<br><span>Host: codefather.cn<br><span>Accept-Encoding: gzip, deflate, br</span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">2）服务器收到这个请求，如果开启了 gzip 压缩，会把文件压缩后再发送，并且通过响应头告诉浏览器：“这是压缩过的”。</span></p>
<p class="md-end-block md-p"><span class="md-plain">示例 Content-Encoding 响应头：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>HTTP/1.1 200 OK<br><span>Content-Type: text/html<br><span>Content-Encoding: gzip<br><span>Content-Length: 1024</span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">3）浏览器收到文件后，会自动进行解压。</span></p>
<p class="md-end-block md-p"><span class="md-plain">让我们测试一下，开启 gzip 的方式很简单，只需要在 Web 服务器中添加配置：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment"># 开启gzip压缩<br><span><span class="cm-keyword">gzip&nbsp;on;<br><span><span>​<br><span><span class="cm-comment"># 启用gzip压缩的HTTP版本<br><span><span class="cm-keyword">gzip_http_version&nbsp;1.1;<br><span><span>​<br><span><span class="cm-comment"># 压缩级别 (1-9)<br><span><span class="cm-comment"># 1: 最快压缩，压缩率最低<br><span><span class="cm-comment"># 9: 最慢压缩，压缩率最高<br><span><span class="cm-comment"># 6: 平衡压缩速度和压缩率的推荐值<br><span><span class="cm-keyword">gzip_comp_level&nbsp;6;<br><span><span>​<br><span><span class="cm-comment"># 小于1KB的文件不压缩<br><span><span class="cm-comment"># 小文件压缩后可能反而变大，且消耗CPU资源<br><span><span class="cm-keyword">gzip_min_length&nbsp;1024;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">然后我们利用 CURL 工具分别发送不开启 Gzip 和开启 Gzip 的两个请求：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment"># 开启 Gzip - 详细版<br><span><span class="cm-builtin">curl&nbsp;<span class="cm-attribute">-H&nbsp;<span class="cm-string">"Accept-Encoding: gzip"&nbsp;<span class="cm-attribute">-w&nbsp;<span class="cm-string">"Gzip: %{size_download} bytes"&nbsp;<span class="cm-attribute">-o&nbsp;/dev/null&nbsp;<span class="cm-attribute">-s&nbsp;http://love.codefather.cn/assets/index-d746a13e.js<br><span><span>​<br><span><span class="cm-comment"># 不开启 Gzip - 详细版 &nbsp;<br><span><span class="cm-builtin">curl&nbsp;<span class="cm-attribute">-H&nbsp;<span class="cm-string">"Accept-Encoding: identity"&nbsp;<span class="cm-attribute">-w&nbsp;<span class="cm-string">"原始: %{size_download} bytes"&nbsp;<span class="cm-attribute">-o&nbsp;/dev/null&nbsp;<span class="cm-attribute">-s&nbsp;http://love.codefather.cn/assets/index-d746a13e.js</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">发现开启 Gzip 压缩后，文件大小能减少一半多！</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701170620300.png"><img data-src="https://pic.yupi.icu/1/image-20250701170620300.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">但由于我们网站的代码文件体积本来就不大，所以开启 gzip 后的优化效果不会那么明显，但仍然建议开启。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">三、网站加载优化</span></h2>
<p class="md-end-block md-p"><span class="md-plain">前面我们优化了网站传输和网站体积，HTML 等网站文件能更快到达用户浏览器。但浏览器接下来还需要加载脚本、图片等大量资源，并且动态请求后端数据。</span></p>
<p class="md-end-block md-p"><span class="md-plain">这个过程也是可以优化的，也是最有意思的，我们可以通过很多策略来优化网站的加载速度。</span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">加载策略</span></h3>
<p class="md-end-block md-p"><span class="md-plain">首先是几种典型的加载策略，目标是 <span class="md-pair-s "><strong>让用户在合适的时机获得合适的内容</strong><span class="md-plain">。</span></span></span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">1、延迟加载</span></h4>
<p class="md-end-block md-p"><span class="md-pair-s "><strong>懒加载</strong><span class="md-plain"> 是最常用的延迟加载技术，核心思想很简单：用户看不到的内容就先不加载。这种策略特别适合长页面和图片较多的网站。</span></span></p>
<p class="md-end-block md-p"><span class="md-plain">比如我们通过 HTML 图片标签自带的 lazy 属性实现懒加载：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">img&nbsp;<span class="cm-attribute">src=<span class="cm-string">"image.jpg"&nbsp;<span class="cm-attribute">loading=<span class="cm-string">"lazy"&nbsp;<span class="cm-attribute">alt=<span class="cm-string">"懒加载图片"<span class="cm-tag cm-bracket">&gt;</span></span></span></span></span></span></span></span></span></span></pre>
<blockquote>
<p class="md-end-block md-p"><span class="md-plain">如果想实现更严格的懒加载，可以采用 Intersection Observer 来观察图片是否进入视窗</span></p>
</blockquote>
<p class="md-end-block md-p"><span class="md-plain">测试一下效果，首屏只用了 339 毫秒就加载完成了，加载时长又缩短了 5 倍！</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701170806093.png"><img data-src="https://pic.yupi.icu/1/image-20250701170806093.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">当用户滚动页面到对应的位置时，图片才开始加载，不仅大幅减少了首屏加载时间，而且节约了流量。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701170829493.png"><img data-src="https://pic.yupi.icu/1/image-20250701170829493.png" class="lazyload"></span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">2、按需加载</span></h4>
<p class="md-end-block md-p"><span class="md-plain">利用 <span class="md-pair-s "><strong>代码分割</strong><span class="md-plain"> 技术，可以把原本庞大的代码包拆分成多个小模块，根据用户实际需要的功能来加载对应代码。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">比如之前网站所有页面的 CSS 和 JS 文件是合并在一起的，现在可以按照页面分割成多个小文件，访问哪个页面就加载哪个页面的代码：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 传统方式：一次性加载所有页面代码<br><span><span class="cm-keyword">import&nbsp;<span class="cm-def">UserProfile&nbsp;<span class="cm-keyword">from&nbsp;<span class="cm-string">'./UserProfile.vue'<br><span><span>​<br><span><span class="cm-comment">// 代码分割：访问页面时才加载对应代码<br><span><span class="cm-keyword">const&nbsp;<span class="cm-def">UserProfile&nbsp;<span class="cm-operator">=&nbsp;()&nbsp;<span class="cm-operator">=&gt;&nbsp;<span class="cm-keyword">import(<span class="cm-string">'./UserProfile.vue')</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">这样一来，访问网站首页时，只按需加载和首页有关的部分代码，减少了网站首次加载的文件体积，首屏加载速度就能大幅提升，缩短到 162 毫秒，又优化了 1 倍！</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701171000992.png"><img data-src="https://pic.yupi.icu/1/image-20250701171000992.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">之后当访问其他页面时，才会加载对应的网站文件。</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">3、分层加载</span></h4>
<p class="md-end-block md-p"><span class="md-plain">这个策略的核心是 <span class="md-pair-s "><strong>先快后好</strong><span class="md-plain">，先让用户立即看到内容，再根据情况提升质量，避免用户等待的焦虑感。常见的实现方式有 2 种。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">首先是 <span class="md-pair-s "><strong>缩略图</strong><span class="md-plain">。在列表页显示低清小图，用户点击某个感兴趣的内容后再加载高清大图，这样几乎不影响用户体验，又节省了流量。实现方法很简单，为每个高清原图额外生成一个缩略图，不同的页面加载不同的图片就好。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">这样一来，首屏加载的资源更小，加载时长缩短到了 118 毫秒，又优化了 25%！</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701171106022.png"><img data-src="https://pic.yupi.icu/1/image-20250701171106022.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">还有一种更高级的策略 —— <span class="md-pair-s "><strong>渐进式加载</strong><span class="md-plain">，先加载低质量内容，再自动加载高质量内容。比如图片会先显示一个模糊的预览，然后逐渐变清晰。这样用户不会看到空白区域和页面错位，浏览体验更丝滑。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701171437264.png"><img data-src="https://pic.yupi.icu/1/image-20250701171437264.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">4、预加载</span></h4>
<p class="md-end-block md-p"><span class="md-plain">这个策略的核心是 <span class="md-pair-s "><strong>预判用户需求</strong><span class="md-plain">，在用户需要访问之前就把资源准备好，让体验更流畅。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">只需要一行代码，就能指定预加载的资源：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">link&nbsp;<span class="cm-attribute">rel=<span class="cm-string">"prefetch"&nbsp;<span class="cm-attribute">href=<span class="cm-string">"next-page.js"<span class="cm-tag cm-bracket">&gt;</span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">举个典型的场景，比如用户浏览博客网站的文章列表时，可以预加载几篇文章详情页，这样用户点击时几乎秒开。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701171606431.png"><img data-src="https://pic.yupi.icu/1/image-20250701171606431.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">但我建议使用预加载前，最好先对网站的结构和访问情况进行分析，关键是要把握好度。预加载太少效果不明显，预加载太多又会产生流量浪费。就像你提前为客人准备了第二天的饭，结果人家当天就走了。</span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">请求优化</span></h3>
<p class="md-end-block md-p"><span class="md-plain">除了几种加载策略外，还有个比较高级的技巧 —— <span class="md-pair-s "><strong>请求合并</strong><span class="md-plain">。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">当你要多次调用后端接口来请求数据时，由于浏览器对同一域名有并发请求数限制（一般是 6 个左右），可能会产生请求排队和阻塞，导致数据加载耗时过长。这时，我们可以让后端提供一个聚合接口，一个接口返回某个页面需要的所有数据。不过这需要你跟后端关系不错，否则你就只能自己搭个 Node.js 中间层来做请求聚合了。</span></p>
<p class="md-end-block md-p"><span class="md-plain">请求网站小图标也是类似的，与其一个个请求图标文件，不如利用 <span class="md-pair-s "><strong>CSS 雪碧图</strong><span class="md-plain"> 特性，把所有小图标合并为一张图片，然后在前端利用 CSS 的 <span class="md-pair-s"><code>background-position</code><span class="md-plain"> 来加载图片的指定位置。</span></span></span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701171703072.png"><img data-src="https://pic.yupi.icu/1/image-20250701171703072.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">这样只需要请求 1 次，就达到了同样的效果，网站的加载时长也会进一步缩短。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701172010114.png"><img data-src="https://pic.yupi.icu/1/image-20250701172010114.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">性能分析关键</span></h2>
<p class="md-end-block md-p"><span class="md-plain">通过前面分享的这些网站优化技巧，最终我们网站的加载时间竟然 <span class="md-pair-s "><strong>从 180 秒优化到了 118 毫秒</strong><span class="md-plain">，性能提升了 1500 多倍！效果还是非常炸裂的，弱网环境也能很快访问网站。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-pair-s "><strong>但这就是极限了么？</strong></span></p>
<p class="md-end-block md-p"><span class="md-plain">可别忘了，我们的体积优化和加载优化并没有使用 CDN 进行演示，那如果我们同时开启 CDN 和 HTTP 2，效果又如何呢？</span></p>
<p class="md-end-block md-p"><span class="md-plain">结果可能让大家失望了，经过我的多次测试，<span class="md-pair-s "><strong>性能并没有明显的提升</strong><span class="md-plain">。我们对网站本身的优化越多，传输数据量就更小，再加上各种不稳定因素，CDN 在提速方面的效果可能就没那么明显了。这就是为什么我建议大家先对网站本身进行优化，CDN 还是要谨慎使用。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">虽然方法教给大家了，怎么合理运用这些方法进行优化，是需要大家持续探索的。记住，性能优化一定是 “<span class="md-pair-s "><strong>针对具体场景，先分析再优化</strong><span class="md-plain">”。因此我们也一定要准备一些网站性能分析的工具，我一般会优先使用浏览器开发者工具内置的 Lighthouse，使用很方便。点击一键分析，就能帮你进行全面的网站性能评估，还给出了很多优化建议，有一些不正是我们今天分享到的方法么？</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701172055132.png"><img data-src="https://pic.yupi.icu/1/image-20250701172055132.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">此外，还有一些免费工具也可以试试看：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://gtmetrix.com/" rel="noopener nofollow"><span class="md-plain">GTmetrix</span></a><span class="md-plain"> - 详细的瀑布图分析 </span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.webpagetest.org/" rel="noopener nofollow"><span class="md-plain">WebPageTest</span></a><span class="md-plain"> - 全球多节点测试</span></span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250701172358271.png"><img data-src="https://pic.yupi.icu/1/image-20250701172358271.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">最后</span></h2>
<p class="md-end-block md-p"><span class="md-plain">OK 以上就是本期内容，虽然这并不是所有的网站优化方法（还有后端优化、Web Workers、Service Worker、WebAssembly 等等），但已经能够覆盖绝大多数优化场景了。大家可以按照上面提到的方法，一步步按需优化自己的网站。</span></p>
<p class="md-end-block md-p"><span class="md-plain">这篇文章鱼皮总共写了 5000 多字，如果对你有帮助，记得 <span class="md-pair-s "><strong>点赞收藏</strong><span class="md-plain"> 支持一下！大家反馈不错的话，我后续会继续分享 <span class="md-pair-s "><strong>后端性能优化的一条龙服务</strong><span class="md-plain">，绝对干货满满，学编程和 AI 的朋友记得关注鱼皮，我们下期见。</span></span></span></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">更多编程学习资源</span></h2>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/course" rel="noopener nofollow"><span class="md-plain">Java前端程序员必做项目实战教程+毕设网站</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/" rel="noopener nofollow"><span class="md-plain">程序员免费编程学习交流社区（自学必备）</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/course/cv" rel="noopener nofollow"><span class="md-plain">程序员保姆级求职写简历指南（找工作必备）</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.mianshiya.com/" rel="noopener nofollow"><span class="md-plain">程序员免费面试刷题网站工具（找工作必备）</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640584449888772098" rel="noopener nofollow"><span class="md-plain">最新Java零基础入门学习路线 + Java教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586673306091521" rel="noopener nofollow"><span class="md-plain">最新Python零基础入门学习路线 + Python教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586014108303362" rel="noopener nofollow"><span class="md-plain">最新前端零基础入门学习路线 + 前端教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586867363954689" rel="noopener nofollow"><span class="md-plain">最新数据结构和算法零基础入门学习路线 + 算法教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1644279832026075138" rel="noopener nofollow"><span class="md-plain">最新C++零基础入门学习路线、C++教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1641797333479903234" rel="noopener nofollow"><span class="md-plain">最新数据库零基础入门学习路线 + 数据库教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640589994284695553" rel="noopener nofollow"><span class="md-plain">最新Redis零基础入门学习路线 + Redis教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1641035880439271426" rel="noopener nofollow"><span class="md-plain">最新计算机基础入门学习路线 + 计算机基础教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1641366118197153793" rel="noopener nofollow"><span class="md-plain">最新小程序入门学习路线 + 小程序开发教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="http://sqlmother.yupi.icu/" rel="noopener nofollow"><span class="md-plain">最新SQL零基础入门学习路线 + SQL教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586295529324545" rel="noopener nofollow"><span class="md-plain">最新Linux零基础入门学习路线 + Linux教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640588753362108417" rel="noopener nofollow"><span class="md-plain">最新Git/GitHub零基础入门学习路线 + Git教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640587909942099969" rel="noopener nofollow"><span class="md-plain">最新操作系统零基础入门学习路线 + 操作系统教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640588119619551233" rel="noopener nofollow"><span class="md-plain">最新计算机网络零基础入门学习路线 + 计算机网络教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640588392073150465" rel="noopener nofollow"><span class="md-plain">最新设计模式零基础入门学习路线 + 设计模式教程</span></a></span></p>
</li>
<li class="md-list-item md-focus-container">
<p class="md-end-block md-p md-focus"><span class="md-meta-i-c md-link md-expand"><a href="https://www.code-nav.cn/post/1640648711119892481" rel="noopener nofollow"><span class="md-plain">最新软件工程零基础入门学习路线 + 软件工程教程</span></a></span></p>
</li>
</ul>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-02 11:18">2025-07-02 11:17</span>&nbsp;
<a href="https://www.cnblogs.com/yupi">程序员鱼皮</a>&nbsp;
阅读(<span id="post_view_count">152</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18961201);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18961201', targetLink: 'https://www.cnblogs.com/yupi/p/18961201', title: '我救了一个网站，性能提升了1500 多倍！' })">举报</a>
</div>
        