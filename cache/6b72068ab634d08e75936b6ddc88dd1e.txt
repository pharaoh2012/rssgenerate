
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/javadaydayup/p/19006296" title="发布于 2025-07-26 16:27">
    <span role="heading" aria-level="2">Java注解底层竟然是个Map？</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="案例介绍">案例介绍</h2>
<p><strong>案例一：普通注解用法</strong><br>
下面的代码定义了一个注解 <code>@Test</code>，然后在 <code>AnnotationTest</code> 中获取到这个注解，然后打印出它 <code>value()</code> 方法的值。</p>
<pre><code class="language-java">@Retention(RetentionPolicy.RUNTIME)  
@Target(ElementType.TYPE)  
public @interface Test {  
    String value() default "";  
}

@Test("test")  
public class AnnotationTest {  
    public static void main(String[] args) {  
        Test test = AnnotationTest.class.getAnnotation(Test.class);  
        System.out.println(test.value());  
    }  
}
</code></pre>
<p>执行上面的代码，结果输出如下：<br>
<img src="https://raw.githubusercontent.com/javadaydayup/pictures/main/20250726104933.png" alt="image.png" loading="lazy"></p>
<p><strong>案例二：组合注解用法</strong><br>
下面的代码中尝试从某个类上获取它的注解，然后再从这个注解中获取它上面的注解。组合注解在 Spring 中很常见，比如常用的 <code>@RestController</code>，它实际上就是组合了 <code>@Controller</code> 和 <code>@ResponseBody</code> 这两个注解。</p>
<pre><code class="language-java">@Retention(RetentionPolicy.RUNTIME)  
@Target(ElementType.TYPE)  
public @interface Test {  
    String value() default "";  
}

@Retention(RetentionPolicy.RUNTIME)  
@Target(ElementType.TYPE)  
@Test("composite")  
public @interface TestComposite {  
}

@TestComposite
public class AnnotationTest {  
    public static void main(String[] args) {  
        TestComposite testComposite = AnnotationTest.class.getAnnotation(TestComposite.class);  
        boolean existInProxyObj = testComposite.getClass().isAnnotationPresent(Test.class);  
        System.out.println("是否在动态代理对象的Class对象上存在：" + existInProxyObj);  
        boolean existInOriginal = testComposite.annotationType().isAnnotationPresent(Test.class);  
        System.out.println("是否在原始的Class对象上存在：" + existInOriginal);  
    }  
}

@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Controller
@ResponseBody
public @interface RestController {
    @AliasFor(annotation = Controller.class)
    String value() default "";
}
</code></pre>
<p>执行上面的代码，结果输出如下：<br>
<img src="https://raw.githubusercontent.com/javadaydayup/pictures/main/20250726110955.png" alt="image.png" loading="lazy"><br>
可以看到执行结果在 <code>testComposite.getClass()</code> 返回的 Class 对象上不存在 <code>@Test</code> 这个注解，而是在 <code>testComposite.annotationType()</code> 返回的 Class 对象上才存在 <code>@Test</code> 这个注解。这个问题的原理是什么呢？</p>
<p>先说下结论：</p>
<ul>
<li>使用 <code>@interface</code> 定义了一个注解之后编译得到的  class 文件会默认继承 <code>@Annotation</code> 这个接口；</li>
<li>在代码中获取注解时实际上是获取到的是 JDK 为它创建的一个动态代理对象。这个动态代理对象实现了注解定义的方法，当代码中调用注解的方法获取值时，实际上是调用的这个动态代理对象的方法获取到的值；</li>
<li>接口上修饰的注解无法在其实现类上获取到；</li>
</ul>
<h2 id="源码分析">源码分析</h2>
<p>先来看下 <code>Annotation</code> 接口，它里面定义了 <code>annotationType()</code> 方法，也就是上面组合注解调用的方法，所有注解在编译之后生成的 class 文件都会自动继承该接口。通过查看 <code>@Test</code> 注解编译之后的注解对应的 class 文件，可以看到它继承了 <code>Annotation</code> 接口。代码和执行结果如下：</p>
<pre><code class="language-java">public interface Annotation {
    boolean equals(Object obj);
    
    int hashCode();
    
    String toString();

    Class&lt;? extends Annotation&gt; annotationType();
}
</code></pre>
<p><img src="https://raw.githubusercontent.com/javadaydayup/pictures/main/20250726114729.png" alt="image.png" loading="lazy"></p>
<p>当调用 <code>Class</code> 类中 <code>getAnnotation()</code> 方法获取注解对象时，实际上是从 <code>AnnotationData</code> 的 <code>annotations</code> 属性中获取的，这个属性实际上就是一个 <code>Map</code> 对象，它的 key 是一个注解的 <code>Class</code> 对象，value 是 <code>Annotation</code> 类的一个对象实例，即注解的动态代理对象。代码如下：</p>
<pre><code class="language-java">public &lt;A extends Annotation&gt; A getAnnotation(Class&lt;A&gt; annotationClass) {  
    Objects.requireNonNull(annotationClass);  
    return (A) annotationData().annotations.get(annotationClass);  
}

private static class AnnotationData {  
    // 这里是一个Map结构，
    final Map&lt;Class&lt;? extends Annotation&gt;, Annotation&gt; annotations;  
    final Map&lt;Class&lt;? extends Annotation&gt;, Annotation&gt; declaredAnnotations;  
  
    // Value of classRedefinedCount when we created this AnnotationData instance  
    final int redefinedCount;  
  
    AnnotationData(Map&lt;Class&lt;? extends Annotation&gt;, Annotation&gt; annotations,  
                   Map&lt;Class&lt;? extends Annotation&gt;, Annotation&gt; declaredAnnotations,  
                   int redefinedCount) {  
        this.annotations = annotations;  
        this.declaredAnnotations = declaredAnnotations;  
        this.redefinedCount = redefinedCount;  
    }  
}
</code></pre>
<p>而 <code>AnnotationData</code> 对象的创建则是在 <code>annotationData()</code> 方法中完成的，在这个方法里面实际上调用了 <code>createAnnotationData()</code> 方法来创建 <code>AnnotationData</code> 对象，它首先调用了 <code>AnnotationParser</code> 的 <code>parseAnnotations()</code> 方法生成 <code>Map</code> 对象，然后基于它创建了 <code>AnnotationData</code> 对象，实现对注解的动态代理对象的生成就是在 <code>AnnotationParser</code> 中实现的。</p>
<pre><code class="language-java">private AnnotationData annotationData() {  
    while (true) {
        AnnotationData annotationData = this.annotationData;  
        int classRedefinedCount = this.classRedefinedCount;  
        if (annotationData != null &amp;&amp;  
            annotationData.redefinedCount == classRedefinedCount) {  
            return annotationData;  
        }  

        AnnotationData newAnnotationData = createAnnotationData(classRedefinedCount);   
        if (Atomic.casAnnotationData(this, annotationData, newAnnotationData)) {  
            return newAnnotationData;  
        }  
    }  
}

private AnnotationData createAnnotationData(int classRedefinedCount) {  
    // 处理当前类的注解
    Map&lt;Class&lt;? extends Annotation&gt;, Annotation&gt; declaredAnnotations =  
        AnnotationParser.parseAnnotations(getRawAnnotations(), getConstantPool(), this);  
    Class&lt;?&gt; superClass = getSuperclass();  
    Map&lt;Class&lt;? extends Annotation&gt;, Annotation&gt; annotations = null;  
    // 处理父类的注解
    if (superClass != null) {  
        Map&lt;Class&lt;? extends Annotation&gt;, Annotation&gt; superAnnotations =  
            superClass.annotationData().annotations;  
        for (Map.Entry&lt;Class&lt;? extends Annotation&gt;, Annotation&gt; e : superAnnotations.entrySet()) {  
            Class&lt;? extends Annotation&gt; annotationClass = e.getKey();  
            if (AnnotationType.getInstance(annotationClass).isInherited()) {  
                if (annotations == null) { // lazy construction  
                    annotations = new LinkedHashMap&lt;&gt;((Math.max(  
                            declaredAnnotations.size(),  
                            Math.min(12, declaredAnnotations.size() + superAnnotations.size())  
                        ) * 4 + 2) / 3  
                    );  
                }  
                annotations.put(annotationClass, e.getValue());  
            }  
        }  
    }  
    if (annotations == null) {  
        annotations = declaredAnnotations;  
    } else {  
        annotations.putAll(declaredAnnotations);  
    }  
    // 创建AnnotationData对象
    return new AnnotationData(annotations, declaredAnnotations, classRedefinedCount);  
}
</code></pre>
<p>在 <code>AnnotationParser</code> 中最终会调用到它的 <code>parseAnnotation2()</code> 方法，在该方法中从二进制流中解析到注解的类型以及它的定义成员和值的映射关系。然后在 <code>annotationForMap()</code>方法中创建动态代理对象，这个动态代理的方法的调用都会调用到 <code>AnnotationInvocationHandler</code> 中。代码如下：</p>
<pre><code class="language-java">private static Annotation parseAnnotation2(ByteBuffer buf,  
    ConstantPool constPool,  
    Class&lt;?&gt; container,  
    boolean exceptionOnMissingAnnotationClass,  
    Class&lt;? extends Annotation&gt;[] selectAnnotationClasses) {  
    int typeIndex = buf.getShort() &amp; 0xFFFF;  
    Class&lt;? extends Annotation&gt; annotationClass = null;  
    String sig = "[unknown]";  
    try {  
        try {  
            sig = constPool.getUTF8At(typeIndex);  
            // 这里解析到注解的实际类型
            annotationClass = (Class&lt;? extends Annotation&gt;)parseSig(sig, container);  
        } catch (IllegalArgumentException ex) {  
            // support obsolete early jsr175 format class files  
            annotationClass = (Class&lt;? extends Annotation&gt;)constPool.getClassAt(typeIndex);  
        }  
    } catch (NoClassDefFoundError e) {  
        // 省略代码
    }    

    // 这里解析到成员和值的映射关系
    Map&lt;String, Object&gt; memberValues =  
        new LinkedHashMap&lt;String, Object&gt;(type.memberDefaults());  

    // 省略代码


    return annotationForMap(annotationClass, memberValues);  
}

public static Annotation annotationForMap(
    final Class&lt;? extends Annotation&gt; type, final Map&lt;String, Object&gt; memberValues) {  
    return AccessController.doPrivileged(new PrivilegedAction&lt;Annotation&gt;() {  
        public Annotation run() {  
            return (Annotation) Proxy.newProxyInstance(  
                type.getClassLoader(), new Class&lt;?&gt;[] { type },  
                new AnnotationInvocationHandler(type, memberValues));  
        }});  
}
</code></pre>
<p><code>AnnotationInvocationHandler</code> 实现了 <code>InvocationHandler</code> 接口，而 <code>InvocationHandler</code> 则是实现动态代理的老朋友了。在 <code>AnnotationInvocationHandler</code> 的 <code>invoke()</code> 方法中根据当前调用的方法获取名称，然后根据名称从 Map 中获取中对应的值，然后返回，这就是在代码中调用注解的方法能够拿到对应的设置的值的原理，底层的实现就是一个 Map。</p>
<pre><code class="language-java">class AnnotationInvocationHandler implements InvocationHandler, Serializable {  
    private static final long serialVersionUID = 6182022883658399397L;  
    // 这里的type就是对应的注解类型
    private final Class&lt;? extends Annotation&gt; type;  
    private final Map&lt;String, Object&gt; memberValues;  
  
    public Object invoke(Object proxy, Method method, Object[] args) { 
        // 这里获取到对应方法的名称 
        String member = method.getName();  
        Class&lt;?&gt;[] paramTypes = method.getParameterTypes();  
  
        // Handle Object and Annotation methods  
        if (member.equals("equals") &amp;&amp; paramTypes.length == 1 &amp;&amp;  
            paramTypes[0] == Object.class)  
            return equalsImpl(args[0]);  
        if (paramTypes.length != 0)  
            throw new AssertionError("Too many parameters for an annotation method");  
  
        switch(member) {  
        case "toString":  
            return toStringImpl();  
        case "hashCode":  
            return hashCodeImpl();  
        case "annotationType":  
            return type;  
        }  
  
        // 根据方法的名称从Map中映射获取到对应的值返回
        Object result = memberValues.get(member);  
  
        if (result == null)  
            throw new IncompleteAnnotationException(type, member);  
  
        if (result instanceof ExceptionProxy)  
            throw ((ExceptionProxy) result).generateException();  
  
        if (result.getClass().isArray() &amp;&amp; Array.getLength(result) != 0)  
            result = cloneArray(result);  
  
        return result;  
    }
}
</code></pre>
<p>在 Java 程序启动的时候设置参数 <code>-Dsun.misc.ProxyGenerator.saveGeneratedFiles=true</code> 可以让 JDK 把给注解生成的动态代理类的 Class 文件保存到磁盘上。下面是 JDK 给 <code>@TestComposite</code> 注解生成的动态代理类，可以看到它内部有个 <code>InvocationHandler</code> 类型的实例变量，当调用 <code>annotationType()</code> 方法时，实际上代理到了 <code>InvocationHandler</code> 的 <code>invoke()</code> 方法中。代码如下：</p>
<pre><code class="language-java">public final class $Proxy1 extends Proxy implements TestComposite {  
    private static Method m1;  
    private static Method m2;  
    private static Method m3;  
    private static Method m0;  
  
    public $Proxy1(InvocationHandler var1) throws  {  
        super(var1);  
    }  
  
    public final boolean equals(Object var1) throws  {  
        try {  
            return (Boolean)super.h.invoke(this, m1, new Object[]{var1});  
        } catch (RuntimeException | Error var3) {  
            throw var3;  
        } catch (Throwable var4) {  
            throw new UndeclaredThrowableException(var4);  
        }  
    }  
  
    public final String toString() throws  {  
        try {  
            return (String)super.h.invoke(this, m2, (Object[])null);  
        } catch (RuntimeException | Error var2) {  
            throw var2;  
        } catch (Throwable var3) {  
            throw new UndeclaredThrowableException(var3);  
        }  
    }  
  
    public final Class annotationType() throws  {  
        try {  
            return (Class)super.h.invoke(this, m3, (Object[])null);  
        } catch (RuntimeException | Error var2) {  
            throw var2;  
        } catch (Throwable var3) {  
            throw new UndeclaredThrowableException(var3);  
        }  
    }  
  
    public final int hashCode() throws  {  
        try {  
            return (Integer)super.h.invoke(this, m0, (Object[])null);  
        } catch (RuntimeException | Error var2) {  
            throw var2;  
        } catch (Throwable var3) {  
            throw new UndeclaredThrowableException(var3);  
        }  
    }  
  
    static {  
        try {  
            m1 = Class.forName("java.lang.Object").getMethod("equals", Class.forName("java.lang.Object"));  
            m2 = Class.forName("java.lang.Object").getMethod("toString");  
            m3 = Class.forName("TestComposite").getMethod("annotationType");  
            m0 = Class.forName("java.lang.Object").getMethod("hashCode");  
        } catch (NoSuchMethodException var2) {  
            throw new NoSuchMethodError(((Throwable)var2).getMessage());  
        } catch (ClassNotFoundException var3) {  
            throw new NoClassDefFoundError(((Throwable)var3).getMessage());  
        }  
    }  
}
</code></pre>
<h2 id="问题解答">问题解答</h2>
<p>基于以上分析来回答一下组合注解那里提出的问题：为什么 <code>testComposite.getClass()</code> 返回的 <code>Class</code> 对象上不存在 <code>@Test</code> 这个注解，而是在 <code>testComposite.annotationType()</code> 返回的 <code>Class</code> 对象上才存在 <code>@Test</code> 这个注解呢？</p>
<p><code>testComposite.getClass()</code> 方法返回的 <code>Class</code> 对象实际上就是上面的 <code>$Proxy1.class</code>，它实现了 <code>TestComposite</code> 接口，而 <code>@Test</code> 注解实际上是标记在 <code>@TestComposite</code> 注解上的（<strong>本质上是一个接口</strong>），根据 Java 的规则，接口上面的注解在其实现类上是获取不到的，因此<code>testComposite.getClass()</code> 返回的 <code>Class</code> 对象上不存在 <code>@Test</code> 这个注解；</p>
<p><code>testComposite.annotationType()</code> 返回的 <code>Class</code> 对象实际上就是 <code>TestComposite.class</code> 这个 <code>Class</code> 对象，而 <code>@Test</code> 注解实际上是标记在 <code>@TestComposite</code> 注解上的（<strong>本质上是一个接口</strong>），所以它上面是存在 <code>@Test</code> 这个注解的。</p>

</div>
<div id="MySignature" role="contentinfo">
    欢迎大家关注我的公众号【javadaydayup】
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-26 16:27">2025-07-26 16:27</span>&nbsp;
<a href="https://www.cnblogs.com/javadaydayup">javadaydayup</a>&nbsp;
阅读(<span id="post_view_count">105</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19006296);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19006296', targetLink: 'https://www.cnblogs.com/javadaydayup/p/19006296', title: 'Java注解底层竟然是个Map？' })">举报</a>
</div>
        