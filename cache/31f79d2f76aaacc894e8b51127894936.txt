<!----> <meta itemprop="headline" content="🌟 Monorepo 终极指南：告别项目碎片化，拥抱高效开发！"> <meta itemprop="keywords" content="前端,JavaScript"> <meta itemprop="datePublished" content="2025-06-28T07:52:46.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="timeweaver"> <meta itemprop="url" content="https://juejin.cn/user/1341831509187863"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-61fb5e44="">
            🌟 Monorepo 终极指南：告别项目碎片化，拥抱高效开发！
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-61fb5e44=""><div class="author-info-box" data-v-61fb5e44=""><div class="author-name" data-v-61fb5e44=""><a href="/user/1341831509187863/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-292f6e48="" data-v-61fb5e44=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-292f6e48="">
    timeweaver
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-61fb5e44=""><time datetime="2025-06-28T07:52:46.000Z" title="Sat Jun 28 2025 07:52:46 GMT+0000 (Coordinated Universal Time)" class="time" data-v-61fb5e44="">
                    2025-06-28
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-61fb5e44=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-61fb5e44=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-61fb5e44=""></circle></svg> <span class="views-count" data-v-61fb5e44="">
                    302
                  </span> <span class="read-time" data-v-61fb5e44=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-61fb5e44=""><rect width="16" height="16" fill="none" data-v-61fb5e44=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-61fb5e44=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-61fb5e44=""></path></svg>
                    阅读7分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-61fb5e44=""></div> <!----> <!----></div> <!----> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-61fb5e44=""><div class="article-viewer markdown-body cache result"><h2 data-id="heading-0">🌟 Monorepo 终极指南：告别项目碎片化，拥抱高效开发！</h2>
<blockquote>
<p>你是否曾被多个仓库间复杂的依赖关系折磨得痛不欲生？是否在跨项目修改时感到力不从心？是时候拥抱 <strong>Monorepo</strong> 革命了！这篇指南将带你从零开始掌握现代前端开发的核武器！</p>
</blockquote>
<h3 data-id="heading-1">一、什么是 Monorepo？打破传统开发困局</h3>
<h4 data-id="heading-2">1.1 传统多仓库(Multi-repo)的痛点</h4>
<p>想象一下这个场景：你正在开发一个电商平台，有这些独立仓库：</p>
<ul>
<li><code>web-app</code> (用户界面)</li>
<li><code>mobile-app</code> (移动端)</li>
<li><code>admin-panel</code> (管理后台)</li>
<li><code>shared-utils</code> (公共工具库)</li>
</ul>
<p>每次你在 <code>shared-utils</code> 中修复一个 bug 后，需要：</p>
<ol>
<li>发布新版本到 npm</li>
<li>在每个项目中更新依赖</li>
<li>确保所有项目兼容新版本</li>
</ol>
<p><strong>这就是典型的多仓库开发噩梦！</strong> 而 Monorepo 正是解决这些痛点的银弹！</p>
<h4 data-id="heading-3">1.2 Monorepo 的本质</h4>
<p>Monorepo（单一代码库）是一种<strong>将多个相关项目放在同一个代码仓库中</strong>的开发策略。比如：</p>
<pre><code class="hljs language-markdown" lang="markdown">my-monorepo/
├── apps/
│   ├── web-app
│   ├── mobile-app
│   └── admin-panel
└── packages/
<span class="hljs-code">    ├── shared-utils
    └── ui-components
</span></code></pre>
<p><strong>核心优势：</strong></p>
<ul>
<li>🚀 原子提交：一次提交可修改多个相关项目</li>
<li>🔗 轻松跨项目引用：直接引用本地包，无需发布</li>
<li>🔧 统一工具链：共享 ESLint、Prettier 等配置</li>
<li>📦 依赖优化：避免重复安装相同依赖</li>
</ul>
<h3 data-id="heading-4">二、为什么你需要 Monorepo？真实场景分析</h3>
<h4 data-id="heading-5">2.1 适合 Monorepo 的场景</h4>






























<table><thead><tr><th>场景</th><th>传统方式痛点</th><th>Monorepo 解决方案</th></tr></thead><tbody><tr><td><strong>UI 组件库开发</strong></td><td>组件库更新后需要手动同步到各项目</td><td>直接本地引用，实时生效</td></tr><tr><td><strong>全栈应用</strong></td><td>API 修改需要等待后端部署才能测试</td><td>前后端同时修改，一键测试</td></tr><tr><td><strong>微前端架构</strong></td><td>子应用独立部署导致版本冲突</td><td>统一管理，协调部署</td></tr><tr><td><strong>多平台应用</strong></td><td>iOS/Android/Web 功能不同步</td><td>功能同步开发，共享业务逻辑</td></tr></tbody></table>
<h4 data-id="heading-6">2.2 Monorepo 的代价</h4>
<p>没有银弹！Monorepo 也有挑战：</p>
<ul>
<li><strong>仓库体积增长</strong>：需要良好的.gitignore策略</li>
<li><strong>权限管理复杂</strong>：需要精细的代码访问控制</li>
<li><strong>构建时间增加</strong>：需要增量构建工具支持</li>
</ul>
<p>但别担心！现代工具已经完美解决了这些问题 👇</p>
<h3 data-id="heading-7">三、主流 Monorepo 方案实战</h3>
<h4 data-id="heading-8">3.1 PNPM Workspaces - 轻量级首选</h4>
<p><strong>特点：</strong> 极速安装、磁盘空间优化、非扁平化 node_modules</p>
<h5 data-id="heading-9">创建 PNPM Monorepo：</h5>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># 1. 全局安装 pnpm</span>
npm install -g pnpm

<span class="hljs-comment"># 2. 初始化项目</span>
<span class="hljs-built_in">mkdir</span> my-monorepo &amp;&amp; <span class="hljs-built_in">cd</span> my-monorepo
pnpm init

<span class="hljs-comment"># 3. 创建基础结构</span>
<span class="hljs-built_in">mkdir</span> -p apps/web packages/shared

<span class="hljs-comment"># 4. 配置 pnpm-workspace.yaml</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"packages:
  - 'apps/*'
  - 'packages/*'"</span> &gt; pnpm-workspace.yaml

<span class="hljs-comment"># 5. 添加项目</span>
<span class="hljs-built_in">cd</span> apps/web &amp;&amp; pnpm init
<span class="hljs-built_in">cd</span> ../../packages/shared &amp;&amp; pnpm init

<span class="hljs-comment"># 6. 安装依赖 (根目录执行)</span>
pnpm add react -w <span class="hljs-comment"># -w 表示安装到根 workspace</span>
</code></pre>
<h5 data-id="heading-10">跨包引用示例：</h5>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># 在 web 应用中引用 shared 包</span>
pnpm add shared@workspace:* --filter web

<span class="hljs-comment"># 在 shared 包的 package.json 中：</span>
{
  <span class="hljs-string">"name"</span>: <span class="hljs-string">"shared"</span>,
  <span class="hljs-string">"version"</span>: <span class="hljs-string">"1.0.0"</span>,
  <span class="hljs-string">"exports"</span>: {
    <span class="hljs-string">"./utils"</span>: <span class="hljs-string">"./src/utils.js"</span>
  }
}

<span class="hljs-comment"># 在 web 应用中直接使用：</span>
import { formatDate } from <span class="hljs-string">'shared/utils'</span>;
</code></pre>
<h4 data-id="heading-11">3.2 Turborepo - 构建加速神器</h4>
<p><strong>特点：</strong> 智能缓存、并行构建、依赖感知的任务调度</p>
<h5 data-id="heading-12">创建 Turborepo 项目：</h5>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># 1. 使用官方模板</span>
npx create-turbo@latest

<span class="hljs-comment"># 2. 选择模板（这里选 next.js）</span>
? Where would you like to create your turborepo? ./my-turbo-repo
? Select a template: next.js

<span class="hljs-comment"># 3. 安装依赖</span>
<span class="hljs-built_in">cd</span> my-turbo-repo
pnpm install

<span class="hljs-comment"># 4. 查看项目结构</span>
.
├── apps/
│   ├── docs <span class="hljs-comment"># Next.js 文档站点</span>
│   └── web <span class="hljs-comment"># Next.js 主应用</span>
├── packages/
│   ├── eslint-config <span class="hljs-comment"># 共享 ESLint 配置</span>
│   ├── tsconfig <span class="hljs-comment"># 共享 TypeScript 配置</span>
│   └── ui <span class="hljs-comment"># 共享 UI 组件库</span>
</code></pre>
<h5 data-id="heading-13">配置 turbo.json 实现智能构建：</h5>
<pre><code class="hljs language-json" lang="json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"pipeline"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"build"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"dependsOn"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"^build"</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 先构建依赖项</span>
      <span class="hljs-attr">"outputs"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">".next/**"</span><span class="hljs-punctuation">]</span> <span class="hljs-comment">// 缓存输出</span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"test"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"dependsOn"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"build"</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"inputs"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"src/**/*.ts"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"test/**/*.ts"</span><span class="hljs-punctuation">]</span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"dev"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"cache"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span> <span class="hljs-comment">// 开发模式不缓存</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h5 data-id="heading-14">运行命令示例：</h5>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># 并行运行所有项目的 build 命令</span>
pnpm turbo run build

<span class="hljs-comment"># 仅运行 web 应用的开发模式</span>
pnpm turbo run dev --filter=web

<span class="hljs-comment"># 查看构建管线</span>
pnpm turbo run build --graph
</code></pre>
<h4 data-id="heading-15">3.3 Lerna - 经典库发布方案</h4>
<p><strong>特点：</strong> 自动化版本管理、变更日志生成、多包发布</p>
<h5 data-id="heading-16">创建 Lerna Monorepo：</h5>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># 1. 全局安装</span>
npm install -g lerna

<span class="hljs-comment"># 2. 初始化项目</span>
lerna init --independent <span class="hljs-comment"># 独立版本模式</span>

<span class="hljs-comment"># 3. 创建包</span>
lerna create utils
lerna create web-app

<span class="hljs-comment"># 4. 添加内部依赖</span>
lerna add utils --scope=web-app

<span class="hljs-comment"># 5. 配置 lerna.json</span>
{
  <span class="hljs-string">"version"</span>: <span class="hljs-string">"independent"</span>,
  <span class="hljs-string">"npmClient"</span>: <span class="hljs-string">"pnpm"</span>,
  <span class="hljs-string">"command"</span>: {
    <span class="hljs-string">"publish"</span>: {
      <span class="hljs-string">"ignoreChanges"</span>: [<span class="hljs-string">"*.md"</span>]
    }
  }
}
</code></pre>
<h5 data-id="heading-17">版本发布工作流：</h5>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># 1. 修改代码后提交</span>
git commit -m <span class="hljs-string">"feat(utils): add currency formatter"</span>

<span class="hljs-comment"># 2. 创建新版本</span>
lerna version
? Select a new version <span class="hljs-keyword">for</span> utils (currently 1.0.0) Patch (1.0.1)
? Select a new version <span class="hljs-keyword">for</span> web-app (currently 1.2.0) Minor (1.3.0)

<span class="hljs-comment"># 3. 发布到 npm</span>
lerna publish from-package
</code></pre>
<h4 data-id="heading-18">3.4 Nx - 企业级解决方案</h4>
<p><strong>特点：</strong> 项目关系可视化、代码生成器、分布式任务执行</p>
<h5 data-id="heading-19">创建 Nx Monorepo：</h5>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># 1. 使用官方创建工具</span>
npx create-nx-workspace@latest

<span class="hljs-comment"># 2. 选择预设</span>
? What to create? react-monorepo
? Workspace name: my-org
? Application name: storefront
? Default stylesheet format: CSS

<span class="hljs-comment"># 3. 添加 React 库</span>
nx generate @nx/react:lib shared-ui

<span class="hljs-comment"># 4. 查看项目图谱</span>
nx graph
</code></pre>
<h5 data-id="heading-20">使用 Nx 生成器创建组件：</h5>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># 在 shared-ui 库中生成 Button 组件</span>
nx generate @nx/react:component \
  --project=shared-ui \
  --name=Button \
  --<span class="hljs-built_in">export</span>
</code></pre>
<h3 data-id="heading-21">四、方案对比：找到你的最佳拍档</h3>





























































<table><thead><tr><th>特性</th><th>PNPM Workspaces</th><th>Turborepo</th><th>Lerna</th><th>Nx</th></tr></thead><tbody><tr><td><strong>核心优势</strong></td><td>依赖管理</td><td>任务加速</td><td>版本发布</td><td>企业级功能</td></tr><tr><td><strong>安装速度</strong></td><td>⭐⭐⭐⭐⭐</td><td>⭐⭐⭐⭐</td><td>⭐⭐</td><td>⭐⭐⭐</td></tr><tr><td><strong>学习曲线</strong></td><td>平缓</td><td>中等</td><td>中等</td><td>陡峭</td></tr><tr><td><strong>代码生成</strong></td><td>❌</td><td>❌</td><td>❌</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td><strong>可视化</strong></td><td>❌</td><td>基础</td><td>❌</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td><strong>适用场景</strong></td><td>中小项目</td><td>全栈应用</td><td>多包发布</td><td>大型企业应用</td></tr><tr><td><strong>推荐组合</strong></td><td>+ Turborepo</td><td>独立使用</td><td>+ PNPM</td><td>独立使用</td></tr></tbody></table>
<h3 data-id="heading-22">五、Monorepo 最佳实践：避坑指南</h3>
<h4 data-id="heading-23">5.1 目录结构设计</h4>
<p><strong>推荐结构：</strong></p>
<pre><code class="hljs language-bash" lang="bash">company-monorepo/
├── .github/            <span class="hljs-comment"># CI/CD 配置</span>
├── .vscode/            <span class="hljs-comment"># 共享编辑器配置</span>
├── apps/               <span class="hljs-comment"># 应用入口</span>
│   ├── web-app         <span class="hljs-comment"># 主Web应用</span>
│   ├── mobile-app      <span class="hljs-comment"># React Native应用</span>
│   └── admin           <span class="hljs-comment"># 管理后台</span>
├── packages/           <span class="hljs-comment"># 共享包</span>
│   ├── config-eslint   <span class="hljs-comment"># ESLint配置</span>
│   ├── config-ts       <span class="hljs-comment"># TypeScript配置</span>
│   ├── utils           <span class="hljs-comment"># 通用工具函数</span>
│   └── ui-kit          <span class="hljs-comment"># UI组件库</span>
├── tools/              <span class="hljs-comment"># 脚本工具</span>
├── package.json        <span class="hljs-comment"># 根工作区配置</span>
└── turbo.json          <span class="hljs-comment"># Turborepo配置</span>
</code></pre>
<h4 data-id="heading-24">5.2 依赖管理黄金法则</h4>
<ol>
<li>
<p><strong>提升公共依赖</strong>：</p>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># 根目录安装所有项目共享的依赖</span>
pnpm add react react-dom -w
</code></pre>
</li>
<li>
<p><strong>限制依赖版本</strong>：</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-comment">// 根 package.json</span>
<span class="hljs-attr">"pnpm"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"overrides"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"react"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"18.2.0"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"typescript"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"~5.0.4"</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
</li>
<li>
<p><strong>按需安装</strong>：</p>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># 只为 web-app 安装特定依赖</span>
pnpm add axios --filter web-app
</code></pre>
</li>
</ol>
<h4 data-id="heading-25">5.3 优化构建性能的技巧</h4>
<p><strong>Turborepo 缓存策略：</strong></p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"pipeline"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"build"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"dependsOn"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"^build"</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"outputs"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"dist/**"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"build/**"</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"cache"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"test"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"cache"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"inputs"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"src/**/*.ts"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"test/**/*.ts"</span><span class="hljs-punctuation">]</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p><strong>Git 提交优化：</strong></p>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># 只对修改的部分进行构建</span>
pnpm turbo run build --since=main
</code></pre>
<h3 data-id="heading-26">六、真实案例：从零搭建电商平台 Monorepo</h3>
<h4 data-id="heading-27">步骤 1：初始化项目</h4>
<pre><code class="hljs language-bash" lang="bash">npx create-turbo@latest -e with-pnpm ecommerce-platform
<span class="hljs-built_in">cd</span> ecommerce-platform
</code></pre>
<h4 data-id="heading-28">步骤 2：添加微服务</h4>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># 添加 NestJS 后端</span>
pnpm turbo gen init workspace
? Workspace name: product-service
? Which framework? NestJS

<span class="hljs-comment"># 添加 React Native 应用</span>
pnpm turbo gen init workspace
? Workspace name: mobile-app
? Which framework? React Native
</code></pre>
<h4 data-id="heading-29">步骤 3：创建共享包</h4>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># 共享类型定义</span>
pnpm turbo gen init library
? Library name: types
? Which <span class="hljs-built_in">type</span>? Types

<span class="hljs-comment"># 共享 UI 组件</span>
pnpm turbo gen init library
? Library name: ui
? Which <span class="hljs-built_in">type</span>? React Components
</code></pre>
<h4 data-id="heading-30">步骤 4：配置 CI/CD (GitHub Actions)</h4>
<pre><code class="hljs language-yaml" lang="yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">CI</span>
<span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>]

<span class="hljs-attr">jobs:</span>
  <span class="hljs-attr">build:</span>
    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>
    <span class="hljs-attr">steps:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span>
      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">pnpm/action-setup@v2</span>
      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">pnpm</span> <span class="hljs-string">install</span>
      
      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">affected</span> <span class="hljs-string">projects</span>
        <span class="hljs-attr">run:</span> <span class="hljs-string">pnpm</span> <span class="hljs-string">turbo</span> <span class="hljs-string">run</span> <span class="hljs-string">build</span> <span class="hljs-string">--filter=...[origin/main]</span>
        
      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">tests</span>
        <span class="hljs-attr">run:</span> <span class="hljs-string">pnpm</span> <span class="hljs-string">turbo</span> <span class="hljs-string">run</span> <span class="hljs-string">test</span> <span class="hljs-string">--parallel</span>
</code></pre>
<h3 data-id="heading-31">七、常见问题解答</h3>
<h4 data-id="heading-32">Q1：Monorepo 会让仓库变得巨大吗？</h4>
<p><strong>A：</strong> 合理使用 <code>.gitignore</code> 和 <code>pnpm</code> 的存储优化，实际增加的体积很小。例如：</p>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># .gitignore</span>
<span class="hljs-comment"># 忽略所有node_modules</span>
**/node_modules/

<span class="hljs-comment"># 忽略构建产物</span>
**/dist
**/build
**/.next
</code></pre>
<h4 data-id="heading-33">Q2：如何控制访问权限？</h4>
<p><strong>A：</strong> 结合 Git 子目录权限工具：</p>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># 使用 sparse-checkout</span>
git <span class="hljs-built_in">clone</span> --filter=blob:none --sparse https://github.com/monorepo
git sparse-checkout init
git sparse-checkout <span class="hljs-built_in">set</span> apps/web-app
</code></pre>
<h4 data-id="heading-34">Q3：现有项目如何迁移到 Monorepo？</h4>
<p><strong>分步迁移策略：</strong></p>
<ol>
<li>创建 Monorepo 空框架</li>
<li>逐个迁移项目作为子目录</li>
<li>用 <code>git filter-repo</code> 保留历史：
<pre><code class="hljs language-bash" lang="bash">git filter-repo --subdirectory-filter apps/web-app
</code></pre>
</li>
<li>最后统一依赖版本</li>
</ol>
<h3 data-id="heading-35">结语：开启 Monorepo 之旅</h3>
<p>Monorepo 不是一时的潮流，而是现代前端开发的必然选择。无论你选择轻量级的 PNPM Workspaces 还是功能强大的 Nx，都能显著提升开发体验。</p>
<p><strong>立即行动：</strong></p>
<ol>
<li>从小项目开始尝试 Monorepo</li>
<li>选择最适合你团队的工具链</li>
<li>逐步迁移现有项目</li>
<li>享受高效的开发体验！</li>
</ol>
<blockquote>
<p>还在等什么？赶紧创建一个新的 Monorepo 项目，体验飞一般的开发速度吧！如果你在迁移过程中遇到任何问题，欢迎在评论区留言讨论~ ✨</p>
</blockquote>
<hr>
<p><strong>📢 版权声明：</strong> 本文首发于 [用户timeweaver]，转载请注明出处。关注我获取更多前端架构干货！</p></div></div>