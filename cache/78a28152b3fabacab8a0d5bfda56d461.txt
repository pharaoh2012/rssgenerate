
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bfmhno3/p/19012139" title="发布于 2025-07-30 01:50">
    <span role="heading" aria-level="2">【笔记】Visual Studio 2022 入门指南</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        本文是 Visual Studio 2022 的入门指南，主要介绍了解决方案与项目的组织结构、过滤器的使用、包含目录的配置、宏的使用方法，以及静态库和动态链接库的创建与使用。此外，还介绍了如何使用 CMake 自动生成解决方案。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="visual-studio-2022-入门指南">Visual Studio 2022 入门指南</h1>
<p></p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#visual-studio-2022-入门指南" rel="noopener nofollow">Visual Studio 2022 入门指南</a><ul><li><a href="#解决方案solution与项目project" rel="noopener nofollow">解决方案（Solution）与项目（Project）</a></li><li><a href="#过滤器filter" rel="noopener nofollow">过滤器（Filter）</a><ul><li><a href="#如何正确配置包含目录" rel="noopener nofollow">如何正确配置包含目录？</a></li></ul></li><li><a href="#宏macro" rel="noopener nofollow">宏（Macro）</a><ul><li><a href="#示例" rel="noopener nofollow">示例</a></li></ul></li><li><a href="#库的使用" rel="noopener nofollow">库的使用</a><ul><li><a href="#静态库static-librarylib" rel="noopener nofollow">静态库（Static Library，<code>.lib</code>）</a><ul><li><a href="#创建" rel="noopener nofollow">创建</a></li><li><a href="#使用" rel="noopener nofollow">使用</a><ul><li><a href="#引用" rel="noopener nofollow">引用</a></li><li><a href="#手动配置不推荐" rel="noopener nofollow">手动配置（不推荐）</a></li></ul></li></ul></li><li><a href="#动态链接库dynamic-link-librarydll" rel="noopener nofollow">动态链接库（Dynamic Link Library，<code>.dll</code>）</a></li></ul></li><li><a href="#使用-cmake-自动生成解决方案" rel="noopener nofollow">使用 CMake 自动生成解决方案</a><ul><li><a href="#手动配置" rel="noopener nofollow">手动配置</a></li><li><a href="#原生支持" rel="noopener nofollow">原生支持</a></li></ul></li><li><a href="#参考资料" rel="noopener nofollow">参考资料</a></li></ul></li></ul></div><p></p>
<h2 id="解决方案solution与项目project">解决方案（Solution）与项目（Project）</h2>
<p>一个<strong>解决方案</strong>是用于组织和管理一个或多个相关联<strong>项目</strong>的容器。这套结构旨在将一个复杂的实际问题，分解成多个功能独立的<strong>模块</strong>（<strong>项目</strong>）来开发和管理。</p>
<ul>
<li><strong>解决方案</strong>（<code>.sln</code> 文件）：这是最高层级的组织单位，它定义了所包含的项目以及它们之间的依赖关系和构建配置。当你打开一个 <code>.sln</code> 文件时，Visual Studio 会加载整个工作区。</li>
<li><strong>项目</strong>（<code>.vcxproj</code>、<code>csproj</code> 等文件）：每个项目对应一个独立的模块，最终会生成一个可执行文件（<code>.exe</code>）、一个静态库（<code>.lib</code>）或一个动态链接库（<code>.dll</code>）。</li>
</ul>
<p>需要注意的地方：</p>
<ul>
<li><strong>单一启动项目</strong>：在一个解决方案中，通常只有一个项目被设置为<strong>启动项目</strong>。<strong>启动项目</strong>是点击 “开始调试”（<kbd>F5</kbd>）时，Visual Studio 将会编译和运行的项目。可以在<strong>解决方案资源管理器</strong>中右键点击不同的项目，选择 "<strong>设为启动项目</strong>"。</li>
<li>“<strong>将解决方案和项目放在同一目录中</strong>”：
<ul>
<li>勾选：解决方案文件（<code>.sln</code>）和项目文件（例如 <code>.vcxproj</code>）会存放在同一个文件夹中。这对于只有一个或少数几个项目的简单解决方案来说，目录结构更扁平、更清晰。</li>
<li>不勾选（默认）：Visual Studio 会创建一个顶层文件夹来存放解决方案文件（<code>.sln</code>），然后在该文件夹下为每一个项目再创建一个独立的子文件夹。当解决方案包含多个项目时，这种结构更加有条理，是<strong>更推荐的做法</strong>。</li>
</ul>
</li>
</ul>
<h2 id="过滤器filter">过滤器（Filter）</h2>
<p><strong>过滤器</strong>（<em>Filter</em>）是 Visual Studio 解决方案资源管理器中的一个<strong>虚拟文件夹结构</strong>。它的主要作用是帮助开发者组织和分类源文件、头文件等，使项目看起来更整洁，所有的代码文件（源文件和头文件）都应该加入过滤器中。开发者可以自由地创建、重命名或删除过滤器，这<strong>不会</strong>影响磁盘上文件的实际位置。</p>
<p>而对于编译器（例如 MSVC、GCC 等）在编译代码时，只关心真实的目录结构，而非<strong>过滤器</strong>中的配置。所以当编译器报错 “无法打开源文件” 或 “找不到头文件” 之类的错误时，问题几乎总是出在<strong>项目属性</strong>的路径配置上，而不是解决方案资源管理器的过滤器结构。</p>
<h3 id="如何正确配置包含目录">如何正确配置包含目录？</h3>
<p>当项目需要引入外部头文件（例如来自另一个项目货第三方库）时，必须明确告知编译器去哪里查找这些文件。</p>
<ol>
<li>在<strong>解决方案资源管理器</strong>中右键点击项目，选择<strong>属性</strong>。</li>
<li>确保顶部的<strong>配置</strong>和<strong>平台</strong>设置正确。</li>
<li>导航到 <strong>C/C++</strong> <span class="math inline">\(\rightarrow\)</span> <strong>常规</strong>。</li>
<li>在<strong>附加包含目录</strong>字段中，添加所需头文件所在的<strong>真实目录路径</strong>。</li>
</ol>
<p>在 Visual Studio 中选择的目录会被设置为<strong>绝对路径</strong>，当<strong>解决方案</strong>发生移动，或者发送给合作者时，就会导致错误。这可以通过 Visual Studio 中提供的<strong>宏</strong>来解决。</p>
<h2 id="宏macro">宏（Macro）</h2>
<p>Visual Studio 提供了一系列预定义的<strong>宏</strong>（<em>Macro</em>），这些宏会在构建时被动态地解析为具体的路径。</p>
<p>常用宏变量：</p>
<table>
<thead>
<tr>
<th>宏</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$(SolutionDir)</code></td>
<td>解决方案文件（<code>.sln</code>）所在的目录</td>
</tr>
<tr>
<td><code>$(ProjectDir)</code></td>
<td>当前项目文件（<code>.vcxproj</code>）所在的目录</td>
</tr>
<tr>
<td><code>$(OutDir)</code></td>
<td>最终输出文件（如 <code>.exe</code>、<code>.dll</code>）的存放目录</td>
</tr>
<tr>
<td><code>$(IntDir)</code></td>
<td>编译过程中产生的中间文件（如 <code>.obj</code>）的存放目录</td>
</tr>
<tr>
<td><code>$(Configuration)</code></td>
<td>当前的构建配置名称，如 <code>Debug</code> 或 <code>Release</code></td>
</tr>
<tr>
<td><code>$(Platform)</code></td>
<td>当前的构建平台名称，如 <code>x64</code> 或 <code>Win32</code></td>
</tr>
</tbody>
</table>
<h3 id="示例">示例</h3>
<p>假设解决方案目录结构如下：</p>
<pre><code class="language-shell">MySolution/
├── MySolution.sln
├── ProjectA/
│   └── ProjectA.vcxproj
└── Libraries/
    └── MyLib/
        └── include/
            └── my_header.h
</code></pre>
<p>如果 <code>ProjectA</code> 需要包含 <code>my_header.h</code>，则可以在 <code>ProjectA</code> 的 “附加包含目录” 中设置为：<code>$(SolutionDir)\Libraries\MyLib\include</code>。</p>
<p>这样一来，即使将整个 <code>MySolution</code> 文件夹移动到其他位置，这个相对路径依然有效。</p>
<h2 id="库的使用">库的使用</h2>
<h3 id="静态库static-librarylib">静态库（Static Library，<code>.lib</code>）</h3>
<p>静态库是在<strong>链接阶段</strong>被并入到目标程序中的。最终生成的可执行文件会包含静态库的所有代码，因此文件体积较大，但运行时不依赖外部文件。</p>
<h4 id="创建">创建</h4>
<p>在解决方案中右键点击 “解决方案” <span class="math inline">\(\rightarrow\)</span> 添加 <span class="math inline">\(\rightarrow\)</span> 新建项目 <span class="math inline">\(\rightarrow\)</span> 静态库</p>
<h4 id="使用">使用</h4>
<h5 id="引用">引用</h5>
<ul>
<li>在需要使用此库的项目上，右键点击<strong>引用</strong></li>
<li>选择<strong>添加引用</strong>，然后在弹出的对话框中勾选所需的静态库项目</li>
</ul>
<p>这是推荐的方式，原因如下：</p>
<ul>
<li>它会自动设置<strong>链接器</strong>的输入，确保链接器能够找到库文件</li>
<li>它会自动创建<strong>项目依赖项</strong>，保证在编译主项目之前，静态库项目总是被优先编译</li>
<li>它还会自动将静态库的头文件目录添加到主项目的<strong>附加包含目录</strong>中，让开发者能够直接 <code>#include</code></li>
</ul>
<h5 id="手动配置不推荐">手动配置（不推荐）</h5>
<p>如果引用的库是一个已经编译好、非解决方案内的 <code>.lib</code> 文件，则需要手动配置：</p>
<ol>
<li><strong>附加库目录</strong>：在项目属性的<strong>链接器</strong> <span class="math inline">\(\rightarrow\)</span> <strong>常规</strong>中，添加 <code>.lib</code> 文件所在的目录。</li>
<li><strong>附加依赖项</strong>：在项目属性的<strong>链接器</strong> <span class="math inline">\(\rightarrow\)</span> <strong>输入</strong>中，添加 <code>.lib</code> 文件的具体名称（例如 <code>libtest.lib</code>）</li>
</ol>
<h3 id="动态链接库dynamic-link-librarydll">动态链接库（Dynamic Link Library，<code>.dll</code>）</h3>
<p>动态库是程序<strong>运行时</strong>由操作系统加载到内存中的。多个程序可以共享同一个 DLL，从而节省磁盘空间和内存。项目生成时会同时产生一个 <code>.dll</code> 文件（运行时需要）和一个 <code>.lib</code> 文件（链接时需要）。</p>
<p>注意事项：</p>
<ul>
<li>导出与导入：从 DLL 中暴露函数或类给其他项目使用，需要使用 <code>__declspec(dllexport)</code> 关键字。而在使用该 DLL 的项目中，则需要使用 <code>__declspc(dllimport)</code> 来声明这些函数或类。</li>
<li>运行时环境：当运行依赖于 DLL 的程序时，操作系统必须能够找到这个 <code>.dll</code> 文件。通常由以下几种方式：
<ol>
<li>将 <code>.dll</code> 文件放置在与可执行文件（<code>.exe</code>）相同的目录下</li>
<li>将 <code>.dll</code> 文件所在的目录添加到系统的 <code>PATH</code> 环境变量中。</li>
<li>在 Visual Studio 中进行调试时，它通常会自动处理好路径问题。</li>
</ol>
</li>
</ul>
<h2 id="使用-cmake-自动生成解决方案">使用 CMake 自动生成解决方案</h2>
<p>对于跨平台项目或大型复杂项目，直接使用 Visual Studio 的项目文件进行管理可能会变得非常繁琐。CMake 是一个强大的、开源的构建系统生成工具，它可以根据简单的配置文件（<code>CMakeLists.txt</code>）自动生成适用与多种平台和 IDE 的原生构建环境，包括 Visual Studio 的 <code>.sln</code> 和 <code>.vcxproj</code> 文件。</p>
<h3 id="手动配置">手动配置</h3>
<ol>
<li>为项目的根目录以及各个子模块（库、可执行文件）编写 <code>CMakeLists.txt</code> 文件。</li>
<li>创建一个独立的构建目录（通常命名为 <code>build</code>），以保持源码树的干净。</li>
<li>在 <code>build</code> 目录中运行 CMake，指令通常为 <code>cmake ..</code>，它会查找上一级目录的 <code>CMakeLists.txt</code> 并生成构建文件。</li>
<li>最后，用 Visual Studio 打开在 <code>build</code> 中生成的 <code>.sln</code> 文件。</li>
</ol>
<h3 id="原生支持">原生支持</h3>
<p>从 Visual Studio 2017 开始，Visual Studio 提供了对 CMake 的原生集成支持。</p>
<p>可以直接用 Visual Studio 打开一个包含 <code>CMakeLists.txt</code> 的文件节哀，而无需手动运行 <code>cmake</code> 命令和打开生成的 <code>.sln</code> 文件。Visual Studio 会自动在后台完成这一切，并提供完整的智能提示、构建和调试支持。</p>
<p>这对于使用 CMake 的项目来说，是目前最便捷的开发方式。</p>
<h2 id="参考资料">参考资料</h2>
<ol>
<li><a href="https://www.bilibili.com/video/BV1S541137P2?spm_id_from=333.788.videopod.episodes&amp;vd_source=aece08350e40b390e044f67307ffd650" target="_blank" rel="noopener nofollow">工程课代表——Visual Studio 工程实践开发</a></li>
</ol>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.006944444444444444" data-date-updated="2025-07-30 02:00">2025-07-30 01:50</span>&nbsp;
<a href="https://www.cnblogs.com/bfmhno3">略无慕艳意</a>&nbsp;
阅读(<span id="post_view_count">24</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19012139);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19012139', targetLink: 'https://www.cnblogs.com/bfmhno3/p/19012139', title: '【笔记】Visual Studio 2022 入门指南' })">举报</a>
</div>
        