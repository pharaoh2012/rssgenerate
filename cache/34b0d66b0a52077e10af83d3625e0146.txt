
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/tianwuyvlianshui/p/18894686" title="发布于 2025-05-24 20:45">
    <span role="heading" aria-level="2">ESP实现Web服务器</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="esp实现web服务器">ESP实现Web服务器</h1>
<p>典型的基于 ESP32 的静态网页与图片嵌入展示的 <strong>本地 Web Server（AP 模式）项目</strong></p>
<hr>
<h2 id="项目功能概述">项目功能概述</h2>
<blockquote>
<p>ESP32 创建一个 Wi-Fi 热点，启动一个 HTTP Web Server，当手机或电脑连接到此热点时，可以通过浏览器（192.168.4.1）访问静态网页（index.html）以及显示嵌入的图片（pic.png）。</p>
</blockquote>
<hr>
<h2 id="代码逻辑结构分析">代码逻辑结构分析</h2>
<h3 id="1-嵌入资源声明">1. <strong>嵌入资源声明</strong></h3>
<pre><code class="language-c">//html网页文件
extern const uint8_t _binary_index_html_start[];
extern const uint8_t _binary_index_html_end[];
//png图片文件
extern const uint8_t _binary_pic_png_start[];
extern const uint8_t _binary_pic_png_end[];
</code></pre>
<ul>
<li>使用 <code>idf_component_register(... EMBED_FILES ...)</code> 将 <code>index.html</code> 和 <code>pic.png</code> 文件<strong>嵌入到固件</strong>中。</li>
<li>这几个符号由构建系统自动生成，用于访问文件在 Flash 中的位置。</li>
</ul>
<hr>
<h3 id="2-http-处理器函数">2. <strong>HTTP 处理器函数</strong></h3>
<h4 id="index_handler返回网页">index_handler：返回网页</h4>
<pre><code class="language-c">static esp_err_t index_handler(httpd_req_t *req)
{
    httpd_resp_set_type(req, "text/html");
    return httpd_resp_send(req, (const char *)_binary_index_html_start, _binary_index_html_end - _binary_index_html_start);
}
</code></pre>
<h4 id="️-pic_handler返回图片">️ pic_handler：返回图片</h4>
<pre><code class="language-c">static esp_err_t pic_handler(httpd_req_t *req)
{
    httpd_resp_set_type(req, "image/png");
    return httpd_resp_send(req, (const char *)_binary_pic_png_start, _binary_pic_png_end - _binary_pic_png_start);
}
</code></pre>
<hr>
<h3 id="3-启动-web-服务器">3. <strong>启动 Web 服务器</strong></h3>
<pre><code class="language-c">httpd_handle_t start_webserver(void)
{
    httpd_config_t config = HTTPD_DEFAULT_CONFIG();
    httpd_handle_t server = NULL;
    if (httpd_start(&amp;server, &amp;config) == ESP_OK) {
        // 注册网页 URI
        httpd_register_uri_handler(server, &amp;index_uri);
        // 注册图片 URI
        httpd_register_uri_handler(server, &amp;pic_uri);
    }
    return server;
}
</code></pre>
<ul>
<li><code>/</code>：返回 <code>index.html</code></li>
<li><code>/pic.png</code>：返回图片内容</li>
</ul>
<hr>
<h3 id="4-配置-wi-fi-为-ap-模式">4. <strong>配置 Wi-Fi 为 AP 模式</strong></h3>
<pre><code class="language-c">void wifi_init_softap()
{
    // 初始化网络接口
    ESP_ERROR_CHECK(esp_netif_init());
    // 创建默认的事件循环
    ESP_ERROR_CHECK(esp_event_loop_create_default());
    // 创建默认的WiFi AP网络接口
    esp_netif_create_default_wifi_ap();

    // 初始化WiFi配置
    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    // 初始化WiFi
    ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));

    // 设置WiFi配置
    wifi_config_t wifi_config = {
        .ap = {
            .ssid = "ESP32_WEB", // 设置AP的SSID
            .ssid_len = strlen("ESP32_WEB"), // 设置SSID的长度
            .password = "12345678", // 设置AP的密码
            .max_connection = 2, // 设置最大连接数
            .authmode = WIFI_AUTH_WPA_WPA2_PSK // 设置认证模式
        },
    };

    // 如果密码为空，则设置为开放模式
    if (strlen((char *)wifi_config.ap.password) == 0)
        wifi_config.ap.authmode = WIFI_AUTH_OPEN;

    // 设置WiFi模式为AP
    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_AP));
    // 设置WiFi配置
    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_AP, &amp;wifi_config));
    // 启动WiFi
    ESP_ERROR_CHECK(esp_wifi_start());

    // 打印AP已启动的信息
    ESP_LOGI(TAG, "Wi-Fi AP started. SSID:%s password:%s", "ESP32_WEB", "12345678");
}
</code></pre>
<ul>
<li>ESP32 开启 AP 模式，创建名为 <code>ESP32_WEB</code> 的热点，密码为 <code>12345678</code></li>
<li>支持最多 <code>2</code> 个客户端连接</li>
<li>一旦连接上，就可以通过 IP 访问该 Web Server（默认 192.168.4.1）</li>
</ul>
<hr>
<h3 id="5-程序入口-app_main">5. <strong>程序入口 app_main()</strong></h3>
<pre><code class="language-c">void app_main()
{
    nvs_flash_init();        // 初始化 NVS
    wifi_init_softap();      // 启动热点（设置为AP模式）
    start_webserver();       // 启动 Web 服务
}
</code></pre>
<hr>
<h2 id="-总结功能模块">✅ 总结（功能模块）</h2>
<table>
<thead>
<tr>
<th>模块</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>wifi_init_softap</code></td>
<td>启动 Wi-Fi 热点（AP）</td>
</tr>
<tr>
<td><code>start_webserver</code></td>
<td>启动 HTTP Web 服务器</td>
</tr>
<tr>
<td><code>index_handler</code></td>
<td>处理 <code>/</code> 请求，返回网页</td>
</tr>
<tr>
<td>️ <code>pic_handler</code></td>
<td>处理 <code>/pic.png</code> 请求，返回嵌入图片</td>
</tr>
<tr>
<td><code>EMBED_FILES</code></td>
<td>将静态资源嵌入到固件中</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="简单插入图片例程">简单插入图片例程：</h2>
<p>html文件：</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
    &lt;title&gt;ESP32 Web Server&lt;/title&gt;
  &lt;/head&gt;
  &lt;body style="background-color: #202020; color: #fff; text-align: center"&gt;
    &lt;h1&gt;ESP32嵌入图片展示&lt;/h1&gt;
    &lt;img
      src="/pic.png"
      alt="Embedded Image"
      style="max-width: 90%; height: auto"
    /&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>现象：</p>
<img src="https://img2023.cnblogs.com/blog/3281938/202505/3281938-20250524204159114-357762433.png" alt="image-20250524195612852" style="zoom: 33%">
<h2 id="插入高清图片并添加文本标题简单设计静态界面">插入高清图片，并添加文本标题，简单设计静态界面：</h2>
<p><img src="https://img2023.cnblogs.com/blog/3281938/202505/3281938-20250524204158136-1669027343.png" alt="image-20250524172054646" loading="lazy"></p>
<h3 id="工程框架">工程框架：</h3>
<img src="https://img2023.cnblogs.com/blog/3281938/202505/3281938-20250524204159549-1093594805.png" alt="image-20250524201454695" style="zoom: 50%">
<h3 id="概括">概括：</h3>
<p><strong>ESP32s3</strong>做<strong>服务器</strong>，使用AP模式开启热点。</p>
<p><strong>客户端</strong>（手机，电脑）连接热点，与<strong>ESP32s3</strong>形成局域网通信。</p>
<p>客户端通过http请求服务器，服务器响应，返回html和图片</p>
<p><strong>项目的功能实现</strong>是依靠 <strong>ESP-IDF 提供的 HTTP Server 组件（<code>esp_http_server</code>）作为底层核心支持</strong>的。</p>
<hr>
<h2 id="http-server-的核心作用">HTTP Server 的核心作用</h2>
<p>ESP-IDF 中的 <code>esp_http_server</code> 是一个轻量级、嵌入式的 HTTP 服务模块，它提供了一套完整的 <strong>HTTP 请求响应框架</strong>，就像一个 Web 后端框架一样，只是运行在 ESP32 芯片上。</p>
<h3 id="-它在项目中实现了的功能">✅ 它在项目中实现了的功能</h3>
<table>
<thead>
<tr>
<th>功能</th>
<th>依赖 <code>esp_http_server</code> 实现</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>启动 Web 服务器</td>
<td>✅ <code>httpd_start()</code></td>
<td>初始化一个监听端口（默认 80）的 Web Server</td>
</tr>
<tr>
<td>注册路由（URI）</td>
<td>✅ <code>httpd_register_uri_handler()</code></td>
<td>绑定某个路径（如 <code>/</code> 或 <code>/pic.png</code>）到特定处理函数</td>
</tr>
<tr>
<td>处理 HTTP 请求</td>
<td>✅ <code>index_handler</code>, <code>pic_handler</code></td>
<td>根据请求的 URI 进行内容响应</td>
</tr>
<tr>
<td>设置响应类型</td>
<td>✅ <code>httpd_resp_set_type()</code></td>
<td>设置返回数据类型：<code>text/html</code>, <code>image/png</code></td>
</tr>
<tr>
<td>返回数据内容</td>
<td>✅ <code>httpd_resp_send()</code></td>
<td>把嵌入的 HTML / PNG 数据返回给客户端</td>
</tr>
</tbody>
</table>
<pre><code class="language-txt">[浏览器发起请求]
     |
     v
[ESP32 HTTP Server] &lt;--------- 启动于 SoftAP 模式下（默认 IP：192.168.4.1）
     |
 ┌──────────────┬──────────────┐
 │              │              │
 v              v              v
/              /pic.png      其余
(index_handler) (pic_handler)

返回：
- text/html → index.html（嵌入）
- image/png → pic.png（嵌入）
</code></pre>
<h1 id="源码分享">源码分享：</h1>
<p><a href="https://github.com/jianzhiji/blog" target="_blank" rel="noopener nofollow">jianzhiji/blog: 博客分享的代码</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.8952794499351852" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-24 20:45">2025-05-24 20:45</span>&nbsp;
<a href="https://www.cnblogs.com/tianwuyvlianshui">沁拒离</a>&nbsp;
阅读(<span id="post_view_count">46</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18894686);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18894686', targetLink: 'https://www.cnblogs.com/tianwuyvlianshui/p/18894686', title: 'ESP实现Web服务器' })">举报</a>
</div>
        