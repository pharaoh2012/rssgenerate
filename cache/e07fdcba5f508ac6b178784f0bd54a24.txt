
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/risheng/p/18816491" title="发布于 2025-04-09 13:51">
    <span role="heading" aria-level="2">时区转换工具+PWA离线网页</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/3373677/202504/3373677-20250409135124424-1301859887.png" alt="时区转换工具+PWA离线网页" class="desc_img">
        本项目对比并选用 Luxon 实现多时区转换，支持各时区时间互转。
提供 NodeJS 与 Python 脚本、网页小工具及 PWA 应用，功能完整、结构清晰。
适用于快速使用、系统集成或离线访问，具备良好扩展性。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="时区转换工具pwa离线网页">时区转换工具+PWA离线网页</h1>
<h2 id="一时区转换工具对比"><strong>一、时区转换工具对比</strong></h2>
<table>
<thead>
<tr>
<th><strong>工具</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Date</td>
<td>原生 JS API，有限的时区支持，无法指定时区，仅使用本地时区。</td>
</tr>
<tr>
<td>Intl.DateTimeFormat</td>
<td>原生格式化显示，可指定时区，但不能修改时区逻辑。</td>
</tr>
<tr>
<td>luxon</td>
<td>强烈推荐，现代、轻量、功能强，原生支持时区、时间戳、格式化等。</td>
</tr>
<tr>
<td>dayjs + timezone 插件</td>
<td>类似 moment，更现代，但时区支持需插件。</td>
</tr>
<tr>
<td>moment-timezone</td>
<td>功能全面但体积大，moment 官方已不推荐用于新项目。</td>
</tr>
</tbody>
</table>
<h2 id="二luxon-使用示例">二、<strong>Luxon 使用示例</strong></h2>
<h3 id="1-美国时间---中国时间">1. 美国时间 -&gt; 中国时间</h3>
<pre><code class="language-javascript">import { DateTime } from 'luxon'

const usTime = DateTime.fromISO('2025-04-01T11:11:00', { zone: 'America/Los_Angeles' })

const timestamp = usTime.toMillis()

const cnTime = usTime.setZone('Asia/Shanghai')

console.log('美国时间：', usTime.toFormat('yyyy-MM-dd HH:mm:ss ZZZZ'))
console.log('时间戳：', timestamp)
console.log('对应的中国时间：', cnTime.toFormat('yyyy-MM-dd HH:mm:ss ZZZZ'))
</code></pre>
<pre><code class="language-shell">美国时间：2025-04-01 11:11:00 GMT-7
时间戳：1743521460000
对应的中国时间：2025-04-02 02:11:00 GMT+8
</code></pre>
<h3 id="2-中国时间---美国时间">2. 中国时间 -&gt; 美国时间</h3>
<pre><code class="language-javascript">const cn = DateTime.fromISO('2025-04-01T11:11:00', { zone: 'Asia/Shanghai' })

const us = cn.setZone('America/Los_Angeles')

console.log('中国时间：', cn.toFormat('yyyy-MM-dd HH:mm:ss ZZZZ'))
console.log('对应的美国时间：', us.toFormat('yyyy-MM-dd HH:mm:ss ZZZZ'))
console.log('时间戳（UTC）：', cn.toMillis())
</code></pre>
<h3 id="3-转换逻辑总结">3. 转换逻辑总结</h3>
<table>
<thead>
<tr>
<th><strong>场景</strong></th>
<th><strong>方法</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>指定时区的时间 → 时间戳</td>
<td>DateTime.fromISO(...).toMillis()</td>
</tr>
<tr>
<td>时间戳 → 指定时区时间</td>
<td>DateTime.fromMillis(...).setZone(...)</td>
</tr>
<tr>
<td>不同时区之间转换</td>
<td>.setZone(...)</td>
</tr>
<tr>
<td>时间格式化</td>
<td>.toFormat('yyyy-MM-dd HH:mm:ss') 等</td>
</tr>
</tbody>
</table>
<h3 id="4-常用时区-id-表">4. 常用时区 ID 表</h3>
<table>
<thead>
<tr>
<th style="text-align: left"><font style="color: rgba(255, 255, 255, 1)">名称</font></th>
<th style="text-align: left"><font style="color: rgba(255, 255, 255, 1)">IANA 时区 ID</font></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">北京/上海（Asia/Shanghai）</font></td>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">Asia/Shanghai</font></td>
</tr>
<tr>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">香港（Asia/Hong_Kong）</font></td>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">Asia/Hong_Kong</font></td>
</tr>
<tr>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">日本（Asia/Tokyo）</font></td>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">Asia/Tokyo</font></td>
</tr>
<tr>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">韩国（Asia/Seoul）</font></td>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">Asia/Seoul</font></td>
</tr>
<tr>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">新加坡（Asia/Singapore）</font></td>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">Asia/Singapore</font></td>
</tr>
<tr>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">印度（Asia/Kolkata）</font></td>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">Asia/Kolkata</font></td>
</tr>
<tr>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">美国西部 - 洛杉矶（America/Los_Angeles）</font></td>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">America/Los_Angeles</font></td>
</tr>
<tr>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">美国中部 - 芝加哥（America/Chicago）</font></td>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">America/Chicago</font></td>
</tr>
<tr>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">美国东部 - 纽约（America/New_York）</font></td>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">America/New_York</font></td>
</tr>
<tr>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">英国（Europe/London）</font></td>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">Europe/London</font></td>
</tr>
<tr>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">德国（Europe/Berlin）</font></td>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">Europe/Berlin</font></td>
</tr>
<tr>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">法国（Europe/Paris）</font></td>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">Europe/Paris</font></td>
</tr>
<tr>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">澳大利亚 - 悉尼（Australia/Sydney）</font></td>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">Australia/Sydney</font></td>
</tr>
<tr>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">新西兰（Pacific/Auckland）</font></td>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">Pacific/Auckland</font></td>
</tr>
<tr>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">夏威夷（Pacific/Honolulu）</font></td>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">Pacific/Honolulu</font></td>
</tr>
<tr>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">UTC（协调世界时）</font></td>
<td style="text-align: left"><font style="color: rgba(0, 0, 0, 1)">UTC</font></td>
</tr>
</tbody>
</table>
<h2 id="三时区转换脚本">三、时区转换脚本</h2>
<h3 id="1-nodejs-脚本使用-luxon">1. NodeJS 脚本（使用 luxon）</h3>
<pre><code class="language-javascript">const { DateTime } = require('luxon')

function convertTime({
  timeStr = '2025-04-01 11:11:00',
  fromZone = 'America/Los_Angeles',
  toZone = 'Asia/Shanghai'
}) {
  const fromTime = DateTime.fromFormat(timeStr, 'yyyy-MM-dd HH:mm:ss', { zone: fromZone })

  const toTime = fromTime.setZone(toZone)

  console.log(`原始时间 (${fromZone}):`, fromTime.toFormat('yyyy-MM-dd HH:mm:ss ZZZZ'))
  console.log(`时间戳（UTC 毫秒）:`, fromTime.toMillis())
  console.log(`转换后 (${toZone}):`, toTime.toFormat('yyyy-MM-dd HH:mm:ss ZZZZ'))
}

// 修改这里的参数即可
convertTime({
  timeStr: '2025-04-01 11:11:00',
  fromZone: 'America/Los_Angeles',
  toZone: 'Asia/Shanghai'
})
</code></pre>
<h3 id="2-python-脚本使用-pytz">2. Python 脚本（使用 pytz）</h3>
<pre><code class="language-shell">pip install pytz
</code></pre>
<pre><code class="language-python">from datetime import datetime
import pytz

def convert_time(time_str='2025-04-01 11:11:00', from_zone='America/Los_Angeles', to_zone='Asia/Shanghai'):
    from_tz = pytz.timezone(from_zone)
    to_tz = pytz.timezone(to_zone)

    naive_dt = datetime.strptime(time_str, '%Y-%m-%d %H:%M:%S')
    from_dt = from_tz.localize(naive_dt)

    to_dt = from_dt.astimezone(to_tz)

    print(f'原始时间 ({from_zone}): {from_dt.strftime("%Y-%m-%d %H:%M:%S %Z%z")}')
    print(f'时间戳（UTC 秒）: {int(from_dt.timestamp())}')
    print(f'转换后 ({to_zone}): {to_dt.strftime("%Y-%m-%d %H:%M:%S %Z%z")}')

# 修改参数即可
convert_time(
    time_str='2025-04-01 11:11:00',
    from_zone='America/Los_Angeles',
    to_zone='Asia/Shanghai'
)
</code></pre>
<h2 id="四网页小工具">四、网页小工具</h2>
<p>使用 Luxon + HTML 原生控件制作的小工具，支持：</p>
<ul>
<li>输入时间</li>
<li>原始/目标时区选择</li>
<li>时间戳显示</li>
<li>一键复制</li>
</ul>
<h3 id="1-代码展示">1. 代码展示</h3>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang="zh"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8" /&gt;
  &lt;title&gt;🌏 时区时间转换工具&lt;/title&gt;
  &lt;script src="https://cdn.jsdelivr.net/npm/luxon@3/build/global/luxon.min.js"&gt;&lt;/script&gt;
  &lt;style&gt;
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      padding: 2rem;
      max-width: 700px;
      margin: auto;
      background: #f8f9fa;
    }
    h2 {
      text-align: center;
      margin-bottom: 2rem;
    }
    label {
      font-weight: bold;
      margin-top: 1rem;
      display: block;
    }
    input, select, button {
      width: 100%;
      padding: 0.6rem;
      margin: 0.4rem 0 1rem;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 1rem;
    }
    button {
      background: #007bff;
      color: white;
      cursor: pointer;
      border: none;
      transition: background 0.3s;
    }
    button:hover {
      background: #0056b3;
    }
    .result {
      background: #fff;
      border-left: 5px solid #007bff;
      padding: 1rem;
      margin-top: 1rem;
      border-radius: 5px;
      white-space: pre-wrap;
      font-size: 0.95rem;
    }
    .error {
      color: red;
      margin-top: 1rem;
    }
    .copy-btn {
      margin-top: 0.5rem;
      background: #28a745;
    }
    .copy-btn:hover {
      background: #1e7e34;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 2rem;
      background: #fff;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 0.6rem;
      text-align: left;
    }
    th {
      background-color: #007bff;
      color: white;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h2&gt;🕒 时区转换小工具&lt;/h2&gt;

  &lt;label for="inputDate"&gt;选择时间&lt;/label&gt;
  &lt;input type="datetime-local" id="inputDate" /&gt;

  &lt;label for="fromZone"&gt;原始时区&lt;/label&gt;
  &lt;select id="fromZone"&gt;&lt;/select&gt;

  &lt;label for="toZone"&gt;目标时区&lt;/label&gt;
  &lt;select id="toZone"&gt;&lt;/select&gt;

  &lt;button onclick="convertTime()"&gt;转换时间&lt;/button&gt;

  &lt;div class="result" id="output"&gt;👇 转换结果将在这里显示&lt;/div&gt;
  &lt;button class="copy-btn" onclick="copyResult()"&gt;📋 复制结果&lt;/button&gt;
  &lt;div class="error" id="error"&gt;&lt;/div&gt;

  &lt;script&gt;
    const { DateTime } = luxon

    const timezones = [
      { label: '北京（Asia/Shanghai）', value: 'Asia/Shanghai' },
      { label: '香港（Asia/Hong_Kong）', value: 'Asia/Hong_Kong' },
      { label: '日本（Asia/Tokyo）', value: 'Asia/Tokyo' },
      { label: '韩国（Asia/Seoul）', value: 'Asia/Seoul' },
      { label: '新加坡（Asia/Singapore）', value: 'Asia/Singapore' },
      { label: '印度（Asia/Kolkata）', value: 'Asia/Kolkata' },
      { label: '美国西部 - 洛杉矶（America/Los_Angeles）', value: 'America/Los_Angeles' },
      { label: '美国中部 - 芝加哥（America/Chicago）', value: 'America/Chicago' },
      { label: '美国东部 - 纽约（America/New_York）', value: 'America/New_York' },
      { label: '英国（Europe/London）', value: 'Europe/London' },
      { label: '德国（Europe/Berlin）', value: 'Europe/Berlin' },
      { label: '法国（Europe/Paris）', value: 'Europe/Paris' },
      { label: '澳大利亚 - 悉尼（Australia/Sydney）', value: 'Australia/Sydney' },
      { label: '新西兰（Pacific/Auckland）', value: 'Pacific/Auckland' },
      { label: '夏威夷（Pacific/Honolulu）', value: 'Pacific/Honolulu' },
      { label: 'UTC（协调世界时）', value: 'UTC' },
    ]

    function renderTimezoneOptions() {
      const fromSelect = document.getElementById('fromZone')
      const toSelect = document.getElementById('toZone')
      const tableBody = document.getElementById('timezoneTable')

      timezones.forEach(({ label, value }) =&gt; {
        const opt1 = new Option(label, value)
        const opt2 = new Option(label, value)
        fromSelect.appendChild(opt1)
        toSelect.appendChild(opt2)
      })

      fromSelect.value = 'Asia/Shanghai'
      toSelect.value = 'America/Los_Angeles'
    }

    document.addEventListener('DOMContentLoaded', () =&gt; {
      renderTimezoneOptions()
      const now = new Date()
      const local = now.toISOString().slice(0, 16)
      document.getElementById('inputDate').value = local
    })

    function convertTime() {
      const input = document.getElementById('inputDate').value
      const fromZone = document.getElementById('fromZone').value
      const toZone = document.getElementById('toZone').value
      const output = document.getElementById('output')
      const error = document.getElementById('error')

      error.textContent = ''

      if (!input) {
        error.textContent = '❌ 请选择一个时间'
        return
      }

      try {
        const dt = DateTime.fromISO(input, { zone: fromZone })
        const toTime = dt.setZone(toZone)

        const result = `
🌍 原始时间（${fromZone}）:
    ${dt.toFormat('yyyy-MM-dd HH:mm:ss ZZZZ')}

🕗 时间戳（UTC 毫秒）:
    ${dt.toMillis()}

➡️ 转换后时间（${toZone}）:
    ${toTime.toFormat('yyyy-MM-dd HH:mm:ss ZZZZ')}
            `.trim()

        output.textContent = result
      }
      catch (e) {
        error.textContent = '❌ 转换失败，请检查输入'
      }
    }

    function copyResult() {
      const result = document.getElementById('output').textContent
      if (!result || result.includes('将在这里显示'))
        return
      navigator.clipboard.writeText(result).then(() =&gt; {
        alert('✅ 已复制到剪贴板！')
      })
    }
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="2-示例截图">2. 示例截图</h3>
<p><img src="https://cdn.nlark.com/yuque/0/2025/png/340359/1743581698484-c5b6aef3-aba1-4f5f-9742-10959f558f46.png" alt="" loading="lazy"></p>
<h2 id="五pwa-应用支持">五、PWA 应用支持</h2>
<h3 id="1-pwa-结构">1. PWA 结构</h3>
<pre><code class="language-shell">.
├── icons
│   ├── time_192.png
│   └── time_512.png
├── index.html
├── luxon.min.js
├── manifest.json
└── service-worker.js
</code></pre>
<h3 id="2-manifestjson">2. manifest.json</h3>
<p>用于定义名称、图标、启动方式等：</p>
<pre><code class="language-json">{
  "name": "时区时间转换工具",
  "short_name": "时区转换",
  "start_url": "./index.html",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#007bff",
  "description": "支持多时区时间互转、时间戳生成的轻量工具",
  "icons": [
    {
      "src": "icons/time_192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "icons/time_512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}
</code></pre>
<h3 id="3-service-workerjs">3. service-worker.js</h3>
<p>实现核心缓存功能，支持离线访问：</p>
<pre><code class="language-javascript">const CACHE_NAME = 'timezone-converter-0.0.1'
const urlsToCache = [
  './',
  './index.html',
  './manifest.json',
  './service-worker.js',
  './icons/time_192.png',
  './icons/time_512.png',
  './luxon.min.js'
]

// 安装时预缓存核心资源
self.addEventListener('install', event =&gt; {
  self.skipWaiting()
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache =&gt; cache.addAll(urlsToCache))
  )
})

// 激活时清除旧缓存
self.addEventListener('activate', event =&gt; {
  event.waitUntil(
    caches.keys().then(keys =&gt;
      Promise.all(keys.filter(k =&gt; k !== CACHE_NAME).map(k =&gt; caches.delete(k)))
    )
  )
  self.clients.claim()
})

// 拦截所有请求，优先从缓存读取，失败则网络请求
self.addEventListener('fetch', event =&gt; {
  const request = event.request

  event.respondWith(
    caches.match(request).then(cachedResponse =&gt; {
      if (cachedResponse) return cachedResponse

      return fetch(request)
        .then(networkResponse =&gt; {
          if (
            networkResponse &amp;&amp;
            networkResponse.status === 200 &amp;&amp;
            request.url.startsWith(self.location.origin)
          ) {
            const cloned = networkResponse.clone()
            caches.open(CACHE_NAME).then(cache =&gt; {
              cache.put(request, cloned)
            })
          }
          return networkResponse
        })
        .catch(() =&gt; {
          if (request.headers.get('accept')?.includes('text/html')) {
            return caches.match('./index.html')
          }
        })
    })
  )
})
</code></pre>
<h3 id="4-html-文件">4. html 文件</h3>
<p>整合 Luxon + PWA 注册逻辑</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang="zh"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8" /&gt;
  &lt;title&gt;🌏 时区时间转换工具1&lt;/title&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1" /&gt;
  &lt;meta name="theme-color" content="#007bff" /&gt;

  &lt;link rel="manifest" href="manifest.json" /&gt;
  &lt;link rel="icon" href="icons/time_192.png" /&gt;
  &lt;link rel="apple-touch-icon" href="icons/time_512.png" /&gt;

  &lt;script src="./luxon.min.js"&gt;&lt;/script&gt;

  &lt;style&gt;
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      padding: 2rem;
      max-width: 700px;
      margin: auto;
      background: #f8f9fa;
    }
    h2 {
      text-align: center;
      margin-bottom: 2rem;
    }
    label {
      font-weight: bold;
      margin-top: 1rem;
      display: block;
    }
    input, select, button {
      width: 100%;
      padding: 0.6rem;
      margin: 0.4rem 0 1rem;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 1rem;
    }
    button {
      background: #007bff;
      color: white;
      cursor: pointer;
      border: none;
      transition: background 0.3s;
    }
    button:hover {
      background: #0056b3;
    }
    .result {
      background: #fff;
      border-left: 5px solid #007bff;
      padding: 1rem;
      margin-top: 1rem;
      border-radius: 5px;
      white-space: pre-wrap;
      font-size: 0.95rem;
    }
    .error {
      color: red;
      margin-top: 1rem;
    }
    .copy-btn {
      margin-top: 0.5rem;
      background: #28a745;
    }
    .copy-btn:hover {
      background: #1e7e34;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 2rem;
      background: #fff;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 0.6rem;
      text-align: left;
    }
    th {
      background-color: #007bff;
      color: white;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h2&gt;🕒 时区转换小工具&lt;/h2&gt;

  &lt;label for="inputDate"&gt;选择时间&lt;/label&gt;
  &lt;input type="datetime-local" id="inputDate" /&gt;

  &lt;label for="fromZone"&gt;原始时区&lt;/label&gt;
  &lt;select id="fromZone"&gt;&lt;/select&gt;

  &lt;label for="toZone"&gt;目标时区&lt;/label&gt;
  &lt;select id="toZone"&gt;&lt;/select&gt;

  &lt;button onclick="convertTime()"&gt;转换时间&lt;/button&gt;

  &lt;div class="result" id="output"&gt;👇 转换结果将在这里显示&lt;/div&gt;
  &lt;button class="copy-btn" onclick="copyResult()"&gt;📋 复制结果&lt;/button&gt;
  &lt;div class="error" id="error"&gt;&lt;/div&gt;

  &lt;script&gt;
    const { DateTime } = luxon

    const timezones = [
      { label: '北京（Asia/Shanghai）', value: 'Asia/Shanghai' },
      { label: '香港（Asia/Hong_Kong）', value: 'Asia/Hong_Kong' },
      { label: '日本（Asia/Tokyo）', value: 'Asia/Tokyo' },
      { label: '韩国（Asia/Seoul）', value: 'Asia/Seoul' },
      { label: '新加坡（Asia/Singapore）', value: 'Asia/Singapore' },
      { label: '印度（Asia/Kolkata）', value: 'Asia/Kolkata' },
      { label: '美国西部 - 洛杉矶（America/Los_Angeles）', value: 'America/Los_Angeles' },
      { label: '美国中部 - 芝加哥（America/Chicago）', value: 'America/Chicago' },
      { label: '美国东部 - 纽约（America/New_York）', value: 'America/New_York' },
      { label: '英国（Europe/London）', value: 'Europe/London' },
      { label: '德国（Europe/Berlin）', value: 'Europe/Berlin' },
      { label: '法国（Europe/Paris）', value: 'Europe/Paris' },
      { label: '澳大利亚 - 悉尼（Australia/Sydney）', value: 'Australia/Sydney' },
      { label: '新西兰（Pacific/Auckland）', value: 'Pacific/Auckland' },
      { label: '夏威夷（Pacific/Honolulu）', value: 'Pacific/Honolulu' },
      { label: 'UTC（协调世界时）', value: 'UTC' }
    ]

    function renderTimezoneOptions() {
      const fromSelect = document.getElementById('fromZone')
      const toSelect = document.getElementById('toZone')

      timezones.forEach(({ label, value }) =&gt; {
        const opt1 = new Option(label, value)
        const opt2 = new Option(label, value)
        fromSelect.appendChild(opt1)
        toSelect.appendChild(opt2)

      })

      fromSelect.value = 'Asia/Shanghai'
      toSelect.value = 'America/Los_Angeles'
    }

    function convertTime() {
      const input = document.getElementById('inputDate').value
      const fromZone = document.getElementById('fromZone').value
      const toZone = document.getElementById('toZone').value
      const output = document.getElementById('output')
      const error = document.getElementById('error')

      error.textContent = ''

      if (!input) {
        error.textContent = '❌ 请选择一个时间'
        return
      }

      try {
        const dt = DateTime.fromISO(input, { zone: fromZone })
        const toTime = dt.setZone(toZone)

        const result = `
🌍 原始时间（${fromZone}）:
${dt.toFormat('yyyy-MM-dd HH:mm:ss ZZZZ')}

🕗 时间戳（UTC 毫秒）:
${dt.toMillis()}

➡️ 转换后时间（${toZone}）:
${toTime.toFormat('yyyy-MM-dd HH:mm:ss ZZZZ')}
        `.trim()

        output.textContent = result
      } catch (e) {
        error.textContent = '❌ 转换失败，请检查输入'
      }
    }

    function copyResult() {
      const result = document.getElementById('output').textContent
      if (!result || result.includes('将在这里显示')) return
      navigator.clipboard.writeText(result).then(() =&gt; {
        alert('✅ 已复制到剪贴板！')
      })
    }

    // 初始化
    document.addEventListener('DOMContentLoaded', () =&gt; {
      renderTimezoneOptions()
      const now = new Date()
      const local = now.toISOString().slice(0, 16)
      document.getElementById('inputDate').value = local
    })

    // 注册 PWA service worker
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () =&gt; {
        navigator.serviceWorker.register('service-worker.js')
          .then(() =&gt; console.log('✅ Service Worker 注册成功'))
          .catch(err =&gt; console.log('❌ 注册失败:', err))
      })
    }
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="5-live-server-启动">5. Live server 启动</h3>
<p>启动完成安装到本地即可</p>
<h2 id="六总结">六、总结</h2>
<p>本项目对比并选用 Luxon 实现多时区转换，支持各时区时间互转。<br>
提供 NodeJS 与 Python 脚本、网页小工具及 PWA 应用，功能完整、结构清晰。<br>
适用于快速使用、系统集成或离线访问，具备良好扩展性。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5206651135509259" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-09 13:52">2025-04-09 13:51</span>&nbsp;
<a href="https://www.cnblogs.com/risheng">日升_rs</a>&nbsp;
阅读(<span id="post_view_count">90</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18816491" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18816491);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18816491', targetLink: 'https://www.cnblogs.com/risheng/p/18816491', title: '时区转换工具+PWA离线网页' })">举报</a>
</div>
        