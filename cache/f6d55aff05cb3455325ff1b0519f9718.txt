
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zlf2000/p/18844166" title="发布于 2025-04-24 10:44">
    <span role="heading" aria-level="2">ThinkPHP 集成 Redis 队列：从入门到实战技术分享</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1><strong>ThinkPHP <span style="font-family: 等线">集成 </span><span style="font-family: Arial">Redis </span><span style="font-family: 等线">队列：从入门到实战技术分享</span></strong></h1>
<h2><strong><span style="font-family: 等线">一、引言</span></strong></h2>
<p class="16"><span style="font-family: 等线">在分布式系统架构中，异步处理、服务解耦和流量削峰是提升系统性能的核心需求。</span>Redis <span style="font-family: 等线">作为高性能内存数据库，凭借其丰富的数据结构（如 </span><span style="font-family: Arial">List</span><span style="font-family: 等线">、</span><span style="font-family: Arial">Stream</span><span style="font-family: 等线">、</span><span style="font-family: Arial">Sorted Set</span><span style="font-family: 等线">）和轻量级特性，成为实现队列功能的理想选择。本文将结合 </span><span style="font-family: Arial">ThinkPHP </span><span style="font-family: 等线">框架的特性，详细阐述如何通过 </span><span style="font-family: Arial">Redis </span><span style="font-family: 等线">队列构建高可用、可扩展的异步处理系统，涵盖基础概念、环境配置、实战案例及最佳实践。</span></p>
<h2><strong><span style="font-family: 等线">二、</span>Redis <span style="font-family: 等线">队列核心概念解析</span></strong></h2>
<h3><strong>2.1 <span style="font-family: 等线">为何选择 </span><span style="font-family: Arial">Redis </span><span style="font-family: 等线">队列？</span></strong></h3>
<p class="16">Redis <span style="font-family: 等线">队列的核心优势体现在三方面：</span></p>
<ol>
<li><strong><span style="font-family: 等线">极致性能</span></strong><span style="font-family: 等线">：基于内存操作，单节点支持万级</span> QPS<span style="font-family: 等线">，满足高并发场景下的实时响应需求。</span></li>
<li><strong><span style="font-family: 等线">轻量部署</span></strong><span style="font-family: 等线">：无需像</span> Kafka/RabbitMQ <span style="font-family: 等线">等中间件的复杂配置，可直接通过 </span><span style="font-family: Arial">PHP </span><span style="font-family: 等线">扩展集成，适合中小规模业务快速落地。</span></li>
<li><strong><span style="font-family: 等线">结构灵活</span></strong><span style="font-family: 等线">：提供多种数据结构适配不同业务场景：</span></li>
</ol>
<p class="16">◦&nbsp;<strong>FIFO <span style="font-family: 等线">队列（</span><span style="font-family: Arial">List</span><span style="font-family: 等线">）</span></strong><span style="font-family: 等线">：基于左进右出（</span>LPUSH/RPOP<span style="font-family: 等线">）实现简单异步任务，如订单状态更新。</span></p>
<p class="16">◦&nbsp;<strong><span style="font-family: 等线">优先级队列（</span>Sorted Set<span style="font-family: 等线">）</span></strong><span style="font-family: 等线">：通过分值（</span>Score<span style="font-family: 等线">）控制任务执行顺序，适用于高优先级订单加急处理。</span></p>
<p class="16">◦&nbsp;<strong><span style="font-family: 等线">持久化队列（</span>Stream<span style="font-family: 等线">）</span></strong><span style="font-family: 等线">：支持消息持久化、分组消费和确认机制，适合微服务架构下的可靠消息传递。</span></p>
<h3><strong>2.2 <span style="font-family: 等线">核心数据结构对比</span></strong></h3>
<p class="16">&nbsp;</p>
<table border="1" cellspacing="0">
<tbody>
<tr>
<td valign="top" width="184">
<p class="16"><strong><span style="font-family: 等线">数据结构</span></strong></p>
</td>
<td valign="top" width="184">
<p class="16"><strong><span style="font-family: 等线">特性</span></strong></p>
</td>
<td valign="top" width="184">
<p class="16"><strong><span style="font-family: 等线">典型场景</span></strong></p>
</td>
<td valign="top" width="184">
<p class="16"><strong>Redis <span style="font-family: 等线">核心命令</span></strong></p>
</td>
<td valign="top" width="184">
<p class="16"><strong>ThinkPHP <span style="font-family: 等线">操作示例</span></strong></p>
</td>
</tr>
<tr>
<td valign="top" width="184">
<p class="16">List</p>
</td>
<td valign="top" width="184">
<p class="16"><span style="font-family: 等线">先进先出，简单高效</span></p>
</td>
<td valign="top" width="184">
<p class="16"><span style="font-family: 等线">短信发送、日志异步写入</span></p>
</td>
<td valign="top" width="184">
<p class="16">lpush/rpop, brpop</p>
</td>
<td valign="top" width="184">
<p class="16">$redis-&gt;lpush('queue:log', json_encode($log))</p>
</td>
</tr>
<tr>
<td valign="top" width="184">
<p class="16">Stream</p>
</td>
<td valign="top" width="184">
<p class="16"><span style="font-family: 等线">持久化、分组消费</span></p>
</td>
<td valign="top" width="184">
<p class="16"><span style="font-family: 等线">分布式任务调度、消息重试</span></p>
</td>
<td valign="top" width="184">
<p class="16">xadd, xgroup, xreadgroup</p>
</td>
<td valign="top" width="184">
<p class="16">$redis-&gt;xadd('stream:task', '*', $fields)</p>
</td>
</tr>
<tr>
<td valign="top" width="184">
<p class="16">Sorted Set</p>
</td>
<td valign="top" width="184">
<p class="16"><span style="font-family: 等线">优先级</span> / <span style="font-family: 等线">延迟处理</span></p>
</td>
<td valign="top" width="184">
<p class="16"><span style="font-family: 等线">优惠券过期提醒、超时订单取消</span></p>
</td>
<td valign="top" width="184">
<p class="16">zadd, zrange, zrem</p>
</td>
<td valign="top" width="184">
<p class="16">$redis-&gt;zadd('delay:order', time()+60, $oid)</p>
</td>
</tr>
</tbody>
</table>
<h2><strong><span style="font-family: 等线">三、开发环境搭建与配置</span></strong></h2>
<h3><strong>3.1 <span style="font-family: 等线">依赖安装</span></strong></h3>
<h4><strong>3.1.1 PHP Redis <span style="font-family: 等线">扩展安装</span></strong></h4>
<p class="16">&nbsp;</p>
<table border="1" cellspacing="0">
<tbody>
<tr>
<td valign="top" width="100.0000%">
<p class="16"># <span style="font-family: 等线">方式一：通过 </span><span style="font-family: Arial">PECL </span><span style="font-family: 等线">安装 </span><span style="font-family: Arial">phpredis</span><span style="font-family: 等线">（推荐） &nbsp;</span></p>
<p class="16">pecl install redis &nbsp;</p>
<p class="16"># <span style="font-family: 等线">方式二：通过 </span><span style="font-family: Arial">Composer </span><span style="font-family: 等线">安装 </span><span style="font-family: Arial">Predis</span><span style="font-family: 等线">（适用于集群环境） &nbsp;</span></p>
<p class="16">composer require predis/predis &nbsp;</p>
</td>
</tr>
</tbody>
</table>
<h4><strong>3.1.2 ThinkPHP <span style="font-family: 等线">配置调整</span></strong></h4>
<p class="16"><span style="font-family: 等线">修改</span> config/redis.php<span style="font-family: 等线">，配置</span> Redis <span style="font-family: 等线">连接参数：</span></p>
<p class="16">&nbsp;</p>
<table border="1" cellspacing="0">
<tbody>
<tr>
<td valign="top" width="100.0000%">
<p class="16">return [ &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;'default' =&gt; [ &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'type' &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt; 'redis', &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'host' &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt; env('REDIS.HOST', '127.0.0.1'), &nbsp;// <span style="font-family: 等线">支持环境变量注入 &nbsp;</span></p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'port' &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt; env('REDIS.PORT', 6379), &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'password' &nbsp;&nbsp;=&gt; env('REDIS.PASS', ''), &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'select' &nbsp;&nbsp;&nbsp;&nbsp;=&gt; 0, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// <span style="font-family: 等线">数据库索引（</span><span style="font-family: Arial">0-15</span><span style="font-family: 等线">） &nbsp;</span></p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'timeout' &nbsp;&nbsp;&nbsp;=&gt; 5, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// <span style="font-family: 等线">连接超时时间（秒） &nbsp;</span></p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'persistent' =&gt; true, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// <span style="font-family: 等线">开启长连接（生产环境建议启用） &nbsp;</span></p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;], &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;// <span style="font-family: 等线">集群配置示例（适用于高可用场景） &nbsp;</span></p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;'cluster' =&gt; [ &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'type' &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt; 'redis', &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'mode' &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt; 'cluster', &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'nodes' &nbsp;&nbsp;&nbsp;&nbsp;=&gt; [ &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;['host' =&gt; 'node1.com', 'port' =&gt; 6380], &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;['host' =&gt; 'node2.com', 'port' =&gt; 6381], &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;], &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'password' &nbsp;=&gt; 'cluster_pass', &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'timeout' &nbsp;&nbsp;=&gt; 3, &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;] &nbsp;</p>
<p class="16">]; &nbsp;</p>
</td>
</tr>
</tbody>
</table>
<h2><strong><span style="font-family: 等线">四、基于</span> List <span style="font-family: 等线">的基础队列实战</span></strong></h2>
<h3><strong>4.1 <span style="font-family: 等线">队列操作核心代码</span></strong></h3>
<h4><strong>4.1.1 <span style="font-family: 等线">入队操作（左压栈）</span></strong></h4>
<p class="16">&nbsp;</p>
<table border="1" cellspacing="0">
<tbody>
<tr>
<td valign="top" width="100.0000%">
<p class="16">use think\facade\Cache; &nbsp;</p>
<p class="16">$redis = Cache::store('redis')-&gt;handler(); &nbsp;</p>
<p class="16">// <span style="font-family: 等线">存储 </span><span style="font-family: Arial">JSON </span><span style="font-family: 等线">格式任务数据（推荐方式） &nbsp;</span></p>
<p class="16">$task = [ &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;'task_id' &nbsp;&nbsp;=&gt; uniqid(), &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;'type' &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt; 'order_process', &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;'data' &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt; ['order_id' =&gt; '20231205001', 'amount' =&gt; 299.99] &nbsp;</p>
<p class="16">]; &nbsp;</p>
<p class="16">$redis-&gt;lpush('queue:default', json_encode($task)); &nbsp;</p>
</td>
</tr>
</tbody>
</table>
<h4><strong>4.1.2 <span style="font-family: 等线">出队操作（阻塞式右弹出）</span></strong></h4>
<p class="16">&nbsp;</p>
<table border="1" cellspacing="0">
<tbody>
<tr>
<td valign="top" width="100.0000%">
<p class="16">// <span style="font-family: 等线">消费者脚本专用（阻塞等待任务，避免空轮询） &nbsp;</span></p>
<p class="16">$result = $redis-&gt;brpop('queue:default', 10); // 10 <span style="font-family: 等线">秒超时 &nbsp;</span></p>
<p class="16">if ($result) { &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;[$queueName, $taskJson] = $result; &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;$task = json_decode($taskJson, true); &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;// <span style="font-family: 等线">执行业务逻辑 &nbsp;</span></p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;handleTask($task); &nbsp;</p>
<p class="16">} &nbsp;</p>
</td>
</tr>
</tbody>
</table>
<h3><strong>4.2 <span style="font-family: 等线">订单异步处理案例</span></strong></h3>
<h4><strong>4.2.1 <span style="font-family: 等线">前端下单接口（控制器）</span></strong></h4>
<p class="16">&nbsp;</p>
<table border="1" cellspacing="0">
<tbody>
<tr>
<td valign="top" width="100.0000%">
<p class="16">// app/controller/Order.php &nbsp;</p>
<p class="16">public function submitOrder() { &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;$orderData = $this-&gt;request-&gt;post(); &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;// <span style="font-family: 等线">验证订单数据</span><span style="font-family: Arial">... &nbsp;</span></p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;// <span style="font-family: 等线">入队异步处理 &nbsp;</span></p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;$redis = Cache::store('redis')-&gt;handler(); &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;$redis-&gt;lpush('queue:order', json_encode([ &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'order_id' &nbsp;&nbsp;=&gt; $orderData['order_id'], &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'product_id' =&gt; $orderData['product_id'], &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'quantity' &nbsp;&nbsp;=&gt; $orderData['quantity'] &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;])); &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;return json(['code' =&gt; 200, 'msg' =&gt; '<span style="font-family: 等线">下单成功，系统正在处理</span><span style="font-family: Arial">']); &nbsp;</span></p>
<p class="16">} &nbsp;</p>
</td>
</tr>
</tbody>
</table>
<h4><strong>4.2.2 <span style="font-family: 等线">后台消费者脚本（</span><span style="font-family: Arial">scripts/order_consumer.php</span><span style="font-family: 等线">）</span></strong></h4>
<p class="16">&nbsp;</p>
<table border="1" cellspacing="0">
<tbody>
<tr>
<td valign="top" width="100.0000%">
<p class="16">&lt;?php &nbsp;</p>
<p class="16">require __DIR__ . '/../../thinkphp/base.php'; &nbsp;</p>
<p class="16">$redis = app(\think\cache\driver\Redis::class)-&gt;handler(); &nbsp;</p>
<p class="16">while (true) { &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;$result = $redis-&gt;brpop('queue:order', 10); &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;if (!$result) continue; &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;$task = json_decode($result[1], true); &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;try { &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// <span style="font-family: 等线">模拟库存扣减（实际需调用服务） &nbsp;</span></p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;deductStock($task['product_id'], $task['quantity']); &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// <span style="font-family: 等线">模拟物流通知 &nbsp;</span></p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;sendLogisticsNotice($task['order_id']); &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo "[".date('Y-m-d H:i:s')."] <span style="font-family: 等线">任务完成：</span><span style="font-family: Arial">{$task['order_id']}\n"; &nbsp;</span></p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;} catch (\Exception $e) { &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// <span style="font-family: 等线">重试机制（最多 </span><span style="font-family: Arial">3 </span><span style="font-family: 等线">次） &nbsp;</span></p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;retryTask($task, $e, 3); &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</p>
<p class="16">} &nbsp;</p>
</td>
</tr>
</tbody>
</table>
<h4><strong>4.2.3 <span style="font-family: 等线">启动消费者服务</span></strong></h4>
<p class="16">&nbsp;</p>
<table border="1" cellspacing="0">
<tbody>
<tr>
<td valign="top" width="100.0000%">
<p class="16"># <span style="font-family: 等线">前台运行（便于调试） &nbsp;</span></p>
<p class="16">php scripts/order_consumer.php &nbsp;</p>
<p class="16"># <span style="font-family: 等线">后台守护进程运行 &nbsp;</span></p>
<p class="16">nohup php scripts/order_consumer.php &gt; order.log 2&gt;&amp;1 &amp; &nbsp;</p>
</td>
</tr>
</tbody>
</table>
<h2><strong><span style="font-family: 等线">五、基于</span> Stream <span style="font-family: 等线">的高级队列应用</span></strong></h2>
<h3><strong>5.1 Stream <span style="font-family: 等线">队列核心特性</span></strong></h3>
<ul>
<li><strong><span style="font-family: 等线">持久化存储</span></strong><span style="font-family: 等线">：消息默认持久化到磁盘，支持重启后继续处理未完成任务。</span></li>
<li><strong><span style="font-family: 等线">分组消费</span></strong><span style="font-family: 等线">：多个消费者组成消费组（</span>Consumer Group<span style="font-family: 等线">），实现任务负载均衡（如多个 </span><span style="font-family: Arial">worker </span><span style="font-family: 等线">节点共同处理订单）。</span></li>
<li><strong><span style="font-family: 等线">消息确认机制</span></strong><span style="font-family: 等线">：通过</span> XACK&nbsp;<span style="font-family: 等线">命令标记消息已处理，避免重复执行或数据丢失。</span></li>
</ul>
<h3><strong>5.2 <span style="font-family: 等线">分布式任务处理示例</span></strong></h3>
<h4><strong>5.2.1 <span style="font-family: 等线">创建 </span><span style="font-family: Arial">Stream </span><span style="font-family: 等线">并生产消息</span></strong></h4>
<p class="16">&nbsp;</p>
<table border="1" cellspacing="0">
<tbody>
<tr>
<td valign="top" width="100.0000%">
<p class="16">// <span style="font-family: 等线">生产端：添加带重试次数的任务 &nbsp;</span></p>
<p class="16">$redis-&gt;xadd('stream:task', '*', [ &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;'task_type' =&gt; 'payment_notify', &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;'order_id' &nbsp;=&gt; '20231206001', &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;'retry' &nbsp;&nbsp;&nbsp;&nbsp;=&gt; 0, // <span style="font-family: 等线">初始重试次数 &nbsp;</span></p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;'create_at' =&gt; time() &nbsp;</p>
<p class="16">]); &nbsp;</p>
</td>
</tr>
</tbody>
</table>
<h4><strong>5.2.2 <span style="font-family: 等线">初始化消费者组</span></strong></h4>
<p class="16">&nbsp;</p>
<table border="1" cellspacing="0">
<tbody>
<tr>
<td valign="top" width="100.0000%">
<p class="16">// <span style="font-family: 等线">首次运行时创建消费组（从最新消息开始消费） &nbsp;</span></p>
<p class="16">$redis-&gt;xgroup('CREATE', 'stream:task', 'group_workers', '$', true); &nbsp;</p>
<p class="16">// <span style="font-family: 等线">如需消费历史消息，将 </span><span style="font-family: Arial">'$' </span><span style="font-family: 等线">替换为 </span><span style="font-family: Arial">'0-0' &nbsp;</span></p>
</td>
</tr>
</tbody>
</table>
<h4><strong>5.2.3 <span style="font-family: 等线">消费组节点处理逻辑</span></strong></h4>
<p class="16">&nbsp;</p>
<table border="1" cellspacing="0">
<tbody>
<tr>
<td valign="top" width="100.0000%">
<p class="16">// <span style="font-family: 等线">消费者节点 </span><span style="font-family: Arial">1</span><span style="font-family: 等线">（</span><span style="font-family: Arial">worker1.php</span><span style="font-family: 等线">） &nbsp;</span></p>
<p class="16">$messages = $redis-&gt;xreadgroup( &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;'GROUP', 'group_workers', 'worker_1', &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;'STREAMS', 'stream:task', '&gt;' // <span style="font-family: 等线">获取未确认的消息 &nbsp;</span></p>
<p class="16">); &nbsp;</p>
<p class="16">if ($messages) { &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;foreach ($messages[0][1] as $msgId =&gt; $fields) { &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try { &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;handlePaymentNotify($fields['order_id']); &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$redis-&gt;xack('stream:task', 'group_workers', $msgId); // <span style="font-family: 等线">确认消息 &nbsp;</span></p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo "Worker1 <span style="font-family: 等线">处理：</span><span style="font-family: Arial">{$fields['order_id']}\n"; &nbsp;</span></p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (\Exception $e) { &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((int)$fields['retry'] &lt; 3) { &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// <span style="font-family: 等线">增加重试次数并重新入队 &nbsp;</span></p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$fields['retry'] = (int)$fields['retry'] + 1; &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$redis-&gt;xadd('stream:task', '*', $fields); &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else { &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// <span style="font-family: 等线">记录死信队列 &nbsp;</span></p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$redis-&gt;xadd('stream:deadletter', '*', $fields); &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</p>
<p class="16">} &nbsp;</p>
</td>
</tr>
</tbody>
</table>
<h2><strong><span style="font-family: 等线">六、生产环境最佳实践</span></strong></h2>
<h3><strong>6.1 <span style="font-family: 等线">消息序列化规范</span></strong></h3>
<ul>
<li><strong><span style="font-family: 等线">强制使用</span> JSON <span style="font-family: 等线">格式</span></strong><span style="font-family: 等线">：</span></li>
</ul>
<p class="16">&nbsp;</p>
<table border="1" cellspacing="0">
<tbody>
<tr>
<td valign="top" width="100.0000%">
<p class="16">// <span style="font-family: 等线">推荐做法 &nbsp;</span></p>
<p class="16">$redis-&gt;lpush('queue', json_encode($data, JSON_UNESCAPED_UNICODE)); &nbsp;</p>
<p class="16">// <span style="font-family: 等线">禁止使用 </span><span style="font-family: Arial">PHP </span><span style="font-family: 等线">原生序列化 &nbsp;</span></p>
<p class="16">// $redis-&gt;lpush('queue', serialize($data)); &nbsp;</p>
</td>
</tr>
</tbody>
</table>
<ul>
<li><strong><span style="font-family: 等线">数据校验</span></strong><span style="font-family: 等线">：消费端需对反序列化后的数据进行字段校验，避免因格式错误导致服务异常。</span></li>
</ul>
<h3><strong>6.2 <span style="font-family: 等线">持久化与高可用配置</span></strong></h3>
<h4><strong>6.2.1 Redis <span style="font-family: 等线">持久化策略</span></strong></h4>
<p>&nbsp;</p>
<ul>
<li><strong>AOF&nbsp;模式</strong>：推荐配置&nbsp;appendfsync everysec，兼顾性能与数据安全性（最多丢失&nbsp;1&nbsp;秒数据）。</li>
<li><strong>RDB&nbsp;备份</strong>：定期生成&nbsp;RDB&nbsp;快照用于灾难恢复，建议配合云存储（如&nbsp;S3）实现异地备份。</li>
</ul>
<p>&nbsp;</p>
<h4><strong>6.2.2 <span style="font-family: 等线">集群方案</span></strong></h4>
<p>&nbsp;</p>
<ul>
<li><strong>Redis Cluster</strong>：适用于超大规模数据，支持自动分片和故障转移。</li>
<li><strong>Sentinel&nbsp;哨兵模式</strong>：监控主从节点状态，自动完成主从切换，配置示例：</li>
</ul>
<p>&nbsp;</p>
<p class="16">&nbsp;</p>
<table border="1" cellspacing="0">
<tbody>
<tr>
<td valign="top" width="100.0000%">
<p class="16">// ThinkPHP <span style="font-family: 等线">哨兵模式配置 &nbsp;</span></p>
<p class="16">'sentinel' =&gt; [ &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;'type' &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt; 'redis', &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;'mode' &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt; 'sentinel', &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;'master' &nbsp;&nbsp;&nbsp;=&gt; 'mymaster', &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;'sentinels' =&gt; [ &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;['host' =&gt; 'sentinel1.com', 'port' =&gt; 26379], &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;['host' =&gt; 'sentinel2.com', 'port' =&gt; 26379], &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;], &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;'password' &nbsp;=&gt; 'sentinel_pass', &nbsp;</p>
<p class="16">] &nbsp;</p>
</td>
</tr>
</tbody>
</table>
<h3><strong>6.3 <span style="font-family: 等线">性能优化技巧</span></strong></h3>
<ol>
<li><strong><span style="font-family: 等线">批量操作</span></strong><span style="font-family: 等线">：使用</span> LPUSH&nbsp;<span style="font-family: 等线">一次推送多个任务，减少网络</span> I/O <span style="font-family: 等线">次数：</span></li>
</ol>
<p class="16">&nbsp;</p>
<table border="1" cellspacing="0">
<tbody>
<tr>
<td valign="top" width="100.0000%">
<p class="16">$redis-&gt;lpush('queue:batch', $task1, $task2, $task3); &nbsp;</p>
</td>
</tr>
</tbody>
</table>
<ol>
<li><strong><span style="font-family: 等线">队列长度控制</span></strong><span style="font-family: 等线">：通过</span> LTRIM&nbsp;<span style="font-family: 等线">限制队列最大长度，防止内存溢出：</span></li>
</ol>
<p class="16">&nbsp;</p>
<table border="1" cellspacing="0">
<tbody>
<tr>
<td valign="top" width="100.0000%">
<p class="16">$redis-&gt;ltrim('queue:order', 0, 999); // <span style="font-family: 等线">保留最新 </span><span style="font-family: Arial">1000 </span><span style="font-family: 等线">条消息 &nbsp;</span></p>
</td>
</tr>
</tbody>
</table>
<ol>
<li><strong><span style="font-family: 等线">连接池复用</span></strong><span style="font-family: 等线">：在</span> ThinkPHP <span style="font-family: 等线">中开启长连接（</span>persistent =&gt; true<span style="font-family: 等线">），避免频繁创建连接的开销。</span></li>
</ol>
<h3><strong>6.4 <span style="font-family: 等线">幂等性设计</span></strong></h3>
<ul>
<li><strong><span style="font-family: 等线">唯一任务</span> ID</strong><span style="font-family: 等线">：每个任务携带</span> UUID <span style="font-family: 等线">或业务唯一标识（如订单号），消费端通过 </span><span style="font-family: Arial">Redis </span><span style="font-family: 等线">分布式锁保证幂等性：</span></li>
</ul>
<p class="16">&nbsp;</p>
<table border="1" cellspacing="0">
<tbody>
<tr>
<td valign="top" width="100.0000%">
<p class="16">$lockKey = "lock:task:{$task['task_id']}"; &nbsp;</p>
<p class="16">if ($redis-&gt;set($lockKey, 1, ['NX', 'PX' =&gt; 60000])) { &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;// <span style="font-family: 等线">执行业务逻辑 &nbsp;</span></p>
<p class="16">} &nbsp;</p>
</td>
</tr>
</tbody>
</table>
<h2><strong><span style="font-family: 等线">七、扩展功能与架构演进</span></strong></h2>
<h3><strong>7.1 <span style="font-family: 等线">延迟队列实现</span></strong></h3>
<p class="16"><span style="font-family: 等线">利用</span> Sorted Set <span style="font-family: 等线">的分值（时间戳）实现任务延迟执行：</span></p>
<p class="16">&nbsp;</p>
<table border="1" cellspacing="0">
<tbody>
<tr>
<td valign="top" width="100.0000%">
<p class="16">// <span style="font-family: 等线">入队时设置延迟时间（单位：秒） &nbsp;</span></p>
<p class="16">$delayTime = 60; // <span style="font-family: 等线">延迟 </span><span style="font-family: Arial">1 </span><span style="font-family: 等线">分钟执行 &nbsp;</span></p>
<p class="16">$redis-&gt;zadd('delay:queue', time() + $delayTime, json_encode($task)); &nbsp;</p>
<p class="16">// <span style="font-family: 等线">消费者定时扫描到期任务 &nbsp;</span></p>
<p class="16">$now = time(); &nbsp;</p>
<p class="16">$tasks = $redis-&gt;zrangebyscore('delay:queue', 0, $now, ['LIMIT' =&gt; 0, 100]); &nbsp;</p>
<p class="16">foreach ($tasks as $taskJson) { &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;$redis-&gt;zrem('delay:queue', $taskJson); &nbsp;</p>
<p class="16">&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;handleDelayedTask(json_decode($taskJson, true)); &nbsp;</p>
<p class="16">} &nbsp;</p>
</td>
</tr>
</tbody>
</table>
<h3><strong>7.2 <span style="font-family: 等线">死信队列与监控</span></strong></h3>
<ul>
<li><strong><span style="font-family: 等线">死信队列</span></strong><span style="font-family: 等线">：将重试失败的任务转移至独立队列（如</span> stream:deadletter<span style="font-family: 等线">），人工介入处理。</span></li>
<li><strong><span style="font-family: 等线">监控系统</span></strong><span style="font-family: 等线">：</span></li>
</ul>
<p class="16">◦&nbsp;<span style="font-family: 等线">队列长度预警：当</span> LLEN queue:order&nbsp;&gt; 1000 <span style="font-family: 等线">时触发告警。</span></p>
<p class="16">◦&nbsp;<span style="font-family: 等线">消费者状态监控：通过</span> LASTMSGID&nbsp;<span style="font-family: 等线">命令检查消费组滞后情况。</span></p>
<h3><strong>7.3 <span style="font-family: 等线">技术选型建议</span></strong></h3>
<p class="16">&nbsp;</p>
<table border="1" cellspacing="0">
<tbody>
<tr>
<td valign="top" width="184">
<p class="16"><strong><span style="font-family: 等线">业务场景</span></strong></p>
</td>
<td valign="top" width="184">
<p class="16"><strong><span style="font-family: 等线">推荐数据结构</span></strong></p>
</td>
<td valign="top" width="184">
<p class="16"><strong><span style="font-family: 等线">核心优势</span></strong></p>
</td>
<td valign="top" width="184">
<p class="16"><strong><span style="font-family: 等线">典型配置</span></strong></p>
</td>
</tr>
<tr>
<td valign="top" width="184">
<p class="16"><span style="font-family: 等线">简单异步通知</span></p>
</td>
<td valign="top" width="184">
<p class="16">List</p>
</td>
<td valign="top" width="184">
<p class="16"><span style="font-family: 等线">轻量高效，毫秒级响应</span></p>
</td>
<td valign="top" width="184">
<p class="16"><span style="font-family: 等线">单节点</span> + <span style="font-family: 等线">非持久化</span></p>
</td>
</tr>
<tr>
<td valign="top" width="184">
<p class="16"><span style="font-family: 等线">分布式任务调度</span></p>
</td>
<td valign="top" width="184">
<p class="16">Stream</p>
</td>
<td valign="top" width="184">
<p class="16"><span style="font-family: 等线">分组消费，消息可靠性保证</span></p>
</td>
<td valign="top" width="184">
<p class="16"><span style="font-family: 等线">消费组</span> + AOF <span style="font-family: 等线">持久化</span></p>
</td>
</tr>
<tr>
<td valign="top" width="184">
<p class="16"><span style="font-family: 等线">高优先级任务处理</span></p>
</td>
<td valign="top" width="184">
<p class="16">Sorted Set</p>
</td>
<td valign="top" width="184">
<p class="16"><span style="font-family: 等线">动态优先级调整</span></p>
</td>
<td valign="top" width="184">
<p class="16"><span style="font-family: 等线">分值（</span>Score<span style="font-family: 等线">）</span><span style="font-family: Arial">+ </span><span style="font-family: 等线">定期扫描</span></p>
</td>
</tr>
</tbody>
</table>
<h2><strong><span style="font-family: 等线">八、总结</span></strong></h2>
<p class="16">Redis <span style="font-family: 等线">队列与 </span><span style="font-family: Arial">ThinkPHP </span><span style="font-family: 等线">的结合为异步处理提供了轻量化解决方案，从基础的 </span><span style="font-family: Arial">List </span><span style="font-family: 等线">队列到高级的 </span><span style="font-family: Arial">Stream </span><span style="font-family: 等线">分组消费，可满足不同规模业务的需求。在实际开发中，需重点关注消息可靠性（持久化、重试机制）、性能优化（批量操作、连接池）和系统稳定性（幂等性、监控告警）。通过合理运用 </span><span style="font-family: Arial">Redis </span><span style="font-family: 等线">数据结构与 </span><span style="font-family: Arial">ThinkPHP </span><span style="font-family: 等线">框架特性，能够有效提升系统的可扩展性和抗风险能力，为分布式架构奠定坚实基础。</span></p>
<h2><strong><span style="font-family: 等线">九、参考资源</span></strong></h2>
<ol>
<li><a href="https://redis.io/documentation" rel="noopener nofollow"><span style="text-decoration: underline">Redis <span style="font-family: 等线">官方文档</span></span></a></li>
<li><a href="https://www.thinkphp.cn/doc/zh-cn/guide/cache.html" rel="noopener nofollow"><span style="text-decoration: underline">ThinkPHP <span style="font-family: 等线">缓存驱动开发指南</span></span></a></li>
<li><a href="https://redisbook.com/" rel="noopener nofollow"><span style="text-decoration: underline">Redis <span style="font-family: 等线">设计与实现</span></span></a></li>
<li><a href="https://www.php.net/manual/en/book.redis.php" rel="noopener nofollow"><span style="text-decoration: underline">PHP Redis <span style="font-family: 等线">扩展手册</span></span></a></li>
</ol>
<p class="16"><span style="font-family: 等线">本文完整覆盖了</span> ThinkPHP <span style="font-family: 等线">集成 </span><span style="font-family: Arial">Redis </span><span style="font-family: 等线">队列的全流程，从基础概念到生产实践均提供了可落地的代码示例。如需进一步探讨特定场景的优化方案或扩展功能，欢迎提供更多业务细节。</span></p>
<p class="16">&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.011713862200231481" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-24 10:48">2025-04-24 10:44</span>&nbsp;
<a href="https://www.cnblogs.com/zlf2000">zlf2000</a>&nbsp;
阅读(<span id="post_view_count">8</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18844166);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18844166', targetLink: 'https://www.cnblogs.com/zlf2000/p/18844166', title: 'ThinkPHP 集成 Redis 队列：从入门到实战技术分享' })">举报</a>
</div>
        