
        <h2>
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/graphics/p/18995153" title="发布于 2025-07-21 08:56">
    <span role="heading" aria-level="2">一文彻底搞懂javascript中的undefined</span>
    

</a>

        </h2>
        <div class="postbody">
            <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="undefined-in-javascript">undefined in javascript</h1>
<p><code>undefined</code>是可以说是javascript中最特殊的一个类型，许多其他语言中都没有这个类型。它表示一个变量已经声明，但还没有被赋值。</p>
<pre><code class="language-js">let a; // a的值是undefined
</code></pre>
<p>如果没有掌握好<code>undefined</code>，则可能会写出一些非常业余的代码，我们来看一个例子，这是在做code review时遇到的真实例子，你能看出下面的代码有什么问题吗？</p>
<pre><code class="language-js">function getUserName(user) {
  if (user) {
    return user.name;
  } else {
    return undefined;
  }
}
</code></pre>
<p>在揭晓答案之前，我们先系统学习一下什么情况下JavaScript会产生<code>undefined</code>类型。</p>
<h2 id="1-显式undefined类型">1. 显式<code>undefined</code>类型</h2>
<pre><code class="language-jsx">const a = undefined;
console.log(a); // undefined.
</code></pre>
<h2 id="2-未初始化的变量">2. 未初始化的变量</h2>
<pre><code class="language-jsx">let a;
console.log(a); // undefined.
</code></pre>
<h2 id="3-访问对象中不存在的属性">3. 访问对象中不存在的属性</h2>
<pre><code class="language-jsx">const person = {
  name: 'zdd',
  age: 41,
};

console.log(person.gender); // undefined.


const a = [1, 2, 3];
console.log(a[3]); // 数组只有三个元素，而a[3]表示第四个元素，所以它们的值是undefined
</code></pre>
<h2 id="4-函数没有返回值">4. 函数没有返回值</h2>
<p>函数没有返回值的时候，实际上返回的就是<code>undefined</code>。</p>
<pre><code class="language-jsx">function test() {
  console.log('hello, world!');
}

console.log(test()); // undefined.
</code></pre>
<h2 id="5-调用函数没有传递对应的参数">5. 调用函数没有传递对应的参数</h2>
<p>下面的代码中，函数<code>add</code>没有传入任何参数，所以<code>a</code>和<code>b</code>的值都是<code>undefined</code>。</p>
<pre><code class="language-jsx">function add(a, b) {
  console.log(a); // 输出undefined.
  console.log(b); // 输出undefined.
  return a + b;
}

add(); // 没有传递参数
</code></pre>
<h1 id="undefined--not-defined"><code>undefined</code> != <code>not defined</code></h1>
<p>需要注意的是，<code>undefined</code>和<code>not defined</code>是两个不同的概念。<code>undefined</code>表示一个变量已经声明但还没有被赋值，而<code>not defined</code>表示一个变量没有被声明。</p>
<pre><code class="language-jsx">let a;
console.log(a); // undefined.
console.log(b); // error, b is not defined
</code></pre>
<h1 id="undefined-vs-void-0"><code>undefined</code> vs <code>void 0</code></h1>
<p>既然已经有了<code>undefined</code>，为什么有很多JavaScript库中还使用<code>void 0</code>呢？ 原因就是<code>undefined</code>是一个值，而不是关键字，能被用户串改，看下面的代码：</p>
<pre><code class="language-jsx">const undefined = 1; // undefined被用户篡改！

const add = (a, b) =&gt; {
  // 这里判断参数是否传入，结果失效了，因为undefined值在前面被改成了1
  if (a === undefined || b === undefined) {
    console.error('请输入两个数');
  } else {
    return a + b;
  }
};

add(1, 2); // 这里会执行add函数中的if分支，是不是很崩溃？
</code></pre>
<p>使用<code>void 0</code>就不会有这个问题。</p>
<pre><code class="language-jsx">const undefined = 1;

const add = (a, b) =&gt; {
  // 写成void 0就没有问题了，无论undefined被改成什么，都不影响。
  if (a === void 0 || b === void 0) {
    console.error('请输入两个数');
  } else {
    return a + b;
  }
};

console.log(add(1, 2));
</code></pre>
<p>那么为什么<code>void 0</code>返回<code>undefined</code>呢？这是因为<code>void</code>是一个操作符，它的作用是对其后面的表达式求值，然后返回<code>undefined</code>。在JavaScript中，<code>void 0</code>等价于<code>undefined</code>，其实你也可以写<code>void 1</code>, <code>void 'hello'</code>等，结果都是<code>undefined</code>。</p>
<p><code>void expression</code>的求值规则 - 先对<code>expression</code>求值，然后返回<code>undefined</code></p>
<h1 id="正则表达式中的undefined">正则表达式中的<code>undefined</code></h1>
<p>在正则表达式中，可以使用<code>test</code>来测试某个字符串是否满足特定的规则。</p>
<pre><code class="language-javascript">console.log(/^hello/.test('hello, world!')); //true
</code></pre>
<p>如果你没有传递参数给<code>test</code>，那么它会尝试匹配字符串<code>undefined</code>.</p>
<pre><code class="language-javascript">console.log(/undefined/.test()); // true
</code></pre>
<p>This is equivalent to the following code, since <code>undefined</code> convert to string is <code>'undefined'</code>, so the result is true.</p>
<pre><code class="language-javascript">console.log(/undefined/.test(undefined));
</code></pre>
<p>详情请看<a href="https://zdd.github.io/2024/02/22/javascript-regex-test/" target="_blank" rel="noopener nofollow">这里</a></p>
<h1 id="undefined-vs-null"><code>undefined</code> vs <code>null</code></h1>
<p><code>undefined</code>和<code>null</code>经常被放到一起比较，那么他们之间有什么区别呢？</p>
<ul>
<li><code>undefined</code>表示一个变量已经声明但还没有被赋值，</li>
<li><code>null</code>表示一个变量已经被赋值为一个空值。</li>
<li><code>null</code>是JS中的关键字，但是<code>undefined</code>是一个全局属性。</li>
</ul>
<h1 id="undefined与其他类型之间的转换">undefined与其他类型之间的转换</h1>
<p>这里面比较特殊的是和数字类型之间的转换，<code>undefined</code>转换为数字类型时会返回<code>NaN</code>，而<code>null</code>转换为数字时会返回<code>0</code>。</p>
<pre><code class="language-javascript">console.log(String(undefined)); // "undefined"
console.log(Number(undefined)); // NaN
console.log(Boolean(undefined)); // false
</code></pre>
<p>注意<code>null</code>转换为其他类型时与<code>undefined</code>的区别</p>
<pre><code class="language-javascript">console.log(String(null)); // "null"
console.log(Number(null)); // 0
console.log(Boolean(null)); // false
</code></pre>
<p>回到文章开始的问题，根据上面第四点，函数没有返回值时，返回的就是<code>undefined</code>，所以上面的代码可以简化为如下形式，else分支完全没有必要。</p>
<pre><code class="language-js">function getUserName(user) {
  if (user) {
    return user.name;
  }
}
</code></pre>
<h1 id="references">References：</h1>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#undefined_type" target="_blank" rel="noopener nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#undefined_type</a><br>
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void" target="_blank" rel="noopener nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void</a></p>

</div>
<div id="MySignature" role="contentinfo">
    <div id="ZddSignature">
<div>作者：<a href="http://www.cnblogs.com/graphics/" target="_blank">zdd</a></div>
<div>出处：<a href="http://www.cnblogs.com/graphics/" target="_blank">http://www.cnblogs.com/graphics/</a>
<div>
<div>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利.</div>
</div>
</div>
</div>
</div>
<div class="clear"></div>

        </div>
        <p class="postfoot">
            posted on 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-21 08:57">2025-07-21 08:56</span>&nbsp;
<a href="https://www.cnblogs.com/graphics">前端风云志</a>&nbsp;
阅读(<span id="post_view_count">146</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18995153);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18995153', targetLink: 'https://www.cnblogs.com/graphics/p/18995153', title: '一文彻底搞懂javascript中的undefined' })">举报</a>

        </p>
    