
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mingupupu/p/18654982" title="发布于 2025-01-06 11:43">
    <span role="heading" aria-level="2">C# AIModelRouter：使用不同的AI模型完成不同的任务</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="aimodelrouter">AIModelRouter</h2>
<p>AI模型路由，模型的能力有大小之分，有些简单任务，能力小一点的模型也能很好地完成，而有些比较难的或者希望模型做得更好的，则可以选择能力强的模型。为什么要这样做呢？可以降低AI模型的使用成本，毕竟能力强的模型会更贵一点，省着用挺好的。</p>
<p>Semantic Kernel中可以很简便地使用一个AIModelRouter。</p>
<h2 id="实践">实践</h2>
<p><strong>先来一个简单的例子</strong></p>
<p>来自https://github.com/microsoft/semantic-kernel/tree/main/dotnet/samples/Demos/AIModelRouter</p>
<p>新建一个CustomRouter类，如下所示：</p>
<pre><code class="language-csharp">internal sealed class CustomRouter()
{
    internal string GetService(string lookupPrompt, List&lt;string&gt; serviceIds)
    {
        // The order matters, if the keyword is not found, the first one is used.
        foreach (var serviceId in serviceIds)
        {
            if (Contains(lookupPrompt, serviceId))
            {
                return serviceId;
            }
        }

        return serviceIds[0];
    }

    // Ensure compatibility with both netstandard2.0 and net8.0 by using IndexOf instead of Contains
    private static bool Contains(string prompt, string pattern)
        =&gt; prompt.IndexOf(pattern, StringComparison.CurrentCultureIgnoreCase) &gt;= 0;
}
</code></pre>
<p>新建一个SelectedServiceFilter类用于打印一些信息：</p>
<pre><code class="language-csharp"> internal sealed class SelectedServiceFilter : IPromptRenderFilter
 {
     /// &lt;inheritdoc/&gt;
     public Task OnPromptRenderAsync(PromptRenderContext context, Func&lt;PromptRenderContext, Task&gt; next)
     {
         Console.ForegroundColor = ConsoleColor.Yellow;
         Console.WriteLine($"Selected service id: '{context.Arguments.ExecutionSettings?.FirstOrDefault().Key}'");

         Console.ForegroundColor = ConsoleColor.White;
         Console.Write("Assistant &gt; ");
         return next(context);
     }
 }
</code></pre>
<p>使用多个模型：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202501/3288240-20250106114326989-67942251.png" alt="image-20250106101815911" loading="lazy"></p>
<p>为捕获路由器选择的服务 ID 添加自定义过滤器：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202501/3288240-20250106114326920-1128601905.png" alt="image-20250106101942229" loading="lazy"></p>
<p>开启一个聊天循环：</p>
<pre><code class="language-csharp">        Console.ForegroundColor = ConsoleColor.White;

        ChatHistory history = [];
        string history1 = string.Empty;
        bool isComplete = false;

        do
        {
            Console.WriteLine();
            Console.Write("&gt; ");
            string? input = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(input))
            {
                continue;
            }
            if (input.Trim().Equals("EXIT", StringComparison.OrdinalIgnoreCase))
            {
                isComplete = true;
                break;
            }
            if (input.Trim().Equals("Clear", StringComparison.OrdinalIgnoreCase))
            {
                history.Clear();
                history1 = " ";
                Console.WriteLine("已清除聊天记录");
                continue;
            }

            history.Add(new ChatMessageContent(AuthorRole.User, input));
            history1 += $"User:{input}\n";

            Console.WriteLine();

            // Find the best service to use based on the user's input
            KernelArguments arguments = new(new PromptExecutionSettings()
            {
                ServiceId = router.GetService(input, serviceIds).Result,
                FunctionChoiceBehavior = FunctionChoiceBehavior.Auto()
            });

            // Invoke the prompt and print the response
            //await foreach (var chatChunk in kernel.InvokePromptStreamingAsync(userMessage, arguments).ConfigureAwait(false))
            //{
            //    Console.Write(chatChunk);
            //}
           
            var result = await kernel.InvokePromptAsync(history1, arguments).ConfigureAwait(false);
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(result);
            Console.WriteLine();

            // Add the message from the agent to the chat history
            history.AddMessage(AuthorRole.Assistant, result.ToString());
            history1 += $"Assistant:{result}\n";
        } while (!isComplete);
    }
}
</code></pre>
<p>来看看现在这个简单的路由规则：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202501/3288240-20250106114327026-2098946381.png" alt="image-20250106102824888" loading="lazy"></p>
<p>当你的提问中包含一个ServiceId的时候，就会选择那个服务ID对应的模型进行回复，如果不包含就选择第一个服务ID对应的模型进行回复。</p>
<p>实际上这样使用，很容易让AI迷惑，因为我们总是要带上一个ServiceId，如果让AI根据用户的提问，自己决定用哪个模型是更好的。</p>
<p><strong>进阶使用，用AI自己来决定</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202501/3288240-20250106114326932-211575334.png" alt="image-20250106103343454" loading="lazy"></p>
<p>使用一个靠谱的AI模型来做这个事情比较好。</p>
<p>我们输入你好，那么Prompt就会变成这样：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202501/3288240-20250106114326862-2037654394.png" alt="image-20250106103624167" loading="lazy"></p>
<p>AI返回的结果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202501/3288240-20250106114326865-1694704006.png" alt="image-20250106103713305" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202501/3288240-20250106114326880-645896683.png" alt="image-20250106103742224" loading="lazy"></p>
<p>再试试其他几个怎么触发：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202501/3288240-20250106114326926-2131534027.png" alt="image-20250106103848889" loading="lazy"></p>
<p>而工具调用与其他比较容易混淆，因为就算是我们自己，也很难分辨有什么区别：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202501/3288240-20250106114326875-884726535.png" alt="image-20250106104310185" loading="lazy"></p>
<p>这时候或许修改Prompt可以奏效。</p>
<p>修改后的Prompt如下：</p>
<pre><code class="language-csharp"> string skPrompt = """
          根据用户的输入，返回最佳服务ID。
          如果用户需要获取当前时间与写邮件，则选择工具调用相关的服务ID。
          用户输入：
          {{$input}}
          服务ID列表：
          {{$serviceIds}}
          无需返回任何其他内容，只需返回服务ID。              
     """;
</code></pre>
<p>效果如下所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202501/3288240-20250106114326917-480831337.png" alt="image-20250106113558077" loading="lazy"></p>
<p>以上就是本次分享的全部内容，希望对你有所帮助。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.19204237386458334" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-06 11:44">2025-01-06 11:43</span>&nbsp;
<a href="https://www.cnblogs.com/mingupupu">mingupupup</a>&nbsp;
阅读(<span id="post_view_count">114</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18654982" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18654982);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18654982', targetLink: 'https://www.cnblogs.com/mingupupu/p/18654982', title: 'C# AIModelRouter：使用不同的AI模型完成不同的任务' })">举报</a>
</div>
        