<!----> <meta itemprop="headline" content="前端也需要了解的 mcp 知识"> <meta itemprop="keywords" content="前端,MCP,GitHub"> <meta itemprop="datePublished" content="2025-04-22T01:20:46.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="唐诗"> <meta itemprop="url" content="https://juejin.cn/user/712139266339694"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-61fb5e44="">
            前端也需要了解的 mcp 知识
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-61fb5e44=""><div class="author-info-box" data-v-61fb5e44=""><div class="author-name" data-v-61fb5e44=""><a href="/user/712139266339694/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-292f6e48="" data-v-61fb5e44=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-292f6e48="">
    唐诗
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-61fb5e44=""><time datetime="2025-04-22T01:20:46.000Z" title="Tue Apr 22 2025 01:20:46 GMT+0000 (Coordinated Universal Time)" class="time" data-v-61fb5e44="">
                    2025-04-22
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-61fb5e44=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-61fb5e44=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-61fb5e44=""></circle></svg> <span class="views-count" data-v-61fb5e44="">
                    6,967
                  </span> <span class="read-time" data-v-61fb5e44=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-61fb5e44=""><rect width="16" height="16" fill="none" data-v-61fb5e44=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-61fb5e44=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-61fb5e44=""></path></svg>
                    阅读7分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-61fb5e44=""></div> <!----> <!----></div> <!----> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-61fb5e44=""><div class="article-viewer markdown-body result"><h2 data-id="heading-0">MCP 是什么？</h2>
<p>MCP 是 <a href="https://link.juejin.cn?target=https%3A%2F%2Fmodelcontextprotocol.io%2Fintroduction" target="_blank" title="https://modelcontextprotocol.io/introduction" ref="nofollow noopener noreferrer">Model Context Protocol</a> 由 Anthropic 开发的开源协议，使(如 Cursor、Cline、Claude Desktop) AI 系统能够安全地连接各种数据源。它通过客户端-服务器架构为 AI 助手提供了访问外部数据、工具和提示的通用标准。</p>
<p>一句话总结: <strong>MCP 为 AI 代理连接到不同的服务提供了一种标准化的方式</strong></p>
<p>一张你在很多地方看到过的图 <a href="https://link.juejin.cn?target=https%3A%2F%2Fnorahsakal.com%2Fblog%2Fmcp-vs-api-model-context-protocol-explained%2F" target="_blank" title="https://norahsakal.com/blog/mcp-vs-api-model-context-protocol-explained/" ref="nofollow noopener noreferrer">这个应该原文章地址</a></p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/776c73cb66944fe89213c8e2b1683b3c~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ6K-X:q75.awebp?rk3s=f64ab15b&amp;x-expires=1751241378&amp;x-signature=qWNAuC1rOGuKL4c6CphJeI2qLCU%3D" alt="image.png" loading="lazy"></p>
<h2 data-id="heading-1">MCP 可以干什么？</h2>
<p>相比于 MCP 是什么我其实更想知道 MCP 能干什么?</p>
<p>AI 有一个缺点: <strong>AI 只知道过去发生的事情，却无法实时从外界获取最新的信息</strong> 比如今天的天气情况、今天的热点新闻等。因为训练 AI 的数据集始终是滞后的</p>
<p>在 MCP 之前我们可以通过 <code>Function Call</code> 来给 AI 增加类似网页搜索的功能让其可以获取到实时数据,但没有一个标准,同样的功能换一个 AI 可能还需要重新实现一下</p>
<p>就像上边的那张图片 MCP 提供一种标准的接入协议,只要是按照 MCP 开发的服务端就可以在 MCP 客户端中接入(这他么不是废话吗!)</p>
<p>MCP 可以定义一系列的能力比如 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmodelcontextprotocol%2Fservers%2Ftree%2Fmain%2Fsrc%2Fgithub" target="_blank" title="https://github.com/modelcontextprotocol/servers/tree/main/src/github" ref="nofollow noopener noreferrer">GitHub MCP 服务</a></p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/206c7d5b8e2247029e122a60932768fa~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ6K-X:q75.awebp?rk3s=f64ab15b&amp;x-expires=1751241378&amp;x-signature=O2GkwDUjEloyIL3ZVPtYtfrCBr0%3D" alt="image.png" loading="lazy"></p>
<p>提供了比如搜索仓库、issuer、回复、用户,创建仓库,提交代码等功能</p>
<p><strong>你可以通过自然语言让 AI 来执行这些操作</strong></p>
<p>然后还有 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmodelcontextprotocol%2Fservers%2Ftree%2Fmain%2Fsrc%2Ffilesystem" target="_blank" title="https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem" ref="nofollow noopener noreferrer">filesystem</a> 可以让 AI 操作文件</p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/bc4985a8e0d24a77be09853f5194c1d1~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ6K-X:q75.awebp?rk3s=f64ab15b&amp;x-expires=1751241378&amp;x-signature=h%2F1iwXlp3EcbaMmuV5SJrAwYV6s%3D" alt="image.png" loading="lazy"></p>
<p>MCP 不只是提供 Tool(工具) 还可以提供 Prompt(主要是作为 AI 提示词 模板)、Resource(客户端可以读取的数据（如 API 响应或文件内容）,这里不再展开感兴趣的自行<a href="https://link.juejin.cn?target=https%3A%2F%2Fmodelcontextprotocol.io%2Fintroduction" target="_blank" title="https://modelcontextprotocol.io/introduction" ref="nofollow noopener noreferrer">前往官网探索</a></p>
<p>然后要说的是: 使用一些 MCP 服务的时候要注意 <strong>安全</strong> 防止恶意代码被执行造成损失!</p>
<h2 data-id="heading-2">如何实现一个 MCP 服务？</h2>
<p>这里实现两个简单的 MCP 服务一个时间时间工具 和 简单的 GitHub 搜索,把官网 MCP 服务端的两种写法都实践一些</p>
<p>首先做一些准备工作, 为了方便使用 monorepo 的方式组织仓库 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fvaebe%2Fmcp" target="_blank" title="https://github.com/vaebe/mcp" ref="nofollow noopener noreferrer">猛击直达</a></p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/bf91267fc07b4e3893ebd6f4d46aa0f0~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ6K-X:q75.awebp?rk3s=f64ab15b&amp;x-expires=1751241378&amp;x-signature=IbkplntuqXB0krHzM4XYPEnFLyM%3D" alt="image.png" loading="lazy"></p>
<h3 data-id="heading-3">实现 time MCP 服务</h3>
<p>这里假设你已经准备好了一个与上边类似的仓库,然后进入到 time 文件夹</p>
<blockquote>
<p>如果你是一个单仓库,创建一个空的文件夹直接跟着做</p>
</blockquote>
<p>执行 <code>npm init -y</code> 初始化 package.json 文件</p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/091f86c2656043d8a1289267f257a1e9~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ6K-X:q75.awebp?rk3s=f64ab15b&amp;x-expires=1751241378&amp;x-signature=U4bhA%2BNIkIEYJdCgXX%2FstrsvQcU%3D" alt="image.png" loading="lazy"></p>
<p>安装需要的依赖</p>
<pre><code class="hljs language-bash" lang="bash">pnpm install @modelcontextprotocol/sdk zod dayjs
pnpm install -D @types/node typescript shx
</code></pre>
<p>创建 <code>index.ts</code> 文件</p>
<p>创建 <code>tsconfig.json</code> 写入如下内容 (仓库中是继承了根目录下的配置文件)</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"compilerOptions"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"target"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"ES2022"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"module"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"NodeNext"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"moduleResolution"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"NodeNext"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"strict"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"esModuleInterop"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"skipLibCheck"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"forceConsistentCasingInFileNames"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"resolveJsonModule"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"include"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"packages/**/*"</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"exclude"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"node_modules"</span><span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>修改 <code>package.json</code> 文件</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"time"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"version"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0.0.1"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"bin"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"mcp-server-time"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"dist/index.js"</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"scripts"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"build"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"tsc &amp;&amp; shx chmod +x dist/*.js"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"prepare"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"npm run build"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"watch"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"tsc --watch"</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"files"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-string">"dist"</span>
  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"dependencies"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"@modelcontextprotocol/sdk"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"1.8.0"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"dayjs"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"^1.11.13"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"zod"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"^3.22.4"</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"devDependencies"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"@types/node"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"^22.14.0"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"shx"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"^0.3.4"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"typescript"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"^5.6.2"</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>在 <code>index.ts</code> 中写入如下代码</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-meta">#!/usr/bin/env node</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">McpServer</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'@modelcontextprotocol/sdk/server/mcp.js'</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">StdioServerTransport</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'@modelcontextprotocol/sdk/server/stdio.js'</span>
<span class="hljs-keyword">import</span> { z } <span class="hljs-keyword">from</span> <span class="hljs-string">'zod'</span>
<span class="hljs-keyword">import</span> dayjs <span class="hljs-keyword">from</span> <span class="hljs-string">'dayjs'</span>
<span class="hljs-keyword">import</span> utc <span class="hljs-keyword">from</span> <span class="hljs-string">'dayjs/plugin/utc.js'</span>
<span class="hljs-keyword">import</span> timezone <span class="hljs-keyword">from</span> <span class="hljs-string">'dayjs/plugin/timezone.js'</span>
<span class="hljs-keyword">import</span> packageJson <span class="hljs-keyword">from</span> <span class="hljs-string">'./package.json'</span>

<span class="hljs-comment">// 扩展 dayjs 以支持 UTC 和时区</span>
dayjs.<span class="hljs-title function_">extend</span>(utc)
dayjs.<span class="hljs-title function_">extend</span>(timezone)

<span class="hljs-comment">// 创建 MCP 服务器实例</span>
<span class="hljs-keyword">const</span> server = <span class="hljs-keyword">new</span> <span class="hljs-title class_">McpServer</span>({
  <span class="hljs-attr">name</span>: <span class="hljs-string">'mcp-server-time'</span>,
  <span class="hljs-attr">version</span>: packageJson.<span class="hljs-property">version</span>
})
</code></pre>
<blockquote>
<p>注意 <code>!/usr/bin/env node</code> (解释器指示符) 意思是需要使用 node 去执行代码</p>
</blockquote>
<p>增加获取当前时间的工具</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-comment">// 获取当前时间的工具</span>
server.<span class="hljs-title function_">tool</span>(
  <span class="hljs-string">'get_current_time'</span>, <span class="hljs-comment">// 工具名称</span>
  <span class="hljs-string">'获取当前时间'</span>, <span class="hljs-comment">// 工具描述</span>
  { 
    <span class="hljs-comment">// 工具参数</span>
    <span class="hljs-attr">timezone</span>: z.<span class="hljs-title function_">string</span>().<span class="hljs-title function_">optional</span>(),
  },
  <span class="hljs-comment">// 工具实现</span>
  <span class="hljs-keyword">async</span> ({ timezone }) =&gt; {
    <span class="hljs-comment">// 获取当前时间</span>
    <span class="hljs-keyword">const</span> tz = timezone || process.<span class="hljs-property">env</span>.<span class="hljs-property">LOCAL_TIMEZONE</span> || <span class="hljs-string">'Asia/Shanghai'</span>;
    <span class="hljs-comment">// 格式化当前时间</span>
    <span class="hljs-keyword">const</span> currentTime = <span class="hljs-title function_">dayjs</span>().<span class="hljs-title function_">tz</span>(tz).<span class="hljs-title function_">format</span>(<span class="hljs-string">'YYYY-MM-DD HH:mm:ss'</span>);

    <span class="hljs-comment">// 返回数据 - 下边的格式是固定的</span>
    <span class="hljs-keyword">return</span> {
      <span class="hljs-attr">content</span>: [{ <span class="hljs-attr">type</span>: <span class="hljs-string">"text"</span>, <span class="hljs-attr">text</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>({ currentTime }, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>) }],
    };
  }
)
</code></pre>
<p>增加时间转换工具</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-comment">// 时间转换工具</span>
server.<span class="hljs-title function_">tool</span>(
  <span class="hljs-string">'convert_time'</span>, <span class="hljs-comment">// 工具名称</span>
  <span class="hljs-string">'在时区之间转换时间'</span>, <span class="hljs-comment">// 工具描述</span>
  {
    <span class="hljs-comment">// 工具参数</span>
    <span class="hljs-attr">source_timezone</span>: z.<span class="hljs-title function_">string</span>(),
    <span class="hljs-attr">time</span>: z.<span class="hljs-title function_">string</span>().<span class="hljs-title function_">regex</span>(<span class="hljs-regexp">/^([01]\d|2[0-3]):([0-5]\d)$/</span>, <span class="hljs-string">'Invalid time format, expected HH:MM'</span>),
    <span class="hljs-attr">target_timezone</span>: z.<span class="hljs-title function_">string</span>(),
  },
  <span class="hljs-comment">// 工具实现</span>
  <span class="hljs-keyword">async</span> ({ source_timezone, time, target_timezone }) =&gt; {
    <span class="hljs-keyword">const</span> sourceTime = dayjs.<span class="hljs-title function_">tz</span>(<span class="hljs-string">`<span class="hljs-subst">${dayjs().format(<span class="hljs-string">'YYYY-MM-DD'</span>)}</span> <span class="hljs-subst">${time}</span>`</span>, source_timezone);
    <span class="hljs-keyword">const</span> convertedTime = sourceTime.<span class="hljs-title function_">clone</span>().<span class="hljs-title function_">tz</span>(target_timezone).<span class="hljs-title function_">format</span>();
    <span class="hljs-keyword">return</span> {
      <span class="hljs-attr">content</span>: [{ <span class="hljs-attr">type</span>: <span class="hljs-string">"text"</span>, <span class="hljs-attr">text</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>({ convertedTime }, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>) }],
    };
  }
)
</code></pre>
<p>启动 MCP 服务器</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-comment">// 启动服务器</span>
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">runServer</span>(<span class="hljs-params"></span>) {
  <span class="hljs-comment">// 这两行代码应该算是固定写法</span>
  <span class="hljs-keyword">const</span> transport = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StdioServerTransport</span>()
  <span class="hljs-keyword">await</span> server.<span class="hljs-title function_">connect</span>(transport)
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'获取当前时间和时区转换的 MCP 服务器已在 stdio 上启动'</span>)
}

<span class="hljs-title function_">runServer</span>().<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'启动服务器时出错:'</span>, error)
  process.<span class="hljs-title function_">exit</span>(<span class="hljs-number">1</span>)
})
</code></pre>
<h3 data-id="heading-4">实现 gitHub search MCP 服务</h3>
<p>这里与上边的引入有一点差别使用 <code>Server</code> 而不是 <code>McpServer</code> 来实现服务</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-meta">#!/usr/bin/env node</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Server</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"@modelcontextprotocol/sdk/server/index.js"</span>;
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">StdioServerTransport</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'@modelcontextprotocol/sdk/server/stdio.js'</span>
<span class="hljs-keyword">import</span> { z } <span class="hljs-keyword">from</span> <span class="hljs-string">'zod'</span>
<span class="hljs-keyword">import</span> packageJson <span class="hljs-keyword">from</span> <span class="hljs-string">'./package.json'</span>
<span class="hljs-keyword">import</span> {<span class="hljs-title class_">CallToolRequestSchema</span>, <span class="hljs-title class_">ListToolsRequestSchema</span>,} <span class="hljs-keyword">from</span> <span class="hljs-string">"@modelcontextprotocol/sdk/types.js"</span>;
<span class="hljs-keyword">import</span> { zodToJsonSchema } <span class="hljs-keyword">from</span> <span class="hljs-string">'zod-to-json-schema'</span>;

<span class="hljs-keyword">const</span> server = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Server</span>(
  {
    <span class="hljs-attr">name</span>: <span class="hljs-string">"github-search-mcp-server"</span>,
    <span class="hljs-attr">version</span>: packageJson.<span class="hljs-property">version</span>,
  },
  {
    <span class="hljs-attr">capabilities</span>: {
      <span class="hljs-attr">tools</span>: {},
    },
  }
);
</code></pre>
<p>这里会统一定义工具列表</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-comment">// 定义 GitHub 搜索工具的输入参数</span>
<span class="hljs-keyword">const</span> <span class="hljs-title class_">SearchParamsSchema</span> = z.<span class="hljs-title function_">object</span>({
  <span class="hljs-attr">query</span>: z.<span class="hljs-title function_">string</span>().<span class="hljs-title function_">describe</span>(<span class="hljs-string">'搜索关键词，用于匹配 GitHub 中的内容'</span>),
  <span class="hljs-attr">page</span>: z.<span class="hljs-title function_">number</span>().<span class="hljs-title function_">optional</span>().<span class="hljs-title function_">default</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">describe</span>(<span class="hljs-string">'当前页码，用于分页查询'</span>),
  <span class="hljs-attr">perPage</span>: z.<span class="hljs-title function_">number</span>().<span class="hljs-title function_">optional</span>().<span class="hljs-title function_">default</span>(<span class="hljs-number">30</span>).<span class="hljs-title function_">describe</span>(<span class="hljs-string">'每页返回的搜索结果数量'</span>),
  <span class="hljs-attr">type</span>: z.<span class="hljs-title function_">enum</span>([<span class="hljs-string">'repositories'</span>, <span class="hljs-string">'code'</span>, <span class="hljs-string">'issues'</span>, <span class="hljs-string">'users'</span>])
    .<span class="hljs-title function_">optional</span>()
    .<span class="hljs-title function_">describe</span>(<span class="hljs-string">'搜索类型，可选值为 repositories、code、issues 或 users'</span>)
});

<span class="hljs-comment">// 定义获取 GitHub 用户信息的输入参数</span>
<span class="hljs-keyword">const</span> <span class="hljs-title class_">UserInfoParamsSchema</span> = z.<span class="hljs-title function_">object</span>({
  <span class="hljs-attr">username</span>: z.<span class="hljs-title function_">string</span>().<span class="hljs-title function_">describe</span>(<span class="hljs-string">'GitHub 的用户名'</span>)
});

<span class="hljs-comment">// 定义工具列表及输入参数</span>
server.<span class="hljs-title function_">setRequestHandler</span>(<span class="hljs-title class_">ListToolsRequestSchema</span>, <span class="hljs-keyword">async</span> () =&gt; {
  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">tools</span>: [
      {
        <span class="hljs-attr">name</span>: <span class="hljs-string">"github_search"</span>,
        <span class="hljs-attr">description</span>: <span class="hljs-string">"在 GitHub 上搜索仓库、代码、Issues 或用户"</span>,
        <span class="hljs-attr">inputSchema</span>: <span class="hljs-title function_">zodToJsonSchema</span>(<span class="hljs-title class_">SearchParamsSchema</span>),
      },
      {
        <span class="hljs-attr">name</span>: <span class="hljs-string">"get_github_user"</span>,
        <span class="hljs-attr">description</span>: <span class="hljs-string">"通过用户名查询 GitHub 用户信息"</span>,
        <span class="hljs-attr">inputSchema</span>: <span class="hljs-title function_">zodToJsonSchema</span>(<span class="hljs-title class_">UserInfoParamsSchema</span>),
      },
    ]
  }
})
</code></pre>
<p>实现对应的工具</p>
<pre><code class="hljs language-ts" lang="ts">server.<span class="hljs-title function_">setRequestHandler</span>(<span class="hljs-title class_">CallToolRequestSchema</span>, <span class="hljs-keyword">async</span> (request) =&gt; {
  <span class="hljs-keyword">try</span> {
    <span class="hljs-keyword">if</span> (!request.<span class="hljs-property">params</span>.<span class="hljs-property">arguments</span>) {
      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">"Arguments are required"</span>);
    }

    <span class="hljs-keyword">switch</span> (request.<span class="hljs-property">params</span>.<span class="hljs-property">name</span>) {
      <span class="hljs-comment">// GitHub 搜索工具</span>
      <span class="hljs-keyword">case</span> <span class="hljs-string">"search_github"</span>: {
        <span class="hljs-keyword">const</span> { query, page, perPage, <span class="hljs-keyword">type</span> } = <span class="hljs-title class_">SearchParamsSchema</span>.<span class="hljs-title function_">parse</span>(request.<span class="hljs-property">params</span>.<span class="hljs-property">arguments</span>);

        <span class="hljs-keyword">const</span> url = <span class="hljs-string">`https://api.github.com/search/<span class="hljs-subst">${<span class="hljs-keyword">type</span>}</span>?q=<span class="hljs-subst">${<span class="hljs-built_in">encodeURIComponent</span>(query)}</span>&amp;page=<span class="hljs-subst">${page}</span>&amp;per_page=<span class="hljs-subst">${perPage}</span>`</span>
        <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url, {
          <span class="hljs-attr">headers</span>: {
            <span class="hljs-title class_">Accept</span>: <span class="hljs-string">'application/vnd.github.v3+json'</span>,
            <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">`Bearer <span class="hljs-subst">${process.env.GITHUB_TOKEN}</span>`</span>
          }
        })

        <span class="hljs-keyword">if</span> (!res.<span class="hljs-property">ok</span>) {
          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`GitHub API 错误: <span class="hljs-subst">${res.status}</span> <span class="hljs-subst">${res.statusText}</span>`</span>)
        }

        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>()

        <span class="hljs-keyword">return</span> {
          <span class="hljs-attr">content</span>: [{ <span class="hljs-attr">type</span>: <span class="hljs-string">"text"</span>, <span class="hljs-attr">text</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>) }],
        };
      }

      <span class="hljs-comment">// 获取 GitHub 用户信息工具</span>
      <span class="hljs-keyword">case</span> <span class="hljs-string">"get_github_user"</span>: {
        <span class="hljs-keyword">const</span> { username } = <span class="hljs-title class_">UserInfoParamsSchema</span>.<span class="hljs-title function_">parse</span>(request.<span class="hljs-property">params</span>.<span class="hljs-property">arguments</span>);
        <span class="hljs-keyword">const</span> url = <span class="hljs-string">`https://api.github.com/users/<span class="hljs-subst">${<span class="hljs-built_in">encodeURIComponent</span>(username)}</span>`</span>
        <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url, {
          <span class="hljs-attr">headers</span>: {
            <span class="hljs-title class_">Accept</span>: <span class="hljs-string">'application/vnd.github.v3+json'</span>,
            <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">`Bearer <span class="hljs-subst">${process.env.GITHUB_TOKEN}</span>`</span>
          }
        })

        <span class="hljs-keyword">if</span> (!res.<span class="hljs-property">ok</span>) {
          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`获取用户信息失败: <span class="hljs-subst">${res.status}</span> <span class="hljs-subst">${res.statusText}</span>`</span>)
        }

        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>()

        <span class="hljs-keyword">return</span> {
          <span class="hljs-attr">content</span>: [{ <span class="hljs-attr">type</span>: <span class="hljs-string">"text"</span>, <span class="hljs-attr">text</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>) }],
        };
      }

      <span class="hljs-attr">default</span>:
        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`Unknown tool: <span class="hljs-subst">${request.params.name}</span>`</span>);
    }
  } <span class="hljs-keyword">catch</span> (error) {
    <span class="hljs-keyword">if</span> (error <span class="hljs-keyword">instanceof</span> z.<span class="hljs-property">ZodError</span>) {
      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`Invalid input: <span class="hljs-subst">${<span class="hljs-built_in">JSON</span>.stringify(error.errors)}</span>`</span>);
    }
    <span class="hljs-keyword">throw</span> error;
  }
});
</code></pre>
<p>这里需要注意的是我们使用了一个 <code>process.env.GITHUB_TOKEN</code> (调用 GitHub 的 token 可以在 github 中生成) 环境变量</p>
<p>启动 MCP 服务器,这里和上边一样</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">runServer</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> transport = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StdioServerTransport</span>()
  <span class="hljs-keyword">await</span> server.<span class="hljs-title function_">connect</span>(transport)
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'GitHub 搜索 MCP 服务器已在 stdio 上启动'</span>)
}

<span class="hljs-title function_">runServer</span>().<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'启动服务器时出错:'</span>, error)
  process.<span class="hljs-title function_">exit</span>(<span class="hljs-number">1</span>)
})
</code></pre>
<h2 data-id="heading-5">测试 MCP 服务</h2>
<p>官方提供了一个测试工具<a href="https://link.juejin.cn?target=https%3A%2F%2Fmodelcontextprotocol.io%2Fdocs%2Ftools%2Finspector" target="_blank" title="https://modelcontextprotocol.io/docs/tools/inspector" ref="nofollow noopener noreferrer">猛击直达</a></p>
<p>在调试之前需要先执行 <code>pnpm run build</code> 执行打包</p>
<h3 data-id="heading-6">测试 time MCP 服务</h3>
<p>执行 <code>npx @modelcontextprotocol/inspector node dist/index.js </code></p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/60ae5f0fa70e44d9b2d2dd0cb8488e8c~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ6K-X:q75.awebp?rk3s=f64ab15b&amp;x-expires=1751241378&amp;x-signature=LHKKNxdRSRcpTFvpT386CG7%2FE1A%3D" alt="image.png" loading="lazy"></p>
<p>访问 <code>http://127.0.0.1:6274</code></p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a93ffa77538941dfa0ab529c8c9eea72~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ6K-X:q75.awebp?rk3s=f64ab15b&amp;x-expires=1751241378&amp;x-signature=%2BaxDUG1Zb4Nzzbak1%2FRPSkPHj%2FE%3D" alt="image.png" loading="lazy"></p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/631dcb6ec6c2467ab2ecf68b7ba0b2d1~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ6K-X:q75.awebp?rk3s=f64ab15b&amp;x-expires=1751241378&amp;x-signature=gD59z%2F5ejiyiTuEAtFlNv4UYUNA%3D" alt="image.png" loading="lazy"></p>
<p>获取当前时间</p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/8519b927dcfb4da980910e3204ec542e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ6K-X:q75.awebp?rk3s=f64ab15b&amp;x-expires=1751241378&amp;x-signature=f2iouAXNguip3f4eziNIOLIYOaU%3D" alt="image.png" loading="lazy"></p>
<p>根据时区转换时间</p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/b0da0ac2628d445389e8a8c6623028b6~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ6K-X:q75.awebp?rk3s=f64ab15b&amp;x-expires=1751241378&amp;x-signature=N1V%2Fn0SlW28AXxIe8rg%2BbKZVDlQ%3D" alt="image.png" loading="lazy"></p>
<h3 data-id="heading-7">测试 gitHub search MCP 服务</h3>
<p>执行 <code>npx @modelcontextprotocol/inspector node dist/index.js</code></p>
<p>访问 <code>http://127.0.0.1:6274</code></p>
<p>这里因为使用了 <code>process.env.GITHUB_TOKEN</code> 环境变量,启动的时候我们需要进行设置,否则 GitHub api 调用会 401</p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/975ce90fc67b48768cb3258b9d2c076e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ6K-X:q75.awebp?rk3s=f64ab15b&amp;x-expires=1751241378&amp;x-signature=weO9euvKIG4%2FYT3pgUYGryM5X%2BE%3D" alt="image.png" loading="lazy"></p>
<p><strong>根据用户名获取 GitHub 的用户的信息</strong></p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/1d8041c33aa1496d830a7d83cbccafc2~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ6K-X:q75.awebp?rk3s=f64ab15b&amp;x-expires=1751241378&amp;x-signature=3eIsFlVumcwaJo6Y%2BBFi7cipc90%3D" alt="image.png" loading="lazy"></p>
<p><strong>github_search 之 查询多个 GitHub 用户</strong></p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/669aad6f7d234aeeb53c5030ccf2fa8e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ6K-X:q75.awebp?rk3s=f64ab15b&amp;x-expires=1751241378&amp;x-signature=7EYbB21gTgPttXZw8bbqaLNrWGA%3D" alt="image.png" loading="lazy"></p>
<p>按照要求返回两个符合条件的用户信息</p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/869f50148f7b4fcb9af3f562469aaa0e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ6K-X:q75.awebp?rk3s=f64ab15b&amp;x-expires=1751241378&amp;x-signature=Cqsq8HaUJ%2FOvyXHw32tWYpMr4jQ%3D" alt="image.png" loading="lazy"></p>
<h2 data-id="heading-8">如何使用 ？</h2>
<h3 data-id="heading-9">在 vscode 中</h3>
<p>vscode 版本更新后增加了 MCP 的相关功能 我的版本是 1.99.2</p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/66fd370f06f0421fbca55529564e5e52~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ6K-X:q75.awebp?rk3s=f64ab15b&amp;x-expires=1751241378&amp;x-signature=3h7bE0EYacwNvppyVRsZz%2FrtjtE%3D" alt="image.png" loading="lazy"></p>
<p>打开配置面板 (<code>⌘,</code>&nbsp;on Mac or&nbsp;<code>Ctrl+,</code>&nbsp;on Windows/Linux)</p>
<p>搜索 <code>chat.agent.enabled</code></p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/387d7a3605654a788efc2b3b229d6aaa~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ6K-X:q75.awebp?rk3s=f64ab15b&amp;x-expires=1751241378&amp;x-signature=hH0jeAz9PXE%2Fqz20iG2QvElxSL0%3D" alt="image.png" loading="lazy"></p>
<p>创建 <code>.vscode/mcp.json</code> <a href="https://link.juejin.cn?target=https%3A%2F%2Fcode.visualstudio.com%2Fdocs%2Fcopilot%2Fchat%2Fmcp-servers" target="_blank" title="https://code.visualstudio.com/docs/copilot/chat/mcp-servers" ref="nofollow noopener noreferrer">官方文档</a> 写入如下内容</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"inputs"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"promptString"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"id"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"GITHUB_TOKEN"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"description"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"GitHub token"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"password"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"servers"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"github-search"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"stdio"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"command"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"npx"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"args"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"-y"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"@vaebe/server-github-search"</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"env"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">"GITHUB_TOKEN"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"${input:GITHUB_TOKEN}"</span>
      <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"get_current_time"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"stdio"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"command"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"node"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"args"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"xxxx/packages/time/dist/index.js"</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>npx 是一个允许你直接运行 npm 包中命令、无需全局安装的工具</p>
<p><code>get_current_time</code> 这个配置中 <code>"xxxx/packages/time/dist/index.js"</code> 是你 mcp 文件的绝对路径</p>
<p>细心的你可能发现了 还有一种 docker 的调用方式,这里没有写!</p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/6d27818af61140c48f9feb134d9e3604~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ6K-X:q75.awebp?rk3s=f64ab15b&amp;x-expires=1751241378&amp;x-signature=isvRFl08VHdiaPyEwCS9gVSSIe4%3D" alt="image.png" loading="lazy"></p>
<p>打开 AI 对话面板-连接 MCP</p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/8d91c890d63c4ab7be2762f5d4ce0a75~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ6K-X:q75.awebp?rk3s=f64ab15b&amp;x-expires=1751241378&amp;x-signature=2519Pol%2B1IEW9waOrjc5fEUv7S0%3D" alt="image.png" loading="lazy"></p>
<p>填写参数</p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/7311fe67cab7428689838ec414db8233~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ6K-X:q75.awebp?rk3s=f64ab15b&amp;x-expires=1751241378&amp;x-signature=ejDJRvH9sD%2BJuZ%2BXEiehG7Slo9k%3D" alt="image.png" loading="lazy"></p>
<p>MCP 工具列表</p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f92c61a11e9f4c548b53feb6134b6be2~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ6K-X:q75.awebp?rk3s=f64ab15b&amp;x-expires=1751241378&amp;x-signature=Xxbz%2BrlLLKdLMYAFfeuHYdXFhi0%3D" alt="image.png" loading="lazy"></p>
<p><strong>时间 MCP 服务调用</strong></p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/d11768d2a0ac404e942e4568a7fa30ac~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ6K-X:q75.awebp?rk3s=f64ab15b&amp;x-expires=1751241378&amp;x-signature=GXAsxmwSQHIYYdKlzxqVnNrOQIg%3D" alt="image.png" loading="lazy"></p>
<p><strong>GitHub 搜索 MCP服务调用</strong></p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ba12df698b3b4d1bb95128bc93680941~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZSQ6K-X:q75.awebp?rk3s=f64ab15b&amp;x-expires=1751241378&amp;x-signature=IdYFJGCwEfyHUJw1gW3n47NtLTg%3D" alt="image.png" loading="lazy"></p>
<h3 data-id="heading-10">在 nextjs 中使用 ai sdk 调用</h3>
<p>具体示例可以在 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fvaebe%2Fai-chat%2Ftree%2Fmain%2Fapp%2Fapi%2Fai%2Fchat" target="_blank" title="https://github.com/vaebe/ai-chat/tree/main/app/api/ai/chat" ref="nofollow noopener noreferrer">ai-chat</a> 仓库中查看</p>
<p>首先 <code>ai</code> 的版本要大于 4.2 因为 mcp clent 是 4.2 更新的内容</p>
<p>这个仓库是一个 AI 应用还在开发中,代码可能会发生变化</p>
<p>在 <code>app/api/ai/chat/mcp/index.ts</code> 写入 连接 MCP 服务的逻辑</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">import</span> { experimental_createMCPClient <span class="hljs-keyword">as</span> createMCPClient } <span class="hljs-keyword">from</span> <span class="hljs-string">'ai'</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Experimental</span>_StdioMCPTransport <span class="hljs-keyword">as</span> <span class="hljs-title class_">StdioMCPTransport</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'ai/mcp-stdio'</span>

<span class="hljs-comment">/**
 * 一个 MCP clent 只能连接一个 MCP server
 * 所以这里我们后边可以创建多个 MCP server 函数然后导出
 */</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createGithubSearchMcpServer</span>(<span class="hljs-params"></span>) {
  <span class="hljs-comment">// 创建 MCP client</span>
  <span class="hljs-keyword">const</span> client = <span class="hljs-keyword">await</span> <span class="hljs-title function_">createMCPClient</span>({
    <span class="hljs-attr">transport</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">StdioMCPTransport</span>({
      <span class="hljs-attr">command</span>: <span class="hljs-string">'npx'</span>,
      <span class="hljs-attr">args</span>: [<span class="hljs-string">'-y'</span>, <span class="hljs-string">'@vaebe/server-github-search'</span>],
      <span class="hljs-attr">env</span>: {
        <span class="hljs-attr">GITHUB_TOKEN</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">GITHUB_TOKEN</span> ?? <span class="hljs-string">''</span>
      }
    })
  })

  <span class="hljs-comment">// 获取 MCP server 的工具列表</span>
  <span class="hljs-keyword">const</span> tools = <span class="hljs-keyword">await</span> client.<span class="hljs-title function_">tools</span>()

  <span class="hljs-keyword">return</span> {
    client,
    tools
  }
}
</code></pre>
<p>然后在调用 AI 的地方引入使用</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">import</span> { createGithubSearchMcpServer } <span class="hljs-keyword">from</span> <span class="hljs-string">'./mcp'</span>
<span class="hljs-comment">// 省略其他代码</span>

<span class="hljs-keyword">const</span> githubSearchMcp = <span class="hljs-keyword">await</span> <span class="hljs-title function_">createGithubSearchMcpServer</span>()

<span class="hljs-keyword">const</span> result = <span class="hljs-title function_">streamText</span>({
    <span class="hljs-attr">model</span>: <span class="hljs-title function_">openai</span>(<span class="hljs-string">'qwen-turbo-latest'</span>), <span class="hljs-comment">// 模型名称</span>
    <span class="hljs-attr">system</span>: <span class="hljs-string">'你是一个通用的智能 AI 可以根据用户的输入回答问题'</span>,
    messages, <span class="hljs-comment">// 传入用户消息历史</span>
    <span class="hljs-attr">tools</span>: {
      ...githubSearchMcp.<span class="hljs-property">tools</span>
    },
    <span class="hljs-attr">maxSteps</span>: <span class="hljs-number">5</span>
})
</code></pre>
<p>目前看还是 MCP 服务当成 <code>Function Call</code> 来用了</p>
<h2 data-id="heading-11">总结</h2>
<p>这就是我一个周的实践过程</p>
<p>回答了我最初的两个问题: MCP 是什么? MCP 可以干什么?</p>
<p>实现了两个简单的 MCP 服务, 一个用来获取当前时间、转换时区, 另一个是用于检索 GitHub 信息</p>
<p>做了相关测试,在 vscode 、nextjs、 ai/sdk 中使用 MCP 服务</p>
<p>在动手实践的过程中更容易理解 MCP 这个概念</p>
<p>MCP 潜力绝不止如此</p>
<h2 data-id="heading-12">参考</h2>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fmodelcontextprotocol.io%2Fintroduction" target="_blank" title="https://modelcontextprotocol.io/introduction" ref="nofollow noopener noreferrer">modelcontextprotocol.io</a></p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fdev.to%2Fshadid12%2Fhow-to-build-mcp-servers-with-typescript-sdk-1c28" target="_blank" title="https://dev.to/shadid12/how-to-build-mcp-servers-with-typescript-sdk-1c28" ref="nofollow noopener noreferrer">How to build MCP servers with TypeScript SDK</a></p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fnorahsakal.com%2Fblog%2Fmcp-vs-api-model-context-protocol-explained%2F" target="_blank" title="https://norahsakal.com/blog/mcp-vs-api-model-context-protocol-explained/" ref="nofollow noopener noreferrer">What is Model Context Protocol (MCP)? How it simplifies AI integrations compared to APIs</a></p>
<p><a href="https://juejin.cn/post/7482582836706197531" target="_blank" title="https://juejin.cn/post/7482582836706197531">MCP从理解到实现</a></p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fmcp.so%2Fzh" target="_blank" title="https://mcp.so/zh" ref="nofollow noopener noreferrer">mcp.so</a></p>
<h2 data-id="heading-13">更多</h2>
<p><a href="https://juejin.cn/post/7505325778222530611" target="_blank" title="https://juejin.cn/post/7505325778222530611">MCP Server 的三种实现</a></p></div></div>