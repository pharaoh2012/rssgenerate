
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/qife122/p/18955597" title="发布于 2025-06-29 08:01">
    <span role="heading" aria-level="2">Swag - 将Go注释转换为Swagger文档的强大工具</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        Swag是一个将Go语言注释自动转换为Swagger 2.0文档的工具，支持多种流行Go Web框架。通过简单的注释即可生成完整的API文档，支持Swagger UI集成，大大简化了API文档编写工作。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="项目标题与描述">项目标题与描述</h2>
<p>Swag是一个强大的Go语言工具，能够将代码中的注释自动转换为符合Swagger 2.0规范的API文档。项目支持多种主流Go Web框架，包括Gin、Echo等，通过简单的代码注释即可生成专业的API文档。</p>
<p>核心价值：</p>
<ul>
<li>自动化文档生成，减少手动编写工作量</li>
<li>与Swagger UI无缝集成</li>
<li>支持多种Go Web框架</li>
<li>丰富的注释功能，支持参数验证、响应模型等</li>
</ul>
<h2 id="功能特性">功能特性</h2>
<ul>
<li><strong>自动文档生成</strong>：通过解析Go代码中的特殊注释自动生成Swagger文档</li>
<li><strong>多框架支持</strong>：支持Gin、Echo等多种流行Go Web框架</li>
<li><strong>丰富的注释功能</strong>：
<ul>
<li>API基本信息（标题、版本、描述等）</li>
<li>路由定义</li>
<li>参数描述（路径参数、查询参数、请求体等）</li>
<li>响应模型定义</li>
<li>安全定义（BasicAuth、APIKey、OAuth2等）</li>
</ul>
</li>
<li><strong>类型安全</strong>：支持Go基本类型和自定义类型的映射</li>
<li><strong>扩展功能</strong>：
<ul>
<li>枚举类型支持</li>
<li>字段重命名</li>
<li>字段忽略</li>
<li>自定义字段类型</li>
</ul>
</li>
</ul>
<h2 id="安装指南">安装指南</h2>
<h3 id="基本安装">基本安装</h3>
<pre><code class="language-bash">go get -u github.com/swaggo/swag/cmd/swag
</code></pre>
<h3 id="项目中使用">项目中使用</h3>
<ol>
<li>在项目中添加Swag注释</li>
<li>运行命令生成文档：</li>
</ol>
<pre><code class="language-bash">swag init
</code></pre>
<h3 id="依赖项">依赖项</h3>
<ul>
<li>Go 1.18+</li>
<li>支持的Web框架（如Gin、Echo等）</li>
</ul>
<h2 id="使用说明">使用说明</h2>
<h3 id="基础示例">基础示例</h3>
<pre><code class="language-go">// @Summary 获取用户信息
// @Description 通过用户ID获取用户详细信息
// @Tags users
// @Accept json
// @Produce json
// @Param id path int true "用户ID"
// @Success 200 {object} model.User
// @Failure 400 {object} web.APIError
// @Failure 404 {object} web.APIError
// @Router /users/{id} [get]
func GetUser(c *gin.Context) {
    // 处理逻辑
}
</code></pre>
<h3 id="与gin框架集成">与Gin框架集成</h3>
<pre><code class="language-go">package main

import (
    "github.com/gin-gonic/gin"
    _ "github.com/swaggo/swag/example/celler/docs"
    swaggerFiles "github.com/swaggo/files"
    ginSwagger "github.com/swaggo/gin-swagger"
)

// @title Swagger示例API
// @version 1.0
// @description 这是一个示例服务器
func main() {
    r := gin.Default()
    r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
    r.Run(":8080")
}
</code></pre>
<h2 id="核心代码">核心代码</h2>
<h3 id="注释解析核心">注释解析核心</h3>
<pre><code class="language-go">// Operation描述单个API操作
type Operation struct {
    parser              *Parser
    codeExampleFilesDir string
    spec.Operation
    RouterProperties []RouteProperties
    State            string
}

// RouteProperties描述HTTP路由属性
type RouteProperties struct {
    HTTPMethod string
    Path       string
    Deprecated bool
}
</code></pre>
<h3 id="类型定义处理">类型定义处理</h3>
<pre><code class="language-go">// TypeSpecDef包含类型定义的完整信息
type TypeSpecDef struct {
    File      *ast.File       // 包含TypeSpec的ast文件
    TypeSpec  *ast.TypeSpec   // 类型定义
    Enums     []EnumValue     // 枚举值
    PkgPath   string          // 包路径
    ParentSpec ast.Decl       // 父声明
    SchemaName string         // Schema名称
    NotUnique bool            // 是否唯一
}
</code></pre>
<h3 id="swagger文档生成">Swagger文档生成</h3>
<pre><code class="language-go">// Spec保存导出的Swagger信息
type Spec struct {
    Version          string
    Host             string
    BasePath         string
    Schemes          []string
    Title            string
    Description      string
    InfoInstanceName string
    SwaggerTemplate  string
    LeftDelim        string
    RightDelim       string
}

// ReadDoc将SwaggerTemplate解析为swagger文档
func (i *Spec) ReadDoc() string {
    // 处理模板和转义字符
    tpl := template.New("swagger_info").Funcs(template.FuncMap{
        "marshal": func(v interface{}) string {
            a, _ := json.Marshal(v)
            return string(a)
        },
        "escape": func(v interface{}) string {
            str := strings.ReplaceAll(v.(string), "\t", "\\t")
            str = strings.ReplaceAll(str, "\"", "\\\"")
            return strings.ReplaceAll(str, "\\\\\"", "\\\\\\\"")
        },
    })
    // 解析并执行模板
    parsed, _ := tpl.Parse(i.SwaggerTemplate)
    var doc bytes.Buffer
    _ = parsed.Execute(&amp;doc, i)
    return doc.String()
}
</code></pre>
<p>更多精彩内容 请关注我的个人公众号 公众号（办公AI智能小助手）<br>
公众号二维码<br>
<img alt="" title="办公AI智能小助手" loading="lazy" data-src="https://i.imgs.ovh/2025/06/21/AejG6.png" class="lazyload"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-29 08:02">2025-06-29 08:01</span>&nbsp;
<a href="https://www.cnblogs.com/qife122">qife</a>&nbsp;
阅读(<span id="post_view_count">6</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18955597);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18955597', targetLink: 'https://www.cnblogs.com/qife122/p/18955597', title: 'Swag - 将Go注释转换为Swagger文档的强大工具' })">举报</a>
</div>
        