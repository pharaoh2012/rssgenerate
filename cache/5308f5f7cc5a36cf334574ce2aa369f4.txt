<!----> <meta itemprop="headline" content="写给前端,学习项目如何用Docker部署?"> <meta itemprop="keywords" content="前端,Docker,Vue.js"> <meta itemprop="datePublished" content="2024-12-31T09:54:32.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="czkm"> <meta itemprop="url" content="https://juejin.cn/user/3280598427778392"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-fcbde74a="">
            写给前端,学习项目如何用Docker部署?
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-fcbde74a=""><div class="author-info-box" data-v-fcbde74a=""><div class="author-name" data-v-fcbde74a=""><a href="/user/3280598427778392/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-fcbde74a=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    czkm
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-fcbde74a=""><time datetime="2024-12-31T09:54:32.000Z" title="Tue Dec 31 2024 09:54:32 GMT+0000 (Coordinated Universal Time)" class="time" data-v-fcbde74a="">
                    2024-12-31
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-fcbde74a=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-fcbde74a=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-fcbde74a=""></circle></svg> <span class="views-count" data-v-fcbde74a="">
                    5,429
                  </span> <span class="read-time" data-v-fcbde74a=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-fcbde74a=""><rect width="16" height="16" fill="none" data-v-fcbde74a=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-fcbde74a=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-fcbde74a=""></path></svg>
                    阅读9分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-fcbde74a=""></div> <!----> <!----></div> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-fcbde74a=""><div class="article-viewer markdown-body cache result"><h2 data-id="heading-0">写在前面</h2>
<h3 data-id="heading-1">Docker对比传统虚拟机</h3>






























<table><thead><tr><th>特性</th><th>容器</th><th>虚拟</th></tr></thead><tbody><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr><tr><td>硬盘使用</td><td>一般为 <code>MB</code></td><td>一般为 <code>GB</code></td></tr><tr><td>性能</td><td>接近原生</td><td>弱于</td></tr><tr><td>系统支持量</td><td>单机支持上千个容器</td><td>一般几十个</td></tr></tbody></table>
<blockquote>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.docker.com%2F" target="_blank" title="https://www.docker.com/" ref="nofollow noopener noreferrer">Docker</a> 是个划时代的开源项目，它彻底释放了计算虚拟化的威力，极大提高了应用的维护效率，降低了云计算应用开发的成本！使用 Docker，可以让应用的部署、测试和分发都变得前所未有的高效和轻松！
无论是应用开发者、运维人员、还是其他信息技术从业人员，都有必要认识和掌握 Docker，节约有限的生命。</p>
</blockquote>
<p>文章的主旨通过让开发者通过将一个vue项目进行Docker化,以达到对Docker学习作用,主要流程如下</p>
<ul>
<li>
<p>打包手头的一个Vue项目，生成的<code>dist文件夹</code>,编写<code>Dockerfile</code>文件 通过docker打包生成一个<code>前端镜像</code>，然后通过这个<code>前端镜像</code>实例化启动一个<code>前端容器</code> 实现前端项目部署</p>
</li>
<li>
<p>配置后端环境,或者启动一个<code>node服务</code>，实现简单接口。也通过docker打包生成一个<code>node服务镜像</code>，运行一个<code>nodeserver容器</code>，提供后端接口 实现后端服务部署</p>
</li>
<li>
<p>通过<code>nginx</code>代理，让前端接口的请求转发到<code>nodeserver容器</code>上 实现<code>nginx代理转发</code></p>
</li>
</ul>
<h2 data-id="heading-2">1. Docker是什么?为什么要用?</h2>
<h3 data-id="heading-3">Docker基本概念</h3>
<p>上面说了一堆流程,最开始者要先理解docker的三个基本概念</p>
<ul>
<li><strong>镜像（Image）：</strong> Docker 镜像是一个只读的模板，用来创建容器,简单来说就是为<code>容器</code>运行提供需要的程序、资源、配置等, 他在构建成功后就不会变化,只用于启动容器</li>
<li><strong>容器（Container）：</strong> 容器是镜像的运行实例，可以被启动、停止、删除 ,一个Docker镜像可以例化出来多个容器，每个容器之间是独立的。Docker的容器是用来<code>运行程序的,</code>可以理解为Docker的容器就是一个操作系统，目的是运行我们写的程序。</li>
<li><strong>仓库（Repository）：</strong> 用来存储和分发 Docker 镜像的地方 <a href="https://link.juejin.cn?target=https%3A%2F%2Fhub.docker.com%2F" target="_blank" title="https://hub.docker.com/" ref="nofollow noopener noreferrer">Dockerhub</a> 有点类似于github用户可以在上面托管镜像</li>
</ul>
<p>核心概念就是，通过<strong>Dockerfile</strong>生成<code>镜像</code><strong>或者从Dockerhub</strong>中获取镜像 然后去创建<code>容器</code>,最后让<code>程序跑在容器上</code>。</p>
<p>理解了这三个概念，就理解了 <strong>Docker</strong> 的整个生命周期</p>
<h3 data-id="heading-4">为什么要使用Docker</h3>
<ul>
<li><strong>环境一致性:</strong>  避免发生在我的电脑上能运行,别人的电脑上用不了的问题，确保开发、测试和生产环境的一致性</li>
<li><strong>版本隔离：</strong> 在同一台服务器上运行不同版本的应用（如不同版本的Node.js），避免项目报错</li>
<li><strong>服务迁移：</strong> 容器化后的应用可以轻松地在不同服务器间迁移，无需担心环境差异</li>
<li><strong>标准化交付：</strong> 提供了一个标准的软件交付方式，减少了人为部署错误</li>
</ul>
<p>使用Docker不仅能解决传统部署中的环境依赖问题，还能大大提高开发和部署效率。如果你管理多个项目，Docker能显著简化维护工作，你总不想因为不同的环境,不同的依赖导致问题而苦恼吧.</p>
<p>对于前端开发的日常来说,基本用不到容器化, 基本的部署也是打个dist包给运维(后端)让他们部署</p>
<p><strong>前端开发不懂容器化很正常，但是至少要让自己了解它。</strong></p>
<h2 data-id="heading-5">2. 环境搭建</h2>
<h3 data-id="heading-6">Docker 安装</h3>
<p>docker 分为 <code>stable</code> <code>test</code> 和 <code>nightly</code> 三个更新频道。官方网站上有各种环境下的 <a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.docker.com%2Fget-docker%2F" target="_blank" title="https://docs.docker.com/get-docker/" ref="nofollow noopener noreferrer">安装指南</a>，</p>
<p>根据操作系统选择安装方式：</p>
<ul>
<li>
<p>Linux 安装</p>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># Ubuntu</span>
sudo apt-get update
sudo apt-get install docker-ce

<span class="hljs-comment"># CentOS</span>
sudo yum install docker-ce
</code></pre>
</li>
<li>
<p>Windows/Mac 安装</p>
<p>下载并安装 <a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.docker.com%2Fget-started%2F" target="_blank" title="https://www.docker.com/get-started/" ref="nofollow noopener noreferrer">Docker Desktop</a>。</p>
</li>
</ul>
<p>安装完成后执行<code>docker --version</code>验证是否成功</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/336e385f4a844b43b3d7e10016d50896~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgY3prbQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742435270&amp;x-signature=9R0GtuDLX%2FYzNRck%2BebgX%2FgeEM4%3D" alt="image1.png" loading="lazy"></p>
<p>如果 <code>docker version</code>、<code>docker info</code> 都正常的话，可以尝试运行一下 <a href="https://link.juejin.cn?target=https%3A%2F%2Fhub.docker.com%2F_%2Fnginx%2F" target="_blank" title="https://hub.docker.com/_/nginx/" ref="nofollow noopener noreferrer">Nginx 服务器</a>：</p>
<pre><code class="hljs language-bash" lang="bash">docker run -d -p 80:80 --name webserver nginx`
</code></pre>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/3cf28334314c48d9bc23872e44185dec~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgY3prbQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742435270&amp;x-signature=h5DxcGwm3hCxOjrzZyEBYDwmFvg%3D" alt="image2.png" loading="lazy"></p>
<p>服务运行后，可以访问 <a href="https://link.juejin.cn?target=http%3A%2F%2Flocalhost%2F" target="_blank" title="http://localhost/" ref="nofollow noopener noreferrer"></a><a href="https://link.juejin.cn?target=http%3A%2F%2Flocalhost" target="_blank" title="http://localhost" ref="nofollow noopener noreferrer">http://localhost</a>，如果看到了 "Welcome to nginx!"，就说明基础环境都配置成功了。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/59df67e8afc44c8aabd1df8aef42719b~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgY3prbQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742435270&amp;x-signature=qUvl3CVtwvBiUkS9LY5zzxAEohM%3D" alt="docker1.png" loading="lazy"></p>
<hr>
<p>可以通过命令行或者通过Docker Desktop停止 Nginx 服务器并删除执：</p>
<pre><code class="hljs language-bash" lang="bash">docker stop webserver 
docker <span class="hljs-built_in">rm</span> webserver

</code></pre>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/bfe352c55c0f49958dd7c67788f29129~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgY3prbQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742435270&amp;x-signature=1gntUzuPgZxp70cLDLf18xvUdUw%3D" alt="image3.png" loading="lazy"></p>
<p>如果在使用过程中发现拉取 Docker 镜像十分缓慢，可以在 Docker Desktop 配置国内镜像加速。</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-attr">"registry-mirrors"</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span>
    <span class="hljs-string">"https://registry.docker-cn.com"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">"https://docker.mirrors.ustc.edu.cn"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">"http://hub-mirror.c.163.com"</span>
<span class="hljs-punctuation">]</span>
</code></pre>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/88d792d1658348d3bea5b6b0a5a656f0~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgY3prbQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742435270&amp;x-signature=%2Brsz0Bv0PZQDguKhxULwxyM5J2k%3D" alt="image4.png" loading="lazy"></p>
<h2 data-id="heading-7">3. 将项目容器化</h2>
<h3 data-id="heading-8">3.1 构建镜像前准备</h3>
<p>首先明确2个概念</p>
<ul>
<li>
<p>docker 中容器(<strong>Container</strong>)像一个虚拟机，容器中运行着一个完整的操作系统。可以在容器中装 Nodejs,mySql等,可以在命令行中执行相对应的操作</p>
</li>
<li>
<p>镜像(<strong>Image</strong>)是一个文件，它是用来创建容器的。他通过执行Dockerfile文件而来</p>
</li>
</ul>
<p>在项目根目录下建立3个文件, 分别为</p>
<ul>
<li><code>dockerfile</code> 用于配置docker构建信息</li>
</ul>
<pre><code class="hljs language-js" lang="js"># 使用 <span class="hljs-title class_">Node</span>.<span class="hljs-property">js</span> <span class="hljs-number">16</span> 作为基础镜像
<span class="hljs-variable constant_">FROM</span> <span class="hljs-attr">node</span>:<span class="hljs-number">16.14</span><span class="hljs-number">.2</span>

# 将当前工作目录设置为/app
<span class="hljs-variable constant_">WORKDIR</span> /app

# 将 package.<span class="hljs-property">json</span> 和 package-lock.<span class="hljs-property">json</span> 复制到 /app 目录下
<span class="hljs-variable constant_">COPY</span> package*.<span class="hljs-property">json</span> ./

# 运行 npm install 安装依赖
<span class="hljs-variable constant_">RUN</span> yarn install


# 将源代码复制到 /app 目录下
<span class="hljs-variable constant_">COPY</span> . .

# 打包构建
<span class="hljs-variable constant_">RUN</span> npm run build

# 将构建后的代码复制到 nginx 镜像中
<span class="hljs-variable constant_">FROM</span> <span class="hljs-attr">nginx</span>:latest
<span class="hljs-variable constant_">COPY</span> --<span class="hljs-keyword">from</span>=<span class="hljs-number">0</span> /app/dist /usr/share/nginx/html

# 复制自定义的<span class="hljs-title class_">Nginx</span>配置到镜像中，覆盖默认配置
<span class="hljs-variable constant_">COPY</span> nginx/<span class="hljs-keyword">default</span>.<span class="hljs-property">conf</span> /etc/nginx/conf.<span class="hljs-property">d</span>/<span class="hljs-keyword">default</span>.<span class="hljs-property">conf</span>

<span class="hljs-variable constant_">EXPOSE</span> <span class="hljs-number">80</span>

# 启动 nginx 服务
<span class="hljs-variable constant_">CMD</span> [<span class="hljs-string">"nginx"</span>, <span class="hljs-string">"-g"</span>, <span class="hljs-string">"daemon off;"</span>]
</code></pre>
<p>只有&nbsp;<code>RUN</code>,&nbsp;<code>COPY</code>,&nbsp;<code>ADD</code>&nbsp;会创建层数, 其它指令不会增加镜像的体积</p>
<p>如果是构建过程中npm因为网络原因,安装依赖失败可以考虑使用 npm镜像地址或者使用cnpm</p>
<pre><code class="hljs language-css" lang="css"># 运行 npm install 安装cnpm 再通过cnpm安装依赖 
RUN npm -g <span class="hljs-attr">--cache</span>=<span class="hljs-attribute">none</span> <span class="hljs-attr">--registry</span> https://registry.npmmirror.com \
 &amp;&amp; cnpm install
</code></pre>
<ul>
<li><code>dockerignore</code> 与<code>.gitignore</code>&nbsp;语法一致。使用它排除构建无关的文件及目录，如&nbsp;<code>node_modules</code></li>
</ul>
<pre><code class="hljs language-dockerignore" lang="dockerignore">.DS_Store
node_modules
/dist


# local env files
.env.local
.env.*.local

# Log files
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# Editor directories and files
.idea
.vscode
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
dist.zip
</code></pre>
<ul>
<li><code>nginx/default.conf</code> 用于自定义配置ngnix配置</li>
</ul>
<pre><code class="hljs language-default.conf" lang="default.conf">server {
    listen 80;   # 端口号是80
    server_name localhost;
    
    location / {
        root   /usr/share/nginx/html;  # nginx 默认会从这个路径下加载网页，这是 nginx 默认的网页根目录
        index  index.html index.htm;
    }

    error_page  404              /404.html;  # 错误404处理
    error_page  500 502 503 504  /50x.html;  # 错误5XX处理

    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}
</code></pre>
<h3 data-id="heading-9">3.2 通过使用docker build命令构建前端镜像</h3>
<p>编写完成3个文件后就可以开始构建了,执行下列命令</p>
<pre><code class="hljs language-bash" lang="bash">docker build -t gyljr-admin:v1 .
</code></pre>
<p>这里的<code>docker build -t</code> 后面第一个参数为我自定义的项目名,你也可以随便取一个,第二个:v1则代表构建的tag 如果通过这个来区分不同版本构建.最后的.号代表上下文路径，<code>docker</code> 会在这个路径下寻找 <code>dockerfile</code> 及其他文件，根据 <code>dockerfile</code> 配置打镜像。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/7f277cc3f0f84f28bd5d2aa03b5c7abb~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgY3prbQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742435270&amp;x-signature=cP4KPiJTBwjh9jgspfKRfTfpwsA%3D" alt="image5.png" loading="lazy"></p>
<p>如果成功打出了镜像,可以在本地运行一下这个镜像进行验证</p>
<p>通过<code>docker run -d -p 3000:80 --name gyljr-admin-web gyljr-admin:v1</code> 来运行</p>
<p><code>3000:80</code>代表把宿主机的 <code>3000</code> 端口转发到容器的 <code>80</code> 端口，<code>gyljr-admin:v1</code>则是我们刚才打出的镜像的名字。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/1b5143fb6653463ca338fe246333fdd3~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgY3prbQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742435270&amp;x-signature=jmVqwEYqNWFsZ3VYg%2BdXhw8jqAU%3D" alt="image6.png" loading="lazy"></p>
<p>可以通过<code>docker ps</code> 或者直接访问 <a href="https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A3000%2F" target="_blank" title="http://localhost:3000/" ref="nofollow noopener noreferrer">http://localhost:3000/</a> 此时应该可以看到 前端静态页面已经部署</p>
<p>这时我们发现网页的接口请求都为404,是因为我们只部署了前端的页面和静态资源还需要部署后端的接口服务</p>
<h3 data-id="heading-10">3.3 编写简易node后端服务</h3>
<p>由于我手头上没有合适的后端服务,如果有需要可以先安装docker数据库,开发环境等,因此我打算用一个简单的node服务来模拟后端服务</p>
<p>新建项目文件夹后执行</p>
<pre><code class="hljs language-bash" lang="bash">npm i koa koa-router nodemon
</code></pre>
<p>创建一个简单的 Koa 服务作为示例：</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Koa</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa'</span>);
<span class="hljs-keyword">const</span> <span class="hljs-title class_">Router</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa-router'</span>);

<span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Koa</span>();
<span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>();

<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleRequest</span>(<span class="hljs-params">ctx</span>) {
    <span class="hljs-keyword">try</span> {
        ctx.<span class="hljs-property">body</span> = {
            <span class="hljs-string">"code"</span>: <span class="hljs-number">200</span>,
            <span class="hljs-string">"status"</span>: <span class="hljs-number">1</span>,
            <span class="hljs-string">"message"</span>: <span class="hljs-string">"ok"</span>,
            <span class="hljs-string">"data"</span>: {
                <span class="hljs-string">"userRole"</span>: <span class="hljs-number">1</span>,
                <span class="hljs-string">"userId"</span>: <span class="hljs-string">"000000000000000001"</span>,
                <span class="hljs-string">"companyId"</span>: <span class="hljs-string">"1000000000000000001"</span>,
                <span class="hljs-string">"userName"</span>: <span class="hljs-string">"test"</span>,
            }
        }
    } <span class="hljs-keyword">catch</span>(error) {
        ctx.<span class="hljs-property">status</span> = <span class="hljs-number">500</span>;
        ctx.<span class="hljs-property">body</span> = {
            <span class="hljs-attr">error</span>: <span class="hljs-string">'Internal Server Error'</span>
        };
    }
}

router.<span class="hljs-title function_">post</span>(<span class="hljs-string">'/Account/SignIn'</span>, <span class="hljs-title function_">async</span>(ctx) = &gt;{
    <span class="hljs-keyword">await</span> <span class="hljs-title function_">handleRequest</span>(ctx);
});


<span class="hljs-comment">// 使用路由中间件</span>
app.<span class="hljs-title function_">use</span>(router.<span class="hljs-title function_">routes</span>());
app.<span class="hljs-title function_">use</span>(router.<span class="hljs-title function_">allowedMethods</span>());

<span class="hljs-comment">// 启动服务器</span>
<span class="hljs-keyword">const</span> port = <span class="hljs-number">1000</span>;
app.<span class="hljs-title function_">listen</span>(port, () = &gt;{
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Server is running on port $ {
        port
    }`</span>);
});
</code></pre>
<p>可以看到这个node 服务主要功能就是接受一个post请求，模拟请求,接口路径是<code>http://localhost:1000/Account/SignIn</code></p>
<p>这里可以根据你项目实际情况修改,在你的前端项目的请求中,找个接口的路径名称复制上去即可, 我这里是用的登陆接口</p>
<p>修改该项目<code>pack.json</code></p>
<pre><code class="hljs language-js" lang="js">{
  <span class="hljs-string">"type"</span>: <span class="hljs-string">"commonjs"</span>,
  <span class="hljs-string">"scripts"</span>: {
    <span class="hljs-string">"start"</span>: <span class="hljs-string">"nodemon app.js"</span> <span class="hljs-comment">//主要是这行</span>
  },
  <span class="hljs-string">"dependencies"</span>: {
    <span class="hljs-string">"koa"</span>: <span class="hljs-string">"^2.15.2"</span>,
    <span class="hljs-string">"koa-router"</span>: <span class="hljs-string">"^12.0.1"</span>
  },
  <span class="hljs-string">"devDependencies"</span>: {
    <span class="hljs-string">"nodemon"</span>: <span class="hljs-string">"^3.1.9"</span>
  }
}
</code></pre>
<p>运行<code>node app.js</code>发现项目正常启动,且用<code>postman</code>或其他接口工具能够正常访问即可开始构建镜像</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/6e85c13b3552422a97d3c791decfc3aa~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgY3prbQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742435270&amp;x-signature=PesplIKSjGQF0hMpra0yRP6O434%3D" alt="image7.png" loading="lazy"></p>
<h3 data-id="heading-11">3.3 构建node后端服务镜像</h3>
<ul>
<li>编写Dockerfile文件</li>
</ul>
<pre><code class="hljs language-js" lang="js"># 指定镜像
<span class="hljs-variable constant_">FROM</span> <span class="hljs-attr">node</span>:<span class="hljs-number">16.14</span><span class="hljs-number">.2</span>

# 复制文件到容器中 .就是当前目录下所有的文件。 /app就是容器的路径（自定义）
<span class="hljs-variable constant_">ADD</span> . /app  

# 进入工作区（跟复制的文件路径一致）
<span class="hljs-variable constant_">WORKDIR</span> /app

# 安装依赖
<span class="hljs-variable constant_">RUN</span> npm install

# 暴露端口
<span class="hljs-variable constant_">EXPOSE</span> <span class="hljs-number">1000</span>

# 启动服务
<span class="hljs-variable constant_">CMD</span> [<span class="hljs-string">"node"</span>, <span class="hljs-string">"app.js"</span>]
</code></pre>
<h3 data-id="heading-12">3.2 Docker 配置与构建</h3>
<p>创建dockerfile 文件：这里我node服务写的比较简单只需要安装依赖即可执行,如果比较复杂的话需要修改这里配置</p>
<pre><code class="hljs language-js" lang="js"># 指定基础镜像
<span class="hljs-variable constant_">FROM</span> <span class="hljs-attr">node</span>:<span class="hljs-number">16.14</span><span class="hljs-number">.2</span>

# 设置工作目录
<span class="hljs-variable constant_">WORKDIR</span> /app

# 复制项目文件
<span class="hljs-variable constant_">ADD</span> . /app

# 安装依赖
<span class="hljs-variable constant_">RUN</span> npm install

# 暴露端口
<span class="hljs-variable constant_">EXPOSE</span> <span class="hljs-number">1000</span>

# 启动服务
<span class="hljs-variable constant_">CMD</span> [<span class="hljs-string">"node"</span>, <span class="hljs-string">"app.js"</span>]
</code></pre>
<p>之后一样的 可以通过命令来构建镜像</p>
<pre><code class="hljs language-erlang" lang="erlang">docker build -t node_server:v1 .
</code></pre>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/d23ee38ebb3a448f8769606bed9f8cf1~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgY3prbQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742435270&amp;x-signature=WRdLSQ2o8c2rIwxoMubq94GawLA%3D" alt="image8.png" loading="lazy"></p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/b1daf0bcca354a19b9f7336cd1cef28b~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgY3prbQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742435270&amp;x-signature=ENw0hntYH5Mbb0zFYIxFT9%2FEs3g%3D" alt="image9.png" loading="lazy"></p>
<p>可以看到我们的镜像都已经构建成功,之后执行代码来运行容器</p>
<pre><code class="hljs language-bash" lang="bash">docker run -d --name node_server_container -p 9000:1000 node_server:v1
</code></pre>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/2aff00e5424f483ab1b2f36e6e2504b4~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgY3prbQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742435270&amp;x-signature=HeRekkcn8j71Xr9WVfgPcC6qpyU%3D" alt="image10.png" loading="lazy"></p>
<h2 data-id="heading-13">4 Nginx 反向代理配置</h2>
<pre><code class="hljs language-js" lang="js"> <span class="hljs-attr">proxy</span>: {
        <span class="hljs-string">'/api'</span>: {
          <span class="hljs-attr">target</span>: <span class="hljs-string">`http://xxx.xx.x.x:xxxx`</span>, <span class="hljs-comment">// 后端地址服务地址</span>
          <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,
          <span class="hljs-attr">secure</span>: <span class="hljs-literal">false</span>,
          <span class="hljs-attr">rewrite</span>: <span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span> path.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\/api/</span>, <span class="hljs-string">''</span>),
        },
      }
</code></pre>
<p>我们平常开发前端的项目时,如果请求本地的后端地址,实际上是<code>vite</code>或者<code>webpack</code>都会启动一个服务用于转发我们的接口路径,从而达到解决跨域问题的效果,但是现在打包后前端项目都是静态而且位于docker容器内该如何转发呢?</p>
<p>接下来我们就需要将前端页面的请求通过<code>nginx</code>转发到<code>node_server_container这</code>个容器的ip和端口下</p>
<h3 data-id="heading-14">4.1 Docker容器ip,端口获取</h3>
<p>可以通过<code>docker desktop</code>查看一下<code>node_server_container</code>的ip 命令行可以通过先用<code>docker ps</code> 获取容器id后 <code>docker inspect 容器id</code> 获取ip</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/b4abac42f1e94f96bf47394430482cea~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgY3prbQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742435270&amp;x-signature=z3H7o4l8p%2FZ73vynMMtOM8oXy5I%3D" alt="image11.png" loading="lazy"></p>
<h3 data-id="heading-15">4.2 修改ngnix配置</h3>
<p>知道了node服务端的ip和端口接下来只要修改nginx配置即可,这时候可以不用重新打镜像而是直接修改镜像的ngnix配置</p>
<pre><code class="hljs language-json" lang="json">server <span class="hljs-punctuation">{</span>
    listen <span class="hljs-number">80</span>;   # 端口号是<span class="hljs-number">80</span>
    server_name localhost;
    
    location / <span class="hljs-punctuation">{</span>
        root   /usr/share/nginx/html;  # nginx 默认会从这个路径下加载网页，这是 nginx 默认的网页根目录
        index  index.html index.htm;
    <span class="hljs-punctuation">}</span>
	  location /api/ <span class="hljs-punctuation">{</span>    
      rewrite  /api/(.*)  /$<span class="hljs-number">1</span>  break;  # 如果需要把路径/api路径替换为/像我这个后端服务中没有需要替换的路径这里其实用不到
      proxy_pass http<span class="hljs-punctuation">:</span><span class="hljs-comment">//172.17.0.3:1000;</span>
	  <span class="hljs-punctuation">}</span>

    location /Account/ <span class="hljs-punctuation">{</span> 
        proxy_pass http<span class="hljs-punctuation">:</span><span class="hljs-comment">//172.17.0.3:1000;  # proxy_pass：就是对应代理到server容器上的地址。</span>
    <span class="hljs-punctuation">}</span>

    error_page  <span class="hljs-number">404</span>              /<span class="hljs-number">404.</span>html;  # 错误<span class="hljs-number">404</span>处理
    error_page  <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /<span class="hljs-number">50</span>x.html;  # 错误<span class="hljs-number">5</span>XX处理

    location = /<span class="hljs-number">50</span>x.html <span class="hljs-punctuation">{</span>
        root   /usr/share/nginx/html;
    <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>修改容器ngnix配置可以通过以下方法</p>
<pre><code class="hljs language-bash" lang="bash">docker <span class="hljs-built_in">exec</span> -it gyljr-admin-web bash
</code></pre>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># 修改配置文件</span>
vi /etc/nginx/conf.d/default.conf
</code></pre>
<p>用vi修改完成后，按<code>ESC</code> 键 跳到命令模式，然后输入退出命令<code>:wq</code> 即可保存文件并退出vi,之后执行</p>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># 测试配置是否正确</span>
nginx -t

<span class="hljs-comment"># 重载配置（不停止服务）</span>
nginx -s reload
</code></pre>
<hr>
<p>如果你docker内没有vi 那就先安装一个或者直接改前端项目的<code>nginx/default.conf</code>配置,之后再重新打包一个镜像即可,下面是容器内安装vi的方法</p>
<p>查看版本</p>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-built_in">cat</span> /etc/os-release 
</code></pre>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/0c927199fc6e43c29f218f080e482b69~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgY3prbQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742435270&amp;x-signature=z1Ds1Zg8LOJ3cE82t6WAyAqKXys%3D" alt="image12.png" loading="lazy"></p>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># Debian/Ubuntu based</span>

apt-get update
apt-get install vim

<span class="hljs-comment"># Alpine based</span>

apk add --no-cache vim
</code></pre>
<hr>
<p>如此完成<code>ngnix</code>配置的修改后再次登陆前端页面可以发现,页面已经可以正常请求</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/14c293ff7cf04ba7a25bc56950e4bba5~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgY3prbQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742435270&amp;x-signature=B971TMi1xQlB%2BwizWjCdCC7xo7k%3D" alt="image13.png" loading="lazy"></p>
<h3 data-id="heading-16">4.3 常用 Docker 命令速查</h3>
<ul>
<li>
<p>构建镜像：docker&nbsp;build -t &lt;镜像名&gt; .</p>
</li>
<li>
<p>运行容器：docker run -p &lt;本地端口&gt;:&lt;容器端口&gt; -d &lt;镜像名&gt;</p>
</li>
<li>
<p>查看正在运行的容器：docker&nbsp;ps</p>
</li>
<li>
<p>停止容器：docker&nbsp;stop&nbsp;&lt;容器ID&gt;</p>
</li>
<li>
<p>删除容器：docker rm &lt;容器ID&gt;</p>
</li>
<li>
<p>查看镜像列表：docker images</p>
</li>
<li>
<p>删除镜像：docker rmi&nbsp;&lt;镜像ID&gt;</p>
</li>
<li>
<p>查看容器日志：docker logs&nbsp;&lt;容器ID&gt;</p>
</li>
<li>
<p>进入容器内部：docker&nbsp;exec -it &lt;容器ID&gt; /bin/bash</p>
</li>
<li>
<p>查看容器内部文件：docker exec -it&nbsp;&lt;容器ID&gt; ls</p>
</li>
</ul>
<h2 data-id="heading-17">后记</h2>
<p>在本项目中学习 docker 的使用，还学会了如何使用 docker 制作镜像、运行容器, 其实还可以做自动化CI/CD 配置，从而实现代码提交或者更新 自动化构建然后发布,这个可以留个坑后续再做分享。</p>
<p>最后的最后,本着年底总得折腾点啥的心思写了这篇文章,如果有错误或者不足希望各位指正</p>
<p>2024年已经来到尾声,希望看到这里的你2025年能够健康顺遂! 新年快乐🎉</p></div></div>