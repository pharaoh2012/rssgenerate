
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/charlee44/p/18889653" title="发布于 2025-05-21 20:07">
    <span role="heading" aria-level="2">使用Vite创建一个动态网页的前端项目</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        详细介绍了使用Vite创建一个动态网页的前端项目的过程，并且对代码做了详细的解析
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="1-引言">1. 引言</h1>
<p>虽然现在的前端更新换代的速度很快，IDE和工具一批批的换，但是我们始终要理解一点基本的程序构建的思维，这些环境和工具都是为了帮助我们更快的发布程序。笔者还记得以前写前端代码的时候，只使用文本编辑器，然后在浏览器中刷新就可以了。对于纯前端项目，其实这样也是很方便的。不过一旦涉及到文件资源访问的问题就麻烦了，因为浏览器的安全限制，不能访问域以外的资源。那么你就需要将其部署到Web服务器中，这意味着你要起个服务器。另外，调试的时候也要每次都刷新页面；第三方依赖包的引入也是问题，需要自己去管理，然后进行引入。于是，像Vite这样的前端开发与构建工具就出现了，它可以帮助你将上述这些步骤自动化处理，加快你的前端程序的编程效率。这里笔者就总结一下如何使用Vite创建动态网页的前端项目。</p>
<h1 id="2-操作">2. 操作</h1>
<p>首先，安装<a href="https://nodejs.org/zh-cn" target="_blank" rel="noopener nofollow">Node.js</a>和npm。Node.js是JavaScript 的运行时环境，npm是一个包管理和任务运行工具，安装过程比较简单，这里就不复述了。</p>
<p>接下来，选择一个文件夹，在终端中运行以下命令来创建项目：</p>
<pre><code class="language-shell">npm create vite@latest my-native-js-app
</code></pre>
<p>这时，终端会让你选择一个框架：</p>
<pre><code class="language-shell">&gt; npx
&gt; create-vite my-native-js-app

|
*  Select a framework:
|  &gt; Vanilla
|    Vue
|    React
|    Preact
|    Lit
|    Svelte
|    Solid
|    Qwik
|    Angular
|    Marko
|    Others
—
</code></pre>
<p>这里笔者选择使用Vanilla，表示使用原生的模板，不使用任何框架。接下来，终端会让你选择使用TypeScript还是JavaScript：</p>
<pre><code>&gt; npx
&gt; create-vite my-native-js-app

|
o  Select a framework:
|  Vanilla
|
*  Select a variant:
|  &gt; TypeScript
|    JavaScript
—
</code></pre>
<p>这里笔者选择使用JavaScript。然后等待一会儿，前端项目就创建完成了，如下所示：</p>
<pre><code>&gt; npx
&gt; create-vite my-native-js-app

|
o  Select a framework:
|  Vanilla
|
o  Select a variant:
|  JavaScript
|
o  Scaffolding project in C:\Work\js\my-native-js-app...
|
—  Done. Now run:

  cd my-native-js-app
  npm install
  npm run dev
</code></pre>
<p>虽然可以接着使用终端，但这时就可以使用VS Code接管项目了。通过VS Code打开my-native-js-app文件夹，并启动终端，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1000410/202505/1000410-20250521200539342-107599351.png" alt="图1 通过VS Code打开一个前端项目" loading="lazy"></p>
<p>在终端执行指令：</p>
<pre><code class="language-shell">npm install
</code></pre>
<p>这一步是为了安装第三方依赖库。一般来说，如果你开始一个新的项目，这一步是必须的。当然依赖库安装完成后，如果后续依赖库没有变动，就不需要执行这一步了。</p>
<p>此时的项目的文件组织如下所示：</p>
<p>my-native-js-app<br>
├── public<br>
│   └── vite.svg<br>
├── src<br>
│   ├── counter.js<br>
│   ├── javascript.svg<br>
│   ├── main.js<br>
│   └── style.css<br>
├── index.html<br>
└── package.json</p>
<p>这里的package.json文件是npm的核心配置文件，如下所示：</p>
<pre><code class="language-json">{
  "name": "my-native-js-app",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "devDependencies": {
    "vite": "^6.3.5"
  }
}
</code></pre>
<p>主要作用有两个：</p>
<ol>
<li>依赖管理。dependencies字段和devDependencies字段，其中dependencies字段是项目需要的依赖库包，devDependencies构建项目需要的依赖库包。执行<code>npm install</code>就是根据这两个字段中的值自动安装响应的依赖包。</li>
<li>执行任务脚本。scripts字段，通过自定义命令来执行跟构建相关的任务，这里的dev、build和preview就是最基础和常用的三个指令。</li>
</ol>
<p>dev就是执行指令：</p>
<pre><code class="language-shell">npm run dev
</code></pre>
<p>表示在开发环境中启动服务器，终端一般会有如下提示：</p>
<pre><code class="language-shell">&gt; my-native-js-app@0.0.0 dev
&gt; vite


  VITE v6.3.5  ready in 500 ms

  ➜  Local:   http://localhost:5173/
  ➜  Network: use --host to expose
  ➜  press h + enter to show help
</code></pre>
<p>在浏览器中访问地址：<a href="http://localhost:5173/" target="_blank" rel="noopener nofollow">http://localhost:5173/</a> ，可以看到页面中显示了一个基础的HTML +JS示例，如下所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1000410/202505/1000410-20250521200601096-1064363964.png" alt="图2 Vite自带的HTML +JS示例" loading="lazy"></p>
<p>另外两个指令主要是为了实际发布时使用：</p>
<ul>
<li><code>npm run build</code>构建项目代码，比如压缩、拼接、混淆等。</li>
<li><code>npm run preview</code>发布经过构建后的代码项目。</li>
</ul>
<h1 id="3-解析">3. 解析</h1>
<p>这个示例JS项目不仅仅是个欢迎页面，甚至还是个动态页面：可以对鼠标点击的次数计数。那么我们就来稍微解析一下其中的代码。首先是index.html:</p>
<pre><code class="language-html">&lt;!doctype html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
    &lt;link rel="icon" type="image/svg+xml" href="/vite.svg" /&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt;
    &lt;title&gt;Vite App&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="app"&gt;&lt;/div&gt;
    &lt;script type="module" src="/src/main.js"&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>可以看到这个HTML页面并没有显示在界面的元素，因为这些元素都是通过JS动态加载上来的。另外，要注意的是这里的</p>
<pre><code>&lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt;
</code></pre>
<p>是用来兼容高分屏的，具体可以参看笔者的文章<a href="https://charlee44.com/post.html?id=8f6425fab4d348b9b45629bc2ad6cc91" target="_blank" rel="noopener nofollow">《HTML页面关于高分屏的设置》</a>。可以看到即使是这个最简化的示例都把这个元数据标签带上了，因为现在使用高分屏的设备已经非常多了。</p>
<p>接着我们来看一下main.js：</p>
<pre><code class="language-js">import './style.css'
import javascriptLogo from './javascript.svg'
import viteLogo from '/vite.svg'
import { setupCounter } from './counter.js'

document.querySelector('#app').innerHTML = `
  &lt;div&gt;
    &lt;a href="https://vite.dev" target="_blank"&gt;
      &lt;img src="${viteLogo}" class="logo" alt="Vite logo" /&gt;
    &lt;/a&gt;
    &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank"&gt;
      &lt;img src="${javascriptLogo}" class="logo vanilla" alt="JavaScript logo" /&gt;
    &lt;/a&gt;
    &lt;h1&gt;Hello Vite!&lt;/h1&gt;
    &lt;div class="card"&gt;
      &lt;button id="counter" type="button"&gt;&lt;/button&gt;
    &lt;/div&gt;
    &lt;p class="read-the-docs"&gt;
      Click on the Vite logo to learn more
    &lt;/p&gt;
  &lt;/div&gt;
`

setupCounter(document.querySelector('#counter'))
</code></pre>
<p>这段代码的主要意思也就是刚才说的，查询#app元素，并填充HTML字符串，也就是这个页面是先显示HTML，再通过js动态加载元素到页面中。</p>
<p>另一个有意思的点是这里的导入：</p>
<pre><code class="language-js">import './style.css'
import javascriptLogo from './javascript.svg'
import viteLogo from '/vite.svg'
</code></pre>
<p>其实并不是原生JS的行为，而是Vite提供的。这其实也体现了一种思想，HTML、CSS和JavaScript三者来说，JavaScript才是最主要的，css样式和HTML页面都可以通过JavaScript来生成。</p>
<p>再来看下counter.js：</p>
<pre><code class="language-js">export function setupCounter(element) {
  let counter = 0
  const setCounter = (count) =&gt; {
    counter = count
    element.innerHTML = `count is ${counter}`
  }
  element.addEventListener('click', () =&gt; setCounter(counter + 1))
  setCounter(0)
}
</code></pre>
<p>函数实现很简单，就是个简单的计数功能。不过要注意的是这里的<code>export function setupCounter(element)</code> 使用的是JavaScript ES6（ECMAScript 2015）中的模块导出语法，表示将setupCounter这个函数导出。在main.js中则进行导入：</p>
<pre><code class="language-js">import { setupCounter } from './counter.js'

setupCounter(document.querySelector('#counter'))
</code></pre>
<h1 id="4-结语">4. 结语</h1>
<p>之所以选择使用原生JS项目没有使用框架，是因为笔者想研究一下比较底层的实现，以及对比体会一些框架的设计思路。当然不能重复造轮子，但是也不能离开这些轮子就啥都不会了，理解一些更深层次、更底层的东西，有助于我们更新换代，使用更好的轮子。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.841975215681713" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-21 20:08">2025-05-21 20:07</span>&nbsp;
<a href="https://www.cnblogs.com/charlee44">charlee44</a>&nbsp;
阅读(<span id="post_view_count">73</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18889653);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18889653', targetLink: 'https://www.cnblogs.com/charlee44/p/18889653', title: '使用Vite创建一个动态网页的前端项目' })">举报</a>
</div>
        