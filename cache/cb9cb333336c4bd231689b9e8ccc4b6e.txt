
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/BettaFish/p/19027678" title="发布于 2025-08-07 23:28">
    <span role="heading" aria-level="2">为Avalonia应用自动生成StyledProperty和DirectProperty</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>最近学习了源生成器，遂仿照<a href="https://github.com/CommunityToolkit/Windows" target="_blank" rel="noopener nofollow">CommunityToolkit/Windows</a>中的DependencyPropertyGenerator写了个生成器，可自动生成Avalonia中的<code>StyledProperty</code>和<code>DirectProperty</code></p>
<p>NuGet：<a href="https://www.nuget.org/packages/PropertyGenerator.Avalonia" target="_blank" rel="noopener nofollow">https://www.nuget.org/packages/PropertyGenerator.Avalonia</a><br>
Github：<a href="https://github.com/zxbmmmmmmmmm/PropertyGenerator" target="_blank" rel="noopener nofollow">https://github.com/zxbmmmmmmmmm/PropertyGenerator</a></p>
<h2 id="先决条件">先决条件</h2>
<p>Avalonia版本：≥ 11.3.0</p>
<p>由于使用了<code>field</code>关键字和部分属性，需要在项目文件内将<code>LangVersion</code>设置为<code>preview</code></p>
<h2 id="styledproperty">StyledProperty</h2>
<p>在需要生成<code>StyledProperty</code>的部分属性上添加<code>GeneratedStyledProperty</code>特性即可</p>
<pre><code class="language-csharp">[GeneratedStyledProperty]
public partial int Count { get; set; }
</code></pre>
<p>生成的代码:</p>
<pre><code class="language-csharp">StyledProperty&lt;int&gt; CountProperty = AvaloniaProperty.Register&lt;MainWindow, int&gt;(name: nameof(Count));
public partial int Count { get =&gt; GetValue(CountProperty); set =&gt; SetValue(CountProperty, value); }
</code></pre>
<hr>
<p><code>StyledProperty</code>不支持直接设置默认值，需要使用以下写法</p>
<pre><code class="language-csharp">[GeneratedStyledProperty(10)]
public partial int Count { get; set; }
</code></pre>
<p>生成的代码:</p>
<pre><code class="language-csharp">Avalonia.StyledProperty&lt;int&gt; CountProperty = AvaloniaProperty.Register&lt;MainWindow, int&gt;(name: nameof(Count), defaultValue: 10);
public partial int Count { get =&gt; GetValue(CountProperty); set =&gt; SetValue(CountProperty, value); }
</code></pre>
<hr>
<p>StyledProperty的所有功能都被支持（仅作展示）</p>
<pre><code class="language-csharp">[GeneratedStyledProperty(
    DefaultValueCallback = nameof(DefaultValueCallback),
    DefaultValue = true,
    Validate = nameof(Validate),
    Coerce = nameof(Coerce),
    EnableDataValidation = true,
    Inherits = true,
    DefaultBindingMode = BindingMode.TwoWay)]
public partial bool? IsStarted { get; set; }

private static bool DefaultValueCallback()
{
    return true;
}
private static bool Validate(bool? value)
{
    return true;
}
private static bool? Coerce(AvaloniaObject x, bool? y)
{
    return true;
}
</code></pre>
<p>生成的代码：</p>
<pre><code class="language-csharp">StyledProperty&lt;bool?&gt; IsStartedProperty = AvaloniaProperty.Register&lt;MainWindow, bool?&gt;(
	name: nameof(IsStarted), 
	defaultValue: DefaultValueCallback(), 
	validate: Validate,
	coerce: Coerce, 
	enableDataValidation: true,
	inherits: true, 
	defaultBindingMode:BindingMode.TwoWay);
public partial bool? IsStarted { get =&gt; GetValue(IsStartedProperty); set =&gt; SetValue(IsStartedProperty, value); }
</code></pre>
<h2 id="directproperty">DirectProperty</h2>
<p>和<code>GeneratedStyledProperty</code>的写法相似：</p>
<pre><code class="language-csharp">[GeneratedDirectProperty]
public partial IEnumerable? Items { get; set; }
</code></pre>
<hr>
<p><code>DirectProperty</code>可以被直接初始化</p>
<pre><code class="language-csharp">[GeneratedDirectProperty]
public partial IEnumerable? Items { get; set; } = new AvaloniaList&lt;object&gt;();
</code></pre>
<hr>
<p>支持自定义<code>DirectProperty</code>的 <code>Getter</code> 和<code>Setter</code></p>
<pre><code class="language-csharp">[GeneratedDirectProperty(Getter = nameof(Getter), Setter = nameof(Setter))]
public partial IEnumerable? Items { get; set; }
public static IEnumerable? Getter(MainWindow o) =&gt; o.Items;
public static void Setter(MainWindow o, IEnumerable? v) =&gt; o.Items = v;
</code></pre>
<p>生成的代码：</p>
<pre><code class="language-csharp">public static readonly DirectProperty&lt;MainWindow, IEnumerable?&gt; ItemsProperty
    = AvaloniaProperty.RegisterDirect&lt;MainWindow, IEnumerable?&gt;(
    name: nameof(Items),
    getter: Getter, 
    setter: Setter);

public partial IEnumerable? Items { get =&gt; field; set =&gt; SetAndRaise(ItemsProperty, ref field, value); }
</code></pre>
<h2 id="onpropertychanged">OnPropertyChanged</h2>
<p>使用<code>GeneratedStyledProperty</code>或者<code>GeneratedDirectProperty</code>时，会自动生成部分方法用以通知属性更改</p>
<pre><code class="language-csharp">partial void OnCountPropertyChanged(int newValue);
partial void OnCountPropertyChanged(int oldValue, int newValue);
partial void OnCountPropertyChanged(AvaloniaPropertyChangedEventArgs e);

protected override void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change)
{
    base.OnPropertyChanged(change);
    switch (change.Property.Name)
    {
        case nameof(Count):
            OnCountPropertyChanged(change);
            OnCountPropertyChanged((int)change.NewValue);
            OnCountPropertyChanged((int)change.OldValue, (int)change.NewValue);
            break;
    }
}
</code></pre>
<p>可以直接使用这些方法直接处理属性的变化：</p>
<pre><code class="language-csharp">partial void OnCountPropertyChanged(int newValue) 
{ 
    // 处理属性变化...
}
</code></pre>
<p>如果代码已重写<code>OnPropertyChanged</code>并包含其他逻辑，则可以通过<code>DoNotGenerateOnPropertyChanged</code>特性关闭此功能：</p>
<pre><code class="language-csharp">[DoNotGenerateOnPropertyChanged]
public partial class MainWindow : Window
{ ... }
</code></pre>
<p>也可以在整个程序集上禁用此功能</p>
<pre><code class="language-csharp">[assembly: DoNotGenerateOnPropertyChanged]
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0006944444444444445" data-date-updated="2025-08-07 23:29">2025-08-07 23:28</span>&nbsp;
<a href="https://www.cnblogs.com/BettaFish">zxbmmmmmmmmm</a>&nbsp;
阅读(<span id="post_view_count">56</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19027678);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19027678', targetLink: 'https://www.cnblogs.com/BettaFish/p/19027678', title: '为Avalonia应用自动生成StyledProperty和DirectProperty' })">举报</a>
</div>
        