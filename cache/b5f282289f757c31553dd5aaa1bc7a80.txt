
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zjdxr-up/p/19053854" title="发布于 2025-08-23 18:41">
    <span role="heading" aria-level="2">kafka 副本集设置和理解</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>转载请注明出处：</p>
<p>　　最近在做集群高可用验证的时候，遇到了一个kafka 副本集高可用的问题，在这里分析总结一下。</p>
<p>　　当前的部署情况是kafka集群有三个节点；在做集群高可用验证的时候，先shutdown一个服务器实例之后，再验证服务相关的高可用，当shutdown一个实例之后，发现kafka 有的topic可以正常发送和接收消息，而有的topic 却不能。</p>
<p>　　报错的关键日志：</p>
<div class="cnblogs_code">
<pre>org.apache.kafka.common.errors.TimeoutException: Expiring <span style="color: rgba(128, 0, 128, 1)">53</span> record(s) <span style="color: rgba(0, 0, 255, 1)">for</span> TWAMP_LINK_TOPIC-<span style="color: rgba(128, 0, 128, 1)">0</span>: <span style="color: rgba(128, 0, 128, 1)">120000</span> ms has passed since batch creation</pre>
</div>
<p>　　再经过层层排查之后，通过以下命令，找到了关键点。</p>
<div class="cnblogs_code">
<pre>kafka-run-<span style="color: rgba(0, 0, 255, 1)">class</span> kafka.admin.TopicCommand --describe --topic TUNNEL_STATE_TOPIC --bootstrap-server kafka2:<span style="color: rgba(128, 0, 128, 1)">9092</span></pre>
</div>
<p>　　注意将 --topic 之后的topic 换成不同的topic进行查看，具体显示如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/1110857/202508/1110857-20250823171732873-318839045.png" alt="image" loading="lazy"></p>
<p class="ds-markdown-paragraph">根据提供的两个Topic的描述信息，可以得出以下结论：</p>
<div class="markdown-table-wrapper">
<table>
<thead>
<tr><th>主题名 (Topic)</th><th>状态</th><th>分区</th><th>副本因子</th><th>Leader</th><th>副本位置</th><th>ISR</th><th>诊断结果</th></tr>
</thead>
<tbody>
<tr>
<td>TWAMP_LINK_TOPIC</td>
<td>严重故障</td>
<td>0</td>
<td>1</td>
<td>none</td>
<td>3</td>
<td>3</td>
<td>完全不可用。因唯一副本在Broker 3上，且Broker 3已宕机。</td>
</tr>
<tr>
<td>TUNNEL_STATE_TOPIC</td>
<td>脆弱但可用</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>当前可用，但处于高风险中。因唯一副本在Broker 1上。</td>
</tr>
</tbody>
</table>
</div>
<p>再切换了之后，发现有的topic 存在正常的leader、 而有的topic 却不存在leader。 而kafka 发送消息是通过leader去发送的，没有leader就会异常。</p>
<p>输出结果详解：</p>
<h4>第一行：Topic 级别的概要信息</h4>
<div class="cnblogs_code">
<pre>Topic: TWAMP_LINK_TOPIC TopicId: iw-DWE9jSBKsxT7NJwQBzQ PartitionCount: <span style="color: rgba(128, 0, 128, 1)">1</span> ReplicationFactor: <span style="color: rgba(128, 0, 128, 1)">1</span> Configs:</pre>
</div>
<table>
<thead>
<tr><th>参数</th><th>值</th><th>解释</th></tr>
</thead>
<tbody>
<tr>
<td><code>Topic:</code></td>
<td><code>TWAMP_LINK_TOPIC</code></td>
<td>Topic的名称，由用户或应用程序创建时指定。</td>
</tr>
<tr>
<td><code>TopicId:</code></td>
<td><code>iw-DWE9jSBKsxT7NJwQBzQ</code></td>
<td>Topic的唯一内部标识符。在Kafka集群内部，TopicId比Topic名称更常用，因为它不会因Topic重命名而改变。这是一个由Kafka自动生成的唯一字符串。</td>
</tr>
<tr>
<td><code>PartitionCount:</code></td>
<td><code>1</code></td>
<td>该Topic的分区总数。分区是Kafka实现水平扩展和并行处理的基础单元。<code>1</code>表示所有数据都写入同一个分区，这可能会成为性能瓶颈。</td>
</tr>
<tr>
<td><code>ReplicationFactor:</code></td>
<td><code>1</code></td>
<td>副本因子。这是当前最关键、最不健康的参数。它表示Topic的每个分区数据有多少个副本。<code>1</code>意味着数据没有冗余，只在集群中的一台Broker上存了一份。这是生产环境的反模式，没有任何容错能力。</td>
</tr>
<tr>
<td><code>Configs:</code></td>
<td>(空)</td>
<td>显示该Topic级别的自定义配置（会覆盖Broker的全局默认配置）。例如<code>retention.ms</code>（数据保留时间）、<code>cleanup.policy</code>（清理策略）等。这里是空的，表示全部使用集群默认配置。</td>
</tr>
</tbody>
</table>
<h4>第二行：分区级别的详细信息</h4>
<div class="cnblogs_code">
<pre>Topic: TWAMP_LINK_TOPIC Partition: <span style="color: rgba(128, 0, 128, 1)">0</span> Leader: none Replicas: <span style="color: rgba(128, 0, 128, 1)">3</span> Isr: <span style="color: rgba(128, 0, 128, 1)">3</span></pre>
</div>
<table>
<thead>
<tr><th>参数</th><th>值</th><th>解释</th></tr>
</thead>
<tbody>
<tr>
<td><code>Topic:</code></td>
<td><code>TWAMP_LINK_TOPIC</code></td>
<td>分区所属的Topic名称。</td>
</tr>
<tr>
<td><code>Partition:</code></td>
<td><code>0</code></td>
<td>分区编号。由于<code>PartitionCount: 1</code>，所以只有一个分区，编号从0开始。</td>
</tr>
<tr>
<td><code>Leader:</code></td>
<td><code>none</code></td>
<td>这是最直接的故障表现！&nbsp;表示这个分区的领导者副本。所有客户端的读写请求都必须发往Leader副本。<br><code>none</code>&nbsp;意味着当前没有可用的Leader。因为唯一的副本（在Broker 3上）已经宕机，导致无法进行读写操作，从而引发&nbsp;<code>TimeoutException</code>。</td>


</tr>
<tr>
<td><code>Replicas:</code></td>
<td><code>3</code></td>
<td>副本列表。列出了存放这个分区数据的所有Broker的ID。<br>重要：这里的&nbsp;<code>3</code>&nbsp;是Broker的编号，不是数量！&nbsp;它的含义是：“这个分区的所有副本（因为<code>ReplicationFactor: 1</code>，所以其实就一个副本）存放在ID为3的Broker上。”<br>如果<code>ReplicationFactor</code>是3，这里可能会显示&nbsp;<code>Replicas: 1,2,3</code>。</td>


</tr>
<tr>
<td><code>Isr:</code></td>
<td><code>3</code></td>
<td>同步副本集（In-Sync Replicas）。这是一个动态列表，包含了当前所有与Leader副本保持同步的副本所在的Broker ID。<br>在健康状态下，<code>Isr</code>&nbsp;列表应该和&nbsp;<code>Replicas</code>&nbsp;列表一致（例如&nbsp;<code>Replicas: 1,2,3</code>&nbsp;和&nbsp;<code>Isr: 1,2,3</code>）。<br>这里的&nbsp;<code>3</code>&nbsp;表示：同步副本集中唯一的成员是Broker 3。&nbsp;但因为Broker 3宕机了，这个信息是“最后已知的良好状态”，实际上它已经不同步了，很快就会从ISR中被控制器移除。<br><br></td>


</tr>


</tbody>

</table>
<p>&nbsp;此处需要注意两个配置容易误解：</p>
<ol start="1">
<li>
<p class="ds-markdown-paragraph"><code>ReplicationFactor: 1</code>&nbsp;(副本因子：1)</p>
<ul>
<li>
<p class="ds-markdown-paragraph">这是最重要的配置！它意味着Kafka只会为这个分区的数据创建1个副本。这是数据的冗余度，决定了容错能力。</p>
</li>
<li>
<p class="ds-markdown-paragraph"><code>1</code>&nbsp;表示&nbsp;“没有冗余”。就像只把文件打印了一份。</p>
</li>
</ul>
</li>
<li>
<p class="ds-markdown-paragraph"><code>Replicas: 3</code>&nbsp;(副本所在Broker ID：3)</p>
<ul>
<li>
<p class="ds-markdown-paragraph">这个字段只是告诉你：那唯一的一个副本，被放置在了Broker ID 为 3 的服务器上。</p>
</li>
<li>
<p class="ds-markdown-paragraph">它不是说有三个副本。这里的&nbsp;<code>3</code>&nbsp;是一个Broker编号，不是数量。</p>
</li>
<li>
<p class="ds-markdown-paragraph">如果把&nbsp;<code>Replicas: 3</code>&nbsp;换成&nbsp;<code>Replicas: 1</code>，意思就是那唯一的一个副本在Broker 1上。</p>
</li>
</ul>
</li>
</ol>
<h3>&nbsp;解决方法：</h3>
<p>　　重新创建topic，并设置topic的副本因子的数量大于1；从而保证高可用</p>
<div class="cnblogs_code">
<pre>kafka-topics.sh --create --<span style="color: rgba(0, 0, 0, 1)">topic TWAMP_LINK_TOPIC \
</span>--partitions <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)"> \
</span>--replication-factor <span style="color: rgba(128, 0, 128, 1)">3</span> \  # 关键！必须设置为 <span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">，为每个分区创建3个副本
</span>--bootstrap-server kafka1:<span style="color: rgba(128, 0, 128, 1)">9092</span></pre>
</div>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-23 18:41">2025-08-23 18:41</span>&nbsp;
<a href="https://www.cnblogs.com/zjdxr-up">香吧香</a>&nbsp;
阅读(<span id="post_view_count">5</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19053854);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19053854', targetLink: 'https://www.cnblogs.com/zjdxr-up/p/19053854', title: 'kafka 副本集设置和理解' })">举报</a>
</div>
        