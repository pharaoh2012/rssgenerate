
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Meth-nylon/p/18936550" title="发布于 2025-06-19 19:46">
    <span role="heading" aria-level="2">前/后向自动微分的简单推导与rust简单实现</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        前/后向自动微分的原理简单介绍, 并用rust实现一个初版的前后向自动微分玩具
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>自动微分不同于数值微分与符号微分, 能够在保证速度的情况下实现高精度的求某个可微函数的定点微分值. 下面将简要介绍其原理, 并给出 rust 的两种微分方式的基本实现.</p>
<h2 id="微分方法简介">微分方法简介</h2>
<h3 id="数值微分">数值微分</h3>
<p>利用微分的定义式</p>
<p></p><div class="math display">\[f'(x) = \lim_{h\to 0} \frac{f(x+h)-f(x)}{h}
\]</div><p></p><p>因此可以用割线斜率公式近似微分, 当 <span class="math inline">\(h\)</span> 足够小时割线将与切线重合.</p>
<p></p><div class="math display">\[f'(x) \approx \frac{f(x+h) - f(x)}{h}
\]</div><p></p><p>数值微分存在两个缺点:</p>
<ul>
<li><span class="math inline">\(h\)</span> 的取值, 要保证 <span class="math inline">\(h\to 0\)</span>, 才能保证割线足够接近切线, 但当 <span class="math inline">\(h\)</span> 过小时容易因浮点误差导致数值不稳定, 尤其当导数变化剧烈时, 可能需要反复调整 <span class="math inline">\(h\)</span> 来找到合适的精度.</li>
<li>精度不足, 误差项与 <span class="math inline">\(h\)</span> 有效数字的平方成正比, 也就是说即使最理想情况下, 在f64范围内, <span class="math inline">\(h\)</span> 取 1e-16 (接近f4的精度极限), 误差项也只有 1e-8 的精度.</li>
</ul>
<p>通过多个点参与计算能提升精度, 下面提供 Wikipedia 中一个五点公式:</p>
<p></p><div class="math display">\[f'(x)\approx \frac{-f(x+2h) + 8f(x+h) -8f(x-h) + f(x-2h)}{12h}
\]</div><p></p><p>优势在于若无法得到函数表达式, 但可以求特定点值时可以直接使用, 而符号微分和自动微分在无表达式的情况下, 需要通过插值等方式拿到一个表达式.</p>
<h3 id="符号微分">符号微分</h3>
<p>首先定义好常用函数的微分规则, 在已经取得表达式的条件下, 解析表达式得到一个计算树, 然后自下而上或自上而下对树的每个计算节点运用微分规则, 最后就能得到微分后的表达式, 下面用 <span class="math inline">\(f(x) = \sin(x + x^2)/\sqrt x\)</span> 为例给出计算图例:<br>
<img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3587976/202506/3587976-20250619160602358-402328797.png" class="lazyload"><br>
可以看到只要对节点运用微分规则, 就能求出最终的微分式为: <span class="math inline">\(f'(x)=(\sqrt x\cos(x+x^2)(1+2x)-\sin(x+x^2)/2\sqrt x)/x\)</span></p>
<p>中间有一些细节需要处理, 比如pow函数要处理 <span class="math inline">\(x^a, a^x, x^x\)</span> 这三种不同导数的形式, 其次对于多元函数偏导需要标记把哪个变量当变量, 哪些变量当常数, 由于本位重点在于自动微分, 故此处不再深入.<br>
符号微分存在缺点:</p>
<ul>
<li>需要显式的表达式(有些改进能处理隐式表达式), 对于无表达式的函数需要通过插值等方法获得近似的表达式.</li>
<li>需要额外存储一棵表达式树和一棵微分表达式树.</li>
<li>存在表达式膨胀的隐患, 比如 <span class="math inline">\(d(x+1)(x+2)(x+3)/dx=(x+1)(x+2)+(x+1)(x+3)+(x+2)(x+3)\)</span>, 项数从1变成3, 若包含指数函数, 三角函数等的复杂多项函数可能会得到一个非常庞大的微分表达式树, 若求高阶导数会更膨胀.</li>
<li>实现难度大, 运行效率相对慢<br>
优势在于:</li>
<li>能精确得到微分后的表达式, 这样就可以进一步求高阶导数(插值得到的表达式可能会不稳定).</li>
<li>精度理论上和手动计算编写的函数是一样的</li>
</ul>
<h2 id="自动微分">自动微分</h2>
<p>自动微分在细节上类似于符号微分, 但利用了微分的定义式将中间结果直接求值, 从而避免了表达式膨胀的问题, 效率提升的同时保证了精度. 自动微分最常见的方案基于对偶数, 同时根据求值的顺序分为前向自动微分和后向自动微分, 下面将逐一介绍.</p>
<h3 id="对偶数">对偶数</h3>
<p>回到微分的定义式</p>
<p></p><div class="math display">\[f'(x) = \lim_{h\to 0} \frac{f(x+h)-f(x)}{h}
\]</div><p></p><p>我们定义 <span class="math inline">\(\varepsilon\)</span>, 其定义为一个无限趋于0的过程 (注意是过程而不是数, 实数域内不存在无穷小量). 不严谨的说, 可以将 <span class="math inline">\(\varepsilon\)</span> 定义成 1 个算子, 其作用的量将取如下极限:</p>
<p></p><div class="math display">\[\varepsilon a=\lim_{a\to0}a
\]</div><p></p><p>这样一来, <span class="math inline">\(\varepsilon a\)</span> 就和 <span class="math inline">\(\mathrm{d}a\)</span> 有很相似的性质.</p>
<p>我们定义一种新的数, 仿照复数给出一个简写:</p>
<p></p><div class="math display">\[A+\varepsilon a = (A, a)
\]</div><p></p><p>本文将 <span class="math inline">\(A\)</span> 称为数部, <span class="math inline">\(a\)</span> 称为微分部. 这个数对 <span class="math inline">\((A,a)\)</span> 就是对偶数.<br>
基于对偶数的定义, 很容易可以得到其四则运算性质:</p>
<p></p><div class="math display">\[\begin{align*}
(A,a)\pm (B,b) &amp;=(A\pm B, a\pm b) \\
k \times (A,a) &amp;= (A,a) \times k = (kA, ka) \\
(A,a) \times (B,b) &amp;= (AB, aB+Ab) \cancel{+ \varepsilon^2ab} \\
\frac{(A, a)}{(B,b)} &amp;= (\frac{A}{B},\frac{aB-Ab}{B^2})
\end{align*}
\]</div><p></p><p>在乘除运算中会出现二阶无穷小, 其在一阶微分中会被消除, 所以去掉该项.</p>
<p>对于所有一元函数有:</p>
<p></p><div class="math display">\[\begin{align*}
f((A,a))&amp;=f(A+\varepsilon a)\\
&amp;=f(A+\varepsilon a)-f(A)+f(A)\\
&amp;=\frac{f(A+\varepsilon a)-f(A)}{\varepsilon a}\varepsilon a+f(A)\\
&amp;=\lim_{a\to0}\frac{f(A+a)-f(A)}{a}\varepsilon a+f(A)\\
&amp;=f'(A)\varepsilon a+f(A)\\
&amp;=(f(A),f'(A)a)
\end{align*}
\]</div><p></p><p>这样就能快速得到一系列公式:</p>
<p></p><div class="math display">\[\begin{align*}
\sin(A,a)&amp;=(\sin A,a\cos A)\\
\cos(A,a)&amp;=(\cos A,-a\sin A)\\
\exp(A,a)&amp;=(\exp A, a\exp A)\\
\ln(A,a)&amp;=(1/A,a/A)\\
(A,a)^n&amp;=(A^n, nA^{n-1}a)\\
n^{(A,a)}&amp;=(n^A, n^A \ln A a)\\
\dots
\end{align*}
\]</div><p></p><p>对于所有二元函数则有(推导和一元函数基本一致, 此处略):</p>
<p></p><div class="math display">\[f((A,a),(B,b))=(f(A,B),\frac{\partial f}{\partial A}a+\frac{\partial f}{\partial B}b)
\]</div><p></p><p>可得一系列公式:</p>
<p></p><div class="math display">\[\begin{align*}
(A,a)^{(B,b)}&amp;=(A^B,BA^{B-1}a+A^B\ln Ab)\\
\log_{(B,b)}{(A,a)}&amp;=(\log_B A,\frac{a}{A \ln B}-\frac{b\log_B A}{B \ln B})\\
\dots
\end{align*}
\]</div><p></p><p>值得注意的是, 令 <span class="math inline">\((A,a)\)</span> 中微分部 <span class="math inline">\(a=1\)</span>, 其他变量的微分部全为 <span class="math inline">\(0\)</span>, 此时运算结果中的微分部将会是 <span class="math inline">\(\partial f/\partial A\)</span>!</p>
<p>下面以 <span class="math inline">\(f(x,y) = \sin(x + y^2)/\sqrt x\)</span> 为例, 求 <span class="math inline">\(x=2, y=1\)</span> 处对 <span class="math inline">\(x\)</span> 的偏导数:</p>
<p></p><div class="math display">\[\begin{align*}
f((2, 1),(1,0)) &amp;= \sin((2,1) + (1,0)^2)/\sqrt {(2,1)}\\
&amp;=\sin((2,1) + (1,0))/(\sqrt{2},1/2\sqrt{2})\\
&amp;=\sin((3,1))/(\sqrt{2},1/2\sqrt{2})\\
&amp;=(\sin(3), \cos(3))/(\sqrt{2},1/2\sqrt{2})\\
&amp;=(\frac{\sin(3)}{\sqrt{2}}, \frac{\cos(3)}{\sqrt{2}}-\frac{\sin(3)}{2}\frac{1}{2\sqrt{2}})\\
&amp;=(0.0997869, -0.724977)
\end{align*}
\]</div><p></p><p>基于以上原理, 很容易就能得到前向自动微分算法.</p>
<h3 id="前向自动微分">前向自动微分</h3>
<p>通过对对偶数的分析, 我们可以用一个结构体包裹数部和微分部, 并重载或实现其常用的数学运算, 利用这些运算的组合, 自下而上得到整个函数的微分, 即可实现前向自动微分. 如 <span class="math inline">\(f(h(g(x,y)))\)</span> 有</p>
<p></p><div class="math display">\[\frac{\partial f}{\partial x}=\frac{\partial g}{\partial x}\frac{\partial h}{\partial g}\frac{\partial f}{\partial h}
\]</div><p></p><h4 id="对偶数的结构">对偶数的结构</h4>
<p>定义微分变量结构体:</p>
<pre><code class="language-rust">#[derive(Clone, Copy)]
pub struct Variable {
    value: f64,
    grad: f64,
}

impl Variable {
    pub fn new(value: f64) -&gt; Self {
        Self { value, grad: 0.0 }
    }
    pub fn new_diff(value: f64) -&gt; Self {
        Self { value, grad: 1.0 }
    }
    pub fn grad(self) -&gt; f64 {
        self.grad
    }
    pub fn value(self) -&gt; f64 {
        self.value
    }
    pub fn value_grad(self) -&gt; (f64, f64) {
        (self.value, self.grad)
    }
}
</code></pre>
<h4 id="重载运算">重载运算</h4>
<p>重载四则运算, 仅展示加法和除法:</p>
<pre><code class="language-rust">use std::ops::{Add, Div};
impl Add for Variable {
    type Output = Self;
    fn add(self, rhs: Self) -&gt; Self::Output {
        Self {
            value: self.value + rhs.value,
            grad: self.grad + rhs.grad,
        }
    }
}

impl Add&lt;f64&gt; for Variable {
    type Output = Self;
    fn add(self, rhs: f64) -&gt; Self::Output {
        Self {
            value: self.value + rhs,
            ..self
        }
    }
}

impl Div for Variable {
    type Output = Self;
    fn div(self, rhs: Self) -&gt; Self::Output {
        let value = self.value / rhs.value;
        Self {
            value,
            grad: value + (self.grad - value * rhs.grad) / rhs.value,
        }
    }
}

impl Div&lt;f64&gt; for Variable {
    type Output = Self;
    fn div(self, rhs: f64) -&gt; Self::Output {
        Self {
            value: self.value / rhs,
            grad: self.grad / rhs,
        }
    }
}
</code></pre>
<h4 id="实现数学函数">实现数学函数</h4>
<p>实现其他数学函数, 仅展示几个典型的</p>
<pre><code class="language-rust">impl Variable {
    pub fn sin(self) -&gt; Self {
        Self {
            value: self.value.sin(),
            grad: self.value.cos() * self.grad,
        }
    }

    pub fn log(self, base: f64) -&gt; Self {
        Self {
            value: self.value.log(base),
            grad: self.grad / (self.value * base.ln()),
        }
    }

    pub fn logx(self, base: Self) -&gt; Self {
        let ln_b_recip = base.value.ln().recip();
        let value = self.value.log(base.value);
        Self {
            value,
            grad: ln_b_recip * self.value * self.grad + value * ln_b_recip * base.grad / base.value,
        }
    }
}
</code></pre>
<h4 id="使用方法">使用方法</h4>
<p>实现以上一系列函数后, 即可如下使用前向自动微分:</p>
<pre><code class="language-rust">fn forward_diff_works() {
    use crate::forward::Variable;

    // 支持闭包和函数, 要求输入和输出都是Variable类型: f(x)=sin(exp(x))
    let f = |x: Variable| -&gt; Variable { x.exp().sin() };
    // 求 x 的微分, 定义变量 x = (3, 1)
    let x = Variable::new_diff(3.0);
    // 计算 df/dx (x = 3.0) 接近 6.6
    let grad = f(x).grad();
    assert!((grad - 6.6).abs() &lt; 1e-5);

    // 定义二维函数, f(x) = sqrt(x^2 + y^2)
    let f = |x: Variable, y: Variable| -&gt; Variable { (x.powi(2) + y.powi(2)).sqrt() };
    // 求 x 的偏导, 定义 x = (3, 1), y = (4, 0)
    let x = Variable::new(3.0);
    let y = Variable::new_diff(4.0);

    // 计算 f(x,y) 和 ∂f/∂y (x = 3.0, y = 4.0)
    let (value, grad) = f(x, y).value_grad();
    assert!((value - 5.0).abs() &lt; 1e-12);
    }
</code></pre>
<p>前向自动微分的原理相对简单, 通过对每个计算过程的微分一步步组合成最终的微分, 但缺点是每次只能求一个变量的微分, 如果有多个变量, 需要多次计算, 所以前向自动微分适合参数少的函数 (如果扩展到向量, 则适合输出多于输入的函数).</p>
<h3 id="后向自动微分">后向自动微分</h3>
<p>后向自动微分针对前向自动微分的缺点, 其可以通过一次微分得到函数对所有参数的偏导数, 其不是自下而上一步步组合每个微分, 而是自上而下从总式开始一步步展开, 最后得到导数.  如 <span class="math inline">\(f(h(g(x,y)))\)</span> 有:</p>
<p></p><div class="math display">\[\frac{\partial f}{\partial x}=\frac{\partial f}{\partial h}\frac{\partial h}{\partial g}\frac{\partial g}{\partial x}
\]</div><p></p><p>可以看到计算顺序是前向微分颠倒过来的. 但在编程中, 定义函数是通过变量自下而上组合得到的, 所以后向自动微分不能像前向自动微分一样在定义函数的同时直接得到, 而是需要保存整个计算结构, 类似之前符号微分的表达式树 自上而下解析数的同时对节点进行微分处理.<br>
保存后向自动微分通常采用计算图, 以 <span class="math inline">\(f(x,y) = \sin(x + y^2)/\sqrt x\)</span> 为例, 下面是其计算图的图例:<br>
<img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3587976/202506/3587976-20250619194200471-286840707.png" class="lazyload"></p>
<p>可以看到相比表达式树, 其重用了变量, 可减少后续计算量. 同时该树的求导为自上而下, 故构成一个有向无环图(DAG).</p>
<h4 id="计算图的储存形式">计算图的储存形式</h4>
<p>通过对偶数原理, 可以知道每个 Node 储存一个对偶数, 此外为了记录图信息, 还要额外记录该节点类型</p>
<pre><code class="language-rust">struct Node {
    node_type: NodeType,
    value: f64,
    grad: f64,
}
</code></pre>
<p>Graph 中存放Node数组, 这样就可以通过索引得到图中的节点:</p>
<pre><code class="language-rust">pub struct Graph&lt;const N: usize&gt; {
    nodes: Vec&lt;Node&gt;,
}
</code></pre>
<p>NodeType 为该节点计算的表达式类型, 同时记录参与运算的节点下标等信息, 比如某个节点记录两节点加法, 则为 AddX 类型, 其包含的两个 usize 为其左右运算节点在图中的下标; 如果某个节点记录节点加常数, 则为 Add 类型, 其包含的 usize 为节点的下标, f64 为加数, 下面给出几个常见函数的示例:</p>
<pre><code class="language-rust">enum NodeType {
    Variable,
    AddX(usize, usize),
    Add(usize, f64)
    Sin(usize),
    Powf(usize, f64),
    PowX(usize, usize),
}
</code></pre>
<p>最后是Variable, 其本质上是图中的一个节点, 同时在变量运算时需要找到他们所在的图, 所以还包含一个所在图的指针:</p>
<pre><code class="language-rust">#[derive(Clone, Copy)]
pub struct Variable&lt;const N: usize&gt; {
    graph: NonNull&lt;Graph&lt;N&gt;&gt;,
    id: usize,
}
</code></pre>
<p>以上代码中有两处小细节</p>
<ol>
<li>Variable中的指针用的是不安全的 NonNull 而不是 Rc&lt;RefCell&lt;Graph&gt;&gt;, 这是为了实现 Copy trait方便使用, 否则最后定义函数时需要类似以下语法:</li>
</ol>
<pre><code class="language-rust">let f = &amp;x + &amp;y;
let f = x.clone() + y.clone();
</code></pre>
<p>使用 NonNull 并实现 Copy trait 可以写为:</p>
<pre><code class="language-rust">let f = x + y;
</code></pre>
<ol start="2">
<li>Graph定义时使用了 const 泛型, 导致 Variable 定义也要有 const 泛型, 这是防止两个不同图中的节点相互计算</li>
</ol>
<pre><code class="language-rust">let mut graph1:Graph&lt;0&gt; = Graph::new();
let x = graph1.new_variable(3.0);
let mut graph2:Graph&lt;1&gt; = Graph::new();
let y = graph2.new_variable(4.0);
let f = x + y;
</code></pre>
<p>通过const 泛型标记图的类型, x 和 y 将会有不同的变量类型, 在编译器就可以避免两者间的运算.</p>
<h4 id="变量与图的构建">变量与图的构建</h4>
<p>通过如下过程创建变量与建立计算图</p>
<pre><code class="language-rust">use std::{
    ops::Add,
    ptr::NonNull,
};

impl&lt;const N: usize&gt; Graph&lt;N&gt; {
    pub fn new() -&gt; Self {
        Self { nodes: Vec::new() }
    }

    pub fn new_variable(&amp;mut self, value: f64) -&gt; Variable&lt;N&gt; {
        let id = self.nodes.len();
        let node = Node {
            node_type: NodeType::Variable,
            value,
            grad: 0.0,
        };
        self.nodes.push(node);
        Variable {
            graph: NonNull::from(self),
            id,
        }
    }
}

impl&lt;const N: usize&gt; Add for Variable&lt;N&gt; {
    type Output = Self;
    fn add(self, rhs: Self) -&gt; Self::Output {
        let mut lhs = self;
        let graph = unsafe { lhs.graph.as_mut() };
        let id = graph.nodes.len();
        let node = Node {
            node_type: NodeType::AddX(self.id, rhs.id),
            value: graph.nodes[self.id].value + graph.nodes[rhs.id].value,
            grad: 0.0,
        };
        graph.nodes.push(node);
        Variable {
            graph: NonNull::from(graph),
            id,
        }
    }
}
impl&lt;const N: usize&gt; Add&lt;f64&gt; for Variable&lt;N&gt; {
    type Output = Self;
    fn add(self, rhs: f64) -&gt; Self::Output {
        let mut lhs = self;
        let graph = unsafe { lhs.graph.as_mut() };

        let id = graph.nodes.len();
        let node = Node {
            node_type: NodeType::Add(self.id, rhs),
            value: graph.nodes[self.id].value + rhs,
            grad: 0.0,
        };
        graph.nodes.push(node);
        Variable {
            graph: NonNull::from(graph),
            id,
        }
    }
}
</code></pre>
<p>通过new_variable创建一个与图绑定的变量并赋初值.<br>
为变量实现各种数学运算, 这里仅以Add为例, 在运算时计算数部的运算, 微分部暂时不运算, 该部分放到计算图构建结束后自上而下计算. 在计算的同时创建对应运算类型的节点, 并存放到计算图中.</p>
<h4 id="后向微分过程">后向微分过程</h4>
<p>前面构建了计算图, 在图构建好后, 其数组中自下而上依序存放着节点, 将节点逆序遍历并应用微分法则, 即可进行后向微分求解, 由于自上而下求解, 每个变量的偏导数都将存放到它对应的微分部, 所以后向微分只要一次计算就能得到所有变量的偏导数. 通过 grad 函数和 value 函数输出对应变量的微分值和计算值.</p>
<pre><code class="language-rust">impl&lt;const N: usize&gt; Graph&lt;N&gt; {
    pub fn grad(&amp;self, x: Variable&lt;N&gt;) -&gt; f64 {
        self.nodes[x.id].grad
    }
    pub fn value(&amp;self, f: Variable&lt;N&gt;) -&gt; f64 {
        self.nodes[f.id].value
    }

    pub fn backward(&amp;mut self, output: Variable&lt;N&gt;) {
        self.nodes[output.id].grad = 1.0;
        for i in (0..self.nodes.len()).rev() {
            let grad_out = self.nodes[i].grad;
            if grad_out == 0.0 {
                continue;
            }

            match self.nodes[i].node_type {
                NodeType::Variable =&gt; {}
                NodeType::AddX(l_id, r_id) =&gt; {
                    self.nodes[l_id].grad += grad_out;
                    self.nodes[r_id].grad += grad_out;
                }
                NodeType::Add(l_id, _rhs) =&gt; {
                    self.nodes[l_id].grad += grad_out;
                }
            }
        }
    }
}
</code></pre>
<p>由于后向自动微分一次求解能得到所有偏导的特点, 所以适合参数多而输出少的函数.</p>
<h4 id="使用方法-1">使用方法</h4>
<p>基于以上代码, 后向自动微分使用方法如下:</p>
<pre><code class="language-rust">fn main() {
    // 创建计算图
    let mut graph: Graph&lt;0&gt; = Graph::new();
    // 定义变量
    let x = graph.new_variable(3.0);
    // 构建计算图
    let f = x.exp().sin();
    // 后向微分过程
    graph.backward(f);
    // 得到 df/dx (x = 3.0)
    let grad = graph.grad(x);
    assert!((grad - 6.6).abs() &lt; 1e-5);

    let mut graph: Graph&lt;1&gt; = Graph::new();
    let x = graph.new_variable(3.0);
    let y = graph.new_variable(4.0);
    let f = (x.powi(2) + y.powi(2)).sqrt();
    graph.backward(f);
    // 同时得到两个偏导
    let f_x = graph.grad(x);
    let f_y = graph.grad(y);
    let value = graph.value(f);
    assert!((value - 5.0).abs() &lt; 1e-12);
    assert!((f_x - 0.6).abs() &lt; 1e-12);
    assert!((f_y - 0.8).abs() &lt; 1e-12);
}
</code></pre>
<h2 id="总结">总结</h2>
<p>三种自动微分都有其适用范围, 其中自动微分的前向微分模式和后向微分模式优缺点互补:</p>
<ul>
<li>前向自动微分编写简单, 空间占用小, 单次运行速度更快, 一次只能求一个变量对所有函数的偏导数, 适合参数少而输出多的函数. 常用于日常的简单计算.</li>
<li>后向自动微分编写复杂, 空间占用大, 需要正相构建计算图+后向微分两次运行, 单次运行速度较慢, 但一次能求一个函数所有变量的偏导数, 适合参数多而输出少的函数. 常用于机器学习等超多变量的情况.<br>
这里给出一个<a href="https://gitee.com/meth-nylon/autograd" title="完整实现" target="_blank" rel="noopener nofollow">完整实现</a>, 供各位参考, 其中example中有利用前向自动微分+牛顿迭代法求函数零点的示例.</li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.001388888888888889" data-date-updated="2025-06-19 19:48">2025-06-19 19:46</span>&nbsp;
<a href="https://www.cnblogs.com/Meth-nylon">Meth_nylon</a>&nbsp;
阅读(<span id="post_view_count">3</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18936550);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18936550', targetLink: 'https://www.cnblogs.com/Meth-nylon/p/18936550', title: '前/后向自动微分的简单推导与rust简单实现' })">举报</a>
</div>
        