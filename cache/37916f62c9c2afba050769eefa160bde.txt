
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/risheng/p/18795361" title="发布于 2025-03-27 10:02">
    <span role="heading" aria-level="2">Vite CVE-2025-30208 安全漏洞</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/3373677/202503/3373677-20250327100233546-104928877.png" alt="Vite CVE-2025-30208 安全漏洞" class="desc_img">
        CVE-2025-30208 是 Vite（一个前端开发工具提供商）在特定版本中存在的安全漏洞。此漏洞允许攻击者通过特殊的 URL 参数绕过对文件系统的访问限制，从而获取任意文件内容（包括非 Vite 服务目录范围外的文件）。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="vite-cve-2025-30208-安全漏洞">Vite CVE-2025-30208 安全漏洞</h1>
<h2 id="一漏洞概述">一、漏洞概述</h2>
<p><strong>CVE-2025-30208</strong> 是 Vite（一个前端开发工具提供商）在特定版本中存在的安全漏洞。此漏洞允许攻击者通过特殊的 URL 参数绕过对文件系统的访问限制，从而获取任意文件内容（包括非 Vite 服务目录范围外的文件）。</p>
<h3 id="1-漏洞原理">1. 漏洞原理</h3>
<ul>
<li>Vite 在开发服务器模式下提供了 @fs 用于访问服务允许范围内的文件。</li>
<li>本应对超出范围的文件请求返回 403 Restricted；然而，在请求 URL 中添加 ?raw?? 或 ?import&amp;raw?? 时，可以绕过原有检查。</li>
<li>这是由于在多个处理环节中会移除类似 ? 的结尾分隔符，但并未在查询字符串的正则匹配中考虑这一点；攻击者可利用这一缺陷读取目标文件内容。</li>
</ul>
<h3 id="2-漏洞影响">2. 漏洞影响</h3>
<ul>
<li>在特定配置下，攻击者能够访问服务器上任意位置的文件（如 /tmp/secret.txt），并将内容返回给浏览器。</li>
<li>仅在 <strong>显式暴露 Vite 开发服务器</strong>（如使用 --host 或在 server.host 中配置对外可访问）时，外部才可直接发起请求进行文件读取。</li>
<li>如果文件中包含敏感数据（如凭据、配置等），则可能造成信息泄露。</li>
</ul>
<hr>
<h2 id="二受影响范围">二、受影响范围</h2>
<h3 id="1-影响版本">1. 影响版本</h3>
<p>根据官方与社区信息，以下 Vite 版本均存在该漏洞：</p>
<ul>
<li>
<blockquote>
<p>= 6.2.0, &lt;= 6.2.2</p>
</blockquote>
</li>
<li>
<blockquote>
<p>= 6.1.0, &lt;= 6.1.1</p>
</blockquote>
</li>
<li>
<blockquote>
<p>= 6.0.0, &lt;= 6.0.11</p>
</blockquote>
</li>
<li>
<blockquote>
<p>= 5.0.0, &lt;= 5.4.14</p>
</blockquote>
</li>
<li>&lt;= 4.5.9</li>
</ul>
<p>更概括地说：6.2.3、6.1.2、6.0.12、5.4.15、4.5.10 之前的版本。</p>
<h3 id="2-修复版本">2. 修复版本</h3>
<ul>
<li><strong>6.2.3</strong> 及以上</li>
<li><strong>6.1.2</strong></li>
<li><strong>6.0.12</strong></li>
<li><strong>5.4.15</strong></li>
<li><strong>4.5.10</strong></li>
</ul>
<p>仅上述版本及更高版本中已修复此漏洞。</p>
<h3 id="3-受影响部署方式">3. 受影响部署方式</h3>
<ul>
<li><strong>在生产或外部环境</strong>运行 Vite Dev Server，并且使用 --host 或在 vite.config.js 中的 server.host 开启对外网可访问。</li>
</ul>
<h3 id="4-不受影响场景">4. 不受影响场景</h3>
<ul>
<li>在本地开发环境使用 Vite，不对外暴露端口；仅自己访问 localhost。</li>
<li>已经将代码打包后交由 Nginx/Tomcat/Egg 等服务器代理，生产环境<strong>并无</strong>开启 Vite Dev Server。</li>
<li>使用修复后的 Vite 版本。</li>
</ul>
<hr>
<h2 id="三漏洞成因">三、漏洞成因</h2>
<ul>
<li><strong>核心问题</strong>：当请求 URL 带有 ?raw?? / ?import&amp;raw?? 等结尾分隔符时，Vite 中移除 ? 等尾部分隔符的逻辑与查询字符串正则不匹配的处理不一致，导致访问超出允许列表的文件时的“403”限制被绕过。</li>
</ul>
<hr>
<h2 id="四漏洞利用示例">四、漏洞利用示例</h2>
<p>以官方 PoC 为例：</p>
<ol>
<li>正常情况下，访问 <a href="http://localhost:5173/@fs/tmp/secret.txt" target="_blank" rel="noopener nofollow">http://localhost:5173/@fs/tmp/secret.txt</a> 会返回：</li>
</ol>
<pre><code class="language-html">403 Restricted
The request url "/tmp/secret.txt" is outside of Vite serving allow list.
</code></pre>
<ol start="2">
<li>但在请求后面加上 ?import&amp;raw??：</li>
</ol>
<pre><code class="language-html">curl "http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw??"
</code></pre>
<p>返回结果将是该文件的内容，例如：</p>
<pre><code class="language-html">export default "top secret content\n"
//# sourceMappingURL=data:application/json;...
</code></pre>
<hr>
<h2 id="五修复与缓解">五、修复与缓解</h2>
<h3 id="1-升级到安全版本">1. 升级到安全版本</h3>
<ul>
<li>立即升级到 Vite <strong>6.2.3</strong> / <strong>6.1.2</strong> / <strong>6.0.12</strong> / <strong>5.4.15</strong> / <strong>4.5.10</strong> 或更高版本，以获取官方修补。</li>
</ul>
<h3 id="2-临时措施">2. 临时措施</h3>
<p>若暂时无法升级，可采取以下措施：</p>
<ul>
<li><strong>不要在生产环境开放 Vite Dev Server</strong> 对外访问；仅在内网或本地使用。</li>
<li><strong>限制访问范围</strong>：在防火墙或 Nginx 层做 IP 限制，确保仅可信的 IP 可以访问。</li>
<li><strong>对路由请求进行严格检查</strong>：在代理层对包含 ?raw?? / ?import&amp;raw?? 字样的请求进行拦截，阻断对 Vite Dev Server 的直连访问。</li>
</ul>
<hr>
<h2 id="六时间线示例">六、时间线（示例）</h2>
<ul>
<li><strong>2025-03-24</strong>：CVE-2025-30208 在 NVD 上公开</li>
<li><strong>2025-03-25</strong>：社区与官方确认影响版本及修补方式</li>
<li><strong>2025-03-26</strong>：Vite 发布多条 Commit 修复与对应 Advisory</li>
<li><strong>2025-03-27</strong>：修复版本（6.2.3、6.1.2 等）正式上线并通告用户升级</li>
</ul>
<hr>
<h2 id="七总结">七、总结</h2>
<p><strong>CVE-2025-30208</strong> 展示了在前端开发服务器中安全控制的重要性——即便只是用于开发调试，也可能因意外暴露而导致信息泄露风险。</p>
<p>针对该漏洞，<strong>最安全的做法</strong>是在生产环境<strong>避免直接使用 Vite Dev Server</strong>，同时<strong>升级到官方修复版本</strong>。对于内网或测试场景，应确保只在可信网络中启用对外访问，或为 Vite Dev Server 配置更严格的访问限制。</p>
<ul>
<li><strong>若仅在本地/开发环境使用 Vite</strong>：线上对外并没有 “Vite Dev Server”，那么不会受到这个漏洞影响。</li>
<li><strong>若在生产环境也对外暴露 Vite Dev Server</strong>：才有必要升级到 Vite 的修复版本，或者至少确保不对外开放该调试服务。</li>
</ul>
<hr>
<h3 id="参考链接">参考链接</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30208" target="_blank" rel="noopener nofollow">NVD - CVE-2025-30208</a></li>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w" target="_blank" rel="noopener nofollow">GitHub Advisory GHSA-x574-m823-4x7w</a></li>
<li><a href="https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1" target="_blank" rel="noopener nofollow">Vite Official Commits (Multiple)</a></li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.84124560871875" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-27 10:03">2025-03-27 10:02</span>&nbsp;
<a href="https://www.cnblogs.com/risheng">日升_rs</a>&nbsp;
阅读(<span id="post_view_count">529</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18795361" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18795361);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18795361', targetLink: 'https://www.cnblogs.com/risheng/p/18795361', title: 'Vite CVE-2025-30208 安全漏洞' })">举报</a>
</div>
        