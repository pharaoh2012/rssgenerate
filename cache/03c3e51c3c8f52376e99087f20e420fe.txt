
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/sharpeye/p/18744376" title="发布于 2025-03-01 14:56">
    <span role="heading" aria-level="2">PowerShell开发小工具 · 四张照片拼成一张</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>小工具的设计与实现------选四张照片拼成一张照片。</p>
<p>很经典的应用情景，市面上有很多类似的小软件，特别是手机应用。为了方便学习巩固PowerShell，今天笔者使用它来实现。</p>
<p>&nbsp;</p>
<h2>【设计思路】</h2>
<ul>
<li>选择四张符合要求的照片或图片<code>[.jpg] [.png]</code></li>
<li>准备画布，计算其子区域（画布四分之一）宽高比例 <code>$subAspectRatio</code>，然后与每张照片宽高比 <code>$imgAspectRatio</code> 作对比，在比例不变(不拉伸变形)的情况下尽可能铺满。</li>
<li>缩放照片，并拼合在一起</li>
<li>保存该画布，导出成图片格式存入硬盘中。</li>
</ul>
<p>&nbsp;</p>
<h2>【设计要点】</h2>
<p>计算子画布（子图区域），也就是四分之一画布大小的宽高比，与待拼合的照片的宽高比，两者进行比较。即<strong>subAspectRatio</strong>和<strong>imgAspectRatio</strong></p>
<ul style="list-style-type: circle">
<li><span style="font-size: 16px">如果照片较宽，则按宽度缩放</span></li>
<li><span style="font-size: 16px">如果照片较高，则按高度缩放</span></li>
</ul>
<p><span style="font-size: 16px">如下图所示：</span></p>
<p><img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301144020714-708434682.jpg" width="600"></p>
<p>&nbsp;</p>
<p>如果理想状态，每张照片能铺满子图区域，如下图：</p>
<p><img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301120831598-1919025288.jpg" width="600"></p>
<p id="1740808961458"></p>
<p id="1740802118133">而有一种特殊情况，子区域是见方的（1:1宽高）, 而每张图片也是见方的：</p>
<p><img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301121043817-841301525.jpg" width="600"></p>
<p id="1740808965577"></p>
<p id="1740802248981">这两种情况直接等比缩放即可，而更多的情况是，子区域宽高比和每张照片的宽高比都不同，比如：</p>
<p><img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301121735940-1865593160.jpg" width="600"></p>
<p id="1740808972489"></p>
<p id="1740802660522">会发现有很多空白区域，没错，正是做了缩放处理。</p>
<h3><strong>算法实现：</strong></h3>
<p style="padding-left: 40px"><strong># 计算子图宽高度</strong><br>子图宽度 = 最终图片宽度 / 2<br>子图高度 = 最终图片高度 / 2</p>
<p style="padding-left: 40px"><strong># 计算绘制位置</strong><br>子图x坐标 = (每张照片[标号0 1 2 3] % 2) * 子图宽度<br>子图y坐标 = [math]::Floor(每张照片[标号0 1 2 3] / 2) * 子图高度</p>
<p style="padding-left: 40px"><strong># 计算图片的宽高比</strong><br>照片的宽高比 = 照片宽度 / 照片高度<br>子图的宽高比 = 子图宽度 / 子图高度</p>
<p style="padding-left: 40px"><strong>if </strong>(照片的宽高比 &gt; 子图的宽高比) {<br>&nbsp; &nbsp; # 图片较宽，按宽度缩放<br>&nbsp; &nbsp; 相比比例 = 子图宽度 / 照片宽度<br>&nbsp; &nbsp; 待绘制图片宽度 = 子图宽度<br>&nbsp; &nbsp; 待绘制图片高度 = [int](照片高度 * 相比比例)<br>&nbsp; &nbsp; 待绘制图片y坐标 = 子图y坐标 + (子图宽度 - 待绘制图片高度) / 2<br>&nbsp; &nbsp; 待绘制图片x坐标 = 子图x坐标<br>}<br><strong>else </strong>{<br><strong>&nbsp; &nbsp; # 图片较高，按高度缩放</strong><br>&nbsp; &nbsp; 相比比例 = 子图宽度 / 照片高度<br>&nbsp; &nbsp; 待绘制图片高度 = 子图高度<br>&nbsp; &nbsp; 待绘制图片宽度 = [int](照片宽度 * 相比比例)<br>&nbsp; &nbsp; 待绘制图片x坐标 = 子图x坐标 + (子图宽度 - 待绘制图片宽度) / 2<br>&nbsp; &nbsp; 待绘制图片y坐标 = 子图y坐标<br>}</p>
<p style="padding-left: 40px"><strong># 创建缩放后的矩形区域</strong><br>destRect = (<br>&nbsp; &nbsp; 待绘制图片x坐标,<br>&nbsp; &nbsp; 待绘制图片y坐标,<br>&nbsp; &nbsp; 待绘制图片宽度,<br>&nbsp; &nbsp; 待绘制图片高度<br>)</p>
<p style="padding-left: 40px"><strong>#缩放绘制</strong><br><span style="text-decoration: underline">[将img即每张照片绘制到destRect区域内！]</span></p>
<p>&nbsp;</p>
<h2><strong>【实际脚本】</strong></h2>
<ul>
<li>&nbsp;导入程序集 <code>System.Drawing</code> ，负责绘制任务</li>
<li><span style="font-family: &quot;Microsoft YaHei&quot;">&nbsp;定义参数，如<code>文件夹地址</code>、<code>输出文件名</code>、<code>最终图片宽度和高度</code></span></li>
<li>&nbsp;获取文件夹内的照片(四张jpg或png)</li>
<li>&nbsp;创建目标画布</li>
<li>&nbsp;读取每张照片[遍历]，按照上述算法进行计算，绘制在目标画布上</li>
<li>&nbsp;保存目标画布，导出成<code>.jpg</code>格式的照片保存至文件夹内</li>
</ul>
<pre class="language-powershell highlighter-hljs"><code># 加载必要的.NET绘图程序集（需确保系统已安装.NET Framework）
try {
    Add-Type -AssemblyName System.Drawing
    Write-Host "成功加载必要的.NET绘图程序集。"
}
catch {
    Write-Error "加载.NET绘图程序集时出现错误: $_"
    return
}

# 定义输入输出参数
$inputFolder = $PSScriptRoot  # 使用 $PSScriptRoot 变量获取脚本所在文件夹
$outputFile = "combined.jpg"  # 输出文件名
$targetWidth = 2000   # 最终图片宽度
$targetHeight = 2000  # 最终图片高度

# 从指定文件夹中获取前四张jpg或png图片
Write-Host "正在从 $inputFolder 文件夹中查找前四张jpg或png图片..."
$inputFiles = Get-ChildItem -Path $inputFolder -File | Where-Object { $_.Extension -match '\.(jpg|png)' } | Select-Object -First 4 | ForEach-Object { $_.FullName }

# 检查是否找到四张图片
if ($inputFiles.Count -ne 4) {
    Write-Error "未在指定文件夹 $inputFolder 中找到四张jpg或png图片，仅找到 $($inputFiles.Count) 张。"
    return
}
else {
    Write-Host "成功找到四张图片："
    foreach ($file in $inputFiles) {
        Write-Host "- $file"
    }
}

# 创建目标画布
Write-Host "正在创建目标画布..."
try {
    $combinedBitmap = New-Object System.Drawing.Bitmap($targetWidth, $targetHeight)
    $graphics = [System.Drawing.Graphics]::FromImage($combinedBitmap)
    $graphics.Clear([System.Drawing.Color]::White)
    Write-Host "成功创建目标画布。"
}
catch {
    Write-Error "创建目标画布时出现错误: $_"
    return
}

# 计算每个子图区域尺寸
$subWidth = $targetWidth / 2
$subHeight = $targetHeight / 2
Write-Host "已计算每个子图区域尺寸：宽度 $subWidth，高度 $subHeight。"

# 遍历处理每张图片
for ($i = 0; $i -lt 4; $i++) {
    Write-Host "正在处理图片 $($inputFiles[$i])..."
    try {
        $img = [System.Drawing.Image]::FromFile($inputFiles[$i])

        # 计算绘制位置
        $x = ($i % 2) * $subWidth
        $y = [math]::Floor($i / 2) * $subHeight

        # 计算图片的宽高比
        $imgAspectRatio = $img.Width / $img.Height
        $subAspectRatio = $subWidth / $subHeight

        if ($imgAspectRatio -gt $subAspectRatio) {
            # 图片较宽，按宽度缩放
            $scale = $subWidth / $img.Width
            $newWidth = $subWidth
            $newHeight = [int]($img.Height * $scale)
            $offsetY = $y + ($subHeight - $newHeight) / 2
            $offsetX = $x
        }
        else {
            # 图片较高，按高度缩放
            $scale = $subHeight / $img.Height
            $newHeight = $subHeight
            $newWidth = [int]($img.Width * $scale)
            $offsetX = $x + ($subWidth - $newWidth) / 2
            $offsetY = $y
        }

        # 创建缩放后的矩形区域
        $destRect = New-Object System.Drawing.Rectangle(
            $offsetX, $offsetY,
            $newWidth,
            $newHeight
        )

        # 高质量缩放绘制
        $graphics.InterpolationMode = [System.Drawing.Drawing2D.InterpolationMode]::HighQualityBicubic
        $graphics.DrawImage($img, $destRect)

        $img.Dispose()
        Write-Host "成功处理图片 $($inputFiles[$i])。"
    }
    catch {
        Write-Error "处理图片 $($inputFiles[$i]) 时出现错误: $_"
    }
}

# 保存输出文件
Write-Host "正在保存拼接后的图片到 $outputFile..."
try {
    $combinedBitmap.Save($outputFile, [System.Drawing.Imaging.ImageFormat]::Jpeg)
    Write-Host "成功保存拼接后的图片到 $outputFile。"
}
catch {
    Write-Error "保存拼接后的图片时出现错误: $_"
}

# 释放资源
Write-Host "正在释放资源..."
try {
    $graphics.Dispose()
    $combinedBitmap.Dispose()
    Write-Host "成功释放资源。"
}
catch {
    Write-Error "释放资源时出现错误: $_"
}

Write-Host "图片拼接完成，输出文件：$outputFile"</code></pre>
<p>&nbsp;</p>
<h3>示例1:</h3>
<p>给出四张示例照片或图片：</p>
<p><img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301130513275-1273586437.jpg" width="150"> &nbsp;&nbsp;<img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301130540928-1500554406.jpg" width="150"> &nbsp;&nbsp;<img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301130635222-1049098383.jpg" width="150"> &nbsp;&nbsp;<img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301130643407-145609199.jpg" width="150"></p>
<p id="1740805611303"><strong>目标照片</strong>大小：2000 * 2000</p>
<p>将四张照片放入一个文件夹，然后将上述脚本保存成 <code>.ps1</code> 也放入其中，右键 - 使用<strong>PowerShell</strong>运行，之后得到同文件夹下的新照片:</p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301130908668-1308266477.jpg" width="400"></p>
<p>&nbsp;</p>
<p id="1740805763781"></p>
<h3>示例2:</h3>
<p>给出四张示例照片或图片：</p>
<p><img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301131839896-406744875.jpg" width="200"> &nbsp;<img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301131851133-1520676752.jpg" width="200"> &nbsp;<img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301131900643-500826203.jpg" width="200"> &nbsp;<img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301131910880-2080445895.jpg" width="200"></p>
<p id="1740805611303"><strong>目标照片</strong>大小：1600* 800</p>
<p>将四张照片放入一个文件夹，然后将上述脚本保存成 <code>.ps1</code> 也放入其中，右键 - 使用<strong>PowerShell</strong>运行，之后得到同文件夹下的新照片:</p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301131956290-1433898444.jpg" width="500"></p>
<p>&nbsp;</p>
<p id="1740806406805"></p>
<h3>示例3:</h3>
<p>给出四张示例照片或图片：</p>
<p><img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301133244762-553859215.jpg" width="250"> &nbsp;<img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301133013846-1338397843.jpg" width="250"> &nbsp;<img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301133311009-1498581155.jpg" width="100"> &nbsp;<img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301133344703-2120142644.jpg" width="200"></p>
<p id="1740807239924"><strong>目标照片</strong>大小：2000 * 1450</p>
<p id="1740807217067">将四张照片放入一个文件夹，然后将上述脚本保存成 <code>.ps1</code> 也放入其中，右键 - 使用<strong>PowerShell</strong>运行，之后得到同文件夹下的新照片:</p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301133518573-1119618376.jpg" width="400"></p>
<p>&nbsp;</p>
<h3>示例4:</h3>
<p>给出四张示例照片或图片：</p>
<p><img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301133916897-942091783.jpg" width="200"> &nbsp;<img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301133928670-57639925.jpg" width="200"> &nbsp;<img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301133938765-276140281.jpg" width="200"> &nbsp;<img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301133955224-699607430.png" width="250"></p>
<p id="1740807889453"><strong>目标照片</strong>大小：2000 * 2000</p>
<p id="1740807582988">将四张照片放入一个文件夹，然后将上述脚本保存成 <code>.ps1</code> 也放入其中，右键 - 使用<strong>PowerShell</strong>运行，之后得到同文件夹下的新照片:</p>
<p id="1740807572748"></p>
<p><img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301134523037-1918111811.jpg" width="400"></p>
<p>&nbsp;</p>
<p id="1740807995251"></p>
<h3>示例5:</h3>
<p id="1740807990067"></p>
<p>给出四张示例照片或图片（四张规格大小一致，都是见方1:1）：</p>
<p><img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301135044920-2018738923.jpg" width="200"> &nbsp;<img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301135113023-372253933.jpg" width="200"> &nbsp;<img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301135121353-77458667.jpg" width="200"> &nbsp;<img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301135130228-174478662.jpg" width="200"></p>
<p><strong>目标照片</strong>大小：1600 * 1600</p>
<p>将四张照片放入一个文件夹，然后将上述脚本保存成 <code>.ps1</code> 也放入其中，右键 - 使用<strong>PowerShell</strong>运行，之后得到同文件夹下的新照片:</p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/944545/202503/944545-20250301135201502-1526449327.jpg" width="450"></p>
<p>&nbsp;</p>
<p id="1740808335258"></p>
<h2 id="1740808329667"><strong>【结尾】</strong></h2>
<p>还是挺方便的，如果没有其他工具在手的话。当然，还有很多点值得优化，如：</p>
<ol style="list-style-type: lower-alpha">
<li>图片的格式问题，支持更多格式</li>
<li>拼合的顺序，可以让用户自定义</li>
<li>可以让用户看到运行状态，方便调试修改</li>
<li>设配置文件，如目标照片大小、文件夹地址、生成文件类型等参数，可以更好的管理</li>
</ol>
<p id="1740808295005"></p>
<p id="1740806402052"></p>
<p id="1740806355220"></p>
<p id="1740805754974"></p>
<p id="1740805589830"></p>
<p id="1740805520135"></p>
<p><em><strong>总之</strong></em>，这是一次很好的开发经历，虽然脚本不算复杂，但是很实用，能充分体现脚本灵活易修改维护的特点。PowerShell，一直伴随你左右。。。</p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.37111233757175927" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-01 15:22">2025-03-01 14:56</span>&nbsp;
<a href="https://www.cnblogs.com/sharpeye">SHARP-EYE</a>&nbsp;
阅读(<span id="post_view_count">104</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18744376" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18744376);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18744376', targetLink: 'https://www.cnblogs.com/sharpeye/p/18744376', title: 'PowerShell开发小工具 &amp;#183; 四张照片拼成一张' })">举报</a>
</div>
        