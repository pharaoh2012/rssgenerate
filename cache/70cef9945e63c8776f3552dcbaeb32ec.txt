
		<h2>
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ydswin/p/19027073" title="发布于 2025-08-07 16:17">
    <span role="heading" aria-level="2">JVM监控利器：jstat命令全方位详解</span>
    

</a>

		</h2>
		<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p><strong>摘要</strong>：本文深入解析Java虚拟机（JVM）的核心监控工具<code>jstat</code>，涵盖12种关键监控场景，助力开发者精准诊断内存、GC及类加载问题。</p>
</blockquote>
<hr>
<h3 id="-1-类加载与卸载监控-class">📊 <strong>1. 类加载与卸载监控（-class）</strong></h3>
<p><strong>命令</strong>：<code>jstat -class &lt;pid&gt;</code><br>
<strong>输出字段</strong>：</p>
<ul>
<li><code>Loaded</code>：已加载类总数</li>
<li><code>Bytes</code>：加载类占用的字节数</li>
<li><code>Unloaded</code>：卸载的类数量</li>
<li><code>Time</code>：类加载/卸载总耗时（秒）<br>
<strong>问题诊断</strong>：</li>
<li><strong>类泄漏</strong>：<code>Loaded</code> 持续上升且 <code>Unloaded</code> 接近 0，可能是动态代理或反射滥用导致。</li>
<li><strong>优化建议</strong>：限制元空间大小（<code>-XX:MaxMetaspaceSize</code>），检查代码中重复类加载逻辑。</li>
</ul>
<hr>
<h3 id="-2-jit-编译监控-compiler">🧠 <strong>2. JIT 编译监控（-compiler）</strong></h3>
<p><strong>命令</strong>：<code>jstat -compiler &lt;pid&gt;</code><br>
<strong>输出字段</strong>：</p>
<ul>
<li><code>Compiled</code>：成功编译的方法数</li>
<li><code>Failed</code>：编译失败的方法数</li>
<li><code>Invalid</code>：无效编译数（需重新编译的方法）<br>
<strong>问题诊断</strong>：</li>
<li><strong>编译失败</strong>：<code>Failed &gt; 0</code> 表明存在热点方法无法优化（如复杂循环或异常分支）。</li>
<li><strong>优化建议</strong>：检查 <code>FailedMethod</code> 列定位问题方法，简化逻辑或排除编译异常。</li>
</ul>
<hr>
<h3 id="-3-gc-行为全景监控-gc">🔄 <strong>3. GC 行为全景监控（-gc）</strong></h3>
<p><strong>命令</strong>：<code>jstat -gc &lt;pid&gt; 1000 5</code>（每秒采样，共5次）<br>
<strong>核心字段</strong>：</p>
<table>
<thead>
<tr>
<th><strong>区域</strong></th>
<th><strong>容量字段</strong></th>
<th><strong>使用字段</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Eden</strong></td>
<td><code>EC</code></td>
<td><code>EU</code></td>
</tr>
<tr>
<td><strong>Survivor</strong></td>
<td><code>S0C</code>/<code>S1C</code></td>
<td><code>S0U</code>/<code>S1U</code></td>
</tr>
<tr>
<td><strong>老年代</strong></td>
<td><code>OC</code></td>
<td><code>OU</code></td>
</tr>
<tr>
<td><strong>元空间</strong></td>
<td><code>MC</code></td>
<td><code>MU</code></td>
</tr>
<tr>
<td><strong>GC 统计</strong>：<code>YGC</code>（Young GC 次数）、<code>FGC</code>（Full GC 次数）、<code>GCT</code>（GC 总耗时）。</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>典型问题</strong>：</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li><strong>Eden 区溢出</strong>：<code>EU</code> 频繁接近 <code>EC</code> → Young GC 频繁（增大 <code>-Xmn</code>）。</li>
<li><strong>老年代满</strong>：<code>OU</code> 持续增长且 <code>FGC</code> 增加 → 内存泄漏（检查对象生命周期）。</li>
</ul>
<hr>
<h3 id="-4-堆内存使用率监控-gcutil">📈 <strong>4. 堆内存使用率监控（-gcutil）</strong></h3>
<p><strong>命令</strong>：<code>jstat -gcutil &lt;pid&gt; 1s</code><br>
<strong>输出字段</strong>（百分比形式）：</p>
<ul>
<li><code>E</code>：Eden 区使用率</li>
<li><code>O</code>：老年代使用率</li>
<li><code>M</code>：元空间使用率</li>
<li><code>YGC</code>/<code>FGC</code>：GC 次数<br>
<strong>诊断场景</strong>：</li>
<li><strong>老年代压力</strong>：<code>O &gt; 90%</code> 且 <code>FGC</code> 增长 → 可能触发 Full GC（调整 <code>-Xmx</code> 或换 G1/ZGC）。</li>
<li><strong>元空间溢出</strong>：<code>M ≈ 100%</code> → 动态类生成过多（限制 <code>-XX:MaxMetaspaceSize</code>）。</li>
</ul>
<hr>
<h3 id="️-5-堆内存容量分析-gccapacity">⚖️ <strong>5. 堆内存容量分析（-gccapacity）</strong></h3>
<p><strong>命令</strong>：<code>jstat -gccapacity &lt;pid&gt;</code><br>
<strong>关键字段</strong>：</p>
<ul>
<li><code>NGCMN</code>/<code>NGCMX</code>：新生代最小/最大容量</li>
<li><code>OGCMN</code>/<code>OGCMX</code>：老年代最小/最大容量</li>
<li><code>MCMN</code>/<code>MCMX</code>：元空间最小/最大容量<br>
<strong>用途</strong>：</li>
<li>观察 JVM 动态扩容行为（如 <code>OC</code> 增长），判断是否因堆过小导致频繁扩容。</li>
</ul>
<hr>
<h3 id="️-6-gc-原因追踪-gccause">🕵️ <strong>6. GC 原因追踪（-gccause）</strong></h3>
<p><strong>命令</strong>：<code>jstat -gccause &lt;pid&gt; 1s</code><br>
<strong>扩展字段</strong>（在 <code>-gcutil</code> 基础上）：</p>
<ul>
<li><code>LGCC</code>：最近一次 GC 的原因（如 <code>Allocation Failure</code>）</li>
<li><code>GCC</code>：当前 GC 原因（如 <code>No GC</code>）<br>
<strong>典型原因</strong>：</li>
<li><code>Allocation Failure</code>：Eden 区满触发 Young GC。</li>
<li><code>System.gc()</code>：代码中显式调用 GC（避免使用）。</li>
</ul>
<hr>
<h3 id="-7-新生代详细分析-gcnew">👶 <strong>7. 新生代详细分析（-gcnew）</strong></h3>
<p><strong>命令</strong>：<code>jstat -gcnew &lt;pid&gt;</code><br>
<strong>关键字段</strong>：</p>
<ul>
<li><code>TT</code>：对象晋升老年代的年龄阈值</li>
<li><code>MTT</code>：对象最大存活年龄</li>
<li><code>DSS</code>：期望的 Survivor 区大小<br>
<strong>优化方向</strong>：</li>
<li><strong>对象过早晋升</strong>：<code>TT</code> 过小 → 增大 <code>-XX:MaxTenuringThreshold</code> 让对象在新生代多存活几轮 GC。</li>
</ul>
<hr>
<h3 id="-8-老年代与元空间分析-gcold">👴 <strong>8. 老年代与元空间分析（-gcold）</strong></h3>
<p><strong>命令</strong>：<code>jstat -gcold &lt;pid&gt;</code><br>
<strong>核心字段</strong>：</p>
<ul>
<li><code>OU</code>：老年代使用量</li>
<li><code>MU</code>：元空间使用量</li>
<li><code>FGCT</code>：Full GC 总耗时<br>
<strong>问题定位</strong>：</li>
<li><strong>Full GC 频繁</strong>：<code>OU</code> 持续高位 → 检查大对象或内存泄漏（使用 <code>jmap</code> 生成堆转储）。</li>
</ul>
<hr>
<h3 id="-9-元空间容量监控-gcmetacapacity">📦 <strong>9. 元空间容量监控（-gcmetacapacity）</strong></h3>
<p><strong>命令</strong>：<code>jstat -gcmetacapacity &lt;pid&gt;</code><br>
<strong>字段</strong>：<code>MCMN</code>（最小元空间）、<code>MCMX</code>（最大元空间）、<code>MC</code>（当前元空间）<br>
<strong>配置建议</strong>：</p>
<ul>
<li>设置 <code>-XX:MetaspaceSize=64m -XX:MaxMetaspaceSize=256m</code> 避免元空间无限增长。</li>
</ul>
<hr>
<h3 id="-10-新生代内存容量-gcnewcapacity">🔍 <strong>10. 新生代内存容量（-gcnewcapacity）</strong></h3>
<p><strong>命令</strong>：<code>jstat -gcnewcapacity &lt;pid&gt;</code><br>
<strong>字段</strong>：<code>NGCMN</code>/<code>NGCMX</code>（新生代最小/最大容量）、<code>EC</code>（Eden 当前容量）<br>
<strong>调优场景</strong>：</p>
<ul>
<li>Eden 区过小导致频繁 Young GC → 增大 <code>-Xmn</code>（新生代大小）。</li>
</ul>
<hr>
<h3 id="-11-老年代内存容量-gcoldcapacity">⏳ <strong>11. 老年代内存容量（-gcoldcapacity）</strong></h3>
<p><strong>命令</strong>：<code>jstat -gcoldcapacity &lt;pid&gt;</code><br>
<strong>字段</strong>：<code>OGCMN</code>/<code>OGCMX</code>（老年代最小/最大容量）、<code>OGC</code>（当前老年代容量）<br>
<strong>诊断</strong>：</p>
<ul>
<li>老年代容量不足触发 Full GC → 增加 <code>-Xmx</code> 或降低新生代与老年代比例。</li>
</ul>
<hr>
<h3 id="-12-方法区监控-printcompilation">📉 <strong>12. 方法区监控（-printcompilation）</strong></h3>
<p><strong>命令</strong>：<code>jstat -printcompilation &lt;pid&gt;</code><br>
<strong>字段</strong>：<code>Compiled</code>（编译次数）、<code>Size</code>（方法字节码大小）、<code>Method</code>（方法名）<br>
<strong>用途</strong>：</p>
<ul>
<li>识别 JIT 编译的热点方法，优化其性能（如内联或循环展开）。</li>
</ul>
<hr>
<h3 id="️-调优总结与工具链整合">⚙️ <strong>调优总结与工具链整合</strong></h3>
<table>
<thead>
<tr>
<th><strong>场景</strong></th>
<th><strong>关键命令</strong></th>
<th><strong>优化动作</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Young GC 频繁</td>
<td><code>jstat -gcutil</code></td>
<td>增大 <code>-Xmn</code>，调整 <code>-XX:SurvivorRatio</code></td>
</tr>
<tr>
<td>Full GC 频繁</td>
<td><code>jstat -gccause</code></td>
<td>增大堆内存，换 G1/ZGC，修复内存泄漏</td>
</tr>
<tr>
<td>元空间溢出</td>
<td><code>jstat -gcmetacapacity</code></td>
<td>限制 <code>-XX:MaxMetaspaceSize</code></td>
</tr>
<tr>
<td>类加载泄漏</td>
<td><code>jstat -class</code></td>
<td>检查动态代理，限制类加载器作用域</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="-最佳实践建议">💎 <strong>最佳实践建议</strong></h3>
<ol>
<li><strong>自动化监控</strong>：通过 Shell 脚本定期采集 <code>jstat</code> 数据，结合 <code>grep</code>/<code>awk</code> 分析异常阈值并触发告警。</li>
<li><strong>多工具联动</strong>：
<ul>
<li>用 <code>jmap</code> 导出堆转储分析大对象（<code>jmap -dump:format=b,file=heap.hprof &lt;pid&gt;</code>）。</li>
<li>用 <code>jstack</code> 抓取线程快照排查死锁（<code>jstack &lt;pid&gt; &gt; thread.txt</code>）。</li>
</ul>
</li>
<li><strong>可视化分析</strong>：上传 GC 日志到 <a href="https://gceasy.io" target="_blank" rel="noopener nofollow">https://gceasy.io</a> 生成吞吐量、延迟报告。</li>
</ol>
<blockquote>
<p>通过这 12 个场景的深度监控，可覆盖 90% 的 JVM 性能问题。<strong>记住黄金法则</strong>：优先让对象在新生代回收（减少 FGC），避免老年代积压。</p>
</blockquote>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/ydswin/" target="_blank">dashery</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/ydswin/p/19027073" target="_blank">https://www.cnblogs.com/ydswin/p/19027073</a></p>
</div>
<div class="clear"></div>

		<p class="postfoot">
			posted on 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-07 16:18">2025-08-07 16:17</span>&nbsp;
<a href="https://www.cnblogs.com/ydswin">dashery</a>&nbsp;
阅读(<span id="post_view_count">113</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19027073);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19027073', targetLink: 'https://www.cnblogs.com/ydswin/p/19027073', title: 'JVM监控利器：jstat命令全方位详解' })">举报</a>

		</p>
	