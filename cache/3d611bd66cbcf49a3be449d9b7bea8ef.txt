
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kewei/p/19044318" title="发布于 2025-08-18 11:14">
    <span role="heading" aria-level="2">Dotnet选项模式的全球化与本地化</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h3 id="前言">前言</h3>
<p>选项模式 <a href="https://learn.microsoft.com/zh-cn/dotnet/core/extensions/options" target="_blank" rel="noopener nofollow">Options</a> 是Dotnet非常重要的一个基础概念，在应用开发过程中很多Service都关联着其 Options。</p>
<p>我们有个AI Agent使用 Options 来配置AI的一部分功能，原需求是只需要支持英文语言，现需求改为要支持其它共6种语言。我决定开发一个类库，使 Options 完整地得到多语言支持。</p>
<h3 id="设计思路">设计思路</h3>
<h4 id="1-具体语言的configuration">1 具体语言的Configuration</h4>
<p>使用<code>OptionsLocalization:{OptionsName}:{culture}</code>做为配置的<code>key</code>前缀，例如<code>AIOptions</code>选项的<code>ModelId</code>属性，在配置里的<code>zh-CN</code>对应的<code>key</code>是<code>OptionsLocalization:AIOptions:zh-CN:ModelId</code></p>
<h4 id="2-简化的-json-配置文件">2 简化的 json 配置文件</h4>
<p>未简化前的 <code>AIOptions/zh-CN.json</code></p>
<pre><code class="language-json">{
	"OptionsLocalization": {
		"AIOptions": {
			"zh-CN": {
				"ModelId": "gemini2.5",
                "Prompt": "你好世界"
			}
		}
	}
}
</code></pre>
<p>期待简化后的 <code>AIOptions/zh-CN.json</code></p>
<pre><code class="language-json">{	 
	"ModelId": "gemini2.5",
    "Prompt": "你好世界"
}
</code></pre>
<h4 id="3-语言区域别名化的-options">3 语言区域别名化的 Options</h4>
<pre><code class="language-c#">// 选项绑定到别名化的配置
// 如果是默认语言区域，则注册成别名为Options.DefaultName
services.Configure&lt;AIOptions&gt;("zh-CN", configuration.GetSection("OptionsLocalization:AIOptions:zh-CN"));
</code></pre>
<pre><code class="language-c#">// 使用别名获取选项
IOptionsMonitor&lt;AIOptions&gt;().Get("zh-CN");
</code></pre>
<h4 id="4-支持父语言区域回退">4 支持父语言区域回退</h4>
<p>假设注册"en"默认语言和zh语言</p>
<pre><code class="language-c#">services.Configure&lt;AIOptions&gt;("zh", zhSection);
services.Configure&lt;AIOptions&gt;(Options.DefaultName, enSection);
</code></pre>
<p>现在前端的语言区域为"zh-CN"，<code>IOptionsMonitor&lt;AIOptions&gt;().Get("zh-CN")</code>会存在以下问题：</p>
<ol>
<li><code>zh-CN</code>不存在，要回退到<code>zh-Hans</code></li>
<li><code>zh-Hans</code>不存在，要回退到<code>zh</code></li>
<li><code>zh</code>下的<code>ModelId</code>没有配置项，要回退使用默认的<code>en</code>下的<code>ModelId</code>项</li>
</ol>
<p>我们需要实现自定义的<code>IOptionsFactory&lt;TOptions&gt;</code>，把指定的语言区域别名的<code>AIOptions</code>构建正确。</p>
<pre><code class="language-c#">sealed class CultureOptionsFactory&lt;TOptions&gt; : IOptionsFactory&lt;TOptions&gt;
     where TOptions : class, new()
{
    private readonly IConfigureOptions&lt;TOptions&gt;[] _setups;
    private readonly IPostConfigureOptions&lt;TOptions&gt;[] _postConfigures;
    private readonly IValidateOptions&lt;TOptions&gt;[] _validations;

    public CultureOptionsFactory(IEnumerable&lt;IConfigureOptions&lt;TOptions&gt;&gt; setups, IEnumerable&lt;IPostConfigureOptions&lt;TOptions&gt;&gt; postConfigures, IEnumerable&lt;IValidateOptions&lt;TOptions&gt;&gt; validations)
    {
        _setups = setups as IConfigureOptions&lt;TOptions&gt;[] ?? setups.ToArray();
        _postConfigures = postConfigures as IPostConfigureOptions&lt;TOptions&gt;[] ?? postConfigures.ToArray();
        _validations = validations as IValidateOptions&lt;TOptions&gt;[] ?? validations.ToArray();
    }


    public TOptions Create(string name)
    {
        var defaultOptions = this.CreateOptions(Options.DefaultName, default);
        if (string.IsNullOrEmpty(name))
        {
            return defaultOptions;
        }

        var culture = CultureInfo.GetCultureInfo(name);
        var cultureStack = new Stack&lt;CultureInfo&gt;();

        cultureStack.Push(culture);
        while (culture.Parent.Name.AsSpan().Length &gt; 0)
        {
            culture = culture.Parent;
            cultureStack.Push(culture);
        }

        var options = defaultOptions;
        while (cultureStack.TryPop(out var next))
        {
            options = this.CreateOptions(next.Name, options);
        }

        return options;
    }


    private TOptions CreateOptions(string name, TOptions? options)
    {
        if (options == null)
        {
            options = new TOptions();
        }

        foreach (var setup in _setups)
        {
            if (setup is IConfigureNamedOptions&lt;TOptions&gt; namedSetup)
            {
                namedSetup.Configure(name, options);
            }
            else if (name == Options.DefaultName)
            {
                setup.Configure(options);
            }
        }

        foreach (var post in _postConfigures)
        {
            post.PostConfigure(name, options);
        }

        if (_validations != null)
        {
            var failures = new List&lt;string&gt;();
            foreach (var validate in _validations)
            {
                var result = validate.Validate(name, options);
                if (result != null &amp;&amp; result.Failed)
                {
                    failures.AddRange(result.Failures);
                }
            }
            if (failures.Count &gt; 0)
            {
                throw new OptionsValidationException(name, typeof(TOptions), failures);
            }
        }

        return options;
    }
}
</code></pre>
<h3 id="工程实现">工程实现</h3>
<pre><code>                            -----------------
                            |               |
 JsonConfigurationSource -&gt; | Configuration |  -&gt; IOptionsLocalizer&lt;TOptions&gt;
                            |               |
                            -----------------
</code></pre>
<p>项目地址：<br>
<a href="https://github.com/xljiulang/OptionsLocalization" target="_blank" rel="noopener nofollow">OptionsLocalization</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-18 11:15">2025-08-18 11:14</span>&nbsp;
<a href="https://www.cnblogs.com/kewei">jiulang</a>&nbsp;
阅读(<span id="post_view_count">226</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19044318);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19044318', targetLink: 'https://www.cnblogs.com/kewei/p/19044318', title: 'Dotnet选项模式的全球化与本地化' })">举报</a>
</div>
        