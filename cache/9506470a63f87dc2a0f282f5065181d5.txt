
        <div class="postTitle">
            <h1><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenyishi/p/18699860" title="发布于 2025-02-06 09:06">
    <span role="heading" aria-level="2">.NET中优雅使用Patch: JsonPatch</span>
    

</a>
</h1>
        </div>
        <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h5>引言</h5>
<p>在现代 Web API 开发中，我们经常需要对资源进行部分更新（Partial Update）。传统的 <code>PUT</code> 请求会要求发送整个对象，而 <code>PATCH</code> 请求可以仅发送需要更新的字段。ASP.NET Core 提供了 <code>JsonPatchDocument&lt;T&gt;</code> 来简化这一操作。</p>
<h4>什么是 JsonPatch？</h4>
<p>JsonPatch（基于 <a href="https://tools.ietf.org/html/rfc6902" rel="noopener nofollow">RFC 6902</a>）是一种 JSON 格式的补丁文档，允许客户端声明式地修改 JSON 资源。JsonPatch 提供了以下操作：</p>
<p><code>add</code>：添加一个新值</p>
<p><code>remove</code>：删除一个字段</p>
<p><code>replace</code>：替换一个字段的值</p>
<p><code>move</code>：移动一个值</p>
<p><code>copy</code>：复制一个值</p>
<p><code>test</code>：测试一个值是否符合预期</p>
<h4>在 ASP.NET Core Web API 中使用 JsonPatch</h4>
<h5>安装依赖</h5>
<p><code>JsonPatch</code> 已内置于 <code>Microsoft.AspNetCore.Mvc.NewtonsoftJson</code>，你需要确保你的项目引用了该包：</p>
<pre><code class="language-csharp">builder.Services.AddControllers().AddNewtonsoftJson();
</code></pre>
<h6>创建 API 控制器</h6>
<p>假设我们有一个 <code>Product</code> 类：</p>
<pre><code class="language-csharp">public class Product
{
    public int Id { get; set; }
    public string Name { get; set; }
    public decimal Price { get; set; }
}
</code></pre>
<p>然后，创建 <code>ProductsController</code> 处理 <code>PATCH</code> 请求：</p>
<pre><code class="language-csharp">[ApiController]
[Route("api/[controller]")]
public class ProductsController : ControllerBase
{
    private static List&lt;Product&gt; _products = new()
    {
        new Product { Id = 1, Name = "Laptop", Price = 1200 },
        new Product { Id = 2, Name = "Mouse", Price = 25 }
    };

    [HttpPatch("{id}")]
    public IActionResult Patch(int id, [FromBody] JsonPatchDocument&lt;Product&gt; patchDoc)
    {
        var product = _products.FirstOrDefault(p =&gt; p.Id == id);
        if (product == null)
        {
            return NotFound();
        }

        patchDoc.ApplyTo(product, ModelState);

        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        return Ok(product);
    }
}
</code></pre>
<h5>发送 JsonPatch 请求</h5>
<p>客户端可以发送如下 <code>PATCH</code> 请求：</p>
<pre><code class="language-json">[
    { "op": "replace", "path": "/price", "value": 999.99 }
]
</code></pre>
<p><strong>示例 cURL 请求：</strong></p>
<pre><code class="language-sh">curl -X PATCH "http://localhost:5000/api/products/1" \
     -H "Content-Type: application/json" \
     -d '[{"op": "replace", "path": "/price", "value": 999.99}]'
</code></pre>
<h4>处理 JsonPatch 可能遇到的问题</h4>
<h5>确保 JSON 格式正确</h5>
<p>JsonPatch 语法容易出错，比如路径格式不正确或缺少 <code>op</code>。建议使用 Postman 或 cURL 进行调试。</p>
<h5>处理 ModelState 错误</h5>
<p>如果 <code>patchDoc.ApplyTo(product, ModelState);</code> 返回错误，应该返回 <code>BadRequest(ModelState)</code> 并提供详细的错误信息。</p>
<h4>结论</h4>
<p><code>JsonPatch</code> 提供了一种优雅的方式来进行部分更新，避免了 <code>PUT</code> 需要传输整个对象的冗余。合理使用 <code>JsonPatch</code>，可以提高 API 的灵活性和效率。</p>
</div>
<div class="clear"></div>

        <div class="postDesc">posted on 
<span id="post-date" data-last-update-days="0.0767520101886574" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-06 09:07">2025-02-06 09:06</span>&nbsp;
<a href="https://www.cnblogs.com/chenyishi">chester·chen</a>&nbsp;
阅读(<span id="post_view_count">151</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18699860" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18699860);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18699860', targetLink: 'https://www.cnblogs.com/chenyishi/p/18699860', title: '.NET中优雅使用Patch: JsonPatch' })">举报</a>
</div>
    