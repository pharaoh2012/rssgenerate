
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xwz1024/p/18987653" title="发布于 2025-07-16 15:28">
    <span role="heading" aria-level="2">Django+Celery 进阶：Celery可视化监控与排错</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250716152758946-496512299.png" alt="Django+Celery 进阶：Celery可视化监控与排错" class="desc_img">
        本文介绍了Celery命令行工具与图形监控工具的使用，涵盖查看Worker状态、任务信息及集成至Django项目的方法，同时提供Redis监控与常见问题排错方案。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="一celery-命令行工具">一、Celery 命令行工具</h2>
<p>Celery 命令行工具可用去查看Celery的运行状态。打开一个终端窗口，进入项目目录（与manage.py同级），运行以下命令</p>
<ul>
<li>列出集群中在线的Celery Worker节点</li>
</ul>
<pre><code class="language-sh">celery -A mysite status

### 大概10秒后，输出结果
-&gt;  celery@DESKTOP-MHHVBI3: OK

1 node online.
</code></pre>
<ul>
<li>列出正在执行的Celery 任务</li>
</ul>
<pre><code class="language-sh">celery -A mysite inspect active

### 输出结果
-&gt;  celery@DESKTOP-MHHVBI3: OK
    - empty -

1 node online.
</code></pre>
<ul>
<li>列出已注册的Celery 任务</li>
</ul>
<pre><code class="language-sh">celery -A mysite inspect registered

### 输出结果示例
-&gt;  celery@DESKTOP-MHHVBI3: OK
    * myapp_infra.tasks.cleanup_expired_data
    * myapp_infra.tasks.send_daily_report
    * myapp_system.tasks.login_log_task
    * myapp_system.tasks.operation_log_task
    * myapp_system.tasks.send_single_mail_task

1 node online.
</code></pre>
<ul>
<li>显示Celery 统计数据</li>
</ul>
<pre><code class="language-sh">celery -A mysite inspect stats 

### 输出结果示例
-&gt;  celery@DESKTOP-MHHVBI3: OK
    {
        "broker": {
            "alternates": [],
            "connect_timeout": 4,
            "failover_strategy": "round-robin",
            "heartbeat": 0,
            "hostname": "127.0.0.1",
            "insist": false,
            "login_method": null,
            "port": 6379,
            "ssl": false,
            "transport": "redis",
            "transport_options": {},
            "uri_prefix": null,
            "userid": null,
            "virtual_host": "3"
        },
        "clock": "543",
        "pid": 2316,
        "pool": {
            "implementation": "celery.concurrency.solo:TaskPool",
            "max-concurrency": 1,
            "max-tasks-per-child": null,
            "processes": [
                2316
            ],
            "put-guarded-by-semaphore": true,
            "timeouts": []
        },
        "prefetch_count": 32,
        "rusage": "N/A",
        "total": {
            "myapp_infra.tasks.cleanup_expired_data": 3,
            "myapp_system.tasks.login_log_task": 36
        },
        "uptime": 541
    }

1 node online.
</code></pre>
<p>小结：</p>
<ul>
<li>以上命令支持 <code>--timeout</code>参数，例如在命令后加上<code>--timeout 3</code></li>
<li>参考资料：<a href="https://docs.celeryq.dev/en/stable/userguide/monitoring.html" target="_blank" rel="noopener nofollow">Celery 监控</a></li>
</ul>
<h2 id="二celery-图形监控">二、Celery 图形监控</h2>
<h3 id="celery-flower-图形监控">Celery Flower 图形监控</h3>
<p>Celery Flower 是一个用于监控和管理 Celery 任务的开源 Web 应用程序，它提供了实时的任务状态监控、任务执行图表、工作者信息、任务追踪和任务日志等功能。</p>
<p>安装</p>
<pre><code class="language-python">pip install flower
</code></pre>
<h3 id="基本使用">基本使用</h3>
<p>Celery Flower 服务启动命令：进入根目录（包含manage.py文件的目录）执行</p>
<pre><code class="language-python">celery -A mysite flower --port=5555
</code></pre>
<p>访问 <code>http://&lt;IP&gt;:5555</code> 查看Celery 图形监控</p>
<ul>
<li>点击 Workers 查看 Celery Worker 状态</li>
</ul>
<p><img alt="image-20250525113618659" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250716152513347-1167191756.png" class="lazyload"></p>
<ul>
<li>点击 Tasks 查看当前及后来的任务（不会显示以前的任务）。另外，通过观察任务列表的变化，判断 Celery Beat 的状态是否正常。</li>
</ul>
<p><img alt="image-20250525110933420" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250716152622328-214935190.png" class="lazyload"></p>
<ul>
<li>点击 Broker 查看 Redis 状态</li>
</ul>
<p><img alt="image-20250525113632394" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250716152614304-58594783.png" class="lazyload"></p>
<h3 id="与django项目集成">与Django项目集成</h3>
<p>对于Django+Vue3的前后端分离项目，使用iframe（内联框架） HTML 元素，可将网页嵌入其他网页。实现将Celery Flower 集成到Django项目中。</p>
<p><img alt="image-20250716143830162" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250716152601398-1561408192.png" class="lazyload"></p>
<p><a href="https://gitee.com/zhulj993/mars-mgn-vue/blob/master/src/views/infra/flower/index.vue" target="_blank" rel="noopener nofollow">点击查看集成代码示例</a></p>
<h2 id="三redis-图形监控">三、Redis 图形监控</h2>
<p>Redis一般作为Celery的消息中间件 (Broker)，负责接收任务生产者发送的消息并将任务存入队列。</p>
<p>安装工具：Another Redis Desktop Manager，是一个Redis的图形管理界面工具。<a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases" target="_blank" rel="noopener nofollow">下载地址</a></p>
<p>解压即可使用。连接Redis 服务器后，查看celery队列中的任务数。</p>
<ul>
<li>如果没有celery键，表示当前没有等待的Celery任务</li>
</ul>
<p><img alt="image-20250525104650853" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250716152644885-1215714696.png" class="lazyload"></p>
<h2 id="四celery-排错">四、Celery 排错</h2>
<h3 id="permissionerror权限错误">PermissionError权限错误</h3>
<p>错误信息</p>
<pre><code class="language-sh">[2025-04-12 22:53:48,435: INFO/MainProcess] Task tasks.add[6d0cc2d2-0a84-4a4d-b5e7-e86a4bd9b625] received
[2025-04-12 22:53:48,436: ERROR/SpawnPoolWorker-6] Pool process &lt;billiard.pool.Worker object at 0x0000027D686A33D0&gt; error: PermissionError(13, '拒绝访问。', None, 5, None)
Traceback (most recent call last):
</code></pre>
<p>解决方法</p>
<pre><code class="language-python"># 在Windows系统中，prefork 多进程模式可能导致权限冲突。改用单进程模式启动--pool=solo 
celery -A tasks worker --loglevel=INFO --pool=solo 
</code></pre>
<h3 id="appregistrynotready-错误">AppRegistryNotReady 错误</h3>
<p>错误信息</p>
<pre><code class="language-sh">2025-05-17 18:33:13,886 INFO D:\workspace_python\mars-mgn\mysite\myapp_system\tasks.py changed, reloading.
Traceback (most recent call last):
...
  File "D:\workspace_python\mars-mgn\venv\Lib\site-packages\django\apps\registry.py", line 138, in check_apps_ready
    raise AppRegistryNotReady("Apps aren't loaded yet.")
django.core.exceptions.AppRegistryNotReady: Apps aren't loaded yet.
</code></pre>
<p>解决方法</p>
<ul>
<li>分析：Celery初始化与Django启动顺序问题：在celery.py中通过app.autodiscover_tasks()自动发现任务时，可能过早加载包含Django模型的任务模块，而Django的INSTALLED_APPS尚未完全初始化</li>
<li>避免在任务模块顶部直接导入Django模型。将模型导入操作移至任务函数内部</li>
</ul>
<pre><code class="language-python"># myapp_system/tasks.py
from celery import shared_task
from django.core.mail import send_mail

@shared_task
def send_email_task(subject, message, from_email, recipient_list):
    # 导入操作移至任务函数内部：延迟导入模型和序列化器
    from .mail_log.serializers import MailLogSaveSerializer
    from .models import SystemMailLog
    
    # 发送邮件逻辑
    send_mail(subject, message, from_email, recipient_list)
    return "邮件发送成功"
</code></pre>
<h3 id="任务参数">任务参数</h3>
<p>错误信息</p>
<pre><code class="language-sh">celery.beat.SchedulingError: Couldn't apply scheduled task daily_cleanup_expired_data: cleanup_expired_data() takes 0 positional arguments but 1 was given
</code></pre>
<p>解决方法</p>
<ul>
<li>分析：args 和 kwargs 参数是传递给任务。若定义任务时没有定义接收参数，但却传递了arsg或kwargs参数，则Celery Beat 会报错</li>
<li>修改任务定义的代码，然后重启Celery worker和 beat。</li>
</ul>
<h3 id="时区">时区</h3>
<p>建议使用统一的时区，例如全部统一为东八区</p>
<ul>
<li>在 <code>settings.py</code> 中明确配置</li>
</ul>
<pre><code class="language-python"># 设置 Django 时区
TIME_ZONE = 'Asia/Shanghai'
USE_TZ = True

# 配置 Celery 时区
CELERY_TIMEZONE = 'Asia/Shanghai'

# MySQL数据库连接字符串中添加时区参数
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
		# ...
        "OPTIONS": {"init_command": "SET time_zone='+08:00'"},
    }
}
</code></pre>
<ul>
<li>Celery Worker 所在服务器系统时区为</li>
</ul>
<pre><code class="language-sh"># 查看系统时区
timedatectl | grep "Time zone"
# 设置时区
timedatectl set-timezone Asia/Shanghai
</code></pre>
<hr>
<p>您正在阅读的是《<strong>Django从入门到实战</strong>》专栏！关注不迷路~</p>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-16 15:28">2025-07-16 15:28</span>&nbsp;
<a href="https://www.cnblogs.com/xwz1024">小王子1024</a>&nbsp;
阅读(<span id="post_view_count">123</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18987653);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18987653', targetLink: 'https://www.cnblogs.com/xwz1024/p/18987653', title: 'Django+Celery 进阶：Celery可视化监控与排错' })">举报</a>
</div>
	