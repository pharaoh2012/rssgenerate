
		<h2>
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xiangji/p/19010503" title="发布于 2025-07-29 11:43">
    <span role="heading" aria-level="2">优雅的.net REST API之FastEndpoints</span>
    

</a>

		</h2>
		<div class="postText"><div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>FastEndpoints 是基于 ASP.NET Core 的轻量级、高性能 Web API 开发框架，采用 REPR （请求-端点-响应）设计模式。</p>
<p>&nbsp;</p>
<p>本人用FastEndpoints做了一个REST API很优雅的Case</p>
<p>&nbsp;</p>
<p>一、以下是http测试</p>
<div class="cnblogs_code">
<pre>@HostAddress = http:<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">localhost:5167</span>
<span style="color: rgba(0, 0, 0, 1)">### 获取列表
GET {{HostAddress}}</span>/users?Page=<span style="color: rgba(128, 0, 128, 1)">1</span>&amp;Size=<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">

### 添加
PUT {{HostAddress}}</span>/<span style="color: rgba(0, 0, 0, 1)">users
Content</span>-Type:application/<span style="color: rgba(0, 0, 0, 1)">json

{
  </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Name</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Jxj</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
}

### 获取单个
GET {{HostAddress}}</span>/users/<span style="color: rgba(128, 0, 128, 1)">1</span></pre>
<p>### 修改用户名<br>PATCH {{HostAddress}}/users/1<br>Content-Type:application/json</p>
<p>{<br>  "Name" : "Jxj2"<br>}</p>
<pre></pre>
<p>### 修改年龄<br>PATCH {{HostAddress}}/users/1<br>Content-Type:application/json</p>
<p>{<br>  "Age" : 40<br>}</p>
<pre><span style="color: rgba(0, 0, 0, 1)">
### 删除
DELETE {{HostAddress}}</span>/users/<span style="color: rgba(128, 0, 128, 1)">1</span></pre>
</div>
<p>地址规则非常简单清晰,只有两种地址却能支持添、删、改、查四种操作</p>
<p>1. 添加使用/users</p>
<p>　　使用PUT请求,含义是向一个集合添加资源</p>
<p>2. 删除使用/users/{Id}(Id是标识)</p>
<p>　　使用DELETE请求,表示从集合移除该标识的资源</p>
<p>3. 修改也使用/users/{Id}}(Id是标识)</p>
<p>　　使用PATCH请求,表示该标识资源的哪些字段被修改了(这与Elasticsearch的一样)</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;可以只修改一个字段,也可以同时修改多个字段,并不需要按排列组合来开发API</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;传了哪些字段就能修改哪些字段</p>
<p>4. 查询GET请求</p>
<p>4.1 查询单条使用/users/{Id}}(Id是标识)</p>
<p>4.2 查询多条使用/users</p>
<p>&nbsp;</p>
<p>二、项目结构也是非常简单清晰</p>
<p><img src="https://img2024.cnblogs.com/blog/248830/202507/248830-20250729105923191-1045763517.png" alt="image" loading="lazy"></p>
<p>&nbsp;注:实际项目的模型和仓储应该是单独项目,这里简单示意就放一起了</p>
<p>本人非常喜欢这样的项目结构,每个API方法一个文件夹</p>
<p>而且每个文件夹下的文件名非常有意思,都是Endpoint、Mapper和Models,对于本人这种纠结命名规则的反而是一种解脱</p>
<p>DTO直接命名为Request和Response,如果是复杂结构可以增加DTO类型</p>
<p>应用层业务逻辑复杂的可以再增加一个Data.cs文件</p>
<p>这种文件结构FastEndpoints是有提供模板生成的,当然手写也不复杂</p>
<p>&nbsp;</p>
<p>三、Mapper的优雅实现</p>
<p>定义接口IPocoConverter实现任意两种类型的转化,直接用IOC注入就好了</p>
<p>以下是Create的Mapper的实现</p>
<div class="cnblogs_code">
<pre>[RegisterService&lt;Mapper&gt;<span style="color: rgba(0, 0, 0, 1)">(LifeTime.Singleton)]
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">sealed</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Mapper(
    UserRepository repository, 
    IPocoConverter</span>&lt;Request, User&gt;<span style="color: rgba(0, 0, 0, 1)"> requestConverter, 
    IPocoConverter</span>&lt;User, Response&gt;<span style="color: rgba(0, 0, 0, 1)"> responseConverter)
    : Mapper</span>&lt;Request, Response, User&gt;<span style="color: rgba(0, 0, 0, 1)">
{
    </span><span style="color: rgba(0, 0, 255, 1)">#region</span> 配置
    <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">readonly</span> UserRepository _repository =<span style="color: rgba(0, 0, 0, 1)"> repository;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">readonly</span> IPocoConverter&lt;Request, User&gt; _requestConverter =<span style="color: rgba(0, 0, 0, 1)"> requestConverter;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">readonly</span> IPocoConverter&lt;User, Response&gt; _responseConverter =<span style="color: rgba(0, 0, 0, 1)"> responseConverter;
    </span><span style="color: rgba(0, 0, 255, 1)">#endregion</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">override</span><span style="color: rgba(0, 0, 0, 1)"> User ToEntity(Request r)
    {
        User entity </span>=<span style="color: rgba(0, 0, 0, 1)"> _requestConverter.Convert(r);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> Save(entity);
    }
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">override</span><span style="color: rgba(0, 0, 0, 1)"> Response FromEntity(User e)
        </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> _responseConverter.Convert(e);
    </span><span style="color: rgba(0, 0, 255, 1)">#region</span> Data<span style="color: rgba(0, 0, 0, 1)">
    User Save(User entity)
        </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> _repository.Add(entity);
    </span><span style="color: rgba(0, 0, 255, 1)">#endregion</span><span style="color: rgba(0, 0, 0, 1)">
}</span></pre>
</div>
<p>这里有一个微软IOC不得不说的槽点,IServiceCollection支持泛型类的注册,却不支持泛型方法的注册</p>
<p>好在本人找到了博客园一个大佬(@coredx)的开源项目(https://www.cnblogs.com/coredx/p/18138360)</p>
<p>封装一个简单IOC注入泛型转化的方法如下:</p>
<div class="cnblogs_code">
<pre>services.UseConverter(PocoEmit.Mapper.Global);</pre>
</div>
<p>还需要显示调用@coredx的以下方法</p>
<div class="cnblogs_code">
<pre>builder.Host.UseServiceProviderFactory(<span style="color: rgba(0, 0, 255, 1)">new</span> TypedImplementationFactoryServiceProviderFactory());</pre>
</div>
<p>注: 以上调用本人是翻看大佬源码才摸索出来的,按大佬的文档尝试了很多次都失败了,大佬的文档估计有些时间没更新了...</p>
<p>&nbsp;</p>
<p>四、优雅的修改</p>
<p>本次修改还是使用的本人上篇文章(https://www.cnblogs.com/xiangji/p/18979384)提到的MyDelta,微软OData的Delta的变体</p>
<p>使用MyDelta,无论模型实体多少字段,都可以使用一个API方法实现</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">sealed</span> <span style="color: rgba(0, 0, 255, 1)">class</span> Endpoint(UserModifyDTOValidator validationRules) : Endpoint&lt;Request, Response, Mapper&gt;<span style="color: rgba(0, 0, 0, 1)">
{
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> ...</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">override</span> <span style="color: rgba(0, 0, 255, 1)">async</span><span style="color: rgba(0, 0, 0, 1)"> Task HandleAsync(Request req, CancellationToken c)
    {
        MyDelta</span>&lt;UserModifyDTO&gt; dto =<span style="color: rgba(0, 0, 0, 1)"> req.User;
        dto.Patch(dto.Instance);
        </span><span style="color: rgba(0, 0, 255, 1)">var</span> result =<span style="color: rgba(0, 0, 0, 1)"> validationRules.Validate(dto);
        </span><span style="color: rgba(0, 0, 255, 1)">if</span>(!<span style="color: rgba(0, 0, 0, 1)">result.IsValid)
        {
            ThrowError(result.Errors[</span><span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">]);
        }
        User</span>? entity =<span style="color: rgba(0, 0, 0, 1)"> Map.ToEntity(req);
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (entity <span style="color: rgba(0, 0, 255, 1)">is</span> <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
        {
            ThrowError($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Id = {req.Id} 的User不存在</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        }
        </span><span style="color: rgba(0, 0, 255, 1)">var</span> res =<span style="color: rgba(0, 0, 0, 1)"> Map.FromEntity(entity);
        </span><span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> Send.OkAsync(res, c);
    }
}</span></pre>
</div>
<div class="cnblogs_code">
<pre>[RegisterService&lt;Mapper&gt;<span style="color: rgba(0, 0, 0, 1)">(LifeTime.Singleton)]
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">sealed</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Mapper(
    UserRepository repository,
    IMyDeltaFactory deltaFactory,
    IPocoConverter</span>&lt;User, Response&gt;<span style="color: rgba(0, 0, 0, 1)"> responseConverter)
    : Mapper</span>&lt;Request, Response, User?&gt;<span style="color: rgba(0, 0, 0, 1)">
{
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> ...</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">override</span> User?<span style="color: rgba(0, 0, 0, 1)"> ToEntity(Request r)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">var</span> user0 =<span style="color: rgba(0, 0, 0, 1)"> GetById(r.Id);
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (user0 == <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">var</span> delta =<span style="color: rgba(0, 0, 0, 1)"> deltaFactory.Create(user0, r.User.Data);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> Modify(delta);
    }
}</span></pre>
</div>
<p>获取并验证DTO的MyDelta(增量),再转化为模型实体的增量,调用仓储处理</p>
<p>以上项目代码GitHub地址:&nbsp;https://github.com/donetsoftwork/MyEmit/tree/main/IntegrationTests/TestApi</p>
<p>gitee同步更新:&nbsp;https://gitee.com/donetsoftwork/MyEmit/tree/main/IntegrationTests/TestApi</p>
<p>&nbsp;</p>
<p>如果大家喜欢请动动您发财的小手手帮忙点一下Star。</p>
</div>
<div class="clear"></div>
</div>
		<p class="postfoot">
			posted on 
<span id="post-date" data-last-update-days="0.27361111111111114" data-date-updated="2025-07-29 18:17">2025-07-29 11:43</span>&nbsp;
<a href="https://www.cnblogs.com/xiangji">xiangji</a>&nbsp;
阅读(<span id="post_view_count">353</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19010503);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19010503', targetLink: 'https://www.cnblogs.com/xiangji/p/19010503', title: '优雅的.net REST API之FastEndpoints' })">举报</a>

		</p>
	