
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ggtop/p/18901426" title="发布于 2025-05-28 22:49">
    <span role="heading" aria-level="2">Golang与Elasticsearch搭配检索运用</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h2 data-first-child="">一、简介下：</h2>
<img src="https://pic4.zhimg.com/v2-83db6b3491b1b0c2ec09257f0c109edf_1440w.jpg" width="1536" class="origin_image zh-lightbox-thumb" data-caption="" data-size="normal" data-rawwidth="1536" data-rawheight="1024" data-original-token="v2-4427c2ee358631b879fb857f9e51a417" data-original="https://pic4.zhimg.com/v2-83db6b3491b1b0c2ec09257f0c109edf_r.jpg">
<p data-pid="DtFUWRza">Elasticsearch&nbsp;是一个高性能、分布式、全文搜索与分析引擎，它的核心优势在于&nbsp;对结构化和非结构化数据进行高效搜索、统计与分析，远远超出传统关系数据库（如&nbsp;<a class="RichContent-EntityWord css-b7erz1" href="https://zhida.zhihu.com/search?content_id=257857562&amp;content_type=Article&amp;match_order=1&amp;q=MySQL&amp;zhida_source=entity" target="_blank" data-za-not-track-link="true" data-paste-text="true" rel="noopener nofollow">MySQL</a>）的全文检索能力。</p>
<blockquote data-pid="sdierTi-">让你能在海量数据中，毫秒级地进行智能搜索和实时分析。</blockquote>
<p data-pid="uZJUbCMl">核心模块：全文检索、结构化查询、聚合分析、实时写入/搜索、分布式扩展、高可用性、可视化分析。</p>
<p data-pid="8Wdyblb5">常见应用场景&nbsp;：博客/文档搜索、电商搜索推荐、日志分析、指标分析、审计等</p>
<h2>二、运用（举例博客系统中）</h2>
<div class="highlight">
<pre><code class="language-text">      用户写博客
          ↓
     ➤ <a class="RichContent-EntityWord css-b7erz1" href="https://zhida.zhihu.com/search?content_id=257857562&amp;content_type=Article&amp;match_order=1&amp;q=API+Server&amp;zhida_source=entity" target="_blank" data-za-not-track-link="true" data-paste-text="true" rel="noopener nofollow">API Server</a> (<a class="RichContent-EntityWord css-b7erz1" href="https://zhida.zhihu.com/search?content_id=257857562&amp;content_type=Article&amp;match_order=1&amp;q=Golang&amp;zhida_source=entity" target="_blank" data-za-not-track-link="true" data-paste-text="true" rel="noopener nofollow">Golang</a>)
          ↓
    数据写入 MySQL 数据库
          ↓
    同步写入 Elasticsearch</code></pre>
</div>
<h3>1）Blog 模型（models/blog.go）</h3>
<div class="highlight">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">type</span> Blog <span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> {
    ID        </span><span style="color: rgba(0, 0, 255, 1)">int64</span>     `gorm:<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">primaryKey</span><span style="color: rgba(128, 0, 0, 1)">"</span> json:<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">id</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">`
    Title     </span><span style="color: rgba(0, 0, 255, 1)">string</span>    `json:<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">title</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">`
    Content   </span><span style="color: rgba(0, 0, 255, 1)">string</span>    `json:<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">content</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">`
    Tags      </span><span style="color: rgba(0, 0, 255, 1)">string</span>    `json:<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">tags</span><span style="color: rgba(128, 0, 0, 1)">"</span>` <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> JSON string</span>
    Author    <span style="color: rgba(0, 0, 255, 1)">string</span>    `json:<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">author</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">`
    CreatedAt time.Time `json:</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">created_at</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">`
    UpdatedAt time.Time `json:</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">updated_at</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">`
}</span></pre>
</div>
</div>
<h3>2）写入博客（MySQL + Elasticsearch 同步）</h3>
<p data-pid="ByxuF_Ia">⚡️services/blog_service.go</p>
<div class="highlight">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">func</span> CreateBlog(blog *models.Blog) <span style="color: rgba(0, 0, 255, 1)">error</span><span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 0, 255, 1)">if</span> err := db.Create(blog).Error; err !=<span style="color: rgba(0, 0, 0, 1)"> nil {
</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> err
    }
</span><span style="color: rgba(0, 0, 255, 1)">return</span> elastic.IndexBlog(blog) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 同步到 ES</span>
<span style="color: rgba(0, 0, 0, 1)">}
</span><span style="color: rgba(0, 0, 255, 1)">func</span> UpdateBlog(blog *models.Blog) <span style="color: rgba(0, 0, 255, 1)">error</span><span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 0, 255, 1)">if</span> err := db.Save(blog).Error; err !=<span style="color: rgba(0, 0, 0, 1)"> nil {
</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> err
    }
</span><span style="color: rgba(0, 0, 255, 1)">return</span> elastic.IndexBlog(blog) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 重新索引</span>
<span style="color: rgba(0, 0, 0, 1)">}
</span><span style="color: rgba(0, 0, 255, 1)">func</span> DeleteBlog(blogID <span style="color: rgba(0, 0, 255, 1)">int64</span>) <span style="color: rgba(0, 0, 255, 1)">error</span><span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 0, 255, 1)">if</span> err := db.Delete(&amp;models.Blog{}, blogID).Error; err !=<span style="color: rgba(0, 0, 0, 1)"> nil {
</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> err
    }
</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> elastic.DeleteBlog(blogID)
}</span></pre>
</div>
</div>
<p data-pid="Teq-d8Mq">⚡️elastic/client.go</p>
<div class="highlight">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> es *<span style="color: rgba(0, 0, 0, 1)">elasticsearch.Client

</span><span style="color: rgba(0, 0, 255, 1)">func</span><span style="color: rgba(0, 0, 0, 1)"> InitES() {
    cfg :</span>= elasticsearch.Config{Addresses: []<span style="color: rgba(0, 0, 255, 1)">string</span>{<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://localhost:9200</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">}}
       </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">搭配pwd使用 ：
       </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">cfg := elasticsearch.Config{Addresses: []string{eshost}, Username: esname,Password: espwd}</span>
    client, err :=<span style="color: rgba(0, 0, 0, 1)"> elasticsearch.NewClient(cfg)
</span><span style="color: rgba(0, 0, 255, 1)">if</span> err !=<span style="color: rgba(0, 0, 0, 1)"> nil {
        log.Fatalf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ES init error: %v</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, err)
    }
    es </span>=<span style="color: rgba(0, 0, 0, 1)"> client
}

</span><span style="color: rgba(0, 0, 255, 1)">func</span> IndexBlog(blog *models.Blog) <span style="color: rgba(0, 0, 255, 1)">error</span><span style="color: rgba(0, 0, 0, 1)"> {
    body, _ :</span>=<span style="color: rgba(0, 0, 0, 1)"> json.Marshal(blog)
    req :</span>=<span style="color: rgba(0, 0, 0, 1)"> esapi.IndexRequest{
        Index:      </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">blogs</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        DocumentID: strconv.FormatInt(</span><span style="color: rgba(0, 0, 255, 1)">int64</span>(blog.ID), <span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">),
        Body:       bytes.NewReader(body),
        Refresh:    </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    }
    res, err :</span>=<span style="color: rgba(0, 0, 0, 1)"> req.Do(context.Background(), esct)
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> err !=<span style="color: rgba(0, 0, 0, 1)"> nil {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> err
    }
    </span><span style="color: rgba(0, 0, 255, 1)">defer</span><span style="color: rgba(0, 0, 0, 1)"> res.Body.Close()
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> nil
}
</span><span style="color: rgba(0, 0, 255, 1)">func</span> DeleteBlog(blogID <span style="color: rgba(0, 0, 255, 1)">int64</span>) <span style="color: rgba(0, 0, 255, 1)">error</span><span style="color: rgba(0, 0, 0, 1)"> {
    req :</span>=<span style="color: rgba(0, 0, 0, 1)"> esapi.DeleteRequest{
        Index:      </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">blogs</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        DocumentID: fmt.Sprintf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%d</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, blogID),
        Refresh:    </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    }
    res, err :</span>=<span style="color: rgba(0, 0, 0, 1)"> req.Do(context.Background(), esct)
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> err !=<span style="color: rgba(0, 0, 0, 1)"> nil {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> err
    }
    </span><span style="color: rgba(0, 0, 255, 1)">defer</span><span style="color: rgba(0, 0, 0, 1)"> res.Body.Close()
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> nil
}</span></pre>
</div>
</div>
<p data-pid="uRUutuVA">引入官方库</p>
<div class="highlight">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">go</span> get github.com/elastic/<span style="color: rgba(0, 0, 255, 1)">go</span>-elasticsearch/v8</pre>
</div>
</div>
<h3>3）数据流转方式</h3>
<div class="highlight">
<pre><code class="language-text">            用户访问 Web/前端
                  │
        ┌─────────▼──────────┐
        │      Golang 后端服务 │
        └─────────┬──────────┘
                  │
       ┌──────────┼────────────┐
       │                       │
       ▼                       ▼
MySQL 关系型数据库      Elasticsearch 搜索引擎
 ️ 存储结构化数据              存储可检索文档数据
- title                    - title（分词）
- content                  - content（分词 + 高亮）
- created_by               - 拼音/模糊匹配
- tag_id 等业务字段         - 自定义字段聚合、排序</code></pre>
</div>
<h3>4）搜索实现</h3>
<div class="highlight">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">type</span> BlogHit <span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> {
    ID     </span><span style="color: rgba(0, 0, 255, 1)">string</span>                 `json:<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">id</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">`
    Source </span><span style="color: rgba(0, 0, 255, 1)">map</span>[<span style="color: rgba(0, 0, 255, 1)">string</span>]<span style="color: rgba(0, 0, 255, 1)">interface</span>{} `json:<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">source</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">`
}
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 搜索博客（支持标题和内容）</span>
<span style="color: rgba(0, 0, 255, 1)">func</span> SearchBlogs(keyword <span style="color: rgba(0, 0, 255, 1)">string</span>) ([]BlogHit, <span style="color: rgba(0, 0, 255, 1)">error</span><span style="color: rgba(0, 0, 0, 1)">) {
    query :</span>=<span style="color: rgba(0, 0, 0, 1)"> fmt.Sprintf(`
    {
      </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">query</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: {
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">multi_match</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: {
          </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">query</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%s</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
          </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">fields</span><span style="color: rgba(128, 0, 0, 1)">"</span>: [<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">title</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">content</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]
        }
      },
      </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">highlight</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: {
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">fields</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: {
          </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">title</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: {},
          </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">content</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: {}
        }
      }
    }`, keyword)
    res, err :</span>=<span style="color: rgba(0, 0, 0, 1)"> es.Search(
        esct.Search.WithContext(context.Background()),
        esct.Search.WithIndex(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">blogs</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">),
        esct.Search.WithBody(strings.NewReader(query)),
        esct.Search.WithTrackTotalHits(</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">),
        esct.Search.WithPretty(),
    )
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> err !=<span style="color: rgba(0, 0, 0, 1)"> nil {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> nil, err
    }
    </span><span style="color: rgba(0, 0, 255, 1)">defer</span><span style="color: rgba(0, 0, 0, 1)"> res.Body.Close()
    </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> res.IsError() {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> nil, fmt.Errorf(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">error response from ES: %s</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, res.String())
    }
    </span><span style="color: rgba(0, 0, 255, 1)">var</span> r <span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> {
        Hits </span><span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> {
            Hits []</span><span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> {
                ID     </span><span style="color: rgba(0, 0, 255, 1)">string</span>                 `json:<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">_id</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">`
                Source </span><span style="color: rgba(0, 0, 255, 1)">map</span>[<span style="color: rgba(0, 0, 255, 1)">string</span>]<span style="color: rgba(0, 0, 255, 1)">interface</span>{} `json:<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">_source</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">`
            } `json:</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">hits</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">`
        } `json:</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">hits</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">`
    }
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> err := json.NewDecoder(res.Body).Decode(&amp;r); err !=<span style="color: rgba(0, 0, 0, 1)"> nil {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> nil, err
    }
    </span><span style="color: rgba(0, 0, 255, 1)">var</span><span style="color: rgba(0, 0, 0, 1)"> results []BlogHit
    </span><span style="color: rgba(0, 0, 255, 1)">for</span> _, hit := <span style="color: rgba(0, 0, 255, 1)">range</span><span style="color: rgba(0, 0, 0, 1)"> r.Hits.Hits {
        results </span>= <span style="color: rgba(0, 0, 255, 1)">append</span><span style="color: rgba(0, 0, 0, 1)">(results, BlogHit{
            ID:     hit.ID,
            Source: hit.Source,
        })
    }
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> results, nil
}</span></pre>
</div>
<p>&nbsp;</p>
</div>
<p data-pid="Vei<span data-search-entity=">IKSSr"&gt;可视化执行逻辑图如下</p>
<div class="highlight">
<div class="cnblogs_code">
<pre>[ 用户输入关键词 <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">golang</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> ]
          ↓
     [ Vue 前端 ]
          ↓
   </span>/search/blog?q=<span style="color: rgba(0, 0, 0, 1)">golang
          ↓
[ Golang 后端调用 ES 查询 </span>+<span style="color: rgba(0, 0, 0, 1)"> 高亮]
          ↓
[ Elasticsearch 返回文档列表 ]
          ↓
[ Vue 展示博客标题 </span>+ 摘要 + 图片 ]</pre>
</div>
<p>&nbsp;</p>
</div>
<p data-pid="tDRYGh-i">前端调取方式如下</p>
<div class="highlight">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">vue调用golang api</span>
<span style="color: rgba(0, 0, 0, 1)">axios({
         method: </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">get</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
         url: </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://127.0.0.1:2023/GetSearchBlogs?title=</span><span style="color: rgba(128, 0, 0, 1)">"</span>+<span style="color: rgba(0, 0, 0, 1)">event,
        })
        .then((res) </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> {
          </span><span style="color: rgba(0, 0, 255, 1)">if</span>(res.data.data.lists==<span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">){
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">ElMessage.error("没有相关记录")</span>
            searchcount.value=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">
            blogData.values</span>=<span style="color: rgba(0, 0, 0, 1)">[]
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">
          }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">{
             searchcount.value</span>=<span style="color: rgba(0, 0, 0, 1)">res.data.lists.length
             blogData.values</span>=<span style="color: rgba(0, 0, 0, 1)">res.data.lists
          } 
    })</span></pre>
</div>
</div>
<h2>三、效果演</h2>
<div class="GifPlayer css-1isopsn" data-size="normal" data-za-detail-view-path-module="GifItem">
<div class="GifPlayer-icon css-d39tw7">&nbsp;<img src="https://img2024.cnblogs.com/blog/2250775/202505/2250775-20250529094409176-250201485.gif" alt="">
<p>&nbsp;</p>
</div>
</div>
<h2>四、更多可扩展性</h2>
<ul>
<li data-pid="68nWMxAx">搜索智能：模糊匹配、同义词、拼写纠错、词根分析</li>
<li data-pid="BMPS4cM1">实时统计：统计聚合性能强（如 PV、UV、热词排行）</li>
<li data-pid="XlQhf1yM">多语言支持：内置中文、英文、日文等分词器（可使用 IK、jieba&nbsp;等）</li>
<li data-pid="GpSvRCMS">高并发场景：使用 Kafka 或rabbitmq做异步同步</li>
</ul>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.35604854270717595" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-29 09:45">2025-05-28 22:49</span>&nbsp;
<a href="https://www.cnblogs.com/ggtop">小G同学</a>&nbsp;
阅读(<span id="post_view_count">98</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18901426);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18901426', targetLink: 'https://www.cnblogs.com/ggtop/p/18901426', title: 'Golang与Elasticsearch搭配检索运用' })">举报</a>
</div>
        