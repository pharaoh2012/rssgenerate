
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/aqi00/p/18928403" title="发布于 2025-06-15 11:41">
    <span role="heading" aria-level="2">FFmpeg开发笔记（六十六）Windows给FFmpeg集成LC3音频的编码器liblc3</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
《FFmpeg开发实战：从零基础到短视频上线》一书的第五章介绍了FFmpeg如何处理常见的MP3音频和AAC音频，其中MP3格式常用于音乐文件，而AAC格式常用于视频文件。
<p><span id="cke_bm_2538S"> 除此以外，近年又出现了专用于蓝牙音频的LC3格式，其全称是低复杂度通信编解码器（Low Complexity Communications Codec）。2020年9月15日，蓝牙技术联盟正式发布LC3技术规范，所有的蓝牙音频规范将强制使用LC3音频编解码器。<br>
liblc3是一个开源的LC3音频编解码库，同时内置了LC3和LC3 Plus功能，从7.1版本开始的最新FFmpeg源码已经支持LC3音频的编码器liblc3。<br>
接下来以微软的视窗系统为例，介绍如何在Windows环境给FFmpeg集成LC3音频的编码器liblc3，具体的操作步骤说明如下：</span></p>
<h1>一、配置liblc3</h1>
<p>liblc3是一款LC3音频的编解码库。它的源码托管页面在https://github.com/google/liblc3，最新版本是2025年2月发布的liblc3-1.1.3，该版本的源码包下载地址是https://codeload.github.com/google/liblc3/tar.gz/refs/tags/v1.1.3。<br>
liblc3的配置步骤说明如下。<br>
1、安装编译工具meson和ninja<br>
meson和ninja是基于Python语言的编译工具，故需确保Windows系统已经安装了Python3。另外，还要按照《FFmpeg开发实战：从零基础到短视频上线》第一章的“1.3.2 &nbsp;安装依赖的Windows软件”给电脑安装Visual Studio 2022。<br>
接着依次选择Windows开始菜单的“Visual Studio 2022”→“x64 Native Tools Command Prompt for VS 2022”，打开Visual Studio 2022的命令行界面，执行以下命令安装meson和ninja。</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="12" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22code%22%3A%22pip3%20install%20meson%5Cnpip3%20install%20ninja%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="hljs">pip3 install meson
pip3 install ninja</code></pre>
</div>
<p>2、使用meson配置liblc3<br>
先下载最新的liblc3源码，解压下载后的源码包，再从Visual Studio 2022的命令行进入liblc3源码目录：</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="11" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22code%22%3A%22cd%20liblc3-1.1.3%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="hljs">cd liblc3-1.1.3</code></pre>
</div>
<p>然后运行下面命令生成liblc3的VS工程：</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="10" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22code%22%3A%22meson%20setup%20build%20--buildtype%3Drelease%20--backend%3Dvs%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="hljs">meson setup build --buildtype=release --backend=vs</code></pre>
</div>
<p>配置完成后，liblc3源码目录下出现build目录，里面便是meson给liblc3生成的VS工程。</p>
<h1>二、编译liblc3</h1>
<p>打开Visual Studio 2022，在欢迎页面单击右侧的“打开项目或解决方案”，在弹出的文件对话框中选择liblc3-1.1.3\build目录下的lc3.sln。<br>
打开liblc3工程后，依次选择顶部菜单：生成→生成→生成lc3-1，Visual Studio就开始编译lc3模块。编译过程可在Visual Studio界面下方观察，直到编译完成如下图所示。</p>
<p><span class="cke_widget_wrapper cke_widget_inline cke_widget_image cke_image_nocaption cke_widget_selected" data-cke-display-name="图像" data-cke-filter="off" data-cke-widget-id="9" data-cke-widget-wrapper="1"><span class="cke_reset cke_widget_drag_handler_container"><span class="cke_image_resizer" title="点击并拖拽以改变尺寸"><span class="cke_widget_edit_container" title="编辑图片"><img src="https://img2024.cnblogs.com/blog/729938/202506/729938-20250614154541679-959713434.png" alt="" width="486" height="329"></span></span></span></span></p>
<p>此时可在liblc3-1.1.3\build目录下找到src目录，该目录下的lc3.lib和lc3-1.dl就是编译生成的lc3库文件。</p>
<h1>三、安装liblc3</h1>
<p>确保Windows系统已经按照《FFmpeg开发实战：从零基础到短视频上线》第一章“1.3 &nbsp;Windows系统安装FFmpeg”的说明安装配置了MSYS，再按照以下步骤在MSYS环境安装liblc3。<br>
1、在msys64的/usr/local目录下新建liblc3目录，并在该目录下创建lib子目录；<br>
2、把liblc3工程中build\src目录下的lc3.lib和lc3-1.dll两个文件复制到第一步创建的lib目录；<br>
3、在lib目录下创建pkgconfig子目录，并把liblc3工程的build\meson-private\lc3.pc复制到pkgconfig目录；然后打开lc3.pc，把开头一行改成下面这样。</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="8" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22code%22%3A%22prefix%3D%2Fusr%2Flocal%2Fliblc3%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="hljs">prefix=/usr/local/liblc3</code></pre>
</div>
<p>4、把liblc3工程的include目录复制到msys64的/usr/local/liblc3目录；<br>
经过以上步骤操作后的liblc3目录结构如下所示。</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="7" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22code%22%3A%22%2Fusr%2Flocal%2Fliblc3%5Cn%C2%A0%7C---------------%20lib%5Cn%C2%A0%7C%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%7C-----%20lc3.lib%5Cn%C2%A0%7C%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%7C-----%20lc3-1.dll%5Cn%C2%A0%7C%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%7C-----%20pkgconfig%5Cn%C2%A0%7C%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%7C-----%20lc3.pc%5Cn%C2%A0%7C---------------%20include%5Cn%C2%A0%7C%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%7C-----%20lc3.h%5Cn%C2%A0%7C%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%7C-----%20lc3_cpp.h%5Cn%C2%A0%7C%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%C2%A0%20%7C-----%20lc3_private.h%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="hljs">/usr/local/liblc3
&nbsp;|--------------- lib
&nbsp;| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |----- lc3.lib
&nbsp;| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |----- lc3-1.dll
&nbsp;| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |----- pkgconfig
&nbsp;| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |----- lc3.pc
&nbsp;|--------------- include
&nbsp;| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |----- lc3.h
&nbsp;| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |----- lc3_cpp.h
&nbsp;| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |----- lc3_private.h</code></pre>
</div>
<h1>四、编译安装FFmpeg</h1>
<p>先下载最新的FFmpeg源码（版本号需大于等于7.1），再把FFmpeg源码包复制到MSYS环境的/usr/local/src目录下。接着在MSYS控制台执行下面命令解压源码包：</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="6" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22code%22%3A%22cd%20%2Fusr%2Flocal%2Fsrc%5Cnunzip%20ffmpeg-n7.1.1.zip%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="hljs">cd /usr/local/src
unzip ffmpeg-n7.1.1.zip</code></pre>
</div>
<p>确保MSYS环境已经按照《FFmpeg开发实战：从零基础到短视频上线》该书第八章的“8.1.1 &nbsp;给FFmpeg集成x264”和“8.1.5 &nbsp;给FFmpeg集成x265”安装了H.264的编码器libx264和H.265的编码器libx265，也按照该书第十章的“10.1.1 &nbsp;FFmpeg集成SDL”安装了Windows系统的SDL2库，并且按照之前的文章安装了H.266的编码器libvvenc，然后执行下面命令配置FFmpeg的编译环境：</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="5" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22code%22%3A%22cd%20ffmpeg-n7.1.1%5Cnexport%20PKG_CONFIG_PATH%3D%2Fusr%2Flocal%2Fliblc3%2Flib%2Fpkgconfig%3A%24PKG_CONFIG_PATH%5Cn.%2Fconfigure%20--prefix%3D%2Fusr%2Flocal%2Fffmpeg%20--arch%3Dx86_64%20--enable-shared%20--disable-static%20--disable-doc%20--enable-libx264%20--enable-libx265%20--enable-libvvenc%20--enable-liblc3%20--enable-sdl2%20--enable-gpl%20--enable-nonfree%20--enable-iconv%20--enable-zlib%20--cross-prefix%3Dx86_64-w64-mingw32-%20--target-os%3Dmingw32%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="hljs">cd ffmpeg-n7.1.1
export PKG_CONFIG_PATH=/usr/local/liblc3/lib/pkgconfig:$PKG_CONFIG_PATH
./configure --prefix=/usr/local/ffmpeg --arch=x86_64 --enable-shared --disable-static --disable-doc --enable-libx264 --enable-libx265 --enable-libvvenc --enable-liblc3 --enable-sdl2 --enable-gpl --enable-nonfree --enable-iconv --enable-zlib --cross-prefix=x86_64-w64-mingw32- --target-os=mingw32</code></pre>
</div>
<p>配置完毕执行下面命令编译和安装FFmpeg，编译完成的ffmpeg库将会安装到configure指定的/usr/local/ffmpeg目录。</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="4" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22code%22%3A%22make%5Cnmake%20install%5Cncp%20%2Fusr%2Flocal%2Fliblc3%2Flib%2Flc3-1.dll%20%2Fusr%2Flocal%2Fffmpeg%2Fbin%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="hljs">make
make install
cp /usr/local/liblc3/lib/lc3-1.dll /usr/local/ffmpeg/bin</code></pre>
</div>
<h1>五、查看FFmpeg的安装结果</h1>
<p>运行下面命令查看FFmpeg的安装版本：</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="3" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22code%22%3A%22ffmpeg%20-version%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="hljs">ffmpeg -version</code></pre>
</div>
<p>上面命令返回的FFmpeg版本信息如下：</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="2" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22code%22%3A%22ffmpeg%20version%207.1.1%20Copyright%20(c)%202000-2025%20the%20FFmpeg%20developers%5Cnbuilt%20with%20gcc%2012.2.0%20(Rev10%2C%20Built%20by%20MSYS2%20project)%5Cnconfiguration%3A%20--prefix%3D%2Fusr%2Flocal%2Fffmpeg%20--arch%3Dx86_64%20--enable-shared%20--disable-static%20--disable-doc%20--enable-libx264%20--enable-libx265%20--enable-libvvenc%20--enable-liblc3%20--enable-sdl2%20--enable-gpl%20--enable-nonfree%20--enable-iconv%20--enable-zlib%20--cross-prefix%3Dx86_64-w64-mingw32-%20--target-os%3Dmingw32%5Cnlibavutil%20%C2%A0%20%C2%A0%20%C2%A059.%2039.100%20%2F%2059.%2039.100%5Cnlibavcodec%20%C2%A0%20%C2%A0%2061.%2019.101%20%2F%2061.%2019.101%5Cnlibavformat%20%C2%A0%20%C2%A061.%20%C2%A07.100%20%2F%2061.%20%C2%A07.100%5Cnlibavdevice%20%C2%A0%20%C2%A061.%20%C2%A03.100%20%2F%2061.%20%C2%A03.100%5Cnlibavfilter%20%C2%A0%20%C2%A010.%20%C2%A04.100%20%2F%2010.%20%C2%A04.100%5Cnlibswscale%20%C2%A0%20%C2%A0%20%C2%A08.%20%C2%A03.100%20%2F%20%C2%A08.%20%C2%A03.100%5Cnlibswresample%20%C2%A0%205.%20%C2%A03.100%20%2F%20%C2%A05.%20%C2%A03.100%5Cnlibpostproc%20%C2%A0%20%C2%A058.%20%C2%A03.100%20%2F%2058.%20%C2%A03.100%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="hljs">ffmpeg version 7.1.1 Copyright (c) 2000-2025 the FFmpeg developers
built with gcc 12.2.0 (Rev10, Built by MSYS2 project)
configuration: --prefix=/usr/local/ffmpeg --arch=x86_64 --enable-shared --disable-static --disable-doc --enable-libx264 --enable-libx265 --enable-libvvenc --enable-liblc3 --enable-sdl2 --enable-gpl --enable-nonfree --enable-iconv --enable-zlib --cross-prefix=x86_64-w64-mingw32- --target-os=mingw32
libavutil &nbsp; &nbsp; &nbsp;59. 39.100 / 59. 39.100
libavcodec &nbsp; &nbsp; 61. 19.101 / 61. 19.101
libavformat &nbsp; &nbsp;61. &nbsp;7.100 / 61. &nbsp;7.100
libavdevice &nbsp; &nbsp;61. &nbsp;3.100 / 61. &nbsp;3.100
libavfilter &nbsp; &nbsp;10. &nbsp;4.100 / 10. &nbsp;4.100
libswscale &nbsp; &nbsp; &nbsp;8. &nbsp;3.100 / &nbsp;8. &nbsp;3.100
libswresample &nbsp; 5. &nbsp;3.100 / &nbsp;5. &nbsp;3.100
libpostproc &nbsp; &nbsp;58. &nbsp;3.100 / 58. &nbsp;3.100</code></pre>
</div>
<p>根据以上返回的版本信息，可知已安装的FFmpeg版本号为7.1.1，同时configuration这行找到“--enable-liblc3”，说明FFmpeg已经启用了LC3音频的编解码库liblc3。</p>
<p>更多详细的FFmpeg开发知识参见<span class="cke_widget_wrapper cke_widget_inline cke_widget_csdnlink cke_widget_selected" data-cke-display-name="a" data-cke-filter="off" data-cke-widget-id="1" data-cke-widget-wrapper="1"><a class="cke_widget_editable cke_widget_element" title="《FFmpeg开发实战：从零基础到短视频上线》" href="https://item.jd.com/14020415.html" data-cke-enter-mode="2" data-cke-saved-href="https://item.jd.com/14020415.html" data-cke-widget-data="%7B%22url%22%3A%22https%3A%2F%2Fitem.jd.com%2F14020415.html%22%2C%22text%22%3A%22%E3%80%8AFFmpeg%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%88%B0%E7%9F%AD%E8%A7%86%E9%A2%91%E4%B8%8A%E7%BA%BF%E3%80%8B%22%2C%22desc%22%3A%22%22%2C%22icon%22%3A%22%22%2C%22isCard%22%3Afalse%2C%22hasResquest%22%3Atrue%2C%22iconDefault%22%3A%22https%3A%2F%2Fcsdnimg.cn%2Frelease%2Fblog_editor_html%2Frelease2.3.9%2Fckeditor%2Fplugins%2FCsdnLink%2Ficons%2Ficon-default.png%3Ft%3DP4F5%22%2C%22id%22%3A%22boK0sL-1749887055523%22%2C%22classes%22%3Anull%7D" data-cke-widget-editable="text" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-link-icon="https://csdnimg.cn/release/blog_editor_html/release2.3.9/ckeditor/plugins/CsdnLink/icons/icon-default.png?t=P4F5" data-link-title="《FFmpeg开发实战：从零基础到短视频上线》" data-widget="csdnlink" rel="noopener nofollow">《FFmpeg开发实战：从零基础到短视频上线》</a>一书。</span></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-15 11:42">2025-06-15 11:41</span>&nbsp;
<a href="https://www.cnblogs.com/aqi00">aqi00</a>&nbsp;
阅读(<span id="post_view_count">6</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18928403);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18928403', targetLink: 'https://www.cnblogs.com/aqi00/p/18928403', title: 'FFmpeg开发笔记（六十六）Windows给FFmpeg集成LC3音频的编码器liblc3' })">举报</a>
</div>
        