
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/charlee44/p/18909212" title="发布于 2025-06-03 22:09">
    <span role="heading" aria-level="2">解决Vditor加载Markdown网页很慢的问题(Vite+JS+Vditor)</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        引入配置文件vite.config.js实现拷贝本地资源到特定目录，继而通过设置域内CDN的方式解决Vditor加载Markdown网页很慢的问题。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="1-引言">1. 引言</h1>
<p>在上一篇文章<a href="https://charlee44.com/post.html?id=4e2dcb7eb0804019b5f1caa65f4531b6" target="_blank" rel="noopener nofollow">《使用Vditor将Markdown文档渲染成网页(Vite+JS+Vditor)》</a>中，详细介绍了通过Vditor将Markdown格式文档渲染成Web网页的过程，并且实现了图片格式居中以及图片源更换的功能。不过，笔者发现在加载这个渲染Markdown网页的时候特别慢，本文就总结一下这个问题。</p>
<h1 id="2-详论">2. 详论</h1>
<h2 id="21-解决方案">2.1 解决方案</h2>
<p>经过笔者的调试发现，性能损耗主要是Vditor使用的一个依赖库文件lute.min.js加载很慢，这个文件大概有3.6M大小，并且放在了远端在线资源上。lute.min.js是一个Markdown引擎，Vditor默认是将其放到CDN上，具体使用的就是Cloudflare（传说中的赛博活佛😆）。理论上就是因为资源文件比较大才需要使用CDN，但是因为一些原因Cloudflare在国内的连接速度并不快。所以没办法，这里还是得将这些资源地址改回成域内，除非你有自己的CDN。</p>
<p>在Vditor官方论坛上找了类似的问题<sup class="footnote-ref"><a href="#fn1" id="fnref1" rel="noopener nofollow">[1]</a></sup>，回帖指出需要按照官方的开发指南<sup class="footnote-ref"><a href="#fn2" id="fnref2" rel="noopener nofollow">[2]</a></sup>进行CDN参数配置，如下所示：</p>
<p><img src="./1.png" alt="Vditor官方的开发指南中的CDN参数配置" loading="lazy"></p>
<p>具体来说，就是在<code>Vditor.preview</code>接口中增加cdn的配置：</p>
<pre><code class="language-js">Vditor.preview(document.getElementById("md-content"), demoMd, {
    cdn: window.location.origin,    //配置CDN
    markdown: {
    toc: false,
    mark: true, //==高亮显示==
    footnotes: true, //脚注
    autoSpace: true, //自动空格，适合中英文混合排版
    },
    math: {
    engine: "KaTeX", //支持latex公式
    inlineDigit: true, //内联公式可以接数字
    },
    hljs: {
    style: "github", //代码段样式
    lineNumber: true, //是否显示行号
    },
    anchor: 2, // 为标题添加锚点 0：不渲染；1：渲染于标题前；2：渲染于标题后
    lang: "zh_CN", //中文
    theme: {
    current: "light", //light,dark,light,wechat
    },
    transform: (html) =&gt; {
    // 使用正则表达式替换图片路径，并添加居中样式及题注
    return html.replace(
        /&lt;img\s+[^&gt;]*src="\.\/([^"]+)\.([a-zA-Z0-9]+)"\s*alt="([^"]*)"[^&gt;]*&gt;/g,
        (match, p1, p2, altText) =&gt; {
        // const newSrc = `${backendUrl}/blogs/resources/images/${postId}/${p1}.${p2}`;
        const newSrc = `${p1}.${p2}`;
        const imgWithCaption = `
                &lt;div style="text-align: center;"&gt;
                    &lt;img src="${newSrc}" class="center-image" alt="${altText}"&gt;
                    &lt;p class="caption"&gt;${altText}&lt;/p&gt;
                &lt;/div&gt;
                `;
        return imgWithCaption;
        }
    );
    },
});
</code></pre>
<p>同时，还需要进行项目的配置，让这个前端项目能找到托管的CDN资源。根据开发指南的说明，托管的CDN资源不仅仅只有lute.min.js，还有其他资源文件，因此需要将这些文件都拷贝到特定的目录。那么就需要修改项目的配置，增加一个执行拷贝任务的脚本。</p>
<h2 id="22-开发环境">2.2 开发环境</h2>
<p>不过由于拷贝文件的指令在不同的平台终端是不同的，因此最好引入一个中间件帮助统一一下指令的行为。这里使用Shx，它可以帮助我们在npm环境中跨平台执行类似于Unix样式的指令。在终端安装Shx：</p>
<pre><code class="language-shell">npm install shx --save-dev
</code></pre>
<p>修改package.json：</p>
<pre><code class="language-json">{
  "name": "my-native-js-app",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "copy:vditor": "shx mkdir -p dist &amp;&amp; shx cp -r node_modules/vditor/dist/* dist",
    "dev": "vite",
    "build": "vite build --emptyOutDir",
    "preview": "vite preview"
  },
  "devDependencies": {
    "shx": "^0.4.0",
    "vite": "^6.3.5"
  },
  "dependencies": {
    "handlebars": "^4.7.8",
    "vditor": "^3.11.0"
  }
}
</code></pre>
<p>增加的脚本<code>copy:vditor</code>具体就是指令：</p>
<pre><code class="language-shell">npm run copy:vditor
</code></pre>
<p>具体意思就是创建目录<code>dist</code>，然后将目录<code>node_modules/vditor/dist</code>中的所有文件复制到这个<code>dist</code>目录中。然后正常执行<code>dev</code>指令：</p>
<pre><code class="language-shell">npm run dev
</code></pre>
<p>理论上<code>copy:vditor</code>指令是可以合并到<code>dev</code>指令中的，也就是每次<code>dev</code>之前都执行<code>copy:vditor</code>。不过笔者还是觉得将其作为一次性命令更好，可以让程序启动得更快。</p>
<h2 id="23-发布环境">2.3 发布环境</h2>
<p>我们知道，如果要正式发布项目的话，就需要先进行构建：</p>
<pre><code class="language-shell">npm run build
</code></pre>
<p>然后再发布：</p>
<pre><code class="language-shell">npm run preview
</code></pre>
<p>因此拷贝资源操作的脚本可以合并到<code>build</code>这一步中。这里，笔者介绍另外一种配置项目方法，就是使用Vite的配置文件vite.config.js。package.json是Web项目的基础配置文件；vite.config.js则是Vite的配置文件，用于自定义Vite的行为：例如配置服务器端口、代理，插件支持以及环境变量等等。这里就在项目根目录新建一个vite.config.js文件，内容如下：</p>
<pre><code class="language-js">// vite.config.js
import { defineConfig } from "vite";
import copy from "rollup-plugin-copy";

export default defineConfig(() =&gt; {
  return {
    server: {
      host: "0.0.0.0", // 绑定所有网络接口
      port: 8000, // 自定义开发服务器端口
      open: true, // 自动打开浏览器
    },
    build: {
      rollupOptions: {
        plugins: [
          copy({
            targets: [{ src: "node_modules/vditor/dist/*", dest: "dist/dist" }],
            hook: "writeBundle", // 在 writeBundle 阶段执行复制操作
          }),
        ],
      },
    },
    preview: {
      host: "0.0.0.0", // 绑定所有网络接口
      port: 8001, // 预览服务器端口
      open: true, // 自动打开浏览器
    },
  };
});
</code></pre>
<p>在这里的配置中，<code>server</code>字段和<code>preview</code>字段分别定义了开发模式<code>dev</code>和发布模式<code>preview</code>的网络地址和端口，并且设置执行完成后自动打开默认浏览器。<code>build</code>字段则配置在打包（rollup）代码的时候，通过插件rollup-plugin-copy执行拷贝操作，将目录<code>node_modules/vditor/dist</code>下的所有文件拷贝到<code>dist/dist</code>目录下。当然，插件rollup-plugin-copy需要进行安装：</p>
<pre><code class="language-shell">npm install rollup-plugin-copy --save-dev
</code></pre>
<h1 id="3-结语">3. 结语</h1>
<p>笔者这里开发模式和发布模式使用了两种不同的项目配置方法，来拷贝本地资源到特定目录。通过设置域内CDN，解决Vditor加载Markdown网页很慢的问题。理论上应该有更加优雅的方式，但是笔者这里是够用了，暂时不进行进一步研究。其实项目构建配置的问题没必要特意去学，首先还是要思考如何更方便地构建项目，自然而然就会去尝试解决方案，慢慢就学会项目构建配置的技能了。</p>
<p><a href="https://download.csdn.net/download/charlee44/90950351" target="_blank" rel="noopener nofollow">实现代码</a></p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://ld246.com/article/1702546028008" target="_blank" rel="noopener nofollow">最近使用 vditor，遇到一个问题，请求 lute.min.js 的 cdn 总是请求不通导致 markdown 用不了怎么处理</a> <a href="#fnref1" class="footnote-backref" rel="noopener nofollow">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://ld246.com/article/1549638745630" target="_blank" rel="noopener nofollow">Vditor 一款浏览器端的 Markdown 编辑器，支持所见即所得（富文本）、即时渲染（类似 Typora）和分屏预览模式</a> <a href="#fnref2" class="footnote-backref" rel="noopener nofollow">↩︎</a></p>
</li>
</ol>
</section>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0021006075069444443" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-06-03 22:14">2025-06-03 22:09</span>&nbsp;
<a href="https://www.cnblogs.com/charlee44">charlee44</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18909212);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18909212', targetLink: 'https://www.cnblogs.com/charlee44/p/18909212', title: '解决Vditor加载Markdown网页很慢的问题(Vite+JS+Vditor)' })">举报</a>
</div>
        