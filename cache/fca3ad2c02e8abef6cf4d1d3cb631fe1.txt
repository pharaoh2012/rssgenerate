
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/MrVolleyball/p/18635077" title="发布于 2024-12-27 14:19">
    <span role="heading" aria-level="2">循规蹈矩--从零开始建设k8s监控（一）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>监控k8s集群，目前主流就是使用prometheus以及其周围的生态，本文开始介绍怎么一步步完成k8s监控的建设</p>
<h2 id="环境准备">环境准备</h2>
<table>
<thead>
<tr>
<th>组件</th>
<th>版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>操作系统</td>
<td>Ubuntu 22.04.4 LTS</td>
</tr>
<tr>
<td>minikube</td>
<td>v1.30.1</td>
</tr>
<tr>
<td>docker</td>
<td>24.0.7</td>
</tr>
<tr>
<td>prometheus</td>
<td>v2.54.1</td>
</tr>
<tr>
<td>kube-state-metrics</td>
<td>v2.13.0</td>
</tr>
<tr>
<td>node-exporter</td>
<td>v1.8.2</td>
</tr>
</tbody>
</table>
<h2 id="下载编排文件">下载编排文件</h2>
<p>本文所有的编排文件，<a href="https://github.com/wilsonchai8/installations/tree/main/prometheus" target="_blank" rel="noopener nofollow">都在这里</a></p>
<pre><code>▶ cd /tmp &amp;&amp; git clone git@github.com:wilsonchai8/installations.git &amp;&amp; cd installations/prometheus
</code></pre>
<h2 id="使用minikube搭建k8s测试环境">使用minikube搭建k8s测试环境</h2>
<p>1）下载 <a href="https://minikube.sigs.k8s.io/docs/start/?arch=%2Flinux%2Fx86-64%2Fstable%2Fbinary+download" target="_blank" rel="noopener nofollow">minikube</a></p>
<p>2）启动，<code>minikube start</code></p>
<pre><code>▶ minikube start
</code></pre>
<pre><code>▶ docker ps | grep minikube
db877d660750   kicbase/stable:v0.0.39     "/usr/local/bin/entr…"   37 seconds ago   Up 33 seconds  127.0.0.1:32782-&gt;22/tcp, 127.0.0.1:32781-&gt;2376/tcp, 127.0.0.1:32780-&gt;5000/tcp, 127.0.0.1:32779-&gt;8443/tcp, 127.0.0.1:32778-&gt;32443/tcp   minikube
</code></pre>
<p>3）检查k8s是否正常工作</p>
<pre><code>▶ kubectl get node
NAME       STATUS   ROLES           AGE     VERSION
minikube   Ready    control-plane   4m41s   v1.26.3
</code></pre>
<p>这里需要注意一下，由于现在镜像地址全部被墙了，大家可以尝试这个方法解决</p>
<h2 id="安装prometheus">安装prometheus</h2>
<p>1）创建命名空间</p>
<pre><code>▶ kubectl create ns prometheus
namespace/prometheus created
</code></pre>
<p>2）启动</p>
<pre><code>▶ cd /tmp/installations/prometheus
▶ kubectl apply -f prometheus.yaml
</code></pre>
<p>检查是否启动</p>
<pre><code>▶ kubectl -n prometheus get pod -owide
NAME                                 READY   STATUS    RESTARTS   AGE     IP           NODE       NOMINATED NODE   READINESS GATES
prometheus-deploy-8495dfd557-xcwnp   1/1     Running   0          2m52s   10.244.0.3   minikube   &lt;none&gt;           &lt;none&gt;

</code></pre>
<p>这里需要注意的是configmap的配置，由于是一步一步的演示，所以configmap的文件内容是一步一步的充实进去的，后面会慢慢修改</p>
<pre><code>apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-cm
  labels:
    name: prometheus-cm
  namespace: prometheus
data:
  prometheus.yml: |-
    global:
      scrape_interval: 5s
      evaluation_interval: 5s

    alerting:
      alertmanagers:
        - static_configs:
            - targets: ['alertmanager:9093']

    rule_files:
      - /etc/prometheus/*.rules

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
        - targets: ['localhost:9090']
</code></pre>
<p>3）访问页面服务</p>
<p>查看service配置，nodeport的端口是32648</p>
<pre><code>▶ kubectl -n prometheus get svc
NAME                 TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
prometheus-service   NodePort   10.99.231.160   &lt;none&gt;        9090:32648/TCP   12m
▶ kubectl get node -owide
NAME       STATUS   ROLES           AGE    VERSION   INTERNAL-IP    EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION     CONTAINER-RUNTIME
minikube   Ready    control-plane   4d5h   v1.26.3   192.168.49.2   &lt;none&gt;        Ubuntu 20.04.5 LTS   6.8.0-45-generic   docker://23.0.2
</code></pre>
<p>访问 <code>192.168.49.2:32648</code></p>
<p><img src="https://img2024.cnblogs.com/blog/1416773/202412/1416773-20241227105049435-1299302951.png" alt="" loading="lazy"></p>
<p>至此，prometheus已经安装完成了，监控的框架算是搭建起来了，但是没有监控指标，这并不是一个完整的监控系统，我们需要prometheus监控k8s的基础指标</p>
<h2 id="安装k8s-exporter">安装k8s exporter</h2>
<p>简单来说，exporter就是提供监控数据的组件，prometheus定期到exporter采集数据。而即将介绍的 <code>kube-state-metrics</code> ，就是专门用来提供k8s相关数据的exporter</p>
<p>而安装exporter也是非常简单的，exporter也是一个组件服务，只需要把它编排进k8s即可</p>
<pre><code>▶ cd /tmp/installations/prometheus
▶ kubectl apply -f kube-state-metrics.yaml
</code></pre>
<p>查看exporter是否启动</p>
<pre><code>▶ kubectl -n kube-system get pod | grep kube-state-metrics
kube-state-metrics-6cd66dbcd8-4mqh4   1/1     Running   0             63s
</code></pre>
<p>exporter安装完成，需要告诉prometheus去采集新的exporter，修改prometheus configmap</p>
<pre><code>apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-cm
  labels:
    name: prometheus-cm
  namespace: prometheus
data:
  prometheus.yml: |-
    global:
      scrape_interval: 5s
      evaluation_interval: 5s

    alerting:
      alertmanagers:
        - static_configs:
            - targets: ['alertmanager:9093']

    rule_files:
      - /etc/prometheus/*.rules

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
        - targets: ['localhost:9090']

# 从这里是新加的
      - job_name: "prometheus-kube-state-metrics"
        static_configs:
          - targets: ["kube-state-metrics.kube-system:8080"]
</code></pre>
<p>修改了configmap之后，需要重启prometheus</p>
<pre><code>▶ kubectl -n prometheus rollout restart deploy prometheus-deploy

</code></pre>
<p>重新打开页面之后查看，有新的监控指标被采集上来了</p>
<p><img src="https://img2024.cnblogs.com/blog/1416773/202412/1416773-20241227105304193-1613087389.png" alt="" loading="lazy"></p>
<h2 id="安装node-exporter">安装node exporter</h2>
<p>需要注意的是，<code>kube-state-metrics</code> 并没有关注node相关的监控数据，这时候又有一个exporter需要上场了，那就是<code>node-exporter</code></p>
<pre><code>▶ cd /tmp/installations/prometheus
▶ kubectl apply -f node-exporter.yaml
</code></pre>
<p>查看exporter是否启动成功</p>
<pre><code>▶ kubectl -n prometheus get pod | grep node-exporter
node-exporter-q8rmq                  1/1     Running   0          75s

</code></pre>
<p><code>node-exporter</code>的工作方式与<code>kube-state-metrics</code>不一样，<code>kube-state-metrics</code>是借助k8s的服务发现能力，可以知道k8s集群内部到底有多少pod、deploy、service等资源的状态</p>
<p><code>node-exporter</code>也是部署在k8s内部，通过daemonset的方式，在每一个节点启动一个采集服务，然后暴露api等待prometheus来采集数据，但是<code>node-exporter</code>自身并没有服务发现能力，所以在节点扩容或者缩容的时候，prometheus并不知道当前有多少节点需要采集。虽然prometheus不知道，但是k8s确知道当前集群有多少节点，所以这里<code>node-exporter</code>也需要借用k8s得服务发现的能力来自动发现当前的节点数</p>
<p>修改prometheus configmap</p>
<pre><code>apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-cm
  labels:
    name: prometheus-cm
  namespace: prometheus
data:
  prometheus.yml: |-
    global:
      scrape_interval: 5s
      evaluation_interval: 5s

    alerting:
      alertmanagers:
        - static_configs:
            - targets: ['alertmanager:9093']

    rule_files:
      - /etc/prometheus/*.rules

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
        - targets: ['localhost:9090']

      - job_name: "prometheus-kube-state-metrics"
        static_configs:
          - targets: ["kube-state-metrics.kube-system:8080"]

# 从这里是新加的
      - job_name: 'kubernetes-nodes'
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - source_labels: [__address__]
          regex: '(.*):10250'
          replacement: '${1}:9100'
          target_label: __address__
          action: replace
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
</code></pre>
<p>修改了configmap之后，需要重启prometheus</p>
<pre><code>▶ kubectl -n prometheus rollout restart deploy prometheus-deploy
</code></pre>
<p>这里已经可以看到node相关的指标了</p>
<p><img src="https://img2024.cnblogs.com/blog/1416773/202412/1416773-20241227105330603-1568833611.png" alt="" loading="lazy"></p>
<p>切到<code>Status --&gt; Targets</code>，可以看到通过k8s服务发现的节点</p>
<p><img src="https://img2024.cnblogs.com/blog/1416773/202412/1416773-20241227105348013-1187310574.png" alt="" loading="lazy"></p>
<p>为了验证服务发现，我们新加一个节点</p>
<pre><code>▶ minikube node add
</code></pre>
<p>检查新加节点</p>
<pre><code>▶ kubectl get node
NAME           STATUS   ROLES           AGE    VERSION
minikube       Ready    control-plane   5d3h   v1.26.3
minikube-m02   Ready    &lt;none&gt;          70s    v1.26.3
</code></pre>
<p>再去页面检查，已经自动发现了第二个节点</p>
<p><img src="https://img2024.cnblogs.com/blog/1416773/202412/1416773-20241227105405113-1981165384.png" alt="" loading="lazy"></p>
<p>至此，一个可以监控k8s各种资源的监控系统已经初步达成</p>
<h2 id="注意事项">注意事项</h2>
<p>由于本文是演示一步一步安装prometheus以及相关组件，所以配置文件也是一步一步累加出来的，最终呈现在仓库的配置文件是最终版，可以直接将编排文件fully apply，从而跳过这些调试步骤</p>
<h2 id="联系我">联系我</h2>
<ul>
<li>联系我，做深入的交流</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/1416773/202411/1416773-20241121135740959-1907948957.png#" alt="" width="500" height="200" loading="lazy"></p>
<hr>
<p>至此，本文结束<br>
在下才疏学浅，有撒汤漏水的，请各位不吝赐教...</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/MrVolleyball/" target="_blank">it排球君</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/MrVolleyball/p/18635077" target="_blank">https://www.cnblogs.com/MrVolleyball/p/18635077</a></p>
<div>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须在文章页面给出原文连接，否则保留追究法律责任的权利。 </div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.08325712854513889" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-27 14:19">2024-12-27 14:19</span>&nbsp;
<a href="https://www.cnblogs.com/MrVolleyball">it排球君</a>&nbsp;
阅读(<span id="post_view_count">30</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18635077" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18635077);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18635077', targetLink: 'https://www.cnblogs.com/MrVolleyball/p/18635077', title: '循规蹈矩--从零开始建设k8s监控（一）' })">举报</a>
</div>
        