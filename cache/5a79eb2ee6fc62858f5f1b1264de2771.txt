
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Evsward/p/18786029/SimpleTorch" title="发布于 2025-03-21 22:55">
    <span role="heading" aria-level="2">从零开始：基于 PyTorch 的图像分类模型</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p><strong>摘要</strong>：本文详细记录了使用 PyTorch 从零搭建一个图像分类模型的过程，涵盖卷积神经网络（CNN）、数据预处理、模型设计、训练调试与优化。通过对 CIFAR-10 数据集的处理实践，结合经典文献和 2025 年最新研究趋势，深入探讨了技术细节，并辅以完整实践源码的过程和结论。我选择用 PyTorch 搭建图像分类模型，既源于对深度学习的兴趣，也因为它在 2025 年的技术社区中热度不减。通过这次实践，我希望掌握 CNN 的核心原理，同时记录过程，为其他初学者提供参考。</p>
<p><strong>关键字</strong>：PyTorch、图像分类、CNN、深度学习、模型优化、CIFAR-10、调试经验、前沿趋势</p>
</blockquote>
<h1 id="引言">引言</h1>
<h2 id="背景介绍">背景介绍</h2>
<p>图像分类是计算机视觉的核心任务，广泛应用于自动驾驶、医疗影像分析和人脸识别等领域。</p>
<p>深度学习，特别是卷积神经网络（CNN），极大推动了这一技术的发展。2012年，AlexNet在ImageNet挑战赛中大幅降低分类错误率，标志着深度学习时代的开端。</p>
<p>此后，模型架构从 ResNet 进化到 VisionTransformer（ViT），性能不断提升。到2025年，硬件算力增强和PyTorch 2.x 等框架的优化（如<code>torch.compile()</code>），让图像分类任务更加高效。在实践中，以CIFAR-10等数据集为例，一个简单CNN在现代GPU上几分钟即可训练完成，展现了技术的进步。</p>
<h2 id="本文目标与结构">本文目标与结构</h2>
<ul>
<li>目标：搭建并优化一个 CNN，完成 CIFAR-10 分类任务。</li>
<li>结构：理论讲解 → 源码实现 → 调试分析 → 优化与展望。</li>
</ul>
<h1 id="卷积神经网络cnn">卷积神经网络（CNN）</h1>
<h2 id="为何需要-cnn">为何需要 CNN？</h2>
<p>传统人工神经网络（ANN）在图像处理上参数量巨大，计算成本高。CNN 通过<strong>局部感受野</strong>、<strong>权重共享</strong>和<strong>层级特征提取</strong>（<em>本文只入门，这三个都不涉及</em>），减少计算量并提升模型能力。</p>
<p>CNN 发展始于 <strong>LeNet-5（1998）</strong>，后续有 <strong>AlexNet（2012）</strong>、<strong>VGG（2014）</strong>、<strong>ResNet（2015）</strong>，极大推动计算机视觉进步。</p>
<blockquote>
<p>卷积神经网络（Convolutional Neural Network, CNN）是深度学习中处理图像任务的基石，其核心在于<strong>通过卷积操作提取空间特征、优化参数，并逐步构建高级语义表示。</strong></p>
</blockquote>
<h2 id="cnn-的核心组成">CNN 的核心组成</h2>
<h3 id="1卷积层convolutional-layer--特征提取的智能滤镜">1、卷积层（Convolutional Layer）  ：特征提取的“智能滤镜”</h3>
<p>CNN 的核心是<strong>卷积操作</strong>，通过一个小的滑动窗口（卷积核, kernel）在输入图像上扫描，计算局部区域的加权和，提取边缘、纹理等低级特征。</p>
<p>卷积包括填充、步幅等参数，还包括和全连接层一样的偏置参数，卷积运算相当于图像处理中的“滤波器运算”。</p>
<p><strong>卷积运算会先对输入数据进行初始化准备。</strong>数据除了高、长方向之外，还需要处理通道方向，形成三维数据<code>(Channel, Height, Width)</code>。再结合批处理参数，按照<code>(batch_num, channel, height, width)</code>顺序保存数据，形成四维数据。</p>
<p><strong>卷积运算通过填充、步幅对数据进行再加工。</strong>填充即向输入数据的周围填入0，主要是为了调整输出的大小。避免因每次卷积运算缩小的数据空间最终导致卷积运算不可用的情况。步幅是卷积运算每一次运算的数据位置间隔，通过步幅计算出输出数据矩阵大小。</p>
<p><strong>卷积运算通过卷积核完成数据运算。</strong>卷积核即滤波器，是一种“滤镜”，通过它来完成指定运算目标（识别、聚焦等）。</p>
<p><strong>卷积运算通过偏置函数完成数据输出。</strong>偏置是在数据输出前针对数据的统一处理，以适配特定场景（整体调亮等）。</p>
<p><strong>简单来说，卷积就像用一个“放大镜”在图像上滑动，每次聚焦一小块，找出关键线索。</strong></p>
<blockquote>
<p><strong>卷积操作</strong>类似于“<strong>盲人摸象</strong>”的工作过程，举个例子：假设你看一张猫的照片，第一次卷积可能找到耳朵的边缘，第二次找到毛发的纹理，最终拼凑出“猫”的完整轮廓。这种层层递进的过程，正是卷积的魅力。</p>
</blockquote>
<h4 id="输入数据和卷积核">①输入数据和卷积核</h4>
<p>假设输入图像是一个 4x4 的灰度矩阵（单通道），卷积核为 3x3，步幅为 1，无填充。</p>
<ul>
<li><em><strong>输入矩阵</strong></em></li>
</ul>
<p></p><div class="math display">\[I = \begin{bmatrix}
1 &amp; 2 &amp; 3 &amp; 0 \\
0 &amp; 1 &amp; 2 &amp; 3 \\
3 &amp; 0 &amp; 1 &amp; 2 \\
2 &amp; 3 &amp; 0 &amp; 1
\end{bmatrix}
\]</div><p></p><ul>
<li><em><strong>卷积核（滤波器）</strong></em></li>
</ul>
<p></p><div class="math display">\[K = \begin{bmatrix}
2 &amp; 0 &amp; 1 \\
0 &amp; 1 &amp; 2 \\
1 &amp; 0 &amp; 2 \end{bmatrix}
\]</div><p></p><h4 id="计算过程可忽略">②计算过程（可忽略）</h4>
<p><em><strong>卷积运算通过滑动卷积核，在输入矩阵上逐块计算点积。</strong></em></p>
<p>输出特征图大小为2x2，<em><strong><code>I[高]-K[高]+步幅  *  I[宽]-K[宽]+步幅</code></strong></em> ：</p>
<p></p><div class="math display">\[(4-3+1) \times (4-3+1) = 2 \times 2
\]</div><p></p><ul>
<li><strong>公式：</strong>对于输入<em><strong><code>I</code></strong></em>和卷积核<em><strong><code>K</code></strong></em>，输出<em><strong><code>O[i,j]</code></strong></em>为：</li>
</ul>
<p></p><div class="math display">\[O[i,j]= 
m
∑
​
  
n
∑
​
 I[i+m,j+n]⋅K[m,n]
\]</div><p></p><h4 id="手动计算">③手动计算</h4>
<ol>
<li>左上角 2+0+3+0+1+4+3+0+2=15</li>
<li>右上角 4+0+0+0+2+6+0+0+4=16</li>
<li>左下角 0+0+2+0+0+2+2+0+0=6</li>
<li>右下角 2+0+3+0+1+4+3+0+2=15</li>
</ol>
<p>输出特征图为：</p>
<p></p><div class="math display">\[O = \begin{bmatrix}
15 &amp; 16 \\
6 &amp; 15
\end{bmatrix}
\]</div><p></p><h3 id="2池化层pooling-layer--降维与聚焦关键信息">2、池化层（Pooling Layer）  ：降维与聚焦关键信息</h3>
<p>池化是缩小高、长方向上的空间的运算。用于压缩特征图，减少计算量，同时保留重要信息。</p>
<p>LeCun 的LeNet-5引入了平均池化（Average Pooling）：计算目标区域的平均值。</p>
<p>AlexNet 则普及了最大池化（Max Pooling）：计算目标区域的最大值。</p>
<blockquote>
<p>想象你在看一幅画，池化就像眯起眼睛，只关注最亮的亮点（最大值），忽略细枝末节。这样既降低了分辨率，又让网络更关注显著特征，比如猫脸上的胡须而非背景噪声。</p>
</blockquote>
<p>池化的现代应用更灵活，也体现了CNN的进化，例如全局平均池化（Global Average Pooling）常用于替代全连接层，提升模型泛化能力。</p>
<h4 id="最大池化示例22-池化步幅-2">最大池化示例（2×2 池化，步幅 2）：</h4>
<blockquote>
<p>将4x4的输入数据按照步幅2计算，输出为2x2，分为4个区域：</p>
<ol>
<li>左上：[1,2,5,6]，最大值6</li>
<li>右上：[2,4,8,7]，最大值8</li>
<li>左下：[9,10,13,15]，最大值15</li>
<li>右下：[12,11,14,16]，最大值16</li>
</ol>
<p>如下图所示：</p>
</blockquote>
<p></p><div class="math display">\[\begin{bmatrix}
1 &amp; 3 &amp; 2 &amp; 4 \\
5 &amp; 6 &amp; 8 &amp; 7 \\
9 &amp; 10 &amp; 12 &amp; 11 \\
13 &amp; 15 &amp; 14 &amp; 16
\end{bmatrix}
\Rightarrow
\begin{bmatrix}
6 &amp; 8 \\
15 &amp; 16
\end{bmatrix}
\]</div><p></p><blockquote>
<p>以上为Max池化，如果是Average池化，则改为平均值即可。不赘述。</p>
</blockquote>
<h3 id="3激活函数activation-function--赋予非线性表达力">3、激活函数（Activation Function）  ：赋予非线性表达力</h3>
<p>卷积和池化后的特征需要通过激活函数（Activation Function）引入非线性，否则网络只能学到线性变换。</p>
<p><strong>ReLU</strong> 是 CNN 最常用的非线性变换：</p>
<p></p><div class="math display">\[f(x) = \max(0, x)
\]</div><p></p><p>它计算高效，并避免梯度消失问题。</p>
<blockquote>
<p>ReLU 的作用像个“开关”：负值关掉，正值保留，让网络学会更复杂的模式，比如区分猫和狗的不同轮廓。</p>
<p>现代还有 Leaky ReLU 和 Swish 等变种，但 ReLU 仍是理解 CNN 非线性的起点。举例来说，ReLU 就像在筛选线索时，只保留“有用的证据”，丢弃无关信息。</p>
</blockquote>
<h3 id="4全连接层fully-connected-layer-fc--特征整合与分类">4、全连接层（Fully Connected Layer, FC）  ：特征整合与分类</h3>
<p>在经过卷积和池化后，CNN 将特征展平（Flatten）并输入全连接层，用于分类或回归任务。</p>
<blockquote>
<p>全连接层就像大脑的“决策中心”，综合所有线索，给出最终判断：这张图是“猫”还是“狗”？</p>
<p>不过，现代趋势逐渐减少全连接层依赖，例如 ResNet（2015）用全局池化简化输出，减轻过拟合风险。</p>
</blockquote>
<h2 id="cnn-在计算机视觉中的应用">CNN 在计算机视觉中的应用</h2>
<ul>
<li><strong>图像分类</strong>（AlexNet、ResNet）</li>
<li><strong>目标检测</strong>（YOLO、Faster R-CNN）</li>
<li><strong>语义分割</strong>（U-Net、DeepLab）</li>
<li><strong>医学影像分析</strong>（CT 诊断）</li>
</ul>
<h1 id="实践环境与准备">实践环境与准备</h1>
<h2 id="工具与依赖">工具与依赖</h2>
<ul>
<li>Python 3.10、PyTorch 2.1、torchvision 0.16。</li>
<li>硬件：NVIDIA RTX 3060 GPU，16GB RAM。</li>
</ul>
<h2 id="anaconda-环境配置">Anaconda 环境配置</h2>
<h3 id="1-安装-anaconda">1. 安装 Anaconda</h3>
<p>使用 Homebrew 安装 Anaconda：</p>
<pre><code class="language-bash">brew install --cask anaconda
</code></pre>
<h3 id="2-初始化-conda">2. 初始化 Conda</h3>
<p>将 conda 添加到 PATH：</p>
<pre><code class="language-bash">echo 'export PATH="/opt/homebrew/anaconda3/bin:$PATH"' &gt;&gt; ~/.zshrc
</code></pre>
<p>初始化 conda 以在 zsh 中使用：</p>
<pre><code class="language-bash">conda init zsh
</code></pre>
<p>重新加载 shell 配置：</p>
<pre><code class="language-bash">source ~/.zshrc
</code></pre>
<h3 id="3-创建和配置项目环境">3. 创建和配置项目环境</h3>
<p>创建新的 conda 环境：</p>
<pre><code class="language-bash">conda create -n simpletorch python=3.9 -y
</code></pre>
<p>激活环境：</p>
<pre><code class="language-bash">conda activate simpletorch
</code></pre>
<p>安装项目依赖：</p>
<pre><code class="language-bash">pip install -r requirements.txt
</code></pre>
<h3 id="4-验证环境">4. 验证环境</h3>
<p>检查 Python 版本和已安装的包：</p>
<pre><code class="language-bash">python --version
pip list | grep -E "torch|numpy|matplotlib"
</code></pre>
<h3 id="5-常用命令">5. 常用命令</h3>
<ul>
<li>激活环境：<code>conda activate simpletorch</code></li>
<li>退出环境：<code>conda deactivate</code></li>
<li>查看所有环境：<code>conda env list</code></li>
<li>删除环境：<code>conda env remove -n simpletorch</code></li>
</ul>
<h3 id="6-环境信息">6. 环境信息</h3>
<ul>
<li>环境名称：simpletorch</li>
<li>Python 版本：3.9.21</li>
<li>主要包版本：
<ul>
<li>PyTorch 2.6.0</li>
<li>torchvision 0.21.0</li>
<li>NumPy 2.0.2</li>
<li>Matplotlib 3.9.4</li>
</ul>
</li>
</ul>
<h2 id="数据集选择与加载">数据集选择与加载</h2>
<h3 id="cifar-10-数据集概述">CIFAR-10 数据集概述</h3>
<ul>
<li>数据集大小：50,000 张图片</li>
<li>图片大小：3x32x32（RGB图像）</li>
<li>类别数：10个（飞机、汽车、鸟、猫、鹿、狗、青蛙、马、船、卡车）</li>
</ul>
<h3 id="数据文件内容">数据文件内容</h3>
<p>data目录下的文件是 CIFAR-10 数据集文件，它们是在运行 main.py 或 show_dataset.py 时通过 torchvision.datasets.CIFAR10 自动下载的。具体来说，这些文件来自：</p>
<ul>
<li>官方下载地址：<a href="https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz" target="_blank" rel="noopener nofollow">https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz</a></li>
<li>当代码执行到这一行时：</li>
</ul>
<pre><code class="language-python">trainset = datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
</code></pre>
<ul>
<li>
<p><code>root='./data'</code> 指定下载到当前目录下的 data 文件夹</p>
</li>
<li>
<p><code>download=True</code> 表示如果数据不存在就自动下载</p>
</li>
<li>
<p>下载的文件会被自动解压到 <code>data/cifar-10-batches-py/</code> 目录下</p>
</li>
</ul>
<p>下载的文件包括：</p>
<ul>
<li>
<p>data_batch_1 到 data_batch_5：训练数据</p>
</li>
<li>
<p>batches.meta：类别信息</p>
</li>
<li>
<p>test_batch：测试数据（虽然我们目前没有使用）</p>
</li>
</ul>
<p>这些文件是数据集的一部分，通常不需要手动管理，PyTorch 会自动处理下载和解压过程。如果您想重新下载数据集，可以：</p>
<ul>
<li>删除 data 目录</li>
<li>重新运行程序，它会自动重新下载</li>
</ul>
<h3 id="数据预处理">数据预处理</h3>
<pre><code class="language-python">transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
])
</code></pre>
<h3 id="数据集可视化">数据集可视化</h3>
<p>运行以下命令查看数据集样本和分布：</p>
<pre><code class="language-bash">python show_dataset.py
</code></pre>
<p>这将生成两个可视化文件：</p>
<ul>
<li><code>cifar10_samples.png</code>：数据集样本图片</li>
<li><code>class_distribution.png</code>：类别分布</li>
</ul>
<h3 id="源码分析">源码分析</h3>
<pre><code class="language-python">import torch
from torchvision import datasets, transforms
import matplotlib.pyplot as plt

def show_dataset():
    # 数据预处理
    transform = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
    ])

    # 加载训练集
    print("Loading CIFAR-10 dataset...")
    trainset = datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
    
    # 定义类别
    classes = ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')
    
    # 显示数据集信息
    print(f"\nDataset size: {len(trainset)} images")
    print(f"Image size: {trainset[0][0].shape}")
    print(f"Number of classes: {len(classes)}")
    
    # 显示样本图片
    plt.figure(figsize=(15, 5))
    for i in range(5):
        img, label = trainset[i]
        img = img / 2 + 0.5
        img = img.numpy()
        plt.subplot(1, 5, i + 1)
        plt.imshow(img.transpose(1, 2, 0))
        plt.title(f'Class: {classes[label]}')
        plt.axis('off')
    plt.tight_layout()
    plt.savefig('cifar10_samples.png')
    
    # 显示每个类别的样本数量
    class_counts = torch.zeros(10)
    for _, label in trainset:
        class_counts[label] += 1
    
    plt.figure(figsize=(10, 5))
    plt.bar(classes, class_counts)
    plt.title('Number of samples per class')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig('class_distribution.png')
    
    print("\nVisualization files saved:")
    print("- cifar10_samples.png")
    print("- class_distribution.png")

if __name__ == '__main__':
    show_dataset() 
</code></pre>
<h3 id="运行结果">运行结果</h3>
<pre><code class="language-shell">Loading CIFAR-10 dataset...

Dataset size: 50000 images
Image size: torch.Size([3, 32, 32])
Number of classes: 10

Visualization files saved:
- cifar10_samples.png
- class_distribution.png
</code></pre>
<h1 id="模型设计与源码分析">模型设计与源码分析</h1>
<h2 id="网络结构设计">网络结构设计</h2>
<ul>
<li>
<p>结构：2 层卷积 + 2层池化 + 1 层全连接。</p>
</li>
<li>
<p>源码：</p>
<pre><code class="language-python">import torch
import torch.nn as nn

class SimpleNet(nn.Module):
    def __init__(self):
        super(SimpleNet, self).__init__()
        # 第一个卷积层
        # 输入: 3通道(RGB图像) -&gt; 输出: 16个特征图
        # 例如: 一张32x32的彩色图片(3x32x32) -&gt; 16个32x32的特征图
        self.conv1 = nn.Conv2d(3, 16, 3, padding=1)  # 448参数
        
        # 第二个卷积层
        # 输入: 16个特征图 -&gt; 输出: 32个特征图
        # 例如: 16个16x16的特征图 -&gt; 32个16x16的特征图
        self.conv2 = nn.Conv2d(16, 32, 3, padding=1)  # 4,640参数
        
        # 全连接层
        # 输入: 32 * 8 * 8 = 2048个特征 -&gt; 输出: 10个类别
        # 例如: 32个8x8的特征图展平后 -&gt; 10个数字(0-9)的概率
        self.fc1 = nn.Linear(32 * 8 * 8, 10)  # 20,490参数

    def forward(self, x):
        # 输入x的形状: [batch_size, 3, 32, 32]
        # 例如: [32, 3, 32, 32] 表示32张32x32的RGB图片
        
        # 第一个卷积层 + ReLU激活
        # 输出形状: [batch_size, 16, 32, 32]
        # 例如: [32, 16, 32, 32] 表示32张图片，每张有16个32x32的特征图
        x = torch.relu(self.conv1(x))
        
        # 最大池化层，将特征图尺寸减半
        # 输出形状: [batch_size, 16, 16, 16]
        # 例如: [32, 16, 16, 16] 表示32张图片，每张有16个16x16的特征图
        x = torch.max_pool2d(x, 2)
        
        # 第二个卷积层 + ReLU激活
        # 输出形状: [batch_size, 32, 16, 16]
        # 例如: [32, 32, 16, 16] 表示32张图片，每张有32个16x16的特征图
        x = torch.relu(self.conv2(x))
        
        # 最大池化层，再次将特征图尺寸减半
        # 输出形状: [batch_size, 32, 8, 8]
        # 例如: [32, 32, 8, 8] 表示32张图片，每张有32个8x8的特征图
        x = torch.max_pool2d(x, 2)
        
        # 将特征图展平成一维向量
        # 输出形状: [batch_size, 32 * 8 * 8]
        # 例如: [32, 2048] 表示32张图片，每张图片的特征被展平成2048维向量
        x = x.view(x.size(0), -1)
        
        # 全连接层，得到最终的类别预测
        # 输出形状: [batch_size, 10]
        # 例如: [32, 10] 表示32张图片，每张图片对应10个类别的预测概率
        x = self.fc1(x)
        return x 
</code></pre>
</li>
</ul>
<h2 id="参数与设计分析">参数与设计分析</h2>
<ul>
<li>
<p><strong>参数总体情况：</strong>这是一个"轻特征提取，重分类"的模型，总参数量25,578</p>
<ul>
<li>全连接层参数占大多数（约80%）</li>
<li>卷积层参数相对较少（约20%）</li>
<li>总参数量适中，适合入门学习</li>
</ul>
</li>
<li>
<p><strong>卷积核</strong>：3x3卷积核</p>
<ul>
<li>计算效率高（9个参数）</li>
<li>感受野适中（能捕捉局部特征）</li>
<li>是CNN中的标准选择</li>
</ul>
</li>
<li>
<p><strong>Padding填充设计：</strong>padding=1，输入32x32，输出32x32</p>
<ul>
<li>保持特征图尺寸不变</li>
<li>避免边缘信息丢失</li>
<li>便于网络设计</li>
</ul>
</li>
</ul>
<blockquote>
<p>3x3卷积核 + padding=1）是CNN中的经典配置，既保证了特征提取效果，又维持了计算效率。</p>
</blockquote>
<p>整体设计分析，最关键的三点如下：</p>
<ul>
<li><strong>使用3x3卷积核配合padding=1，在保持特征图尺寸的同时高效提取局部特征。</strong></li>
<li><strong>通过两层卷积（3→16→32通道）和两次池化（32x32→16x16→8x8），实现了从基本特征到复杂特征的渐进提取。</strong></li>
<li><strong>最后用全连接层（2048→10）直接分类，总参数量25,578，结构简单但有效。</strong></li>
</ul>
<h1 id="训练与调试">训练与调试</h1>
<h2 id="训练流程">训练流程</h2>
<ul>
<li>
<p>源码：</p>
<pre><code class="language-python">		# 训练一个epoch
    print("Training for 1 epoch...")
    model.train()  # 设置为训练模式（启用dropout等训练特定层）
    
    # 遍历数据加载器
    for i, (inputs, labels) in enumerate(trainloader):
        # 将数据移到指定设备（GPU/CPU）
        inputs, labels = inputs.to(device), labels.to(device)
        
        # 前向传播
        optimizer.zero_grad()  # 清空梯度
        outputs = model(inputs)  # 模型前向传播
        loss = criterion(outputs, labels)  # 计算损失
        loss.backward()  # 反向传播，计算梯度
        optimizer.step()  # 更新模型参数

        # 每100个batch打印一次损失
        if (i + 1) % 100 == 0:
            print(f'Batch [{i + 1}], Loss: {loss.item():.4f}')

    print("Training finished!")
</code></pre>
</li>
</ul>
<h2 id="调试经验">调试经验</h2>
<ul>
<li><strong>数据先行</strong>：检查数据加载和预处理，确保输入数据的形状、范围和分布符合预期。</li>
<li><strong>监控为王</strong>：密切关注损失值变化趋势，通过定期打印损失、学习率和梯度信息来诊断训练状态。</li>
<li><strong>调参有度</strong>：根据训练效果合理调整超参数，如batch_size、学习率等，避免过拟合或欠拟合。</li>
</ul>
<h1 id="测试执行与结果分析">测试执行与结果分析</h1>
<h2 id="测试执行">测试执行</h2>
<pre><code class="language-shell">python main.py
</code></pre>
<h2 id="结果与分析">结果与分析</h2>
<pre><code class="language-shell">Using device: cpu
Loading CIFAR-10 dataset...
Training for 1 epoch...
Batch [100], Loss: 2.2419
Batch [200], Loss: 2.2013
Batch [300], Loss: 1.8651
Batch [400], Loss: 1.9359
Batch [500], Loss: 1.9718
Batch [600], Loss: 1.9448
Batch [700], Loss: 1.7974
Batch [800], Loss: 1.6378
Batch [900], Loss: 1.5137
Batch [1000], Loss: 1.5045
Batch [1100], Loss: 1.8072
Batch [1200], Loss: 1.9754
Batch [1300], Loss: 1.8177
Batch [1400], Loss: 1.7377
Batch [1500], Loss: 1.8140
Training finished!
</code></pre>
<ul>
<li>设备使用：程序在 CPU 上运行</li>
<li>数据集：成功加载了 CIFAR-10 数据集</li>
<li>训练过程：
<ul>
<li>完成了 1 个 epoch 的训练</li>
<li>每 100 个 batch 打印一次 loss</li>
<li>Loss 值从初始的 2.24 逐渐下降到约 1.81，说明模型在学习</li>
<li>整个训练过程顺利完成</li>
</ul>
</li>
</ul>
<blockquote>
<p>Loss（损失）是衡量模型预测结果与真实值之间差距的指标，就像考试打分一样 - 比如模型预测一张图片是猫的概率为60%，而实际上确实是猫（100%），这个40%的差距就反映在loss值上，loss越小代表模型预测越准确。</p>
</blockquote>
<h1 id="优化与前沿探索">优化与前沿探索</h1>
<h2 id="架构优势">架构优势</h2>
<ul>
<li>
<p>轻量级设计：总参数量约25K，适合快速部署和迭代</p>
</li>
<li>
<p>结构清晰：采用经典的CNN+池化层组合，便于理解和优化</p>
</li>
<li>
<p>模块化实现：代码组织合理，便于扩展</p>
</li>
</ul>
<h2 id="与前沿趋势的差距">与前沿趋势的差距</h2>
<ul>
<li>
<p>缺少注意力机制（如Transformer结构）</p>
</li>
<li>
<p>没有使用残差连接（ResNet特性）</p>
</li>
<li>
<p>缺乏正则化策略（如Dropout）</p>
</li>
</ul>
<h2 id="可优化方向">可优化方向</h2>
<ul>
<li>
<p>添加BatchNorm提高训练稳定性</p>
</li>
<li>
<p>引入现代激活函数（如GELU、Swish）</p>
</li>
<li>
<p>实现学习率调度策略</p>
</li>
</ul>
<h1 id="总结与反思">总结与反思</h1>
<h2 id="收获与不足">收获与不足</h2>
<ul>
<li>掌握 CNN 与 PyTorch 基本流程。</li>
<li>不足：模型深度有限，准确率待提升。</li>
</ul>
<h2 id="下一步计划">下一步计划</h2>
<ul>
<li>添加验证集评估和模型保存机制</li>
<li>实现训练过程可视化</li>
</ul>
<blockquote>
<p>从玩具到工具，从黑盒到透明</p>
</blockquote>
<h1 id="项目源码"><a href="https://github.com/Elliot438b/SimpleTorch" target="_blank" rel="noopener nofollow">项目源码</a></h1>
<h1 id="参考文献">参考文献</h1>
<ul>
<li>
<p><strong>LeCun, Y., Bottou, L., Bengio, Y., &amp; Haffner, P.</strong> (1998). <em>Gradient-based learning applied to document recognition</em>. Proceedings of the IEEE, 86(11), 2278-2324. <a href="https://doi.org/10.1109/5.726791" target="_blank" rel="noopener nofollow">DOI:10.1109/5.726791</a></p>
</li>
<li>
<p><strong>Krizhevsky, A., Sutskever, I., &amp; Hinton, G. E.</strong> (2012). <em>ImageNet classification with deep convolutional neural networks</em>. Advances in Neural Information Processing Systems, 25, 1097-1105. <a href="https://doi.org/10.1145/3065386" target="_blank" rel="noopener nofollow">DOI:10.1145/3065386</a></p>
</li>
<li>
<p><strong>Simonyan, K., &amp; Zisserman, A.</strong> (2014). <em>Very deep convolutional networks for large-scale image recognition</em>. arXiv preprint arXiv:1409.1556. <a href="https://arxiv.org/abs/1409.1556" target="_blank" rel="noopener nofollow">arXiv:1409.1556</a></p>
</li>
</ul>
<h1 id="更多文章请转到一面千人的博客园">更多文章请转到<a href="https://www.cnblogs.com/Evsward/" target="_blank">一面千人的博客园</a></h1>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.8939560569016204" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-21 22:58">2025-03-21 22:55</span>&nbsp;
<a href="https://www.cnblogs.com/Evsward">一面千人</a>&nbsp;
阅读(<span id="post_view_count">139</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18786029" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18786029);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18786029', targetLink: 'https://www.cnblogs.com/Evsward/p/18786029/SimpleTorch', title: '从零开始：基于 PyTorch 的图像分类模型' })">举报</a>
</div>
        