
	<div class="postTitle">
		<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zyl910/p/18692339/dotnet_dll_VectorTraits_v3_1" title="发布于 2025-01-27 00:32">
    <span role="heading" aria-level="2">发布 VectorTraits v3.1（支持 .NET 9.0，支持 原生AOT）</span>
    

</a>

	</div>
	
	<div class="postText">
		<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p></p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#支持-net-90" rel="noopener nofollow">支持 .NET 9.0</a><ul><li><a href="#中断性变更" rel="noopener nofollow">中断性变更</a></li></ul></li><li><a href="#支持-原生aot" rel="noopener nofollow">支持 原生AOT</a><ul><li><a href="#原生aot的范例" rel="noopener nofollow">原生AOT的范例</a></li><li><a href="#使用ilcinstructionset参数" rel="noopener nofollow">使用IlcInstructionSet参数</a></li></ul></li><li><a href="#traitsoutput类增加isdynamiccodecompiledisdynamiccodesupported信息的输出" rel="noopener nofollow">TraitsOutput类增加IsDynamicCodeCompiled/IsDynamicCodeSupported信息的输出</a></li><li><a href="#为了支持原生aot-将reflectionutil等类的所有type集合-修改为-wrappedtype-集合" rel="noopener nofollow">为了支持原生AOT, 将ReflectionUtil等类的所有Type集合, 修改为 WrappedType 集合</a></li><li><a href="#附录" rel="noopener nofollow">附录</a></li></ul></div><p></p>
<p>VectorTraits已更新至 v3.1版。支持 .NET 9.0，支持 原生AOT。</p>
<ul>
<li>NuGet: <a href="https://www.nuget.org/packages/VectorTraits/3.1.0" target="_blank" rel="noopener nofollow">https://www.nuget.org/packages/VectorTraits/3.1.0</a></li>
<li>源代码: <a href="https://github.com/zyl910/VectorTraits" target="_blank" rel="noopener nofollow">https://github.com/zyl910/VectorTraits</a></li>
<li>在线文档: <a href="https://zyl910.github.io/VectorTraits_doc/" target="_blank" rel="noopener nofollow">https://zyl910.github.io/VectorTraits_doc/</a></li>
</ul>
<p>变更日志如下。</p>
<ul>
<li>Add TargetFrameworks <code>net9.0</code> (增加目标框架 <code>net9.0</code>): VectorTraits.dll.</li>
<li>Support for Native AOT (支持 原生AOT).</li>
<li>The TraitsOutput class adds the output of this information (TraitsOutput类增加这些信息的输出): IsDynamicCodeCompiled, IsDynamicCodeSupported.</li>
<li>Add WrappedType, WrappedTypePool classes. They are used to solve the problem of reflection in Native AOT. (增加 WrappedType, WrappedTypePool 类. 它们用于解决反射在原生AOT时的问题).</li>
<li>To support Native AOT, modify all Type collections of ReflectionUtil and other classes to WrappedType collections (为了支持原生AOT, 将ReflectionUtil等类的所有Type集合, 修改为 WrappedType 集合).</li>
</ul>
<p>完整列表: <a href="https://github.com/zyl910/VectorTraits/blob/main/ChangeLog.md" target="_blank" rel="noopener nofollow">ChangeLog</a></p>
<h2 id="支持-net-90">支持 .NET 9.0</h2>
<p>相关日志:</p>
<ul>
<li>Add TargetFrameworks <code>net9.0</code> (增加目标框架 <code>net9.0</code>): VectorTraits.dll.</li>
</ul>
<p>本库已经增加了目标框架——  <code>net9.0</code>。</p>
<h3 id="中断性变更">中断性变更</h3>
<p>除了 ConvertToInt64 等浮点数转整数的方法外，其他的单元测试均测试通过。</p>
<p>这是因为 .NET 9 的一个中断性变更： <a href="https://learn.microsoft.com/zh-cn/dotnet/core/compatibility/jit/9.0/fp-to-integer" target="_blank" rel="noopener nofollow">.NET 9 中的中断性变更 - JIT 编译器 - 浮点数到整数转换将要饱和</a></p>
<p>简单来说，.NET 9 将浮点数转整数规则修改为——若输入值超过整数的边界，结果会饱和到边界。且输入值为 NaN 时，结果会是0。</p>
<p>目前本库的 ConvertToInt64 等浮点数转整数的方法，仍然是按照旧版本（.NET Framework 1.1~4.8.1、.NET Core 1.0~ 8.0）的规则来处理的。于是在.NET 9 下，若输入值超过整数的边界，就与 Vector 类中对应方法的结果不一致了。</p>
<p>其实它的影响很小，因为仅当“输入值超过整数的边界”时才会不一致。而大多数严谨的程序会在 ConvertToInt64 之前检查数据范围，在范围内时才采用ConvertToInt64的结果。</p>
<p>本库的4.0版将彻底解决这一问题：</p>
<ul>
<li>本库的 ConvertToInt64 将会改名为 ConvertToInt64Native。与 Vector 类在 .NET 9 新增的 ConvertToInt64Native 方法的保持一致。</li>
<li>本库还将增加 符合 .NET 9 饱和规则的 ConvertToInt64方法。注意本库还支持低版本的 .NET，所以即使在低版本 .NET下运行，本库也会按照 .NET 9 的新规则来处理。</li>
</ul>
<p>且 ConvertToInt32 等其他的浮点数转整数的方法，也会按此改造。</p>
<p>且对于 .NET 9.0 新增的其他向量方法（如 Exp、Log、Sin……），本库的4.0版将支持它们。</p>
<h2 id="支持-原生aot">支持 原生AOT</h2>
<p>相关日志:</p>
<ul>
<li>Support for Native AOT (支持 原生AOT).</li>
</ul>
<p>本库已经支持了 原生AOT。</p>
<p>原生AOT是从 .NET 7.0 开始提供的，.NET 8.0 才开始成熟。对于原生AOT的使用，可以参考 hez2010的文章： <a href="https://www.cnblogs.com/hez2010/p/17999838/guidance-for-dotnet-nativeaot" target="_blank">.NET NativeAOT 指南</a>。</p>
<h3 id="原生aot的范例">原生AOT的范例</h3>
<p>现在以 <code>VectorTraits.Sample</code> 为例来介绍原生AOT的使用。</p>
<p>先使项目支持原生AOT。配置 <code>VectorTraits.Sample.csproj</code>，加上“PublishAot”。</p>
<pre><code class="language-xml">      &lt;PublishAot Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net7.0'))"&gt;true&lt;/PublishAot&gt;
</code></pre>
<p>随后使用命令行，进行原生AOT打包。假设现在用的是Windows平台，于是打包目标是“win-x64”平台的。</p>
<p>打开终端，使用 cd命令进入 <code>VectorTraits.Sample</code> 的目录，随后使用下列命令进行AOT打包。</p>
<pre><code>dotnet publish -c Release -r win-x64 -f net9.0
</code></pre>
<p>随后会输出以下信息。</p>
<pre><code>C:\Program Files\dotnet\sdk\9.0.102\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.TargetFrameworkInference.targets(187,5): warning NETSDK1215: Targeting .NET Standard prior to 2.0 is no longer recommended. See https://aka.ms/dotnet/dotnet-standard-guidance for more details.
  VectorTraits net9.0 succeeded with 2 warning(s) (46.9s) → E:\zylSelf\Code\cs\base\VectorTraits\src\VectorTraits\bin\Release\net9.0\VectorTraits.dll
    E:\zylSelf\Code\cs\base\VectorTraits\src\VectorTraits\Impl\ReflectionUtil.cs(182,63): warning IL2111: Method 'Zyl.VectorTraits.Impl.ReflectionUtil.TypeInvokeGetIsSupported(Type)' with parameters or return value with `DynamicallyAccessedMembersAttribute` is accessed via reflection. Trimmer can't guarantee availability of the requirements of the method.
    E:\zylSelf\Code\cs\base\VectorTraits\src\VectorTraits\Impl\ReflectionUtil.cs(136,48): warning IL2111: Method 'Zyl.VectorTraits.Impl.ReflectionUtil.TypeInvokeGetIsSupported(Type)' with parameters or return value with `DynamicallyAccessedMembersAttribute` is accessed via reflection. Trimmer can't guarantee availability of the requirements of the method.
  VectorTraits.Sample net9.0 succeeded (112.7s) → bin\Release\net9.0\win-x64\publish\

Build succeeded with 2 warning(s) in 161.8s
</code></pre>
<p>打包成功了，只是有2个警告。</p>
<ul>
<li>NETSDK1215：该警告不用理会。本库为了支持更多的 .NET 版本，于是使用了 <code>.NET Standard 1.1</code>。而现在原生AOT编译用的是 net9.0，与它无关。</li>
<li>IL2111：该警告不会影响程序的正常运行，可忽略。该警告是 net9.0 新增的警告，目前资料少，没有介绍消除办法。且该警告不会影响程序的正常运行，故可忽略。</li>
</ul>
<p>随后去 <code>bin\Release\net9.0\win-x64\publish\</code> 文件夹找到打包后的程序，运行它。输出信息摘录如下。</p>
<pre><code>VectorTraits.Sample

IsRelease:      True
Environment.ProcessorCount:     16
Environment.Is64BitProcess:     True
Environment.OSVersion:  Microsoft Windows NT 10.0.26100.0
Environment.Version:    9.0.1
Stopwatch.Frequency:    10000000
RuntimeFeature.IsDynamicCodeCompiled:   False
RuntimeFeature.IsDynamicCodeSupported:  False
RuntimeEnvironment.GetRuntimeDirectory: E:\zylSelf\Code\cs\base\VectorTraits\samples\VectorTraits.Sample\bin\Release\net9.0\win-x64\publish\
RuntimeInformation.FrameworkDescription:        .NET 9.0.1
RuntimeInformation.OSArchitecture:      X64
RuntimeInformation.OSDescription:       Microsoft Windows 10.0.26100
RuntimeInformation.RuntimeIdentifier:   win-x64
IntPtr.Size:    8
BitConverter.IsLittleEndian:    True
Vector.IsHardwareAccelerated:   True
Vector&lt;byte&gt;.Count:     16      # 128bit
Vector&lt;float&gt;.Count:    4       # 128bit
Vector128.IsHardwareAccelerated:        True
Vector256.IsHardwareAccelerated:        False
Vector512.IsHardwareAccelerated:        False
Vector&lt;T&gt;.Assembly.CodeBase:    CodeBase is not supported on assemblies loaded from a single-file bundle.
GetTargetFrameworkDisplayName(VectorTextUtil):  .NET 9.0
GetTargetFrameworkDisplayName(TraitsOutput):    .NET 9.0
VectorTraitsGlobal.InitCheckSum:        -2122844161     # 0x8177F7FF
VectorEnvironment.CpuModelName: AMD Ryzen 7 7840H w/ Radeon 780M Graphics
VectorEnvironment.SupportedInstructionSets:     Aes, Lzcnt, Pclmulqdq, Popcnt, Sse, Sse2, Sse3, Ssse3, Sse41, Sse42, X86Base
Vector128s.Instance:    WVectorTraits128Sse     // Sse, Sse2, Sse3, Ssse3, Sse41, Sse42
Vectors.Instance:       VectorTraits128Sse      // Sse, Sse2, Sse3, Ssse3, Sse41, Sse42

src:    &lt;0, 1, 2, 3, 4, 5, 6, 7&gt;        # (0000 0001 0002 0003 0004 0005 0006 0007)
ShiftLeft:      &lt;0, 2, 4, 6, 8, 10, 12, 14&gt;     # (0000 0002 0004 0006 0008 000A 000C 000E)
Equals to BCL ShiftLeft:        True
Equals to ShiftLeft_Const:      True
</code></pre>
<p>可见，程序正常运行了。</p>
<p>可以注意到，CodeBase的结果是一个错误信息—— <code>CodeBase is not supported on assemblies loaded from a single-file bundle.</code>。</p>
<p>这是因为原生AOT发布后，不再支持该属性。也可从这个信息看出，该程序是原生AOT发布的。</p>
<p>另外还可以注意到，SupportedInstructionSets属性的结果不太正常。现在CPU是 “AMD Ryzen 7 7840H”，它支持AVX系列指令集的，但SupportedInstructionSets里没有。</p>
<p>这是因为原生AOT是提前生成机器码，它为了尽量避免老CPU不支持新指令集的问题，于是默认仅允许最基础的指令集。</p>
<h3 id="使用ilcinstructionset参数">使用IlcInstructionSet参数</h3>
<p>使用IlcInstructionSet参数，可以配置原生AOT发布时所允许的指令集。最常见的参数是“native”，即使用当前CPU所支持的指令集。</p>
<p>在终端中执行以下命令。</p>
<pre><code>dotnet publish -c Release -r win-x64 -f net9.0 /p:IlcInstructionSet=native
</code></pre>
<p>随后会输出以下信息。</p>
<pre><code>C:\Program Files\dotnet\sdk\9.0.102\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.TargetFrameworkInference.targets(187,5): warning NETSDK1215: Targeting .NET Standard prior to 2.0 is no longer recommended. See https://aka.ms/dotnet/dotnet-standard-guidance for more details.
  VectorTraits net9.0 succeeded (0.5s) → E:\zylSelf\Code\cs\base\VectorTraits\src\VectorTraits\bin\Release\net9.0\VectorTraits.dll
  VectorTraits.Sample net9.0 succeeded (104.8s) → bin\Release\net9.0\win-x64\publish\

Build succeeded in 105.8s
</code></pre>
<p>打包成功了，随后我们运行程序。会发现这些信息与与之前的不同，该CPU的指令集均启用了。</p>
<pre><code>VectorEnvironment.SupportedInstructionSets:     Aes, Avx, Avx2, Avx512BW, Avx512CD, Avx512DQ, Avx512F, Avx512Vbmi, Avx512VL, Bmi1, Bmi2, Fma, Lzcnt, Pclmulqdq, Popcnt, Sse, Sse2, Sse3, Ssse3, Sse41, Sse42, X86Base
Vector128s.Instance:    WVectorTraits128Avx2    // Sse, Sse2, Sse3, Ssse3, Sse41, Sse42, Avx, Avx2, Avx512VL
Vector256s.Instance:    WVectorTraits256Avx2    // Avx, Avx2, Sse, Sse2, Avx512VL
Vector512s.Instance:    WVectorTraits512Avx512  // Avx512BW, Avx512DQ, Avx512F, Avx512Vbmi, Avx, Avx2, Sse, Sse2
Vectors.Instance:       VectorTraits256Avx2     // Avx, Avx2, Sse, Sse2, Avx512VL
</code></pre>
<p>原生AOT发布后，本库的“根据当前CPU动态选择最佳指令”的功能失效了，导致某些方法的向量硬件加速不及预期。本库的4.0版将处理这一问题。</p>
<h2 id="traitsoutput类增加isdynamiccodecompiledisdynamiccodesupported信息的输出">TraitsOutput类增加IsDynamicCodeCompiled/IsDynamicCodeSupported信息的输出</h2>
<p>相关日志:</p>
<ul>
<li>The TraitsOutput class adds the output of this information (TraitsOutput类增加这些信息的输出): IsDynamicCodeCompiled, IsDynamicCodeSupported.</li>
</ul>
<p>VectorTraits.Sample 等程序使用了TraitsOutput类输出了 .NET 环境信息。如今增加了这2项的输出：IsDynamicCodeCompiled, IsDynamicCodeSupported。</p>
<p>当未配置原生AOT发布时，这2个属性一般为 True。</p>
<p>当已配置原生AOT发布时，这2个属性一般为 False。故可以用它们来判断是否配置了原生AOT。</p>
<h2 id="为了支持原生aot-将reflectionutil等类的所有type集合-修改为-wrappedtype-集合">为了支持原生AOT, 将ReflectionUtil等类的所有Type集合, 修改为 WrappedType 集合</h2>
<p>相关日志:</p>
<ul>
<li>Add WrappedType, WrappedTypePool classes. They are used to solve the problem of reflection in Native AOT. (增加 WrappedType, WrappedTypePool 类. 它们用于解决反射在原生AOT时的问题).</li>
<li>To support Native AOT, modify all Type collections of ReflectionUtil and other classes to WrappedType collections (为了支持原生AOT, 将ReflectionUtil等类的所有Type集合, 修改为 WrappedType 集合).</li>
</ul>
<p>本库内部使用了新增的 WrappedType, WrappedTypePool类型来解决 原生AOT的报错。这2个类是 public的，其他程序也可使用。</p>
<p>ReflectionUtil 及相关类型原本使用了 Type集合。现在为了支持原生AOT，已将参数类型改为 WrappedType集合了。这是一个中断性变更。ReflectionUtil主要是给测试使用的（如 <code>VectorTraits.Benchmarks</code>、<code>VectorTraits.Tests</code>），外部程序若使用了它们，需进行修正。</p>
<h2 id="附录">附录</h2>
<p>参考资料:</p>
<ul>
<li>Microsoft <a href="https://learn.microsoft.com/zh-cn/dotnet/core/compatibility/jit/9.0/fp-to-integer" target="_blank" rel="noopener nofollow">.NET 9 中的中断性变更 - JIT 编译器 - 浮点数到整数转换将要饱和</a></li>
<li>Microsoft <a href="https://learn.microsoft.com/en-us/dotnet/api/system.numerics.vector.converttoint64native?view=net-9.0" target="_blank" rel="noopener nofollow">Vector.ConvertToInt64Native(Vector<double>) Method</double></a></li>
<li>Microsoft <a href="https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/" target="_blank" rel="noopener nofollow">Native AOT deployment</a></li>
<li>hez2010 <a href="https://www.cnblogs.com/hez2010/p/17999838/guidance-for-dotnet-nativeaot" target="_blank">.NET NativeAOT 指南</a></li>
</ul>
<p>以前的发布日志:</p>
<ul>
<li><a href="https://www.cnblogs.com/zyl910/p/dotnet_dll_VectorTraits_v1_0.html" target="_blank">发布 VectorTraits v1.0, 它是C#下增强SIMD向量运算的类库</a></li>
<li><a href="https://www.cnblogs.com/zyl910/p/18078844/dotnet_dll_VectorTraits_v2_0" target="_blank">发布 VectorTraits v2.0（支持 X86的Sse系列指令集等）</a></li>
<li><a href="https://www.cnblogs.com/zyl910/p/18537375/dotnet_dll_VectorTraits_v3_0" target="_blank">发布 VectorTraits v3.0（支持 X86架构的Avx512系列指令集，支持 Wasm架构及PackedSimd指令集等）</a></li>
</ul>

</div>
<div id="MySignature" role="contentinfo">
    <div id="MySignature"><div>作者：<a href="http://www.cnblogs.com/zyl910/" target="_blank">zyl910</a></div>
    <div>出处：<a href="http://www.cnblogs.com/zyl910/" target="_blank">http://www.cnblogs.com/zyl910/</a></div>
    <div>版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a>.</div>  
</div>

</div>
<div class="clear"></div>

	</div>
	
	<div class="postfoot">
		posted on 
<span id="post-date" data-last-update-days="8.489905463103009" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-27 00:32">2025-01-27 00:32</span>&nbsp;
<a href="https://www.cnblogs.com/zyl910">zyl910</a>&nbsp;
阅读(<span id="post_view_count">41</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18692339" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18692339);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18692339', targetLink: 'https://www.cnblogs.com/zyl910/p/18692339/dotnet_dll_VectorTraits_v3_1', title: '发布 VectorTraits v3.1（支持 .NET 9.0，支持 原生AOT）' })">举报</a>

	</div>
