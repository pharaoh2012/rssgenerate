
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mjunz/p/18845612" title="发布于 2025-04-24 23:13">
    <span role="heading" aria-level="2">Nacos简介—1.Nacos使用简介</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p data-track="4" data-pm-slice="0 0 []"><strong>大纲</strong></p>
<p data-track="5"><strong>1.Nacos的在服务注册中心 + 配置中心中的应用</strong></p>
<p data-track="6"><strong>2.Nacos 2.x最新版本下载与目录结构</strong></p>
<p data-track="7"><strong>3.Nacos 2.x的数据库存储与日志存储</strong></p>
<p data-track="8"><strong>4.Nacos 2.x服务端的startup.sh启动脚本</strong></p>
<p data-track="9"><strong>5.Dubbo + Nacos微服务RPC调用开发示例</strong></p>
<p data-track="10"><strong>6.Nacos对临时与持久化服务实例的健康检查机制</strong></p>
<p data-track="11"><strong>7.Nacos保护阈值机制防止高并发下出现服务雪崩</strong></p>
<p data-track="12"><strong>8.Nacos保护阈值机制开启后的CAP问题</strong></p>
<p data-track="13"><strong>9.集成Nacos注册中心和配置中心的项目演示</strong></p>
<p data-track="14">&nbsp;</p>
<p data-track="15"><strong>1.Nacos的在服务注册中心 + 配置中心中的应用</strong></p>
<p data-track="16"><strong>(1)Nacos作为服务注册中心</strong></p>
<p data-track="17"><strong>(2)Nacos作为配置中心</strong></p>
<p data-track="18">&nbsp;</p>
<p data-track="19">Nacos的两大应用场景分别是：</p>
<p data-track="20">一.微服务技术体系下的服务注册中心</p>
<p data-track="21">二.配置中心</p>
<p data-track="22">&nbsp;</p>
<p data-track="23"><strong>(1)Nacos作为服务注册中心</strong></p>
<div class="pgc-img"><img src="https://p9-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/1c05a7bb8ef1484d8683053fb6614a63~tplv-obj.image?lk3s=ef143cfe&amp;traceid=20250424230159898AACE9E92BF4488553&amp;x-expires=2147483647&amp;x-signature=moMnOSm1tfuQOZd1M5trUMfLux8%3D" data-ic="false" data-width="1080" data-height="561" data-ic-uri=""></div>
<p data-track="24"><strong>(2)Nacos作为配置中心</strong></p>
<p data-track="25">每个系统都会有很多配置信息。比如数据库连接池的配置、RocketMQ的配置、Redis的配置，都会写在Spring Boot项目下的application.yml静态配置文件。如果需要修改配置信息，就需要重新打包、重启系统进行重新部署发布。</p>
<p data-track="26">&nbsp;</p>
<p data-track="27">所以，可以将这些配置信息写到Nacos中进行存储，然后各个系统监听Nacos中的数据变化。这样当需要修改配置信息时，只需要到Nacos中修改对应的数据即可。</p>
<p data-track="28">&nbsp;</p>
<p data-track="29"><strong>2.Nacos 2.x最新版本下载与目录结构</strong></p>
<p data-track="30">下载地址：</p>
<pre class="highlighter-hljs"><code>https://github.com/alibaba/nacos/releases</code></pre>
<p data-track="32">如下是nacos-server-2.1.2.zip的目录结构：</p>
<div class="pgc-img"><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/944ae4a49f244aceb59ca136b53e7c72~tplv-obj.image?lk3s=ef143cfe&amp;traceid=20250424230159898AACE9E92BF4488553&amp;x-expires=2147483647&amp;x-signature=ZQ3xySqoOpYa4Elq1pI5U5FQZkY%3D" data-ic="false" data-width="1080" data-height="535" data-ic-uri=""></div>
<p data-track="33">如下是对应的Source code(zip)的目录结构：</p>
<div class="pgc-img"><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/3eec2aa5c7084d9292af0541189bfa16~tplv-obj.image?lk3s=ef143cfe&amp;traceid=20250424230159898AACE9E92BF4488553&amp;x-expires=2147483647&amp;x-signature=5zE4hpRNvrfncwUxKYvidc%2FQBqQ%3D" data-ic="false" data-width="1080" data-height="993" data-ic-uri=""></div>
<p data-track="34">&nbsp;</p>
<p data-track="35"><strong>3.Nacos 2.x服务端的数据库存储与日志存储</strong></p>
<div class="pgc-img"><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/0c30482354cb43e99934ff543a21bd08~tplv-obj.image?lk3s=ef143cfe&amp;traceid=20250424230159898AACE9E92BF4488553&amp;x-expires=2147483647&amp;x-signature=AKhuU0LQifrebQZDrdAGo9OlD6E%3D" data-ic="false" data-width="1080" data-height="693" data-ic-uri=""></div>
<p data-track="36">数据库初始化的脚本和日志存储的配置文件位于如下位置：</p>
<div class="pgc-img"><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/a5b76a52231d405cbe9c3c5c7eeb54a5~tplv-obj.image?lk3s=ef143cfe&amp;traceid=20250424230159898AACE9E92BF4488553&amp;x-expires=2147483647&amp;x-signature=Ss4zcgjq5YhE0ao3qdvlgLcQrM0%3D" data-ic="false" data-width="1080" data-height="547" data-ic-uri=""></div>
<p data-track="37">&nbsp;</p>
<p data-track="38"><strong>4.Nacos 2.x服务端的startup.sh启动脚本</strong></p>
<p data-track="39"><strong>(1)服务端的startup.sh启动脚本与JVM参数</strong></p>
<p data-track="40"><strong>(2)Nacos 2.x服务端的单机模式启动命令</strong></p>
<p data-track="41"><strong>(3)Nacos 2.x服务端的三节点集群化部署</strong></p>
<p data-track="42">&nbsp;</p>
<p data-track="43"><strong>(1)服务端的startup.sh启动脚本与JVM参数</strong></p>
<p data-track="44">通过如下命令启动Nacos服务端。</p>
<pre class="highlighter-hljs"><code>$ java -jar ${BASE_DIR}/target/${SERVER}.jar</code></pre>
<pre class="highlighter-hljs"><code>#!/bin/bash

# Copyright 1999-2018 Alibaba Group Holding Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cygwin=false
darwin=false
os400=false
case "`uname`" in
CYGWIN*) cygwin=true;;
Darwin*) darwin=true;;
OS400*) os400=true;;
esac
error_exit ()
{
    echo "ERROR: $1 !!"
    exit 1
}
[ ! -e "$JAVA_HOME/bin/java" ] &amp;&amp; JAVA_HOME=$HOME/jdk/java
[ ! -e "$JAVA_HOME/bin/java" ] &amp;&amp; JAVA_HOME=/usr/java
[ ! -e "$JAVA_HOME/bin/java" ] &amp;&amp; JAVA_HOME=/opt/taobao/java
[ ! -e "$JAVA_HOME/bin/java" ] &amp;&amp; unset JAVA_HOME

if [ -z "$JAVA_HOME" ]; then
  if $darwin; then
    if [ -x '/usr/libexec/java_home' ] ; then
      export JAVA_HOME=`/usr/libexec/java_home`
    elif [ -d "/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home" ]; then
      export JAVA_HOME="/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home"
    fi
  else
    JAVA_PATH=`dirname $(readlink -f $(which javac))`
    if [ "x$JAVA_PATH" != "x" ]; then
      export JAVA_HOME=`dirname $JAVA_PATH 2&gt;/dev/null`
    fi
  fi
  if [ -z "$JAVA_HOME" ]; then
        error_exit "Please set the JAVA_HOME variable in your environment, We need java(x64)! jdk8 or later is better!"
  fi
fi

export SERVER="nacos-server"
export MODE="cluster"
export FUNCTION_MODE="all"
export MEMBER_LIST=""
export EMBEDDED_STORAGE=""
while getopts ":m:f:s:c:p:" opt
do
    case $opt in
        m)
            MODE=$OPTARG;;
        f)
            FUNCTION_MODE=$OPTARG;;
        s)
            SERVER=$OPTARG;;
        c)
            MEMBER_LIST=$OPTARG;;
        p)
            EMBEDDED_STORAGE=$OPTARG;;
        ?)
        echo "Unknown parameter"
        exit 1;;
    esac
done

export JAVA_HOME
export JAVA="$JAVA_HOME/bin/java"
export BASE_DIR=`cd $(dirname $0)/..; pwd`
export CUSTOM_SEARCH_LOCATIONS=file:${BASE_DIR}/conf/

#===========================================================================================
# JVM Configuration
#===========================================================================================
if [[ "${MODE}" == "standalone" ]]; then
    JAVA_OPT="${JAVA_OPT} -Xms512m -Xmx512m -Xmn256m"
    JAVA_OPT="${JAVA_OPT} -Dnacos.standalone=true"
else
    if [[ "${EMBEDDED_STORAGE}" == "embedded" ]]; then
        JAVA_OPT="${JAVA_OPT} -DembeddedStorage=true"
    fi
    JAVA_OPT="${JAVA_OPT} -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"
    JAVA_OPT="${JAVA_OPT} -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${BASE_DIR}/logs/java_heapdump.hprof"
    JAVA_OPT="${JAVA_OPT} -XX:-UseLargePages"
fi

if [[ "${FUNCTION_MODE}" == "config" ]]; then
    JAVA_OPT="${JAVA_OPT} -Dnacos.functionMode=config"
elif [[ "${FUNCTION_MODE}" == "naming" ]]; then
    JAVA_OPT="${JAVA_OPT} -Dnacos.functionMode=naming"
fi

JAVA_OPT="${JAVA_OPT} -Dnacos.member.list=${MEMBER_LIST}"

JAVA_MAJOR_VERSION=$($JAVA -version 2&gt;&amp;1 | sed -E -n 's/.* version "([0-9]*).*$/\1/p')
if [[ "$JAVA_MAJOR_VERSION" -ge "9" ]] ; then
  JAVA_OPT="${JAVA_OPT} -Xlog:gc*:file=${BASE_DIR}/logs/nacos_gc.log:time,tags:filecount=10,filesize=102400"
else
  JAVA_OPT_EXT_FIX="-Djava.ext.dirs=${JAVA_HOME}/jre/lib/ext:${JAVA_HOME}/lib/ext"
  JAVA_OPT="${JAVA_OPT} -Xloggc:${BASE_DIR}/logs/nacos_gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M"
fi

JAVA_OPT="${JAVA_OPT} -Dloader.path=${BASE_DIR}/plugins,${BASE_DIR}/plugins/health,${BASE_DIR}/plugins/cmdb,${BASE_DIR}/plugins/selector"
JAVA_OPT="${JAVA_OPT} -Dnacos.home=${BASE_DIR}"
JAVA_OPT="${JAVA_OPT} -jar ${BASE_DIR}/target/${SERVER}.jar"
JAVA_OPT="${JAVA_OPT} ${JAVA_OPT_EXT}"
JAVA_OPT="${JAVA_OPT} --spring.config.additional-location=${CUSTOM_SEARCH_LOCATIONS}"
JAVA_OPT="${JAVA_OPT} --logging.config=${BASE_DIR}/conf/nacos-logback.xml"
JAVA_OPT="${JAVA_OPT} --server.max-http-header-size=524288"

if [ ! -d "${BASE_DIR}/logs" ]; then
  mkdir ${BASE_DIR}/logs
fi

echo "$JAVA $JAVA_OPT_EXT_FIX ${JAVA_OPT}"

if [[ "${MODE}" == "standalone" ]]; then
    echo "nacos is starting with standalone"
else
    echo "nacos is starting with cluster"
fi

# check the start.out log output file
if [ ! -f "${BASE_DIR}/logs/start.out" ]; then
  touch "${BASE_DIR}/logs/start.out"
fi
# start
echo "$JAVA $JAVA_OPT_EXT_FIX ${JAVA_OPT}" &gt; ${BASE_DIR}/logs/start.out 2&gt;&amp;1 &amp;

if [[ "$JAVA_OPT_EXT_FIX" == "" ]]; then
  nohup "$JAVA" ${JAVA_OPT} nacos.nacos &gt;&gt; ${BASE_DIR}/logs/start.out 2&gt;&amp;1 &amp;
else
  nohup "$JAVA" "$JAVA_OPT_EXT_FIX" ${JAVA_OPT} nacos.nacos &gt;&gt; ${BASE_DIR}/logs/start.out 2&gt;&amp;1 &amp;
fi

echo "nacos is starting，you can check the ${BASE_DIR}/logs/start.out"</code></pre>
<p data-track="47"><strong>(2)Nacos 2.x服务端的单机模式启动命令</strong></p>
<pre class="highlighter-hljs"><code>$ cd nacos/bin
$ nohup sh startup.sh -m standalone &amp;</code></pre>
<p data-track="49"><strong>(3)Nacos 2.x服务端的三节点集群化部署</strong></p>
<p data-track="50">集群间的数据交互机制是通过MySQL来实现的。</p>
<p data-track="51">&nbsp;</p>
<p data-track="52"><strong>一.修改各节点的系统配置文件application.properties</strong></p>
<p data-track="53">第一个节点监听的端口是8848。</p>
<p data-track="54">第二个节点监听的端口是8858。</p>
<p data-track="55">第三个节点监听的端口是8868。</p>
<p data-track="56">&nbsp;</p>
<p data-track="57"><strong>二.配置各节点的集群配置文件cluster.conf</strong></p>
<p data-track="58">配置好三个节点的地址和端口。</p>
<p data-track="59">&nbsp;</p>
<p data-track="60"><strong>5.Dubbo + Nacos微服务RPC调用开发示例</strong></p>
<p data-track="61">其实只需要在配置文件里进行配置即可，与Nacos相关的配置项其实就是：dubbo.registry.address和spring.cloud.nacos.discovery.server-addr。</p>
<p data-track="62">&nbsp;</p>
<p data-track="63"><strong>一.进行服务注册的微服务配置</strong></p>
<pre class="highlighter-hljs"><code>spring.application.name=demo-dubbo-nacos-ServiceA
dubbo.scan.base-packages=com.demo.dubbo.nacos
dubbo.protocol.name=dubbo
dubbo.protocol.port=20880
dubbo.registry.address=spring-cloud://localhost
spring.cloud.nacos.discovery.server-addr=192.168.31.152:8848,192.168.31.152:8858,192.168.31.152:8868

spring.datasource.type: com.alibaba.druid.pool.DruidDataSource
spring.datasource.url: jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=utf-8
spring.datasource.username: root
spring.datasource.password: root
spring.datasource.driverClassName: com.mysql.jdbc.Driver
spring.datasource.initialSize: 1
spring.datasource.minIdle: 1
spring.datasource.maxActive: 50
spring.datasource.maxWait: 60000 
spring.datasource.timeBetweenEvictionRunsMillis: 60000  
spring.datasource.minEvictableIdleTimeMillis: 300000
spring.datasource.validationQuery: SELECT 1 FROM DUAL
spring.datasource.testWhileIdle: true
spring.datasource.testOnBorrow: false  
spring.datasource.testOnReturn: false  
spring.datasource.poolPreparedStatements: true 
spring.datasource.maxPoolPreparedStatementPerConnectionSize: 20
spring.datasource.filters: stat,wall,log4j
spring.datasource.connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</code></pre>
<p data-track="65"><strong>二.进行服务调用的微服务配置</strong></p>
<pre class="highlighter-hljs"><code>spring.application.name=demo-dubbo-nacos-ServiceB
dubbo.cloud.subscribed-services=demo-dubbo-nacos-ServiceA
dubbo.scan.base-packages=com.demo.dubbo.nacos
spring.cloud.nacos.discovery.server-addr=192.168.31.152:8848,192.168.31.152:8858,192.168.31.152:8868</code></pre>
<p data-track="67">&nbsp;</p>
<p data-track="68"><strong>6.Nacos对临时与持久化服务实例的健康检查机制</strong></p>
<p data-track="69"><strong>(1)Nacos有两种健康检查机制</strong></p>
<p data-track="70"><strong>(2)Nacos对临时的服务实例进行健康检查的机制</strong></p>
<p data-track="71"><strong>(3)Nacos对持久化的服务实例进行健康检查的机制</strong></p>
<p data-track="72">&nbsp;</p>
<p data-track="73"><strong>(1)Nacos有两种健康检查机制</strong></p>
<p data-track="74">作为服务注册中心，一般都会有健康检查机制。Nacos的健康检查机制会根据两种不同的服务实例进行分别处理。一种是临时的服务实例，一种是持久化的服务实例。对于不同的服务实例，Nacos的健康探测机制会不一样。</p>
<p data-track="75">&nbsp;</p>
<p data-track="76">Dubbo服务实例向Nacos进行服务注册时需要带上一个参数[ephemeral]。这个[ephemeral]参数可取两个值：临时和持久化。分别表示注册的服务实例是临时的和持久化的。一般不用主动设置该参数，默认情况下的服务实例都是临时的。</p>
<p data-track="77">&nbsp;</p>
<p data-track="78"><strong>(2)Nacos对临时的服务实例进行健康检查的机制</strong></p>
<p data-track="79">临时的服务实例默认会每隔5s上报一次心跳给Nacos，Nacos如果15s没收到心跳就标记该服务实例为不健康，Nacos如果超过30s没收到心跳就摘除这个服务实例。</p>
<p data-track="80">&nbsp;</p>
<p data-track="81"><strong>(3)Nacos对持久化的服务实例进行健康检查的机制</strong></p>
<p data-track="82">Nacos会每隔20s主动对服务实例检查一次。如果检查失败，发现服务实例为不健康状态，也不会摘除这个服务实例。默认情况下，不健康的服务实例Nacos是不会返回的。</p>
<p data-track="83">&nbsp;</p>
<p data-track="84"><strong>7.Nacos保护阈值机制防止高并发下出现服务雪崩</strong></p>
<p data-track="85">如果健康的服务实例比例太低，会导致健康的服务实例请求压力过大。可能导致服务实例被打死，从而引发服务雪崩，所以引入了保护阈值。</p>
<p data-track="86">&nbsp;</p>
<p data-track="87">保护阈值，可以设置为0~1之间的比例。如果健康的服务实例比例太低，则把不健康的服务实例也返回服务调用方。此时会有很多请求交给不健康的服务实例来处理，会导致请求失败，但可以避免健康的服务实例出现因为请求流量过大而被压垮的问题。Nacos的保护阈值牺牲了一致性，得到了可用性。</p>
<p data-track="88">&nbsp;</p>
<p data-track="89">假设有10个服务实例，每个服务实例的极限QPS是700，当前QPS是500。同时假设保护阈值=0.8。</p>
<p data-track="90">&nbsp;</p>
<p data-track="91"><strong>情况一：</strong>如果仅仅有2个服务实例宕机，此时Nacos是不会去触发保护阈值的。此时每秒的5000请求会分配给8个服务实例，每个服务实例QPS是600+。每个服务实例都不会被压垮，因为每个服务实例的极限QPS是700。</p>
<p data-track="92">&nbsp;</p>
<p data-track="93"><strong>情况二：</strong>如果有4个服务实例宕机了，只剩下6个健康的服务实例。那么每秒的5000个请求分配给6个服务实例，每个服务实例QPS是800+。此时就会导致服务实例被压垮，所以需要Nacos触发保护阈值0.8。不能让请求分配给6个服务实例，而是继续让6健康 + 4不健康一起处理。</p>
<p data-track="94">&nbsp;</p>
<p data-track="95"><strong>8.Nacos保护阈值机制开启后的CAP问题</strong></p>
<p data-track="96">CAP：Consistency(一致性)、Available(可用性)、Partition(网络分区)。网络分区、一致性和可用性是不能同时兼得的。Nacos的保护阈值牺牲了一致性，得到了可用性。</p>
<p data-track="97">&nbsp;</p>
<p data-track="98"><strong>9.集成Nacos注册中心和配置中心的项目演示</strong></p>
<p data-track="99"><strong>(1)集成Nacos注册中心</strong></p>
<p data-track="100"><strong>(2)集成Nacos配置中心</strong></p>
<p data-track="101">&nbsp;</p>
<p data-track="102"><strong>(1)集成Nacos注册中心</strong></p>
<p data-track="103">首先需要把订单服务、库存服务两个服务都注册到Nacos中去。库存服务要告诉Nacos注册中心，它的IP地址具体是多少。订单服务需要从Nacos注册中心获取库存服务登记的IP地址。这样订单服务才能找到库存服务，进行服务调用。</p>
<p data-track="104">&nbsp;</p>
<p data-track="105">库存服务如何实现将服务注册到Nacos中：</p>
<p data-track="106"><strong>步骤一：在pom.xml文件中引入Nacos注册中心的依赖</strong></p>
<pre class="highlighter-hljs"><code>&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;
&lt;/dependency&gt;</code></pre>
<p data-track="108"><strong>步骤二：application.properties中配置Nacos服务地址</strong></p>
<p data-track="109">更多详细的配置可以参考地址：</p>
<pre class="highlighter-hljs"><code>https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-discovery</code></pre>
<pre class="highlighter-hljs"><code>spring:
    application:
        name: stock-service
    cloud:
        nacos:
            # 注册中心
            discovery:
                server-addr: http://127.0.0.1:8848</code></pre>
<p data-track="112"><strong>步骤三：启动库存服务</strong></p>
<p data-track="113">此时查看Nacos控制台，就多了一个stock-service的服务了。</p>
<div class="pgc-img"><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/00af971800514b0f816a354e69c73d02~tplv-obj.image?lk3s=ef143cfe&amp;traceid=20250424230159898AACE9E92BF4488553&amp;x-expires=2147483647&amp;x-signature=s%2Fh4GYo4BLgphgqFRrvOkFVm1w8%3D" data-ic="false" data-width="1080" data-height="338" data-ic-uri=""></div>
<p data-track="114">点击stock-service服务的详情进行查看，可以发现其IP和Port都登记好了。</p>
<div class="pgc-img"><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/e752d5e3efae485c8e05e285a1ded0e3~tplv-obj.image?lk3s=ef143cfe&amp;traceid=20250424230159898AACE9E92BF4488553&amp;x-expires=2147483647&amp;x-signature=96fPLmqOez1ZQY9l1Y4DdL6d1ug%3D" data-ic="false" data-width="1080" data-height="789" data-ic-uri=""></div>
<p data-track="115">订单服务也是一样的步骤，将服务注册到Nacos中。</p>
<p data-track="116">&nbsp;</p>
<p data-track="117"><strong>步骤四：通过服务中心进行服务调用演示</strong></p>
<p data-track="118">在order-service订单服务中，通过使用Feign来调用库存服务。</p>
<pre class="highlighter-hljs"><code>package com.demo.order.service;

import com.demo.order.feign.StockService;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@AllArgsConstructor
public class OrderService {
    private final StockService stockService;
    public Integer getProductStock(Integer productId) {
        return stockService.selectStockByProductId(productId);
    }
}

—————————————————————————————————————————————————————————————
package com.demo.order.feign;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

@FeignClient(name = "stock-service")
public interface StockService {
    //查询库存
    @GetMapping(value = "/stock/getStockByProductId")
    Integer selectStockByProductId(@RequestParam("productId") Integer productId);
}</code></pre>
<p data-track="120"><strong>(2)集成Nacos配置中心</strong></p>
<p data-track="121">问题：为什么要选用Nacos？</p>
<p data-track="122">Nacos比其他注册中心多了一个配置中心，可以统一管理项目的配置文件。并且能够做到无需重启项目，也能感知配置文件的修改。</p>
<p data-track="123">&nbsp;</p>
<p data-track="124"><strong>步骤一：在Nacos控制台创建对应的配置文件</strong></p>
<p data-track="125">打开Nacos后台，配置管理 -&gt; 配置列表 -&gt; 点击+号，创建一个配置文件。</p>
<div class="pgc-img"><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/50e7e201430b4c7c82ccbad2369b8232~tplv-obj.image?lk3s=ef143cfe&amp;traceid=20250424230159898AACE9E92BF4488553&amp;x-expires=2147483647&amp;x-signature=zI8AUyQ65QwDrzcAq%2BAFc6BUoxI%3D" data-ic="false" data-width="1080" data-height="246" data-ic-uri=""></div>
<div class="pgc-img"><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/f3581216e5ba47e59e45df22981f0a86~tplv-obj.image?lk3s=ef143cfe&amp;traceid=20250424230159898AACE9E92BF4488553&amp;x-expires=2147483647&amp;x-signature=KWTed2OOWET24WaNkWBL%2F91G9%2Fc%3D" data-ic="false" data-width="1080" data-height="493" data-ic-uri=""></div>
<p data-track="126">这里的Data ID可以理解为配置文件名字，具有唯一性。Groups相当于分组，可以分不同的环境、不同的业务。配置格式这里选择的是YAML，最后按照所选格式，把配置内容放进去。</p>
<p data-track="127">&nbsp;</p>
<p data-track="128"><strong>步骤二：引入Nacos配置服务依赖</strong></p>
<p data-track="129">在Spring Boot项目的pom.xml文件中，引入Nacos配置中心的Maven依赖；</p>
<pre class="highlighter-hljs"><code>&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;
&lt;/dependency&gt;</code></pre>
<p data-track="131"><strong>步骤三：修改配置文件名</strong></p>
<p data-track="132">把配置文件的文件名改成bootstrap.yml，默认是application.yml。</p>
<p data-track="133">&nbsp;</p>
<p data-track="134"><strong>步骤四：配置Nacos配置中心信息</strong></p>
<p data-track="135">在bootstrap.yml文件中，新增Nacos配置中心相关配置：</p>
<pre class="highlighter-hljs"><code>spring:
    application:
        name: stock-service
        cloud:
            nacos:
                # 配置中心
                config:server-addr: http://124.223.102.236:8848
                    ## 配置文件前缀
                    prefix: stock-service
                    # 配置文件类型
                    file-extension: yml
                # 注册中心
                discovery:
                    server-addr: http://124.223.102.236:8848</code></pre>
<p data-track="137"><strong>步骤五：配置中心演示</strong></p>
<p data-track="138">下面在stock-service库存服务中编写一个User实体类代码，进行测试。@Value注解的意思就是从配置文件中去读取这个属性。@RefreshScope这个注解是表示动态刷新，动态感知配置文件变化。如果不加这个注解，修改Nacos上的配置文件，则不会有动态刷新效果。</p>
<pre class="highlighter-hljs"><code>@Data
@Component
@RefreshScope
public class User {
    @Value("${user.userName}")
    private String userName;
}</code></pre>
<p data-track="140">编写一个Controller来测试，原本数据是李四。在Nacos控制台，把配置文件中的usereName属性，修改成王五后，项目不需要重新启动也能动态改变原来的值。</p>
<pre class="highlighter-hljs"><code>@RestController
@AllArgsConstructor
@RequestMapping("/user")
public class UserController {
    private final User user;
    
    @GetMapping("/getUserName")
    public String getUserName() {
        return user.getUserName();
    }
}</code></pre>
<p data-track="142"><strong>(3)客户端的版本选择</strong></p>
<p data-track="143">Nacos服务端使用什么版本，其他组件也有对应使用版本要求。所以一开始在组件选型时，得先了解一下版本的选择，如下：</p>
<div class="pgc-img"><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/30c27e1630294a34b381b726c555e241~tplv-obj.image?lk3s=ef143cfe&amp;traceid=20250424230159898AACE9E92BF4488553&amp;x-expires=2147483647&amp;x-signature=AL5WIIDsmTcfRI9%2FX%2F8TJ3bS33M%3D" data-ic="false" data-width="1080" data-height="714" data-ic-uri=""></div>
<p data-track="144">Demo项目里的Nacos使用版本是1.4.1，那么对应Spring Cloud Alibaba的版本至少是2.2.4 Release。如下：</p>
<pre class="highlighter-hljs"><code>&lt;properties&gt;
    &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;spring-cloud-alibaba.version&gt;2.2.5.RELEASE&lt;/spring-cloud-alibaba.version&gt;
&lt;/properties&gt;</code></pre>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.41584585223148146" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-24 23:13">2025-04-24 23:13</span>&nbsp;
<a href="https://www.cnblogs.com/mjunz">东阳马生架构</a>&nbsp;
阅读(<span id="post_view_count">13</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18845612);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18845612', targetLink: 'https://www.cnblogs.com/mjunz/p/18845612', title: 'Nacos简介—1.Nacos使用简介' })">举报</a>
</div>
        