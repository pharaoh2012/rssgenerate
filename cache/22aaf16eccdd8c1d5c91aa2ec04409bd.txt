
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/SavionZhang/p/18676306" title="发布于 2025-01-17 17:47">
    <span role="heading" aria-level="2">使用 pdf.js 通过文件流方式加载pdf文件</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<blockquote>
<p><strong><span style="font-size: 14px; font-family: &quot;Microsoft YaHei&quot;">关于Pdf.js的基础知识，请参考我的博客&nbsp;</span></strong></p>
<ul>
<li><span style="font-size: 14px"><a href="https://www.cnblogs.com/SavionZhang/p/11757849.html" target="_blank"> 使用 pdf.js 在网页中加载 pdf 文件</a></span></li>
<li><a href="https://www.cnblogs.com/SavionZhang/p/11765743.html" target="_blank"><span style="font-size: 14px">使用 pdf.js 跨域问题的处理方法</span></a></li>
</ul>
</blockquote>
<p><span style="font-size: 16px; font-family: &quot;Microsoft YaHei&quot;">&nbsp; &nbsp; &nbsp; &nbsp;上面两篇博客中介绍的内容都是基于直接加载远程服务器中静态PDF文件（即URL地址）来渲染PDF的，实际业务场景中，如与第三方系统对接过程中，第三方系统不直接公开PDF的URL地址，而是通过接口提供PDF文件流，这种方式处理起来就相对麻烦一点。本篇文章详细介绍使用Pdf.js插件通过读取pdf文件流的方式来渲染PDF文件。</span></p>
<p><span style="font-size: 16px; font-family: &quot;Microsoft YaHei&quot;">先看效果</span></p>
<p><img src="https://img2024.cnblogs.com/blog/142275/202501/142275-20250117100131358-869478581.png" loading="lazy"></p>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 16px">点击按钮打开PDF渲染页面</span></p>
<p><img src="https://img2024.cnblogs.com/blog/142275/202501/142275-20250117143047064-1292668778.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-size: 16px; font-family: &quot;Microsoft YaHei&quot;">下面介绍实现的完整流程</span></p>
<div id="comment_nav_green"><strong>第1步：编写WebAPI接口，返回PDF文件流</strong></div>
<div><span style="font-size: 16px; font-family: &quot;Microsoft YaHei&quot;">假设pdf文件在服务器的D盘测试目录下，通过File.OpenRead()方法读取并返回pdf文件流。</span></div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Microsoft.AspNetCore.Mvc;
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span> 
<span style="color: rgba(0, 128, 128, 1)"> 3</span> <span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> SparkWuTong.WebApiX6.Controllers;
</span><span style="color: rgba(0, 128, 128, 1)"> 4</span> 
<span style="color: rgba(0, 128, 128, 1)"> 5</span> <span style="color: rgba(0, 0, 0, 1)">[ApiController]
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span> [Route(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">api/[controller]/[action]</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
</span><span style="color: rgba(0, 128, 128, 1)"> 7</span> <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> FileTestController : ControllerBase
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span> <span style="color: rgba(0, 0, 0, 1)">{
</span><span style="color: rgba(0, 128, 128, 1)"> 9</span> <span style="color: rgba(0, 0, 0, 1)">    [HttpGet]
</span><span style="color: rgba(0, 128, 128, 1)">10</span> <span style="color: rgba(0, 0, 0, 1)">    [HttpPost]
</span><span style="color: rgba(0, 128, 128, 1)">11</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">async</span> Task&lt;IActionResult&gt;<span style="color: rgba(0, 0, 0, 1)"> ReadFileStream()
</span><span style="color: rgba(0, 128, 128, 1)">12</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">13</span>         <span style="color: rgba(0, 0, 255, 1)">var</span> filePath = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">D:\\测试\\发票.pdf</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">14</span>         <span style="color: rgba(0, 0, 255, 1)">var</span> stream =<span style="color: rgba(0, 0, 0, 1)"> System.IO.File.OpenRead(filePath);
</span><span style="color: rgba(0, 128, 128, 1)">15</span>         <span style="color: rgba(0, 0, 255, 1)">var</span> result = <span style="color: rgba(0, 0, 255, 1)">new</span> FileStreamResult(stream, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">application/octet-stream</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">16</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">17</span>             FileDownloadName = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">发票.pdf</span><span style="color: rgba(128, 0, 0, 1)">"</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 可选：设置下载文件名</span>
<span style="color: rgba(0, 128, 128, 1)">18</span> <span style="color: rgba(0, 0, 0, 1)">        };
</span><span style="color: rgba(0, 128, 128, 1)">19</span> 
<span style="color: rgba(0, 128, 128, 1)">20</span>         <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> Task.FromResult(result);
</span><span style="color: rgba(0, 128, 128, 1)">21</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">22</span> }</pre>
</div>
<p><span style="font-size: 16px; font-family: &quot;Microsoft YaHei&quot;">还有另外一种情况，读取远程服务器中PDF文件，如下示例</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Microsoft.AspNetCore.Mvc;
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span> 
<span style="color: rgba(0, 128, 128, 1)"> 3</span> <span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> SparkWuTong.WebApiX6.Controllers;
</span><span style="color: rgba(0, 128, 128, 1)"> 4</span> 
<span style="color: rgba(0, 128, 128, 1)"> 5</span> <span style="color: rgba(0, 0, 0, 1)">[ApiController]
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span> [Route(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">api/[controller]/[action]</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
</span><span style="color: rgba(0, 128, 128, 1)"> 7</span> <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> FileTestController : ControllerBase
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span> <span style="color: rgba(0, 0, 0, 1)">{
</span><span style="color: rgba(0, 128, 128, 1)"> 9</span> <span style="color: rgba(0, 0, 0, 1)">    [HttpGet]
</span><span style="color: rgba(0, 128, 128, 1)">10</span> <span style="color: rgba(0, 0, 0, 1)">    [HttpPost]
</span><span style="color: rgba(0, 128, 128, 1)">11</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">async</span> Task&lt;IActionResult&gt;<span style="color: rgba(0, 0, 0, 1)"> ReadFileStream()
</span><span style="color: rgba(0, 128, 128, 1)">12</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">13</span>         <span style="color: rgba(0, 0, 255, 1)">var</span> fileUrl = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://localhost:5600/plugins/pdf-js/test_file.pdf</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">14</span>         HttpClient client = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> HttpClient();
</span><span style="color: rgba(0, 128, 128, 1)">15</span>         <span style="color: rgba(0, 0, 255, 1)">var</span> stream = <span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> client.GetStreamAsync(fileUrl);
</span><span style="color: rgba(0, 128, 128, 1)">16</span> 
<span style="color: rgba(0, 128, 128, 1)">17</span>         <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> FileStreamResult(stream, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">application/octet-stream</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">18</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">19</span>             FileDownloadName = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">测试文件.pdf</span><span style="color: rgba(128, 0, 0, 1)">"</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 可选：设置下载文件名</span>
<span style="color: rgba(0, 128, 128, 1)">20</span> <span style="color: rgba(0, 0, 0, 1)">        };
</span><span style="color: rgba(0, 128, 128, 1)">21</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">22</span> }</pre>
</div>
<blockquote>
<p><span style="font-size: 14px; font-family: &quot;Microsoft YaHei&quot;"><strong>提示：两种读取pdf文件的方式都可以使用，具体依赖于实际应用场景。</strong></span></p>
</blockquote>
<div id="comment_nav_green"><strong>第2步：基于jQuery ajax 封装读取接口并返回文件流的方法</strong></div>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 16px">jQuery是大家开发中最常用的脚本库之一，其中 ajax() 方法的能力超级强大，经常用于发送 get/post请求服务器的资源，绝大部分情况下响应格式为&nbsp;application/json。如果发送请求到上述WebAPI接口是无法正常接收数据的，因为接口返回内容的是文件流。为了能够接收到文件流，这里需要做特殊的配置：</span></p>
<p><img src="https://img2024.cnblogs.com/blog/142275/202501/142275-20250117102235086-2017050823.png" alt="" loading="lazy"></p>
<ul>
<li><span style="font-size: 16px; font-family: &quot;Microsoft YaHei&quot;">&nbsp;核心1：（1515行）设置 <span style="color: rgba(0, 0, 255, 1)"><strong>mimeType</strong></span> 为&nbsp;<span style="color: rgba(0, 0, 255, 1)"><strong>text/plain; charset=x-user-defined </strong><span style="color: rgba(0, 0, 0, 1)">意思是将以普通文本的格式接收 WebAPI 返回的内容（非常规的 application/json）。</span></span></span></li>
<li><span style="font-size: 16px; font-family: &quot;Microsoft YaHei&quot;">&nbsp;核心2：（1518 至 1524行）接收到 data 数据后，将其转换为 pdf.js 库中定义的 Uint8Array 类型。实现思路参考 pdf.js 中的方法。</span></li>
</ul>
<p>　<img src="https://img2024.cnblogs.com/blog/142275/202501/142275-20250117135042351-2030841520.png" alt="" loading="lazy"></p>
<ul>
<li><span style="font-size: 16px; font-family: &quot;Microsoft YaHei&quot;">核心3：（1527行）利用浏览器的File对象将字节数组转换为pdf文件，类型为 application/pdf;charset-UTF-8。</span></li>
<li><span style="font-size: 16px; font-family: &quot;Microsoft YaHei&quot;">核心4：（1528行）为pdf文件创建一个临时访问的地址。格式为&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">blob:http://localhost:5600/75f4c795-52fb-4aaa-9204-9744e92649abjiang</span></span></li>
</ul>
<blockquote>
<p><span style="color: rgba(255, 0, 0, 1)">将生成的blob地址拷贝到浏览器中访问，并不能成功。</span></p>
<p><span>----------------------------------------------------------------------------</span></p>
<p><span>URL.createObjectURL() 方法会根据传入的参数创建一个指向该参数对象的URL。这个URL的生命仅存在于它被创建的这个文档里，新的对象URL指向执行的File对象或者是Blob对象。</span></p>
<p><span>语法格式为</span></p>
<div class="cnblogs_code">
<pre>objectURL = URL.createObjectURL(blob || file);</pre>
</div>
<ul>
<li><strong>参数：</strong></li>
</ul>
<p>　　File对象或者Blob对象</p>
<ul>
<li style="list-style-type: none">
<ul>
<li>File对象就是一个文件，比如我用input type="file"标签来上传文件，那么里面的每个文件都是一个File对象。</li>
<li>Blob对象就是二进制数据，比如通过new Blob()创建的对象就是Blob对象。又比如,在XMLHttpRequest里，如果指定responseType为blob，那么得到的返回值也是一个blob对象。</li>
</ul>
</li>
<li><strong>注意点：</strong></li>
</ul>
<p><span style="color: rgba(0, 0, 255, 1)">　　每次调用createObjectURL的时候，一个新的URL对象就被创建了。即使你已经为同一个文件创建过一个URL，如果你不再需要这个对象，要释放它，需要使用URL.revokeObjectURL()方法。当页面被关闭，浏览器会自动释放它，但是为了最佳性能和内存使用，当确保不再用得到它的时候,就应该释放它。</span></p>
</blockquote>
<blockquote>
<p><span>有的同学会说为什么一定要求用jQuery ajax()呢，确实还有很多其他便捷的方法来读取文件流，比如 fetch()方法就非常的简单</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 255, 1)">var</span> newPdfUrl = <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">http://localhost:5610/api/FileTest/ReadFileStream</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span> <span style="color: rgba(0, 0, 0, 1)">fetch(newPdfUrl)
</span><span style="color: rgba(0, 128, 128, 1)"> 3</span> <span style="color: rgba(0, 0, 0, 1)">    .then(function (response) {
</span><span style="color: rgba(0, 128, 128, 1)"> 4</span>         <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (response.ok) {
</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>             <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> response.arrayBuffer();
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)"> 7</span>         <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>             spark.alertErrorX(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">从服务器获取pdf文件失败！</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 9</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">10</span> <span style="color: rgba(0, 0, 0, 1)">    })
</span><span style="color: rgba(0, 128, 128, 1)">11</span>     .then(buffer =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)">12</span>        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO </span>
<span style="color: rgba(0, 128, 128, 1)">13</span> <span style="color: rgba(0, 0, 0, 1)">    })
</span><span style="color: rgba(0, 128, 128, 1)">14</span>     .<span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)">(function (err) {
</span><span style="color: rgba(0, 128, 128, 1)">15</span>         log(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">------插件读取pdf文件发生异常：</span><span style="color: rgba(128, 0, 0, 1)">'</span> +<span style="color: rgba(0, 0, 0, 1)"> err);
</span><span style="color: rgba(0, 128, 128, 1)">16</span>     });</pre>
</div>
<p>还有原生的&nbsp;&nbsp;XMLHttpRequest 对象也可以直接读取文件流</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 255, 1)">var</span> xhr = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> XMLHttpRequest();
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span> xhr.open(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">GET</span><span style="color: rgba(128, 0, 0, 1)">'</span>, pdfUrl, <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 3</span> xhr.responseType = <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">blob</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 4</span> xhr.onreadystatechange =<span style="color: rgba(0, 0, 0, 1)"> function () {
</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>     <span style="color: rgba(0, 0, 255, 1)">if</span> (xhr.readyState !== <span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">) {
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span>         <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 7</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span> 
<span style="color: rgba(0, 128, 128, 1)"> 9</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> status =<span style="color: rgba(0, 0, 0, 1)"> xhr.status;
</span><span style="color: rgba(0, 128, 128, 1)">10</span>     <span style="color: rgba(0, 0, 255, 1)">if</span> ((status &gt;= <span style="color: rgba(128, 0, 128, 1)">200</span> &amp;&amp; status &lt; <span style="color: rgba(128, 0, 128, 1)">300</span>) || status === <span style="color: rgba(128, 0, 128, 1)">304</span><span style="color: rgba(0, 0, 0, 1)">) {
</span><span style="color: rgba(0, 128, 128, 1)">11</span>        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO </span>
<span style="color: rgba(0, 128, 128, 1)">12</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">13</span> <span style="color: rgba(0, 0, 0, 1)">};
</span><span style="color: rgba(0, 128, 128, 1)">14</span> xhr.send();</pre>
</div>
</blockquote>
<div id="comment_nav_green"><strong>第3步：利用 pdf.js 的 viewer.html 渲染文件</strong></div>
<p><img src="https://img2024.cnblogs.com/blog/142275/202501/142275-20250117142207358-1215274328.png" alt="" loading="lazy"></p>
<ul>
<li><span style="font-size: 16px; font-family: &quot;Microsoft YaHei&quot;">12行，定义一个iframe，用于加载pdf.js中提供的示例页面 view.html。</span></li>
<li><span style="font-size: 16px; font-family: &quot;Microsoft YaHei&quot;">32行，将第2步中创建的blob url 赋值给&nbsp;&nbsp;view.html 页面的 file 参数。</span></li>
</ul>
<p><span style="font-size: 16px; font-family: &quot;Microsoft YaHei&quot;">完成以上步骤后，在网页中即可完整的渲染pdf文件了</span></p>
<p><img src="https://img2024.cnblogs.com/blog/142275/202501/142275-20250117143042143-285345367.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
</div>
<div id="MySignature" role="contentinfo">
    <div style="margin-bottom:15px;border: 1px solid #ececec; padding: 5px 10px; background: #DFFFA3; color: #555555; padding: 15px 20px 15px 30px;font-size: 14px; font-family: 'Microsoft Yahei'; clear: both;">
<p><strong>成在管理，败在经验；嬴在选择，输在不学！&nbsp; 贵在坚持！</strong></p>
<p>&nbsp;</p>

<p>&nbsp;<img src="https://img2020.cnblogs.com/blog/142275/202105/142275-20210511151906789-1718967820.png"><strong>个人作品</strong></p>
<p>&nbsp; &nbsp;</p>

<p>&nbsp; &nbsp;<b> BIMFace.SDK.NET</b></p>
<p>&nbsp; &nbsp; &nbsp;开源地址：<a href="https://gitee.com/NAlps/BIMFace.SDK" target="_blank">https://gitee.com/NAlps/BIMFace.SDK</a></p>
<p>&nbsp; &nbsp; &nbsp;系列博客：<a href="https://www.cnblogs.com/SavionZhang/p/11424431.html" target="_blank">https://www.cnblogs.com/SavionZhang/p/11424431.html</a></p>
<p>&nbsp; &nbsp; &nbsp;系列视频：<a href="https://www.cnblogs.com/SavionZhang/p/14258393.html" target="_blank">https://www.cnblogs.com/SavionZhang/p/14258393.html</a></p>

<div style="margin-top:15px;margin-bottom:15px;border: 1px solid #ececec; background: #DFFFA3; color: #555555; padding: 15px 20px 15px 30px;font-size: 14px; font-family: 'Microsoft Yahei'; clear: both;">
<p>&nbsp;<img src="https://img2020.cnblogs.com/blog/142275/202105/142275-20210511143255073-1133010989.png"><strong>技术栈</strong></p>
<p>&nbsp; &nbsp;</p>
<p>&nbsp;1、Visual Studio、.NET Core/.NET、MVC、Web API、RESTful API、gRPC、SignalR、Java、Python</p>
<p>&nbsp;2、jQuery、Vue.js、Bootstrap、ElementUI</p>
<p>&nbsp;3、数据库：分库分表、读写分离、SQLServer、MySQL、PostgreSQL、Redis、MongoDB、ElasticSearch、达梦DM</p>
<p>&nbsp;4、架构：DDD、ABP、SpringBoot、jFinal</p>
<p>&nbsp;5、环境：跨平台、Windows、Linux、Nginx</p>
<p>&nbsp;6、移动App：Android、IOS、HarmonyOS、微信小程序、钉钉、uni-app、MAUI</p>
<p>&nbsp; &nbsp;</p>
<p>&nbsp;分布式、高并发、云原生、微服务、Docker、CI/CD、DevOps、K8S；Dapr、RabbitMQ、Kafka、RPC、Elasticsearch。</p>
<p>&nbsp; &nbsp;</p>
<p><strong>欢迎关注作者头条号<a href="https://www.toutiao.com/c/user/token/MS4wLjABAAAAbk25bkHtt-JXKOYM-UMlAriUxIAiyJZvE-qxTwnNe4c/" target="_blank"> 张传宁IT讲堂</a>，获取更多IT文章、视频等优质内容。</strong></p>
</div>

<div style="border: 1px solid #ececec; padding: 5px 10px; background: #4bacc6; color: #ffffff;font-size: 14px; font-family: 'Microsoft Yahei';">
    <p>出处：www.cnblogs.com/SavionZhang</p>
	<p>作者：张传宁 &nbsp;&nbsp;技术顾问、培训讲师、微软MCP、系统架构设计师、系统集成项目管理工程师、科技部创新工程师。</p>
    <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;专注于企业级通用开发平台、工作流引擎、自动化项目(代码)生成器、SOA 、DDD、 云原生(Docker、微服务、DevOps、CI/CD）；PDF、CAD、BIM 审图等研究与应用。</p>
	<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;多次参与电子政务、图书教育、生产制造等企业级大型项目研发与管理工作。</p>
	<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;熟悉中小企业软件开发过程：可行调研、需求分析、架构设计、编码测试、实施部署、项目管理。通过技术与管理帮助中小企业实现互联网转型升级全流程解决方案。</p>
    <p><span style="font-size: 14px; color: #ffffff; font-family: &quot;Microsoft YaHei&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p>
    <hr style="border: 1px solid #eaeaea">
	 <p><span style="font-size: 14px; color: #ffffff; font-family: &quot;Microsoft YaHei&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    </span></p><p>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。
    </p>
	<p>如有问题，可以通过邮件<a href="mailto:savionzhang@qq.com"><span style="font-size: 10pt">905442693@qq.com</span></a>联系。共同交流、互相学习。</p>
	<p>如果您觉得文章对您有帮助，请点击文章右下角【推荐】。您的鼓励是作者持续创作的最大动力！</p>
	</div>
</div>



</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.108159081258102" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-17 17:48">2025-01-17 17:47</span>&nbsp;
<a href="https://www.cnblogs.com/SavionZhang">张传宁</a>&nbsp;
阅读(<span id="post_view_count">193</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18676306" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18676306);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18676306', targetLink: 'https://www.cnblogs.com/SavionZhang/p/18676306', title: '使用 pdf.js 通过文件流方式加载pdf文件' })">举报</a>
</div>
        