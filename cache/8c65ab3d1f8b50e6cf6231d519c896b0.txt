
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/binbin2002/p/18847949" title="发布于 2025-04-26 15:46">
    <span role="heading" aria-level="2">松灵机器人scout mini 自主导航(5)——采用 LIO-SAM +CMU exploration</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>重操旧业，最近实验室又需要测试无人车导航算法，因此又重新启动了松灵机器人scout mini小车 自主导航项目。通过调研，最终选择了前几年比较火的CMU团队的策略(<a href="https://www.cmu-exploration.com/" target="_blank" rel="noopener nofollow">https://www.cmu-exploration.com/</a>)。</p>
<h1 id="cmu-exploration-介绍">CMU exploration 介绍</h1>
<p>CMU exploration是一项非常优秀的开源工作，得到了广泛的认可。作者等人维护了一个社区用于解答提问，详细可见链接</p>
<blockquote>
<p>参考引用</p>
<ul>
<li><a href="https://bbs.csdn.net/forums/TARE" target="_blank" rel="noopener nofollow">https://bbs.csdn.net/forums/TARE</a></li>
<li><a href="https://blog.csdn.net/qq_42994487/article/details/130307410" target="_blank" rel="noopener nofollow">https://blog.csdn.net/qq_42994487/article/details/130307410</a></li>
</ul>
</blockquote>
<p>算法方面我就不做过多的介绍了，详细可见对应的论文和代码地址，本文只介绍在仿真配置流程和过程中遇到的一系列问题。</p>
<ul>
<li><a href="https://frc.ri.cmu.edu/~zhangji/publications/ICRA_2022.pdf" target="_blank" rel="noopener nofollow">ICRA 2022：Autonomous Exploration Development Environment and the Planning Algorithms</a></li>
<li><a href="https://frc.ri.cmu.edu/~zhangji/publications/IROS_2022.pdf" target="_blank" rel="noopener nofollow">IROS 2022：FAR planner: Fast, attemptable route planner using dynamic visibility update<br>
FAR planner</a></li>
</ul>
<h1 id="仿真小车搭建">仿真小车搭建</h1>
<p>在之前的文章中我们已经实现了小车仿真环境搭建，并成功实现了LIO-SAM算法仿真。详细内容可以参考链接</p>
<p><a href="https://www.cnblogs.com/binbin2002/p/18499013" target="_blank">https://www.cnblogs.com/binbin2002/p/18499013</a></p>
<h1 id="导航环境搭建">导航环境搭建</h1>
<p>CMU团队开发了一个详细的仿真环境，；里面包含室内环境、校园、停车场、隧道、森林等仿真环境。<br>
<img src="https://img2023.cnblogs.com/blog/3475786/202504/3475786-20250426142328713-1117011808.png" alt="img" loading="lazy"></p>
<pre><code class="language-bash">#  1.安装依赖
sudo apt update
sudo apt install libusb-dev

# 2. 克隆源码
git clone https://github.com/HongbiaoZ/autonomous_exploration_development_environment.git


# 3.分支检查与编译安装
cd autonomous_exploration_development_environment
git checkout melodic # Ubuntu 20.04 则将 melodic 替换为 noetic
catkin_make

# 4. 通过脚本安装仿真环境
./src/vehicle_simulator/mesh/download_environments.sh

# 5. 启动开发环境
source devel/setup.sh
roslaunch vehicle_simulator system_xxx.launch
# xxx 可替换为对应的 5 种环境之一：campus、forest、garage、indoor、tunnel
</code></pre>
<pre><code class="language-bash"># 案例：发送一系列 waypoint，同时发送导航边界和速度，车辆在跟踪 waypoint 的同时在边界内行驶（另开一个终端）
cd autonomous_exploration_development_environment
source devel/setup.sh
roslaunch waypoint_example waypoint_example_garage.launch

</code></pre>
<h1 id="规划算法搭建">规划算法搭建</h1>
<p>CMU提供了多个导航算法，例如far_planner tare_planner，DSVP等导航策略。可以根据需求自己选择规划方法</p>
<ul>
<li>方法1 ：采用tare_planner</li>
</ul>
<pre><code class="language-bash"># 1. 克隆源码
git clone https://github.com/caochao39/tare_planner.git

# 2. 编译安装
cd tare_planner
catkin_make

# 3. 启动开发环境
cd ~/autonomous_exploration_development_environment
source devel/setup.sh
roslaunch vehicle_simulator system_xxx.launch
# xxx 可替换为对应的 5 种环境之一：campus、forest、garage、indoor、tunnel

# 4. 启动 TARE（另开一个终端）
cd ~/tare_planner
source devel/setup.sh
roslaunch tare_planner explore_xxx.launch
</code></pre>
<ul>
<li>方法2：采用 far_planner</li>
</ul>
<pre><code class="language-bash"># 1. 克隆源码
git clone https://github.com/MichaelFYang/far_planner

# 2. 编译安装
cd far_planner
catkin_make

# 3. 启动开发环境
cd ~/autonomous_exploration_development_environment
source devel/setup.sh
roslaunch vehicle_simulator system_xxx.launch
# xxx 可替换为对应的 5 种环境之一：campus、forest、garage、indoor、tunnel

# 4. 启动 FAR Planner（另开一个终端）
cd ~/far_planner
source devel/setup.sh
roslaunch far_planner far_planner.launch

</code></pre>
<h1 id="仿真启动效果">仿真启动效果</h1>
<h2 id="启动-autonomous_exploration_development_environment以garage为例">启动 autonomous_exploration_development_environment(以garage为例)</h2>
<p>在<code>system_garage.launch</code>中，修改 <code>gazebo_gui</code>为<code>true</code>，可以启动gazebo环境仿真</p>
<p>启动仿真环境效果如下：<br>
<img src="https://img2023.cnblogs.com/blog/3475786/202504/3475786-20250426144057363-85663789.png" alt="img" loading="lazy"></p>
<h2 id="启动-far_planner-规划">启动 far_planner 规划</h2>
<p>启动 far_planner 效果如下：</p>
<p><img src="https://img2023.cnblogs.com/blog/3475786/202504/3475786-20250426144108673-881728166.png" alt="img" loading="lazy"></p>
<p>可以通过<code>rviz</code>选择goalpoint 用于导航</p>
<blockquote>
<p>右边的按钮作用如下:</p>
<ul>
<li>Reset Visibility Graph：
<ul>
<li>重置可视图. 算法中会提供各个环境中已经探索完的全局V-graph，可以进行重置可视图。同时可以通过勾选 Update Visibility Graph，动态更新可试图。</li>
<li>如果想read V-graph 进来然后快速的进行规划和导航操作。此时便可把 Update Visibility Graph 取消勾选（如果环境是动态的则需要勾选以实现更新）</li>
</ul>
</li>
<li>Resume Navigation to Goal:
<ul>
<li>重新设置导航目标点</li>
</ul>
</li>
<li>Read &amp; Save:
<ul>
<li>保存已经探索生成的V-Graph / 读取之前保存的V-Graph</li>
</ul>
</li>
<li>Planning Attemptable:
<ul>
<li>如果取消勾选，则系统默认只会规划已知环境的路径（不会去尝试未知区域），当把 Goalpoint 放在未知区域时才会自动切换为 Attemptable 模式下的规划</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="cmu-exploration与scout-mini-小车lio-sam结合">CMU exploration与scout mini 小车+LIO-SAM结合</h1>
<h2 id="修改loam_interfacelaunch-接口">修改loam_interface.launch 接口</h2>
<p>算法还提供了<code>system_real_robot.launch</code>能够直接进行实车部署。实车和用他自带的仿真环境在于定位方法不一定。</p>
<ul>
<li>gazebo仿真中采用的时gazebo自带的真实位置定位</li>
<li>实车则采用SLAM算法进行定位和建图</li>
</ul>
<p>幸运的是，他们开放了SLAM外部接口。能够兼容目前市场上主流的激光SLAM算法：LOAM、A-LOAM、LeGO-LOAM、LIO-SAM、LIO-mapping、FAST-LIO2、Faster-LIO</p>
<ul>
<li>stateEstimationTopic = /lio_sam/mapping/odometry</li>
<li>registeredScanTopic = /lio_sam/mapping/cloud_registered</li>
<li>flipStateEstimation = false</li>
<li>flipRegisteredScan = false</li>
</ul>
<p>下面我们以之前的LIO-SAM为例进行说明</p>
<pre><code class="language-bash">&lt;!-- loam-interface.launch内容如下 --&gt;
&lt;launch&gt;

  &lt;node pkg="loam_interface" type="loamInterface" name="loamInterface" output="screen" required="true"&gt;
    &lt;param name="stateEstimationTopic" type="string" value="/lio_sam/mapping/odometry" /&gt;
    &lt;param name="registeredScanTopic" type="string" value="/lio_sam/mapping/cloud_registered" /&gt;

     &lt;!-- 不同的slam算法发布的odometry以及registered cloud坐标系不一样，需要修改话题名称。而且，不同坐标系的方向不一样，有时候需要进行坐标旋转转换，需要坐标转换则需要修改flipStateEstimation 为true --&gt;

    &lt;param name="flipStateEstimation" type="bool" value="false" /&gt;
    &lt;param name="flipRegisteredScan" type="bool" value="false" /&gt;
    &lt;param name="sendTF" type="bool" value="true" /&gt;
    &lt;param name="reverseTF" type="bool" value="false" /&gt;
  &lt;/node&gt;

&lt;/launch&gt;

</code></pre>
<blockquote>
<p>loam_interface相关设置链接: <a href="https://pan.baidu.com/s/14zw6TNMD4kDjT5vkh2tgmw?pwd=d72x" target="_blank" rel="noopener nofollow">https://pan.baidu.com/s/14zw6TNMD4kDjT5vkh2tgmw?pwd=d72x</a><br>
提取码:d72x</p>
</blockquote>
<h2 id="仿真运行">仿真运行</h2>
<pre><code class="language-bash"># 1.启动scout mini 仿真
cd scout_gazebo_sim
source devel/setup.bash
roslaunch scout_gazebo_sim scout_mini_playpen.launch

# 2.启动LIO-SAM
source devel/setup.bash
roslaunch lio_sam run.launch

# 3.启动 CMU_explaration real_robot
cd CMU_exploaration
source devel/setup.bash
roslaunch vehicle_simulator system_real_robot.launch 


# 4.启动 far_planner
source devel/setup.bash
roslaunch far_planner  far_planner.launch 
</code></pre>
<ol>
<li>
<p>启动scout 仿真<br>
<img src="https://img2023.cnblogs.com/blog/3475786/202504/3475786-20250426152549801-1477173177.png" alt="img" loading="lazy"></p>
</li>
<li>
<p>启动LIO-SAM<br>
<img src="https://img2023.cnblogs.com/blog/3475786/202504/3475786-20250426152608890-2012934193.png" alt="img" loading="lazy"></p>
</li>
<li>
<p>启动 system_real_robot.launch<br>
<img src="https://img2023.cnblogs.com/blog/3475786/202504/3475786-20250426152626708-405340705.png" alt="img" loading="lazy"></p>
</li>
<li>
<p>启动 far planner</p>
</li>
</ol>
<p><img src="https://img2023.cnblogs.com/blog/3475786/202504/3475786-20250426152644424-346376803.png" alt="img" loading="lazy"></p>
<ol start="5">
<li>导航效果图<br>
<img src="https://img2023.cnblogs.com/blog/3475786/202504/3475786-20250426152757859-1232756276.gif" alt="img" loading="lazy"></li>
</ol>
<h1 id="遇到问题汇总">遇到问题汇总</h1>
<h2 id="1-cmd_vel-话题类型不对">1. cmd_vel 话题类型不对</h2>
<pre><code class="language-bash">[ERROR] [1745573906.144386448]: Client [/scout_skid_steer_controller] wants topic /cmd_vel to have datatype/md5sum [geometry_msgs/Twist/9f195f881246fdfa2798d1d3eebca84a], but our version has [geometry_msgs/TwistStamped/98d34b0043a2093cf9d9345ab6eef12e]. Dropping connection.
</code></pre>
<p>在实际操作中发现cmd_vel话题不对，询问chatgpt发现是cmd_vel的类型不对，一个是<code>geometry_msgs/Twist</code>类型，一个是<code>geometry_msgs/TwistStamped </code>类型。我们需要保证消息类型一致</p>
<p><font color="red"> 解决方法：</font> 修改src/autonomous_exploration_development_environment/src/local_planner/src/pathFollower.cpp中的<code>cmd_vel</code>的类型。</p>
<pre><code class="language-c++">//pathFollower.cpp 的226-229行
    // ros::Publisher pubSpeed = nh.advertise&lt;geometry_msgs::TwistStamped&gt; ("/cmd_vel", 5);
    // geometry_msgs::TwistStamped cmd_vel;
    // cmd_vel.header.frame_id = "vehicle";
    ros::Publisher pubSpeed = nh.advertise&lt;geometry_msgs::Twist&gt;("/cmd_vel", 5);
    geometry_msgs::Twist cmd_vel;

//pathFollower.cpp 的335-343行
    // if (pubSkipCount &lt; 0) {
      //   cmd_vel.header.stamp = ros::Time().fromSec(odomTime);
      //   if (fabs(vehicleSpeed) &lt;= maxAccel / 100.0) cmd_vel.twist.linear.x = 0;
      //   else cmd_vel.twist.linear.x = vehicleSpeed;
      //   cmd_vel.twist.angular.z = vehicleYawRate;
      //   pubSpeed.publish(cmd_vel);

      //   pubSkipCount = pubSkipNum;
      // }
      if (pubSkipCount &lt; 0) {
        if (fabs(vehicleSpeed) &lt;= maxAccel / 100.0) cmd_vel.linear.x = 0;
        else cmd_vel.linear.x = vehicleSpeed;
        cmd_vel.angular.z = vehicleYawRate;
        pubSpeed.publish(cmd_vel);

        pubSkipCount = pubSkipNum;
      }
</code></pre>
<p>重新编译即可。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.026837803461805556" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-26 15:49">2025-04-26 15:46</span>&nbsp;
<a href="https://www.cnblogs.com/binbin2002">遥感摆烂人</a>&nbsp;
阅读(<span id="post_view_count">6</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18847949);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18847949', targetLink: 'https://www.cnblogs.com/binbin2002/p/18847949', title: '松灵机器人scout mini 自主导航(5)——采用 LIO-SAM +CMU exploration' })">举报</a>
</div>
        