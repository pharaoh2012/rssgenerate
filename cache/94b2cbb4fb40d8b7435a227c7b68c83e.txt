
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lori/p/18795570" title="发布于 2025-03-27 11:13">
    <span role="heading" aria-level="2">apisix~key-auth多消费的使用</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在 APISIX 中使用 <code>key-auth</code> 插件实现基于密钥的认证，以下是详细的配置步骤，包括如何保存密钥和证书，以及如何将这些信息分配给客户端 A 和 B。</p>
<hr>
<h3 id="场景说明"><strong>场景说明</strong></h3>
<ul>
<li>服务 C 是后端服务，需要通过 APISIX 代理。</li>
<li>客户端 A 和 B 需要唯一的密钥（<code>key</code>）来访问服务 C。</li>
<li>APISIX 使用 <code>key-auth</code> 插件对请求进行身份验证。</li>
</ul>
<hr>
<h3 id="步骤-1生成密钥和证书"><strong>步骤 1：生成密钥和证书</strong></h3>
<p>虽然你提到了证书，但 <code>key-auth</code> 插件本身并不直接处理证书，而是基于预定义的密钥（<code>key</code>）进行认证。通常，你只需为每个客户端生成一个唯一的密钥即可。</p>
<h4 id="为客户端-a-和-b-生成密钥">为客户端 A 和 B 生成密钥：</h4>
<pre><code class="language-bash"># 为客户端 A 生成密钥
echo "client-a-key" &gt; client_a.key

# 为客户端 B 生成密钥
echo "client-b-key" &gt; client_b.key
</code></pre>
<hr>
<h3 id="步骤-2配置-apisix-的消费者consumer"><strong>步骤 2：配置 APISIX 的消费者（Consumer）</strong></h3>
<p>APISIX 的 <code>Consumer</code> 实体用于管理不同的客户端及其认证信息。我们需要为客户端 A 和 B 各创建一个消费者，并为每个消费者绑定一个唯一的密钥。</p>
<h4 id="配置消费者-a">配置消费者 A：</h4>
<p>通过 APISIX 的 Admin API 创建消费者 A：</p>
<pre><code class="language-bash">curl -X PUT http://{APISIX_ADMIN_API}/apisix/admin/consumers/client-a \
-H 'Content-Type: application/json' \
-d '{
  "username": "client-a",
  "plugins": {
    "key-auth": {
      "key": "client-a-key"
    }
  }
}'
</code></pre>
<h4 id="配置消费者-b">配置消费者 B：</h4>
<p>通过 APISIX 的 Admin API 创建消费者 B：</p>
<pre><code class="language-bash">curl -X PUT http://{APISIX_ADMIN_API}/apisix/admin/consumers/client-b \
-H 'Content-Type: application/json' \
-d '{
  "username": "client-b",
  "plugins": {
    "key-auth": {
      "key": "client-b-key"
    }
  }
}'
</code></pre>
<hr>
<h3 id="步骤-3配置路由并启用-key-auth-插件"><strong>步骤 3：配置路由并启用 <code>key-auth</code> 插件</strong></h3>
<p>现在需要为服务 C 配置路由，并启用 <code>key-auth</code> 插件以保护该路由。</p>
<h4 id="配置路由">配置路由：</h4>
<p>通过 Admin API 创建路由：</p>
<pre><code class="language-bash">curl -X PUT http://{APISIX_ADMIN_API}/apisix/admin/routes/1 \
-H 'Content-Type: application/json' \
-d '{
  "uri": "/service-c/*",
  "upstream": {
    "type": "roundrobin",
    "nodes": {
      "http://backend-service-c:80": 1
    }
  },
  "plugins": {
    "key-auth": {}
  }
}'
</code></pre>
<ul>
<li><code>uri</code>: <code>/service-c/*</code> 表示匹配所有以 <code>/service-c/</code> 开头的请求路径。</li>
<li><code>upstream</code>: 指向后端服务 C 的地址。</li>
<li><code>plugins.key-auth</code>: 启用 <code>key-auth</code> 插件。</li>
</ul>
<hr>
<h3 id="步骤-4客户端调用服务"><strong>步骤 4：客户端调用服务</strong></h3>
<p>客户端 A 和 B 在调用服务时需要携带各自的密钥作为身份验证凭据。密钥应放在 HTTP 请求头中。</p>
<h4 id="客户端-a-调用服务">客户端 A 调用服务：</h4>
<pre><code class="language-bash">curl -X GET http://{APISIX_GATEWAY}/service-c/resource \
-H "apikey: client-a-key"
</code></pre>
<h4 id="客户端-b-调用服务">客户端 B 调用服务：</h4>
<pre><code class="language-bash">curl -X GET http://{APISIX_GATEWAY}/service-c/resource \
-H "apikey: client-b-key"
</code></pre>
<ul>
<li><code>apikey</code>: HTTP 请求头中的键名，默认是 <code>apikey</code>，也可以通过插件配置修改。</li>
</ul>
<hr>
<h3 id="apikey如果错误返回401">apikey如果错误，返回401</h3>
<p><img src="https://img2024.cnblogs.com/blog/118538/202503/118538-20250327111320205-2051233425.png" alt="" loading="lazy"></p>
<h3 id="步骤-5密钥的管理和分发"><strong>步骤 5：密钥的管理和分发</strong></h3>
<ul>
<li><strong>私钥和证书的存储</strong>：如果你需要更高的安全性，可以将密钥存储在安全的地方，例如加密存储或者环境变量中。</li>
<li><strong>分发密钥</strong>：
<ul>
<li>将密钥（如 <code>client-a-key</code> 和 <code>client-b-key</code>）分发给客户端 A 和 B。</li>
<li>不要将私钥泄露给其他未授权的客户端。</li>
<li>如果需要更高的安全性，可以定期轮换密钥。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="总结"><strong>总结</strong></h3>
<p>通过上述配置：</p>
<ol>
<li>后端服务 C 被路由 <code>/service-c/*</code> 所代理。</li>
<li>只有持有正确密钥的客户端（A 或 B）才能访问服务 C。</li>
<li>密钥通过 <code>key-auth</code> 插件进行验证，密钥存储在 APISIX 的消费者配置中。<br>
4</li>
</ol>

</div>
<div id="MySignature" role="contentinfo">
    <p></p>
<div class="navgood">
<p>作者：仓储大叔，张占岭，<br>
荣誉：微软MVP<br>QQ：853066980</p>

<p><strong>支付宝扫一扫，为大叔打赏!</strong>
<br><img src="https://images.cnblogs.com/cnblogs_com/lori/237884/o_IMG_7144.JPG"></p>
</div>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.21365002271296296" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-27 11:14">2025-03-27 11:13</span>&nbsp;
<a href="https://www.cnblogs.com/lori">张占岭</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18795570" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18795570);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18795570', targetLink: 'https://www.cnblogs.com/lori/p/18795570', title: 'apisix~key-auth多消费的使用' })">举报</a>
</div>
        