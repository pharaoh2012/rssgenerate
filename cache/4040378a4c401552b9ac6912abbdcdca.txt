
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18759476" title="发布于 2025-03-08 16:16">
    <span role="heading" aria-level="2">manim边学边做--向量相关的场景类</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><code>VectorScene</code>是<code>Manim</code>动画库中专门用于向量空间可视化的场景类，继承自基础 <code>Scene</code> 类。</p>
<p>它通过封装一系列向量操作方法，使数学教育、物理模拟等领域的动画制作更加高效。</p>
<p>本文主要介绍<code>VectorScene</code>的作用、主要参数和方法，并通过示例动画来展示其特点。</p>
<h1 id="1-vectorscene概要">1. VectorScene概要</h1>
<p><code>VectorScene</code>的核心功能包括：</p>
<ul>
<li>自动管理坐标系与网格系统</li>
<li>支持向量的创建、标注与动态操作</li>
<li>提供向量空间变换的可视化工具</li>
<li>内置多种动画过渡效果</li>
</ul>
<p>在教学中，<code>VectorScene</code>可以帮助学生更好地理解向量的概念和性质，例如向量的坐标表示、基向量的作用以及向量的线性组合等。</p>
<p>通过动画的形式，我们可以更直观地看到向量的变化过程，从而加深对数学概念的理解。</p>
<p>在科研和工程领域，<code>VectorScene</code>也可以用于展示向量场、力的分析等，帮助研究人员和工程师更清晰地表达和理解复杂的向量关系。</p>
<h2 id="11-主要参数">1.1. 主要参数</h2>
<p><code>VectorScene</code>继承自<code>Scene</code>，父类的参数它也都可以使用，<code>VectorScene</code>特有的参数不多：</p>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>basis_vector_stroke_width</td>
<td>int</td>
<td>基向量的笔触宽度。也就是基向量箭头的粗细程度</td>
</tr>
</tbody>
</table>
<h2 id="12-主要方法">1.2. 主要方法</h2>
<p><code>VectorScene</code>的方法大多与向量操作有关，主要包括：</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>add_axes</td>
<td>添加一对坐标轴到场景中。通过设置<code>animate=True</code>，可以以动画的形式展示坐标轴的生成过程，增强视觉效果。</td>
</tr>
<tr>
<td>add_plane</td>
<td>在背景中添加一个<code>NumberPlane</code>对象。这个方法可以创建一个二维平面，用于展示向量的位置和方向。</td>
</tr>
<tr>
<td>add_vector</td>
<td>将一个向量添加到平面上，并返回该向量的箭头对象。通过设置  <code>animate=True</code>，可以以动画的形式展示向量的生成过程。</td>
</tr>
<tr>
<td>coords_to_vector</td>
<td>将向量表示为列矩阵，并展示向量的 x 和 y 分量对应的线段。</td>
</tr>
<tr>
<td>get_basis_vectors</td>
<td>返回一个包含基向量<code>(1,0)</code>和<code>(0,1)</code>的<code>VGroup</code>对象。通过设置不同的颜色，可以区分不同的基向量。</td>
</tr>
<tr>
<td>get_vector_label</td>
<td>为给定的向量生成标签。这个方法可以方便地为向量添加描述性文本，增强动画的可读性。</td>
</tr>
<tr>
<td>label_vector</td>
<td>为向量添加标签，并可以选择是否以动画的形式展示。</td>
</tr>
<tr>
<td>lock_in_faded_grid</td>
<td>冻结背景中的   NumberPlane   和坐标轴，并在前景中添加新的可操作的平面和坐标轴。这个方法可以用于在动画中切换不同的平面和坐标轴，增强视觉效果。</td>
</tr>
<tr>
<td>show_ghost_movement</td>
<td>播放一个动画，部分展示整个平面沿着特定向量方向移动的效果。这个方法可以用于展示向量的方向和作用，而不会实际移动平面。</td>
</tr>
<tr>
<td>vector_to_coords</td>
<td>将向量表示为基于<code>Vector</code>的向量，并展示向量的<code>x</code>和<code>y</code>分量对应的线段，然后在向量头部附近创建一个列矩阵标签。</td>
</tr>
<tr>
<td>write_vector_coordinates</td>
<td>将向量的坐标写为列矩阵，并返回该列矩阵对象。</td>
</tr>
</tbody>
</table>
<h1 id="2-使用示例">2. 使用示例</h1>
<p>以下的示例展示<code>VectorScene</code>的特点。</p>
<h2 id="21-向量的加法">2.1. 向量的加法</h2>
<p>这个示例展示了如何使用<code>VectorScene</code>来展示向量的加法。</p>
<p>通过添加两个向量并计算它们的和，可以直观地展示向量加法的几何意义。</p>
<pre><code class="language-python">self.add_plane(
    animate=True,
    x_range=[-6, 6],
    y_range=[-6, 6],
    x_length=5,
    y_length=5,
)  # 添加平面
# TODO: add_axes 方法的 **kwargs 参数无效
self.add_axes(animate=True)  # 添加坐标轴

# 定义两个向量
vector1 = self.add_vector([-2, 1], color=BLUE, animate=True)
vector2 = self.add_vector([1, 1], color=RED, animate=True)

# 计算向量和
sum_vector = vector1.get_end() + vector2.get_end()
sum_vector = self.add_vector(sum_vector, color=GREEN, animate=True)

# 添加标签
self.label_vector(vector1, "v1", animate=True)
self.label_vector(vector2, "v2", animate=True)
self.label_vector(sum_vector, "v1 + v2", animate=True)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250308161336198-297688948.gif" alt="" loading="lazy"></p>
<h2 id="22-向量的标量乘法">2.2. 向量的标量乘法</h2>
<p>这个示例展示了如何使用<code>VectorScene</code>来展示基向量的变换。</p>
<p>通过改变基向量的方向和大小，可以直观地展示基向量在向量空间中的作用。</p>
<pre><code class="language-python">self.add_plane(
    animate=True,
    x_range=[-6, 6],
    y_range=[-6, 6],
    x_length=5,
    y_length=5,
)  # 添加平面

# 定义一个向量
v = np.array([1, 0.5])
vector = self.add_vector(v, color=BLUE, animate=True)
self.label_vector(vector, "v", animate=True)

# 标量乘法
scaled_vector = self.add_vector(v * 2, color=RED, animate=True)
self.label_vector(
    scaled_vector,
    MathTex(r"\overrightarrow{2V}", color=RED, font_size=30),
    animate=True,
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250308161336130-1861346996.gif" alt="" loading="lazy"></p>
<h2 id="23-向量的投影">2.3. 向量的投影</h2>
<p>这个示例展示了如何使用<code>VectorScene</code>来展示向量的投影。</p>
<p>通过计算一个向量在另一个向量上的投影，可以直观地展示向量投影的几何意义。</p>
<pre><code class="language-python">self.add_plane(
    animate=True,
    x_range=[-6, 6],
    y_range=[-6, 6],
    x_length=5,
    y_length=5,
)  # 添加平面

# 定义两个向量
vector1 = self.add_vector([2.5, 1.5], color=BLUE, animate=True)
vector2 = self.add_vector([0.5, 0.5], color=RED, animate=True)
self.label_vector(vector1, "v1", animate=True)
self.label_vector(vector2, "v2", animate=True)

# 计算向量1在向量2上的投影
projection = vector2.get_projection(vector1.get_end())
projected_vector = Arrow(start=ORIGIN, end=projection, color=GREEN)

self.add_vector(projected_vector, animate=True)
self.label_vector(projected_vector, "proj_{v2}(v1)", animate=True)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250308161336133-1436410194.gif" alt="" loading="lazy"></p>
<h1 id="3-附件">3. 附件</h1>
<p>文中的代码只是关键部分的截取，完整的代码共享在网盘中（<code>vector.py</code>），</p>
<p>下载地址: <a href="https://url11.ctfile.com/d/45455611-65421115-a8be22?p=6872" target="_blank" rel="noopener nofollow">完整代码</a> (访问密码: 6872)</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.08162946472106482" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-08 16:16">2025-03-08 16:16</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">17</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18759476" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18759476);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18759476', targetLink: 'https://www.cnblogs.com/wang_yb/p/18759476', title: 'manim边学边做--向量相关的场景类' })">举报</a>
</div>
        