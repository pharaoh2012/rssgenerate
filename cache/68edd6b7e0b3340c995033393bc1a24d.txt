
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lori/p/18643807" title="发布于 2024-12-31 13:35">
    <span role="heading" aria-level="2">策略模式的应用</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>策略模式的应用，我们以一个配置字典来说一下这个问题；首先这个字典用来管理若干个配置，每个配置项都有key和value，key是字符串，value是某种类型；我们通过一个<code>ConfigServiceStrategy</code>接口来规定配置的操作行为，通过<code>ConfigServiceContext</code>来表示一个配置上下文，通过这个对象可以写配置，读配置等；通过接口隔离原则，像上下文里传递的参数是一个抽象的接口<code>ConfigServiceStrategy</code>，而具体的实现就是配置持久化的方式，如内存hash表，redis的hash存储等。</p>
<h1 id="配置文件的策略接口">配置文件的策略接口</h1>
<pre><code>/**
 * 配置服务策略.
 *
 * @author lind
 * @date 2024/12/23 22:00
 * @since 1.0.0
 */
public interface ConfigServiceStrategy {

	/**
	 * 存储配置.
	 */
	&lt;T&gt; void put(Class&lt;T&gt; type, String key, T value);

	/**
	 * 获取配置.
	 * @param type
	 * @param key
	 * @return
	 * @param &lt;T&gt;
	 */
	&lt;T&gt; T get(Class&lt;T&gt; type, String key);

}
</code></pre>
<h1 id="内存hash表实现策略">内存hash表实现策略</h1>
<pre><code>/**
 * 基于类型和key的字典存储.
 *
 * @author lind
 * @date 2024/12/23 14:22
 * @since 1.0.0
 */
public class DictionaryConfigService implements ConfigServiceStrategy {

	private Map&lt;ConfigKey&lt;?&gt;, Object&gt; configKeyObjectMap = new HashMap&lt;&gt;();

	@Override
	public &lt;T&gt; void put(Class&lt;T&gt; type, String key, T value) {
		configKeyObjectMap.put(ConfigKey.of(type, key), value);
	}

	@Override
	public &lt;T&gt; T get(Class&lt;T&gt; type, String key) {
		ConfigKey configKey = ConfigKey.of(type, key);

		return type.cast(configKeyObjectMap.get(configKey));
	}

}

</code></pre>
<h1 id="配置文件的上下文">配置文件的上下文</h1>
<pre><code>/**
 * 配置服务上下文
 *
 * @author lind
 * @date 2024/12/23 22:57
 * @since 1.0.0
 */
public class ConfigServiceContext implements ConfigServiceStrategy {

	private ConfigServiceStrategy configServiceStrategy;

	public ConfigServiceContext(ConfigServiceStrategy configServiceStrategy) {
		this.configServiceStrategy = configServiceStrategy;
	}

	/**
	 * 存储配置.
	 * @param type
	 * @param key
	 * @param value
	 */
	@Override
	public &lt;T&gt; void put(Class&lt;T&gt; type, String key, T value) {
		if (this.configServiceStrategy == null) {
			throw new IllegalStateException("未设置配置服务");
		}
		this.configServiceStrategy.put(type, key, value);
	}

	/**
	 * 获取配置.
	 * @param type
	 * @param key
	 * @return
	 */
	@Override
	public &lt;T&gt; T get(Class&lt;T&gt; type, String key) {
		if (this.configServiceStrategy == null) {
			throw new IllegalStateException("未设置配置服务");
		}
		return this.configServiceStrategy.get(type, key);
	}

}

</code></pre>
<h1 id="测试用例">测试用例</h1>
<p>可以通过bean的方式进行注入，这里只是测试</p>
<pre><code>public static void main(String[] args) {
    ConfigServiceContext configServiceContext = new ConfigServiceContext(new DictionaryConfigService());
    configServiceContext.put(String.class, "test", "test");
    System.out.println(configServiceContext.get(String.class, "test"));
}
</code></pre>

</div>
<div id="MySignature" role="contentinfo">
    <p></p>
<div class="navgood">
<p>作者：仓储大叔，张占岭，<br>
荣誉：微软MVP<br>QQ：853066980</p>

<p><strong>支付宝扫一扫，为大叔打赏!</strong>
<br><img src="https://images.cnblogs.com/cnblogs_com/lori/237884/o_IMG_7144.JPG"></p>
</div>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.3658895591296296" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-31 13:35">2024-12-31 13:35</span>&nbsp;
<a href="https://www.cnblogs.com/lori">张占岭</a>&nbsp;
阅读(<span id="post_view_count">28</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18643807" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18643807);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18643807', targetLink: 'https://www.cnblogs.com/lori/p/18643807', title: '策略模式的应用' })">举报</a>
</div>
        