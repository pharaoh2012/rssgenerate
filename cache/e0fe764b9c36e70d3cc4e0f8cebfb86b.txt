
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/cy2011/p/18658995" title="发布于 2025-01-08 22:43">
    <span role="heading" aria-level="2">代码精简之路-模板模式</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><span style="font-size: 15px"><strong>1. 前言</strong></span></p>
<p>程序员怕重复CRUD，总是做一些简单繁琐的事情。“不要重复造轮子”，“把基础功能提炼出来封装成工具类” 我喜欢把这些话挂在嘴边，写起来常不知从何下手。 下面拆解一个项目中的功能。记录从复制粘贴到对业务抽象、实现功能分层的详细过程。如何着手提升代码重构优化能力，拿到项目需求用自己的思维实现一遍，再到维护发现其中的不足，再模仿优化。自己踩坑发现问题再自己解决是最有效的方式。<span><span><br></span></span></p>
<p>&nbsp;</p>
<p><strong>2. 需求</strong></p>
<p><span><span>XX申报系统，接受用户申报数据，系统对申报数据做格式<span>检查，再对单证中的一些字段（如状态、单证号、创建时间等）<span>赋初始值，再<span>保存入库。单证类型有：订单、运单、支付单、清单、申报单。</span></span></span></span></span></p>
<p><strong>3. 原始代码的不足</strong></p>
<p>a. 流水代码，比如数据格式检查中大量用到if else的判断。</p>
<p>b.&nbsp;时间等格式检查代码在不同单证中重复出现。（因为用户上传的excel申报数据中时间格式多样，甚至有中文年月字样，时间字段才用的字符串类型。）</p>
<p>c.&nbsp;结构混乱，数据校验、赋初始值、保存等功能交叉在一起。</p>
<p>原订单处理代码：</p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_9f509c10-fa66-4a6e-a110-72cb272e9680" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_9f509c10-fa66-4a6e-a110-72cb272e9680" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_9f509c10-fa66-4a6e-a110-72cb272e9680" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 0, 0, 1)">@Service
@RequiredArgsConstructor
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> OrderHandler {

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">final</span><span style="color: rgba(0, 0, 0, 1)"> CurrencyService currencyService;

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">final</span><span style="color: rgba(0, 0, 0, 1)"> EbcService ebcService;

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">final</span><span style="color: rgba(0, 0, 0, 1)"> OrderDao orderDao;

    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> Result start(Order order) {
        Result result </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Result();
        result.setSuccess(</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);

        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (Strings.isNullOrEmpty(order.getAgentName())) {
            result.setSuccess(</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
            result.getErrors().add(</span>"代理人为空"<span style="color: rgba(0, 0, 0, 1)">);
        }

        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (Strings.isNullOrEmpty(order.getCurrency())) {
            result.setSuccess(</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
            result.getErrors().add(</span>"币制编码为空"<span style="color: rgba(0, 0, 0, 1)">);
        } </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 赋初始值混在数据检查中</span>
<span style="color: rgba(0, 0, 0, 1)">            order.setCurrencyName(currencyService.getName(order.getCurrency()));
        }
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (Strings.isNullOrEmpty(order.getEbcCode())) {
            result.setSuccess(</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
            result.getErrors().add(</span>"电商为空"<span style="color: rgba(0, 0, 0, 1)">);
        } </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 赋初始值混在数据检查中</span>
<span style="color: rgba(0, 0, 0, 1)">            order.setEbcName(ebcService.getName(order.getEbcCode()));
        }
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (Strings.isNullOrEmpty(order.getConsignee())) {
            result.setSuccess(</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
            result.getErrors().add(</span>"收货人为空"<span style="color: rgba(0, 0, 0, 1)">);
        }
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (Strings.isNullOrEmpty(order.getConsigneeTelephone())) {
            result.setSuccess(</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
            result.getErrors().add(</span>"收货人电话为空"<span style="color: rgba(0, 0, 0, 1)">);
        }
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (Strings.isNullOrEmpty(order.getOrderDate())) {
            result.setSuccess(</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
            result.getErrors().add(</span>"订单时间为空"<span style="color: rgba(0, 0, 0, 1)">);
        } </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 检查时间格式</span>
            <span style="color: rgba(0, 0, 255, 1)">boolean</span> timeValid = <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
            </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
                DateTimeFormatter formatter </span>= DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"<span style="color: rgba(0, 0, 0, 1)">);
                LocalTime.parse(order.getOrderDate(), formatter);
                timeValid </span>= <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
            } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (DateTimeParseException e) {
                e.printStackTrace();
            }
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 多种时间格式</span>
            <span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">timeValid) {
                </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
                    DateTimeFormatter formatter </span>= DateTimeFormatter.ofPattern("yyyy年MM月dd日 HH时mm分ss秒"<span style="color: rgba(0, 0, 0, 1)">);
                    LocalTime.parse(order.getOrderDate(), formatter);
                    timeValid </span>= <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
                } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (DateTimeParseException e) {
                    e.printStackTrace();
                }

            }
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">timeValid) {
                result.setSuccess(</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
                result.getErrors().add(</span>"订单时间格式错误"<span style="color: rgba(0, 0, 0, 1)">);
            }
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> todo: 其它格式检查代码</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (result.isSuccess()) {
            order.setStatus(OrderStatus.APPLY.getCode());
            order.setCreateTime(LocalDateTime.now());
            orderDao.save(order);
        }
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> result;
    }
}</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p><strong>4.&nbsp;改进一一初步封装</strong></p>
<p>a.&nbsp;实现对数据检查的功能封装，将基础功能与业务解耦。这里的基础功能是指格式检查，业务是指对不单证中的字段值赋初始值和保存。解耦的好处：有利于将来在别的项目或功能模块中复用基础功能。同时本系统中业务功能调整也不需要改动基础功能部分的代码。</p>
<p>改进后的订单处理代码：</p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_e40f4965-62d8-4225-a145-0eddd0daa2ca" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_e40f4965-62d8-4225-a145-0eddd0daa2ca" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_e40f4965-62d8-4225-a145-0eddd0daa2ca" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> Result start(Order order) {
    Result result </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Result();
    result.setSuccess(</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> todo:其它格式检查
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 封装时间格式检查功能</span>
    <span style="color: rgba(0, 0, 255, 1)">boolean</span> timeValid =<span style="color: rgba(0, 0, 0, 1)"> validator.checkTime(order.getOrderDate());
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">timeValid) {
        result.setSuccess(</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
        result.getErrors().add(</span>"订单时间格式错误"<span style="color: rgba(0, 0, 0, 1)">);
    }
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> todo:赋初始值
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> todo:保存</span>
    <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> result;
}</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>格式检查代码封装，实现多种格式的时间检查：</p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_13f1ee94-7f64-4ece-9fc8-fdedbb58ae30" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_13f1ee94-7f64-4ece-9fc8-fdedbb58ae30" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_13f1ee94-7f64-4ece-9fc8-fdedbb58ae30" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">boolean</span><span style="color: rgba(0, 0, 0, 1)"> checkTime(String time) {
    List</span>&lt;String&gt; formatters = <span style="color: rgba(0, 0, 255, 1)">new</span> ArrayList&lt;&gt;<span style="color: rgba(0, 0, 0, 1)">();
    formatters.add(</span>"yyyy-MM-dd HH:mm:ss"<span style="color: rgba(0, 0, 0, 1)">);
    formatters.add(</span>"yyyy年MM月dd日 HH时mm分ss秒"<span style="color: rgba(0, 0, 0, 1)">);
    formatters.add(</span>"yyyyMMddHHmmss"<span style="color: rgba(0, 0, 0, 1)">);
    formatters.add(</span>"yyyy/MM/dd HH:mm:ss"<span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 0, 255, 1)">boolean</span> pass = formatters.stream().anyMatch(format -&gt;<span style="color: rgba(0, 0, 0, 1)"> {
        </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
            LocalTime parse </span>=<span style="color: rgba(0, 0, 0, 1)"> LocalTime.parse(time, DateTimeFormatter.ofPattern(format));
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
        } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (DateTimeParseException e) {
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
        }
    });
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> pass;
}</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p><strong>5.&nbsp;改进一一模板模式</strong></p>
<p>a.&nbsp;实现业务抽象，建立对检验、初始化、保存的标准流程。</p>
<p>b.&nbsp;实现代码分层，抽象基类负责定义标准流程，实现类负责各业务功能具体实现。上层(抽象基类)负责制定标准，下层负责执行标准。</p>
<p>基类代码：</p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_757a306c-fc3d-4358-a333-a671dd56fb37" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_757a306c-fc3d-4358-a333-a671dd56fb37" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_757a306c-fc3d-4358-a333-a671dd56fb37" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
 * 抽象基类,定义处理流程
 *
 * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> &lt;T&gt;
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">abstract</span> <span style="color: rgba(0, 0, 255, 1)">class</span> BaseHandler&lt;T&gt;<span style="color: rgba(0, 0, 0, 1)"> {

    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 接收申报处理入口:校验、赋初值、保存都在这里实现了,下层类不需要写流程处理的重复代码
     *
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> doc
     * </span><span style="color: rgba(128, 128, 128, 1)">@return</span>
     <span style="color: rgba(0, 128, 0, 1)">*/</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> Result start(T doc) {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (doc == <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">) {
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> Result(<span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
        }
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> step1</span>
        Result result =<span style="color: rgba(0, 0, 0, 1)"> check(doc);
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 如果数据校验不通过直接返回</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">result.isSuccess()) {
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> result;
        }

        </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> step2,3</span>
<span style="color: rgba(0, 0, 0, 1)">            init(doc);
            save(doc);
            result.setSuccess(</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
        } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (Exception e) {
            e.printStackTrace();
            result.setSuccess(</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
            result.getErrors().add(e.getMessage());
        }
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> result;
    }

    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 数据校验方法,业务类分别实现
     *
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> doc
     * </span><span style="color: rgba(128, 128, 128, 1)">@return</span>
     <span style="color: rgba(0, 128, 0, 1)">*/</span>
    <span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 0, 1)"> Result check(T doc);

    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 数据初始化
     *
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> doc
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
    <span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">abstract</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> init(T doc);

    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 保存
     *
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> doc
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
    <span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">abstract</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> save(T doc);
}</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>改进订单处理代码，<span>只需<span>填充基类<span>模板空出来的3个方法：</span></span></span></p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_328a3b32-4321-4e85-970a-57c59ab45499" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_328a3b32-4321-4e85-970a-57c59ab45499" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_328a3b32-4321-4e85-970a-57c59ab45499" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 0, 0, 1)">@Component
@RequiredArgsConstructor
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span> OrderHandlerV3 <span style="color: rgba(0, 0, 255, 1)">extends</span> BaseHandler&lt;Order&gt;<span style="color: rgba(0, 0, 0, 1)"> {

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">final</span><span style="color: rgba(0, 0, 0, 1)"> CurrencyService currencyService;

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">final</span><span style="color: rgba(0, 0, 0, 1)"> EbcService ebcService;

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">final</span><span style="color: rgba(0, 0, 0, 1)"> OrderDao orderDao;

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">final</span><span style="color: rgba(0, 0, 0, 1)"> Validator validator;


    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">protected</span><span style="color: rgba(0, 0, 0, 1)"> Result check(Order doc) {
        Result result </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Result();
        result.setSuccess(</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 时间检查</span>
        <span style="color: rgba(0, 0, 255, 1)">boolean</span> timeValid =<span style="color: rgba(0, 0, 0, 1)"> validator.checkTime(doc.getOrderDate());
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">timeValid) {
            result.setSuccess(</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
            result.getErrors().add(</span>"订单时间格式错误"<span style="color: rgba(0, 0, 0, 1)">);
        }
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (StringUtils.isBlank(doc.getAgentName())) {
            result.setSuccess(</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
            result.getErrors().add(</span>"代理人为空"<span style="color: rgba(0, 0, 0, 1)">);
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> todo:其它格式检查 ...</span>

        <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> result;
    }

    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> init(Order doc) {
        doc.setCurrencyName(currencyService.getName(doc.getCurrency()));
        doc.setEbcName(ebcService.getName(doc.getEbcCode()));
        doc.setStatus(OrderStatus.APPLY.getCode());
        doc.setCreateTime(LocalDateTime.now());
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> todo:其它字段初始化 ...</span>
<span style="color: rgba(0, 0, 0, 1)">    }

    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> save(Order doc) {
        orderDao.save(doc);
    }
}</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>改进运单处理代码，<span>只需<span>填充基类<span>模板空出来的3个方法：</span></span></span></p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_21df9095-824c-4fb7-8206-eefb8a5d4a0d" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_21df9095-824c-4fb7-8206-eefb8a5d4a0d" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_21df9095-824c-4fb7-8206-eefb8a5d4a0d" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 0, 0, 1)">@Component
@RequiredArgsConstructor
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span> WaybillHandlerV3 <span style="color: rgba(0, 0, 255, 1)">extends</span> BaseHandler&lt;Waybill&gt;<span style="color: rgba(0, 0, 0, 1)"> {

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">final</span><span style="color: rgba(0, 0, 0, 1)"> CountryService countryService;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">final</span><span style="color: rgba(0, 0, 0, 1)"> CurrencyService currencyService;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">final</span><span style="color: rgba(0, 0, 0, 1)"> WaybillDao waybillDao;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">final</span><span style="color: rgba(0, 0, 0, 1)"> Validator validator;


    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">protected</span><span style="color: rgba(0, 0, 0, 1)"> Result check(Waybill doc) {
        Result result </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Result();
        result.setSuccess(</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 检查发货时间</span>
        <span style="color: rgba(0, 0, 255, 1)">boolean</span> timeValid =<span style="color: rgba(0, 0, 0, 1)"> validator.checkTime(doc.getDeliveryDate());
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">timeValid) {
            result.setSuccess(</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
            result.getErrors().add(</span>"发货时间格式错误"<span style="color: rgba(0, 0, 0, 1)">);
        }
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> todo:其它格式检查 ...</span>

        <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> result;
    }

    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> init(Waybill doc) {
        doc.setCurrencyName(currencyService.getName(doc.getCurrency()));
        doc.setConsigneeCountryName(countryService.getName(doc.getConsigneeCountry()));
        doc.setStatus(WaybillStatus.APPLY.getCode());
        doc.setCreateTime(LocalDateTime.now());
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> todo:其它字段初始化 ...</span>
<span style="color: rgba(0, 0, 0, 1)">    }

    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> save(Waybill doc) {
        waybillDao.save(doc);
    }
}</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p><strong>6.&nbsp;优劣对比</strong></p>
<p>a.&nbsp;有<span>利于阅读代码、维护功能。</span></p>
<ul class="list-paddingleft-1">
<li>
<p><span>原始代码中3个步骤(校验、赋初始值、保存)的功能在混合交叉在一起，在一个方法中实现，阅读维护非常耗时。将来如果需求变动，如字段长度变化/必填字段变化要<span>修改数据检查部分代码；状态字段值变化(申报由1表示改为由A表示)而<span>修改赋初始值部分代码；ORM框架变化<span>修改dao的实例。这时就只能到这一个方法中寻找对应部分，要从头到尾阅读代码。</span></span></span></span></p>
</li>
<li><span><span><span><span>模板模式中实现对业务抽象、建立流程以后，代码结构层次清晰，只要需到抽象类或实现类的对应流程中去寻找修改。</span></span></span></span></li>
</ul>
<p>b.&nbsp;有利于功能升级。现在的功能只有3步，假如将来功能拓展，如对接别的系统平台（把合规的数据转为json格式推送给目标系统的接口）。</p>
<ul class="list-paddingleft-1">
<li><span>在原始代码中就需要分别到各个单证类中<span>分别添加数据格式转换、推送接口的功能，再<span>分别测试。</span></span></span></li>
<li><span>在模板模式代码中<span>只需要求在基类的流程中再<span>加两个步骤，甚至转换和推送都可以在基类中<span>统一实现，相比之下编码和测试都减少了。</span></span></span></span></li>
</ul>
<p><span>c.&nbsp;功能升级举例，流程处理中增加推送功能：</span></p>
<ul class="list-paddingleft-1">
<li><span>格式转换和推送都在基类中完成。</span></li>
<li><span>各实现类中只需设置不同单证的推送接口。</span></li>
</ul>
<p><span>升级后的基类，<span>只增加了<span><span>4行代码：</span></span></span><br></span></p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_1714644f-0649-4a33-9043-b4f45756b3bf" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_1714644f-0649-4a33-9043-b4f45756b3bf" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_1714644f-0649-4a33-9043-b4f45756b3bf" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">abstract</span> <span style="color: rgba(0, 0, 255, 1)">class</span> BaseHandler&lt;T&gt;<span style="color: rgba(0, 0, 0, 1)"> {
    @Autowired
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> ApiClient apiClient;

    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 接收申报处理入口:校验、赋初值、保存都在这里实现了,下层类不需要写流程处理的重复代码
     *
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> doc
     * </span><span style="color: rgba(128, 128, 128, 1)">@return</span>
     <span style="color: rgba(0, 128, 0, 1)">*/</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> Result start(T doc) {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (doc == <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">) {
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> Result(<span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
        }
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> step1</span>
        Result result =<span style="color: rgba(0, 0, 0, 1)"> check(doc);
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 如果数据校验不通过直接返回</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">result.isSuccess()) {
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> result;
        }
        </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> step2,3</span>
<span style="color: rgba(0, 0, 0, 1)">            init(doc);
            save(doc);
            result.setSuccess(</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
        } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (Exception e) {
            e.printStackTrace();
            result.setSuccess(</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
            result.getErrors().add(e.getMessage());
        }
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 升级功能，申报成功以后推送数据到别的平台</span>
        String json =<span style="color: rgba(0, 0, 0, 1)"> JSONObject.toJSONString(doc);
        </span><span style="color: rgba(0, 0, 255, 1)">boolean</span> send =<span style="color: rgba(0, 0, 0, 1)"> apiClient.send(json, getApi());
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">send) {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> todo:记录推送失败日志</span>
<span style="color: rgba(0, 0, 0, 1)">        }
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> todo: 记录推送记录等</span>
        <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> result;
    }

    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 数据校验方法,业务类分别实现
     *
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> doc
     * </span><span style="color: rgba(128, 128, 128, 1)">@return</span>
     <span style="color: rgba(0, 128, 0, 1)">*/</span>
    <span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 0, 1)"> Result check(T doc);

    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 数据初始化
     *
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> doc
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
    <span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">abstract</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> init(T doc);

    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 保存
     *
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> doc
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
    <span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">abstract</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> save(T doc);

    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 新增功能，获取推送接口
     *
     * </span><span style="color: rgba(128, 128, 128, 1)">@return</span>
     <span style="color: rgba(0, 128, 0, 1)">*/</span>
    <span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 0, 1)"> String getApi();
}</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>升级后的订单处理类，<span>只填充<span>接口地址<span>方法(模板)：</span></span></span></p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_f3903aca-e2ea-4759-98ad-6babca4c5594" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_f3903aca-e2ea-4759-98ad-6babca4c5594" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_f3903aca-e2ea-4759-98ad-6babca4c5594" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 0, 0, 1)">@Component
@RequiredArgsConstructor
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span> OrderHandlerV3 <span style="color: rgba(0, 0, 255, 1)">extends</span> BaseHandler&lt;Order&gt;<span style="color: rgba(0, 0, 0, 1)"> {

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">final</span><span style="color: rgba(0, 0, 0, 1)"> CurrencyService currencyService;

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">final</span><span style="color: rgba(0, 0, 0, 1)"> EbcService ebcService;

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">final</span><span style="color: rgba(0, 0, 0, 1)"> OrderDao orderDao;

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">final</span><span style="color: rgba(0, 0, 0, 1)"> Validator validator;


    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">protected</span><span style="color: rgba(0, 0, 0, 1)"> Result check(Order doc) {
        Result result </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Result();
        result.setSuccess(</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 时间检查</span>
        <span style="color: rgba(0, 0, 255, 1)">boolean</span> timeValid =<span style="color: rgba(0, 0, 0, 1)"> validator.checkTime(doc.getOrderDate());
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">timeValid) {
            result.setSuccess(</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
            result.getErrors().add(</span>"订单时间格式错误"<span style="color: rgba(0, 0, 0, 1)">);
        }
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (StringUtils.isBlank(doc.getAgentName())) {
            result.setSuccess(</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
            result.getErrors().add(</span>"代理人为空"<span style="color: rgba(0, 0, 0, 1)">);
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> todo:其它格式检查 ...</span>

        <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> result;
    }

    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> init(Order doc) {
        doc.setCurrencyName(currencyService.getName(doc.getCurrency()));
        doc.setEbcName(ebcService.getName(doc.getEbcCode()));
        doc.setStatus(OrderStatus.APPLY.getCode());
        doc.setCreateTime(LocalDateTime.now());
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> todo:其它字段初始化 ...</span>
<span style="color: rgba(0, 0, 0, 1)">    }

    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> save(Order doc) {
        orderDao.save(doc);
    }

    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 设置推送接口
     *
     * </span><span style="color: rgba(128, 128, 128, 1)">@return</span>
     <span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">protected</span><span style="color: rgba(0, 0, 0, 1)"> String getApi() {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> "http://host:port/api/order"<span style="color: rgba(0, 0, 0, 1)">;
    }
}</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p><strong>7. 适合哪些场景</strong></p>
<p>模板模式适用的三个特点：</p>
<p>a.&nbsp;业务流程相似。如案例中校验、初始化、保存三个步骤在每个单证中都有。</p>
<p>b.&nbsp;业务实现时局部有差异。如案例中订单、运单、支付单各自要检查的字段不同，状态初始值不同，保存数据用的dao实例不同。</p>
<p>c.&nbsp;业务类型多。如果案例中只有一个订单或运单功能，不需要有抽象基类（继承就是为了代码复用，业务流程只有一个单证时没有区别），可以将流程和实现在业务类中一同实现。</p>
<p><strong>8.&nbsp;怎么理解模板模式</strong></p>
<p>a.&nbsp;两个关键点是抽象和分层。</p>
<p>b.&nbsp;总结相同或相似的功能并泛化，用一个更大范围的词语来描述就是抽象。</p>
<p>c.&nbsp;分层就是将相同或相似的功能放到抽象层，将有差异的部分放到实现层。</p>
<p>d.&nbsp;比如上班族每天的生活都可以抽象为起床洗漱、早餐、上午工作、午餐、下午工作、回家、晚餐这些步骤，这些泛化的步骤就放抽象层。不同的部分在于不同职业、不同城市的上班族起床洗漱时间地点不同，早餐菜品不同，工作内容不同；这些具体的内容实现代码各不相同，就放到实现层。</p>
</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/cy2011/" target="_blank">chyun2011</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/cy2011/p/18658995" target="_blank">https://www.cnblogs.com/cy2011/p/18658995</a></p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5655617811863426" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-08 22:44">2025-01-08 22:43</span>&nbsp;
<a href="https://www.cnblogs.com/cy2011">chyun2011</a>&nbsp;
阅读(<span id="post_view_count">77</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18658995" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18658995);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18658995', targetLink: 'https://www.cnblogs.com/cy2011/p/18658995', title: '代码精简之路-模板模式' })">举报</a>
</div>
	