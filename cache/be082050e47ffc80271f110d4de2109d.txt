
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/better-farther-world2099/p/18743609" title="发布于 2025-02-28 16:54">
    <span role="heading" aria-level="2">数据并发安全校验处理工具类</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h2>一、项目现存问题描述</h2>
<p>　　当前系统项目中，存在一些并发安全风险问题(虽然并发量较小)。特别是在处理审批状态修改和涉及金额数量的操作，由于缺乏有效的并发控制，可能会导致业务逻辑重复执行和数据不一致。例如 并发场景下，多个线程同时尝试更新同一笔交易状态或金额，这不仅会导致数据不一致，还可能引发更严重的相关业务逻辑错误。</p>
<h2>二、一般处理方案概述</h2>
<p>乐观锁：</p>
<p>通过在表中添加一个版本号字段来实现，当更新记录时，检查版本号是否与读取时相同，否则表示数据已被其他事务修改，需要重试。<span style="color: rgba(128, 128, 128, 1)">PS:需要现行表增加字段并修改代码支持，改动稍大</span></p>
<p>悲观锁：</p>
<p>使用数据库提供的锁机制，在查询时即锁定记录。<span style="color: rgba(128, 128, 128, 1)">PS:应避免表级锁，查询条件应使用到索引字段</span>。</p>
<p>分布式锁：</p>
<p>对于跨服调用的场景，可以采用redis等缓存技术实现分布式锁，确保在同一时刻只有一个服务实例能够对共享资源进行操作。<span style="color: rgba(128, 128, 128, 1)">PS:我们的项目开发规则不支持服务层使用redis组件，固开发了这个工具类</span></p>
<p>事务管理：</p>
<p>合理配置事务隔离级别，确保事务间的可见性服务预期，避免脏读、不可重复读等问题。<span style="color: rgba(128, 128, 128, 1)">PS:不便于后期维护，容易造成事务的未知风险</span></p>
<h2><span style="color: rgba(0, 0, 0, 1)">三、基于现行项目的工具类设计方案</span></h2>
<p><span style="color: rgba(0, 0, 0, 1)">结合项目实际情况，设计了一个专用于解决此类并发问题的工具类。该工具类采用了悲观锁方案，使用便捷，以下是不分测试样例与工具类源码。</span></p>
<h3><span style="color: rgba(0, 0, 0, 1)">1、使用测试样例：</span></h3>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">    //</span><span style="color: rgba(0, 128, 0, 1)">修改金额</span>
    @Transactional(rollbackFor = Exception.<span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> addUserAccountAmount() {
        ConcurrentDataUtils.updateAmount(UserInfo::getAccountAmount, </span>600, <span style="color: rgba(0, 0, 255, 1)">this</span>,Pair.of(UserAccount::getId, 10<span style="color: rgba(0, 0, 0, 1)">));
    }
　　</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">判断是否与预期值一致 eg:判断审批状态 是否为待审批，否则应拦截</span>
    @Transactional(rollbackFor = Exception.<span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> isEqual() {
        ConcurrentDataUtils.isEqual(Approve::getStatus, </span>0, <span style="color: rgba(0, 0, 255, 1)">this</span>,Pair.of(Approve::getForeignId, 1122334<span style="color: rgba(0, 0, 0, 1)">));
    }
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">判断数据是否已存在 eg:同步、保存等场景</span>
    @Transactional(rollbackFor = Exception.<span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> isExist() {
        ConcurrentDataUtils.isExist(userInfoService,Pair.of(UserInfo::getIdCard, </span>1122334),Pair.of(UserInfo::getIsDelete,0<span style="color: rgba(0, 0, 0, 1)">));
    }</span></pre>
</div>
<h3>2、工具类源码</h3>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_f186b979-3114-4bc6-9dd8-766613754352" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_f186b979-3114-4bc6-9dd8-766613754352" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_f186b979-3114-4bc6-9dd8-766613754352" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.example.dlock_demo.utils;

</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.baomidou.mybatisplus.core.toolkit.support.SFunction;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.baomidou.mybatisplus.extension.service.IService;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> lombok.extern.slf4j.Slf4j;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.apache.commons.lang3.tuple.Pair;

</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.io.Serializable;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.lang.invoke.SerializedLambda;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.lang.reflect.Field;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.lang.reflect.Method;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.math.BigDecimal;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.util.Map;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.util.Objects;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.util.Optional;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.util.concurrent.ConcurrentHashMap;

</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
 * 并发校验、处理数据工具类
 *
 * </span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)">: shf
 * @date: 2025年02月14日 11:13
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
@Slf4j
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> ConcurrentDataUtils {

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">final</span> String DEFAULT_LAST_JOIN_SQL = "ORDER BY id DESC Limit 1 FOR UPDATE"<span style="color: rgba(0, 0, 0, 1)">;

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> Map&lt;Class&lt;?&gt;, SerializedLambda&gt; CLASS_LAMDBA_CACHE = <span style="color: rgba(0, 0, 255, 1)">new</span> ConcurrentHashMap&lt;&gt;<span style="color: rgba(0, 0, 0, 1)">();

    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 校验数据是否已存在
     * &lt;p&gt;
     * 根据查询条件默认查询的是满足条件的最后一条数据做判断或更新，查询条件入参优先传ID(行锁)、业务编号等表中唯一标识字段；
     *
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> &lt;T&gt;            实体类型
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> &lt;C&gt;            查询条件列值的类型
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> service        数据库操作Service
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> conditionPairs 数据库查询条件(key:条件查询列字段 eg：删除状态;value:对应值)
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    @SafeVarargs
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> &lt;T, C&gt; <span style="color: rgba(0, 0, 255, 1)">boolean</span> isExist(IService&lt;T&gt; service, Pair&lt;SFunction&lt;T, C&gt;, C&gt;<span style="color: rgba(0, 0, 0, 1)">... conditionPairs) {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (service == <span style="color: rgba(0, 0, 255, 1)">null</span> || conditionPairs == <span style="color: rgba(0, 0, 255, 1)">null</span> || conditionPairs.length == 0<span style="color: rgba(0, 0, 0, 1)">) {
            </span><span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> RuntimeException("并发校验处理数据ConcurrentDataUtils-isExist查询条件为空"<span style="color: rgba(0, 0, 0, 1)">);
        }
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> lockAndGet(service, conditionPairs) != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 校验入参与数据库字段值是否一致
     * &lt;p&gt;
     * 根据查询条件默认查询的是满足条件的最后一条数据做判断或更新，查询条件入参优先传ID(行锁)、业务编号等表中唯一标识字段；
     * 期望值入参类型需要与实体字段数据类型一致；
     *
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> &lt;T&gt;            实体类型
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> &lt;R&gt;            待验证值的类型
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> &lt;C&gt;            查询条件列值的类型
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> targetColumn   实体类查询字段
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> expectVal      期望值 需要与实体字段数据类型一致
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> service        数据库操作Service
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> conditionPairs 数据库查询条件(key:条件查询列字段 eg：删除状态;value:对应值)
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    @SafeVarargs
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> &lt;T, R, C&gt; <span style="color: rgba(0, 0, 255, 1)">boolean</span> isEqual(SFunction&lt;T, R&gt; targetColumn, R expectVal, IService&lt;T&gt; service, Pair&lt;SFunction&lt;T, C&gt;, C&gt;<span style="color: rgba(0, 0, 0, 1)">... conditionPairs) {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (targetColumn == <span style="color: rgba(0, 0, 255, 1)">null</span> || service == <span style="color: rgba(0, 0, 255, 1)">null</span> || conditionPairs == <span style="color: rgba(0, 0, 255, 1)">null</span> || conditionPairs.length == 0<span style="color: rgba(0, 0, 0, 1)">) {
            </span><span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> RuntimeException("并发校验处理数据ConcurrentDataUtils-isEqual查询条件为空"<span style="color: rgba(0, 0, 0, 1)">);
        }
        T t </span>=<span style="color: rgba(0, 0, 0, 1)"> lockAndGet(service, conditionPairs);
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (t == <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">) {
            log.warn(</span>"并发校验处理数据ConcurrentDataUtils-expectEqual查询为空"<span style="color: rgba(0, 0, 0, 1)">);
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
        }
        R columnVal </span>=<span style="color: rgba(0, 0, 0, 1)"> targetColumn.apply(t);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> Objects.equals(expectVal, columnVal);
    }

    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 处理增加或减少金额、数量
     * &lt;p&gt;
     * 根据查询条件默认查询的是满足条件的最后一条数据做判断或更新，查询条件入参优先传ID(行锁)、业务编号等表中唯一标识字段；
     * 新增值入参类型需要与实体字段数据类型一致；
     * 支持BigDecimal、long、int
     *
      * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> &lt;T&gt;            实体类型
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> &lt;R&gt;            待验证值的类型
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> &lt;C&gt;            查询条件列值的类型
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> targetColumn   实体类查询字段
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> thisVal        本次新增值 需要与实体字段数据类型一致
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> service        数据库操作Service
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> conditionPairs 数据库查询条件(key:条件查询列字段 eg：删除状态;value:对应值)
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    @SafeVarargs
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> &lt;T, R, C&gt; <span style="color: rgba(0, 0, 255, 1)">boolean</span> updateAmount(SFunction&lt;T, R&gt; targetColumn, R thisVal, IService&lt;T&gt; service, Pair&lt;SFunction&lt;T, C&gt;, C&gt;<span style="color: rgba(0, 0, 0, 1)">... conditionPairs) {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (targetColumn == <span style="color: rgba(0, 0, 255, 1)">null</span> || thisVal == <span style="color: rgba(0, 0, 255, 1)">null</span> || service == <span style="color: rgba(0, 0, 255, 1)">null</span> || conditionPairs == <span style="color: rgba(0, 0, 255, 1)">null</span> || conditionPairs.length == 0<span style="color: rgba(0, 0, 0, 1)">) {
            </span><span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> RuntimeException("并发校验处理数据ConcurrentDataUtils-updateAmount查询条件为空"<span style="color: rgba(0, 0, 0, 1)">);
        }
        </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
            T t </span>=<span style="color: rgba(0, 0, 0, 1)"> lockAndGet(service, conditionPairs);
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (t == <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">) {
                log.warn(</span>"并发校验处理数据ConcurrentDataUtils-update未查询到有效数据"<span style="color: rgba(0, 0, 0, 1)">);
                </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
            }
            R columnVal </span>=<span style="color: rgba(0, 0, 0, 1)"> targetColumn.apply(t);
            R compute </span>=<span style="color: rgba(0, 0, 0, 1)"> compute(columnVal, thisVal);
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">获取字段</span>
            String fieldName =<span style="color: rgba(0, 0, 0, 1)"> getFieldName(targetColumn);
            Field field </span>=<span style="color: rgba(0, 0, 0, 1)"> t.getClass().getDeclaredField(fieldName);
            field.setAccessible(</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
            field.set(t, compute);
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> service.updateById(t);
        } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (Throwable e) {
            log.error(</span>"并发校验处理数据ConcurrentDataUtils-update异常:"<span style="color: rgba(0, 0, 0, 1)">, e);
            </span><span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> RuntimeException("并发校验处理数据ConcurrentDataUtils-update异常"<span style="color: rgba(0, 0, 0, 1)">);
        }
    }

    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 根据查询条件默认查询的是满足条件的最后一条数据做判断或更新，查询条件入参优先传ID(行锁)、业务编号等表中唯一标识字段；
     *
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> &lt;T&gt;            实体类型
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> &lt;R&gt;            查询字段值的类型
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> &lt;C&gt;            查询条件列值的类型
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> service        数据库操作Service
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> conditionPairs 数据库查询条件(key:条件查询列字段 eg：删除状态;value:对应值)
     * </span><span style="color: rgba(128, 128, 128, 1)">@return</span><span style="color: rgba(0, 128, 0, 1)"> 实体数据
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    @SafeVarargs
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> &lt;T, R, C&gt; T lockAndGet(IService&lt;T&gt; service, Pair&lt;SFunction&lt;T, C&gt;, C&gt;<span style="color: rgba(0, 0, 0, 1)">... conditionPairs) {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (service == <span style="color: rgba(0, 0, 255, 1)">null</span> || conditionPairs == <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">) {
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
        }
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">加锁数据查询</span>
        LambdaQueryWrapper&lt;T&gt; wrapper = <span style="color: rgba(0, 0, 255, 1)">new</span> LambdaQueryWrapper&lt;&gt;<span style="color: rgba(0, 0, 0, 1)">();
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">动态拼接参数对</span>
        <span style="color: rgba(0, 0, 255, 1)">for</span> (Pair&lt;SFunction&lt;T, C&gt;, C&gt;<span style="color: rgba(0, 0, 0, 1)"> pair : conditionPairs) {
            </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (Objects.nonNull(pair.getValue())) {
                wrapper.eq(pair.getKey(), pair.getValue());
            }
        }
        wrapper.last(DEFAULT_LAST_JOIN_SQL);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> service.getOne(wrapper);
    }

    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 计算增减结果
     *
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> columnVal 字段原值
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> thisVal   本次变动值
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> &lt;R&gt;       计算结果类型
     * </span><span style="color: rgba(128, 128, 128, 1)">@return</span><span style="color: rgba(0, 128, 0, 1)"> 增减计算结果
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
    <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> &lt;R&gt;<span style="color: rgba(0, 0, 0, 1)"> R compute(R columnVal, R thisVal) {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (columnVal <span style="color: rgba(0, 0, 255, 1)">instanceof</span><span style="color: rgba(0, 0, 0, 1)"> BigDecimal) {
            BigDecimal original </span>=<span style="color: rgba(0, 0, 0, 1)"> Optional.of((BigDecimal) columnVal).orElse(BigDecimal.ZERO);
            BigDecimal addVal </span>=<span style="color: rgba(0, 0, 0, 1)"> (BigDecimal) thisVal;
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> (R) original.add(addVal);
        } </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (columnVal <span style="color: rgba(0, 0, 255, 1)">instanceof</span><span style="color: rgba(0, 0, 0, 1)"> Integer) {
            Integer original </span>= Optional.of((Integer) columnVal).orElse(0<span style="color: rgba(0, 0, 0, 1)">);
            Integer addVal </span>=<span style="color: rgba(0, 0, 0, 1)"> (Integer) thisVal;
            Integer i </span>= original +<span style="color: rgba(0, 0, 0, 1)"> addVal;
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> (R) i;
        } </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (columnVal <span style="color: rgba(0, 0, 255, 1)">instanceof</span><span style="color: rgba(0, 0, 0, 1)"> Long) {
            Long original </span>= Optional.of((Long) columnVal).orElse(0L<span style="color: rgba(0, 0, 0, 1)">);
            Long addVal </span>=<span style="color: rgba(0, 0, 0, 1)"> (Long) thisVal;
            Long l </span>= original +<span style="color: rgba(0, 0, 0, 1)"> addVal;
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> (R) l;
        } </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
            </span><span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> RuntimeException("并发校验处理数据ConcurrentDataUtils-compute不支持的数据类型"<span style="color: rgba(0, 0, 0, 1)">);
        }
    }

    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">*
     * 转换方法引用为属性名
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> fn
     * </span><span style="color: rgba(128, 128, 128, 1)">@return</span>
     <span style="color: rgba(0, 128, 0, 1)">*/</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> &lt;T, R&gt; String getFieldName(SFunction&lt;T, R&gt;<span style="color: rgba(0, 0, 0, 1)"> fn) {
        SerializedLambda lambda </span>=<span style="color: rgba(0, 0, 0, 1)"> getSerializedLambda(fn);
        String methodName </span>=<span style="color: rgba(0, 0, 0, 1)"> lambda.getImplMethodName();
        String prefix </span>= <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (methodName.startsWith("get"<span style="color: rgba(0, 0, 0, 1)">)) {
            prefix </span>= "get"<span style="color: rgba(0, 0, 0, 1)">;
        }
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 截取get之后的字符串并转换首字母为小写</span>
        <span style="color: rgba(0, 0, 255, 1)">return</span> toLowerCaseFirstOne(methodName.replace(prefix, ""<span style="color: rgba(0, 0, 0, 1)">));
    }

    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 首字母转小写
     *
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> s
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
    <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 0, 1)"> String toLowerCaseFirstOne(String s) {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (Character.isLowerCase(s.charAt(0<span style="color: rgba(0, 0, 0, 1)">))) {
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> s;
        } </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> (<span style="color: rgba(0, 0, 255, 1)">new</span> StringBuilder()).append(Character.toLowerCase(s.charAt(0))).append(s.substring(1<span style="color: rgba(0, 0, 0, 1)">)).toString();
        }
    }

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 0, 1)"> SerializedLambda getSerializedLambda(Serializable fn) {
        SerializedLambda lambda </span>=<span style="color: rgba(0, 0, 0, 1)"> CLASS_LAMDBA_CACHE.get(fn.getClass());
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (lambda == <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">) {
            </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
                Method method </span>= fn.getClass().getDeclaredMethod("writeReplace"<span style="color: rgba(0, 0, 0, 1)">);
                method.setAccessible(Boolean.TRUE);
                lambda </span>=<span style="color: rgba(0, 0, 0, 1)"> (SerializedLambda) method.invoke(fn);
                CLASS_LAMDBA_CACHE.put(fn.getClass(), lambda);
            } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (Exception e) {
                e.printStackTrace();
            }
        }
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> lambda;
    }


}</span></pre>
</div>
<span class="cnblogs_code_collapse">ConcurrentDataUtils工具类</span></div>
<h3><span style="color: rgba(255, 0, 0, 1)">3、使用注意事项</span></h3>
<ul>
<li>使用该工具类需要放在事务中，如果没有加事务， 则只是做了一层基本的查询判断，不能彻底解决并发问题；</li>
<li>传参查询条件，优先传ID主键或业务唯一标识编号(建议设计表时将业务编号字段设置为普通索引，由于有逻辑删除字段固不能设置为唯一索引)，走行级锁；</li>
<li>实际使用时，查询条件需要传入删除状态字段(如果表设计规则该字段一致，则可优化省略，在工具类源码中加入非删除查询即可)；</li>
<li>仅支持单表获取单条数据的校验或更新操作且查询条件为等量查询(wrapper.eq(...)),查询条件必传否则抛出异常；</li>
<li>避免大事务问题，如果除了使用该工具类，还有大量其他耗时业务处理，可将该工具类使用部分以及涉及到该表的数据处理独立成一个方法， 单独放在一个小事务中(需兼顾数据一致性，尽量将所有数据表操作放在一起)。</li>
</ul>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.056623955796296296" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-28 16:55">2025-02-28 16:54</span>&nbsp;
<a href="https://www.cnblogs.com/better-farther-world2099">字节悦动</a>&nbsp;
阅读(<span id="post_view_count">62</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18743609" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18743609);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18743609', targetLink: 'https://www.cnblogs.com/better-farther-world2099/p/18743609', title: '数据并发安全校验处理工具类' })">举报</a>
</div>
        