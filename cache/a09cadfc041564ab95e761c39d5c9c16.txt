
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zhaloe/p/18946864" title="发布于 2025-06-25 17:31">
    <span role="heading" aria-level="2">ArkUI-X通过Stage模型开发Android端应用指南(二)</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="stageapplication初始化支持以下三种方式">StageApplication初始化支持以下三种方式</h2>
<h3 id="1-通过继承stageapplication的方式进行初始化">1. 通过继承StageApplication的方式进行初始化</h3>
<pre><code>import ohos.stage.ability.adapter.StageApplication;

public class HiStageApplication extends StageApplication {
    @Override
    public void onCreate() {
        super.onCreate();
    }
}
</code></pre>
<h3 id="2-继承android原生application方式在oncreate方法中创建stageapplicationdelegate实例进行初始化">2. 继承Android原生Application方式，在onCreate方法中创建StageApplicationDelegate实例进行初始化</h3>
<pre><code>import android.app.Application;
import ohos.stage.ability.adapter.StageApplicationDelegate;

public class HiStageApplication extends Application {
    private StageApplicationDelegate appDelegate_ = null;

    @Override
    public void onCreate() {
        super.onCreate();
        appDelegate_ = new StageApplicationDelegate();
        appDelegate_.initApplication(this);
    }
}
</code></pre>
<h3 id="3-在activity中创建stageapplicationdelegate实例进行初始化">3. 在Activity中创建StageApplicationDelegate实例进行初始化</h3>
<pre><code>import android.app.Activity;
import ohos.stage.ability.adapter.StageApplicationDelegate;

public class EntryEntryAbilityActivity extends Activity {

    private StageApplicationDelegate appDelegate_ = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        appDelegate_ = new StageApplicationDelegate();
        appDelegate_.initApplication(this.getApplication());
        super.onCreate(savedInstanceState);
    }
}
</code></pre>
<h2 id="通过原生activity拉起ability并传递参数">通过原生Activity拉起Ability并传递参数</h2>
<p>使用原生Activity拉起Ability时，需使用原生应用的startActivity方法，参数的传递需要通过Intent中的putExtra()进行设置，目前有两种方式进行参数的传递，具体如下：</p>
<h3 id="1-使用手动方式">1. 使用手动方式</h3>
<h4 id="参数格式">参数格式</h4>
<p>key值为params<br>
value为json格式</p>
<pre><code>{
    "params":[
        {
            "key":键,
            "type":参数类型值,
            "value":值
        },
        {
            ...
        }
    ]
}
</code></pre>
<h4 id="示例代码">示例代码</h4>
<ul>
<li>Java</li>
</ul>
<pre><code>public class EntryEntryAbilityActivity extends AppCompatActivity {

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Intent intent = new Intent();
        intent.setClass(this, EntryEntryAbilityTwoActivity.class);
        intent.putExtra("params",
                "{\"params\":[{\"key\":\"keyfirst\",\"type\":1,\"value\":\"keyvalue\"}," +
                "{\"key\":\"keysecond\",\"type\":9,\"value\":\"2.3\"}," +
                "{\"key\":\"keythird\",\"type\":5,\"value\":\"2\"}," +
                "{\"key\":\"keyfourth\",\"type\":10,\"value\":\"test\"}]}");
        startActivity(intent);
    }
}
</code></pre>
<ul>
<li>ArkTS</li>
</ul>
<pre><code># xxx.ets
export default class EntryAbility extends UIAbility {
  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {
    console.log("value = " + want.parameters?.keyfirst)
    console.log("value = " + want.parameters?.keysecond)
    console.log("value = " + want.parameters?.keythird)
    console.log("value = " + want.parameters?.keyfourth)
  }

  onWindowStageCreate(windowStage: window.WindowStage): void {
    ...
  }
...
}
</code></pre>
<h4 id="支持的参数类型列表">支持的参数类型列表</h4>
<table>
<thead>
<tr>
<th>参数类型</th>
<th>参数类型值</th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean</td>
<td>1</td>
</tr>
<tr>
<td>int</td>
<td>5</td>
</tr>
<tr>
<td>double</td>
<td>9</td>
</tr>
<tr>
<td>string</td>
<td>10</td>
</tr>
</tbody>
</table>
<h3 id="2-wantparams工具类">2. WantParams工具类</h3>
<p>推荐使用。</p>
<h4 id="参数格式-1">参数格式</h4>
<p>putExtra中的key值为"params",对应的value为WantParams字符串。</p>
<pre><code>    WantParams wantParams = new WantParams();
    wantParams.addValue("key1", "value")
            .addValue("key2", 123)
            .addValue("key3", false)
            ...
</code></pre>
<h4 id="示例代码-1">示例代码</h4>
<ul>
<li>Java<br>
此示例展示了在启动一个新的 Ability 时，如何通过 WantParams 实现参数传递。具体涉及使用 WantParams 中的 addValue、getValue 和 toWantParamsString 接口，完成数据的自定义、获取和修改。</li>
</ul>
<pre><code>public class MainAbilityActivity extends StageActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Intent intent = new Intent();
        intent.setClass(this, EntryEntryAbilityActivity.class);
        // 设置自定义数据
        WantParams wantParams = new WantParams();
        wantParams.addValue("stringKey", "normal")
                .addValue("intKey", -2147483648)
                .addValue("doubleKey", -6.9)
                .addValue("boolKey", true)
                .addValue("arrayKey", new boolean[] { false, true })
                .addValue("wantParamsKey",
                        new WantParams()
                                .addValue("stringKey2", "It's me."));

        // 获取指定的键对应的值并修改
        Object obj = wantParams.getValue("stringKey");
        if (obj instanceof String) {
            wantParams.setValue("stringKey", "new string value");
        }
        obj = wantParams.getValue("intKey");
        if (obj instanceof Integer) {
            wantParams.setValue("intKey", 123);
        }
        obj = wantParams.getValue("arrayKey");
        if (obj instanceof boolean[]) {
            wantParams.setValue("arrayKey", new boolean[] { false, false });
        }
        obj = wantParams.getValue("wantParamsKey");
        if (obj instanceof WantParams) {
            wantParams.setValue("wantParamsKey", new WantParams().addValue("intKey", 999));
        }
        intent.putExtra("params", wantParams.toWantParamsString());
        startActivity(intent);
    }
}
</code></pre>
<ul>
<li>ArkTS</li>
</ul>
<pre><code># xxx.ets
export default class EntryAbility extends UIAbility {
  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {
    console.log("value = " + want.parameters?.stringKey)
    console.log("value = " + want.parameters?.intKey)
    console.log("value = " + want.parameters?.doubleKey)
    console.log("value = " + want.parameters?.boolKey)
    console.log("value = " + JSON.stringify(want.parameters?.arrayKey))
    console.log("value = " + JSON.stringify(want.parameters?.wantParamsKey))
  }
}
</code></pre>
<h4 id="支持的参数类型">支持的参数类型</h4>
<p>WantParams支持的类型有：<br>
boolean、int、float、double、String、WantParams、boolean[]、int[]、float[]、double[]、String[]。<br>
WantParams提供的接口详细如下：</p>
<table>
<thead>
<tr>
<th>接口</th>
<th>返回值</th>
<th>参数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>addValue</td>
<td>WantParams</td>
<td>String key, boolean value</td>
<td>为WantParams添加"String"类型的key，"boolean"类型的值value。</td>
</tr>
<tr>
<td>addValue</td>
<td>WantParams</td>
<td>String key, int  value</td>
<td>为WantParams添加"String"类型的key，"int"类型的值value。</td>
</tr>
<tr>
<td>addValue</td>
<td>WantParams</td>
<td>String key, double value</td>
<td>为WantParams添加"String"类型的key，"double"类型的值value。</td>
</tr>
<tr>
<td>addValue</td>
<td>WantParams</td>
<td>String key, String value</td>
<td>为WantParams添加"String"类型的key，"String"类型的值value。</td>
</tr>
<tr>
<td>addValue</td>
<td>WantParams</td>
<td>String key, boolean[] value</td>
<td>为WantParams添加"String"类型的key，"boolean[]"类型的值value。</td>
</tr>
<tr>
<td>addValue</td>
<td>WantParams</td>
<td>String key, int[] value</td>
<td>为WantParams添加"String"类型的key，"int[]"类型的值value。</td>
</tr>
<tr>
<td>addValue</td>
<td>WantParams</td>
<td>String key, double[] value</td>
<td>为WantParams添加"String"类型的key，"double[]"类型的值value。</td>
</tr>
<tr>
<td>addValue</td>
<td>WantParams</td>
<td>String key, String[] value</td>
<td>为WantParams添加"String"类型的key，"String[]"类型的值value。</td>
</tr>
<tr>
<td>addValue</td>
<td>WantParams</td>
<td>String key, WantParams value</td>
<td>为WantParams添加"String"类型的key，"WantParams"类型的值value。</td>
</tr>
<tr>
<td>getValue</td>
<td>Object</td>
<td>String key</td>
<td>获取键值为key的属性值，如果键值不存在则返回null。</td>
</tr>
<tr>
<td>toWantParamsString</td>
<td>String</td>
<td>-</td>
<td>将WantParams对象转换为Json字符串。</td>
</tr>
</tbody>
</table>
<h3 id="注意事项">注意事项</h3>
<ul>
<li>addValue和getValue中的key不能包含特殊字符；如\t、\r、\n等。</li>
<li>在使用手动方式(非WantParams)自定义字符串时，key和value均不能包含特殊字符。</li>
<li>array和object不支持使用手动方式进行使用。</li>
<li>double的小数点后有效小数位为6位。</li>
</ul>
<h2 id="用启动ability的方式拉起原生activity">用启动Ability的方式拉起原生Activity</h2>
<p>每一个Ability对应一个StageActivity，启动Ability实际是拉起对应的StageActivity。</p>
<p>所以将原生Activity按照上文中Ability对应StageActivity的规则命名，可以用启动Ability的方式拉起原生Activity。</p>
<pre><code class="language-javascript">// xxx.ets
 let want: Want = {
    bundleName: 'com.example.helloworld',
    moduleName: 'entry', //小写
    abilityName: 'Jump', //首字母大写
    parameters:{id:1,name:'ArkUI-X'} //可选参数
    };
    let context = getContext(this) as common.UIAbilityContext;
    context.startAbility(want, (err, data) =&gt; {
    }); 
</code></pre>
<pre><code class="language-java">// xxx.java
public class EntryJumpActivity extends AppCompatActivity { //命名：moduleName + abilityName + “Activity”
    private static final String WANT_PARAMS = "params";
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_jump);
        Intent intent = getIntent();
        String params = "";
        if (intent != null) {
            params = intent.getStringExtra(WANT_PARAMS);
        }
    }
}
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-25 17:31">2025-06-25 17:31</span>&nbsp;
<a href="https://www.cnblogs.com/zhaloe">龙儿筝</a>&nbsp;
阅读(<span id="post_view_count">33</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18946864);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18946864', targetLink: 'https://www.cnblogs.com/zhaloe/p/18946864', title: 'ArkUI-X通过Stage模型开发Android端应用指南(二)' })">举报</a>
</div>
        