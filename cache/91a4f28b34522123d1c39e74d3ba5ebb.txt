
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/XY-Heruo/p/18935503" title="发布于 2025-06-18 23:18">
    <span role="heading" aria-level="2">[python]动态实例化</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        python根据入参动态实例化类
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>最近在查一个服务的问题时，看到有一段代码<code>if .. elif ...</code> 写了近百行，类似</p>
<pre><code class="language-python">if command == "xxx":
	obj = CommandX()
	obj.run()
	# ...
elif command == "yyy":
	obj = CommandY()
	obj.run()
    # ...
elif command == "zzz":
	obj = CommandZ()
	obj.run()
    # ...

# ...
</code></pre>
<p>翻了下git记录，最开始其实只有两三个条件判断，后来command越加越多，就这么延续下来了。</p>
<p>代码逻辑其实没什么问题，也很简单明了，就是看起来有点丑，而且我还开了比较高的桌面缩放，导致一屏幕几乎都是这段<code>if ... elif</code></p>
<p>看来看去越发觉得丑，先写个demo看看能不能跑通代码。</p>
<h2 id="方式1-字典映射">方式1, 字典映射</h2>
<p>如果需要判断的条件比较少，用字典做映射还是挺方便的，但如果条件多，看起来还是挺丑的。</p>
<pre><code class="language-python">from abc import ABC, abstractmethod

class AbstractCommand(ABC):
    @abstractmethod
    def run(self):
        pass

class CommandA(AbstractCommand):
    def run(self):
        return "this is command A"
    
class CommandB(AbstractCommand):
    def run(self):
        return "this is command B"
    
class CommandC(AbstractCommand):
    def run(self):
        return "this is command C"
    
class CommandFactory:
    @staticmethod
    def create_command(command_type: str) -&gt; AbstractCommand:
        command_mapping = {
            "cmda": CommandA,
            "cmdb": CommandB,
            "cmdc": CommandC
        }
        cls = command_mapping.get(command_type.lower())
        if not cls:
            raise ValueError(f"Unknown command type: {command_type}")
        return cls()
    
if __name__ == "__main__":
    cmd = CommandFactory.create_command("cmda")
    assert cmd.run() == "this is command A"

    cmd = CommandFactory.create_command("cmdb")
    assert cmd.run() == "this is command B"

    cmd = CommandFactory.create_command("cmdc")
    assert cmd.run() == "this is command CD"  # should be exception

    cmd = CommandFactory.create_command("cmdd")  # should be exception
    assert cmd.run() == "this is command D"
</code></pre>
<h2 id="方式2-__init_subclass__">方式2, <code>__init_subclass__</code></h2>
<p>《流畅的Python(第2版)》的最后一章提到了这个<code>__init__subclass__</code>，根据python官方文档：</p>
<blockquote>
<p>当所在类派生子类时此方法就会被调用。<em>cls</em> 将指向新的子类。如果定义为一个普通实例方法，此方法将被隐式地转换为类方法。传给一个新类的关键字参数会被传给上级类的 <code>__init_subclass__</code>。 为了与其他使用 <code>__init_subclass__</code> 的类兼容，应当去掉需要的关键字参数再将其他参数传给基类。</p>
</blockquote>
<p>借助这个机制，可以在实现抽象基类时自动注册子类，避免手动维护注册表。</p>
<pre><code class="language-python">from abc import ABCMeta, abstractmethod
from threading import Lock
from collections import UserDict

class ThreadSafeDict(UserDict):
    """线程安全的字典"""
    def __init__(self):
        super().__init__()
        self._lock = Lock()
    
    def __setitem__(self, key, item):
        with self._lock:
            super().__setitem__(key, item)

class Command(metaclass=ABCMeta):
    registry = ThreadSafeDict()

    def __init__(self):
        pass

    @abstractmethod
    def run(self):
        pass

    def __init_subclass__(cls, **kwargs):
        super().__init_subclass__(**kwargs)
        cls.registry[cls.__name__.lower()] = cls  # 自动注册子类

# 子类定义即自动注册
class CommandA(Command):
    def run(self):
        return "this is command a!"

class CommandB(Command):
    def run(self):
        return "this is command b!"

class CommandC(Command):
    def run(self):
        return "this is command b!"
    
def create_command(command_type: str) -&gt; Command:
    """工厂函数"""
    cls = Command.registry.get(command_type.lower())
    if not cls:
        raise ValueError(f"Unknown command type: {command_type}")
    return cls()
    
if __name__ == "__main__":
    cmd = create_command("CommandA")
    assert cmd.run() == "this is command a!"
    cmd = create_command("CommandB")
    assert cmd.run() == "this is command b!"
    cmd = create_command("CommandC")
    assert cmd.run() == "this is command cc!"  # should be exception
    cmd = create_command("CommandD")
    assert cmd.run() == "this is command b!"  # should be exception
</code></pre>
<p>乍一看还是挺不错的，但是也有个缺点，那就是如果各个类分散在不同模块中，那么工厂函数所在的模块就要写一堆<code>from xxx import ...</code></p>
<p>如果module和类命名比较规范，也可以这么动态加载类</p>
<pre><code class="language-python">import importlib

def create_class(module_name, class_name):
    module = importlib.import_module(module_name)
    cls = getattr(module, class_name)
    return cls()
</code></pre>
<h2 id="补充">补充</h2>
<p>自动注册类看起来炫，但是对代码阅读来说不是很直观。易读还是美观？这是一个问题。</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/XY-Heruo/" target="_blank">花酒锄作田</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/XY-Heruo/p/18935503" target="_blank">https://www.cnblogs.com/XY-Heruo/p/18935503</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-18 23:19">2025-06-18 23:18</span>&nbsp;
<a href="https://www.cnblogs.com/XY-Heruo">花酒锄作田</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18935503);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18935503', targetLink: 'https://www.cnblogs.com/XY-Heruo/p/18935503', title: '[python]动态实例化' })">举报</a>
</div>
        