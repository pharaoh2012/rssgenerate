
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/deali/p/18926233" title="发布于 2025-06-12 22:19">
    <span role="heading" aria-level="2">告别图形界面：Windows系统OpenSSH服务部署</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        Windows终于学会了没羞没臊地用命令行装OpenSSH，结果设置界面还是卡得像屎，算了，至少比以前强点。不过这SSH连上去还是CMD，是哪个脑回路觉得这操作体验没问题啊？
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>士别三日当刮目相待</p>
<p>没想到这么多年过去了，Windows 也不再是以前那个离开了图形界面啥也不是的系统</p>
<p>Windows 10/11 和 Server 2019+ 已内置 OpenSSH Server，可以作为跳板连接到其他 Linux 服务器。</p>
<p>这种场景一般是办公室有长期开机的 Windows 电脑，然后通过虚拟组网的方式来远程操作</p>
<h2 id="操作步骤">操作步骤</h2>
<p>先说明一点，网上找到的大部分资料都是使用图形界面操作，然后 Windows 那个设置真的很垃圾，本身很卡，点多几下就卡死或者闪退。</p>
<p>在设置的可选功能里面添加 OpenSSH Server 组件，总是跑到一半就卡死不动了</p>
<p>在啃了官方文档之后，我完全用命令行的方式搞定了。不得不说这个 powershell 确实有点东西的</p>
<h3 id="安装-openssh-server">安装 OpenSSH Server</h3>
<pre><code class="language-powershell">Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
</code></pre>
<p>这个命令比在设置界面添加快多了</p>
<h3 id="启动服务并设置为开机自启">启动服务并设置为开机自启</h3>
<pre><code class="language-powershell">Start-Service sshd
Set-Service -Name sshd -StartupType 'Automatic'
</code></pre>
<h3 id="开放防火墙端口22">开放防火墙端口（22）</h3>
<p>为了安全起见，后续建议修改一下其他端口</p>
<pre><code class="language-powershell">New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
</code></pre>
<h2 id="连接">连接</h2>
<p>这时候就已经搞定了，直接用用本地账号或 Microsoft 账户登录就行了，建议使用本地账户</p>
<h3 id="使用本地用户--密码登录">使用本地用户 + 密码登录</h3>
<pre><code class="language-bash">ssh your_user@10.x.x.x
</code></pre>
<h3 id="使用密钥登录">使用密钥登录</h3>
<p>在 Linux 上生成密钥对（或使用已有）</p>
<pre><code class="language-bash">ssh-keygen -t rsa -b 4096
</code></pre>
<p>将公钥内容添加到 Windows 的用户 .ssh\authorized_keys 里</p>
<pre><code class="language-bash">C:\Users\&lt;your_user&gt;\.ssh\authorized_keys
</code></pre>
<p>如果是 Linux 的话，这里就完事了，可以直接用密钥免密码登录，但 Windows 有点小坑，接下来介绍一下。</p>
<h3 id="权限">权限</h3>
<p>SSH 对配置文件的权限要求比较严格，在 Linux 下很简单，用 chmod 和 chown 命令就行了</p>
<p>但在 Windows 上就蒙圈了，似乎可以在图形界面配置权限，但好像很复杂</p>
<p>不过我还是找到了用命令行配置权限的方法</p>
<pre><code class="language-bash"># 设置目录权限：仅用户本身可读写
icacls .ssh /inheritance:r
icacls .ssh /grant:r 用户名:F
icacls .ssh /remove "Authenticated Users" "Users" "Administrators" "System"
icacls .ssh /setowner 用户名

# 设置 authorized_keys 权限
cd .ssh
icacls authorized_keys /inheritance:r
icacls authorized_keys /grant:r 用户名:F
icacls authorized_keys /remove "Authenticated Users" "Users" "Administrators" "System"
icacls authorized_keys /setowner 用户名
</code></pre>
<h2 id="配置">配置</h2>
<p>Windows 上的 sshd_config 路径在 C:\ProgramData\ssh\sshd_config</p>
<p>刚才说 Windows 上的 SSH 密钥登录有点小坑，这里看下这个配置文件</p>
<pre><code class="language-ini"># This is the sshd server system-wide configuration file.  See 
# sshd_config(5) for more information.

# The strategy used for options in the default sshd_config shipped with
# OpenSSH is to specify options with their default value where
# possible, but leave them commented.  Uncommented options override the
# default value.

#Port 22
#AddressFamily any
#ListenAddress 0.0.0.0
#ListenAddress ::

#HostKey __PROGRAMDATA__/ssh/ssh_host_rsa_key
#HostKey __PROGRAMDATA__/ssh/ssh_host_dsa_key
#HostKey __PROGRAMDATA__/ssh/ssh_host_ecdsa_key
#HostKey __PROGRAMDATA__/ssh/ssh_host_ed25519_key

# Ciphers and keying
#RekeyLimit default none

# Logging
#SyslogFacility AUTH
#LogLevel INFO

# Authentication:

#LoginGraceTime 2m
#PermitRootLogin prohibit-password
#StrictModes yes
#MaxAuthTries 6
#MaxSessions 10

#PubkeyAuthentication yes

# The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2
# but this is overridden so installations will only check .ssh/authorized_keys
AuthorizedKeysFile	.ssh/authorized_keys

#AuthorizedPrincipalsFile none

# For this to work you will also need host keys in %programData%/ssh/ssh_known_hosts
#HostbasedAuthentication no
# Change to yes if you don't trust ~/.ssh/known_hosts for
# HostbasedAuthentication
#IgnoreUserKnownHosts no
# Don't read the user's ~/.rhosts and ~/.shosts files
#IgnoreRhosts yes

# To disable tunneled clear text passwords, change to no here!
#PasswordAuthentication yes
#PermitEmptyPasswords no

# GSSAPI options
#GSSAPIAuthentication no

#AllowAgentForwarding yes
#AllowTcpForwarding yes
#GatewayPorts no
#PermitTTY yes
#PrintMotd yes
#PrintLastLog yes
#TCPKeepAlive yes
#UseLogin no
#PermitUserEnvironment no
#ClientAliveInterval 0
#ClientAliveCountMax 3
#UseDNS no
#PidFile /var/run/sshd.pid
#MaxStartups 10:30:100
#PermitTunnel no
#ChrootDirectory none
#VersionAddendum none

# no default banner path
#Banner none

# override default of no subsystems
Subsystem	sftp	sftp-server.exe

# Example of overriding settings on a per-user basis
#Match User anoncvs
#	AllowTcpForwarding no
#	PermitTTY no
#	ForceCommand cvs server

Match Group administrators
       AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys


</code></pre>
<p>首先把 <code>PubkeyAuthentication yes</code> 的注释去掉，虽然默认是启用 <code>PubkeyAuthentication</code>，但为了明确起见，建议取消注释，以免系统某些默认值变动导致失效。</p>
<p>然后还有个大坑 <code>Match Group administrators</code></p>
<p>如果登录用户属于 <strong>administrators 组</strong>，就不会使用 <code>~/.ssh/authorized_keys</code>，而是会强制用 <code>C:\ProgramData\ssh\administrators_authorized_keys</code></p>
<p>一般 Windows 用户都是管理员，所以写入到 <code>C:\Users\用户名\.ssh\authorized_keys</code> 的配置是无效的</p>
<p>正确的方式是把公钥写入到 <code>C:\ProgramData\ssh\administrators_authorized_keys</code></p>
<p>最好在配置下权限</p>
<pre><code class="language-powershell">cd 'C:\ProgramData\ssh'
New-Item -ItemType File -Path .\administrators_authorized_keys -Force
icacls .\administrators_authorized_keys /inheritance:r
icacls .\administrators_authorized_keys /grant:r "Administrators:F"
</code></pre>
<h2 id="修改默认端口">修改默认端口</h2>
<p>默认是 22 端口，不太安全，别人一扫就出来了</p>
<h3 id="端口范围科普">端口范围科普</h3>
<ul>
<li><code>1025</code> ~ <code>49151</code> 是注册端口段（很多服务注册使用）</li>
<li><code>49152</code> ~ <code>65535</code> 是动态/私有端口段（<strong>推荐选这里</strong>）</li>
</ul>
<h3 id="查看端口占用">查看端口占用</h3>
<p>在私有端口段随便选一个就行</p>
<p>不过可以先查看占用，比如：</p>
<pre><code class="language-powershell">netstat -aon | findstr ":60222"
</code></pre>
<h3 id="添加防火墙规则">添加防火墙规则</h3>
<p>修改完记得添加规则</p>
<pre><code class="language-powershell">New-NetFirewallRule -Name "OpenSSH Custom Port" `
  -DisplayName "OpenSSH Custom Port (60222)" `
  -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 60222
</code></pre>
<h3 id="重启-ssh-服务">重启 SSH 服务</h3>
<pre><code class="language-powershell">Restart-Service sshd
</code></pre>
<h2 id="使用体验">使用体验</h2>
<p>Windows 的命令行体验还是比较有限的</p>
<p>启用了 SSH Server 之后，连上去居然是 CMD</p>
<p>不过要改成 PowerShell 也不难</p>
<p>这里贴一下网上找到的方法（未测试）</p>
<h3 id="方法一修改注册表">方法一，修改注册表</h3>
<pre><code class="language-powershell">New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShell `
  -PropertyType String -Value "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -Force
</code></pre>
<p>重启服务 <code>Restart-Service sshd</code></p>
<h3 id="方法二为单个用户设置登录-shell">方法二，为单个用户设置登录 shell</h3>
<p>如果不想影响系统中其他用户（比如安全隔离），可以编辑 <code>sshd_config</code>，增加如下内容：</p>
<pre><code class="language-ini">Match User 用户名
    ForceCommand powershell.exe
</code></pre>
<h3 id="方法三临时切换">方法三，临时切换</h3>
<p>连上去之后直接输入 <code>powershell</code> 或 <code>pwsh</code> （如果有安装 PowerShell 7 的话）</p>
<h2 id="小结">小结</h2>
<p>搞定了，虽然是连上了 SSH，不过 Windows 的价值也就在于当跳板连 Linux 了…</p>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/391373172" target="_blank" rel="noopener nofollow">https://zhuanlan.zhihu.com/p/391373172</a></li>
</ul>

</div>
<div id="MySignature" role="contentinfo">
    微信公众号：「程序设计实验室」
专注于互联网热门新技术探索与团队敏捷开发实践，包括架构设计、机器学习与数据分析算法、移动端开发、Linux、Web前后端开发等，欢迎一起探讨技术，分享学习实践经验。
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0006944444444444445" data-date-updated="2025-06-12 22:20">2025-06-12 22:19</span>&nbsp;
<a href="https://www.cnblogs.com/deali">程序设计实验室</a>&nbsp;
阅读(<span id="post_view_count">262</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18926233);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18926233', targetLink: 'https://www.cnblogs.com/deali/p/18926233', title: '告别图形界面：Windows系统OpenSSH服务部署' })">举报</a>
</div>
        