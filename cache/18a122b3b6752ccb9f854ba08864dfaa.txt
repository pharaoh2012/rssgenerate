
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/jason-play/p/19007567" title="发布于 2025-07-27 17:16">
    <span role="heading" aria-level="2">从登录到 Markdown：用 60 行 Python 批量抓取 Hydro OJ 题目</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>作者：jason<br>
日期：2025-07-26<br>
版权：wanwusangzhi 2024-2025<br>
项目地址:<a href="https://github.com/wanwusangzhigit/hydro" target="_blank" rel="noopener nofollow">https://github.com/wanwusangzhigit/hydro</a></p>
<hr>
<h3 id="1-背景故事">1. 背景故事</h3>
<p>很多人第一次刷题时，都会把题目复制到本地笔记软件里做草稿。<br>
动手复制粘贴几次后，你会立刻意识到：<br>
<strong>“公式全丢了，图片全是外链，表格惨不忍睹。”</strong><br>
<s>“主要无法用AI解题”</s></p>
<p>于是就有了今天这 60 行小脚本：<br>
<strong>自动登录 OJ → 拉取指定题目 → 把 KaTeX 公式还原成 LaTeX → 输出 Markdown 文件。</strong><br>
以后写题解、做笔记，再也不用对着网页敲公式了。</p>
<hr>
<h3 id="2-整体思路">2. 整体思路</h3>
<p>一句话概括：<br>
<strong>“用 requests 做登录，用 BeautifulSoup 找内容，用 html2text 转 Markdown。”</strong></p>
<p>流程图：</p>
<pre><code>┌--------------┐
│ 用户输入      │
│ BASE_URL      │
│ Problem_ID    │
│ USERNAME/PWD  │
└------┬--------┘
       │
┌------┴--------┐
│ 1. 拉登录页   │  ← GET /login
│ 取 csrf-token │
└------┬--------┘
       │
┌------┴--------┐
│ 2. 提交登录   │  ← POST /login
│ 302 跳转即成功│
└------┬--------┘
       │
┌------┴--------┐
│ 3. 拉题目页   │  ← GET /p/{Problem_ID}
│ 替换 KaTeX    │
└------┬--------┘
       │
┌------┴--------┐
│ 4. 转 Markdown│  ← html2text
│ 写入 p.md     │
└--------------┘
</code></pre>
<hr>
<h3 id="3-关键代码拆解">3. 关键代码拆解</h3>
<h4 id="31-会话与伪装-ua">3.1 会话与伪装 UA</h4>
<pre><code class="language-python">s = requests.Session()
s.headers.update({
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '
                  'AppleWebKit/537.36 (KHTML, like Gecko) '
                  'Chrome/120.0.0.0 Safari/537.36'
})
</code></pre>
<ul>
<li>使用 <code>Session</code> 可自动携带后续 Cookie，不用手动维护。</li>
<li>UA 伪装成桌面 Chrome，避免服务器直接拒绝“非浏览器”请求。</li>
</ul>
<h4 id="32-动态获取-csrf-token">3.2 动态获取 CSRF-token</h4>
<pre><code class="language-python">login_html = s.get(LOGIN_URL).text
soup = BeautifulSoup(login_html, 'lxml')
csrf = (soup.find('meta', attrs={'name': 'csrf-token'}) or
        soup.find('input', attrs={'name': re.compile(r'csrf|_csrf')}))
if csrf:
    csrf = csrf.get('content') or csrf['value']
else:
    csrf = ''
</code></pre>
<ul>
<li>兼容两种常见写法：
<ul>
<li><code>&lt;meta name="csrf-token" content="xxx"&gt;</code></li>
<li><code>&lt;input type="hidden" name="_csrf" value="xxx"&gt;</code></li>
</ul>
</li>
<li>如果站点没开 CSRF，就留空字符串，不报错。</li>
</ul>
<h4 id="33-登录并检查重定向">3.3 登录并检查重定向</h4>
<pre><code class="language-python">resp = s.post(LOGIN_URL, data={
    'uname': USERNAME,
    'password': PASSWORD,
    '_csrf': csrf
}, allow_redirects=False)

if resp.status_code != 302:
    raise RuntimeError('登录失败，请检查账号密码或抓包核对字段名')
</code></pre>
<ul>
<li><code>allow_redirects=False</code>：<br>
大多数 OJ 登录成功后 302 跳转到首页 / 个人页，用这一特征即可判断是否成功。</li>
<li>若返回 200，多半是密码错误或字段名不对。</li>
</ul>
<h4 id="34-把-katex-还原成-latex">3.4 把 KaTeX 还原成 LaTeX</h4>
<pre><code class="language-python">for katex_span in soup.find_all('span', class_='katex'):
    annotation = katex_span.find('annotation')
    if annotation:
        katex_span.replace_with(f"${annotation.text}$")
</code></pre>
<ul>
<li>KaTeX 渲染后的 HTML 会把公式藏在 <code>&lt;annotation encoding="application/x-tex"&gt;</code> 里。</li>
<li>取出文本，再用 <code>$...$</code> 包裹，Markdown 就能被本地渲染器正确识别为行内公式。</li>
</ul>
<h4 id="35-提取题目主体">3.5 提取题目主体</h4>
<pre><code class="language-python">problem_content = soup.find('div', class_='problem-content')
</code></pre>
<ul>
<li>不同 OJ 的类名可能不一样，按需修改。</li>
<li>找到后直接传给 <code>html2text</code>。</li>
</ul>
<h4 id="36-html--markdown">3.6 HTML → Markdown</h4>
<pre><code class="language-python">h = html2text.HTML2Text()
h.ignore_links = False
h.bypass_tables = False
h.ignore_images = False
h.body_width = 0
markdown = h.handle(str(problem_content))
</code></pre>
<ul>
<li>关闭自动换行，防止长公式被截断。</li>
<li>保留链接、图片、表格，保证题目完整性。</li>
</ul>
<hr>
<h3 id="4完整代码">4.完整代码</h3>
<pre><code class="language-python">#!/usr/bin/env python3
"""
by jason
2025-07-26
copyright wanwusangzhi 2024-2025
"""
import requests, re, sys
from bs4 import BeautifulSoup
import html2text

# ========== 按需修改 ==========
BASE_URL = input("")       # 你的站点根域名
LOGIN_URL = f'{BASE_URL}/login' # login page
Problem_ID = input("")
HOME_URL = f'{BASE_URL}/p/{Problem_ID}'
USERNAME  = input("")
PASSWORD  = input("")
# ===============================

def main():
    s = requests.Session()
    s.headers.update({
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '
                      'AppleWebKit/537.36 (KHTML, like Gecko) '
                      'Chrome/120.0.0.0 Safari/537.36'
    })

    # 1. 拉登录页，取 csrf
    login_html = s.get(LOGIN_URL).text
    soup = BeautifulSoup(login_html, 'lxml')
    csrf = (soup.find('meta', attrs={'name': 'csrf-token'}) or
            soup.find('input', attrs={'name': re.compile(r'csrf|_csrf')}))
    if csrf:
        csrf = csrf.get('content') or csrf['value']
    else:
        csrf = ''          # 站点没开 csrf 验证

    # 2. 提交账号密码
    resp = s.post(LOGIN_URL, data={
        'uname': USERNAME,
        'password': PASSWORD,
        '_csrf': csrf
    }, allow_redirects=False)

    if resp.status_code != 302:
        raise RuntimeError('登录失败，请检查账号密码或抓包核对字段名')

    # 3. 登录成功后拿首页
    home_html = s.get(HOME_URL).text
    soup = BeautifulSoup(home_html, 'html.parser')
    for katex_span in soup.find_all('span', class_='katex'):
        annotation = katex_span.find('annotation')
        if annotation:
            katex_span.replace_with(f"${annotation.text}$")  # 可选：加 $ 变成 LaTeX 公式
        # 查找class="problem-content"的div
    problem_content = soup.find('div', class_='problem-content')
    html=problem_content
    print(html)
    # 创建 html2text 处理器
    h = html2text.HTML2Text()
    h.ignore_links = False  # 不忽略链接
    h.bypass_tables = False  # 不忽略表格
    h.ignore_images = False  # 不忽略图片
    h.body_width = 0  # 不自动换行
    		# 转换 HTML 为 Markdown
    markdown = h.handle(str(html))
    print(markdown)		
    with open("p.md","w",encoding='utf-8') as f:
        f.write(markdown)

if __name__ == '__main__':
    main()
</code></pre>
<h3 id="5-运行示例">5. 运行示例</h3>
<pre><code class="language-bash">$ python3 grab.py
https://hydro.ac
H1001
username
password
</code></pre>
<p>程序会在当前目录生成 <code>p.md</code>，内容示例：</p>
<pre><code class="language-markdown">### 1000. A + B Problem

#### Description
Calculate $a+b$.

#### Input
Two integers $a, b$ ($0 \le a, b \le 10^9$).

#### Output
Output $a+b$.

#### Sample Input
</code></pre>
<p>1 2</p>
<pre><code>
#### Sample Output
</code></pre>
<p>3</p>
<pre><code></code></pre>
<hr>
<h3 id="6-小结">6. 小结</h3>
<p>60 行代码，解决了“复制题目丢格式”的痛点。<br>
核心思路只有三步：<strong>登录 → 解析 → 转换</strong>。<br>
把它跑通后，你就有了一套完全属于自己的题库快照，离线刷题、写题解、做 LaTeX 笔记都方便很多。</p>
<p>Happy hacking &amp; happy coding!</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/jason-play/" target="_blank">爱玩游戏的jason</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/jason-play/p/19007567" target="_blank">https://www.cnblogs.com/jason-play/p/19007567</a></p>
欢迎您与我联系:<a href="mailto:liuqiyuan_jason@outlook.com">邮箱</a>
也可以加我微信:<code>13818403352</code>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-27 17:17">2025-07-27 17:16</span>&nbsp;
<a href="https://www.cnblogs.com/jason-play">爱玩游戏的jason</a>&nbsp;
阅读(<span id="post_view_count">48</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19007567);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19007567', targetLink: 'https://www.cnblogs.com/jason-play/p/19007567', title: '从登录到 Markdown：用 60 行 Python 批量抓取 Hydro OJ 题目' })">举报</a>
</div>
        