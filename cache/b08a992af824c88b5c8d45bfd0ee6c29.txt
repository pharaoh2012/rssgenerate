
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/deali/p/18670273" title="发布于 2025-01-14 10:28">
    <span role="heading" aria-level="2">单点认证（SSO）方案调研总结</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="sso方案">SSO方案</h1>
<h2 id="sso介绍">SSO介绍</h2>
<p>单点登录（SSO）是一种身份验证解决方案，可让用户通过一次性用户身份验证登录多个应用程序和网站。这意味着用户只需输入一次用户名和密码，即可访问所有相互信任的系统，而无需在每个系统中单独登录。</p>
<h3 id="sso-的主要优点">SSO 的主要优点</h3>
<ol>
<li><strong>用户体验改进</strong>：用户只需记住一个用户名和密码，减少了重复登录的麻烦。</li>
<li><strong>安全性增强</strong>：通过集中管理认证信息，可以更好地控制和保护用户数据，降低密码泄露的风险。</li>
<li><strong>效率提升</strong>：减少了因多次登录导致的时间浪费，提高了工作效率。</li>
</ol>
<h3 id="安全风险">安全风险</h3>
<h4 id="单点故障风险">单点故障风险</h4>
<p>如果 SSO 系统出现故障，所有依赖于该系统的应用程序或服务将无法使用，可能导致业务中断，影响用户体验和组织的正常运行。</p>
<p><strong>应对措施</strong>：</p>
<ul>
<li>部署高可用架构（如负载均衡、主备机制）确保 SSO 系统的稳定性。</li>
<li>定期备份系统配置和数据，并制定全面的故障恢复计划（DRP）。</li>
<li>在系统维护或故障期间，提供备用的应急认证机制，保障关键业务的持续运行。</li>
</ul>
<h4 id="系统被攻陷的风险">系统被攻陷的风险</h4>
<p>如果 SSO 系统被攻击或黑客入侵，攻击者可能获得对所有依赖该系统的应用程序和资源的访问权限，带来巨大的安全威胁。</p>
<p><strong>应对措施</strong>：</p>
<ul>
<li>确保 SSO 系统的安全性，通过使用最新的安全协议（如 TLS 1.3）和定期安全审计减少漏洞。</li>
<li>实现网络隔离和分区，限制对 SSO 系统的访问。</li>
<li>监控系统日志和用户行为，设置入侵检测系统（IDS）以识别异常活动。</li>
</ul>
<h4 id="用户凭证泄露风险">用户凭证泄露风险</h4>
<p>SSO 的最大风险在于，如果用户的凭证（如用户名和密码）被泄露，攻击者可能获得对网络上全部或大部分应用程序和资源的访问权限，造成广泛的影响。</p>
<p><strong>应对措施</strong>：</p>
<ul>
<li><strong>密码策略</strong>：要求用户创建强密码，定期更新，并使用加密算法安全存储密码（如 PBKDF2、bcrypt）。</li>
<li><strong>多因素身份验证 (MFA)</strong>：将 2FA 或 MFA 融入 SSO 实施流程，要求用户提供额外的身份验证因素（如短信验证码、OTP、人脸识别等）。这可以有效减少凭证泄露导致的风险。</li>
<li><strong>登录监控</strong>：实时监控登录行为，检测异常活动（如短时间内多个失败的登录尝试）并采取相应措施。</li>
</ul>
<h3 id="关键概念">关键概念</h3>
<p>在 SSO（单点登录）系统中，身份提供者（Identity Provider，IdP）和服务提供者（Service Provider，SP）是两个关键角色。SSO 依赖于身份提供者（Identity Provider，IdP）和服务提供者（Service Provider，SP）之间的信任关系。</p>
<p><img src="https://img2024.cnblogs.com/blog/866942/202501/866942-20250114102625900-119260624.png" alt="" loading="lazy"></p>
<ol>
<li>
<p><strong>身份提供者（Identity Provider, IdP）</strong>：</p>
<p><strong>定义</strong>：IdP 是负责验证用户身份并提供身份信息的实体。它管理用户的认证信息（如用户名、密码、令牌等）并提供这些信息给信任它的服务提供者。</p>
<p><strong>例子：</strong></p>
<ul>
<li><strong>企业内部 IdP</strong>：如 Microsoft Active Directory Federation Services（AD FS），它为企业内部应用提供单点登录服务。</li>
<li><strong>第三方 IdP</strong>：如 南网账号、微信、Okta 等，它们为各种第三方应用提供认证服务。</li>
</ul>
</li>
<li>
<p><strong>服务提供者（Service Provider, SP）</strong>：</p>
<p><strong>定义</strong>：SP 是提供某种服务或应用的实体，它依赖 IdP 来验证用户身份。SP 信任 IdP 提供的身份验证信息，并根据这些信息决定用户的访问权限。</p>
<p><strong>例子：</strong></p>
<ul>
<li><strong>企业应用</strong>：如企业的邮件系统、CRM（客户关系管理）系统、ERP（企业资源计划）系统等，这些系统通过企业内部的 IdP 提供单点登录功能。</li>
<li><strong>在线服务</strong>：如 网盘、小红书、QQ音乐 等，这些在线服务可以通过第三方 IdP（如 微信 或 支付宝）提供单点登录功能。</li>
</ul>
</li>
</ol>
<h2 id="sso-实现原理">SSO 实现原理</h2>
<h3 id="总体架构">总体架构</h3>
<p><img src="https://img2024.cnblogs.com/blog/866942/202501/866942-20250114102639414-383868837.png" alt="image" loading="lazy"></p>
<ul>
<li><strong>应用系统（SP）：</strong>需要登录的系统</li>
<li><strong>SSO客户端：</strong>登录、退出（独立jar包给应用系统引用)</li>
<li><strong>SSO服务端（IdP）：</strong>
<ul>
<li>登录服务：处理用户登录请求。</li>
<li>登录状态：提供登录状态校验和登录信息查询服务。</li>
<li>退出服务：处理用户注销。</li>
</ul>
</li>
<li><strong>数据库：</strong>存储用户账户信息</li>
<li><strong>缓存：</strong>存储用户的登录状态信息</li>
</ul>
<h3 id="登录流程">登录流程</h3>
<p><img src="https://img2024.cnblogs.com/blog/866942/202501/866942-20250114102649425-1846716228.png" alt="image" loading="lazy"></p>
<h4 id="token-方式">Token 方式</h4>
<ol>
<li><strong>用户访问应用系统（SP）：</strong>
<ul>
<li>应用系统检查用户是否已经登录。</li>
<li>如果未登录，重定向到SSO服务端。</li>
</ul>
</li>
<li><strong>SSO服务端处理登录：</strong>
<ul>
<li>用户提供用户名和密码，服务端校验信息。</li>
<li>校验通过，在缓存中存储用户的登录状态，并与应用系统分享专用Token（每个应用系统使用不同 Token）</li>
</ul>
</li>
<li><strong>应用系统获取Token：</strong>
<ul>
<li>用户回转到应用系统，应用通过 Token 验证用户身份。</li>
<li>验证成功，从 SSO 服务端获取用户信息，用户成功登录应用系统。</li>
</ul>
</li>
</ol>
<h4 id="authorization-code-方式">Authorization Code 方式</h4>
<ol>
<li><strong>用户访问应用系统（SP）：</strong>
<ul>
<li>应用系统检查用户是否已经登录。</li>
<li>如果未登录，重定向到 SSO 服务端，同时传送返回地址。</li>
</ul>
</li>
<li><strong>SSO服务端处理登录：</strong>
<ul>
<li>用户提供用户名和密码，服务端校验信息。</li>
<li>校验通过，服务端产生一次性的 Authorization Code，并重定向到应用系统。</li>
</ul>
</li>
<li><strong>应用系统使用Authorization Code：</strong>
<ul>
<li>应用通过与SSO服务端交互，使用Authorization Code换取用户信息和证书。</li>
<li>应用系统根据证书验证用户身份，存储用户状态，实现自行管理。</li>
</ul>
</li>
</ol>
<h4 id="比较和优缺点">比较和优缺点</h4>
<h5 id="token-方式-1">Token 方式</h5>
<ul>
<li>优点：
<ul>
<li>实现简单，提供直接的状态分享，进一步降低应用系统的实现难度。</li>
<li>通过缓存共享，能够提高性能。</li>
<li>易于实现全局管理，例如全局注销功能。</li>
</ul>
</li>
<li>缺点：
<ul>
<li>Token在缓存中的精确管理需要进一步思考，存在失效和解联的处理复杂性。</li>
<li>应用系统依赖SSO服务端较强，灵活性相对较低。</li>
</ul>
</li>
</ul>
<h5 id="authorization-code-方式-1">Authorization Code 方式</h5>
<ul>
<li>优点：
<ul>
<li>提供更高的安全性，通过一次性Code交换资料，优化了信息传输和中间人攻击防护。</li>
<li>应用系统自行管理用户状态，降低了对SSO服务端的依赖。</li>
<li>对现有应用系统的改造较少，便于集成。</li>
</ul>
</li>
<li>缺点：
<ul>
<li>实现复杂，需要额外设计通信流程，并依赖于SSO服务端的信任和接口通过。</li>
<li>无法直接实现全局注销功能，需要额外的设计支持。</li>
</ul>
</li>
</ul>
<h3 id="注销流程">注销流程</h3>
<p><img src="https://img2024.cnblogs.com/blog/866942/202501/866942-20250114102701043-1005698629.png" alt="image" loading="lazy"></p>
<h4 id="token-方式-2">Token 方式</h4>
<ol>
<li><strong>用户访问应用系统的退出功能：</strong>
<ul>
<li>应用系统向SSO服务端发起退出请求，提供应用系统中用户的Token。</li>
</ul>
</li>
<li><strong>SSO服务端处理退出：</strong>
<ul>
<li>根据Token在缓存中删除用户的登录状态以及其他相关的Token。</li>
</ul>
</li>
<li><strong>应用系统退出处理：</strong>
<ul>
<li>下次用户访问其他应用系统时，应用系统向SSO服务端发送Token校验请求时，将收到无效响应，因为过程中所有相关Token已被删除。</li>
</ul>
</li>
</ol>
<h4 id="authorization-code-方式-2">Authorization Code 方式</h4>
<ol>
<li><strong>用户访问应用系统的退出功能：</strong>
<ul>
<li>应用系统向SSO服务端发起退出请求，提供用户的唯一身份标识。</li>
</ul>
</li>
<li><strong>SSO服务端处理退出：</strong>
<ul>
<li>在SSO服务端删除用户相关的登录状态。</li>
<li>通知所有应用系统(SP)，订阅的用户相关退出信息。</li>
</ul>
</li>
<li><strong>应用系统退出处理：</strong>
<ul>
<li>应用系统接收到SSO服务端的通知后，删除本地存储的用户相关的登录状态。</li>
<li>用户将不再能使用其他应用系统的登录账户。</li>
</ul>
</li>
</ol>
<h2 id="常见单点登录方案">常见单点登录方案</h2>
<h3 id="共享-sessioncookie">共享 Session/Cookie</h3>
<p>通过在多个应用间共享用户的认证 Session 或 Cookie 来实现单点登录。</p>
<h4 id="优点">优点</h4>
<ul>
<li>实现简单，适合同域或子域下的多个应用。</li>
<li>性能较好，无需频繁的外部认证请求。</li>
</ul>
<h4 id="缺点">缺点</h4>
<ul>
<li>跨域实现复杂，可能需要引入额外的代理或共享存储。</li>
<li>安全性较低，容易受到 Session 劫持和 XSS 攻击。</li>
</ul>
<h4 id="适用场景">适用场景</h4>
<p>同一个组织内部、同一域或子域下的简单应用。</p>
<h3 id="oauth">OAuth</h3>
<p>开放授权协议，用户通过授权服务器授予客户端访问资源的权限（通常是一个 Access Token）。</p>
<h4 id="优点-1">优点</h4>
<ul>
<li>支持跨域和第三方授权，适合互联网应用。</li>
<li>丰富的权限控制机制，可以细化授权范围。</li>
</ul>
<h4 id="缺点-1">缺点</h4>
<ul>
<li>主要用于授权，而非认证；实现 SSO 时需要扩展（如结合 OpenID Connect）。</li>
<li>安全性依赖于 Token 的保护和管理。</li>
</ul>
<h4 id="适用场景-1">适用场景</h4>
<p>第三方登录、跨组织的资源访问控制。</p>
<h3 id="saml-security-assertion-markup-language">SAML (Security Assertion Markup Language)</h3>
<p>基于 XML 的协议，使用安全断言在身份提供方（IdP）和服务提供方（SP）之间传递用户身份信息。</p>
<h4 id="优点-2">优点</h4>
<ul>
<li>广泛用于企业环境，支持复杂的身份管理需求。</li>
<li>跨平台支持好，适合异构系统。</li>
</ul>
<h4 id="缺点-2">缺点</h4>
<ul>
<li>实现复杂，依赖 XML，性能较差。</li>
<li>配置繁琐，灵活性不如现代协议（如 OIDC）。</li>
</ul>
<h4 id="适用场景-2">适用场景</h4>
<p>企业内部、跨企业系统集成。</p>
<h3 id="oidc-openid-connect">OIDC (OpenID Connect)</h3>
<p>基于 OAuth 2.0 的认证协议，扩展了 OAuth，提供用户身份的验证和基础信息获取。</p>
<h4 id="优点-3">优点</h4>
<ul>
<li>轻量级，基于 JSON 和 REST API。</li>
<li>广泛支持，适合现代 Web 应用和移动端。</li>
<li>提供认证功能（ID Token）和授权功能（Access Token）。</li>
</ul>
<h4 id="缺点-3">缺点</h4>
<ul>
<li>需要依赖 OAuth 的基础实现，可能增加初期学习成本。</li>
<li>对较旧的系统支持不如 SAML。</li>
</ul>
<h4 id="适用场景-3">适用场景</h4>
<p>现代 Web 应用、移动端、跨平台统一登录。</p>
<h3 id="ldap">LDAP</h3>
<p>轻量目录访问协议，用于集中管理用户信息和认证。</p>
<h4 id="优点-4">优点</h4>
<ul>
<li>适合大规模用户目录的集中管理。</li>
<li>可与多种身份认证机制结合。</li>
</ul>
<h4 id="缺点-4">缺点</h4>
<ul>
<li>主要是用户信息管理协议，不是完整的 SSO 方案。</li>
<li>需要与其他协议（如 Kerberos）结合才能实现 SSO。</li>
</ul>
<h4 id="适用场景-4">适用场景</h4>
<p>企业内部，用户目录统一管理。</p>
<h3 id="kerberos">Kerberos</h3>
<p>基于票据的认证协议，用户通过 KDC（Key Distribution Center）获取访问服务的票据。</p>
<h4 id="优点-5">优点</h4>
<ul>
<li>安全性高，避免密码传输。</li>
<li>适合复杂的企业网络和分布式系统。</li>
</ul>
<h4 id="缺点-5">缺点</h4>
<ul>
<li>部署复杂，依赖时间同步。</li>
<li>不适合高延迟或不稳定的网络环境。</li>
</ul>
<h4 id="适用场景-5">适用场景</h4>
<p>企业内部，安全性要求高的场景（如银行、政府）。</p>
<h3 id="总结对比">总结对比</h3>
<table>
<thead>
<tr>
<th>方案</th>
<th>跨域支持</th>
<th>安全性</th>
<th>复杂度</th>
<th>性能</th>
<th>适用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>共享Session/Cookie</td>
<td>较差</td>
<td>较低</td>
<td>低</td>
<td>高</td>
<td>同域应用</td>
</tr>
<tr>
<td>OAuth</td>
<td>较好</td>
<td>中高</td>
<td>中</td>
<td>中</td>
<td>第三方登录、授权控制</td>
</tr>
<tr>
<td>SAML</td>
<td>较好</td>
<td>高</td>
<td>高</td>
<td>较低</td>
<td>企业集成</td>
</tr>
<tr>
<td>OIDC</td>
<td>优秀</td>
<td>中高</td>
<td>中</td>
<td>较高</td>
<td>现代应用</td>
</tr>
<tr>
<td>LDAP</td>
<td>一般</td>
<td>中</td>
<td>中</td>
<td>中</td>
<td>用户目录统一管理</td>
</tr>
<tr>
<td>Kerberos</td>
<td>较差</td>
<td>高</td>
<td>高</td>
<td>较高</td>
<td>企业内高安全性需求</td>
</tr>
</tbody>
</table>
<h2 id="使用已有成熟方案">使用已有成熟方案</h2>
<h3 id="适用场景-6">适用场景</h3>
<ul>
<li><strong>快速启动</strong>：项目需要快速部署且时间紧迫。</li>
<li><strong>广泛支持</strong>：需要支持多种应用和服务的集成。</li>
<li><strong>企业级支持</strong>：需要企业级的技术支持和维护。</li>
</ul>
<h3 id="商业解决方案">商业解决方案</h3>
<h4 id="authingcn">Authing.cn</h4>
<p><a href="https://docs.authing.cn/v2/concepts/" target="_blank" rel="noopener nofollow">https://docs.authing.cn/v2/concepts/</a></p>
<p>Authing 是一家国内的身份认证服务提供商，支持多种标准认证协议（如 OIDC、OAuth 2.0、SAML、LDAP 等），适用于多平台的应用集成。它不仅提供强大的身份认证功能，还支持用户管理、权限控制和多因素认证（MFA）。</p>
<p>可以将任意平台的应用接入，支持多种标准认证协议，提供表单代填功能实现老项目接入。支持私有化部署。</p>
<p><img src="https://img2024.cnblogs.com/blog/866942/202501/866942-20250114102749903-490083184.png" alt="" loading="lazy"></p>
<h5 id="优势">优势</h5>
<ul>
<li>文档比较丰富</li>
<li>提供低代码集成方案，支持快速启动项目。</li>
<li>支持表单代填功能，方便老旧系统的接入。</li>
<li>提供 SaaS 和私有化部署模式，灵活性强。</li>
<li>行业案例多，技术成熟。</li>
</ul>
<h5 id="技术栈">技术栈</h5>
<p>后端：</p>
<ul>
<li>Node.js 14.19.3, Nest.js 6.7.2</li>
<li>Java8、Java11, Spring-Boot 2.5.15</li>
<li>Golang 1.21, Gin 1.9.1</li>
</ul>
<p>前端：React.js 16.13.1</p>
<h4 id="百度智能云-idaas">百度智能云 IDaaS</h4>
<p><a href="https://cloud.baidu.com/doc/IDaaS/index.html" target="_blank" rel="noopener nofollow">https://cloud.baidu.com/doc/IDaaS/index.html</a></p>
<p>百度智能云身份管理服务（Identity as a Service，简称 IDaaS），是百度智能云为解决企业客户复杂身份管理诉求，提供的统一身份、单点登录、数据同步、集中权限、应用管理等的服务。 IDaaS主要用于融合本地或云端部署的企业内部IT系统（如OA）、业务系统（如ERP、CRM等），或是当前越来越多的云端SaaS应用。</p>
<h5 id="优势-1">优势</h5>
<ul>
<li><strong>简单易用</strong>：支持业界标准的身份认证、单点登录等协议，打通身份系统只需简单的配置，无需额外研发。</li>
<li><strong>低成本</strong>：IDaaS本身为SaaS化的云端服务，无需进行单独部署、实施和运维，开箱即用，可有效降低企业的运维成本。</li>
<li><strong>开放性</strong>：IDaaS本着以API-first的设计理念，为客户提供了完整的OpenAPI，可有效赋能企业客户的身份系统构建及集成。</li>
</ul>
<h4 id="sso360">SSO360</h4>
<p><a href="https://www.sso360.cn/" target="_blank" rel="noopener nofollow">https://www.sso360.cn/</a></p>
<p>SSO360致力于为企业、机构、开发者提供基于云端的身份认证和治理、动态访问控制、以及权限管理的自动化、可视化、可追溯。以数字链接一切的理念，打通人与数字世界的壁垒，帮助构建一站式数字化安全入口，重新定义数字安全边界，赋能用户全场景下的身份治理与数字化服务。</p>
<p>作为国内一体化零信任安全的领导者，派拉软件拥有目前国内最完整的零信任产品体系，从以身份为中心的动态访问控制，逐步延伸到联动终端管理、SDP、微分段、动态授权、API网关、用户行为分析、数据访问安全等为一体的端到端零信任安全解决方案，助力企业应对更加复杂、多变的内外部安全威胁，为企业强化端到端的安全防护能力，已成功为金融、制造、医药、教育、零售、政府、地产、科研院所等各大行业的1400余家企业和机构提供了极致体验的“一体化零信任安全”专业服务。</p>
<h5 id="优势-2">优势</h5>
<ul>
<li>国内一体化零信任安全领域的领导者。拥有国内最完整的零信任产品体系。</li>
<li>提供以身份为中心的动态访问控制。</li>
<li>产品功能延伸至联动终端管理、SDP、微分段、动态授权、API 网关、用户行为分析、数据访问安全等。</li>
<li>帮助企业应对复杂、多变的内外部安全威胁。提供端到端零信任安全解决方案。加强企业端到端安全防护能力。</li>
<li>为金融、制造、医药、教育、零售、政府、地产、科研院所等行业的 1400 余家企业提供专业服务。</li>
<li>提供极致体验的“一体化零信任安全”解决方案。</li>
</ul>
<h4 id="美擎统一认证访问管理iam">美擎统一认证访问管理IAM</h4>
<p><a href="https://www.meicloud.com/miot/product-detail/461446284550144.html" target="_blank" rel="noopener nofollow">https://www.meicloud.com/miot/product-detail/461446284550144.html</a></p>
<p>统一认证访问管理IAM是美擎全新一代的身份安全认证产品，集单点登录、统一认证、双源认证、多因素认证、安全防暴力、智能风控为一体的身份访问控制平台。</p>
<h5 id="优势-3">优势</h5>
<ul>
<li>认证集成简单，支持CAS、OAuth2、SAML2、OIDC等标准协议，支持LTPA互信。同时对三方认证可快速集成企业微信、微信、钉钉、飞书等。</li>
<li>提供完整的统一认证接口，对非WEB的系统支持全能力认证。</li>
<li>高安全，在安全防暴力、只能风控、多因素认证的加持下，实现认证的高安全。</li>
<li>接入方便，支持AD、LDAP、API接口等多种方式实现双源认证。</li>
</ul>
<h5 id="应用场景">应用场景</h5>
<ul>
<li><strong>单点认证</strong>：集成下游各BS业务系统，实现权限的单点认证、单点登出，对移动APP、客户端产品实现统一认证。</li>
<li><strong>三方认证集成</strong>：对企业使用的企微、钉钉、飞书、微信进行一键集成，同时支持与其他SSO进行LTPA互信或标准的CAS、OAuth2、OIDC协议的一键集成。</li>
<li><strong>安全防护</strong>：通过账号、IP的安全防爆，多因素的认证实现认证的安全管控。</li>
</ul>
<h4 id="宁盾">宁盾</h4>
<p><a href="https://www.nington.com/solution-iim/" target="_blank" rel="noopener nofollow">https://www.nington.com/solution-iim/</a></p>
<p>通过宁盾统一身份中台方案，对用户源、设备、终端、网络进行账号整合，用户只需用一个账号密码，即可登录应用、设备、终端、网络。</p>
<h5 id="优势-4">优势</h5>
<ul>
<li>集成老旧系统和终端设备能力较强。</li>
<li>提供企业级技术支持，适合传统行业的应用场景。</li>
<li>支持私有化部署，符合国内企业对数据合规性的需求。</li>
</ul>
<h4 id="okta">Okta</h4>
<p><a href="https://www.okta.com/" target="_blank" rel="noopener nofollow">https://www.okta.com/</a></p>
<p>Okta 是国际上广泛使用的身份认证和访问管理平台之一，为企业提供全面的 SSO 解决方案。它支持现代 Web 应用、移动端应用和跨平台集成。</p>
<h5 id="优势-5">优势</h5>
<ul>
<li>提供丰富的 API 和开发者工具，适合复杂场景的集成需求。</li>
<li>强大的多因素认证（MFA）支持，包括 Google Authenticator、YubiKey 等。</li>
<li>云服务为主，同时支持私有化部署（需额外费用）。</li>
<li>提供 SLA 支持，适合对服务质量要求高的场景。</li>
</ul>
<h4 id="auth0">Auth0</h4>
<p><a href="https://auth0.com/" target="_blank" rel="noopener nofollow">https://auth0.com/</a></p>
<p>Auth0 是一个专注于开发者体验的身份认证和授权平台。作为 Okta 的子品牌，它继承了丰富的功能和灵活性，支持多种认证协议和集成场景。</p>
<h5 id="优势-6">优势</h5>
<ul>
<li>规则引擎支持高自由度的身份验证逻辑定制。</li>
<li>提供强大的开发者工具和扩展能力。</li>
<li>适合现代 Web 应用和移动端场景。</li>
<li>提供多种多因素认证（MFA）选项，增强安全性。</li>
</ul>
<h4 id="entrust-idaas">Entrust IDaaS</h4>
<p><a href="https://www.entrust.cn/products/iam/identity-as-a-service" target="_blank" rel="noopener nofollow">https://www.entrust.cn/products/iam/identity-as-a-service</a></p>
<p>Entrust 是一家领先的数字安全公司，致力于提供全面的身份验证、数据加密和网络安全解决方案。其产品帮助企业和组织在日益复杂的网络环境中确保数字化操作的安全性，保护关键数据和用户身份信息。</p>
<p>Entrust 的 IDaaS (Identity as a Service) 是一种基于云的身份验证和访问管理解决方案。它旨在通过提供简化的身份管理功能，帮助组织提高安全性并改善用户体验。作为一个全面的解决方案，它为员工、消费者和公民提供了可信身份，使他们能够安全地与您的组织互动。 借助智能用户身份验证、授权和访问控制功能，身份即服务解决方案使您能够实现零信任、促进合规并保护敏感数据。</p>
<h5 id="优势-7">优势</h5>
<ul>
<li><strong>企业级安全：</strong>借助多因素认证和动态风险评估，降低身份验证过程中的潜在威胁。</li>
<li><strong>易用性：</strong>提供简单的用户界面和管理工具，降低 IT 管理员的工作负担。</li>
<li><strong>全球支持：</strong>Entrust 在身份管理领域具有多年经验，能够为不同地区和行业提供可靠的解决方案。</li>
</ul>
<h3 id="开源方案">开源方案</h3>
<h4 id="keycloak">Keycloak</h4>
<p>Keycloak 是一款功能强大的开源身份和访问管理解决方案，由 Red Hat 社区维护。它支持用户身份验证、用户管理、单点登录、细粒度权限控制等功能。</p>
<ul>
<li><strong>支持协议：</strong>OpenID Connect, OAuth 2.0, SAML 2.0</li>
<li><strong>功能特点</strong>：
<ul>
<li>提供用户联盟（User Federation）功能，可与现有的 LDAP 或 Active Directory 集成。</li>
<li>支持多因素认证（MFA）。</li>
<li>丰富的扩展能力，通过自定义 SPI（Service Provider Interface）扩展功能。</li>
</ul>
</li>
<li><strong>优势</strong>：
<ul>
<li>老牌开源项目，成熟稳定。</li>
<li>社区活跃，文档齐全。</li>
<li>提供基于 Docker 的快速部署选项。</li>
<li>支持多种语言的 SDK。</li>
</ul>
</li>
<li><strong>适用场景</strong>：企业级应用、需要高度定制化的场景。</li>
<li><strong>官网</strong>：<a href="https://www.keycloak.org" target="_blank" rel="noopener nofollow">https://www.keycloak.org</a></li>
<li>项目主页：<a href="https://github.com/keycloak/keycloak" target="_blank" rel="noopener nofollow">https://github.com/keycloak/keycloak</a></li>
<li>主要技术栈：Java</li>
<li>GitHub Star：24k</li>
</ul>
<h4 id="authelia">Authelia</h4>
<p>Authelia 是一款开源的身份验证和访问管理服务器，专为现代 Web 应用设计，支持双因素认证和访问策略管理。</p>
<ul>
<li><strong>支持协议：</strong>OpenID Connect, OAuth 2.0</li>
<li><strong>功能特点</strong>：
<ul>
<li>支持双因素认证（2FA）。</li>
<li>提供易于部署的 Docker 镜像。</li>
<li>灵活的策略管理，基于用户组、设备、地理位置等条件设置访问控制。</li>
<li>作为反向代理网关（如 NGINX、Traefik）的扩展使用，不直接连接到应用程序后端</li>
</ul>
</li>
<li><strong>优势</strong>：
<ul>
<li>轻量化，性能优秀、占用资源非常低。</li>
<li>社区活跃，文档丰富。</li>
<li>安全性强，与反向代理协作，防止来自网络边缘的攻击，从而保护应用程序的访问。</li>
</ul>
</li>
<li><strong>适用场景</strong>：小型团队，简单的身份管理需求。</li>
<li><strong>官网</strong>：<a href="https://www.authelia.com" target="_blank" rel="noopener nofollow">https://www.authelia.com</a></li>
<li>项目主页：<a href="https://github.com/authelia/authelia" target="_blank" rel="noopener nofollow">https://github.com/authelia/authelia</a></li>
<li>主要技术栈：Go</li>
<li>GitHub Star：22k</li>
</ul>
<h4 id="logto">Logto</h4>
<p>Logto 是一个现代化的开源身份认证和单点登录（SSO）平台，专注于为现代 Web 应用和移动端应用提供简单而强大的身份管理能力。</p>
<ul>
<li><strong>支持协议</strong>：OIDC、OAuth 2.0、SAML 2.0。</li>
<li><strong>功能特点</strong>：
<ul>
<li>支持多租户环境下的身份管理。</li>
<li>提供用户管理、权限管理和访问日志。</li>
<li>提供开发者友好的 API 和 SDK，易于集成到现有应用中。</li>
<li>支持SaaS云服务和私有化部署。</li>
</ul>
</li>
<li><strong>优势</strong>：
<ul>
<li>文档完善，开发者体验良好。</li>
<li>提供轻量级的 Docker 部署方式。</li>
<li>提供多种开箱即用的 connectors，包括微信、支付宝、腾讯/阿里云等短信服务集成。</li>
</ul>
</li>
<li><strong>适用场景</strong>：企业级应用、需要快速集成身份认证的项目。</li>
<li>官网：<a href="https://logto.io/" target="_blank" rel="noopener nofollow">https://logto.io/</a></li>
<li>项目主页：<a href="https://github.com/logto-io/logto" target="_blank" rel="noopener nofollow">https://github.com/logto-io/logto</a></li>
<li>主要技术栈：Node.Js</li>
<li>GitHub Star：9.2k</li>
</ul>
<h4 id="maxkey">MaxKey</h4>
<p>MaxKey 是由 Dromara 社区开发的开源单点登录认证系统，被誉为 IAM-IDaaS 领域的领先产品。其名称谐音为 "马克思的钥匙"，寓意为能够解锁复杂的企业安全需求。</p>
<ul>
<li><strong>支持协议</strong>：OAuth 2.x、OpenID Connect、SAML 2.0、JWT、CAS、SCIM。</li>
<li><strong>开源协议：</strong>Apache-2.0 license</li>
<li><strong>功能特点</strong>：
<ul>
<li>支持多租户环境下的身份管理。</li>
<li>提供标准化的用户身份管理（IDM）、身份认证（AM）、单点登录（SSO）、RBAC 权限管理和资源管理。</li>
<li>强调企业级场景下的性能、安全性和易用性，广泛应用于医疗、金融、政府和制造等行业。</li>
</ul>
</li>
<li><strong>优势</strong>：
<ul>
<li>国产开源项目，合规，自主可控。</li>
<li>具有中文社区并提供中文文档。</li>
<li>提供了方便的国产应用集成，如微信、支付宝、QQ等社交帐号、以及腾讯/阿里云等短信服务。</li>
</ul>
</li>
<li><strong>适用场景</strong>：企业级用户，尤其是有高性能和高安全性需求的行业。</li>
<li><strong>官网</strong>：<a href="https://www.maxkey.top/" target="_blank" rel="noopener nofollow">https://www.maxkey.top/</a></li>
<li>项目主页：<a href="https://github.com/dromara/MaxKey" target="_blank" rel="noopener nofollow">https://github.com/dromara/MaxKey</a></li>
<li>主要技术栈：Java</li>
<li>GitHub Star：1.5k</li>
<li>Gitee Star：7.8k</li>
</ul>
<h4 id="gluu-server">Gluu Server</h4>
<p>Gluu Server 是一个功能全面的开源身份管理平台，专为支持大规模部署而设计，适用于复杂的企业需求。</p>
<ul>
<li><strong>功能特点</strong>：
<ul>
<li>强大的用户管理和身份联合功能。</li>
<li>支持细粒度的权限管理和 API 安全。</li>
<li>提供高度可扩展的架构，适合大规模用户场景。</li>
</ul>
</li>
<li><strong>优势</strong>：
<ul>
<li>社区支持广泛，商业支持可选。</li>
<li>支持私有化部署。</li>
</ul>
</li>
<li><strong>适用场景</strong>：需要大规模用户管理和复杂身份联合的企业。</li>
<li><strong>官网</strong>：<a href="https://www.gluu.org/" target="_blank" rel="noopener nofollow">https://www.gluu.org/</a></li>
<li>项目主页：<a href="https://github.com/JanssenProject/jans" target="_blank" rel="noopener nofollow">https://github.com/JanssenProject/jans</a></li>
<li>主要技术栈：Java</li>
<li>Github Star：505</li>
</ul>
<h4 id="wso2-identity-server">WSO2 Identity Server</h4>
<p>WSO2 Identity Server 是一款开源的身份和访问管理解决方案，支持多种协议和复杂的企业场景。</p>
<ul>
<li><strong>功能特点</strong>：
<ul>
<li>支持用户自注册、密码恢复和账户管理。</li>
<li>提供细粒度的权限控制和单点登录。</li>
<li>与其他 WSO2 产品集成良好，支持微服务架构。</li>
</ul>
</li>
<li><strong>优势</strong>：
<ul>
<li>企业级功能强大。</li>
<li>社区活跃，提供商业支持选项。</li>
</ul>
</li>
<li><strong>适用场景</strong>：企业级应用和分布式系统。</li>
<li><strong>官网</strong>：<a href="https://wso2.com/identity-server/" target="_blank" rel="noopener nofollow">https://wso2.com/identity-server/</a></li>
<li>项目主页：<a href="https://github.com/wso2/product-is" target="_blank" rel="noopener nofollow">https://github.com/wso2/product-is</a></li>
<li>主要技术栈：Java</li>
<li>Github Star：753</li>
</ul>
<h2 id="自定义开发实现-sso">自定义开发实现 SSO</h2>
<p>在某些场景下，现有的商业或开源方案可能无法完全满足项目需求，选择自定义开发 SSO 系统可以提供最大的灵活性和控制能力。</p>
<p>下图是我 2023 年开发的单点认证项目，具体可以看之前这篇文章: <a href="https://www.cnblogs.com/deali/p/18209560" target="_blank">聊聊一个差点被放弃的项目以及近期的开源计划</a></p>
<p><img src="https://img2024.cnblogs.com/blog/866942/202501/866942-20250114102812763-715186530.png" alt="" loading="lazy"></p>
<h3 id="适用场景-7">适用场景</h3>
<ul>
<li><strong>协议标准化</strong>：需要使用标准化协议（如 SAML、OAuth 2.0、OpenID Connect）进行认证和授权。</li>
<li><strong>灵活性</strong>：需要针对具体业务需求定制身份验证和权限管理流程。</li>
<li><strong>定制需求</strong>：项目需求复杂且现有方案无法完全覆盖。</li>
<li><strong>控制和安全</strong>：需要完全控制系统的每个方面，包括安全策略和性能优化。</li>
</ul>
<h3 id="核心技术与实现">核心技术与实现</h3>
<h4 id="使用-samlsecurity-assertion-markup-language">使用 SAML（Security Assertion Markup Language）</h4>
<p>SAML 是一种基于 XML 的开放标准，用于在身份提供者（IdP）和服务提供者（SP）之间交换认证和授权数据。</p>
<ul>
<li><strong>特点</strong>：
<ul>
<li>支持跨域单点登录。</li>
<li>提供身份联盟和细粒度权限控制。</li>
<li>常用于企业级应用和内部系统集成。</li>
</ul>
</li>
<li><strong>实现建议</strong>：
<ul>
<li>利用现有的 SAML 库（如 pySAML2 或 OneLogin SAML）简化开发。</li>
<li>配置 IdP 和 SP 的信任关系，确保数据安全。</li>
</ul>
</li>
</ul>
<h4 id="使用-oauth-20-和-openid-connect">使用 OAuth 2.0 和 OpenID Connect</h4>
<p>OAuth 2.0 是一种授权框架，OpenID Connect 是基于 OAuth 2.0 的认证协议。</p>
<ul>
<li><strong>特点</strong>：
<ul>
<li>OAuth 2.0 提供授权机制，允许第三方访问资源而无需暴露用户密码。</li>
<li>OpenID Connect 增加了用户认证功能，适合现代 Web 和移动应用。</li>
</ul>
</li>
<li><strong>实现建议</strong>：
<ul>
<li>设计认证服务器，实现 Authorization Code、Implicit 等模式。</li>
<li>使用 JWT（JSON Web Token）作为认证和授权数据的载体。</li>
<li>利用开源库（如 Authlib、Openiddict等）加速开发。</li>
</ul>
</li>
</ul>
<h4 id="基于-jwt-的自定义-sso">基于 JWT 的自定义 SSO</h4>
<p>JWT 是一种轻量级的数据交换格式，常用于实现用户认证授权。</p>
<ul>
<li><strong>特点</strong>：
<ul>
<li>数据以 JSON 格式存储，支持跨语言和平台。</li>
<li>签名机制保证数据完整性和可信性。</li>
</ul>
</li>
<li><strong>实现建议</strong>：
<ul>
<li>在用户登录时生成 JWT，包含用户信息、权限和过期时间。</li>
<li>在应用间传递 JWT，验证签名和过期时间以确认用户身份。</li>
<li>使用安全的签名算法（如 HMAC SHA256 或 RS256）确保安全性。</li>
</ul>
</li>
</ul>
<h3 id="安全性考虑">安全性考虑</h3>
<ul>
<li><strong>多因素认证（MFA）</strong>：为登录流程增加额外的认证步骤，如短信验证码、动态密码或生物识别。</li>
<li><strong>防御攻击</strong>：
<ul>
<li>使用 HTTPS 加密数据传输。</li>
<li>防止重放攻击，通过加入时间戳和唯一标识符。</li>
<li>监控和记录用户活动，及时发现异常行为。</li>
</ul>
</li>
<li><strong>日志与审计</strong>：
<ul>
<li>实现全面的系统日志记录，便于故障排查和安全审计。</li>
</ul>
</li>
</ul>
<h3 id="优劣势分析">优劣势分析</h3>
<ul>
<li><strong>优点</strong>：
<ul>
<li>灵活性强，完全满足个性化需求。</li>
<li>可根据具体场景优化性能和用户体验。</li>
<li>安全性和隐私保护可完全受控。</li>
</ul>
</li>
<li><strong>缺点</strong>：
<ul>
<li>开发和维护成本高。</li>
<li>需要较强的技术团队支持。</li>
<li>存在一定的开发风险。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="参考资料">参考资料</h2>
<ul>
<li>单点登录（SSO）系统自建方案总结 - <a href="https://flyeric.top/archives/build-sso-system-summary" target="_blank" rel="noopener nofollow">https://flyeric.top/archives/build-sso-system-summary</a></li>
<li>关于SSO的讨论 - <a href="https://v2ex.com/t/831596#r_11330208" target="_blank" rel="noopener nofollow">https://v2ex.com/t/831596#r_11330208</a></li>
<li>看完这篇你不能再说不懂SSO原理了 - <a href="https://www.cnblogs.com/qdhxhz/p/17007958.html" target="_blank">https://www.cnblogs.com/qdhxhz/p/17007958.html</a></li>
<li><a href="https://blog.itning.top/post/2019/04/08/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95sso%E5%92%8C%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1cas%E5%92%8C%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83oauth%E7%9A%84%E7%AE%80%E8%A6%81%E8%A7%A3%E9%87%8A/" target="_blank" rel="noopener nofollow">https://blog.itning.top/post/2019/04/08/单点登录sso和集中式认证服务cas和开放授权oauth的简要解释/</a></li>
</ul>

</div>
<div id="MySignature" role="contentinfo">
    微信公众号：「程序设计实验室」
专注于互联网热门新技术探索与团队敏捷开发实践，包括架构设计、机器学习与数据分析算法、移动端开发、Linux、Web前后端开发等，欢迎一起探讨技术，分享学习实践经验。
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.24340278821643518" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-14 10:29">2025-01-14 10:28</span>&nbsp;
<a href="https://www.cnblogs.com/deali">程序设计实验室</a>&nbsp;
阅读(<span id="post_view_count">135</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18670273" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18670273);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18670273', targetLink: 'https://www.cnblogs.com/deali/p/18670273', title: '单点认证（SSO）方案调研总结' })">举报</a>
</div>
        