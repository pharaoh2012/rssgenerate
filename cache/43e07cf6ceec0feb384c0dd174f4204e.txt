
	<div class="postTitle">
		<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/return-log/p/18697714" title="发布于 2025-02-03 20:49">
    <span role="heading" aria-level="2">Matplotlab显示OpenCV读取到的图像</span>
    

</a>

	</div>
	
	<div class="postText">
		<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="matplotlab显示opencv读取到的图像">Matplotlab显示OpenCV读取到的图像</h1>
<h2 id="一-确认图像的数组类型">一. 确认图像的数组类型</h2>
<p>在使用 OpenCV 的 <code>cv2.imread()</code> 函数读取图像时，第二个参数（标志）决定了图像的读取方式。具体来说，<code>0</code>、<code>1</code> 和 <code>-1</code> 分别对应不同的读取模式：</p>
<table>
<thead>
<tr>
<th style="text-align: center">读取模式</th>
<th style="text-align: center">标志</th>
<th style="text-align: center">值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center">灰度</td>
<td style="text-align: center"><strong><code>cv2.IMREAD_GRAYSCALE</code></strong></td>
<td style="text-align: center">0</td>
</tr>
<tr>
<td style="text-align: center">彩色（忽略透明度通道）</td>
<td style="text-align: center"><strong><code>cv2.IMREAD_COLOR</code></strong></td>
<td style="text-align: center">1</td>
</tr>
<tr>
<td style="text-align: center">彩色（包括 Alpha 透明度通道，如果存在）</td>
<td style="text-align: center"><strong><code>cv2.IMREAD_UNCHANGED</code></strong></td>
<td style="text-align: center">-1</td>
</tr>
</tbody>
</table>
<p>这里不讨论处理包含透明度通道的图像</p>
<p>使用 <code>img.shape</code> 判断图像类型</p>
<p>在 OpenCV 中，当你使用 <code>cv2.imread()</code> 函数读取一张图像时，它会将图像加载到内存中，并将其存储为一个 NumPy 数组。<code>img.shape</code> 是 NumPy 数组的一个属性，它返回一个包含数组各维度大小的元组。通过检查这个元组的长度（即维度的数量），我们可以确定数组的类型或结构。</p>
<ul>
<li><strong>灰度图像</strong>：通常是一个二维数组，表示为 <code>(height, width)</code>， <code>img.shape</code> 返回的元组长度为 2。</li>
<li><strong>彩色图像</strong>：通常是一个三维数组，表示为 <code>(height, width, channels)</code>， <code>channels</code> 表示颜色通道的数量（例如 RGB 图像有三个通道，形状通常是 <code>(height, width, 3)</code>）， <code>img.shape</code> 返回的元组长度为 3。</li>
</ul>
<pre><code class="language-python"># img 是一个 NumPy 数组
if len(img.shape) == 2:
    print("这是一个灰度图像")
elif len(img.shape) == 3:
    print("这是一个彩色图像")
</code></pre>
<h2 id="二-使用matplotlab显示">二. 使用Matplotlab显示</h2>
<h3 id="灰度图像">灰度图像</h3>
<pre><code class="language-python">plt.imshow(img, cmap='gray')
</code></pre>
<p>理解<code>cmap='gray'</code></p>
<p>直接<code>imshow</code> 会使用默认的颜色映射（通常是 <code>viridis</code>），这通常不是期望的灰度效果。需要明确指定颜色映射 (cmap) 为 'gray'，这样可以确保图像中的每个像素值都被正确地映射到灰度级别。</p>
<h3 id="彩色图像">彩色图像</h3>
<p>OpenCV读取到的色彩通道顺序为<code>BGR</code>, Matplotlab读取显示的色彩通道为<code>RGB</code>，所以需要读取时转换通道</p>
<pre><code class="language-python">plt.imshow(img[:, :, ::-1])
</code></pre>
<p>理解 <code>img[:, :, ::-1]</code></p>
<p>第一维和第二维分别代表图像的高度和宽度，第三维有三个通道：红（R）、绿（G）、蓝（B）</p>
<ul>
<li><code>:</code> 表示选取所有元素。</li>
<li><code>::-1</code> 是Python中的切片语法，表示从尾到头（逆序）选择元素。这里的意图通常是翻转最后一个维度的数据，比如将RGB格式转换为BGR格式，或者相反。</li>
</ul>
<hr>
<p>Copyright © 2025 Log All rights reserved.</p>

</div>
<div class="clear"></div>

	</div>
	
	<div class="postfoot">
		posted on 
<span id="post-date" data-last-update-days="0.7291760717233796" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-03 20:50">2025-02-03 20:49</span>&nbsp;
<a href="https://www.cnblogs.com/return-log">Return-Log</a>&nbsp;
阅读(<span id="post_view_count">25</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18697714" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18697714);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18697714', targetLink: 'https://www.cnblogs.com/return-log/p/18697714', title: 'Matplotlab显示OpenCV读取到的图像' })">举报</a>

	</div>
