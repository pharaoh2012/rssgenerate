
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/deali/p/19058276/cuprinter-develop-fake-device-use-csharp-simulate" title="发布于 2025-08-26 10:11">
    <span role="heading" aria-level="2">上位机开发之假装有设备，使用 C# 模拟串口设备</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>据说不会上位机和游戏开发，都不好意思说自己会 C#</p>
<p>正好这俩我都不太会😂</p>
<p>这不来点一下上位机的技能树</p>
<p>这次的需求很简单，用 C# 模拟一个设备协议，实现不用去现场对接设备，也能先开发和调试上位机程序。</p>
<p>实际设备是用 RS-485 标准进行通信，模拟跑通之后，到现场只需要把RS-485 总线（A/B 差分线）插到 USB-RS485 转换器上就可以实现数据读取和指令下发了。</p>
<blockquote>
<p>PS: 最近把我的博客小重构了一下，欢迎访问体验一下: <a href="http://blog.deali.cn/" target="_blank" rel="noopener nofollow">http://blog.deali.cn/</a></p>
</blockquote>
<h2 id="先放一些截图作为预告">先放一些截图作为预告</h2>
<p>本文要介绍只是最基础的前期工作</p>
<p>实际上这个项目要实现的是一个简单的物联网平台，不只是对接几台设备</p>
<p>系统的初版已经完成了，这里我先放几张截图</p>
<p><img src="https://img2024.cnblogs.com/blog/866942/202508/866942-20250826101840500-422112702.png" alt="" loading="lazy"></p>
<p>实时图表</p>
<p><img src="https://img2024.cnblogs.com/blog/866942/202508/866942-20250826101847642-405830855.png" alt="" loading="lazy"></p>
<p>设备控制</p>
<p><img src="https://img2024.cnblogs.com/blog/866942/202508/866942-20250826101854742-1820558714.png" alt="" loading="lazy"></p>
<p>就这几个吧，其他的还不是很完善</p>
<h2 id="前提">前提</h2>
<p>OK 说回正题，模拟串口设备需要的前提是这些</p>
<ul>
<li>
<p>首先已经拿到了详细的设备协议文档</p>
<p>这个很关键，谁也没法摸黑去开发呀</p>
</li>
<li>
<p>操作系统: Windows/Linux</p>
<p>很神奇吧，Linux居然也能开发上位机？事实上 Linux 模拟设备更方便</p>
<p>不过为了方便开发调试，我这里还是以 Windows 系统为例</p>
</li>
</ul>
<h2 id="串口驱动">串口驱动</h2>
<p>Windows 上模拟串口驱动: com0com</p>
<p>这个工具可以在系统里创建一对连通的 com 串口，比如 com3 &lt;-&gt; com4</p>
<p>在任何一端发信息，另一端都可以读取</p>
<p>我们就是用这个方式来模拟串口设备</p>
<p>PS: com0com 的图形界面需要安装 net framework 3.5 老古董才能用，我直接用命令行</p>
<blockquote>
<p>Linux的话可以使用 tty0tty</p>
<p><a href="https://github.com/freemed/tty0tty" target="_blank" rel="noopener nofollow">https://github.com/freemed/tty0tty</a></p>
</blockquote>
<h2 id="串口调试工具">串口调试工具</h2>
<p>串口调试工具开源的有很多</p>
<p>我这次试用了 llcom 和 Wu.CommTool</p>
<p>推荐 llcom，使用比较直观</p>
<p>项目地址: <a href="https://github.com/chenxuuu/llcom" target="_blank" rel="noopener nofollow">https://github.com/chenxuuu/llcom</a></p>
<p>可以直接在命令行安装</p>
<pre><code class="language-bash">winget install llcom
</code></pre>
<p>界面长这样</p>
<p><img src="https://img2024.cnblogs.com/blog/866942/202508/866942-20250826101906223-1753292237.png" alt="" loading="lazy"></p>
<h2 id="com0com常用命令">com0com常用命令</h2>
<p>前面说了 com0com 的图形界面需要安装 net framework 3.5</p>
<p>我肯定是不想安装这种老古董来污染我的电脑环境的</p>
<p>好在还有命令行可以用</p>
<p>这里列一些常用命令</p>
<h3 id="查看当前有哪些虚拟串口">查看当前有哪些虚拟串口</h3>
<pre><code class="language-bash">list
</code></pre>
<p>输出会显示每一对虚拟串口，例如：</p>
<pre><code>CNCA0 PortName=COM5
CNCB0 PortName=COM6
</code></pre>
<p>这说明有一对虚拟串口：<code>COM5 &lt;-&gt; COM6</code>。</p>
<h3 id="创建一对新的虚拟串口">创建一对新的虚拟串口</h3>
<pre><code class="language-bash">install PortName=COM5 PortName=COM6
</code></pre>
<p>这会创建一对虚拟串口，分别命名为 <code>COM5</code> 和 <code>COM6</code>，它们互相连通。</p>
<p>👉 以后就可以让：</p>
<ul>
<li>模拟器程序 监听 <code>COM5</code></li>
<li>上位机/主程序 打开 <code>COM6</code></li>
</ul>
<p>这样它们互相通信，等同于 RS-485 设备在现场。</p>
<h3 id="删除一对虚拟串口">删除一对虚拟串口</h3>
<pre><code class="language-bash">remove 0
</code></pre>
<p>删除标识符为 <code>CNCA0</code> 和 <code>CNCB0</code> 的那一对（0 是编号，可以从 <code>list</code> 查到）。</p>
<h3 id="修改已有端口的参数">修改已有端口的参数</h3>
<p>比如要修改 <code>CNCA0</code> 的端口号：</p>
<pre><code class="language-bash">change CNCA0 PortName=COM7
</code></pre>
<h3 id="清理所有虚拟串口">清理所有虚拟串口</h3>
<pre><code class="language-bash">uninstall
</code></pre>
<p>⚠️ 注意，这会把所有 com0com 的虚拟端口全删掉。</p>
<h2 id="开发流程">开发流程</h2>
<ol>
<li>
<p>创建一对虚拟串口：</p>
<pre><code class="language-bash">install PortName=COM3 PortName=COM4
</code></pre>
</li>
<li>
<p>编写 <strong>模拟器程序</strong>（C#），监听 <code>COM3</code>。</p>
</li>
<li>
<p>上位机程序/串口调试助手连 <code>COM4</code>，输入指令，收到模拟器的返回</p>
</li>
</ol>
<p>PS: 创建串口后在设备管理器可以看到</p>
<h2 id="串口通信程序">串口通信程序</h2>
<p>用 C# 自带了 <code>System.IO.Ports</code> 工具，可以很方便实现串口通信，难怪那么多人用 C# 开发上位机</p>
<p>不过在 .NET Core 时代，这个库需要通过 nuget 安装</p>
<pre><code class="language-bash">dotnet package add System.IO.Ports
</code></pre>
<p>这里我写了一个简单的串口模拟程序</p>
<pre><code class="language-c#">using System.IO.Ports;
using System.Text;

Console.WriteLine("=== 协议模拟器 ===");

// 打开虚拟串口 (比如 COM5)
const string portName = "COM5";
var port = new SerialPort(portName, 9600, Parity.None, 8, StopBits.One);
port.Encoding = Encoding.ASCII;
port.Open();

Console.WriteLine($"模拟设备已启动，监听 {portName}...");

port.DataReceived += (s, e) =&gt; {
    try {
        var cmd = port.ReadExisting();
        Console.WriteLine($"收到: {cmd}");

        string response;

        // 协议模拟逻辑 (这里举例)
        if (cmd.Contains("temp", StringComparison.OrdinalIgnoreCase)) {
            // 模拟返回温度
            response = "01,temp=25.6\n";
        }
        else if (cmd.Contains("hum", StringComparison.OrdinalIgnoreCase)) {
            // 模拟返回湿度
            response = "01,hum=60%\n";
        }
        else {
            // 默认回应
            response = "01,ack\n";
        }
    }
    catch (TimeoutException) {
        // 超时继续监听
    }
    catch (Exception ex) {
        Console.WriteLine($"错误: {ex.Message}");
    }
};
</code></pre>
<h2 id="实现效果">实现效果</h2>
<p>使用串口调试工具发送指令，C# 写的模拟程序这边收到后就返回响应了</p>
<p><img src="https://img2024.cnblogs.com/blog/866942/202508/866942-20250826101920183-1948291216.png" alt="" loading="lazy"></p>
<h2 id="小结">小结</h2>
<p>IT寒冬什么的已经被说了好多次了</p>
<p>显而易见的，互联网的发展空间基本到头了，这俩年火热的AI也只是缩减了一批低端岗位而已，并不能把蛋糕做大</p>
<p>但换个角度看，正因为互联网不再是蓝海，才让我们重新注意到那些“传统”却始终不可或缺的领域。上位机开发就是这样一个方向。它不像移动互联网那样卷，但在工业控制、科研实验、自动化测试等场景里却有着稳定而长期的需求。无论是实验室里的一台设备，还是生产线上成百上千台 PLC，最终都需要一个可靠、可视化的上位机来管理和监控。</p>
<p>对入门者来说，C# 提供了友好的语法和强大的生态，足够快速地做出第一个能跑的 Demo —— 一个串口助手、一个数据采集可视化界面，甚至是一个小型的测试管理系统。随着学习深入，还可以接触到 Modbus、CAN 总线、OPC 等更复杂的协议，逐渐走向真正的工业应用。</p>
<p>未来的趋势不会停在“传统上位机”上。跨平台框架（.NET MAUI、Avalonia）、前后端融合（C# + Web 技术），甚至 AI 辅助的数据分析，都可能成为上位机开发的新方向。换句话说，这条路并不狭窄，它只是需要你把眼光从“卷互联网”转向“深耕行业”。</p>
<p>所以，如果你正处在迷茫期，不妨先从一个简单的上位机小项目开始做起。哪怕是一个串口监控工具，都可能成为你进入这个领域的第一块敲门砖。</p>

</div>
<div id="MySignature" role="contentinfo">
    微信公众号：「程序设计实验室」
专注于互联网热门新技术探索与团队敏捷开发实践，包括架构设计、机器学习与数据分析算法、移动端开发、Linux、Web前后端开发等，欢迎一起探讨技术，分享学习实践经验。
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.005555555555555556" data-date-updated="2025-08-26 10:19">2025-08-26 10:11</span>&nbsp;
<a href="https://www.cnblogs.com/deali">程序设计实验室</a>&nbsp;
阅读(<span id="post_view_count">479</span>)&nbsp;
评论(<span id="post_comment_count">7</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19058276);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19058276', targetLink: 'https://www.cnblogs.com/deali/p/19058276/cuprinter-develop-fake-device-use-csharp-simulate', title: '上位机开发之假装有设备，使用 C# 模拟串口设备' })">举报</a>
</div>
        