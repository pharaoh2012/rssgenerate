
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/huangSir-devops/p/18811123" title="发布于 2025-04-06 14:51">
    <span role="heading" aria-level="2">nginx中的路径匹配规则详解（location规则）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="nginx的路径匹配规则">Nginx的路径匹配规则</h2>
<p>Nginx的匹配规则用<code>location</code>指令来实现，Nginx 的<code>location</code>指令用于匹配请求的 URI（请求路径），并根据匹配结果执行特定的处理指令。<code>location</code>是实现动静分离、URL 重写、反向代理等功能的核心模块之一.</p>
<h2 id="location匹配规则分类">location匹配规则分类</h2>
<p><code>location</code>支持多种匹配模式，包括精确匹配、前缀匹配、正则匹配等</p>
<h3 id="精确匹配">精确匹配（<code>=</code>）</h3>
<p><strong>优先级最高</strong>。当请求的URI与<code>location</code>后面的字符串完全相同时，Nginx会选择这个<code>location</code>块进行处理。(这个好理解，就是路径完全匹配，一模一样，优先级最高)<br>
示例</p>
<pre><code>location = /favicon.ico {
    # 处理/favicon.ico的请求
}
</code></pre>
<p>只有当请求URI严格为/favicon.ico时，上述location块才会被使用。</p>
<h3 id="最长前缀匹配">最长前缀匹配（<code>^~</code>）</h3>
<p><strong>第二优先级</strong>。请求的URI以某个<code>location</code>后面的字符串开头，并且这个字符串是最长的（或者使用了<code>^~</code>修饰符），Nginx会选择这个<code>location</code>块。但请注意，<code>^~</code>修饰符实际上会停止后续的正则匹配搜索。<br>
示例</p>
<pre><code>   location ^~ /hello {
     return  601;
   }

    location ^~ /hellow {
     return  602;
   }

   location ^~ /hello/world {
     return  603;
   }

    location ~ /hello {
     return  604;
   }
</code></pre>
<p>对于请求<code>/hello</code>，满足 601和 604，实际返回601，就是因为^~优先级高于正则匹配；<br>
对于请求<code>/hellow</code>，满足 601和 602，实际返回602，因为最长前缀匹配原则；</p>
<h3 id="正则表达式匹配和">正则表达式匹配（<code>~</code>和<code>~*</code>）</h3>
<p><strong>第三优先级</strong>。正则表达式匹配允许定义更复杂的URI匹配模式。<code>~</code>表示区分大小写的正则匹配，而<code>~*</code>表示不区分大小写的正则匹配。<br>
Nginx会按照配置文件中的顺序逐个检查正则表达式<code>location</code>块，直到找到第一个匹配的块。因此，正则表达式的顺序很重要。</p>
<p>示例：</p>
<pre><code>location ~ \.(gif|jpg|png)$ {
    # 处理以.gif、.jpg或.png结尾的请求（区分大小写）
}
location ~* \.(GIF|JPG|PNG)$ {
    # 处理以.GIF、.JPG或.PNG结尾的请求（不区分大小写）
}
</code></pre>
<p>对于请求<code>/images/photo.jpg</code>，第一个<code>location</code>块将被匹配（如果请求是区分大小写的）。</p>
<h3 id="普通前缀匹配无修饰符">普通前缀匹配（无修饰符）</h3>
<p><strong>第四优先级</strong>。普通前缀匹配也按照配置文件中出现的先后顺序进行匹配，先出现的<code>location</code>指令优先匹配。<br>
示例：</p>
<pre><code>   location /hello {
     return  601;
   }

   location /hellow {
     return  602;
   }
</code></pre>
<p>对于请求/hellow，满足 601和 602，实际返回602，证明满足长前缀匹配原则</p>
<h3 id="默认匹配">默认匹配（<code>/</code>）</h3>
<p><strong>优先级最低</strong>。如果请求的URI与任何特定的<code>location</code>块都不匹配，Nginx将使用默认的<code>location</code>块（如果有的话）。通常，默认的location块是一个不带任何修饰符的<code>location /</code>块。<br>
示例：</p>
<pre><code>location / {
    # 处理所有其他请求
}
</code></pre>
<h2 id="总结">总结</h2>
<p>Nginx的location匹配规则优先级可以总结为：</p>
<ul>
<li>
<p>精确匹配（<code>=</code>）</p>
</li>
<li>
<p>最长前缀匹配（<code>^~</code>），但会停止后续的正则匹配搜索</p>
</li>
<li>
<p>正则表达式匹配（<code>~</code>和<code>~*</code>），按配置顺序</p>
</li>
<li>
<p>普通前缀匹配（无修饰符），也按配置顺序</p>
</li>
<li>
<p>默认匹配（<code>/</code>）</p>
</li>
</ul>
<h2 id="注意事项">注意事项</h2>
<ul>
<li>
<p>正则匹配与顺序：正则 location 的匹配顺序很重要，因为 Nginx 会按照配置文件中定义的顺序进行匹配。</p>
</li>
<li>
<p>proxy_pass 的路径替换：在配置 proxy_pass 时，需要注意 location 后面的 URI 是否包含斜杠（/），这会影响请求的转发路径。通常建议 location 和 proxy_pass 要么都加斜杠，要么都不加。</p>
</li>
<li>
<p>性能优化：将精确匹配放在前面，可以减少不必要的正则匹配，提高 Nginx 的处理效率。</p>
</li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.3958000435960648" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-06 14:51">2025-04-06 14:51</span>&nbsp;
<a href="https://www.cnblogs.com/huangSir-devops">huangSir-devops</a>&nbsp;
阅读(<span id="post_view_count">45</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18811123" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18811123);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18811123', targetLink: 'https://www.cnblogs.com/huangSir-devops/p/18811123', title: 'nginx中的路径匹配规则详解（location规则）' })">举报</a>
</div>
        