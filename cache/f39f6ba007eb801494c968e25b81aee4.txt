
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/niceWk/p/18972134" title="发布于 2025-07-08 08:02">
    <span role="heading" aria-level="2">Rust修仙之道 第五章：模块境 · 构建术式藏经阁</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="第五章模块境--构建术式藏经阁">第五章：模块境 · 构建术式藏经阁</h2>
<blockquote>
<p><em>“术不可一览而尽，灵不可乱而无序。将万法藏于阁中，方能道术归一。”</em></p>
</blockquote>
<p>顾行云在编撰灵兽系统时，法术文件越写越长，变量冲突频发，灵气流转迟缓。他终于意识到：术不可杂糅一处，需分门别类，自成篇章。</p>
<p>他于古法中悟出一术：<strong>模块化（Modularization）</strong>。</p>
<h3 id="一mod之术建立灵术篇章">一、<code>mod</code>之术：建立灵术篇章</h3>
<p>顾行云开始划分篇章，例如将灵兽相关逻辑存于 <code>spirit.rs</code>：</p>
<pre><code class="language-Rust">// 文件：spirit.rs
pub struct Spirit {
    pub name: String,
    pub power: u32,
}
</code></pre>
<p>在主术式中引用它：</p>
<pre><code class="language-rust">mod spirit;
use spirit::Spirit;

fn main() {
    let s = Spirit { name: "凤影".to_string(), power: 99 };
    println!("召唤灵兽：{}（力量：{}）", s.name, s.power);
}
</code></pre>
<blockquote>
<p><code>mod</code> <em>为藏经阁入口，</em><code>use</code> <em>则是借阅灵术之匙。</em></p>
</blockquote>
<h3 id="二pub之印通灵共享符">二、<code>pub</code>之印：通灵共享符</h3>
<p>他发现没有加 <code>pub</code> 的灵术成员在主法术中不可见。于是领悟“公开之印”：</p>
<ul>
<li>
<p>默认模块内容<strong>私有</strong>；</p>
</li>
<li>
<p><code>pub</code> 标记后，方可他处引用。</p>
</li>
</ul>
<p>即：</p>
<pre><code class="language-rust">pub fn summon() { /* ... */ }
</code></pre>
<h3 id="三层叠藏经阁嵌套模块奥义">三、层叠藏经阁：嵌套模块奥义</h3>
<p>他进一步构建层级法藏：</p>
<pre><code>src/
├── main.rs
├── beast/
│   ├── mod.rs
│   ├── fire.rs
│   └── ice.rs
</code></pre>
<p>在 <code>mod.rs</code> 中：</p>
<pre><code class="language-rust">pub mod fire;
pub mod ice;
</code></pre>
<p>主程序中：</p>
<pre><code class="language-rust">mod beast;
use beast::fire::ignite;

fn main() {    ignite();
}
</code></pre>
<p>顾行云笑道：“藏术有序，调术有道。”</p>
<h3 id="附术藏经阁里的试炼封印">附术：藏经阁里的试炼封印</h3>
<p>在每个模块中也可内设试炼术：</p>
<pre><code class="language-rust">#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_spirit_power() {
        let s = Spirit { name: "雷狐".into(), power: 100 };
        assert_eq!(s.power, 100);
    }
}
</code></pre>
<h3 id="模块诀--藏术之理">模块诀 · 藏术之理</h3>
<blockquote>
<p><em>术不可散而无理，亦不可繁而不藏；藏之以篇，引之以匙，掌之以印，试之以封。</em><br>
<a href="https://www.cnblogs.com/niceWk/p/18971749##" target="_blank">https://www.cnblogs.com/niceWk/p/18971749##</a> 第五章：模块境 · 构建术式藏经阁</p>
</blockquote>
<blockquote>
<p><em>“术不可一览而尽，灵不可乱而无序。将万法藏于阁中，方能道术归一。”</em></p>
</blockquote>
<p>顾行云在编撰灵兽系统时，法术文件越写越长，变量冲突频发，灵气流转迟缓。他终于意识到：术不可杂糅一处，需分门别类，自成篇章。</p>
<p>他于古法中悟出一术：<strong>模块化（Modularization）</strong>。</p>
<h3 id="一mod之术建立灵术篇章-1">一、<code>mod</code>之术：建立灵术篇章</h3>
<p>顾行云开始划分篇章，例如将灵兽相关逻辑存于 <code>spirit.rs</code>：</p>
<pre><code class="language-Rust">// 文件：spirit.rs
pub struct Spirit {
    pub name: String,
    pub power: u32,
}
</code></pre>
<p>在主术式中引用它：</p>
<pre><code class="language-rust">mod spirit;
use spirit::Spirit;

fn main() {
    let s = Spirit { name: "凤影".to_string(), power: 99 };
    println!("召唤灵兽：{}（力量：{}）", s.name, s.power);
}
</code></pre>
<blockquote>
<p><code>mod</code> <em>为藏经阁入口，</em><code>use</code> <em>则是借阅灵术之匙。</em></p>
</blockquote>
<h3 id="二pub之印通灵共享符-1">二、<code>pub</code>之印：通灵共享符</h3>
<p>他发现没有加 <code>pub</code> 的灵术成员在主法术中不可见。于是领悟“公开之印”：</p>
<ul>
<li>
<p>默认模块内容<strong>私有</strong>；</p>
</li>
<li>
<p><code>pub</code> 标记后，方可他处引用。</p>
</li>
</ul>
<p>即：</p>
<pre><code class="language-rust">pub fn summon() { /* ... */ }
</code></pre>
<h3 id="三层叠藏经阁嵌套模块奥义-1">三、层叠藏经阁：嵌套模块奥义</h3>
<p>他进一步构建层级法藏：</p>
<pre><code>src/
├── main.rs
├── beast/
│   ├── mod.rs
│   ├── fire.rs
│   └── ice.rs
</code></pre>
<p>在 <code>mod.rs</code> 中：</p>
<pre><code class="language-rust">pub mod fire;
pub mod ice;
</code></pre>
<p>主程序中：</p>
<pre><code class="language-rust">mod beast;
use beast::fire::ignite;

fn main() {    ignite();
}
</code></pre>
<p>顾行云笑道：“藏术有序，调术有道。”</p>
<h3 id="附术藏经阁里的试炼封印-1">附术：藏经阁里的试炼封印</h3>
<p>在每个模块中也可内设试炼术：</p>
<pre><code class="language-rust">#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_spirit_power() {
        let s = Spirit { name: "雷狐".into(), power: 100 };
        assert_eq!(s.power, 100);
    }
}
</code></pre>
<h3 id="模块诀--藏术之理-1">模块诀 · 藏术之理</h3>
<blockquote>
<p><em>术不可散而无理，亦不可繁而不藏；藏之以篇，引之以匙，掌之以印，试之以封。</em></p>
</blockquote>
<hr>
<h2 id="️-上一章下一章-待续️">⬅️ <a href="https://www.cnblogs.com/niceWk/p/18971749" target="_blank">上一章</a>　　　　　　　　　　　　[下一章 待续➡️]</h2>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-08 08:03">2025-07-08 08:02</span>&nbsp;
<a href="https://www.cnblogs.com/niceWk">NiceWk</a>&nbsp;
阅读(<span id="post_view_count">10</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18972134);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18972134', targetLink: 'https://www.cnblogs.com/niceWk/p/18972134', title: 'Rust修仙之道 第五章：模块境 &amp;#183; 构建术式藏经阁' })">举报</a>
</div>
        