
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zlt2000/p/18654758" title="发布于 2025-01-06 10:35">
    <span role="heading" aria-level="2">Spring Cloud Alibaba AI 入门与实践</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        本文将介绍 Spring Cloud Alibaba AI 的基本概念、主要特性和功能，并演示如何完成一个在线聊天和在线画图的 AI 应用。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><img src="https://img2024.cnblogs.com/blog/1769816/202501/1769816-20250106103436138-1771142195.png" alt="" loading="lazy"></p>
<h2 id="一概述">一、概述</h2>
<p><code>Spring AI</code> 是 <code>Spring</code> 官方社区项目，旨在简化 <code>Java AI</code> 应用程序开发，让 <code>Java</code> 开发者像使用 <code>Spring</code> 开发普通应用一样开发 <code>AI</code> 应用。</p>
<blockquote>
<ul>
<li>可参考文章《<a href="https://mp.weixin.qq.com/s/tuQwMc_GXKVNGZ3cUYR5Ag" target="_blank" rel="noopener nofollow">SpringAI：Java 开发的智能新利器</a>》</li>
</ul>
</blockquote>
<p><code>Spring Cloud Alibaba AI</code> 是一个将 <code>Spring Cloud</code> 微服务生态与阿里巴巴 <code>AI</code> 能力无缝集成的框架，帮助开发者快速构建具备 <code>AI</code> 功能的现代化应用。本文将介绍 <code>Spring Cloud Alibaba AI</code> 的基本概念、主要特性和功能，并演示如何完成一个 <strong>在线聊天</strong> 和 <strong>在线画图</strong> 的 <code>AI</code> 应用。</p>
<p>&nbsp;</p>
<h2 id="二主要特性和功能">二、主要特性和功能</h2>
<p><code>Spring Cloud Alibaba AI</code> 目前基于 <code>Spring AI 0.8.1</code> 版本 API 完成通义系列大模型的接入。通义接入是基于阿里云 <code>阿里云百炼</code> 服务；而 <code>阿里云百炼</code> 建立在 <code>模型即服务（MaaS）</code> 的理念基础之上，围绕 <code>AI</code> 各领域模型，通过标准化的 <code>API</code> 提供包括模型推理、模型微调训练在内的多种模型服务。</p>
<p>主要提供以下核心功能：</p>
<h3 id="21-简单易用的集成">2.1. 简单易用的集成</h3>
<p>通过 <code>Spring Boot</code> 风格的自动配置机制，开发者只需少量代码配置，即可快速接入阿里云的 <code>AI</code> 服务。</p>
<h3 id="22-丰富的-ai-服务支持">2.2. 丰富的 AI 服务支持</h3>
<p>支持以下核心能力：</p>
<ul>
<li><strong>自然语言处理（NLP）</strong>：文本分析、智能问答、翻译。</li>
<li><strong>计算机视觉（CV）</strong>：图像生成、图像识别、目标检测。</li>
<li><strong>语音处理</strong>：语音识别、语音合成。</li>
<li><strong>数据分析与预测</strong>：数据建模、趋势分析。</li>
</ul>
<h3 id="23-高度扩展性">2.3. 高度扩展性</h3>
<p>通过配置中心和注册中心（如 Nacos）实现动态扩展，支持微服务架构的扩展需求。<br>
提供接口定义，方便接入第三方 <code>AI</code> 平台。</p>
<p>&nbsp;</p>
<h2 id="三构建-ai-应用">三、构建 AI 应用</h2>
<p>Spring Cloud Alibaba AI 对 Java 版本有要求，所以需要提前预装好 Java 17 环境。</p>
<h3 id="31-申请-api-key">3.1. 申请 API-KEY</h3>
<p>登录阿里云，进入 <code>阿里云百炼</code> 的页面：</p>
<pre><code class="language-java">https://bailian.console.aliyun.com/?apiKey=1#/api-key
</code></pre>
<p>创建自己的 <code>API-KEY</code></p>
<p><img src="https://img2024.cnblogs.com/blog/1769816/202501/1769816-20250106103436554-64286462.png" alt="" loading="lazy"></p>
<h3 id="32-添加依赖">3.2. 添加依赖</h3>
<p>在 <code>Spring Boot</code> 项目的 <code>pom.xml</code> 中添加 <code>alibaba-ai</code> 依赖</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-alibaba-ai&lt;/artifactId&gt;
&lt;/dependency&gt;

&lt;repositories&gt;
    &lt;repository&gt;
        &lt;id&gt;alimaven&lt;/id&gt;
        &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;
    &lt;/repository&gt;
    &lt;repository&gt;
        &lt;id&gt;spring-milestones&lt;/id&gt;
        &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;
        &lt;snapshots&gt;
            &lt;enabled&gt;false&lt;/enabled&gt;
        &lt;/snapshots&gt;
    &lt;/repository&gt;
    &lt;repository&gt;
        &lt;id&gt;spring-snapshots&lt;/id&gt;
        &lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;
        &lt;snapshots&gt;
            &lt;enabled&gt;false&lt;/enabled&gt;
        &lt;/snapshots&gt;
    &lt;/repository&gt;
&lt;/repositories&gt;
</code></pre>
<p>&nbsp;</p>
<h3 id="33-配置-api-key">3.3. 配置 API-KEY</h3>
<p>在 <code>application.yml</code> 中配置 Kafka 的相关属性，包括服务器地址、认证信息等。</p>
<pre><code class="language-yaml">spring:
  cloud:
    ai:
      tongyi:
        connection:
          api-key: sk-xxxxxx
</code></pre>
<ul>
<li><code>api-key</code> 配置在阿里云百炼里申请的api-key</li>
</ul>
<h3 id="34-创建模型调用服务">3.4. 创建模型调用服务</h3>
<pre><code class="language-java">@Service
@Slf4j
public class TongYiSimpleService {
    @Resource
    private TongYiChatModel chatClient;
    @Resource
    private TongYiImagesModel imageClient;

    public String chat(String message) {
        Prompt prompt = new Prompt(new UserMessage(message));
        return chatClient.call(prompt).getResult().getOutput().getContent();
    }

    public String image(String message) {
        ImagePrompt prompt = new ImagePrompt(message);
        Image image = imageClient.call(prompt).getResult().getOutput();
        return image.getB64Json();
    }
}
</code></pre>
<blockquote>
<p>聊天和图片的服务，分别通过注入 <code>TongYiChatModel</code> 和 <code>TongYiImagesModel</code> 对象来实现，屏蔽底层通义大模型交互细节。</p>
</blockquote>
<h3 id="35-创建controller">3.5. 创建controller</h3>
<pre><code class="language-java">@RestController
@RequestMapping("/ai")
public class TongYiController {
    @Resource
    private TongYiSimpleService tongYiSimpleService;

    @GetMapping("/chat")
    public String chat(@RequestParam(value = "message") String message) {
        return tongYiSimpleService.chat(message);
    }

    @GetMapping("/image")
    public ResponseEntity&lt;byte[]&gt; image(@RequestParam(value = "message") String message) {
        String b64Str = tongYiSimpleService.image(message);
        byte[] imageBytes = Base64.getDecoder().decode(b64Str);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.IMAGE_JPEG);
        return new ResponseEntity&lt;&gt;(imageBytes, headers, HttpStatus.OK);
    }
}
</code></pre>
<h3 id="36-测试效果">3.6. 测试效果</h3>
<h4 id="361-聊天接口">3.6.1. 聊天接口</h4>
<p>在浏览器输入：<a href="http://localhost:8009/ai/chat?message=%E4%BD%A0%E6%98%AF%E8%B0%81" target="_blank" rel="noopener nofollow">http://localhost:8009/ai/chat?message=你是谁</a></p>
<p><img src="https://img2024.cnblogs.com/blog/1769816/202501/1769816-20250106103436910-424335222.png" alt="" loading="lazy"></p>
<h4 id="362-图片接口">3.6.2. 图片接口</h4>
<p>在浏览器输入：<a href="http://localhost:8009/ai/image?message=%E6%84%8F%E5%A4%A7%E5%88%A9%E9%9D%A2%E6%8B%8C42%E5%8F%B7%E6%B7%B7%E5%87%9D%E5%9C%9F" target="_blank" rel="noopener nofollow">http://localhost:8009/ai/image?message=意大利面拌42号混凝土</a></p>
<p><img src="https://img2024.cnblogs.com/blog/1769816/202501/1769816-20250106103437438-1188274414.png" alt="" loading="lazy"></p>
<h3 id="363-搭配聊天页面">3.6.3. 搭配聊天页面</h3>
<p><img src="https://img2024.cnblogs.com/blog/1769816/202501/1769816-20250106103437902-1273486186.png" alt="" loading="lazy"></p>
<h2 id="四总结">四、总结</h2>
<p>当前版本的 <code>Spring Cloud Alibaba AI</code> 主要完成了几种常见生成式模型的适配，涵盖对话、文生图、文生语音等。在未来的版本中将继续推进 <code>VectorStore</code>、<code>Embedding</code>、<code>ETL Pipeline</code>、<code>RAG</code> 等更多 <code>AI</code> 应用开发场景的建设。</p>
<blockquote>
<p>完整的样例代码下载：<br>
<a href="https://gitee.com/zlt2000/spring-cloud-ai-sample" target="_blank" rel="noopener nofollow">https://gitee.com/zlt2000/spring-cloud-ai-sample</a></p>
</blockquote>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.31492152238194443" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-06 10:43">2025-01-06 10:35</span>&nbsp;
<a href="https://www.cnblogs.com/zlt2000">zlt2000</a>&nbsp;
阅读(<span id="post_view_count">178</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18654758" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18654758);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18654758', targetLink: 'https://www.cnblogs.com/zlt2000/p/18654758', title: 'Spring Cloud Alibaba AI 入门与实践' })">举报</a>
</div>
        