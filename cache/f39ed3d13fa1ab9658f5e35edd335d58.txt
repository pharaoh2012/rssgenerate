
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/deali/p/18960633/fix-sharpico-bug" title="发布于 2025-07-01 23:36">
    <span role="heading" aria-level="2">花了不少时间，修复了一个SharpIco生成图标的bug</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>上个月我<a href="https://blog.deali.cn/p/sharpico-pure-csharp-zero-dependency-ico-generator" target="_blank" rel="noopener nofollow">用 dotnet9 AOT 开发了一个 ico 图标生成工具 SharpIco</a></p>
<p>这个实用小工具一经发布就受到不少朋友的关注</p>
<p>最近还<a href="https://www.cnblogs.com/ZYPLJ/p/18957808#5362864" target="_blank">被做成了网站，有图形化界面来一键生成 ico 图标，更方便普通用户的使用</a></p>
<h2 id="出现问题">出现问题</h2>
<p>不过有网友在 issues 反馈了问题 「高分辨率图片在转换完成后，图片会损坏导致无法打开」</p>
<p><img src="https://blog.deali.cn/media/blog/85f259fe472f1113/e4e6a5503b608fa2.png" alt="image-20250701231131284" loading="lazy"></p>
<p>我测试了一下确实会这样</p>
<p>这个就很诡异了</p>
<p>看代码也可以发现，每个尺寸的图片都是通过 Resize 出来的</p>
<p>这样的话，无论输入的图片是多大的，最终都会缩小成几个指定的尺寸</p>
<pre><code class="language-c#">using var original = Image.Load(sourcePng);

foreach (var size in sizes) {
  using var clone = original.Clone(ctx =&gt; ctx.Resize(size, size));
  using var ms = new MemoryStream();
  clone.SaveAsPng(ms);
  images.Add(ms.ToArray());
}
</code></pre>
<p>而且生成的 ico 并不是真正的损坏，在 Photoshop 里还是能打开的，只不过在系统的图片应用打开看不了，而且也无法正确解析图片元数据</p>
<h2 id="排查问题">排查问题</h2>
<p>起初我求助于大模型爷爷（Claude4）</p>
<p>不过给我的几个方案都没啥用</p>
<p>要不就是叫我低于 256 分辨率使用 BMP 保存</p>
<p>然后还得写入 BIP 头什么的乱七八糟的，麻烦得一批</p>
<p>最后还得是我自己仔细观察</p>
<p>写入每张图片的代码是这样的</p>
<pre><code class="language-c#">foreach (var image in images) {
  using var ms = new MemoryStream(image);
  using var img = Image.Load(ms);

  writer.Write((byte)(img.Width == 256 ? 0 : img.Width)); // width
  writer.Write((byte)(img.Height == 256 ? 0 : img.Height)); // height
  writer.Write((byte)0); // colors in palette
  writer.Write((byte)0); // reserved
  writer.Write((ushort)1); // color planes
  writer.Write((ushort)32); // bits per pixel
  writer.Write(image.Length); // size of image data
  writer.Write(offset); // offset of image data

  offset += image.Length;
}
</code></pre>
<p>其中有一行 <code> writer.Write((ushort)32); // bits per pixel</code> 这个代表了图片的颜色位深度</p>
<p>一般来说 ICO 支持的常见位深度有：</p>
<ul>
<li>1 bit（黑白）</li>
<li>4 bit（16 色）</li>
<li>8 bit（256 色）</li>
<li>24 bit（真彩色）</li>
<li><strong>32 bit（真彩色 + Alpha）</strong></li>
</ul>
<p>我们的代码这里直接使用了 32 位色彩</p>
<p>而我发现那些转换出来无法解析的图片，都是 24 位色彩的</p>
<p>那么到这里就破案了</p>
<p>就是位深度不匹配的问题</p>
<h2 id="解决方法">解决方法</h2>
<p>那么如何解决呢？</p>
<p>一开始我尝试在 clone 不同大小的图片时加上透明背景色</p>
<pre><code class="language-c#">using var clone = original.Clone(ctx =&gt; {
  ctx.Resize(size, size);
  ctx.BackgroundColor(Color.Transparent); // 保证有 alpha 通道
});
</code></pre>
<p>然后很遗憾的是，没有效果</p>
<p>感觉可能是原始图片没有 alpha，ImageSharp 仍然用 RGB 来保存 PNG，导致保存出的 PNG 是 24-bit</p>
<p>而 ICO 写的 header 是 32-bit，导致无法解析</p>
<p>最终的解决方法是</p>
<pre><code class="language-c#">foreach (var size in sizes) {
  using var clone = original.Clone(ctx =&gt; ctx.Resize(size, size));
  using var ms = new MemoryStream();
  // 强制图像为 Rgba32 格式，确保是 32-bit
  var rgbaImage = clone.CloneAs&lt;Rgba32&gt;();
  rgbaImage.SaveAsPng(ms);
  images.Add(ms.ToArray());
}
</code></pre>
<p>使用 <code>clone.CloneAs&lt;Rgba32&gt;();</code> 强制转换图片位 32 位色彩</p>
<p>之后我测试了大部分图片都没问题了~</p>
<h2 id="小结">小结</h2>
<p>我以为只要熟悉了ico文件格式的规范就足够了</p>
<p>没想到这只是个开始</p>
<p>图像处理领域还是有很多坑的</p>
<p>难怪大部分工具都选择使用 Magick 这类老牌成熟的图像处理库来实现这个功能</p>
<p>手写的话一不小心就踩坑了~ 还要花大量时间去排查问题</p>

</div>
<div id="MySignature" role="contentinfo">
    微信公众号：「程序设计实验室」
专注于互联网热门新技术探索与团队敏捷开发实践，包括架构设计、机器学习与数据分析算法、移动端开发、Linux、Web前后端开发等，欢迎一起探讨技术，分享学习实践经验。
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-01 23:37">2025-07-01 23:36</span>&nbsp;
<a href="https://www.cnblogs.com/deali">程序设计实验室</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18960633);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18960633', targetLink: 'https://www.cnblogs.com/deali/p/18960633/fix-sharpico-bug', title: '花了不少时间，修复了一个SharpIco生成图标的bug' })">举报</a>
</div>
        