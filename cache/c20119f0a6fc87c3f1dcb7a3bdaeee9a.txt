
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/magicMaQaQ/p/18788772" title="发布于 2025-03-24 16:45">
    <span role="heading" aria-level="2">C# 从零开始使用Layui.Wpf库开发WPF客户端</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>&nbsp;一、简介</h1>
<p>　　最近需要开发一个桌面版的工具软件，之前用得更多的是Winform，作为一个全干工程师，我们也要兼顾下WPF，趁此机会再研究下开源控件库。</p>
<p>　　MaQaQ：Winform真好用（有个<a href="https://gitee.com/kwwwvagaa/net_winform_custom_control?_from=gitee_search" target="_blank" rel="noopener nofollow">HZHControls控件库</a>，值得一看）。</p>
<h1>二、准备工作</h1>
<p>　　找了下开源控件库，诸如<a href="https://github.com/MaterialDesignInXAML/MaterialDesignInXamlToolkit" target="_blank" rel="noopener nofollow">MaterialDesignInXAML</a>、<a href="https://github.com/handyOrg/HandyControl" target="_blank" rel="noopener nofollow">HandyControl</a>、<a href="https://github.com/aduskin/AduSkin" target="_blank" rel="noopener nofollow">AduSkin</a>、<a href="https://github.com/benruehl/adonis-ui" target="_blank" rel="noopener nofollow">Adonis-UI</a>、<a class="Box-sc-g0xbh4-0 kHuKdh prc-Link-Link-85e08" href="https://github.com/Panuon/Panuon.WPF.UI" data-testid="breadcrumbs-repo-link" rel="noopener nofollow">Panuon.WPF.UI</a>、<a href="https://github.com/944095635/DMSkin" target="_blank" rel="noopener nofollow">DMSkin</a>等等，以上这些我们都暂时不看。</p>
<p>　　本次选用的控件库是Layui.WPF：&nbsp;<a href="https://github.com/Layui-WPF-Team/Layui-WPF?tab=readme-ov-file" rel="noopener nofollow">GitHub - Layui-WPF-Team/Layui-WPF: 这是一个WPF版的Layui前端UI样式库</a>。</p>
<p>　　选用的原因是我的渣渣网络在打开其他库的时候都加载很慢，只有它脱颖而出，这就是缘分啊。</p>
<p>　　MaQaQ：实际上MaterialDesignInXAML跟HandyControl我之前在别的项目有用过，这两个star数都挺高的，用起来也不错，HandyControl在<a href="https://gitee.com/handyorg/HandyControl/" target="_blank" rel="noopener nofollow">Gitee</a>上也有库，有兴趣的朋友可以去看看，这次我只是想试试新东西。　　</p>
<p>　　顺利访问到了GitHub库，我打开了里面的学习文档，他只给了我一个Hello world，真是干！得好。再往下翻，找到了使用说明：</p>
<p><img src="https://img2024.cnblogs.com/blog/2447777/202503/2447777-20250324102851191-503438743.png" alt="" width="435" height="265" loading="lazy"></p>
<p>&nbsp;　　使用说明很简洁，看起来很轻松就能用上了，但我不信。那我们就去把源码下载下来吧，感恩开发者，他还给了示例（搬砖党狂喜啊）。打开程序源码，根据提示安装了.net5跟.net7后成功加载，找到LayuiApp，这是示例项目：</p>
<p><img src="https://img2024.cnblogs.com/blog/2447777/202503/2447777-20250324092704343-89188885.png" alt="" width="232" height="322" loading="lazy"></p>
<p>　　运行后界面如下（PS：右上角的公告写得真好，值得一读！！！）：</p>
<p><img src="https://img2024.cnblogs.com/blog/2447777/202503/2447777-20250324093026459-1302427031.png" alt="" width="448" height="245" loading="lazy"></p>
<h1>三、开发</h1>
<p>　　作为一个wpf菜鸡+资深搬砖党，此时不忙搬运，我们先打开LayuiApp的MainWindow.xaml，仔细研究一番：</p>
<p><img src="https://img2024.cnblogs.com/blog/2447777/202503/2447777-20250324103208657-415853358.png" alt="" width="503" height="320" loading="lazy"></p>
<p>　　可以看到，原项目采用的是prism框架（一个用于构建复杂但组织良好的 WPF 应用程序的框架，实际上我并不认识它，这是通义千问告诉我的），总之，prism:ViewModelLocator.AutoWireViewModel="True"这一句，就是用于自动关联视图与视图模型。</p>
<p>　　创建一个新的WPF程序，这里还是用我熟悉的.net6，慎重思考1秒后决定命名为ServerControlSystem，新建的项目里面自带有MainWindow.xaml。</p>
<p>　　Nuget上引用LayUI.Wpf和Prism的相关库：</p>
<p><img src="https://img2024.cnblogs.com/blog/2447777/202503/2447777-20250324152145122-1274662490.png" alt="" width="546" height="293" loading="lazy"></p>
<p>&nbsp;　　为了实现prism的自动关联，我们要新建两个文件夹，Views和ViewModels，将MainWindow.xaml移动到Views文件夹下，在ViewModels文件夹中对应新建MainWindowViewModel.cs：</p>
<p><img src="https://img2024.cnblogs.com/blog/2447777/202503/2447777-20250324110801799-454105619.png" alt="" width="253" height="231" loading="lazy"></p>
<p>&nbsp;　　当然，也可以自定义，这就需要我们自己去修改App.xaml.cs，添加配置：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">override</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> ConfigureViewModelLocator()
{
    </span><span style="color: rgba(0, 0, 255, 1)">base</span><span style="color: rgba(0, 0, 0, 1)">.ConfigureViewModelLocator();
    ViewModelLocationProvider.Register</span>&lt;MainWindow, MainWindowViewModel&gt;<span style="color: rgba(0, 0, 0, 1)">();
}</span></pre>
</div>
<p>　　这里我们还是用的自动关联，因为移动了MainWindow的位置，所以要对应修改下命名空间的路径（不想改你就直接删了重建吧）：</p>
<p>　　MainWindow.xaml：</p>
<div class="cnblogs_code">
<pre>&lt;Window x:Class=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ServerControlSystem.Views.MainWindow</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">...</span>&gt;<span style="color: rgba(0, 0, 0, 1)">
...
</span>&lt;/Window&gt;</pre>
</div>
<p>　　MainWindow.xaml.cs：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">partial</span> <span style="color: rgba(0, 0, 255, 1)">class</span> MainWindow : Window</pre>
</div>
<p>　　而在prism框架下，一般要将App的基类改为PrismApplication：</p>
<p>　　App.xaml：</p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_063a3989-653e-43de-9180-18f84d663904" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_063a3989-653e-43de-9180-18f84d663904" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_063a3989-653e-43de-9180-18f84d663904" class="cnblogs_code_hide">
<pre>&lt;prism:PrismApplication x:Class=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ServerControlSystem.App</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
             xmlns</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
             xmlns:x</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://schemas.microsoft.com/winfx/2006/xaml</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
             xmlns:local</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">clr-namespace:ServerControlSystem</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    xmlns:prism</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://prismlibrary.com/</span><span style="color: rgba(128, 0, 0, 1)">"</span>&gt;
    &lt;Application.Resources&gt;
        &lt;ResourceDictionary&gt;
            &lt;ResourceDictionary.MergedDictionaries&gt;
                &lt;ResourceDictionary Source=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">pack://application:,,,/LayUI.Wpf;component/Themes/Default.xaml</span><span style="color: rgba(128, 0, 0, 1)">"</span> /&gt;
            &lt;/ResourceDictionary.MergedDictionaries&gt;
        &lt;/ResourceDictionary&gt;
    &lt;/Application.Resources&gt;
&lt;/prism:PrismApplication&gt;</pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>　　App.xaml.cs：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">partial</span> <span style="color: rgba(0, 0, 255, 1)">class</span> App : PrismApplication</pre>
</div>
<p>　　同时在prism框架下，一般是通过重写CreateShell方法来指定主窗口，且需要实现继承的RegisterTypes：</p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_1efa79f9-4d9c-41e8-8d37-9efec8ee9286" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_1efa79f9-4d9c-41e8-8d37-9efec8ee9286" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_1efa79f9-4d9c-41e8-8d37-9efec8ee9286" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">partial</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> App : PrismApplication
{
    </span><span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">override</span><span style="color: rgba(0, 0, 0, 1)"> Window CreateShell()
    {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> Container.Resolve&lt;MainWindow&gt;<span style="color: rgba(0, 0, 0, 1)">();
    }
    </span><span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">override</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> OnStartup(StartupEventArgs e)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">base</span><span style="color: rgba(0, 0, 0, 1)">.OnStartup(e);
        DispatcherUnhandledException </span>+=<span style="color: rgba(0, 0, 0, 1)"> App_DispatcherUnhandledException;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> App_DispatcherUnhandledException(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, System.Windows.Threading.DispatcherUnhandledExceptionEventArgs e)
    {
        LayMessage.Error(e.Exception.Message);
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">记录日志</span>
        e.Handled = <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">override</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> RegisterTypes(IContainerRegistry containerRegistry)
    {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">注入自定义接口</span>
        LayDialog.Register(Container.Resolve&lt;IContainerExtension&gt;<span style="color: rgba(0, 0, 0, 1)">());
    }
}</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>　　现在，我们可以开始快乐搬运了，先小搬一下MainWindow.xaml，这里我们只是验证控件库的调用，所以就试一下Lay:LayTitleBar：</p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_cc759049-a1ab-4dc6-b410-ea6a5cbd5b03" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_cc759049-a1ab-4dc6-b410-ea6a5cbd5b03" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_cc759049-a1ab-4dc6-b410-ea6a5cbd5b03" class="cnblogs_code_hide">
<pre>&lt;Window x:Class=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ServerControlSystem.Views.MainWindow</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    xmlns</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    xmlns:x</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://schemas.microsoft.com/winfx/2006/xaml</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
        xmlns:Lay</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">clr-namespace:LayUI.Wpf.Controls;assembly=LayUI.Wpf</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
        xmlns:prism</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://prismlibrary.com/</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    Width</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">1080</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    Height</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">600</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    prism:ViewModelLocator.AutoWireViewModel</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">True</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    AllowsTransparency</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">True</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    WindowStartupLocation</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">CenterScreen</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    WindowStyle</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">None</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    Title</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MainWindow</span><span style="color: rgba(128, 0, 0, 1)">"</span> &gt;
    &lt;Grid&gt;
        &lt;<span style="color: rgba(0, 0, 0, 1)">Lay:LayTitleBar
            Background</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{DynamicResource LighCyan}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
            CornerRadius</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">4</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
            ResizeMode</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">CanResize</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
            WindowState</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{Binding WindowState, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}</span><span style="color: rgba(128, 0, 0, 1)">"</span>&gt;            
        &lt;/Lay:LayTitleBar&gt;
    &lt;/Grid&gt;
&lt;/Window&gt;</pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>　　然后再看模型，先实现基类ViewModelBase：</p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_8bd7a19e-5b60-4d09-94b2-81807bcbb50a" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_8bd7a19e-5b60-4d09-94b2-81807bcbb50a" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_8bd7a19e-5b60-4d09-94b2-81807bcbb50a" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">abstract</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> ViewModelBase : BindableBase, INavigationAware, IRegionMemberLifetime, IConfirmNavigationRequest
{
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 导航器
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> IRegionManager Region;
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 弹窗服务
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> IDialogService Dialog;
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 事件聚合器
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> IEventAggregator Event;
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> ViewModelBase()
    {
    }
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> ViewModelBase(IContainerExtension container)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">this</span>.Region = container.Resolve&lt;IRegionManager&gt;<span style="color: rgba(0, 0, 0, 1)">();
        </span><span style="color: rgba(0, 0, 255, 1)">this</span>.Dialog = container.Resolve&lt;IDialogService&gt;<span style="color: rgba(0, 0, 0, 1)">();
        </span><span style="color: rgba(0, 0, 255, 1)">this</span>.Event = container.Resolve&lt;IEventAggregator&gt;<span style="color: rgba(0, 0, 0, 1)">();
    }
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> DelegateCommand _LoadedCommand;
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> DelegateCommand LoadedCommand =&gt;<span style="color: rgba(0, 0, 0, 1)">
        _LoadedCommand </span>?? (_LoadedCommand = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> DelegateCommand(ExecuteLoadedCommand));
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)">初始化界面加载
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">virtual</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> ExecuteLoadedCommand()
    {

    }
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 控制视图是否被缓存
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">bool</span> KeepAlive =&gt; <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;

    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">virtual</span> <span style="color: rgba(0, 0, 255, 1)">void</span> ConfirmNavigationRequest(NavigationContext navigationContext, Action&lt;<span style="color: rgba(0, 0, 255, 1)">bool</span>&gt;<span style="color: rgba(0, 0, 0, 1)"> continuationCallback)
    {
        continuationCallback(</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
    }
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 控制实例是否被缓存
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;param name="navigationContext"&gt;&lt;/param&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;returns&gt;&lt;/returns&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">virtual</span> <span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)"> IsNavigationTarget(NavigationContext navigationContext)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
    }
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 导航离开当前ViewModel时被调用
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;param name="navigationContext"&gt;&lt;/param&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">virtual</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> OnNavigatedFrom(NavigationContext navigationContext)
    {
    }
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 导航到当前ViewModel时被调用
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;param name="navigationContext"&gt;&lt;/param&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">virtual</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> OnNavigatedTo(NavigationContext navigationContext)
    {

    }
}</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>　　再实现MainWindowViewModel：</p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_9e3f134d-b493-4e19-977a-622db3272e44" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_9e3f134d-b493-4e19-977a-622db3272e44" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_9e3f134d-b493-4e19-977a-622db3272e44" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> MainWindowViewModel : ViewModelBase, IWindowAware
{
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> WindowState _WindowState;
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 窗体状态
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> WindowState WindowState
    {
        </span><span style="color: rgba(0, 0, 255, 1)">get</span> { <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> _WindowState; }
        </span><span style="color: rgba(0, 0, 255, 1)">set</span> { _WindowState =<span style="color: rgba(0, 0, 0, 1)"> value; RaisePropertyChanged(); }
    }
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> MainWindowViewModel(IContainerExtension container) : <span style="color: rgba(0, 0, 255, 1)">base</span><span style="color: rgba(0, 0, 0, 1)">(container)
    {

    }
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">override</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> ExecuteLoadedCommand()
    {
        </span><span style="color: rgba(0, 0, 255, 1)">base</span><span style="color: rgba(0, 0, 0, 1)">.ExecuteLoadedCommand();
    }
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)"> CanClosing()
    {
        </span><span style="color: rgba(0, 0, 255, 1)">var</span> res = MessageBox.Show(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">确定关闭窗体吗？</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">提示</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, MessageBoxButton.OKCancel);
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (res == MessageBoxResult.OK) <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
    }
}</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>　　到这一步基本就完成了，编译生成一下，运行后就能得到一个简陋的空界面：</p>
<p><img src="https://img2024.cnblogs.com/blog/2447777/202503/2447777-20250324152610703-1233388099.png" alt="" width="411" height="202" loading="lazy"></p>
<p>&nbsp;　　之后，就可以根据需要，自己添加控件了。比如，你可以加上，标题栏就会美观一点：</p>
<div class="cnblogs_code">
<pre>&lt;Lay:LayTitleBar.Header&gt;
    &lt;Border Height=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">40</span><span style="color: rgba(128, 0, 0, 1)">"</span>&gt;
    &lt;/Border&gt;
&lt;/Lay:LayTitleBar.Header&gt;</pre>
</div>
<h1>四、总结</h1>
<p>　　Winform真好写。</p>
</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/magicMaQaQ/" target="_blank">MaQaQ</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/magicMaQaQ/p/18788772" target="_blank">https://www.cnblogs.com/magicMaQaQ/p/18788772</a></p>
<p>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接，否则保留追究法律责任的权利。</p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.3996230147303241" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-24 16:46">2025-03-24 16:45</span>&nbsp;
<a href="https://www.cnblogs.com/magicMaQaQ">MaQaQ</a>&nbsp;
阅读(<span id="post_view_count">171</span>)&nbsp;
评论(<span id="post_comment_count">5</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18788772" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18788772);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18788772', targetLink: 'https://www.cnblogs.com/magicMaQaQ/p/18788772', title: 'C# 从零开始使用Layui.Wpf库开发WPF客户端' })">举报</a>
</div>
	