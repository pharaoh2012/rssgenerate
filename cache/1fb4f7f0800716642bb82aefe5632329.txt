
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/sowler/p/18913269" title="发布于 2025-06-05 22:40">
    <span role="heading" aria-level="2">SSH实现服务器之间免密登录</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="1介绍">1、介绍</h1>
<p>SSH（Secure Shell）是一种用于计算机之间安全远程登录和其他网络服务的协议，它通过加密通信来确保在不安全的网络中也能安全地传输数据。<code>SSH</code>可以用于登录远程主机、执行命令和管理远程服务器。与<code>Telnet</code>协议不同，<code>SSH</code>提供了强大的加密和身份验证机制，能够有效防止窃听、篡改和伪造身份的攻击。<code>SSH</code>的默认端口是<code>22</code>，它通常与公共密钥加密技术一起使用，可以实现更加安全的身份验证。</p>
<h1 id="2用途">2、用途</h1>
<ul>
<li>
<p>登录远程服务器，进行系统管理和维护。</p>
</li>
<li>
<p>通过SCP或SFTP安全地传输文件。</p>
</li>
<li>
<p>端口转发，实现内网穿透或安全代理。</p>
</li>
<li>
<p>自动化运维脚本的远程执行。</p>
</li>
<li>
<p>实现服务器与服务器之间的免密登录。</p>
</li>
</ul>
<h1 id="3下载">3、下载</h1>
<p>在大多数<code>Linux</code>发行版中，<code>SSH</code>客户端和服务器都已经默认安装好了。如果没有，需要通过以下步骤安装：</p>
<p>查看是否安装 <code>openssh-server</code></p>
<pre><code class="language-sh">yum list installed | grep openssh-server
</code></pre>
<p>或者</p>
<pre><code class="language-sh">rpm -qa | grep openssh-server
</code></pre>
<p>如果没任何输出显示，表示没有安装 <code>openssh-server</code>，通过 <code>yum</code> 命令安装：</p>
<pre><code class="language-sh">yum install openssh-server
</code></pre>
<p>安装成功后，启动SSH服务：</p>
<pre><code class="language-sh"># 启动
systemctl start sshd
# 开机自启动
systemctl enable sshd
</code></pre>
<p><strong>其他相关命令</strong></p>
<pre><code class="language-sh"># 查看启动状态
systemctl status sshd
# 重新启动
systemctl restart sshd
# 停止SSH服务
systemctl stop sshd
# 重新加载SSH配置（不中断现有连接）
systemctl reload sshd
# 禁用服务开机自启
systemctl disable sshd
# 查看SSH服务监听的端口
netstat -tnlp | grep sshd
# 查看SSH配置文件
cat /etc/ssh/sshd_config
</code></pre>
<h1 id="4免密登录">4、免密登录</h1>
<p><strong>注意：</strong></p>
<p>如果要在<code> Linux</code>系统 <code>A服务器</code> 上实现免密登录到 <code>B服务器</code> ，则需要在<code>A服务器</code>上生成 <code>SSH 密钥对</code></p>
<h2 id="41创建密钥对">4.1、创建密钥对</h2>
<p>在<code>A服务器</code>上面执行以下命令创建密钥对</p>
<pre><code class="language-sh">ssh-keygen -t rsa -b 4096 -C "remark" 

# remark：密钥对公钥备注信息
</code></pre>
<p>执行成功后，在<code>A服务器</code>的<code>/root/.ssh</code> 目录会生成 <code>id_rsa</code> 私钥文件和 <code>id_rsa.pub</code> 公有文件。如果执行命令的时候设置了生成文件目录，私钥和公钥文件会生成到指定的目录中。</p>
<h2 id="42将公钥复制到服务器端">4.2、将公钥复制到服务器端</h2>
<p>执行成功后，在<code>A服务器</code>上面执行以下命令，将公钥文件远程拷贝到<code>B服务器</code> 。</p>
<pre><code class="language-sh">ssh-copy-id username@server_ip_or_hostname

# 如果需要加端口号
ssh-copy-id -p 2222 username@server_ip_or_hostname

username # B服务器的用户名称
server_ip_or_hostname # B服务器的访问IP或者代理主机名称
</code></pre>
<p>如果服务器没有 <code>ssh-copy-id</code> 命令，需要把<code>id_rsa.pub</code> 中的公钥内容进行手动保存到<code>B服务器</code> 的 <code>~/.ssh/authorized_keys</code> 文件中。</p>
<h2 id="43验证服务器是否添加成功">4.3、验证服务器是否添加成功</h2>
<p>远程登录到 <code>B服务器</code> ，在 <code>B服务器</code> 中查看公钥是否拷贝成功。</p>
<pre><code class="language-sh">cat ~/.ssh/authorized_keys
</code></pre>
<h2 id="44验证登录">4.4、验证登录</h2>
<pre><code class="language-sh">ssh username@server_ip_or_hostname

# 如果需要加端口号
ssh -p &lt;port_number&gt; username@server_ip_or_hostname

port_number # B服务器的端口号
username # B服务器的用户名称
server_ip_or_hostname # B服务器的访问IP或者代理主机名称
</code></pre>
<p>执行命令后，如果不需要输入密码就登录成功，说明<code>ssh</code>免密登录配置成功了。</p>
<h2 id="45设置权限">4.5、设置权限</h2>
<p>最后设置一下文件的访问权限，保障密钥数据安全。</p>
<pre><code class="language-sh"># 查看权限：
ls -ld ~/.ssh
ls -l ~/.ssh/authorized_keys

# 在B服务器中设置文件权限
chmod 700 ~/.ssh  # 只有目录拥有者可以访问、修改和进入 .ssh 目录，其他人无法访问，保障密钥安全。
chmod 600 ~/.ssh/authorized_keys # 只有文件拥有者可以读取和修改 authorized_keys 文件，其他人无法访问，防止公钥被窃取或篡改

# 在A服务器中远程操作B服务器进行权限设置
ssh username@server_ip_or_hostname 'chmod 700 ~/.ssh &amp;&amp; chmod 600 ~/.ssh/authorized_keys'
</code></pre>
<h1 id="5scp">5、SCP</h1>
<p>通过以上 <code>SSH</code> 配置已经实现了服务器免密登录，但是如果需要传输文件怎么办？答案就是可以使用SCP命令进行文件传输。</p>
<h2 id="51介绍">5.1、介绍</h2>
<p><code>SCP</code>（Secure Copy Protocol）是一个基于 SSH 协议的文件传输工具，用于在本地和远程系统之间或两个远程系统之间安全地复制文件。它可以加密文件传输过程，确保数据的机密性和完整性。<code>SCP</code> 在 Unix、Linux、macOS、Windows 等操作系统中都默认含有，使用 <code>SCP</code> 可以很方便的在各个服务器或者系统之间传输文件，是一种灵活、安全的文件传输工具，以下是<code>SCP</code>的特点：</p>
<ul>
<li><strong>加密传输</strong>：SCP 使用 SSH 协议进行加密，保证数据在传输过程中的安全性。</li>
<li><strong>简单易用</strong>：SCP 命令行工具非常直观，可以在一行命令中实现文件的上传和下载。</li>
<li><strong>跨平台</strong>：支持在不同操作系统（Linux、macOS、Windows 等）之间传输文件。</li>
</ul>
<h2 id="52下载安装">5.2、下载安装</h2>
<p>在大多数 Linux 和 macOS 系统上，<code>scp</code> 是 <code>openssh</code> 套件的一部分，通常默认安装。如果未安装，可以通过包管理器进行安装。</p>
<h1 id="6常用命令">6、常用命令</h1>
<p><code>scp</code> 命令的基本语法如下：</p>
<pre><code class="language-sh">scp [选项] [源文件路径] [目标路径]

# 远程服务器之间拷贝
scp [选项] [[用户@]源主机:]文件路径 [[用户@]目标主机:]文件路径
</code></pre>
<p><strong>从本地复制到远程主机</strong></p>
<pre><code class="language-sh"># scp 本地文件 用户名@远程IP:远程路径
scp ~\Desktop\fileDir.zip username@host-ip:/opt/app
# 将本地的 fileDir.zip 文件 拷贝到服务器的 /opt/app 目录下面

username # 服务器用户名
host-ip  # 服务器IP地址
</code></pre>
<p><strong>从远程主机复制到本地</strong></p>
<pre><code class="language-sh"># scp 用户名@远程IP:远程文件路径 本地路径
scp username@host-ip:/opt/app/prod-application.yml ~/Desktop/

# 将服务器上面的 prod-application.yml 文件拷贝到本地的 Desktop 目录中

username # 服务器用户名
host-ip  # 服务器IP地址
</code></pre>
<p><strong>从远程服务器复制文件到远程服务器</strong></p>
<pre><code class="language-sh"># scp 用户名@远程IP:远程文件路径 用户名2@远程IP2:远程文件路径
scp user1@remote_host1:/path/to/remote/file.txt user2@remote_host2:/path/to/remote/directory
# 将远程服务器 remote_host1 中的 file.txt 文件拷贝到远程服务器 remote_host2 的 directory 目录中

user1 # 源文件服务器用户名称
remote_host1 # 源文件服务器IP

user2 # 目标文件服务器用户名称
remote_host2 # 目标文件服务器IP
</code></pre>
<h1 id="7相关命令">7、相关命令</h1>
<p><strong>常用选项：</strong></p>
<ul>
<li><code>-r</code>：递归复制整个目录。</li>
<li><code>-P</code>：指定远程主机的 SSH 端口（注意是大写 P）。</li>
<li><code>-C</code>：启用压缩，提高传输速度（适合传输大文件）。</li>
<li><code>-i</code>：指定 SSH 私钥文件，进行身份验证。</li>
<li><code>-v</code>：启用详细模式，显示传输过程中的调试信息。</li>
</ul>
<p><strong>递归处理，复制整个目录：</strong></p>
<pre><code class="language-sh">scp -r user@remote_host:/path/on/remote/directory /path/to/local/
</code></pre>
<p><strong>指定端口：</strong></p>
<p>如果远程主机的 <code>SSH</code> 端口不是默认的 22，可以使用 <code>-P</code> 选项指定端口：</p>
<pre><code class="language-sh">scp -P 2222 user@remote_host:/path/on/remote/file.txt /path/to/local/
</code></pre>
<p><strong>指定私钥文件进行认证</strong></p>
<pre><code class="language-sh">scp -i /path/to/private_key /home/user/file.txt user@remote_host:/home/user/
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.6558032633796296" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-06-05 22:40">2025-06-05 22:40</span>&nbsp;
<a href="https://www.cnblogs.com/sowler">sowler</a>&nbsp;
阅读(<span id="post_view_count">172</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18913269);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18913269', targetLink: 'https://www.cnblogs.com/sowler/p/18913269', title: 'SSH实现服务器之间免密登录' })">举报</a>
</div>
        