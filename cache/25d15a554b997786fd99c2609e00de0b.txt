<!----> <meta itemprop="headline" content="2025 年，前端开发者不可不知的前端新特性"> <meta itemprop="keywords" content="前端"> <meta itemprop="datePublished" content="2025-02-06T08:32:43.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="小IT跨界说"> <meta itemprop="url" content="https://juejin.cn/user/1468603262840910"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-38a6c62f="">
            2025 年，前端开发者不可不知的前端新特性
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-38a6c62f=""><div class="author-info-box" data-v-38a6c62f=""><div class="author-name" data-v-38a6c62f=""><a href="/user/1468603262840910/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-38a6c62f=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    小IT跨界说
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-38a6c62f=""><time datetime="2025-02-06T08:32:43.000Z" title="Thu Feb 06 2025 08:32:43 GMT+0000 (Coordinated Universal Time)" class="time" data-v-38a6c62f="">
                    2025-02-06
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-38a6c62f=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-38a6c62f=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-38a6c62f=""></circle></svg> <span class="views-count" data-v-38a6c62f="">
                    8,059
                  </span> <span class="read-time" data-v-38a6c62f=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-38a6c62f=""><rect width="16" height="16" fill="none" data-v-38a6c62f=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-38a6c62f=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-38a6c62f=""></path></svg>
                    阅读13分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-38a6c62f=""></div> <!----> <!----></div> <!----> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-38a6c62f=""><div class="article-viewer markdown-body result"><p>在寻找最灵活的前端工作流程和工具包时，我们很容易忘记如今一些基础的网络技术已经变得多么强大。本文将带您领略新的前端特性及其功能。组件特定样式、基于子元素的父元素样式、相对颜色——网络平台正经历激动人心的时刻，许多过去需要JavaScript实现的功能，如今只需一行简单的HTML和CSS即可完成。</p>
<p>2025年了，现在是时候重新审视一些现代浏览器广泛支持的新技术了。让我们深入探索它们如何简化您的日常工作，并帮助您构建现代UI组件。</p>
<h2 data-id="heading-0">目录</h2>
<ul>
<li>
<p>锚点定位</p>
</li>
<li>
<p>自动字段大小调整</p>
</li>
<li>
<p>容器查询</p>
</li>
<li>
<p><code>&lt;dialog&gt;</code>元素</p>
</li>
<li>
<p>独占式手风琴</p>
</li>
<li>
<p><code>:focus-visible</code> 伪类</p>
</li>
<li>
<p><code>:has</code> 伪类</p>
</li>
<li>
<p><code>hidden=until-found</code>属性</p>
</li>
<li>
<p>高清晰度颜色</p>
</li>
<li>
<p><code>&lt;select&gt;</code>中的<code>&lt;hr&gt;</code>元素</p>
</li>
<li>
<p>inputmode属性</p>
</li>
<li>
<p>min(), max(), clamp()函数</p>
</li>
<li>
<p>相对颜色</p>
</li>
<li>
<p>响应式视频</p>
</li>
<li>
<p>滚动行为</p>
</li>
<li>
<p>滚动捕捉</p>
</li>
<li>
<p>text-wrap: balance属性</p>
</li>
<li>
<p>:user-valid 和:user-invalid 伪类</p>
</li>
<li>
<p>视图过渡API</p>
</li>
</ul>
<h2 data-id="heading-1">CSS容器查询和样式查询</h2>
<p>组件特定样式？对于任何开发者来说，这听起来像是一个梦想，正慢慢变为现实。感谢容器查询，我们现在可以查询组件所在容器的宽度和样式。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/04e6abc28e844165a51240b046c1f844~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCPSVTot6jnlYzor7Q=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745483102&amp;x-signature=hY72tbE7FIH9vLll4OrKbKqI05g%3D" alt="" loading="lazy"></p>
<p>样式查询为我们提供了CSS中样式的更多逻辑控制，这目前仅适用于CSS自定义属性值，但已经有一些实际用例显示出样式查询的优势：当您有一个具有多个变体的可重用组件，或者当您无法控制所有样式但需要在某些情况下应用更改时，它们特别有用。</p>
<p>如果您想深入了解容器样式查询的可能性以及我们未来可能期待的功能，可以参考以下文章学习：<br>
<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.chrome.com%2Fdocs%2Fcss-ui%2Fstyle-queries%3Fhl%3Dzh-cn" target="_blank" title="https://developer.chrome.com/docs/css-ui/style-queries?hl=zh-cn" ref="nofollow noopener noreferrer">developer.chrome.com/docs/css-ui…</a></p>
<h2 data-id="heading-2">不再有排版孤行和寡行</h2>
<p>我们都知道那些标题，最后一个单词换行并单独站在新行上，破坏了视觉效果，看起来很奇怪。当然，有老式的
手动换行或<span>将内容分成不同部分。但您听说过<code>text-wrap: balance</code>吗？
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a959e84d26744c568293585a3949bf0f~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCPSVTot6jnlYzor7Q=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745483102&amp;x-signature=K%2F1eQud6tUXX0xRXdBuDRRN8orU%3D" alt="" loading="lazy"></span></p>
<p>通过应用<code>text-wrap: balance</code>属性，浏览器将自动计算单词数并将它们平均分配到两行——非常适合页面标题、卡片标题、工具提示、模态框和FAQ等。</p>
<p>在处理大段文本（如段落）时，您可能需要查看<code>text-wrap: pretty</code>以防止最后一行出现孤行。</p>
<p>参考文章：<br>
<a href="https://link.juejin.cn?target=https%3A%2F%2Fblog.csdn.net%2Fqq_37247349%2Farticle%2Fdetails%2F130213804" target="_blank" title="https://blog.csdn.net/qq_37247349/article/details/130213804" ref="nofollow noopener noreferrer">blog.csdn.net/qq_37247349…</a></p>
<h2 data-id="heading-3">表单的自动字段大小调整</h2>
<p>为输入字段找到合适的大小通常涉及大量猜测——或使用JavaScript——来计算字符数并随着用户输入文本增加字段的高度或宽度。CSS field-sizing旨在改变这一点。通过<code>field-sizing</code>，我们可以自动增长输入和文本区域，也可以自动缩小短选择菜单，使表单始终完美适应内容大小。我们只需要一行CSS即可实现。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/992f5f4f8c294454887b7203e1c3d36c~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCPSVTot6jnlYzor7Q=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745483102&amp;x-signature=eGg%2BuzMgKz5rDmyEX9ywtE%2F%2FmDE%3D" alt="" loading="lazy"></p>
<p>以下文章总结了您需要了解的有关<code>field-sizing</code>的所有内容，详细探讨了<code>field-sizing</code>如何影响不同的<code>&lt;form&gt;</code>元素。为了防止您的输入字段变得太小或太大，插入一些额外的样式以保持它们的形状也是一个好主意。同时分享了一个您可以立即复制粘贴的代码片段。</p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.chrome.com%2Fdocs%2Fcss-ui%2Fcss-field-sizing%3Fhl%3Dzh-cn" target="_blank" title="https://developer.chrome.com/docs/css-ui/css-field-sizing?hl=zh-cn" ref="nofollow noopener noreferrer">developer.chrome.com/docs/css-ui…</a></p>
<h2 data-id="heading-4">使隐藏内容可搜索</h2>
<p>手风琴是一种流行的UI模式，但它们有一个缺点：折叠部分内的内容无法通过页面内搜索进行搜索。通过使用<code>hidden=until-found</code>属性和<code>beforematch</code>事件，我们可以解决这个问题，甚至使内容对搜索引擎可访问。
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f6eebb9a50104104a1c94b863a7b8883~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCPSVTot6jnlYzor7Q=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745483102&amp;x-signature=HtsZ2tb%2FkWWn1S4b%2FsM36u42OIo%3D" alt="" loading="lazy"></p>
<p>正如文章&lt;<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.chrome.com%2Fdocs%2Fcss-ui%2Fhidden-until-found%3Fhl%3Dzh-cn" target="_blank" title="https://developer.chrome.com/docs/css-ui/hidden-until-found?hl=zh-cn" ref="nofollow noopener noreferrer">developer.chrome.com/docs/css-ui…</a> 中介绍，在他的使折叠内容可搜索指南中解释的那样，您可以用<code>hidden=until-found</code>属性替换隐藏部分的样式。如果您的页面还有另一个状态需要与您的部分是否显示保持同步，他建议添加一个<code>beforematch</code>事件监听器。它将在浏览器显示<code>hidden=until-found</code>元素之前触发。&gt;</p>
<h2 data-id="heading-5">在<code>&lt;select&gt;</code>菜单中样式化组</h2>
<p>这是<code>&lt;select&gt;</code>元素的一个小升级，但非常强大：我们现在可以在选择选项列表中添加<code>&lt;hr&gt;</code>，它们将显示为分隔符，以帮助视觉上分解列表中的选项。
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/0a07086264e64ee1882206b9b799ba51~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCPSVTot6jnlYzor7Q=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745483102&amp;x-signature=tCopYSD7MmzATelk8zFrLlS26Rc%3D" alt="" loading="lazy"></p>
<p>如果您想进一步细化，请务必查看<code>&lt;optgroup&gt;</code>。HTML元素允许您通过为每个组添加子标题来在<code>&lt;select&gt;</code>元素内分组选项。</p>
<h2 data-id="heading-6">简化可滚动容器的捕捉</h2>
<p>有时，您需要一种快速简便的方法来使元素成为可滚动容器。<code>CSS scroll snap</code>使之成为可能。CSS功能使我们能够创建一种良好控制的滚动体验，让用户可以精确地左右滑动并捕捉到容器中的特定项目。无需JavaScript。
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/6a0a8ff5af6541a19936304733031163~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCPSVTot6jnlYzor7Q=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745483102&amp;x-signature=v4%2F4u55g9Q99AGHHIfkXqKXTflg%3D" alt="" loading="lazy"></p>
<p>以下该文章（中译），逐步引导您设置带有<code>scroll snap</code>的容器。您可以使用它来创建图像库、头像列表或其他组件，在这些组件中，您希望用户滚动并捕捉内容，无论是水平还是垂直。
<a href="https://juejin.cn/post/6844904102900563981" target="_blank" title="https://juejin.cn/post/6844904102900563981">juejin.cn/post/684490…</a></p>
<h2 data-id="heading-7">工具提示和弹出框的锚点定位</h2>
<p>无论您将其用于脚注、工具提示、连接线、视觉交叉引用还是图表中的动态标签，CSS锚点定位API使我们能够相对于其他元素（称为锚点）本地定位元素。
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/6b887ede833e49cc8c5f9f8ca4c718f9~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCPSVTot6jnlYzor7Q=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745483102&amp;x-signature=HwlCxbW%2Buh6woFW5XAvJIBc%2B0u4%3D" alt="" loading="lazy"></p>
<p>文章（&lt;<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.chrome.com%2Fblog%2Fanchor-positioning-api%3Fhl%3Dzh-cn%25EF%25BC%2589" target="_blank" title="https://developer.chrome.com/blog/anchor-positioning-api?hl=zh-cn%EF%BC%89" ref="nofollow noopener noreferrer">developer.chrome.com/blog/anchor…</a> 在CSS锚点定位API介绍中详细总结了锚点定位的工作原理。深入探讨了锚点定位背后的机制，如何与一个和多个锚点绑定，以及如何根据锚点的大小调整和定位锚点定位元素。浏览器支持仍然有限，因此您可能希望在使用API时采取一些预防措施。&gt;</p>
<h2 data-id="heading-8">使用OKLCH和OKLAB的高清晰度颜色</h2>
<p>随着高清晰度颜色的出现，RGB/HSL的时代可能很快就会结束。为了让您熟悉新的颜色空间。
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/883b68b78c3c4285aae8dcc69d700e84~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCPSVTot6jnlYzor7Q=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745483102&amp;x-signature=YwyudgmasVyAm3Jxc9JjMkDQEzk%3D" alt="" loading="lazy"></p>
<p>OKLCH和OKLAB都基于人类感知，可以指定人眼可见的任何颜色。虽然OKLAB最适合丰富的渐变，但OKLCH非常适合设计系统中的调色板。OKLCH/OKLAB颜色在Chrome、Edge、Safari、Firefox和Opera中得到完全支持。Figma尚不支持它们。
参考文章：
<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAccessibility%2FUnderstanding_Colors_and_Luminance" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/Accessibility/Understanding_Colors_and_Luminance" ref="nofollow noopener noreferrer">developer.mozilla.org/zh-CN/docs/…</a></p>
<h2 data-id="heading-9">CSS中的相对颜色</h2>
<p>假设您有一个背景颜色，并希望将其亮度降低25%，或者您想使用互补色而不必自己计算。相对颜色语法（<code>RCS</code>）使得基于给定颜色创建新颜色成为可能。
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/3a7fdd2421264f8c99d039d178412d75~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCPSVTot6jnlYzor7Q=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745483102&amp;x-signature=oXsjQmvpM4cstWezbG7NGsybbuM%3D" alt="" loading="lazy"></p>
<p>为了派生和计算新颜色，我们可以使用from关键字用于颜色函数（<code>color()、hsl()、oklch()等</code>）来修改输入颜色的值。Adam Argyle文章分享了一些代码片段，展示了这在实践中的样子，或查看规范以获取更多详细信息。
<a href="https://link.juejin.cn?target=https%3A%2F%2Fsmashing-freiburg-2024.netlify.app%2F24-relative-color%2F" target="_blank" title="https://smashing-freiburg-2024.netlify.app/24-relative-color/" ref="nofollow noopener noreferrer">smashing-freiburg-2024.netlify.app/24-relative…</a></p>
<h2 data-id="heading-10">使用视图过渡API实现平滑过渡</h2>
<p>在许多用例中，平滑的视觉过渡可以使用户体验更加引人入胜。例如，当产品列表页面上的缩略图过渡到产品详情页面上的全尺寸图像时，或者当您有一个固定的导航栏在页面之间导航时保持原位。视图过渡API帮助我们创建网站不同视图之间的无缝视觉过渡。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/e5eaca325fcb49eb952152ab294ec9dc~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCPSVTot6jnlYzor7Q=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745483102&amp;x-signature=o2YutrCnQCsWTGCa3X%2BTpeNjrb4%3D" alt="" loading="lazy"></p>
<p>视图过渡不仅可以在单个文档上触发，还可以在两个不同文档之间触发。两者都依赖于相同的原则：浏览器拍摄旧状态和新状态的快照，在抑制渲染的同时更新DOM，并通过CSS动画驱动过渡。唯一的区别在于如何触发它们，正如Bramus Van Damme在他的视图过渡API指南中解释的那样。这是单页应用程序的一个很好的替代方案，单页应用程序通常依赖于繁重的JavaScript框架。
<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.chrome.com%2Fdocs%2Fweb-platform%2Fview-transitions%3Fhl%3Dzh-cn" target="_blank" title="https://developer.chrome.com/docs/web-platform/view-transitions?hl=zh-cn" ref="nofollow noopener noreferrer">developer.chrome.com/docs/web-pl…</a></p>
<h2 data-id="heading-11">独占式手风琴</h2>
<p>“独占式手风琴”是手风琴组件的一个变体。它只允许同时打开一个披露小部件，因此当用户打开一个新的时，已经打开的将自动关闭以节省空间。感谢CSS，我们现在可以无需一行JavaScript即可创建效果。
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/786bf424397b4090b179cbb8f92fca3f~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCPSVTot6jnlYzor7Q=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745483102&amp;x-signature=vlUHQvk614bazsmSZIYYtwUmwoM%3D" alt="" loading="lazy"></p>
<p>要构建独占式手风琴，我们需要向<code>&lt;details&gt;</code>元素添加<code>name</code>属性。当使用此属性时，所有具有相同name值的<code>&lt;details&gt;</code>元素形成一个语义组，并表现为独占式手风琴。Bramus Van Damme详细总结了它的工作原理。<br>
<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.chrome.com%2Fdocs%2Fcss-ui%2Fexclusive-accordion%3Fhl%3Dzh-cn" target="_blank" title="https://developer.chrome.com/docs/css-ui/exclusive-accordion?hl=zh-cn" ref="nofollow noopener noreferrer">developer.chrome.com/docs/css-ui…</a></p>
<h2 data-id="heading-12">实时和延迟验证</h2>
<p>当我们使用<code>:valid</code> 和<code>:invalid</code> 根据用户输入应用样式时，有一个缺点：一个必填且为空的表单控件将匹配<code>:invalid</code> 即使用户尚未开始与之交互。为了防止这种情况发生，我们通常必须编写有状态代码来跟踪用户更改的输入。但现在不再需要了。
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/76b7faa3005940c3b72ee3eea94e0eda~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCPSVTot6jnlYzor7Q=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745483102&amp;x-signature=Mowcqs76wZj%2F5it2y%2BjOnQV5EEg%3D" alt="" loading="lazy"></p>
<p>通过<code>:user-valid</code> 和<code>:user-invalid</code> ，我们现在有一个本地CSS解决方案，可以自动处理所有这些。与<code>:valid </code>和<code>:invalid</code> 相反，<code>:user-valid</code> 和<code>:user-invalid</code> 伪类仅在用户更改输入后提供有关错误的反馈。<code>:user-valid</code> 和<code>:user-invalid</code> 适用于<code>input</code>、<code>select</code>和<code>textarea</code>控件。<br>
<a href="https://link.juejin.cn?target=https%3A%2F%2Fweb.dev%2Farticles%2Fuser-valid-and-user-invalid-pseudo-classes%3Fhl%3Dzh-cn" target="_blank" title="https://web.dev/articles/user-valid-and-user-invalid-pseudo-classes?hl=zh-cn" ref="nofollow noopener noreferrer">web.dev/articles/us…</a></p>
<h2 data-id="heading-13">平滑滚动行为</h2>
<p>想象一下，您有一个滚动框和一系列链接，这些链接指向框内的锚定位置。当用户点击其中一个链接时，它将带他们到滚动框内的内容部分——但会有一个相当突然的跳跃。<code>scroll-behavior</code>属性使滚动过渡更加平滑，仅使用CSS。
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/bc9ad2ee88204d5797bceba29c769910~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCPSVTot6jnlYzor7Q=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745483102&amp;x-signature=uMP0Qkk%2BLcGmZQF6G6%2BCkQyH9lQ%3D" alt="" loading="lazy"></p>
<p>当将<code>scroll-behavior</code>值设置为<code>smooth</code>时，滚动框将以平滑的方式滚动，使用用户代理定义的缓动函数在用户代理定义的时间段内滚动。当然，您也可以使用<code>scroll-behavior: auto</code>，滚动框将立即滚动。</p>
<h2 data-id="heading-14">使焦点可见</h2>
<p>焦点样式对于帮助键盘用户导航页面至关重要。然而，对于鼠标用户来说，当焦点环在点击按钮或链接时出现时，可能会感到恼火。<code>:focus-visible</code> 在这里帮助我们为两个用户群体创造最佳体验：它为键盘用户显示焦点样式，并为鼠标用户隐藏它们。<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/1c8b69eb526347108b852cd27d582223~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCPSVTot6jnlYzor7Q=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745483102&amp;x-signature=tvaP%2FNeLBG51LgMi5YyeOMQDh9A%3D" alt="" loading="lazy"></p>
<p><code>:focus-visible</code> 在元素匹配<code>:focus</code> 伪类且用户代理通过启发式方法确定应在元素上显示焦点时应用。好奇它在实践中如何工作？MDN Web Docs强调了<code>:focus </code>和<code>:focus-visible</code> 之间的区别，您需要考虑的可访问性方面，以及如何为不支持<code>:focus-visible</code> 的旧浏览器版本提供回退。</p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FCSS%2F%3Afocus-visible" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus-visible" ref="nofollow noopener noreferrer">developer.mozilla.org/zh-CN/docs/…</a></p>
<h2 data-id="heading-15">基于子元素的父元素样式</h2>
<p>历史上，CSS选择器以自上而下的方式工作，允许我们根据父元素样式化子元素。新的CSS伪类<code>:has</code> 则相反：我们现在可以根据子元素样式化父元素。但这还不是全部。这篇（&lt;<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.joshwcomeau.com%2Fcss%2Fhas%2F%25EF%25BC%2589" target="_blank" title="https://www.joshwcomeau.com/css/has/%EF%BC%89" ref="nofollow noopener noreferrer">www.joshwcomeau.com/css/has/）</a> 关于<code>:has</code>&gt; 的精彩介绍，探讨了显示伪类功能的实际用例。
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/99b55d4e0f4a4ddba3fb702086d0dfbd~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCPSVTot6jnlYzor7Q=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745483102&amp;x-signature=XxH1cDmyGi7zSasrCrgvD2F4BHs%3D" alt="" loading="lazy"></p>
<p><code>:has </code>不仅限于父子关系或直接兄弟关系。相反，它让我们可以根据完全不同的容器中任何其他元素的属性或状态样式化一个元素。正如文章所示，它可以用作一种全局事件监听器——例如，在模态框打开时禁用页面滚动，或创建无JavaScript的暗模式切换。</p>
<h2 data-id="heading-16">在类型和间距之间插值</h2>
<p>CSS比较函数<code>min()</code>、<code>max()</code>和<code>clamp()</code>如今在所有主要浏览器中都得到支持，为我们提供了一种有效的方法来创建具有流体类型比例、网格和间距系统的动态布局。
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/7aa9bce42cb94901944823b84a997c52~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCPSVTot6jnlYzor7Q=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745483102&amp;x-signature=YmIUnwn%2FkHtMtYahLCZ8tbBMXg0%3D" alt="" loading="lazy"></p>
<p>为了让您立即在项目中使用这些函数，这里有篇综合指南（&lt;<a href="https://link.juejin.cn?target=https%3A%2F%2Fishadeed.com%2Farticle%2Fcss-min-max-clamp%2F%25EF%25BC%2589%25EF%25BC%258C" target="_blank" title="https://ishadeed.com/article/css-min-max-clamp/%EF%BC%89%EF%BC%8C" ref="nofollow noopener noreferrer">ishadeed.com/article/css…</a> 解释了您需要了解的有关<code>min()、max()和clamp()</code>的所有内容，包括实际示例和用例，以及您可能遇到的所有混淆点。&gt;</p>
<p>如果您正在寻找一种快速简便的方法来创建流体比例，Utopia的流体类型比例计算器（&lt;<a href="https://link.juejin.cn?target=https%3A%2F%2Futopia.fyi%2Ftype%2Fcalculator%2F%25EF%25BC%2589" target="_blank" title="https://utopia.fyi/type/calculator/%EF%BC%89" ref="nofollow noopener noreferrer">utopia.fyi/type/calcul…</a> 可以满足您的需求。您只需要定义最小和最大视口宽度以及比例步数，计算器将为您提供比例的响应式预览和CSS代码片段。&gt;</p>
<h2 data-id="heading-17">可靠的对话框和弹出框</h2>
<p>如果您正在寻找一种快速创建模态框或弹出窗口的方法，<code>&lt;dialog&gt;</code> HTML元素最终提供了一个本地（且可访问的！）解决方案来帮助您完成任务。它表示一个模态或非模态对话框或其他交互组件，例如确认提示或用于输入数据的子窗口。
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/9f238b6f34e848588b77649fb52e0d96~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCPSVTot6jnlYzor7Q=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745483102&amp;x-signature=QX693L86odCaIG7h7CyaNs1mGr4%3D" alt="" loading="lazy"></p>
<p>虽然模态对话框中断与页面的交互，但非模态对话框允许在对话框打开时与页面交互。Adam Argyle发布了一些代码片段(<a href="https://link.juejin.cn?target=https%3A%2F%2Fsmashing-freiburg-2024.netlify.app%2F27-dialog%2F)%25EF%25BC%258C%25E5%25B1%2595%25E7%25A4%25BA%25E4%25BA%2586%2560" target="_blank" title="https://smashing-freiburg-2024.netlify.app/27-dialog/)%EF%BC%8C%E5%B1%95%E7%A4%BA%E4%BA%86%60" ref="nofollow noopener noreferrer">smashing-freiburg-2024.netlify.app/27-dialog/)…</a></p>`如何开箱即用地阻止弹出窗口和非阻塞菜单的弹出框。<p></p>
<h2 data-id="heading-18">响应式HTML视频和音频</h2>
<p>2014年，HTML视频源的媒体属性支持从HTML标准中删除。去年，它又回来了，这意味着我们可以使用媒体查询来提供响应式HTML视频。
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ba695e8a18114a1a9ec1c6cea604f2ff~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCPSVTot6jnlYzor7Q=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745483102&amp;x-signature=HIlGb5LXgGuNm2%2BjJaUsFsygNtk%3D" alt="" loading="lazy"></p>
<p>这篇文章（&lt;<a href="https://link.juejin.cn?target=https%3A%2F%2Fscottjehl.com%2Fposts%2Fusing-responsive-video%2F%25EF%25BC%2589" target="_blank" title="https://scottjehl.com/posts/using-responsive-video/%EF%BC%89" ref="nofollow noopener noreferrer">scottjehl.com/posts/using…</a> 总结了响应式HTML视频——甚至音频——的工作原理，编写标记时需要考虑的事项，以及可以与HTML视频结合使用的其他类型的媒体查询。&gt;</p>
<h2 data-id="heading-19">移动设备上的正确虚拟键盘</h2>
<p>这是一个小细节，但有助于考虑周全的用户体验：显示最舒适的触摸屏键盘，帮助用户输入信息，而无需来回切换以插入数字、标点符号或特殊字符（如@符号）。
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/7849044b74b94eb2bf9ed27585f39a23~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCPSVTot6jnlYzor7Q=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745483102&amp;x-signature=gB%2FMMGqA7kw6Lz1tXF1nw1YV46w%3D" alt="" loading="lazy"></p>
<p>为了显示正确的键盘布局，我们可以使用<code>inputmode</code>(&lt;<a href="https://link.juejin.cn?target=https%3A%2F%2Fcss-tricks.com%2Feverything-you-ever-wanted-to-know-about-inputmode%2F)%25E3%2580%2582" target="_blank" title="https://css-tricks.com/everything-you-ever-wanted-to-know-about-inputmode/)%E3%80%82" ref="nofollow noopener noreferrer">css-tricks.com/everything-…</a> 它指示浏览器显示哪个键盘，并支持数字、电话、十进制、电子邮件、URL和搜索键盘的值。为了进一步改善用户体验，我们可以添加<code>enterkeyhint</code>属性：它调整Enter键上的文本。如果未使用<code>enterkeyhint</code>，用户代理可能会使用<code>inputmode</code>属性的上下文信息。&gt;</p>
<h2 data-id="heading-20">总结</h2>
<p>当我们开始在项目中采用所有这些闪亮的新前端功能时，网络平台当然在不断演变——已经有一些令人兴奋的事情在酝酿中！例如，我们即将获得砌体布局、完全可定制的<code>&lt;selectmenu&gt;</code>下拉菜单以及用于调整字体以完美对齐网格的文本框修剪。向所有不懈努力推动网络发展的人们致敬！👏</p>
<h2 data-id="heading-21">展望2025</h2>
<p>刚刚开工，一年的轮回又开始，2025年注定也是充满挑战与变数的一年，作为平凡打工人，仍需抱以平常心积极乐观去面对，如同哪吒电影的一句金句“真正的英雄，不是没有软肋，而是敢于直面软肋”，逃避没用只能直面，同时大家也要保持健康生活方式（合理饮食、充足睡眠、适度运动），学会放松与享受（多巴胺充电、接触大自然），工作是场长跑，只有健康才能持久，自己新的一年也会多多阅读学习，分享技术文章，挖掘副业，增加收入。欢迎关注我！祝大家开工大吉，蛇年大赚！</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/07ad82c3e5d94d58919f12b2ad3be8c8~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bCPSVTot6jnlYzor7Q=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745483102&amp;x-signature=ATNVDCktvZ23qJo%2Fy79upNy6La0%3D" alt="" loading="lazy"></p></div></div>