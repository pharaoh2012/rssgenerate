
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Rong-/p/18749517" title="发布于 2025-03-03 22:16">
    <span role="heading" aria-level="2">ZLMediaKit: 快速入门</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p></p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#zlmediakit是什么" rel="noopener nofollow">ZLMediaKit是什么</a></li><li><a href="#编译" rel="noopener nofollow">编译</a><ul><li><a href="#安装依赖库" rel="noopener nofollow">安装依赖库</a></li><li><a href="#构建项目" rel="noopener nofollow"><strong>构建项目</strong></a><ul><li><a href="#问题处理" rel="noopener nofollow">问题处理</a><ul><li><a href="#问题1-srtp-未找到-webrtc-相关功能打开失败" rel="noopener nofollow">问题1： srtp 未找到, WebRTC 相关功能打开失败</a></li><li><a href="#问题2依赖库问题" rel="noopener nofollow">问题2：依赖库问题</a></li></ul></li></ul></li></ul></li><li><a href="#安装" rel="noopener nofollow">安装</a></li><li><a href="#配置和运行" rel="noopener nofollow">配置和运行</a><ul><li><a href="#问题处理-1" rel="noopener nofollow">问题处理</a><ul><li><ul><li><a href="#问题1-无权限监听554端口" rel="noopener nofollow">问题1： 无权限监听554端口</a></li><li><a href="#问题2-80端口已经被使用" rel="noopener nofollow">问题2： 80端口已经被使用</a></li></ul></li></ul></li></ul></li><li><a href="#推流测试" rel="noopener nofollow">推流测试</a><ul><li><a href="#rtsp推流" rel="noopener nofollow">RTSP推流</a><ul><li><a href="#准备" rel="noopener nofollow">准备</a><ul><li><a href="#准备视频文件" rel="noopener nofollow">准备视频文件</a></li><li><a href="#安装vlc" rel="noopener nofollow">安装VLC</a></li></ul></li><li><a href="#推流" rel="noopener nofollow">推流</a></li><li><a href="#拉流验证" rel="noopener nofollow">拉流验证</a><ul><li><a href="#问题拉流失败" rel="noopener nofollow">问题：拉流失败</a></li></ul></li><li><a href="#zlmediakit-在-rtsp-推流测试中的作用" rel="noopener nofollow">ZLMediaKit 在 RTSP 推流测试中的作用</a><ul><li><a href="#接收推流数据" rel="noopener nofollow">接收推流数据</a></li><li><a href="#协议处理" rel="noopener nofollow">协议处理</a></li><li><a href="#流管理" rel="noopener nofollow">流管理</a></li><li><a href="#存储和转发" rel="noopener nofollow">存储和转发</a></li></ul></li><li><a href="#流的流转过程" rel="noopener nofollow">流的流转过程</a><ul><li><a href="#推流阶段" rel="noopener nofollow">推流阶段</a></li><li><a href="#拉流阶段" rel="noopener nofollow">拉流阶段</a></li></ul></li></ul></li></ul></li></ul></div><p></p>
<h1 id="zlmediakit是什么">ZLMediaKit是什么</h1>
<p>ZLMediaKit一个基于C++11的高性能运营级流媒体服务框架，支持多种协议，支持协议互转，打通了视频监控协议栈与直播协议栈， 支持集群、按需转协议、按需推拉流、先播后推、断连续推等功能，支持多轨道模式(一个流中多个视频/音频)。<br>
它的Gitee地址：<a href="https://gitee.com/xia-chu/ZLMediaKit" target="_blank" rel="noopener nofollow">https://gitee.com/xia-chu/ZLMediaKit</a></p>
<h1 id="编译">编译</h1>
<p>拉取ZLMediaKit。</p>
<pre><code class="language-bash">git clone git@gitee.com:xia-chu/ZLMediaKit.git
</code></pre>
<h2 id="安装依赖库">安装依赖库</h2>
<ul>
<li><strong>安装FFmpeg</strong>：用于处理多媒体数据，Ubuntu下执行<code>sudo apt-get install ffmpeg</code>。</li>
</ul>
<h2 id="构建项目"><strong>构建项目</strong></h2>
<p>在ZLMediaKit目录下创建build目录并进入，执行<code>cmake..</code>，然后执行<code>make -j4</code>进行编译。</p>
<pre><code class="language-bash">cd ZLMediaKit
mkdir build
cd build
cmake ..
make -j4
</code></pre>
<h3 id="问题处理">问题处理</h3>
<h4 id="问题1-srtp-未找到-webrtc-相关功能打开失败">问题1： srtp 未找到, WebRTC 相关功能打开失败</h4>
<p>cmake时遇到下面的错误<br>
错误1：</p>
<pre><code class="language-bash">-- srt 功能已开启
CMake Warning at webrtc/CMakeLists.txt:28 (message):
srtp 未找到, WebRTC 相关功能打开失败
</code></pre>
<p>解决方法：安装 SRTP 库</p>
<pre><code class="language-bash">sudo apt-get install libsrtp2-dev
</code></pre>
<h4 id="问题2依赖库问题">问题2：依赖库问题</h4>
<pre><code class="language-bash">-- Configuring done (2.7s)
CMake Error at 3rdpart/CMakeLists.txt:32 (add_library):
No SOURCES given to target: jsoncpp


CMake Error at 3rdpart/CMakeLists.txt:55 (add_library):
No SOURCES given to target: mov


CMake Error at 3rdpart/CMakeLists.txt:68 (add_library):
No SOURCES given to target: flv


CMake Error at 3rdpart/CMakeLists.txt:91 (add_library):
No SOURCES given to target: mpeg


CMake Error at 3rdpart/CMakeLists.txt:201 (add_library):
No SOURCES given to target: zltoolkit
</code></pre>
<p>ZLMediaKit 项目里有一些依赖库是通过 Git 子模块来管理的。你需要保证所有子模块都已正确初始化并且更新。在项目根目录下执行以下命令：</p>
<pre><code class="language-bash">git submodule update --init --recursive
</code></pre>
<h1 id="安装">安装</h1>
<p>如果需要安装到系统中，执行<code>sudo make install</code>。</p>
<h1 id="配置和运行">配置和运行</h1>
<ul>
<li><strong>修改配置文件</strong>：配置文件位于conf目录下，可按需修改。如修改<code>config.ini</code>中的<code>apiDebug</code>等参数。</li>
<li><strong>启动ZLMediaKit</strong>：在<code>ZLMediaKit/release/linux/Debug</code>目录下，可执行<code>./MediaServer -h</code>查看启动参数，</li>
</ul>
<pre><code class="language-bash">./MediaServer -h
2025-03-03 21:15:10.198 I [MediaServer] [5747-MediaServer] Factory.cpp:35 registerPlugin | Load codec: H264
2025-03-03 21:15:10.219 I [MediaServer] [5747-MediaServer] Factory.cpp:35 registerPlugin | Load codec: H265
2025-03-03 21:15:10.223 I [MediaServer] [5747-MediaServer] Factory.cpp:35 registerPlugin | Load codec: JPEG
2025-03-03 21:15:10.228 I [MediaServer] [5747-MediaServer] Factory.cpp:35 registerPlugin | Load codec: mpeg4-generic
2025-03-03 21:15:10.228 I [MediaServer] [5747-MediaServer] Factory.cpp:35 registerPlugin | Load codec: opus
2025-03-03 21:15:10.228 I [MediaServer] [5747-MediaServer] Factory.cpp:35 registerPlugin | Load codec: PCMA
2025-03-03 21:15:10.228 I [MediaServer] [5747-MediaServer] Factory.cpp:35 registerPlugin | Load codec: PCMU
2025-03-03 21:15:10.228 I [MediaServer] [5747-MediaServer] Factory.cpp:35 registerPlugin | Load codec: L16
2025-03-03 21:15:10.236 I [MediaServer] [5747-MediaServer] Factory.cpp:35 registerPlugin | Load codec: MP3
-h --help 无参 默认:null 选填 打印此信息
-d --daemon 无参 默认:null 选填 是否以Daemon方式启动
-l --level 有参 默认:1 选填 日志等级,LTrace~LError(0~4)
-m --max_day 有参 默认:7 选填 日志最多保 存天数
-c --config 有参 默认:/mnt/d/ubunt/xmr/program/cpp/ZLMediaKit/release/linux/Debug/config.ini 选填 配置文件路 径
-s --ssl 有参 默认:/mnt/d/ubunt/xmr/program/cpp/ZLMediaKit/release/linux/Debug/default.pem 选填 ssl证书文件或文件夹,支持p12/pem类型
-t --threads 有参 默认:16 选填 启动事件触 发线程数
--affinity 有参 默认:1 选填 是否启动cpu亲和性设置
-v --version 无参 默认:null 选填 显示版本号
--log-slice 有参 默认:100 选填 最大保存日 志切片个数
--log-size 有参 默认:256 选填 单个日志切 片最大容量,单位MB
--log-dir 有参 默认:/mnt/d/ubunt/xmr/program/cpp/ZLMediaKit/release/linux/Debug/log/ 选填 日志保存文 件夹路径

2025-03-03 21:15:10.441 I [MediaServer] [5747-MediaServer] logger.cpp:91 ~Logger |
</code></pre>
<p>或<code>./MediaServer -d &amp;</code>以守护进程模式启动。</p>
<pre><code class="language-bash">sudo ./MediaServer -d &amp;
</code></pre>
<h2 id="问题处理-1">问题处理</h2>
<h4 id="问题1-无权限监听554端口">问题1： 无权限监听554端口</h4>
<p>启动./MediaServer -d时显示无权限监听554端口</p>
<pre><code class="language-bash">2025-03-03 21:41:18.193 W [MediaServer] [5879-MediaServer] sockutil.cpp:433 bind_sock6 | Bind socket failed: permission denied
2025-03-03 21:41:18.227 E [MediaServer] [5879-MediaServer] main.cpp:448 start_main | Start server failed: Listen on :: 554 failed: permission denied
2025-03-03 21:41:19.241 W [MediaServer] [5876-MediaServer] System.cpp:153 operator() | 收到主动退出信号,关闭父进程与子进程
2025-03-03 21:41:19.249 I [MediaServer] [5876-MediaServer] logger.cpp:91 ~Logger |
</code></pre>
<p>使用sudo执行。</p>
<h4 id="问题2-80端口已经被使用">问题2： 80端口已经被使用</h4>
<pre><code class="language-bash">2025-03-03 21:41:28.908 W [MediaServer] [5906-MediaServer] sockutil.cpp:433 bind_sock6 | Bind socket failed: address already in use
2025-03-03 21:41:28.967 E [MediaServer] [5906-MediaServer] main.cpp:448 start_main | Start server failed: Listen on :: 80 failed: address already in use
2025-03-03 21:41:29.973 W [MediaServer] [5903-MediaServer] System.cpp:153 operator() | 收到主动退出信号,关闭父进程与子进程
2025-03-03 21:41:29.985 I [MediaServer] [5903-MediaServer] logger.cpp:91 ~Logger |
</code></pre>
<ul>
<li>处理<br>
80端口被占用，是因为MediaServer处理http时，使用80端口，我采用不处理http的解决方式。<br>
打开MediaServer的connf.ini(和MediaServer在同一个目录下)， 关闭http功能。<br>
将http下的port由80修改为-1</li>
</ul>
<pre><code class="language-bash">[http]
port=-1
</code></pre>
<p>重新启动MediaServer，查看是否启动成功（554是否监听）</p>
<pre><code class="language-bash">sudo ./MediaServer -d &amp;
netstat -ant | grep 554
tcp6 0 0 :::554 :::* LISTEN
</code></pre>
<h1 id="推流测试">推流测试</h1>
<h2 id="rtsp推流">RTSP推流</h2>
<h3 id="准备">准备</h3>
<h4 id="准备视频文件">准备视频文件</h4>
<p>找一段mp4视频，放到特定目录下，例如：/path/to/test.mp4， 稍后使用ffmpeg将视频推送的ZLMediaKit</p>
<h4 id="安装vlc">安装VLC</h4>
<p>安装VL用来拉取ZLMediaKit转发的数据流</p>
<h3 id="推流">推流</h3>
<p>执行下面的推流命令，将test.mp4推送到 rtsp://127.0.0.1/live/test</p>
<pre><code class="language-bash">ffmpeg -re -i "/path/to/test.mp4" -vcodec h264 -acodec aac -f rtsp -rtsp_transport tcp rtsp://127.0.0.1/live/test
</code></pre>
<ul>
<li><code>-re</code>：以本地帧率读取输入文件，模拟实时流。</li>
<li><code>-i "/path/to/test.mp4"</code>：指定输入的视频文件路径。</li>
<li><code>-vcodec h264</code>：设置视频编码格式为 H.264。</li>
<li><code>-acodec aac</code>：设置音频编码格式为 AAC。</li>
<li><code>-f rtsp</code>：指定输出格式为 RTSP。</li>
<li><code>-rtsp_transport tcp</code>：使用 TCP 作为 RTSP 传输协议。</li>
<li><code>rtsp://127.0.0.1/live/test</code>：推流的目标地址，<code>127.0.0.1</code> 是 ZLMediaKit 服务器的 IP 地址，<code>live</code> 是应用名，<code>test</code> 是流名称。</li>
</ul>
<ul>
<li>建议添加 -stream_loop -1参数，实现循环推流，否则，如果test.mp4比较小，很快会推流结束</li>
</ul>
<pre><code class="language-bash">ffmpeg -stream_loop -1 -re -i "/path/to/test.mp4" -vcodec h264 -acodec aac -f rtsp -rtsp_transport tcp rtsp://127.0.0.1/live/test
</code></pre>
<h3 id="拉流验证">拉流验证</h3>
<p>使用 VLC 等播放器进行拉流验证。在 VLC 中选择“媒体” -&gt; “打开网络串流”，输入推流地址 <code>rtsp://127.0.0.1/live/test</code> 即可观看视频。</p>
<h4 id="问题拉流失败">问题：拉流失败</h4>
<p>如果是在windows下，使用<code>wsl+ubuntu</code>，在<code>ubunut</code>环境下启动MediaServer和推流， 则不能使用<code>rtsp://127.0.0.1/live/test</code>地址进行拉流。<br>
在 WSL（Windows Subsystem for Linux）的 Ubuntu 中启动 MediaServer 并通过 FFmpeg 推 RTSP 流到 rtsp://127.0.0.1/live/test ，在 Windows 下使用 VLC 播放时，需要注意 WSL 和 Windows 之间的网络通信情况。</p>
<ul>
<li>获取 WSL 的 IP 地址<br>
在 WSL 的 Ubuntu 终端中，使用以下命令获取 WSL 的 IP 地址：</li>
</ul>
<pre><code class="language-bash">ip addr show eth0 | grep -oP '(?&lt;=inet\s)\d+(\.\d+){3}'
</code></pre>
<p>该命令会输出 WSL 的 IP 地址，例如 172.28.224.1。</p>
<ul>
<li>在 VLC 中设置 RTSP 路径<br>
在 Windows 下打开 VLC 播放器，选择 “媒体” -&gt; “打开网络串流”，在输入框中输入 RTSP 路径，格式为：<br>
plaintext<br>
rtsp://&lt;WSL的IP地址&gt;/live/test</li>
</ul>
<p>例如，如果 WSL 的 IP 地址是 172.28.224.1，则输入 rtsp://172.28.224.1/live/test，然后点击 “播放” 按钮。</p>
<h3 id="zlmediakit-在-rtsp-推流测试中的作用">ZLMediaKit 在 RTSP 推流测试中的作用</h3>
<h4 id="接收推流数据">接收推流数据</h4>
<p>ZLMediaKit 作为 <code>RTSP 服务器</code>，监听指定的<code>端口（默认 554</code>），等待客户端（如 FFmpeg）发起的 RTSP 推流请求。当接收到请求后，它会<code>与客户端建立 RTSP 会话</code>，并<code>接收客户端发送的音视频流数据</code>。</p>
<h4 id="协议处理">协议处理</h4>
<ul>
<li><strong>RTSP 协议解析</strong>：ZLMediaKit 会对 RTSP 协议进行解析，处理客户端发送的各种 RTSP 请求，如 OPTIONS、DESCRIBE、SETUP、PLAY 等，确保会话的正常建立和数据的正确传输。</li>
<li><strong>RTP/RTCP 处理</strong>：RTSP 通常与 RTP（Real-time Transport Protocol）和 RTCP（Real-time Transport Control Protocol）一起使用。ZLMediaKit 会处理 RTP 数据包，将其还原为音视频流，并通过 RTCP 协议进行流的控制和反馈。</li>
</ul>
<h4 id="流管理">流管理</h4>
<ul>
<li><strong>流注册</strong>：当接收到新的推流时，ZLMediaKit 会将该流进行注册，记录流的相关信息，如流名称、应用名、编码格式等。</li>
<li><strong>流分发</strong>：ZLMediaKit 可以将接收到的流分发给多个拉流客户端。当有拉流请求时，它会根据流的注册信息，将相应的流数据发送给拉流客户端。</li>
</ul>
<h4 id="存储和转发">存储和转发</h4>
<ul>
<li><strong>存储</strong>：ZLMediaKit 支持将接收到的流数据进行存储，如保存为本地文件或写入数据库，方便后续的回放和分析。</li>
<li><strong>转发</strong>：可以将接收到的流转发到其他服务器，实现流的多级分发和跨网络传输。</li>
</ul>
<h3 id="流的流转过程">流的流转过程</h3>
<h4 id="推流阶段">推流阶段</h4>
<ol>
<li><strong>客户端发起请求</strong>：FFmpeg 作为推流客户端，向 ZLMediaKit 服务器发送 RTSP OPTIONS 请求，询问服务器支持的 RTSP 方法。</li>
<li><strong>服务器响应</strong>：ZLMediaKit 服务器收到 OPTIONS 请求后，返回支持的 RTSP 方法列表。</li>
<li><strong>客户端发送 DESCRIBE 请求</strong>：FFmpeg 发送 DESCRIBE 请求，获取服务器上的媒体描述信息（SDP，Session Description Protocol）。</li>
<li><strong>服务器返回 SDP</strong>：ZLMediaKit 服务器返回 SDP 信息，包含音视频流的编码格式、传输地址等信息。</li>
<li><strong>客户端发送 SETUP 请求</strong>：FFmpeg 根据 SDP 信息，发送 SETUP 请求，设置传输通道和参数。</li>
<li><strong>服务器响应 SETUP</strong>：ZLMediaKit 服务器响应 SETUP 请求，确认传输通道和参数。</li>
<li><strong>客户端发送 PLAY 请求</strong>：FFmpeg 发送 PLAY 请求，开始推流。</li>
<li><strong>数据传输</strong>：FFmpeg 将音视频数据封装成 RTP 数据包，通过 TCP 或 UDP 发送给 ZLMediaKit 服务器。</li>
</ol>
<h4 id="拉流阶段">拉流阶段</h4>
<ol>
<li><strong>拉流客户端发起请求</strong>：VLC 等拉流客户端向 ZLMediaKit 服务器发送 RTSP OPTIONS 请求。</li>
<li><strong>服务器响应</strong>：ZLMediaKit 服务器返回支持的 RTSP 方法列表。</li>
<li><strong>拉流客户端发送 DESCRIBE 请求</strong>：获取媒体描述信息。</li>
<li><strong>服务器返回 SDP</strong>：ZLMediaKit 服务器返回 SDP 信息。</li>
<li><strong>拉流客户端发送 SETUP 请求</strong>：设置传输通道和参数。</li>
<li><strong>服务器响应 SETUP</strong>：确认传输通道和参数。</li>
<li><strong>拉流客户端发送 PLAY 请求</strong>：开始拉流。</li>
<li><strong>数据传输</strong>：ZLMediaKit 服务器将接收到的音视频流数据封装成 RTP 数据包，发送给拉流客户端。</li>
</ol>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.6704470163993056" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-03 22:16">2025-03-03 22:16</span>&nbsp;
<a href="https://www.cnblogs.com/Rong-">荣--</a>&nbsp;
阅读(<span id="post_view_count">79</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18749517" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18749517);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18749517', targetLink: 'https://www.cnblogs.com/Rong-/p/18749517', title: 'ZLMediaKit: 快速入门' })">举报</a>
</div>
        