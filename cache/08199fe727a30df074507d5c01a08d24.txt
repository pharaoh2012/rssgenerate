
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zhaloe/p/18919769" title="发布于 2025-06-08 20:38">
    <span role="heading" aria-level="2">ArkUI-X与Android消息通信</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>平台桥接用于客户端（ArkUI）和平台（Android或iOS）之间传递消息，即用于ArkUI与平台双向数据传递、ArkUI侧调用平台的方法、平台调用ArkUI侧的方法。本文主要介绍Android平台与ArkUI交互，ArkUI侧具体用法请参考Bridge API，Android侧参考BridgePlugin。</p>
<h2 id="创建平台桥接">创建平台桥接</h2>
<p>1.在ArkUI侧创建平台桥接。指定名称，该名称应与Android侧平台桥接的名称一致。通过创建的该对象即可调用平台桥接的方法。数据可以发送json格式或二进制格式。</p>
<pre><code class="language-typescript">// xxx.ets

// 导入平台桥接模块
import bridge from '@arkui-x.bridge';

// 创建平台桥接实例
const bridgeImpl = bridge.createBridge('Bridge');
// 创建平台桥接实例(二进制格式)
const bridgeImpl = bridge.createBridge('Bridge', BridgeType.BINARY_TYPE);
</code></pre>
<p>2.在Android侧创建BridgePlugin类。指定名称，该名称应与ArkUI侧平台桥接的名称一致。通过创建的该对象即可调用平台桥接的方法。</p>
<pre><code class="language-java">// xxx.java

Bridge bridge = new Bridge(this, "Bridge", getBridgeManager());
Bridge bridge = new Bridge(this, "Bridge", getBridgeManager(), BridgePlugin.BridgeType.BINARY_TYPE);
</code></pre>
<h2 id="arkui侧向android侧传递数据">ArkUI侧向Android侧传递数据</h2>
<p>1.ArkUI侧向Android侧传递数据。</p>
<pre><code class="language-typescript">// xxx.ets

private bridgeImpl = bridge.createBridge('Bridge');

this.bridgeImpl.sendMessage('text').then((res)=&gt;{
    // 监听Android侧的回执
    console.log('response: ' + res);
}).catch((err: Error) =&gt; {
    console.log('error: ' + JSON.stringify(err));
});
</code></pre>
<p>2.Android侧接收来自ArkUI侧的数据。</p>
<pre><code class="language-java">// xxx.java

// 创建平台桥接实例(将在since 13废弃，推荐使用新构造方法)
public Bridge(Context context, String name, int id) {
    super(context, name, id);
    setMessageListener(this);
}

// 创建平台桥接实例(新)
public Bridge(Context context, String name, BridgeManager bridgeManager) {
    super(context, name, bridgeManager);
    setMessageListener(this);
}

// 注册回调，监听ArkUI侧的数据传递
@Override
public Object onMessage(Object data) {
    // 返回回执给ArkUI侧
    return "java onMessage success";
}
</code></pre>
<h2 id="android侧向arkui侧传递数据">Android侧向ArkUI侧传递数据</h2>
<p>1.Android侧向ArkUI侧发送数据。</p>
<pre><code class="language-java">// xxx.java

String[] data = { "message", "from", "android" };
bridge.sendMessage(data);
</code></pre>
<p>2.ArkUI侧设置回调，用于接收Android侧发送的数据。</p>
<pre><code class="language-typescript">// xxx.ets

private bridgeImpl = bridge.createBridge('Bridge');

this.bridgeImpl.setMessageListener((message) =&gt; {
    console.log('receive message: ' + message);

    // 收到消息后，向Android侧发送回执
    return "ArkUI receive message success";
});
</code></pre>
<p>3.Android侧注册回调，监听ArkUI侧收到数据后的回执。</p>
<pre><code class="language-java">// xxx.java

// 创建平台桥接实例(将在since 13废弃，推荐使用新构造方法)
public Bridge(Context context, String name, int id) {
    super(context, name, id);
    setMessageListener(this);
}

// 创建平台桥接实例(新)
public Bridge(Context context, String name, BridgeManager bridgeManager) {
    super(context, name, bridgeManager);
    setMessageListener(this);
}

// 注册回调，监听ArkUI侧的回执
@Override
public void onMessageResponse(Object data) {}
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.23592428471180554" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-06-08 20:39">2025-06-08 20:38</span>&nbsp;
<a href="https://www.cnblogs.com/zhaloe">龙儿筝</a>&nbsp;
阅读(<span id="post_view_count">12</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18919769);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18919769', targetLink: 'https://www.cnblogs.com/zhaloe/p/18919769', title: 'ArkUI-X与Android消息通信' })">举报</a>
</div>
        