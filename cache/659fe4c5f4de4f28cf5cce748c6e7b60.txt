
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/cdkj/p/18859298" title="发布于 2025-05-04 16:10">
    <span role="heading" aria-level="2">Spring Boot Jpa封装快速构建Specification、OrderBy、Pageable的查询条件</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><span data-cke-copybin-start="1"><span data-cke-copybin-start="1">​</span></span></p>
<h1 id="%E7%AE%80%E4%BB%8B"><span id="cke_bm_260S">&nbsp;1、简介</span></h1>
<p>在我们使用JPA时，构建 Specification 查询条件时重复代码过多，而且需要大量的无效代码。</p>
<p>&nbsp;</p>
<h1>2、工具类提供的方法</h1>
<h2>2.1、自动构建规范</h2>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="23" data-cke-widget-wrapper="1">
<div class="cnblogs_code">
<pre>  <span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
   * 自动构建规范
   *
   * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> builder JapCriteriaBuilder
   * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> entity  实体
   * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> &lt;V&gt;     实体类型
   * </span><span style="color: rgba(128, 128, 128, 1)">@return</span><span style="color: rgba(0, 128, 0, 1)"> Specification
   </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
  <span style="color: rgba(0, 0, 255, 1)">public</span> &lt;V&gt; JpaCriteriaBuilder&lt;T&gt; autoBuilder(JpaCriteriaBuilder&lt;T&gt; builder, @NotNull V entity, @NotNull Class&lt;T&gt;<span style="color: rgba(0, 0, 0, 1)"> clazz) {
    </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (Objects.isNull(entity)) {
      </span><span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> GlobalRuntimeException("实体不能为空"<span style="color: rgba(0, 0, 0, 1)">);
    }
    List</span>&lt;String&gt; ignoreFields = List.of("serialVersionUID"<span style="color: rgba(0, 0, 0, 1)">);
    List</span>&lt;Field&gt; fields =<span style="color: rgba(0, 0, 0, 1)"> getDeclaredFields(clazz);
    </span><span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> (Field field : fields) {
      </span><span style="color: rgba(0, 0, 255, 1)">if</span> (field == <span style="color: rgba(0, 0, 255, 1)">null</span> ||<span style="color: rgba(0, 0, 0, 1)"> Modifier.isStatic(field.getModifiers())) {
        </span><span style="color: rgba(0, 0, 255, 1)">continue</span><span style="color: rgba(0, 0, 0, 1)">;
      }
      </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
        field.setAccessible(Boolean.TRUE);
        Object value </span>=<span style="color: rgba(0, 0, 0, 1)"> ReflectionUtils.getFieldValue(entity, field.getName());
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (StringUtils.isNullAndSpaceOrEmpty(value) ||<span style="color: rgba(0, 0, 0, 1)"> ignoreFields.contains(field.getName())) {
          </span><span style="color: rgba(0, 0, 255, 1)">continue</span><span style="color: rgba(0, 0, 0, 1)">;
        }
        builder </span>=<span style="color: rgba(0, 0, 0, 1)"> builder.equal(field.getName(), value);
      } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (Exception e) {
        LOG.error(e, </span>"自动构建规范异常"<span style="color: rgba(0, 0, 0, 1)">);
      }
    }

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 分页数据</span>
    String pageSize = "pageSize", pageIndex = "pageIndex"<span style="color: rgba(0, 0, 0, 1)">;
    Object value </span>=<span style="color: rgba(0, 0, 0, 1)"> ReflectionUtils.getFieldValue(entity, pageIndex);
    </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (StringUtils.isNotNullAndEmpty(value)) {
      builder </span>=<span style="color: rgba(0, 0, 0, 1)"> builder.page(ConvertUtils.convertInt(value));
    }
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 页码大小</span>
    value =<span style="color: rgba(0, 0, 0, 1)"> ReflectionUtils.getFieldValue(entity, pageSize);
    </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (StringUtils.isNotNullAndEmpty(value)) {
      builder </span>=<span style="color: rgba(0, 0, 0, 1)"> builder.size(ConvertUtils.convertInt(value));
    }

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 返回结果</span>
    <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> builder;
  }</span></pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/1664447/202505/1664447-20250504160951474-1862065224.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></p>
</div>
<h2>2.2&nbsp;分组或过虑字段构建规范</h2>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="22" data-cke-widget-wrapper="1"><img src="https://img2024.cnblogs.com/blog/1664447/202505/1664447-20250504160951474-1862065224.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" style="font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px" data-cke-widget-drag-handler="1"></div>
<h2>2.3 添加等值查询条件</h2>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="21" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%20%20%2F**%5Cn%20%20%20*%20%E6%B7%BB%E5%8A%A0%E7%AD%89%E5%80%BC%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%5Cn%20%20%20*%5Cn%20%20%20*%20%40param%20field%20%E5%AD%97%E6%AE%B5%5Cn%20%20%20*%20%40param%20value%20%E5%80%BC%5Cn%20%20%20*%20%40param%20%3CV%3E%20%20%20%E6%B3%9B%E5%9E%8B%5Cn%20%20%20*%20%40return%20JapCriteriaBuilder%5Cn%20%20%20*%2F%5Cn%20%20public%20%3CV%3E%20JpaCriteriaBuilder%3CT%3E%20equal(%40NotNull%20String%20field%2C%20%40NotNull%20V%20value)%20%7B%5Cn%20%20%20%20if%20(isValidValue(value))%20%7B%5Cn%20%20%20%20%20%20specification%20%3D%20specification.and((root%2C%20query%2C%20criteriaBuilder)%20-%3E%5Cn%20%20%20%20%20%20%20%20%20%20criteriaBuilder.equal(root.get(field)%2C%20value)%5Cn%20%20%20%20%20%20)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20this%3B%5Cn%20%20%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>  /**
   * 添加等值查询条件
   *
   * @param field 字段
   * @param value 值
   * @param &lt;V&gt;   泛型
   * @return JapCriteriaBuilder
   */
  public &lt;V&gt; JpaCriteriaBuilder&lt;T&gt; equal(@NotNull String field, @NotNull V value) {
    if (isValidValue(value)) {
      specification = specification.and((root, query, criteriaBuilder) -&gt;
          criteriaBuilder.equal(root.get(field), value)
      );
    }
    return this;
  }</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1664447/202505/1664447-20250504160951474-1862065224.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h2>2.4 添加模糊查询条件</h2>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="20" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%20%20%2F**%5Cn%20%20%20*%20%E6%B7%BB%E5%8A%A0%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%5Cn%20%20%20*%5Cn%20%20%20*%20%40param%20field%20%E5%AD%97%E6%AE%B5%5Cn%20%20%20*%20%40param%20value%20%E5%80%BC%5Cn%20%20%20*%20%40param%20%3CV%3E%20%20%20%E6%B3%9B%E5%9E%8B%5Cn%20%20%20*%20%40return%20JapCriteriaBuilder%5Cn%20%20%20*%2F%5Cn%20%20public%20%3CV%3E%20JpaCriteriaBuilder%3CT%3E%20like(%40NotNull%20String%20field%2C%20%40NotNull%20V%20value)%20%7B%5Cn%20%20%20%20if%20(isValidValue(value))%20%7B%5Cn%20%20%20%20%20%20specification%20%3D%20specification.and((root%2C%20query%2C%20criteriaBuilder)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20String%20pattern%20%3D%20StringUtils.PERCENT%20%2B%20value%20%2B%20StringUtils.PERCENT%3B%5Cn%20%20%20%20%20%20%20%20return%20criteriaBuilder.like(root.get(field)%2C%20pattern)%3B%5Cn%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20this%3B%5Cn%20%20%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>  /**
   * 添加模糊查询条件
   *
   * @param field 字段
   * @param value 值
   * @param &lt;V&gt;   泛型
   * @return JapCriteriaBuilder
   */
  public &lt;V&gt; JpaCriteriaBuilder&lt;T&gt; like(@NotNull String field, @NotNull V value) {
    if (isValidValue(value)) {
      specification = specification.and((root, query, criteriaBuilder) -&gt; {
        String pattern = StringUtils.PERCENT + value + StringUtils.PERCENT;
        return criteriaBuilder.like(root.get(field), pattern);
      });
    }
    return this;
  }</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1664447/202505/1664447-20250504160951474-1862065224.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<p>2.5&nbsp; 添加 in 查询条件</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="19" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%20%20%2F**%5Cn%20%20%20*%20%E6%B7%BB%E5%8A%A0in%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%5Cn%20%20%20*%5Cn%20%20%20*%20%40param%20field%20%20%E5%AD%97%E6%AE%B5%5Cn%20%20%20*%20%40param%20values%20%E5%80%BC%5Cn%20%20%20*%20%40param%20%3CV%3E%20%20%20%20%E6%B3%9B%E5%9E%8B%5Cn%20%20%20*%20%40return%20JapCriteriaBuilder%5Cn%20%20%20*%2F%5Cn%20%20public%20%3CV%3E%20JpaCriteriaBuilder%3CT%3E%20in(%40NotNull%20String%20field%2C%20%40NotNull%20List%3CV%3E%20values)%20%7B%5Cn%20%20%20%20if%20(CollectUtils.isNotEmpty(values))%20%7B%5Cn%20%20%20%20%20%20specification%20%3D%20specification.and((root%2C%20query%2C%20criteriaBuilder)%20-%3E%5Cn%20%20%20%20%20%20%20%20%20%20root.get(field).in(values)%5Cn%20%20%20%20%20%20)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20this%3B%5Cn%20%20%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>  /**
   * 添加in查询条件
   *
   * @param field  字段
   * @param values 值
   * @param &lt;V&gt;    泛型
   * @return JapCriteriaBuilder
   */
  public &lt;V&gt; JpaCriteriaBuilder&lt;T&gt; in(@NotNull String field, @NotNull List&lt;V&gt; values) {
    if (CollectUtils.isNotEmpty(values)) {
      specification = specification.and((root, query, criteriaBuilder) -&gt;
          root.get(field).in(values)
      );
    }
    return this;
  }</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1664447/202505/1664447-20250504160951474-1862065224.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h2>2.6 添加大于查询条件</h2>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="18" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%20%20%2F**%5Cn%20%20%20*%20%E6%B7%BB%E5%8A%A0%E5%A4%A7%E4%BA%8E%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%5Cn%20%20%20*%5Cn%20%20%20*%20%40param%20field%20%E5%AD%97%E6%AE%B5%5Cn%20%20%20*%20%40param%20value%20%E5%80%BC%5Cn%20%20%20*%20%40param%20%3CV%3E%20%20%20%E6%B3%9B%E5%9E%8B%5Cn%20%20%20*%20%40return%20JapCriteriaBuilder%5Cn%20%20%20*%2F%5Cn%20%20public%20%3CV%20extends%20Comparable%3C%3F%20super%20V%3E%3E%20JpaCriteriaBuilder%3CT%3E%20greaterThan(%40NotNull%20String%20field%2C%20%40NotNull%20V%20value)%20%7B%5Cn%20%20%20%20if%20(isValidValue(value))%20%7B%5Cn%20%20%20%20%20%20specification%20%3D%20specification.and((root%2C%20query%2C%20criteriaBuilder)%20-%3E%5Cn%20%20%20%20%20%20%20%20%20%20criteriaBuilder.greaterThan(root.get(field)%2C%20value)%5Cn%20%20%20%20%20%20)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20this%3B%5Cn%20%20%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>  /**
   * 添加大于查询条件
   *
   * @param field 字段
   * @param value 值
   * @param &lt;V&gt;   泛型
   * @return JapCriteriaBuilder
   */
  public &lt;V extends Comparable&lt;? super V&gt;&gt; JpaCriteriaBuilder&lt;T&gt; greaterThan(@NotNull String field, @NotNull V value) {
    if (isValidValue(value)) {
      specification = specification.and((root, query, criteriaBuilder) -&gt;
          criteriaBuilder.greaterThan(root.get(field), value)
      );
    }
    return this;
  }</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1664447/202505/1664447-20250504160951474-1862065224.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h2>2.7&nbsp;添加大于等于查询条件</h2>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="17" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%20%20%2F**%5Cn%20%20%20*%20%E6%B7%BB%E5%8A%A0%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%5Cn%20%20%20*%5Cn%20%20%20*%20%40param%20field%20%E5%AD%97%E6%AE%B5%5Cn%20%20%20*%20%40param%20value%20%E5%80%BC%5Cn%20%20%20*%20%40param%20%3CV%3E%20%20%20%E6%B3%9B%E5%9E%8B%5Cn%20%20%20*%20%40return%20JapCriteriaBuilder%5Cn%20%20%20*%2F%5Cn%20%20public%20%3CV%20extends%20Comparable%3C%3F%20super%20V%3E%3E%20JpaCriteriaBuilder%3CT%3E%20greaterThanOrEqualTo(%40NotNull%20String%20field%2C%20%40NotNull%20V%20value)%20%7B%5Cn%20%20%20%20if%20(isValidValue(value))%20%7B%5Cn%20%20%20%20%20%20specification%20%3D%20specification.and((root%2C%20query%2C%20criteriaBuilder)%20-%3E%5Cn%20%20%20%20%20%20%20%20%20%20criteriaBuilder.greaterThanOrEqualTo(root.get(field)%2C%20value)%5Cn%20%20%20%20%20%20)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20this%3B%5Cn%20%20%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>  /**
   * 添加大于等于查询条件
   *
   * @param field 字段
   * @param value 值
   * @param &lt;V&gt;   泛型
   * @return JapCriteriaBuilder
   */
  public &lt;V extends Comparable&lt;? super V&gt;&gt; JpaCriteriaBuilder&lt;T&gt; greaterThanOrEqualTo(@NotNull String field, @NotNull V value) {
    if (isValidValue(value)) {
      specification = specification.and((root, query, criteriaBuilder) -&gt;
          criteriaBuilder.greaterThanOrEqualTo(root.get(field), value)
      );
    }
    return this;
  }</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1664447/202505/1664447-20250504160951474-1862065224.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h2>2.8&nbsp;添加小于查询条件</h2>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="16" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%20%20%2F**%5Cn%20%20%20*%20%E6%B7%BB%E5%8A%A0%E5%B0%8F%E4%BA%8E%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%5Cn%20%20%20*%5Cn%20%20%20*%20%40param%20field%20%E5%AD%97%E6%AE%B5%5Cn%20%20%20*%20%40param%20value%20%E5%80%BC%5Cn%20%20%20*%20%40param%20%3CV%3E%20%20%20%E6%B3%9B%E5%9E%8B%5Cn%20%20%20*%20%40return%20JapCriteriaBuilder%5Cn%20%20%20*%2F%5Cn%20%20public%20%3CV%20extends%20Comparable%3C%3F%20super%20V%3E%3E%20JpaCriteriaBuilder%3CT%3E%20lessThan(%40NotNull%20String%20field%2C%20%40NotNull%20V%20value)%20%7B%5Cn%20%20%20%20if%20(isValidValue(value))%20%7B%5Cn%20%20%20%20%20%20specification%20%3D%20specification.and((root%2C%20query%2C%20criteriaBuilder)%20-%3E%5Cn%20%20%20%20%20%20%20%20%20%20criteriaBuilder.lessThan(root.get(field)%2C%20value)%5Cn%20%20%20%20%20%20)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20this%3B%5Cn%20%20%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>  /**
   * 添加小于查询条件
   *
   * @param field 字段
   * @param value 值
   * @param &lt;V&gt;   泛型
   * @return JapCriteriaBuilder
   */
  public &lt;V extends Comparable&lt;? super V&gt;&gt; JpaCriteriaBuilder&lt;T&gt; lessThan(@NotNull String field, @NotNull V value) {
    if (isValidValue(value)) {
      specification = specification.and((root, query, criteriaBuilder) -&gt;
          criteriaBuilder.lessThan(root.get(field), value)
      );
    }
    return this;
  }</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1664447/202505/1664447-20250504160951474-1862065224.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h2>2.9&nbsp;添加区间查询条件</h2>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="15" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%20%20%2F**%5Cn%20%20%20*%20%E6%B7%BB%E5%8A%A0%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%5Cn%20%20%20*%5Cn%20%20%20*%20%40param%20field%20%E5%AD%97%E6%AE%B5%5Cn%20%20%20*%20%40param%20from%20%20%E5%8C%BA%E9%97%B4%E8%B5%B7%E5%A7%8B%E5%80%BC%5Cn%20%20%20*%20%40param%20to%20%20%20%20%E5%8C%BA%E9%97%B4%E7%BB%93%E6%9D%9F%E5%80%BC%5Cn%20%20%20*%20%40param%20%3CV%3E%20%20%20%E6%B3%9B%E5%9E%8B%5Cn%20%20%20*%20%40return%20JapCriteriaBuilder%5Cn%20%20%20*%2F%5Cn%20%20public%20%3CV%20extends%20Comparable%3C%3F%20super%20V%3E%3E%20JpaCriteriaBuilder%3CT%3E%20between(%40NotNull%20String%20field%2C%20%40NotNull%20V%20from%2C%20V%20to)%20%7B%5Cn%20%20%20%20if%20(from%20!%3D%20null%20%26%26%20to%20!%3D%20null)%20%7B%5Cn%20%20%20%20%20%20specification%20%3D%20specification.and((root%2C%20query%2C%20criteriaBuilder)%20-%3E%5Cn%20%20%20%20%20%20%20%20%20%20criteriaBuilder.between(root.get(field)%2C%20from%2C%20to)%5Cn%20%20%20%20%20%20)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20this%3B%5Cn%20%20%7D%5Cn%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>  /**
   * 添加区间查询条件
   *
   * @param field 字段
   * @param from  区间起始值
   * @param to    区间结束值
   * @param &lt;V&gt;   泛型
   * @return JapCriteriaBuilder
   */
  public &lt;V extends Comparable&lt;? super V&gt;&gt; JpaCriteriaBuilder&lt;T&gt; between(@NotNull String field, @NotNull V from, V to) {
    if (from != null &amp;&amp; to != null) {
      specification = specification.and((root, query, criteriaBuilder) -&gt;
          criteriaBuilder.between(root.get(field), from, to)
      );
    }
    return this;
  }
</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1664447/202505/1664447-20250504160951474-1862065224.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h2>2.10&nbsp;添加空查询条件</h2>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="14" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%20%20%2F**%5Cn%20%20%20*%20%E6%B7%BB%E5%8A%A0%E7%A9%BA%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%5Cn%20%20%20*%5Cn%20%20%20*%20%40param%20field%20%E5%AD%97%E6%AE%B5%5Cn%20%20%20*%20%40return%20JapCriteriaBuilder%5Cn%20%20%20*%2F%5Cn%20%20public%20JpaCriteriaBuilder%3CT%3E%20isNull(String%20field)%20%7B%5Cn%20%20%20%20specification%20%3D%20specification.and((root%2C%20query%2C%20criteriaBuilder)%20-%3E%5Cn%20%20%20%20%20%20%20%20criteriaBuilder.isNull(root.get(field))%5Cn%20%20%20%20)%3B%5Cn%20%20%20%20return%20this%3B%5Cn%20%20%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>  /**
   * 添加空查询条件
   *
   * @param field 字段
   * @return JapCriteriaBuilder
   */
  public JpaCriteriaBuilder&lt;T&gt; isNull(String field) {
    specification = specification.and((root, query, criteriaBuilder) -&gt;
        criteriaBuilder.isNull(root.get(field))
    );
    return this;
  }</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1664447/202505/1664447-20250504160951474-1862065224.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h2>2.11&nbsp;添加非空查询条件</h2>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="13" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%20%20%2F**%5Cn%20%20%20*%20%E6%B7%BB%E5%8A%A0%E9%9D%9E%E7%A9%BA%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%5Cn%20%20%20*%5Cn%20%20%20*%20%40param%20field%20%E5%AD%97%E6%AE%B5%5Cn%20%20%20*%20%40return%20JapCriteriaBuilder%5Cn%20%20%20*%2F%5Cn%20%20public%20JpaCriteriaBuilder%3CT%3E%20isNotNull(String%20field)%20%7B%5Cn%20%20%20%20specification%20%3D%20specification.and((root%2C%20query%2C%20criteriaBuilder)%20-%3E%5Cn%20%20%20%20%20%20%20%20criteriaBuilder.isNotNull(root.get(field))%5Cn%20%20%20%20)%3B%5Cn%20%20%20%20return%20this%3B%5Cn%20%20%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>  /**
   * 添加非空查询条件
   *
   * @param field 字段
   * @return JapCriteriaBuilder
   */
  public JpaCriteriaBuilder&lt;T&gt; isNotNull(String field) {
    specification = specification.and((root, query, criteriaBuilder) -&gt;
        criteriaBuilder.isNotNull(root.get(field))
    );
    return this;
  }</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1664447/202505/1664447-20250504160951474-1862065224.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h2>2.12&nbsp;添加关联查询条件</h2>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="12" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%20%20%2F**%5Cn%20%20%20*%20%E6%B7%BB%E5%8A%A0%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%5Cn%20%20%20*%5Cn%20%20%20*%20%40param%20joinField%20%E5%85%B3%E8%81%94%E5%AD%97%E6%AE%B5%5Cn%20%20%20*%20%40param%20field%20%20%20%20%20%E5%AD%97%E6%AE%B5%5Cn%20%20%20*%20%40param%20value%20%20%20%20%20%E5%80%BC%5Cn%20%20%20*%20%40param%20joinType%20%20%E5%85%B3%E8%81%94%E7%B1%BB%E5%9E%8B%5Cn%20%20%20*%20%40param%20%3CX%3E%20%20%20%20%20%20%20%E5%85%B3%E8%81%94%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%9E%8B%5Cn%20%20%20*%20%40return%20JapCriteriaBuilder%5Cn%20%20%20*%2F%5Cn%20%20public%20%3CX%3E%20JpaCriteriaBuilder%3CT%3E%20joinEqual(String%20joinField%2C%20%40NotNull%20String%20field%2C%20%40NotNull%20Object%20value%2C%20JoinType%20joinType)%20%7B%5Cn%20%20%20%20if%20(isValidValue(value))%20%7B%5Cn%20%20%20%20%20%20specification%20%3D%20specification.and((root%2C%20query%2C%20criteriaBuilder)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20Join%3CT%2C%20X%3E%20join%20%3D%20root.join(joinField%2C%20joinType)%3B%5Cn%20%20%20%20%20%20%20%20return%20criteriaBuilder.equal(join.get(field)%2C%20value)%3B%5Cn%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20this%3B%5Cn%20%20%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>  /**
   * 添加关联查询条件
   *
   * @param joinField 关联字段
   * @param field     字段
   * @param value     值
   * @param joinType  关联类型
   * @param &lt;X&gt;       关联实体类型
   * @return JapCriteriaBuilder
   */
  public &lt;X&gt; JpaCriteriaBuilder&lt;T&gt; joinEqual(String joinField, @NotNull String field, @NotNull Object value, JoinType joinType) {
    if (isValidValue(value)) {
      specification = specification.and((root, query, criteriaBuilder) -&gt; {
        Join&lt;T, X&gt; join = root.join(joinField, joinType);
        return criteriaBuilder.equal(join.get(field), value);
      });
    }
    return this;
  }</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1664447/202505/1664447-20250504160951474-1862065224.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h2><strong>2.13&nbsp;添加自定义查询条件</strong></h2>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="11" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%20%20%2F**%5Cn%20%20%20*%20%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%5Cn%20%20%20*%5Cn%20%20%20*%20%40param%20condition%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%5Cn%20%20%20*%20%40return%20JapCriteriaBuilder%5Cn%20%20%20*%2F%5Cn%20%20public%20JpaCriteriaBuilder%3CT%3E%20add(Function%3CRoot%3CT%3E%2C%20Predicate%3E%20condition)%20%7B%5Cn%20%20%20%20specification%20%3D%20specification.and((root%2C%20query%2C%20criteriaBuilder)%20-%3E%20%7B%5Cn%20%20%20%20%20%20Predicate%20predicate%20%3D%20condition.apply(root)%3B%5Cn%20%20%20%20%20%20return%20criteriaBuilder.and(predicate)%3B%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%20%20return%20this%3B%5Cn%20%20%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>  /**
   * 添加自定义查询条件
   *
   * @param condition 自定义查询条件
   * @return JapCriteriaBuilder
   */
  public JpaCriteriaBuilder&lt;T&gt; add(Function&lt;Root&lt;T&gt;, Predicate&gt; condition) {
    specification = specification.and((root, query, criteriaBuilder) -&gt; {
      Predicate predicate = condition.apply(root);
      return criteriaBuilder.and(predicate);
    });
    return this;
  }</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1664447/202505/1664447-20250504160951474-1862065224.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h2>2.14&nbsp;或查询</h2>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="10" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%20%20%2F**%5Cn%20%20%20*%20%E6%88%96%E6%9F%A5%E8%AF%A2%5Cn%20%20%20*%5Cn%20%20%20*%20%40param%20otherBuilder%20%E5%85%B6%E4%BB%96%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%5Cn%20%20%20*%20%40return%20JapCriteriaBuilder%5Cn%20%20%20*%2F%5Cn%20%20public%20JpaCriteriaBuilder%3CT%3E%20or(JpaCriteriaBuilder%3CT%3E...%20otherBuilder)%20%7B%5Cn%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%20Specification%20%E6%9D%A5%E5%AD%98%E5%82%A8%E5%90%88%E5%B9%B6%E5%90%8E%E7%9A%84%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%5Cn%20%20%20%20Specification%3CT%3E%20combinedSpecification%20%3D%20Specification.where(specification)%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E9%81%8D%E5%8E%86%E6%89%80%E6%9C%89%E4%BC%A0%E5%85%A5%E7%9A%84%20JapCriteriaBuilder%5Cn%20%20%20%20for%20(JpaCriteriaBuilder%3CT%3E%20builder%20%3A%20otherBuilder)%20%7B%5Cn%20%20%20%20%20%20combinedSpecification%20%3D%20combinedSpecification.or(builder.build())%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E6%9B%B4%E6%96%B0%E5%BD%93%E5%89%8D%E7%9A%84%20specification%20%E4%B8%BA%E5%90%88%E5%B9%B6%E5%90%8E%E7%9A%84%E7%BB%93%E6%9E%9C%5Cn%20%20%20%20specification%20%3D%20combinedSpecification%3B%5Cn%20%20%20%20return%20this%3B%5Cn%20%20%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>  /**
   * 或查询
   *
   * @param otherBuilder 其他查询条件
   * @return JapCriteriaBuilder
   */
  public JpaCriteriaBuilder&lt;T&gt; or(JpaCriteriaBuilder&lt;T&gt;... otherBuilder) {
    // 创建一个新的 Specification 来存储合并后的查询条件
    Specification&lt;T&gt; combinedSpecification = Specification.where(specification);

    // 遍历所有传入的 JapCriteriaBuilder
    for (JpaCriteriaBuilder&lt;T&gt; builder : otherBuilder) {
      combinedSpecification = combinedSpecification.or(builder.build());
    }

    // 更新当前的 specification 为合并后的结果
    specification = combinedSpecification;
    return this;
  }</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1664447/202505/1664447-20250504160951474-1862065224.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h2>2.15&nbsp;页码</h2>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="9" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%20%20%2F**%5Cn%20%20%20*%20%E9%A1%B5%E7%A0%81%5Cn%20%20%20*%5Cn%20%20%20*%20%40param%20page%20%E9%A1%B5%E7%A0%81%5Cn%20%20%20*%20%40return%20JapCriteriaBuilder%5Cn%20%20%20*%2F%5Cn%20%20public%20JpaCriteriaBuilder%3CT%3E%20page(int%20page)%20%7B%5Cn%20%20%20%20this.pageNumber%20%3D%20page%3B%5Cn%20%20%20%20return%20this%3B%5Cn%20%20%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>  /**
   * 页码
   *
   * @param page 页码
   * @return JapCriteriaBuilder
   */
  public JpaCriteriaBuilder&lt;T&gt; page(int page) {
    this.pageNumber = page;
    return this;
  }</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1664447/202505/1664447-20250504160951474-1862065224.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h2>2.16&nbsp;每页大小</h2>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="8" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%20%20%2F**%5Cn%20%20%20*%20%E6%AF%8F%E9%A1%B5%E5%A4%A7%E5%B0%8F%5Cn%20%20%20*%5Cn%20%20%20*%20%40param%20size%20%E6%AF%8F%E9%A1%B5%E5%A4%A7%E5%B0%8F%5Cn%20%20%20*%20%40return%20JapCriteriaBuilder%5Cn%20%20%20*%2F%5Cn%20%20public%20JpaCriteriaBuilder%3CT%3E%20size(int%20size)%20%7B%5Cn%20%20%20%20this.pageSize%20%3D%20size%3B%5Cn%20%20%20%20return%20this%3B%5Cn%20%20%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>  /**
   * 每页大小
   *
   * @param size 每页大小
   * @return JapCriteriaBuilder
   */
  public JpaCriteriaBuilder&lt;T&gt; size(int size) {
    this.pageSize = size;
    return this;
  }</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1664447/202505/1664447-20250504160951474-1862065224.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h2>2.17&nbsp;排序</h2>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="7" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%20%20%2F**%5Cn%20%20%20*%20%E6%8E%92%E5%BA%8F%5Cn%20%20%20*%5Cn%20%20%20*%20%40param%20field%20%20%20%20%20%E5%AD%97%E6%AE%B5%5Cn%20%20%20*%20%40param%20direction%20%E6%8E%92%E5%BA%8F%E6%96%B9%E5%90%91%5Cn%20%20%20*%20%40return%20JapCriteriaBuilder%5Cn%20%20%20*%2F%5Cn%20%20public%20JpaCriteriaBuilder%3CT%3E%20orderBy(%40NotNull%20String%20field%2C%20%40NotNull%20Sort.Direction%20direction)%20%7B%5Cn%20%20%20%20if%20(direction%20!%3D%20null)%20%7B%5Cn%20%20%20%20%20%20rawSortList.add(Sort.Order.by(field).with(direction))%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20this%3B%5Cn%20%20%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>  /**
   * 排序
   *
   * @param field     字段
   * @param direction 排序方向
   * @return JapCriteriaBuilder
   */
  public JpaCriteriaBuilder&lt;T&gt; orderBy(@NotNull String field, @NotNull Sort.Direction direction) {
    if (direction != null) {
      rawSortList.add(Sort.Order.by(field).with(direction));
    }
    return this;
  }</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1664447/202505/1664447-20250504160951474-1862065224.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h2>2.18&nbsp;构建分页查询条件</h2>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="6" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%20%20%2F**%5Cn%20%20%20*%20%E6%9E%84%E5%BB%BA%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%5Cn%20%20%20*%5Cn%20%20%20*%20%40return%20Pageable%5Cn%20%20%20*%2F%5Cn%20%20public%20Pageable%20toPageable()%20%7B%5Cn%20%20%20%20if%20(CollectUtils.isEmpty(rawSortList))%20%7B%5Cn%20%20%20%20%20%20throw%20new%20GlobalRuntimeException(%5C%22%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E5%BF%85%E9%A1%BB%E6%8C%87%E5%AE%9A%E6%8E%92%E5%BA%8F%E6%9D%A1%E4%BB%B6%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20PageRequest.of(%5Cn%20%20%20%20%20%20%20%20Objects.requireNonNullElse(pageNumber%2C%20IntegerConsts.ZERO)%2C%5Cn%20%20%20%20%20%20%20%20Objects.requireNonNullElse(pageSize%2C%20IntegerConsts.FIFTEEN)%2C%5Cn%20%20%20%20%20%20%20%20Sort.by(rawSortList)%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>  /**
   * 构建分页查询条件
   *
   * @return Pageable
   */
  public Pageable toPageable() {
    if (CollectUtils.isEmpty(rawSortList)) {
      throw new GlobalRuntimeException("分页查询必须指定排序条件");
    }
    return PageRequest.of(
        Objects.requireNonNullElse(pageNumber, IntegerConsts.ZERO),
        Objects.requireNonNullElse(pageSize, IntegerConsts.FIFTEEN),
        Sort.by(rawSortList)
    );
  }</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1664447/202505/1664447-20250504160951474-1862065224.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h2>2.19&nbsp;构建查询条件</h2>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="5" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%20%20%2F**%5Cn%20%20%20*%20%E6%9E%84%E5%BB%BA%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%5Cn%20%20%20*%5Cn%20%20%20*%20%40return%20Specification%5Cn%20%20%20*%2F%5Cn%20%20public%20Specification%3CT%3E%20build()%20%7B%5Cn%20%20%20%20return%20(root%2C%20query%2C%20cb)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%2F%2F%20%E5%BA%94%E7%94%A8%E6%8E%92%E5%BA%8F%E6%9D%A1%E4%BB%B6%5Cn%20%20%20%20%20%20if%20(!rawSortList.isEmpty())%20%7B%5Cn%20%20%20%20%20%20%20%20List%3COrder%3E%20orders%20%3D%20rawSortList.stream()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20.map(sortOrder%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20Path%3CObject%3E%20path%20%3D%20root.get(sortOrder.getProperty())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20sortOrder.getDirection().isAscending()%20%3F%20cb.asc(path)%20%3A%20cb.desc(path)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20.collect(Collectors.toList())%3B%5Cn%20%20%20%20%20%20%20%20query.orderBy(orders)%3B%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%2F%2F%20%E7%94%9F%E6%88%90%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%5Cn%20%20%20%20%20%20return%20specification.toPredicate(root%2C%20query%2C%20cb)%3B%5Cn%20%20%20%20%7D%3B%5Cn%20%20%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>  /**
   * 构建查询条件
   *
   * @return Specification
   */
  public Specification&lt;T&gt; build() {
    return (root, query, cb) -&gt; {
      // 应用排序条件
      if (!rawSortList.isEmpty()) {
        List&lt;Order&gt; orders = rawSortList.stream()
            .map(sortOrder -&gt; {
              Path&lt;Object&gt; path = root.get(sortOrder.getProperty());
              return sortOrder.getDirection().isAscending() ? cb.asc(path) : cb.desc(path);
            })
            .collect(Collectors.toList());
        query.orderBy(orders);
      }
      // 生成查询条件
      return specification.toPredicate(root, query, cb);
    };
  }</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1664447/202505/1664447-20250504160951474-1862065224.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h1>3&nbsp;使用示例</h1>
<h2>3.1&nbsp;使用自动构建规范</h2>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="4" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%20%20%20%20%2F%2F%20%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%5Cn%20%20%20%20JpaCriteriaBuilder%3CWikiLicenseEntity%3E%20builder%20%3D%20JpaCriteriaBuilder.Builder()%3B%5Cn%20%20%20%20builder%20%3D%20builder.autoBuilder(builder%2C%20license)%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E6%8E%92%E5%BA%8F%5Cn%20%20%20%20builder%20%3D%20builder.orderBy(WikiLicenseDto.ADD_TIME%2C%20Sort.Direction.DESC)%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%88%86%E9%A1%B5%5Cn%20%20%20%20builder%20%3D%20builder%20.page(license.getPageIndex()%20-%20IntegerConsts.ONE)%5Cn%20%20%20%20%20%20%20%20.size(license.getPageSize())%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E6%9F%A5%E8%AF%A2%E5%88%86%E9%A1%B5%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20Page%3CWikiLicenseEntity%3E%20page%20%3D%20wikiLicenseRepository.findAll(builder.build()%2C%20builder.toPageable())%3B%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>    // 查询条件
    JpaCriteriaBuilder&lt;WikiLicenseEntity&gt; builder = JpaCriteriaBuilder.Builder();
    builder = builder.autoBuilder(builder, license);

    // 排序
    builder = builder.orderBy(WikiLicenseDto.ADD_TIME, Sort.Direction.DESC);

    // 分页
    builder = builder .page(license.getPageIndex() - IntegerConsts.ONE)
        .size(license.getPageSize());

    // 查询分页数据
    Page&lt;WikiLicenseEntity&gt; page = wikiLicenseRepository.findAll(builder.build(), builder.toPageable());</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1664447/202505/1664447-20250504160951474-1862065224.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h2>3.2&nbsp;自定义添加查询条件</h2>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="3" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%20%20%20%20%2F%2F%20%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%5Cn%20%20%20%20JpaCriteriaBuilder%3CWikiLicenseEntity%3E%20builder%20%3D%20JpaCriteriaBuilder.Builder()%3B%5Cn%20%20%20%20builder.equal(WikiLicenseDto.DELETED%2C%20IntegerConsts.ZERO)%3B%5Cn%20%20%20%20builder.equal(WikiLicenseDto.STATUS%2C%20IntegerConsts.ONE)%3B%5Cn%5Cn%20%20%20%20JpaCriteriaBuilder%3CWikiLicenseEntity%3E%20builderKey%20%3D%20JpaCriteriaBuilder.Builder()%3B%5Cn%20%20%20%20builderKey%20%3D%20builderKey.equal(WikiLicenseDto.KEY%2C%20license.getKey())%3B%5Cn%5Cn%20%20%20%20JpaCriteriaBuilder%3CWikiLicenseEntity%3E%20builderName%20%3D%20JpaCriteriaBuilder.Builder()%3B%5Cn%20%20%20%20builderName%20%3D%20builderName.equal(WikiLicenseDto.NAME%2C%20license.getName())%3B%5Cn%20%20%20%20%2F%2F%20%E6%B7%BB%E5%8A%A0%E6%88%96%E6%9F%A5%E8%AF%A2%5Cn%20%20%20%20builder%20%3D%20builder.or(builderKey%2C%20builderName)%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20List%3CWikiLicenseEntity%3E%20licenseList%20%3D%20wikiLicenseRepository.findAll(builder.build())%3B%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>    // 查询条件
    JpaCriteriaBuilder&lt;WikiLicenseEntity&gt; builder = JpaCriteriaBuilder.Builder();
    builder.equal(WikiLicenseDto.DELETED, IntegerConsts.ZERO);
    builder.equal(WikiLicenseDto.STATUS, IntegerConsts.ONE);

    JpaCriteriaBuilder&lt;WikiLicenseEntity&gt; builderKey = JpaCriteriaBuilder.Builder();
    builderKey = builderKey.equal(WikiLicenseDto.KEY, license.getKey());

    JpaCriteriaBuilder&lt;WikiLicenseEntity&gt; builderName = JpaCriteriaBuilder.Builder();
    builderName = builderName.equal(WikiLicenseDto.NAME, license.getName());
    // 添加或查询
    builder = builder.or(builderKey, builderName);

    // 查询数据
    List&lt;WikiLicenseEntity&gt; licenseList = wikiLicenseRepository.findAll(builder.build());</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1664447/202505/1664447-20250504160951474-1862065224.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h1>4&nbsp;总结</h1>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;更多使用或者有更好的方法欢迎连续博主，完整的代码可查看博主开源的框架：<span class="cke_widget_wrapper cke_widget_inline cke_widget_csdnlink cke_widget_wrapper_link-info cke_widget_selected" data-cke-display-name="a" data-cke-filter="off" data-cke-widget-id="2" data-cke-widget-wrapper="1"><a class="link-info cke_widget_editable cke_widget_element" title="维基框架" href="https://framewiki.com/wiki-framework" data-cke-enter-mode="2" data-cke-saved-href="https://framewiki.com/wiki-framework" data-cke-widget-data="%7B%22url%22%3A%22https%3A%2F%2Fframewiki.com%2Fwiki-framework%22%2C%22text%22%3A%22%E7%BB%B4%E5%9F%BA%E6%A1%86%E6%9E%B6%22%2C%22desc%22%3A%22%22%2C%22icon%22%3A%22https%3A%2F%2Fcsdnimg.cn%2Frelease%2Fblog_editor_html%2Frelease2.3.8%2Fckeditor%2Fplugins%2FCsdnLink%2Ficons%2Ficon-default.png%3Ft%3DP1C7%22%2C%22isCard%22%3Afalse%2C%22hasResquest%22%3Atrue%2C%22iconDefault%22%3A%22https%3A%2F%2Fcsdnimg.cn%2Frelease%2Fblog_editor_html%2Frelease2.3.8%2Fckeditor%2Fplugins%2FCsdnLink%2Ficons%2Ficon-default.png%3Ft%3DP1C7%22%2C%22id%22%3A%22WQUq0N-1746346084426%22%2C%22classes%22%3A%7B%22link-info%22%3A1%7D%7D" data-cke-widget-editable="text" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-link-icon="https://csdnimg.cn/release/blog_editor_html/release2.3.8/ckeditor/plugins/CsdnLink/icons/icon-default.png?t=P1C7" data-link-title="维基框架" data-widget="csdnlink" rel="noopener nofollow">维基框架</a></span></p>
<p>Gitee：<span class="cke_widget_wrapper cke_widget_inline cke_widget_csdnlink cke_widget_selected" data-cke-display-name="a" data-cke-filter="off" data-cke-widget-id="1" data-cke-widget-wrapper="1"><a class="cke_widget_editable cke_widget_element" title="https://gitee.com/cdkjframework/wiki-framework" href="https://gitee.com/cdkjframework/wiki-framework" data-cke-enter-mode="2" data-cke-saved-href="https://gitee.com/cdkjframework/wiki-framework" data-cke-widget-data="%7B%22url%22%3A%22https%3A%2F%2Fgitee.com%2Fcdkjframework%2Fwiki-framework%22%2C%22text%22%3A%22https%3A%2F%2Fgitee.com%2Fcdkjframework%2Fwiki-framework%22%2C%22desc%22%3A%22%22%2C%22icon%22%3A%22https%3A%2F%2Fcsdnimg.cn%2Frelease%2Fblog_editor_html%2Frelease2.3.8%2Fckeditor%2Fplugins%2FCsdnLink%2Ficons%2Ficon-default.png%3Ft%3DP1C7%22%2C%22isCard%22%3Afalse%2C%22hasResquest%22%3Atrue%2C%22iconDefault%22%3A%22https%3A%2F%2Fcsdnimg.cn%2Frelease%2Fblog_editor_html%2Frelease2.3.8%2Fckeditor%2Fplugins%2FCsdnLink%2Ficons%2Ficon-default.png%3Ft%3DP1C7%22%2C%22id%22%3A%22ahqg5s-1746346084425%22%2C%22classes%22%3Anull%7D" data-cke-widget-editable="text" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-link-icon="https://csdnimg.cn/release/blog_editor_html/release2.3.8/ckeditor/plugins/CsdnLink/icons/icon-default.png?t=P1C7" data-link-title="https://gitee.com/cdkjframework/wiki-framework" data-widget="csdnlink" rel="noopener nofollow">https://gitee.com/cdkjframework/wiki-framework</a></span></p>
<p>Github：<span class="cke_widget_wrapper cke_widget_inline cke_widget_csdnlink cke_widget_selected" data-cke-display-name="a" data-cke-filter="off" data-cke-widget-id="0" data-cke-widget-wrapper="1"><a class="cke_widget_editable cke_widget_element" title="https://github.com/cdkjframework/wiki-framework" href="https://github.com/cdkjframework/wiki-framework" data-cke-enter-mode="2" data-cke-saved-href="https://github.com/cdkjframework/wiki-framework" data-cke-widget-data="%7B%22url%22%3A%22https%3A%2F%2Fgithub.com%2Fcdkjframework%2Fwiki-framework%22%2C%22text%22%3A%22https%3A%2F%2Fgithub.com%2Fcdkjframework%2Fwiki-framework%22%2C%22desc%22%3A%22cdkjFramework%EF%BC%88%E7%BB%B4%E5%9F%BA%E6%A1%86%E6%9E%B6%EF%BC%89%E4%BE%9D%E6%89%98Spring%20Boot%EF%BC%8CSpring%20Cloud%20%E9%9D%A2%E5%90%91%E5%85%A8%E5%9C%BA%E6%99%AF%E7%9A%84%20Java%20%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%EF%BC%9A%E9%AB%98%E6%95%88%E3%80%81%E5%BC%80%E6%94%BE%E3%80%81%E5%AE%89%E5%85%A8%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%EF%BC%81%E5%90%8C%E6%97%B6%E5%85%BC%E5%AE%B9%20java8%EF%BC%88%E9%9C%80%E5%9C%A81.0.7%E4%B9%8B%E5%89%8D%E7%89%88%E6%9C%AC%EF%BC%89%EF%BC%8C%20java17%E5%8F%8A%E4%BB%A5%E4%B8%8A%E3%80%82%20-%20cdkjframework%2Fwiki-framework%22%2C%22icon%22%3A%22https%3A%2F%2Fcsdnimg.cn%2Frelease%2Fblog_editor_html%2Frelease2.3.8%2Fckeditor%2Fplugins%2FCsdnLink%2Ficons%2Ficon-default.png%3Ft%3DP1C7%22%2C%22isCard%22%3Afalse%2C%22hasResquest%22%3Atrue%2C%22iconDefault%22%3A%22https%3A%2F%2Fcsdnimg.cn%2Frelease%2Fblog_editor_html%2Frelease2.3.8%2Fckeditor%2Fplugins%2FCsdnLink%2Ficons%2Ficon-default.png%3Ft%3DP1C7%22%2C%22id%22%3A%22qyI3So-1746346084424%22%2C%22classes%22%3Anull%7D" data-cke-widget-editable="text" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-link-desc="cdkjFramework（维基框架）依托Spring Boot，Spring Cloud 面向全场景的 Java 企业级应用开发框架：高效、开放、安全、微服务！同时兼容 java8（需在1.0.7之前版本）， java17及以上。 - cdkjframework/wiki-framework" data-link-icon="https://csdnimg.cn/release/blog_editor_html/release2.3.8/ckeditor/plugins/CsdnLink/icons/icon-default.png?t=P1C7" data-link-title="https://github.com/cdkjframework/wiki-framework" data-widget="csdnlink" rel="noopener nofollow">https://github.com/cdkjframework/wiki-framework</a></span></p>
<p>若觉得博主的项目还不错，希望你能给博主 star及fork。如果有其他需要了解的内容请留言，看到后会及时回复。</p>
<p><span data-cke-copybin-start="1"><span data-cke-copybin-end="1">​</span></span></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0146624971875" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-04 16:11">2025-05-04 16:10</span>&nbsp;
<a href="https://www.cnblogs.com/cdkj">维基框架</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18859298);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18859298', targetLink: 'https://www.cnblogs.com/cdkj/p/18859298', title: 'Spring Boot Jpa封装快速构建Specification、OrderBy、Pageable的查询条件' })">举报</a>
</div>
        