
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18629168" title="发布于 2024-12-25 08:39">
    <span role="heading" aria-level="2">manim边学边做--同伦变换</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在<code>Manim</code>中，移动一个元素除了之前介绍的方法之外，还可以通过同伦运算来移动一个元素。</p>
<p>与普通的移动元素方式相比，使用同伦运算移动一个元素时，实际上是在考虑整个空间的连续变形过程中元素的相应变化。</p>
<p>这种移动不是孤立地看待元素的位置改变，而是将元素置于空间的整体结构中，通过连续变形的方式实现元素的 “移动”。</p>
<p>简单来说，元素的<strong>同伦移动</strong>是通过连续变形实现的，不存在突然的跳跃或中断。</p>
<p>在同伦运算中，元素的每一个中间状态都与前后状态连续过渡，保持了整个移动过程的连贯性。</p>
<p><code>Manim</code>中关于同伦移动的动画类主要有：</p>
<ol>
<li><code>ComplexHomotopy</code>：用于展示复函数之间的同伦变换</li>
<li><code>Homotopy</code>：更通用的同伦动画效果类，它可以用于展示任意两个对象之间的同伦变换，不仅仅局限于复函数</li>
<li><code>SmoothedVectorizedHomotopy</code>：对向量场进行平滑的同伦变换</li>
</ol>
<h1 id="1-动画概述">1. 动画概述</h1>
<h2 id="11-complexhomotopy">1.1. ComplexHomotopy</h2>
<p><code>ComplexHomotopy</code>通常需要接收两个复函数作为参数，通过在复平面上对这两个函数进行采样，得到一系列的复数点。</p>
<p>然后，在动画过程中，按照一定的插值方法，逐步将第一个函数对应的点变换到第二个函数对应的点。</p>
<p>它的参数主要有：</p>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>complex_homotopy</td>
<td>func</td>
<td>定义了复平面上的同伦变换规则的函数</td>
</tr>
<tr>
<td>mobject</td>
<td>Mobject</td>
<td>要应用同伦变换的数学对象</td>
</tr>
</tbody>
</table>
<p><code>complex_homotopy</code>参数是一个函数，它接受一个复数作为参数，并返回一个浮点数。</p>
<h2 id="12-homotopy">1.2. Homotopy</h2>
<p><code>Homotopy</code>需要定义起始对象和目标对象，以及一个描述同伦过程的函数。</p>
<p>在动画运行时，根据时间参数，通过同伦函数计算出每个时刻对象的中间状态，</p>
<p>这个中间状态的计算可能涉及到对象的几何属性（如点的坐标、图形的形状参数等）的插值和变换。</p>
<p>它的参数主要有：</p>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>homotopy</td>
<td>func</td>
<td>定义了对象在动画过程中的变形规则的函数</td>
</tr>
<tr>
<td>mobject</td>
<td>Mobject</td>
<td>要应用同伦变换的数学对象</td>
</tr>
<tr>
<td>apply_function_kwargs</td>
<td>dict</td>
<td>在应用同伦变换函数时提供额外的控制或配置信息</td>
</tr>
</tbody>
</table>
<p><code>homotopy</code>参数是一个参数，它接受四个数$ (x,y,z,t) <span class="math inline">\(作为参数，分别表示对象在三维空间中的坐标\)</span> (x,y,z) <span class="math inline">\(以及动画时间参数\)</span> t $（的取值范围从 0 到 1），</p>
<p>并返回一个包含三个数的元组$ (x',y',z') <span class="math inline">\(，表示在时间\)</span> t $时，原始坐标对应的点经过同伦变换后的新坐标。</p>
<h2 id="13-smoothedvectorizedhomotopy">1.3. SmoothedVectorizedHomotopy</h2>
<p><code>SmoothedVectorizedHomotopy</code>首先需要获取起始向量场和目标向量场的信息，例如向量的大小和方向。</p>
<p>在动画过程中，通过一种平滑的插值算法来计算中间时刻向量场的向量值，这种算法可能会考虑向量场的梯度、散度等属性，以确保向量的变化是连续且符合物理规律的。</p>
<p>在每一帧动画中，根据计算得到的向量值绘制出相应的向量场，展示出向量场的平滑同伦变换。</p>
<p>它的参数主要有：</p>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>homotopy</td>
<td>func</td>
<td>定义了对象在动画过程中的变形规则的函数</td>
</tr>
<tr>
<td>mobject</td>
<td>Mobject</td>
<td>要应用同伦变换的数学对象</td>
</tr>
<tr>
<td>apply_function_kwargs</td>
<td>dict</td>
<td>在应用同伦变换函数时提供额外的控制或配置信息</td>
</tr>
</tbody>
</table>
<p><code>SmoothedVectorizedHomotopy</code>参数和<code>Homotopy</code>参数的含义是一样的。</p>
<p><code>SmoothedVectorizedHomotopy</code>侧重于向量场的平滑同伦变换，虽然参数类似但主要针对向量场，确保其变换过程平滑，在涉及向量场的场景（如物理场模拟）中发挥独特作用。</p>
<h1 id="2-使用示例">2. 使用示例</h1>
<p>这几个同伦变换的类使用起来没有那么直观，下面通过几个示例来演示如何使用这些类。</p>
<h2 id="21-复函数同伦变换展示">2.1. 复函数同伦变换展示</h2>
<p>这个示例利用<code>ComplexHomotopy</code>展示了复函数$ f(z)=e^z <span class="math inline">\(到\)</span> g(z)=sin(z) $的同伦变换过程。</p>
<p>通过在复平面上创建一系列的点来模拟这个变换的过程。</p>
<pre><code class="language-python"># 创建复平面
plane = ComplexPlane(
    x_range=[-8, 8],
    y_range=[-8, 8],
    x_length=6,
    y_length=6,
)
self.add(plane)

# 定义两个复函数
def f(z):
    return np.exp(z)

def g(z):
    return np.sin(z)

# ComplexHomotopy动画
homotopy = lambda z, t: (1 - t) * f(z) + t * g(z)
# 要应用动画的点集
points = [
    complex(x, y) for x in np.arange(-3, 3, 0.5) for y in np.arange(-3, 3, 0.5)
]
mobject = VGroup(*[Dot(plane.n2p(p)) for p in points])
self.add(mobject)
self.play(
    ComplexHomotopy(homotopy, mobject),
    run_time=3,
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202412/83005-20241225083621605-1848153498.gif" alt="" loading="lazy"></p>
<h2 id="22-圆形的同伦收缩演示">2.2. 圆形的同伦收缩演示</h2>
<p>借助<code>Homotopy</code>实现圆形在三维空间沿轴逐渐收缩为点的动画，</p>
<p>展示拓扑学中同伦变换下几何图形的连续变化，辅助理解拓扑性质。</p>
<pre><code class="language-python"># 创建一个圆形
circle = Circle(radius=2)
self.add(circle)

# 定义同伦函数
def homotopy(x, y, z, t):
    return (x * (1 - t), y * (1 - t), z)

# 创建Homotopy动画
self.play(
    Homotopy(homotopy, circle),
    run_time=3,
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202412/83005-20241225083621412-856181106.gif" alt="" loading="lazy"></p>
<h2 id="23-向量场强度均匀减弱模拟">2.3. 向量场强度均匀减弱模拟</h2>
<p>通过<code>SmoothedVectorizedHomotopy</code>呈现二维向量场强度随时间均匀减弱，</p>
<p>在物理学电场或磁场教学中，能有效帮助学生理解向量场动态变化。</p>
<pre><code class="language-python"># 创建一个向量场
vector_field = ArrowVectorField(
    lambda pos: (pos[0], pos[1], 0)
)
self.add(vector_field)

# 定义同伦函数
def homotopy(x, y, z, t):
    return ((1 - t) * x, (1 - t) * y, 0)

# SmoothedVectorizedHomotopy动画
self.play(
    SmoothedVectorizedHomotopy(homotopy, vector_field),
    run_time=3,
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202412/83005-20241225083621544-463910199.gif" alt="" loading="lazy"></p>
<h1 id="3-附件">3. 附件</h1>
<p>文中的代码只是关键部分的截取，完整的代码共享在网盘中（<code>homotopy.py</code>），</p>
<p>下载地址: <a href="https://url11.ctfile.com/d/45455611-64223578-4fb7ee?p=6872" target="_blank" rel="noopener nofollow">完整代码</a> (访问密码: 6872)</p>
<h1 id="4-补充说明什么是同伦运算">4. 补充说明：什么是同伦运算</h1>
<p><strong>同伦运算</strong>是代数拓扑学中的概念，本质上是在同伦范畴中对映射或空间的操作。</p>
<p>从直观上来说，如果两个连续映射 可以通过<strong>连续变形</strong>从一个变成另一个，那么这两个映射是<strong>同伦的</strong>，而对这些同伦的映射进行的各种操作和研究就是同伦运算的范畴。</p>
<p>具体的数学定义这里不赘述，举几个实际生活中可以当做<strong>同伦变换</strong>的例子来帮助大家理解一下：</p>
<ol>
<li><strong>揉面团</strong>：把一块面团从初始的球形揉成各种形状，比如椭圆形、扁平状，甚至可以在面团上捏出一些起伏但不切断面团。这个过程中，面团的形状发生了连续变化，但它始终是一个整体，没有被撕裂或粘连，不同形状之间存在同伦关系。</li>
<li><strong>吹气球</strong>：从气球未吹气时的扁平状态，到逐渐吹起变成球形的过程，气球的表面在连续地扩张变形。只要气球没有破裂，这个过程就是一个连续的变换。</li>
<li><strong>绳结的变换</strong>：在不剪断绳子和不使绳子打结部分相互穿越的前提下，绳结可以从一种形状连续地变换为另一种形状。</li>
<li><strong>衣服的变形</strong>：一件衣服在被人穿着的过程中，随着人的动作，衣服会发生各种变形。比如从平整的挂在衣架上的状态，到穿在人身上随着身体的弯曲、伸展而改变形状。</li>
<li>等等... ...</li>
</ol>
<p>注意，上面的示例可以帮助理解<strong>同伦变换</strong>，但并不是完全严谨的<strong>同伦变换</strong>，</p>
<p>比如，面团弄断了，衣服撕裂了等等情况就不是同伦变换，但却是实际生活中经常发生的事。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.015535291400462963" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-25 08:39">2024-12-25 08:39</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">8</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18629168" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18629168);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18629168', targetLink: 'https://www.cnblogs.com/wang_yb/p/18629168', title: 'manim边学边做--同伦变换' })">举报</a>
</div>
        