
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/12lisu/p/18895475" title="发布于 2025-05-25 16:13">
    <span role="heading" aria-level="2">SpringBoot性能优化的12个小技巧</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>不知道你在SpringBoot项目中，有没有遇到过下面这样的代码：</p>
<pre><code class="language-java">@GetMapping("/orders")
public List&lt;Order&gt; listOrders() {
    return orderDao.findAll(); 
}
</code></pre>
<p>一次性查询了所有的订单，全表扫描50万数据，导致接口查询性能很差，严重的时候可能会导致OOM问题。</p>
<p><strong>问题定位</strong>：</p>
<ul>
<li>未分页查询</li>
<li>无缓存机制</li>
<li>未启用批量处理</li>
</ul>
<p>这次事故让我明白：<strong>性能优化必须贯穿开发全流程</strong>。</p>
<p>今天这篇文章，跟大家一起聊聊SpringBoot优化的12招，希望对你会有所帮助。</p>
<p><img src="https://files.mdnice.com/user/5303/f9081770-66e4-4c3d-93a9-adb099d364aa.png" alt="" loading="lazy"></p>
<p><img src="https://files.mdnice.com/user/5303/709386c3-f34e-4037-8b8e-64b3627e3d0a.png" alt="" loading="lazy"></p>
<h2 id="第1招连接池参数调优">第1招：连接池参数调优</h2>
<p><strong>问题场景</strong>：<br>
默认配置导致连接池资源浪费，高并发时出现连接等待</p>
<p><strong>错误配置</strong>：</p>
<pre><code class="language-plain">spring:
  datasource:
    hikari:
      maximum-pool-size: 1000 
      connection-timeout: 30000
</code></pre>
<p>数据库连接池的最大连接数，盲目设置过大，连接超时时间设置过长。</p>
<p><strong>优化方案</strong>：</p>
<pre><code class="language-plain">spring:
  datasource:
    hikari:
      maximum-pool-size: ${CPU核心数*2} # 动态调整
      minimum-idle: 5
      connection-timeout: 3000 # 3秒超时
      max-lifetime: 1800000 # 30分钟
      idle-timeout: 600000 # 10分钟空闲释放
</code></pre>
<p>数据库连接池的最大连接数，改成根据CPU核心数动态调整。</p>
<p>将连接超时时间由30000，改成3000。</p>
<h2 id="第2招jvm内存优化">第2招：JVM内存优化</h2>
<p><strong>问题场景</strong>：<br>
频繁Full GC导致服务卡顿</p>
<p>我们需要优化JVM参数。</p>
<p><strong>启动参数优化</strong>：</p>
<pre><code class="language-java">java -jar -Xms4g -Xmx4g 
-XX:NewRatio=1 
-XX:+UseG1GC 
-XX:MaxGCPauseMillis=200 
-XX:InitiatingHeapOccupancyPercent=35
-XX:+AlwaysPreTouch
</code></pre>
<p>最大堆内存和初始堆内存都设置成了4G。</p>
<p>-XX:NewRatio=1，设置新生代和老年代各占一半。</p>
<p>垃圾收集器配置的是G1。</p>
<p>垃圾回收的最大停顿时间为200毫秒。</p>
<h2 id="第3招关闭无用组件">第3招：关闭无用组件</h2>
<p><strong>问题场景</strong>：<br>
自动装配加载不需要的Bean</p>
<p><strong>优化方案</strong>：</p>
<pre><code class="language-plain">@SpringBootApplication(exclude = {
    DataSourceAutoConfiguration.class,
    SecurityAutoConfiguration.class
})
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
</code></pre>
<p>如果有些功能暂时用不到，可以先排除一下。</p>
<p>在SpringBoot项目启动的时候，排除了DataSourceAutoConfiguration和SecurityAutoConfiguration配置类的自动装载。</p>
<h2 id="第4招响应压缩配置">第4招：响应压缩配置</h2>
<p><strong>问题场景</strong>：<br>
接口返回JSON数据体积过大</p>
<p><strong>优化方案</strong>：</p>
<pre><code class="language-yml">server:
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/json
    min-response-size: 1024
</code></pre>
<p>配置开启响应的压缩。</p>
<h2 id="第5招请求参数校验">第5招：请求参数校验</h2>
<p><strong>问题场景</strong>：<br>
恶意请求导致资源耗尽</p>
<p><strong>防御代码</strong>：</p>
<pre><code class="language-java">@GetMapping("/products")
public PageResult&lt;Product&gt; list(
    @RequestParam @Max(value=100, message="页大小不能超过100") int pageSize,
    @RequestParam @Min(1) int pageNum) {
    //...
}
</code></pre>
<p>在接口中做好参数校验，可以拦截很多恶意请求。</p>
<h2 id="第6招异步处理机制">第6招：异步处理机制</h2>
<p><strong>问题场景</strong>：<br>
同步处理导致线程阻塞</p>
<p><strong>优化方案</strong>：</p>
<pre><code class="language-java">@Async("taskExecutor")
public CompletableFuture&lt;List&lt;Order&gt;&gt; asyncProcess() {
    return CompletableFuture.completedFuture(heavyProcess());
}

@Bean("taskExecutor")
public Executor taskExecutor() {
    ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
    executor.setCorePoolSize(5);
    executor.setMaxPoolSize(10);
    executor.setQueueCapacity(500);
    return executor;
}
</code></pre>
<p>在有些业务逻辑中，使用异步处理性能可能会更好。</p>
<h2 id="第7招使用缓存">第7招：使用缓存</h2>
<p>使用缓存可以提升效率。</p>
<p><strong>缓存架构</strong>：</p>
<p><img src="https://files.mdnice.com/user/5303/cfb5177c-5ea0-41d5-be16-cf6eca8766ce.png" alt="" loading="lazy"></p>
<p><strong>代码实现</strong>：</p>
<pre><code class="language-java">@Cacheable(cacheNames = "products", key = "#id", 
           cacheManager = "caffeineCacheManager")
public Product getDetail(Long id) {
    return productDao.getById(id);
}
</code></pre>
<p>这里使用了内存缓存。</p>
<h2 id="第8招批量操作优化">第8招：批量操作优化</h2>
<p><strong>问题场景</strong>：<br>
逐条插入导致性能低下</p>
<p><strong>优化方案</strong>：</p>
<pre><code class="language-java">@Transactional
public void batchInsert(List&lt;Product&gt; products) {
    jdbcTemplate.batchUpdate(
        "INSERT INTO product(name,price) VALUES(?,?)",
        products,
        500, // 每批数量
        (ps, product) -&gt; {
            ps.setString(1, product.getName());
            ps.setBigDecimal(2, product.getPrice());
        });
}
</code></pre>
<p>每500条数据插入一次数据库。</p>
<h2 id="第9招索引深度优化">第9招：索引深度优化</h2>
<p><strong>问题场景</strong>：<br>
慢查询日志频繁出现全表扫描，SQL执行时间波动大</p>
<p><strong>错误案例</strong>：</p>
<pre><code class="language-sql">-- 商品表结构
CREATE TABLE products (
    id BIGINT PRIMARY KEY,
    name VARCHAR(200),
    category VARCHAR(50),
    price DECIMAL(10,2),
    create_time DATETIME
);

-- 低效查询
SELECT * FROM products 
WHERE category = '手机' 
AND price &gt; 5000 
ORDER BY create_time DESC;
</code></pre>
<p><strong>问题分析</strong>：</p>
<p><img src="https://files.mdnice.com/user/5303/e5692dec-6dd6-4abd-b76a-958d12a62713.png" alt="" loading="lazy"></p>
<h3 id="优化方案一联合索引设计">优化方案一：联合索引设计</h3>
<p><strong>索引创建</strong>：</p>
<p>下面创建了一个分类ID，单价和时间的联合索引：</p>
<pre><code class="language-sql">ALTER TABLE products 
ADD INDEX idx_category_price_create 
(category, price, create_time);
</code></pre>
<h3 id="优化方案二覆盖索引优化">优化方案二：覆盖索引优化</h3>
<p><strong>查询改造</strong>：</p>
<p>只查询索引包含字段：</p>
<pre><code class="language-sql">SELECT id, category, price, create_time 
FROM products 
WHERE category = '手机' 
AND price &gt; 5000 
ORDER BY create_time DESC;
</code></pre>
<p>这里使用了覆盖索引。</p>
<h3 id="优化方案三索引失效预防">优化方案三：索引失效预防</h3>
<p><strong>常见失效场景</strong>：</p>
<p><img src="https://files.mdnice.com/user/5303/b8482c5a-131d-4df0-aabe-9001af58209f.png" alt="" loading="lazy"></p>
<p><strong>案例修复</strong>：</p>
<p>错误写法：</p>
<pre><code class="language-sql">SELECT * FROM products 
WHERE DATE(create_time) = '2023-01-01';
</code></pre>
<p>正确写法：</p>
<pre><code>SELECT * FROM products 
WHERE create_time BETWEEN '2023-01-01 00:00:00' 
AND '2023-01-01 23:59:59';
</code></pre>
<p>查询时间范围，这里使用了BETWEEN AND关键字，代替了等于号。</p>
<h3 id="优化方案四索引监控分析">优化方案四：索引监控分析</h3>
<p><strong>诊断命令</strong>：</p>
<p>查看索引使用情况：</p>
<pre><code class="language-sql">SELECT 
    index_name,
    rows_read,
    rows_selected 
FROM 
    sys.schema_index_statistics 
WHERE 
    table_name = 'products';
</code></pre>
<p>分析索引效率：</p>
<pre><code>EXPLAIN FORMAT=JSON 
SELECT ...;
</code></pre>
<h3 id="索引优化黄金三原则">索引优化黄金三原则</h3>
<ol>
<li><strong>最左前缀原则</strong>：联合索引的第一个字段必须出现在查询条件中</li>
<li><strong>短索引原则</strong>：整型字段优先，字符串字段使用前缀索引</li>
<li><strong>适度索引原则</strong>：单个表索引数量不超过5个，总索引长度不超过表数据量30%</li>
</ol>
<p><strong>DBA工具箱</strong></p>
<ul>
<li>索引分析脚本</li>
<li>执行计划可视化工具</li>
<li>索引碎片检测工具</li>
</ul>
<h2 id="第10招自定义线程池">第10招：自定义线程池</h2>
<p><strong>问题场景</strong>：<br>
默认线程池导致资源竞争</p>
<p><strong>优化方案</strong>：</p>
<pre><code class="language-java">@Bean("customPool")
public Executor customThreadPool() {
    return new ThreadPoolExecutor(
        10, // 核心线程
        50, // 最大线程
        60, TimeUnit.SECONDS,
        new LinkedBlockingQueue&lt;&gt;(1000),
        new CustomThreadFactory(),
        new ThreadPoolExecutor.CallerRunsPolicy());
}
</code></pre>
<p>在高并发业务场景中，使用Executors类创建默认的线程池，可能会导致OOM问题。</p>
<p>因此，我们需要自定义线程池。</p>
<h2 id="第11招熔断限流策略">第11招：熔断限流策略</h2>
<p><strong>问题场景</strong>：<br>
突发流量导致服务雪崩</p>
<p><strong>解决方案</strong>：</p>
<pre><code class="language-java">// 使用Sentinel实现接口限流
@SentinelResource(value = "orderQuery", 
                  blockHandler = "handleBlock",
                  fallback = "handleFallback")
@GetMapping("/orders/{id}")
public Order getOrder(@PathVariable Long id) {
    return orderService.getById(id);
}

// 限流处理
public Order handleBlock(Long id, BlockException ex) {
    throw new RuntimeException("服务繁忙，请稍后重试");
}

// 降级处理
public Order handleFallback(Long id, Throwable t) {
    return Order.getDefaultOrder();
}
</code></pre>
<p>为了解决重复流量导致服务雪崩的问题，我们需要增加接口熔断、限流和降级处理。</p>
<h2 id="第12招全链路监控体系">第12招：全链路监控体系</h2>
<p><strong>问题场景</strong>：<br>
线上问题定位困难，缺乏数据支撑</p>
<p>我们需要增加项目全链路的监控。</p>
<p><strong>监控方案</strong>：</p>
<pre><code class="language-yml"># SpringBoot配置
management:
  endpoints:
    web:
      exposure:
        include: "*"
  metrics:
    export:
      prometheus:
        enabled: true
</code></pre>
<p>这里使用了prometheus监控。</p>
<p><strong>监控架构</strong>：</p>
<p><img src="https://files.mdnice.com/user/5303/ca6fade8-994a-4646-9dcc-945bdfe896b6.png" alt="" loading="lazy"></p>
<p><strong>核心监控指标</strong>：</p>
<p><img src="https://files.mdnice.com/user/5303/62344f6d-459e-40c3-9871-2646d705927c.png" alt="" loading="lazy"></p>
<h2 id="总结">总结</h2>
<h3 id="springboot性能优化检查清单">SpringBoot性能优化检查清单</h3>
<ul>
<li>连接池参数按业务调整</li>
<li>JVM参数经过压测验证</li>
<li>所有查询走缓存机制</li>
<li>批量操作替代逐条处理</li>
<li>线程池按场景定制</li>
<li>全链路监控覆盖</li>
</ul>
<p><img src="https://files.mdnice.com/user/5303/a9f579bd-cb69-4cd6-b2ee-ac7a9cf71407.png" alt="" loading="lazy"></p>
<p><strong>三条黄金法则</strong>：</p>
<ol>
<li><strong>预防性优化</strong>：编码时考虑性能影响</li>
<li><strong>数据驱动</strong>：用监控指标指导优化方向</li>
<li><strong>持续迭代</strong>：性能优化是持续过程</li>
</ol>
<p><strong>性能工具包</strong></p>
<ul>
<li>Arthas在线诊断</li>
<li>JProfiler性能分析</li>
<li>Prometheus监控体系</li>
</ul>
<p>（看着监控大屏上平稳的QPS曲线，我知道今晚可以睡个好觉了...）</p>
<h2 id="最后说一句求关注别白嫖我">最后说一句(求关注，别白嫖我)</h2>
<p>如果这篇文章对您有所帮助，或者有所启发的话，帮忙关注一下我的同名公众号：苏三说技术，我的所有文章都会在公众号上首发，您的支持是我坚持写作最大的动力。</p>
<p>求一键三连：点赞、转发、在看。</p>
<p>关注公众号：【苏三说技术】，在公众号中回复：进大厂，可以免费获取我最近整理的10万字的面试宝典，好多小伙伴靠这个宝典拿到了多家大厂的offer。</p>
<p>本文收录于：www.susan.net.cn</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5019702768067129" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-25 16:13">2025-05-25 16:13</span>&nbsp;
<a href="https://www.cnblogs.com/12lisu">苏三说技术</a>&nbsp;
阅读(<span id="post_view_count">62</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18895475);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18895475', targetLink: 'https://www.cnblogs.com/12lisu/p/18895475', title: 'SpringBoot性能优化的12个小技巧' })">举报</a>
</div>
        