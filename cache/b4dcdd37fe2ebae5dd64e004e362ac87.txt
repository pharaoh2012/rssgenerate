
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/dhan/p/18711278" title="发布于 2025-02-12 11:44">
    <span role="heading" aria-level="2">Git与Github远程仓库使用</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        每个程序技术人员必须要会的技能那就是Git管理，真的不要太舒适。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p></p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#连接远程仓库github" rel="noopener nofollow">连接远程仓库Github</a><ul><li><a href="#配置git信息" rel="noopener nofollow">配置git信息</a></li><li><a href="#生成key" rel="noopener nofollow">生成key</a></li><li><a href="#添加key" rel="noopener nofollow">添加Key</a></li><li><a href="#测试连通" rel="noopener nofollow">测试连通</a></li></ul></li><li><a href="#git基本了解" rel="noopener nofollow">Git基本了解</a></li><li><a href="#初级使用" rel="noopener nofollow">初级使用</a><ul><li><a href="#初始化项目" rel="noopener nofollow">初始化项目</a></li><li><a href="#建议修改编码显示" rel="noopener nofollow">建议修改编码显示</a></li><li><a href="#查看项目文件内容改动状态" rel="noopener nofollow">查看项目文件内容改动状态</a></li><li><a href="#修改好推送暂存区" rel="noopener nofollow">修改好推送暂存区</a></li><li><a href="#提交本地版本库" rel="noopener nofollow">提交本地版本库</a></li><li><a href="#推到远程仓库" rel="noopener nofollow">推到远程仓库</a><ul><li><a href="#什么是远程主机名" rel="noopener nofollow">什么是远程主机名</a></li><li><a href="#第一次推送要添加远程仓库" rel="noopener nofollow">第一次推送要添加远程仓库</a></li><li><a href="#提交" rel="noopener nofollow">提交</a></li></ul></li></ul></li><li><a href="#更多命令解释" rel="noopener nofollow">更多命令解释</a><ul><li><ul><li><a href="#创建仓库命令" rel="noopener nofollow">创建仓库命令</a></li></ul></li><li><a href="#提交与修改" rel="noopener nofollow">提交与修改</a></li><li><a href="#提交日志" rel="noopener nofollow">提交日志</a></li><li><a href="#远程操作" rel="noopener nofollow">远程操作</a></li></ul></li></ul></div><br>
自行安装git工具，进介绍命令以及操作<p></p>
<h1 id="连接远程仓库github">连接远程仓库Github</h1>
<p>国内gitee相通，理解了原理即可。</p>
<h2 id="配置git信息">配置git信息</h2>
<pre><code class="language-shell">git config --global user.name "你的github账号名字"
git config --global user.email "你的github注册的邮箱"
</code></pre>
<h2 id="生成key">生成key</h2>
<pre><code class="language-shell">$ ssh-keygen -t rsa -C "输入你github上注册的邮箱"
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/tianqixin/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase):    # 直接回车
Enter same passphrase again:                   # 直接回车
Your identification has been saved in /Users/tianqixin/.ssh/id_rsa.
Your public key has been saved in /Users/tianqixin/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:MxxxxxxxQoJwoqUmI4LxxxxxxxrOEzkxrwARI 12345678@qq.com
The key's randomart image is:
+---[RSA 3072]----+
|xxxxxxx*oo       |
|%Oxxxo=o. .      |
|%xxxx.o.         |
|Oxxxxx o         |
|+xxx    S        |
|.                |
|                 |
|                 |
|                 |
+----[SHA256]-----+
</code></pre>
<h2 id="添加key">添加Key</h2>
<p>找到你的key，按照上述步骤你在响应中他会告诉你的key文件放在哪里了，默认文件名就是<code>id_rsa.pub</code>，打开<code>id_rsa.pub</code>复制里面所有东西，即你的key。</p>
<p>在你的github账户中new 一个key先</p>
<p><img src="https://img2023.cnblogs.com/blog/3392862/202502/3392862-20250212112659061-1898618446.png" alt="" loading="lazy"></p>
<p>title随意，填入你复制的key完成即可<br>
<img src="https://img2023.cnblogs.com/blog/3392862/202502/3392862-20250212112658640-1430567521.png" alt="" loading="lazy"></p>
<h2 id="测试连通">测试连通</h2>
<p>输入下面这句话</p>
<pre><code class="language-shell">ssh -T git@github.com
</code></pre>
<p>如果报错信息<br>
<img src="https://img2023.cnblogs.com/blog/3392862/202502/3392862-20250212112658339-22801177.png" alt="" loading="lazy"><br>
存在该报错信息就按照下面的步骤来</p>
<pre><code class="language-shell">#打开git bash，这一步一定要打开git bash
#输入
eval `ssh-agent -s`
ssh-add ~/.ssh/id_rsa
</code></pre>
<p>再次输入测试命令</p>
<pre><code class="language-shell">ssh -T git@github.com
</code></pre>
<p>看到以下信息表示成功了</p>
<p><img src="https://img2023.cnblogs.com/blog/3392862/202502/3392862-20250212112658028-297354006.png" alt="" loading="lazy"></p>
<p>下面就是经典的命令操作</p>
<pre><code class="language-shell">$ mkdir runoob-git-test                     # 创建测试目录
$ cd runoob-git-test/                       # 进入测试目录
$ echo "# 菜鸟教程 Git 测试" &gt;&gt; README.md     # 创建 README.md 文件并写入内容
$ ls                                        # 查看目录下的文件
README
$ git init                                  # 初始化
$ git add README.md                         # 添加文件
$ git commit -m "添加 README.md 文件"        # 提交并备注信息
[master (root-commit) 0205aab] 添加 README.md 文件
 1 file changed, 1 insertion(+)
 create mode 100644 README.md

# 提交到 Github
$ git remote add origin git@github.com:tianqixin/runoob-git-test.git
$ git push -u origin master
</code></pre>
<h1 id="git基本了解">Git基本了解</h1>
<p><img src="https://img2023.cnblogs.com/blog/3392862/202502/3392862-20250212112657647-150003402.png" alt="" loading="lazy"></p>
<p>在此模块使用的都是一些基础操作，不涉及什么分支，我们只用一个分支，然后推送到远程仓库一条龙</p>
<div class="mermaid">graph TD
本地目录--&gt;版本库

版本库-..-&gt;index-暂存区
版本库-..-&gt;HEAD-指向分支的游标

</div><ul>
<li>git从本地目录开始init</li>
<li>版本库中包含暂存区和HEAD分支指向</li>
<li>每一个分支可以理解为你每一次的备份</li>
<li>分支很多的时候git项目会越来越大</li>
</ul>
<div class="mermaid">graph TD
常用操作顺序--git_add--&gt;add推送到暂存区index--git_commit--&gt;提交到分支版本仓库--git_push--&gt;push远程仓库

常用操作顺序--git_fetchx--&gt;下载远程仓库分支--git_add--&gt;add推送到暂存区index
</div><h1 id="初级使用">初级使用</h1>
<h2 id="初始化项目">初始化项目</h2>
<pre><code class="language-shell">git init  #默认在当前目录作为项目进行初始化

git init 指定目录名 #指定后会在你这个目录下生成
</code></pre>
<h2 id="建议修改编码显示">建议修改编码显示</h2>
<p>在文件存在中文的时候可能会出现如下字符码而不是中文字符<br>
<img src="https://img2023.cnblogs.com/blog/3392862/202502/3392862-20250212112657069-1156716850.png" alt="" loading="lazy"><br>
修改.gitconfig配置文件即可<br>
位置在【C:\Users\用户名.gitconfig】<br>
或者【安装的根路径\Git\mingw64\etc\gitconfig】</p>
<pre><code class="language-shell">[user]

&nbsp; &nbsp; name = 用户名

&nbsp; &nbsp; email = 邮箱

[core]

&nbsp; &nbsp; quotepath = false

[gui]

&nbsp; &nbsp; encoding = utf-8

[i18n] &nbsp;

&nbsp; &nbsp; commitencoding = utf-8 &nbsp;

&nbsp; &nbsp; # log编码 &nbsp;

[svn] &nbsp;

&nbsp; &nbsp; pathnameencoding = utf-8 &nbsp;

&nbsp; &nbsp; # 支持中文路径
</code></pre>
<p>比如查看 git status就能显示中文了<br>
<img src="https://img2023.cnblogs.com/blog/3392862/202502/3392862-20250212112656694-1956080452.png" alt="" loading="lazy"></p>
<h2 id="查看项目文件内容改动状态">查看项目文件内容改动状态</h2>
<p>查看仓库当前的状态，显示有变更的文件。</p>
<pre><code class="language-shell">git status 
</code></pre>
<h2 id="修改好推送暂存区">修改好推送暂存区</h2>
<pre><code class="language-shell">git add filename

git add . #这个是推送整个目录
</code></pre>
<h2 id="提交本地版本库">提交本地版本库</h2>
<p>当你add文件差不多的时候，即你的项目感觉可以发布的时候可以选择commit到本地版本库存着</p>
<pre><code class="language-shell">git commit


#可以添加注释方便以后查看你修改了什么东西
git commit -m "你的注释"
</code></pre>
<h2 id="推到远程仓库">推到远程仓库</h2>
<h3 id="什么是远程主机名">什么是远程主机名</h3>
<p>下面这条命令就说明了为什么主机名是origin，因为我是通过这个命令查找出来主机名的。</p>
<pre><code class="language-shell">git remote

git remote -v #查看详细信息
</code></pre>
<h3 id="第一次推送要添加远程仓库">第一次推送要添加远程仓库</h3>
<p>如果没有仓库的话首先github上创建项目仓库<br>
<img src="https://img2023.cnblogs.com/blog/3392862/202502/3392862-20250212112656314-885556156.png" alt="" loading="lazy"><br>
<img src="https://img2023.cnblogs.com/blog/3392862/202502/3392862-20250212112655107-1316771635.png" alt="" loading="lazy"><br>
<img src="https://img2023.cnblogs.com/blog/3392862/202502/3392862-20250212112654714-62839877.png" alt="" loading="lazy"><br>
创建完成后找到SSH选项复制下来<br>
origin是远程主机名<br>
<img src="https://img2023.cnblogs.com/blog/3392862/202502/3392862-20250212112654263-1806111492.png" alt="" loading="lazy"></p>
<pre><code class="language-shell">git remote add origin git@github.com:whoisdhan/Security-Notes.git
</code></pre>
<h3 id="提交">提交</h3>
<p>当你添加仓库完成后或者你已经不是第一次提交了，那就可以忽略添加远程仓库这一步，直接提交你commit的内容即可</p>
<pre><code class="language-shell">git push -u &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;

#以下命令将本地的 master 分支推送到 origin 主机的 master 分支。
git push -u origin master
</code></pre>
<p><img src="https://img2023.cnblogs.com/blog/3392862/202502/3392862-20250212112653149-471751635.png" alt="" loading="lazy"><br>
推送完成，github上查看即可<br>
<img src="https://img2023.cnblogs.com/blog/3392862/202502/3392862-20250212112652510-771085518.png" alt="" loading="lazy"><br>
注明：在你第一次添加的时候是远程可能不存在分支是空仓库，所以不能直接使用<code>git push -u &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code>，这条命令一般是当你存在多个分支的时候，比如本地某个分支需要合并到远程仓库的某个分支中的时候就需要用到。<br>
其实如果没很多分支且都是默认分支名字的时候，用一条命令即可：``git push -u origin master</p>
<h1 id="更多命令解释">更多命令解释</h1>
<h3 id="创建仓库命令">创建仓库命令</h3>
<p>下表列出了 git 创建仓库的命令：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>git init</td>
<td>初始化仓库</td>
</tr>
<tr>
<td>git clone</td>
<td>拷贝一份远程仓库，也就是下载一个项目。</td>
</tr>
<tr>
<td>Git 的工作就是创建和保存你的项目的快照及与之后的快照进行对比。</td>
<td></td>
</tr>
</tbody>
</table>
<p>下表列出了有关创建与提交你的项目的快照的命令：</p>
<h2 id="提交与修改">提交与修改</h2>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>git add</td>
<td>添加文件到暂存区</td>
</tr>
<tr>
<td>git status</td>
<td>查看仓库当前的状态，显示有变更的文件。</td>
</tr>
<tr>
<td>git diff</td>
<td>比较文件的不同，即暂存区和工作区的差异。</td>
</tr>
<tr>
<td>git difftool</td>
<td>使用外部差异工具查看和比较文件的更改。</td>
</tr>
<tr>
<td>git range-diff</td>
<td>比较两个提交范围之间的差异。</td>
</tr>
<tr>
<td>git commit</td>
<td>提交暂存区到本地仓库。</td>
</tr>
<tr>
<td>git reset</td>
<td>回退版本。</td>
</tr>
<tr>
<td>git rm</td>
<td>将文件从暂存区和工作区中删除。</td>
</tr>
<tr>
<td>git mv</td>
<td>移动或重命名工作区文件。</td>
</tr>
<tr>
<td>git notes</td>
<td>添加注释。</td>
</tr>
<tr>
<td>git checkout</td>
<td>分支切换。</td>
</tr>
<tr>
<td>git switch</td>
<td>更清晰地切换分支。</td>
</tr>
<tr>
<td>git restore</td>
<td>恢复或撤销文件的更改。</td>
</tr>
<tr>
<td>git show</td>
<td>显示 Git 对象的详细信息。</td>
</tr>
</tbody>
</table>
<h2 id="提交日志">提交日志</h2>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>git log</td>
<td>查看历史提交记录</td>
</tr>
<tr>
<td>git blame &lt;file&gt;</td>
<td>以列表形式查看指定文件的历史修改记录</td>
</tr>
<tr>
<td>git shortlog</td>
<td>生成简洁的提交日志摘要</td>
</tr>
<tr>
<td>git describe</td>
<td>生成一个可读的字符串，该字符串基于 Git 的标签系统来描述当前的提交</td>
</tr>
</tbody>
</table>
<h2 id="远程操作">远程操作</h2>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>git remote</td>
<td>远程仓库操作</td>
</tr>
<tr>
<td>git fetch</td>
<td>从远程获取代码库</td>
</tr>
<tr>
<td>git pull</td>
<td>下载远程代码并合并</td>
</tr>
<tr>
<td>git push</td>
<td>上传远程代码并合并</td>
</tr>
<tr>
<td>git submodule</td>
<td>管理包含其他 Git 仓库的项目</td>
</tr>
</tbody>
</table>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/dhan">竹等寒</a>，转载请注明原文链接。</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.022311387060185185" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-12 11:45">2025-02-12 11:44</span>&nbsp;
<a href="https://www.cnblogs.com/dhan">竹等寒</a>&nbsp;
阅读(<span id="post_view_count">14</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18711278" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18711278);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18711278', targetLink: 'https://www.cnblogs.com/dhan/p/18711278', title: 'Git与Github远程仓库使用' })">举报</a>
</div>
        