
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/shuijinglingsos/p/18626518" title="发布于 2024-12-24 09:17">
    <span role="heading" aria-level="2">HarmonyOS Next 入门实战 - 关系型数据库、smartdb</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="sqlite数据库">SQLite数据库</h2>
<p>HarmonyOS的关系型数据库基于SQLite<br>
导入模块</p>
<pre><code class="language-javascript">import { relationalStore } from '@kit.ArkData';
</code></pre>
<p>实现步骤：</p>
<ol>
<li>获取RdbStore对象，用于创建数据库，数据表，以及数据库升级等操作</li>
</ol>
<pre><code class="language-javascript">let storeConfig = {
  name: 'Poetry.db',  //数据库文件名
  securityLevel: relationalStore.SecurityLevel.S1,  //安全级别
  encrypt: false, //是否加密，可选，默认不加密
  customDir: '', 	//自定义路径，可选，目录：context.databaseDir + '/rdb/' + customDir
  isReadOnly: false, //是否已只读方式打开，可选，默认false
}

relationalStore.getRdbStore(this.context, this.storeConfig)
  .then(store =&gt; {
    //创建表
    store.executeSql('sql')
    //判断版本
    store.version
  })
  .catch((err: Error) =&gt; {
    
  })
</code></pre>
<ol start="2">
<li>插入数据</li>
</ol>
<pre><code class="language-javascript">let data :ValuesBucket={
  name:"zhangsan",
  age: 23,
}
store.insert("tableName",data).then((rowId)=&gt;{
  //操作成功返回rowId,否则返回-1
})

store.batchInsert() //用于插入批量数据
</code></pre>
<ol start="3">
<li>修改，删除数据：通过组件提供的谓词(Predicates)修改或删除组件</li>
</ol>
<pre><code class="language-javascript">let data :ValuesBucket={
  name:"zhangsan",
  age: 26,
}
let predicates = new relationalStore.RdbPredicates("tableName")
predicates.equalTo("name","zhangsan")
//更新数据
store.update(data,predicates).then((value)=&gt;{

})

//删除数据
store.delete(predicates).then((value)=&gt;{

})
</code></pre>
<ol start="4">
<li>查询数据</li>
</ol>
<pre><code class="language-javascript">let predicates = new relationalStore.RdbPredicates("tableName")
predicates.equalTo("name","zhangsan")
store.query(predicates).then((resultSet)=&gt;{
  while (resultSet.goToNextRow()){
    const name = resultSet.getString(resultSet.getColumnIndex("name"))
    const age = resultSet.getLong(resultSet.getColumnIndex("age"))
  }
  resultSet.close()
})
//也可以通过下面接口使用sql查询
store.querySql(sql: string, bindArgs?: Array&lt;ValueType&gt;): Promise&lt;ResultSet&gt;;
</code></pre>
<ol start="5">
<li>备份数据和恢复数据</li>
</ol>
<pre><code class="language-javascript">//备份数据
store.backup("backup.db")
//恢复数据
store.restore("backup.db")
</code></pre>
<h2 id="smartdb">SmartDB</h2>
<p>SmartDB与Android中的room组件类似，可以简化我们数据库操作的步骤，使代码更易维护。<br>
安装和导入模块</p>
<pre><code class="language-javascript">//安装模块
ohpm install @liushengyi/smartdb
//导入模块
import sql from "@liushengyi/smartdb"
</code></pre>
<p>定义数据结构：</p>
<pre><code class="language-javascript">export class Poetry {
  @sql.SqlColumn(sql.ColumnType.TEXT)
  uuid?: string
  @sql.SqlColumn(sql.ColumnType.TEXT)
  title?: string
  @sql.SqlColumn(sql.ColumnType.TEXT)
  dynasty?: string
  @sql.SqlColumn(sql.ColumnType.TEXT)
  author?: string
  @sql.SqlColumn(sql.ColumnType.TEXT)
  introduction?: string
  @sql.SqlColumn(sql.ColumnType.TEXT)
  text?: string
  @sql.SqlColumn(sql.ColumnType.TEXT)
  textAlign?: string
  @sql.SqlColumn(sql.ColumnType.TEXT)
  translation?: string
  @sql.SqlColumn(sql.ColumnType.TEXT)
  rectify?: string
  @sql.SqlColumn(sql.ColumnType.TEXT)
  searchKey?: string
}
</code></pre>
<p>执行数据库操作：进行增删改查、事务操作</p>
<pre><code class="language-javascript">export class PoetryDao {
  public static TABLE_NAME = "Poetry"
  public static SQL_CREATE_TABLE =
    "CREATE TABLE IF NOT EXISTS `Poetry` (`uuid` TEXT NOT NULL, `title` TEXT, `dynasty` TEXT, `author` TEXT, `introduction` TEXT, `text` TEXT, `textAlign` TEXT, `translation` TEXT, `rectify` TEXT, `searchKey` TEXT, PRIMARY KEY(`uuid`))"

  @sql.SqlQuery(`select * from ${PoetryDao.TABLE_NAME} where uuid=#{uuid}`)
  @sql.ReturnType(Poetry)
  queryOne(@sql.Param('uuid') uuid: string): Promise&lt;Poetry&gt; {
    return sql.PromiseNull()
  }

  @sql.SqlQuery(`select count(*) from ${PoetryDao.TABLE_NAME} `)
  @sql.ReturnType(Number)
  queryCount(): Promise&lt;Number&gt; {
    return sql.PromiseNull()
  }

  @sql.SqlInsert(`insert into ${PoetryDao.TABLE_NAME} values (#{data.uuid},#{data.title},#{data.dynasty},#{data.author},#{data.introduction},#{data.text},#{data.textAlign},#{data.translation},#{data.rectify},#{data.searchKey})`)
  insert(@sql.Param('data') data: Poetry): Promise&lt;void&gt; {
    return sql.PromiseNull()
  }
  
  @sql.Transactional()
  async insertPoetryAll(list: Poetry[]) {
    for (let item of list) {
      await this.insert(item)
    }
  }
}
</code></pre>
<p>数据库管理：创建数据库、数据库升级</p>
<pre><code class="language-javascript">export class DatabaseManager {
  static readonly DATABASE_VERSION = 1
  static readonly DATABASE_NAME = 'poetry.db'

  static init(context: Context) {
    sql.dbHelper.initDb(context,
      DatabaseManager.DATABASE_NAME,
      DatabaseManager.DATABASE_VERSION,
      new DbOpenHelperImpl()
    )
  }
}

class DbOpenHelperImpl extends sql.DbOpenHelper {
  //创建数据库
  onCreate(db: relationalStore.RdbStore): void {
    db.executeSql(PoetryDao.SQL_CREATE_TABLE)
  }

  //升级数据
  onUpgrade(db: relationalStore.RdbStore, oldVersion: number, newVersion: number): void {

  }
}
</code></pre>
<p>最后在app启动的时候调用初始化方法</p>
<pre><code class="language-javascript">export default class EntryAbility extends UIAbility {
  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {
    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onCreate');
    DatabaseManager.init(this.context)
  }
}
</code></pre>
<h2 id="数据初始化和使用">数据初始化和使用</h2>
<p>将json格式的数据插入到数据库中</p>
<pre><code class="language-javascript">poetryDao: PoetryDao = new PoetryDao()

new Promise&lt;boolean&gt;(async (resolve, reject) =&gt; {
  try {
    let count = await this.poetryDao.queryCount()
    if (!count) {
      let list = await (await import("resources/rawfile/poetry.json")).default
      let poetryArray: Array&lt;Poetry&gt; = []
      for (let item of list) {
        let poetry = item as Poetry
        poetry.uuid = util.generateRandomUUID()
        if (poetry.rectify) {
          poetry.rectify = JSON.stringify(poetry.rectify)
        }
        poetryArray.push(poetry)
      }
      this.poetryDao.insertPoetryAll(poetryArray)
      resolve(true)
    } else {
      resolve(false)
    }
  } catch (e) {
    reject(e)
  }
})
</code></pre>
<p>读取数据</p>
<pre><code class="language-javascript">//读取所有数据
new PoetryDao().queryList()
  .then((value) =&gt; {

  })
//读取一条数据
new PoetryDao().queryOne("id")
  .then((value) =&gt; {

  })
</code></pre>
<hr>
<p>本文的技术设计和实现都是基于作者工作中的经验总结，如有错误，请留言指正，谢谢。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.06118254321180556" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-24 09:18">2024-12-24 09:17</span>&nbsp;
<a href="https://www.cnblogs.com/shuijinglingsos">睡精灵s</a>&nbsp;
阅读(<span id="post_view_count">12</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18626518" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18626518);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18626518', targetLink: 'https://www.cnblogs.com/shuijinglingsos/p/18626518', title: 'HarmonyOS Next 入门实战 - 关系型数据库、smartdb' })">举报</a>
</div>
        