
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/HaiJun-Aion/p/18785156" title="发布于 2025-03-21 15:12">
    <span role="heading" aria-level="2">AI Agent爆火后，MCP协议为什么如此重要！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="什么是mcp">什么是MCP？</h2>
<p><img src="https://img2024.cnblogs.com/blog/1654515/202503/1654515-20250321150629853-696973298.gif" alt="" loading="lazy"></p>
<p><strong><font style="color: rgba(36, 41, 47, 1)">模型上下文协议</font></strong><font style="color: rgba(36, 41, 47, 1)">（Model Context Protocol, MCP）是一种专为</font><strong><font style="color: rgba(36, 41, 47, 1)">机器学习模型服务</font></strong><font style="color: rgba(36, 41, 47, 1)">设计的通信协议，旨在高效管理模型推理过程中的上下文信息（如会话状态、环境变量、动态配置等），解决传统协议在复杂AI场景下的局限性。</font></p>
<p><font style="color: rgba(17, 124, 238, 1)">MCP本身并不处理复杂的逻辑；它只是协调AI模型与工具之间的数据和指令流动，MCP简化了AI模型与你的数据、工具和服务的交互方式。</font></p>
<p><font style="color: rgba(0, 0, 0, 0.9)"></font></p>
<p><font style="color: rgba(36, 41, 47, 1)"></font></p>
<h2 id="mcp-具体可以干啥用"><font style="color: rgba(36, 41, 47, 1)">MCP </font><strong><font style="color: rgba(36, 41, 47, 1)">具体可以干啥用</font></strong></h2>
<h3 id="上下文感知推理"><strong><font style="color: rgba(36, 41, 47, 1)">上下文感知推理</font></strong></h3>
<p><font style="color: rgba(36, 41, 47, 1)">支持动态传递和持久化会话相关的上下文数据（例如用户历史行为、对话状态），使模型能够基于连续交互生成连贯结果。例如，在聊天机器人场景中，MCP会传递对话历史以确保回答的上下文相关性。</font></p>
<blockquote>
<p>大白话: <font style="color: rgba(36, 41, 47, 1)">比如客服机器人知道你之前退过货，不用每次都问你订单号</font></p>
<p><font style="color: rgba(36, 41, 47, 1)">给每次对话分配一个“会话ID”，存下聊天记录、用户偏好等</font></p>
</blockquote>
<h3 id="多模态数据兼容"><strong><font style="color: rgba(36, 41, 47, 1)">多模态数据兼容</font></strong></h3>
<p><font style="color: rgba(36, 41, 47, 1)">统一处理文本、图像、传感器数据等多模态输入，通过</font><strong><font style="color: rgba(36, 41, 47, 1)">类型化数据通道</font></strong><font style="color: rgba(36, 41, 47, 1)">（Typed Data Channel）自动适配不同模型输入格式（如Tensor、JSON、Protobuf）。</font></p>
<blockquote>
<p><font style="color: rgba(36, 41, 47, 1)">比如你突然说：“用简单点的话解释”，MCP会立刻告诉AI：“用户是小白，别用专业术语”</font></p>
</blockquote>
<h3 id="处理复杂任务-辅助"><font style="color: rgba(36, 41, 47, 1)">处理复杂任务 [辅助]</font></h3>
<p><font style="color: rgba(36, 41, 47, 1)">辅助自动化开发项目，自动化建模，自动化购物，自动化买票等等场景。</font></p>
<blockquote>
<p><font style="color: rgba(36, 41, 47, 1)">比如让AI帮你订机票，需要记住出发地、时间、航空公司偏好，一步步完成。</font></p>
</blockquote>
<h2 id="为什么需要mcp">为什么需要MCP</h2>
<p><img src="https://img2024.cnblogs.com/blog/1654515/202503/1654515-20250321150646970-1301974398.png" alt="" loading="lazy"></p>
<p>随着 LLM的发展日益普及 ，一个规范的 模型上下文协议变的越来越重要  。  不同的开发者和组织可能会开发出不同的上下文管理方法， MCP 旨在提供一套通用的规则和格式，以确保不同系统之间的互操作性。</p>
<p>1️⃣ <strong>目前模型训练数据的局限性</strong>：</p>
<ul>
<li>LLMs 虽然在大量数据上进行了训练，但它们无法预知所有特定场景的需求。</li>
<li>MCP 的目标是让 LLMs 能够动态地访问所需的上下文信息，从而执行更广泛的任务。</li>
</ul>
<blockquote>
<p>在处理特定行业或领域的任务时，模型需要访问该领域的专业知识和数据。MCP 能够提供一种标准化的方式，将这些信息传递给模型。</p>
</blockquote>
<p>2️⃣ **提高模型的准确性和相关性 **</p>
<ul>
<li>上下文信息可以帮助模型更好地理解用户的意图，并生成更准确、更相关的回复。 \</li>
</ul>
<blockquote>
<ol>
<li>在对话系统中，MCP 可以管理对话历史，确保模型能够记住之前的交互，并生成连贯的回复。</li>
<li>在处理文档时，MCP 可以将相关的文档内容作为上下文提供给模型，以便模型能够进行准确的问答或摘要。</li>
</ol>
</blockquote>
<p>3️⃣ <strong>处理更复杂的应用场景</strong></p>
<p>随着 LLM 的应用越来越广泛，它们需要处理更复杂的任务 ：</p>
<ul>
<li>需要访问多个数据源的任务   （例如访问多个知识库）</li>
<li>需要执行特定操作的任务</li>
<li>需要与外部系统交互的任务   (例如最近的 Blender MCP 结合 Claude 对话生成3D模型)</li>
</ul>
<p><font style="color: rgba(17, 124, 238, 1)">MCP 可以提供一种标准化的方式，让模型能够处理这些复杂的任务。</font></p>
<p>MCP 的核心在于</p>
<blockquote>
<ul>
<li>增强 LLM 的功能和应用范围</li>
<li>提高 LLM 的性能和准确性。</li>
<li>促进 LLM 的标准化和互操作性。</li>
</ul>
</blockquote>
<h2 id="mcp协议讲解">MCP协议讲解</h2>
<p><img src="https://img2024.cnblogs.com/blog/1654515/202503/1654515-20250321150659880-1165170646.png" alt="" loading="lazy"></p>
<h3 id="mcp核心概念-">MCP核心概念 :</h3>
<p><strong>主要目标：</strong></p>
<p>能够让 LLM 能够更方便、更安全地与外部世界连接，获取它们需要的各种信息和能力。</p>
<p>**核心功能：  **</p>
<ul>
<li><strong>上下文管理：</strong> MCP 协议旨在标准化和优化模型上下文的管理和传递，从而提高模型的性能和应用范围。</li>
<li><strong>外部数据集成：</strong> 使 LLMs 能够安全地访问和操作本地及远程数据，为 LLMs 应用提供连接万物的接口。</li>
<li><strong>工具调用：</strong> MCP 协议能够为 LLMs 提供执行具体操作的能力，例如调用 API、访问数据库等。</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/1654515/202503/1654515-20250321150711675-359114996.png" alt="" loading="lazy"></p>
<p><strong>架构：</strong></p>
<p>** MCP 遵循客户端-服务器架构，包含以下核心组件：**</p>
<ul>
<li><strong>MCP 主机（MCP Hosts）： 发起请求的 LLM 应用程序，例如聊天机器人、AI 工具等。</strong></li>
<li><strong>MCP 客户端（MCP Clients）：</strong>** 在主机程序内部，与 MCP 服务器保持连接。**</li>
<li><strong>MCP 服务器（MCP Servers）： 提供数据、工具和服务的外部系统。</strong></li>
</ul>
<hr>
<hr>
<hr>
<h3 id="20个关键词了解">20个关键词了解</h3>
<table>
<thead>
<tr>
<th style="text-align: left">关键词</th>
<th style="text-align: left">价值</th>
<th style="text-align: left">场景</th>
<th style="text-align: left">应用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left">MCP</td>
<td style="text-align: left">标准化LLM与数据源的整合，减少定制整合需求</td>
<td style="text-align: left">需要访问外部数据的AI应用，如聊天机器人</td>
<td style="text-align: left">AI助手、聊天机器人、AI驱动的IDE</td>
</tr>
<tr>
<td style="text-align: left">LLM</td>
<td style="text-align: left">提供自然语言处理能力，生成和理解文本</td>
<td style="text-align: left">文本补全、问答、内容生成场景</td>
<td style="text-align: left">文本补全工具、客户服务聊天机器人</td>
</tr>
<tr>
<td style="text-align: left">主机（Host）</td>
<td style="text-align: left">管理多个客户端实例，协调客户端与服务器交互</td>
<td style="text-align: left">AI应用的集中管理，如桌面应用</td>
<td style="text-align: left">Claude Desktop等AI桌面应用的协调中心</td>
</tr>
<tr>
<td style="text-align: left">客户端（Client）</td>
<td style="text-align: left">与服务器1:1连接，处理协议协商和消息路由</td>
<td style="text-align: left">主机与特定服务器的通信桥梁</td>
<td style="text-align: left">MCP架构中的通信组件，如Claude客户端</td>
</tr>
<tr>
<td style="text-align: left">服务器（Server）</td>
<td style="text-align: left">暴露资源、工具、提示等特定能力</td>
<td style="text-align: left">为LLM提供数据或功能，如文件访问</td>
<td style="text-align: left">Filesystem Server、GitHub Server等</td>
</tr>
<tr>
<td style="text-align: left">资源（Resources）</td>
<td style="text-align: left">可供LLM访问的只读数据，如文件、文档</td>
<td style="text-align: left">访问本地文件、数据库或云存储内容</td>
<td style="text-align: left">LLM查询文档、检索数据库信息</td>
</tr>
<tr>
<td style="text-align: left">工具（Tools）</td>
<td style="text-align: left">LLM可调用的动作或函数，如运行SQL查询</td>
<td style="text-align: left">需要执行特定任务，如API调用、数据处理</td>
<td style="text-align: left">自动化任务，如财务数据分析、网页抓取</td>
</tr>
<tr>
<td style="text-align: left">提示（Prompts）</td>
<td style="text-align: left">指导LLM行为或提供上下文的预定义文本</td>
<td style="text-align: left">定制LLM响应或提供特定指令</td>
<td style="text-align: left">针对不同用例调整AI输出，如客户支持提示</td>
</tr>
<tr>
<td style="text-align: left">采样（Sampling）</td>
<td style="text-align: left">主机协调LLM与多个服务器的交互，聚合上下文</td>
<td style="text-align: left">为复杂查询从多源数据收集信息</td>
<td style="text-align: left">综合多源数据为LLM提供全面上下文</td>
</tr>
<tr>
<td style="text-align: left">JSON-RPC</td>
<td style="text-align: left">用于客户端与服务器消息交换的通信协议</td>
<td style="text-align: left">分布式系统中的标准化消息传递</td>
<td style="text-align: left">MCP中的消息交互，如请求和响应</td>
</tr>
<tr>
<td style="text-align: left">能力（Capabilities）</td>
<td style="text-align: left">客户端和服务器支持的声明功能，用于功能协商</td>
<td style="text-align: left">确保会话中双方支持特定功能</td>
<td style="text-align: left">MCP会话中的功能协商，如工具支持</td>
</tr>
<tr>
<td style="text-align: left">会话（Sessions）</td>
<td style="text-align: left">保持状态的客户端与服务器连接，允许持续交互</td>
<td style="text-align: left">需要记忆先前交互的长期任务</td>
<td style="text-align: left">对话式AI、连续多步骤任务</td>
</tr>
<tr>
<td style="text-align: left">通知（Notifications）</td>
<td style="text-align: left">用于事件或更新的单向消息，如资源变化</td>
<td style="text-align: left">保持客户端了解服务器端实时更新</td>
<td style="text-align: left">AI应用中的实时状态更新，如文件修改</td>
</tr>
<tr>
<td style="text-align: left">安全（Security）</td>
<td style="text-align: left">确保数据访问和操作的控制与安全机制</td>
<td style="text-align: left">保护敏感数据，防止未经授权访问</td>
<td style="text-align: left">MCP实现中的访问控制、数据加密</td>
</tr>
<tr>
<td style="text-align: left">授权（Authorization）</td>
<td style="text-align: left">验证并授予资源或操作的访问权限</td>
<td style="text-align: left">确保只有授权用户或进程可执行操作</td>
<td style="text-align: left">MCP服务器中的用户认证、角色访问控制</td>
</tr>
<tr>
<td style="text-align: left">上下文（Context）</td>
<td style="text-align: left">提供给LLM以告知其响应的数据</td>
<td style="text-align: left">LLM需要额外信息以提供准确输出的交互</td>
<td style="text-align: left">个性化响应、领域特定知识应用</td>
</tr>
<tr>
<td style="text-align: left">有状态（Stateful）</td>
<td style="text-align: left">在会话中保持状态以保留上下文</td>
<td style="text-align: left">需要记住先前交换或数据的交互</td>
<td style="text-align: left">对话式AI、多步骤过程，如任务跟踪</td>
</tr>
<tr>
<td style="text-align: left">协议协商（Protocol Negotiation）</td>
<td style="text-align: left">客户端和服务器初始商定功能和能力</td>
<td style="text-align: left">建立具有已知能力的会话</td>
<td style="text-align: left">确保交互开始时的兼容性和功能</td>
</tr>
<tr>
<td style="text-align: left">消息类型（Message Types）</td>
<td style="text-align: left">协议中的请求、响应、通知三种消息类型</td>
<td style="text-align: left">区分协议中不同种类的通信</td>
<td style="text-align: left">MCP实现中的消息管理和路由</td>
</tr>
<tr>
<td style="text-align: left">设计原则（Design Principles）</td>
<td style="text-align: left">指导MCP设计的原则，如易建服务器、高组合性</td>
<td style="text-align: left">理解MCP架构和功能的理由</td>
<td style="text-align: left">开发者和架构师设计或扩展MCP系统时使用</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="mcp-主要5个方面">MCP 主要5个方面</h2>
<p>**下面 ，我们来从消息格式、生命周期、传输协议、版本和额外的工具类这几个方面来深入探讨 Model Context Protocol (MCP) 协议  **</p>
<h3 id="消息格式">消息格式</h3>
<p>MCP 协议通常采用结构化的数据格式进行消息传递，例如 JSON。JSON 格式具有良好的可读性和易于解析的特点，非常适合在不同系统之间进行数据交换。</p>
<p><code>JSON-RPC 2.0</code>是MCP协议普遍会使用的一种消息格式。它定义了统一的请求和响应格式，可以使不同系统之间的通信更加的标准化。</p>
<p><img src="https://img2024.cnblogs.com/blog/1654515/202503/1654515-20250321150733466-1794615704.png" alt="" loading="lazy"></p>
<hr>
<h3 id="生命周期">生命周期</h3>
<p>MCP 协议的生命周期涉及到客户端和服务器之间的连接建立、数据交换和连接关闭等过程。</p>
<p>** 生命周期包括以下几个阶段  ：**</p>
<p><img src="https://img2024.cnblogs.com/blog/1654515/202503/1654515-20250321150807700-597852706.png" alt="" loading="lazy"></p>
<hr>
<h3 id="传输协议">传输协议</h3>
<p>MCP 协议可以使用多种传输协议，常见的包括：</p>
<ul>
<li>WebSocket：提供双向、实时的通信能力，适合需要实时数据交换的场景。</li>
<li>HTTP/HTTPS：适用于简单的请求-响应模式，但实时性相对较差。</li>
</ul>
<hr>
<h3 id="版本">版本</h3>
<p>MCP 协议的版本管理非常重要，它可以确保不同版本的客户端和服务器之间能够兼容。</p>
<p>版本管理通常包括以下几个方面：</p>
<ul>
<li>版本号：为每个版本的协议分配唯一的版本号。</li>
<li>兼容性：明确定义不同版本之间的兼容性规则，例如向前兼容、向后兼容等。</li>
<li>版本协商：在连接建立时，客户端和服务器之间进行版本协商，以确定使用的协议版本。</li>
</ul>
<hr>
<hr>
<h3 id="额外的工具类">额外的工具类</h3>
<p>为了简化 MCP 协议的开发和使用，通常会提供一些额外的工具类 。</p>
<p><img src="https://img2024.cnblogs.com/blog/1654515/202503/1654515-20250321150828699-951367194.png" alt="" loading="lazy"></p>
<h2 id="如何使用mcp">如何使用MCP</h2>
<p><font style="color: rgba(31, 31, 31, 1)">不同 </font><code>&lt;font style="color:rgb(31, 31, 31);"&gt;Client&lt;/font&gt;</code><font style="color: rgba(31, 31, 31, 1)"> 对 MCP 能力的支持是不一样，选择适合的自己的场景 </font><code>&lt;font style="color:rgb(31, 31, 31);"&gt;Client&lt;/font&gt;</code><font style="color: rgba(31, 31, 31, 1)"> 即可</font></p>
<p><font style="color: rgba(31, 31, 31, 1)">下面是 </font><code>&lt;font style="color:rgb(31, 31, 31);"&gt;MCP&lt;/font&gt;</code><font style="color: rgba(31, 31, 31, 1)">官网Client 集合各个表现：</font></p>
<h2 id="为什么使用mcp而不是传统api-"><strong><font style="color: rgba(0, 0, 0, 1)">为什么使用MCP而不是传统API ？</font></strong></h2>
<table>
<thead>
<tr>
<th>特性</th>
<th>传统 API</th>
<th>MCP (Model Context Protocol)</th>
</tr>
</thead>
<tbody>
<tr>
<td>设计目标</td>
<td>提供功能性数据访问</td>
<td>为 LLM 提供上下文和外部数据集成</td>
</tr>
<tr>
<td>应用场景</td>
<td>通用软件应用，Web 服务集成，移动应用开发等</td>
<td>大型语言模型 (LLM) 应用，对话系统，知识图谱应用等</td>
</tr>
<tr>
<td>交互方式</td>
<td>请求-响应</td>
<td>上下文感知、动态交互</td>
</tr>
<tr>
<td>核心功能</td>
<td>预定义功能，数据获取，功能调用等</td>
<td>上下文管理，外部数据集成，工具调用</td>
</tr>
<tr>
<td>主要使用者</td>
<td>软件开发者</td>
<td>AI 模型 (LLM)</td>
</tr>
<tr>
<td>上下文感知</td>
<td>通常不具备上下文感知能力</td>
<td>具备上下文感知能力，能够理解对话历史、用户意图等</td>
</tr>
<tr>
<td>动态性</td>
<td>功能和数据结构预先定义，静态</td>
<td>允许 LLM 动态访问外部数据和工具，动态</td>
</tr>
<tr>
<td>智能化</td>
<td>功能性，独立性强</td>
<td>智能化，能够更智能地与外部世界交互</td>
</tr>
<tr>
<td>实时性</td>
<td>实时性一般，取决于API的设计</td>
<td>可以支持实时双向通信，例如使用WebSockets</td>
</tr>
<tr>
<td>整合难度</td>
<td>每个API单独整合</td>
<td>一次标准化整合，能够连接多个服务</td>
</tr>
<tr>
<td>安全性与控制</td>
<td>每个API单独定义</td>
<td>所有工具统一标准，可以统一进行安全和权限控制</td>
</tr>
<tr>
<td>扩展性</td>
<td>需要额外开发</td>
<td>即插即用，随着AI生态系统的发展，可以轻松添加新功能</td>
</tr>
</tbody>
</table>
<h2 id="目前市场mcp应用">目前市场MCP应用</h2>
<h3 id="blender-mcp---3d-建模">Blender MCP - 3D 建模</h3>
<p><font style="color: rgba(0, 0, 0, 1)">实现方式：使用开源项目 blender-mcp（GitHub 地址：<a href="https://github.com/ahujasid/blender-mcp%EF%BC%89%EF%BC%8C%E5%8C%85%E5%90%AB%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%B8%8E" target="_blank" rel="noopener nofollow">https://github.com/ahujasid/blender-mcp），包含服务器端与</a> Blender 插件.</font></p>
<p><img src="https://github.com/ahujasid/blender-mcp/raw/main/assets/addon-instructions.png" alt="" loading="lazy"></p>
<p><img src="https://github.com/ahujasid/blender-mcp/raw/main/assets/hammer-icon.png" alt="" loading="lazy"></p>
<h3 id="supabase-mcp------数据与数据库集成">Supabase MCP   -  数据与数据库集成</h3>
<p><font style="color: rgba(0, 0, 0, 0.9)">通过MCP将Supabase数据库连接到Cursor,自动化创建管理数据库。</font></p>
<p><img src="https://img2024.cnblogs.com/blog/1654515/202503/1654515-20250321150958719-970215016.gif" alt="" loading="lazy"></p>
<h3 id="figma-mcp-----figma-设计稿转换为代码">Figma MCP -   Figma 设计稿转换为代码</h3>
<p><img src="https://img2024.cnblogs.com/blog/1654515/202503/1654515-20250321151006798-2122957512.gif" alt="" loading="lazy"></p>
<h2 id="最后">最后</h2>
<p>MCP 提供了将 AI 代理与模型同外部数据及工具相集成的统一且标准化之方式。其绝非仅仅是一个全新的 API ，实乃一个强大的连接框架，能够达成智能、动态且富有上下文的 AI 应用。</p>
<p>🔗资源：</p>
<p>MCP 官方网站: <a href="https://modelcontextprotocol.io/introduction" target="_blank" rel="noopener nofollow">https://modelcontextprotocol.io/introduction</a></p>
<p>MCP 内容规范： <a href="https://spec.modelcontextprotocol.io/specification/2024-11-05/" target="_blank" rel="noopener nofollow">https://spec.modelcontextprotocol.io/specification/2024-11-05/</a></p>
<p>MCP Servers合集： <a href="https://github.com/modelcontextprotocol/servers" target="_blank" rel="noopener nofollow">https://github.com/modelcontextprotocol/servers</a></p>
<p>MCP Client 应用集合： <a href="https://modelcontextprotocol.io/clients" target="_blank" rel="noopener nofollow">https://modelcontextprotocol.io/clients</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.8796835035578704" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-21 15:12">2025-03-21 15:12</span>&nbsp;
<a href="https://www.cnblogs.com/HaiJun-Aion">程序员海军</a>&nbsp;
阅读(<span id="post_view_count">333</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18785156" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18785156);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18785156', targetLink: 'https://www.cnblogs.com/HaiJun-Aion/p/18785156', title: 'AI Agent爆火后，MCP协议为什么如此重要！' })">举报</a>
</div>
        