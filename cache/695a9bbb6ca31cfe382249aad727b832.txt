
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/dennyLee2025/p/18676232" title="发布于 2025-01-17 09:32">
    <span role="heading" aria-level="2">掌握设计模式--观察者模式</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="观察者模式observer-pattern">观察者模式（Observer Pattern）</h2>
<p>观察者模式（Observer Pattern）是一种行为设计模式，它定义了对象间的一对多依赖关系，使得当一个对象状态发生改变时，所有依赖于它的对象都会自动收到通知并更新。</p>
<h3 id="主要组成部分">主要组成部分</h3>
<p><strong>主题（Subject）</strong>：主题是<code>被观察</code>的对象，它维护一个观察者列表。当它的状态发生改变时，会通知所有的观察者。主题提供方法来注册、注销观察者。</p>
<p><strong>观察者（Observer）</strong>：观察者是依赖于主题的对象，它会在主题状态发生变化时收到通知，进而更新自身的状态。观察者有一个更新方法，当主题状态变化时，主题会调用此方法来通知观察者。</p>
<h3 id="工作流程">工作流程</h3>
<ol>
<li><strong>注册观察者</strong>：观察者通过主题提供的注册方法将自己注册到主题上。</li>
<li><strong>状态变化</strong>：主题的状态发生变化时，它会遍历其所有注册的观察者。</li>
<li><strong>通知观察者</strong>：主题调用每个观察者的更新方法，通知它们进行状态更新。</li>
<li><strong>更新观察者</strong>：观察者根据通知更新自己的状态，通常会重新渲染界面或进行其他的状态更新。</li>
</ol>
<h2 id="案例实现">案例实现</h2>
<p>假设有一个温度监控系统：</p>
<ul>
<li>主题：温度传感器，当温度发生变化时，它会通知所有依赖于它的观察者。</li>
<li>观察者：可以是不同的显示设备或报警系统，温度变化时，它们会根据新温度执行相应操作。</li>
</ul>
<h3 id="案例类图">案例类图</h3>
<p><img src="https://img2024.cnblogs.com/blog/1209017/202501/1209017-20250117093142119-967933544.png" alt="image" loading="lazy"></p>
<h3 id="观察者接口">观察者接口</h3>
<p>用于观察温度变化的接口，订阅的主题发生变化时，通过观察者接口的<code>update</code>方法来通知订阅了的所有观察者。</p>
<pre><code class="language-java">interface Observer {
    void update(int temperature);
}
</code></pre>
<h3 id="观察者实现类">观察者实现类</h3>
<pre><code class="language-java">// 观察者实现类1
class DisplayDevice implements Observer {
    @Override
    public void update(int temperature) {
        System.out.println("显示装置：温度更新到" + temperature);
    }
}

// 观察者实现类2
class AlarmSystem implements Observer {
    @Override
    public void update(int temperature) {
        if (temperature &gt; 42) {
            System.out.println("警报：温度超过阈值！");
        }
    }
}
</code></pre>
<h3 id="主题类被观察者">主题类（被观察者）</h3>
<pre><code class="language-java">class TemperatureSensor {
    // 观察者列表
    private List&lt;Observer&gt; observers = new ArrayList&lt;&gt;();
    private int temperature;

    // 注册观察者
    public void addObserver(Observer observer) {
        observers.add(observer);
    }

    // 移除观察者
    public void removeObserver(Observer observer) {
        observers.remove(observer);
    }

    // 设置温度并通知观察者
    public void setTemperature(int temperature) {
        this.temperature = temperature;
        notifyObservers();
    }

    // 通知所有观察者
    private void notifyObservers() {
        for (Observer observer : observers) {
            observer.update(temperature);
        }
    }
}
</code></pre>
<h3 id="测试客户端">测试客户端</h3>
<pre><code class="language-java">public class ObserverPatternDemo {
    public static void main(String[] args) {
        // 创建主题和观察者
        TemperatureSensor sensor = new TemperatureSensor();
        Observer display = new DisplayDevice();
        Observer alarm = new AlarmSystem();

        // 注册观察者：如果没注册，那就不会通知
        sensor.addObserver(display);
        sensor.addObserver(alarm);

        // 改变主题的状态
        sensor.setTemperature(45);
        sensor.setTemperature(28);
    }
}
</code></pre>
<h3 id="测试输出结果">测试输出结果</h3>
<blockquote>
<p>显示装置：温度更新到45</p>
<p>警报：温度超过阈值！</p>
<p>显示装置：温度更新到28</p>
</blockquote>
<h2 id="优缺点和使用场景">优缺点和使用场景</h2>
<h3 id="优点">优点</h3>
<ol>
<li><strong>松耦合</strong>：观察者与主题之间是松耦合的，主题不需要知道具体的观察者，观察者也不需要了解主题的内部实现。</li>
<li><strong>动态添加或删除观察者</strong>：可以在运行时动态地添加或删除观察者。</li>
</ol>
<h3 id="缺点">缺点</h3>
<ol>
<li><strong>多次更新</strong>：如果有大量观察者，状态变化可能导致多次调用更新方法，性能可能受到影响。</li>
<li><strong>循环依赖</strong>：观察者之间如果互相通知更新，可能引起循环依赖或无限循环。</li>
</ol>
<p>观察者模式是处理事件驱动系统或需要多个对象同步更新状态的常用模式，尤其在分布式系统、GUI框架中应用广泛。</p>
<h3 id="适用场景">适用场景</h3>
<ul>
<li><strong>事件驱动的系统</strong>：例如GUI框架（按钮点击、界面更新等）、消息通知系统等。</li>
<li><strong>发布-订阅系统</strong>：如消息队列系统、新闻订阅、社交媒体更新等。</li>
<li><strong>数据同步</strong>：多个模块需要同步更新某些共享数据时，如温度监控、股票价格变化等。</li>
</ul>
<h2 id="观察者模式的应用">观察者模式的应用</h2>
<p>Spring的事件机制<code>ApplicationEvent</code>是事件对象，<code>ApplicationListener</code>是事件监听器，当<code>ApplicationEvent</code>发布时，所有注册了该事件类型的<code>ApplicationListener</code>会被通知并处理该事件。<code>ApplicationEventPublisher</code>接口（通常是<code>ApplicationContext</code>的实现类）作为被观察者，<code>ApplicationListener</code>作为观察者。事件的发布和监听实现了松耦合的通知机制。</p>
<p>Java Web中的监听器，它通过监听和响应Web应用的生命周期事件、HTTP会话事件、请求事件以及属性变化事件。常见的监听器接口包括<code>ServletContextListener</code>、<code>HttpSessionListener</code>、<code>ServletRequestListener</code>等，实现相应的监听接口，即可完成相应事件的监听。监听器机制的使用可以帮助开发者在特定事件发生时执行一些处理逻辑，保证代码的解耦和灵活性。</p>
<h2 id="总结">总结</h2>
<p>观察者模式是一种行为设计模式，其核心在于通过定义一对多的依赖关系，使得当被观察者的状态发生变化时，所有依赖的观察者自动收到通知并更新，从而实现对象之间的松耦合和动态响应，同时便于观察者的扩展。</p>
<p><img src="https://img2024.cnblogs.com/blog/1209017/202501/1209017-20250117093205811-310186896.gif" alt="image" loading="lazy"></p>
<p>需要查看往期设计模式文章的，可以在个人主页中或者文章开头的集合中查看，可关注我，持续更新中。。。</p>
<hr>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247486066&amp;idx=1&amp;sn=e8c7423105ddd0562f50892010941efc&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">超实用的SpringAOP实战之日志记录</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485873&amp;idx=1&amp;sn=08b58de61c716e5c57ff2fddb947f0d8&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">2023年下半年软考考试重磅消息</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485909&amp;idx=1&amp;sn=e20f3b7b413310ca78f90c13305972ab&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">通过软考后却领取不到实体证书？</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485802&amp;idx=1&amp;sn=863cf239124b98d39ec551b6cb67845c&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">计算机算法设计与分析（第5版）</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485015&amp;idx=1&amp;sn=862bc2b379726b89cdb396ec0d325cc0&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">Java全栈学习路线、学习资源和面试题一条龙</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485956&amp;idx=1&amp;sn=57407d9f7921254ba19ed70fa3bd6a2d&amp;chksm=ec62ca99db15438f13f2cf96d17a3e282028fa7960af56126caec68fb6eafd46d6e04a10ad0c&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">软考证书=职称证书？</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485837&amp;idx=1&amp;sn=b9b17dfd252882468b8eea31012df6fc&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">软考中级--软件设计师毫无保留的备考分享</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.19933413978587963" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-17 09:33">2025-01-17 09:32</span>&nbsp;
<a href="https://www.cnblogs.com/dennyLee2025">渊渟岳</a>&nbsp;
阅读(<span id="post_view_count">27</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18676232" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18676232);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18676232', targetLink: 'https://www.cnblogs.com/dennyLee2025/p/18676232', title: '掌握设计模式--观察者模式' })">举报</a>
</div>
        