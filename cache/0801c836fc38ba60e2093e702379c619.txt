<!----> <meta itemprop="headline" content="前端如何实现文件的在线预览？"> <meta itemprop="keywords" content="前端,Vue.js"> <meta itemprop="datePublished" content="2024-11-14T05:04:02.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="M木"> <meta itemprop="url" content="https://juejin.cn/user/101571707546845"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-7cdd11fb="">
            前端如何实现文件的在线预览？
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-7cdd11fb=""><div class="author-info-box" data-v-7cdd11fb=""><div class="author-name" data-v-7cdd11fb=""><a href="/user/101571707546845/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-7cdd11fb=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    M木
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-7cdd11fb=""><time datetime="2024-11-14T05:04:02.000Z" title="Thu Nov 14 2024 05:04:02 GMT+0000 (Coordinated Universal Time)" class="time" data-v-7cdd11fb="">
                    2024-11-14
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-7cdd11fb=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-7cdd11fb=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-7cdd11fb=""></circle></svg> <span class="views-count" data-v-7cdd11fb="">
                    5,331
                  </span> <span class="read-time" data-v-7cdd11fb=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-7cdd11fb=""><rect width="16" height="16" fill="none" data-v-7cdd11fb=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-7cdd11fb=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-7cdd11fb=""></path></svg>
                    阅读4分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-7cdd11fb=""></div> <!----> <!----></div> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-7cdd11fb=""><div class="article-viewer markdown-body result"><h2 data-id="heading-0">起步</h2>
<p>在计算机的世界中，有各种各样的文件，文件类型千奇百怪，作为一名前端开发工程师，我们如何来实现这些文件的在线预览呢？在上篇文章，我们已经实现了<a href="https://juejin.cn/post/7435858473937207330" target="_blank" title="https://juejin.cn/post/7435858473937207330">前端如何实现压缩包解析？</a>，但是也仅仅是能够查看压缩包中的内容，并不能真实的去进行线上预览，这节就是在上节的基础上，举例一些我们日常经常接触的文件来进行预览：</p>
<ol>
<li>
<p>文本类文件（虽然类型很多，但是处理方式基本都是一样的）</p>
<pre><code class="hljs language-js" lang="js"> <span class="hljs-keyword">const</span> txtType = [<span class="hljs-string">'txt'</span>,<span class="hljs-string">'html'</span>,<span class="hljs-string">'htm'</span>,<span class="hljs-string">'asp'</span>,<span class="hljs-string">'jsp'</span>,<span class="hljs-string">'js'</span>,<span class="hljs-string">'xml'</span>,<span class="hljs-string">'json'</span>,<span class="hljs-string">'properties'</span>,<span class="hljs-string">'md'</span>,<span class="hljs-string">'gitignore'</span>,<span class="hljs-string">'log'</span>,<span class="hljs-string">'java'</span>,<span class="hljs-string">'py'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'cpp'</span>,<span class="hljs-string">'sql'</span>,<span class="hljs-string">'sh'</span>,<span class="hljs-string">'bat'</span>,<span class="hljs-string">'m'</span>,<span class="hljs-string">'bas'</span>,<span class="hljs-string">'prg'</span>,<span class="hljs-string">'cmd'</span>,<span class="hljs-string">'vue'</span>,<span class="hljs-string">'ts'</span>,<span class="hljs-string">'tsx'</span>,<span class="hljs-string">'yml'</span>,<span class="hljs-string">'yaml'</span>,<span class="hljs-string">'css'</span>,];
</code></pre>
</li>
<li>
<p>图片<code>const pictureType = ['jpg', 'png', 'gif','webp'];</code></p>
</li>
<li>
<p>音视频文件（这里以.mp4举例）</p>
</li>
<li>
<p>office文件</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">const</span> wordType = [<span class="hljs-string">'docx'</span>, <span class="hljs-string">'doc'</span>]; <span class="hljs-comment">// word</span>
<span class="hljs-keyword">const</span> excelType = [<span class="hljs-string">'xls'</span>, <span class="hljs-string">'xlsx'</span>]; <span class="hljs-comment">// excel</span>
<span class="hljs-keyword">const</span> pptType = [<span class="hljs-string">'ppt'</span>, <span class="hljs-string">'pptx'</span>]; <span class="hljs-comment">//ppt</span>
</code></pre>
</li>
</ol>
<p>回顾一下，上节我们已经完成的页面，可以看作左右两部分，左侧为我们解析出来的压缩包内文件的树结构，右侧为我们需要预览的文件。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/eb87919e056643f69260599fe923b473~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTeacqA==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1737500587&amp;x-signature=g4mi0AgatKD%2FXHeS00vPXOjhfPA%3D" alt="1.jpg" loading="lazy"></p>
<p>我们监听了树的点击事件当点击某个文件的时候能够拿到这个文件的相关信息，包括File对象。</p>
<p>我们的dom结构大概是这样的，根据我们当前点击的文件类型展示不同的元素。</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'left'</span>&gt;</span>
  <span class="hljs-comment">&lt;!-- 文件树结构 --&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">a-tree</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a-tree</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'right'</span>&gt;</span>
  <span class="hljs-comment">&lt;!-- 图片 --&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"pictureType.some(item =&gt; item == currentFile?.fileType)"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"currentFile?.url"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"img"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"点击查看"</span> <span class="hljs-attr">v-viewer</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  <span class="hljs-comment">&lt;!-- 文本 --&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">"txtType.some((item) =&gt; item == currentFile?.fileType)"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"txt"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>{{ textContent }}<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  <span class="hljs-comment">&lt;!-- 视频 --&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">"currentFile?.fileType == 'mp4'"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100%;"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"currentFile.url"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  .....
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>
<p>那么我们如何读取文件的内容呢？这里我们需要用到一个api，<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FFileReader" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader" ref="nofollow noopener noreferrer">FileReader - Web API | MDN</a></p>
<blockquote>
<p><strong><code>FileReader</code></strong> 接口允许 Web 应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 <a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FFile" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/API/File" ref="nofollow noopener noreferrer"><code>File</code></a> 或 <a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FBlob" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" ref="nofollow noopener noreferrer"><code>Blob</code></a> 对象指定要读取的文件或数据。</p>
</blockquote>
<p>调用这个构造函数会返回一个实例，通过这个实例我们就能将文件读取成任何我们想要的类型了。</p>
<h3 data-id="heading-1">1.文本类文件</h3>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 文本内容</span>
<span class="hljs-keyword">const</span> <span class="hljs-attr">textContent</span>: string = <span class="hljs-title function_">ref</span>(<span class="hljs-string">''</span>)
<span class="hljs-keyword">const</span> <span class="hljs-attr">reader</span>: any = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>()

<span class="hljs-comment">// 文本文件，直接使用readAsText将文件读取为文本再展示即可</span>
<span class="hljs-keyword">if</span> (txtType.<span class="hljs-title function_">some</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item == fileType)) {
  reader.<span class="hljs-title function_">readAsText</span>(file)
  reader.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> textContent.<span class="hljs-property">value</span> = reader.<span class="hljs-property">result</span>
}
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/fbb9226ec4a14af5be1e8997dcb3744e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTeacqA==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1737500587&amp;x-signature=Z%2Br8Q5SDxXO9MZEdaX%2BCUADPLw0%3D" alt="2.jpg" loading="lazy"></p>
<h3 data-id="heading-2">2. 图片类文件</h3>
<p>将文件读取为base64的字符串，直接借助浏览器的img标签展示即可展示。</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">const</span> <span class="hljs-attr">reader</span>: any = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>()
<span class="hljs-comment">// 图片</span>
<span class="hljs-keyword">if</span> (pictureType.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item == fileType)) {
  reader.<span class="hljs-title function_">readAsDataURL</span>(file)
  reader.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> currentFile.<span class="hljs-property">value</span>.<span class="hljs-property">url</span> = reader.<span class="hljs-property">result</span>
}
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ce6e79545e5e4af8bb8bb3b8ac5e60e3~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTeacqA==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1737500587&amp;x-signature=LZU%2BTr98ouZSMH0Zz0l3xwgtjGU%3D" alt="3.jpg" loading="lazy"></p>
<h3 data-id="heading-3">3. 音视频类文件</h3>
<p>音视频文件的预览直接使用对应的标签即可，即和，但是都是通过src属性指定需要播放的内容的，所以，我们可以读取文件后调用<code>URL.createObjectURL</code>将对象转换为一个包含对象 URL 的字符串，然后赋值即可。</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">const</span> <span class="hljs-attr">reader</span>: any = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>()
<span class="hljs-comment">// 视频</span>
<span class="hljs-keyword">if</span> (fileType == <span class="hljs-string">'mp4'</span>) {
  reader.<span class="hljs-title function_">readAsArrayBuffer</span>(file)
  reader.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> currentFile.<span class="hljs-property">value</span>.<span class="hljs-property">url</span> = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([reader.<span class="hljs-property">result</span>], { <span class="hljs-attr">type</span>: <span class="hljs-string">'video/mp4'</span> }))
}
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/d6f1288c65ac4eaab4afe16232a09c84~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTeacqA==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1737500587&amp;x-signature=h1HiozjIj0cP9DYmVSq76MCREQk%3D" alt="4.jpg" loading="lazy"></p>
<h3 data-id="heading-4">4. office文件</h3>
<h4 data-id="heading-5">4.1 docx、xlsx、pdf</h4>
<p>docx、xlsx、pdf文件的预览，我们需要借助vue-office这个库帮我们完成，这里贴上需要安装的依赖，使用方法很简单可以参考官方给出的示例<a href="https://link.juejin.cn?target=https%3A%2F%2F501351981.github.io%2Fvue-office%2Fexamples%2Fdocs%2Fguide%2F" target="_blank" title="https://501351981.github.io/vue-office/examples/docs/guide/" ref="nofollow noopener noreferrer">vue-office简介 | vue-office</a></p>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment">#docx文档预览组件</span>
npm install @vue-office/docx vue-demi

<span class="hljs-comment">#excel文档预览组件</span>
npm install @vue-office/excel vue-demi

<span class="hljs-comment">#pdf文档预览组件</span>
npm install @vue-office/pdf vue-demi
</code></pre>
<h5 data-id="heading-6">4.1.1 word预览</h5>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">"wordType.some((item) =&gt; item == currentFile?.fileType)"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"word"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">vue-office-docx</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"currentFile?.url"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">" height: 100vh;"</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">//引入VueOfficeDocx组件</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">VueOfficeDocx</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@vue-office/docx'</span>
<span class="hljs-comment">//引入相关样式</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">'@vue-office/docx/lib/index.css'</span>

<span class="hljs-keyword">if</span> (wordType.<span class="hljs-title function_">some</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item == fileType)) {
  reader.<span class="hljs-title function_">readAsArrayBuffer</span>(file)
  reader.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> currentFile.<span class="hljs-property">value</span>.<span class="hljs-property">url</span> = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([reader.<span class="hljs-property">result</span>]))  
}
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/fbd7eae16607417d8d56238b241853fa~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTeacqA==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1737500587&amp;x-signature=ODcAhseChRF0Br8f5eOXkDH0jAY%3D" alt="5.jpg" loading="lazy"></p>
<h5 data-id="heading-7">4.1.2 excel预览</h5>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">"excelType.some((item) =&gt; item == currentFile?.fileType)"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"excel"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">VueOfficeExcel</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"currentFile?.url"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100vw; height: 100vh;"</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">//引入VueOfficeExcel组件</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">VueOfficeExcel</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@vue-office/excel'</span>
<span class="hljs-comment">//引入相关样式</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">'@vue-office/excel/lib/index.css'</span>

<span class="hljs-keyword">if</span> (excelType.<span class="hljs-title function_">some</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item == fileType)) {
  reader.<span class="hljs-title function_">readAsArrayBuffer</span>(file)
  reader.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> currentFile.<span class="hljs-property">value</span>.<span class="hljs-property">url</span> = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([reader.<span class="hljs-property">result</span>]))  
}
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/e8fcfb54a3874ddf8694b0ff2950db26~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTeacqA==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1737500587&amp;x-signature=IhDxhYfmoG4dvA1U5wRZcOJnG%2BY%3D" alt="6.jpg" loading="lazy"></p>
<h5 data-id="heading-8">4.1.3 pdf预览</h5>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">"currentFile?.fileType == 'pdf'"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pdf"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">vueOfficePdf</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"currentFile?.url"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100%; height: 100vh;"</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">//引入VueOfficePdf组件</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">VueOfficePdf</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@vue-office/pdf'</span>

<span class="hljs-keyword">if</span> (fileType === <span class="hljs-string">'pdf'</span>) {
  reader.<span class="hljs-title function_">readAsArrayBuffer</span>(file)
  reader.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> currentFile.<span class="hljs-property">value</span>.<span class="hljs-property">url</span> = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([reader.<span class="hljs-property">result</span>]))  
}
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/9ac848a80422481c9e463b317996e122~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTeacqA==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1737500587&amp;x-signature=pajlwgECfiNRkHVOxLzP3PiAZK4%3D" alt="7.jpg" loading="lazy"></p>
<p><strong>说明</strong>：vue-office这个插件库基本可以满足我们的预览需求，但是要注意<code>@vue-office/docx</code>对word的预览只支持<code>docx</code>后缀的文件，还不支持<code>doc</code>后缀的文件，如果有预览doc文件的需求可以选择一些文档预览服务，或者使用类似onlyoffice这种开源的库。</p>
<h4 data-id="heading-9">4.2 ppt文件预览</h4>
<p>使用插件的方式目前找到了一款，<a href="https://link.juejin.cn?target=https%3A%2F%2Fpptx.js.org%2Findex.html" target="_blank" title="https://pptx.js.org/index.html" ref="nofollow noopener noreferrer">PPTXjs</a>这款库，进入链接后要先把源码下载下来，然后根据官方示例，将所需的文件引入完成预览。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/cea2b9e311164349821e2d2b3df7d63e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTeacqA==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1737500587&amp;x-signature=nhmifecHOmNoE3CkEpqtD6OhH%2Bk%3D" alt="8.jpg" loading="lazy"></p>
<h2 data-id="heading-10">使用onlyoffice</h2>
<p>部署ONLYOFFICE，前端使用ONLYOFFICE相关的API完成office文档的预览，可以转到这篇文章<a href="https://juejin.cn/post/7439178695907328000" target="_blank" title="https://juejin.cn/post/7439178695907328000">onlyoffice实现office文件预览</a>，下面贴上两张预览效果图：</p>
<hr>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/2977fd9f656b42f9b6e0579fa51bfed1~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTeacqA==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1737500587&amp;x-signature=VWKrt%2FyBcIdvufiU6rqTla%2Fp%2Few%3D" alt="11.jpg" loading="lazy"></p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/687d97664b6b4c22bca22b99aa4e3182~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTeacqA==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1737500587&amp;x-signature=QcLLZZknLX%2FUYll50fhRMfEjDHA%3D" alt="13.jpg" loading="lazy"></p></div></div>