
        <div class="postTitle">
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mysticbinary/p/18662395" title="发布于 2025-01-26 14:51">
    <span role="heading" aria-level="2">二进制与位操作</span>
    

</a>

        </div>
        <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p></p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#一些基础概念" rel="noopener nofollow">一些基础概念</a></li><li><a href="#用二进制与十进制表示数" rel="noopener nofollow">用二进制与十进制表示数</a></li><li><a href="#符号位与溢出" rel="noopener nofollow">符号位与溢出</a></li><li><a href="#位操作" rel="noopener nofollow">位操作</a><ul><li><a href="#向左移位-" rel="noopener nofollow"><strong>向左移位 (<code>&lt;&lt;</code>)</strong></a></li><li><a href="#向右移位-" rel="noopener nofollow"><strong>向右移位 (<code>&gt;&gt;</code>)</strong></a></li><li><a href="#位的或-" rel="noopener nofollow"><strong>位的或 (<code>|</code>)</strong></a></li><li><a href="#位的与-" rel="noopener nofollow"><strong>位的与 (<code>&amp;</code>)</strong></a></li><li><a href="#位的异或-" rel="noopener nofollow"><strong>位的异或 (<code>^</code>)</strong></a></li><li><a href="#位的取反-" rel="noopener nofollow"><strong>位的取反 (<code>~</code>)</strong></a></li><li><a href="#位操作总结" rel="noopener nofollow">位操作总结</a></li><li><a href="#案例按位与判断奇偶数" rel="noopener nofollow">案例——按位与判断奇偶数</a></li><li><a href="#案例按位异或交换两个数字" rel="noopener nofollow">案例——按位异或交换两个数字</a><ul><li><a href="#交换步骤" rel="noopener nofollow">交换步骤：</a></li></ul></li><li><a href="#案例集合的操作" rel="noopener nofollow">案例——集合的操作</a><ul><li><a href="#1-并集union" rel="noopener nofollow">1. <strong>并集（Union）</strong></a></li><li><a href="#2-交集intersection" rel="noopener nofollow">2. <strong>交集（Intersection）</strong></a></li><li><a href="#3-差集difference" rel="noopener nofollow">3. <strong>差集（Difference）</strong></a></li><li><a href="#4-对称差集symmetric-difference" rel="noopener nofollow">4. <strong>对称差集（Symmetric Difference）</strong></a></li><li><a href="#5-子集subset和超集superset" rel="noopener nofollow">5. <strong>子集（Subset）和超集（Superset）</strong></a></li><li><a href="#位操作与集合操作的对比" rel="noopener nofollow">位操作与集合操作的对比</a></li></ul></li><li><a href="#总结" rel="noopener nofollow">总结：</a></li></ul></li><li><a href="#reference" rel="noopener nofollow">Reference</a></li></ul></div><p></p>
<hr>
<p>都是一些很基础的东西，但总有一种历久弥新的感觉，所以还是想花点时间在做一次笔记。</p>
<h1 id="一些基础概念">一些基础概念</h1>
<ul>
<li>二进制与十进制的转换；</li>
<li>二进制的进位制度；</li>
<li>十六进制的进位制度；</li>
<li>负数、小数如何用二进制表示；
<ul>
<li>符号位、溢出</li>
<li>二进制的原码、反码、补码的认识</li>
</ul>
</li>
<li>二进制数的运算；</li>
<li>二进制如何表示英文字符、符号；</li>
<li>二进制数如何表示各种编码的字符；</li>
</ul>
<p>篇幅有限，这些概念就不展开介绍了，主要是解释下面的<strong>位操作</strong>，以及位操作的应用场景。</p>
<h1 id="用二进制与十进制表示数">用二进制与十进制表示数</h1>
<p><img src="https://img2024.cnblogs.com/blog/1552062/202501/1552062-20250126140510962-1194807241.png" alt="image" loading="lazy"></p>
<p>图1</p>
<h1 id="符号位与溢出">符号位与溢出</h1>
<p>符号位：<br>
符号位是用于表示一个数的正负的二进制位。在计算机中，有符号数通常使用最高位作为符号位：</p>
<ul>
<li>如果符号位是 0，表示该数为正数。</li>
<li>如果符号位是 1，表示该数为负数。</li>
</ul>
<p><strong>无符号数</strong>指最高位不是符号位，整体都是数字。</p>
<p>溢出：<br>
溢出发生在运算结果超出数据类型所能表示的范围时。</p>
<p>假设我们使用8位有符号数（补码表示），范围是 <code>-128</code> 到 <code>127</code>。</p>
<ol>
<li>
<p><strong>正溢出示例</strong>：</p>
<ul>
<li>计算 (100 + 50)：<pre><code>100: 01100100
50:  00110010
-------------
150: 10010110  （二进制 `10010110` 是补码表示的 `-106`）
</code></pre>
<ul>
<li>正确结果应该是 <code>150</code>，但超出了8位有符号数的范围，实际结果为 <code>-106</code>。</li>
<li>这是正溢出。</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>负溢出示例</strong>：</p>
<ul>
<li>计算 (-100 - 50)：<pre><code>-100: 10011100
-50:  11001110
-------------
-150: 01101010  （二进制 `01101010` 是补码表示的 `106`）
</code></pre>
<ul>
<li>正确结果应该是 <code>-150</code>，但超出了8位有符号数的范围，实际结果为 <code>106</code>。</li>
<li>这是负溢出。</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>符号位与溢出的关系：<br>
符号位在溢出判断中起着关键作用：</p>
<ul>
<li>当两个正数相加时，如果结果的符号位变为 <code>1</code>，则说明发生了正溢出。</li>
<li>当两个负数相加时，如果结果的符号位变为 <code>0</code>，则说明发生了负溢出。</li>
</ul>
<h1 id="位操作">位操作</h1>
<blockquote>
<p>在计算机，一切操作最终都会转为二进制，然后再进行位运算操作，几乎所有的计算机语言都支持对二进制的位操作。</p>
</blockquote>
<h2 id="向左移位-"><strong>向左移位 (<code>&lt;&lt;</code>)</strong></h2>
<p><strong>定义</strong>：将二进制数的所有位向左移动指定的位数，右侧空出的位用 <code>0</code> 填充。<br>
<strong>描述</strong>：左移操作相当于将数乘以 (2^n)，其中 (n) 是移动的位数。<br>
<strong>案例</strong>：</p>
<ul>
<li>二进制数 <code>5</code> 的表示是 <code>00000101</code>。</li>
<li>左移 1 位后：<code>00001010</code>（即 <code>10</code>）。</li>
<li>左移 2 位后：<code>00010100</code>（即 <code>20</code>）。</li>
<li>公式：<code>5 &lt;&lt; 1 = 10</code>，<code>5 &lt;&lt; 2 = 20</code>。</li>
</ul>
<hr>
<h2 id="向右移位-"><strong>向右移位 (<code>&gt;&gt;</code>)</strong></h2>
<p><strong>定义</strong>：将二进制数的所有位向右移动指定的位数，左侧空出的位用符号位填充（正数补 <code>0</code>，负数补 <code>1</code>）。<br>
<strong>描述</strong>：右移操作相当于将数除以 (2^n)，其中 (n) 是移动的位数（向下取整）。<br>
<strong>案例</strong>：</p>
<ul>
<li>二进制数 <code>10</code> 的表示是 <code>00001010</code>。</li>
<li>右移 1 位后：<code>00000101</code>（即 <code>5</code>）。</li>
<li>右移 2 位后：<code>00000010</code>（即 <code>2</code>）。</li>
<li>公式：<code>10 &gt;&gt; 1 = 5</code>，<code>10 &gt;&gt; 2 = 2</code>。</li>
</ul>
<hr>
<h2 id="位的或-"><strong>位的或 (<code>|</code>)</strong></h2>
<p><strong>定义</strong>：对两个二进制数的每一位进行逻辑或操作，只要有一个位是 <code>1</code>，结果位就是 <code>1</code>。<br>
<strong>描述</strong>：用于将<strong>某些位</strong>设置为 <code>1</code>。<br>
<strong>案例</strong>：</p>
<ul>
<li>二进制数 <code>5</code> 的表示是 <code>00000101</code>。</li>
<li>二进制数 <code>3</code> 的表示是 <code>00000011</code>。</li>
<li>按位或操作：<code>00000111</code>（即 <code>7</code>）。</li>
<li>公式：<code>5 | 3 = 7</code>。</li>
</ul>
<hr>
<h2 id="位的与-"><strong>位的与 (<code>&amp;</code>)</strong></h2>
<p><strong>定义</strong>：对两个二进制数的每一位进行逻辑与操作，只有当两个位都是 <code>1</code> 时，结果位才是 <code>1</code>。<br>
<strong>描述</strong>：用于提取或<strong>保留某些位</strong>。<br>
<strong>案例</strong>：</p>
<ul>
<li>二进制数 <code>5</code> 的表示是 <code>00000101</code>。</li>
<li>二进制数 <code>3</code> 的表示是 <code>00000011</code>。</li>
<li>按位与操作：<code>00000001</code>（即 <code>1</code>）。</li>
<li>公式：<code>5 &amp; 3 = 1</code>。</li>
</ul>
<hr>
<h2 id="位的异或-"><strong>位的异或 (<code>^</code>)</strong></h2>
<p><strong>定义</strong>：对两个二进制数的每一位进行逻辑异或操作，当两个位不同时，结果位是 <code>1</code>；相同时，结果位是 <code>0</code>。</p>
<p>异或（Exclusive OR，简称 XOR）运算可以通过数学符号“⊕”表示， 具有交换律、结合律、恒等律等性质。</p>
<p><strong>描述</strong>：用于翻转某些位或<strong>比较两个数的差异</strong>。<br>
<strong>案例</strong>：</p>
<ul>
<li>二进制数 <code>5</code> 的表示是 <code>00000101</code>。</li>
<li>二进制数 <code>3</code> 的表示是 <code>00000011</code>。</li>
<li>按位异或操作：<code>00000110</code>（即 <code>6</code>）。</li>
<li>公式：<code>5 ^ 3 = 6</code>。</li>
</ul>
<hr>
<h2 id="位的取反-"><strong>位的取反 (<code>~</code>)</strong></h2>
<p><strong>定义</strong>：对一个二进制数的每一位进行逻辑取反操作，<code>0</code> 变为 <code>1</code>，<code>1</code> 变为 <code>0</code>。<br>
<strong>描述</strong>：用于<strong>翻转所有位</strong>。<br>
<strong>案例</strong>：</p>
<ul>
<li>二进制数 <code>5</code> 的表示是 <code>00000101</code>。</li>
<li>按位取反操作：<code>11111010</code>（即 <code>-6</code>，在补码表示中）。</li>
<li>公式：<code>~5 = -6</code>。</li>
</ul>
<hr>
<h2 id="位操作总结">位操作总结</h2>
<ul>
<li>
<p><strong>左移 (<code>&lt;&lt;</code>)</strong> 和 <strong>右移 (<code>&gt;&gt;</code>)</strong> 用于快速乘以或除以 2 的幂。</p>
</li>
<li>
<p><strong>位的或 (<code>|</code>)</strong> 用于设置某些位为 <code>1</code>。</p>
</li>
<li>
<p><strong>位的与 (<code>&amp;</code>)</strong> 用于提取或保留某些位。</p>
</li>
<li>
<p><strong>位的异或 (<code>^</code>)</strong> 用于翻转某些位或比较差异。</p>
</li>
<li>
<p><strong>位的取反 (<code>~</code>)</strong> 用于翻转所有位。</p>
</li>
</ul>
<p>这些位操作在底层编程、加密算法、图像处理等领域有广泛应用，需要牢记。</p>
<hr>
<h2 id="案例按位与判断奇偶数">案例——按位与判断奇偶数</h2>
<p>2个步骤即可：</p>
<ol>
<li>将数字转换成二进制数；</li>
<li>判断最后一位，为0是偶数，否则为奇数。</li>
</ol>
<h2 id="案例按位异或交换两个数字">案例——按位异或交换两个数字</h2>
<p>利用按位异或操作的性质，可以通过以下步骤交换两个变量 A 和 B值，而无需使用临时变量，达到节省资源的目的。</p>
<h3 id="交换步骤">交换步骤：</h3>
<p><img src="https://img2024.cnblogs.com/blog/1552062/202501/1552062-20250126144721407-1660445455.png" alt="image" loading="lazy"></p>
<p>实例演示：<br>
假设 A = 5，B = 3。</p>
<ol>
<li>
<p><strong>初始值</strong>：</p>
<ul>
<li>(A = 5)（二进制：<code>0101</code>）</li>
<li>(B = 3)（二进制：<code>0011</code>）</li>
</ul>
</li>
<li>
<p><strong>第一步：(A = A \oplus B)</strong></p>
<ul>
<li>(A = 5 \oplus 3)</li>
<li>二进制计算：<pre><code>A: 0 1 0 1
B: 0 0 1 1
-----------
A ^ B: 0 1 1 0  （二进制 `0110`，十进制 6）
</code></pre>
</li>
<li>现在 (A = 6)，(B = 3)。</li>
<li>A 现在存储了A和B的差异。</li>
</ul>
</li>
<li>
<p><strong>第二步：(B = A \oplus B)</strong></p>
<ul>
<li>(B = 6 \oplus 3)</li>
<li>二进制计算：<pre><code>A: 0 1 1 0
B: 0 0 1 1
-----------
A ^ B: 0 1 0 1  （二进制 `0101`，十进制 5）
</code></pre>
</li>
<li>现在 (A = 6)，(B = 5)。</li>
<li>B 现在恢复为原来的A。</li>
</ul>
</li>
<li>
<p><strong>第三步：(A = A \oplus B)</strong></p>
<ul>
<li>(A = 6 \oplus 5)</li>
<li>二进制计算：<pre><code>A: 0 1 1 0
B: 0 1 0 1
-----------
A ^ B: 0 0 1 1  （二进制 `0011`，十进制 3）
</code></pre>
</li>
<li>现在 (A = 3)，(B = 5)。</li>
<li>A现在恢复为原来的B。</li>
</ul>
</li>
</ol>
<h2 id="案例集合的操作">案例——集合的操作</h2>
<p>集合操作用于处理一组不重复的元素，常见的集合操作包括并集、交集、差集和对称差集。</p>
<h3 id="1-并集union">1. <strong>并集（Union）</strong></h3>
<ul>
<li>符号：<code>|</code> 或 <code>union()</code></li>
<li>规则：包含两个集合中所有元素。</li>
<li>示例：<pre><code class="language-python">A = {1, 2, 3}
B = {3, 4, 5}
result = A | B  # {1, 2, 3, 4, 5}
</code></pre>
</li>
</ul>
<h3 id="2-交集intersection">2. <strong>交集（Intersection）</strong></h3>
<ul>
<li>符号：<code>&amp;</code> 或 <code>intersection()</code></li>
<li>规则：仅包含两个集合中共同存在的元素。</li>
<li>示例：<pre><code class="language-python">A = {1, 3, 8}
B = {4, 8}
result = A &amp; B  # {8}
</code></pre>
</li>
</ul>
<p>步骤演示：<br>
假设我们给1到8的数字，编个编号 1-8，<br>
如果某个数字在集合中，相应的位置为1，否则为0，<br>
那么A集合 = <code>10000101</code>，<br>
B集合 = <code>10001000</code><br>
result = A &amp; B<br>
result = {8}</p>
<h3 id="3-差集difference">3. <strong>差集（Difference）</strong></h3>
<ul>
<li>符号：<code>-</code> 或 <code>difference()</code></li>
<li>规则：包含在第一个集合中但不在第二个集合中的元素。</li>
<li>示例：<pre><code class="language-python">A = {1, 2, 3}
B = {3, 4, 5}
result = A - B  # {1, 2}
</code></pre>
</li>
</ul>
<h3 id="4-对称差集symmetric-difference">4. <strong>对称差集（Symmetric Difference）</strong></h3>
<ul>
<li>符号：<code>^</code> 或 <code>symmetric_difference()</code></li>
<li>规则：包含两个集合中非共同存在的元素。</li>
<li>示例：<pre><code class="language-python">A = {1, 2, 3}
B = {3, 4, 5}
result = A ^ B  # {1, 2, 4, 5}
</code></pre>
</li>
</ul>
<h3 id="5-子集subset和超集superset">5. <strong>子集（Subset）和超集（Superset）</strong></h3>
<ul>
<li>子集符号：<code>&lt;=</code> 或 <code>issubset()</code></li>
<li>超集符号：<code>&gt;=</code> 或 <code>issuperset()</code></li>
<li>规则：判断一个集合是否是另一个集合的子集或超集。</li>
<li>示例：<pre><code class="language-python">A = {1, 2}
B = {1, 2, 3}
is_subset = A &lt;= B  # True
is_superset = B &gt;= A  # True
</code></pre>
</li>
</ul>
<hr>
<h3 id="位操作与集合操作的对比">位操作与集合操作的对比</h3>
<table>
<thead>
<tr>
<th>操作类型</th>
<th>位操作（二进制）</th>
<th>集合操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>与</td>
<td><code>&amp;</code></td>
<td><code>&amp;</code></td>
</tr>
<tr>
<td>或</td>
<td>`</td>
<td>`</td>
</tr>
<tr>
<td>异或</td>
<td><code>^</code></td>
<td><code>^</code></td>
</tr>
<tr>
<td>取反</td>
<td><code>~</code></td>
<td>无直接对应操作</td>
</tr>
<tr>
<td>左移/右移</td>
<td><code>&lt;&lt;</code> / <code>&gt;&gt;</code></td>
<td>无直接对应操作</td>
</tr>
</tbody>
</table>
<h2 id="总结">总结：</h2>
<ul>
<li>
<p>计算机都是通过位操作直接操作二进制位，适合底层编程和性能优化，上述的案例也体现了其高效性；</p>
</li>
<li>
<p>按位操作是最节省资源的；</p>
</li>
<li>
<p>集合类操作适合做数据筛选；</p>
</li>
<li>
<p>位操作和集合操作在符号上有一定的相似性，但应用场景不同。只能说集合是基于位操作的。</p>
</li>
</ul>
<h1 id="reference">Reference</h1>
<p>《程序员的数学基础课》</p>

</div>
<div class="clear"></div>

        <div class="postDesc">posted on 
<span id="post-date" data-last-update-days="0.9856315123935185" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-26 16:41">2025-01-26 14:51</span>&nbsp;
<a href="https://www.cnblogs.com/mysticbinary">Mysticbinary</a>&nbsp;
阅读(<span id="post_view_count">84</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18662395" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18662395);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18662395', targetLink: 'https://www.cnblogs.com/mysticbinary/p/18662395', title: '二进制与位操作' })">举报</a>
</div>
    