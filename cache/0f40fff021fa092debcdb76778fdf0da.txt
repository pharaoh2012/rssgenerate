
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/19037002" title="发布于 2025-08-14 07:50">
    <span role="heading" aria-level="2">VS Code 中把「自己部署的 Coder 模型」变成 AI 编程助手</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>公司内部部署了一个QWen-Coder的7B小模型，这个模型虽然不大，但是验证后发现效果还不错。</p>
<p>所以，希望能够在VS Code中使用这个模型来辅助编写代码，这样就可以避免使用其他付费模型。</p>
<h1 id="1-安装插件">1. 安装插件</h1>
<p>在 VS Code 的开源 AI 插件中，Continue 这个插件评价还不错，功能也能满足要求：</p>
<ul>
<li>同时支持「对话」和「Tab 自动补全」两种交互方式</li>
<li>后端可接任何兼容 OpenAI API 格式的模型（本地/云端均可）</li>
<li>完全离线运行，保护源码隐私</li>
</ul>
<p>因此，决定使用此插件来构建AI编程助手。</p>
<p>插件在：<a href="https://marketplace.visualstudio.com/items?itemName=Continue.continue" target="_blank" rel="noopener nofollow">https://marketplace.visualstudio.com/items?itemName=Continue.continue</a></p>
<p>安装之后，VS Code 的边栏上会多一个图标。</p>
<p><img src="https://img2024.cnblogs.com/blog/83005/202508/83005-20250814074817805-996028812.png" alt="" loading="lazy"></p>
<h1 id="2-配置本地模型">2. 配置本地模型</h1>
<p>接下来，我们配置它使用我们自己部署的模型：</p>
<p><img src="https://img2024.cnblogs.com/blog/83005/202508/83005-20250814074817814-1708315107.png" alt="" loading="lazy"></p>
<p>依次点击左侧活动栏上 Continue 图标 --&gt;选择Models --&gt; 右上角齿轮。</p>
<p>就可以打开 Continue 的配置文件（yaml格式的），然后参照如上图的配置。</p>
<p>配置文件中，各个元素的含义如下：</p>
<ol>
<li>基本信息</li>
</ol>
<pre><code class="language-yaml">name: Local Assistant
version: 1.0.0	
schema: v1
</code></pre>
<ul>
<li><code>name</code>: 配置名称，标识为 "Local Assistant"（本地助手）。</li>
<li><code>version</code>: 配置文件版本（1.0.0）。</li>
<li><code>schema</code>: 使用的配置架构版本（v1）。</li>
</ul>
<ol start="2">
<li>模型配置</li>
</ol>
<pre><code class="language-yaml">models:
  - name: Qwen2.5-Coder-7B-Instruct
    provider: "openai"
    model: "Qwen2.5-Coder-7B-Instruct"
    apiBase: "http://ip:port/v1"
    apiKey: ""
    completion_options:
      temperature: 0.5
      top_p: 0.9
    roles:
      - chat
      - autocomplete
      - edit
      - apply
</code></pre>
<ul>
<li>模型定义：使用 <code>Qwen2.5-Coder-7B-Instruct</code>（一个针对代码任务的7B参数模型）。
<ul>
<li><code>provider</code>: 设置为 <code>"openai"</code>，表示兼容OpenAI API格式（这里根据你的实际情况修改）。</li>
<li><code>apiBase</code>: 模型API的终端地址（<code>http://ip:port/v1</code>），指向一个本地或远程服务。</li>
<li><code>apiKey</code>: 你的模型API密钥。</li>
</ul>
</li>
<li>生成参数：
<ul>
<li><code>temperature</code>: 0.5（平衡生成结果的创造性和确定性）。</li>
<li><code>top_p</code>: 0.9（核采样，限制生成时仅考虑概率最高的90% token）。</li>
</ul>
</li>
<li>支持的功能 (<code>roles</code>)：
<ul>
<li><code>chat</code>: 对话交互。</li>
<li><code>autocomplete</code>: 代码自动补全。</li>
<li><code>edit</code>: 代码编辑。</li>
<li><code>apply</code>: 可能指应用代码更改。</li>
</ul>
</li>
</ul>
<ol start="3">
<li>上下文集成</li>
</ol>
<pre><code class="language-yaml">context:
  - provider: code
  - provider: docs
  - provider: diff
  - provider: terminal
  - provider: problems
  - provider: folder
  - provider: codebase
</code></pre>
<p>配置工具可访问的上下文来源（增强模型对当前任务的理解）：</p>
<ul>
<li><code>code</code>: 当前编辑的代码文件。</li>
<li><code>docs</code>: 项目文档或注释。</li>
<li><code>diff</code>: 代码变更差异（如Git diff）。</li>
<li><code>terminal</code>: 终端输出或命令历史。</li>
<li><code>problems</code>: 错误或警告（如IDE提示）。</li>
<li><code>folder</code>: 当前目录文件结构。</li>
<li><code>codebase</code>: 整个代码库的元信息（如符号定义）。</li>
</ul>
<p>总得来说，此配置文件定义了一个本地代码助手，通过HTTP API连接到一个 Qwen2.5-Coder 模型，支持代码补全、编辑、聊天等功能，并集成了开发环境的多维度上下文（代码、终端、文档等）。</p>
<h1 id="3-验证效果">3. 验证效果</h1>
<p>最后，我们来验证下模型的效果。</p>
<p>首先 <code>**@**</code> 一个代码文件，下面的示例中是我的一个工程中的代码：</p>
<p><img src="https://img2024.cnblogs.com/blog/83005/202508/83005-20250814074817833-1863349958.png" alt="" loading="lazy"></p>
<p>接下来，我们让AI帮我们生成<code>CreateTask</code>这个函数的代码：</p>
<p><img src="https://img2024.cnblogs.com/blog/83005/202508/83005-20250814074817834-393995202.png" alt="" loading="lazy"></p>
<p>然后，点击生成的代码右上角的 【Apply】按钮，就能将生成的代码填充到文件中。</p>
<p><img src="https://img2024.cnblogs.com/blog/83005/202508/83005-20250814074817833-587501029.png" alt="" loading="lazy"></p>
<p>点击右上角绿色的勾，就能将代码写入文件，如果代码有错误，可以继续通过<code>prompt</code>交互来修改代码，</p>
<p>或者直接修改代码文件也行。</p>
<h1 id="4-总结">4. 总结</h1>
<p>十分钟内，你就能在 VS Code 里用上「完全属于自己」的 AI 编程助手，既省钱又安心。Happy coding!</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-14 07:50">2025-08-14 07:50</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">162</span>)&nbsp;
评论(<span id="post_comment_count">5</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19037002);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19037002', targetLink: 'https://www.cnblogs.com/wang_yb/p/19037002', title: 'VS Code 中把「自己部署的 Coder 模型」变成 AI 编程助手' })">举报</a>
</div>
        