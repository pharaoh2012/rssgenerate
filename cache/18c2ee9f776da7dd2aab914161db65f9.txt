
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18696521" title="发布于 2025-02-01 21:44">
    <span role="heading" aria-level="2">『Python底层原理』--CPython如何编译代码</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>前一篇我们介绍了<code>CPython VM</code>的运行机制，它基于一系列字节码指令来实现程序逻辑。</p>
<p>不过，<code>Python</code>字节码在完整描述代码功能上存在局限性，于是<strong>代码对象</strong>应运而生。像模块、函数这类代码块的执行，本质上就是对应<strong>代码对象</strong>的运行，<strong>代码对象</strong>涵盖了字节码、常量、变量名以及各类属性信息。</p>
<p>实际开发<code>Python</code>程序时，编写的是常规Python代码，而非字节码或直接创建代码对象。</p>
<p>这就需要<code>CPython</code>编译器发挥作用，将源代码转换为代码对象。</p>
<p>本篇中，我们将探究<code>CPython</code>编译器的工作流程，尝试解析其如何完成编译的任务，从而理解<code>Python</code>程序的底层执行逻辑。</p>
<h1 id="1-编译器概述">1. 编译器概述</h1>
<p>从广义上看，<strong>编译器</strong>是就是一个程序，负责将<strong>源代码</strong>从一种编程语言<strong>转换成</strong>另一种语言。</p>
<p>编译器种类繁多，但在多数情况下，通常所指的编译器是静态编译器，这类工具专门用于将高级编程语言编写的程序转换为可以直接被计算机硬件执行的机器码。</p>
<p>传统的编译器如下图所示，一般分为三个部分：前端，优化器，后端。</p>
<p><img src="https://img2024.cnblogs.com/blog/83005/202502/83005-20250201214332615-1002619183.png" alt="" loading="lazy"></p>
<p>编译器的<strong>前端</strong>负责将源代码转换为一种中间表示（<code>Intermediate Representation</code>, <code>IR</code>）。</p>
<p>随后，<strong>优化器</strong>接收该<code>IR</code>，执行一系列优化操作，并将优化后的<code>IR</code>传递至负责生成目标机器代码的<strong>后端</strong>。</p>
<p>这里为什么不直接将<strong>源代码</strong>编译成<strong>机器码</strong>，而是采用这种<strong>前端-&gt;优化器-&gt;后端</strong>的三阶段设计呢？</p>
<p>其中还要多设计一种中间语言<code>IR</code>，是否多此一举呢？</p>
<p>其实编译器采用这种架构有显著的<strong>优势</strong>，其中中间语言<code>IR</code>设计得既不依赖于特定的源语言也不绑定于具体的目标架构，当编译器需要支持新的编程语言时，仅需开发相应的前端模块；</p>
<p>当编译器扩展对新型目标硬件的支持，只需增加对应的后端模块即可。</p>
<p>这样不仅提升了编译系统的灵活性，还极大地简化了其维护与升级过程。</p>
<p><code>CPython</code>编译器也是采用的这种三阶段设计，只不过，它的编译器前端针对的是Python源码，中间代码是<strong>抽象语法树</strong>（<code>AST</code>），最后生成的不是直接针对硬件的机器码，而是<strong>代码对象</strong>（<code>Code Object</code>）。</p>
<p><img src="https://img2024.cnblogs.com/blog/83005/202502/83005-20250201214332597-1715429924.png" alt="" loading="lazy"></p>
<h1 id="2-编译器关键组件">2. 编译器关键组件</h1>
<p>接下来，来看看<code>CPython</code>编译器中的关键组件，它们是完成从<strong>Python源码</strong>到<strong>代码对象</strong>的核心部分。</p>
<p>扩展上一节中的图，将编译器中的组件加入其中。</p>
<p><img src="https://img2024.cnblogs.com/blog/83005/202502/83005-20250201214332616-179753243.png" alt="" loading="lazy"></p>
<p>图中关键的组件是<strong>词法分析</strong>（拆分源码，生成<code>Token</code>），<strong>语法分析</strong>（从<code>Token</code>生成<code>AST</code>）以及<strong>编译</strong>（从<code>AST</code>到<strong>代码对象</strong><code>CodeObject</code>）三个部分。</p>
<h2 id="21-词法分析">2.1. 词法分析</h2>
<p>这个步骤中，编译器将<strong>源代码</strong>拆分为有意义的标记<code>Token</code>（如标识符、关键字、运算符等），方便后续的语法分析处理。</p>
<p><strong>词法分析</strong>在英文中成为<code>tokenizer</code>，它在CPython源码中的位置：<code>Parser/tokenizer.h</code>和<code>Parser/tokenizer.c</code>。</p>
<p><strong>词法分析</strong>阶段，将我们的<code>Python</code>源代码转换为一系列由<code>CPython</code>定义的<code>Token</code>流。</p>
<p><code>Token</code>的定义可参考：<code>Parser/token.c</code></p>
<pre><code class="language-c">/* Token names */

const char * const _PyParser_TokenNames[] = {
    "ENDMARKER",
    "NAME",
    "NUMBER",
    "STRING",
    "NEWLINE",
    "INDENT",
    "DEDENT",
    "LPAR",
    "RPAR",
    // 省略... ...
    "NL",
    "&lt;ERRORTOKEN&gt;",
    "&lt;ENCODING&gt;",
    "&lt;N_TOKENS&gt;",
};
</code></pre>
<p>下面我们写一段简单的代码，然后看看<strong>词法分析</strong>后生成的是什么，直观的来了解下<strong>词法分析</strong>的结果。</p>
<pre><code class="language-python">def max(x, y):
    if x &gt;= y:
        return x
    else:
        return y
</code></pre>
<p>这是一个很简单的函数<code>max</code>，就是从<code>x, y</code>两个参数中选择一个大的返回。</p>
<p>查看<strong>词法分析</strong>的结果，在命令行中执行如下命令：</p>
<pre><code class="language-bash">$  python.exe -m tokenize .\cpython-compiler.py
0,0-0,0:            ENCODING       'utf-8'
1,0-1,3:            NAME           'def'
1,4-1,7:            NAME           'max'
1,7-1,8:            OP             '('
1,8-1,9:            NAME           'x'
1,9-1,10:           OP             ','
1,11-1,12:          NAME           'y'
1,12-1,13:          OP             ')'
1,13-1,14:          OP             ':'
1,14-1,15:          NEWLINE        '\n'
2,0-2,4:            INDENT         '    '
2,4-2,6:            NAME           'if'
2,7-2,8:            NAME           'x'
2,9-2,11:           OP             '&gt;='
2,12-2,13:          NAME           'y'
2,13-2,14:          OP             ':'
2,14-2,15:          NEWLINE        '\n'
3,0-3,8:            INDENT         '        '
3,8-3,14:           NAME           'return'
3,15-3,16:          NAME           'x'
3,16-3,17:          NEWLINE        '\n'
4,4-4,4:            DEDENT         ''
4,4-4,8:            NAME           'else'
4,8-4,9:            OP             ':'
4,9-4,10:           NEWLINE        '\n'
5,0-5,8:            INDENT         '        '
5,8-5,14:           NAME           'return'
5,15-5,16:          NAME           'y'
5,16-5,17:          NEWLINE        '\n'
6,0-6,0:            DEDENT         ''
6,0-6,0:            DEDENT         ''
6,0-6,0:            ENDMARKER      ''
</code></pre>
<p>其中，<code>cpython-compiler.py</code>文件中就是上面<code>max</code>函数的代码。</p>
<p>从上面可以看出，<code>CPython</code>在第一行自动为我们添加了<code>utf-8</code>的说明，也就是说，如果你使用的是Python3，</p>
<p>那么，不需要像以前Python2时那样，在代码第一行指定<code># -*- coding: utf-8 -*-</code>。</p>
<p>此外，<strong>词法分析</strong>只是简单的解析源码，并转换为<code>CPython</code>中<code>Token</code>，它并不管代码的语法是否正确。</p>
<p>比如，我把上面的Python代码改为：</p>
<pre><code class="language-python">defff max(x, y):
    ifaa x &gt;= y:
        return x
    elsebb:
        return y
</code></pre>
<p>这里面的关键字<code>def</code>改成<code>defff</code>，<code>if</code>改成<code>ifaa</code>，<code>else</code>改成了<code>elsebb</code>，明显这是错误的<code>Python</code>代码，但是不影响<strong>词法分析</strong>。</p>
<p><img src="https://img2024.cnblogs.com/blog/83005/202502/83005-20250201214332613-1510760835.png" alt="" loading="lazy"></p>
<p>依然可以正常的词法分析并生成<code>Token</code>。</p>
<h2 id="22-语法分析">2.2. 语法分析</h2>
<p><strong>语法分析</strong>的工作首先是检查上一步生成的输入<code>Token</code>流是否是语法正确的<code>Python</code>代码。</p>
<p>比如上一节中最后的那段错误的<code>Python</code>代码，虽然可以进行<strong>词法分析</strong>，但是在<strong>语法分析</strong>阶段生成<code>AST</code>的时候会报错。</p>
<p>下图就是生成<code>AST</code>的时候，提示了语法错误，并且无法生成<code>AST</code>。</p>
<p>生成<code>AST</code>的命令：<code>python.exe -m ast &lt;file&gt;</code></p>
<p><img src="https://img2024.cnblogs.com/blog/83005/202502/83005-20250201214332640-1970902378.png" alt="" loading="lazy"></p>
<p><strong>语法分析</strong>的过程远比<strong>词法分析</strong>复杂很多很多，CPython中的语法分析代码请参考：<code>Parser/parser.c</code></p>
<p>把语法错误改成最初的正确语法之后，再次生成<code>AST</code>：</p>
<pre><code class="language-python">def max(x, y):
    if x &gt;= y:
        return x
    else:
        return y
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202502/83005-20250201214332611-1315909319.png" alt="" loading="lazy"></p>
<p>这样就将代码变成了一棵<strong>抽象语法树</strong>（<code>AST</code>）。画成示意图大致如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/83005/202502/83005-20250201214332874-395753203.png" alt="" loading="lazy"></p>
<p>语法分析之后，得到了<code>AST</code>，也就是<strong>CPython编译器</strong>的<strong>中间代码</strong>（<code>IR</code>），</p>
<p>接下来经过<strong>CPython编译器</strong>的优化之后生成优化的<code>AST</code>，最后进入后端处理。</p>
<h2 id="23-编译">2.3. 编译</h2>
<p><strong>编译</strong>是<strong>CPython编译器</strong>3个关键组件中的最后一个，经过编译之后，将生成<strong>字节码</strong>，保存在<code>.pyc</code>文件中。</p>
<p>再次提醒，<strong>CPython编译器</strong>和传统静态语言（<code>C/C++</code>， <code>Rust</code>等）的编译器不一样，它生成的不是针对特定硬件平台的机器码。</p>
<p>我们运行<code>Python</code>程序时，实际是由<code>Python</code>解释器逐条执行<strong>编译</strong>之后生成的字节码。</p>
<p>编译<code>Python</code>文件使用如下的命令：</p>
<pre><code class="language-bash">$  python.exe -m compileall .\cpython-compiler.py
Compiling '.\\cpython-compiler.py'...

$  ls .\__pycache__\

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----        2025/02/01  21:16:14            248 cpython-compiler.cpython-312.pyc
</code></pre>
<p>执行命令之后，可以看到生成了一个<code>__pycache__</code>文件夹，其中有编译之后的字节码文件，即<code>.pyc</code>文件。</p>
<p><strong>编译</strong>相关的<code>CPython</code>源码请参考：<code>Python/compile.c</code>。</p>
<p><strong>编译</strong>之后生成的<code>.pyc</code>文件中的字节码其实就是<strong>代码对象</strong>（<code>CodeObject</code>），上一篇中介绍了<strong>代码对象</strong>。</p>
<p>只是这个文件是二进制的，无法直接打开查看，想看字节码的话，可以用如下的命令：</p>
<pre><code class="language-bash">$  python.exe -m dis .\cpython-compiler.py
  0           0 RESUME                   0

  1           2 LOAD_CONST               0 (&lt;code object max at 0x00000207FC2ADB50, file ".\cpython-compiler.py", line 1&gt;)
              4 MAKE_FUNCTION            0
              6 STORE_NAME               0 (max)
              8 RETURN_CONST             1 (None)

Disassembly of &lt;code object max at 0x00000207FC2ADB50, file ".\cpython-compiler.py", line 1&gt;:
  1           0 RESUME                   0

  2           2 LOAD_FAST                0 (x)
              4 LOAD_FAST                1 (y)
              6 COMPARE_OP              92 (&gt;=)
             10 POP_JUMP_IF_FALSE        2 (to 16)

  3          12 LOAD_FAST                0 (x)
             14 RETURN_VALUE

  5     &gt;&gt;   16 LOAD_FAST                1 (y)
             18 RETURN_VALUE
</code></pre>
<h1 id="3-总结">3. 总结</h1>
<p>本篇主要从比较宏观的角度介绍了<code>CPython</code>如何编译<code>Python</code>代码的。</p>
<p>具体的<strong>编译过程</strong>和<strong>优化过程</strong>并没有详细说明，这需要对编译原理有深入的认识，而且限于自己的能力，我也无法通过一篇文章就说明清楚。</p>
<p>感兴趣的朋友可以研究研究<code>github</code>上<code>CPython</code>的源码，本文参考的源码是<strong>CPython 3.12分支</strong>。</p>
<p>最后，总结一下本文的主要内容。</p>
<p>首先，<strong>CPython编译器</strong>的架构沿袭了传统的设计理念，其主要组成部分包括<strong>前端</strong>和<strong>后端</strong>。</p>
<p><strong>前端</strong>通常被称为<strong>解析器</strong>，其核心职责是将源代码转换为抽象语法树（Abstract Syntax Tree, <code>AST</code>）。</p>
<p>这一过程主要包括<strong>词法分析</strong>和<strong>语法分析</strong>，<strong>词法分析</strong>负责从输入的文本中生成一系列具有语言意义的基本单元，即标记（Tokens）。</p>
<p><strong>语法分析</strong>主要生成解析树以及将其转换为<code>AST</code>。</p>
<p><strong>后端</strong>，有时也被称作<strong>编译器</strong>，接收<strong>前端</strong>生成的<code>AST</code>作为输入，据此生成代码对象，并进行优化处理。</p>
<p>最终，生成的代码对象即可用于后续执行。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.5407243171921297" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-01 21:45">2025-02-01 21:44</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">93</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18696521" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18696521);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18696521', targetLink: 'https://www.cnblogs.com/wang_yb/p/18696521', title: '『Python底层原理』--CPython如何编译代码' })">举报</a>
</div>
        