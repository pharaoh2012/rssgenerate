
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/cunzai/p/18617127" title="发布于 2024-12-19 14:03">
    <span role="heading" aria-level="2">C#使用log4net和sqlite数据库记录日志</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			    <div id="cnblogs_post_description" style="display: none">
        
        为什么要把日志存到数据库里？

因为结构化的数据库存储的日志信息，可以写专门的软件读取历史日志信息，通过各种条件筛选，可操作性极大增强，有这方面需求的开发人员可以考虑。

为什么选择SQLite？

轻量级数据库，免安装，数据库的常用的基本功能都有，可以随程序迁移到不同的电脑上使用。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="1-安装包">1 安装包</h2>
<p>两个包：</p>
<ul>
<li>log4net</li>
<li>System.Data.SQLite</li>
</ul>
<p>第二个包也可以使用Microsoft.Data.Sqlite，查到的资料显示如果环境使用的是 .NET Core 或 .NET 5+，则建议使用Microsoft.Data.Sqlite。但是我并没有测试第二个包，可能使用上有区别。</p>
<h2 id="2-下载sqlite"><font style="color: rgba(36, 41, 47, 1)">2 下载Sqlite</font></h2>
<p>如果本地没有sqlite环境的话，需要先下载。<a href="https://sqlite.org/download.html" target="_blank" rel="noopener nofollow">官网下载链接</a></p>
<p>进去之后直接找各自环境对应的版本，如果是windows环境的话，直接下载下图中标记的tool，中间那个下载链接是下载sqlite3.dll，不过我并不清楚如何使用。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2024/png/28628673/1729673529583-c1e7108f-45d3-4b5b-bf61-ad8177647dd2.png" alt="" loading="lazy"></p>
<p>tool解压之后有如下几个文件，双击打开sqlite3.exe即可。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2024/png/28628673/1729673685541-2d4d0ee9-72bb-4455-bc87-78f21afd0b85.png" alt="" loading="lazy"></p>
<h2 id="3-sqlite常用命令"><font style="color: rgba(36, 41, 47, 1)">3 Sqlite常用命令</font></h2>
<p>打开是一个命令行界面，可以使用.help查看常用的命令及解释。</p>
<pre><code class="language-bash">.help
</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2024/png/28628673/1729673803046-4157a11a-2c8a-4a9e-89bf-7fba6d518b75.png" alt="" loading="lazy"></p>
<p>创建数据库文件使用<font style="background-color: rgba(231, 233, 232, 1)">.open xxx</font>，这条语句，如果发现数据库文件存在，就会直接打开，如果不存在，就会先创建再打开。</p>
<pre><code class="language-bash">.open test.db
</code></pre>
<p>在目录内可以看到创建的数据库文件。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2024/png/28628673/1729673977210-0d20f810-5802-475e-bb83-b78ecb8f5122.png" alt="" loading="lazy"></p>
<p><font style="background-color: rgba(231, 233, 232, 1)">.databases</font>可以查询所有数据库文件</p>
<p><img src="https://cdn.nlark.com/yuque/0/2024/png/28628673/1729674034639-c8eeb583-fbfd-499c-ac3e-7a03798ee1ab.png" alt="" loading="lazy"></p>
<p><font style="background-color: rgba(231, 233, 232, 1)">.tables</font>可以查询所有表（我还未创建，所以目前还没有表）</p>
<p><img src="https://cdn.nlark.com/yuque/0/2024/png/28628673/1729674068565-6e85ab38-8e27-45f8-b33e-71fbec255851.png" alt="" loading="lazy"></p>
<p>sql语句的话可以查询相关资料。</p>
<p>查询的数据以标准格式显示。</p>
<pre><code class="language-bash">.header on
.mode column
SELECT * FROM COMPANY;
</code></pre>
<p>当然sqlite也有可视化的软件，但是我目前没用到，所以没有下载安装，需要的话可以自行查询。</p>
<h2 id="4-创建日志相关基本表">4 创建日志相关基本表</h2>
<p>使用命令创建日志表，包含id（使用自增，当然可以换成uuid或者其它形式）、日期、线程号、级别（info、error这些）、记录者、具体记录的信息、异常信息。具体内容要对应log4net的配置。</p>
<pre><code class="language-sql">CREATE TABLE Log (
  Id INTEGER PRIMARY KEY AUTOINCREMENT,
  Date DATETIME,
  Thread VARCHAR(255),
  Level VARCHAR(50),
  Logger VARCHAR(255),
  Message TEXT,
  Exception TEXT
);
</code></pre>
<h2 id="5-log4net配置">5 log4net配置</h2>
<p>更换数据库连接。sql语句的内容对应数据库基本表的字段。</p>
<pre><code class="language-xml">&lt;configuration&gt;
  &lt;configSections&gt;
    &lt;section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" /&gt;
  &lt;/configSections&gt;

  &lt;log4net&gt;
    &lt;appender name="AdoNetAppender" type="log4net.Appender.AdoNetAppender"&gt;
      &lt;bufferSize value="1" /&gt;
      &lt;connectionType value="System.Data.SQLite.SQLiteConnection, System.Data.SQLite" /&gt;
      &lt;connectionString value="Data Source=./database/logs.db;Version=3;" /&gt;
      &lt;commandText value="INSERT INTO Log (Date, Thread, Level, Logger, Message, Exception) VALUES (@log_date, @thread, @log_level, @logger, @message, @exception)" /&gt;
      
      &lt;parameter&gt;
        &lt;parameterName value="@log_date" /&gt;
        &lt;dbType value="DateTime" /&gt;
        &lt;layout type="log4net.Layout.RawTimeStampLayout" /&gt;
      &lt;/parameter&gt;
      &lt;parameter&gt;
        &lt;parameterName value="@thread" /&gt;
        &lt;dbType value="String" /&gt;
        &lt;size value="255" /&gt;
        &lt;layout type="log4net.Layout.PatternLayout"&gt;
          &lt;conversionPattern value="%thread" /&gt;
        &lt;/layout&gt;
      &lt;/parameter&gt;
      &lt;parameter&gt;
        &lt;parameterName value="@log_level" /&gt;
        &lt;dbType value="String" /&gt;
        &lt;size value="50" /&gt;
        &lt;layout type="log4net.Layout.PatternLayout"&gt;
          &lt;conversionPattern value="%level" /&gt;
        &lt;/layout&gt;
      &lt;/parameter&gt;
      &lt;parameter&gt;
        &lt;parameterName value="@logger" /&gt;
        &lt;dbType value="String" /&gt;
        &lt;size value="255" /&gt;
        &lt;layout type="log4net.Layout.PatternLayout"&gt;
          &lt;conversionPattern value="%logger" /&gt;
        &lt;/layout&gt;
      &lt;/parameter&gt;
      &lt;parameter&gt;
        &lt;parameterName value="@message" /&gt;
        &lt;dbType value="String" /&gt;
        &lt;size value="4000" /&gt;
        &lt;layout type="log4net.Layout.PatternLayout"&gt;
          &lt;conversionPattern value="%message" /&gt;
        &lt;/layout&gt;
      &lt;/parameter&gt;
      &lt;parameter&gt;
        &lt;parameterName value="@exception" /&gt;
        &lt;dbType value="String" /&gt;
        &lt;size value="2000" /&gt;
        &lt;layout type="log4net.Layout.ExceptionLayout" /&gt;
      &lt;/parameter&gt;
    &lt;/appender&gt;

    &lt;root&gt;
      &lt;level value="ALL" /&gt;
      &lt;appender-ref ref="AdoNetAppender" /&gt;
    &lt;/root&gt;
  &lt;/log4net&gt;
&lt;/configuration&gt;
</code></pre>
<h2 id="6-日志记录">6 日志记录</h2>
<p>把生成的db文件拷到程序里，这个文件就是记录文件的数据库了，其它的都不重要。当然，如果想查看数据库的话，也可以把sqlite3.exe拷过来。</p>
<p>读取log4net的配置建议写在AssemblyInfo.cs，这样程序启动时会默认加载配置文件。</p>
<pre><code class="language-csharp">//Log4net配置
[assembly: log4net.Config.XmlConfigurator(ConfigFile = "log4net.config", Watch = true)]
</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2024/png/28628673/1729675803360-1b39de2f-9360-409f-abd5-e0676d6de74e.png" alt="" loading="lazy"></p>
<p>具体程序如下：</p>
<pre><code class="language-csharp">private static readonly ILog log = LogManager.GetLogger(typeof(Form1));

log.Info("这是一条info语句");
log.Warn("这是一条warn语句");
log.Error("这是一条错误语句", new Exception("测试异常"));
</code></pre>
<p>查看日志是否正常写入数据库。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2024/png/28628673/1729675894685-c3c47e8a-f4b9-478c-be4f-7a8604dccf01.png" alt="" loading="lazy"></p>
<h2 id="7-使用c程序查询sqlite">7 使用C#程序查询sqlite</h2>
<p>程序如下：</p>
<pre><code class="language-csharp">// 构建连接字符串
string connectionString = $"Data Source=./database/SoftWareBaseLog.db;Version=3;";

// 创建 SQLite 连接
using (var connection = new SQLiteConnection(connectionString))
{
    connection.Open();

    // 创建 SQL 命令
    string sql = "SELECT Message FROM Log where Level='ERROR'";
    using (var command = new SQLiteCommand(sql, connection))
    {
        // 执行命令并读取数据
        using (var reader = command.ExecuteReader())
        {
            while (reader.Read())
            {
                string msg = reader.GetString(0);
                Console.WriteLine(msg);
            }
        }
    }
}
</code></pre>
<h2 id="8-实时显示日志">8 实时显示日志</h2>
<p>现在所有日志都写到数据库里了，那要是还想实时显示到界面上，当然也有很多方式实现，不过我这里建议实时显示可以使用log4net的自有功能。</p>
<p>比如我想使用winform中的listbox来实时显示日志，可以建立一个Appender（附加），继承于log4net的AppenderSkeleton，这是一个抽象类，有一个抽象方法。</p>
<p>具体的，可以参考以下程序，这里会显示所有的日志，如果需要过滤的话，可以在这个基础上改。另外，一定一定一定要给this.Layout赋值，这是日志在界面上的显示方式，如果没有写的话，就会收获一个报错：“A layout must be set”，去网上搜这条内容，不一定能找到解决方案。</p>
<pre><code class="language-csharp">public class ListBoxAppender : AppenderSkeleton
{
    private ListBox _ListBox;

    public ListBoxAppender(ListBox box)
    {
        _ListBox = box;
        this.Layout = new PatternLayout("%date [%thread] %-5level %logger - %message%newline");
    }

    protected override void Append(LoggingEvent loggingEvent)
    {
        // 获取日志信息
        string logMessage = RenderLoggingEvent(loggingEvent);

        // 更新 UI 控件
        if (_ListBox.InvokeRequired)
        {
            _ListBox.Invoke(new Action(() =&gt; AppendText(logMessage)));
        }
        else
        {
            AppendText(logMessage);
        }
    }

    private void AppendText(string text)
    {
        _ListBox.Items.Add(text);
    }
}
</code></pre>
<p>只需要给log4net配置一次就可以使用，这样，每次调用日志记录，界面上的lbxLog控件就可以一直显示最新的日志信息。</p>
<pre><code class="language-csharp">// 添加自定义 Appender
var listBoxAppender = new ListBoxAppender(lbxLog);
log4net.Config.BasicConfigurator.Configure(listBoxAppender);
</code></pre>
<p>但是，测试出现了问题，在多线程、短时间添加多条日志的情况下会导致界面卡死，猜测是多条日志抢一个listbox的索引出现的问题，更好的方案是添加缓存机制，生产者-消费者模式。</p>
<p>生产者只记录到队列里即可，这里为了避免队列堆积，使用了定长的一个概念，太多的日志堆积会丢掉一部份数据。</p>
<pre><code class="language-csharp">public class LogQueueAppender : AppenderSkeleton
{
    /// &lt;summary&gt;
    /// 锁对象
    /// &lt;/summary&gt;
    private static readonly object _lock = new object();

    private static LogQueueAppender Instance { get; set; }

    /// &lt;summary&gt;
    /// 日志队列
    /// 不再直接更新控件，在日志频繁时会出现控件卡死的情况
    /// &lt;/summary&gt;
    private ConcurrentQueue&lt;string&gt; LogQueue { get; } = new ConcurrentQueue&lt;string&gt;();

    private LogQueueAppender()
    {
        //Layout必须赋值，否则会报错
        this.Layout = new PatternLayout("%date [%thread] %-5level %logger - %message%newline");
    }

    /// &lt;summary&gt;
    /// 获取实体对象
    /// &lt;/summary&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static LogQueueAppender GetInstance()
    {
        if (Instance == null)
        {
            lock (_lock)
            {
                if (Instance == null)
                {
                    Instance = new LogQueueAppender();
                }
            }
        }

        return Instance;
    }

    /// &lt;summary&gt;
    /// 获取日志队列
    /// &lt;/summary&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public ConcurrentQueue&lt;string&gt; GetLogQueue()
    {
        return LogQueue;
    }

    /// &lt;summary&gt;
    /// 覆写Append方法
    /// &lt;/summary&gt;
    /// &lt;param name="loggingEvent"&gt;&lt;/param&gt;
    protected override void Append(LoggingEvent loggingEvent)
    {
        // 获取日志信息
        string logMessage = RenderLoggingEvent(loggingEvent);
        AppendText(logMessage);
    }

    /// &lt;summary&gt;
    /// 添加日志信息
    /// &lt;/summary&gt;
    /// &lt;param name="text"&gt;&lt;/param&gt;
    private void AppendText(string text)
    {
        //最多存储200条日志，多余的会直接丢弃
        if (LogQueue.Count &gt;= 200)
        {
            LogQueue.TryDequeue(out string message);                
        }
        LogQueue.Enqueue(text);
    }
</code></pre>
<p>而消费者负责将日志信息更新到界面上，这里每次只更新一条日志信息，我认为足够了，当然这可以改成一次更新多条信息，避免日志堆积。</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// 读取日志信息
/// &lt;/summary&gt;
private void LoadLog()
{
    LogThreadRunFlag = true;
    Task.Factory.StartNew(() =&gt; {
        while (LogThreadRunFlag == true)
        {
            bool flag = LogQueueAppender.GetInstance().GetLogQueue().TryDequeue(out string log);
            if (flag)
            {
                lvwLog.Invoke(new Action(() =&gt; AppendText(log)));
            }
            Thread.Sleep(50);
        }
    }, TaskCreationOptions.LongRunning);           
}

/// &lt;summary&gt;
/// 添加到界面中
/// &lt;/summary&gt;
/// &lt;param name="text"&gt;日志信息&lt;/param&gt;
private void AppendText(string text)
{
    if (lvwLog.Items.Count == 100)
    {
        lvwLog.Items.Clear();
    }
    lvwLog.Items.Add(text);
    if (text.Contains("ERROR"))
    {
        lvwLog.Items[lvwLog.Items.Count - 1].ForeColor = Color.Red;
    }
}
</code></pre>
<p>另外，控件换成了listview，因为这个可以很方便地“高亮”错误日志。相关listview的设置如下：</p>
<pre><code class="language-csharp">lvwLog.View = View.Details; // 设置为竖向排列
lvwLog.Scrollable = true; // 确保滚动条可用
lvwLog.Columns.Add("日志信息", -2);   //添加一列数据，并占满全行
lvwLog.DoubleBuffered(true);    //使用双缓冲，避免闪烁
</code></pre>
<p>效果如下：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2024/png/28628673/1729826981565-424439b6-890d-400a-94e2-7f9c1443e8d5.png" alt="" loading="lazy"></p>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="4.039057935665509" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-19 14:03">2024-12-19 14:03</span>&nbsp;
<a href="https://www.cnblogs.com/cunzai">纸照片</a>&nbsp;
阅读(<span id="post_view_count">49</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18617127" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18617127);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18617127', targetLink: 'https://www.cnblogs.com/cunzai/p/18617127', title: 'C#使用log4net和sqlite数据库记录日志' })">举报</a>
</div>
	