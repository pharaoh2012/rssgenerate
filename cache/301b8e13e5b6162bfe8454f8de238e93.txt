
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xiongze520/p/18902755" title="发布于 2025-05-29 16:56">
    <span role="heading" aria-level="2">.NET8带来的一些新特性</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<blockquote>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px; color: rgba(0, 0, 0, 1)">最近收到任务，项目从.NET 5升级为.NET 8。</span></p>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px; color: rgba(0, 0, 0, 1)">特意去了解了一下.NET8的新特性，经过验证后，分享一些这些新特性。</span></p>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px; color: rgba(0, 0, 0, 1)">管他用得到用不到，先了解了再说。</span></p>
</blockquote>
<h2>一、性能提升</h2>
<h3>1、‌原生AOT深度优化</h3>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">通过预编译技术生成无JIT的独立可执行文件（启动速度提升40%，内存占用减少60%）、GC、ASP.NET Core、EF Core 等多个方面进行了优化，整体性能有明显提升。</span></p>
<p><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">这个特别有感触，由于历史项目的原因，.NET5启动项目打开swagger页面需要加载60s以上才能出来，升级后只需要3s左右！！！！！!</span></strong></p>
<h3>2、‌序列化改进</h3>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">新增对<strong><code>Half</code>、<code>Int128</code>、<code>ReadOnlyMemory&lt;T&gt;</code></strong>等类型的原生序列化支持，优化跨平台数据交换：</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> json = JsonSerializer.Serialize(<span style="color: rgba(0, 0, 255, 1)">new</span> { Value = (Half)<span style="color: rgba(128, 0, 128, 1)">1.2</span> });  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 半精度浮点</span></pre>
</div>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">增强科学计算兼容性。</span></p>
<hr>
<p>&nbsp;</p>
<h2><span style="font-family: &quot;Microsoft YaHei&quot;">二、语法简化</span></h2>
<h3>1、‌主构造函数扩展</h3>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">允许所有类、结构体和record 类型直接在类型声明中定义主构造函数参数（此前仅 record 支持），</span></p>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">自动生成只读属性，这样可以简化字段和属性的初始化：</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 等效传统构造函数+属性组合</span>
<span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span> Person(<span style="color: rgba(0, 0, 255, 1)">string</span> name, <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> age)
{
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> PrintInfo()
    {
        Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{name} is {age} years old.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    }
}</span></pre>
</div>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">参数作用域覆盖整个类体，显式构造函数需通过<strong><code>this()</code></strong>调用主构造函数。</span></p>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">适用于<strong>DTO（数据传输对象）设计</strong>、<strong>不可变类型（如配置类、实体模型）</strong>、<strong>减少类层级中的样板代码</strong>。</span></p>
<h3>2、‌集合表达式</h3>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">统一集合初始化语法，支持<strong><code>[]</code></strong>符号替代传统声明方式：</span></p>
<div class="cnblogs_code">
<pre>List&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt; names = [<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Alice</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Bob</span><span style="color: rgba(128, 0, 0, 1)">"</span>];  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 自动推导为List&lt;string&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">var</span> dict = [ [<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">a</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">1</span>], [<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">b</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">2</span>] ];        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 初始化字典</span>
<span style="color: rgba(0, 0, 255, 1)">int</span>[][] matrix = [[<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 128, 1)">2</span>], [<span style="color: rgba(128, 0, 128, 1)">3</span>,<span style="color: rgba(128, 0, 128, 1)">4</span>]];        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 支持多维数组初始化</span></pre>
</div>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">减少30%样板代码，支持跨数组、列表和Span的无缝转换。</span></p>
<h3>3、‌默认lamdba参数</h3>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">Lambda表达式支持可选参数，增强事件处理灵活性：</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> add = (<span style="color: rgba(0, 0, 255, 1)">int</span> x = <span style="color: rgba(128, 0, 128, 1)">1</span>, <span style="color: rgba(0, 0, 255, 1)">int</span> y = <span style="color: rgba(128, 0, 128, 1)">2</span>) =&gt; x +<span style="color: rgba(0, 0, 0, 1)"> y;
Console.WriteLine(add()); </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输出 3</span>

<span style="color: rgba(0, 0, 255, 1)">var</span> func = (<span style="color: rgba(0, 0, 255, 1)">int</span> x = <span style="color: rgba(128, 0, 128, 1)">5</span>) =&gt; x * <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">;  
Console.WriteLine(func());  </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输出10</span></pre>
</div>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">适用于</span><strong style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">动态生成回调逻辑的场景</strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">、</span><strong style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">简化事件回调</strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">和</span><strong style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">委托设计模式</strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">。</span></p>
<hr>
<p>&nbsp;</p>
<h2>三、类型系统优化</h2>
<h3>1、‌任意类型别名</h3>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">通过<strong><code>using</code></strong>为元组、指针等复杂类型创建别名，不再局限于类型：</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span> Point = (<span style="color: rgba(0, 0, 255, 1)">int</span> X, <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> Y);  
Point p </span>= (<span style="color: rgba(128, 0, 128, 1)">10</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>);  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 等效ValueTuple&lt;int, int&gt;</span>

<span style="color: rgba(0, 0, 255, 1)">using</span> MyList = System.Collections.Generic.List&lt;<span style="color: rgba(0, 0, 255, 1)">int</span>&gt;<span style="color: rgba(0, 0, 0, 1)">;
MyList numbers </span>= <span style="color: rgba(0, 0, 255, 1)">new</span>() { <span style="color: rgba(128, 0, 128, 1)">1</span>, <span style="color: rgba(128, 0, 128, 1)">2</span>, <span style="color: rgba(128, 0, 128, 1)">3</span> };</pre>
</div>
<h3>2、‌改进的空值检查</h3>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">参数级空校验语法<strong><code>!!</code></strong>自动生成异常：</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span> Validate(<span style="color: rgba(0, 0, 255, 1)">string</span> s!!) =&gt; s.Trim();</pre>
</div>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">编译后自动插入<strong><code>if (s is null) throw new ArgumentNullException(...)</code></strong><code>。</code></span></p>
<h3>3、‌内联数组</h3>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">内存紧凑的固定长度数组，优化数值计算场景：</span></p>
<div class="cnblogs_code">
<pre>[InlineArray(<span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">)] 
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">struct</span> Vec4 { <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">float</span> _element0; }  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 内存连续存储</span></pre>
</div>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">性能接近原生数组，减少内存分配开销。</span></p>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">适用<strong>优化游戏引擎</strong>、<strong>数值计算等高性能场景</strong>。</span></p>
<hr>
<p>&nbsp;</p>
<h2>四、元编程和AOP改进</h2>
<h3>1、‌拦截器</h3>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">轻量级AOP实现，支持方法调用拦截：</span></p>
<div class="cnblogs_code">
<pre>[InterceptsLocation(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Program.cs</span><span style="color: rgba(128, 0, 0, 1)">"</span>, line: <span style="color: rgba(128, 0, 128, 1)">10</span>)]  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 指定拦截位置</span>
<span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> LogInterceptor() =&gt; Console.WriteLine(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Method intercepted!</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);

[InterceptsLocation(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Namespace.Class.Method</span><span style="color: rgba(128, 0, 0, 1)">"</span>)]  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">指定拦截方法</span>
<span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> LogInterceptor() =&gt; Console.WriteLine(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Intercepted!</span><span style="color: rgba(128, 0, 0, 1)">"</span>);</pre>
</div>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">ASP.NET Core请求管道已集成这个特性。</span></p>
<h3>2、‌增强的插值字符串处理</h3>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">支持自定义插值处理器，优化格式化性能：</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> handler = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> CustomHandler();
handler.AppendFormatted(value, format);  </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 自定义格式化逻辑</span></pre>
</div>
<p><span style="font-family: &quot;Microsoft YaHei&quot;">扩展日志记录等高频字符串操作场景。</span></p>
<hr>
<h2>总结</h2>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">NET 8通过‌性能飞跃‌（PGO与原生AOT）、‌语法革新‌（C# 12特性）及‌运行时强化‌（SIMD/序列化），</span><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">显著提升了开发效率与执行性能。</span></p>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">其特性覆盖从底层计算到Web全栈开发，是近年来兼容性与生产力提升最全面的版本之一。</span></p>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 15px">还有更多特性和用法这里就没有去了解，大家有想法的可以说一说，一起学习进步。</span></p>
<hr>
<p>&nbsp;</p>
<p><span style="font-size: 16px"><strong>欢迎关注订阅微信公众号【熊泽有话说】，更多好玩易学知识等你来取</strong></span><br><span style="font-size: 16px"><strong>作者：熊泽-学习中的苦与乐<br><strong>公众号：熊泽有话说</strong></strong></span><br><span style="font-size: 16px"><strong>QQ群：<span style="color: rgba(255, 0, 0, 1)">711838388</span></strong></span><br><span style="font-size: 16px"><strong>出处：<a class="ng-star-inserted" href="https://www.cnblogs.com/xiongze520/p/18902755" rel="noopener" target="_blank">https://www.cnblogs.com/xiongze520/p/18902755</a></strong></span><br><span style="font-size: 16px"><strong>您可以随意转载、摘录，但请在文章内注明作者和原文链接。&nbsp;</strong>&nbsp;</span></p>
<p>&nbsp;</p>
<p><img src="https://img2020.cnblogs.com/blog/1093832/202108/1093832-20210823163948985-309495620.png" alt="" width="514" height="239" loading="lazy"></p>
<p>&nbsp;</p>
<div id="yy_trans_float_ball" style="position: fixed; z-index: 2147483647; width: 0; height: 0">&nbsp;</div>
<div id="yy_trans_float_ball" style="position: fixed; z-index: 2147483647; width: 0; height: 0">&nbsp;</div>
<div id="yy_trans_float_ball" style="position: fixed; z-index: 2147483647; width: 0; height: 0">&nbsp;</div>
</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/xiongze520/" target="_blank">熊泽-学习中的苦与乐</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/xiongze520/p/18902755" target="_blank">https://www.cnblogs.com/xiongze520/p/18902755</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.22099415487962962" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-29 16:57">2025-05-29 16:56</span>&nbsp;
<a href="https://www.cnblogs.com/xiongze520">熊泽-学习中的苦与乐</a>&nbsp;
阅读(<span id="post_view_count">207</span>)&nbsp;
评论(<span id="post_comment_count">8</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18902755);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18902755', targetLink: 'https://www.cnblogs.com/xiongze520/p/18902755', title: '.NET8带来的一些新特性' })">举报</a>
</div>
        