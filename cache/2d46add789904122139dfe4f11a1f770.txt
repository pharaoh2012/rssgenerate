
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/handsometaoa/p/18835301" title="发布于 2025-04-19 12:11">
    <span role="heading" aria-level="2">Java 单元测试简单扫盲</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>仔细回想起来，上次认真编写单元测试已经是两年前的事了。那时候觉得写单元测试是种负担。</p>
<p>为了应付代码覆盖率要求，常常依赖工具自动生成测试用例，有时需要启动Spring容器，有时又不需要（当时还分不清单元测试和集成测试的区别）。</p>
<p>直到最近在开发过程中，当需要重构代码或自测功能时，我才真正体会到单元测试的价值。</p>
<h2 id="概念">概念</h2>
<p>单元测试的本质是通过独立的测试用例来验证代码单元（方法/函数）的逻辑正确性。</p>
<p>在日常开发中，我们经常会在类里随手写一个 main 方法来快速验证逻辑，比如：</p>
<pre><code class="language-java">public static void main(String[] args) {
    int expectResult = 9;
    int result = 3 * 3;
    if (result == expectResult) {
        System.out.println("测试成功");
    } else {
        System.out.println("测试失败");
    }
}
</code></pre>
<h2 id="测试分类">测试分类</h2>
<p>首先介绍一下，单元测试与集成测试的区别，刚开始学习的时候，没有分清它俩的区别，导致一直感觉单元测试是一个很复杂的东西。</p>
<h3 id="集成测试">集成测试</h3>
<p>需要启动完整的 Spring 容器，容器内所有的 Bean 可以正常注入使用。通俗一点，相当于写了一个 TestController。</p>
<pre><code>@SpringBootTest  // 启动完整Spring容器
class UserControllerIntegrationTest {
    @Autowired  // 真实注入Bean
    private UserController userController;

    @Test
    void testGetUser() {
        User user = userController.getUser(1L);
        assertNotNull(user);
    }
}
</code></pre>
<h3 id="单元测试">单元测试</h3>
<p>不启动 Spring 容器，所有依赖需要手动模拟</p>
<pre><code>@ExtendWith(MockitoExtension.class)  // 启用Mockito注解支持
class UserServiceUnitTest {

    @Mock
    private UserRepository userRepository;

    @InjectMocks
    private UserService userService;

    @Test
    void testGetUser() {
        // 1. 定义Mock行为
        when(userRepository.findById(1L))
               .thenReturn(new User(1L, "Mock用户"));

        // 2. 执行测试
        User user = userService.getUser(1L);

        // 3. 验证结果
        assertEquals("Mock用户", user.getName());
        
        // 4. 可选：验证Mock交互
        verify(userRepository).findById(1L);  // 确保findById被调用一次
    }
}
</code></pre>
<table>
<thead>
<tr>
<th>维度</th>
<th>单元测试</th>
<th>集成测试</th>
</tr>
</thead>
<tbody>
<tr>
<td>目标</td>
<td>验证单个代码单元（如方法、类）的功能正确性</td>
<td>验证多个模块、组件或外部系统协同工作的正确性</td>
</tr>
<tr>
<td>范围</td>
<td>隔离测试，不依赖外部系统（如数据库、网络、其他服务）</td>
<td>依赖外部系统或跨组件的交互（如数据库连接、API 调用）</td>
</tr>
<tr>
<td>覆盖范围</td>
<td>聚焦分支，验证代码片段逻辑正确性</td>
<td>聚焦模块间交互，验证系统整体行为</td>
</tr>
</tbody>
</table>
<h3 id="核心注解介绍">核心注解介绍</h3>
<h4 id="resource-spring标准注解">@Resource (Spring标准注解)</h4>
<p>作用：用于依赖注入，会按照名称或类型从Spring容器中获取真实的bean<br>
测试场景：集成测试中需要完全使用真实逻辑时</p>
<h4 id="mockbean-spring-boot测试注解">@MockBean (Spring Boot测试注解)</h4>
<p>作用：向Spring应用上下文注入一个mock对象，替代原有的bean<br>
测试场景：Spring Boot集成测试中需要mock某些bean时</p>
<h4 id="spy-mockito注解">@Spy (Mockito注解)</h4>
<p>作用：创建部分mock对象，未mock的方法使用真实逻辑，mock的方法使用自定义逻辑<br>
测试场景：需要保留对象大部分真实行为，仅修改少数方法逻辑的测试</p>
<h4 id="mock-mockito注解">@Mock (Mockito注解)</h4>
<p>作用：创建完整mock对象，所有方法都需要mock，未mock的方法会返回默认值或空集合<br>
测试场景：需要完全模拟依赖行为的单元测试</p>
<h4 id="injectmocks-mockito注解">@InjectMocks (Mockito注解)</h4>
<p>作用：自动将@Mock或@Spy创建的mock对象注入到被测试对象中<br>
测试场景：需要自动装配依赖的单元测试</p>
<h2 id="使用">使用</h2>
<h3 id="依赖文件">依赖文件</h3>
<p>添加依赖，具体版本需要根据项目版本自己替换</p>
<pre><code>&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
  &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
  &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;junit&lt;/groupId&gt;
  &lt;artifactId&gt;junit&lt;/artifactId&gt;
  &lt;version&gt;4.13.1&lt;/version&gt;
  &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
</code></pre>
<h3 id="单元测试-1">单元测试</h3>
<p><code>@Spy</code> 与 <code>@Mock</code> 的区别:</p>
<p><code>@Mock</code> 所有方法都需要 mock，未 mock 的方法会返回默认值或空集合 ; <code>@Spy</code> 未 mock 的方法使用真实逻辑，mock 的方法使用自定义逻辑</p>
<p><img src="https://img2024.cnblogs.com/blog/1704037/202504/1704037-20250419120919567-636818419.png" alt="" loading="lazy"></p>
<p>注意：没有无参构造会初始化为空指针，需要手动实例化进行解决</p>
<pre><code>@Spy
private UserService userService = new UserService(); // 显式提供实例
</code></pre>
<h3 id="集成测试-1">集成测试</h3>
<p>@MockBean：向Spring上下文注入 Mock对象</p>
<pre><code>import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
public class UserServiceTest {
    @Autowired
    private UserService userService; // 注入真实 UserService

    @MockBean
    private UserRepository userRepository; // 替换 Spring 容器中的 UserRepository

    @Test
    public void testGetUser() {
        // 配置 Mock 行为
        User mockUser = new User(1, "Alice");
        when(userRepository.findById(1)).thenReturn(Optional.of(mockUser));

        // 调用被测方法
        User result = userService.getUser(1);

        // 验证结果和交互
        assertEquals("Alice", result.getName());
        verify(userRepository).findById(1);
    }
}
</code></pre>
<h2 id="总结">总结</h2>
<p>更多的内容还需要在探索后补充</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/handsometaoa/" target="_blank">帅气的涛啊</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/handsometaoa/p/18835301" target="_blank">https://www.cnblogs.com/handsometaoa/p/18835301</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.005285407905092593" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-19 12:11">2025-04-19 12:11</span>&nbsp;
<a href="https://www.cnblogs.com/handsometaoa">帅气的涛啊</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18835301);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18835301', targetLink: 'https://www.cnblogs.com/handsometaoa/p/18835301', title: 'Java 单元测试简单扫盲' })">举报</a>
</div>
        