
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/powertoolsteam/p/19026609" title="发布于 2025-08-07 11:38">
    <span role="heading" aria-level="2">.NET 10 新增功能系列文章5——C# 14 中的新增功能</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h3 id="1-扩展成员更强大的扩展能力">1. 扩展成员：更强大的扩展能力</h3>
<p>C# 14对扩展方法进行了重大增强，引入了全新的<strong>扩展成员</strong>语法。这一新特性不仅支持扩展方法，还允许开发者声明<strong>扩展属性</strong>和<strong>静态扩展成员</strong>。</p>
<pre><code class="language-csharp">public static class Enumerable
{
    // 实例扩展成员块
    extension&lt;TSource&gt;(IEnumerable&lt;TSource&gt; source)
    {
        // 扩展属性
        public bool IsEmpty =&gt; !source.Any();
        
        // 扩展索引器
        public TSource this[int index] =&gt; source.Skip(index).First();
        
        // 扩展方法
        public IEnumerable&lt;TSource&gt; Where(Func&lt;TSource, bool&gt; predicate) { ... }
    }

    // 静态扩展成员块
    extension&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)
    {
        // 静态扩展方法
        public static IEnumerable&lt;TSource&gt; Combine(IEnumerable&lt;TSource&gt; first, IEnumerable&lt;TSource&gt; second) { ... }
        
        // 静态扩展属性
        public static IEnumerable&lt;TSource&gt; Identity =&gt; Enumerable.Empty&lt;TSource&gt;();
    }
}


实例扩展成员可以像普通实例成员一样调用，如`sequence.IsEmpty`，而静态扩展成员则通过类型名调用，如`IEnumerable&lt;int&gt;.Identity`。这一特性极大地丰富了扩展方法的应用场景，使API设计更加灵活。

</code></pre>
<h3 id="2-field关键字简化属性实现">2. field关键字：简化属性实现</h3>
<p>C# 14引入了<code>field</code>上下文关键字，用于简化属性实现，无需显式声明后备字段。编译器会自动合成支持字段。</p>
<p>改进前的传统实现：</p>
<pre><code class="language-csharp">private string _msg;
public string Message
{
    get =&gt; _msg;
    set =&gt; _msg = value ?? throw new ArgumentNullException(nameof(value));
}
</code></pre>
<p>使用<code>field</code>关键字后的简化实现：</p>
<pre><code class="language-csharp">public string Message
{
    get;
    set =&gt; field = value ?? throw new ArgumentNullException(nameof(value));
}

</code></pre>
<p><code>field</code>关键字使属性实现更加简洁，特别是在需要对属性值进行验证或转换时。如果类型中已有名为<code>field</code>的符号，可以使用<code>@field</code>或<code>this.field</code>来消除歧义。</p>
<h3 id="3-隐式span转换提升性能关键代码">3. 隐式Span转换：提升性能关键代码</h3>
<p>C# 14增强了对<code>System.Span&lt;T&gt;</code>和<code>System.ReadOnlySpan&lt;T&gt;</code>的支持，引入了更多隐式转换，使这些高性能类型的使用更加自然。</p>
<p>新特性包括：</p>
<ul>
<li><code>T[]</code>到<code>Span&lt;T&gt;</code>的隐式转换</li>
<li><code>Span&lt;T&gt;</code>到<code>ReadOnlySpan&lt;T&gt;</code>的隐式转换</li>
<li><code>string</code>到<code>ReadOnlySpan&lt;char&gt;</code>的隐式转换</li>
</ul>
<p>这些转换使得Span类型可以：</p>
<ul>
<li>作为扩展方法的接收器</li>
<li>与其他转换组合使用</li>
<li>在泛型类型推断场景中提供帮助</li>
</ul>
<p>Span类型的这些改进对于高性能场景（如文本处理、数值计算等）尤为重要，可以在不牺牲安全性的前提下获得接近原生代码的性能。</p>
<h3 id="4-nameof支持未绑定泛型类型">4. nameof支持未绑定泛型类型</h3>
<p>C# 14扩展了<code>nameof</code>操作符的功能，使其支持未绑定的泛型类型。这使得在反射、日志记录等场景下的代码更加简洁。</p>
<pre><code class="language-csharp">// C# 14新特性
string name = nameof(List&lt;&gt;); // 返回"List"

// 之前只能这样做
string name = nameof(List&lt;int&gt;); // 返回"List"
</code></pre>
<p>这一改进特别适用于需要处理泛型类型名称的通用框架代码，减少了硬编码字符串的使用，提高了代码的维护性。</p>
<h3 id="5-带修饰符的简单lambda参数">5. 带修饰符的简单Lambda参数</h3>
<p>C# 14允许在不指定参数类型的情况下，为lambda表达式参数添加修饰符（如<code>ref</code>、<code>in</code>、<code>out</code>等），进一步简化了lambda表达式的书写。</p>
<p>改进前：</p>
<pre><code class="language-csharp">TryParse&lt;int&gt; parse2 = (string text, out int result) =&gt; Int32.TryParse(text, out result);
</code></pre>
<p>改进后：</p>
<pre><code class="language-csharp">TryParse&lt;int&gt; parse1 = (text, out result) =&gt; Int32.TryParse(text, out result);
</code></pre>
<p>注意<code>params</code>修饰符仍然需要显式类型声明。这一特性使lambda表达式更加简洁，特别是在处理包含<code>out</code>参数的方法时。</p>
<h3 id="6-部分成员增强构造函数和事件">6. 部分成员增强：构造函数和事件</h3>
<p>C# 14扩展了部分成员的支持范围，现在可以将<strong>实例构造函数</strong>和<strong>事件</strong>声明为部分成员。</p>
<p>部分构造函数的要点：</p>
<ul>
<li>必须包含定义声明和实现声明</li>
<li>只有实现声明可以包含构造函数初始值设定项(<code>this()</code>或<code>base()</code>)</li>
<li>只有一个分部类型声明可以包含主构造函数语法</li>
</ul>
<p>部分事件的要点：</p>
<ul>
<li>必须包含定义声明和实现声明</li>
<li>实现声明必须包含<code>add</code>和<code>remove</code>访问器</li>
<li>定义声明类似于字段事件</li>
</ul>
<p>这些增强使得代码生成器和手动编写代码的协作更加灵活，特别适合大型项目或框架开发。</p>
<h3 id="7-用户自定义复合赋值运算符">7. 用户自定义复合赋值运算符</h3>
<p>C# 14引入了用户自定义复合赋值运算符的能力，允许开发者为自己定义的类型重载复合赋值运算符（如<code>+=</code>、<code>-=</code>等）。这一特性通过更自然的语法简化了对自定义类型的操作。</p>
<p>虽然具体的实现细节需要参考功能规范，但这一特性为数值计算库、矩阵运算等场景提供了更优雅的语法支持。</p>
<h3 id="8-空条件赋值更简洁的null检查">8. 空条件赋值：更简洁的null检查</h3>
<p>C# 14扩展了空条件运算符<code>?.</code>的用法，现在可以将其放在赋值操作的左侧，实现空条件赋值。</p>
<p>传统null检查方式：</p>
<pre><code class="language-csharp">if (customer is not null)
{
    customer.Order = GetCurrentOrder();
}
</code></pre>
<p>使用空条件赋值的简洁方式：</p>
<pre><code class="language-csharp">customer?.Order = GetCurrentOrder();
</code></pre>
<p>在这个例子中，<code>GetCurrentOrder()</code>方法仅在<code>customer</code>不为null时才会被调用。这一特性同样适用于复合赋值运算符（如<code>+=</code>、<code>-=</code>等），但不支持递增(<code>++</code>)和递减(<code>--</code>)运算符。</p>
<h2 id="系列文章">系列文章</h2>
<p><a href="https://www.cnblogs.com/powertoolsteam/p/19010089" target="_blank">.NET 10 中的新增功能系列文章1——运行时中的新增功能</a></p>
<p><a href="https://www.cnblogs.com/powertoolsteam/p/19012227" target="_blank">.NET 10 中的新增功能系列文章2——ASP.NET Core 中的新增功能</a></p>
<p><a href="https://www.cnblogs.com/powertoolsteam/p/19014471" target="_blank">.NET 10 中的新增功能系列文章3——.NET MAUI 中的新增功能</a></p>
<p><a href="https://www.cnblogs.com/powertoolsteam/p/19022593" target="_blank">.NET 10 中的新增功能系列文章4——.NET SDK中的新增功能</a></p>

</div>
<div id="MySignature" role="contentinfo">
    <hr>
<br>
<p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">本文是由葡萄城技术开发团队发布，转载请注明出处：<a href="https://www.grapecity.com.cn/" target="_blank">葡萄城官网</a></p>
<!--p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">了解企业级低代码开发平台，请前往<a href="https://www.grapecity.com.cn/solutions/huozige" target="_blank">活字格</a>
</p><p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">了解可嵌入您系统的在线 Excel，请前往<a href="https://www.grapecity.com.cn/developer/spreadjs" target="_blank">SpreadJS纯前端表格控件</a></p>
<p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">了解嵌入式的商业智能和报表软件，请前往<a href="https://www.grapecity.com.cn/solutions/wyn" target="_blank">Wyn Enterprise
</a></p-->

<br>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0020833333333333333" data-date-updated="2025-08-07 11:41">2025-08-07 11:38</span>&nbsp;
<a href="https://www.cnblogs.com/powertoolsteam">葡萄城技术团队</a>&nbsp;
阅读(<span id="post_view_count">162</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19026609);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19026609', targetLink: 'https://www.cnblogs.com/powertoolsteam/p/19026609', title: '.NET 10 新增功能系列文章5——C# 14 中的新增功能' })">举报</a>
</div>
        