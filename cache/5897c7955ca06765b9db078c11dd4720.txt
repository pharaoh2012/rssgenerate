
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xiao987334176/p/18834585" title="发布于 2025-05-21 07:41">
    <span role="heading" aria-level="2">dify+MCP多应用，构建灵活的AI应用生态系统</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>一、概述</h1>
<p>前面几篇文章写很多MCP应用，基本上一个dify工作流使用一个MCP应用。</p>
<p>那么一个dify工作流，同时使用多个MCP应用，是否可以呢？答案是可以的。</p>
<p>&nbsp;</p>
<p>先来看一下效果图</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250520171751045-1125252594.png" alt="" loading="lazy"></p>
<p>说明：</p>
<p>这里使用了问题分类器，用来判断用户的问题，应该调用哪个MCP应用</p>
<p>AGENT1~4，分别对应一个MCP应用，例如：public-ip-mcp-server，mysql8-mcp-server，desensitization-mcp-server，searxng-mcp-server</p>
<p>针对mysql查询输出的内容，会进行脱敏处理。</p>
<h1>二、问题分类器</h1>
<h2>定义</h2>
<p>通过定义分类描述，问题分类器能够根据用户输入，使用 LLM 推理与之相匹配的分类并输出分类结果，向下游节点提供更加精确的信息。</p>
<h2>场景</h2>
<p>常见的使用情景包括客服对话意图分类、产品评价分类、邮件批量分类等。</p>
<p>在一个典型的产品客服问答场景中，问题分类器可以作为知识库检索的前置步骤，对用户输入问题意图进行分类处理，分类后导向下游不同的知识库查询相关的内容，以精确回复用户的问题。</p>
<h2>设置</h2>
<p>对于比较精确的条件，一般使用条件分支。但是对于我这种场景，条件比较模糊，所以需要使用问题分类器</p>
<p>&nbsp;</p>
<p>这里定义了3个分类：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">公网ip相关问题
mysql 数据库相关查询，涉及学生、教师、成绩、班级、课程等
其他问题</span></pre>
</div>
<p>效果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250520172811378-2136162362.png" alt="" loading="lazy"></p>
<p>&nbsp;说明：</p>
<p>公网ip相关问题，会直接调用MCP应用public-ip-mcp-server</p>
<p>mysql相关问题，会调用MCP应用mysql8-mcp-server</p>
<p>其他问题，会调用MCP应用searxng-mcp-server，这个是一个联网搜索引擎，你可以理解为百度，想搜什么都可以。</p>
<h1>三、环境说明</h1>
<h2>dify版本</h2>
<p>这里使用的是最新版本1.4.0，如果你的版本没有这么高，1.3.0以上版本也可以。</p>
<h2>mcp插件</h2>
<p>确保已经安装了以下插件：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">Agent 策略(支持 MCP 工具)

MCP SSE </span>/ StreamableHTTP</pre>
</div>
<p><strong><span style="color: rgba(255, 0, 0, 1)">确保插件版本，已经升级到最新版本</span></strong></p>
<h2>mcp应用</h2>
<p>这里的所有MCP应用，统一使用Streamable HTTP模式，全部部署在k8s里面。</p>
<p>当然，使用docker运行也是可以的。</p>
<h2>mcp插件设置</h2>
<p>点击插件MCP SSE / StreamableHTTP，输入MCP 服务配置</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250520174223227-640317051.png" alt="" loading="lazy"></p>
<p>&nbsp;完整内容如下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">{
    </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">mysql8-mcp-server</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: {
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">transport</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">streamable_http</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">url</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://mysql8-mcp-server-svc.mcp:9000/mcp/</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">headers</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: {},
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">timeout</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 128, 1)">60</span><span style="color: rgba(0, 0, 0, 1)">
    },
    </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">desensitization-mcp-server</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: {
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">transport</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">streamable_http</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">url</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://desensitization-mcp-server-svc.mcp:9000/mcp/</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">headers</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: {},
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">timeout</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 128, 1)">60</span><span style="color: rgba(0, 0, 0, 1)">
    },
    </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">public-ip-mcp-server</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: {
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">transport</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">streamable_http</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">url</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://public-ip-mcp-server-svc.mcp:9000/mcp/</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">headers</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: {},
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">timeout</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 128, 1)">60</span><span style="color: rgba(0, 0, 0, 1)">
    },
    </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">searxng-mcp-server</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: {
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">transport</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">streamable_http</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">url</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://searxng-mcp-server-svc.mcp:9000/mcp/</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">headers</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: {},
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">timeout</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 128, 1)">60</span><span style="color: rgba(0, 0, 0, 1)">
    }
}</span></pre>
</div>
<p><span style="color: rgba(255, 0, 0, 1)"><strong>注意：这里的url使用的是k8s内部地址，如果使用的是docker方式运行，请根据实际情况修改。</strong></span></p>
<h1>四、public-ip-mcp-server设置</h1>
<p>public-ip-mcp-server核心代码如下：</p>
<p>server.py</p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_78a3855e-e9af-42f1-99b6-45bdf0ebc5b4" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_78a3855e-e9af-42f1-99b6-45bdf0ebc5b4" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_78a3855e-e9af-42f1-99b6-45bdf0ebc5b4" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> fastmcp <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> FastMCP
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> json
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> requests

mcp </span>= FastMCP(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">public-ip-address</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)


@mcp.tool()
</span><span style="color: rgba(0, 0, 255, 1)">def</span> get_public_ip_address() -&gt;<span style="color: rgba(0, 0, 0, 1)"> str:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
    获取公网ip地址
    返回:
        str: 当前网络的公网ip地址
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    response </span>= requests.get(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://ip-api.com/json</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    content </span>=<span style="color: rgba(0, 0, 0, 1)"> json.loads(response.text)
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> content[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">query</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]


</span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(128, 0, 128, 1)">__name__</span> == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">__main__</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
    mcp.run(transport</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">streamable-http</span><span style="color: rgba(128, 0, 0, 1)">"</span>, host=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">0.0.0.0</span><span style="color: rgba(128, 0, 0, 1)">"</span>, port=9000, path=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/mcp</span><span style="color: rgba(128, 0, 0, 1)">"</span>)</pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<h2>Agent配置</h2>
<p>Agent 1详细配置如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250520175813566-1680891644.png" alt="" loading="lazy"></p>
<p>&nbsp;MCP服务配置</p>
<div class="cnblogs_code">
<pre><span>{
  "public-ip-mcp-server"<span>: {
        "transport": "streamable_http"<span>,
        "url": "http://public-ip-mcp-server-svc.mcp:9000/mcp/"<span>,
        "headers"<span>: {},
        "timeout": 60<span>
    }
}</span></span></span></span></span></span></pre>
</div>
<p>指令</p>
<div class="cnblogs_code">
<pre>使用MCP工具，获取服务器公网ip</pre>
</div>
<p>&nbsp;</p>
<p>最后直接回复，<strong><span style="color: rgba(255, 0, 0, 1)">注意选择变量Agent1 text</span></strong></p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250520181219899-1157944359.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h1>五、mysql8-mcp-server设置</h1>
<h2>核心代码</h2>
<p>mysql8-mcp-server核心代码如下：</p>
<p>server.py</p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_2e48d912-50af-4146-9f7c-093badb95e1c" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_2e48d912-50af-4146-9f7c-093badb95e1c" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_2e48d912-50af-4146-9f7c-093badb95e1c" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> fastmcp <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> FastMCP
</span><span style="color: rgba(0, 0, 255, 1)">from</span> mysql.connector <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> connect, Error
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> os

mcp </span>= FastMCP(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">operateMysql</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)


</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> get_db_config():
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">从环境变量获取数据库配置信息

    返回:
        dict: 包含数据库连接所需的配置信息
        - host: 数据库主机地址
        - port: 数据库端口
        - user: 数据库用户名
        - password: 数据库密码
        - database: 数据库名称

    异常:
        ValueError: 当必需的配置信息缺失时抛出
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">

    config </span>=<span style="color: rgba(0, 0, 0, 1)"> {
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">host</span><span style="color: rgba(128, 0, 0, 1)">"</span>: os.getenv(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MYSQL_HOST</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">localhost</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">),
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">port</span><span style="color: rgba(128, 0, 0, 1)">"</span>: int(os.getenv(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MYSQL_PORT</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">3306</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)),
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">user</span><span style="color: rgba(128, 0, 0, 1)">"</span>: os.getenv(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MYSQL_USER</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">),
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">password</span><span style="color: rgba(128, 0, 0, 1)">"</span>: os.getenv(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MYSQL_PASSWORD</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">),
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">database</span><span style="color: rgba(128, 0, 0, 1)">"</span>: os.getenv(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MYSQL_DATABASE</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">),
    }
    </span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(config)
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(0, 0, 255, 1)">not</span><span style="color: rgba(0, 0, 0, 1)"> all(
        [
            config[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">host</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">],
            config[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">port</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">],
            config[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">user</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">],
            config[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">password</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">],
            config[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">database</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">],
        ]
    ):
        </span><span style="color: rgba(0, 0, 255, 1)">raise</span> ValueError(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">缺少必需的数据库配置</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> config


@mcp.tool()
</span><span style="color: rgba(0, 0, 255, 1)">def</span> execute_sql(query: str) -&gt;<span style="color: rgba(0, 0, 0, 1)"> list:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">执行SQL查询语句

    参数:
        query (str): 要执行的SQL语句，支持多条语句以分号分隔

    返回:
        list: 包含查询结果的TextContent列表
        - 对于SELECT查询：返回CSV格式的结果，包含列名和数据
        - 对于SHOW TABLES：返回数据库中的所有表名
        - 对于其他查询：返回执行状态和影响行数
        - 多条语句的结果以"---"分隔

    异常:
        Error: 当数据库连接或查询执行失败时抛出
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    config </span>=<span style="color: rgba(0, 0, 0, 1)"> get_db_config()
    </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">:
        with connect(</span>**<span style="color: rgba(0, 0, 0, 1)">config) as conn:
            with conn.cursor() as cursor:
                statements </span>= [stmt.strip() <span style="color: rgba(0, 0, 255, 1)">for</span> stmt <span style="color: rgba(0, 0, 255, 1)">in</span> query.split(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">;</span><span style="color: rgba(128, 0, 0, 1)">"</span>) <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> stmt.strip()]
                results </span>=<span style="color: rgba(0, 0, 0, 1)"> []

                </span><span style="color: rgba(0, 0, 255, 1)">for</span> statement <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> statements:
                    </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">:
                        cursor.execute(statement)

                        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 检查语句是否返回了结果集 (SELECT, SHOW, EXPLAIN, etc.)</span>
                        <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> cursor.description:
                            columns </span>= [desc[0] <span style="color: rgba(0, 0, 255, 1)">for</span> desc <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> cursor.description]
                            rows </span>=<span style="color: rgba(0, 0, 0, 1)"> cursor.fetchall()

                            </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 将每一行的数据转换为字符串，特殊处理None值</span>
                            formatted_rows =<span style="color: rgba(0, 0, 0, 1)"> []
                            </span><span style="color: rgba(0, 0, 255, 1)">for</span> row <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> rows:
                                formatted_row </span>=<span style="color: rgba(0, 0, 0, 1)"> [
                                    </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">NULL</span><span style="color: rgba(128, 0, 0, 1)">"</span> <span style="color: rgba(0, 0, 255, 1)">if</span> value <span style="color: rgba(0, 0, 255, 1)">is</span> None <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> str(value)
                                    </span><span style="color: rgba(0, 0, 255, 1)">for</span> value <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> row
                                ]
                                formatted_rows.append(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">,</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">.join(formatted_row))

                            </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 将列名和数据合并为CSV格式</span>
<span style="color: rgba(0, 0, 0, 1)">                            results.append(
                                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\n</span><span style="color: rgba(128, 0, 0, 1)">"</span>.join([<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">,</span><span style="color: rgba(128, 0, 0, 1)">"</span>.join(columns)] +<span style="color: rgba(0, 0, 0, 1)"> formatted_rows)
                            )

                        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 如果语句没有返回结果集 (INSERT, UPDATE, DELETE, etc.)</span>
                        <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
                            conn.commit()  </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 只有在非查询语句时才提交</span>
                            results.append(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">查询执行成功。影响行数: {cursor.rowcount}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

                    </span><span style="color: rgba(0, 0, 255, 1)">except</span><span style="color: rgba(0, 0, 0, 1)"> Error as stmt_error:
                        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 单条语句执行出错时，记录错误并继续执行</span>
<span style="color: rgba(0, 0, 0, 1)">                        results.append(
                            f</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">执行语句 '{statement}' 出错: {str(stmt_error)}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
                        )
                        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 可以在这里选择是否继续执行后续语句，目前是继续</span>

                <span style="color: rgba(0, 0, 255, 1)">return</span> [<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\n---\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">.join(results)]

    </span><span style="color: rgba(0, 0, 255, 1)">except</span><span style="color: rgba(0, 0, 0, 1)"> Error as e:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">执行SQL '{query}' 时出错: {e}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> [f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">执行查询时出错: {str(e)}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]


@mcp.tool()
</span><span style="color: rgba(0, 0, 255, 1)">def</span> get_table_name(text: str) -&gt;<span style="color: rgba(0, 0, 0, 1)"> list:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">根据表的中文注释搜索数据库中的表名

    参数:
        text (str): 要搜索的表中文注释关键词

    返回:
        list: 包含查询结果的TextContent列表
        - 返回匹配的表名、数据库名和表注释信息
        - 结果以CSV格式返回，包含列名和数据
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    config </span>=<span style="color: rgba(0, 0, 0, 1)"> get_db_config()
    sql </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">SELECT TABLE_SCHEMA, TABLE_NAME, TABLE_COMMENT </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    sql </span>+= f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">FROM information_schema.TABLES WHERE TABLE_SCHEMA = '{config['database']}' AND TABLE_COMMENT LIKE '%{text}%';</span><span style="color: rgba(128, 0, 0, 1)">"</span>
    <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> execute_sql(sql)


@mcp.tool()
</span><span style="color: rgba(0, 0, 255, 1)">def</span> get_table_desc(text: str) -&gt;<span style="color: rgba(0, 0, 0, 1)"> list:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">获取指定表的字段结构信息

    参数:
        text (str): 要查询的表名，多个表名以逗号分隔

    返回:
        list: 包含查询结果的列表
        - 返回表的字段名、字段注释等信息
        - 结果按表名和字段顺序排序
        - 结果以CSV格式返回，包含列名和数据
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    config </span>=<span style="color: rgba(0, 0, 0, 1)"> get_db_config()
    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 将输入的表名按逗号分割成列表</span>
    table_names = [name.strip() <span style="color: rgba(0, 0, 255, 1)">for</span> name <span style="color: rgba(0, 0, 255, 1)">in</span> text.split(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">,</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 构建IN条件</span>
    table_condition = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">','</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">.join(table_names)
    sql </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">SELECT TABLE_NAME, COLUMN_NAME, COLUMN_COMMENT </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    sql </span>+=<span style="color: rgba(0, 0, 0, 1)"> (
        f</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = '{config['database']}' </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    )
    sql </span>+= f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">AND TABLE_NAME IN ('{table_condition}') ORDER BY TABLE_NAME, ORDINAL_POSITION;</span><span style="color: rgba(128, 0, 0, 1)">"</span>
    <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> execute_sql(sql)


@mcp.tool()
</span><span style="color: rgba(0, 0, 255, 1)">def</span> get_lock_tables() -&gt;<span style="color: rgba(0, 0, 0, 1)"> list:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
    获取当前mysql服务器InnoDB 的行级锁

    返回:
        list: 包含查询结果的TextContent列表
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    sql </span>= <span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">SELECT
    p2.`HOST` AS 被阻塞方host,
    p2.`USER` AS 被阻塞方用户,
    r.trx_id AS 被阻塞方事务id,
    r.trx_mysql_thread_id AS 被阻塞方线程号,
    TIMESTAMPDIFF(SECOND, r.trx_wait_started, CURRENT_TIMESTAMP) AS 等待时间,
    r.trx_query AS 被阻塞的查询,
    l.OBJECT_NAME AS 阻塞方锁住的表,
    m.LOCK_MODE AS 被阻塞方的锁模式,
    m.LOCK_TYPE AS '被阻塞方的锁类型(表锁还是行锁)',
    m.INDEX_NAME AS 被阻塞方锁住的索引,
    m.OBJECT_SCHEMA AS 被阻塞方锁对象的数据库名,
    m.OBJECT_NAME AS 被阻塞方锁对象的表名,
    m.LOCK_DATA AS 被阻塞方事务锁定记录的主键值,
    p.`HOST` AS 阻塞方主机,
    p.`USER` AS 阻塞方用户,
    b.trx_id AS 阻塞方事务id,
    b.trx_mysql_thread_id AS 阻塞方线程号,
    b.trx_query AS 阻塞方查询,
    l.LOCK_MODE AS 阻塞方的锁模式,
    l.LOCK_TYPE AS '阻塞方的锁类型(表锁还是行锁)',
    l.INDEX_NAME AS 阻塞方锁住的索引,
    l.OBJECT_SCHEMA AS 阻塞方锁对象的数据库名,
    l.OBJECT_NAME AS 阻塞方锁对象的表名,
    l.LOCK_DATA AS 阻塞方事务锁定记录的主键值,
    IF(p.COMMAND = 'Sleep', CONCAT(p.TIME, ' 秒'), 0) AS 阻塞方事务空闲的时间
    FROM performance_schema.data_lock_waits w
    INNER JOIN performance_schema.data_locks l ON w.BLOCKING_ENGINE_LOCK_ID = l.ENGINE_LOCK_ID
    INNER JOIN performance_schema.data_locks m ON w.REQUESTING_ENGINE_LOCK_ID = m.ENGINE_LOCK_ID
    INNER JOIN information_schema.INNODB_TRX b ON b.trx_id = w.BLOCKING_ENGINE_TRANSACTION_ID
    INNER JOIN information_schema.INNODB_TRX r ON r.trx_id = w.REQUESTING_ENGINE_TRANSACTION_ID
    INNER JOIN information_schema.PROCESSLIST p ON p.ID = b.trx_mysql_thread_id
    INNER JOIN information_schema.PROCESSLIST p2 ON p2.ID = r.trx_mysql_thread_id
    ORDER BY 等待时间 DESC;</span><span style="color: rgba(128, 0, 0, 1)">"""</span>

    <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> execute_sql(sql)


</span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(128, 0, 128, 1)">__name__</span> == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">__main__</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
    mcp.run(transport</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">streamable-http</span><span style="color: rgba(128, 0, 0, 1)">"</span>, host=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">0.0.0.0</span><span style="color: rgba(128, 0, 0, 1)">"</span>, port=9000, path=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/mcp</span><span style="color: rgba(128, 0, 0, 1)">"</span>)</pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<h2>Agent配置</h2>
<p>Agent 2详细配置如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250520180252616-56134747.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250520180327501-917977110.png" alt="" loading="lazy"></p>
<p>&nbsp;MCP服务配置</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">{
    </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">mysql8-mcp-server</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: {
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">transport</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">streamable_http</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">url</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://mysql8-mcp-server-svc.mcp:9000/mcp/</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">timeout</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 128, 1)">60</span><span style="color: rgba(0, 0, 0, 1)">
    }
}</span></pre>
</div>
<p>指令</p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_f68fe0b7-d097-41b3-bc9f-cb878b8a64bc" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_f68fe0b7-d097-41b3-bc9f-cb878b8a64bc" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_f68fe0b7-d097-41b3-bc9f-cb878b8a64bc" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 0, 0, 1)">使用中文回复。

当用户提问中涉及学生、教师、成绩、班级、课程等实体时，需要使用 MySQL MCP 进行数据查询和操作，表结构说明如下：

# 学生管理系统数据库表结构说明

## </span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">. 教师表 (teachers)

</span>| 字段名 | 类型 | 描述 | 约束 | 示例 |
|--------|------|------|------|------|
| <span style="color: rgba(0, 0, 255, 1)">id</span> | varchar | 教师ID | 主键 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">T001</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| name | varchar | 教师姓名 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">张建国</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| gender | enum | 性别 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">男</span><span style="color: rgba(128, 0, 0, 1)">"</span>或<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">女</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">男</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| subject | varchar | 教授科目 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">数学</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| title | varchar | 职称 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">教授</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| phone | varchar | 联系电话 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">13812345678</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| office | varchar | 办公室位置 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">博学楼301</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| wechat | varchar | 微信(可选) | 可选 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">lily_teacher</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| isHeadTeacher | enum | 是否为班主任，<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">"</span>或<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">"</span> | 可选 |&nbsp;<span style="color: rgba(0, 0, 255, 1)">true</span>&nbsp;|<span style="color: rgba(0, 0, 0, 1)">

## </span><span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">. 班级表 (classes)

</span>| 字段名 | 类型 | 描述 | 约束 | 示例 |
|--------|------|------|------|------|
| <span style="color: rgba(0, 0, 255, 1)">id</span> | varchar | 班级ID | 主键 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">202301</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| className | varchar | 班级名称 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2023级计算机1班</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| grade | <span style="color: rgba(0, 0, 255, 1)">int</span> | 年级 | 必填 | <span style="color: rgba(128, 0, 128, 1)">2023</span> |
| headTeacherId | varchar | 班主任ID | 外键(teachers.<span style="color: rgba(0, 0, 255, 1)">id</span>) |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">T003</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| classroom | varchar | 教室位置 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">1号楼302</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| studentCount | <span style="color: rgba(0, 0, 255, 1)">int</span> | 学生人数 | 必填 | <span style="color: rgba(128, 0, 128, 1)">35</span> |
| remark | varchar | 备注信息 | 可选 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">市级优秀班集体</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|<span style="color: rgba(0, 0, 0, 1)">

## </span><span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">. 课程表 (courses)

</span>| 字段名 | 类型 | 描述 | 约束 | 示例 |
|--------|------|------|------|------|
| <span style="color: rgba(0, 0, 255, 1)">id</span> | varchar | 课程ID | 主键 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">C001</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| courseName | varchar | 课程名称 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">高等数学</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| credit | <span style="color: rgba(0, 0, 255, 1)">int</span> | 学分 | 必填 | <span style="color: rgba(128, 0, 128, 1)">4</span> |
| teacherId | varchar | 授课教师ID | 外键(teachers.<span style="color: rgba(0, 0, 255, 1)">id</span>) |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">T001</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| semester | varchar | 学期 | 格式<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">YYYY-N</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2023-1</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
|&nbsp;type&nbsp;| enum | 课程类型 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">必修</span><span style="color: rgba(128, 0, 0, 1)">"</span>或<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">选修</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">必修</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| prerequisite | varchar | 先修课程ID | 可选,外键(courses.<span style="color: rgba(0, 0, 255, 1)">id</span>) |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">C003</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|<span style="color: rgba(0, 0, 0, 1)">

## </span><span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">. 学生表 (students)

</span>| 字段名 | 类型 | 描述 | 约束 | 示例 |
|--------|------|------|------|------|
| <span style="color: rgba(0, 0, 255, 1)">id</span> | varchar | 学号 | 主键 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">S20230101</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| name | varchar | 学生姓名 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">王强</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| gender | enum | 性别 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">男</span><span style="color: rgba(128, 0, 0, 1)">"</span>或<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">女</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">男</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| birthDate | <span style="color: rgba(0, 0, 255, 1)">date</span> | 出生日期 | 必填 | <span style="color: rgba(0, 0, 255, 1)">date</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2005-01-15</span><span style="color: rgba(128, 0, 0, 1)">"</span>) |
| enrollmentDate | <span style="color: rgba(0, 0, 255, 1)">date</span> | 入学日期 | 必填 | <span style="color: rgba(0, 0, 255, 1)">date</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2023-8-1</span><span style="color: rgba(128, 0, 0, 1)">"</span>) |
| classId | varchar | 班级ID | 外键(classes.<span style="color: rgba(0, 0, 255, 1)">id</span>) |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">202301</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| phone | varchar | 联系电话 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">13812345678</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| email | varchar | 电子邮箱 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">20230101@school.edu.cn</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| emergencyContact | varchar | 紧急联系人电话 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">13876543210</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| address | varchar | 家庭住址 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">北京市海淀区中关村大街1栋101室</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| height | <span style="color: rgba(0, 0, 255, 1)">int</span> | 身高(cm) | 必填 | <span style="color: rgba(128, 0, 128, 1)">175</span> |
| weight | <span style="color: rgba(0, 0, 255, 1)">int</span> | 体重(kg) | 必填 | <span style="color: rgba(128, 0, 128, 1)">65</span> |
| healthStatus | enum | 健康状况 | 必填，<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">良好</span><span style="color: rgba(128, 0, 0, 1)">"</span>或<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">一般‌</span><span style="color: rgba(128, 0, 0, 1)">"</span>或<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">较差</span><span style="color: rgba(128, 0, 0, 1)">"</span> |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">良好</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|<span style="color: rgba(0, 0, 0, 1)">

## </span><span style="color: rgba(128, 0, 128, 1)">5</span><span style="color: rgba(0, 0, 0, 1)">. 成绩表 (scores)

</span>| 字段名 | 类型 | 描述 | 约束 | 示例 |
|--------|------|------|------|------|
| <span style="color: rgba(0, 0, 255, 1)">id</span> | varchar | 成绩记录ID | 主键 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">S20230101C001</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| studentId | varchar | 学生ID | 外键(students.<span style="color: rgba(0, 0, 255, 1)">id</span>) |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">S20230101</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| courseId | varchar | 课程ID | 外键(courses.<span style="color: rgba(0, 0, 255, 1)">id</span>) |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">C001</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| score | <span style="color: rgba(0, 0, 255, 1)">int</span> | 综合成绩 | <span style="color: rgba(128, 0, 128, 1)">0</span>-<span style="color: rgba(128, 0, 128, 1)">100</span> | <span style="color: rgba(128, 0, 128, 1)">85</span> |
| examDate | <span style="color: rgba(0, 0, 255, 1)">date</span> | 考试日期 | 必填 | <span style="color: rgba(0, 0, 255, 1)">date</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2024-5-20</span><span style="color: rgba(128, 0, 0, 1)">"</span>) |
| usualScore | <span style="color: rgba(0, 0, 255, 1)">int</span> | 平时成绩 | <span style="color: rgba(128, 0, 128, 1)">0</span>-<span style="color: rgba(128, 0, 128, 1)">100</span> | <span style="color: rgba(128, 0, 128, 1)">90</span> |
| finalScore | <span style="color: rgba(0, 0, 255, 1)">int</span> | 期末成绩 | <span style="color: rgba(128, 0, 128, 1)">0</span>-<span style="color: rgba(128, 0, 128, 1)">100</span> | <span style="color: rgba(128, 0, 128, 1)">80</span> |<span style="color: rgba(0, 0, 0, 1)">

### 补考成绩记录说明
补考记录在_id后添加</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">_M</span><span style="color: rgba(128, 0, 0, 1)">"</span>后缀，如<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">S20230101C001_M</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">

## 表关系说明

</span><span style="color: rgba(128, 0, 128, 1)">1</span>. **一对多关系**<span style="color: rgba(0, 0, 0, 1)">:
&nbsp; &nbsp;</span>-<span style="color: rgba(0, 0, 0, 1)"> 一个班级(classes)对应多个学生(students)
&nbsp; &nbsp;</span>-<span style="color: rgba(0, 0, 0, 1)"> 一个教师(teachers)可以教授多门课程(courses)
&nbsp; &nbsp;</span>-<span style="color: rgba(0, 0, 0, 1)"> 一个学生(students)有多条成绩记录(scores)

</span><span style="color: rgba(128, 0, 128, 1)">2</span>. **外键约束**<span style="color: rgba(0, 0, 0, 1)">:
&nbsp; &nbsp;</span>- students.classId → classes.<span style="color: rgba(0, 0, 255, 1)">id</span><span style="color: rgba(0, 0, 0, 1)">
&nbsp; &nbsp;</span>- courses.teacherId → teachers.<span style="color: rgba(0, 0, 255, 1)">id</span><span style="color: rgba(0, 0, 0, 1)">
&nbsp; &nbsp;</span>- scores.studentId → students.<span style="color: rgba(0, 0, 255, 1)">id</span><span style="color: rgba(0, 0, 0, 1)">
&nbsp; &nbsp;</span>- scores.courseId → courses.<span style="color: rgba(0, 0, 255, 1)">id</span><span style="color: rgba(0, 0, 0, 1)">
&nbsp; &nbsp;</span>- classes.headTeacherId → teachers.<span style="color: rgba(0, 0, 255, 1)">id</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>&nbsp;</p>
<h1>六、desensitization-mcp-server设置</h1>
<h2>核心代码</h2>
<p>desensitization-mcp-server核心代码如下：</p>
<p>server.py</p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_02b96b0a-fe4d-4664-a96f-740f320bff2a" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_02b96b0a-fe4d-4664-a96f-740f320bff2a" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_02b96b0a-fe4d-4664-a96f-740f320bff2a" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> fastmcp <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> FastMCP
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> re

mcp </span>= FastMCP(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">desensitize-text</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)


</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> DataMasker:
    </span><span style="color: rgba(0, 0, 255, 1)">def</span> <span style="color: rgba(128, 0, 128, 1)">__init__</span><span style="color: rgba(0, 0, 0, 1)">(self):
        </span><span style="color: rgba(0, 0, 255, 1)">pass</span>

    <span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> mask_phone_number(self, phone_number):
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
        对手机号码进行脱敏处理，将中间四位替换为 *
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> len(phone_number) == 11<span style="color: rgba(0, 0, 0, 1)">:
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> phone_number[:3] + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">****</span><span style="color: rgba(128, 0, 0, 1)">"</span> + phone_number[7<span style="color: rgba(0, 0, 0, 1)">:]
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> phone_number

    </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> mask_email(self, email):
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
        对邮箱地址进行脱敏处理，只显示邮箱名前两位和域名
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">@</span><span style="color: rgba(128, 0, 0, 1)">"</span> <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> email:
            username, domain </span>= email.split(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">@</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> username[:2] + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">****@</span><span style="color: rgba(128, 0, 0, 1)">"</span> +<span style="color: rgba(0, 0, 0, 1)"> domain
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> email

    </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> mask_id_card(self, id_card):
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
        对身份证号码进行脱敏处理，只显示前四位和后四位
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> len(id_card) == 18<span style="color: rgba(0, 0, 0, 1)">:
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> id_card[:4] + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">**********</span><span style="color: rgba(128, 0, 0, 1)">"</span> + id_card[14<span style="color: rgba(0, 0, 0, 1)">:]
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> id_card

    </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> mask_address(self, address):
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
        对地址进行脱敏处理，模糊化门牌号和房间号
        例如，将 "1栋" 替换为 "**栋"，"101室" 替换为 "***室"
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span>
        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 使用正则表达式</span>
        desensitized_address = re.sub(r<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">(\d+)栋</span><span style="color: rgba(128, 0, 0, 1)">"</span>, r<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">**栋</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, address)
        desensitized_address </span>= re.sub(r<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">(\d+)室</span><span style="color: rgba(128, 0, 0, 1)">"</span>, r<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">***室</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, desensitized_address)
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> desensitized_address


@mcp.tool()
</span><span style="color: rgba(0, 0, 255, 1)">def</span> desensitize_text(text: str) -&gt;<span style="color: rgba(0, 0, 0, 1)"> str:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
    脱敏文本信息
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    masker </span>=<span style="color: rgba(0, 0, 0, 1)"> DataMasker()
    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 匹配手机号</span>
    phone_pattern = r<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\d{11}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    phones </span>=<span style="color: rgba(0, 0, 0, 1)"> re.findall(phone_pattern, text)
    </span><span style="color: rgba(0, 0, 255, 1)">for</span> phone <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> phones:
        masked_phone </span>=<span style="color: rgba(0, 0, 0, 1)"> masker.mask_phone_number(phone)
        text </span>=<span style="color: rgba(0, 0, 0, 1)"> text.replace(phone, masked_phone)

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 匹配邮箱</span>
    email_pattern = r<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    emails </span>=<span style="color: rgba(0, 0, 0, 1)"> re.findall(email_pattern, text)
    </span><span style="color: rgba(0, 0, 255, 1)">for</span> email <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> emails:
        masked_email </span>=<span style="color: rgba(0, 0, 0, 1)"> masker.mask_email(email)
        text </span>=<span style="color: rgba(0, 0, 0, 1)"> text.replace(email, masked_email)

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 匹配身份证号</span>
    id_card_pattern = r<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\d{18}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    id_cards </span>=<span style="color: rgba(0, 0, 0, 1)"> re.findall(id_card_pattern, text)
    </span><span style="color: rgba(0, 0, 255, 1)">for</span> id_card <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> id_cards:
        masked_id_card </span>=<span style="color: rgba(0, 0, 0, 1)"> masker.mask_id_card(id_card)
        text </span>=<span style="color: rgba(0, 0, 0, 1)"> text.replace(id_card, masked_id_card)

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 匹配地址</span>
    address_pattern = r<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">([\u4e00-\u9fa5]+省)?([\u4e00-\u9fa5]+市)?([\u4e00-\u9fa5]+区)?([\u4e00-\u9fa5]+街道)?(\d+[\u4e00-\u9fa5]+)?(\d+[\u4e00-\u9fa5]+)?</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    addresss </span>=<span style="color: rgba(0, 0, 0, 1)"> re.findall(address_pattern, text)

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 如果没有找到地址，返回原始文本</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(0, 0, 255, 1)">not</span><span style="color: rgba(0, 0, 0, 1)"> addresss:
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> text

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 对每个匹配的地址进行脱敏处理</span>
    <span style="color: rgba(0, 0, 255, 1)">for</span> address_parts <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> addresss:
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 将匹配的地址部分组合成完整的地址</span>
        address = <span style="color: rgba(128, 0, 0, 1)">""</span>.join([part <span style="color: rgba(0, 0, 255, 1)">for</span> part <span style="color: rgba(0, 0, 255, 1)">in</span> address_parts <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> part])
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> address:
            </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> print("address",address)</span>
            masked_address =<span style="color: rgba(0, 0, 0, 1)"> masker.mask_address(address)
            text </span>=<span style="color: rgba(0, 0, 0, 1)"> text.replace(address, masked_address)

    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> text


</span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(128, 0, 128, 1)">__name__</span> == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">__main__</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
    mcp.run(transport</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">streamable-http</span><span style="color: rgba(128, 0, 0, 1)">"</span>, host=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">0.0.0.0</span><span style="color: rgba(128, 0, 0, 1)">"</span>, port=9000, path=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/mcp</span><span style="color: rgba(128, 0, 0, 1)">"</span>)</pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<h2>Agent配置</h2>
<p>Agent 4详细配置如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250520180500239-1526747775.png" alt="" loading="lazy"></p>
<p><strong><span style="color: rgba(255, 0, 0, 1)">注意：查询要选择变量Agent 2 text</span></strong></p>
<p>&nbsp;</p>
<p>&nbsp;MCP服务配置</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">{ 
  </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">desensitization-mcp-server</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: {
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">transport</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">streamable_http</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">url</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://desensitization-mcp-server-svc.mcp:9000/mcp/</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">headers</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: {},
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">timeout</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 128, 1)">60</span><span style="color: rgba(0, 0, 0, 1)">
    }
}</span></pre>
</div>
<p>指令</p>
<div class="cnblogs_code">
<pre>使用MCP工具，对文本进行脱敏处理</pre>
</div>
<p>&nbsp;</p>
<p>最后直接回复，<strong><span style="color: rgba(255, 0, 0, 1)">注意选择变量Agent4 text</span></strong></p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250520181356734-2092126628.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h1>七、searxng-mcp-server设置</h1>
<h2>核心代码</h2>
<p>searxng-mcp-server核心代码如下：</p>
<p>server.py</p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_41d02209-038c-4b82-a7de-fbc771e40599" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_41d02209-038c-4b82-a7de-fbc771e40599" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_41d02209-038c-4b82-a7de-fbc771e40599" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> fastmcp <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> FastMCP
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> requests
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> os

mcp </span>= FastMCP(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">searxng</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)


@mcp.tool()
</span><span style="color: rgba(0, 0, 255, 1)">def</span> search(query: str) -&gt;<span style="color: rgba(0, 0, 0, 1)"> str:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
    搜索关键字，调用searxng的API接口
    参数:
        query (str): 要搜索的关键词
    返回:
        str: 查询结果
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    api_server </span>= os.getenv(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">API_SERVER</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, None)
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(0, 0, 255, 1)">not</span><span style="color: rgba(0, 0, 0, 1)"> api_server:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">缺少必需的API_SERVER配置</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        </span><span style="color: rgba(0, 0, 255, 1)">raise</span> ValueError(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">缺少必需的API_SERVER配置</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> API URL</span>
    url = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%s/search?q=%s&amp;format=json</span><span style="color: rgba(128, 0, 0, 1)">"</span> %<span style="color: rgba(0, 0, 0, 1)"> (api_server, query)
    </span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(url)

    </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">:
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 发送GET请求</span>
        response =<span style="color: rgba(0, 0, 0, 1)"> requests.get(url)

        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 检查请求是否成功</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> response.status_code == 200<span style="color: rgba(0, 0, 0, 1)">:
            </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 将响应内容解析为JSON</span>
            data =<span style="color: rgba(0, 0, 0, 1)"> response.json()
            </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> print("JSON内容:")</span>
            <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> print(data,type(data))</span>
            result_list =<span style="color: rgba(0, 0, 0, 1)"> []
            </span><span style="color: rgba(0, 0, 255, 1)">for</span> i <span style="color: rgba(0, 0, 255, 1)">in</span> data[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">results</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]:
                </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> print(i["content"])</span>
                result_list.append(i[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">content</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">])
            content </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">.join(result_list)
            </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> print(content)</span>
            <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> content
        </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
            </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">请求失败，状态码: {response.status_code}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> False

    </span><span style="color: rgba(0, 0, 255, 1)">except</span><span style="color: rgba(0, 0, 0, 1)"> requests.exceptions.RequestException as e:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">请求过程中发生错误: {e}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> False


</span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(128, 0, 128, 1)">__name__</span> == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">__main__</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
    mcp.run(transport</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">streamable-http</span><span style="color: rgba(128, 0, 0, 1)">"</span>, host=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">0.0.0.0</span><span style="color: rgba(128, 0, 0, 1)">"</span>, port=9000, path=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/mcp</span><span style="color: rgba(128, 0, 0, 1)">"</span>)</pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<h2>Agent配置</h2>
<p>Agent 3详细配置如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250520180635024-961344496.png" alt="" loading="lazy"></p>
<p>&nbsp;MCP服务配置</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">{
  </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">searxng-mcp-server</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: {
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">transport</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">streamable_http</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">url</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://searxng-mcp-server-svc.mcp:9000/mcp/</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">headers</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: {},
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">timeout</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 128, 1)">60</span><span style="color: rgba(0, 0, 0, 1)">
    }
}</span></pre>
</div>
<p>指令</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">## 技能
### 技能1：使用MCP工具进行联网搜索，获取到的相关内容进行总结分析
## 限制
</span>-<span style="color: rgba(0, 0, 0, 1)"> 如果没有相关内容，再进行联网搜索
</span>-<span style="color: rgba(0, 0, 0, 1)"> 你的回答应严格针对分析任务。使用结构化语言，逐步思考
</span>-<span style="color: rgba(0, 0, 0, 1)"> 使用的语言应和用户提问的语言相同
</span>- 搜索的关键词必须和用户提问的内容一致</pre>
</div>
<p>&nbsp;</p>
<p>最后直接回复，<span style="color: rgba(255, 0, 0, 1)"><strong>注意选择变量Agent3 text</strong></span></p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250520182215940-599051940.png" alt="" loading="lazy"></p>
<h1>八、dify测试</h1>
<p>点击右上角的预览按钮</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250520180743400-1597378221.png" alt="" loading="lazy"></p>
<h2>公网ip多少</h2>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250520165821231-1134086929.png" alt="" loading="lazy"></p>
<p><span style="color: rgba(255, 0, 0, 1)"><strong>注意：这里可以看到绿色的连接线条，可以清晰的看到工作流的走向，它确实是按照我预期的方向在走。</strong></span></p>
<p>&nbsp;</p>
<h2>李华的老师，查询一下个人详细信息</h2>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250520171121027-428570556.png" alt="" loading="lazy"></p>
<p>可以看到通过问题分类器，分别走向AGENT 2，AGENT 4，最终得到的答案，是进行了脱敏处理。</p>
<h2>上海今天天气如何</h2>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250520171337754-2103235219.png" alt="" loading="lazy"></p>
<p>这里直接联网搜索答案了</p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.06168864911226852" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-21 07:42">2025-05-21 07:41</span>&nbsp;
<a href="https://www.cnblogs.com/xiao987334176">肖祥</a>&nbsp;
阅读(<span id="post_view_count">45</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18834585);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18834585', targetLink: 'https://www.cnblogs.com/xiao987334176/p/18834585', title: 'dify+MCP多应用，构建灵活的AI应用生态系统' })">举报</a>
</div>
        