
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/TS86/p/18837891" title="发布于 2025-04-21 08:15">
    <span role="heading" aria-level="2">基于Surprise和Flask构建个性化电影推荐系统：从算法到全栈实现</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        在Netflix每年节省10亿美元内容采购成本的背后，在YouTube占据用户80%观看时长的推荐算法中，推荐系统正悄然改变内容消费模式。本文将带您从零开始构建一个具备用户画像展示的电影推荐系统，通过协同过滤算法捕捉用户偏好，用Flask框架实现可视化交互。项目完成后，您将理解推荐系统的核心原理，并掌握从数据预处理到Web部署的全流程。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="一引言推荐系统的魔法与现实意义">一、引言：推荐系统的魔法与现实意义</h2>
<p>在Netflix每年节省10亿美元内容采购成本的背后，在YouTube占据用户80%观看时长的推荐算法中，推荐系统正悄然改变内容消费模式。本文将带您从零开始构建一个具备用户画像展示的电影推荐系统，通过协同过滤算法捕捉用户偏好，用Flask框架实现可视化交互。项目完成后，您将理解推荐系统的核心原理，并掌握从数据预处理到Web部署的全流程。</p>
<h2 id="二技术栈解析与项目架构">二、技术栈解析与项目架构</h2>
<ol>
<li><strong>核心算法层</strong>：Surprise库实现SVD矩阵分解；</li>
<li><strong>数据处理层</strong>：Pandas进行数据清洗与特征工程；</li>
<li><strong>交互展示层</strong>：Flask框架构建RESTful API与前端模板；</li>
<li><strong>数据源</strong>：MovieLens 100k数据集（包含943用户×1682电影的10万条评分）。</li>
</ol>
<h2 id="三环境准备与数据集加载">三、环境准备与数据集加载</h2>
<pre><code class="language-python"># 安装依赖（在终端执行）
!pip install surprise pandas flask scikit-surprise
 
# 数据加载脚本
import pandas as pd
from surprise import Dataset, Reader
 
# 加载评分数据
ratings = pd.read_csv('ml-100k/u.data', 
                     sep='\t', 
                     names=['user_id', 'item_id', 'rating', 'timestamp'])
 
# 定义Surprise数据格式
reader = Reader(rating_scale=(1,5))
data = Dataset.load_from_df(ratings[['user_id', 'item_id', 'rating']], reader)
</code></pre>
<h2 id="四协同过滤核心svd矩阵分解实现">四、协同过滤核心：SVD矩阵分解实现</h2>
<h3 id="41-算法原理简析">4.1 算法原理简析</h3>
<p>SVD（奇异值分解）将用户-物品评分矩阵分解为：</p>
<pre><code>复制代码

R ≈ P * Σ * Q^T
</code></pre>
<p>其中：</p>
<ul>
<li>P：用户潜在特征矩阵</li>
<li>Q：物品潜在特征矩阵</li>
<li>Σ：奇异值对角矩阵</li>
</ul>
<p>通过分解后的矩阵预测缺失评分，实现推荐。</p>
<h3 id="42-surprise实现代码">4.2 Surprise实现代码</h3>
<pre><code class="language-python">from surprise import SVD, accuracy
from surprise.model_selection import train_test_split
 
# 划分训练集/测试集
trainset, testset = train_test_split(data, test_size=0.25)
 
# 初始化SVD模型
model = SVD(n_factors=100,  # 潜在因子数
           n_epochs=20,     # 迭代次数
           lr_all=0.005,    # 学习率
           reg_all=0.02)    # 正则化系数
 
# 训练模型
model.fit(trainset)
 
# 评估模型
predictions = model.test(testset)
accuracy.rmse(predictions)  # 输出RMSE评估指标
</code></pre>
<h2 id="五用户画像构建与相似度计算">五、用户画像构建与相似度计算</h2>
<h3 id="51-用户特征提取">5.1 用户特征提取</h3>
<pre><code class="language-python">def get_user_features(user_id):
    # 获取用户评分记录
    user_ratings = ratings[ratings['user_id'] == user_id]
    
    # 计算评分分布特征
    avg_rating = user_ratings['rating'].mean()
    rating_counts = user_ratings['rating'].value_counts().sort_index()
    
    # 获取用户潜在向量
    user_vector = model.pu[user_id-1]  # Surprise内部使用0-based索引
    
    return {
        'avg_rating': avg_rating,
        'rating_distribution': rating_counts.to_dict(),
        'latent_factors': user_vector
    }
</code></pre>
<h3 id="52-用户相似度计算">5.2 用户相似度计算</h3>
<pre><code class="language-python">from surprise.prediction_algorithms.matrix_factorization import SVD
 
def find_similar_users(target_user, n=5):
    # 获取所有用户潜在向量
    users = model.pu
    
    # 计算余弦相似度
    similarities = []
    for user in users:
        sim = cosine_similarity(users[target_user-1], user)
        similarities.append((sim, user))
    
    # 返回最相似的n个用户
    return sorted(similarities, reverse=True, key=lambda x: x[0])[:n]
</code></pre>
<h2 id="六flask推荐服务实现">六、Flask推荐服务实现</h2>
<h3 id="61-web服务架构设计">6.1 Web服务架构设计</h3>
<pre><code>/                   -&gt; 主页（用户输入界面）
/recommend/&lt;user_id&gt;-&gt; 推荐结果页
/user/&lt;user_id&gt;     -&gt; 用户画像页
</code></pre>
<h3 id="62-核心路由实现">6.2 核心路由实现</h3>
<pre><code class="language-python">from flask import Flask, render_template, request
 
app = Flask(__name__)
 
@app.route('/')
def index():
    return render_template('index.html')
 
@app.route('/recommend/&lt;int:user_id&gt;')
def recommend(user_id):
    # 生成推荐（Top-N推荐）
    user_items = ratings[ratings['user_id'] == user_id]['item_id'].unique()
    all_items = ratings['item_id'].unique()
    
    predictions = []
    for item in all_items:
        if item not in user_items:
            pred = model.predict(str(user_id), str(item))
            predictions.append((item, pred.est))
    
    # 按预测评分排序
    recommendations = sorted(predictions, key=lambda x: x[1], reverse=True)[:10]
    
    # 获取电影元数据
    movies = pd.read_csv('ml-100k/u.item', 
                        sep='|', 
                        encoding='latin-1',
                        usecols=['movie id', 'movie title', 'release date', 'genres'])
    
    # 合并推荐结果与电影信息
    recommended_movies = []
    for item_id, score in recommendations:
        movie = movies[movies['movie id'] == item_id].iloc[0]
        recommended_movies.append({
            'title': movie['movie title'],
            'year': movie['release date'],
            'genres': movie['genres'].split('|'),
            'score': round(score, 2)
        })
    
    return render_template('recommendations.html', 
                         movies=recommended_movies,
                         user_id=user_id)
 
@app.route('/user/&lt;int:user_id&gt;')
def user_profile(user_id):
    # 获取用户画像数据
    profile = get_user_features(user_id)
    
    # 获取相似用户
    similar_users = find_similar_users(user_id)
    
    return render_template('profile.html',
                         profile=profile,
                         similar_users=similar_users)
 
if __name__ == '__main__':
    app.run(debug=True)
</code></pre>
<h2 id="七前端模板设计jinja2示例">七、前端模板设计（Jinja2示例）</h2>
<h3 id="71-用户画像模板profilehtml">7.1 用户画像模板（profile.html）</h3>
<pre><code class="language-html">&lt;div class="profile-card"&gt;
  &lt;h2&gt;用户画像：User {{ user_id }}&lt;/h2&gt;
  &lt;p&gt;平均评分：{{ profile.avg_rating | round(2) }}&lt;/p&gt;
  &lt;div class="rating-distribution"&gt;
    {% for rating, count in profile.rating_distribution.items() %}
      &lt;div class="rating-bar"&gt;
        &lt;span class="rating-label"&gt;★{{ rating }}&lt;/span&gt;
        &lt;div class="bar-container"&gt;
          &lt;div class="bar" style="width: {{ (count / total_ratings) * 100 }}%"&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;span class="count"&gt;{{ count }}&lt;/span&gt;
      &lt;/div&gt;
    {% endfor %}
  &lt;/div&gt;
  
  &lt;h3&gt;相似用户：&lt;/h3&gt;
  &lt;ul class="similar-users"&gt;
    {% for sim, user in similar_users %}
      &lt;li&gt;User {{ user + 1 }} (相似度：{{ sim | round(3) }})&lt;/li&gt;
    {% endfor %}
  &lt;/ul&gt;
&lt;/div&gt;
</code></pre>
<h3 id="72-推荐结果模板recommendationshtml">7.2 推荐结果模板（recommendations.html）</h3>
<pre><code class="language-html">&lt;div class="recommendations"&gt;
  &lt;h2&gt;为您推荐（User {{ user_id }}）&lt;/h2&gt;
  {% for movie in movies %}
    &lt;div class="movie-card"&gt;
      &lt;h3&gt;{{ movie.title }} ({{ movie.year }})&lt;/h3&gt;
      &lt;p&gt;类型：{% for genre in movie.genres %}&lt;span class="genre"&gt;{{ genre }}&lt;/span&gt;{% endfor %}&lt;/p&gt;
      &lt;div class="score"&gt;预测评分：★{{ movie.score }}&lt;/div&gt;
    &lt;/div&gt;
  {% endfor %}
&lt;/div&gt;
</code></pre>
<h2 id="八系统优化方向">八、系统优化方向</h2>
<ol>
<li><strong>冷启动问题</strong>：集成内容过滤（使用电影元数据）</li>
<li><strong>实时更新</strong>：添加增量训练模块</li>
<li><strong>深度学习扩展</strong>：尝试Neural Collaborative Filtering</li>
<li><strong>性能优化</strong>：使用Faiss实现近似最近邻搜索</li>
<li><strong>可视化增强</strong>：添加评分分布热力图、用户-物品关系图</li>
</ol>
<h2 id="九完整项目部署指南">九、完整项目部署指南</h2>
<ol>
<li>
<p>下载MovieLens数据集：<a href="https://grouplens.org/datasets/movielens/" target="_blank" rel="noopener nofollow">https://grouplens.org/datasets/movielens/</a></p>
</li>
<li>
<p>创建项目目录结构：</p>
<pre><code>movie_rec_system/
├── app.py
├── templates/
│   ├── index.html
│   ├── profile.html
│   └── recommendations.html
├── static/
│   ├── css/
│   └── js/
└── ml-100k/
    ├── u.data
    ├── u.item
    └── ...
</code></pre>
</li>
<li>
<p>启动服务：<code>python app.py</code></p>
</li>
<li>
<p>访问：<a href="http://localhost:5000/" target="_blank" rel="noopener nofollow">http://localhost:5000/</a></p>
</li>
</ol>
<h2 id="十结语推荐系统的未来展望">十、结语：推荐系统的未来展望</h2>
<p>随着Transformer架构在自然语言处理领域的成功，推荐系统正在经历从协同过滤到序列建模的范式转变。未来工作可以将用户行为序列建模为时间序列，使用Transformer捕捉长期兴趣，同时结合多模态数据（如海报图像、剧情简介）构建更全面的用户画像。</p>
<p>注：实际部署时应添加异常处理、日志记录等生产级功能。</p>
<p>通过这个项目，您不仅掌握了推荐系统的核心技术，还完成了从算法实现到Web服务的完整工程实践。这种全栈能力正是构建智能应用的关键竞争力。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.038493947394675924" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-21 08:16">2025-04-21 08:15</span>&nbsp;
<a href="https://www.cnblogs.com/TS86">TechSynapse</a>&nbsp;
阅读(<span id="post_view_count">15</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18837891);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18837891', targetLink: 'https://www.cnblogs.com/TS86/p/18837891', title: '基于Surprise和Flask构建个性化电影推荐系统：从算法到全栈实现' })">举报</a>
</div>
        