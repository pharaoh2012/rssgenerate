
        <h2>
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/leslies2/p/18632905" title="发布于 2025-01-13 13:55">
    <span role="heading" aria-level="2">DevOps 企业级 CI/CD 实战 —— 整合 GitLab+Jenkins+Harbor+Docker 实现代码全自动化流程管理</span>
    

</a>

        </h2>
            <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250113135215088-1432453152.png" alt="DevOps 企业级 CI/CD 实战 —— 整合 GitLab+Jenkins+Harbor+Docker 实现代码全自动化流程管理" class="desc_img">
        随着 AI 人工智能、云计算、Docker、K8S 等容器技术等的发展，DevOps 得到了广泛的应用和推广，CI / CD ( 持续集成 / 持续部署 ）等概念不断深化和完善。本文将以 GitLab+Jenkins+Harbor+Docker 的管理方案为例子，介绍如何通过合理的部署，实现项目全流程的自动化管理。文章将详细介绍 Jenkins 中常用插件的应用以及 pipeline 脚本的编写方式、harbor 服务器的部署、并讲解 Publish Over SSH 插件中 sshPublisher 函数的应用以及常见的问题。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>前言</p>
<p>随着 AI 人工智能、云计算、Docker、K8S 等容器技术等的发展，DevOps 得到了广泛的应用和推广，CI / CD ( 持续集成 / 持续部署 ）等概念不断深化和完善。CI/CD 是现代软件开发中的重要实践，CI（Continuous Integration，持续集成）强调开发人员频繁地将代码集成到共享仓库，并且每次集成都会通过自动化构建和测试来验证代码的质量。CD（Continuous Delivery/Deployment，持续交付 / 部署）是在持续集成的基础上，将经过验证的代码自动部署到生产环境或者类生产环境中。本文将以&nbsp;GitLab+Jenkins+Harbor+Docker&nbsp;的管理方案为例子，介绍如何通过合理的部署，实现项目全流程的自动化管理。</p>
<p>&nbsp;</p>
<p><a name="p0"></a>目录</p>
<p><span style="font-size: 16px"><a href="#p1" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1); font-size: 14px">一、DevOps 的发展趋势</span></a></span></p>
<p><span style="font-size: 14px; color: rgba(0, 0, 255, 1)"><a href="#p2" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">二、运行环境介绍</span></a></span></p>
<p><span style="font-size: 14px"><a style="font-size: 14px" href="#p3" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">三、GitLab 源代码管理</span></a></span></p>
<p><a href="#p4" rel="noopener nofollow"><span style="font-size: 14px"><span style="color: rgba(0, 0, 255, 1)">四、Docker 与 Harbor 私有仓库</span></span></a></p>
<p><span style="color: rgba(0, 0, 255, 1)"><a href="#p5" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">五、Jenkins整合资源实现 CI/CD 自动化部署&nbsp;</span></a><br></span></p>
<p>&nbsp;</p>
<p><a name="p1"></a></p>
<p><strong>&nbsp;</strong><span style="font-size: 18px"><strong>一、DevOps 的发展趋势</strong>&nbsp;</span></p>
<p>随着 AI 人工智能、云计算、Docker、K8S 等容器技术等的发展，DevOps 得到了广泛的应用和推广，近10 年时间，它在 CI / CD ( 持续集成 / 持续部署 ）等概念不断深化和完善。DevOps 的兴起，对于提高软件交付效率、质量和团队协作具有重要意义，具体表现为：</p>
<ol class="auto-hide-last-sibling-br">
<li>提高软件交付效率：通过实现持续集成（CI）和持续交付（CD）流程，开发人员能够迅速地集成代码变更，软件可以可靠地以自动化的方式发布到生产环境中，从而缩短交付周期，快速推出产品和功能更新。</li>
<li>提升软件质量：自动化测试包括单元测试、集成测试、功能测试等，确保了代码的质量和稳定性；持续监控提供了实时数据，帮助团队及时识别和解决问题。</li>
<li>加强团队协作：打破部门壁垒，强调开发、运维、测试、安全等各个职能部门之间的沟通与协作，摒弃 “竖井式” 的组织架构，形成跨职能的团队。团队成员共同为项目的成功交付负责，建立相互信任和尊重的文化氛围，鼓励积极分享知识和经验，共同解决问题。这种文化的转变有助于更快地发现问题，并以更高效率解决问题。</li>





























</ol>
<p>随着 DevOps 的持续发展，市场上也出现大量&nbsp;Jenkins、GitLab、CircleCI、Azure Pipelines 等开发工具为&nbsp; CI/CD 提供应用，&nbsp;本文将以 <span style="color: rgba(0, 0, 255, 1)">GitLab+Jenkins+Harbor+Docker</span> 的管理方案为例子，介绍如何通过合理的部署，实现项目全流程的自动化管理。<br>GitLab、Jenkins、Harbor、Docker 能分别满足我们在日常的代码管理、自动化部署、镜像管理、容器部署等不同方面的要求，由它们组成的总体部署流程图如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202412/64989-20241226182940043-1433472260.png" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p style="text-align: right"><span style="color: rgba(0, 0, 255, 1)"><a href="#p0" rel="noopener nofollow"><span style="font-size: 12px; color: rgba(0, 0, 255, 1)">回到目录</span></a></span></p>
<p><span style="font-size: 18px"><a name="p2"></a></span></p>
<p><strong><span style="font-size: 18px">二、运行环境介绍</span></strong></p>
<p>本次实施例子的运行环境共设三台服务器：<br>192.168.1.101&nbsp; GitLab 服务器，用于存储源代码<br>192.168.1.102&nbsp; Jenkins 服务器，管理 CI /CD 流程，安装 Docker 用于生成本地镜像<br>192.168.1.103&nbsp; Harbor 服务器，私有仓库用于保存镜像<br>192.168.1.104&nbsp; Docker 用于实现远程部署<br>关于GitLab、Jenkins、Harbor、Docker 的安装在网上已有大量的例子，此处只作简单介绍，不再详细讲解。<br>项目以 SpringBoot 为例子，利用 IDEA 的 GitLab Project 工具，直接把源代码链接到 GitLab 进行源代码存档</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.boot.SpringApplication;
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span> <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.boot.autoconfigure.SpringBootApplication;
</span><span style="color: rgba(0, 128, 128, 1)"> 3</span> 
<span style="color: rgba(0, 128, 128, 1)"> 4</span> <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.io.IOException;
</span><span style="color: rgba(0, 128, 128, 1)"> 5</span> 
<span style="color: rgba(0, 128, 128, 1)"> 6</span> 
<span style="color: rgba(0, 128, 128, 1)"> 7</span> <span style="color: rgba(0, 0, 0, 1)">@SpringBootApplication
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span> <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Main {
</span><span style="color: rgba(0, 128, 128, 1)"> 9</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> main(String[] args) <span style="color: rgba(0, 0, 255, 1)">throws</span><span style="color: rgba(0, 0, 0, 1)"> InterruptedException {
</span><span style="color: rgba(0, 128, 128, 1)">10</span>         SpringApplication.run(Main.<span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">, args);
</span><span style="color: rgba(0, 128, 128, 1)">11</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">12</span> <span style="color: rgba(0, 0, 0, 1)">}
</span><span style="color: rgba(0, 128, 128, 1)">13</span> 
<span style="color: rgba(0, 128, 128, 1)">14</span> <span style="color: rgba(0, 0, 0, 1)">@RestController
</span><span style="color: rgba(0, 128, 128, 1)">15</span> @RequestMapping("/person"<span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">16</span> <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> PersonService {
</span><span style="color: rgba(0, 128, 128, 1)">17</span>     @RequestMapping("/getAge"<span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">18</span>     <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> String getAge(String name){
</span><span style="color: rgba(0, 128, 128, 1)">19</span>         <span style="color: rgba(0, 0, 255, 1)">return</span> name+"'s age is 26"<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">20</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">21</span> }</pre>
</div>
<p style="text-align: right"><span style="font-size: 12px"><a href="#p0" rel="noopener nofollow">&nbsp;<span style="color: rgba(0, 0, 255, 1)">回到目录</span></a></span></p>
<p><span style="font-size: 18px"><a name="p3"></a></span></p>
<p><strong><span style="font-size: 18px">三、GitLab 源代码管理</span></strong></p>
<p>GitLab 是一个基于 Git 的开源仓库管理系统，相对于GitHub 公开性的开源仓库，它有私密性，可靠性上的优势。它支持私有化部署，可进行代码的提交、推送、拉取等基本操作，方便开发者对代码进行版本管理，也可创建多个分支，用于并行开发、功能测试和版本发布等<span class="ref_content_circle container-LE75Rz short-I4L7JD clickable-xZ6fCn" data-popupid="l15kw9f">。GitLab 本身内置 CI/CD 功能，通过配置文件如.gitlab-ci.yml 可以自动化构建、测试和部署过程。与 Jenkins 相比，它具有轻量化与集成化的优点，但由于可扩展性有一定限制，GitLab 的 CI/CD 更适用于中小型项目的管理或以开发性测试为目标的项目阶段，而 Jenkins 更适用于开发集成测试</span><span class="ref_content_circle container-LE75Rz short-I4L7JD clickable-xZ6fCn" data-popupid="l15kw9f">发布一体化的大型项目管理。</span></p>
<p><strong><span class="ref_content_circle container-LE75Rz short-I4L7JD clickable-xZ6fCn" style="font-size: 16px" data-popupid="l15kw9f">3.1 GitLab 安装</span></strong></p>
<p>GitLab 的私人版是免费的，可在官网上下载，在国内更推荐使用极狐GitLab 中国发行版(JH)<span style="color: rgba(0, 0, 255, 1)">&nbsp;<a href="https://gitlab.cn/" target="_blank" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">https://www.gitlab.cn/</span></a></span>&nbsp;对国内的服务器支持更全面, 扫二维码后联系相关工作人员可获取最新版本。</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250108152130733-1528430717.png" width="535" height="409" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>本文把 gitlab 默认安装在 ubuntu 24 服务器 192.168.1.101 上<br>首先在官网下载Dev包<br><span style="color: rgba(51, 102, 255, 1)">wget https://packages.gitlab.cn/repository/ubuntu-focal/pool/g/gitlab-jh/gitlab-jh_16.3.3-jh.0_arm64.deb</span><br>安装极狐<br>dpkg -i gitlab-jh_16.3.3-jh.0_amd64.deb</p>
<p>修改配置，加入IP 和商品&nbsp; 0.0.0.0：18081 ，使用本地时区，避免冲突建议不要使用默认端口 8080&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">1</span> <span style="color: rgba(0, 0, 0, 1)"># 设置外部url
</span><span style="color: rgba(0, 128, 128, 1)">2</span> external_url <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">http://0.0.0.0:18081</span><span style="color: rgba(128, 0, 0, 1)">'</span>
<span style="color: rgba(0, 128, 128, 1)">3</span> 
<span style="color: rgba(0, 128, 128, 1)">4</span> <span style="color: rgba(0, 0, 0, 1)"># 设置时区
</span><span style="color: rgba(0, 128, 128, 1)">5</span> gitlab_rails[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">time_zone</span><span style="color: rgba(128, 0, 0, 1)">'</span>] = <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Asia/Shanghai</span><span style="color: rgba(128, 0, 0, 1)">'</span></pre>
</div>
<p>运行 sudo gitlab-ctl reconfigure 重新初始化。<br>运行 sudo ufw allow 18081 开放端口 18081 给外网访问<br>运行 sudo gitlab-ctl start 启动服务<br>访问 http://localhost:18081 登录，初次登录，极狐 GitLab 将随机生成一个密码并存储在 /etc/gitlab/initial_root_password 文件中(出于安全原因，24 小时后会自动删除），登记后建议马上修改密码，使用此密码的用户名为root。</p>
<p>成功登录后，创建群组 project，建立项目 myproject2 ，在项目主页可以分别看到项目的 git 路径 <span style="color: rgba(51, 102, 255, 1)">git@0.0.0.0:project/myproject2.git</span> 和 HTTP 路径 <span style="color: rgba(51, 102, 255, 1)">http://0.0.0.0:18081/project/myproject2.git</span></p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250108164719956-331723894.png" width="537" height="334" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>点击成员 -- 邀请成员，加入源项目代码开发人员名单</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250108164009736-1225039880.png" width="538" height="241" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p><strong><span class="ref_content_circle container-LE75Rz short-I4L7JD clickable-xZ6fCn" style="font-size: 16px" data-popupid="l15kw9f">3.2 SSH 连接 GitLab 服务</span></strong></p>
<p>在本机运行以下命令生成密钥</p>
<p>ssh-keygen -t rsa -b 4096 -C <span class="hljs-string">"your_email@example.com"</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">ssh-keygen</span> -t rsa -b 4096 -C <span style="color: rgba(128, 0, 0, 1)">"your_email</span><span style="color: rgba(128, 0, 0, 1)">@example.com</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
Generating public</span>/<span style="color: rgba(0, 0, 0, 1)">private rsa key pair.
Enter </span><span style="color: rgba(0, 0, 255, 1)">file</span> <span style="color: rgba(0, 0, 255, 1)">in</span> <span style="color: rgba(0, 0, 255, 1)">which</span> to save the key (/root/.<span style="color: rgba(0, 0, 255, 1)">ssh</span>/id_rsa): /root/.<span style="color: rgba(0, 0, 255, 1)">ssh</span>/<span style="color: rgba(0, 0, 0, 1)">id_rsa_jh_gitlab
Enter passphrase (empty </span><span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> no passphrase):
Enter same passphrase again:
Your identification has been saved </span><span style="color: rgba(0, 0, 255, 1)">in</span> /root/.<span style="color: rgba(0, 0, 255, 1)">ssh</span>/<span style="color: rgba(0, 0, 0, 1)">id_rsa_jh_gitlab
Your public key has been saved </span><span style="color: rgba(0, 0, 255, 1)">in</span> /root/.<span style="color: rgba(0, 0, 255, 1)">ssh</span>/<span style="color: rgba(0, 0, 0, 1)">id_rsa_jh_gitlab.pub
The key fingerprint is:
SHA256:OuX13mP</span>/EASg/KljuZXrWsq65WIvzFaU9T72tXisVPc jh-<span style="color: rgba(0, 0, 0, 1)">gitlab@devops.com
The key</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">s randomart image is:</span>
+---[RSA <span style="color: rgba(128, 0, 128, 1)">3072</span>]----+
|          ...    |
|       . ..  .   |
|        oo .  .  |
|        o. ...   |
|       .S +.  ...|
|       +.+ o+ ..+|
|     oo.B +..++.E|
|      B* * o.o+= |
|     oo*Boo .o+o+|
+----[SHA256]-----+</pre>
</div>
<p>在 C:\Users\admin\.ssh 配置文件夹中可找到生成后的公钥和私钥&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250108160117376-1931536063.png" width="531" height="101" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>打开个人资料按键，点击SSH密钥页面，添加密钥</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250108160407160-786786144.png" width="535" height="216" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>&nbsp;打开刚生成的 id_rsa.pub 文件，把生成的公钥复制粘贴到页面，最后保存</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250108160934990-1657753070.png" width="534" height="265" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p><strong><span style="font-size: 16px">3.3&nbsp;IntelliJ IDEA&nbsp;代码发布&nbsp;</span></strong></p>
<p>在 IDEA 点击设置-插件，搜索 Gitlab Projects 安装插件</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250108161750585-190556248.png" width="536" height="416" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>&nbsp;在项目中打开 VCS 菜单，点击 “创建 Git 仓库” 按键</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250108162622142-894137481.png" width="537" height="239" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>&nbsp;生成 Git 管理器后，点击 “管理远程” 按键</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250108162748412-1158638682.png" width="538" height="333" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>&nbsp;在URL上填入GitLab 上配置的项目HTTP 路径&nbsp;http://192.168.1.101:18081/project/myproject2.git&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250108165510479-316816480.png" width="542" height="342" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>在IDEA 点击提交并推送按键，测试一下项目是否能成功提交到GitLab</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250108170058830-1139046775.png" width="543" height="290" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p style="text-align: right">&nbsp;<span style="color: rgba(0, 0, 255, 1)"><a href="#p0" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">&nbsp;<span style="font-size: 12px">回到目录</span></span></a></span></p>
<p>&nbsp;<a name="p4"></a><strong><span style="font-size: 18px">四、Docker 与 Harbor 私有仓库</span></strong></p>
<p><span style="font-size: 16px"><strong>4.1 Docker 运行环境</strong></span></p>
<p><span style="font-size: 14px"><strong>4.1.1 Docker 简介</strong></span></p>
<p>Docker是一个开源的平台，用于开发、交付和运行应用程序。它能够在Windows，macOS，Linux计算机上运行，并将某一应用程序及其依赖项打包至一个容器中，这些容器可以在任何支持Docker的环境中运行。容器彼此隔离，但可以通过特定的通道相互传递信息。<br>Docker提供了一个轻量级的虚拟化解决方案。由于运行在同一计算机上的所有容器共享同一个操作系统内核，避免了启动与维护虚拟机的开销。因此相比于传统的虚拟机，Docker容器更加轻便、快速、容易部署。使用Docker，开发者可以避免在两台计算机上运行效果不一致的问题，容器提供了一致的行为，进而使得应用程序在不同环境的计算机上有相同的运行效果。</p>
<p><strong>4.1.2 Docker 的结构组成</strong></p>
<p>Docker平台由以下部分组成：<br>Docker守护进程（Docker daemon）：Docker采用 C/S架构。Docker daemon 作为服务端接受来自客户端的请求，并进行处理（创建、运行、分发容器） 。<br>Docker客户端（Docker client）：Docker 客户端则用于与 Docker 守护进程通信，发送命令以管理容器。Docker采用 C/S架构。客户端和服务端既可以运行在一个机器上，也可通过 socket 或者RESTful API 来进行通信。<br>Docker daemon一般在宿主主机后台运行，等待接收来自客户端的消息。 Docker 客户端则为用户提供一系列可执行命令，用户用这些命令实现跟 Docker daemon交互。<br>Docker镜像（Docker images）：Docker 镜像是用于构建 Docker 容器的静态文件，它包含了应用程序运行所需的所有文件、依赖项和配置信息。Docker 镜像可以从 Docker Hub 或其他镜像仓库中获取，也可以通过 Dockerfile 自定义构建。<br>Docker容器（Docker container）：Docker 容器是 Docker 镜像的运行实例，它包含了应用程序及其依赖项，并在隔离的环境中运行。每个容器都是一个独立的进程，拥有自己的文件系统、网络空间和进程空间。<br>Docker容器通过Docker镜像来创建。容器与镜像的关系类似于面向对象编程中的对象与类。<br>有兴趣学习 Docker 基础操作的朋友可查看 《<span style="color: rgba(0, 0, 255, 1)"><a href="https://www.cnblogs.com/leslies2/p/18595524" target="_blank"><span style="color: rgba(0, 0, 255, 1)">Docker 基本操作简介</span></a></span>》</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250109162634578-1881250340.png" width="533" height="254" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p><strong>4.1.3 Docker 安装</strong></p>
<p>目前 Docker 已被广泛应用于企业系统的部署，本次测试中默认把 Docker 部署在 ubuntu 服务器 192.168.1.104 中，</p>
<p>安装教程在官网<span style="color: rgba(0, 0, 255, 1)"><a href="https://docs.docker.com/engine/install/ubuntu/" target="_blank" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)"> https://docs.docker.com/engine/install/ubuntu/</span></a>&nbsp;</span>说明文档有详细介绍，其中 $VERSION_CODENAME 绑定所需要的版本号</p>
<div class="cnblogs_code">
<pre># Add Docker<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">s official GPG key:</span>
<span style="color: rgba(0, 0, 255, 1)">sudo</span> apt-<span style="color: rgba(0, 0, 0, 1)">get update
</span><span style="color: rgba(0, 0, 255, 1)">sudo</span> apt-get <span style="color: rgba(0, 0, 255, 1)">install</span> ca-<span style="color: rgba(0, 0, 0, 1)">certificates curl
</span><span style="color: rgba(0, 0, 255, 1)">sudo</span> <span style="color: rgba(0, 0, 255, 1)">install</span> -m <span style="color: rgba(128, 0, 128, 1)">0755</span> -d /etc/apt/<span style="color: rgba(0, 0, 0, 1)">keyrings
</span><span style="color: rgba(0, 0, 255, 1)">sudo</span> curl -fsSL https:<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc</span>
<span style="color: rgba(0, 0, 255, 1)">sudo</span> <span style="color: rgba(0, 0, 255, 1)">chmod</span> a+r /etc/apt/keyrings/<span style="color: rgba(0, 0, 0, 1)">docker.asc

# Add the repository to Apt sources:
</span><span style="color: rgba(0, 0, 255, 1)">echo</span><span style="color: rgba(0, 0, 0, 1)"> \
  </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \</span>
  $(. /etc/os-release &amp;&amp; <span style="color: rgba(0, 0, 255, 1)">echo</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">$VERSION_CODENAME</span><span style="color: rgba(128, 0, 0, 1)">"</span>) stable<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)"> | \</span>
  <span style="color: rgba(0, 0, 255, 1)">sudo</span> <span style="color: rgba(0, 0, 255, 1)">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/<span style="color: rgba(0, 0, 255, 1)">null</span>
<span style="color: rgba(0, 0, 255, 1)">sudo</span> apt-get update</pre>
</div>
<p>最后执行安装 docker-ce、docker-ce-cli、containerd.io、docker-buildx-plugin、docker-compose-plugin 等数据包</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">sudo</span> apt-get <span style="color: rgba(0, 0, 255, 1)">install</span> docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</pre>
</div>
<p>docker 默认的镜像源来源于 DockerHub，但自 2024年5月起 DockerHub 官网的镜像源受到限制，所以完成安装后还需要修改配置文件 /etc/docker/daemon.json 。如果 daemon.json 不存在可以手动新建，然后加入国内可用的镜像源。如果内网的运行环境没加密，可注册一个免检测地址<br>"insecure-registries": [ "http://192.168.1.104:18084"]</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 0, 1)">{
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span>   <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">registry-mirrors</span><span style="color: rgba(128, 0, 0, 1)">"</span>: [<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://mirror.aliyuncs.com</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)"> 3</span>                        <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://mirror.baidubce.com</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)"> 4</span>                        <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://docker.m.daocloud.io</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>                        <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://docker.nju.edu.cn</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span>                        <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://docker.mirrors.sjtug.sjtu.edu.cn</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)"> 7</span>                        <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://docker.mirrors.ustc.edu.cn</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>                        <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://mirror.iscas.ac.cn</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)"> 9</span>                        <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://docker.rainbond.cc</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 128, 128, 1)">10</span> <span style="color: rgba(0, 0, 0, 1)">      ],
</span><span style="color: rgba(0, 128, 128, 1)">11</span>   <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">log-driver</span><span style="color: rgba(128, 0, 0, 1)">"</span>:<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">json-file</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)">12</span>   <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">log-opts</span><span style="color: rgba(128, 0, 0, 1)">"</span>: {<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">max-size</span><span style="color: rgba(128, 0, 0, 1)">"</span>:<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">1g</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">max-file</span><span style="color: rgba(128, 0, 0, 1)">"</span>:<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">3</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">},
</span><span style="color: rgba(0, 128, 128, 1)">13</span>   <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">live-restore</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)">14</span>   <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">insecure-registries</span><span style="color: rgba(128, 0, 0, 1)">"</span>: [<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://192.168.1.104:18084</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]
</span><span style="color: rgba(0, 128, 128, 1)">15</span> }    </pre>
</div>
<p>完成后重启 docker 即可</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">1</span> <span style="color: rgba(0, 0, 255, 1)">sudo</span> systemctl daemon-<span style="color: rgba(0, 0, 0, 1)">reload
</span><span style="color: rgba(0, 128, 128, 1)">2</span> <span style="color: rgba(0, 0, 255, 1)">sudo</span> systemctl restart docker</pre>
</div>
<p>输入命令docker -v 可检测 docker 是否已完成安装</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250109171422697-726888396.png" alt="" width="542" height="55" loading="lazy"></p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 16px">4.2 Harbor 私有仓库</span></strong></p>
<p>Docker 的常用镜像都来源于公开仓库，但在企业部署的系统，出于私密性与安全性考虑，一般都会部署私有仓库来保存常用的镜像。私有仓库是指企业或个人在本地或私有云环境中搭建的 Docker 镜像存储库，用于存储和管理自定义的Docker镜像。与Docker Hub等公共镜像仓库相比，私有仓库具有更高的安全性和可控性，适合存储敏感或内部使用的镜像。目前市面上常用的私有仓库有&nbsp;Docker Registry、Harbor、Nexus Repository Manager、JFrog Artifactory 等。<br>下面以 Harbor 仓库为例，介绍一下私有仓库的应用。</p>
<p><span style="font-size: 14px"><strong>4.2.1 Harbor 简介</strong></span></p>
<p>Harbor 是 VMware 公司开源的企业级 Docker Registry 项目，其目标是帮助用户迅速搭建一个企业级的 Docker Registry 服务<br>Harbor 以 Docker 公司开源的 Registry 为基础，提供了图形管理 UI 、基于角色的访问控制(Role Based AccessControl) 、AD/LDAP 集成、以及审计日志(Auditlogging) 等企业用户需求的功能，同时还原生支持中文<br>Harbor 的每个组件都是以 Docker 容器的形式构建的，使用 docker-compose 来对它进行部署。用于部署 Harbor 的 docker-compose 模板位于 harbor/docker-compose.yml</p>
<p><span style="font-size: 14px"><strong>4.2.2 Harbor 的功能特点</strong></span></p>
<p>基于角色控制：用户和仓库都是基于项目进行组织的，而用户在项目中可以拥有不同的权限<br>基于镜像的复制策略：镜像可以在多个Harbor实例之间进行复制（同步）<br>支持 LDAP/AD：Harbor 可以集成企业内部已有的 AD/LDAP（类似数据库的一张表），用于对已经存在的用户认证和管理<br>镜像删除和垃圾回收：镜像可以被删除，也可以回收镜像占用的空间<br>图形化用户界面：用户可以通过浏览器来浏览，搜索镜像仓库以及对项目进行管理<br>审计管理：所有针对镜 像仓库的操作都可以被记录追溯，用于审计管理<br>支持 RESTful API：RESTful API 提供给管理员对于 Harbor 更多的操控, 使得与其它管理软件集成变得更容易<br>Harbor 和 docker registry的关系：Harbor 实质上是对 docker registry 做了封装，扩展了自己的业务模板<br> </p>
<p><span style="font-size: 14px"><strong>4.2.3 Harbor 的安装</strong></span></p>
<p>首先在服务器上安装 Docker 和 Docker Compose，然后下载Harbor，测试中默认把 Habor 安装在服务器 192.168.1.103<br>在官网上点击链接&nbsp;<span style="color: rgba(0, 0, 255, 1)"><a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">https://github.com/goharbor/harbor/releases</span></a></span> 可下载 Harbor 的最新版 harbor-offline-installer-v2.12.1.tgz （ 官网安装教程： <span style="color: rgba(0, 0, 255, 1)"><a href="https://goharbor.io/docs/2.12.0/install-config/" target="_blank" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">https://goharbor.io/docs/2.12.0/install-config/</span></a>&nbsp;</span>）<br>解压安装包到文件夹/root/&nbsp; &nbsp; &nbsp; &nbsp;tar -zxvf /root/harbor-offline-installer-v2.1.3.tgz -C&nbsp; /root/<br>进入 /root/harbor 文件夹可见到配置文件harbor.yml.tmpl，把文件名修改为 harbor.yml 默认配置文件<br>hostname 为本机IP，port 为使用商品，如果内部服务器没有加密可把 https 内部注释，要不然系统会报错，自行修改管理员密码 harbor_admin_password</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 255, 1)">hostname</span>: <span style="color: rgba(128, 0, 128, 1)">192.168</span>.<span style="color: rgba(128, 0, 128, 1)">1.103</span>
<span style="color: rgba(0, 128, 128, 1)"> 2</span> 
<span style="color: rgba(0, 128, 128, 1)"> 3</span> <span style="color: rgba(0, 0, 0, 1)"># http related config
</span><span style="color: rgba(0, 128, 128, 1)"> 4</span> <span style="color: rgba(0, 0, 0, 1)">http:
</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>   # port <span style="color: rgba(0, 0, 255, 1)">for</span> http, default is <span style="color: rgba(128, 0, 128, 1)">80</span><span style="color: rgba(0, 0, 0, 1)">. If https enabled, this port will redirect to https port
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span>   port: <span style="color: rgba(128, 0, 128, 1)">18081</span>
<span style="color: rgba(0, 128, 128, 1)"> 7</span> <span style="color: rgba(0, 0, 0, 1)"># https related config
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span> <span style="color: rgba(0, 0, 0, 1)">#https:
</span><span style="color: rgba(0, 128, 128, 1)"> 9</span>   # https port <span style="color: rgba(0, 0, 255, 1)">for</span> harbor, default is <span style="color: rgba(128, 0, 128, 1)">443</span>
<span style="color: rgba(0, 128, 128, 1)">10</span>   #port: <span style="color: rgba(128, 0, 128, 1)">443</span>
<span style="color: rgba(0, 128, 128, 1)">11</span>   # The path of cert and key files <span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> nginx
</span><span style="color: rgba(0, 128, 128, 1)">12</span>   #certificate: /your/certificate/<span style="color: rgba(0, 0, 0, 1)">path
</span><span style="color: rgba(0, 128, 128, 1)">13</span>   #private_key: /your/private/key/<span style="color: rgba(0, 0, 0, 1)">path
</span><span style="color: rgba(0, 128, 128, 1)">14</span>   # enable strong ssl ciphers (default: <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">15</span>   # strong_ssl_ciphers: <span style="color: rgba(0, 0, 255, 1)">false</span>
<span style="color: rgba(0, 128, 128, 1)">16</span> <span style="color: rgba(0, 0, 0, 1)">......
</span><span style="color: rgba(0, 128, 128, 1)">17</span> <span style="color: rgba(0, 0, 0, 1)"># The initial password of Harbor admin
</span><span style="color: rgba(0, 128, 128, 1)">18</span> # It only works <span style="color: rgba(0, 0, 255, 1)">in</span> first <span style="color: rgba(0, 0, 255, 1)">time</span> to <span style="color: rgba(0, 0, 255, 1)">install</span><span style="color: rgba(0, 0, 0, 1)"> harbor
</span><span style="color: rgba(0, 128, 128, 1)">19</span> <span style="color: rgba(0, 0, 0, 1)"># Remember Change the admin password from UI after launching Harbor.
</span><span style="color: rgba(0, 128, 128, 1)">20</span> harbor_admin_password: Harbor@<span style="color: rgba(128, 0, 128, 1)">12345</span>   ---<span style="color: rgba(0, 0, 0, 1)">修改harbor登录密码
</span><span style="color: rgba(0, 128, 128, 1)">21</span> 
<span style="color: rgba(0, 128, 128, 1)">22</span> <span style="color: rgba(0, 0, 0, 1)"># Harbor DB configuration
</span><span style="color: rgba(0, 128, 128, 1)">23</span> <span style="color: rgba(0, 0, 0, 1)">database:
</span><span style="color: rgba(0, 128, 128, 1)">24</span>   # The password <span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> the root user of Harbor DB. Change this before any production use.
</span><span style="color: rgba(0, 128, 128, 1)">25</span>  password: root@<span style="color: rgba(128, 0, 128, 1)">123</span>   ---<span style="color: rgba(0, 0, 0, 1)">修改harbor数据库密码
</span><span style="color: rgba(0, 128, 128, 1)">26</span> 
<span style="color: rgba(0, 128, 128, 1)">27</span> <span style="color: rgba(0, 0, 0, 1)">......
</span><span style="color: rgba(0, 128, 128, 1)">28</span> <span style="color: rgba(0, 0, 0, 1)"># The default data volume
</span><span style="color: rgba(0, 128, 128, 1)">29</span> data_volume: /data     ---<span style="color: rgba(0, 0, 0, 1)">修改harbor仓库数据目录（安装Harbor时会自动创建）
</span><span style="color: rgba(0, 128, 128, 1)">30</span> 
<span style="color: rgba(0, 128, 128, 1)">31</span> <span style="color: rgba(0, 0, 0, 1)">......
</span><span style="color: rgba(0, 128, 128, 1)">32</span> <span style="color: rgba(0, 0, 0, 1)"># The directory on your host that store log
</span><span style="color: rgba(0, 128, 128, 1)">33</span> location: /var/log/harbor</pre>
</div>
<p>完成配置修改后执行安装</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">sudo</span> ./<span style="color: rgba(0, 0, 255, 1)">install</span>.<span style="color: rgba(0, 0, 255, 1)">sh</span></pre>
</div>
<p>成功安装后，系统将出现以下页面</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250109173603253-1431862986.png" width="534" height="285" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>成功安装,进入 /root/harbor 文件夹，启动服务</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">sudo</span> docker-compose start</pre>
</div>
<p>若 harbor 成功启动可见以下页面</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250109174457054-1675816850.png" width="540" height="190" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>&nbsp;打开 http://192.168.1.103:18081 即可登录 harbor 系统</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250109174716326-1441312993.png" width="541" height="268" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>&nbsp;新建项目 projects 及镜像仓库 myproject2 , 加入常用的用户后，Harbor 的基本配置已完成</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250109174946070-748230178.png" alt="" width="542" height="264" loading="lazy"></p>
<p style="text-align: right"><span style="font-size: 12px; color: rgba(0, 0, 255, 1)"><a href="#p0" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">回到目录</span></a></span>&nbsp;</p>
<p><strong><span style="font-size: 18px"><a name="p5"></a>五、Jenkins 整合资源实现 CI/CD 自动化部署</span></strong></p>
<p>Jenkins 的前身是 Hudson，一个采用 Java 编写的开源持续集成工具，由 Sun 公司在 2004 年启动，2005 年发布了第一个版本，并逐渐在持续集成工具领域占据主导地位。Oracle 收购 Sun 后，随着时间的推移，Jenkins 社区迅速壮大，到 2013 年 12 月，Jenkins 受广大开发企业的欢迎，项目成员远超 Hudson，成为 CI/CD 自动化部署领域中使用量占比最高的平台。如今，虽然市面上已有很多工具能实现自动化部署，但 Jenkins 依然是持续集成工具领域的领导者。</p>
<p><strong><span style="font-size: 16px">5.1 Jenkins 的特点</span></strong></p>
<p>Jenkins 是一个开源的自动化服务器，可以通过丰富的插件支持构建、部署和自动化的各个方面，它的主要功能包括：</p>
<p>持续集成/持续交付（CI/CD）：自动化的软件版本发布和测试项目，确保每次代码变更都能快速且可靠地集成和交付。<br>构建自动化：支持各种构建工具和语言，如 Maven、Gradle、Ant、以及 shell 脚本等。<br>测试自动化：能够集成各种测试工具和框架，如 JUnit、TestNG 等，自动化执行测试并生成报告。<br>部署自动化：自动化应用程序的部署过程，可以集成 Docker、Kubernetes 等工具。<br>监控和报告：监控外部调用的执行工作，生成详细的构建和测试报告，帮助快速定位和处理问题。</p>
<p><strong><span style="font-size: 16px">5.2 Jenkins 安装部署</span></strong></p>
<p>Jenkins 可通过官网下载&nbsp;<span style="color: rgba(0, 0, 255, 1)"><a href="https://www.jenkins.io/download/" target="_blank" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">https://www.jenkins.io/download/</span></a> </span>相应的版本，通过 java 执行命运直接运行，本次测试默认把 Jenkins 安装在服务器 192.168.1.102 ，并使用端口 18080 运行</p>
<p>java -jar jenkins.war --httpPort=18081</p>
<p>若以 root 身份运行，初始化密码在&nbsp;/root/.jenkins/secrets/initialAdminPassword 文件中。</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250108174012259-1556938829.png" width="536" height="392" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>&nbsp;第一次进入系统后可默认安装推荐的插件成功，登录后建议修改用户信息和密码。</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250108174552605-522446203.png" width="539" height="519" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>完成插件安装后，点击 Manage Jenkins - Tools 进入工具页面，绑定 Maven 和 JDK 路径</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250109180618772-2082417819.png" width="539" height="255" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p><span style="font-size: 16px"><strong>5.3 Jenkins 链接 GitLab</strong></span></p>
<p><strong>5.3.1 工具安装</strong></p>
<p>进入Manage Jenkins-Tools 页面，点激 Availale plugins 按键，分别安装 GitLab Plugin （ 连接GitLab ） 和 Generic Webhook Trigger Plugin （用于检测 GitLab 修改的触发器）两个工具，完成安装后，可在 Installed plugins 页面下查看。</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250109185345336-2113223225.png" width="545" height="271" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p><strong>&nbsp;5.3.2 建立身份认证凭据</strong></p>
<p><span style="color: rgba(0, 0, 0, 1)">一般的项目需要在 Jenkins 系统中建立2个身份谁凭据，一个是连接 Git 服务器的 SSH 认证，另一个是连接 GitLab 的令牌<br>首先建立一个 SSH 认证，在 Jenkins 服务器运行 ssh-keygen -t rsa -b 4096 -C&nbsp;"your_email@example.com"&nbsp; 命令生成密钥</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 255, 1)">ssh-keygen</span> -t rsa -b <span style="color: rgba(128, 0, 128, 1)">4096</span> -C <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">your_email@example.com</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 128, 128, 1)"> 2</span> Generating public/<span style="color: rgba(0, 0, 0, 1)">private rsa key pair.
</span><span style="color: rgba(0, 128, 128, 1)"> 3</span> Enter <span style="color: rgba(0, 0, 255, 1)">file</span> <span style="color: rgba(0, 0, 255, 1)">in</span> <span style="color: rgba(0, 0, 255, 1)">which</span> to save the key (/root/.<span style="color: rgba(0, 0, 255, 1)">ssh</span>/id_rsa): /root/.<span style="color: rgba(0, 0, 255, 1)">ssh</span>/<span style="color: rgba(0, 0, 0, 1)">id_rsa_jh_gitlab
</span><span style="color: rgba(0, 128, 128, 1)"> 4</span> Enter passphrase (empty <span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> no passphrase):
</span><span style="color: rgba(0, 128, 128, 1)"> 5</span> <span style="color: rgba(0, 0, 0, 1)">Enter same passphrase again:
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span> Your identification has been saved <span style="color: rgba(0, 0, 255, 1)">in</span> /root/.<span style="color: rgba(0, 0, 255, 1)">ssh</span>/<span style="color: rgba(0, 0, 0, 1)">id_rsa_jh_gitlab
</span><span style="color: rgba(0, 128, 128, 1)"> 7</span> Your public key has been saved <span style="color: rgba(0, 0, 255, 1)">in</span> /root/.<span style="color: rgba(0, 0, 255, 1)">ssh</span>/<span style="color: rgba(0, 0, 0, 1)">id_rsa_jh_gitlab.pub
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span> <span style="color: rgba(0, 0, 0, 1)">The key fingerprint is:
</span><span style="color: rgba(0, 128, 128, 1)"> 9</span> SHA256:OuX13mP/EASg/KljuZXrWsq65WIvzFaU9T72tXisVPc jh-<span style="color: rgba(0, 0, 0, 1)">gitlab@devops.com
</span><span style="color: rgba(0, 128, 128, 1)">10</span> The key<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">s randomart image is:</span>
<span style="color: rgba(0, 128, 128, 1)">11</span> +---[RSA <span style="color: rgba(128, 0, 128, 1)">3072</span>]----+
<span style="color: rgba(0, 128, 128, 1)">12</span> |          ...    |
<span style="color: rgba(0, 128, 128, 1)">13</span> |       . ..  .   |
<span style="color: rgba(0, 128, 128, 1)">14</span> |        oo .  .  |
<span style="color: rgba(0, 128, 128, 1)">15</span> |        o. ...   |
<span style="color: rgba(0, 128, 128, 1)">16</span> |       .S +.  ...|
<span style="color: rgba(0, 128, 128, 1)">17</span> |       +.+ o+ ..+|
<span style="color: rgba(0, 128, 128, 1)">18</span> |     oo.B +..++.E|
<span style="color: rgba(0, 128, 128, 1)">19</span> |      B* * o.o+= |
<span style="color: rgba(0, 128, 128, 1)">20</span> |     oo*Boo .o+o+|
<span style="color: rgba(0, 128, 128, 1)">21</span> +----[SHA256]-----+</pre>
</div>
<p>打开 /root/.ssh/id _rsa.pub 复制公钥，然后进入 GitLab。</p>
<p>打开个人资料按键，点击SSH密钥页面，添加公钥。</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250108160407160-786786144.png" width="535" height="216" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>&nbsp;把生成的 id_rsa.pub 公钥复制粘贴到页面，然后保存</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250108160934990-1657753070.png" width="534" height="265" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>点击 GitLab 的访问令牌页面，添加一个新令牌，设置到期时间，钩选相关的权限</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250109191328296-555935099.png" width="530" height="283" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>保存令牌后跳转到以下页面，注意令牌只能在第一次创建时可以看到，所以此时必须复制保存令牌</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250109191538730-1439935383.png" width="534" height="282" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>&nbsp;进入 Jenkins 打开 Manager Jenkins - Credentials-System-Global credentials 页面，添加GitLab API token 凭据</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250109190810685-886881187.png" width="537" height="144" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>选择 GitLab API token，把 GitLab 中复制的令牌填入 API token 后，再保存</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250109204219531-1685623569.png" width="539" height="217" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>成功保存 GitLab API token 凭据后，再新建另一个 SSH 凭据，选择类型为 SSH Username with private key , 打开刚生成的&nbsp;&nbsp;/root/.ssh/id _rsa 私钥，复制后填入 Private Key 中</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250109204544479-59500271.png" width="541" height="259" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>&nbsp;保存后可在Manage Jenkins-Credentials 页面看到刚生成的2个凭据</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250109205016264-300744171.png" width="541" height="153" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>&nbsp;<strong>5.3.3 测试&nbsp;<strong>GitLab&nbsp;</strong>连接&nbsp;</strong></p>
<p>打开Manage Jenkins - System 页面，找到 GitLab connection 选项，在Connection name 填入自定的连接名称 GitLab_Connection， 在 GitLab host URL 中填入 GitLab 服务器的 IP 地址 http:// 192.168.1.101: 18081，在 Gredentials 中选择刚刚建立的 GitLab API token 身份认证，按下 Test Connection 测试一下。</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250109205511745-1111838998.png" width="542" height="214" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>若连接不成功，不用慌，只因为是第一次连接，所以需要先手动进行 ssh 登录。<br>打开命令窗口，输入 ssh root@192.168.1.101，输入密码登录成功后，连接会自动保存，后续操作无需再次登录。<br>此时再点击 Test Connection 测试，系统会显示链接成功</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250110163536139-80182205.png" width="544" height="288" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p><span style="font-size: 16px"><strong>5.4 Jenkins 常用的项目类型 Pipeline 流水线与 Freestyle 自由风格</strong></span></p>
<p><strong>5.4.1 Pipeline 与 Freestyle 的区别</strong></p>
<p>目前 Jenkins 项目主要有两种类型，流水线 Pipeline 与 自由风格 Freestyle :</p>
<ul>
<li><strong>流水线 Pipeline&nbsp;</strong>&nbsp;</li>














</ul>
<p>Pipeline 流水线是在Jenkins 2.0 版本开始得到重视，灵活可变性的优点让 Pipeline 逐渐成为构建 Jenkins 部署项目的主流方式，它使用 Jenkinsfile 文件来定义整个构建流程。<br>Jenkinsfile是一个文本文件，使用 Groovy 语言的DSL（领域特定语言），可以定义构建的各个阶段和步骤，其特点是可以通过简单的脚本灵活地控制项目构建的整个生命周期。<br>Pipeline 任务支持复杂的构建流程，包括多个阶段和步骤，以及并行执行等高级功能。<br>Pipeline 任务可以很容易地与源代码管理系统集成，支持持续集成（CI）和持续交付（CD）。</p>
<ul>
<li><strong>自由风格 Freestyle&nbsp;</strong></li>














</ul>
<p>自由风格项目是Jenkins早期版本中的主要任务类型，允许用户通过Jenkins的Web界面配置构建步骤。<br>这种类型的项目没有固定的构建流程定义方式，用户可以手动添加构建步骤、配置插件和参数等。<br>自由风格项目适合快速设置简单的构建任务，比较适合新手使用，但对于复杂的构建流程，其灵活性就不如 Pipeline 任务灵活和强大。</p>
<p>两者的主要区别包括：</p>
<p>定义方式：Pipeline任务通过Jenkinsfile定义，而自由风格项目通过Jenkins的Web界面配置。<br>灵活性和扩展性：Pipeline任务更加灵活，支持复杂的构建流程和高级功能，如并行执行和模板化。<br>集成度：Pipeline任务更容易与源代码管理系统集成，实现自动化的CI/CD流程。<br>学习和使用难度：Pipeline任务可能需要用户学习 Jenkinsfile 的语法和DSL，而自由风格项目则更直观，易于上手。</p>
<p>本文将使用 Pipeline 方式来介绍一下项目的部署过程。</p>
<p><strong>5.4.2 Pipeline 脚本的结构</strong></p>
<p>&nbsp;pipeline 使用的是 Groovy 脚本，它有两种编写方式：脚本式和声名式</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250110170526947-155605291.png" width="529" height="98" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>Jenkins Pipeline 脚本结构主要由以下几个部分组成：</p>
<ul>
<li>Node：定义了执行Pipeline阶段和步骤的代理标签或者是节点。</li>
<li>Pipeline：包含了一系列的阶段（Stages）。</li>
<li>Stages：包含了一系列的步骤（Steps）。</li>
<li>Steps：定义了实际执行的命令或操作。</li>











</ul>
<p>下面是一个简单的Jenkins Pipeline 脚本结构示例：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">声明式语法的pipeline脚本</span>
<span style="color: rgba(0, 128, 128, 1)"> 2</span> pipeline{ <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 表示声明它是一个pipeline脚本，最顶级的节点</span>
<span style="color: rgba(0, 128, 128, 1)"> 3</span>     agent any <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 固定写法 - 表示在哪个节点上面去构建；any表示由jenkins自动分配节点</span>
<span style="color: rgba(0, 128, 128, 1)"> 4</span>     stages{ <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 阶段性任务 - 所有的步骤都在这里面</span>
<span style="color: rgba(0, 128, 128, 1)"> 5</span>         stage(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">拉取脚本</span><span style="color: rgba(128, 0, 0, 1)">"</span>){ <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 任务</span>
<span style="color: rgba(0, 128, 128, 1)"> 6</span>             steps{ } <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 步骤</span>
<span style="color: rgba(0, 128, 128, 1)"> 7</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>         stage(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">执行用例</span><span style="color: rgba(128, 0, 0, 1)">"</span>){ <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 任务</span>
<span style="color: rgba(0, 128, 128, 1)"> 9</span>             steps{ } <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 步骤</span>
<span style="color: rgba(0, 128, 128, 1)">10</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">11</span>  
<span style="color: rgba(0, 128, 128, 1)">12</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">13</span>     post{ } <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 表示在任务完成之后做的操作 - 如：发送邮件</span>
<span style="color: rgba(0, 128, 128, 1)">14</span>     
<span style="color: rgba(0, 128, 128, 1)">15</span> }</pre>
</div>
<p>常用变量：</p>
<p>1.&nbsp; parameters 参数配置<br>功能：定义构建时用户可以输入的参数。<br>常见配置：<br>string(name: ‘ENV’, defaultValue: ‘dev’, description: ‘Environment to deploy’)：文本输入。<br>booleanParam(name: ‘DEPLOY’, defaultValue: true, description: ‘是否部署’)：布尔值输入。<br>choice(name: ‘BRANCH’, choices: [‘dev’, ‘qa’, ‘prod’], description: ‘分支选择’)：选择输入。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 0, 1)">pipeline{
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span> <span style="color: rgba(0, 0, 0, 1)">    agent any
</span><span style="color: rgba(0, 128, 128, 1)"> 3</span> <span style="color: rgba(0, 0, 0, 1)">    parameters {
</span><span style="color: rgba(0, 128, 128, 1)"> 4</span> <span style="color: rgba(0, 0, 0, 1)">        string (name: 'namespace' , defaultValue: 'projects')
</span><span style="color: rgba(0, 128, 128, 1)"> 5</span> <span style="color: rgba(0, 0, 0, 1)">        string (name: 'projectName', defaultValue: 'myproject2')
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span>         string (name: 'version', defaultValue: 'v1.0<span style="color: rgba(0, 0, 0, 1)">')
</span><span style="color: rgba(0, 128, 128, 1)"> 7</span>         string (name: 'registryIP', defaultValue: '192.168.1.102:18081<span style="color: rgba(0, 0, 0, 1)">')
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)"> 9</span> <span style="color: rgba(0, 0, 0, 1)">    .........
</span><span style="color: rgba(0, 128, 128, 1)">10</span> }</pre>
</div>
<p>2.&nbsp;&nbsp;environment 环境变量</p>
<p>功能：设置环境变量，可以在整个Pipeline中使用。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">1</span> <span style="color: rgba(0, 0, 0, 1)">environment {
</span><span style="color: rgba(0, 128, 128, 1)">2</span>     ENV_VAR =<span style="color: rgba(0, 0, 0, 1)"> 'value'
</span><span style="color: rgba(0, 128, 128, 1)">3</span>     PATH = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/usr/bin:/usr/local/bin:${PATH}</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 128, 128, 1)">4</span> }</pre>
</div>
<p>3. options<br>功能：配置Pipeline的高级选项，比如超时设置、丢弃旧的构建等。<br>常见配置：<br>timeout(time: 1, unit: ‘HOURS’)：将Pipeline的执行限制在1小时内。<br>disableConcurrentBuilds()：防止并发构建。<br>buildDiscarder(logRotator(numToKeepStr: ‘5’))：只保留5个构建记录。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">1</span> <span style="color: rgba(0, 0, 0, 1)">options {
</span><span style="color: rgba(0, 128, 128, 1)">2</span> <span style="color: rgba(0, 0, 0, 1)">   timestamps()
</span><span style="color: rgba(0, 128, 128, 1)">3</span>    timeout(time: 4<span style="color: rgba(0, 0, 0, 1)">, unit: 'HOURS')
</span><span style="color: rgba(0, 128, 128, 1)">4</span>    buildDiscarder(logRotator(artifactDaysToKeepStr: '100', artifactNumToKeepStr: '100', daysToKeepStr: '200', numToKeepStr: '200<span style="color: rgba(0, 0, 0, 1)">'))
</span><span style="color: rgba(0, 128, 128, 1)">5</span>    copyArtifactPermission('/DS_BFFD/FFGFGGDY/ssffgd_ddfddf-<span style="color: rgba(0, 0, 0, 1)">MT');
</span><span style="color: rgba(0, 128, 128, 1)">6</span>  }</pre>
</div>
<p>&nbsp;<strong>5.4.3&nbsp; 部署 一个 Jenkins 项目进行 Generic Webhook Trigger Plugin 触发器测试&nbsp;</strong>&nbsp;</p>
<p>新建一个 Pipeline 项目，在 GitLab Connection 选项中选择刚刚在 Manage Jenkins-System 中建好的 GitLab_Connection 连接。</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250110172154914-1142045783.png" width="540" height="118" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>&nbsp;在触发器中勾选 "&nbsp;<span class="jenkins-checkbox"><label class="attach-previous ">Build when a change is pushed to GitLab. GitLab webhook URL: http://192.168.1.102:18080/project/myproject2 " 选择</label></span></p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250110173139450-1572998015.png" width="545" height="232" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>&nbsp;在高级选择中选择 Secret token 选项，点击 Generate 选择生成随机数</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250110173339084-919891891.png" width="545" height="141" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>复制随机数后打开 GitLab 上的对应项目，新建一个Webhooks</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250110173559019-1528412354.png" width="543" height="185" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>&nbsp;在 URL 中填入 Jenkins 项目的地址，在 Secret 令牌中填入刚刚在 Jenkins 中复制的令牌</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250110173810827-358934343.png" width="544" height="255" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>&nbsp;下面触发来源代表触发把信息从 GitLab 推送 Jenkins 的事件，可按需求自行勾选。</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250110174021784-1530726887.png" width="546" height="444" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>保存后回到 Jenkins, 在流水线中选择 Pipeline script 脚本方式，在选择框里选择一个 Hello World 作为测试。<br>后面如果对编写脚本不熟悉，可以点击下面的 “流水线语法” 进行查找。</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250110174452171-2026076585.png" width="548" height="327" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>&nbsp;万事俱备，保存后尝试在 IDEA 提交代码到 Git 或在 GitLab 按下测试按钮。</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250110181127800-426298822.png" width="555" height="275" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>此时 Jenkins 会被事件触发运行脚本，可以看到以下的结果。</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250110175641708-935207529.png" width="562" height="254" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>项目触发成功，代表 Jenkins 已成功与 Gitlab 连接。此时在 Jenkins 服务器的安装目录下 （本次测试项目是在&nbsp; /root/.jenkins/workspace）找到项目源代码。</p>
<p><span style="font-size: 16px"><strong>5.5 编写 Groovy 脚本把镜像发送到 Harbor 私有库</strong></span></p>
<p>小试牛刀后，正式开始编写 Jenkinsfile 脚本，Jenkins 通过 GitLab 拉取源代码，然后生成 Docker 镜像，并把镜像推送到 Harbor 私有仓库 。<br>首先在 Jenkins 项目流水线定中选择 Pipeline script from SCM 类型， SCM 选项中选择 Git , 在 Repository URL 中填入项目的 git 克隆路径 git@19.168.1.101:project/myproject2.git，在 Credentials 中选择刚建好的 SSH 身份认证。</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250110183949381-1793325931.png" width="567" height="282" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>&nbsp;最后选择好 Git 的分支和 Jenkinsfile 脚本在项目中的相对路径（一般在项目的根目录下）。</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250110184902849-780003361.png" width="568" height="321" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>完成配置后开始编写项目的 Jenkinsfile 脚本，编写好 parameters 后可以 jenkins 项目中看到参数的默认值，每次发布时可以根据需求更改。其中 namespace 是 harbor 的空间名，projectName 是 harbor 的项目名称，version 是当前发布的版本号, registryIP 是 harbor 服务器的IP地址。</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250110190422771-508555031.png" width="570" height="345" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>首先在 Jenkins 运行 mvn 重新生成源代码，根据 Jenkins 的环境变量获取所生成 jar 的绝对路径，然后在 Jenkins 服务器中生成 Docker 镜像，并把镜像推向 Harbor 私有仓库。<br>最后的 publisher 函数是在 Docker 远程服务器中从 Harbor 拉下镜像，生成容器，此函数将在下一节详细介绍。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">  1</span> <span style="color: rgba(0, 0, 0, 1)">pipeline{
</span><span style="color: rgba(0, 128, 128, 1)">  2</span> <span style="color: rgba(0, 0, 0, 1)">    agent any
</span><span style="color: rgba(0, 128, 128, 1)">  3</span> <span style="color: rgba(0, 0, 0, 1)">    parameters {
</span><span style="color: rgba(0, 128, 128, 1)">  4</span>         string (<span style="color: rgba(0, 128, 128, 1)">name:</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">namespace</span><span style="color: rgba(128, 0, 0, 1)">'</span> , <span style="color: rgba(0, 128, 128, 1)">defaultValue:</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">projects</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)              // harbor 空间名
</span><span style="color: rgba(0, 128, 128, 1)">  5</span>         string (<span style="color: rgba(0, 128, 128, 1)">name:</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">projectName</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(0, 128, 128, 1)">defaultValue:</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">myproject2</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)           //harbor 项目名称
</span><span style="color: rgba(0, 128, 128, 1)">  6</span>         string (<span style="color: rgba(0, 128, 128, 1)">name:</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">version</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(0, 128, 128, 1)">defaultValue:</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">v1.0</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)                     //默认版本号
</span><span style="color: rgba(0, 128, 128, 1)">  7</span>         string (<span style="color: rgba(0, 128, 128, 1)">name:</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">registryIP</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(0, 128, 128, 1)">defaultValue:</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">192.168.1.103:18081</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)   //harbor 服务器 IP
</span><span style="color: rgba(0, 128, 128, 1)">  8</span>         string (<span style="color: rgba(0, 128, 128, 1)">name:</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">dockerUser</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(0, 128, 128, 1)">defaultValue:</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">admin</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)                 //docker 远程登录名
</span><span style="color: rgba(0, 128, 128, 1)">  9</span>         string (<span style="color: rgba(0, 128, 128, 1)">name:</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">dockerPass</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(0, 128, 128, 1)">defaultValue:</span> <span style="color: rgba(128, 0, 0, 1)">'12345678</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)              //docker  登录密码
</span><span style="color: rgba(0, 128, 128, 1)"> 10</span>         string (<span style="color: rgba(0, 128, 128, 1)">name:</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">dockerServer</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(0, 128, 128, 1)">defaultValue:</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">http://192.168.1.104:18081</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)  //docker 服务器IP
</span><span style="color: rgba(0, 128, 128, 1)"> 11</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)"> 12</span> 
<span style="color: rgba(0, 128, 128, 1)"> 13</span> <span style="color: rgba(0, 0, 0, 1)">    stages {
</span><span style="color: rgba(0, 128, 128, 1)"> 14</span> <span style="color: rgba(0, 0, 0, 1)">        //在 jenkins 服务器重要生成 jar
</span><span style="color: rgba(0, 128, 128, 1)"> 15</span>         stage(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">build_jar</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">) {
</span><span style="color: rgba(0, 128, 128, 1)"> 16</span> <span style="color: rgba(0, 0, 0, 1)">            steps {
</span><span style="color: rgba(0, 128, 128, 1)"> 17</span>                 sh <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">mvn clean</span><span style="color: rgba(128, 0, 0, 1)">'</span>
<span style="color: rgba(0, 128, 128, 1)"> 18</span>                 sh <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">mvn install</span><span style="color: rgba(128, 0, 0, 1)">'</span>
<span style="color: rgba(0, 128, 128, 1)"> 19</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)"> 20</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)"> 21</span> 
<span style="color: rgba(0, 128, 128, 1)"> 22</span>         stage(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">build_image</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">) {
</span><span style="color: rgba(0, 128, 128, 1)"> 23</span> <span style="color: rgba(0, 0, 0, 1)">            steps {
</span><span style="color: rgba(0, 128, 128, 1)"> 24</span> <span style="color: rgba(0, 0, 0, 1)">                script {
</span><span style="color: rgba(0, 128, 128, 1)"> 25</span> <span style="color: rgba(0, 0, 0, 1)">                    //获取 Jenkins 的安装路径
</span><span style="color: rgba(0, 128, 128, 1)"> 26</span> <span style="color: rgba(0, 0, 0, 1)">                    jenkinsHome = env.JENKINS_HOME
</span><span style="color: rgba(0, 128, 128, 1)"> 27</span> <span style="color: rgba(0, 0, 0, 1)">                    //获取 Jenkins 的当前工程名称
</span><span style="color: rgba(0, 128, 128, 1)"> 28</span> <span style="color: rgba(0, 0, 0, 1)">                    jobName = env.JOB_NAME
</span><span style="color: rgba(0, 128, 128, 1)"> 29</span> <span style="color: rgba(0, 0, 0, 1)">                    //获取 Jenkins 的项目URL
</span><span style="color: rgba(0, 128, 128, 1)"> 30</span> <span style="color: rgba(0, 0, 0, 1)">                    jenkinsUrl = env.JENKINS_URL
</span><span style="color: rgba(0, 128, 128, 1)"> 31</span> <span style="color: rgba(0, 0, 0, 1)">                    //组成 Jenkinsfile 的路径
</span><span style="color: rgba(0, 128, 128, 1)"> 32</span>                     jenkinsfilePath = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">${jenkinsHome}/workspace/${jobName}/</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 128, 128, 1)"> 33</span> 
<span style="color: rgba(0, 128, 128, 1)"> 34</span> <span style="color: rgba(0, 0, 0, 1)">                    //测试性输出
</span><span style="color: rgba(0, 128, 128, 1)"> 35</span>                     echo <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">------------jenkinsfile running------------</span><span style="color: rgba(128, 0, 0, 1)">'</span>
<span style="color: rgba(0, 128, 128, 1)"> 36</span>                     echo <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">当前项目的标准文件夹是: ${jenkinsfilePath}</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 128, 128, 1)"> 37</span>                     echo <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">$jenkinsUrl</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 128, 128, 1)"> 38</span>                     echo <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Workspace:${WORKSPACE}</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 128, 128, 1)"> 39</span>                     echo <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">PWD:${pwd()}</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 128, 128, 1)"> 40</span> 
<span style="color: rgba(0, 128, 128, 1)"> 41</span> <span style="color: rgba(0, 0, 0, 1)">                    //在Jenkins服务器测试项目包是否能正常运行
</span><span style="color: rgba(0, 128, 128, 1)"> 42</span>                     //sh <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">java -jar target/MyProject2-v1.0.jar</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 128, 128, 1)"> 43</span> 
<span style="color: rgba(0, 128, 128, 1)"> 44</span> <span style="color: rgba(0, 0, 0, 1)">                    //生成镜像
</span><span style="color: rgba(0, 128, 128, 1)"> 45</span> <span style="color: rgba(0, 0, 0, 1)">                    buildImage()
</span><span style="color: rgba(0, 128, 128, 1)"> 46</span> <span style="color: rgba(0, 0, 0, 1)">                }
</span><span style="color: rgba(0, 128, 128, 1)"> 47</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)"> 48</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)"> 49</span> 
<span style="color: rgba(0, 128, 128, 1)"> 50</span>         stage(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">push</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">) {
</span><span style="color: rgba(0, 128, 128, 1)"> 51</span> <span style="color: rgba(0, 0, 0, 1)">            steps {
</span><span style="color: rgba(0, 128, 128, 1)"> 52</span> <span style="color: rgba(0, 0, 0, 1)">                script {
</span><span style="color: rgba(0, 128, 128, 1)"> 53</span> <span style="color: rgba(0, 0, 0, 1)">                    //调用函数把镜像推送到远程私有库Harbor
</span><span style="color: rgba(0, 128, 128, 1)"> 54</span> <span style="color: rgba(0, 0, 0, 1)">                    pushImage()
</span><span style="color: rgba(0, 128, 128, 1)"> 55</span> <span style="color: rgba(0, 0, 0, 1)">                    //链接Harbor，下拉镜像，生成容器
</span><span style="color: rgba(0, 128, 128, 1)"> 56</span> <span style="color: rgba(0, 0, 0, 1)">                    publisher()
</span><span style="color: rgba(0, 128, 128, 1)"> 57</span> <span style="color: rgba(0, 0, 0, 1)">                }
</span><span style="color: rgba(0, 128, 128, 1)"> 58</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)"> 59</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)"> 60</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)"> 61</span> <span style="color: rgba(0, 0, 0, 1)">}
</span><span style="color: rgba(0, 128, 128, 1)"> 62</span> 
<span style="color: rgba(0, 128, 128, 1)"> 63</span> <span style="color: rgba(0, 0, 0, 1)">// harbor 私有库的镜像名
</span><span style="color: rgba(0, 128, 128, 1)"> 64</span> <span style="color: rgba(0, 0, 0, 1)">def registryImage=null
</span><span style="color: rgba(0, 128, 128, 1)"> 65</span> <span style="color: rgba(0, 0, 0, 1)">// jenkins服务器的镜像名
</span><span style="color: rgba(0, 128, 128, 1)"> 66</span> <span style="color: rgba(0, 0, 0, 1)">def image=null
</span><span style="color: rgba(0, 128, 128, 1)"> 67</span> 
<span style="color: rgba(0, 128, 128, 1)"> 68</span> <span style="color: rgba(0, 0, 0, 1)">// 生成镜像
</span><span style="color: rgba(0, 128, 128, 1)"> 69</span> <span style="color: rgba(0, 0, 0, 1)">def buildImage(){
</span><span style="color: rgba(0, 128, 128, 1)"> 70</span> <span style="color: rgba(0, 0, 0, 1)">    //避免镜像名重复生成随机数
</span><span style="color: rgba(0, 128, 128, 1)"> 71</span>     randomInt = new Random().nextInt(<span style="color: rgba(128, 0, 128, 1)">9999</span>-<span style="color: rgba(128, 0, 128, 1)">1000</span>)+<span style="color: rgba(128, 0, 128, 1)">1000</span>
<span style="color: rgba(0, 128, 128, 1)"> 72</span> <span style="color: rgba(0, 0, 0, 1)">    //根据参数生成镜像名
</span><span style="color: rgba(0, 128, 128, 1)"> 73</span>     imageName=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">${params.namespace}/${params.projectName}:${params.version}.$randomInt</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 128, 128, 1)"> 74</span> <span style="color: rgba(0, 0, 0, 1)">    //生成镜像
</span><span style="color: rgba(0, 128, 128, 1)"> 75</span>     sh <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">docker build -t $imageName . ;</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 128, 128, 1)"> 76</span> <span style="color: rgba(0, 0, 0, 1)">    //保存本地镜像名
</span><span style="color: rgba(0, 128, 128, 1)"> 77</span> <span style="color: rgba(0, 0, 0, 1)">    this.image=imageName
</span><span style="color: rgba(0, 128, 128, 1)"> 78</span> <span style="color: rgba(0, 0, 0, 1)">}
</span><span style="color: rgba(0, 128, 128, 1)"> 79</span> 
<span style="color: rgba(0, 128, 128, 1)"> 80</span> <span style="color: rgba(0, 0, 0, 1)">// 把镜像推送到 harbor
</span><span style="color: rgba(0, 128, 128, 1)"> 81</span> <span style="color: rgba(0, 0, 0, 1)">def pushImage(){
</span><span style="color: rgba(0, 128, 128, 1)"> 82</span> <span style="color: rgba(0, 0, 0, 1)">    //harbor私有库镜像地址
</span><span style="color: rgba(0, 128, 128, 1)"> 83</span>     this.registryImage=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">${params.registryIP}/${this.image}</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 128, 128, 1)"> 84</span> <span style="color: rgba(0, 0, 0, 1)">    //打印 harbor 镜像地址
</span><span style="color: rgba(0, 128, 128, 1)"> 85</span> <span style="color: rgba(0, 0, 0, 1)">    println(this.registryImage)
</span><span style="color: rgba(0, 128, 128, 1)"> 86</span> <span style="color: rgba(0, 0, 0, 1)">    //标记私有仓库镜像
</span><span style="color: rgba(0, 128, 128, 1)"> 87</span>     sh <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">docker tag ${this.image} $registryImage ;</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 128, 128, 1)"> 88</span> <span style="color: rgba(0, 0, 0, 1)">    //推送镜像到 harbor
</span><span style="color: rgba(0, 128, 128, 1)"> 89</span>     sh <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">docker push $registryImage; </span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 128, 128, 1)"> 90</span> <span style="color: rgba(0, 0, 0, 1)">    //推送镜像后清除本地镜像
</span><span style="color: rgba(0, 128, 128, 1)"> 91</span>     sh <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">docker rmi $registryImage</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 128, 128, 1)"> 92</span> <span style="color: rgba(0, 0, 0, 1)">}
</span><span style="color: rgba(0, 128, 128, 1)"> 93</span> 
<span style="color: rgba(0, 128, 128, 1)"> 94</span> <span style="color: rgba(0, 0, 0, 1)">def publisher(){
</span><span style="color: rgba(0, 128, 128, 1)"> 95</span> <span style="color: rgba(0, 0, 0, 1)">    //execCommand 请注意：执行*.sh文件前，先使用 chmod 开放权限，否则第一次执行jenkins会报权限不足
</span><span style="color: rgba(0, 128, 128, 1)"> 96</span>     sshPublisher(<span style="color: rgba(0, 128, 128, 1)">publishers:</span><span style="color: rgba(0, 0, 0, 1)"> [
</span><span style="color: rgba(0, 128, 128, 1)"> 97</span>                    sshPublisherDesc(<span style="color: rgba(0, 128, 128, 1)">configName:</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Docker_Publish_Server</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(0, 128, 128, 1)">transfers:</span><span style="color: rgba(0, 0, 0, 1)"> [
</span><span style="color: rgba(0, 128, 128, 1)"> 98</span>                        sshTransfer(<span style="color: rgba(0, 128, 128, 1)">cleanRemote:</span><span style="color: rgba(0, 0, 0, 1)"> false,
</span><span style="color: rgba(0, 128, 128, 1)"> 99</span>                                    <span style="color: rgba(0, 128, 128, 1)">excludes:</span> <span style="color: rgba(128, 0, 0, 1)">''</span><span style="color: rgba(0, 0, 0, 1)">, 
</span><span style="color: rgba(0, 128, 128, 1)">100</span>                                    <span style="color: rgba(0, 128, 128, 1)">execCommand:</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">chmod +x /root/remote/command.sh; /root/remote/command.sh $registryImage ${params.projectName} ${params.dockerUser} ${params.dockerPass} ${params.dockerServer}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, 
</span><span style="color: rgba(0, 128, 128, 1)">101</span>                                    <span style="color: rgba(0, 128, 128, 1)">execTimeout:</span> <span style="color: rgba(128, 0, 128, 1)">120000</span><span style="color: rgba(0, 0, 0, 1)">, 
</span><span style="color: rgba(0, 128, 128, 1)">102                         </span>           <span style="color: rgba(0, 128, 128, 1)">flatten:</span><span style="color: rgba(0, 0, 0, 1)"> false,
</span><span style="color: rgba(0, 128, 128, 1)">103</span>                                    <span style="color: rgba(0, 128, 128, 1)">makeEmptyDirs:</span><span style="color: rgba(0, 0, 0, 1)"> false,
</span><span style="color: rgba(0, 128, 128, 1)">104</span>                                    <span style="color: rgba(0, 128, 128, 1)">noDefaultExcludes:</span><span style="color: rgba(0, 0, 0, 1)"> false,
</span><span style="color: rgba(0, 128, 128, 1)">105</span>                                    <span style="color: rgba(0, 128, 128, 1)">patternSeparator:</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">[, ]+</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, 
</span><span style="color: rgba(0, 128, 128, 1)">106</span>                                    <span style="color: rgba(0, 128, 128, 1)">remoteDirectory:</span> <span style="color: rgba(128, 0, 0, 1)">''</span><span style="color: rgba(0, 0, 0, 1)">, 
</span><span style="color: rgba(0, 128, 128, 1)">107</span>                                    <span style="color: rgba(0, 128, 128, 1)">remoteDirectorySDF:</span><span style="color: rgba(0, 0, 0, 1)"> false, 
</span><span style="color: rgba(0, 128, 128, 1)">108</span>                                    <span style="color: rgba(0, 128, 128, 1)">removePrefix:</span> <span style="color: rgba(128, 0, 0, 1)">''</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)">109</span>                                    <span style="color: rgba(0, 128, 128, 1)">sourceFiles:</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">command.sh</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">110</span>                        ], <span style="color: rgba(0, 128, 128, 1)">usePromotionTimestamp:</span> false, <span style="color: rgba(0, 128, 128, 1)">useWorkspaceInPromotion:</span> false, <span style="color: rgba(0, 128, 128, 1)">verbose:</span><span style="color: rgba(0, 0, 0, 1)"> true)
</span><span style="color: rgba(0, 128, 128, 1)">111</span>                   <span style="color: rgba(0, 0, 0, 1)">])
</span><span style="color: rgba(0, 128, 128, 1)">112</span> }</pre>
</div>
<p>成功运行后可以在 Jenkins 服务器中看到生成的 Docker 镜像记录</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250110191859590-1310368264.png" width="579" height="113" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>成功运行后可在 Harbor 服务器中可以看到上传的镜像</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250110192519076-1685892930.png" width="584" height="340" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>&nbsp;</p>
<p><span style="font-size: 16px"><strong>&nbsp;5.6 在 Docker 服务器下拉镜像部署容器</strong></span></p>
<p><strong>5.6.1 Publish Over SSH 链接部署</strong></p>
<p>在上面的代码中可以看 sshPublisher 函数，它是 Publilsh Over SSH 插件里的一个函数，作用是让 Jenkins 远程调用 docker 服务器 192.168.1.104 ，在 Harbor 私有仓库中下拉镜像，生成容器。<br>首先需要在 Jenkins 下载 Publilsh Over SSH 插件</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250110200555809-1902202216.png" width="591" height="249" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>&nbsp;然后进入 Manage Jenkins - System 页面进行配置，注意 SSH Severs 配置中 Name 名称，后面将在sshPublisher 函数中用到， Hostname 是 Docker 服务器IP ，Username 是服务器登录名，Remote Directory 为文件的默认目录。</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250110200724620-833826060.png" width="594" height="258" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>完成后还需在docker 服务器中运行 ssh-keygen -t rsa -b 4096 -C&nbsp;"your_email@example.com"&nbsp; 命令生成密钥，然后点击“高级”按键，勾选身份认识方式，在 Key 中填入 Docker 服务器的私钥。<br>注意运行前先在 Jenkins 服务器运行命令 ssh root@192.168.1.104， 手动链接一下 Docker 服务器，避免运行函数时链接失败。</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250113121249253-1219095658.png" width="595" height="230" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>最后点击 Test Configuration 按键，只要密钥输入正确，链接测试将显示 Success&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250113121615418-916137241.png" width="595" height="201" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p>&nbsp;<strong>5.6.2&nbsp;&nbsp;sshPublisher 函数说明</strong></p>
<p>Publish Over SSH 插件允许在构建过程中通过 SSH 将文件或目录发布到远程服务器上，它支持 SCP 和 SFTP 协议，并可以在传输完成后执行远程命令。而 sshPublisher 函数是&nbsp;Publish Over SSH 插件里的一个函数，它可以根据 Jenkins 中的配置连接远程的 Docker 服务器，并在服务器中执行脚本命令，远程操作控制 Docker。&nbsp;</p>
<p>sshPulisher 函数：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> sshPublisher(<span style="color: rgba(0, 128, 128, 1)">publishers:</span><span style="color: rgba(0, 0, 0, 1)"> [
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span>     sshPublisherDesc(<span style="color: rgba(0, 128, 128, 1)">configName:</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">myRemoteServer</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(0, 128, 128, 1)">transfers:</span><span style="color: rgba(0, 0, 0, 1)"> [
</span><span style="color: rgba(0, 128, 128, 1)"> 3</span> <span style="color: rgba(0, 0, 0, 1)">        sshTransfer(
</span><span style="color: rgba(0, 128, 128, 1)"> 4</span>             <span style="color: rgba(0, 128, 128, 1)">cleanRemote:</span><span style="color: rgba(0, 0, 0, 1)"> false,
</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>             <span style="color: rgba(0, 128, 128, 1)">excludes:</span> <span style="color: rgba(128, 0, 0, 1)">''</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span>             <span style="color: rgba(0, 128, 128, 1)">execCommand:</span> <span style="color: rgba(128, 0, 0, 1)">''</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)"> 7</span>             <span style="color: rgba(0, 128, 128, 1)">execTimeout:</span> <span style="color: rgba(128, 0, 128, 1)">120000</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>             <span style="color: rgba(0, 128, 128, 1)">flatten:</span><span style="color: rgba(0, 0, 0, 1)"> false,
</span><span style="color: rgba(0, 128, 128, 1)"> 9</span>             <span style="color: rgba(0, 128, 128, 1)">makeEmptyDirs:</span><span style="color: rgba(0, 0, 0, 1)"> false,
</span><span style="color: rgba(0, 128, 128, 1)">10</span>             <span style="color: rgba(0, 128, 128, 1)">noDefaultExcludes:</span><span style="color: rgba(0, 0, 0, 1)"> false,
</span><span style="color: rgba(0, 128, 128, 1)">11</span>             <span style="color: rgba(0, 128, 128, 1)">patternSeparator:</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">[, ]+</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)">12</span>             <span style="color: rgba(0, 128, 128, 1)">remoteDirectory:</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">/var/www/html</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)">13</span>             <span style="color: rgba(0, 128, 128, 1)">remoteDirectorySDF:</span><span style="color: rgba(0, 0, 0, 1)"> false,
</span><span style="color: rgba(0, 128, 128, 1)">14</span>             <span style="color: rgba(0, 128, 128, 1)">removePrefix:</span> <span style="color: rgba(128, 0, 0, 1)">''</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)">15</span>             <span style="color: rgba(0, 128, 128, 1)">sourceFiles:</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">**/*</span><span style="color: rgba(128, 0, 0, 1)">'</span>
<span style="color: rgba(0, 128, 128, 1)">16</span> <span style="color: rgba(0, 0, 0, 1)">        )
</span><span style="color: rgba(0, 128, 128, 1)">17</span> <span style="color: rgba(0, 0, 0, 1)">    ])
</span><span style="color: rgba(0, 128, 128, 1)">18</span> ]) </pre>
</div>
<p>参数说明：</p>
<ul>
<li>configName</li>
</ul>
<p style="margin-left: 60px">说明：配置名称，注意此处填入的是上一节介绍的 Publilsh Over SSH 插件配置中 SSH Servers 的 Name 值，填错则无法链接</p>
<ul>
<li>remoteDirectory</li>
</ul>
<p style="margin-left: 60px">说明：这是远程服务器上的目标目录，构建产物将会被上传到这个目录下，它指定了文件在远程服务器上的存储位置。如果为空，在上一节 Remote Directory 的路径就是它的默认值。 <br>示例：remoteDirectory: '/var/www/app'意味着文件将被发布到远程服务器的/var/www/app目录中。</p>
<ul>
<li>sourceFiles</li>





</ul>
<p style="margin-left: 60px">说明：用于指定要上传的本地文件或目录的模式。可以使用通配符来匹配多个文件，例如**/*.jar会匹配所有子目录下的.jar文件。<br>示例：sourceFiles: 'dist/*'将上传本地dist目录下的所有文件。</p>
<ul>
<li>execCommand</li>





</ul>
<p style="margin-left: 60px">说明：在文件传输完成后，可以在远程服务器上执行一个命令。这对于解压文件、重启服务等操作非常有用。例如，在上传了一个压缩包后，可以使用这个命令在远程服务器上解压它。<br>示例：execCommand: 'unzip myapp.zip &amp;&amp; chmod +x myapp.sh &amp;&amp;./myapp.sh'将在远程服务器上解压myapp.zip文件，然后赋予myapp.sh可执行权限，并运行这个脚本。</p>
<ul>
<li>execTimeout</li>





</ul>
<p style="margin-left: 60px">说明：执行命令的过期时间，默认为 120000 毫秒</p>
<ul>
<li>flatten</li>





</ul>
<p style="margin-left: 60px">说明：布尔值参数，用于决定是否将上传的文件结构扁平化。如果设置为true，所有文件将直接上传到remoteDirectory下，而不会保留本地的目录结构。<br>示例：flatten: true，假设本地有src/main/java/MyApp.class文件，上传后将直接位于remoteDirectory下，而不是remoteDirectory/src/main/java/MyApp.class。</p>
<ul>
<li>cleanRemote</li>





</ul>
<p style="margin-left: 60px">说明：布尔值参数，用于指定是否在上传文件之前清空远程目录。如果设置为true，在上传之前，remoteDirectory中的所有现有文件将被删除。这在确保远程服务器上的文件是最新版本，并且没有旧文件残留时非常有用，但要谨慎使用，以免误删重要文件。<br>示例：cleanRemote: true将在每次上传之前清空远程目录。</p>
<ul>
<li>excludes</li>





</ul>
<p style="margin-left: 60px">说明：用于指定在上传过程中要排除的文件或目录。使用模式匹配的方式来排除文件，类似于sourceFiles的反向操作。</p>
<p>execCommand 代表要在 Docker 服务器中要执行的命令，一般命令短可以直接在此编写，如果命令过长可以放在 *.sh 文件中执行，在 sourceFiles 选择中填入 command.sh 后，运行 execCommand 时就会执行 command.sh 脚本。<br>在代码中可以看到 execCommand 内容表示在 Docker 服务器执行 chmod 命令，获取文件的所有权（注意：如果没有此输入，初次运行时系统可能显示”无此权限执行 sh 命令“）。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">1</span> <span style="color: rgba(0, 128, 128, 1)">execCommand:</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">chmod +x /root/remote/command.sh; /root/remote/command.sh $registryImage ${params.projectName} ${params.dockerUser} ${params.dockerPass} ${params.dockerServer}</span><span style="color: rgba(128, 0, 0, 1)">"</span></pre>
</div>
<p>在运行command.sh 脚本时绑定输入4个参数，此参数正在 pipeline 中的 parameters 参数值。注意 commnad.sh 脚本文件的默认路径是&nbsp;Remote Directory 中所配置的路径。<br>command.sh 脚本</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">#! /bin/sh
#私有仓库镜像名
registryImage=$</span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
#容器默认名称
projectName=$</span><span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">
#docker 用户名
username=$</span><span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">
#docker 密码
password=$</span><span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">
#docker服务器IP
server=$</span><span style="color: rgba(128, 0, 128, 1)">5</span><span style="color: rgba(0, 0, 0, 1)">

echo </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">--------------------docker run------------------------------</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#链接部署服务器
sudo docker login -n ${username} -p ${password} ${server}
#拉取私有库镜像
sudo docker pull ${registryImage}
#停止本地已在运行的容器
sudo docker stop ${projectName}
#删除本地容器
sudo docker rm ${projectName}
#重新生成容器
sudo docker run -d -p </span><span style="color: rgba(128, 0, 128, 1)">0</span>.<span style="color: rgba(128, 0, 128, 1)">0</span>.<span style="color: rgba(128, 0, 128, 1)">0</span>.<span style="color: rgba(128, 0, 128, 1)">0</span>:<span style="color: rgba(128, 0, 128, 1)">18083</span>:<span style="color: rgba(128, 0, 128, 1)">8083</span> --network=bridge --name ${projectName} ${registryImage}</pre>
</div>
<p>根据输入的参数值，docker 服务器可以获取 harbor 服务器用户名密码，经过 docker 登录后下拉镜像，最后生成容器。&nbsp;<br>万事俱备，只欠东风。此时，只需要在 IDEA 提交代码，系统就会触发 Jenkins ，实现 GitLab -&gt; Jenkins -&gt; Harbor -&gt; Docker 的全流程自动部署, 通过 build 窗口的记录中查看到 Console Output 的输出结果。</p>
<p><img src="https://img2024.cnblogs.com/blog/64989/202501/64989-20250113143453269-245861478.png" width="539" height="263" loading="lazy" style="border: 1px solid rgba(0, 0, 0, 1)"></p>
<p style="text-align: right"><span style="font-size: 12px; color: rgba(0, 0, 255, 1)"><a href="#p0" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">回到目录</span></a></span></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px"><strong>本章总结</strong></span></p>
<p>本章分别介绍了&nbsp;GitLab 、 Jenkins 、 Harbor 、 Docker 服务器部署的详细流程及注意事项，通过整合 GitLab + Jenkins + Harbor + Docker 可以构建一个完整的、高效的 CI/CD 流水线，实现从代码提交到应用部署的全自动化流程，有效提高软件开发和交付的效率和质量。&nbsp;它涵盖了从开发、测试到部署的整个软件生命周期，并且促进了团队协作和资源的有效利用。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div style="text-align: right">作者：风尘浪子</div>
<div style="text-align: right"><span style="color: rgba(0, 0, 255, 1)"><a class="ng-star-inserted" href="https://www.cnblogs.com/leslies2/p/18632905" target="_blank"><span style="color: rgba(0, 0, 255, 1)">https://www.cnblogs.com/leslies2/p/18632905</span></a></span></div>
<div style="text-align: right"><span style="color: rgba(255, 0, 0, 1)"><strong>原创作品，转载时请注明作者及出处</strong></span></div>
</div>
<div class="clear"></div>

        <p class="postfoot">
            posted on 
<span id="post-date" data-last-update-days="0.24259856018055556" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-13 14:39">2025-01-13 13:55</span>&nbsp;
<a href="https://www.cnblogs.com/leslies2">风尘浪子</a>&nbsp;
阅读(<span id="post_view_count">1</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18632905" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18632905);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18632905', targetLink: 'https://www.cnblogs.com/leslies2/p/18632905', title: 'DevOps 企业级 CI/CD 实战 —— 整合 GitLab+Jenkins+Harbor+Docker 实现代码全自动化流程管理' })">举报</a>

        </p>
    