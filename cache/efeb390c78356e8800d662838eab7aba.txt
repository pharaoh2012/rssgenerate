
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/known/p/19010037" title="发布于 2025-07-29 09:05">
    <span role="heading" aria-level="2">基于Blazor实现的简易进销存管理系统</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>本文主要介绍如何使用<code>Known</code>开发框架来开发<code>Blazor</code>项目，下面我们用简易进销存管理系统作为示例来分析和设计，文中的代码为关键示例代码，不能直接运行，如要运行查看效果，可在码云上下载完整项目源码运行。</p>
<p>源码地址：<a href="https://gitee.com/known/JxcLite" target="_blank" rel="noopener nofollow">https://gitee.com/known/JxcLite</a></p>
<h1 id="1-系统需求">1. 系统需求</h1>
<ul>
<li>可以维护商品信息库，采购进货单可以从中选择商品，销售出货从库存中选择商品；</li>
<li>采购进货和销售出货支持月结和现金结算，月结的单据需要与客户和供应商对账单；</li>
<li>采购和销售需支持退货；</li>
<li>提供库存查询、进出退货明细、利润表等报表功能；</li>
<li>支持单机桌面版和云Web版。</li>
</ul>
<h1 id="2-功能模块">2. 功能模块</h1>
<ul>
<li>基础数据：包含数据字典、组织结构、商品信息、供应商、客户管理。</li>
<li>进货管理：包含采购进货单、采购退货单。</li>
<li>销货管理：包含销售出货单、销售退货单。</li>
<li>库存管理：包含商品库存查询。</li>
<li>财务管理：包含客户对账单、供应商对账单。</li>
<li>统计报表：包含进货明细表、进退货明细表、销货明细表、销退货明细表、商品利润表。</li>
<li>系统管理：包含角色管理、用户管理、系统附件、系统日志。</li>
</ul>
<h1 id="3-项目结构">3. 项目结构</h1>
<pre><code>├─JxcLite          -&gt; 包含配置、常量、枚举、模型、服务接口、路由、页面。
├─JxcLite.Core     -&gt; 后端类库，包含实体、业务逻辑、数据访问。
├─JxcLite.Wasm     -&gt; 项目WebAssembly，Auto模式前端程序。
├─JxcLite.Web      -&gt; 项目Web App，云Web程序。
├─JxcLite.WinForm  -&gt; 项目WinForm App，单机桌面程序。
├─JxcLite.sln      -&gt; 项目解决方案文件。
</code></pre>
<h1 id="4-框架搭建">4. 框架搭建</h1>
<p>打开<code>VS2022</code>创建一个空的解决方案<code>JxcLite.sln</code>，然后再添加各个项目。</p>
<h2 id="41-jxclite项目">4.1. JxcLite项目</h2>
<ul>
<li>添加<code>JxcLite</code>类库，引用<code>Known 3.*</code>，工程文件如下：</li>
</ul>
<pre><code class="language-xml">&lt;Project Sdk="Microsoft.NET.Sdk.Razor"&gt;
    &lt;ItemGroup&gt;
        &lt;PackageReference Include="Known" Version="3.*" /&gt;
    &lt;/ItemGroup&gt;
&lt;/Project&gt;
</code></pre>
<ul>
<li>项目文件结构</li>
</ul>
<pre><code>├─wwwroot         -&gt; 静态文件夹，包含css、img、js，桌面和Web共用资产。
├─Apps            -&gt; 移动端页面文件夹。
├─Models          -&gt; 前后端数据交互模型文件夹。
├─Pages           -&gt; PC端页面文件夹。
├─Services        -&gt; 前后端数据交互服务接口和Http客户端文件夹。
├─Shared          -&gt; 模块共享组件文件夹。
├─_Imports.razor  -&gt; 全局命名空间引用文件。
├─AppConfig.cs    -&gt; 系统配置类。
├─AppConstant.cs  -&gt; 系统所有常量类文件。
├─AppEnums.cs     -&gt; 系统所有枚举文件。
├─AppModule.cs    -&gt; 系统一级模块配置类。
├─Routes.razor    -&gt; 系统路由组件。
</code></pre>
<h2 id="42-jxclitecore项目">4.2. JxcLite.Core项目</h2>
<ul>
<li>添加<code>JxcLite.Core</code>类库，引用<code>JxcLite</code>项目和<code>Known.Core 3.*</code>等库，工程文件如下：</li>
</ul>
<pre><code class="language-xml">&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
    &lt;ItemGroup&gt;
        &lt;PackageReference Include="Known.Cells" Version="1.*" /&gt;
        &lt;PackageReference Include="Known.Core" Version="3.*" /&gt;
        &lt;ProjectReference Include="..\JxcLite\JxcLite.csproj" /&gt;
    &lt;/ItemGroup&gt;
&lt;/Project&gt;
</code></pre>
<ul>
<li>项目文件结构</li>
</ul>
<pre><code>├─Entities      -&gt; 实体类文件夹。
├─Extensions    -&gt; 后端业务扩展类文件夹。
├─Imports       -&gt; 数据导入类文件夹。
├─Repositories  -&gt; 数据访问类文件夹，SQL语句都写在此处。
├─Services      -&gt; 业务逻辑服务实现类文件夹。
├─_Imports.cs   -&gt; 全局命名空间引用文件。
├─AppCore.cs    -&gt; 后端配置类。
</code></pre>
<h2 id="43-jxclitewasm项目">4.3. JxcLite.Wasm项目</h2>
<ul>
<li>添加<code>JxcLite.Wasm</code>类库，引用<code>JxcLite</code>项目和<code>WebAssembly</code>等库，工程文件如下：</li>
</ul>
<pre><code class="language-xml">&lt;Project Sdk="Microsoft.NET.Sdk.BlazorWebAssembly"&gt;
    &lt;ItemGroup&gt;
        &lt;ProjectReference Include="..\JxcLite\JxcLite.csproj" /&gt;
    &lt;/ItemGroup&gt;
&lt;/Project&gt;
</code></pre>
<ul>
<li>该项目只有一个Wasm程序入口文件<code>Program.cs</code></li>
</ul>
<pre><code>├─Program.cs  -&gt; Wasm程序入口。
</code></pre>
<h2 id="44-jxcliteweb项目">4.4. JxcLite.Web项目</h2>
<ul>
<li>添加<code>JxcLite.Web</code>类库，引用<code>JxcLite.Core</code>和<code>JxcLite.Wasm</code>项目，工程文件如下：</li>
</ul>
<pre><code class="language-xml">&lt;Project Sdk="Microsoft.NET.Sdk.Web"&gt;
    &lt;ItemGroup&gt;
        &lt;ProjectReference Include="..\JxcLite.Core\JxcLite.Core.csproj" /&gt;
        &lt;ProjectReference Include="..\JxcLite.Wasm\JxcLite.Wasm.csproj" /&gt;
    &lt;/ItemGroup&gt;
&lt;/Project&gt;
</code></pre>
<ul>
<li>项目文件结构</li>
</ul>
<pre><code>├─wwwroot          -&gt; 静态文件夹。
├─_Imports.razor   -&gt; 全局命名空间引用文件。
├─App.razor        -&gt; 主程序。
├─appsettings.json -&gt; 配置文件。
├─Program.cs       -&gt; Web程序入口。
</code></pre>
<h2 id="45-jxclitewinform项目">4.5. JxcLite.WinForm项目</h2>
<ul>
<li>添加<code>JxcLite.WinForm</code>类库，引用<code>JxcLite.Core</code>项目，工程文件如下：</li>
</ul>
<pre><code class="language-xml">&lt;Project Sdk="Microsoft.NET.Sdk.Razor"&gt;
    &lt;ItemGroup&gt;
        &lt;ProjectReference Include="..\JxcLite.Core\JxcLite.Core.csproj" /&gt;
    &lt;/ItemGroup&gt;
&lt;/Project&gt;
</code></pre>
<ul>
<li>项目文件结构</li>
</ul>
<pre><code>├─wwwroot        -&gt; 静态文件夹，包含css、img、index.html。
├─_Imports.razor -&gt; 全局命名空间引用文件。
├─App.razor      -&gt; 主程序路由。
├─AppSetting.cs  -&gt; 程序设置类。
├─Dialog.cs      -&gt; WinForm对话框类。
├─favicon.ico    -&gt; 图标。
├─MainForm.cs    -&gt; 主窗体。
├─Program.cs     -&gt; 桌面程序入口。
</code></pre>
<h1 id="5-项目配置">5. 项目配置</h1>
<h2 id="51-前端配置">5.1. 前端配置</h2>
<ul>
<li>前端配置写在<code>JxcLite</code>项目的<code>AppConfig.cs</code>文件中，示例如下：</li>
</ul>
<pre><code class="language-csharp">public static class AppConfig {
    public static string AppId =&gt; "JxcLite";
    public static string AppName =&gt; "进销存管理系统";

    // 添加应用程序配置，云Web、Wasm和桌面需要调用
    public static void AddApplication(this IServiceCollection services, AppType type) {
        var assembly = typeof(AppConfig).Assembly;
        Config.AddModule(assembly);

        services.AddKnown(option =&gt; { }); // 添加Known
        services.AddModules();            // 添加一级模块
        services.ConfigUI();              // 配置界面
    }

    // 添加Wasm模式的Http客户端，Wasm需要调用
    public static void AddApplicationClient(this IServiceCollection services, Action&lt;ClientOption&gt; action) {
        var assembly = typeof(AppConfig).Assembly;
        services.AddKnownClient(action);  // 添加Known客户端
        services.AddClients(assembly);    // 自动注入Auto模式客户端实现
    }
}
</code></pre>
<ul>
<li>系统一级模块配置写在<code>JxcLite</code>项目的<code>AppModule.cs</code>文件中，示例如下：</li>
</ul>
<pre><code class="language-csharp">static class AppModule {
    // 添加模块菜单
    internal static void AddModules(this IServiceCollection services) {
        Config.Modules.AddItem("0", AppConstant.Import, "进货管理", "import", 2);
        Config.Modules.AddItem("0", AppConstant.Export, "销货管理", "export", 3);
        Config.Modules.AddItem("0", AppConstant.Inventory, "库存管理", "block", 4);
        Config.Modules.AddItem("0", AppConstant.Finance, "财务管理", "pay-circle", 5);
        Config.Modules.AddItem("0", AppConstant.Report, "统计报表", "bar-chart", 6);
    }
}
</code></pre>
<h2 id="52-后端配置">5.2. 后端配置</h2>
<ul>
<li>后端配置写在<code>JxcLite.Core</code>项目的<code>AppCore.cs</code>文件中，示例如下：</li>
</ul>
<pre><code class="language-csharp">public static class AppCore {
    // 添加PC云Web端，云Web端需要调用
    public static void AddApplicationWeb(this IServiceCollection services, Action&lt;CoreOption&gt; action) {
        services.AddApplicationCore();
        services.AddKnownWeb(option =&gt; SetOption(option, action));
    }

    // 添加单机桌面端，桌面端需要调用
    public static void AddApplicationWin(this IServiceCollection services, Action&lt;CoreOption&gt; action) {
        services.AddApplicationCore();
        services.AddKnownWin(option =&gt; SetOption(option, action));
    }

    // Web端使用程序静态文件，云Web端需要调用
    public static void UseApplication(this WebApplication app) {
        app.UseKnown();
    }

    private static void AddApplicationCore(this IServiceCollection services) {
        var assembly = typeof(AppCore).Assembly;
        services.AddServices(assembly); // 自动注入服务接口后端实现
        services.AddKnownCells();       // 添加Excel操作插件
    }

    private static void SetOption(CoreOption option, Action&lt;CoreOption&gt; action) {
        action?.Invoke(option);
        option.Database = db =&gt; {
            var connString = "Data Source=JxcLite.db;"; // 配置数据库连接
            db.AddSQLite&lt;Microsoft.Data.Sqlite.SqliteFactory&gt;(connString);
        };
    }
}
</code></pre>
<h1 id="6-模块示例">6. 模块示例</h1>
<p>项目模块较多，大部分单表业务模块<code>CRUD</code>可以同通过框架开发中心的代码生成模块进行生成。本文只举商品信息模块为例，其他模块可查看项目源码进行学习。</p>
<h2 id="61-数据模型">6.1. 数据模型</h2>
<table>
<thead>
<tr>
<th>名称</th>
<th>代码</th>
<th style="text-align: center">类型</th>
<th style="text-align: center">长度</th>
<th style="text-align: center">必填</th>
</tr>
</thead>
<tbody>
<tr>
<td>商品信息</td>
<td>JxGoods</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
<tr>
<td>商品编码</td>
<td>Code</td>
<td style="text-align: center">Text</td>
<td style="text-align: center">50</td>
<td style="text-align: center">Y</td>
</tr>
<tr>
<td>商品名称</td>
<td>Name</td>
<td style="text-align: center">Text</td>
<td style="text-align: center">200</td>
<td style="text-align: center">Y</td>
</tr>
<tr>
<td>商品类别</td>
<td>Category</td>
<td style="text-align: center">Text</td>
<td style="text-align: center">50</td>
<td style="text-align: center">Y</td>
</tr>
<tr>
<td>规格型号</td>
<td>Model</td>
<td style="text-align: center">Text</td>
<td style="text-align: center">500</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td>产地</td>
<td>Producer</td>
<td style="text-align: center">Text</td>
<td style="text-align: center">50</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td>计量单位</td>
<td>Unit</td>
<td style="text-align: center">Text</td>
<td style="text-align: center">50</td>
<td style="text-align: center">Y</td>
</tr>
<tr>
<td>采购单价</td>
<td>BuyPrice</td>
<td style="text-align: center">Number</td>
<td style="text-align: center">18,2</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td>销售单价</td>
<td>SalePrice</td>
<td style="text-align: center">Number</td>
<td style="text-align: center">18,2</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td>安全库存</td>
<td>SafeQty</td>
<td style="text-align: center">Number</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
<tr>
<td>备注</td>
<td>Note</td>
<td style="text-align: center">TextArea</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
<tr>
<td>附件</td>
<td>Files</td>
<td style="text-align: center">Text</td>
<td style="text-align: center">500</td>
<td style="text-align: center"></td>
</tr>
</tbody>
</table>
<h2 id="62-信息类">6.2. 信息类</h2>
<p>信息类一是作为前后端数据交互的模型，即数据传输对象<code>DTO</code>，二是通过<code>[Column]</code>和<code>[Form]</code>特性配置列表和表单界面。商品信息类示例如下：</p>
<pre><code class="language-csharp">[DisplayName("商品信息")]
public class GoodsInfo {
    /// 取得或设置商品编码。
    [Required]
    [MaxLength(50)]
    [Column(Width = 120, IsViewLink = true)] // IsViewLink为列表查看连接字段
    [Form(Row = 1, Column = 1)] // Form配置表单字段
    [DisplayName("商品编码")] // DisplayName配置显示名称
    public string Code { get; set; }

    /// 取得或设置商品名称。
    [Column(Width = 120, IsQuery = true)] // 配置查询条件
    public string Name { get; set; }

    /// 取得或设置商品类别。
    [Form(Row = 1, Column = 3, Type = nameof(FieldType.Select))] // 配置下拉框
    [Category(AppConstant.GoodsType)]  // 下拉框数据字典
    public string Category { get; set; }
}
</code></pre>
<h2 id="63-实体类">6.3. 实体类</h2>
<p>实体类是数据库表的映射，框架默认内置<code>Database</code>简易<code>ORM</code>，商品实体类示例如下：</p>
<pre><code class="language-csharp">public class JxGoods : EntityBase { // 使用内置ORM需要继承EntityBase
    [DisplayName("商品编码")]
    [Required]
    [MaxLength(50)]
    public string Code { get; set; }

    [DisplayName("商品名称")]
    [Required]
    [MaxLength(200)]
    public string Name { get; set; }
}
</code></pre>
<h2 id="64-页面组件">6.4. 页面组件</h2>
<p>页面组件用户配置模块菜单、通过<code>[Action]</code>特性定义模块操作按钮，商品列表页面组件示例如下：</p>
<pre><code class="language-csharp">[Route("/bds/goods")] // 页面路由
[Menu(Constants.BaseData, "商品信息", "ordered-list", 4)] // 配置模块菜单
public class GoodsList : BaseTablePage&lt;GoodsInfo&gt;
{
    private IBaseDataService Service;

    protected override async Task OnInitPageAsync() {
        await base.OnInitPageAsync();
        Service = await CreateServiceAsync&lt;IBaseDataService&gt;();
        Table.Form = new FormInfo { Width = 800 };
        Table.OnQuery = Service.QueryGoodsesAsync;
    }

    // Action配置按钮，带参数的方法为表格操作列，不带参数的为工具条按钮
    [Action] public void New() =&gt; Table.NewForm(Service.SaveGoodsAsync, new GoodsInfo());
    [Action] public void DeleteM() =&gt; Table.DeleteM(Service.DeleteGoodsesAsync);
    [Action] public void Edit(GoodsInfo row) =&gt; Table.EditForm(Service.SaveGoodsAsync, row);
    [Action] public void Delete(GoodsInfo row) =&gt; Table.Delete(Service.DeleteGoodsesAsync, row);
    [Action] public Task Import() =&gt; Table.ShowImportAsync();
    [Action] public Task Export() =&gt; Table.ExportDataAsync();
}
</code></pre>
<h2 id="65-服务接口">6.5. 服务接口</h2>
<p>服务接口定义前后端数据交互的操作方法，如增删改查导。商品服务示例如下：</p>
<pre><code class="language-csharp">public interface IBaseDataService : IService
{
    // 分页查询和导出
    Task&lt;PagingResult&lt;GoodsInfo&gt;&gt; QueryGoodsesAsync(PagingCriteria criteria);
    Task&lt;List&lt;GoodsInfo&gt;&gt; GetGoodsesAsync(); // 查询
    Task&lt;Result&gt; DeleteGoodsesAsync(List&lt;GoodsInfo&gt; infos);  // 删除
    Task&lt;Result&gt; SaveGoodsAsync(UploadInfo&lt;GoodsInfo&gt; info); // 保存
}

[Client] // 配置Client，自动注入接口的客户端实现
class BaseDataClient(HttpClient http) : ClientBase(http), IBaseDataService
{
    public Task&lt;PagingResult&lt;GoodsInfo&gt;&gt; QueryGoodsesAsync(PagingCriteria criteria) {
        return Http.QueryAsync&lt;GoodsInfo&gt;("/BaseData/QueryGoodses", criteria);
    }

    public Task&lt;List&lt;GoodsInfo&gt;&gt; GetGoodsesAsync() {
        return Http.GetAsync&lt;List&lt;GoodsInfo&gt;&gt;("/BaseData/GetGoodses");
    }

    public Task&lt;Result&gt; DeleteGoodsesAsync(List&lt;GoodsInfo&gt; infos) {
        return Http.PostAsync("/BaseData/DeleteGoodses", infos);
    }

    public Task&lt;Result&gt; SaveGoodsAsync(UploadInfo&lt;GoodsInfo&gt; info) {
        return Http.PostAsync("/BaseData/SaveGoods", info);
    }
}
</code></pre>
<h2 id="66-服务实现">6.6. 服务实现</h2>
<p>服务实现提供前后端数据交互接口的具体业务逻辑实现。商品服务实现示例如下：</p>
<pre><code class="language-csharp">[WebApi, Service] // 配置WebApi和自动注入接口的服务端实现
class BaseDataService(Context context) : ServiceBase(context), IBaseDataService {
    public Task&lt;PagingResult&lt;GoodsInfo&gt;&gt; QueryGoodsesAsync(PagingCriteria criteria) {
        // 分页查询排序和导出共用，查询条件自动拼接
        return Database.Query&lt;JxGoods&gt;(criteria).ToPageAsync&lt;GoodsInfo&gt;();
    }

    public Task&lt;List&lt;GoodsInfo&gt;&gt; GetGoodsesAsync() {
        return Database.Query&lt;JxGoods&gt;().Where(d =&gt; d.CompNo == CurrentUser.CompNo).ToListAsync&lt;GoodsInfo&gt;();
    }

    public async Task&lt;Result&gt; DeleteGoodsesAsync(List&lt;GoodsInfo&gt; infos) {
        if (infos == null || infos.Count == 0)
            return Result.Error(Language.SelectOneAtLeast);

        var database = Database;
        var oldFiles = new List&lt;string&gt;();
        var result = await database.TransactionAsync(Language.Delete, async db =&gt; {
            foreach (var item in infos) {
                await db.DeleteFilesAsync(item.Id, oldFiles);
                await db.DeleteAsync&lt;JxGoods&gt;(item.Id);
            }
        });
        if (result.IsValid) AttachFile.DeleteFiles(oldFiles);
        return result;
    }

    public async Task&lt;Result&gt; SaveGoodsAsync(UploadInfo&lt;GoodsInfo&gt; info) {
        var database = Database;
        var model = await database.QueryByIdAsync&lt;JxGoods&gt;(info.Model.Id);
        model ??= new JxGoods();
        model.FillModel(info.Model);

        var vr = model.Validate(Context);
        if (vr.IsValid) {
            if (await database.ExistsAsync&lt;JxGoods&gt;(d =&gt; d.Id != model.Id &amp;&amp; d.Code == model.Code))
                vr.AddError($"商品[{model.Code}]已存在！");
        }
        if (!vr.IsValid) return vr;

        var fileFiles = info.Files?.GetAttachFiles(nameof(JxGoods.Files), "GoodsFiles");
        return await database.TransactionAsync(Language.Save, async db =&gt; {
            await db.AddFilesAsync(fileFiles, model.Id, key =&gt; model.Files = key);
            await db.SaveAsync(model);
            info.Model.Id = model.Id;
        }, info.Model);
    }
}
</code></pre>
<h1 id="7-deepseek总结">7. DeepSeek总结</h1>
<p>以下是对文档的总结，重点提取了框架使用、项目结构和开发模式的核心内容：</p>
<hr>
<h3 id="项目概述"><strong>项目概述</strong></h3>
<ul>
<li><strong>目标</strong>：使用<code>Known</code>框架开发跨平台进销存管理系统（支持Web版和单机桌面版）</li>
<li><strong>源码地址</strong>：<a href="https://gitee.com/known/JxcLite" target="_blank" rel="noopener nofollow">https://gitee.com/known/JxcLite</a></li>
</ul>
<hr>
<h3 id="核心需求"><strong>核心需求</strong></h3>
<ol>
<li><strong>基础数据</strong>：商品/供应商/客户管理</li>
<li><strong>进销存流程</strong>：采购进货/退货、销售出货/退货（支持月结/现金结算）</li>
<li><strong>报表功能</strong>：库存查询、明细账、利润表</li>
<li><strong>多端支持</strong>：单机桌面版（WinForm） + 云Web版（Blazor）</li>
</ol>
<hr>
<h3 id="项目结构"><strong>项目结构</strong></h3>
<table>
<thead>
<tr>
<th>项目</th>
<th>作用</th>
<th>关键依赖</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>JxcLite</code></td>
<td>前端公共层（配置/模型/页面）</td>
<td><code>Known 3.*</code></td>
</tr>
<tr>
<td><code>JxcLite.Core</code></td>
<td>后端业务层（实体/服务/数据访问）</td>
<td><code>Known.Core 3.*</code></td>
</tr>
<tr>
<td><code>JxcLite.Wasm</code></td>
<td>WebAssembly前端入口</td>
<td>Blazor WebAssembly</td>
</tr>
<tr>
<td><code>JxcLite.Web</code></td>
<td>云Web服务端</td>
<td>集成Core+Wasm</td>
</tr>
<tr>
<td><code>JxcLite.WinForm</code></td>
<td>单机桌面版</td>
<td>WinForm + Razor组件</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="框架特性"><strong>框架特性</strong></h3>
<ol>
<li><strong>前后端分离</strong>：
<ul>
<li>前端：<code>Razor组件</code> + <code>特性标注</code>（如<code>[Column]</code>定义列表字段，<code>[Form]</code>配置表单）</li>
<li>后端：<code>自动依赖注入</code>（<code>[Service]</code>/<code>[WebApi]</code>） + <code>简易ORM</code>（<code>Database</code>类）</li>
</ul>
</li>
<li><strong>多端适配</strong>：
<ul>
<li>Web端：通过<code>AddApplicationWeb()</code>配置</li>
<li>桌面端：通过<code>AddApplicationWin()</code>配置</li>
</ul>
</li>
<li><strong>高效开发</strong>：
<ul>
<li>代码生成：支持单表业务CRUD自动生成</li>
<li>客户端代理：<code>[Client]</code>特性自动生成HTTP调用代码</li>
</ul>
</li>
</ol>
<hr>
<h3 id="开发示例商品模块"><strong>开发示例（商品模块）</strong></h3>
<ol>
<li><strong>数据模型</strong>：</li>
</ol>
<pre><code class="language-csharp">   // 前端DTO（带UI特性）
   [DisplayName("商品信息")]
   public class GoodsInfo {
       [Column(Width = 120, IsViewLink = true)] 
       [Form(Row = 1, Column = 1)]
       public string Code { get; set; } //商品编码
   }
   
   // 数据库实体
   public class JxGoods : EntityBase {
       public string Code { get; set; }
   }
</code></pre>
<ol start="2">
<li><strong>服务层</strong>：
<ul>
<li>接口声明 <code>IBaseDataService</code></li>
<li>客户端实现 <code>BaseDataClient</code>（HTTP调用）</li>
<li>服务端实现 <code>BaseDataService</code>（数据库操作）</li>
</ul>
</li>
<li><strong>页面组件</strong>：</li>
</ol>
<pre><code class="language-csharp">   [Route("/bds/goods")]
   [Menu("基础数据", "商品信息")]
   public class GoodsList : BaseTablePage&lt;GoodsInfo&gt; {
       [Action] public void New() =&gt; Table.NewForm(...); // 按钮绑定方法
   }
</code></pre>
<hr>
<h3 id="关键配置"><strong>关键配置</strong></h3>
<table>
<thead>
<tr>
<th>配置文件</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>AppConfig.cs</code></td>
<td>前端全局配置（模块/路由/服务）</td>
</tr>
<tr>
<td><code>AppModule.cs</code></td>
<td>定义一级功能模块（菜单）</td>
</tr>
<tr>
<td><code>AppCore.cs</code></td>
<td>后端服务配置（数据库/依赖注入）</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="总结"><strong>总结</strong></h3>
<ol>
<li><strong>架构优势</strong>：
<ul>
<li>一套代码同时支持 <strong>Web</strong> 和 <strong>桌面端</strong></li>
<li>通过<code>Known</code>框架简化Blazor全栈开发（UI配置化、服务自动化）</li>
</ul>
</li>
<li><strong>开发模式</strong>：
<ul>
<li>前端：基于特性的声明式UI + 组件化路由</li>
<li>后端：仓储模式（SQL集中管理） + 事务封装</li>
</ul>
</li>
<li><strong>适用场景</strong>：<br>
适合需要快速开发跨平台企业应用（如ERP、进销存等）的.NET团队。</li>
</ol>
<blockquote>
<p>完整实现需参考源码，尤其是<code>JxcLite.Core</code>的业务逻辑和<code>JxcLite/Pages</code>的组件设计。</p>
</blockquote>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-29 09:06">2025-07-29 09:05</span>&nbsp;
<a href="https://www.cnblogs.com/known">known</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19010037);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19010037', targetLink: 'https://www.cnblogs.com/known/p/19010037', title: '基于Blazor实现的简易进销存管理系统' })">举报</a>
</div>
        