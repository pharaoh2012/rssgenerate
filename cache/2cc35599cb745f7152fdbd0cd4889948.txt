
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/hihaojie/p/18761086/c-bk2f6" title="发布于 2025-03-09 17:46">
    <span role="heading" aria-level="2">C# 中的“相等判断”</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="c-中的相等判断">C# 中的“相等判断”</h1>
<p>C# 中判断相等的方式很多，例如：</p>
<ul>
<li>双等号 <code>==</code>​</li>
<li>实例的 <code>Equals()</code>​ 方法</li>
<li>​<code>Object.Equals()</code>​ 静态方法</li>
<li>​<code>Object.ReferenceEquals()</code>​ 方法</li>
<li>​<code>EqualityComparer&lt;int&gt;.Default.Equals()</code>​ 方法</li>
<li>​<code>is</code>​ 运算符</li>
</ul>
<p>还有一些特殊的类型内部实现了相等判断，例如：</p>
<ul>
<li>元组</li>
<li>匿名类型</li>
</ul>
<p>还有一些特别的相等判断，例如：</p>
<ul>
<li>内部元素结构化相等比较</li>
</ul>
<p>这些相等判断都是做什么的？何时使用？下面我将一一列举说明。</p>
<h2 id="1-双等号的相等判断">1. 双等号（<code>==</code>​）的相等判断</h2>
<h3 id="11-基元类型">1.1 基元类型</h3>
<p>对于基元类型（<code>int</code>​、<code>float</code>​ 等），<code>==</code>​ 是比较二者值是否相等。查看这些基元类型的源码可以发现，它们并没有对 <code>==</code>​ 运算符进行重载，但它们却可以使用 <code>==</code>​ 进行比较。这是因为编译器对基元类型进行了特殊优化：</p>
<ul>
<li>编译阶段：直接生成 <code>ceq</code>​ IL 指令（Compare Equal）</li>
<li>运行时：JIT 编译器将 <code>ceq</code>​ 转换为底层 CPU 的整数比较指令，无需调用任何方法</li>
</ul>
<h3 id="12-部分预定义值类型">1.2 部分预定义值类型</h3>
<p>部分内置的值类型（非基元类型，如 <code>decimal</code>​），它们可以使用 <code>==</code>​ 进行比较，是因为对 <code>==</code>​ 运算符进行了重载。下面两段代码比较了 <code>int</code>​ 和 <code>decimal</code>​ 进行相等比较对应的 IL 代码：</p>
<pre><code class="language-c#">int num = 1;
int num2 = 2;
bool flag = num == num2;

// 对应的 IL 代码如下，有删减
IL_0000: nop
// int num = 1;
IL_0001: ldc.i4.1
IL_0002: stloc.0
// int num2 = 2;
IL_0003: ldc.i4.2
IL_0004: stloc.1
// bool flag = num == num2;
IL_0005: ldloc.0
IL_0006: ldloc.1
IL_0007: ceq
IL_0009: stloc.2
</code></pre>
<pre><code class="language-c#">decimal num = 1m;
decimal num2 = 2m;
bool flag = num == num2;

// 对应的 IL 代码如下，有删减
IL_0000: nop
// decimal num = 1m;
IL_0001: ldsfld valuetype [System.Runtime]System.Decimal [System.Runtime]System.Decimal::One
IL_0006: stloc.0
// decimal num2 = 2m;
IL_0007: ldloca.s 1
IL_0009: ldc.i4.2
IL_000a: call instance void [System.Runtime]System.Decimal::.ctor(int32)
// bool flag = num == num2;
IL_000f: ldloc.0
IL_0010: ldloc.1
IL_0011: call bool [System.Runtime]System.Decimal::op_Equality(valuetype [System.Runtime]System.Decimal, valuetype [System.Runtime]System.Decimal)
IL_0016: stloc.2
</code></pre>
<p>对于值类型，如果没有重载 <code>==</code>​ 运算符，是无法使用  <code>==</code>​ 进行比较的。如下代码无法通过编译：</p>
<pre><code class="language-c#">Person person1 = new Person();
Person person2 = new Person();

bool flag = person1 == person2;

struct Person
{
    public int Age { get; set; }
}
</code></pre>
<h3 id="13-引用类型">1.3 引用类型</h3>
<p>对于引用类型，<code>==</code>​ 判断返回二者的引用是否为相同（前提是未重载 <code>==</code>​ 运算符）。最典型的是 <code>string</code>​ 类型，它的 <code>==</code>​ 方法判断两个字符串内容是否相同，将其强转为 <code>object</code>​ 类型再进行 <code>==</code>​ 比较时，将转化为引用比较。以如下代码为例，它将依次输出 True、False：</p>
<pre><code class="language-c#">string value = "123";
string content1 = value + value;
string content2 = value + value;
Console.WriteLine(content1 == content2);
Console.WriteLine((object)content1 == (object)content2);
</code></pre>
<p>上述 <code>string</code>​ 变量值是在运行时才确定的，因此它们的引用不相同。再看下面这段代码，它将依次输出 True、True：</p>
<pre><code class="language-c#">string value = "123";
string content1 = value;
string content2 = value;
Console.WriteLine(content1 == content2);
Console.WriteLine((object)content1 == (object)content2);
</code></pre>
<p>这是因为编译时 <code>string</code>​ 变量的值已经确定了，为了节省内存，二者是同一实例。</p>
<h2 id="2-equals-实例方法">2. <code>Equals()</code>​ 实例方法</h2>
<h3 id="21-equals-的编写准则与使用场景">2.1 <code>Equals()</code>​ 的编写准则与使用场景</h3>
<p>​<code>Equals()</code>​ 实例方法常用于哈希表等需要执行相等判断的集合类型，因此它对相等判断的要求更为严格。它遵循如下准则：</p>
<ul>
<li>
<p>自反性</p>
<p>​<code>x.Equals(x)</code>​ 应该为 <code>true</code>​。</p>
</li>
<li>
<p>对称性</p>
<p>​<code>x.Equals(y)</code>​ 的返回值与 <code>y.Equals(x)</code>​ 相同。</p>
</li>
<li>
<p>传递性</p>
<p>​<code>x.Equals(y)</code>​、<code>y.Equals(z)</code>​ 为 <code>true</code>​，则 <code>x.Equals(z)</code>​ 也应该为 <code>true</code>​</p>
</li>
<li>
<p>一致性</p>
<p>只要 x 和 y 未被修改，<code>x.Equals(y)</code>​ 的返回值都应该相同。</p>
</li>
<li>
<p>非空性</p>
<p>​<code>x.Equals(null)</code>​ 应返回 <code>false</code>​。</p>
</li>
</ul>
<p>如果不严格遵守上述准则，那么哈希表中的工作就会出错！假设我们有如下 <code>Person</code>​ 类，它覆写了 <code>Equals()</code>​ 方法，并且始终返回 false，这使得它在插入 <code>HashSet&lt;T&gt;</code>​ 后，却无法正确查找。如下代码将输出 False：</p>
<pre><code class="language-c#">Person person = new Person
{
    Name = "John",
    Age = 20
};
HashSet&lt;Person&gt; set = new();
set.Add(person);
Console.WriteLine(set.Contains(person));

struct Person
{
    public string Name { get; set; }
    public int Age { get; set; }

    public override bool Equals(object obj)
    {
        return false;
    }
}
</code></pre>
<p>以上是 <code>Equals()</code>​ 方法的主要用途（我很少在业务代码中看到调用 <code>Equals()</code>​ 方法的），下面我们讲解 <code>Euqals()</code>​ 在值类型、引用类型中的不同。</p>
<h3 id="21-基元类型">2.1 基元类型</h3>
<p>基元类型的 <code>Equals()</code>​ 方法直接调用了 <code>==</code>​ 运算符，因此它的调用和使用 <code>==</code>​ 运算符没有差别。</p>
<h4 id="211-nan-的相等判断">2.1.1 NaN 的相等判断</h4>
<p>在学习 NaN 的相等判断之前我们先回答一个问题：NaN 是什么？</p>
<p>NaN 是“Not a Number”的缩写，表示未定义或不可表示的值。它常出现在浮点计算被除数为 0 的情况。如下计算便会得到 NaN：</p>
<pre><code class="language-c#">Console.WriteLine(0.0 / 0.0);
</code></pre>
<p>NaN 十分特殊，使用 <code>==</code>​ 运算符进行判断和使用 <code>Equals()</code>​ 进行判断结果刚好相反！以如下代码为例，它将分别输出 False、True</p>
<pre><code class="language-c#">double value = 0.0 / 0.0;
Console.WriteLine(value == value);
Console.WriteLine(value.Equals(value));
</code></pre>
<p>这是因为 <code>==</code>​ 更多的是表示“数学中的相等”，在数学中，两个 NaN 无论如何都不可能相等，因此 <code>value == value</code>​ 的结果是 False。而 <code>Equals()</code>​ 必须支持自反性，因此 <code>value.Equals(value)</code>​ 的结果是 True。集合和字典需要 <code>Equals()</code>​ 保持这个行为，否则就无法找到之前存储的项目了。</p>
<p>我们通常使用 <code>floast.IsNaN()</code>​ 或 <code>double.IsNaN()</code>​ 方法判断一个值是否为 NaN：</p>
<pre><code class="language-c#">Console.WriteLine (double.IsNaN (0.0 / 0.0));
</code></pre>
<blockquote>
<p>Info</p>
<p>请参考<a href="https://www.cnblogs.com/hihaojie/p/18608886" target="_blank">第2章 C# 语言基础 - hihaojie - 博客园</a> 2.4.7 特殊的浮点值、<a href="https://www.cnblogs.com/hihaojie/p/18639809/chapter-6-framework-basis-z1ggv44" target="_blank">第6章 框架基础 - hihaojie - 博客园</a> 6.11.2.6 <code>Equals</code>​ 和 <code>==</code>​ 在何时并不等价</p>
</blockquote>
<h3 id="22-值类型">2.2 值类型</h3>
<p>这里我们特指自定义结构体，其 <code>Equals()</code>​ 方法未被覆写。</p>
<p>值类型的 <code>Equals()</code>​ 方法很特别，它的底层会通过反射对所有字段进行相等比较！以如下代码为例，即使 <code>p1</code>​ 和 <code>p2</code>​ 分别定义，<code>Equals()</code>​ 方法仍能判断二者相等。</p>
<pre><code class="language-c#">Person p1 = new Person
{
    Name = "John",
    Age = 18
};
Person p2 = new Person
{
    Name = "John",
    Age = 18
};
Console.WriteLine(p1.Equals(p2));

struct Person
{
    public string Name { get; set; }
    public int Age { get; set; }
}
</code></pre>
<p>通过反射完成相等判断，它的性能必然受限，并且值类型在使用 <code>object.Equals()</code>​ 方法比较时会进行装箱。为此 C# 提供了 <code>IEquatable&lt;T&gt;</code>​ 接口。</p>
<h4 id="221-iequatablet-接口">2.2.1 <code>IEquatable&lt;T&gt;</code>​ 接口</h4>
<blockquote>
<p>Info</p>
<p>该内容可参考<a href="https://www.cnblogs.com/hihaojie/p/18663015/chapter-4-type-design-guidelines-jyary" target="_blank">第4章 类型设计准则 - hihaojie - 博客园</a>的 4.7 struct 的设计、<a href="https://www.cnblogs.com/hihaojie/p/18669604/chapter-8-use-guidelines-z1wnwa5" target="_blank">第8章 使用准则 - hihaojie - 博客园</a>的 8.6 <code>IComparable&lt;T&gt;</code>​ 与 <code>IEquatable&lt;T&gt;</code>​、8.9 Object</p>
</blockquote>
<p>值类型实现 <code>IEquatable&lt;T&gt;</code>​ 可以避免 2 个问题：</p>
<ol>
<li>值类型的 <code>Object.Equals()</code>​ 方法会导致装箱，</li>
<li>​<code>Object.Equals()</code>​ 使用了反射，它的默认实现效率不高。</li>
</ol>
<p>该接口定义如下，其 <code>Equals()</code>​ 方法要求我们自行完成成员的相等判断：</p>
<pre><code class="language-c#">public interface IEquatable&lt;T&gt;
{
    bool Equals(T? other);
}
</code></pre>
<p>以前文的 <code>Person</code>​ 结构体为例，它的实现如下：</p>
<pre><code class="language-c#">Person p1 = new Person
{
    Name = "John",
    Age = 18
};
Person p2 = new Person
{
    Name = "John",
    Age = 18
};
Console.WriteLine(p1.Equals(p2));

class Person : IEquatable&lt;Person&gt;
{
    public string Name { get; set; }
    public int Age { get; set; }

    public override bool Equals(object? obj)
    {
        return Equals(obj as Person);
    }

    public bool Equals(Person? other)
    {
        if (other is null)
        {
            return false;
        }

        if (!Name.Equals(other.Name))
        {
            return false;
        }
        if (Age != other.Age)
        {
            return false;
        }
        return true;
    }
}
</code></pre>
<h3 id="23-引用类型">2.3 引用类型</h3>
<p>对于引用类型（在 <code>Equals()</code>​ 方法、<code>==</code>​ 运算符未被覆写的情况下），其 <code>Equals()</code>​ 方法与 <code>==</code>​ 运算符含义相同，比较引用是否相同。</p>
<p>而 <code>Equals</code>​ 和 <code>==</code>​ 含义不同这种做法在引用类型中有很多，开发者自定义 <code>Equals()</code>​ 实现值的相等比较，而仍旧令 <code>==</code>​ 执行（默认的）引用相等比较。<code>StringBuilder</code>​ 类便采用了这种方式，如下代码将输出“False、True”：</p>
<pre><code class="language-c#">var sb1 = new StringBuilder ("foo");
var sb2 = new StringBuilder ("foo");
Console.WriteLine (sb1 == sb2);
Console.WriteLine (sb1.Equals (sb2));
</code></pre>
<blockquote>
<p>Notice</p>
<p>​<code>StringBuilder</code>​ 并未覆写 <code>object.Equals()</code>​ 实例方法，它只是添加了一个新的重载方法。因此如下两段代码执行结果不同：</p>
<pre><code class="language-c#">Console.WriteLine(sb1.Equals(sb2));
Console.WriteLine(((object)sb1).Equals(sb2));
</code></pre>
</blockquote>
<p>什么情况下应该覆写引用类型的 <code>Equals()</code>​ 方法呢？《框架设计指南》<a href="https://www.cnblogs.com/hihaojie/p/18669604/chapter-8-use-guidelines-z1wnwa5" target="_blank">第8章 使用准则</a>给出了建议：</p>
<ul>
<li>
<p>​<code>CONSIDER</code>​：如果引用类型表示的是一个值，考虑覆盖 <code>Equals()</code>​ 方法以提供值相等语义。</p>
<p>例如：表示数值、数学实体的引用类型。</p>
</li>
</ul>
<blockquote>
<p>Info</p>
<p>更多内容，请参考<a href="https://www.cnblogs.com/hihaojie/p/18639809/chapter-6-framework-basis-z1ggv44" target="_blank">第6章 框架基础 - hihaojie - 博客园</a> 6.11.2.6 <code>Equals</code>​ 和 <code>==</code>​ 在何时并不等价、<a href="https://www.cnblogs.com/hihaojie/p/18669604/chapter-8-use-guidelines-z1wnwa5" target="_blank">第8章 使用准则</a> 8.9.1 Object.Equals</p>
</blockquote>
<h2 id="3-objectequals-静态方法">3. <code>Object.Equals()</code>​ 静态方法</h2>
<p>​<code>Object.Equals()</code>​ 静态方法主要用于避免“实例为空导致的空引用异常（<code>NullReferenceException</code>​）”。它的内部操作如下：</p>
<pre><code class="language-c#">public static bool Equals (object objA, object objB)
    =&gt; objA == null ? objB == null : objA.Equals (objB);
</code></pre>
<p>与 <code>object.Equals()</code>​ 实例方法不同，该静态方法接受两个参数。它常用于 <code>==</code>​ 和 <code>!=</code>​ 无法使用的场景，譬如泛型实例比较：</p>
<pre><code class="language-c#">class Test&lt;T&gt;
{
    T _value;
    public void SetValue(T newValue)
    {
        if (!object.Equals(newValue, _value))
        {
            _value = newValue;
            OnValueChanged();
        }
    }

    protected virtual void OnValueChanged() {}
}
</code></pre>
<p>上述代码无法使用 <code>==</code>​ 和 <code>!=</code>​（因为类型不确定，编译时无法绑定）；对于 <code>object.Equals()</code>​ 实例方法，如果 <code>newValue</code>​ 为 null，则会抛出 <code>NullReferenceException</code>​ 异常，因此这里使用静态方法 <code>Object.Equals()</code>​。</p>
<h2 id="4-objectreferenceequals-方法">4. <code>Object.ReferenceEquals()</code>​ 方法</h2>
<p>我们在2.3 引用类型提到：</p>
<blockquote>
<p>而 <code>Equals</code>​ 和 <code>==</code>​ 含义不同这种做法在引用类型中有很多，开发者自定义 <code>Equals()</code>​ 实现值的相等比较，而仍旧令 <code>==</code>​ 执行（默认的）引用相等比较。<code>StringBuilder</code>​ 类便采用了这种方式，如下代码将输出“False、True”：</p>
</blockquote>
<p>如果 <code>==</code>​ 和 <code>Equals()</code>​ 都进行了重载，我们又需要判断引用是否相同，应该怎么做？</p>
<p>有 2 种方案：</p>
<ul>
<li>将实例显式转换为 <code>object</code>​ 再用 <code>==</code>​ 进行比较</li>
<li>通过 <code>Object.ReferenceEquals()</code>​ 静态方法比较</li>
</ul>
<p>我们实际看 <code>Object.ReferenceEquals()</code>​ 代码会发现，上述两种方案其实是一样的：都是将实例转换为 <code>object</code>​ 再用 <code>==</code>​ 进行比较，只是实例转换为 <code>object</code>​ 这一步通过传参的方式省略了：</p>
<pre><code class="language-c#">public static bool ReferenceEquals (Object objA, Object objB)
{
        return objA == objB;
}
</code></pre>
<p>如下这段代码对比了各种比较方式，只有最后两条输出语句正确进行了引用比较：</p>
<pre><code class="language-c#">var p1 = new Person
{
    Name = "John",
    Age = 18
};
var p2 = new Person
{
    Name = "John",
    Age = 18
};
Console.WriteLine(p1 == p2);
Console.WriteLine(p1.Equals(p2));
Console.WriteLine(((object)p1).Equals(p2));
Console.WriteLine(object.Equals(p1, p2));
Console.WriteLine((object)p1 == (object)p2);
Console.WriteLine(object.ReferenceEquals(p1, p2));

class Person : IEquatable&lt;Person&gt;
{
    public string Name { get; set; }
    public int Age { get; set; }
  
    public static bool operator ==(Person left, Person right)
    {
        return left.Equals(right);
    }
  
    public static bool operator !=(Person left, Person right)
    {
        return !(left == right);
    }

    public override bool Equals(object? obj)
    {
        return Equals(obj as Person);
    }

    public bool Equals(Person? other)
    {
        if (other is null)
        {
            return false;
        }

        if (!Name.Equals(other.Name))
        {
            return false;
        }
        if (Age != other.Age)
        {
            return false;
        }
        return true;
    }
}
</code></pre>
<h2 id="5-equalitycomparertdefaultequals-方法">5. <code>EqualityComparer&lt;T&gt;.Default.Equals()</code>​ 方法</h2>
<p>我们在3. Object.Equals() 静态方法的用例代码中展示了两个泛型实例比较是否相等：</p>
<blockquote>
<pre><code class="language-c#">class Test&lt;T&gt;
{
    T _value;
    public void SetValue(T newValue)
    {
        if (!object.Equals(newValue, _value))
        {
            _value = newValue;
            OnValueChanged();
        }
    }

    protected virtual void OnValueChanged() {}
}
</code></pre>
</blockquote>
<p>它虽然实现了功能，但性能上仍有部分损耗：如果 T 是值类型，使用 <code>object.Equals()</code>​ 比较的过程中会发生装箱！<code>EqualityComparer&lt;T&gt;.Default.Equals()</code>​ 方法便应运而生。</p>
<p>​<code>EqualityComparer&lt;T&gt;.Default</code>​ 属性会返回一个通用的相等比较器，替代静态的 <code>object.Equals</code>​ 方法。它会首先检查 <code>T</code>​ 是否实现了 <code>IEquatable&lt;T&gt;</code>​，实现了则直接调用实现类，从而避免装箱开销。</p>
<p>如下代码改为了使用 <code>EqualityComparer&lt;T&gt;.Default.Equals()</code>​，避免了装箱：</p>
<pre><code class="language-c#">class Test&lt;T&gt;
{
    T _value;
    public void SetValue(T newValue)
    {
        if (!EqualityComparer&lt;T&gt;.Default.Equals(newValue, _value))
        {
            _value = newValue;
            OnValueChanged();
        }
    }

    protected virtual void OnValueChanged() { }
}
</code></pre>
<blockquote>
<p>Info</p>
<p>更多内容，请参考<a href="https://www.cnblogs.com/hihaojie/p/18639810/chapter-7-collection-2n5qb5" target="_blank">第7章 集合 - hihaojie - 博客园</a> 7.7.1 <code>IEqualityComparer</code>​ 和 <code>EqualityComparer</code>​</p>
</blockquote>
<h2 id="6-is-运算符">6. <code>is</code>​ 运算符</h2>
<p>​<code>is</code>​ 运算符可用的模式有三种：常量模式、类型模式、var模式。这里我们讲解常量模式涉及的相等比较。</p>
<h3 id="61-常量模式">6.1 常量模式</h3>
<p>使用 is 与常量比较相等时，有两种情况：</p>
<ul>
<li>整型表达式：使用 <code>==</code>​ 进行比较</li>
<li>其他类型：使用 <code>object.Equals()</code>​ 静态方法进行比较。</li>
</ul>
<h4 id="611-整型表达式">6.1.1 整型表达式</h4>
<p>整型表达式会转为使用 <code>==</code>​ 运算符进行比较。以如下代码为例，反编译生成的程序可以看到，它实际使用 <code>==</code>​ 进行比较：</p>
<pre><code class="language-c#">long x = 10L;
if (x is 10)
{
    Console.WriteLine("x is 10");
}
</code></pre>
<pre><code class="language-c#">long x = 10L;
if (x == 10)
{
    Console.WriteLine("x is 10");
}
</code></pre>
<h4 id="612-其他类型">6.1.2 其他类型</h4>
<p>我们可用通过 is 判断变量是否为 null，此时相等比较使用的是 <code>object.Equals()</code>​ 方法：</p>
<ul>
<li>检查是否为 <code>null</code>​，如下例所示：</li>
</ul>
<pre><code class="language-c#">if (input is null)
{
    return;
}
</code></pre>
<p>将表达式与 <code>null</code>​ 匹配时，编译器保证不会调用用户重载的 <code>==</code>​ 或 <code>!=</code>​ 运算符。</p>
<ul>
<li>可使用否定模式执行非 null 检查，如下例所示：</li>
</ul>
<pre><code class="language-c#">if (result is not null)
{
    Console.WriteLine(result.ToString());
}
</code></pre>
<blockquote>
<p>Question</p>
<p>请思考如下代码，会输出什么内容？符合上述情况中的哪种？</p>
<pre><code class="language-c#">Match(10L);

static void Match(object input)
{
    if (input is 10)
        Console.WriteLine("input 是整型类型的 10");
    else
        Console.WriteLine("Input 不是整型类型的 10");
}
</code></pre>
<p>答案是第二种。在传入 <code>10L</code>​ 的值时发生了装箱，因此 <code>input is 10</code>​ 实际调用了 <code>object.Equals() </code>​方法比较相等，显然，<code>object.Equals(10L, 10)</code>​ 的结果是 False</p>
</blockquote>
<h3 id="62-列表模式">6.2 列表模式</h3>
<ul>
<li>从 C#11 开始，可以使用列表模式来匹配列表或数组的元素。 以下代码检查数组中处于预期位置的整数值：</li>
</ul>
<pre><code class="language-c#">int[] empty = [];
int[] one = [1];
int[] odd = [1, 3, 5];
int[] even = [2, 4, 6];
int[] fib = [1, 1, 2, 3, 5];

Console.WriteLine(odd is [1, _, 2, ..]);   // false
Console.WriteLine(fib is [1, _, 2, ..]);   // true
Console.WriteLine(fib is [_, 1, 2, 3, ..]);     // true
Console.WriteLine(fib is [.., 1, 2, 3, _ ]);     // true
Console.WriteLine(even is [2, _, 6]);     // true
Console.WriteLine(even is [2, .., 6]);    // true
Console.WriteLine(odd is [.., 3, 5]); // true
Console.WriteLine(even is [.., 3, 5]); // false
Console.WriteLine(fib is [.., 3, 5]); // true
</code></pre>
<blockquote>
<p>Info</p>
<p>更多内容，请参考<a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/is" target="_blank" rel="noopener nofollow"><code>is</code> 运算符 - 将表达式与类型或常量模式匹配 - C# reference | Microsoft Learn</a>  、《深入理解C#》第4版 12.4.1 常量模式、<a href="https://www.bilibili.com/video/BV1EP4y1B7Er/?spm_id_from=333.337.search-card.all.click&amp;vd_source=07da6c182e5496f7a143a40d1033e5c0" target="_blank" rel="noopener nofollow">你不知道的C#冷知识（其二）_哔哩哔哩_bilibili</a></p>
</blockquote>
<h2 id="7-iequalitycomparert-和-equalitycomparert">7. <code>IEqualityComparer&lt;T&gt;</code>​ 和 <code>EqualityComparer&lt;T&gt;</code>​</h2>
<p>提到相等比较必然会谈到哈希表。前文我们也提到了 <code>Equals()</code>​ 方法对哈希表的重要性。如果你有仔细观察过 <code>HashSet&lt;T&gt;</code>​ 和 <code>Dictionary&lt;TKey, TValue&gt;</code>​ 的构造方法，会发现它们都有接收 <code>IEqualityComparer&lt;T&gt;</code>​ 接口实例的构造器：</p>
<pre><code class="language-c#">public HashSet([Nullable(IEqualityComparer&lt;T&gt;)
public Dictionary(IEqualityComparer&lt;TKey&gt;)
</code></pre>
<p>我们从哈希表的原理可知：存放元素时，哈希表通过 <code>GetHashCode()</code>​ 方法获取哈希值，将元素存放至相应位置；查找元素时，哈希表通过 <code>GetHashCode()</code>​ 方法获取哈希值，获取元素，再调用 <code>Equals()</code>​ 方法确认是否为要查找的元素。</p>
<p>有时我们想自定义哈希表的存放、查找规则，便需要使用 <code>IEqualityComparer&lt;T&gt;</code>​ 接口。该接口定义如下：</p>
<pre><code class="language-c#">public interface IEqualityComparer&lt;in T&gt;
{
    bool Equals(T x, T y);
    int GetHashCode(T obj);
}
</code></pre>
<p>接下来我们演示一下该接口的使用。我们假设有 <code>Person</code>​ 类：</p>
<pre><code class="language-c#">class Person
{
    public string Name { get; set; }
    public int Age { get; set; }
}
</code></pre>
<p>我们希望只要 <code>Person</code>​ 实例的 <code>Name</code>​ 和 <code>Age</code>​ 相同，就认为是同一个“人”，下面这段代码显然不符合要求，它会输出 False：</p>
<pre><code class="language-c#">HashSet&lt;Person&gt; set = new HashSet&lt;Person&gt;();
Person person1 = new Person
{
    Name = "John",
    Age = 18
};
set.Add(person1);

Person person2 = new Person
{
    Name = "John",
    Age = 18
};
Console.WriteLine(set.Contains(person2));
</code></pre>
<p>如果 <code>Person</code>​ 是第三方类库提供的，我们无法覆写它的 <code>Equals()</code>​ 方法和 <code>GetHashCode()</code>​ 方法，这时候我们可以自定义一个类，实现 <code>IEqualityComparer&lt;T&gt;</code>​ 接口：</p>
<pre><code class="language-c#">class PersonEqualityComParer : IEqualityComparer&lt;Person&gt;
{
    public bool Equals(Person? x, Person? y)
    {
        if (x is null || y is null)
        {
            return false;
        }
        if (x.Name != y.Name)
        {
            return false;
        }
        if (x.Age != y.Age)
        {
            return false;
        }
        return true;
    }

    public int GetHashCode([DisallowNull] Person obj)
    {
        int hash = 17;
        hash = hash * 31 + obj.Name.GetHashCode();
        hash = hash * 31 + obj.Age.GetHashCode();
        return hash;
    }
}
</code></pre>
<p>将 <code>PersonEqualityComParer</code>​ 实例传入 HashSet 的构造函数，我们便可以自定义哈希表的匹配方式，如下代码将输出 True：</p>
<pre><code class="language-c#">HashSet&lt;Person&gt; set = new HashSet&lt;Person&gt;(new PersonEqualityComParer());
Person person1 = new Person
{
    Name = "John",
    Age = 18
};
set.Add(person1);

Person person2 = new Person
{
    Name = "John",
    Age = 18
};
Console.WriteLine(set.Contains(person2));
</code></pre>
<p>‍</p>
<p>前面讲的一大堆都是关于 <code>IEqualityComparer&lt;T&gt;</code>​ 接口的，那 <code>EqualityComparer&lt;T&gt;</code>​ 又是做什么的呢？这就不得不提到非泛型版本的 <code>IEqualityComparer</code>​ 接口。如果你观察过 <code>HashTable</code>​ 集合类型（它是非泛型的），会发现它的构造器会可以接受 <code>IEqualityComparer</code>​ 接口实例：</p>
<pre><code class="language-c#">public Hashtable(IEqualityComparer)
</code></pre>
<p>​<code>IEqualityComparer</code>​ 接口的定义和 <code>IEqualityComparer&lt;T&gt;</code>​ 高度相似：</p>
<pre><code class="language-c#">public interface IEqualityComparer
{
    new bool Equals(object x, object y);
    int GetHashCode(object obj);
}
</code></pre>
<p>如果我们想让前面实现的 <code>PersonEqualityComParer</code>​ 同时可用于泛型、非泛型哈希表，这两个接口都需要实现，显然很麻烦。为此 C# 提供了 <code>EqualityComparer&lt;T&gt;</code>​ 抽象类，比较器只需实现一次 <code>Equals()</code>​ 方法、一次 <code>GetHashCode()</code>​ 方法便可用于泛型、非泛型两种情况：</p>
<pre><code class="language-c#">// 可同时用于泛型、非泛型哈希表：
HashSet&lt;Person&gt; set = new HashSet&lt;Person&gt;(new PersonEqualityComParer());
Hashtable table = new Hashtable(new PersonEqualityComParer());

class PersonEqualityComParer : EqualityComparer&lt;Person&gt;
{
    public override bool Equals(Person? x, Person? y)
    {
        if (x is null || y is null)
        {
            return false;
        }
        if (x.Name != y.Name)
        {
            return false;
        }
        if (x.Age != y.Age)
        {
            return false;
        }
        return true;
    }

    public override int GetHashCode([DisallowNull] Person obj)
    {
        int hash = 17;
        hash = hash * 31 + obj.Name.GetHashCode();
        hash = hash * 31 + obj.Age.GetHashCode();
        return hash;
    }
}
</code></pre>
<h2 id="8-一些特殊的预定义类型的相等比较">8. 一些特殊的预定义类型的相等比较</h2>
<h3 id="81-元组valuetuple">8.1 元组（<code>ValueTuple</code>​）</h3>
<p>元组使用 <code>Equals()</code>​ 方法和使用 <code>==</code>​ 运算符比较并不相同。以 <code>ValueTuple&lt;T1, T2&gt;</code>​ 为例，查看它的源码可以发现，它的 <code>Equals()</code>​ 方法通过调用 <code>EqualityComparer&lt;T&gt;.Default.Equals()</code>​ 实现相等比较：</p>
<pre><code class="language-c#">public bool Equals(ValueTuple&lt;T1, T2&gt; other)
{
    return EqualityComparer&lt;T1&gt;.Default.Equals(Item1, other.Item1)
        &amp;&amp; EqualityComparer&lt;T2&gt;.Default.Equals(Item2, other.Item2);
}
</code></pre>
<p>如果你在源码中找不到 <code>==</code>​ 运算符的重载！但是自 C#7.3 之后，又能使用 <code>==</code>​、<code>!=</code>​ 运算符进行相等判断。</p>
<p>这是因为编译器就为元组类型提供了元组 <code>==</code>​ 和 <code>!=</code>​ 的实现。编译器将 <code>==</code>​ 运算符扩展到元素级别的 <code>==</code>​ 操作。它会对每一对元素值执行 <code>==</code>​ 操作（<code>!=</code>​ 运算符同理）。代码示例如下：</p>
<pre><code class="language-c#">var t1 = (x: "x", y: "y", z: 1);    // 比较时不考虑
var t2 = ("x", "y", 1);             // 元素名称不同

Console.WriteLine(t1 == t2);
Console.WriteLine(t1.Item1 == t2.Item1 &amp;&amp;   //
                  t1.Item2 == t2.Item2 &amp;&amp;   // 编译器生成的
                  t1.Item3 == t2.Item3);    // 等价代码

Console.WriteLine(t1 != t2);
Console.WriteLine(t1.Item1 != t2.Item1 ||   //
                  t1.Item2 != t2.Item2 ||   // 编译器生成的
                  t1.Item3 != t2.Item3);    // 等价代码
</code></pre>
<p>这也要求元组中的类型必须能通过 <code>==</code>​、<code>!=</code>​ 进行比较，以如下代码为例，因 Person 结构体未重载 <code>==</code>​、<code>!=</code>​ 运算符，如下代码编译器报错 CS0019：</p>
<pre><code class="language-c#">var tuple1 = (1, p1);
var tuple2 = (1, p2);
Console.WriteLine(tuple1 == tuple2);

struct Person
{
    public int Age;
    public string Name;
}
</code></pre>
<h3 id="82-匿名类型">8.2 匿名类型</h3>
<p>匿名类型本质上是引用类型，因此它可以使用 <code>==</code>​ 运算符进行比较，它比较的是引用是否相等。它的 <code>Equals()</code>​ 方法则会比较所有元素是否相同（通过  <code>EqualityComparer&lt;T&gt;.Default.Equals()</code>​ 方法），考虑到它常用于 LINQ，<code>Equals()</code>​ 比较所有元素是否相同的行为就非常合理了。</p>
<p>两个匿名类型实例相同的前提是：类型相同、属性名称相同、属性顺序相同。以如下代码为例，它将输出 True、False、False、False</p>
<pre><code class="language-c#">var value1 = new { Name = "John", Age = 18 };
var value2 = new { Name = "John", Age = 18 };
var value3 = new { Age = 18, Name = "John" };
var value4 = new { Title = "John", Level = 18 };
Console.WriteLine(value1.Equals(value2));
Console.WriteLine(value1.Equals(value3));
Console.WriteLine(value1.Equals(value4));
Console.WriteLine(value1 == value2);
</code></pre>
<blockquote>
<p>Tips</p>
<p>为什么说“考虑到匿名类型常用于 LINQ，<code>Equals()</code>​ 比较所有元素是否相同的行为就非常合理了”？</p>
<p>以如下代码为例，我们通过匿名类型在一个查询中基于多个键进行连接查询，这就用到了匿名类型的 <code>Equals()</code>​ 方法：</p>
<pre><code class="language-c#">from s in stringProps
join b in builderProps on new { s.Name, s.PropertyType }
                   equals new { b.Name, b.PropertyType }
</code></pre>
</blockquote>
<h2 id="9-内部元素结构化相等比较">9. 内部元素结构化相等比较</h2>
<p>有些类型的数据我们需要对内部元素进行相等比较，如数组、元组。此时可用通过 <code>IStructuralEquatable</code>​ 接口的 <code>Equals()</code>​ 方法执行该操作。数组和元组实现了该接口。下面是两个简单用例，分别演示了对数组、元组内部元素的相等比较：</p>
<pre><code class="language-c#">int[] nums1 = [1, 2, 3, 4, 5];
int[] nums2 = [1, 2, 3, 4, 5];

Console.WriteLine(nums1.Equals(nums2));

IStructuralEquatable se = (IStructuralEquatable)nums1;
Console.WriteLine(se.Equals(nums2, EqualityComparer&lt;int&gt;.Default));
</code></pre>
<pre><code class="language-c#">var t1 = (1, "foo");
var t2 = (1, "FOO");

IStructuralEquatable se1 = t1;
Console.WriteLine(se1.Equals(t2, StringComparer.InvariantCultureIgnoreCase));
</code></pre>
<blockquote>
<p>Info</p>
<p>更多内容，另见<a href="https://www.cnblogs.com/hihaojie/p/18639810/chapter-7-collection-2n5qb5" target="_blank">第7章 集合 - hihaojie - 博客园</a> 7.7.4 IStructuralEquatable 和 IStructualComparable</p>
</blockquote>
<hr>
<p>参考文献：</p>
<ol>
<li>《框架设计指南：构建可复用.NET库的约定、惯例与模式》第三版</li>
<li>《C#7.0 核心技术指南》</li>
<li>《深入解析C#》第四版</li>
</ol>
<blockquote>
<p>Info</p>
<p>前两本书的部分内容，可参阅我的阅读笔记<a href="https://www.cnblogs.com/hihaojie/p/18660776" target="_blank">阅读笔记目录汇总 - hihaojie - 博客园</a></p>
</blockquote>
<p>‍</p>
<p>‍</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.6984972625081018" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-09 17:48">2025-03-09 17:46</span>&nbsp;
<a href="https://www.cnblogs.com/hihaojie">hihaojie</a>&nbsp;
阅读(<span id="post_view_count">131</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18761086" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18761086);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18761086', targetLink: 'https://www.cnblogs.com/hihaojie/p/18761086/c-bk2f6', title: 'C# 中的“相等判断”' })">举报</a>
</div>
        