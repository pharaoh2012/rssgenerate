
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/niceWk/p/18980980" title="发布于 2025-07-12 19:31">
    <span role="heading" aria-level="2">Rust修仙之道 第十四章  宏灵境 · 灵咒重铸之术</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="第十四章宏灵境--灵咒重铸之术">第十四章：宏灵境 · 灵咒重铸之术</h2>
<blockquote>
<p><em>“术之极者，可铸术自身；言之极者，语法亦可铸。”</em></p>
</blockquote>
<p>顾行云在整理灵术模块时，发现冗余术式重复繁复，若能一术生万术，岂非大成？<br>
此时，一道灵书显现：<strong>《宏灵咒典》</strong>。</p>
<h3 id="一声明式宏macro_rules-之符">一、声明式宏：<code>macro_rules!</code> 之符</h3>
<p>这是一种<strong>模式匹配式灵咒</strong>，可根据输入匹配并展开。</p>
<h4 id="示例打印多个灵符">示例：打印多个灵符</h4>
<pre><code class="language-rust">macro_rules! summon {
    ($($x:expr),*) =&gt; {
        $(
            println!("召唤灵符：{}", $x);
        )*
    };
}

fn main() {
    summon!("火符", "冰符", "雷符");
}
</code></pre>
<blockquote>
<p>他惊叹：“这不只是语法糖，这是咒语工厂！”</p>
</blockquote>
<p>关键要素：</p>
<ul>
<li>
<p><code>$()</code>：重复匹配模式</p>
</li>
<li>
<p><code>*</code>：任意多个（或可用 <code>+</code> 表示至少一个）</p>
</li>
<li>
<p><code>$x:expr</code>：匹配表达式</p>
</li>
</ul>
<h3 id="二派生宏derive之术">二、派生宏（derive）之术</h3>
<p>顾行云曾手写 <code>Debug</code> / <code>Clone</code> 等 trait 实现疲惫不堪，直到他发现派生宏之术：</p>
<pre><code class="language-rust">#[derive(Debug, Clone, PartialEq)]
struct Spell {
    name: String,
    level: u32,
}
</code></pre>
<blockquote>
<p>编译灵印自动生成对应 trait 实现，让灵体拥有“调试视界”、“复制术”等能力。</p>
</blockquote>
<h3 id="三过程宏自造灵纹之顶阶术">三、过程宏：自造灵纹之顶阶术</h3>
<p>若要<strong>定义新的属性宏、嵌套规则、改变语法结构</strong>，必须使用 <strong>proc_macro</strong>！</p>
<p>步骤如下：</p>
<ol>
<li>创建专属宏法门包（类库）</li>
</ol>
<pre><code class="language-bush">cargo new spell_macro --lib
</code></pre>
<ol start="2">
<li>在 <code>lib.rs</code> 中启用：</li>
</ol>
<pre><code class="language-rust">extern crate proc_macro;
use proc_macro::TokenStream;

#[proc_macro]
pub fn spirit_bless(input: TokenStream) -&gt; TokenStream {
    // 处理语法树，生成新代码
    input
}
</code></pre>
<ol start="3">
<li>在主项目中调用：</li>
</ol>
<pre><code class="language-rust">use spell_macro::spirit_bless;

spirit_bless! {
    fn chant() {
       println!("✨ 灵术被祝福");
    }
}
</code></pre>
<p>🧠 顾行云逐渐熟练 <code>quote!</code>, <code>syn</code> 等神级语义操控库，如法如术，开辟自己的语法领域。</p>
<h3 id="宏灵诀--拓语之理">宏灵诀 · 拓语之理</h3>
<blockquote>
<p><em>语不止所见，亦可被构；术不止于写，亦可自生；宏者，道中之神铸也。</em></p>
</blockquote>
<hr>
<h2 id="️-上一章下一章-待续️">⬅️ <a href="https://www.cnblogs.com/niceWk/p/18980134" target="_blank">上一章</a>　　　　　　　　　　　　[下一章 待续➡️]</h2>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0020833333333333333" data-date-updated="2025-07-12 19:34">2025-07-12 19:31</span>&nbsp;
<a href="https://www.cnblogs.com/niceWk">NiceWk</a>&nbsp;
阅读(<span id="post_view_count">5</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18980980);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18980980', targetLink: 'https://www.cnblogs.com/niceWk/p/18980980', title: 'Rust修仙之道 第十四章  宏灵境 &amp;#183; 灵咒重铸之术' })">举报</a>
</div>
        