
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Rong-/p/18677549" title="发布于 2025-01-17 19:07">
    <span role="heading" aria-level="2">当开发人员接到新任务后</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p align="left"><strong>当开发人员接到新任务后</strong></p>
<p align="left"><strong>1. </strong><strong>向上追溯（纵向拉齐）</strong></p>
<p align="left"><strong>1.1 </strong><strong>首先提出的问题</strong></p>
<ul>
<li>这个任务针对的需求点是什么？</li>
<li>用户/客户是谁？他们有什么特点？</li>
<li>该需求为用户/客户提供了什么价值？</li>
<li>这个需求的满意条件是什么？</li>
</ul>
<p align="left"><strong>1.2 </strong><strong>其次想到的是</strong></p>
<ul>
<li>这个需求属于哪个发布版本？</li>
<li>为什么这个版本需要开发这个需求？</li>
<li>这个版本的满意条件是什么？</li>
</ul>
<p align="left"><strong>1.3 </strong><strong>三次想到</strong></p>
<ul>
<li>这个需求属于哪个特性？</li>
<li>这个特性还有哪些其他需求？与当前需求的关系是什么？</li>
<li>为什么当前需求在当前版本的这个特性中是必须开发的？如果不开发会有什么影响？</li>
</ul>
<p align="left"><strong>1.3.1 </strong><strong>特性</strong><br>
特性（Feature）来自《软件需求 第三版》中的特性树（Feature Tree）。一个特性包含一个或多个逻辑上关联的系统功能，能够为用户提供价值。特性树展示了特性如何层层分解为更小的特性组，最终与具体的用户需求关联，引出功能需求。</p>
<p align="left">特性树为项目提供了一个简洁的视角，帮助管理者快速了解项目范围。它通常分为三个层次：一级（L1）、二级（L2）和三级（L3）特性。</p>
<p align="left"><strong>注意</strong>：特性是一个非敏捷开发概念，与敏捷开发有一定冲突。个人认为，特性树更适合产品开发。如果用户故事无法形成特性树，可能说明用户故事过于分散。</p>
<p align="left"><strong>1.4 </strong><strong>四次想到</strong></p>
<ul>
<li>当前开发业务的整体目标是什么？</li>
<li>版本是如何规划的？</li>
<li>当前目标由多少个特性组成？特别是与当前特性关联的特性有哪些？</li>
<li>目标的满意条件是什么？</li>


</ul>
<p align="left"><strong>1.5 </strong><strong>五次想到</strong></p>
<ul>
<li>如果继续深入思考，可以追溯到产品愿景、策略和企业愿景。由于这些内容较为宏观，此处不再展开。</li>


</ul>
<p align="left"><strong>1.6 </strong><strong>思考</strong></p>
<ol start="1">
<li>如果目标错误，做得越多，错得越多。开发人员需要对目标有深刻理解，否则容易事倍功半。</li>
<li>如果任务价值不高，即使完成得再好，也难以获得用户/客户的认可。</li>
<li>任务到开发者手中时，目标和价值往往已经模糊。PRD（产品需求文档）的一个常见问题是未能清晰传达目标和价值。</li>
<li>要做好任务，需要纵向和横向拉齐。纵向拉齐是对目标的追寻，横向拉齐是对关联需求的追寻。如果目标和关联需求需要刻意追寻，说明流程存在问题。</li>


</ol>
<div align="center"><hr align="center" noshade="noshade" size="1" width="100%">

</div>
<p align="left"><strong>2. </strong><strong>任务追溯</strong></p>
<p align="left"><strong>2.1 </strong><strong>针对当前任务</strong></p>
<ul>
<li>当前任务的依赖、假设和限制是什么？</li>
<li>当前任务的满意条件是什么？</li>
<li>有哪些开放性问题需要澄清？</li>


</ul>
<p align="left"><strong>2.2 </strong><strong>用户故事</strong><br>
<strong>2.2.1 </strong><strong>用户故事</strong><br>
拿到任务后，我会尝试通过用户故事来理解任务。用户故事通常包括：</p>
<ul>
<li>用户及特点：作为一个***用户，</li>
<li>推荐解决方案：我希望***，</li>
<li>价值：以便于***。</li>


</ul>
<p align="left">有时一个用户故事无法满足需求，可能需要多个用户故事。例如，一个功能可能有使用者和维护者，需要分别描述。</p>
<p align="left"><strong>2.2.2 </strong><strong>应用场景</strong><br>
用户故事较为抽象，我会尝试写一到三个应用场景，描述功能的具体使用场景。应用场景更形象，有助于在不同人员之间达成一致，并为问题解决提供依据。</p>
<p align="left"><strong>2.2.3 </strong><strong>满意条件</strong><br>
在用户故事和应用场景后，我会列出满意条件（验收条件）。满意条件需要与业务人员沟通并达成一致，建议不超过7条。</p>
<p align="left"><strong>2.3 </strong><strong>开发</strong><br>
<strong>2.3.1 </strong><strong>估算与计划</strong><br>
在敏捷开发中，通常使用斐波那契数进行估算。我会先制定一个简单的计划，作为后续调整的基础。</p>
<p align="left"><strong>2.3.2 </strong><strong>关联图</strong><br>
在开发前，我会绘制关联图，明确任务之间的关系和依赖。</p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.053934524070601855" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-17 19:08">2025-01-17 19:07</span>&nbsp;
<a href="https://www.cnblogs.com/Rong-">荣--</a>&nbsp;
阅读(<span id="post_view_count">17</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18677549" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18677549);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18677549', targetLink: 'https://www.cnblogs.com/Rong-/p/18677549', title: '当开发人员接到新任务后' })">举报</a>
</div>
        