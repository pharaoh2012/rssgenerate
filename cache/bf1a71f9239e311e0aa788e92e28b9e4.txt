
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/io-T-T/p/18659924" title="发布于 2025-01-08 15:45">
    <span role="heading" aria-level="2">python SQLAlchemy ORM——从零开始学习 02简单的增删查改</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h3 id="02-简单的增删查改">02 简单的增删查改</h3>
<p>前情提要：承接了01中的<code>engine</code>以及<code>User</code>类</p>
<h4 id="2-1-了解会话机制">2-1 了解会话机制</h4>
<ol>
<li>
<p>个人理解</p>
<p>在SQLAlchemy 增删查改中是依赖会话（Session）这个机制进行操作的，我个人的理解是用“会话“进行连接数据库周期的一系列管理操作（以下是ai生成对此会话的理解）</p>
</li>
<li>
<p>ai理解</p>
<p>在 SQLAlchemy 中，<strong><code>sessionmaker</code></strong> 是用于创建 <strong>会话（Session）</strong> 对象的工厂类，负责与数据库的交互。会话（Session）是 SQLAlchemy ORM 的核心部分，它管理与数据库的连接，并在一次操作中追踪对象的状态变化（如添加、修改、删除），同时处理事务的提交和回滚。</p>
<p><strong>会话（Session）的作用</strong></p>
<ol>
<li><strong>管理事务</strong>：会话负责开始、提交和回滚事务。通过会话，SQLAlchemy 可以在多个数据库操作间提供原子性（即要么全部成功，要么全部失败）。</li>
<li><strong>对象的持久化</strong>：会话在内存中追踪对象的状态变化，确保对象在数据库中得到正确的插入、更新或删除。</li>
<li><strong>查询管理</strong>：会话管理 SQL 查询的生命周期，包括从数据库获取数据，执行查询语句等。</li>
</ol>
</li>
</ol>
<h4 id="2-2-创建会话">2-2 创建会话</h4>
<ul>
<li>
<p>流程：</p>
<ol>
<li>导入对应包，依赖其中的 <code>sessionmaker</code></li>
<li>使用<a href="https://docs.sqlalchemy.org/en/20/orm/session_api.html#sqlalchemy.orm.sessionmaker" target="_blank" rel="noopener nofollow"><code>sessionmaker</code></a> 生成新的会话对象 <a href="https://docs.sqlalchemy.org/en/20/orm/session_api.html#sqlalchemy.orm.Session" target="_blank" rel="noopener nofollow"><code>Session</code></a> ，生成时绑定之前创建过的引擎</li>
<li>通过<code>Session</code>对象我们来构造对应的实例【可能有点绕，但一开始2调用的只是我们绑定好的类，我们还需要对这个对象创造实例来进行会话管理操作】</li>
</ol>
</li>
<li>
<p>官方的用例参考，他用的数据库类型不一样，但是思路是一样的：</p>
<p><strong>eg1：</strong></p>
<pre><code class="language-python">from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

# an Engine, which the Session will use for connection
# resources
engine = create_engine("postgresql+psycopg2://scott:tiger@localhost/")

Session = sessionmaker(engine)

with Session() as session:
    session.add(some_object)
    session.add(some_other_object)
    session.commit()
</code></pre>
<p><strong>eg2</strong>：这个就是后文使用的创建实例进行操作了</p>
<pre><code class="language-python">session = Session()
try:
    session.add(some_object)
    session.add(some_other_object)
    session.commit()
finally:
    session.close()
</code></pre>
<p><strong>eg3</strong>：</p>
<pre><code class="language-python">Session = sessionmaker(engine)

with Session.begin() as session:
    session.add(some_object)
    session.add(some_other_object)
# commits transaction, closes session
</code></pre>
</li>
<li>
<p>看完官方的实例，来写我们自己的会话管理了：</p>
<ol>
<li>简化版：</li>
</ol>
<pre><code class="language-python">from test_package_sql import engine, User #这个只是导入01文件提及的engine和User类，名字自己改一下
from sqlalchemy.orm import sessionmaker

Session = sessionmaker(bind=engine)#先通过时间创造器绑定引擎-&gt;创建这个会话类

session = Session()#根据我们自己的Session类创建属于我们自己的实例对象用于后续操作
</code></pre>
<ol start="2">
<li>
<p>详细版：</p>
<pre><code class="language-python">from sqlalchemy import create_engine, Column, Integer, Float, String
from sqlalchemy.orm import declarative_base

from sqlalchemy.orm import sessionmaker

local_url = "sqlite:///02_test.db"
engine = create_engine(url=local_url)
local_base = declarative_base()
class User(local_base):
    __tablename__ = "User"
    id = Column(Integer, primary_key=True)
    name = Column(String)
    age = Column(Integer)

local_base.metadata.create_all(engine)
</code></pre>
</li>
</ol>
</li>
</ul>
<h4 id="2-3-增">2-3 增</h4>
<ol>
<li>
<p>事前bb【觉得烦的可以略过】</p>
<p>在进行增删查改前，必须再强调一下这个会话机制的流程：<strong>创建会话-&gt;进行管理操作（包括但不不限于增删查改）-&gt;提交会话管理</strong>【注意，提交时的更改的只是当前会话状态，言下之意，你提交了一次再修改，没提交那还是之前提交的状态】</p>
</li>
<li>
<p>流程介绍【增加单个<strong>User对象</strong>】</p>
<ul>
<li>
<p>创建需要增添的实例——<strong>必须与User类相匹配</strong>，就是说是User类对象</p>
</li>
<li>
<p>使用对话机制的 <code>session.add</code>接口进行添加</p>
</li>
<li>
<p>添加若干个后，结束则使用 <code>session.commit()</code> 进行修改后的提交</p>
<p><em>主函数直接调用就好，我这样子写好封装，看得也清楚，很简单对吧</em></p>
</li>
</ul>
<pre><code class="language-python">def add_one():
    User1 = User(name="arthur",age=18)
    User2 = User(name="lihua",age=21)
    session.add(User1)
    session.add(User2)
    session.commit()
</code></pre>
<ul>
<li>
<p>增添效果如下【db为空时】：</p>
<p><img src="https://img2024.cnblogs.com/blog/3244923/202501/3244923-20250108154326499-1441703222.png" alt="image-20250108000748412" loading="lazy"></p>
<p>下一集我再对如何显示数据库做一个解释吧，毕竟是从零开始（bushi）</p>
</li>
</ul>
</li>
<li>
<p>增添多个对象【或者是User_list】</p>
<p>只需要修改接口以及传入参数就好了，使用 <code>session.add_all()</code>接口</p>
<pre><code class="language-python">def add_Users():
    User1 = User(name="arthur", age=18)
    User2 = User(name="lihua", age=21)
    Users = [User1,User2]
    session.add_all(Users)
    session.commit()
</code></pre>
<ul>
<li>explain：Users就是User 类（项目）的可迭代对象（列表），让我们看看官方对于这个接口的解释：</li>
</ul>
<blockquote>
<p><em>method</em> <a href="https://docs.sqlalchemy.org/en/20/orm/session_api.html#sqlalchemy.orm.Session" target="_blank" rel="noopener nofollow"><code>sqlalchemy.orm.Session.</code></a><strong>add_all</strong>(<em>instances: Iterable[object]</em>) → None</p>
<p>Add the given collection of instances to this <a href="https://docs.sqlalchemy.org/en/20/orm/session_api.html#sqlalchemy.orm.Session" target="_blank" rel="noopener nofollow"><code>Session</code></a>.</p>
<p>添加实例到Seesion会话中。这句话可能不太好理解，看看他的传参解释其实就很直观，其实就是传入可迭代对象XD</p>
</blockquote>
<ul>
<li>
<p>output：</p>
<p><img src="https://img2024.cnblogs.com/blog/3244923/202501/3244923-20250108154327499-477487735.png" alt="image-20250108001929442" loading="lazy"></p>
<p><em>就结束了，其实增删改查不难，接口已经抽象出来了，记住逻辑就好</em></p>
</li>
</ul>
</li>
</ol>
<h4 id="2-4-查">2-4 查</h4>
<p>还是得先说查啊，不然没法删啊0v0</p>
<ol>
<li>
<p>接口介绍</p>
<p><code>q = session.query(SomeMappedClass)</code></p>
<ul>
<li>
<p>参数介绍：</p>
<p><code>SomeMappedClass</code>：所映射的类</p>
<p><code>q</code>：返回的类型是<code>Query[Any]</code>，即任何满足要求的数据</p>
</li>
<li>
<p>常用后缀</p>
<ol>
<li><code>.all()</code>：以列表的形式传回搜索的结果</li>
</ol>
<pre><code class="language-python">session.query(User).all()#用来返回User表的所有数据
</code></pre>
<ol start="2">
<li>
<p><a href="https://docs.sqlalchemy.org/en/14/orm/query.html#sqlalchemy.orm.Query" target="_blank" rel="noopener nofollow"><code>sqlalchemy.orm.Query.</code></a><strong>filter_by</strong>(* *kwargs)<a href="https://docs.sqlalchemy.org/en/14/orm/query.html#sqlalchemy.orm.Query.filter_by" target="_blank" rel="noopener nofollow">¶</a> 这个是常用的简化版的搜索接口。<strong>！注意他可以同时接收多个变量,且只使用等值过滤条件</strong></p>
<pre><code class="language-python">results = session.query(User).filter_by(ag,e=21)
results = session.query(User).filter_by(age=21，name="lihua")
</code></pre>
</li>
<li>
<p><code>session.query(Model).filter(condition)</code></p>
<p>运行使用多个复杂的表达式，支持更多条件类型，<strong>支持手动连接多个条件</strong>：如果需要多个条件，可以使用 <code>AND</code> 或 <code>OR</code> 手动连接条件。但就说注意对比时需要<code>User.xxx</code>--你自己定义的类表</p>
<pre><code class="language-python">results = session.query(User).filter(User.name == 'arthur')#不止支持== ，还支持其他比较运算符
</code></pre>
</li>
<li>
<p><code>.one_or_none()</code></p>
<p>用于查找<strong>是否只有一个</strong>或者<strong>none个</strong>，找到多个则会报错</p>
</li>
</ol>
</li>
</ul>
<ol start="2">
<li>
<p>编码</p>
<p>其实把上面的看懂了就已经学会了如何搜索了</p>
<ul>
<li>
<p>简单搜索法：</p>
<pre><code class="language-python">def search():
    results = session.query(User).filter_by(age=21)
    for result_one in results:
        print(result_one)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3244923/202501/3244923-20250108154326066-39507940.png" alt="image-20250108150708363" loading="lazy"></p>
</li>
<li>
<p>使用传统接口更多扩展的的搜索：</p>
<pre><code class="language-python">def other_way_search():
    results = session.query(User).filter(User.name == 'arthur')
    for result_one in results:
        print(result_one)
</code></pre>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<h4 id="2-5-删">2-5 删</h4>
<ul>
<li>删除主要运用到 <code>session.delete(object)</code>接口，主要有以下两种用法：</li>
</ul>
<ol>
<li>删除单个对象：</li>
</ol>
<pre><code class="language-python">session.delete(object)#object是单个对象
session.commit()
</code></pre>
<ol start="2">
<li>
<p>删除多个满足条件的对象</p>
<pre><code class="language-python">session.query(Model).filter(condition).delete()
session.commit()
</code></pre>
<p>流程大概是：<strong>找到想要删除的对象-&gt;删除-&gt;提交</strong></p>
</li>
</ol>
<ul>
<li>
<p>code：</p>
<pre><code class="language-python">def remove_one():#单个
    results = session.query(User).filter_by(age=21).first()#找到第一个
    session.delete(results)
    session.commit()
</code></pre>
<p>原数据库：</p>
<p><img src="https://img2024.cnblogs.com/blog/3244923/202501/3244923-20250108154325974-1775570302.png" alt="image-20250108151915387" loading="lazy"></p>
<p>删除后：</p>
<p><img src="https://img2024.cnblogs.com/blog/3244923/202501/3244923-20250108154326616-498309847.png" alt="image-20250108151952755" loading="lazy"></p>
<pre><code class="language-python">def remove_all():#多个
    results = session.query(User).filter_by(name='arthur').delete()
    session.commit()
</code></pre>
<p>删除后：</p>
<p><img src="https://img2024.cnblogs.com/blog/3244923/202501/3244923-20250108154339159-1683584448.png" alt="image-20250108152247865" loading="lazy"></p>
</li>
<li>
<p>删除尾声：</p>
<p>删除就结束了，最后各位可以尝试把lihua也删除，然后根据上面的教程添加再添加4个User信息，其中要有两个age、name不一样</p>
<p>参考code：</p>
<pre><code class="language-python">def add_4new_user():
    User1 = User(name='arthur', age=18)
    User2 = User(name='Abigail Williams',age=14)
    User3 = User(name='caster', age=21)
    User4 = User(name='Lilith', age=22)
    users = [User1,User2,User3,User4]
    session.add_all(users)
    session.commit()
</code></pre>
<p>结果：</p>
<p><img src="https://img2024.cnblogs.com/blog/3244923/202501/3244923-20250108154331375-256322814.png" alt="image-20250108153103874" loading="lazy"></p>
</li>
</ul>
<h4 id="2-6-改">2-6 改</h4>
<p>改其实最简单，找到对应的<code>object</code>然后修改，提交即可，非常朴实无华</p>
<pre><code class="language-python">def update_f():
    caster = session.query(User).filter_by(name="caster").one_or_none()#找到一个caster的信息
    caster.age = 18			#修改就好啦
    session.commit()		#记得提交
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3244923/202501/3244923-20250108154326152-861911700.png" alt="image-20250108153851400" loading="lazy"></p>
<p>part2结束，感谢观看，读者可以自行实践一下增删查改，最好融合起来一起实践</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.4408369924641204" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-08 15:45">2025-01-08 15:45</span>&nbsp;
<a href="https://www.cnblogs.com/io-T-T">io_T_T</a>&nbsp;
阅读(<span id="post_view_count">110</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18659924" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18659924);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18659924', targetLink: 'https://www.cnblogs.com/io-T-T/p/18659924', title: 'python SQLAlchemy ORM——从零开始学习 02简单的增删查改' })">举报</a>
</div>
        