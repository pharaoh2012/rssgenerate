
        <div class="postTitle">
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mysticbinary/p/18860382" title="发布于 2025-05-05 23:31">
    <span role="heading" aria-level="2">基于口令的密码—PBE</span>
    

</a>

        </div>
        <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p></p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#流程" rel="noopener nofollow">流程</a><ul><li><a href="#加密流程" rel="noopener nofollow">加密流程</a></li><li><a href="#解密流程" rel="noopener nofollow">解密流程</a></li></ul></li><li><a href="#盐的作用" rel="noopener nofollow">盐的作用</a></li><li><a href="#通过拉伸来改良pbe的安全性" rel="noopener nofollow">通过拉伸来改良PBE的安全性</a></li><li><a href="#如何生成安全口令的建议" rel="noopener nofollow">如何生成安全口令的建议</a></li></ul></div><p></p>
<hr>
<p>定义：<br>
PBE是一种根据口令生成密钥并用该密钥进行加密的方法。<br>
加密和解密都使用同一个密钥。</p>
<p>口令一词多义：</p>
<ol>
<li>口头话，如喊口令；</li>
<li>暗号，如对口令；</li>
<li>专指密码，如邮箱口令(本文指这个，一般由英文大小写字母和数字和特殊符号组成)。</li>
</ol>
<p><strong>为什么需要PBE？</strong><br>
我们在使用数据的加密的时候，都难以避免地要涉及到密钥的保存，如果密钥如果明文地保存在电脑上那么很容易就会被别人盗取，那么如果我们使用另外一个随机密钥去加密会话密钥的话，那么怎么保证另一个密钥的安全？很明显这样下去就会无线循环了。</p>
<p>这个时候，我们需要考虑如何安全地保护密钥。对于我们人来说，我们不喜欢去记数字和字符，但是我们可以记下些短的口令，这比起动作百来位的密钥来说可好记多了，所以就出现了PBE（Password Based Encryption，基于口令加密）。</p>
<p>我们通过对<strong>口令</strong>和一些<strong>随机数（salt）</strong> 进行Hash加工，将它转变为一个<strong>加密会话密钥的密钥（KEK）</strong>，在生成一个随机的<strong>会话密钥（CEK）</strong> ，CEK加密之后，将加密后的CEK密钥进行保存。这个生成的加密密钥的密钥（KEK）就可以将其抛弃了，因为留在电脑上有泄露密钥的风险。</p>
<p>我们需要再次使用<strong>会话密钥（CEK）</strong> 的话，只要将随机数(之前已经保存）和我们脑子中记住的口令进行相同的操作，就可以解密出<strong>会话密钥</strong>。别人没有我们脑子中的口令就不能拿到会话密钥。</p>
<h1 id="流程">流程</h1>
<h2 id="加密流程">加密流程</h2>
<p><img src="https://img2024.cnblogs.com/blog/1552062/202505/1552062-20250505210735001-1200663766.png" alt="image" loading="lazy"></p>
<p>PBE加密包括下列3个步骤：</p>
<ol>
<li>
<p>生成 主密钥（KEK） ；<br>
伪随机数生成器会生成一个盐（随机数），将<code>盐</code>和<code>口令</code>一起输入单向散列函数，得到的<code>散列值</code>就是<code>用来加密密钥的密钥（KEK）</code>。</p>
</li>
<li>
<p>生成 会话密钥（CEK） 并 加密；<br>
伪随机数生成器会生成一个随机数，这个<code>随机数</code>就是<code>用来加密消息的密钥（CEK）</code>;<br>
用KEK加密CEK得到CEK密文；<br>
将<code>盐</code>和<code>CEK密文</code>一起保存到安全的地方；<br>
KEK可以丢弃掉，因为通过盐和口令可以重建KEK。</p>
</li>
<li>
<p>加密消息。<br>
用<code>CEK</code>对<code>消息</code>进行加密得到<code>消息的密文</code>。</p>
</li>
</ol>
<h2 id="解密流程">解密流程</h2>
<p><img src="https://img2024.cnblogs.com/blog/1552062/202505/1552062-20250505210746451-773591055.png" alt="image" loading="lazy"></p>
<p>PBE解密包括下列3个步骤：</p>
<ol>
<li>重建KEK；</li>
<li>解密会话密钥；</li>
<li>解密消息。</li>
</ol>
<p>详细流程反推回来即可。</p>
<h1 id="盐的作用">盐的作用</h1>
<p><strong>盐</strong>是用来<strong>防御字典攻击</strong>的。<br>
字典攻击是一种<strong>事先</strong>进行计算并准备好候选密钥列表的方法。</p>
<p>事先指在攻击者窃取到加密的会话密钥之前，就准备好了大量的候选KEK。</p>
<hr>
<h1 id="通过拉伸来改良pbe的安全性">通过拉伸来改良PBE的安全性</h1>
<p>在生成KEK时，通过<strong>多次</strong>使用单向散列函数就可以<strong>提高安全性</strong>。<br>
对于用户来说，执行1000次单向散列函数并不会带来多大的负担，然而对于主动攻击者来说，这可是一个很大的负担。</p>
<hr>
<h1 id="如何生成安全口令的建议">如何生成安全口令的建议</h1>
<ol>
<li>使用只有自己才能知道的信息；</li>
<li>将多个不同的口令分开使用；</li>
<li>有效利用笔记；</li>
<li>理解口令的局限性；</li>
<li>使用口令生成和管理工具。</li>
</ol>

</div>
<div class="clear"></div>

        <div class="postDesc">posted on 
<span id="post-date" data-last-update-days="0.11919552020601852" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-06 09:28">2025-05-05 23:31</span>&nbsp;
<a href="https://www.cnblogs.com/mysticbinary">Mysticbinary</a>&nbsp;
阅读(<span id="post_view_count">66</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18860382);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18860382', targetLink: 'https://www.cnblogs.com/mysticbinary/p/18860382', title: '基于口令的密码—PBE' })">举报</a>
</div>
    