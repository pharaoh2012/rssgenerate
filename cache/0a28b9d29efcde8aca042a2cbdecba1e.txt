
		<h2>
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/echolun/p/18934437" title="发布于 2025-06-18 11:11">
    <span role="heading" aria-level="2">Review-Gate MCP，让你的 cursor request 次数翻 5 倍</span>
    

</a>

		</h2>
		<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1213309/202506/1213309-20250618110357393-2062169768.png" class="lazyload"></p>
<h1 id="最新资讯">最新资讯：</h1>
<p>cursor pro 改为无限制，但某些模型（新模型？）依旧限制，看起来是一个黑盒，具体没细说，因此你可以考虑装或者不装本文的 MCP。<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1213309/202506/1213309-20250618110411293-1727683650.png" class="lazyload"></p>
<p>另外，本文属于前端社区的一次分享，只是顺带迁移到个人博客这里。</p>
<h1 id="一前言">一、前言</h1>
<p>目前我们 biz 版本每个每月 500 次快请求（可以在 <a href="https://www.cursor.com/cn/dashboard" target="_blank" rel="noopener nofollow">https://www.cursor.com/cn/dashboard</a> 查看额度），一旦请求用光后续聊天就会进入慢速池，体验就非常差了，考虑到现在大家编码、PPT 甚至有时候给 AI 提供情绪价值扯扯加长，500 次就显得没那么多了，因此我们需要考虑将 500 次数尽可能变得更多。<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1213309/202506/1213309-20250618110419023-1375477730.png" class="lazyload"></p>
<p>事实上我们与 Cursor 的每次对话最大可以调用 25 次工具，其中包括调用控制台、MCP 等工具，但大部分简单的问题往往还没让 cursor 达到最大调用上线就提前结束了，所以才有现在我们拦截 cursor 一次对话，将其拓展成额外对话，除非我们主动说 done，或者对话将一直持续到调用上限才算一次消耗，于是 500 次对话我们可以成功翻倍，再也不用担心次数消耗的问题了！！！<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1213309/202506/1213309-20250618110432348-2036707028.png" class="lazyload"></p>
<h1 id="二开始安装">二、开始安装</h1>
<h3 id="21-安装项目和服务">2.1 安装项目和服务</h3>
<p>Review-Gate 依赖了一个 Python mcp 包，此包要求 Python 版本在 3.10 及以上，因此请大家先保证本地有安装 Python，以及对应版本正确。<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1213309/202506/1213309-20250618110548234-828769846.png" class="lazyload"></p>
<p>考虑到非研发同学可能没有安装，建议直接找研发同学帮忙安装，或者直接问 AI（AI 那么强大），注意安装的版本即可，这里不过多赘述，接下来开始正常安装：<br>
先执行如下命令拷贝一个 mcp 项目仓库（不用嵌套在项目里，放大家日常用的工作区文件夹即可）：</p>
<pre><code>git clone https://github.com/LakshmanTurlapati/Review-Gate.git
</code></pre>
<p>之后执行如下两个命令：</p>
<pre><code>// 进入上述项目的 Review-Gate/V2 目录
cd Review-Gate/V2

// 再执行
./install.sh
</code></pre>
<p>此时如果提示找不到 mcp 服务，那可能是大家 Python 版本问题，大家可以运行如下命令，一键帮助大家安装可用的 Python：</p>
<pre><code>#!/bin/bash
echo "🔧 修复虚拟环境 Python 版本..."

cd ~/cursor-extensions/review-gate-v2

# 删除旧环境
echo "删除旧的虚拟环境..."
rm -rf venv

# 找到正确的 Python
PYTHON_CMD=""
for cmd in python3.12 python3.11 python3.10 /usr/bin/python3; do
    if command -v $cmd &amp;&gt; /dev/null; then
        VERSION=$($cmd -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
        if [[ $(echo "$VERSION &gt;= 3.10" | bc -l) -eq 1 ]]; then
            PYTHON_CMD=$cmd
            echo "✅ 找到合适的 Python: $cmd (版本 $VERSION)"
            break
        fi
    fi
done

if [[ -z "$PYTHON_CMD" ]]; then
    echo "❌ 找不到 Python 3.10+ 版本"
    exit 1
fi

# 创建新环境
echo "创建新的虚拟环境..."
$PYTHON_CMD -m venv venv

# 激活并验证
source venv/bin/activate
echo "✅ 新虚拟环境 Python 版本: $(python --version)"

# 安装依赖
pip install --upgrade pip
pip install mcp

echo "🎉 修复完成！"
deactivate
</code></pre>
<p>如果安装成功，大家应该可以看到如下信息，有非常明显的 successfully，以及会帮你新开一个 cursor 窗口，到这里不用管，我们继续安装插件。<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1213309/202506/1213309-20250618110609593-430414225.png" class="lazyload"></p>
<h3 id="22-安装-mcp-插件">2.2 安装 mcp 插件</h3>
<p>之后，请遵守如下规则进行插件安装：<br>
● 启动 Cursor IDE 应用程序，按下 Cmd+Shift+P<br>
● 输入 Extensions:Install from VSIX，然后回车<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1213309/202506/1213309-20250618110619655-1225378493.png" class="lazyload"><br>
● 此时会打开一个文件选择器，注意上面成功的日志中插件的路径，我们找到此插件选中，点击确认即可，正常会提示你插件安装成功。<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1213309/202506/1213309-20250618110630167-1142494040.png" class="lazyload"></p>
<p>这里我以我本地的路径做个演示<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1213309/202506/1213309-20250618110639136-1098729312.png" class="lazyload"></p>
<h3 id="33-添加-project-rule">3.3 添加 project rule</h3>
<p>然后我们打开 cursor 设置，选择 project rule，点击 add<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1213309/202506/1213309-20250618110650871-1055691093.png" class="lazyload"></p>
<p>需要注意的是，rule 命令不允许大写空格，所以你可以复制 review-gate-v2 这个名称回车即可，然后复制如下链接的 rule 内容<br>
<a href="https://github.com/LakshmanTurlapati/Review-Gate/blob/main/V2/ReviewGateV2.mdc" target="_blank" rel="noopener nofollow">https://github.com/LakshmanTurlapati/Review-Gate/blob/main/V2/ReviewGateV2.mdc</a><br>
记得修改应用规则为 always ，之后保存。<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1213309/202506/1213309-20250618110700148-1402986236.png" class="lazyload"></p>
<p>现在让我们回到 mcp 服务，需要确保这个 mcp 是绿色执行中，有时候 cursor 响应比较慢，我们可以多切换几次开关，发现变绿就是在运行。<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1213309/202506/1213309-20250618110712311-2065146976.png" class="lazyload"></p>
<p>然后我们完整退出 cursor，确保 cursor 重新启动。</p>
<h1 id="三关于使用">三、关于使用</h1>
<p>现在，让我们新开一个聊天窗，随便输入什么内容，正常 cursor 在回答完我们的问题后就会调用上述配置的 mcp，基于插件帮我们新开一个窗口，如下图（简单来说，每次对话我们都需要正常基于 cursor 提问来唤醒本次额外对话，除非超时或主动结束才需要开启下一次）：<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1213309/202506/1213309-20250618110722315-1853051608.png" class="lazyload"></p>
<p>需要注意的是，此 MCP 配置了每次对话等待时长为 5 分钟，如果 5 分钟没有任何操作，mcp 会主动结束此时临时窗口对话，并总结此次对话的信息。<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1213309/202506/1213309-20250618110729896-923775427.png" class="lazyload"></p>
<p>我们也可以在插件窗口输入 done 完成这次对话。<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1213309/202506/1213309-20250618110738830-577884135.png" class="lazyload"></p>
<h3 id="注意1">注意1：</h3>
<p>我发现有同学反馈，每次 cursor 调用 MCP 后都需要手动点击 run 才能唤醒对话框（在下图的右边），这是因为我们没开启 cursor 的自动执行设置<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1213309/202506/1213309-20250618110747917-300199643.png" class="lazyload"></p>
<p>我们可以打开设置，找到如下并开启，后续每次调用就会自动执行 mcp 唤醒对话框啦。<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1213309/202506/1213309-20250618110754481-1127150487.png" class="lazyload"></p>
<h3 id="注意2">注意2：</h3>
<p>cursor 不同模型一次提问的 request 消耗不同，比如 Claude 3.5 每次提问消耗 1 个 request，而 max 类的模型可能消耗 2 个，我们增加这个 MCP 也是希望大家尽可能用更好的模型，从而不要使用 auto 或者更低的模型。<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1213309/202506/1213309-20250618110800011-1077790867.png" class="lazyload"></p>
<p>至此分享结束。<br>
最后，好的工具也因为世界上优秀的开源开发者，如果大家方便也可以给原作者 GitHub 项目点个 star。<br>
<a href="https://github.com/LakshmanTurlapati/Review-Gate" target="_blank" rel="noopener nofollow">https://github.com/LakshmanTurlapati/Review-Gate</a></p>

</div>
<div class="clear"></div>

		<p class="postfoot">
			posted on 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-18 11:11">2025-06-18 11:11</span>&nbsp;
<a href="https://www.cnblogs.com/echolun">听风是风</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18934437);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18934437', targetLink: 'https://www.cnblogs.com/echolun/p/18934437', title: 'Review-Gate MCP，让你的 cursor request 次数翻 5 倍' })">举报</a>

		</p>
	