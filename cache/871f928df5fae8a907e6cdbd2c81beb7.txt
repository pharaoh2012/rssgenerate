
        <div class="postTitle">
            <h1><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenyishi/p/18618354" title="发布于 2024-12-20 09:33">
    <span role="heading" aria-level="2">Winform 使用WebView2 开发现代应用</span>
    

</a>
</h1>
        </div>
        <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h2>使用 WebView2 开发现代应用</h2>
<p>WebView2 是 Microsoft 提供的一种嵌入式浏览器控件，基于 Edge (Chromium) 引擎。它允许开发者将现代 Web 技术（如 HTML、CSS 和 JavaScript）与桌面应用相结合，从而构建强大、灵活的用户界面。</p>
<p>本文将介绍 WebView2 的基本使用，并重点讲解以下几个重要功能：</p>
<ul>
<li><code>NewWindowRequested</code></li>
<li><code>WebResourceResponseReceived</code></li>
<li><code>AddWebResourceRequestedFilter</code></li>
<li><code>WebResourceRequested</code></li>
</ul>
<h3>环境准备</h3>
<ol>
<li>
<p>安装 WebView2 Runtime： WebView2 需要运行时支持，用户设备必须安装 WebView2 Runtime。如果未安装，可以通过以下链接下载：<a href="https://go.microsoft.com/fwlink/p/?LinkId=2124703" rel="noopener nofollow">WebView2 Runtime</a>。</p>
</li>
<li>
<p>引入必要的 NuGet 包： 在 Visual Studio 中，添加 <code>Microsoft.Web.WebView2</code> NuGet 包。</p>
</li>
<li>
<p>初始化 WebView2： 创建 WebView2 控件并确保其已正确初始化。以下代码检查并安装 WebView2 Runtime：</p>
</li>
</ol>
<pre><code class="language-csharp">private static async Task&lt;bool&gt; InitializeWebView2()
{
    try
    {
        string version = CoreWebView2Environment.GetAvailableBrowserVersionString();
        return !string.IsNullOrEmpty(version);
    }
    catch
    {
        // 引导用户安装 WebView2 Runtime
        MessageBox.Show("WebView2 Runtime 未安装。请安装后重试。", "错误", MessageBoxButtons.OK, MessageBoxIcon.Error);
        return false;
    }
}
</code></pre>
<h3>创建 WebView2 控件</h3>
<p>以下代码展示了如何创建 WebView2 控件并初始化其核心功能：</p>
<pre><code class="language-csharp">public static async Task&lt;WebView2&gt; CreateWebView()
{
    if (!await InitializeWebView2())
    {
        return null;
    }

    WebView2 webView2 = new WebView2
    {
        Dock = DockStyle.Fill
    };

    await webView2.EnsureCoreWebView2Async(null);

    // 注册事件
    webView2.CoreWebView2.NewWindowRequested += CoreWebView2_NewWindowRequested;
    webView2.CoreWebView2.WebResourceResponseReceived += CoreWebView2_WebResourceResponseReceived;

    // 添加请求过滤器
    webView2.CoreWebView2.AddWebResourceRequestedFilter("*://www.example.com/*", CoreWebView2WebResourceContext.Document);
    webView2.CoreWebView2.WebResourceRequested += WebView2_WebResourceRequested;

    return webView2;
}
</code></pre>
<h3>拦截新窗口请求：<code>NewWindowRequested</code></h3>
<p>默认情况下，WebView2 会尝试在新窗口中打开弹出链接。通过 <code>NewWindowRequested</code> 事件，我们可以拦截弹窗行为并将新内容加载到当前窗口。</p>
<p><strong>示例代码：</strong></p>
<pre><code class="language-csharp">private static void CoreWebView2_NewWindowRequested(object sender, CoreWebView2NewWindowRequestedEventArgs e)
{
    if (sender is CoreWebView2 webView)
    {
        e.Handled = true; // 阻止默认弹窗行为
        webView.Navigate(e.Uri); // 在当前 WebView2 中加载新页面
    }
}
</code></pre>
<h3>拦截和处理网络响应：<code>WebResourceResponseReceived</code></h3>
<p>通过 <code>WebResourceResponseReceived</code>，我们可以查看并分析所有网络响应。例如，可以记录某些请求的响应时间或检查响应头信息。</p>
<p><strong>示例代码：</strong></p>
<pre><code class="language-csharp">private static void CoreWebView2_WebResourceResponseReceived(object sender, CoreWebView2WebResourceResponseReceivedEventArgs e)
{
    var uri = e.Request.Uri;
    Console.WriteLine($"Response received for: {uri}");

    e.Response.Headers.ToList().ForEach(header =&gt;
    {
        Console.WriteLine($"Header: {header.Key} - {header.Value}");
    });
}
</code></pre>
<h3>添加请求过滤器：<code>AddWebResourceRequestedFilter</code></h3>
<p>为了提高性能并精确控制，WebView2 提供了 <code>AddWebResourceRequestedFilter</code> 方法，用于定义需要监听的请求类型和范围。</p>
<p><strong>使用方法：</strong></p>
<pre><code class="language-csharp">webView.CoreWebView2.AddWebResourceRequestedFilter(
    "*://www.example.com/*", // 目标 URL 模式
    CoreWebView2WebResourceContext.Document // 资源类型：仅文档
);
</code></pre>
<h3>拦截网络请求：<code>WebResourceRequested</code></h3>
<p>通过 <code>WebResourceRequested</code> 事件，可以拦截网络请求并进行处理，例如修改请求头或阻止特定请求。</p>
<p><strong>示例代码：</strong></p>
<pre><code class="language-csharp">private static async void WebView2_WebResourceRequested(object sender, CoreWebView2WebResourceRequestedEventArgs e)
{
    var request = e.Request;

    // 检查是否有特定 Cookie
    if (sender is CoreWebView2 webView)
    {
        var cookies = (await webView.CookieManager.GetCookiesAsync(request.Uri))
                        .Where(c =&gt; c.Name == "SpecificCookie").ToList();

        if (cookies.Any())
        {
            // 删除特定 Cookie
            cookies.ForEach(c =&gt; webView.CookieManager.DeleteCookie(c));
        }
    }

    Console.WriteLine($"Request intercepted: {request.Uri}");
}
</code></pre>
<h3>总结</h3>
<p>WebView2 是一个强大的控件，为开发者提供了丰富的功能来控制和定制 Web 资源的加载行为。通过本文介绍的事件和方法，你可以：</p>
<ul>
<li>阻止默认弹窗行为 (<code>NewWindowRequested</code>)</li>
<li>分析网络响应 (<code>WebResourceResponseReceived</code>)</li>
<li>精确过滤需要拦截的请求 (<code>AddWebResourceRequestedFilter</code>)</li>
<li>修改或阻止网络请求 (<code>WebResourceRequested</code>)</li>
</ul>
<p>借助这些功能，可以更灵活地将 Web 内容集成到桌面应用程序中，满足各种业务需求。</p>
</div>
<div class="clear"></div>

        <div class="postDesc">posted on 
<span id="post-date" data-last-update-days="3.226449547976852" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-20 09:33">2024-12-20 09:33</span>&nbsp;
<a href="https://www.cnblogs.com/chenyishi">chester·chen</a>&nbsp;
阅读(<span id="post_view_count">985</span>)&nbsp;
评论(<span id="post_comment_count">10</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18618354" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18618354);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18618354', targetLink: 'https://www.cnblogs.com/chenyishi/p/18618354', title: 'Winform 使用WebView2 开发现代应用' })">举报</a>
</div>
    