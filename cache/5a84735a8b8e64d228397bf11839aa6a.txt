
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/qq21497936/p/18623411" title="发布于 2024-12-23 10:39">
    <span role="heading" aria-level="2">Linux驱动开发笔记（七）：操作系统MMU介绍，操作系统操作寄存器的原理和Demo</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div class="cl-preview-section">
<h1>前言</h1>
</div>
<div class="cl-preview-section">
<p>  做过单片机的都知道，写驱动是直接代码设置和读取寄存器来控制外设实现基本的驱动功能，而linux操作系统上是由MMU（内存管理单元）来控制，MMU实现了虚拟地址与芯片物理地址的对应，设置和获取MMU地址就是设置和获取映射的物理地址，从而跟单片机一样实现与物理硬件的驱动连接。<br>  本篇就是描述了MMU的基本实现原理和Demo。</p>

</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="Demo_6"></a>Demo</h1>

</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/ba5ef8d609384cbe9b7daff25c86bc94.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="MMU_12"></a>内存管理单元（简称MMU）</h1>

</div>
<div class="cl-preview-section">
<p>  MMU是Memory Management Unit的缩写，中文名是内存管理单元，有时称作分页内存管理单元（英语：paged memory management unit，缩写为PMMU）。它是一种负责处理中央处理器（CPU）的内存访问请求的计算机硬件。<br>  它的功能包括虚拟地址到物理地址的转换（即虚拟内存管理）、内存保护、中央处理器高速缓存的控制，在较为简单的计算机体系结构中，负责总线的仲裁以及存储体切换（bank switching，尤其是在8位的系统上）。<br>  具体如何管理内存是比较专业的，还有很多方法，这些是内存管理相关的技术，但是我们写驱动，不需要接触这些，虚拟地址到物理地址的转换大致如下：<br>  <img src="https://i-blog.csdnimg.cn/direct/789d6d484c4d4dfd83551b4aa428e2f1.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">
<p>  只需要知道如何映射/取消映射物理地址到虚拟地址即可，这样我们可以通过设置虚拟地址来实现设置芯片物理地址，通过获取虚拟机地址的数据来获取芯片物理地址的寄存器数据，这样就跟操作单片机一样，就是包了一层（这里写过单片机裸机直接操作寄存器跑的很容易理解）。<br>  这里，试用虚拟机ubuntu，我们写2个驱动来，来用程序A写入一个数据到驱动A，A写入一个特定的物理地址d，B来读取特定的物理地址d从而获取到。（PS：此处，虚拟机，这么使用是有风险的，如果物理地址被其他程序映射使用了，就会导致它的数据在其他程序中的修改，在这里，我们主要是为了在虚拟机ubuntu上能够实现这个原理过程）。</p>

</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="linux_23"></a>单片机（驱动）开发与linux驱动开发转化过程</h1>

</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/b3321b12f955491c836f514a62c1bad1.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">
<p>  单片机开发跨入linux驱动开发：</p>

</div>
<div class="cl-preview-section">
<ul>
<li>熟悉linux系统（脚本，基本程序开发）</li>
<li>熟悉linux烧写</li>
<li>熟悉linux交叉编译</li>
<li>熟悉linux文件系统制作和编译</li>
<li>熟悉linux驱动编译</li>
<li>熟悉linux物理地址映射</li>
<li>熟悉linux一般开源库程序的编译移植（configre、make、make install）</li>
<li>高级的makefile、系统编程等相关的就需要随着时间累积学习了<br>  概括起来，原来单片机就是直接操作寄存器，而linux需要通过内核的设备框架来注册设备驱动，驱动中用虚拟地址映射物理地址，通过写程序操作驱动虚拟机地址来实现操作物理地址。</li>

</ul>

</div>
<div class="cl-preview-section">
<h2><a id="_36"></a>概述</h2>

</div>
<div class="cl-preview-section">
<p>  linux驱动中用虚拟地址映射物理地址，通过写程序操作驱动虚拟机地址来实现操作物理地址。<br>不出意外，内核提供了物理地址到虚拟地址的映射。</p>

</div>
<div class="cl-preview-section">
<h1><a id="_39"></a>内核函数</h1>

</div>
<div class="cl-preview-section">
<p>  头文件是：linux/uaccess.h（我们这是ubuntu，不是arm）<br>  可以在内核根目录下搜索下：</p>

</div>
<div class="cl-preview-section">
<pre><code class="prism language-shell"><span class="token function">find <span class="token builtin class-name">. <span class="token parameter variable">-type f <span class="token parameter variable">-exec <span class="token function">grep <span class="token parameter variable">-l <span class="token string">"ioremap(phys" <span class="token punctuation">{<span class="token punctuation">} <span class="token punctuation">\<span class="token punctuation">;
</span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/4d55ff210b664549bc7029e8e46618ef.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<h2><a id="ioremap_47"></a>ioremap函数：把物理地址转换成虚拟地址</h2>
</div>
<div class="cl-preview-section">
<p>  成功返回虚拟地址的首地址，失败返回NULL。（注意：同一物理地址只能被映射一次，多次映射会失败返回）。<br>  <img src="https://i-blog.csdnimg.cn/direct/2c20a421bd3f4c13b0d20cbddb2c34f3.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">
<pre><code class="prism language-c"><span class="token keyword">void __iomem <span class="token operator">*<span class="token function">ioremap<span class="token punctuation">(<span class="token class-name">phys_addr_t phys_addr<span class="token punctuation">, <span class="token class-name">size_t size<span class="token punctuation">)
</span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  简化下：</p>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-c"><span class="token keyword">void <span class="token operator">*<span class="token function">ioremap<span class="token punctuation">(<span class="token class-name">phys_addr_t phys_addr<span class="token punctuation">, <span class="token class-name">size_t size<span class="token punctuation">)<span class="token punctuation">;
</span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<h2><a id="iounmapioremap_58"></a>iounmap：释放掉ioremap映射的地址</h2>
</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/fd6da05b821d4ca3b244173def53fbdd.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-c"><span class="token keyword">static <span class="token keyword">inline <span class="token keyword">void <span class="token function">iounmap<span class="token punctuation">(<span class="token keyword">void __iomem <span class="token operator">*addr<span class="token punctuation">)
</span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  简化下：</p>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-c"><span class="token keyword">static <span class="token keyword">void <span class="token function">iounmap<span class="token punctuation">(<span class="token keyword">void <span class="token operator">*addr<span class="token punctuation">)
</span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<h2><a id="_68"></a>查看已经映射的物理地址</h2>
</div>
<div class="cl-preview-section">
<p>  内核以物理地址的形式来管理设备资源，比如寄存器。这些地址保存在 /proc/iomem 。该设备列出了当前系统内存到物理设备的地址映射。</p>
</div>
<div class="cl-preview-section">
<ul>
<li>第一列：显示每种不同类型内存使用的内存寄存器；</li>
<li>第二列，列出这些寄存器中的内存类型，并显示系统RAM中内核使用的内存寄存器，若网络接口卡有多个以太网端口，则显示为每个端口分配的内存寄存器。</li>
</ul>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-shell"><span class="token function">cat /proc/iomem
</span></code></pre>
</div>
<div class="cl-preview-section">
<p>  （注意：由于笔者是虚拟机，所以都是0吧）<br>  <img src="https://i-blog.csdnimg.cn/direct/b60af1a732c94e3698f4fc51fb6e4514.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="_81"></a>驱动模板准备</h1>

</div>
<div class="cl-preview-section">
<p>  首先复制之前的004_testReadWirte的驱动，改个名字为：005_testReadWritePhyAddr</p>

</div>
<div class="cl-preview-section">
<pre><code class="prism language-shell"><span class="token builtin class-name">cd ~/work/drive/
<span class="token function">ls
<span class="token function">cp <span class="token parameter variable">-arf 004_testReadWrite 005_testReadWritePhyAddr
<span class="token builtin class-name">cd 005_testReadWritePhyAddr
<span class="token function">make clean
<span class="token function">ls
<span class="token function">mv testReadWrite.c testReadWritePhyAddr.c
<span class="token function">ls
</span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/fc2ecdd7cb8c4c749fbe28493c6c87e3.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<p>  修改makefile里面的模块名称（obj-m模块名称），模板准备好了</p>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-shell">gedit Makefile 
</code></pre>
</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/15517cd9404e48a497994a1b4a7ff7b1.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-c">obj<span class="token operator">-m <span class="token operator">+= testReadWritePhyAddr<span class="token punctuation">.o

<span class="token macro property"><span class="token directive-hash">#<span class="token expression">KDIR<span class="token operator">:<span class="token operator">=<span class="token operator">/usr<span class="token operator">/src<span class="token operator">/linux<span class="token operator">-source<span class="token operator">-<span class="token number">4.18<span class="token number">.0<span class="token operator">/linux<span class="token operator">-source<span class="token operator">-<span class="token number">4.18<span class="token number">.0
KDIR<span class="token operator">:<span class="token operator">=<span class="token operator">/usr<span class="token operator">/src<span class="token operator">/linux<span class="token operator">-headers<span class="token operator">-<span class="token number">4.18<span class="token number">.0<span class="token operator">-<span class="token number">15<span class="token operator">-generic

PWD<span class="token operator">?<span class="token operator">=$<span class="token punctuation">(shell pwd<span class="token punctuation">)

all<span class="token operator">:
	make <span class="token operator">-C $<span class="token punctuation">(KDIR<span class="token punctuation">) M<span class="token operator">=$<span class="token punctuation">(PWD<span class="token punctuation">) modules

clean<span class="token operator">:
	rm <span class="token operator">*<span class="token punctuation">.ko <span class="token operator">*<span class="token punctuation">.o <span class="token operator">*<span class="token punctuation">.order <span class="token operator">*<span class="token punctuation">.symvers <span class="token operator">*<span class="token punctuation">.mod<span class="token punctuation">.c
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  修改.c文件的杂项设备名称：</p>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-shell">gedit testReadWritePhyAddr.c
</code></pre>
</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/2b7f6b61578244e59a973275c6d22511.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-c"><span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;linux/init.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;linux/module.h&gt;

<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;linux/miscdevice.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;linux/fs.h&gt;

<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;linux/uaccess.h&gt;      <span class="token comment">// Demo_004 add

<span class="token keyword">static <span class="token keyword">char kBuf<span class="token punctuation">[<span class="token number">256<span class="token punctuation">] <span class="token operator">= <span class="token punctuation">{<span class="token number">0x00<span class="token punctuation">}<span class="token punctuation">;  <span class="token comment">// Demo_004 add

<span class="token comment">// int (*open) (struct inode *, struct file *);
<span class="token keyword">int <span class="token function">misc_open<span class="token punctuation">(<span class="token keyword">struct <span class="token class-name">inode <span class="token operator">* pInode<span class="token punctuation">, <span class="token keyword">struct <span class="token class-name">file <span class="token operator">* pFile<span class="token punctuation">)
<span class="token punctuation">{
    <span class="token function">printk<span class="token punctuation">(<span class="token string">"int misc_open(struct inode * pInode, struct file * pFile)\n"<span class="token punctuation">)<span class="token punctuation">;
    <span class="token function">memcpy<span class="token punctuation">(kBuf<span class="token punctuation">, <span class="token string">"init kBuf"<span class="token punctuation">, <span class="token keyword">sizeof<span class="token punctuation">(<span class="token string">"init kBuf"<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    <span class="token function">printk<span class="token punctuation">(<span class="token string">"kBuf = %s\n"<span class="token punctuation">, kBuf<span class="token punctuation">)<span class="token punctuation">; 
    <span class="token keyword">return <span class="token number">0<span class="token punctuation">;
<span class="token punctuation">}

<span class="token comment">// int (*release) (struct inode *, struct file *);
<span class="token keyword">int <span class="token function">misc_release<span class="token punctuation">(<span class="token keyword">struct <span class="token class-name">inode <span class="token operator">* pInde<span class="token punctuation">, <span class="token keyword">struct <span class="token class-name">file <span class="token operator">* pFile<span class="token punctuation">)
<span class="token punctuation">{
    <span class="token function">printk<span class="token punctuation">(<span class="token string">"int misc_release(struct inode * pInde, struct file * pFile)\n"<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">return <span class="token number">0<span class="token punctuation">;
<span class="token punctuation">}

<span class="token comment">// ssize_t (*read) (struct file *, char __user *, size_t, loff_t *);
<span class="token class-name">ssize_t <span class="token function">misc_read<span class="token punctuation">(<span class="token keyword">struct <span class="token class-name">file <span class="token operator">* pFile<span class="token punctuation">, <span class="token keyword">char __user <span class="token operator">* pUser<span class="token punctuation">, <span class="token class-name">size_t size<span class="token punctuation">, <span class="token class-name">loff_t <span class="token operator">*pLofft<span class="token punctuation">)
<span class="token punctuation">{
    <span class="token function">printk<span class="token punctuation">(<span class="token string">"ssize_t misc_read(struct file * pFile, char __user * pUser, size_t size, loff_t *pLofft)\n"<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">if<span class="token punctuation">(<span class="token function">copy_to_user<span class="token punctuation">(pUser<span class="token punctuation">, kBuf<span class="token punctuation">, <span class="token function">strlen<span class="token punctuation">(kBuf<span class="token punctuation">)<span class="token punctuation">) <span class="token operator">!= <span class="token number">0<span class="token punctuation">)
    <span class="token punctuation">{
        <span class="token function">printk<span class="token punctuation">(<span class="token string">"Failed to copy_to_user(pUser, kBuf, strlen(kBuf)\n"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return <span class="token operator">-<span class="token number">1<span class="token punctuation">;
    <span class="token punctuation">}
    <span class="token keyword">return <span class="token number">0<span class="token punctuation">;
<span class="token punctuation">}

<span class="token comment">// ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);
<span class="token class-name">ssize_t <span class="token function">misc_write<span class="token punctuation">(<span class="token keyword">struct <span class="token class-name">file <span class="token operator">* pFile<span class="token punctuation">, <span class="token keyword">const <span class="token keyword">char __user <span class="token operator">* pUser<span class="token punctuation">, <span class="token class-name">size_t size<span class="token punctuation">, <span class="token class-name">loff_t <span class="token operator">*pLofft<span class="token punctuation">)
<span class="token punctuation">{
    <span class="token function">printk<span class="token punctuation">(<span class="token string">"ssize_t misc_write(struct file * pFile, const char __user * pUser, size_t size, loff_t *pLofft)\n"<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">if<span class="token punctuation">(<span class="token function">copy_from_user<span class="token punctuation">(kBuf<span class="token punctuation">, pUser<span class="token punctuation">, size<span class="token punctuation">) <span class="token operator">!= <span class="token number">0<span class="token punctuation">)
    <span class="token punctuation">{
        <span class="token function">printk<span class="token punctuation">(<span class="token string">"Failed to copy_from_user(kBuf, pUser, size)\n"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return <span class="token operator">-<span class="token number">1<span class="token punctuation">;
    <span class="token punctuation">}
    <span class="token keyword">return <span class="token number">0<span class="token punctuation">;
<span class="token punctuation">}

<span class="token keyword">struct <span class="token class-name">file_operations misc_fops <span class="token operator">= <span class="token punctuation">{
  <span class="token punctuation">.owner <span class="token operator">= THIS_MODULE<span class="token punctuation">,
  <span class="token punctuation">.open <span class="token operator">= misc_open<span class="token punctuation">,
  <span class="token punctuation">.release <span class="token operator">= misc_release<span class="token punctuation">,
  <span class="token punctuation">.read <span class="token operator">= misc_read<span class="token punctuation">,
  <span class="token punctuation">.write <span class="token operator">= misc_write<span class="token punctuation">,
<span class="token punctuation">}<span class="token punctuation">;

<span class="token keyword">struct <span class="token class-name">miscdevice misc_dev <span class="token operator">= <span class="token punctuation">{
    <span class="token punctuation">.minor <span class="token operator">= MISC_DYNAMIC_MINOR<span class="token punctuation">, <span class="token comment">// 这个宏是动态分配次设备号，避免冲突
    <span class="token punctuation">.name <span class="token operator">= <span class="token string">"register_hongPangZi_testReadWritePhyAddr"<span class="token punctuation">, <span class="token comment">// 设备节点名称
    <span class="token punctuation">.fops <span class="token operator">= <span class="token operator">&amp;misc_fops<span class="token punctuation">,  <span class="token comment">// 这个变量记住，自己起的，步骤二使用
<span class="token punctuation">}<span class="token punctuation">;

<span class="token keyword">static <span class="token keyword">int <span class="token function">registerMiscDev_init<span class="token punctuation">(<span class="token keyword">void<span class="token punctuation">)
<span class="token punctuation">{ 
    <span class="token keyword">int ret<span class="token punctuation">;
    <span class="token comment">// 在内核里面无法使用基础c库printf，需要使用内核库printk
    <span class="token function">printk<span class="token punctuation">(<span class="token string">"Hello, I’m hongPangZi, registerMiscDev_init\n"<span class="token punctuation">)<span class="token punctuation">;	
    ret <span class="token operator">= <span class="token function">misc_register<span class="token punctuation">(<span class="token operator">&amp;misc_dev<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">if<span class="token punctuation">(ret <span class="token operator">&lt; <span class="token number">0<span class="token punctuation">)
    <span class="token punctuation">{
        <span class="token function">printk<span class="token punctuation">(<span class="token string">"Failed to misc_register(&amp;misc_dev)\n"<span class="token punctuation">)<span class="token punctuation">;	
        <span class="token keyword">return <span class="token operator">-<span class="token number">1<span class="token punctuation">;
    <span class="token punctuation">} 
    <span class="token keyword">return <span class="token number">0<span class="token punctuation">;
<span class="token punctuation">}

<span class="token keyword">static <span class="token keyword">void <span class="token function">registerMiscDev_exit<span class="token punctuation">(<span class="token keyword">void<span class="token punctuation">)
<span class="token punctuation">{
    <span class="token function">misc_deregister<span class="token punctuation">(<span class="token operator">&amp;misc_dev<span class="token punctuation">)<span class="token punctuation">;
    <span class="token function">printk<span class="token punctuation">(<span class="token string">"bye-bye!!!\n"<span class="token punctuation">)<span class="token punctuation">;
<span class="token punctuation">}

<span class="token function">MODULE_LICENSE<span class="token punctuation">(<span class="token string">"GPL"<span class="token punctuation">)<span class="token punctuation">;
<span class="token function">module_init<span class="token punctuation">(registerMiscDev_init<span class="token punctuation">)<span class="token punctuation">;
<span class="token function">module_exit<span class="token punctuation">(registerMiscDev_exit<span class="token punctuation">)<span class="token punctuation">;
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="Demo_213"></a>杂项设备驱动添加物理内存映射虚拟机内存操作Demo</h1>
</div>
<div class="cl-preview-section">
<h2><a id="write_214"></a>步骤一：修改驱动write操作</h2>
</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/247de454db944dda9e75a5126a553945.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-c"><span class="token comment">// ssize_t (*read) (struct file *, char __user *, size_t, loff_t *);
<span class="token class-name">ssize_t <span class="token function">misc_read<span class="token punctuation">(<span class="token keyword">struct <span class="token class-name">file <span class="token operator">* pFile<span class="token punctuation">, <span class="token keyword">char __user <span class="token operator">* pUser<span class="token punctuation">, <span class="token class-name">size_t size<span class="token punctuation">, <span class="token class-name">loff_t <span class="token operator">*pLofft<span class="token punctuation">)
<span class="token punctuation">{
    <span class="token function">printk<span class="token punctuation">(<span class="token string">"ssize_t misc_read(struct file * pFile, char __user * pUser, size_t size, loff_t *pLofft)\n"<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">if<span class="token punctuation">(<span class="token function">copy_to_user<span class="token punctuation">(pUser<span class="token punctuation">, kBuf<span class="token punctuation">, <span class="token function">strlen<span class="token punctuation">(kBuf<span class="token punctuation">)<span class="token punctuation">) <span class="token operator">!= <span class="token number">0<span class="token punctuation">)
    <span class="token punctuation">{
        <span class="token function">printk<span class="token punctuation">(<span class="token string">"Failed to copy_to_user(pUser, kBuf, strlen(kBuf)\n"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return <span class="token operator">-<span class="token number">1<span class="token punctuation">;
    <span class="token punctuation">}
    <span class="token keyword">return <span class="token number">0<span class="token punctuation">;
<span class="token punctuation">}
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/33456a7713d940ec8fbc00260627c99f.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<h2><a id="read_232"></a>步骤二：修改驱动read操作</h2>
</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/5d49db392ac14872aa2edb8549a39607.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-c"><span class="token comment">// ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);
<span class="token class-name">ssize_t <span class="token function">misc_write<span class="token punctuation">(<span class="token keyword">struct <span class="token class-name">file <span class="token operator">* pFile<span class="token punctuation">, <span class="token keyword">const <span class="token keyword">char __user <span class="token operator">* pUser<span class="token punctuation">, <span class="token class-name">size_t size<span class="token punctuation">, <span class="token class-name">loff_t <span class="token operator">*pLofft<span class="token punctuation">)
<span class="token punctuation">{
    <span class="token function">printk<span class="token punctuation">(<span class="token string">"ssize_t misc_write(struct file * pFile, const char __user * pUser, size_t size, loff_t *pLofft)\n"<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">if<span class="token punctuation">(<span class="token function">copy_from_user<span class="token punctuation">(kBuf<span class="token punctuation">, pUser<span class="token punctuation">, size<span class="token punctuation">) <span class="token operator">!= <span class="token number">0<span class="token punctuation">)
    <span class="token punctuation">{
        <span class="token function">printk<span class="token punctuation">(<span class="token string">"Failed to copy_from_user(kBuf, pUser, size)\n"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return <span class="token operator">-<span class="token number">1<span class="token punctuation">;
    <span class="token punctuation">}
    <span class="token function">printk<span class="token punctuation">(<span class="token string">"%s\n"<span class="token punctuation">, kBuf<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">return <span class="token number">0<span class="token punctuation">;
<span class="token punctuation">}
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/7d13b52d848847a79f62ff62b51d0df9.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<h2><a id="_251"></a>步骤三：在程序中添加参数写入和读取</h2>
</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/2c7d6d194d0c46e193e48e50cf490f2b.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-c"><span class="token comment">// 读取
  ret <span class="token operator">= <span class="token function">read<span class="token punctuation">(fd<span class="token punctuation">, buf<span class="token punctuation">, <span class="token keyword">sizeof<span class="token punctuation">(buf<span class="token punctuation">) <span class="token operator">&lt; <span class="token number">0<span class="token punctuation">)<span class="token punctuation">;
  <span class="token keyword">if<span class="token punctuation">(ret <span class="token operator">&lt; <span class="token number">0<span class="token punctuation">)
  <span class="token punctuation">{
    <span class="token function">printf<span class="token punctuation">(<span class="token string">"Failed to read %s\n"<span class="token punctuation">, devPath<span class="token punctuation">)<span class="token punctuation">;
    <span class="token function">close<span class="token punctuation">(fd<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">return <span class="token number">0<span class="token punctuation">;
  <span class="token punctuation">}<span class="token keyword">else<span class="token punctuation">{
    <span class="token function">printf<span class="token punctuation">(<span class="token string">"Succeed to read [%s]\n"<span class="token punctuation">, buf<span class="token punctuation">)<span class="token punctuation">;
  <span class="token punctuation">}
  <span class="token comment">// 修改内容
  <span class="token function">memset<span class="token punctuation">(buf<span class="token punctuation">, <span class="token number">0x00<span class="token punctuation">, <span class="token keyword">sizeof<span class="token punctuation">(buf<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
  <span class="token function">memcpy<span class="token punctuation">(buf<span class="token punctuation">, <span class="token string">"Get you content"<span class="token punctuation">, <span class="token function">strlen<span class="token punctuation">(<span class="token string">"Get you content"<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
  <span class="token comment">// 写入
  ret <span class="token operator">= <span class="token function">write<span class="token punctuation">(fd<span class="token punctuation">, buf<span class="token punctuation">, <span class="token keyword">sizeof<span class="token punctuation">(buf<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
  <span class="token keyword">if<span class="token punctuation">(ret <span class="token operator">&lt; <span class="token number">0<span class="token punctuation">)
  <span class="token punctuation">{
    <span class="token function">printf<span class="token punctuation">(<span class="token string">"Failed to write %s\n"<span class="token punctuation">, devPath<span class="token punctuation">)<span class="token punctuation">;
    <span class="token function">close<span class="token punctuation">(fd<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">return <span class="token number">0<span class="token punctuation">;
  <span class="token punctuation">}<span class="token keyword">else<span class="token punctuation">{
    <span class="token function">printf<span class="token punctuation">(<span class="token string">"Succeed to write [%s]\n"<span class="token punctuation">, buf<span class="token punctuation">)<span class="token punctuation">;
  <span class="token punctuation">}
  <span class="token comment">// 读取
  ret <span class="token operator">= <span class="token function">read<span class="token punctuation">(fd<span class="token punctuation">, buf<span class="token punctuation">, <span class="token keyword">sizeof<span class="token punctuation">(buf<span class="token punctuation">) <span class="token operator">&lt; <span class="token number">0<span class="token punctuation">)<span class="token punctuation">;
  <span class="token keyword">if<span class="token punctuation">(ret <span class="token operator">&lt; <span class="token number">0<span class="token punctuation">)
  <span class="token punctuation">{
    <span class="token function">printf<span class="token punctuation">(<span class="token string">"Failed to read %s\n"<span class="token punctuation">, devPath<span class="token punctuation">)<span class="token punctuation">;
    <span class="token function">close<span class="token punctuation">(fd<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">return <span class="token number">0<span class="token punctuation">;
  <span class="token punctuation">}<span class="token keyword">else<span class="token punctuation">{
    <span class="token function">printf<span class="token punctuation">(<span class="token string">"Succeed to read [%s]\n"<span class="token punctuation">, buf<span class="token punctuation">)<span class="token punctuation">;
  <span class="token punctuation">}
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  使用gcc编译.c，输出默认是a.out。</p>
</div>
<div class="cl-preview-section">
<h2><a id="_290"></a>步骤四：编译驱动</h2>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-c">make
</code></pre>
</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/ab3ed0def4ad44fcbf474ce1e0953051.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<h2><a id="_296"></a>步骤五：加载、卸载驱动查看输出</h2>
</div>
<div class="cl-preview-section">
<p>  符合预期<br>  <img src="https://i-blog.csdnimg.cn/direct/d66f0deb04944962be093d64609ffdaf.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="Demo_304"></a>Demo源码</h1>

</div>
<div class="cl-preview-section">
<h2><a id="_305"></a>驱动源码</h2>

</div>
<div class="cl-preview-section">
<pre><code class="prism language-c"><span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;linux/init.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;linux/module.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;linux/miscdevice.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;linux/fs.h&gt;

<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;linux/uaccess.h&gt;       <span class="token comment">// Demo_004 add

<span class="token keyword">static <span class="token keyword">char kBuf<span class="token punctuation">[<span class="token number">256<span class="token punctuation">] <span class="token operator">= <span class="token punctuation">{<span class="token number">0x00<span class="token punctuation">}<span class="token punctuation">;  <span class="token comment">// Demo_004 add

<span class="token comment">// int (*open) (struct inode *, struct file *);
<span class="token keyword">int <span class="token function">misc_open<span class="token punctuation">(<span class="token keyword">struct <span class="token class-name">inode <span class="token operator">* pInode<span class="token punctuation">, <span class="token keyword">struct <span class="token class-name">file <span class="token operator">* pFile<span class="token punctuation">)
<span class="token punctuation">{
    <span class="token function">printk<span class="token punctuation">(<span class="token string">"int misc_open(struct inode * pInode, struct file * pFile)\n"<span class="token punctuation">)<span class="token punctuation">;
    <span class="token function">memcpy<span class="token punctuation">(kBuf<span class="token punctuation">, <span class="token string">"init kBuf"<span class="token punctuation">, <span class="token keyword">sizeof<span class="token punctuation">(<span class="token string">"init kBuf"<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    <span class="token function">printk<span class="token punctuation">(<span class="token string">"kBuf = %s\n"<span class="token punctuation">, kBuf<span class="token punctuation">)<span class="token punctuation">; 
    <span class="token keyword">return <span class="token number">0<span class="token punctuation">;
<span class="token punctuation">}

<span class="token comment">// int (*release) (struct inode *, struct file *);
<span class="token keyword">int <span class="token function">misc_release<span class="token punctuation">(<span class="token keyword">struct <span class="token class-name">inode <span class="token operator">* pInde<span class="token punctuation">, <span class="token keyword">struct <span class="token class-name">file <span class="token operator">* pFile<span class="token punctuation">)
<span class="token punctuation">{
    <span class="token function">printk<span class="token punctuation">(<span class="token string">"int misc_release(struct inode * pInde, struct file * pFile)\n"<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">return <span class="token number">0<span class="token punctuation">;
<span class="token punctuation">}

<span class="token comment">// ssize_t (*read) (struct file *, char __user *, size_t, loff_t *);
<span class="token class-name">ssize_t <span class="token function">misc_read<span class="token punctuation">(<span class="token keyword">struct <span class="token class-name">file <span class="token operator">* pFile<span class="token punctuation">, <span class="token keyword">char __user <span class="token operator">* pUser<span class="token punctuation">, <span class="token class-name">size_t size<span class="token punctuation">, <span class="token class-name">loff_t <span class="token operator">*pLofft<span class="token punctuation">)
<span class="token punctuation">{
    <span class="token function">printk<span class="token punctuation">(<span class="token string">"ssize_t misc_read(struct file * pFile, char __user * pUser, size_t size, loff_t *pLofft)\n"<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">if<span class="token punctuation">(<span class="token function">copy_to_user<span class="token punctuation">(pUser<span class="token punctuation">, kBuf<span class="token punctuation">, <span class="token function">strlen<span class="token punctuation">(kBuf<span class="token punctuation">)<span class="token punctuation">) <span class="token operator">!= <span class="token number">0<span class="token punctuation">)
    <span class="token punctuation">{
        <span class="token function">printk<span class="token punctuation">(<span class="token string">"Failed to copy_to_user(pUser, kBuf, strlen(kBuf)\n"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return <span class="token operator">-<span class="token number">1<span class="token punctuation">;
    <span class="token punctuation">}
    <span class="token keyword">return <span class="token number">0<span class="token punctuation">;
<span class="token punctuation">}

<span class="token comment">// ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);
<span class="token class-name">ssize_t <span class="token function">misc_write<span class="token punctuation">(<span class="token keyword">struct <span class="token class-name">file <span class="token operator">* pFile<span class="token punctuation">, <span class="token keyword">const <span class="token keyword">char __user <span class="token operator">* pUser<span class="token punctuation">, <span class="token class-name">size_t size<span class="token punctuation">, <span class="token class-name">loff_t <span class="token operator">*pLofft<span class="token punctuation">)
<span class="token punctuation">{

    <span class="token function">printk<span class="token punctuation">(<span class="token string">"ssize_t misc_write(struct file * pFile, const char __user * pUser, size_t size, loff_t *pLofft)\n"<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">if<span class="token punctuation">(<span class="token function">copy_from_user<span class="token punctuation">(kBuf<span class="token punctuation">, pUser<span class="token punctuation">, size<span class="token punctuation">) <span class="token operator">!= <span class="token number">0<span class="token punctuation">)
    <span class="token punctuation">{
        <span class="token function">printk<span class="token punctuation">(<span class="token string">"Failed to copy_from_user(kBuf, pUser, size)\n"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return <span class="token operator">-<span class="token number">1<span class="token punctuation">;
    <span class="token punctuation">}
    <span class="token function">printk<span class="token punctuation">(<span class="token string">"%s\n"<span class="token punctuation">, kBuf<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">return <span class="token number">0<span class="token punctuation">;
<span class="token punctuation">}

<span class="token keyword">struct <span class="token class-name">file_operations misc_fops <span class="token operator">= <span class="token punctuation">{
  <span class="token punctuation">.owner <span class="token operator">= THIS_MODULE<span class="token punctuation">,
  <span class="token punctuation">.open <span class="token operator">= misc_open<span class="token punctuation">,
  <span class="token punctuation">.release <span class="token operator">= misc_release<span class="token punctuation">,
  <span class="token punctuation">.read <span class="token operator">= misc_read<span class="token punctuation">,
  <span class="token punctuation">.write <span class="token operator">= misc_write<span class="token punctuation">,
<span class="token punctuation">}<span class="token punctuation">;

<span class="token keyword">struct <span class="token class-name">miscdevice misc_dev <span class="token operator">= <span class="token punctuation">{
    <span class="token punctuation">.minor <span class="token operator">= MISC_DYNAMIC_MINOR<span class="token punctuation">, <span class="token comment">// 这个宏是动态分配次设备号，避免冲突
    <span class="token punctuation">.name <span class="token operator">= <span class="token string">"register_hongPangZi_testReadWritePhyAddr"<span class="token punctuation">, <span class="token comment">// 设备节点名称
    <span class="token punctuation">.fops <span class="token operator">= <span class="token operator">&amp;misc_fops<span class="token punctuation">,  <span class="token comment">// 这个变量记住，自己起的，步骤二使用
<span class="token punctuation">}<span class="token punctuation">;

<span class="token keyword">static <span class="token keyword">int <span class="token function">registerMiscDev_init<span class="token punctuation">(<span class="token keyword">void<span class="token punctuation">)
<span class="token punctuation">{ 
    <span class="token keyword">int ret<span class="token punctuation">;
    <span class="token comment">// 在内核里面无法使用基础c库printf，需要使用内核库printk
    <span class="token function">printk<span class="token punctuation">(<span class="token string">"Hello, I’m hongPangZi, registerMiscDev_init\n"<span class="token punctuation">)<span class="token punctuation">;	
    ret <span class="token operator">= <span class="token function">misc_register<span class="token punctuation">(<span class="token operator">&amp;misc_dev<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">if<span class="token punctuation">(ret <span class="token operator">&lt; <span class="token number">0<span class="token punctuation">)
    <span class="token punctuation">{
        <span class="token function">printk<span class="token punctuation">(<span class="token string">"Failed to misc_register(&amp;misc_dev)\n"<span class="token punctuation">)<span class="token punctuation">;	
        <span class="token keyword">return <span class="token operator">-<span class="token number">1<span class="token punctuation">;
    <span class="token punctuation">} 
    <span class="token keyword">return <span class="token number">0<span class="token punctuation">;
<span class="token punctuation">}

<span class="token keyword">static <span class="token keyword">void <span class="token function">registerMiscDev_exit<span class="token punctuation">(<span class="token keyword">void<span class="token punctuation">)
<span class="token punctuation">{
    <span class="token function">misc_deregister<span class="token punctuation">(<span class="token operator">&amp;misc_dev<span class="token punctuation">)<span class="token punctuation">;
    <span class="token function">printk<span class="token punctuation">(<span class="token string">"bye-bye!!!\n"<span class="token punctuation">)<span class="token punctuation">;
<span class="token punctuation">}

<span class="token function">MODULE_LICENSE<span class="token punctuation">(<span class="token string">"GPL"<span class="token punctuation">)<span class="token punctuation">;

<span class="token function">module_init<span class="token punctuation">(registerMiscDev_init<span class="token punctuation">)<span class="token punctuation">;
<span class="token function">module_exit<span class="token punctuation">(registerMiscDev_exit<span class="token punctuation">)<span class="token punctuation">;
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<h2><a id="_397"></a>测试程序源码</h2>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-c"><span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;stdio.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;unistd.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;fcntl.h&gt;

<span class="token keyword">int <span class="token function">main<span class="token punctuation">(<span class="token keyword">int argc<span class="token punctuation">, <span class="token keyword">char <span class="token operator">*<span class="token operator">*argv<span class="token punctuation">)
<span class="token punctuation">{
  <span class="token keyword">int fd <span class="token operator">= <span class="token operator">-<span class="token number">1<span class="token punctuation">;
  <span class="token keyword">char buf<span class="token punctuation">[<span class="token number">32<span class="token punctuation">] <span class="token operator">= <span class="token punctuation">{<span class="token number">0<span class="token punctuation">}<span class="token punctuation">;
  <span class="token keyword">int ret <span class="token operator">= <span class="token operator">-<span class="token number">1<span class="token punctuation">;

  <span class="token keyword">const <span class="token keyword">char devPath<span class="token punctuation">[<span class="token punctuation">] <span class="token operator">= <span class="token string">"/dev/register_hongPangZi_testReadWrite"<span class="token punctuation">;
  fd <span class="token operator">= <span class="token function">open<span class="token punctuation">(devPath<span class="token punctuation">, O_RDWR<span class="token punctuation">)<span class="token punctuation">;
  <span class="token keyword">if<span class="token punctuation">(fd <span class="token operator">&lt; <span class="token number">0<span class="token punctuation">)
  <span class="token punctuation">{
    <span class="token function">printf<span class="token punctuation">(<span class="token string">"Failed to open %s\n"<span class="token punctuation">, devPath<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">return <span class="token operator">-<span class="token number">1<span class="token punctuation">;
  <span class="token punctuation">}<span class="token keyword">else<span class="token punctuation">{
    <span class="token function">printf<span class="token punctuation">(<span class="token string">"Succeed to open %s\n"<span class="token punctuation">, devPath<span class="token punctuation">)<span class="token punctuation">;
  <span class="token punctuation">}
  <span class="token comment">// 读取
  ret <span class="token operator">= <span class="token function">read<span class="token punctuation">(fd<span class="token punctuation">, buf<span class="token punctuation">, <span class="token keyword">sizeof<span class="token punctuation">(buf<span class="token punctuation">) <span class="token operator">&lt; <span class="token number">0<span class="token punctuation">)<span class="token punctuation">;
  <span class="token keyword">if<span class="token punctuation">(ret <span class="token operator">&lt; <span class="token number">0<span class="token punctuation">)
  <span class="token punctuation">{
    <span class="token function">printf<span class="token punctuation">(<span class="token string">"Failed to read %s\n"<span class="token punctuation">, devPath<span class="token punctuation">)<span class="token punctuation">;
    <span class="token function">close<span class="token punctuation">(fd<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">return <span class="token number">0<span class="token punctuation">;
  <span class="token punctuation">}<span class="token keyword">else<span class="token punctuation">{
    <span class="token function">printf<span class="token punctuation">(<span class="token string">"Succeed to read [%s]\n"<span class="token punctuation">, buf<span class="token punctuation">)<span class="token punctuation">;
  <span class="token punctuation">}
  <span class="token comment">// 修改内容
  <span class="token function">memset<span class="token punctuation">(buf<span class="token punctuation">, <span class="token number">0x00<span class="token punctuation">, <span class="token keyword">sizeof<span class="token punctuation">(buf<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
  <span class="token function">memcpy<span class="token punctuation">(buf<span class="token punctuation">, <span class="token string">"Get you content"<span class="token punctuation">, <span class="token function">strlen<span class="token punctuation">(<span class="token string">"Get you content"<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
  <span class="token comment">// 写入
  ret <span class="token operator">= <span class="token function">write<span class="token punctuation">(fd<span class="token punctuation">, buf<span class="token punctuation">, <span class="token keyword">sizeof<span class="token punctuation">(buf<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
  <span class="token keyword">if<span class="token punctuation">(ret <span class="token operator">&lt; <span class="token number">0<span class="token punctuation">)
  <span class="token punctuation">{
    <span class="token function">printf<span class="token punctuation">(<span class="token string">"Failed to write %s\n"<span class="token punctuation">, devPath<span class="token punctuation">)<span class="token punctuation">;
    <span class="token function">close<span class="token punctuation">(fd<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">return <span class="token number">0<span class="token punctuation">;
  <span class="token punctuation">}<span class="token keyword">else<span class="token punctuation">{
    <span class="token function">printf<span class="token punctuation">(<span class="token string">"Succeed to write [%s]\n"<span class="token punctuation">, buf<span class="token punctuation">)<span class="token punctuation">;
  <span class="token punctuation">}
  <span class="token comment">// 读取
  ret <span class="token operator">= <span class="token function">read<span class="token punctuation">(fd<span class="token punctuation">, buf<span class="token punctuation">, <span class="token keyword">sizeof<span class="token punctuation">(buf<span class="token punctuation">) <span class="token operator">&lt; <span class="token number">0<span class="token punctuation">)<span class="token punctuation">;
  <span class="token keyword">if<span class="token punctuation">(ret <span class="token operator">&lt; <span class="token number">0<span class="token punctuation">)
  <span class="token punctuation">{
    <span class="token function">printf<span class="token punctuation">(<span class="token string">"Failed to read %s\n"<span class="token punctuation">, devPath<span class="token punctuation">)<span class="token punctuation">;
    <span class="token function">close<span class="token punctuation">(fd<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">return <span class="token number">0<span class="token punctuation">;
  <span class="token punctuation">}<span class="token keyword">else<span class="token punctuation">{
    <span class="token function">printf<span class="token punctuation">(<span class="token string">"Succeed to read [%s]\n"<span class="token punctuation">, buf<span class="token punctuation">)<span class="token punctuation">;
  <span class="token punctuation">}
  <span class="token function">close<span class="token punctuation">(fd<span class="token punctuation">)<span class="token punctuation">;
  <span class="token function">printf<span class="token punctuation">(<span class="token string">"exit\n"<span class="token punctuation">)<span class="token punctuation">;
  fd <span class="token operator">= <span class="token operator">-<span class="token number">1<span class="token punctuation">;
  <span class="token keyword">return <span class="token number">0<span class="token punctuation">;
<span class="token punctuation">}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.1793303891886574" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-23 10:40">2024-12-23 10:39</span>&nbsp;
<a href="https://www.cnblogs.com/qq21497936">长沙红胖子Qt创微智科</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18623411" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18623411);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18623411', targetLink: 'https://www.cnblogs.com/qq21497936/p/18623411', title: 'Linux驱动开发笔记（七）：操作系统MMU介绍，操作系统操作寄存器的原理和Demo' })">举报</a>
</div>
        