
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zxlh1529/p/18799896" title="发布于 2025-03-29 22:08">
    <span role="heading" aria-level="2">什么是RESTful 或 GraphQL？</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="restful-与-graphql-深度解析">RESTful 与 GraphQL 深度解析</h1>
<p>在前端的开发过程中，相信 everyone 对 Get、POST 等请求方式都很熟悉，那么这些请求是归于哪种架构或者设计风格可能又不是很熟。现在在这简单的介绍一下以及拿出 GraphQL 架构进行对比。</p>
<h2 id="1-什么是-restful">1. 什么是 RESTful？</h2>
<p>REST（Representational State Transfer，表述性状态转移）是一种 架构风格，而不是具体的协议或技术。RESTful API 依据 REST 架构风格设计，使用 HTTP 方法 进行资源操作。</p>
<h3 id="11-restful-的核心概念">1.1 RESTful 的核心概念</h3>
<ol>
<li><strong>资源（Resource）</strong>：一切数据都是资源，每个资源由 URL 唯一标识，系统中的每个对象（如用户、订单）都是一个资源。</li>
<li><strong>URI（Uniform Resource Identifier）</strong>：唯一标识资源的路径，如 <code>/getUsersInfo?id=1</code> 表示获取 ID 为 1 的用户。</li>
<li><strong>HTTP 方法</strong>：常见方法如下：
<ul>
<li><code>GET</code>：获取资源</li>
<li><code>POST</code>：创建资源</li>
<li><code>PUT/PATCH</code>：更新资源</li>
<li><code>DELETE</code>：删除资源</li>
</ul>
</li>
<li><strong>无状态性</strong>：服务器不存储客户端的请求状态，每个请求都应包含所有必要的信息。</li>
<li><strong>响应格式</strong>：通常使用 JSON 作为数据交换格式。</li>
<li><strong>统一接口（Uniform Interface）</strong>：
<ul>
<li>使用 <strong>HTTP 方法</strong> 表达操作</li>
<li>资源表现形式（JSON、XML、HTML）</li>
<li>HATEOAS（超媒体作为应用状态引擎，减少 API 依赖）</li>
</ul>
</li>
</ol>
<h3 id="12-restful-的底层原理">1.2 RESTful 的底层原理</h3>
<p>RESTful API 依赖于 HTTP 协议，底层涉及：</p>
<ul>
<li><strong>HTTP/1.1</strong> 或 <strong>HTTP/2</strong> 进行通信。</li>
<li><strong>状态码</strong> 反映操作结果（如 200 成功，404 资源不存在，500 服务器错误）。</li>
<li><strong>CORS（跨域资源共享）</strong> 解决跨域问题。</li>
<li><strong>OAuth2、JWT</strong> 等方式实现身份认证。</li>
</ul>
<h3 id="13-restful-示例">1.3 RESTful 示例</h3>
<h4 id="131-获取用户信息get-请求">1.3.1 获取用户信息（GET 请求）</h4>
<pre><code class="language-http">GET /getUsersInfo?id=1
</code></pre>
<p><strong>响应示例：</strong></p>
<pre><code class="language-json">{
  "id": 1,
  "name": "Alice"
}
</code></pre>
<h4 id="132-创建新用户post-请求">1.3.2 创建新用户（POST 请求）</h4>
<pre><code class="language-http">POST /users
Content-Type: application/json

{
  "name": "Charlie"
}
</code></pre>
<p><strong>响应示例：</strong></p>
<pre><code class="language-json">{
  "id": 3,
  "name": "Charlie"
}
</code></pre>
<h3 id="14-restful-的优缺点">1.4 RESTful 的优缺点</h3>
<h4 id="优点">优点：</h4>
<ul>
<li><strong>符合 HTTP 规范</strong>，简单直观，开发和测试方便。</li>
<li><strong>缓存友好</strong>，可利用 HTTP 缓存机制提升性能。</li>
<li><strong>良好的分离性</strong>，前后端分离清晰。</li>
<li>适用于 <strong>面向资源</strong> 的应用，如 CRUD 操作。</li>
<li>服务器端 <strong>无状态</strong> ，易于扩展。</li>
</ul>
<h4 id="缺点">缺点：</h4>
<ul>
<li><strong>请求数据可能冗余</strong>，例如 <code>/users</code> 可能返回所有用户数据，即使前端只需要 <code>name</code>。</li>
<li><strong>难以应对复杂查询</strong>，需要定义多个端点，如 <code>/users?name=Alice&amp;age=25</code>。</li>
<li><strong>版本管理复杂</strong>，需要维护 <code>/v1/users</code>，<code>/v2/users</code> 等。</li>
<li>可能导致 <strong>Over-fetching（数据过多）</strong> 或 <strong>Under-fetching（数据不足）</strong>。</li>
<li><strong>多次请求</strong> 才能获取复杂数据（如获取用户及其订单，需要两次请求）。</li>
</ul>
<hr>
<h2 id="2-什么是-graphql">2. 什么是 GraphQL？</h2>
<p>GraphQL 是由 Facebook 在 2015 年开源的 <strong>查询语言（Query Language）</strong>，提供了一种灵活的 API 查询语言，它允许客户端精准请求所需数据，而不是受限于固定的 RESTful 端点。</p>
<h3 id="21-graphql-的核心概念">2.1 GraphQL 的核心概念</h3>
<ol>
<li><strong>Schema（模式）</strong>：使用 Schema 定义 API 的数据结构，例如 <code>User</code> 类型。</li>
<li><strong>Query（查询）</strong>：客户端可按需进行灵活数据查询，获取数据的请求，如 <code>query { user(id: 1) { name } }</code>。</li>
<li><strong>Mutation（变更）</strong>：修改数据的请求，如 <code>mutation { createUser(name: "Charlie") { id name } }</code>。</li>
<li><strong>Resolver（解析器）</strong>：后端逻辑，决定如何获取或修改数据。</li>
<li><strong>Single Endpoint（单一端点）</strong>：所有查询都通过 <code>POST /graphql</code> 进行，不同于 RESTful 的多个端点。</li>
<li><strong>Subscription（实时更新）</strong>：支持 WebSocket 进行实时数据推送。</li>
</ol>
<h3 id="22-graphql-的底层原理">2.2 GraphQL 的底层原理</h3>
<p>GraphQL 的执行涉及：</p>
<ul>
<li><strong>AST（抽象语法树）解析</strong>：请求被解析为 AST，进行解析和验证。</li>
<li><strong>Resolver 解析器</strong>：根据 Schema 执行查询逻辑。</li>
<li><strong>数据聚合（Data Fetching）</strong>：从数据库、REST API 或其他数据源获取数据。</li>
</ul>
<h3 id="23-graphql-示例">2.3 GraphQL 示例</h3>
<h4 id="231-查询用户列表">2.3.1 查询用户列表</h4>
<pre><code class="language-graphql">query {
  users {
    id
    name
  }
}
</code></pre>
<p><strong>响应示例：</strong></p>
<pre><code class="language-json">{
  "data": {
    "users": [
      { "id": 1, "name": "Alice" },
      { "id": 2, "name": "Bob" }
    ]
  }
}
</code></pre>
<h4 id="232-获取单个用户">2.3.2 获取单个用户</h4>
<pre><code class="language-graphql">query {
  user(id: 1) {
    name
  }
}
</code></pre>
<p><strong>响应示例：</strong></p>
<pre><code class="language-json">{
  "data": {
    "user": { "name": "Alice" }
  }
}
</code></pre>
<h4 id="233-创建用户mutation">2.3.3 创建用户（Mutation）</h4>
<pre><code class="language-graphql">mutation {
  createUser(name: "Charlie") {
    id
    name
  }
}
</code></pre>
<p><strong>响应示例：</strong></p>
<pre><code class="language-json">{
  "data": {
    "createUser": { "id": 3, "name": "Charlie" }
  }
}
</code></pre>
<h3 id="24-graphql-的优缺点">2.4 GraphQL 的优缺点</h3>
<h4 id="优点-1">优点：</h4>
<ul>
<li><strong>精确获取所需数据</strong>，避免 RESTful API 的冗余数据。</li>
<li><strong>单一端点（/graphql）</strong>，无需多个 API 路径。</li>
<li><strong>可组合查询</strong>，前端可以自由决定请求结构。</li>
</ul>
<h4 id="缺点-1">缺点：</h4>
<ul>
<li><strong>学习成本较高</strong>，需要掌握 Schema、Query、Mutation。</li>
<li><strong>缓存机制复杂</strong>，无法直接利用 HTTP 缓存。</li>
<li><strong>性能问题</strong>，复杂查询可能导致数据库压力过大。</li>
</ul>
<hr>
<h2 id="3-restful-vs-graphql-对比">3. RESTful vs GraphQL 对比</h2>
<table>
<thead>
<tr>
<th>特性</th>
<th>RESTful API</th>
<th>GraphQL API</th>
</tr>
</thead>
<tbody>
<tr>
<td>资源端点</td>
<td>多个端点（如 <code>/users</code>, <code>/posts</code>）</td>
<td>单一端点（<code>/graphql</code>）</td>
</tr>
<tr>
<td>数据获取方式</td>
<td>由服务器决定返回数据</td>
<td>由客户端决定返回字段</td>
</tr>
<tr>
<td>数据冗余</td>
<td>可能返回过多字段</td>
<td>只返回请求的字段</td>
</tr>
<tr>
<td>请求效率</td>
<td>多个请求才能获取完整数据</td>
<td>单次请求可获取所有需要数据</td>
</tr>
<tr>
<td>复杂查询</td>
<td>依赖多个端点和查询参数</td>
<td>直接在 Query 语句中定义</td>
</tr>
<tr>
<td>HTTP 缓存</td>
<td>可利用浏览器和 CDN 缓存</td>
<td>需定制缓存策略</td>
</tr>
<tr>
<td>易用性</td>
<td>易于理解</td>
<td>需要学习 Schema 及查询语法</td>
</tr>
<tr>
<td>性能</td>
<td>适合简单 API</td>
<td>复杂查询可能影响数据库性能</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="4-何时选择-restful-vs-graphql">4. 何时选择 RESTful vs GraphQL？</h2>
<ul>
<li>
<p><strong>选择 RESTful API</strong>：</p>
<ul>
<li>API 结构稳定，数据不会频繁变化。</li>
<li>需要利用 HTTP 缓存优化性能。</li>
<li>适合公开 API，如 GitHub REST API。</li>
</ul>
</li>
<li>
<p><strong>选择 GraphQL</strong>：</p>
<ul>
<li>需要前端自由选择数据字段。</li>
<li>需要整合多个数据来源（如合并数据库和第三方 API）。</li>
<li>适用于社交媒体、数据驱动应用，如 Facebook、Twitter。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="5-总结">5. 总结</h2>
<p><strong>​ 选 RESTful</strong>：就像去餐厅点套餐，简单直接，厨师给你配好了（数据格式固定），适合大部分普通需求。​ 优点：开发快、好维护，新手也能看懂。​ 缺点：想要多点少点菜（调整数据）得让厨师改菜单（改接口）。</p>
<p><strong>​ 选 GraphQL</strong>：像吃自助麻辣烫，自己拿夹子随便挑菜（前端按需取数据）。​ 优点：灵活省事（避免多次请求），后端不用频繁改接口。​ 缺点：调料台太复杂（学习成本高），吃太多容易撑（性能优化难）。</p>
<blockquote>
<p>简单来说：小项目、简单需求用 REST（省心）；复杂系统、前端天天改需求用 GraphQL（省折腾）。</p>
</blockquote>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.004899312001157408" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-29 22:08">2025-03-29 22:08</span>&nbsp;
<a href="https://www.cnblogs.com/zxlh1529">幼儿园技术家</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18799896" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18799896);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18799896', targetLink: 'https://www.cnblogs.com/zxlh1529/p/18799896', title: '什么是RESTful 或 GraphQL？' })">举报</a>
</div>
        