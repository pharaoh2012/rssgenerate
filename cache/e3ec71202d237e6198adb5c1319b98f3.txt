
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/IwishIcould/p/18744206" title="发布于 2025-02-28 22:13">
    <span role="heading" aria-level="2">试试使用 Vitest 进行测试，确实可以减少bug</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h4 id="vitest的简单介绍">vitest的简单介绍</h4>
<p>Vitest 是一个基于 Vite 的单元测试框架，专为现代前端项目设计。<br>
它结合了 Vite 的高性能和 Jest 的易用性，<br>
提供了开箱即用的 TypeScript、ESM 和 JSX 支持，同时与 Vite 的配置无缝集成。</p>
<h4 id="安装vitest">安装vitest</h4>
<p>npm install -D vitest</p>
<h4 id="viteconfigjs中配置vitest">vite.config.js中配置vitest</h4>
<pre><code>/// &lt;reference types="vitest" /&gt; 
// 上面的这个是必须要写的，你需要注意一下，别漏掉了
import vue from '@vitejs/plugin-vue'
// https://vite.dev/config/
export default defineConfig({
  plugins: [vue()],
  base: './', //生产环境相对目录部署
  server: {
    open:true, //自动打开浏览器
    host: '0.0.0.0', //通过ip的形式访问
    cors: true, // 启用 CORS (boolean) 可以访问任何源上的资源
    force: true, // 强制优化器忽略缓存并重新构建 (boolean)
    clearScreen: false, // 允许或禁用打印日志时清除屏幕  (boolean)
  },
  // 新增 vitest配置
  test:{
    environment: 'happy-dom', // 表示测试环境
  }
})
</code></pre>
<h4 id="happy-dom">happy-dom</h4>
<p>首先我们要安装 npm i happy-dom -D<br>
因为我们后面的测试需要依赖它。<br>
happy-dom:完整的 Web 浏览器环境。<br>
包括 DOM 解析、CSS 渲染和 JavaScript 执行等核心模块。<br>
但剥离了图形用户界面(GUI)的依赖‌</p>
<pre><code>// package.json 文件
"scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    // 新增下面这2行
    "test": "vitest",
    "coverage": "vitest run --coverage"
  },
</code></pre>
<p>我们等会使用 npm test命令就可以测试啦<br>
<img src="https://img2024.cnblogs.com/blog/1425695/202502/1425695-20250228221015265-838716534.png" alt="" loading="lazy"></p>
<h4 id="测试2个数相加使用tobe来比较值">测试2个数相加,使用toBe来比较值</h4>
<pre><code>// src\test\index.spec.js 需要你创建
import { describe, it,expect } from "vitest"
/**
 * describe中的第1个参数： first test 表示的是测试标题
 * 第2个参数：表示的是测试的内容
 * */ 
describe("first test", () =&gt; {
  it("should is 2", () =&gt; {
    // 表示测试的内容 expect(1+2), toBe(2)等于2
    expect(1+2).toBe(3)
  })
})
</code></pre>
<p>执行 npm test<br>
<img src="https://img2024.cnblogs.com/blog/1425695/202502/1425695-20250228221022132-543103733.png" alt="" loading="lazy"></p>
<h4 id="比较返回来的值是否符合预期使用">比较返回来的值是否符合预期,使用</h4>
<pre><code>// src\utils\common.js 公共文件
// 找出小于18岁的人的信息
export function getNoAdultPerson(dataObj){
  // 不影响原始数据
  let dataNewObj = JSON.parse(JSON.stringify(dataObj));
  // 收集要删除的属性名
  let keysToDelete = [];
  for (let key in dataNewObj) {
    if (dataNewObj.hasOwnProperty(key) &amp;&amp; dataNewObj[key].age &gt;=18) {
      keysToDelete.push(key);
    }
  }
  // 删除收集到的属性
  keysToDelete.forEach(key =&gt; {
    delete dataNewObj[key];
  });
  return dataNewObj;
}
</code></pre>
<pre><code>&lt;template&gt;
  &lt;div&gt;
    &lt;h1 class="main"&gt;下面是数据&lt;/h1&gt;
    {{ data }}
  &lt;/div&gt;
&lt;/template&gt;
&lt;script setup&gt;
import { getNoAdultPerson } from '../../utils/common.js';
import { ref } from 'vue';
let obj= {
  "zhansan": {
    user: "zhansan",
    age: 14
  },
  "lisi": {
    user: "lisi",
    age: 26
  }
}
let data = getNoAdultPerson(obj)
&lt;/script&gt;
</code></pre>
<pre><code>// src\test\index.spec.js 测试文件
import { describe, it,expect } from "vitest"
import { getNoAdultPerson } from "../utils/common.js"
// 这个测试用例是找出age&lt;18的用户的信息
describe("second test", () =&gt; {
  const writeData= {
    "zhansan": {
      user: "zhansan",
      age: 14
    },
    "lisi": {
      user: "lisi",
      age: 26
    }
  }
  const expectData = { "zhansan": { "user": "zhansan", "age": 14 } }
  it("test adult", () =&gt; {
    // 这里必须要使用toEqual，不能够使用toBe
    expect(getNoAdultPerson(writeData)).toEqual(expectData)
  })
})
</code></pre>
<p>执行 npm test<br>
<img src="https://img2024.cnblogs.com/blog/1425695/202502/1425695-20250228221034658-876862686.png" alt="" loading="lazy"></p>
<h4 id="tobe-和-toequal-的区别">toBe 和 toEqual 的区别</h4>
<p>toEqual 通常用于比较对象或数组的值是否相等,而不是检查它们是否是同一个实例。<br>
比如:两个不同的对象,如果属性值都相同。用toEqual会通过,而toBe不会。<br>
toBe检查的是严格相等,即对象引用是否相同。通常用来比较简单数据类型或实例是否相等</p>
<h4 id="验证tobe检查的是严格相等即对象引用是否相同">验证:toBe检查的是严格相等,即对象引用是否相同</h4>
<pre><code>import { describe, it,expect } from "vitest"
let obj1 = { a: 1, b: 2 }
let obj2 = { a: 1, b: 2 }
describe("test toBe", () =&gt; {
  it("yan zheng toBe", () =&gt; {
    // 因为 obj1 和 obj2 是两个不同的对象，所以它们不相等，所以测试用例会失败
    expect(obj1).toBe(obj2)
  })
})
</code></pre>
<p>如果我们想要让 obj1等于obj2,我们可以使用 toEqual。<br>
因为：toEqual 只会比较对象中的值是否相等,而不会比较是否是同一个实例。<br>
<img src="https://img2024.cnblogs.com/blog/1425695/202502/1425695-20250228221043779-1794228264.png" alt="" loading="lazy"></p>
<h4 id="vue组件测试">vue组件测试</h4>
<p>如果需要对组件进行测试，我们需要借助 Vue Test Utils<br>
它的地址：<a href="https://test-utils.vuejs.org/guide/" target="_blank" rel="noopener nofollow">https://test-utils.vuejs.org/guide/</a><br>
Vue Test Utils 1 适用于 Vue 2。<br>
Vue Test Utils 2 使用于 Vue 3。<br>
首先需要安装：npm install --save-dev @vue/test-utils<br>
其他知识点：<br>
yarn add = npm i<br>
--save-dev 等价与-D</p>
<h4 id="测试组件的内容-slot">测试组件的内容 slot</h4>
<p>ListCard.vue文件,是一个组件</p>
<pre><code>&lt;template&gt;
  &lt;div&gt;
    &lt;h1&gt;{{ titleName }}&lt;/h1&gt;
    &lt;main&gt;
      &lt;slot /&gt;
    &lt;/main&gt;
    &lt;footer&gt;
      Thanks for visiting.
    &lt;/footer&gt;
  &lt;/div&gt;
&lt;/template&gt;
&lt;script setup&gt;
import {defineProps} from 'vue'
defineProps({
  titleName:{
    type: String,
    default: '我是默认值'
  }
})
&lt;/script&gt;
</code></pre>
<p>下面是单元测试的文件</p>
<pre><code>import { describe, it,expect } from "vitest";
import { mount } from "@vue/test-utils"
import listCard from "./ListCard.vue"
describe ('listCard test', () =&gt; {
  it('test demo1', () =&gt; {
    const listDemo = mount(listCard,{
      slots:{
        default: '张三的详细信息'
      }
    })
    console.log('输出的值：',listDemo.text())
    expect(listDemo.text()).toContain('Thanks')
  })
})
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1425695/202502/1425695-20250228221051410-1221519502.png" alt="" loading="lazy"></p>
<h4 id="tocontain的简单介绍">toContain的简单介绍</h4>
<p>toContain() 是一个断言匹配器,它的作用是检查某个值是否包含指定的子字符串、数组元素、集合成员。</p>
<pre><code>// 检查数组是否包含元素
expect([1, 2, 3]).toContain(2) // 通过

// 检查 Set 是否包含值
expect(new Set([1, 2, 3])).toContain(3) // 通过

// 检查长字符串包含子串
expect('Hello World').toContain('llo W') // 通过
</code></pre>
<h4 id="测试某一个标签中的具体内容">测试某一个标签中的具体内容</h4>
<pre><code>&lt;template&gt;
  &lt;div&gt;
    &lt;h1 class="head-title"&gt;{{ titleName }}&lt;/h1&gt;
    &lt;h1&gt;我也是表退&lt;/h1&gt;
    &lt;main&gt;
      &lt;slot /&gt;
    &lt;/main&gt;
    &lt;footer&gt;
      Thanks for visiting.
    &lt;/footer&gt;
    &lt;h1 class="footer-title"&gt;&lt;/h1&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script setup&gt;
import {defineProps} from 'vue'
defineProps({
  titleName:{
    type: String,
    default: '我是默认值'
  }
})
&lt;/script&gt;
</code></pre>
<pre><code>import { describe, it,expect } from "vitest";
import { mount } from "@vue/test-utils"
import listCard from "./ListCard.vue"
describe ('测试组件', () =&gt; {
  it('测试某一个具体元素的文本', () =&gt; {
    const listDemo = mount(listCard)
    // 查询组件中类名是head-title的标签，并获取标签中的文本内容,
    expect(listDemo.find('[class="head-title"]').text()).toBe('我是默认值')
  })
})
</code></pre>
<h4 id="测试组件中的插槽">测试组件中的插槽</h4>
<p>现在我们想去验证 main 元素中的的插槽是否正确。<br>
我们需要在mount中的去设置插槽<br>
验证插槽是否存在，通过exists来进行判断的哈。<br>
然后再通过 toContain验证是否包含我们设置的html元素。</p>
<pre><code>&lt;template&gt;
  &lt;div&gt;
    &lt;h1 class="head-title"&gt;{{ titleName }}&lt;/h1&gt;
    &lt;h1&gt;{{ titleName }}&lt;/h1&gt;
    &lt;h1  tef="headTitle"&gt;我也是表退&lt;/h1&gt;
    &lt;main&gt;
      &lt;slot /&gt;
    &lt;/main&gt;
    &lt;footer&gt;
      Thanks for visiting.
    &lt;/footer&gt;
    &lt;h1 class="footer-title"&gt;&lt;/h1&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script setup&gt;
import {defineProps} from 'vue'
defineProps({
  titleName:{
    type: String,
    default: '我是默认值'
  }
})
&lt;/script&gt;
</code></pre>
<pre><code>import { describe, it,expect } from "vitest";
import { mount } from "@vue/test-utils"
import listCard from "./ListCard.vue"
describe ('测试组件', () =&gt; {
  it('测试组件的插槽', () =&gt; {
    // slotContent 也可以等于一个组件，这个组件需要我们引入进来。下面是一个html，也相当于一个组件
    const slotContent = `&lt;div data-test="slot-content"&gt;我是插槽-&lt;/div&gt;`
    // 给这个组件放置插槽
    const listDemo = mount(listCard,{
      slots: { default: slotContent }
    })
    // 验证插槽是否存在
    expect(listDemo.find('[data-test="slot-content"]').exists()).toBe(true)
    // 验证插槽中的html内容，验证html内容一般使用toContain
    expect(listDemo.find('main').html()).toContain(slotContent)
  })
})
</code></pre>
<h4 id="测试超长标题并显示省略号">测试超长标题并显示省略号</h4>
<pre><code>&lt;template&gt;
  &lt;div&gt;
    &lt;h1 class="head-title"&gt;{{ titleName }}&lt;/h1&gt;
    &lt;h1  tef="headTitle"&gt;我也是表退&lt;/h1&gt;
    &lt;main&gt;
      &lt;slot /&gt;
    &lt;/main&gt;
    &lt;footer&gt;
      Thanks for visiting.
    &lt;/footer&gt;
    &lt;h1 class="footer-title"&gt;&lt;/h1&gt;
  &lt;/div&gt;
&lt;/template&gt;
&lt;script setup&gt;
import {defineProps} from 'vue'
defineProps({
  titleName:{
    type: String,
    default: '我是默认值'
  }
})
&lt;/script&gt;
&lt;style scoped&gt;
.head-title{
  white-space: nowrap; /* 防止文本换行 */
  overflow: hidden; /* 隐藏溢出的文本 */
  text-overflow: ellipsis; /* 显示省略号 */
  width: 50%; 
}
&lt;/style&gt;
</code></pre>
<pre><code>import { describe, it,expect } from "vitest";
import { mount } from "@vue/test-utils"
import listCard from "./ListCard.vue"
describe ('测试组件', () =&gt; {
  it('应处理超长标题并显示省略号', () =&gt; {
    const longTitle = '日照香炉生紫烟，遥看瀑布挂前川。飞流直下三千尺，疑是银河落九天。标签: 小学古诗写景庐山景色瀑布山水数字出自部编版二年级上《古诗二首》';
    const listDemo = mount(listCard, {
      props: { titleName: longTitle }
    });
    // 获取class="head-title这个元素的文本内容，并判断是否包含省略号
    expect(listDemo.find('class="head-title"').text()).toContain('...');
  });
})
</code></pre>
<h4 id="查看单元测试的覆盖率">查看单元测试的覆盖率</h4>
<p>在package.json中,我们会在 scripts 下看见<br>
"coverage": "vitest run --coverage"<br>
这条命令可以查看单元测试的覆盖率<br>
然后执行：npm run coverage<br>
如果没有安装 @vitest/coverage-v8的话<br>
会有下面的提示信息：<br>
? Do you want to install @vitest/coverage-v8?  » (y/N)<br>
我们输入y，然后回车，就会自动安装。<br>
安装成功之后，我们再次执行：npm run coverage</p>
<pre><code>{
  "name": "studyvite5",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "test": "vitest",
    // 查看单元测试的覆盖率的配置
    "coverage": "vitest run --coverage"
  }
}
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1425695/202502/1425695-20250228221109577-815173471.jpg" alt="" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/1425695/202502/1425695-20250228221118321-1365471474.jpg" alt="" loading="lazy"></p>
<h4 id="stmts-branch-funcslines-uncovered-line的意思">%Stmts, %Branch, %Funcs,%Lines, Uncovered Line的意思</h4>
<p>%Stmts(语句覆盖率)：测试覆盖了多少比例的代码语句。<br>
%Branch(分支覆盖率)：测试覆盖了多少比例的条件分支(如 if/else 语句的两个分支)<br>
%Funcs(函数覆盖率)：测试覆盖了多少比例的函数或方法。<br>
%Lines(行覆盖率)：测试覆盖了多少比例的代码行。<br>
Uncovered Line #s(未覆盖的行号)：具体哪些代码行未被测试覆盖</p>

</div>
<div id="MySignature" role="contentinfo">
    <div style="width:818px;background:#f5f5f5; padding: 10px 10px 10px 10px; border: 1px dashed rgb(224, 224, 224); font-family: 微软雅黑; font-size: 13px;">
            <h1 style="font-size: 24px;"> 遇见问题，这是你成长的机会，如果你能够解决，这就是收获。 </h1>
		    <div style="padding:10px">
		        作者：<a href="https://www.cnblogs.com/IwishIcould/" target="_blank">晚来南风晚相识</a> <br>
		        出处：<a href="https://www.cnblogs.com/IwishIcould/">https://www.cnblogs.com/IwishIcould/</a> <br>
                        <p> 想问问题，打赏了卑微的博主，求求你备注一下的扣扣或者微信；这样我好联系你；(っ•̀ω•́)っ✎⁾⁾！</p>
		        <p>如果觉得这篇文章对你有小小的帮助的话，记得在右下角点个“推荐”哦，或者关注博主，在此感谢！</p>
		        <p> 万水千山总是情，打赏5毛买辣条行不行，所以如果你心情还比较高兴，也是可以扫码打赏博主(っ•̀ω•́)っ✎⁾⁾！</p>
                        <p> 想问问题，打赏了卑微的博主，求求你备注一下的扣扣或者微信；这样我好联系你；(っ•̀ω•́)っ✎⁾⁾！</p>
				<div style="display: flex;">
					<div style="margin-right: 100px;text-align: center;">
						<img src="//images.cnblogs.com/cnblogs_com/IwishIcould/1900124/t_201214043958支付宝收款码.jpg?a=1607924145179">
						<div>
							支付宝
						</div>
					</div>
					<div style="text-align: center;">
						<img src="//images.cnblogs.com/cnblogs_com/IwishIcould/1900124/t_20121604194271E6E296CCB71A007F4E22073D5EB64A.jpg">
						<div>微信</div>
					</div>
				</div>
		        本文版权归作者所有，欢迎转载，未经作者同意须保留此段声明，在文章页面明显位置给出原文连接 <br>
		        如果文中有什么错误，欢迎指出。以免更多的人被误导。 <br>
               
		    </div>
           
            
		</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0013982563657407407" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-28 22:13">2025-02-28 22:13</span>&nbsp;
<a href="https://www.cnblogs.com/IwishIcould">南风晚来晚相识</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18744206" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18744206);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18744206', targetLink: 'https://www.cnblogs.com/IwishIcould/p/18744206', title: '试试使用 Vitest 进行测试，确实可以减少bug' })">举报</a>
</div>
        