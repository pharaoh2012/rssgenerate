
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/TheMagicalRainbowSea/p/18721675" title="发布于 2025-02-18 11:55">
    <span role="heading" aria-level="2">13. Docker-compose容器编排(详解说明)</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="13-docker-compose容器编排详解说明">13. Docker-compose容器编排(详解说明)</h1>
<p>@</p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#13-docker-compose容器编排详解说明" rel="noopener nofollow">13. Docker-compose容器编排(详解说明)</a></li><li><a href="#1--docker-compose容器编排概述" rel="noopener nofollow">1.  Docker-compose容器编排概述</a></li><li><a href="#2-docker-compose-的安装详细步骤" rel="noopener nofollow">2. Docker-Compose 的安装详细步骤</a></li><li><a href="#3-docker-compose-核心概念" rel="noopener nofollow">3. Docker-Compose 核心概念</a></li><li><a href="#4-compose-常用命令" rel="noopener nofollow">4. Compose 常用命令</a></li><li><a href="#5-compose-编排微服务" rel="noopener nofollow">5. Compose 编排微服务</a></li><li><a href="#6-最后" rel="noopener nofollow">6. 最后：</a></li></ul></div><p></p>
<hr>
<h1 id="1--docker-compose容器编排概述">1.  Docker-compose容器编排概述</h1>
<p>Compose 是 Docker 公司推出的一个工具软件，可以管理多个 Docker 容器实例组成一个应用。你需要定义一个 YAML 格式的 配置文件 <code>docker-compose.yml</code> ，<strong>写好多个容器之间的调用关系</strong> 。然后，只要一个命令，就能同时启动/关闭这些容器。</p>
<blockquote>
<p><strong>Docker-Compose 是 Docker 官方的开源项目，负责实现对Docker容器集群的快速编排。</strong></p>
</blockquote>
<p>Docker 建议我们每一个容器中只运行一个服务，因为 docker 容器本身占用资源极少，所以最好是将每个服务单独的分割开来但是这样我们又面临了一个问题 ？</p>
<p>如果我需要同时部署好多个服务,难道要每个服务单独写 Dockerfile 然后在构建镜像，构建容，这样累都累死了，所以docker官方给我们提供了<code>docker-compose</code> 多服务部署的工具</p>
<p>例如要实现一个Web微服务项目，除了Web服务容器本身，往往还需要再加上后端的数据库 mysql服务容器，redis服务器，注册中心eureka，甚至还包括负载均衡容器等等。</p>
<p><strong>Compose 允许用户通过一个单独的 <code>docker-compose.yml模板文件（YAML 格式）</code> 来定义一组相关联的应用容器为一个项目（project）。</strong></p>
<p>可以很容易地用一个配置文件定义一个多容器的应用，然后使用一条指令安装这个应用的所有依赖，完成构建。Docker-Compose 解决了容器与容器之间如何管理编排的问题。</p>
<h1 id="2-docker-compose-的安装详细步骤">2. Docker-Compose 的安装详细步骤</h1>
<p>Docker-Compose 官网地址：<a href="https://docs.docker.com/compose/compose-file/compose-file-v3/" target="_blank" rel="noopener nofollow">https://docs.docker.com/compose/compose-file/compose-file-v3/</a></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250218114835316-438441559.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>Docker-Compose 官网下载地址：<a href="https://docs.docker.com/desktop/setup/install/linux/" target="_blank" rel="noopener nofollow">https://docs.docker.com/desktop/setup/install/linux/</a><br>
<img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250218114835331-563888604.png" alt="在这里插入图片描述" loading="lazy"></p>
<ol>
<li>安装 Docker-Compose 的命令：</li>
</ol>
<p>这里是从 github 当中下载下来的，可能会失败超时，失败了，大家多执行几下就好了。</p>
<pre><code class="language-sh">curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
</code></pre>
<p>如果实在是下载不到的话，就先从本地下载到后，上传到服务器上/虚拟机上</p>
<p>官方地址：<a href="https://github.com/docker/compose/releases/tag/1.29.2" target="_blank" rel="noopener nofollow">https://github.com/docker/compose/releases/tag/1.29.2</a></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250218114835288-149291389.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250218114835285-481638290.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>执行</p>
<pre><code class="language-sh">[root@localhost docker-compose]# mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose
</code></pre>
<p>对刚刚下载的二进制文件添加可执行权限</p>
<pre><code class="language-sh">chmod +x /usr/local/bin/docker-compose
</code></pre>
<p>通过docker-compose --version命令检查是否安装成功</p>
<pre><code class="language-sh">[root@localhost docker-compose]# docker-compose --versio
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250218114835320-1705283582.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>卸载方式：</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250218114835293-837782735.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="3-docker-compose-核心概念">3. Docker-Compose 核心概念</h1>
<p><strong>一个文件，两个要素</strong></p>
<ul>
<li>一个文件：</li>
</ul>
<p>Docker-Compose 的核心配置文件 <code>docker-compose.yml</code> ，文件名不可以随便起，就只能是这个。文件后缀也一样。</p>
<ul>
<li>两要素：</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250218114835275-1421500647.png" alt="在这里插入图片描述" loading="lazy"></p>
<blockquote>
<ol>
<li>服务（service）</li>
</ol>
<p><strong>一个应用容器实例一个服务</strong>，比如订单微服务、库存微服务、mysql容器、nginx容器或者redis容器</p>
<ol start="2">
<li>工程（project）</li>
</ol>
<p>由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。</p>
</blockquote>
<p><strong>Compose使用的三个步骤：</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250218114835297-1658287576.png" alt="在这里插入图片描述" loading="lazy"></p>
<blockquote>
<ol>
<li>编写Dockerfile定义各个微服务应用并构建出对应的镜像文件</li>
<li>使用 docker-compose.yml 定义一个完整业务单元，安排好整体应用中的各个容器服务。</li>
<li>最后，执行docker-compose up命令 来启动并运行整个应用程序，完成一键部署上线</li>
</ol>
</blockquote>
<h1 id="4-compose-常用命令">4. Compose 常用命令</h1>
<pre><code class="language-sh">Compose常用命令
docker-compose -h                           # 查看帮助
docker-compose up                           # 启动所有docker-compose服务
docker-compose up -d                        # 启动所有docker-compose服务并后台运行
docker-compose down                         # 停止并删除容器、网络、卷、镜像。
docker-compose exec  yml里面的服务id       # 进入容器实例内部  docker-compose exec docker-compose.yml文件中写的服务id /bin/bash
docker-compose ps                      # 展示当前docker-compose编排过的运行的所有容器
docker-compose top                     # 展示当前docker-compose编排过的容器进程
 
docker-compose logs  yml里面的服务id     # 查看容器输出日志
docker-compose config     # 检查配置
docker-compose config -q  # 检查配置，有问题才有输出
docker-compose restart   # 重启服务
docker-compose start     # 启动服务
docker-compose stop      # 停止服务
 

</code></pre>
<h1 id="5-compose-编排微服务">5. Compose 编排微服务</h1>
<ol>
<li>将在 IDEA 当中：编写好的微服务，<code>mvn package</code> 命令将微服务形成新的jar包<br>
并上传到 Linux 服务器 / mydocker目录下</li>
</ol>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250218114835344-1194100142.png" alt="在这里插入图片描述" loading="lazy"></p>
<ol start="2">
<li>编写Dockerfile文件</li>
</ol>
<blockquote>
<p>将 编写上传的微服务和 Dockerfile(首字母大写D) 放在同一个目录下。</p>
</blockquote>
<pre><code class="language-dockerfile"># 基础镜像使用java
FROM java:8
# 作者
MAINTAINER zzyy
# VOLUME 指定临时文件目录为/tmp，在主机/var/lib/docker目录下创建了一个临时文件并链接到容器的/tmp
VOLUME /tmp
# 将jar包添加到容器中并更名为zzyy_docker.jar
ADD docker_boot-0.0.1-SNAPSHOT.jar zzyy_docker.jar
# 运行jar包
RUN bash -c 'touch /zzyy_docker.jar'
ENTRYPOINT ["java","-jar","/zzyy_docker.jar"]
#暴露6001端口作为微服务
EXPOSE 6001
 

</code></pre>
<ol start="3">
<li>执行命令构建镜像文件对微服务。</li>
</ol>
<pre><code class="language-sh">docker build -t zzyy_docker:1.6 .
</code></pre>
<p><strong>不用Compose 存在的一些问题：</strong></p>
<blockquote>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250218114835264-1687710024.png" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<ol start="4">
<li>编写 docker-compose.yml 文件。</li>
</ol>
<p>注意文件名必须为<code>docker-compose.yml</code>，注意有一个横杠。</p>
<pre><code class="language-yml">version: "3"
 
services:
  microService:
    image: zzyy_docker:1.6
    container_name: ms01
    ports:
      - "6001:6001"
    volumes:
      - /app/microService:/data
    networks: 
      - atguigu_net 
    depends_on: 
      - redis
      - mysql
 
  redis:
    image: redis:6.0.8
    ports:
      - "6379:6379"
    volumes:
      - /app/redis/redis.conf:/etc/redis/redis.conf
      - /app/redis/data:/data
    networks: 
      - atguigu_net
    command: redis-server /etc/redis/redis.conf
 
  mysql:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: '123456'
      MYSQL_ALLOW_EMPTY_PASSWORD: 'no'
      MYSQL_DATABASE: 'db2021'
      MYSQL_USER: 'zzyy'
      MYSQL_PASSWORD: 'zzyy123'
    ports:
       - "3306:3306"
    volumes:
       - /app/mysql/db:/var/lib/mysql
       - /app/mysql/conf/my.cnf:/etc/my.cnf
       - /app/mysql/init:/docker-entrypoint-initdb.d
    networks:
      - atguigu_net
    command: --default-authentication-plugin=mysql_native_password #解决外部无法访问
 
networks: 
   atguigu_net: 
 

</code></pre>
<p><strong>修改微服务工程docker_boot</strong></p>
<blockquote>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250218114835241-904524179.png" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<blockquote>
<p>修改微服务工程的 yml 文件，通过服务名访问，不使用 IP 。</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250218114835332-1543411994.png" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<blockquote>
<p>mvn package命令将微服务形成新的jar包，并上传到Linux服务器/mydocker目录下</p>
<p>编写Dockerfile</p>
<pre><code class="language-dockerfile"># 基础镜像使用java
FROM java:8
# 作者
MAINTAINER zzyy
# VOLUME 指定临时文件目录为/tmp，在主机/var/lib/docker目录下创建了一个临时文件并链接到容器的/tmp
VOLUME /tmp
# 将jar包添加到容器中并更名为zzyy_docker.jar
ADD docker_boot-0.0.1-SNAPSHOT.jar zzyy_docker.jar
# 运行jar包
RUN bash -c 'touch /zzyy_docker.jar'
ENTRYPOINT ["java","-jar","/zzyy_docker.jar"]
#暴露6001端口作为微服务
EXPOSE 6001
 
 

</code></pre>
<p>重新构成镜像：<code>注意结尾：有一个空格，和一个小点。</code></p>
<pre><code class="language-sh">docker build -t zzyy_docker:1.6 .
</code></pre>
</blockquote>
<ol start="5">
<li>执行 docker-compose up 或者 执行 docker-compose up -d。启动 docker-compost</li>
</ol>
<pre><code class="language-sh">docker-compose up -d
</code></pre>
<pre><code class="language-sh">docker-compose up 
</code></pre>
<ol start="6">
<li>进入mysql容器实例并新建库db2021+新建表t_user，因为在我们 MySQL容器实例当中，还没有创建对应微服务需要的数据库和数据表。</li>
</ol>
<pre><code class="language-sh">docker exec -it 容器实例id /bin/bash
</code></pre>
<pre><code class="language-sh">mysql -uroot -p

</code></pre>
<pre><code class="language-mysql">create database db2021;
use db2021;
</code></pre>
<pre><code class="language-sql">CREATE TABLE `t_user` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(50) NOT NULL DEFAULT '' COMMENT '用户名',
  `password` VARCHAR(50) NOT NULL DEFAULT '' COMMENT '密码',
  `sex` TINYINT(4) NOT NULL DEFAULT '0' COMMENT '性别 0=女 1=男 ',
  `deleted` TINYINT(4) UNSIGNED NOT NULL DEFAULT '0' COMMENT '删除标志，默认0不删除，1删除',
  `update_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `create_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=INNODB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COMMENT='用户表';
</code></pre>
<p>测试成功，我们可以关闭服务：</p>
<pre><code class="language-sh">docker-compost stop
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250218114835318-1853925970.png" alt="在这里插入图片描述" loading="lazy"></p>
<blockquote>
<p>注意：在 docker-compose1.29.2的版本当中，每一个关于 compose 的命令，都是前面为 <code>docker-compose </code> 中间带有 <code>横杠</code>的不要漏了。</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250218114835302-497439408.png" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<h1 id="6-最后">6. 最后：</h1>
<blockquote>
<p>“在这个最后的篇章中，我要表达我对每一位读者的感激之情。你们的关注和回复是我创作的动力源泉，我从你们身上吸取了无尽的灵感与勇气。我会将你们的鼓励留在心底，继续在其他的领域奋斗。感谢你们，我们总会在某个时刻再次相遇。”</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250218114835392-973016767.gif" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.014861174505787037" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-18 11:56">2025-02-18 11:55</span>&nbsp;
<a href="https://www.cnblogs.com/TheMagicalRainbowSea">Rainbow-Sea</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18721675" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18721675);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18721675', targetLink: 'https://www.cnblogs.com/TheMagicalRainbowSea/p/18721675', title: '13. Docker-compose容器编排(详解说明)' })">举报</a>
</div>
	