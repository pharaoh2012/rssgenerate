
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/linx/p/18850950" title="发布于 2025-04-28 09:06">
    <span role="heading" aria-level="2">Web前端入门第 43 问：CSS 动画之过渡属性 transition 改变用户体验</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>CSS3 规范出现之前，要实现一个动画效果那必须借助 JavaScript 的能力才够得着，所以当时的前端开发但凡听到动画交互，那眉头可就成了一个川字儿了~</p>
<p>transition 的出现，改变了实现动画难的困境，也让前端的交互不再生硬，所有的页面元素如同有了灵性一般。</p>
<h2 id="transition-过渡">transition 过渡</h2>
<p>要实现一个 CSS 属性 <code>0 -&gt; 1</code> 的变化，在不使用 transition 的情况下，元素就两种状态 <code>0</code> 和 <code>1</code>，而 transition 则是将 0 -&gt; 1 之间的变化完全呈现给了用户，看起来就像是属性 0 慢慢的走到 1，而不是从 0 闪现到 1，期间元素走过了 <code>0.1</code> <code>0.2</code> <code>0.3</code> ... <code>1</code>，这种变化就叫过渡。</p>
<p><strong>transition 相关的 CSS 属性：</strong></p>
<ul>
<li><code>transition-property</code> 指定哪些 CSS 属性需要应用过渡动画</li>
<li><code>transition-duration</code> 定义动画持续时间</li>
<li><code>transition-timing-function</code> 控制动画速度变化曲线</li>
<li><code>transition-delay</code> 设置动画开始前的等待时间，也就是延迟执行</li>
<li><code>transition</code> 简写属性</li>
<li><code>will-change</code> 提前告知浏览器哪些属性会变化（优化性能）</li>
</ul>
<h3 id="transition-property">transition-property</h3>
<p><code>transition-property</code> 属性用于告诉浏览器哪个 CSS 属性要用来做过渡效果，可以是单个属性，也可以是多个属性，还可以是关键字 <code>all</code>。</p>
<p>语法：</p>
<pre><code class="language-css">transition-property: none; /* 无属性过渡 */
transition-property: all; /* 所有属性都添加过渡效果，出于性能考虑不建议使用 all */
transition-property: transform; /* 只对 transform 做过渡 */
transition-property: transform, opacity; /* 只对 transform 和 opacity 添加过渡 */
</code></pre>
<p>过渡动画必须几个属性同时设置才会有效，所以单个属性无法演示~</p>
<h3 id="transition-duration">transition-duration</h3>
<p><code>transition-duration</code> 属性用于设置过渡动画的持续时间，单位是秒（s）或毫秒（ms），默认是 0s，表示没有过渡动画。</p>
<p>需注意单位换算关系：<code>1s=1000ms</code></p>
<p>语法：</p>
<pre><code class="language-css">transition-duration: 0s; /* 无过渡动画 */
transition-duration: 0.5s; /* 所有属性都添加 0.5s 过渡 */
transition-duration: 0.5s, 200ms; /* transition-property 指定的第一个属性持续 0.5s，第二个属性持续 200ms */
</code></pre>
<h3 id="transition-timing-function">transition-timing-function</h3>
<p>transition-timing-function 用于设置速度曲线，控制动画速度变化，这里面有个叫做 <code>贝塞尔曲线</code> 的东东，顶级大佬做出来的都是一堆数学公式~~本文不会介绍如何绘制贝塞尔曲线，咱们学会怎么使用即可，如果对贝塞尔曲线绘制感兴趣可查找相关书籍。</p>
<p><strong>相关属性值：</strong></p>
<ul>
<li>
<p><code>ease</code> 默认值，在过渡的中间增加速度，在过渡结束时减慢速度。等于 <code>cubic-bezier(0.25, 0.1, 0.25, 1.0)</code></p>
</li>
<li>
<p><code>linear</code> 以均匀的速度过渡。等于 <code>cubic-bezier(0.0, 0.0, 1.0, 1.0)</code></p>
</li>
<li>
<p><code>ease-in</code> 开始缓慢，过渡速度逐渐增加，直到完成。等于 <code>cubic-bezier(0.42, 0, 1.0, 1.0)</code></p>
</li>
<li>
<p><code>ease-out</code> 开始快速过渡，随着过渡的继续而减慢。等于 <code>cubic-bezier(0, 0, 0.58, 1.0)</code></p>
</li>
<li>
<p><code>ease-in-out</code> 开始缓慢过渡，然后加速，然后再次减速。等于 <code>cubic-bezier(0.42, 0, 0.58, 1.0)</code></p>
</li>
<li>
<p><code>cubic-bezier(x1, y1, x2, y2)</code> 自定义贝塞尔曲线， <code>x1, y1</code> 和 <code>x2, y2</code> 分别代表曲线控制点坐标，其中 x1 和 x2 值必须在 0 到 1 的范围内。</p>
</li>
<li>
<p><code>step-start</code> 等于 <code>steps(1, jump-start)</code></p>
</li>
<li>
<p><code>step-end</code> 等于<code>steps(1, jump-end)</code></p>
</li>
<li>
<p><code>steps(n, &lt;jump-term&gt;)</code> 在过渡过程中显示n个停留点，每个停留点显示的时间长度相等。</p>
<p>例如：如果 n 是 5，那么就有 5 个步骤。过渡过程是在 0%、20%、40%、60% 和 80% 处暂时停留，还是在 20%、40%、60%、80% 和 100% 处停留，或者是在 0% 到 100% 之间设置5个停留点，亦或是包括0%和100%标记在内的5个停留点（在0%、25%、50%、75%和100%处），这取决于使用以下哪个 <code>&lt;jump-term&gt;</code>：</p>
<p>jump-start<br>
表示左连续函数，即第一个跳跃发生在过渡开始时；</p>
<p>jump-end<br>
表示右连续函数，即最后一个跳跃发生在动画结束时；</p>
<p>jump-none<br>
两端都没有跳跃。相反，在0%和100%标记处各自停留，每个停留点占持续时间的1/n；</p>
<p>jump-both<br>
在 0% 和 100% 标记处都包含暂停，实际上在过渡时间内增加了一个步骤；</p>
<p>start<br>
与 jump-start 相同。</p>
<p>end<br>
与 jump-end 相同。</p>
</li>
</ul>
<p>语言很空洞，看后面例子。</p>
<p>语法：</p>
<pre><code class="language-css">transition-timing-function: ease;
transition-timing-function: linear;
transition-timing-function: cubic-bezier(0.1, 0.7, 1, 0.1);
transition-timing-function: step-start;
transition-timing-function: steps(5, jump-end);
</code></pre>
<p>在使用 Chrome 调试工具时候，发现 <code>linear</code> 还有一种函数式的写法，查阅了兼容性，发现这种写法比较吃浏览器版本，都是 2023 年之后的浏览器版本才开始支持。写法如下：</p>
<pre><code class="language-css">/* 第一位表示运动进度，第二位表示时间百分比 */
transition-timing-function: linear(
  0 0%,
  0.22 2.1%,
  0.86 6.5%,
  1.11 8.6%,
  1.3 10.7%,
  1.35 11.8%,
  1.37 12.9%,
  1.37 13.7%,
  1.36 14.5%,
  1.32 16.2%,
  1.03 21.8%,
  0.94 24%,
  0.89 25.9%,
  0.88 26.85%,
  0.87 27.8%,
  0.87 29.25%,
  0.88 30.7%,
  0.91 32.4%,
  0.98 36.4%,
  1.01 38.3%,
  1.04 40.5%,
  1.05 42.7%,
  1.05 44.1%,
  1.04 45.7%,
  1 53.3%,
  0.99 55.4%,
  0.98 57.5%,
  0.99 60.7%,
  1 68.1%,
  1.01 72.2%,
  1 86.7%,
  1 100%
)
</code></pre>
<h3 id="transition-delay">transition-delay</h3>
<p><code>transition-delay</code> 属性用于设置过渡动画开始前的等待时间，单位是秒（s）或毫秒（ms），默认是 0s，表示不用延迟。语法与 transition-duration 一样。</p>
<h3 id="transition">transition</h3>
<p>简写属性，同时设置 <code>transition-property</code>、<code>transition-duration</code>、<code>transition-timing-function</code>、<code>transition-delay</code> 四个属性。</p>
<p>语法：</p>
<pre><code class="language-css">transition: transform 3s; /* transform 属性添加 3s 过渡 */
transition: transform 3s 0.5s; /* transform 属性添加 3s 过渡，延迟 0.5s 开始 */
transition: transform 3s ease-in-out; /* transform 属性添加 3s 过渡，使用 ease-in-out 速度曲线 */
transition: transform 3s ease-in-out 0.5s; /* transform 属性添加 3s 过渡，使用 ease-in-out 速度曲线，延迟 0.5s 开始 */
</code></pre>
<h3 id="will-change">will-change</h3>
<p><strong>will-change 这是一般双刃剑，用得好可以优化性能，用得不好反而会使用大量机器资源导致页面变慢！！</strong></p>
<p>使用准则：此属性应当作为最后的手段使用，不要过早优化，如果您的页面未出现卡顿变慢，那么您不需要使用这个属性！</p>
<p>使用方式：</p>
<pre><code class="language-css">will-change: transform; /* 提前分配 GPU 资源，优化 transform 变化 */
</code></pre>
<h2 id="效果演示">效果演示</h2>
<h3 id="不同曲线效果">不同曲线效果</h3>
<p>不同曲线会影响动画运动速度。</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;div class="child"&gt;ease&lt;/div&gt;
  &lt;div class="child"&gt;linear&lt;/div&gt;
  &lt;div class="child"&gt;ease-in&lt;/div&gt;
  &lt;div class="child"&gt;ease-out&lt;/div&gt;
  &lt;div class="child"&gt;ease-in-out&lt;/div&gt;
  &lt;div class="child"&gt;cubic-bezier&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    width: calc(235px * 3);
    /* height: calc(100px * 3); */
  }
  .child {
    border: 2px solid rgba(255, 71, 87,1);
    border-radius: 40px;
    width: 100px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    transition-duration: 2s;
    transition-property: transform;
  }
  .child:nth-child(1) {
    transition-timing-function: ease;
  }
  .child:nth-child(2) {
    transition-timing-function: linear;
  }
  .child:nth-child(3) {
    transition-timing-function: ease-in;
  }
  .child:nth-child(4) {
    transition-timing-function: ease-out;
  }
  .child:nth-child(5) {
    transition-timing-function: ease-in-out;
  }
  .child:nth-child(6) {
    transition-timing-function: cubic-bezier(0, 1.59, .83, .67);
  }
  
  .box:hover .child {
    /* 鼠标放在box上时，子元素向右移动605px */
    transform: translateX(605px);
  }
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250428090459311-1385213126.gif" alt="" width="500" loading="lazy"></p>
<h3 id="steps-逐帧动画效果">steps 逐帧动画效果</h3>
<p>steps 可以理解为关键帧动画，每次都跳到一个关键帧。</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;div class="child"&gt;step-start&lt;/div&gt;
  &lt;div class="child"&gt;step-end&lt;/div&gt;
  &lt;div class="child"&gt;steps(5, start)&lt;/div&gt;
  &lt;div class="child"&gt;steps(5, jump-start)&lt;/div&gt;
  &lt;div class="child"&gt;steps(5, jump-end)&lt;/div&gt;
  &lt;div class="child"&gt;steps(5, jump-none)&lt;/div&gt;
  &lt;div class="child"&gt;steps(5, jump-both)&lt;/div&gt;
  &lt;div class="child"&gt;steps(5, start)&lt;/div&gt;
  &lt;div class="child"&gt;steps(5, end)&lt;/div&gt;
&lt;/div&gt;

&lt;style&gt;
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    width: calc(235px * 3);
  }
  .child {
    border: 2px solid rgba(255, 71, 87,1);
    border-radius: 40px;
    width: 170px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    transition-duration: 2s;
    transition-property: transform;
  }
  .child:nth-child(1) {
    transition-timing-function: step-start;
  }
  .child:nth-child(2) {
    transition-timing-function: step-end;
  }
  .child:nth-child(3) {
    transition-timing-function: steps(5, start);
  }
  .child:nth-child(4) {
    transition-timing-function: steps(5, jump-start);
  }
  .child:nth-child(5) {
    transition-timing-function: steps(5, jump-end);
  }
  .child:nth-child(6) {
    transition-timing-function: steps(5, jump-none);
  }
  .child:nth-child(7) {
    transition-timing-function: steps(5, jump-both);
  }
  .child:nth-child(8) {
    transition-timing-function: steps(5, start);
  }
  .child:nth-child(9) {
    transition-timing-function: steps(5, end);
  }
  
  .box:hover .child {
    /* 鼠标放在box上时，子元素向右移动535px */
    transform: translateX(535px);
  }
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250428090511343-1488465619.gif" alt="" width="500" loading="lazy"></p>
<h3 id="不同持续时间">不同持续时间</h3>
<p>持续时间越短，运动越快。</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;div class="child"&gt;1s&lt;/div&gt;
  &lt;div class="child"&gt;2s&lt;/div&gt;
  &lt;div class="child"&gt;500ms&lt;/div&gt;
  &lt;div class="child"&gt;1500ms&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    width: calc(235px * 3);
  }
  .child {
    border: 2px solid rgba(255, 71, 87,1);
    border-radius: 40px;
    width: 100px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    transition-property: transform;
  }
  .child:nth-child(1) {
    transition-duration: 1s;
  }
  .child:nth-child(2) {
    transition-duration: 2s;
  }
  .child:nth-child(3) {
    transition-duration: 500ms;
  }
  .child:nth-child(4) {
    transition-duration: 1500ms;
  }
  
  .box:hover .child {
    /* 鼠标放在box上时，子元素向右移动605px */
    transform: translateX(605px);
  }
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250428090519505-596977785.gif" alt="" width="500" loading="lazy"></p>
<h3 id="不同延迟时间">不同延迟时间</h3>
<p>延迟时间越长，动画等待时间越久。</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;div class="child"&gt;1s&lt;/div&gt;
  &lt;div class="child"&gt;2s&lt;/div&gt;
  &lt;div class="child"&gt;500ms&lt;/div&gt;
  &lt;div class="child"&gt;1500ms&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    width: calc(235px * 3);
  }
  .child {
    border: 2px solid rgba(255, 71, 87,1);
    border-radius: 40px;
    width: 100px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    transition-duration: 2s;
    transition-property: transform;
  }
  .child:nth-child(1) {
    transition-delay: 1s;
  }
  .child:nth-child(2) {
    transition-delay: 2s;
  }
  .child:nth-child(3) {
    transition-delay: 500ms;
  }
  .child:nth-child(4) {
    transition-delay: 1500ms;
  }
  
  .box:hover .child {
    /* 鼠标放在box上时，子元素向右移动605px */
    transform: translateX(605px);
  }
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250428090525904-2094917472.gif" alt="" width="500" loading="lazy"></p>
<h2 id="贝塞尔曲线">贝塞尔曲线</h2>
<p>Chrome 开发者工具内置曲线调试工具：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250428090534219-940493316.png" alt="" width="300" loading="lazy"></p>
<p>点击 <code>1</code> 可以呼出调试工具，<code>2</code> 可以切换不同类型的曲线，<code>3</code> 可以切换同类型的不同曲线，<code>4</code> 可以拖拽手柄绘制不同曲线。</p>
<p>这里再分享一个在线绘制贝塞尔曲线的链接：<a href="https://yisibl.github.io/cubic-bezier/" target="_blank" rel="noopener nofollow">https://yisibl.github.io/cubic-bezier/</a></p>
<p>图解贝塞尔曲线：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250428090551020-504543753.png" alt="" width="300" loading="lazy"></p>
<p>图中红色箭头指向的红点表示：在动画执行 37% 时间的时候要运动到目标的 53% 位置。</p>
<p>图中 1（x1, y1） 和 2（x2, y2） 分别表示控制贝塞尔取消的两个坐标点，cubic-bezier(x1, y1, x2, y2)。</p>
<p>贝塞尔曲线越陡峭，表示速度越快。</p>
<h2 id="总结">总结</h2>
<ol>
<li>在使用 transition 过渡动画时，必须要有触发条件！比如鼠标放上时、鼠标离开时、元素的 class 变化等。</li>
<li>transition 无法做到让元素无休止的运动下去，过渡动画必须有持续时间！</li>
<li>transition-property 应当尽可能少的使用 <code>all</code>（浏览器需要监控元素的所有可过渡属性）。</li>
<li>transition-property 指定的属性必须是可量化的属性，比如 transform、background-color、color 等，不能是 display、float、font-style 这种无法计算的属性。</li>
<li>避免过渡 margin/width 等布局属性（易引发重排，性能差）</li>
</ol>

</div>
<div id="MySignature" role="contentinfo">
    <p>&nbsp;</p>
<p style="font-size: 18px;font-weight: bold;"><span style="color:rgb(255, 71, 87)">文章正在持续更新中...</span>，首发微信公众号【<span style="color:rgb(255, 71, 87)">前端路引</span>】，欢迎关注公众号获取最新文章。</p>
<p>
  <img style="max-width: 320px;" src="https://images.cnblogs.com/cnblogs_com/linx/2447020/o_250228035031_%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png">
</p>
<p>本文来自博客园，作者：<a href="https://www.cnblogs.com/linx/" target="_blank">前端路引</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/linx/p/18850950" target="_blank">https://www.cnblogs.com/linx/p/18850950</a></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.13450010739583335" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-28 09:07">2025-04-28 09:06</span>&nbsp;
<a href="https://www.cnblogs.com/linx">前端路引</a>&nbsp;
Views(<span id="post_view_count">68</span>)&nbsp;
Comments(<span id="post_comment_count">2</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18850950);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18850950', targetLink: 'https://www.cnblogs.com/linx/p/18850950', title: 'Web前端入门第 43 问：CSS 动画之过渡属性 transition 改变用户体验' })">举报</a>
</div>
	