
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fkxxgis/p/18906332" title="发布于 2025-06-01 18:27">
    <span role="heading" aria-level="2">Ubuntu部署tensorflow（CPU/GPU）方法</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        本文介绍在Linux操作系统的发行版本Ubuntu中，配置可以用CPU或GPU运行的Python新版本深度学习库tensorflow的方法~
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>  本文介绍在<strong>Linux</strong>操作系统的发行版本<strong>Ubuntu</strong>中，配置可以用<strong>CPU</strong>或<strong>GPU</strong>运行的<strong>Python</strong>新版本深度学习库<code>tensorflow</code>的方法。</p>
<p>  在文章<a href="https://www.cnblogs.com/fkxxgis/p/18345002" target="_blank">部署CPU与GPU通用的tensorflow：Anaconda环境</a>以及<a href="https://www.cnblogs.com/fkxxgis/p/18894392" target="_blank">部署可使用GPU的tensorflow库</a>中，我们已经介绍了<strong>Windows</strong>平台下，配置<strong>CPU</strong>、<strong>GPU</strong>版本的<code>tensorflow</code>库的方法；而在本文中，我们就介绍一下在<strong>Linux Ubuntu</strong>环境中，<strong>CPU</strong>与<strong>GPU</strong>版本<code>tensorflow</code>库的配置方法。</p>
<p>  本文分文两部分，第<code>1</code>部分为<strong>CPU</strong>版本的<code>tensorflow</code>库的配置方法，第<code>2</code>部分则为<strong>GPU</strong>版本的<code>tensorflow</code>库的配置方法；如果大家的电脑有<strong>GPU</strong>，那么就直接跳过第<code>1</code>部分，从本文的第<code>2</code>部分开始看起就好。需要明确的是，本文的<strong>Python</strong>版本为<code>3.10</code>，是一个比较新的版本；但是如果大家的<strong>Python</strong>是其他版本也没问题，整体配置的思路都是一样的。</p>
<h1 id="1-cpu版本">1 CPU版本</h1>
<p>  首先，我们介绍一下<strong>CPU</strong>版本的<code>tensorflow</code>库的配置方法。</p>
<p>  配置<strong>CPU</strong>版本的<code>tensorflow</code>库可以说是非常简单。首先，建议大家按照文章<a href="https://www.cnblogs.com/fkxxgis/p/18254161" target="_blank">在Ubuntu系统安装Anaconda及Python</a>中提及的内容，首先配置好<strong>Anaconda</strong>环境；其次，如果大家需要在虚拟环境中配置<code>tensorflow</code>库，那么就可以自行创建一个虚拟环境后开始后续的操作——我这里就直接在默认的环境，也就是<code>base</code>环境中加以配置了。</p>
<p>  我们可以通过在终端中输入如下的代码，查看当前<strong>Anaconda</strong>环境中的环境。</p>
<pre><code class="language-bash">conda info -e
</code></pre>
<p>  运行上述代码，将得到如下图所示的情况。其中，可以看到我这里因为没有创建虚拟环境，因此就是只有一个<code>base</code>环境。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182046068-679871456.png" alt="image" loading="lazy"></p>
<p>  随后，我们在终端中输入如下的代码，安装<code>tensorflow</code>库。</p>
<pre><code class="language-bash">conda install tensorflow
</code></pre>
<p>  运行上述代码，我们将自动开始安装当前环境（也就是<strong>Python</strong>版本）支持的最新版本的<code>tensorflow</code>库；如下图所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182038543-1833087279.png" alt="" loading="lazy"></p>
<p>  安装完毕后，就将出现如下图所示的界面。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182038804-1406440870.png" alt="" loading="lazy"></p>
<p>  至此，我们就完成了<strong>CPU</strong>版本的<code>tensorflow</code>库的配置。我们按照文章<a href="https://www.cnblogs.com/fkxxgis/p/18894392" target="_blank">部署可使用GPU的tensorflow库</a>中提及的方法，在<strong>Python</strong>中输入如下的代码，检验当前<code>tensorflow</code>库是否支持<strong>GPU</strong>运算。</p>
<pre><code class="language-python">import tensorflow as tf
print(tf.config.list_physical_devices("GPU"))
</code></pre>
<p>  运行上述代码，如果得到如下图所示的一个空列表<code>[]</code>，则表示当前<code>tensorflow</code>库并不支持<strong>GPU</strong>运算——当然这个是肯定的，我们这里配置的就是<strong>CPU</strong>版本的<code>tensorflow</code>库，自然是无法在<strong>GPU</strong>中加以运算了。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182039729-701559081.png" alt="" loading="lazy"></p>
<p>  至此，<code>tensorflow</code>库也可以正常使用了，但是他只能支持<strong>CPU</strong>运算。这里有必要提一句，其实我们通过前述方法配置的<code>tensorflow</code>库，其自身原理上也是支持<strong>GPU</strong>运算的——因为在<strong>Linux</strong>操作系统中，从<code>tensorflow</code>库的<code>1.15</code>版本以后，就不再区分<strong>CPU</strong>与<strong>GPU</strong>版本了，只要下载了<code>tensorflow</code>库，那么他自身就是<strong>CPU</strong>与<strong>GPU</strong>都支持的；我们目前到此为止配置的<code>tensorflow</code>库之所以不能在<strong>GPU</strong>中加以运行，是因为我们还没有将<strong>GPU</strong>运算需要的其他依赖项配置好（或者是电脑中完全就没有<strong>GPU</strong>）。</p>
<h1 id="2-gpu版本">2 GPU版本</h1>
<p>  接下来，我们介绍一下<strong>GPU</strong>版本的<code>tensorflow</code>库的配置方法。</p>
<h2 id="21-nvidia-driver配置">2.1 NVIDIA Driver配置</h2>
<p>  首先，我们需要对<strong>NVIDIA</strong>驱动程序加以配置。<strong>NVIDIA</strong>驱动程序是用于<strong>NVIDIA</strong>显卡的软件，它可以控制<strong>NVIDIA</strong>显卡的功能和性能，并确保它们与操作系统和其他软件正常配合工作。</p>
<p>  首先，我们可以先在终端中输入如下的代码。</p>
<pre><code class="language-bash">nvidia-smi
</code></pre>
<p>  随后，正常情况下应该出现如下图所示的情况。如果大家此时出现的是其他情况，就表明要么没有安装任何<strong>NVIDIA</strong>驱动程序，要么是安装了<strong>NVIDIA</strong>驱动程序但是这一驱动的版本有问题。这里我们可以先不管，大家继续往下看即可。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182041359-809747084.png" alt="" loading="lazy"></p>
<p>  接下来，我们就开始安装<strong>NVIDIA</strong>驱动程序。其中，这里提供<code>3</code>种不同的方法，但是建议大家用最后一种。</p>
<h3 id="211-方法一不推荐">2.1.1 方法一（不推荐）</h3>
<p>  第<code>1</code>种方法，我们直接在终端中输入如下的代码即可。</p>
<pre><code class="language-bash">sudo ubuntu-drivers autoinstall
</code></pre>
<p>  一般情况下，这一代码将会自动下载或更新我们电脑中的驱动，其中<strong>NVIDIA</strong>驱动程序也会跟着一并下载或更新。但是这一方法我尝试之后发现，并没有效果，因此这一方法应该是和大家电脑的状态有关系，不一定百分之百成功，因此并不推荐。</p>
<h3 id="212-方法二不推荐">2.1.2 方法二（不推荐）</h3>
<p>  第<code>2</code>种方法，是直接到<strong>NVIDIA</strong>驱动程序的官方网站中下载；但是这一方法比较麻烦，因此我这里也并不推荐。</p>
<p>  首先，我们进入<strong>NVIDIA</strong>驱动程序的<a href="https://www.nvidia.cn/Download/index.aspx?lang=cn" target="_blank" rel="noopener nofollow">官方网站</a>，并在如下图所示的界面处，依据自己电脑中显卡的型号、电脑的系统等加以选择。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182038585-1229951336.png" alt="" loading="lazy"></p>
<p>  随后，点击“<strong>搜索</strong>”选项，将会出现最合适大家的<strong>NVIDIA</strong>驱动程序，并点击“<strong>下载</strong>”即可。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182039267-1904103339.png" alt="" loading="lazy"></p>
<p>  随后，大家在终端中，安装刚刚下载好的<strong>NVIDIA</strong>驱动程序即可。</p>
<h3 id="213-方法三推荐">2.1.3 方法三（推荐）</h3>
<p>  第<code>3</code>种方法，是最为推荐的方法。</p>
<p>  首先，大家在终端中输入如下的代码。</p>
<pre><code class="language-bash">ubuntu-drivers devices
</code></pre>
<p>  随后，将出现如下图所示的界面；其中，出现<code>recommended</code>的<strong>NVIDIA</strong>驱动程序版本，就是我们电脑中最合适的版本；大家此时需要记录一下这个版本号，后续需要用到。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182041020-629788068.png" alt="" loading="lazy"></p>
<p>  接下来，我们在终端中输入如下的代码。</p>
<pre><code class="language-bash">sudo apt install nvidia-driver-525
</code></pre>
<p>  其中，上述代码最后的<code>525</code>就是我们上图中，记录下来的版本号，大家依据自己的实际情况来修改上述代码即可。运行代码后，将出现如下图所示的情况，即这一版本的<strong>NVIDIA</strong>驱动程序将开始下载与安装。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182038685-84965216.png" alt="" loading="lazy"></p>
<p>  如果大家随后的下载、安装都很顺利，那么久没事了；但是有的时候，会出现如下图所示的错误提示。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182041738-1202651655.png" alt="" loading="lazy"></p>
<p>  此时，表明我们电脑中原有的<strong>NVIDIA</strong>驱动程序与新下载的版本有了冲突，导致新的版本无法正常安装。此时，我们需要在终端中，依次输入如下的代码，记得每次输入一行即可。</p>
<pre><code class="language-bash">sudo apt-get purge nvidia*
sudo apt-get purge libnvidia*
sudo apt-get --purge remove nvidia-*
sudo dpkg --list | grep nvidia-*
</code></pre>
<p>  上述代码中，前<code>3</code>行表示删除原有的<strong>NVIDIA</strong>驱动程序及其相关内容，最后一句用来检测，原有的<strong>NVIDIA</strong>驱动程序是不是被删除干净了。如果大家出现如下图所示的情况，即输入上述最后一句代码后什么提示信息都没有出现，那么就说明原有的<strong>NVIDIA</strong>驱动程序已经删除干净了。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182038570-553224167.png" alt="" loading="lazy"></p>
<p>  此时，我们可以再执行一次如下的代码。</p>
<pre><code class="language-bash">ubuntu-drivers devices
</code></pre>
<p>  但此时，和前文中不一样的是，或许可以看到出现<code>recommended</code>的<strong>NVIDIA</strong>驱动程序版本发生了变化，例如我这里不再是前面的<code>525</code>了，而是另一个版本；但是这里我们不用管这个变化，之后还是下载<code>525</code>版本即可。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182040123-431672929.png" alt="" loading="lazy"></p>
<p>  接下来，我们还是运行以下代码。</p>
<pre><code class="language-bash">sudo apt install nvidia-driver-525
</code></pre>
<p>  其中，上述代码最后的<code>525</code>就是我这里的版本号，大家还是要记得修改一下。此时，我们就可以正常下载、安装指定版本的<strong>NVIDIA</strong>驱动程序了。</p>
<p>  此时，我们再一次在终端中输入如下的代码。</p>
<pre><code class="language-bash">nvidia-smi
</code></pre>
<p>  随后，正常情况下应该出现如下图所示的情况。其中，可以留意一下下图的右上角，表示<strong>CUDA</strong>版本最高支持<code>12.0</code>，再新的版本就不支持了——当然，这个<strong>CUDA</strong>具体是什么，以及怎么配置，我们接下来会提到，这里就是先留意一下即可。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182039273-346656770.png" alt="" loading="lazy"></p>
<p>  还有一点需要注意，如果输入前述代码后，出现的是如下图所示的情况，那么还是说明我们此时电脑中原有的<strong>NVIDIA</strong>驱动程序与新下载的版本有了冲突，大家重新执行一下前文中删除电脑中原有的<strong>NVIDIA</strong>驱动程序的<code>3</code>句代码即可。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182039473-2005605200.png" alt="" loading="lazy"></p>
<p>  随后，我们还可以输入如下的代码。</p>
<pre><code class="language-text">nvidia-settings
</code></pre>
<p>  如果出现如下图所示的情况，即一个新的名为“<strong>NVIDIA X Server Settings</strong>”的窗口被打开，即说明我们前述的配置没有问题。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182039480-1856466181.png" alt="" loading="lazy"></p>
<p>  至此，我们完成了<strong>NVIDIA</strong>驱动程序的配置工作。</p>
<h2 id="22-cuda配置">2.2 CUDA配置</h2>
<p>  接下来，我们进行<strong>CUDA</strong>的配置；<strong>CUDA</strong>是<strong>NVIDIA</strong>发明的一种并行计算平台和编程模型。</p>
<p>  首先，我们需要到<code>tensorflow</code>库的<a href="https://www.tensorflow.org/install/source" target="_blank" rel="noopener nofollow">官方网站</a>中，下拉找到如下图所示的<code>tensorflow</code>库版本与对应的<strong>CUDA</strong>、<strong>cuDNN</strong>版本匹配表格，并结合自己的<strong>Python</strong>版本，选择确定自己需要哪一个版本的<code>tensorflow</code>库，并进一步确定自己<strong>CUDA</strong>、<strong>cuDNN</strong>的版本。其中，如下图紫色框所示，由于我这里<strong>Python</strong>版本是<code>3.10</code>的，因此只能选择紫色框内的版本；随后，想着用新版本的<code>tensorflow</code>库，因此我就选择用第一行对应的<strong>CUDA</strong>、<strong>cuDNN</strong>版本了。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182038622-917879231.png" alt="" loading="lazy"></p>
<p>  随后，我们到<strong>CUDA</strong>的<a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener nofollow">官方网站</a>中，首先按照如下图所示的方法，基于自己电脑的型号选择对应的内容；其中，注意最后一个选项要选择<code>runfile (local)</code>。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182041494-1163692807.png" alt="" loading="lazy"></p>
<p>  随后，网站将根据我们的选择，自动展示最新版本的<strong>CUDA</strong>。但是要注意，网站中给我们的选择，默认是最新的版本，而我们需要根据前文提到的<code>tensorflow</code>库版本与对应的<strong>CUDA</strong>、<strong>cuDNN</strong>版本匹配表格，确定我们需要的版本。例如，如下图前<code>3</code>个紫色框所示，网站中给出的<strong>CUDA</strong>版本是<code>12.1.1</code>的，而我需要的版本是<code>11.8</code>的，因此就需要通过下图中“<strong>Archive of Previous CUDA Releases</strong>”选项，找到老版本的<strong>CUDA</strong>。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182040778-1353781548.png" alt="" loading="lazy"></p>
<p>  如下图所示，我们这里找到<code>11.8</code>版本的<strong>CUDA</strong>，点击即可。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182039595-869444686.png" alt="" loading="lazy"></p>
<p>  随后，将出现<code>11.8</code>版本的<strong>CUDA</strong>的安装方法，我们就在终端中，先后输入网站中此时展示出来的两句代码即可。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182040190-719322058.png" alt="" loading="lazy"></p>
<p>  随后，即可开始安装<strong>CUDA</strong>。其中，如果大家在安装时，出现如下图所示的提示，一般情况下是由于电脑中安装有老版本<strong>CUDA</strong>导致的；但是也不用专门去管他，选择“<strong>Continue</strong>”选项即可。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182039992-1433396912.png" alt="" loading="lazy"></p>
<p>  随后，大家要注意，在如下图所示的界面中，取消选中<strong>Driver</strong>前面的叉号，从而取消<strong>NVIDIA</strong>驱动程序的安装，因为我们已经在前面安装过这个驱动了。随后，即可选择“<strong>Install</strong>”。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182038526-837462087.png" alt="" loading="lazy"></p>
<p>  接下来，我们即可开始安装<strong>CUDA</strong>，安装完毕后将会出现如下图所示的界面。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182040221-565369903.png" alt="" loading="lazy"></p>
<p>  至此，我们完成了<strong>CUDA</strong>的安装操作，但是需要进一步配置对应的环境变量。首先，在终端中输入如下的代码。</p>
<pre><code class="language-bash">vim ~/.bashrc
</code></pre>
<p>  这句代码表示，我们将打开<code>bashrc</code>这一文件，并对其加以编辑，从而实现对环境变量的配置。运行上述代码后，我们将看到类似如下图所示的界面。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182039579-1969921394.png" alt="" loading="lazy"></p>
<p>  随后，我们按下<code>i</code>键，开始对<code>bashrc</code>这一文件加以编辑。通过调整鼠标的位置，从而在<code>bashrc</code>文件的末尾增添如下的内容。</p>
<pre><code class="language-bash">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64
export PATH=$PATH:/usr/local/cuda/bin
export CUDA_HOME=$CUDA_HOME:/usr/local/cuda
</code></pre>
<p>  此时，我们将得到如下图所示的情况。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182039702-211104907.png" alt="" loading="lazy"></p>
<p>  接下来，我们首先按下<code>Esc</code>键退出编辑模式；接下来，输入<code>:wq</code>，表示保存并退出<code>bashrc</code>这一文件。此时，应该会出现如下图所示的界面。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182040769-1042091104.png" alt="" loading="lazy"></p>
<p>  接下来，我们分别在终端中输入如下所示的两句代码。</p>
<pre><code class="language-bash">source ~/.bashrc
nvcc --version
</code></pre>
<p>  其中，第一句表示更新<code>bashrc</code>文件，使得我们刚刚修改的环境变量立即生效；第二句则是验证<strong>CUDA</strong>安装情况的代码。如果运行以上两句代码后，出现如下图所示的界面，则表明我们的<strong>CUDA</strong>配置与环境变量配置都已经完成。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182039644-2044682025.png" alt="" loading="lazy"></p>
<p>  至此，我们就完成了这一部分的配置工作。</p>
<h2 id="23-cudnn配置">2.3 cuDNN配置</h2>
<p>  接下来，我们开始配置<strong>cuDNN</strong>。<strong>cuDNN</strong>是一个<strong>GPU</strong>加速的深度神经网络基元库，能够以高度优化的方式实现标准例程（如前向和反向卷积、池化层、归一化和激活层）。这里还是要看一下前文提及的那个<code>tensorflow</code>库版本与对应的<strong>CUDA</strong>、<strong>cuDNN</strong>版本匹配表格，明确我们需要下载哪一个版本的<strong>cuDNN</strong>。</p>
<p>  首先，我们进入<strong>cuDNN</strong>的<a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="noopener nofollow">官方网站</a>；要下载<strong>cuDNN</strong>之前，我们需要先注册一下，不过注册流程也比较快，几分钟就可以完成。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182038583-745096035.png" alt="" loading="lazy"></p>
<p>  随后，我们在网站中找到对应版本的<strong>cuDNN</strong>。这里需要注意，如果我们需要的<strong>cuDNN</strong>版本并不是最新的，那么就需要在下图中“<strong>Archived cuDNN Releases</strong>”选项中找到老版本。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182039640-620253518.png" alt="" loading="lazy"></p>
<p>  我这里需要<code>8.6</code>版本的<strong>cuDNN</strong>，因此就需要从上图所示的位置中找到这一个版本的下载链接，并开始下载。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182039946-37735583.png" alt="" loading="lazy"></p>
<p>  下载完毕后，我们首先在终端中通过如下的命令进入下载路径；当然如果大家的下载路径不一样的话，就自行对下面这句代码加以修改即可。</p>
<pre><code class="language-bash">cd ~/Downloads
</code></pre>
<p>  随后，输入如下的代码；这里需要注意，下面代码中的<code>8.x.x.x</code>这一部分，大家需要结合自己下载后获得<strong>安装包中具体的版本数字</strong>来修改。这一句代码的作用是启动我们本地的存储库。</p>
<pre><code class="language-bash">sudo dpkg -i cudnn-local-repo-${OS}-8.x.x.x_1.0-1_amd64.deb
</code></pre>
<p>  运行上述代码，如下图所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182040812-1429009977.png" alt="" loading="lazy"></p>
<p>  接下来，依次逐行输入如下所示的代码。其中，下面代码中的<code>8.x.x.x</code>这一部分，大家还是需要结合自己下载后获得安装包中具体的版本数字来修改；而同时<code>X.Y</code>这一部分，我们则需要根据前面选择的<strong>CUDA的版本</strong>来修改。例如，我前面下载的<strong>CUDA</strong>版本是<code>11.8</code>的，因此这个<code>X.Y</code>就是<code>11.8</code>。这三句代码的作用依次是：导入<strong>CUDA</strong>的<strong>GPG</strong>密钥、刷新存储库的元数据、安装运行时库。</p>
<pre><code class="language-bash">sudo cp /var/cudnn-local-repo-*/cudnn-local-*-keyring.gpg /usr/share/keyrings/
sudo apt-get update
sudo apt-get install libcudnn8=8.x.x.x-1+cudaX.Y
</code></pre>
<p>  如下图第一行、第二行代码所示，就是我这里输入的上述第三句代码的具体内容。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182039421-408399317.png" alt="" loading="lazy"></p>
<p>  随后，我们继续在终端中输入如下的代码，同样记得修改自己的版本号。这句代码的作用是安装开发者库。</p>
<pre><code class="language-bash">sudo apt-get install libcudnn8-dev=8.x.x.x-1+cudaX.Y
</code></pre>
<p>  如下图所示，就是我这里输入的具体内容。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182038861-1927832910.png" alt="" loading="lazy"></p>
<p>  随后，我们继续在终端中输入如下的代码，同样记得修改自己的版本号。这句代码的作用是安装代码样例。</p>
<pre><code class="language-bash">sudo apt-get install libcudnn8-samples=8.x.x.x-1+cudaX.Y
</code></pre>
<p>  如下图所示，就是我这里输入的具体内容。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182041108-1765299795.png" alt="" loading="lazy"></p>
<p>  以上就是<strong>cuDNN</strong>的安装具体过程，接下来我们需要验证其是否安装正确。这一个验证过程稍微麻烦一些，但是其实流程也比较快。我们在终端中，依次逐行输入如下的代码即可。</p>
<pre><code class="language-bash">cp -r /usr/src/cudnn_samples_v8/ $HOME
cd  $HOME/cudnn_samples_v8/mnistCUDNN
sudo apt-get install libfreeimage3 libfreeimage-dev
make clean &amp;&amp; make
./mnistCUDNN
</code></pre>
<p>  如果大家运行完上述代码后，得到如下图所示的结果，出现<code>Test passed!</code>这个字样，就表明我们的<strong>cuDNN</strong>也已经配置完毕。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182039398-1182364004.png" alt="" loading="lazy"></p>
<p>  至此，<strong>cuDNN</strong>就已经成功配置了。</p>
<h2 id="24-tensorflow库配置">2.4 tensorflow库配置</h2>
<p>  接下来，我们终于到了最后一步，也就是<code>tensorflow</code>库的配置了。</p>
<p>  我们在终端中，输入如下的代码即可。</p>
<pre><code class="language-bash">pip install tensorflow
</code></pre>
<p>  随后，将出现如下图所示的情况。这里大家需要注意一下，大家看一下下图紫色框内的字样，如果我们此时开始下载的<code>tensorflow</code>库是我们需要的版本，那么就没有问题；如果是我们当前无法使用的版本（也就是和<strong>CUDA</strong>、<strong>cuDNN</strong>版本不匹配的版本），那么就可以通过指定版本的方式重新下载<code>tensorflow</code>库。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182040632-575874968.png" alt="" loading="lazy"></p>
<p>  完成<code>tensorflow</code>库的配置后，我们在<strong>Python</strong>中输入如下的代码，检验当前<code>tensorflow</code>库是否支持<strong>GPU</strong>运算。</p>
<pre><code class="language-python">import tensorflow as tf
print(tf.config.list_physical_devices("GPU"))
</code></pre>
<p>  运行上述代码，如果得到如下图紫色框内所示的字样，则表明我们的<code>tensorflow</code>库已经配置完毕，且可以使用<strong>GPU</strong>加速运算了。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202506/3080295-20250601182040490-723402756.png" alt="" loading="lazy"></p>
<p>  至此，大功告成。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.3270907833668982" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-06-01 18:28">2025-06-01 18:27</span>&nbsp;
<a href="https://www.cnblogs.com/fkxxgis">疯狂学习GIS</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18906332);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18906332', targetLink: 'https://www.cnblogs.com/fkxxgis/p/18906332', title: 'Ubuntu部署tensorflow（CPU/GPU）方法' })">举报</a>
</div>
        