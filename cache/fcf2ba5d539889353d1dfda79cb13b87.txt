
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/queque/p/18624817" title="发布于 2024-12-23 18:57">
    <span role="heading" aria-level="2">爬虫自动化脚本+AI赋能</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        小伙子，进来犯罪吧。能说的只有这么多了，且用且珍惜！本文将带你深入了解如何通过自动化脚本简化繁琐的网页操作，从登录博客园账号到获取评论数据，涵盖了绕过验证码和获取认证数据的多种技巧。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="简介">简介</h1>
<p>估计大家对网页爬取和数据抓取已经有所了解，市面上也有许多现成的软件可供使用。例如，前几天群里有位朋友利用爬虫技术抓取了AV网站，并搭建了一个磁力链接站点😂。</p>
<p>本文将介绍如何模拟手动操作，将一些繁琐的固定操作转化为自动化流程。</p>
<h1 id="声明">声明</h1>
<p>本文仅分享编写自动化脚本的心得，与其他内容及本人无关。</p>
<h1 id="_">！！！</h1>
<p>为了顺利发表文章，本文将展示如何登录博客园账号，并打印出所有评论。<br>
亮点包括：</p>
<ul>
<li>如何绕过登录时的验证码？</li>
<li>如何获取未经过 SSR 渲染且需要认证的评论列表？</li>
</ul>
<p>这些奇淫技巧一应俱全，学习后受益匪浅，切记珍惜！</p>
<h1 id="教程">教程</h1>
<h2 id="1-安装自动化脚本包">1. 安装自动化脚本包</h2>
<p>在项目文件中添加以下包引用：</p>
<pre><code class="language-xml">&lt;ItemGroup&gt;
    &lt;PackageReference Include="HtmlAgilityPack" Version="1.11.54" /&gt;
    &lt;PackageReference Include="Selenium.WebDriver" Version="4.13.1" /&gt;
&lt;/ItemGroup&gt;
</code></pre>
<h2 id="2-登录">2. 登录</h2>
<p>使用以下 C# 代码进行登录操作：</p>
<pre><code class="language-csharp">// 输入账号
IWebElement accountElement = webDriver.FindElement(By.CssSelector("#mat-input-0"));
accountElement.SendKeys(account);
var element_account = accountElement.GetAttribute("value");

// 输入密码
IWebElement passwordElement = webDriver.FindElement(By.CssSelector("#mat-input-1"));
passwordElement.SendKeys(password);
var element_password = passwordElement.GetAttribute("value");

// 核对账号密码是否正确输入
if (account != element_account || password != element_password)
{
    throw new Exception("页面账号密码输入有误！");
}
</code></pre>
<h2 id="3-点击验证按钮">3. 点击验证按钮</h2>
<pre><code class="language-csharp">// 点击登录按钮
IWebElement loginBtnElement = webDriver.FindElement(By.CssSelector(@"body &gt; app-root &gt; app-sign-in-layout &gt; div &gt; div &gt; app-sign-in &gt; app-content-container &gt; div &gt; div &gt; div &gt; form &gt; div &gt; button"));
loginBtnElement.Click(); // 第一次点击，弹出验证

// 点击验证按钮
IWebElement verifyBtnElement = webDriver.FindElement(By.CssSelector(@"#rectMask"));
// 注意：需要隐藏自动化特征，详见第27行代码
verifyBtnElement.Click();
</code></pre>
<h2 id="4-获取评论的三种方式">4. 获取评论的三种方式</h2>
<p>之所以提供三种方式，是因为部分网站对自己的接口进行了反自动化验证，但第三方接口通常可行！</p>
<h3 id="41-通过页面元素爬取">4.1 通过页面元素爬取</h3>
<pre><code class="language-csharp">IWebElement tableElement = webDriver.FindElement(By.XPath(@"/html/body/cnb-root/cnb-app-layout/div[2]/as-split/as-split-area[2]/div/div/cnb-spinner/div/cnb-comment-main/cnb-spinner/div/div[2]/table"));
// 提取表格主体
IWebElement tbody = tableElement.FindElement(By.TagName("tbody"));
IList&lt;IWebElement&gt; rows = tbody.FindElements(By.TagName("tr"));

// 初始化列表存储表格数据
List&lt;string&gt; tableData = new List&lt;string&gt;();

foreach (var row in rows)
{
    IList&lt;IWebElement&gt; cells = row.FindElements(By.TagName("td"));

    // 处理表头单元格
    if (cells.Count == 0)
    {
        cells = row.FindElements(By.TagName("th"));
    }

    List&lt;string&gt; cellTexts = new List&lt;string&gt;();

    foreach (var cell in cells)
    {
        string cellText = cell.Text.Trim();
        cellTexts.Add(cellText);
    }

    // 使用管道符作为分隔符，避免与数据中的逗号冲突
    string rowData = string.Join(" | ", cellTexts);
    tableData.Add(rowData);
}

// 输出提取的数据
foreach (var row in tableData)
{
    Console.WriteLine(row);
}
</code></pre>
<h3 id="42-直接请求接口获取">4.2 直接请求接口获取</h3>
<pre><code class="language-csharp">// 导航到接口地址
webDriver.Navigate().GoToUrl(CnBlogs.CommentsGetApi);

var data = webDriver.PageSource;

Console.WriteLine(data);
</code></pre>
<h3 id="43-伪造-html-元素执行-fetch-脚本获取内容">4.3 伪造 HTML 元素，执行 Fetch 脚本获取内容</h3>
<pre><code class="language-csharp">webDriver.Navigate().GoToUrl(CnBlogs.CommentsUrl);
IJavaScriptExecutor executor = (IJavaScriptExecutor)webDriver;
executor.ExecuteScript(@"
    var container = document.createElement('div');
    container.id = 'hiddenDataDiv';
    container.style.display = 'none';
    document.body.appendChild(container);
    fetch('https://i.cnblogs.com/api/feedback/1?mine=false', {
        headers: {
            'accept': 'application/json, text/plain, */*',
            'accept-language': 'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6',
            'priority': 'u=1, i',
            'sec-ch-ua': '\"Microsoft Edge\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': '\"Windows\"',
            'sec-fetch-dest': 'empty',
            'sec-fetch-mode': 'cors',
            'sec-fetch-site': 'same-origin'
        },
        referrer: 'https://i.cnblogs.com/comments',
        referrerPolicy: 'strict-origin-when-cross-origin',
        method: 'GET',
        mode: 'cors',
        credentials: 'include'
    })
    .then(response =&gt; response.json())
    .then(data =&gt; {
        document.getElementById('hiddenDataDiv').textContent = JSON.stringify(data);
    })
    .catch(error =&gt; console.error('Error:', error));
");
string jsonData = executor.ExecuteScript("return document.getElementById('hiddenDataDiv').textContent;").ToString();
Console.WriteLine(jsonData);
</code></pre>
<h1 id="小彩蛋">小彩蛋</h1>
<p><strong>博客园的登录 Bug</strong></p>
<p><img src="https://www.quewaner.com/2024/12/23/%E7%88%AC%E8%99%AB%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC-AI%E8%B5%8B%E8%83%BD/1734950186663.png" alt="登录Bug截图" loading="lazy"></p>
<p><a href="https://www.quewaner.com/2024/12/23/%E7%88%AC%E8%99%AB%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC-AI%E8%B5%8B%E8%83%BD/%E7%99%BB%E5%BD%95bug%E8%A7%86%E9%A2%91.mp4" target="_blank" rel="noopener nofollow">登录Bug视频， 下载观看， 浏览器不支持</a></p>
<h1 id="ai赋能">AI赋能</h1>
<p>复杂的验证码场景可以通过 AI 多模态模型解决，例如定位元素和移动鼠标等操作。此外，AI 还可以用于整理和分析数据，提高数据处理效率。</p>
<h1 id="源码链接可直接运行">源码链接（可直接运行）</h1>
<p>本项目基于 .NET 5 和 Edge 浏览器开发，源码已上传至 GitHub：</p>
<p><a href="https://github.com/ZhangQueque/CrawlerScript" target="_blank" rel="noopener nofollow">https://github.com/ZhangQueque/CrawlerScript</a></p>
<hr>
<p>希望这篇优化后的博客对你有所帮助！如果有任何问题或需要进一步优化，欢迎随时联系。</p>

</div>
<div id="MySignature" role="contentinfo">
    我自是年少，韶华倾负。
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.06151211079398148" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-23 18:58">2024-12-23 18:57</span>&nbsp;
<a href="https://www.cnblogs.com/queque">张缺缺</a>&nbsp;
阅读(<span id="post_view_count">1</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18624817" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18624817);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18624817', targetLink: 'https://www.cnblogs.com/queque/p/18624817', title: '爬虫自动化脚本+AI赋能' })">举报</a>
</div>
        