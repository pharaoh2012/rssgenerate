
		<h2>
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ydswin/p/18757690" title="发布于 2025-03-07 14:35">
    <span role="heading" aria-level="2">什么是nginx的强缓存和协商缓存</span>
    

</a>

		</h2>
		<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="一强缓存strong-cache">一、强缓存（Strong Cache）</h2>
<h3 id="1-定义">1. <strong>定义</strong></h3>
<p>• 强缓存直接告诉浏览器：<strong>在缓存过期前，无需与服务器通信</strong>，直接使用本地缓存。<br>
• 由服务器通过响应头 <strong><code>Cache-Control</code></strong> 和 <strong><code>Expires</code></strong> 控制。</p>
<h3 id="2-响应头">2. <strong>响应头</strong></h3>
<p>• <strong><code>Cache-Control: max-age=3600</code></strong><br>
表示资源在 <strong>3600 秒（1小时）</strong> 内有效（优先级高于 <code>Expires</code>）。<br>
• <strong><code>Expires: Thu, 31 Dec 2030 23:59:59 GMT</code></strong><br>
指定一个绝对过期时间（依赖于客户端本地时间，可能存在误差）。</p>
<h3 id="3-nginx-配置示例">3. <strong>Nginx 配置示例</strong></h3>
<pre><code class="language-nginx">location /static/ {
    # 设置强缓存：1年内有效
    add_header Cache-Control "public, max-age=31536000";
    expires 1y;
}
</code></pre>
<h3 id="4-行为">4. <strong>行为</strong></h3>
<p>• 浏览器首次请求资源时，服务器返回资源并附带缓存头。<br>
• 后续请求时，浏览器直接读取本地缓存（状态码 <code>200 (from disk cache)</code>），<strong>不发送请求到服务器</strong>。</p>
<h3 id="5-适用场景">5. <strong>适用场景</strong></h3>
<p>• 静态资源（如 CSS、JS、图片、字体文件）等长期不变的资源。</p>
<hr>
<h2 id="二协商缓存协商缓存weak-cache">二、协商缓存（协商缓存，Weak Cache）</h2>
<h4 id="1-定义-1">1. <strong>定义</strong></h4>
<p>• 协商缓存要求浏览器 <strong>每次向服务器验证缓存是否过期</strong>，若未过期则返回 <code>304 Not Modified</code>，继续使用本地缓存。<br>
• 由服务器通过响应头 <strong><code>Last-Modified</code></strong> 和 <strong><code>ETag</code></strong> 控制。</p>
<h3 id="2-响应头-1">2. <strong>响应头</strong></h3>
<p>• <strong><code>Last-Modified: Wed, 21 Oct 2023 07:28:00 GMT</code></strong><br>
表示资源最后修改时间（精度为秒，可能因时间同步问题失效）。<br>
• <strong><code>ETag: "5d8c72a5-264"</code></strong><br>
资源的唯一标识符（哈希值或版本号），精度更高。</p>
<h3 id="3-nginx-配置示例-1">3. <strong>Nginx 配置示例</strong></h3>
<pre><code class="language-nginx">location /dynamic/ {
    # 启用协商缓存（默认已支持，无需显式配置）
    add_header Last-Modified "";
    etag on;
}
</code></pre>
<h3 id="4-行为-1">4. <strong>行为</strong></h3>
<ol>
<li>浏览器首次请求资源时，服务器返回资源并附带 <code>Last-Modified</code> 或 <code>ETag</code>。</li>
<li>后续请求时，浏览器通过以下请求头验证缓存：<br>
• <strong><code>If-Modified-Since: [Last-Modified值]</code></strong><br>
向服务器询问资源是否在指定时间后修改过。<br>
• <strong><code>If-None-Match: [ETag值]</code></strong><br>
向服务器验证资源的 <code>ETag</code> 是否变化。</li>
<li>若资源未修改，服务器返回 <code>304 Not Modified</code>，浏览器继续使用缓存；若已修改，返回新资源（状态码 <code>200</code>）。</li>
</ol>
<h3 id="5-适用场景-1">5. <strong>适用场景</strong></h3>
<p>• 频繁更新的资源（如 HTML 页面、动态 API 响应）。</p>
<hr>
<h2 id="三关键区别">三、关键区别</h2>
<table>
<thead>
<tr>
<th><strong>特性</strong></th>
<th>强缓存</th>
<th>协商缓存</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>通信成本</strong></td>
<td>无网络请求（直接读缓存）</td>
<td>需发送请求验证缓存</td>
</tr>
<tr>
<td><strong>响应状态码</strong></td>
<td>200 (from disk cache)</td>
<td>304 Not Modified</td>
</tr>
<tr>
<td><strong>优先级</strong></td>
<td>优先于协商缓存</td>
<td>强缓存过期后触发</td>
</tr>
<tr>
<td><strong>适用资源</strong></td>
<td>长期不变的静态资源</td>
<td>频繁更新的动态资源</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="四nginx-最佳实践">四、Nginx 最佳实践</h2>
<ol>
<li>
<p><strong>混合使用两种缓存</strong></p>
<pre><code class="language-nginx">location / {
    # 强缓存 1 小时，过期后启用协商缓存
    add_header Cache-Control "public, max-age=3600";
    etag on;
}
</code></pre>
</li>
<li>
<p><strong>按文件类型区分策略</strong></p>
<pre><code class="language-nginx"># 图片、字体等强缓存
location ~* \.(jpg|png|gif|woff2)$ {
    expires 1y;
    add_header Cache-Control "public, max-age=31536000";
}

# HTML 文件禁用强缓存（总是协商）
location ~* \.html$ {
    add_header Cache-Control "no-cache, must-revalidate";
}
</code></pre>
</li>
<li>
<p><strong>解决缓存更新问题</strong><br>
• 强缓存资源建议通过 <strong>文件名哈希</strong> 控制版本（如 <code>main.abcd1234.js</code>）。<br>
• 协商缓存可通过修改 <code>ETag</code> 或 <code>Last-Modified</code> 触发更新。</p>
</li>
</ol>
<hr>
<h2 id="五调试工具">五、调试工具</h2>
<ol>
<li>浏览器开发者工具（Network 标签）：<br>
• 查看 <code>200 (from disk cache)</code>（强缓存）或 <code>304 Not Modified</code>（协商缓存）。<br>
• 检查请求头中的 <code>Cache-Control</code>、<code>If-Modified-Since</code>、<code>If-None-Match</code>。</li>
<li>命令行工具：<pre><code class="language-bash">curl -I http://example.com/resource.js
</code></pre>
</li>
</ol>
<p>通过合理配置强缓存和协商缓存，可以显著提升网站性能，减少服务器负载。</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/ydswin/" target="_blank">dashery</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/ydswin/p/18757690" target="_blank">https://www.cnblogs.com/ydswin/p/18757690</a></p>
</div>
<div class="clear"></div>

		<p class="postfoot">
			posted on 
<span id="post-date" data-last-update-days="0.5711599436331019" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-07 14:36">2025-03-07 14:35</span>&nbsp;
<a href="https://www.cnblogs.com/ydswin">dashery</a>&nbsp;
阅读(<span id="post_view_count">207</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18757690" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18757690);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18757690', targetLink: 'https://www.cnblogs.com/ydswin/p/18757690', title: '什么是nginx的强缓存和协商缓存' })">举报</a>

		</p>
	