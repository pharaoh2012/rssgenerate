
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mingupupu/p/18636610" title="发布于 2024-12-27 19:47">
    <span role="heading" aria-level="2">C#使用Tesseract C++ API过程记录</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="tesseract">Tesseract</h2>
<p>Tesseract 是一个开源的光学字符识别（OCR）引擎，最初由 Hewlett-Packard（惠普）实验室开发，后来由 Google 收购并继续维护和开源贡献。Tesseract 可以识别多种语言的文字，广泛应用于将图片或扫描文档中的文本内容转换成可编辑的文本格式。随着深度学习技术的发展，Tesseract 也整合了基于深度神经网络的 OCR 模型，提升其识别准确率，特别是对于复杂排版和手写体的识别效果有所改善。</p>
<p>Tesseract 适合开发人员和研究人员使用，可以嵌入到各种应用中，比如文档数字化、图像处理软件、内容管理系统等。它支持命令行操作，也提供了丰富的 API 接口，支持 C++、Python、Java、Node.js 等多种编程语言，便于集成和调用。Tesseract 的核心功能包括文本检测、字符识别和后处理纠错，能够处理多种图像输入格式，输出包括纯文本、HOCR（HTML + OCR）格式、PDF 等多种格式。Tesseract 的高灵活性和强大的识别能力使其成为 OCR 领域中非常受欢迎的工具之一。</p>
<p>GitHub地址：<a href="https://github.com/tesseract-ocr/tesseract" target="_blank" rel="noopener nofollow">https://github.com/tesseract-ocr/tesseract</a></p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194729631-1101186648.png" alt="image-20241227152937200" loading="lazy"></p>
<p>Tesseract提供了丰富的 API 接口，支持 C++、Python、Java、Node.js 等多种编程语言，没有C#的，实际上已经有大佬做了C#的封装了，并提供了一个示例项目，需要只是简单使用一下，用这个大佬的就很方便了。</p>
<p>感兴趣的可以瞧瞧：</p>
<p>项目GitHub地址：<a href="https://github.com/charlesw/tesseract" target="_blank" rel="noopener nofollow">https://github.com/charlesw/tesseract</a></p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194729612-381087639.png" alt="image-20241227153302569" loading="lazy"></p>
<p>示例GitHub地址：<a href="https://github.com/charlesw/tesseract-samples" target="_blank" rel="noopener nofollow">https://github.com/charlesw/tesseract-samples</a></p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194729643-1938570573.png" alt="image-20241227153437445" loading="lazy"></p>
<p>但这不是我们今天的主题，现在还处于学习阶段，能直接使用大佬的库确实很方便，但是如果自己能够知道大佬是怎么实现的，那不是也很酷吗？</p>
<p>实现的方式与大佬项目的方式是类似的，如下所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194729650-85923879.png" alt="image-20241227153822517" loading="lazy"></p>
<p>需要依赖leptonica-1.82.0.dll与tesseract50.dll，然后通过DllImport导入其中的C++函数。</p>
<p>已经有现成的库了为什么不直接使用呢？</p>
<p>第一，项目中可能只需要用到Tesseract的几个C++ API而已，直接引用一大堆东西没有必要。第二，学习阶段，以自己学习掌握技能为主，自己先掌握了这项技能，然后偷懒了直接使用大佬的库也不迟。</p>
<h2 id="windows编译tesseract">Windows编译Tesseract</h2>
<p>首先我们需要先在Windows上编译Tesseract，官方文档有一些介绍，文档地址：<a href="https://tesseract-ocr.github.io/tessdoc/Compiling.html%E3%80%82" target="_blank" rel="noopener nofollow">https://tesseract-ocr.github.io/tessdoc/Compiling.html。</a></p>
<p>查看文档之后，我使用这种方式：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194729599-1717563373.png" alt="image-20241227154722530" loading="lazy"></p>
<p>先来简单介绍一下vcpkg。</p>
<p><strong>vcpkg</strong></p>
<p>vcpkg是一个用来管理C++库的跨平台包管理工具，由微软开发并维护，旨在帮助开发者简化第三方库的集成和使用过程。vcpkg通过提供预编译的二进制包和源代码，使开发者能够在Windows、Linux和macOS等操作系统上轻松安装和管理C++库。它支持多种编译器，包括Visual Studio、GCC和Clang。vcpkg的使用非常简单，只需要下载并安装，然后通过命令行工具指定要安装的库名，vcpkg会自动下载、编译并安装所需的库及其依赖项。此外，vcpkg还具有版本控制功能，能够方便地切换库的不同版本。它对于提升开发效率、保持项目的一致性以及解决跨平台开发中的库兼容性问题非常有帮助。许多开源项目和商业软件都选择使用vcpkg来管理和分发依赖库。</p>
<p><strong>使用vcpkg安装Tesseract</strong></p>
<pre><code class="language-cmd">git clone https://github.com/microsoft/vcpkg.git
</code></pre>
<pre><code class="language-cmd">cd vcpkg; .\bootstrap-vcpkg.bat
</code></pre>
<pre><code class="language-cmd">vcpkg install tesseract:x64-windows
</code></pre>
<p>安装完成：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194729640-169509381.png" alt="image-20241226105928367" loading="lazy"></p>
<pre><code class="language-cmd">vcpkg integrate install
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194730015-74887334.png" alt="image-20241226110526085" loading="lazy"></p>
<p>为这个 vcpkg 根目录应用了全局用户集成。 CMake 项目应使用："-DCMAKE_TOOLCHAIN_FILE=D:/Learning/vcpkg/scripts/buildsystems/vcpkg.cmake"</p>
<p>现在所有 MSBuild C++ 项目都可以 #include 任何已安装的库。链接将会自动处理。安装新库后，它们将立即可用。</p>
<pre><code class="language-cmd">vcpkg list
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194730031-1360549776.png" alt="image-20241226110859781" loading="lazy"></p>
<p><strong>新建一个C++项目使用Tesseract C++ API</strong></p>
<p>我写了两个简单的函数用于测试。</p>
<p>头文件：</p>
<pre><code class="language-c++">#pragma once
extern "C" __declspec(dllexport) char* getChineseText(const char* imagePath);
extern "C" __declspec(dllexport) char* getEnglishText(const char* imagePath);
extern "C" __declspec(dllexport) void freeMemory(char* ptr);
</code></pre>
<p>源文件：</p>
<pre><code class="language-c++">#include &lt;tesseract/baseapi.h&gt;
#include &lt;leptonica/allheaders.h&gt;
#include "test.h"
#include &lt;iostream&gt;

void windows_cmd_support_utf8(void)
{
   system("chcp 65001 &amp; cls"); //cls 用来清除 chcp 的输出
}

char* getEnglishText(const char* imgPath) {
    tesseract::TessBaseAPI* api = new tesseract::TessBaseAPI();
    if (api-&gt;Init(NULL, "eng")) {
        fprintf(stderr, "Could not initialize tesseract.\n");
        delete api;
        return nullptr;
    }

    Pix* image = pixRead(imgPath);
    if (!image) {
        fprintf(stderr, "Could not read image file.\n");
        api-&gt;End();
        delete api;
        return nullptr;
    }

    api-&gt;SetImage(image);
    char* outText = api-&gt;GetUTF8Text();
    if (!outText) {
        fprintf(stderr, "OCR failed.\n");
        api-&gt;End();
        pixDestroy(&amp;image);
        delete api;
        return nullptr;
    }
  

    api-&gt;Clear();
    api-&gt;End();
    delete api;
    pixDestroy(&amp;image);

    return outText;
}

char* getChineseText(const char* imgPath) {
    tesseract::TessBaseAPI* api = new tesseract::TessBaseAPI();
    if (api-&gt;Init(NULL, "chi_sim")) {
        fprintf(stderr, "Could not initialize tesseract.\n");
        delete api;
        return nullptr;
    }

    Pix* image = pixRead(imgPath);
    if (!image) {
        fprintf(stderr, "Could not read image file.\n");
        api-&gt;End();
        delete api;
        return nullptr;
    }

    api-&gt;SetImage(image);
    char* outText = api-&gt;GetUTF8Text();
    if (!outText) {
        fprintf(stderr, "OCR failed.\n");
        api-&gt;End();
        pixDestroy(&amp;image);
        delete api;
        return nullptr;
    }


    api-&gt;Clear();
    api-&gt;End();
    delete api;
    pixDestroy(&amp;image);

    return outText;
}

void freeMemory(char* ptr) {
    delete[] ptr;
}

int main()
{ 
    const char* imgPath = "D:\\SemanticKernel-Test2.png";  // 替换为你的图像文件路径

    const char* imgPath2 = "D:\\test666.png";  // 替换为你的图像文件路径

    // 第一次调用
    char* result1 = getChineseText(imgPath);

    windows_cmd_support_utf8();

    std::cout &lt;&lt; "OCR Result 1: " &lt;&lt; result1 &lt;&lt; std::endl;

    // 第二次调用
    char* result2 = getChineseText(imgPath2);
    std::cout &lt;&lt; "OCR Result 2: " &lt;&lt; result2 &lt;&lt; std::endl;

    // 释放内存
    //freeMemory(result1);
    //freeMemory(result2);
    return 0;  // 程序正常结束

}
</code></pre>
<p><strong>注意📍📍📍</strong></p>
<p>先将项目配置成X64:</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194730041-1173601267.png" alt="image-20241227160709604" loading="lazy"></p>
<p>现在运行项目，会出现一个错误，因为并没有包含tessdata。</p>
<p><code>tessdata</code> 是 Tesseract OCR 引擎使用的一种数据文件格式，用于存储语言模型和字符识别数据。Tesseract 通过加载这些数据文件来实现对不同语言文字的识别。每个语言都有一套对应的 <code>tessdata</code> 文件，通常命名为 <code>lang.traineddata</code>，其中 <code>lang</code> 是语言的缩写（例如，<code>eng</code> 表示英语，<code>chi_sim</code> 表示简体中文）。</p>
<p>tessdata的GitHub地址：<a href="https://github.com/tesseract-ocr/tessdata" target="_blank" rel="noopener nofollow">https://github.com/tesseract-ocr/tessdata</a></p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194730017-1976357499.png" alt="image-20241227185027622" loading="lazy"></p>
<p>也可以看我后面分享的GitHub，一般只要中英文就可以了，如下所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194730076-1450207605.png" alt="image-20241227185504978" loading="lazy"></p>
<p>将tessdata文件夹放在x64的Debug目录下即可。</p>
<p>先测试中文识别效果：</p>
<p>测试图片1</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194730091-251181949.png" alt="" loading="lazy"></p>
<p>测试图片2</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194730001-2107054339.png" alt="" loading="lazy"></p>
<p>查看效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194730081-1651063265.png" alt="image-20241227155928432" loading="lazy"></p>
<p><strong>注意📍📍📍</strong></p>
<p>如果不加上windows_cmd_support_utf8();</p>
<p>就会出现乱码，如下所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194730125-333085352.png" alt="image-20241227160300511" loading="lazy"></p>
<p>并不是Tesseract识别中文效果不好，只是控制台默认没支持utf-8罢了。</p>
<p>再来测试一下英文：</p>
<p>测试图片1</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194730052-1079384972.png" alt="" loading="lazy"></p>
<p>测试图片2</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194730110-330088012.png" alt="" loading="lazy"></p>
<p>效果如下所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194730148-1035987125.png" alt="image-20241227190017513" loading="lazy"></p>
<p><strong>生成DLL</strong></p>
<p>测试没有问题之后，现在需要生成DLL文件。</p>
<p>右键项目，点击属性，设置配置类型为DLL：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194730083-453268042.png" alt="image-20241227190254191" loading="lazy"></p>
<p>生成解决方案之后，如下所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194730033-2080829928.png" alt="image-20241227190504150" loading="lazy"></p>
<p>这里需要搞清楚的是为什么头文件不用std::string而是char*呢？</p>
<pre><code class="language-c++">#pragma once
extern "C" __declspec(dllexport) char* getChineseText(const char* imagePath);
extern "C" __declspec(dllexport) char* getEnglishText(const char* imagePath);
extern "C" __declspec(dllexport) void freeMemory(char* ptr);
</code></pre>
<ul>
<li><strong><code>extern "C"</code></strong>：这告诉编译器这些函数应该按照C语言的方式进行链接，而不是C++的方式。这样可以确保这些函数在C语言中也可以被正确调用。</li>
<li>简单的说std::string不是C语言风格的，所以不行。</li>
</ul>
<h2 id="在c项目中调用c-dll">在C#项目中调用C++ DLL</h2>
<p>新建一个C#控制台项目用于测试。</p>
<p>测试代码如下：</p>
<pre><code class="language-c#">using System.Runtime.InteropServices;

class Program
{
    [DllImport("TesseractApiTest.dll", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
    public static extern IntPtr getEnglishText(string imagePath);

    [DllImport("TesseractApiTest.dll", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
    public static extern IntPtr getChineseText(string imagePath);


    static void Main()
    {
        

        string imagePath = @"D:\SemanticKernel-Test2.png";

        // 调用 DLL 中的函数
        IntPtr resultPtr = getChineseText(imagePath);
        if (resultPtr == IntPtr.Zero)
        {
            return;
        }

        string? result = Marshal.PtrToStringUTF8(resultPtr);
        return; ;

    }
}
</code></pre>
<p>将项目设置成X64平台，将C++项目的所有输出文件，复制到X64的输出目录这里，如下所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194730116-2074493614.png" alt="image-20241227191524217" loading="lazy"></p>
<p>为了避免太混乱，本来想新建一个Libs文件夹，在放这些文件，在设置为嵌入的资源与如果较新就复制，但是就调用不了了，暂时没有解决，只能这样一堆放在这里了。</p>
<p>效果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194730079-975920089.png" alt="image-20241227191730397" loading="lazy"></p>
<p>这里需要注意一下，为什么是</p>
<pre><code class="language-c#">  [DllImport("TesseractApiTest.dll", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
  public static extern IntPtr getEnglishText(string imagePath);
</code></pre>
<p>而不是</p>
<pre><code class="language-c#">  [DllImport("TesseractApiTest.dll", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
  public static extern string getEnglishText(string imagePath);
</code></pre>
<p>在C#中直接使用 <code>string</code> 作为返回类型并不适用于从C++导出的函数，尤其是当该函数返回的是一个 <code>char*</code> 类型的指针时。原因在于 <code> char*</code> 是一个指向C风格字符串的指针，而C#中的 <code>string</code> 类型与C风格字符串并不直接兼容。C#的 <code>string</code> 类型是一个托管的字符串对象，而 <code> char*</code> 是一个非托管的指针，直接进行转换会导致运行时错误或无法预期的行为。</p>
<p>使用 <code>IntPtr</code> 作为返回类型可以解决这个问题，因为 <code>IntPtr</code> 是一个可以表示非托管指针的类型。你可以通过 <code>Marshal</code> 类将 <code>IntPtr</code> 转换为C#中的 <code>string</code>。这样可以确保你在C#中能够正确处理C++函数返回的字符串指针。</p>
<h2 id="tesseractocr-gui中集成">TesseractOCR-GUI中集成</h2>
<p>之前跟大家分享的TesseractOCR-GUI需要在电脑上安装Tesseract才能用，因为只是简单的对Tesseract的命令行使用做了封装，现在通过这种方法，不需要安装Tesseract也能使用了。</p>
<p>GitHub地址：<a href="https://github.com/Ming-jiayou/TesseractOCR-GUI%E3%80%82" target="_blank" rel="noopener nofollow">https://github.com/Ming-jiayou/TesseractOCR-GUI。</a></p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194730131-310354925.png" alt="image-20241227192409247" loading="lazy"></p>
<p>git clone到本地，然后将平台设置成X64，先生成解决方案，然后将Libs文件夹下的内容，全部复制到x64的输出目录，如下所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194730034-1492062934.png" alt="image-20241227192607954" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194730170-1679784172.png" alt="image-20241227192639528" loading="lazy"></p>
<p>现在直接点击应该就可以使用了：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194730112-66324081.png" alt="image-20241227192803222" loading="lazy"></p>
<p>效果如下所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194730050-801989325.png" alt="image-20241227193007146" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202412/3288240-20241227194730125-1076819534.gif" alt="" loading="lazy"></p>
<p>速度还是很快的，目前为止我们尝试了TesseractOCR、PaddleOCR、VLM，其中TesseractOCR我感觉是最快的。</p>
<p>以上就是本期的分享内容，希望对你有所帮助。</p>
<p>推荐阅读：</p>
<p><a href="https://mp.weixin.qq.com/s/6U_dWQxbOmWNzKrwt0RnFA" target="_blank" rel="noopener nofollow">C#调用C++代码，以OpenCV为例</a></p>
<p><a href="https://mp.weixin.qq.com/s/A7-SbXyDOOd56JC9N7uOJg" target="_blank" rel="noopener nofollow">C#调用Python脚本的方式（一），以PaddleOCR-GUI为例</a></p>
<p><a href="https://mp.weixin.qq.com/s/AnzbLyIH5cSMzaLdqWvjiA" target="_blank" rel="noopener nofollow">C#调用Python代码的方式（二），以PaddleOCR-GUI为例</a></p>
<p><a href="https://mp.weixin.qq.com/s/Pfi8tL_N6hLuxZAKpRjQSA" target="_blank" rel="noopener nofollow">VLM-OCR-Demo：一个使用VLM用于OCR任务的示例</a></p>
<p><a href="https://mp.weixin.qq.com/s/t_C360h6AP9P4GfssZnkbA" target="_blank" rel="noopener nofollow">TesseractOCR-GUI：基于WPF/C#构建TesseractOCR简单易用的用户界面</a></p>
<p><a href="https://mp.weixin.qq.com/s/C2o0-RtubtQb4pzys2wx6w" target="_blank" rel="noopener nofollow">使用Tesseract进行图片文字识别</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.028937387115740742" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-27 19:48">2024-12-27 19:47</span>&nbsp;
<a href="https://www.cnblogs.com/mingupupu">mingupupup</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18636610" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18636610);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18636610', targetLink: 'https://www.cnblogs.com/mingupupu/p/18636610', title: 'C#使用Tesseract C++ API过程记录' })">举报</a>
</div>
        