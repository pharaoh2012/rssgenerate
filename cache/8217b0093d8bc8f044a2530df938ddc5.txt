
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/geeklab/p/18797441" title="发布于 2025-03-28 10:35">
    <span role="heading" aria-level="2">MySQL 事务隔离级别：社交恐惧症的四个阶段</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><img src="https://img2024.cnblogs.com/blog/3602778/202503/3602778-20250328093342476-1281455829.png" alt="" loading="lazy"></p>
<h1 id="mysql-事务隔离级别社交恐惧症的四个阶段-">MySQL 事务隔离级别：社交恐惧症的四个阶段 🙈🙉🙊</h1>
<p><em>在数据库的世界里，数据们也有社交问题！事务隔离级别就是控制它们互相看到对方的程度...</em></p>
<h2 id="什么是事务隔离">什么是事务隔离？🤔</h2>
<p>想象一下，数据库是一个繁忙的餐厅，每个事务都是一桌客人，而数据就是美食。事务隔离级别决定了：<strong>当甲桌客人正在吃饭时，乙桌客人能看到什么？</strong></p>
<h2 id="mysql-的四种社交障碍等级-">MySQL 的四种社交障碍等级 📊</h2>
<h3 id="1️⃣-读未提交-read-uncommitted---毫无隐私的偷窥狂">1️⃣ 读未提交 (Read Uncommitted) - 毫无隐私的偷窥狂</h3>
<pre><code>事务A: "我刚写了个数据，还没确定要不要提交..."
事务B: "我已经看到啦！嘿嘿嘿~"
事务A: "...我后悔了，撤回！"
事务B: "啊？那我刚才看到的是幻觉？😱"
</code></pre>
<p><strong>特点</strong>: 一个事务可以看到其他事务未提交的数据变更。就像你在改简历，室友已经偷看到了草稿。</p>
<p><strong>问题</strong>: 脏读 (Dirty Read) - 读到了别人还没确认的"脏数据"</p>
<h3 id="2️⃣-读已提交-read-committed---基本礼貌型">2️⃣ 读已提交 (Read Committed) - 基本礼貌型</h3>
<pre><code>事务A: "我改完数据并确认提交了！"
事务B: "哦，现在我能看到你的新数据了"
事务A: "我又改了一次并提交了！"
事务B: "咦？数据怎么又变了？我刚才读的是假的吗？😵"
</code></pre>
<p><strong>特点</strong>: 一个事务只能看到其他事务已经提交的数据。基本的社交礼仪。</p>
<p><strong>问题</strong>: 不可重复读 (Non-repeatable Read) - 同一事务内多次读取，数据发生变化</p>
<h3 id="3️⃣-可重复读-repeatable-read---固执己见型-mysql-默认级别">3️⃣ 可重复读 (Repeatable Read) - 固执己见型 (MySQL 默认级别!)</h3>
<pre><code>事务A: "我要开始读取数据了，从现在起我只看到这个版本！"
事务B: "我已经修改并提交了新数据！"
事务A: "我看不见我看不见，在我这个事务里，数据还是老样子！"
事务B: "但我刚插入了新记录..."
事务A: "啊！怎么突然多了条数据？！🤯"
</code></pre>
<p><strong>特点</strong>: 同一事务内多次读取结果一致，但可能看不到新插入的行。</p>
<p><strong>问题</strong>: 幻读 (Phantom Read) - 前后两次查询，数据行数发生变化</p>
<h3 id="4️⃣-串行化-serializable---完全社恐型">4️⃣ 串行化 (Serializable) - 完全社恐型</h3>
<pre><code>事务A: "我要操作这些数据了，其他人都别动！"
事务B: "好吧，我排队等你完事..."
DBA: "为什么系统这么慢？！"
所有事务: "我们在排队呢！🧍‍♂️🧍‍♀️🧍‍♂️🧍‍♀️"
</code></pre>
<p><strong>特点</strong>: 事务们排队执行，完全避免并发问题。</p>
<p><strong>问题</strong>: 性能低下 - 大家排队，效率当然差！</p>
<h2 id="隔离级别对比表-">隔离级别对比表 📝</h2>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
<th>社交能力评分</th>
</tr>
</thead>
<tbody>
<tr>
<td>读未提交</td>
<td>✅ 可能</td>
<td>✅ 可能</td>
<td>✅ 可能</td>
<td>太开放 (0 分)</td>
</tr>
<tr>
<td>读已提交</td>
<td>❌ 不可能</td>
<td>✅ 可能</td>
<td>✅ 可能</td>
<td>基本礼貌 (5 分)</td>
</tr>
<tr>
<td>可重复读</td>
<td>❌ 不可能</td>
<td>❌ 不可能</td>
<td>✅ 可能*</td>
<td>有点固执 (8 分)</td>
</tr>
<tr>
<td>串行化</td>
<td>❌ 不可能</td>
<td>❌ 不可能</td>
<td>❌ 不可能</td>
<td>完全社恐 (10 分)</td>
</tr>
</tbody>
</table>
<blockquote>
<p>*注意：InnoDB 下的可重复读通过多版本并发控制(MVCC)解决了大部分幻读问题，但并非完全解决。</p>
</blockquote>
<h2 id="如何设置隔离级别️">如何设置隔离级别？🛠️</h2>
<pre><code class="language-sql">-- 全局设置
SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;

-- 当前会话设置
SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;

-- 查看当前隔离级别
SELECT @@transaction_isolation;
</code></pre>
<h2 id="选择建议-">选择建议 💡</h2>
<ol>
<li>怕出错但性能不是很重要：<strong>串行化</strong>（社恐型安全第一）</li>
<li>MySQL 默认且平衡好：<strong>可重复读</strong>（InnoDB 表现不错）</li>
<li>追求性能且可以容忍一些问题：<strong>读已提交</strong>（礼貌型够用了）</li>
<li>活在危险边缘：<strong>读未提交</strong>（偷窥型，不推荐）</li>
</ol>
<hr>
<blockquote>
<p>"一个优秀的 DBA，就是既能保护数据的隐私权，又能让事务们高效社交的红娘！"</p>
<p>—— 匿名数据库管理员</p>
</blockquote>
<hr>
<p>下次面试官问你事务隔离级别，不要紧张，记住：那不过是数据库的社交障碍分级表！😉</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.4866365531458333" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-28 10:35">2025-03-28 10:35</span>&nbsp;
<a href="https://www.cnblogs.com/geeklab">科韵小栈</a>&nbsp;
阅读(<span id="post_view_count">171</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18797441" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18797441);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18797441', targetLink: 'https://www.cnblogs.com/geeklab/p/18797441', title: 'MySQL 事务隔离级别：社交恐惧症的四个阶段' })">举报</a>
</div>
        