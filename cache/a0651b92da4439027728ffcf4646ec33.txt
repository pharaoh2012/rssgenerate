<!----> <meta itemprop="headline" content="双Token实现无感刷新"> <meta itemprop="keywords" content="前端,JavaScript,面试"> <meta itemprop="datePublished" content="2025-05-21T15:16:56.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="忆柒"> <meta itemprop="url" content="https://juejin.cn/user/2003741501046211"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-61fb5e44="">
            双Token实现无感刷新
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-61fb5e44=""><div class="author-info-box" data-v-61fb5e44=""><div class="author-name" data-v-61fb5e44=""><a href="/user/2003741501046211/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-292f6e48="" data-v-61fb5e44=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-292f6e48="">
    忆柒
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-61fb5e44=""><time datetime="2025-05-21T15:16:56.000Z" title="Wed May 21 2025 15:16:56 GMT+0000 (Coordinated Universal Time)" class="time" data-v-61fb5e44="">
                    2025-05-21
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-61fb5e44=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-61fb5e44=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-61fb5e44=""></circle></svg> <span class="views-count" data-v-61fb5e44="">
                    7,343
                  </span> <span class="read-time" data-v-61fb5e44=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-61fb5e44=""><rect width="16" height="16" fill="none" data-v-61fb5e44=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-61fb5e44=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-61fb5e44=""></path></svg>
                    阅读3分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-61fb5e44=""></div> <!----> <!----></div> <!----> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-61fb5e44=""><div class="article-viewer markdown-body result"><h4 data-id="heading-0">一、为什么需要无感刷新？</h4>
<p>想象一下你正在刷视频，突然提示"登录已过期，请重新登录"，需要退出当前页面重新输入密码。这样的体验非常糟糕！无感刷新就是为了解决这个问题：让用户在不知不觉中完成身份续期，保持长时间在线状态。</p>
<h4 data-id="heading-1">二、双Token机制原理</h4>
<p>我们使用两个令牌：</p>
<ol>
<li><strong>短令牌：access_token</strong>（1小时）：用于日常请求</li>
<li><strong>长令牌：refresh_token</strong>（7天）：专门用来刷新令牌</li>
</ol>
<p>工作流程：</p>
<pre><code class="hljs">用户登录 → 获取双令牌 → access_token过期 → 用refresh_token获取新的双令牌 → 自动续期
</code></pre>
<h4 data-id="heading-2">三、前端实现（Vue + Axios）</h4>
<h5 data-id="heading-3">1. 登录存储令牌</h5>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">login</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">userLogin</span>(user); <span class="hljs-comment">//账号密码</span>
  <span class="hljs-comment">// 保存双令牌到本地</span>
  <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">'access_token'</span>, res.<span class="hljs-property">access_token</span>);
  <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">'refresh_token'</span>, res.<span class="hljs-property">refresh_token</span>);
}
</code></pre>
<h5 data-id="heading-4">2. 请求自动携带令牌</h5>
<p>通过请求拦截器自动添加认证头：</p>
<pre><code class="hljs language-javascript" lang="javascript">api.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> {
  <span class="hljs-keyword">const</span> access_token = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">'access_token'</span>);
  <span class="hljs-keyword">if</span> (access_token) {
    config.<span class="hljs-property">headers</span>.<span class="hljs-property">Authorization</span> = <span class="hljs-string">`Bearer <span class="hljs-subst">${access_token}</span>`</span>;
  }
  <span class="hljs-keyword">return</span> config;
})
</code></pre>
<h5 data-id="heading-5">3. 智能令牌刷新</h5>
<p>响应拦截器发现401登录过期的错误时自动请求刷新</p>
<p>验证长令牌是否失效</p>
<ul>
<li>失效重定向到登录页面</li>
<li>未失效重新获取双令牌并重新发起请求</li>
</ul>
<pre><code class="hljs language-javascript" lang="javascript">api.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(
  <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-keyword">return</span> response
  },
  <span class="hljs-keyword">async</span> (error) =&gt; {  <span class="hljs-comment">// 响应失败</span>
    <span class="hljs-keyword">const</span> { data, status, config } = error.<span class="hljs-property">response</span>;
    <span class="hljs-keyword">if</span> (status === <span class="hljs-number">401</span> &amp;&amp; config.<span class="hljs-property">url</span> !== <span class="hljs-string">'/refresh'</span>) {
      <span class="hljs-comment">// 刷新token</span>
      <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">refreshToken</span>()  <span class="hljs-comment">// 校验的函数</span>
      <span class="hljs-keyword">if</span> (res.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) {  <span class="hljs-comment">// token刷新成功</span>
        <span class="hljs-comment">// 重新将刚刚失败的请求发送出去</span>
        <span class="hljs-keyword">return</span> <span class="hljs-title function_">api</span>(config)
      } <span class="hljs-keyword">else</span> {
        <span class="hljs-comment">// 重定向到登录页  router.push('/login')</span>
        <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">'/login'</span>
      }
    }
  }
)
</code></pre>
<h4 data-id="heading-6">四、后端实现（Node.js + Express）</h4>
<h5 data-id="heading-7">1. 生成双令牌</h5>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// 生成1小时有效的access_token</span>
<span class="hljs-keyword">const</span> access_token = <span class="hljs-title function_">generateToken</span>(user, <span class="hljs-string">'1h'</span>);
<span class="hljs-comment">// 生成7天有效的refresh_token</span>
<span class="hljs-keyword">const</span> refresh_token = <span class="hljs-title function_">generateToken</span>(user, <span class="hljs-string">'7d'</span>);
</code></pre>
<h5 data-id="heading-8">2. 令牌刷新接口</h5>
<pre><code class="hljs language-javascript" lang="javascript">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">'/refresh'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  <span class="hljs-keyword">const</span> oldRefreshToken = req.<span class="hljs-property">query</span>.<span class="hljs-property">token</span>;
  <span class="hljs-keyword">try</span> {
    <span class="hljs-comment">// 验证refresh_token有效性</span>
    <span class="hljs-keyword">const</span> userData = <span class="hljs-title function_">verifyToken</span>(oldRefreshToken);
    <span class="hljs-comment">// 生成新双令牌</span>
    <span class="hljs-keyword">const</span> newAccessToken = <span class="hljs-title function_">generateToken</span>(userData, <span class="hljs-string">'1h'</span>);
    <span class="hljs-keyword">const</span> newRefreshToken = <span class="hljs-title function_">generateToken</span>(userData, <span class="hljs-string">'7d'</span>);
    res.<span class="hljs-title function_">json</span>({ <span class="hljs-attr">access_token</span>: newAccessToken, <span class="hljs-attr">refresh_token</span>: newRefreshToken });
  } <span class="hljs-keyword">catch</span> (error) {
    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">401</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">'令牌已失效'</span>);
  }
})
</code></pre>
<h4 data-id="heading-9">五、完整代码</h4>
<h5 data-id="heading-10">1. 前端代码</h5>
<pre><code class="hljs language-vue" lang="vue">&lt;template&gt;
  &lt;div v-if="!isLogin"&gt;
    &lt;button @click="login"&gt;登录&lt;/button&gt;
  &lt;/div&gt;

  &lt;div v-else&gt;
    &lt;h1&gt;登录成功&lt;/h1&gt;
    &lt;p&gt;欢迎回来，{{ username }}&lt;/p&gt;
    &lt;p&gt;您的邮箱：{{ email }}&lt;/p&gt;
  &lt;/div&gt;


  &lt;!-- home --&gt;
   &lt;div v-if="isLogin"&gt;
    &lt;button @click="getHomeData"&gt;获取首页数据&lt;/button&gt;
   &lt;/div&gt;
&lt;/template&gt;

&lt;script setup&gt;
import { ref } from 'vue'
import { userLogin, getHomeDataApi } from './api.js'

const isLogin = ref(false)
const username = ref('')
const email = ref('')
const password = ref('')


const login = async() =&gt; {
  username.value = 'zs'
  email.value = '123@qq.com'
  password.value = '123'

  const res = await userLogin({username: username.value, email: email.value, password: password.value})
  console.log(res)
  const {access_token, refresh_token, userInfo} = res.data
  if (access_token) {
    isLogin.value = true
  }
  localStorage.setItem('access_token', access_token)
  localStorage.setItem('refresh_token', refresh_token)
}


const getHomeData = async() =&gt; {
  const res = await getHomeDataApi()
  console.log(res)
}


&lt;/script&gt;

&lt;style lang="css" scoped&gt;

&lt;/style&gt; 
</code></pre>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// api.js</span>
<span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">'axios'</span>

<span class="hljs-keyword">const</span> api = axios.<span class="hljs-title function_">create</span>({
  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">'http://localhost:3000'</span>,
  <span class="hljs-attr">timeout</span>: <span class="hljs-number">3000</span>,  
})

<span class="hljs-comment">// 请求拦截器</span>
api.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> {
  <span class="hljs-keyword">const</span> access_token = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">'access_token'</span>);
  <span class="hljs-keyword">if</span> (access_token) {
    config.<span class="hljs-property">headers</span>.<span class="hljs-property">Authorization</span> = <span class="hljs-string">`Bearer <span class="hljs-subst">${access_token}</span>`</span>;
  }
  <span class="hljs-keyword">return</span> config;
})

<span class="hljs-comment">// 响应拦截器</span>
api.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(
  <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-keyword">return</span> response
  },
  <span class="hljs-keyword">async</span> (error) =&gt; {  <span class="hljs-comment">// 响应失败</span>
    <span class="hljs-keyword">const</span> { data, status, config } = error.<span class="hljs-property">response</span>;
    <span class="hljs-keyword">if</span> (status === <span class="hljs-number">401</span> &amp;&amp; config.<span class="hljs-property">url</span> !== <span class="hljs-string">'/refresh'</span>) {
      <span class="hljs-comment">// 刷新token</span>
      <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">refreshToken</span>()
      <span class="hljs-keyword">if</span> (res.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) {  <span class="hljs-comment">// token刷新成功</span>
        <span class="hljs-comment">// 重新将刚刚失败的请求发送出去</span>
        <span class="hljs-keyword">return</span> <span class="hljs-title function_">api</span>(config)
      } <span class="hljs-keyword">else</span> {
        <span class="hljs-comment">// 重定向到登录页  router.push('/login')</span>
        <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">'/login'</span>
      }
    }
  }
)


<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">userLogin</span> = (<span class="hljs-params">data</span>) =&gt; {
  <span class="hljs-keyword">return</span> api.<span class="hljs-title function_">post</span>(<span class="hljs-string">'/login'</span>, data)
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getHomeDataApi</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">return</span> api.<span class="hljs-title function_">get</span>(<span class="hljs-string">'/home'</span>)
}

<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">refreshToken</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> api.<span class="hljs-title function_">get</span>(<span class="hljs-string">'/refresh'</span>, {
    <span class="hljs-attr">params</span>: {
      <span class="hljs-attr">token</span>: <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">'refresh_token'</span>)
    }
  })
  <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">'access_token'</span>, res.<span class="hljs-property">data</span>.<span class="hljs-property">access_token</span>)
  <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">'refresh_token'</span>, res.<span class="hljs-property">data</span>.<span class="hljs-property">refresh_token</span>)
  <span class="hljs-keyword">return</span> res
}
</code></pre>
<h5 data-id="heading-11">2. 后端代码</h5>
<pre><code class="hljs language-js" lang="js">server.<span class="hljs-property">js</span>
<span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);
<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();
<span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span>;
app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>());  <span class="hljs-comment">// 解析 JSON 格式的请求体</span>
<span class="hljs-keyword">const</span> jwtToken = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./token.js'</span>);
<span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">'cors'</span>);

app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cors</span>())


<span class="hljs-keyword">const</span> users = [
  { <span class="hljs-attr">username</span>: <span class="hljs-string">'zs'</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">'123'</span>, <span class="hljs-attr">email</span>: <span class="hljs-string">'123@qq.com'</span> },
  { <span class="hljs-attr">username</span>: <span class="hljs-string">'ls'</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">'456'</span>, <span class="hljs-attr">email</span>: <span class="hljs-string">'456@qq.com'</span> }
]




app.<span class="hljs-title function_">get</span>(<span class="hljs-string">'/'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">'Hello World!'</span>);
});

app.<span class="hljs-title function_">post</span>(<span class="hljs-string">'/login'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  <span class="hljs-keyword">const</span> { username, password } = req.<span class="hljs-property">body</span>;
  <span class="hljs-keyword">const</span> user = users.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">user</span> =&gt;</span> user.<span class="hljs-property">username</span> === username);
  <span class="hljs-keyword">if</span> (!user) {
    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">404</span>).<span class="hljs-title function_">json</span>({<span class="hljs-attr">status</span>: <span class="hljs-string">'error'</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">'用户不存在'</span>});
  }
  <span class="hljs-keyword">if</span> (user.<span class="hljs-property">password</span> !== password) {
    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">401</span>).<span class="hljs-title function_">json</span>({<span class="hljs-attr">status</span>: <span class="hljs-string">'error'</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">'密码错误'</span>});
  }

  <span class="hljs-comment">// 生成两个 token</span>
  <span class="hljs-keyword">const</span> access_token = jwtToken.<span class="hljs-title function_">generateToken</span>(user, <span class="hljs-string">'1h'</span>);
  <span class="hljs-keyword">const</span> refresh_token = jwtToken.<span class="hljs-title function_">generateToken</span>(user, <span class="hljs-string">'7d'</span>);

  res.<span class="hljs-title function_">json</span>({
    <span class="hljs-attr">userInfo</span>: {
      <span class="hljs-attr">username</span>: user.<span class="hljs-property">username</span>,
      <span class="hljs-attr">email</span>: user.<span class="hljs-property">email</span>
    },
    access_token,
    refresh_token
  })


})

<span class="hljs-comment">// 需要token 认证的路由</span>
app.<span class="hljs-title function_">get</span>(<span class="hljs-string">'/home'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  <span class="hljs-keyword">const</span> authorization = req.<span class="hljs-property">headers</span>.<span class="hljs-property">authorization</span>;
  <span class="hljs-keyword">if</span> (!authorization) {
    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">401</span>).<span class="hljs-title function_">json</span>({<span class="hljs-attr">status</span>: <span class="hljs-string">'error'</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">'未登录'</span>});
  }

  <span class="hljs-keyword">try</span> {
    <span class="hljs-keyword">const</span> token = authorization.<span class="hljs-title function_">split</span>(<span class="hljs-string">' '</span>)[<span class="hljs-number">1</span>];  <span class="hljs-comment">// 'Bearer esdadfadadxxxxxxxxx'</span>
    <span class="hljs-keyword">const</span> data = jwtToken.<span class="hljs-title function_">verifyToken</span>(token);
    res.<span class="hljs-title function_">json</span>({ <span class="hljs-attr">status</span>: <span class="hljs-string">'success'</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">'验证成功'</span>, <span class="hljs-attr">data</span>: data });
  } <span class="hljs-keyword">catch</span> (error) {
    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">401</span>).<span class="hljs-title function_">json</span>({<span class="hljs-attr">status</span>: error, <span class="hljs-attr">message</span>: <span class="hljs-string">'token失效，请重新登录'</span>});
  }

})

<span class="hljs-comment">// 刷新 token</span>
app.<span class="hljs-title function_">get</span>(<span class="hljs-string">'/refresh'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  <span class="hljs-keyword">const</span> { token } = req.<span class="hljs-property">query</span>;

  <span class="hljs-keyword">try</span> {
    <span class="hljs-keyword">const</span> data = jwtToken.<span class="hljs-title function_">verifyToken</span>(token);
    <span class="hljs-keyword">const</span> access_token = jwtToken.<span class="hljs-title function_">generateToken</span>(data, <span class="hljs-string">'1h'</span>);
    <span class="hljs-keyword">const</span> refresh_token = jwtToken.<span class="hljs-title function_">generateToken</span>(data, <span class="hljs-string">'7d'</span>);
    res.<span class="hljs-title function_">json</span>({ <span class="hljs-attr">status</span>: <span class="hljs-string">'success'</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">'刷新成功'</span>, access_token, refresh_token });
  } <span class="hljs-keyword">catch</span> (error) {
    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">401</span>).<span class="hljs-title function_">json</span>({<span class="hljs-attr">status</span>: error, <span class="hljs-attr">message</span>: <span class="hljs-string">'token失效，请重新登录'</span>});
  }
})




app.<span class="hljs-title function_">listen</span>(port, <span class="hljs-function">() =&gt;</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Example app listening on port <span class="hljs-subst">${port}</span>`</span>);
})
</code></pre>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// token.js</span>
<span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">'jsonwebtoken'</span>);

<span class="hljs-comment">// 生成 token</span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">generateToken</span>(<span class="hljs-params">user, expiresIn</span>) {
  <span class="hljs-keyword">const</span> payload = {
    <span class="hljs-attr">username</span>: user.<span class="hljs-property">username</span>,
    <span class="hljs-attr">email</span>: user.<span class="hljs-property">email</span>
  };
  <span class="hljs-keyword">const</span> secret = <span class="hljs-string">'my_secret_key'</span>;
  <span class="hljs-keyword">const</span> options = {
    <span class="hljs-attr">expiresIn</span>: expiresIn
  };
  <span class="hljs-keyword">return</span> jwt.<span class="hljs-title function_">sign</span>(payload, secret, options);
}

<span class="hljs-comment">// 验证 token</span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">verifyToken</span>(<span class="hljs-params">token</span>) {
  <span class="hljs-keyword">const</span> secret = <span class="hljs-string">'my_secret_key'</span>;
  <span class="hljs-keyword">const</span> decoded = jwt.<span class="hljs-title function_">verify</span>(token, secret);
  <span class="hljs-keyword">return</span> decoded;
}

<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
  generateToken,
  verifyToken
};
</code></pre>
<h4 data-id="heading-12">六、流程图解</h4>
<pre><code class="hljs language-markdown" lang="markdown">用户发起请求 → 携带access<span class="hljs-emphasis">_token → 服务端验证
       ↓ 无效/过期
触发401错误 → 前端拦截 → 发起refresh_</span>token刷新请求
<span class="hljs-code">       ↓ 刷新成功
更新本地令牌 → 重新发送原请求 → 用户无感知
       ↓ 刷新失败
跳转登录页面 → 需要重新认证
</span></code></pre>
<h4 data-id="heading-13">七、安全注意事项</h4>
<ol>
<li><strong>refresh_token要长期有效，但也不能太长</strong>：通常设置7-30天有效期</li>
<li><strong>使用HTTPS</strong>：防止令牌被中间人窃取</li>
<li><strong>不要明文存储令牌</strong>：使用浏览器localStorage要确保XSS防护</li>
<li><strong>设置合理有效期</strong>：根据业务需求平衡安全与体验</li>
</ol></div></div>