
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/DOMLX/p/18739196" title="发布于 2025-02-26 17:38">
    <span role="heading" aria-level="2">halcon中是怎么实现半导体/Led中的GoldenDie的检测方法的  基于局部可变形模板匹配 variation_model模型</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>&nbsp;</p>
<p><span style="font-size: 18px">原文作者：aircraft</span></p>
<p><span style="font-size: 18px">原文地址：<a class="ng-star-inserted" href="https://www.cnblogs.com/DOMLX/p/18739196" rel="noopener" target="_blank">https://www.cnblogs.com/DOMLX/p/18739196</a></span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">　　这篇简单介绍一下halcon中的print_check_single_chars.hdev 实例&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; Perform a typical print quality inspection using variation models for each character也就是打印字母质量的瑕疵检测。</span></p>
<p><span style="font-size: 18px">这个实例中运用到的variation_model模型来检测就是半导体/Led中的GoldenDie（构阵带？）的检测方法，通过建立标准晶圆（Die）图形模板，然后实际生产中每颗晶圆（Die）就与标准图形模板比对</span></p>
<p><span style="font-size: 18px">得到的差异图形，在对差异图形进行分析（面积，灰度等等）来判断每颗晶圆（Die）的NG、OK。如果你将本篇实例掌握理解了，那么就可以把这个检测方法应用到半导体/Led晶圆检测当中去了。</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">一.主要算子详解</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">最重要的算子只有几个</span></p>
<p><span style="font-size: 18px">1.<strong>create_variation_model</strong>( : :<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#Width" rel="noopener nofollow"><em>Width</em></a>,<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#Height" rel="noopener nofollow"><em>Height</em></a>,<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#Type" rel="noopener nofollow"><em>Type</em></a>,<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#Mode" rel="noopener nofollow"><em>Mode</em></a><span class="Apple-converted-space">&nbsp;:<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#ModelID" rel="noopener nofollow"><em>ModelID</em></a>)</span></span></span></span></span></span></span></p>
<p><span style="font-size: 18px"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space">2.<strong>train_variation_model</strong>(<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#Images" rel="noopener nofollow"><em>Images</em></a><span class="Apple-converted-space">&nbsp;: :<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#ModelID" rel="noopener nofollow"><em>ModelID</em></a><span class="Apple-converted-space">&nbsp;: )</span></span></span></span></span></span></span></span></span></span></p>
<p><span style="font-size: 18px"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space">3.<strong>prepare_variation_model</strong>( : :<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#ModelID" rel="noopener nofollow"><em>ModelID</em></a>,<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#AbsThreshold" rel="noopener nofollow"><em>AbsThreshold</em></a>,<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#VarThreshold" rel="noopener nofollow"><em>VarThreshold</em></a><span class="Apple-converted-space">&nbsp;: )</span></span></span></span></span></span></span></span></span></span></span></p>
<p><span style="font-size: 18px"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space">4.<strong>clear_train_data_variation_model</strong>( : :<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#ModelID" rel="noopener nofollow"><em>ModelID</em></a><span class="Apple-converted-space">&nbsp;: )</span></span></span></span></span></span></span></span></span></p>
<p><span style="font-size: 18px"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space">5.<strong>compare_variation_model</strong>(<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#Image" rel="noopener nofollow"><em>Image</em></a><span class="Apple-converted-space">&nbsp;:<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#Region" rel="noopener nofollow"><em>Region</em></a><span class="Apple-converted-space">&nbsp;:<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#ModelID" rel="noopener nofollow"><em>ModelID</em></a><span class="Apple-converted-space">&nbsp;: )</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span style="font-size: 18px"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space">6.<strong>clear_variation_model</strong>( : :<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#ModelID" rel="noopener nofollow"><em>ModelID</em></a><span class="Apple-converted-space">&nbsp;: )</span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span style="font-size: 18px"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space">总结起来顺序就是：创建模型，训练模型，给模型设置参数，释放训练参数，输入图像比较模型得到结果，清除释放模型资源。<span style="font-size: 18px"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space">接下来一个个了解一下模型参数</span></span></span></span></span></span></span>。</span></span></span></span></span></span></span></p>
<p><span class="Apple-converted-space" style="font-family: Microsoft YaHei; font-size: 18px"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space">1.<strong>create_variation_model</strong>( : :<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#Width" rel="noopener nofollow"><em>Width</em></a>,<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#Height" rel="noopener nofollow"><em>Height</em></a>,<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#Type" rel="noopener nofollow"><em>Type</em></a>,<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#Mode" rel="noopener nofollow"><em>Mode</em></a><span class="Apple-converted-space">&nbsp;:<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#ModelID" rel="noopener nofollow"><em>ModelID</em></a>)</span></span></span></span></span></span>详解：</span></span></span></span></span></span></p>
<h3><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>参数详解</strong></span></h3>
<h4><span style="font-family: Microsoft YaHei; font-size: 18px">1. <strong>Width &amp; Height</strong></span></h4>
<ul>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>作用</strong>：定义变异模型的<strong>参考区域尺寸</strong>（即字符在训练图像中对齐后的目标尺寸）。</span></li>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>关键点</strong>：</span>
<ul>
<li><span style="font-size: 18px"><strong>必须与训练图像裁剪后的尺寸一致</strong>。例如，若字符在基准图像中被裁剪为 <code>100×50</code> 像素，则 <code>Width=100</code>, <code>Height=50</code>。</span></li>
<li><span style="font-size: 18px"><strong>直接影响模型对齐精度</strong>：若实际字符尺寸与 <code>Width/Height</code> 不匹配，会导致仿射变换误差。</span></li>
</ul>
</li>
</ul>
<h4><span style="font-family: Microsoft YaHei; font-size: 18px">2. <strong>Type</strong></span></h4>
<ul>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>数据类型选项</strong>：</span>
<ul>
<li><span style="font-size: 18px"><code>'byte'</code> (默认值): 8-bit无符号整数，适用于亮度值范围在 <code>[0,255]</code> 的图像。</span></li>
<li><span style="font-size: 18px"><code>'uint2'</code>: 16-bit无符号整数，支持更高动态范围（如HDR图像）。</span></li>
<li><span style="font-size: 18px"><code>'float'</code>: 浮点数，用于需要高精度计算的场景。</span></li>
</ul>
</li>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>选择依据</strong>：</span>
<ul>
<li><span style="font-size: 18px">若图像经过归一化（如 <code>[0,1]</code>），需选择 <code>'float'</code>。</span></li>
<li><span style="font-size: 18px">若使用<code>prepare_variation_model</code>时设置了 <code>VarThreshold</code>，建议用 <code>'uint2'</code> 以避免数值溢出。</span></li>
</ul>
</li>
</ul>
<h4><span style="font-family: Microsoft YaHei; font-size: 18px">3. <strong>Mode</strong></span></h4>
<p><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>有三个参数可选：</strong></span></p>
<ul>
<li>
<table>
<thead>
<tr><th><span style="font-family: Microsoft YaHei; font-size: 18px">模式</span></th><th><span style="font-family: Microsoft YaHei; font-size: 18px">说明</span></th><th><span style="font-family: Microsoft YaHei; font-size: 18px">适用场景</span></th></tr>
</thead>
<tbody>
<tr>
<td><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>'standard'</strong></span></td>
<td><span style="font-family: Microsoft YaHei; font-size: 18px">默认模式，基于像素值的<strong>方差</strong>计算变异模型。</span></td>
<td><span style="font-family: Microsoft YaHei; font-size: 18px">常规场景（字符对比度高、噪声较少）</span></td>
</tr>
<tr>
<td><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>'robust'</strong></span></td>
<td><span style="font-family: Microsoft YaHei; font-size: 18px">使用<strong>鲁棒统计</strong>（如中位数）替代方差，减少异常值影响。</span></td>
<td><span style="font-family: Microsoft YaHei; font-size: 18px">训练图像含噪声或离群点</span></td>
</tr>
<tr>
<td><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>'direct'</strong></span></td>
<td><span style="font-family: Microsoft YaHei; font-size: 18px">跳过方差计算，直接使用原始像素值训练模型。</span></td>
<td><span style="font-family: Microsoft YaHei; font-size: 18px">需要最大保留原始像素信息</span></td>
</tr>
</tbody>
</table>
</li>
</ul>
<h3><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>关键区别</strong></span></h3>
<ol>
<li>
<p><span style="font-size: 18px"><strong>'standard' vs 'robust'</strong>：</span></p>
<ul>
<li><span style="font-size: 18px"><strong>'standard'</strong>：对像素值的分布敏感，易受高对比度噪声干扰。</span></li>
<li><span style="font-size: 18px"><strong>'robust'</strong>：通过中位数等稳健统计量，对噪声更鲁棒（适合工业检测场景）。</span></li>
</ul>
</li>
<li>
<p><strong>'direct'</strong>：</p>
<ul>
<li><span style="font-size: 18px">不进行任何统计预处理，直接将像素值作为特征输入模型。</span></li>
<li><span style="font-size: 18px">可能导致模型过拟合原始图像噪声，但保留更多细节。</span></li>
</ul>
</li>
</ol>
<p><span class="Apple-converted-space" style="font-family: Microsoft YaHei; font-size: 18px"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space">这里我们一般使用前面两个参数，均值或者中值，均值的计算都是每个图像同位置的灰度数据集来统计的，如果你能确保你传入的训练图像非常优秀都是标准的那么选均值就很好，如果你传入的图像不够完美有好的和次好的存在，那么就可以选中值。这时候中值的参数会给你的程序带来更好的抗噪。</span></span></span></span></span></span></p>
<p>&nbsp;</p>
<p><span class="Apple-converted-space" style="font-family: Microsoft YaHei; font-size: 18px"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space">2.<strong>train_variation_model</strong>(<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#Images" rel="noopener nofollow"><em>Images</em></a><span class="Apple-converted-space">&nbsp;: :<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#ModelID" rel="noopener nofollow"><em>ModelID</em></a><span class="Apple-converted-space">&nbsp;: )</span></span></span></span></span></span></span></span></span>详解：<br></span></span></span></span></span></span></p>
<h3><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>参数详解</strong></span></h3>
<h4><span style="font-family: Microsoft YaHei; font-size: 18px">1. <strong><code>Images</code></strong></span></h4>
<ul>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>类型</strong>：<code>Region</code> 或 <code>Image</code></span></li>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>作用</strong>：提供<strong>对齐后的训练图像</strong>（已通过仿射变换调整到参考区域尺寸）。</span></li>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>关键要求</strong>：</span>
<ul>
<li><span style="font-size: 18px"><strong>尺寸匹配</strong>：图像尺寸必须与 <code>create_variation_model</code> 中定义的 <code>Width</code> 和 <code>Height</code> 一致。</span></li>
<li><span style="font-size: 18px"><strong>内容要求</strong>：图像需包含字符区域的变形样本（如旋转、缩放、平移后的实例）。</span></li>


</ul>


</li>


</ul>
<h4><span style="font-family: Microsoft YaHei; font-size: 18px">2. <strong><code>ModelID</code></strong></span></h4>
<ul>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>类型</strong>：整数</span></li>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>作用</strong>：指定要训练的变异模型唯一标识符。</span></li>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>依赖</strong>：必须提前通过 <code>create_variation_model</code> 创建。</span></li>


</ul>
<h3><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>关键细节</strong></span></h3>
<h4><span style="font-family: Microsoft YaHei; font-size: 18px">1. <strong>数据增强机制</strong></span></h4>
<ul>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>网格采样</strong>：默认将图像划分为多个区域，每个区域的统计特征作为训练样本。</span></li>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>阈值筛选</strong>：通过 <code>prepare_variation_model</code> 排除噪声和非字符区域。</span></li>


</ul>
<h4><span style="font-family: Microsoft YaHei; font-size: 18px">2. <strong>模型更新策略</strong></span></h4>
<ul>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>增量训练</strong>：每次调用 <code>train_variation_model</code> 会累积新的样本到模型中，无需从头训练。</span></li>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>参数存储</strong>：变异模型的参数（如像素分布直方图）保存在 <code>ModelID</code> 对应的内存中。</span></li>


</ul>
<h3><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>总结</strong></span></h3>
<ul>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>核心作用</strong>：通过输入的训练图像更新变异模型，使其学习字符在不同变形下的外观变化。</span></li>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>依赖关系</strong>：需配合 <code>create_variation_model</code> 和 <code>prepare_variation_model</code> 使用。</span></li>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>优化方向</strong>：合理设置网格参数和阈值，增加训练图像的多样性以提高模型鲁棒性。</span></li>


</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span class="Apple-converted-space" style="font-family: Microsoft YaHei; font-size: 18px"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><strong>3.prepare_variation_model</strong>( : :<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#ModelID" rel="noopener nofollow"><em>ModelID</em></a>,<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#AbsThreshold" rel="noopener nofollow"><em>AbsThreshold</em></a>,<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#VarThreshold" rel="noopener nofollow"><em>VarThreshold</em></a><span class="Apple-converted-space">&nbsp;: )详解：<br></span></span></span></span></span></span></span></span></span></span></p>
<h3><span style="font-family: Microsoft YaHei; font-size: 18px">参数含义：</span></h3>
<ol>
<li>
<p><strong><code>AbsThreshold</code>（20）</strong>：</p>
<ul>
<li><span style="font-size: 18px"><strong>作用</strong>：筛选图像块时，像素值的<strong>绝对偏差阈值</strong>。</span></li>
<li><span style="font-size: 18px"><strong>逻辑</strong>：仅保留像素值在 <code>[局部均值 - AbsThreshold, 局部均值 + VarThreshold]</code> 范围内的区域。</span></li>
<li><span style="font-size: 18px"><strong>示例</strong>：若某像素的局部均值为 <code>100</code>，则仅保留 <code>80 ≤ 像素值 ≤ 120</code> 的区域（假设 <code>VarThreshold=20</code>）。</span></li>



</ul>



</li>
<li>
<p><strong><code>VarThreshold</code>（3）</strong>：</p>
<ul>
<li><span style="font-size: 18px"><strong>作用</strong>：筛选图像块时，像素值的<strong>方差阈值</strong>。</span></li>
<li><span style="font-size: 18px"><strong>逻辑</strong>：丢弃方差超过 <code>VarThreshold</code> 的图像区域（避免噪声干扰）。</span></li>
<li><span style="font-size: 18px"><strong>示例</strong>：若某区域的像素方差为 <code>5</code>，则保留该区域；若方差为 <code>6</code>，则丢弃。</span></li>



</ul>



</li>



</ol>
<h3><span style="font-family: Microsoft YaHei; font-size: 18px">函数功能：</span></h3>
<ul>
<ul>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>训练数据准备</strong>：</span><br><span style="font-family: Microsoft YaHei; font-size: 18px">
从当前图像中提取符合阈值的图像块（Tile），用于训练变异模型。</span></li>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>目的</strong>：通过阈值筛选，消除噪声和非字符区域，使模型专注于字符本身的变形特征。

</span></li>



</ul>


</ul>
<h3><span style="font-family: Microsoft YaHei; font-size: 18px">本实例中为什么选择 <code>20</code> 和 <code>3</code>？</span></h3>
<p><span style="font-family: Microsoft YaHei; font-size: 18px">这是经验值，需根据字符对比度和背景噪声水平调整：</span></p>
<ul>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>字符对比度高</strong>（如黑色字符在白色背景上）：</span>
<ul>
<li><span style="font-size: 18px">可适当增大 <code>AbsThreshold</code>（如30），保留更宽的像素范围。</span></li>


</ul>


</li>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>字符边缘细腻</strong>（如细线字体）：</span>
<ul>
<li><span style="font-size: 18px">需减小 <code>VarThreshold</code>（如1），保留更多局部方差小的区域以捕捉细节。</span></li>


</ul>


</li>


</ul>
<h3><span style="font-family: Microsoft YaHei; font-size: 18px">补充说明：</span></h3>
<ul>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>数据增强</strong>：此步骤通过阈值筛选，间接实现了对字符区域的“自适应采样”。</span></li>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>与网格采样的区别</strong>：不同于<code>prepare_variation_model</code>的其他参数版本（如网格划分），此参数组合直接通过像素统计特征筛选训练样本。</span></li>


</ul>
<p>&nbsp;</p>
<p><span class="Apple-converted-space" style="font-family: Microsoft YaHei; font-size: 18px"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space">4.<strong>clear_train_data_variation_model</strong>( : :<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#ModelID" rel="noopener nofollow"><em>ModelID</em></a><span class="Apple-converted-space">&nbsp;: )详解：<br></span></span></span></span></span></span></span></span></p>
<h3><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>核心作用</strong></span></h3>
<ul>
<ul>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>清空训练数据</strong>：</span><br><span style="font-family: Microsoft YaHei; font-size: 18px">
删除与指定变异模型（<code>ModelID</code>）关联的所有训练样本和中间计算结果。</span></li>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>释放内存</strong>：</span><br><span style="font-family: Microsoft YaHei; font-size: 18px">
回收模型占用的内存空间，避免长期训练导致内存泄漏。</span></li>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>重置训练状态</strong>：</span><br><span style="font-family: Microsoft YaHei; font-size: 18px">
将模型恢复到初始状态（未训练状态），允许重新开始训练。</span></li>



</ul>


</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-family: Microsoft YaHei; font-size: 18px"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space">5.<strong>compare_variation_model</strong>(<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#Image" rel="noopener nofollow"><em>Image</em></a><span class="Apple-converted-space">&nbsp;:<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#Region" rel="noopener nofollow"><em>Region</em></a><span class="Apple-converted-space">&nbsp;:<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#ModelID" rel="noopener nofollow"><em>ModelID</em></a><span class="Apple-converted-space">&nbsp;: )</span></span></span></span></span></span></span></span></span></span></span>详解：</span></p>
<h3><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>参数详解</strong></span></h3>
<h4><span style="font-family: Microsoft YaHei; font-size: 18px">1. <strong><code>Image</code></strong></span></h4>
<ul>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>类型</strong>: <code>Image</code></span></li>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>作用</strong>: 输入的待比较图像，需与训练变异模型时使用的图像<strong>尺寸和通道一致</strong>（如灰度图或彩色图）。</span></li>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>关键要求</strong>:</span>
<ul>
<li><span style="font-size: 18px">必须经过与训练阶段相同的仿射变换和对齐操作。</span></li>
<li><span style="font-size: 18px">像素值范围需与模型创建时指定的 <code>Type</code>（<code>'byte'/'uint2'/'float'</code>）匹配。</span></li>


</ul>


</li>


</ul>
<h4><span style="font-family: Microsoft YaHei; font-size: 18px">2. <strong><code>Region</code></strong></span></h4>
<ul>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>类型</strong>: <code>Region</code></span></li>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>作用</strong>: 定义在 <code>Image</code> 中要比较的目标区域。该区域的尺寸必须与变异模型的参考区域（<code>Width×Height</code>）<strong>严格一致</strong>。</span></li>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>生成方式</strong>:</span>
<ul>
<li><span style="font-size: 18px">通过 <code>affine_trans_region</code> 将检测到的字符区域变换到参考区域坐标系。</span></li>
<li><span style="font-size: 18px">示例代码：</span>
<div class="hyc-common-markdown__code">
<div class="hyc-common-markdown__code__tool"><span style="font-size: 18px">&nbsp;</span></div>
<pre class="hyc-common-markdown__code-lan"><code class="language-cpp" style="background: rgba(250, 250, 250, 1); color: rgba(56, 58, 66, 1); font-family: &quot;Fira Code&quot;, &quot;Fira Mono&quot;, Menlo, Consolas, &quot;DejaVu Sans Mono&quot;, monospace; direction: ltr; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; line-height: 1.5; tab-size: 2; hyphens: none"><span class="token" style="color: rgba(64, 120, 242, 1)"><span style="font-size: 18px">vector_angle_to_rigid</span><span class="token" style="color: rgba(56, 58, 66, 1)"><span style="font-size: 18px">(</span><span class="token" style="color: rgba(56, 58, 66, 1)"><span style="font-size: 18px">.</span><span class="token" style="color: rgba(56, 58, 66, 1)"><span style="font-size: 18px">.</span><span class="token" style="color: rgba(56, 58, 66, 1)"><span style="font-size: 18px">.</span><span class="token" style="color: rgba(56, 58, 66, 1)"><span style="font-size: 18px">, HomMat2D</span><span class="token" style="color: rgba(56, 58, 66, 1)"><span style="font-size: 18px">)
</span><span class="token" style="color: rgba(64, 120, 242, 1)"><span style="font-size: 18px">affine_trans_region</span><span class="token" style="color: rgba(56, 58, 66, 1)"><span style="font-size: 18px">(RegionDetected</span><span class="token" style="color: rgba(56, 58, 66, 1)"><span style="font-size: 18px">, RegionAligned</span><span class="token" style="color: rgba(56, 58, 66, 1)"><span style="font-size: 18px">, HomMat2D</span><span class="token" style="color: rgba(56, 58, 66, 1)"><span style="font-size: 18px">)</span><br><br></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</li>
</ul>
</li>
</ul>
<h4>&nbsp;</h4>
<h4><span style="font-family: Microsoft YaHei; font-size: 18px">3. <strong><code>ModelID</code></strong></span></h4>
<ul>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>类型</strong>: <code>integer</code></span></li>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>作用</strong>: 指定要使用的变异模型唯一标识符（需通过 <code>create_variation_model</code> 创建）。</span></li>
</ul>
<p><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>算子： compare_ext_variation_model(Image : Region : ModelID, Mode : )<br> 该算子是算子compare_variation_model的拓展，其参数 MODE可以控制输出暗或亮缺陷或者都输出。</strong></span></p>
<p><span style="font-family: Microsoft YaHei; font-size: 18px"><strong><span style="font-size: 18px">variation_model模型里还有很多其他算子，当你发现当前的算子参数不够完成你要的项目的时候，可以再去看看其他扩展的算子。</span><br></strong></span></p>
<p><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>工作原理</strong></span></p>
<ol>
<li>
<p><span style="font-size: 18px"><strong>模型匹配</strong>：</span></p>
<ul>
<li><span style="font-size: 18px">将输入图像的 <code>Region</code> 与变异模型进行特征比对，提取统计特征（如局部均值、方差、纹理能量）。</span></li>


</ul>


</li>
<li>
<p><strong>差异计算</strong>：</p>
<ul>
<li><span style="font-size: 18px">计算像素值和区域特征的绝对偏差，并生成偏差图 <code>Deviation</code>。</span></li>
<li><span style="font-size: 18px">根据统计特征的匹配程度，输出相似度分数 <code>Similarity</code>。</span></li>


</ul>


</li>
<li>
<p><span style="font-size: 18px"><strong>置信度评估</strong>：</span></p>
<ul>
<li><span style="font-size: 18px">基于相似度分数生成二值掩模 <code>Confidence</code>，标识高置信度区域。</span></li>


</ul>


</li>


</ol>
<p>&nbsp;</p>
<p><span class="Apple-converted-space" style="font-family: Microsoft YaHei; font-size: 18px"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space"><span class="Apple-converted-space">6.<strong>clear_variation_model</strong>( : :<span class="Apple-converted-space">&nbsp;<a style="color: rgba(0, 68, 204, 1); text-decoration: none" href="#ModelID" rel="noopener nofollow"><em>ModelID</em></a><span class="Apple-converted-space">&nbsp;: )详解：<br></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>&nbsp;</p>
<h3><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>核心作用</strong></span></h3>
<p>&nbsp;</p>
<ol><ol>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>清除训练数据</strong>：</span><br><span style="font-family: Microsoft YaHei; font-size: 18px">
删除与指定变异模型（<code>ModelID</code>）关联的所有训练样本和中间计算结果。</span></li>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>释放内存</strong>：</span><br><span style="font-family: Microsoft YaHei; font-size: 18px">
回收模型占用的内存空间，避免长期训练导致内存泄漏。</span></li>
<li><span style="font-family: Microsoft YaHei; font-size: 18px"><strong>重置训练状态</strong>：</span><br><span style="font-family: Microsoft YaHei; font-size: 18px">
将模型恢复到初始状态（未训练状态），允许重新开始训练。</span></li>



</ol></ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">print_check_single_chars.hdev 详解：<br></span></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250226165207825-1120994060.png" alt="" loading="lazy"></p>
<p><span style="font-size: 18px">这个实例主要就是检测打印字母的质量，首先是将打印出来的字母一个个拆分创建模板，然后传入很多训练的图像也是将其中的字母拆分区域传入，训练完毕后你就得到了多个字母区域训练完成可以后续用来比较模板，然后就是传入待检测的图片，同样将待检测的字母分割好一个个对应传入模板比较，得到差异区域，在根据这个差异区域的灰度，面积等参数来确定这个字母质量为OK/NG。</span></p>
<p><span style="font-size: 18px">我将实例代码分成七个段落</span></p>
<p><strong><span style="font-size: 18px">1.窗体和图像的一些预处理操作</span></strong></p>
<div class="cnblogs_code">
<pre>*-----------------------------------------------------------------------
* <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">. 初始化与图像预处理
</span>*-----------------------------------------------------------------------<span style="color: rgba(0, 0, 0, 1)">
dev_update_off()          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 关闭实时更新显示</span>
read_image (Image, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">pen/pen-01</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 读取基准图像</span>
<span style="color: rgba(0, 0, 0, 1)">get_image_size (Image, Width, Height)
dev_close_window()        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 关闭现有窗口</span>
dev_open_window (<span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0</span>, Width, Height, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, WindowHandle) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建新窗口</span>
set_display_font (WindowHandle, <span style="color: rgba(128, 0, 128, 1)">16</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">mono</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置显示字体为16号等宽黑体</span>
dev_set_color (<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">red</span><span style="color: rgba(128, 0, 0, 1)">'</span>)    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置红色显示</span>
dev_display (Image)      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示原始图像</span></pre>
</div>
<p>&nbsp;</p>
<p><strong><span style="font-size: 18px">2.字符区域分割与预处理</span></strong></p>
<div class="cnblogs_code">
<pre>*-----------------------------------------------------------------------
* <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">. 字符区域分割与预处理
</span>*-----------------------------------------------------------------------<span style="color: rgba(0, 0, 0, 1)">
threshold (Image, Region, </span><span style="color: rgba(128, 0, 128, 1)">100</span>, <span style="color: rgba(128, 0, 128, 1)">255</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 阈值分割（灰度&gt;100为前景）</span>
fill_up (Region, RegionFillUp)       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 填充孔洞</span>
difference (RegionFillUp, Region, RegionDifference) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 取反得到背景区域</span>
shape_trans (RegionDifference, RegionTrans, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">convex</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 转换为凸包区域</span>
dilation_circle (RegionTrans, RegionDilation, <span style="color: rgba(128, 0, 128, 1)">8.5</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 扩展区域以包含边缘噪声</span>
<span style="color: rgba(0, 0, 0, 1)">reduce_domain (Image, RegionDilation, ImageReduced)
threshold (ImageReduced, Region, </span><span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">180</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 二值化处理</span>
connection (Region, ConnectedRegions) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 连通区域分析</span>
sort_region (ConnectedRegions, SortedRegions, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">character</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">row</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 按字符顺序排序</span>
dilation_circle (SortedRegions, RegionDilation, <span style="color: rgba(128, 0, 128, 1)">1.5</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 轻微膨胀以稳定区域</span>
smallest_rectangle1 (RegionDilation, Row1, Column1, Row2, Column2) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 计算最小包围矩形</span>
count_obj (RegionDilation, Number) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 统计字符数量</span>
<span style="color: rgba(0, 0, 0, 1)">
Heights :</span>= Row2 - Row1 + <span style="color: rgba(128, 0, 128, 1)">5</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 区域高度（含缓冲）</span>
Widths := Column2 - Column1 + <span style="color: rgba(128, 0, 128, 1)">5</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 区域宽度（含缓冲）</span>
<span style="color: rgba(0, 0, 0, 1)">
gen_empty_obj (ShapeModels)            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 初始化形状模型容器</span>
gen_empty_obj (VariationModelROIs)    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 初始化变异模型ROI容器</span>
ShapeModelIDs := []                   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 存储形状模型ID列表</span>
VariationModelIDs := []               <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 存储变异模型ID列表</span>
RowsRef := []                         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 存储基准行坐标</span>
ColumnsRef := []                       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 存储基准列坐标</span>

<span style="color: rgba(0, 0, 255, 1)">for</span> I := <span style="color: rgba(128, 0, 128, 1)">1</span> to Number by <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
    select_obj (RegionDilation, ObjectSelected, I) </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 选择第I个字符区域</span>
    Height := Heights[I - <span style="color: rgba(128, 0, 128, 1)">1</span>]                     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取字符高度</span>
    Width := Widths[I - <span style="color: rgba(128, 0, 128, 1)">1</span>]                        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取字符宽度</span>
    move_region (ObjectSelected, RegionMoved, -Row1[I - <span style="color: rgba(128, 0, 128, 1)">1</span>], -Column1[I - <span style="color: rgba(128, 0, 128, 1)">1</span>]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 平移至左上角</span>
    crop_part (Image, ImagePart, Row1[I - <span style="color: rgba(128, 0, 128, 1)">1</span>], Column1[I - <span style="color: rgba(128, 0, 128, 1)">1</span>], Widths[I - <span style="color: rgba(128, 0, 128, 1)">1</span>], Heights[I - <span style="color: rgba(128, 0, 128, 1)">1</span>]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 裁剪字符区域</span>
    reduce_domain (ImagePart, RegionMoved, ImageReduced) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 减少图像域</span>
    inspect_shape_model (ImageReduced, ModelImages, ModelRegions, <span style="color: rgba(128, 0, 128, 1)">1</span>, [<span style="color: rgba(128, 0, 128, 1)">15</span>,<span style="color: rgba(128, 0, 128, 1)">15</span>,<span style="color: rgba(128, 0, 128, 1)">10</span>]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 检测形状模型</span>
    gen_contours_skeleton_xld (ModelRegions, ModelContour, <span style="color: rgba(128, 0, 128, 1)">1</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">filter</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 生成轮廓</span>
    area_center (RegionMoved, Area, RowRef, ColumnRef) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 计算质心位置（用于对齐）</span>
    create_shape_model (ImageReduced, <span style="color: rgba(128, 0, 128, 1)">5</span>, rad(-<span style="color: rgba(128, 0, 128, 1)">10</span>), rad(<span style="color: rgba(128, 0, 128, 1)">20</span>), <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">auto</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">none</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">use_polarity</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 128, 1)">10</span>, ShapeModelID) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建形状模型</span>
    create_variation_model (Width, Height, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">byte</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">standard</span><span style="color: rgba(128, 0, 0, 1)">'</span>, VariationModelID) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建变异模型</span>
    concat_obj (ShapeModels, ModelContour, ShapeModels) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 合并模型轮廓</span>
    concat_obj (VariationModelROIs, RegionMoved, VariationModelROIs) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 合并ROI区域</span>
    RowsRef := [RowsRef,RowRef]                     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 更新行坐标引用</span>
    ColumnsRef := [ColumnsRef,ColumnRef]               <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 更新列坐标引用</span>
    ShapeModelIDs := [ShapeModelIDs,ShapeModelID]     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 存储形状模型ID</span>
    VariationModelIDs := [VariationModelIDs,VariationModelID] <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 存储变异模型ID</span>
endfor</pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250226170454375-860344614.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250226170519324-1486524283.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">这边主要是将一个个字母区域提取出来制作成一个个单独的模板。</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 18px">3. 形状模型可视化</span></strong></p>
<div class="cnblogs_code">
<pre>*-----------------------------------------------------------------------
* <span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">. 形状模型可视化
</span>*-----------------------------------------------------------------------<span style="color: rgba(0, 0, 0, 1)">
gen_empty_obj (Models)
</span><span style="color: rgba(0, 0, 255, 1)">for</span> I := <span style="color: rgba(128, 0, 128, 1)">1</span> to Number by <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
    select_obj (ShapeModels, ModelSelected, I) </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 选择第I个模型</span>
    hom_mat2d_identity (HomMat2DIdentity)       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 初始化仿射变换矩阵为单位矩阵</span>
    hom_mat2d_translate (HomMat2DIdentity, Row1[I - <span style="color: rgba(128, 0, 128, 1)">1</span>], Column1[I - <span style="color: rgba(128, 0, 128, 1)">1</span>], HomMat2D) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 平移至原始位置</span>
    affine_trans_contour_xld (ModelSelected, ModelTrans, HomMat2D) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 应用仿射变换</span>
    concat_obj (Models, ModelTrans, Models) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 合并可视化模型</span>
<span style="color: rgba(0, 0, 0, 1)">endfor

dev_display (Image)
dev_set_colored (</span><span style="color: rgba(128, 0, 128, 1)">6</span>)      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置浅灰色</span>
dev_set_draw (<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">margin</span><span style="color: rgba(128, 0, 0, 1)">'</span>)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 绘制边框</span>
dev_set_line_width (<span style="color: rgba(128, 0, 128, 1)">3</span>)   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 边框宽度3像素</span>
dev_display (Models)     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示所有形状模型</span>
dev_set_color (<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">yellow</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置黄色</span>
disp_message (WindowHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Shape models</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">12</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">yellow</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示标题</span>
disp_message (WindowHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">(moved to original pos.)</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">45</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">yellow</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示副标题</span>
disp_continue_message (WindowHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 继续显示黑色背景</span>
stop () <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 暂停等待用户确认</span></pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250226170818278-2011683101.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250226170728529-786899598.png" alt="" loading="lazy"></p>
<p>&nbsp;<span style="font-size: 18px">这边主要是将一个个字母区域通过反射变换到匹配所在的位置，让他能够与字母图对应轮廓显示查看。</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250226170956444-1073801168.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 18px">4. 变异模型训练</span></strong></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre>*-----------------------------------------------------------------------
* <span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">. 变异模型训练
</span>*-----------------------------------------------------------------------
<span style="color: rgba(0, 0, 255, 1)">for</span> J := <span style="color: rgba(128, 0, 128, 1)">1</span> to <span style="color: rgba(128, 0, 128, 1)">15</span> by <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
    read_image (Image, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">pen/pen-</span><span style="color: rgba(128, 0, 0, 1)">'</span> + J$<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">02d</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 读取训练图像（共15张）</span>
    find_shape_models (Image, ShapeModelIDs, rad(-<span style="color: rgba(128, 0, 128, 1)">10</span>), rad(<span style="color: rgba(128, 0, 128, 1)">20</span>), <span style="color: rgba(128, 0, 128, 1)">0.5</span>, [<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 128, 1)">1</span>], <span style="color: rgba(128, 0, 128, 1)">0.5</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">least_squares</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0.9</span>, Row, Column, Angle, Score, Model) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 检测字符位置</span>
    <span style="color: rgba(0, 0, 255, 1)">for</span> K := <span style="color: rgba(128, 0, 128, 1)">0</span> to |Score| - <span style="color: rgba(128, 0, 128, 1)">1</span> by <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
        vector_angle_to_rigid (Row[K], Column[K], Angle[K], RowsRef[Model[K]], ColumnsRef[Model[K]], </span><span style="color: rgba(128, 0, 128, 1)">0</span>, HomMat2D) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 计算位姿矩阵</span>
        affine_trans_image_size (Image, ImageTrans, HomMat2D, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">constant</span><span style="color: rgba(128, 0, 0, 1)">'</span>, Widths[Model[K]], Heights[Model[K]]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 图像对齐到基准尺寸</span>
        select_obj (VariationModelROIs, ROI, Model[K] + <span style="color: rgba(128, 0, 128, 1)">1</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 选择对应ROI区域</span>
        reduce_domain (ImageTrans, ROI, ImageTransReduced) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 减少图像域</span>
        train_variation_model (ImageTransReduced, VariationModelIDs[Model[K]]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 训练变异模型</span>
<span style="color: rgba(0, 0, 0, 1)">    endfor
endfor</span></pre>
</div>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250226171100914-359609632.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250226171207081-1095535099.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">这边主要是将传入的训练图形中的字母一个个匹配定位到后，将区域反射变换过去然后将字母裁剪出来传入训练。</span></p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 18px">5. 变异模型可视化验证</span></strong></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre>*-----------------------------------------------------------------------
* <span style="color: rgba(128, 0, 128, 1)">5</span><span style="color: rgba(0, 0, 0, 1)">. 变异模型可视化验证
</span>*-----------------------------------------------------------------------<span style="color: rgba(0, 0, 0, 1)">
get_image_size (Image, Width, Height)
gen_empty_obj (MeanImages)
gen_empty_obj (VarImages)
gen_empty_obj (ROIs)

</span><span style="color: rgba(0, 0, 255, 1)">for</span> I := <span style="color: rgba(128, 0, 128, 1)">1</span> to Number by <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
    get_variation_model (MeanImage, VarImage, VariationModelIDs[I </span>- <span style="color: rgba(128, 0, 128, 1)">1</span>]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取均值/方差图像</span>
    *AbsThreshold = <span style="color: rgba(128, 0, 128, 1)">20</span>：绝对阈值，用于筛选图像块中的像素值。只有像素值在[Mean - AbsThreshold, Mean +<span style="color: rgba(0, 0, 0, 1)"> VarThreshold]范围内的像素才会被保留。
    </span>*VarThreshold = <span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">：方差阈值，控制像素值的允许变化范围，基于局部区域的方差。
    prepare_variation_model (VariationModelIDs[I </span>- <span style="color: rgba(128, 0, 128, 1)">1</span>], <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 128, 1)">3</span>) <span style="color: rgba(0, 128, 0, 1)">//</span> 
<span style="color: rgba(0, 0, 0, 1)">    

    select_obj (VariationModelROIs, ROI, I) </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 选择第I个ROI区域</span>
    move_region (ROI, ROIMoved, Row1[I - <span style="color: rgba(128, 0, 128, 1)">1</span>], Column1[I - <span style="color: rgba(128, 0, 128, 1)">1</span>]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 移动至基准位置</span>
    reduce_domain (MeanImage, ROI, MeanImageReduced) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 减少域范围</span>
    reduce_domain (VarImage, ROI, VarImageReduced) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 减少域范围</span>
    concat_obj (MeanImages, MeanImageReduced, MeanImages) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 合并均值图像</span>
    concat_obj (VarImages, VarImageReduced, VarImages) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 合并方差图像</span>
    concat_obj (ROIs, ROIMoved, ROIs) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 合并ROI区域</span>
    clear_train_data_variation_model (VariationModelIDs[I - <span style="color: rgba(128, 0, 128, 1)">1</span>]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 清空训练数据</span>
<span style="color: rgba(0, 0, 0, 1)">endfor

tile_images_offset (MeanImages, MeanImage, Row1, Column1, gen_tuple_const(Number,</span>-<span style="color: rgba(128, 0, 128, 1)">1</span>), gen_tuple_const(Number,-<span style="color: rgba(128, 0, 128, 1)">1</span>), gen_tuple_const(Number,-<span style="color: rgba(128, 0, 128, 1)">1</span>), gen_tuple_const(Number,-<span style="color: rgba(128, 0, 128, 1)">1</span>), Width, Height) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 并排显示均值图像</span>
tile_images_offset (VarImages, VarImage, Row1, Column1, gen_tuple_const(Number,-<span style="color: rgba(128, 0, 128, 1)">1</span>), gen_tuple_const(Number,-<span style="color: rgba(128, 0, 128, 1)">1</span>), gen_tuple_const(Number,-<span style="color: rgba(128, 0, 128, 1)">1</span>), gen_tuple_const(Number,-<span style="color: rgba(128, 0, 128, 1)">1</span>), Width, Height) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 并排显示方差图像</span>
<span style="color: rgba(0, 0, 0, 1)">
get_domain (Image, Domain) </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取图像有效域</span>
dev_set_color (<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>)    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置黑色背景</span>
dev_set_draw (<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">fill</span><span style="color: rgba(128, 0, 0, 1)">'</span>)     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 填充显示</span>
dev_display (Domain)      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示图像域</span>
dev_display (MeanImage)   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示均值图像</span>
dev_set_colored (<span style="color: rgba(128, 0, 128, 1)">6</span>)      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置浅灰色边框</span>
dev_set_draw (<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">margin</span><span style="color: rgba(128, 0, 0, 1)">'</span>)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 绘制边框</span>
dev_set_line_width (<span style="color: rgba(128, 0, 128, 1)">1</span>)   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 边框宽度1像素</span>
dev_display (ROIs)       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示ROI区域</span>
dev_set_color (<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">yellow</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置黄色文字</span>
disp_message (WindowHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Reference images</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">yellow</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示标题</span>
disp_message (WindowHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">(moved to original pos.)</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">45</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">yellow</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示副标题</span>
disp_continue_message (WindowHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 继续显示黑色背景</span>
<span style="color: rgba(0, 0, 0, 1)">stop ()

dev_set_color (</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
dev_set_draw (</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">fill</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
dev_display (Domain)
dev_display (VarImage)
dev_set_colored (</span><span style="color: rgba(128, 0, 128, 1)">6</span><span style="color: rgba(0, 0, 0, 1)">)
dev_set_draw (</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">margin</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
dev_set_line_width (</span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">)
dev_display (ROIs)
dev_set_color (</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">yellow</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
disp_message (WindowHandle, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Variation images</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">yellow</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
disp_message (WindowHandle, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">(moved to original pos.)</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">45</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">yellow</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
disp_continue_message (WindowHandle, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
stop ()</span></pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250226171831625-490994630.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250226171848745-1829749566.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">这边就是整合每个模型里的均值图和方差图拼接出来显示给我们看一下过程。</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 18px">6. 打印错误检测与分类</span></strong></p>
<div class="cnblogs_code">
<pre>*-----------------------------------------------------------------------
* <span style="color: rgba(128, 0, 128, 1)">6</span><span style="color: rgba(0, 0, 0, 1)">. 打印错误检测与分类
</span>*-----------------------------------------------------------------------
<span style="color: rgba(0, 0, 255, 1)">for</span> J := <span style="color: rgba(128, 0, 128, 1)">1</span> to <span style="color: rgba(128, 0, 128, 1)">30</span> by <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
    read_image (Image, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">pen/pen-</span><span style="color: rgba(128, 0, 0, 1)">'</span> + J$<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">02d</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 读取测试图像</span>
    gen_empty_obj (RegionsErrorTrans)        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 初始化错误区域容器</span>
    find_shape_models (Image, ShapeModelIDs, rad(-<span style="color: rgba(128, 0, 128, 1)">10</span>), rad(<span style="color: rgba(128, 0, 128, 1)">20</span>), <span style="color: rgba(128, 0, 128, 1)">0.5</span>, [<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 128, 1)">1</span>], <span style="color: rgba(128, 0, 128, 1)">0.5</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">least_squares</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0.9</span>, Row, Column, Angle, Score, Model) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 检测字符位置</span>
    NumberFound := |Score|                   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取检测结果数量</span>
    <span style="color: rgba(0, 0, 255, 1)">for</span> K := <span style="color: rgba(128, 0, 128, 1)">0</span> to NumberFound - <span style="color: rgba(128, 0, 128, 1)">1</span> by <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
        vector_angle_to_rigid (Row[K], Column[K], Angle[K], RowsRef[Model[K]], ColumnsRef[Model[K]], </span><span style="color: rgba(128, 0, 128, 1)">0</span>, HomMat2D) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 计算位姿矩阵</span>
        affine_trans_image_size (Image, ImageTrans, HomMat2D, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">constant</span><span style="color: rgba(128, 0, 0, 1)">'</span>, Widths[Model[K]], Heights[Model[K]]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 图像对齐到基准尺寸</span>
        select_obj (VariationModelROIs, ROI, Model[K] + <span style="color: rgba(128, 0, 128, 1)">1</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 选择对应ROI区域</span>
        reduce_domain (ImageTrans, ROI, ImageTransReduced) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 减少图像域</span>
        compare_variation_model (ImageTransReduced, RegionDiff, VariationModelIDs[Model[K]]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 比较当前图像与变异模型</span>
        connection (RegionDiff, ConnectedRegions) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 连通区域分析</span>
        select_shape (ConnectedRegions, RegionsError, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">area</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">and</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 128, 1)">1000000</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 筛选面积&gt;20且&lt;1e6的区域作为错误</span>
        count_obj (RegionsError, NumError) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 统计错误区域数量</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> (NumError &gt; <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
            vector_angle_to_rigid (RowsRef[Model[K]], ColumnsRef[Model[K]], </span><span style="color: rgba(128, 0, 128, 1)">0</span>, Row[K], Column[K], Angle[K], HomMat2D) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 计算反向位姿</span>
            affine_trans_region (RegionsError, RegionErrorTrans, HomMat2D, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">nearest_neighbor</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 变换错误区域至原始坐标系</span>
            concat_obj (RegionsErrorTrans, RegionErrorTrans, RegionsErrorTrans) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 合并错误区域</span>
<span style="color: rgba(0, 0, 0, 1)">        endif
    endfor
    dev_clear_window ()                        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 清空显示窗口</span>
    dev_display (Image)                         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示原始图像</span>
    dev_set_color (<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">red</span><span style="color: rgba(128, 0, 0, 1)">'</span>)                       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置红色警告框</span>
    dev_display (RegionsErrorTrans)              <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示检测结果</span>
    count_obj (RegionsErrorTrans, NumError)     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 统计错误数量</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span> (NumError == <span style="color: rgba(128, 0, 128, 1)">0</span> and NumberFound ==<span style="color: rgba(0, 0, 0, 1)"> Number)
        disp_message (WindowHandle, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Clip OK</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">green</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示绿色OK</span>
    <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
        disp_message (WindowHandle, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Clip not OK</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">red</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示红色NG</span>
<span style="color: rgba(0, 0, 0, 1)">    endif
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (J &lt; <span style="color: rgba(128, 0, 128, 1)">30</span><span style="color: rgba(0, 0, 0, 1)">)
        disp_continue_message (WindowHandle, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示继续提示</span>
        stop () <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 单步调试暂停</span>
<span style="color: rgba(0, 0, 0, 1)">    endif
endfor</span></pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250226172012936-1451778558.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250226172038310-1805037997.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250226172154693-1306514529.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">这边就是将一个个待检测图片传入进去，然后进行一个个的模板区域比对整合结果，在差异参数允许范围内的话就OK，反之NG，然后把差异区域显示出来查看。</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 18px">7. 资源清理</span></strong></p>
<div class="cnblogs_code">
<pre>*-----------------------------------------------------------------------
* <span style="color: rgba(128, 0, 128, 1)">7</span><span style="color: rgba(0, 0, 0, 1)">. 资源清理
</span>*-----------------------------------------------------------------------
<span style="color: rgba(0, 0, 255, 1)">for</span> I := <span style="color: rgba(128, 0, 128, 1)">1</span> to Number by <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
    clear_shape_model (ShapeModelIDs[I </span>- <span style="color: rgba(128, 0, 128, 1)">1</span>]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 清除形状模型</span>
    clear_variation_model (VariationModelIDs[I - <span style="color: rgba(128, 0, 128, 1)">1</span>]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 清除变异模型</span>
endfor</pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">到这整个实例程序就运行完毕了，思想就是分割各个模板区域，然后创建出各个区域的可变模型来进行一一比对，得到差异图形区域。说白了就是拿个标准图，其他图跟标准图贴起来比对，得到灰度差异图或者局部形状差异图。</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250226173016694-1905032494.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">那么字母可以这样分割区域检测，半导体/Led的晶圆的各个灰度，颜色或者形状区域是不是也可以这样做呢？这就是GoldenDie（构阵带？应该这样念把）检测。（注：大部分led的公司的晶圆并不标准，用这个调参都会把你调死，最好配合分区域检测方法使用。半导体的高质量Die倒是可以用，不过在半导体中高端设备检测他们又会使用其他更好的检测方法）</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">附print_check_single_chars.hdev实例总代码：</span></p>
<div class="cnblogs_code">
<pre>*-----------------------------------------------------------------------
* <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">. 初始化与图像预处理
</span>*-----------------------------------------------------------------------<span style="color: rgba(0, 0, 0, 1)">
dev_update_off()          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 关闭实时更新显示</span>
read_image (Image, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">pen/pen-01</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 读取基准图像</span>
<span style="color: rgba(0, 0, 0, 1)">get_image_size (Image, Width, Height)
dev_close_window()        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 关闭现有窗口</span>
dev_open_window (<span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0</span>, Width, Height, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, WindowHandle) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建新窗口</span>
set_display_font (WindowHandle, <span style="color: rgba(128, 0, 128, 1)">16</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">mono</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置显示字体为16号等宽黑体</span>
dev_set_color (<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">red</span><span style="color: rgba(128, 0, 0, 1)">'</span>)    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置红色显示</span>
dev_display (Image)      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示原始图像</span>

*-----------------------------------------------------------------------
* <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">. 字符区域分割与预处理
</span>*-----------------------------------------------------------------------<span style="color: rgba(0, 0, 0, 1)">
threshold (Image, Region, </span><span style="color: rgba(128, 0, 128, 1)">100</span>, <span style="color: rgba(128, 0, 128, 1)">255</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 阈值分割（灰度&gt;100为前景）</span>
fill_up (Region, RegionFillUp)       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 填充孔洞</span>
difference (RegionFillUp, Region, RegionDifference) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 取反得到背景区域</span>
shape_trans (RegionDifference, RegionTrans, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">convex</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 转换为凸包区域</span>
dilation_circle (RegionTrans, RegionDilation, <span style="color: rgba(128, 0, 128, 1)">8.5</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 扩展区域以包含边缘噪声</span>
<span style="color: rgba(0, 0, 0, 1)">reduce_domain (Image, RegionDilation, ImageReduced)
threshold (ImageReduced, Region, </span><span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">180</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 二值化处理</span>
connection (Region, ConnectedRegions) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 连通区域分析</span>
sort_region (ConnectedRegions, SortedRegions, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">character</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">row</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 按字符顺序排序</span>
dilation_circle (SortedRegions, RegionDilation, <span style="color: rgba(128, 0, 128, 1)">1.5</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 轻微膨胀以稳定区域</span>
smallest_rectangle1 (RegionDilation, Row1, Column1, Row2, Column2) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 计算最小包围矩形</span>
count_obj (RegionDilation, Number) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 统计字符数量</span>
<span style="color: rgba(0, 0, 0, 1)">
Heights :</span>= Row2 - Row1 + <span style="color: rgba(128, 0, 128, 1)">5</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 区域高度（含缓冲）</span>
Widths := Column2 - Column1 + <span style="color: rgba(128, 0, 128, 1)">5</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 区域宽度（含缓冲）</span>
<span style="color: rgba(0, 0, 0, 1)">
gen_empty_obj (ShapeModels)            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 初始化形状模型容器</span>
gen_empty_obj (VariationModelROIs)    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 初始化变异模型ROI容器</span>
ShapeModelIDs := []                   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 存储形状模型ID列表</span>
VariationModelIDs := []               <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 存储变异模型ID列表</span>
RowsRef := []                         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 存储基准行坐标</span>
ColumnsRef := []                       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 存储基准列坐标</span>

<span style="color: rgba(0, 0, 255, 1)">for</span> I := <span style="color: rgba(128, 0, 128, 1)">1</span> to Number by <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
    select_obj (RegionDilation, ObjectSelected, I) </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 选择第I个字符区域</span>
    Height := Heights[I - <span style="color: rgba(128, 0, 128, 1)">1</span>]                     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取字符高度</span>
    Width := Widths[I - <span style="color: rgba(128, 0, 128, 1)">1</span>]                        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取字符宽度</span>
    move_region (ObjectSelected, RegionMoved, -Row1[I - <span style="color: rgba(128, 0, 128, 1)">1</span>], -Column1[I - <span style="color: rgba(128, 0, 128, 1)">1</span>]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 平移至左上角</span>
    crop_part (Image, ImagePart, Row1[I - <span style="color: rgba(128, 0, 128, 1)">1</span>], Column1[I - <span style="color: rgba(128, 0, 128, 1)">1</span>], Widths[I - <span style="color: rgba(128, 0, 128, 1)">1</span>], Heights[I - <span style="color: rgba(128, 0, 128, 1)">1</span>]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 裁剪字符区域</span>
    reduce_domain (ImagePart, RegionMoved, ImageReduced) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 减少图像域</span>
    inspect_shape_model (ImageReduced, ModelImages, ModelRegions, <span style="color: rgba(128, 0, 128, 1)">1</span>, [<span style="color: rgba(128, 0, 128, 1)">15</span>,<span style="color: rgba(128, 0, 128, 1)">15</span>,<span style="color: rgba(128, 0, 128, 1)">10</span>]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 检测形状模型</span>
    gen_contours_skeleton_xld (ModelRegions, ModelContour, <span style="color: rgba(128, 0, 128, 1)">1</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">filter</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 生成轮廓</span>
    area_center (RegionMoved, Area, RowRef, ColumnRef) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 计算质心位置（用于对齐）</span>
    create_shape_model (ImageReduced, <span style="color: rgba(128, 0, 128, 1)">5</span>, rad(-<span style="color: rgba(128, 0, 128, 1)">10</span>), rad(<span style="color: rgba(128, 0, 128, 1)">20</span>), <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">auto</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">none</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">use_polarity</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 128, 1)">10</span>, ShapeModelID) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建形状模型</span>
    create_variation_model (Width, Height, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">byte</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">standard</span><span style="color: rgba(128, 0, 0, 1)">'</span>, VariationModelID) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建变异模型</span>
    concat_obj (ShapeModels, ModelContour, ShapeModels) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 合并模型轮廓</span>
    concat_obj (VariationModelROIs, RegionMoved, VariationModelROIs) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 合并ROI区域</span>
    RowsRef := [RowsRef,RowRef]                     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 更新行坐标引用</span>
    ColumnsRef := [ColumnsRef,ColumnRef]               <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 更新列坐标引用</span>
    ShapeModelIDs := [ShapeModelIDs,ShapeModelID]     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 存储形状模型ID</span>
    VariationModelIDs := [VariationModelIDs,VariationModelID] <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 存储变异模型ID</span>
<span style="color: rgba(0, 0, 0, 1)">endfor

</span>*-----------------------------------------------------------------------
* <span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">. 形状模型可视化
</span>*-----------------------------------------------------------------------<span style="color: rgba(0, 0, 0, 1)">
gen_empty_obj (Models)
</span><span style="color: rgba(0, 0, 255, 1)">for</span> I := <span style="color: rgba(128, 0, 128, 1)">1</span> to Number by <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
    select_obj (ShapeModels, ModelSelected, I) </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 选择第I个模型</span>
    hom_mat2d_identity (HomMat2DIdentity)       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 初始化仿射变换矩阵为单位矩阵</span>
    hom_mat2d_translate (HomMat2DIdentity, Row1[I - <span style="color: rgba(128, 0, 128, 1)">1</span>], Column1[I - <span style="color: rgba(128, 0, 128, 1)">1</span>], HomMat2D) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 平移至原始位置</span>
    affine_trans_contour_xld (ModelSelected, ModelTrans, HomMat2D) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 应用仿射变换</span>
    concat_obj (Models, ModelTrans, Models) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 合并可视化模型</span>
<span style="color: rgba(0, 0, 0, 1)">endfor

dev_display (Image)
dev_set_colored (</span><span style="color: rgba(128, 0, 128, 1)">6</span>)      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置浅灰色</span>
dev_set_draw (<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">margin</span><span style="color: rgba(128, 0, 0, 1)">'</span>)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 绘制边框</span>
dev_set_line_width (<span style="color: rgba(128, 0, 128, 1)">3</span>)   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 边框宽度3像素</span>
dev_display (Models)     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示所有形状模型</span>
dev_set_color (<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">yellow</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置黄色</span>
disp_message (WindowHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Shape models</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">12</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">yellow</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示标题</span>
disp_message (WindowHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">(moved to original pos.)</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">45</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">yellow</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示副标题</span>
disp_continue_message (WindowHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 继续显示黑色背景</span>
stop () <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 暂停等待用户确认</span>

*-----------------------------------------------------------------------
* <span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">. 变异模型训练
</span>*-----------------------------------------------------------------------
<span style="color: rgba(0, 0, 255, 1)">for</span> J := <span style="color: rgba(128, 0, 128, 1)">1</span> to <span style="color: rgba(128, 0, 128, 1)">15</span> by <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
    read_image (Image, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">pen/pen-</span><span style="color: rgba(128, 0, 0, 1)">'</span> + J$<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">02d</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 读取训练图像（共15张）</span>
    find_shape_models (Image, ShapeModelIDs, rad(-<span style="color: rgba(128, 0, 128, 1)">10</span>), rad(<span style="color: rgba(128, 0, 128, 1)">20</span>), <span style="color: rgba(128, 0, 128, 1)">0.5</span>, [<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 128, 1)">1</span>], <span style="color: rgba(128, 0, 128, 1)">0.5</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">least_squares</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0.9</span>, Row, Column, Angle, Score, Model) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 检测字符位置</span>
    <span style="color: rgba(0, 0, 255, 1)">for</span> K := <span style="color: rgba(128, 0, 128, 1)">0</span> to |Score| - <span style="color: rgba(128, 0, 128, 1)">1</span> by <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
        vector_angle_to_rigid (Row[K], Column[K], Angle[K], RowsRef[Model[K]], ColumnsRef[Model[K]], </span><span style="color: rgba(128, 0, 128, 1)">0</span>, HomMat2D) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 计算位姿矩阵</span>
        affine_trans_image_size (Image, ImageTrans, HomMat2D, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">constant</span><span style="color: rgba(128, 0, 0, 1)">'</span>, Widths[Model[K]], Heights[Model[K]]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 图像对齐到基准尺寸</span>
        select_obj (VariationModelROIs, ROI, Model[K] + <span style="color: rgba(128, 0, 128, 1)">1</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 选择对应ROI区域</span>
        reduce_domain (ImageTrans, ROI, ImageTransReduced) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 减少图像域</span>
        train_variation_model (ImageTransReduced, VariationModelIDs[Model[K]]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 训练变异模型</span>
<span style="color: rgba(0, 0, 0, 1)">    endfor
endfor

</span>*-----------------------------------------------------------------------
* <span style="color: rgba(128, 0, 128, 1)">5</span><span style="color: rgba(0, 0, 0, 1)">. 变异模型可视化验证
</span>*-----------------------------------------------------------------------<span style="color: rgba(0, 0, 0, 1)">
get_image_size (Image, Width, Height)
gen_empty_obj (MeanImages)
gen_empty_obj (VarImages)
gen_empty_obj (ROIs)

</span><span style="color: rgba(0, 0, 255, 1)">for</span> I := <span style="color: rgba(128, 0, 128, 1)">1</span> to Number by <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
    get_variation_model (MeanImage, VarImage, VariationModelIDs[I </span>- <span style="color: rgba(128, 0, 128, 1)">1</span>]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取均值/方差图像</span>
    *AbsThreshold = <span style="color: rgba(128, 0, 128, 1)">20</span>：绝对阈值，用于筛选图像块中的像素值。只有像素值在[Mean - AbsThreshold, Mean +<span style="color: rgba(0, 0, 0, 1)"> VarThreshold]范围内的像素才会被保留。
    </span>*VarThreshold = <span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">：方差阈值，控制像素值的允许变化范围，基于局部区域的方差。
    prepare_variation_model (VariationModelIDs[I </span>- <span style="color: rgba(128, 0, 128, 1)">1</span>], <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 128, 1)">3</span>) <span style="color: rgba(0, 128, 0, 1)">//</span> 
<span style="color: rgba(0, 0, 0, 1)">    

    select_obj (VariationModelROIs, ROI, I) </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 选择第I个ROI区域</span>
    move_region (ROI, ROIMoved, Row1[I - <span style="color: rgba(128, 0, 128, 1)">1</span>], Column1[I - <span style="color: rgba(128, 0, 128, 1)">1</span>]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 移动至基准位置</span>
    reduce_domain (MeanImage, ROI, MeanImageReduced) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 减少域范围</span>
    reduce_domain (VarImage, ROI, VarImageReduced) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 减少域范围</span>
    concat_obj (MeanImages, MeanImageReduced, MeanImages) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 合并均值图像</span>
    concat_obj (VarImages, VarImageReduced, VarImages) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 合并方差图像</span>
    concat_obj (ROIs, ROIMoved, ROIs) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 合并ROI区域</span>
    clear_train_data_variation_model (VariationModelIDs[I - <span style="color: rgba(128, 0, 128, 1)">1</span>]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 清空训练数据</span>
<span style="color: rgba(0, 0, 0, 1)">endfor

tile_images_offset (MeanImages, MeanImage, Row1, Column1, gen_tuple_const(Number,</span>-<span style="color: rgba(128, 0, 128, 1)">1</span>), gen_tuple_const(Number,-<span style="color: rgba(128, 0, 128, 1)">1</span>), gen_tuple_const(Number,-<span style="color: rgba(128, 0, 128, 1)">1</span>), gen_tuple_const(Number,-<span style="color: rgba(128, 0, 128, 1)">1</span>), Width, Height) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 并排显示均值图像</span>
tile_images_offset (VarImages, VarImage, Row1, Column1, gen_tuple_const(Number,-<span style="color: rgba(128, 0, 128, 1)">1</span>), gen_tuple_const(Number,-<span style="color: rgba(128, 0, 128, 1)">1</span>), gen_tuple_const(Number,-<span style="color: rgba(128, 0, 128, 1)">1</span>), gen_tuple_const(Number,-<span style="color: rgba(128, 0, 128, 1)">1</span>), Width, Height) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 并排显示方差图像</span>
<span style="color: rgba(0, 0, 0, 1)">
get_domain (Image, Domain) </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取图像有效域</span>
dev_set_color (<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>)    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置黑色背景</span>
dev_set_draw (<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">fill</span><span style="color: rgba(128, 0, 0, 1)">'</span>)     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 填充显示</span>
dev_display (Domain)      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示图像域</span>
dev_display (MeanImage)   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示均值图像</span>
dev_set_colored (<span style="color: rgba(128, 0, 128, 1)">6</span>)      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置浅灰色边框</span>
dev_set_draw (<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">margin</span><span style="color: rgba(128, 0, 0, 1)">'</span>)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 绘制边框</span>
dev_set_line_width (<span style="color: rgba(128, 0, 128, 1)">1</span>)   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 边框宽度1像素</span>
dev_display (ROIs)       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示ROI区域</span>
dev_set_color (<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">yellow</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置黄色文字</span>
disp_message (WindowHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Reference images</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">yellow</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示标题</span>
disp_message (WindowHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">(moved to original pos.)</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">45</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">yellow</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示副标题</span>
disp_continue_message (WindowHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 继续显示黑色背景</span>
<span style="color: rgba(0, 0, 0, 1)">stop ()

dev_set_color (</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
dev_set_draw (</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">fill</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
dev_display (Domain)
dev_display (VarImage)
dev_set_colored (</span><span style="color: rgba(128, 0, 128, 1)">6</span><span style="color: rgba(0, 0, 0, 1)">)
dev_set_draw (</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">margin</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
dev_set_line_width (</span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">)
dev_display (ROIs)
dev_set_color (</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">yellow</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
disp_message (WindowHandle, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Variation images</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">yellow</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
disp_message (WindowHandle, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">(moved to original pos.)</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">45</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">yellow</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
disp_continue_message (WindowHandle, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
stop ()

</span>*-----------------------------------------------------------------------
* <span style="color: rgba(128, 0, 128, 1)">6</span><span style="color: rgba(0, 0, 0, 1)">. 打印错误检测与分类
</span>*-----------------------------------------------------------------------
<span style="color: rgba(0, 0, 255, 1)">for</span> J := <span style="color: rgba(128, 0, 128, 1)">1</span> to <span style="color: rgba(128, 0, 128, 1)">30</span> by <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
    read_image (Image, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">pen/pen-</span><span style="color: rgba(128, 0, 0, 1)">'</span> + J$<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">02d</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 读取测试图像</span>
    gen_empty_obj (RegionsErrorTrans)        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 初始化错误区域容器</span>
    find_shape_models (Image, ShapeModelIDs, rad(-<span style="color: rgba(128, 0, 128, 1)">10</span>), rad(<span style="color: rgba(128, 0, 128, 1)">20</span>), <span style="color: rgba(128, 0, 128, 1)">0.5</span>, [<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 128, 1)">1</span>], <span style="color: rgba(128, 0, 128, 1)">0.5</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">least_squares</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0.9</span>, Row, Column, Angle, Score, Model) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 检测字符位置</span>
    NumberFound := |Score|                   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取检测结果数量</span>
    <span style="color: rgba(0, 0, 255, 1)">for</span> K := <span style="color: rgba(128, 0, 128, 1)">0</span> to NumberFound - <span style="color: rgba(128, 0, 128, 1)">1</span> by <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
        vector_angle_to_rigid (Row[K], Column[K], Angle[K], RowsRef[Model[K]], ColumnsRef[Model[K]], </span><span style="color: rgba(128, 0, 128, 1)">0</span>, HomMat2D) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 计算位姿矩阵</span>
        affine_trans_image_size (Image, ImageTrans, HomMat2D, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">constant</span><span style="color: rgba(128, 0, 0, 1)">'</span>, Widths[Model[K]], Heights[Model[K]]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 图像对齐到基准尺寸</span>
        select_obj (VariationModelROIs, ROI, Model[K] + <span style="color: rgba(128, 0, 128, 1)">1</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 选择对应ROI区域</span>
        reduce_domain (ImageTrans, ROI, ImageTransReduced) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 减少图像域</span>
        compare_variation_model (ImageTransReduced, RegionDiff, VariationModelIDs[Model[K]]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 比较当前图像与变异模型</span>
        connection (RegionDiff, ConnectedRegions) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 连通区域分析</span>
        select_shape (ConnectedRegions, RegionsError, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">area</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">and</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 128, 1)">1000000</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 筛选面积&gt;20且&lt;1e6的区域作为错误</span>
        count_obj (RegionsError, NumError) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 统计错误区域数量</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> (NumError &gt; <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
            vector_angle_to_rigid (RowsRef[Model[K]], ColumnsRef[Model[K]], </span><span style="color: rgba(128, 0, 128, 1)">0</span>, Row[K], Column[K], Angle[K], HomMat2D) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 计算反向位姿</span>
            affine_trans_region (RegionsError, RegionErrorTrans, HomMat2D, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">nearest_neighbor</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 变换错误区域至原始坐标系</span>
            concat_obj (RegionsErrorTrans, RegionErrorTrans, RegionsErrorTrans) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 合并错误区域</span>
<span style="color: rgba(0, 0, 0, 1)">        endif
    endfor
    dev_clear_window ()                        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 清空显示窗口</span>
    dev_display (Image)                         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示原始图像</span>
    dev_set_color (<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">red</span><span style="color: rgba(128, 0, 0, 1)">'</span>)                       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置红色警告框</span>
    dev_display (RegionsErrorTrans)              <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示检测结果</span>
    count_obj (RegionsErrorTrans, NumError)     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 统计错误数量</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span> (NumError == <span style="color: rgba(128, 0, 128, 1)">0</span> and NumberFound ==<span style="color: rgba(0, 0, 0, 1)"> Number)
        disp_message (WindowHandle, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Clip OK</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">green</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示绿色OK</span>
    <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
        disp_message (WindowHandle, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Clip not OK</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">red</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示红色NG</span>
<span style="color: rgba(0, 0, 0, 1)">    endif
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (J &lt; <span style="color: rgba(128, 0, 128, 1)">30</span><span style="color: rgba(0, 0, 0, 1)">)
        disp_continue_message (WindowHandle, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示继续提示</span>
        stop () <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 单步调试暂停</span>
<span style="color: rgba(0, 0, 0, 1)">    endif
endfor

</span>*-----------------------------------------------------------------------
* <span style="color: rgba(128, 0, 128, 1)">7</span><span style="color: rgba(0, 0, 0, 1)">. 资源清理
</span>*-----------------------------------------------------------------------
<span style="color: rgba(0, 0, 255, 1)">for</span> I := <span style="color: rgba(128, 0, 128, 1)">1</span> to Number by <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
    clear_shape_model (ShapeModelIDs[I </span>- <span style="color: rgba(128, 0, 128, 1)">1</span>]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 清除形状模型</span>
    clear_variation_model (VariationModelIDs[I - <span style="color: rgba(128, 0, 128, 1)">1</span>]) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 清除变异模型</span>
endfor</pre>
</div>
<p>&nbsp;</p>
</div>
<div id="MySignature" role="contentinfo">
    转发和使用本文，请注明作者信息和原文地址---本文原作者为aircraft

---大家好我是徐飞机，有没有大佬们的公司招c++开发/图像处理/opengl/opencv/halcon实习的啊，带上我一个呗QAQ。。。hhhhhh  想要免费获取前端，后端，c/c++,matlab，Python，opencv，机器学习，深度学习，安卓，java，等等全套视频教程请关注机器视觉开发公众号，转发集赞28即可百度云获得hhhhhhhh
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.023906428675925927" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-26 17:43">2025-02-26 17:38</span>&nbsp;
<a href="https://www.cnblogs.com/DOMLX">aircraft</a>&nbsp;
阅读(<span id="post_view_count">6</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18739196" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18739196);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18739196', targetLink: 'https://www.cnblogs.com/DOMLX/p/18739196', title: 'halcon中是怎么实现半导体/Led中的GoldenDie的检测方法的  基于局部可变形模板匹配 variation_model模型' })">举报</a>
</div>
        