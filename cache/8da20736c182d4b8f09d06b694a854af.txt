
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wqws/p/18910673" title="发布于 2025-06-04 17:12">
    <span role="heading" aria-level="2">让AI操作powershell会发生什么</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/3655422/202506/3655422-20250604171211614-1166365470.png" alt="让AI操作powershell会发生什么" class="desc_img">
        让AI输出特定格式的json，解析json中的指令，在powershell中执行，实现AI操控计算机。
双AI"执行者-监察者"架构，生成指令-&gt;审核指令-&gt;执行指令，为AI安全提出新方案。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="ai-win11-管理员-中文">AI-win11-管理员 (中文)</h1>
<p>具体项目：<a href="https://github.com/liluoyi666/AI-win11-Administrator.git" target="_blank" rel="noopener nofollow">https://github.com/liluoyi666/AI-win11-Administrator.git</a></p>
<h2 id="项目概述">项目概述</h2>
<p>本项目旨在让大语言模型（LLM）能够操作Windows 11系统。让AI输出特地格式的json，解析json中的指令，对指令进行执行，允许AI执行各种任务。这为自动化操作Windows 11系统提供了可能，使得一些重复性的任务可以由AI自动完成，提高工作效率。<br>
<em><strong>这将把AI的能力发挥到极致</strong></em><br>
<br></p>
<p>双 AI 架构原理是利用两个 AI 进行互相监督协同工作，一个 AI 负责生成指令，另一个负责确认指令是否应该执行并提出意见。这种架构能更好地应对复杂的任务和情况，且大大提升安全性。且双AI架构能极大提升用户在交互时的体验。<br>
<em><strong>AI安全性与趣味性将有巨大提升</strong></em></p>
<h2 id="目录">目录</h2>
<ul>
<li><a href="#%E9%A1%B9%E7%9B%AE%E6%A6%82%E8%BF%B0" rel="noopener nofollow">项目概述</a></li>
<li><a href="#%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84" rel="noopener nofollow">项目结构</a></li>
<li><a href="#%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7" rel="noopener nofollow">核心特性</a></li>
<li><a href="#ai%E5%91%BD%E4%BB%A4%E6%A0%BC%E5%BC%8F%E4%B8%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E5%8E%9F%E7%90%86" rel="noopener nofollow">AI命令格式与命令执行的原理</a></li>
<li><a href="#%E5%8D%95ai%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8F%8Cai%E6%9E%B6%E6%9E%84" rel="noopener nofollow">单AI架构与双AI架构</a></li>
<li><a href="#%E9%A1%B9%E7%9B%AE%E6%84%BF%E6%99%AF" rel="noopener nofollow">项目愿景</a></li>
<li><a href="#%E5%BD%93%E5%89%8D%E7%8A%B6%E5%86%B5" rel="noopener nofollow">当前情况</a></li>
<li><a href="#%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%96%B9%E6%B3%95" rel="noopener nofollow">本地部署方法</a></li>
<li><a href="#%E8%B4%A1%E7%8C%AE" rel="noopener nofollow">贡献</a></li>
<li><a href="#%E8%AE%B8%E5%8F%AF%E8%AF%81" rel="noopener nofollow">许可证</a></li>
</ul>
<h2 id="项目结构">项目结构</h2>
<ul>
<li><code>main.py</code>：项目的入口文件，负责启动主循环。</li>
<li><code>main_cycle_single.py</code>：单AI核心执行循环。</li>
<li><code>main_cycle_double.py</code>：双AI核心执行循环。</li>
<li><code>brain</code>/：核心 AI 处理模块，包含 PowerShell 会话、字符串模板、LLM API 服务、JSON 解析器和日志服务等。</li>
<li><code>logs</code>/：系统操作日志，记录系统运行过程中的各种操作和信息。</li>
<li><code>more_type</code>/：为 ai 提供更多的操作类型，从而执行更复杂的任务。</li>
</ul>
<h2 id="核心特性">核心特性</h2>
<ul>
<li><strong>结构化JSON执行PowerShell命令</strong>：通过特定格式的JSON，LLM可以方便地执行PowerShell命令，实现对系统的操作。</li>
<li><strong>安全的虚拟机环境</strong>：将程序部署在虚拟机中，增加了系统的安全性，避免因错误操作对主机系统造成影响。</li>
<li><strong>多数据类型接口</strong>：支持多种数据类型的接口，为LLM提供更丰富的数据处理能力。</li>
<li><strong>单AI模式与双AI模式自由切换</strong>：根据安全需求与经济条件选择模式，以适应不同用户需求。</li>
</ul>
<h2 id="ai命令格式与命令执行的原理">AI命令格式与命令执行的原理</h2>
<h3 id="命令格式">命令格式</h3>
<p>AI的输出需包含以下格式的json，系统会检测AI的输出，并将提取出命令，在计算机中执行：</p>
<pre><code class="language-json">{
    "type": "操作类型",
    "相关命令",   
    "add_log": "执行操作时顺便写入日志"
}
</code></pre>
<p>任何情况下都必须存在type键，其他键具体由type决定。add_log不存在不影响操作执行，add_log存在也不会影响任何类型的操作。记入日志时会自动添加时间以及换行，无需手动添加。日志文件由系统自动维护。</p>
<h3 id="命令执行原理">命令执行原理</h3>
<p>系统通过main_cycle.py的核心执行循环，接收 LLM 的响应并解析其中的 JSON。根据 JSON 中的type键，调用相应的操作方法。例如，如果type为powershell，则调用PowerShellSession类的execute_command方法执行相应的 PowerShell 命令；如果type为read_log，则调用log类的read方法读取日志。</p>
<h2 id="单ai架构与双ai架构">单AI架构与双AI架构</h2>
<h3 id="单ai架构">单AI架构</h3>
<p>单 AI 架构是指整个系统中只有一个 AI解析指令和执行操作。<br>
它直接接收用户的留言，根据内置的规则和操作手册，将用户的需求转化为具体的操作命令，并通过 PowerShell 接口执行这些命令。</p>
<h3 id="双ai架构">双AI架构</h3>
<p>设定两个AI：执行者AI与监察者AI，执行者负责编写命令以完成用户的目标，监察者当前负责决定是否应该执行执行者的命令，并为执行者提供思路与解决方案。<br>
双方的日志分别独立，执行者的所有输出对监察者完全公开，监察者的输出只有部分向执行者分开。<br>
后续为了平衡执行者和监察者的操作权限，还会进行进一步的平衡性调整，进一步修改其可执行命令。<br>
双AI架构有利于提示系统稳定性与安全性，在后续开发与用户的交流对话模式下，双AI也可以提升用户在交流中趣味性。</p>
<h2 id="项目愿景">项目愿景</h2>
<h3 id="原始计划">原始计划</h3>
<ul>
<li><strong>起步阶段</strong>：让LLM能够操作PowerShell，确保程序稳定运行。</li>
<li><strong>初期阶段</strong>：将程序转移到虚拟机，增加更多操作语法和安全设置。</li>
<li><strong>中期阶段</strong>：增加更多数据类型接口，尝试让LLM自主完成某些简单项目。</li>
<li><strong>最终阶段</strong>：实现非虚拟机部署，让LLM安全稳定地完成人类50%的计算机任务。<br>
<br></li>
</ul>
<h3 id="分支计划">分支计划</h3>
<ul>
<li><strong>起步阶段</strong>：实现双AI命令执行系统稳定运行。</li>
<li><strong>初期阶段</strong>：实现工作状态与对话状态的自由切换，既可与用户对话，也可以操作计算机。</li>
<li><strong>中期阶段</strong>：开发可视化窗口以及软件，增加更多数据类型接口，设计AI虚拟形象。</li>
<li><strong>最终阶段</strong>：完成为一集成：自动化工作，休闲聊天，电脑安全管控等功能的多功能AI桌面助手。</li>
</ul>
<h2 id="当前状况">当前状况</h2>
<ul>
<li><strong>单AI架构初步运行成功</strong></li>
<li><strong>增加了文件读写方法，实现100行文本一次写入</strong></li>
<li><strong>修改了json解析器，大大降低报错率</strong></li>
<li><strong>双AI架构初步运行成功</strong></li>
</ul>
<h2 id="本地部署方法">本地部署方法</h2>
<h3 id="环境准备">环境准备</h3>
<p>确保你的系统满足以下要求：</p>
<ul>
<li><strong>操作系统</strong>：Windows 11</li>
<li><strong>Python版本</strong>：Python 3.x</li>
<li><strong>依赖库</strong>：根据<code>requirements.txt</code>文件安装所需的依赖库。可以使用以下命令进行安装：</li>
</ul>
<pre><code class="language-bash">pip install -r requirements.txt
</code></pre>
<h3 id="配置api密钥">配置API密钥</h3>
<p>根据你使用的LLM模型，配置相应的API密钥。例如，如果你使用的是DeepSeek模型，需要设置<code>DEEPSEEK_API_KEY</code>环境变量：</p>
<pre><code class="language-bash">export DEEPSEEK_API_KEY=your_api_key
</code></pre>
<h3 id="启动项目">启动项目</h3>
<p>在项目根目录下，运行以下命令启动项目：</p>
<pre><code class="language-bash">python main.py
</code></pre>
<h3 id="运行主循环">运行主循环</h3>
<p>在<code>main.py</code>文件中，你可以设置一些参数，如<code>max_rounds</code>和<code>msg</code>，来控制主循环的运行。例如：</p>
<pre><code class="language-python">msg = '''
如果刚开始进入命令行，你会出现在该项目的主文件夹中。
你需要做：...
'''

xxx = main_cycle_single(log_path=r"logs/log_ai_executor.txt")
xxx.cycle(max_rounds=30, msg=msg)
</code></pre>
<h2 id="贡献">贡献</h2>
<h3 id="如果你想完全理解代码可按照该顺序查看代码">如果你想完全理解代码，可按照该顺序查看代码：</h3>
<ol>
<li><code>brain/LLM_api.py</code></li>
<li><code>brain/String_Templates.py</code></li>
<li><code>brain/powershell.py</code></li>
<li><code>main_cycle_single/double.py</code></li>
</ol>
<h3 id="如果你想为这个项目做出贡献请遵循以下步骤">如果你想为这个项目做出贡献，请遵循以下步骤：</h3>
<ol>
<li>Fork这个仓库。</li>
<li>创建一个新的分支：<code>git checkout -b feature/your-feature-name</code>。</li>
<li>提交你的更改：<code>git commit -m 'Add some feature'</code>。</li>
<li>推送至分支：<code>git push origin feature/your-feature-name</code>。</li>
<li>提交Pull Request。</li>
</ol>
<h2 id="许可证">许可证</h2>
<p>本项目采用[许可证名称]许可证。请查看<code>LICENSE</code>文件以获取更多信息。</p>
<pre><code></code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5411936302106481" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-06-04 17:15">2025-06-04 17:12</span>&nbsp;
<a href="https://www.cnblogs.com/wqws">wqws</a>&nbsp;
阅读(<span id="post_view_count">117</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18910673);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18910673', targetLink: 'https://www.cnblogs.com/wqws/p/18910673', title: '让AI操作powershell会发生什么' })">举报</a>
</div>
        