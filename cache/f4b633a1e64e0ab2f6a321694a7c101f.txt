
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/sheng_chao/p/18699999" title="发布于 2025-02-05 18:54">
    <span role="heading" aria-level="2">独立开发经验谈：我是如何借助 Docker 环境变量让客户 1 分钟上线客服系统的</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        通过 Docker 环境变量，在启动容器时带入配置信息，自动写入配置文件中，完全免去了进入容器内部 vim 修改的步骤，真正实现在线客服系统1分钟上线。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>我在业余时间开发了一款自己的独立产品：升讯威在线客服与营销系统。陆陆续续开发了几年，从一开始的偶有用户尝试，到如今线上环境和私有化部署均有了越来越多的稳定用户，在这个过程中，我也积累了不少如何开发运营一款独立产品的经验。</p>
<p>我之前写过一篇文章，介绍如何用 Docker 让潜在客户快速体验你的独立产品。</p>
<p><strong>有朋友看到这篇文章之后，试用了产品并且给了我新的建议：用 Docker 环境变量让试用更方便。在此感谢这位 xj 的朋友。</strong></p>
<h3 id="我的例子">我的例子</h3>
<p>在前一篇文章中，要运行我制作的在线客服系统 Docker 镜像为例，需要 2 个命令：</p>
<ol>
<li>
<p>从 Docker Hub 下载升讯威在线客服系统镜像<br>
<code>docker pull iccb1013/linkup:latest</code></p>
</li>
<li>
<p>启动容器（之前的命令）<br>
<code>docker run -p 8021-8023:8021-8023 -p 9527:9527 -dit --restart=always --privileged=true --name=linkup_latest iccb1013/linkup:latest</code></p>
</li>
</ol>
<p>但是在启动容器之后，还有一个步骤需要手工操作，就是查看容器的 Id，并进入容器内部去修改配置文件，修改 kf-api、kf-resource 两个域名和 IP 地址，这一步虽说不算麻烦，但毕竟要进入容器内部再用 vim 去操作。</p>
<p>这位 xj 的朋友给了我一个建议，用环境变量，使用环境变量之后启动命令看起来长这样：</p>
<p><code>docker run -e ApiUrl=http://kf-api.yourname.com -e ResourceUrl=http://kf-resource.yourname.com -e TcpIpAddress=您的服务器公网IP地址 -p 8021-8023:8021-8023 -p 9527:9527 -dit --restart=always --privileged=true --name=linkup_latest iccb1013/linkup:latest</code></p>
<p>在新的启动命令中，包括了 3 个环境变量，分别是：</p>
<ul>
<li>ApiUrl：您的主程序域名</li>
<li>ResourceUrl：静态资源站点域名</li>
<li>TcpIpAddress：您的服务器公网IP地址<br>
通过指定这些环境变量，可以在启动容器后直接上线使用，而无需进入容器手工修改配置文件。</li>
</ul>
<p>这样就可以将这 3 个主要参数带进容器内部，自动写入配置文件中，<strong>完全免去了进入容器内部 vim 修改的步骤</strong>，接下来只需要在宿主机 Nginx 中配上站点，<a href="https://docs.shengxunwei.com/Post/f7bc8496-14ee-4a53-07b4-08d8e3da6269/42336768-8d8c-4bda-93be-1660b1b51b3c" target="_blank" rel="noopener nofollow">把请求代理到容器上</a>就完事儿了，真真正正做到了在线客服系统 1 分钟上线。</p>
<p><img src="https://img2024.cnblogs.com/blog/78019/202501/78019-20250130235515632-1271997542.jpg" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/78019/202501/78019-20250131173817869-1860550420.png" alt="" loading="lazy"></p>
<h2 id="重点来了如何让你的独立产品用上-docker-环境变量">重点来了，如何让你的独立产品用上 Docker 环境变量</h2>
<p>Docker环境变量是 Docker 容器化应用中一种重要的配置方式。它们可以帮助在容器启动时为应用提供必要的参数或配置，而不需要修改容器内部的代码或配置文件。Docker 环境变量使得容器可以更加灵活和动态化，尤其在不同的部署环境中尤为重要。</p>
<h3 id="1-什么是-docker-环境变量">1. <strong>什么是 Docker 环境变量？</strong></h3>
<p>Docker 环境变量（Environment Variables）是操作系统层面上用于存储配置信息的变量。在 Docker 容器中，环境变量通常用于存储应用的配置信息、凭证、API 密钥、数据库连接字符串等。它们可以在容器启动时传递，并可以在运行时访问和修改。</p>
<h3 id="2-为什么使用环境变量">2. <strong>为什么使用环境变量？</strong></h3>
<ul>
<li><strong>灵活性</strong>：可以根据不同的运行环境提供不同的值，无需修改容器镜像。</li>
<li><strong>安全性</strong>：可以避免硬编码敏感信息（如密码、API 密钥等），提升安全性。</li>
<li><strong>配置管理</strong>：通过环境变量可以在不修改容器内容的情况下，动态调整容器行为。</li>
</ul>
<h3 id="3-如何在-docker-中使用环境变量">3. <strong>如何在 Docker 中使用环境变量？</strong></h3>
<p>Docker 提供了几种设置和使用环境变量的方式：</p>
<h4 id="31-使用--e-或---env-参数设置环境变量">3.1 <strong>使用 <code>-e</code> 或 <code>--env</code> 参数设置环境变量</strong></h4>
<p>在使用 <code>docker run</code> 启动容器时，可以通过 <code>-e</code> 参数来设置环境变量。例如：</p>
<pre><code class="language-bash">docker run -e MY_ENV_VAR=value my_image
</code></pre>
<p>这样会在容器中设置一个名为 <code>MY_ENV_VAR</code> 的环境变量，值为 <code>value</code>。</p>
<h4 id="32-使用-env-文件">3.2 <strong>使用 <code>.env</code> 文件</strong></h4>
<p>为了方便管理多个环境变量，可以使用 <code>.env</code> 文件。在 <code>.env</code> 文件中，每一行定义一个环境变量的键值对：</p>
<pre><code class="language-bash">MY_ENV_VAR=value
ANOTHER_ENV_VAR=another_value
</code></pre>
<p>然后通过 <code>--env-file</code> 参数将该文件传递给 Docker 容器：</p>
<pre><code class="language-bash">docker run --env-file .env my_image
</code></pre>
<h4 id="33-在-dockerfile-中使用-env-指令">3.3 <strong>在 Dockerfile 中使用 <code>ENV</code> 指令</strong></h4>
<p>在构建镜像时，可以在 <code>Dockerfile</code> 中使用 <code>ENV</code> 指令来设置环境变量：</p>
<pre><code class="language-dockerfile">FROM ubuntu:latest
ENV MY_ENV_VAR=value
</code></pre>
<p>这将创建一个在容器运行时可用的环境变量 <code>MY_ENV_VAR</code>。</p>
<h4 id="34-使用-docker-compose-中的环境变量">3.4 <strong>使用 <code>docker-compose</code> 中的环境变量</strong></h4>
<p>在使用 <code>docker-compose</code> 管理多个容器时，可以在 <code>docker-compose.yml</code> 文件中定义环境变量：</p>
<pre><code class="language-yaml">version: '3'
services:
  webapp:
    image: my_image
    environment:
      - MY_ENV_VAR=value
      - ANOTHER_VAR=another_value
</code></pre>
<p>此外，也可以从 <code>.env</code> 文件加载环境变量：</p>
<pre><code class="language-yaml">version: '3'
services:
  webapp:
    image: my_image
    env_file:
      - .env
</code></pre>
<h4 id="35-通过-docker-exec-查看环境变量">3.5 <strong>通过 <code>docker exec</code> 查看环境变量</strong></h4>
<p>可以通过 <code>docker exec</code> 进入容器内部，使用 <code>env</code> 或 <code>printenv</code> 命令查看容器中的环境变量：</p>
<pre><code class="language-bash">docker exec -it container_id env
</code></pre>
<h3 id="4-环境变量的作用与实践">4. <strong>环境变量的作用与实践</strong></h3>
<p>环境变量通常用于以下几种场景：</p>
<h4 id="41-数据库连接信息">4.1 <strong>数据库连接信息</strong></h4>
<p>在多环境部署中，数据库连接信息可以通过环境变量配置，以避免在源代码中硬编码这些信息。例如：</p>
<pre><code class="language-bash">docker run -e DB_HOST=localhost -e DB_USER=root -e DB_PASS=secret my_image
</code></pre>
<h4 id="42-api-密钥">4.2 <strong>API 密钥</strong></h4>
<p>很多应用依赖于外部服务的 API 密钥，这些密钥可以通过环境变量来传递，以避免泄露。例如：</p>
<pre><code class="language-bash">docker run -e API_KEY=your_api_key my_image
</code></pre>
<h4 id="43-配置不同的运行环境">4.3 <strong>配置不同的运行环境</strong></h4>
<p>可以根据不同的环境传递不同的环境变量值，如开发、测试和生产环境。例如，在生产环境中你可能需要开启调试日志，但在开发环境中关闭它。</p>
<pre><code class="language-bash">docker run -e ENV=production -e LOG_LEVEL=error my_image
</code></pre>
<h3 id="5-容器间共享环境变量">5. <strong>容器间共享环境变量</strong></h3>
<p>在多容器的场景中，如果需要多个容器共享环境变量，可以通过 Docker 网络和服务间的环境变量传递来实现。例如，使用 Docker Compose 启动多个服务时，<code>web</code> 服务可以访问 <code>db</code> 服务的环境变量。</p>
<h3 id="6-限制和注意事项">6. <strong>限制和注意事项</strong></h3>
<ul>
<li><strong>敏感信息</strong>：环境变量可以在 Docker 容器启动时传递，但它们也有泄露的风险。例如，容器日志或操作系统的某些工具可能会暴露这些变量。</li>
<li><strong>变量覆盖</strong>：在容器运行时，环境变量的值可能会被外部传递的变量覆盖。例如，在 <code>docker-compose.yml</code> 中设置的环境变量可以在 <code>docker run</code> 时通过 <code>-e</code> 参数覆盖。</li>
<li><strong>共享变量的作用域</strong>：在 Docker Compose 或多容器应用中，环境变量的作用域仅限于指定的容器，跨容器传递时需要显式声明。</li>
</ul>
<hr>
<h3 id="钟意的话请给个赞支持一下吧谢谢">钟意的话请给个赞支持一下吧，谢谢~</h3>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.06444362001504629" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-05 18:54">2025-02-05 18:54</span>&nbsp;
<a href="https://www.cnblogs.com/sheng_chao">升讯威在线客服系统</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18699999" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18699999);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18699999', targetLink: 'https://www.cnblogs.com/sheng_chao/p/18699999', title: '独立开发经验谈：我是如何借助 Docker 环境变量让客户 1 分钟上线客服系统的' })">举报</a>
</div>
        