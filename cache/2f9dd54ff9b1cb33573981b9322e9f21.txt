
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/dechinphy/p/18750795/slackbot" title="发布于 2025-03-10 10:33">
    <span role="heading" aria-level="2">Ollama+DeepSeek+SlackBot</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/2277440/202503/2277440-20250310103329571-879122464.png" alt="Ollama+DeepSeek+SlackBot" class="desc_img">
        本文介绍了一种使用Slack聊天工具中的机器人SlackBot的API接口，实现本地化部署Ollama的DeepSeek大模型的远程通讯方案。相比于调用公网的API接口，数据隐私稍微好一点点。最终的方案应该是自建加密聊天工具+Ollama本地化部署，但是这个时间成本有点高，用户可以自行尝试。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="技术背景">技术背景</h1>
<p>想必最近有在部署DeepSeek大模型的人，看标题就知道这篇文章在做什么事情了。由于Ollama对于IP的监听缺乏安全防护，并且内网部署的Ollama模型对于外网来说也是不可见的，而如果使用一些公网API，又存在隐私数据泄露的风险。这里提供一个方案：使用端到端加密的通讯软件，将消息内容转为token传输给Ollama本地部署的模型，然后接收token作为消息，通过加密通讯返回给用户。但是考虑到加密通讯软件的用户群体并不是很大，这里仅仅使用Slack作为一个演示。需要注意的是，Slack公司也有自己的AI模型SlackAI，在用户数据安全防护这一块有多大的可靠性，留给大家自行判断。</p>
<h1 id="slack应用注册流程">Slack应用注册流程</h1>
<p>我们先假定你已经有一个Slack账号和相应的Slack工作区了，那么可以进入到<a href="https://api.slack.com/apps" target="_blank" rel="noopener nofollow">app界面</a>去创建一个自己的应用：</p>
<div align="center">
	<img src="https://img2024.cnblogs.com/blog/2277440/202503/2277440-20250305142339872-538922201.png">
</div>
<p>我选择的是<code>scratch</code>创建模式：</p>
<div align="center">
	<img src="https://img2024.cnblogs.com/blog/2277440/202503/2277440-20250305170509101-250323715.png">
</div>
<p>这样就能在网页界面上进行配置。选择好自己的工作区，配置该机器人在工作区中的名字：</p>
<div align="center">
	<img src="https://img2024.cnblogs.com/blog/2277440/202503/2277440-20250310102125680-2091958997.png">
</div>
<p>创建完成后大概是这样的：</p>
<div align="center">
	<img src="https://img2024.cnblogs.com/blog/2277440/202503/2277440-20250310102252600-891387136.png">
</div>
<p>然后可以进入到APP的设置界面：</p>
<div align="center">
	<img src="https://img2024.cnblogs.com/blog/2277440/202503/2277440-20250305170450360-93520248.png">
</div>
<p>要打开Socket模式：</p>
<div align="center">
	<img src="https://img2024.cnblogs.com/blog/2277440/202503/2277440-20250305170431791-1232989360.png">
</div>
<p>权限配置在<code>Event Subscriptions</code>和<code>OAuth &amp; Permissions</code>中：</p>
<div align="center">
	<img src="https://img2024.cnblogs.com/blog/2277440/202503/2277440-20250305170411945-1434982631.png">
</div>
<p>但是权限配置这一块需要后面单独开一个章节，请继续往下看。配置完成后，可以把应用安装到自己的工作区：</p>
<div align="center">
	<img src="https://img2024.cnblogs.com/blog/2277440/202503/2277440-20250310102426447-1161067861.png">
</div>
<p>安装完成后，打开本地的Slack客户端，找到<code>应用</code>-<code>添加应用</code>，在列表中属于该工作区的应用会排在最前面，可以直接将其加入工作区：</p>
<div align="center">
	<img src="https://img2024.cnblogs.com/blog/2277440/202503/2277440-20250305170333863-269070008.png">
</div>
<p>这样以后就可以在应用列表看到自己定义的应用了。</p>
<h1 id="关键信息">关键信息</h1>
<p>Slack应用创建之后，有几个关键的tokens信息（可以自己在Slack APP网页找到相关的字符串）需要保存到本地：</p>
<ol>
<li><code>SLACK_BOT_TOKEN</code>，是一串<code>xoxb-</code>开头的字符串，用<code>QAuth&amp;Permissions</code>里面的<code>Bot User OAuth Token</code>；</li>
<li><code>SLACK_APP_TOKEN</code>，是一串<code>xapp-</code>开头的字符串，从<code>Basic Information</code>里面的<code>APP Level Tokens</code>里面找，注意权限配置；</li>
<li><code>SLACK_SIGNING_SECRET</code>，是一串普通的随机字符串，从<code>Basic Information</code>里面找。</li>
</ol>
<h1 id="关键配置">关键配置</h1>
<p>想要正常的使用SlackBot，有几个关键的权限配置，如果权限配置错误，会导致SlackBot无法正确的读取消息或者正确地对消息进行反应。</p>
<p>首先是<code>APP Level Tokens</code>的配置（参考这里的ChatBotApp里面的配置）：</p>
<div align="center">
	<img src="https://img2024.cnblogs.com/blog/2277440/202503/2277440-20250305172135118-157399724.png">
</div>
<p>然后是<code>Event Subscriptions</code>中的配置信息：</p>
<div align="center">
	<img src="https://img2024.cnblogs.com/blog/2277440/202503/2277440-20250305172031159-506954965.png">
</div>
<p>最后是两个<code>QAuth&amp;Permissions</code>的配置参数：</p>
<div align="center">
	<img src="https://img2024.cnblogs.com/blog/2277440/202503/2277440-20250310095330859-1927917108.png">
</div>
<div align="center">
	<img src="https://img2024.cnblogs.com/blog/2277440/202503/2277440-20250310095337072-1539919430.png">
</div>
<p>需要注意的是，这些都是个人配置信息，仅供参考。</p>
<h1 id="slack_bolt环境配置">slack_bolt环境配置</h1>
<p>slack_bolt可以允许你从本地Python启动服务，调用SlackBot的API，监听Slack应用程序中的对话，并且可以按照不同的权限跟用户进行对话。可以使用pip安装slack_bolt：</p>
<pre><code class="language-bash">$ python3 -m pip install slack_bolt
Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple
Collecting slack_bolt
  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/5d/2d/fb23c998c43ff8398d7fa1e58bb82e7e735fbdaa0bd4ddaac04b3865bd4c/slack_bolt-1.22.0-py2.py3-none-any.whl (229 kB)
Collecting slack_sdk&lt;4,&gt;=3.33.5 (from slack_bolt)
  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/25/2d/8724ef191cb64907de1e4e4436462955501e00f859a53d0aa794d0d060ff/slack_sdk-3.34.0-py2.py3-none-any.whl (292 kB)
Installing collected packages: slack_sdk, slack_bolt
Successfully installed slack_bolt-1.22.0 slack_sdk-3.34.0
</code></pre>
<p>然后根据前面重要配置信息中提到的，配置Token：</p>
<pre><code class="language-bash"># export SLACK_BOT_TOKEN=xxx
# export SLACK_APP_TOKEN=xxx
# export SLACK_SIGNING_SECRET=xxx
</code></pre>
<p>先测试一个简单的Python脚本：</p>
<pre><code class="language-python">import os

from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler

# Install the Slack app and get xoxb- token in advance
app = App(token=os.environ["SLACK_BOT_TOKEN"])

if __name__ == "__main__":
    SocketModeHandler(app, os.environ["SLACK_APP_TOKEN"]).start()
</code></pre>
<p>运行效果：</p>
<pre><code class="language-bash">$ python3 slack_chatbot.py 
⚡️ Bolt app is running!
</code></pre>
<p>这就表示本地SlackBot安装成功了，当然，这个程序本身没有附带任何的功能。可以稍微升级一下SlackBot的测试功能：</p>
<pre><code class="language-python">import os
from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler

# Initializes your app with your bot token and socket mode handler
app = App(token=os.environ.get("SLACK_BOT_TOKEN"), signing_secret=os.environ.get("SLACK_SIGNING_SECRET"))

# Listens to incoming messages that contain "hello"
# To learn available listener arguments,
# visit https://tools.slack.dev/bolt-python/api-docs/slack_bolt/kwargs_injection/args.html
@app.message("hello")
def message_hello(message, say):
    # say() sends a message to the channel where the event was triggered
    say(f"Hey there &lt;@{message['user']}&gt;!")

@app.event("app_mention")
def handle_mentions(event, say):
    say(text="Hello!", channel=event["channel"])

# Start your app
if __name__ == "__main__":
    SocketModeHandler(app, os.environ["SLACK_APP_TOKEN"]).start()
</code></pre>
<p>在这个案例中，我们的程序会对一个事件和一个关键词起反应。例如我们只@slackbot的话，会返回一个hello：</p>
<div align="center">
	<img src="https://img2024.cnblogs.com/blog/2277440/202503/2277440-20250310102607638-940559330.png">
</div>
<p>如果@slackbot并且带上指定的字符串，那么就会做出相应的特别处理：</p>
<div align="center">
	<img src="https://img2024.cnblogs.com/blog/2277440/202503/2277440-20250310102657606-704760473.png">
</div>
<h1 id="slackbot对接ollama模型">SlackBot对接Ollama模型</h1>
<p>在上述章节中已经完成了本地通信的一些配置，接下来我们可以把SlackBot对接到Ollama模型中，原理也很简单：触发SlackBot之后，将消息作为token转发给Ollama的API，然后等待回复再回传给Slack聊天界面。这就是我做的一个简单的框架，接下来看看具体实施。</p>
<p>首先安装Ollama通信相关依赖：</p>
<pre><code class="language-bash">$ python3 -m pip install requests python-dotenv
</code></pre>
<p>直接上D老师给的代码：</p>
<pre><code class="language-python">import os
import re
import requests
from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler
from dotenv import load_dotenv

# 加载环境变量
load_dotenv()

# 初始化 Slack 应用
app = App(
    token=os.environ["SLACK_BOT_TOKEN"],
    signing_secret=os.environ["SLACK_SIGNING_SECRET"]
)

# Ollama 配置（可通过环境变量覆盖）
OLLAMA_ENDPOINT = os.getenv("OLLAMA_ENDPOINT", "http://localhost:11434/api/generate")
OLLAMA_MODEL = os.getenv("OLLAMA_MODEL", "deepseek-r1:14b")
OLLAMA_PARAMS = {
    "num_ctx": int(os.getenv("OLLAMA_NUM_CTX", 4096)),
    "num_gpu": int(os.getenv("OLLAMA_NUM_GPU", 64)),
    "keep_alive": os.getenv("OLLAMA_KEEP_ALIVE", "2h")
}

def query_ollama(prompt: str) -&gt; str:
    """向 Ollama 发送请求并获取完整响应"""
    payload = {
        "model": OLLAMA_MODEL,
        "prompt": f"请先输出思考过程（用THINKING:开头），再输出最终答案（用ANSWER:开头）：\n\n{prompt}",
        "stream": False,
        # "options": OLLAMA_PARAMS
    }

    try:
        response = requests.post(OLLAMA_ENDPOINT, json=payload, timeout=6000)
        response.raise_for_status()
        return response.json()["response"]
    except Exception as e:
        return f"Ollama 请求失败: {str(e)}"

def format_slack_response(raw_response: str) -&gt; str:
    """将原始响应分割为思考过程和最终答案"""
    thinking_match = re.search(r"THINKING:(.*?)(ANSWER:|\Z)", raw_response, re.DOTALL)
    answer_match = re.search(r"ANSWER:(.*)", raw_response, re.DOTALL)

    thinking = thinking_match.group(1).strip() if thinking_match else "未提供思考过程"
    answer = answer_match.group(1).strip() if answer_match else raw_response

    return (
        f"*🤔 思考过程*：\n```{thinking}```\n\n"
        f"*💡 最终回答*：\n```{answer}```"
    )

@app.event("app_mention")
def handle_ollama_query(event, say):
    """处理 Slack 提及事件"""
    # 移除机器人提及标记
    query = event["text"].replace(f'&lt;@{app.client.auth_test()["user_id"]}&gt;', '').strip()
    
    # 获取原始响应
    raw_response = query_ollama(query)
    
    # 格式化响应
    slack_message = format_slack_response(raw_response)
    
    # 发送到 Slack 频道
    say(text=slack_message, channel=event["channel"])

if __name__ == "__main__":
    SocketModeHandler(app, os.environ["SLACK_APP_TOKEN"]).start()
</code></pre>
<p>只要运行这个Python脚本，就可以通过SlackBot启动Ollama本地对话服务。可以查看会话过程中Ollama的模型被调用（本地部署了多个模型，不要在意ModelName的差异）：</p>
<pre><code class="language-bash">$ ollama ps
NAME                   ID              SIZE     PROCESSOR          UNTIL              
deepseek-r1:32b-q40    13c7c287f615    21 GB    30%/70% CPU/GPU    4 minutes from now
</code></pre>
<h1 id="成果展示">成果展示</h1>
<p>通过上一个章节部署完成，启动会话服务之后，可以测试一下本地DeepSeek蒸馏模型的回答。</p>
<p>简单提问：</p>
<div align="center">
	<img src="https://img2024.cnblogs.com/blog/2277440/202503/2277440-20250310102817678-1800347839.png">
</div>
<p>进一步提问：</p>
<div align="center">
	<img src="https://img2024.cnblogs.com/blog/2277440/202503/2277440-20250310102913080-1803745953.png">
</div>
<p>因为每一次回复需要时间，不是流式的响应，因此我自己加了一个响应回复：</p>
<div align="center">
	<img src="https://img2024.cnblogs.com/blog/2277440/202503/2277440-20250310103003554-644605116.png">
</div>
<p>这样就会告知用户，你的提问已经被接收到了，服务正在正常运行，模型正在推理。</p>
<div align="center">
	<img src="https://img2024.cnblogs.com/blog/2277440/202503/2277440-20250310103102983-2019581516.png">
</div>
<p>更多的示例就不一一展示了，跟之前介绍过的AnythingLLM和ChatBox、PageAssit等相比功能还是非常欠缺的，有兴趣的朋友可以考虑进一步去拓展。</p>
<h1 id="方案选择">方案选择</h1>
<p>前一段时间有很多新闻在报道Ollama的安全漏洞，在公网上有众多开放Ollama端口的服务器可以被有心之人利用。这件事也引起了很多大模型本地用户的警觉，D老师对比了几种可能用到的方案并给出了建议：</p>
<div align="center">
	<img src="https://img2024.cnblogs.com/blog/2277440/202503/2277440-20250307094753681-168322298.png">
</div>
<p>D老师认为，使用自建的加密聊天工具+Ollama的安全加固，会是一个比较好用的方案。既可以满足用户的数据隐私需求，又可以很大程度上提高本地大模型使用的灵活度。而这篇文章中我们所使用到的是公共聊天工具+Ollama的方案，相比于使用公网API，数据隐私会稍好一些。但是这里面的数据隐私也很大程度上依赖于聊天工具对于用户隐私数据的保护程度，用户需要自己进行鉴别。</p>
<h1 id="总结概要">总结概要</h1>
<p>本文介绍了一种使用Slack聊天工具中的机器人SlackBot的API接口，实现本地化部署Ollama的DeepSeek大模型的远程通讯方案。相比于调用公网的API接口，数据隐私稍微好一点点。最终的方案应该是自建加密聊天工具+Ollama本地化部署，但是这个时间成本有点高，用户可以自行尝试。</p>
<h1 id="版权声明">版权声明</h1>
<p>本文首发链接为：<a href="https://www.cnblogs.com/dechinphy/p/slackbot.html" target="_blank">https://www.cnblogs.com/dechinphy/p/slackbot.html</a></p>
<p>作者ID：DechinPhy</p>
<p>更多原著文章：<a href="https://www.cnblogs.com/dechinphy/" target="_blank">https://www.cnblogs.com/dechinphy/</a></p>
<p>请博主喝咖啡：<a href="https://www.cnblogs.com/dechinphy/gallery/image/379634.html" target="_blank">https://www.cnblogs.com/dechinphy/gallery/image/379634.html</a></p>
<h1 id="参考链接">参考链接</h1>
<ol>
<li><a href="https://tools.slack.dev/bolt-python/getting-started" target="_blank" rel="noopener nofollow">https://tools.slack.dev/bolt-python/getting-started</a></li>
<li><a href="https://cloud.tencent.com/developer/article/2468402" target="_blank" rel="noopener nofollow">https://cloud.tencent.com/developer/article/2468402</a></li>
</ol>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0711228543275463" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-10 10:34">2025-03-10 10:33</span>&nbsp;
<a href="https://www.cnblogs.com/dechinphy">DECHIN</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18750795" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18750795);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18750795', targetLink: 'https://www.cnblogs.com/dechinphy/p/18750795/slackbot', title: 'Ollama+DeepSeek+SlackBot' })">举报</a>
</div>
        