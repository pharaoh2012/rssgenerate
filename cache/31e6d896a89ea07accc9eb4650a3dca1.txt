
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/linx/p/18865674" title="发布于 2025-05-08 09:41">
    <span role="heading" aria-level="2">Web前端入门第 47 问：CSS @media 媒体查询不要只会视口宽度适配</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><code>@media</code> 媒体查询的出现解决了什么问题？</p>
<p>曾经，一个网页要兼容移动端和 PC 端，前端的代码复杂度嗖嗖嗖的飙升，需要使用多套代码对各种屏幕尺寸做适配。</p>
<p><code>@media</code> 的出现解决了 CSS 中无法适配设备尺寸的问题，让 CSS 拥有了处理简单逻辑的能力。</p>
<p>媒体查询就像进店试穿衣服一样，穿得上，咱就用这一套；穿不上，咱就换一套；都穿不上，那就还是穿进店时身上这套吧~~</p>
<h2 id="媒体查询">媒体查询</h2>
<p>使用媒体查询之前，先要明白 <code>媒体</code> 二字是指的用户软件设备（比如：电脑中浏览器、网页打印预览等）。</p>
<p>媒体查询无法针对某个具体的 HTML 元素做出响应！！</p>
<p>也无法针对特定的硬件设备做出响应（比如：小米手机、苹果手机等）！！</p>
<p>它只能对用户设备的固定特性做出响应（比如浏览器的可视宽度，是否支持鼠标悬停，设备像素密度等）！！</p>
<h3 id="语法">语法</h3>
<pre><code class="language-css">@media &lt;media-query-list&gt; {
  &lt;rule-list&gt;
}
</code></pre>
<h3 id="一个简单示例">一个简单示例</h3>
<p>查询媒体宽度在某个范围内时，设置不同的背景色：</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;div class="child"&gt;媒体查询应用&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
.box {
  margin: 20px 0;
  width: 400px;
  border: var(--base-border, 2px solid rgba(255, 71, 87,0.3));
  resize: both;
  overflow: auto;
}
.box .child {
  margin: 10px;
  border: 1px solid #ffa947;
  padding: 10px;
}
@media (max-width: 450px) {
  /* 宽度小于 450px 时，背景色为#ffa947 */
  .box {
    background-color: #ffa947;
  }
}

@media (min-width: 450px) and (max-width: 600px) {
  /* 宽度在 450px 到 600px 之间时，背景色为#ff4757 */
  .box {
    background-color: #ff4757;
  }
}
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202505/596097-20250508093942883-1872906988.gif" alt="" loading="lazy"></p>
<h3 id="指定媒体类型">指定媒体类型</h3>
<p>以上媒体查询在未指定媒体类型时，默认为 <code>all</code> 全部媒体类型，将会应用于屏幕和打印预览~</p>
<p>可使用关键字指定 <code>screen</code> 指定用于屏幕或 <code>print</code> 指定用于打印。</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;div class="child"&gt;媒体查询应用&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
.box {
  margin: 20px 0;
  width: 400px;
  border: var(--base-border, 2px solid rgba(255, 71, 87,0.3));
  resize: both;
  overflow: auto;
}
.box .child {
  margin: 10px;
  border: 1px solid #ffa947;
  padding: 10px;
}
@media screen and (max-width: 1200px) {
  /* 指定屏幕设备宽度小于 1200px 时，背景色为#ffa947 */
  .box {
    background-color: #ffa947;
  }
}

@media print {
  /* 指定打印 字体大小 和 字体颜色 */
  .box {
    font-size: 22pt;
    color: red;
  }
}
&lt;/style&gt;
</code></pre>
<p>可在浏览器中 <code>ctrl + p</code> 查看打印样式：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202505/596097-20250508093958165-79606082.png" alt="" loading="lazy"></p>
<h3 id="使用逻辑运算符">使用逻辑运算符</h3>
<p>使用逻辑运算符 <code>and</code> 、 <code>not</code> 、 <code>only</code> 、 <code>,</code> 、 <code>or</code>，可以组合多个媒体查询条件，实现更复杂的逻辑判断。</p>
<p><code>and</code> 用于多个查询条件同时匹配时才应用样式：</p>
<pre><code class="language-css">@media screen and (min-width: 320px) and (max-width: 600px) {
  .box {
    line-height: 3;
  }
}
</code></pre>
<p><code>not</code> 用于查询条件不匹配时才应用样式：</p>
<pre><code class="language-css">@media not screen and (min-width: 600px) {
  /* 指定屏幕设备宽度不大于 600px 时，背景色为 #ffa947 */
  .box {
    background-color: #ffa947;
  }
}
</code></pre>
<p><code>only</code> 仅在整个查询匹配时才应用样式。这对于防止较老的浏览器应用所选样式很有用。当不使用 only 时，较老的浏览器会将 screen and (max-width: 500px) 简单地解释为 screen，忽略查询的其余部分，并将其样式应用于所有屏幕。如果使用 only 运算符，则还必须指定媒体类型。 --- 摘自 MDN</p>
<pre><code class="language-css">@media only screen and (max-width: 600px) {
  /* 指定屏幕设备宽度小于 600px 时，字体色为 #ff4757 */
  .box {
    color: #ff4757;
  }
}
</code></pre>
<p><code>,</code>  和 <code>or</code> 运算符等价，<code>or</code> 在媒体查询第 4 版中加入，仅 <code>2022</code> 年之后的浏览器支持：</p>
<pre><code class="language-css">@media screen, print {
  .box {
    font-size: 28px;
  }
}
@media (not (color)) or (not (hover)) {
  .box {
    font-weight: bold;
  }
}
</code></pre>
<p><strong>需特别注意：逻辑运算符后面必须有至少一个空格！！比如 <code>not(hover)</code> 将不生效，必须写成 <code>not (hover)</code>。</strong></p>
<h3 id="新语法">新语法</h3>
<p>媒体查询第 4 版引入了一种新的范围语法，使用此语法需特别注意浏览器兼容性：</p>
<p>支持的运算符有：等于 <code>=</code>、小于 <code>&lt;</code>、 小于等于 <code>&lt;=</code>、大于 <code>&gt;</code>、大于等于 <code>&gt;=</code>。</p>
<pre><code class="language-css">/* @media (max-width: 600px) { ... } 等价于 */
@media (width &lt;= 600px) {
  .box {
    font-size: 28px;
  }
}

/* @media (min-width: 600px) and (max-width: 1200px) { ... } 等价于 */
@media (600px &lt;= width &lt;= 1200px) {
  .box {
    font-size: 28px;
  }
}

@media screen and (width = 320px) {
  /* 指定屏幕设备宽度等于 320px 时，行高为 10 */
  .box {
    line-height: 10;
  }
}
</code></pre>
<p>第 4 版的媒体查询 W3C 参考文档：<a href="https://drafts.csswg.org/mediaqueries/" target="_blank" rel="noopener nofollow">https://drafts.csswg.org/mediaqueries/</a></p>
<h3 id="常用媒体特性列表">常用媒体特性列表</h3>
<p><strong>any-hover</strong><br>
是否有任何可用的输入机制允许用户将鼠标悬停在元素上。有效值: <code>none</code>、<code>hover</code>。</p>
<p><strong>width</strong><br>
可视区域的宽度，包括滚动条的宽度。</p>
<p>允许 <code>min-</code> 和 <code>max-</code> 前缀查询范围。</p>
<pre><code class="language-css">@media (width: 600px) {}
@media (min-width: 30rem) {}
@media (max-width: 40rem) {}
</code></pre>
<pre><code class="language-css">@media (any-hover: hover) {
  /* 有鼠标悬停时（比如PC端），字体色为 #ff4757 */
  .box {
    color: #ff4757;
  }
}
</code></pre>
<p><strong>height</strong><br>
可视区域的高度。</p>
<p>允许 <code>min-</code> 和 <code>max-</code> 前缀查询范围。</p>
<pre><code class="language-css">@media (height: 600px) {}
@media (min-height: 30rem) {}
@media (max-height: 40rem) {}
</code></pre>
<p><strong>resolution</strong><br>
输出设备的像素密度。</p>
<p>允许 <code>min-</code> 和 <code>max-</code> 前缀查询范围。</p>
<pre><code class="language-css">@media (resolution: 150dpi) {}
@media (min-resolution: 300dpi) {}
@media (max-resolution: 2dpcm) {}
</code></pre>
<p><strong>orientation</strong><br>
可视区域的方向。有效值：<code>portrait</code>（纵向：高度大于或等于宽度）、<code>landscape</code>（横向：宽度大于高度）。</p>
<pre><code class="language-css">@media (orientation: portrait) {}
@media (orientation: landscape) {}
</code></pre>
<p><strong>pointer</strong><br>
主输入机构是否为指针设备，如果是，其准确性如何。有效值：<code>none</code>（不包括定点设备）、<code>coarse</code>（精度有限的定点设备，例如触摸屏上的手指）、<code>fine</code>（精确指针设备，例如鼠标）。</p>
<pre><code class="language-css">@media (any-pointer: fine) {}
@media (any-pointer: coarse) {}
</code></pre>
<p><strong>hover</strong><br>
输入机制是否允许用户将鼠标悬停在元素上。有效值：<code>none</code>（无法悬停或无法方便地悬停）、<code>hover</code>（可以方便地将鼠标悬停）。</p>
<pre><code class="language-css">@media (hover: hover) {}
</code></pre>
<p><strong>aspect-ratio</strong><br>
可视区域的宽高纵横比。有效值：<code>4/3</code>、<code>1.33333</code>。</p>
<p>允许 <code>min-</code> 和 <code>max-</code> 前缀查询范围。</p>
<pre><code class="language-css">@media (min-aspect-ratio: 8/5) {}
@media (aspect-ratio: 1/1) {}
@media (max-aspect-ratio: 8/5) {}
@media screen and (min-aspect-ratio: 16/9) {}
</code></pre>
<p><strong>prefers-color-scheme</strong><br>
检测用户是喜欢浅色还是深色配色方案。 在 Media Queries Level 5 中添加。有效值：<code>light</code>（浅色）、<code>dark</code>（深色）。</p>
<pre><code class="language-css">@media (prefers-color-scheme: dark) {}
</code></pre>
<h3 id="不常用媒体特性列表">不常用媒体特性列表</h3>
<p><strong>any-pointer</strong><br>
是否有任何可用的输入机制是指针设备。有效值: <code>none</code>、<code>fine</code> 或 <code>coarse</code>。</p>
<pre><code class="language-css">@media (any-pointer: fine) {
  /* 至少一个输入机制包括精确指针设备 */
}

@media (any-pointer: coarse) {
  /* 至少一个 input 机制包括精度有限的定点设备 */
}
</code></pre>
<p><strong>color</strong><br>
输出设备的每个颜色分量的位数，如果设备不支持输出彩色，则为 <code>0</code>。</p>
<p>允许 <code>min-</code> 和 <code>max-</code> 前缀查询范围。</p>
<pre><code class="language-css">/* 任何颜色设备 */
@media (color) {}
/* 每个颜色分量至少有8位的颜色设备 */
@media (min-color: 8) {}
</code></pre>
<p><strong>color-gamut</strong><br>
用户代理和输出设备支持的颜色的大致范围。有效值：<code>srgb</code>、<code>p3</code>、<code>rec2020</code>。</p>
<pre><code class="language-css">@media (color-gamut: srgb) {}
</code></pre>
<p><strong>color-index</strong><br>
输出设备的颜色查找表中的条目数，如果设备不使用此类表，则为 <code>0</code>。</p>
<p>允许 <code>min-</code> 和 <code>max-</code> 前缀查询范围。</p>
<pre><code class="language-css">@media (color-index) {}
@media (min-color-index: 16000) {}
</code></pre>
<p><strong>device-posture</strong> 实验性<br>
检测设备的当前状态，即可视区域是处于平放状态还是折叠状态。在 Device Posture API 中定义。有效值：<code>continuous</code> 平面屏幕状态、<code>folded</code> 折叠屏幕状态。</p>
<pre><code class="language-css">@media (device-posture: folded) and (orientation: landscape) {}
@media (device-posture: continuous) {}
</code></pre>
<p><strong>display-mode</strong><br>
应用程序的显示模式：例如，全屏或画中画模式。 在 Media Queries Level 5 中添加。有效值：浏览器 <code>browser</code>、全屏 <code>fullscreen</code>、画中画 <code>picture-in-picture</code>、<code>minimal-ui</code>、<code>standalone</code>、<code>window-controls-overlay</code>。</p>
<pre><code class="language-css">@media all and (display-mode: fullscreen) {}
</code></pre>
<p><strong>dynamic-range</strong><br>
用户代理和输出设备支持的亮度、对比度和颜色深度的组合。在 Media Queries Level 5 中添加。有效值：<code>standard</code>（任何可视设备）、<code>high</code>（支持的亮度、对比度和颜色深度的组合）。</p>
<pre><code class="language-css">@media (dynamic-range: standard) {}
@media (dynamic-range: high) {}
</code></pre>
<p><strong>forced-colors</strong><br>
检测 User Agent 是否限制调色板。 在 Media Queries Level 5 中添加。有效值：<code>none</code>、<code>active</code>（强制颜色模式处于活动状态）。</p>
<pre><code class="language-css">@media (forced-colors: active) {}
</code></pre>
<p><strong>grid</strong><br>
设备是否使用网格屏幕还是点阵屏幕。有效值：<code>0</code>、<code>1</code>。</p>
<pre><code class="language-css">@media (grid: 0) {}
@media (grid: 1) {}
</code></pre>
<p><strong>inverted-colors</strong><br>
用户代理或底层作系统是否反转了颜色。在 Media Queries Level 5 中添加。有效值：<code>none</code>（颜色正常显示）、<code>inverted</code>（所有像素都已反转）。</p>
<pre><code class="language-css">@media (inverted-colors: inverted) {}
@media (inverted-colors: none) {}
</code></pre>
<p><strong>monochrome</strong><br>
输出设备的单色帧缓冲区中每像素的位数，如果设备不是单色的，则为 <code>0</code>。</p>
<p>允许 <code>min-</code> 和 <code>max-</code> 前缀查询范围。</p>
<pre><code class="language-css">@media (monochrome: 0) {}
@media (max-monochrome: 8) {}
</code></pre>
<p><strong>overflow-block</strong><br>
输出设备如何处理沿块轴溢出可视区域的内容。有效值：<code>none</code>（不显示溢出内容）、<code>scroll</code>（滚动显示）、<code>optional-paged</code>、<code>paged</code>。</p>
<pre><code class="language-css">@media (overflow-block: scroll) {}
</code></pre>
<p><strong>overflow-inline</strong><br>
沿内联轴溢出可视区域的内容是否可以滚动。有效值：<code>none</code>（不显示溢出内容）、<code>scroll</code>（滚动显示）。</p>
<pre><code class="language-css">@media (overflow-inline: scroll) {}
</code></pre>
<p><strong>prefers-contrast</strong><br>
检测用户是否请求系统增加或减少相邻颜色之间的对比度。 在 Media Queries Level 5 中添加。有效值：<code>no-preference</code>（无偏好）、<code>more</code>（增加对比度）、<code>less</code>（减少对比度）、<code>custom</code>（自定义对比度）。</p>
<pre><code class="language-css">@media (prefers-contrast: more) {}
</code></pre>
<p><strong>prefers-reduced-data</strong><br>
检测用户是否请求了消耗较少 Internet 流量的 Web 内容。有效值：<code>no-preference</code>（无偏好）、<code>reduce</code>（减少数据流量）。</p>
<pre><code class="language-css">@media (prefers-reduced-data: no-preference) {}
</code></pre>
<p><strong>prefers-reduced-motion</strong><br>
用户喜欢在页面上进行较少的运动。 在 Media Queries Level 5 中添加。有效值：<code>no-preference</code>（无偏好）、<code>reduce</code>（减少运动）。</p>
<pre><code class="language-css">@media (prefers-reduced-motion) {}
</code></pre>
<p><strong>prefers-reduced-transparency</strong><br>
检测用户是否在其设备上启用了设置，以减少设备上使用的透明或半透明图层效果。有效值：<code>no-preference</code>（无偏好）、<code>reduce</code>（减少透明效果）。</p>
<pre><code class="language-css">@media (prefers-reduced-transparency) {}
</code></pre>
<p><strong>scan</strong><br>
显示输出是逐行扫描还是隔行扫描。有效值：<code>progressive</code>（逐行扫描）、<code>interlace</code>（隔行扫描）。</p>
<pre><code class="language-css">@media screen and (scan: interlace) {}
@media screen and (scan: progressive) {}
</code></pre>
<p><strong>scripting</strong><br>
检测脚本（即 JavaScript）是否可用。 在 Media Queries Level 5 中添加。有效值：<code>none</code>（脚本不可用）、<code>initial-only</code>（脚本在初始页面加载期间启用，但之后不会启用）、<code>enabled</code>（脚本可用）。</p>
<pre><code class="language-css">@media (scripting: none) {}

@media (scripting: initial-only) {}

@media (scripting: enabled) {}
</code></pre>
<p><strong>shape</strong> 实验性<br>
检测设备的形状以区分矩形和圆形显示器。有效值：<code>rect</code>（矩形或正方形）、<code>round</code>（圆形或与圆形相似的形状）。</p>
<pre><code class="language-css">@media (shape: rect) {}
@media (shape: round) {}
</code></pre>
<p><strong>update</strong><br>
输出设备可以修改内容外观的频率。有效值：<code>none</code>（不支持）、<code>slow</code>（慢速）、<code>fast</code>（快速）。</p>
<pre><code class="language-css">@media (update: none) {}
@media (update: slow) {}
@media (update: fast) {}
</code></pre>
<p><strong>video-dynamic-range</strong><br>
用户代理和输出设备的视频平面支持的亮度、对比度和颜色深度的组合。在 Media Queries Level 5 中添加。有效值：<code>standard</code>（标准）、<code>high</code>（高）。</p>
<pre><code class="language-css">@media (video-dynamic-range: high) {}
@media (video-dynamic-range: standard) {}
</code></pre>
<h2 id="写在最后">写在最后</h2>
<p>虽然媒体查询多用于响应式布局，但多了解一些其他媒体特性，可做出一些很有用的交互设计效果，比如：深色、浅色主题适配；指针设备、和非指针设备适配等等~~</p>
<p>媒体查询兼容性参考文档：<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media#browser_compatibility" target="_blank" rel="noopener nofollow">https://developer.mozilla.org/en-US/docs/Web/CSS/@media#browser_compatibility</a></p>
<p>参考资料：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media" target="_blank" rel="noopener nofollow">https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media</a></p>

</div>
<div id="MySignature" role="contentinfo">
    <p>&nbsp;</p>
<p style="font-size: 18px;font-weight: bold;">文章收录于微信公众号【<span style="color:rgb(255, 71, 87)">前端路引</span>】，欢迎 <span style="color:#4ec259">微信扫一扫</span> 查看更多文章。</p>
<p>
  <img style="max-width: 320px;" src="https://images.cnblogs.com/cnblogs_com/linx/2447020/o_250228035031_%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png">
</p>
<p>本文来自博客园，作者：<a href="https://www.cnblogs.com/linx/" target="_blank">前端路引</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/linx/p/18865674" target="_blank">https://www.cnblogs.com/linx/p/18865674</a></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.06254967319907408" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-08 09:41">2025-05-08 09:41</span>&nbsp;
<a href="https://www.cnblogs.com/linx">前端路引</a>&nbsp;
Views(<span id="post_view_count">6</span>)&nbsp;
Comments(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18865674);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18865674', targetLink: 'https://www.cnblogs.com/linx/p/18865674', title: 'Web前端入门第 47 问：CSS @media 媒体查询不要只会视口宽度适配' })">举报</a>
</div>
	