
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/liyongqiang-cc/p/18628407" title="发布于 2025-01-15 10:07">
    <span role="heading" aria-level="2">如何在 ASP.NET Core 中实现速率限制？</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在 ASP.NET Core 中实现速率限制（Rate Limiting）中间件可以帮助你控制客户端对 API 的请求频率，防止滥用和过载。速率限制通常用于保护服务器资源，确保服务的稳定性和可用性。</p>
<p>ASP.NET Core 本身并没有内置的速率限制中间件，但你可以通过自定义中间件或使用第三方库来实现速率限制。以下是实现速率限制的几种常见方法：</p>
<hr>
<h3 id="1-使用自定义中间件实现速率限制">1. <strong>使用自定义中间件实现速率限制</strong></h3>
<p>你可以通过自定义中间件来实现速率限制。以下是一个简单的实现示例：</p>
<h4 id="11-实现速率限制中间件">1.1 实现速率限制中间件</h4>
<pre><code>using&nbsp;Microsoft.AspNetCore.Http;
using&nbsp;System.Collections.Concurrent;
using&nbsp;System.Threading.Tasks;

public&nbsp;class&nbsp;RateLimitingMiddleware
{
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;readonly&nbsp;RequestDelegate&nbsp;_next;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;readonly&nbsp;int&nbsp;_maxRequests;&nbsp;//&nbsp;每分钟允许的最大请求数
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;readonly&nbsp;ConcurrentDictionary&lt;string,&nbsp;RateLimiter&gt;&nbsp;_rateLimiters;

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;RateLimitingMiddleware(RequestDelegate&nbsp;next,&nbsp;int&nbsp;maxRequests)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_next&nbsp;=&nbsp;next;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_maxRequests&nbsp;=&nbsp;maxRequests;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_rateLimiters&nbsp;=&nbsp;new&nbsp;ConcurrentDictionary&lt;string,&nbsp;RateLimiter&gt;();
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;async&nbsp;Task&nbsp;InvokeAsync(HttpContext&nbsp;context)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获取客户端的唯一标识（例如&nbsp;IP&nbsp;地址）
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;clientId&nbsp;=&nbsp;context.Connection.RemoteIpAddress.ToString();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获取或创建速率限制器
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;rateLimiter&nbsp;=&nbsp;_rateLimiters.GetOrAdd(clientId,&nbsp;_&nbsp;=&gt;&nbsp;new&nbsp;RateLimiter(_maxRequests));

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(rateLimiter.AllowRequest())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;_next(context);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.Response.StatusCode&nbsp;=&nbsp;StatusCodes.Status429TooManyRequests;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;context.Response.WriteAsync("请求太多。请稍后再试.");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
}

public&nbsp;class&nbsp;RateLimiter
{
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;readonly&nbsp;int&nbsp;_maxRequests;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;_requestCount;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;DateTime&nbsp;_windowStart;

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;RateLimiter(int&nbsp;maxRequests)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_maxRequests&nbsp;=&nbsp;maxRequests;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_requestCount&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_windowStart&nbsp;=&nbsp;DateTime.UtcNow;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;bool&nbsp;AllowRequest()
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;now&nbsp;=&nbsp;DateTime.UtcNow;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;如果当前时间窗口已过期，重置计数器
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;((now&nbsp;-&nbsp;_windowStart).TotalSeconds&nbsp;&gt;&nbsp;60)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_requestCount&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_windowStart&nbsp;=&nbsp;now;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;检查请求是否超出限制
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(_requestCount&nbsp;&lt;&nbsp;_maxRequests)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_requestCount++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</code></pre>
<h4 id="12-注册中间件">1.2 注册中间件</h4>
<p>在 <code>Startup.cs</code> 中注册中间件：</p>
<pre><code>public&nbsp;void&nbsp;Configure(IApplicationBuilder&nbsp;app,&nbsp;IWebHostEnvironment&nbsp;env)
{
&nbsp;&nbsp;&nbsp;&nbsp;app.UseMiddleware&lt;RateLimitingMiddleware&gt;(10);&nbsp;//&nbsp;每分钟最多&nbsp;10个请求

&nbsp;&nbsp;&nbsp;&nbsp;app.UseRouting();

&nbsp;&nbsp;&nbsp;&nbsp;app.UseEndpoints(endpoints&nbsp;=&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;endpoints.MapControllers();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
}
</code></pre>
<hr>
<h3 id="2-使用第三方库实现速率限制">2. <strong>使用第三方库实现速率限制</strong></h3>
<p>如果你不想自己实现速率限制逻辑，可以使用一些现成的第三方库，例如：</p>
<h4 id="21-aspnetcoreratelimit">2.1 <strong>AspNetCoreRateLimit</strong></h4>
<p>AspNetCoreRateLimit 是一个流行的 ASP.NET Core 速率限制库，支持 IP 地址、客户端 ID 和端点级别的速率限制。</p>
<h5 id="安装">安装</h5>
<p>通过 NuGet 安装：</p>
<pre><code>dotnet&nbsp;add&nbsp;package&nbsp;AspNetCoreRateLimit
</code></pre>
<h5 id="配置">配置</h5>
<p>在 <code>Startup.cs</code> 中配置速率限制：</p>
<pre><code>public&nbsp;void&nbsp;ConfigureServices(IServiceCollection&nbsp;services)
{
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;添加内存缓存
&nbsp;&nbsp;&nbsp;&nbsp;services.AddMemoryCache();

&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;配置速率限制
&nbsp;&nbsp;&nbsp;&nbsp;services.Configure&lt;IpRateLimitOptions&gt;(Configuration.GetSection("IpRateLimiting"));
&nbsp;&nbsp;&nbsp;&nbsp;services.AddSingleton&lt;IIpPolicyStore,&nbsp;MemoryCacheIpPolicyStore&gt;();
&nbsp;&nbsp;&nbsp;&nbsp;services.AddSingleton&lt;IRateLimitCounterStore,&nbsp;MemoryCacheRateLimitCounterStore&gt;();
&nbsp;&nbsp;&nbsp;&nbsp;services.AddSingleton&lt;IRateLimitConfiguration,&nbsp;RateLimitConfiguration&gt;();
&nbsp;&nbsp;&nbsp;&nbsp;services.AddSingleton&lt;IProcessingStrategy,&nbsp;AsyncKeyLockProcessingStrategy&gt;();
&nbsp;&nbsp;&nbsp;&nbsp;services.AddInMemoryRateLimiting();
}

public&nbsp;void&nbsp;Configure(IApplicationBuilder&nbsp;app,&nbsp;IWebHostEnvironment&nbsp;env)
{
&nbsp;&nbsp;&nbsp;&nbsp;app.UseIpRateLimiting();

&nbsp;&nbsp;&nbsp;&nbsp;app.UseRouting();

&nbsp;&nbsp;&nbsp;&nbsp;app.UseEndpoints(endpoints&nbsp;=&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;endpoints.MapControllers();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
}
</code></pre>
<h5 id="配置文件">配置文件</h5>
<p>在 <code>appsettings.json</code> 中添加速率限制配置：</p>
<pre><code>{
&nbsp;&nbsp;&nbsp;&nbsp;"IpRateLimiting":&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"EnableEndpointRateLimiting":&nbsp;true,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"StackBlockedRequests":&nbsp;false,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"RealIpHeader":&nbsp;"X-Real-IP",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"ClientIdHeader":&nbsp;"X-ClientId",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"GeneralRules":&nbsp;[
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Endpoint":&nbsp;"*",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Period":&nbsp;"1m",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Limit":&nbsp;10
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</code></pre>
<hr>
<h3 id="3-使用分布式缓存实现速率限制">3. <strong>使用分布式缓存实现速率限制</strong></h3>
<p>如果你的应用是分布式的（例如部署在 Kubernetes 或多个服务器上），可以使用分布式缓存（如 Redis）来实现速率限制。</p>
<h4 id="31-使用-redis-实现速率限制">3.1 使用 Redis 实现速率限制</h4>
<p>你可以使用 Redis 来存储每个客户端的请求计数。以下是一个简单的示例：</p>
<pre><code>using&nbsp;Microsoft.AspNetCore.Http;
using&nbsp;StackExchange.Redis;
using&nbsp;System.Threading.Tasks;

public&nbsp;class&nbsp;RedisRateLimitingMiddleware
{
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;readonly&nbsp;RequestDelegate&nbsp;_next;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;readonly&nbsp;int&nbsp;_maxRequests;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;readonly&nbsp;ConnectionMultiplexer&nbsp;_redis;

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;RedisRateLimitingMiddleware(RequestDelegate&nbsp;next,&nbsp;int&nbsp;maxRequests,&nbsp;ConnectionMultiplexer&nbsp;redis)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_next&nbsp;=&nbsp;next;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_maxRequests&nbsp;=&nbsp;maxRequests;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_redis&nbsp;=&nbsp;redis;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;async&nbsp;Task&nbsp;InvokeAsync(HttpContext&nbsp;context)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;clientId&nbsp;=&nbsp;context.Connection.RemoteIpAddress.ToString();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;db&nbsp;=&nbsp;_redis.GetDatabase();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;key&nbsp;=&nbsp;$"rate_limit:{clientId}";
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;requestCount&nbsp;=&nbsp;await&nbsp;db.StringIncrementAsync(key);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(requestCount&nbsp;==&nbsp;1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;db.KeyExpireAsync(key,&nbsp;TimeSpan.FromMinutes(1));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(requestCount&nbsp;&gt;&nbsp;_maxRequests)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.Response.StatusCode&nbsp;=&nbsp;StatusCodes.Status429TooManyRequests;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;context.Response.WriteAsync("请求太多。请稍后再试.");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;_next(context);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</code></pre>
<h4 id="32-注册中间件">3.2 注册中间件</h4>
<p>在 <code>Startup.cs</code> 中注册中间件：</p>
<pre><code>public&nbsp;void&nbsp;ConfigureServices(IServiceCollection&nbsp;services)
{
&nbsp;&nbsp;&nbsp;&nbsp;services.AddSingleton&lt;ConnectionMultiplexer&gt;(ConnectionMultiplexer.Connect("localhost:6379"));
}

public&nbsp;void&nbsp;Configure(IApplicationBuilder&nbsp;app,&nbsp;IWebHostEnvironment&nbsp;env)
{
&nbsp;&nbsp;&nbsp;&nbsp;app.UseMiddleware&lt;RedisRateLimitingMiddleware&gt;(10);&nbsp;//&nbsp;每分钟最多&nbsp;10个请求

&nbsp;&nbsp;&nbsp;&nbsp;app.UseRouting();

&nbsp;&nbsp;&nbsp;&nbsp;app.UseEndpoints(endpoints&nbsp;=&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;endpoints.MapControllers();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
}
</code></pre>
<hr>
<h3 id="4-总结">4. <strong>总结</strong></h3>
<p>在 ASP.NET Core 中实现速率限制有多种方式：</p>
<ul>
<li><strong>自定义中间件</strong>：适合简单的场景，但需要自己实现逻辑。</li>
<li><strong>第三方库</strong>：如 AspNetCoreRateLimit，提供了更强大的功能和灵活性。</li>
<li><strong>分布式缓存</strong>：如 Redis，适合分布式环境。</li>
</ul>
<p>根据你的需求选择合适的方式，确保你的 API 能够有效防止滥用和过载。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="5.837459357381944" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-15 10:07">2025-01-15 10:07</span>&nbsp;
<a href="https://www.cnblogs.com/liyongqiang-cc">代码拾光</a>&nbsp;
阅读(<span id="post_view_count">726</span>)&nbsp;
评论(<span id="post_comment_count">9</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18628407" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18628407);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18628407', targetLink: 'https://www.cnblogs.com/liyongqiang-cc/p/18628407', title: '如何在 ASP.NET Core 中实现速率限制？' })">举报</a>
</div>
        