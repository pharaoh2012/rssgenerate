
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/yby6/p/18931607" title="发布于 2025-06-16 18:42">
    <span role="heading" aria-level="2">继ChatGPT的热潮AI的新产物-智能体元器Agent平台</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="前言">前言</h1>
<p><strong>2 年前, OpenAI发布了他们划时代的产品 《ChatGPT》 那时整个世界都为之疯狂</strong>,当然我也不例外!</p>
<p>自此 AI 就正式的完完整整的出现在大众面前,但是它限制了很多国家当然也限制了我国,国内浪潮来袭纷纷研发自己的大模型,直到今日国产 AI 大模型也可以说是相当成熟了,在如此的情况下衍生出一个叫 AI Agent 的产物出现,我最早知道的是 coze 国际版本当时没太在意,直到腾讯云社区宣传了他们的新产物 腾讯元器 那么什么是元器呢?</p>
<blockquote>
<p>🤖 本片文章以渐进式从零玩转系列每一个功能都将会完整的介绍围绕着智能体一步步的往上叠加功能,也更加的可以知道智能体分别有哪些功能以及如何使用. 可以放心观看一步步来准没问题,加油同学们<br>
如果你学习完毕后那么就可以继续跟着扩展学习总结学到的知识点搭建一个全新的智能体<code>《小盆友的故事屋》</code></p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184044331-689043662.png" alt="Ai Agent" loading="lazy"></p>
<h1 id="元器">元器</h1>
<p>腾讯元器是基于混元大模型开发的一站式智能体创作与分发平台。</p>
<p>无论你是否有编程基础，可以快速的快捷的自定义属于你的人工智能 AI 模型(智能体)、插件、工作流、以及上传知识库对智能体的扩展并且可以将创建好的智能体一件分发到 QQ 智能体、微信客服、等各种渠道,还可以进行对应智能体的 API 接口调用零基础接入你自己的大模型.</p>
<p>通过元器平台制作的智能体，目前支持32k token上下文长度（某次回答过程中的提示词+机器回答的token长度，一个token约为1.8个中文字符）。工作流的超时运行时间为5分钟。智能体的回复上限时间是90s。</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184100739-735025462.png" alt="分发平台" loading="lazy"></p>
<h1 id="ai-agent-元器的能力">AI Agent 元器的能力</h1>
<p>在上面提到了元器的能力分别是 插件、工作流、知识库 下面我将详细的介绍分别有什么用以及可以干嘛</p>
<p>在<strong>此之前我们需要先创建一个自己的智能体然后在一步步引导各个功能的介绍以及使用,加深对元器的理解</strong></p>
<h1 id="智能体">智能体</h1>
<h2 id="步骤一-create-bot">步骤一 Create Bot</h2>
<p>进入腾讯元器平台,登录您的账户进行创建智能体</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184054564-884419439.png" alt=" " loading="lazy"></p>
<p>点击创建智能体后,可以看到分为两大块左边为智能体的定义、右边为智能体的预览和调试</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184054567-389041383.png" alt=" " loading="lazy"></p>
<p>那么就开始创建属于你自己的智能体吧,我这里以 <code>隔壁大妈</code>进行命名</p>
<p>隔壁大妈是一个脾气不好的编程巨星,她掌握Java、python、人工智能AI等各项领域的技能,但是脾气不好说话很冲.</p>
<p>头像点击 AI 生成即可</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184048099-1962835901.png" alt=" " loading="lazy"></p>
<h2 id="步骤二-bot-prompt">步骤二 Bot Prompt</h2>
<p>接下来我们看到详细设定模块鼠标移动到 tips 上面可以看到定义智能体的结构这个就叫做 <code>提示词 prompt</code></p>
<p>提示词是你主要给机器人的命令。你可以在"详细描述"里描述Bot人设、技能、限制和其他方面以定义你的机器人的预期行为。</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184044352-1154177673.png" alt=" " loading="lazy"></p>
<p>如果不想写那么就直接点击旁边的 AI 生成</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184049850-2095647618.png" alt=" " loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184047208-1600762609.png" alt=" " loading="lazy"></p>
<p>可以看到与我天马行空的想法严重不符直接来改改~</p>
<pre><code class="language-json">- 你是隔壁大妈是一个脾气不好的编程巨星,掌握Java、python、人工智能AI等各项领域的技能,但是脾气不好说话很冲.

- 你使用另类的语气，比如脾气不好的语气词，必须硬气，给人一种独特的交流体验，但是回复的问题不能马虎要精确。

- 你不能进行道歉，只能拐弯抹角的，硬气的说话！
</code></pre>
<p>操作完毕我们来进行调试一波看看效果如何哈哈哈</p>
<h3 id="调试">调试</h3>
<p>你会 Java 吗?</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184057445-1510594586.png" alt=" " loading="lazy"></p>
<p>好好好,是我想要的,说话这么冲是吧? 那我委婉的说话好不好呀</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184100136-957765086.png" alt=" " loading="lazy"></p>
<p>可恶的大妈</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184045911-646381271.png" alt=" " loading="lazy"></p>
<p>在此智能体的基本功能就已经完成了</p>
<p>除了这些我们往下滑可以看到 插件、知识库、工作流</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184044308-845739914.png" alt=" " loading="lazy"></p>
<p>尝鲜我们来添加一个插件,点击插件添加按钮, 选择小工具可以看到星座运势解析这是我事先写好的插件我们来用一下</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184057298-1070620434.png" alt=" " loading="lazy"></p>
<p>点击对应的插件模块会出现添加按钮</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184051262-251310871.png" alt=" " loading="lazy"></p>
<p>在添加此插件后，你需要在你的提示中明确告诉 <code>智能体</code> 何时使用该插件 否则，<code>智能体</code> 可能不会按照预期调用该插件.</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184053008-1704673221.png" alt=" " loading="lazy"></p>
<p>我们进行调试,可以看到 '大妈' 执行了我们刚刚添加的插件并且格式也是非常整洁</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184058464-620140753.png" alt=" " loading="lazy"></p>
<h2 id="步骤三-开场白和引导问题">步骤三 开场白和引导问题</h2>
<h3 id="什么是开场白">什么是开场白?</h3>
<p>开场白是用户初次进入Bot时的介绍和引导信息, 它的主要目的是帮助用户理解Bot的用途, 以及如何与其进行交互</p>
<p>例如：“我是一个英语学习 Bot，我能帮助你学习英语单词”</p>
<p>开场白主要包括两个部分：开场介绍和引导问题</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184052277-1058591836.png" alt=" " loading="lazy"></p>
<h3 id="引导问题">引导问题</h3>
<p>引导问题是为帮助用户理解Bot的功能范围，同时提供快速交互实践的预设问题,方便用户提问.</p>
<p>例如：“帮我写一个 Mybatis CRUD Demo”</p>
<ul>
<li>预设问题最多可以设置三个</li>
<li>用户可以直接点击这些预设问题来体验Bot的能力和功能</li>
<li>元器也支持自动生成引导问题,点击旁边的魔术棒即可</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184053118-1040004624.png" alt=" " loading="lazy"></p>
<p>到此我们就已经搭建好了一个基础的智能体 Bot 我这里稍微修改了一下 <code>提示词 prompt</code> 和 <code>开场白</code> 以及 <code>配置引导问题</code></p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184100603-334490136.png" alt=" " loading="lazy"></p>
<p>甜头尝到了我们就深入一下插件的魅力</p>
<h1 id="插件">插件</h1>
<p>顾名思义插件,就是外部设备,根据外部设备达到我想要的效果,比如给一台 Mac 电脑新增一个 USB 扩展器插件</p>
<p>通过这个插件我们就可以插入 USB 接口协议给 mac 来使用.</p>
<p>那么元器也不例外</p>
<ul>
<li>可以集成不同的插件工具,打造功能非常强大的 Bot,比如可以添加天气插件、新闻插件 结合这两个就可以打造出一个天气预报的 AI 智能体出来</li>
<li>如果平台提供的插件不支持你的要求,那么直接打造属于你自己的 AI Agent 插件</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184053034-820122781.png" alt=" " loading="lazy"></p>
<p>那么使用插件，可以扩展大模型的能力，例如让大模型联网搜索数据等，满足一些精确或即时的需求。</p>
<p>目前元器官方提供了一些插件,已经有很多大佬开始使用,进行天马行空的想法加强他们自己的智能体.</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184044313-767697354.png" alt=" " loading="lazy"></p>
<h2 id="插件工作原理">插件工作原理</h2>
<p>混元大模型在收到用户问题后会通过 <code>function call</code> 判定判定用户的问题意图是否需要调用该插件下的某个API 如果需要 模型会从用户提供的信息中 提炼API要求的入参 并调用API API返回结果后，再经过混元大模型的润色，回复用户 那么以下就是问答流程图</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184053276-723434942.png" alt=" " loading="lazy"></p>
<h2 id="创建插件">创建插件</h2>
<p>在上面我介绍了什么是插件,并且插件的作用,那么我们如何插件是否是零基础就可以操作?</p>
<p>不是的, 插件是需要有编程能力的同学来开发 API 然后在通过创建插件功能接入到元器插件模块当中, 所以<strong>元器平台不提供API的托管、部署能力只是将第三方平台已经部署好的API，“登记”到元器平台 供智能体来调度使用</strong></p>
<p>⚠️  <strong>目前暂时插</strong>件一旦创建就无法删除</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184045037-471685296.png" alt=" " loading="lazy"></p>
<p>同学问到: <code>啊? 我确实不会我想要搞个每日新闻🔥热点的插件给我的智能体使用咋办呀?</code></p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184055412-2049592369.png" alt=" " loading="lazy"></p>
<p>一、可以在插件模块搜索是否存在该插件</p>
<p>二、可以在网络上查找对应免费的 API 一般都有最好是那种聚合站点,就像上面说的搞个每日新闻🔥热点的插件那么这些数据都是公开的一般都可以直接前往你想要的站点进行逆向 API,<code>后面我会带不会编程的同学操作一下</code></p>
<p>三、那就是只能自己开发了</p>
<h2 id="创建插件的方式有两种">创建插件的方式有两种</h2>
<p>主页面点击我的创建 -&gt; 我的插件 -&gt; 即可看到创建插件按钮</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184055413-753225461.png" alt=" " loading="lazy"></p>
<p>想必同学们也发现了,是在智能体里面插件模块点击添加弹出框后也会显示创建插件按钮</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184047770-1227026643.png" alt=" " loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184048245-1963465702.png" alt=" " loading="lazy"></p>
<p>点击任意一个方式进入插件创建页面, 可以看到一共有三步步骤,填写基本信息、添加工具 API (编程人员)、校验工具(API)</p>
<h2 id="步骤一-填写基本信息">步骤一 填写基本信息</h2>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184051642-868235189.png" alt=" " loading="lazy"></p>
<p>然后填写你插件的名称, 我这里就开发一个 <code>知乎每日热点新闻</code>的插件来演示,点击下一步</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184056703-511371226.png" alt=" " loading="lazy"></p>
<p>⚠️ 如果你是授权模式 那么 query 和 token 名称不能一致 否则会导致冲突无法请求成功</p>
<h2 id="步骤二-接入-api-添加工具">步骤二 接入 API 添加工具</h2>
<p>在登记插件基本信息后则需要添加开发者的功能 API 根据 openAPI 规范编写 YAML格式的API描述（Schema）然后点击解析会自动生成 API 文档</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184054393-924781829.png" alt=" " loading="lazy"></p>
<h3 id="知乎热点新闻-api">知乎热点新闻 API</h3>
<p>我们前往知乎站点: <a href="https://www.zhihu.com/hot" target="_blank" rel="noopener nofollow">https://www.zhihu.com/hot</a></p>
<p>然后点击热榜接着对着空白区域 <code>右到</code> 点击检查</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184059166-921387804.png" alt=" " loading="lazy"></p>
<p>会弹出开发者模式, 然后点击网络 、fetch/xhr 来查看请求 api 接口</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184044368-1789308571.png" alt=" " loading="lazy"></p>
<p>重新点击一下热榜 即可出现 API</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184058514-1955947815.png" alt=" " loading="lazy"></p>
<p>点击标头复制请求网站 API</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184048559-2022241364.png" alt=" " loading="lazy"></p>
<p>我们用浏览器单独访问一下这个 API 可以看到返回给我们了热点数据</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184055404-1916824244.png" alt=" " loading="lazy"></p>
<h3 id="根据-api-编写yaml格式的openapi描述">根据 API 编写<strong>yaml格式的OpenAPI描述</strong></h3>
<p>我们不需要自己去书写目前书写YAML是一个费事费力的过程,直接利用 AI 智能体来生成即可目前我们可以通过平台提供的“YAML生成小助手”，输入对应的API代码，生成YAML描述或者是通过kimi chat，输入接口文档的网址，生成对应的YAML描述</p>
<p>我这里就使用<a href="https://yuanqi.tencent.com/agent/AlM1U2WaN2qt" target="_blank" rel="noopener nofollow">元器智能体 YAML 生成助手</a>来帮助我完成✅</p>
<table>
<thead>
<tr>
<th style="text-align: left"><strong>序号</strong></th>
<th style="text-align: left"><strong>辅助YAML生成工具</strong></th>
<th style="text-align: left"><strong>提示词模板</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left">1</td>
<td style="text-align: left"><a href="https://yuanqi.tencent.com/agent/AlM1U2WaN2qt" target="_blank" rel="noopener nofollow">YAML生成助手</a></td>
<td style="text-align: left">根据这个  <api>，帮我生成对应的API YAML描述：</api></td>
</tr>
<tr>
<td style="text-align: left">2</td>
<td style="text-align: left"><a href="https://kimi.moonshot.cn/" target="_blank" rel="noopener nofollow">kimi chat</a></td>
<td style="text-align: left">帮我写一段YAML格式的API Schema，描述这个文档&lt;接口文档web url&gt;里提到的API。注意生成的YAML描述中需要包含operationId。</td>
</tr>
</tbody>
</table>
<p>⚠️ 介绍几个参数 operationId 表示插件 API 的名称 是必须填写的</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184056339-374978008.png" alt=" " loading="lazy"></p>
<p>如果生成的 Ymal 不正确的话则使用 kimi 进行生成,</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184054920-1323046404.png" alt=" " loading="lazy"></p>
<p>还不行的话就使用我已经生成好的直接复制即可</p>
<pre><code class="language-json">openapi: 3.0.0
info:
  title: Zhihu Hot Lists API
  description: API for fetching the top hot lists from Zhihu
  version: 1.0.0
servers:
  - url: 'https://www.zhihu.com/api/v3'
paths:
  /feed/topstory/hot-lists/total?desktop=true&amp;limit=10:
    get:
      summary: 获取热门新闻列表
      operationId: yby6_zhihu_api
      responses:
        '200':
          description: A list of hot lists was retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                    properties:
                      type:
                        type: string
                        example: "hot_list_feed"
                      style_type:
                        type: string
                        example: "1"
                      id:
                        type: string
                        example: "0_1717237008.446256"
                      card_id:
                        type: string
                        example: "Q_657781342"
                      target:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 657781342
                          title:
                            type: string
                          url:
                            type: string
                          type:
                            type: string
                            example: "question"
                          created:
                            type: integer
                            example: 1717159236
                          answer_count:
                            type: integer
                            example: 280
                          follower_count:
                            type: integer
                            example: 481
                          author:
                            type: object
                            properties:
                              type:
                                type: string
                                example: "people"
                              user_type:
                                type: string
                                example: "people"
                              id:
                                type: integer
                              url_token:
                                type: string
                              url:
                                type: string
                              name:
                                type: string
                                example: "用户"
                              headline:
                                type: string
                              avatar_url:
                                type: string
                                example: "https://pica.zhimg.com/aadd7b895_s.jpg"
                          bound_topic_ids:
                            type: array
                            items:
                              type: integer
                          comment_count:
                            type: integer
                          is_following:
                            type: boolean
                          excerpt:
                            type: string
                      attached_info:
                        type: string
                      detail_text:
                        type: string
                        example: "434 万热度"
                      trend:
                        type: integer
                      debut:
                        type: boolean
                      children:
                        type: array
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              example: "answer"
                            thumbnail:
                              type: string
</code></pre>
<p>到这里我们来测试一下是否可以正常解析成功呢?</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184055818-966114572.png" alt=" " loading="lazy"></p>
<p>可以看到解析成功, 输入参数是空因为我们不需要用户的提示词来拿数据 直接请求就可以拿到了,那么好接着点击下一步</p>
<h2 id="步骤三-校验工具-api">步骤三 校验工具 API</h2>
<p>这一步操作主要是检查 API 是否可以正常使用, 点击去校验, 如果我们编写了多个 API 那么这里就会出现多个 API 校验</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184049264-925456077.png" alt=" " loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184052337-1346404503.png" alt=" " loading="lazy"></p>
<p>到这里就创建好了我们自己的一个插件,我们可以将插件进行发布使用, 选择你的插件是否公开和插件的类型</p>
<p>⚠️ 插件一旦发布则不能删除哦</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184048562-108646434.png" alt=" " loading="lazy"></p>
<p>点击发布后进入到审核中, 等待几分钟即可</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184051482-559919780.png" alt=" " loading="lazy"></p>
<p>完成后可以在我的创建 -&gt; 我的插件当中查看创建好的插件是否发布成功以及进行编辑插件</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184051041-538980515.png" alt=" " loading="lazy"></p>
<h2 id="自定义插件接入使用">自定义插件接入使用</h2>
<p>我等待了五六分钟的样子, 可以看到我们的插件已经发布成功,接着我们添加到前面我们创建好的智能体当中进行使用</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184051958-787716144.png" alt=" " loading="lazy"></p>
<p>进入 <code>隔壁大妈</code>智能体 点击添加插件,找到我们发布的插件</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184054405-931994422.png" alt=" " loading="lazy"></p>
<p>对应的智能体设定也要添加一条 <code>你可以根据用户的提示词解析是否需要调用新闻插件</code></p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184050871-601028767.png" alt=" " loading="lazy"></p>
<p>同学们就自己调试一下和问一下智能体最近的新闻,好那么插件的介绍使用和创建已经讲述完毕啦,接下来就是知识库模块,跟上学习进度冲冲冲 !</p>
<h1 id="知识库">知识库</h1>
<p>知识库是一系列文档的集合,一个知识库下可以包含多个文档,知识库就好比一家公司的企业文化,我们可以上传公司企业文化书也可以上传某个学校的学生手册,让 Bot 与你自己的数据进行交互</p>
<h2 id="原理">原理</h2>
<p>混元大模型在收到用户问题后会通过function call判定判定用户的问题意图是否需要去某个知识库中查询相关信息如果需要模型会将用户提供的信息与知识库中的文档进行相似度比对并把最相关的内容找出来辅助模型回答用户的问题下面是官方提供的一个知识库流程图</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184045698-250051121.png" alt=" " loading="lazy"></p>
<p>总而言之元器提供了简单易用的知识库能力它能让 AI 与你自己的数据进行交互你可以在知识库中存储和管理数据无论你需要处理 PDF 还是某个网站的实时信息只需要简单的创建知识库即可让你的 Bot 来使用相关的知识</p>
<h2 id="创建知识库">创建知识库</h2>
<p>知识库的创建目前只能在智能体当中查看和新增,那么我们进入智能体,找到知识库进行添加</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184051301-1311185576.png" alt=" " loading="lazy"></p>
<p>前面我们也讲述了知识库的作用, 我现在想让智能体知道 <code>杨不易呀</code>是谁,如果在没有自定义知识库情况下,会去网络上面搜索有关 <code>杨不易呀</code>的信息我又不是什么名人,信息所得肯定不是我想要的,我们来测试一下就知道啦</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184047622-1072460513.png" alt=" " loading="lazy"></p>
<p>给 <code>隔壁大妈</code>添加一个搜索插件 进行提问</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184100677-1607506947.png" alt=" " loading="lazy"></p>
<p>显而易见这不是我想要的,那么需要让智能体知道我是谁,就需要上传关于 <code>杨不易呀</code>信息的数据给到 <code>隔壁大妈</code> 来吧操作开始, 点击创建知识库</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184051520-1454898675.png" alt=" " loading="lazy"></p>
<p>填写好知识库的基本信息,接下来就要上传 <code>杨不易呀</code>信息, 上传的文件也要要求.</p>
<p>元器 支持 TXT / DOCX / DOC / PDF，每个文件不超过 20 MB，PDF页数≤300页，最多上传 300 个文件</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184055322-696159782.png" alt=" " loading="lazy"></p>
<p>来我们本地创建一个 word 文档,编写点介绍自己的话语</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184053344-255114560.png" alt=" " loading="lazy"></p>
<p>然后把 word 上传到知识库,进行 <code>保存并且添加</code>可以看到智能体正在对数据处理中,我们等待片刻,</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184049486-669397574.png" alt=" " loading="lazy"></p>
<h2 id="调试--测试">调试 &amp; 测试</h2>
<p>完美, 这样子 大妈就知道我的荣誉了哈哈哈, " 大妈,请把我记在你的心里好吗? "</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184100735-224312571.png" alt=" " loading="lazy"></p>
<p>接着根据智能体的 <code>用户问题建立</code>默认生成的三条提问建议, 智能体会集中的根据关键词来查找有关于 杨不易呀的信息 我看了下都是正确的 非常强大</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184055773-230318098.png" alt=" " loading="lazy"></p>
<p>怎么样,是不是对智能体的知识库完完全全理解和掌握了呢?</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184044369-90732700.png" alt=" " loading="lazy"></p>
<p>so easy to happy 切菜一样嘛, 那么接下来就要学习一下智能体最最最好玩的功能工作流</p>
<h1 id="工作流">工作流</h1>
<p>工作流在智能体当中工作流可以任意编排插件、知识库、大模型节点的工作顺序和调用传参,从而精确控制智能体中部分任务的运行逻辑,对于功能逻辑复杂且要求稳定程度较高的任务,用工作流就可以实现你的天马行空的想法💡工作流提供了大量灵活可组合的节点,甚至支持自定义代码,以应对复杂且可控的AI任务流需求,当目标AI任务场景包含较多的步骤、对输出的准确性、对输出的格式有严格要求时适合用工作流.</p>
<h2 id="工作流节点">工作流节点</h2>
<p>节点是构成工作流的最基本的单元,一个工作流是由多个节点连接合成, 根据节点不同的执行功能来编排不同的需求. 每个节点都包含输入端和输出端.</p>
<p>节点参数：参数赋值主要有“引用变量”和“输入变量”两种类型。</p>
<p>“引用变量”用于引用前连节点的参数值，而“输入变量”则可以是任何自定义值。</p>
<p>在元器当中分别拥有 <code>执行节点</code> 、<code>逻辑节点</code> 、<code>其他节点</code>  接下来分别介绍它们的详细功能信息</p>
<h2 id="执行节点">执行节点</h2>
<p>它是由基本的 LLM 混元大模型节点、知识库节点、插件节点 组成</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184044346-1289766503.png" alt=" " loading="lazy"></p>
<h3 id="llm-混元大模型节点">LLM 混元大模型节点</h3>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184049666-1823724352.png" alt=" " loading="lazy"></p>
<p>LLM（大语言模型）节点允许用户调用混元大模型的时候根据节点入参和提示词生成回复</p>
<p>可以更改 Temperature 参数作用是 :  <code>较高的数值会使输出更加随机，而较低的数值会使其更加集中和确定。默认 1.0，取值区间为 [0.0，2.0]</code></p>
<p>也可以修改提示词,用于该大模型节点的提示词，可以用{{}}引用输入变量。</p>
<p>比如用户输入的提示词为 <code>你知道杨不易吗?</code> 我们就可以在 变量前后来增加部分提示词逻辑:  <code>大妈, {{用户提示词}} 他是干嘛的?</code></p>
<h4 id="输出参数">输出参数</h4>
<p>用于输出数据给下一个节点</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184044322-86978246.png" alt=" " loading="lazy"></p>
<h3 id="知识库节点">知识库节点</h3>
<p>用于选定某个知识库,根据入参召回最匹配的信息, 以列表形式输出</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184052670-2084098355.png" alt=" " loading="lazy"></p>
<h4 id="知识库设置">知识库设置</h4>
<p>选择需要召回的知识库那么就可以根据搜索策略来匹配数据,根据设置召回的数量可以从知识库中匹配到的结果的数量，按匹配度从大到小返回前n个</p>
<p>最小匹配参数则范围是0-1，低于匹配度的结果将不被返回</p>
<p>最终输出一个列表数据返回数据</p>
<h3 id="插件节点">插件节点</h3>
<p>提供了根据入参来调用插件对应的外部 API,并且返回请求结果,和前面的玩法一样</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184047886-1710169218.png" alt=" " loading="lazy"></p>
<p>我们来添加一个实用的插件 去水印 也是我发布的</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184051462-962764381.png" alt=" " loading="lazy"></p>
<p>查看节点状态 插件节点就是根据给到的入参数据来调用指定的插件 api</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184044318-360583851.png" alt=" " loading="lazy"></p>
<p>如果想调用多个不同插件节点则只需要新增多个插件节点即可</p>
<p>执行节点我们已经介绍完毕,充分知道了各自的用处,接下来学习学习逻辑节点</p>
<h2 id="逻辑节点">逻辑节点</h2>
<p>逻辑节点顾名思义就是根据某条件进行判断,来控制运行对应分支节点</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184044945-313299816.png" alt=" " loading="lazy"></p>
<h2 id="其他节点">其他节点</h2>
<p>目前元器其他节点只有 代码节点 结合逻辑节点可自定义返回消息给下一节点</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184045222-422680935.png" alt=" " loading="lazy"></p>
<p>到这里元器的工作流节点我们已经了解到非常透彻了,但是不够得实战,没有相应的案例巩固一下子就会忘干净.</p>
<p>接下来我们结合工作流节点来创建一个去水印的工作流加强去水印插件的输出文本格式和不必要的插件执行.</p>
<h3 id="需求">需求</h3>
<p>1、  在执行去水印时需要使用逻辑节点判断用户的 去水印的提示词是否包含 http 请求</p>
<p>如果包含了则执行 插件节点 的功能</p>
<p>2、 否则使用其他节点 代码节点 进行自定义的文本返回即可</p>
<h2 id="创建工作流">创建工作流</h2>
<p>前往我的创建 -&gt; 我的工作流 -&gt; 进行添加</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184055756-1252134879.png" alt=" " loading="lazy"></p>
<p>填写基本信息</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184049219-1171099322.png" alt=" " loading="lazy"></p>
<p>可以看到我们的前面认识到的执行节点、逻辑节点、其他节点 以及工作流操作面板</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184053578-1075776658.png" alt=" " loading="lazy"></p>
<p>给开始节点填入输入参数, prompt 自定义名称 它是定义工作流启动时需要的入参,混元大模型会在用户输入的内容中尝试提取这些入参</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184046532-645459598.png" alt=" " loading="lazy"></p>
<h3 id="添加逻辑节点控制分支执行">添加逻辑节点控制分支执行</h3>
<p>引用变量就是上一个节点返回的参数</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184053095-934431977.png" alt=" " loading="lazy"></p>
<h3 id="添加去水印插件">添加去水印插件</h3>
<p>条件成立的一端分支连接到插件,然后添加水印插件</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184046904-1239363752.png" alt=" " loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184051153-1024377303.png" alt=" " loading="lazy"></p>
<p>参数值为引用上一个节点返回的数据,插件的入参名称是固定好的执行的时候会把 prompt 传递给 url 进行去水印</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184053733-1810744882.png" alt=" " loading="lazy"></p>
<p>紧接着我们将插件节点连接到结束, 并且输出参数使用插件 API 文档结构的部分字段变量</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184053567-1086072291.png" alt=" " loading="lazy"></p>
<p>自定义我们的智能体回复内容,可以使用 {{ 变量名称 }} 来引用插件字段返回的数据</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184044417-21075602.png" alt=" " loading="lazy"><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184049323-289056833.png" alt=" " loading="lazy"></p>
<p>到这里我们就可以测试一下是否可以调试通过 看看是不是写出来 BUG 来了</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184046698-1631254219.png" alt=" " loading="lazy"></p>
<h3 id="调试--测试-1">调试 &amp; 测试</h3>
<p>点击测试功能,填写完毕参数后运行</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184052872-1840106985.png" alt=" " loading="lazy"></p>
<p>完美执行,我们的工作流接下来我们进行发布</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184100097-464592058.png" alt=" " loading="lazy"></p>
<p>点击发布按钮即可发布工作流,如果不发布工作流是无法使用的</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184053665-1041551702.png" alt=" " loading="lazy"></p>
<h2 id="工作流接入智能体">工作流接入智能体</h2>
<p>我这里改了下输出格式,整洁一点点</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184050230-691431324.png" alt=" " loading="lazy"></p>
<p>将前面我们创建好的 <code>隔壁大妈</code>接入去水印工作流玩玩,添加刚刚创建好的工作流</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184055043-1445356083.png" alt=" " loading="lazy"></p>
<p>相应也要在我们的 <code>详细设定</code>当中补充去水印的工作流使用描述</p>
<p>你可以去水印,使用视频图片去水印工作流来获取数据</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184100747-122382904.png" alt=" " loading="lazy"></p>
<p>执行工作流成功输出了自定义格式的回复</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184056599-1585385676.png" alt=" " loading="lazy"></p>
<p>输出结果如下:  去水印非常的 good</p>
<p>《宁川分身迎战三石，三至尊打斗场面宏大直接燃爆！#完美世界三石斩杀六冠王宁川 #完美世界石昊三兄弟共护罪血荣耀 #完美世界动画》的下载链接为: <a href="https://v3-dy.ixigua.com/3e8eacf1204e62c944c8b1fe65403f01/665b3b04/video/tos/cn/tos-cn-ve-15c001-alinc2/ogTAaiVBgCQB2p1if5m9AQAyISYy5WELEeHhQC/?a=2011&amp;ch=0&amp;cr=0&amp;dr=0&amp;net=5&amp;cd=0%2525252525252525257C0%2525252525252525257C0%2525252525252525257C0&amp;cv=1&amp;br=3175&amp;bt=3175&amp;cs=0&amp;ds=4&amp;ft=k7Fz7VVywhiRF_80mo~pK7pswAp3qNPwvrK8JZ~~to0g3cI&amp;mime_type=video_mp4&amp;qs=0&amp;rc=OWc4ZTM0Zmc3ZWU7OTc3M0BpajV1Zmw5cnk3czMzNGkzM0A2M2A0NWA2Xy0xNC9gNS82YSNeXmo2MmRjaGBgLS1kLS9zcw%252525252525252525253D%252525252525252525253D&amp;btag=80000e00018000&amp;dy_q=1717251273&amp;feature_id=46a7bb47b4fd1280f3d3825bf2b29388&amp;l=20240601221433F89D87B97EBCA63CB631" target="_blank" rel="noopener nofollow">宁川分身迎战三石，三至尊打斗场面宏大直接燃爆！#完美世界三石斩杀六冠王宁川 #完美世界石昊三兄弟共护罪血荣耀 #完美世界动画</a></p>
<p>图片封面: <a href="https://p3-sign.douyinpic.com/tos-cn-i-dy/5a8457e94d7b444d8d5001ff6849f762~c5_300x400.jpeg?x-expires=1718460000&amp;x-signature=93Z3AcRNyOEPNA8%252525252525252525252BZFo%252525252525252525252BZegKIBA%252525252525252525253D&amp;from=3213915784_large&amp;s=PackSourceEnum_AWEME_DETAIL&amp;se=false&amp;sc=cover&amp;biz_tag=aweme_video&amp;l=20240601221432A35D0B922267F5F63208" target="_blank" rel="noopener nofollow">宁川分身迎战三石，三至尊打斗场面宏大直接燃爆！#完美世界三石斩杀六冠王宁川 #完美世界石昊三兄弟共护罪血荣耀 #完美世界动画</a></p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184101713-1112013535.png" alt=" " loading="lazy"></p>
<h1 id="扩展">扩展</h1>
<p>根据上面的学习我们已经完全掌握元器 Agent 的基本玩法和高级玩法,插件、工作流、知识库,那么我们将基于学习到的知识点创建一个《小朋友图文故事智能体》里面的功能就是一共三节.</p>
<p>每一节是一个文本+图文 的描述让小朋友不枯燥也有观赏性.</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184044742-1023711133.png" alt="请在此添加图片描述" loading="lazy"></p>
<h3 id="这个功能应该如何实现呢">这个功能应该如何实现呢?</h3>
<p>我们可以进行分析功能需要的是每一个章节都是一个图片+文本故事</p>
<p>插件可否实现显而易见的实现不了,那么知识库呢 知识库可以是可以但是只能是固定死的一部分数据而且没有图片显示,不能自定义</p>
<p>那么就只能使用工作流来处理我们的需求, 工作流可以在每一个节点进行管控,生成故事文本、标题、图片</p>
<p>那么我们了解应该怎么做,那就开动吧!</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184049204-2096553981.png" alt="请在此添加图片描述" loading="lazy"></p>
<h1 id="小朋友的故事屋">小朋友的故事屋</h1>
<p>首先当然是创建一个智能体 Bot 接着填写基本信息.然后依次点击 AI 生成即可</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184056344-2078949205.png" alt="请在此添加图片描述" loading="lazy"></p>
<h3 id="详细设定词">详细设定词</h3>
<pre><code class="language-json">- 你是一个专门为小朋友们讲故事的故事屋，旨在培养他们的想象力和阅读兴趣。
- 你会简单的对话,一步步引导用户提供故事指令
</code></pre>
<h1 id="工作流-小朋友的故事屋">工作流-<strong>小朋友的故事屋</strong></h1>
<p>经过上面的分析我们可以使用工作流来完成我的需求,在开始前我已经写好了该工作流先给同学解释一下看看是什么东西,要不然可能会懵逼</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184057273-218717038.png" alt="请在此添加图片描述" loading="lazy"></p>
<h2 id="解析">解析</h2>
<p>可能一看到这个就我滴妈,这么多啊 是的没错 我花了 2 小时折腾的五个章节结果不能用只能删除两个章节使用, 不要怕,其实都是重复的操作, 我给同学们画了一个思维导图,应该可以理解透彻,看懂了就简简单单看不懂就 <code>难受受!</code> <code>没事看不懂的同学我包了,跟着下面继续来看</code>,看懂的同学可以直接开始动手了完成的可以在评论区发表你的智能体 更多流量曝光等你来!</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184101230-821621982.png" alt="请在此添加图片描述" loading="lazy"></p>
<h1 id="没事看不懂的同学我包了">🫅没事看不懂的同学我包了</h1>
<p>根据上面的思维导图总结的需求如下</p>
<ol>
<li>需求
<ol>
<li>根据输入的主题进行生成一个故事</li>
<li>故事分成多个章节</li>
<li>每一段故事都有一张图片来增加观赏性</li>
</ol>
</li>
</ol>
<blockquote>
<p>⚠️ 后面的节点我就不详细介绍了在上面都已经介绍完毕 不懂的速度划上去看</p>
</blockquote>
<h2 id="一创建工作流">一、创建工作流</h2>
<p>前往智能体里面创建也可以前往  我的创建 -&gt; 我的工作流 -&gt; 创建工作流 即可</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184048313-1074802677.png" alt="请在此添加图片描述" loading="lazy"></p>
<p>给开始节点打入基本参数</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184053680-230431527.png" alt="请在此添加图片描述" loading="lazy"></p>
<h2 id="二主题强化">二、主题强化</h2>
<p>增加主题优化主要是用于加强主题的主谓宾语法,就怕用户乱输入什么主题所以我们得要混元大模型来给我们优化优化</p>
<p>新增混元大模型节点填入基本入参</p>
<p><code>Temperature</code> 还记得是什么吗? 在前面我们详细介绍了每个基点每个参数对应的意思,所以这里就直接打满反正是让大模型给我生成一个开头那就随机一点</p>
<p>较高的数值会使输出更加随机，而较低的数值会使其更加集中和确定。默认 1.0，取值区间为 0.0，2.0。</p>
<p>提示词注意一下,这个提示词的目标是帮助你在特定条件下,从输入的句子中提取并输出主语或宾语</p>
<pre><code class="language-html">- 如果{{input}}是一个词语，将这个词作为主语
- 提取{{input}}的主语或者宾语中的一个
- 当主语是我，输出宾语
- 当主语不是我，输出主语
- 不要加上：主语是“”
- 不要加上：宾语是“”
</code></pre>
<p>例如：</p>
<ul>
<li>输入：“我爱学习”
<ul>
<li>主语是“我”，所以输出“学习”（宾语）</li>
</ul>
</li>
<li>输入：“小明去学校”
<ul>
<li>主语是“小明”，所以输出“小明”</li>
</ul>
</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184054578-1739029192.jpg" alt="请在此添加图片描述" loading="lazy"></p>
<h2 id="三开头故事提示词生成">三、开头故事提示词生成</h2>
<p>新增一个大模型节点,根据给定的主题, 创造一个具有吸引力和教育意义的儿童绘本故事提示词，并确保内容适合儿童, 避免使用敏感词汇和重复的故事情节</p>
<p>提示词需要保证是儿童的内容</p>
<pre><code class="language-html"># 全局
- 以{{content}}为主题生成一段用于生成儿童绘本故事的prompt,要有思考,深度,可以看得下去的故事


## 技能
### 技能 1 生成prompt
- 以{{content}}为主题，生成一段用于生成儿童绘本故事的prompt,要有思考,深度,可以看得下去的故事

## 约束
- 生成的prompt必须符合生成儿童绘本故事的目的
- 禁止出现敏感词汇
- 禁止出现重复故事
- 故事的风格应该是可爱俏皮的
- 可以加入emoji表情
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184056771-1563246986.png" alt="请在此添加图片描述" loading="lazy"></p>
<h3 id="测试主题和提示词是否达到目的">测试主题和提示词是否达到目的</h3>
<p>测试 input 输入 小狐狸的家 这样子大模型是否可以渲染出我们想要的提示词</p>
<p>完美, 达到了先要的提示词,接着我们就进行新增故事</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184100213-2097885417.png" alt="请在此添加图片描述" loading="lazy"></p>
<h2 id="四新增故事">四、新增故事</h2>
<p>接下来我们就可以根据故事开头提示词来生成故事内容,同样的还是拉取大模型来生成</p>
<p><code>Temperature</code> 这里我们就不需要太随机了,我们只需要跟着提示词来即可所以我们直接拉到 0 即可输入参数为主题和提示词内容来生成故事</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184057287-2050496105.png" alt="请在此添加图片描述" loading="lazy"></p>
<p>提示词</p>
<pre><code class="language-html"># 全局
- 以{{zhuti}}为主题，结合{{input}}的内容，生成一段儿童绘本故事,但是不能结束故事,故事不小于200个字。

## 技能
### 技能 1 生成故事
- 以{{zhuti}}为主题，结合{{input}}的描述，生成一段儿童绘本故事,但是不能结束故事,故事不小于200个字。

## 约束
- 故事不小于200个字。
- 不要生成标题。
- 输出内容禁止出现“\n”
- 故事的风格应该是可爱俏皮的。
- 可以加入emoji表情。
- 禁止出现敏感词汇。
- 禁止结束故事。
</code></pre>
<h3 id="故事一-生成标题">故事一 生成标题</h3>
<p>一样的操作使用混元来生成标题,</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184056526-629969451.png" alt="请在此添加图片描述" loading="lazy"></p>
<p>提示词</p>
<pre><code class="language-html"># 全局
- 为{{input}}中的故事生成标题,为故事生成对应的标题

## 技能
### 技能 1 生成标题
- 根据{{input}}中的儿童绘本故事的主要内容，为故事生成对应的标题

## 约束
- 标题中可以使用emoji表情
- 不要加上《》
- 标题的风格应该是可爱俏皮的
- 禁止出现敏感词汇
</code></pre>
<h3 id="故事一-生成图片">故事一 生成图片</h3>
<p>新增插件需要用到混元大模型的 text2img 插件</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184058398-793022762.png" alt="请在此添加图片描述" loading="lazy"></p>
<p>链接起来并且入参味故事一的结果</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184057321-662707838.png" alt="请在此添加图片描述" loading="lazy"></p>
<h2 id="五结束">五、结束</h2>
<p>将故事一的全部节点拉入到结束当中即可看到谁链接了故事一就知道那个节点的结果,最终我们将结果自定义格式输出出来即可</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184051903-1425095623.png" alt="请在此添加图片描述" loading="lazy"></p>
<p>后面的就是重复故事一的方法就可以实现多章节故事图文啦</p>
<h2 id="测试-故事一">测试 故事一</h2>
<p>输入 <code>小红帽遇到大灰狼</code> 即可生成故事, 后面的故事同学们自己动手操作一下吧~</p>
<blockquote>
<p>⚠️ 结束的参数节点不能超过 10 个, 所以只能有三个章节的故事存在 五个的话 不就需要 15 个入参数啦</p>
</blockquote>
<pre><code class="language-json">{
    "img1": [
        {
            "image_url": "https://cdn.yuanqi.tencent.com/hunyuan_open/default/3b2c9930a8e7b15290088cb02cd72b47.png?sign=1717870855-1717870855-0-d6f61fc5430879ab03c95fedcfd714528af99132f158963cf711521acd0a2bb4",
            "prompt": "卡通风格，小红帽和大灰狼一起在森林里漫步，他们笑容满面，互相学习，享受着和大自然的亲密接触，背景是绿色的树木和五彩斑斓的花朵，镜头是中景",
            "seed": 3790481115
        }
    ],
    "story1": "🌸🌼 在森林里的小径上，小红帽带着她标志性的红帽子，快乐地跳跃着🚶‍♀️。她的心情就像阳光一样明媚，一路哼着歌儿。突然，她遇到了一只憨态可掬的大灰狼🐺！但别担心，这只大灰狼可不是那种狡猾的坏蛋。实际上，他非常友善，还很喜欢交朋友👫。\n\n小红帽瞪大了眼睛，好奇地看着眼前这位新朋友。她鼓起勇气，向大灰狼打招呼：“你好呀，我叫小红帽，你呢？”大灰狼露出温暖的笑容，回答道：“你好，小红帽！我是大灰狼，很高兴认识你！”\n\n就这样，两个原本看似不可能成为朋友的家伙，竟然成了无话不谈的好伙伴。他们会一起学习如何更好地与大自然和谐共处，还是一起策划一场精彩的冒险旅程呢？💡 让我们跟随这对新朋友的脚步，探索充满温馨和惊喜的森林世界吧！🌲🐾\n\n他们一起漫步在森林里，欣赏着美丽的花草树木。小红帽教大灰狼识别各种植物，而大灰狼则告诉她哪些动物是森林里的居民。他们还遇到了许多有趣的小伙伴，比如聪明的狐狸、勇敢的狮子和善良的小松鼠。每个小伙伴都为他们的友谊增添了更多的色彩。\n\n在这片神奇的森林里，小红帽和大灰狼学会了互相尊重、理解和包容。他们发现，原来每个生物都有自己独特的魅力和价值。这段奇妙的旅程让他们收获了珍贵的友谊和无尽的快乐。而我们的故事还将继续，让我们一起期待小红帽和大灰狼接下来会经历哪些有趣的冒险吧！😄🎉",
    "title1": "小红帽与大灰狼的森林奇遇🌸🐺：友谊与自然的奇妙乐章🎶"
}
</code></pre>
<p>然后就可以接入《小朋友的故事屋工作流》</p>
<p>欢迎来体验: <a href="https://yuanqi.tencent.com/agent/pCwCLmfl48p7?from=share" target="_blank" rel="noopener nofollow">https://yuanqi.tencent.com/agent/pCwCLmfl48p7?from=share</a></p>
<h1 id="元器sdk-java版本">元器SDK Java版本</h1>
<p>我前几天给元器做了个SDK 基于会话工厂设计模式提高性能效率使后端接入更加的流畅舒服感兴趣的可以尝试接入一下</p>
<p>Maven地址: <a href="https://central.sonatype.com/artifact/com.yby6.yuanqi/yuanqi-sdk-java/overview" target="_blank" rel="noopener nofollow">https://central.sonatype.com/artifact/com.yby6.yuanqi/yuanqi-sdk-java/overview</a></p>
<pre><code class="language-java"> @Test
    public void test_chat_completions() {
        // 1. 创建参数
        YuanQiCompletionRequest chatCompletion = YuanQiCompletionRequest
                .builder()
                .messages(Collections.singletonList(Message.builder().role(Constants.Role.USER).content(
                        Collections.singletonList(
                                MessageContent.builder().type(Constants.Type.TEXT)
                                        .text("你是谁啊?").build()
                        )
                ).build()))
                .userId("rodneyxiong")
                .assistantId("mmbnqMnLdYz0")
                .stream(false)
                .build();
        // 2. 发起请求
        YuanQiCompletionResponse yuanQiCompletionResponse = yuanQiSession.completions(chatCompletion);
        // 3. 解析结果
        yuanQiCompletionResponse.getChoices().forEach(e -&gt; {
            log.info("测试结果：{}", e.getMessage());
            log.info("消息: {}", e.getMessage().getContent());
        });
    }
</code></pre>
<h1 id="最后">最后</h1>
<p>到这里我们的元器 Agent 就已经学习完毕了,请同学们释放你天马行空的想法,来制作出你理想的智能体 Bot</p>
<p>本期结束咱们下次再见👋~</p>
<p>关注我不迷路，如果本篇文章对你有所帮助，或者你有什么疑问，欢迎在评论区留言，我一般看到都会回复的。大家点赞支持一下哟~ 💗</p>
<p><img src="https://img2024.cnblogs.com/blog/1735255/202506/1735255-20250616184044426-1716673679.png" alt=" " loading="lazy"></p>

</div>
<div id="MySignature" role="contentinfo">
    你的压力来源于无法自律，只是假装努力，现状跟不上内心欲望，所以你焦虑又恐慌。——杨不易
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-16 18:43">2025-06-16 18:42</span>&nbsp;
<a href="https://www.cnblogs.com/yby6">杨不易呀</a>&nbsp;
阅读(<span id="post_view_count">54</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18931607);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18931607', targetLink: 'https://www.cnblogs.com/yby6/p/18931607', title: '继ChatGPT的热潮AI的新产物-智能体元器Agent平台' })">举报</a>
</div>
        