
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xiao987334176/p/18822444" title="发布于 2025-04-12 19:00">
    <span role="heading" aria-level="2">FastMCP实践开发应用</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>一、概述</h1>
<div class="paragraph">FastMCP是一个基于Python的高级框架，用于构建MCP（Model Context Protocol）服务器。它能够帮助开发者以最小的代码量创建MCP服务器，从而让AI助手能够更好地与本地工具进行交互。</div>
<div class="paragraph">github官方地址：<a href="https://github.com/jlowin/fastmcp" target="_blank" rel="noopener nofollow">https://github.com/jlowin/fastmcp</a></div>
<div class="paragraph">&nbsp;</div>
<div class="paragraph">以下是关于FastMCP的详细介绍<span class="rag-tag text" data-v-3a5379c4="" data-index="0,1" data-site-name="53ai.com">：</span></div>
<h2>1. 定义与功能</h2>
<ul>
<li>
<div class="paragraph"><span>定义：FastMCP是一个用于构建MCP服务器的Python框架，它为开发者提供了一种简单优雅的方式来创建MCP服务器，使AI助手能够访问本地工具和资源。</span></div>
</li>
<li>
<div class="paragraph">核心功能：</div>
<ul>
<li>
<div class="paragraph"><span>工具（Tools）：类似于API的POST端点，支持执行计算和产生副作用，可以处理复杂的输入输出。</span></div>
</li>
<li>
<div class="paragraph"><span>资源（Resources）：类似于API的GET端点，用于加载信息到LLM的上下文，支持静态和动态资源。</span></div>
</li>
<li>
<div class="paragraph"><span>提示模板（Prompts）：定义可重用的交互模式，支持结构化的消息序列，帮助规范AI交互行为。</span></div>
</li>
<li>
<div class="paragraph"><span>图片处理：内置图片数据处理，自动处理格式转换，支持工具和资源中使用。</span></div>
</li>
</ul>
</li>
</ul>
<h2>2. 使用场景</h2>
<ul>
<li>
<div class="paragraph"><span>开发AI助手工具集：为Claude等AI助手提供本地功能扩展，构建特定领域的工具链。</span></div>
</li>
<li>
<div class="paragraph"><span>数据库交互：安全地暴露数据库查询功能，提供schema信息给AI参考。</span></div>
</li>
<li>
<div class="paragraph"><span>文件处理：读取和处理本地文件，处理图片等多媒体内容。</span></div>
</li>
<li>
<div class="paragraph"><span>API集成：包装现有API为AI可用的工具，提供统一的访问接口。</span></div>
</li>
</ul>
<p>&nbsp;</p>
<h1><span>二、安装使用</span></h1>
<h2><span>安装</span></h2>
<p><span>安装很简单，一条命令搞定</span></p>
<div class="cnblogs_code">
<pre>pip <span style="color: rgba(0, 0, 255, 1)">install</span> fastmcp</pre>
</div>
<h2>使用</h2>
<p>官方示例：</p>
<p>server.py</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">from fastmcp import FastMCP

mcp </span>= FastMCP(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Demo 🚀</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

@mcp.tool()
def add(a: </span><span style="color: rgba(0, 0, 255, 1)">int</span>, b: <span style="color: rgba(0, 0, 255, 1)">int</span>) -&gt; <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)">:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">Add two numbers</span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    return a </span>+<span style="color: rgba(0, 0, 0, 1)"> b

</span><span style="color: rgba(0, 0, 255, 1)">if</span> __name__ == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">__main__</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
    mcp.run()</span></pre>
</div>
<p><span style="color: rgba(255, 0, 0, 1)"><strong>注意：直接运行server.py，并不是sse方式。</strong></span></p>
<p>&nbsp;</p>
<p>如果我们想用sse方式，还需要更改代码</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> fastmcp <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> FastMCP

mcp </span>= FastMCP(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Demo 🚀</span><span style="color: rgba(128, 0, 0, 1)">"</span>,port=9000<span style="color: rgba(0, 0, 0, 1)">)

@mcp.tool()
</span><span style="color: rgba(0, 0, 255, 1)">def</span> add(a: int, b: int) -&gt;<span style="color: rgba(0, 0, 0, 1)"> int:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">Add two numbers</span><span style="color: rgba(128, 0, 0, 1)">"""</span>
    <span style="color: rgba(0, 0, 255, 1)">return</span> a +<span style="color: rgba(0, 0, 0, 1)"> b

</span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(128, 0, 128, 1)">__name__</span> == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">__main__</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
    mcp.run(transport</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">sse</span><span style="color: rgba(128, 0, 0, 1)">'</span>)</pre>
</div>
<p>再次运行，就是sse方式了。</p>
<p>打开浏览器，访问：http://127.0.0.1:9000/sse</p>
<p><span>效果如下：</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202504/1341090-20250412185148630-1034435939.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h1>三、开发mysql8应用</h1>
<p>在上一篇文章中，已经写了MCP的mysql8应用，但是并不是使用FastMCP框架开发的。我把那段代码改造一下即可</p>
<h2>&nbsp;编写代码</h2>
<p>.env文件内容如下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> MySQL数据库配置</span>
MYSQL_HOST=192.168.20.128<span style="color: rgba(0, 0, 0, 1)">
MYSQL_PORT</span>=3306<span style="color: rgba(0, 0, 0, 1)">
MYSQL_USER</span>=<span style="color: rgba(0, 0, 0, 1)">root
MYSQL_PASSWORD</span>=abcd@1234<span style="color: rgba(0, 0, 0, 1)">
MYSQL_DATABASE</span>=test</pre>
</div>
<p>&nbsp;</p>
<p>server.py</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> fastmcp <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> FastMCP
</span><span style="color: rgba(0, 0, 255, 1)">from</span> mysql.connector <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> connect, Error
</span><span style="color: rgba(0, 0, 255, 1)">from</span> dotenv <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> load_dotenv
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> os

mcp </span>= FastMCP(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">operateMysql</span><span style="color: rgba(128, 0, 0, 1)">"</span>, port=9000<span style="color: rgba(0, 0, 0, 1)">)

</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> @mcp.tool()</span><span style="color: rgba(0, 128, 0, 1)">
#</span><span style="color: rgba(0, 128, 0, 1)"> def add(a: int, b: int) -&gt; int:</span><span style="color: rgba(0, 128, 0, 1)">
#</span><span style="color: rgba(0, 128, 0, 1)">     """Add two numbers"""</span><span style="color: rgba(0, 128, 0, 1)">
#</span><span style="color: rgba(0, 128, 0, 1)">     return a + b</span>


<span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> get_db_config():
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">从环境变量获取数据库配置信息

    返回:
        dict: 包含数据库连接所需的配置信息
        - host: 数据库主机地址
        - port: 数据库端口
        - user: 数据库用户名
        - password: 数据库密码
        - database: 数据库名称

    异常:
        ValueError: 当必需的配置信息缺失时抛出
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span>

    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 加载.env文件</span>
<span style="color: rgba(0, 0, 0, 1)">    load_dotenv()

    config </span>=<span style="color: rgba(0, 0, 0, 1)"> {
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">host</span><span style="color: rgba(128, 0, 0, 1)">"</span>: os.getenv(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MYSQL_HOST</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">localhost</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">),
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">port</span><span style="color: rgba(128, 0, 0, 1)">"</span>: int(os.getenv(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MYSQL_PORT</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">3306</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)),
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">user</span><span style="color: rgba(128, 0, 0, 1)">"</span>: os.getenv(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MYSQL_USER</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">),
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">password</span><span style="color: rgba(128, 0, 0, 1)">"</span>: os.getenv(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MYSQL_PASSWORD</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">),
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">database</span><span style="color: rgba(128, 0, 0, 1)">"</span>: os.getenv(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MYSQL_DATABASE</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">),
    }
    </span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(config)
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(0, 0, 255, 1)">not</span> all([config[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">user</span><span style="color: rgba(128, 0, 0, 1)">"</span>], config[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">password</span><span style="color: rgba(128, 0, 0, 1)">"</span>], config[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">database</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]]):
        </span><span style="color: rgba(0, 0, 255, 1)">raise</span> ValueError(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">缺少必需的数据库配置</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> config


@mcp.tool()
</span><span style="color: rgba(0, 0, 255, 1)">def</span> execute_sql(query: str) -&gt;<span style="color: rgba(0, 0, 0, 1)"> list:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">执行SQL查询语句

    参数:
        query (str): 要执行的SQL语句，支持多条语句以分号分隔

    返回:
        list: 包含查询结果的TextContent列表
        - 对于SELECT查询：返回CSV格式的结果，包含列名和数据
        - 对于SHOW TABLES：返回数据库中的所有表名
        - 对于其他查询：返回执行状态和影响行数
        - 多条语句的结果以"---"分隔

    异常:
        Error: 当数据库连接或查询执行失败时抛出
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    config </span>=<span style="color: rgba(0, 0, 0, 1)"> get_db_config()
    </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">:
        with connect(</span>**<span style="color: rgba(0, 0, 0, 1)">config) as conn:
            with conn.cursor() as cursor:
                statements </span>= [stmt.strip() <span style="color: rgba(0, 0, 255, 1)">for</span> stmt <span style="color: rgba(0, 0, 255, 1)">in</span> query.split(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">;</span><span style="color: rgba(128, 0, 0, 1)">"</span>) <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> stmt.strip()]
                results </span>=<span style="color: rgba(0, 0, 0, 1)"> []

                </span><span style="color: rgba(0, 0, 255, 1)">for</span> statement <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> statements:
                    </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">:
                        cursor.execute(statement)

                        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 检查语句是否返回了结果集 (SELECT, SHOW, EXPLAIN, etc.)</span>
                        <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> cursor.description:
                            columns </span>= [desc[0] <span style="color: rgba(0, 0, 255, 1)">for</span> desc <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> cursor.description]
                            rows </span>=<span style="color: rgba(0, 0, 0, 1)"> cursor.fetchall()

                            </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 将每一行的数据转换为字符串，特殊处理None值</span>
                            formatted_rows =<span style="color: rgba(0, 0, 0, 1)"> []
                            </span><span style="color: rgba(0, 0, 255, 1)">for</span> row <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> rows:
                                formatted_row </span>=<span style="color: rgba(0, 0, 0, 1)"> [
                                    </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">NULL</span><span style="color: rgba(128, 0, 0, 1)">"</span> <span style="color: rgba(0, 0, 255, 1)">if</span> value <span style="color: rgba(0, 0, 255, 1)">is</span> None <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> str(value)
                                    </span><span style="color: rgba(0, 0, 255, 1)">for</span> value <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> row
                                ]
                                formatted_rows.append(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">,</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">.join(formatted_row))

                            </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 将列名和数据合并为CSV格式</span>
<span style="color: rgba(0, 0, 0, 1)">                            results.append(
                                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\n</span><span style="color: rgba(128, 0, 0, 1)">"</span>.join([<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">,</span><span style="color: rgba(128, 0, 0, 1)">"</span>.join(columns)] +<span style="color: rgba(0, 0, 0, 1)"> formatted_rows)
                            )

                        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 如果语句没有返回结果集 (INSERT, UPDATE, DELETE, etc.)</span>
                        <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
                            conn.commit()  </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 只有在非查询语句时才提交</span>
                            results.append(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">查询执行成功。影响行数: {cursor.rowcount}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

                    </span><span style="color: rgba(0, 0, 255, 1)">except</span><span style="color: rgba(0, 0, 0, 1)"> Error as stmt_error:
                        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 单条语句执行出错时，记录错误并继续执行</span>
<span style="color: rgba(0, 0, 0, 1)">                        results.append(
                            f</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">执行语句 '{statement}' 出错: {str(stmt_error)}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
                        )
                        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 可以在这里选择是否继续执行后续语句，目前是继续</span>

                <span style="color: rgba(0, 0, 255, 1)">return</span> [<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\n---\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">.join(results)]

    </span><span style="color: rgba(0, 0, 255, 1)">except</span><span style="color: rgba(0, 0, 0, 1)"> Error as e:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">执行SQL '{query}' 时出错: {e}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> [f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">执行查询时出错: {str(e)}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]


@mcp.tool()
</span><span style="color: rgba(0, 0, 255, 1)">def</span> get_table_name(text: str) -&gt;<span style="color: rgba(0, 0, 0, 1)"> list:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">根据表的中文注释搜索数据库中的表名

    参数:
        text (str): 要搜索的表中文注释关键词

    返回:
        list: 包含查询结果的TextContent列表
        - 返回匹配的表名、数据库名和表注释信息
        - 结果以CSV格式返回，包含列名和数据
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    config </span>=<span style="color: rgba(0, 0, 0, 1)"> get_db_config()
    sql </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">SELECT TABLE_SCHEMA, TABLE_NAME, TABLE_COMMENT </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    sql </span>+= f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">FROM information_schema.TABLES WHERE TABLE_SCHEMA = '{config['database']}' AND TABLE_COMMENT LIKE '%{text}%';</span><span style="color: rgba(128, 0, 0, 1)">"</span>
    <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> execute_sql(sql)


@mcp.tool()
</span><span style="color: rgba(0, 0, 255, 1)">def</span> get_table_desc(text: str) -&gt;<span style="color: rgba(0, 0, 0, 1)"> list:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">获取指定表的字段结构信息

    参数:
        text (str): 要查询的表名，多个表名以逗号分隔

    返回:
        list: 包含查询结果的列表
        - 返回表的字段名、字段注释等信息
        - 结果按表名和字段顺序排序
        - 结果以CSV格式返回，包含列名和数据
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    config </span>=<span style="color: rgba(0, 0, 0, 1)"> get_db_config()
    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 将输入的表名按逗号分割成列表</span>
    table_names = [name.strip() <span style="color: rgba(0, 0, 255, 1)">for</span> name <span style="color: rgba(0, 0, 255, 1)">in</span> text.split(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">,</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 构建IN条件</span>
    table_condition = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">','</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">.join(table_names)
    sql </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">SELECT TABLE_NAME, COLUMN_NAME, COLUMN_COMMENT </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    sql </span>+=<span style="color: rgba(0, 0, 0, 1)"> (
        f</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = '{config['database']}' </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    )
    sql </span>+= f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">AND TABLE_NAME IN ('{table_condition}') ORDER BY TABLE_NAME, ORDINAL_POSITION;</span><span style="color: rgba(128, 0, 0, 1)">"</span>
    <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> execute_sql(sql)


@mcp.tool()
</span><span style="color: rgba(0, 0, 255, 1)">def</span> get_lock_tables() -&gt;<span style="color: rgba(0, 0, 0, 1)"> list:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
    获取当前mysql服务器InnoDB 的行级锁

    返回:
        list: 包含查询结果的TextContent列表
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    sql </span>= <span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">SELECT
    p2.`HOST` AS 被阻塞方host,
    p2.`USER` AS 被阻塞方用户,
    r.trx_id AS 被阻塞方事务id,
    r.trx_mysql_thread_id AS 被阻塞方线程号,
    TIMESTAMPDIFF(SECOND, r.trx_wait_started, CURRENT_TIMESTAMP) AS 等待时间,
    r.trx_query AS 被阻塞的查询,
    l.OBJECT_NAME AS 阻塞方锁住的表,
    m.LOCK_MODE AS 被阻塞方的锁模式,
    m.LOCK_TYPE AS '被阻塞方的锁类型(表锁还是行锁)',
    m.INDEX_NAME AS 被阻塞方锁住的索引,
    m.OBJECT_SCHEMA AS 被阻塞方锁对象的数据库名,
    m.OBJECT_NAME AS 被阻塞方锁对象的表名,
    m.LOCK_DATA AS 被阻塞方事务锁定记录的主键值,
    p.`HOST` AS 阻塞方主机,
    p.`USER` AS 阻塞方用户,
    b.trx_id AS 阻塞方事务id,
    b.trx_mysql_thread_id AS 阻塞方线程号,
    b.trx_query AS 阻塞方查询,
    l.LOCK_MODE AS 阻塞方的锁模式,
    l.LOCK_TYPE AS '阻塞方的锁类型(表锁还是行锁)',
    l.INDEX_NAME AS 阻塞方锁住的索引,
    l.OBJECT_SCHEMA AS 阻塞方锁对象的数据库名,
    l.OBJECT_NAME AS 阻塞方锁对象的表名,
    l.LOCK_DATA AS 阻塞方事务锁定记录的主键值,
    IF(p.COMMAND = 'Sleep', CONCAT(p.TIME, ' 秒'), 0) AS 阻塞方事务空闲的时间
    FROM performance_schema.data_lock_waits w
    INNER JOIN performance_schema.data_locks l ON w.BLOCKING_ENGINE_LOCK_ID = l.ENGINE_LOCK_ID
    INNER JOIN performance_schema.data_locks m ON w.REQUESTING_ENGINE_LOCK_ID = m.ENGINE_LOCK_ID
    INNER JOIN information_schema.INNODB_TRX b ON b.trx_id = w.BLOCKING_ENGINE_TRANSACTION_ID
    INNER JOIN information_schema.INNODB_TRX r ON r.trx_id = w.REQUESTING_ENGINE_TRANSACTION_ID
    INNER JOIN information_schema.PROCESSLIST p ON p.ID = b.trx_mysql_thread_id
    INNER JOIN information_schema.PROCESSLIST p2 ON p2.ID = r.trx_mysql_thread_id
    ORDER BY 等待时间 DESC;</span><span style="color: rgba(128, 0, 0, 1)">"""</span>

    <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> execute_sql(sql)


</span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(128, 0, 128, 1)">__name__</span> == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">__main__</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
    mcp.run(transport</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">sse</span><span style="color: rgba(128, 0, 0, 1)">"</span>)</pre>
</div>
<p>对比了一下代码，比上次写的少了89行，说明框架使用，还是比较简洁的。</p>
<p>&nbsp;</p>
<p>启动应用</p>
<div class="cnblogs_code">
<pre>python server.py</pre>
</div>
<p>输出：</p>
<div class="cnblogs_code">
<pre>INFO:     Started server process [<span style="color: rgba(128, 0, 128, 1)">19624</span><span style="color: rgba(0, 0, 0, 1)">]
INFO:     Waiting </span><span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http:</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">0.0.0.0:9000 (Press CTRL+C to quit)</span></pre>
</div>
<h2>&nbsp;测试应用</h2>
<p>使用Cherry Studio客户端进行测试</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202504/1341090-20250412185901625-919137748.png" alt="" loading="lazy"></p>
<p>&nbsp;效果和上篇文章，是一样的。</p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.05863246180902778" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-12 19:02">2025-04-12 19:00</span>&nbsp;
<a href="https://www.cnblogs.com/xiao987334176">肖祥</a>&nbsp;
阅读(<span id="post_view_count">6</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18822444);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18822444', targetLink: 'https://www.cnblogs.com/xiao987334176/p/18822444', title: 'FastMCP实践开发应用' })">举报</a>
</div>
        