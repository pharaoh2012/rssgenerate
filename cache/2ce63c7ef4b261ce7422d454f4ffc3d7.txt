
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/linx/p/18872226" title="发布于 2025-05-12 10:21">
    <span role="heading" aria-level="2">Web前端入门第 50 问：CSS 内容溢出怎么处理？</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>溢出：盒模型装不下内容的时候，超出盒子大小的内容就称之为内容溢出，这里的内容又分为盒模型和文本，所以 CSS 在处理溢出时候也分为文本和盒模型两种情况。</p>
<p>正常情况内容溢出应该换行自动撑开盒子大小，但某些情况下我们盒子大小可能是固定的，不允许自动撑开盒子大小，这种情况就需要处理溢出情况。</p>
<h2 id="盒子溢出">盒子溢出</h2>
<p>盒子溢出一般就三种方式：</p>
<p>1、溢出内容直接隐藏。<br>
2、溢出显示滚动条。<br>
3、默认情况，溢出内容显示。</p>
<p>在处理盒子溢出时，必须要祭出 <code>overflow</code> 属性。</p>
<h3 id="overflow-属性值">overflow 属性值</h3>
<p>1、<code>visible</code>：默认值，内容超出盒子大小，会显示在盒子外面。<br>
2、<code>hidden</code>：内容超出盒子大小，会直接消失不见。<br>
3、<code>scroll</code>：不管内容是否超出盒子大小，都显示滚动条（注意看下图中3的横向滚动条）。<br>
4、<code>auto</code>：内容超出盒子大小时才显示滚动条，内容没超出盒子大小时，不显示滚动条。<br>
5、<code>clip</code>：类似于 hidden，但元素不再支持通过 JS 设置 scrollLeft 等属性的值或 scrollTo() 方法滚动到指定位置。</p>
<p><code>overflow</code> 还可拆分成 <code>overflow-x</code> 和 <code>overflow-y</code>，分别控制水平方向和垂直方向的滚动条，其值于与 <code>overflow</code> 一致。</p>
<p>示例：</p>
<pre><code class="language-html">&lt;div class="container"&gt;
  &lt;div class="box"&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;/div&gt;
  &lt;div class="box"&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;/div&gt;
  &lt;div class="box"&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;/div&gt;
  &lt;div class="box"&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;/div&gt;
  &lt;div class="box"&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;p&gt;一行文本&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
.box {
  margin: 20px 0;
  width: 400px;
  height: 280px;
  border: 2px solid rgba(255, 71, 87,0.3);
  position: relative;
}
.box:nth-child(2) {
  overflow: hidden;
}
.box:nth-child(3) {
  overflow: scroll;
}
.box:nth-child(4) {
  overflow: auto;
}
.box:nth-child(5) {
  overflow: clip;
}
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202505/596097-20250512101923521-505483204.png" alt="" width="900" loading="lazy"></p>
<h2 id="文本溢出">文本溢出</h2>
<p>看一张图，正常情况如果盒子足够大，那么文本换行之后还是会在盒子里面。但如果盒子高度不够，内容就跑到盒子外面去了。或者是内容中有超长的英文字符、连续不断的数字，浏览器也不会自动换行。</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202505/596097-20250512101927761-1997355401.png" alt="" width="900" loading="lazy"></p>
<h3 id="文本溢出几种处理方式">文本溢出几种处理方式</h3>
<p>1、溢出内容直接隐藏。<br>
2、文本溢出显示省略号，鼠标放上文字时候显示全部内容。<br>
3、借助 JS 能力，让内容滚动显示（CSS 也能做到，不过内容衔接不够丝滑）。<br>
4、长英文/数字换行显示。</p>
<p><strong>溢出隐藏：</strong></p>
<p>祭出 <code>overflow</code> 属性，分分钟让溢出的内容变成消失的它~~</p>
<p><strong>省略号显示：</strong></p>
<p>溢出省略号又分为两种：单行省略号所有浏览器都支持，多行省略号仅 webkit 内核浏览器支持（如果是做移动端开发，那么放心使用吧）。</p>
<p>鼠标放上显示全部内容需使用 HTML 的 title 属性值。</p>
<pre><code class="language-css">/* 单行 */
.ell {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
/* 多行 */
.ell-multi {
  overflow: hidden;
  display: -webkit-box;
  text-overflow: ellipsis;
  box-orient: vertical;
  -webkit-box-orient: vertical;
  -moz-box-orient: vertical;
  -o-box-orient: vertical;
  -ms-box-orient: vertical;
  line-clamp: 2; /* 超出2行显示省略号 */
  -webkit-line-clamp: 2; /* 超出2行显示省略号 */
}
</code></pre>
<p><strong>超长英文换行：</strong></p>
<pre><code class="language-css">.en {
  /* 英文字符超长自动换行 */
  word-break: break-all;
  word-wrap: break-word;
}
</code></pre>
<p>示例：</p>
<pre><code class="language-html">&lt;div class="container"&gt;
  &lt;div class="box"&gt;溢出：盒模型装不下内容的时候，超出盒子大小的内容就称之为内容溢出，这里的内容又分为盒模型和文本，所以 CSS 在处理溢出时候也分为文本和盒模型两种情况。&lt;/div&gt;
  &lt;div class="box"&gt;溢出：盒模型装不下内容的时候，超出盒子大小的内容就称之为内容溢出，这里的内容又分为盒模型和文本，所以 CSS 在处理溢出时候也分为文本和盒模型两种情况。&lt;/div&gt;
  &lt;div class="box" title="这里是鼠标放上要显示的内容"&gt;溢出：盒模型装不下内容的时候，超出盒子大小的内容就称之为内容溢出，这里的内容又分为盒模型和文本，所以 CSS 在处理溢出时候也分为文本和盒模型两种情况。&lt;/div&gt;
  &lt;div class="box" title="这里是鼠标放上要显示的内容"&gt;溢出：盒模型装不下内容的时候，超出盒子大小的内容就称之为内容溢出，这里的内容又分为盒模型和文本，所以 CSS 在处理溢出时候也分为文本和盒模型两种情况。&lt;/div&gt;
  &lt;div class="box"&gt;
    http://gips2.baidu.com/it/u=3944689179,983354166&amp;fm=3028&amp;app=3028&amp;f=JPEG&amp;fmt=auto?w=1024&amp;h=1024&lt;br&gt;
    158688888888888888888888888888888888888885555555555555
  &lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
.box {
  margin: 20px 0;
  width: 400px;
  height: 280px;
  border: 2px solid rgba(255, 71, 87,0.3);
  position: relative;
}
.box:nth-child(2) {
  height: 40px;
  overflow: hidden;
}
.box:nth-child(3) {
  height: 40px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.box:nth-child(4) {
  height: 40px;
  overflow: hidden;
  display: -webkit-box;
  text-overflow: ellipsis;
  box-orient: vertical;
  -webkit-box-orient: vertical;
  -moz-box-orient: vertical;
  -o-box-orient: vertical;
  -ms-box-orient: vertical;
  line-clamp: 2; /* 超出2行显示省略号 */
  -webkit-line-clamp: 2; /* 超出2行显示省略号 */
}
.box:nth-child(5) {
  /* 英文字符超长自动换行 */
  word-break: break-all;
  word-wrap: break-word;
}
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202505/596097-20250512101939030-915797928.png" alt="" width="900" loading="lazy"></p>
<h2 id="其他相关属性">其他相关属性</h2>
<h3 id="overflow-anchor">overflow-anchor</h3>
<p>如果内容有新增删除时候，浏览器是记录滚动条位置还是记录内容位置。</p>
<p><code>auto</code>: 会记录内容位置，让内容在滚动容器中不变。<br>
<code>none</code>: 会记录滚动条位置，让滚动条位置在滚动容器中不变。</p>
<h3 id="overflow-wrap">overflow-wrap</h3>
<p>是 <code>word-wrap</code> 的别名，作用和 <code>word-wrap</code> 一样，都用于超长英文和 URL 换行。</p>
<p><code>normal</code>: 行只能在正常的单词断点（例如两个单词之间的空格）处换行。<br>
<code>anywhere</code> 和 <code>break-word</code>: 行可以在任何地方换行。区别在于 <code>anywhere</code> 在计算最小内容内在大小时，会考虑由单词换行引入的软换行机会。</p>
<h3 id="hyphens">hyphens</h3>
<p>告知浏览器在换行时如何使用连字符连接单词。</p>
<p><code>none</code>: 即便单词内有建议换行点也不会在那里换行。只会在空白符处换行。<br>
<code>manual</code>: 只有当单词内存在建议换行点时，才会在该位置断开单词并使用连字符换行。<br>
<code>auto</code>: 浏览器会根据当前语言环境选择合适的连字符。</p>
<h3 id="scrollbar-">scrollbar-*</h3>
<p>用于控制滚动条相关样式，比如滑块颜色，滚动条大小等。</p>
<h3 id="scroll-">scroll-*</h3>
<p>可使用 CSS 实现幻灯片翻页效果，使用较少，还是没有 JS 实现幻灯片那种丝滑感觉~~</p>
<p>常用属性 <code>scroll-behavior</code> 用于控制页面滚动时候是否有动画效果：<code>smooth</code> 使用动画平滑滚动，<code>auto</code> 无动画滚动。</p>
<h2 id="写在最后">写在最后</h2>
<p>前端在做页面开发的时候，必须要考虑各种内容超长的情况，多思考一下内容极限情况，就会少很多 bug ！！</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>&nbsp;</p>
<p style="font-size: 18px;font-weight: bold;">文章收录于微信公众号【<span style="color:rgb(255, 71, 87)">前端路引</span>】，欢迎 <span style="color:#4ec259">微信扫一扫</span> 查看更多文章。</p>
<p>
  <img style="max-width: 320px;" src="https://images.cnblogs.com/cnblogs_com/linx/2447020/o_250228035031_%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png">
</p>
<p>本文来自博客园，作者：<a href="https://www.cnblogs.com/linx/" target="_blank">前端路引</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/linx/p/18872226" target="_blank">https://www.cnblogs.com/linx/p/18872226</a></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.16875592715972224" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-12 10:21">2025-05-12 10:21</span>&nbsp;
<a href="https://www.cnblogs.com/linx">前端路引</a>&nbsp;
Views(<span id="post_view_count">0</span>)&nbsp;
Comments(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18872226);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18872226', targetLink: 'https://www.cnblogs.com/linx/p/18872226', title: 'Web前端入门第 50 问：CSS 内容溢出怎么处理？' })">举报</a>
</div>
	