
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/saltymilk/p/19013086" title="发布于 2025-08-04 18:33">
    <span role="heading" aria-level="2">C++ 模板参数推导问题小记</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        一个简单的模板参数推导问题，AI 却相继扑街，来一看究竟吧～
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<div class="top-link"><a title="原文链接" href="https://www.cnblogs.com/saltymilk/p/19013086" target="_blank" rel="noopener">↑↑↑↑↑↑↑↑</a></div>
<h1>问题代码</h1>
<p>最近遇到一个模板参数推导的问题，代码如下：</p>
<details open="">
<summary>代码</summary>
<pre><code>
template&lt;typename T&gt;
using scalar = std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;, T&gt;;
template&lt;typename T&gt;
void foo(scalar&lt;T&gt; val)
{
  ...
}
foo(5);
</code></pre>
</details>
<p>这是我突发奇想写出来的，模板别名 scalar 限制函数参数为数值类型，可以在多处复用，这个代码无法通过编译，编译器提示没有匹配的函数调用。</p>
<p>代码很简单，看起来也没什么不妥，为什么出错了？在我询问了几个常用的 AI 编程助手没有得到满意的解答后（AI 的回答放在文章最后一节），我查阅了一些资料终于弄清了原因。</p>
<h1>问题分析</h1>
<p>在<a href="https://en.cppreference.com/w/cpp/language/template_argument_deduction.html" target="_blank" rel="noopener nofollow">正常的模板实例化过程</a>中，编译器结合模板形参模式和实例化时提供的参数类型，确定一个或一组模板实参类型，将这些实参替换到形参后能够形成与实例化参数相匹配的参数列表。</p>
<p>在 foo(5) 这一调用中，形参是 scalar&lt;T&gt;, 实例化参数是 int 类型，编译器需要确定一个类型 T，使得scalar&lt;T&gt; 匹配 int。</p>
<p>我们来理一下这个过程：</p>
<div class="image">
<img src="https://img2024.cnblogs.com/blog/3635299/202507/3635299-20250730182453716-500451831.webp" alt="deduct">
</div>
<p>我们会说，这不是一眼就能看出 T 就是 int 嘛，<code>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value, T&gt;::type</code>成功实例化的结果就是 T 本身。但是站在编译器的角度来看，可不能这样下定论，有些情况下，这部分可能并不是一个可以反推出固定类型的模板，举一个最简单的例子：</p>
<details open="">
<summary>代码</summary>
<pre><code>
template&lt;typename T&gt;
struct wrapper
{
  using type = int;
};
template&lt;typename T&gt;
using scalar_confused = typename wrapper&lt;T&gt;::type;
template&lt;typename T&gt;
void foo_confused(scalar_confused&lt;T&gt; val)
{
  ...
}
foo_confused(5);
</code></pre>
</details>
<p>这个模板 wrapper 无论用什么类型实例化都能取到 int，也就是说在反推 T 时无法确定一个唯一的类型，这对于编译器来说是无法处理的，于是它实例化不出任何 foo_confused 的实例。</p>
<p>其实 C++ 标准已经对这类问题作出了说明，官方的命名是非推导上下文（non-deduced context）：</p>
<div>
<img src="https://img2024.cnblogs.com/blog/3635299/202508/3635299-20250804151453579-2045945335.webp" alt="non_deduced context">
</div>
<p>我们代码的问题就是上图指出的这种情况，如果模板参数只出现在嵌套名称说明符内（即 :: 符号左边的部分），编译器将不会尝试从实例化参数中推导该模板参数，只能使用已经推导出的或显式指定的参数类型。</p>
<p>StackOverflow 上这篇文章（<a href="https://stackoverflow.com/questions/25245453/what-is-a-non-deduced-context" target="_blank" rel="noopener nofollow">What is a non deduced context?</a>）还有它提到的一些链接把这个概念讲的很清楚。</p>
<p>如果把 scalar 直接展开到使用位置，我们的代码等价于：</p>
<details open="">
<summary>代码</summary>
<pre><code>
template&lt;typename T&gt;
void foo(typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value, T&gt;::type val)
{
  ...
}
</code></pre>
</details>
<p>这样看来问题就清晰了，我们拐了一个弯创造了一个非推导上下文。编译器在解析到这一步时，就已经拒绝后续的推导了，后面我们关于反推的分析实际都没有发生。</p>
<h1>如何解决</h1>
<p>问题找到了，那么应该如何解决呢？把推导移到模板参数列表里面，让它在模板参数替换时先推导出来，后面再引用行不行：</p>
<details open="">
<summary>代码</summary>
<pre><code>
template&lt;typename T, typename S = std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;, T&gt;&gt;
using scalar = S;
</code></pre>
</details>
<p>可惜还是不行，而且增加了一层间接，编译器仍旧会失败在相同的位置：</p>
<div>
<img src="https://img2024.cnblogs.com/blog/3635299/202507/3635299-20250731215745106-887771522.webp" alt="pre_deduce">
</div>
<p>其实解决方法很简单，别名模板只将 scalar&lt;T&gt; 展开为 T，限制条件独立出来作为一个模板参数用于排除不满足条件的实例化类型：</p>
<details open="">
<summary>代码</summary>
<pre><code>
template&lt;typename T, typename = std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;&gt;
using scalar = T;
template&lt;typename T&gt;
void foo(scalar&lt;T&gt; val)
{
  ...
}
foo(5);
</code></pre>
</details>
<p>现在调用 foo(5) 时，模板参数推导过程变为：</p>
<div>
<img src="https://img2024.cnblogs.com/blog/3635299/202507/3635299-20250731105903486-361584353.webp" alt="guided_deduce">
</div>
<p>现在的逻辑变为，任何 scalar&lt;T&gt; 都是 T，但是只有当 T 是算术类型时，scalar&lt;T&gt; 才有效。</p>
<p>有人可能会问，为什么要编写一个这样的模板，而不是直接限制 foo 的参数类型：</p>
<details open="">
<summary>代码</summary>
<pre><code>
template&lt;typename T, typename = std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;&gt;
void foo(T val)
{
  ...
}
</code></pre>
</details>
<p>原因前面已经说过，为了复用，scalar&lt;T&gt; 比那一长串检测更简洁。这也是 C++20 concept 的低级实现版本：</p>
<details open="">
<summary>代码</summary>
<pre><code>
template&lt;typename T&gt;
concept scalar = std::is_arithmetic_v&lt;T&gt;;
template&lt;scalar S&gt;
void foo(S val)
{
  ...
}
</code></pre>
</details>
<h1>其他考量</h1>
<p>我在另一篇笔记 <a href="https://www.cnblogs.com/saltymilk/p/18855428" target="_blank" rel="noopener">限制模板实参类型</a> 中提到过，使用静态断言，可在发生编译错误时提供可读性更高的错误提示，我们的这个例子恰好很符合这一情况：</p>
<details open="">
<summary>代码</summary>
<pre><code>
template&lt;typename T&gt;
struct arithmetic_guard
{
  static_assert(std::is_arithmetic_v&lt;T&gt;, "instantiation requires arithmetic type");<br>
  using type = T;
}
template&lt;typename T, typename = typename arithmetic_guard&lt;T&gt;::type&gt;
using scalar = T;
</code></pre>
</details>
<p>改造之后的 scalar 模板如果使用非算术类型进行实例化，就会在编译时指出需要算术类型。</p>
<p>但是静态断言版本存在一个缺点，就是和 SFINAE 不兼容，假如我们想使用 scalar 来编写一个这样的模板：</p>
<details open="">
<summary>代码</summary>
<pre><code>
template&lt;typename T&gt;
auto selected_type_impl(int) -&gt; decltype(std::declval&lt;scalar&lt;T&gt;&gt;(), 0.0);
template&lt;typename&gt;
int selected_type_impl(...);
template&lt;typename T&gt;
using selected_type = decltype(selected_type_impl&lt;T&gt;(0));
</code></pre>
</details>
<p>如果 scalar 使用静态断言版本实现，那么我们使用非算术类型实例化 selected_type 时，得到的不是一个 int 类型，而是编译错误。因为 SFINAE 的发生时机是在模板参数替换阶段，将判断从模板参数列表移入 static_assert 内的后果就是任何 selected_type_impl 版本都会进行实例化而不会被静默移除，不符合条件的版本将在这一过程中抛出错误。在实际编码时，可根据具体需求选择合适的实现版本。</p>
<h1>一些想法</h1>
<p>C++ 语言在不断尝试简化模板元编程，C++26 会将静态反射加入语言标准，届时程序的元信息可以直接获取，而不是通过编写七弯八绕的模板来“套出”这些信息。</p>
<p>但是复杂性不是模板元编程的缺陷，相反它能容纳更多的可能性。优秀的模板库在缺乏编译器支持的年代解决问题的思路，很多令人拍案叫绝，成为经典用法甚至推动了语言标准的发展，为更高阶的功能实现奠定基础。</p>
<p>研究并掌握这些复杂巧妙的实现，运用它们在现实问题之前逢山开路遇水搭桥，不断磨炼我们的思维，而不是对它们望而却步。这样在面对语言标准提供的新特性时，我们才能敏锐察觉到它们的设计意图，善于恰当地加以运用，而不是浅尝辄止。</p>
<h1>问题总结</h1>
<p>思绪飘忽说了一些废话，回到代码的问题上，其实是自己对模板推导规则了解太浅，臆造出一个看似可行的实现，一厢情愿地认为编译器会如此工作。以后还须多多看书和实践，增加知识储备。</p>
<h1>AI 有什么表现</h1>
<p>出于好奇，我拿这个问题问 AI，看它们能否分析出来，以下是问题的结果。</p>
<p><a href="https://chat.deepseek.com/" target="_blank" rel="noopener nofollow">DeepSeek</a> 的推理能力比较不错，而且完全免费，使用它的深度思考模式提问，得到的结论是两个调用都没有问题：</p>
<div>
<img src="https://img2024.cnblogs.com/blog/3635299/202508/3635299-20250804175626492-1219784757.webp" alt="deepseek">
</div>
<p>微软 Edge 自带的免费版 <a href="https://copilot.microsoft.com/chats" target="_blank" rel="noopener nofollow">Copilot</a> 作为日常代码问题咨询以及闲聊对象很方便，ThinkDeeper 模式下，它很确定两种都能正确编译：</p>
<div>
<img src="https://img2024.cnblogs.com/blog/3635299/202508/3635299-20250801161612071-1554475669.webp" alt="bing">
</div>
<p><a href="https://claude.ai" target="_blank" rel="noopener nofollow">Claude</a> 生成代码的能力非常强，广受好评，使用它的 concise 模式回答这个问题，它认为两个都不能通过编译：</p>
<div>
<img src="https://img2024.cnblogs.com/blog/3635299/202508/3635299-20250801161740313-259306738.webp" alt="claude">
</div>
<p>号称地表最强的 <a href="https://grok.com/" target="_blank" rel="noopener nofollow">Grok</a> 经过仔细分析后，也没能得出正确的结论：</p>
<div>
<img src="https://img2024.cnblogs.com/blog/3635299/202508/3635299-20250804172536793-637183567.webp" alt="grok">
</div>
<p>这三个都没有完全分析正确，这让我有一点意外。清除聊天上下文后拿相同的问题再提问，它们每次几乎都会给出不一样的结论，偶尔能正确地预测。持续聊天并引导它们分析问题，它们中很少能够准确说出问题出在非推导上下文这个点上。</p>
<p>这很难让人完全放心的将代码完全交由 AI 编写，目前来看，使用它们咨询一些编码问题，从中得到启发并亲自确认或者深入研究才是比较稳妥的做法。</p>
</div>
<div id="MySignature" role="contentinfo">
    <div style="background-color:#f9f9f9; margin-left:-5px; padding-left:10px; border-left:4px solid rgba(100, 100, 100, 0.2);">
本文来自博客园，作者：<a href="https://www.cnblogs.com/saltymilk/" target="_blank">saltymilk</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/saltymilk/p/19013086" target="_blank">https://www.cnblogs.com/saltymilk/p/19013086</a>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.17708333333333334" data-date-updated="2025-08-04 22:48">2025-08-04 18:33</span>&nbsp;
<a href="https://www.cnblogs.com/saltymilk">saltymilk</a>&nbsp;
阅读(<span id="post_view_count">48</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19013086);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19013086', targetLink: 'https://www.cnblogs.com/saltymilk/p/19013086', title: 'C++ 模板参数推导问题小记' })">举报</a>
</div>
        