
<table cellspacing="0" cellpadding="0"><tbody><tr><td class="t_f" id="postmessage_52890472">
<div class="parsedown-markdown"><p>好的，以下是使用 Cloudflare Workers 的详细介绍，从概念到部署，希望能帮助你入门：</p>
<p><strong>关于 Cloudflare Workers</strong><br>
上期我已经介绍和对比了 Workers，没有看过的可以返回上期看一下。<br>
传送门：<a href="https://www.52pojie.cn/thread-2023556-1-1.html" target="_blank" rel="noopener noreferrer nofollow">https://www.52pojie.cn/thread-2023556-1-1.html</a></p>
<p><strong>准备工作</strong></p>
<ol>
<li>
<p><strong>Cloudflare 账户：</strong> 你需要一个 Cloudflare 账户。注册较为简单，不再过多赘述。<br>
<a rel="nofollow noopener" href="https://dash.cloudflare.com/sign-up" target="_blank">https://dash.cloudflare.com/sign-up</a></p>
</li>
<li>
<p><strong>一个域名：</strong> 在Worker开发中，cloudflare分配的免费域名在国内不可以使用，你必须有一个域名。<del>除非你在国外。</del> 如果你没有域名，推荐去<a rel="nofollow noopener" href="https://spaceship.com" target="_blank">https://spaceship.com</a>买一个域名。输入一个6位你可以记住的数字加.xyz。每年不到5人民币。<br>
<img src="https://gitcode.net/BOB20091009/picture/-/raw/master/cloudflare/workers/speedtest.png" alt="免费域名的测速" target="_blank" rel="noopener noreferrer nofollow"></p>
</li>
<li>
<p><strong>Node.js 和 npm（非必须，但推荐）：</strong> 安装 Node.js 和 npm（Node 包管理器）。</p>
<ul>
<li>1 前往 Node.js 官网 <a rel="nofollow noopener" href="https://nodejs.org/zh-cn" target="_blank">https://nodejs.org/zh-cn</a><br>
<img src="https://gitcode.net/BOB20091009/picture/-/raw/master/cloudflare/nodejs/1.png" alt="Node.js 官网" target="_blank" rel="noopener noreferrer nofollow"></li>
<li>2 双击运行安装包，一直点 Next，第二步需要勾选同意协议。</li>
<li>按 <code>WIN+R</code> 键，打开“运行”对话框，输入 <code>cmd</code> ，按回车键。在命令提示符中输入 ：
<pre><code class="language-bash">node -v
npm -v</code></pre>
<p>出现版本号，证明安装成功：</p>
<pre><code class="language-bash">C:\Users\User&gt;node -v
v22.14.0
C:\Users\User&gt;npm -v
11.3.0</code></pre></li>
</ul>
</li>
<li>
<p><strong><code>wrangler</code> CLI（非必须，但推荐）：</strong> Cloudflare 官方提供的命令行工具，用于开发、测试和部署 Workers。 使用以下命令安装:</p>
<pre><code class="language-bash">npm install -g @cloudflare/wrangler</code></pre>
<p>在 cmd 中输入：</p>
<pre><code class="language-bash">wrangler -v</code></pre>
<p>出现版本号，证明安装成功：</p>
<pre><code class="language-bash"> ⛅️ wrangler 4.12.0</code></pre>
<p>注意：如果出现以下内容则证明你已经安装过 wrangler ,你需要卸载，并再次安装。</p>
<pre><code class="language-bash">C:\Users\User&gt;npm install -g @cloudflare/wrangler
npm error code EEXIST
npm error path C:\Users\User\AppData\Roaming\npm\wrangler
npm error EEXIST: file already exists
npm error File exists: C:\Users\User\AppData\Roaming\npm\wrangler
npm error Remove the existing file and try again, or run npm
npm error with --force to overwrite files recklessly.
npm error A complete log of this run can be found in: C:\Users\User\AppData\Local\npm-cache\_logs\2025-04-18T12_56_53_179Z-debug-0.log</code></pre>
<p>卸载命令：</p>
<pre><code class="language-bash">npm uninstall -g @cloudflare/wrangler</code></pre>
<p>卸载完成后，再次尝试安装。</p>
</li>
</ol>
<p><strong>开发步骤：</strong><br>
请再次确认你有一个域名，并成功托管到cloudflare上，否则你将不能访问你的Workers。</p>
<ol>
<li>
<p>点击左侧的 <code>Workers 和 Pages</code><br>
<img src="https://gitcode.net/BOB20091009/picture/-/raw/master/cloudflare/pages/1.png" alt="点击左侧的 Workers 和 Pages" target="_blank" rel="noopener noreferrer nofollow"></p>
</li>
<li>
<p>点击 <code>创建</code><br>
<img src="https://gitcode.net/BOB20091009/picture/-/raw/master/cloudflare/pages/2.png" alt="点击创建" target="_blank" rel="noopener noreferrer nofollow"></p>
</li>
<li>
<p>点击 <code>Hello World</code><br>
<img src="https://gitcode.net/BOB20091009/picture/-/raw/master/cloudflare/workers/1.png" alt="点击 `Hello World`" target="_blank" rel="noopener noreferrer nofollow"></p>
</li>
<li>
<p>你可以修改一下项目名，之后滑到底下，点击 <code>部署</code>。<br>
<img src="https://gitcode.net/BOB20091009/picture/-/raw/master/cloudflare/workers/2.png" alt="修改项目名，点击 `部署`" target="_blank" rel="noopener noreferrer nofollow"></p>
</li>
<li>
<p>部署完成<br>
大概率，你点击这个链接是无法访问的。<br>
<img src="https://gitcode.net/BOB20091009/picture/-/raw/master/cloudflare/workers/3.png" alt="部署完成" target="_blank" rel="noopener noreferrer nofollow"></p>
</li>
<li>
<p>你可以点击 <code>编辑代码</code> ，来编辑你的代码（不推荐，除非你的项目较为简单，不需要用到数据库，只是简单的网络转发）</p>
</li>
<li>
<p>点击 <code>继续处理项目</code><br>
<img src="https://gitcode.net/BOB20091009/picture/-/raw/master/cloudflare/workers/3.png" alt="点击 `继续处理项目`" target="_blank" rel="noopener noreferrer nofollow"></p>
</li>
<li>
<p>点击 <code>设置</code>，然后点击 域和路由选项卡中的<code>添加</code>按钮。<br>
<img src="https://gitcode.net/BOB20091009/picture/-/raw/master/cloudflare/workers/4.png" alt="点击 `继续处理项目`" target="_blank" rel="noopener noreferrer nofollow"></p>
</li>
<li>
<p>点击 <code>自定义域</code><br>
<img src="https://gitcode.net/BOB20091009/picture/-/raw/master/cloudflare/workers/5.png" alt="点击 `自定义域`" target="_blank" rel="noopener noreferrer nofollow"></p>
</li>
<li>
<p>输入你的域。注意这里必须要是在你的cloudflare账号上托管的域名才可以，不可以是CNAME解析。并点击 <code>添加域</code><br>
<img src="https://gitcode.net/BOB20091009/picture/-/raw/master/cloudflare/workers/6.png" alt="输入你的域" target="_blank" rel="noopener noreferrer nofollow"></p>
</li>
<li>
<p>访问你的自定义域，就是workers的内容了。<br>
由于仅在cloudflare上可以开发的内容比较少，更多还是要使用 wrangler。这里不细讲在线编辑了。如果有这方面的需求，请在评论区留言，如果有需求的人比较多，我会补充上去。</p>
</li>
<li>
<p>以下为进阶部分，部分简单的操作我将不重复教了（比如打开CMD）。你需要完成 准备工作 中的第3 4 步。<br>
登录 Cloudflare 账户:<br>
在CMD中输入：</p>
<pre><code class="language-bash">wrangler login</code></pre>
<p>这将在浏览器中打开 Cloudflare 登录页面，点击<code>Allow</code>，授权 <code>wrangler</code> 访问你的账户。<br>
<img src="https://gitcode.net/BOB20091009/picture/-/raw/master/cloudflare/workers/7.png" alt="点击 `Allow`" target="_blank" rel="noopener noreferrer nofollow"><br>
这样就是登录成功，你可以关闭这个标签页了：<br>
<img src="https://gitcode.net/BOB20091009/picture/-/raw/master/cloudflare/workers/8.png" alt="登录成功" target="_blank" rel="noopener noreferrer nofollow"><br>
你的CMD中也会同步显示 <code>Successfully logged in.</code></p>
</li>
<li>
<p><strong>创建 Worker 项目:</strong><br>
如果你是第一次使用，推荐在workers界面创建新项目。<br>
如果你需要其他配置，那么你就需要在CMD创建项目。<br>
在CMD创建项目的的另一个的好处是，在后续你不需要手动创建文件，在你的文件夹中包含了所有wrangler配置好的文件。</p>
<pre><code class="language-bash">wrangler init my-worker
cd my-worker</code></pre>
<p>这会创建一个名为 <code>my-worker</code> 的新目录，并初始化一个 Worker 项目。</p>
<p>当出现类似的提示，输入<code>y</code>，并按回车</p>
<pre><code class="language-bash">Need to install the following packages:
create-cloudflare@2.44.1
Ok to proceed? (y)</code></pre>
<p><code>wrangler init</code>&nbsp;&nbsp;会提示你选择一个模板，可以选择 <code>"hello-world"</code>&nbsp;&nbsp;或者其他合适的模板.键盘上下键切换，回车确定，一般直接用 Hello World Example，就可以<br>
<img src="https://gitcode.net/BOB20091009/picture/-/raw/master/cloudflare/workers/9.png" alt="选择模板" target="_blank" rel="noopener noreferrer nofollow"><br>
如果选择 <code>"hello-world"</code> , 则会生成 <code>wrangler.toml</code>, <code>index.js</code>,&nbsp;&nbsp;和一个 <code>.git</code> 目录 (如果你的系统支持).<br>
这里直接按回车。<br>
<img src="https://gitcode.net/BOB20091009/picture/-/raw/master/cloudflare/workers/10.png" alt="按回车" target="_blank" rel="noopener noreferrer nofollow"><br>
这里继续按回车。<br>
<img src="https://gitcode.net/BOB20091009/picture/-/raw/master/cloudflare/workers/11.png" alt="按回车" target="_blank" rel="noopener noreferrer nofollow"><br>
之后就会开始创建项目。<br>
这里选择是否开启Git版本控制，这个自行决定吧。<br>
<img src="https://gitcode.net/BOB20091009/picture/-/raw/master/cloudflare/workers/12.png" alt="Git版本控制" target="_blank" rel="noopener noreferrer nofollow"><br>
这里选择是否立刻部署项目，按默认来即可。<br>
<img src="https://gitcode.net/BOB20091009/picture/-/raw/master/cloudflare/workers/13.png" alt="部署项目" target="_blank" rel="noopener noreferrer nofollow"></p>
<p>这样就是部署成功的：<br>
<img src="https://gitcode.net/BOB20091009/picture/-/raw/master/cloudflare/workers/14.png" alt="部署项目" target="_blank" rel="noopener noreferrer nofollow"><br>
最完整的项目框架：<br>
<img src="https://gitcode.net/BOB20091009/picture/-/raw/master/cloudflare/workers/15.png" alt="部署项目" target="_blank" rel="noopener noreferrer nofollow"><br>
注意：你可能需要额外创建wrangler.toml。这是 Worker 的配置文件</p>
</li>
</ol>
<p>2.5. 如果你使用的是workers界面创建新项目，你需要根据文件树创建出最简项目框架。</p>
<pre><code>文件树
./project
└─src
&nbsp; &nbsp; └─index.js
└─package.json
└─wrangler.toml</code></pre>
<ol start="3">
<li>
<p><strong>编写 Worker 代码:</strong></p>
<p>打开 <code>index.js</code> 文件，编写你的 Worker 代码。一个简单的示例如下：</p>
<pre><code class="language-javascript">addEventListener('fetch', event =&gt; {
&nbsp;&nbsp;event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
&nbsp;&nbsp;return new Response('Hello Cloudflare Workers!', {
&nbsp; &nbsp; headers: { 'content-type': 'text/plain' },
&nbsp;&nbsp;});
}</code></pre>
<ul>
<li><code>addEventListener('fetch', ...)</code>:&nbsp;&nbsp;监听 <code>fetch</code> 事件，这是 Worker 接收 HTTP 请求的入口。</li>
<li><code>event.respondWith(...)</code>:&nbsp;&nbsp;使用 <code>handleRequest</code> 函数的返回值来响应请求。</li>
<li><code>handleRequest(request)</code>:&nbsp;&nbsp;处理请求的函数，这里简单地返回一个包含 "Hello Cloudflare Workers!" 的文本响应。</li>
</ul>
</li>
<li>
<p><strong>本地测试:</strong></p>
<p>使用 <code>wrangler dev</code> 命令在本地测试你的 Worker。</p>
<pre><code class="language-bash">wrangler dev</code></pre>
<p>这会启动一个本地开发服务器，你可以在浏览器中访问 <code>http://localhost:8787</code> 来测试你的 Worker。&nbsp;&nbsp;<code>wrangler dev</code> 会自动监视你的代码更改，并在你保存文件时自动重新加载。</p>
<p><strong>重要的本地测试选项：</strong></p>
<ul>
<li><code>--local</code>: 使用本地模式，不连接到 Cloudflare 的网络。&nbsp;&nbsp;这在某些情况下可以更快地进行测试，但可能无法完全模拟 Cloudflare 边缘环境。</li>
<li><code>--persist</code>:&nbsp;&nbsp;允许 Worker 在本地保存数据 (例如，使用 KV 存储)。</li>
</ul>
</li>
<li>
<p><strong>配置 <code>wrangler.toml</code> 文件:</strong></p>
<p><code>wrangler.toml</code> 文件是 Worker 的配置文件，用于指定 Worker 的名称、路由、环境变量等。&nbsp;&nbsp;一个基本的 <code>wrangler.toml</code> 文件可能如下所示：</p>
<pre><code class="language-toml">name = "my-worker"
main = "src/index.js"
compatibility_date = "2023-04-01"

[vars]
MY_VARIABLE = "my_value"

[[d1_databases]]
binding = "DB" # 绑定 D1 数据库的名称
database_name = "logs" # 你的 D1 数据库名称
database_id = ""&nbsp;&nbsp;# 你的 D1 数据库 ID
</code></pre>
<ul>
<li><code>name</code>:&nbsp;&nbsp;Worker 的名称，必须是唯一的。</li>
<li><code>main</code>:&nbsp;&nbsp;Worker 的入口文件。</li>
<li><code>compatibility_date</code>:&nbsp;&nbsp;指定 Worker 使用的 Cloudflare Workers API 的兼容性日期。&nbsp;&nbsp;选择一个较新的日期可以让你使用最新的功能。</li>
<li><code>vars</code>:&nbsp;&nbsp;定义 Worker 可以访问的环境变量。</li>
<li><code>[[d1_databases]]</code>: 绑定D1数据库，注意这是一个二维列表，不要少打一层中括号。</li>
</ul>
</li>
<li>
<p><strong>部署 Worker:</strong></p>
<p>使用 <code>wrangler deploy</code> 命令将你的 Worker 部署到 Cloudflare 的全球网络。</p>
<pre><code class="language-bash">wrangler deploy</code></pre>
<p>部署成功后，<code>wrangler</code> 会输出 Worker 的 URL。</p>
</li>
<li>
<p><strong>配置自定义域:</strong></p>
<p>你需要返回你的cloudflare控制台，并添加自定义域。</p>
</li>
</ol>
<p><strong>高级特性</strong></p>
<ul>
<li>
<p><strong>KV 存储:</strong>&nbsp;&nbsp;Cloudflare KV 是一个全球分布的键值存储，你可以使用它来存储和检索数据，而无需依赖传统的数据库。&nbsp;&nbsp;适合存储配置信息、会话数据等。</p>
<ul>
<li><strong>绑定 KV 命名空间:</strong>&nbsp;&nbsp;在 <code>wrangler.toml</code> 文件中，使用 <code>kv_namespaces</code>&nbsp;&nbsp;配置项来绑定 KV 命名空间。
<pre><code class="language-toml">kv_namespaces = [
&nbsp;&nbsp;{ binding = "MY_KV", id = "your-kv-namespace-id" }
]</code></pre>
<p>你需要先在 Cloudflare 控制台中创建一个 KV 命名空间，并将其 ID 填入&nbsp;&nbsp;<code>your-kv-namespace-id</code>&nbsp;&nbsp;的位置。</p></li>
<li>
<p><strong>在 Worker 代码中使用 KV：</strong></p>
<pre><code class="language-javascript">addEventListener('fetch', event =&gt; {
&nbsp;&nbsp;event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
&nbsp;&nbsp;const value = await MY_KV.get("my_key");
&nbsp;&nbsp;return new Response(`Value from KV: ${value}`);
}</code></pre>
</li>
</ul>
</li>
<li>
<p><strong>Durable Objects:</strong>&nbsp;&nbsp;Durable Objects 提供了一种强大的方式来构建有状态的、协调的应用程序。&nbsp;&nbsp;它们允许你在 Cloudflare 的边缘存储和管理数据，并提供强大的并发和一致性保证。&nbsp;&nbsp;适用于构建实时协作应用、游戏服务器等。</p>
</li>
<li>
<p><strong>环境变量和 Secrets:</strong>&nbsp;&nbsp;使用环境变量来存储配置信息，使用 Secrets 来存储敏感信息 (例如 API 密钥)。&nbsp;&nbsp;Secrets 会被加密存储，只能在 Worker 运行时访问。&nbsp;&nbsp;通过 <code>wrangler secret put &lt;secret_name&gt;</code> 来创建secret。</p>
</li>
<li>
<p><strong>中间件:</strong>&nbsp;&nbsp;使用中间件来提取通用逻辑，比如身份验证、日志记录等。</p>
</li>
<li>
<p><strong>Streams API:</strong>&nbsp;&nbsp;Workers 支持 Streams API，允许你处理大型文件和流数据，而无需将整个文件加载到内存中。</p>
</li>
<li>
<p><strong>WebAssembly (Wasm):</strong>&nbsp;&nbsp;你可以使用 WebAssembly 来运行高性能的计算密集型代码。</p>
</li>
</ul>
<p><strong>重要提示</strong></p>
<ul>
<li><strong>配额限制：</strong> Cloudflare Workers 有一定的配额限制，包括请求数量、CPU 时间、内存使用等。&nbsp;&nbsp;请仔细阅读 Cloudflare 的文档，了解配额限制，并根据你的需求进行优化。</li>
<li><strong>错误处理：</strong>&nbsp;&nbsp;确保你的 Worker 代码包含适当的错误处理机制，以防止意外错误导致服务中断。</li>
<li><strong>安全性：</strong>&nbsp;&nbsp;注意保护你的 Worker 免受安全威胁，例如代码注入、跨站脚本攻击等。&nbsp;&nbsp;使用安全编码实践，并定期审查你的代码。</li>
<li><strong>日志和监控：</strong> 使用 Cloudflare 的日志和监控工具来跟踪 Worker 的性能和错误，并及时进行优化和修复。</li>
</ul>
<p><strong>示例：简单的 API 网关</strong></p>
<p>以下是一个简单的 API 网关示例，用于对 API 请求进行身份验证：</p>
<pre><code class="language-javascript">addEventListener('fetch', event =&gt; {
&nbsp;&nbsp;event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
&nbsp;&nbsp;const apiKey = request.headers.get('X-API-Key');

&nbsp;&nbsp;if (!apiKey || apiKey !== API_KEY) {
&nbsp; &nbsp; return new Response('Unauthorized', { status: 401 });
&nbsp;&nbsp;}

&nbsp;&nbsp;// Forward the request to the origin server
&nbsp;&nbsp;const url = new URL(request.url);
&nbsp;&nbsp;url.hostname = 'your-origin-server.com';
&nbsp;&nbsp;const modifiedRequest = new Request(url, request);

&nbsp;&nbsp;return fetch(modifiedRequest);
}</code></pre>
<p>在这个例子中，我们首先检查请求头中是否存在 <code>X-API-Key</code>，并验证其是否与环境变量 <code>API_KEY</code> 的值匹配。如果验证失败，则返回一个 401 错误。如果验证成功，则将请求转发到源服务器。</p>
<p><strong>总结</strong></p>
<p>Cloudflare Workers 是一个功能强大的工具，可以用来构建各种各样的边缘应用程序。 通过合理利用 Workers，可以显著提升网站和应用的性能、安全性和可扩展性。 掌握本文介绍的基本概念和步骤，你就可以开始使用 Cloudflare Workers 来构建你自己的边缘应用程序了。记得查阅 Cloudflare 官方文档，深入了解更多高级特性和最佳实践。</p>
<p>关于D1数据库的使用，后续会再出一篇。<br>
之后还会有项目讲解，本人现在正在做学校图书馆的网站（完全使用Cloudflare），完成后，这个项目的代码会放出来。如果对这个项目感兴趣的可以站内私信我。<br>
如果有什么问题或认为有讲错的地方，欢迎留言，看到会回复。</p></div>
<div class="parsedown-markdown-end_FLAG_ZXSQ" style="display:none"></div></td></tr></tbody></table>


