
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/facingscreen/p/18927460" title="发布于 2025-06-13 17:35">
    <span role="heading" aria-level="2">Cocos3内置Effect（着色器）介绍</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>创建材质后Effect有很多下拉选项，介绍一下：</p>
<p id="">在 Cocos Creator 中，<strong>材质（Material）</strong>&nbsp;是用于定义物体表面渲染效果的资源，而&nbsp;<strong>Effect（效果文件）</strong>&nbsp;是材质的核心，它定义了如何使用 Shader 代码来渲染物体。创建材质时，Effect 提供的下拉选项决定了材质的渲染行为和可配置参数。以下是 Effect 下拉选项的详细介绍：</p>
<hr>
<h3><strong>1. Effect 下拉选项的分类</strong></h3>
<p id="">Effect 的下拉选项通常分为以下几类，具体取决于你使用的 Effect 文件：</p>
<h4><strong>(1) 内置 Effect</strong></h4>
<h5><strong>1、常用Effect</strong></h5>
<p id="">Cocos Creator 提供了一些内置的 Effect，适用于常见的渲染需求：</p>
<ul>
<li><strong><code class=" inline">builtin-standard</code></strong>
<ul>
<li>标准 PBR（物理渲染）材质，支持金属度、粗糙度、法线贴图等。</li>
<li>适用于大多数 3D 模型，如角色、道具等。</li>
</ul>
</li>
<li><strong><code class=" inline">builtin-unlit</code></strong>
<ul>
<li>无光照材质，直接显示颜色或纹理，不受场景光照影响。</li>
<li>适用于 UI、粒子、天空盒等。</li>
</ul>
</li>
<li><strong><code class=" inline">builtin-sprite</code></strong>
<ul>
<li>2D 精灵材质，支持透明度、颜色混合等。</li>
<li>适用于 2D 游戏中的图片资源。</li>
</ul>
</li>
<li><strong><code class=" inline">builtin-custom</code></strong>
<ul>
<li>自定义 Effect，允许你通过编写 Shader 代码实现特殊效果。</li>
</ul>
</li>
</ul>
<h5>2、其他内置着色器Effect</h5>
<p id="">以下是 Cocos Creator 中内置着色器（Builtin Shaders）的详细介绍，按列表顺序说明其用途和典型应用场景：</p>
<hr>
<h3>1.&nbsp;<strong><code class=" inline">builtin-billboard</code></strong></h3>
<ul>
<li><strong>用途</strong>：用于实现<strong>公告板（Billboard）效果</strong>，即物体始终面向摄像机。</li>
<li><strong>典型场景</strong>：
<ul>
<li>2D 精灵在 3D 场景中的渲染（如粒子特效、UI 元素）。</li>
<li>树木、粒子等需要始终朝向摄像机的物体。</li>
</ul>
</li>
<li><strong>特点</strong>：通过动态调整物体的旋转，使其法线始终对准摄像机，实现“平面朝向”效果。</li>
</ul>
<hr>
<h3>2.&nbsp;<strong><code class=" inline">builtin-camera-texture</code></strong></h3>
<ul>
<li><strong>用途</strong>：用于渲染<strong>摄像机纹理</strong>（如渲染到纹理、后处理效果）。</li>
<li><strong>典型场景</strong>：
<ul>
<li>镜像反射（通过渲染摄像机视角到纹理）。</li>
<li>屏幕后处理（如模糊、色调映射）。</li>
</ul>
</li>
<li><strong>特点</strong>：支持将摄像机的渲染结果作为纹理输入到其他 Shader 中。</li>
</ul>
<hr>
<h3>3.&nbsp;<strong><code class=" inline">builtin-clear-stencil</code></strong></h3>
<ul>
<li><strong>用途</strong>：用于<strong>清除模板缓冲区（Stencil Buffer）</strong>。</li>
<li><strong>典型场景</strong>：
<ul>
<li>在渲染需要模板测试的物体前，重置模板缓冲区。</li>
<li>配合&nbsp;<code class=" inline">builtin-debug-renderer</code>&nbsp;调试模板缓冲区的值。</li>
</ul>
</li>
<li><strong>特点</strong>：通常不直接用于可见物体，而是作为渲染流程的一部分。</li>
</ul>
<hr>
<h3>4.&nbsp;<strong><code class=" inline">builtin-debug-renderer</code></strong></h3>
<ul>
<li><strong>用途</strong>：用于<strong>调试渲染信息</strong>（如法线、深度、模板缓冲区）。</li>
<li><strong>典型场景</strong>：
<ul>
<li>可视化法线贴图、深度缓冲区或模板缓冲区。</li>
<li>调试光照、阴影或后处理效果。</li>
</ul>
</li>
<li><strong>特点</strong>：输出调试信息到屏幕，帮助开发者优化或排查问题。</li>
</ul>
<hr>
<h3>5.&nbsp;<strong><code class=" inline">builtin-geometry-renderer</code></strong></h3>
<ul>
<li><strong>用途</strong>：用于渲染<strong>几何图形</strong>（如线框、网格、自定义几何体）。</li>
<li><strong>典型场景</strong>：
<ul>
<li>显示模型的线框模式（Wireframe）。</li>
<li>渲染自定义的几何形状（如箭头、辅助线）。</li>
</ul>
</li>
<li><strong>特点</strong>：支持通过代码动态生成几何数据并渲染。</li>
</ul>
<hr>
<h3>6.&nbsp;<strong><code class=" inline">builtin-graphics</code></strong></h3>
<ul>
<li><strong>用途</strong>：用于<strong>动态绘制图形</strong>（如通过&nbsp;<code class=" inline">Graphics</code>&nbsp;组件绘制的线条、形状）。</li>
<li><strong>典型场景</strong>：
<ul>
<li>绘制 2D 图形（如矩形、圆形、路径）。</li>
<li>实现动态生成的 UI 元素或特效。</li>
</ul>
</li>
<li><strong>特点</strong>：与&nbsp;<code class=" inline">Graphics</code>&nbsp;组件配合使用，支持运行时修改图形属性。</li>
</ul>
<hr>
<h3>7.&nbsp;<strong><code class=" inline">builtin-occlusion-query</code></strong></h3>
<ul>
<li><strong>用途</strong>：用于<strong>遮挡查询（Occlusion Query）</strong>，检测物体是否被其他物体遮挡。</li>
<li><strong>典型场景</strong>：
<ul>
<li>优化渲染性能，避免渲染不可见的物体。</li>
<li>实现动态 LOD（Level of Detail）切换。</li>
</ul>
</li>
<li><strong>特点</strong>：通过 GPU 查询统计像素通过深度测试的数量，判断物体是否可见。</li>
</ul>
<hr>
<h3>8.&nbsp;<strong><code class=" inline">builtin-particle</code></strong></h3>
<ul>
<li><strong>用途</strong>：用于<strong>粒子系统</strong>的默认渲染。</li>
<li><strong>典型场景</strong>：
<ul>
<li>火焰、烟雾、魔法特效等粒子效果。</li>
<li>支持软粒子（Soft Particles）、扰动贴图等高级特性。</li>
</ul>
</li>
<li><strong>特点</strong>：支持通过粒子属性（如颜色、大小、速度）动态控制渲染效果。</li>
</ul>
<hr>
<h3>9.&nbsp;<strong><code class=" inline">builtin-particle-gpu</code></strong></h3>
<ul>
<li><strong>用途</strong>：用于<strong>GPU 驱动的粒子系统</strong>，性能更高。</li>
<li><strong>典型场景</strong>：
<ul>
<li>大量粒子（如数万级别）的实时渲染。</li>
<li>需要复杂粒子行为（如流体模拟）的场景。</li>
</ul>
</li>
<li><strong>特点</strong>：通过计算着色器（Compute Shader）在 GPU 上更新粒子状态，减少 CPU 开销。</li>
</ul>
<hr>
<h3>10.&nbsp;<strong><code class=" inline">builtin-particle-trail</code></strong></h3>
<ul>
<li><strong>用途</strong>：用于<strong>粒子拖尾效果</strong>（如飞行轨迹、尾迹）。</li>
<li><strong>典型场景</strong>：
<ul>
<li>飞行道具的拖尾光效。</li>
<li>角色移动时的残影效果。</li>
</ul>
</li>
<li><strong>特点</strong>：支持动态生成拖尾几何体，并根据粒子生命周期调整透明度。</li>
</ul>
<p id="">&nbsp;</p>
<h3><strong>11. <code class=" inline">builtin-particle-trail</code></strong></h3>
<ul>
<li><strong>用途</strong>：用于渲染<strong>粒子拖尾效果</strong>，模拟物体移动时留下的轨迹（如飞行道具的光轨、角色的残影）。</li>
<li><strong>典型场景</strong>：
<ul>
<li>游戏中的技能特效（如魔法飞弹的尾焰）。</li>
<li>角色快速移动时的动态残影。</li>
</ul>
</li>
<li><strong>特点</strong>：
<ul>
<li>根据粒子系统的生命周期动态生成拖尾几何体。</li>
<li>支持透明度和颜色渐变，增强拖尾的真实感。</li>
</ul>
</li>
</ul>
<hr>
<h3><strong>12. <code class=" inline">builtin-particle-xr-trail</code></strong></h3>
<ul>
<li><strong>用途</strong>：专为&nbsp;<strong>XR（扩展现实）</strong>&nbsp;设备优化的粒子拖尾着色器。</li>
<li><strong>典型场景</strong>：
<ul>
<li>VR/AR 应用中的交互特效（如手势拖尾、虚拟物体移动轨迹）。</li>
</ul>
</li>
<li><strong>特点</strong>：
<ul>
<li>针对 XR 设备的性能优化（如减少渲染开销）。</li>
<li>可能支持额外的 XR 特定功能（如立体渲染）。</li>
</ul>
</li>
</ul>
<hr>
<h3><strong>13. <code class=" inline">builtin-reflection-deferred</code></strong></h3>
<ul>
<li><strong>用途</strong>：用于<strong>延迟渲染（Deferred Rendering）</strong>&nbsp;中的反射效果。</li>
<li><strong>典型场景</strong>：
<ul>
<li>高质量场景渲染（如金属表面的环境反射）。</li>
<li>需要精确控制反射计算的复杂光照环境。</li>
</ul>
</li>
<li><strong>特点</strong>：
<ul>
<li>在延迟渲染管线中，将反射信息存储在 G-Buffer 中，后期处理时计算反射。</li>
<li>适用于需要高性能反射的场景（如镜面、水面）。</li>
</ul>
</li>
</ul>
<hr>
<h3><strong>14. <code class=" inline">builtin-spine</code></strong></h3>
<ul>
<li><strong>用途</strong>：专为&nbsp;<strong>Spine 2D 骨骼动画</strong>&nbsp;设计的着色器。</li>
<li><strong>典型场景</strong>：
<ul>
<li>2D 游戏中的角色动画（如角色换装、技能特效）。</li>
<li>需要支持 Spine 运行时功能的场景（如网格变形、插槽替换）。</li>
</ul>
</li>
<li><strong>特点</strong>：
<ul>
<li>支持 Spine 的网格渲染、骨骼权重和插槽系统。</li>
<li>可与 Spine 编辑器直接兼容，保留动画的原始效果。</li>
</ul>
</li>
</ul>
<hr>
<h3><strong>15. <code class=" inline">builtin-sprite</code></strong></h3>
<ul>
<li><strong>用途</strong>：用于渲染&nbsp;<strong>2D 精灵（Sprite）</strong>。</li>
<li><strong>典型场景</strong>：
<ul>
<li>2D 游戏中的角色、道具、UI 元素。</li>
<li>需要支持透明度、颜色混合和九宫格缩放的场景。</li>
</ul>
</li>
<li><strong>特点</strong>：
<ul>
<li>支持精灵的裁剪（Trim）、九宫格（9-Slice）和批处理（Batching）。</li>
<li>可配置混合模式（如正常、叠加、乘法）。</li>
</ul>
</li>
</ul>
<hr>
<h3><strong>16. <code class=" inline">builtin-sprite-renderer</code></strong></h3>
<ul>
<li><strong>用途</strong>：与&nbsp;<code class=" inline">builtin-sprite</code>&nbsp;类似，但可能针对&nbsp;<strong>SpriteRenderer 组件</strong>&nbsp;做了额外优化。</li>
<li><strong>典型场景</strong>：
<ul>
<li>高效渲染大量 2D 精灵（如背景图层、粒子效果）。</li>
</ul>
</li>
<li><strong>特点</strong>：
<ul>
<li>可能支持更高效的批处理或实例化渲染。</li>
<li>适用于对性能敏感的 2D 场景。</li>
</ul>
</li>
</ul>
<hr>
<h3><strong>17. <code class=" inline">builtin-standard</code></strong></h3>
<ul>
<li><strong>用途</strong>：标准的&nbsp;<strong>PBR（物理渲染）</strong>&nbsp;着色器，支持金属度/粗糙度工作流。</li>
<li><strong>典型场景</strong>：
<ul>
<li>3D 模型的高质量渲染（如角色、场景物体）。</li>
<li>需要真实光照和材质表现的场景。</li>
</ul>
</li>
<li><strong>特点</strong>：
<ul>
<li>支持金属度（Metallic）、粗糙度（Roughness）、法线贴图（Normal Map）等 PBR 参数。</li>
<li>兼容物理光照和环境反射。</li>
</ul>
</li>
</ul>
<hr>
<h3><strong>18. <code class=" inline">builtin-terrain</code></strong></h3>
<ul>
<li><strong>用途</strong>：用于渲染&nbsp;<strong>地形（Terrain）</strong>，如山脉、草地、雪地。</li>
<li><strong>典型场景</strong>：
<ul>
<li>开放世界游戏中的自然场景。</li>
<li>需要高度图（Heightmap）和纹理混合的地形。</li>
</ul>
</li>
<li><strong>特点</strong>：
<ul>
<li>支持多纹理混合（如草地、岩石、雪地的过渡）。</li>
<li>可能支持地形LOD（Level of Detail）优化。</li>
</ul>
</li>
</ul>
<hr>
<h3><strong>19. <code class=" inline">builtin-toon</code></strong></h3>
<ul>
<li><strong>用途</strong>：用于实现&nbsp;<strong>卡通渲染（Toon Shading）</strong>&nbsp;效果。</li>
<li><strong>典型场景</strong>：
<ul>
<li>日式动漫风格的游戏（如《原神》的卡通渲染角色）。</li>
<li>需要非真实感渲染（NPR）的场景。</li>
</ul>
</li>
<li><strong>特点</strong>：
<ul>
<li>通过颜色分段（Color Banding）实现卡通化的光照效果。</li>
<li>支持轮廓线（Outline）和阴影色块。</li>
</ul>
</li>
</ul>
<hr>
<h3><strong>20. <code class=" inline">builtin-unlit</code></strong></h3>
<ul>
<li><strong>用途</strong>：<strong>无光照着色器</strong>，直接显示颜色或纹理，不受场景光照影响。</li>
<li><strong>典型场景</strong>：
<ul>
<li>UI 元素、全屏特效、天空盒。</li>
<li>需要固定颜色或纹理的场景（如标志、图标）。</li>
</ul>
</li>
<li><strong>特点</strong>：
<ul>
<li>性能极高，忽略所有光照计算。</li>
<li>支持透明度和颜色混合。</li>
</ul>
</li>
</ul>
<hr>
<h3><strong>21. <code class=" inline">builtin-wireframe</code></strong></h3>
<ul>
<li><strong>用途</strong>：用于渲染&nbsp;<strong>线框模式（Wireframe）</strong>，显示模型的网格结构。</li>
<li><strong>典型场景</strong>：
<ul>
<li>调试模型拓扑结构。</li>
<li>实现科技感或工程风格的视觉效果。</li>
</ul>
</li>
<li><strong>特点</strong>：
<ul>
<li>渲染模型的边线，而非表面。</li>
<li>可配置线框颜色和粗细。</li>
</ul>
</li>
</ul>
<hr>
<h3><strong>22. <code class=" inline">dcc/imported-metallic-roughness</code></strong></h3>
<ul>
<li><strong>用途</strong>：用于渲染从&nbsp;<strong>DCC 工具（如 Blender、Maya）</strong>&nbsp;导入的 PBR 材质，保留金属度/粗糙度信息。</li>
<li><strong>典型场景</strong>：
<ul>
<li>导入第三方工具制作的 3D 模型和材质。</li>
<li>需要精确还原原始 PBR 效果的场景。</li>
</ul>
</li>
<li><strong>特点</strong>：
<ul>
<li>支持导入的金属度/粗糙度贴图（如&nbsp;<code class=" inline">MetallicRoughness.png</code>）。</li>
<li>兼容标准 PBR 工作流。</li>
</ul>
</li>
</ul>
<hr>
<h3><strong>总结</strong></h3>
<ul>
<li><strong>性能优先</strong>：选择&nbsp;<code class=" inline">builtin-unlit</code>&nbsp;或&nbsp;<code class=" inline">builtin-sprite</code>。</li>
<li><strong>高质量 3D 渲染</strong>：选择&nbsp;<code class=" inline">builtin-standard</code>&nbsp;或&nbsp;<code class=" inline">builtin-toon</code>。</li>
<li><strong>特殊效果</strong>：选择&nbsp;<code class=" inline">builtin-particle-trail</code>（拖尾）、<code class=" inline">builtin-wireframe</code>（线框）。</li>
<li><strong>工具兼容</strong>：选择&nbsp;<code class=" inline">builtin-spine</code>（Spine 动画）或&nbsp;<code class=" inline">dcc/imported-metallic-roughness</code>（导入 PBR 材质）。</li>
</ul>
<p id="">通过合理选择着色器，可以平衡渲染效果和性能需求，实现丰富的视觉表现。</p>
<h4><strong>(2) 自定义 Effect</strong></h4>
<p id="">如果你在项目中创建了自定义的 Effect 文件（<code class=" inline">.effect</code>），它们也会出现在下拉选项中。自定义 Effect 可以实现：</p>
<ul>
<li>特殊光照效果（如卡通渲染、边缘光）。</li>
<li>屏幕后处理效果（如模糊、色调映射）。</li>
<li>自定义着色逻辑（如水波纹、溶解效果）。</li>
</ul>
<hr>
<h3><strong>2. Effect 选项的核心参数</strong></h3>
<p id="">选择不同的 Effect 后，材质的属性面板会显示对应的可配置参数。以下是常见参数的说明：</p>
<h4><strong>(1) 基础参数</strong></h4>
<ul>
<li><strong>Albedo（基础颜色）</strong>
<ul>
<li>定义物体的基础颜色或纹理。</li>
<li>适用于&nbsp;<code class=" inline">builtin-standard</code>&nbsp;和&nbsp;<code class=" inline">builtin-unlit</code>。</li>
</ul>
</li>
<li><strong>Metallic（金属度）</strong>
<ul>
<li>控制物体表面的金属质感（0 = 非金属，1 = 金属）。</li>
<li>仅适用于&nbsp;<code class=" inline">builtin-standard</code>。</li>
</ul>
</li>
<li><strong>Roughness（粗糙度）</strong>
<ul>
<li>控制物体表面的光滑程度（0 = 光滑，1 = 粗糙）。</li>
<li>仅适用于&nbsp;<code class=" inline">builtin-standard</code>。</li>
</ul>
</li>
<li><strong>Normal Map（法线贴图）</strong>
<ul>
<li>添加细节凹凸效果，增强表面质感。</li>
<li>适用于&nbsp;<code class=" inline">builtin-standard</code>。</li>
</ul>
</li>
</ul>
<h4><strong>(2) 光照相关参数</strong></h4>
<ul>
<li><strong>Emissive（自发光）</strong>
<ul>
<li>定义物体自身的发光颜色或纹理。</li>
<li>适用于需要发光效果的物体（如灯箱、火焰）。</li>
</ul>
</li>
<li><strong>Ambient Occlusion（环境光遮蔽）</strong>
<ul>
<li>增强物体表面的阴影细节。</li>
<li>适用于&nbsp;<code class=" inline">builtin-standard</code>。</li>
</ul>
</li>
</ul>
<h4><strong>(3) 自定义参数</strong></h4>
<ul>
<li>如果 Effect 文件中定义了自定义参数（如&nbsp;<code class=" inline">_Time</code>、<code class=" inline">_Color</code>），它们会出现在材质属性面板中。</li>
<li>例如，自定义 Effect 中可以定义一个&nbsp;<code class=" inline">_WaveSpeed</code>&nbsp;参数来控制水波纹的流动速度。</li>
</ul>
<hr>
<h3><strong>3. 如何选择合适的 Effect</strong></h3>
<ul>
<li><strong>3D 模型</strong>：
<ul>
<li>使用&nbsp;<code class=" inline">builtin-standard</code>，并配置金属度、粗糙度、法线贴图等参数。</li>
</ul>
</li>
<li><strong>2D 精灵</strong>：
<ul>
<li>使用&nbsp;<code class=" inline">builtin-sprite</code>，并配置颜色、透明度等参数。</li>
</ul>
</li>
<li><strong>UI 或无光照效果</strong>：
<ul>
<li>使用&nbsp;<code class=" inline">builtin-unlit</code>，避免不必要的光照计算。</li>
</ul>
</li>
<li><strong>特殊效果</strong>：
<ul>
<li>创建自定义 Effect，并通过 Shader 代码实现。</li>
</ul>
</li>
</ul>
<hr>
<h3><strong>4. 自定义 Effect 的编写</strong></h3>
<p id="">如果内置 Effect 无法满足需求，可以创建自定义 Effect 文件（<code class=" inline">.effect</code>）。</p>
<ul>
<li><strong>说明</strong>：
<ul>
<li>这个 Effect 会将所有非透明像素的颜色替换为&nbsp;<code class=" inline">_ReplaceColor</code>。</li>
<li>在材质中，你可以通过下拉选项选择这个自定义 Effect，并调整&nbsp;<code class=" inline">_ReplaceColor</code>&nbsp;参数。</li>
</ul>
</li>
</ul>
<hr>
<h3><strong>5. 常见问题</strong></h3>
<ul>
<li><strong>为什么下拉选项中没有我的自定义 Effect？</strong>
<ul>
<li>确保自定义 Effect 文件位于项目的&nbsp;<code class=" inline">assets</code>&nbsp;目录下，且文件名以&nbsp;<code class=" inline">.effect</code>&nbsp;结尾。</li>
<li>确保 Effect 文件的语法正确（可以通过 Cocos Creator 的开发者工具检查错误）。</li>
</ul>
</li>
<li><strong>如何调试自定义 Effect？</strong>
<ul>
<li>使用 Cocos Creator 的&nbsp;<strong>“开发者工具”</strong>&nbsp;查看 Shader 编译错误。</li>
<li>简化 Effect 代码，逐步排查问题。</li>
</ul>
</li>
</ul>
<hr>
<h3><strong>总结</strong></h3>
<ul>
<li>Effect 的下拉选项决定了材质的渲染行为和可配置参数。</li>
<li>内置 Effect 适用于常见需求，自定义 Effect 适用于特殊效果。</li>
<li>选择 Effect 时，应根据物体的类型（3D/2D）和渲染需求（光照/无光照）来决定。</li>
<li>自定义 Effect 需要编写 Shader 代码，并通过材质属性面板暴露可配置参数。</li>
</ul>
<p id="">通过合理选择和配置 Effect，你可以实现丰富的视觉效果，提升游戏的品质和表现力。</p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0006944444444444445" data-date-updated="2025-06-13 17:36">2025-06-13 17:35</span>&nbsp;
<a href="https://www.cnblogs.com/facingscreen">我的五年</a>&nbsp;
阅读(<span id="post_view_count">31</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18927460);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18927460', targetLink: 'https://www.cnblogs.com/facingscreen/p/18927460', title: 'Cocos3内置Effect（着色器）介绍' })">举报</a>
</div>
	