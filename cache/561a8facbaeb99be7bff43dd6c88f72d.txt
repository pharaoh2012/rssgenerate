
	<div class="postTitle">
		<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/leehang/p/19013174" title="发布于 2025-07-30 16:27">
    <span role="heading" aria-level="2">Linux VIRT-RES-SHR内存概念理解</span>
    

</a>

	</div>
	<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在 Linux CentOS 系统中，<code>VIRT</code>（虚拟内存）、<code>RES</code>（常驻内存）和 <code>SHR</code>（共享内存）是 <code>top</code> 命令中三个关键的内存指标，理解它们的概念和联系对系统监控、性能调优和内存泄漏排查至关重要。以下是三者的详细解释及关联分析：</p>
<hr>
<h3 id="1-virtvirtual-memory-size虚拟内存">​<strong>​1. VIRT（Virtual Memory Size，虚拟内存）​</strong>​</h3>
<ul>
<li>
<p>​<strong>​定义​</strong>​：进程可访问的​<strong>​总虚拟内存空间​</strong>​，包括：</p>
<ul>
<li>代码段、数据段、堆（<code>malloc/new</code> 分配）、栈空间。</li>
<li>共享库（如 <code>libc.so</code>）及文件映射（<code>mmap</code>）。</li>
<li>​<strong>​已申请但未实际使用的内存​</strong>​（如未写入的 <code>malloc</code> 分配）。</li>
</ul>
</li>
<li>
<p>​<strong>​特点​</strong>​：</p>
<ul>
<li>​<strong>​按需增长​</strong>​：若进程申请 1GB 内存但仅写入 100MB，<code>VIRT</code> 仍增加 1GB。</li>
<li>​<strong>​不直接消耗物理内存​</strong>​：仅表示地址空间范围，实际占用由 <code>RES</code> 体现。</li>
<li>​<strong>​公式​</strong>​：<code>VIRT = SWAP + RES</code>（<code>SWAP</code> 是换出到磁盘的部分）。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="2-resresident-memory-size常驻内存">​<strong>​2. RES（Resident Memory Size，常驻内存）​</strong>​</h3>
<ul>
<li>
<p>​<strong>​定义​</strong>​：进程当前​<strong>​实际占用的物理内存​</strong>​（未被换出到 Swap），包括：</p>
<ul>
<li>正在使用的堆、栈、代码段。</li>
<li>共享库中​<strong>​已被加载到物理内存的部分​</strong>​。</li>
</ul>
</li>
<li>
<p>​<strong>​特点​</strong>​：</p>
<ul>
<li>​<strong>​反映真实资源消耗​</strong>​：直接影响系统的物理内存压力。</li>
<li>​<strong>​按实际使用量增长​</strong>​：若仅写入申请的 100MB 内存，<code>RES</code> 仅增长 100MB。</li>
<li>​<strong>​包含共享内存​</strong>​：<code>RES</code> 中的一部分可能被多个进程共享（即 <code>SHR</code>）。</li>
<li>​<strong>​公式​</strong>​：<code>RES = CODE + DATA</code>（代码段 + 数据段）。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="3-shrshared-memory共享内存">​<strong>​3. SHR（Shared Memory，共享内存）​</strong>​</h3>
<ul>
<li>
<p>​<strong>​定义​</strong>​：<code>RES</code> 中​<strong>​被其他进程共享的内存​</strong>​，例如：</p>
<ul>
<li>共享库（如 <code>glibc</code>）的代码段。</li>
<li>通过 <code>shmget</code> 或 <code>mmap(MAP_SHARED)</code> 创建的共享内存区域。</li>
</ul>
</li>
<li>
<p>​<strong>​特点​</strong>​：</p>
<ul>
<li>​<strong>​非独占性​</strong>​：多个进程共享同一物理内存页，减少整体内存占用。</li>
<li>​<strong>​统计粒度​</strong>​：即使进程仅使用共享库的少量函数，<code>SHR</code> 仍统计整个库的大小。</li>
<li>​<strong>​可被换出​</strong>​：Swap 操作后 <code>SHR</code> 可能降低。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="三者的联系与区别">​<strong>​三者的联系与区别​</strong>​</h3>
<table>
<thead>
<tr>
<th style="text-align: center">​<strong>​指标​</strong>​</th>
<th style="text-align: center">​<strong>​本质​</strong>​</th>
<th style="text-align: center">​<strong>​是否独占物理内存​</strong>​</th>
<th style="text-align: center">​<strong>​与物理内存的关系​</strong>​</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center"><code>VIRT</code></td>
<td style="text-align: center">虚拟地址空间总量</td>
<td style="text-align: center">否</td>
<td style="text-align: center">包含未映射到物理内存的部分</td>
</tr>
<tr>
<td style="text-align: center"><code>RES</code></td>
<td style="text-align: center">实际使用的物理内存</td>
<td style="text-align: center">是（含共享部分）</td>
<td style="text-align: center">直接反映物理内存占用</td>
</tr>
<tr>
<td style="text-align: center"><code>SHR</code></td>
<td style="text-align: center"><code>RES</code> 中的共享部分</td>
<td style="text-align: center">否</td>
<td style="text-align: center">被多个进程共享，减少物理内存重复占用</td>
</tr>
</tbody>
</table>
<ul>
<li>​<strong>​核心关系​</strong>​：
<ul>
<li>​<strong>​<code>RES</code> 是 <code>VIRT</code> 的子集​</strong>​：<code>RES</code> 仅包含 <code>VIRT</code> 中已映射到物理内存的部分。</li>
<li>​<strong>​<code>SHR</code> 是 <code>RES</code> 的子集​</strong>​：共享内存属于 <code>RES</code>，但被多个进程复用。</li>
<li>​<strong>​进程独占内存计算公式​</strong>​：​<strong>​<code>独占内存 = RES - SHR</code>​</strong>​。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="如何理解真实内存使用">​<strong>​如何理解真实内存使用？​</strong>​</h3>
<ol>
<li>
<p>​<strong>​识别内存瓶颈​</strong>​：</p>
<ul>
<li>​<strong>​<code>RES</code> 过高​</strong>​：进程实际占用物理内存多，可能导致系统 OOM（Out-of-Memory）。</li>
<li>​<strong>​<code>VIRT</code> 远大于 <code>RES</code>​</strong>​：进程申请了大量未使用内存（如预分配未写入），通常无需立即优化。</li>
</ul>
</li>
<li>
<p>​<strong>​共享内存优化​</strong>​：</p>
<ul>
<li>高 <code>SHR</code> 表示共享库使用多，​<strong>​多个进程可复用同一库​</strong>​，降低整体内存压力。例如，10 个进程共享 100MB 的 <code>libc.so</code>，<code>SHR</code> 总计仍为 100MB 而非 1GB。</li>
</ul>
</li>
<li>
<p>​<strong>​内存泄漏排查​</strong>​：</p>
<ul>
<li>若 <code>RES - SHR</code>（独占内存）持续增长，可能​<strong>​存在内存泄漏​</strong>​（如未释放的堆分配）。</li>
<li><code>VIRT</code> 异常增长但 <code>RES</code> 不变，可能是​<strong>​虚拟地址空间碎片化​</strong>​问题。</li>
</ul>
</li>
<li>
<p>​<strong>​Swap 影响​</strong>​：</p>
<ul>
<li><code>RES</code> 不包括已换出的内存（属于 <code>VIRT</code> 中的 <code>SWAP</code> 部分），​<strong>​高 Swap 使用会拖慢性能​</strong>​。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="实践建议">​<strong>​实践建议​</strong>​</h3>
<ul>
<li>
<p>​<strong>​监控命令​</strong>​：</p>
<pre><code>top -p PID  # 查看进程的 VIRT/RES/SHR
cat /proc/PID/smaps  # 分析内存详细分布（堆、栈、共享库等）
</code></pre>
</li>
<li>
<p>​<strong>​调优场景​</strong>​：</p>
<ul>
<li>​<strong>​优化 <code>RES</code>​</strong>​：减少不必要的缓冲区或缓存（如调整 <code>malloc</code> 策略）。</li>
<li>​<strong>​利用 <code>SHR</code>​</strong>​：尽量使用动态链接库而非静态编译，节省物理内存。</li>
<li>​<strong>​控制 <code>VIRT</code>​</strong>​：避免过度预分配内存（如 Java 的 <code>-Xmx</code> 设置过大）。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="总结">​<strong>​总结​</strong>​</h3>
<ul>
<li>
<p>​<strong>​<code>VIRT</code>​</strong>​：进程的“内存需求潜力”，​<strong>​关注申请量​</strong>​。</p>
</li>
<li>
<p>​<strong>​<code>RES</code>​</strong>​：系统的“真实内存负担”，​<strong>​监控实际使用量​</strong>​。</p>
</li>
<li>
<p>​<strong>​<code>SHR</code>​</strong>​：系统的“内存复用效率”，​<strong>​优化共享资源​</strong>​。</p>
</li>
</ul>
<p>通过分析 <code>RES - SHR</code> 可锁定进程独占内存的异常增长，结合 <code>smaps</code> 文件可深入分析堆、文件映射等区域的使用细节，为性能优化提供精准依据。</p>

</div>
<div class="clear"></div>

	<div class="postDesc">posted on 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-30 16:28">2025-07-30 16:27</span>&nbsp;
<a href="https://www.cnblogs.com/leehang">LeeHang</a>&nbsp;
阅读(<span id="post_view_count">19</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19013174);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19013174', targetLink: 'https://www.cnblogs.com/leehang/p/19013174', title: 'Linux VIRT-RES-SHR内存概念理解' })">举报</a>
</div>
