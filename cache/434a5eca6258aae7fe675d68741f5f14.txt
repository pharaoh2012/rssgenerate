
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/henjay724/p/18702889" title="发布于 2025-02-07 16:53">
    <span role="heading" aria-level="2">痞子衡嵌入式：恩智浦i.MX RT1180系列MCU启动那些事（2）- Boot配置(BOOT Pin/eFUSE)</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<hr>
<p>　　大家好，我是痞子衡，是正经搞技术的痞子。今天痞子衡给大家介绍的是<strong>恩智浦i.MX RT118x系列MCU的Boot配置</strong>。</p>
<p>　　痞子衡旧文 <a href="http://www.cnblogs.com/henjay724/p/9031655.html" target="_blank">《RT四位数Boot简介》</a> 里为大家介绍了 Boot 基本原理以及 i.MXRT1xxx Boot 方式，此外也有文章 <a href="https://www.cnblogs.com/henjay724/p/9034563.html" target="_blank">《RT1xxx Boot配置》</a> 介绍了 i.MXRT10xx/RT1170 Boot 的行为配置，鉴于 RT1180 系列在 Boot 配置上区别于以往，因此今天痞子衡就来专门聊一聊 i.MXRT118x Boot 行为配置的设计差异。</p>
<p>　　无论是什么芯片里的 BootROM，其最核心的功能无非两个：一、从存放 Application 的存储器中加载执行；二、通过支持的通信接口接收来自 Host 的 Application 数据完成更新，所以 Boot 配置也主要围绕这两个核心功能。</p>
<h3 id="一boot行为模式选择">一、Boot行为模式选择</h3>
<p>　　如果你读过痞子衡旧文 <a href="https://www.cnblogs.com/henjay724/p/11990219.html" target="_blank">《RT三位数Boot配置》</a>，你会发现其实 RT1180 在 Boot 配置设计上更偏向于 RT 三位数系列（相对精简），但是在涉及到的名词术语上还是尽量与 RT 四位数保持了一致。</p>
<p>　　RT1180 内部 eFuse memory 中的 FORCE_BT_FROM_FUSE 位和芯片外部管脚 BOOT_MODE[2:0] 状态共同决定了 i.MXRT118x Boot 行为的最顶层配置。</p>
<h4 id="11-行为模式定义">1.1 行为模式定义</h4>
<h5 id="111-force_bt_from_fuse等值定义">1.1.1 FORCE_BT_FROM_FUSE等值定义</h5>
<p>　　FORCE_BT_FROM_FUSE 是最高优先级的行为模式定义，其与 BOOT_MODE_FROM_FUSE[2:0] 位是一个组合。当 FORCE_BT_FROM_FUSE 被烧写为 1'b1 时，此时芯片 Boot 行为完全由 BOOT_MODE_FROM_FUSE[2:0] 配置值决定。</p>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/cnblogs/i.MXRT1180_Boot_eFuse_Top.png" alt="" loading="lazy"></p>
<h5 id="112-boot_mode20管脚状态定义">1.1.2 BOOT_MODE[2:0]管脚状态定义</h5>
<p>　　当 FORCE_BT_FROM_FUSE bit 未烧写时（即1'b0），BOOT_MODE[2:0] 引脚开始决定行为模式。下表是 BOOT_MODE 相关 pinout 信息，可在参考手册的 External Signals and Pin Multiplexing 章节中找到。</p>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/cnblogs/i.MXRT1180_Boot_PinMuxIndex.png" alt="" loading="lazy"></p>
<p>　　BOOT_MODE[2:0] pin 状态是在 POR_B pin 上沿时被自动采样存储在芯片内部的寄存器 SRC-&gt;SBMR2[29:24] 中的，这些 bit 也叫 IPP_BOOT_MODE[5:0]，BootROM 其实是根据 IPP_BOOT_MODE 的值来决定 Boot 行为的。</p>
<blockquote>
<ul>
<li>Note: 如果改变了 BOOT_MODE[2:0] 引脚的输入状态而使用 ONOFF pin（RESET_B）去软复位，Boot 行为并不会改变，因为 IPP_BOOT_MODE 值并未改变）。</li>
</ul>
</blockquote>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/cnblogs/i.MXRT1180_Boot_BOOT_MODE.png" alt="" loading="lazy"></p>
<p>　　当 BOOT_MODE[2:0] 被设置成 3'b000 时即所谓 Boot From Fuses 模式，其有效性还受 BT_FUSE_SEL 位二级控制（默认 1'b0 则仍然是 Serial Downloader 模式，烧写成 1'b1 时才根据 BOOT_MODE_FROM_FUSE[2:0] 决定行为），当然痞子衡认为这里完全多此一举，纯粹是为了与 RT 四位数早期型号里 BootROM 相应代码逻辑作兼容。</p>
<h4 id="12-行为模式分类">1.2 行为模式分类</h4>
<p>　　不管是 FORCE_BT_FROM_FUSE 位还是外部管脚 BOOT_MODE[2:0] 状态，他们决定的最终 Boot 行为模式是相似的，区别只是一个通过烧 eFuse 决定（一般用于量产阶段），另一个通过切换引脚状态决定（一般用于研发阶段）。Boot 行为模式看起来非常多，但概括而言总共就两大类：</p>
<h5 id="121-serial-downloader模式uartspiusb-hid">1.2.1 Serial Downloader模式（UART/SPI/USB-HID）</h5>
<p>　　Serial Downloader 模式顾名思义即串行下载模式，在这种模式下，BootROM 通过指定的 USB/UART/SPI 口来接收来自 Host（恩智浦提供了上位机工具 blhost.exe 或者 mfgtool 或者 MCUBootUtility）的 Application 数据，并将数据存储在 SRAM 中执行。</p>
<blockquote>
<ul>
<li>Note: SPI 方式 SDP 虽然很早就被 RT 三位数系列 BootROM 支持，但是在 RT 四位数上首次支持是 RT1180。</li>
</ul>
</blockquote>
<p>　　这种模式其实就是从 SRAM 启动，但是如果用这种模式去 Boot Application 缺点很明显，每次上电都需要将 Application 重新下载进 SRAM，无法做到脱机自动 Boot，所以显然这种模式的主要目的并不是从 SRAM 启动 Application，那它到底有什么用？</p>
<p>　　其实 Serial Downloader 模式主要是用来从 SRAM 中启动 Flashloader，恩智浦官方提供了 Flashloader 程序，Flashloader 程序可以用来将你的 Application 下载进 i.MXRT118x 支持的所有外部非易失性存储器中，为后续从外部存储器启动做准备。除此以外 Serial Downloader 模式还可以用来查看 eFuse 值。</p>
<h5 id="122-device-boot模式serial-norserial-nandraw-nandsdemmcrecovery-lpspi-nor">1.2.2 Device Boot模式（Serial NOR/Serial NAND/Raw NAND/SD/eMMC/Recovery LPSPI NOR）</h5>
<p>　　Device Boot 模式就是直接从选定的外部非易失 Device 加载 Application 启动，这种模式才是 i.MXRT118x 最核心的模式，毕竟离线运行 Application 才是最重要的任务。Device Boot 又分为 Primary Boot（Serial NOR/Serial NAND/Raw NAND/SD/eMMC）和 Recovery Boot（LPSPI NOR），前者是主动启动设备，后者是备份启动设备。当主动启动设备中的 Application 失效时，芯片会从备份启动设备中再尝试去启动一次 Application，实现双重保障。</p>
<blockquote>
<ul>
<li>Note: Recovery LPSPI NOR 启动在 RT 四位数早期型号上虽然也被支持，不过仅支持 1bit 模式，而在 RT1180 上可以同时支持 1/2/4bits 模式。</li>
</ul>
</blockquote>
<h3 id="二boot-device具体配置">二、Boot Device具体配置</h3>
<p>　　当 Boot 行为模式选定的是从某一类 Boot Device 启动，底下就是配置该 Device 具体属性了。假设我们选择了Serial NOR FLASH，但是 Serial NOR 只是一类 FLASH 的统称，市面上有非常多的 Serial NOR 芯片，每个芯片特性可能不完全一样，那么 BootROM 怎么知道这些不同的 Serial NOR 芯片的特性呢？还是通过 eFuse memory 来指定。</p>
<p>　　eFuse 是 i.MXRT118x 里一块特殊的存储区域，用于存放全部芯片配置信息，其中有一部分区域分配给 Boot。参考手册的 eFuse 相关章节中可见所有 bit 具体定义，这里痞子衡仅贴出一部分用于示例：</p>
<blockquote>
<ul>
<li>Note: 在 RT 四位数早期型号 eFuse 里关于 Device 具体属性定义区域存在复用情况，而在 RT1180 上每一类 Device 都独享一片区域。</li>
</ul>
</blockquote>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/cnblogs/i.MXRT1180_Boot_efusemap.png" alt="" loading="lazy"></p>
<p>　　至此，恩智浦i.MX RT118x系列MCU的Boot配置痞子衡便介绍完毕了，掌声在哪里~~~</p>
<h3 id="欢迎订阅">欢迎订阅</h3>
<p>文章会同时发布到我的 <a href="https://www.cnblogs.com/henjay724/" target="_blank">博客园</a>、<a href="https://blog.csdn.net/henjay724" target="_blank" rel="noopener nofollow">CSDN</a>、<a href="http://weixin.sogou.com/weixin?type=1&amp;query=%E7%97%9E%E5%AD%90%E8%A1%A1%E5%B5%8C%E5%85%A5%E5%BC%8F" target="_blank" rel="noopener nofollow">微信公众号</a>、<a href="https://www.zhihu.com/people/henjay724" target="_blank" rel="noopener nofollow">知乎</a>、<a href="https://www.eefocus.com/user/3876937/article/" target="_blank" rel="noopener nofollow">与非网</a>、<a href="https://blog.chinaaet.com/henjay724" target="_blank" rel="noopener nofollow">电子技术应用AET</a>、<a href="https://www.dianyuan.com/people/912268" target="_blank" rel="noopener nofollow">电子星球</a>、<a href="https://blog.51cto.com/henjay724" target="_blank" rel="noopener nofollow">51CTO</a> 平台上。</p>
<p>微信搜索"<strong>痞子衡嵌入式</strong>"或者扫描下面二维码，就可以在手机上第一时间看了哦。</p>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/wechat/pzhMcu_qrcode_258x258.jpg" alt="" loading="lazy"></p>

</div>
<div id="MySignature" role="contentinfo">
    <div class="autograph"> 
  <p style="font-family: 楷体; font-size: 15px">&nbsp;&nbsp;最后欢迎关注痞子衡个人微信公众号【痞子衡嵌入式】，一个专注嵌入式技术的公众号，跟着痞子衡一起玩转嵌入式。</p>

  <img style="float: left" src="https://img2022.cnblogs.com/blog/623659/202211/623659-20221116165755872-427238307.jpg" alt="痞子衡嵌入式-微信二维码" class="img_avatar">

  <img style="float: right" src="http://henjay724.com/image/cnblogs/baogeMcu_payment_wechat_150x150.png" alt="痞子衡嵌入式-微信收款二维码" class="img_avatar">

  <img style="float: right" src="http://henjay724.com/image/cnblogs/baogeMcu_payment_alipay_150x150.jpg" alt="痞子衡嵌入式-支付宝收款二维码" class="img_avatar">

<br>
  <p>&nbsp;&nbsp;衡杰(痞子衡)，目前就职于某全球顶级半导体原厂MCU系统部门，担任高级嵌入式系统应用工程师。</p>

  <p>&nbsp;&nbsp;专栏内所有文章的转载请注明出处：<a href="http://www.cnblogs.com/henjay724/" target="_blank">http://www.cnblogs.com/henjay724/</a></p>

  <p>&nbsp;&nbsp;与痞子衡进一步交流或咨询业务合作请发邮件至 <a href="hengjie1989@foxmail.com" target="_blank">hengjie1989@foxmail.com</a></p>

  <p>&nbsp;&nbsp;可以关注痞子衡的Github主页 <a href="https://github.com/JayHeng" target="_blank">https://github.com/JayHeng</a>，有很多好玩的嵌入式项目。</p>

  <p><font color="yellow">&nbsp;&nbsp;关于专栏文章有任何疑问请直接在博客下面留言，痞子衡会及时回复免费(划重点)答疑。</font></p>

  <p><font color="red">&nbsp;&nbsp;痞子衡邮箱已被私信挤爆，技术问题不推荐私信，坚持私信请先扫码付款(5元起步)再发。</font></p>
<br>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.056279644934027775" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-07 16:54">2025-02-07 16:53</span>&nbsp;
<a href="https://www.cnblogs.com/henjay724">痞子衡</a>&nbsp;
阅读(<span id="post_view_count">6</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18702889" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18702889);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18702889', targetLink: 'https://www.cnblogs.com/henjay724/p/18702889', title: '痞子衡嵌入式：恩智浦i.MX RT1180系列MCU启动那些事（2）- Boot配置(BOOT Pin/eFUSE)' })">举报</a>
</div>
        