
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/powertoolsteam/p/18985414" title="发布于 2025-07-15 12:07">
    <span role="heading" aria-level="2">MCP快速入门—快速构建自己的服务器</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="引言">引言</h2>
<p>随着大语言模型(LLM)技术的快速发展，如何扩展其能力边界成为开发者关注的重点。MCP(Model Capability Protocol)作为一种协议标准，允许开发者构建自定义服务器来增强LLM的功能。</p>
<h2 id="正文内容">正文内容</h2>
<h3 id="1-mcp核心概念与技术背景">1. MCP核心概念与技术背景</h3>
<p>MCP服务器主要提供三种能力类型：</p>
<ul>
<li><strong>资源(Resources)</strong>：客户端可读取的类似文件的数据（如API响应或文件内容）</li>
<li><strong>工具(Tools)</strong>：经用户批准后LLM可调用的函数</li>
<li><strong>提示(Prompts)</strong>：帮助用户完成特定任务的预编写模板</li>
</ul>
<p>本教程将重点介绍工具类型的实现，通过构建两个实用工具(get-alerts和get-forecast)来扩展Claude的功能，使其能够获取天气预报和恶劣天气警报。</p>
<h3 id="2-环境准备与项目初始化">2. 环境准备与项目初始化</h3>
<h4 id="21-系统要求">2.1 系统要求</h4>
<ul>
<li>Python 3.10或更高版本</li>
<li>Python MCP SDK 1.2.0或更高版本</li>
</ul>
<h4 id="22-安装uv并创建项目">2.2 安装uv并创建项目</h4>
<pre><code class="language-bash"># 安装uv包管理器
curl -LsSf https://astral.sh/uv/install.sh | sh

# 创建项目目录
uv init weather
cd weather

# 创建并激活虚拟环境
uv venv
source .venv/bin/activate

# 安装依赖
uv add "mcp[cli]" httpx

# 创建服务器文件
touch weather.py
</code></pre>
<h3 id="3-构建天气服务器">3. 构建天气服务器</h3>
<h4 id="31-初始化fastmcp实例">3.1 初始化FastMCP实例</h4>
<pre><code class="language-python">from typing import Any
import httpx
from mcp.server.fastmcp import FastMCP

# 初始化FastMCP服务器
mcp = FastMCP("weather")

# 常量定义
NWS_API_BASE = "https://api.weather.gov"
USER_AGENT = "weather-app/1.0"
```

FastMCP类利用Python类型提示和文档字符串自动生成工具定义，简化了MCP工具的创建和维护过程。

</code></pre>
<h4 id="32-实现辅助函数">3.2 实现辅助函数</h4>
<pre><code class="language-python">async def make_nws_request(url: str) -&gt; dict[str, Any] | None:
    """向NWS API发起请求并处理错误"""
    headers = {
        "User-Agent": USER_AGENT,
        "Accept": "application/geo+json"
    }
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(url, headers=headers, timeout=30.0)
            response.raise_for_status()
            return response.json()
        except Exception:
            return None

def format_alert(feature: dict) -&gt; str:
    """格式化警报特征为可读字符串"""
    props = feature["properties"]
    return f"""
Event: {props.get('event', 'Unknown')}
Area: {props.get('areaDesc', 'Unknown')}
Severity: {props.get('severity', 'Unknown')}
Description: {props.get('description', 'No description available')}
Instructions: {props.get('instruction', 'No specific instructions provided')}
"""
</code></pre>
<h4 id="33-实现工具功能">3.3 实现工具功能</h4>
<pre><code class="language-python">@mcp.tool()
async def get_alerts(state: str) -&gt; str:
    """获取美国各州的天气警报
    
    Args:
        state: 两字母州代码(如CA, NY)
    """
    url = f"{NWS_API_BASE}/alerts/active/area/{state}"
    data = await make_nws_request(url)

    if not data or "features" not in data:
        return "无法获取警报或未发现警报"

    if not data["features"]:
        return "该州无活跃警报"

    alerts = [format_alert(feature) for feature in data["features"]]
    return "\n---\n".join(alerts)

@mcp.tool()
async def get_forecast(latitude: float, longitude: float) -&gt; str:
    """获取某地天气预报
    
    Args:
        latitude: 纬度
        longitude: 经度
    """
    # 首先获取预测网格端点
    points_url = f"{NWS_API_BASE}/points/{latitude},{longitude}"
    points_data = await make_nws_request(points_url)

    if not points_data:
        return "无法获取该位置的预测数据"

    # 从points响应中获取预测URL
    forecast_url = points_data["properties"]["forecast"]
    forecast_data = await make_nws_request(forecast_url)

    if not forecast_data:
        return "无法获取详细预测"

    # 将时间段格式化为可读预测
    periods = forecast_data["properties"]["periods"]
    forecasts = []
    for period in periods[:5]:  # 仅显示接下来5个时段
        forecast = f"""
{period['name']}:
温度: {period['temperature']}°{period['temperatureUnit']}
风速: {period['windSpeed']} {period['windDirection']}
预测: {period['detailedForecast']}
"""
        forecasts.append(forecast)

    return "\n---\n".join(forecasts)
</code></pre>
<h4 id="34-运行服务器">3.4 运行服务器</h4>
<pre><code class="language-python">if __name__ == "__main__":
    # 初始化并运行服务器
    mcp.run(transport='stdio')

</code></pre>
<h3 id="4-连接claude-for-desktop进行测试">4. 连接Claude for Desktop进行测试</h3>
<h4 id="41-配置客户端">4.1 配置客户端</h4>
<pre><code class="language-json">{
  "mcpServers": {
    "weather": {
      "command": "uv",
      "args": [
        "--directory",
        "/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather",
        "run",
        "weather.py"
      ]
    }
  }
}
</code></pre>
<h4 id="42-测试命令">4.2 测试命令</h4>
<ul>
<li>"萨克拉门托的天气怎么样？"</li>
<li>"德克萨斯州有哪些活跃的天气警报？"</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/139239/202507/139239-20250715120655491-1353787049.png" alt="image" loading="lazy"></p>
<h3 id="5-技术实现原理">5. 技术实现原理</h3>
<p>当用户提问时，系统会经历以下流程：</p>
<ol>
<li>客户端将问题发送给Claude</li>
<li>Claude分析可用工具并决定使用哪些</li>
<li>客户端通过MCP服务器执行选定工具</li>
<li>结果返回给Claude</li>
<li>Claude生成自然语言响应</li>
<li>向用户显示响应</li>
</ol>
<h2 id="结论">结论</h2>
<p>本文详细介绍了如何使用Python和MCP SDK快速构建一个功能完整的天气服务器。通过实现get-alerts和get-forecast两个工具，我们成功扩展了Claude的能力，使其能够查询实时天气信息。这种模式可以推广到其他领域，为LLM添加各种实用功能。MCP协议的灵活性和Python SDK的易用性使得开发者可以快速构建和集成自定义功能，极大地丰富了LLM的应用场景。</p>
<p><a href="https://www.cnblogs.com/powertoolsteam/p/18974246" target="_blank">MCP 核心架构解析</a></p>

</div>
<div id="MySignature" role="contentinfo">
    <hr>
<br>
<p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">本文是由葡萄城技术开发团队发布，转载请注明出处：<a href="https://www.grapecity.com.cn/" target="_blank">葡萄城官网</a></p>
<!--p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">了解企业级低代码开发平台，请前往<a href="https://www.grapecity.com.cn/solutions/huozige" target="_blank">活字格</a>
</p><p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">了解可嵌入您系统的在线 Excel，请前往<a href="https://www.grapecity.com.cn/developer/spreadjs" target="_blank">SpreadJS纯前端表格控件</a></p>
<p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">了解嵌入式的商业智能和报表软件，请前往<a href="https://www.grapecity.com.cn/solutions/wyn" target="_blank">Wyn Enterprise
</a></p-->

<br>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-15 12:07">2025-07-15 12:07</span>&nbsp;
<a href="https://www.cnblogs.com/powertoolsteam">葡萄城技术团队</a>&nbsp;
阅读(<span id="post_view_count">354</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18985414);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18985414', targetLink: 'https://www.cnblogs.com/powertoolsteam/p/18985414', title: 'MCP快速入门—快速构建自己的服务器' })">举报</a>
</div>
        