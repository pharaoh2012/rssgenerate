
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/changelzj/p/18707982" title="发布于 2025-02-10 15:35">
    <span role="heading" aria-level="2">使用python实现一个可自动部署hexo博客的gitee webhook</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><strong><a href="https://blog.liuzijian.com/post/af1f30e3-c846-650e-9a3f-34e326bf950d.html" target="_blank" rel="noopener nofollow">文章首发在我的博客：https://blog.liuzijian.com/post/af1f30e3-c846-650e-9a3f-34e326bf950d.html</a></strong></p>
<p>hexo博客想在提交后自动部署，使用持续集成工具比较繁琐也消耗资源，于是用python脚本加gitee webhook实现自动化拉取打包部署。</p>
<h2 id="1-安装-pip-和-python">1. 安装 <code>pip</code> 和 <code>Python</code></h2>
<p>首先，确保你已经安装了 Python。如果没有安装，可以使用以下命令来安装 Python 和 <code>pip</code>：</p>
<h3 id="11-检查-python-版本">1.1 检查 Python 版本</h3>
<pre><code class="language-bash">python3 --version
</code></pre>
<p>如果你已经安装了 Python 3.x 版本，可以跳过安装 Python 的步骤。否则，继续安装：</p>
<h3 id="12-安装-python-3">1.2 安装 Python 3</h3>
<pre><code class="language-bash">sudo yum install python3 -y  # 适用于 CentOS 或其他 RHEL 系统
</code></pre>
<h3 id="13-安装-pip">1.3 安装 <code>pip</code></h3>
<p>安装 <code>pip</code> 的方法：</p>
<pre><code class="language-bash">sudo yum install python3-pip -y  # CentOS/RHEL 系统
</code></pre>
<p>安装完成后，确认 <code>pip</code> 是否已经成功安装：</p>
<pre><code class="language-bash">pip3 --version
</code></pre>
<h2 id="2-使用-pip-安装依赖">2. 使用 <code>pip</code> 安装依赖</h2>
<p>一旦 <code>pip</code> 安装好，你可以使用以下命令来安装需要的库：</p>
<pre><code class="language-bash">pip3 install flask gitpython
</code></pre>
<p>之后你就可以运行之前的 Python Webhook 脚本了。</p>
<h2 id="3编写脚本">3.编写脚本</h2>
<pre><code class="language-bash">vim webhook.py
</code></pre>
<pre><code class="language-python">import os
import subprocess
from flask import Flask, request, jsonify
import git

app = Flask(__name__)

# 配置你的本地仓库路径和构建命令
REPO_PATH = "/path/to/your/hexo/blog"
PUBLIC_PATH = os.path.join(REPO_PATH, 'public')

# 拉取代码的函数
def pull_code():
    try:
        repo = git.Repo(REPO_PATH)
        origin = repo.remotes.origin
        origin.pull()
        return True
    except Exception as e:
        print(f"Failed to pull code: {e}")
        return False

# 构建 Hexo 站点的函数
def build_hexo():
    try:
        # 执行 Hexo 命令
        subprocess.run(["npm", "run", "build"], cwd=REPO_PATH, check=True)
        
        return True
    except subprocess.CalledProcessError as e:
        print(f"Failed to build Hexo: {e}")
        return False

@app.route("/webhook", methods=["POST"])
def webhook():
    # 验证请求是否来自 Gitee
    if request.headers.get("X-Gitee-Token") != "": #这里改成你设置的密码
        return jsonify({"message": "Unauthorized"}), 401

    # 获取事件类型，确保是 push 事件
    event = request.headers.get("X-Gitee-Event")
    if event != "Push Hook":
        return jsonify({"message": "Not a push event"}), 400

    # 拉取代码并构建
    if pull_code() and build_hexo():
        return jsonify({"message": "Hexo build success"}), 200
    else:
        return jsonify({"message": "Failed to pull or build"}), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)

</code></pre>
<p>代码优化，加入线程控制，防止webhook链接被并发调用后，两个hook任务线程同时执行出现安全问题。</p>
<pre><code class="language-python">import os
import subprocess
from flask import Flask, request, jsonify
import git
import threading

app = Flask(__name__)

# 配置你的本地仓库路径和构建命令
REPO_PATH = "/blog"
PUBLIC_PATH = os.path.join(REPO_PATH, 'public')

lock = threading.Lock()
is_building = False  # 标志位，用于指示是否有任务正在进行

# 拉取代码的函数
def pull_code():
    try:
        repo = git.Repo(REPO_PATH)
        origin = repo.remotes.origin
        origin.pull()
        return True
    except Exception as e:
        print(f"Failed to pull code: {e}")
        return False

# 构建 Hexo 站点的函数
def build_hexo():
    try:
        # 执行 Hexo 的清理和生成命令
        subprocess.run(["npm", "run", "build"], cwd=REPO_PATH, check=True)
        #subprocess.run(["hexo", "generate"], cwd=REPO_PATH, check=True)
        return True
    except subprocess.CalledProcessError as e:
        print(f"Failed to build Hexo: {e}")
        return False

@app.route("/webhook", methods=["POST"])
def webhook():

    global is_building

    # 验证请求是否来自 Gitee
    if request.headers.get("X-Gitee-Token") != "":
        return jsonify({"message": "Unauthorized"}), 401

    # 获取事件类型，确保是 push 事件
    event = request.headers.get("X-Gitee-Event")
    if event != "Push Hook":
        return jsonify({"message": "Not a push event"}), 400

    if is_building:
        return jsonify({"message": "Build in progress, try again later"}), 429

    with lock:
        is_building = True  # 设置标志位为 True，表示任务开始

        try:
            # 拉取代码并构建
            if pull_code() and build_hexo():
                return jsonify({"message": "Hexo build success"}), 200
            else:
                return jsonify({"message": "Failed to pull or build"}), 500

        finally:
            is_building = False  # 重置标志位，表示任务结束

            

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
</code></pre>
<h2 id="4执行脚本">4.执行脚本</h2>
<pre><code class="language-bash">nohup python3 webhook.py &amp;
</code></pre>
<h2 id="5配置hook到gitee">5.配置hook到gitee</h2>
<p>设置好签名（密码），设置回调地址，勾选两项</p>
<p><img src="https://img2024.cnblogs.com/blog/3570203/202502/3570203-20250210153431367-1249653321.png" alt="image" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.4498912874479167" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-10 15:35">2025-02-10 15:35</span>&nbsp;
<a href="https://www.cnblogs.com/changelzj">LiuZijian</a>&nbsp;
阅读(<span id="post_view_count">92</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18707982" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18707982);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18707982', targetLink: 'https://www.cnblogs.com/changelzj/p/18707982', title: '使用python实现一个可自动部署hexo博客的gitee webhook' })">举报</a>
</div>
        