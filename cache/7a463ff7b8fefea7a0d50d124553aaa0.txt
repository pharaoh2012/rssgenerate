
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/netcore5/p/18687375" title="发布于 2025-01-23 11:10">
    <span role="heading" aria-level="2">ASP.NET Core 快速轻量级的浏览器检测和设备检测库</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在 .NET Framework 4.7 中那样，通过 <code>HttpContext.Request</code> 的 <code>Browser</code> 属性轻松获取发起 HTTP 请求的浏览器信息，ASP.NET Core 并未直接提供这一功能，现在有了 BrowserDetector 这个强大的 NuGet 包，你可以在 ASP.NET Core 应用中轻松实现浏览器、设备类型以及操作系统的检测。<br>
BrowserDetector 支持以下 .NET 框架版本： .NET 6/7/8</p>
<h2 id="如何使用-browserdetector">如何使用 BrowserDetector</h2>
<h3 id="安装-nuget-包">安装 NuGet 包</h3>
<p>首先需要安装 BrowserDetector NuGet 包</p>
<pre><code class="language-shell">Install-Package Shyjus.BrowserDetector
</code></pre>
<h3 id="启用浏览器检测服务">启用浏览器检测服务</h3>
<p>在你的启动代码中，调用 <code>IServiceCollection</code> 上的 <code>AddBrowserDetection</code> 方法来启用浏览器检测服务：</p>
<pre><code class="language-csharp">services.AddBrowserDetection();
</code></pre>
<h3 id="注入并使用-ibrowserdetector">注入并使用 IBrowserDetector</h3>
<p>接下来，你可以在控制器类、视图文件或中间件中注入 <code>IBrowserDetector</code>，并访问其 <code>Browser</code> 属性来获取浏览器相关信息。</p>
<h4 id="在控制器中的使用示例">在控制器中的使用示例</h4>
<pre><code class="language-csharp">public class HomeController : Controller
{
    private readonly IBrowserDetector browserDetector;

    public HomeController(IBrowserDetector browserDetector)
    {
        this.browserDetector = browserDetector;
    }

    public IActionResult Index()
    {
        var browser = this.browserDetector.Browser;
        // 按需使用 browser 对象

        return View();
    }
}
</code></pre>
<h4 id="在视图中的使用示例">在视图中的使用示例</h4>
<pre><code class="language-html">@inject Shyjus.BrowserDetection.IBrowserDetector browserDetector

&lt;h2&gt;@browserDetector.Browser.Name&lt;/h2&gt;
&lt;h3&gt;@browserDetector.Browser.Version&lt;/h3&gt;
&lt;h3&gt;@browserDetector.Browser.OS&lt;/h3&gt;
&lt;h3&gt;@browserDetector.Browser.DeviceType&lt;/h3&gt;
</code></pre>
<h4 id="在自定义中间件中的使用">在自定义中间件中的使用</h4>
<p>你还可以将 <code>IBrowserDetector</code> 注入到中间件的 <code>InvokeAsync</code> 方法中</p>
<pre><code class="language-csharp">public class MyCustomMiddleware
{
    private RequestDelegate next;

    public MyCustomMiddleware(RequestDelegate next)
    {
        this.next = next;
    }

    public async Task InvokeAsync(HttpContext httpContext, IBrowserDetector browserDetector)
    {
        var browser = browserDetector.Browser;

        if (browser.Type == BrowserType.Edge)
        {
            await httpContext.Response.WriteAsync("Have you tried the new chromuim based edge ?");
        }
        else
        {
            await this.next.Invoke(httpContext);
        }
    }
}
</code></pre>
<h2 id="解读-ibrowserdetectorname-返回的名称值">解读 IBrowserDetector.Name 返回的名称值</h2>
<p><code>IBrowserDetector.Name</code> 返回的名称值具有特定含义，以下是常见名称的解释：</p>
<ul>
<li>Firefox：Firefox 浏览器。</li>
<li>EdgeChromium：基于 Chromium 的新版 Microsoft Edge 浏览器。</li>
<li>Edge：旧版 Edge 浏览器。</li>
<li>Safari：Safari 浏览器。</li>
<li>Chrome：Chrome 浏览器。</li>
</ul>
<h2 id="性能影响">性能影响</h2>
<p>你可能会关心添加 BrowserDetector 包对应用性能的影响。经过基准测试，在 Safari 和 Chrome 桌面用户代理上的测试结果显示，检测结果的返回时间大约在 <strong>1 微秒</strong> 左右。堆内存分配会根据输入的不同而有所变化。以下是具体的测试数据：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>平均值</th>
</tr>
</thead>
<tbody>
<tr>
<td>Chrome_Windows</td>
<td>1.057 us</td>
</tr>
<tr>
<td>Safari_Windows</td>
<td>1.093 us</td>
</tr>
</tbody>
</table>
<p>1 微秒仅相当于一百万分之一秒，这意味着 BrowserDetector 对性能的影响微乎其微，你完全可以放心使用它来为你的 ASP.NET Core Web API 应用增添浏览器检测功能。</p>
<p>仓库地址：<a href="https://github.com/kshyju/BrowserDetector" target="_blank" rel="noopener nofollow">https://github.com/kshyju/BrowserDetector</a><br>
<img src="https://img2024.cnblogs.com/blog/1920368/202501/1920368-20250123110842116-1703909603.png" alt="" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.048009772232638886" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-23 11:10">2025-01-23 11:10</span>&nbsp;
<a href="https://www.cnblogs.com/netcore5">今晚打老虎！</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18687375" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18687375);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18687375', targetLink: 'https://www.cnblogs.com/netcore5/p/18687375', title: 'ASP.NET Core 快速轻量级的浏览器检测和设备检测库' })">举报</a>
</div>
        