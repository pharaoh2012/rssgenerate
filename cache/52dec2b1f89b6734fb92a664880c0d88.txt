
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/damaoa/p/18987580" title="发布于 2025-07-16 15:02">
    <span role="heading" aria-level="2">Git命令这样用，代码管理轻松搞定</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="git命令这样用代码管理轻松搞定">Git命令这样用，代码管理轻松搞定</h1>
<p>在日常开发中，Git命令是每个程序员必备的技能。但是面对几十个Git命令，很多同学总是记不住、用不对。今天就来整理一份最实用的Git命令清单，让你的代码管理变得轻松高效。</p>
<h2 id="基础配置命令">基础配置命令</h2>
<p><strong>让Git认识你</strong></p>
<p>在开始使用Git之前，先让Git知道你是谁：</p>
<pre><code class="language-bash"># 设置用户名和邮箱（全局配置）
git config --global user.name "张三"
git config --global user.email "zhangsan@example.com"

# 查看当前配置
git config --list

# 只为当前项目设置（局部配置）
git config user.name "张三"
git config user.email "zhangsan@company.com"
</code></pre>
<p>常用的其他配置：</p>
<pre><code class="language-bash"># 设置默认编辑器
git config --global core.editor "code --wait"

# 设置别名，简化命令
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit

# 现在可以使用简化命令
git st    # 等同于 git status
git co    # 等同于 git checkout
</code></pre>
<h2 id="仓库初始化和克隆">仓库初始化和克隆</h2>
<p><strong>开始你的Git之旅</strong></p>
<h3 id="创建新仓库">创建新仓库</h3>
<pre><code class="language-bash"># 在当前目录初始化Git仓库
git init

# 在指定目录创建新仓库
git init my-project

# 创建裸仓库（用于服务器）
git init --bare my-repo.git
</code></pre>
<h3 id="克隆远程仓库">克隆远程仓库</h3>
<pre><code class="language-bash"># 克隆远程仓库
git clone https://github.com/user/repo.git

# 克隆到指定目录
git clone https://github.com/user/repo.git my-local-name

# 只克隆最新的提交（浅克隆）
git clone --depth 1 https://github.com/user/repo.git

# 克隆指定分支
git clone -b develop https://github.com/user/repo.git
</code></pre>
<h2 id="文件状态管理">文件状态管理</h2>
<p><strong>掌控代码变更</strong></p>
<p>Git文件有四种状态：</p>
<p><img src="https://fastly.jsdelivr.net/gh/bucketio/img9@main/2025/07/16/1752647851765-7750c875-e60c-4c56-a136-e638409eb338.png" alt="" loading="lazy"></p>
<h3 id="查看文件状态">查看文件状态</h3>
<pre><code class="language-bash"># 查看工作区状态
git status

# 简化显示
git status -s

# 查看具体的文件差异
git diff

# 查看暂存区的差异
git diff --staged
</code></pre>
<h3 id="添加文件到暂存区">添加文件到暂存区</h3>
<pre><code class="language-bash"># 添加单个文件
git add filename.txt

# 添加多个文件
git add file1.txt file2.txt

# 添加所有修改的文件
git add .

# 添加所有txt文件
git add *.txt

# 交互式添加（选择性添加文件的部分内容）
git add -p
</code></pre>
<h3 id="撤销操作">撤销操作</h3>
<pre><code class="language-bash"># 撤销工作区的修改
git checkout -- filename.txt

# 撤销暂存区的文件（保留工作区修改）
git reset HEAD filename.txt

# 撤销最后一次提交（保留文件修改）
git reset --soft HEAD~1

# 撤销最后一次提交（丢弃文件修改）
git reset --hard HEAD~1
</code></pre>
<h2 id="提交代码命令">提交代码命令</h2>
<p><strong>记录你的每一次变更</strong></p>
<h3 id="基本提交操作">基本提交操作</h3>
<pre><code class="language-bash"># 提交暂存区的文件
git commit -m "提交信息"

# 添加文件并提交（跳过git add）
git commit -am "提交信息"

# 修改最后一次提交信息
git commit --amend -m "新的提交信息"

# 向最后一次提交添加文件
git add forgotten-file.txt
git commit --amend --no-edit
</code></pre>
<h3 id="规范化提交信息">规范化提交信息</h3>
<pre><code class="language-bash"># 功能开发
git commit -m "feat: 新增用户登录功能"

# Bug修复
git commit -m "fix: 修复密码验证逻辑错误"

# 文档更新
git commit -m "docs: 更新API使用说明"

# 代码重构
git commit -m "refactor: 优化数据库查询性能"

# 样式调整
git commit -m "style: 统一代码缩进格式"
</code></pre>
<h3 id="详细提交信息">详细提交信息</h3>
<pre><code class="language-bash"># 包含详细描述的提交
git commit -m "fix: 修复用户注册邮箱验证问题

- 修复邮箱格式验证正则表达式
- 添加邮箱重复性检查
- 优化错误提示信息显示

Closes #123"
</code></pre>
<h2 id="分支管理命令">分支管理命令</h2>
<p><strong>并行开发的利器</strong></p>
<h3 id="查看分支">查看分支</h3>
<pre><code class="language-bash"># 查看本地分支
git branch

# 查看远程分支
git branch -r

# 查看所有分支
git branch -a

# 查看分支详细信息
git branch -v
</code></pre>
<h3 id="创建和切换分支">创建和切换分支</h3>
<pre><code class="language-bash"># 创建新分支
git branch feature-login

# 切换分支
git checkout feature-login

# 创建并切换分支（一步完成）
git checkout -b feature-login

# 使用新语法创建并切换分支
git switch -c feature-login

# 切换到上一个分支
git checkout -
</code></pre>
<h3 id="分支合并和删除">分支合并和删除</h3>
<pre><code class="language-bash"># 合并分支（先切换到目标分支）
git checkout main
git merge feature-login

# 删除本地分支
git branch -d feature-login

# 强制删除分支
git branch -D feature-login

# 删除远程分支
git push origin --delete feature-login
</code></pre>
<h2 id="远程仓库操作">远程仓库操作</h2>
<p><strong>与团队协作的桥梁</strong></p>
<h3 id="查看远程仓库">查看远程仓库</h3>
<pre><code class="language-bash"># 查看远程仓库
git remote

# 查看远程仓库详细信息
git remote -v

# 查看特定远程仓库信息
git remote show origin
</code></pre>
<h3 id="添加和删除远程仓库">添加和删除远程仓库</h3>
<pre><code class="language-bash"># 添加远程仓库
git remote add origin https://github.com/user/repo.git

# 修改远程仓库地址
git remote set-url origin https://github.com/user/new-repo.git

# 删除远程仓库
git remote remove origin
</code></pre>
<h3 id="推送和拉取代码">推送和拉取代码</h3>
<pre><code class="language-bash"># 推送到远程仓库
git push origin main

# 首次推送并建立跟踪关系
git push -u origin main

# 推送所有分支
git push origin --all

# 拉取远程代码
git pull origin main

# 获取远程代码但不合并
git fetch origin

# 强制推送（谨慎使用）
git push --force origin main
</code></pre>
<h2 id="查看历史记录">查看历史记录</h2>
<p><strong>回顾代码演进历程</strong></p>
<h3 id="基本日志查看">基本日志查看</h3>
<pre><code class="language-bash"># 查看提交历史
git log

# 单行显示提交历史
git log --oneline

# 图形化显示分支历史
git log --graph --oneline

# 查看最近3次提交
git log -3

# 查看指定作者的提交
git log --author="张三"
</code></pre>
<h3 id="高级日志筛选">高级日志筛选</h3>
<pre><code class="language-bash"># 查看指定时间范围的提交
git log --since="2024-01-01" --until="2024-01-31"

# 查看包含特定关键词的提交
git log --grep="登录"

# 查看指定文件的修改历史
git log -- src/main.js

# 查看文件的详细修改内容
git log -p src/main.js

# 查看提交统计信息
git log --stat
</code></pre>
<h2 id="暂存工作状态">暂存工作状态</h2>
<p><strong>临时保存未完成的工作</strong></p>
<h3 id="基本stash操作">基本stash操作</h3>
<pre><code class="language-bash"># 暂存当前工作
git stash

# 带描述的暂存
git stash push -m "正在开发登录功能"

# 查看stash列表
git stash list

# 恢复最新的stash
git stash pop

# 应用指定的stash
git stash apply stash@{0}

# 删除stash
git stash drop stash@{0}
</code></pre>
<h3 id="高级stash操作">高级stash操作</h3>
<pre><code class="language-bash"># 只暂存已跟踪的文件
git stash --keep-index

# 包含未跟踪的文件
git stash -u

# 交互式暂存
git stash -p

# 从stash创建分支
git stash branch feature-temp stash@{0}
</code></pre>
<h2 id="实用技巧命令">实用技巧命令</h2>
<p><strong>提高工作效率的秘诀</strong></p>
<h3 id="文件操作">文件操作</h3>
<pre><code class="language-bash"># 删除文件
git rm filename.txt

# 重命名文件
git mv oldname.txt newname.txt

# 停止跟踪文件但保留本地文件
git rm --cached filename.txt

# 查看文件内容
git show HEAD:filename.txt
</code></pre>
<h3 id="标签管理">标签管理</h3>
<pre><code class="language-bash"># 创建标签
git tag v1.0.0

# 创建带描述的标签
git tag -a v1.0.0 -m "版本1.0.0发布"

# 查看标签列表
git tag

# 推送标签到远程
git push origin v1.0.0

# 推送所有标签
git push origin --tags

# 删除标签
git tag -d v1.0.0
git push origin --delete v1.0.0
</code></pre>
<h3 id="搜索和定位">搜索和定位</h3>
<pre><code class="language-bash"># 在代码中搜索
git grep "function"

# 查找引入bug的提交
git bisect start
git bisect bad HEAD
git bisect good v1.0.0

# 查看文件的每一行是谁修改的
git blame filename.txt

# 查看两个提交之间的差异
git diff commit1..commit2
</code></pre>
<h2 id="常见问题解决">常见问题解决</h2>
<p><strong>遇到问题不慌张</strong></p>
<h3 id="提交相关问题">提交相关问题</h3>
<pre><code class="language-bash"># 合并多个提交为一个
git rebase -i HEAD~3

# 修改历史提交信息
git rebase -i HEAD~3
# 将pick改为reword

# 撤销merge
git reset --hard HEAD~1

# 查找丢失的提交
git reflog
git cherry-pick commit-hash
</code></pre>
<h3 id="冲突解决">冲突解决</h3>
<pre><code class="language-bash"># 查看冲突文件
git status

# 手动解决冲突后
git add 冲突文件
git commit

# 放弃merge
git merge --abort

# 使用工具解决冲突
git mergetool
</code></pre>
<h2 id="git命令速查表">Git命令速查表</h2>
<p><strong>常用命令一览</strong></p>
<p><img src="https://fastly.jsdelivr.net/gh/bucketio/img10@main/2025/07/16/1752648148602-b920e2f4-2940-4d57-a609-05a38f09bf0f.png" alt="" loading="lazy"></p>
<table>
<thead>
<tr>
<th>功能</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>初始化</td>
<td><code>git init</code></td>
<td>初始化仓库</td>
</tr>
<tr>
<td>克隆</td>
<td><code>git clone &lt;url&gt;</code></td>
<td>克隆远程仓库</td>
</tr>
<tr>
<td>状态</td>
<td><code>git status</code></td>
<td>查看工作区状态</td>
</tr>
<tr>
<td>添加</td>
<td><code>git add .</code></td>
<td>添加所有文件到暂存区</td>
</tr>
<tr>
<td>提交</td>
<td><code>git commit -m "msg"</code></td>
<td>提交代码</td>
</tr>
<tr>
<td>推送</td>
<td><code>git push origin main</code></td>
<td>推送到远程分支</td>
</tr>
<tr>
<td>拉取</td>
<td><code>git pull origin main</code></td>
<td>拉取远程代码</td>
</tr>
<tr>
<td>分支</td>
<td><code>git checkout -b &lt;name&gt;</code></td>
<td>创建并切换分支</td>
</tr>
<tr>
<td>合并</td>
<td><code>git merge &lt;branch&gt;</code></td>
<td>合并分支</td>
</tr>
<tr>
<td>日志</td>
<td><code>git log --oneline</code></td>
<td>查看提交历史</td>
</tr>
</tbody>
</table>
<h2 id="总结">总结</h2>
<p>掌握Git命令不是一天的事情，但是通过系统的学习和不断的实践，你会发现Git其实并没有想象中那么复杂。记住这些关键点：</p>
<ol>
<li><strong>从基础开始</strong>：先掌握add、commit、push等基本命令</li>
<li><strong>理解工作流</strong>：明白工作区、暂存区、本地仓库的关系</li>
<li><strong>多加练习</strong>：在实际项目中不断使用和总结</li>
<li><strong>善用别名</strong>：为常用命令设置别名，提高效率</li>
</ol>
<p>记住，Git是工具，不是障碍。掌握了这些命令，你的代码管理将会变得游刃有余！</p>
<hr>
<p>觉得这篇文章对你有帮助吗？欢迎<strong>点赞</strong>、<strong>关注</strong>、<strong>推荐</strong>给更多的小伙伴！</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-16 15:02">2025-07-16 15:02</span>&nbsp;
<a href="https://www.cnblogs.com/damaoa">大毛啊</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18987580);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18987580', targetLink: 'https://www.cnblogs.com/damaoa/p/18987580', title: 'Git命令这样用，代码管理轻松搞定' })">举报</a>
</div>
        