
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/laugh12321/p/18636124" title="发布于 2024-12-27 16:35">
    <span role="heading" aria-level="2">TensorRT-YOLO：灵活易用的 YOLO 部署工具</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>🚀TensorRT-YOLO 是一款专为 NVIDIA 设备设计的<strong>易用灵活</strong>、<strong>极致高效</strong>的<strong>YOLO系列</strong>推理部署工具。项目不仅集成了 TensorRT 插件以增强后处理效果，还使用了 CUDA 核函数以及 CUDA 图来加速推理。TensorRT-YOLO 提供了 C++ 和 Python 推理的支持，旨在提供📦<strong>开箱即用</strong>的部署体验。包括 <a href="https://github.com/laugh12321/TensorRT-YOLO/tree/main/examples/detect/" target="_blank" rel="noopener nofollow">目标检测</a>、<a href="https://github.com/laugh12321/TensorRT-YOLO/tree/main/examples/segment/" target="_blank" rel="noopener nofollow">实例分割</a>、<a href="https://github.com/laugh12321/TensorRT-YOLO/tree/main/examples/classify/" target="_blank" rel="noopener nofollow">图像分类</a>、<a href="https://github.com/laugh12321/TensorRT-YOLO/tree/main/examples/pose/" target="_blank" rel="noopener nofollow">姿态识别</a>、<a href="https://github.com/laugh12321/TensorRT-YOLO/tree/main/examples/obb/" target="_blank" rel="noopener nofollow">旋转目标检测</a>、<a href="https://github.com/laugh12321/TensorRT-YOLO/tree/main/examples/VideoPipe" target="_blank" rel="noopener nofollow">视频分析</a>等任务场景，满足开发者<strong>多场景</strong>的部署需求。</p>
<div align="center">
    <img src="https://img2024.cnblogs.com/blog/2468833/202412/2468833-20241227162348754-2136545424.gif" width="800">
</div>
<div align="center">
    <table>
        <tbody><tr>
            <td>
                <img src="https://img2024.cnblogs.com/blog/2468833/202412/2468833-20241227162628475-1060794910.jpg" height="300" width="450">
                <center>Detect</center>
            </td>
            <td>
                <img src="https://img2024.cnblogs.com/blog/2468833/202412/2468833-20241227162646310-238494647.jpg" height="300" width="450">
                <center>Segment</center>
            </td>
        </tr>
        <tr>
            <td>
                <img src="https://img2024.cnblogs.com/blog/2468833/202412/2468833-20241227162717862-1594112552.jpg" height="300" width="450">
                <center>Pose</center>
            </td>
            <td>
                <img src="https://img2024.cnblogs.com/blog/2468833/202412/2468833-20241227162742389-458578113.png" height="300" width="450">
                <center>OBB</center>
            </td>
        </tr>
    </tbody></table>
</div>
<p>项目地址：TensorRT-YOLO GitHub:<a href="https://github.com/laugh12321/TensorRT-YOLO" target="_blank" rel="noopener nofollow">https://github.com/laugh12321/TensorRT-YOLO</a></p>
<h2 id="-主要特性">✨ 主要特性</h2>
<ul>
<li><strong>多样化的YOLO支持</strong>：全面兼容YOLOv3至YOLOv11以及PP-YOLOE和PP-YOLOE+，满足不同版本需求。</li>
<li><strong>多场景应用</strong>：提供<a href="https://github.com/laugh12321/TensorRT-YOLO/tree/main/examples/detect/" target="_blank" rel="noopener nofollow">Detect</a>、<a href="https://github.com/laugh12321/TensorRT-YOLO/tree/main/examples/segment/" target="_blank" rel="noopener nofollow">Segment</a>、<a href="https://github.com/laugh12321/TensorRT-YOLO/tree/main/examples/classify/" target="_blank" rel="noopener nofollow">Classify</a>、<a href="https://github.com/laugh12321/TensorRT-YOLO/tree/main/examples/pose/" target="_blank" rel="noopener nofollow">Pose</a>、<a href="https://github.com/laugh12321/TensorRT-YOLO/tree/main/examples/obb/" target="_blank" rel="noopener nofollow">OBB</a>等多样化场景的示例代码。</li>
<li><strong>模型优化与推理加速</strong>：
<ul>
<li><strong>ONNX支持</strong>：支持ONNX模型的静态和动态导出，包括TensorRT自定义插件支持，简化模型部署流程。</li>
<li><strong>TensorRT集成</strong>：集成TensorRT插件，包括自定义插件，加速Detect, Segment, Pose, OBB等场景的后处理，提升推理效率。</li>
<li><strong>CUDA加速</strong>：利用CUDA核函数优化前处理，CUDA图技术加速推理流程，实现高性能计算。</li>
</ul>
</li>
<li><strong>语言支持</strong>：支持C++和Python（通过Pybind11映射，提升Python推理速度），满足不同编程语言需求。</li>
<li><strong>部署便捷性</strong>：
<ul>
<li><strong>动态库编译</strong>：提供动态库编译支持，方便调用和部署。</li>
<li><strong>无第三方依赖</strong>：全部功能使用标准库实现，无需额外依赖，简化部署流程。</li>
</ul>
</li>
<li><strong>快速开发与部署</strong>：
<ul>
<li><strong>CLI工具</strong>：提供命令行界面（CLI）工具，实现快速模型导出和推理。</li>
<li><strong>跨平台支持</strong>：支持Windows、Linux、ARM、x86等多种设备，适应不同硬件环境。</li>
<li><strong>Docker部署</strong>：支持Docker一键部署，简化环境配置和部署流程。</li>
</ul>
</li>
<li><strong>TensorRT兼容性</strong>：兼容TensorRT 10.x版本，确保与最新技术兼容。</li>
</ul>
<h2 id="-文档教程">🔮 文档教程</h2>
<ul>
<li><strong>安装文档</strong>
<ul>
<li><a href="https://github.com/laugh12321/TensorRT-YOLO/tree/main/docs/cn/build_and_install.md" target="_blank" rel="noopener nofollow">📦 快速编译安装</a></li>
</ul>
</li>
<li><strong>快速开始</strong>
<ul>
<li><a href="#quick-start-python" rel="noopener nofollow">✴️ Python SDK快速使用</a></li>
<li><a href="#quick-start-cpp" rel="noopener nofollow">✴️ C++ SDK快速使用</a></li>
</ul>
</li>
<li><strong>使用示例</strong>
<ul>
<li><a href="https://github.com/laugh12321/TensorRT-YOLO/tree/main/examples/detect/README.md" target="_blank" rel="noopener nofollow">目标检测 示例</a></li>
<li><a href="https://github.com/laugh12321/TensorRT-YOLO/tree/main/examples/segment/README.md" target="_blank" rel="noopener nofollow">实例分割 示例</a></li>
<li><a href="https://github.com/laugh12321/TensorRT-YOLO/tree/main/examples/classify/README.md" target="_blank" rel="noopener nofollow">图像分类 示例</a></li>
<li><a href="https://github.com/laugh12321/TensorRT-YOLO/tree/main/examples/pose/README.md" target="_blank" rel="noopener nofollow">姿态识别 示例</a></li>
<li><a href="https://github.com/laugh12321/TensorRT-YOLO/tree/main/examples/obb/README.md" target="_blank" rel="noopener nofollow">旋转目标检测 示例</a></li>
<li><a href="https://github.com/laugh12321/TensorRT-YOLO/tree/main/examples/VideoPipe/README.md" target="_blank" rel="noopener nofollow">📹视频分析 示例</a></li>
</ul>
</li>
<li><strong>API文档</strong>
<ul>
<li>Python API文档（⚠️ 未实现）</li>
<li>C++ API文档（⚠️ 未实现）</li>
</ul>
</li>
<li><strong>常见问题</strong>
<ul>
<li>⚠️ 收集中 ...</li>
</ul>
</li>
<li><strong>模型支持列表</strong>
<ul>
<li><a href="#support-models" rel="noopener nofollow">🖥️ 模型支持列表</a></li>
</ul>
</li>
</ul>
<h2 id="-快速开始">💨 快速开始</h2>
<h3 id="-前置依赖">🔸 前置依赖</h3>
<ul>
<li>推荐 CUDA 版本 &gt;= 11.0.1 （CUDA 最低版本 11.0.1）</li>
<li>推荐 TensorRT 版本 &gt;= 8.6.1 （TensorRT 最低版本 8.6.1）</li>
<li>OS: Linux x86_64 (推荐) arm / Windows /</li>
</ul>
<h3 id="-快速安装">🎆 快速安装</h3>
<ul>
<li>参考<a href="https://github.com/laugh12321/TensorRT-YOLO/tree/main/docs/cn/build_and_install.md" target="_blank" rel="noopener nofollow">📦 快速编译安装</a>文档</li>
</ul>
<blockquote>
<p>在进行推理之前，请参考<a href="https://github.com/laugh12321/TensorRT-YOLO/tree/main/docs/cn/model_export.md" target="_blank" rel="noopener nofollow">🔧 CLI 导出模型</a>文档，导出适用于该项目推理的ONNX模型并构建为TensorRT引擎。</p>
</blockquote>
<h3 id="python-sdk快速开始">Python SDK快速开始<div id="quick-start-python"></div></h3>
<h4 id="python-cli-推理示例">Python CLI 推理示例</h4>
<blockquote>
<p>使用 <code>--cudaGraph</code> 选项可以显著提升推理速度，但需知此功能仅适用于静态模型。</p>
<p>通过 <code>-m, --mode</code> 参数可以选择不同的模型类型，其中 <code>0</code> 代表检测（Detect）、<code>1</code> 代表旋转边界框（OBB）、<code>2</code> 代表分割（Segment）、<code>3</code> 代表姿态估计（Pose）、<code>4</code> 代表图像分类（Classify）。</p>
</blockquote>
<ol>
<li>
<p>使用 <code>tensorrt_yolo</code> 库的 <code>trtyolo</code> 命令行工具进行推理。运行以下命令查看帮助信息：</p>
<pre><code class="language-bash">trtyolo infer --help
</code></pre>
</li>
<li>
<p>运行以下命令进行推理：</p>
<pre><code class="language-bash">trtyolo infer -e models/yolo11n.engine -m 0 -i images -o output -l labels.txt --cudaGraph
</code></pre>
<p>推理结果将保存至 <code>output</code> 文件夹，并生成可视化结果。</p>
</li>
</ol>
<h4 id="python-推理示例">Python 推理示例</h4>
<blockquote>
<p><code>DeployDet</code>、<code>DeployOBB</code>、<code>DeploySeg</code>、<code>DeployPose</code> 和 <code>DeployCls</code> 分别对应于检测（Detect）、方向边界框（OBB）、分割（Segment）、姿态估计（Pose）和图像分类（Classify）模型。</p>
<p>对于这些模型，<code>CG</code> 版本利用 CUDA Graph 来进一步加速推理过程，但请注意，这一功能仅限于静态模型。</p>
</blockquote>
<pre><code class="language-python">import cv2
from tensorrt_yolo.infer import DeployDet, generate_labels, visualize

# 初始化模型
model = DeployDet("yolo11n-with-plugin.engine")
# 加载图片
im = cv2.imread("test_image.jpg")
# 模型预测
result = model.predict(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))
print(f"==&gt; detect result: {result}")
# 可视化
labels = generate_labels("labels.txt")
vis_im = visualize(im, result, labels)
cv2.imwrite("vis_image.jpg", vis_im)
</code></pre>
<h3 id="c-sdk快速开始">C++ SDK快速开始<div id="quick-start-cpp"></div></h3>
<blockquote>
<p><code>DeployDet</code>、<code>DeployOBB</code>、<code>DeploySeg</code>、<code>DeployPose</code> 和 <code>DeployCls</code> 分别对应于检测（Detect）、方向边界框（OBB）、分割（Segment）、姿态估计（Pose）和图像分类（Classify）模型。</p>
<p>对于这些模型，<code>CG</code> 版本利用 CUDA Graph 来进一步加速推理过程，但请注意，这一功能仅限于静态模型。</p>
</blockquote>
<pre><code class="language-cpp">#include &lt;opencv2/opencv.hpp&gt;
// 为了方便调用，模块除使用 CUDA、TensorRT 其余均使用标准库实现
#include "deploy/vision/inference.hpp"
#include "deploy/vision/result.hpp"

int main() {
    // 初始化模型
    auto model = deploy::DeployDet("yolo11n-with-plugin.engine");
    // 加载图片
    cv::Mat cvim = cv::imread("test_image.jpg");
    cv::cvtColor(cvim, cvim, cv::COLOR_BGR2RGB);
    deploy::Image im(cvim.data, cvim.cols, cvim.rows);
    // 模型预测
    deploy::DetResult result = model.predict(im);
    // 可视化（代码省略）
    // ...
    return 0;
}
</code></pre>
<p>更多部署案例请参考<a href="https://github.com/laugh12321/TensorRT-YOLO/tree/main/examples" target="_blank" rel="noopener nofollow">模型部署示例</a> .</p>
<h2 id="️-模型支持列表">🖥️ 模型支持列表<div id="support-models"></div></h2>
<div align="center">
    <table>
        <tbody><tr>
            <td>
                <img src="https://img2024.cnblogs.com/blog/2468833/202412/2468833-20241227163305177-1675181700.jpg" height="300">
                <center>Detect</center>
            </td>
            <td>
                <img src="https://img2024.cnblogs.com/blog/2468833/202412/2468833-20241227163256989-812254020.jpg" height="300">
                <center>Segment</center>
            </td>
        </tr>
        <tr>
            <td>
                <img src="https://img2024.cnblogs.com/blog/2468833/202412/2468833-20241227163300205-880036640.jpg" height="300">
                <center>Pose</center>
            </td>
            <td>
                <img src="https://img2024.cnblogs.com/blog/2468833/202412/2468833-20241227163302691-64967682.jpg" height="300">
                <center>OBB</center>
            </td>
        </tr>
    </tbody></table>
</div>
<p>符号说明: (1)  ✅ : 已经支持; (2) ❔: 正在进行中; (3) ❎ : 暂不支持; (4) 🟢 : 导出自行实现，即可推理. <br></p>
<div style="text-align: center">
  <table border="1" style="border-collapse: collapse; width: 100%">
    <tbody><tr>
      <th style="text-align: center">任务场景</th>
      <th style="text-align: center">模型</th>
      <th style="text-align: center">CLI 导出</th>
      <th style="text-align: center">推理部署</th>
    </tr>
    <tr>
      <td>Detect</td>
      <td><a href="https://github.com/ultralytics/yolov3" rel="noopener nofollow">ultralytics/yolov3</a></td>
      <td>✅</td>
      <td>✅</td>
    </tr>
    <tr>
      <td>Detect</td>
      <td><a href="https://github.com/ultralytics/yolov5" rel="noopener nofollow">ultralytics/yolov5</a></td>
      <td>✅</td>
      <td>✅</td>
    </tr>
    <tr>
      <td>Detect</td>
      <td><a href="https://github.com/meituan/YOLOv6" rel="noopener nofollow">meituan/YOLOv6</a></td>
      <td>❎ 参考<a href="https://github.com/meituan/YOLOv6/tree/main/deploy/ONNX#tensorrt-backend-tensorrt-version-800" rel="noopener nofollow">官方导出教程</a></td>
      <td>✅</td>
    </tr>
    <tr>
      <td>Detect</td>
      <td><a href="https://github.com/WongKinYiu/yolov7" rel="noopener nofollow">WongKinYiu/yolov7</a></td>
      <td>❎ 参考<a href="https://github.com/WongKinYiu/yolov7#export" rel="noopener nofollow">官方导出教程</a></td>
      <td>✅</td>
    </tr>
    <tr>
      <td>Detect</td>
      <td><a href="https://github.com/WongKinYiu/yolov9" rel="noopener nofollow">WongKinYiu/yolov9</a></td>
      <td>❎ 参考<a href="https://github.com/WongKinYiu/yolov9/issues/130#issue-2162045461" rel="noopener nofollow">官方导出教程</a></td>
      <td>✅</td>
    </tr>
    <tr>
      <td>Detect</td>
      <td><a href="https://github.com/THU-MIG/yolov10" rel="noopener nofollow">THU-MIG/yolov10</a></td>
      <td>✅</td>
      <td>✅</td>
    </tr>
    <tr>
      <td>Detect</td>
      <td><a href="https://github.com/ultralytics/ultralytics" rel="noopener nofollow">ultralytics/ultralytics</a></td>
      <td>✅</td>
      <td>✅</td>
    </tr>
    <tr>
      <td>Detect</td>
      <td><a href="https://github.com/PaddlePaddle/PaddleDetection" rel="noopener nofollow">PaddleDetection/PP-YOLOE+</a></td>
      <td>✅</td>
      <td>✅</td>
    </tr>
    <tr>
      <td>Segment</td>
      <td><a href="https://github.com/ultralytics/yolov3" rel="noopener nofollow">ultralytics/yolov3</a></td>
      <td>✅</td>
      <td>✅</td>
    </tr>
    <tr>
      <td>Segment</td>
      <td><a href="https://github.com/ultralytics/yolov5" rel="noopener nofollow">ultralytics/yolov5</a></td>
      <td>✅</td>
      <td>✅</td>
    </tr>
    <tr>
      <td>Segment</td>
      <td><a href="https://github.com/meituan/YOLOv6/tree/yolov6-seg" rel="noopener nofollow">meituan/YOLOv6-seg</a></td>
      <td>❎ 参考<a href="https://github.com/laugh12321/TensorRT-YOLO/blob/main/tensorrt_yolo/export/head.py" rel="noopener nofollow">tensorrt_yolo/export/head.py</a> 自行实现</td>
      <td>🟢</td>
    </tr>
    <tr>
      <td>Segment</td>
      <td><a href="https://github.com/WongKinYiu/yolov7" rel="noopener nofollow">WongKinYiu/yolov7</a></td>
      <td>❎ 参考<a href="https://github.com/laugh12321/TensorRT-YOLO/blob/main/tensorrt_yolo/export/head.py" rel="noopener nofollow">tensorrt_yolo/export/head.py</a> 自行实现</td>
      <td>🟢</td>
    </tr>
    <tr>
      <td>Segment</td>
      <td><a href="https://github.com/WongKinYiu/yolov9" rel="noopener nofollow">WongKinYiu/yolov9</a></td>
      <td>❎ 参考<a href="https://github.com/laugh12321/TensorRT-YOLO/blob/main/tensorrt_yolo/export/head.py" rel="noopener nofollow">tensorrt_yolo/export/head.py</a> 自行实现</td>
      <td>🟢</td>
    </tr>
    <tr>
      <td>Segment</td>
      <td><a href="https://github.com/ultralytics/ultralytics" rel="noopener nofollow">ultralytics/ultralytics</a></td>
      <td>✅</td>
      <td>✅</td>
    </tr>
    <tr>
      <td>Classify</td>
      <td><a href="https://github.com/ultralytics/yolov3" rel="noopener nofollow">ultralytics/yolov3</a></td>
      <td>✅</td>
      <td>✅</td>
    </tr>
    <tr>
      <td>Classify</td>
      <td><a href="https://github.com/ultralytics/yolov5" rel="noopener nofollow">ultralytics/yolov5</a></td>
      <td>✅</td>
      <td>✅</td>
    </tr>
    <tr>
      <td>Classify</td>
      <td><a href="https://github.com/ultralytics/ultralytics" rel="noopener nofollow">ultralytics/ultralytics</a></td>
      <td>✅</td>
      <td>✅</td>
    </tr>
    <tr>
      <td>Pose</td>
      <td><a href="https://github.com/ultralytics/ultralytics" rel="noopener nofollow">ultralytics/ultralytics</a></td>
      <td>✅</td>
      <td>✅</td>
    </tr>
    <tr>
      <td>OBB</td>
      <td><a href="https://github.com/ultralytics/ultralytics" rel="noopener nofollow">ultralytics/ultralytics</a></td>
      <td>✅</td>
      <td>✅</td>
    </tr>
  </tbody></table>
</div>
<h2 id="-请作者喝杯咖啡">☕ 请作者喝杯咖啡</h2>
<p>开源不易，如果本项目有帮助到你的话，可以考虑请作者喝杯咖啡，你的支持是开发者持续维护的最大动力~</p>
<div align="center">
    <p>
        <img width="500px" src="https://img2024.cnblogs.com/blog/2468833/202412/2468833-20241227163003466-291268855.png">
    </p>
</div>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.9823597258726852" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-27 16:43">2024-12-27 16:35</span>&nbsp;
<a href="https://www.cnblogs.com/laugh12321">laugh12321</a>&nbsp;
阅读(<span id="post_view_count">145</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18636124" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18636124);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18636124', targetLink: 'https://www.cnblogs.com/laugh12321/p/18636124', title: 'TensorRT-YOLO：灵活易用的 YOLO 部署工具' })">举报</a>
</div>
        