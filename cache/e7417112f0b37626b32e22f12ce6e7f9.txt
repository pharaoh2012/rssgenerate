
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/tianqing/p/18639613" title="发布于 2024-12-31 09:03">
    <span role="heading" aria-level="2">.NET 9 new features-分布式追踪支持、HTTP/3 改进以及更好的容器镜像支持</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>.NET 9 针对云原生开发进行了显著优化，重点改进了分布式追踪、HTTP/3 支持和容器镜像优化等方面。</p>
<p>这些特性极大地提升了 .NET 在现代云原生应用中的适配性与开发效率。</p>
<h2>1. 设计原理</h2>
<h3>1.1 分布式追踪支持</h3>
<p><strong>背景</strong>：在云原生架构中，应用程序通常由多个微服务组成。分布式追踪能够帮助开发者监控和诊断跨服务的调用链路，快速定位性能瓶颈和故障点。</p>
<p><strong>实现</strong>：.NET 9 内置了对 OpenTelemetry 的支持，提供标准化的接口，方便开发者将追踪数据输出到不同的追踪系统，如 Jaeger、Zipkin 或 Azure Monitor。</p>
<p><strong>目标</strong>：简化分布式追踪的集成过程，提高应用程序的可观测性，增强故障诊断和性能调优的能力。</p>
<h3>1.2 HTTP/3 改进</h3>
<p><strong>背景</strong>：HTTP/3 基于 QUIC 协议，具有低延迟和高传输效率的特点，特别适用于高并发和实时性要求高的应用场景。</p>
<p><strong>实现</strong>：.NET 9 的 <code>HttpClient</code> 和 Kestrel（内置的 Web 服务器）原生支持 HTTP/3，开发者可以直接利用这一特性，无需额外配置。</p>
<p><strong>目标</strong>：提升网络通信的性能和可靠性，为现代 Web 应用和微服务架构提供更高效的传输协议支持。</p>
<h3>1.3 容器镜像优化</h3>
<p><strong>背景</strong>：在云原生环境中，应用程序通常以容器形式部署。容器镜像的大小和启动速度直接影响部署效率和资源利用率。</p>
<p><strong>实现</strong>：.NET 9 提供了更小的基础镜像，采用精简的操作系统层，减少不必要的组件。此外，通过改进发布流程，支持 ReadyToRun（R2R）和 AOT（Ahead-Of-Time）编译，缩短应用启动时间。</p>
<p><strong>目标</strong>：降低容器镜像的体积，加快启动速度，提高部署效率，减少资源消耗。</p>
<h2>2. 示例代码</h2>
<h3>分布式追踪示例</h3>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950">
<div class="flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md h-9 bg-token-sidebar-surface-primary dark:bg-token-main-surface-secondary select-none">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Diagnostics;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> OpenTelemetry;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> OpenTelemetry.Trace;

</span><span style="color: rgba(0, 0, 255, 1)">var</span> builder =<span style="color: rgba(0, 0, 0, 1)"> WebApplication.CreateBuilder(args);

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 配置 OpenTelemetry 追踪</span>
builder.Services.AddOpenTelemetryTracing(tracingBuilder =&gt;<span style="color: rgba(0, 0, 0, 1)">
{
    tracingBuilder
        .AddAspNetCoreInstrumentation()
        .AddHttpClientInstrumentation()
        .AddConsoleExporter(); </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 将追踪数据输出到控制台</span>
<span style="color: rgba(0, 0, 0, 1)">});

</span><span style="color: rgba(0, 0, 255, 1)">var</span> app =<span style="color: rgba(0, 0, 0, 1)"> builder.Build();

app.MapGet(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(0, 0, 255, 1)">async</span> context =&gt;<span style="color: rgba(0, 0, 0, 1)">
{
    </span><span style="color: rgba(0, 0, 255, 1)">using</span> <span style="color: rgba(0, 0, 255, 1)">var</span> activity = <span style="color: rgba(0, 0, 255, 1)">new</span> ActivitySource(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MyApp</span><span style="color: rgba(128, 0, 0, 1)">"</span>).StartActivity(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ProcessingRequest</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    activity</span>?.SetTag(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http.method</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">GET</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    activity</span>?.SetTag(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http.url</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, context.Request.Path);

    </span><span style="color: rgba(0, 0, 255, 1)">await</span> context.Response.WriteAsync(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Hello, World!</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
});

app.Run();</span></pre>
</div>
<p><span style="font-size: 1.17em">HTTP/3 示例</span></p>
</div>
</div>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950">
<div class="flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md h-9 bg-token-sidebar-surface-primary dark:bg-token-main-surface-secondary select-none">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> builder =<span style="color: rgba(0, 0, 0, 1)"> WebApplication.CreateBuilder(args);

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 启用 HTTP/3</span>
builder.WebHost.ConfigureKestrel(serverOptions =&gt;<span style="color: rgba(0, 0, 0, 1)">
{
    serverOptions.ListenAnyIP(</span><span style="color: rgba(128, 0, 128, 1)">5000</span>, listenOptions =&gt;<span style="color: rgba(0, 0, 0, 1)">
    {
        listenOptions.Protocols </span>=<span style="color: rgba(0, 0, 0, 1)"> Microsoft.AspNetCore.Server.Kestrel.Core.HttpProtocols.Http1AndHttp2AndHttp3;
    });
});

</span><span style="color: rgba(0, 0, 255, 1)">var</span> app =<span style="color: rgba(0, 0, 0, 1)"> builder.Build();

app.MapGet(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/</span><span style="color: rgba(128, 0, 0, 1)">"</span>, () =&gt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Hello, HTTP/3!</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);

app.Run();</span></pre>
</div>
</div>
</div>
<h3>容器优化示例</h3>
<p><strong>Dockerfile</strong>：</p>
<div class="cnblogs_code">
<pre># 使用 .NET <span style="color: rgba(128, 0, 128, 1)">9</span><span style="color: rgba(0, 0, 0, 1)"> 精简版基础镜像
FROM mcr.microsoft.com</span>/dotnet/runtime-deps:<span style="color: rgba(128, 0, 128, 1)">9.0</span><span style="color: rgba(0, 0, 0, 1)"> AS base
WORKDIR </span>/<span style="color: rgba(0, 0, 0, 1)">app

FROM mcr.microsoft.com</span>/dotnet/sdk:<span style="color: rgba(128, 0, 128, 1)">9.0</span><span style="color: rgba(0, 0, 0, 1)"> AS build
WORKDIR </span>/<span style="color: rgba(0, 0, 0, 1)">src
COPY . .
RUN dotnet publish </span>-c Release -o /app --self-contained <span style="color: rgba(0, 0, 255, 1)">true</span> /p:PublishTrimmed=<span style="color: rgba(0, 0, 255, 1)">true</span> /p:PublishAot=<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">

FROM base AS final
WORKDIR </span>/<span style="color: rgba(0, 0, 0, 1)">app
COPY </span>--from=build /<span style="color: rgba(0, 0, 0, 1)">app .
ENTRYPOINT [</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">./MyApp</span><span style="color: rgba(128, 0, 0, 1)">"</span>]</pre>
</div>
<h2>3. 应用场景</h2>
<ol>
<li>
<p><strong>微服务架构</strong>：利用分布式追踪监控服务间的调用链路，快速定位问题；通过 HTTP/3 提升服务间通信效率；使用优化后的容器镜像实现快速部署和扩展。</p>
</li>
<li>
<p><strong>实时通信应用</strong>：如在线游戏、视频会议等，对低延迟要求高的应用，HTTP/3 的改进能够显著提升用户体验。</p>
</li>
<li>
<p><strong>资源受限环境</strong>：在边缘计算或物联网设备上，精简的容器镜像和快速启动能力能够有效降低资源占用，提高运行效率。</p>
</li>
<li>
<p><strong>高并发 Web 应用</strong>：通过 HTTP/3 的多路复用特性，提升网页加载速度和响应能力，改善用户体验。</p>
</li>
</ol>
<h2>4. 高阶应用</h2>
<ol>
<li>
<p><strong>自定义分布式追踪集成</strong>：结合 OpenTelemetry，开发者可以自定义追踪策略，将数据输出到特定的监控系统，满足不同的运维需求。</p>
</li>
<li>
<p><strong>结合 gRPC 和 HTTP/3</strong>：利用 HTTP/3 的优势，提升 gRPC 的传输效率，构建高性能的服务间通信机制。</p>
</li>
<li>
<p><strong>无服务器架构</strong>：通过 AOT 编译和精简的容器镜像，将应用部署在无服务器平台上，实现快速启动和高效运行。</p>
</li>
<li>
<p><strong>性能监控与优化</strong>：使用分布式追踪数据，结合性能分析工具，深入了解应用的运行状况，进行针对性的优化，提高整体性能。</p>
</li>
</ol>
<p>通过这些优化，.NET 9 为云原生应用开发提供了更强大的支持，帮助开发者构建高性能、高可用的现代应用程序。</p>
<p>&nbsp;</p>
<p>周国庆</p>
<p>2024/12/31</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.07111185925" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-31 09:03">2024-12-31 09:03</span>&nbsp;
<a href="https://www.cnblogs.com/tianqing">Eric zhou</a>&nbsp;
阅读(<span id="post_view_count">83</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18639613" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18639613);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18639613', targetLink: 'https://www.cnblogs.com/tianqing/p/18639613', title: '.NET 9 new features-分布式追踪支持、HTTP/3 改进以及更好的容器镜像支持' })">举报</a>
</div>
        