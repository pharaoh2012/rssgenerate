
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/heavenYJJ/p/18653798" title="发布于 2025-01-06 09:19">
    <span role="heading" aria-level="2">让我看看有多少人不知道Vue3中也能实现高阶组件HOC</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="前言">前言</h1>
<p><code>高阶组件HOC</code>在React社区是非常常见的概念，但是在Vue社区中却是很少人使用。主要原因有两个：1、Vue中一般都是使用SFC，实现HOC比较困难。2、HOC能够实现的东西，在Vue2时代<code>mixins</code>能够实现，在Vue3时代<code>Composition API</code>能够实现。如果你不知道HOC，那么你平时绝对没有场景需要他。但是如果你知道HOC，那么在一些特殊的场景使用他就可以很优雅的解决一些问题。</p>
<p><strong>欧阳也在找工作，坐标成都求内推！</strong></p>
<h1 id="什么是高阶组件hoc">什么是高阶组件HOC</h1>
<p>HOC使用场景就是<code>加强原组件</code>。</p>
<p>HOC实际就是一个函数，这个函数接收的参数就是一个组件，并且返回一个组件，返回的就是加强后组件。如下图：<br>
<img src="https://img2024.cnblogs.com/blog/1217259/202501/1217259-20250105200106377-363938320.png" alt="hoc" loading="lazy"></p>
<p>在<code>Composition API</code>出现之前HOC还有一个常见的使用场景就是提取公共逻辑，但是有了<code>Composition API</code>后这种场景就无需使用HOC了。</p>
<h1 id="高阶组件hoc使用场景">高阶组件HOC使用场景</h1>
<p>很多同学觉得有了<code>Composition API</code>后，直接无脑使用他就完了，无需费时费力的去搞什么HOC。那如果是下面这个场景呢？</p>
<p>有一天产品找到你，说要给我们的系统增加会员功能，需要让系统中的几十个功能块增加会员可见功能。如果不是会员这几十个功能块都显示成引导用户开通会员的UI，并且这些功能块涉及到几十个组件，分布在系统的各个页面中。</p>
<p>如果不知道HOC的同学一般都会这样做，将会员相关的功能抽取成一个名为<code>useVip.ts</code>的hooks。代码如下：</p>
<pre><code class="language-javascript">export function useVip() {
  function getShowVipContent() {
    // 一些业务逻辑判断是否是VIP
    return false;
  }

  return {
    showVipContent: getShowVipContent(),
  };
}
</code></pre>
<p>然后再去每个具体的业务模块中去使用<code>showVipContent</code>变量判断，<code>v-if="showVipContent"</code>显示原模块，<code>v-else</code>显示引导开通会员UI。代码如下：</p>
<pre><code class="language-javascript">&lt;template&gt;
  &lt;Block1
    v-if="showVipContent"
    :name="name1"
    @changeName="(value) =&gt; (name1 = value)"
  /&gt;
  &lt;OpenVipTip v-else /&gt;
&lt;/template&gt;

&lt;script setup lang="ts"&gt;
import { ref } from "vue";
import Block1 from "./block1.vue";
import OpenVipTip from "./open-vip-tip.vue";
import { useVip } from "./useVip";

const { showVipContent } = useVip();
const name1 = ref("block1");
&lt;/script&gt;
</code></pre>
<p>我们系统中有几十个这样的组件，那么我们就需要这样去改几十次。非常麻烦，如果有些模块是其他同事写的代码还很容易改错！！！</p>
<p>而且现在流行搞SVIP，也就是光开通VIP还不够，需要再开通一个SVIP。当你后续接到SVIP需求时，你又需要去改这几十个模块。<code>v-if="SVIP"</code>显示某些内容，<code>v-else-if="VIP"</code>显示提示开通SVIP，<code>v-else</code>显示提示开通VIP。</p>
<p>上面的这一场景使用hooks去实现，虽然能够完成，但是因为入侵了这几十个模块的业务逻辑。所以容易出错，也改起来比较麻烦，代码也不优雅。</p>
<p>那么有没有一种更好的解决方案，让我们可以不入侵这几十个模块的业务逻辑的实现方式呢？</p>
<p>答案是：<code>高阶组件HOC</code>。</p>
<p>HOC的一个用途就是对组件进行增强，并且不会入侵原有组件的业务逻辑，在这里就是使用HOC判断会员相关的逻辑。如果是会员那么就渲染原本的模块组件，否则就渲染引导开通VIP的UI</p>
<h1 id="实现一个简单的hoc">实现一个简单的HOC</h1>
<p>首先我们要明白Vue的组件经过编译后就是一个对象，对象中的<code>props</code>属性对应的就是我们写的<code>defineProps</code>。对象中的setup方法，对应的就是我们熟知的<code>&lt;script setup&gt;</code>语法糖。</p>
<p>比如我使用<code>console.log(Block1)</code>将上面的<code>import Block1 from "./block1.vue";</code>给打印出来，如下图：<br>
<img src="https://img2024.cnblogs.com/blog/1217259/202501/1217259-20250105200123619-107016029.png" alt="console" loading="lazy"></p>
<p>这个就是我们引入的Vue组件对象。</p>
<p>还有一个冷知识，大家可能不知道。如果在setup方法中返回一个函数，那么在Vue内部就会认为这个函数就是实际的render函数，并且在setup方法中我们天然的就可以访问定义的变量。</p>
<p>利用这一点我们就可以在Vue3中实现一个简单的高阶组件HOC，代码如下：</p>
<pre><code class="language-javascript">import { h } from "vue";
import OpenVipTip from "./open-vip-tip.vue";

export default function WithVip(BaseComponent: any) {
  return {
    setup() {
      const showVipContent = getShowVipContent();
      function getShowVipContent() {
        // 一些业务逻辑判断是否是VIP
        return true;
      }

      return () =&gt; {
        return showVipContent ? h(BaseComponent) : h(OpenVipTip);
      };
    },
  };
}
</code></pre>
<p>在上面的代码中我们将会员相关的逻辑全部放在了<code>WithVip</code>函数中，这个函数接收一个参数<code>BaseComponent</code>，他是一个Vue组件对象。</p>
<p>在<code>setup</code>方法中我们return了一个箭头函数，他会被当作render函数处理。</p>
<p>如果<code>showVipContent</code>为true，就表明当前用户开通了VIP，就使用<code>h</code>函数渲染传入的组件。</p>
<p>否则就渲染<code>OpenVipTip</code>组件，他是引导用户开通VIP的组件。</p>
<p>此时我们的父组件就应该是下面这样的：</p>
<pre><code class="language-javascript">&lt;template&gt;
  &lt;EnhancedBlock1 /&gt;
&lt;/template&gt;

&lt;script setup lang="ts"&gt;
import Block1 from "./block1.vue";
import WithVip from "./with-vip.tsx";

const EnhancedBlock1 = WithVip(Block1);
&lt;/script&gt;
</code></pre>
<p>这个代码相比前面的hooks的实现就简单很多了，只需要使用高阶组件<code>WithVip</code>对原来的<code>Block1</code>组件包一层，然后将原本使用<code>Block1</code>的地方改为使用<code>EnhancedBlock1</code>。对原本的代码基本没有入侵。</p>
<p>上面的例子只是一个简单的demo，他是不满足我们实际的业务场景。比如子组件有<code>props</code>、<code>emit</code>、<code>插槽</code>。还有我们在父组件中可能会直接调用子组件expose暴露的方法。</p>
<p>因为我们使用了HOC对原本的组件进行了一层封装，那么上面这些场景HOC都是不支持的，我们需要添加一些额外的代码去支持。</p>
<h1 id="高阶组件hoc实现props和emit">高阶组件HOC实现props和emit</h1>
<p>在Vue中属性分为两种，一种是使用<code>props</code>和<code>emit</code>声明接收的属性。第二种是未声明的属性<code>attrs</code>，比如class、style、id等。</p>
<p>在setup函数中props是作为第一个参数返回，<code>attrs</code>是第二个参数中返回。</p>
<p>所以为了能够支持props和emit，我们的高阶组件<code>WithVip</code>将会变成下面这样：</p>
<pre><code class="language-javascript">import { SetupContext, h } from "vue";
import OpenVipTip from "./open-vip-tip.vue";

export default function WithVip(BaseComponent: any) {
  return {
    props: BaseComponent.props,  // 新增代码
    setup(props, { attrs, slots, expose }: SetupContext) {  // 新增代码
      const showVipContent = getShowVipContent();
      function getShowVipContent() {
        // 一些业务逻辑判断是否是VIP
        return true;
      }

      return () =&gt; {
        return showVipContent
          ? h(BaseComponent, {
              ...props, // 新增代码
              ...attrs, // 新增代码
            })
          : h(OpenVipTip);
      };
    },
  };
}
</code></pre>
<p>在<code>setup</code>方法中接收的第一个参数就是<code>props</code>，没有在props中定义的属性就会出现在<code>attrs</code>对象中。</p>
<p>所以我们调用h函数时分别将<code>props</code>和<code>attrs</code>透传给子组件。</p>
<p>同时我们还需要一个地方去定义props，props的值就是直接读取子组件对象中的<code>BaseComponent.props</code>。所以我们给高阶组件声明一个props属性：<code>props: BaseComponent.props,</code>。</p>
<p>这样props就会被透传给子组件了。</p>
<p>看到这里有的小伙伴可能会问，那emit触发事件没有看见你处理呢？</p>
<p>答案是：我们无需去处理，因为父组件上面的<code>@changeName="(value) =&gt; (name1 = value)"</code>经过编译后就会变成属性：<code>:onChangeName="(value) =&gt; (name1 = value)"</code>。而这个属性由于我们没有在props中声明，所以他会作为<code>attrs</code>直接透传给子组件。</p>
<h1 id="高阶组件实现插槽">高阶组件实现插槽</h1>
<p>我们的正常子组件一般还有插槽，比如下面这样：</p>
<pre><code class="language-javascript">&lt;template&gt;
  &lt;div class="divider"&gt;
    &lt;h1&gt;{{ name }}&lt;/h1&gt;
    &lt;button @click="handleClick"&gt;change name&lt;/button&gt;
    &lt;slot /&gt;
    这里是block1的一些业务代码
    &lt;slot name="footer" /&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script setup lang="ts"&gt;
const emit = defineEmits&lt;{
  changeName: [name: string];
}&gt;();

const props = defineProps&lt;{
  name: string;
}&gt;();

const handleClick = () =&gt; {
  emit("changeName", `hello ${props.name}`);
};

defineExpose({
  handleClick,
});
&lt;/script&gt;
</code></pre>
<p>在上面的例子中，子组件有个默认插槽和name为<code>footer</code>的插槽。此时我们来看看高阶组件中如何处理插槽呢？</p>
<p>直接看代码：</p>
<pre><code class="language-javascript">import { SetupContext, h } from "vue";
import OpenVipTip from "./open-vip-tip.vue";

export default function WithVip(BaseComponent: any) {
  return {
    props: BaseComponent.props,
    setup(props, { attrs, slots, expose }: SetupContext) {
      const showVipContent = getShowVipContent();
      function getShowVipContent() {
        // 一些业务逻辑判断是否是VIP
        return true;
      }

      return () =&gt; {
        return showVipContent
          ? h(
              BaseComponent,
              {
                ...props,
                ...attrs,
              },
              slots // 新增代码
            )
          : h(OpenVipTip);
      };
    },
  };
}
</code></pre>
<p>插槽的本质就是一个对象里面拥有多个方法，这些方法的名称就是每个具名插槽，每个方法的参数就是插槽传递的变量。这里我们只需要执行<code>h</code>函数时将<code>slots</code>对象传给h函数，就能实现插槽的透传（如果你看不懂这句话，那就等欧阳下篇插槽的文章写好后再来看这段话你就懂了）。</p>
<p>我们在控制台中来看看传入的<code>slots</code>插槽对象，如下图：<br>
<img src="https://img2024.cnblogs.com/blog/1217259/202501/1217259-20250105200137880-1830982201.png" alt="slots" loading="lazy"></p>
<p>从上面可以看到插槽对象中有两个方法，分别是<code>default</code>和<code>footer</code>，对应的就是默认插槽和footer插槽。</p>
<p>大家熟知h函数接收的第三个参数是children数组，也就是有哪些子元素。但是他其实还支持直接传入<code>slots</code>对象，下面这个是他的一种定义：</p>
<pre><code class="language-javascript">export function h&lt;P&gt;(
  type: Component&lt;P&gt;,
  props?: (RawProps &amp; P) | null,
  children?: RawChildren | RawSlots,
): VNode

export type RawSlots = {
  [name: string]: unknown
  // ...省略
}
</code></pre>
<p>所以我们可以直接把slots对象直接丢给h函数，就可以实现插槽的透传。</p>
<h1 id="父组件调用子组件的方法">父组件调用子组件的方法</h1>
<p>有的场景中我们需要在父组件中直接调用子组件的方法，按照以前的场景，我们只需要在子组件中expose暴露出去方法，然后在父组件中使用ref访问到子组件，这样就可以调用了。</p>
<p>但是使用了HOC后，中间层多了一个高阶组件，所以我们不能直接访问到子组件expose的方法。</p>
<p>怎么做呢？答案很简单，直接上代码：</p>
<pre><code class="language-javascript">import { SetupContext, h, ref } from "vue";
import OpenVipTip from "./open-vip-tip.vue";

export default function WithVip(BaseComponent: any) {
  return {
    props: BaseComponent.props,
    setup(props, { attrs, slots, expose }: SetupContext) {
      const showVipContent = getShowVipContent();
      function getShowVipContent() {
        // 一些业务逻辑判断是否是VIP
        return true;
      }

      // 新增代码start
      const innerRef = ref();
      expose(
        new Proxy(
          {},
          {
            get(_target, key) {
              return innerRef.value?.[key];
            },
            has(_target, key) {
              return innerRef.value?.[key];
            },
          }
        )
      );
      // 新增代码end

      return () =&gt; {
        return showVipContent
          ? h(
              BaseComponent,
              {
                ...props,
                ...attrs,
                ref: innerRef,  // 新增代码
              },
              slots
            )
          : h(OpenVipTip);
      };
    },
  };
}
</code></pre>
<p>在高阶组件中使用<code>ref</code>访问到子组件赋值给<code>innerRef</code>变量。然后expose一个<code>Proxy</code>的对象，在get拦截中让其直接去执行子组件中的对应的方法。</p>
<p>比如在父组件中使用<code>block1Ref.value.handleClick()</code>去调用<code>handleClick</code>方法，由于使用了HOC，所以这里读取的<code>handleClick</code>方法其实是读取的是HOC中expose暴露的方法。所以就会走到<code>Proxy</code>的get拦截中，从而可以访问到真正子组件中expose暴露的<code>handleClick</code>方法。</p>
<p>那么上面的Proxy为什么要使用<code>has</code>拦截呢？</p>
<p>答案是在Vue源码中父组件在执行子组件中暴露的方法之前会执行这样一个判断：</p>
<pre><code class="language-javascript">if (key in target) {
  return target[key];
}
</code></pre>
<p>很明显我们这里的<code>Proxy</code>代理的原始对象里面什么都没有，执行<code>key in target</code>肯定就是false了。所以我们可以使用<code>has</code>去拦截<code>key in target</code>，意思是只要访问的方法或者属性是子组件中<code>expose</code>暴露的就返回true。</p>
<p>至此，我们已经在HOC中覆盖了Vue中的所有场景。但是有的同学觉得<code>h</code>函数写着比较麻烦，不好维护，我们还可以将上面的高阶组件改为tsx的写法，<code>with-vip.tsx</code>文件代码如下：</p>
<pre><code class="language-javascript">import { SetupContext, ref } from "vue";
import OpenVipTip from "./open-vip-tip.vue";

export default function WithVip(BaseComponent: any) {
  return {
    props: BaseComponent.props,
    setup(props, { attrs, slots, expose }: SetupContext) {
      const showVipContent = getShowVipContent();
      function getShowVipContent() {
        // 一些业务逻辑判断是否是VIP
        return true;
      }

      const innerRef = ref();
      expose(
        new Proxy(
          {},
          {
            get(_target, key) {
              return innerRef.value?.[key];
            },
            has(_target, key) {
              return innerRef.value?.[key];
            },
          }
        )
      );

      return () =&gt; {
        return showVipContent ? (
          &lt;BaseComponent {...props} {...attrs} ref={innerRef}&gt;
            {slots}
          &lt;/BaseComponent&gt;
        ) : (
          &lt;OpenVipTip /&gt;
        );
      };
    },
  };
}
</code></pre>
<p>一般情况下h函数能够实现的，使用<code>jsx</code>或者<code>tsx</code>都能实现（除非你需要操作虚拟DOM）。</p>
<p>注意上面的代码是使用<code>ref={innerRef}</code>，而不是我们熟悉的<code>ref="innerRef"</code>，这里很容易搞错！！</p>
<h1 id="compose函数">compose函数</h1>
<p>此时你可能有个新需求，需要给某些模块显示不同的折扣信息，这些模块可能会和上一个会员需求的模块有重叠。此时就涉及到多个高阶组件之间的组合情况。</p>
<p>同样我们使用HOC去实现，新增一个<code>WithDiscount</code>高阶组件，代码如下：</p>
<pre><code class="language-javascript">import { SetupContext, onMounted, ref } from "vue";

export default function WithDiscount(BaseComponent: any, item: string) {
  return {
    props: BaseComponent.props,
    setup(props, { attrs, slots, expose }: SetupContext) {
      const discountInfo = ref("");

      onMounted(async () =&gt; {
        const res = await getDiscountInfo(item);
        discountInfo.value = res;
      });

      function getDiscountInfo(item: any): Promise&lt;string&gt; {
        // 根据传入的item获取折扣信息
        return new Promise((resolve) =&gt; {
          setTimeout(() =&gt; {
            resolve("我是折扣信息1");
          }, 1000);
        });
      }

      const innerRef = ref();
      expose(
        new Proxy(
          {},
          {
            get(_target, key) {
              return innerRef.value?.[key];
            },
            has(_target, key) {
              return innerRef.value?.[key];
            },
          }
        )
      );

      return () =&gt; {
        return (
          &lt;div class="with-discount"&gt;
            &lt;BaseComponent {...props} {...attrs} ref={innerRef}&gt;
              {slots}
            &lt;/BaseComponent&gt;
            {discountInfo.value ? (
              &lt;div class="discount-info"&gt;{discountInfo.value}&lt;/div&gt;
            ) : null}
          &lt;/div&gt;
        );
      };
    },
  };
}
</code></pre>
<p>那么我们的父组件如果需要同时用VIP功能和折扣信息功能需要怎么办呢？代码如下：</p>
<pre><code class="language-javascript">const EnhancedBlock1 = WithVip(WithDiscount(Block1, "item1"));
</code></pre>
<p>如果不是VIP，那么这个模块的折扣信息也不需要显示了。</p>
<p>因为高阶组件接收一个组件，然后返回一个加强的组件。利用这个特性，我们可以使用上面的这种代码将其组合起来。</p>
<p>但是上面这种写法大家觉得是不是看着很难受，一层套一层。如果这里同时使用5个高阶组件，这里就会套5层了，那这个代码的维护难度就是地狱难度了。</p>
<p>所以这个时候就需要<code>compose</code>函数了，这个是React社区中常见的概念。它的核心思想是将多个函数从右到左依次组合起来执行，前一个函数的输出作为下一个函数的输入。</p>
<p>我们这里有多个HOC（也就是有多个函数），我们期望执行完第一个HOC得到一个加强的组件，然后以这个加强的组件为参数去执行第二个HOC，最后得到由多个HOC加强的组件。</p>
<p><code>compose</code>函数就刚好符合我们的需求，这个是使用<code>compose</code>函数后的代码，如下：</p>
<pre><code class="language-javascript">const EnhancedBlock1 = compose(WithVip, WithDiscount("item1"))(Block1);
</code></pre>
<p>这样就舒服多了，所有的高阶组件都放在第一个括弧里面，并且由右向左去依次执行每个高阶组件HOC。如果某个高阶组件HOC需要除了组件之外的额外参数，像<code>WithDiscount</code>这样处理就可以了。</p>
<p>很明显，我们的<code>WithDiscount</code>高阶组件的代码需要修改才能满足<code>compose</code>函数的需求，这个是修改后的代码：</p>
<pre><code class="language-javascript">import { SetupContext, onMounted, ref } from "vue";

export default function WithDiscount(item: string) {
  return (BaseComponent: any) =&gt; {
    return {
      props: BaseComponent.props,
      setup(props, { attrs, slots, expose }: SetupContext) {
        const discountInfo = ref("");

        onMounted(async () =&gt; {
          const res = await getDiscountInfo(item);
          discountInfo.value = res;
        });

        function getDiscountInfo(item: any): Promise&lt;string&gt; {
          // 根据传入的item获取折扣信息
          return new Promise((resolve) =&gt; {
            setTimeout(() =&gt; {
              resolve("我是折扣信息1");
            }, 1000);
          });
        }

        const innerRef = ref();
        expose(
          new Proxy(
            {},
            {
              get(_target, key) {
                return innerRef.value?.[key];
              },
              has(_target, key) {
                return innerRef.value?.[key];
              },
            }
          )
        );

        return () =&gt; {
          return (
            &lt;div class="with-discount"&gt;
              &lt;BaseComponent {...props} {...attrs} ref={innerRef}&gt;
                {slots}
              &lt;/BaseComponent&gt;
              {discountInfo.value ? (
                &lt;div class="discount-info"&gt;{discountInfo.value}&lt;/div&gt;
              ) : null}
            &lt;/div&gt;
          );
        };
      },
    };
  };
}
</code></pre>
<p>注意看，<code>WithDiscount</code>此时只接收一个参数<code>item</code>，不再接收<code>BaseComponent</code>组件对象了，然后直接return出去一个回调函数。</p>
<p>准确的来说此时的<code>WithDiscount</code>函数已经不是高阶组件HOC了，<code>他return出去的回调函数才是真正的高阶组件HOC</code>。在回调函数中去接收<code>BaseComponent</code>组件对象，然后返回一个增强后的Vue组件对象。</p>
<p>至于参数<code>item</code>，因为闭包所以在里层的回调函数中还是能够访问的。这里比较绕，可能需要多理解一下。</p>
<p>前面的理解完了后，我们可以再上一点强度了。来看看<code>compose</code>函数是如何实现的，代码如下：</p>
<pre><code class="language-javascript">function compose(...funcs) {
  return funcs.reduce((acc, cur) =&gt; (...args) =&gt; acc(cur(...args)));
}
</code></pre>
<p><code>这个函数虽然只有一行代码，但是乍一看，怎么看怎么懵逼，欧阳也是！！</code>我们还是结合demo来看：</p>
<pre><code class="language-javascript">const EnhancedBlock1 = compose(WithA, WithB, WithC, WithD)(View);
</code></pre>
<p>假如我们这里有<code>WithA</code>、<code>WithB</code>、 <code>WithC</code>、 <code>WithD</code>四个高阶组件，都是用于增强组件<code>View</code>。</p>
<p>compose中使用的是<code>...funcs</code>将调用<code>compose</code>函数接收到的四个高阶组件都存到了<code>funcs</code>数组中。</p>
<p>然后使用reduce去遍历这些高阶组件，注意看执行<code>reduce</code>时没有传入第二个参数。</p>
<p>所以第一次执行reduce时，<code>acc</code>的值为<code>WithA</code>，<code>cur</code>的值为<code>WithB</code>。返回结果也是一个回调函数，将这两个值填充进去就是<code>(...args) =&gt; WithA(WithB(...args))</code>，我们将第一次的执行结果命名为<code>r1</code>。</p>
<p>我们知道reduce会将上一次的执行结果赋值为acc，所以第二次执行reduce时，<code>acc</code>的值为<code>r1</code>，<code>cur</code>的值为<code>WithC</code>。返回结果也是一个回调函数，同样将这两个值填充进行就是<code>(...args) =&gt; r1(WithC(...args))</code>。同样我们将第二次的执行结果命名为<code>r2</code>。</p>
<p>第三次执行reduce时，此时的<code>acc</code>的值为<code>r2</code>，<code>cur</code>的值为<code>WithD</code>。返回结果也是一个回调函数，同样将这两个值填充进行就是<code>(...args) =&gt; r2(WithD(...args))</code>。同样我们将第三次的执行结果命名为<code>r3</code>，由于已经将数组遍历完了，最终reduce的返回值就是<code>r3</code>，他是一个回调函数。</p>
<p>由于<code>compose(WithA, WithB, WithC, WithD)</code>的执行结果为<code>r3</code>，那么<code>compose(WithA, WithB, WithC, WithD)(View)</code>就等价于<code>r3(View)</code>。</p>
<p>前面我们知道<code>r3</code>是一个回调函数：<code>(...args) =&gt; r2(WithD(...args))</code>，这个回调函数接收的参数<code>args</code>，就是需要增强的基础组件<code>View</code>。所以执行这个回调函数就是先执行<code>WithD</code>对组件进行增强，然后将增强后的组件作为参数去执行<code>r2</code>。</p>
<p>同样<code>r2</code>也是一个回调函数：<code>(...args) =&gt; r1(WithC(...args))</code>，接收上一次<code>WithD</code>增强后的组件为参数执行<code>WithC</code>对组件再次进行增强，然后将增强后的组件作为参数去执行<code>r1</code>。</p>
<p>同样<code>r1</code>也是一个回调函数：<code>(...args) =&gt; WithA(WithB(...args))</code>，将<code>WithC</code>增强后的组件丢给<code>WithB</code>去执行，得到增强的组件再丢给<code>WithA</code>去执行，最终就拿到了最后增强的组件。</p>
<p>执行顺序就是<code>从右向左</code>去依次执行高阶组件对基础组件进行增强。</p>
<p>至此，关于<code>compose</code>函数已经讲完了，这里对于Vue的同学可能比较难理解，建议多看两遍。</p>
<h1 id="总结">总结</h1>
<p>这篇文章我们讲了在Vue3中如何实现一个高阶组件HOC，但是里面涉及到了很多源码知识，所以这是一篇运用源码的实战文章。如果你理解了文章中涉及到的知识，那么就会觉得Vue中实现HOC还是很简单的，反之就像是在看天书。</p>
<p>还有最重要的一点就是<code>Composition API</code>已经能够解决绝大部分的问题，只有少部分的场景才需要使用高阶组件HOC，<code>切勿强行使用HOC</code>，那样可能会有炫技的嫌疑。如果是防御性编程，那么就当我没说。</p>
<p>最后就是我们实现的每个高阶组件HOC都有很多重复的代码，而且实现起来很麻烦，心智负担也很高。那么我们是不是可以抽取一个<code>createHOC</code>函数去批量生成高阶组件呢？这个就留给各位自己去思考了。</p>
<p>还有一个问题，我们这种实现的高阶组件叫做<code>正向属性代理</code>，弊端是每代理一层就会增加一层组件的嵌套。那么有没有方法可以解决嵌套的问题呢？</p>
<p>答案是<code>反向继承</code>，但是这种也有弊端如果业务是setup中返回的render函数，那么就没法重写了render函数了。</p>
<p>关注公众号：【前端欧阳】，给自己一个进阶vue的机会</p>
<p><img src="https://img2024.cnblogs.com/blog/1217259/202406/1217259-20240606112202286-1547217900.jpg" alt="" loading="lazy"></p>
<p>另外欧阳写了一本开源电子书<a href="https://vue-compiler.iamouyang.cn/" target="_blank" rel="noopener nofollow">vue3编译原理揭秘</a>，看完这本书可以让你对vue编译的认知有质的提升。这本书初、中级前端能看懂，完全免费，只求一个star。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.06449117958217593" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-06 09:20">2025-01-06 09:19</span>&nbsp;
<a href="https://www.cnblogs.com/heavenYJJ">前端欧阳</a>&nbsp;
阅读(<span id="post_view_count">94</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18653798" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18653798);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18653798', targetLink: 'https://www.cnblogs.com/heavenYJJ/p/18653798', title: '让我看看有多少人不知道Vue3中也能实现高阶组件HOC' })">举报</a>
</div>
        