
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/risheng/p/18790592" title="发布于 2025-03-25 09:09">
    <span role="heading" aria-level="2">NextJS CVE-2025-29927 安全漏洞</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/3373677/202503/3373677-20250325090919725-1182156433.png" alt="NextJS CVE-2025-29927 安全漏洞" class="desc_img">
        CVE-2025-29927 是一个存在于 Next.js 框架中的关键安全漏洞。该漏洞允许攻击者通过伪造或篡改 x-middleware-subrequest 请求头，绕过中间件（Middleware）的安全检查，从而访问到原本受保护的路由或 API，进而导致授权绕过（Authorization Bypass）以及潜在的更深层次安全风险。本篇文章将对漏洞成因、受影响范围、修复版本及临时缓解方案进行详细说明。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="nextjs-cve-2025-29927-安全漏洞">NextJS CVE-2025-29927 安全漏洞</h1>
<p><strong>CVE-2025-29927</strong> 是一个存在于 <strong>Next.js</strong> 框架中的关键安全漏洞。该漏洞允许攻击者通过伪造或篡改 x-middleware-subrequest 请求头，绕过中间件（Middleware）的安全检查，从而访问到原本受保护的路由或 API，进而导致授权绕过（Authorization Bypass）以及潜在的更深层次安全风险。本篇文章将对漏洞成因、受影响范围、修复版本及临时缓解方案进行详细说明。</p>
<hr>
<h2 id="一漏洞概述">一、漏洞概述</h2>
<h3 id="1-漏洞原理">1. 漏洞原理</h3>
<p>Next.js 在内部通过一个名为 x-middleware-subrequest 的请求头，来防止自身中间件的递归调用或无限循环。但研究者发现，<strong>攻击者可以在外部请求中人为加上</strong>此请求头，并使用特定格式，使 <strong>Next.js 中间件以为</strong>这是一个“子请求”，从而<strong>跳过</strong>原本应执行的认证或安全检查。</p>
<h3 id="2-漏洞影响">2. 漏洞影响</h3>
<h4 id="21-授权绕过-auth-bypass">2.1. 授权绕过 (Auth Bypass)：</h4>
<p>应用依赖中间件进行的登录态或权限校验会被忽略，攻击者可能在未登录状态下访问需要管理员或高级权限的 API/页面。</p>
<h4 id="22-潜在安全头绕过">2.2. 潜在安全头绕过：</h4>
<p>如果应用通过 Middleware 注入安全头（CSP、HSTS 等），也可能被绕过，导致浏览器端的防护失效。</p>
<h4 id="23-改写路径-rewrite-失效">2.3. 改写路径 (Rewrite) 失效：</h4>
<p>某些场景中，Next.js 中间件会根据路径做改写或重定向。攻击者可利用漏洞跳过改写，访问内部路由或私有接口。</p>
<hr>
<h2 id="二受影响范围">二、受影响范围</h2>
<h3 id="1-影响版本">1. 影响版本</h3>
<p>根据官方与社区披露，受影响的版本范围及对应修复版本如下：</p>
<ul>
<li><strong>Next.js 11.1.4 ~ 13.5.6</strong>：未修补版本</li>
<li><strong>Next.js 14.x</strong>：在 14.2.25 之前均受影响</li>
<li><strong>Next.js 15.x</strong>：在 15.2.3 之前均受影响</li>
</ul>
<h3 id="2-修复版本">2. 修复版本</h3>
<p>最新修复版本：</p>
<ul>
<li>15.2.3 (针对 15.x)</li>
<li>14.2.25 (针对 14.x)</li>
<li>13.5.9 (针对 13.x)</li>
<li>12.3.5 (针对 12.x)</li>
</ul>
<p><font style="color: rgba(14, 14, 14, 1)">其中，Next.js 13 和 12 的对应修补版也已发布：13.5.9、12.3.5。请确认你的项目版本，并及时更新到安全版本或更高版本。</font></p>
<h3 id="3-受影响部署方式">3. 受影响部署方式</h3>
<ul>
<li><strong>自托管 (self-hosted) Next.js</strong>：使用 next start 运行、启用了 Middleware 的应用会在请求进入时依赖该中间件进行认证/安全检查，因此容易受影响。</li>
<li><strong>Standalone 输出</strong>：同样受影响。</li>
</ul>
<h3 id="4-不受影响场景">4. 不受影响场景</h3>
<ul>
<li><strong>托管在 Vercel</strong>：官方托管环境默认会对 x-middleware-subrequest 有额外处理，通常不会受此漏洞影响。</li>
<li><strong>Netlify</strong> 或纯静态部署（next export）：因为 Middleware 不会被执行或无条件禁用，所以不受本漏洞影响。</li>
<li><strong>Cloudflare Managed WAF</strong>：若打开了相关规则可阻拦可疑请求头，也可能减轻风险。</li>
<li><font style="color: rgba(23, 23, 23, 1)">作为静态导出部署的应用程序（未执行中间件）</font></li>
</ul>
<hr>
<h2 id="三漏洞成因">三、漏洞成因</h2>
<p>Next.js 在处理用户请求时，会检查 x-middleware-subrequest 以识别内部子请求，防止中间件递归调用。但在受影响版本中，对该头的来源与拼接方式<strong>缺乏严格校验</strong>，导致<strong>外部恶意请求</strong>也能带上此头，从而骗过 Next.js 判断逻辑，完全绕过中间件安全机制。</p>
<p>在老版本（如 12.2 以下）时，攻击者可使用：</p>
<pre><code class="language-html">x-middleware-subrequest: pages/_middleware
</code></pre>
<p>在较新版本中（如 13.x、14.x、15.x），需使用更复杂的字符串，例如：</p>
<pre><code class="language-html">x-middleware-subrequest: middleware:middleware:middleware:middleware:middleware
</code></pre>
<p>或</p>
<pre><code class="language-html">x-middleware-subrequest: src/middleware:middleware:middleware
</code></pre>
<p>来触发绕过行为。</p>
<hr>
<h2 id="四漏洞利用示例">四、漏洞利用示例</h2>
<p>假设应用在 /middleware.ts 中实施了以下逻辑，用于验证用户是否登录，若未登录则阻止访问 /admin 路由：</p>
<pre><code class="language-typescript">export function middleware(req: NextRequest) {
  const token = req.cookies.get('session');
  if (!token &amp;&amp; req.nextUrl.pathname.startsWith('/admin')) {
    return NextResponse.redirect('/login');
  }
  return NextResponse.next();
}
</code></pre>
<p>攻击者若在请求头里附加伪造的：</p>
<pre><code class="language-html">GET /admin/dashboard HTTP/1.1
Host: example.com
x-middleware-subrequest: middleware:middleware:middleware
</code></pre>
<p>可能让 Next.js 判定该请求是内部中间件调用，从而直接跳过此验证，成功访问 /admin/dashboard。</p>
<hr>
<h2 id="五修复与缓解">五、修复与缓解</h2>
<h3 id="1-升级到安全版本">1. 升级到安全版本</h3>
<p><strong>最直接与安全</strong>的方案是升级到官方发布的<strong>带安全补丁</strong>的版本：</p>
<ul>
<li><strong>Next.js 15.x</strong>: 升级到 &gt;= 15.2.3</li>
<li><strong>Next.js 14.x</strong>: 升级到 &gt;= 14.2.25</li>
<li><strong>Next.js 13.x</strong>: 升级到 &gt;= 13.5.9</li>
<li><strong>Next.js 12.x</strong>: 升级到 &gt;= 12.3.5</li>
</ul>
<h3 id="2-临时措施拦截-x-middleware-subrequest-在-edgeproxy-层">2. 临时措施：拦截 x-middleware-subrequest 在 Edge/Proxy 层</h3>
<p>如果在短期内无法进行升级，可在反向代理或负载均衡层（如 Nginx、Cloudflare、AWS ALB）<strong>直接丢弃或重写来自外部的 x-middleware-subrequest</strong>，确保只有真正的内部请求头能通过。示例 Nginx 配置：</p>
<pre><code class="language-html">proxy_set_header x-middleware-subrequest "";
</code></pre>
<p>或使用 ACL 拦截任何外部请求带有该头的情况。但要注意，这种做法需要在<strong>Next.js 中间件以外</strong>的地方实现，否则也可能被绕过。</p>
<h2 id="3-二次校验">3. 二次校验</h2>
<p>如果你在中间件中做了授权校验，也可以在 API 路由或页面层再次检测权限，避免因为单点绕过导致严重后果。</p>
<hr>
<h2 id="六时间线-示例">六、时间线 (示例)</h2>
<ul>
<li><strong>2025-02-27</strong>：研究人员通过 GitHub 私有漏洞通道向 Next.js 官方报告</li>
<li><strong>2025-03-14</strong>：官方开始确认和修复</li>
<li><strong>2025-03-17 ~ 03-18</strong>：相继发布修复版本 14.2.25, 15.2.3</li>
<li><strong>2025-03-21</strong>：正式公开安全公告，并分配 CVE-2025-29927</li>
<li><strong>2025-03-22~03-23</strong>：向后续的 13.x、12.x 回滚补丁 (13.5.9, 12.3.5)</li>
</ul>
<hr>
<h2 id="七总结">七、总结</h2>
<p>Next.js 早在 2016 年就开始发布安全通告；随着使用者增多，官方也不断完善漏洞收集、补丁发布及社区通知流程。本次 CVE-2025-29927 也再次提醒：<strong>关键安全逻辑不要只依赖前置中间件</strong>，需多层校验；更要及时跟进框架升级和安全通报，避免类似漏洞造成严重影响。</p>
<p>若你的项目尚无法升级或缺乏安全策略，务必尽快采取临时措施（如阻止该头外部传入），并在第一时间完成更新。对于依赖 Next.js 进行权限校验或路径重写的团队，强烈建议定期进行安全审计和渗透测试，以防范后续类似风险。</p>
<hr>
<p><strong>参考链接</strong></p>
<ol>
<li><a href="https://nextjs.org/blog/cve-2025-29927" target="_blank" rel="noopener nofollow">Next.js 官方安全公告: CVE-2025-29927</a></li>
<li><a href="https://zeropath.com/blog/nextjs-middleware-cve-2025-29927-auth-bypass" target="_blank" rel="noopener nofollow">ZeroPath Blog: Next.js Middleware CVE-2025-29927 Auth Bypass</a></li>
<li><a href="https://github.com/advisories/GHSA-f82v-jwr5-mffw" target="_blank" rel="noopener nofollow">CVE-2025-29927</a></li>
</ol>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.07549107881018519" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-25 09:10">2025-03-25 09:09</span>&nbsp;
<a href="https://www.cnblogs.com/risheng">日升_rs</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18790592" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18790592);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18790592', targetLink: 'https://www.cnblogs.com/risheng/p/18790592', title: 'NextJS CVE-2025-29927 安全漏洞' })">举报</a>
</div>
        