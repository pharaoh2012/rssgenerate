
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/shouke/p/18667439" title="发布于 2025-01-12 22:02">
    <span role="heading" aria-level="2">Prometheus 入门</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="测试环境">测试环境</h2>
<p>prometheus-2.26.0.linux-amd64.tar.gz</p>
<p>下载地址：<a href="https://github.com/prometheus/prometheus/releases/download/v2.26.0/prometheus-2.26.0.linux-amd64.tar.gz" target="_blank" rel="noopener nofollow">https://github.com/prometheus/prometheus/releases/download/v2.26.0/prometheus-2.26.0.linux-amd64.tar.gz</a></p>
<p>prometheus-2.54.1.linux-amd64.tar.gz</p>
<p>下载地址：<a href="https://github.com/prometheus/prometheus/releases/download/v2.26.0/prometheus-2.26.0.linux-amd64.tar.gz" target="_blank" rel="noopener nofollow">https://github.com/prometheus/prometheus/releases/download/v2.26.0/prometheus-2.26.0.linux-amd64.tar.gz</a></p>
<p>CentOS 7.9</p>
<h2 id="下载并运行prometheus">下载并运行Prometheus</h2>
<pre><code class="language-shell"># wget https://github.com/prometheus/prometheus/releases/download/v2.26.0/prometheus-2.26.0.linux-amd64.tar.gz
# tar xvzf prometheus-2.26.0.linux-amd64.tar.gz
# cd prometheus-2.26.0.linux-amd64
# ls
console_libraries  consoles  LICENSE  NOTICE  prometheus  prometheus.yml  promtool
</code></pre>
<p>开始运行之前，先对它进行配置。</p>
<h2 id="配置prometheus自身监控">配置Prometheus自身监控</h2>
<p>Prometheus通过抓取度量HTTP端点来从目标收集指标。由于Prometheus以同样的方式暴露自己的数据，它也可以搜集和监控自己的健康状况。<br>
虽然只收集自身数据的Prometheus服务器不是很有用，但它是一个很好的开始示例。保存以下Prometheus基础配置到一个名为<code>prometheus.yml</code>的文件（安装包自动解压后，解压目录下，默认就就有一个名为<code>prometheus.yml</code>的文件）</p>
<pre><code class="language-yaml">global:
  scrape_interval:     15s # 默认，每15秒采样一次目标

  # 与其它外部系统(比如federation, remote storage, Alertmanager)交互时，会附加这些标签到时序数据或者报警
  external_labels:
    monitor: 'codelab-monitor'

# 一份采样配置仅包含一个 endpoint 来做采样
# 下面是 Prometheus 本身的endpoint:
scrape_configs:
  # job_name 将被被当作一个标签 `job=&lt;job_name&gt;`添加到该配置的任意时序采样.
  - job_name: 'prometheus'

    # 覆盖全局默认值，从该job每5秒对目标采样一次
    scrape_interval: 5s

    static_configs:
      # 如果需要远程访问， localhost  也可以替换为具体IP，比如10.118.71.170
      - targets: ['localhost:9090'] 
</code></pre>
<p>有关配置选项的完整说明，请参阅<a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/" target="_blank" rel="noopener nofollow">配置文档</a>。</p>
<h2 id="启动prometheus">启动Prometheus</h2>
<p>使用新创建的配置文件来启动 Prometheus，切换到包含 Prometheus 二进制文件的目录并运行</p>
<pre><code class="language-shell"># 启动 Prometheus.
# 默认地, Prometheus 在 ./data 路径下存储其数据库 (flag --storage.tsdb.path).
# ./prometheus --config.file=prometheus.yml
</code></pre>
<p>通过访问 <code>localhost:9000</code> 来浏览状态页。等待几秒让他从自己的 HTTP metric endpoint 来收集数据。</p>
<p>还可以通过访问到其 metrics endpoint（<a href="http://localhost:9090/metrics%EF%BC%89" target="_blank" rel="noopener nofollow">http://localhost:9090/metrics）</a> 来验证 Prometheus 是否正在提供有关其自身的 metrics</p>
<h2 id="开放防火墙端口">开放防火墙端口</h2>
<pre><code class="language-shell"># firewall-cmd --permanent --zone=public --add-port=9090/tcp
success
# firewall-cmd --reload
success
</code></pre>
<h2 id="使用expressin-browser">使用expressin browser</h2>
<p>使用 Prometheus 内置的expressin browser访问 <code>localhost:9090/graph</code>，选择 <code>Graph</code> 导航菜单下的 <code>Table</code> tab页 (<code>Classic UI</code>下为<code>Console</code> tab页)。</p>
<p>通过查看<code>localhost:9090/metrics</code> 页面内容可知，Prometheus 导出了关于其自身的一个名为 <code>prometheus_target_interval_length_seconds</code>指标（目标采样之间的实际间隔）。将其作为搜索表达式，输入到表达式搜索框中，点击 <code>Execute</code> 按钮，如下，将返回多个不同的时间序列（以及每个时间序列的最新值），所有时间序列的 metric 名称均为 <code>prometheus_target_interval_length_seconds</code>，但具有不同的标签。 这些标签具有不同的<code>延迟百分比</code>和<code>目标组间隔（target group intervals）</code>。</p>
<p><img src="https://img2024.cnblogs.com/blog/1569452/202501/1569452-20250112215849331-1919561330.png" alt="" loading="lazy"></p>
<p>如果我们只对第 99 个百分位延迟感兴趣，则可以使用以下查询来检索该信息：</p>
<pre><code>prometheus_target_interval_length_seconds{quantile="0.99"}
</code></pre>
<p>如果需要计算返回的时间序列数，可以修改查询如下：</p>
<pre><code>count(prometheus_target_interval_length_seconds)
</code></pre>
<p>更多有关 expression language 的更多信息，请查看 <a href="https://prometheus.io/docs/prometheus/latest/querying/basics/" target="_blank" rel="noopener nofollow">expression language 文档</a>。</p>
<h2 id="使用绘图界面"><strong>使用绘图界面</strong></h2>
<p>要绘制图形表达式，请使用 “Graph” 选项卡。</p>
<p>例如，输入以下表达式以绘制在自采样的 Prometheus 中每秒创建 chunk 的速率：</p>
<pre><code>rate(prometheus_tsdb_head_chunks_created_total[1m])
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1569452/202501/1569452-20250112215907788-1438290445.png" alt="" loading="lazy"></p>
<h2 id="启动一些采样目标">启动一些采样目标</h2>
<p>现在让我们增加一些采样目标供 Prometheus 进行采样。</p>
<p>使用<code>Node Exporter</code>作为采样目标，多关于它的使用<a href="https://prometheus.io/docs/guides/node-exporter/" target="_blank" rel="noopener nofollow">请查阅</a></p>
<pre><code class="language-shell"># wget https://github.com/prometheus/node_exporter/releases/download/v1.1.2/node_exporter-1.1.2.linux-amd64.tar.gz
# tar -xvzf node_exporter-1.1.2.linux-amd64.tar.gz
# ./node_exporter --web.listen-address 127.0.0.1:8001
# ./node_exporter --web.listen-address 127.0.0.1:8002
# ./node_exporter --web.listen-address 127.0.0.1:8003
</code></pre>
<p>现在，应该存在监听 <code>http://localhost:8080/metrics, http://localhost:8081/metrics 和http://localhost:8082/metrics</code>的示例目标</p>
<h2 id="配置-prometheus-来监控示例目标">配置 Prometheus 来监控示例目标</h2>
<p>现在，我们将配置 Prometheus 来采样这些新目标。 让我们将所有三个 endpoint 分组为一个称为 “node” 的 job。 但是，假设前两个 endpoint 是生产目标，而第三个 endpoint 代表金丝雀实例。 为了在 Prometheus 中对此建模，我们可以将多个端组添加到单个 job 中，并为每个目标组添加额外的标签。 在此示例中，我们将 <code>group=“ production”</code> 标签添加到第一个目标组，同时将 <code>group=“ canary” </code>添加到第二个目标。</p>
<p>为此，请将以下job定义添加到 <code>prometheus.yml</code> 中的 <code>scrape_configs</code> 部分，然后重新启动 Prometheus 实例。修改后的 <code>prometheus.yml</code>内容如下</p>
<pre><code class="language-yaml">global:
  scrape_interval:     15s # 默认，每15秒采样一次目标

  # 与其它外部系统(比如federation, remote storage, Alertmanager)交互时，会附加这些标签到时序数据或者报警
  external_labels:
    monitor: 'codelab-monitor'

# 一份采样配置仅包含一个 endpoint 来做采样
# 下面是 Prometheus 本身的endpoint:
scrape_configs:
  # job_name 将被被当作一个标签 `job=&lt;job_name&gt;`添加到该配置的任意时序采样.
  - job_name: 'prometheus'

    # 覆盖全局默认值，从该job每5秒对目标采样一次
    scrape_interval: 5s

    static_configs:
      - targets: ['10.118.71.170:9090']

  - job_name: 'node'

    # Override the global default and scrape targets from this job every 5 seconds.
    scrape_interval: 5s

    static_configs:
      - targets: ['localhost:8001', 'localhost:8002']
        labels:
          group: 'production'

      - targets: ['localhost:8003']
        labels:
          group: 'canary'
</code></pre>
<p>查看<code>Targets</code>(<code>Status</code> -&gt; <code>Targets</code>)</p>
<p><img src="https://img2024.cnblogs.com/blog/1569452/202501/1569452-20250112215937530-1547920527.png" alt="" loading="lazy"></p>
<p><code>Graph</code>查询</p>
<p><img src="https://img2024.cnblogs.com/blog/1569452/202501/1569452-20250112215949299-1183193298.png" alt="" loading="lazy"></p>
<h2 id="配置规则以将采样的数据聚合到新的时间序列">配置规则以将采样的数据聚合到新的时间序列</h2>
<p>尽管在我们的示例中并不会有问题，但是在聚集了数千个时间序列中查询时可能会变慢。 为了提高效率，Prometheus 允许通过配置的记录规则将表达式预记录到全新的持久化的时间序列中。 假设我们感兴趣的是 5 分钟的窗口内测得的每个实例的所有cpu上平均的cpu时间（<code>node_cpu_seconds_total</code>，保留 Job，instance，和mode 维度））。 我们可以这样写：</p>
<pre><code>avg by (job, instance, mode) (rate(node_cpu_seconds_total[5m]))
</code></pre>
<p><code>Graph</code>中执行查询，结果如下</p>
<p><img src="https://img2024.cnblogs.com/blog/1569452/202501/1569452-20250112220004212-129071302.png" alt="" loading="lazy"></p>
<p>现在，要将由该表达式产生的时间序列记录到一个名为：<code>job_instance_mode:node_cpu_seconds:avg_rate5m</code> 的新指标，使用以下记录规则创建文件并将其保存 <code>prometheus.rules.yml</code></p>
<pre><code class="language-yaml">groups:
- name: cpu-node
  rules:
  - record: job_instance_mode:node_cpu_seconds:avg_rate5m
    expr: avg by (job, instance, mode) (rate(node_cpu_seconds_total[5m]))
</code></pre>
<p>在 <code>prometheus.yml</code> 中添加 <code>rule_files</code> 语句，以便 Prometheus 选择此新规则。 现在，<code>prometheus.yml</code>配置应如下所示：</p>
<pre><code class="language-yaml">global:
  scrape_interval:     15s # 默认，每15秒采样一次目标

  # 与其它外部系统(比如federation, remote storage, Alertmanager)交互时，会附加这些标签到时序数据或者报警
  external_labels:
    monitor: 'codelab-monitor'

rule_files:
  - 'prometheus.rules.yml'

# 一份采样配置仅包含一个 endpoint 来做采样
# 下面是 Prometheus 本身的endpoint:
scrape_configs:
  # job_name 将被被当作一个标签 `job=&lt;job_name&gt;`添加到该配置的任意时序采样.
  - job_name: 'prometheus'

    # 覆盖全局默认值，从该job每5秒对目标采样一次
    scrape_interval: 5s

    static_configs:
      - targets: ['10.118.71.170:9090']

  - job_name: 'node'

    # Override the global default and scrape targets from this job every 5 seconds.
    scrape_interval: 5s

    static_configs:
      - targets: ['localhost:8001', 'localhost:8002']
        labels:
          group: 'production'

      - targets: ['localhost:8003']
        labels:
          group: 'canary'
</code></pre>
<p>通过新的配置重新启动 Prometheus，并通过<code>expression brower</code>查询 <code>job_instance_mode:node_cpu_seconds:avg_rate5m</code>，结果如下</p>
<p><img src="https://img2024.cnblogs.com/blog/1569452/202501/1569452-20250112220022542-1016940020.png" alt="" loading="lazy"></p>
<h2 id="参考连接">参考连接</h2>
<p><a href="https://www.kancloud.cn/nicefo71/prometheus-doc-zh/1331204" target="_blank" rel="noopener nofollow">https://www.kancloud.cn/nicefo71/prometheus-doc-zh/1331204</a></p>
<p><a href="https://prometheus.io/docs/prometheus/latest/getting_started/" target="_blank" rel="noopener nofollow">https://prometheus.io/docs/prometheus/latest/getting_started/</a></p>

</div>
<div id="MySignature" role="contentinfo">
    <div id="AllanboltSignature">
    <p id="PSignature" style="border: #330066 1px dashed; padding: 5px 10px; font-family: 微软雅黑; font-size: 11px">
        <span style="margin-left: 5px; font-weight: bold">作者：<a style="text-decoration: none; color: blue" href="https://www.cnblogs.com/shouke/" target="_blank">授客</a></span>
		<br>
        <span style="margin-left: 5px; font-weight: bold">微信/QQ：<a style="text-decoration: none; color: blue" href="http://wpa.qq.com/msgrd?v=3&amp;uin=1033553122&amp;site=qq&amp;menu=yes" target="_blank">1033553122</a>
		<br>
        <span style="margin-left: 5px; font-weight: bold">全国软件测试QQ交流群：<a style="text-decoration: none; color: blue" href="//shang.qq.com/wpa/qunwpa?idkey=b92033e9c78cb53f6fffb88f92a2dba1ed61a1ef344f4d20b286ebc3cef5bcc2" target="_blank">7156436</a></span></span>
		<br>
        <span style="margin-left: 5px; font-weight: bold">Git地址：<a style="text-decoration: none; color: blue" href="https://gitee.com/ishouke" target="_blank">https://gitee.com/ishouke</a></span>
		<br>
        <span style="margin-left: 5px; font-weight: bold">友情提示：<span>限于时间仓促，文中可能存在错误，欢迎指正、评论！</span>
        <br>
		<span><span style="margin-left: 5px; font-weight: bold; color: red">作者五行缺钱，如果觉得文章对您有帮助，请扫描下边的二维码打赏作者，金额随意</span>，您的支持将是我继续创作的源动力，<span style="margin-left: 10px; font-weight: bold; color: red">打赏后如有任何疑问，请联系我!!!</span></span>
        <br>
		<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;微信打赏&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		支付宝打赏&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;全国软件测试交流QQ群&nbsp;&nbsp;<br>
		<img src="https://www.cnblogs.com/images/cnblogs_com/shouke/1368383/t_%E5%BE%AE%E4%BF%A1%E6%94%B6%E6%AC%BE%E7%A0%81.bmp">
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="https://www.cnblogs.com/images/cnblogs_com/shouke/1368383/t_%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%B6%E6%AC%BE%E7%A0%81.bmp">
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="https://www.cnblogs.com/images/cnblogs_com/shouke/1368383/t_qq%E7%BE%A4.bmp">
    </span></span></p>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.6806112107164352" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-12 22:02">2025-01-12 22:02</span>&nbsp;
<a href="https://www.cnblogs.com/shouke">授客</a>&nbsp;
阅读(<span id="post_view_count">36</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18667439" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18667439);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18667439', targetLink: 'https://www.cnblogs.com/shouke/p/18667439', title: 'Prometheus 入门' })">举报</a>
</div>
        