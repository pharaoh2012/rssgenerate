
<table cellspacing="0" cellpadding="0"><tbody><tr><td class="t_f" id="postmessage_52767706">
<strong>本贴主要针对于一些技术小白的经验分享，由于本人也不是什么技术大佬，所以也是讲实际工作中，觉得比较好且实用的一些技巧分享出来，大佬可以直接略过，当然也欢迎大佬对不足之处进行指点以及完善。感谢！</strong><br>
<font color="#ff0000">对于需要修改的参数我会用绿色字体进行标准说明。</font><br>
首先脚本的内容为Start开始（不包括Start），End结束（不包括End）<br>
需要在服务器上编辑一个.sh后缀的脚本文件，并且赋予可执行权限。这里举例赋予权限的命令<br>
<font color="#ff0000">chmod +x&nbsp;&nbsp;mysql_backup.sh&nbsp; &nbsp; #mysql_backup.sh&nbsp; &nbsp;为备份的脚本文件</font><br>
<font color="#000000">将Start-End的内容填充到上述的mysql_backup.sh文件中</font><br>
<br>
<font color="#ff0000">Start</font><br>
#!/bin/sh<br>
<br>
# 数据库账号信息<br>
DB_USER="<font color="#00ff00">root</font>"<br>
DB_PWD="<font color="#00ff00">your_mysql_passwd</font>"<br>
DB_HOST="<font color="#00ff00">127.0.0.1</font>"<br>
DB_PORT="<font color="#00ff00">3306</font>"<br>
<br>
# MYSQL所在目录<br>
MYSQL_DIR="<font color="#00ff00">/home/docker/overlay2/151b22c1a8980d2f889e86a1e07acdd506525a99b484393435c3040af97da3e5/diff/usr/bin/mysql</font>"<br>
# 备份文件存放目录<br>
BAK_DIR="<font color="#00ff00">/home/backup/mysql_bak</font>"<br>
# 时间格式化，如 20250401<br>
DATE=`date +%Y%m%d`<br>
# 备份脚本保存的天数<br>
DEL_DAY=7<br>
<br>
# 要备份的数据库，空格分隔<br>
DATABASES=("<font color="#00ff00">your_backup_database</font>")<br>
<br>
# 创建日期目录<br>
mkdir $BAK_DIR/$DATE<br>
<br>
echo "-------------------$(date +%F_%T) start ---------------" &gt;&gt;${BAK_DIR}/db_backup.log<br>
for database in "${DATABASES[@]}"<br>
do<br>
&nbsp;&nbsp;# 备份指定数据库中数据 //注意这里是-i，如果是-it，用定时器文件就会为空<br>
&nbsp;&nbsp;docker exec -i mysql mysqldump --skip-lock-tables --opt -u$DB_USER -p$DB_PWD -h$DB_HOST -P$DB_PORT ${database} &gt; $BAK_DIR/$DATE/${database}.sql<br>
done<br>
<br>
echo "--- backup file created: $BAK_DIR/db_backup_$DATE.tar.gz" &gt;&gt;${BAK_DIR}/db_backup.log<br>
<br>
# 将备份好的sql脚本压缩到db_backup_yyyyMMdd.tar.gz<br>
tar -czf $BAK_DIR/db_backup_$DATE.tar.gz $BAK_DIR/$DATE<br>
<br>
# 压缩后，删除压缩前的备份文件和目录<br>
rm -f $BAK_DIR/$DATE/*<br>
rmdir $BAK_DIR/$DATE<br>
<br>
# 遍历备份目录下的压缩文件<br>
LIST=$(ls ${BAK_DIR}/db_backup_*)<br>
# 获取截止时间，早于该时间的文件将删除<br>
SECONDS=$(date -d "$(date +%F) -${DEL_DAY} days" +%s)<br>
<br>
for index in ${LIST}<br>
do<br>
&nbsp;&nbsp;# 对文件名进行格式化，取命名末尾的时间，格式如 20250401<br>
&nbsp;&nbsp;timeString=$(echo ${index} | egrep -o "?[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]")<br>
&nbsp;&nbsp;if [ -n "$timeString" ]<br>
&nbsp;&nbsp;then<br>
&nbsp; &nbsp; indexDate=${timeString//./-}<br>
&nbsp; &nbsp; indexSecond=$( date -d ${indexDate} +%s )<br>
&nbsp; &nbsp; # 与当天的时间做对比，把早于7天的备份文件删除<br>
&nbsp; &nbsp; if [ $(( $SECONDS- $indexSecond )) -gt 0 ]<br>
&nbsp; &nbsp; then<br>
&nbsp; &nbsp;&nbsp; &nbsp;rm -f $index<br>
&nbsp; &nbsp;&nbsp; &nbsp;echo "---- deleted old backup file : $index " &gt;&gt;${BAK_DIR}/db_backup.log<br>
&nbsp; &nbsp; fi<br>
&nbsp;&nbsp;fi<br>
done<br>
<br>
echo "-------------------$(date +%F_%T) end ---------------" &gt;&gt;${BAK_DIR}/db_backup.log<br>
<font color="#ff0000">End</font><br>
<br>
参数解释说明：<br>
第一处参数DB_USER，即数据库的用户，且此用户需要有对数据库操作的权限，例如增删改的权限，推荐为管理员用户root<br>
第二处参数DB_PWD，即改用户的登录密码<br>
第三处参数DB_HOST，备份数据库所在的服务器IP<br>
<br>
第四处参数DB_PORT，数据库的服务端口号，默认的为3306，根据你的数据库服务端口号来<br>
第五处参数MYSQL_DIR，mysql所在的目录路径，且为绝对路径，离线安装的MySQL，即为可执行文件mysql所在的绝对路径，若是docker部署的MySQL，参考<font color="#000000">diff/usr/bin/mysql后缀，可以利用"find / -name mysql"的查询命令，找到后缀为此处描述的后缀，复制完全的绝对路径目录粘贴即可</font><br>
<font color="#000000">第六处参数</font>BAK_DIR，备份文件存放的目录，这里可以自行定义，但是要确保填充的目录实际存在<br>
第七处参数DATABASES，你所要备份的数据库名称，例如备份名为mysql_prod的数据库，将数据库名称填入其中即可<br>
<br>
补充：这里的数据库备份文件保存的时间期限为7天，可以对DEL_DAY参数进行修改以自定义文件保存的时间<br>
至此，对MySQL数据库进行备份的目标已经完成，以下对于自动备份进行讲解<br>
这里需要结合到Linux服务器自带的一个定时任务执行功能crontab，利用”crontab -e“ 命令对定时任务进行编辑<br>
以下是每天凌晨0点进行备份的方案示例<br>
0 0 * * * /home/backup/mysql_bak.sh<br>
<br>
0 0 * * * 每个参数分别对应 分 时 日 月 周，根据您的需要自行修改。<br>
综上所述，在Linux环境下MySQL数据库的自动备份的功能已实现。<br>
<br>
欢迎大家对其中不足之处进行指出，一起交流将方法完善。</td></tr></tbody></table>


