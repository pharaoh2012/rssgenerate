
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/powertoolsteam/p/19022593" title="发布于 2025-08-05 09:30">
    <span role="heading" aria-level="2">.NET 10 中的新增功能系列文章4——.NET SDK中的新增功能</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="引言">引言</h2>
<p>随着 .NET 10 的发布，.NET SDK 迎来了一系列令人振奋的新功能和增强特性。这些改进不仅提升了开发者的工作效率，还优化了应用程序的性能和部署体验。本文将详细介绍 .NET 10 SDK 中的新增功能，包括工具改进、基于文件的应用增强、包引用修剪等，帮助开发者充分利用这些新特性来构建更高效的应用程序。</p>
<h2 id="正文">正文</h2>
<h3 id="net-工具改进">.NET 工具改进</h3>
<h4 id="特定于平台的-net-工具">特定于平台的 .NET 工具</h4>
<p>.NET 10 引入了对多平台 .NET 工具的增强支持，开发者现在可以在单个包中发布支持多个 RuntimeIdentifier (RID) 的工具。这意味着工具作者可以捆绑所有受支持平台的二进制文件，而 .NET CLI 会在安装或运行时自动选择正确的二进制文件。这一改进显著简化了跨平台工具的创作和分发流程。</p>
<p>这些改进的工具支持多种包装变体：</p>
<ul>
<li>依赖于框架，平台无关（经典模式，任何安装了 .NET 10 的地方都可以运行）</li>
<li>框架依赖，平台特定（更小，针对每个平台进行优化）</li>
<li>自包含，平台特定（包含运行时，无需安装 .NET）</li>
<li>裁剪版，平台特定（更小，裁剪未使用的代码）</li>
<li>平台特定的 AOT 编译（最大性能和最小部署）</li>
</ul>
<p>这些新工具的工作方式与常规的已发布应用程序非常相似，因此任何可用于应用程序的发布选项（如自包含、剪裁或 AOT 编译）也同样适用于这些工具。</p>
<h4 id="单次工具执行">单次工具执行</h4>
<p>.NET 10 引入了 <code>dotnet tool exec</code> 命令，允许开发者执行 .NET 工具而无需全局或本地安装该工具。这对于 CI/CD 或临时使用场景尤其有用。</p>
<pre><code class="language-bash">dotnet tool exec --source ./artifacts/package/ toolsay "Hello, World!"
</code></pre>
<p>执行此命令会下载并运行指定的工具包。如果工具本地不存在，系统会提示用户确认下载。除非指定显式版本（如 <code>toolsay@0.1.0</code>），否则将使用工具包的最新版本。</p>
<h4 id="新的-dnx-工具执行脚本">新的 dnx 工具执行脚本</h4>
<p><code>dnx</code> 脚本提供了一种简化的方式来执行工具，它将所有参数转发到 <code>dotnet</code> CLI 进行处理：</p>
<pre><code class="language-bash">dnx toolsay "Hello, World!"
</code></pre>
<p><code>dnx</code> 命令的实际实现是在 CLI 本身的 <code>dotnet</code> 中，这允许其行为随时间推移而演变。</p>
<h3 id="通过---cli-schema-实现的-cli-自省">通过 --cli-schema 实现的 CLI 自省</h3>
<p>所有 CLI 命令上都新增了 <code>--cli-schema</code> 选项。使用时，它会输出调用的命令或子命令的 CLI 命令树的 JSON 表示形式，这对于工具作者、shell 集成和高级脚本非常有用。</p>
<pre><code class="language-bash">dotnet clean --cli-schema
</code></pre>
<p>输出示例：</p>
<pre><code class="language-json">{
  "name": "clean",
  "version": "10.0.100-dev",
  "description": ".NET Clean Command",
  "arguments": {
    "PROJECT | SOLUTION": {
      "description": "The project or solution file to operate on...",
      "arity": { "minimum": 0, "maximum": null }
    }
  },
  "options": {
    "--artifacts-path": {
      "description": "The artifacts path...",
      "helpName": "ARTIFACTS_DIR"
    }
  },
  "subcommands": {}
}

</code></pre>
<h3 id="基于文件的应用程序功能增强">基于文件的应用程序功能增强</h3>
<h4 id="具备发布支持和本地-aot-的增强">具备发布支持和本地 AOT 的增强</h4>
<p>基于文件的应用现在支持通过 <code>dotnet publish app.cs</code> 命令发布到本机可执行文件，默认情况下，所有基于文件的应用都以本机 AOT 为目标。如果需要使用与本机 AOT 不兼容的包或功能，可以使用 <code>#:property PublishAot=false</code> 指令禁用此功能。</p>
<p>基于文件的应用还包括以下增强功能：</p>
<ul>
<li>项目引用：支持通过 <code>#:project</code> 指令引用项目</li>
<li>运行时路径访问：应用程序文件和目录的路径可在运行时通过 <code>System.AppContext.GetData</code> 访问</li>
<li>增强了 shebang 支持：通过改进的 shebang 处理（包括支持无扩展名文件），直接执行 shell 脚本</li>
</ul>
<p>项目引用示例：</p>
<pre><code class="language-csharp">#:project ../ClassLib/ClassLib.csproj

var greeter = new ClassLib.Greeter();
var greeting = greeter.Greet(args.Length &gt; 0 ? args[0] : "World");
Console.WriteLine(greeting);
</code></pre>
<p>增强的 shebang 支持示例：</p>
<pre><code class="language-csharp">#!/usr/bin/env dotnet

Console.WriteLine("Hello shebang!");
</code></pre>
<h3 id="修剪由框架提供的包引用">修剪由框架提供的包引用</h3>
<p>从 .NET 10 开始，NuGet 审核功能现在可以修剪项目不使用的框架提供的包引用。默认情况下，所有 <code>net</code> 目标框架（如 <code>net8.0</code> 和 <code>net10.0</code>）以及 .NET Standard 2.0 及更高版本的目标框架都启用此功能。</p>
<p>此更改有助于：</p>
<ul>
<li>减少生成过程中还原和分析的包数量</li>
<li>缩短生成时间</li>
<li>减少磁盘空间使用量</li>
<li>减少来自 NuGet 审计以及其他依赖项扫描机制的误报情况</li>
</ul>
<p>虽然此功能默认为列出的 TPM 启用，但可以通过在项目文件中将 <code>RestoreEnablePackagePruning</code> 属性设置为 <code>false</code> 来禁用此功能。</p>
<h3 id="更一致的命令顺序">更一致的命令顺序</h3>
<p>.NET 10 引入了常见命令的新别名，使它们更易于记住和键入：</p>
<table>
<thead>
<tr>
<th>新名词优先形式</th>
<th>别名</th>
</tr>
</thead>
<tbody>
<tr>
<td>dotnet package add</td>
<td>dotnet add package</td>
</tr>
<tr>
<td>dotnet package list</td>
<td>dotnet list package</td>
</tr>
<tr>
<td>dotnet package remove</td>
<td>dotnet remove package</td>
</tr>
<tr>
<td>dotnet reference add</td>
<td>dotnet add reference</td>
</tr>
<tr>
<td>dotnet reference list</td>
<td>dotnet list reference</td>
</tr>
<tr>
<td>dotnet reference remove</td>
<td>dotnet remove reference</td>
</tr>
</tbody>
</table>
<p>新的名词优先表单符合一般 CLI 标准，使 <code>dotnet</code> CLI 与其他工具更加一致。虽然动词优先表单继续工作，但建议使用名词优先表单以提高脚本和文档中的可读性和一致性。</p>
<h3 id="cli-命令默认为交互式终端中的交互模式">CLI 命令默认为交互式终端中的交互模式</h3>
<p>在交互式终端中，现在默认启用 <code>--interactive</code> 标志用于 CLI 命令。此更改允许命令动态检索凭据或执行其他交互行为，而无需显式设置标志。对于非交互方案，可以通过指定 <code>--interactive false</code> 来禁用交互性。</p>
<h3 id="原生-shell-tab-补全脚本">原生 shell Tab 补全脚本</h3>
<p><code>dotnet</code> CLI 现在支持使用 <code>dotnet completions generate [SHELL]</code> 命令为常用 shell 生成原生 Tab 补全脚本。支持的 shell 包括：</p>
<ul>
<li>bash</li>
<li>fish</li>
<li>nushell</li>
<li>powershell</li>
<li>zsh</li>
</ul>
<p>例如，在 PowerShell 中，可以通过将以下内容添加到 <code>$PROFILE</code> 中来启用补全功能：</p>
<h3 id="控制台应用可以原生创建容器映像">控制台应用可以原生创建容器映像</h3>
<p>控制台应用现在可以通过 <code>dotnet publish /t:PublishContainer</code> 创建容器映像，而无需在项目文件中包含 <code>&lt;EnableSdkContainerSupport&gt;</code> 属性。这使控制台应用与 ASP.NET Core 和 Worker SDK 应用的行为保持一致。</p>
<p>使用新的 <code>&lt;ContainerImageFormat&gt;</code> 属性可以显式地将容器映像的格式设置为 Docker 或 OCI。此属性替代默认行为，具体取决于基本映像格式以及容器是否为多体系结构。</p>
<h3 id="支持-dotnet-test-中的-microsoft-测试平台">支持 dotnet test 中的 Microsoft 测试平台</h3>
<p>从 .NET 10 开始，<code>dotnet test</code> 原生支持 Microsoft.Testing.Platform。要启用此功能，可以将以下配置添加到 <code>dotnet.config</code> 文件：</p>
<pre><code class="language-ini">[dotnet.test.runner]
name = "Microsoft.Testing.Platform"
</code></pre>
<h2 id="系列文章">系列文章</h2>
<p><a href="https://www.cnblogs.com/powertoolsteam/p/19010089" target="_blank">.NET 10 中的新增功能系列文章1——运行时中的新增功能</a></p>
<p><a href="https://www.cnblogs.com/powertoolsteam/p/19012227" target="_blank">.NET 10 中的新增功能系列文章2——ASP.NET Core 中的新增功能</a></p>
<p><a href="https://www.cnblogs.com/powertoolsteam/p/19014471" target="_blank">.NET 10 中的新增功能系列文章3——.NET MAUI 中的新增功能</a></p>

</div>
<div id="MySignature" role="contentinfo">
    <hr>
<br>
<p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">本文是由葡萄城技术开发团队发布，转载请注明出处：<a href="https://www.grapecity.com.cn/" target="_blank">葡萄城官网</a></p>
<!--p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">了解企业级低代码开发平台，请前往<a href="https://www.grapecity.com.cn/solutions/huozige" target="_blank">活字格</a>
</p><p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">了解可嵌入您系统的在线 Excel，请前往<a href="https://www.grapecity.com.cn/developer/spreadjs" target="_blank">SpreadJS纯前端表格控件</a></p>
<p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">了解嵌入式的商业智能和报表软件，请前往<a href="https://www.grapecity.com.cn/solutions/wyn" target="_blank">Wyn Enterprise
</a></p-->

<br>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-05 09:30">2025-08-05 09:30</span>&nbsp;
<a href="https://www.cnblogs.com/powertoolsteam">葡萄城技术团队</a>&nbsp;
阅读(<span id="post_view_count">362</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19022593);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19022593', targetLink: 'https://www.cnblogs.com/powertoolsteam/p/19022593', title: '.NET 10 中的新增功能系列文章4——.NET SDK中的新增功能' })">举报</a>
</div>
        