
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xwz1024/p/18961851" title="发布于 2025-07-02 17:19">
    <span role="heading" aria-level="2">Django实战：HTTP状态码与业务状态码的分层设计与实战应用</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250702171940965-625554063.png" alt="Django实战：HTTP状态码与业务状态码的分层设计与实战应用" class="desc_img">
        HTTP状态码是服务器响应请求的3位数字代码，分为1xx（信息）、2xx（成功）、3xx（重定向）、4xx（客户端错误）、5xx（服务器错误）。业务状态码则用于描述具体业务逻辑结果，常在响应体中返回。二者在前后端交互中有不同用途和处理方式。本文还介绍了如何在Django项目中设计并使用业务状态码。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="一http-状态码">一、HTTP 状态码</h2>
<h3 id="介绍">介绍</h3>
<p>HTTP响应状态码是用以表示网页服务器HTTP响应状态的3位数字代码。它由HTTP协议定义，用于描述请求 - 响应过程中的各种状态，帮助客户端（如浏览器）理解服务器的响应结果。</p>
<p>打开Chrome浏览器——F12——网络，查看响应标头。</p>
<p><img alt="image-20250702113257183" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250702171737551-459810109.png" class="lazyload"></p>
<h3 id="http状态码五个类别">HTTP状态码五个类别</h3>
<p>1xx: 信息性状态码</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>状态码英文</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>100</td>
<td>Continue</td>
<td>服务器已经收到了请求的初始部分，客户端应该继续发送请求</td>
</tr>
<tr>
<td>101</td>
<td>Switching Protocols</td>
<td>服务器根据客户端的请求切换协议</td>
</tr>
</tbody>
</table>
<p>2xx: 成功状态码</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>状态码英文</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>200</td>
<td>OK</td>
<td>请求成功，通常用于 GET 请求</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td>请求成功，并且创建了新的资源</td>
</tr>
<tr>
<td>202</td>
<td>Accepted</td>
<td>请求已被接受处理，但处理尚未完成</td>
</tr>
<tr>
<td>204</td>
<td>No Content</td>
<td>请求成功，但没有返回任何内容</td>
</tr>
<tr>
<td>205</td>
<td>Reset Content</td>
<td>告诉客户端重置发送了请求的文档</td>
</tr>
</tbody>
</table>
<p>3xx: 重定向状态码</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>状态码英文</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>300</td>
<td>Multiple Choices</td>
<td>表示有多个选择，客户端可以选择其中一个</td>
</tr>
<tr>
<td>301</td>
<td>Moved Permanently</td>
<td>资源已被永久移动到新的 URL</td>
</tr>
<tr>
<td>302</td>
<td>Found（之前是 “Moved Temporarily”）</td>
<td>资源临时移动到新的 URL</td>
</tr>
<tr>
<td>303</td>
<td>See Other</td>
<td>告诉客户端在另一个 URL 上获取资源</td>
</tr>
<tr>
<td>304</td>
<td>Not Modified</td>
<td>资源未修改，可以使用缓存版本</td>
</tr>
<tr>
<td>307</td>
<td>Temporary Redirect</td>
<td>资源临时移动到新的 URL，与 302 类似，但不会改变请求方法</td>
</tr>
<tr>
<td>308</td>
<td>Permanent Redirect</td>
<td>资源已被永久移动到新的 URL，与 301 类似，但不会改变请求方法</td>
</tr>
</tbody>
</table>
<p>4xx: 客户端错误状态码</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>状态码英文</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>400</td>
<td>Bad Request</td>
<td>请求格式错误，服务器无法理解</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td>请求需要用户认证</td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td>服务器理解请求，但拒绝执行</td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td>请求的资源不存在</td>
</tr>
<tr>
<td>405</td>
<td>Method Not Allowed</td>
<td>请求的 HTTP 方法不被允许</td>
</tr>
<tr>
<td>406</td>
<td>Not Acceptable</td>
<td>服务器无法生成符合客户端要求的响应</td>
</tr>
<tr>
<td>408</td>
<td>Request Timeout</td>
<td>请求超时，服务器等待了太长时间</td>
</tr>
<tr>
<td>409</td>
<td>Conflict</td>
<td>请求与服务器上的资源状态冲突</td>
</tr>
<tr>
<td>410</td>
<td>Gone</td>
<td>请求的资源已被永久删除</td>
</tr>
</tbody>
</table>
<p>5xx: 服务器错误状态码</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>状态码英文</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>500</td>
<td>Internal Server Error</td>
<td>服务器内部错误，无法完成请求</td>
</tr>
<tr>
<td>501</td>
<td>Not Implemented</td>
<td>服务器不支持请求的功能</td>
</tr>
<tr>
<td>502</td>
<td>Bad Gateway</td>
<td>作为网关或代理的服务器从上游服务器收到了无效的响应</td>
</tr>
<tr>
<td>503</td>
<td>Service Unavailable</td>
<td>服务器目前无法处理请求，可能是临时超载或维护</td>
</tr>
<tr>
<td>504</td>
<td>Gateway Timeout</td>
<td>作为网关或代理的服务器没有及时从上游服务器收到响应</td>
</tr>
<tr>
<td>505</td>
<td>HTTP Version Not Supported</td>
<td>服务器不支持请求的 HTTP 协议版本</td>
</tr>
</tbody>
</table>
<p>参考资料：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Reference/Status" target="_blank" rel="noopener nofollow">HTTP 响应状态码</a></p>
<h2 id="二业务状态码">二、业务状态码</h2>
<h3 id="介绍-1">介绍</h3>
<p>业务状态码是应用层定义的状态码，用于描述具体业务逻辑的处理结果。它与HTTP状态码不同，HTTP状态码主要关注协议层面的通信状态，而业务状态码关注的是应用逻辑是否成功、失败以及失败的具体原因等。</p>
<ul>
<li>自定义性：业务状态码是根据具体业务需求定义的。</li>
<li>详细性：业务状态码可以更详细地描述业务逻辑的处理结果。</li>
</ul>
<h3 id="区别与联系">区别与联系</h3>
<p>在前后端交互中，<strong>HTTP状态码</strong>和<strong>业务状态码</strong>是两种不同的错误处理机制，它们的用途和触发方式不同：</p>
<table>
<thead>
<tr>
<th style="text-align: center"><strong>对比项</strong></th>
<th style="text-align: center"><strong>HTTP状态码</strong></th>
<th style="text-align: center"><strong>业务状态码</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center"><strong>定义</strong></td>
<td style="text-align: center">由HTTP协议定义的标准状态码（如200、401、404、500）</td>
<td style="text-align: center">后端自定义的业务逻辑状态码（如 <code>{ code: 401, msg: "未登录" }</code>）</td>
</tr>
<tr>
<td style="text-align: center"><strong>触发方式</strong></td>
<td style="text-align: center">由服务器直接返回HTTP响应头（如 <code>HTTP/1.1 401 Unauthorized</code>）</td>
<td style="text-align: center">由后端在HTTP 200响应体里返回（如 <code>{ code: 401, data: null }</code>）</td>
</tr>
<tr>
<td style="text-align: center"><strong>Axios拦截器处理</strong></td>
<td style="text-align: center">触发 <code>response.interceptors</code> 的 错误回调（<code>error.response.status</code>）</td>
<td style="text-align: center">触发 <code>response.interceptors</code> 的 成功回调（<code>response.data.code</code>）</td>
</tr>
<tr>
<td style="text-align: center"><strong>典型用途</strong></td>
<td style="text-align: center">表示HTTP请求本身的成功/失败（如网络错误）</td>
<td style="text-align: center">表示业务逻辑的成功/失败（如余额不足、权限不足）</td>
</tr>
</tbody>
</table>
<h3 id="业务状态码示例">业务状态码示例</h3>
<p>用户登录失败时，服务器响应数据如下：</p>
<ul>
<li>code：业务状态码</li>
<li>data：服务器返回数据</li>
<li>msg：服务器返回消息提示</li>
</ul>
<pre><code class="language-json">{"code":111201,"data":null,"msg":"账号或密码错误"}
</code></pre>
<p>注意：虽然是发生业务逻辑错误，但此时的 HTTP 状态码仍然为 200</p>
<h2 id="三项目实战">三、项目实战</h2>
<p>一个Django+DRF的后台管理系统项目，设计并使用业务状态码，可拆分为以下步骤：</p>
<h3 id="设计业务状态码">设计业务状态码</h3>
<p>设计业务状态码分配规则</p>
<ul>
<li>范围：100000 - 999999</li>
<li>第一段，2 位，表示应用APP。例如：myapp_system, myapp_infra</li>
<li>第二段，2 位，表示模块。例如：user, dept</li>
<li>第三段，2 位，表示自增数字。</li>
</ul>
<p>业务状态码具体分配示例</p>
<pre><code class="language-sh">一、项目框架预留
framework-exception      101100 - 101199

二、myapp_system 应用APP
system-user              111100 - 111199
system-auth              111200 - 111299
system-dept              111300 - 111399
system-post              111400 - 111499
system-role              111500 - 111599
system-menu              111600 - 111699
system-user_profile      111700 - 111799
system-notify_message    111800 - 111899
system-permission        111900 - 111999
system-dict_type         112000 - 112099
system-captcha           112100 - 112199

三、myapp_infra 应用APP
infra-job               121100 - 121199
infra-file_config       121200 - 121299
infra-file              121300 - 121399
infra-config            121400 - 121499
</code></pre>
<h3 id="设计全局响应格式">设计全局响应格式</h3>
<p>封装DRF的<code>Response</code>类，定义通用响应工具类</p>
<pre><code class="language-python">from rest_framework.response import Response
from rest_framework import status


class CommonResponse:
    """通用响应工具类"""

    @staticmethod
    def success(code=0, data=True, msg="", status_code=status.HTTP_200_OK):
        """业务成功响应"""
        return Response(
            {
                "code": code,  # 业务状态码为 0 表示成功
                "data": data,
                "msg": msg,
            },
            status=status_code,  # HTTP 状态码默认为200
        )

    @staticmethod
    def error(code=500, data=None, msg="Error", status_code=status.HTTP_200_OK):
        """业务错误响应，配合业务状态码使用"""
        return Response(
            {
                "code": code,
                "data": data,
                "msg": msg,
            },
            status=status_code,
        )
</code></pre>
<h3 id="业务状态码实战">业务状态码实战</h3>
<p>实战场景：用户登录过程中，可能出现账号或密码错误、用户已停用等情形。此时需要用到业务状态码进行友好提示。如下图所示：</p>
<p><img alt="image-20250630152631170" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250702171806608-147621349.png" class="lazyload"></p>
<p>代码实现效果：当账号或密码错误</p>
<p><img alt="image-20250630152959009" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250702171823630-831540259.png" class="lazyload"></p>
<p>代码实现效果：当用户已停用</p>
<p><img alt="image-20250630153157212" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250702171832177-1874286938.png" class="lazyload"></p>
<p>代码实现效果：当登录成功</p>
<p><img alt="image-20250630153458317" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250702171838877-1763638021.png" class="lazyload"></p>
<p><a href="https://gitee.com/zhulj993/mars-mgn/blob/master/mysite/myapp_system/auth/views.py" target="_blank" rel="noopener nofollow">点击查看完整代码</a></p>
<hr>
<p>您正在阅读的是《<strong>Django从入门到实战</strong>》专栏！关注不迷路~</p>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-02 17:20">2025-07-02 17:19</span>&nbsp;
<a href="https://www.cnblogs.com/xwz1024">小王子1024</a>&nbsp;
阅读(<span id="post_view_count">103</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18961851);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18961851', targetLink: 'https://www.cnblogs.com/xwz1024/p/18961851', title: 'Django实战：HTTP状态码与业务状态码的分层设计与实战应用' })">举报</a>
</div>
	