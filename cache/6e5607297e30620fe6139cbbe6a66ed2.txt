
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Tom-shushu/p/19009537" title="发布于 2025-07-28 22:22">
    <span role="heading" aria-level="2">SpringBoot中使用TOTP实现MFA（多因素认证）</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h3>一、MFA简介</h3>
<p>定义：多因素认证（MFA）要求用户在登录时提供​​至少两种不同类别​​的身份验证因子，以提升账户安全性</p>
<p>核心目标：解决单一密码认证的脆弱性（如暴力破解、钓鱼攻击），将账户被盗风险降低​​80%以上；通过组合不同的验证因素，MFA 能够显著降低因密码泄露带来的风险</p>
<h3>二、核心原理</h3>
<div>
<div>
<p>MFA通过多步骤验证构建安全屏障：</p>
<ol>
<li>​​初始验证​​：用户输入用户名和密码（知识因子）</li>
<li>​​二次验证​​：系统要求额外因子（如手机接收OTP码、指纹扫描）</li>
<li>​​动态授权​​：高风险操作（如转账）可触发更多验证（如硬件令牌+生物识别）</li>
<li>​​访问控制​​：所有因子验证通过后，授予最小必要权限</li>
</ol>
<p>​​安全增强逻辑​​：</p>
<ul>
<li>攻击者即使破解密码（知识因子），仍需突破所有权或生物因子，难度呈指数级增长</li>
<li>例如：钓鱼攻击中窃取密码后，因无法获取动态令牌或生物特征而失败</li>
</ul>
</div>
</div>
<h3>三、主流技术方案与对比</h3>
<table border="0">
<tbody>
<tr>
<td>认证方式</td>
<td>安全性</td>
<td>用户体验</td>
<td>实施成本</td>
<td>场景</td>
</tr>
<tr>
<td>TOTP动态码​​</td>
<td>高</td>
<td>优</td>
<td>低</td>
<td>通用：企业系统、云服务等（推荐首选）</td>
</tr>
<tr>
<td>​​短信验证码​</td>
<td>中</td>
<td>中</td>
<td>中</td>
<td>金融支付、社交平台（需运营商集成）</td>
</tr>
<tr>
<td>生物识别​​（如人脸、指纹等）</td>
<td>极高</td>
<td>优</td>
<td>高</td>
<td>移动设备、高安全系统</td>
</tr>
<tr>
<td>​​硬件令牌​​（如YubiKey）</td>
<td>极高</td>
<td>中</td>
<td>高</td>
<td>金融、政府、军事系统</td>
</tr>
</tbody>
</table>
<h3>四、TOTP简介</h3>
<ol>
<li>基于时间的一次性密码，动态验证码每30秒更新，基于共享密钥（Secret Key）和当前时间戳通过HMAC-SHA1算法生成6位数字。</li>
<li>优势​​：离线可用、无需短信成本、兼容Google Authenticator等标准应用</li>
</ol>
<h3>五、SpringBoot集成TOTP</h3>
<h4>a.登录流程图（这里原系统使用 SA-Token，其他逻辑应该也大差不差）</h4>
<p><img src="https://img2024.cnblogs.com/blog/1398504/202507/1398504-20250728201831155-857469523.png" alt="Untitled diagram _ Mermaid Chart-2025-07-28-121800" loading="lazy"></p>
<h4>b.代码实现</h4>
<p>原系统用户表添加以下字段</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">ALTER</span> <span style="color: rgba(0, 0, 255, 1)">TABLE</span><span style="color: rgba(0, 0, 0, 1)"> iot_user
</span><span style="color: rgba(0, 0, 255, 1)">ADD</span> <span style="color: rgba(0, 0, 255, 1)">COLUMN</span> mfa_secret <span style="color: rgba(0, 0, 255, 1)">VARCHAR</span>(<span style="color: rgba(128, 0, 0, 1); font-weight: bold">64</span>) <span style="color: rgba(0, 0, 255, 1)">NULL</span> COMMENT <span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">TOTP密钥（AES加密存储）</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 0, 255, 1)">ADD</span> <span style="color: rgba(0, 0, 255, 1)">COLUMN</span> backup_codes <span style="color: rgba(0, 0, 255, 1)">TEXT</span> <span style="color: rgba(0, 0, 255, 1)">NULL</span> COMMENT <span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">备用验证码（JSON数组，AES加密存储）</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 0, 255, 1)">ADD</span> <span style="color: rgba(0, 0, 255, 1)">COLUMN</span> mfa_enabled <span style="color: rgba(0, 0, 255, 1)">TINYINT</span>(<span style="color: rgba(128, 0, 0, 1); font-weight: bold">1</span>) <span style="color: rgba(0, 0, 255, 1)">DEFAULT</span> <span style="color: rgba(128, 0, 0, 1); font-weight: bold">0</span> COMMENT <span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">是否启用MFA（0-否，1-是）</span><span style="color: rgba(255, 0, 0, 1)">'</span>;</pre>
</div>
<h5>1.添加Maven依赖</h5>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">　　　　&lt;</span><span style="color: rgba(128, 0, 0, 1)">dependency</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>com.warrenstrange<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>googleauth<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">version</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>1.5.0<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">version</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">dependency</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">dependency</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>commons-net<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>commons-net<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">version</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>3.9.0<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">version</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">dependency</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre>
</div>
<h5>2.Mfz服务类</h5>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@Log4j2
@Service
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> MfaService {

    @Lazy
    @Resource
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> IotUserService iotUserService;
    @Resource
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> RedisUtil redisUtil;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">final</span> GoogleAuthenticator gAuth = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> GoogleAuthenticator();
    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 为用户启用MFA，生成密钥和备用码
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> MfaSetupResult setupMfa(String userId) {

        GoogleAuthenticatorKey key </span>=<span style="color: rgba(0, 0, 0, 1)"> gAuth.createCredentials();
        String secret </span>=<span style="color: rgba(0, 0, 0, 1)"> key.getKey();
        List</span>&lt;String&gt; backupCodes =<span style="color: rgba(0, 0, 0, 1)"> generateBackupCodes();
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 加密存储（生产环境需替换为KMS加密）</span>
        String encryptedSecret =<span style="color: rgba(0, 0, 0, 1)"> encrypt(secret);
        log.info(secret </span>+ "====二维码生成===" +<span style="color: rgba(0, 0, 0, 1)"> encryptedSecret);
        String encryptedBackupCodes </span>= encrypt(String.join(","<span style="color: rgba(0, 0, 0, 1)">, backupCodes));
        IotUser user </span>=<span style="color: rgba(0, 0, 0, 1)"> iotUserService.getById(userId);
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (user == <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">) {
            </span><span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> RuntimeException("用户不存在"<span style="color: rgba(0, 0, 0, 1)">);
        }
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 更新数据库</span>
<span style="color: rgba(0, 0, 0, 1)">        user.setMfaSecret(encryptedSecret);
        user.setBackupCodes(encryptedBackupCodes);</span><span style="color: rgba(0, 0, 0, 1)">
        iotUserService.updateById(user);
        String qr </span>= "otpauth://totp/" + userId + "?secret=" + secret + "&amp;issuer=IOT_Platform"<span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> MfaSetupResult(qr, backupCodes);
    }
    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 生成10个备用验证码（一次性使用）
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
    <span style="color: rgba(0, 0, 255, 1)">private</span> List&lt;String&gt;<span style="color: rgba(0, 0, 0, 1)"> generateBackupCodes() {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> Random().ints(10, 100000, 999999<span style="color: rgba(0, 0, 0, 1)">)
                .mapToObj(code </span>-&gt; String.format("%06d"<span style="color: rgba(0, 0, 0, 1)">, code))
                .collect(Collectors.toList());
    }
    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 验证TOTP或备用码
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">boolean</span><span style="color: rgba(0, 0, 0, 1)"> verifyCode(String userId, String code) {
        IotUser user </span>=<span style="color: rgba(0, 0, 0, 1)"> iotUserService.getById(userId);
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (user == <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">) {
            </span><span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> RuntimeException("用户不存在"<span style="color: rgba(0, 0, 0, 1)">);
        }
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 1. 获取加密的密钥和备用码</span>
        String encryptedSecret =<span style="color: rgba(0, 0, 0, 1)"> user.getMfaSecret();
        String encryptedBackupCodes </span>=<span style="color: rgba(0, 0, 0, 1)"> user.getBackupCodes();
        String secret </span>=<span style="color: rgba(0, 0, 0, 1)"> decrypt(encryptedSecret);
        log.info(secret </span>+ "校验" +<span style="color: rgba(0, 0, 0, 1)"> encryptedSecret);
        List</span>&lt;String&gt; backupCodes = <span style="color: rgba(0, 0, 255, 1)">new</span> ArrayList&lt;&gt;<span style="color: rgba(0, 0, 0, 1)">(
                Arrays.asList(decrypt(encryptedBackupCodes).split(</span>","<span style="color: rgba(0, 0, 0, 1)">))
        );
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 2. 验证TOTP（允许时间偏差）</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (gAuth.authorize(secret, Integer.parseInt(code))) {
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
        }
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 3. 验证备用码</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (backupCodes.contains(code)) {
            backupCodes.remove(code);
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 更新数据库</span>
            user.setBackupCodes(encrypt(String.join(","<span style="color: rgba(0, 0, 0, 1)">, backupCodes)));
            iotUserService.updateById(user);
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
        }
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 开启7天免MFA认证
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> setMfaSkip(String userId, String userAgent, String ip) {
        String deviceHash </span>= DigestUtils.sha256Hex(userAgent + ip).substring(0, 8<span style="color: rgba(0, 0, 0, 1)">);
        String key </span>= "mfa_skip:" + userId + ":" +<span style="color: rgba(0, 0, 0, 1)"> deviceHash;
        </span><span style="color: rgba(0, 0, 255, 1)">long</span> expireAt = System.currentTimeMillis() + 7 *<span style="color: rgba(0, 0, 0, 1)"> 86_400_000L;
        String value </span>= expireAt + "|" +<span style="color: rgba(0, 0, 0, 1)"> userAgent;
        redisUtil.setEx(key, value, </span>7<span style="color: rgba(0, 0, 0, 1)">, TimeUnit.DAYS);
    }
    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 验证是否已开启免MFA认证
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">boolean</span><span style="color: rgba(0, 0, 0, 1)"> isMfaSkipped(String userId, String userAgent, String ip) {
        String deviceHash </span>= DigestUtils.sha256Hex(userAgent + ip).substring(0, 8<span style="color: rgba(0, 0, 0, 1)">);
        String key </span>= "mfa_skip:" + userId + ":" +<span style="color: rgba(0, 0, 0, 1)"> deviceHash;
        String value </span>=<span style="color: rgba(0, 0, 0, 1)"> redisUtil.get(key);
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (value == <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">) {
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
        }
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 验证设备信息一致性（防盗用）</span>
        String[] parts = value.split("\\|"<span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">long</span> expireAt = Long.parseLong(parts[0<span style="color: rgba(0, 0, 0, 1)">]);
        String storedUserAgent </span>= parts[1<span style="color: rgba(0, 0, 0, 1)">];
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> expireAt &gt;<span style="color: rgba(0, 0, 0, 1)"> System.currentTimeMillis()
                </span>&amp;&amp;<span style="color: rgba(0, 0, 0, 1)"> storedUserAgent.equals(userAgent);
    }
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> --- AES加密工具方法 ---</span>
    <span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String encrypt(String data) {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 实际实现需使用AES-GCM（此处简化）</span>
        <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> Base64.getEncoder().encodeToString(data.getBytes());
    }
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String decrypt(String encrypted) {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> String(Base64.getDecoder().decode(encrypted));
    }
}</span></pre>
</div>
<h5>3.&nbsp; IP获取工具IpUtils</h5>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> IpUtils {
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 0, 1)"> String getClientIp(HttpServletRequest request) {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 1. 优先级解析代理头部</span>
        String[] headers = {"X-Forwarded-For", "Proxy-Client-IP", "WL-Proxy-Client-IP", "HTTP_CLIENT_IP", "HTTP_X_FORWARDED_FOR"<span style="color: rgba(0, 0, 0, 1)">};
        </span><span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> (String header : headers) {
            String ip </span>=<span style="color: rgba(0, 0, 0, 1)"> request.getHeader(header);
            </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (isValidIp(ip)) {
                </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> parseFirstIp(ip);
            }
        }
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 2. 直接获取远程地址</span>
        String ip =<span style="color: rgba(0, 0, 0, 1)"> request.getRemoteAddr();
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 3. 处理本地环回地址（开发环境）</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> ("127.0.0.1".equals(ip) || "0:0:0:0:0:0:0:1"<span style="color: rgba(0, 0, 0, 1)">.equals(ip)) {
            </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
                </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> InetAddress.getLocalHost().getHostAddress();
            } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (Exception e) {
                </span><span style="color: rgba(0, 0, 255, 1)">return</span> "127.0.0.1"<span style="color: rgba(0, 0, 0, 1)">;
            }
        }
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> ip;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">boolean</span><span style="color: rgba(0, 0, 0, 1)"> isValidIp(String ip) {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> ip != <span style="color: rgba(0, 0, 255, 1)">null</span> &amp;&amp; !ip.isEmpty() &amp;&amp; !"unknown"<span style="color: rgba(0, 0, 0, 1)">.equalsIgnoreCase(ip);
    }
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 0, 1)"> String parseFirstIp(String ip) {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 处理多IP场景（如：X-Forwarded-For: client, proxy1, proxy2）</span>
        <span style="color: rgba(0, 0, 255, 1)">return</span> ip.contains(",") ? ip.split(",")[0<span style="color: rgba(0, 0, 0, 1)">].trim() : ip;
    }
}</span></pre>
</div>
<h5>4.登录、Mfa开启、Mfa校验、Mfa二维码以及10个备用一次性code生成（服务类省略）</h5>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> LoginResult login(LoginParam loginParam, HttpServletRequest request) {
        IotUser iotUser </span>= <span style="color: rgba(0, 0, 255, 1)">this</span>.getOne(<span style="color: rgba(0, 0, 255, 1)">new</span> LambdaQueryWrapper&lt;IotUser&gt;<span style="color: rgba(0, 0, 0, 1)">().eq(IotUser::getAccount, loginParam.getAccount())
                .eq(IotUser::getStatus, </span>0<span style="color: rgba(0, 0, 0, 1)">));
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 校验用户是否存在</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (ObjectUtil.isNull(iotUser)) {
            </span><span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ServiceException(IotUserExceptionEnum.LOGIN_ERROR);
        }
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 验证账号密码是否正常</span>
        String requestMd5 =<span style="color: rgba(0, 0, 0, 1)"> SaltUtil.md5Encrypt(loginParam.getPassword(), iotUser.getSalt());
        String dbMd5 </span>=<span style="color: rgba(0, 0, 0, 1)"> iotUser.getPassword();
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (dbMd5 == <span style="color: rgba(0, 0, 255, 1)">null</span> || !<span style="color: rgba(0, 0, 0, 1)">dbMd5.equalsIgnoreCase(requestMd5)) {
            </span><span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ServiceException(IotUserExceptionEnum.LOGIN_ERROR);
        }
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 账号被冻结</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> (iotUser.getStatus().equals(1<span style="color: rgba(0, 0, 0, 1)">)) {
            </span><span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ServiceException(IotUserExceptionEnum.ACCOUNT_FREEZE_ERROR);
        }
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 密码校验成功后登录，一行代码实现登录</span>
<span style="color: rgba(0, 0, 0, 1)">        StpUtil.login(iotUser.getUserId());
        StpUtil.getSession().set(Constants.USER_INFO_KEY, userDto(iotUser));
        </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)"> 获取当前登录用户的Token信息 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
        SaTokenInfo saTokenInfo </span>=<span style="color: rgba(0, 0, 0, 1)"> StpUtil.getTokenInfo();
        LoginResult loginResult </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> LoginResult();
        loginResult.setToken(saTokenInfo.getTokenValue());
        loginResult.setMfaEnabled(iotUser.getMfaEnabled());
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 开启了MFA认证</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> (iotUser.getMfaEnabled() == 1<span style="color: rgba(0, 0, 0, 1)">) {
            String ua </span>= request.getHeader("User-Agent"<span style="color: rgba(0, 0, 0, 1)">);
            String ip </span>=<span style="color: rgba(0, 0, 0, 1)"> IpUtils.getClientIp(request);
            log.info(</span>"登录请求IP：" +<span style="color: rgba(0, 0, 0, 1)">  ip);
            </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (mfaService.isMfaSkipped(iotUser.getUserId(), ua, ip)) {
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 触发免验证：激活安全会话</span>
                StpUtil.openSafe( 7 * 24 * 60 * 60<span style="color: rgba(0, 0, 0, 1)">);
            } </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
                loginResult.setNeedMfa(</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
            }
        }
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> loginResult;
    }
    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> VerifyResult verify(MfaVerifyParam verifyParam, HttpServletRequest request) {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (ObjectUtil.isNull(verifyParam.getCode())) {
            </span><span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> ServiceException("验证码不能为空"<span style="color: rgba(0, 0, 0, 1)">);
        }
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (ObjectUtil.isNull(verifyParam.getRemember())) {
            verifyParam.setRemember(</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
        }
        String userId </span>=<span style="color: rgba(0, 0, 0, 1)"> StpUtil.getLoginIdAsString();
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 1. 验证TOTP/备用码</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">mfaService.verifyCode(userId, verifyParam.getCode())) {
            </span><span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> ServiceException("验证码无效"<span style="color: rgba(0, 0, 0, 1)">);
        }
        String userAgent </span>= request.getHeader("User-Agent"<span style="color: rgba(0, 0, 0, 1)">);
        String ip </span>=<span style="color: rgba(0, 0, 0, 1)"> IpUtils.getClientIp(request);
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 2. 若选择免认证7天，更新数据库</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (Boolean.TRUE.equals(verifyParam.getRemember())) {
            log.info(</span>"MFA验证请求IP：" +<span style="color: rgba(0, 0, 0, 1)">  ip);
            mfaService.setMfaSkip(userId, userAgent, ip);
        } </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 未选择7天免认证，则删除redis</span>
            String deviceHash = DigestUtils.sha256Hex(userAgent + ip).substring(0, 8<span style="color: rgba(0, 0, 0, 1)">);
            String key </span>= "mfa_skip:" + userId + ":" +<span style="color: rgba(0, 0, 0, 1)"> deviceHash;
            redisUtil.delete(key);
        }
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 3. 激活SA-Token安全会话（7天或一次性）</span>
        StpUtil.openSafe(verifyParam.getRemember() ? 7 * 24 * 60 * 60 : 120<span style="color: rgba(0, 0, 0, 1)">);
        VerifyResult verifyResult </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> VerifyResult();
        verifyResult.setToken(StpUtil.getTokenValue());
        verifyResult.setMsg(</span>"验证成功"<span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> verifyResult;
    }
    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> MfaSetupResult qrCode() {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> mfaService.setupMfa();
    }
    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> openMfa(RecoverMfaParam recoverMfaParam) {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (ObjectUtil.isNull(recoverMfaParam.getCode())) {
            </span><span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> ServiceException("请输入验证码"<span style="color: rgba(0, 0, 0, 1)">);
        }
        String userId </span>=<span style="color: rgba(0, 0, 0, 1)"> StpUtil.getLoginIdAsString();
        IotUser iotUser </span>= <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.getById(userId);
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (ObjectUtil.isNull(iotUser)) {
            </span><span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> ServiceException("用户不存在"<span style="color: rgba(0, 0, 0, 1)">);
        }
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (mfaService.verifyCode(userId, recoverMfaParam.getCode())) {
            iotUser.setMfaEnabled(</span>1<span style="color: rgba(0, 0, 0, 1)">);
            </span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.updateById(iotUser);
        } </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
            </span><span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> ServiceException("验证码错误"<span style="color: rgba(0, 0, 0, 1)">);
        }
    }
    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> recoverMfa(RecoverMfaParam recoverMfaParam, HttpServletRequest request) {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (ObjectUtil.isNull(recoverMfaParam.getCode())) {
            </span><span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> ServiceException("恢复码code不能为空"<span style="color: rgba(0, 0, 0, 1)">);
        }
        String userId </span>=<span style="color: rgba(0, 0, 0, 1)"> StpUtil.getLoginIdAsString();
        IotUser iotUser </span>= <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.getById(userId);
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (ObjectUtil.isNull(iotUser)) {
            </span><span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> ServiceException("用户不存在"<span style="color: rgba(0, 0, 0, 1)">);
        }
        String encryptedBackupCodes </span>=<span style="color: rgba(0, 0, 0, 1)"> iotUser.getBackupCodes();
        List</span>&lt;String&gt; backupCodes = <span style="color: rgba(0, 0, 255, 1)">new</span> ArrayList&lt;&gt;<span style="color: rgba(0, 0, 0, 1)">(
                Arrays.asList(decrypt(encryptedBackupCodes).split(</span>","<span style="color: rgba(0, 0, 0, 1)">))
        );
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (mfaService.verifyCode(userId, recoverMfaParam.getCode())) {
            backupCodes.remove(recoverMfaParam.getCode());
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 更新数据库</span>
            iotUser.setBackupCodes(encrypt(String.join(","<span style="color: rgba(0, 0, 0, 1)">, backupCodes)));
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 重置MFA，再次登录时需要重新设置并扫码绑定</span>
            iotUser.setMfaEnabled(0<span style="color: rgba(0, 0, 0, 1)">);
            iotUser.setMfaSecret(</span><span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">);
            iotUser.setBackupCodes(</span><span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">);
            </span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.updateById(iotUser);
            String userAgent </span>= request.getHeader("User-Agent"<span style="color: rgba(0, 0, 0, 1)">);
            String ip </span>=<span style="color: rgba(0, 0, 0, 1)"> IpUtils.getClientIp(request);
            String deviceHash </span>= DigestUtils.sha256Hex(userAgent + ip).substring(0, 8<span style="color: rgba(0, 0, 0, 1)">);
            String key </span>= "mfa_skip:" + userId + ":" +<span style="color: rgba(0, 0, 0, 1)"> deviceHash;
            redisUtil.delete(key);
        } </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
            </span><span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> ServiceException(1, "备用码或MFA码错误"<span style="color: rgba(0, 0, 0, 1)">);
        }
    }
    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> logout() {
        </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)"> 会话注销 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
        StpUtil.logoutByTokenValue(StpUtil.getTokenValue());
    }</span></pre>
</div>
<h5>5.Mfa校验入参类</h5>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@Data
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> MfaVerifyParam {
    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * Mfa动态、一次性备用代码
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
    <span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String code;
    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 当前机器近7天是否跳过Mfa校验
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
    <span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> Boolean remember;
}</span></pre>
</div>
<h5>6.控制类</h5>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@RestController
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> IotPlatFormAuthController {
    @Resource
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> IotUserService iotUserService;
    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * @description:  登录
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)">: [loginParam]
     * </span><span style="color: rgba(128, 128, 128, 1)">@return</span><span style="color: rgba(0, 128, 0, 1)">: com.honyar.core.model.response.ResponseData
     * </span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)">: zhouhong
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    @PostMapping(</span>"/auth/login"<span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> ResponseData login(@RequestBody LoginParam loginParam, HttpServletRequest request) {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> SuccessResponseData(iotUserService.login(loginParam, request));
    }
    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * @description:  开启MFA
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)">: []
     * </span><span style="color: rgba(128, 128, 128, 1)">@return</span><span style="color: rgba(0, 128, 0, 1)">: com.honyar.core.model.response.ResponseData
     * </span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)">: zhouhong
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    @PostMapping(</span>"/auth/mfa/openMfa"<span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> ResponseData openMfa(@RequestBody RecoverMfaParam recoverMfaParam) {
        iotUserService.openMfa(recoverMfaParam);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> SuccessResponseData();
    }
    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * @description:  恢复MFA（用户未扫描二维码，需要使用备用码重置并在下次登录时重新设置MFA）
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)">: [recoverMfaParam]
     * </span><span style="color: rgba(128, 128, 128, 1)">@return</span><span style="color: rgba(0, 128, 0, 1)">: com.honyar.core.model.response.ResponseData
     * </span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)">: zhouhong
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    @PostMapping(</span>"/auth/mfa/recoverMfa"<span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> ResponseData recoverMfa(@RequestBody RecoverMfaParam recoverMfaParam, HttpServletRequest request) {
        iotUserService.recoverMfa(recoverMfaParam, request);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> SuccessResponseData();
    }
    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * @description:  获取MFA二维码
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)">: []
     * </span><span style="color: rgba(128, 128, 128, 1)">@return</span><span style="color: rgba(0, 128, 0, 1)">: com.honyar.core.model.response.ResponseData
     * </span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)">: zhouhong
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    @PostMapping(</span>"/auth/mfa/qrcode"<span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> ResponseData qrCode() {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> SuccessResponseData(iotUserService.qrCode());
    }
    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * @description:  MFA验证
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)">: [verifyParam]
     * </span><span style="color: rgba(128, 128, 128, 1)">@return</span><span style="color: rgba(0, 128, 0, 1)">: com.honyar.core.model.response.ResponseData
     * </span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)">: zhouhong
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    @PostMapping(</span>"/auth/mfa/verify"<span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> ResponseData verify(@RequestBody MfaVerifyParam verifyParam, HttpServletRequest request) {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> SuccessResponseData(iotUserService.verify(verifyParam, request));
    }
    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * @description:  登出
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)">: []
     * </span><span style="color: rgba(128, 128, 128, 1)">@return</span><span style="color: rgba(0, 128, 0, 1)">: com.honyar.core.model.response.ResponseData
     * </span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)">: zhouhong
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    @PostMapping(</span>"/auth/logout"<span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> ResponseData logout() {
        iotUserService.logout();
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> SuccessResponseData();
    }
}</span></pre>
</div>
<h4>c.演示</h4>
<h5>1.调用登录接口</h5>
<p><img src="https://img2024.cnblogs.com/blog/1398504/202507/1398504-20250728214919746-1938483557.jpg" alt="登录" loading="lazy"></p>
<p><em>说明：登录返回当前用户是否已经开启Mfa，当用户已经开启mfa（mfaEnable=1）并且needMfa（需要进行mfa）时需要前端拉起mfa校验页面调用mfa校验接口进行二次校验；当mfaEnable=1并且needMfa=false时，说明当前设备已经开启7天面mfa校验，直接登录成功进入系统；当mfaEnable=0时，说明用户未开启mfa，则引导用户调用接口先生成二维码绑定MFA，再使用绑定的code调用接口开启mfa（数据库用户mfaEnable字段置为1即可），然后再调用mfa校验接口进行mfa校验，如果用户选择不开启则直接登录成功进入系统。</em></p>
<h5>2.调用mfa二维码、备用一次性code生成接口</h5>
<p><img src="https://img2024.cnblogs.com/blog/1398504/202507/1398504-20250728215757577-1428245805.jpg" alt="生成二维码" loading="lazy"></p>
<p><em>说明：调用这个接口后前端根据 qrUrl信息生成一个二维码，并且同时浏览器下载备用code 到本地，用户使用Authenticator APP进行扫码添加用户，然后再使用&nbsp;Authenticator 里面生成的code调用校验Mfa接口校验成功后进入系统；第二次用户直接从Authenticator获取code进行二次认证即可</em></p>
<p><img src="https://img2024.cnblogs.com/blog/1398504/202507/1398504-20250728221018973-428107066.jpg" alt="首页" width="456" height="451" loading="lazy"><img src="https://img2024.cnblogs.com/blog/1398504/202507/1398504-20250728221100239-718080388.jpg" alt="code" width="466" height="459" loading="lazy"></p>
<h5>3.使用code开启当前登录用户的MFA</h5>
<p><img src="https://img2024.cnblogs.com/blog/1398504/202507/1398504-20250729150202429-599005113.png" alt="image" loading="lazy"></p>
<h5>4.调用Mfa校验接口</h5>
<p><img src="https://img2024.cnblogs.com/blog/1398504/202507/1398504-20250728221207094-1098141582.jpg" alt="校验1" loading="lazy"></p>
<p><em>说明：校验成功后进入系统</em></p>
<h5>5.恢复/解绑MFA</h5>
<p><img src="https://img2024.cnblogs.com/blog/1398504/202507/1398504-20250729142706510-647664785.png" alt="image" loading="lazy"></p>
<p>&nbsp;<em>需要使用MFA或者生成二维码时的备用码来解绑</em></p>
</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/Tom-shushu/" target="_blank">Tom-shushu</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/Tom-shushu/p/19009537" target="_blank">https://www.cnblogs.com/Tom-shushu/p/19009537</a></p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.6944444444444444" data-date-updated="2025-07-29 15:02">2025-07-28 22:22</span>&nbsp;
<a href="https://www.cnblogs.com/Tom-shushu">Tom-shushu</a>&nbsp;
阅读(<span id="post_view_count">225</span>)&nbsp;
评论(<span id="post_comment_count">5</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19009537);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19009537', targetLink: 'https://www.cnblogs.com/Tom-shushu/p/19009537', title: 'SpringBoot中使用TOTP实现MFA（多因素认证）' })">举报</a>
</div>
	