
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lori/p/18647032" title="发布于 2025-01-02 10:47">
    <span role="heading" aria-level="2">JedisPool和Jedis推荐的生命周期</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在开发Web项目时，使用Jedis客户端与Redis进行交互时，通常建议将 <code>JedisPool</code> 设置为单例或静态的，而 <code>Jedis</code> 实例则不应该是单例的。<a href="https://www.cnblogs.com/lori/p/18605815" target="_blank">之前写过jedis使用注意事项</a>，大家可以先阅读一下，然后再看下面的最佳实践：</p>
<h3 id="1-jedispool">1. <strong>JedisPool</strong></h3>
<h4 id="设置为单例或静态">设置为单例或静态</h4>
<ul>
<li><strong>原因</strong>：
<ul>
<li><code>JedisPool</code> 是一个线程安全的对象，可以被多个线程共享。它负责管理连接到 Redis 的所有 <code>Jedis</code> 实例。</li>
<li>每个 <code>JedisPool</code> 实例可以创建并管理多个 <code>Jedis</code> 连接，因此将其设置为单例可以有效地重用连接池中的连接，减少资源开销。</li>
</ul>
</li>
</ul>
<h4 id="示例代码">示例代码：</h4>
<pre><code class="language-java">import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;

public class RedisConnectionPool {
    private static final JedisPool pool = createPool();

    private static JedisPool createPool() {
        JedisPoolConfig config = new JedisPoolConfig();
        config.setMaxTotal(100); // 最大连接数
        config.setMaxIdle(50);   // 最大空闲连接数
        config.setMinIdle(10);   // 最小空闲连接数
        return new JedisPool(config, "localhost", 6379);
    }

    public static JedisPool getPool() {
        return pool;
    }
}
</code></pre>
<h3 id="2-jedis">2. <strong>Jedis</strong></h3>
<h4 id="不设置为单例">不设置为单例</h4>
<ul>
<li>
<p><strong>原因</strong>：</p>
<ul>
<li><code>Jedis</code> 实例不是线程安全的，每个线程在使用 <code>Jedis</code> 时都应从 <code>JedisPool</code> 中获取一个新的实例。这是因为 <code>Jedis</code> 对象会维护自己的状态（如连接、事务等），如果多个线程共享同一个 <code>Jedis</code> 实例，会导致数据竞争和不可预期的行为。</li>
</ul>
</li>
<li>
<p><strong>获取方式</strong>：</p>
<ul>
<li>使用 <code>JedisPool</code> 获取 <code>Jedis</code> 实例后，完成操作后应及时关闭该实例，以将其返回连接池。</li>
</ul>
</li>
</ul>
<h4 id="示例代码-1">示例代码：</h4>
<pre><code class="language-java">import redis.clients.jedis.Jedis;

public class RedisService {
    public void performOperation() {
        try (Jedis jedis = RedisConnectionPool.getPool().getResource()) {
            // 在这里执行 Redis 操作
            jedis.set("key", "value");
            String value = jedis.get("key");
            System.out.println(value);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
</code></pre>
<h3 id="总结">总结</h3>
<ul>
<li><strong>JedisPool</strong>：应设置为单例或静态，以便在整个应用程序中重用。</li>
<li><strong>Jedis</strong>：不应设置为单例，应通过 <code>JedisPool</code> 获取，并在使用后及时关闭，以确保连接的正确管理和释放。</li>
</ul>
<p>这种设计模式可以有效地管理 Redis 连接，提高性能并避免潜在的线程安全问题。如果你有其他问题或需要进一步的帮助，请随时提问！</p>

</div>
<div id="MySignature" role="contentinfo">
    <p></p>
<div class="navgood">
<p>作者：仓储大叔，张占岭，<br>
荣誉：微软MVP<br>QQ：853066980</p>

<p><strong>支付宝扫一扫，为大叔打赏!</strong>
<br><img src="https://images.cnblogs.com/cnblogs_com/lori/237884/o_IMG_7144.JPG"></p>
</div>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.9264101225266204" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-02 10:50">2025-01-02 10:47</span>&nbsp;
<a href="https://www.cnblogs.com/lori">张占岭</a>&nbsp;
阅读(<span id="post_view_count">147</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18647032" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18647032);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18647032', targetLink: 'https://www.cnblogs.com/lori/p/18647032', title: 'JedisPool和Jedis推荐的生命周期' })">举报</a>
</div>
        