
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/m1pha/p/18663720" title="发布于 2025-01-10 11:51">
    <span role="heading" aria-level="2">js实现拖动调节宽高的iframe</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="需求">需求</h2>
<p>我有一个用vue3项目实现的ai聊天功能。使用js文件的形式来引入其它项目，具体的表现显示是一个机器人icon，点开就是iframe。但是定死iframe的宽高，就显得不够灵活。所以我打算做一下类似windows窗体那样的拖拽调整宽高。具体代码也借助了chat AI，如果完全自己实现还是很耗时间的。</p>
<p>另：实际上这个项目还有多分辨率适配、拖拽移动之类的优化。不过这篇文章只简单说明一下iframe调整宽高。</p>
<h2 id="效果">效果</h2>
<p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/89d49aeff05b400baeb9d8d8d2145bc1~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTTFwaGE=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiMTE0ODM1MzM5NTgyNTg4NSJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1737085748&amp;x-orig-sign=iydT%2FpuimsQaTwYGGk3apyXN8Oc%3D" alt="iframe拖拽调整宽高.gif" loading="lazy"></p>
<h2 id="dom结构">dom结构</h2>
<p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/43678c3083374edca159c5338f221bf9~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTTFwaGE=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiMTE0ODM1MzM5NTgyNTg4NSJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1737085748&amp;x-orig-sign=9WD2fOb3vx2Xp%2FYYpTCsIOmbhLc%3D" alt="拖拽iframe的dom结构.png" loading="lazy"></p>
<h2 id="实现思路">实现思路</h2>
<p>拖拽调节宽高实际上是一个还算常见的需求，只不过对于iframe来说需要有一些额外的处理，例如手动添加的在iframe之上的拖拽div，以及拖拽时的遮罩层。<br>
<s>(实际上我第一个想到的css的resize属性，但是效果不好)</s></p>
<p>1.创建一个包裹iframe的iframe-container，其中包括：iframe、调整宽高用的div、遮罩层div。</p>
<p>2.为每个调整宽高的div添加&nbsp;<code>mousedown</code>&nbsp;事件监听器，记录初始位置和尺寸，并且启动遮罩层。</p>
<ul>
<li>在&nbsp;<code>mousemove</code>&nbsp;事件中，根据鼠标移动的距离计算新的尺寸和位置，并更新&nbsp;iframe&nbsp;容器的样式。</li>
<li>在&nbsp;<code>mouseup</code>&nbsp;事件中，停止调整大小，并隐藏遮罩层</li>
</ul>
<h3 id="结构展示">结构展示</h3>
<p>让我把上面那些class为"resize-handle"的div改个颜色， 就明显多了。</p>
<p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/f0bb774957434f0e834eba9035beef3a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTTFwaGE=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiMTE0ODM1MzM5NTgyNTg4NSJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1737085748&amp;x-orig-sign=dwd%2B8F1jAJDPG%2FEoFzTATspm2ic%3D" alt="resizeHandle涂成黑色.png" loading="lazy"><br>
如图所示。我希望用户可以通过左边框、上边框和左上角来拖拽调节大小，所以就是class为"t"、"l"、"lt"的div在图片中涂成了黑色(<strong>注意class为"rb"的div实际上被我display: none了，这原本是右下角的div</strong>)。<br>
注：t = top, l = left。</p>
<h2 id="让copilot帮我生成的简单代码">让copilot帮我生成的简单代码</h2>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Resizable Iframe&lt;/title&gt;
  &lt;style&gt;
    .resizable-iframe-container {
      position: relative;
      display: inline-block;
    }
    .resizable-iframe {
      width: 100%;
      height: 100%;
      border: none;
    }
    .resize-handle {
      position: absolute;
      background-color: #000;
      z-index: 99999;
    }
    .resize-handle.rb {
      width: 4px;
      height: 4px;
      right: -8px;
      bottom: -8px;
      cursor: se-resize;
    }
    .resize-handle.lt {
      width: 6px;
      height: 6px;
      left: 1px;
      top: 1px;
      cursor: nw-resize;
      z-index: 100000;
    }
    .resize-handle.l {
      width: 6px;
      height: 100%;
      left: 1px;
      top: 0;
      cursor: w-resize;
    }
    .resize-handle.t {
      width: 100%;
      height: 6px;
      top: 1px;
      left: 0;
      cursor: n-resize;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="iframeContainer" class="resizable-iframe-container"&gt;
    &lt;iframe id="resizableIframe" class="resizable-iframe" src="https://www.example.com"&gt;&lt;/iframe&gt;
  &lt;/div&gt;

  &lt;script&gt;
    function createIframeOverlay() {
      const iframeOverlay = document.createElement('div');
      Object.assign(iframeOverlay.style, {
        position: 'absolute',
        top: '0',
        left: '0',
        width: '100%',
        height: '100%',
        backgroundColor: 'rgba(0, 0, 0, 0.2)',
        zIndex: '99999',
        display: 'none',
      });
      return iframeOverlay;
    }

    function enableResize(iframeContainer, iframe, iframeOverlay) {
      let isResizing = false;
      let startX, startY, startWidth, startHeight, startLeft, startTop, resizeType;

      const resizeHandles = iframeContainer.querySelectorAll('.resize-handle');
      resizeHandles.forEach((handle) =&gt; {
        handle.addEventListener('mousedown', (e) =&gt; {
          isResizing = true;
          resizeType = handle.classList[1];
          startX = e.clientX;
          startY = e.clientY;
          startWidth = iframeContainer.offsetWidth;
          startHeight = iframeContainer.offsetHeight;
          startLeft = iframeContainer.offsetLeft;
          startTop = iframeContainer.offsetTop;
          iframeOverlay.style.display = 'block';
          document.addEventListener('mousemove', onBorderMouseMove);
          document.addEventListener('mouseup', onBorderMouseUp);
        });
      });

      function onBorderMouseMove(e) {
        if (isResizing) {
          const dx = e.clientX - startX;
          const dy = e.clientY - startY;
          const minWidth = 10;
          const minHeight = 10;
          const maxWidth = 1000;
          const maxHeight = 1000;

          let newWidth, newHeight, newLeft, newTop;

          switch (resizeType) {
            case 'rb':
              newWidth = Math.min(Math.max(startWidth + dx, minWidth), maxWidth);
              newHeight = Math.min(Math.max(startHeight + dy, minHeight), maxHeight);
              iframeContainer.style.width = `${newWidth}px`;
              iframeContainer.style.height = `${newHeight}px`;
              break;
            case 'lt':
              newWidth = Math.min(Math.max(startWidth - dx, minWidth), maxWidth);
              newHeight = Math.min(Math.max(startHeight - dy, minHeight), maxHeight);
              if (newWidth &gt; minWidth &amp;&amp; newWidth &lt; maxWidth) {
                newLeft = startLeft + dx;
                iframeContainer.style.left = `${newLeft}px`;
              }
              if (newHeight &gt; minHeight &amp;&amp; newHeight &lt; maxHeight) {
                newTop = startTop + dy;
                iframeContainer.style.top = `${newTop}px`;
              }
              iframeContainer.style.width = `${newWidth}px`;
              iframeContainer.style.height = `${newHeight}px`;
              break;
            case 'l':
              newWidth = Math.min(Math.max(startWidth - dx, minWidth), maxWidth);
              if (newWidth &gt; minWidth &amp;&amp; newWidth &lt; maxWidth) {
                newLeft = startLeft + dx;
                iframeContainer.style.left = `${newLeft}px`;
              }
              iframeContainer.style.width = `${newWidth}px`;
              break;
            case 't':
              newHeight = Math.min(Math.max(startHeight - dy, minHeight), maxHeight);
              if (newHeight &gt; minHeight &amp;&amp; newHeight &lt; maxHeight) {
                newTop = startTop + dy;
                iframeContainer.style.top = `${newTop}px`;
              }
              iframeContainer.style.height = `${newHeight}px`;
              break;
          }
          iframe.style.width = iframeContainer.style.width;
          iframe.style.height = iframeContainer.style.height;
        }
      }

      function onBorderMouseUp() {
        isResizing = false;
        iframeOverlay.style.display = 'none';
        document.removeEventListener('mousemove', onBorderMouseMove);
        document.removeEventListener('mouseup', onBorderMouseUp);
      }
    }

    function onResize(iframeEle, callback) {
      const observer = new ResizeObserver(callback);
      observer.observe(iframeEle);
    }

    const iframeContainer = document.getElementById('iframeContainer');
    const iframe = document.getElementById('resizableIframe');

    // 添加缩放控制点
    iframeContainer.innerHTML += `
      &lt;div class="resize-handle rb"&gt;&lt;/div&gt;
      &lt;div class="resize-handle lt"&gt;&lt;/div&gt;
      &lt;div class="resize-handle l"&gt;&lt;/div&gt;
      &lt;div class="resize-handle t"&gt;&lt;/div&gt;
    `;

    // 在 iframeContainer 中添加一个遮罩层元素
    const iframeOverlay = createIframeOverlay();
    iframeContainer.appendChild(iframeOverlay);
    iframe.classList.add('resizable-iframe');
    enableResize(iframeContainer, iframe, iframeOverlay);

    // 保留回调函数入口
    onResize(iframe, () =&gt; {
      console.log('Iframe resized');
    });
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>上述代码的效果:</p>
<p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/ef08ca94ebcf426191bf2a0430e0e672~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTTFwaGE=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiMTE0ODM1MzM5NTgyNTg4NSJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1737085748&amp;x-orig-sign=N0gC2cyiwChOnwhRoduSbZ8ml44%3D" alt="简化html效果.gif" loading="lazy"></p>
<h2 id="最后">最后</h2>
<p>我自己的代码写的有点乱(纯js代码)，拿copilot生成的简化代码似乎更乱了，dom的代码还分开写在了body和script中。我看着都有点迷惑了(悲。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="8.439480537707176" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-10 11:51">2025-01-10 11:51</span>&nbsp;
<a href="https://www.cnblogs.com/m1pha">m1pha</a>&nbsp;
阅读(<span id="post_view_count">11</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18663720" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18663720);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18663720', targetLink: 'https://www.cnblogs.com/m1pha/p/18663720', title: 'js实现拖动调节宽高的iframe' })">举报</a>
</div>
        