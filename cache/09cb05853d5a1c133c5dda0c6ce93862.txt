
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zhaloe/p/18922900" title="发布于 2025-06-11 19:50">
    <span role="heading" aria-level="2">ArkUI-X平台差异化</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>跨平台使用场景是一套ArkTS代码运行在多个终端设备上，如Android、iOS、OpenHarmony（含基于OpenHarmony发行的商业版，如HarmonyOS Next）。当不同平台业务逻辑不同，或使用了不支持跨平台的API，就需要根据平台不同进行一定代码差异化适配。当前仅支持在代码运行态进行差异化，接下来详细介绍场景及如何差异化适配。</p>
<h2 id="使用场景">使用场景</h2>
<p>平台差异化适用于以下两种典型场景：</p>
<p>1.自身业务逻辑不同平台本来就有差异；<br>
2.在OpenHarmony上调用了不支持跨平台的API，这就需要在OpenHarmony上仍然调用对应API，其他平台通过Bridge桥接机制进行差异化处理；</p>
<h2 id="判断平台类型">判断平台类型</h2>
<p>可以通过let osName: string = deviceInfo.osFullName;获取对应OS名字，该接口已支持跨平台，不同平台上其返回值如下:</p>
<p>OpenHarmony上，osName等于OpenHarmony-XXX<br>
Android上，osName等于Android XXX<br>
iOS上，osName等于iOS XXX</p>
<p>示例如下:</p>
<pre><code class="language-typescript">test() {
  let osName: string = deviceInfo.osFullName;
  console.log('osName = ' + osName);
  if (osName.startsWith('OpenHarmony')) {
    // OpenHarmony应用平台上业务逻辑
  } else if (osName.startsWith('Android')) {
    // Android应用平台上业务逻辑
  } else if (osName.startsWith('iOS')) {
    // iOS应用平台上业务逻辑
  }
}
</code></pre>
<h2 id="非跨平台api处理">非跨平台API处理</h2>
<p>在跨平台工程中如果调用非跨平台API，编译时IDE会触发拦截并报错。接下来以调用wifiManager.isWifiActive()判断WiFi开关是否打开为例，这个API当前是不支持跨平台的。示例代码：</p>
<pre><code class="language-typescript">  test2(){
   let isActive = wifiManager.isWifiActive();
  }
</code></pre>
<p>IDE报错：</p>
<pre><code class="language-plaintext">&gt; hvigor ERROR: Failed :feature:default@CompileArkTS... 
&gt; hvigor ERROR: ArkTS Compiler Error
ERROR: ArkTS:ERROR File: D:/work/git/play-arkuix/Test_ACE/feature/src/main/ets/pages/Index.ets:64:31
'isWifiActive' can't support crossplatform application.

COMPILE RESULT:FAIL {ERROR:2}
&gt; hvigor ERROR: BUILD FAILED in 10 s 753 ms 
</code></pre>
<p>此时可以将涉及到的API写到一个后缀为<strong>.ts</strong>文件，然后在不支持的API上面增加// @ts-ignore或// @ts-nocheck屏蔽告警，开发者需要保证只在OpenHarmony应用平台上才运行这一段逻辑，Android和iOS应用平台上可以借用Bridge桥接机制处理，示例代码如下：</p>
<p>1.新建一个WiFiUtil.ts，并忽略告警：</p>
<pre><code class="language-typescript">import wifiManager from '@ohos.wifiManager'

export class WiFiUtil {
  static isActive(): boolean {
    //@ts-ignore
    return wifiManager.isWifiActive();
  }
}
</code></pre>
<p>2.根据不同平台差异化逻辑，Android和iOS应用平台上通过Bridge机制桥接到对应平台的业务逻辑实现上：</p>
<pre><code class="language-typescript">checkTestWiFi(): void {
  let osName: string = deviceInfo.osFullName;
  console.log('osName = ' + osName);
  if (osName.startsWith('OpenHarmony')) {
    // OpenHarmony应用平台
    let isActive = WiFiUtil.isActive();
    this.message = isActive ? '已连接' : '未连接';
  } else {
    // Android和iOS应用平台上,中转到原生
    let bridge = Bridge.createBridge('Bridge');
    bridge.callMethod('isWiFiActive').then((res) =&gt; {
      // 业务逻辑处理...
    }).catch(() =&gt; {

    })
  }
}
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-11 19:51">2025-06-11 19:50</span>&nbsp;
<a href="https://www.cnblogs.com/zhaloe">龙儿筝</a>&nbsp;
阅读(<span id="post_view_count">33</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18922900);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18922900', targetLink: 'https://www.cnblogs.com/zhaloe/p/18922900', title: 'ArkUI-X平台差异化' })">举报</a>
</div>
        