
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/jackyfei/p/19046660" title="发布于 2025-08-21 09:07">
    <span role="heading" aria-level="2">C# 13 与 .NET 9 跨平台开发实战（第一章：开发环境搭建与.NET概述-下篇）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>大家好，我是张飞洪，专注.NET开发十来年。感谢您的阅读，我会不定期分享我的学习心得和职场经验，希望我的文章能成为你成长路上的助力。让我们一起精进，共同进步。</p>
</blockquote>
<p>本文是《<a href="https://www.cnblogs.com/jackyfei/p/19044836" target="_blank">C# 13 与 .NET 9 跨平台开发实战</a>》的第一章，内容很基础，也很细，适合初入.NET职场的新人。</p>
<p>接下来，我们继续第4部分内容学习。</p>
<h1 id="4使用-visual-studio-构建控制台应用">4.使用 Visual Studio 构建控制台应用</h1>
<h2 id="概述">概述</h2>
<p>本节将演示如何使用 Visual Studio 构建控制台应用。若您没有 Windows 设备或希望使用 VS Code，可以跳过本节（代码完全一致，仅开发体验不同）。但建议您阅读本节内容，其中解释了部分代码实现和顶级程序的工作原理，这些知识适用于所有代码编辑器。</p>
<h2 id="编写代码">编写代码</h2>
<h3 id="创建项目">创建项目</h3>
<ol>
<li>
<p>启动 Visual Studio</p>
</li>
<li>
<p>在"新建项目"对话框中：</p>
<ul>
<li>筛选 C# 语言模板</li>
<li>搜索框输入 <code>console</code></li>
<li>选择<strong>控制台应用</strong>模板<br>
（注意选择跨平台模板，而非仅限 Windows 的 .NET Framework 模板）</li>
</ul>
</li>
<li>
<p>点击"下一步"</p>
</li>
<li>
<p>项目配置：</p>
<ul>
<li>项目名称：<code>HelloCS</code></li>
<li>位置：<code>C:\自定义</code></li>
<li>解决方案名称：<code>Chapter01</code></li>
</ul>
<p><a href="https://images.cnblogs.com/cnblogs_com/jackyfei/1334006/o_250818073320_zsxq.jpg" target="_blank">项目配置截图参考</a></p>
</li>
<li>
<p>点击"下一步"</p>
</li>
<li>
<p>附加信息：</p>
<ul>
<li>在框架下拉列表中：
<ul>
<li>注意各 .NET SDK 版本标识（标准支持/长期支持/预览版/已终止支持）</li>
<li>选择 <strong>.NET 9.0（标准支持）</strong></li>
</ul>
</li>
<li>保持"不使用顶级语句"<strong>未勾选</strong>（本章后续会演示勾选效果）</li>
<li>保持"启用原生 AOT 发布"<strong>未勾选</strong>（第7章将详解此功能）</li>
</ul>
<blockquote>
<p>提示：可通过 <a href="https://dotnet.microsoft.com/en-us/download/dotnet" target="_blank" rel="noopener nofollow">.NET 下载页</a> 安装多版本 SDK</p>
</blockquote>
</li>
<li>
<p>点击"创建"</p>
</li>
</ol>
<h3 id="编辑代码">编辑代码</h3>
<ol>
<li>
<p>若未显示解决方案资源管理器：<code>视图 → 解决方案资源管理器</code></p>
</li>
<li>
<p>双击 <code>Program.cs</code> 文件（如图所示）<br>
<img src="https://img2024.cnblogs.com/blog/127185/202508/127185-20250819133741747-736533343.png" alt="image" loading="lazy"></p>
</li>
<li>
<p>初始代码结构：</p>
</li>
</ol>
<pre><code class="language-csharp">   // 参见 https://aka.ms/new-console-template 获取更多信息
   Console.WriteLine("Hello, World!");
</code></pre>
<p>此模板使用了 C# 9 引入的顶级程序特性（本章后续将详细解释）<br>
如注释所述，可通过此链接了解<a href="https://aka.ms/new-console-template" target="_blank" rel="noopener nofollow">模板详情</a></p>
<p>将第 2 行修改为：</p>
<p><code>Console.WriteLine("Hello, C#!");</code></p>
<h3 id="编译与运行">编译与运行</h3>
<p>接下来就是编译和运行代码：在Visual Studio里，菜单栏选择 调试 → 开始执行（不调试）</p>
<p><strong>最佳实践建议：</strong><br>
在 Visual Studio 中启动项目时，您可以选择是否附加调试器：</p>
<ol>
<li>
<p><strong>非调试模式推荐</strong>（工具栏空心绿色三角形按钮 →）：</p>
<ul>
<li>✅ 资源占用更少</li>
<li>✅ 执行速度更快</li>
<li>✅ 支持同时启动多个项目</li>
</ul>
</li>
<li>
<p><strong>调试模式限制</strong>（实心绿色三角形按钮 ←）：</p>
<ul>
<li>⚠️ 仅限单项目调试</li>
<li>⚠️ 多项目调试需开启多个 VS 实例</li>
<li>⚠️ 显著增加系统负载</li>
</ul>
</li>
</ol>
<blockquote>
<p><strong>最佳实践</strong>：<br>
除非需要进行代码调试，否则建议始终使用 <strong>"开始执行（不调试）"</strong>（快捷键 <code>Ctrl+F5</code>）</p>
</blockquote>
<p><strong>查看运行输出</strong><br>
控制台窗口将显示程序执行结果（如图所示）<br>
<img src="https://img2024.cnblogs.com/blog/127185/202508/127185-20250819135538135-80489079.png" alt="image" loading="lazy"></p>
<ul>
<li>按任意键关闭控制台窗口并返回VS界面</li>
<li>关闭属性面板可增加解决方案资源管理器的垂直显示空间</li>
<li>双击<code>HelloCS</code>项目打开项目文件</li>
<li>确认<code>HelloCS.csproj</code>中目标框架设置为<code>net9.0</code>（如图）<br>
<img src="https://img2024.cnblogs.com/blog/127185/202508/127185-20250819135559437-330917075.png" alt="image" loading="lazy"></li>
</ul>
<h2 id="编译器生成目录解析">编译器生成目录解析</h2>
<h3 id="生成目录结构">生成目录结构</h3>
<p>编译器自动创建两个关键目录：</p>
<ol>
<li>
<p><strong>obj 目录</strong><br>
◉ 存储每个源代码文件的编译中间产物<br>
◉ 包含尚未链接的独立对象文件</p>
</li>
<li>
<p><strong>bin 目录</strong><br>
◉ 存放最终生成的二进制可执行文件<br>
◉ （类库项目则包含DLL文件）<br>
<em>将在第7章《.NET类型打包与分发》详细讲解</em></p>
</li>
</ol>
<blockquote>
<p>📌 注意：</p>
<ul>
<li>这些是编译器的工作目录，可随时删除</li>
<li>执行"生成"或运行时自动重建</li>
<li>不影响项目源代码安全</li>
</ul>
</blockquote>
<h3 id="清理项目">清理项目</h3>
<p>开发者常用清理操作：</p>
<ul>
<li><strong>Visual Studio</strong>：<br>
<code>生成 → 清理解决方案</code> 菜单命令</li>
<li><strong>CLI 工具</strong>：<pre><code class="language-bash">dotnet clean
</code></pre>
</li>
</ul>
<h2 id="理解顶级程序top-level-programs">理解顶级程序（Top-Level Programs）</h2>
<h3 id="现代net的代码精简革命">现代.NET的代码精简革命</h3>
<p>您可能注意到，现代.NET控制台应用的代码异常简洁，这要归功于.NET 6+引入的<strong>顶级程序</strong>特性：</p>
<h3 id="新旧结构对比">新旧结构对比</h3>
<p>传统结构（.NET 5及更早）</p>
<pre><code class="language-csharp">using System;

namespace HelloWorld
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello, World!");
        }
    }
}

</code></pre>
<p>现代结构（.NET 6+）</p>
<pre><code class="language-csharp">// 自动生成的Program类和Main方法
Console.WriteLine("Hello, World!");
</code></pre>
<h3 id="编译过程解析">编译过程解析</h3>
<p>当使用.NET 6+ SDK进行编译时：</p>
<ul>
<li>编译器会自动生成定义<code>Program</code>类和<code>Main</code>方法的样板代码</li>
<li>您编写的语句会被自动包裹在这些生成的代码中</li>
</ul>
<h3 id="版本演进历程">版本演进历程</h3>
<p>◉ <strong>.NET 5</strong> 首次引入顶级程序特性<br>
◉ <strong>.NET 6</strong> 开始默认采用顶级语句模板<br>
◉ <strong>.NET 7+</strong> 增加传统风格选项：</p>
<h3 id="切换回传统模式的方法">切换回传统模式的方法</h3>
<ol>
<li>
<p><strong>Visual Studio</strong>：<br>
勾选"不使用顶级语句"复选框</p>
</li>
<li>
<p><strong>CLI命令</strong>：</p>
<pre><code class="language-bash">dotnet new console --use-program-main
</code></pre>
</li>
</ol>
<p><strong>重要差异警告：</strong><br>
自动生成的代码不会定义命名空间，这将导致：Program类被隐式放置在全局命名空间（空命名空间），与传统项目（自动匹配项目名的命名空间）行为不同<br>
<strong>注意：</strong><br>
这个差异可能在大型解决方案中引发类型冲突问题，需特别注意。</p>
<h2 id="顶级程序的核心要求">顶级程序的核心要求</h2>
<p>使用顶级程序时需要特别注意以下关键规则：</p>
<h3 id="文件组织规范">文件组织规范</h3>
<p>🔹 <strong>单一入口文件</strong><br>
每个项目只能有一个包含顶级程序代码的文件</p>
<p>🔹 <strong>using指令位置</strong><br>
所有<code>using</code>命名空间声明必须置于文件顶部</p>
<h3 id="类型声明规则">类型声明规则</h3>
<p>🔹 <strong>类型定义位置</strong><br>
所有类/结构体等类型声明必须放在文件底部</p>
<h3 id="方法命名细节">方法命名细节</h3>
<p>🔹 <strong>入口方法命名</strong></p>
<ul>
<li>显式定义时应命名为<code>Main</code></li>
<li>编译器自动生成时实际命名为<code>&lt;Main&gt;$</code></li>
</ul>
<pre><code class="language-csharp">  // 编译器生成的等效代码
  [CompilerGenerated]
  internal class Program
  {
      private static void &lt;Main&gt;$(string[] args)
      {
          // 您的顶级语句代码
      }
  }
</code></pre>
<h2 id="隐式命名空间导入机制">隐式命名空间导入机制</h2>
<h3 id="现象">现象</h3>
<p>虽然代码中没有显式包含<code>using System;</code>语句，<code>Console.WriteLine()</code>却能正常工作，这是因为：</p>
<h3 id="实现原理">实现原理</h3>
<p>通过<strong>C# 10 + .NET 6</strong>的新特性组合实现：</p>
<ol>
<li><strong>全局隐式导入</strong>机制</li>
<li>自动生成的全局引用文件</li>
</ol>
<h3 id="实际配置">实际配置</h3>
<ol>
<li>在解决方案资源管理器中展开：<br>
obj/<br>
└── Debug/<br>
└── net9.0/<br>
└── HelloCS.GlobalUsings.g.cs</li>
<li>文件内容示例：<br>
该文件由编译器自动生成，仅当项目目标框架为 .NET 6 及以上版本时出现。它利用了 C# 10 引入的“全局命名空间导入” 功能，一次性把常用的命名空间（如 System）带到整个项目的所有代码文件中，示例如下：</li>
</ol>
<pre><code class="language-csharp">// &lt;autogenerated /&gt;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
</code></pre>
<ol start="3">
<li>在“解决方案资源管理器”中，点击“显示所有文件”按钮，即可把 bin 和 obj 文件夹重新隐藏起来。<br>
下一章我会进一步讲解“隐式导入”功能。目前只需记住：从 .NET 5 到 .NET 6，大多数项目模板（如控制台模板）都开始使用新的 SDK 和语言特性，把幕后细节“藏”了起来</li>
</ol>
<h2 id="通过抛出异常揭示隐藏的代码">通过抛出异常揭示隐藏的代码</h2>
<p>现在我们来看看编译器生成的隐藏代码是如何编写的：</p>
<ol>
<li>在 <code>Program.cs</code> 中，在输出消息的语句之后，添加一条抛出新异常的语句，如下所示：</li>
</ol>
<pre><code class="language-csharp">   throw new Exception();
</code></pre>
<ol start="2">
<li>
<p>在 Visual Studio 中，依次选择 调试 (Debug) | 不调试启动 (Start Without Debugging)。<br>
（注意：不要使用调试模式启动，否则异常会被调试器捕获！）</p>
</li>
<li>
<p>控制台窗口的输出将显示应用程序运行的结果，其中包括编译器定义的一个隐藏的 Program 类，<br>
在该类中有一个名为 </p><main>$ 的方法，并且它包含一个名为 args 的参数用于传递命令行参数。<p></p>
</main></li>
</ol>
<pre><code class="language-csharp">Hello, C#!
Unhandled exception. System.Exception: Exception of type 'System.Exception' was thrown.
   at Program.&lt;Main&gt;$(String[] args) in C:\cs13net9\Chapter01\HelloCS\Program.cs:line 3
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/127185/202508/127185-20250819142343836-1740771614.png" alt="image" loading="lazy"></p>
<p>按下任意键关闭控制台应用，并退回到Visual Studio</p>
<h2 id="揭示-program-类的命名空间">揭示 Program 类的命名空间</h2>
<p>现在我们来看看 Program 类是在哪个命名空间中定义的：<br>
在 Program.cs 文件中，在抛出异常的语句之前，添加如下代码以获取 Program 类的命名空间，并将其输出到控制台：</p>
<pre><code>string name = typeof(Program).Namespace ?? "&lt;null&gt;";
Console.WriteLine($"Namespace: {name}");
</code></pre>
<p>这里的 ?? 是 空合并运算符。第一条语句的意思是：<br>
“如果 Program 的命名空间为 null，那么返回 <null>；否则返回实际的命名空间名称。”</null></p>
<p>后续章节会进一步解释这些关键字和运算符。现在，请先输入这段代码并运行，观察它的效果。</p>
<p><strong>代码片段（Code Snippets）</strong><br>
代码编辑器通常支持 代码片段 功能，可以让你通过快捷方式快速插入常用代码。<br>
例如，在 Visual Studio 中，要快速输入 Console.WriteLine() 并将光标停留在括号中间（方便直接输入要输出的内容），只需输入 cw，然后按下 Tab、Tab。</p>
<p>👉 建议查阅你所使用的代码编辑器的文档，了解如何通过快捷键插入代码片段</p>
<p>运行并观察结果<br>
1.在 Visual Studio 中，选择菜单：调试 (Debug) → 不调试启动 (Start Without Debugging)<br>
2.控制台窗口输出将显示运行结果，其中可以看到 Program 类被定义时没有命名空间，如下所示：<br>
<code>Namespace: &lt;null&gt;</code><br>
3.按任意键关闭控制台应用窗口并返回 Visual Studio。</p>
<h2 id="使用-visual-studio-添加第二个项目">使用 Visual Studio 添加第二个项目</h2>
<p>接下来我们向解决方案中添加第二个项目，探索如何处理多项目方案：</p>
<p>1.在 Visual Studio 中，选择菜单：文件 (File) → 添加 (Add) → 新建项目 (New Project)…</p>
<p>⚠️ 注意：<br>
此步骤会将新项目添加到现有解决方案<br>
请不要选择 文件 → 新建 → 项目…，因为那是用来创建全新的“项目+解决方案”的（虽然在对话框下拉框里也能选择“添加到现有解决方案”）</p>
<p>2.在 添加新项目 对话框中，在“最近使用的项目模板”中选择 控制台应用 [C#]，然后点击 下一步。<br>
3.在 配置新项目 对话框中：</p>
<ul>
<li>项目名称输入：AboutMyEnvironment</li>
<li>位置保持：C:\自定义\Chapter01，点击 下一步<br>
3.附加信息 对话框中：框架选择：.NET 9.0 (标准支持)，勾选不使用顶级语句 (Do not use top-level statements)</li>
</ul>
<p>⚠️ 重要提醒：<br>
一定要勾选“不使用顶级语句”，这样我们才能看到旧风格的 Program.cs 文件。</p>
<ol>
<li>点击 创建 (Create)。</li>
<li>在 AboutMyEnvironment 项目中，打开 Program.cs，你会看到：</li>
</ol>
<ul>
<li>定义了一个 命名空间（与项目名一致）</li>
<li>在命名空间中定义了一个 internal Program 类</li>
<li>在类中定义了一个 静态 Main 方法，带有一个名为 args 的参数，返回类型为 void</li>
</ul>
<p>代码示例如下：</p>
<pre><code>namespace AboutMyEnvironment
{
  internal class Program
  {
    static void Main(string[] args)
    {
      Console.WriteLine("Hello, World!");
    }
  }
}
</code></pre>
<ol start="3">
<li>在 <code>Program.cs</code> 的 <code>Main</code> 方法中，将现有的 <code>Console.WriteLine</code> 语句替换为以下语句，用于输出：</li>
</ol>
<ul>
<li>当前目录</li>
<li>操作系统的版本</li>
<li><code>Program</code> 类的命名空间</li>
</ul>
<p>示例如下代码所示：</p>
<pre><code class="language-csharp">Console.WriteLine(Environment.CurrentDirectory);
Console.WriteLine(Environment.OSVersion.VersionString);
Console.WriteLine(typeof(Program).Namespace);
</code></pre>
<h3 id="配置启动项目并运行-aboutmyenvironment">配置启动项目并运行 AboutMyEnvironment</h3>
<ol start="4">
<li>在 <strong>Solution Explorer</strong> 中，右键点击 <strong>Chapter01</strong> 解决方案，然后选择 <strong>Configure Startup Projects…</strong>。</li>
<li>在 <strong>Solution ‘Chapter01’ Property Pages</strong> 对话框中，将 <strong>Startup Project</strong> 设置为 <strong>Current selection</strong>，然后点击 <strong>OK</strong>。</li>
<li>在 <strong>Solution Explorer</strong> 中，点击 <strong>AboutMyEnvironment</strong> 项目（或其中的任何文件/文件夹），注意到 <strong>Visual Studio</strong> 会将 <strong>AboutMyEnvironment</strong> 项目名称加粗，表示它已成为启动项目。</li>
</ol>
<hr>
<h4 id="-最佳实践">💡 最佳实践</h4>
<p>推荐使用这种方式设置启动项目，因为它可以很方便地通过<strong>单击一个项目（或项目中的文件）</strong>来切换启动项目。</p>
<ul>
<li>虽然你也可以右键项目并选择 <strong>Set as Startup Project</strong>，但如果之后要运行另一个项目，就必须手动再次更改。</li>
<li>而采用 <strong>Current selection</strong> 的方式，只需点击项目即可轻松切换。</li>
</ul>
<p>在大多数章节中，你一次只需要运行一个项目。<br>
在 <strong>第 15 章：构建和使用 Web 服务</strong> 中，我会展示如何配置多个启动项目。</p>
<hr>
<h3 id="运行-aboutmyenvironment">运行 AboutMyEnvironment</h3>
<ol>
<li>在菜单栏中，选择 <strong>Debug | Start Without Debugging</strong> 来运行 <strong>AboutMyEnvironment</strong> 项目，并查看运行结果，如以下输出和图所示：</li>
</ol>
<pre><code>C:\自定义路径\Chapter01\AboutMyEnvironment\bin\Debug\net9.0
Microsoft Windows NT 10.0.26100.0
Namespace: AboutMyEnvironment
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/127185/202508/127185-20250819143958191-97898714.png" alt="image" loading="lazy"></p>
<h3 id="在包含两个项目的-vs-解决方案中运行控制台应用程序">在包含两个项目的 VS 解决方案中运行控制台应用程序</h3>
<p>Windows 11 只是一个品牌名称。它的正式名称仍然是 <strong>Windows NT</strong>，其主版本号依然是 <strong>10</strong>！但补丁版本号是 <strong>22000 或更高</strong>。</p>
<hr>
<ol>
<li>按任意键关闭控制台应用程序窗口并返回 Visual Studio。</li>
<li>当 Visual Studio 运行控制台应用程序时，它会从以下文件夹执行：<projectname>\bin\Debug\net9.0，在后续章节中，当我们与文件系统交互时，记住这一点非常重要。</projectname></li>
<li>使用 <strong>VS Code</strong>（更准确地说是 <strong>dotnet CLI</strong>）时，行为会有所不同，一会儿就会看到这一点。</li>
</ol>
<h1 id="5使用-vs-code-构建控制台应用程序">5.使用 VS Code 构建控制台应用程序</h1>
<p>本节的目标是展示如何使用 <strong>VS Code</strong> 和 <strong>dotnet CLI</strong> 来构建一个控制台应用程序。</p>
<p>如果你不打算尝试 VS Code 或 dotnet 命令行工具，可以跳过本节</p>
<h2 id="使用-vs-code-编写代码">使用 VS Code 编写代码</h2>
<p>让我们开始！</p>
<ol>
<li>启动你常用的文件系统工具，例如 Windows 上的 <strong>文件资源管理器</strong> 或 Mac 上的 <strong>Finder</strong>。</li>
<li>导航到以下位置之一：
<ul>
<li>Windows：<code>C:</code> 盘</li>
<li>macOS / Linux：你的用户目录（如 <code>markjprice</code> 或 <code>home/markjprice</code>）</li>
<li>或者任何你希望保存项目的目录/磁盘。</li>
</ul>
</li>
<li>创建一个新文件</li>
<li>在该文件夹下，创建一个新文件夹。</li>
</ol>
<h3 id="创建解决方案">创建解决方案</h3>
<ol>
<li>在文件夹中，打开命令提示符或终端。
<ul>
<li>例如在 Windows 上，右键点击该文件夹，然后选择 <strong>在终端中打开</strong>。</li>
</ul>
</li>
<li>在命令提示符或终端中，使用 <strong>dotnet CLI</strong> 创建一个名为 <code>Chapter01</code> 的解决方案，命令如下：</li>
</ol>
<pre><code class="language-bash">dotnet new sln -n Chapter01 
</code></pre>
<p><strong>新建解决方案（.sln 文件）</strong></p>
<pre><code class="language-bash">dotnet new sln -n Chapter01-vscode
</code></pre>
<ul>
<li>-n 或 --name 指定解决方案名字。如果你不写，它就会用当前文件夹名（比如 Chapter01-vscode）。这一步就相当于 先创建一个空的解决方案容器。</li>
</ul>
<p><strong>新建控制台应用（HelloCS 项目）</strong></p>
<pre><code class="language-bash">dotnet new console -o HelloCS
</code></pre>
<ul>
<li>-o 或 --output 是要把项目文件放到的文件夹名，同时也是项目名。默认会用你安装的最新 .NET SDK（比如 .NET 9）。如果你要指定 .NET 版本，比如用 .NET 8：</li>
</ul>
<pre><code class="language-bash">dotnet new console -f net8.0 -o HelloCS
</code></pre>
<p>这一步就相当于 在解决方案里新建了一个控制台程序项目。</p>
<p><strong>把项目加到解决方案里</strong></p>
<pre><code class="language-bash">dotnet sln add HelloCS
</code></pre>
<p>这会在解决方案文件里登记 HelloCS.csproj。否则解决方案不知道它下面有哪些项目。</p>
<p>输出会显示：</p>
<pre><code class="language-bash">Project `HelloCS\HelloCS.csproj` added to the solution.
</code></pre>
<p><strong>用 VS Code 打开当前文件夹</strong></p>
<pre><code class="language-bash">code .
</code></pre>
<p>. 表示当前目录。这时 VS Code 会弹个提示：是否信任这个目录里的文件。选“信任”即可。</p>
<p><strong>VS Code 中查看文件</strong></p>
<p>在 EXPLORER（资源管理器）里，展开 HelloCS 文件夹，你会看到：</p>
<ul>
<li>HelloCS.csproj（项目文件）</li>
<li>Program.cs（默认的 C# 程序入口）</li>
<li>bin、obj（编译时生成的临时文件夹）</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/127185/202508/127185-20250820170738892-1602655860.png" alt="image" loading="lazy"></p>
<p>图：EXPLORER 显示已创建两个文件和临时文件夹</p>
<ul>
<li>导航到 View | Output（视图 | 输出）。</li>
<li>在 OUTPUT（输出） 窗格中，选择 C# Dev Kit，注意工具已经识别并处理了解决方案。</li>
<li>在 EXPLORER（资源管理器） 底部，找到 SOLUTION EXPLORER（解决方案资源管理器）。</li>
<li>将 SOLUTION EXPLORER 拖到 EXPLORER 窗格的顶部并展开它。</li>
<li>在 SOLUTION EXPLORER 中，展开 HelloCS 项目，然后单击名为 Program.cs 的文件，在编辑器窗口中打开它。</li>
<li>在 Program.cs 中，修改第 2 行，使写入控制台的文本变为：Hello, C#！</li>
</ul>
<p><strong>最佳实践：</strong><br>
导航到 File | Auto Save（文件 | 自动保存）。启用此切换开关可以避免每次重新生成应用程序前还要手动保存文件的烦恼。</p>
<p>在前面的步骤中，我向你展示了如何使用 dotnet CLI 来创建解决方案和项目。最后，从 2024 年 8 月或更高版本的 C# Dev Kit 开始，VS Code 提供了改进的项目创建体验，它能让你在 VS Code 中直接使用与 dotnet CLI 相同的项目创建选项。</p>
<p>要启用此功能，你需要修改一个设置，如下所示：</p>
<pre><code>"csharp.experimental.dotnetNewIntegration": true
</code></pre>
<p>在 VS Code 中，依次进入 File | Preferences | Settings（文件 | 首选项 | 设置），搜索 dotnet new，然后选中：Csharp &gt; Experimental: Dotnet New Integration 复选框。</p>
<p>你可以在以下链接了解更多：<br>
👉 <a href="https://devblogs.microsoft.com/dotnet/whats-new-in-csharp-dev-kit-august-2024/#create-new-project-configuration-options" target="_blank" rel="noopener nofollow">https://devblogs.microsoft.com/dotnet/whats-new-in-csharp-dev-kit-august-2024/#create-new-project-configuration-options</a></p>
<h2 id="使用-dotnet-cli-编译和运行代码">使用 dotnet CLI 编译和运行代码</h2>
<p>接下来的任务是编译并运行代码：</p>
<p>在 SOLUTION EXPLORER 中，右键点击 HelloCS 项目中的任意文件，选择 Open In Integrated Terminal。<br>
在 TERMINAL 中，输入以下命令：</p>
<pre><code>dotnet run
</code></pre>
<p>TERMINAL 窗口中的输出会显示运行应用程序的结果。</p>
<p>在 Program.cs 中，在输出消息的语句之后，添加以下语句以获取 Program 类的命名空间名称，将其写入控制台，然后抛出一个新的异常，如下面的代码所示：</p>
<pre><code>string name = typeof(Program).Namespace ?? "&lt;null&gt;";
Console.WriteLine($"Namespace: {name}");
throw new Exception();
</code></pre>
<p>在 TERMINAL 中，输入以下命令：</p>
<pre><code>dotnet run
</code></pre>
<p>在 TERMINAL 中，你可以按上下箭头循环浏览之前输入的命令，然后按左右箭头编辑命令，最后按 Enter 来运行它们。</p>
<p>TERMINAL 窗口中的输出会显示运行应用程序的结果，包括编译器定义了一个隐藏的 Program 类，其中有一个名为 </p><main>$ 的方法，它有一个名为 args 的参数用于传递参数，并且它没有命名空间，如下输出所示：<p></p>
<pre><code>Hello, C#!
Namespace: &lt;null&gt;
Unhandled exception. System.Exception: Exception of type 'System.Exception' was thrown.
   at Program.&lt;Main&gt;$(String[] args) in C:\cs13net9\Chapter01-vscode\HelloCS\Program.cs:line 7
</code></pre>
<h2 id="使用-vs-code-添加第二个项目">使用 VS Code 添加第二个项目</h2>
<p>接下来，我们添加第二个项目，探索如何处理多个项目：</p>
<p>在 TERMINAL 中，切换到 Chapter01 目录，如下命令所示：</p>
<pre><code>cd ..
</code></pre>
<p>在 TERMINAL 中，创建一个新的控制台应用项目，命名为 AboutMyEnvironment，使用旧的非顶层程序样式，如下命令所示：</p>
<pre><code>dotnet new console -o AboutMyEnvironment --use-program-main
</code></pre>
<p><strong>💡 最佳实践：</strong><br>
在 TERMINAL 输入命令时要小心。确保你在正确的文件夹下，再执行可能破坏性的命令！</p>
<p>在 TERMINAL 中，使用 dotnet CLI 将新项目添加到解决方案中，如下命令所示：</p>
<pre><code>dotnet sln add AboutMyEnvironment
</code></pre>
<p>注意输出结果，如下所示：</p>
<pre><code>Project `AboutMyEnvironment\AboutMyEnvironment.csproj` added to the solution.
</code></pre>
<p>在 SOLUTION EXPLORER 中，打开 AboutMyEnvironment 项目的 Program.cs 文件，然后在 Main 方法中，将现有语句修改为输出当前目录、操作系统版本字符串以及 Program 类的命名空间，如下代码所示：</p>
<pre><code>Console.WriteLine(Environment.CurrentDirectory);
Console.WriteLine(Environment.OSVersion.VersionString);
Console.WriteLine("Namespace: {0}",
  typeof(Program).Namespace ?? "&lt;null&gt;");
</code></pre>
<p>在 SOLUTION EXPLORER 中，右键点击 AboutMyEnvironment 项目中的任意文件，选择 Open In Integrated Terminal。<br>
在 TERMINAL 中，输入命令运行项目，如下所示：</p>
<pre><code>dotnet run
</code></pre>
<p>注意 TERMINAL 窗口中的输出，如下所示：</p>
<pre><code>C:\cs13net9\Chapter01-vscode\AboutMyEnvironment
Microsoft Windows NT 10.0.26100.0
Namespace: AboutMyEnvironment
</code></pre>
<p><strong>多终端窗口操作</strong><br>
打开多个终端窗口后，可以通过点击 TERMINAL 面板右侧的终端名称在它们之间切换。<br>
默认名称通常是常用的 shell，如 pwsh、powershell、zsh 或 bash。<br>
右键点击选择 Rename 可更改终端名称。</p>
<p><strong>运行路径差异</strong><br>
当 VS Code（或者更准确地说 dotnet CLI）运行控制台应用时，它会从 <projectname> 文件夹执行。<br>
Visual Studio 会从 <projectname>\bin\Debug\net9.0 文件夹执行应用。</projectname></projectname></p>
<p>在后续章节操作文件系统时，需要记住这一点。<br>
如果你在 macOS Ventura 上运行程序，环境操作系统会不同，如下输出：</p>
<pre><code>Unix 13.5.2
</code></pre>
<p><strong>💡 最佳实践</strong><br>
虽然源代码（如 .csproj 和 .cs 文件）是相同的，但编译器自动生成的 bin 和 obj 文件夹可能会存在差异，导致错误。如果想在 Visual Studio 和 VS Code 中打开同一个项目，请在另一个编辑器中打开前，先删除临时的 bin 和 obj 文件夹。<br>
这也是为什么本章要求你为 VS Code 项目创建一个不同的文件夹，以避免潜在问题。</p>
<h2 id="vs-code-操作步骤总结">VS Code 操作步骤总结</h2>
<p>按照以下步骤使用 VS Code 创建解决方案和项目，如表 1.5 所示：</p>
<table>
<thead>
<tr>
<th>步骤</th>
<th>描述</th>
<th>命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>创建解决方案文件夹</td>
<td><code>mkdir &lt;solution_folder_name&gt;</code></td>
</tr>
<tr>
<td>2</td>
<td>切换到该文件夹</td>
<td><code>cd &lt;solution_folder_name&gt;</code></td>
</tr>
<tr>
<td>3</td>
<td>在文件夹中创建解决方案文件</td>
<td><code>dotnet new sln</code></td>
</tr>
<tr>
<td>4</td>
<td>使用模板创建项目及其文件夹</td>
<td><code>dotnet new console -o &lt;project_folder_name&gt;</code></td>
</tr>
<tr>
<td>5</td>
<td>将该文件夹及项目添加到解决方案</td>
<td><code>dotnet sln add &lt;project_folder_name&gt;</code></td>
</tr>
<tr>
<td>6</td>
<td>重复步骤 4 和 5，创建并添加其他项目</td>
<td>—</td>
</tr>
<tr>
<td>7</td>
<td>使用 VS Code 打开包含解决方案的当前文件夹路径（<code>.</code>）</td>
<td><code>code .</code></td>
</tr>
</tbody>
</table>
<p><strong>表 1：使用 VS Code 创建解决方案和项目的步骤总结</strong></p>
<hr>
<h2 id="本书中使用的其他项目类型总结">本书中使用的其他项目类型总结</h2>
<p>控制台应用程序（Console App / console project）只是项目模板的一种类型。在本书中，你还将使用以下项目模板创建项目，如表 1.6 所示：</p>
<table>
<thead>
<tr>
<th>编辑器</th>
<th>dotnet new</th>
<th>Rider – 类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>Console App</td>
<td>console</td>
<td>Console Application</td>
</tr>
<tr>
<td>Class Library</td>
<td>classlib</td>
<td>Class Library</td>
</tr>
<tr>
<td>xUnit Test Project</td>
<td>xunit</td>
<td>Unit Test Project – xUnit</td>
</tr>
<tr>
<td>ASP.NET Core Empty</td>
<td>web</td>
<td>ASP.NET Core Web Application – Empty</td>
</tr>
<tr>
<td>Blazor Web App</td>
<td>blazor</td>
<td>ASP.NET Core Web Application – Blazor Web App</td>
</tr>
<tr>
<td>ASP.NET Core Web API</td>
<td>webapi</td>
<td>ASP.NET Core Web Application – Web API</td>
</tr>
<tr>
<td>ASP.NET Core Web API (native AOT)</td>
<td>webapiaot</td>
<td>ASP.NET Core Web Application – Web API (native AOT)</td>
</tr>
</tbody>
</table>
<p><strong>表 2：各类代码编辑器对应的项目模板名称</strong></p>
<hr>
<h3 id="添加项目注意事项">添加项目注意事项</h3>
<ul>
<li>添加任何类型新项目到解决方案的步骤都是相同的。</li>
<li>唯一不同的是项目模板的类型名称，有时还需要使用一些命令行开关来控制选项。</li>
</ul>
</main>
</div>
<div id="MySignature" role="contentinfo">
    <div style="padding: 10px 10px 10px 20px; border: 1px dashed #333; font-family: 微软雅黑; font-size: 12px" id="mySignature"> 
   <!-- <span style="font-size: 10pt">希望以上分享对你有所帮助，感谢您的捧场。</span>-->
<br> 
<strong><span style="font-size: 10pt">个人微信：</span></strong>沟通创造快乐，分享带来价值 <br> 
<img src="https://images.cnblogs.com/cnblogs_com/jackyfei/1334006/o_221116135151_WechatIMG37.jpeg" width="150" height="150"> <br>
<strong><span style="font-size: 10pt">知识星球：</span></strong>为您提供更多更全的增值服务 <br> 
<img src="https://images.cnblogs.com/cnblogs_com/jackyfei/1334006/o_250818073320_zsxq.jpg" width="150" height="150">
<!--<strong><span style="font-size: 10pt">我的视频：</span></strong><a target="_blank" href="https://ke.qq.com/course/3096934?tuin=27c3e37"><span style="color:#F39019">ABP vNext视频系列</span></a>    <br>-->
  <br>
    个人作品：
    <a target="_blank" href="https://dotnet.tota.lanlue.cn/login">数字基座</a> /
    <a target="_blank" href="https://auth.lanlue.cn/">云身份认证授权 </a>
   <!--<a target="_blank" href="https://appstv6elnt7382.h5.xiaoeknow.com">我的视频</a> <br/>--><br>
    <a target="_blank" href="http://wpa.qq.com/msgrd?v=3&amp;uin=996767213&amp;site=qq&amp;menu=yes">QQ交流群 |</a>
    <a target="_blank" href="https://t.zsxq.com/I2vNFub">知识星球</a>
   <br>
   <p></p>  <div class="reward-btn">
    <strong>打赏支持</strong>
   </div> 
 <p></p></div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-21 09:08">2025-08-21 09:07</span>&nbsp;
<a href="https://www.cnblogs.com/jackyfei">张飞洪[厦门]</a>&nbsp;
阅读(<span id="post_view_count">380</span>)&nbsp;
评论(<span id="post_comment_count">3</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19046660);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19046660', targetLink: 'https://www.cnblogs.com/jackyfei/p/19046660', title: 'C# 13 与 .NET 9 跨平台开发实战（第一章：开发环境搭建与.NET概述-下篇）' })">举报</a>
</div>
        