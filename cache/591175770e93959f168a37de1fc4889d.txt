
	<h1 class="postTitle"><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/CharXL/p/19064506" title="发布于 2025-08-29 14:37">
    <span role="heading" aria-level="2">音视频编解码——视频数据格式</span>
    

</a>
</h1>
	<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="yuv采样">YUV采样</h1>
<p>code:<a href="https://blog.csdn.net/byhook/article/details/84037338" target="_blank" rel="noopener nofollow">https://blog.csdn.net/byhook/article/details/84037338</a></p>
<p>YUV模型是根据一个亮度(Y分量)和两个色度(UV分量)来定义颜色空间</p>
<p>YUV 4:4:4采样，每一个Y对应一组UV分量,一个YUV占8+8+8 = 24bits 3个字节。</p>
<p>YUV 4:2:2采样，每两个Y共用一组UV分量,一个YUV占8+4+4 = 16bits 2个字节。</p>
<p>YUV 4:2:0采样，每四个Y共用一组UV分量,一个YUV占8+2+2 = 12bits 1.5个字节。</p>
<p>常见的YUV420P和YUV420SP都是基于4:2:0采样的，所以如果图片的宽为width，高为heigth，在内存中占的空间为width * height * 3 / 2，其中前width * height的空间存放Y分量，接着width * height / 4存放U分量，最后width * height / 4存放V分量。</p>
<p>RGB与YUV转换：</p>
<pre><code class="language-xml">Y      =  (0.257 * R) + (0.504 * G) + (0.098 * B) + 16
Cr = V =  (0.439 * R) - (0.368 * G) - (0.071 * B) + 128
Cb = U = -(0.148 * R) - (0.291 * G) + (0.439 * B) + 128

R = 1.164(Y - 16) + 1.596(V - 128)
G = 1.164(Y - 16) - 0.813(V - 128) - 0.391(U - 128)
B = 1.164(Y - 16) + 2.018(U - 128)
</code></pre>
<h2 id="1-yuv420">1. YUV420</h2>
<h3 id="11-yuv420p">1.1 YUV420P</h3>
<p>YUV420P又叫plane平面模式，Y , U , V分别在不同平面，也就是有三个平面，它是YUV标准格式4：2：0，主要分为：YU12和YV12</p>
<p><img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3482349/202508/3482349-20250829174126748-1742198459.png" class="lazyload"></p>
<h4 id="111-yu12i420">1.1.1 YU12（I420)</h4>
<p>在android平台下也叫作I420格式，首先是所有Y值，然后是所有U值，最后是所有V值。</p>
<p>YU12：亮度(行×列) + U(行×列/4) + V(行×列/4)</p>
<h4 id="112-yv12">1.1.2 YV12</h4>
<p>YV12格式与YU12基本相同，首先是所有Y值，然后是所有V值，最后是所有U值。只要注意从适当的位置提取U和V值，YU12和YV12都可以使用相同的算法进行处理。</p>
<p>YV12：亮度Y(行×列) + V(行×列/4) + U(行×列/4)</p>
<h3 id="12-yuv420sp">1.2 YUV420SP</h3>
<p>YUV420SP格式的图像阵列，首先是所有Y值，然后是UV或者VU交替存储</p>
<p>所以如果图片的宽为width，高为heigth，在内存中占的空间为width * height * 3 / 2，其中前width * height的空间存放Y分量，接着width * height / 4存放U分量，最后width * height / 4存放V分量。</p>
<p>NV12和NV21属于YUV420SP格式，是一种two-plane模式，即Y和UV分为两个plane，但是UV(CbCr)为交错存储，而不是分为三个平面。</p>
<p><img alt="image (1)" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3482349/202508/3482349-20250829174136596-964119941.png" class="lazyload"></p>
<h4 id="121-nv12">1.2.1 NV12</h4>
<p>android手机从摄像头采集的预览数据一般都是NV21，存储顺序是先存Y，再VU交替存储，NV21存储顺序是先存Y值，再VU交替存储：YYYYVUVUVU</p>
<h4 id="122-nv21">1.2.2 NV21</h4>
<p>NV12与NV21类似，也属于YUV420SP格式，NV12存储顺序是先存Y值，再UV交替存储：YYYYUVUVUV</p>
<h2 id="2-yuv422">2. YUV422</h2>
<h3 id="21-yuy2">2.1 YUY2</h3>
<p>YUV 4:2:2采样</p>
<p>在YUY2格式中，数据可以被视为一个无符号字符值的数组，其中第一个字节包含第一个Y样本，第二个字节包括第一个U（Cb）样本，第三个字节包含第二个Y样本和第四个字节包含首个V（Cr）样本</p>
<p><img alt="image (2)" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3482349/202508/3482349-20250829174209110-864556165.png" class="lazyload"></p>
<h2 id="3-yuv444">3. YUV444</h2>
<h3 id="31-yuv444i444">3.1 YUV444（I444）</h3>
<p>2*2像素<br>
<img alt="image (3)" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3482349/202508/3482349-20250829174221348-299829981.png" class="lazyload"></p>
<h3 id="32-yuv444yv24">3.2 YUV444（YV24）</h3>
<p>4*4像素</p>
<p><img alt="image (4)" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3482349/202508/3482349-20250829174226690-464536242.png" class="lazyload"></p>

</div>
<div class="clear"></div>

	<div class="postDesc">posted on 
<span id="post-date" data-last-update-days="0.12916666666666668" data-date-updated="2025-08-29 17:43">2025-08-29 14:37</span>&nbsp;
<a href="https://www.cnblogs.com/CharXL">CharXL</a>&nbsp;
阅读(<span id="post_view_count">164</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19064506);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19064506', targetLink: 'https://www.cnblogs.com/CharXL/p/19064506', title: '音视频编解码——视频数据格式' })">举报</a>
</div>
