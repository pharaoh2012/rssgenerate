
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/alineverstop/p/18990999" title="发布于 2025-07-18 10:06">
    <span role="heading" aria-level="2">SpringBoot--自动配置的替换和关闭</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>SpringBoot启用自动配置需要使用@EnableAutoConfiguration注解，整个应用只需一个该注解，因此，只要将该注解加到主配置类即可。</p>
<p>由于 @SpringBootApplication是由@EnableAutoConfiguration、@ComponentScan、@Configuration这三个组合的，因此，只要项目中使用了@SpringBootApplication，也自然使用了@EnableAutoConfiguration，从而启用了自动配置。</p>
<h1 id="自动配置的替换">自动配置的替换</h1>
<p>SpringBoot自动配置通常有一个原则：当容器中不存在特定类型的Bean时，SpringBoot才会配置该类型的bean。例如引入spring-boot-starter-jdbc依赖，SpringBoot会尝试在容器中自动配置一个DataSource bean，但如果显示的在容器中配置了一个DataSource bean，那么SpringBoot就不会去自动配置了。</p>
<p>SpringBoot提供一个@ConditionalOnMissingBean注解，该注解通常和@Bean同时使用，这表示只有当某个bean不存在时，才会创建@Bean修饰的Bean，</p>
<p>比如以下代码：</p>
<pre><code class="language-java">// 如果容器中没有DataSource类型的Bean，则创建一个DriverDataSource作为默认数据源
@ConditionalOnMissingBean({DataSource.class})
@Bean
public DataSource dataSource(){
   return new DriverDataSource();
}

// 如果容器中不存在名为dataSource的Bean，则创建一个DriverDataSource作为默认数据源
@ConditionalOnMissingBean(name = "dataSource")
@Bean
public DataSource dataSource(){
   return new DriverDataSource();
}
</code></pre>
<h1 id="禁用特定的自动配置">禁用特定的自动配置</h1>
<p>要禁用特定的自动配置类，可通过@EnableAutoConfiguration注解的如下属性来指定：</p>
<ol>
<li>exclude：值可以是一个Class数组，用于禁用一个或多个自动配置类</li>
<li>excludeName：指定一个或多个自动配置类的完整类名的字符串</li>
</ol>
<p>实际使用中，@SpringBootApplication已包含了@EnableAutoConfiguration，@SpringBootApplication注解的exclude、excludeName两个属性就是@EnableAutoConfiguration注解的这两个属性的别名。</p>
<p>比如禁用DataSourceAutoConfiguration的自动配置类</p>
<pre><code class="language-java">// 禁用Spring Boot的自动数据源配置
@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})
public class App
{
   public static void main(String[] args)
   {
      // 创建Spring容器、运行Spring Boot应用
      SpringApplication.run(App.class, args);
   }
}
</code></pre>
<p>在application.properties中通过spring.autoconfigure.exclude来指定要禁用的配置类，比如禁用DataSourceAutoConfiguration和ActiveMQAutoConfiguration：</p>
<pre><code class="language-java">spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration
</code></pre>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/alineverstop/" target="_blank">NE_STOP</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/alineverstop/p/18990999" target="_blank">https://www.cnblogs.com/alineverstop/p/18990999</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-18 10:06">2025-07-18 10:06</span>&nbsp;
<a href="https://www.cnblogs.com/alineverstop">NE_STOP</a>&nbsp;
阅读(<span id="post_view_count">50</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18990999);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18990999', targetLink: 'https://www.cnblogs.com/alineverstop/p/18990999', title: 'SpringBoot--自动配置的替换和关闭' })">举报</a>
</div>
        