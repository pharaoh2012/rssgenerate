
        <h2>
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wuhuacong/p/18643766" title="发布于 2025-01-03 16:11">
    <span role="heading" aria-level="2">WxPython跨平台开发框架之模块字段权限的管理</span>
    

</a>

        </h2>
        <div class="postbody">
                <div id="cnblogs_post_description" style="display: none">
        
        在我的很多Winform开发项目中，统一采用了权限管理模块来进行各种权限的控制，包括常规的功能权限（工具栏、按钮、菜单权限），另外还可以进行字段级别的字段权限控制，字段权限是我们在一些对权限要求比较严格的系统里面涉及到的，可以对部分用户隐藏一些敏感的信息，或者禁止不够权限的用户编辑它。本篇随笔介绍基于这一理念，实现在WxPython跨平台开发框架中的模块字段权限的管理。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>在我的很多Winform开发项目中，统一采用了权限管理模块来进行各种权限的控制，包括常规的功能权限（工具栏、按钮、菜单权限），另外还可以进行字段级别的字段权限控制，字段权限是我们在一些对权限要求比较严格的系统里面涉及到的，可以对部分用户隐藏一些敏感的信息，或者禁止不够权限的用户编辑它。本篇随笔介绍基于这一理念，实现在WxPython跨平台开发框架中的模块字段权限的管理。</p>
<h3>1、字段权限的设计</h3>
<p>字段的权限控制，一般就是控制对应角色人员的对某个模块的一些敏感字段的可访问性：包括可见、可编辑性等处理。</p>
<p>在设计字段权限的时候，我们需要了解这些也是基于RBAC的概念，基于角色进行授权的，而且我们的字段列表是属于具体的业务对象列表的，这里的业务对象是指一些我们具体的业务模块，如客户基础信息、人员基础信息、报价单等等，我们就是基于这些业务进行字段的控制的。</p>
<p>为了实现对业务模型的字段控制，我们在数据库中设计两个数据库，一个用于存储对应实体类名称的信息，如ID，实体类全名，类路径等主体信息；一个存储对应角色配置的字段列表信息，结合起来就可以实现对应角色的字段权限控制了，数据库表设计信息如下所示。</p>
<p><img src="https://img2022.cnblogs.com/blog/8867/202206/8867-20220622150432586-31037616.png" alt="" width="322" height="390" class="medium-zoom-image" loading="lazy"></p>
<p>如下界面所示，我们在权限系统里面也可以对其字段进行权限控制，如下图所示。先选择左边的具体角色，然后添加一些业务对象，并设置它们的权限即可。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202412/8867-20241231130216875-1541717932.png" alt="" width="862" height="534" loading="lazy"></p>
<p>&nbsp;</p>
<p>首次业务对象需要用户加入，这里以wxpython前端框架的实体类进行字段信息的标识处理，如下所示可以加载对应业务信息。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202412/8867-20241231130344417-420988313.png" alt="" width="327" height="498" loading="lazy"></p>
<p>&nbsp;确认后，系统记录对应角色对业务模块中的相关字段的权限处理。</p>
<p>我们在业务对象列表的【显示设置】处可以单击旁边的按钮，在弹出的界面上进行条件的设置，如下界面效果所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202412/8867-20241231130437101-85757253.png" alt="" width="582" height="411" loading="lazy"></p>
<p>&nbsp;这样我们就完成了对某个业务对象的各个字段进行配置了，具体的字段控制在业务模块里面添加部分代码即可实现了。</p>
<p>&nbsp;</p>
<h3>2、业务模块对字段控制的处理</h3>
<p>如下面列表界面，对于隐藏的字段，统一进行***符号的遮挡处理，即使导出Excel数据，结果也是***替代。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202412/8867-20241231130546496-1205756826.png" alt="" width="868" height="608" loading="lazy"></p>
<p>&nbsp;</p>
<p>同时，如果系统界面有新增或者编辑界面，那么我们也需要隐藏才可以达到效果，如下是其的编辑界面效果（隐藏显示年龄字段了）。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202412/8867-20241231130642557-878055474.png" alt="" width="499" height="352" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;如果仅仅是禁止编辑，那么我们配置角色对该字段不允许编辑即可。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202412/8867-20241231131348538-1302361722.png" alt="" width="623" height="449" loading="lazy"></p>
<p>&nbsp;那么用户对应客户信息模块的年龄字段可以看到，但是不能编辑。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202412/8867-20241231131451933-664693205.png" alt="" width="739" height="518" loading="lazy"></p>
<p>&nbsp;</p>
<h3>3、字段权限的列表控制处理</h3>
<p>前面我们介绍了在权限系统中进行业务对象的字段权限的设置流程，以及以其中的【客户信息】的业务模块进行的演示，那么我们如何才能在自己的业务模块里面进行控制处理的呢？</p>
<p>首先我们需要在业务列表绑定的时候，需要获取我们当前用户能够访问的字段列表，默认是全部可见，但是如果用户设置了条件，那么就需要获取对应的权限列表进行控制了，具体的控制代码如下所示。</p>
<p>&nbsp;在我的WxPython跨平台开发框架中，我们对于常规窗体列表界面做了抽象处理，一般绝大多数的逻辑封装在基类上，基类提供一些可重写的函数给子类实现弹性化的处理。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202411/8867-20241111131058275-415274506.png" alt="" class="medium-zoom-image" loading="lazy"></p>
<p>有了基类的挡箭牌，我们就可以统一在上面进行列表界面中字段权限的判断处理了。</p>
<p>我们在基类窗体的类上，对更新表格数据的处理进行调整，增加对字段权限的获取，在传递给实际更新表格的接口即可，如下代码所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202501/8867-20250103154455086-1399062675.png" alt="" width="880" height="455" loading="lazy"></p>
<p>由于在窗体基类，可以获得对泛型类型的一些属性，因此我们也就直接获得该对象的字段权限的配置了，如下代码所示。</p>
<div class="cnblogs_code">
<pre>    async <span style="color: rgba(0, 0, 255, 1)">def</span> get_columns_permit(self) -&gt;<span style="color: rgba(0, 0, 0, 1)"> dict[str, int]:
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">获取当前用户对该模块的列权限字典</span><span style="color: rgba(128, 0, 0, 1)">"""</span>

        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 1、获得对象的模块路径+类名</span>
        entityFullName = f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{self.model.__module__}.{self.model.__name__}</span><span style="color: rgba(128, 0, 0, 1)">"</span>

        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 2、获取当前用户对该模块的列权限字典</span>
        result =<span style="color: rgba(0, 0, 0, 1)"> await api_fieldpermit.get_columns_permit(
            entityFullName, settings.CurrentUser.id
        )
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> result</pre>
</div>
<p>因为对客户信息的实体类，我们在数据库的表中配置的记录如下所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202501/8867-20250103154920647-1825850138.png" alt="" width="854" height="172" loading="lazy"></p>
<p>根据实体类全称和字段名称，以及对应该用户的角色ID，我们就能唯一确定该字段的权限了。</p>
<p>因此我们在自定义的表格数据对象中，设置返回的单元格值进行控制处理即可进行脱敏处理了。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202501/8867-20250103155346176-1520240714.png" alt="" width="847" height="726" loading="lazy"></p>
<p>由于我们的表格数据默认就是只读的，因此只需要判断隐藏的进行脱敏处理即可。</p>
<p>通过上面的控制，就可以实现列表中对字段的统一控制处理了。对于不同的业务表对象，都不需要单独的进行设置，已经在基类统一处理相关的逻辑了。</p>
<p>&nbsp;</p>
<h3>3、字段权限的显示窗体控制处理</h3>
<p>如果在开发界面的时候，把列表的展示统一放在wx.Grid列表控件进行展示，不再独立设计展示窗体，那么上面列表控制就已经达到了字段权限的控制目的了：可见或不可见、可编辑或只读等处理。</p>
<p>在我的wxpython开发框架中，我一般倾向于设计一个界面来展示业务对象的内容，一般新增，查看或者编辑都放在这个窗体上展示信息，比较直观，那么这种对字段权限的控制也需要延伸到这个显示窗体上；&nbsp;</p>
<p>对于普通的编辑控件，我们只能控制控件的可读写、可见与否的处理。为了避免重复对字段权限的请求，我们在列表界面请求获得的字段权限列表，可以传递给新增、编辑对话框界面，如下代码是在子类列表界面，打开新增、编辑对话框的时候进行的处理。</p>
<div class="cnblogs_code">
<pre>    async <span style="color: rgba(0, 0, 255, 1)">def</span> OnEditById(self, entity_id: Any |<span style="color: rgba(0, 0, 0, 1)"> str):
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">子类重写-根据主键值打开编辑对话框</span><span style="color: rgba(128, 0, 0, 1)">"""</span>
        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 使用列表窗体获得的字段权限</span>
        dlg = FrmCustomerEdit(self, entity_id, <span style="color: rgba(255, 0, 0, 1)"><strong>columns_permit=</strong></span><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)"><strong>self.columns_permit</strong></span>)
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> if dlg.ShowModal() == wx.ID_OK:</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> await AsyncShowDialogModal(dlg) ==<span style="color: rgba(0, 0, 0, 1)"> wx.ID_OK:</span>
            <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 更新grid列表数据</span>
<span style="color: rgba(0, 0, 0, 1)">            await self.update_grid()
        dlg.Destroy()</span></pre>
</div>
<p>可以看到，已经对字段权限的字典对象进行了传递，方便使用，避免重复请求了。</p>
<p>一般常规的新增、编辑界面，我们对它们也是进行了基类的封装处理，以便对界面元素进行更好的统一控制。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202501/8867-20250103155943754-1070327916.png" alt="" loading="lazy"></p>
<p>&nbsp;详细的基类设计如下所示，如对于客户信息的新增、编辑对话框，关系图如下所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202501/8867-20250103160029091-1270264290.png" alt="" width="311" height="344" loading="lazy"></p>
<p>&nbsp;由于新增/编辑对话框中，往往使用我们自定义的控件进行处理，因此在自定义控件中，可以再初始化函数的时候，添加一个&nbsp;permit 的属性字段，然后进行判断控件的处理即可。</p>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 字段权限，默认0表示不限制，1表示只读，2 隐藏</span>
        self.permit =<span style="color: rgba(0, 0, 0, 1)"> permit
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> permit == 2<span style="color: rgba(0, 0, 0, 1)">:
            self.Hide()  </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 隐藏</span>
        <span style="color: rgba(0, 0, 255, 1)">elif</span> permit == 1<span style="color: rgba(0, 0, 0, 1)">:
            self.ReadOny()  </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 只读</span>
        <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
            </span><span style="color: rgba(0, 0, 255, 1)">pass</span>  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 不限制</span></pre>
</div>
<p>而对于非自定义的控件，我们就需要再外部初始化的时候，对它们进行一些额外的处理控制显示了。</p>
<div class="cnblogs_code">
<pre>    age_permit = self.columns_permit.get(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">age</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, 0)
    self.txtAge </span>= wx.SpinCtrl(panel, permit=<span style="color: rgba(0, 0, 0, 1)">age_permit)
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> age_permit == 2<span style="color: rgba(0, 0, 0, 1)">:
        self.txtAge.Hide()  </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 隐藏</span>
    <span style="color: rgba(0, 0, 255, 1)">elif</span> age_permit == 1<span style="color: rgba(0, 0, 0, 1)">:
        self.txtAge.Disable()  </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 只读</span></pre>
</div>
<p>&nbsp;那么用户对应客户信息模块的年龄字段可以看到，但是不能编辑。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202412/8867-20241231131451933-664693205.png" alt="" width="739" height="518" loading="lazy"></p>
<p>由于新增、编辑界面是属于子类完全自定义控件和展示的逻辑，因此无法在基类统一进行处理，但是可以通过自定义控件的方式，减少过多的干预处理。</p>
<p>对于列表界面，则是 可以进行统一的字段的控制展示，比较一致。</p>
<p>以上就是字段权限的设计思路，实现控制过程，这样我们在权限里面实现了<strong>功能权限、菜单权限、数据记录权限、字段权限的综合控制</strong>，基本上能够满足大多数业务规则的要求了，从而提高了权限管理系统在整个应用开发中的通用性、便利性，一致性。</p>
<p>&nbsp;</p>
</div>
<div id="MySignature" role="contentinfo">
    <div style="border-right-color: #cccccc; border-right-width: 1px; border-right-style: solid; padding-right: 5px; border-top-color: #cccccc; border-top-width: 1px; border-top-style: solid; padding-left: 4px; font-size: 13px; padding-bottom: 4px; border-left-color: #cccccc; border-left-width: 1px; border-left-style: solid; width: 98%; padding-top: 4px; border-bottom-color: #cccccc; border-bottom-width: 1px; border-bottom-style: solid; background-color: #eeeeee;">
    <img src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif" align="top" alt="">
    <span style="color: #000000"><span class="Apple-tab-span" style="white-space: pre"></span>
     专注于代码生成工具、.Net/.NetCore 框架架构及软件开发，以及各种Vue.js的前端技术应用。著有Winform开发框架/混合式开发框架、微信开发框架、Bootstrap开发框架、ABP开发框架、SqlSugar开发框架等框架产品。
     <br>&nbsp;&nbsp;转载请注明出处：撰写人：伍华聪&nbsp;&nbsp;<a href="http://www.iqidi.com/" target="_blank">http://www.iqidi.com</a>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span></div>
</div>
<div class="clear"></div>

        </div>
        <p class="postfoot">
            posted on 
<span id="post-date" data-last-update-days="0.005812632670138889" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-03 16:11">2025-01-03 16:11</span>&nbsp;
<a href="https://www.cnblogs.com/wuhuacong">伍华聪</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18643766" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18643766);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18643766', targetLink: 'https://www.cnblogs.com/wuhuacong/p/18643766', title: 'WxPython跨平台开发框架之模块字段权限的管理' })">举报</a>

        </p>
    