
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/liyongqiang-cc/p/18737994" title="发布于 2025-03-11 11:20">
    <span role="heading" aria-level="2">.NET Core 中如何实现缓存的预热？</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在构建高性能的 .NET Core 应用时，缓存是提升系统响应速度、减轻数据库压力的利器。然而，缓存并非一蹴而就，它也需要“热身”才能发挥最佳性能。这就是缓存预热的意义所在。</p>
<h3 id="一什么是缓存预热">一、什么是缓存预热？</h3>
<p>缓存预热，顾名思义，就是在系统启动或缓存失效后，主动将热点数据加载到缓存中，避免用户首次请求时直接访问数据库，造成性能瓶颈。</p>
<h3 id="二为什么需要缓存预热">二、为什么需要缓存预热？</h3>
<ul>
<li><strong>提升用户体验:</strong>  缓存预热可以避免用户首次访问时出现延迟，提升用户体验。</li>
<li><strong>降低数据库压力:</strong>  缓存预热可以将数据库的访问压力分散到系统启动阶段，避免高峰期数据库过载。</li>
<li><strong>提高系统稳定性:</strong>  缓存预热可以避免缓存击穿和缓存雪崩等问题，提高系统稳定性。</li>
</ul>
<h3 id="三net-core-中实现缓存预热的方式">三、.NET Core 中实现缓存预热的方式</h3>
<p>.NET Core 提供了多种缓存机制，例如内存缓存、分布式缓存等。我们可以根据不同的缓存类型，选择不同的预热方式。</p>
<h4 id="1-内存缓存预热">1. 内存缓存预热</h4>
<ul>
<li><strong>启动时预热:</strong>  在 <code>Startup.cs</code> 文件的 <code>Configure</code> 方法中，通过 <code>IHostApplicationLifetime</code> 接口注册应用启动事件，在应用启动时加载数据到内存缓存中。</li>
</ul>
<pre><code class="language-csharp">public void Configure(IApplicationBuilder app, IHostApplicationLifetime lifetime)
{
    lifetime.ApplicationStarted.Register(() =&gt;
    {
        var cache = app.ApplicationServices.GetService&lt;IMemoryCache&gt;();
        // 从数据库加载热点数据
        var hotData = GetHotDataFromDatabase();
        // 将数据存入缓存
        cache.Set("HotData", hotData);
    });
}
</code></pre>
<ul>
<li><strong>定时任务预热:</strong>  使用 <code>IHostedService</code> 接口创建后台服务，定时从数据库加载数据到内存缓存中。</li>
</ul>
<pre><code class="language-csharp">public class CacheWarmupService : IHostedService, IDisposable
{
    private readonly IMemoryCache _cache;
    private Timer _timer;

    public CacheWarmupService(IMemoryCache cache)
    {
        _cache = cache;
    }

    public Task StartAsync(CancellationToken cancellationToken)
    {
        _timer = new Timer(DoWork, null, TimeSpan.Zero, TimeSpan.FromMinutes(10));
        return Task.CompletedTask;
    }

    private void DoWork(object state)
    {
        // 从数据库加载热点数据
        var hotData = GetHotDataFromDatabase();
        // 将数据存入缓存
        _cache.Set("HotData", hotData);
    }

    public Task StopAsync(CancellationToken cancellationToken)
    {
        _timer?.Change(Timeout.Infinite, 0);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
</code></pre>
<h4 id="2-分布式缓存预热">2. 分布式缓存预热</h4>
<ul>
<li><strong>启动时预热:</strong>  与内存缓存类似，可以在应用启动时加载数据到分布式缓存中。</li>
</ul>
<pre><code class="language-csharp">public void Configure(IApplicationBuilder app, IHostApplicationLifetime lifetime)
{
    lifetime.ApplicationStarted.Register(() =&gt;
    {
        var cache = app.ApplicationServices.GetService&lt;IDistributedCache&gt;();
        // 从数据库加载热点数据
        var hotData = GetHotDataFromDatabase();
        // 将数据存入缓存
        cache.SetString("HotData", JsonConvert.SerializeObject(hotData));
    });
}
</code></pre>
<ul>
<li><strong>独立服务预热:</strong>  可以创建一个独立的服务，专门负责从数据库加载数据到分布式缓存中，其他应用通过调用该服务的接口实现缓存预热。</li>
</ul>
<h3 id="四缓存预热的注意事项">四、缓存预热的注意事项</h3>
<ul>
<li><strong>预热数据的选择:</strong>  并非所有数据都适合预热，应该选择访问频率高、计算成本高的热点数据进行预热。</li>
<li><strong>预热时机的选择:</strong>  缓存预热应该选择合适的时机，避免影响系统正常服务。</li>
<li><strong>预热策略的优化:</strong>  可以根据业务场景和数据特点，设计不同的预热策略，例如全量预热、增量预热等。</li>
</ul>
<h3 id="五总结">五、总结</h3>
<p>缓存预热是提升 .NET Core 应用性能的重要手段。通过合理的预热策略，可以有效提升用户体验、降低数据库压力、提高系统稳定性。希望本文能帮助你更好地理解和应用缓存预热技术。<br>
<img src="https://img2024.cnblogs.com/blog/2063798/202503/2063798-20250311112043166-1285222781.png" alt="" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.3839832641585648" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-11 11:21">2025-03-11 11:20</span>&nbsp;
<a href="https://www.cnblogs.com/liyongqiang-cc">代码拾光</a>&nbsp;
阅读(<span id="post_view_count">174</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18737994" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18737994);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18737994', targetLink: 'https://www.cnblogs.com/liyongqiang-cc/p/18737994', title: '.NET Core 中如何实现缓存的预热？' })">举报</a>
</div>
        