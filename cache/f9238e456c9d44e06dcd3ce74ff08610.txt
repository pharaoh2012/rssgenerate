
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18647897" title="发布于 2025-01-02 15:35">
    <span role="heading" aria-level="2">manim边做边学--动画轨迹</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>本篇介绍<code>Manim</code>中两个和动画轨迹相关的类，<code>AnimatedBoundary</code>和<code>TracedPath</code>。</p>
<p><code>AnimatedBoundary</code>聚焦于图形边界的动态呈现，能精准控制边界绘制的每一帧，助力我们清晰展示几何图形的搭建流程。</p>
<p><code>TracedPath</code>则擅长实时追踪物体或点的运动轨迹，以直观且动态的方式呈现各类运动路径，为我们分析和展示复杂运动提供了强大支持 。</p>
<h1 id="1-动画概述">1. 动画概述</h1>
<h2 id="11-animatedboundary">1.1. AnimatedBoundary</h2>
<p>在讲解几何图形（如多边形、圆形等）的构造过程时，<code>AnimatedBoundary</code>可以逐帧展示图形边界的绘制，帮助我们理解图形是如何一步步形成的。</p>
<p>此外，当图形的边界随着某个参数或条件动态变化时，使用 <code>AnimatedBoundary</code> 也可以生动地呈现这种变化。</p>
<p><code>AnimatedBoundary</code>动画的主要特点在于图形边界的绘制，它能够精确控制边界的出现顺序和方式。</p>
<p>这使得在展示几何图形的构建过程时，能够突出边界这一关键元素，更清楚地展示图形的轮廓是如何形成的。</p>
<p>它的参数主要有：</p>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>vmobject</td>
<td>VMobject</td>
<td>要应用动画边界的 <code>VMobject</code></td>
</tr>
<tr>
<td>colors</td>
<td>[Color]</td>
<td>颜色列表，用于指定边界颜色变化的序列</td>
</tr>
<tr>
<td>max_stroke_width</td>
<td>int</td>
<td>最大描边宽度</td>
</tr>
<tr>
<td>cycle_rate</td>
<td>float</td>
<td>颜色循环速率</td>
</tr>
<tr>
<td>back_and_forth</td>
<td>bool</td>
<td>是否来回循环颜色变化</td>
</tr>
<tr>
<td>draw_rate_func</td>
<td>func</td>
<td>用于控制绘制速率的函数</td>
</tr>
<tr>
<td>fade_rate_func</td>
<td>func</td>
<td>用于控制淡出速率的函数</td>
</tr>
</tbody>
</table>
<h2 id="12-tracedpath">1.2. TracedPath</h2>
<p>在物理学或数学中，当需要展示物体的运动轨迹时，<code>TracedPath</code> 是一个非常合适的工具。</p>
<p>例如，展示抛体运动、圆周运动等物体的运动路径时，能让我们直观地看到物体在空间中的运动轨迹。</p>
<p>此外，对于函数图像的绘制，也可使用 <code>TracedPath</code> 来模拟绘图过程，展示函数曲线是如何随着自变量的变化而逐步生成的。</p>
<p>这在演示函数的性质和图像绘制方法时非常有用，能够帮助学生更好地理解函数的变化规律。</p>
<p><code>TracedPath</code>动画的主要特点是能够实时跟踪物体或点的运动轨迹，并将其以动画的形式呈现出来。</p>
<p>这种实时跟踪的特性使得动画更加真实、生动，能够准确地反映物体的运动状态。</p>
<p>它的参数主要有：</p>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>traced_point_func</td>
<td>func</td>
<td>要跟踪的函数，该函数应返回一个点的坐标</td>
</tr>
<tr>
<td>stroke_width</td>
<td>float</td>
<td>轨迹的线条宽度</td>
</tr>
<tr>
<td>stroke_color</td>
<td>Color</td>
<td>轨迹的颜色</td>
</tr>
<tr>
<td>dissipating_time</td>
<td>float</td>
<td>路径消散所需的时间</td>
</tr>
</tbody>
</table>
<p>当<code>dissipating_time</code>参数为<code>None</code>时，表示路径轨迹不消散。</p>
<p><code>TracedPath</code>还有一个方法：</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>update_path</td>
<td>用于更新轨迹路径的方法，通常在动画过程中被调用，以实时跟踪点的移动并更新轨迹</td>
</tr>
</tbody>
</table>
<h1 id="2-使用示例">2. 使用示例</h1>
<p>下面通过几个根据实际应用场景简化而来的示例来演示两个动画类的使用。</p>
<h2 id="21-多边形绘制">2.1. 多边形绘制</h2>
<p>这个示例中，首先创建了一个矩形多边形，然后使用 <code>AnimatedBoundary</code> 为其添加边界动画，</p>
<p>颜色在<strong>蓝色</strong>、<strong>绿色</strong>、<strong>黄色</strong>之间循环变化，循环速率为 <code>3</code>，突出展示多边形边界的绘制动画。</p>
<pre><code class="language-python">polygon = Polygon(
    [-2, -1, 0],
    [2, -1, 0],
    [2, 1, 0],
    [-2, 1, 0],
)
boundary = AnimatedBoundary(
    polygon,
    colors=[BLUE, GREEN, YELLOW],
    cycle_rate=3,
)
self.add(polygon, boundary)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202501/83005-20250102153444441-1055785440.gif" alt="" loading="lazy"></p>
<h2 id="22-动态更新圆形边界">2.2. 动态更新圆形边界</h2>
<p>先创建了一个圆形，其边界的颜色在<strong>红色</strong>，<strong>黄色</strong>和<strong>绿色</strong>之间循环，循环速率为 2。</p>
<p>然后通过动画将圆形的半径放大 <code>2</code> 倍，展示了圆形边界在动态变化过程中的动画效果。</p>
<pre><code class="language-python">circle = Circle(radius=1)
boundary = AnimatedBoundary(
    circle,
    colors=[RED, YELLOW, GREEN],
    cycle_rate=2,
)
self.add(circle, boundary)
self.play(circle.animate.scale(2), run_time=3)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202501/83005-20250102153444475-1095315189.gif" alt="" loading="lazy"></p>
<h2 id="23-跟踪抛体运动轨迹">2.3. 跟踪抛体运动轨迹</h2>
<p>首先定义一个抛体运动的函数 <code>move_path</code>，再创建了一个点 <code>Dot</code> 和一个 <code>TracedPath</code> 对象来跟踪点的运动轨迹。</p>
<p>轨迹颜色为<strong>绿色</strong>，宽度为 <code>3</code>，展示了抛体运动的轨迹跟踪效果。</p>
<pre><code class="language-python">d = Dot().shift(LEFT * 2)
trace = TracedPath(
    d.get_center,
    stroke_color=GREEN,
    stroke_width=3,
)
self.add(d, trace)

def move_path(t):
    x = t
    y = 2 - 0.5 * t**2
    return np.array([x, y, 0])

f = ParametricFunction(
    move_path,
    t_range=(-3, 3),
)
self.play(MoveAlongPath(d, f), run_time=3)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202501/83005-20250102153444412-769472895.gif" alt="" loading="lazy"></p>
<h2 id="24-函数图像绘制过程">2.4. 函数图像绘制过程</h2>
<p>这个示例中，定义了一个正弦函数 <code>move_path</code>，再创建一个点沿着这个正弦函数图像运动，同时创建了一个 <code>TracedPath</code> 对象来跟踪函数图像的绘制过程。</p>
<p>轨迹颜色为<strong>紫色</strong>，宽度为 <code>2</code>，且设置轨迹在<code>1</code>秒后消失。</p>
<pre><code class="language-python">d = Dot(color=BLUE).shift([-PI, 0, 0])
trace = TracedPath(
    d.get_center,
    stroke_color=PURPLE,
    stroke_width=2,
    dissipating_time=1,
)
self.add(d, trace)

def move_path(x):
    return np.array([x, np.sin(x), 0])

f = ParametricFunction(move_path, t_range=(-PI, PI))
self.play(MoveAlongPath(d, f), run_time=3)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202501/83005-20250102153444421-551950609.gif" alt="" loading="lazy"></p>
<h1 id="3-附件">3. 附件</h1>
<p>文中的代码只是关键部分的截取，完整的代码共享在网盘中（<code>trace.py</code>），</p>
<p>下载地址: <a href="https://url11.ctfile.com/d/45455611-64223578-4fb7ee?p=6872" target="_blank" rel="noopener nofollow">完整代码</a> (访问密码: 6872)</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.03097160111574074" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-02 15:35">2025-01-02 15:35</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">16</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18647897" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18647897);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18647897', targetLink: 'https://www.cnblogs.com/wang_yb/p/18647897', title: 'manim边做边学--动画轨迹' })">举报</a>
</div>
        