
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/niceWk/p/18978194" title="发布于 2025-07-11 08:39">
    <span role="heading" aria-level="2">Rust修仙之道 第十一章 构型境 · 设计模式之道</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="第十一章构型境--设计模式之道">第十一章：构型境 · 设计模式之道</h2>
<blockquote>
<p><em>“千术可构，格局需明；结构得法，道可延年。”</em></p>
</blockquote>
<p>顾行云正式承担“魂核驱动阵”的重构之任，发现需求纷繁、参数繁多、状态变化复杂。传统术式难以胜任，他遂投身于构型殿修行，悟得三种典范设计法术。</p>
<h3 id="一建造之术--builder-pattern">一、建造之术 · Builder Pattern</h3>
<p><em>用于灵术属性繁多、创建步骤复杂的情况</em></p>
<h4 id="症状构建灵器时参数众多混乱">症状：构建灵器时参数众多、混乱：</h4>
<pre><code class="language-rust">let blade = SoulBlade {
    name: String::from("斩灵"),
    element: Some(Element::Fire),
    weight: None,
    enchant_level: Some(3),
};
</code></pre>
<blockquote>
<p>太难维护，灵力失衡……</p>
</blockquote>
<h4 id="builder-解法">Builder 解法：</h4>
<pre><code class="language-rust">struct SoulBlade {
    name: String,
    element: Option&lt;Element&gt;,
    enchant_level: Option&lt;u32&gt;,
}

struct SoulBladeBuilder {
    blade: SoulBlade,
}

impl SoulBladeBuilder {
    fn new(name: &amp;str) -&gt; Self {
        Self { blade: SoulBlade {
            name: name.to_string(),
            element: None,
            enchant_level: None,
        }}
    }
    fn element(mut self, e: Element) -&gt; Self {
        self.blade.element = Some(e);
        self
    }
    fn enchant_level(mut self, lv: u32) -&gt; Self {
        self.blade.enchant_level = Some(lv);
        self
    }
    fn build(self) -&gt; SoulBlade {
        self.blade
    }
}
</code></pre>
<p>使用：</p>
<pre><code class="language-rust">let blade = SoulBladeBuilder::new("焰牙")
    .element(Element::Fire)
    .enchant_level(2)
    .build();
</code></pre>
<blockquote>
<p>“构建之术，柔中带钢；既可明确流程，又不扰主结构。”</p>
</blockquote>
<h3 id="二策略之术--strategy-pattern">二、策略之术 · Strategy Pattern</h3>
<p><em>用于行为可变、规则常换的灵法模块</em></p>
<p>顾行云设计“伤害计算系统”，不同灵兽使用不同算法：</p>
<pre><code class="language-rust">trait DamageStrategy {
    fn calculate(&amp;self, base: u32) -&gt; u32;
}

struct FireDamage;
impl DamageStrategy for FireDamage {
    fn calculate(&amp;self, base: u32) -&gt; u32 { base + 20 }
}

struct IceDamage;
impl DamageStrategy for IceDamage {
    fn calculate(&amp;self, base: u32) -&gt; u32 { base + 10 }
}
</code></pre>
<p>召唤统一接口：</p>
<pre><code class="language-rust">fn apply_damage(s: &amp;dyn DamageStrategy, base: u32) {
    println!("最终伤害：{}", s.calculate(base));
}
</code></pre>
<blockquote>
<p>“策略可换，接口不改。既统则固，可换则柔。”</p>
</blockquote>
<h3 id="三状态之术--state-pattern">三、状态之术 · State Pattern</h3>
<p><em>适用于灵器/咒术状态多变、切换行为不同之术</em></p>
<p>顾行云构建“法术卷轴”，可处于三种状态：<strong>未解封、激活中、冷却中</strong></p>
<p>设计如下：</p>
<pre><code class="language-rust">trait ScrollState {
    fn use_scroll(&amp;self) -&gt; Box&lt;dyn ScrollState&gt;;
}

struct Sealed;
struct Active;
struct Cooldown;

impl ScrollState for Sealed {
    fn use_scroll(&amp;self) -&gt; Box&lt;dyn ScrollState&gt; {
        println!("解封卷轴！");
        Box::new(Active)
    }
}

impl ScrollState for Active {
    fn use_scroll(&amp;self) -&gt; Box&lt;dyn ScrollState&gt; {
        println!("施术完成，进入冷却。");
        Box::new(Cooldown)
    }
}

impl ScrollState for Cooldown {
    fn use_scroll(&amp;self) -&gt; Box&lt;dyn ScrollState&gt; {
        println!("卷轴冷却中，无法使用。");
        Box::new(Cooldown)
    }
}

struct SpellScroll {
    state: Box&lt;dyn ScrollState&gt;,
}

impl SpellScroll {
    fn new() -&gt; Self {
        Self { state: Box::new(Sealed) }
    }
    fn activate(&amp;mut self) {
        self.state = self.state.use_scroll();
    }
}
</code></pre>
<blockquote>
<p>“术随境迁，道应时通。”</p>
</blockquote>
<h3 id="构型心法">构型心法</h3>
<blockquote>
<p><em>术有形者，必有格局；格局清明者，方可纳万变。</em></p>
</blockquote>
<hr>
<h2 id="️-上一章下一章-待续️">⬅️ <a href="https://www.cnblogs.com/niceWk/p/18977621" target="_blank">上一章</a>　　　　　　　　　　　　[下一章 待续➡️]</h2>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.005555555555555556" data-date-updated="2025-07-11 08:47">2025-07-11 08:39</span>&nbsp;
<a href="https://www.cnblogs.com/niceWk">NiceWk</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18978194);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18978194', targetLink: 'https://www.cnblogs.com/niceWk/p/18978194', title: 'Rust修仙之道 第十一章 构型境 &amp;#183; 设计模式之道' })">举报</a>
</div>
        