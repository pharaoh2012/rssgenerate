
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/qiuzhendezhen/p/18952812" title="发布于 2025-06-27 18:03">
    <span role="heading" aria-level="2">Kamailio SIP+RTP双网卡SBC呼叫流程与媒体处理说明</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div class="lake-content">
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2500940/202506/2500940-20250627180248423-1450533193.jpg" class="lazyload"></p>
<p>&nbsp;</p>
<p id="u08a4c9ba" class="ne-p"><span class="ne-text">本文档旨在详细解释基于提供的 <code class="ne-code"><span class="ne-text">kamailio_sbc_dual_nic.cfg</span></code><span class="ne-text"> 配置文件，在双网卡SBC（Session Border Controller）场景下，Kamailio (5.8.3) 如何与rtpengine协同工作，处理SIP信令以及音频、视频和RTCP媒体流的转发。该方案利用dispatcher模块实现对公网和私网多网关的负载均衡。</span></span></p>
<h2 id="AbFtv"><span class="ne-text">1. 系统概览</span></h2>
<p id="u008f3eca" class="ne-p"><span class="ne-text">核心组件包括：</span></p>
<ul class="ne-ul">
<li id="u48183f3a" data-lake-index-type="0"><strong>Kamailio (5.8.3)</strong><span class="ne-text">：作为SIP信令服务器，负责处理呼叫路由、负载均衡和与rtpengine的交互。</span></li>
<li id="ua954a357" data-lake-index-type="0"><strong>rtpengine (mr13.1.1.6)</strong><span class="ne-text">：作为媒体代理，负责处理RTP/RTCP媒体流的转发、NAT穿透（本场景为无NAT，但rtpengine仍管理媒体端口和IP）、以及可能的媒体处理（如编解码转换，本例未重点配置）。rtpengine配置为双网卡模式，拥有公网和私网IP接口。</span></li>
<li id="uce437277" data-lake-index-type="0"><strong>Dispatcher模块</strong><span class="ne-text">：Kamailio内置模块，用于将呼叫分发到公网或私网的多个目标网关，实现负载均衡和高可用性。</span></li>
</ul>
<p id="u57aaa10c" class="ne-p"><span class="ne-text">Kamailio监听其公网IP和私网IP上的SIP请求。rtpengine通过NG协议与Kamailio在本地回环地址通信。</span></p>
<h2 id="n69nC"><span class="ne-text">2. 呼叫流程：公网用户呼叫私网用户/网关</span></h2>
<p id="u31483cf6" class="ne-p"><span class="ne-text">假设一个公网SIP用户通过互联网呼叫一个位于私网的企业IP-PBX分机或私网网关。</span></p>
<ol class="ne-ol">
<li id="u59794c54" data-lake-index-type="0"><strong>INVITE请求到达Kamailio公网接口</strong><span class="ne-text">：</span></li>
</ol>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="u136063a7" data-lake-index-type="0"><span class="ne-text">公网用户发送SIP INVITE请求，目标是Kamailio的公网IP地址（例如 <code class="ne-code"><span class="ne-text">PUBLIC_IP:5060</span></code><span class="ne-text">）。SDP中包含公网用户的媒体信息（IP和端口）。</span></span></li>
<li id="uf8ecc02a" data-lake-index-type="0"><span class="ne-text">Kamailio的<code class="ne-code"><span class="ne-text">request_route</span></code><span class="ne-text">首先执行通用检查（Max-Forwards, Sanity Checks）。</span></span></li>
<li id="ubf0aa58c" data-lake-index-type="0"><span class="ne-text">通过<code class="ne-code"><span class="ne-text">if ($Ri == "PUBLIC_IP")</span></code><span class="ne-text">判断请求来自公网接口，进入<code class="ne-code"><span class="ne-text">route[FROM_PUBLIC]</span></code><span class="ne-text">逻辑。</span></span></span></li>
</ul>
</ul>
<ol class="ne-ol" start="2">
<li id="u78de10bb" data-lake-index-type="0"><strong>选择私网目标网关 (Dispatcher)</strong><span class="ne-text">：</span></li>
</ol>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="u383aed17" data-lake-index-type="0"><span class="ne-text">在<code class="ne-code"><span class="ne-text">route[FROM_PUBLIC]</span></code><span class="ne-text">中，调用<code class="ne-code"><span class="ne-text">ds_select_dst("2", DS_ALGORITHM_PRIVATE)</span></code><span class="ne-text">。这会从预定义的私网网关组（Set ID 2，例如 <code class="ne-code"><span class="ne-text">/etc/kamailio/dispatcher_private.list</span></code><span class="ne-text"> 中定义的网关）中根据指定算法（例如轮询）选择一个可用的私网网关。</span></span></span></span></li>
<li id="u340d025d" data-lake-index-type="0"><span class="ne-text">如果选择失败（没有可用网关），则回复<code class="ne-code"><span class="ne-text">503 Service Unavailable</span></code><span class="ne-text">。</span></span></li>
<li id="ub2bd84df" data-lake-index-type="0"><span class="ne-text">选中的私网网关URI被存入<code class="ne-code"><span class="ne-text">$du</span></code><span class="ne-text">。</span></span></li>
</ul>
</ul>
<ol class="ne-ol" start="3">
<li id="u41dbec57" data-lake-index-type="0"><strong>rtpengine处理媒体协商 (Offer)</strong><span class="ne-text">：</span></li>
</ol>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="u7ae7edcf" data-lake-index-type="0"><span class="ne-text">如果INVITE请求中包含SDP (<code class="ne-code"><span class="ne-text">has_body("application/sdp")</span></code><span class="ne-text">)，则调用<code class="ne-code"><span class="ne-text">rtpengine_manage(RTPENGINE_COMMON_FLAGS + " direction=public direction=private")</span></code><span class="ne-text">。</span></span></span></li>
</ul>
</ul>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="uc1e5c196" data-lake-index-type="0"><code class="ne-code"><span class="ne-text">RTPENGINE_COMMON_FLAGS</span></code><span class="ne-text"> 通常包含 <code class="ne-code"><span class="ne-text">trust-address replace-origin replace-session-connection RTP/AVP rtcp-mux-offer</span></code><span class="ne-text"> 等。</span></span></li>
<li id="uf4810fda" data-lake-index-type="0"><span class="ne-text">关键在于<code class="ne-code"><span class="ne-text">direction=public direction=private</span></code><span class="ne-text">：这个flag指示rtpengine，对于这个呼叫的“对端”（即私网侧），应该使用rtpengine配置的“私网”接口来分配媒体端口和宣告IP地址。而对于“本端”（即公网用户侧），rtpengine会使用其“公网”接口。</span></span></li>
</ul>
</ul>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="u1a1c8be3" data-lake-index-type="0"><span class="ne-text">rtpengine收到指令后：</span></li>
</ul>
</ul>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="ufd671fc0" data-lake-index-type="0"><span class="ne-text">在<strong>私网接口</strong><span class="ne-text">上为私网网关分配RTP/RTCP端口（例如 <code class="ne-code"><span class="ne-text">PRIVATE_RTPENGINE_IP:port_private</span></code><span class="ne-text">）。</span></span></span></li>
<li id="uee9ffc87" data-lake-index-type="0"><span class="ne-text">在<strong>公网接口</strong><span class="ne-text">上为公网用户分配RTP/RTCP端口（例如 <code class="ne-code"><span class="ne-text">PUBLIC_RTPENGINE_IP:port_public</span></code><span class="ne-text">）。</span></span></span></li>
<li id="u8a2402b4" data-lake-index-type="0"><span class="ne-text">修改INVITE中的SDP：将<code class="ne-code"><span class="ne-text">o=</span></code><span class="ne-text">行和会话级<code class="ne-code"><span class="ne-text">c=</span></code><span class="ne-text">行中的IP地址替换为rtpengine的<strong>公网接口IP</strong><span class="ne-text"> (<code class="ne-code"><span class="ne-text">PUBLIC_RTPENGINE_IP</span></code><span class="ne-text">)，并将媒体端口替换为rtpengine在公网接口上分配的端口 (<code class="ne-code"><span class="ne-text">port_public</span></code><span class="ne-text">)。这个修改后的SDP将发往公网用户（在最终的200 OK中）。</span></span></span></span></span></span></li>
<li id="u87d8d5d8" data-lake-index-type="0"><span class="ne-text">rtpengine内部记录媒体流的映射关系：<code class="ne-code"><span class="ne-text">PUBLIC_RTPENGINE_IP:port_public</span></code><span class="ne-text"> &lt;-&gt; <code class="ne-code"><span class="ne-text">PRIVATE_RTPENGINE_IP:port_private</span></code><span class="ne-text">。</span></span></span></li>
</ul>
</ul>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="u18938719" data-lake-index-type="0"><span class="ne-text">如果<code class="ne-code"><span class="ne-text">rtpengine_manage</span></code><span class="ne-text">失败，回复<code class="ne-code"><span class="ne-text">500 Media Proxy Error</span></code><span class="ne-text">。</span></span></span></li>
</ul>
</ul>
<ol class="ne-ol" start="4">
<li id="uddfb9036" data-lake-index-type="0"><strong>转发INVITE到私网网关</strong><span class="ne-text">：</span></li>
</ol>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="ue9fc2f91" data-lake-index-type="0"><span class="ne-text">Kamailio通过<code class="ne-code"><span class="ne-text">t_set_destination_uri($du)</span></code><span class="ne-text">设置请求的目标为选中的私网网关。</span></span></li>
<li id="u77475126" data-lake-index-type="0"><code class="ne-code"><span class="ne-text">record_route()</span></code><span class="ne-text">确保后续请求（如ACK, BYE）经过Kamailio。</span></li>
<li id="uda2b68ed" data-lake-index-type="0"><span class="ne-text">Kamailio通过<code class="ne-code"><span class="ne-text">t_relay()</span></code><span class="ne-text">将带有rtpengine修改后SDP（此时SDP中的媒体地址是rtpengine的公网地址，这是发往私网网关的INVITE中SDP的视角，它应该宣告rtpengine的私网地址给私网网关）的INVITE请求转发给选定的私网网关。</span></span></li>
</ul>
</ul>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="ud3164052" data-lake-index-type="0"><strong>更正与澄清</strong><span class="ne-text">：当<code class="ne-code"><span class="ne-text">rtpengine_manage</span></code><span class="ne-text">在<code class="ne-code"><span class="ne-text">route[FROM_PUBLIC]</span></code><span class="ne-text">中为发往私网的INVITE处理SDP时，它修改的SDP内容是准备给私网对端的。因此，SDP中的c=行和媒体端口应该是rtpengine的<strong>私网接口IP和端口</strong><span class="ne-text">。rtpengine知道呼叫的另一端（公网用户）的媒体信息，并将使用其公网接口与公网用户通信。</span></span></span></span></li>
</ul>
</ul>
<ol class="ne-ol" start="5">
<li id="u406cce3a" data-lake-index-type="0"><strong>私网网关响应 (例如200 OK)</strong><span class="ne-text">：</span></li>
</ol>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="uceba2330" data-lake-index-type="0"><span class="ne-text">私网网关处理INVITE，并回复一个包含其自身媒体信息（私网IP和端口）的200 OK。</span></li>
<li id="u50dea2ec" data-lake-index-type="0"><span class="ne-text">200 OK通过Kamailio返回（由于Record-Routing）。</span></li>
</ul>
</ul>
<ol class="ne-ol" start="6">
<li id="u0c1df7c1" data-lake-index-type="0"><strong>rtpengine处理媒体协商 (Answer)</strong><span class="ne-text">：</span></li>
</ol>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="u19fe9003" data-lake-index-type="0"><span class="ne-text">Kamailio的<code class="ne-code"><span class="ne-text">onreply_route</span></code><span class="ne-text">捕获到200 OK。</span></span></li>
<li id="uae80a774" data-lake-index-type="0"><span class="ne-text">如果响应中包含SDP，再次调用<code class="ne-code"><span class="ne-text">rtpengine_manage(RTPENGINE_ANSWER_FLAGS + " direction=private direction=public")</span></code><span class="ne-text"> (或者根据保存的呼叫方向上下文确定正确的direction)。</span></span></li>
</ul>
</ul>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="u087533e8" data-lake-index-type="0"><code class="ne-code"><span class="ne-text">direction=private direction=public</span></code><span class="ne-text">仍然适用，因为这是对始于公网、终于私网的呼叫的响应路径。</span></li>
</ul>
</ul>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="ue4c34f5f" data-lake-index-type="0"><span class="ne-text">rtpengine接收到私网网关的SDP，确认媒体参数。它会修改200 OK中的SDP，将其中的媒体IP和端口替换为rtpengine的<strong>公网接口IP和端口</strong><span class="ne-text"> (<code class="ne-code"><span class="ne-text">PUBLIC_RTPENGINE_IP:port_public</span></code><span class="ne-text">)。这个修改后的SDP将发往公网用户。</span></span></span></li>
</ul>
</ul>
<ol class="ne-ol" start="7">
<li id="u35fe0c1c" data-lake-index-type="0"><strong>转发响应给公网用户</strong><span class="ne-text">：</span></li>
</ol>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="u57d42fb4" data-lake-index-type="0"><span class="ne-text">Kamailio将带有rtpengine修改后SDP的200 OK转发给公网用户。</span></li>
</ul>
</ul>
<ol class="ne-ol" start="8">
<li id="ua20438c0" data-lake-index-type="0"><strong>媒体流建立</strong><span class="ne-text">：</span></li>
</ol>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="u34d0ec2a" data-lake-index-type="0"><span class="ne-text">公网用户向<code class="ne-code"><span class="ne-text">PUBLIC_RTPENGINE_IP:port_public</span></code><span class="ne-text">发送RTP/RTCP流。</span></span></li>
<li id="uc5aed40a" data-lake-index-type="0"><span class="ne-text">rtpengine接收到后，根据内部映射，将媒体流从其公网接口转发到其私网接口，并发送给私网网关的媒体地址 <code class="ne-code"><span class="ne-text">PRIVATE_GW_IP:port_gw_private</span></code><span class="ne-text"> (此地址由rtpengine从私网网关的SDP中获知)。</span></span></li>
<li id="u43276b8f" data-lake-index-type="0"><span class="ne-text">反向媒体流：私网网关向<code class="ne-code"><span class="ne-text">PRIVATE_RTPENGINE_IP:port_private</span></code><span class="ne-text">发送RTP/RTCP流。</span></span></li>
<li id="udd7e48aa" data-lake-index-type="0"><span class="ne-text">rtpengine接收到后，转发给公网用户的媒体地址 <code class="ne-code"><span class="ne-text">PUBLIC_USER_IP:port_user_public</span></code><span class="ne-text"> (此地址由rtpengine从公网用户的初始SDP中获知)。</span></span></li>
<li id="u2afb61d9" data-lake-index-type="0"><strong>核心路径</strong><span class="ne-text">：公网用户 &lt;-&gt; rtpengine公网IP &lt;-&gt; rtpengine私网IP &lt;-&gt; 私网网关。</span></li>
</ul>
</ul>
<h2 id="h6hNg"><span class="ne-text">3. 呼叫流程：私网用户/网关呼叫公网用户</span></h2>
<p id="udfb52d3b" class="ne-p"><span class="ne-text">此流程与上述类似，但方向相反。</span></p>
<ol class="ne-ol">
<li id="u4780c839" data-lake-index-type="0"><strong>INVITE请求到达Kamailio私网接口</strong><span class="ne-text">：</span></li>
</ol>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="ue492b8c7" data-lake-index-type="0"><span class="ne-text">来自私网用户/网关，目标是Kamailio的私网IP地址（例如 <code class="ne-code"><span class="ne-text">PRIVATE_IP:5060</span></code><span class="ne-text">）。</span></span></li>
<li id="u7487639a" data-lake-index-type="0"><span class="ne-text">Kamailio通过<code class="ne-code"><span class="ne-text">if ($Ri == "PRIVATE_IP")</span></code><span class="ne-text">判断请求来自私网接口，进入<code class="ne-code"><span class="ne-text">route[FROM_PRIVATE]</span></code><span class="ne-text">逻辑。</span></span></span></li>
</ul>
</ul>
<ol class="ne-ol" start="2">
<li id="u4ad5466c" data-lake-index-type="0"><strong>选择公网目标网关 (Dispatcher)</strong><span class="ne-text">：</span></li>
</ol>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="uc43bbb19" data-lake-index-type="0"><span class="ne-text">调用<code class="ne-code"><span class="ne-text">ds_select_dst("1", DS_ALGORITHM_PUBLIC)</span></code><span class="ne-text">选择公网网关组（Set ID 1）。</span></span></li>
</ul>
</ul>
<ol class="ne-ol" start="3">
<li id="u0684e15b" data-lake-index-type="0"><strong>rtpengine处理媒体协商 (Offer)</strong><span class="ne-text">：</span></li>
</ol>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="u2cf67819" data-lake-index-type="0"><span class="ne-text">调用<code class="ne-code"><span class="ne-text">rtpengine_manage(RTPENGINE_COMMON_FLAGS + " direction=private direction=public")</span></code><span class="ne-text">。</span></span></li>
</ul>
</ul>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="u30039d92" data-lake-index-type="0"><code class="ne-code"><span class="ne-text">direction=private direction=public</span></code><span class="ne-text">指示rtpengine，对于呼叫的“对端”（即公网侧），应使用rtpengine的“公网”接口。对于“本端”（私网用户），使用其“私网”接口。</span></li>
</ul>
</ul>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="u27cdd11d" data-lake-index-type="0"><span class="ne-text">rtpengine在<strong>公网接口</strong><span class="ne-text">分配媒体端口，在<strong>私网接口</strong><span class="ne-text">分配媒体端口。</span></span></span></li>
<li id="u24cacb04" data-lake-index-type="0"><span class="ne-text">修改INVITE中的SDP：将媒体IP和端口替换为rtpengine的<strong>私网接口IP和端口</strong><span class="ne-text">，准备发往公网网关（宣告rtpengine的公网地址）。</span></span></li>
</ul>
</ul>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="ub4d81e93" data-lake-index-type="0"><strong>更正与澄清</strong><span class="ne-text">：当<code class="ne-code"><span class="ne-text">rtpengine_manage</span></code><span class="ne-text">在<code class="ne-code"><span class="ne-text">route[FROM_PRIVATE]</span></code><span class="ne-text">中为发往公网的INVITE处理SDP时，它修改的SDP内容是准备给公网对端的。因此，SDP中的c=行和媒体端口应该是rtpengine的<strong>公网接口IP和端口</strong><span class="ne-text">。</span></span></span></span></li>
</ul>
</ul>
<ol class="ne-ol" start="4">
<li id="u2deb1830" data-lake-index-type="0"><strong>转发INVITE到公网网关</strong><span class="ne-text">。</span></li>
<li id="u01d2d2a4" data-lake-index-type="0"><strong>公网网关响应 (例如200 OK)</strong><span class="ne-text">。</span></li>
<li id="u5d5e4bb2" data-lake-index-type="0"><strong>rtpengine处理媒体协商 (Answer)</strong><span class="ne-text">：</span></li>
</ol>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="u1855c814" data-lake-index-type="0"><span class="ne-text">调用<code class="ne-code"><span class="ne-text">rtpengine_manage(RTPENGINE_ANSWER_FLAGS + " direction=public direction=private")</span></code><span class="ne-text">。</span></span></li>
<li id="ucdd5fe0b" data-lake-index-type="0"><span class="ne-text">rtpengine修改200 OK中的SDP，将其中的媒体IP和端口替换为rtpengine的<strong>私网接口IP和端口</strong><span class="ne-text">，准备发往私网用户/网关。</span></span></li>
</ul>
</ul>
<ol class="ne-ol" start="7">
<li id="uf06b453e" data-lake-index-type="0"><strong>转发响应给私网用户/网关</strong><span class="ne-text">。</span></li>
<li id="uf5842106" data-lake-index-type="0"><strong>媒体流建立</strong><span class="ne-text">：</span></li>
</ol>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="u7268dd29" data-lake-index-type="0"><span class="ne-text">私网用户/网关 &lt;-&gt; rtpengine私网IP &lt;-&gt; rtpengine公网IP &lt;-&gt; 公网网关/用户。</span></li>
</ul>
</ul>
<h2 id="NtHLf"><span class="ne-text">4. rtpengine在媒体处理中的角色</span></h2>
<ul class="ne-ul">
<li id="uf5f99fb0" data-lake-index-type="0"><strong>音视频流 (Audio/Video)</strong><span class="ne-text">：rtpengine通过解析SDP中的<code class="ne-code"><span class="ne-text">m=audio</span></code><span class="ne-text">和<code class="ne-code"><span class="ne-text">m=video</span></code><span class="ne-text">行来识别不同的媒体流。它会为每个媒体流（及其对应的RTCP流）分配端口并进行转发。<code class="ne-code"><span class="ne-text">RTP/AVP</span></code><span class="ne-text"> flag确保了对标准音视频profile的支持。</span></span></span></span></li>
<li id="u2e6c67c0" data-lake-index-type="0"><strong>RTCP流</strong><span class="ne-text">：rtpengine自动处理与RTP流配对的RTCP流。用户要求RTCP转发以处理视频丢包，这是rtpengine的默认行为。<code class="ne-code"><span class="ne-text">rtcp-mux-offer</span></code><span class="ne-text">和<code class="ne-code"><span class="ne-text">rtcp-mux-answer</span></code><span class="ne-text"> flags用于协商是否将RTP和RTCP复用在同一端口上，这是推荐的做法，可以节省端口资源并简化NAT穿透（尽管本场景无NAT）。</span></span></span></li>
<li id="ufbb27c78" data-lake-index-type="0"><strong>接口选择</strong><span class="ne-text">：<code class="ne-code"><span class="ne-text">direction=public</span></code><span class="ne-text">或<code class="ne-code"><span class="ne-text">direction=private</span></code><span class="ne-text"> flag是核心，它告诉rtpengine应该将哪个逻辑网络接口（公网或私网）视为呼叫的“远端”进行SDP宣告，并使用哪个接口与该远端通信。rtpengine的另一个接口则用于与呼叫的“近端”通信。</span></span></span></li>
<li id="u4577803c" data-lake-index-type="0"><strong>SDP操作</strong><span class="ne-text">：<code class="ne-code"><span class="ne-text">trust-address</span></code><span class="ne-text"> (信任SDP中的c=行IP作为媒体来源的初始判断，但最终会被rtpengine的IP替换掉), <code class="ne-code"><span class="ne-text">replace-origin</span></code><span class="ne-text"> (替换o=行), <code class="ne-code"><span class="ne-text">replace-session-connection</span></code><span class="ne-text"> (替换会话级c=行) 确保了SDP被正确修改以通过rtpengine路由媒体。</span></span></span></span></li>
</ul>
<h2 id="RPWer"><span class="ne-text">5. Dispatcher模块的角色</span></h2>
<ul class="ne-ul">
<li id="uc7f1d767" data-lake-index-type="0"><strong>负载均衡</strong><span class="ne-text">：根据配置文件中定义的网关列表（例如<code class="ne-code"><span class="ne-text">/etc/kamailio/dispatcher_public.list</span></code><span class="ne-text">和<code class="ne-code"><span class="ne-text">/etc/kamailio/dispatcher_private.list</span></code><span class="ne-text">）和选择的算法（例如轮询），将出局呼叫（无论是到公网还是私网的网关）分发到多个目标网关之一。</span></span></span></li>
<li id="u56a948b0" data-lake-index-type="0"><strong>网关健康检查</strong><span class="ne-text">：Dispatcher模块可以配置为定期ping目标网关（通过SIP OPTIONS请求），以检查其可用性，并自动将流量从不可用的网关移开。</span></li>
<li id="ua08f1066" data-lake-index-type="0"><strong>分组管理</strong><span class="ne-text">：通过Set ID（例如公网组为1，私网组为2）对不同的网关进行分组管理，使得路由逻辑可以清晰地选择合适的目标组。</span></li>
</ul>
<h2 id="xlsR8"><span class="ne-text">6. Kamailio配置关键点回顾</span></h2>
<ul class="ne-ul">
<li id="ubd4fb791" data-lake-index-type="0"><strong>监听接口</strong><span class="ne-text">：Kamailio通过<code class="ne-code"><span class="ne-text">listen</span></code><span class="ne-text">参数同时监听公网和私网IP地址，以便接收来自两个网络的SIP请求。</span></span></li>
<li id="u3e8746a6" data-lake-index-type="0"><strong>接口识别</strong><span class="ne-text">：在<code class="ne-code"><span class="ne-text">request_route</span></code><span class="ne-text">中，通过<code class="ne-code"><span class="ne-text">$Ri</span></code><span class="ne-text"> (Received Interface IP) 变量判断请求到达的接口，从而决定呼叫的初始方向（公网到私网，或私网到公网）。</span></span></span></li>
<li id="u5ac2c94a" data-lake-index-type="0"><strong>rtpengine模块参数</strong><span class="ne-text">：<code class="ne-code"><span class="ne-text">rtpengine_sock</span></code><span class="ne-text">定义了与rtpengine守护进程的通信方式。</span></span></li>
<li id="ueb3dfe31" data-lake-index-type="0"><strong>rtpengine_manage()调用</strong><span class="ne-text">：在INVITE请求和对应的2xx响应中（如果包含SDP）调用，以使rtpengine参与媒体会话。关键是根据呼叫方向正确设置<code class="ne-code"><span class="ne-text">direction</span></code><span class="ne-text"> flag。</span></span></li>
<li id="ue49936c2" data-lake-index-type="0"><strong>Record-Routing</strong><span class="ne-text">：<code class="ne-code"><span class="ne-text">record_route()</span></code><span class="ne-text">函数用于确保后续的请求（如ACK, BYE）和响应都通过Kamailio，从而使Kamailio能够保持对话状态并正确处理媒体会话的生命周期（例如调用<code class="ne-code"><span class="ne-text">rtpengine_delete()</span></code><span class="ne-text">）。</span></span></span></li>
<li id="u877900c3" data-lake-index-type="0"><strong>rtpengine_delete()</strong><span class="ne-text">：在对话结束时（例如收到BYE或CANCEL后，或对话超时），调用<code class="ne-code"><span class="ne-text">rtpengine_delete()</span></code><span class="ne-text">来释放rtpengine中占用的资源。</span></span></li>
<li id="u41f20f56" data-lake-index-type="0"><strong>onreply_route中的逻辑</strong><span class="ne-text">：正确处理响应中的SDP至关重要。确定响应对应的原始请求方向，以便为<code class="ne-code"><span class="ne-text">rtpengine_manage</span></code><span class="ne-text">设置正确的<code class="ne-code"><span class="ne-text">direction</span></code><span class="ne-text"> flag，是<code class="ne-code"><span class="ne-text">onreply_route</span></code><span class="ne-text">中较为复杂的部分，通常需要借助事务标志或对话AVPs来传递上下文。</span></span></span></span></li>
</ul>
<h2 id="B1RP2"><span class="ne-text">7. 关于音视频和RTCP的进一步说明</span></h2>
<p id="ue1dc5ab7" class="ne-p"><span class="ne-text">rtpengine本身设计为透明处理RTP和RTCP。只要SDP中正确描述了媒体类型（例如<code class="ne-code"><span class="ne-text">m=audio ... RTP/AVP ...</span></code><span class="ne-text">，<code class="ne-code"><span class="ne-text">m=video ... RTP/AVP ...</span></code><span class="ne-text">），rtpengine就会为它们分配端口并转发。RTCP通常使用RTP端口号+1（除非使用RTCP-Mux）。</span></span></span></p>
<p id="u22840448" class="ne-p"><span class="ne-text">用户要求RTCP转发以处理视频丢包，这是标准行为。RTCP报告（如Sender Reports, Receiver Reports）包含了丢包统计、抖动等信息，视频编解码器和播放器可以利用这些信息来调整码率、请求重传（如果协议支持）或进行错误隐藏，从而改善视频质量。</span></p>
<p id="u8ea6ab40" class="ne-p"><span class="ne-text">通过确保rtpengine正确桥接了双向的RTCP流，接收端可以向发送端报告网络状况，发送端也可以据此调整发送策略，这对于视频流的质量至关重要。</span></p>
<p id="u6fe611b9" class="ne-p"><span class="ne-text">这份说明应该能帮助理解所提供Kamailio配置方案的工作原理。在实际部署前，务必替换所有占位符IP地址，并根据具体网络环境进行测试和调整。</span></p>
<p id="udef5f5c0" class="ne-p">&nbsp;</p>
<p id="u265695c3" class="ne-p"><span class="ne-text">空空如常</span></p>
<p id="u3577a95d" class="ne-p"><span class="ne-text">求真得真</span></p>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-27 18:03">2025-06-27 18:03</span>&nbsp;
<a href="https://www.cnblogs.com/qiuzhendezhen">求真得真</a>&nbsp;
阅读(<span id="post_view_count">7</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18952812);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18952812', targetLink: 'https://www.cnblogs.com/qiuzhendezhen/p/18952812', title: 'Kamailio SIP+RTP双网卡SBC呼叫流程与媒体处理说明' })">举报</a>
</div>
        