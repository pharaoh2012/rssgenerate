
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/hsiang/p/18699932" title="发布于 2025-02-06 14:11">
    <span role="heading" aria-level="2">Avalonia系列文章之控件简介</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        对于GUI(图形用户页面)程序来说，控件是创建用户页面的基本构建块，不同的控件代表不同的功能，如按钮，文本框，滑块等。在Avalonia UI中，了解控件的使用及其特性对于创建应用程序至关重要。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>对于GUI(图形用户页面)程序来说，控件是创建用户页面的基本构建块，不同的控件代表不同的功能，如按钮，文本框，滑块等。在Avalonia UI中，了解控件的使用及其特性对于创建应用程序至关重要。</p>
<h1>什么是控件？</h1>
<p>在图形用户页面出现之前，程序的输入输出都是通过命令行进行，输入输出的数据都是最原始的方式。在图形用户页面出现以后，输入输出变得越来越友好，且丰富多样，不仅可以输出格式化表格，图表，以及图像等形式，还能接受用户的输入指令，而这些输入输出都是通过控件实现的。在GUI程序中，控件是用户页面的基本元素，它提供输入，输出，以及操作数据的功能，所以它允许用户与应用程序进行交互，根据控件的目的和行为，可以分为以下几类：</p>
<ul>
<li>按钮（Button），按钮常用于在单击或触摸时触发操作。它们可以包含文本、图标或两者，并经常用于提交表单、打开对话框或执行命令等任务。</li>
<li>文本框（TextBox），文本框允许用户输入和编辑文本。它们用于捕获用户输入，例如用户名、密码或任何形式的文本信息。文本框还可以根据特定输入模式和验证进行自定义。</li>
<li>标签（Label），标签用于显示静态文本或其他控件的标题。它们为用户提供额外的信息或上下文，通常是不可交互的。</li>
<li>复选框（CheckBox）和单选按钮（RadioButton），复选框和单选按钮用于选择和多选项。复选框允许用户选择一个或多个选项，而单选按钮允许用户从一组选项中选择一个。</li>
<li>滑动条（Slider），滑动条用于从范围中选择一个值。它们提供了一个可视化表示值的方式，可以通过拖动滑块的手柄来调整值。滑块通常用于设置诸如音量控制或图像调整等设置。</li>
<li>列表框（ListBox）和下来列表框（ComboBox），列表框和下拉列表框允许用户从列表或下拉菜单中选择项目。列表框同时显示多个项目，而下拉列表框在初始状态下显示一个项目，并在点击时展开显示列表。</li>
</ul>
<p>上述列举的控件，是Avalonia UI中常用的一些控件，每个控件都有自己的一组属性，方法，和事件，允许开发人员根据应用程序的需求进行使用。</p>
<h1>内置控件</h1>
<p>在Avalonia UI中，提供了很多内置控件，可以直接使用，大体上可以分为以下几种类型：</p>
<ul>
<li>绘制控件（Drawn Controls），绘制控件负责生成其自己的几何图形或位图进行渲染，这些控件的示例包括Border，TextBlock，Image等。绘制控件是用于构建其他所有内容的基础控件。大多数的绘制控件具有可以调整其外观和大小的标准属性，但它们不允许重新模板化。</li>
<li>布局控件（Layout Controls），布局控件是特殊的，它本身没有外观，但它可以定义子元素的布局，并充当父容器。子控件负责渲染UI，而布局父控件只设置大小和位置。</li>
<li>用户控件（User Controls），Avalonia UI自身不会提供User Control，因为本身就是个性化的体现，并不具备通用性。</li>
<li>模板化控件（Templated Controls ），在Avalonia UI中，大部分的标准控件都是模板化控件，在应用程序开发中，可以更改模板化控件的XAML模板，使其外观发生改变，而这也是基于XAML的UI框架中最强大的功能之一。</li>
</ul>
<h2>布局控件</h2>
<p>常用的布局控件如下所示：</p>
<ol>
<li>Border &nbsp; &nbsp;用边框和背景装饰单个子元素。</li>
<li>Canvas &nbsp; &nbsp;在指定位置显示子控件。</li>
<li>Dock Panel &nbsp; &nbsp;将子控件沿指定边缘（顶部、底部、左侧、右侧）排列，并使其中一个填充剩余空间。</li>
<li>Expander &nbsp; &nbsp;具有标题区域（始终可见）和可折叠的内容区域（单个子元素）。</li>
<li>Grid &nbsp; &nbsp;将子控件排列在网格的单元格中，按行和列定位。单元格可以跨行和跨列。</li>
<li>Grid Splitter &nbsp; &nbsp;可以添加到网格中，允许用户在运行时调整行或列大小。</li>
<li>Panel &nbsp; &nbsp;将子控件堆叠在一起。</li>
<li>Relative Panel &nbsp; &nbsp;允许多个子控件。子控件的位置和对齐方式可以相对于面板本身指定，也可以相对于其他子控件指定。可以指定子控件的大小，也可以根据关系和对齐方式计算大小。</li>
<li>Scroll Viewer &nbsp; &nbsp;如果（单个）子控件大于可用空间，则添加滚动条和滚动行为。</li>
<li>Split View &nbsp; &nbsp;在其（单个子控件）内容区域的边缘添加可折叠的窗格。</li>
<li>Stack Panel &nbsp; &nbsp;允许多个子控件，按顺序水平或垂直排列。</li>
<li>Tab Control &nbsp; &nbsp;标签控件允许将视图细分为标签项。</li>
<li>Uniform Grid &nbsp; &nbsp;允许多个子控件，以网格形式排列，单元格具有统一的列和行大小。</li>
<li>Wrap Panel &nbsp; &nbsp;将子控件从左到右按顺序排列，当宽度不足时，换行显示。</li>
</ol>
<h2>按钮</h2>
<p>常用的按钮如下所示：</p>
<ol>
<li>Button &nbsp; &nbsp;基本按钮控件 - 可以显示文本、图标或两者。具有标准的“点击”行为。</li>
<li>Repeat Button &nbsp; &nbsp;按钮在按下并保持按住时重复引发其点击事件。</li>
<li>Radio Button &nbsp; &nbsp;按钮具有选中状态。它可以放置在一组中，以使一个按钮的选择取消所有其他按钮的选择。</li>
<li>Toggle Button &nbsp; &nbsp;按钮具有选中状态和未选中状态。后续点击“切换”此状态。通过“checked”伪类可以为选中状态和未选中状态分配不同的样式。</li>
<li>Button Spinner &nbsp; &nbsp;一个带有两个旋转按钮和内容区域的控件。</li>
<li>Split Button &nbsp; &nbsp;此按钮具有主要和次要部分，可以独立按下。主要部分的行为类似于标准按钮，而次要部分则打开一个带有附加操作的弹出菜单。</li>
<li>Toggle Split Button &nbsp; &nbsp;此按钮具有主要和次要部分，可以独立按下。主要部分的行为类似于切换按钮，而次要部分打开一个带有附加操作的弹出菜单。</li>
</ol>
<h2>重复数据控件</h2>
<p>对于重复的，固定格式的数据显示，常见的控件如下所示：</p>
<ol>
<li>Data Grid &nbsp; &nbsp;在可自定义的网格中显示数据。</li>
<li>Items Control &nbsp; &nbsp;显示来自绑定数据源的项目集合。</li>
<li>Items Repeater &nbsp; &nbsp;显示来自绑定数据源的重复数据。它具有布局模板和数据模板。</li>
<li>List Box &nbsp; &nbsp;一个包含可选择项的控件。</li>
<li>Combo Box &nbsp; &nbsp;一个带有下拉列表的控件，其中的项目可以选择。</li>
</ol>
<h2>文本显示和编辑控件</h2>
<p>文本显示和编辑控件是最常用的控件之一，也相对比较简单，主要有以下几个：</p>
<ol>
<li>Auto Complete Box &nbsp; &nbsp;一个显示文本框用于用户输入和一个下拉框，其中包含根据已输入内容可能匹配的项的控件。</li>
<li>Text Block &nbsp; &nbsp;用于显示文本块的控件。只读。</li>
<li>Text Box &nbsp; &nbsp;用于显示或编辑文本的控件，没有格式限制。</li>
<li>Masked Text Box &nbsp; &nbsp;用于在掩码中显示文本；或用于使用掩码编辑文本，以防止无效的用户输入。</li>
</ol>
<h2>值选择控件</h2>
<p>值选择控件常用于可枚举的类型的值，主要有以下几种：</p>
<ol>
<li>Check Box&nbsp; ，&nbsp; 值类型为Boolean &nbsp; &nbsp;以勾选标记形式表示的 True 值。点击交互切换值。具有显示“未知”值的选项。</li>
<li>Slider ，&nbsp; &nbsp;值类型为Double &nbsp; &nbsp;相对于最大值和最小值的相对值，以滑动条按钮在滑动条轨道上的位置表示。拖动滑动条按钮可以在最大值和最小值之间更改值。键盘和点击交互也可以微调值。</li>
<li>Calendar ，&nbsp; &nbsp;值类型为DateTime &nbsp; &nbsp;日历是用户选择日期或日期范围的控件。</li>
<li>Calendar Date Picker ，&nbsp; &nbsp;值类型为DateTime &nbsp; &nbsp;日期选择器的扩展，包括文本框和按钮。</li>
<li>Color Picker，&nbsp; &nbsp; 值类型为Color / HsvColor &nbsp; &nbsp;颜色选择器支持用户使用光谱、调色板和组件滑块选择和编辑颜色。它还支持可选的 alpha 分量、RGB 或 HSV 颜色模型和十六进制颜色值。</li>
<li>Date Picker&nbsp; ，&nbsp; 值类型为DateTime &nbsp; &nbsp;日期选择器有三个“微调”控件，允许用户选择日期值。</li>
<li>Time Picker ，&nbsp; &nbsp;值类型为TimeSpan &nbsp; &nbsp;时间选择器有三个“微调”控件，允许用户选择小时、分钟和秒钟。</li>
</ol>
<h2>图像控件</h2>
<p>图像控件通常用于显示位图或矢量图，常用的控件为：</p>
<ol>
<li>Image &nbsp; &nbsp;显示位图或矢量图像。</li>
<li>Path Icon &nbsp; &nbsp;使用当前的Foreground绘制矢量图像。</li>
</ol>
<h2>菜单和弹出框</h2>
<p>菜单也是比较常用的控件之一，主要有以下几种：</p>
<ol>
<li>Menu &nbsp; &nbsp;显示应用程序菜单。</li>
<li>Flyouts &nbsp; &nbsp;将弹出菜单或上下文菜单附加到控件。</li>
<li>Tool Tip &nbsp; &nbsp;当鼠标悬停在控件上时显示工具提示。</li>
</ol>
<h1>创建控件</h1>
<p>在实际应用中，如果默认提供的控件不能满足业务需求，则需要创建新的控件，创建控件主要分为四个步骤：</p>
<h2>选择自定义控件的类型</h2>
<p>Avalonia提供了多种方法来创建自定义控件以满足应用程序的特定需求，常见的自定义控件类型有用户控件（UserControl），模板控件（TemplatedControl）和自绘控件。</p>
<p>用户控件（UserControl），用户控件是在Avalonia中创建自定义控件的一种高级方法。它允许您通过组合现有控件并使用XAML定义布局来构建一个控件。用户控件充当一个容器，封装了多个控件，并提供了一个连贯的用户界面。创建用户控件的步骤如下：</p>
<ol>
<li>定义XAML：创建一个新的UserControl XAML文件，通过放置控件、设置属性和应用样式来定义控件的布局和外观。</li>
<li>Code-behind：可选项，您可以定义额外的代码后台逻辑来处理事件、修改行为或为用户控件提供额外的功能。</li>
<li>重用和定制: 用户控件可以在应用程序中轻松重用和定制。当您希望封装一组特定的控件和行为为可重用的组件或"视图"时，它们特别有用。</li>
</ol>
<p>模板控件（TemplatedControl），模板控件（也称为“Lookless控件”）为在Avalonia中创建自定义控件提供了更高级和可自定义的方法。模板控件将控件的行为和逻辑与其可视外观分离，允许应用程序开发人员通过控件模板进行样式化和模板化。对于模板控件，您在code-behind类中定义控件的行为和属性，而视觉外观则通过在XAML中定义控件模板来指定。这种分离允许应用程序开发人员自定义控件的外观和给人的感觉，而不会修改其底层行为。创建模板控件需要以下步骤：</p>
<ol>
<li>定义控件类：创建一个新的类，该类派生自TemplatedControl。这个类定义了控件的行为、属性和事件。</li>
<li>控件模板：在XAML中创建一个ControlTheme，指定控件的视觉外观和结构。控件模板定义了控件的部分以及它们应该如何被样式化。</li>
<li>样式和模板化：应用程序开发人员可以通过修改控件模板或应用样式来自定义控件的外观。这样可以实现应用程序中统一和统一的视觉设计。</li>
</ol>
<p>模板控件提供了更大的灵活性和可重用性，使它们非常适合您希望提供一个可以根据不同视觉主题进行样式化或适应各种用户偏好的控件的场景。</p>
<p>自绘控件，自绘控件在Avalonia中提供了最高级别的定制。使用自绘控件，您可以完全控制控件的视觉元素的渲染，从而创建独特而复杂的视觉外观。要创建自绘控件，您需要重写控件的Render方法，并使用低级别的绘制API（例如DrawingContext）来定义控件的外观。这种方法可以对控件的每个像素进行精细控制，实现高度个性化的可视化。创建自绘控件的步骤如下：</p>
<ol>
<li>定义控件类：创建一个新的类，该类派生自Control。这个类将定义控件的行为和渲染逻辑。</li>
<li>重写Render方法：在控件类中重写Render方法，并使用DrawingContext来绘制控件的内容。</li>
</ol>
<h2>定义属性</h2>
<p>在Avalonia UI中，控件的属性可以设置控件的行为和外观，而样式化属性为控件提供了一种强大而灵活的属性定义方式。这些属性专门设计用于支持Avalonia的样式化系统和数据绑定。样式化属性通过使用<code>AvaloniaProperty</code>类进行注册，它具有如下特点：</p>
<ol>
<li>样式支持：可以通过样式和在XAML或编程中定义的setter轻松地进行定位和修改。</li>
<li>继承：支持继承，这意味着在父控件上定义的属性值可以自动继承到其子控件上，除非明确覆盖。</li>
<li>默认值：可以在控件级别或控件模板中指定默认值，确保在多个控件实例中保持一致的行为。</li>
<li>属性值优先级：它们遵循明确定义的优先级顺序，允许根据本地值、样式setter、触发器和默认值等因素解析值。</li>
<li>验证和强制转换：样式化属性允许控件验证和强制转换传递给它的值，确保控件永远不会处于无效状态。</li>
</ol>
<p>在Avalonia中，样式化属性通常用于控件的属性，这些属性旨在通过样式轻松定制，从而实现基于各种条件的外观和行为的动态变化。样式化属性定义示例如下所示：</p>
<pre class="language-csharp highlighter-hljs"><code>public class MyCustomButton : Button
{
    public static readonly StyledProperty&lt;int&gt; RepeatCountProperty =
        AvaloniaProperty.Register&lt;MyCustomButton, int&gt;(nameof(RepeatCount), defaultValue: 1);

    public int RepeatCount
    {
        get =&gt; GetValue(RepeatCountProperty);
        set =&gt; SetValue(RepeatCountProperty, value);
    }
}</code></pre>
<p>在此示例中，为<code>MyCustomButton</code>控件定义了一个名为<code>RepeatCount</code>的自定义整数属性。该属性通过<code>AvaloniaProperty</code>系统进行注册，使得用户可以访问、修改、应用样式和进行数据绑定。还定义了CLR属性，以方便使用该属性，使其在使用上与标准.NET API一致。</p>
<h2>定义事件</h2>
<p>通过定义事件，可以为控件的使用者提供一种在应用程序中响应和处理这些事件的方法。路由事件提供了一种处理事件的机制，这些事件可以在控件树中传播（或“路由”），允许多个控件对相同的事件做出响应。路由事件提供以下关键特性：</p>
<ol>
<li>事件路由：路由事件可以沿着树向上（冒泡）或向下（隧道）传播，使得不同级别的控件可以处理相同的事件。这允许更灵活和集中的事件处理。</li>
<li>事件处理程序：路由事件使用事件处理程序来响应事件。事件处理程序可以与特定控件关联，也可以附加到视觉树中的更高级别以处理来自多个控件的事件。</li>
<li>已处理状态：路由事件具有Handled属性，可用于标记事件为已处理，阻止进一步的传播。这允许对事件处理进行精细的控制。</li>
<li>事件路由策略：Avalonia支持不同的路由策略，如冒泡、隧道和直接路由。这些策略决定了控件接收和处理事件的顺序。 Avalonia的路由事件在需要处理可能发生在嵌套控件内部的事件时特别有用，或者当您希望在视觉树的较高级别集中事件处理逻辑时。</li>
</ol>
<p>路由事件示例如下所示：</p>
<pre class="language-csharp highlighter-hljs"><code>public class MyCustomSlider : Control
{
    public static readonly RoutedEvent&lt;RoutedEventArgs&gt; ValueChangedEvent =
        RoutedEvent.Register&lt;MyCustomSlider, RoutedEventArgs&gt;(nameof(ValueChanged), RoutingStrategies.Direct);

    public event EventHandler&lt;RoutedEventArgs&gt; ValueChanged
    {
        add =&gt; AddHandler(ValueChangedEvent, value);
        remove =&gt; RemoveHandler(ValueChangedEvent, value);
    }

    protected virtual void OnValueChanged()
    {
        RoutedEventArgs args = new RoutedEventArgs(ValueChangedEvent);
        RaiseEvent(args);
    }
}</code></pre>
<p>在此示例中，为<code>MyCustomSlider</code>控件定义了一个名为<code>ValueChangedEvent</code>的自定义路由事件。该事件通过<code>RoutedEvent</code>系统进行注册，使得用户可以订阅它。还定义了CLR事件，以方便使用该事件，使其在使用上与标准.NET API一致。</p>
<h2>定义控件主题</h2>
<p>Avalonia允许自定义控件主题，以定制控件的外观和样式。特别地，无外观的控件（lookless control）在没有控件主题的情况下将没有任何视觉外观；但是您可以为所有类型的控件定义控件主题。</p>
<p>以上就是《Avalonia系列文章之控件简介》的全部内容，旨在抛砖引玉，一起学习，共同进步，更多内容，请参考<a href="https://docs.avaloniaui.net/zh-Hans/docs/basics/user-interface/controls/" target="_blank" rel="noopener nofollow">官方文档</a></p>
</div>
<div id="MySignature" role="contentinfo">
    <div id="AllanboltSignature">
 
    <p style="border-top: #e0e0e0 1px dashed; border-right: #e0e0e0 1px dashed; border-bottom: #e0e0e0 1px dashed; border-left: #e0e0e0 1px dashed; padding-top: 10px; padding-right: 10px; padding-bottom: 10px; padding-left: 30px; font-family: 微软雅黑; font-size: 12px" id="PSignature">
<br>
  <a style="float: left; display: block; padding-right: 10px" target="_blank" href="https://images.cnblogs.com/cnblogs_com/hsiang/1154298/o_115f1cd8.jpg">
   <img alt="" src="https://images.cnblogs.com/cnblogs_com/hsiang/1154298/o_115f1cd8.jpg" width="80px" height="80px">
   </a>
    作者：<a href="http://www.cnblogs.com/hsiang/" target="_blank">老码识途</a>
    <br>
    出处：<a href="http://www.cnblogs.com/hsiang/" target="_blank">http://www.cnblogs.com/hsiang/</a>
    <br>
    本文版权归作者和博客园共有，写文不易，支持原创，欢迎转载【点赞】，转载请保留此段声明，且在文章页面明显位置给出原文连接，谢谢。
    <br>关注个人公众号，定时同步更新技术及职场文章
<br><br>
   </p>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="6.506663389653935" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-06 14:11">2025-02-06 14:11</span>&nbsp;
<a href="https://www.cnblogs.com/hsiang">老码识途呀</a>&nbsp;
阅读(<span id="post_view_count">99</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18699932" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18699932);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18699932', targetLink: 'https://www.cnblogs.com/hsiang/p/18699932', title: 'Avalonia系列文章之控件简介' })">举报</a>
</div>
        