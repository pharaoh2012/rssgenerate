<!----> <meta itemprop="headline" content="作为一个前端你连requestAnimationFrame的用法、优势和应用场景都搞不清楚？"> <meta itemprop="keywords" content="前端,JavaScript,面试"> <meta itemprop="datePublished" content="2024-10-29T03:13:10.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="天天鸭"> <meta itemprop="url" content="https://juejin.cn/user/3963059533776605"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-7cdd11fb="">
            作为一个前端你连requestAnimationFrame的用法、优势和应用场景都搞不清楚？
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-7cdd11fb=""><div class="author-info-box" data-v-7cdd11fb=""><div class="author-name" data-v-7cdd11fb=""><a href="/user/3963059533776605/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-7cdd11fb=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    天天鸭
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-7cdd11fb=""><time datetime="2024-10-29T03:13:10.000Z" title="Tue Oct 29 2024 03:13:10 GMT+0000 (Coordinated Universal Time)" class="time" data-v-7cdd11fb="">
                    2024-10-29
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-7cdd11fb=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-7cdd11fb=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-7cdd11fb=""></circle></svg> <span class="views-count" data-v-7cdd11fb="">
                    5,190
                  </span> <span class="read-time" data-v-7cdd11fb=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-7cdd11fb=""><rect width="16" height="16" fill="none" data-v-7cdd11fb=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-7cdd11fb=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-7cdd11fb=""></path></svg>
                    阅读4分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-7cdd11fb=""></div> <!----> <!----></div> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-7cdd11fb=""><div class="article-viewer markdown-body result"><h2 data-id="heading-0"><p align="center"> 前言</p></h2>
<p>如果你是一名前端开发，那么你多少有了解过<code>requestAnimationFrame</code>吧？如果没有也接着往下看，会有详细用法说明。</p>
<p>其实很多人会局限于把<code>requestAnimationFrame</code>应用于一些纯动画相关的需求上，但其实在前端很多业务场景下<code>requestAnimationFrame</code>都能用于性能优化，下面将细说一下<code>requestAnimationFrame</code>的具体<code>用法</code>和几种<code>应用场景</code>。</p>
<h2 data-id="heading-1"><p align="center">requestAnimationFrame作用与用法</p></h2>
<h4 data-id="heading-2">requestAnimationFrame简述</h4>
<p><strong><code>MDN</code>官方说法是这样的</strong>
<img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/cba368a46c2343009e2d3dbc8785c6ab~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5aSp5aSp6bit:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735602255&amp;x-signature=%2BYvqYHuMId%2F6K9w64qE2WlA5cSM%3D" alt="image.png" loading="lazy"></p>
<h4 data-id="heading-3">基本示例</h4>
<pre><code class="hljs language-xml" lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
    <span class="hljs-keyword">function</span> <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) {
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'您好，我是requestAnimationFrame'</span>);
    }
    <span class="hljs-title function_">requestAnimationFrame</span>(init)
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<p><strong>效果如下</strong>
<img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/3a1f490ccf65440ea0ccc4be2986e7fa~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5aSp5aSp6bit:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735602255&amp;x-signature=3jvwOr4K%2BgbA1sAm69hoB%2FTtrls%3D" alt="image.png" loading="lazy"></p>
<p>但是例子上面是最基本的调用方式，并且只简单执行了一次，而对于动画是要一直执行的。</p>
<p>下面直接上图看看官方的文档对这个的说明，上面说具体用法应该要递归调用，而不是单次调用。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/d94de1ffd59c4d13b5374c994d6ba998~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5aSp5aSp6bit:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735602255&amp;x-signature=v2AOrEH5a2D7R%2Fg2w49qkCdYin8%3D" alt="image.png" loading="lazy"></p>
<h4 data-id="heading-4">递归调用示例</h4>
<pre><code class="hljs language-xml" lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
    <span class="hljs-keyword">function</span> <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) {
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'您好，递归调用requestAnimationFrame'</span>);
      <span class="hljs-title function_">requestAnimationFrame</span>(init)
    }
    <span class="hljs-title function_">requestAnimationFrame</span>(init)
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<p><strong>执行动图效果如下</strong></p>
<p><code>requestAnimationFrame</code>会一直递归调用执行，并且调用的频率通常是与当前显示器的<code>刷新率相匹配</code>（这也是这个<code>API</code>核心优势），例如屏幕<code>75hz</code>就<code>1</code>秒执行<code>75</code>次。</p>
<p>而且如果使用的是定时器实现此功能是无法适应各种屏幕帧率的。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/bec6348177cc4645a50f014cf431d897~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5aSp5aSp6bit:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735602255&amp;x-signature=A2%2FVDUKP%2FQNVHV0UAVXTyflNgZU%3D" alt="动画.gif" loading="lazy"></p>
<h4 data-id="heading-5">回调函数</h4>
<p><code>requestAnimationFrame</code>执行后的回调函数有且只会返回一个参数，并且返回的参数是一个<code>毫秒数</code>，这个参数所表示是的上一帧渲染的结束时间，直接看看下面代码示例与打印效果。</p>
<pre><code class="hljs language-xml" lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
  <span class="hljs-keyword">function</span> <span class="hljs-title function_">init</span>(<span class="hljs-params">val</span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'您好，requestAnimationFrame回调:'</span>, val);
    <span class="hljs-title function_">requestAnimationFrame</span>(init);
  }
  <span class="hljs-title function_">requestAnimationFrame</span>(init);
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

</code></pre>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f637bf21cb4a4f3b812d46eec6caa863~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5aSp5aSp6bit:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735602255&amp;x-signature=QC8gNAu6mGkjVRlPFP0EVsZiheA%3D" alt="image.png" loading="lazy"></p>
<p><strong>注意：</strong> 如果我们同时调用了很多个<code>requestAnimationFrame</code>，那么他们会收到相同的时间戳，因为与屏幕的帧率相同所以并不会不一样。</p>
<h4 data-id="heading-6">终止执行</h4>
<p>终止此<code>API</code>的执行，官方提供的方法是<code>window.cancelAnimationFrame()</code>，语法如下</p>
<pre><code class="hljs language-scss" lang="scss"><span class="hljs-built_in">ancelAnimationFrame</span>(requestID)   
</code></pre>
<p>直接看示例更便于理解，用法非常类似定时器的<code>clearTimeout()</code>，直接把 <code>requestAnimationFrame</code> 返回值传给 <code>cancelAnimationFrame()</code> 即可终止执行。</p>
<pre><code class="hljs language-xml" lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"stop"</span>&gt;</span>停止<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
  <span class="hljs-keyword">let</span> myReq;
  <span class="hljs-keyword">function</span> <span class="hljs-title function_">init</span>(<span class="hljs-params">val</span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'您好，requestAnimationFrame回调:'</span>, val);
    myReq = <span class="hljs-title function_">requestAnimationFrame</span>(init);
  }
  <span class="hljs-title function_">requestAnimationFrame</span>(init);

  <span class="hljs-keyword">function</span> <span class="hljs-title function_">stop</span>(<span class="hljs-params"></span>) {
    <span class="hljs-title function_">cancelAnimationFrame</span>(myReq);
  }
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

</code></pre>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/7bea70e9709f42ae95f01f25d132df37~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5aSp5aSp6bit:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735602255&amp;x-signature=jqEIiLQu6xRguiGrag%2BYSjYLZTE%3D" alt="动画.gif" loading="lazy"></p>
<h2 data-id="heading-7"><p align="center">requestAnimationFrame优势</p></h2>
<h4 data-id="heading-8">1、动画更丝滑，不会出现卡顿</h4>
<p>对比传统的<code>setTimeout</code> 和 <code>setInterval</code>动画会更流畅丝滑。</p>
<p>主要 <strong>原因</strong> 是由于运行的浏览器会监听显示器返回的<code>VSync</code>信号确保同步，收到信号后再开始新的渲染周期，因此做到了与浏览器绘制频率绝对一致。所以帧率会相当平稳，例如显示屏<code>60hz</code>，那么会固定<code>1000/60ms</code>刷新一次。</p>
<p>但如果使用的是<code>setTimeout</code> 和 <code>setInterval</code>来实现同样的动画效果，它们会受到事件队列宏任务、微任务影响会导致执行的优先级顺序有所差异，自然做不到与绘制同频。</p>
<p>所以使用<code>setTimeout</code> 和 <code>setInterval</code>不但无法自动匹配显示屏帧率，也无法做到完全固定的时间去刷新。</p>
<h4 data-id="heading-9">2、性能更好，切后台会暂停</h4>
<p>当我们把使用了<code>requestAnimationFrame</code>的页面切换到后台运行时，<code>requestAnimationFrame</code>会暂停执行从而提高性能，切换回来后会马上提着执行。</p>
<p>效果如下动图，隐藏后停止运行，切换回来接着运行。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/18d70b2a0e864150a1f888e94f0b32bc~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5aSp5aSp6bit:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735602255&amp;x-signature=zsoVMMPCbLee0cO8lRBXERm14zA%3D" alt="动画.gif" loading="lazy"></p>
<h2 data-id="heading-10"><p align="center">应用场景：常规动画</p></h2>
<p>用一个很简单的示例：用<code>requestAnimationFrame</code>使一张图片动态也丝滑旋转，直接看示例代码和效果。</p>
<p><strong>思路</strong>：首先在页面初始化时执行<code>window.requestAnimationFrame(animate)</code>使动画动起来，实现动画一直丝滑转运。在关闭页面时用<code>window.cancelAnimationFrame(rafId)</code>去终止执行。</p>
<pre><code class="hljs language-xml" lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">"imgStyle"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"earth"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
  <span class="hljs-keyword">import</span> { ref, onMounted, reactive, onUnmounted } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;

  <span class="hljs-keyword">const</span> imgStyle = <span class="hljs-title function_">reactive</span>({
    <span class="hljs-attr">transform</span>: <span class="hljs-string">'rotate(0deg)'</span>,
  });

  <span class="hljs-keyword">let</span> rafId = <span class="hljs-literal">null</span>;

  <span class="hljs-comment">// 请求动画帧方法</span>
  <span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params">time</span>) {
    <span class="hljs-keyword">const</span> angle = (time % <span class="hljs-number">10000</span>) / <span class="hljs-number">5</span>; <span class="hljs-comment">// 控制转的速度</span>
    imgStyle.<span class="hljs-property">transform</span> = <span class="hljs-string">`rotate(<span class="hljs-subst">${angle}</span>deg)`</span>;

    rafId = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(animate);
  }

  <span class="hljs-comment">// 开始动画</span>
  <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> {
    rafId = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(animate);
  });

  <span class="hljs-comment">// 卸载时生命周末停止动画</span>
  <span class="hljs-title function_">onUnmounted</span>(<span class="hljs-function">() =&gt;</span> {
    <span class="hljs-keyword">if</span> (rafId) {
      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">cancelAnimationFrame</span>(rafId);
    }
  });
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css">
  <span class="hljs-selector-tag">body</span> {
    <span class="hljs-attribute">box-sizing</span>: border-box;
    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccc</span>;
    <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;
    <span class="hljs-attribute">display</span>: flex;
    <span class="hljs-attribute">justify-content</span>: center;
    <span class="hljs-attribute">align-items</span>: center;
  }

  <span class="hljs-selector-class">.container</span> {
    <span class="hljs-attribute">position</span>: relative;
    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;
    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;
    <span class="hljs-attribute">display</span>: flex;
    <span class="hljs-attribute">flex-direction</span>: column;
    <span class="hljs-attribute">align-items</span>: center;
    <span class="hljs-attribute">justify-content</span>: center;
  }

  <span class="hljs-selector-class">.earth</span> {
    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;
    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;
    <span class="hljs-attribute">background-size</span>: cover;
    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;
    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">'@/assets/images/about_advantage_3.png'</span>); <span class="hljs-comment">/* 替换为实际的路径 */</span>
  }
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>

</code></pre>
<p>看看动图效果
<img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/e36de0616dfd4490b1d6f45f4aaa7100~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5aSp5aSp6bit:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735602255&amp;x-signature=g1kzG3%2Fd5vfFBikjvsCwpZD0x7U%3D" alt="动画2.gif" loading="lazy"></p>
<h2 data-id="heading-11"><p align="center">应用场景：滚动加载</p></h2>
<p>在滚动事件中用<code>requestAnimationFrame</code>去加载渲染数据使混动效果更加丝滑。主要好久有几个</p>
<ul>
<li>
<p><strong>提高性能</strong>: 添加<code>requestAnimationFrame</code>之后会在下一帧渲染之前执行，而不是每次在滚动事件触发的时候就立即执行。这可以减少大量不必要的计算，提高性能。</p>
</li>
<li>
<p><strong>用户体验更好</strong>：确保在绘制下一帧时再执行，使帧率与显示屏相同，视觉上会更丝滑。</p>
</li>
</ul>
<p>代码示例和效果如下。</p>
<pre><code class="hljs language-xml" lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"scrollRef"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item, index) in items"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"index"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item"</span>&gt;</span>
      {{ item }}
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"loading"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"loading"</span>&gt;</span>数据加载中...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { ref, onMounted, onUnmounted } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;

<span class="hljs-keyword">const</span> loading = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>);
<span class="hljs-keyword">let</span> <span class="hljs-attr">rafId</span>: number | <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;
<span class="hljs-comment">// 数据列表</span>
<span class="hljs-keyword">const</span> items = ref&lt;string[]&gt;(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>({ <span class="hljs-attr">length</span>: <span class="hljs-number">50</span> }, <span class="hljs-function">(<span class="hljs-params">_, i</span>) =&gt;</span> <span class="hljs-string">`Test <span class="hljs-subst">${i + <span class="hljs-number">1</span>}</span>`</span>));

<span class="hljs-comment">// 滚动容器</span>
<span class="hljs-keyword">const</span> scrollRef = ref&lt;<span class="hljs-title class_">HTMLElement</span> | <span class="hljs-literal">null</span>&gt;(<span class="hljs-literal">null</span>);

<span class="hljs-comment">// 模拟一个异步加载数据效果</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">moreData</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-keyword">void</span>&gt;(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {
    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {
      <span class="hljs-keyword">const</span> newItems = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>({ <span class="hljs-attr">length</span>: <span class="hljs-number">50</span> }, <span class="hljs-function">(<span class="hljs-params">_, i</span>) =&gt;</span> <span class="hljs-string">`Test <span class="hljs-subst">${items.value.length + i + <span class="hljs-number">1</span>}</span>`</span>);
      items.<span class="hljs-property">value</span>.<span class="hljs-title function_">push</span>(...newItems);
      <span class="hljs-title function_">resolve</span>();
    }, <span class="hljs-number">1000</span>);
  });
};

<span class="hljs-comment">// 检查是否需要加载更多数据</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">checkScrollPosition</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">if</span> (loading.<span class="hljs-property">value</span>) <span class="hljs-keyword">return</span>;

  <span class="hljs-keyword">const</span> container = scrollRef.<span class="hljs-property">value</span>;
  <span class="hljs-keyword">if</span> (!container) <span class="hljs-keyword">return</span>;

  <span class="hljs-keyword">const</span> scrollTop = container.<span class="hljs-property">scrollTop</span>;
  <span class="hljs-keyword">const</span> clientHeight = container.<span class="hljs-property">clientHeight</span>;
  <span class="hljs-keyword">const</span> scrollHeight = container.<span class="hljs-property">scrollHeight</span>;

  <span class="hljs-keyword">if</span> (scrollHeight - scrollTop - clientHeight &lt;= <span class="hljs-number">100</span>) {
    <span class="hljs-title function_">startLoading</span>();
  }
};

<span class="hljs-comment">// 加载数据</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">startLoading</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; {
  loading.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span>;
  <span class="hljs-keyword">await</span> <span class="hljs-title function_">moreData</span>();
  loading.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span>;
};

<span class="hljs-comment">// 监听滚动事件</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">handleScroll</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'滚动事件触发啦'</span>);
  <span class="hljs-keyword">if</span> (rafId !== <span class="hljs-literal">null</span>) {
    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">cancelAnimationFrame</span>(rafId);
  }
  rafId = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(checkScrollPosition);
};

<span class="hljs-comment">// 添加滚动事件监听器</span>
<span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> {
  <span class="hljs-keyword">if</span> (scrollRef.<span class="hljs-property">value</span>) {
    scrollRef.<span class="hljs-property">value</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'scroll'</span>, handleScroll);
  }
});

<span class="hljs-comment">// 移除相关事件</span>
<span class="hljs-title function_">onUnmounted</span>(<span class="hljs-function">() =&gt;</span> {
  <span class="hljs-keyword">if</span> (rafId !== <span class="hljs-literal">null</span>) {
    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">cancelAnimationFrame</span>(rafId);
  }
  <span class="hljs-keyword">if</span> (scrollRef.<span class="hljs-property">value</span>) {
    scrollRef.<span class="hljs-property">value</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">'scroll'</span>, handleScroll);
  }
});
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css">
<span class="hljs-selector-class">.container</span> {
  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;
  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">800px</span>;
  <span class="hljs-attribute">overflow-y</span>: auto;
  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;
  <span class="hljs-attribute">height</span>: <span class="hljs-number">600px</span>; 
}

<span class="hljs-selector-class">.item</span> {
  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;
  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;
}

<span class="hljs-selector-class">.loading</span> {
  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;
  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;
  <span class="hljs-attribute">text-align</span>: center;
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
</code></pre>
<p>看看下面动图效果
<img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a101fb25d27d436090d7ea41c1030593~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5aSp5aSp6bit:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735602255&amp;x-signature=MqqZ4YxbSl8q8Rj1DBMcgD1UN0Y%3D" alt="动画3.gif" loading="lazy"></p>
<h2 data-id="heading-12"><p align="center">小结</p></h2>
<p>通过代码示例配合动图讲解后，再通过两个简单的事例可能大家会发现，只要在页面需要运动的地方其实都可以用到 <code>requestAnimationFrame</code> 使效果变的更加丝滑。</p>
<p>除了上面两个小示例其它非常多地方都可以用到<code>requestAnimationFrame</code>去优化性能，比较常见的例如游戏开发、各种动画效果和动态变化的布局等等。</p>
<p>文章就写到这啦，如果文章写的哪里不对或者有什么建议欢迎指出。</p></div></div>