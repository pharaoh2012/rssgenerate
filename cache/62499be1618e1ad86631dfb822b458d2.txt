
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zousc/p/18712675" title="发布于 2025-02-13 10:42">
    <span role="heading" aria-level="2">AI-接入</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="前言">前言</h1>
<p>前面已经申请了模型，并且通过测试已经可以访问使用了，本篇的接入还是使用<code>Ollama</code>，前面我们已经可以在命令行终端能够进行交互了，现在将AI接入到代码中；</p>
<h1 id="准备">准备</h1>
<p>作为一名Neter这里使用的是<code>.net</code>，首先是创建项目，这里使用的是WebApi项目，也可以使用控制台；</p>
<p>使用<code>SemanticKernel</code>接入AI，<code>SemanticKernel</code>是一个帮助程序连接AI模型的工具，以下是官方的介绍：</p>
<pre><code>Semantic Kernel is a lightweight, open-source development kit that lets you easily build AI agents and integrate the latest AI models into your C#, Python, or Java codebase. It serves as an efficient middleware that enables rapid delivery of enterprise-grade solutions. 
</code></pre>
<p>引入SemanticKernel包</p>
<pre><code>dotnet add package Microsoft.SemanticKernel
dotnet add package Microsoft.SemanticKernel.Connectors.Ollama
</code></pre>
<blockquote>
<p>ollama connector目前是alpha版本，Nuget中搜索需要勾选包括预发行版</p>
</blockquote>
<h1 id="ollama接入示例">Ollama接入示例</h1>
<h2 id="注册">注册</h2>
<p><strong>Program.cs</strong></p>
<pre><code>using Microsoft.SemanticKernel.ChatCompletion;
using Microsoft.SemanticKernel;
using OllamaSharp.Models;
using OllamaSharp;

var endpoint = new Uri("http://localhost:11434");
var modelId = "llama3:latest";
builder.Services.AddSingleton(new OllamaApiClient(endpoint, modelId));
</code></pre>
<h2 id="创建接口">创建接口</h2>
<pre><code class="language-C#">[Route("api/[controller]")]
[ApiController]
public class AIChatController : ControllerBase
{
    private readonly OllamaApiClient _ollamaApiClient;

    public AIChatController(OllamaApiClient ollamaApiClient)
    {
        _ollamaApiClient = ollamaApiClient;
    }
    
    [HttpGet("Chat")]
    public async Task Chat()
    {
    #pragma warning disable SKEXP0001
        var history = new List&lt;Message&gt;();
        history.Add(new Message()
        {
            Role = ChatRole.System,
            Content = "you are a useful assistant",
        });
        history.Add(new Message()
        {
            Role = ChatRole.User,
            Content = "hello",
        });
    
        var req = new OllamaSharp.Models.Chat.ChatRequest()
        {
            Messages = history,
            Stream = true
        };
    
        var sb = new StringBuilder();
        var content = _ollamaApiClient.ChatAsync(req);
    
        await foreach (var chatMessageContent in content)
        {
            var msg = chatMessageContent?.Message.Content;
            sb.Append(msg);
            Console.Write(msg);
            await Response.WriteAsync($"data: {msg}\n\n");
            await Response.Body.FlushAsync();
        }
    }
}
</code></pre>
<p><strong>响应：</strong></p>
<pre><code>Hello! It's nice to meet you. I'm here to assist you with any questions, tasks, or just about anything you'd like to chat about. What's on your mind today?
</code></pre>
<h1 id="moonhost接入示例">Moonhost接入示例</h1>
<h2 id="注册-1">注册</h2>
<p><strong>Program.cs</strong></p>
<pre><code class="language-C#">var MoonshotAIKey = "sk-2xyIeQ49Xl714yquKkMrIdvsuI4aZmnvgNHHKxEaXkk384Os";
var endpoint = new Uri("https://api.moonshot.cn/v1");
var modelId = "moonshot-v1-8k";
var kernelBuilder = Kernel.CreateBuilder()
      .AddOpenAIChatCompletion(modelId: modelId!, apiKey: MoonshotAIKey, endpoint: endpoint, httpClient: new HttpClient());

</code></pre>
<pre><code class="language-C#">[Route("api/[controller]")]
[ApiController]
public class AIChatController : ControllerBase
{
    private readonly Kernel _kernel;
    public AIChatController(Kernel kernel) 
    {
        _kernel = kernel
    }
    
    /// &lt;summary&gt;
    /// MoonShot
    /// &lt;/summary&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    [HttpGet("MoonShotChat")]
    public async Task MoonShotChat()
    {
        var settings = new OpenAIPromptExecutionSettings()
        {
            Temperature = 0,
            ToolCallBehavior = ToolCallBehavior.AutoInvokeKernelFunctions
        };

        var history=new ChatHistory();
        history.AddSystemMessage("you are a useful assistant");
        history.AddUserMessage("hello");
        
        var chatCompletionService=_kernel.GetRequiredService&lt;IChatCompletionService&gt;();
        var result=await chatCompletionService.GetChatMessageContentAsync(history,settings,_kernel);

        System.Console.WriteLine(result.ToString());
        //Hello! How can I help you today?
    }
}
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.001754310351851852" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-13 10:43">2025-02-13 10:42</span>&nbsp;
<a href="https://www.cnblogs.com/zousc">贰拾~</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18712675" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18712675);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18712675', targetLink: 'https://www.cnblogs.com/zousc/p/18712675', title: 'AI-接入' })">举报</a>
</div>
        