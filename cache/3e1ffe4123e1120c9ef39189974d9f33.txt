
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/risheng/p/18820282" title="发布于 2025-04-11 11:25">
    <span role="heading" aria-level="2">Electron 开发：获取当前客户端 IP</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="electron-开发获取当前客户端-ip">Electron 开发：获取当前客户端 IP</h1>
<h2 id="一背景与需求">一、背景与需求</h2>
<h3 id="1-项目背景">1. 项目背景</h3>
<p>客户端会自启动一个服务，Web/后端服务通过 IP + port 请求以操作客户端接口</p>
<h3 id="2-初始方案与问题">2. 初始方案与问题</h3>
<h4 id="21-初始方案通过代码获取本机-ip">2.1. 初始方案：通过代码获取本机 IP</h4>
<pre><code class="language-typescript">/**
 * 获取局域网 IP
 * @returns {string} 局域网 IP
 */
export function getLocalIP(): string {
  const interfaces = os.networkInterfaces()
  for (const name of Object.keys(interfaces)) {
    for (const iface of interfaces[name] || []) {
      if (iface.family === 'IPv4' &amp;&amp; !iface.internal) {
        log.info('获取局域网 IP：', iface.address)
        return iface.address
      }
    }
  }
  log.warn('无法获取局域网 IP，使用默认 IP: 127.0.0.1')
  return '127.0.0.1'
}
</code></pre>
<h4 id="22-遇到的问题">2.2. 遇到的问题</h4>
<p>如果设备开启了代理，可能获取的是代理 IP，导致后端请求失败</p>
<h2 id="二解决方案设计">二、解决方案设计</h2>
<h3 id="1-总体思路">1. 总体思路</h3>
<ul>
<li>获取本机所有 IP</li>
<li>遍历 IP + port 请求客户端服务接口</li>
<li>成功响应即为目标 IP</li>
<li>缓存有效 IP，避免频繁请求</li>
</ul>
<h3 id="2-获取所有可能的-ip">2. 获取所有可能的 IP</h3>
<p>使用 Node.js 的 os.networkInterfaces() 获取所有可用 IP</p>
<pre><code class="language-typescript">private getAllPossibleIPs(): string[] {
  const interfaces = os.networkInterfaces()
  const result: string[] = []

  for (const name of Object.keys(interfaces)) {
    const lowerName = name.toLowerCase()
    if (lowerName.includes('vmware')
      || lowerName.includes('virtual')
      || lowerName.includes('vpn')
      || lowerName.includes('docker')
      || lowerName.includes('vethernet')) {
      continue
    }

    for (const iface of interfaces[name] || []) {
      if (iface.family === 'IPv4' &amp;&amp; !iface.internal) {
        result.push(iface.address)
      }
    }
  }

  return result
}
</code></pre>
<h3 id="3-遍历-ip-请求验证">3. 遍历 IP 请求验证</h3>
<p>轮询所有 IP，尝试访问客户端服务，验证是否可用</p>
<pre><code class="language-typescript">private async testIPsParallel(ips: string[]): Promise&lt;string | null&gt; {
  if (ips.length === 0)
    return null
  return new Promise((resolve) =&gt; {
    const globalTimeout = setTimeout(() =&gt; {
      resolve(null)
    }, this.TIMEOUT * 1.5)

    const controllers = ips.map(() =&gt; new AbortController())
    let hasResolved = false
    let completedCount = 0

    const testIP = (ip: string, index: number) =&gt; {
      const controller = controllers[index]
      axios.get(`http://${ip}:${PORT}/api/task-server/ip`, {
        timeout: this.TIMEOUT,
        signal: controller.signal,
      })
        .then(() =&gt; {
          if (!hasResolved) {
            hasResolved = true
            clearTimeout(globalTimeout)
            controllers.forEach((c, i) =&gt; {
              if (i !== index)
                c.abort()
            })
            resolve(ip)
          }
        })
        .catch(() =&gt; {
          if (!hasResolved) {
            completedCount++
            if (completedCount &gt;= ips.length) {
              clearTimeout(globalTimeout)
              resolve(null)
            }
          }
        })
    }
    ips.forEach(testIP)
  })
}
</code></pre>
<h3 id="4-添加缓存策略">4. 添加缓存策略</h3>
<p>对成功的 IP 进行缓存，设定缓存有效时间，避免重复请求</p>
<pre><code class="language-typescript">private cachedValidIP: string | null = null
private lastValidationTime = 0
private readonly CACHE_VALID_DURATION = 24 * 60 * 60 * 1000
</code></pre>
<h2 id="三完整代码">三、完整代码</h2>
<pre><code class="language-typescript">import os from 'node:os'
import axios from 'axios'
import { PORT } from '../../enum/env'

/**
 * IP管理器单例类
 * 用于获取并缓存本地有效IP地址
 */
export class IPManager {
  private static instance: IPManager
  private cachedValidIP: string | null = null
  private lastValidationTime = 0
  private readonly CACHE_VALID_DURATION = 24 * 60 * 60 * 1000
  private readonly TIMEOUT = 200
  private isTestingIPs = false

  private constructor() {}

  static getInstance(): IPManager {
    if (!IPManager.instance) {
      IPManager.instance = new IPManager()
    }
    return IPManager.instance
  }

  async getLocalIP(): Promise&lt;string&gt; {
    const now = Date.now()
    if (this.cachedValidIP &amp;&amp; now - this.lastValidationTime &lt; this.CACHE_VALID_DURATION) {
      console.log('从缓存中获取 IP', this.cachedValidIP)
      return this.cachedValidIP
    }

    if (this.isTestingIPs) {
      const allIPs = this.getAllPossibleIPs()
      return allIPs.length &gt; 0 ? allIPs[0] : '127.0.0.1'
    }
    this.isTestingIPs = true

    try {
      const allIPs = this.getAllPossibleIPs()
      if (allIPs.length === 0) {
        return '127.0.0.1'
      }

      const validIP = await this.testIPsParallel(allIPs)
      if (validIP) {
        this.cachedValidIP = validIP
        this.lastValidationTime = now
        return validIP
      }
      return allIPs[0]
    }
    catch (error) {
      const allIPs = this.getAllPossibleIPs()
      return allIPs.length &gt; 0 ? allIPs[0] : '127.0.0.1'
    }
    finally {
      this.isTestingIPs = false
    }
  }

  private getAllPossibleIPs(): string[] {
    const interfaces = os.networkInterfaces()
    const result: string[] = []

    for (const name of Object.keys(interfaces)) {
      const lowerName = name.toLowerCase()
      if (lowerName.includes('vmware')
        || lowerName.includes('virtual')
        || lowerName.includes('vpn')
        || lowerName.includes('docker')
        || lowerName.includes('vethernet')) {
        continue
      }

      for (const iface of interfaces[name] || []) {
        if (iface.family === 'IPv4' &amp;&amp; !iface.internal) {
          result.push(iface.address)
        }
      }
    }

    return result
  }

  private async testIPsParallel(ips: string[]): Promise&lt;string | null&gt; {
    if (ips.length === 0)
      return null
    return new Promise((resolve) =&gt; {
      const globalTimeout = setTimeout(() =&gt; {
        resolve(null)
      }, this.TIMEOUT * 1.5)

      const controllers = ips.map(() =&gt; new AbortController())
      let hasResolved = false
      let completedCount = 0

      const testIP = (ip: string, index: number) =&gt; {
        const controller = controllers[index]
        axios.get(`http://${ip}:${PORT}/api/task-server/ip`, {
          timeout: this.TIMEOUT,
          signal: controller.signal,
          // validateStatus: status =&gt; status === 200,
        })
          .then(() =&gt; {
            if (!hasResolved) {
              hasResolved = true
              clearTimeout(globalTimeout)
              controllers.forEach((c, i) =&gt; {
                if (i !== index)
                  c.abort()
              })
              resolve(ip)
            }
          })
          .catch(() =&gt; {
            if (!hasResolved) {
              completedCount++
              if (completedCount &gt;= ips.length) {
                clearTimeout(globalTimeout)
                resolve(null)
              }
            }
          })
      }
      ips.forEach(testIP)
    })
  }
}

/**
 * 获取本地有效IP地址
 */
export async function getLocalIP(): Promise&lt;string&gt; {
  return IPManager.getInstance().getLocalIP()
}

</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.20574603662962962" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-11 11:25">2025-04-11 11:25</span>&nbsp;
<a href="https://www.cnblogs.com/risheng">日升_rs</a>&nbsp;
阅读(<span id="post_view_count">36</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18820282" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18820282);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18820282', targetLink: 'https://www.cnblogs.com/risheng/p/18820282', title: 'Electron 开发：获取当前客户端 IP' })">举报</a>
</div>
        