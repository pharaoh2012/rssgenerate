
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/leaf-7-scouts/p/18758243" title="发布于 2025-03-07 18:43">
    <span role="heading" aria-level="2">Qt个人项目总结 —— MySQL数据库查询与断言</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="个人qt项目总结数据库查询断言问题"><strong>个人Qt项目总结——数据库查询断言问题</strong></h1>
<hr>
<ul>
<li>
<p><strong>问题：</strong></p>
<ul>
<li><strong>当我使用MySQL数据库的查询操作时，</strong></li>
<li><strong>如果查询的数据在数据库中不存在，那么Qt会直接被干崩溃</strong></li>
<li><strong>但是？为什么呢？不应该是返回<code>if</code>语句中的结果吗，为什么会崩溃呢？</strong></li>
<li><img src="https://images.cnblogs.com/cnblogs_com/blogs/836341/galleries/2434904/o_250214071404_image.png" alt="img" loading="lazy"></li>
</ul>
</li>
<li>
<pre><code class="language-c++">bug代码示例
===========================================================================================
        // 查询数据库获取哈希密码和盐
        QSqlQuery query(p-&gt;db);
        query.prepare("SELECT passwd, salt FROM musicplayer WHERE username = :username");
        query.bindValue(":username", username);

        if (!query.exec() || !query.next())
        {
            qDebug() &lt;&lt; "查询失败或用户名不存在：" &lt;&lt; p-&gt;db.lastError();
            QMessageBox::warning(this, "警告", "用户名或密码错误！");
            return;
        }
===========================================================================================
</code></pre>
<hr>
</li>
<li>
<p>为此，我特意写了一个函数用来测试这个问题</p>
</li>
<li>
<p>但是，在此之前，先来回顾几个知识点</p>
</li>
<li>
<p>1.<strong><code>query.exec()</code></strong></p>
<ul>
<li><strong><code>query.exec()</code> 用于执行 SQL 查询语句，返回值代表查询是否成功</strong></li>
<li><strong>如果查询执行成功，返回<code>true</code></strong></li>
<li><strong>如果执行失败（例如表不存在、语法错误等），<code>query.exec()</code> 会返回 <code>false</code></strong></li>
</ul>
</li>
<li>
<p>2.<strong><code>query.next()</code></strong></p>
<ul>
<li><strong><code>query.next()</code> 用于获取查询结果的下一条数据，返回值代表下一行数据是否存在</strong></li>
<li><strong>如果查询执行成功，返回<code>true</code></strong></li>
<li><strong>如果查询为空（没有任何匹配结果），<code>query.next()</code> 会返回 <code>false</code></strong></li>
</ul>
</li>
<li>
<p>3.<strong>与运算符<code>||</code></strong></p>
<ul>
<li><strong>执行顺序是从左至右的</strong></li>
</ul>
<hr>
</li>
<li>
<p>现在再来看看测试函数</p>
</li>
<li>
<pre><code class="language-c++">// 断言bug测试
// 假设数据库已经连接
void Widget::AssertTest()
{
    QSqlQuery query(db);

#if 1
    // 1.使用断言查询一个不存在的人(给Qt干崩溃了) —— 预处理语句
    // 查询结果为空时, query.next() 返回 false
    // 但是没有进一步操作无效数据，程序就跳转到错误处理部分
    // 然后，嘭！你的QT崩溃了，开始今天晚上的修bug之旅吧

    QString username = "111";
    query.prepare("select passwd, salt from musicplayer where username = :username");
    query.bindValue(":username", username);
#else
    // 2.不使用断言查询一个不存在的人(Qt没有崩溃)	—— 拼接字符串
    // 查询结果为空时, query.next() 返回 false
    // 但是没有进一步操作无效数据，程序就跳转到错误处理部分
    // 会继续if条件分支,执行错误处理并退出
    // 没有进一步访问无效数据或发生未定义行为
    query.prepare("select passwd, salt from musicplayer where username = qwwq");
#endif

    // 使用断言时,如果查询数据在数据库中不存在(exec执行),那么Qt就会崩溃
    // 但是如果将query.exec()和query.next()的执行顺序对调
    // 先执行query.next()再执行query.exec()呢
    // 如果这样做了,请尽量不要在你老师面前提及到这件事(会被揍的)........
    // 当然,如果有仇的话,出门的时候可以多报一下你老师的名字.......

    // || 的运算顺序是从左至右

    // 1.if (!query.exec() || !query.next())
    // 先执行query.exec()，再执行query.next()
    // 即：先确保查询语句是否成功再查询有效数据

    // 2.if (!query.next() || !query.exec())
    // 先执行query.next()，再执行query.exec()
    // 即：query.next()先执行,query.next()的行为就会是不可预测的(Qt说不定就又被干崩溃了)，
    //     即使查询没有执行成功，通常也会返回false

    // 如果查询没有执行("exec()"),
    // query.next() 会试图访问无效的结果集,这可能会导致不可预料的行为,甚至崩溃
    // query.exec() 没有执行,那么query.next() 根本就不应该被执行，因为查询结果集并不存在
    // 调用 next() 就是访问不存在的数据

    // 人话:exec()是执行，next()是访问下一行数据
    // 你都没有执行，怎么可以访问下一行数据
    // 再说直接一点，你进家门，门都还没有打开，你就想躺平怎么可能嘛

    // 1.正确写法
    // if (!query.exec() || !query.next())
    // 2.错误写法
    if (!query.next() || !query.exec())
    {
        qDebug() &lt;&lt; "查询失败或用户名不存在：" &lt;&lt; db.lastError();
        QMessageBox::warning(this, "提示", "用户名不存在！");
        return;
    }

    qDebug() &lt;&lt; "查询成功" ;
}
</code></pre>
</li>
<li>
<p>那么，问题来了，为什么使用断言Qt会崩溃，不使用断言就不会崩溃呢？</p>
</li>
<li>
<p>这就得提到断言的工作原理了</p>
<hr>
</li>
<li>
<p><strong>断言的工作原理</strong></p>
<ul>
<li>
<p><strong>断言是在开发过程中用来检查代码正确性的一种手段</strong></p>
</li>
<li>
<p><strong>它会检查某个条件是否为真，如果条件为假，就会中断程序的执行，通常会抛出一个错误或崩溃</strong></p>
</li>
<li>
<p><strong>断言的使用是根据编译模式的不同来决定的：</strong></p>
<ul>
<li><strong>在 调试模式 下，断言会被启用，而在 发布模式 下，它通常会被禁用</strong></li>
</ul>
<hr>
</li>
</ul>
</li>
<li>
<p><strong>为什么不使用断言就不会崩溃？</strong></p>
</li>
<li>
<p><strong>因为<code>query.next()</code>和<code>query.exec()</code>并不会使Qt崩溃，说白了就是断言的锅</strong></p>
</li>
<li>
<p><strong>Qt的设计并不要求开发者强制使用断言来检查查询结果的有效性</strong></p>
</li>
<li>
<p><strong>当查询没有结果时，<code>query.next() </code>返回 false，但不会抛出异常或触发断言</strong></p>
</li>
<li>
<p><strong>它的行为是让开发者检查查询是否成功（通过 <code>query.exec()</code>）以及是否有数据返回（通过 <code>query.next()</code>）</strong></p>
</li>
<li>
<p><strong>如果查询失败或没有结果，开发者通常会自己决定如何处理</strong></p>
</li>
<li>
<p><strong>如果在没有结果的情况下继续访问数据，<code>query.value()</code> 会返回一个无效的默认值（例如空字符串），而不会触发崩溃</strong></p>
</li>
</ul>
<hr>
<p>你以为就这样结束了吗，这个问题？作为bug的专业制造机，我怎么可能只生产一个bug？<br>
还有一个强制性的DLC扩展包</p>
<p>提问：上面的代码还有一个bug，是什么呢？</p>
<pre><code class="language-c++">    // 错误的断言方式(语法错误)
    // QString sql = "SELECT passwd, salt FROM musicplayer WHERE username = " + username;
    // 查询数据库获取哈希密码和盐
    QString sql = "SELECT passwd, salt FROM musicplayer WHERE username = '" + username + "'";
    QSqlQuery query(p-&gt;db);
</code></pre>
<p>不是，谁教你sql执行语句是这样写的啊，字符串格式怎么写的啊，用单引号括起来啊喂<br>
<s>是我自己写的啊，那没事了</s></p>
<ul>
<li>为什么不能这样写？</li>
<li>假设我现在在查询用户名 zzz</li>
<li>代码直接拼接 <code>username</code>，导致生成的 SQL 语句将 <code>zzz</code> 视为列名或标识符，而非字符串值</li>
<li>如果数据库中不存在名为 <code>zzz</code> 的列，查询会返回空结果</li>
<li>当用户名为 <code>zzz</code> 时，生成的 SQL 语法错误，导致查询失败或返回空结果</li>
<li>若用户名包含空格或特殊字符（如 <code>John Doe</code>），问题会更明显，可能导致 SQL 语法错误</li>
</ul>
<p>省流：语法错误		<s>那你讲这么一大堆干什么啊喂</s></p>
<hr>
<p><strong>看了一下我以前写的项目总结，我只能说</strong><br>
<strong>不愧是我，bug制造者，调试的克星，代码的混乱之源，咖啡的吞噬者，深夜的守护者以及键盘毁灭者 —— 某苦逼大学生是也（借用美剧《权力的游戏》龙妈头衔梗）</strong></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.21784839958333332" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-07 19:05">2025-03-07 18:43</span>&nbsp;
<a href="https://www.cnblogs.com/leaf-7-scouts">Scout-leaf</a>&nbsp;
阅读(<span id="post_view_count">3</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18758243" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18758243);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18758243', targetLink: 'https://www.cnblogs.com/leaf-7-scouts/p/18758243', title: 'Qt个人项目总结 —— MySQL数据库查询与断言' })">举报</a>
</div>
        