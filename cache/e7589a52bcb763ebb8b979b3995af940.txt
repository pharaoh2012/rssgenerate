
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/AntToolStuido/p/18687112" title="发布于 2025-01-23 09:33">
    <span role="heading" aria-level="2">.Net类型 引用类型</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><strong>预定义类型引用类型</strong></p>
<p><strong>C#支持两种预定义的引用类型：object 和string</strong></p>
<table style="border-collapse: collapse; width: 100%; height: 63px" border="1">
<tbody>
<tr style="height: 21px">
<td style="width: 32.463%; height: 21px; text-align: center"><strong>名称</strong></td>
<td style="width: 32.463%; height: 21px; text-align: center"><strong>.NET类型</strong></td>
<td style="width: 32.4649%; height: 21px; text-align: center"><strong>说明</strong></td>
</tr>
<tr style="height: 21px">
<td style="width: 32.463%; height: 21px; text-align: center">object</td>
<td style="width: 32.463%; height: 21px; text-align: center">System.Object</td>
<td style="width: 32.4649%; height: 21px; text-align: center">根类型,其他类型都是从它派生而来的(包括值类型)</td>
</tr>
<tr style="height: 21px">
<td style="width: 32.463%; height: 21px; text-align: center">string</td>
<td style="width: 32.463%; height: 21px; text-align: center">System.String</td>
<td style="width: 32.4649%; height: 21px; text-align: center">Unicode字符串</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p><strong>1.object类型</strong></p>
<p><strong>　　</strong>许多编程语言和层次结构都提供了根类型，层次结构中的其他对象都从它派生而来。C#和.Net也不例外。在C#中object类型就是最终的父类型，所有内置类型和用户定义的类型都从它派生而来。这样，object类型就可以用于两个目的。</p>
<ul>
<li><span><span>可以使用object引用来绑定任何特定子类型的对象。例如使用object类型把堆栈中的值对象装箱，再移动堆中。object引用也可以用于反射，此时必须有代码来处理类型未知的对象</span></span></li>
<li>object类实现了许多一般用途的基本方法，包括Equals()、GetHashCode()、GetType() 和ToString()。用户定义的类需要使用一种面向对象技术-重写，来提供其中一些方法的替代实现代码。例如，重写ToString()时，要给类提供一个方法，给出类本身的字符提示。如果类中没有提供这些方法的实现代码，编译器就会使用object类型中的实现代码，它们在类上下文中的执行不一定正确。</li>
</ul>
<p><strong>1.string类型</strong></p>
<p><strong>　　</strong>C#有string关键字,在遮罩下转换为.NET类System.String。有了它，像字符串连接和字符串复制这样的操作就很简单了。</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">string str1 = "Hello";
string str2 = "World";
string str3 = str1 + str2;
</pre>
</div>
<p>　　尽管这是一个值类型的赋值，但string是一个引用类型。string对象被分配在堆上，而不是栈上。因此，<span><strong>当把一个字符串变量赋予另一个字符串时，会得到对内存中同一个字符串的两个引用</strong>。但是string与引用类型的常见行为有一些区别。例如，字符串是不可改变的。修改其中一个字符串，就会创建一个全新的string对象，而另一个字符串不发生任何变化。</span></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="4.982141922806713" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-23 09:33">2025-01-23 09:33</span>&nbsp;
<a href="https://www.cnblogs.com/AntToolStuido">DotNet进阶分享</a>&nbsp;
阅读(<span id="post_view_count">282</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18687112" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18687112);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18687112', targetLink: 'https://www.cnblogs.com/AntToolStuido/p/18687112', title: '.Net类型 引用类型' })">举报</a>
</div>
        