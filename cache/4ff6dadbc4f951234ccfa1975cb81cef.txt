
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/myshiqiqi/p/18699879" title="发布于 2025-02-05 17:42">
    <span role="heading" aria-level="2">C# 版本 6 新增特性</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="c-60-版">C# 6.0 版</h2>
<p>发布时间：2015 年 7 月</p>
<p>版本 6.0 随 Visual Studio 2015 一起发布，发布了很多使得 C# 编程更有效率的小功能。 以下介绍了部分功能：</p>
<ul>
<li><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/using-directive" target="_blank" rel="noopener nofollow">静态导入</a></li>
<li><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/when" target="_blank" rel="noopener nofollow">异常筛选器</a></li>
<li><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/properties" target="_blank" rel="noopener nofollow">自动属性初始化表达式</a></li>
<li><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/lambda-operator#expression-body-definition" target="_blank" rel="noopener nofollow">Expression bodied 成员</a></li>
<li><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/member-access-operators#null-conditional-operators--and-" target="_blank" rel="noopener nofollow">Null 传播器</a></li>
<li><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/tokens/interpolated" target="_blank" rel="noopener nofollow">字符串内插</a></li>
<li><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/nameof" target="_blank" rel="noopener nofollow">nameof 运算符</a></li>
</ul>
<p>其他新功能包括：</p>
<ul>
<li>索引初始化表达式</li>
<li>Catch/Finally 块中的 Await</li>
<li>仅限 getter 属性的默认值</li>
</ul>
<p>如果整体看待这些功能，你会发现一个有趣的模式。 在此版本中，C# 开始消除语言样本，让代码更简洁且更具可读性。 所以对喜欢简洁代码的用户来说，此语言版本非常成功。</p>
<p>除了发布此版本，他们还做了另一件事，虽然这件事本身与传统的语言功能无关。 他们发布了&nbsp;<a href="https://github.com/dotnet/roslyn" target="_blank" rel="noopener nofollow">Roslyn 编译器即服务</a>。 C# 编译器现在是用 C# 编写的，你可以使用编译器作为编程工作的一部分。</p>
<hr>
<p>参考文章：<br>
<a href="https://www.cnblogs.com/SavionZhang/p/11195396.html" target="_blank">C#6.0 新增功能 - 张传宁 - 博客园</a><br>
<a href="https://blog.csdn.net/weixin_46102505/article/details/131102109" target="_blank" rel="noopener nofollow">C#6.0新特性学习_c# 6.0-CSDN博客</a></p>
<hr>
<h1 id="笔记">笔记</h1>
<h3 id="静态导入-using-static">静态导入 <code>using static</code></h3>
<pre><code class="language-c#">using static System.Console; 
using static System.Math; // 可以直接使用该类下的静态成员
</code></pre>
<h3 id="异常筛选器-when-关键字">异常筛选器 <code>when 关键字</code></h3>
<pre><code class="language-c#">catch (ExceptionType [e]) when (expr)

// 👇 when 指定一个条件表达式，为true时才会捕捉该异常
catch (HttpRequestException e) when (e.Message.Contains("301")) 
{ return "Site Moved"; }  
</code></pre>
<pre><code class="language-c#">catch (Exception e) when (e is ArgumentException || e is DivideByZeroException) 
{ Console.WriteLine($"Processing failed: {e.Message}"); }
</code></pre>
<h3 id="自动属性">自动属性</h3>
<pre><code class="language-c#">public string FirstName { get; set; } = string.Empty;  // 声明属性的时候为属性设定初始值
</code></pre>
<h3 id="表达式成员-member--expression">表达式成员 <code>member =&gt; expression;</code></h3>
<pre><code class="language-c#">// 该方法成员使用了lambda表达式
// 该条规则对属性和方法都适用
public override string ToString() =&gt; $"{fname} {lname}".Trim();
</code></pre>
<h3 id="null-传播器--和">Null 传播器 <code>?.</code> 和&nbsp;<code>?[]</code></h3>
<blockquote>
<p>如果&nbsp;<code>a</code>&nbsp;的计算结果为&nbsp;<code>null</code>，则&nbsp;<code>a?.x</code>&nbsp;或&nbsp;<code>a?[x]</code>&nbsp;的结果为&nbsp;<code>null</code>。<br>
如果&nbsp;<code>a</code>&nbsp;的计算结果为非 null，则&nbsp;<code>a?.x</code>&nbsp;或&nbsp;<code>a?[x]</code>&nbsp;的结果将分别与&nbsp;<code>a.x</code>&nbsp;或&nbsp;<code>a[x]</code>&nbsp;的结果相同。</p>
</blockquote>
<pre><code class="language-C#">a?.x // 成员访问
a?[x] // 元素访问
first = person?.FirstName ?? "Unspecified"; // 与 “null合并” 运算符一起使用
// 👆 他们都会执行短路返回
</code></pre>
<h3 id="字符串内插-">字符串内插 <code>$</code></h3>
<pre><code class="language-c#">Console.WriteLine($"Hello, {name}! Today is {date.DayOfWeek}, it's {date:HH:mm} now.");
</code></pre>
<h3 id="nameof-运算符">nameof 运算符</h3>
<p>nameof 表达式可生成变量、类型或成员的名称作为字符串常量。</p>
<pre><code class="language-c#">Console.WriteLine(nameof(System.Collections.Generic)); // output: Generic 
Console.WriteLine(nameof(List&lt;int&gt;)); // output: List 
Console.WriteLine(nameof(List&lt;int&gt;.Count)); // output: Count 
Console.WriteLine(nameof(List&lt;int&gt;.Add)); // output: Add 

List&lt;int&gt; numbers = new List&lt;int&gt;() { 1, 2, 3 }; 
Console.WriteLine(nameof(numbers)); // output: numbers 
Console.WriteLine(nameof(numbers.Count)); // output: Count 
Console.WriteLine(nameof(numbers.Add)); // output: Add
</code></pre>
<h3 id="索引初始化表达式">索引初始化表达式</h3>
<pre><code class="language-c#">private Dictionary&lt;int, string&gt; webErrors = new Dictionary&lt;int, string&gt;
{
    [404] = "Page not Found", // 通过索引直接指定值
    [302] = "Page moved, but left a forwarding address.",
    [500] = "The web server can't come out to play today."
};
</code></pre>
<h3 id="catchfinally-块中的-await">Catch/Finally 块中的 Await</h3>
<pre><code class="language-c#">try     
{
	var responseText = await streamTask;
	return responseText;
} catch (System.Net.Http.HttpRequestException e) when (e.Message.Contains("301"))
{
	await logError("Recovered from redirect", e);  // 👈
	return "Site Moved";
}
finally
{
	await logMethodExit();  // 👈
	client.Dispose();
}
</code></pre>
<h3 id="仅限-getter-属性的默认值">仅限 getter 属性的默认值</h3>
<pre><code class="language-c#">public string LastName {get;} = "Hello"; // 只读的属性也可以有初始化语句，并且，只读的属性可在构造器中进行赋值
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.7706709511076388" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-05 17:47">2025-02-05 17:42</span>&nbsp;
<a href="https://www.cnblogs.com/myshiqiqi">石起起</a>&nbsp;
阅读(<span id="post_view_count">9</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18699879" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18699879);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18699879', targetLink: 'https://www.cnblogs.com/myshiqiqi/p/18699879', title: 'C# 版本 6 新增特性' })">举报</a>
</div>
        