
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mjunz/p/18943503" title="发布于 2025-06-22 23:43">
    <span role="heading" aria-level="2">商品中心—10.商品B端搜索系统的说明文档</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p data-track="4" data-pm-slice="0 0 []"><strong>大纲</strong></p>
<p data-track="5"><strong>1.商品B端搜索系统的运行流程 + 缓存和索引设计</strong></p>
<p data-track="6"><strong>2.商品B端搜索系统监听数据变更与写入ES索引</strong></p>
<p data-track="7"><strong>3.商品B端搜索系统的历史搜索词的实现</strong></p>
<p data-track="8"><strong>4.商品B端搜索系统的搜索词补全的实现</strong></p>
<p data-track="9"><strong>5.商品B端搜索系统的搜索接口实现</strong></p>
<p data-track="10"><strong>6.索引重建</strong></p>
<p data-track="11">&nbsp;</p>
<p data-track="12"><strong>1.商品B端搜索系统的运行流程 + 缓存和索引设计</strong></p>
<p data-track="13"><strong>(1)运行流程</strong></p>
<p data-track="14"><strong>(2)Redis缓存设计</strong></p>
<p data-track="15"><strong>(3)索引设计</strong></p>
<p data-track="16">&nbsp;</p>
<p data-track="17"><strong>(1)运行流程</strong></p>
<div class="pgc-img"><img data-ic="false" data-width="1080" data-height="496" data-ic-uri="" data-src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/4b380cc2390e4f238aa1237f501dbf20~tplv-obj.image?lk3s=ef143cfe&amp;traceid=20250622233807DD57F255DCBBA593FD02&amp;x-expires=2147483647&amp;x-signature=kHxGbdhg8qx4oZcLgrQtWYcXupQ%3D" class="lazyload"></div>
<p data-track="18"><strong>(2)Redis缓存设计</strong></p>
<p data-track="19">使用Redis缓存用户的搜索词记录，比如保存最近的10个搜索词记录，使⽤的数据结构：list。</p>
<pre class="highlighter-hljs"><code>key的格式：history_search_words:{userId}
value的格式：["⽜奶", "鸡蛋", "⻁⽪凤⽖", "正⼤蒸饺"]</code></pre>
<p data-track="21"><strong>(3)索引设计</strong></p>
<p data-track="22"><strong>一.商品索引</strong></p>
<p data-track="23"><strong>二.索引字段说明</strong></p>
<p data-track="24"><strong>三.数据示例</strong></p>
<p data-track="25"><strong>四.搜索补全索引</strong></p>
<p data-track="26">&nbsp;</p>
<p data-track="27"><strong>一.商品索引</strong></p>
<pre class="highlighter-hljs"><code>PUT /sku_info_index
{
    "settings": {
        "number_of_shards": 3,
        "number_of_replicas": 1
    },
    "mappings": {
        "properties": {
            "skuName": {
                "type": "text",
                "analyzer": "ik_max_word",
                "search_analyzer": "ik_smart"
            },
            "basePrice": {
                "type": "integer"
            },
            "vipPrice": {
                "type": "integer"
            },
            "brandId": {
                "type": "keyword"
            },
            "brandName": {
                "type": "keyword"
            },
            "saleCount": {
                "type": "integer"
            },
            "createTime": {
                "type": "date",
                "format": "yyyy-MM-dd HH:mm:ss"
            },
            "updateTime": {
                "type": "date",
                "format": "yyyy-MM-dd HH:mm:ss"
            }
        }
    }
}</code></pre>
<p data-track="29"><strong>二.索引字段说明</strong></p>
<div class="pgc-img"><img data-ic="false" data-width="1080" data-height="475" data-ic-uri="" data-src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/7dec7c7ca34c4c66aeb9cc45c80e82c3~tplv-obj.image?lk3s=ef143cfe&amp;traceid=20250622233807DD57F255DCBBA593FD02&amp;x-expires=2147483647&amp;x-signature=qncxOtdRvDkh7LHy1LDefRw8Axo%3D" class="lazyload"></div>
<p data-track="30"><strong>三.数据示例</strong></p>
<pre class="highlighter-hljs"><code>{
    "_index": "sku_info_index",
    "_type": "_doc",
    "_id": "8000177337",
    "_score": 1.0,
    "_source": {
        "skuName": "Apple iPhone 13 Pro Max 256GB 苍岭绿⾊ ⽀持移动联通电信5G 双卡双待⼿机",
        "brandName": "苹果",
        "createTime": "2022-03-12 08:24:57",
        "brandId": 4,
        "vipPrice": 9799,
        "updateTime": "2022-03-12 08:24:57",
        "basePrice": 9999
    }
}</code></pre>
<p data-track="32"><strong>四.搜索补全索引</strong></p>
<pre class="highlighter-hljs"><code>put /completion_word_index
{
    "settings": {
        "number_of_shards": 3,
        "number_of_replicas": 1,
        "analysis": {
            "analyzer": {
                "ik_and_pinyin_analyzer": {
                    "type": "custom",
                    "tokenizer": "ik_smart",
                    "filter": "my_pinyin"
                }
            },
            "filter": {
                "my_pinyin": {
                    "type": "pinyin",
                    "keep_first_letter": true,
                    "keep_full_pinyin": true,
                    "keep_original": true,
                    "remove_duplicated_term": true
                }
            }
        }
    },
    "mappings": {
        "properties": {
            "completion_word": {
                "type": "completion",
                "analyzer": "ik_and_pinyin_analyzer"
            }
        }
    }
}</code></pre>
<p data-track="34">&nbsp;</p>
<p data-track="35"><strong>2.商品B端搜索系统监听数据变更与写入ES索引</strong></p>
<p data-track="36"><strong>(1)消息处理系统添加数据监听配置</strong></p>
<p data-track="37"><strong>(2)商品B端搜索系统下的数据变更消息消费者</strong></p>
<p data-track="38"><strong>(3)sku表变更消息处理器</strong></p>
<p data-track="39"><strong>(4)item表变更消息处理器</strong></p>
<p data-track="40">&nbsp;</p>
<p data-track="41"><strong>(1)消息处理系统添加数据监听配置</strong></p>
<p data-track="42"><strong>一.data_change_listen_config表</strong></p>
<pre class="highlighter-hljs"><code>INSERT INTO data_change_listen_config (id, table_name, key_column, filter_flag, del_flag, create_user, create_time, update_user, update_time) 
VALUES (1, 'sku_info', 'sku_id', 1, 1, 0, '2022-02-25 13:42:28', 0, '2022-02-25 13:42:28');
INSERT INTO data_change_listen_config (id, table_name, key_column, filter_flag, del_flag, create_user, create_time, update_user, update_time) 
VALUES (2, 'item_info', 'item_id', 1, 1, 0, '2022-02-25 13:42:28', 0, '2022-02-25 13:42:28');</code></pre>
<p data-track="44"><strong>二.data_change_column_config表</strong></p>
<pre class="highlighter-hljs"><code>INSERT INTO data_change_column_config (id, listen_id, listen_column, del_flag, create_user, create_time, update_user, update_time)
VALUES (1, 1, 'sku_name', 1, 0, '2022-02-25 13:43:28', 0, '2022-02-25 13:43:28');
INSERT INTO data_change_column_config (id, listen_id, listen_column, del_flag, create_user, create_time, update_user, update_time)
VALUES (2, 1, 'channel', 1, 0, '2022-02-25 13:43:28', 0, '2022-02-25 13:43:28');
INSERT INTO data_change_column_config (id, listen_id, listen_column, del_flag, create_user, create_time, update_user, update_time)
VALUES (3, 1, 'features', 1, 0, '2022-02-25 13:43:28', 0, '2022-02-25 13:43:28');
INSERT INTO data_change_column_config (id, listen_id, listen_column, del_flag, create_user, create_time, update_user, update_time)
VALUES (4, 1, 'vip_price', 1, 0, '2022-02-25 13:43:28', 0, '2022-02-25 13:43:28');
INSERT INTO data_change_column_config (id, listen_id, listen_column, del_flag, create_user, create_time, update_user, update_time)
VALUES (5, 1, 'base_price', 1, 0, '2022-02-25 13:43:28', 0, '2022-02-25 13:43:28');
INSERT INTO data_change_column_config (id, listen_id, listen_column, del_flag, create_user, create_time, update_user, update_time)
VALUES (6, 2, 'brand_id', 1, 0, '2022-02-25 13:43:28', 0, '2022-02-25 13:43:28');</code></pre>
<p data-track="46"><strong>三.data_change_message_config表</strong></p>
<pre class="highlighter-hljs"><code>INSERT INTO data_change_message_config (id, listen_id, notify_column, message_topic, delay_level, message_type, del_flag, create_user, create_time, update_user, update_time)
VALUES (1, 1, 'id,sku_id', 'product_update_topic', 3, 1, 1, 0, '2022-02-25 13:45:24', 0, '2022-02-25 13:45:24');
INSERT INTO data_change_message_config (id, listen_id, notify_column, message_topic, delay_level, message_type, del_flag, create_user, create_time, update_user, update_time)
VALUES (3, 2, 'id,item_id', 'product_update_topic', 3, 1, 1, 0, '2022-02-25 13:45:24', 0, '2022-02-25 13:45:24');</code></pre>
<p data-track="48"><strong>(2)商品B端搜索系统下的数据变更消息消费者</strong></p>
<pre class="highlighter-hljs"><code>@Configuration
public class ConsumerBeanConfig {
    //配置内容对象
    @Autowired
    private RocketMQProperties rocketMQProperties;
    
    //监听商品修改的MQ消息
    @Bean("productUpdateTopic")
    public DefaultMQPushConsumer productUpdateTopic(ProductUpdateListener productUpdateListener) throws MQClientException {
        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(RocketMqConstant.PRODUCT_UPDATE_CONSUMER_GROUP);
        consumer.setNamesrvAddr(rocketMQProperties.getNameServer());
        consumer.subscribe(RocketMqConstant.PRODUCT_UPDATE_TOPIC, "*");
        consumer.registerMessageListener(productUpdateListener);
        consumer.start();
        return consumer;
    }
}

//搜索模块在商品变更的时候更新商品索引
@Component
public class ProductUpdateListener implements MessageListenerConcurrently {
    @Autowired
    private MessageHandlerManager messageHandlerManager;

    @Override
    public ConsumeConcurrentlyStatus consumeMessage(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext) {
        try {
            for (MessageExt messageExt : list) {
                String msg = new String(messageExt.getBody());
                log.info("执行商品索引数据更新逻辑，消息内容：{}", msg);
  
                TableDataChangeDTO tableDataChangeDTO = JsonUtil.json2Object(msg, TableDataChangeDTO.class);
                //处理消息
                messageHandlerManager.handleMessage(tableDataChangeDTO);
            }
        } catch (Exception e){
            log.error("consume error, 商品索引数据更新失败", e);
            //本次消费失败，下次重新消费
            return ConsumeConcurrentlyStatus.RECONSUME_LATER;
        }
        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
    }
}

@Component
public class MessageHandlerManager {
    //继承了MessageHandler的ItemInfoTableMessageHandler和SkuInfoTableMessageHandler都会被注入到这里
    @Autowired
    private List&lt;MessageHandler&gt; messageHandlers;
    
    public void handleMessage(TableDataChangeDTO tableDataChangeDTO) throws IOException {
        MessageHandler messageHandlerToUse = messageHandlers.stream()
            .filter(e -&gt; StringUtils.equals(e.tableName(), tableDataChangeDTO.getTableName()))
            .findFirst()
            .orElse(null);
        if (messageHandlerToUse == null) {
            return;
        }
        messageHandlerToUse.handleMessage(tableDataChangeDTO);
    }
}</code></pre>
<p data-track="50"><strong>(3)sku表变更消息处理器</strong></p>
<pre class="highlighter-hljs"><code>@Component
public class SkuInfoTableMessageHandler implements MessageHandler {
    @Autowired
    private ProductSearchRepository productSearchRepository;
    
    @Override
    public String tableName() {
        return "sku_info";
    }
    
    @Override
    public void handleMessage(TableDataChangeDTO tableDataChangeDTO) throws IOException {
        String skuId = String.valueOf(tableDataChangeDTO.getKeyId());
        //到数据库查询索引相关的信息
        ProductSearchDO productSearchDO = productSearchRepository.queryProductSearchInfo(skuId);
        //保存索引数据到ES
        productSearchRepository.saveProductSearchInfos(Collections.singletonList(productSearchDO));
    }
}

@Repository
public class ProductSearchRepository {
    private static final String SKU_INFO_INDEX = "sku_info_index";
    
    @Autowired
    private RestHighLevelClient restHighLevelClient;
    
    @Autowired
    private SkuInfoMapper skuInfoMapper;
    
    //根据skuId查询和商品索引相关的信息
    public ProductSearchDO queryProductSearchInfo(String skuId) {
        return skuInfoMapper.queryProductSearchInfo(skuId);
    }
    
    //批量保存商品索引数据
    public void saveProductSearchInfos(List&lt;ProductSearchDO&gt; productSearchDOS) throws IOException {
        BulkRequest bulkRequest = new BulkRequest();
        for (ProductSearchDO productSearchDO : productSearchDOS) {
            Map&lt;String, Object&gt; jsonMap = new HashMap&lt;&gt;();
            jsonMap.put("skuName", productSearchDO.getSkuName());
            jsonMap.put("basePrice", productSearchDO.getBasePrice());
            jsonMap.put("vipPrice", productSearchDO.getVipPrice());
            jsonMap.put("brandId", productSearchDO.getBrandId());
            jsonMap.put("brandName", productSearchDO.getBrandName());
            jsonMap.put("createTime", new Date());
            jsonMap.put("updateTime", new Date());
            IndexRequest indexRequest = new IndexRequest(SKU_INFO_INDEX).id(productSearchDO.getSkuId()).source(jsonMap);
            bulkRequest.add(indexRequest);
        }
        restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);
    }
    ...
}</code></pre>
<p data-track="52"><strong>(4)item表变更消息处理器</strong></p>
<pre class="highlighter-hljs"><code>@Component
public class ItemInfoTableMessageHandler implements MessageHandler {
    @Autowired
    private ProductSearchRepository productSearchRepository;
    
    @Override
    public String tableName() {
        return "item_info";
    }
    
    @Override
    public void handleMessage(TableDataChangeDTO tableDataChangeDTO) throws IOException {
        String itemId = String.valueOf(tableDataChangeDTO.getKeyId());
        List&lt;ProductSearchDO&gt; productSearchDOS = productSearchRepository.queryProductSearchInfos(itemId);
        productSearchRepository.saveProductSearchInfos(productSearchDOS);
    }
}

@Repository
public class ProductSearchRepository {
    private static final String SKU_INFO_INDEX = "sku_info_index";
    
    @Autowired
    private RestHighLevelClient restHighLevelClient;
    
    @Autowired
    private SkuInfoMapper skuInfoMapper;
    
    //根据itemId查询和商品索引相关的信息
    public List&lt;ProductSearchDO&gt; queryProductSearchInfos(String itemId) {
        return skuInfoMapper.queryProductSearchInfos(itemId);
    }
    
    //批量保存商品索引数据
    public void saveProductSearchInfos(List&lt;ProductSearchDO&gt; productSearchDOS) throws IOException {
        BulkRequest bulkRequest = new BulkRequest();
        for (ProductSearchDO productSearchDO : productSearchDOS) {
            Map&lt;String, Object&gt; jsonMap = new HashMap&lt;&gt;();
            jsonMap.put("skuName", productSearchDO.getSkuName());
            jsonMap.put("basePrice", productSearchDO.getBasePrice());
            jsonMap.put("vipPrice", productSearchDO.getVipPrice());
            jsonMap.put("brandId", productSearchDO.getBrandId());
            jsonMap.put("brandName", productSearchDO.getBrandName());
            jsonMap.put("createTime", new Date());
            jsonMap.put("updateTime", new Date());
            IndexRequest indexRequest = new IndexRequest(SKU_INFO_INDEX).id(productSearchDO.getSkuId()).source(jsonMap);
            bulkRequest.add(indexRequest);
        }
        restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);
    }
    ...
}</code></pre>
<p data-track="54">&nbsp;</p>
<p data-track="55"><strong>3.商品B端搜索系统的历史搜索词的实现</strong></p>
<p data-track="56"><strong>(1)商品B端保存历史搜索词的接⼝</strong></p>
<p data-track="57"><strong>(2)商品B端查询历史搜索词的接⼝</strong></p>
<p data-track="58">&nbsp;</p>
<p data-track="59"><strong>(1)商品B端保存历史搜索词的接⼝</strong></p>
<pre class="highlighter-hljs"><code>使用场景：商家输入搜索词搜索商品的时候
接口说明：把商家搜索过的词保存到Redis的List数据结构中</code></pre>
<pre class="highlighter-hljs"><code>//商品搜索服务
@DubboService(version = "1.0.0", interfaceClass = ProductSearchApi.class, retries = 0)
public class ProductSearchApiImpl implements ProductSearchApi {
    @Resource
    private RedisCache redisCache;
    
    @Resource
    private ProductSearchRepository productSearchRepository;
    
    //保存历史搜索词接口
    @Override
    public JsonResult&lt;HistorySearchWordResultDTO&gt; saveHistorySearchWord(HistorySearchWordRequest request) {
        //在队列头部添加新的历史搜索词
        redisCache.lpush(HistorySearchWordConstants.getKey(request.getUserId()), request.getHistorySearchWord());
        //修改队列只保存固定数量的搜索词
        redisCache.ltrim(HistorySearchWordConstants.getKey(request.getUserId()), 0, HistorySearchWordConstants.HISTORY_WORD_COUNT_PER_USER - 1);
        return JsonResult.buildSuccess(new HistorySearchWordResultDTO(true));
    }
    ...
}

//保存用户历史搜索词请求
@Data
public class HistorySearchWordRequest implements Serializable {
    //用户id
    private Long userId;
    //新的历史搜索词
    private String historySearchWord;
}</code></pre>
<p data-track="62"><strong>(2)商品B端查询历史搜索词的接⼝</strong></p>
<pre class="highlighter-hljs"><code>使用场景：展示商家的搜索历史记录的时候
接口说明：从Redis列表中查询商家的历史搜索词</code></pre>
<pre class="highlighter-hljs"><code>//商品搜索服务
@DubboService(version = "1.0.0", interfaceClass = ProductSearchApi.class, retries = 0)
public class ProductSearchApiImpl implements ProductSearchApi {
    @Resource
    private RedisCache redisCache;
    
    @Resource
    private ProductSearchRepository productSearchRepository;
    
    //查询历史搜索词接口
    @Override
    public JsonResult&lt;HistorySearchWordDTO&gt; listHistorySearchWords(HistorySearchWordQuery request) {
        List&lt;String&gt; result = redisCache.lrange(HistorySearchWordConstants.getKey(request.getUserId()), 0, HistorySearchWordConstants.HISTORY_WORD_COUNT_PER_USER - 1);
        return JsonResult.buildSuccess(new HistorySearchWordDTO(result));
    }
    ...
}

//查询商家历史搜索词请求
@Data
public class HistorySearchWordQuery implements Serializable {
    //用户id
    private Long userId;
}</code></pre>
<p data-track="65">&nbsp;</p>
<p data-track="66"><strong>4.商品B端搜索系统的搜索词补全的实现</strong></p>
<p data-track="67"><strong>(1)商品B端搜索系统的添加搜索补全词的接⼝</strong></p>
<p data-track="68"><strong>(2)商品B端搜索系统查询搜索补全词的接口</strong></p>
<p data-track="69"><strong>(3)商品B端搜索词补全的接口</strong></p>
<p data-track="70">&nbsp;</p>
<p data-track="71"><strong>(1)商品B端搜索系统的添加搜索补全词的接⼝</strong></p>
<pre class="highlighter-hljs"><code>使用场景：运营人员添加搜索补全词的时候
接口说明：把搜索补全词保存到ES的搜索补全词索引中</code></pre>
<pre class="highlighter-hljs"><code>//搜索词
@DubboService(version = "1.0.0", interfaceClass = CompletionSearchWordApi.class, retries = 0)
public class CompletionSearchWordApiImpl implements CompletionSearchWordApi {
    @Autowired
    private CompletionSearchWordService completionSearchWordService;
    
    //保存搜索补全词接口
    @Override
    public JsonResult&lt;CompletionSearchWordResultDTO&gt; saveCompletionSearchWord(CompletionSearchWordRequest request) {
        try {
            CompletionSearchWordResultDTO resultDTO = completionSearchWordService.saveCompletionSearchWord(request);
            return JsonResult.buildSuccess(resultDTO);
        } catch (ProductBizException e) {
            log.error("biz error: request={}", JSON.toJSONString(request), e);
            return JsonResult.buildError(e.getErrorCode(), e.getErrorMsg());
        } catch (Exception e) {
            log.error("system error: request={}", JSON.toJSONString(request), e);
            return JsonResult.buildError(e.getMessage());
        }
    }
    ...
}

@Service
public class CompletionSearchWordServiceImpl implements CompletionSearchWordService {
    @Autowired
    private CompletionSearchWordRepository completionSearchWordRepository;
    
    //保存搜索补全词
    @Override
    public CompletionSearchWordResultDTO saveCompletionSearchWord(CompletionSearchWordRequest request) throws IOException {
        return completionSearchWordRepository.saveCompletionSearchWord(request);
    }
    ...
}

//运营添加搜索补全词请求
@Data
public class CompletionSearchWordRequest implements Serializable {
    //索引名称
    private String indexName;
    //字段名称
    private String fieldName;
    //要添加的补全词
    private List&lt;String&gt; completionSearchWords;
}

@Repository
public class CompletionSearchWordRepository {
    @Autowired
    private RestHighLevelClient restHighLevelClient;
    
    //保存搜索补全词
    public CompletionSearchWordResultDTO saveCompletionSearchWord(CompletionSearchWordRequest request) throws IOException {
        BulkRequest bulkRequest = new BulkRequest(request.getIndexName());
        List&lt;String&gt; completionSearchWords = request.getCompletionSearchWords();
        for (String completionSearchWord : completionSearchWords) {
            bulkRequest.add(new IndexRequest().source(XContentType.JSON, request.getFieldName(), completionSearchWord));
        }
        restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);
        return new CompletionSearchWordResultDTO(true);
    }
    ...
}</code></pre>
<p data-track="74"><strong>(2)商品B端搜索系统查询搜索补全词的接口</strong></p>
<pre class="highlighter-hljs"><code>使用场景：后台展示搜索补全词列表的时候
接口说明：从ES的搜索补全词索引中分页查询数据</code></pre>
<pre class="highlighter-hljs"><code>//搜索词
@DubboService(version = "1.0.0", interfaceClass = CompletionSearchWordApi.class, retries = 0)
public class CompletionSearchWordApiImpl implements CompletionSearchWordApi {
    @Autowired
    private CompletionSearchWordService completionSearchWordService;
    
    //查询补全词接口
    @Override
    public JsonResult&lt;PageResult&lt;CompletionSearchWordDTO&gt;&gt; listCompletionSearchWordPage(QueryCompletionSearchWordPageRequest request) {
        try {
            PageResult&lt;CompletionSearchWordDTO&gt; resultDTO = completionSearchWordService.listCompletionSearchWordPage(request);
            return JsonResult.buildSuccess(resultDTO);
        } catch (ProductBizException e) {
            log.error("biz error: request={}", JSON.toJSONString(request), e);
            return JsonResult.buildError(e.getErrorCode(), e.getErrorMsg());
        } catch (Exception e) {
            log.error("system error: request={}", JSON.toJSONString(request), e);
            return JsonResult.buildError(e.getMessage());
        }
    }
    ...
}

@Service
public class CompletionSearchWordServiceImpl implements CompletionSearchWordService {
    @Autowired
    private CompletionSearchWordRepository completionSearchWordRepository;
    
    //查询搜索补全词
    @Override
    public PageResult&lt;CompletionSearchWordDTO&gt; listCompletionSearchWordPage(QueryCompletionSearchWordPageRequest request) throws IOException {
        return completionSearchWordRepository.listCompletionSearchWordPage(request);
    }
    ...
}

//后台查询搜索词列表请求
@Data
public class QueryCompletionSearchWordPageRequest extends PageRequest {
    //索引名称
    private String indexName;
    //字段名称
    private String fieldName;
    //补全词
    private String completionSearchWord;
}

@Repository
public class CompletionSearchWordRepository {
    @Autowired
    private RestHighLevelClient restHighLevelClient;
    ...
    
    //查询搜索补全词
    public PageResult&lt;CompletionSearchWordDTO&gt; listCompletionSearchWordPage(QueryCompletionSearchWordPageRequest request) throws IOException {
        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();
        if (StringUtils.isNotBlank(request.getCompletionSearchWord())) {
            searchSourceBuilder.query(QueryBuilders.matchQuery(request.getFieldName(), request.getCompletionSearchWord()));
        }
  
        int from = (request.getPageNum() - 1) * request.getPageSize();
        searchSourceBuilder.from(from);
        searchSourceBuilder.size(request.getPageSize());
  
        SearchRequest searchRequest = new SearchRequest(request.getIndexName());
        searchRequest.source(searchSourceBuilder);
  
        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);
  
        PageResult&lt;CompletionSearchWordDTO&gt; pageResult = new PageResult&lt;&gt;();
        List&lt;CompletionSearchWordDTO&gt; pageContent = new ArrayList&lt;&gt;();
        SearchHit[] hits = searchResponse.getHits().getHits();
        for (SearchHit hit : hits) {
            pageContent.add(new CompletionSearchWordDTO(((String) hit.getSourceAsMap().get(request.getFieldName()))));
        }
        pageResult.setContent(pageContent);
        pageResult.setTotalElements(searchResponse.getHits().getTotalHits().value);
        pageResult.setSize(request.getPageSize());
        pageResult.setNumber(request.getPageNum());
        return pageResult;
    }
    ...
}</code></pre>
<p data-track="77"><strong>(3)商品B端搜索词补全的接口</strong></p>
<pre class="highlighter-hljs"><code>使用场景：商家在搜索框输入搜索词的时候
接口说明：根据输入的搜索词从ES的搜索补全词索引中查询对应的词</code></pre>
<pre class="highlighter-hljs"><code>//商品搜索
@DubboService(version = "1.0.0", interfaceClass = ProductSearchApi.class, retries = 0)
public class ProductSearchApiImpl implements ProductSearchApi {
    @Resource
    private RedisCache redisCache;
    
    @Resource
    private ProductSearchRepository productSearchRepository;
    ...
    
    //搜索词补全接口
    @Override
    public JsonResult&lt;CompletionSearchWordsDTO&gt; listCompletionSearchWords(CompletionSearchWordQuery request) {
        try {
            CompletionSearchWordsDTO result = productSearchRepository.listCompletionSearchWords(request);
            return JsonResult.buildSuccess(result);
        } catch (Exception e) {
            e.printStackTrace();
            return JsonResult.buildError(e.getMessage());
        }
    }
    ...
}

//补全用户搜索词请求
@Data
public class CompletionSearchWordQuery {
    //索引名称
    private String indexName;
    //字段名称
    private String fieldName;
    //需要补全的词(用户输入的内容)
    private String text;
    //返回多少个补全后的词
    private int count;
}

//商品搜索
@Repository
public class ProductSearchRepository {
    private static final String MY_SUGGEST = "my_suggest";
    
    @Resource
    private RestHighLevelClient restHighLevelClient;
    
    //搜索词补全
    public CompletionSearchWordsDTO listCompletionSearchWords(CompletionSearchWordQuery request) throws IOException {
        //1.构建CompletionSuggestion条件
        CompletionSuggestionBuilder completionSuggestionBuilder = SuggestBuilders.completionSuggestion(request.getFieldName());
        completionSuggestionBuilder.prefix(request.getText());
        completionSuggestionBuilder.skipDuplicates(true);
        completionSuggestionBuilder.size(request.getCount());
  
        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();
        searchSourceBuilder.sort(new ScoreSortBuilder().order(SortOrder.DESC));
        searchSourceBuilder.suggest(new SuggestBuilder().addSuggestion(MY_SUGGEST, completionSuggestionBuilder));
  
        //2.封装搜索请求
        SearchRequest searchRequest = new SearchRequest();
        searchRequest.indices(request.getIndexName());
        searchRequest.source(searchSourceBuilder);
  
        //3.查询elasticsearch
        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);
  
        //4.获取响应中的补全的词的列表
        CompletionSuggestion completionSuggestion = searchResponse.getSuggest().getSuggestion(MY_SUGGEST);
        List&lt;CompletionSuggestion.Entry.Option&gt; options = completionSuggestion.getEntries().get(0).getOptions();
  
        List&lt;String&gt; result = new ArrayList&lt;&gt;();
        for (CompletionSuggestion.Entry.Option option : options) {
            result.add(option.getText().string());
        }
        return new CompletionSearchWordsDTO(result);
    }
    ...
}</code></pre>
<p data-track="80">&nbsp;</p>
<p data-track="81"><strong>5.商品B端搜索系统的搜索接口实现</strong></p>
<p data-track="82"><strong>(1)商品B端的搜索查询接口</strong></p>
<p data-track="83"><strong>(2)商品B端的结构化查询接口</strong></p>
<p data-track="84">&nbsp;</p>
<p data-track="85"><strong>(1)商品B端的搜索查询接口</strong></p>
<pre class="highlighter-hljs"><code>使用场景：商家搜索商品的时候
接口说明：根据输入的搜索词从商品索引中查询skuId列表</code></pre>
<pre class="highlighter-hljs"><code>//商品搜索
@DubboService(version = "1.0.0", interfaceClass = ProductSearchApi.class, retries = 0)
public class ProductSearchApiImpl implements ProductSearchApi {
    ...
    //商品搜索查询接口
    @Override
    public JsonResult&lt;PorductSearchDTO&gt; searchProducts(ProductSearchQuery request) {
        try {
            PorductSearchDTO result = productSearchRepository.searchProducts(request);
            return JsonResult.buildSuccess(result);
        } catch (Exception e) {
            e.printStackTrace();
            return JsonResult.buildError(e.getMessage());
        }
    }
    ...
}

//商品搜索请求
@Data
public class ProductSearchQuery extends PageQuery {
    //索引名字
    private String indexName;
    //查询参数
    private Map&lt;String, String&gt; queryTexts;
    //高亮字段
    private String highLightField;
}

//商品搜索
@Repository
public class ProductSearchRepository {
    private static final String MY_SUGGEST = "my_suggest";
    
    @Resource
    private RestHighLevelClient restHighLevelClient;
    ...
    
    //商品搜索查询接口
    public PorductSearchDTO searchProducts(ProductSearchQuery request) throws IOException {
        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();
        searchSourceBuilder.trackTotalHits(true);
  
        //1.构建match条件
        request.getQueryTexts().forEach((field, text) -&gt; {
            searchSourceBuilder.query(QueryBuilders.matchQuery(field, text));
        });
  
        //2.设置搜索高亮配置
        HighlightBuilder highlightBuilder = new HighlightBuilder();
        highlightBuilder.field(request.getHighLightField());
        highlightBuilder.preTags("&lt;span stype=color:red&gt;");
        highlightBuilder.postTags("&lt;/span&gt;");
        highlightBuilder.numOfFragments(0);
        searchSourceBuilder.highlighter(highlightBuilder);
  
        //3.设置搜索分页参数
        int from = (request.getPageNum() - 1) * request.getPageSize();
        searchSourceBuilder.from(from);
        searchSourceBuilder.size(request.getPageSize());
  
        //4.封装搜索请求
        SearchRequest searchRequest = new SearchRequest(request.getIndexName());
        searchRequest.source(searchSourceBuilder);
  
        //5.查询elasticsearch
        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);
  
        //6.对结果进行高亮处理
        SearchHits hits = searchResponse.getHits();
        for (SearchHit hit : hits) {
            HighlightField highlightField = hit.getHighlightFields().get(request.getHighLightField());
            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();
            Text[] fragments = highlightField.fragments();
            StringBuilder builder = new StringBuilder();
            for (Text fragment : fragments) {
                builder.append(fragment.string());
            }
            sourceAsMap.put(request.getHighLightField(), builder.toString());
        }
  
        //7.封装返回结果
        return buildPorductSearchDTO(hits, request.getPageNum(), request.getPageSize());
    }
    ...
}</code></pre>
<p data-track="88"><strong>(2)商品B端的结构化查询接口</strong></p>
<pre class="highlighter-hljs"><code>使用场景：商家对搜索结果过滤和排序的时候
接口说明：根据用户输入的过滤和排序条件从商品索引中查询skuId列表</code></pre>
<pre class="highlighter-hljs"><code>//商品搜索
@DubboService(version = "1.0.0", interfaceClass = ProductSearchApi.class, retries = 0)
public class ProductSearchApiImpl implements ProductSearchApi {
    ...
    //商品结构化查询接口
    @Override
    public JsonResult&lt;PorductSearchDTO&gt; structuredSearchProducts(ProductStructuredQuery request) {
        try {
            PorductSearchDTO result = productSearchRepository.structuredSearchProducts(request);
            return JsonResult.buildSuccess(result);
        } catch (Exception e) {
            e.printStackTrace();
            return JsonResult.buildError(e.getMessage());
        }
    }
    ...
}

//商品结构化查询请求
@Data
public class ProductStructuredQuery extends PageQuery {
    //索引名字
    private String indexName;
    //Query DSL
    private Map&lt;String, Object&gt; queryDsl;
}

//商品搜索
@Repository
public class ProductSearchRepository {
    private static final String MY_SUGGEST = "my_suggest";
    
    @Resource
    private RestHighLevelClient restHighLevelClient;
    ...
    
    //商品结构化查询
    public PorductSearchDTO structuredSearchProducts(ProductStructuredQuery request) throws IOException {
        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();
        searchSourceBuilder.trackTotalHits(true);
  
        //1.解析queryDSL
        String queryDsl = JSON.toJSONString(request.getQueryDsl());
        SearchModule searchModule = new SearchModule(Settings.EMPTY, false, Collections.emptyList());
        NamedXContentRegistry namedXContentRegistry = new NamedXContentRegistry(searchModule.getNamedXContents());
        XContent xContent = XContentFactory.xContent(XContentType.JSON);
        XContentParser xContentParser = xContent.createParser(namedXContentRegistry, LoggingDeprecationHandler.INSTANCE, queryDsl);
        searchSourceBuilder.parseXContent(xContentParser);
  
        //2.设置搜索分页参数
        int from = (request.getPageNum() - 1) * request.getPageSize();
        searchSourceBuilder.from(from);
        searchSourceBuilder.size(request.getPageSize());
  
        //3.封装搜索请求
        SearchRequest searchRequest = new SearchRequest(request.getIndexName());
        searchRequest.source(searchSourceBuilder);
  
        //4.查询elasticsearch
        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);
  
        //5.封装返回结果
        return buildPorductSearchDTO(searchResponse.getHits(), request.getPageNum(), request.getPageSize());
    }
    ...
}</code></pre>
<p data-track="91">&nbsp;</p>
<p data-track="92"><strong>6.索引重建</strong></p>
<p data-track="93"><strong>(1)问题分析</strong></p>
<p data-track="94"><strong>(2)解决方案</strong></p>
<p data-track="95"><strong>(3)操作演示</strong></p>
<p data-track="96"><strong>(4)其他说明</strong></p>
<p data-track="97">&nbsp;</p>
<p data-track="98"><strong>(1)问题分析</strong></p>
<p data-track="99">在实际中可能会遇到正在使⽤的索引需要变化字段类型、增减字段等，这时可能就需要创建新的mappings。</p>
<p data-track="100">&nbsp;</p>
<p data-track="101">因为索引正在被应⽤使⽤，在进⾏操作时就要考虑怎么降低对应⽤的影响，以及如何把⽬前的数据迁移到新的索引中。</p>
<p data-track="102">&nbsp;</p>
<p data-track="103"><strong>(2)解决方案</strong></p>
<p data-track="104">可以使⽤ES的索引别名功能来降低对应⽤的影响，实现不停机重建索引。可以使⽤ES的Scroll API + Bulk API，实现把⽬前的数据迁移到新的索引中。</p>
<p data-track="105">&nbsp;</p>
<p data-track="106"><strong>(3)操作演示</strong></p>
<pre class="highlighter-hljs"><code>一.假设目前正在被使用的商品索引为sku_info_index
二.首先给sku_info_index索引起别名sku_info_index_alias
三.然后需要新建一个索引sku_info_index_v2
四.接着使用Scroll API + Bulk API迁移数据
五.最后把sku_info_index_alias索引别名指向sku_info_index_v2索引</code></pre>
<p data-track="108"><strong>一.目前正在被使用的商品索引</strong></p>
<p data-track="109">sku_info_index现在正在被业务使⽤：</p>
<pre class="highlighter-hljs"><code>PUT /sku_info_index
{
    "settings": {
        "number_of_shards": 3,
        "number_of_replicas": 1
    },
    "mappings":{
        "properties": {
            "skuName": {
                "type": "text",
                "analyzer": "ik_max_word",
                "search_analyzer": "ik_smart"
            },
            "basePrice": {
                "type": "integer"
            },
            "vipPrice": {
                "type": "integer"
            },
            "brandId": {
                "type": "keyword"
            },
            "brandName": {
                "type": "keyword"
            },
            "saleCount": {
                "type": "integer"
            },
            "createTime": {
                "type": "date",
                "format": "yyyy-MM-dd HH:mm:ss"
            },
            "updateTime": {
                "type": "date",
                "format": "yyyy-MM-dd HH:mm:ss"
            }
        }
    }
}</code></pre>
<p data-track="111"><strong>二.给sku_info_index索引起别名</strong></p>
<p data-track="112">让应⽤使⽤sku_info_index_alias别名来操作数据：</p>
<pre class="highlighter-hljs"><code>PUT /sku_info_index/_alias/sku_info_index_alias</code></pre>
<p data-track="114"><strong>三.然后需要新建一个索引sku_info_index_v2</strong></p>
<p data-track="115">新建一个sku_info_index_v2索引：</p>
<pre class="highlighter-hljs"><code>PUT /sku_info_index
{
    "settings": {
        "number_of_shards": 3,
        "number_of_replicas": 1
    },
    "mappings": {
        "properties": {
            "skuName": {
                "type": "text",
                "analyzer": "ik_max_word",
                "search_analyzer": "ik_smart"
            },
            "basePrice": {
                "type": "integer"
            },
            "vipPrice": {
                "type": "integer"
            },
            "brandId": {
                "type": "keyword"
            },
            "brandName": {
                "type": "keyword"
            },
            "saleCount": {
                "type": "integer"
            },
            "label": {
                "type": "integer"
            },
            "createTime": {
                "type": "date",
                "format": "yyyy-MM-dd HH:mm:ss"
            },
            "updateTime": {
                "type": "date",
                "format": "yyyy-MM-dd HH:mm:ss"
            }
        }
    }
}</code></pre>
<p data-track="117"><strong>四.接着使用Scroll API + Bulk API迁移数据</strong></p>
<pre class="highlighter-hljs"><code>#https://www.elastic.co/guide/en/elasticsearch/reference/7.6/search-request-body.html#request-body-search-scroll
POST /sku_info_index/_search?scroll=1m
{
    "size": 3,
    "query": {
        "match_all": { }
    }
}

POST /_bulk
{
    "index": {
        "_index": "sku_info_index_v2",
        "_id": "8000177337"
    }
}
{
    "skuName": "Apple iPhone 13 Pro Max 256GB 苍岭绿⾊ ⽀持移动联通电信5G 双卡双待 ⼿机",
    "brandName": "苹果",
    "createTime": "2022-03-12 08:24:57",
    "brandId": 4,
    "vipPrice": 9799,
    "updateTime": "2022-03-12 08:24:57",
    "basePrice": 9999,
    "label": "新品"
}
{
    "index": {
        "_index": "sku_info_index_v2",
        "_id": "8000177338"
    }
}
{
    "skuName": "Apple iPhone 13 (A2634)128GB 绿⾊ ⽀持移动联通电信5G 双卡双待⼿ 机",
    "brandName": "苹果",
    "createTime": "2022-03-12 08:24:57",
    "brandId": 4,
    "vipPrice": 5798,
    "updateTime": "2022-03-12 08:24:57",
    "basePrice": 5999,
    "label": "爆品"
}
{
    "index": {
        "_index": "sku_info_index_v2",
        "_id": "8000177339"
    }
}
{
    "skuName": "苹果13mini Apple iphone 13 mini 5G新品⼿机 粉⾊ 128GB",
    "brandName": "苹果",
    "createTime": "2022-03-12 08:24:57",
    "brandId": 4,
    "vipPrice": 4900,
    "updateTime": "2022-03-12 08:24:57",
    "basePrice": 5100,
    "label": "超值特惠"
}</code></pre>
<p data-track="119"><strong>五.最后把sku_info_index_alias索引别名指向sku_info_index_v2索引</strong></p>
<pre class="highlighter-hljs"><code>POST /_aliases
{
    "actions": [{
        "remove": {
            "index": "sku_info_index",
            "alias": "sku_info_index_alias"
        }
    }, {
        "add": {
            "index": "sku_info_index_v2",
            "alias": "sku_info_index_alias"
        }
    }]
}</code></pre>
<p data-track="121"><strong>(4)其他说明</strong></p>
<p data-track="122">一.如果在上ES前，就预计索引结构可能会发⽣变化。可以⼀开始就通过索引别名来操作数据，这样当索引结构需要变更时可按上⾯的⽅案及演示实现不停机重建索引。</p>
<p data-track="123">&nbsp;</p>
<p data-track="124">二.当使⽤索引别名时，ES Java API的代码无需任何变化，⽐如下⾯是SearchRequest的构造法⽅法：</p>
<pre class="highlighter-hljs"><code>public SearchRequest(String... indices) {
    this(indices, new SearchSourceBuilder());
}</code></pre>
<p data-track="126">如果直接索引名是example_index，那么创建的SearchRequest对象如下，其中example_index为索引名：</p>
<pre class="highlighter-hljs"><code>new SearchRequest("example_index")</code></pre>
<p data-track="128">如果直接索引example_index对应的索引别名是example_index_alias，那么创建的SearchRequest对象就是：</p>
<pre class="highlighter-hljs"><code>new SearchRequest("example_index_alias")</code></pre>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-22 23:44">2025-06-22 23:43</span>&nbsp;
<a href="https://www.cnblogs.com/mjunz">东阳马生架构</a>&nbsp;
阅读(<span id="post_view_count">6</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18943503);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18943503', targetLink: 'https://www.cnblogs.com/mjunz/p/18943503', title: '商品中心—10.商品B端搜索系统的说明文档' })">举报</a>
</div>
        