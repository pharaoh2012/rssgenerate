
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/vipsoft/p/18729170" title="发布于 2025-02-22 13:34">
    <span role="heading" aria-level="2">反范式设计，冗余用户姓名，修改用户姓名后，业务表同步更新 -- MySQL 存储过程</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>反范式设计，冗余用户姓名，通过存储过程进行业务表的同步更新。<br>
所有的表，在创建的时候，都加了创建人、修改人的字段。。用户姓名发生变化时，要将所有的表都更新一遍。</p>
<h4 id="创建存储过程">创建存储过程</h4>
<p>MySQL</p>
<pre><code class="language-sql">CREATE PROCEDURE UpdateAllUserInfo(IN userId VARCHAR(255), IN newName VARCHAR(255))
BEGIN
    DECLARE var_table_name VARCHAR(255);
    DECLARE done INT DEFAULT 0;
        
    -- 定义游标，查找所有符合条件的表
    DECLARE cur CURSOR FOR
        -- 变量名要和字段名不同，否则后面取变量时，取不取值
        SELECT TABLE_NAME as var_table_name  
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_SCHEMA = 'vipsoft'  -- 注意库名
        AND COLUMN_NAME IN ('create_user_name','create_userId')
        GROUP BY TABLE_NAME
        HAVING COUNT(DISTINCT COLUMN_NAME) = 2;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    -- 打开游标
    OPEN cur;

    -- 循环处理每张表
    read_loop: LOOP
        FETCH cur INTO var_table_name;
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- 动态生成 SQL 语句
        SET @createUser = CONCAT('UPDATE ', var_table_name, ' SET create_user_name = "', newName, '" WHERE create_userId = "', userId, '";');

        -- 打印SQL
        -- SELECT @createUser;
        -- 执行动态 SQL
        PREPARE c_stmt FROM @createUser;
        EXECUTE c_stmt;
        DEALLOCATE PREPARE c_stmt;

       -- 动态生成 SQL 语句
        SET @updateUser = CONCAT('UPDATE ', var_table_name, ' SET update_user_name = "', newName, '" WHERE update_userId = "', userId, '";');
        -- SELECT @updateUser;
        -- 执行动态 SQL
        PREPARE u_stmt FROM @updateUser;
        EXECUTE u_stmt;
        DEALLOCATE PREPARE u_stmt;

    END LOOP;
    -- 关闭游标
    CLOSE cur;

    -- 更新固定表
    SET @proInfo = CONCAT('UPDATE project_info SET project_manager_name = "', newName, '" WHERE project_manager_id = "', userId, '";');

    -- 执行动态 SQL
    PREPARE pro_stmt FROM @proInfo;
    EXECUTE pro_stmt;
    DEALLOCATE PREPARE pro_stmt;


    -- 普通SQL更新
    UPDATE project_task SET user_name = proName WHERE project_id = proId;   

END
</code></pre>
<h3 id="代码调用">代码调用</h3>
<p>MyBatis-Plus 调用代码</p>
<pre><code class="language-java">/**
 * 数据层
 */
public interface SysUserMapper extends BaseMapper&lt;SysUser&gt; {

    @Select("CALL UpdateAllUserInfo(#{userId}, #{newName})")
    void callUpdateUserInfo(@Param("userId") String userId, @Param("newName") String newName);
}

@Autowired
private UserMapper userMapper;
//service 层  如果姓名有变化，才更新
if (entity != null &amp;&amp; !entity.getRealName().equals(param.getRealName())) {
     userMapper.callUpdateUserInfo(userInfo.getId(), userInfo.getRealName());
}
</code></pre>
<p>在 MyBatis-Plus 中调用存储过程（如 <code>CALL UpdateUserInfo('张三', 'zs');</code>），可以通过以下步骤实现：</p>
<hr>
<h3 id="1-使用-select-注解调用存储过程">1. <strong>使用 <code>@Select</code> 注解调用存储过程</strong></h3>
<p>如果你的存储过程没有返回值，可以直接使用 <code>@Select</code> 注解调用存储过程。</p>
<h4 id="示例代码">示例代码</h4>
<pre><code class="language-java">import org.apache.ibatis.annotations.Select;
import org.springframework.stereotype.Repository;

@Repository
public interface UserMapper {

    @Select("CALL UpdateUserInfo(#{newName}, #{userId})")
    void callUpdateUserInfo(@Param("newName") String newName, @Param("userId") String userId);
}
</code></pre>
<h4 id="调用方法">调用方法</h4>
<pre><code class="language-java">import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class UserService {

    @Autowired
    private UserMapper userMapper;

    public void updateUserInfo(String newName, String userId) {
        userMapper.callUpdateUserInfo(newName, userId);
    }
}
</code></pre>
<hr>
<h3 id="2-使用-options-注解设置存储过程调用">2. <strong>使用 <code>@Options</code> 注解设置存储过程调用</strong></h3>
<p>如果存储过程有输出参数或需要设置其他选项，可以使用 <code>@Options</code> 注解。</p>
<h4 id="示例代码-1">示例代码</h4>
<pre><code class="language-java">import org.apache.ibatis.annotations.Options;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.mapping.StatementType;
import org.springframework.stereotype.Repository;

@Repository
public interface UserMapper {

    @Select("CALL UpdateUserInfo(#{newName}, #{userId})")
    @Options(statementType = StatementType.CALLABLE)
    void callUpdateUserInfo(@Param("newName") String newName, @Param("userId") String userId);
}
</code></pre>
<hr>
<h3 id="3-使用-xml-配置调用存储过程">3. <strong>使用 XML 配置调用存储过程</strong></h3>
<p>如果你更喜欢使用 XML 配置，可以在 <code>Mapper.xml</code> 文件中定义存储过程调用。</p>
<h4 id="示例代码-2">示例代码</h4>
<p>在 <code>UserMapper.xml</code> 中：</p>
<pre><code class="language-xml">&lt;select id="callUpdateUserInfo" statementType="CALLABLE"&gt;
    CALL UpdateUserInfo(#{newName}, #{userId})
&lt;/select&gt;
</code></pre>
<p>在 <code>UserMapper</code> 接口中：</p>
<pre><code class="language-java">import org.apache.ibatis.annotations.Param;
import org.springframework.stereotype.Repository;

@Repository
public interface UserMapper {
    void callUpdateUserInfo(@Param("newName") String newName, @Param("userId") String userId);
}
</code></pre>
<hr>
<h3 id="4-处理存储过程的输出参数">4. <strong>处理存储过程的输出参数</strong></h3>
<p>如果存储过程有输出参数，可以通过 <code>Map</code> 或自定义对象接收。</p>
<h4 id="示例代码-3">示例代码</h4>
<pre><code class="language-java">import org.apache.ibatis.annotations.Options;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.mapping.StatementType;
import org.springframework.stereotype.Repository;

import java.util.Map;

@Repository
public interface UserMapper {

    @Select("CALL UpdateUserInfo(#{newName}, #{userId}, #{result, mode=OUT, jdbcType=INTEGER})")
    @Options(statementType = StatementType.CALLABLE)
    void callUpdateUserInfo(
        @Param("newName") String newName,
        @Param("userId") String userId,
        @Param("result") Map&lt;String, Object&gt; resultMap
    );
}
</code></pre>
<h4 id="调用方法-1">调用方法</h4>
<pre><code class="language-java">import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;

@Service
public class UserService {

    @Autowired
    private UserMapper userMapper;

    public void updateUserInfo(String newName, String userId) {
        Map&lt;String, Object&gt; resultMap = new HashMap&lt;&gt;();
        userMapper.callUpdateUserInfo(newName, userId, resultMap);
        System.out.println("存储过程执行结果: " + resultMap.get("result"));
    }
}
</code></pre>
<hr>
<h3 id="5-注意事项">5. <strong>注意事项</strong></h3>
<ol>
<li>
<p><strong>数据库权限</strong>：</p>
<ul>
<li>确保应用程序连接数据库的用户有权限调用存储过程。</li>
</ul>
</li>
<li>
<p><strong>存储过程参数</strong>：</p>
<ul>
<li>确保传入的参数类型和数量与存储过程定义一致。</li>
</ul>
</li>
<li>
<p><strong>事务管理</strong>：</p>
<ul>
<li>如果存储过程中包含多个 SQL 操作，建议在调用存储过程时启用事务管理。</li>
</ul>
</li>
<li>
<p><strong>错误处理</strong>：</p>
<ul>
<li>捕获并处理存储过程执行过程中可能抛出的异常。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="6-完整示例">6. <strong>完整示例</strong></h3>
<p>以下是一个完整的示例，展示如何在 MyBatis-Plus 中调用存储过程：</p>
<h4 id="存储过程定义">存储过程定义</h4>
<pre><code class="language-sql">CREATE PROCEDURE UpdateUserInfo(IN new_name VARCHAR(255), IN user_id VARCHAR(255))
BEGIN
    -- 更新逻辑
    UPDATE pe_test.user_table SET create_user_name = new_name WHERE create_user_id = user_id;
    UPDATE pe_test.demo SET member_name = new_name WHERE member_id = user_id;
END;
</code></pre>
<h4 id="mybatis-plus-调用代码">MyBatis-Plus 调用代码</h4>
<pre><code class="language-java">import org.apache.ibatis.annotations.Select;
import org.springframework.stereotype.Repository;

@Repository
public interface UserMapper {

    @Select("CALL UpdateUserInfo(#{newName}, #{userId})")
    void callUpdateUserInfo(@Param("newName") String newName, @Param("userId") String userId);
}
</code></pre>
<pre><code class="language-java">import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class UserService {

    @Autowired
    private UserMapper userMapper;

    public void updateUserInfo(String newName, String userId) {
        userMapper.callUpdateUserInfo(newName, userId);
    }
}
</code></pre>
<pre><code class="language-java">import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

@Component
public class AppRunner implements CommandLineRunner {

    @Autowired
    private UserService userService;

    @Override
    public void run(String... args) throws Exception {
        userService.updateUserInfo("张三", "zs");
        System.out.println("存储过程调用完成！");
    }
}
</code></pre>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/vipsoft/" target="_blank">VipSoft</a>  转载请注明原文链接：<a href="https://www.cnblogs.com/vipsoft/p/18729170" target="_blank">https://www.cnblogs.com/vipsoft/p/18729170</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.03522236074884259" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-22 13:34">2025-02-22 13:34</span>&nbsp;
<a href="https://www.cnblogs.com/vipsoft">VipSoft</a>&nbsp;
阅读(<span id="post_view_count">1</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18729170" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18729170);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18729170', targetLink: 'https://www.cnblogs.com/vipsoft/p/18729170', title: '反范式设计，冗余用户姓名，修改用户姓名后，业务表同步更新 -- MySQL 存储过程' })">举报</a>
</div>
        