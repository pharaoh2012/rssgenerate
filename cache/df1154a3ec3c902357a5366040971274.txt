
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/dechinphy/p/18735654/cuda_error" title="发布于 2025-02-25 15:55">
    <span role="heading" aria-level="2">CUDA异常捕获</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/2277440/202502/2277440-20250225145305978-919009137.png" alt="CUDA异常捕获" class="desc_img">
        本文主要介绍了在CUDA编程的实践中，增加一个异常捕获的宏模块，以保障CUDA项目结果的准确性。主要代码内容参考了樊哲勇所著的《CUDA编程基础与实践》，是一本很好的CUDA编程入门书籍。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="技术背景">技术背景</h1>
<p>在CUDA编程中有可能会遇到一些相对比较隐蔽的报错，但是直接编译运行cu文件是不显现的。那么可以通过添加一个用于检查的宏，来监测CUDA程序运行过程中可能出现的报错。</p>
<h1 id="errorcuh">error.cuh</h1>
<p>我们在CUDA头文件中实现这个宏：</p>
<pre><code class="language-cuh">#pragma once
#include &lt;stdio.h&gt;

#define CHECK(call) do{const cudaError_t error_code = call; if (error_code != cudaSuccess){printf("CUDA Error:\n"); printf("    File:   %s\n", __FILE__); printf("    Line:   %d\n", __LINE__); printf("    Error code: %d\n", error_code); printf("    Error text: %s\n", cudaGetErrorString(error_code)); exit(1);}} while (0)
</code></pre>
<p>然后在调用CUDA相关函数或者核函数的时候，就可以使用CHECK操作来监测其中有无相关异常。</p>
<h1 id="调用测试">调用测试</h1>
<p>先用一个简单的测试案例，就是显存分配的场景，如果是一个正常的显存分配：</p>
<pre><code class="language-cu">// nvcc ./test_error.cu -Xcompiler -fPIC -o ./test_error &amp;&amp; ./test_error
#include "error.cuh"
#include &lt;stdio.h&gt;

int main(void){
    const int N = 100000000;
    const int M = sizeof(double) * N;
    double *d_x;
    CHECK(cudaMalloc((void **)&amp;d_x, M));
    CHECK(cudaFree(d_x));
    printf("Success!\n");
}
</code></pre>
<p>运行结果是没有报错的：</p>
<pre><code class="language-bash">Success!
</code></pre>
<p>但是如果我们调大N的值，使其超出显存大小：</p>
<pre><code class="language-cu">// nvcc ./test_error.cu -Xcompiler -fPIC -o ./test_error &amp;&amp; ./test_error
#include "error.cuh"
#include &lt;stdio.h&gt;

int main(void){
    const int N = 1000000000;
    const int M = sizeof(double) * N;
    double *d_x;
    CHECK(cudaMalloc((void **)&amp;d_x, M));
    CHECK(cudaFree(d_x));
    printf("Success!\n");
}
</code></pre>
<p>再次运行，就会报OOM错误：</p>
<pre><code class="language-bash">./test_error.cu(7): warning #69-D: integer conversion resulted in truncation
      const int M = sizeof(double) * N;
                    ^

Remark: The warnings can be suppressed with "-diag-suppress &lt;warning-number&gt;"

./test_error.cu(9): warning #68-D: integer conversion resulted in a change of sign
      do{const cudaError_t error_code = cudaMalloc((void **)&amp;d_x, M); if (error_code != cudaSuccess){printf("CUDA Error:\n"); printf("    File:   %s\n", "./test_error.cu"); printf("    Line:   %d\n", 9); printf("    Error code: %d\n", error_code); printf("    Error text: %s\n", cudaGetErrorString(error_code)); exit(1);}} while (0);
                                                                  ^

./test_error.cu(7): warning #69-D: integer conversion resulted in truncation
      const int M = sizeof(double) * N;
                    ^

Remark: The warnings can be suppressed with "-diag-suppress &lt;warning-number&gt;"

./test_error.cu(9): warning #68-D: integer conversion resulted in a change of sign
      do{const cudaError_t error_code = cudaMalloc((void **)&amp;d_x, M); if (error_code != cudaSuccess){printf("CUDA Error:\n"); printf("    File:   %s\n", "./test_error.cu"); printf("    Line:   %d\n", 9); printf("    Error code: %d\n", error_code); printf("    Error text: %s\n", cudaGetErrorString(error_code)); exit(1);}} while (0);
                                                                  ^

./test_error.cu: In function 'int main()':
./test_error.cu:7:31: warning: overflow in conversion from 'long unsigned int' to 'int' changes value from '8000000000' to '-589934592' [-Woverflow]
    7 |     const int M = sizeof(double) * N;
      |               ~~~~~~~~~~~~~~~~^~~~
CUDA Error:
    File:   ./test_error.cu
    Line:   9
    Error code: 2
    Error text: out of memory
</code></pre>
<p>当然，中间因为整形溢出，还有一些其他的warnning信息，但是这里主要要展现的是OOM报错问题。</p>
<h1 id="核函数检测">核函数检测</h1>
<p>上面的异常检测针对是cudaMalloc这个CUDA操作，其实对于核函数，也是一样可以检测出其异常。我们先演示一个正常的示例：</p>
<pre><code class="language-cu">// nvcc ./test_error.cu -Xcompiler -fPIC -o ./test_error &amp;&amp; chmod +x ./test_error &amp;&amp; ./test_error
#include "error.cuh"
#include &lt;math.h&gt;
#include &lt;stdio.h&gt;

void __global__ add(const double *x, const double *y, double *z, const int N){
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx &lt; N){
        z[idx] = x[idx] + y[idx];
    }
}

int main(void){
    const int N = 10;
    const int M = sizeof(double) * N;
    const double a = 1.23;
    double *h_x = (double*) malloc(M);
    for (int n = 0; n &lt; N; ++n)
    {
        h_x[n] = a;
    }
    double *d_x, *d_z;
    CHECK(cudaMalloc((void **)&amp;d_x, M));
    CHECK(cudaMalloc((void **)&amp;d_z, M));
    CHECK(cudaMemcpy(d_x, h_x, M, cudaMemcpyHostToDevice));
    const int block_size = 1024;
    const int grid_size = (N + block_size - 1) / block_size;
    add&lt;&lt;&lt;grid_size, block_size&gt;&gt;&gt;(d_x, d_x, d_z, N);
    CHECK(cudaGetLastError());
    CHECK(cudaDeviceSynchronize());
    CHECK(cudaFree(d_x));
    CHECK(cudaFree(d_z));
    free(h_x);
    printf("Success!\n");
    return 0;
}
</code></pre>
<p>这个CUDA程序运行的是一个数组加法。运行结果：</p>
<pre><code class="language-bash">$ nvcc ./test_error.cu -Xcompiler -fPIC -o ./test_error &amp;&amp; chmod +x ./test_error &amp;&amp; ./test_error
Success!
</code></pre>
<p>调整一下block_size参数：</p>
<pre><code class="language-cu">// nvcc ./test_error.cu -Xcompiler -fPIC -o ./test_error &amp;&amp; chmod +x ./test_error &amp;&amp; ./test_error
#include "error.cuh"
#include &lt;math.h&gt;
#include &lt;stdio.h&gt;

void __global__ add(const double *x, const double *y, double *z, const int N){
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx &lt; N){
        z[idx] = x[idx] + y[idx];
    }
}

int main(void){
    const int N = 10;
    const int M = sizeof(double) * N;
    const double a = 1.23;
    double *h_x = (double*) malloc(M);
    for (int n = 0; n &lt; N; ++n)
    {
        h_x[n] = a;
    }
    double *d_x, *d_z;
    CHECK(cudaMalloc((void **)&amp;d_x, M));
    CHECK(cudaMalloc((void **)&amp;d_z, M));
    CHECK(cudaMemcpy(d_x, h_x, M, cudaMemcpyHostToDevice));
    const int block_size = 1025;
    const int grid_size = (N + block_size - 1) / block_size;
    add&lt;&lt;&lt;grid_size, block_size&gt;&gt;&gt;(d_x, d_x, d_z, N);
    CHECK(cudaGetLastError());
    CHECK(cudaDeviceSynchronize());
    CHECK(cudaFree(d_x));
    CHECK(cudaFree(d_z));
    free(h_x);
    printf("Success!\n");
    return 0;
}
</code></pre>
<p>由于Block大小在CUDA程序中最大只能是1024，因此如果超出这个数就会出现异常，但是如果没有异常检测函数的话，程序是能够正常执行下去的，这样这个异常就会一直保留在程序中。运行结果：</p>
<pre><code class="language-bash">$ nvcc ./test_error.cu -Xcompiler -fPIC -o ./test_error &amp;&amp; chmod +x ./test_error &amp;&amp; ./test_error
CUDA Error:
    File:   ./test_error.cu
    Line:   29
    Error code: 9
    Error text: invalid configuration argument
</code></pre>
<p>因为加上了<code>cudaGetLastError()</code>函数，并使用了异常捕获的宏，所以这里就会提示参数配置异常。</p>
<h1 id="总结概要">总结概要</h1>
<p>本文主要介绍了在CUDA编程的实践中，增加一个异常捕获的宏模块，以保障CUDA项目结果的准确性。主要代码内容参考了樊哲勇所著的《CUDA编程基础与实践》，是一本很好的CUDA编程入门书籍。</p>
<h1 id="版权声明">版权声明</h1>
<p>本文首发链接为：<a href="https://www.cnblogs.com/dechinphy/p/cuda_error.html" target="_blank">https://www.cnblogs.com/dechinphy/p/cuda_error.html</a></p>
<p>作者ID：DechinPhy</p>
<p>更多原著文章：<a href="https://www.cnblogs.com/dechinphy/" target="_blank">https://www.cnblogs.com/dechinphy/</a></p>
<p>请博主喝咖啡：<a href="https://www.cnblogs.com/dechinphy/gallery/image/379634.html" target="_blank">https://www.cnblogs.com/dechinphy/gallery/image/379634.html</a></p>
<h1 id="参考内容">参考内容</h1>
<ol>
<li>《CUDA编程基础与实践》——樊哲勇</li>
<li><a href="https://github.com/brucefan1983/CUDA-Programming/blob/master/src/04-error-check/readme.md" target="_blank" rel="noopener nofollow">https://github.com/brucefan1983/CUDA-Programming/blob/master/src/04-error-check/readme.md</a></li>
</ol>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0040228985625" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-25 16:15">2025-02-25 15:55</span>&nbsp;
<a href="https://www.cnblogs.com/dechinphy">DECHIN</a>&nbsp;
阅读(<span id="post_view_count">7</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18735654" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18735654);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18735654', targetLink: 'https://www.cnblogs.com/dechinphy/p/18735654/cuda_error', title: 'CUDA异常捕获' })">举报</a>
</div>
        