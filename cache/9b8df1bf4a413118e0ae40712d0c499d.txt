
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/hxjz/p/19005157" title="发布于 2025-07-25 18:11">
    <span role="heading" aria-level="2">Redis学习笔记--数据类型和常用命令</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1 style="text-align: center">数据类型和常用命令</h1>
<div>&nbsp;</div>
<div>简介：</div>
<div>Redis全名Remote Dictionary Server（远程字典服务器）是一个高性能的Key-Value数据库提供了主富的数据结构，例如String、Hash、List、Set、SortedSet等等。数据是存在内存中的，同时Redis支持事务、持久化、LUA脚本、发布/订阅、缓存淘汰、流技术等多种功能特性提供了主从模式、Redis Sentinel和Redis Cluster集群架构方案。</div>
<div>命令是不区分大小写的，redis中的key是区分大小写的</div>
<div>Redis默认带有16个数据库，默认使用0数据库，分别是0-15可以通过命令select 0或者select 1来切换不同的互数据库，16是在配置文件中配置的，可以通过修改配置文件来改变数据库的个数。</div>
<div><img alt="0" width="1180" height="804" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935071-1213546242.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>数据类型：</div>
<div>redis一共有十个数据类型，分别是：</div>
<div>String：字符串，一个key对应一个value，它是二进制安全的（支持序列化）可以包含任何类型的数据，比如图片或者序列化对象，是日常工作中最常用的一个类型，也是适用性最强的一个类型。最多可以存512M的数据</div>
<div>List：字符串列表，底层实现是一个双端链表，可以在List的头部或者尾部插入数据。最多可以存放40亿个元素。</div>
<div>Hash：哈希表，是一个String类型的key对应一个value的映射表，适合存储对象（Map）</div>
<div>Set：集合，是String类型的无序集合，集合成员是唯一的，不可重复的。底层通过哈希表实现，它的添加、删除、查找的操作复杂度都是O（1）</div>
<div>ZSet：Sorted Set，和Set一样也是String类型的元素集合，且不允许元素重复，每个元素都会关联一个Double类型的分数，redis通过分数来对集合中的成员进行从小到大的排序，成员元素是不可重复的，但分数是可以重复的，底层通过哈希表实现，它的添加、删除、查找的操作复杂度都是O（1）</div>
<div>GEO：存储地理位置信息，经纬度，可以添加和获取地理位置的坐标，可以计算两个位置之间的差距。</div>
<div>HyperLogLog：是用来做基数统计的，可以在输入元素的数量或者体积非常大的时候占用固定的且很小的数据空间也就是说可以用很小的空间做很多的事</div>
<div>Bitmap：位图，由0和1状态表现组成的二进制位的bit数组</div>
<div>BitField：通过bitfield命令可以一次性操作多个比特位域(指的是连卖的多个比特位)，它会执行一系列操作并返回一个响应数组，这个数组中的元素对应参数列表中的相应操作的执行结果。说白了就是通过bitfield命令我们可以一次性对多个比特位域进行操作</div>
<div>Stream：流，是5.0版本之后添加的新的数据类型，主要用于消息队列，本身是支持订阅和发布的，但是无法做消息的持久化，如果断网或者宕机会导致数据的丢失，也无法记录历史消息。虽然后续redis提供了持久化和主备复制功能，但在实际应用中队列的操作还是通过MQ来实现的。</div>
<div>&nbsp;</div>
<div>Key的常用命令：</div>
<div>keys * 可以查看当前数据库下有哪些key，在生产环境或者大数据两下不能使用，会导致redis被锁，CPU飙升，再生产环境中要禁用。</div>
<div><img alt="0" width="236" height="172" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934898-1956258737.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>exists key 可以查看key是否存在，存在返回1代表true，不存在返回0代表false</div>
<div><img alt="0" width="260" height="122" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934997-571480062.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>type key 可以查看key的类型，这里要注意，即使设置的是数字类型，redis也会当字符串存起来，在使用的时候例如做数字的增减的时候redis会自动当数字类型去处理</div>
<div><img alt="0" width="293" height="269" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935019-1473789681.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>unlink key 可以非阻塞和的删除key，用于对bigKey的删除，可以先释放key的空间将key中的value挪到其它地方，然后异步删除数据，因为没法在命令行中体现删除过程，这里不做演示</div>
<div>&nbsp;</div>
<div>ttl key 用于获取key剩余的过期时间 -1代表永不过期，-2代表已过期，其它正数代表剩余秒数，下图划线处就是很好的例子</div>
<div><img alt="0" width="272" height="236" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934933-1309002146.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>expire key 可以给指定的已存在的key设置过期时间</div>
<div><img alt="0" width="220" height="117" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934915-898861438.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>move key dbindex 可以将key移动到指定的数据库中</div>
<div><img alt="0" width="237" height="208" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934883-848243192.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>select dbindex 可以切换数据库</div>
<div><img alt="0" width="180" height="52" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934887-872349666.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>dbsize 统计当前数据库下key的数量</div>
<div><img alt="0" width="226" height="134" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934952-468611447.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>flushdb 清空当前数据库下的所有key</div>
<div><img alt="0" width="234" height="164" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934996-280050075.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>flushall 清空所有数据库下的所有key，暂不做演示</div>
<div>&nbsp;</div>
<div>String类型常用命令：</div>
<div>应用场景：用作数据缓存，分摊mysql的访问压力，计数器做自增自减使用，会话管理用于存储用户信息，短信验证码等等</div>
<div>set key value 设置key的值为value</div>
<div><img alt="0" width="165" height="34" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934894-128691648.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>get key 获取key的value</div>
<div><img alt="0" width="188" height="68" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934997-1019294493.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>mset key1 value1 key2 value2 key3 value3 同时设置一个或多个kv键值对，是对set的一个升级，m代表multiple，多个的意思</div>
<div><img alt="0" width="233" height="32" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934880-1760473037.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>mget k2 k3 k4 同时获取一个或多个给定的key的value，是对get的一个升级，m代表multiple，多个的意思</div>
<div><img alt="0" width="212" height="68" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934955-308645975.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>msetnx key value key value 同时设置一个或多个kv键值对，当且仅当所有给定的key都不存在时，多个kv时只要有一个给定的key存在都会执行失败，执行成功--1 执行失败--0</div>
<div><img alt="0" width="288" height="321" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934954-498779813.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>set key value 当value是数字类型时，redis会将它以字符串进行存储，做自增自减的时候redis会自动将它转成数字类型并做增减操作，数字类型的增加很适合用作抖音或者公众号的点赞数的增减，点一次加一下也可以取消，取消点一下少一个</div>
<div>incr key 对当前数字做自增，默认自增1，相当于java里的i++</div>
<div><img alt="0" width="221" height="85" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934957-1195760479.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>incrby key number 对当前数字按照预定的数值做自增</div>
<div><img alt="0" width="249" height="70" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934916-1692868871.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>decr key 对当前数字做自减，默认自减1，相当于java里的i--</div>
<div><img alt="0" width="221" height="114" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934914-1351230995.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>decrby key number 对当前数字按照预定的数值做自减</div>
<div><img alt="0" width="236" height="69" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934872-1734443183.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>strlen key 获取字符串的长度</div>
<div><img alt="0" width="230" height="82" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934894-712277384.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>append key value 在value的末尾追加新的value并返回追加后的value的长度</div>
<div><img alt="0" width="277" height="108" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934894-420388468.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>getset value 顾名思义先get后set，先获取key的value值做返回，并用新的value覆盖旧的值</div>
<div><img alt="0" width="248" height="118" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934880-1720728365.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>List类型：</div>
<div>它是一个双端链表的结构，主要功能是push/pop等，通常一个key对应一个或多个value，元素有序且可重复，一般用在栈、队列、消息队列等，left、right都可以插入新的元素，如果key不存在就创建新的链表，如果key已存在就插入元素，如果key被移除了，key下所有的value也就消失了。由于它是一个双端链表，所以对于左右两端的操作性能很高，对于中间按元素的操作性能较差。队列可以从左端、右端插入，但是编列只能从左端开始</div>
<div>应用场景：用来记录用户的操作记录，例如：商品浏览记录，社交平台或资讯类App中用于展示最新的消息或动态</div>
<div>常用命令：</div>
<div>lpush key values 从队列的左端插入一个或多个元素，仅做插入</div>
<div><img alt="0" width="235" height="65" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934915-1077472171.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>rpush key values 从队列的右端插入一个或多个元素，仅做插入</div>
<div><img alt="0" width="257" height="87" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934915-729655178.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>lrange key start stop 从队列左端按照指定下表遍历队列，仅做查看</div>
<div><img alt="0" width="276" height="104" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934879-165073959.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>lpop key count 从队列左端弹出指定个数个元素，弹出后元素就被删除了</div>
<div><img alt="0" width="260" height="163" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934889-1892215250.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>rpop key count 从队列右端弹出指定个数个元素，弹出后元素就被删除了</div>
<div><img alt="0" width="194" height="131" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934892-382719241.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>lindex key index 根据索引下标获取list中的指定元素，仅做查看</div>
<div><img alt="0" width="241" height="114" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934872-1759177133.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>llen key 获取key中元素的个数，做数据统计使用</div>
<div><img alt="0" width="176" height="88" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934877-528278897.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>lrem key count value 因为list元素可以重复，用于从左侧删除队列中N个指定元素</div>
<div><img alt="0" width="336" height="432" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934931-1559824374.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>ltrim key start stop 获取key中的start到stop的元素并赋值到当前key</div>
<div><img alt="0" width="244" height="291" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934867-1436987494.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>rpoplpush key1 key2 从key1的右端弹出一个元素放到key2的左端，就是把key1的元素剪切到key2中，这个操作可以保证数据操作的原子性</div>
<div><img alt="0" width="512" height="433" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935072-555184416.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>lset key index value 用于在key的指定位置插入元素</div>
<div><img alt="0" width="276" height="306" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934931-476757798.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>linsert key after/before value newvalue 在key中指定value的前或者后插入新的元素</div>
<div><img alt="0" width="367" height="450" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935070-1934327174.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>del key 用于删除指定的key，删除后key和key中的value都消失了</div>
<div><img alt="0" width="213" height="129" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934852-1960714080.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>Hash类型：</div>
<div>哈希表，和java中的hash类似，单个key对应一个或多个kv键值对</div>
<div>应用场景：可以存储配置信息、购物车信息、用户信息，只要是像java中的hashmap一样的数据存储需要都可以通过Hash类型实现</div>
<div>常用命令：</div>
<div>hset key k1 v1 k2 v2 k3 v3 将一个或多个kv键值对插入到哈希表的key中，有个类似的命令hmset和它一样不做示例</div>
<div><img alt="0" width="290" height="38" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934786-662992630.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>hget key k1 获取哈希表的key中的单个kv键值对</div>
<div><img alt="0" width="323" height="65" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934860-305888747.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>hmget key k1 k2 k3 获取哈希表的key中的一个或多个kv键值对</div>
<div><img alt="0" width="261" height="85" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934782-1322714990.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>hgetall key 获取key中全部的kv键值对，以kv的形式返回，打头起，每两行算一个kv键值对</div>
<div><img alt="0" width="235" height="132" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934732-1692669641.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>hdel key k1 删除哈希表的key中的指定的kv键值对</div>
<div><img alt="0" width="214" height="146" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934860-236171355.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>hlen key 获取哈希表key的kv键值对的数量</div>
<div><img alt="0" width="278" height="184" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934860-752888541.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>hexists key k1 判断哈希表key中是否存在指定k的名称，存在返回1代表true，不存在返回0代表false</div>
<div><img alt="0" width="290" height="251" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934930-312511882.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>hkeys key 获取哈希表key中所有的kv键值对的key名称</div>
<div><img alt="0" width="185" height="73" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934777-1392687970.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>hvals key 获取哈希表key中所有的kv键值对的value的</div>
<div><img alt="0" width="251" height="97" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934816-1373106710.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>hinscrby key k number 对哈希表key中的整数类型的指定键名的value值加N</div>
<div><img alt="0" width="548" height="467" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935070-814964405.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>hincrbyfloat key k floatnumber 对哈希表key中的float类型的指定键名的value加floatN</div>
<div><img alt="0" width="385" height="466" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935018-1092598661.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>hsetnx key k v 对哈希表key中添加kv键值对，如果kv键值对中的k存在则不添加，不存在则添加新的kv键值对</div>
<div><img alt="0" width="260" height="493" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935020-822931959.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>Set类型：</div>
<div>集合，对标java中的HashSet，单个key对应多个不重复的value，元素无序且不可重复.</div>
<div>应用场景：</div>
<div>qq或者抖音推荐的可能认识的人</div>
<div>微信朋友圈共同好友之间点赞的显示</div>
<div><img alt="0" width="2142" height="882" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935288-1574688485.png" class="lazyload"></div>
<div>抽奖小程序的应用</div>
<div><img alt="0" width="2134" height="904" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935276-1524315397.png" class="lazyload"></div>
<div>sadd key values 向hashset中插入一个或多个元素，插入元素中如果有重复自动去重后插入</div>
<div><img alt="0" width="535" height="227" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934839-1495536453.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>smembers key 获取key中全部的values</div>
<div><img alt="0" width="372" height="107" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934792-515593977.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>sismember key value 判断key中是否存在指定value值，0代表不存在false，1代表存在true</div>
<div><img alt="0" width="298" height="224" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934911-883619648.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>srem key value 删除key中指定的value，如果存在就删除并返回1代表true，如果不存在直接返回0代表false</div>
<div><img alt="0" width="274" height="305" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934937-867150509.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>scard key 获取集合里面元素的个数</div>
<div><img alt="0" width="189" height="35" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934792-341180323.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>srandmember key N 从集合中随机获取N个元素，元素值获取但不删除</div>
<div><img alt="0" width="249" height="185" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934817-2105835925.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>spop key N 从集合中随机弹出N个元素，元素值获取后会删除</div>
<div><img alt="0" width="584" height="168" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934854-1392233428.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>smove key1 key2 value 从集合key1中获取指定的value然后剪切到key2中</div>
<div><img alt="0" width="403" height="682" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935069-898364894.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>sdiff key1 key2 ... 以第一个key为准获取其它key和它的差集，属于key1但不属于key2的元素，可以是N个key之间的比较</div>
<div><img alt="0" width="333" height="354" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934938-667668205.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>sunion key1 key2 key3 获取多个key之间的并集，将多个key中的元素合并然后去重后返回</div>
<div><img alt="0" width="236" height="291" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934838-1957890357.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>sinter key1 key2... 获取多个key之间交集，就是共有的部分，会去重返回</div>
<div><img alt="0" width="492" height="856" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935031-1116312160.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>sintercard number key1 key2 limitNumber 用于返回number个key的交集的个数（注意是返回个数），limit可以限制返回的总个数，即使再多也按limit限制的数量返回，不写limit默认返回全部交集的个数，这个limit用来限制大基数的返回情况，虽然基数很大，但我只需要几个即可。</div>
<div><img alt="0" width="578" height="232" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934921-2110040860.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>Zset类型：</div>
<div>有序集合，有序且可重复，是对set集合的补充和扩展，zset在set的value前增加了一个score分数值，根据这个分数值来从小到大排序</div>
<div>应用场景：</div>
<div>热度排场榜（score正好可以用作排行榜的分数，非常合适）</div>
<div>根据商品销量、评分对商品进行排序</div>
<div><img alt="0" width="2214" height="986" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935384-517393345.png" class="lazyload"></div>
<div>常用命令：</div>
<div>zadd key 10 k1 20 k2 40 k5 50 k9 60 k7 10 k8 40 k9 像集合key中添加一组或多组score和key</div>
<div><img alt="0" width="453" height="34" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934797-615457868.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>zrange key start end withscore 遍历集合key中的元素，根据给定下标来展示元素，展示时根据score升序排序后展示，withscore用来展示key对应的分数值，注意这里不带withscore只会返回key不返回score</div>
<div><img alt="0" width="505" height="465" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935032-1226482934.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>zrevrange key start end withscores 遍历集合key中的元素，根据给定下标来展示元素，展示时根据score降序排序后展示，withscore用来展示key对应的分数值，注意这里不带withscore只会返回key不返回score</div>
<div><img alt="0" width="369" height="376" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934920-1842257038.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>zrangebyscore key scoreStart scoreEnd withscores 根据给定的score遍历集合中的key，是根据分数来升序展示这些数据的，withscore用来展示key对应的分数值，注意这里不带withscore只会返回key不返回score，默认是大于等于或者小于等于，如果在分数前添加(代表大于或小于</div>
<div><img alt="0" width="376" height="233" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934930-424537162.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>zscore key member 根据元素中的k名称来获取对应的分数</div>
<div><img alt="0" width="218" height="210" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934839-1459508981.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>zcard 获取元素的总个数</div>
<div><img alt="0" width="191" height="49" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934838-286783626.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>zrem key member1 member2... 根据元素中k名称来删除对应的元素和元素对应的分数</div>
<div><img alt="0" width="270" height="142" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934838-1660981716.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>zincrby key addScore member 对指定元素k的score增加指定的分数</div>
<div><img alt="0" width="329" height="372" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935001-1391704158.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>zcount key startScore endScore 获取指定分数范围内的个数，默认是大于等于或者小于等于，如果在分数前添加(代表大于或小于</div>
<div><img alt="0" width="324" height="211" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934938-2067032021.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>ZMPOP numkeys {key [key ...]} {MIN | MAX} [COUNT count] 从一个或多个有序集合中弹出具有最高或最低分数的元素</div>
<div><img alt="0" width="314" height="432" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935022-1305935425.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>zrevrank key memberkey 获取key中指定元素k的下标，降序排序</div>
<div>zrank key memberkey 获取key中指定元素k的下标，升序排序</div>
<div><img alt="0" width="351" height="304" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935018-19144632.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>bitmap位图：</div>
<div>位图，是由0和1状态表现组成的二进制位的bit数组只能保存0和1，多用于true/false的状态统计，它是通过string类型实现的，type命令看数据类型的时候会返回string，它是以bit为单位存储的，1bit=8byte，所以每8字节算作一个存储长度，offset会以8为倍数自动扩展，计算长度也是按照bit为单位去计算的，它是String类型的扩展</div>
<div>应用场景：打卡、签到之类的应用场景</div>
<div>常用命令：</div>
<div>setbit key offset value 用于将value存入指定的key的offset中，返回值仅表示旧值，与操作是否成功无关，如果返回0代表首次设置，因为之前没有设置过默认都是0，返回旧值所以是0，如果返回1代表之前有过又重新设置了一遍。</div>
<div><img alt="0" width="346" height="221" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935019-545754920.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>getbit key offset 用于获取key中offset中的value</div>
<div><img alt="0" width="248" height="223" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934890-994199128.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>strlen key 获取key的字节数，一个bit是8byte，第一个红框中偏移量设置的是23，按8来计算3*8=24用了3个bit，所以它的长度是3，而第二个红框中虽然set了三次数据但offset都是8以内的，只占用了一个字节位，所以它的长度是1，这里的长度计算是根据offset所在的字节位来统计的，以8为单位去计算</div>
<div><img alt="0" width="285" height="215" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935008-1703944609.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>bitcount key 用于统计key中所有value=1的个数</div>
<div><img alt="0" width="337" height="296" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934975-1838891619.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>HyperLogLog：</div>
<div>基数统计，是用于统计一个集合中不重复的元素的个数，可以在输入元素量很大的情况下占用固定的，非常小的空间来完成存储和操作，与数据越多占用空间越大的集合等数据类型形成了鲜明对比，它只会根据输入元素来计算基数，而不会存储元素本身。但是它有一个缺点是会有统计数据的偏差。它的基数统计是估算的，不是100%准确的。</div>
<div>业务场景：统计UV，搜索词检索次数</div>
<div>常用命令：</div>
<div>pfadd key valus... 用于像key中添加N个元素</div>
<div><img alt="0" width="322" height="82" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934685-120978009.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>pfcount key 用于统计key中元素去重后的个数</div>
<div><img alt="0" width="350" height="132" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935026-662861809.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>pfmerge keys... 用于合并多个key的值，将后续key的value合并到第一个key中并去重存储，第一个key可以是新的也可以是旧的key，后面的所有的key的元素都会合并到第一个key中</div>
<div><img alt="0" width="364" height="237" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935000-1854523469.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>GEO：</div>
<div>地理空间，本质是一个zset，用于记录地理位置的经纬度坐标。</div>
<div>应用场景：滴滴打车定位，各种地图定位，美图查看附近N公里内的商家</div>
<div>常用命令：</div>
<div>geoadd key 经度 纬度 "地理名称"...... 可以向key中添加一个或多个经纬度以及坐标名，返回添加个数</div>
<div><img alt="0" width="625" height="109" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935001-1622637999.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>geopos key "地理名称"...... 获取key中的一个或多个地理名称，不存在时直接返回null</div>
<div><img alt="0" width="375" height="232" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180934951-241732875.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>geohash key "地理名称"...... 和geopos类似获取key中的一个或多个地理名称的hash值，不存在时直接返回null，工作中用的多的是这个</div>
<div><img alt="0" width="311" height="161" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935008-1473987545.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>geodist key "地理名称1" "地理名称2" m/km/ft/mi 用于返回key中两个地理坐标的距离，m代表mi，km代表公里，ft代表英尺，mi代表英里</div>
<div><img alt="0" width="334" height="152" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935019-1833359223.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>&nbsp;</div>
<div>georadius key 当前经度 当前纬度 检索距离 检索距离单位 withdist withcoord count 10 desc/asc 用于返回当前经度，当前纬度，检索距离内的坐标信息，也就是获取当前位置N里/公里内的所有坐标信息，如果没有则什么都不返回</div>
<div>withdist：返回元素时一并将各个位置元素和当前位置元素的距离一并返回，距离的单位取决于命令中指定的单位</div>
<div>withcoord：将位置元素的经纬度一并返回</div>
<div>withhash：返回hash值，作用不大</div>
<div>count：返回限定的记录数</div>
<div><img alt="0" width="558" height="283" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1171511/202507/1171511-20250725180935067-1532172908.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>&nbsp;</div>
<div>Stream：</div>
<div>流，可以理解成Redis中的MQ，用来实现消息队列，它支持消息的持久化、支持自动生成全局唯一ID、支持ack确认消息的模式、支持消费组模式等，让消息队列加的稳定和可靠。但实际应用中消息队列并不会使用redis而是用RocketMQ、kafka等等专业的MQ工具。所以这里不做记录。</div>
<div>原理：它是通过链表来实现的，将所有加入的消息都放入到链表中，每个消息都有一个唯一的ID和对应内容，消息的push和pop和MQ一样，同时也有生产者组和消费者组等等。</div>
<div>应用场景：和MQ相同，不过多赘述。</div>
<div>&nbsp;</div>
<div>bitfields：</div>
<div>位域，允许你对一个字符串类型的值按位进行操作，可将其视为一种特殊的数据处理方式，存储在系统中的数据都是以0、1的形式存在的，可以直接通过修改0、1来改变字符串的值。</div>
<div>Redis 的字符串类型可以存储二进制数据，BITFIELD 命令就是基于此特性，允许你把一个字符串当作一系列的位（bit）来处理。你可以在这些位上进行整数的读取、写入、递增和递减等操作，支持不同长度（如 1 位、4 位、8 位、16 位等）和不同符号（有符号和无符号）的整数。</div>
<div>应用场景：很少，主要是为了节省内存使用的。</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-25 18:11">2025-07-25 18:11</span>&nbsp;
<a href="https://www.cnblogs.com/hxjz">茴香饺子、</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19005157);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19005157', targetLink: 'https://www.cnblogs.com/hxjz/p/19005157', title: 'Redis学习笔记--数据类型和常用命令' })">举报</a>
</div>
        