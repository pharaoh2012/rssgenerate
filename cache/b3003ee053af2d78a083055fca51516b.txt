
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ZYPLJ/p/19012706" title="发布于 2025-07-30 13:17">
    <span role="heading" aria-level="2">基于Astro开发的Fuwari静态博客模版配置CICD流程</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="基于astro开发的fuwari静态博客模版配置cicd流程">基于Astro开发的Fuwari静态博客模版配置CICD流程</h1>
<h2 id="前言">前言</h2>
<p>同往常一样，上班摸鱼的时候，就喜欢逛逛随机逛逛别人的博客，然后有一个博客的主题让我有点心动。</p>
<p>我自己也是部署了博客的，我目前的博客网站是：<a href="https://pljzy.top/" target="_blank" rel="noopener nofollow">ZY的博客</a>，已经安稳运行了800多天。不过我的博客有个缺点就是加载很慢，主要原因呢是因为静态资源的关系，虽然有一小部分我使用了七牛云的<code>cdn</code>服务，但还是无法解决访问慢的问题。加上本身的服务器带宽也不大，只有<code>3M</code>的带宽。种种原因导致我的博客访问很慢，然后就遇到了今天要说的这个博客，这是一个静态博客，访问起来速度会快很多。</p>
<p>这个博客是基于<a href="https://docs.astro.build/zh-cn/concepts/why-astro/" target="_blank" rel="noopener nofollow">Astro</a>开发的一个博客主题模版，GitHub上叫<a href="https://github.com/saicaca/fuwari/blob/main/docs/README.zh-CN.md" target="_blank" rel="noopener nofollow">fuwari</a>。</p>
<p>先来放一张博客的图片，我觉得这个主题还是很好看的。</p>
<p><img src="https://img2024.cnblogs.com/blog/3091176/202507/3091176-20250730131151804-2062895161.png" alt="1" loading="lazy"></p>
<h2 id="在线访问">在线访问</h2>
<p>目前我的新博客也已经部署到服务器上了，地址为：</p>
<ul>
<li><a href="https://blog.pljzy.top/" target="_blank" rel="noopener nofollow">ZYBlog</a> <a href="https://blog.pljzy.top/" target="_blank" rel="noopener nofollow">https://blog.pljzy.top/</a></li>
</ul>
<p>欢迎大家访问我的新博客！</p>
<h2 id="博客的不足">博客的不足</h2>
<p>如果拿这个博客和我目前的博客对比，我认为的不足点有以下几点：</p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"><label> 评论功能还未完成；（已集成）</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"><label> 没有友情链接功能；</label></li>
</ul>
<p><a href="https://github.com/saicaca/fuwari/blob/main/docs/README.zh-CN.md" target="_blank" rel="noopener nofollow">fuwari</a>的开发者不知道什么时候会更新评论功能，不过我在翻阅<code>Pull requests</code>时，发现有一个关于评论的合并请求：<a href="https://github.com/saicaca/fuwari/pull/406%E3%80%82" target="_blank" rel="noopener nofollow">https://github.com/saicaca/fuwari/pull/406。</a></p>
<p>我也是花了时间去实验了一下，发现我还得重新注册个域名，总的来说还是比较麻烦的。后面发现他这种办法是针对于没有服务器的博主，我有自己的服务器完全可以找一个开源的评论系统集成到<a href="https://github.com/saicaca/fuwari/blob/main/docs/README.zh-CN.md" target="_blank" rel="noopener nofollow">fuwari</a>中去就行了。</p>
<p>后续我在博客集成了<a href="https://twikoo.js.org/quick-start.html" target="_blank" rel="noopener nofollow">Twikoo</a>评论系统，后面我再单独出一篇文章讲如何集成评论系统。</p>
<p>总之我觉得<a href="https://docs.astro.build/zh-cn/concepts/why-astro/" target="_blank" rel="noopener nofollow">Astro</a>的自由度很高，支持很多语言如：<code>React</code>、<code>Preact</code>、<code>Svelte</code>、<code>Vue</code>、<code>Solid</code>等，可扩展性很高，完全可以根据自己的想法去修改博客的内容。</p>
<h2 id="如何部署">如何部署</h2>
<p>下面来讲一讲如何部署一个这个博客，<a href="https://docs.astro.build/zh-cn/concepts/why-astro/" target="_blank" rel="noopener nofollow">Astro</a>的文档很详细，这里就拿部署到<code>GitHub</code>上来作为例子。</p>
<p>部署文档：<a href="https://docs.astro.build/zh-cn/guides/deploy/github/" target="_blank" rel="noopener nofollow">部署你的 Astro 站点至 GitHub Pages | Docs</a> <a href="https://docs.astro.build/zh-cn/guides/deploy/github/" target="_blank" rel="noopener nofollow">https://docs.astro.build/zh-cn/guides/deploy/github/</a></p>
<p>部署文档里面说的很清楚，我这里就不再复述了，如果只是单纯的部署到<code>GitHub Pages</code>上，跟着官方文档去做，一般不会出现问题。</p>
<h3 id="使用自己的域名">使用自己的域名</h3>
<p>总所周知，<code>Github Pages</code>部署后会给你一个<code>Github.io</code>域名，如果想使用自己的域名则需要做一点修改。</p>
<p>首先修改代码中的<code>astro.config.mjs</code>文件，将<code>site</code>指向你的域名，<font color="red">要注意的是不要为 <code>base</code> 设置值。</font></p>
<pre><code class="language-js">import { defineConfig } from 'astro/config'

export default defineConfig({
  site: 'https://example.com',
})
</code></pre>
<h3 id="域名解析">域名解析</h3>
<p>代码改完之后，需要为你的域名添加域名解析，以阿里云域名为例。</p>
<p>顶级域名：需要添加A类解析，将你的顶级域名指向<code>Github.io</code>域名的<code>ip</code>地址，获取ip地址，本地控制台ping一下<code>github.io</code>域名即可。</p>
<p><img src="https://img2024.cnblogs.com/blog/3091176/202507/3091176-20250730131226680-89947690.png" alt="2" loading="lazy"></p>
<p>如果是二级域名，比如我的<code>blog.pljzy.top</code>,那么则需要添加的是CNAME类型的解析，将<code>blog.pljzy.top</code>域名直接解析到<code>Github.io</code>上去就行了。</p>
<h3 id="github配置">Github配置</h3>
<p>如图所示：</p>
<p>Source选择<code>GitHub Actions</code>，<code>Custom domian</code>填入自己的域名，然后强制<code>HTTPS</code>打开。</p>
<p><img src="https://img2024.cnblogs.com/blog/3091176/202507/3091176-20250730131244076-937233146.png" alt="3" loading="lazy"></p>
<h2 id="如何创建文章">如何创建文章</h2>
<p>部署完成后，如果上传文章呢，我之前的博客是在后台管理系统中上传文章，这个静态博客当然是不存在后台管理系统的，所以上传文章就需要手动去讲文章放到<code>posts</code>目录下。</p>
<p>注意分为带展示图的文章和不带展示图的文章。</p>
<p><code>posts</code>指代<code>Src</code>-&gt;<code>Content</code>-&gt;<code>posts</code></p>
<h3 id="带展示图">带展示图</h3>
<p>在<code>posts</code>目录下创建文章目录<code>guide</code>，<code>cover.jpeg</code>就是首图，<code>index.md</code>就是文章。</p>
<pre><code>guide/
├── index.md
└── cover.jpeg
</code></pre>
<h3 id="不带展示图">不带展示图</h3>
<p>不带展示图的文章就只需要在<code>posts</code>下创建md文件即可。</p>
<pre><code>posts/
└── index.md
</code></pre>
<h3 id="注意">注意</h3>
<p>需要注意的是，md文件需要再开头添加上标识，用于展示文章的标题、时间、首图、分类、标签等信息。</p>
<pre><code>---
title: My First Blog Post
published: 2023-09-09
description: This is the first post of my new Astro blog.
image: ./cover.jpg
tags: [Foo, Bar]
category: Front-end
draft: false
lang: jp      # Set only if the post's language differs from the site's language in `config.ts`
---、
</code></pre>
<h2 id="步入正题cicd">步入正题CICD</h2>
<h3 id="cicd简述">CICD简述</h3>
<p>CI/CD（持续集成/持续交付或持续部署）是一种自动化软件开发和交付流程。</p>
<ul>
<li>持续集成（CI）：开发者提交代码后，自动触发构建和测试（单元测试、代码扫描等）。</li>
<li>持续交付（CD）：生成可部署的产物（如Docker镜像），等待人工确认发布。</li>
</ul>
<p>简言之，CI/CD通过自动化实现从代码提交到发布的快速、可靠流程。</p>
<h3 id="deployyml">deploy.yml</h3>
<p>上面扯了很多，还没有开始讲<code>CICD</code>。部署到<code>GitHub Pages</code>时，Astro官方文档给了一个通用的<code>Github Action</code>模版。</p>
<p>使用这个模版就可以完成简单的<code>CICD</code>流程，我们只需要在本地的<code>Src</code>-&gt;<code>Content</code>-&gt;<code>posts</code>中创建文章，或者把文章目录移入该目录下，然后<code>commit</code>提交，<code>push</code>推送，<code>GitHub Action</code>会自动帮我们完成打包+部署。</p>
<pre><code class="language-yml">name: Deploy to GitHub Pages

on:
  # 每次推送到 `main` 分支时触发这个“工作流程”
  # 如果你使用了别的分支名，请按需将 `main` 替换成你的分支名
  push:
    branches: [ main ]
  # 允许你在 GitHub 上的 Actions 标签中手动触发此“工作流程”
  workflow_dispatch:

# 允许 job 克隆 repo 并创建一个 page deployment
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your repository using git
        uses: actions/checkout@v4
      - name: Install, build, and upload your site
        uses: withastro/action@v3
        # with:
          # path: . # 存储库中 Astro 项目的根位置。（可选）
          # node-version: 20 # 用于构建站点的特定 Node.js 版本，默认为 20。（可选）
          # package-manager: pnpm@latest # 应使用哪个 Node.js 包管理器来安装依赖项和构建站点。会根据存储库中的 lockfile 自动检测。（可选）

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
</code></pre>
<h3 id="使用自己的服务器">使用自己的服务器</h3>
<p>考虑到<code>Github Pages</code>的访问速度时好时坏，非常的不稳定,想部署到自己的服务器上。部署的方式有很多种，直接将打包后的文件丢入<code>Nginx</code>中，或者使用<code>Docker</code>构建容器去部署。</p>
<p>这样做都行，但是我每次添加文章，都要重新去<code>build</code>代码，然后上传到服务器，很麻烦。</p>
<p>聪明的网友已经发现解决办法了，上面我们是不是讲过<code>GitHub Action</code>流程可以完成简单的<code>CICD</code>，即本地编写<strong>文章-push代码-GitHub自动构建打包部署</strong>。</p>
<p>那我们只需要稍微修改一下<code>deploy.yml</code>文件，然后在Github配置一下连接服务器的ssh私钥即可。</p>
<ul>
<li>SERVER_IP：服务器外网ip地址</li>
<li>SSH_USERNAME：登录用户名</li>
<li>SSH_PRIVATE_KEY：ssh私钥</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/3091176/202507/3091176-20250730131303707-228787200.png" alt="4" loading="lazy"></p>
<h4 id="打包后的文件直接丢进服务器的nginx目录下">打包后的文件直接丢进服务器的Nginx目录下</h4>
<p>使用这份<code>deploy.yml</code>文件就行了，根据自己的实际情况修改挂载目录和端口。</p>
<pre><code class="language-yml">name: Deploy with Volume Mount

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install and Build (Astro)
        uses: withastro/action@v3

      - name: Upload Files to Server
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "dist/*"
          target: "/www/wwwroot/default/newblog"  # 直接上传到挂载目录

      - name: Start/Restart Container
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # 直接运行Nginx容器并挂载目录
            docker stop astro-app || true
            docker rm astro-app || true
            docker run -d \
              --name astro-app \
              -p 4321:80 \
              -v /www/wwwroot/default/newblog:/usr/share/nginx/html:ro \
              nginx:alpine
</code></pre>
<h4 id="使用docker部署到服务器">使用Docker部署到服务器</h4>
<p>使用<code>Docker</code>相对来说麻烦一点，使用这份<code>deploy.yml</code>文件就行了，然后需要常见<code>DockerFile</code>、<code>docker-compose.yml</code>、<code>default.conf</code>这3个文件，博主就是采用的这种方式。同样注意根据自己服务器的实际情况修改目录和端口。</p>
<p><strong>deploy.yml</strong></p>
<pre><code class="language-yml">name: Docker Compose Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install and Build (Astro)
        uses: withastro/action@v3
        
      - name: Debug file existence
        run: |
          ls -la
          ls -la dist/ || echo "dist/ not found"
          ls -la docker/ || echo "docker/ not found"
          test -f docker-compose.yml &amp;&amp; echo "docker-compose.yml exists" || echo "docker-compose.yml missing"

      - name: Upload Files to Server
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "dist/*,docker/*,docker-compose.yml"
          target: "/www/wwwroot/default/newblog"

      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /www/wwwroot/default/newblog
            docker-compose down
            docker-compose up -d --build
            docker system prune -f
</code></pre>
<p><strong>DockerFile</strong></p>
<pre><code class="language-dockerfile">FROM nginx:alpine

# 删除默认配置
RUN rm /etc/nginx/conf.d/default.conf

# 复制自定义配置
COPY ./nginx/default.conf /etc/nginx/conf.d/

# 复制构建好的静态文件（由CI/CD流程完成）
WORKDIR /usr/share/nginx/html

# 暴露端口
EXPOSE 4321
</code></pre>
<p><strong>docker-compose.yml</strong></p>
<pre><code class="language-yml">version: '3.8'
services:
  web:
    build: ./docker
    ports:
      - "4321:4321"
    volumes:
      - /www/wwwroot/default/newblog/dist:/usr/share/nginx/html:ro
    restart: unless-stopped
</code></pre>
<p><strong>default.conf</strong></p>
<pre><code>server {
    listen       4321;# 配置端口
    server_name  0.0.0.0; # 修改为docker服务宿主机的ip
 
    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
        try_files $uri $uri/ /index.html =404;
    }
 
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }
}
</code></pre>
<p>无论采用上述那种方式，我们只需要在本地创建文章然后提交到git上就能自动上传到服务器完成构建并运行重新项目。</p>
<h2 id="吐槽一下">吐槽一下</h2>
<p><code>Github Action</code>调试起来还是挺费劲的，博主整整调试了10几次才完成CICD，有各种原因会导致部署失败。</p>
<p><img src="https://img2024.cnblogs.com/blog/3091176/202507/3091176-20250730131321003-1723076173.png" alt="5" loading="lazy"></p>
<h2 id="效果演示">效果演示</h2>
<p>修改代码后直接提交git，就能完成构建部署。</p>
<p><img src="https://img2024.cnblogs.com/blog/3091176/202507/3091176-20250730131329121-63941880.png" alt="6" loading="lazy"></p>
<p>在<code>Github Action</code>页面可以看到有3个流程，分别是代码检查、构建检查、以及最后的推送到服务器构建，代码检查和构建检查是<a href="https://github.com/saicaca/fuwari/blob/main/docs/README.zh-CN.md" target="_blank" rel="noopener nofollow">fuwari</a>模版自带的无需修改。</p>
<p><img src="https://img2024.cnblogs.com/blog/3091176/202507/3091176-20250730131344122-1358998643.png" alt="7" loading="lazy"></p>
<h2 id="相关链接">相关链接</h2>
<ul>
<li><a href="https://docs.astro.build/zh-cn/guides/deploy/" target="_blank" rel="noopener nofollow">部署你的Astro站点</a> <a href="https://docs.astro.build/zh-cn/guides/deploy/" target="_blank" rel="noopener nofollow">https://docs.astro.build/zh-cn/guides/deploy/</a></li>
<li><a href="https://twikoo.js.org/quick-start.html" target="_blank" rel="noopener nofollow">快速上手Twikoo </a>  <a href="https://twikoo.js.org/quick-start.html" target="_blank" rel="noopener nofollow">https://twikoo.js.org/quick-start.html</a></li>
<li><a href="https://github.com/saicaca/fuwari/blob/main/docs/README.zh-CN.md" target="_blank" rel="noopener nofollow">fuwari博客主题模版</a> <a href="https://github.com/saicaca/fuwari/blob/main/docs/README.zh-CN.md" target="_blank" rel="noopener nofollow">https://github.com/saicaca/fuwari/blob/main/docs/README.zh-CN.md</a></li>
<li><a href="https://github.com/ZyPLJ/fuwai_zy" target="_blank" rel="noopener nofollow">ZyPLJ/fuwai_zy</a> <a href="https://github.com/ZyPLJ/fuwai_zy" target="_blank" rel="noopener nofollow">https://github.com/ZyPLJ/fuwai_zy</a></li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0006944444444444445" data-date-updated="2025-07-30 13:18">2025-07-30 13:17</span>&nbsp;
<a href="https://www.cnblogs.com/ZYPLJ">妙妙屋（zy）</a>&nbsp;
阅读(<span id="post_view_count">121</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19012706);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19012706', targetLink: 'https://www.cnblogs.com/ZYPLJ/p/19012706', title: '基于Astro开发的Fuwari静态博客模版配置CICD流程' })">举报</a>
</div>
        