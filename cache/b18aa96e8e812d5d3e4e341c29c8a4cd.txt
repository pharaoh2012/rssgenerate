
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/data-analytics/p/18874386" title="发布于 2025-05-13 15:43">
    <span role="heading" aria-level="2">【SQL周周练】一千条数据需要做一天，怎么用 SQL 处理电表数据（如何动态构造自然月）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/3640949/202505/3640949-20250513154135545-2094420927.png" alt="【SQL周周练】一千条数据需要做一天，怎么用 SQL 处理电表数据（如何动态构造自然月）" class="desc_img">
        题目来自于某位发帖人在某 Excel 论坛的求助，他需要将电表缴费数据按照缴费区间拆开后再按月份汇总。当时用手工处理数据，自称一千条数据就需要处理一天。我将这个问题转化为 SQL 题目。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>大家好，我是“蒋点数分”，多年以来一直从事数据分析工作。从今天开始，与大家持续分享关于数据分析的学习内容。</p>
<p>本文是第 6 篇，也是【SQL 周周练】系列的第 5 篇。该系列是挑选或自创具有一些难度的 SQL 题目，一周至少更新一篇。后续创作的内容，初步规划的方向包括：</p>
<h2 id="后续内容规划">后续内容规划</h2>
<p>1.利用 <strong>Streamlit</strong> 实现 <code>Hive 元数据展示</code>、<code>SQL 编辑器</code>、 结合<code>Docker 沙箱实现数据分析 Agent</code><br>
2.时间序列异常识别、异动归因算法<br>
3.留存率拟合、预测、建模<br>
4.学习 <code>AB 实验</code>、复杂实验设计等<br>
5.<code>自动化机器学习</code>、自动化特征工程<br>
6.<code>因果推断</code>学习<br>
7. ……</p>
<p><strong>欢迎关注</strong>，一起学习。</p>
<h2 id="第-5-期题目">第 5 期题目</h2>
<p>题目来源：改编题目，在某 Excel 论坛看到的；求助希望使用 VBA 处理（求助者自称手工处理，上千条数据就需要做一天）。我参照他的数据格式改编为 SQL 题目（我的数据完全由自己模拟生成，并没有使用求助者的数据）</p>
<h3 id="一题目介绍">一、题目介绍</h3>
<p>有一张记录了电表缴费数据的表，缴费的时间间隔是不固定的。领导希望将这张表重新拆解按照月份来汇总，分析每月的日均使用电量等等。求助者的原始数据还有站点编码、电表号、供电类型等等，我这里将问题简化，省略这些信息，就假设只有一个电表。</p>
<p>注：只有缴费区间的总电量，没有每日电量；利用平均值拆分到每天再根据不同区间汇总到自然月。针对最开始的日期和结束日期，如果不满整月，就按照实际存在的日期区间来计算（时间维度按日来处理，不考虑小时等更精细的级别 | 求助者给的数据也是精确到日期而不是小时）</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>数据类型</th>
<th>注释</th>
</tr>
</thead>
<tbody>
<tr>
<td>period_start</td>
<td>string</td>
<td>缴费区间开始日期</td>
</tr>
<tr>
<td>period_end</td>
<td>string</td>
<td>缴费区间结束日期</td>
</tr>
<tr>
<td>electricity_usage</td>
<td>int</td>
<td>这段区间使用的电量</td>
</tr>
<tr>
<td>daily_electricity_usage</td>
<td>int</td>
<td>这段区间的日平均电量<br>（本应该设置为浮点类型，但是我用整数生成的）<br>这字段本来也没必要存在，只不过省得在 SQL 再算一遍</td>
</tr>
<tr>
<td>period</td>
<td>int</td>
<td>这段日期有几天（没啥用，我生成数据后二次校验用的）</td>
</tr>
</tbody>
</table>
<p>部分样例数据（完整生成逻辑参见第三节）</p>
<table>
<thead>
<tr>
<th>period_start</th>
<th>period_end</th>
<th>electricity_usage</th>
<th>daily_electricity_usage</th>
<th>period</th>
</tr>
</thead>
<tbody>
<tr>
<td>2023-12-01</td>
<td>2023-12-30</td>
<td>14700</td>
<td>490</td>
<td>30</td>
</tr>
<tr>
<td>2023-12-31</td>
<td>2024-01-06</td>
<td>420</td>
<td>60</td>
<td>7</td>
</tr>
<tr>
<td>2024-01-07</td>
<td>2024-01-07</td>
<td>230</td>
<td>230</td>
<td>1</td>
</tr>
<tr>
<td>2024-01-08</td>
<td>2024-02-04</td>
<td>13160</td>
<td>470</td>
<td>28</td>
</tr>
<tr>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr>
<td>2025-02-11</td>
<td>2025-02-24</td>
<td>3360</td>
<td>240</td>
<td>14</td>
</tr>
<tr>
<td>2025-02-25</td>
<td>2025-03-10</td>
<td>6020</td>
<td>430</td>
<td>14</td>
</tr>
</tbody>
</table>
<h3 id="二题目思路">二、题目思路</h3>
<p>想要答题的同学，可以先思考答案🤔。<br>
.……</p>
<p>.……</p>
<p>.……</p>
<p>我来谈谈我的思路，这道题目要解决两个问题点：</p>
<p>1.根据整个电费缴纳涵盖的区间，生成自然月的“维度表”。暴力的方法，那就是取最大最小日期，然后构造一个递增序列求出每一天，再分组/去重汇总成月，但是太低效了。直接的方法是获取最大最小日期之间有多少个月，然后 <code>add_months</code> 加上去，除了最大最小日期的端点，取出每一个月的 1 号和当月最后一天</p>
<blockquote>
<p>是不是一定要做这一步？实际工作中可以使用固定日期范围或者数仓里现成的维度表 <code>dim_date</code> 等等。但是动态日期维度表生成一方面更符合这个场景的逻辑；另一方面也是笔试的考点，只不过动态生成每一天日期更常见。</p>
</blockquote>
<p>2.根据上一步获取的自然月区间，来与缴费区间关联，关联的条件是存在交集。这又涉及到两点，第一是如何判断有交集（包括哪怕只有端点一天相交），第二是如何取交集区间的数据来进行后续的计算</p>
<p>（目前【SQL 周周练】系列默认讨论 <code>Hive</code>，但很多思路可以移植到其他 SQL 方言；我了解到诸如 <code>Oracle</code> 和 <code>Postgre</code> 是有非常多函数的，可能相对于 <code>Hive</code> 会有更直接更好用的方法 | <code>SparkSQL</code> 一般都能兼容 <code>Hive</code>，后期我会逐步拓展到 <code>MySQL</code>、<code>DuckDB</code>、<code>Doris/Starrocks</code>）</p>
<p>下面，我用 <code>NumPy</code> 和 <code>Scipy</code> 生成模拟的数据集：</p>
<h3 id="三用-python-生成模拟数据">三、用 Python 生成模拟数据</h3>
<p>只关心 SQL 代码的同学，可以跳转到第四节（我在工作中使用 <code>Hive</code> 较多，因此采用 <code>Hive</code> 的语法）</p>
<p>模拟代码如下：</p>
<ol>
<li>构造日期间隔，并将顺序随机打乱，作为“缴费”日期区间：</li>
</ol>
<pre><code class="language-python">import numpy as np
import pandas as pd
from datetime import datetime, timedelta

# 确定随机数种子
np.random.seed(2025)

# 构造日期间隔
date_interval_list = [1, 3, 7, 14, 15, 28, 30, 45, 90] * 2

# 打乱顺序，注意它是直接修改没有返回
np.random.shuffle(date_interval_list)  
print(date_interval_list)
</code></pre>
<ol start="2">
<li>随机抽样生成“缴费”区间的日耗电量，构造“缴费”区间的起始日期、结束日期。将前面生成的数据转为 <code>pd.DataFrame</code>，并输出为 <code>csv</code> 文件：</li>
</ol>
<pre><code class="language-python">power_consumption = range(50, 510, 10)

# 随机抽取数值，作为缴费区间的平均日消耗电量
daily_electricity_usage = np.random.choice(
    power_consumption, size=len(date_interval_list), replace=False
)

df = pd.DataFrame(
    {
        "period_start": [
            datetime(2023, 12, 1) + timedelta(days=sum(date_interval_list[:i]) )
            for i in range(len(date_interval_list))
        ],
        "period_end": [
            datetime(2023, 12, 1) + timedelta(days=sum(date_interval_list[:i])-1)
            for i in range(1, len(date_interval_list) + 1)
        ],
        "electricity_usage": date_interval_list * daily_electricity_usage,
        "daily_electricity_usage": daily_electricity_usage,
        "period": date_interval_list,
    }
)
# 在 Jupyter 环境中显示 dataframe，其他环境执行可能报错
display(df)

out_csv_path = "dwd_electricity_usage_records.csv"
df.to_csv(out_csv_path, index=False, header=False, encoding="utf-8-sig")
</code></pre>
<ol start="3">
<li>如果表存在则删除，创建新的 <code>Hive</code> 表，并将数据 <code>load</code> 到表中：</li>
</ol>
<pre><code class="language-python">from pyhive import hive

# 配置连接参数
host_ip = "127.0.0.1"
port = 10000
username = "Jiang"


with hive.Connection(host=host_ip, port=port) as conn:
    cursor = conn.cursor()

    hive_table_name = 'data_exercise.dwd_electricity_usage_records'

    drop_table_sql = f"""
    drop table if exists {hive_table_name}
    """

    print('删除表语句：\n', drop_table_sql)

    cursor.execute(drop_table_sql)

    create_table_sql = f"""
    create table if not exists `{hive_table_name}` (
        period_start string comment '费用期始',
        period_end string comment '费用期终',
        electricity_usage int comment '计费期间总用电量',
        daily_electricity_usage int comment '计费期间日均电量（用来核对结果）',
        period int comment '期间天数'
    )
    comment "不定期的电表计费数据 | author: 蒋点数分 | 文章编号：04d08f61"
    row format delimited fields terminated by ','
    stored as textfile
    """

    print("创建表语句：\n", create_table_sql)
    cursor.execute(create_table_sql)

    import os

    load_data_sql = f"""
    load data local inpath "{os.path.abspath(out_csv_path)}"
    overwrite into table {hive_table_name}
    """

    print("覆盖写入数据语句：\n", load_data_sql)
    cursor.execute(load_data_sql)

    cursor.close()
</code></pre>
<blockquote>
<p>我通过使用 <code>PyHive</code> 包实现 Python 操作 <code>Hive</code>。我个人电脑部署了 <code>Hadoop</code> 及 <code>Hive</code>，但是没有开启认证，企业里一般常用 <code>Kerberos</code> 来进行大数据集群的认证。</p>
</blockquote>
<h3 id="四sql-解答">四、SQL 解答</h3>
<p>我使用 <code>CTE</code> 的语法，这样将步骤串行展示，逻辑比较清晰，下面分成几部分解释 SQL 语句：</p>
<p>1.这部分代码的逻辑是，先求出所有缴费区间最大最小的日期；然后利用求出来两个日期之间的有多少自然月（包含两个端点所在的自然月）；有的同学会问，<code>Hive</code> 中是存在 <code>months_between</code> 的，为什么你不用，而要自己“年-年”、“月-月”的这么算？当然可以用，但是要额外处理一下，此代码块后面，我解释一下，如何额外处理：</p>
<pre><code class="language-sql">with get_date_interval as (
    -- 获取总体的开始、结束日期：这里只是一个电表
    -- 多个电表注意后续的逻辑该带分组的分组
    select
      min(period_start) as all_start
    , max(period_end) as all_end
    from data_exercise.dwd_electricity_usage_records
)
, get_inner_months as (
    -- 获取两个日期之间有多少个月；“年-年”*12“+ 月-月”
    -- 请参看文章的解释；如果按照“数数”的规则，注意结果加 1
    -- 如果要用 months_between 函数，该怎么处理？
    -- 根据官方文档，如果 两个日期的 day 部分不一样或者不是当月的最后一天
    -- 则是按照 31 天的月份来计算小数部分 `fractional portion`
    -- 注意 months_between 返回的小数，要取整
    select
      all_start, all_end
    , (year(all_end) - year(all_start))*12 + month(all_end) - month(all_start) + 1 as month_cnt
    -- , int(months_between(last_day(all_start), last_day(all_start)))+1 as month_cnt
    from get_date_interval
)
……
</code></pre>
<p>关于 <code>months_between</code> 函数，我查看了 <code>Hive</code> 的官方文档，人家是这么说的 —— “If date1 and date2 are either the same days of the month or both last days of months, then the result is always an integer. Otherwise the UDF calculates the fractional portion of the result based on a 31-day month and considers the difference in time components date1 and date2.” 翻译后是 “如果 date1 和 date2 在当月的日期是相同的，或者都是各自月份的最后一天 ，那么结果始终是一个整数。否则，该函数会基于一个31天的月份来计算结果的小数部分，并考虑 date1 和 date2 的时间部分差异。”</p>
<p>我没有看源代码，但是这里面说的是 <code>fractional portion</code> 小数部分按照 31 天的月来处理，什么意思呢？我稍微实验了一下，小数部分应该就是 <code>(day(...)-day(...))/31</code>（负数就向前借位），它的结果是四舍五入保留 8 位数。我们想避开这个小数，就想让它返回整数月份怎么办呢（因为情况比较多，单独用向上取整、向下取整或者四舍五入取整都有问题，要综合判断，直接返回整数月份最好）</p>
<p>我这里的最大最小日期，大概率 day 部分是不一样的，也不太可能都是每个月份的最后一天。这样会涉及小数，那么咱手工处理一下 —— 比如将最大最小日期改成当月的最后一天，这个很简单，使用 <code>last_day</code> 函数即可；还可以改成当月的第一天，使用 <code>trunc(...,'MM')</code>，也满足使用条件。甚至咱追求个性，将日期的年月部分取出来，日部分都写个 5 号、13 号也可以，只要不超过 28 号，就不用考虑日期合法性问题。</p>
<p><img src="https://img2024.cnblogs.com/blog/3640949/202505/3640949-20250513153951341-505652616.png" alt="" loading="lazy"></p>
<p>图片里 <code>m1</code> 到 <code>m4</code> 的写法都是可以的，只不过后面要转换为整数。</p>
<p>2.使用 <code>repeat</code> 和 <code>split</code> 加上 <code>posexplode</code> 构造一个指定长度的递增序列，这也是 <code>Hive</code> 的常见技巧。<code>explode</code> 更常见，<code>posexplode</code> 就是多返回一个“位置”列。（我个人电脑部署的 <code>Hive</code> 版本是 <code>3.1.3</code>，我验证过没有 <code>sequence</code> 函数）。如果根据日期取某个自然月的 1 号和最后一天，上一小节我已经解释过；注意最早最晚日期根据我题目的定义，要按照实际日期来计算：</p>
<pre><code class="language-sql">……
, get_every_month_start as (
    select
     (case
        -- 对于非开始日期的那个月，取当月的 1 号
        when idx &gt; 0 then add_months(trunc(g.all_start, 'MM'), idx)
        -- 如果是开始日期，直接用开始日期，不管它是不是当月的 1 号
        when idx = 0 then g.all_start 
     end) as month_start
    , all_end
    from get_inner_months g
    lateral view posexplode(split(repeat(',', month_cnt-1), ',')) month_table as idx, m
)
, get_every_month_end as (
    select
      month_start
      -- 如果是结束日期的那个月，结束日期就取截止日期
      -- 否则取每个月的最后一天，即 last_day
    , if(date_format(month_start, 'yyyy-MM') = date_format(all_end, 'yyyy-MM'), all_end,
    last_day(month_start)) as month_end
    from get_every_month_start
)
……
</code></pre>
<p>3.这一步是将前面构造的自然月维度表 <code>get_every_month_end</code> 与电费数据集，进行关联。关联的条件是判断有交集，为什么这两个条件可以保证有交集，我在代码下面用图片结合文字论述。另外就是当两者有交集的情况下，取交集的逻辑是 —— 起点选择最晚 <code>greatest</code> 的那个，终点选择最早 <code>least</code> 的那个。</p>
<p><code>Hive</code> 非常早期的版本是不支持不等值连接的。这个时候要小心处理 <code>on</code> 后面的条件，如果是 <code>inner join</code> 一般将 <code>on</code> 后面的条件移到 <code>where</code> 中，而 <code>outer join</code> 如果 <code>on</code> 不匹配，只是代表关联的表没有匹配的数据，可以理解为给你一个 <code>null</code>；比如拿 <code>left outer join</code> 举例，左表的数据是不会被 <code>on</code> 条件过滤掉的，如果 <code>on</code> 能导致一条数据匹配多条，左表的部分数据甚至全部数据还会翻倍上涨。这个时候，不能将 <code>on</code> 的条件直接移到 <code>where</code> 中，而是需要保持 <code>on</code> 里面的最粗糙的匹配逻辑（这个场景不行，因为两个条件都是不等值，需要人工造一个无用的关联），在 <code>select</code> 中对于右表的列，在使用时进行 <code>on</code> 条件的完整判断 <code>if</code>，如果满足，返回右表列的值；否则返回 <code>null</code>。这种方法缺点是每一个用到右表的列，都需要这么处理。</p>
<pre><code class="language-sql">……
, get_interval_power_usage as (
    select
      e.month_start as month_start
    , e.month_end as month_end
    -- 注意取两个日期区间的交集
    -- 非常重要，别忘了取区间的交集
    -- 起点取最后面的那个，终点取最早的那个
    , greatest(r.period_start,e.month_start) as period_start
    , least(r.period_end,e.month_end) as period_end
    , nvl(r.daily_electricity_usage,0) as daily_electricity_usage
    from get_every_month_end e
    left outer join data_exercise.dwd_electricity_usage_records r
        on r.period_end &gt;= e.month_start
        and r.period_start &lt;= e.month_end
)
……
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3640949/202505/3640949-20250513154004796-284630900.png" alt="" loading="lazy"></p>
<p>4.这是最后求结果的 SQL 部分，注意前面取交集后，会划分称成若干“子”区间，每个区间计算时用原来的日均值乘以区间长度（注意 <code>datediff</code> 结果加 1）计算该区间的总电量消耗。<code>group by</code> 加和整月的电量，整月的长度可以用子区间长度叠加 <code>days_cnt</code> 列，也可以直接求 <code>days_cnt2</code> 列，注意我这里的 <code>month_start</code>，<code>month_end</code> 在最开始与最晚日期是根据实际日期定义的，因此可以用 <code>days_cnt2</code> 的逻辑。</p>
<p>另外，这里只靠 <code>month_start</code> 就足以标记统计的自然月，没必要将 <code>month_end</code> 也作为 <code>group by</code> 的分组标识，用 <code>max/min</code> 当成维度值处理，这也是最基本的技巧。（我已经验证<code>Hive 3.1.3</code> 也没有 <code>any_value</code>）在数据量很大时或者分组 key 比较多时，有助于提高计算速度、减少资源消耗：</p>
<pre><code class="language-sql">……
select
  month_start
, max(month_end) as month_end
  
, sum(daily_electricity_usage * (datediff(period_end, period_start)+1)) 
    / sum(datediff(period_end, period_start)+1) as new_daliy_usage
-- 用哪个做分母都行    
-- , sum(datediff(period_end, period_start)+1) as days_cnt
--, max(datediff(month_end, month_start)+1) as days_cnt2
from get_interval_power_usage
group by month_start 
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3640949/202505/3640949-20250513154018831-828499226.png" alt="" loading="lazy"></p>
<p>5.完整的 SQL 语句：</p>
<pre><code class="language-sql">with get_date_interval as (
    -- 获取总体的开始、结束日期：这里只是一个电表
    -- 多个电表注意后续的逻辑该带分组的分组
    select
      min(period_start) as all_start
    , max(period_end) as all_end
    from data_exercise.dwd_electricity_usage_records
)
, get_inner_months as (
    -- 获取两个日期之间有多少个月；为什么不用 months_between
    -- 请参看文章的解释；如果按照“数数”的规则，注意结果加 1
    select
      all_start, all_end
    , (year(all_end) - year(all_start))*12 + month(all_end) - month(all_start) + 1 as month_cnt
    from get_date_interval
)
, get_every_month_start as (
    select
     (case
        -- 对于非开始日期的那个月，取当月的 1 号
        when idx &gt; 0 then add_months(trunc(g.all_start, 'MM'), idx)
        -- 如果是开始日期，直接用开始日期，不管它是不是当月的 1 号
        when idx = 0 then g.all_start 
     end) as month_start
    , all_end
    from get_inner_months g
    lateral view posexplode(split(repeat(',', month_cnt-1), ',')) month_table as idx, m
)
, get_every_month_end as (
    select
      month_start
      -- 如果是结束日期的那个月，结束日期就取截止日期
      -- 否则取每个月的最后一天，即 last_day
    , if(date_format(month_start, 'yyyy-MM') = date_format(all_end, 'yyyy-MM'), all_end,
    last_day(month_start)) as month_end
    from get_every_month_start
)
, get_interval_power_usage as (
    select
      e.month_start as month_start
    , e.month_end as month_end
    -- 注意取两个日期区间的交集
    -- 非常重要，别忘了取区间的交集
    -- 起点取最后面的那个，终点取最早的那个
    , greatest(r.period_start,e.month_start) as period_start
    , least(r.period_end,e.month_end) as period_end
    , r.daily_electricity_usage as daily_electricity_usage
    from get_every_month_end e
    left outer join data_exercise.dwd_electricity_usage_records r
        on r.period_end &gt;= e.month_start
        and r.period_start &lt;= e.month_end
)

select
  month_start
, max(month_end) as month_end
  
, sum(daily_electricity_usage * (datediff(period_end, period_start)+1)) 
    / sum(datediff(period_end, period_start)+1) as new_daliy_usage
-- 用哪个做分母都行    
-- , sum(datediff(period_end, period_start)+1) as days_cnt
--, max(datediff(month_end, month_start)+1) as days_cnt2
from get_interval_power_usage
group by month_start
</code></pre>
<hr>
<p>😁😁😁<br>
<strong>我现在正在求职数据类工作</strong>（主要是数据分析或数据科学）；如果您有合适的机会，即时到岗，不限城市。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.13317779135069444" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-13 15:43">2025-05-13 15:43</span>&nbsp;
<a href="https://www.cnblogs.com/data-analytics">蒋点数分</a>&nbsp;
阅读(<span id="post_view_count">34</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18874386);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18874386', targetLink: 'https://www.cnblogs.com/data-analytics/p/18874386', title: '【SQL周周练】一千条数据需要做一天，怎么用 SQL 处理电表数据（如何动态构造自然月）' })">举报</a>
</div>
        