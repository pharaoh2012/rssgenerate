
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/WindrunnerMax/p/18683099" title="发布于 2025-01-21 10:24">
    <span role="heading" aria-level="2">Ubuntu20.04配置CuckooSandbox环境</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="ubuntu2004配置cuckoosandbox环境">Ubuntu20.04配置CuckooSandbox环境</h1>
<p>因为最近要做恶意软件分析，阅读论文发现动态分析的效果普遍比静态分析的效果要好一些，所以需要搭建一个动态分析的环境，查阅资料发现<code>Cuckoo Sandbox</code>是不错的自动化分析环境，但是搭建起来还是比较复杂的，主要是在配置虚拟机环境以及网络配置方面。</p>
<h2 id="基础环境">基础环境</h2>
<p>文中的环境是<code>Ubuntu 20.04 Server</code>，也就是服务器版，后来为了配置虚拟机尝试过<code>GNOME</code>还有<code>xfce4</code>桌面环境，其实纯服务器环境即可完成配置，但是在配置虚拟机环境时可能会卡，所以还是有必要装一个桌面环境的。<br>
在配置环境的时候建议配置一个新用户出来，<code>Cuckoo</code>官方不建议使用<code>root</code>权限搭建环境，最好是配置一个有<code>sudo</code>权限的用户，在本文中我配置的新用户名为<code>Czy</code>，注意要使用有<code>sudo</code>权限的用户创建，比如<code>root</code>等，对了别忘了在创建好新用户后在<code>/etc/passwd</code>将创建用户的默认的<code>bash</code>环境<code>/bin/sh</code>更改为<code>/bin/bash</code>，默认的<code>/bin/sh</code>在登陆后只有一个<code>$</code>不太好用。</p>
<pre><code class="language-bash">sudo useradd -m Czy # 添加Czy用户并生成home目录
sudo usermod -aG sudo Czy # 添加到超级用户组即sudo权限
</code></pre>
<pre><code class="language-bash"># /etc/passwd
Czy:x:1001:1001::/home/Czy:/bin/bash
</code></pre>
<p><code>SSH</code>软件使用的是<code>MobaXterm</code>，可以直接在本地实现<code>virtualbox</code>的图形界面，不过还是比较卡，肯定是不如直接使用图形界面的快，但是也只是配置过程中需要使用，真正使用<code>Cuckoo</code>时就不需要手动启动虚拟机环境了，如果用<code>Xbash</code>的话需要配合<code>Xmanager</code>才能在本地拉起<code>virtualbox</code>的图形界面，此外建议安装<code>WinSCP</code>用来传输文件，这个为了方便可以用<code>root</code>登录，不过要注意用<code>root</code>登录后传输后的文件的所有者都是<code>root</code>，写文件的话需要更改权限。</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/22d8834cac7caaa96b5649fa9cc7c84d.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="安装anaconda">安装Anaconda</h2>
<p>首先来说明为什么要安装<code>Anaconda </code>，首先在<code>Cuckoo</code>不建议直接使用主<code>python</code>环境进行配置，建议使用<code>venv</code>，还有一个更重要的原因，在<code>Ubuntu 20.04</code>已经不建议使用<code>python2</code>了，而到目前为止<code>Cuckoo</code>只支持<code>python2</code>，之前在<code>16.04</code>使用<code>pyhton</code>就能拉起的环境现在需要安装<code>python2</code>并且必须使用<code>python2</code>命令才能唤起，所以为了避免出现各种问题，还是选择使用<code>Anaconda</code>进行环境配置。<br>
首先下载<code>Anaconda</code>安装包，我下载的版本为<code>Anaconda3-2019.03-Linux-x86_64.sh</code>，在清华的镜像站<code>https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</code>下载即可，之后便是直接<code>./</code>运行该可执行文件，如果不能执行的话可能是没有<code>x</code>权限，直接<code>sudo chmod 755  Anaconda3-2019.03-Linux-x86_64.sh</code>运行即可安装，安装过程不再赘述，可以参考其他的文章 。<br>
在<code>conda</code>环境中安装<code>python 2.7</code>，然后这个虚拟环境我命名为<code>python2</code>，在下边的脚本要用到。<br>
在<code>Conda</code>安装的最后会提示你是否加入到环境变量，如果加入到环境变量的话那么每次<code>ssh</code>到服务器都会自动运行<code>conda</code>环境的，我个人不是很喜欢，于是我自行写了一个<code>.sh</code>文件，需要的时候我再去执行这个<code>.sh</code>文件即可唤醒环境，注意该文件的<code>x</code>执行权限，<code>755</code>一把梭就行。<br>
其实这些都不算重点，能跑起来<code>python 2.7</code>的环境都是胜利。</p>
<pre><code class="language-bash">#!/bin/bash

# &gt;&gt;&gt; conda initialize &gt;&gt;&gt;
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/Czy/application/conda/bin/conda' 'bash.bash' 'hook' 2&gt; /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/Czy/application/conda/etc/profile.d/conda.sh" ]; then
        . "/home/Czy/application/conda/etc/profile.d/conda.sh"
    else
        export PATH="/home/Czy/application/conda/bin:$PATH"
    fi
fi
unset __conda_setup
# &lt;&lt;&lt; conda initialize &lt;&lt;&lt;
conda activate python2
</code></pre>
<pre><code class="language-bash">source ./python2-conda.sh
</code></pre>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/f75102e24d1d4a0a200c9500181f35df.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="安装cuckoo">安装Cuckoo</h2>
<h3 id="安装python库">安装python库</h3>
<p>我是直接执行了<code>sudo pip install -U cuckoo</code>，然后执行过程中告诉我缺啥我都再装，虽然这样不太好但是也不是不行哈哈，文档对于这块说的还是比较清楚的，这里借鉴一下其他博客说明的安装环境，如果安装失败，搜索一下错误，我就遇到过一个编译<code>image</code>什么的错误，是在<code>github issue</code>中找到一个用<code>apt</code>安装的依赖才解决的，但是具体记不清了。</p>
<pre><code class="language-bash">sudo apt-get install python python-pip python-dev libffi-dev libssl-dev
sudo apt-get install python-virtualenv python-setuptools
sudo apt-get install libjpeg-dev zlib1g-dev swig
</code></pre>
<h3 id="安装mongodb">安装MongoDB</h3>
<p>为了使用基于<code>Django</code>的<code>Web</code>界面，需要使用<code>MongoDB</code>，也就是为了启动<code>cuckoo web runserver 0.0.0.0:8000</code>的环境依赖，之后还需要配置用户名密码与数据库信息，这个在下一节会细说。</p>
<pre><code class="language-bash">sudo apt-get install mongodb
</code></pre>
<h3 id="安装postgresql">安装PostgreSQL</h3>
<p><code>Cuckoo</code>的<code>Web</code>服务需要一个数据库，在配置文件中可以看出<code>sqlite</code>、<code>postgresql</code>、<code>mysql</code>都是可以的，由于我比较熟悉<code>Mysql</code>的操作本来想指定<code>Mysql</code>作为选定数据库来着，但是由于装<code>python_mysql</code>的驱动一直出问题，我估计是因为我装的<code>Mysql 8.0</code>，而<code>Python 2.7</code>早已不再维护了，所以无法正常使用驱动了，所以最终还是选择<code>PostgreSQL</code>，当然这个也需要配置用户名密码等，这个下一节再说明。</p>
<pre><code class="language-bash">sudo apt-get install postgresql libpq-dev
</code></pre>
<h3 id="安装virtualbox">安装virtualbox</h3>
<p>首先需要安装<code>virtualbox</code>，直接使用<code>apt-get</code>安装即可。</p>
<pre><code class="language-bash">sudo apt-get install virtualbox
</code></pre>
<p>如果像我一样是使用的服务器而没有实体机，而且我的服务器在实体机上是使用<code>VMware Workstation</code>管理的，那么这个状态就相当于在虚拟机中安装虚拟机，那么就需要在主体实体机的<code>VMware Workstation</code>中修改虚拟机配置在，<code>Processors</code>中启用<code>VT-X</code>或<code>AMD-V</code>，也就是启动虚拟化才可以。</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/4df89cd75ba9da257dc95cd35554bee6.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="安装tcpdump">安装tcpdump</h3>
<p>为了在执行期间转储恶意软件执行的网络活动，需要正确配置网络嗅探器以捕获流量并将其转储到文件中。</p>
<pre><code class="language-bash">sudo apt-get install tcpdump apparmor-utils
sudo aa-disable /usr/sbin/tcpdump
</code></pre>
<p>请注意，只有在使用默认目录时才需要<code>apparmor</code>禁用配置文件(<code>aa-disable</code>命令)，<code>CWD</code>因为<code>apparmor</code>会阻止创建实际的<code>PCAP</code>文件(另请参阅<code>tcpdump</code>的权限被拒绝)，对于禁用<code>apparmor</code>的<code>Linux</code>平台(例如，<code>Debian</code>)，以下命令就足以安装<code>tcpdump</code> 。</p>
<pre><code class="language-bash">sudo apt-get install tcpdump
</code></pre>
<p><code>tcpdump</code>需要<code>root</code>权限，但由于不希望<code>Cuckoo</code>以<code>root</code>身份运行，因此必须为二进制文件设置特定的<code>Linux</code>功能。</p>
<pre><code class="language-bash">sudo groupadd pcap
sudo usermod -a -G pcap Czy # 这里是用户名
sudo chgrp pcap /usr/sbin/tcpdump
sudo setcap cap_net_raw,cap_net_admin=eip /usr/sbin/tcpdump
</code></pre>
<p>可以使用以下命令验证上一个命令的结果。</p>
<pre><code class="language-bash">getcap /usr/sbin/tcpdump
# /usr/sbin/tcpdump = cap_net_admin,cap_net_raw+eip
</code></pre>
<p>如果没有安装<code>setcap</code>则安装。</p>
<pre><code class="language-bash">sudo apt-get install libcap2-bin
</code></pre>
<p>或者以其他方式(不推荐)的做法。</p>
<pre><code class="language-bash">sudo chmod +s /usr/sbin/tcpdump
</code></pre>
<h3 id="安装volatility">安装Volatility</h3>
<p><code>Volatility</code>是一种可选工具，可对内存转储进行取证分析，与<code>Cuckoo</code>结合使用，它可以自动提供对操作系统深度修改的额外可视性，并检测逃脱<code>Cuckoo</code>分析器监控域的<code>rootkit</code>技术的存在。</p>
<pre><code class="language-bash">git clone https://github.com/volatilityfoundation/volatility.git
cd volatility
sudo python setup.py build
sudo python setup.py install
</code></pre>
<h3 id="安装m2crypto">安装M2Crypto</h3>
<p>目前<code>M2Crypto</code>只有在安装<code>SWIG</code>时才支持该库，在<code>Ubuntu /Debian</code>的系统上，可以按如下方式完成。</p>
<pre><code class="language-bash">sudo apt-get install swig
sudo pip install m2crypto==0.24.0
</code></pre>
<h2 id="cuckoo环境配置">Cuckoo环境配置</h2>
<p><code>cuckoo</code>默认安装在当前用户目录下，即<code>~/.cuckoo</code>，我们可以使用<code>cuckoo -d</code>来启动<code>cuckoo</code>。</p>
<h3 id="配置virtualbox虚拟机">配置virtualbox虚拟机</h3>
<p>这是个比较大的工程，为了方便我们直接在图形界面上完成这个操作。<br>
首先我们需要准备好一个<code>XP</code>镜像，镜像需要自行下载，可以去<code>MSDN</code>下载，之后还要准备一个密钥，这个可以自行百度，多试试总有能用的。<br>
点击新建，这边的<code>name</code>填<code>cuckoo1</code>，因为我有一个重名的了所以写了个<code>2</code>，这边一定要写好是<code>cuckoo1</code>，选择好<code>windows XP 32-bit</code>系统。</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/79a7df45b8f143e657ec5360309b4c24.png" alt="在这里插入图片描述" loading="lazy"><br>
之后便是分配内存和硬盘存储等，可以一路<code>next</code>，接下来要启动安装镜像。</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/a87271af8051f0eda2f6ce6a464adb16.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>在此处选择下载好的<code>xp</code>系统镜像，接下来就跟随着系统进行安装，安装完成后将虚拟机关机，在<code>Setting</code>中的<code>Storage</code>中将光盘形状的这个位置的启动位置移除即可，否则每次开机都会提示你按任意键从光盘启动，那么便又会启动一次安装程序。</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/4d7d189de11b7ade3eb1c82c0f192043.png" alt="在这里插入图片描述" loading="lazy"><br>
接下来需要配置网络环境，在启动的<code>virtualbox</code>中新建一个虚拟网卡，配置的<code>ip</code>地址等如下所示。</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/52466574e2f3701c16874f75c3628805.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>之后在我们新建的<code>cuckoo1</code>的虚拟机设置网络，如下所示，<code>Host-only</code>是代表只允许与宿主机通信，如果需要访问外网的话，请继续看下边的网络配置。</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/5dd19cb864fe71f60fa891977f445341.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>之后我们要配置一下虚拟机的外网网络环境，刚才我们新建了这个虚拟网卡，之后为了通信我们还需要将虚拟机里设置一个固定的<code>ip</code>地址，也就是刚才我们设置的虚拟网卡网关的子网，但是我们如果我们直接在<code>xp</code>系统里设置虚拟机的<code>ip</code>地址之后是无法上网的，所以我们需要在<code>ubuntu</code>中配置一个<code>NAT</code>网络转发，在这里我们直接使用<code>iptables </code>进行网络转发，这里每次开机都会重置，如果想要开机自动可以使用<code>systemctl</code>进行开机自启动管理，需要编写<code>UNIT</code>，在这里就不赘述了，在这里我们还是写到一个<code>sh</code>文件中需要的时候再执行即可。<br>
注意在下边这个<code>ens160</code>是我的网卡，可以使用<code>ifconfig</code>查看网卡名称，之后的<code>192.168.56.0/24</code>就是主机以及网络号划分的子网，如果上边的<code>ip</code>配置都是根据文章来的话，那就只需要修改这个网卡名称即可。</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/0fb91a89895af008ceeb2084e2935aa7.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-bash">echo 1 | sudo tee -a /proc/sys/net/ipv4/ip_forward
sudo sysctl -w net.ipv4.ip_forward=1

sudo iptables -t nat -A POSTROUTING -o ens160 -s 192.168.56.0/24 -j MASQUERADE # 网卡名称 ens160 
sudo iptables -P FORWARD DROP
sudo iptables -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
sudo iptables -A FORWARD -s 192.168.56.0/24 -j ACCEPT
sudo iptables -A FORWARD -s 192.168.56.0/24 -d 192.168.56.0/24 -j ACCEPT
sudo iptables -A FORWARD -j LOG
</code></pre>
<pre><code class="language-bash">sudo ./network-transform.sh
</code></pre>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/8497bef0eacbd7396fb330d4cb7a6dc3.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>接下来启动这个虚拟机，我们需要在这里关闭防火墙与自动更新，并且配置好<code>ip</code>地址。</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/972c14a7384ee5ee8a7ed8aef2015cd8.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/898878b1e895471eb99a6557b3b5d86e.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>另外还需要在虚拟机中进行网络配置以及启动一个<code>agent.py</code>，这个文件在<code>~/.cuckoo/agent/agent.py</code>，也就是说在虚拟机中也必须安装<code>python 2.7</code>环境，如果需要截图的话，还需要<code>PIL</code>包，在这里就不赘述安装过程了，无论是使用虚拟机共享磁盘还是搭建文件服务器环境等方式，或者是直接在<code>xp</code>虚拟机中下载<code>python</code>安装包并安装即可，使用<code>python3</code>启动简单的文件服务器命令如下。</p>
<pre><code class="language-python">python3 -m http.server --bind 0.0.0.0 8088
</code></pre>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/728b47b56a3f6b7728803c4acb7a41a2.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>之后我们可以直接双击启动<code>agent.py</code>，另外也可以在<code>C:\Document and Settings\Administrator\start menu\program\start</code>设置让其开机自启，当然这个也没要必要，因为我们只需要创建快照即可，在运行<code>agent.py</code>之后，我们可以使用<code>netstat</code>命令查看<code>8000</code>端口是否被占用，如果已经占用就说明<code>agent.py</code>成功启动。</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/0ad396bacc1f0f3c8d0d90f26dc067fa.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>等环境全部搭建完成之后，我们需要创建快照，务必注意名字要命名为<code>snapshot1</code>，默认的为<code>Snapshot 1</code>，注意是首字母大写以及<code>1</code>之前有个空格的，所以我们要命名为<code>snapshot1</code>。</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/4473ab51e41b73aaa663fb21eb9cc10e.png" alt="在这里插入图片描述" loading="lazy"><br>
之后我们就关闭虚拟机即可，在运行<code>cuckoo</code>过程中不需要手动启动虚拟机。</p>
<h3 id="创建数据库">创建数据库</h3>
<p>之前我们安装了<code>MongoDB</code>与<code>PostgreSQL</code>，接下来我们需要为其创建一个用户以及创建数据库，这里统一一下用户名都为<code>cuckoo</code>，密码都为<code>1234567890-=</code>，数据库名都为<code>cuckoo</code>，下边的配置文件要用得到，具体过程请参照各自的数据库命令。</p>
<h3 id="配置文件">配置文件</h3>
<p>所有的配置文件都在<code>~/.cuckoo/conf/</code>目录下，<code>cuckoo.conf</code>配置文件，重要位置已标出。</p>
<pre><code>[cuckoo]
version_check = yes
ignore_vulnerabilities = no
api_token = uIfx
web_secret = 
delete_original = no
delete_bin_copy = no
machinery = virtualbox
memory_dump = no
terminate_processes = no
reschedule = no
process_results = yes
max_analysis_count = 0
max_machines_count = 0
max_vmstartup_count = 10
freespace = 1024
tmppath = 
rooter = /tmp/cuckoo-rooter

[feedback]
enabled = no
name = 
company = 
email = 

[resultserver]
ip = 192.168.109.206 ### 主机地址
port = 2042 ### 端口
upload_max_size = 134217728

[processing].
analysis_size_limit = 134217728
resolve_dns = yes
sort_pcap = yes

[database]
connection = postgresql://cuckoo:1234567890-=@localhost:5432/cuckoo ### 数据库链接
timeout = 60

[timeouts]
default = 120
critical = 60
vm_state = 60

[remotecontrol]
enabled = no
guacd_host = localhost
guacd_port = 4822
</code></pre>
<p><code>virtualbox.conf</code>配置文件，重要位置已标出。</p>
<pre><code>[virtualbox]
mode = headless
path = /usr/bin/VBoxManage
interface = vboxnet0 ### 默认网卡
machines = cuckoo1 ### 虚拟机名称
controlports = 5000-5050

[cuckoo1]
label = cuckoo1 ### label
platform = windows
ip = 192.168.56.101 ### 虚拟机ip地址
snapshot = snapshot1 ### 快照名
interface = vboxnet0 ### 虚拟网卡
resultserver_ip = 
resultserver_port = 
tags = 
options = 
osprofile = 

[honeyd]
label = honeyd
platform = linux
ip = 192.168.56.102
tags = service, honeyd
options = nictrace noagent
</code></pre>
<p><code>reporting.conf</code>配置文件，重要位置已标出。</p>
<pre><code>[feedback]
enabled = no ### 启动

[jsondump]
enabled = yes
indent = 4
calls = yes

[singlefile]
enabled = no
html = no
pdf = no

[misp]
enabled = no
url = 
apikey = 
mode = maldoc ipaddr hashes url
distribution = 0
analysis = 0
threat_level = 4
min_malscore = 0
tag = Cuckoo
upload_sample = no

[mongodb]
enabled = yes ### 启用mongodb
host = 127.0.0.1
port = 27017
db = cuckoo ### 数据库名
store_memdump = yes
paginate = 100
username = cuckoo ### 账号
password = 1234567890-= ### 密码

[elasticsearch]
enabled = no
hosts =  127.0.0.1
timeout = 300
calls = no
index = cuckoo
index_time_pattern = yearly
cuckoo_node = 

[moloch]
enabled = no
host = 
insecure = no
moloch_capture = /data/moloch/bin/moloch-capture
conf = /data/moloch/etc/config.ini
instance = cuckoo

[notification]
enabled = no
url = 
identifier = 

[mattermost]
enabled = no
url = 
myurl = 
username = cuckoo
show_virustotal = no
show_signatures = no
show_urls = no
hash_filename = no
hash_url = no
</code></pre>
<h2 id="启动cuckoo">启动Cuckoo</h2>
<p>启动<code>Cuckoo</code>需要两个终端，一个终端启动<code>cuckoo</code>，另外一个终端启动<code>cuckoo web runserver</code>。</p>
<pre><code class="language-bash">cuckoo
</code></pre>
<pre><code class="language-bash">cuckoo web runserver 0.0.0.0:8000
</code></pre>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/4e939df9c246a404f85f590222e14efd.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/0fba57690ed2b52f8c353d475b94609f.png" alt="在这里插入图片描述" loading="lazy"><br>
之后打开该<code>web</code>服务，在我的服务器的地址为<code>http://192.168.109.206:8000/</code>。</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/8686684d18060475961014c9e719e532.png" alt="在这里插入图片描述" loading="lazy"><br>
在右上角的<code>Submit</code>提交文件，点击<code>Analyze</code>即可，现在就可以在执行<code>cuckoo</code>的终端查看到分析进度了，在<code>Dashboard</code>可以整体查看概览，也可以在<code>Rencent</code>中查看已经完成的任务。</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/64c1415aa729b22ea0e308ae566de5c8.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>另外在正常情况下在分析的时候<code>$HOME/.cuckoo/storage/analyses</code>会出现很多<code>xxx.exe_</code>和<code>xxx.dmp</code>文件，可以使用<code>crontab</code>执行一些定时任务出来一下，例如我不需要则在存在时间大于<code>6</code>分钟的直接删除。</p>
<pre><code class="language-shell">*/6 * * * * cd $HOME/.cuckoo/storage/analyses &amp;&amp; find ./ -regex .*/memory/.*\.exe_  -mmin +6 -delete &amp;&amp; find ./ -regex .*/memory/.*\.dmp  -mmin +6 -delete
</code></pre>
<h2 id="blog">Blog</h2>
<ul>
<li><a href="https://github.com/WindRunnerMax/EveryDay/tree/master" target="_blank" rel="noopener nofollow">https://github.com/WindRunnerMax/EveryDay/tree/master</a></li>
</ul>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://zh.codeprj.com/blog/a9f9bd1.html" target="_blank" rel="noopener nofollow">https://zh.codeprj.com/blog/a9f9bd1.html</a></li>
<li><a href="https://cuckoo.sh/docs/introduction/community.html" target="_blank" rel="noopener nofollow">https://cuckoo.sh/docs/introduction/community.html</a></li>
<li><a href="https://blog.csdn.net/root__user/article/details/89251386" target="_blank" rel="noopener nofollow">https://blog.csdn.net/root__user/article/details/89251386</a></li>
<li><a href="https://blog.csdn.net/qq_42569334/article/details/107212245" target="_blank" rel="noopener nofollow">https://blog.csdn.net/qq_42569334/article/details/107212245</a></li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.48986619119328706" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-21 10:38">2025-01-21 10:24</span>&nbsp;
<a href="https://www.cnblogs.com/WindrunnerMax">WindRunnerMax</a>&nbsp;
阅读(<span id="post_view_count">92</span>)&nbsp;
评论(<span id="post_comment_count">3</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18683099" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18683099);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18683099', targetLink: 'https://www.cnblogs.com/WindrunnerMax/p/18683099', title: 'Ubuntu20.04配置CuckooSandbox环境' })">举报</a>
</div>
        