
		<h2>
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ydswin/p/18683278" title="发布于 2025-01-21 11:23">
    <span role="heading" aria-level="2">K8s 灰度发布实战：通过 Ingress 注解轻松实现流量分割与渐进式发布</span>
    

</a>

		</h2>
		<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在现代微服务架构中，应用的更新和发布是一个高频且关键的操作。如何在不影响用户体验的前提下，安全、平稳地将新版本应用推送到生产环境，是每个开发者和运维团队必须面对的挑战。灰度发布（Gray Release）作为一种渐进式发布策略，能够有效降低发布风险，而 Kubernetes 的 Ingress 注解功能为我们提供了一种简单而强大的实现方式。</p>
<p>本文将带你深入浅出地了解如何通过 <strong>Ingress 注解</strong> 在 Kubernetes 中实现灰度发布，并逐步掌握流量分割、权重控制等核心技巧。无论你是 Kubernetes 新手还是资深用户，都能从本文中获得实用的知识和操作指南。</p>
<hr>
<h2 id="什么是灰度发布"><strong>什么是灰度发布？</strong></h2>
<p>灰度发布，也称为金丝雀发布（Canary Release），是一种渐进式的应用发布策略。它的核心思想是：<strong>将新版本应用逐步推送给一小部分用户，观察其运行状态，确认无误后再逐步扩大范围，最终完成全量发布</strong>。</p>
<p>相比于全量发布，灰度发布具有以下优势：</p>
<ol>
<li><strong>降低风险</strong>：通过小范围验证，避免因新版本问题导致全局故障。</li>
<li><strong>快速回滚</strong>：如果新版本出现问题，可以快速切换回旧版本。</li>
<li><strong>用户体验优化</strong>：逐步发布可以减少对用户的影响。</li>
</ol>
<hr>
<h2 id="kubernetes-中的灰度发布实现方式"><strong>Kubernetes 中的灰度发布实现方式</strong></h2>
<p>在 Kubernetes 中，灰度发布可以通过多种方式实现，例如：</p>
<ul>
<li><strong>Deployment + Service</strong>：手动控制流量切换。</li>
<li><strong>Istio</strong>：通过服务网格实现高级流量管理。</li>
<li><strong>Ingress 注解</strong>：通过 Nginx Ingress Controller 的注解功能实现流量分割。</li>
</ul>
<p>本文将重点介绍 <strong>Ingress 注解</strong> 的实现方式，因为它简单易用，且无需引入额外的组件。</p>
<hr>
<h2 id="通过-ingress-注解实现灰度发布"><strong>通过 Ingress 注解实现灰度发布</strong></h2>
<p>Nginx Ingress Controller 提供了丰富的注解（Annotations），可以轻松实现灰度发布。以下是具体步骤：</p>
<h3 id="1-部署新旧版本应用"><strong>1. 部署新旧版本应用</strong></h3>
<p>首先，我们需要部署两个版本的应用程序：</p>
<ul>
<li><strong>旧版本（v1）</strong>：当前正在运行的生产版本。</li>
<li><strong>新版本（v2）</strong>：待发布的新版本。</li>
</ul>
<h4 id="11-创建-v1-版本-deployment-和-service"><strong>1.1 创建 v1 版本 Deployment 和 Service</strong></h4>
<pre><code class="language-yaml"># v1 版本 Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-v1
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: my-app
        version: v1
    spec:
      containers:
      - name: my-app
        image: my-app:v1
        ports:
        - containerPort: 80

# v1 版本 Service
apiVersion: v1
kind: Service
metadata:
  name: my-app-v1
spec:
  selector:
    app: my-app
    version: v1
  ports:
  - port: 80
    targetPort: 80
</code></pre>
<h4 id="12-创建-v2-版本-deployment-和-service"><strong>1.2 创建 v2 版本 Deployment 和 Service</strong></h4>
<pre><code class="language-yaml"># v2 版本 Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-v2
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: my-app
        version: v2
    spec:
      containers:
      - name: my-app
        image: my-app:v2
        ports:
        - containerPort: 80

# v2 版本 Service
apiVersion: v1
kind: Service
metadata:
  name: my-app-v2
spec:
  selector:
    app: my-app
    version: v2
  ports:
  - port: 80
    targetPort: 80
</code></pre>
<h3 id="2-配置-ingress-实现灰度发布"><strong>2. 配置 Ingress 实现灰度发布</strong></h3>
<p>通过 Nginx Ingress Controller 的 <code>canary</code> 注解，我们可以轻松实现流量分割。</p>
<h4 id="21-创建-ingress-资源"><strong>2.1 创建 Ingress 资源</strong></h4>
<p>以下是一个示例配置：</p>
<pre><code class="language-yaml">apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-app-ingress
  annotations:
    nginx.ingress.kubernetes.io/canary: "true"  # 启用灰度发布
    nginx.ingress.kubernetes.io/canary-weight: "10"  # 10% 流量到新版本
spec:
  rules:
  - host: my-app.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-app-v2  # 新版本服务
            port:
              number: 80
  - host: my-app.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-app-v1  # 旧版本服务
            port:
              number: 80
</code></pre>
<h4 id="22-关键注解说明"><strong>2.2 关键注解说明</strong></h4>
<ul>
<li><code>nginx.ingress.kubernetes.io/canary: "true"</code>：启用灰度发布功能。</li>
<li><code>nginx.ingress.kubernetes.io/canary-weight: "10"</code>：将 10% 的流量分配到新版本（v2），剩余 90% 的流量继续使用旧版本（v1）。</li>
</ul>
<h3 id="3-逐步调整流量权重"><strong>3. 逐步调整流量权重</strong></h3>
<p>在灰度发布过程中，可以逐步增加新版本的流量比例。例如：</p>
<ul>
<li>初始阶段：10% 流量到 v2。</li>
<li>验证通过后：将权重调整为 50%。</li>
<li>最终阶段：将权重调整为 100%，完成全量发布。</li>
</ul>
<p>只需修改 <code>canary-weight</code> 注解的值即可：</p>
<pre><code class="language-yaml">nginx.ingress.kubernetes.io/canary-weight: "50"  # 50% 流量到新版本
</code></pre>
<h3 id="4-监控与回滚"><strong>4. 监控与回滚</strong></h3>
<p>在灰度发布过程中，务必监控新版本的运行状态，包括：</p>
<ul>
<li><strong>应用日志</strong>：检查是否有错误或异常。</li>
<li><strong>性能指标</strong>：如响应时间、错误率等。</li>
<li><strong>用户反馈</strong>：收集用户的使用体验。</li>
</ul>
<p>如果发现问题，可以通过调整 <code>canary-weight</code> 注解将流量切回旧版本：</p>
<pre><code class="language-yaml">nginx.ingress.kubernetes.io/canary-weight: "0"  # 所有流量切回旧版本
</code></pre>
<hr>
<h2 id="灰度发布的进阶用法"><strong>灰度发布的进阶用法</strong></h2>
<p>除了基于权重的流量分割，Nginx Ingress Controller 还支持以下灰度发布策略：</p>
<h3 id="1-基于请求头的流量分割"><strong>1. 基于请求头的流量分割</strong></h3>
<p>通过 <code>nginx.ingress.kubernetes.io/canary-by-header</code> 注解，将特定请求头的流量路由到新版本。</p>
<h4 id="示例配置"><strong>示例配置</strong></h4>
<pre><code class="language-yaml">apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-app-ingress
  annotations:
    nginx.ingress.kubernetes.io/canary: "true"
    nginx.ingress.kubernetes.io/canary-by-header: "X-Canary"
    nginx.ingress.kubernetes.io/canary-by-header-value: "true"
spec:
  rules:
  - host: my-app.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-app-v2
            port:
              number: 80
  - host: my-app.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-app-v1
            port:
              number: 80
</code></pre>
<h4 id="说明"><strong>说明</strong></h4>
<ul>
<li>当请求头中包含 <code>X-Canary: true</code> 时，流量会被路由到新版本（v2）。</li>
<li>其他请求继续使用旧版本（v1）。</li>
</ul>
<h3 id="2-基于-cookie-的流量分割"><strong>2. 基于 Cookie 的流量分割</strong></h3>
<p>通过 <code>nginx.ingress.kubernetes.io/canary-by-cookie</code> 注解，将特定 Cookie 的流量路由到新版本。</p>
<h4 id="示例配置-1"><strong>示例配置</strong></h4>
<pre><code class="language-yaml">apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-app-ingress
  annotations:
    nginx.ingress.kubernetes.io/canary: "true"
    nginx.ingress.kubernetes.io/canary-by-cookie: "canary"
spec:
  rules:
  - host: my-app.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-app-v2
            port:
              number: 80
  - host: my-app.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-app-v1
            port:
              number: 80
</code></pre>
<h4 id="说明-1"><strong>说明</strong></h4>
<ul>
<li>当请求中包含 <code>canary=true</code> 的 Cookie 时，流量会被路由到新版本（v2）。</li>
<li>其他请求继续使用旧版本（v1）。</li>
</ul>
<h3 id="3-组合使用"><strong>3. 组合使用</strong></h3>
<p>可以同时使用权重、请求头和 Cookie 实现更复杂的灰度发布策略。</p>
<h4 id="示例配置-2"><strong>示例配置</strong></h4>
<pre><code class="language-yaml">apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-app-ingress
  annotations:
    nginx.ingress.kubernetes.io/canary: "true"
    nginx.ingress.kubernetes.io/canary-weight: "10"
    nginx.ingress.kubernetes.io/canary-by-header: "X-Canary"
    nginx.ingress.kubernetes.io/canary-by-header-value: "true"
    nginx.ingress.kubernetes.io/canary-by-cookie: "canary"
spec:
  rules:
  - host: my-app.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-app-v2
            port:
              number: 80
  - host: my-app.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-app-v1
            port:
              number: 80
</code></pre>
<h4 id="说明-2"><strong>说明</strong></h4>
<ul>
<li>10% 的流量会被分配到新版本（v2）。</li>
<li>如果请求头中包含 <code>X-Canary: true</code> 或 Cookie 中包含 <code>canary=true</code>，流量也会被路由到新版本。</li>
</ul>
<hr>
<h2 id="总结"><strong>总结</strong></h2>
<p>通过 Kubernetes 的 Ingress 注解，我们可以轻松实现灰度发布，逐步将新版本应用推送给用户，降低发布风险。无论是基于权重的流量分割，还是基于请求头或 Cookie 的精细化控制，Nginx Ingress Controller 都提供了强大的支持。</p>
<p>灰度发布不仅是技术上的优化，更是对用户体验的尊重。希望本文能帮助你掌握这一重要技能，让你的发布过程更加平稳、可靠！</p>
<hr>
<p><strong>立即尝试</strong>：在你的 Kubernetes 集群中部署一个灰度发布示例，感受渐进式发布的魅力吧！如果你有任何问题或想法，欢迎在评论区留言讨论！</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/ydswin/" target="_blank">dashery</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/ydswin/p/18683278" target="_blank">https://www.cnblogs.com/ydswin/p/18683278</a></p>
</div>
<div class="clear"></div>

		<p class="postfoot">
			posted on 
<span id="post-date" data-last-update-days="0.03815634631597222" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-21 11:23">2025-01-21 11:23</span>&nbsp;
<a href="https://www.cnblogs.com/ydswin">dashery</a>&nbsp;
阅读(<span id="post_view_count">4</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18683278" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18683278);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18683278', targetLink: 'https://www.cnblogs.com/ydswin/p/18683278', title: 'K8s 灰度发布实战：通过 Ingress 注解轻松实现流量分割与渐进式发布' })">举报</a>

		</p>
	