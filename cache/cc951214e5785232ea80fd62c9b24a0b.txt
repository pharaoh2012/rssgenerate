
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fkxxgis/p/18687840" title="发布于 2025-01-23 15:24">
    <span role="heading" aria-level="2">Python代码将大量遥感数据的值缩放指定倍数的方法</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        本文介绍基于Python中的gdal模块，批量读取大量多波段遥感影像文件，分别对各波段数据加以数值处理，并将所得处理后数据保存为新的遥感影像文件的方法~
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>  本文介绍基于<strong>Python</strong>中的<code>gdal</code>模块，批量读取<strong>大量多波段遥感影像</strong>文件，分别对<strong>各波段数据</strong>加以数值处理，并将所得处理后数据保存为<strong>新的遥感影像文件</strong>的方法。</p>
<p>  首先，看一下本文的具体需求。我们现有一个文件夹，其中含有大量<code>.tif</code>格式的遥感影像文件；其中，这些遥感影像文件均含有<code>4</code>个波段，每<code>1</code>个波段都表示其各自的<strong>反射率</strong>数值。而对于这些遥感影像文件，有的文件其各波段数值已经处于<code>0</code>至<code>1</code>的区间内（也就是<strong>反射率</strong>数据的正常数值区间），而有的文件其各波段数值则是还<strong>没有乘上缩放系数</strong>的（在本文中，缩放系数是<code>0.0001</code>）。</p>
<p>  例如，如下图所示，即为文件夹中某一景遥感影像。可以看到其各波段数值都是大于<code>1</code>的，这是因为其数值都是还<strong>没有乘上缩放系数</strong>的，即是<strong>真实的反射率数值</strong>的<code>10000</code>倍。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202501/3080295-20250123152024677-798086315.png" alt="image" loading="lazy"></p>
<p>  我们希望实现的是，对于这些遥感影像中，<strong>还没有乘上缩放系数</strong><code>0.0001</code>的遥感影像，将其像元值<strong>乘上这个缩放系数</strong>；而对于<strong>已经缩放过</strong>（也就是像元数值已经落在<code>0</code>至<code>1</code>区间内）的遥感影像，则<strong>不加以任何处理</strong>。最后，将经过上述操作后的<strong>所有图像</strong>（无论是否执行缩放）均保存至指定的输出结果文件夹中。</p>
<p>  本文所需代码如下。</p>
<pre><code class="language-python"># -*- coding: utf-8 -*-
"""
Created on Thu Apr 18 12:37:22 2024

@author: fkxxgis
"""

import os
from osgeo import gdal

original_folder = r"E:\04_Reconstruction\99_MODIS\new_data\GF_Original"
output_folder = r"E:\04_Reconstruction\99_MODIS\new_data\GF_Rec"

for filename in os.listdir(original_folder):
    if filename.endswith('.tif'):
        dataset = gdal.Open(os.path.join(original_folder, filename), gdal.GA_ReadOnly)
        width = dataset.RasterXSize
        height = dataset.RasterYSize
        
        band_count = dataset.RasterCount
        driver = gdal.GetDriverByName('GTiff')
        output_dataset = driver.Create(os.path.join(output_folder, "New_" + filename), width, height, band_count, gdal.GDT_Float32)
        
        for band_index in range(1, band_count + 1):
            band = dataset.GetRasterBand(band_index)
            data = band.ReadAsArray()
            
            if band_index == 1:
                data = data.astype(float)
                data[data &gt; 1] /= 10000
            elif band_index == 2:
                data = data.astype(float)
                data[data &gt; 1] /= 10000
            elif band_index == 3:
                data = data.astype(float)
                data[data &gt; 1] /= 10000
            elif band_index == 4:
                data = data.astype(float)
                data[data &gt; 1] /= 10000

            output_band = output_dataset.GetRasterBand(band_index)
            output_band.WriteArray(data)
            output_band.FlushCache()

        output_dataset.SetGeoTransform(dataset.GetGeoTransform())
        output_dataset.SetProjection(dataset.GetProjection())

        dataset = None
        output_dataset = None
</code></pre>
<p>  首先，我们使用<code>os.listdir()</code>函数遍历原始数据文件夹中的所有文件，并使用<code>if</code>语句筛选出以<code>.tif</code>结尾的文件；随后，使用<code>gdal.Open()</code>函数打开原始影像数据集，并指定<strong>只读</strong>模式；接下来，使用<code>dataset.RasterXSize</code>和<code>dataset.RasterYSize</code>获取影像数据集的宽度和高度。</p>
<p>  随后，使用<code>dataset.RasterCount</code>获取波段数量，并使用<code>gdal.GetDriverByName()</code>创建输出数据集的驱动程序对象；紧接着，通过<code>Create()</code>方法创建输出数据集，并指定输出文件的路径、宽度、高度、波段数量和数据类型（<code>gdal.GDT_Float32</code>表示浮点型）。</p>
<p>  接下来，就可以开始使用循环，对<strong>每个文件</strong>的<strong>每个波段</strong>进行处理。首先，使用<code>dataset.GetRasterBand()</code>方法获取当前波段对象，然后使用<code>band.ReadAsArray()</code>将波段数据读取为数组；根据波段索引的不同，对波段数据进行处理。在本文中，对<code>4</code>个波段进行的其实是相同的处理，即将大于<code>1</code>的像素值除以<code>10000</code>。</p>
<p>  其次，使用<code>output_dataset.GetRasterBand()</code>方法获取输出数据集中的当前波段对象，并使用<code>output_band.WriteArray()</code>方法将处理后的数据写入输出数据集。</p>
<p>  再次，使用<code>dataset.GetGeoTransform()</code>和<code>dataset.GetProjection()</code>分别获取原始数据集的地理转换和投影信息，并使用<code>output_dataset.SetGeoTransform()</code>和<code>output_dataset.SetProjection()</code>设置输出数据集的地理转换和投影信息。</p>
<p>  最后一步，关闭数据集对象。至此，代码就完成了对每个<code>.tif</code>文件的处理，并将处理后的数据保存到输出文件夹中。</p>
<p>  此时，打开本文开头展示的那<code>1</code>景遥感影像，可以看到其像素数值已经是<strong>乘上缩放系数之后</strong>的了，也就是落在了<code>0</code>至<code>1</code>的区间内；如下图所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/3080295/202501/3080295-20250123152019198-1378109119.png" alt="" loading="lazy"></p>
<p>  至此，大功告成。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5344802997534722" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-23 15:25">2025-01-23 15:24</span>&nbsp;
<a href="https://www.cnblogs.com/fkxxgis">疯狂学习GIS</a>&nbsp;
阅读(<span id="post_view_count">74</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18687840" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18687840);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18687840', targetLink: 'https://www.cnblogs.com/fkxxgis/p/18687840', title: 'Python代码将大量遥感数据的值缩放指定倍数的方法' })">举报</a>
</div>
        