
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mingupupu/p/18947524" title="发布于 2025-06-25 10:20">
    <span role="heading" aria-level="2">适用于编程小白的Python学习01：Pandas初探</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="什么是python虚拟环境">什么是Python虚拟环境？</h2>
<p>Python虚拟环境是一个独立的、隔离的Python运行环境，它允许你为每个项目安装独立的库和依赖项，而不会与系统中其他Python项目或全局Python环境发生冲突，从而有效地管理项目依赖、避免版本问题，并确保项目在不同机器上具有可复制性。</p>
<p><img alt="ChatGPT Image 2025年6月25日 08_30_21" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3288240/202506/3288240-20250625101957035-183561875.png" class="lazyload"></p>
<h2 id="为什么要搭建python虚拟环境">为什么要搭建Python虚拟环境？</h2>
<p>1、管理项目依赖</p>
<p>Python生态系统拥有庞大的第三方库和框架，比如用于数据科学的Pandas、NumPy，用于Web开发的Django、Flask等。你的项目很可能需要依赖这些库。</p>
<p>隔离性： 不同的项目可能依赖同一个库的不同版本。例如，项目A需要requests库的1.0版本，而项目B需要requests库的2.0版本。如果没有独立的环境，直接全局安装，就会导致版本冲突，影响一个或两个项目的正常运行。搭建独立环境（如使用venv或conda）可以为每个项目创建独立的依赖沙箱，互不影响。<br>
可复制性： 当你与团队成员协作或将项目部署到服务器时，需要确保所有人都使用相同的库版本。通过环境管理工具，你可以轻松地导出项目所需的依赖列表（例如requirements.txt文件），其他人可以根据这个列表快速搭建出一致的运行环境，确保代码在不同机器上都能正常运行。</p>
<p>2、避免全局污染</p>
<p>如果你将所有项目的依赖都安装到系统全局Python环境中，会导致全局环境变得臃肿和混乱。</p>
<p><strong>冲突风险：</strong> 全局安装的库可能与系统自身依赖的Python库发生冲突，甚至可能影响操作系统的稳定性。</p>
<p><strong>版本管理困难：</strong> 难以追踪哪些库是为哪个项目安装的，也无法轻易卸载某个项目的特定依赖，增加了管理难度。</p>
<p>3、使用不同的Python版本</p>
<p>有时候，不同的项目可能需要不同版本的Python解释器。例如，一个老项目可能只兼容Python 3.6，而一个新项目可能需要Python 3.9的新特性。</p>
<p><strong>多版本共存：</strong> 环境管理工具允许你在同一台机器上安装并管理多个Python版本，并在不同项目之间轻松切换。</p>
<h2 id="vs-code如何搭建python虚拟环境">VS Code如何搭建Python虚拟环境</h2>
<p><img alt="image-20250623111808903" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3288240/202506/3288240-20250625101955895-1932574113.png" class="lazyload"></p>
<p><img alt="image-20250623111827474" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3288240/202506/3288240-20250625101955935-1648752172.png" class="lazyload"></p>
<p><img alt="image-20250623111930583" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3288240/202506/3288240-20250625101955930-1202047865.png" class="lazyload"></p>
<h2 id="前言">前言</h2>
<p>各位编程小白们，大家好！踏上Python学习之旅的你，是否对海量数据感到一丝迷茫？面对表格中密密麻麻的数字和文字，是不是渴望能有一种工具，像魔术师一样，轻松驾驭它们，从中发现有价值的秘密？那么，恭喜你，你找对地方了！</p>
<p>我们将开启<strong>Pandas</strong>的学习之旅。Pandas是Python数据科学领域的一颗璀璨明星，它被称为“数据分析的瑞士军刀”。对于初学者来说，它可能听起来有些高深，但别担心，我们将用最通俗易懂的方式，带你一步步揭开它的神秘面纱。</p>
<p>想象一下，你有一大堆Excel表格、CSV文件，甚至是数据库里的数据，想要进行整理、清洗、分析和可视化。如果用传统的Python列表和字典来操作，那简直是噩梦。而Pandas的出现，就是为了解决这些痛点。它提供了高效、灵活的数据结构，让你能够像操作熟悉的电子表格一样处理数据，并且速度更快，功能更强大。</p>
<p>在本系列的第一篇中，我们将初步探索Pandas中最核心、最常用的数据结构——<strong>DataFrame</strong>。你会学会如何导入数据，快速查看数据概貌，了解数据的基本信息，并对数据进行简单的排序。这些都是你未来深入学习数据分析、机器学习甚至人工智能的基石。准备好了吗？让我们一起迈出数据分析的第一步，感受Pandas的魅力吧！</p>
<p><img alt="ChatGPT Image 2025年6月25日 08_39_58" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3288240/202506/3288240-20250625101956590-1800483432.png" class="lazyload"></p>
<h2 id="pandas介绍">Pandas介绍</h2>
<p>Pandas 是 Python 编程语言中一个强大且广泛使用的<strong>开源数据分析和操作工具库</strong>。它基于 NumPy 库构建，提供了高效的数据结构，使得处理结构化数据变得简单、快速且直观。可以把它想象成一个功能强大的电子表格软件，但拥有编程的灵活性和自动化能力。</p>
<h2 id="项目实战">项目实战</h2>
<p>有一个表格如下所示：</p>
<p><img alt="image-20250623131210969" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3288240/202506/3288240-20250625101955941-889563665.png" class="lazyload"></p>
<h3 id="1加载数据">1、加载数据</h3>
<pre><code class="language-python">def load_data():
    """
    加载CSV文件并返回DataFrame
    """
    df = pd.read_csv('students.csv')
    print("\n1. 数据加载结果：")
    print(df.head())
    return df
</code></pre>
<p><code>df.head()</code> 是一个非常常用的方法，它被调用在一个 <strong>DataFrame 对象</strong>（通常命名为 <code>df</code>）上。它的主要目的是<strong>显示 DataFrame 的前几行数据</strong>。</p>
<p>效果：</p>
<p><img alt="image-20250623131327384" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3288240/202506/3288240-20250625101955951-1267939200.png" class="lazyload"></p>
<h3 id="2查看数据基本信息">2、查看数据基本信息</h3>
<pre><code class="language-python">def basic_info(df):
    """
    显示数据基本信息
    """
    print("\n2. 数据基本信息：")
    print("\n数据形状（行数，列数）：")
    print(df.shape)
    print("\n数据类型信息：")
    print(df.info())
    print("\n数据统计描述：")
    print(df.describe())
</code></pre>
<p><code>df.shape</code> 是一个重要的<strong>属性</strong>。它的作用是<strong>返回 DataFrame 的维度（形状）</strong>，也就是它的<strong>行数和列数</strong>。</p>
<p><code>df.info()</code> 是一个有用的<strong>方法</strong>，它用于<strong>打印 DataFrame 的简洁摘要信息</strong>。</p>
<p><code>df.describe()</code> 是一个强大的<strong>方法</strong>，它能快速生成 DataFrame 中<strong>数值型列的描述性统计信息</strong>。</p>
<p>效果：</p>
<p><img alt="image-20250623131553253" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3288240/202506/3288240-20250625101955953-1120147499.png" class="lazyload"></p>
<h3 id="3数据选择">3、数据选择</h3>
<pre><code class="language-python">def select_data(df):
    """
    数据选择操作示例
    """
    print("\n3. 数据选择操作：")
    print("\n选择单列 'name'：")
    print(df['name'])
    print("\n选择多列 'name' 和 'score'：")
    print(df[['name', 'score']])
    print("\n条件筛选：分数大于90的学生")
    print(df[df['score'] &gt; 90])
</code></pre>
<p>效果：</p>
<p><img alt="image-20250623131735822" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3288240/202506/3288240-20250625101955969-656143715.png" class="lazyload"></p>
<h3 id="4数据排序">4、数据排序</h3>
<pre><code class="language-python">def sort_data(df):
    """
    数据排序操作
    """
    print("\n4. 数据排序：")
    print("\n按分数降序排序：")
    print(df.sort_values('score', ascending=False))
    print("\n按年龄升序、分数降序排序：")
    print(df.sort_values(['age', 'score'], ascending=[True, False]))
</code></pre>
<p><code>df.sort_values()</code> 是一个常用的<strong>方法</strong>，用于<strong>根据 DataFrame 中一个或多个列的值来对行进行排序</strong>。</p>
<p>效果：</p>
<p><img alt="image-20250623131918167" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3288240/202506/3288240-20250625101955933-1904495375.png" class="lazyload"></p>
<h3 id="5分组统计">5、分组统计</h3>
<pre><code class="language-python">def group_data(df):
    """
    分组统计操作
    """
    print("\n5. 分组统计：")
    print("\n按科目分组计算平均分：")
    print(df.groupby('subject')['score'].mean())
    print("\n按年级分组计算各科目平均分：")
    print(df.groupby(['grade', 'subject'])['score'].mean())
</code></pre>
<p><code>df.groupby()</code> 用于执行“<strong>分组聚合</strong>操作。</p>
<p>效果：</p>
<p><img alt="image-20250623132138044" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3288240/202506/3288240-20250625101955914-881241403.png" class="lazyload"></p>
<h3 id="6数据添加和修改操作">6、数据添加和修改操作</h3>
<pre><code class="language-python">def add_modify_data(df):
    """
    数据添加和修改操作
    """
    print("\n6. 数据添加和修改：")
    # 添加新列：及格状态
    df['pass_status'] = df['score'].apply(lambda x: 'Pass' if x &gt;= 60 else 'Fail')
    print("\n添加及格状态列后的数据：")
    print(df)
</code></pre>
<p>效果：</p>
<p><img alt="image-20250623132353868" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3288240/202506/3288240-20250625101955974-1450121602.png" class="lazyload"></p>
<h3 id="7数据可视化">7、数据可视化</h3>
<pre><code class="language-python">def data_visualization(df):
    """
    基础数据可视化
    """
    print("\n7. 数据可视化：")
    # 创建科目平均分数的柱状图
    plt.figure(figsize=(10, 6))
    df.groupby('subject')['score'].mean().plot(kind='bar')
    plt.title('Average Score by Subject')
    plt.xlabel('Subject')
    plt.ylabel('Average Score')
    plt.tight_layout()
    plt.savefig('subject_scores.png')
    plt.close()
    print("已生成科目平均分数柱状图：subject_scores.png")
</code></pre>
<p><code>df.groupby('subject')</code>：这是 <code>groupby</code> 操作的第一步。它告诉 Pandas，根据 DataFrame 中 <code>'subject'</code>（科目）列的<strong>唯一值</strong>来将数据进行分组。</p>
<p><code>['score'].mean()</code>：它会计算每个 <code>'subject'</code> 组中所有 <code>'score'</code> 值的<strong>平均值</strong>。</p>
<p><code>.plot(kind='bar')</code>：<code>.plot()</code>这是 Pandas 提供的一个便捷绘图接口，它底层使用了 <code>Matplotlib</code> 库。<code>kind='bar'</code> 表示生成一个**条形图 **。</p>
<p>效果：</p>
<p><img alt="image-20250623132538501" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3288240/202506/3288240-20250625101955916-628404016.png" class="lazyload"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-25 10:20">2025-06-25 10:20</span>&nbsp;
<a href="https://www.cnblogs.com/mingupupu">mingupupup</a>&nbsp;
阅读(<span id="post_view_count">149</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18947524);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18947524', targetLink: 'https://www.cnblogs.com/mingupupu/p/18947524', title: '适用于编程小白的Python学习01：Pandas初探' })">举报</a>
</div>
        