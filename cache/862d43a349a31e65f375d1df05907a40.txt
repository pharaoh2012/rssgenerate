
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/12lisu/p/18815508" title="发布于 2025-04-08 21:33">
    <span role="heading" aria-level="2">瞧瞧别人家的限流，那叫一个优雅！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>去年夏天某个凌晨，我接到某金融平台报警：支付接口错误率飙升至35%。</p>
<p>赶到机房时，发现数据库连接池耗尽，大量请求堆积成山——这就是典型的<strong>未做限流防护</strong>的灾难现场。</p>
<p>就像高速公路不设收费站，高峰期必然堵成停车场。</p>
<p><strong>限流的本质</strong>不是拒绝服务，而是<strong>用可控的牺牲保护核心链路</strong>。</p>
<p>某电商大促时，他们用令牌桶算法将秒杀接口QPS限制在5万，虽然流失了20%的突发流量，但保住了99%的核心交易成功率。</p>
<h2 id="1-常用限流方案">1 常用限流方案</h2>
<h3 id="11-固定窗口计数器">1.1 固定窗口计数器</h3>
<p><strong>核心原理：</strong><br>
以固定时间窗口（如1秒）为周期，统计周期内请求数，超过阈值则拒绝后续请求。</p>
<p><img src="https://files.mdnice.com/user/5303/07c3f11d-d91e-47bc-832c-0e970ef4dcbe.png" alt="" loading="lazy"></p>
<p>具体代码实现如下：</p>
<pre><code class="language-java">// 线程安全实现（AtomicLong优化版）
public class FixedWindowCounter {
    private final AtomicLong counter = new AtomicLong(0);
    private volatile long windowStart = System.currentTimeMillis();
    private final int maxRequests;
    private final long windowMillis;

    public boolean tryAcquire() {
        long now = System.currentTimeMillis();
        if (now - windowStart &gt; windowMillis) {
            if (counter.compareAndSet(counter.get(), 0)) {
                windowStart = now;
            }
        }
        return counter.incrementAndGet() &lt;= maxRequests;
    }
}
</code></pre>
<p><strong>致命缺陷：</strong><br>
假设设置1秒100次限制，0.9秒时突发100次请求，下一秒0.1秒又放行100次，实际两秒内通过200次。</p>
<p>就像红绿灯切换时车辆抢行，容易引发"临界点突刺"。</p>
<p><strong>适用场景：</strong><br>
日志采集、非关键性接口的粗粒度限流</p>
<h3 id="12-滑动窗口">1.2 滑动窗口</h3>
<p><strong>核心原理：</strong><br>
将时间窗口细分为更小的时间片（如10秒），统计最近N个时间片的请求总和。</p>
<p><img src="https://files.mdnice.com/user/5303/074d7162-4b2a-4de9-b1df-cd43a1695323.png" alt="" loading="lazy"></p>
<p>基于Redis的Lua脚本如下：</p>
<pre><code class="language-java">// Redis Lua实现滑动窗口（精确到毫秒）
String lua = """
    local now = tonumber(ARGV
    local window = tonumber(ARGV
    local key = KEYS[1]
    
    redis.call('ZREMRANGEBYSCORE', key, '-inf', now - window)
    local count = redis.call('ZCARD', key)
    
    if count &lt; tonumber(ARGV then
        redis.call('ZADD', key, now, now)
        redis.call('EXPIRE', key, window/1000)
        return 1
    end
    return 0
    """;
</code></pre>
<p><strong>技术亮点：</strong><br>
某证券交易系统采用滑动窗口后，将API异常率从5%压降至0.3%。</p>
<p>通过Redis ZSET实现时间切片，误差控制在±10ms内。</p>
<p><strong>优势对比</strong></p>
<table>
<thead>
<tr>
<th>指标</th>
<th>固定窗口</th>
<th>滑动窗口</th>
</tr>
</thead>
<tbody>
<tr>
<td>时间精度</td>
<td>1秒</td>
<td>100ms</td>
</tr>
<tr>
<td>临界突刺问题</td>
<td>存在</td>
<td>消除</td>
</tr>
<tr>
<td>实现复杂度</td>
<td>简单</td>
<td>中等</td>
</tr>
</tbody>
</table>
<h3 id="23-漏桶算法">2.3 漏桶算法</h3>
<p><strong>核心原理：</strong><br>
请求像水流一样进入漏桶，系统以固定速率处理请求。</p>
<p>桶满时新请求被丢弃。</p>
<p><img src="https://files.mdnice.com/user/5303/cdcccbe1-3f84-4f32-b389-786622d4e68b.png" alt="" loading="lazy"></p>
<p>具体实现如下：</p>
<pre><code class="language-java">// 漏桶动态实现（Semaphore优化版）
public class LeakyBucket {
    private final Semaphore permits;
    private final ScheduledExecutorService scheduler;

    public LeakyBucket(int rate) {
        this.permits = new Semaphore(rate);
        this.scheduler = Executors.newScheduledThreadPool(1);
        scheduler.scheduleAtFixedRate(() -&gt; permits.release(rate), 1, 1, TimeUnit.SECONDS);
    }

    public boolean tryAcquire() {
        return permits.tryAcquire();
    }
}
</code></pre>
<p><strong>技术痛点：</strong><br>
某智能家居平台用此方案，确保即使10万台设备同时上报数据，系统仍按500条/秒的速率稳定处理。</p>
<p>但突发流量会导致队列积压，就像用漏斗倒奶茶——珍珠容易卡住。</p>
<p><strong>适用场景：</strong><br>
IoT设备控制指令下发、支付渠道限额等需要严格恒定速率的场景</p>
<h3 id="14-令牌桶算法">1.4 令牌桶算法</h3>
<p><strong>核心原理：</strong><br>
以固定速率生成令牌，请求需获取令牌才能执行。</p>
<p>突发流量可消耗桶内积攒的令牌。</p>
<p><img src="https://files.mdnice.com/user/5303/28fc61ae-1106-434f-af0e-4ec34cab409b.png" alt="" loading="lazy"></p>
<p>具体实现如下：</p>
<pre><code class="language-java">// Guava RateLimiter高级用法
RateLimiter limiter = RateLimiter.create(10.0, 1, TimeUnit.SECONDS); // 初始预热
limiter.acquire(5); // 尝试获取5个令牌

// 动态调整速率（需反射实现）
Field field = RateLimiter.class.getDeclaredField("tokens");
field.setAccessible(true);
AtomicDouble tokens = (AtomicDouble) field.get(limiter);
tokens.set(20); // 突发时注入20个令牌
</code></pre>
<p><strong>实战案例：</strong><br>
某视频平台用此方案应对热点事件：平时限制10万QPS，突发时允许3秒内超限50%，既防雪崩又保用户体验。</p>
<p><strong>动态特性</strong></p>
<ul>
<li>正常时限制QPS</li>
<li>突发时允许透支</li>
<li>持续突发会耗尽令牌</li>
</ul>
<p>我的技术网站，海量八股文、项目实战这里都有：www.susan.net.cn，欢迎大家访问。</p>
<h2 id="2-生产环境实战">2 生产环境实战</h2>
<h3 id="21-网关层分布式限流">2.1 网关层分布式限流</h3>
<p>某电商双11方案：通过Redis+Lua实现分布式计数，配合Nginx本地缓存，在网关层拦截了83%的恶意请求。</p>
<p><img src="https://files.mdnice.com/user/5303/ede4e10b-13d6-4dc8-a3e9-583039d8aa58.png" alt="" loading="lazy"></p>
<h3 id="22-自适应熔断机制">2.2 自适应熔断机制</h3>
<p>我们还需要自适应熔断机制。</p>
<p>某社交平台用此方案，在突发流量时自动将限流阈值从5万降到3万，等系统恢复后再逐步提升。</p>
<p><img src="https://files.mdnice.com/user/5303/86a8f678-c994-46c2-a6ab-9b9617b9b616.png" alt="" loading="lazy"></p>
<h2 id="3-避坑指南与性能优化">3 避坑指南与性能优化</h2>
<h3 id="31-致命误区">3.1 致命误区</h3>
<p>在数据库连接池前做限流！</p>
<p>某公司曾因此导致连接泄漏，最终撑爆数据库。</p>
<p>正确做法应遵循<strong>熔断三原则</strong>：</p>
<ol>
<li>快速失败：在入口层拦截无效请求</li>
<li>动态降级：核心服务保留最小资源</li>
<li>自动恢复：熔断后渐进式放量</li>
</ol>
<h3 id="32-性能优化">3.2 性能优化</h3>
<p>某金融系统通过JMH测试发现，使用LongAdder替代AtomicLong，限流吞吐量提升220%。</p>
<p><img src="https://files.mdnice.com/user/5303/0457dc76-fbd9-4909-8eae-88f5c8a876e3.png" alt="" loading="lazy"></p>
<p>性能优化手段：减少CAS竞争 和 分段锁基座。<br>
<img src="https://files.mdnice.com/user/5303/7f5e4ac1-3f0d-481a-b376-1767da443187.png" alt="" loading="lazy"></p>
<h2 id="总结">总结</h2>
<p>上面列举了工作中最常用的4种限流方案。</p>
<p>对于不同的业务场景，我们需要选择不同的限流方案。</p>
<p><img src="https://files.mdnice.com/user/5303/8bdc198b-ed3a-469f-89a9-10cf80ce4544.png" alt="" loading="lazy"></p>
<p>限流的黄金法则如下：<br>
<img src="https://files.mdnice.com/user/5303/93d717db-21c5-4c4b-b8ae-8ce7526d706d.png" alt="" loading="lazy"></p>
<p>记住：好的限流方案就像高铁闸机——既保证通行效率，又守住安全底线。</p>
<h2 id="最后说一句求关注别白嫖我">最后说一句(求关注，别白嫖我)</h2>
<p>如果这篇文章对您有所帮助，或者有所启发的话，帮忙关注一下我的同名公众号：苏三说技术，您的支持是我坚持写作最大的动力。</p>
<p>求一键三连：点赞、转发、在看。</p>
<p>关注公众号：【苏三说技术】，在公众号中回复：进大厂，可以免费获取我最近整理的10万字的面试宝典，好多小伙伴靠这个宝典拿到了多家大厂的offer。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.030341016040509258" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-08 21:34">2025-04-08 21:33</span>&nbsp;
<a href="https://www.cnblogs.com/12lisu">苏三说技术</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18815508" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18815508);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18815508', targetLink: 'https://www.cnblogs.com/12lisu/p/18815508', title: '瞧瞧别人家的限流，那叫一个优雅！' })">举报</a>
</div>
        