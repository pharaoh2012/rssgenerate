
        <h2>
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wuhuacong/p/19005570" title="发布于 2025-07-26 13:28">
    <span role="heading" aria-level="2">在Vue3+ElementPlus前端中增加表格记录选择的自定义组件，通过结合Popover 弹出框和Input输入框或者按钮选择实现</span>
    

</a>

        </h2>
        <div class="postbody">
                <div id="cnblogs_post_description" style="display: none">
        
        上次客户过来讨论的时候，说起其旧系统很多字段选择是通过弹出表格选择记录的，希望沿袭这个使用习惯，否则客户对新系统开发可能不适应，问我如何在Vue3+ElementPlus前端中是否可以实现，我说你基于JQuery的都可以实现，那么Vue3上开发肯定没问题的，而且响应会更加丝滑的，于是我就琢磨做一个通用的案例，整合在我的SqlSugar开发框架的Vue3+ElementPlus前端中。既然要弄就弄个通用的自定义表格选择组件，以便在更多的场合下可以使用，通过动态配置表格字段和相关的属性即可显示和选择。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>上次客户过来讨论的时候，说起其旧系统很多字段选择是通过弹出表格选择记录的，希望沿袭这个使用习惯，否则客户对新系统开发可能不适应，问我如何在Vue3+ElementPlus前端中是否可以实现，我说你基于JQuery的都可以实现，那么Vue3上开发肯定没问题的，而且响应会更加丝滑的，于是我就琢磨做一个通用的案例，整合在我的SqlSugar开发框架的Vue3+ElementPlus前端中。既然要弄就弄个通用的自定义表格选择组件，以便在更多的场合下可以使用，通过动态配置表格字段和相关的属性即可显示和选择。</p>
<p>本篇例子结合Popover 弹出框和Input输入框实现用户记录的选择，以及结合Popover 弹出框和按钮选择实现菜单中多语言键值的选择两项功能实现进行介绍。</p>
<h3>&nbsp;1、结合Popover 弹出框和Input输入框实现表格记录选择</h3>
<p>在el-Popover的组件中，我们也都看到了他的一个弹出表格的简单案例，如下所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202507/8867-20250725225226867-1110624123.png" alt="image" width="558" height="295" loading="lazy"></p>
<p>不过这个例子太过简单，参考下可以，但是和我们实现通用的数据记录查询以及表格内容可以变化等需求不符合，我们需要根据这样的模式，把Input输入和表格显示整合到里面去，这样可以在对应的表格上进行数据查询过滤，这样可以快速选择到记录。</p>
<p>我的大概需求如下：</p>
<p>使用 <strong data-start="8" data-end="32">Vue 3 + Element Plus</strong> 实现的自定义组件示例，它可以用在不同的业务表中，要求通用化，功能上它集成了：</p>
<ul data-start="51" data-end="148">
<li data-start="51" data-end="78">
<p data-start="53" data-end="78"><code data-start="53" data-end="65">el-popover</code> 弹出框，用于显示选择面板</p>
</li>
<li data-start="79" data-end="102">
<p data-start="81" data-end="102"><code data-start="81" data-end="91">el-input</code> 输入框，点击触发弹出</p>
</li>
<li data-start="103" data-end="126">
<p data-start="105" data-end="126"><code data-start="105" data-end="115">el-table</code> 表格控件，展示可选项，还可以对数据进行过滤查询</p>
</li>
<li data-start="127" data-end="148">
<p data-start="129" data-end="148">可点击表格行来选择记录并回填到输入框中</p>
</li>
</ul>
<p data-start="150" data-end="180">该组件适用于选择一个记录项（如客户、产品等）并回传给父组件。</p>
<p data-start="2278" data-end="2292">你可以根据需要扩展以下功能：</p>
<ul data-start="2294" data-end="2449">
<li data-start="2294" data-end="2357">
<p data-start="2296" data-end="2357">✅ 支持远程搜索（使用 <code data-start="2308" data-end="2318">el-table</code> 的 <code data-start="2321" data-end="2337">@filter-change</code> 或增加 <code data-start="2342" data-end="2352">el-input</code> 搜索框）</p>
</li>
<li data-start="2358" data-end="2386">
<p data-start="2360" data-end="2386">✅ 支持分页（结合 <code data-start="2370" data-end="2385">el-pagination</code>）</p>
</li>
<li data-start="2387" data-end="2424">
<p data-start="2389" data-end="2424">✅ 支持多选（表格加 <code data-start="2400" data-end="2418">type="selection"</code>，回传数组）</p>
</li>
<li data-start="2425" data-end="2449">
<p data-start="2427" data-end="2449">✅ 支持懒加载（点击时加载 options）</p>
</li>
</ul>
<p>我们先来看看成品的效果，下面案例是我基于用户记录表进行选择的处理下效果。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202507/8867-20250725230543654-67103332.png" alt="image" width="635" height="148" loading="lazy"></p>
<p>&nbsp;单击选择用户的输入框，就会弹出对应的数据表格进行显示，我们可以在其中进行过滤查询，然后单击记录可以选中返回。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202507/8867-20250725230442629-486892494.png" alt="image" width="993" height="501" loading="lazy"></p>
<p>我们自定义组件名称命名为&nbsp;TableSelector，那么它的使用代码如下所示。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">el-form-item </span><span style="color: rgba(255, 0, 0, 1)">label</span><span style="color: rgba(0, 0, 255, 1)">="选择用户名"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">TableSelector
    </span><span style="color: rgba(255, 0, 0, 1)">v-model</span><span style="color: rgba(0, 0, 255, 1)">="selectedUser"</span><span style="color: rgba(255, 0, 0, 1)">
    filter-placeholder</span><span style="color: rgba(0, 0, 255, 1)">="请输入人员编号/姓名/电话/住址等搜索"</span><span style="color: rgba(255, 0, 0, 1)">
    :columns</span><span style="color: rgba(0, 0, 255, 1)">="[
      { prop: 'id', label: 'ID', width: 80 },
      { prop: 'name', label: '用户名' },
      { prop: 'fullname', label: '真实姓名' },
      { prop: 'mobilephone', label: '移动电话' },
      { prop: 'email', label: '邮箱' }
    ]"</span><span style="color: rgba(255, 0, 0, 1)">
    :fetchData</span><span style="color: rgba(0, 0, 255, 1)">="loadUsers"</span><span style="color: rgba(255, 0, 0, 1)">
    row-key</span><span style="color: rgba(0, 0, 255, 1)">="name"</span><span style="color: rgba(255, 0, 0, 1)">
    placeholder</span><span style="color: rgba(0, 0, 255, 1)">="请选择用户"</span>
  <span style="color: rgba(0, 0, 255, 1)">/&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">el-form-item</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre>
</div>
<p>v-model绑定选中的记录对象，其中&nbsp;columns 属性我们可以根据不同的业务表进行配置显示，而&nbsp;fetchData 则是传入一个函数给它获取数据的，交给调用的父组件进行数据的过滤和处理即可。</p>
<p>其中的loadUsers的实现，我们根据不同的业务实现它的数据请求查询即可，如下是函数代码。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">加载用户，供选择表格处理</span>
async <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"><strong><span style="color: rgba(255, 0, 0, 1)"> loadUsers(filter: string)</span></strong> {
  const params </span>=<span style="color: rgba(0, 0, 0, 1)"> {
    maxresultcount: </span>100<span style="color: rgba(0, 0, 0, 1)">,
    skipcount: </span>0<span style="color: rgba(0, 0, 0, 1)">,
    sorting: </span>''<span style="color: rgba(0, 0, 0, 1)">,
    filter: filter
  };
  const res </span>=<span style="color: rgba(0, 0, 0, 1)"><strong><span style="color: rgba(255, 0, 0, 1)"> await user.GetAllByFilter</span></strong>(params);
  </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> res.items;
}</span></pre>
</div>
<p>这样我们就可以实现通用的处理，不同的业务记录显示，我们配置表格内容显示和获取数据的逻辑即可。</p>
<p>自定义组件的props定义和emits事件如下所示。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Props</span>
const props = <strong><span style="color: rgba(255, 0, 0, 1)">defineProps</span></strong>&lt;<span style="color: rgba(0, 0, 0, 1)">{
  columns: ColumnDef[];
  data</span>?<span style="color: rgba(0, 0, 0, 1)">: any[];
  modelValue</span>?: any | any[]; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 当前选中值（单个对象或数组）</span>
  rowKey?: string; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 要显示的字段 key（如 name）</span>
  multiple?: <span style="color: rgba(0, 0, 255, 1)">boolean</span><span style="color: rgba(0, 0, 0, 1)">;
  pagination</span>?<span style="color: rgba(0, 0, 0, 1)">: {
    page: number;
    pageSize: number;
    total: number;
    onPageChange: (page: number) </span>=&gt; <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">;
  };
  fetchData</span>?: (filter: string) =&gt; Promise&lt;any[]&gt;; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 外部提供的数据加载函数</span>
  placeholder?<span style="color: rgba(0, 0, 0, 1)">: string;
  filterPlaceholder</span>?<span style="color: rgba(0, 0, 0, 1)">: string;
}</span>&gt;<span style="color: rgba(0, 0, 0, 1)">();

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Emits</span>
const emit = <span style="color: rgba(255, 0, 0, 1)"><strong>defineEmits</strong></span>&lt;<span style="color: rgba(0, 0, 0, 1)">{
  (e: </span>'update:modelValue', val: any | any[]): <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">;
}</span>&gt;();</pre>
</div>
<p>我们为了剥离具体表格字段的处理，因此配置了动态的columns参数，因此在自定义组件显示表格的时候，根据配置的信息进行显示字段即可，如下所示。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">template</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">el-popover
      </span><span style="color: rgba(255, 0, 0, 1)">v-model:visible</span><span style="color: rgba(0, 0, 255, 1)">="visible"</span><span style="color: rgba(255, 0, 0, 1)">
      placement</span><span style="color: rgba(0, 0, 255, 1)">="bottom-start"</span><span style="color: rgba(255, 0, 0, 1)">
      width</span><span style="color: rgba(0, 0, 255, 1)">="600"</span><span style="color: rgba(255, 0, 0, 1)">
      trigger</span><span style="color: rgba(0, 0, 255, 1)">="focus"</span><span style="color: rgba(255, 0, 0, 1)">
      :teleported</span><span style="color: rgba(0, 0, 255, 1)">="false"</span>
    <span style="color: rgba(0, 0, 255, 1)">&gt;</span>
      <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">div </span><span style="color: rgba(255, 0, 0, 1)">style</span><span style="color: rgba(0, 0, 255, 1)">="margin-bottom: 8px"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">el-input
          </span><span style="color: rgba(255, 0, 0, 1)">v-model</span><span style="color: rgba(0, 0, 255, 1)">="filterText"</span><span style="color: rgba(255, 0, 0, 1)">
          :placeholder</span><span style="color: rgba(0, 0, 255, 1)">="filterPlaceholder || '输入关键字筛选'"</span><span style="color: rgba(255, 0, 0, 1)">
          clearable
        </span><span style="color: rgba(0, 0, 255, 1)">/&gt;</span>
      <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
      <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> 表格区域 </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
      <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">el-table
        </span><span style="color: rgba(255, 0, 0, 1)">v-loading</span><span style="color: rgba(0, 0, 255, 1)">="loading"</span><span style="color: rgba(255, 0, 0, 1)">
        :data</span><span style="color: rgba(0, 0, 255, 1)">="tableData"</span><span style="color: rgba(255, 0, 0, 1)">
        :height</span><span style="color: rgba(0, 0, 255, 1)">="300"</span><span style="color: rgba(255, 0, 0, 1)">
        @selection-change</span><span style="color: rgba(0, 0, 255, 1)">="handleSelectionChange"</span><span style="color: rgba(255, 0, 0, 1)">
        @row-click</span><span style="color: rgba(0, 0, 255, 1)">="handleRowClick"</span><span style="color: rgba(255, 0, 0, 1)">
        :row-key</span><span style="color: rgba(0, 0, 255, 1)">="rowKey"</span><span style="color: rgba(255, 0, 0, 1)">
        :highlight-current-row</span><span style="color: rgba(0, 0, 255, 1)">="isSingleSelect"</span><span style="color: rgba(255, 0, 0, 1)">
        style</span><span style="color: rgba(0, 0, 255, 1)">="width: 100%"</span>
      <span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">el-table-column </span><span style="color: rgba(255, 0, 0, 1)">v-if</span><span style="color: rgba(0, 0, 255, 1)">="multiple"</span><span style="color: rgba(255, 0, 0, 1)"> type</span><span style="color: rgba(0, 0, 255, 1)">="selection"</span><span style="color: rgba(255, 0, 0, 1)"> width</span><span style="color: rgba(0, 0, 255, 1)">="40"</span> <span style="color: rgba(0, 0, 255, 1)">/&gt;</span>
<strong>        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">template </span><span style="color: rgba(255, 0, 0, 1)">v-for</span><span style="color: rgba(0, 0, 255, 1)">="col in columns"</span><span style="color: rgba(255, 0, 0, 1)"> :key</span><span style="color: rgba(0, 0, 255, 1)">="col.prop"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
          <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">el-table-column
            </span><span style="color: rgba(255, 0, 0, 1)">:prop</span><span style="color: rgba(0, 0, 255, 1)">="col.prop"</span><span style="color: rgba(255, 0, 0, 1)">
            :label</span><span style="color: rgba(0, 0, 255, 1)">="col.label"</span><span style="color: rgba(255, 0, 0, 1)">
            :width</span><span style="color: rgba(0, 0, 255, 1)">="col.width"</span>
          <span style="color: rgba(0, 0, 255, 1)">/&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">template</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></strong>
      <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">el-table</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre>
</div>
<p>在输入框的处理上，我们设置它的显示内容和清空按钮等处理，如下所示。</p>
<div class="cnblogs_code">
<pre>      <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> 弹出内容插槽的触发器 </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
      <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">template </span><span style="color: rgba(255, 0, 0, 1)">#reference</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">el-input
          </span><span style="color: rgba(255, 0, 0, 1)">v-model</span><span style="color: rgba(0, 0, 255, 1)">="displayText"</span><span style="color: rgba(255, 0, 0, 1)">
          readonly
          :placeholder</span><span style="color: rgba(0, 0, 255, 1)">="placeholder || '请选择...'"</span><span style="color: rgba(255, 0, 0, 1)">
          suffix-icon</span><span style="color: rgba(0, 0, 255, 1)">="el-icon-arrow-down"</span><span style="color: rgba(255, 0, 0, 1)">
          @click.stop</span><span style="color: rgba(0, 0, 255, 1)">="visible = true"</span><span style="color: rgba(255, 0, 0, 1)">
          :clearable</span><span style="color: rgba(0, 0, 255, 1)">="true"</span>
        <span style="color: rgba(0, 0, 255, 1)">&gt;</span>
          <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">template </span><span style="color: rgba(255, 0, 0, 1)">#suffix</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">el-icon
              </span><span style="color: rgba(255, 0, 0, 1)">v-if</span><span style="color: rgba(0, 0, 255, 1)">="displayText"</span><span style="color: rgba(255, 0, 0, 1)">
              class</span><span style="color: rgba(0, 0, 255, 1)">="cursor-pointer"</span><span style="color: rgba(255, 0, 0, 1)">
              @click.stop</span><span style="color: rgba(0, 0, 255, 1)">="clearSelection"</span>
            <span style="color: rgba(0, 0, 255, 1)">&gt;</span>
              <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">CircleClose </span><span style="color: rgba(0, 0, 255, 1)">/&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">el-icon</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span> <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">template
        </span><span style="color: rgba(0, 0, 255, 1)">&gt;&lt;/</span><span style="color: rgba(128, 0, 0, 1)">el-input</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
      <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">template</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre>
</div>
<p>而且输入框里面的显示displaytext是根据选中记录的属性进行计算显示的，如下代码所示。</p>
<div class="cnblogs_code">
<pre>const displayText = computed(() =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
  const data </span>=<span style="color: rgba(0, 0, 0, 1)"> props.modelValue;
  </span><span style="color: rgba(0, 0, 255, 1)">if</span> (!data) <span style="color: rgba(0, 0, 255, 1)">return</span> ''<span style="color: rgba(0, 0, 0, 1)">;
  </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (Array.isArray(data)) {
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> <strong><span style="color: rgba(255, 0, 0, 1)">data</span></strong>.map(v =&gt; v?.[props.<strong><span style="color: rgba(255, 0, 0, 1)">rowKey</span> </strong>|| 'id']).join(', '<span style="color: rgba(0, 0, 0, 1)">);
  }
  </span><span style="color: rgba(0, 0, 255, 1)">return</span> data?.[props.rowKey || 'id'] || ''<span style="color: rgba(0, 0, 0, 1)">;
});</span></pre>
</div>
<p>通过对显示和过滤的属性进行监控，我们可以对数据的加载逻辑进行处理，从而实现数据的动态展示和过滤。</p>
<div class="cnblogs_code">
<pre>const loadData = async () =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
  loading.value </span>= <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
  </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
    </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (props.fetchData) {
      tableData.value </span>=<span style="color: rgba(0, 0, 0, 1)"> await props.fetchData(filterText.value);
    } </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (props.data) {
      tableData.value </span>=<span style="color: rgba(0, 0, 0, 1)"> props.data;
    }

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 恢复选中状态（仅多选模式）</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span> (props.multiple &amp;&amp;<span style="color: rgba(0, 0, 0, 1)"> Array.isArray(props.modelValue)) {
      selectedRows.value </span>=<span style="color: rgba(0, 0, 0, 1)"> props.modelValue;
    }
  } </span><span style="color: rgba(0, 0, 255, 1)">finally</span><span style="color: rgba(0, 0, 0, 1)"> {
    loading.value </span>= <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
  }
};

watch(
  () </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> visible.value,
  async val </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> {
    </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (val) {
      <span style="color: rgba(255, 0, 0, 1)"><strong>loadData();</strong></span>
    }
  }
);

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输入过滤条件时防抖加载</span>
<span style="color: rgba(0, 0, 0, 1)">watch(
  filterText,
  debounce(() </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> {
    </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (visible.value) <span style="color: rgba(255, 0, 0, 1)"><strong>loadData</strong></span>();
  }, </span>300<span style="color: rgba(0, 0, 0, 1)">)
);</span></pre>
</div>
<p>我们也可以使用它实现多选记录的处理，多选提供复选框选择多个记录，并通过确认按钮返回，如下所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202507/8867-20250725232954723-1947398654.png" alt="image" width="791" height="559" loading="lazy"></p>
<p>&nbsp;</p>
<h3>2、结合Popover 弹出框和按钮选择实现菜单中多语言键值的选择</h3>
<p>除了上面通过输入框的方式进行弹出表格数据供用户选择外，有时候我们想在不影响常规输入框的情况下，提供一个额外的按钮，触发弹出选择记录的对话框。</p>
<p>如下面案例，我需要把多语言的键值列出来供我们定义菜单的或者一些界面元素的名称，界面效果如下所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202507/8867-20250725233231378-1382376328.png" alt="image" width="792" height="510" loading="lazy"></p>
<p>&nbsp;选中后，我们就可以及时的显示多语言的键和对应的语言内容了。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202507/8867-20250725233354529-1915100549.png" alt="image" width="671" height="71" loading="lazy"></p>
<p>上面的自定义控件的使用代码如下所示。</p>
<div class="cnblogs_code">
<pre>  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">el-form-item </span><span style="color: rgba(255, 0, 0, 1)">label</span><span style="color: rgba(0, 0, 255, 1)">="显示名称"</span><span style="color: rgba(255, 0, 0, 1)"> prop</span><span style="color: rgba(0, 0, 255, 1)">="name"</span><span style="color: rgba(255, 0, 0, 1)"> class</span><span style="color: rgba(0, 0, 255, 1)">="flex flex-row"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <strong><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">el-input </span><span style="color: rgba(255, 0, 0, 1)">v-model</span><span style="color: rgba(0, 0, 255, 1)">="editForm.name"</span><span style="color: rgba(255, 0, 0, 1)"> style</span><span style="color: rgba(0, 0, 255, 1)">="width: 180px"</span> <span style="color: rgba(0, 0, 255, 1)">/&gt;</span></strong>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><strong><span style="color: rgba(128, 0, 0, 1)">TableSelectorButton
      </span></strong><span style="color: rgba(255, 0, 0, 1)">v-model</span><span style="color: rgba(0, 0, 255, 1)">="selectedLocal"</span><span style="color: rgba(255, 0, 0, 1)">
      filter-placeholder</span><span style="color: rgba(0, 0, 255, 1)">="请输入键名搜索"</span><span style="color: rgba(255, 0, 0, 1)">
      :columns</span><span style="color: rgba(0, 0, 255, 1)">="[
        { prop: 'key', label: '语言键名' },
        { prop: 'text', label: '国际化名称' }
      ]"</span><span style="color: rgba(255, 0, 0, 1)">
      :fetchData</span><span style="color: rgba(0, 0, 255, 1)">="loadLocals"</span><span style="color: rgba(255, 0, 0, 1)">
      row-key</span><span style="color: rgba(0, 0, 255, 1)">="key"</span><span style="color: rgba(255, 0, 0, 1)">
      @update:model-value</span><span style="color: rgba(0, 0, 255, 1)">="updateLocaleName"</span>
    <span style="color: rgba(0, 0, 255, 1)">&gt;&lt;/</span><strong><span style="color: rgba(128, 0, 0, 1)">TableSelectorButton</span></strong><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">el-form-item</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre>
</div>
<p>通过对事件</p>
<pre><span style="color: rgba(255, 0, 0, 1)"><strong>@update:model-value="updateLocaleName"</strong></span></pre>
<p>进行跟踪，我们就可以在内容变化的时候，及时通知其他控件进行内容更新了。&nbsp;</p>
<p>上面的多语言处理和选择用户的输入框控件很相似，只是为了可以不影响输入框的可编辑性，我们通过按钮来选择在某些场合可能更为合理，因此扩展了这个选择组件，他们的差异只是把输入框换为按钮的处理，如下代码。</p>
<div class="cnblogs_code">
<pre>      <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> 弹出内容插槽的触发器 </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
      <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">template </span><span style="color: rgba(255, 0, 0, 1)">#reference</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">el-button
          </span><span style="color: rgba(255, 0, 0, 1)">:type</span><span style="color: rgba(0, 0, 255, 1)">="props.buttonType || 'primary'"</span><span style="color: rgba(255, 0, 0, 1)">
          class</span><span style="color: rgba(0, 0, 255, 1)">="m-2"</span><span style="color: rgba(255, 0, 0, 1)">
          round
          plain
        </span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">
          {{ props.buttonText || '...' }}
        </span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">el-button</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
      <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">template</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre>
</div>
<p>这样我们定义的属性中，需要增加按钮的类型Type和按钮的名称来自定义即可，其他属性不变。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Props</span>
const props =<span style="color: rgba(0, 0, 0, 1)"> defineProps({
  columns: {
    type: Array as PropType</span>&lt;ColumnDef[]&gt;<span style="color: rgba(0, 0, 0, 1)">,
    required: </span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">
  },
  data: {
    type: Array as PropType</span>&lt;any[]&gt;<span style="color: rgba(0, 0, 0, 1)">,
    required: </span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">
  },
  modelValue: {
    type: [Object, Array] as PropType</span>&lt;any | any[]&gt;, <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 可以是对象或数组</span>
    required: <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">
  },
  rowKey: {
    type: String,
    required: </span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">
  },
  multiple: {
    type: Boolean,
    required: </span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">
  },
  pagination: {
    type: Object as PropType</span>&lt;<span style="color: rgba(0, 0, 0, 1)">{
      page: number;
      pageSize: number;
      total: number;
      onPageChange: (page: number) </span>=&gt; <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">;
    }</span>&gt;<span style="color: rgba(0, 0, 0, 1)">,
    required: </span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">
  },
  fetchData: {
    type: Function as PropType</span>&lt;(filter: string) =&gt; Promise&lt;any[]&gt;&gt;<span style="color: rgba(0, 0, 0, 1)">,
    required: </span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">
  },
<span style="color: rgba(255, 0, 0, 1)"><strong>  buttonText: {
    type: String,
    required: </strong></span></span><span style="color: rgba(255, 0, 0, 1)"><strong>false
  },
  buttonType: {
    type: String as PropType&lt;'default' | 'text' | 'success' | 'primary' | 'warning' | 'info' | 'danger'&gt;,
    required: false</strong></span><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)"><strong>
  },</strong></span>
  filterPlaceholder: {
    type: String,
    required: </span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">
  }
});</span></pre>
</div>
<p>&nbsp;</p>
<p>以上两个例子，都是基于Popover 弹出框进行的自定义控件封装，主要就是为用户选择其他表或记录更加友好 ，从而快速实现数据的查询和选择处理的过程。</p>
<p>熟悉对前端自定义控件的封装，可以根据我们实际业务的需求进行界面逻辑的抽离和重用，实现统一化的界面效果处理。</p>
</div>
<div id="MySignature" role="contentinfo">
    <div style="border-right-color: #cccccc; border-right-width: 1px; border-right-style: solid; padding-right: 5px; border-top-color: #cccccc; border-top-width: 1px; border-top-style: solid; padding-left: 4px; font-size: 13px; padding-bottom: 4px; border-left-color: #cccccc; border-left-width: 1px; border-left-style: solid; width: 98%; padding-top: 4px; border-bottom-color: #cccccc; border-bottom-width: 1px; border-bottom-style: solid; background-color: #eeeeee;">
    <img src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif" align="top" alt="">
    <span style="color: #000000"><span class="Apple-tab-span" style="white-space: pre"></span>
     专注于代码生成工具、.Net/Python 框架架构及软件开发，以及各种Vue.js的前端技术应用。著有Winform开发框架/混合式开发框架、微信开发框架、Bootstrap开发框架、ABP开发框架、SqlSugar开发框架、Python开发框架等框架产品。
     <br>&nbsp;&nbsp;转载请注明出处：撰写人：伍华聪&nbsp;&nbsp;<a href="http://www.iqidi.com/" target="_blank">http://www.iqidi.com</a>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span></div>
</div>
<div class="clear"></div>

        </div>
        <p class="postfoot">
            posted on 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-26 13:28">2025-07-26 13:28</span>&nbsp;
<a href="https://www.cnblogs.com/wuhuacong">伍华聪</a>&nbsp;
阅读(<span id="post_view_count">149</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19005570);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19005570', targetLink: 'https://www.cnblogs.com/wuhuacong/p/19005570', title: '在Vue3+ElementPlus前端中增加表格记录选择的自定义组件，通过结合Popover 弹出框和Input输入框或者按钮选择实现' })">举报</a>

        </p>
    