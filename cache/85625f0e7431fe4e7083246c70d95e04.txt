
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/jigang/p/19016284" title="发布于 2025-08-01 08:59">
    <span role="heading" aria-level="2">LangChain 架构入门指南</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><img alt="langchain" loading="lazy" data-src="https://img2024.cnblogs.com/blog/976551/202508/976551-20250801085731850-1930612461.png" class="lazyload"></p>
<h2 id="一langchain-是什么">一、LangChain 是什么</h2>
<p>LangChain 是一个强大的框架，它能帮助开发者轻松地利用大型语言模型（LLMs）来构建各种智能应用。就好比搭积木，LangChain 把开发智能应用所需的各种功能模块都准备好了，你只要按照自己的想法把这些 “积木” 组合起来，就能搭建出独特的应用。它的官方 GitHub 地址为：<a href="https://github.com/langchain-ai/langchain" target="_blank" rel="noopener nofollow">https://github.com/langchain-ai/langchain</a> ，在这个仓库里，你能找到丰富的代码示例、文档以及社区贡献的各种资源。</p>
<h2 id="二架构图概览">二、架构图概览</h2>
<p>想象 LangChain 的架构图是一座智能城市的布局图，每个模块都是城市里不同功能的区域，它们相互协作，让这座 “智能城市” 高效运转。从用户输入信息开始，信息就像城市中的 “访客”，在各个区域（模块）中穿梭，经过一系列处理，最终输出用户需要的结果。</p>
<h2 id="三核心模块详解">三、核心模块详解</h2>
<h3 id="一model-io模型输入输出">（一）Model I/O（模型输入输出）</h3>
<p>这是智能城市的 “信息出入口”，负责与大型语言模型进行沟通。</p>
<ul>
<li>
<p><strong>Language Models（语言模型）</strong>：它是城市的 “超级大脑”，像 GPT-4、通义千问等都可以是这个 “大脑” 的具体实例。例如，当你开发一个智能写作助手时，输入 “写一篇关于春天的散文”，语言模型就会运用它从海量数据中学到的语言知识，输出一篇优美的春天散文。它能理解你的文本指令，并生成相应的文本回复。</p>
</li>
<li>
<p><strong>Chat Models（对话模型）</strong>：如果说语言模型是全能 “大脑”，对话模型就是更擅长聊天的 “贴心朋友”。在聊天机器人应用里，它大显身手。比如你在和智能客服聊天时，问 “你们产品有优惠活动吗”，对话模型就会参考产品信息，回复类似 “目前我们有满减优惠，满 100 减 20 哦” 这样的内容。它专门处理对话场景，能让交流更加自然流畅。</p>
</li>
<li>
<p><strong>Output Parsers（输出解析器）</strong>：当语言模型或对话模型输出结果后，输出解析器就开始工作了。它像是城市里的 “信息整理员”，把模型输出的可能有点杂乱的信息，整理成清晰、规整的格式。假如模型输出了一篇旅游攻略，里面景点、交通、住宿信息混在一起，输出解析器会把它们分类整理好，让你能一目了然地看到：景点有哪些，怎么去，住哪里合适。</p>
</li>
</ul>
<h3 id="二retrieval检索">（二）Retrieval（检索）</h3>
<p>这个模块如同城市的 “图书馆和情报中心”，负责查找和获取信息。</p>
<ul>
<li>
<p><strong>Core Retrievers（核心检索器）</strong>：它是 “图书馆” 里经验丰富的 “老管理员”，对城市内部的知识宝库（内部知识库）了如指掌。当你开发一个智能问答应用，用户问 “苹果有哪些营养价值”，核心检索器就会迅速在内部知识库（比如存储的营养科普资料）里查找相关信息，把苹果含有的维生素、矿物质等营养成分信息找出来，传递给其他模块进一步处理。</p>
</li>
<li>
<p><strong>Community Retrievers（社区检索器）</strong>：当核心检索器在内部 “图书馆” 找不到足够信息时，社区检索器就登场了。它像是城市里活跃的 “情报员”，会去广阔的外部世界（互联网上的社区、专业网站等）搜罗资料。比如用户问 “最新款的智能手表有哪些独特功能”，内部知识库可能更新不及时，社区检索器就会在科技论坛、电子产品评测网站上搜索，找到最新款智能手表的测评文章、产品介绍等资料，补充信息缺口。</p>
</li>
</ul>
<h3 id="三agents智能体">（三）Agents（智能体）</h3>
<p>智能体模块是智能城市的 “智能指挥官”，负责规划和执行任务。</p>
<ul>
<li>
<p><strong>Core Agents（核心智能体）</strong>：它是指挥官中的 “智囊团”，负责制定整体策略。比如你要开发一个智能旅行规划应用，用户输入 “我想在暑假去海边城市旅游一周”，核心智能体就会分析需求，制定出先找合适的海边城市、再查景点、接着安排住宿和交通的任务执行计划。它决定了完成任务的步骤和方法。</p>
</li>
<li>
<p><strong>Implementation Agents（执行智能体）</strong>：这些是听从核心智能体指挥的 “行动小组”，负责具体干活。它们会按照核心智能体制定的计划，调用各种工具执行任务。比如调用地图工具确定城市位置，用酒店预订工具查找合适的住宿，就像 “行动小组” 拿着不同的工具，一步步完成指挥官下达的任务。</p>
</li>
</ul>
<h3 id="四tools工具">（四）Tools（工具）</h3>
<p>工具模块是智能城市的 “工具仓库”，提供各种实用工具来辅助完成任务。</p>
<ul>
<li>
<p><strong>Core Tools（核心工具）</strong>：这是工具库里最常用、最基础的工具。像文本处理工具可以帮你把一大段文字进行整理、提取关键信息，就像一把锋利的剪刀，能精准裁剪文本。计算工具能进行简单的数学运算，在涉及数据处理的应用中很有用，比如在财务分析应用里计算收支数据。这些基础工具是解决通用问题的得力助手。</p>
</li>
<li>
<p><strong>Community Tools（社区工具）</strong>：这些是社区贡献的各种特色工具，能让城市的功能更加丰富多样。比如在一个艺术创作应用里，社区贡献的 AI 绘画工具可以根据用户描述生成精美的画作；在一个历史文化学习应用中，社区工具可能有专门的历史文献对比分析工具，帮助用户深入研究历史资料。这些特色工具为满足特定需求提供了更多可能性。</p>
</li>
</ul>
<h3 id="五memory记忆">（五）Memory（记忆）</h3>
<p>记忆模块就像是智能城市的 “记忆存储中心”，负责记录和存储信息。</p>
<ul>
<li>
<p><strong>Core Memory（核心记忆）</strong>：它主要记录短期的、当下的信息，像城市里的 “短期记忆笔记本”。在聊天应用中，它会记住你这一次对话的内容，比如你前面说喜欢红色，后面提到想买衣服，它能关联起来，在推荐衣服时考虑你对红色的喜好。它让应用能在当前交互中保持对相关信息的记忆。</p>
</li>
<li>
<p><strong>Community Memory（社区记忆）</strong>：社区记忆像是城市的 “大型历史档案馆”，存储长期的、大量用户的信息。在一个音乐推荐应用中，它能记住众多用户的音乐偏好，当新用户注册，它可以根据其他有相似偏好用户的听歌记录，为新用户推荐可能喜欢的歌曲。它利用群体的历史数据来为个体提供更精准的服务。</p>
</li>
</ul>
<h3 id="六callbacks回调">（六）Callbacks（回调）</h3>
<p>Callbacks 模块就像智能城市的 “实时播报员”，在整个应用运行过程中，随时向你报告各个环节的进展。比如在文件处理应用中，它会告诉你 “文件正在读取”“数据正在分析”“结果即将生成”，让你实时了解应用的工作状态，心里有底。它能让开发者或用户及时掌握应用内部的运行情况。</p>
<h3 id="七tracing追踪">（七）Tracing（追踪）</h3>
<p>Tracing 是智能城市的 “监控摄像头”，详细记录应用运行的每一个操作步骤和数据传递过程。当应用出现问题，比如智能翻译应用翻译结果不准确，通过查看 Tracing 记录，就能知道是在理解原文时出错，还是在翻译算法执行中出了问题，方便快速定位和解决问题。它为排查应用故障提供了详细的线索。</p>
<h3 id="八runnables可运行组件">（八）Runnables（可运行组件）</h3>
<p>Runnables 可以理解为智能城市里标准化的 “生产流水线单元”。复杂的任务被拆分成一个个可独立运行的小任务，每个小任务就是一个 Runnable。例如在一个电商订单处理应用中，“检查库存”“计算总价”“生成订单详情” 等都可以是独立的 Runnables，它们可以像搭积木一样，根据不同业务流程灵活组合，提高生产效率。它使得任务的组织和执行更加灵活高效。</p>
<h2 id="四调用关系与数据流向">四、调用关系与数据流向</h2>
<p>当你使用基于 LangChain 开发的应用时，数据就开始了它的 “奇妙之旅”。比如你在一个智能法律咨询应用中输入 “我签的合同有问题，怎么办”。</p>
<ol>
<li>
<p><strong>数据输入</strong>：你的问题通过 Model I/O 模块的入口进入系统，语言模型或对话模型尝试理解你的问题含义。这就像是 “访客” 进入了城市的 “信息处理中心”，“超级大脑” 开始分析访客的来意。</p>
</li>
<li>
<p><strong>信息检索</strong>：Retrieval 模块启动，Core Retrievers 先在内部法律知识库查找相关合同问题的解决办法。若信息不足，Community Retrievers 去外部法律论坛、法规数据库搜索补充信息。就像城市里的 “图书馆管理员” 和 “情报员” 分别在内部图书馆和外部世界寻找相关资料，为解决问题提供依据。</p>
</li>
<li>
<p><strong>任务规划与执行</strong>：Agents 模块的 Core Agents 根据检索到的信息，制定解决问题的步骤，如先分析合同条款、再对照相关法规、最后给出建议。Implementation Agents 则调用 Tools 模块的文本分析工具分析合同，法规查询工具查找对应法律条文。这如同 “智能指挥官” 制定作战计划，“行动小组” 拿着各种工具去执行任务。</p>
</li>
<li>
<p><strong>结果生成与输出</strong>：处理结果回到 Model I/O 模块，Output Parsers 将其整理成清晰的文字，比如 “您的合同中 XX 条款可能存在问题，根据 XX 法规，建议您采取 XX 措施”，然后呈现给你。此时，经过一系列处理的信息，被 “信息整理员” 包装好，传递给 “访客”。</p>
</li>
<li>
<p><strong>过程记录</strong>：Callbacks 实时报告进度，如 “正在检索法规信息”；Tracing 记录每一步操作；Memory 存储对话信息，以便后续交流能更好理解你的需求，比如你后续追问相关问题，它能结合之前的对话给出更准确回复。“实时播报员” 随时汇报进展，“监控摄像头” 记录一切，“记忆存储中心” 保存相关信息，为城市的持续高效运行提供保障。</p>
</li>
</ol>
<p>通过这样的架构设计，LangChain 让开发基于语言模型的应用变得更加高效、灵活，不同模块各司其职又协同合作，就像一个运转有序的智能城市，源源不断地为用户提供各种强大的智能服务。希望通过这些通俗易懂的例子，你能轻松理解 LangChain 的架构啦！</p>

</div>
<div id="MySignature" role="contentinfo">
    知之为知之，不知为不知。
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-01 08:59">2025-08-01 08:59</span>&nbsp;
<a href="https://www.cnblogs.com/jigang">没事学AI</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19016284);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19016284', targetLink: 'https://www.cnblogs.com/jigang/p/19016284', title: 'LangChain 架构入门指南' })">举报</a>
</div>
	