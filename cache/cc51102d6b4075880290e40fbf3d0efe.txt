
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xuxueli/p/18859143" title="发布于 2025-05-04 11:22">
    <span role="heading" aria-level="2">XXL-TOOL v1.4.0 发布 | Java工具类库</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/554415/202505/554415-20250504112227737-455262159.png" alt="XXL-TOOL v1.4.0 发布 | Java工具类库" class="desc_img">
        XXL-TOOL 是一个Java工具类库，致力于让Java开发更高效。包含 “集合、字符串、缓存、并发、Excel、Emoji、Response、Pipeline……” 等数十个模块。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h3 id="release-notes">Release Notes</h3>
<ul>
<li>1、【新增】JsonRpc模块：一个轻量级、跨语言远程过程调用实现，基于json、http实现（从XXL-JOB底层通讯组件提炼抽象）。</li>
<li>2、【新增】Concurrent模块：一系列并发编程工具，具备良好的线程安全、高并发及高性能优势，包括CyclicThread（循环线程）、MessageQueue（高性能内存队列，30W+ TPS）等。</li>
<li>3、【新增】Auth模块：一系列权限认证相关工具，包括JwtTool等。</li>
<li>4、【强化】已有工具能力完善，包括 CollectionTool、MapTool、HttpTool 等；</li>
<li>5、【升级】升级依赖版本，包括 slf4j、poi、spring、gson、junit等。</li>
</ul>
<h3 id="简介">简介</h3>
<p>XXL-TOOL 是一个Java工具类库，致力于让Java开发更高效。包含 “集合、字符串、缓存、并发、Excel、Emoji、Response、Pipeline……” 等数十个模块。</p>
<h3 id="文档地址">文档地址</h3>
<ul>
<li>中文文档：<a href="https://www.xuxueli.com/xxl-tool/" target="_blank" rel="noopener nofollow">https://www.xuxueli.com/xxl-tool/</a></li>
<li>Github：<a href="https://github.com/xuxueli/xxl-tool" target="_blank" rel="noopener nofollow">https://github.com/xuxueli/xxl-tool </a></li>
</ul>
<h3 id="组件列表">组件列表</h3>
<table>
<thead>
<tr>
<th>模块</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Core模块</td>
<td>包含集合、缓存、日期……等基础组件工具。</td>
</tr>
<tr>
<td>IO模块</td>
<td>一系列处理IO（输入/输出）操作的工具。</td>
</tr>
<tr>
<td>Concurrent模块</td>
<td>一系列并发编程工具，具备良好的线程安全、高并发及高性能优势，包括MessageQueue（高性能内存队列，30W+ TPS）、CyclicThread（后台循环线程）、TimeWheel（时间轮组件）等。</td>
</tr>
<tr>
<td>Http模块</td>
<td>一系列处理Http通讯、IP、Cookie等相关工具。</td>
</tr>
<tr>
<td>Gson模块</td>
<td>json序列化、反序列化工具封装，基于Gson。</td>
</tr>
<tr>
<td>Excel模块</td>
<td>一个灵活的Java对象和Excel文档相互转换的工具。一行代码完成Java对象和Excel之间的转换。</td>
</tr>
<tr>
<td>Emoji模块</td>
<td>一个灵活可扩展的Emoji表情编解码库，可快速实现Emoji表情的编解码。</td>
</tr>
<tr>
<td>JsonRpc模块</td>
<td>一个轻量级、跨语言远程过程调用实现，基于json、http实现（对比传统RPC框架：<a href="https://github.com/xuxueli/xxl-rpc" target="_blank" rel="noopener nofollow">XXL-RPC</a>）。</td>
</tr>
<tr>
<td>Response模块</td>
<td>统一响应数据结构体，标准化数据结构、状态码等，降低协作成本。</td>
</tr>
<tr>
<td>Pipeline模块</td>
<td>高扩展性流程编排引擎。</td>
</tr>
<tr>
<td>Exception模块</td>
<td>异常处理相关工具。</td>
</tr>
<tr>
<td>Freemarker模块</td>
<td>模板引擎工具，支持根据模板文件实现 动态文本生成、静态文件生成 等，支持邮件发送、网页静态化场景。</td>
</tr>
<tr>
<td>Encrypt模块</td>
<td>一系列处理编解码、加解密的工具，包括 Md5Tool、HexTool、Base64Tool...等。</td>
</tr>
<tr>
<td>Auth模块</td>
<td>一系列权限认证相关工具，包括JwtTool...等。</td>
</tr>
<tr>
<td>...</td>
<td>...</td>
</tr>
</tbody>
</table>
<h3 id="代码示例jsonrpc-用法">代码示例：JsonRpc 用法</h3>
<p>一个轻量级、跨语言远程过程调用实现，基于json、http实现。</p>
<p><strong>第一步</strong>：RPC业务服务开发</p>
<pre><code>public interface UserService {
    public ResultDTO createUser(UserDTO userDTO);
    public UserDTO loadUser(String name);
    ... ...
}
</code></pre>
<p><strong>第二步</strong>：JsonRpc服务端配置</p>
<pre><code>// a、JsonRpcServer 初始化
JsonRpcServer jsonRpcServer = new JsonRpcServer();

// b、业务服务注册（支持多服务注册）
jsonRpcServer.register("userService", new UserServiceImpl());

// c、Web框架集成，该入口为RPC统一流量入口（springmvc 集成；理论上支持任意web框架集成，其他框架参考集成）
@RequestMapping("/openapi")
@ResponseBody
public String api(@RequestBody(required = false) String requestBody){
	// 核心代码：Http请求的 RequestBody 作为入参；业务响应作为输出；
    return jsonRpcServer.invoke(requestBody);
}
</code></pre>
<p><strong>第三步</strong>：JsonRpc客户端配置</p>
<pre><code>// 方式1：代理方式使用 （针对接口构建代理，通过代理对象实现远程调用；）
UserService userService = new JsonRpcClient("http://localhost:8080/jsonrpc", 3000).proxy("userService", UserService.class);

// 发起RPC请求；
UserDTO result = userService.loadUser("zhangsan");
</code></pre>
<h3 id="代码示例messagequeue高性能内存队列">代码示例：MessageQueue（高性能内存队列）</h3>
<p>高性能内存队列，单机支持 30W+ TPS，具备良好的性能及高并发优势，支持生产消费模型。</p>
<pre><code>// a、定义队列：指定 消费者数量、批量消费数量、消费者逻辑等
MessageQueue&lt;String&gt; messageQueue = new MessageQueue&lt;&gt;(
	"demoQueue",
	messages -&gt; {			
		// 消费逻辑
		System.out.println("Consume: " + messages);
	},
	10,	// 自定义消费者线程
	20	// 自定义批量消费数量
);

// b、生产消息
messageQueue.produce("test-" + i);
</code></pre>
<h3 id="代码示例timewheel时间轮">代码示例：TimeWheel（时间轮）</h3>
<p>时间轮算法实现，具备高精度、多任务、以及线程安全等优势。</p>
<pre><code>// a、时间轮定义，自定义时间轮刻度、间隔等
TimeWheel timeWheel = new TimeWheel(60, 1000);

// b、提交时间轮任务（定时任务）
timeWheel.submitTask(System.currentTimeMillis() + 3000, () -&gt; {
    System.out.println("Task delay " + waitTime + "ms executed at: " );
});
</code></pre>
<h3 id="代码示例jwt权限认证">代码示例：Jwt权限认证</h3>
<p>JWT工具，提供JWT生成及解析能力</p>
<pre><code>// a、JwtTool 初始化，自定义 Signer和 Verifier
JwtTool jwtTool = new JwtTool(SECRET);    // 默认使用 MACSigner/MACVerifier，支持多构造方法自定义实现；

// b、创建token
String token = jwtTool.createToken(
                {用户标识},
                {自定义声明数据，map形式},
                {自定义过期时间}
        );
        
// c、验证token
boolean isValid = jwtTool.validateToken(token);   
// d、获取claim
Object userId = jwtTool.getClaim(token, {自定义声明数据key});
// e、获取过期时间
Date expirationTime = jwtTool.getExpirationTime(token);
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.288221739732639" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-04 11:23">2025-05-04 11:22</span>&nbsp;
<a href="https://www.cnblogs.com/xuxueli">许雪里</a>&nbsp;
阅读(<span id="post_view_count">149</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18859143);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18859143', targetLink: 'https://www.cnblogs.com/xuxueli/p/18859143', title: 'XXL-TOOL v1.4.0 发布 | Java工具类库' })">举报</a>
</div>
        