
    <a name="top"></a>
    <h2><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/imbin/p/18835792" title="发布于 2025-04-19 17:31">
    <span role="heading" aria-level="2">Go工程选择开源分库分表中间件可用性测试</span>
    

</a>
</h2>
    <small>
<span id="post-date" data-last-update-days="0.9446193337546296" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-19 17:38">2025-04-19 17:31</span>&nbsp;
<a href="https://www.cnblogs.com/imbin">斌哥tobin</a>&nbsp;
阅读(<span id="post_view_count">90</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18835792);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18835792', targetLink: 'https://www.cnblogs.com/imbin/p/18835792', title: 'Go工程选择开源分库分表中间件可用性测试' })">举报</a>
</small>
    <div class="entry">
            <div id="cnblogs_post_description" style="display: none">
        
        Go工程测试开源分库分表中间件：ShardingSphere-Proxy，Kingshard，Gaea
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>近期在寻找Go工程可以用的开源分库分表中间件，找了3个：ShardingSphere-Proxy，Kingshard，Gaea，下面给出测试过程和对比结果</p>
<h1 id="shardingsphere-proxy">ShardingSphere-Proxy</h1>
<p><a href="https://github.com/apache/shardingsphere" target="_blank" rel="noopener nofollow">https://github.com/apache/shardingsphere</a><br>
有apache基金会支持，社区活跃, star 20.2k</p>
<h1 id="kingshard">Kingshard</h1>
<p><a href="https://github.com/flike/kingshard" target="_blank" rel="noopener nofollow">https://github.com/flike/kingshard</a><br>
个人项目, github已经不更新了，star 6.4k</p>
<h1 id="gaea">Gaea</h1>
<p><a href="https://github.com/XiaoMi/Gaea" target="_blank" rel="noopener nofollow">https://github.com/XiaoMi/Gaea</a><br>
小米团队发布，最近更新是2024年9月，还算比较新，star 2.7k</p>
<h1 id="分表设置">分表设置</h1>
<p>t_user 分10个表<br>
sharding-proxy是 t_user_0...9<br>
kingshard和Gaea是 t_user_0000...0009</p>
<h1 id="测试代码">测试代码</h1>
<pre><code class="language-go">
package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"math/rand"
	"sharding/internal/models"
	"strings"
	_ "github.com/go-sql-driver/mysql" // 导入 MySQL 驱动
	"log"
)

const (
	// 定义颜色的 ANSI 转义序列
	Reset  = "\033[0m"
	Red    = "\033[31m"
	Green  = "\033[32m"
	Yellow = "\033[33m"
	Blue   = "\033[34m"
)

func main() {

	log.Println(Red + "shardingsphere-proxy test" + Reset)
	dsn_proxy := "sharding:sharding@tcp(127.0.0.1:13308)/sharding_user?charset=utf8mb4&amp;parseTime=True&amp;loc=Local"
	sharding_query(dsn_proxy)

	log.Println(Yellow + "kingshard test" + Reset)
	dsn_kingshard := "kingshard:kingshard@tcp(127.0.0.1:9696)/sharding_user?charset=utf8mb4&amp;parseTime=True&amp;loc=Local"
	sharding_query(dsn_kingshard)

	log.Println(Blue + "gaea test" + Reset)
	dsn_gaea := "sharding_gaea:sharding_gaea@tcp(127.0.0.1:13306)/sharding_user?charset=utf8mb4&amp;parseTime=True&amp;loc=Local"

	sharding_query(dsn_gaea)
}

func sharding_query(dsn string) {

	//sharding proxy

	shardingProxyConn, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Println(err)
		return
	}
	defer shardingProxyConn.Close()

	id := rand.Intn(10)
	userName := fmt.Sprintf("test%d", id)
	notFound := false

	// 完整sql,无传参
	var uid uint64
	valScope := strings.ReplaceAll(userName, "'", "\\'")
	err = shardingProxyConn.QueryRow(fmt.Sprintf("select id from t_user where login_name = '%s'", valScope)).Scan(&amp;uid)
	if err != nil {
		if err == sql.ErrNoRows {
			log.Println("query 1 fail 1: ", err.Error())
			notFound = true
		} else {
			log.Println("query 1 fail 2:", err)
		}
	} else {
		log.Println("query 1 success, uid=", uid)
	}

	// sql传参
	err = shardingProxyConn.QueryRow("select id from t_user where login_name = ?", userName).Scan(&amp;uid)
	if err != nil {
		if err == sql.ErrNoRows {
			log.Println("query 2 fail 1: ", err.Error())
			notFound = true
		} else {
			log.Println("query 2 fail 2:", err)
		}
	} else {
		log.Println("query 2 success, uid=", uid)
	}
	// create
	if notFound {
		// sharding-proxy 有 id 自动生成配置,这里方便测试需要，指定id
		sqlIns := "INsert into t_user (id, login_name,passwd,email) values (?, ?, ?, ?)"
		result, err1 := shardingProxyConn.Exec(sqlIns, id, userName, "test1234", "test@test.com")
		if err1 != nil {
			log.Println("insert fail:", err1)
		} else {
			rowsAffected, _ := result.RowsAffected()
			log.Println("insert RowsAffected ", rowsAffected)
		}
	}

	//Select

	rows, err := shardingProxyConn.Query("select id,login_name,email,create_time,update_time from t_user where login_name like ? limit 10", "%test%")
	if err != nil {
		log.Println(err)
		return
	}
	defer rows.Close()

	var userList []models.UserModel
	for rows.Next() {
		var u models.UserModel
		e := rows.Scan(&amp;u.ID, &amp;u.LoginName, &amp;u.Email, &amp;u.CreatedTime, &amp;u.UpdateTime)
		if e != nil {
			log.Println("row scan err:", e)
			continue
		}
		userList = append(userList, u)
	}
	j, _ := json.Marshal(userList)
	log.Println("select result:", string(j))
}

</code></pre>
<h1 id="测试结论">测试结论</h1>
<h2 id="shardingsphere-proxy-41">shardingsphere-proxy 4.1</h2>
<ol>
<li>分表查询不支持占位符传参，插曲：php测试过支持传参使用</li>
<li>分表只支持全SQL</li>
</ol>
<h2 id="kingshard-1">kingshard</h2>
<ol>
<li>分表查询不支持占位符传参，插曲：php测试过支持传参使用</li>
<li>分表查询支持全SQL</li>
</ol>
<h2 id="gaea-1">Gaea</h2>
<ol>
<li>分表查询支持占位符传参</li>
<li>分表查询支持全SQL</li>
</ol>
<h2 id="结论对比">结论对比</h2>
<p>Go代码的工程应用想用分库分表中间件，推荐次序</p>
<p>第1首选优先Gaea，因为支持占位符传参，github最近更新是2024年9月<br>
第2是shardingsphere-proxy 4.1，因为不支持占位符传参，go工程想要用，就全得转换成完整SQL，但是配置比较简单，容易部署，有apache基金会支持，社区活跃<br>
第3是kingshard，因为不支持占位符传参，就全得转换成完整SQL，并且github已经不更新了</p>
<h1 id="测试结果日志">测试结果日志</h1>
<pre><code>2025/04/19 17:04:24 shardingsphere-proxy test
2025/04/19 17:04:25 query 1 success, uid= 1119859588875681792
[mysql] 2025/04/19 17:04:25 packets.go:64 [warn] unexpected seq nr: expected 4, got 5
2025/04/19 17:04:25 query 2 fail 2: commands out of sync. You can't run this command now
[mysql] 2025/04/19 17:04:25 packets.go:64 [warn] unexpected seq nr: expected 8, got 17
2025/04/19 17:04:25 select result: null

2025/04/19 17:04:25 kingshard test
2025/04/19 17:04:25 query 1 success, uid= 4
2025/04/19 17:04:25 query 2 fail 2: Error 1105 (HY000): prepare error ERROR 1146 (42S02): Table 'sharding_user.t_user' doesn't exist
2025/04/19 17:04:25 Error 1105 (HY000): prepare error ERROR 1146 (42S02): Table 'sharding_user.t_user' doesn't exist

2025/04/19 17:04:25 gaea test
2025/04/19 17:04:25 query 1 fail 1:  sql: no rows in result set
2025/04/19 17:04:25 query 2 fail 1:  sql: no rows in result set
2025/04/19 17:04:25 insert RowsAffected  1
2025/04/19 17:04:25 select result: [{"created_time":"2025-04-19T00:51:23+08:00","update_time":"2025-04-19T00:51:23+08:00","id":1,"Email":"test@test.com","LoginName":"test1","Passwd":"","LoginStatus":0,"LastLoginTime":null,"LoginCount":0}...]

</code></pre>

</div>
<div class="clear"></div>

        <div class="clear"></div>
        
</div>
    <ul class="postmetadata">
        <vc:categories-tags blog-app="imbin" blog-id="33900" post-id="18835792"></vc:categories-tags>
    </ul>
