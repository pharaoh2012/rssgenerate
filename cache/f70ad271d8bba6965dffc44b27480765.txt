
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/waterme123/p/18975613" title="发布于 2025-07-09 19:52">
    <span role="heading" aria-level="2">外卖项目总结（2）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="外卖项目总结2">外卖项目总结（2）</h2>
<h3 id="技术点">技术点</h3>
<ol>
<li>
<p>过滤器Filter - servlet 容器<br>
背景：未登录的访客可以随意进入管理端界面<br>
引入过滤器：实现员工身份验证，另外过滤器还可以实现缓存控制（在过滤器中直接对响应头相应的数据进行赋值来实现）<br>
<strong>使用：</strong></p>
<ol>
<li>定义实现类实现Filter接口，并重写方法（init初始化方法、doFilter拦截到请求时调用、destroy销毁方法）——生命周期</li>
<li>配置过滤器：@WebFliter（urlPatterns = “”）注解，配置拦截器路径</li>
<li>启动类中通过@ServletComponentScan开启过滤器扫描</li>
<li>放行：filterChain.doFilter(servletRequest,servleResponse)</li>
<li>FilterChain:在web应用中异常编写多个过滤器，过滤器按顺序执行</li>
</ol>
</li>
<li>
<p>拦截器Interceptor - IOC容器<br>
由Spring框架提供，动态拦截请求，本质是面向切面编程（AOP）的<br>
应用场景：登录验证，权限验证，日志记录，性能监控……<br>
<strong>使用：</strong></p>
<ol>
<li>自定义类实现接口HandlerInterceptor，重写preHandle方法，交给IOC容器管理。</li>
<li>自定义拦截器注册类（配置类）</li>
</ol>
</li>
</ol>
<p><strong>注意：先经过Filter过滤器，在进入拦截器Interceptor；Filter是由Java提供的，范围更广，Interceptor则是Spring 框架提供的，只能作用与框架内。</strong></p>
<ol start="3">
<li>异常处理 - 全局异常处理器<br>
3.1 @RestControllerAdvice 被用来定义全局异常处理程序和全局响应结果处理程序。<br>
3.2 @ExceptionHandler 用来捕获自定义异常<br>
3.3 自定义异常定义在common类继承自RuntimeException</li>
</ol>
<p><strong>4. AOP切面：</strong><br>
背景：</p>
<ol>
<li>在对开发的功能模块进行日志记录时，每个模块都有大量重复的日志记录代码，导致代码臃肿，业务外逻辑与业务逻辑混合，不利于功能解耦。</li>
<li>公共字段自动填充：对数据库中的updatetime，createtime等公共字段的更新代码，重复且逻辑相同。<br>
引入AOP切面：将横切关注点与业务逻辑分离，将其通用行为封装至横向模块，以达到对业务逻辑的增强。<br>
应用场景：记录日志操作、权限管理、事务管理、公共字段填充<br>
<strong>使用：</strong></li>
<li>引入依赖</li>
<li>编写自定义注解类：标识使用的方法</li>
<li>定义切面类，确定通知的类型（@Before/@After/@Around）</li>
<li>在需要使用的方法/类上增加注解进行使用<br>
例如：公共字段自动填充</li>
<li>自定义注解AutoFill：用这个注解标识需要自动填充的方法。<br>
@Target(作用目标：类或者方法或者属性，常用枚举)<br>
@Retention(注解生效时间：runtime)<br>
属性：<code>OperationType value();//数据库操作类型：UPDATE INSERT</code><br>
<strong>注意：注解属性 = 抽象方法（定义时） = 配置项（使用时）这是Java规范。@Target、@Retention是元注解（即修饰注解的注解）</strong></li>
<li>自定义切面类AutoFillAspect：统一拦截加入注解的方法，通过反射为公共字段赋值。<br>
@Aspect：标识为切面<br>
@Component：交给IOC<br>
@Pointcut：标识切入点<br>
@Before：前置通知（切入点）</li>
</ol>
<pre><code class="language-Java">@Pointcut("execution(* com.sky.mapper.*.*(..)) &amp;&amp; @annotation(com.sky.annotation.AutoFill)")//指定扫描的包和类
public void autoFillPointCut(){}
</code></pre>
<pre><code class="language-Java">@Before("autoFillPointCut()")
public void autoFill(JoinPoint joinPoint){}
</code></pre>
<p>参数：连接点 JointPoint<br>
<strong>注意：Mapper中定义方法约定实体对象参数放第一个，为了后续通过反射获取</strong><br>
总结AOP的使用：</p>
<ol>
<li>自定义注解：标识拦截那些方法或类。2个注解（Target、Retention），一个属性（枚举数据库操作类型）</li>
<li>自定义切面类：拦截+统一操作的逻辑</li>
<li>对应方法或类上加上注解</li>
</ol>
<p>关于AOP的一些思考：</p>
<ol>
<li>为什么不抽取为接口或静态类？<br>
本质区别：</li>
</ol>
<table>
<thead>
<tr>
<th>方式</th>
<th>本质</th>
<th>实现</th>
<th>特点</th>
</tr>
</thead>
<tbody>
<tr>
<td>接口/静态工具类</td>
<td>代码调用</td>
<td>需要在业务代码中手动调用方法</td>
<td>侵入式，增加代码耦合</td>
</tr>
<tr>
<td>AOP</td>
<td>代理织入</td>
<td>运行时由框架（如Spring）自动在指定连接点执行</td>
<td>非侵入式，解耦，统一维护</td>
</tr>
</tbody>
</table>
<p>日志、公共字段更新等这些操作是具体的实现，而接口是抽象的。<br>
AOP完全分离业务与通用逻辑，业务板块甚至调用代码都没有。<br>
AOP扩展性更强。<br>
2. AOP是java不支持多继承的扩展<br>
传统的做法，将通用逻辑封装到一个父类，然后让所有业务类继承它，但这样强耦合，职责混乱，既有业务逻辑又有通用逻辑，有了自己的继承结构就无法继承工具类了。<br>
AOP = 动态实现多继承的功能扩展方案<br>
在 Java 单继承限制下，通过切面在运行时为类添加“多个父类功能”，<br>
例如：日志、权限、事务、缓存、字段填充等。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0006944444444444445" data-date-updated="2025-07-09 19:53">2025-07-09 19:52</span>&nbsp;
<a href="https://www.cnblogs.com/waterme123">waterme</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18975613);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18975613', targetLink: 'https://www.cnblogs.com/waterme123/p/18975613', title: '外卖项目总结（2）' })">举报</a>
</div>
        