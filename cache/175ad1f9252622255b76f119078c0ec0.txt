
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/hiit/p/18657670" title="发布于 2025-01-08 08:52">
    <span role="heading" aria-level="2">ESP8266 wifi模块+CH340烧录板安装使用运行教程</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h3>硬件准备</h3>
<ul>
<li>ESP8266-01S&nbsp;模块</li>
<li>USB转TTL烧录板（CH340）</li>
<li>LED灯（建议使用3.3V LED）</li>
<li>220Ω电阻（LED限流）</li>
<li>面包板和跳线若干</li>
</ul>
<ul>
<li>
<p><img src="https://img2024.cnblogs.com/blog/785716/202501/785716-20250107150626343-520798141.png" alt="" loading="lazy"></p>
<p>&nbsp;我的是这样的不用接线，其他的参考</p>
<div class="cnblogs_code">
<pre>ESP8266-<span style="color: rgba(0, 0, 0, 1)">01S引脚定义：
   VCC  </span>--- <span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">.3V
   GND  </span>---<span style="color: rgba(0, 0, 0, 1)"> GND
   TX   </span>---<span style="color: rgba(0, 0, 0, 1)"> USB转TTL的RX
   RX   </span>---<span style="color: rgba(0, 0, 0, 1)"> USB转TTL的TX
   CH_PD(EN) </span>--- <span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">.3V
   GPIO0 </span>---<span style="color: rgba(0, 0, 0, 1)"> LED正极（通过220Ω电阻）
   GPIO2 </span>---<span style="color: rgba(0, 0, 0, 1)"> 悬空
   RST   </span>--- 悬空（烧录时可能需要手动接地复位）</pre>
</div>
</li>
</ul>
<h3>安装CH340驱动</h3>
<p>链接：https://pan.baidu.com/s/1PLZ5LIf-Mh-MDAF-YnlurQ?pwd=8888 <br>提取码：8888</p>
<p><img src="https://img2024.cnblogs.com/blog/785716/202501/785716-20250107142851665-1124474987.png" alt="" loading="lazy"></p>
<h3>插上CH340板子</h3>
<p><img src="https://img2024.cnblogs.com/blog/785716/202501/785716-20250107144236158-1237270807.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h3>下载&nbsp;Arduino IDE1.8</h3>
<p>链接https://www.arduino.cc/en/software 右下角对应系统下载。选择JUST DOWNLOAD</p>
<p><img src="https://img2024.cnblogs.com/blog/785716/202501/785716-20250107144108207-1460691033.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/785716/202501/785716-20250107153202320-1816965212.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h3>&nbsp;安装&nbsp;ESP8266 核心库</h3>
<ul>
<li value="1">打开 Arduino IDE</li>
<li value="2">进入 文件 &gt; 首选项</li>
<li value="3">在"附加开发板管理器网址"中添加以下URL：</li>

</ul>
<div class="cnblogs_code">
<pre>https:<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">arduino.esp8266.com/stable/package_esp8266com_index.json</span>
<span style="color: rgba(0, 0, 0, 1)">如果是中国地区，可能需要使用以下镜像地址来替代官方地址：
https:</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">arduino.esp8266.com/stable/package_esp8266com_index.json</span>
http:<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">arduino.esp8266.com/stable/package_esp8266com_index.json</span></pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/785716/202501/785716-20250107145244050-1538613733.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h3>安装开发板和库</h3>
<div class="cnblogs_code">
<pre><span style="color: rgba(128, 0, 128, 1)">1</span>.进入 工具 &gt; 开发板 &gt;<span style="color: rgba(0, 0, 0, 1)"> 开发板管理器
搜索</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ESP8266</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
安装</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ESP8266 by ESP8266 Community</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">. 安装 WebSockets 库
在Arduino IDE中，进入 工具 </span>&gt;<span style="color: rgba(0, 0, 0, 1)"> 管理库
搜索</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">WebSockets</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
找到</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">WebSockets by Markus Sattler</span><span style="color: rgba(128, 0, 0, 1)">"</span>并安装</pre>
</div>
<p>报错可本地安装，官方教程：https://docs.arduino.cc/software/ide-v1/tutorials/installing-libraries/</p>
<div class="cnblogs_code">
<pre>本地8266下载链接：https:<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">github.com/esp8266/Arduino/releases/download/3.1.2/esp8266-3.1.2.zip</span>
<span style="color: rgba(0, 0, 0, 1)">将下载的zip解压到：
C:\Users\[你的用户名]\AppData\Local\Arduino15\packages\esp8266\hardware\esp8266\

本地WebSockets下载链接：https:</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">github.com/Links2004/arduinoWebSockets/archive/refs/heads/master.zip</span>
解压下载的ZIP文件将解压出来的文件夹重命名为<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">WebSockets</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
将这个文件夹复制到Arduino的libraries目录中：Windows: 文档\Arduino\libraries\</span></pre>
</div>
<p>&nbsp;</p>
<h3>选择开发板</h3>
<p>不完全一样，需要问厂家</p>
<p><img src="https://img2024.cnblogs.com/blog/785716/202501/785716-20250107142443558-391156907.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h3>测试代码</h3>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_639f5d79-fd6f-460e-9807-528f5ebbe381" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_639f5d79-fd6f-460e-9807-528f5ebbe381" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_639f5d79-fd6f-460e-9807-528f5ebbe381" class="cnblogs_code_hide">
<pre>#include &lt;ESP8266WiFi.h&gt;          <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> WiFi功能</span>
#include &lt;ESP8266WiFiMulti.h&gt;     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> WiFi多连接</span>
#include &lt;WebSocketsServer.h&gt;     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> WebSocket服务器</span>
#include &lt;Hash.h&gt;                 <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> WebSocket需要</span>
#include &lt;ESP8266WebServer.h&gt;     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Web服务器</span>
#include &lt;ESP8266mDNS.h&gt;         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> mDNS服务</span>

<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 
 * ESP8266 WebSocket LED控制示例
 * 
 * 使用说明:
 * 1. 连接WiFi热点: tunc5555   
 * 2. WiFi密码: 123456789
 * 3. 浏览器访问: </span><span style="color: rgba(0, 128, 0, 1); text-decoration: underline">http://192.168.4.1/</span><span style="color: rgba(0, 128, 0, 1)">
 * 4. 点击网页按钮控制LED
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>

<span style="color: rgba(0, 0, 255, 1)">#define</span> USE_SERIAL Serial  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 定义串口对象</span>

<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> WiFi配置参数</span>
<span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> ssid[] = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">tunc5555</span><span style="color: rgba(128, 0, 0, 1)">"</span>;      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> WiFi名称</span>
<span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> password[] = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">123456789</span><span style="color: rgba(128, 0, 0, 1)">"</span>;  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> WiFi密码</span>
MDNSResponder mdns;                         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> MDNS响应器对象</span>

<span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> writeLED(<span style="color: rgba(0, 0, 255, 1)">bool</span>);                 <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> LED控制函数声明</span>
<span style="color: rgba(0, 0, 0, 1)">
ESP8266WiFiMulti WiFiMulti;                 </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> WiFi多连接对象

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建服务器实例</span>
ESP8266WebServer server(<span style="color: rgba(128, 0, 128, 1)">80</span>);                <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> HTTP服务器(端口80)</span>
WebSocketsServer webSocket = WebSocketsServer(<span style="color: rgba(128, 0, 128, 1)">81</span>);  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> WebSocket服务器(端口81)

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> HTML页面内容 - 这是网页界面的代码</span>
<span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> PROGMEM INDEX_HTML[] = R<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">rawliteral(</span>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta name = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">viewport</span><span style="color: rgba(128, 0, 0, 1)">"</span> content = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">width = device-width, initial-scale = 1.0, maximum-scale = 1.0, user-scalable=0</span><span style="color: rgba(128, 0, 0, 1)">"</span>&gt;
&lt;title&gt;ESP8266 WebSocket Demo&lt;/title&gt;
&lt;style&gt;
<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">body { background-color: #808080; font-family: Arial, Helvetica, Sans-Serif; Color: #000000; }</span><span style="color: rgba(128, 0, 0, 1)">"</span>
&lt;/style&gt;
&lt;script&gt;
<span style="color: rgba(0, 0, 255, 1)">var</span><span style="color: rgba(0, 0, 0, 1)"> websock;
function start() {
  websock </span>= <span style="color: rgba(0, 0, 255, 1)">new</span> WebSocket(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">ws://</span><span style="color: rgba(128, 0, 0, 1)">'</span> + window.location.hostname + <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">:81/</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">);
  websock.onopen </span>= function(evt) { console.log(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">websock open</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">); };
  websock.onclose </span>= function(evt) { console.log(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">websock close</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">); };
  websock.onerror </span>=<span style="color: rgba(0, 0, 0, 1)"> function(evt) { console.log(evt); };
  websock.onmessage </span>=<span style="color: rgba(0, 0, 0, 1)"> function(evt) {
    console.log(evt);
    </span><span style="color: rgba(0, 0, 255, 1)">var</span> e = document.getElementById(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">ledstatus</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (evt.data === <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">ledon</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">) {
      e.style.color </span>= <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">red</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (evt.data === <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">ledoff</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">) {
      e.style.color </span>= <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
      console.log(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">unknown event</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">);
    }
  };
}
function buttonclick(e) {
  websock.send(e.id);
}
</span>&lt;/script&gt;
&lt;/head&gt;
&lt;body onload=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">javascript:start();</span><span style="color: rgba(128, 0, 0, 1)">"</span>&gt;
&lt;h1&gt;ESP8266 WebSocket Demo&lt;/h1&gt;
&lt;div id=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ledstatus</span><span style="color: rgba(128, 0, 0, 1)">"</span>&gt;&lt;b&gt;LED&lt;/b&gt;&lt;/div&gt;
&lt;button id=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ledon</span><span style="color: rgba(128, 0, 0, 1)">"</span>  type=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">button</span><span style="color: rgba(128, 0, 0, 1)">"</span> onclick=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">buttonclick(this);</span><span style="color: rgba(128, 0, 0, 1)">"</span>&gt;On&lt;/button&gt; 
&lt;button id=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ledoff</span><span style="color: rgba(128, 0, 0, 1)">"</span> type=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">button</span><span style="color: rgba(128, 0, 0, 1)">"</span> onclick=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">buttonclick(this);</span><span style="color: rgba(128, 0, 0, 1)">"</span>&gt;Off&lt;/button&gt;
&lt;/body&gt;
&lt;/html&gt;<span style="color: rgba(0, 0, 0, 1)">
)rawliteral</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">;</span>

<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> LED相关定义</span>
<span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">int</span> LEDPIN = <span style="color: rgba(128, 0, 128, 1)">0</span>;    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> LED引脚定义，使用GPIO0</span>
<span style="color: rgba(0, 0, 255, 1)">bool</span> LEDStatus;          <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> LED当前状态

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> WebSocket控制命令</span>
<span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> LEDON[] = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ledon</span><span style="color: rgba(128, 0, 0, 1)">"</span>;    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 开灯命令</span>
<span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> LEDOFF[] = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ledoff</span><span style="color: rgba(128, 0, 0, 1)">"</span>;  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 关灯命令</span>

<span style="color: rgba(0, 0, 255, 1)">void</span> webSocketEvent(uint8_t num, WStype_t type, uint8_t *<span style="color: rgba(0, 0, 0, 1)"> payload, size_t length)
{
    USE_SERIAL.printf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">WebSocket事件(%d, %d, ...)\r\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, num, type);
    </span><span style="color: rgba(0, 0, 255, 1)">switch</span><span style="color: rgba(0, 0, 0, 1)"> (type) {
    </span><span style="color: rgba(0, 0, 255, 1)">case</span> WStype_DISCONNECTED:  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 客户端断开连接</span>
        USE_SERIAL.printf(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[%u] 连接断开!\r\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, num);
        </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">case</span> WStype_CONNECTED:     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 客户端连接成功</span>
<span style="color: rgba(0, 0, 0, 1)">    {
        IPAddress ip </span>=<span style="color: rgba(0, 0, 0, 1)"> webSocket.remoteIP(num);
        USE_SERIAL.printf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[%u] 客户端连接成功 IP: %d.%d.%d.%d URL: %s\r\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, 
                         num, ip[</span><span style="color: rgba(128, 0, 128, 1)">0</span>], ip[<span style="color: rgba(128, 0, 128, 1)">1</span>], ip[<span style="color: rgba(128, 0, 128, 1)">2</span>], ip[<span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">], payload);
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 发送当前LED状态给新连接的客户端</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (LEDStatus) {
            webSocket.sendTXT(num, LEDON, strlen(LEDON));
        }
        </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
            webSocket.sendTXT(num, LEDOFF, strlen(LEDOFF));
        }
    }
        </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">case</span> WStype_TEXT:          <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 收到文本消息</span>
        USE_SERIAL.printf(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[%u] 收到消息: %s\r\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, num, payload);

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 处理LED控制命令</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> (strcmp(LEDON, (<span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *)payload) == <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">) {
            writeLED(</span><span style="color: rgba(0, 0, 255, 1)">true</span>);    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 开灯</span>
<span style="color: rgba(0, 0, 0, 1)">        }
        </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (strcmp(LEDOFF, (<span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *)payload) == <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">) {
            writeLED(</span><span style="color: rgba(0, 0, 255, 1)">false</span>);   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 关灯</span>
<span style="color: rgba(0, 0, 0, 1)">        }
        </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
            USE_SERIAL.println(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">未知命令</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        }
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 广播消息给所有客户端</span>
<span style="color: rgba(0, 0, 0, 1)">        webSocket.broadcastTXT(payload, length);
        </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">case</span> WStype_BIN:           <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 收到二进制消息</span>
        USE_SERIAL.printf(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[%u] 收到二进制数据，长度: %u\r\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, num, length);
        hexdump(payload, length);
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 回显数据到浏览器</span>
<span style="color: rgba(0, 0, 0, 1)">        webSocket.sendBIN(num, payload, length);
        </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)">:
        USE_SERIAL.printf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">无效的WebSocket类型 [%d]\r\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, type);
        </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
    }
}

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 处理根路径请求</span>
<span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> handleRoot()
{
  server.send_P(</span><span style="color: rgba(128, 0, 128, 1)">200</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">text/html</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, INDEX_HTML);
}

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 处理404错误</span>
<span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> handleNotFound()
{
  String message </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">File Not Found\n\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
  message </span>+= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">URI: </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
  message </span>+=<span style="color: rgba(0, 0, 0, 1)"> server.uri();
  message </span>+= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\nMethod: </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
  message </span>+= (server.method() == HTTP_GET) ? <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">GET</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">POST</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
  message </span>+= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\nArguments: </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
  message </span>+=<span style="color: rgba(0, 0, 0, 1)"> server.args();
  message </span>+= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
  </span><span style="color: rgba(0, 0, 255, 1)">for</span> (uint8_t i = <span style="color: rgba(128, 0, 128, 1)">0</span>; i&lt;server.args(); i++<span style="color: rgba(0, 0, 0, 1)">){
    message </span>+= <span style="color: rgba(128, 0, 0, 1)">"</span> <span style="color: rgba(128, 0, 0, 1)">"</span> + server.argName(i) + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">: </span><span style="color: rgba(128, 0, 0, 1)">"</span> + server.arg(i) + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
  }
  server.send(</span><span style="color: rgba(128, 0, 128, 1)">404</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">text/plain</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, message);
}

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> LED控制函数</span>
<span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> writeLED(<span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)"> LEDon)
{
  LEDStatus </span>=<span style="color: rgba(0, 0, 0, 1)"> LEDon;
  </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 注意：HUZZAH板的LED逻辑是反转的</span>
  digitalWrite(LEDPIN, LEDon ? <span style="color: rgba(128, 0, 128, 1)">0</span> : <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">);
}

</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> setup()
{
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 初始化LED引脚</span>
<span style="color: rgba(0, 0, 0, 1)">    pinMode(LEDPIN, OUTPUT);
    writeLED(</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 初始化串口通信</span>
    USE_SERIAL.begin(<span style="color: rgba(128, 0, 128, 1)">115200</span><span style="color: rgba(0, 0, 0, 1)">);

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 启动延时倒计时</span>
    <span style="color: rgba(0, 0, 255, 1)">for</span>(uint8_t t = <span style="color: rgba(128, 0, 128, 1)">4</span>; t &gt; <span style="color: rgba(128, 0, 128, 1)">0</span>; t--<span style="color: rgba(0, 0, 0, 1)">) {
        USE_SERIAL.printf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[启动] 等待 %d 秒...\r\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, t);
        USE_SERIAL.flush();
        delay(</span><span style="color: rgba(128, 0, 128, 1)">1000</span><span style="color: rgba(0, 0, 0, 1)">);
    }

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 配置WiFi接入点模式</span>
<span style="color: rgba(0, 0, 0, 1)">    WiFi.softAP(ssid, password);
    IPAddress myIP </span>=<span style="color: rgba(0, 0, 0, 1)"> WiFi.softAPIP();
    USE_SERIAL.print(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">接入点IP地址: </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    USE_SERIAL.println(myIP);

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 启动MDNS服务</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span> (mdns.begin(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">espWebSock</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, WiFi.localIP())) {
        USE_SERIAL.println(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MDNS服务启动成功</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        mdns.addService(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">tcp</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">80</span><span style="color: rgba(0, 0, 0, 1)">);
        mdns.addService(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ws</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">tcp</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">81</span><span style="color: rgba(0, 0, 0, 1)">);
    }
    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
        USE_SERIAL.println(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MDNS服务启动失败</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    }
    
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 配置Web服务器路由</span>
    server.on(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, handleRoot);
    server.onNotFound(handleNotFound);
    server.begin();

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 启动WebSocket服务器</span>
<span style="color: rgba(0, 0, 0, 1)">    webSocket.begin();
    webSocket.onEvent(webSocketEvent);
}

</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> loop()
{
    webSocket.loop();         </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 处理WebSocket事件</span>
    server.handleClient();    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 处理HTTP请求</span>
}</pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>&nbsp;</p>
<h3>编译</h3>
<p><img src="https://img2024.cnblogs.com/blog/785716/202501/785716-20250107141415005-748302744.png" alt="" loading="lazy"></p>
<h3>&nbsp;上传</h3>
<p><img src="https://img2024.cnblogs.com/blog/785716/202501/785716-20250107141808116-950408549.png" alt="" loading="lazy"></p>
<h3>&nbsp;测试</h3>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">硬件连接
将LED连接到ESP8266</span>-<span style="color: rgba(0, 0, 0, 1)">01S的GPIO0引脚（注意要串联一个合适的限流电阻）
确保ESP8266</span>-01S正确供电（<span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">.3V）
上传程序后的测试流程：
a. 连接WiFi
用手机或电脑搜索WiFi网络
找到名为</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">tunc5555</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">的WiFi热点
使用密码</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">123456789</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">连接
b. 访问Web界面
打开浏览器
输入地址：http:</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">192.168.4.1</span>
<span style="color: rgba(0, 0, 0, 1)">应该能看到一个简单的网页界面，包含：
一个显示</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">LED</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">的文本
</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">On</span><span style="color: rgba(128, 0, 0, 1)">"</span>和<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Off</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">两个按钮
c. 测试LED控制
点击</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">On</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">按钮，LED应该会亮起
点击</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Off</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">按钮，LED应该会熄灭
网页上的</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">LED</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">文字颜色也会相应变化（开启时为红色，关闭时为黑色）
调试方法：
打开Arduino IDE的串口监视器（波特率设置为115200）
可以看到以下调试信息：
启动倒计时信息
WiFi接入点IP地址
WebSocket连接状态
LED控制命令接收情况</span></pre>
</div>
<h3>常见问题解决</h3>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">无法上传程序：
检查COM口是否正确选择
确认已进入烧录模式
尝试按RST按钮重置
找不到WiFi：
检查供电是否正常
查看串口监视器输出信息
尝试重启模块
LED不响应：
检查LED连接极性
确认GPIO0连接正确
查看串口调试信息</span></pre>
</div>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.007293210481481482" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-08 08:52">2025-01-08 08:52</span>&nbsp;
<a href="https://www.cnblogs.com/hiit">HIIT</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18657670" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18657670);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18657670', targetLink: 'https://www.cnblogs.com/hiit/p/18657670', title: 'ESP8266 wifi模块+CH340烧录板安装使用运行教程' })">举报</a>
</div>
        