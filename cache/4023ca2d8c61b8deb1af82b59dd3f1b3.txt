
		<h2>
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ydswin/p/18667096" title="发布于 2025-01-12 18:17">
    <span role="heading" aria-level="2">在shell脚本中为日志添加颜色</span>
    

</a>

		</h2>
		<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在 Shell 脚本中，可以通过添加 ANSI 转义序列来为日志输出添加颜色。以下是一个完整的 Shell 脚本示例，包含日志颜色定义、日志函数封装以及使用示例：</p>
<h3 id="完整脚本colored_logssh">完整脚本：<code>colored_logs.sh</code></h3>
<pre><code class="language-bash">#!/bin/bash

# 定义颜色变量
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # 无颜色（重置颜色）

# 日志函数封装
log_error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

log_warn() {
    echo -e "${YELLOW}[WARN] $1${NC}"
}

log_info() {
    echo -e "${GREEN}[INFO] $1${NC}"
}

log_debug() {
    echo -e "${BLUE}[DEBUG] $1${NC}"
}

# 示例函数，模拟一些操作
example_function() {
    log_info "开始执行示例函数..."
    log_debug "这是一个调试信息，通常用于详细日志。"

    # 模拟一个操作
    if [[ $1 == "error" ]]; then
        log_error "操作失败，模拟错误场景。"
    else
        log_info "操作成功完成。"
    fi

    log_warn "这是一个警告信息，表示需要注意的情况。"
}

# 主脚本逻辑
main() {
    log_info "脚本启动..."

    # 调用示例函数
    example_function "success"
    example_function "error"

    log_info "脚本结束。"
}

# 执行主函数
main
</code></pre>
<h3 id="脚本说明">脚本说明</h3>
<ol>
<li>
<p><strong>颜色定义</strong>：</p>
<ul>
<li>使用 ANSI 转义序列定义了几种常见颜色（红色、绿色、黄色、蓝色）。</li>
<li><code>NC</code> 用于重置颜色，避免后续文本被着色。</li>
</ul>
</li>
<li>
<p><strong>日志函数</strong>：</p>
<ul>
<li><code>log_error</code>：输出红色错误日志。</li>
<li><code>log_warn</code>：输出黄色警告日志。</li>
<li><code>log_info</code>：输出绿色信息日志。</li>
<li><code>log_debug</code>：输出蓝色调试日志。</li>
</ul>
</li>
<li>
<p><strong>示例函数</strong>：</p>
<ul>
<li><code>example_function</code> 模拟了一个操作，根据传入的参数决定是否模拟错误场景。</li>
<li>在函数中使用了不同的日志函数来记录不同级别的日志。</li>
</ul>
</li>
<li>
<p><strong>主函数</strong>：</p>
<ul>
<li><code>main</code> 函数是脚本的入口，调用示例函数并输出日志。</li>
</ul>
</li>
<li>
<p><strong>执行脚本</strong>：</p>
<ul>
<li>脚本最后调用 <code>main</code> 函数来启动逻辑。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="运行脚本">运行脚本</h3>
<ol>
<li>将脚本保存为 <code>colored_logs.sh</code>。</li>
<li>赋予脚本执行权限：<pre><code class="language-bash">chmod +x colored_logs.sh
</code></pre>
</li>
<li>运行脚本：<pre><code class="language-bash">./colored_logs.sh
</code></pre>
</li>
</ol>
<hr>
<h3 id="输出示例">输出示例</h3>
<p>运行脚本后，您将看到类似以下的彩色输出：<br>
<img src="https://img2024.cnblogs.com/blog/1307305/202501/1307305-20250112164414538-1846005056.png" alt="" loading="lazy"></p>
<h3 id="注意事项">注意事项</h3>
<ol>
<li>
<p><strong>终端支持</strong>：</p>
<ul>
<li>确保您的终端支持 ANSI 颜色代码。大多数现代终端（如 Linux 终端、macOS Terminal、Windows Terminal）都支持。</li>
</ul>
</li>
<li>
<p><strong>日志级别</strong>：</p>
<ul>
<li>您可以根据需要调整日志级别，例如在生产环境中禁用 <code>DEBUG</code> 日志。</li>
</ul>
</li>
<li>
<p><strong>扩展功能</strong>：</p>
<ul>
<li>可以将日志输出重定向到文件，或者添加时间戳等功能。</li>
</ul>
</li>
</ol>
<p>通过这种方式，您可以为 Shell 脚本中的日志输出添加颜色，使其更易于阅读和区分。</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/ydswin/" target="_blank">dashery</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/ydswin/p/18667096" target="_blank">https://www.cnblogs.com/ydswin/p/18667096</a></p>
</div>
<div class="clear"></div>

		<p class="postfoot">
			posted on 
<span id="post-date" data-last-update-days="0.7514059595844907" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-12 18:17">2025-01-12 18:17</span>&nbsp;
<a href="https://www.cnblogs.com/ydswin">dashery</a>&nbsp;
阅读(<span id="post_view_count">61</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18667096" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18667096);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18667096', targetLink: 'https://www.cnblogs.com/ydswin/p/18667096', title: '在shell脚本中为日志添加颜色' })">举报</a>

		</p>
	