
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/sheng_chao/p/18711288" title="发布于 2025-02-12 11:49">
    <span role="heading" aria-level="2">在线客服的独立产品之路：如何将复杂的 .NET 系统打包到 Docker 镜像，使之能一键上线</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        我在业余时间开发了一款自己的独立产品：升讯威在线客服与营销系统。陆陆续续开发了几年，从一开始的偶有用户尝试，到如今线上环境和私有化部署均有了越来越多的稳定用户，在这个过程中，我也积累了不少如何开发运营一款独立产品的经验。在这篇文章中，我主要讲 Docker 打包发布的过程和一些注意事项。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>我在业余时间开发了一款自己的独立产品：升讯威在线客服与营销系统。陆陆续续开发了几年，从一开始的偶有用户尝试，到如今线上环境和私有化部署均有了越来越多的稳定用户，在这个过程中，我也积累了不少如何开发运营一款独立产品的经验。</p>
<p>在这几年时间中，有一些客户始终在用我的客服系统，昨天给一位客户更新系统，看到更新记录，第一次给他版本是 2021 年 9 月，一转眼，快 4 年了……</p>
<p><img src="https://img2024.cnblogs.com/blog/78019/202502/78019-20250212114120578-1932829074.png" alt="" loading="lazy"></p>
<p>这些的长期客户还有好几家，另外还有很多客户，是从 <strong>博客园</strong> 看到的文章找到的我，包括最初的种子客户也是，也很感谢 <strong>博客园</strong> 。</p>
<p><img src="https://img2024.cnblogs.com/blog/78019/202502/78019-20250212114147338-1498456923.png" alt="" loading="lazy"></p>
<hr>
<p>最初我开发的在线客服系统版本，只能运行在 Windows + SQL Server 上，后来在用户的建议和帮助下，逐渐拓展到了 Linux + MySQL、宝塔面板，最后拓展到了 Docker，在这篇文章中，我主要讲 Docker 打包发布的过程和一些注意事项。</p>
<p>可能有些朋友会疑问，打包 Docker 镜像应该很容器吧？其实这说的也没错，如何仅仅只是打包一个能跑的镜像，那几行命令就可以，但是如果你要提供一个商业级的产品，那方方面面的细节都需要考虑周全。</p>
<p>我记得最初我做的镜像，docker run 之后，还得 exec 到容器内部去修改配置文件，再重启服务才能使用，这个使用门槛就一下变得很高，用户要用也很麻烦。</p>
<p>现在我通过环境变量，直接在 docker run 的时候把参数带进去，完全实现了一键运行，一分钟系统上线，有兴趣的朋友可以看我的 Docker Hub 主页：<a href="https://hub.docker.com/r/iccb1013/linkup" target="_blank" rel="noopener nofollow">升讯威在线客服与营销系统</a>。</p>
<hr>
<h2 id="net-程序打包到docker-镜像的注意事项">.NET 程序打包到docker 镜像的注意事项</h2>
<h3 id="1-选择合适的基础镜像">1. <strong>选择合适的基础镜像</strong></h3>
<ul>
<li><strong>.NET Core / .NET 5+</strong>：如果你使用的是 .NET Core 或 .NET 5+，你应该选择官方的 .NET 镜像作为基础镜像。例如，<code>mcr.microsoft.com/dotnet/aspnet:5.0</code> 适用于 ASP.NET Core 应用，<code>mcr.microsoft.com/dotnet/runtime:5.0</code> 适用于运行时。</li>
<li><strong>分层镜像</strong>：为了减小镜像体积，可以使用分层镜像（multi-stage build）。例如，首先使用包含 SDK 的镜像进行构建，最后只复制构建好的产物到运行时镜像。</li>
</ul>
<pre><code class="language-dockerfile"># 使用 .NET SDK 镜像进行构建
FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build
WORKDIR /app
COPY . .
RUN dotnet publish -c Release -o out

# 使用 .NET Runtime 镜像运行
FROM mcr.microsoft.com/dotnet/aspnet:5.0
WORKDIR /app
COPY --from=build /app/out .
ENTRYPOINT ["dotnet", "MyApp.dll"]
</code></pre>
<h3 id="2-优化-dockerfile">2. <strong>优化 Dockerfile</strong></h3>
<ul>
<li><strong>COPY 指令</strong>：尽量减少 Docker 镜像层数。将 <code>.csproj</code> 和其他依赖文件单独复制，然后运行 <code>dotnet restore</code>，而不是将整个项目一起复制。这可以避免每次构建时重新下载依赖。</li>
<li><strong>构建缓存</strong>：利用 Docker 构建缓存，使得在代码不发生改变时，Docker 可以复用先前的层，减少构建时间。</li>
</ul>
<pre><code class="language-dockerfile"># 先复制项目文件并还原依赖
COPY *.csproj ./
RUN dotnet restore

# 然后复制所有源代码
COPY . ./
</code></pre>
<h3 id="3-确保运行时环境的正确性">3. <strong>确保运行时环境的正确性</strong></h3>
<ul>
<li><strong>环境变量</strong>：如果应用程序依赖于环境变量（如数据库连接字符串、API 密钥等），可以在 Dockerfile 或 Docker 运行命令中设置这些环境变量。</li>
</ul>
<pre><code class="language-dockerfile">ENV ASPNETCORE_ENVIRONMENT=Production
ENV ConnectionStrings__MyDb="Server=db;Database=mydb;User=sa;Password=Password123"
</code></pre>
<ul>
<li><strong>文件权限</strong>：确保复制到 Docker 镜像中的文件有正确的权限。例如，使用 <code>RUN chmod</code> 调整权限，避免容器内的文件权限问题。</li>
</ul>
<h3 id="4-配置文件">4. <strong>配置文件</strong></h3>
<ul>
<li><strong>appsettings.json</strong>：如果你的应用使用配置文件，可以选择将配置文件放入 Docker 镜像中，或者将配置文件放在外部，并通过 Docker 挂载来管理配置。</li>
</ul>
<h3 id="5-网络和数据库连接">5. <strong>网络和数据库连接</strong></h3>
<ul>
<li><strong>连接字符串</strong>：如果应用连接到数据库或其他外部服务，最好避免将敏感数据（如连接字符串）硬编码在代码中。可以使用环境变量或 Docker secrets 进行管理。</li>
</ul>
<h3 id="6-日志记录">6. <strong>日志记录</strong></h3>
<ul>
<li>Docker 容器中通常没有 UI，所以要确保将日志输出到标准输出（stdout）或标准错误（stderr）。这能确保日志能被 Docker 捕获并显示出来，便于调试。</li>
</ul>
<pre><code class="language-csharp">// 在 .NET 中，通常会配置日志输出
builder.Logging.AddConsole();
</code></pre>
<h3 id="7-容器内存限制">7. <strong>容器内存限制</strong></h3>
<ul>
<li>如果你的应用程序需要较多内存，考虑在 Docker 容器中设置合适的内存限制，避免应用因资源不足而崩溃。</li>
</ul>
<pre><code class="language-bash">docker run -m 512m myapp
</code></pre>
<h3 id="8-清理无用文件">8. <strong>清理无用文件</strong></h3>
<ul>
<li>在 Dockerfile 中使用 <code>dotnet publish</code> 生成发布文件时，可以去除不必要的文件，如测试、源码文件，减少镜像大小。</li>
<li>使用 <code>dotnet publish --self-contained</code> 创建自包含的发布包，以便不依赖 Docker 中的 .NET SDK。</li>
</ul>
<h3 id="9-安全性">9. <strong>安全性</strong></h3>
<ul>
<li>使用 Docker 多阶段构建时，确保最终镜像只包含运行时所需的文件。</li>
<li>不要在镜像中包含开发工具、调试符号、源码或其他非生产所需的内容。</li>
</ul>
<h3 id="10-测试镜像">10. <strong>测试镜像</strong></h3>
<ul>
<li>打包完 Docker 镜像后，确保在本地或 staging 环境进行全面的测试，检查应用在容器中的运行情况，包括性能、连接、日志和异常处理。</li>
</ul>
<h3 id="11-推送和部署">11. <strong>推送和部署</strong></h3>
<ul>
<li>在推送镜像到 Docker 仓库时，考虑使用合适的标签（例如，<code>latest</code>, <code>v1.0.0</code>, <code>production</code>）来管理版本。</li>
<li>使用 Kubernetes 或 Docker Swarm 等容器编排工具来管理和部署你的容器。</li>
</ul>
<h3 id="示例-dockerfile">示例 Dockerfile</h3>
<pre><code class="language-dockerfile"># 1. 基础镜像
FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build

# 2. 设置工作目录并复制文件
WORKDIR /app
COPY *.csproj ./
RUN dotnet restore

# 3. 复制源代码并构建发布包
COPY . ./
RUN dotnet publish -c Release -o out

# 4. 使用运行时镜像
FROM mcr.microsoft.com/dotnet/aspnet:5.0 AS runtime
WORKDIR /app
COPY --from=build /app/out ./

# 5. 设置启动命令
ENTRYPOINT ["dotnet", "MyApp.dll"]
</code></pre>
<h2 id="如何让你的独立产品用上-docker-环境变量">如何让你的独立产品用上 Docker 环境变量</h2>
<p>Docker环境变量是 Docker 容器化应用中一种重要的配置方式。它们可以帮助在容器启动时为应用提供必要的参数或配置，而不需要修改容器内部的代码或配置文件。Docker 环境变量使得容器可以更加灵活和动态化，尤其在不同的部署环境中尤为重要。</p>
<h3 id="1-什么是-docker-环境变量">1. <strong>什么是 Docker 环境变量？</strong></h3>
<p>Docker 环境变量（Environment Variables）是操作系统层面上用于存储配置信息的变量。在 Docker 容器中，环境变量通常用于存储应用的配置信息、凭证、API 密钥、数据库连接字符串等。它们可以在容器启动时传递，并可以在运行时访问和修改。</p>
<h3 id="2-为什么使用环境变量">2. <strong>为什么使用环境变量？</strong></h3>
<ul>
<li><strong>灵活性</strong>：可以根据不同的运行环境提供不同的值，无需修改容器镜像。</li>
<li><strong>安全性</strong>：可以避免硬编码敏感信息（如密码、API 密钥等），提升安全性。</li>
<li><strong>配置管理</strong>：通过环境变量可以在不修改容器内容的情况下，动态调整容器行为。</li>
</ul>
<h3 id="3-如何在-docker-中使用环境变量">3. <strong>如何在 Docker 中使用环境变量？</strong></h3>
<p>Docker 提供了几种设置和使用环境变量的方式：</p>
<h4 id="31-使用--e-或---env-参数设置环境变量">3.1 <strong>使用 <code>-e</code> 或 <code>--env</code> 参数设置环境变量</strong></h4>
<p>在使用 <code>docker run</code> 启动容器时，可以通过 <code>-e</code> 参数来设置环境变量。例如：</p>
<pre><code class="language-bash">docker run -e MY_ENV_VAR=value my_image
</code></pre>
<p>这样会在容器中设置一个名为 <code>MY_ENV_VAR</code> 的环境变量，值为 <code>value</code>。</p>
<h4 id="32-使用-env-文件">3.2 <strong>使用 <code>.env</code> 文件</strong></h4>
<p>为了方便管理多个环境变量，可以使用 <code>.env</code> 文件。在 <code>.env</code> 文件中，每一行定义一个环境变量的键值对：</p>
<pre><code class="language-bash">MY_ENV_VAR=value
ANOTHER_ENV_VAR=another_value
</code></pre>
<p>然后通过 <code>--env-file</code> 参数将该文件传递给 Docker 容器：</p>
<pre><code class="language-bash">docker run --env-file .env my_image
</code></pre>
<h4 id="33-在-dockerfile-中使用-env-指令">3.3 <strong>在 Dockerfile 中使用 <code>ENV</code> 指令</strong></h4>
<p>在构建镜像时，可以在 <code>Dockerfile</code> 中使用 <code>ENV</code> 指令来设置环境变量：</p>
<pre><code class="language-dockerfile">FROM ubuntu:latest
ENV MY_ENV_VAR=value
</code></pre>
<p>这将创建一个在容器运行时可用的环境变量 <code>MY_ENV_VAR</code>。</p>
<h4 id="34-使用-docker-compose-中的环境变量">3.4 <strong>使用 <code>docker-compose</code> 中的环境变量</strong></h4>
<p>在使用 <code>docker-compose</code> 管理多个容器时，可以在 <code>docker-compose.yml</code> 文件中定义环境变量：</p>
<pre><code class="language-yaml">version: '3'
services:
  webapp:
    image: my_image
    environment:
      - MY_ENV_VAR=value
      - ANOTHER_VAR=another_value
</code></pre>
<p>此外，也可以从 <code>.env</code> 文件加载环境变量：</p>
<pre><code class="language-yaml">version: '3'
services:
  webapp:
    image: my_image
    env_file:
      - .env
</code></pre>
<h4 id="35-通过-docker-exec-查看环境变量">3.5 <strong>通过 <code>docker exec</code> 查看环境变量</strong></h4>
<p>可以通过 <code>docker exec</code> 进入容器内部，使用 <code>env</code> 或 <code>printenv</code> 命令查看容器中的环境变量：</p>
<pre><code class="language-bash">docker exec -it container_id env
</code></pre>
<h3 id="4-环境变量的作用与实践">4. <strong>环境变量的作用与实践</strong></h3>
<p>环境变量通常用于以下几种场景：</p>
<h4 id="41-数据库连接信息">4.1 <strong>数据库连接信息</strong></h4>
<p>在多环境部署中，数据库连接信息可以通过环境变量配置，以避免在源代码中硬编码这些信息。例如：</p>
<pre><code class="language-bash">docker run -e DB_HOST=localhost -e DB_USER=root -e DB_PASS=secret my_image
</code></pre>
<h4 id="42-api-密钥">4.2 <strong>API 密钥</strong></h4>
<p>很多应用依赖于外部服务的 API 密钥，这些密钥可以通过环境变量来传递，以避免泄露。例如：</p>
<pre><code class="language-bash">docker run -e API_KEY=your_api_key my_image
</code></pre>
<h4 id="43-配置不同的运行环境">4.3 <strong>配置不同的运行环境</strong></h4>
<p>可以根据不同的环境传递不同的环境变量值，如开发、测试和生产环境。例如，在生产环境中你可能需要开启调试日志，但在开发环境中关闭它。</p>
<pre><code class="language-bash">docker run -e ENV=production -e LOG_LEVEL=error my_image
</code></pre>
<h3 id="5-容器间共享环境变量">5. <strong>容器间共享环境变量</strong></h3>
<p>在多容器的场景中，如果需要多个容器共享环境变量，可以通过 Docker 网络和服务间的环境变量传递来实现。例如，使用 Docker Compose 启动多个服务时，<code>web</code> 服务可以访问 <code>db</code> 服务的环境变量。</p>
<h3 id="6-限制和注意事项">6. <strong>限制和注意事项</strong></h3>
<ul>
<li><strong>敏感信息</strong>：环境变量可以在 Docker 容器启动时传递，但它们也有泄露的风险。例如，容器日志或操作系统的某些工具可能会暴露这些变量。</li>
<li><strong>变量覆盖</strong>：在容器运行时，环境变量的值可能会被外部传递的变量覆盖。例如，在 <code>docker-compose.yml</code> 中设置的环境变量可以在 <code>docker run</code> 时通过 <code>-e</code> 参数覆盖。</li>
<li><strong>共享变量的作用域</strong>：在 Docker Compose 或多容器应用中，环境变量的作用域仅限于指定的容器，跨容器传递时需要显式声明。</li>
</ul>
<hr>
<h3 id="简介下这个-net-开发的小系统">简介下这个 .net 开发的小系统</h3>
<blockquote>
<p><a href="https://kf.shengxunwei.com/" target="_blank" rel="noopener nofollow">https://kf.shengxunwei.com/</a></p>
</blockquote>
<p>升讯威在线客服与营销系统是一款客服软件，但更重要的是一款营销利器。</p>
<ul>
<li>可以追踪正在访问网站或使用 APP 的所有访客，收集他们的浏览情况，使客服能够主动出击，施展话术，促进成单。</li>
<li>可嵌入网站、手机 APP、公众号、或者通过 URL 地址直接联系客服。</li>
<li>支持访客信息互通，可传输访客标识、名称和其它任意信息到客服系统，与您的业务系统对接。</li>
<li>可全天候 7 × 24 小时挂机运行，网络中断，拔掉网线，手机飞行模式，不掉线不丢消息，欢迎实测。</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/78019/202502/78019-20250212114731443-13845977.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/78019/202502/78019-20250212114736011-1278218137.png" alt="" loading="lazy"></p>
<p>希望能够打造： <strong>开放、开源、共享。努力打造 .net 社区的一款优秀开源产品。</strong></p>
<h3 id="钟意的话请给个赞支持一下吧谢谢">钟意的话请给个赞支持一下吧，谢谢~</h3>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.38107212212731484" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-12 11:49">2025-02-12 11:49</span>&nbsp;
<a href="https://www.cnblogs.com/sheng_chao">升讯威在线客服系统</a>&nbsp;
阅读(<span id="post_view_count">283</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18711288" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18711288);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18711288', targetLink: 'https://www.cnblogs.com/sheng_chao/p/18711288', title: '在线客服的独立产品之路：如何将复杂的 .NET 系统打包到 Docker 镜像，使之能一键上线' })">举报</a>
</div>
        