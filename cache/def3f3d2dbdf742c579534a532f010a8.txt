
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chinasoft/p/19060572" title="发布于 2025-08-27 11:27">
    <span role="heading" aria-level="2">接口设计之道： RPC 与 RESTful 的抉择与融合</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div class="Section0">
<p>在现代软件开发中，&nbsp;API&nbsp;接口设计是系统架构的基石。通过近期关于“<span style="font-family: 微软雅黑">统一使用</span> POST”、“gRPC”、“RESTful”等话题的深入探讨与沟通，我们厘清了不同设计范式的本质、优劣及其适用场景，形成了更清晰的架&nbsp;构认知。</p>
<p><strong><span style="font-family: 微软雅黑">一、</span> <span style="font-family: 微软雅黑">核心理念：两种设计范式</span></strong></p>
<p>最根本的区分在于<strong>设计理念</strong>：</p>
<p><strong>&nbsp;&nbsp;</strong><strong>RPC (Remote Procedure Call)</strong>：&nbsp;<strong>以</strong><strong>“</strong><strong>动作</strong><strong>”</strong><strong>或</strong><strong>“</strong><strong>方法</strong><strong>”</strong><strong>为核心</strong>。其思维模式是“我要执行一个叫createOrder&nbsp;或&nbsp;dischargePatient&nbsp;的操作”。它将远程服务调用模拟为本地函数调用，关注“<strong>做什么</strong>”。典型的特征是“动词+主语”<span style="font-family: 微软雅黑">的接口命名（如</span> &nbsp;/api/createUser&nbsp;）和<span style="font-family: 微软雅黑">统一使用</span> &nbsp;POST&nbsp;方法&nbsp;传输包含方法名和参数的请求体（如&nbsp;JSON-RPC）。&nbsp;RPC&nbsp;的优势在于<strong>直观、直接、沟通成本</strong><strong>低</strong><span style="font-family: 微软雅黑">，特</span> 别适合封装复杂的、非标准化的业务流程。</p>
<p><strong>&nbsp;&nbsp;</strong><strong>RESTful (Representational State Transfer)</strong>：&nbsp;<strong>以</strong><strong>“</strong><strong>资源</strong><strong>”</strong><strong>为核心</strong>。其思维模式是“我要操作一个&nbsp;User&nbsp;<span style="font-family: 微软雅黑">或</span> &nbsp;Order&nbsp;资源”。它利用&nbsp;<a>HTTP</a>&nbsp;协议的语义，通过<span style="font-family: 微软雅黑">标准的</span> &nbsp;GET&nbsp;（获取）、&nbsp;POST&nbsp;（创建）、&nbsp;PUT&nbsp;/&nbsp;PATCH&nbsp;（更新）、&nbsp;DELETE&nbsp;（删除）方法对资源进行操作，关注“<strong>操作哪个东西</strong>”。&nbsp;URI&nbsp;代表资源（如&nbsp;/users/123&nbsp;），操作的语义由&nbsp;<a>HTTP</a>&nbsp;方法表达。&nbsp;RESTful 的优势在于<strong>统一接口、可</strong><strong>&nbsp;<span style="font-family: 微软雅黑">缓存性</span></strong>（&nbsp;GET&nbsp;<span style="font-family: 微软雅黑">请求可被浏览器、</span> CDN&nbsp;缓存）、<strong>无状态性</strong><span style="font-family: 微软雅黑">和与</span> Web&nbsp;生态的天然契合。</p>
<p><strong><span style="font-family: 微软雅黑">二、</span> <span style="font-family: 微软雅黑">统一</span> </strong><strong>POST</strong><strong>：利弊权衡</strong></p>
<p align="justify">为减少沟通成本而“<span style="font-family: 微软雅黑">统一使用</span> POST”是一种常见实践。其<strong>优点</strong>显著：简化开发规范，能轻松处理复杂参&nbsp;&nbsp;<span style="font-family: 微软雅黑">数（避免</span> URL&nbsp;长度限制），防火墙兼容性好。然而，其<strong>缺点</strong>更为深远：它<strong><span style="font-family: 微软雅黑">完全违背了</span> </strong><a><strong>HTTP</strong></a><strong>&nbsp;</strong><strong>方法的语</strong><strong>&nbsp;&nbsp;</strong><strong>义</strong>，导致操作意图模糊（是读取还是写入？），&nbsp;<strong>彻底丧失了</strong><strong>&nbsp;</strong>GET&nbsp;&nbsp;<strong>请求的可缓存能力</strong>，严重影响系统性&nbsp;能和可扩展性，并且使客户端难以利用方法的幂等性（&nbsp;PUT&nbsp;/&nbsp;DELETE&nbsp;）进行安全重试。</p>
<p><strong><span style="font-family: 微软雅黑">三、</span> <span style="font-family: 微软雅黑">演进与优化：务实的中间路线</span></strong></p>
<p>认识到“统一&nbsp;POST”的弊端后，公司采取了更优策略：采用“<strong>动词</strong><strong>+</strong><strong>主语</strong>”命名，并区分“<strong><span style="font-family: 微软雅黑">静态资源用</span> </strong><strong>GET</strong><strong>，</strong><strong>&nbsp;</strong><strong><span style="font-family: 微软雅黑">动态资源用</span> </strong><strong>POST</strong>”。这是一个<strong>务实的进步</strong>：</p>
<p><strong>&nbsp;&nbsp;</strong><strong>优点</strong><span style="font-family: 微软雅黑">：</span> “动词+主语”在应用层恢复了操作语义；将读取操作（静态资源）回归&nbsp;GET&nbsp;&nbsp;，<strong>关</strong><strong>键性地恢复</strong><strong>&nbsp;<span style="font-family: 微软雅黑">了缓存能力</span></strong><strong>&nbsp;</strong>，实现了有效的读写分离。</p>
<p><strong><strong>&nbsp;&nbsp;</strong>局限</strong><span style="font-family: 微软雅黑">：</span> &nbsp;POST&nbsp;仍承担了创建、更新、删除等多种职责，失去了&nbsp;&nbsp;PUT&nbsp;/&nbsp;DELETE&nbsp;&nbsp;的幂等性保证，且&nbsp;“动词”<span style="font-family: 微软雅黑">命名本质上仍是</span> RPC&nbsp;<span style="font-family: 微软雅黑">风格，偏离了</span> RESTful 的资源导向思想。</p>
<p><strong><span style="font-family: 微软雅黑">四、</span> <span style="font-family: 微软雅黑">技术本质：</span></strong><strong>&nbsp;</strong><strong>RPC over </strong><a><strong>HTTP</strong></a><strong>&nbsp;</strong><strong>的合理性</strong></p>
<p>技术经理提出的“<span style="font-family: 微软雅黑">我们用的是</span> RPC over <a>HTTP</a>&nbsp;，&nbsp;RESTful&nbsp;只是参考”这一说法，<strong>极具合理性</strong>。它准确地描&nbsp;&nbsp;述了当前架构的本质——<span style="font-family: 微软雅黑">利用</span> <a>HTTP</a>&nbsp;作为传输载体，进行远程过程调用。这种模式在内部系统、微服务&nbsp;<span style="font-family: 微软雅黑">通信或复杂业务场景中非常普遍且高效。它不追求</span> RESTful&nbsp;的教条，而是优先保障<strong>业务表达</strong><strong>的直接性和</strong><strong>&nbsp;</strong><strong>开发效率</strong>。对于像“处理出院”这类复杂业务操作，强行映射到&nbsp;&nbsp;POST&nbsp;/&nbsp;PUT&nbsp;/&nbsp;DELETE&nbsp;会非常别扭（是&nbsp; POST&nbsp;/discharge&nbsp;<span style="font-family: 微软雅黑">？还是</span> &nbsp;PATCH&nbsp;/patient&nbsp;{"status": "discharged"}&nbsp;？），而直接定义一个&nbsp;&nbsp;dischargePatient&nbsp;<span style="font-family: 微软雅黑">的</span> RPC&nbsp;方法则清晰明了。</p>
<p><strong><span style="font-family: 微软雅黑">五、</span> </strong><strong>gRPC</strong><strong>：</strong><strong>&nbsp;</strong><strong>RPC </strong><strong>理念的现代化演进</strong></p>
</div>
<p>gRPC&nbsp;<span style="font-family: 微软雅黑">并非使用传统意义上的</span> &nbsp;POST&nbsp;<span style="font-family: 微软雅黑">。它是一个基于</span> <a>HTTP/2</a>&nbsp;的现代&nbsp;RPC&nbsp;<span style="font-family: 微软雅黑">框架。开发者定义服务和方法</span> <span style="font-family: 微软雅黑">（如</span> &nbsp;rpc&nbsp;GetUser(...)&nbsp;），框架在底层将所有调用封装为&nbsp;<a>HTTP/2</a>&nbsp;的&nbsp;&nbsp;POST&nbsp;请求<span style="font-family: 微软雅黑">进行传输。但这对</span> &nbsp;<span style="font-family: 微软雅黑">开发者是透明的。</span>&nbsp;gRPC 的核心是<strong>方法调用</strong>和<strong><span style="font-family: 微软雅黑">高效的</span> </strong><strong>Protobuf</strong><strong>&nbsp;</strong><strong>序列化</strong>，而非&nbsp;<a>HTTP</a>&nbsp;方法语义，它是RPC&nbsp;理念的高性能实现。</p>
<p><strong><span style="font-family: 微软雅黑">六、</span> <span style="font-family: 微软雅黑">结论：设计是权衡的艺术</span></strong></p>
<p><span style="font-family: 微软雅黑">最终，选择</span> RPC&nbsp;<span style="font-family: 微软雅黑">还是</span> RESTful&nbsp;并非简单的对错问题，而是一场<strong>权衡</strong>：</p>
<p><strong>&nbsp;&nbsp;</strong><strong>优先业务效率与复杂性</strong><span style="font-family: 微软雅黑">：</span> <span style="font-family: 微软雅黑">若系统涉及大量复杂、特定的业务流程，团</span>队追求开发速度和沟通清&nbsp;晰，&nbsp;<strong>RPC </strong><strong>风格（或</strong><strong>&nbsp;</strong><strong>RPC over </strong><a><strong>HTTP</strong></a><strong>）是务实之选</strong>。</p>
<p><strong>&nbsp;&nbsp;</strong><strong>优先标准化与生态集成</strong><span style="font-family: 微软雅黑">：</span> <span style="font-family: 微软雅黑">若</span> API<span style="font-family: 微软雅黑">需对外公开，希望被广泛消费，或极度依赖缓存提升性能，</span> &nbsp;<strong>遵循</strong><strong>&nbsp;</strong><strong>RESTful</strong><strong>&nbsp;</strong><strong>原则（或借鉴其思想）更有价值</strong>。</p>
<p align="justify"><span style="color: rgba(51, 153, 102, 1)"><strong>当前的策略——承认“RPC over <a><span style="color: rgba(51, 153, 102, 1)">HTTP</span></a>”的本质，借鉴&nbsp;RESTful <span style="font-family: 微软雅黑">的优点（如用</span> &nbsp;GET&nbsp;实现缓存）&nbsp;——是&nbsp;一种在理想与现实之间取得良好平衡的成熟架构实践。它既避免了“<span style="font-family: 微软雅黑">伪</span> REST”的混乱，又充分利用了现有&nbsp;技术的优势，是应对复杂业务挑战的明智决策。</strong></span></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.014583333333333334" data-date-updated="2025-08-27 11:48">2025-08-27 11:27</span>&nbsp;
<a href="https://www.cnblogs.com/chinasoft">China Soft</a>&nbsp;
阅读(<span id="post_view_count">90</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19060572);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19060572', targetLink: 'https://www.cnblogs.com/chinasoft/p/19060572', title: '接口设计之道： RPC 与 RESTful 的抉择与融合' })">举报</a>
</div>
        