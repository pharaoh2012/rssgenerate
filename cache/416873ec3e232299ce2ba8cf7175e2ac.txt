
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/DOMLX/p/18800645" title="发布于 2025-03-30 14:59">
    <span role="heading" aria-level="2">halcon 深度学习教程（三） 目标检测之水果分类</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>&nbsp;</p>
<p>原文作者：aircraft</p>
<p>原文链接：<a href="https://www.cnblogs.com/DOMLX/p/18800645">halcon 深度学习教程（三） 目标检测之水果分类 - aircraft - 博客园</a></p>
<p>&nbsp;　　</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>深度学习教程目录如下，还在继续更新完善中</p>
<p><a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/DOMLX/p/12131514.html">深度学习系列教程目录</a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;有兴趣可以多看其他的halcon教程</p>
<p>&nbsp;<a id="cb_post_title_url" class="postTitle2 vertical-middle" title="发布于 2025-03-18 17:21" href="https://www.cnblogs.com/DOMLX/p/18779348">halcon 学习教程目录</a></p>
<p>&nbsp;</p>
<p>　　　　　　　　<span style="font-size: 18px">本篇主要讲一下halcon的目标检测案例，都是halcon22版本以后才可以用的哈，没有的话记得安装。在学习之前不要有什么心理负担，要知道halcon的封装算子都是做的非常好的，所以本篇也是写的非常的简单，你们肯定看一遍就会了。要对自己有信心。</span></p>
<p><span style="font-size: 18px">虽然本文只讲了水果分类的案例，但是大家都是聪明人，把图片换一下不就是药片分类，球分类，或者行人与汽车自行车分类或者各种其他分类的目标检测了嘛！！！还有在工业里怎么用呢，以LED/半导体的晶圆片举例，不就是把一个个晶圆区域图先裁剪好，然后一个个去把图上的缺陷区域去标注出来吗？？？</span></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250330151551337-648343637.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">（这里要注意了目标检测的想要好的效果，数据量还是需要比较多的，没有专门的标注训练员工还是不要这样玩哈，halcon的深度学习教程一里的分类倒是数据量会少一点点几百张图可能就有个相对的结果可以用用了）</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">示例程序如下图，参考博客：https://blog.csdn.net/qq_41373415/article/details/115906517?spm=1001.2014.3001.5502</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">demo案例代码的百度云下载链接（代码我做了详细处理，下了改一行你们自己路径的代码就可以直接跑噢）：</span></p>
<p><span style="font-size: 18px">链接：https://pan.baidu.com/s/1dHS_iObY8uHUIIu0czCdVw?pwd=sf7n </span><br><span style="font-size: 18px">提取码：sf7n</span></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250330133935024-1268354902.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">halcon深度学习目标检测的步骤总结一下就是 ： 创建目标检测模型，相关数据和预处理，训练模型，评估模型，验证模型。</span></p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 18pt">一.预备准备</span></strong></p>
<p><span style="font-size: 18px">首先就是要在补充点深度学习的参数知识（更多的你们再去百度一下哈，写不下了hhh）：</span></p>
<h3><span style="font-size: 18px">一、核心评估指标</span></h3>
<ol>
<li>
<p><span style="font-size: 18px">​<strong>精确率（Precision）​</strong></span></p>
<ul>
<li><span style="font-size: 18px">​<strong>公式</strong>：<code>TP / (TP + FP)</code></span></li>
<li><span style="font-size: 18px">​<strong>解释</strong>：预测为正的样本中，有多少是真正的正样本</span></li>
<li><span style="font-size: 18px">​<strong>场景</strong>：在药品缺陷检测中，精确率高意味着系统标记的缺陷区域大部分真实存在缺陷（减少误报）</span></li>



</ul>



</li>
<li>
<p>​<strong>召回率（Recall）​</strong></p>
<ul>
<li>​<span style="font-size: 18px"><strong>公式</strong>：<code>TP / (TP + FN)</code></span></li>
<li><span style="font-size: 18px">​<strong>解释</strong>：真正的正样本中，有多少被正确识别</span></li>
<li><span style="font-size: 18px">​<strong>场景</strong>：在安全检测中，召回率高意味着系统能捕捉到绝大多数潜在危险品（减少漏检）</span></li>



</ul>



</li>
<li>
<p>​<strong>F1 Score</strong></p>
<ul>
<li>​<span style="font-size: 18px"><strong>公式</strong>：<code>2 * (Precision * Recall) / (Precision + Recall)</code></span></li>
<li><span style="font-size: 18px">​<strong>作用</strong>：平衡精确率和召回率的综合指标，适用于类别不平衡的场景</span></li>



</ul>



</li>
<li>
<p><span style="font-size: 18px">​<strong>mAP（mean Average Precision）​</strong></span></p>
<ul>
<li><span style="font-size: 18px">​<strong>定义</strong>：多个IoU阈值下平均精度的均值（目标检测核心指标）</span></li>
<li><span style="font-size: 18px">​<strong>计算</strong>：对每个类别计算AP（Precision-Recall曲线下面积），再取平均</span></li>
<li><span style="font-size: 18px">​<strong>场景</strong>：评估模型在药品包装检测中，对不同大小、位置缺陷的综合识别能力</span></li>



</ul>



</li>



</ol>
<h3>&nbsp;</h3>
<p><span style="font-size: 18px"><strong>mAP（平均AP）这里单独拿出来讲一下</strong></span></p>
<h3><span style="font-size: 16px">平均AP（mean Average Precision，mAP）详解</span></h3>
<p><span style="font-size: 16px">平均AP（mean Average Precision，简称mAP）是目标检测和图像分类任务中<strong>最核心的评估指标</strong>，用于衡量模型在不同类别上的综合检测能力。其核心思想是计算所有类别的平均精度（AP）后取均值，反映模型在“定位”和“分类”双重任务中的整体性能。</span></p>
<h4><span style="font-size: 16px">一、核心概念拆解</span></h4>
<ol><ol>
<li>
<p>​<strong>AP（Average Precision）单类别平均精度</strong></p>
<ul>
<li><span style="font-size: 16px">​<strong>定义</strong>：针对某一类别的检测结果，计算其在不同召回率（Recall）下的平均精度（Precision）。</span></li>
<li><span style="font-size: 16px">​<strong>计算步骤</strong>：</span><ol>
<li><span style="font-size: 16px">按置信度从高到低排序该类别的所有预测框。</span></li>
<li><span style="font-size: 16px">计算每个预测框的Precision和Recall，绘制PR曲线（Precision-Recall Curve）。</span></li>
<li><span style="font-size: 16px">AP = PR曲线下的面积（AUC）。</span></li>



</ol></li>





</ul>





</li>
<li>
<p>​<strong>mAP（mean Average Precision）多类别平均精度</strong></p>
<ul>
<li><span style="font-size: 16px">​<strong>定义</strong>：所有类别的AP值取平均。</span></li>
<li><span style="font-size: 16px">​<strong>公式</strong>：&nbsp;</span></li>




</ul>




</li>




</ol></ol>
<p><span style="font-size: 16px"><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250330144455928-955592870.png" alt="" loading="lazy"></span></p>
<p><span style="font-size: 16px">&nbsp;其中 <span class="katex"><span class="strut"><span class="mord mathnormal">N 为类别总数，<span class="katex"><span class="strut"><span class="mord mathnormal">A<span class="mord"><span class="mord mathnormal">P<span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i<span class="vlist-s">​<span class="vlist-r"><span class="vlist"> 为第 <span class="katex"><span class="strut"><span class="mord mathnormal">i 类的AP值。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<h4><span style="font-size: 16px">二、具体计算过程（以目标检测为例）</span></h4>
<p><span style="font-size: 16px">假设数据集中包含 ​<strong>3类物体</strong>：药片（Pill）、药盒（Box）、缺陷（Defect）。</span></p>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 16px">类别</span></th><th><span style="font-size: 16px">AP值</span></th></tr>



</thead>
<tbody>
<tr>
<td><span style="font-size: 16px">药片</span></td>
<td><span style="font-size: 16px">0.90</span></td>



</tr>
<tr>
<td><span style="font-size: 16px">药盒</span></td>
<td><span style="font-size: 16px">0.85</span></td>



</tr>
<tr>
<td><span style="font-size: 16px">缺陷</span></td>
<td><span style="font-size: 16px">0.75</span></td>



</tr>



</tbody>



</table>



</div>
<p><span style="font-size: 16px">则 ​<strong>mAP = (0.90 + 0.85 + 0.75) / 3 = 0.83</strong></span></p>
<h4><span style="font-size: 16px">三、关键影响因素</span></h4>
<ol>
<li>
<p>​<strong>IoU（Intersection over Union）阈值</strong></p>
<ul>
<li><span style="font-size: 16px">​<strong>定义</strong>：预测框与真实框的重叠面积占比，阈值越高要求越严格。</span></li>
<li><span style="font-size: 16px">​<strong>常见设定</strong>：</span>
<ul>
<li><span style="font-size: 16px">​<strong>mAP@0.5</strong>：IoU阈值为0.5（PASCAL VOC标准）。</span></li>
<li><span style="font-size: 16px">​<strong>mAP@0.5:0.95</strong>：IoU从0.5到0.95，每隔0.05计算一次AP后取平均（COCO标准）。</span></li>



</ul>



</li>



</ul>



</li>
<li>
<p>​<strong>置信度阈值（Confidence Threshold）​</strong></p>
<ul>
<li><span style="font-size: 16px">高于此阈值的预测框才会被保留，直接影响召回率和精确率。</span></li>



</ul>



</li>
<li>
<p>​<strong>数据分布</strong></p>
<ul>
<li><span style="font-size: 16px">若某类别样本极少（如缺陷），其AP值可能偏低，导致整体mAP下降。</span></li>



</ul>



</li>



</ol>
<h4><span style="font-size: 16px">四、mAP在工业检测中的应用场景</span></h4>
<ol>
<li>
<p>​<strong>模型选型</strong></p>
<ul>
<li><span style="font-size: 16px">对比不同模型（如YOLOv5 vs. Faster R-CNN）的mAP值，选择最适合当前任务的架构。</span></li>



</ul>



</li>
<li>
<p>​<strong>调参依据</strong></p>
<ul>
<li><span style="font-size: 16px">通过提升mAP优化模型：&nbsp;</span></li>



</ul>



</li>



</ol>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">*<span style="color: rgba(0, 0, 0, 1)"> 调整锚框比例（aspect_ratios）适配小物体检测
set_dict_tuple (DLModelDetectionParam, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">aspect_ratios</span><span style="color: rgba(128, 0, 0, 1)">'</span>, [<span style="color: rgba(128, 0, 128, 1)">0.5</span>, <span style="color: rgba(128, 0, 128, 1)">1.0</span>, <span style="color: rgba(128, 0, 128, 1)">2.0</span><span style="color: rgba(0, 0, 0, 1)">])
</span>*<span style="color: rgba(0, 0, 0, 1)"> 增加数据增强提升小样本类别AP
set_preprocess_param (DLPreprocessParam, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">augmentation</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">rotation_30</span><span style="color: rgba(128, 0, 0, 1)">'</span>)</span></pre>
</div>
<p><span style="font-size: 16px"><strong>质量验收标准</strong></span></p>
<ul>
<li><span style="font-size: 16px">设定mAP阈值作为模型上线的门槛（如mAP@0.5 ≥ 0.85）。</span></li>
</ul>
<h4><span style="font-size: 16px">五、与Accuracy的区别</span></h4>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 16px">指标</span></th><th><span style="font-size: 16px">适用场景</span></th><th><span style="font-size: 16px">优缺点</span></th></tr>
</thead>
<tbody>
<tr>
<td><span style="font-size: 16px">​<strong>mAP</strong></span></td>
<td><span style="font-size: 16px">目标检测</span></td>
<td><span style="font-size: 16px">综合反映定位和分类能力，适合多类别</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​<strong>Accuracy</strong></span></td>
<td><span style="font-size: 16px">分类任务</span></td>
<td><span style="font-size: 16px">无法处理定位问题，对类别不平衡敏感</span></td>
</tr>
</tbody>
</table>
</div>
<h4><span style="font-size: 16px">六、实际案例：药品包装检测报告</span></h4>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 16px">缺陷类型</span></th><th><span style="font-size: 16px">AP@0.5</span></th><th><span style="font-size: 16px">AP@0.75</span></th><th><span style="font-size: 16px">主要错误类型</span></th></tr>
</thead>
<tbody>
<tr>
<td><span style="font-size: 16px">印刷模糊</span></td>
<td><span style="font-size: 16px">0.92</span></td>
<td><span style="font-size: 16px">0.85</span></td>
<td><span style="font-size: 16px">误检背景纹理为缺陷</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">包装破损</span></td>
<td><span style="font-size: 16px">0.88</span></td>
<td><span style="font-size: 16px">0.78</span></td>
<td><span style="font-size: 16px">小尺寸破损漏检</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">密封不严</span></td>
<td><span style="font-size: 16px">0.80</span></td>
<td><span style="font-size: 16px">0.65</span></td>
<td><span style="font-size: 16px">光照反光导致误判</span></td>
</tr>
</tbody>
</table>
</div>
<ul>
<li><span style="font-size: 16px">​<strong>全局mAP@0.5 = 0.87</strong> → 模型达到上线标准</span></li>
<li><span style="font-size: 16px">​<strong>优化方向</strong>：针对密封不严类别增加侧面光照样本训练。</span></li>
</ul>
<p><span style="font-size: 16px">通过理解mAP，开发者可精准定位模型弱点（如特定类别AP低），针对性优化数据或模型结构，在工业检测场景中实现高效可靠的质量控制。</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3><span style="font-size: 18px">二、训练过程参数</span></h3>
<ol start="5">
<li>
<p>​<strong>学习率（Learning Rate）​</strong></p>
<ul>
<li><span style="font-size: 18px">​<strong>作用</strong>：控制参数更新的步长</span></li>
<li><span style="font-size: 18px">​<strong>示例</strong>：<code>0.001</code>（常用初始值），过高导致震荡，过低收敛慢</span></li>
<li><span style="font-size: 18px">​<strong>调整策略</strong>：学习率衰减（如每10个epoch减少50%）</span></li>
</ul>
</li>
<li>
<p>​<strong>批次大小（Batch Size）​</strong></p>
<ul>
<li>​<span style="font-size: 18px"><strong>影响</strong>：</span>
<ul>
<li><span style="font-size: 18px">小批量（如16）：更频繁更新，适合小显存</span></li>
<li><span style="font-size: 18px">大批量（如128）：训练稳定，适合分布式训练</span></li>
</ul>
</li>
<li><span style="font-size: 18px">​<strong>场景</strong>：在工业检测中，若图像分辨率高（如4096x4096），需减小batch size防止显存溢出</span></li>
</ul>
</li>
<li>
<p>​<strong>Epoch</strong></p>
<ul>
<li>​<span style="font-size: 18px"><strong>定义</strong>：完整遍历一次训练集的迭代次数</span></li>
<li><span style="font-size: 18px">​<strong>选择原则</strong>：早停法（当验证集损失不再下降时停止）</span></li>
</ul>
</li>
</ol>
<h3><span style="font-size: 18px">三、模型结构相关</span></h3>
<ol start="8">
<li>
<p>​<strong>Anchor Boxes</strong></p>
<ul>
<li><span style="font-size: 18px">​<strong>作用</strong>：预设的边界框模板，用于生成候选区域</span></li>
<li><span style="font-size: 18px">​<strong>参数示例</strong>：</span>
<div class="hyc-common-markdown__code">
<div class="hyc-common-markdown__code__hd">
<div class="hyc-common-markdown__code__hd__inner">
<div class="hyc-common-markdown__code__hd__l"><span style="font-size: 18px">python</span></div>
<div class="hyc-common-markdown__code__hd__r"><span style="font-size: 18px">&nbsp;</span></div>
</div>
</div>
</div>
</li>
</ul>
</li>
</ol><ol start="8">
<li>
<ul>
<li>
<div class="hyc-common-markdown__code">
<div class="cnblogs_code">
<pre><span style="font-size: 18px">AspectRatios := [<span style="color: rgba(128, 0, 128, 1)">1.0</span>, <span style="color: rgba(128, 0, 128, 1)">0.5</span>, <span style="color: rgba(128, 0, 128, 1)">2.0</span>]  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 宽高比（正方形、高窄框、宽扁框）</span>
NumSubscales := <span style="color: rgba(128, 0, 128, 1)">3</span>        </span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 缩放级别数</span></pre>
</div>
<p>&nbsp;</p>
<pre class="hyc-common-markdown__code-lan"><span style="font-size: 18px"><code class="language-python">&nbsp;</code></span></pre>
</div>
</li>
<li><span style="font-size: 18px">​<strong>场景</strong>：检测药片时，设置适合圆形物体的宽高比（如1:1）</span></li>
</ul>
</li>
<li>
<p>​<strong>IoU（Intersection over Union）​</strong></p>
<ul>
<li><span style="font-size: 18px">​<strong>公式</strong>：两个框的交集面积 / 并集面积</span></li>
<li><span style="font-size: 18px">​<strong>用途</strong>：判断预测框与真实框的重合程度，阈值常设为0.5</span></li>
</ul>
</li>
<li>
<p>​<strong>NMS（非极大值抑制）​</strong></p>
<ul>
<li>​<span style="font-size: 18px"><strong>作用</strong>：去除冗余检测框，保留置信度最高的预测</span></li>
<li><span style="font-size: 18px">​<strong>参数</strong>：<code>NMS阈值</code>（如0.3），高于此值的重叠框将被抑制</span></li>
</ul>
</li>
</ol>
<h3><span style="font-size: 18px">四、正则化与优化</span></h3>
<ol start="11">
<li>
<p>​<strong>Dropout</strong></p>
<ul>
<li>​<span style="font-size: 18px"><strong>作用</strong>：随机丢弃神经元，防止过拟合</span></li>
<li><span style="font-size: 18px">​<strong>参数</strong>：<code>丢弃率</code>（如0.5），训练时生效，推理时关闭</span></li>
</ul>
</li>
<li>
<p>​<strong>L2正则化</strong></p>
<ul>
<li><span style="font-size: 18px">​<strong>公式</strong>：损失函数中增加 <code>λ * ||权重||²</code></span></li>
<li><span style="font-size: 18px">​<strong>效果</strong>：限制权重过大，提升泛化能力</span></li>
</ul>
</li>
<li>
<p>​<strong>优化器</strong></p>
<ul>
<li><span style="font-size: 18px">​<strong>Adam</strong>：自适应学习率，适合大多数场景（默认参数β1=0.9, β2=0.999）</span></li>
<li><span style="font-size: 18px">​<strong>SGD</strong>：需手动调学习率，配合动量（如0.9）可加速收敛</span></li>
</ul>
</li>
</ol>
<h3><span style="font-size: 18px">五、数据相关</span></h3>
<ol start="14">
<li>
<p>​<strong>数据增强（Data Augmentation）​</strong></p>
<ul>
<li>​<span style="font-size: 18px"><strong>方法</strong>：旋转（±15°）、缩放（0.8-1.2倍）、平移、颜色抖动</span></li>
<li><span style="font-size: 18px">​<strong>场景</strong>：在药品检测中，模拟不同光照条件下的包装缺陷</span></li>
</ul>
</li>
<li>
<p>​<strong>迁移学习（Transfer Learning）​</strong></p>
<ul>
<li><span style="font-size: 18px">​<strong>策略</strong>：使用预训练模型（如ResNet）的权重初始化，仅微调最后几层</span></li>
<li><span style="font-size: 18px">​<strong>优势</strong>：在小样本（如1000张缺陷图）场景下快速收敛</span></li>
</ul>
</li>
</ol>
<h3><span style="font-size: 18px">六、理解精确率和召回率的意思</span></h3>
<div class="cnblogs_code">
<pre><span style="font-size: 18px">*<span style="color: rgba(0, 0, 0, 1)"> 假设药片检测结果：
</span>* TP（真正）: <span style="color: rgba(128, 0, 128, 1)">90</span><span style="color: rgba(0, 0, 0, 1)">（正确识别有缺陷的药片）
</span>* FP（假正）: <span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">（将正常药片误判为缺陷）
</span>* FN（假负）: <span style="color: rgba(128, 0, 128, 1)">5</span><span style="color: rgba(0, 0, 0, 1)">（漏检的缺陷药片）

精确率 </span>= <span style="color: rgba(128, 0, 128, 1)">90</span> / (<span style="color: rgba(128, 0, 128, 1)">90</span>+<span style="color: rgba(128, 0, 128, 1)">10</span>) = <span style="color: rgba(128, 0, 128, 1)">90</span>%<span style="color: rgba(0, 0, 0, 1)">  
召回率 </span>= <span style="color: rgba(128, 0, 128, 1)">90</span> / (<span style="color: rgba(128, 0, 128, 1)">90</span>+<span style="color: rgba(128, 0, 128, 1)">5</span>) = <span style="color: rgba(128, 0, 128, 1)">94.7</span>%<span style="color: rgba(0, 0, 0, 1)">  
F1 </span>= <span style="color: rgba(128, 0, 128, 1)">2</span>*(<span style="color: rgba(128, 0, 128, 1)">0.9</span> * <span style="color: rgba(128, 0, 128, 1)">0.947</span>)/(<span style="color: rgba(128, 0, 128, 1)">0.9</span>+<span style="color: rgba(128, 0, 128, 1)">0.947</span>) ≈ <span style="color: rgba(128, 0, 128, 1)">92.3</span>%</span></pre>
</div>
<h3>F1 Score 详细解释</h3>
<h4><span style="font-size: 18px">1. ​<strong>基本定义</strong></span></h4>
<p><span style="font-size: 18px"><strong>F1 Score</strong> 是综合评估模型性能的核心指标，专门用于平衡<strong>精确率（Precision）​</strong>和<strong>召回率（Recall）​</strong>之间的矛盾。它通过两者的<strong>调和平均数</strong>，帮助判断模型在“不漏检”和“不误报”之间的综合表现。</span></p>
<h4><span style="font-size: 18px">2. ​<strong>计算公式</strong></span></h4>
<p><span style="font-size: 18px"><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250330140144957-1069444964.png" alt="" loading="lazy"></span></p>
<p><span style="font-size: 18px">&nbsp;<strong>调和平均数特性</strong>：更注重两者中较低的值。</span><br><span style="font-size: 18px">
<em>例如：若 Precision=0.9，Recall=0.1，F1≈0.18（接近较差值）</em></span></p>
<h4><span style="font-size: 18px">3. ​<strong>为什么需要F1？</strong></span></h4>
<ul>
<li><span style="font-size: 18px">​<strong>场景矛盾</strong>：​<strong>实际需求</strong>：多数任务需平衡两者（如医疗诊断既不能漏掉患者，也不能误诊健康人）。</span>
<ul>
<li>高精确率 = 严格模型（宁可漏检，也不错报）</li>
<li>高召回率 = 宽松模型（宁可错报，也不漏检）</li>



</ul>



</li>
<li></li>
<li>
<ul>
<li><span style="font-size: 18px"><strong>F1接近1（如0.95）​</strong>：模型在精确率和召回率间达到完美平衡。</span></li>
<li><span style="font-size: 18px">​<strong>F1较低（如0.6）​</strong>：需检查是 Precision 还是 Recall 拖后腿：</span>
<ul>
<li><span style="font-size: 18px">若 Precision 低 → 模型误报多（优化分类阈值或减少FP）。</span></li>
<li><span style="font-size: 18px">若 Recall 低 → 模型漏检多（调整Anchor尺寸或增强特征提取）。</span></li>



</ul>



</li>



</ul>



</li>



</ul>
<h4><span style="font-size: 18px">4. ​<strong>应用场景</strong></span></h4>
<ul>
<ul>
<li><span style="font-size: 18px">​<strong>类别不平衡任务</strong>：如缺陷检测（缺陷样本远少于正常样本）。</span></li>
<li><span style="font-size: 18px">​<strong>多类别比较</strong>：计算每个类别的F1后取平均（宏平均/Macro-F1）。</span></li>
<li><span style="font-size: 18px">​<strong>Halcon中的使用</strong>：</span><br><span style="font-size: 18px">
调用 <code>evaluate_dl_model</code> 后，可通过输出的 <code>EvaluationResult</code> 字典查看各类别F1值。</span></li>




</ul>



</ul>
<h4><span style="font-size: 18px">5. ​<strong>与准确率（Accuracy）的区别</strong></span></h4>
<ul>
<li><span style="font-size: 18px">​<strong>Accuracy</strong> = (TP+TN)/(TP+TN+FP+FN)​<strong>F1</strong>：更适用于关注少数类（如缺陷）的场景。</span>
<ul>
<li>问题：在数据不平衡时失效（如99%正常品+1%缺陷品，全预测正常Accuracy=99%但Recall=0）。</li>



</ul>



</li>
<li></li>



</ul>
<h3><span style="font-size: 18px">七、参数调优建议</span></h3>
<ol>
<li><span style="font-size: 18px">​<strong>高精确率低召回</strong>：模型保守，需降低分类阈值</span></li>
<li><span style="font-size: 18px">​<strong>低精确率高召回</strong>：模型激进，需提高阈值或增加FP惩罚</span></li>
<li><span style="font-size: 18px">​<strong>目标检测调参优先级</strong>：</span>
<ul>
<li><span style="font-size: 18px">先调Anchor比例（匹配物体形状）</span></li>
<li><span style="font-size: 18px">再调学习率和数据增强策略</span></li>
<li><span style="font-size: 18px">最后优化NMS和置信度阈值</span></li>



</ul>



</li>



</ol>
<p><span style="font-size: 18px">掌握这些概念后，再结合Halcon的<code>evaluate_dl_model</code>输出结果，可快速定位模型问题并优化参数。</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">然后就是要知道我们的环境是halcon22版本以后的，还要下载一下halcon的深度学习标注训练工具（记得选中文语言的设置比较好看哦）：<a href="https://blog.csdn.net/W9XM96/article/details/130025393" target="_blank" rel="noopener nofollow">Deep Learning tool</a></span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">打开软件，我们直接选择对象检测（也就是目标检测的意思），里面的分类，OCR,实例分割都可以用起来，我其他深度学习教程里也是用这个工具测试训练评估查看的。</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250330134454155-450461943.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>左上角按钮里倒入我项目里的数据集（或者直接导入images里的水果图像，然后一个个打上标签，在导出数据集，注意导出的数据集如果已经拆分，代码里就不要用拆分算子了）：</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250330134611593-1697196688.png" alt="" loading="lazy"></p>
<p><span style="font-size: 18px">&nbsp;路径记得改自己目录的</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250330134741119-407926229.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250330134806206-1361492552.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>然后可以到图像那边去看看怎么标注的，就是新建几个标签，然后框选目标物体，打上标签就可以了</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250330134832306-636918106.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">这里要注意的是，不要乱打标签，像这里给苹果打了三个矩形框的标签，一个是标准的只把苹果框选，留白的区域很少，一个框选很大，很多无关的区域，一个框选半个苹果。这样打标签你以为是增加了数据量，其实这样会让神经网络错误的学习到了其他数据，导致你的召回率降低。</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250330135030705-1849293352.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">然后到检查那边去检查一下标注</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250330135250792-1680413472.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">后面的拆分，训练，评估和导出模型可以自己玩一下（因为halcon代码里有后续的部分这里就不搞后面的），我都玩了好久各种参数乱改去测试结果的变化。</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250330135429016-815936329.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">最后就是左上角导出数据集了，路径记得改自己的哈</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250330140500938-1350389243.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">后面训练出来的模型去测试图片会给出每个对象的分数，我们自己用在自己的项目里就可以设置分数阈值比如大于0.8我就认为你预测的没有问题，分数多好还是要根据自己的模型的好坏来设置哈</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250330140835767-1551635802.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt"><strong>二.相关算子学习</strong></span></p>
<p><strong><span style="font-size: 18px">1.创建目标检测模型算子create_dl_model_detection( : : Backbone, NumClasses, DLModelDetectionParam : DLModelHandle)详解：</span></strong></p>
<p>&nbsp;</p>
<h4><span style="font-size: 16px">功能描述</span></h4>
<p>&nbsp;</p>
<p><span style="font-size: 16px"><code>create_dl_model_detection</code> 用于在Halcon中创建一个基于深度学习的目标检测模型。该函数通过组合预训练的主干网络（Backbone）与自定义的检测头（Detection Head），构建一个完整的检测模型架构，适用于工业检测、物体识别等场景。</span></p>
<p>&nbsp;</p>
<h4><span style="font-size: 16px">参数说明</span></h4>
<p>&nbsp;</p>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 16px">参数名</span></th><th><span style="font-size: 16px">类型</span></th><th><span style="font-size: 16px">描述</span></th><th><span style="font-size: 16px">示例值</span></th></tr>



</thead>
<tbody>
<tr>
<td><span style="font-size: 16px">​<strong>Backbone</strong></span></td>
<td><span style="font-size: 16px">字符串</span></td>
<td><span style="font-size: 16px">预训练主干模型文件路径（.hdl格式），提供基础特征提取能力</span></td>
<td><span style="font-size: 16px">'pretrained_dl_classifier_compact.hdl'</span></td>



</tr>
<tr>
<td><span style="font-size: 16px">​<strong>NumClasses</strong></span></td>
<td><span style="font-size: 16px">整型</span></td>
<td><span style="font-size: 16px">待检测的物体类别数量（不包含背景类）</span></td>
<td><span style="font-size: 16px">6</span></td>



</tr>
<tr>
<td><span style="font-size: 16px">​<strong>DLModelDetectionParam</strong></span></td>
<td><span style="font-size: 16px">字典</span></td>
<td><span style="font-size: 16px">包含模型配置参数的字典，定义输入尺寸、锚框参数等</span></td>
<td><span style="font-size: 16px">见下方参数字典配置</span></td>



</tr>
<tr>
<td><span style="font-size: 16px">​<strong>DLModelHandle</strong></span></td>
<td><span style="font-size: 16px">模型句柄</span></td>
<td><span style="font-size: 16px">输出参数，生成的检测模型句柄，用于后续训练、推理等操作</span></td>
<td><span style="font-size: 16px">-</span></td>



</tr>



</tbody>



</table>



</div>
<p>&nbsp;</p>
<h4><span style="font-size: 16px">参数字典（DLModelDetectionParam）配置项</span></h4>
<p>&nbsp;</p>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 16px">键名</span></th><th><span style="font-size: 16px">类型</span></th><th><span style="font-size: 16px">必选</span></th><th><span style="font-size: 16px">描述</span></th><th><span style="font-size: 16px">示例值</span></th><th><span style="font-size: 16px">默认值（若有）</span></th></tr>



</thead>
<tbody>
<tr>
<td><span style="font-size: 16px">​<strong>image_width</strong></span></td>
<td><span style="font-size: 16px">整型</span></td>
<td><span style="font-size: 16px">是</span></td>
<td><span style="font-size: 16px">输入图像的宽度（像素），需与预处理尺寸一致</span></td>
<td><span style="font-size: 16px">512</span></td>
<td><span style="font-size: 16px">无</span></td>



</tr>
<tr>
<td><span style="font-size: 16px">​<strong>image_height</strong></span></td>
<td><span style="font-size: 16px">整型</span></td>
<td><span style="font-size: 16px">是</span></td>
<td><span style="font-size: 16px">输入图像的高度（像素）</span></td>
<td><span style="font-size: 16px">320</span></td>
<td><span style="font-size: 16px">无</span></td>



</tr>
<tr>
<td><span style="font-size: 16px">​<strong>image_num_channels</strong></span></td>
<td><span style="font-size: 16px">整型</span></td>
<td><span style="font-size: 16px">是</span></td>
<td><span style="font-size: 16px">输入图像的通道数（3表示RGB，1表示灰度）</span></td>
<td><span style="font-size: 16px">3</span></td>
<td><span style="font-size: 16px">无</span></td>



</tr>
<tr>
<td><span style="font-size: 16px">​<strong>min_level</strong></span></td>
<td><span style="font-size: 16px">整型</span></td>
<td><span style="font-size: 16px">是</span></td>
<td><span style="font-size: 16px">特征金字塔网络（FPN）中的最小层级，用于检测大物体（值越大特征图越小）</span></td>
<td><span style="font-size: 16px">2</span></td>
<td><span style="font-size: 16px">无</span></td>



</tr>
<tr>
<td><span style="font-size: 16px">​<strong>max_level</strong></span></td>
<td><span style="font-size: 16px">整型</span></td>
<td><span style="font-size: 16px">是</span></td>
<td><span style="font-size: 16px">特征金字塔网络中的最大层级，用于检测小物体</span></td>
<td><span style="font-size: 16px">4</span></td>
<td><span style="font-size: 16px">无</span></td>



</tr>
<tr>
<td><span style="font-size: 16px">​<strong>num_subscales</strong></span></td>
<td><span style="font-size: 16px">整型</span></td>
<td><span style="font-size: 16px">是</span></td>
<td><span style="font-size: 16px">每个特征层级上的锚框（Anchor）缩放级别数</span></td>
<td><span style="font-size: 16px">3</span></td>
<td><span style="font-size: 16px">无</span></td>



</tr>
<tr>
<td><span style="font-size: 16px">​<strong>aspect_ratios</strong></span></td>
<td><span style="font-size: 16px">浮点数组</span></td>
<td><span style="font-size: 16px">是</span></td>
<td><span style="font-size: 16px">锚框的宽高比配置（如[1.0, 0.5, 2.0]表示1:1、1:2、2:1三种比例）</span></td>
<td><span style="font-size: 16px">[1.0, 0.5, 2.0]</span></td>
<td><span style="font-size: 16px">无</span></td>



</tr>
<tr>
<td><span style="font-size: 16px">​<strong>capacity</strong></span></td>
<td><span style="font-size: 16px">字符串</span></td>
<td><span style="font-size: 16px">否</span></td>
<td><span style="font-size: 16px">模型容量级别（'light'、'medium'、'high'），控制网络宽度/深度，影响速度与精度</span></td>
<td><span style="font-size: 16px">'medium'</span></td>



</tr>



</tbody>



</table>



</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4><span style="font-size: 16px">使用示例</span></h4>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">*<span style="color: rgba(0, 0, 0, 1)"> 步骤1：定义模型参数
Backbone :</span>= <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">pretrained_dl_classifier_compact.hdl</span><span style="color: rgba(128, 0, 0, 1)">'</span>  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 预训练主干模型</span>
NumClasses := <span style="color: rgba(128, 0, 128, 1)">6</span>                                     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 检测6类物体</span>

*<span style="color: rgba(0, 0, 0, 1)"> 步骤2：创建参数字典
create_dict (DLModelDetectionParam)
set_dict_tuple (DLModelDetectionParam, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image_width</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">512</span><span style="color: rgba(0, 0, 0, 1)">)
set_dict_tuple (DLModelDetectionParam, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image_height</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">320</span><span style="color: rgba(0, 0, 0, 1)">)
set_dict_tuple (DLModelDetectionParam, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image_num_channels</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">)
set_dict_tuple (DLModelDetectionParam, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">min_level</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">)
set_dict_tuple (DLModelDetectionParam, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">max_level</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">)
set_dict_tuple (DLModelDetectionParam, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">num_subscales</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">)
set_dict_tuple (DLModelDetectionParam, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">aspect_ratios</span><span style="color: rgba(128, 0, 0, 1)">'</span>, [<span style="color: rgba(128, 0, 128, 1)">1.0</span>,<span style="color: rgba(128, 0, 128, 1)">0.5</span>,<span style="color: rgba(128, 0, 128, 1)">2.0</span><span style="color: rgba(0, 0, 0, 1)">])
set_dict_tuple (DLModelDetectionParam, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">capacity</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">medium</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 步骤3：创建检测模型
create_dl_model_detection (Backbone, NumClasses, DLModelDetectionParam, DLModelHandle)</span></span></pre>
</div>
<p>&nbsp;</p>
<h4><span style="font-size: 16px">关键概念解析</span></h4>
<ol><ol>
<li>
<p>​<strong>主干网络（Backbone）​</strong></p>
<ul>
<li>作用：提取图像特征，通常为预训练的卷积神经网络（如ResNet、MobileNet）。</li>
<li>选择建议：
<ul>
<li>高精度场景 → ResNet50</li>
<li>实时检测 → MobileNetV3</li>
</ul>
</li>
</ul>
</li>
<li>
<p>​<strong>特征金字塔（FPN）​</strong></p>
<ul>
<li>​<strong>min_level/max_level</strong>：
<ul>
<li>层级越低（如2），特征图越大，适合检测大物体（如药盒包装）。</li>
<li>层级越高（如5），特征图越小，适合检测小物体（如药片表面划痕）。</li>
</ul>
</li>
<li>示例配置：<code>min_level=2</code>, <code>max_level=4</code> 表示使用第2、3、4层特征图。</li>
</ul>
</li>
<li>
<p>​<strong>锚框（Anchor Boxes）​</strong></p>
<ul>
<li>​<strong>num_subscales</strong>：每个层级上的缩放系数数量（如3种尺寸）。</li>
<li>​<strong>aspect_ratios</strong>：锚框形状比例，需根据目标物体调整。</li>
<li>计算示例：<br>
若某特征图位置生成3种缩放尺寸 × 3种宽高比 → 共9个锚框。</li>





</ul>





</li>




</ol></ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4><span style="font-size: 16px">常见问题与解决方案</span></h4>
<p>&nbsp;</p>
<ol>
<li>
<p>​<strong>错误：Invalid backbone model</strong></p>
<ul>
<li><span style="font-size: 16px">​<strong>原因</strong>：<code>Backbone</code>文件路径错误或格式不支持。</span></li>
<li><span style="font-size: 16px">​<strong>解决</strong>：</span>
<ul>
<li><span style="font-size: 16px">检查文件路径是否存在，扩展名是否为<code>.hdl</code>。</span></li>
<li><span style="font-size: 16px">使用Halcon预训练模型或官方支持的转换工具生成模型。</span></li>



</ul>



</li>



</ul>



</li>
<li>
<p>​<strong>训练时报错维度不匹配</strong></p>
<ul>
<li>​<span style="font-size: 16px"><strong>可能原因</strong>：</span>
<ul>
<li><span style="font-size: 16px"><code>NumClasses</code>与实际标注类别数不一致。</span></li>
<li><span style="font-size: 16px">输入图像尺寸与<code>image_width</code>/<code>image_height</code>不符。</span></li>



</ul>



</li>
<li><span style="font-size: 16px">​<strong>验证步骤</strong>：</span>
<ul>
<li><span style="font-size: 16px">检查数据集标注文件中的类别ID范围。</span></li>
<li><span style="font-size: 16px">确保预处理后的图像尺寸与模型参数一致。</span></li>



</ul>



</li>



</ul>



</li>
<li>
<p>​<strong>检测小物体效果差</strong></p>
<ul>
<li>​<span style="font-size: 16px"><strong>优化方向</strong>：</span>
<ul>
<li><span style="font-size: 16px">提高<code>max_level</code>（如从4→5）以利用更高层特征。</span></li>
<li><span style="font-size: 16px">增加小尺寸锚框的比例（调整<code>aspect_ratios</code>和<code>num_subscales</code>）。</span></li>



</ul>



</li>



</ul>



</li>



</ol>
<p>&nbsp;</p>
<h4><span style="font-size: 16px">高级配置建议</span></h4>
<p>&nbsp;</p>
<ul>
<li><span style="font-size: 16px">​<strong>多尺度训练</strong>：在参数字典中添加<code>multiscale_training: 'true'</code>，增强模型对不同尺寸物体的适应性。</span></li>
<li><span style="font-size: 16px">​<strong>自定义锚框</strong>：通过<code>get_anchor_dims</code>分析训练集标注，生成适配数据集的锚框参数。</span></li>
<li><span style="font-size: 16px">​<strong>混合精度训练</strong>：设置<code>set_dl_model_param (DLModelHandle, 'mixed_precision', 'true')</code>加速训练（需GPU支持）。</span></li>



</ul>
<p>&nbsp;</p>
<p><span style="font-size: 16px">通过合理配置<code>create_dl_model_detection</code>参数，可快速构建适应工业检测需求的高效目标检测模型。</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px"><strong>2.设置模型参数算子set_dl_model_param( : : DLModelHandle, GenParamName, GenParamValue : )详解：</strong></span></p>
<p>&nbsp;</p>
<h4><span style="font-size: 16px">功能描述</span></h4>
<p>&nbsp;</p>
<p><span style="font-size: 16px"><code>set_dl_model_param</code> 用于动态配置已创建的深度学习模型的参数。通过该函数，可以在模型训练或推理前调整超参数、优化策略、数据预处理设置等，是灵活控制模型行为的核心接口。</span></p>
<p>&nbsp;</p>
<h4><span style="font-size: 16px">函数原型</span></h4>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px"><span style="color: rgba(0, 0, 0, 1)">set_dl_model_param(
    DLModelHandle,    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输入：模型句柄（由 create_dl_model_* 系列函数生成）</span>
    GenParamName,     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输入：待设置的参数名（字符串或数组）</span>
    GenParamValue     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输入：参数值（类型取决于参数名）</span>
)</span></pre>
</div>
<p>&nbsp;</p>
<h3><span style="font-size: 16px">参数详解（按应用场景分类）</span></h3>
<h4><span style="font-size: 16px">一、训练过程控制参数</span></h4>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 16px">参数名</span></th><th><span style="font-size: 16px">数据类型</span></th><th><span style="font-size: 16px">作用</span></th><th><span style="font-size: 16px">示例值</span></th><th><span style="font-size: 16px">注意事项</span></th></tr>
</thead>
<tbody>
<tr>
<td><span style="font-size: 16px">​**'batch_size'**</span></td>
<td><span style="font-size: 16px">整型</span></td>
<td><span style="font-size: 16px">设置训练/推理时的批大小</span></td>
<td><span style="font-size: 16px">16</span></td>
<td><span style="font-size: 16px">需适配GPU显存（过大导致OOM）</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​**'learning_rate'**</span></td>
<td><span style="font-size: 16px">浮点型</span></td>
<td><span style="font-size: 16px">初始学习率</span></td>
<td><span style="font-size: 16px">0.001</span></td>
<td><span style="font-size: 16px">常配合学习率调度策略使用</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​**'momentum'**</span></td>
<td><span style="font-size: 16px">浮点型</span></td>
<td><span style="font-size: 16px">SGD优化器的动量参数（加速收敛）</span></td>
<td><span style="font-size: 16px">0.9</span></td>
<td><span style="font-size: 16px">仅对SGD生效</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​**'weight_prior'**</span></td>
<td><span style="font-size: 16px">浮点型</span></td>
<td><span style="font-size: 16px">分类损失权重（用于类别不平衡场景）</span></td>
<td><span style="font-size: 16px">[1.0, 2.0, 2.0]</span></td>
<td><span style="font-size: 16px">数组长度需等于类别数</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​**'epochs'**</span></td>
<td><span style="font-size: 16px">整型</span></td>
<td><span style="font-size: 16px">最大训练轮次</span></td>
<td><span style="font-size: 16px">50</span></td>
<td><span style="font-size: 16px">需配合早停法使用</span></td>
</tr>
</tbody>
</table>
</div>
<h4><span style="font-size: 16px">二、模型结构与优化</span></h4>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 16px">参数名</span></th><th><span style="font-size: 16px">数据类型</span></th><th><span style="font-size: 16px">作用</span></th><th><span style="font-size: 16px">示例值</span></th><th><span style="font-size: 16px">注意事项</span></th></tr>
</thead>
<tbody>
<tr>
<td><span style="font-size: 16px">​**'optimizer'**</span></td>
<td><span style="font-size: 16px">字符串</span></td>
<td><span style="font-size: 16px">优化器类型（'adam'、'sgd'、'rmsprop'）</span></td>
<td><span style="font-size: 16px">'adam'</span></td>
<td><span style="font-size: 16px">不同优化器需配不同参数</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​**'dropout_rate'**</span></td>
<td><span style="font-size: 16px">浮点型</span></td>
<td><span style="font-size: 16px">随机丢弃神经元的比例（防止过拟合）</span></td>
<td><span style="font-size: 16px">0.5</span></td>
<td><span style="font-size: 16px">通常在全连接层生效</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​**'l2_regularization'**</span></td>
<td><span style="font-size: 16px">浮点型</span></td>
<td><span style="font-size: 16px">L2正则化系数（控制权重复杂度）</span></td>
<td><span style="font-size: 16px">0.0001</span></td>
<td><span style="font-size: 16px">避免设置过大导致欠拟合</span></td>
</tr>
</tbody>
</table>
</div>
<h4><span style="font-size: 16px">三、推理与后处理</span></h4>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 16px">参数名</span></th><th><span style="font-size: 16px">数据类型</span></th><th><span style="font-size: 16px">作用</span></th><th><span style="font-size: 16px">示例值</span></th><th><span style="font-size: 16px">注意事项</span></th></tr>
</thead>
<tbody>
<tr>
<td><span style="font-size: 16px">​**'nms_threshold'**</span></td>
<td><span style="font-size: 16px">浮点型</span></td>
<td><span style="font-size: 16px">非极大值抑制阈值（过滤重叠框）</span></td>
<td><span style="font-size: 16px">0.3</span></td>
<td><span style="font-size: 16px">值越小保留框越少</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​**'confidence_threshold'**</span></td>
<td><span style="font-size: 16px">浮点型</span></td>
<td><span style="font-size: 16px">检测框置信度阈值（过滤低置信度预测）</span></td>
<td><span style="font-size: 16px">0.5</span></td>
<td><span style="font-size: 16px">平衡召回率与精确率</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​**'max_num_detections'**</span></td>
<td><span style="font-size: 16px">整型</span></td>
<td><span style="font-size: 16px">单图最大检测框数量（防止过多误检）</span></td>
<td><span style="font-size: 16px">100</span></td>
<td><span style="font-size: 16px">按实际场景需求调整</span></td>
</tr>
</tbody>
</table>
</div>
<h4><span style="font-size: 16px">四、硬件与性能</span></h4>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 16px">参数名</span></th><th><span style="font-size: 16px">数据类型</span></th><th><span style="font-size: 16px">作用</span></th><th><span style="font-size: 16px">示例值</span></th><th><span style="font-size: 16px">注意事项</span></th></tr>
</thead>
<tbody>
<tr>
<td><span style="font-size: 16px">​**'runtime'**</span></td>
<td><span style="font-size: 16px">字符串</span></td>
<td><span style="font-size: 16px">推理设备（'cpu'、'gpu'）</span></td>
<td><span style="font-size: 16px">'gpu'</span></td>
<td><span style="font-size: 16px">需安装对应计算库（如CUDA）</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​**'mixed_precision'**</span></td>
<td><span style="font-size: 16px">布尔型</span></td>
<td><span style="font-size: 16px">启用混合精度训练（节省显存，加速计算）</span></td>
<td><span style="font-size: 16px">'true'</span></td>
<td><span style="font-size: 16px">需GPU支持半精度运算</span></td>
</tr>
</tbody>
</table>
</div>
<h3><span style="font-size: 16px">使用示例</span></h3>
<h4><span style="font-size: 16px">场景：药品包装缺陷检测模型配置</span></h4>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">*<span style="color: rgba(0, 0, 0, 1)"> 创建模型后设置关键参数
set_dl_model_param (DLModelHandle, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">batch_size</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">8</span>)          <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 小批量适应高分辨率图像</span>
set_dl_model_param (DLModelHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">learning_rate</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">0.0005</span>)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 小学习率精细调优</span>
set_dl_model_param (DLModelHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">nms_threshold</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">0.25</span>)    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 严格过滤重叠缺陷框</span>
set_dl_model_param (DLModelHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">confidence_threshold</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">0.6</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 减少误报</span>

*<span style="color: rgba(0, 0, 0, 1)"> 设置复合参数（数组传参）
set_dl_model_param (DLModelHandle, [</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">optimizer</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">momentum</span><span style="color: rgba(128, 0, 0, 1)">'</span>], [<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">sgd</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">0.9</span><span style="color: rgba(0, 0, 0, 1)">])

</span>*<span style="color: rgba(0, 0, 0, 1)"> 启用混合精度训练（需GPU支持）
set_dl_model_param (DLModelHandle, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">mixed_precision</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span>)</span></pre>
</div>
<p>&nbsp;</p>
<h3><span style="font-size: 16px">常见问题与解决方案</span></h3>
<h4><span style="font-size: 16px">1. ​<strong>参数设置无效</strong></span></h4>
<ul>
<li><span style="font-size: 16px">​<strong>现象</strong>：修改参数后模型行为未变化</span></li>
<li><span style="font-size: 16px">​<strong>排查</strong>：</span>
<ul>
<li>检查参数名拼写（区分大小写，如<code>'batch_size'</code> vs <code>'BatchSize'</code>）。</li>
<li>确认参数是否在模型当前阶段生效（例如某些参数仅在训练时生效）。</li>
</ul>
</li>
</ul>
<h4><span style="font-size: 16px">2. ​<strong>GPU显存不足（OOM）​</strong></span></h4>
<ul>
<li><span style="font-size: 16px">​<strong>场景</strong>：设置<code>batch_size=32</code>时报错</span></li>
<li><span style="font-size: 16px">​<strong>优化</strong>：</span>
<ul>
<li><span style="font-size: 16px">逐步减小<code>batch_size</code>（如32→16→8）。</span></li>
<li><span style="font-size: 16px">启用混合精度：<code>set_dl_model_param (..., 'mixed_precision', 'true')</code>。</span></li>
<li><span style="font-size: 16px">减少输入分辨率（需与<code>create_dl_model_detection</code>中的<code>image_width/height</code>一致）。</span></li>
</ul>
</li>
</ul>
<h4><span style="font-size: 16px">3. ​<strong>类别不平衡导致训练偏差</strong></span></h4>
<ul>
<li><span style="font-size: 16px">​<strong>现象</strong>：多数类（如正常品）检测准确率高，少数类（缺陷）召回率低</span></li>
<li><span style="font-size: 16px">​<strong>解决</strong>：&nbsp;</span></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">*<span style="color: rgba(0, 0, 0, 1)"> 设置类别权重（假设缺陷类为第2类，权重加倍）
set_dl_model_param (DLModelHandle, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">weight_prior</span><span style="color: rgba(128, 0, 0, 1)">'</span>, [<span style="color: rgba(128, 0, 128, 1)">1.0</span>, <span style="color: rgba(128, 0, 128, 1)">2.0</span>])</span></pre>
</div>
<p>&nbsp;</p>
<h3><span style="font-size: 16px">最佳实践建议</span></h3>
<ol>
<li>
<p>​<strong>分阶段调参</strong></p>
<ul>
<li>​<span style="font-size: 16px"><strong>初期</strong>：使用较大学习率（如0.01）快速收敛。</span></li>
<li><span style="font-size: 16px">​<strong>中期</strong>：每隔5个epoch衰减学习率（如<code>set_dl_model_param (..., 'learning_rate', 0.001 * 0.5)</code>）。</span></li>
<li><span style="font-size: 16px">​<strong>后期</strong>：微调<code>confidence_threshold</code>和<code>nms_threshold</code>优化部署效果。</span></li>
</ul>
</li>
<li>
<p>​<strong>参数依赖关系</strong></p>
<ul>
<li><span style="font-size: 16px">当调整<code>image_width/height</code>时，需重新生成锚框参数（通过<code>create_dl_preprocess_param_from_model</code>）。</span></li>
<li><span style="font-size: 16px">修改<code>optimizer</code>后，需检查关联参数（如<code>momentum</code>对SGD有效，但对Adam无效）。</span></li>
</ul>
</li>
<li>
<p>​<strong>版本兼容性</strong></p>
<ul>
<li><span style="font-size: 16px">Halcon 20.11+ 支持<code>mixed_precision</code>参数。</span></li>
<li><span style="font-size: 16px">使用<code>get_dl_model_param</code>查询当前版本支持的参数列表：&nbsp;</span></li>
</ul>
</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">get_dl_model_param (DLModelHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">all</span><span style="color: rgba(128, 0, 0, 1)">'</span>, GenParamNames)</span></pre>
</div>
<p>&nbsp;</p>
<p><span style="font-size: 16px">通过合理运用<code>set_dl_model_param</code>，开发者可精准控制模型行为，在工业检测等高要求场景中实现精度与效率的最佳平衡。</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px"><strong>3.训练目标检测模型算子train_dl_model( : : DLDataset, DLModelHandle, TrainParam, StartEpoch : TrainResults, TrainInfos, EvaluationInfos)详解：</strong></span></p>
<p>&nbsp;</p>
<h4><span style="font-size: 16px">功能描述</span></h4>
<p>&nbsp;</p>
<p><span style="font-size: 16px"><code>train_dl_model</code> 是Halcon中用于执行深度学习模型训练的核心函数。它通过输入数据集、模型句柄及训练参数，启动训练流程，并输出训练结果、过程指标及评估信息，广泛应用于工业检测、目标识别等场景。</span></p>
<p>&nbsp;</p>
<h4><span style="font-size: 16px">函数原型</span></h4>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px"><span style="color: rgba(0, 0, 0, 1)">train_dl_model(
    DLDataset,          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输入：预处理后的数据集（包含训练/验证/测试集划分）</span>
    DLModelHandle,      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输入：已配置的模型句柄（通过create_dl_model_*创建）</span>
    TrainParam,         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输入：训练参数字典（定义训练轮次、验证频率等）</span>
    StartEpoch,         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输入：起始训练轮次（用于继续训练，首次训练设为0）</span>
    TrainResults,       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输出：训练结果状态（成功/失败）</span>
    TrainInfos,         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输出：训练过程信息（损失、准确率等）</span>
    EvaluationInfos     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输出：验证集评估结果（精确率、召回率等）</span>
)</span></pre>
</div>
<p>&nbsp;</p>
<h3><span style="font-size: 16px">参数详解</span></h3>
<h4><span style="font-size: 16px">一、输入参数</span></h4>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 16px">参数名</span></th><th><span style="font-size: 16px">类型</span></th><th><span style="font-size: 16px">描述</span></th><th><span style="font-size: 16px">示例值/说明</span></th></tr>
</thead>
<tbody>
<tr>
<td><span style="font-size: 16px">​<strong>DLDataset</strong></span></td>
<td><span style="font-size: 16px">字典</span></td>
<td><span style="font-size: 16px">包含预处理后的数据集，需通过<code>split_dl_dataset</code>划分训练/验证/测试集</span></td>
<td><span style="font-size: 16px">由<code>preprocess_dl_dataset</code>生成</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​<strong>DLModelHandle</strong></span></td>
<td><span style="font-size: 16px">句柄</span></td>
<td><span style="font-size: 16px">已配置参数的模型句柄（需提前设置<code>batch_size</code>、<code>learning_rate</code>等）</span></td>
<td><span style="font-size: 16px">-</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​<strong>TrainParam</strong></span></td>
<td><span style="font-size: 16px">字典</span></td>
<td><span style="font-size: 16px">训练控制参数，需通过<code>create_dl_train_param</code>生成</span></td>
<td><span style="font-size: 16px">见下方TrainParam配置</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​<strong>StartEpoch</strong></span></td>
<td><span style="font-size: 16px">整型</span></td>
<td><span style="font-size: 16px">起始训练轮次（从0开始，用于断点续训）</span></td>
<td><span style="font-size: 16px">0（从头训练）</span></td>
</tr>
</tbody>
</table>
</div>
<h4><span style="font-size: 16px">二、输出参数</span></h4>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 16px">参数名</span></th><th><span style="font-size: 16px">类型</span></th><th><span style="font-size: 16px">描述</span></th></tr>
</thead>
<tbody>
<tr>
<td><span style="font-size: 16px">​<strong>TrainResults</strong></span></td>
<td><span style="font-size: 16px">元组</span></td>
<td><span style="font-size: 16px">训练状态（如 'success' 或错误信息）</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​<strong>TrainInfos</strong></span></td>
<td><span style="font-size: 16px">字典</span></td>
<td><span style="font-size: 16px">每个epoch的训练指标（损失、学习率、耗时等）</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​<strong>EvaluationInfos</strong></span></td>
<td><span style="font-size: 16px">字典</span></td>
<td><span style="font-size: 16px">验证集评估结果（精确率、召回率、mAP等）</span></td>
</tr>
</tbody>
</table>
</div>
<h3><span style="font-size: 16px">TrainParam 参数字典配置</span></h3>
<p><span style="font-size: 16px">通过 <code>create_dl_train_param</code> 生成参数字典，关键参数如下：</span></p>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 16px">参数名</span></th><th><span style="font-size: 16px">类型</span></th><th><span style="font-size: 16px">描述</span></th><th><span style="font-size: 16px">示例值</span></th><th><span style="font-size: 16px">默认值</span></th></tr>
</thead>
<tbody>
<tr>
<td><span style="font-size: 16px">​<strong>num_epochs</strong></span></td>
<td><span style="font-size: 16px">整型</span></td>
<td><span style="font-size: 16px">总训练轮次（完整遍历训练集的次数）</span></td>
<td><span style="font-size: 16px">50</span></td>
<td><span style="font-size: 16px">-</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​<strong>evaluation_interval</strong></span></td>
<td><span style="font-size: 16px">整型</span></td>
<td><span style="font-size: 16px">每隔多少epoch执行一次验证集评估</span></td>
<td><span style="font-size: 16px">1</span></td>
<td><span style="font-size: 16px">1</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​<strong>display</strong></span></td>
<td><span style="font-size: 16px">布尔</span></td>
<td><span style="font-size: 16px">是否显示训练进度条（需Halcon窗口支持）</span></td>
<td><span style="font-size: 16px">'true'</span></td>
<td><span style="font-size: 16px">'true'</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​<strong>seed_rand</strong></span></td>
<td><span style="font-size: 16px">整型</span></td>
<td><span style="font-size: 16px">随机种子（确保实验可复现）</span></td>
<td><span style="font-size: 16px">42</span></td>
<td><span style="font-size: 16px">-</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​<strong>save_best_model</strong></span></td>
<td><span style="font-size: 16px">字符串</span></td>
<td><span style="font-size: 16px">保存最佳模型的方式（'none'、'last'、'best'）</span></td>
<td><span style="font-size: 16px">'best'</span></td>
<td><span style="font-size: 16px">'none'</span></td>
</tr>
</tbody>
</table>
</div>
<h3><span style="font-size: 16px">使用示例</span></h3>
<h4><span style="font-size: 16px">场景：药品包装缺陷检测模型训练</span></h4>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">*<span style="color: rgba(0, 0, 0, 1)"> 步骤1：创建训练参数字典
create_dl_train_param (DLModelHandle, </span><span style="color: rgba(128, 0, 128, 1)">30</span>, <span style="color: rgba(128, 0, 128, 1)">1</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">42</span><span style="color: rgba(0, 0, 0, 1)">, [], [], TrainParam)
</span>*<span style="color: rgba(0, 0, 0, 1)"> 参数说明：
</span>*   - <span style="color: rgba(128, 0, 128, 1)">30</span><span style="color: rgba(0, 0, 0, 1)">: 训练30个epoch
</span>*   - <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">: 每个epoch后验证一次
</span>*   - <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">: 显示进度条
</span>*   - <span style="color: rgba(128, 0, 128, 1)">42</span><span style="color: rgba(0, 0, 0, 1)">: 固定随机种子

</span>*<span style="color: rgba(0, 0, 0, 1)"> 步骤2：启动训练
train_dl_model (DLDataset, DLModelHandle, TrainParam, </span><span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">, TrainResults, TrainInfos, EvaluationInfos)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 步骤3：解析输出
</span>*<span style="color: rgba(0, 0, 0, 1)"> 检查训练状态
</span><span style="color: rgba(0, 0, 255, 1)">if</span> (TrainResults == <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">success</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
    </span>*<span style="color: rgba(0, 0, 0, 1)"> 提取最终epoch的损失值
    get_dict_tuple (TrainInfos, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">epoch_loss</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, EpochLoss)
    </span>*<span style="color: rgba(0, 0, 0, 1)"> 获取最佳模型在验证集的mAP
    get_dict_tuple (EvaluationInfos, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">mean_ap</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, MeanAP)
    </span>*<span style="color: rgba(0, 0, 0, 1)"> 输出结果
    dev_inspect_ctrl (WindowHandle)
    dev_disp_text (</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">训练成功！最终mAP: </span><span style="color: rgba(128, 0, 0, 1)">'</span> + MeanAP, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">window</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">top</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">left</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, [], [])
endif</span></span></pre>
</div>
<p>&nbsp;</p>
<h3><span style="font-size: 16px">关键输出解析（以药品检测为例）</span></h3>
<h4><span style="font-size: 16px">1. ​<strong>TrainInfos 内容</strong></span></h4>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px"><span style="color: rgba(0, 0, 0, 1)">{
    </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">epoch</span><span style="color: rgba(128, 0, 0, 1)">'</span>: [<span style="color: rgba(128, 0, 128, 1)">1</span>, <span style="color: rgba(128, 0, 128, 1)">2</span>, ..., <span style="color: rgba(128, 0, 128, 1)">30</span>],                  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 训练轮次</span>
    <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">loss</span><span style="color: rgba(128, 0, 0, 1)">'</span>: [<span style="color: rgba(128, 0, 128, 1)">0.85</span>, <span style="color: rgba(128, 0, 128, 1)">0.62</span>, ..., <span style="color: rgba(128, 0, 128, 1)">0.12</span>],           <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 训练集损失</span>
    <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">learning_rate</span><span style="color: rgba(128, 0, 0, 1)">'</span>: [<span style="color: rgba(128, 0, 128, 1)">0.001</span>, <span style="color: rgba(128, 0, 128, 1)">0.001</span>, ..., <span style="color: rgba(128, 0, 128, 1)">0.0001</span>], <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 动态学习率</span>
    <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">time</span><span style="color: rgba(128, 0, 0, 1)">'</span>: [<span style="color: rgba(128, 0, 128, 1)">120</span>, <span style="color: rgba(128, 0, 128, 1)">118</span>, ..., <span style="color: rgba(128, 0, 128, 1)">115</span>]               <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 每轮耗时（秒）</span>
}</span></pre>
</div>
<p>&nbsp;</p>
<h4><span style="font-size: 16px">2. ​<strong>EvaluationInfos 内容</strong></span></h4>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px"><span style="color: rgba(0, 0, 0, 1)">{
    </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">precision</span><span style="color: rgba(128, 0, 0, 1)">'</span>: [<span style="color: rgba(128, 0, 128, 1)">0.72</span>, <span style="color: rgba(128, 0, 128, 1)">0.81</span>, ..., <span style="color: rgba(128, 0, 128, 1)">0.95</span>],      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 各类别平均精确率</span>
    <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">recall</span><span style="color: rgba(128, 0, 0, 1)">'</span>: [<span style="color: rgba(128, 0, 128, 1)">0.65</span>, <span style="color: rgba(128, 0, 128, 1)">0.78</span>, ..., <span style="color: rgba(128, 0, 128, 1)">0.93</span>],         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 各类别平均召回率</span>
    <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">mean_ap</span><span style="color: rgba(128, 0, 0, 1)">'</span>: <span style="color: rgba(128, 0, 128, 1)">0.89</span>,                           <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 验证集mAP（主要评估指标）</span>
    <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">f1_score</span><span style="color: rgba(128, 0, 0, 1)">'</span>: [<span style="color: rgba(128, 0, 128, 1)">0.68</span>, <span style="color: rgba(128, 0, 128, 1)">0.79</span>, ..., <span style="color: rgba(128, 0, 128, 1)">0.94</span>]        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 各类别F1值</span>
}</span></pre>
</div>
<p>&nbsp;</p>
<h3><span style="font-size: 16px">常见问题与解决方案</span></h3>
<h4><span style="font-size: 16px">1. ​<strong>训练损失不下降</strong></span></h4>
<ul>
<li><span style="font-size: 16px">​<strong>现象</strong>：前5个epoch损失值波动或持平</span></li>
<li><span style="font-size: 16px">​<strong>解决</strong>：&nbsp;</span></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">*<span style="color: rgba(0, 0, 0, 1)"> 调整学习率（初始值可能过高）
set_dl_model_param (DLModelHandle, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">learning_rate</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">0.0001</span><span style="color: rgba(0, 0, 0, 1)">)
</span>* 检查数据预处理（如标注错误导致模型无法学习）</span></pre>
</div>
<p>&nbsp;</p>
<h4><span style="font-size: 16px">2. ​<strong>验证集mAP低于训练集</strong></span></h4>
<ul>
<li><span style="font-size: 16px">​<strong>现象</strong>：训练集mAP=0.95，验证集mAP=0.70</span></li>
<li><span style="font-size: 16px">​<strong>原因</strong>：模型过拟合</span></li>
<li><span style="font-size: 16px">​<strong>优化</strong>：&nbsp;</span></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">*<span style="color: rgba(0, 0, 0, 1)"> 增加正则化
set_dl_model_param (DLModelHandle, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">l2_regularization</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">0.0005</span><span style="color: rgba(0, 0, 0, 1)">)
</span>*<span style="color: rgba(0, 0, 0, 1)"> 启用数据增强
set_preprocess_param (DLPreprocessParam, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">augmentation</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">rotation_15</span><span style="color: rgba(128, 0, 0, 1)">'</span>)</span></pre>
</div>
<p>&nbsp;</p>
<h4><span style="font-size: 16px">3. ​<strong>训练中途中断</strong></span></h4>
<ul>
<li><span style="font-size: 16px">​<strong>续训方法</strong>：&nbsp;</span></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">*<span style="color: rgba(0, 0, 0, 1)"> 假设上次训练到第10个epoch
StartEpoch :</span>= <span style="color: rgba(128, 0, 128, 1)">10</span>
*<span style="color: rgba(0, 0, 0, 1)"> 加载已保存的模型
read_dl_model (</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">model_epoch_10.hdl</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, DLModelHandle)
</span>*<span style="color: rgba(0, 0, 0, 1)"> 继续训练剩余20个epoch
create_dl_train_param (..., </span><span style="color: rgba(128, 0, 128, 1)">30</span>, ..., TrainParam)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> total epochs=30</span>
train_dl_model (..., StartEpoch, ...)</span></pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3><span style="font-size: 16px">性能优化建议</span></h3>
<p>&nbsp;</p>
<ol><ol>
<li>
<p><span style="font-size: 16px">​<strong>分布式训练</strong>：</span><br><span style="font-size: 16px">
在Halcon中通过<code>set_dl_model_param (DLModelHandle, 'parallelize', 'data')</code>启用数据并行，加速大规模数据集训练。</span></p>





</li>
<li>
<p><span style="font-size: 16px">​<strong>自动早停</strong>：</span><br><span style="font-size: 16px">
监控验证集mAP，若连续N个epoch未提升则终止训练：</span></p>




</li>




</ol></ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">*<span style="color: rgba(0, 0, 0, 1)"> 自定义回调函数（伪代码）
</span><span style="color: rgba(0, 0, 255, 1)">if</span> (EvaluationInfos.mean_ap 未提升 <span style="color: rgba(0, 0, 255, 1)">in</span> <span style="color: rgba(128, 0, 128, 1)">5</span><span style="color: rgba(0, 0, 0, 1)"> epochs)
    stop_training </span>= <span style="color: rgba(0, 0, 255, 1)">true</span></span></pre>
</div>
<p>&nbsp;</p>
<p><span style="font-size: 16px"><strong>混合精度训练</strong>：</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">set_dl_model_param (DLModelHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">mixed_precision</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span>)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 减少显存占用</span></span></pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px"><strong>4.评估模型算子evaluate_dl_model( : : DLDataset, DLModelHandle, SampleSelectMethod, SampleSelectValues, GenParam : EvaluationResult, EvalParams)详解：</strong></span></p>
<p>&nbsp;</p>
<h4><span style="font-size: 16px">功能描述</span></h4>
<p>&nbsp;</p>
<p><span style="font-size: 16px"><code>evaluate_dl_model</code> 用于对训练好的深度学习模型进行性能评估，生成精确率、召回率、mAP（目标检测核心指标）等关键指标。该函数是验证模型在工业检测场景中实际表现的核心工具。</span></p>
<p>&nbsp;</p>
<h4><span style="font-size: 16px">函数原型</span></h4>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px"><span style="color: rgba(0, 0, 0, 1)">evaluate_dl_model(
    DLDataset,              </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输入：预处理后的数据集（需包含测试集）</span>
    DLModelHandle,          <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输入：已训练的模型句柄</span>
    SampleSelectMethod,     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输入：样本选择方法（如'split'按数据集划分）</span>
    SampleSelectValues,     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输入：选择方法对应的值（如'test'表示测试集）</span>
    GenParam,               <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输入：评估控制参数（显示进度、详细输出等）</span>
    EvaluationResult,       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输出：评估结果（字典形式，含mAP等指标）</span>
    EvalParams              <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输出：实际使用的评估参数记录</span>
)</span></pre>
</div>
<p>&nbsp;</p>
<h3><span style="font-size: 16px">参数详解</span></h3>
<h4><span style="font-size: 16px">一、输入参数</span></h4>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 16px">参数名</span></th><th><span style="font-size: 16px">类型</span></th><th><span style="font-size: 16px">描述</span></th><th><span style="font-size: 16px">示例值/说明</span></th></tr>
</thead>
<tbody>
<tr>
<td><span style="font-size: 16px">​<strong>DLDataset</strong></span></td>
<td><span style="font-size: 16px">字典</span></td>
<td><span style="font-size: 16px">必须包含测试集样本（通过<code>split_dl_dataset</code>划分）</span></td>
<td><span style="font-size: 16px">由<code>preprocess_dl_dataset</code>生成</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​<strong>DLModelHandle</strong></span></td>
<td><span style="font-size: 16px">句柄</span></td>
<td><span style="font-size: 16px">完成训练的模型句柄（建议加载<code>model_best.hdl</code>）</span></td>
<td><span style="font-size: 16px">-</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​<strong>SampleSelectMethod</strong></span></td>
<td><span style="font-size: 16px">字符串</span></td>
<td><span style="font-size: 16px">样本选择方式：</span><br><span style="font-size: 16px">• <code>'split'</code>：按数据集划分</span><br><span style="font-size: 16px">• <code>'num_samples'</code>：随机抽取N个样本</span></td>
<td><span style="font-size: 16px">'split'</span></td>




</tr>
<tr>
<td><span style="font-size: 16px">​<strong>SampleSelectValues</strong></span></td>
<td><span style="font-size: 16px">字符串/数组</span></td>
<td><span style="font-size: 16px">与选择方法对应的值：</span><br><span style="font-size: 16px">• <code>'split'</code> → <code>'test'</code></span><br><span style="font-size: 16px">• <code>'num_samples'</code> → [100]</span></td>
<td><span style="font-size: 16px">'test'</span></td>




</tr>
<tr>
<td><span style="font-size: 16px">​<strong>GenParam</strong></span></td>
<td><span style="font-size: 16px">字典</span></td>
<td><span style="font-size: 16px">控制评估过程的详细行为</span></td>
<td><span style="font-size: 16px">见下方GenParam配置</span></td>




</tr>




</tbody>




</table>




</div>
<h4><span style="font-size: 16px">二、输出参数</span></h4>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 16px">参数名</span></th><th><span style="font-size: 16px">类型</span></th><th><span style="font-size: 16px">描述</span></th></tr>




</thead>
<tbody>
<tr>
<td><span style="font-size: 16px">​<strong>EvaluationResult</strong></span></td>
<td><span style="font-size: 16px">字典</span></td>
<td><span style="font-size: 16px">评估指标结果（包含各类别及全局的精度、召回率、mAP等）</span></td>




</tr>
<tr>
<td><span style="font-size: 16px">​<strong>EvalParams</strong></span></td>
<td><span style="font-size: 16px">字典</span></td>
<td><span style="font-size: 16px">实际生效的评估参数记录（用于复现评估条件）</span></td>




</tr>




</tbody>




</table>




</div>
<h3><span style="font-size: 16px">GenParam 配置（关键参数）</span></h3>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 16px">参数名</span></th><th><span style="font-size: 16px">类型</span></th><th><span style="font-size: 16px">作用</span></th><th><span style="font-size: 16px">示例值</span></th><th><span style="font-size: 16px">默认值</span></th></tr>




</thead>
<tbody>
<tr>
<td><span style="font-size: 16px">​<strong>detailed_evaluation</strong></span></td>
<td><span style="font-size: 16px">布尔</span></td>
<td><span style="font-size: 16px">是否输出各类别详细指标（True时显示每个类别的AP值）</span></td>
<td><span style="font-size: 16px">'true'</span></td>
<td><span style="font-size: 16px">'false'</span></td>




</tr>
<tr>
<td><span style="font-size: 16px">​<strong>show_progress</strong></span></td>
<td><span style="font-size: 16px">布尔</span></td>
<td><span style="font-size: 16px">显示评估进度条（需Halcon窗口支持）</span></td>
<td><span style="font-size: 16px">'true'</span></td>
<td><span style="font-size: 16px">'true'</span></td>




</tr>
<tr>
<td><span style="font-size: 16px">​<strong>batch_size</strong></span></td>
<td><span style="font-size: 16px">整型</span></td>
<td><span style="font-size: 16px">评估时的批次大小（影响显存占用与速度）</span></td>
<td><span style="font-size: 16px">8</span></td>
<td><span style="font-size: 16px">与训练相同</span></td>




</tr>
<tr>
<td><span style="font-size: 16px">​<strong>confidence_threshold</strong></span></td>
<td><span style="font-size: 16px">浮点型</span></td>
<td><span style="font-size: 16px">过滤低置信度检测框的阈值（影响召回率）</span></td>
<td><span style="font-size: 16px">0.3</span></td>
<td><span style="font-size: 16px">0.5</span></td>




</tr>




</tbody>




</table>




</div>
<h3><span style="font-size: 16px">使用示例</span></h3>
<h4><span style="font-size: 16px">场景：药品缺陷检测模型评估</span></h4>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">*<span style="color: rgba(0, 0, 0, 1)"> 步骤1：配置评估参数
create_dict (GenParam)
set_dict_tuple (GenParam, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">detailed_evaluation</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span>)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输出详细类别指标</span>
set_dict_tuple (GenParam, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">show_progress</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span>)        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示进度条</span>
set_dict_tuple (GenParam, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">confidence_threshold</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">0.4</span>)   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 降低阈值提高召回率</span>

*<span style="color: rgba(0, 0, 0, 1)"> 步骤2：执行评估（仅测试集）
evaluate_dl_model (DLDataset, DLModelHandle, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">split</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">test</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, GenParam, EvaluationResult, EvalParams)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 步骤3：解析结果
get_dict_tuple (EvaluationResult, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">mean_ap</span><span style="color: rgba(128, 0, 0, 1)">'</span>, mAP)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取全局mAP</span>
get_dict_tuple (EvaluationResult, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">precision</span><span style="color: rgba(128, 0, 0, 1)">'</span>, ClassPrecision) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 各类别精确率</span></span></pre>
</div>
<p>&nbsp;</p>
<h3><span style="font-size: 16px">输出解析（EvaluationResult 关键字段）</span></h3>
<h4><span style="font-size: 16px">1. ​<strong>全局指标</strong></span></h4>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 16px">字段名</span></th><th><span style="font-size: 16px">类型</span></th><th><span style="font-size: 16px">描述</span></th><th><span style="font-size: 16px">示例值</span></th></tr>
</thead>
<tbody>
<tr>
<td><span style="font-size: 16px">​<strong>mean_ap</strong></span></td>
<td><span style="font-size: 16px">浮点型</span></td>
<td><span style="font-size: 16px">平均精度（mAP，IoU阈值通常为0.5:0.95）</span></td>
<td><span style="font-size: 16px">0.85</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​<strong>precision</strong></span></td>
<td><span style="font-size: 16px">浮点型</span></td>
<td><span style="font-size: 16px">整体精确率</span></td>
<td><span style="font-size: 16px">0.92</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​<strong>recall</strong></span></td>
<td><span style="font-size: 16px">浮点型</span></td>
<td><span style="font-size: 16px">整体召回率</span></td>
<td><span style="font-size: 16px">0.88</span></td>
</tr>
</tbody>
</table>
</div>
<h4><span style="font-size: 16px">2. ​<strong>类别级指标（当<code>detailed_evaluation=true</code>时）​</strong></span></h4>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 16px">字段名</span></th><th><span style="font-size: 16px">类型</span></th><th><span style="font-size: 16px">描述</span></th><th><span style="font-size: 16px">示例值</span></th></tr>
</thead>
<tbody>
<tr>
<td><span style="font-size: 16px">​<strong>class_ap</strong></span></td>
<td><span style="font-size: 16px">浮点数组</span></td>
<td><span style="font-size: 16px">每个类别的AP值</span></td>
<td><span style="font-size: 16px">[0.90, 0.80, ...]</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​<strong>class_precision</strong></span></td>
<td><span style="font-size: 16px">浮点数组</span></td>
<td><span style="font-size: 16px">各类别精确率</span></td>
<td><span style="font-size: 16px">[0.95, 0.85, ...]</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​<strong>class_recall</strong></span></td>
<td><span style="font-size: 16px">浮点数组</span></td>
<td><span style="font-size: 16px">各类别召回率</span></td>
<td><span style="font-size: 16px">[0.89, 0.83, ...]</span></td>
</tr>
</tbody>
</table>
</div>
<h3><span style="font-size: 16px">常见问题与解决方案</span></h3>
<h4><span style="font-size: 16px">1. ​<strong>评估耗时过长</strong></span></h4>
<ul>
<li><span style="font-size: 16px">​<strong>原因</strong>：测试集过大或<code>batch_size</code>过小</span></li>
<li><span style="font-size: 16px">​<strong>优化</strong>：&nbsp;</span></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">*<span style="color: rgba(0, 0, 0, 1)"> 增大批次大小（需确保不超出GPU显存）
set_dict_tuple (GenParam, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">batch_size</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">16</span><span style="color: rgba(0, 0, 0, 1)">)
</span>*<span style="color: rgba(0, 0, 0, 1)"> 关闭详细输出
set_dict_tuple (GenParam, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">detailed_evaluation</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">'</span>)</span></pre>
</div>
<p>&nbsp;</p>
<h4><span style="font-size: 16px">2. ​<strong>mAP值异常低</strong></span></h4>
<ul>
<li><span style="font-size: 16px">​<strong>排查步骤</strong>：</span><ol>
<li>检查<code>confidence_threshold</code>是否过高（漏检真实缺陷）：&nbsp;</li>
</ol></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">set_dict_tuple (GenParam, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">confidence_threshold</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">0.3</span>)</span></pre>
</div>
<p>&nbsp;</p>
<ul>
<li><span style="font-size: 16px">验证标注文件（测试集标注错误会导致评估失真）</span></li>
<li><span style="font-size: 16px">检查模型是否在测试集上过拟合（对比训练集mAP）</span></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4><span style="font-size: 16px">3. ​<strong>类别间性能差异大</strong></span></h4>
<p>&nbsp;</p>
<ul>
<li><span style="font-size: 16px">​<strong>现象</strong>：A类AP=0.95，B类AP=0.50</span></li>
<li><span style="font-size: 16px">​<strong>解决</strong>：&nbsp;</span></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">*<span style="color: rgba(0, 0, 0, 1)"> 针对弱类别（B类）增强数据
</span>*<span style="color: rgba(0, 0, 0, 1)"> 调整损失函数权重：
  set_dl_model_param (DLModelHandle, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">weight_prior</span><span style="color: rgba(128, 0, 0, 1)">'</span>, [<span style="color: rgba(128, 0, 128, 1)">1.0</span>, <span style="color: rgba(128, 0, 128, 1)">2.0</span>])  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> B类权重加倍</span></span></pre>
</div>
<p>&nbsp;</p>
<h3><span style="font-size: 16px">高级应用技巧</span></h3>
<ol><ol>
<li>
<p><span style="font-size: 16px">​<strong>多阈值评估</strong></span><br><span style="font-size: 16px">
通过修改IoU阈值评估模型在不同严格度下的表现：</span></p>




</li>




</ol></ol>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">set_dict_tuple (GenParam, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">iou_threshold</span><span style="color: rgba(128, 0, 0, 1)">'</span>, [<span style="color: rgba(128, 0, 128, 1)">0.5</span>, <span style="color: rgba(128, 0, 128, 1)">0.75</span>])  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 同时评估IoU@0.5和IoU@0.75</span></span></pre>
</div>
<p><span style="font-size: 16px"><strong>可视化错误样本</strong></span><br><span style="font-size: 16px">
结合<code>dev_display_dl_data</code>显示假阴性（FN）和假阳性（FP）样本：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">set_dict_tuple (GenParam, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">save_fp_samples</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span>)      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 保存误检样本</span>
set_dict_tuple (GenParam, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">save_fn_samples</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span>)      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 保存漏检样本</span></span></pre>
</div>
<p><span style="font-size: 16px"><strong>跨模型对比</strong></span><br><span style="font-size: 16px">
对多个模型（如v1.0和v2.0）执行相同评估，生成对比报告：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">*<span style="color: rgba(0, 0, 0, 1)"> 评估模型A
evaluate_dl_model (..., DLModelHandle_A, ..., EvalResult_A)
</span>*<span style="color: rgba(0, 0, 0, 1)"> 评估模型B
evaluate_dl_model (..., DLModelHandle_B, ..., EvalResult_B)
</span>*<span style="color: rgba(0, 0, 0, 1)"> 对比mAP
dev_display_comparison (EvalResult_A.mean_ap, EvalResult_B.mean_ap)</span></span></pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px"><strong>5.推理模型<strong>结果</strong>算子apply_dl_model( : : DLModelHandle, DLSampleBatch, Outputs : DLResultBatch)详解：</strong></span></p>
<p>&nbsp;</p>
<h4><span style="font-size: 16px">功能描述</span></h4>
<p>&nbsp;</p>
<p><span style="font-size: 16px"><code>apply_dl_model</code> 是Halcon中用于执行深度学习模型推理的核心函数，可将训练好的模型应用于新的输入数据（图像或样本批次），生成预测结果（如目标检测框、分类标签等）。该函数广泛应用于工业检测中的实时推理场景。</span></p>
<p>&nbsp;</p>
<h4><span style="font-size: 16px">函数原型</span></h4>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px"><span style="color: rgba(0, 0, 0, 1)">apply_dl_model(
    DLModelHandle,      </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输入：已加载的模型句柄</span>
    DLSampleBatch,      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输入：预处理后的输入数据（单个样本或批次）</span>
    Outputs,            <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输入：指定输出类型（如目标检测的'bbox_results'）</span>
    DLResultBatch       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输出：包含预测结果的字典或字典数组</span>
)</span></pre>
</div>
<p>&nbsp;</p>
<h3><span style="font-size: 16px">参数详解</span></h3>
<h4><span style="font-size: 16px">一、输入参数</span></h4>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 16px">参数名</span></th><th><span style="font-size: 16px">类型</span></th><th><span style="font-size: 16px">描述</span></th><th><span style="font-size: 16px">示例值/说明</span></th></tr>
</thead>
<tbody>
<tr>
<td><span style="font-size: 16px">​<strong>DLModelHandle</strong></span></td>
<td><span style="font-size: 16px">模型句柄</span></td>
<td><span style="font-size: 16px">通过<code>read_dl_model</code>加载的已训练模型</span></td>
<td><span style="font-size: 16px">-</span></td>
</tr>
<tr>
<td><span style="font-size: 16px">​<strong>DLSampleBatch</strong></span></td>
<td><span style="font-size: 16px">字典/数组</span></td>
<td><span style="font-size: 16px">输入数据，需包含预处理后的图像和元数据（通过<code>preprocess_dl_samples</code>生成）</span></td>
<td><span style="font-size: 16px">单样本：字典</span><br><span style="font-size: 16px">批次：字典数组</span></td>




</tr>
<tr>
<td><span style="font-size: 16px">​<strong>Outputs</strong></span></td>
<td><span style="font-size: 16px">字符串/数组</span></td>
<td><span style="font-size: 16px">指定输出类型，与模型类型相关：</span><br><span style="font-size: 16px">• 目标检测 → 'bbox_results'</span><br><span style="font-size: 16px">• 分类 → 'class_ids'</span></td>
<td><span style="font-size: 16px">['bbox_results']</span></td>




</tr>




</tbody>




</table>




</div>
<h4><span style="font-size: 16px">二、输出参数</span></h4>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 16px">参数名</span></th><th><span style="font-size: 16px">类型</span></th><th><span style="font-size: 16px">描述</span></th></tr>




</thead>
<tbody>
<tr>
<td><span style="font-size: 16px">​<strong>DLResultBatch</strong></span></td>
<td><span style="font-size: 16px">字典/数组</span></td>
<td><span style="font-size: 16px">预测结果，结构与<code>DLSampleBatch</code>对应：</span><br><span style="font-size: 16px">• 单样本输入 → 字典</span><br><span style="font-size: 16px">• 批次输入 → 字典数组</span></td>




</tr>




</tbody>




</table>




</div>
<h3><span style="font-size: 16px">输出解析（以目标检测为例）</span></h3>
<p><span style="font-size: 16px">输出字典包含以下关键字段（具体字段根据模型类型变化）：</span></p>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 16px">字段名</span></th><th><span style="font-size: 16px">类型</span></th><th><span style="font-size: 16px">描述</span></th></tr>




</thead>
<tbody>
<tr>
<td><span style="font-size: 16px">​<strong>bbox_result</strong></span></td>
<td><span style="font-size: 16px">字典数组</span></td>
<td><span style="font-size: 16px">检测框信息（每个检测框为一个字典）</span></td>




</tr>
<tr>
<td><span style="font-size: 16px">​<strong>class_id</strong></span></td>
<td><span style="font-size: 16px">整型数组</span></td>
<td><span style="font-size: 16px">检测到的类别ID（与训练时的<code>class_ids</code>对应）</span></td>




</tr>
<tr>
<td><span style="font-size: 16px">​<strong>confidence</strong></span></td>
<td><span style="font-size: 16px">浮点数组</span></td>
<td><span style="font-size: 16px">检测置信度（范围0~1，值越高表示预测越可靠）</span></td>




</tr>
<tr>
<td><span style="font-size: 16px">​<strong>bbox</strong></span></td>
<td><span style="font-size: 16px">浮点数组</span></td>
<td><span style="font-size: 16px">检测框坐标（格式取决于参数设置，通常为[x1,y1,x2,y2]或[x,y,w,h]）</span></td>




</tr>




</tbody>




</table>




</div>
<h3><span style="font-size: 16px">使用示例</span></h3>
<h4><span style="font-size: 16px">场景：药品包装缺陷单张图像检测</span></h4>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">*<span style="color: rgba(0, 0, 0, 1)"> 步骤1：加载模型
read_dl_model (</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">model_best.hdl</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, DLModelHandle)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 步骤2：读取并预处理图像
read_image (Image, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">defect_pill.jpg</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
gen_dl_samples_from_images (Image, DLSample)  </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 生成输入样本</span>
preprocess_dl_samples (DLSample, DLPreprocessParam)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 预处理（尺寸归一化等）</span>

*<span style="color: rgba(0, 0, 0, 1)"> 步骤3：执行推理
apply_dl_model (DLModelHandle, DLSample, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">bbox_results</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, DLResult)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 步骤4：解析结果
get_dict_tuple (DLResult, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">bbox_result</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, BboxResults)
</span><span style="color: rgba(0, 0, 255, 1)">foreach</span> Bbox <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> BboxResults
    get_dict_tuple (Bbox, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">class_id</span><span style="color: rgba(128, 0, 0, 1)">'</span>, ClassID)       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取类别</span>
    get_dict_tuple (Bbox, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">confidence</span><span style="color: rgba(128, 0, 0, 1)">'</span>, Confidence)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 置信度</span>
    get_dict_tuple (Bbox, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">bbox</span><span style="color: rgba(128, 0, 0, 1)">'</span>, [X1,Y1,X2,Y2])     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 检测框坐标</span>
    *<span style="color: rgba(0, 0, 0, 1)"> 可视化
    dev_display_box (X1, Y1, X2, Y2, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">red</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
endforeach</span></span></pre>
</div>
<p>&nbsp;</p>
<h3><span style="font-size: 16px">高级用法</span></h3>
<h4><span style="font-size: 16px">1. ​<strong>批量推理优化</strong></span></h4>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">*<span style="color: rgba(0, 0, 0, 1)"> 读取多张图像并预处理
list_image_files (ImageDir, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">default</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, [], ImageFiles)
gen_dl_samples_from_images (ImageFiles, DLSamples)
preprocess_dl_samples (DLSamples, DLPreprocessParam)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 批量推理（提升GPU利用率）
apply_dl_model (DLModelHandle, DLSamples, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">bbox_results</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, DLResults)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 遍历结果
</span><span style="color: rgba(0, 0, 255, 1)">for</span> Index := <span style="color: rgba(128, 0, 128, 1)">0</span> to |DLResults|-<span style="color: rgba(128, 0, 128, 1)">1</span> by <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
    get_dict_tuple (DLResults[Index], </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">bbox_result</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, BboxResults)
    </span>*<span style="color: rgba(0, 0, 0, 1)"> 关联原始文件名
    get_dict_tuple (DLSamples[Index], </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image_id</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, ImageID)
endforeach</span></span></pre>
</div>
<h4><span style="font-size: 16px">2. ​<strong>多输出模型</strong></span></h4>
<p><span style="font-size: 16px">若模型支持同时输出检测框和分割掩膜：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">apply_dl_model (DLModelHandle, DLSample, [<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">bbox_results</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">segmentation</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">], DLResult)
</span>*<span style="color: rgba(0, 0, 0, 1)"> 解析分割结果
get_dict_tuple (DLResult, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">segmentation</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, SegmentationMask)
dev_display_mask (SegmentationMask)</span></span></pre>
</div>
<h3><span style="font-size: 16px">常见问题与解决方案</span></h3>
<h4><span style="font-size: 16px">1. ​<strong>推理速度慢</strong></span></h4>
<ul>
<li><span style="font-size: 16px">​<strong>优化策略</strong>：</span>
<ul>
<li>增加<code>batch_size</code>（需权衡显存占用）&nbsp;
<div class="cnblogs_code">
<pre>set_dl_model_param (DLModelHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">batch_size</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">8</span>)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 批次推理</span></pre>
</div>
<p>启用TensorRT加速（需转换模型）</p>
</li>
</ul>
</li>
</ul>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">set_dl_model_param (DLModelHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">runtime</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">tensorrt</span><span style="color: rgba(128, 0, 0, 1)">'</span>)</span></pre>
</div>
<h4><span style="font-size: 16px">2. ​<strong>检测框坐标错误</strong></span></h4>
<ul>
<li><span style="font-size: 16px">​<strong>原因</strong>：预处理/后处理的坐标格式不一致</span></li>
<li><span style="font-size: 16px">​<strong>验证步骤</strong>：</span><ol>
<li>确认预处理是否包含归一化（如除以图像尺寸）</li>
<li>检查模型输出格式（<code>set_dl_model_param (..., 'bbox_format', 'x1y1x2y2')</code>）</li>
</ol></li>
</ul>
<h4><span style="font-size: 16px">3. ​<strong>内存不足（OOM）​</strong></span></h4>
<ul>
<li><span style="font-size: 16px">​<strong>现象</strong>：大尺寸图像导致显存溢出</span></li>
<li><span style="font-size: 16px">​<strong>解决</strong>：</span>
<ul>
<li>减小<code>batch_size</code></li>
<li>分割图像为小块处理&nbsp;</li>
</ul>
</li>
</ul>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">*<span style="color: rgba(0, 0, 0, 1)"> 将4096x4096图像分割为512x512网格
partition_rectangle (Image, </span><span style="color: rgba(128, 0, 128, 1)">512</span>, <span style="color: rgba(128, 0, 128, 1)">512</span><span style="color: rgba(0, 0, 0, 1)">, PartitionedImages)
</span><span style="color: rgba(0, 0, 255, 1)">foreach</span> Tile <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> PartitionedImages
    gen_dl_samples_from_images (Tile, DLSample)
    apply_dl_model (...)
endfor</span></span></pre>
</div>
<h3><span style="font-size: 16px">关键注意事项</span></h3>
<ol>
<li><span style="font-size: 16px">​<strong>预处理一致性</strong>：确保推理时的预处理操作（尺寸、归一化）与训练完全一致。</span></li>
<li><span style="font-size: 16px">​<strong>输出映射</strong>：模型输出的<code>class_id</code>需与训练时的类别标签匹配（通过<code>get_dict_tuple (DLDataset, 'class_ids', ClassIDs)</code>获取）。</span></li>
<li><span style="font-size: 16px">​<strong>结果过滤</strong>：根据<code>confidence</code>阈值过滤低置信度检测框，平衡误报和漏检：&nbsp;</span></li>
</ol>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">*<span style="color: rgba(0, 0, 0, 1)"> 过滤置信度低于0.5的结果
filter_dl_results (DLResult, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">confidence</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">0.5</span>, FilteredResult)</span></pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt"><strong>三.实例代码讲解</strong></span></p>
<p>&nbsp;</p>
<p><span style="font-size: 16px">我将代码分为了五个步骤方便大家的理解：&nbsp;创建目标检测模型，相关数据和预处理，训练模型，评估模型，验证模型。</span></p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 14pt">1. 创建目标检测模型&nbsp;</span></strong></p>
<div class="cnblogs_code">
<pre>*<span style="color: rgba(0, 0, 0, 1)"> 关闭图形更新提升性能
dev_update_off ()

</span>*<span style="color: rgba(0, 0, 0, 1)"> ##############################################################################
</span>* ###                         <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">. 创建目标检测模型                           ###
</span>*<span style="color: rgba(0, 0, 0, 1)"> ##############################################################################

</span>*** 模型基础参数配置 ​***
*<span style="color: rgba(0, 0, 0, 1)">必须的参数
Backbone :</span>= <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">pretrained_dl_classifier_compact.hdl</span><span style="color: rgba(128, 0, 0, 1)">'</span>  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 预训练模型文件路径</span>
NumClasses := <span style="color: rgba(128, 0, 128, 1)">6</span>                                     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 要检测的物体类别数量</span>

*<span style="color: rgba(0, 0, 0, 1)">图像规格参数
ImageWidth :</span>= <span style="color: rgba(128, 0, 128, 1)">512</span>                                   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 模型输入宽度（需与预处理一致）</span>
ImageHeight := <span style="color: rgba(128, 0, 128, 1)">320</span>                                  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 模型输入高度</span>
ImageNumChannels := <span style="color: rgba(128, 0, 128, 1)">3</span>                               <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> RGB三通道图像</span>

*<span style="color: rgba(0, 0, 0, 1)">特征金字塔参数
MinLevel :</span>= <span style="color: rgba(128, 0, 128, 1)">2</span>                                       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 特征金字塔最小层级（用于检测大物体）</span>
MaxLevel := <span style="color: rgba(128, 0, 128, 1)">4</span>                                       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 特征金字塔最大层级（用于检测小物体）</span>

*<span style="color: rgba(0, 0, 0, 1)">锚点框参数
NumSubscales :</span>= <span style="color: rgba(128, 0, 128, 1)">3</span>                                   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 每个层级的缩放级别数量</span>
AspectRatios := [<span style="color: rgba(128, 0, 128, 1)">1.0</span>,<span style="color: rgba(128, 0, 128, 1)">0.5</span>,<span style="color: rgba(128, 0, 128, 1)">2.0</span>]                      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 锚点框宽高比（1:1,1:2,2:1）</span>
Capacity := <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">medium</span><span style="color: rgba(128, 0, 0, 1)">'</span>                                <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 模型复杂度（medium平衡速度与精度）</span>

*** 创建模型参数字典 ​***<span style="color: rgba(0, 0, 0, 1)">
create_dict (DLModelDetectionParam)                 </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建空字典</span>
set_dict_tuple (DLModelDetectionParam, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image_width</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, ImageWidth)
set_dict_tuple (DLModelDetectionParam, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image_height</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, ImageHeight)
set_dict_tuple (DLModelDetectionParam, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image_num_channels</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, ImageNumChannels)
set_dict_tuple (DLModelDetectionParam, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">min_level</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, MinLevel)
set_dict_tuple (DLModelDetectionParam, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">max_level</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, MaxLevel)
set_dict_tuple (DLModelDetectionParam, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">num_subscales</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, NumSubscales)
set_dict_tuple (DLModelDetectionParam, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">aspect_ratios</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, AspectRatios)
set_dict_tuple (DLModelDetectionParam, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">capacity</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, Capacity)

</span>*** 实例化检测模型 ​***<span style="color: rgba(0, 0, 0, 1)">
create_dl_model_detection (Backbone, NumClasses, DLModelDetectionParam, DLModelHandle)  </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输出模型句柄</span></pre>
</div>
<p>&nbsp;</p>
<p>预训练模型指的就是你用哪个神经网络模型去训练，模型资源的话都在halcon官方demo的路径下存有，这里用Compact,其他的你们也可以自己试试哦，不过目前最优秀的应该还是YOLO模型。</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250330150932936-1725812295.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 14pt">2. 数据预处理配置&nbsp;</span></strong></p>
<div class="cnblogs_code">
<pre>*** 路径配置 ​***<span style="color: rgba(0, 0, 0, 1)">
DataDir :</span>= <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">E:/公司/code/JM/模块/halcon相关/halcon深度学习相关/目标检测/目标检测</span><span style="color: rgba(128, 0, 0, 1)">'</span>  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 项目根目录</span>
HalconImageDir:= DataDir + <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">/testImages/</span><span style="color: rgba(128, 0, 0, 1)">'</span>          <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 测试图像存储路径</span>
PillBagHdictFile := DataDir + <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">/images.hdict</span><span style="color: rgba(128, 0, 0, 1)">'</span>      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 数据集描述文件（含标注信息）</span>
DLModelFileName := DataDir + <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">/pretrained_dl_model_detection.hdl</span><span style="color: rgba(128, 0, 0, 1)">'</span>  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 模型保存路径</span>
DataDirectory := DataDir + <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">/dataset</span><span style="color: rgba(128, 0, 0, 1)">'</span>              <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 预处理后的数据存储目录</span>
PreprocessParamFileName := DataDirectory + <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">/dl_preprocess_param_</span><span style="color: rgba(128, 0, 0, 1)">'</span> + ImageWidth + <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">x</span><span style="color: rgba(128, 0, 0, 1)">'</span> + ImageHeight  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 预处理参数文件</span>

*** 数据集划分参数 ​***<span style="color: rgba(0, 0, 0, 1)">
TrainingPercent :</span>= <span style="color: rgba(128, 0, 128, 1)">80</span>                              <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 训练集比例（单位：%）</span>
ValidationPercent := <span style="color: rgba(128, 0, 128, 1)">10</span>                            <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 验证集比例</span>
SeedRand := <span style="color: rgba(128, 0, 128, 1)">42</span>                                     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 随机数种子（确保可复现）</span>

*** 目录检查与创建 ​***<span style="color: rgba(0, 0, 0, 1)">
file_exists (DataDir, FileExists)                  </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 检查根目录是否存在</span>
<span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (not FileExists)
    make_dir (DataDir)                             </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 自动创建缺失目录</span>
<span style="color: rgba(0, 0, 0, 1)">endif

</span>*** 加载原始数据集 ​***<span style="color: rgba(0, 0, 0, 1)">
read_dict (PillBagHdictFile, [], [], DLDataset)    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 读取HDICT格式的数据集描述文件</span>
get_dict_tuple (DLDataset, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">class_ids</span><span style="color: rgba(128, 0, 0, 1)">'</span>, ClassIDs)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取类别ID列表</span>
set_dict_tuple (DLDataset, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image_dir</span><span style="color: rgba(128, 0, 0, 1)">'</span>, DataDir+<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">/images/</span><span style="color: rgba(128, 0, 0, 1)">'</span>)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置实际图像路径</span>
set_dl_model_param (DLModelHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">class_ids</span><span style="color: rgba(128, 0, 0, 1)">'</span>, ClassIDs)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 绑定类别ID到模型</span>

*** 保存初始模型 ​***<span style="color: rgba(0, 0, 0, 1)">
write_dl_model (DLModelHandle, DLModelFileName)    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 保存模型到指定路径</span>

*** 数据集划分 ​***<span style="color: rgba(0, 0, 0, 1)">
set_system (</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">seed_rand</span><span style="color: rgba(128, 0, 0, 1)">'</span>, SeedRand)                 <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置随机种子</span>
split_dl_dataset (DLDataset, TrainingPercent, ValidationPercent, [])  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 按比例分割数据集</span>

*** 生成预处理参数 ​***<span style="color: rgba(0, 0, 0, 1)">
create_dict (GenParam)
set_dict_tuple (GenParam, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">overwrite_files</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(0, 0, 255, 1)">true</span>)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 允许覆盖已有文件</span>
create_dl_preprocess_param_from_model (DLModelHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">full_domain</span><span style="color: rgba(128, 0, 0, 1)">'</span>, [], [], [], DLPreprocessParam)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 从模型生成预处理参数</span>

*** 执行数据预处理 ​***<span style="color: rgba(0, 0, 0, 1)">
preprocess_dl_dataset (DLDataset, DataDirectory, DLPreprocessParam, GenParam, DLDatasetFilename)  </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输出预处理后的数据集</span></pre>
</div>
<p>&nbsp;</p>
<p>这里唯一要注意的就是（填你们自己的路径噢）：</p>
<div class="cnblogs_code">
<pre>DataDir := <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">E:/公司/code/JM/模块/halcon相关/halcon深度学习相关/目标检测/目标检测</span><span style="color: rgba(128, 0, 0, 1)">'</span>  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 项目根目录</span></pre>
</div>
<p>&nbsp;</p>
<p><strong><span style="font-size: 14pt">3. 模型训练流程</span></strong></p>
<div class="cnblogs_code">
<pre>*** 训练参数配置 ​***<span style="color: rgba(0, 0, 0, 1)">
set_dl_model_param (DLModelHandle, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">batch_size</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">1</span>)       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 批大小（根据显存调整）</span>
set_dl_model_param (DLModelHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">learning_rate</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">0.001</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 初始学习率</span>
set_dl_model_param (DLModelHandle, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">runtime_init</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">immediately</span><span style="color: rgba(128, 0, 0, 1)">'</span>)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 立即初始化运行时</span>

*** 创建训练配置 ​***<span style="color: rgba(0, 0, 0, 1)">
create_dl_train_param (DLModelHandle, </span><span style="color: rgba(128, 0, 128, 1)">20</span>, <span style="color: rgba(128, 0, 128, 1)">1</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">42</span>, [], [], TrainParam)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 参数说明：</span>
                                                                             * <span style="color: rgba(128, 0, 128, 1)">20</span><span style="color: rgba(0, 0, 0, 1)">: 训练轮次
                                                                             </span>* <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">: 每1个epoch验证一次
                                                                             </span>* <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">: 显示进度条
                                                                             </span>* <span style="color: rgba(128, 0, 128, 1)">42</span><span style="color: rgba(0, 0, 0, 1)">: 固定随机种子

</span>*** 启动训练过程 ​***<span style="color: rgba(0, 0, 0, 1)">
train_dl_model (DLDataset, DLModelHandle, TrainParam, </span><span style="color: rgba(128, 0, 128, 1)">0</span>, TrainResults, TrainInfos, EvaluationInfos)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输出训练指标</span>

*** 加载最佳模型 ​***<span style="color: rgba(0, 0, 0, 1)">
read_dl_model (</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">model_best.hdl</span><span style="color: rgba(128, 0, 0, 1)">'</span>, DLModelHandle)    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 加载验证集最优模型</span>
dev_disp_text (<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Press F5 to continue</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">window</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">bottom</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">left</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, [], [])  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 暂停提示</span>
<span style="color: rgba(0, 0, 0, 1)">stop ()
dev_close_window ()                                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 清理训练过程窗口</span>
dev_close_window ()</pre>
</div>
<p><span style="font-size: 16px">训练过程中可以看到我们的实时参数的变化情况，我们最好的平均AP是在第19次达到了0.74左右，如果我们的数据量足够多这个值还可以继续提升。</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250330144110451-1544859517.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 14pt">4. 模型性能评估&nbsp;</span></strong></p>
<div class="cnblogs_code">
<pre>*** 评估参数配置 ​***<span style="color: rgba(0, 0, 0, 1)">
create_dict (WindowDict)                           </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建窗口句柄字典</span>
<span style="color: rgba(0, 0, 0, 1)">create_dict (GenParamEval)                         
set_dict_tuple (GenParamEval, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">detailed_evaluation</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(0, 0, 255, 1)">true</span>)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 启用详细评估模式</span>
set_dict_tuple (GenParamEval, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">show_progress</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(0, 0, 255, 1)">true</span>)          <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示进度条</span>

*** 执行测试集评估 ​***<span style="color: rgba(0, 0, 0, 1)">
evaluate_dl_model (DLDataset, DLModelHandle, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">split</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">test</span><span style="color: rgba(128, 0, 0, 1)">'</span>, GenParamEval, EvaluationResult, EvalParams)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 在测试集上评估</span>

*** 可视化评估结果 ​***<span style="color: rgba(0, 0, 0, 1)">
create_dict (DisplayMode)
set_dict_tuple (DisplayMode, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">display_mode</span><span style="color: rgba(128, 0, 0, 1)">'</span>, [<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">pie_charts_precision</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">pie_charts_recall</span><span style="color: rgba(128, 0, 0, 1)">'</span>])  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示精确度/召回率饼图</span>
dev_display_detection_detailed_evaluation (EvaluationResult, EvalParams, DisplayMode, WindowDict)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 绘制可视化图表</span>
stop ()                                                         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 暂停查看结果</span>
dev_display_dl_data_close_windows (WindowDict)                  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 关闭评估窗口</span></pre>
</div>
<p>&nbsp;</p>
<p><span style="font-size: 16px">可以看到我们在测试集上的效果还是不错的，精确率和召回率都还挺高（当然这里是因为数据量太少导致的，数据量足够大，我们才可以得到更合适的模型）</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250330145011085-2146078472.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 14pt">5. 模型推理测试&nbsp;</span></strong></p>
<div class="cnblogs_code">
<pre>*** 准备测试数据 ​***<span style="color: rgba(0, 0, 0, 1)">
list_image_files (HalconImageDir, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">default</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">recursive</span><span style="color: rgba(128, 0, 0, 1)">'</span>, ImageFiles)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 递归获取所有测试图片</span>
tuple_shuffle (ImageFiles, ImageFilesShuffled)                        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 打乱图片顺序</span>

*** 配置推理参数 ​***<span style="color: rgba(0, 0, 0, 1)">
set_dl_model_param (DLModelHandle, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">batch_size</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">1</span>)                   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置单张推理模式</span>

*** 遍历测试图片 ​***
<span style="color: rgba(0, 0, 255, 1)">for</span> i := <span style="color: rgba(128, 0, 128, 1)">0</span> to |ImageFiles|-<span style="color: rgba(128, 0, 128, 1)">1</span> by <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
    read_image (Image, ImageFilesShuffled[i])                         </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 读取单张图像</span>
    gen_dl_samples_from_images (Image, DLSampleInference)             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 生成推理样本</span>
    preprocess_dl_samples (DLSampleInference, DLPreprocessParam)     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 执行预处理</span>
    
    *<span style="color: rgba(0, 0, 0, 1)">执行推理与可视化 ​
    apply_dl_model (DLModelHandle, DLSampleInference, [], DLResult)  </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 模型推理</span>
    dev_display_dl_data (DLSampleInference, DLResult, DLDataset, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">bbox_result</span><span style="color: rgba(128, 0, 0, 1)">'</span>, [], WindowDict)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示带框结果</span>
    dev_disp_text (<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Press Run (F5) to continue</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">window</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">bottom</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">right</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, [], [])   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 操作提示</span>
    stop ()                                                         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 逐张查看结果</span>
<span style="color: rgba(0, 0, 0, 1)">endfor

</span>*** 清理资源 ​***<span style="color: rgba(0, 0, 0, 1)">
dev_display_dl_data_close_windows (WindowDict)  </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 关闭所有推理窗口</span></pre>
</div>
<p>&nbsp;</p>
<p><span style="font-size: 16px">这里就是把图片一个个传入进去，然后得到每个分类的结果了</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250330145252977-779559473.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250330145303012-1097974477.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 16px">　　整体上就是这样了，注释我都打的比较清楚，项目demo的百度云代码也给了，重要的算子也是解析很全了，应该理解起来不难吧，如果还有一些名词不懂可以在百度一下。halcon的深度学习的模型还是比较一般的，后面我可能会写目前公认比较优秀的yolo目标检测的深度学习，有兴趣可以关注一下。</span></p>
<p><span style="font-size: 16px">　　其实我的想法就是不要把深度学习想的太难，因为你又不是博士或者硕士里的顶尖大牛，归根结底我们只能做应用而已，只要会使用这些模型就可以了，设计神经网络什么的都是年薪几百几千万的大牛们去做的事情。</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 16px">最后的最后，望与诸君共勉。</span></p>
<p>&nbsp;</p>
</div>
<div id="MySignature" role="contentinfo">
    转发和使用本文，请注明作者信息和原文地址---本文原作者为aircraft

---大家好我是徐飞机，有没有大佬们的公司招c++开发/图像处理/opengl/opencv/halcon实习的啊，带上我一个呗QAQ。。。hhhhhh  想要免费获取前端，后端，c/c++,matlab，Python，opencv，机器学习，深度学习，安卓，java，等等全套视频教程请关注机器视觉开发公众号，转发集赞28即可百度云获得hhhhhhhh
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.04327546436226852" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-30 15:16">2025-03-30 14:59</span>&nbsp;
<a href="https://www.cnblogs.com/DOMLX">aircraft</a>&nbsp;
阅读(<span id="post_view_count">7</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18800645" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18800645);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18800645', targetLink: 'https://www.cnblogs.com/DOMLX/p/18800645', title: 'halcon 深度学习教程（三） 目标检测之水果分类' })">举报</a>
</div>
        