
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zpcdbky/p/18811970" title="发布于 2025-04-13 10:27">
    <span role="heading" aria-level="2">虚函数表里有什么？（三）——普通多继承下的虚函数表</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        本文首先探索了普通多继承（没有虚继承）下完整对象的构造过程，详细展示了虚表指针是如何动态变化的，并解释了其背后的原因。接下来，给出了对象和虚函数表的完整内存布局。最后，介绍了用于调整this指针的non-virtual thunk函数，以及表示多继承或虚拟继承下对象typeinfo信息的__vmi_class_type_info类。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>导言</h1>
<p>本篇探究普通多继承（没有虚继承）下的虚函数表。示例代码如下：</p>
<div class="cnblogs_code">
<pre>#include &lt;iostream&gt;

<span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> X { 
    </span><span style="color: rgba(0, 0, 255, 1)">virtual</span> ~<span style="color: rgba(0, 0, 0, 1)">X() {}
    </span><span style="color: rgba(0, 0, 255, 1)">virtual</span> <span style="color: rgba(0, 0, 255, 1)">void</span> zoo() { std::cout &lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">X::zoo()\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">; }
    </span><span style="color: rgba(0, 0, 255, 1)">int</span> x_data = <span style="color: rgba(128, 0, 128, 1)">100</span><span style="color: rgba(0, 0, 0, 1)">;
};
</span><span style="color: rgba(0, 0, 255, 1)">struct</span> A : <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> X {
    A() { </span><span style="color: rgba(0, 0, 255, 1)">this</span>-&gt;<span style="color: rgba(0, 0, 0, 1)">funA(); }
    </span><span style="color: rgba(0, 0, 255, 1)">virtual</span> <span style="color: rgba(0, 0, 255, 1)">void</span> funA() { std::cout &lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">A::funA()\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">; }
    </span><span style="color: rgba(0, 0, 255, 1)">virtual</span> ~<span style="color: rgba(0, 0, 0, 1)">A() {}
    </span><span style="color: rgba(0, 0, 255, 1)">int</span> a_data = <span style="color: rgba(128, 0, 128, 1)">200</span><span style="color: rgba(0, 0, 0, 1)">;
};
</span><span style="color: rgba(0, 0, 255, 1)">struct</span> B : <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> X {
    B() { </span><span style="color: rgba(0, 0, 255, 1)">this</span>-&gt;<span style="color: rgba(0, 0, 0, 1)">funB(); }
    </span><span style="color: rgba(0, 0, 255, 1)">virtual</span> <span style="color: rgba(0, 0, 255, 1)">void</span> funB() { std::cout &lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">B::funB()\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">; }
    </span><span style="color: rgba(0, 0, 255, 1)">virtual</span> ~<span style="color: rgba(0, 0, 0, 1)">B() {}
    </span><span style="color: rgba(0, 0, 255, 1)">int</span> b_data = <span style="color: rgba(128, 0, 128, 1)">300</span><span style="color: rgba(0, 0, 0, 1)">;
};
</span><span style="color: rgba(0, 0, 255, 1)">struct</span> C : <span style="color: rgba(0, 0, 255, 1)">public</span> A, <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> B {
    </span><span style="color: rgba(0, 0, 255, 1)">virtual</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> foo() {}
    </span><span style="color: rgba(0, 0, 255, 1)">virtual</span> <span style="color: rgba(0, 0, 255, 1)">void</span> funA() <span style="color: rgba(0, 0, 255, 1)">override</span> { std::cout &lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">C::funA()\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">; }
    </span><span style="color: rgba(0, 0, 255, 1)">virtual</span> <span style="color: rgba(0, 0, 255, 1)">void</span> funB() <span style="color: rgba(0, 0, 255, 1)">override</span> { std::cout &lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">C::funB()\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">; }
    </span><span style="color: rgba(0, 0, 255, 1)">virtual</span> ~<span style="color: rgba(0, 0, 0, 1)">C() {};
    </span><span style="color: rgba(0, 0, 255, 1)">int</span> c_data = <span style="color: rgba(128, 0, 128, 1)">400</span><span style="color: rgba(0, 0, 0, 1)">;
};

</span><span style="color: rgba(0, 0, 255, 1)">int</span> main(<span style="color: rgba(0, 0, 255, 1)">int</span> argc, <span style="color: rgba(0, 0, 255, 1)">char</span> *<span style="color: rgba(0, 0, 0, 1)">argv[])
{
    C </span>*p = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> C;
    p</span>-&gt;<span style="color: rgba(0, 0, 0, 1)">foo();
    </span><span style="color: rgba(0, 0, 255, 1)">delete</span><span style="color: rgba(0, 0, 0, 1)"> p;
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
}</span></pre>
</div>
<h1>构造过程</h1>
<p>我们首先跟踪C类实例的构造过程，看看构造过程中都发生了什么。读者可以使用&nbsp;<span class="cnblogs_code">g++ -g -O2 -fno-inline main.cpp -o main</span>&nbsp;命令编译上述代码，在&nbsp;<span class="cnblogs_code">C *p = new C;</span>&nbsp;一句处打断点，然后单步执行汇编。这里我们给出<a href="https://godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:c%2B%2B,selection:(endColumn:18,endLineNumber:30,positionColumn:18,positionLineNumber:30,selectionStartColumn:18,selectionStartLineNumber:30,startColumn:18,startLineNumber:30),source:'%23include+%3Ciostream%3E%0A%0Astruct+X+%7B+%0A++++virtual+~X()+%7B%7D%0A++++virtual+void+zoo()+%7B+std::cout+%3C%3C+%22X::zoo()%5Cn%22%3B+%7D%0A++++int+x_data+%3D+100%3B%0A%7D%3B%0Astruct+A+:+public+X+%7B%0A++++A()+%7B+this-%3EfunA()%3B+%7D%0A++++virtual+void+funA()+%7B+std::cout+%3C%3C+%22A::funA()%5Cn%22%3B+%7D%0A++++virtual+~A()+%7B%7D%0A++++int+a_data+%3D+200%3B%0A%7D%3B%0Astruct+B+:+public+X+%7B%0A++++B()+%7B+this-%3EfunB()%3B+%7D%0A++++virtual+void+funB()+%7B+std::cout+%3C%3C+%22B::funB()%5Cn%22%3B+%7D%0A++++virtual+~B()+%7B%7D%0A++++int+b_data+%3D+300%3B%0A%7D%3B%0Astruct+C+:+public+A,+public+B+%7B%0A++++virtual+void+foo()+%7B%7D%0A++++virtual+void+funA()+override+%7B+std::cout+%3C%3C+%22C::funA()%5Cn%22%3B+%7D%0A++++virtual+void+funB()+override+%7B+std::cout+%3C%3C+%22C::funB()%5Cn%22%3B+%7D%0A++++virtual+~C()+%7B%7D%3B%0A++++int+c_data+%3D+400%3B%0A%7D%3B%0A%0Aint+main(int+argc,+char+*argv%5B%5D)%0A%7B%0A++++C+*p+%3D+new+C%3B%0A++++p-%3Efoo()%3B%0A++++delete+p%3B%0A++++return+0%3B%0A%7D'),l:'5',n:'0',o:'C%2B%2B+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((g:!((h:compiler,i:(compiler:g142,filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'0',intel:'1',libraryCode:'0',trim:'1',verboseDemangling:'0'),flagsViewOpen:'1',fontScale:13,fontUsePx:'0',j:1,lang:c%2B%2B,libs:!(),options:'-g+-O2+-fno-inline',overrides:!(),selection:(endColumn:53,endLineNumber:105,positionColumn:53,positionLineNumber:105,selectionStartColumn:1,selectionStartLineNumber:97,startColumn:1,startLineNumber:97),source:1),l:'5',n:'0',o:'+x86-64+gcc+14.2+(Editor+%231)',t:'0')),k:50,l:'4',m:82.96199213630406,n:'0',o:'',s:0,t:'0'),(g:!((h:output,i:(compilerName:'x86-64+clang+17.0.1',editorid:1,fontScale:14,fontUsePx:'0',j:1,wrap:'1'),l:'5',n:'0',o:'Output+of+x86-64+gcc+14.2+(Compiler+%231)',t:'0')),header:(),l:'4',m:17.03800786369594,n:'0',o:'',s:0,t:'0')),k:50,l:'3',n:'0',o:'',t:'0')),l:'2',n:'0',o:'',t:'0')),version:4" target="_blank" rel="noopener nofollow">Compiler Explorer</a>中的汇编代码，因为它没有name mangling，更加易懂。</p>
<h2>step1：分配内存，调用C::C()</h2>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">main:</span><span style="color: rgba(0, 0, 0, 1)">
        pushq   %r14
        movl    $</span><span style="color: rgba(128, 0, 128, 1)">40</span><span style="color: rgba(0, 0, 0, 1)">, %edi # 分配40字节的内存
        pushq   %rbx
        subq    $</span><span style="color: rgba(128, 0, 128, 1)">8</span><span style="color: rgba(0, 0, 0, 1)">, %rsp
        </span><span style="color: rgba(0, 0, 255, 1)">call</span><span style="color: rgba(0, 0, 0, 1)">    operator new(unsigned long) # 调用new操作符分配内存
        movq    %rax, %rdi # %rax中保存了new返回的地址，把该地址存入%rdi，作为调用C类构造函数的第一个参数（即this指针）
        movq    %rax, %rbx # 保存到%rbx是为了析构时用
        </span><span style="color: rgba(0, 0, 255, 1)">call</span>    <span style="color: rgba(0, 128, 128, 1)">C:</span>:C() [complete object constructor] # 调用C类的对象构造函数</pre>
</div>
<h2>step2：构造基类子对象</h2>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">C:</span><span style="color: rgba(0, 0, 0, 1)">:C() [base object constructor]:
        pushq   %rbx
        movq    %rdi, %rbx
        </span><span style="color: rgba(0, 0, 255, 1)">call</span>    <span style="color: rgba(0, 128, 128, 1)">A:</span><span style="color: rgba(0, 0, 0, 1)">:A() [base object constructor]
        leaq    </span><span style="color: rgba(128, 0, 128, 1)">16</span>(%rbx), %rdi # 调整this指针，为调用B::B()做准备<span style="color: rgba(0, 0, 255, 1)">call</span>    <span style="color: rgba(0, 128, 128, 1)">B:</span><span style="color: rgba(0, 0, 0, 1)">:B() [base object constructor]
        movq    $vtable for C+</span><span style="color: rgba(128, 0, 128, 1)">16</span><span style="color: rgba(0, 0, 0, 1)">, (%rbx) # 覆盖A类的虚表指针
        movq    $vtable for C+</span><span style="color: rgba(128, 0, 128, 1)">80</span>, <span style="color: rgba(128, 0, 128, 1)">16</span><span style="color: rgba(0, 0, 0, 1)">(%rbx) # 覆盖B类的虚表指针
        movl    $</span><span style="color: rgba(128, 0, 128, 1)">400</span>, <span style="color: rgba(128, 0, 128, 1)">32</span><span style="color: rgba(0, 0, 0, 1)">(%rbx) # 初始化c_data
        popq    %rbx
        </span><span style="color: rgba(0, 0, 255, 1)">ret</span>
<span style="color: rgba(0, 128, 128, 1)">X:</span><span style="color: rgba(0, 0, 0, 1)">:X() [base object constructor]:
        movq    $vtable for X+</span><span style="color: rgba(128, 0, 128, 1)">16</span><span style="color: rgba(0, 0, 0, 1)">, (%rdi) # 将X类的虚表指针放到内存的前8个字节（this指针指向的位置）
        movl    $</span><span style="color: rgba(128, 0, 128, 1)">100</span>, <span style="color: rgba(128, 0, 128, 1)">8</span>(%rdi) # 在接下来的内存中存入X::x_data<span style="color: rgba(0, 0, 255, 1)">ret</span>
<span style="color: rgba(0, 128, 128, 1)">A:</span><span style="color: rgba(0, 0, 0, 1)">:A() [base object constructor]:
        pushq   %rbx
        movq    %rdi, %rbx # 保存首地址（this指针）
        </span><span style="color: rgba(0, 0, 255, 1)">call</span>    <span style="color: rgba(0, 128, 128, 1)">X:</span><span style="color: rgba(0, 0, 0, 1)">:X() [base object constructor]
        movq    $vtable for A+</span><span style="color: rgba(128, 0, 128, 1)">16</span><span style="color: rgba(0, 0, 0, 1)">, (%rbx) # 将A类的虚表指针放到内存的前8个字节（this指针指向的位置），这覆盖了之前X的虚表指针
        movq    %rbx, %rdi # 将this放入%rbi，
        movl    $</span><span style="color: rgba(128, 0, 128, 1)">200</span>, <span style="color: rgba(128, 0, 128, 1)">12</span>(%rbx) # 在接下来的内存中存入A::a_data<span style="color: rgba(0, 0, 255, 1)">call</span>    <span style="color: rgba(0, 128, 128, 1)">A:</span><span style="color: rgba(0, 0, 0, 1)">:funA()
        popq    %rbx
        </span><span style="color: rgba(0, 0, 255, 1)">ret</span></pre>
</div>
<p>&nbsp;</p>
<p>首先构造基类A，而A自己也有基类，所以先构造基类X，过程详见注释。构造完成后，内存布局如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/642223/202504/642223-20250407014249932-290121409.png" alt="" style="width: 1200px; height: auto"></p>
<p>基类X构造完成后，流程再次回到A类的构造函数中。我们看到，&nbsp;<span class="cnblogs_code">A::A()</span>&nbsp;将A类的虚表指针写入到了内存的前8个字节当中了，覆盖了之前A类的虚表指针！其实，这么做是合理的。假设我们在&nbsp;<span class="cnblogs_code">X::X()</span>&nbsp;中调用虚函数，该使用那个版本的虚函数呢？自己的？还是派生类重写的？假设我们在&nbsp;<span class="cnblogs_code">X::X()</span>&nbsp;中调用&nbsp;<span class="cnblogs_code">typeid</span>&nbsp;操作符，该返回什么类型呢？X类型？A类型？C类型？在&nbsp;<span class="cnblogs_code">X::X()</span>&nbsp;内部，它并不知道构造的是独立的X对象，还是某个完整对象的基类子对象（正如本例），而且，即便是基类子对象，调用派生类的虚函数也是有危险的。因为，此次时刻，正在构造基类子对象，派生类的部分还没有构造，派生类独有的数据成员自然也没有初始化，这个时候调用派生类的虚函数，如果该函数读写了派生类独有的数据成员，结果将是未定义的。因此，在&nbsp;<span class="cnblogs_code">X::X()</span>&nbsp;中，只能调用X类自己版本的虚函数，&nbsp;<span class="cnblogs_code">typeid</span>&nbsp;也只能返回X类型（完整对象还没有构造完）。所以，在构造X类时，应当使用X类自己的虚函数表。</p>
<p>当流程再次回到&nbsp;<span class="cnblogs_code">A::A()</span>&nbsp;，A的基类子对象X已经构造完了，因此，它可以使用使用自己的数据和函数，也可以使用基类子对象X的，所以，此时可以把虚表指针指向A类自己的虚函数表了。但还不能用派生类的虚函数，所以，当&nbsp;<span class="cnblogs_code">A::A()</span>&nbsp;里调用&nbsp;<span class="cnblogs_code">funA</span>&nbsp;时，生成的汇编代码直接是&nbsp;<span class="cnblogs_code">call A::funA()</span>&nbsp;，相当于静态绑定。</p>
<p>还有一点需要注意，正常应该是先初始化数据成员（这里是&nbsp;<span class="cnblogs_code">A::a_data</span>&nbsp;），再执行构造函数的函数体（这里是&nbsp;<span class="cnblogs_code">this-&gt;funA();</span>&nbsp;）的，但上面的汇编代码，是反过来的，这是我们编译时开了&nbsp;<span class="cnblogs_code">-O2</span>&nbsp;优化的缘故。</p>
<p>&nbsp;<span class="cnblogs_code">A::A()</span>&nbsp;执行完成后，对象布局如下。</p>
<p><img src="https://img2024.cnblogs.com/blog/642223/202504/642223-20250407014434676-332130765.png" alt="" style="width: 1200px; height: auto"></p>
<p>至此，和构造一个独立的A对象没有区别。细心的读者可能发现了，在构造函数后面，有的标着complete object constructor，而有的标着base object constructor，在本例中，两者其实是同一个函数的别名。等到我们讲到虚拟继承时，再来看它们之间的区别。</p>
<p><img src="https://img2024.cnblogs.com/blog/642223/202504/642223-20250406225510498-650549623.png" alt="" loading="lazy"></p>
<p>构造完A类后，接着将&nbsp;<span class="cnblogs_code">this</span>&nbsp;指针加上16字节，作为新的&nbsp;<span class="cnblogs_code">this</span>&nbsp;指针，调用&nbsp;<span class="cnblogs_code">B::B()</span>&nbsp;，开始构造B类子对象。这个过程和A类子对象的构造过程如出一辙，我们略过不表。完成后，对象内存布局如下。</p>
<p><img src="https://img2024.cnblogs.com/blog/642223/202504/642223-20250408084504417-1730531629.png" alt="" style="width: 1200px; height: auto"></p>
<h2>step3：构造派生类部分</h2>
<p>流程再次回到&nbsp;<span class="cnblogs_code">C::C()</span>&nbsp;，因为所有基类子对象都已构造完毕，进入到构造完整对象阶段，可以放心得让虚表指针指向C类的虚函数表了。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">C:</span><span style="color: rgba(0, 0, 0, 1)">:C() [base object constructor]:
        pushq   %rbx
        movq    %rdi, %rbx
        </span><span style="color: rgba(0, 0, 255, 1)">call</span>    <span style="color: rgba(0, 128, 128, 1)">A:</span><span style="color: rgba(0, 0, 0, 1)">:A() [base object constructor]
        leaq    </span><span style="color: rgba(128, 0, 128, 1)">16</span><span style="color: rgba(0, 0, 0, 1)">(%rbx), %rdi
        </span><span style="color: rgba(0, 0, 255, 1)">call</span>    <span style="color: rgba(0, 128, 128, 1)">B:</span><span style="color: rgba(0, 0, 0, 1)">:B() [base object constructor]
     =&gt; movq    $vtable for C+</span><span style="color: rgba(128, 0, 128, 1)">16</span><span style="color: rgba(0, 0, 0, 1)">, (%rbx) # 覆盖A类的虚表指针
        movq    $vtable for C+</span><span style="color: rgba(128, 0, 128, 1)">80</span>, <span style="color: rgba(128, 0, 128, 1)">16</span><span style="color: rgba(0, 0, 0, 1)">(%rbx) # 覆盖B类的虚表指针
        movl    $</span><span style="color: rgba(128, 0, 128, 1)">400</span>, <span style="color: rgba(128, 0, 128, 1)">32</span><span style="color: rgba(0, 0, 0, 1)">(%rbx) # 初始化c_data
        popq    %rbx
        </span><span style="color: rgba(0, 0, 255, 1)">ret</span></pre>
</div>
<p>最终的内存布局如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/642223/202504/642223-20250407013700018-1227493183.png" alt="" style="width: 1200px; height: auto"></p>
<h1>内存布局规律<a name="mem_layout"></a></h1>
<p>可以看到，在对象和vtable的内存布局上：</p>
<ul>
<li>按声明顺序依次存放各个基类子对象的虚表指针和非static数据成员，最后存放派生类自己的非static数据成员。</li>
<li>完整对象和第一个基类子对象（也称为<a href="https://itanium-cxx-abi.github.io/cxx-abi/abi.html#definitions" target="_blank" rel="noopener nofollow">primary base class</a>）共用一个虚表指针，其余基类子对象各有一个虚表指针。</li>
<li>基类子对象的虚表指针指向的是完整对象的vtable，而不是它们自己的vtable。以基类子对象B为例，虚表指针指向了vtable for C + 80的位置，而不是vtable for B + 16。这是实现RTTI的关键。从&nbsp;<span class="cnblogs_code">0x555555557cd0</span>&nbsp;到&nbsp;<span class="cnblogs_code">0x555555557cff</span>&nbsp;，是B作为C的基类子对象时对应的虚函数表。其中，top_offset是-16，因为从基类子对象B的首地址到完整对象C的首地址，正好差了16字节。typeinfo指针也指向了C类的typeinfo对象，而不是B类自己的，这是因为现在的完整对象是C类型而不是B类型。这样，B类的指针或引用指向C类实例时，通过&nbsp;<span class="cnblogs_code">typeid</span>&nbsp;获取到的就是类型C（即实际对象的类型）了，在&nbsp;<span class="cnblogs_code">dynamic_cast</span>&nbsp;中，也能通过基类子对象的指针获取到完整对象的类型。</li>
<li>完整对象C的vtable的内存布局如下：首先是第一个直接基类A的虚函数表，其中typeinfo信息是C类的，并且，如果C类重写了A类某些虚函数，对应条目要换成C类版本的（比如这里的&nbsp;<span class="cnblogs_code">C::funA()</span>&nbsp;）。接着是C类自己的虚函数（比如这里的&nbsp;<span class="cnblogs_code">C::foo()</span>&nbsp;），再接下来是C类重写的其它基类的虚函数，按声明顺序排列（比如这里的&nbsp;<span class="cnblogs_code">C::funB()</span>&nbsp;）。剩下的，就是其余各个基类的虚函数表，包括了top_offset、typeinfo（都指向C类typeinfo信息）、没有被override的虚函数、被override的虚函数（实际上是non-virtual thunk to的形式，后面详细介绍）等信息。</li>
</ul>
<h1>non-virtual thunk to function</h1>
<p>在C类的vtable中，出现了之前没有介绍过的条目&nbsp;<span class="cnblogs_code">non-virtual thunk to C::~C()</span>&nbsp;和&nbsp;<span class="cnblogs_code">non-virtual thunk to C::funB()</span>&nbsp;。这是什么呢？别急，先考虑下面的问题。</p>
<div class="cnblogs_code">
<pre>C *pc = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> C;
B </span>*pb = pc;</pre>
</div>
<p>请问，&nbsp;<span class="cnblogs_code">pb</span>&nbsp;和&nbsp;<span class="cnblogs_code">pc</span>&nbsp;相等吗？不相等！这里进行了隐式类型转换，&nbsp;<span class="cnblogs_code">pb</span>&nbsp;指向了完整对象中的基类子对象，以上图为例的话，就是&nbsp;<span class="cnblogs_code">pc = 0x55555556aeb0</span>&nbsp;，&nbsp;<span class="cnblogs_code">pb = 0x55555556aec0</span>&nbsp;，&nbsp;<span class="cnblogs_code">pb</span>&nbsp;比&nbsp;<span class="cnblogs_code">pc</span>&nbsp;多16字节。现在，假设要执行&nbsp;<span class="cnblogs_code">pb-&gt;funcB();</span>&nbsp;，根据多态性，应该执行&nbsp;<span class="cnblogs_code">C::funcB()</span>&nbsp;才对，但现在&nbsp;<span class="cnblogs_code">this</span>&nbsp;指针指向的却不是完整对象C，而是基类子对象B，不配套了。因此，需要在调用&nbsp;<span class="cnblogs_code">C::funcB()</span>&nbsp;前调整&nbsp;<span class="cnblogs_code">this</span>&nbsp;指针的值，non-virtual thunk函数就是做这个事情的，因为是非虚继承，因此是non-virtual。让我们来看看&nbsp;<span class="cnblogs_code">non-virtual thunk to C::funcB()</span>&nbsp;做了什么？</p>
<div class="cnblogs_code">
<pre>non-virtual thunk to <span style="color: rgba(0, 128, 128, 1)">C:</span><span style="color: rgba(0, 0, 0, 1)">:funB():
        subq    $</span><span style="color: rgba(128, 0, 128, 1)">16</span><span style="color: rgba(0, 0, 0, 1)">, %rdi # this减去16，由指向基类子对象B改为指向完整对象C
        </span><span style="color: rgba(0, 0, 255, 1)">jmp</span>     .LTHUNK0</pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/642223/202504/642223-20250410225110298-1069289615.png" alt="" loading="lazy"></p>
<p>其中&nbsp;<span class="cnblogs_code">.LTHUNK0</span>&nbsp;是&nbsp;<span class="cnblogs_code">C::funcB()</span>&nbsp;的别名，可见，所谓的thunk函数，就是调整指针后再执行真正要执行的函数。</p>
<h1>__vmi_class_type_info</h1>
<p><a href="https://itanium-cxx-abi.github.io/cxx-abi/abi.html#rtti-layout" target="_blank" rel="noopener nofollow">ltanium C++ ABI</a>规定，表示typeinfo的类一共有3个：</p>
<ul>
<li>&nbsp;<span class="cnblogs_code">__class_type_info</span>&nbsp;：用于没有基类的多态类，比如本文中的类X。</li>
<li>&nbsp;<span class="cnblogs_code">__si_class_type_info</span>&nbsp;：如果一个类只有一个基类，并且该基类是公共的（public继承）、非虚的（不是虚继承），那么，这个类的typeinfo信息就用&nbsp;<span class="cnblogs_code">__si_class_type_info</span>&nbsp;表示，比如本文中的类A和类B。</li>
<li>&nbsp;<span class="cnblogs_code">__vmi_class_type_info</span>&nbsp;：用于除上述两种情况外的所有其它情况，比如多继承、虚拟继承等。</li>
</ul>
<p>我们在之前的文章中已经详细介绍过前两个类，现在重点介绍&nbsp;<span class="cnblogs_code">__vmi_class_type_info</span>&nbsp;，它的定义如下（仅保留数据成员，完整定义请参考<a href="https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L541" target="_blank" rel="noopener nofollow">源文件</a>）：</p>
<div class="cnblogs_code">
<pre>  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Type information for a class with multiple and/or virtual bases.</span>
  <span style="color: rgba(0, 0, 255, 1)">class</span> __vmi_class_type_info : <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> __class_type_info
  {
  </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)">:
    unsigned </span><span style="color: rgba(0, 0, 255, 1)">int</span>         __flags;  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Details about the class hierarchy.</span>
    unsigned <span style="color: rgba(0, 0, 255, 1)">int</span>         __base_count;  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Number of direct bases.

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> The array of bases uses the trailing array struct hack so this
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> class is not constructable with a normal constructor. It is
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> internally generated by the compiler.</span>
    __base_class_type_info     __base_info[<span style="color: rgba(128, 0, 128, 1)">1</span>];  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Array of bases.

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Implementation defined types.</span>
    <span style="color: rgba(0, 0, 255, 1)">enum</span><span style="color: rgba(0, 0, 0, 1)"> __flags_masks
      {
    __non_diamond_repeat_mask </span>= <span style="color: rgba(128, 0, 128, 1)">0x1</span>, <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Distinct instance of repeated base. 非菱形继承，有重复的基类</span>
    __diamond_shaped_mask = <span style="color: rgba(128, 0, 128, 1)">0x2</span>, <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Diamond shaped multiple inheritance.</span>
    __flags_unknown_mask = <span style="color: rgba(128, 0, 128, 1)">0x10</span><span style="color: rgba(0, 0, 0, 1)">
      }; 
  };</span></pre>
</div>
<p>让我们依次解释各个成员的含义，推荐读者对照着前面的图示来理解。</p>
<h2>__flags &amp; __base_count</h2>
<p>&nbsp;<span class="cnblogs_code">__flags</span>&nbsp;表示继承的类型，是&nbsp;<span class="cnblogs_code">enum __flags_masks</span>&nbsp;中各个值按位或的结果。对文本中的例子而言，因为是非菱形继承，有重复的基类，因此是&nbsp;<span class="cnblogs_code">__non_diamond_repeat_mask</span>&nbsp;，即1。</p>
<p>&nbsp;<span class="cnblogs_code">__base_count</span>&nbsp;表示直接基类的个数，对文本中的例子而言，C有两个直接基类A和B，因此&nbsp;<span class="cnblogs_code">__base_count</span>&nbsp;是2。</p>
<h2>__base_info</h2>
<p>&nbsp;<span class="cnblogs_code">__base_info</span>&nbsp;是一个数组，保存了各个直接基类的信息，一共有几个基类，数组中就有几个元素。正如注释所说，这里使用了称为trailing array struct hack的编程技巧，简单说就是可变长度的数组，感兴趣的读者请自行学习。让我们来看看&nbsp;&nbsp;<span class="cnblogs_code">__base_class_type_info</span>&nbsp;里有什么。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> __base_class_type_info
  {
  </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)">:
    </span><span style="color: rgba(0, 0, 255, 1)">const</span> __class_type_info*     __base_type;  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Base class type.</span>
<span style="color: rgba(0, 0, 0, 1)">#ifdef _GLIBCXX_LLP64
    </span><span style="color: rgba(0, 0, 255, 1)">long</span> <span style="color: rgba(0, 0, 255, 1)">long</span>            __offset_flags;  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Offset and info.</span>
<span style="color: rgba(0, 0, 255, 1)">#else</span>
    <span style="color: rgba(0, 0, 255, 1)">long</span>             __offset_flags;  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Offset and info.</span>
<span style="color: rgba(0, 0, 255, 1)">#endif</span>

    <span style="color: rgba(0, 0, 255, 1)">enum</span><span style="color: rgba(0, 0, 0, 1)"> __offset_flags_masks
      {
    __virtual_mask </span>= <span style="color: rgba(128, 0, 128, 1)">0x1</span><span style="color: rgba(0, 0, 0, 1)">,
    __public_mask </span>= <span style="color: rgba(128, 0, 128, 1)">0x2</span><span style="color: rgba(0, 0, 0, 1)">,
    __hwm_bit </span>= <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">,
    __offset_shift </span>= <span style="color: rgba(128, 0, 128, 1)">8</span>          <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Bits to shift offset.</span>
<span style="color: rgba(0, 0, 0, 1)">      };

    </span><span style="color: rgba(0, 0, 255, 1)">bool</span> __is_virtual_p() <span style="color: rgba(0, 0, 255, 1)">const</span> { <span style="color: rgba(0, 0, 255, 1)">return</span> __offset_flags &amp;<span style="color: rgba(0, 0, 0, 1)"> __virtual_mask; }
    </span><span style="color: rgba(0, 0, 255, 1)">bool</span> __is_public_p() <span style="color: rgba(0, 0, 255, 1)">const</span> { <span style="color: rgba(0, 0, 255, 1)">return</span> __offset_flags &amp;<span style="color: rgba(0, 0, 0, 1)"> __public_mask; }
    ptrdiff_t __offset() </span><span style="color: rgba(0, 0, 255, 1)">const</span> { <span style="color: rgba(0, 0, 255, 1)">return</span> static_cast&lt;ptrdiff_t&gt;(__offset_flags) &gt;&gt;<span style="color: rgba(0, 0, 0, 1)"> __offset_shift; }
  };</span></pre>
</div>
<p>&nbsp;</p>
<p>其中，&nbsp;<span class="cnblogs_code">__class_type_info</span>&nbsp;指向了基类的typeinfo信息，而&nbsp;<span class="cnblogs_code">__offset_flags</span>&nbsp;同时包含了标志位和offset信息。&nbsp;<span class="cnblogs_code">__hwm_bit = 2</span>&nbsp;（hwm是High Water Mark的意思）表明了最低的2 bit用来储存继承关系，即&nbsp;<span class="cnblogs_code">__virtual_mask = 0x1</span>&nbsp;和&nbsp;<span class="cnblogs_code">__public_mask = 0x2</span>&nbsp;。&nbsp;<span class="cnblogs_code">__offset_shift = 8</span>&nbsp;表示从第8 bit开始，储存的是基类子对象在完整对象中的偏移量。而第2 bit到第7 bit，目前暂未使用，留待未来扩展。以B类子对象为例，它的&nbsp;<span class="cnblogs_code">__offset_flags</span>&nbsp;字段是0x1002，最低2 bit是&nbsp;<span class="cnblogs_code">10</span>&nbsp;，表明是public继承，不是virtual继承。&nbsp;<span class="cnblogs_code">0x1002 &gt;&gt; 8 = 0x10 </span>&nbsp;，表明子对象到完整对象的偏移量是16，正好和top_offset对得上。</p>
<h1>总结</h1>
<ul>
<li>在完整对象的构造/析构过程中，其虚表指针是随着构造/析构阶段不断变化的，正在构造/析构哪个对象，该对象就相当于“完整对象”，虚表指针就指向该对象的vtable。因为C++标准规定，在对象的构造/析构期间，对象的动态类型被认为是正在构造/析构的那个类，而不是最终派生出的完整类型。</li>
<li>在对象的构造/析构阶段，如果在构造函数/析构函数中直接或者间接调用虚函数，就相当于静态调用，即只能调用当前正在构造/析构的那个类自己或者其基类的虚函数，不能调用其派生类的虚函数。例如，在本文例子中，当构造到子对象A时，只能调用A类或者其基类X类中的虚函数，不能调用C类中的虚函数。（<a href="https://eel.is/c++draft/class.cdtor#4" target="_blank" rel="noopener nofollow">参考资料</a>）</li>
<li>多重继承下的对象和vtable遵循特定的内存布局，详见<a href="#mem_layout" target="_blank" rel="noopener nofollow">上文</a>。</li>
<li>当派生类指针赋值给基类指针时，会发生隐式转换，基类指针的值是基类子对象的首地址。当用基类指针调用派生类虚函数时，需要调整&nbsp;<span class="cnblogs_code">this</span>&nbsp;指针，这一步由&nbsp;<span class="cnblogs_code">non-virtual thunk to xxx</span>&nbsp;函数或者&nbsp;<span class="cnblogs_code">virtual thunk to xxx</span>&nbsp;函数完成。</li>
<li>多重继承或虚拟继承下，类型的typeinfo信息由&nbsp;<span class="cnblogs_code">__vmi_class_type_info</span>&nbsp;定义，该类记录了类的继承方式、基类的类型、基类子对象到完整对象的偏移量等RTTI需要的信息。</li>
</ul>
<p>由于在下才疏学浅，能力有限，错误疏漏之处在所难免，恳请广大读者批评指正，您的批评是在下前进的不竭动力。</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.006434703787037037" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-13 10:27">2025-04-13 10:27</span>&nbsp;
<a href="https://www.cnblogs.com/zpcdbky">同勉共进</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18811970);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18811970', targetLink: 'https://www.cnblogs.com/zpcdbky/p/18811970', title: '虚函数表里有什么？（三）——普通多继承下的虚函数表' })">举报</a>
</div>
        