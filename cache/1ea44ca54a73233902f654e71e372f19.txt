
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/toplist/p/18955480" title="发布于 2025-07-07 08:33">
    <span role="heading" aria-level="2">架构师必备：业务扩展模式选型</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        业务发展过程中，增加字段是很常见、频繁的，因此怎么存储新增的字段是要重点考虑的因素。下面结合笔者的经验，总结一下各种业务扩展模式选型的优缺点、适用场景，如何让系统保持良好的业务扩展性。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>业务发展过程中，增加字段是很常见、频繁的，因此怎么存储新增的字段是要重点考虑的因素。下面结合笔者的经验，总结一下各种业务扩展模式选型的优缺点、适用场景，如何让系统保持良好的业务扩展性。</p>
<h1 id="方案选项">方案选项</h1>
<h2 id="1-最朴素方案mysql表直接加字段">1. 最朴素方案：MySQL表直接加字段</h2>
<ul>
<li>
<p>实现：<br>
在表中新增字段（<code>ALTER TABLE ... ADD COLUMN ...</code>）。</p>
</li>
<li>
<p>优点：</p>
<ul>
<li>简单直接，快速迭代</li>
</ul>
</li>
<li>
<p>缺点：</p>
<ul>
<li>需要频繁修改表结构</li>
<li>字段膨胀导致表臃肿，索引效率下降（mysql单行记录有大小上限，65535字节；特别地，TEXT、BLOB另外分开存储，占9到12字节）</li>
</ul>
</li>
<li>
<p>适用场景：</p>
<ul>
<li>业务初期频繁加字段</li>
<li>或该字段为通用字段，适用于所有记录</li>
</ul>
</li>
</ul>
<h2 id="2-按业务领域聚合字段增量更新">2. 按业务领域聚合字段（增量更新）</h2>
<ul>
<li>
<p>实现：<br>
将新增字段按业务域划分，比如业务一的信息都放到field_1，业务二的信息都放到field_2，每个字段是json格式、方便后续扩展。</p>
</li>
<li>
<p>优点：</p>
<ul>
<li>业务聚合：相同业务领域信息存在一个字段内，无需每次DDL新增字段</li>
</ul>
</li>
<li>
<p>缺点：</p>
<ul>
<li>每次更新都要先查DB的值，merge本次变更后再写入DB</li>
<li>需做好并发控制，否则可能丢失变更内容（可通过乐观锁、或悲观锁控制，取决于并发程度）</li>
<li>仍然存在mysql单行大小限制</li>
</ul>
</li>
<li>
<p>适用场景：</p>
<ul>
<li>小型项目，不做推荐</li>
</ul>
</li>
</ul>
<h2 id="3-按业务领域垂直拆表">3. 按业务领域垂直拆表</h2>
<ul>
<li>
<p>实现：<br>
相近业务领域的字段，做垂直分表（如拆为订单信息表order_info、订单支付表order_payment、订单物流表order_logistics）。<br>
<img src="https://img2024.cnblogs.com/blog/1247698/202507/1247698-20250704012113174-1706386404.png" alt="image" loading="lazy"></p>
</li>
<li>
<p>优点：</p>
<ul>
<li>彻底解耦业务域，各表独立演进</li>
<li>按需查表，提升查询性能</li>
</ul>
</li>
<li>
<p>缺点：</p>
<ul>
<li>每个垂直分表仍是在表内新增字段</li>
<li>业务扩展的难易程度，取决于垂直拆分得是否合理</li>
</ul>
</li>
<li>
<p>适用场景：</p>
<ul>
<li>业务模式已经稳定</li>
<li>或业务边界清晰的项目</li>
</ul>
</li>
</ul>
<h2 id="4-主表--动态扩展表通过业务id关联">4. 主表 + 动态扩展表（通过业务ID关联）</h2>
<ul>
<li>实现：<br>
主表：存储核心字段（如业务ID、其它通用关键字段）<br>
动态扩展表：存储动态扩展字段，与主表通过业务id关联。包括扩展key、扩展value（可以是json格式，方便后续扩展）<br>
每次新增字段：(1）新增一个扩展key，在扩展value里存储内容；(2）或在已有扩展key的value中新增字段。<br>
<img src="https://img2024.cnblogs.com/blog/1247698/202507/1247698-20250705205145262-1858510928.png" alt="image" loading="lazy"></li>
</ul>
<p>之所以通过动态扩展表来实现，是因为很多字段并非通用的，而仅针对部分记录。</p>
<p>以电子产品为例：<br>
可以有扩展字段1（认证证书：3C），则扩展key为"certification"，value是<code>["3C"]</code><br>
也可以有扩展字段2（保修信息：保修期12个月、可延保、最长可延保24个月），则扩展key为"warranty"，value是<code>{"warrantyMonths": 12, "canExtend": true, "maxWarrantyMonths": 24}</code><br>
以食品为例：<br>
可以有扩展字段1（保质期截止时间：2026-07-07），则扩展key为"bestBefore"，value是对应时间戳<br>
也可以有扩展字段2（生产地：中国上海），则扩展key为"productionPlace"，value是<code>{"country": "CN", "province": "Shanghai"}</code></p>
<p>表结构设计：</p>
<pre><code class="language-sql">-- 主表
CREATE TABLE biz_info (
  id BIGINT AUTO_INCREMENT PRIMARY KEY,
  biz_id BIGINT UNIQUE KEY,  -- 业务ID
  ...  -- 其它通用关键字段
);

-- 通用扩展表
CREATE TABLE biz_extension (
  id BIGINT AUTO_INCREMENT PRIMARY KEY,
  biz_id BIGINT,        -- 关联主表的业务ID
  extension_key VARCHAR(64), -- 扩展key名
  extension_value TEXT,      -- 扩展value值
  UNIQUE KEY (biz_id, extension_key) -- 唯一键
);
</code></pre>
<ul>
<li>
<p>优点：</p>
<ul>
<li>动态扩展字段，无需DDL变更</li>
<li>按需查扩展key对应的记录，提升查询性能</li>
</ul>
</li>
<li>
<p>缺点：</p>
<ul>
<li>扩展数据为字符串存储，需要按业务自定义格式解析，无法直接按条件筛选查询</li>
</ul>
</li>
<li>
<p>适用场景：</p>
<ul>
<li>应当优先考虑的长期方案</li>
</ul>
</li>
</ul>
<h2 id="5-mysql主表--hbase业务扩展表">5. MySQL主表 + HBase业务扩展表</h2>
<ul>
<li>实现：<br>
MySQL：存储核心结构化数据（强事务需求、可指定条件筛选查询）<br>
HBase：存储动态扩展字段（稀疏、多列），可以按业务领域垂直拆表，因为在HBase表中新增字段的成本很低<br>
关联方式：用mysql主表业务ID，作为HBase rowKey的一部分，通过业务id即可查到HBase中的其它扩展信息。<br>
如果想按条件查询扩展信息，需要把数据导入到ES里，通过ES查询。<br>
<img src="https://img2024.cnblogs.com/blog/1247698/202507/1247698-20250705212900598-539743660.png" alt="image" loading="lazy"></li>
</ul>
<p>HBase表设计：<br>
如果业务id是123456789，则rowKey可设计成：{业务id后缀}_{业务id}，如789_123456789；方便将hbase数据打散到不同的region，提高存储和查询性能。</p>
<p>HBase业务扩展表1</p>
<table>
<thead>
<tr>
<th>rowKey</th>
<th>字段1</th>
<th>字段2</th>
<th>字段3</th>
</tr>
</thead>
<tbody>
<tr>
<td>rowKey100</td>
<td>cf1:cert=xxx</td>
<td>cf1:warranty=yyy</td>
<td>...</td>
</tr>
</tbody>
</table>
<p>HBase业务扩展表2</p>
<table>
<thead>
<tr>
<th>rowKey</th>
<th>字段1</th>
<th>字段2</th>
<th>字段3</th>
</tr>
</thead>
<tbody>
<tr>
<td>rowKey200</td>
<td>cf2:best_before=aaa</td>
<td>cf2:prod=bbb</td>
<td>...</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>优点：</p>
<ul>
<li>支持大量列字段，稀疏存储高效</li>
<li>是“主表 + 扩展表”的进阶版</li>
</ul>
</li>
<li>
<p>缺点：</p>
<ul>
<li>扩展信息不能方便地按条件查询，导出至ES后才行</li>
<li>事务支持弱（跨 MySQL/HBase 无法保证事务性，只能做到最终一致性）</li>
<li>复杂度变高：开发成本、运维成本都变高了</li>
</ul>
</li>
<li>
<p>适用场景：</p>
<ul>
<li>数据量较大，需拆分一部分扩展信息至HBase</li>
<li>或动态扩展字段变多，达到千级/万级时</li>
</ul>
</li>
</ul>
<h1 id="结论">结论</h1>
<ul>
<li>适用于所有记录的字段，在MySQL表中直接新增</li>
<li>初期优先选择“主表 + 动态扩展表”模式，平衡灵活性与复杂度</li>
<li>当扩展信息数据量较大，或动态扩展字段达到千级/万级时，考虑升级到“MySQL主表 + HBase业务扩展表”模式</li>
<li>若需复杂查询，可补充 Elasticsearch 构建二级索引</li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.024305555555555556" data-date-updated="2025-07-07 09:08">2025-07-07 08:33</span>&nbsp;
<a href="https://www.cnblogs.com/toplist">Java烘焙师</a>&nbsp;
阅读(<span id="post_view_count">260</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18955480);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18955480', targetLink: 'https://www.cnblogs.com/toplist/p/18955480', title: '架构师必备：业务扩展模式选型' })">举报</a>
</div>
        