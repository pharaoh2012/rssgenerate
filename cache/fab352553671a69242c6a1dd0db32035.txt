
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/honglinjia/p/18803657" title="发布于 2025-04-02 16:28">
    <span role="heading" aria-level="2">.net core-利用OpenObserve 实现OpenTelemetry可观测性标准（Logs，Traces，Metrics）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h3>1.&nbsp;<strong>什么是 OpenObserve？</strong></h3>
<ul>
<li>
<p>OpenObserve 是一个开源的可观测性平台（支持日志、指标、追踪），旨在成为 Elasticsearch/Datadog 的轻量级替代方案。</p>
</li>
<li>
<p>它支持通过 OpenTelemetry（OTLP）协议接收数据。</p>
</li>
</ul>
<h3>2.&nbsp;<strong>搭建 OpenObserve</strong></h3>
<ul>
<li>
<p>docker 本地运行或部署 OpenObserve（参考&nbsp;<a href="https://openobserve.ai/docs" rel="noopener nofollow" target="_blank">官方文档</a>）：</p>
</li>
<li>
<p>docker run -d --name openobserve -p 5080:5080 -e ZO_ROOT_USER_EMAIL="root@example.com" -e ZO_ROOT_USER_PASSWORD="root123" public.ecr.aws/zinclabs/openobserve:latest</p>
</li>
<li>
<p>访问&nbsp;<code>http://localhost:5080</code>（默认账号：<code>root@example.com</code>，密码：<code>root123</code>）。</p>
</li>
</ul>
<h3>3.&nbsp;<strong>.NET Core 的 OpenTelemetry 配置</strong></h3>
<ul>
<li>
<p>安装必要的 NuGet 包：</p>
<div class="md-code-block">
<div class="md-code-block-banner-wrap">
<div class="md-code-block-banner">
<div class="md-code-block-infostring">
<p> &lt;PackageReference Include="OpenTelemetry.Exporter.Console" Version="1.10.0" /&gt;<br> &lt;PackageReference Include="OpenTelemetry.Exporter.OpenTelemetryProtocol" Version="1.10.0" /&gt;<br> &lt;PackageReference Include="OpenTelemetry.Extensions.Hosting" Version="1.10.0" /&gt;<br> &lt;PackageReference Include="OpenTelemetry.Instrumentation.AspNetCore" Version="1.10.0" /&gt;<br> &lt;PackageReference Include="OpenTelemetry.Instrumentation.Http" Version="1.10.0" /&gt;<br> &lt;PackageReference Include="OpenTelemetry.Instrumentation.Runtime" Version="1.10.0" /&gt;</p>

</div>

</div>

</div>

</div>

</li>

</ul>
<h3>4.&nbsp;<strong>在 .NET Core 中配置 OpenTelemetry</strong></h3>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">var builder = WebApplication.CreateBuilder(args);<br>//base 
var credentials = Convert.ToBase64String(Encoding.UTF8.GetBytes("root@example.com:root123"));
// 配置OpenTelemetry 日志Log
builder.Logging.ClearProviders();

var resourceBuilder = ResourceBuilder.CreateDefault()
    .AddService("xxxapi")
    .AddAttributes(new Dictionary&lt;string, object&gt;
    {
        ["environment"] = "development",
        ["service.version"] = "1.0.0"
    });

builder.Logging.AddOpenTelemetry(logging =&gt; {
    logging.IncludeFormattedMessage = true;
    logging.SetResourceBuilder(resourceBuilder)
        .AddConsoleExporter()  // Keep console logging for debugging
        .AddOtlpExporter(otlpOptions =&gt; {
            otlpOptions.BatchExportProcessorOptions = new BatchExportProcessorOptions&lt;Activity&gt;
            {
                MaxQueueSize = 100,        // 减小队列避免堆积
                MaxExportBatchSize = 10,   // 减小批量大小
                ScheduledDelayMilliseconds = 500, // 更频繁导出
            };
            otlpOptions.Endpoint = new Uri("http://localhost:5080/api/default/v1/logs");
            otlpOptions.Headers = $"Authorization=Basic {credentials}";
            otlpOptions.Protocol = OpenTelemetry.Exporter.OtlpExportProtocol.HttpProtobuf;
        });
});

// Add services to the container.
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =&gt;
{
    c.SwaggerDoc("v1", new OpenApiInfo { Title = "xxx API", Version = "v1" });
});
builder.Services.AddHttpClient();

// 配置 OpenTelemetry 追踪Tracing
builder.Services.AddOpenTelemetry()
    .WithTracing(builder =&gt; builder
        .SetResourceBuilder(resourceBuilder)
        .AddSource("xxxapi")
        .AddAspNetCoreInstrumentation()
        .AddHttpClientInstrumentation()
        .AddOtlpExporter(opts =&gt;
        {
            opts.Endpoint = new Uri("http://localhost:5080/api/default/v1/traces");
            opts.Headers = $"Authorization=Basic {credentials}";
            opts.Protocol = OpenTelemetry.Exporter.OtlpExportProtocol.HttpProtobuf;
        }));

var app = builder.Build();
       
// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c =&gt; c.SwaggerEndpoint("/swagger/v1/swagger.json", "xxx API v1"));
}

app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();

app.Run(); </pre>
</div>
<h3>5.&nbsp;<strong>关键细节</strong></h3>
<ul>
<li>
<p><strong>OTLP 端点</strong>：OpenObserve 使用&nbsp;<code>/api/default/</code>接收 OTLP 数据。</p>
</li>
<li>
<p><strong>认证</strong>：默认使用基本认证（账号&nbsp;<code>root@example.com</code>，密码&nbsp;<code>root123</code>）。需将凭据编码为 Base64：</p>
<div class="md-code-block">
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">// 将 "root@example.com:root123" 转为 Base64
var credentials = Convert.ToBase64String(Encoding.UTF8.GetBytes("root@example.com:root123"));
opt.Headers = $"Authorization=Basic {credentials}";</pre>
</div>
</div>
</li>
<li>
<p><strong>数据类型</strong>：上述配置会向 OpenObserve 发送追踪（Traces）、指标（Metrics）和日志（Logs）。</p>
</li>
</ul>
<h3>6.&nbsp;<strong>在 OpenObserve 中验证数据</strong></h3>
<ul>
<li>
<p>访问&nbsp;<code>http://localhost:5080</code>：</p>
<ul>
<li>
<p><strong>日志</strong>：在&nbsp;<strong>Logs Explorer</strong>&nbsp;中查看。</p>
</li>
<li>
<p><img src="https://img2024.cnblogs.com/blog/73589/202504/73589-20250402162450459-490922788.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
</li>
<li>
<p><strong>追踪</strong>：在&nbsp;<strong>Traces Explorer</strong>&nbsp;中查看。</p>
</li>
<li>
<p><img src="https://img2024.cnblogs.com/blog/73589/202504/73589-20250402162512822-861667652.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
</li>
<li>
<p><strong>指标</strong>：在&nbsp;<strong>Metrics Explorer</strong>&nbsp;中查看。</p>
</li>
<li>
<p><img src="https://img2024.cnblogs.com/blog/73589/202504/73589-20250402162545630-1573329314.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
</li>
</ul>
</li>
</ul>
<h3>7.&nbsp;<strong>故障排除</strong></h3>
<ul>
<li>
<p>确保 OpenObserve 正在运行。</p>
</li>
<li>
<p>检查 OTLP 端点和认证头是否正确。</p>
</li>
<li>
<p>启用 OpenTelemetry 的诊断输出（调试用）：</p>
<div class="md-code-block">
<p>&nbsp; &nbsp; &nbsp;logging.AddConsoleExporter() //<span class="token punctuation">将日志数据输出到控制台</span></p>
<p>&nbsp; &nbsp; &nbsp;tracing.AddConsoleExporter() //<span class="token punctuation">将追踪数据输出到控制台</span></p>
<pre><span class="token punctuation"><span class="token function"><span class="token punctuation"><span class="token operator"><span class="token punctuation"><span class="token function"><span class="token punctuation"><span class="token punctuation"><span class="token punctuation"><span class="token comment">&nbsp;</span></span></span></span></span></span></span></span></span></span></pre>
</div>
</li>
</ul>
<p>更多参考：</p>
<ul>
<li>
<p><a href="https://openobserve.ai/docs" rel="noopener nofollow" target="_blank">OpenObserve 文档</a></p>
</li>
<li>
<p><a href="https://opentelemetry.io/docs/instrumentation/net/" rel="noopener nofollow" target="_blank">OpenTelemetry .NET 文档</a></p>
</li>
<li>https://github.com/openobserve/dotnet-opentelemetry-tracing-application.git</li>
</ul>
<p>&nbsp;</p>
</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/honglinjia/" target="_blank">Code的那些事</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/honglinjia/p/18803657" target="_blank">https://www.cnblogs.com/honglinjia/p/18803657</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.06169103664699074" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-02 16:49">2025-04-02 16:28</span>&nbsp;
<a href="https://www.cnblogs.com/honglinjia">Code的那些事</a>&nbsp;
阅读(<span id="post_view_count">19</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18803657" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18803657);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18803657', targetLink: 'https://www.cnblogs.com/honglinjia/p/18803657', title: '.net core-利用OpenObserve 实现OpenTelemetry可观测性标准（Logs，Traces，Metrics）' })">举报</a>
</div>
        