
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/linx/p/18846130" title="发布于 2025-04-25 10:26">
    <span role="heading" aria-level="2">Web前端入门第 42 问：聊聊 CSS 元素上下左右（水平+垂直）同时居中有几种方法</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>影响元素位置的 CSS 属性基本介绍完毕（参考前几篇文章），现思考一个最常见的需求：</p>
<p>一个子元素，要摆放在盒子的正中央，使用 CSS 布局手段，究竟有多少种实现方式？</p>
<p>上下左右（水平方向、垂直方向）要同时居中，在 Web 领域应该算是非常常见的开发需求了，最最常见的地方就是弹窗，比如：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250425102547638-1970034198.png" alt="" loading="lazy"></p>
<h2 id="文本居中">文本居中</h2>
<p>先看最简单的文本内容居中的实现方式，需注意此方法仅适用于单行文本，如果出现多行，嘿...会有惊喜！！</p>
<p>文本水平居中：<code>text-align: center;</code></p>
<p>文本垂直居中：<code>line-height: xxx;</code> 此处的 xxx 用父元素高度即可。</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  文本内容
&lt;/div&gt;
&lt;style&gt;
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    width: 200px;
    height: 160px;
    /* 水平居中属性 */
    text-align: center;
    /* 垂直居中 */
    line-height: 160px;
  }
&lt;/style&gt;
</code></pre>
<p>此方法当文本不足一行的时候是挺完美的，但如果出现多行，由于行高是容器高度，会造成多行文本内容溢出容器盒子！！！效果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250425102541539-979535980.png" alt="" loading="lazy"></p>
<p>为什么会出现溢出容器的情况：<code>line-height</code> 设置的高度是每一行文本占用空间，第一行已经占用了整个容器，第二行没位置了当然就占用容器外的空间。</p>
<h2 id="flex-居中">flex 居中</h2>
<p>flex 弹性盒子居中应该算是目前使用最多的方法，主要利用弹性盒子的 <code>justify-content</code> 和 <code>align-items</code> 即可实现：</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  文本内容
&lt;/div&gt;
&lt;div class="box"&gt;
  文本内容 文本内容 文本内容 文本内容
&lt;/div&gt;
&lt;div class="box"&gt;
  &lt;span class="child"&gt;子元素文本内容&lt;/span&gt;
&lt;/div&gt;

&lt;style&gt;
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    width: 200px;
    height: 160px;
    display: flex;
    /* 水平居中 */
    justify-content: center;
    /* 垂直居中 */
    align-items: center;
  }
  .child {
    border: 1px solid rgba(255, 71, 87,1);
  }
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250425102536232-1997566750.png" alt="" loading="lazy"></p>
<p>flex 可以完美实现文本、子元素的居中，掌握此方法已经可以满足大部分的居中需求了。</p>
<h2 id="grid-居中">grid 居中</h2>
<p>有 flex 就绝对有 grid，这两兄弟在布局这方面基本上无法占有绝对优势，flex 能干的 grid 就绝对可以抢饭碗。</p>
<p>将 flex 的代码 <code>display: flex;</code> 换成 <code>display: grid;</code> 无需其他修改，就能使用 grid 网格居中：</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  文本内容
&lt;/div&gt;
&lt;div class="box"&gt;
  文本内容 文本内容 文本内容 文本内容
&lt;/div&gt;
&lt;div class="box"&gt;
  &lt;span class="child"&gt;子元素文本内容&lt;/span&gt;
&lt;/div&gt;

&lt;style&gt;
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    width: 200px;
    height: 160px;
    display: grid;
    /* 水平居中 */
    justify-content: center;
    /* 垂直居中 */
    align-items: center;
  }
  .child {
    border: 1px solid rgba(255, 71, 87,1);
  }
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250425102529541-347376640.png" alt="" loading="lazy"></p>
<p>grid 居中布局，除了用 <code>justify-content</code> 和 <code>align-items</code> 外，还可以使用 <code>justify-items</code> 和 <code>align-content</code>，肉眼还看不出啥区别！！他们区别在于有多个子元素的时候，来看看不同的属性值效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250425102525798-1988010847.png" alt="" loading="lazy"></p>
<p>注意网格线可看出 items 和 content 的区别：items 属性是将子元素放在网格里面居中，而 content 属性是将网格放在容器中居中！！</p>
<p>居中时候用哪个属性想必应该明白了吧。</p>
<p><strong>居中属性简写：</strong></p>
<p>align-content 和 justify-content 可简写为 <code>place-content</code>。<br>
align-items 和 justify-items 可简写为 <code>place-items</code>。</p>
<pre><code class="language-css">place-content: space-around space-evenly; /* 第一个值为 align-content 属性，第二个值为 justify-content */
place-items: start center; /* 第一个值为 align-items 属性，第二个值为 justify-items */
</code></pre>
<h2 id="position-居中">position 居中</h2>
<p>此方法不再适合纯文本，毕竟居中属性是要盖在子元素上的，而文本没办法当做子元素设置布局样式！</p>
<p>position 居中需给父元素设置相对定位(relative)，子元素使用绝对定位(absolute)，然后通过 <code>left</code> 和 <code>top</code> 属性实现居中。</p>
<p><strong>1、子元素大小固定</strong></p>
<p>这种情况可直接使用 <code>left</code> 和 <code>top</code> 属性计算坐标实现居中：</p>
<pre><code class="language-css">left: (父元素宽度 - 子元素宽度) / 2;
top: (父元素高度 - 子元素高度) / 2;
</code></pre>
<p>示例：</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;span class="child"&gt;子元素文本内容&lt;/span&gt;
&lt;/div&gt;
&lt;style&gt;
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    width: 200px;
    height: 160px;
    position: relative;
  }
  .child {
    border: 1px solid rgba(255, 71, 87,1);
    width: 120px;
    height: 40px;
    position: absolute;
    left: 40px; /* (200 - 120) / 2 */
    top: 60px; /* (160 - 40) / 2 */
  }
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250425102518002-537155912.png" alt="" loading="lazy"></p>
<hr>
<p>还可以使用 position + margin 属性实现居中，具体算法：</p>
<pre><code class="language-css">margin-left: -(子元素宽度 / 2);
margin-top: -(子元素高度 / 2);
</code></pre>
<p>示例：</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;span class="child"&gt;子元素文本内容 margin&lt;/span&gt;
&lt;/div&gt;
&lt;style&gt;
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    width: 200px;
    height: 160px;
    position: relative;
  }
  .child {
    border: 1px solid rgba(255, 71, 87,1);
    width: 120px;
    height: 40px;
    position: absolute;
    left: 50%;
    top: 50%;
    margin-left: -60px; /* -120 / 2 */
    margin-top: -20px; /* -40 / 2 */
  }
&lt;/style&gt;
</code></pre>
<p>效果</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250425102512846-333387458.png" alt="" loading="lazy"></p>
<hr>
<p>大小固定的子元素，还可以使用神奇的 <code>margin: auto</code> 实现居中，居中时需要给元素四个方向同时设置为 <code>0</code>，实现方式：</p>
<pre><code class="language-html">&lt;div class="box"&gt;
    &lt;span class="child"&gt;子元素文本内容 margin: auto&lt;/span&gt;
&lt;/div&gt;
&lt;style&gt;
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    width: 200px;
    height: 160px;
    position: relative;
  }
  .child {
    border: 1px solid rgba(255, 71, 87,1);
    width: 120px;
    height: 40px;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    margin: auto;
  }
&lt;/style&gt;
</code></pre>
<p>效果</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250425102508223-274817286.png" alt="" loading="lazy"></p>
<p><strong>2、子元素大小不固定</strong></p>
<p>子元素大小固定应用场景有限，毕竟不是每种布局都能确定元素大小，子元素的大小会受到子元素内容多少影响！</p>
<p>在使用 position 居中时，子元素大小不固定，则需要使用 <code>transform</code> 属性实现居中，具体用法：</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;span class="child"&gt;子元素文本内容 transform&lt;/span&gt;
&lt;/div&gt;
&lt;style&gt;
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    width: 200px;
    height: 160px;
    position: relative;
  }
  .child {
    border: 1px solid rgba(255, 71, 87,1);
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
  }
&lt;/style&gt;
</code></pre>
<p>此处的 <code>translate(-50%, -50%)</code> 表示元素向左和向上同时位移自身大小一半。</p>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250425102501796-1053808605.png" alt="" loading="lazy"></p>
<h2 id="table-cell-居中">table-cell 居中</h2>
<p>使用 table-cell 居中，在目前的布局方案中，应该使用比较少了，毕竟弹性盒子当道，哪还有用 table 布局的道理！这种方法可以当作扩充知识面。</p>
<p>使用方法：</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;span class="child"&gt;子元素文本内容 margin: auto&lt;/span&gt;
&lt;/div&gt;
&lt;style&gt;
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    width: 200px;
    height: 160px;
    display: table-cell;
    text-align: center; /* 水平 */
    vertical-align: middle; /* 垂直 */
  }
  .child {
    display: inline-block;
    border: 1px solid rgba(255, 71, 87,1);
    width: 120px;
  }
&lt;/style&gt;
</code></pre>
<p>需注意：使用 table-cell 时，元素的 <code>margin</code> 值将失效，而且 flex 子元素设置 <code>display: table-cell;</code> 也不生效！</p>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250425102419893-14095389.png" alt="" loading="lazy"></p>
<h2 id="before-伪元素居中">before 伪元素居中</h2>
<p>神奇的 before 伪元素（也可以使用 after），创建一个 <code>height: 100%;</code> 的锚点，再给子元素设置 <code>inline-block</code>，再使用 <code>vertical-align: middle;</code> 可实现居中。</p>
<p>此方法应该算是很偏门了，可作为扩充知识面了解。使用方法：</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;span class="child"&gt;子元素文本内容&lt;/span&gt;
&lt;/div&gt;
&lt;style&gt;
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    width: 200px;
    height: 160px;
    text-align: center; /* 水平居中 */
    font-size: 0; /* 处理 inline-block 元素之间的空白 */
  }
  .box::before {
    content: '';
    height: 100%;
    display: inline-block;
    vertical-align: middle;
  }
  .child {
    display: inline-block;
    border: 1px solid rgba(255, 71, 87,1);
    width: 120px;
    vertical-align: middle; /* 垂直方向相对 before 对象居中 */
    font-size: 16px;
  }
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250425102414003-861721817.png" alt="" loading="lazy"></p>
<h2 id="总结">总结</h2>
<p>以上的这些居中方案，应该包含了目前所有的居中方法。</p>
<p>当然未来 CSS 规范会更新，也许会有更好的居中方法加入，需不断地学习才不会掉队。</p>
<p>flex 居中应该是最常用的方案，但如果面试时问到有几种居中方法，您只回答了 flex、grid 和 position，面试官可能会觉得您掌握的 CSS 还是不够全面。</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>&nbsp;</p>
<p style="font-size: 18px;font-weight: bold;"><span style="color:rgb(255, 71, 87)">文章正在持续更新中...</span>，首发微信公众号【<span style="color:rgb(255, 71, 87)">前端路引</span>】，欢迎关注公众号获取最新文章。</p>
<p>
  <img style="max-width: 320px;" src="https://images.cnblogs.com/cnblogs_com/linx/2447020/o_250228035031_%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png">
</p>
<p>本文来自博客园，作者：<a href="https://www.cnblogs.com/linx/" target="_blank">前端路引</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/linx/p/18846130" target="_blank">https://www.cnblogs.com/linx/p/18846130</a></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.3277187206875" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-25 10:26">2025-04-25 10:26</span>&nbsp;
<a href="https://www.cnblogs.com/linx">前端路引</a>&nbsp;
Views(<span id="post_view_count">24</span>)&nbsp;
Comments(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18846130);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18846130', targetLink: 'https://www.cnblogs.com/linx/p/18846130', title: 'Web前端入门第 42 问：聊聊 CSS 元素上下左右（水平+垂直）同时居中有几种方法' })">举报</a>
</div>
	