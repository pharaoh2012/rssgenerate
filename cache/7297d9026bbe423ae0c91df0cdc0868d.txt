
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/crossoverJie/p/19022880" title="发布于 2025-08-05 11:21">
    <span role="heading" aria-level="2">StarRocks 如何在本地搭建存算分离集群</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>之前写过一篇 <a href="https://crossoverjie.top/2025/02/26/ob/StarRocks-dev-shard-data-build/" target="_blank" rel="noopener nofollow">StarRocks 开发环境搭建踩坑指北之存算分离篇</a>讲解如何在本地搭建一个可以 debug 的存算分离版本。</p>
<p>但最近在本地调试一个场景，需要 CN 节点是以集群的方式启动，我还是按照<a href="https://crossoverjie.top/2025/02/26/ob/StarRocks-dev-shard-data-build/" target="_blank" rel="noopener nofollow">老方法</a>通过 docker 启动 CN，然后 export 端口的方式让 FE 进行绑定。</p>
<p>比如用以下两个命令可以启动两个 CN 节点。</p>
<pre><code class="language-shell">docker run -p 9060:9060 -p 8040:8040 -p 9050:9050 -p 8060:8060 -p 9070:9070 -itd --rm --name cn -e "TZ=Asia/Shanghai" starrocks/cn-ubuntu:3.5.2
</code></pre>
<pre><code class="language-shell">docker run -p 9061:9060 -p 8041:8040 -p 9051:9050 -p 8061:8060 -p 9071:9070 -itd --rm --name cn2 -e "TZ=Asia/Shanghai" starrocks/cn-ubuntu:3.5.2
</code></pre>

<p>然后按照之前的方式在 FE 中手动绑定这两个节点：</p>
<pre><code class="language-sql">ALTER SYSTEM ADD COMPUTE NODE "127.0.0.1:9050";  
ALTER SYSTEM ADD COMPUTE NODE "127.0.0.1:9051";  
show compute nodes;
</code></pre>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1431471/202508/1431471-20250805112100425-217274646.png" class="lazyload"></p>
<p>此时会出现新增的第二个节点的状态有问题，比如 <code>metrics</code> 取不到，<code>workerId</code> 是-1（-1 代表节点创建失败了，默认值是 -1)</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1431471/202508/1431471-20250805112100826-1011886495.png" class="lazyload"><br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1431471/202508/1431471-20250805112100399-2004384938.png" class="lazyload"><br>
经过 debug 发现是在添加节点的时候，由于生成的 <code>workerIpPort</code> 与上一个节点相同（<code>127.0.0.1:9060)</code> 从而导致这个节点被跳过了。</p>
<p>也就是说我这两个 CN 节点不能是相同的 IP（用不同的端口来区分）。</p>
<p>解决这个问题有以下几个办法：</p>
<ul>
<li>再找一个台机器来跑 CN2 节点</li>
<li>启动一个虚拟机来跑 CN2 节点</li>
<li>使用 docker compose 来启动 CN 集群，会在集群内自动分配不同的 IP</li>
<li>利用 Docker Bridge 创建一个虚拟网络，由他来分配 IP</li>
</ul>
<p>第一种方案直接 Pass 了，我手上没有多余的设备。</p>
<p>第二种方案倒是可以直接用 <code>OrbStack</code> 启动一个 VM，但是还不如后面的 docker 来的轻量，此外还需要我安装运行环境，也 pass 了。</p>
<p>第三种方案看似可行，但也比较繁琐，由于 CN 给 docker compose 管理了，FE 要和 CN 网络打通也得在 docker compose 里运行，这样我 Debug 就不方便了，更别提如果需要频繁修改源码的情况。</p>
<blockquote>
<p>甚至每次修改代码后都得重新打包上传镜像，以及开启 remote debug，非常麻烦。</p>
</blockquote>
<p>这么看来就第四种方案最为合适了。</p>
<h1 id="使用-docker-bridge-网络">使用 Docker Bridge 网络</h1>
<p>我们可以使用 Docker Bridge 创建一个虚拟网络，使用这个虚拟网络启动的镜像会自动分配自定义范围的 IP；同时本地启动的 FE 也能直接访问。</p>
<pre><code class="language-shell">docker network create --subnet=172.18.0.0/16 --gateway=172.18.0.1 my_custom_net
</code></pre>
<p>首先用 docker 创建一个 network。</p>
<ul>
<li><code>--subnet=172.18.0.0/16</code>: 定义网络的 IP 地址范围。这里我们使用了&nbsp;<code>172.18.x.x</code>&nbsp;这个私有网段。</li>
<li><code>--gateway=172.18.0.1</code>: 指定这个网络的网关地址。</li>
</ul>
<p>之后我们就可以使用这个虚拟网络来启动容器了。</p>
<pre><code class="language-shell">docker run --ip 172.18.0.20 --net my_custom_net -p 9060:9060 -p 8040:8040 -p 9050:9050 -p 8060:8060 -p 9070:9070 -itd --rm --name cn -e "TZ=Asia/Shanghai" starrocks/cn-ubuntu:3.5.2

docker run --ip 172.18.0.30 --net my_custom_net -p 9061:9060 -p 8041:8040 -p 9051:9050 -p 8061:8060 -p 9071:9070 -itd --rm --name cn2 -e "TZ=Asia/Shanghai" starrocks/cn-ubuntu:3.5.2
</code></pre>
<p>这样这两个容器就会被分配不同的 IP，并且网络和宿主机也是互通的。</p>
<p>需要注意的是这里的子网尽量选择 <code>172.16.0.0</code>&nbsp;到&nbsp;<code>172.31.255.255</code> 这个 IP 段，<code>192.168.0.0</code>&nbsp;到&nbsp;<code>192.168.255.255</code> 这个范围段很有可能家里或公司的路由器占用了。</p>
<p>而这里的网关 <code>--gateway=172.18.0.1</code>地址也需要在我们自定义的 IP 范围里。</p>
<p>同时我们也不需要在这两个容器内为 CN 指定 <code>priority_networks</code> 参数了。</p>
<p>同理 <code>minio</code> 也得使用这个虚拟网络启动：</p>
<pre><code class="language-shell">docker run -d --rm --name minio \
  --ip 172.18.0.10 \
  --net my_custom_net \
  -e MINIO_ROOT_USER=miniouser \
  -e MINIO_ROOT_PASSWORD=miniopassword \
  -p 9001:9001 \
  -p 9000:9000 \
  --entrypoint sh \
  minio/minio:latest \
  -c 'mkdir -p /minio_data/starrocks &amp;&amp; minio server /minio_data --console-address ":9001"'
</code></pre>
<p>设置 <code>token</code> 的时候也要指定对应的 IP:</p>
<pre><code class="language-shell">mc alias set myminio http://172.18.0.10:9000 miniouser miniopassword; mc admin user svcacct add --access-key AAAAAAAAAAAAAAAAAAAA --secret-key BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB myminio miniouser
</code></pre>
<p>当 CN 和 minio 都启动之后，我们在 FE 里手动绑定这两个 CN 节点:</p>
<pre><code class="language-sql">ALTER SYSTEM ADD COMPUTE NODE "172.18.0.20:9050";
ALTER SYSTEM ADD COMPUTE NODE "172.18.0.30:9050"
</code></pre>
<p>这样这两个节点就可以绑定成功了。</p>
<h1 id="blog">Blog</h1>

</div>
<div id="MySignature" role="contentinfo">
    <div style="font-size: small">

<p>
        作者： 
        <a href="https://crossoverjie.top/about/">crossoverJie</a>
</p>
<p>
        出处：
        <a href="https://crossoverjie.top/">https://crossoverjie.top</a>
</p>
<img src="https://i.loli.net/2019/05/19/5ce16dbc99cfa13989.jpg">
<p>
欢迎关注博主公众号与我交流。
</p>
<p>
         本文版权归作者所有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出,
            如有问题， 可邮件（crossoverJie#gmail.com）咨询。
</p>
</div>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-05 11:21">2025-08-05 11:21</span>&nbsp;
<a href="https://www.cnblogs.com/crossoverJie">crossoverJie</a>&nbsp;
阅读(<span id="post_view_count">145</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19022880);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19022880', targetLink: 'https://www.cnblogs.com/crossoverJie/p/19022880', title: 'StarRocks 如何在本地搭建存算分离集群' })">举报</a>
</div>
	