
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/powertoolsteam/p/18974246" title="发布于 2025-07-09 08:34">
    <span role="heading" aria-level="2">MCP 核心架构解析</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="引言">引言</h2>
<p>Model Context Protocol (MCP) 是一种为连接大型语言模型(LLM)应用而设计的通信协议，它建立在灵活、可扩展的架构基础上，旨在实现LLM应用程序与各类集成之间的无缝交互。本文将深入解析MCP的核心架构设计，包括其组件构成、通信机制、生命周期管理以及最佳实践，帮助开发者全面理解这一协议的工作原理和实现方式。</p>
<h2 id="正文">正文</h2>
<h3 id="1-整体架构概述">1. 整体架构概述</h3>
<p>MCP采用经典的客户端-服务器架构模型，包含三个主要角色：</p>
<ul>
<li><strong>主机(Host)</strong>：通常是启动连接的LLM应用程序，如Claude Desktop或各类IDE环境。主机负责初始化和维护整个通信流程。</li>
<li><strong>客户端(Client)</strong>：在主机应用内部运行，与服务器保持1:1的连接关系，负责发送请求和接收响应。</li>
<li><strong>服务器(Server)</strong>：向客户端提供上下文信息、工具支持和提示内容，是整个协议的服务提供方。<br>
<img src="https://img2024.cnblogs.com/blog/139239/202507/139239-20250709083346352-882717622.png" alt="image" loading="lazy"></li>
</ul>
<p>这种分层架构设计使得MCP能够灵活适应不同的应用场景，同时保持高效的通信性能。</p>
<h3 id="2-核心组件解析">2. 核心组件解析</h3>
<h4 id="21-协议层设计">2.1 协议层设计</h4>
<p>协议层是MCP的核心抽象层，主要负责以下功能：</p>
<ul>
<li>消息帧的封装与解析</li>
<li>请求/响应的关联匹配</li>
<li>高层通信模式的管理</li>
</ul>
<p>典型的协议层类结构如下：</p>
<pre><code class="language-typescript">class Protocol&lt;Request, Notification, Result&gt; {
    // 处理入站请求
    setRequestHandler&lt;T&gt;(schema: T, handler: (request: T, extra: RequestHandlerExtra) =&gt; Promise&lt;Result&gt;): void
    
    // 处理入站通知
    setNotificationHandler&lt;T&gt;(schema: T, handler: (notification: T) =&gt; Promise&lt;void&gt;): void
    
    // 发送请求并等待响应
    request&lt;T&gt;(request: Request, schema: T, options?: RequestOptions): Promise&lt;T&gt;
    
    // 发送单向通知
    notification(notification: Notification): Promise&lt;void&gt;
}
</code></pre>
<p>协议层的关键类包括：</p>
<ul>
<li><code>Protocol</code>：基础协议实现</li>
<li><code>Client</code>：客户端实现</li>
<li><code>Server</code>：服务器实现</li>
</ul>
<h4 id="22-传输层实现">2.2 传输层实现</h4>
<p>传输层负责实际的通信传输，MCP支持多种传输机制：</p>
<p><strong>标准输入/输出(Stdio)传输</strong>：</p>
<ul>
<li>使用标准输入输出流进行通信</li>
<li>特别适合本地进程间通信</li>
<li>实现简单，性能高效</li>
</ul>
<p><strong>可流式HTTP传输</strong>：</p>
<ul>
<li>基于HTTP协议，可选支持Server-Sent Events(SSE)流式传输</li>
<li>客户端到服务器消息使用HTTP POST</li>
<li>适合需要HTTP兼容性的远程通信场景</li>
</ul>
<p>所有传输方式都采用JSON-RPC 2.0作为消息交换格式，确保协议的标准化和互操作性。</p>
<h3 id="3-消息类型与格式">3. 消息类型与格式</h3>
<p>MCP定义了四种主要的消息类型：</p>
<h4 id="31-请求request">3.1 请求(Request)</h4>
<pre><code class="language-typescript">interface Request {
  method: string;
  params?: { ... };
}
</code></pre>
<p>请求消息需要对方返回响应，包含方法名和可选参数。</p>
<h4 id="32-结果result">3.2 结果(Result)</h4>
<pre><code class="language-typescript">interface Result {
  [key: string]: unknown;
}
</code></pre>
<p>结果是对请求的成功响应，可以包含任意数据结构。</p>
<h4 id="33-错误error">3.3 错误(Error)</h4>
<pre><code class="language-typescript">interface Error {
  code: number;
  message: string;
  data?: unknown;
}
</code></pre>
<p>错误消息表示请求处理失败，包含错误码、描述信息和可选附加数据。</p>
<h4 id="34-通知notification">3.4 通知(Notification)</h4>
<pre><code class="language-typescript">interface Notification {
  method: string;
  params?: { ... };
}
</code></pre>
<p>通知是单向消息，不需要对方响应，常用于事件推送等场景。</p>
<h3 id="4-连接生命周期管理">4. 连接生命周期管理</h3>
<h4 id="41-初始化阶段">4.1 初始化阶段</h4>
<ol>
<li>客户端发送初始化请求，包含协议版本和能力信息</li>
<li>服务器响应其协议版本和能力</li>
<li>客户端发送初始化通知作为确认</li>
<li>正常消息交换开始</li>
</ol>
<p><img src="https://img2024.cnblogs.com/blog/139239/202507/139239-20250709083406418-2106023920.png" alt="image" loading="lazy"></p>
<h4 id="42-消息交换阶段">4.2 消息交换阶段</h4>
<p>支持两种基本模式：</p>
<ul>
<li><strong>请求-响应模式</strong>：客户端或服务器发送请求，对方返回响应</li>
<li><strong>通知模式</strong>：任一方发送不需要响应的单向消息</li>
</ul>
<h4 id="43-终止阶段">4.3 终止阶段</h4>
<p>连接可通过以下方式终止：</p>
<ul>
<li>调用close()方法进行优雅关闭</li>
<li>传输层断开</li>
<li>出现错误条件</li>
</ul>
<h3 id="5-错误处理机制">5. 错误处理机制</h3>
<p>MCP定义了标准的错误代码体系：</p>
<pre><code class="language-typescript">enum ErrorCode {
  // 标准JSON-RPC错误码
  ParseError = -32700,
  InvalidRequest = -32600,
  MethodNotFound = -32601,
  InvalidParams = -32602,
  InternalError = -32603,
}
^^[参考内容: MCP defines these standard error codes...]
</code></pre>
<p>SDK和应用程序可以在-32000以上定义自己的错误代码。错误传播途径包括：</p>
<ul>
<li>请求的错误响应</li>
<li>传输层错误事件</li>
<li>协议级错误处理器</li>
</ul>
<h3 id="6-实现示例">6. 实现示例</h3>
<p>以下是一个基本的MCP服务器实现示例：</p>
<pre><code class="language-typescript">import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";

const server = new Server({
  name: "example-server",
  version: "1.0.0"
}, {
  capabilities: {
    resources: {}
  }
});

// 处理资源列表请求
server.setRequestHandler(ListResourcesRequestSchema, async () =&gt; {
  return {
    resources: [
      {
        uri: "example://resource",
        name: "Example Resource"
      }
    ]
  };
});

// 连接传输层
const transport = new StdioServerTransport();
await server.connect(transport);
</code></pre>
<h3 id="7-最佳实践">7. 最佳实践</h3>
<h4 id="71-传输选择策略">7.1 传输选择策略</h4>
<ul>
<li><strong>本地通信</strong>：优先使用Stdio传输，效率高且管理简单</li>
<li><strong>远程通信</strong>：选择Streamable HTTP传输，注意安全考量</li>
</ul>
<h4 id="72-消息处理建议">7.2 消息处理建议</h4>
<ul>
<li>请求处理：严格验证输入，使用类型安全架构，优雅处理错误</li>
<li>进度报告：对长操作使用进度令牌，增量报告进展</li>
<li>错误管理：使用适当错误码，清理资源，避免敏感信息泄露</li>
</ul>
<h4 id="73-安全注意事项">7.3 安全注意事项</h4>
<ul>
<li>传输安全：远程连接使用TLS，验证连接来源</li>
<li>消息验证：检查所有入站消息，清理输入，验证JSON-RPC格式</li>
<li>资源保护：实施访问控制，监控资源使用，限制请求速率</li>
</ul>
<h2 id="结论">结论</h2>
<p>MCP协议通过其清晰的客户端-服务器架构、灵活的协议层设计、多样的传输层支持以及完善的生命周期管理，为LLM应用程序提供了高效的通信框架。其标准化的消息格式和丰富的错误处理机制确保了协议的可靠性和易用性。通过遵循本文介绍的最佳实践，开发者可以充分利用MCP的优势，构建稳定、安全的LLM集成应用。随着人工智能技术的不断发展，MCP这类专业化协议将在LLM生态系统中扮演越来越重要的角色。</p>

</div>
<div id="MySignature" role="contentinfo">
    <hr>
<br>
<p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">本文是由葡萄城技术开发团队发布，转载请注明出处：<a href="https://www.grapecity.com.cn/" target="_blank">葡萄城官网</a></p>
<!--p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">了解企业级低代码开发平台，请前往<a href="https://www.grapecity.com.cn/solutions/huozige" target="_blank">活字格</a>
</p><p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">了解可嵌入您系统的在线 Excel，请前往<a href="https://www.grapecity.com.cn/developer/spreadjs" target="_blank">SpreadJS纯前端表格控件</a></p>
<p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">了解嵌入式的商业智能和报表软件，请前往<a href="https://www.grapecity.com.cn/solutions/wyn" target="_blank">Wyn Enterprise
</a></p-->

<br>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-09 08:34">2025-07-09 08:34</span>&nbsp;
<a href="https://www.cnblogs.com/powertoolsteam">葡萄城技术团队</a>&nbsp;
阅读(<span id="post_view_count">7</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18974246);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18974246', targetLink: 'https://www.cnblogs.com/powertoolsteam/p/18974246', title: 'MCP 核心架构解析' })">举报</a>
</div>
        