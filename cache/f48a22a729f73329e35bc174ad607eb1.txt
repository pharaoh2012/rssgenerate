
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/aslanvon/p/18920022" title="发布于 2025-06-08 23:54">
    <span role="heading" aria-level="2">CMAKE学习笔记【上】</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="零-变量">(零) 变量</h1>
<hr>
<h2 id="一基本概念">一、基本概念</h2>
<p>CMake 中的变量是 <strong>字符串类型</strong>（或列表），没有内置的数据结构如数组、字典等。变量的作用类似于 shell 脚本中的环境变量，但也有自己的作用域机制。</p>
<h3 id="常见预定义变量举例">常见预定义变量（举例）</h3>
<ul>
<li><code>PROJECT_NAME</code>：当前项目的名称。</li>
<li><code>CMAKE_CURRENT_SOURCE_DIR</code>：当前处理的源码目录。</li>
<li><code>CMAKE_CURRENT_BINARY_DIR</code>：当前构建的二进制目录。</li>
<li><code>CMAKE_SOURCE_DIR</code>：项目根目录。</li>
<li><code>CMAKE_BINARY_DIR</code>：构建输出根目录。</li>
<li><code>CMAKE_CXX_COMPILER</code>：C++ 编译器路径。</li>
<li><code>CMAKE_BUILD_TYPE</code>：构建类型（Debug/Release）。</li>
</ul>
<hr>
<h2 id="二变量的设置">二、变量的设置</h2>
<h3 id="1-使用-set-设置变量">1. 使用 <code>set()</code> 设置变量</h3>
<pre><code class="language-cmake">set(VAR_NAME value [CACHE TYPE DOCSTRING [FORCE]])
</code></pre>
<h4 id="示例">示例：</h4>
<pre><code class="language-cmake">set(MY_VAR "Hello CMake")
message(STATUS "MY_VAR = ${MY_VAR}")
</code></pre>
<p>输出：</p>
<pre><code>-- MY_VAR = Hello CMake
</code></pre>
<h4 id="设置多个值列表">设置多个值（列表）</h4>
<pre><code class="language-cmake">set(MY_LIST a b c)
message(STATUS "MY_LIST = ${MY_LIST}")
</code></pre>
<p>输出：</p>
<pre><code>-- MY_LIST = a;b;c
</code></pre>
<p>如果你希望用空格分隔显示为字符串：</p>
<pre><code class="language-cmake">message(STATUS "MY_LIST = ${MY_LIST}")
# 或者转换为空格分隔
message(STATUS "MY_LIST = ${MY_LIST}")
</code></pre>
<hr>
<h3 id="2-使用-option-设置布尔变量">2. 使用 <code>option()</code> 设置布尔变量</h3>
<p>用于用户可配置的开关选项，默认值为 <code>ON</code> 或 <code>OFF</code>。</p>
<pre><code class="language-cmake">option(USE_MYMATH "Use custom math library" ON)
</code></pre>
<p>你可以像普通变量一样使用它：</p>
<pre><code class="language-cmake">if(USE_MYMATH)
    message(STATUS "Using custom math")
else()
    message(STATUS "Not using custom math")
endif()
</code></pre>
<hr>
<h3 id="3-使用-unset-删除变量">3. 使用 <code>unset()</code> 删除变量</h3>
<pre><code class="language-cmake">unset(MY_VAR)
</code></pre>
<p>可用于清除某些变量的影响。</p>
<hr>
<h2 id="三变量的引用">三、变量的引用</h2>
<p>使用 <code>${VAR_NAME}</code> 来引用变量值。</p>
<pre><code class="language-cmake">set(NAME "Alice")
message(STATUS "Hello, ${NAME}!")
</code></pre>
<p>输出：</p>
<pre><code>-- Hello, Alice!
</code></pre>
<p>如果变量未定义，则会被替换为空字符串。</p>
<hr>
<h2 id="四变量的作用域scope">四、变量的作用域（Scope）</h2>
<p>CMake 的变量作用域不像 C/C++ 那样严格，但它有以下几种行为：</p>
<h3 id="1-局部作用域local-scope">1. <strong>局部作用域（Local Scope）</strong></h3>
<p>默认情况下，<code>set()</code> 设置的变量只在当前 <code>CMakeLists.txt</code> 文件中有效，不会传递到父级或子级目录。</p>
<pre><code class="language-cmake"># CMakeLists.txt
set(MY_VAR "local")

add_subdirectory(subdir)  # 进入 subdir 目录
</code></pre>
<pre><code class="language-cmake"># subdir/CMakeLists.txt
message(STATUS "MY_VAR = ${MY_VAR}")  # 输出空，因为不在同一个作用域
</code></pre>
<h3 id="2-parent_scope">2. <strong>PARENT_SCOPE</strong></h3>
<p>如果你想把一个变量设置回上一级作用域（比如你在 <code>add_subdirectory()</code> 内部设置变量返回给上级），可以使用：</p>
<pre><code class="language-cmake"># subdir/CMakeLists.txt
set(MY_VAR "from child" PARENT_SCOPE)
</code></pre>
<p>这样上级就能看到这个值了。</p>
<h3 id="3-cache-变量全局可见">3. <strong>CACHE 变量（全局可见）</strong></h3>
<p>使用 <code>set(... CACHE ...)</code> 定义的变量是全局的，保存在 CMake 缓存中，可以在任何地方访问。</p>
<pre><code class="language-cmake">set(MY_CACHE_VAR "global value" CACHE STRING "Description of this variable")
</code></pre>
<p>这种变量通常用于跨目录通信或配置持久化（例如用户通过 <code>-DMY_VAR=value</code> 传参）。</p>
<p>你也可以使用 <code>cache</code> 类型来覆盖缓存值：</p>
<pre><code class="language-bash">cmake .. -DMY_CACHE_VAR="new value"
</code></pre>
<hr>
<h2 id="五常见问题与技巧">五、常见问题与技巧</h2>
<h3 id="1-如何查看所有变量">1. 如何查看所有变量？</h3>
<p>你可以运行：</p>
<pre><code class="language-bash">cmake --build . --target help
</code></pre>
<p>或者更直接地：</p>
<pre><code class="language-bash">cmake -LAH ..
</code></pre>
<p>这会列出所有的缓存变量及其值。</p>
<hr>
<h3 id="2-判断变量是否存在或是否为空">2. 判断变量是否存在或是否为空</h3>
<pre><code class="language-cmake">if(DEFINED VAR_NAME)
    message(STATUS "${VAR_NAME} is defined.")
endif()

if(NOT VAR_NAME)
    message(STATUS "${VAR_NAME} is empty or not set.")
endif()
</code></pre>
<hr>
<h3 id="3-拼接字符串或路径">3. 拼接字符串或路径</h3>
<pre><code class="language-cmake">set(PATH1 "/usr/local")
set(PATH2 "bin")
set(FULL_PATH "${PATH1}/${PATH2}")
message(STATUS "Full path: ${FULL_PATH}")
</code></pre>
<p>输出：</p>
<pre><code>-- Full path: /usr/local/bin
</code></pre>
<p>推荐使用 <code>CMAKE_CURRENT_SOURCE_DIR</code> 等宏拼接路径，避免硬编码。</p>
<hr>
<h3 id="4-多个值如何处理">4. 多个值如何处理？</h3>
<pre><code class="language-cmake">set(SOURCES main.cpp utils.cpp helper.cpp)

add_executable(myapp ${SOURCES})
</code></pre>
<p>这是最常见的做法，适用于源文件列表、库名列表等。</p>
<hr>
<h2 id="六最佳实践建议">六、最佳实践建议</h2>
<table>
<thead>
<tr>
<th>场景</th>
<th>推荐做法</th>
</tr>
</thead>
<tbody>
<tr>
<td>设置本地变量</td>
<td><code>set(VAR value)</code></td>
</tr>
<tr>
<td>设置全局变量</td>
<td><code>set(VAR value CACHE INTERNAL "")</code></td>
</tr>
<tr>
<td>用户配置选项</td>
<td><code>option(VAR "desc" ON/OFF)</code></td>
</tr>
<tr>
<td>子目录返回变量</td>
<td><code>set(VAR value PARENT_SCOPE)</code></td>
</tr>
<tr>
<td>拼接路径</td>
<td>使用 <code>${CMAKE_CURRENT_SOURCE_DIR}/xxx</code></td>
</tr>
<tr>
<td>判断变量是否存在</td>
<td><code>if(DEFINED VAR)</code></td>
</tr>
<tr>
<td>清理变量</td>
<td><code>unset(VAR)</code></td>
</tr>
</tbody>
</table>
<hr>
<h2 id="实例总结">实例总结</h2>
<pre><code class="language-cmake"># 设置变量
set(MY_LIB mylib)
set(SOURCES main.cpp utils.cpp)
option(BUILD_TESTS "Build unit tests" ON)

# 引用变量
message(STATUS "Building with lib: ${MY_LIB}")
add_executable(app ${SOURCES})

# 控制逻辑
if(BUILD_TESTS)
    enable_testing()
    add_subdirectory(tests)
endif()
</code></pre>
<h1 id="一设置项目名-代码目录和构建目录">（一）设置项目名 代码目录和构建目录</h1>
<pre><code class="language-cmake">cmake_minimum_required(VERSION 3.1)

project(MyProject
    VERSION 1.2.3
    DESCRIPTION "A library for managing non-volatile memory"
    HOMEPAGE_URL "https://example.com/libnvm"
    LANGUAGES CUDA C CXX
)

# 打印 PROJECT_SOURCE_DIR 和 PROJECT_BINARY_DIR
message(STATUS "Source directory: ${PROJECT_SOURCE_DIR}")
message(STATUS "Binary directory: ${PROJECT_BINARY_DIR}")
</code></pre>
<h2 id="一languages">一、LANGUAGES</h2>
<ol>
<li><strong>C</strong>: CMake 默认会启用的语言之一，适用于C源代码项目。</li>
<li><strong>CXX</strong> 或 <strong>C++</strong>: 另一个默认启用的语言，适用于C++源代码项目。</li>
<li><strong>CUDA</strong>: 从 CMake 3.8 版本开始正式支持 CUDA 作为一等公民，允许直接编写 CUDA 源文件（<code>.cu</code>）并将其集成到构建系统中。</li>
<li><strong>ASM</strong>: 支持汇编语言。需要注意的是，使用 ASM 需要特定的编译器支持，并且可能需要额外配置。</li>
<li>其他语言</li>
</ol>
<h2 id="二代码目录和构建目录">二、代码目录和构建目录</h2>
<table>
<thead>
<tr>
<th>变量名</th>
<th>含义</th>
<th>是否变化</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>PROJECT_SOURCE_DIR</code></td>
<td>顶级 <code>CMakeLists.txt</code> 所在目录（即源码目录）</td>
<td>固定</td>
</tr>
<tr>
<td><code>PROJECT_BINARY_DIR</code></td>
<td>你运行 <code>cmake</code> 的目录（即构建目录）</td>
<td>根据你运行命令的位置而定</td>
</tr>
</tbody>
</table>
<p>假设你的项目结构如下：</p>
<pre><code>/home/user/my_project/
├── CMakeLists.txt
└── src/
    └── main.cpp
</code></pre>
<h3 id="情况一就地构建不推荐">情况一：就地构建（不推荐）</h3>
<pre><code class="language-bash">cd /home/user/my_project
cmake .
</code></pre>
<ul>
<li>此时：
<ul>
<li><code>PROJECT_SOURCE_DIR</code> = <code>/home/user/my_project</code></li>
<li><code>PROJECT_BINARY_DIR</code> = <code>/home/user/my_project</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>⚠️ 这样会导致构建文件和源码混在一起，不利于维护。</p>
</blockquote>
<hr>
<h3 id="情况二外出构建out-of-source-build-推荐做法">情况二：外出构建<strong>out-of-source build</strong>（ 推荐做法）</h3>
<pre><code class="language-bash">cd /home/user/my_project/
mkdir build
cd build
cmake ..
</code></pre>
<ul>
<li>此时：
<ul>
<li><code>PROJECT_SOURCE_DIR</code> = <code>/home/user/my_project</code></li>
<li><code>PROJECT_BINARY_DIR</code> = <code>/home/user/my_project/build</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>✅ 所有构建产物都会被放在这个目录中，保持源码目录干净整洁。</p>
</blockquote>
<h2 id="三添加子目录到构建系统中">三、添加子目录到构建系统中</h2>
<p><code>add_subdirectory()</code> 是 CMake 中用于组织大型项目的非常重要的命令，它允许你将一个子目录添加到构建系统中，并在该子目录中执行其 <code>CMakeLists.txt</code> 文件。告诉 CMake 进入 <code>src/</code> 子目录，读取并处理其中的 <code>CMakeLists.txt</code> 文件。  子目录中的目标（如库或可执行文件）会被构建，并被主项目所使用。<strong>如果你在子目录中使用了 <code>add_subdirectory()</code>，每个子目录也有自己的 <code>CMAKE_CURRENT_BINARY_DIR</code>，但 <code>PROJECT_BINARY_DIR</code> 始终指向顶层构建目录。</strong>子目录中也可以继续调用 <code>add_subdirectory()</code> 添加更深层的模块。</p>
<pre><code class="language-cmake">add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])
</code></pre>
<ul>
<li><code>source_dir</code>: 必须参数，相对于当前 <code>CMakeLists.txt</code> 的源代码子目录路径。</li>
<li><code>binary_dir</code>: 可选参数，指定子目录构建输出的位置（默认是与源码同路径构建）。</li>
<li><code>EXCLUDE_FROM_ALL</code>: 可选参数，表示子目录中的目标不会被默认构建（除非被其他目标依赖）。</li>
</ul>
<h3 id="使用示例">使用示例</h3>
<p><strong>目录结构</strong></p>
<pre><code>my_project/
├── CMakeLists.txt           # 主 CMakeLists.txt
├── main.cpp
└── src/
    ├── CMakeLists.txt       # 子模块
    └── mylib.cpp
</code></pre>
<hr>
<p><strong><code>src/CMakeLists.txt</code> 示例</strong></p>
<pre><code class="language-cmake"># 构建一个静态库 libmylib.a
add_library(mylib STATIC mylib.cpp)

# 导出头文件目录
target_include_directories(mylib PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
</code></pre>
<p><strong>主 <code>CMakeLists.txt</code> 示例</strong></p>
<pre><code class="language-cmake">cmake_minimum_required(VERSION 3.14)
project(MyProject LANGUAGES CXX)

# 添加子目录 src
add_subdirectory(src)

# 添加主程序
add_executable(my_app main.cpp)

# 链接子目录中生成的库
target_link_libraries(my_app PRIVATE mylib)
</code></pre>
<h3 id="关键变量说明">关键变量说明</h3>
<p>在子目录中可以使用的变量：</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>CMAKE_CURRENT_SOURCE_DIR</code></td>
<td>当前 <code>CMakeLists.txt</code> 所在的源码目录</td>
</tr>
<tr>
<td><code>CMAKE_CURRENT_BINARY_DIR</code></td>
<td>对应的构建目录（即生成中间文件的地方）</td>
</tr>
<tr>
<td><code>PROJECT_SOURCE_DIR</code></td>
<td>顶层项目的源码目录（不变）</td>
</tr>
<tr>
<td><code>PROJECT_BINARY_DIR</code></td>
<td>顶层项目的构建目录（不变）</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="指定独立构建目录">指定独立构建目录</h3>
<p>你可以为子目录指定一个单独的构建路径：</p>
<pre><code class="language-cmake">add_subdirectory(src build_src)
</code></pre>
<p>这会把 <code>src/</code> 目录下的构建产物放到 <code>build_src/</code> 路径下，而不是直接放在 <code>src/</code> 中。</p>
<blockquote>
<p>⚠️ 注意：这个功能通常用于外部项目集成，比如结合 <code>ExternalProject_Add</code> 使用。</p>
</blockquote>
<h1 id="二定义可执行文件">（二）定义可执行文件</h1>
<p><strong>手动添加源文件</strong></p>
<p><code>add_executable()</code> 是 CMake 中用于定义一个可执行文件目标的命令。它告诉 CMake 你想要从一组源代码文件构建出一个可执行程序，并允许你在后续步骤中为这个目标添加属性，比如链接库、编译选项等。</p>
<ul>
<li><strong>定义目标</strong>：指定要生成的可执行文件名称以及由哪些源文件构成。</li>
<li><strong>组织构建</strong>：将相关的源文件组合成一个可执行文件，便于管理和构建。</li>
</ul>
<pre><code class="language-cmake">add_executable(target_name source1 [source2 ...])
</code></pre>
<ul>
<li><code>target_name</code>: 可执行文件的目标名称（即输出的可执行文件名）。</li>
<li><code>source1, source2, ...</code>: 构建该可执行文件所需的源代码文件列表。</li>
</ul>
<p><strong>非递归自动查找源文件</strong></p>
<pre><code class="language-cmake"># 作用：查找当前目录（. 表示当前目录）下所有的源文件（默认识别 .c, .cxx, .cpp, .cc 等），并将这些文件路径保存到变量 DIR_NAME 中。
# 不会递归子目录：只查找当前目录，不进入子目录。
# 常用于简单项目：适合小型项目或演示项目，快速将当前目录下所有源文件加入构建系统。
aux_source_directory(. DIR_NAME)
add_executable(target_name ${DIR_NAME})

</code></pre>
<p><strong>递归查找源文件</strong></p>
<p><code>file(GLOB_RECURSE ...)</code> 不会自动检测新增的文件，在 IDE 中（如 CLion、Qt Creator），可能需要重新运行 CMake 才能识别新加入的文件。</p>
<pre><code class="language-cmake"># 递归查找 src 目录下所有 .cpp 文件（包括子目录）这里的 GLOB_RECURSE 表示递归搜索。
file(GLOB_RECURSE SRC_LIST
    "${PROJECT_SOURCE_DIR}/*.cpp"
    "${PROJECT_SOURCE_DIR}/*.cc"
    "${PROJECT_SOURCE_DIR}/*.cxx"
)

# 添加可执行程序
add_executable(myapp ${SRC_LIST})
</code></pre>
<h2 id="示例-1">示例</h2>
<p>假设有一个简单的项目结构如下：</p>
<pre><code>my_project/
├── CMakeLists.txt
└── main.cpp

</code></pre>
<p>其中 <code>main.cpp</code> 包含了项目的入口代码。</p>
<h4 id="cmakeliststxt-示例"><code>CMakeLists.txt</code> 示例</h4>
<pre><code class="language-cmake">cmake_minimum_required(VERSION 3.10)
project(MyExecutable LANGUAGES CXX)

# 添加可执行文件目标
add_executable(my_app main.cpp)
</code></pre>
<p>在这个例子中，<code>my_app</code> 将是最终生成的可执行文件的名字，而 <code>main.cpp</code> 则是它的源文件。</p>
<h2 id="使用场景与扩展">使用场景与扩展</h2>
<h4 id="1-多个源文件">1. 多个源文件</h4>
<p>如果你的项目包含多个源文件，可以像下面这样列出所有源文件：</p>
<pre><code class="language-cmake">add_executable(my_app main.cpp utils.cpp network.cpp)
</code></pre>
<p>或者，使用通配符简化输入（虽然不推荐，因为这可能会导致不必要的重新构建）：</p>
<pre><code class="language-cmake">file(GLOB SOURCES "src/*.cpp")
add_executable(my_app ${SOURCES})
</code></pre>
<h4 id="2-链接外部库">2. 链接外部库</h4>
<p>你可以通过 <code>target_link_libraries()</code> 来链接你的可执行文件到其他库：</p>
<pre><code class="language-cmake">find_package(SomeLibrary REQUIRED)
add_executable(my_app main.cpp)
target_link_libraries(my_app PRIVATE Some::Library)
</code></pre>
<h4 id="3-设置编译选项">3. 设置编译选项</h4>
<p>你可以通过 <code>target_compile_options()</code> 或者 <code>target_compile_definitions()</code> 等命令来设置特定于目标的编译器选项或宏定义：</p>
<pre><code class="language-cmake">add_executable(my_app main.cpp)
target_compile_options(my_app PRIVATE -Wall -Wextra)
target_compile_definitions(my_app PRIVATE DEBUG=1)
</code></pre>
<h4 id="4-设置包含目录">4. 设置包含目录</h4>
<p>为了包含头文件路径，可以使用 <code>target_include_directories()</code>：</p>
<pre><code class="language-cmake">add_executable(my_app main.cpp)
target_include_directories(my_app PRIVATE ${PROJECT_SOURCE_DIR}/include)
</code></pre>
<h2 id="注意事项">注意事项</h2>
<ul>
<li><strong>目标名称唯一性</strong>：在一个 CMake 项目中，所有的目标名称必须是唯一的。</li>
<li><strong>避免重复定义</strong>：不要在同一个 CMakeLists.txt 文件或不同的子目录中重复定义相同的目标名称。</li>
<li><strong>现代 CMake 实践</strong>：尽量使用目标级别的命令（如 <code>target_link_libraries</code>, <code>target_include_directories</code>）而不是全局命令（如 <code>include_directories</code>, <code>link_libraries</code>），以提高封装性和减少冲突的可能性。</li>
</ul>
<h1 id="三头文件搜索路径和指定链接库">（三）头文件搜索路径和指定链接库</h1>
<h2 id="一目标级命令-vs-全局作用域命令">一、目标级命令 vs 全局作用域命令</h2>
<table>
<thead>
<tr>
<th>目标级命令</th>
<th>全局作用域命令</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>target_link_libraries(...)</code></td>
<td><code>link_libraries(...)</code>, <code>link_directories(...)</code></td>
</tr>
<tr>
<td><code>target_include_directories(...)</code></td>
<td><code>include_directories(...)</code></td>
</tr>
<tr>
<td><code>target_compile_options(...)</code></td>
<td><code>add_compile_options(...)</code></td>
</tr>
<tr>
<td><code>target_compile_definitions(...)</code></td>
<td><code>add_definitions(...)</code></td>
</tr>
</tbody>
</table>
<hr>
<h2 id="二逐个讲解每个命令的作用和用法">二、逐个讲解每个命令的作用和用法</h2>
<h3 id="1-target_include_directories">1. <code>target_include_directories(...)</code></h3>
<h4 id="作用--示例">作用 &amp; 示例</h4>
<p>为某个目标添加<strong>头文件搜索路径</strong>。在哪里搜索头文件。</p>
<pre><code class="language-cmake">target_include_directories(myapp PRIVATE ${PROJECT_SOURCE_DIR}/include)
</code></pre>
<ul>
<li><code>PRIVATE</code>: 表示这些头文件路径只对 <code>myapp</code> 生效。</li>
<li>支持 <code>PUBLIC</code> 和 <code>INTERFACE</code> 模式，用于控制是否将路径暴露给依赖者。</li>
</ul>
<h4 id="旧式写法不推荐">旧式写法（不推荐）：</h4>
<pre><code class="language-cmake">include_directories(${PROJECT_SOURCE_DIR}/include)
add_executable(myapp main.cpp)
</code></pre>
<blockquote>
<p>⚠️ 缺点：<code>include_directories(...)</code> 是全局生效的，会影响所有后续定义的目标，即使它们并不需要这些路径。</p>
</blockquote>
<h3 id="2-target_link_libraries">2. <code>target_link_libraries(...)</code></h3>
<h4 id="作用--示例-1">作用 &amp; 示例</h4>
<p>指定某个目标（如可执行文件或库）在链接阶段需要使用的其他库。</p>
<pre><code class="language-cmake">add_executable(myapp main.cpp)
target_link_libraries(myapp PRIVATE Some::Library)
</code></pre>
<ul>
<li><code>PRIVATE</code>: 表示这个依赖只用于 <code>myapp</code>，不会传递给使用 <code>myapp</code> 的目标。</li>
<li><code>Some::Library</code>: 是一个“导入目标”（imported target），通常通过 <code>find_package()</code> 获得。</li>
</ul>
<h4 id="旧式写法不推荐-1">旧式写法（不推荐）：</h4>
<pre><code class="language-cmake">link_directories(/usr/local/lib)
link_libraries(Some::Library)
add_executable(myapp main.cpp)
</code></pre>
<blockquote>
<p>⚠️ 缺点：<code>link_directories</code> 和 <code>link_libraries</code> 是全局生效的，影响所有后续目标，容易造成混乱。</p>
</blockquote>
<h3 id="3-target_compile_options">3. <code>target_compile_options(...)</code></h3>
<h4 id="作用--示例-2">作用 &amp; 示例</h4>
<p>为某个目标设置编译器选项（如 <code>-Wall</code>, <code>-O3</code>, <code>/W4</code> 等）。</p>
<pre><code class="language-cmake">target_compile_options(myapp PRIVATE -Wall -Wextra -O3)
</code></pre>
<ul>
<li>只对 <code>myapp</code> 这个目标生效。</li>
<li>支持跨平台编译器选项判断：</li>
</ul>
<pre><code class="language-cmake">target_compile_options(myapp PRIVATE
    $&lt;$&lt;CXX_COMPILER_ID:GNU&gt;:--pedantic&gt;
    $&lt;$&lt;CXX_COMPILER_ID:MSVC&gt;:/W4&gt;
)
</code></pre>
<h4 id="旧式写法不推荐-2">旧式写法（不推荐）：</h4>
<pre><code class="language-cmake">add_compile_options(-Wall -Wextra)
add_executable(myapp main.cpp)
</code></pre>
<blockquote>
<p>⚠️ 缺点：<code>add_compile_options(...)</code> 是全局生效的，影响所有目标。</p>
</blockquote>
<h3 id="4-target_compile_definitions">4. <code>target_compile_definitions(...)</code></h3>
<h4 id="作用--示例-3">作用 &amp; 示例</h4>
<p>为某个目标定义宏定义（预处理器宏），相当于 <code>-DNAME=VALUE</code>。</p>
<pre><code class="language-cmake">target_compile_definitions(myapp PRIVATE DEBUG=1 USE_FEATURE_X)
</code></pre>
<ul>
<li>仅对 <code>myapp</code> 生效。</li>
<li>不会污染其他目标。</li>
</ul>
<h4 id="旧式写法不推荐-3">旧式写法（不推荐）：</h4>
<pre><code class="language-cmake">add_definitions(-DDEBUG=1 -DUSE_FEATURE_X)
add_executable(myapp main.cpp)
</code></pre>
<blockquote>
<p>⚠️ 缺点：<code>add_definitions(...)</code> 是全局生效的，影响所有目标。</p>
</blockquote>
<h2 id="三进阶技巧使用-interface-库封装接口">三、进阶技巧：使用 INTERFACE 库封装接口</h2>
<p>你可以创建一个纯接口的库，把公共配置集中起来：</p>
<pre><code class="language-cmake">add_library(mylib INTERFACE)
target_include_directories(mylib INTERFACE ${PROJECT_SOURCE_DIR}/include)
target_compile_definitions(mylib INTERFACE DEBUG=1)
target_link_libraries(mylib INTERFACE Some::Library)

# 使用该接口库
add_executable(myapp main.cpp)
target_link_libraries(myapp PRIVATE mylib)
</code></pre>
<h1 id="四动态库和静态库">（四）动态库和静态库</h1>
<p>在 CMake 中，你可以通过 <code>add_library()</code> 命令来创建静态库或动态库（共享库）。这两个类型的库在编译、链接和最终部署时有不同的行为和用途。</p>
<ul>
<li>
<p><strong>静态库（Static Library）</strong>：</p>
<ul>
<li>文件扩展名通常为 <code>.a</code>（Unix/Linux）或 <code>.lib</code>（Windows）。</li>
<li>在编译时，静态库的代码会被直接复制到生成的可执行文件中。</li>
<li>优点：部署简单，因为所有依赖都已包含在可执行文件内；启动速度快，因为没有额外的加载过程。</li>
<li>缺点：可能导致可执行文件体积较大；如果多个程序使用同一个静态库，则每个程序都会携带一份副本，浪费磁盘空间和内存。</li>
</ul>
</li>
<li>
<p><strong>动态库（Shared Library）</strong>：</p>
<ul>
<li>文件扩展名为 <code>.so</code>（Unix/Linux）、<code>.dylib</code>（macOS）或 <code>.dll</code>（Windows）。</li>
<li>在编译时仅记录对库的引用，在运行时才真正加载这些库。</li>
<li>优点：多个程序可以共享同一份库的副本，节省磁盘空间和内存；便于更新，无需重新编译依赖它的程序。</li>
<li>缺点：需要确保在运行时能够找到并加载相应的库文件；可能会导致启动时间增加，因为需要加载外部库。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="创建静态库和动态库">创建静态库和动态库</h2>
<p>在 CMake 中，使用 <code>add_library()</code> 来定义库，并通过指定库类型来决定是创建静态库还是动态库。如果没有指定 <code>STATIC</code> 或 <code>SHARED</code>，CMake 将根据平台默认设置选择一种类型。但是为了明确性和控制力，建议总是显式地指定库类型。</p>
<h3 id="创建静态库static">创建静态库STATIC</h3>
<pre><code class="language-cmake">add_library(my_static_lib STATIC source1.cpp source2.cpp)
</code></pre>
<ul>
<li><code>STATIC</code>: 表示创建一个静态库。</li>
</ul>
<h3 id="创建动态库shared">创建动态库SHARED</h3>
<pre><code class="language-cmake">add_library(my_shared_lib SHARED source1.cpp source2.cpp)
</code></pre>
<ul>
<li><code>SHARED</code>: 表示创建一个动态库。</li>
</ul>
<h2 id="使用库">使用库</h2>
<p>无论是静态库还是动态库，都可以通过 <code>target_link_libraries()</code> 来将它们链接到你的可执行文件或其他库中。</p>
<h3 id="示例-2">示例</h3>
<p>假设你有一个项目结构如下：</p>
<pre><code>my_project/
├── CMakeLists.txt
└── src/
    ├── main.cpp
    └── mylib.cpp
    └── mylib.h
</code></pre>
<h4 id="cmakeliststxt">CMakeLists.txt</h4>
<pre><code class="language-cmake">cmake_minimum_required(VERSION 3.10)
project(MyProject LANGUAGES CXX)

# 添加子目录 src
add_subdirectory(src)

# 添加主程序
add_executable(main_app main.cpp)

# 链接库
target_link_libraries(main_app PRIVATE mylib) # 假设 mylib 是上面添加的库
</code></pre>
<h4 id="srccmakeliststxt">src/CMakeLists.txt</h4>
<pre><code class="language-cmake"># 创建静态库
add_library(my_static_lib STATIC mylib.cpp)

# 创建动态库
add_library(my_shared_lib SHARED mylib.cpp)

# 导出静态库头文件目录
target_include_directories(my_static_lib PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
# 导出动态库头文件目录
target_include_directories(my_shared_lib PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

# 在 Windows 上构建 .dll 动态库时，默认情况下，CMake 不会自动导出任何符号（与 Linux/macOS 上的 .so/.dylib 行为不同）。你需要明确告诉编译器哪些符号应该被导出，供外部程序调用。Linux、macOS 上不需要加这一行代码
set_target_properties(my_shared_lib PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE)

# 安装库文件
install(TARGETS my_static_lib my_shared_lib
        ARCHIVE DESTINATION lib
        LIBRARY DESTINATION lib
        RUNTIME DESTINATION bin
        INCLUDES DESTINATION include)

# 安装头文件（可选，如果 PUBLIC 没有包含全部头文件）
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/mylib.h
        DESTINATION include)

# 可选：导出配置文件以支持 find_package()
install(EXPORT MyLibTargets
        FILE MyLibTargets.cmake
        NAMESPACE MyLib::
        DESTINATION lib/cmake/MyLib)

</code></pre>
<hr>
<h2 id="特别注意事项">特别注意事项</h2>
<ul>
<li>
<p><strong>Windows 上的 DLLs</strong>：在 Windows 平台上，当创建动态库时，通常还需要提供一个“导入库”（.lib 文件），这个文件包含了对外部函数的引用信息。CMake 会自动生成这个导入库。</p>
</li>
<li>
<p><strong>版本号与 ABI 兼容性</strong>：对于共享库，特别是在 Linux 系统上，考虑给库加上版本号以管理 ABI（应用程序二进制接口）兼容性问题。可以通过 <code>set_target_properties()</code> 设置属性来实现这一点。</p>
</li>
<li>
<p><strong>安装规则</strong>：如果你计划分发你的库，可能需要定义安装规则，以便于正确地安装头文件和库文件到系统目录。</p>
</li>
</ul>
<p>例如：</p>
<pre><code class="language-cmake">install(TARGETS my_shared_lib DESTINATION lib)
install(FILES mylib.h DESTINATION include)
</code></pre>
<p><strong>这将把你的共享库安装到系统的 <code>lib</code> 目录下，头文件安装到 <code>include</code> 目录下。</strong></p>
<h1 id="五查找和加载外部依赖库">（五）查找和加载外部依赖库</h1>
<p><code>find_package()</code> 是 CMake 中用于 <strong>查找和加载外部依赖库（第三方库或系统库）</strong> 的核心命令之一。它帮助你自动检测系统中是否安装了某个库，并设置好相应的变量（如头文件路径、库路径、版本号等），以便后续使用这些库进行编译和链接。</p>
<h2 id="一find_package-的作用">一、<code>find_package</code> 的作用</h2>
<p>简单来说，它的主要功能是：</p>
<ul>
<li>查找指定的库是否存在于系统中</li>
<li>设置相关变量：
<ul>
<li><code>&lt;PackageName&gt;_FOUND</code>: 是否找到该库</li>
<li><code>&lt;PackageName&gt;_INCLUDE_DIRS</code> 或 <code>&lt;PackageName&gt;_INCLUDE_DIR</code>: 头文件路径</li>
<li><code>&lt;PackageName&gt;_LIBRARIES</code> 或 <code>&lt;PackageName&gt;_LIBRARY</code>: 库文件路径</li>
<li><code>&lt;PackageName&gt;_VERSION</code>: 版本信息（如果支持）</li>
</ul>
</li>
<li>自动导入目标（现代用法）：可以直接 <code>target_link_libraries(my_target PRIVATE Some::Library)</code></li>
</ul>
<hr>
<h2 id="二基本语法">二、基本语法</h2>
<pre><code class="language-cmake">find_package(&lt;PackageName&gt; [version] [EXACT] [QUIET] [MODULE]
             [REQUIRED] [[COMPONENTS] [components...]]
             [OPTIONAL_COMPONENTS components...]
             [NO_POLICY_SCOPE])
</code></pre>
<p><strong>参数说明：</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;PackageName&gt;</code></td>
<td>要查找的包名，比如 <code>Threads</code>, <code>OpenCV</code>, <code>CUDA</code>, <code>Protobuf</code> 等</td>
</tr>
<tr>
<td><code>[version]</code></td>
<td>可选，指定最低版本要求</td>
</tr>
<tr>
<td><code>EXACT</code></td>
<td>可选，要求精确匹配版本</td>
</tr>
<tr>
<td><code>QUIET</code></td>
<td>可选，禁止输出错误信息</td>
</tr>
<tr>
<td><code>MODULE</code></td>
<td>可选，强制使用模块模式（Module mode）而不是配置模式（Config mode）</td>
</tr>
<tr>
<td><code>REQUIRED</code></td>
<td>可选，如果找不到包则报错并停止构建</td>
</tr>
<tr>
<td><code>COMPONENTS</code></td>
<td>可选，指定需要查找的子组件（适用于有多个组件的库，如 Qt5Core, Qt5Gui 等）</td>
</tr>
</tbody>
</table>
<h2 id="三典型使用示例">三、典型使用示例</h2>
<h3 id="示例-1查找线程库threads">示例 1：查找线程库（Threads）</h3>
<pre><code class="language-cmake">find_package(Threads REQUIRED)
target_link_libraries(my_target PRIVATE Threads::Threads)
</code></pre>
<ul>
<li><code>find_package(Threads REQUIRED)</code>：查找线程库</li>
<li><code>Threads::Threads</code>：现代 CMake 推荐的导入方式，表示找到的线程库目标</li>
</ul>
<hr>
<h3 id="示例-2查找-cuda">示例 2：查找 CUDA</h3>
<pre><code class="language-cmake">find_package(CUDA 11.7 REQUIRED)
if (CUDA_FOUND)
    message(STATUS "Found CUDA ${CUDA_VERSION}")
endif()
</code></pre>
<hr>
<h3 id="示例-3查找-opencv-并链接">示例 3：查找 OpenCV 并链接</h3>
<pre><code class="language-cmake">find_package(OpenCV REQUIRED COMPONENTS core imgproc highgui)
include_directories(${OpenCV_INCLUDE_DIRS})
add_executable(my_app main.cpp)
target_link_libraries(my_app PRIVATE ${OpenCV_LIBS})
</code></pre>
<hr>
<h3 id="示例-4查找可选库非必须">示例 4：查找可选库（非必须）</h3>
<pre><code class="language-cmake">find_package(ZLIB QUIET)
if (ZLIB_FOUND)
    target_compile_definitions(my_target PRIVATE HAVE_ZLIB)
    target_link_libraries(my_target PRIVATE ZLIB::ZLIB)
else()
    message(WARNING "ZLIB not found, some features will be disabled.")
endif()
</code></pre>
<h2 id="四两种查找模式">四、两种查找模式</h2>
<p>CMake 支持两种查找机制：</p>
<h3 id="1-module-mode模块模式">1. <strong>Module Mode（模块模式）</strong></h3>
<ul>
<li>使用内置的 <code>Find&lt;PackageName&gt;.cmake</code> 文件来查找库</li>
<li>通常用于标准库或常见第三方库（如 Threads、OpenGL、SDL 等）</li>
<li>示例：<code>FindOpenCV.cmake</code></li>
</ul>
<h3 id="2-config-mode配置模式">2. <strong>Config Mode（配置模式）</strong></h3>
<ul>
<li>使用库自带的 <code>&lt;PackageName&gt;Config.cmake</code> 文件</li>
<li>更现代、更灵活的方式，推荐优先使用</li>
<li>一般在你安装了某个库之后会自动生成这些文件（如通过 <code>make install</code> 或 <code>vcpkg</code>, <code>conan</code> 安装）</li>
</ul>
<p>你可以通过环境变量 <code>CMAKE_PREFIX_PATH</code> 来告诉 CMake 去哪些路径下查找这些配置文件。</p>
<h2 id="五如何查看-find_package-找到了什么">五、如何查看 find_package 找到了什么？</h2>
<p>你可以在 <code>CMakeLists.txt</code> 中加入以下代码来打印相关信息：</p>
<pre><code class="language-cmake">message(STATUS "&lt;PackageName&gt;_FOUND: ${PackageName}_FOUND")
message(STATUS "&lt;PackageName&gt;_INCLUDE_DIRS: ${PackageName}_INCLUDE_DIRS")
message(STATUS "&lt;PackageName&gt;_LIBRARIES: ${PackageName}_LIBRARIES")
message(STATUS "&lt;PackageName&gt;_VERSION: ${PackageName}_VERSION")
</code></pre>
<p>或者在运行 cmake 时加上 <code>--debug-find</code>（某些版本支持）查看详细查找过程。</p>
<h2 id="六一些常见的可以-find_package-的库">六、一些常见的可以 find_package 的库</h2>
<table>
<thead>
<tr>
<th>包名</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Threads</code></td>
<td>多线程支持</td>
</tr>
<tr>
<td><code>CUDA</code></td>
<td>NVIDIA GPU 编程支持</td>
</tr>
<tr>
<td><code>OpenMP</code></td>
<td>OpenMP 并行编程支持</td>
</tr>
<tr>
<td><code>OpenCV</code></td>
<td>计算机视觉库</td>
</tr>
<tr>
<td><code>Eigen3</code></td>
<td>C++ 矩阵运算库</td>
</tr>
<tr>
<td><code>Boost</code></td>
<td>C++ 扩展库</td>
</tr>
<tr>
<td><code>Python3</code></td>
<td>Python 支持</td>
</tr>
<tr>
<td><code>PkgConfig</code></td>
<td>使用 pkg-config 查找其他库</td>
</tr>
<tr>
<td><code>Doxygen</code></td>
<td>文档生成工具</td>
</tr>
<tr>
<td><code>Git</code></td>
<td>Git 工具支持</td>
</tr>
</tbody>
</table>
<h1 id="六配置文件configure_file">（六）配置文件configure_file</h1>
<p><code>configure_file</code> 是 CMake 中的一个命令，用于在构建过程的配置阶段生成新的文件或更新现有文件。这个命令通常用来处理模板文件，比如将一些项目配置或者版本信息嵌入到源代码中，或者根据构建环境的不同生成不同的配置文件。<code>*.in</code> 模板文件一般是用于在 cmake 执行阶段（准确来说，应该是配置阶段）将其嵌入的 CMake 变量、列表展开，并生成目标文件的过程中的。这一步通常是由 <code>configure_file()</code> 完成，会在<a href="https://www.cccolt.top/tutorial/cmake/06.html" target="_blank" rel="noopener nofollow">【06】变量参与 C++ 的编译</a> 中进行介绍。<code>*.in</code> 的后缀是约定俗成的，当然也可以使用其他形式的后缀。</p>
<h3 id="基本用法">基本用法</h3>
<pre><code class="language-cmake">configure_file(&lt;input&gt; &lt;output&gt;
               [NO_SOURCE_PERMISSIONS | FILE_PERMISSIONS &lt;permissions&gt;...]
               [COPYONLY] [ESCAPE_QUOTES] [@ONLY])
</code></pre>
<ul>
<li><code>&lt;input&gt;</code>: 模板文件的位置。可以使用相对路径或绝对路径。</li>
<li><code>&lt;input&gt;</code> 文件中可以包含 CMake 变量，它们会在执行 <code>configure_file</code> 时被实际值替换。</li>
<li><code>&lt;output&gt;</code>: 目标文件的位置和名称。如果目标文件已经存在，则会被覆盖。</li>
</ul>
<h3 id="示例-3">示例</h3>
<p>假设你有一个名为 <code>config.h.in</code> 的输入文件，内容如下：</p>
<pre><code class="language-cpp">#define PROJECT_SOURCE_DIR "@CMAKE_SOURCE_DIR@"
#define PROJECT_VERSION "@PROJECT_VERSION@"
</code></pre>
<p>然后，在你的 <code>CMakeLists.txt</code> 文件中，你可以这样使用 <code>configure_file</code>：</p>
<pre><code class="language-cmake">cmake_minimum_required(VERSION 3.10)
project(MyProject VERSION 1.0)

configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/config.h.in
  ${CMAKE_CURRENT_BINARY_DIR}/config.h
)
</code></pre>
<p>在这个例子中，<code>@CMAKE_SOURCE_DIR@</code> 和 <code>@PROJECT_VERSION@</code> 这样的标记会被对应的 CMake 变量值所替换，<strong>并生成一个新的 <code>config.h</code> 文件到构建目录下</strong>。</p>
<h3 id="参数解释">参数解释</h3>
<ul>
<li><code>NO_SOURCE_PERMISSIONS</code>: 不复制原始文件的权限设置给输出文件，默认情况下会复制。</li>
<li><code>FILE_PERMISSIONS</code>: 设置输出文件的权限。</li>
<li><code>COPYONLY</code>: 如果指定了此选项，<code>configure_file</code> 将不会替换任何变量，只会简单地复制文件。</li>
<li><code>ESCAPE_QUOTES</code>: 转义输出中的引号（对于某些特定情况可能需要）。</li>
<li><code>@ONLY</code>: 仅替换以 <code>@</code> 开头和结尾的变量，忽略 <code>${}</code> 格式的变量引用。</li>
</ul>
<p><code>configure_file</code> 是一个非常有用的工具，尤其是在你需要基于构建环境动态生成配置文件的时候。通过它，你可以轻松实现从简单的文本替换到复杂的配置文件生成等多种任务。</p>
<h2 id="举例说明1在代码中使用">举例说明1：在代码中使用</h2>
<h3 id="背景">背景</h3>
<p>假设你正在开发一个C++项目，并希望在编译时根据项目的设置动态生成配置头文件（如 <code>config.h</code>），以便于在代码中访问一些构建时确定的信息，比如项目版本号、源码目录等。</p>
<h3 id="步骤-1-创建模板文件">步骤 1: 创建模板文件</h3>
<p>首先，在你的项目目录下创建一个名为 <code>config.h.in</code> 的模板文件。这个文件将包含一些占位符，这些占位符会在构建时被实际值替换。</p>
<p>例如，<code>config.h.in</code> 文件内容如下：</p>
<pre><code class="language-cpp">#pragma once

#define PROJECT_SOURCE_DIR "@CMAKE_SOURCE_DIR@"
#define PROJECT_VERSION "@PROJECT_VERSION@"
</code></pre>
<p>这里的 <code>@CMAKE_SOURCE_DIR@</code> 和 <code>@PROJECT_VERSION@</code> 是占位符，它们会被 CMake 中定义的实际值替换。</p>
<h3 id="步骤-2-修改-cmakeliststxt">步骤 2: 修改 CMakeLists.txt</h3>
<p>接下来，你需要修改或者创建 <code>CMakeLists.txt</code> 文件，告诉 CMake 在构建过程中如何处理这个模板文件。</p>
<pre><code class="language-cmake">cmake_minimum_required(VERSION 3.10)

# 定义项目名称和版本
project(MyProject VERSION 1.0)

# 使用 configure_file 命令处理模板文件
configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/config.h.in
  ${CMAKE_CURRENT_BINARY_DIR}/config.h
)
</code></pre>
<p>这里我们使用了 <code>configure_file</code> 命令来指定输入文件（<code>config.h.in</code>）和输出文件（<code>config.h</code>）。<code>${CMAKE_CURRENT_SOURCE_DIR}</code> 和 <code>${CMAKE_CURRENT_BINARY_DIR}</code> 分别表示源代码目录和构建目录。</p>
<h3 id="步骤-3-构建项目">步骤 3: 构建项目</h3>
<p>现在，当你运行 CMake 来构建项目时，它会自动处理 <code>config.h.in</code> 文件，并生成一个新的 <code>config.h</code> 文件到构建目录下。</p>
<p>例如，如果你的源代码目录结构如下：</p>
<pre><code>MyProject/
├── CMakeLists.txt
└── config.h.in
</code></pre>
<p>并且你在一个单独的构建目录中执行 CMake：</p>
<pre><code class="language-bash">mkdir build
cd build
cmake ..
</code></pre>
<p>CMake 将会在 <code>build/</code> 目录下生成 <code>config.h</code> 文件，其内容类似于：</p>
<pre><code class="language-cpp">#pragma once

#define PROJECT_SOURCE_DIR "/path/to/your/source/directory"
#define PROJECT_VERSION "1.0"
</code></pre>
<p>这样，你就可以在代码中包含这个自动生成的 <code>config.h</code> 文件，并访问其中定义的宏了：</p>
<pre><code class="language-cpp">#include "config.h"

void printConfig() {
    std::cout &lt;&lt; "Source directory: " &lt;&lt; PROJECT_SOURCE_DIR &lt;&lt; "\n";
    std::cout &lt;&lt; "Version: " &lt;&lt; PROJECT_VERSION &lt;&lt; "\n";
}
</code></pre>
<p>通过这种方式，你可以轻松地在构建时生成包含特定信息的配置文件，这在大型项目中特别有用。</p>
<h2 id="举例说明2控制子目录编译和链接库设置">举例说明2：<strong>控制子目录编译和链接库设置</strong></h2>
<p>在 <code>config.h.in</code> 文件中使用 <code>#cmakedefine USE_MYMATH</code>，然后根据 CMake 中是否定义了某个变量（例如 <code>USE_MYMATH</code>），来决定生成的 <code>config.h</code> 文件中是否启用这个宏定义。</p>
<hr>
<h2 id="场景说明">场景说明</h2>
<p>你想控制是否启用某个功能模块（比如自定义数学库 <code>mymath</code>），通过 CMake 配置时决定是否定义 <code>USE_MYMATH</code> 宏，并在源代码中通过预处理指令判断：</p>
<h3 id="1-创建-confighin-文件">1. 创建 <code>config.h.in</code> 文件</h3>
<p>内容如下：</p>
<pre><code class="language-cpp">#pragma once

#cmakedefine USE_MYMATH
</code></pre>
<blockquote>
<p>⚠️ 注意：</p>
<ul>
<li><code>#cmakedefine</code> 是 CMake 的特殊语法。</li>
<li>如果 CMake 中设置了 <code>USE_MYMATH</code> 变量（为 <code>ON</code>、<code>TRUE</code> 或非空值），则会在生成的 <code>config.h</code> 中变成 <code>#define USE_MYMATH</code>。</li>
<li>否则，这行会被注释掉或直接省略。</li>
</ul>
</blockquote>
<hr>
<h3 id="2-修改-cmakeliststxt">2. 修改 <code>CMakeLists.txt</code></h3>
<p>假设你有一个选项让用户选择是否启用 <code>USE_MYMATH</code>：</p>
<pre><code class="language-cmake">cmake_minimum_required(VERSION 3.10)
project(MyProject VERSION 1.0)

# 定义 USE_MYMATH 开关，默认为 ON
option(USE_MYMATH "Use the custom math library" ON)

# 配置 config.h 头文件
configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/config.h.in
  ${CMAKE_CURRENT_BINARY_DIR}/config.h
)

# 设置包含路径（如果需要让源码中 #include "config.h"）
include_directories(${CMAKE_CURRENT_BINARY_DIR})

# 如果启用了 USE_MYMATH，则处理 math 子模块
if(USE_MYMATH)
    include_directories("${PROJECT_SOURCE_DIR}/math")
    add_subdirectory(math)
    set(EXTRA_LIBS mathfun)
else()
    unset(EXTRA_LIBS) # 可选：避免变量污染
endif()

# 添加主程序
add_executable(myapp main.cpp)

# 链接额外库（如果有）
if(DEFINED EXTRA_LIBS)
    target_link_libraries(myapp PRIVATE ${EXTRA_LIBS})
endif()
</code></pre>
<ul>
<li><code>option()</code> 创建了一个可配置的开关，默认是 <code>ON</code>。</li>
<li><code>configure_file()</code> 根据这个变量是否存在，来决定是否在 <code>config.h</code> 中写入 <code>#define USE_MYMATH</code>。</li>
</ul>
<hr>
<h3 id="3-在代码中使用这个宏">3. 在代码中使用这个宏</h3>
<p>比如在 <code>main.cpp</code> 中：</p>
<pre><code class="language-cpp">#include "config.h"

#include &lt;iostream&gt;

int main() {
#ifdef USE_MYMATH
    std::cout &lt;&lt; "Using my custom math library." &lt;&lt; std::endl;
#else
    std::cout &lt;&lt; "Using standard math functions." &lt;&lt; std::endl;
#endif
    return 0;
}
</code></pre>
<hr>
<h3 id="4-构建项目并测试">4. 构建项目并测试</h3>
<h4 id="默认构建use_mymathon">默认构建（USE_MYMATH=ON）</h4>
<pre><code class="language-bash">mkdir build
cd build
cmake ..
make
./myapp
</code></pre>
<p>输出：</p>
<pre><code>Using my custom math library.
</code></pre>
<h4 id="关闭-use_mymath">关闭 USE_MYMATH</h4>
<pre><code class="language-bash">cmake .. -DUSE_MYMATH=OFF
make
./myapp
</code></pre>
<p>输出：</p>
<pre><code>Using standard math functions.
</code></pre>
<hr>
<h2 id="查看生成的-configh-内容">查看生成的 config.h 内容</h2>
<p>你可以查看构建目录下的 <code>config.h</code> 文件内容：</p>
<ul>
<li>如果启用了 <code>USE_MYMATH</code>，内容是：</li>
</ul>
<pre><code class="language-cpp">#pragma once

#define USE_MYMATH
</code></pre>
<ul>
<li>如果没有启用，则是：</li>
</ul>
<pre><code class="language-cpp">#pragma once

/* #undef USE_MYMATH */
</code></pre>
<p>或者干脆不出现这一行（取决于 CMake 版本）。</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>未经作者同意请勿转载</p>
<p>本文来自博客园作者：<a href="https://www.cnblogs.com/aslanvon/" target="_blank">aixueforever</a>，原文链接：<a href="https://www.cnblogs.com/aslanvon/p/18920022" target="_blank">https://www.cnblogs.com/aslanvon/p/18920022</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.6034891872071759" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-06-08 23:55">2025-06-08 23:54</span>&nbsp;
<a href="https://www.cnblogs.com/aslanvon">aixueforever</a>&nbsp;
阅读(<span id="post_view_count">69</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18920022);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18920022', targetLink: 'https://www.cnblogs.com/aslanvon/p/18920022', title: 'CMAKE学习笔记【上】' })">举报</a>
</div>
        