
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/huangSir-devops/p/18916721" title="发布于 2025-07-23 10:59">
    <span role="heading" aria-level="2">基于Helm部署kube-prometheus-stack</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="概述">概述</h2>
<p>GitHub地址：<a href="https://github.com/prometheus-operator/prometheus-operator" target="_blank" rel="noopener nofollow">https://github.com/prometheus-operator/prometheus-operator</a><br>
Helm仓库：<a href="https://prometheus-community.github.io/helm-charts" target="_blank" rel="noopener nofollow">https://prometheus-community.github.io/helm-charts</a></p>
<h2 id="安装prometheus-operator前置条件">安装prometheus-operator前置条件：</h2>
<p>确保你有一个k8s集群</p>
<blockquote>
<p>安装k8s集群可参考：<a href="https://www.cnblogs.com/huangSir-devops/p/18847938" title="使用sealos快速搭建kubernetes集群！！！" target="_blank">使用sealos快速搭建kubernetes集群！！！</a></p>
</blockquote>
<p>确保你安装了Helm</p>
<blockquote>
<p>安装Helm可参考：<a href="https://www.cnblogs.com/huangSir-devops/p/18905373#_label3" title="安装Helm" target="_blank">安装Helm</a></p>
</blockquote>
<h2 id="实操">实操</h2>
<h3 id="创建sc">创建SC</h3>
<p>我这里以NFS作为存储</p>
<blockquote>
<p>配置NFS参考这篇文章：<a href="https://www.cnblogs.com/huangSir-devops/p/18802386" target="_blank">https://www.cnblogs.com/huangSir-devops/p/18802386</a><br>
创建SC参考：<a href="https://www.cnblogs.com/huangSir-devops/p/18871414#_label4_2" target="_blank">https://www.cnblogs.com/huangSir-devops/p/18871414#_label4_2</a></p>
</blockquote>
<p>创建grafana的存储</p>
<pre><code># 配置NFS
[root@master01 ~/volumes]# mkdir -p /data/nfs/grafana
[root@master01 ~/volumes]# echo '/data/nfs/grafana 10.0.0.0/24(rw,sync,no_root_squash,no_subtree_check)' &gt;&gt; /etc/exports
[root@master ~/volumes]# exportfs -ra

# 定义资源清单
[root@master01 ~/volumes]# cat grafana-sc.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: grafana-sc  # StorageClass名称，PVC通过该名称引用此存储类
provisioner: nfs.csi.k8s.io  # 指定使用NFS CSI驱动作为存储供给器
parameters:  # 传递给NFS CSI驱动的参数
  server: 10.0.0.30  # NFS服务器的IP地址
  share: /data/nfs/grafana  # NFS服务器上的共享目录路径
  # csi.storage.k8s.io/provisioner-secret is only needed for providing mountOptions in DeleteVolume
  # csi.storage.k8s.io/provisioner-secret-name: "mount-options"
  # csi.storage.k8s.io/provisioner-secret-namespace: "default"
reclaimPolicy: Retain  # 回收策略：当PVC被删除时，PV保留不删除
volumeBindingMode: Immediate  # 卷绑定模式：立即绑定，不需要等待Pod调度
allowVolumeExpansion: true  # 允许卷扩容：支持通过修改PVC请求更大容量

[root@master ~]# kubectl apply -f grafana-sc.yaml

[root@master ~]# kubectl get sc
NAME         PROVISIONER      RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE
grafana-sc   nfs.csi.k8s.io   Retain          Immediate           true                   3m44s
</code></pre>
<p>创建Prometheus的存储</p>
<pre><code># 配置NFS
[root@master01 ~/volumes]# mkdir -p /data/nfs/prometheus
[root@master01 ~/volumes]# echo '/data/nfs/prometheus 10.0.0.0/24(rw,sync,no_root_squash,no_subtree_check)' &gt;&gt; /etc/exports
[root@master ~/volumes]# exportfs -ra

[root@master01 ~/volumes]# cat prometheus-sc.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: prometheus-sc  # StorageClass名称，PVC通过该名称引用此存储类
provisioner: nfs.csi.k8s.io  # 指定使用NFS CSI驱动作为存储供给器
parameters:  # 传递给NFS CSI驱动的参数
  server: 10.0.0.30  # NFS服务器的IP地址
  share: /data/nfs/prometheus  # NFS服务器上的共享目录路径
  # csi.storage.k8s.io/provisioner-secret is only needed for providing mountOptions in DeleteVolume
  # csi.storage.k8s.io/provisioner-secret-name: "mount-options"
  # csi.storage.k8s.io/provisioner-secret-namespace: "default"
reclaimPolicy: Retain  # 回收策略：当PVC被删除时，PV保留不删除
volumeBindingMode: Immediate  # 卷绑定模式：立即绑定，不需要等待Pod调度
allowVolumeExpansion: true  # 允许卷扩容：支持通过修改PVC请求更大容量

[root@master ~/volumes]# kubectl apply -f prometheus-sc.yaml
storageclass.storage.k8s.io/prometheus-sc created
[root@master ~/volumes]# kubectl get sc
NAME            PROVISIONER      RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE
grafana-sc      nfs.csi.k8s.io   Retain          Immediate           true                   3h40m
nfs-csi         nfs.csi.k8s.io   Delete          Immediate           true                   175m
prometheus-sc   nfs.csi.k8s.io   Retain          Immediate           true                   4s
</code></pre>
<h3 id="配置operator">配置operator</h3>
<p>添加仓库</p>
<pre><code># 添加社区版仓库
[root@master ~]# helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
[root@master ~]# helm repo update
[root@master ~]# helm pull helm pull prometheus/kube-prometheus-stack --version 73.2.0


# 如果上面因为网络报错，可使用下面的
[root@master ~]# wget https://github.com/prometheus-community/helm-charts/releases/download/kube-prometheus-stack-73.2.0/kube-prometheus-stack-73.2.0.tgz
</code></pre>
<p>解压</p>
<pre><code>[root@master ~]# tar -xvf kube-prometheus-stack-73.2.0.tgz
[root@master ~]# ll kube-prometheus-stack
total 228
drwxr-xr-x  4 root root   4096 Jun  7 15:27 ./
drwx------ 31 root root   4096 Jun  7 15:27 ../
-rw-r--r--  1 root root    458 Jun  6 01:22 .helmignore
-rw-r--r--  1 root root    615 Jun  6 01:22 Chart.lock
-rw-r--r--  1 root root   2571 Jun  6 01:22 Chart.yaml
-rw-r--r--  1 root root  19869 Jun  6 01:22 README.md
drwxr-xr-x  7 root root   4096 Jun  7 15:27 charts/
drwxr-xr-x  8 root root   4096 Jun  7 15:27 templates/
-rw-r--r--  1 root root 182959 Jun  6 01:22 values.yaml
</code></pre>
<p>修改镜像源，防止镜像拉取失败</p>
<pre><code>[root@master ~/kube-prometheus-stack]# sed -i s#registry.k8s.io#k8s.m.daocloud.io#g values.yaml
[root@master ~/kube-prometheus-stack]# sed -i s#quay.io#quay.m.daocloud.io#g values.yaml
[root@master ~/kube-prometheus-stack]# sed -i s#docker.io#docker.m.daocloud.io#g values.yaml
[root@master ~/kube-prometheus-stack]# sed -i s#registry.k8s.io#k8s.m.daocloud.io#g charts/kube-state-metrics/values.yaml
</code></pre>
<p>配置Grafana</p>
<pre><code>[root@master ~]# vim ~/kube-prometheus-stack/charts/grafana/values.yaml
# 修改service，改成NodePort访问
 231 service:
 232   enabled: true
 233   type: NodePort
 234   nodePort: 30030

# 配置存储
 417 persistence:
 418   type: pvc
 419   enabled: true
       # sc的名称，和上面保持一致
 420   storageClassName: grafana-sc
 421   ## (Optional) Use this to bind the claim to an existing PersistentVolume (PV) by name.
 422   volumeName: ""

# 修改用户名密码 （可选）
[root@master ~]# vim ~/kube-prometheus-stack/values.yaml
1287   adminUser: admin
1288   adminPassword: prom-operator
</code></pre>
<p>配置Prometheus</p>
<pre><code>[root@master ~]# vim ~/kube-prometheus-stack/values.yaml
3371 prometheus:
3372   enabled: true
# 修改service类型NodePort
3564    type: NodePort
# 端口可选配置
3551     nodePort: 30090
# 存储配置
4299     storageSpec:
4300     ## Using PersistentVolumeClaim
4301     ##
4302       volumeClaimTemplate:
4303         spec:
4304           storageClassName: prometheus-sc
4305           accessModes: ["ReadWriteOnce"]
4306           resources:
4307             requests:
4308               storage: 10Gi

</code></pre>
<h3 id="创建realsese">创建Realsese</h3>
<pre><code>[root@master ~]# helm install prometheus kube-prometheus-stack --debug
# 出现以下内容即代表成功
NOTES:
kube-prometheus-stack has been installed. Check its status by running:
  kubectl --namespace default get pods -l "release=prometheus"

Get Grafana 'admin' user password by running:

  kubectl --namespace default get secrets prometheus-grafana -o jsonpath="{.data.admin-password}" | base64 -d ; echo

Access Grafana local instance:

  export POD_NAME=$(kubectl --namespace default get pod -l "app.kubernetes.io/name=grafana,app.kubernetes.io/instance=prometheus" -oname)
  kubectl --namespace default port-forward $POD_NAME 3000

Visit https://github.com/prometheus-operator/kube-prometheus for instructions on how to create &amp; configure Alertmanager and Prometheus instances using the Operator.
</code></pre>
<p>查看创建的资源</p>
<pre><code># 查看Pod
[root@master ~]# kubectl get po
NAME                                                     READY   STATUS    RESTARTS   AGE
alertmanager-prometheus-kube-prometheus-alertmanager-0   2/2     Running   0          70s
prometheus-grafana-55cbbf54b7-lmhnd                      3/3     Running   0          70s
prometheus-kube-prometheus-operator-847fd659bc-scp4w     1/1     Running   0          70s
prometheus-kube-state-metrics-5fb66759db-nb242           1/1     Running   0          70s
prometheus-prometheus-kube-prometheus-prometheus-0       2/2     Running   0          70s
prometheus-prometheus-node-exporter-89xt7                1/1     Running   0          70s
prometheus-prometheus-node-exporter-cn8s4                1/1     Running   0          70s
prometheus-prometheus-node-exporter-llqgx                1/1     Running   0          70s

# 查看svc
[root@master ~]# kubectl get svc
NAME                                      TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)                         AGE
alertmanager-operated                     ClusterIP   None          &lt;none&gt;        9093/TCP,9094/TCP,9094/UDP      5m
kubernetes                                ClusterIP   10.96.0.1     &lt;none&gt;        443/TCP                         5m
prometheus-grafana                        NodePort    10.96.1.173   &lt;none&gt;        80:30030/TCP                    5m
prometheus-kube-prometheus-alertmanager   ClusterIP   10.96.3.151   &lt;none&gt;        9093/TCP,8080/TCP               5m
prometheus-kube-prometheus-operator       ClusterIP   10.96.2.62    &lt;none&gt;        443/TCP                         5m
prometheus-kube-prometheus-prometheus     NodePort    10.96.0.114   &lt;none&gt;        9090:30090/TCP,8080:31659/TCP   5m
prometheus-kube-state-metrics             ClusterIP   10.96.1.88    &lt;none&gt;        8080/TCP                        5m
prometheus-operated                       ClusterIP   None          &lt;none&gt;        9090/TCP                        5m
prometheus-prometheus-node-exporter       ClusterIP   10.96.0.191   &lt;none&gt;        9100/TCP                        5m
</code></pre>
<h3 id="访问测试">访问测试</h3>
<h4 id="访问grafana">访问Grafana</h4>
<p><a href="http://10.0.0.30:30030/" target="_blank" rel="noopener nofollow">http://10.0.0.30:30030/</a></p>
<ul>
<li>用户名：admin</li>
<li>密码：prom-operator</li>
</ul>
<blockquote>
<p>用户名和密码是上面配置的</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/3468887/202506/3468887-20250607203842110-1679377538.png" alt="image" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3468887/202506/3468887-20250607204058184-1969735469.png" alt="image" loading="lazy"></p>
<h4 id="访问prometheus">访问Prometheus</h4>
<p><a href="http://10.0.0.30:30090/targets" target="_blank" rel="noopener nofollow">http://10.0.0.30:30090/targets</a><br>
<img src="https://img2024.cnblogs.com/blog/3468887/202506/3468887-20250607204215217-54694798.png" alt="image" loading="lazy"></p>
<h2 id="kube-prometheus-stack监控应用程序">kube-prometheus-stack监控应用程序</h2>
<p>kube-prometheus-stack通过<code>PodMonitor</code>和<code>ServiceMonitor</code>对象来监视示例应用程序的目标</p>
<blockquote>
<p>参考这篇文章：<a href="https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/developer/getting-started.md" target="_blank" rel="noopener nofollow">https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/developer/getting-started.md</a></p>
</blockquote>
<p>架构图<br>
<img src="https://img2024.cnblogs.com/blog/3468887/202506/3468887-20250607205029789-2007402557.png" alt="image" loading="lazy"></p>
<h3 id="通过servicemonitor监控应用程序">通过ServiceMonitor监控应用程序</h3>
<p>示例：</p>
<pre><code>省略，这块有时间补齐，可以先看官方文档
</code></pre>
<h2 id="通过podmonitor监控应用程序">通过PodMonitor监控应用程序</h2>
<p>示例：</p>
<pre><code>省略，这块有时间补齐，可以先看官方文档
</code></pre>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/huangSir-devops/" target="_blank">huangSir-devops</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/huangSir-devops/p/18916721" target="_blank">https://www.cnblogs.com/huangSir-devops/p/18916721</a>，微信Vac666666，欢迎交流</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-23 10:59">2025-07-23 10:59</span>&nbsp;
<a href="https://www.cnblogs.com/huangSir-devops">huangSir-devops</a>&nbsp;
阅读(<span id="post_view_count">5</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18916721);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18916721', targetLink: 'https://www.cnblogs.com/huangSir-devops/p/18916721', title: '基于Helm部署kube-prometheus-stack' })">举报</a>
</div>
        