
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kuangdaoyizhimei/p/18925535" title="发布于 2025-06-12 15:24">
    <span role="heading" aria-level="2">万字长文彻底剖析Python正则表达式</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        本文详细介绍了Python正则表达式的各种使用技巧。。被Python正则表达式折磨了半天终于下定决心彻底攻坚整理了这篇笔记，算是边看文档边学习边整理，以后再也不怕正则表达式了，哈哈哈
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>正则表达式在各种语言中都是一个复杂的主题，在Python中，正则表达式设计的尤其复杂以适应不同场景下的脚本。</p>
<p>python官方文档提供了正则表达式使用中的各种细节：</p>
<p><a href="https://docs.python.org/zh-cn/3.13/howto/regex.html" target="_blank" rel="noopener nofollow">《正则表达式指南》</a></p>
<p><a href="https://docs.python.org/zh-cn/3.13/library/re.html" target="_blank" rel="noopener nofollow">《<code>re</code> --- 正则表达式操作》</a></p>
<p>如果仔仔细细看完这些文档，正则表达式也就掌握的差不多了，然鹅文档太长了，而且格式排版让人相当的难受，我将其常用功能重新分类整理并添加了一些案例，以方便查询。</p>
<h2 id="一元字符和转义字符">一、元字符和转义字符</h2>
<p>关于元字符和转义字符，可以参考官方文档：<a href="https://docs.python.org/zh-cn/3.13/library/re.html#regular-expression-syntax" target="_blank" rel="noopener nofollow">《正则表达式语法》</a> 或者我整理的手册：<a href="https://blog.kdyzm.cn/post/309" target="_blank" rel="noopener nofollow">《Python正则表达式匹配字符手册》</a>，这里重新复习下核心内容部分。</p>
<p>大多数字母和符号都会简单地匹配自身。例如，正则表达式 <code>test</code> 将会精确地匹配到 <code>test</code> 。（你可以启用不区分大小写模式，让这个正则也匹配 <code>Test</code> 或 <code>TEST</code> ，稍后会详细介绍。）</p>
<p>但该规则有例外。有些字符是特殊的 <em>元字符（metacharacters）</em>，并不匹配自身。事实上，它们表示匹配一些非常规的内容，或者通过重复它们或改变它们的含义来影响正则的其他部分。本文的大部分内容都致力于讨论各种元字符及其作用。</p>
<p>这是元字符的完整列表：</p>
<pre><code class="language-python">. ^ $ * + ? { } [ ] \ | ( )
</code></pre>
<p>首先介绍的元字符是 <code>[</code> 和 <code>]</code> 。这两个元字符用于指定一个字符类，也就是你希望匹配的字符的一个集合。这些字符可以单独地列出，也可以用字符范围来表示（给出两个字符并用 <code>'-'</code> 分隔）。例如，<code>[abc]</code> 将匹配 <code>a</code>、<code>b</code>、<code>c</code> 之中的任意一个字符；这与 <code>[a-c]</code> 相同，后者使用一个范围来表达相同的字符集合。如果只想匹配小写字母，则正则表达式将是 <code>[a-z]</code> 。</p>
<p>元字符 (除了 <code>\</code>) 在字符类中是不起作用的。 例如，<code>[akm$]</code> 将会匹配以下任一字符 <code>'a'</code>, <code>'k'</code>, <code>'m'</code> 或 <code>'$'</code>；<code>'$'</code> 通常是一个元字符，但在一个字符类中它的特殊性被消除了。</p>
<p>你可以通过对集合 <em>取反</em> 来匹配字符类中未列出的字符。方法是把 <code>'^'</code> 放在字符类的最开头。 例如，<code>[^5]</code> 将匹配除 <code>'5'</code> 之外的任何字符。 如果插入符出现在字符类的其他位置，则它没有特殊含义。 例如：<code>[5^]</code> 将匹配 <code>'5'</code> 或 <code>'^'</code>。</p>
<p>也许最重要的元字符是反斜杠，<code>\</code> 。 与 Python 字符串字面量一样，反斜杠后面可以跟各种字符来表示各种特殊序列。它还用于转义元字符，以便可以在表达式中匹配元字符本身。例如，如果需要匹配一个 <code>[</code> 或 <code>\</code> ，可以在其前面加上一个反斜杠来消除它们的特殊含义：<code>\[</code> 或 <code>\\</code> 。</p>
<p>一些以 <code>'\'</code> 开头的特殊序列表示预定义的字符集合，这些字符集通常很有用，例如数字集合、字母集合或非空白字符集合。</p>
<p>让我们举一个例子：<code>\w</code> 匹配任何字母数字字符，<code>\w</code> 相当于字符类 <code>[a-zA-Z0-9_]</code> 。</p>
<p>以下为特殊序列的不完全列表。 完整列表参见标准库参考中 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re-syntax" target="_blank" rel="noopener nofollow">正则表达式语法</a> 部分 。</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\d</code></td>
<td>匹配任何十进制数字，等价于字符类 <code>[0-9]</code> 。</td>
</tr>
<tr>
<td><code>\D</code></td>
<td>匹配任何非数字字符，等价于字符类 <code>[^0-9]</code> 。</td>
</tr>
<tr>
<td><code>\s</code></td>
<td>匹配任何空白字符，等价于字符类 <code>[ \t\n\r\f\v]</code> 。</td>
</tr>
<tr>
<td><code>\S</code></td>
<td>匹配任何非空白字符，等价于字符类 <code>[^ \t\n\r\f\v]</code> 。</td>
</tr>
<tr>
<td><code>\w</code></td>
<td>匹配任何字母与数字字符，等价于字符类 <code>[a-zA-Z0-9_]</code> 。</td>
</tr>
<tr>
<td><code>\W</code></td>
<td>匹配任何非字母与数字字符，等价于字符类 <code>[^a-zA-Z0-9_]</code> 。</td>
</tr>
</tbody>
</table>
<p>这些序列可以包含在字符类中。 例如，<code>[\s,.]</code> 是一个匹配任何空白字符、<code>','</code> 或 <code>'.'</code> 的字符类。</p>
<h2 id="二简单正则">二、简单正则</h2>
<p>让我们从最简单的正则表达式开始吧。由于正则表达式是用来操作字符串的，我们将从最常见的任务开始：匹配字符。能够匹配各种各样的字符集合是正则表达式可以做到的第一件事。</p>
<p>我们先来说说重复元字符 <code>*</code> 。 <code>*</code> 并不是匹配一个字面字符 <code>'*'</code> 。实际上，它指定前一个字符可以匹配零次或更多次，而不是只匹配一次。</p>
<p>例如，<code>ca*t</code> 将匹配 <code>'ct'</code> （ 0 个 <code>'a'</code> ）、<code>'cat'</code> （ 1 个 <code>'a'</code> ）、 <code>'caaat'</code> （ 3 个 <code>'a'</code> ）等等。</p>
<h3 id="1贪婪匹配">1、贪婪匹配</h3>
<p>类似 <code>*</code> 这样的重复是 <em>贪婪的</em> 。当重复正则时，匹配引擎将尝试重复尽可能多的次数。 如果表达式的后续部分不匹配，则匹配引擎将回退并以较少的重复次数再次尝试。</p>
<p>通过一个逐步示例更容易理解这一点。让我们分析一下表达式 <code>a[bcd]*b</code> 。 该表达式首先匹配一个字母 <code>'a'</code> ，接着匹配字符类 <code>[bcd]</code> 中的零个或更多个字母，最后以一个 <code>'b'</code> 结尾。 现在想象一下用这个正则来匹配字符串 <code>'abcbd'</code> 。</p>
<table>
<thead>
<tr>
<th style="text-align: left">步骤</th>
<th style="text-align: left">匹配</th>
<th style="text-align: left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left">1</td>
<td style="text-align: left"><code>a</code></td>
<td style="text-align: left">正则中的 <code>a</code> 匹配成功。</td>
</tr>
<tr>
<td style="text-align: left">2</td>
<td style="text-align: left"><code>abcbd</code></td>
<td style="text-align: left">引擎尽可能多地匹配 <code>[bcd]*</code> ，直至字符串末尾。</td>
</tr>
<tr>
<td style="text-align: left">3</td>
<td style="text-align: left"><em>失败</em></td>
<td style="text-align: left">引擎尝试匹配 <code>b</code> ，但是当前位置位于字符串末尾，所以匹配失败。</td>
</tr>
<tr>
<td style="text-align: left">4</td>
<td style="text-align: left"><code>abcb</code></td>
<td style="text-align: left">回退，让 <code>[bcd]*</code> 少匹配一个字符。</td>
</tr>
<tr>
<td style="text-align: left">5</td>
<td style="text-align: left"><em>失败</em></td>
<td style="text-align: left">再次尝试匹配 <code>b</code> ， 但是当前位置上的字符是最后一个字符 <code>'d'</code> 。</td>
</tr>
<tr>
<td style="text-align: left">6</td>
<td style="text-align: left"><code>abc</code></td>
<td style="text-align: left">再次回退，让 <code>[bcd]*</code> 只匹配 <code>bc</code> 。</td>
</tr>
<tr>
<td style="text-align: left">7</td>
<td style="text-align: left"><code>abcb</code></td>
<td style="text-align: left">再次尝试匹配 <code>b</code> 。 这一次当前位置的字符是 <code>'b'</code> ，所以它成功了。</td>
</tr>
</tbody>
</table>
<p>此时正则表达式已经到达了尽头，并且匹配到了 <code>'abcb'</code> 。 这个例子演示了匹配引擎一开始会尽其所能地进行匹配，如果没有找到匹配，它将逐步回退并重试正则的剩余部分，如此往复，直至 <code>[bcd]*</code> 只匹配零次。如果随后的匹配还是失败了，那么引擎会宣告整个正则表达式与字符串匹配失败。</p>
<p>贪婪匹配在实际业务中会存在比较严重的问题，特别是在HTML解析方面，贪婪匹配的特性会让人很困惑。</p>
<p>看以下案例：</p>
<img src="https://img2024.cnblogs.com/blog/516671/202506/516671-20250612151613563-897576235.png" alt="image-20250611102538873" style="zoom: 50%">
<p>我们实际上想匹配第一个&lt;html&gt;标签，但是由于贪婪匹配的特性，最终匹配到了整个字符串。如何解决这个问题呢？</p>
<p>解决方案是使用 <strong><span style="color: rgba(255, 0, 0, 1)">非贪婪限定符</span></strong> ?，在代表重复的元字符后加上?即可限制正则表达式的贪婪匹配特性： <code>*?</code>, <code>+?</code>, <code>??</code> 或 <code>{m,n}?</code>，它们会匹配尽可能 <em>少的</em> 文本。</p>
<img src="https://img2024.cnblogs.com/blog/516671/202506/516671-20250612151614402-1589775021.png" alt="image-20250611103154777" style="zoom: 50%">
<p>在一开始的<code>a[bcd]*b</code> 正则匹配中，只需要将正则表达式改成<code>a[bcd]*?b</code>即可消除贪婪匹配特性，最终匹配<code>'abcbd'</code>字符串的结果将是<code>ab</code>。</p>
<h3 id="2代表重复的元字符">2、代表重复的元字符</h3>
<p>上面<code>*</code>是介绍的第一个代表重复的元字符，另一个重复元字符是 <code>+</code> ，表示匹配一次或更多次。请注意 <code>*</code> 与 <code>+</code> 之间的差别。 <code>*</code> 表示匹配 <em>零次</em> 或更多次，也就是说它所重复的内容是可以完全不出现的。而 <code>+</code> 则要求至少出现一次。举一个类似的例子， <code>ca+t</code> 可以匹配 <code>'cat'</code> （ 1 个 <code>'a'</code> ）或 <code>'caaat'</code> （ 3 个 <code>'a'</code>），但不能匹配 <code>'ct'</code> 。</p>
<p>此外还有两个重复操作符或限定符。 问号 <code>?</code> 表示匹配一次或零次；你可以认为它把某项内容变成了可选的。 例如，<code>home-?brew</code> 可以匹配 <code>'homebrew'</code> 或 <code>'home-brew'</code>。</p>
<p>最复杂的限定符是 <code>{m,n}</code>，其中 <em>m</em> 和 <em>n</em> 都是十进制整数。 该限定符表示必须至少重复 <em>m</em> 次，至多重复 <em>n</em> 次。 例如，<code>a/{1,3}b</code> 将匹配 <code>'a/b'</code>, <code>'a//b'</code> 和 <code>'a///b'</code>。 它不能匹配 <code>'ab'</code>，因为其中没有斜杠，也不能匹配 <code>'a////b'</code>，因为其中有四个斜杠。</p>
<p><em>m</em> 和 <em>n</em> 不是必填的，缺失的情况下会设定为默认值。缺失 <em>m</em> 会解释为最少重复 0 次 ，缺失 <em>n</em> 则解释为最多重复无限次。</p>
<p>最简单情况 <code>{m}</code> 将与前一项完全匹配 <em>m</em> 次。 例如，<code>a/{2}b</code> 将只匹配 <code>'a//b'</code>。</p>
<p>实际上<code>*</code>、<code>+</code>以及<code>?</code>都可以用{m,n}限定符表示： <code>{0,}</code> 等同于 <code>*</code>, <code>{1,}</code> 等同于 <code>+</code>, 而 <code>{0,1}</code> 等同于 <code>?</code>。 在可能的情况下使用 <code>*</code>, <code>+</code> 或 <code>?</code> 会更好，因为它们更为简短易读。</p>
<h2 id="三使用正则表达式">三、使用正则表达式</h2>
<p>现在我们已经了解了一些简单的正则表达式，那么我们如何在 Python 中实际使用它们呢？ <a href="https://docs.python.org/zh-cn/3.13/library/re.html#module-re" target="_blank" rel="noopener nofollow"><code>re</code></a> 模块提供了正则表达式引擎的接口，可以让你将正则编译为对象，然后用它们来进行匹配。</p>
<h3 id="1编译正则表达式">1、编译正则表达式</h3>
<p>正则表达式被编译成模式对象，模式对象具有各种操作的方法，例如搜索模式匹配或执行字符串替换。</p>
<img src="https://img2024.cnblogs.com/blog/516671/202506/516671-20250612151615286-1757346705.png" alt="image-20250611104644606" style="zoom: 50%">
<p><a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.compile" target="_blank" rel="noopener nofollow"><code>re.compile()</code></a> 也接受一个可选的 <em>flags</em> 参数，用于启用各种特殊功能和语法变体。 我们稍后将介绍可用的设置，但现在只需一个例子</p>
<img src="https://img2024.cnblogs.com/blog/516671/202506/516671-20250612151616067-1033931060.png" alt="image-20250611104708689" style="zoom: 50%">
<p>正则作为字符串传递给 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.compile" target="_blank" rel="noopener nofollow"><code>re.compile()</code></a> 。 正则被处理为字符串，因为正则表达式不是核心Python语言的一部分，并且没有创建用于表达它们的特殊语法。 （有些应用程序根本不需要正则，因此不需要通过包含它们来扩展语言规范。）相反，<a href="https://docs.python.org/zh-cn/3.13/library/re.html#module-re" target="_blank" rel="noopener nofollow"><code>re</code></a> 模块只是Python附带的C扩展模块，就类似于 <a href="https://docs.python.org/zh-cn/3.13/library/socket.html#module-socket" target="_blank" rel="noopener nofollow"><code>socket</code></a> 或 <a href="https://docs.python.org/zh-cn/3.13/library/zlib.html#module-zlib" target="_blank" rel="noopener nofollow"><code>zlib</code></a> 模块。</p>
<p>将正则放在字符串中可以使 Python 语言更简单，但有一个缺点是下一节的主题。</p>
<h3 id="2原始字符串解决反斜杠灾难">2、原始字符串解决反斜杠灾难</h3>
<p>我们来思考一个问题，如何写一个正则表达式以匹配字符串<code>\section</code>？</p>
<p>我们知道正则表达式使用反斜杠字符 (<code>'\'</code>) 来表示特殊形式，比如<code>\d</code>表示数字，<code>\D</code>表示非数字等；普通字符串中反斜杠也是转义符号，比如<code>\n</code>是换行符，<code>\t</code>是制表符，使用<code>\"</code>来避免字符串提前结束等。</p>
<p>在本案例中，正则表达式中的反斜杠必须是原始反斜杠符号，所以正则表达式可以先写成<code>\\s.*</code>以抵消正则表达式中的反斜杠转义，然而这还不行，因为正则表达式本身要作为字符串使用，反斜杠在Python字符串中也有转义作用，所以必须要对<code>\\s.*</code>做再次转义：<code>\\\\s.*</code>；回到<code>\section</code>字符串，他作为被匹配的字符串，里面的转义符号也应当取消，所以它在Python字符串中的正确写法是<code>\\section</code>，完整的程序如下所示：</p>
<pre><code class="language-python">&gt;&gt;&gt; import re
&gt;&gt;&gt; p = re.compile('\\\\s.*')
&gt;&gt;&gt; p.match('\\section')
&lt;re.Match object; span=(0, 8), match='\\section'&gt;
</code></pre>
<p>可以看到，反斜杠在正则表达式中使用的时候要非常谨慎，当作为原始字符反斜杠使用的时候正则表达式更为复杂且难读懂，如何解决这个问题呢？</p>
<p>答案是：使用<strong><span style="color: rgba(255, 0, 0, 1)">原始字符串</span></strong>，Python中的原始字符串以前缀'r'开头，原始字符串不处理反斜杠的转义功能，这意味着<code>r"\n"</code> 是一个包含 <code>'\'</code> 和 <code>'n'</code> 的双字符字符串，而 <code>"\n"</code> 是一个包含换行符的单字符字符串。正则表达式通常使用这种原始字符串表示法表示。</p>
<p>回到本节的主题，使用原始字符串写法如何写一个正则表达式以匹配字符串<code>\section</code>？</p>
<pre><code class="language-python">&gt;&gt;&gt; import re
&gt;&gt;&gt; p = re.compile(r'\\s.*')
&gt;&gt;&gt; p.match(r'\section')
&lt;re.Match object; span=(0, 8), match='\\section'&gt;
</code></pre>
<h3 id="3匹配和查询">3、匹配和查询</h3>
<p>一旦你有一个表示编译正则表达式的对象，你用它做什么？ 模式对象有几种方法和属性。 这里只介绍最重要的内容；请参阅 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#module-re" target="_blank" rel="noopener nofollow"><code>re</code></a> 文档获取完整列表。</p>
<table>
<thead>
<tr>
<th style="text-align: left">方法 / 属性</th>
<th style="text-align: left">目的</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left"><code>match()</code></td>
<td style="text-align: left">确定正则是否从字符串的开头匹配</td>
</tr>
<tr>
<td style="text-align: left"><code>search()</code></td>
<td style="text-align: left">扫描字符串，查找此正则匹配的任何位置</td>
</tr>
<tr>
<td style="text-align: left"><code>findall()</code></td>
<td style="text-align: left">找到正则匹配的所有子字符串，并将它们作为列表返回。</td>
</tr>
<tr>
<td style="text-align: left"><code>finditer()</code></td>
<td style="text-align: left">找到正则匹配的所有子字符串，并将它们返回为一个 <a href="https://docs.python.org/zh-cn/3.13/glossary.html#term-iterator" target="_blank" rel="noopener nofollow">iterator</a>。</td>
</tr>
</tbody>
</table>
<p>如果没有找到匹配， <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.Pattern.match" target="_blank" rel="noopener nofollow"><code>match()</code></a> 和 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.Pattern.search" target="_blank" rel="noopener nofollow"><code>search()</code></a> 返回 <code>None</code> 。如果它们成功， 一个 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#match-objects" target="_blank" rel="noopener nofollow">匹配对象</a> 实例将被返回，包含匹配相关的信息：起始和终结位置、匹配的子串以及其它。</p>
<pre><code class="language-python">&gt;&gt;&gt; import re
&gt;&gt;&gt; p = re.compile(r'\d+')
&gt;&gt;&gt; m = p.match('')
&gt;&gt;&gt; print(m)
None
&gt;&gt;&gt; m = p.match('123a')
&gt;&gt;&gt; print(m)
&lt;re.Match object; span=(0, 3), match='123'&gt;
</code></pre>
<p><a href="https://docs.python.org/zh-cn/3.13/library/re.html#match-objects" target="_blank" rel="noopener nofollow">匹配对象</a> 中有以下几个方法最为重要：</p>
<table>
<thead>
<tr>
<th style="text-align: left">方法 / 属性</th>
<th style="text-align: left">目的</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left"><code>group()</code></td>
<td style="text-align: left">返回正则匹配的字符串</td>
</tr>
<tr>
<td style="text-align: left"><code>start()</code></td>
<td style="text-align: left">返回匹配的开始位置</td>
</tr>
<tr>
<td style="text-align: left"><code>end()</code></td>
<td style="text-align: left">返回匹配的结束位置</td>
</tr>
<tr>
<td style="text-align: left"><code>span()</code></td>
<td style="text-align: left">返回包含匹配 (start, end) 位置的元组</td>
</tr>
</tbody>
</table>
<pre><code class="language-python">&gt;&gt;&gt; m.group()
'123'
&gt;&gt;&gt; m.start(),m.end()
(0, 3)
&gt;&gt;&gt; m.span()
(0, 3)
</code></pre>
<p><a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.Match.group" target="_blank" rel="noopener nofollow"><code>group()</code></a> 返回正则匹配的子字符串。 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.Match.start" target="_blank" rel="noopener nofollow"><code>start()</code></a> 和 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.Match.end" target="_blank" rel="noopener nofollow"><code>end()</code></a> 返回匹配的起始和结束索引。 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.Match.span" target="_blank" rel="noopener nofollow"><code>span()</code></a> 在单个元组中返回开始和结束索引。 <strong>由于 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.Pattern.match" target="_blank" rel="noopener nofollow"><code>match()</code></a> 方法只检查正则是否在字符串的开头匹配，所以 <code>start()</code> 将始终为零。</strong> 但是，模式的 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.Pattern.search" target="_blank" rel="noopener nofollow"><code>search()</code></a> 方法会扫描字符串，因此在这种情况下匹配可能不会从零开始。</p>
<pre><code class="language-python">&gt;&gt;&gt; m = p.match('a123')
&gt;&gt;&gt; print(m)
None
&gt;&gt;&gt; m = p.search('a123')
&gt;&gt;&gt; print(m)
&lt;re.Match object; span=(1, 4), match='123'&gt;
</code></pre>
<p>在实际程序中，最常见的样式是在变量中存储 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#match-objects" target="_blank" rel="noopener nofollow">匹配对象</a>，然后检查它是否为 <code>None</code>。 这通常看起来像:</p>
<pre><code class="language-python">p = re.compile( ... )
m = p.match( 'string goes here' )
if m:
    print('Match found: ', m.group())
else:
    print('No match')
</code></pre>
<p><code>match</code>方法和<code>search</code>方法返回Match对象；<code>findall</code>返回匹配字符串的列表，即所有匹配项：</p>
<pre><code class="language-python">&gt;&gt;&gt; import re
&gt;&gt;&gt; p = re.compile(r'\d+')
&gt;&gt;&gt; p.findall('11 people eat 24 apples ,every people eat 2 apples.')
['11', '24', '2']
</code></pre>
<p><a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.Pattern.findall" target="_blank" rel="noopener nofollow"><code>findall()</code></a> 必须先创建整个列表才能返回结果。 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.Pattern.finditer" target="_blank" rel="noopener nofollow"><code>finditer()</code></a> 方法将一个 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#match-objects" target="_blank" rel="noopener nofollow">匹配对象</a> 的序列返回为一个 <a href="https://docs.python.org/zh-cn/3.13/glossary.html#term-iterator" target="_blank" rel="noopener nofollow">iterator</a></p>
<pre><code class="language-python">&gt;&gt;&gt; import re
&gt;&gt;&gt; p = re.compile(r'\d+')
&gt;&gt;&gt; iter = p.finditer('11 people eat 24 apples ,every people eat 2 apples.')
&gt;&gt;&gt; for item in iter:
...     print(item)
...
&lt;re.Match object; span=(0, 2), match='11'&gt;
&lt;re.Match object; span=(14, 16), match='24'&gt;
&lt;re.Match object; span=(42, 43), match='2'&gt;
&gt;&gt;&gt;
</code></pre>
<h3 id="4分割字符串">4、分割字符串</h3>
<p>模式的 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.Pattern.split" target="_blank" rel="noopener nofollow"><code>split()</code></a> 方法在正则匹配的任何地方拆分字符串，返回一个片段列表。 它类似于 <a href="https://docs.python.org/zh-cn/3.13/library/stdtypes.html#str.split" target="_blank" rel="noopener nofollow"><code>split()</code></a> 字符串方法，但在分隔符的分隔符中提供了更多的通用性；字符串的 <code>split()</code> 仅支持按空格或固定字符串进行拆分。</p>
<pre><code class="language-python">.split(string[, maxsplit=0])
</code></pre>
<p>如果 <em>maxsplit</em> 非零，则最多执行 <em>maxsplit</em> 次拆分，并且字符串的其余部分将作为列表的最后一个元素返回。 在以下示例中，分隔符是任何非字母数字字符序列。</p>
<pre><code class="language-python">&gt;&gt;&gt; p = re.compile(r'\W+')
&gt;&gt;&gt; p.split('This is a test, short and sweet, of split().')
['This', 'is', 'a', 'test', 'short', 'and', 'sweet', 'of', 'split', '']
&gt;&gt;&gt; p.split('This is a test, short and sweet, of split().', 3)
['This', 'is', 'a', 'test, short and sweet, of split().']
</code></pre>
<p>如果在正则中使用捕获括号，则它们的值也将作为列表的一部分返回。 比较以下调用:</p>
<pre><code class="language-python">&gt;&gt;&gt; p = re.compile(r'\W+')
&gt;&gt;&gt; p2 = re.compile(r'(\W+)')
&gt;&gt;&gt; p.split('This... is a test.')
['This', 'is', 'a', 'test', '']
&gt;&gt;&gt; p2.split('This... is a test.')
['This', '... ', 'is', ' ', 'a', ' ', 'test', '.', '']
</code></pre>
<h3 id="5替换字符串">5、替换字符串</h3>
<p>另一个常见任务是找到模式的所有匹配项，并用不同的字符串替换它们。 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.Pattern.sub" target="_blank" rel="noopener nofollow"><code>sub()</code></a> 方法接受一个替换值，可以是字符串或函数，也可以是要处理的字符串。</p>
<pre><code class="language-python">.sub(replacement, string[, count=0])
</code></pre>
<p>返回通过替换 <em>replacement</em> 替换 <em>string</em> 中正则的最左边非重叠出现而获得的字符串。 如果未找到模式，则 <em>string</em> 将保持不变。</p>
<p>可选参数 <em>count</em> 是要替换的模式最大的出现次数；<em>count</em> 必须是非负整数。 默认值 0 表示替换所有。</p>
<p>这是一个使用 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.Pattern.sub" target="_blank" rel="noopener nofollow"><code>sub()</code></a> 方法的简单示例。 它用 <code>colour</code> 这个词取代颜色名称:</p>
<img src="https://img2024.cnblogs.com/blog/516671/202506/516671-20250612151617004-1785224191.png" alt="image-20250611162048871" style="zoom: 50%">
<p><a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.Pattern.subn" target="_blank" rel="noopener nofollow"><code>subn()</code></a> 方法完成相同的工作，但返回一个包含新字符串值和已执行的替换次数的 2 元组:</p>
<img src="https://img2024.cnblogs.com/blog/516671/202506/516671-20250612151617884-541631357.png" alt="image-20250611162142732" style="zoom: 50%">
<h4 id="空匹配陷阱">空匹配陷阱</h4>
<p>要注意当正则表达式能匹配空字符串的时候会在每个字符之间以及字符串首尾都添加替换的字符串</p>
<img src="https://img2024.cnblogs.com/blog/516671/202506/516671-20250612151618721-1266489518.png" alt="image-20250611163226731" style="zoom: 50%">
<p>空匹配在分割字符串的场景下也会发生：</p>
<pre><code class="language-python">&gt;&gt;&gt; p = re.compile('x*')
&gt;&gt;&gt; p.split('apple')
['', 'a', 'p', 'p', 'l', 'e', '']
&gt;&gt;&gt;
</code></pre>
<h4 id="后向引用">后向引用</h4>
<p>如果 <em>replacement</em> 是一个字符串，则处理其中的任何反斜杠转义。 也就是说，<code>\n</code> 被转换为单个换行符，<code>\r</code> 被转换为回车符，依此类推。 诸如 <code>\&amp;</code> 之类的未知转义是孤立的。 <strong>后向引用</strong>，例如 <code>\6</code>，被替换为正则中相应组匹配的子字符串。 这使你可以在生成的替换字符串中合并原始文本的部分内容。</p>
<p>这个例子匹配单词 <code>section</code> 后跟一个用 <code>{</code>，<code>}</code> 括起来的字符串，并将 <code>section</code> 改为 <code>subsection</code></p>
<pre><code class="language-python">&gt;&gt;&gt; p = re.compile('section{([^}]*)}')
&gt;&gt;&gt; p.sub(r'subsection{\1}','section{First} section{second}')
'subsection{First} subsection{second}'
&gt;&gt;&gt;
</code></pre>
<p>还有一种语法用于引用由 <code>(?P&lt;name&gt;...)</code> 语法定义的命名组。<code>\g\&lt;name&gt;</code> 将使用名为 <code>name</code> 的组匹配的子字符串，<code>\g\&lt;number&gt;</code> 使用相应的组号。 因此 <code>\g&lt;2&gt;</code> 等同于 <code>\2</code>。</p>
<pre><code class="language-python">&gt;&gt;&gt; p=re.compile('section{(?P&lt;name&gt;[^}]*)}')
&gt;&gt;&gt; p.sub(r'subsection{\1}','section{First} section{second}')
'subsection{First} subsection{second}'
&gt;&gt;&gt; p.sub(r'subsection{\g&lt;1&gt;}','section{First} section{second}')
'subsection{First} subsection{second}'
&gt;&gt;&gt; p.sub(r'subsection{\g&lt;name&gt;}','section{First} section{second}')
'subsection{First} subsection{second}'
</code></pre>
<h4 id="替换函数">替换函数</h4>
<p>replacement还可以是一个函数，它可以为你提供更多控制。如果 <em>replacement</em> 是一个函数，则为 <em>pattern</em> 的每次非重叠出现将调用该函数。 在每次调用时，函数都会传递一个匹配的 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#match-objects" target="_blank" rel="noopener nofollow">匹配对象</a> 参数，并可以使用此信息计算所需的替换字符串并将其返回。</p>
<pre><code class="language-python">&gt;&gt;&gt; import re
&gt;&gt;&gt;
&gt;&gt;&gt; p = re.compile(r"(\d+)")
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; def replacment_fun(match: re.Match):
...     match_str = match.group()
...     return match_str + "_"
...
&gt;&gt;&gt; result = p.sub(replacment_fun, "11 people eat 22 apples , every people eat 2 apples.")
&gt;&gt;&gt; print(result)
11_ people eat 22_ apples , every people eat 2_ apples.
&gt;&gt;&gt;
</code></pre>
<h3 id="6模块级函数">6、模块级函数</h3>
<p>模块级函数让我们不必创建模式对象并调用其方法：<a href="https://docs.python.org/zh-cn/3.13/library/re.html#module-re" target="_blank" rel="noopener nofollow"><code>re</code></a> 模块提供了顶级函数 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.match" target="_blank" rel="noopener nofollow"><code>match()</code></a>，<a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.search" target="_blank" rel="noopener nofollow"><code>search()</code></a>，<a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.findall" target="_blank" rel="noopener nofollow"><code>findall()</code></a>，<a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.sub" target="_blank" rel="noopener nofollow"><code>sub()</code></a> 等等。 这些函数采用与相应模式方法相同的参数，并将正则字符串作为第一个参数添加，并仍然返回 <code>None</code> 或 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#match-objects" target="_blank" rel="noopener nofollow">匹配对象</a> 实例。:</p>
<pre><code class="language-python">&gt;&gt;&gt; print(re.match(r'From\s+', 'Fromage amk'))
None
&gt;&gt;&gt; re.match(r'From\s+', 'From amk Thu May 14 19:12:10 1998')
&lt;re.Match object; span=(0, 5), match='From '&gt;
</code></pre>
<p>本质上，这些函数只是为你创建一个模式对象，并在其上调用适当的方法。 它们还将编译对象存储在缓存中，因此使用相同的未来调用将不需要一次又一次地解析该模式。</p>
<p>你是否应该使用这些模块级函数，还是应该自己获取模式并调用其方法？ 如果你正在循环中访问正则表达式，预编译它将节省一些函数调用。 在循环之外，由于有内部缓存，没有太大区别。</p>
<h3 id="7编译标志">7、编译标志</h3>
<p>编译标志允许你修改正则表达式的工作方式。 标志在 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#module-re" target="_blank" rel="noopener nofollow"><code>re</code></a> 模块中有两个名称，长名称如 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.IGNORECASE" target="_blank" rel="noopener nofollow"><code>IGNORECASE</code></a> 和一个简短的单字母形式，例如 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.I" target="_blank" rel="noopener nofollow"><code>I</code></a>。 （如果你熟悉 Perl 的模式修饰符，则单字母形式使用和其相同的字母；例如， <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.VERBOSE" target="_blank" rel="noopener nofollow"><code>re.VERBOSE</code></a> 的缩写形式为 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.X" target="_blank" rel="noopener nofollow"><code>re.X</code></a>。）多个标志可以 通过按位或运算来指定它们；例如，<code>re.I | re.M</code> 设置 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.I" target="_blank" rel="noopener nofollow"><code>I</code></a> 和 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.M" target="_blank" rel="noopener nofollow"><code>M</code></a> 标志。</p>
<table>
<thead>
<tr>
<th style="text-align: left">标志</th>
<th style="text-align: left">含意</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left"><a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.ASCII" target="_blank" rel="noopener nofollow"><code>ASCII</code></a>, <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.A" target="_blank" rel="noopener nofollow"><code>A</code></a></td>
<td style="text-align: left">使几个转义如 <code>\w</code>、<code>\b</code>、<code>\s</code> 和 <code>\d</code> 匹配仅与具有相应特征属性的 ASCII 字符匹配。</td>
</tr>
<tr>
<td style="text-align: left"><a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.DOTALL" target="_blank" rel="noopener nofollow"><code>DOTALL</code></a>, <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.S" target="_blank" rel="noopener nofollow"><code>S</code></a></td>
<td style="text-align: left">使 <code>.</code> 匹配任何字符，包括换行符。</td>
</tr>
<tr>
<td style="text-align: left"><a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.IGNORECASE" target="_blank" rel="noopener nofollow"><code>IGNORECASE</code></a>, <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.I" target="_blank" rel="noopener nofollow"><code>I</code></a></td>
<td style="text-align: left">进行大小写不敏感匹配。</td>
</tr>
<tr>
<td style="text-align: left"><a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.LOCALE" target="_blank" rel="noopener nofollow"><code>LOCALE</code></a>, <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.L" target="_blank" rel="noopener nofollow"><code>L</code></a></td>
<td style="text-align: left">进行区域设置感知匹配。</td>
</tr>
<tr>
<td style="text-align: left"><a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.MULTILINE" target="_blank" rel="noopener nofollow"><code>MULTILINE</code></a>, <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.M" target="_blank" rel="noopener nofollow"><code>M</code></a></td>
<td style="text-align: left">多行匹配，影响 <code>^</code> 和 <code>$</code>。</td>
</tr>
<tr>
<td style="text-align: left"><a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.VERBOSE" target="_blank" rel="noopener nofollow"><code>VERBOSE</code></a>, <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.X" target="_blank" rel="noopener nofollow"><code>X</code></a> （为 '扩展'）</td>
<td style="text-align: left">启用详细的正则，可以更清晰，更容易理解。</td>
</tr>
</tbody>
</table>
<p>在上述表格中的标记中，需要特别关心的标记实际上有四个：<a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.DOTALL" target="_blank" rel="noopener nofollow"><code>DOTALL</code></a>、<a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.IGNORECASE" target="_blank" rel="noopener nofollow"><code>IGNORECASE</code></a>、<a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.MULTILINE" target="_blank" rel="noopener nofollow"><code>MULTILINE</code></a>、<a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.VERBOSE" target="_blank" rel="noopener nofollow"><code>VERBOSE</code></a>，其余几个可以暂不考虑。</p>
<h4 id="redotall">re.DOTALL</h4>
<p>该标志使 <code>'.'</code> 匹配任何字符，包括换行符；没有这个标志，<code>'.'</code> 将匹配<em>除了</em> 换行符外的任何字符。</p>
<p>举个例子，现在我们有这样一段网页文本：</p>
<pre><code class="language-python">html_content = """&lt;div&gt;
    &lt;p&gt;This is a paragraph&lt;/p&gt;
    &lt;p&gt;Another paragraph&lt;/p&gt;
&lt;/div&gt;"""
</code></pre>
<p>如何使用正则表达式将div标签中的内容提取出来？</p>
<p>尝试写个脚本：</p>
<pre><code class="language-python">import re

html_content = """&lt;div&gt;
    &lt;p&gt;This is a paragraph&lt;/p&gt;
    &lt;p&gt;Another paragraph&lt;/p&gt;
&lt;/div&gt;"""

# 匹配div标签及其所有内容（包括换行）
div_pattern = r"&lt;div&gt;(.*?)&lt;/div&gt;"
match_div = re.search(div_pattern, html_content)
print(match_div)
</code></pre>
<p>结果输出是None，也即是说没匹配到。这是因为<code>.*</code>没有匹配到换行符<code>\n</code>，此时就可以用到DOTALL标志了：</p>
<pre><code class="language-python">&gt;&gt;&gt; import re
&gt;&gt;&gt;
&gt;&gt;&gt; html_content = """&lt;div&gt;
...     &lt;p&gt;This is a paragraph&lt;/p&gt;
...     &lt;p&gt;Another paragraph&lt;/p&gt;
... &lt;/div&gt;"""
&gt;&gt;&gt;
&gt;&gt;&gt; # 匹配div标签及其所有内容（包括换行）
&gt;&gt;&gt; div_pattern = r"&lt;div&gt;(.*?)&lt;/div&gt;"
&gt;&gt;&gt; match_div = re.search(div_pattern, html_content, re.DOTALL)
&gt;&gt;&gt; if match_div:
...     print("\nMatched HTML content:", match_div.group(1))
...

Matched HTML content:
    &lt;p&gt;This is a paragraph&lt;/p&gt;
    &lt;p&gt;Another paragraph&lt;/p&gt;

&gt;&gt;&gt;
</code></pre>
<h4 id="remultiline">re.MULTILINE</h4>
<p>通常 <code>^</code> 只匹配字符串的开头，而 <code>$</code> 只匹配字符串的结尾，紧接在字符串末尾的换行符（如果有的话）之前。 当指定了这个标志时，<code>^</code> 匹配字符串的开头和字符串中每一行的开头，紧跟在每个换行符之后。 类似地，<code>$</code> 元字符匹配字符串的结尾和每行的结尾（紧接在每个换行符之前）。</p>
<p>听起来有些抽象，举个例子，现在有个提取错误日志的需求，日志格式如下所示：</p>
<pre><code class="language-python">log_data = """
[INFO] 2023-01-01 10:00:00 Another log entry
[INFO] 2023-01-01 10:00:00 System started
[ERROR] 2023-01-01 10:05:23 Connection failed
[WARNING] 2023-01-01 10:06:10 Low disk space
[ERROR] 2023-01-01 10:00:00 Error details: Connection timeout
[INFO] 2023-01-01 10:10:00 Backup completed
[ERROR] 2023-01-01 10:05:23 Connection failed1
"""
</code></pre>
<p>如何将ERROR级别的日志提取出来？先看第一种写法：</p>
<pre><code class="language-python">p = re.compile(r"^\[ERROR\].*")
result = p.findall(log_data)
for item in result:
    print(item)
</code></pre>
<p>这种写法没有匹配到任何日志，原因就在于log_data是作为整体的字符串来查找的，而限定符<code>^</code>要求必须以<code>[ERROR]</code>开头，我们这段字符串是以<code>\n[INFO]</code>开头的，所以并不会被匹配到，解决方式就是使用<code>re.MULTILINE</code>标志。</p>
<img src="https://img2024.cnblogs.com/blog/516671/202506/516671-20250612151619753-379898344.png" alt="image-20250611231910458" style="zoom: 50%">
<p>使用re.MULTILINE之后，每行字符串都能在开头被^匹配，结尾被$匹配。</p>
<p>好了，现在我们来看看进阶问题，现在日志格式变成了如下所示：</p>
<pre><code class="language-python">log_data = """
[INFO] 2023-01-01 10:00:00 Another log entry
[INFO] 2023-01-01 10:00:00 System started
[ERROR] 2023-01-01 10:05:23 Connection failed
[WARNING] 2023-01-01 10:06:10 Low disk space
[ERROR] 2023-01-01 10:00:00
    Error details: Connection timeout
    Stack trace:
        at com.example.App.main(App.java:10)
[INFO] 2023-01-01 10:10:00 Backup completed
[ERROR] 2023-01-01 10:05:23 Connection failed1
"""
</code></pre>
<p>没错，错误日志有换行了，如何将错误日志完整的提取出来？使用之前的正则表达式<code>r"^\[ERROR\].*"</code>会遗漏部分日志。需要考虑以下几点：</p>
<ul>
<li>错误日志必须从每行[ERROR]开始匹配，所以需要用到re.MULTILINE标志；但是匹配的时候要跨行匹配，所以需要用到re.DOTALL，两者都要使用，则要使用<code>re.MULTILINE | re.DOTALL</code></li>
<li>由于正则表达式的默认贪婪匹配规则，会一次性匹配出最长的字符串，所以要禁用贪婪匹配，方法就是在重复标记后加上问号?，在这里要使用<code>.*?</code></li>
<li><code>.*</code>要有截止条件，这里要使用<a href="https://blog.kdyzm.cn/post/309#id-14" target="_blank" rel="noopener nofollow">前视断言</a>，前视断言是一种零宽度断言（关于前视断言在后续章节介绍），这里要同时考虑到ERROR日志在最后一行的情况，所以前视断言的写法为：<code>(?=\[|\Z)</code></li>
</ul>
<p>综合考虑以上情况，新的正则表达式写法为：<code>p = re.compile(r"^\[ERROR\].*?(?=\[|\Z)", re.MULTILINE | re.DOTALL)</code></p>
<p>完整代码如下所示：</p>
<pre><code class="language-python">import re

log_data = """
[INFO] 2023-01-01 10:00:00 Another log entry
[INFO] 2023-01-01 10:00:00 System started
[ERROR] 2023-01-01 10:05:23 Connection failed
[WARNING] 2023-01-01 10:06:10 Low disk space
[ERROR] 2023-01-01 10:00:00
    Error details: Connection timeout
    Stack trace:
        at com.example.App.main(App.java:10)
[INFO] 2023-01-01 10:10:00 Backup completed
[ERROR] 2023-01-01 10:05:23 Connection failed1
"""

p = re.compile(r"^\[ERROR\].*?(?=\[|\Z)", re.MULTILINE | re.DOTALL)
result = p.findall(log_data)
for item in result:
    print(item)
</code></pre>
<h4 id="reverbose">re.VERBOSE</h4>
<p>此标志允许你编写更易读的正则表达式，方法是为您提供更灵活的格式化方式。 指定此标志后，将忽略正则字符串中的空格，除非空格位于字符类中或前面带有未转义的反斜杠；这使你可以更清楚地组织和缩进正则。 此标志还允许你将注释放在正则中，引擎将忽略该注释；注释标记为 <code>'#'</code> 既不是在字符类中，也不是在未转义的反斜杠之前。</p>
<p>例如，这里的正则使用 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.VERBOSE" target="_blank" rel="noopener nofollow"><code>re.VERBOSE</code></a></p>
<pre><code class="language-python">charref = re.compile(r"""
 &amp;[#]                # 数字实体引用的开始
 (
     0[0-7]+         # 八进制形式
   | [0-9]+          # 十进制形式
   | x[0-9a-fA-F]+   # 十六进制形式
 )
 ;                   # 末尾分号
""", re.VERBOSE)
</code></pre>
<p>如果没有详细设置，正则将如下所示:</p>
<pre><code class="language-python">charref = re.compile("&amp;#(0[0-7]+"
                     "|[0-9]+"
                     "|x[0-9a-fA-F]+);")
</code></pre>
<h2 id="四正则表达式进阶">四、正则表达式进阶</h2>
<p>上面章节介绍了正则表达式的基本使用，下面介绍正则表达式的进阶写法。</p>
<h3 id="1零宽度断言">1、零宽度断言</h3>
<p>上面已经讨论过<code>.</code>、<code>*</code>、<code>?</code>以及<code>\d</code>等转义字符，它们都有一个特点：它们本身代表着匹配字符串中的某一段文本。有这样一种字符，它们在匹配字符串中不占用任何字符，只是代表成功或者失败，这种特殊的匹配字符叫做<strong>零宽度断言</strong>。例如，<code>\b</code> 是一个断言，指明当前位置位于字边界；这个位置根本不会被 <code>\b</code> 改变。这意味着<strong>永远不应重复零宽度断言</strong>，因为如果它们在给定位置匹配一次，它们显然可以无限次匹配。</p>
<p>零宽度断言包含常见的<code>\^$\A\Z\B\b</code>以及前视断言。</p>
<h4 id="元字符和转义字符中的零宽度断言">元字符和转义字符中的零宽度断言</h4>
<p><code>|</code></p>
<p>或者“or”运算符。 如果 <em>A</em> 和 <em>B</em> 是正则表达式，<code>A|B</code> 将匹配任何与 <em>A</em> 或 <em>B</em> 匹配的字符串。 <code>|</code> 具有非常低的优先级，以便在交替使用多字符字符串时使其合理地工作。 <code>Crow|Servo</code> 将匹配 <code>'Crow'</code> 或 <code>'Servo'</code>，而不是 <code>'Cro'</code>、<code>'w'</code> 或 <code>'S'</code> 和 <code>'ervo'</code>。要匹配字面 <code>'|'</code>，请使用 <code>\|</code>，或将其括在字符类中，如 <code>[|]</code>。</p>
<p><strong><code>^</code></strong></p>
<p>在行的开头匹配。 除非设置了 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.MULTILINE" target="_blank" rel="noopener nofollow"><code>MULTILINE</code></a> 标志，否则只会在字符串的开头匹配。 在 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.MULTILINE" target="_blank" rel="noopener nofollow"><code>MULTILINE</code></a> 模式下，这也在字符串中的每个换行符后立即匹配。</p>
<p>例如，如果你希望仅在行的开头匹配单词 <code>From</code>，则要使用的正则 <code>^From</code>。:</p>
<pre><code class="language-python">&gt;&gt;&gt; print(re.search('^From', 'From Here to Eternity'))
&lt;re.Match object; span=(0, 4), match='From'&gt;
&gt;&gt;&gt; print(re.search('^From', 'Reciting From Memory'))
None
</code></pre>
<p>要匹配字面 <code>'^'</code>，使用 <code>\^</code>。</p>
<p><strong><code>$</code></strong></p>
<p>匹配行的末尾，定义为字符串的结尾，或者后跟换行符的任何位置。:</p>
<pre><code class="language-python">&gt;&gt;&gt; print(re.search('}$', '{block}'))
&lt;re.Match object; span=(6, 7), match='}'&gt;
&gt;&gt;&gt; print(re.search('}$', '{block} '))
None
&gt;&gt;&gt; print(re.search('}$', '{block}\n'))
&lt;re.Match object; span=(6, 7), match='}'&gt;
</code></pre>
<p>以匹配字面 <code>'$'</code>，使用 <code>\$</code> 或者将其包裹在一个字符类中，例如 <code>[$]</code>。</p>
<p><strong><code>\A</code></strong></p>
<p>仅匹配字符串的开头。 当不在 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.MULTILINE" target="_blank" rel="noopener nofollow"><code>MULTILINE</code></a> 模式时，<code>\A</code> 和 <code>^</code> 实际上是相同的。 在 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.MULTILINE" target="_blank" rel="noopener nofollow"><code>MULTILINE</code></a> 模式中，它们是不同的: <code>\A</code> 仍然只在字符串的开头匹配，但 <code>^</code> 可以匹配在换行符之后的字符串内的任何位置。</p>
<p><strong><code>\Z</code></strong></p>
<p>只匹配字符串尾。</p>
<p><strong><code>\b</code></strong></p>
<p>字边界。 这是一个零宽度断言，仅在单词的开头或结尾处匹配。 单词被定义为一个字母数字字符序列，因此单词的结尾由空格或非字母数字字符表示。</p>
<p>以下示例仅当它是一个完整的单词时匹配 <code>class</code>；当它包含在另一个单词中时将不会匹配。</p>
<pre><code class="language-python">&gt;&gt;&gt; p = re.compile(r'\bclass\b')
&gt;&gt;&gt; print(p.search('no class at all'))
&lt;re.Match object; span=(3, 8), match='class'&gt;
&gt;&gt;&gt; print(p.search('the declassified algorithm'))
None
&gt;&gt;&gt; print(p.search('one subclass is'))
None
</code></pre>
<p>使用这个特殊序列时，你应该记住两个细微之处。 首先，这是 Python 的字符串文字和正则表达式序列之间最严重的冲突。 在 Python 的字符串文字中，<code>\b</code> 是退格字符，ASCII 值为8。 如果你没有使用原始字符串，那么 Python 会将 <code>\b</code> 转换为退格，你的正则不会按照你的预期匹配。 以下示例与我们之前的正则看起来相同，但省略了正则字符串前面的 <code>'r'</code>。:</p>
<pre><code class="language-python">&gt;&gt;&gt; p = re.compile('\bclass\b')
&gt;&gt;&gt; print(p.search('no class at all'))
None
&gt;&gt;&gt; print(p.search('\b' + 'class' + '\b'))
&lt;re.Match object; span=(0, 7), match='\x08class\x08'&gt;
</code></pre>
<p>其次，在一个字符类中，这个断言没有用处，<code>\b</code> 表示退格字符，以便与 Python 的字符串文字兼容。</p>
<p><strong><code>\B</code></strong></p>
<p>另一个零宽度断言，这与 <code>\b</code> 相反，仅在当前位置不在字边界时才匹配。</p>
<h4 id="前视断言和后视断言">前视断言和后视断言</h4>
<p>从“断言”这个词上看，就知道该功能的作用是“判断”，它只有两个值：True或者False。那判断什么呢？</p>
<p><strong><code>(?=…)</code></strong></p>
<p>肯定型前视断言。如果内部的表达式（这里用 <code>...</code> 来表示）在当前位置可以匹配，则匹配成功，否则匹配失败。 但是，内部表达式尝试匹配之后，正则引擎并不会向前推进；正则表达式的其余部分依然会在断言开始的地方尝试匹配。</p>
<p>举个例子，在之前<code>re.MULTILINE</code>章节介绍的正则表达式<code>^\[ERROR\].*?(?=\[|\Z)</code>，用于提取ERROR级别的完整日志，其中<code>(?=\[|\Z)</code>就是前视断言，它前面的<code>.*</code>不能无限匹配到字符串最后，需要有个停止条件，停止条件就是匹配到字符<code>[</code>（<code>[</code>字符表示下一条日志的开头）或者匹配到字符串最后也就是<code>\Z</code>（<code>\Z</code>能匹配到表示当前匹配的ERROR级别的日志在最后一条）；如果没匹配到，则将会匹配失败。</p>
<p><strong><code>(?!…)</code></strong></p>
<p>否定型前视断言。 与肯定型断言正好相反，如果内部表达式在字符串中的当前位置 <strong>不</strong> 匹配，则成功。</p>
<p><strong><code>(?&lt;=...)</code></strong></p>
<p>肯定型后视断言，它也是一种零宽度断言，表示匹配的内容<strong>必须</strong>出现在指定模式（断言）之后。</p>
<p>举个例子，我们有一段文本，<code>text = "Price: $100, Discount: $50, i have 11 mantou"</code>，我们想提取出来以<span class="math inline">\(开头的数字，如何实现？可以使用`re.findall(r'\$\d+',text)` 提取出来包含\)</span>符号的：</p>
<img src="https://img2024.cnblogs.com/blog/516671/202506/516671-20250612151620690-914847687.png" alt="image-20250612131548648" style="zoom: 50%">
<p>但是这样并不符合我们的要求，我们要以<span class="math inline">\(符号开头，但是只要数字。这时候就可以使用肯定型后视断言了，正则表达式可以这样写：`re.findall(r'(?&lt;=\$)\d+', text)`，这表示必须以\)</span>符号开头，但是不要匹配$，只要数字。</p>
<img src="https://img2024.cnblogs.com/blog/516671/202506/516671-20250612151621636-1772674592.png" alt="image-20250612132017134" style="zoom: 50%">
<p><strong><code>(?&lt;!...)</code></strong></p>
<p>否定型后视断言，表示匹配的内容<strong>不能</strong>出现在指定的模式之后</p>
<p>总而言之，前视断言和后视断言在需要匹配特定上下文但不希望这些上下文成为匹配结果一部分时非常有用。</p>
<h3 id="2捕获组分组">2、捕获组（分组）</h3>
<p>分组是用 <code>'('</code>, <code>')'</code> 元字符来标记的。 <code>'('</code> 和 <code>')'</code> 与它们在数学表达式中的含义基本一致：它们会将所包含的表达式合为一组，并且你可以使用限定符例如 <code>*</code>, <code>+</code>, <code>?</code>, 或 <code>{m,n}</code> 来重复一个分组的内容。 举例来说，<code>(ab)*</code> 将匹配 <code>ab</code> 的零次或多次重复。</p>
<pre><code class="language-python">&gt;&gt;&gt; p = re.compile('(ab)*')
&gt;&gt;&gt; print(p.match('ababababab').span())
(0, 10)
</code></pre>
<p>用 <code>'('</code>，<code>')'</code> 表示的组也捕获它们匹配的文本的起始和结束索引；这可以通过将参数传递给 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.Match.group" target="_blank" rel="noopener nofollow"><code>group()</code></a>、<a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.Match.start" target="_blank" rel="noopener nofollow"><code>start()</code></a>、<a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.Match.end" target="_blank" rel="noopener nofollow"><code>end()</code></a> 以及 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.Match.span" target="_blank" rel="noopener nofollow"><code>span()</code></a>。 组从 0 开始编号。组 0 始终存在；它表示整个正则，所以 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#match-objects" target="_blank" rel="noopener nofollow">匹配对象</a> 方法都将组 0 作为默认参数。 稍后我们将看到如何表达不捕获它们匹配的文本范围的组。</p>
<pre><code class="language-python">&gt;&gt;&gt; p = re.compile('(a)b')
&gt;&gt;&gt; m = p.match('ab')
&gt;&gt;&gt; m.group()
'ab'
&gt;&gt;&gt; m.group(0)
'ab'
</code></pre>
<p>子组从左到右编号，从 1 向上编号。 组可以嵌套；<strong>要确定编号，只需计算从左到右的左括号字符</strong>。</p>
<pre><code class="language-python">&gt;&gt;&gt; p = re.compile('(a(b)c)d')
&gt;&gt;&gt; m = p.match('abcd')
&gt;&gt;&gt; m.group(0)
'abcd'
&gt;&gt;&gt; m.group(1)
'abc'
&gt;&gt;&gt; m.group(2)
'b'
</code></pre>
<p><a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.Match.group" target="_blank" rel="noopener nofollow"><code>group()</code></a> 可以一次传递多个组号，在这种情况下，它将返回一个包含这些组的相应值的元组。:</p>
<pre><code class="language-python">&gt;&gt;&gt; m.group(2,1,2)
('b', 'abc', 'b')
</code></pre>
<p><a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.Match.groups" target="_blank" rel="noopener nofollow"><code>groups()</code></a> 方法返回一个元组，其中包含所有子组的字符串，从1到最后一个子组。:</p>
<pre><code class="language-python">&gt;&gt;&gt; m.groups()
('abc', 'b')
</code></pre>
<p>模式中的后向引用允许你指定还必须在字符串中的当前位置找到先前捕获组的内容。 例如，如果可以在当前位置找到组 1 的确切内容，则 <code>\1</code> 将成功，否则将失败。 请记住，Python 的字符串文字也使用反斜杠后跟数字以允许在字符串中包含任意字符，因此正则中引入反向引用时务必使用原始字符串。</p>
<p>例如，以下正则检测字符串中重复的单词。:</p>
<pre><code class="language-python">&gt;&gt;&gt; p = re.compile(r'\b(\w+)\s+\1\b')
&gt;&gt;&gt; p.search('Paris in the the spring').group()
'the the'
</code></pre>
<h4 id="分组重复">分组重复</h4>
<p>分组如果储存在重复，则在捕获的时候，下一次的捕获会覆盖上一次的捕获。如何理解这句话？还是之前的例子：</p>
<pre><code class="language-python">&gt;&gt;&gt; p = re.compile('(ab)*')
&gt;&gt;&gt; print(p.match('ababababab').span())
(0, 10)
</code></pre>
<p><code>(ab)*</code>可以完全匹配<code>ababababab</code>，<code>group()</code>和<code>group(0)</code>都是<code>ababababab</code>，但是group(1)以及groups()都是<code>ab</code>，实际上(ab)分组匹配了5次，ab则是最后一个分组捕获的结果。</p>
<p>如果上述案例难以理解，可以再看下面的案例：正则表达式<code>([abc])+</code>匹配<code>'abc'</code>字符串。</p>
<img src="https://img2024.cnblogs.com/blog/516671/202506/516671-20250612151622494-893718121.png" alt="image-20250612140259276" style="zoom: 50%">
<p>分别匹配了(a)+、(b)+、(c)+并捕获成功，(b)+覆盖了(a)+的捕获结果，(c)+覆盖了(b)+的捕获结果，所以最后的捕获结果只剩下了(c)+的捕获结果<code>'c'</code>。</p>
<p>分组重复和一般分组不一样，无论重复多少次，最终保留下来的只有最后一次捕获结果。</p>
<h3 id="3非捕获组">3、非捕获组</h3>
<p>有时我们会想要使用组来表示正则表达式的一部分，但是对检索组的内容不感兴趣。 你可以通过使用非捕获组来显式表达这个事实: <code>(?:...)</code>，你可以用任何其他正则表达式替换 <code>...</code>。注意非捕获组的格式是<code>(?:...)</code>和前视断言<code>(?=...)</code>不同。</p>
<p>来看看使用正则表达式<code>r'(\d+)asdf'</code>匹配<code>'1234asdf'</code>，</p>
<img src="https://img2024.cnblogs.com/blog/516671/202506/516671-20250612151623489-1113472335.png" alt="image-20250612141247073" style="zoom: 50%">
<p>可以看到捕获组捕获到了1234作为group(1)。如果我将正则表达式改成<code>r'(?:\d+)asdf'</code> 会怎样？</p>
<img src="https://img2024.cnblogs.com/blog/516671/202506/516671-20250612151624447-1396086309.png" alt="image-20250612142052000" style="zoom: 50%">
<p>可以看到，非捕获组的作用就是<strong>能匹配，但是不捕获</strong>。</p>
<h3 id="4命名分组">4、命名分组</h3>
<p>前面说的非捕获组<code>(?:...)</code>以及前视断言<code>(?=...)</code>实际上都是Python 支持的 Perl 的扩展，命名组的格式是<code>(?P=&lt;name&gt;...)</code>，它是Python的特定扩展之一，<em>name</em> 显然是该组的名称。使用命名组的时候，可以同时使用数字编号以及组名字符串来关联对应的捕获组。</p>
<pre><code class="language-python">&gt;&gt;&gt; p = re.compile(r'(?P&lt;word&gt;\b\w+\b)')
&gt;&gt;&gt; m = p.search( '(((( Lots of punctuation )))' )
&gt;&gt;&gt; m.group('word')
'Lots'
&gt;&gt;&gt; m.group(1)
'Lots'
</code></pre>
<p>注意search方法只找第一个匹配，所以只输出了Lots，如果想获取所有匹配，应当使用findall或者finditer方法。</p>
<h4 id="命名分组提取为字典">命名分组提取为字典</h4>
<p>我们可以通过 <a href="https://docs.python.org/zh-cn/3.13/library/re.html#re.Match.groupdict" target="_blank" rel="noopener nofollow"><code>groupdict()</code></a> 将命名分组提取为一个字典:</p>
<pre><code class="language-python">&gt;&gt;&gt; m = re.match(r'(?P&lt;first&gt;\w+)\s+(?P&lt;last&gt;\w+)', 'Jane Doe')
&gt;&gt;&gt; m.groupdict()
{'first': 'Jane', 'last': 'Doe'}
</code></pre>
<h4 id="后向引用-1">后向引用</h4>
<p>后向引用是一种新的扩展语法，它的使用格式是：<code>(?P=name)</code>。</p>
<p>举个例子，用于查找重复单词的正则表达式<code>\b(\w+)\s+\1\b</code> 也可以写为 <code>\b(?P&lt;word&gt;\w+)\s+(?P=word)\b</code></p>
<pre><code class="language-python">&gt;&gt;&gt; p = re.compile(r'\b(?P&lt;word&gt;\w+)\s+(?P=word)\b')
&gt;&gt;&gt; p.search('Paris in the the spring').group()
'the the'
</code></pre>
<p>要注意，在sub替换字符串方法中，命名分组的后向引用要使用<code>\g\&lt;name&gt;</code>的形式，相关功能科参考替换字符串章节。</p>
<p>都看到这里了，能关注下我的小站就更好了<sub>(˶‾᷄ꈊ‾᷅˵)</sub>：<a href="https://blog.kdyzm.cn" target="_blank" rel="noopener nofollow">https://blog.kdyzm.cn</a></p>
<br>
<br>
END.

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-12 15:25">2025-06-12 15:24</span>&nbsp;
<a href="https://www.cnblogs.com/kuangdaoyizhimei">狂盗一枝梅</a>&nbsp;
阅读(<span id="post_view_count">23</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18925535);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18925535', targetLink: 'https://www.cnblogs.com/kuangdaoyizhimei/p/18925535', title: '万字长文彻底剖析Python正则表达式' })">举报</a>
</div>
        