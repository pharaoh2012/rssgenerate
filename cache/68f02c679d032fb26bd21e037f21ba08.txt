
		<h2>
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xiangji/p/18979384" title="发布于 2025-07-12 00:51">
    <span role="heading" aria-level="2">PATCH请求REST API之MyDeltas.net</span>
    

</a>

		</h2>
		<div class="postText"><div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>PATCH是REST API支持的请求之一。</p>
<p>REST API的请求常见的是GET和POST,另外PUT、DELETE和PATCH也很重要。</p>
<p>PATCH表示部分更新,用POST当然可以代替,PATCH语义更好更准确。</p>
<p>&nbsp;</p>
<p>1. JSON Patch是一种实现PATCH的方案</p>
<p>2. ODATA也支持Patch</p>
<p>&nbsp; &nbsp;ODATA包含Delta功能,比JSON Patch简洁</p>
<p>&nbsp; &nbsp;但是Delta只能在ODataController中绑定。直接序列化会报异常。</p>
<p>3. MyDeltas.net是本人参考ODATA的Delta功能实现的一个小工具,支持直接序列化。</p>
<p>4.&nbsp;MyDeltas和JSON Patch对比</p>
<table border="0">
<tbody>
<tr>
<td>
<p><img src="https://img2024.cnblogs.com/blog/248830/202507/248830-20250711172003683-1737849723.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
</td>
<td>&nbsp;
<p><img src="https://img2024.cnblogs.com/blog/248830/202507/248830-20250711172033076-358811653.png" alt="" width="481" height="737" loading="lazy"></p>
<p>&nbsp;</p>
</td>
</tr>
</tbody>
</table>
<p>以上是使用NodeBook实现的对比,大家可以从本项目源码中下载用vscode(需要Jupyter Notebook插件)打开执行测试</p>
<p>gitbub地址:&nbsp;https://github.com/donetsoftwork/MyDelta.net/tree/master/Notes</p>
<p>或gitee地址:&nbsp;https://gitee.com/donetsoftwork/MyDelta.net/tree/master/Notes</p>
<p>以上很明显MyDeltas生成的json比JSON Patch的简洁。</p>
<p>以前很多项目对同一个实体有很多修改方法,改头像、改昵称、改生日、改性别等等,太多了。</p>
<p>用Patch都可以合并,这样就简洁明了。</p>
<p>JSON Patch更适合复杂对象,它支持Add、Remove、Replace等,MyDeltas相当于JSON Patch的Replace</p>
<p>如果我们做微服务的API,实体类简单直接用MyDeltas就好了</p>
<p>这里说的实体类简单并不是说包含的字段少,而是尽量不要一个实体类又包含多个其他实体类的对象</p>
<p>比如Post和Comment,如果Post含<em id="__mceDel">Comment列表,用JSON Patch才好处理</em></p>
<p><em><em>如果把Post和<em id="__mceDel">Comment拆分两个API,JSON Patch的Add、Remove能用上的机会就不多了</em></em></em></p>
<p>&nbsp;</p>
<p><em><em><em>5.&nbsp;MyDeltas功能</em></em></em></p>
<p><em><em><em><em>5.1 通过nuget安装MyDeltas</em></em></em></em></p>
<div class="cnblogs_code">
<pre>dotnet add package MyDeltas --version <span style="color: rgba(128, 0, 128, 1)">0.3</span>.<span style="color: rgba(128, 0, 128, 1)">0</span>-alpha</pre>
</div>
<p><em><em><em>5.2 MyDelta通过IMyDeltaFactory工具来构造</em></em></em></p>
<div class="cnblogs_code">
<pre>IMyDeltaFactory factory = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> MyDeltaFactory();
MyDelta</span>&lt;TodoItem&gt; delta = factory.Create&lt;TodoItem&gt;();</pre>
</div>
<p>5.3&nbsp;<em>MyDelta</em>支持System.Text.Json序列化和反序列化</p>
<div class="cnblogs_code">
<pre>IMyDeltaFactory factory = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> MyDeltaFactory();
MyDelta</span>&lt;TodoItem&gt; delta = factory.Create&lt;TodoItem&gt;<span style="color: rgba(0, 0, 0, 1)">();
delta.TrySetValue(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Name</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Test</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">string</span> json =<span style="color: rgba(0, 0, 0, 1)"> JsonSerializer.Serialize(delta);
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">{"Name":"Test"}</span></pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> json = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{\"Name\":\"Test\"}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
MyDelta</span>&lt;TodoItem&gt;? delta = JsonSerializer.Deserialize&lt;MyDelta&lt;TodoItem&gt;&gt;(json);</pre>
</div>
<p>其中反序列化也是调用<em id="__mceDel" style="font-family: &quot;Courier New&quot;; font-size: 12px">IMyDeltaFactory来构造<em>MyDelta</em></em></p>
<p><em><em><em>5.4&nbsp;Patch和Put功能都是把<em>MyDelta数据应用到实例对象上</em></em></em></em></p>
<p><em><em><em><em><em>Patch只应用变更的部分,并返回是否变更成功</em></em></em></em></em></p>
<p><em><em><em><em><em><em>Put是把变化部分和没变化部分都复制过去</em></em></em></em></em></em></p>
<div class="cnblogs_code">
<pre>    <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 增量修改
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;param name="original"&gt;&lt;/param&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;returns&gt;</span><span style="color: rgba(0, 128, 0, 1)">是否变化</span><span style="color: rgba(128, 128, 128, 1)">&lt;/returns&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)"> Patch(TStructuralType original)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">bool</span> changed = <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> item <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> _data)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (_members.TryGetValue(item.Key, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">var</span><span style="color: rgba(0, 0, 0, 1)"> member))
                changed </span>=<span style="color: rgba(0, 0, 0, 1)"> member.TrySetValue(original, item.Value);
        }
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> changed;
    }</span></pre>
</div>
<div class="cnblogs_code">
<pre>    <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 覆盖
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;param name="original"&gt;&lt;/param&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;returns&gt;&lt;/returns&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> Put(TStructuralType original)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> item <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> _members)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (_data.TryGetValue(item.Key, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">var</span><span style="color: rgba(0, 0, 0, 1)"> value))
                item.Value.SetValue(original, value);
            </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
                item.Value.Copy(_instance, original);
        }
    }</span></pre>
</div>
<p><em>6.&nbsp;MyDeltas性能问题</em></p>
<p><em><em>MyDelta通过</em>IMyDeltaFactory来操作实体类的属性或字段,默认实现MyDeltaFactory是基于反射的PropertyInfo和FieldInfo</em></p>
<p><em>虽然.net9的反射性能已经提高很多了,但与手写代码还是有点差距,为此<em>MyDeltas提供了扩展方案</em></em></p>
<p><em><em><em>6.1 DelegateBuilder手写代码扩展</em></em></em></p>
<p><em><em><em><em>DelegateBuilder可以直接构造<em>MyDelta也可以扩展<em>IMyDeltaFactory</em></em></em></em></em></em></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> builder = <span style="color: rgba(0, 0, 255, 1)">new</span> DelegateBuilder&lt;TodoItem&gt;<span style="color: rgba(0, 0, 0, 1)">()
    .Add(nameof(TodoItem.Id), obj </span>=&gt; obj.Id, (obj, value) =&gt; obj.Id =<span style="color: rgba(0, 0, 0, 1)"> value)
    .Add(nameof(TodoItem.Name), obj </span>=&gt; obj.Name, (obj, value) =&gt; obj.Name =<span style="color: rgba(0, 0, 0, 1)"> value)
    .Add(nameof(TodoItem.IsComplete), obj </span>=&gt; obj.IsComplete, (obj, value) =&gt; obj.IsComplete =<span style="color: rgba(0, 0, 0, 1)"> value)
    .Add(nameof(TodoItem.Remark), obj </span>=&gt; obj.Remark, (obj, value) =&gt; obj.Remark =<span style="color: rgba(0, 0, 0, 1)"> value);
TodoItem todo </span>= <span style="color: rgba(0, 0, 255, 1)">new</span>() { Id = <span style="color: rgba(128, 0, 128, 1)">1</span>, Name = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Test1</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> };
</span><span style="color: rgba(0, 0, 255, 1)">var</span> myDelta =<span style="color: rgba(0, 0, 0, 1)"> builder.Create(todo);
myDelta.TrySetValue(nameof(TodoItem.Name), </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">todo1</span><span style="color: rgba(128, 0, 0, 1)">"</span>);</pre>
</div>
<p><em>DelegateBuilder没定义的<em>IMyDeltaFactory</em>会补足</em></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> builder = <span style="color: rgba(0, 0, 255, 1)">new</span> DelegateBuilder&lt;TodoItem&gt;<span style="color: rgba(0, 0, 0, 1)">()
    .Add(nameof(TodoItem.Id), obj </span>=&gt; obj.Id, (obj, value) =&gt; obj.Id =<span style="color: rgba(0, 0, 0, 1)"> value)
    .Add(nameof(TodoItem.Name), obj </span>=&gt; obj.Name, (obj, value) =&gt; obj.Name =<span style="color: rgba(0, 0, 0, 1)"> value);
MyDeltaFactory factory </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> MyDeltaFactory()
    .Use(builder.Members);
MyDelta</span>&lt;TodoItem&gt; delta = factory.Create&lt;TodoItem&gt;();</pre>
</div>
<p>&nbsp;</p>
<p><em>7. 如果嫌弃手写代码太繁琐可以使用MyDeltas.Emit</em></p>
<p><em>&nbsp;7.1 通过nuget安装MyDeltas.Emit</em></p>
<div class="cnblogs_code">
<pre>dotnet add package MyDeltas.Emit --version <span style="color: rgba(128, 0, 128, 1)">0.3</span>.<span style="color: rgba(128, 0, 128, 1)">0</span>-alpha</pre>
</div>
<p>7.2&nbsp;使用EmitDeltaFactory代替MyDeltaFactory</p>
<div class="cnblogs_code">
<pre>IMyDeltaFactory emitFactory = <span style="color: rgba(0, 0, 255, 1)">new</span> EmitDeltaFactory();</pre>
</div>
<p>7.3 配置Json序列化</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">string</span> json = JsonSerializer.Serialize(delta, <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> JsonSerializerOptions
{
    Converters </span>=<span style="color: rgba(0, 0, 0, 1)">
    {
        </span><span style="color: rgba(0, 0, 255, 1)">new</span> MyDeltaConverterFactory(emitFactory<span style="color: rgba(0, 0, 0, 1)">)
    }
});</span></pre>
</div>
<div class="cnblogs_code">
<pre>    IMyDeltaFactory emitFactory = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> EmitDeltaFactory();
    services.AddSingleton(emitFactory)
        .AddControllers()
        .AddJsonOptions(options </span>=&gt;<span style="color: rgba(0, 0, 0, 1)">
        {
            options.JsonSerializerOptions.Converters.Add(</span><span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> MyDeltaConverterFactory(emitFactory));
        });</span></pre>
</div>
<p>&nbsp;</p>
<p>8.&nbsp;Patch微服务的例子</p>
<div class="cnblogs_code">
<pre>[HttpPatch(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{id}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
[ProducesResponseType</span>&lt;TodoItem&gt;(<span style="color: rgba(128, 0, 128, 1)">200</span><span style="color: rgba(0, 0, 0, 1)">)]
[ProducesResponseType</span>&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;(<span style="color: rgba(128, 0, 128, 1)">304</span><span style="color: rgba(0, 0, 0, 1)">)]
[ProducesResponseType</span>&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;(<span style="color: rgba(128, 0, 128, 1)">404</span><span style="color: rgba(0, 0, 0, 1)">)]
</span><span style="color: rgba(0, 0, 255, 1)">public</span> ActionResult Patch([FromRoute] <span style="color: rgba(0, 0, 255, 1)">long</span> id, [FromBody] MyDelta&lt;TodoItem&gt;<span style="color: rgba(0, 0, 0, 1)"> delta)
{
    </span><span style="color: rgba(0, 0, 255, 1)">var</span> existingTodo = _todoItems.FirstOrDefault(t =&gt; t.Id ==<span style="color: rgba(0, 0, 0, 1)"> id);
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (existingTodo == <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> NotFound($<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Todo with Id {id} not found.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 应用变化</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (delta.Patch(existingTodo))
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> Ok(existingTodo);
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> StatusCode(<span style="color: rgba(128, 0, 128, 1)">304</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Todo with Id {id} not modified.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
}</span></pre>
</div>
<p>&nbsp;API文档:</p>
<p><img src="https://img2024.cnblogs.com/blog/248830/202507/248830-20250712170655424-867293356.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>调用的例子:</p>
<div class="cnblogs_code">
<pre>Patch {{HostAddress}}/todo/2<span style="color: rgba(0, 0, 0, 1)">
Content</span>-Type: application/<span style="color: rgba(0, 0, 0, 1)">json

{
    </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Name</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Study Data Structure</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
}</span></pre>
</div>
<p>&nbsp;返回值:</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">{
  </span>"id": 2<span style="color: rgba(0, 0, 0, 1)">,
  </span>"name": "Study Data Structure"<span style="color: rgba(0, 0, 0, 1)">,
  </span>"isComplete": <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">,
  </span>"remark": "Second task"<span style="color: rgba(0, 0, 0, 1)">
}</span></pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>源码托管地址: https://github.com/donetsoftwork/MyDelta.net ，也欢迎大家直接查看源码。<br>gitee同步更新:https://gitee.com/donetsoftwork/MyDelta.net<br>文档地址: https://donetsoftwork.github.io/MyDelta.net/index.html</p>
<p>如果大家喜欢请动动您发财的小手手帮忙点一下Star。</p>
<p><em>&nbsp;</em></p>
</div>
<div class="clear"></div>
</div>
		<p class="postfoot">
			posted on 
<span id="post-date" data-last-update-days="0.6777777777777778" data-date-updated="2025-07-12 17:07">2025-07-12 00:51</span>&nbsp;
<a href="https://www.cnblogs.com/xiangji">xiangji</a>&nbsp;
阅读(<span id="post_view_count">68</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18979384);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18979384', targetLink: 'https://www.cnblogs.com/xiangji/p/18979384', title: 'PATCH请求REST API之MyDeltas.net' })">举报</a>

		</p>
	