
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ruoli-0/p/18947542" title="发布于 2025-07-25 09:45">
    <span role="heading" aria-level="2">【机器人】—— 3. ROS 架构 &amp; 文件系统</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1 id="15-ros架构"><span style="font-family: 楷体, &quot;Kaiti SC&quot;"><span style="font-family: &quot;times new roman&quot;, times">1. ROS&nbsp;</span>架构</span></h1>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　到目前为止，我们已经安装了 <span style="font-family: &quot;times new roman&quot;, times">ROS</span>，运行了 <span style="font-family: &quot;times new roman&quot;, times">ROS </span>中内置的小乌龟案例，并且也编写了 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 小程序，对 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 也有了一个大概的认知，当然这个认知可能还是比较模糊并不清晰的，接下来，我们要从宏观上来介绍一下 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 的架构设计。</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　立足不同的角度，对 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 架构的描述也是不同的，一般我们可以从设计者、维护者、系统结构与自身结构<span style="font-family: &quot;times new roman&quot;, times">4</span>个角度来描述 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 结构。</span></p>
<p>&nbsp;</p>
<hr>
<h2><span style="font-family: 楷体, &quot;Kaiti SC&quot;"><span style="font-family: &quot;times new roman&quot;, times">1.1</span> 设计者</span></h2>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　<span style="font-family: &quot;times new roman&quot;, times">ROS</span> 设计者将 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 表述为：<span style="font-family: &quot;times new roman&quot;, times"><strong>“ROS = Plumbing + Tools + Capabilities + Ecosystem”</strong><span style="font-family: 楷体, &quot;Kaiti SC&quot;">。</span></span></span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　✍&nbsp;<strong><span style="font-family: &quot;times new roman&quot;, times">Plumbing</span></strong>：通讯机制(实现 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 不同节点之间的交互)</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　✍&nbsp;<strong><span style="font-family: &quot;times new roman&quot;, times">Tools</span></strong>：工具软件包( <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 中的开发和调试工具)</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　✍&nbsp;<strong><span style="font-family: &quot;times new roman&quot;, times">Capabilities</span></strong>：机器人高层技能( <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 中某些功能的集合，比如：导航)</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　✍&nbsp;<strong><span style="font-family: &quot;times new roman&quot;, times">Ecosystem</span></strong>：机器人生态系统(跨地域、跨软件与硬件的 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 联盟)</span></p>
<p>&nbsp;</p>
<hr>
<h2><span style="font-family: 楷体, &quot;Kaiti SC&quot;"><span style="font-family: &quot;times new roman&quot;, times">1.2</span> 维护者</span></h2>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　立足维护者的角度，ROS 架构可划分为两大部分：</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　<span style="color: rgba(255, 102, 0, 1)">★</span>&nbsp;<span style="color: rgba(255, 102, 0, 1)"><strong><span style="font-family: &quot;times new roman&quot;, times">main</span>：核心部分</strong></span>，主要由 <span style="font-family: &quot;times new roman&quot;, times">Willow Garage</span> 和一些开发者设计、提供以及维护。它提供了一些分布式计算的基本工具，以及整个 ROS 的核心部分的程序编写。</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　<span style="color: rgba(255, 102, 0, 1)">★</span>&nbsp;<strong><span style="color: rgba(255, 102, 0, 1)"><span style="font-family: &quot;times new roman&quot;, times">universe</span>：全球范围的代码</span></strong>，有不同国家的 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 社区组织开发和维护。一种是库的代码，如 <span style="font-family: &quot;times new roman&quot;, times">OpenCV、PCL</span> 等；库的上一层是从功能角度提供的代码，如人脸识别，他们调用下层的库；最上层的代码是应用级的代码，让机器人完成某一确定的功能。</span></p>
<p>&nbsp;</p>
<hr>
<h2><span style="font-family: 楷体, &quot;Kaiti SC&quot;"><span style="font-family: &quot;times new roman&quot;, times">1.3</span> 系统架构</span></h2>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　立足系统架构，<span style="font-family: &quot;times new roman&quot;, times">ROS</span> 可以划分为三层</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　<span style="color: rgba(51, 153, 102, 1)">✎</span> <span style="color: rgba(51, 153, 102, 1)"><strong><span style="font-family: &quot;times new roman&quot;, times">OS</span> 层：也即经典意义的操作系统。</strong></span></span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　　　➹&nbsp;</span><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px"><span style="font-family: &quot;times new roman&quot;, times">ROS</span> 只是元操作系统，需要依托真正意义的操作系统，目前兼容性最好的是 <span style="font-family: &quot;times new roman&quot;, times">Linux</span> 的 </span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　　　　&nbsp;<span style="font-family: &quot;times new roman&quot;, times">Ubuntu</span>，<span style="font-family: &quot;times new roman&quot;, times">Mac</span>、<span style="font-family: &quot;times new roman&quot;, times">Windows</span> 也支持 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 的较新版本。</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　<span style="color: rgba(51, 153, 102, 1)">✎ <strong>中间层：</strong></span></span><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px"><span style="color: rgba(51, 153, 102, 1)"><strong>是 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 封装的关于机器人开发的中间件。</strong></span>比如:</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　　　➹&nbsp;基于 <span style="font-family: &quot;times new roman&quot;, times">TCP/UDP</span> 继续封装的 <span style="font-family: &quot;times new roman&quot;, times">TCPROS/UDPROS</span> 通信系统。</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　　　➹&nbsp;用于进程间通信 <span style="font-family: &quot;times new roman&quot;, times">Nodelet</span>，为数据的实时性传输提供支持。</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　　　➹&nbsp;还提供了大量的机器人开发实现库，如：数据类型定义、坐标变换、运动控制....</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　<span style="color: rgba(51, 153, 102, 1)">✎</span> <span style="color: rgba(51, 153, 102, 1)"><strong>应用层：</strong></span></span><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px"><span style="color: rgba(51, 153, 102, 1)"><strong>功能包，以及功能包内的节点。</strong></span>比如: <span style="font-family: &quot;times new roman&quot;, times">master</span>、<span style="font-family: &quot;times new roman&quot;, times">turtlesim</span>的控制与运动节点...</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;">&nbsp;</span></p>
<hr>
<h2><span style="font-family: 楷体, &quot;Kaiti SC&quot;"><span style="font-family: &quot;times new roman&quot;, times">1.4</span> 自身结构</span></h2>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　就 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 自身实现而言，也可以划分为三层：</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　<strong><span style="color: rgba(0, 204, 255, 1)">✈&nbsp;文件系统</span></strong></span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　☃&nbsp;<span style="font-family: &quot;times new roman&quot;, times">ROS</span> 文件系统级指的是在硬盘上面查看的 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 源代码的组织形式</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　<span style="color: rgba(0, 204, 255, 1)"><strong>　✈&nbsp;计算图</strong></span></span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　☃&nbsp;<span style="font-family: &quot;times new roman&quot;, times">ROS</span> 分布式系统中不同进程需要进行数据交互，计算图可以以点对点的网络形式表现数据交互过程，计算图中的重要概念: 节点(<span style="font-family: &quot;times new roman&quot;, times">Node</span>)、消息(<span style="font-family: &quot;times new roman&quot;, times">message</span>)、通信机制_主题(<span style="font-family: &quot;times new roman&quot;, times">topic</span>)、通信机制_服务(<span style="font-family: &quot;times new roman&quot;, times">service</span>)。</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　<strong><span style="color: rgba(0, 204, 255, 1)">✈&nbsp;开源社区</span></strong></span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　☃&nbsp;<span style="font-family: &quot;times new roman&quot;, times">ROS</span> 的社区级概念是 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 网络上进行代码发布的一种表现形式。</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　✁<strong>&nbsp;发行版<span style="font-family: &quot;times new roman&quot;, times">（Distribution）</span></strong>：<span style="font-family: &quot;times new roman&quot;, times">ROS</span> 发行版是可以独立安装、带有版本号的一系列综合功能包。<span style="font-family: &quot;times new roman&quot;, times">ROS</span> 发</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　　 行</span><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">版像 <span style="font-family: &quot;times new roman&quot;, times">Linux</span> 发行版一样发挥类似的作用。这使得 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 软件安装更加容易，而且能够通过一个软</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　　 件</span><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">集合维持一致的版本。</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　✁&nbsp;<strong>软件库<span style="font-family: &quot;times new roman&quot;, times">（Repository）</span></strong>：<span style="font-family: &quot;times new roman&quot;, times">ROS</span> 依赖于共享开源代码与软件库的网站或主机服务，在这里不同的机构</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　　 能</span><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">够发布和分享各自的机器人软件与程序。</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　✁&nbsp;<strong><span style="font-family: &quot;times new roman&quot;, times">ROS</span> 维基<span style="font-family: &quot;times new roman&quot;, times">（ROS Wiki）</span></strong>：<span style="font-family: &quot;times new roman&quot;, times">ROS Wiki<span style="font-family: 楷体, &quot;Kaiti SC&quot;">&nbsp;</span></span>是用于记录有关 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 系统信息的主要论坛。任何人都可以注</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　　 册账户、贡献自己的文件、提供更正或更新、编写教程以及其他行为。</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　✁&nbsp;<strong><span style="font-family: &quot;times new roman&quot;, times">Bug</span> 提交系统<span style="font-family: &quot;times new roman&quot;, times">（Bug Ticket System）</span></strong>：如果你发现问题或者想提出一个新功能，<span style="font-family: &quot;times new roman&quot;, times">ROS</span> 提供这个资源</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　　 去做这些。</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　✁&nbsp;<strong>邮件列表<span style="font-family: &quot;times new roman&quot;, times">（Mailing list）</span></strong>：<span style="font-family: &quot;times new roman&quot;, times">ROS</span> 用户邮件列表是关于 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 的主要交流渠道，能够像论坛一样交流</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　　 从 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 软件更新到 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 软件使用中的各种疑问或信息。</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　✁&nbsp;<strong><span style="font-family: &quot;times new roman&quot;, times">ROS</span> 问答<span style="font-family: &quot;times new roman&quot;, times">（ROS Answer）</span></strong>：用户可以使用这个资源去提问题。</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　✁&nbsp;<strong>博客<span style="font-family: &quot;times new roman&quot;, times">（Blog）</span></strong>：你可以看到定期更新、照片和新闻。不过博客系统已经退休，<span style="font-family: &quot;times new roman&quot;, times">ROS</span> 社区取而代之。</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">&nbsp;</span></p>
<h1><span style="font-family: 楷体, &quot;Kaiti SC&quot;"><span style="font-family: &quot;times new roman&quot;, times">2.&nbsp;ROS</span> 文件系统</span></h1>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　<span style="font-family: &quot;times new roman&quot;, times">ROS</span> 文件系统级：指的是在硬盘上 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 源代码的组织形式，其结构大致可以如下图所示。</span></p>
<p><img src="https://img2024.cnblogs.com/blog/2123988/202506/2123988-20250625155631739-82629394.jpg" alt="" width="677" height="363" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<div class="cnblogs_code">
<pre>WorkSpace ---<span style="color: rgba(0, 0, 0, 1)"> 自定义的工作空间

    </span>|---<span style="color: rgba(0, 0, 0, 1)"> build:编译空间，用于存放CMake和catkin的缓存信息、配置信息和其他中间文件。

    </span>|--- devel:开发空间，用于存放编译后生成的目标文件，包括头文件、动态&amp;<span style="color: rgba(0, 0, 0, 1)">静态链接库、可执行文件等。

    </span>|---<span style="color: rgba(0, 0, 0, 1)"> src: 源码

        </span>|--<span style="color: rgba(0, 0, 0, 1)"> package：功能包(ROS基本单元)包含多个节点、库与配置文件，包名所有字母小写，只能由字母、数字与下划线组成

            </span>|--<span style="color: rgba(0, 0, 0, 1)"> CMakeLists.txt 配置编译规则，比如源文件、依赖项、目标文件

            </span>|--<span style="color: rgba(0, 0, 0, 1)"> package.xml 包信息，比如:包名、版本、作者、依赖项...(以前版本是 manifest.xml)

            </span>|--<span style="color: rgba(0, 0, 0, 1)"> scripts 存储python文件

            </span>|-- src 存储C++<span style="color: rgba(0, 0, 0, 1)">源文件

            </span>|--<span style="color: rgba(0, 0, 0, 1)"> include 头文件

            </span>|--<span style="color: rgba(0, 0, 0, 1)"> msg 消息通信格式文件

            </span>|--<span style="color: rgba(0, 0, 0, 1)"> srv 服务通信格式文件

            </span>|--<span style="color: rgba(0, 0, 0, 1)"> action 动作格式文件

            </span>|--<span style="color: rgba(0, 0, 0, 1)"> launch 可一次性运行多个节点 

            </span>|--<span style="color: rgba(0, 0, 0, 1)"> config 配置信息

        </span>|-- CMakeLists.txt: 编译的基本配置</pre>
</div>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　<span style="font-family: &quot;times new roman&quot;, times">ROS</span> 文件系统中部分目录和文件前面编程中已经有所涉及，比如功能包的创建、<span style="font-family: &quot;times new roman&quot;, times">src</span> 目录下 <span style="font-family: &quot;times new roman&quot;, times">cpp</span> 文件的编写、<span style="font-family: &quot;times new roman&quot;, times">scripts&nbsp;</span>目录下&nbsp;<span style="font-family: &quot;times new roman&quot;, times">Python&nbsp;</span>文件的编写、<span style="font-family: &quot;times new roman&quot;, times">launch</span> 目录下 <span style="font-family: &quot;times new roman&quot;, times">launch</span> 文件的编写，并且也配置了 <span style="font-family: &quot;times new roman&quot;, times">package.xml</span> 与 <span style="font-family: &quot;times new roman&quot;, times">CMakeLists.txt</span> 文件。</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　当前我们主要介绍: <span style="font-family: &quot;times new roman&quot;, times">package.xml</span> 与 <span style="font-family: &quot;times new roman&quot;, times">CMakeLists.txt</span> 这两个配置文件。</span></p>
<p>&nbsp;</p>
<hr>
<h2><span style="font-family: 楷体, &quot;Kaiti SC&quot;"><span style="font-family: &quot;times new roman&quot;, times">2.1</span> <span style="font-family: &quot;times new roman&quot;, times">package.xml</span></span></h2>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　该文件定义有关软件包的属性，例如软件包名称，版本号，作者，维护者以及对其他 <span style="font-family: &quot;times new roman&quot;, times">catkin</span> 软件包的依赖性。</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　请注意，该概念类似于旧版 <span style="font-family: &quot;times new roman&quot;, times">rosbuild</span> 构建系统中使用的&nbsp;<span style="font-family: &quot;times new roman&quot;, times">manifest.xml<em>&nbsp;</em></span>文件。</span></p>
<div class="cnblogs_code">
<pre>​<span style="color: rgba(0, 0, 255, 1)">&lt;?</span><span style="color: rgba(255, 0, 255, 1)">xml version="1.0"</span><span style="color: rgba(0, 0, 255, 1)">?&gt;</span>
<span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> 格式: 以前是 1，推荐使用格式 2 </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">package </span><span style="color: rgba(255, 0, 0, 1)">format</span><span style="color: rgba(0, 0, 255, 1)">="2"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> 包名 </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">name</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>demo01_hello_vscode<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">name</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> 版本 </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">version</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>0.0.0<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">version</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> 描述信息 </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">description</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>The demo01_hello_vscode package<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">description</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> One maintainer tag required, multiple allowed, one person per tag </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> Example:  </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> &lt;maintainer email="jane.doe@example.com"&gt;Jane Doe&lt;/maintainer&gt; </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> 维护人员 </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">maintainer </span><span style="color: rgba(255, 0, 0, 1)">email</span><span style="color: rgba(0, 0, 255, 1)">="xuzuo@todo.todo"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>xuzuo<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">maintainer</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>


  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> One license tag required, multiple allowed, one license per tag </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> Commonly used license strings: </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)">   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> 许可证信息，ROS核心组件默认 BSD </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">license</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>TODO<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">license</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>


  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> Url tags are optional, but multiple are allowed, one per tag </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> Optional attribute type can be: website, bugtracker, or repository </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> Example: </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> &lt;url type="website"&gt;http://wiki.ros.org/demo01_hello_vscode&lt;/url&gt; </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>


  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> Author tags are optional, multiple are allowed, one per tag </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> Authors do not have to be maintainers, but could be </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> Example: </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> &lt;author email="jane.doe@example.com"&gt;Jane Doe&lt;/author&gt; </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>


  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> The *depend tags are used to specify dependencies </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> Dependencies can be catkin packages or system dependencies </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> Examples: </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> Use depend as a shortcut for packages that are both build and exec dependencies </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)">   &lt;depend&gt;roscpp&lt;/depend&gt; </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)">   Note that this is equivalent to the following: </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)">   &lt;build_depend&gt;roscpp&lt;/build_depend&gt; </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)">   &lt;exec_depend&gt;roscpp&lt;/exec_depend&gt; </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> Use build_depend for packages you need at compile time: </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)">   &lt;build_depend&gt;message_generation&lt;/build_depend&gt; </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> Use build_export_depend for packages you need in order to build against this package: </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)">   &lt;build_export_depend&gt;message_generation&lt;/build_export_depend&gt; </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> Use buildtool_depend for build tool packages: </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)">   &lt;buildtool_depend&gt;catkin&lt;/buildtool_depend&gt; </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> Use exec_depend for packages you need at runtime: </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)">   &lt;exec_depend&gt;message_runtime&lt;/exec_depend&gt; </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> Use test_depend for packages you need only for testing: </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)">   &lt;test_depend&gt;gtest&lt;/test_depend&gt; </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> Use doc_depend for packages you need only for building documentation: </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)">   &lt;doc_depend&gt;doxygen&lt;/doc_depend&gt; </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> 依赖的构建工具，这是必须的 </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">buildtool_depend</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>catkin<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">buildtool_depend</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> 指定构建此软件包所需的软件包 </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">build_depend</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>roscpp<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">build_depend</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">build_depend</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>rospy<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">build_depend</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">build_depend</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>std_msgs<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">build_depend</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> 指定根据这个包构建库所需要的包 </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">build_export_depend</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>roscpp<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">build_export_depend</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">build_export_depend</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>rospy<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">build_export_depend</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">build_export_depend</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>std_msgs<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">build_export_depend</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> 运行该程序包中的代码所需的程序包 </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>  
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">exec_depend</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>roscpp<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">exec_depend</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">exec_depend</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>rospy<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">exec_depend</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">exec_depend</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>std_msgs<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">exec_depend</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>


  <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> The export tag contains other, unspecified, tags </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">export</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> Other tools can request additional information be placed here </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>

  <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">export</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">package</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre>
</div>
<p>&nbsp;</p>
<hr>
<h2><span style="font-family: 楷体, &quot;Kaiti SC&quot;"><span style="font-family: &quot;times new roman&quot;, times">2.2</span>&nbsp;<span style="font-family: &quot;times new roman&quot;, times">CMakelists.txt</span></span></h2>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　文件 <span style="font-family: &quot;times new roman&quot;, times">CMakeLists.txt</span> 是 <span style="font-family: &quot;times new roman&quot;, times">CMake</span> 构建系统的输入，用于构建软件包。任何兼容 <span style="font-family: &quot;times new roman&quot;, times">CMake</span> 的软件包都包含一个或多个 <span style="font-family: &quot;times new roman&quot;, times">CMakeLists.txt</span> 文件，这些文件描述了如何构建代码以及将代码安装到何处。</span></p>
<div class="cnblogs_code">
<pre>​cmake_minimum_required(VERSION <span style="color: rgba(128, 0, 128, 1)">3.0</span>.<span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">) #所需 cmake 版本
project(demo01_hello_vscode) #包名称，会被 ${PROJECT_NAME} 的方式调用

## Compile as C</span>++<span style="color: rgba(128, 0, 128, 1)">11</span>, supported <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> ROS Kinetic and newer
# add_compile_options(</span>-std=c++<span style="color: rgba(128, 0, 128, 1)">11</span><span style="color: rgba(0, 0, 0, 1)">)

## Find catkin macros and libraries
## </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also </span><span style="color: rgba(0, 0, 255, 1)">find</span><span style="color: rgba(0, 0, 0, 1)"> other catkin packages
#设置构建所需要的软件包
find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  std_msgs
)

## System dependencies are found with CMake</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">s conventions</span>
<span style="color: rgba(0, 0, 0, 1)">#默认添加系统依赖
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http:</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html</span>
<span style="color: rgba(0, 0, 0, 1)"># 启动 python 模块支持
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
## 声明 ROS 消息、服务、动作... ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## </span>* Let MSG_DEP_SET be the set of packages whose message types you use <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)">
##   your messages</span>/services/<span style="color: rgba(0, 0, 0, 1)">actions (e.g. std_msgs, actionlib_msgs, ...).
## </span>* In the <span style="color: rgba(0, 0, 255, 1)">file</span><span style="color: rgba(0, 0, 0, 1)"> package.xml:
##   </span>* add a build_depend tag <span style="color: rgba(0, 0, 255, 1)">for</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">message_generation</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
##   </span>* add a build_depend and a exec_depend tag <span style="color: rgba(0, 0, 255, 1)">for</span> each package <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> MSG_DEP_SET
##   </span>* If MSG_DEP_SET isn<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">t empty the following dependency has been pulled in</span>
##     but can be declared <span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> certainty nonetheless:
##     </span>* add a exec_depend tag <span style="color: rgba(0, 0, 255, 1)">for</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">message_runtime</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
## </span>* In this <span style="color: rgba(0, 0, 255, 1)">file</span><span style="color: rgba(0, 0, 0, 1)"> (CMakeLists.txt):
##   </span>* add <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">message_generation</span><span style="color: rgba(128, 0, 0, 1)">"</span> and every package <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   </span>* add <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">message_runtime</span><span style="color: rgba(128, 0, 0, 1)">"</span> and every package <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   </span>* uncomment the add_*<span style="color: rgba(0, 0, 0, 1)">_files sections below as needed
##     and list every .msg</span>/.srv/.action <span style="color: rgba(0, 0, 255, 1)">file</span><span style="color: rgba(0, 0, 0, 1)"> to be processed
##   </span>*<span style="color: rgba(0, 0, 0, 1)"> uncomment the generate_messages entry below
##   </span>* add every package <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages </span><span style="color: rgba(0, 0, 255, 1)">in</span> the <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">msg</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)"> folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services </span><span style="color: rgba(0, 0, 255, 1)">in</span> the <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">srv</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)"> folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions </span><span style="color: rgba(0, 0, 255, 1)">in</span> the <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">action</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)"> folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
# 生成消息、服务时的依赖包
# generate_messages(
#   DEPENDENCIES
#   std_msgs
# )

################################################
## Declare ROS dynamic reconfigure parameters ##
## 声明 ROS 动态参数配置 ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## </span>* In the <span style="color: rgba(0, 0, 255, 1)">file</span><span style="color: rgba(0, 0, 0, 1)"> package.xml:
##   </span>* add a build_depend and a exec_depend tag <span style="color: rgba(0, 0, 255, 1)">for</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">dynamic_reconfigure</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
## </span>* In this <span style="color: rgba(0, 0, 255, 1)">file</span><span style="color: rgba(0, 0, 0, 1)"> (CMakeLists.txt):
##   </span>* add <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">dynamic_reconfigure</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   </span>* uncomment the <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">generate_dynamic_reconfigure_options</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> section below
##     and list every .cfg </span><span style="color: rgba(0, 0, 255, 1)">file</span><span style="color: rgba(0, 0, 0, 1)"> to be processed

## Generate dynamic reconfigure parameters </span><span style="color: rgba(0, 0, 255, 1)">in</span> the <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">cfg</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)"> folder
# generate_dynamic_reconfigure_options(
#   cfg</span>/<span style="color: rgba(0, 0, 0, 1)">DynReconf1.cfg
#   cfg</span>/<span style="color: rgba(0, 0, 0, 1)">DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
## catkin 特定配置##
###################################
## The catkin_package macro generates cmake config files </span><span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> your package contains header files
## LIBRARIES: libraries you create </span><span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
# 运行时依赖
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES demo01_hello_vscode
#  CATKIN_DEPENDS roscpp rospy std_msgs
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# 添加头文件路径，当前程序包的头文件路径位于其他文件路径之前
include_directories(
# include
  ${catkin_INCLUDE_DIRS}
)

## Declare a C</span>++<span style="color: rgba(0, 0, 0, 1)"> library
# 声明 C</span>++<span style="color: rgba(0, 0, 0, 1)"> 库
# add_library(${PROJECT_NAME}
#   src</span>/${PROJECT_NAME}/demo01_hello_vscode.<span style="color: rgba(0, 0, 255, 1)">cpp</span><span style="color: rgba(0, 0, 0, 1)">
# )

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# 添加库的 cmake 目标依赖
# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C</span>++<span style="color: rgba(0, 0, 0, 1)"> executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">t collide</span>
# 声明 C++<span style="color: rgba(0, 0, 0, 1)"> 可执行文件
add_executable(Hello_VSCode src</span>/Hello_VSCode.<span style="color: rgba(0, 0, 255, 1)">cpp</span><span style="color: rgba(0, 0, 0, 1)">)

## Rename C</span>++<span style="color: rgba(0, 0, 0, 1)"> executable without prefix
## The above recommended prefix causes </span><span style="color: rgba(0, 0, 255, 1)">long</span><span style="color: rgba(0, 0, 0, 1)"> target names, the following renames the
## target back to the shorter version </span><span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> ease of user use
## e.g. </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">rosrun someones_pkg node</span><span style="color: rgba(128, 0, 0, 1)">"</span> instead of <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">rosrun someones_pkg someones_pkg_node</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#重命名c</span>++<span style="color: rgba(0, 0, 0, 1)">可执行文件
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX </span><span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">)

## Add cmake target dependencies of the executable
## same as </span><span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> the library above
#添加可执行文件的 cmake 目标依赖
add_dependencies(Hello_VSCode ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
#指定库、可执行文件的链接库
target_link_libraries(Hello_VSCode
  ${catkin_LIBRARIES}
)

#############
## Install ##
## 安装 ##
#############

# all </span><span style="color: rgba(0, 0, 255, 1)">install</span><span style="color: rgba(0, 0, 0, 1)"> targets should use catkin DESTINATION variables
# See http:</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">ros.org/doc/api/catkin/html/adv_user_guide/variables.html</span>
<span style="color: rgba(0, 0, 0, 1)">
## Mark executable scripts (Python etc.) </span><span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> installation
## </span><span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> contrast to setup.py, you can choose the destination
#设置用于安装的可执行脚本
catkin_install_python(PROGRAMS
  scripts</span>/<span style="color: rgba(0, 0, 0, 1)">Hi.py
  DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

## Mark executables </span><span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> installation
## See http:</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">docs.ros.org/melodic/api/catkin/html/howto/format1/building_executables.html</span>
# <span style="color: rgba(0, 0, 255, 1)">install</span><span style="color: rgba(0, 0, 0, 1)">(TARGETS ${PROJECT_NAME}_node
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark libraries </span><span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> installation
## See http:</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">docs.ros.org/melodic/api/catkin/html/howto/format1/building_libraries.html</span>
# <span style="color: rgba(0, 0, 255, 1)">install</span><span style="color: rgba(0, 0, 0, 1)">(TARGETS ${PROJECT_NAME}
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION}
# )

## Mark </span><span style="color: rgba(0, 0, 255, 1)">cpp</span> header files <span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> installation
# </span><span style="color: rgba(0, 0, 255, 1)">install</span>(DIRECTORY include/${PROJECT_NAME}/<span style="color: rgba(0, 0, 0, 1)">
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">*.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#   PATTERN </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">.svn</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> EXCLUDE
# )

## Mark other files </span><span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> installation (e.g. launch and bag files, etc.)
# </span><span style="color: rgba(0, 0, 255, 1)">install</span><span style="color: rgba(0, 0, 0, 1)">(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based </span><span style="color: rgba(0, 0, 255, 1)">cpp</span><span style="color: rgba(0, 0, 0, 1)"> test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}</span>-test test/test_demo01_hello_vscode.<span style="color: rgba(0, 0, 255, 1)">cpp</span><span style="color: rgba(0, 0, 0, 1)">)
# </span><span style="color: rgba(0, 0, 255, 1)">if</span>(TARGET ${PROJECT_NAME}-<span style="color: rgba(0, 0, 0, 1)">test)
#   target_link_libraries(${PROJECT_NAME}</span>-<span style="color: rgba(0, 0, 0, 1)">test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)</span></pre>
</div>
<p>&nbsp;</p>
<h1><span style="font-family: 楷体, &quot;Kaiti SC&quot;"><span style="font-family: &quot;times new roman&quot;, times">3.</span>&nbsp;<span style="font-family: &quot;times new roman&quot;, times">ROS </span>文件系统相关命令</span></h1>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　<span style="font-family: &quot;times new roman&quot;, times">ROS</span> 的文件系统本质上都还是操作系统文件，我们可以使用 <span style="font-family: &quot;times new roman&quot;, times">Linux</span> 命令来操作这些文件，不过，在 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 中为了更好的用户体验，<span style="font-family: &quot;times new roman&quot;, times">ROS</span> 专门提供了一些类似于 <span style="font-family: &quot;times new roman&quot;, times">Linux</span> 的命令，这些命令较之于 <span style="font-family: &quot;times new roman&quot;, times">Linux</span> 原生命令，更为简介、高效。</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　文件操作，无外乎就是增删改查与执行等操作，接下来，我们就从这五个维度，来介绍 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 文件系统的一些常用命令。</span></p>
<p>&nbsp;</p>
<hr>
<h2><span style="font-family: 楷体, &quot;Kaiti SC&quot;"><span style="font-family: &quot;times new roman&quot;, times">3.1</span> 增</span></h2>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　创建新的 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 功能包：</span></p>
<div class="cnblogs_code">
<pre>catkin_create_pkg 自定义包名 依赖包</pre>
</div>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　安装 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 功能包：</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">sudo</span> apt <span style="color: rgba(0, 0, 255, 1)">install</span> xxx</pre>
</div>
<p>&nbsp;</p>
<hr>
<h2><span style="font-family: 楷体, &quot;Kaiti SC&quot;"><span style="font-family: &quot;times new roman&quot;, times">3.2</span> 删</span></h2>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　删除某个功能包：</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">sudo</span> apt purge xxx</pre>
</div>
<p>&nbsp;</p>
<hr>
<h2><span style="font-family: 楷体, &quot;Kaiti SC&quot;"><span style="font-family: &quot;times new roman&quot;, times">3.3</span> 查</span></h2>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　列出所有功能包：</span></p>
<div class="cnblogs_code">
<pre>rospack list</pre>
</div>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　查找某个功能包是否存在，如果存在返回安装路径：</span></p>
<div class="cnblogs_code">
<pre>rospack <span style="color: rgba(0, 0, 255, 1)">find</span> 包名</pre>
</div>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　进入某个功能包：</span></p>
<div class="cnblogs_code">
<pre>roscd 包名</pre>
</div>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　列出某个包下的文件：</span></p>
<div class="cnblogs_code">
<pre>rosls 包名</pre>
</div>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　搜索某个功能包：</span></p>
<div class="cnblogs_code">
<pre>apt search xxx</pre>
</div>
<p>&nbsp;</p>
<hr>
<h2><span style="font-family: &quot;times new roman&quot;, times">3.</span><span style="font-family: 楷体, &quot;Kaiti SC&quot;"><span style="font-family: &quot;times new roman&quot;, times">4</span> 改</span></h2>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　修改功能包文件：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 18px">rosed <span style="font-family: 楷体, &quot;Kaiti SC&quot;">包名 文件名</span></span></pre>
</div>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　<span style="color: rgba(255, 0, 0, 1)">☂&nbsp;需要安装 <span style="font-family: &quot;times new roman&quot;, times">vim</span></span></span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　使用实例：&nbsp;<span class="cnblogs_code">rosed turtlesim Color.msg</span>&nbsp;</span></p>
<p>&nbsp;</p>
<hr>
<h2><span style="font-family: 楷体, &quot;Kaiti SC&quot;"><span style="font-family: &quot;times new roman&quot;, times">3.5</span> 执行</span></h2>
<h3 id="51roscore"><span style="font-family: 楷体, &quot;Kaiti SC&quot;"><span style="font-family: &quot;times new roman&quot;, times">3.5.1</span> <span style="font-family: &quot;times new roman&quot;, times">roscore</span></span></h3>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　&nbsp;<span class="cnblogs_code">roscore</span>&nbsp;是 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 的系统先决条件节点和程序的集合， 必须运行&nbsp;<span class="cnblogs_code">roscore</span>&nbsp;才能使 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 节点进行通信。</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　&nbsp;<span class="cnblogs_code">roscore</span>&nbsp;命令将启动:</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　➹&nbsp;<span style="font-family: &quot;times new roman&quot;, times">ros master</span></span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　➹&nbsp;<span style="font-family: &quot;times new roman&quot;, times">ros</span> 参数服务器</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　　　➹&nbsp;<span style="font-family: &quot;times new roman&quot;, times">rosout</span> 日志节点</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　用法:</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">roscore

# 或(指定端口号)
roscore </span>-p xxxx</pre>
</div>
<h3 id="52rosrun"><span style="font-family: 楷体, &quot;Kaiti SC&quot;"><span style="font-family: &quot;times new roman&quot;, times">3.5.2</span> <span style="font-family: &quot;times new roman&quot;, times">rosrun</span></span></h3>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　运行指定的 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 节点：</span></p>
<div class="cnblogs_code">
<pre>rosrun 包名 可执行文件名</pre>
</div>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　示例：&nbsp;<span class="cnblogs_code">rosrun turtlesim turtlesim_node</span>&nbsp;</span></p>
<h3 id="53roslaunch"><span style="font-family: 楷体, &quot;Kaiti SC&quot;"><span style="font-family: &quot;times new roman&quot;, times">3.5.3</span> <span style="font-family: &quot;times new roman&quot;, times">roslaunch</span></span></h3>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　执行某个包下的 <span style="font-family: &quot;times new roman&quot;, times">launch</span> 文件：</span></p>
<div class="cnblogs_code">
<pre>roslaunch 包名 launch文件名</pre>
</div>
<p>&nbsp;</p>
<h1><span style="font-family: 楷体, &quot;Kaiti SC&quot;"><span style="font-family: &quot;times new roman&quot;, times">4.</span>&nbsp;<span style="font-family: &quot;times new roman&quot;, times">ROS</span> 计算图</span></h1>
<h2 id="1计算图简介"><span style="font-family: 楷体, &quot;Kaiti SC&quot;"><span style="font-family: &quot;times new roman&quot;, times">4.1</span> 计算图简介</span></h2>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　上面介绍的 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 文件结构，是磁盘上 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 程序的存储结构，是静态的，而 <span style="font-family: &quot;times new roman&quot;, times">ros</span> 程序运行之后，不同的节点之间是错综复杂的，<span style="font-family: &quot;times new roman&quot;, times">ROS</span> 中提供了一个实用的工具：<span style="font-family: &quot;times new roman&quot;, times">rqt_graph</span>。</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　<strong><span style="font-family: &quot;times new roman&quot;, times">rqt_graph</span> 能够创建一个显示当前系统运行情况的动态图形。<span style="font-family: &quot;times new roman&quot;, times">ROS</span> 分布式系统中不同进程需要进行数据交互，计算图可以以点对点的网络形式表现数据交互过程。</strong></span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　<span style="font-family: &quot;times new roman&quot;, times">rqt_graph</span> 是 <span style="font-family: &quot;times new roman&quot;, times">rqt</span> 程序包中的一部分。</span></p>
<p>&nbsp;</p>
<hr>
<h2><span style="font-family: 楷体, &quot;Kaiti SC&quot;"><span style="font-family: &quot;times new roman&quot;, times">4.2</span> 计算图安装</span></h2>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　如果前期把所有的功能包（<span style="font-family: &quot;times new roman&quot;, times">package</span>）都已经安装完成，则直接在终端窗口中输入：</span></p>
<div class="cnblogs_code">
<pre>rosrun rqt_graph rqt_graph</pre>
</div>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　如果未安装，则在终端（<span style="font-family: &quot;times new roman&quot;, times">terminal</span>）中输入：</span></p>
<div class="cnblogs_code">
<pre>$ <span style="color: rgba(0, 0, 255, 1)">sudo</span> apt <span style="color: rgba(0, 0, 255, 1)">install</span> ros-&lt;distro&gt;-<span style="color: rgba(0, 0, 0, 1)">rqt

$ </span><span style="color: rgba(0, 0, 255, 1)">sudo</span> apt <span style="color: rgba(0, 0, 255, 1)">install</span> ros-&lt;distro&gt;-rqt-common-plugins</pre>
</div>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　使用你的 <span style="font-family: &quot;times new roman&quot;, times">ROS</span> 版本名称（比如：<span style="font-family: &quot;times new roman&quot;, times">kinetic、melodic、Noetic</span> 等）来替换掉<span style="font-family: &quot;times new roman&quot;, times; color: rgba(255, 102, 0, 1)"> &lt;distro&gt;</span>。</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　例如：当前版本是 <span style="font-family: &quot;times new roman&quot;, times">Noetic</span>，就在终端窗口中输入：</span></p>
<div class="cnblogs_code">
<pre>$ <span style="color: rgba(0, 0, 255, 1)">sudo</span> apt <span style="color: rgba(0, 0, 255, 1)">install</span> ros-noetic-<span style="color: rgba(0, 0, 0, 1)">rqt

$ </span><span style="color: rgba(0, 0, 255, 1)">sudo</span> apt <span style="color: rgba(0, 0, 255, 1)">install</span> ros-noetic-rqt-common-plugins</pre>
</div>
<p>&nbsp;</p>
<hr>
<h2><span style="font-family: 楷体, &quot;Kaiti SC&quot;"><span style="font-family: &quot;times new roman&quot;, times">4.3</span> 计算图演示</span></h2>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　接下来以 ROS 内置的小乌龟案例来演示计算图。</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　首先，按照前面所示，运行案例。</span></p>
<p><span style="font-family: 楷体, &quot;Kaiti SC&quot;; font-size: 18px">　　然后，启动新终端，键入:&nbsp;&nbsp;<span class="cnblogs_code">rqt_graph</span>&nbsp; 或 &nbsp;<span class="cnblogs_code">rosrun rqt_graph rqt_graph</span>&nbsp;，可以看到类似下图的网络拓扑图，该图可以显示不同节点之间的关系。</span></p>
<p><img src="https://img2024.cnblogs.com/blog/2123988/202506/2123988-20250626154401712-563826694.jpg" alt="" width="755" height="373" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-25 09:45">2025-07-25 09:45</span>&nbsp;
<a href="https://www.cnblogs.com/ruoli-0">城北有个混子</a>&nbsp;
阅读(<span id="post_view_count">111</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18947542);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18947542', targetLink: 'https://www.cnblogs.com/ruoli-0/p/18947542', title: '【机器人】—— 3. ROS 架构 &amp;amp; 文件系统' })">举报</a>
</div>
        