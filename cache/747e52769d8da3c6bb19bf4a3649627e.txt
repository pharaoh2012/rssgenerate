
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Can-daydayup/p/18863122" title="发布于 2025-05-06 20:54">
    <span role="heading" aria-level="2">C# 14 新增功能一览，你觉得实用吗？</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h2 data-tool="mdnice编辑器"><span>前言</span></h2>
<p data-tool="mdnice编辑器"><span>今天咱们一起来看看在 C# 14 中新增的几个功能特性，是否给我们日常编码带了来便利。</span></p>
<h2 data-tool="mdnice编辑器"><span>前提准备</span></h2>
<p data-tool="mdnice编辑器"><span>要体验 C# 14 中的新增功能，你需要安装最新的 Visual Studio 2022 版本或下载 .NET 10 SDK。</span></p>
<ul class="list-paddingleft-1">
<li>下载 .NET 10 SDK：<span style="color: rgba(0, 0, 255, 1)"><a href="https://dotnet.microsoft.com/zh-cn/download/dotnet/10.0" target="_blank" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">https://dotnet.microsoft.com/zh-cn/download/dotnet/10.0</span></a></span></li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/1336199/202505/1336199-20250506205251755-76262963.png" alt="" loading="lazy"></p>
<h2 data-tool="mdnice编辑器"><span>扩展成员（Extension Members）</span></h2>
<p data-tool="mdnice编辑器"><span>从 C# 14 开始，可以使用两种语法来定义扩展方法。C# 14 添加了 extension 容器，可以声明扩展块，扩展块是包含类型或该类型的实例的扩展成员的非嵌套、非泛型静态类中的块。在 C# 14 之前，将修饰符添加到 this 静态方法的第一个参数，以指示该方法显示为参数类型的实例的成员。</span></p>
<p data-tool="mdnice编辑器"><strong>下面的代码示例定义了 string 类型的扩展块。扩展块包含一个成员：计算字符串中单词的方法：</strong></p>
<h3 data-tool="mdnice编辑器"><span>C# 14 之前：</span></h3>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31UR5mea29hibH4ict5ms0zRDV1wcrATsgDgQ9X45fEfFf5JTHq93NwdwtYmZthMqcAyvMicLt4Zx2aD/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>namespace CustomExtensionMethods;<span><br><span><br><span>public static class MyExtensions<span><br><span>{<span><br><span>&nbsp; &nbsp; public static int WordCount(this string str) =&gt;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; str.Split([' '<span>,&nbsp;'.'<span>,&nbsp;'?'<span>], StringSplitOptions.RemoveEmptyEntries).Length;<span><br><span>}<span><br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></span></pre>
<h3 data-tool="mdnice编辑器"><span>C# 14 开始：</span></h3>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31UR5mea29hibH4ict5ms0zRDV1wcrATsgDgQ9X45fEfFf5JTHq93NwdwtYmZthMqcAyvMicLt4Zx2aD/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>namespace CustomExtensionMembers;<span><br><span><br><span>public static class MyExtensions<span><br><span>{<span><br><span>&nbsp; &nbsp; extension(string str)<span><br><span>&nbsp; &nbsp; {<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; public int WordCount() =&gt;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; str.Split([' '<span>,&nbsp;'.'<span>,&nbsp;'?'<span>], StringSplitOptions.RemoveEmptyEntries).Length;<span><br><span>&nbsp; &nbsp; }<span><br><span>}<span><br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></span></pre>
<h2 data-tool="mdnice编辑器"><span>field 关键字</span></h2>
<p data-tool="mdnice编辑器"><span>使用令牌 field 可以编写属性访问器体，而无需声明后备字段。令牌 field 将替换为编译器合成支持字段。</span></p>
<p data-tool="mdnice编辑器"><span>例如，C# 14 之前，如果要确保 string 属性无法设置为 null，则必须声明一个后备字段并实现这两个访问器：</span></p>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31UR5mea29hibH4ict5ms0zRDV1wcrATsgDgQ9X45fEfFf5JTHq93NwdwtYmZthMqcAyvMicLt4Zx2aD/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>private string _msg;<span><br><span>public string Message<span><br><span>{<span><br><span>&nbsp; &nbsp; get =&gt; _msg;<span><br><span>&nbsp; &nbsp;&nbsp;set<span>&nbsp;=&gt; _msg = value ?? throw new ArgumentNullException(nameof(value));<span><br><span>}<span><br></span></span></span></span></span></span></span></span></span></span></span></span></span></code></span></pre>
<p data-tool="mdnice编辑器"><span>C# 14 开始，现在可以简化代码：</span></p>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31UR5mea29hibH4ict5ms0zRDV1wcrATsgDgQ9X45fEfFf5JTHq93NwdwtYmZthMqcAyvMicLt4Zx2aD/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>public string Message<span><br><span>{<span><br><span>&nbsp; &nbsp; get;<span><br><span>&nbsp; &nbsp;&nbsp;set<span>&nbsp;=&gt; field = value ?? throw new ArgumentNullException(nameof(value));<span><br><span>}<span><br></span></span></span></span></span></span></span></span></span></span></span></code></span></pre>
<p data-tool="mdnice编辑器"><span>可以为字段支持的属性的一个或两个访问器声明一个主体。</span></p>
<h2 data-tool="mdnice编辑器"><span>隐式跨度转换</span></h2>
<p data-tool="mdnice编辑器"><span>C# 14 在语言中引入了对&nbsp;<code><span>System.Span&lt;T&gt;</span></code><span>&nbsp;和&nbsp;<code><span>System.ReadOnlySpan&lt;T&gt;</span></code><span>&nbsp;的一流支持。这种支持包括新的隐式转换，使得使用这些类型进行编程更加自然。</span></span></span></p>
<p data-tool="mdnice编辑器"><span>在 C# 和运行时中，<code><span>Span&lt;T&gt;</span></code><span>&nbsp;和&nbsp;<code><span>ReadOnlySpan&lt;T&gt;</span></code><span>&nbsp;被用于多种关键方式。他们的引入可提高性能，而不会造成安全风险。C# 14 识别其相互关系，并支持在&nbsp;<code><span>ReadOnlySpan&lt;T&gt;</span></code><span>、<code><span>Span&lt;T&gt;</span></code><span>&nbsp;和&nbsp;<code><span>T[]</span></code><span>&nbsp;之间进行一些转换。跨度类型可以作为扩展方法的接收器、与其他转换组合，或者在泛型类型推理场景中提供帮助。</span></span></span></span></span></span></p>
<h2 data-tool="mdnice编辑器"><span>未绑定的泛型类型与nameof</span></h2>
<p data-tool="mdnice编辑器"><span>从 C# 14 开始，nameof 的参数可以是未绑定的泛型类型。例如，<code><span>nameof(List&lt;&gt;)</span></code><span>&nbsp;计算为&nbsp;<code><span>List</span></code><span>。在早期版本的 C# 中，只能使用关闭的泛型类型（例如&nbsp;<code><span>List&lt;int&gt;</span></code><span>）返回&nbsp;<code><span>List</span></code><span>&nbsp;名称。</span></span></span></span></span></p>
<h2 data-tool="mdnice编辑器"><span>带修饰符的简单 lambda 参数</span></h2>
<p data-tool="mdnice编辑器"><span>从 C# 14 开始，可以在不指定参数类型的情况下，向&nbsp;<code><span>lambda</span></code><span>&nbsp;表达式参数添加参数修饰符，例如：<code><span>scoped、ref、in、out或 ref readonly</span></code><span>。</span></span></span></p>
<h2 data-tool="mdnice编辑器"><span>支持更多部分成员（partial members）</span></h2>
<p data-tool="mdnice编辑器"><span>从 C# 14 开始可以将<code><span>实例构造函数</span></code><span>和<code><span>事件</span></code><span>声明为<code><span>部分成员（partial members）</span></code><span>。</span></span></span></span></p>
<blockquote>
<p><span>注意：部分构造函数和分部事件必须包含一个定义声明和一个实现声明。</span></p>
</blockquote>
<h2 data-tool="mdnice编辑器"><span>Null 条件赋值</span></h2>
<p data-tool="mdnice编辑器"><span>Null 条件成员访问运算符<code><span>“?.”</span></code><span>和<code><span>“?[]”</span></code><span>现在可在赋值或复合赋值的左侧使用。</span></span></span></p>
<p data-tool="mdnice编辑器"><span>在 C# 14 之前，在分配给属性之前，需要对变量进行 null 检查：</span></p>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31UR5mea29hibH4ict5ms0zRDV1wcrATsgDgQ9X45fEfFf5JTHq93NwdwtYmZthMqcAyvMicLt4Zx2aD/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>&nbsp; &nbsp; &nbsp; &nbsp; public static void&nbsp;GetUserInfo<span>()<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; {<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; UserInfo userInfo = null;<span><br><span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;if<span>&nbsp;(userInfo is not null)<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; userInfo.Age = CalculateAge(userInfo);<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; }<span><br><span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; private static int CalculateAge(UserInfo userInfo)<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; {<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;return<span>&nbsp;DateTime.Now.Year - userInfo.Birthday.Year;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; }<span><br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></span></pre>
<p data-tool="mdnice编辑器"><span>在 C# 14 中可以使用运算符简化上述代码&nbsp;<code><span>?.</span></code><span>&nbsp;：</span></span></p>
<blockquote>
<p><span>注意：运算符 = 的右侧仅在左侧不为 null 时才会被计算。如果 userInfo 为 null，则代码不调用 CalculateAge。</span></p>
</blockquote>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31UR5mea29hibH4ict5ms0zRDV1wcrATsgDgQ9X45fEfFf5JTHq93NwdwtYmZthMqcAyvMicLt4Zx2aD/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>&nbsp; &nbsp; &nbsp; &nbsp; public static void&nbsp;GetUserInfo<span>()<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; {<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; UserInfo userInfo = null;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; userInfo?.Name = CalculateAge(userInfo);<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; }<span><br><span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; private static int CalculateAge(UserInfo userInfo)<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; {<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;return<span>&nbsp;DateTime.Now.Year - userInfo.Birthday.Year;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; }<span><br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></span></pre>
<h2 data-tool="mdnice编辑器"><span>参考文章</span></h2>
<ul class="list-paddingleft-1">
<li><span style="color: rgba(0, 0, 255, 1)"><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/whats-new/csharp-14" target="_blank" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">https://learn.microsoft.com/zh-cn/dotnet/csharp/whats-new/csharp-14</span></a></span></li>
<li><span style="color: rgba(0, 0, 255, 1)"><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/extension-methods" target="_blank" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">https://learn.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/extension-methods</span></a></span></li>
</ul>
</div>
<div id="MySignature" role="contentinfo">
    <blockquote>
<p style="font-family:YouYuan;font-size: 16px;margin: 0 auto 0.01em auto;"><span style="font-size: 17px; ">作者名称：</span><a href="https://www.cnblogs.com/Can-daydayup/" target="_blank">追逐时光者</a></p>
<p style="font-family:YouYuan;font-size: 16px;margin: 0 auto 0.01em auto;"><span style="font-size: 17px; ">作者简介：</span>一个热爱编程、善于分享、喜欢学习、探索、尝试新事物和新技术的全栈软件工程师。</p>
<p style="font-family:YouYuan;font-size: 16px;margin: 0 auto 0.01em auto;">
本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接，否则保留追究法律责任的权利。如果该篇文章对您有帮助的话，可以点一下右下角的<a onclick="votePost(cb_entryId,'Digg')" href="javascript:void(0)" style="color:red;">【♥推荐♥】</a>，希望能够持续的为大家带来好的技术文章，文中可能存在描述不正确的地方，欢迎指正或补充，不胜感激。
</p>
</blockquote>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.23095570367939816" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-06 20:54">2025-05-06 20:54</span>&nbsp;
<a href="https://www.cnblogs.com/Can-daydayup">追逐时光者</a>&nbsp;
阅读(<span id="post_view_count">83</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18863122);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18863122', targetLink: 'https://www.cnblogs.com/Can-daydayup/p/18863122', title: 'C# 14 新增功能一览，你觉得实用吗？' })">举报</a>
</div>
        