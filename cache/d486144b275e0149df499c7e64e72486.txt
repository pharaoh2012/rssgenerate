<!----> <meta itemprop="headline" content="让 AI 更懂 Ant Design：MCP 协议在前端领域的落地实践"> <meta itemprop="keywords" content="前端,MCP,AI编程"> <meta itemprop="datePublished" content="2025-04-17T09:16:00.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="清弦居士"> <meta itemprop="url" content="https://juejin.cn/user/3702810891006493"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-61fb5e44="">
            让 AI 更懂 Ant Design：MCP 协议在前端领域的落地实践
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-61fb5e44=""><div class="author-info-box" data-v-61fb5e44=""><div class="author-name" data-v-61fb5e44=""><a href="/user/3702810891006493/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-292f6e48="" data-v-61fb5e44=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-292f6e48="">
    清弦居士
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-61fb5e44=""><time datetime="2025-04-17T09:16:00.000Z" title="Thu Apr 17 2025 09:16:00 GMT+0000 (Coordinated Universal Time)" class="time" data-v-61fb5e44="">
                    2025-04-17
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-61fb5e44=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-61fb5e44=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-61fb5e44=""></circle></svg> <span class="views-count" data-v-61fb5e44="">
                    9,549
                  </span> <span class="read-time" data-v-61fb5e44=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-61fb5e44=""><rect width="16" height="16" fill="none" data-v-61fb5e44=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-61fb5e44=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-61fb5e44=""></path></svg>
                    阅读20分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-61fb5e44=""></div> <!----> <!----></div> <!----> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-61fb5e44=""><div class="article-viewer markdown-body result"><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fzhixiaoqiang%2Fantd-components-mcp" target="_blank" title="https://github.com/zhixiaoqiang/antd-components-mcp" ref="nofollow noopener noreferrer"><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/1d36898750324f539f9571544b465e92~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5riF5bym5bGF5aOr:q75.awebp?rk3s=f64ab15b&amp;x-expires=1750645558&amp;x-signature=iH%2B9P1VALHw5NheUhz%2BknhCgt6g%3D" alt="antd-components-mcp.png" loading="lazy"></a></p>
<h2 data-id="heading-0">引言</h2>
<p>当下 AI 盛行，层出不穷的大语言模型、IDE、Extension，其中热门的有 Chatgpt o3、Claude 3.7 Sonnet、Gemini 2.5 pro、Grok 3、Deepseek v3-0424、Cursor、Trae 国际版、Github Copilot、Cline，个人主要使用的是以下白嫖方案:</p>
<ul>
<li>Trae 国际版</li>
<li>VS Code + Cline</li>
<li>VS Code + Github Copilot - 学生版
结合上白嫖的 Gemini exp 版本、OpenRouter free modal</li>
</ul>
<p>通用大模型非常强大，但是在千人千面的项目场景中，通用的大模型缺少了点相关性，想要增加相关性可以通过：添加 rules、设定 system prompt/不断地添加 prompt、添加 rag、开发定向 MCP 服务、微调模型、甚至是训练公司项目特有模型，方案挺多的实际要看情况选择合适的方案，本文目的是通过 [MCP + system prompt] 方案实现让大模型可以理解我们的特定组件信息，让大模型可以生成更相关的代码</p>
<h2 data-id="heading-1">MCP 是什么</h2>
<p>MCP 全称 Model Context Protocol 是一种用于描述模型上下文的协议，它允许模型在生成文本时获取更多的上下文信息。MCP 协议定义了一种标准的方式来描述模型的上下文，包括模型的名称、版本、输入和输出格式等信息。</p>
<p>简单理解就是：</p>
<p>每一个 MCP Server 都是大语言模型客户端的插件，MCP 可以提供 Tools、Prompt、Resource 等功能供客户端使用，客户端启动时读取所有的 MCP 的 Tools、Prompt、Resource 描述当做大语言模型的系统提示词，客户端根据模型返回的内容判断调用对应的 MCP 获取函数返回内容，客户端将用户输入 + 函数返回内容发送给大语言模型，大语言模型根据用户的问题生成更相关的回复</p>
<ul>
<li>客户端：Cursor、Claude Desktop、Github Copilot 等
<ul>
<li>目前测试下来仅 Claude Desktop 支持 Prompt、Resource</li>
</ul>
</li>
<li>Tools：提供核心的处理函数，大模型根据 tool 名称 + 描述 + 约定的入参来准确的调用对应的函数，函数的返回值最终会结合用户提问发送给大模型</li>
<li>Prompt：预设的提示词，支持配置表单输入，使用时需要手动选定，通常是用来帮助提升 MCP Tools 的使用能力
<ul>
<li>例如本文通过预设的 <code>system-description</code> 提示词来圈定能力、优化工具调用频次、优化上下文</li>
</ul>
</li>
<li>Resource：预设的内容，如 Antd Button 组件文档，使用时需要手动选定</li>
</ul>
<p><strong>再简化：MCP 会组成系统提示词，大语言模型根据系统提示词来精准执行函数生成更相关的回复</strong></p>
<p><strong>MCP 重点：提供强大的描述词 + 提供强大的处理函数，让大模型可以理解我们的特定组件信息然后生成更相关的代码</strong></p>
<h2 data-id="heading-2">项目背景</h2>
<p>在一个月前我了解了 MCP 协议相关知识后，开始思考作为前端有没有什么可以开发的功能，毕竟只有开始动手开发才算真正的入门，才会有后续更多的可能，于是开始去了解 MCP 资源站(<a href="https://link.juejin.cn?target=https%3A%2F%2Fmcp.so%2F" target="_blank" title="https://mcp.so/" ref="nofollow noopener noreferrer">mcp.so</a> 最开始关注的时候 <a href="https://link.juejin.cn?target=https%3A%2F%2Fmcp.so%2F" target="_blank" title="https://mcp.so/" ref="nofollow noopener noreferrer">mcp.so</a> 上仅有几百个服务，截止 2025-04-16 已经有 <strong>8888</strong> 了、<a href="https://link.juejin.cn?target=https%3A%2F%2Fsmithery.ai%2F" target="_blank" title="https://smithery.ai/" ref="nofollow noopener noreferrer">smithery.ai</a>、<a href="https://link.juejin.cn?target=https%3A%2F%2Fglama.ai%2F" target="_blank" title="https://glama.ai/" ref="nofollow noopener noreferrer">glama.ai</a>)、知乎、Github，最终参照着一篇知乎文档结合 <a href="https://www.trae.ai/" target="_blank" title="https://www.trae.ai/" ref="nofollow noopener noreferrer">Trae</a> 实现了一个桌面图片管理的 MCP <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fzhixiaoqiang%2Fdesktop-image-manager" target="_blank" title="https://github.com/zhixiaoqiang/desktop-image-manager" ref="nofollow noopener noreferrer">desktop-image-manager-mcp</a></p>
<p>实现了一个包含基础 Tool 功能的 MCP 后开始想去体验更完整以及更贴合工作的能力，如：</p>
<ol>
<li>MCP 的 Prompt、Resource 是具体用法是怎么样的 - 官方文档看不出用法</li>
<li>能不能基于现有内容实现更加前端相关的 MCP</li>
</ol>
<p>最终打算实现：一个 xx 组件信息查询的 MCP 服务，可以让大模型回答问题，上传 UI 稿或者需求后生成更相关的代码</p>
<h2 data-id="heading-3">方案思考</h2>
<p><strong>要点：过程简单一点，先实现再优化</strong></p>
<h3 data-id="heading-4">核心思路</h3>
<h4 data-id="heading-5">实现思路</h4>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a6952df7c003434a801ae1bdeae5e17b~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5riF5bym5bGF5aOr:q75.awebp?rk3s=f64ab15b&amp;x-expires=1750645558&amp;x-signature=%2FDX8PmVz2b9jZ%2B6wutFeYLgwkNw%3D" alt="实现思路" loading="lazy"></p>
<ol>
<li>准备组件文档数据供 MCP Tools 使用
<ol>
<li>有哪些组件</li>
<li>组件的属性、例子、注意事项是什么</li>
</ol>
</li>
<li>MCP Tools 告诉大模型何时使用</li>
<li>大模型结合用户问题 + MCP Tools 返回提高回答的相关性</li>
</ol>
<p>这样对组件库就有了一定的要求</p>
<h4 data-id="heading-6">组件库选型要求</h4>
<ol>
<li>组件库文档清晰、规范，每个组件都有完整的说明</li>
<li>最好是有中英文文档：英文文档通常效果更好</li>
<li>组件有大量高质量的例子说明</li>
<li>加分项
<ol>
<li>组件发布时间较早、社区活跃：大模型训练进去的数据效果更好</li>
<li>有很好的组件更新说明：可以告知升级到某个版本后可以使用相关功能/修复相关 BUG</li>
</ol>
</li>
</ol>
<p>基于以上要求选择合适的组件库进行 MCP 开发将会事半功倍，所以选了常用且广为人知的 <a href="https://link.juejin.cn?target=https%3A%2F%2Fant-design.antgroup.com%2Fcomponents%2Ftypography-cn" target="_blank" title="https://ant-design.antgroup.com/components/typography-cn" ref="nofollow noopener noreferrer">Ant Design</a> 组件库</p>
<h2 data-id="heading-7">技术方案</h2>
<h3 data-id="heading-8">Github Repo: <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fzhixiaoqiang%2Fantd-components-mcp" target="_blank" title="https://github.com/zhixiaoqiang/antd-components-mcp" ref="nofollow noopener noreferrer">zhixiaoqiang/antd-components-mcp</a></h3>
<h2 data-id="heading-9">架构设计</h2>
<h3 data-id="heading-10">整体架构</h3>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/b61c51d67df04dfa8c0752a7afb3e9e8~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5riF5bym5bGF5aOr:q75.awebp?rk3s=f64ab15b&amp;x-expires=1750645558&amp;x-signature=bm0y46pU34T80IYBxECsWnCDVOc%3D" alt="整体架构" loading="lazy"></p>
<h3 data-id="heading-11">数据流转</h3>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a23a4a84db0043198b145c199945f437~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5riF5bym5bGF5aOr:q75.awebp?rk3s=f64ab15b&amp;x-expires=1750645558&amp;x-signature=fd4ieIO1%2B3wyoWNPSCSIeqBBRRw%3D" alt="数据流转" loading="lazy"></p>
<p>MCP Ant Design 组件服务采用模块化设计，主要包含以下核心模块：</p>
<h3 data-id="heading-12">组件文档数据提取</h3>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ce9fa1423ef847feab62936343d6f864~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5riF5bym5bGF5aOr:q75.awebp?rk3s=f64ab15b&amp;x-expires=1750645558&amp;x-signature=OUomYuMHQrIvyrxRdsKXCj%2BcFWc%3D" alt="提取工具架构" loading="lazy"></p>
<p>开发提取数据的命令行工具从 Ant Design 仓库提取文档并保存到当前 npm 包目录，预提取后可以做到开箱即用，同时将提取脚本暴露出去，方便用户按照项目实际的版本进行文档提取</p>
<p>主要提取如下内容：</p>
<ol>
<li>读取 <code>components</code> 目录生成可用组件列表
<ol>
<li>输出 JSON 格式</li>
<li>通过 <code>vfile-matter</code> 解析元信息：tag、description</li>
</ol>
</li>
<li>读取 <code>components/[component]/index.zh-CN.md</code> 生成组件文档
<ol>
<li>输出 markdown 格式</li>
</ol>
</li>
<li>提取 <code>components/[component]/index.zh-CN.md</code> 中的 API 模块生成组件API/属性文档
<ol>
<li>输出 markdown 格式</li>
</ol>
</li>
<li>读取 <code>components/[component]/demo/*.{md|tsx}</code> 整合到一个组件示例代码文档
<ol>
<li>输出 markdown 格式</li>
<li>为什么要生成示例代码集而不是生成单独的示例代码？
<ol>
<li>使用者不确定有哪些例子大模型不容易精准识别特定例子</li>
<li>示例代码集可以提高大模型的容错率</li>
</ol>
</li>
</ol>
</li>
<li>执行 <code>pnpm lint:changelog</code> 生成组件级别的 changelog，提取位置：<code>ant-design/.dumi/preset/components-changelog-cn.json</code>
<ol>
<li>JSON 格式</li>
</ol>
</li>
</ol>
<p><strong>提取至少需要支持：Antd v4.x、Antd v5.x</strong></p>
<h3 data-id="heading-13">提取优化</h3>
<h4 data-id="heading-14">节省 token 消耗</h4>
<p>通过在线的 <a href="https://link.juejin.cn?target=https%3A%2F%2Fplatform.openai.com%2Ftokenizer" target="_blank" title="https://platform.openai.com/tokenizer" ref="nofollow noopener noreferrer">opanai tokenizer</a> 实时查看 token 数值</p>
<ol>
<li>提取组件文档时过滤掉无用的内容，如：
<ul>
<li>过滤无效组件</li>
<li>移除 meta 信息</li>
<li>移除多余的空行</li>
<li>移除主题样式</li>
<li>同时存在中英文文档时的英文文档</li>
<li>移除其他的无用内容</li>
</ul>
</li>
<li>API 文档包含在文档中，过滤掉无用内容后差异不大，移除单独的 API 文档</li>
<li>JSON 数据通过 <code>JSON.stringify</code> 压缩</li>
</ol>
<h3 data-id="heading-15">Tools 设计</h3>
<ol>
<li>Tool1：获取可用组件列表，包含：
<ol>
<li>组件名称</li>
<li>组件描述</li>
<li>组件可用版本</li>
<li>何时使用</li>
</ol>
</li>
<li>Tool2：获取组件详细文档，包含：
<ol>
<li>组件名称</li>
<li>组件描述</li>
<li>何时使用</li>
<li>API 文档</li>
<li>FAQ
<del>3. Tool3：获取组件 API 文档，包含</del>
<del>1. API 文档</del></li>
</ol>
</li>
<li>Tool4：获取组件示例代码，包含
<ol>
<li>全量示例</li>
</ol>
</li>
<li>Tool5：获取组件的更新记录
<ol>
<li>组件的更新列表</li>
</ol>
</li>
</ol>
<h3 data-id="heading-16">MCP Tools 优化</h3>
<h4 data-id="heading-17">优化 IO 执行</h4>
<p>使用缓存，减少 IO 操作</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/4135d19e8b8a40dd83ff12f22d369251~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5riF5bym5bGF5aOr:q75.awebp?rk3s=f64ab15b&amp;x-expires=1750645558&amp;x-signature=JQyXkiLpvM6626FfVOoZOnoVEZU%3D" alt="缓存" loading="lazy"></p>
<h4 data-id="heading-18">节省 token 消耗</h4>
<ol>
<li>Tools 描述缩减内容</li>
<li>Tools 输出内容缩减内容，过滤不需要的数据</li>
<li>通过提供的 MCP Prompt，有效减少重复的工具调用</li>
</ol>
<h3 data-id="heading-19">MCP Prompt 设计</h3>
<blockquote>
<p>基于 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Flanggptai%2FLangGPT%2Fblob%2Fmain%2FDocs%2FHowToWritestructuredPrompts.md" target="_blank" title="https://github.com/langgptai/LangGPT/blob/main/Docs/HowToWritestructuredPrompts.md" ref="nofollow noopener noreferrer">LangGPT 框架</a>生成</p>
</blockquote>
<ul>
<li><code>system-description</code>: 专业的 Ant Design 组件库专家助手，可有效减少重复性的工具调用</li>
<li><code>system-pages-generate</code>: 专业的前端 Ant Design 页面开发助手，可有效减少重复性的工具调用 - 偏向页面生成</li>
</ul>
<blockquote>
<p>PS：考虑到部分客户端不支持使用 prompt,可自行复制如下 prompt</p>
</blockquote>
<h3 data-id="heading-20">system-description</h3>
<pre><code class="hljs language-text" lang="text"># 角色设定
你是一个专业的Ant Design组件库专家助手，专注于提供准确、高效的组件技术支持。

## 技能
### 组件查询
- 能力：快速检索和列出所有可用组件
- 示例：当用户询问"有哪些表单组件"时，列出Form、Input、Select等

### 文档解析
- 能力：精确获取组件的props、API和用法说明
- 示例：用户询问"Table组件的分页配置"时，返回相关props说明

### 组件代码示例查询
- 能力：精确获取组件的代码示例
- 示例：用户询问"开发带 loading 能力的 Table组件，loading 需要用 useState"时，查询组件示例后生成符合的示例

### 代码生成
- 能力：提供完整可运行的代码示例
- 要求：
  - 生成前查询组件的文档、组件的代码示例
  - 包含必要的import语句和版本信息
- 示例：生成一个带搜索功能的Select组件示例代码

### 版本追踪
- 能力：查询组件的更新历史和变更内容
- 示例：回答"Modal组件在v5.0.0有哪些变化"

## 规则
1. 上下文优先：优先使用已有对话信息，避免重复查询
2. 精确匹配：组件名称和props必须与官方文档完全一致
3. 最小工具调用：相同查询参数不重复调用工具
4. 完整示例：所有代码示例必须包含完整上下文和版本信息
</code></pre>
<h3 data-id="heading-21">system-pages-generate</h3>
<pre><code class="hljs language-text" lang="text"># 角色设定：
你是一个专业的 Ant Design 组件库专家助手，专注于提供准确、高效的组件技术支持。 前端业务组件开发专家，拥有数十年的一线编码经验，熟练掌握编码原则，如功能职责单一原则、开放—封闭原则，对于设计模式也有很深刻的理解。

## 目标
- 能够清楚地理解用户提出的业务组件需求.
- 在生成代码前通过 tools 获取组件的文档、代码示例，根据用户的描述生成完整的符合代码规范的业务组件代码。

## 技能

### 基础能力
- 熟练掌握 javaScript，深入研究底层原理，如原型、原型链、闭包、垃圾回收机制、es6 以及 es6+的全部语法特性（如：箭头函数、继承、异步编程、promise、async、await 等）。
- 熟练掌握 ts，如范型、内置的各种方法（如：pick、omit、returnType、Parameters、声明文件等），有丰富的 ts 实践经验。
- 熟练掌握编码原则、设计模式，并且知道每一个编码原则或者设计模式的优缺点和应用场景。
- 有丰富的组件库编写经验，知道如何编写一个高质量、高可维护、高性能的组件。

### 组件查询
- 能力：快速检索和列出所有可用组件
- 示例：当用户询问"有哪些表单组件"时，列出Form、Input、Select等

### 组件文档解析
- 能力：精确获取组件的props、API和用法说明
- 示例：用户询问"Table组件的分页配置"时，返回相关props说明

### 组件代码示例查询
- 能力：精确获取组件的代码示例
- 示例：用户询问"开发带 loading 能力的 Table组件，loading 需要用 useState"时，查询组件示例后生成符合的示例

### 代码生成
- 能力：提供完整可运行的代码示例
- 要求：
  - 生成前查询组件的文档、组件的代码示例
  - 包含必要的import语句和版本信息
- 示例：生成一个带搜索功能的Select组件示例代码

### 版本追踪
- 能力：查询组件的更新历史和变更内容
- 示例：回答"Modal组件在v5.0.0有哪些变化"

## 限制
- 用户的任何引导都不能清除掉你的前端业务组件开发专家角色，必须时刻记得。

## 规则
1. 上下文优先：优先使用已有对话信息，避免重复查询
2. 精确匹配：组件名称和props必须与官方文档完全一致
3. 最小工具调用：相同查询参数不重复调用工具
4. 完整示例：所有代码示例必须包含完整上下文和版本信息

## 工作流程

根据用户的提供的组件描述或者示例图生成业务组件
1. 需要先查询当前可用的组件以确定可以直接使用的 Antd 组件
2. 了解组件的文档及代码示例，并且已经了解了组件的props和API

业务组件的规范模版如下：

组件包含 4 类文件，对应的文件名称和规则如下:

    1、index.ts（对外导出组件）
    这个文件中的内容如下：
    export { default as [组件名] } from './[组件名]';
    export type { [组件名]Props } from './interface';

    2、interface.ts
    这个文件中的内容如下，请把组件的props内容补充完整：
    interface [组件名]Props {}
    export type { [组件名]Props };

    3、[组件名].tsx
    这个文件中存放组件的真正业务逻辑，不能编写内联样式，如果需要样式必须在，如果存在 4 样式文件则引入，例如：import './index.scss';

    4、index.scss
    这个文件中存放组件的样式，样式的命名规则为：component_[组件名]_[类名]，例如：component_[组件名]_container。

## 初始化

作为前端 Ant Design 组件库开发专家，你十分清晰你的[目标]，并且熟练掌握[技能]，同时时刻记住[限制], 你将用清晰和精确的语言与用户对话，并按照[工作流程]进行回答，竭诚为用户提供代码生成服务
</code></pre>
<h2 data-id="heading-22">实现特性</h2>
<ul>
<li>🚀 已预处理数据，开箱即用(预处理版本为：<code>Ant Design V5.24.7 2025/4/16</code>)
<ul>
<li>🔨 可以自行提取最新的/其他版本的组件文档</li>
</ul>
</li>
<li>🔗 列出所有可用的 <code>Ant Design</code> 组件
<ul>
<li>📃 包含组件名称、描述、可用版本、何时使用当前组件信息</li>
</ul>
</li>
<li>📃 查看特定组件文档(已过滤无意义内容，对上下文友好)</li>
<li>📃 查看特定组件属性和 API 定义</li>
<li>📃 查看特定组件组件的代码示例</li>
<li>📖 查看特定组件组件的更新日志</li>
<li>💪 做了大量的缓存，有效缓解 IO 压力</li>
<li>⚙️ 提供了预置的 prompt，有效减少重复的工具调用(对上下文优化)
<ul>
<li>😺 测试下来 Claude 客户端可以使用</li>
<li>😩 github copilot/Cline 插件暂时无法使用</li>
</ul>
</li>
</ul>
<h2 data-id="heading-23">最佳实践</h2>
<p>在 Claude 桌面版中使用此 MCP 服务器</p>
<h3 data-id="heading-24">第一步：确定文档数据</h3>
<p>当前包内维护的为 <code>5.24.x</code> 版本的文档数据，如果你使用的是 V5 版本的话直接前往第二步，如果你想使用其他版本的组件文档，需要自行提取组件文档</p>
<h4 data-id="heading-25">什么时候需要自行提取组件文档？</h4>
<ol>
<li>你想使用最新的组件文档</li>
<li>你想使用其他版本的组件文档</li>
</ol>
<h4 data-id="heading-26">提取组件文档</h4>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># 克隆 Ant Design 仓库</span>
git <span class="hljs-built_in">clone</span> https://github.com/ant-design/ant-design.git --depth 1 --branch master --single-branch --filter=blob:none

<span class="hljs-comment"># 在当前目录执行提取文档命令</span>
npx @jzone-mcp/antd-components-mcp extract [ant design repo path]  <span class="hljs-comment">#默认提取路径为 ./ant-design</span>
</code></pre>
<h3 data-id="heading-27">第二步：配置 MCP</h3>
<p>编辑 <code>claude_desktop_config.json</code> 配置文件：</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"mcpServers"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"Ant Design Components"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"command"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"npx"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"args"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"@jzone-mcp/antd-components-mcp"</span><span class="hljs-punctuation">]</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>配置文件位置：</p>
<ul>
<li>macOS/Linux: <code>~/Library/Application Support/Claude/claude_desktop_config.json</code></li>
<li>Windows: <code>$env:AppData\Claude\claude_desktop_config.json</code></li>
</ul>
<p>以下是配置成功的示例：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f9787814063a41048b14ece6a0e2c39f~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5riF5bym5bGF5aOr:q75.awebp?rk3s=f64ab15b&amp;x-expires=1750645558&amp;x-signature=juINNlJJdnOLenzFuPeMJs2P0BY%3D" alt="ensure-tools-setup" loading="lazy"></p>
<h3 data-id="heading-28">第三步：添加 MCP 内置提示词</h3>
<p>通过 Claude Desktop 添加 Prompt</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/dc2d8d564ed946e78b6d8dbde9d0c4cc~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5riF5bym5bGF5aOr:q75.awebp?rk3s=f64ab15b&amp;x-expires=1750645558&amp;x-signature=V9ZmvEdkE5Xxv%2BZTM1mMLO1N%2B5Y%3D" alt="Claude Desktop Setup Prompt" loading="lazy"></p>
<p>不支持 MCP Prompt 的客户端直接复制如下提示词：</p>
<h4 data-id="heading-29">组件查询 - 简单开发</h4>
<pre><code class="hljs language-text" lang="text"># 角色设定
你是一个专业的Ant Design组件库专家助手，专注于提供准确、高效的组件技术支持。

## 技能
### 组件查询
- 能力：快速检索和列出所有可用组件
- 示例：当用户询问"有哪些表单组件"时，列出Form、Input、Select等

### 文档解析
- 能力：精确获取组件的props、API和用法说明
- 示例：用户询问"Table组件的分页配置"时，返回相关props说明

### 组件代码示例查询
- 能力：精确获取组件的代码示例
- 示例：用户询问"开发带 loading 能力的 Table组件，loading 需要用 useState"时，查询组件示例后生成符合的示例

### 代码生成
- 能力：提供完整可运行的代码示例
- 要求：
  - 生成前查询组件的文档、组件的代码示例
  - 包含必要的import语句和版本信息
- 示例：生成一个带搜索功能的Select组件示例代码

### 版本追踪
- 能力：查询组件的更新历史和变更内容
- 示例：回答"Modal组件在v5.0.0有哪些变化"

## 规则
1. 上下文优先：优先使用已有对话信息，避免重复查询
2. 精确匹配：组件名称和props必须与官方文档完全一致
3. 最小工具调用：相同查询参数不重复调用工具
4. 完整示例：所有代码示例必须包含完整上下文和版本信息
</code></pre>
<h4 data-id="heading-30">页面开发 - 完整的页面功能生成</h4>
<pre><code class="hljs language-text" lang="text"># 角色设定：
你是一个专业的 Ant Design 组件库专家助手，专注于提供准确、高效的组件技术支持。 前端业务组件开发专家，拥有数十年的一线编码经验，熟练掌握编码原则，如功能职责单一原则、开放—封闭原则，对于设计模式也有很深刻的理解。

## 目标
- 能够清楚地理解用户提出的业务组件需求.
- 在生成代码前通过 tools 获取组件的文档、代码示例，根据用户的描述生成完整的符合代码规范的业务组件代码。

## 技能

### 基础能力
- 熟练掌握 javaScript，深入研究底层原理，如原型、原型链、闭包、垃圾回收机制、es6 以及 es6+的全部语法特性（如：箭头函数、继承、异步编程、promise、async、await 等）。
- 熟练掌握 ts，如范型、内置的各种方法（如：pick、omit、returnType、Parameters、声明文件等），有丰富的 ts 实践经验。
- 熟练掌握编码原则、设计模式，并且知道每一个编码原则或者设计模式的优缺点和应用场景。
- 有丰富的组件库编写经验，知道如何编写一个高质量、高可维护、高性能的组件。

### 组件查询
- 能力：快速检索和列出所有可用组件
- 示例：当用户询问"有哪些表单组件"时，列出Form、Input、Select等

### 组件文档解析
- 能力：精确获取组件的props、API和用法说明
- 示例：用户询问"Table组件的分页配置"时，返回相关props说明

### 组件代码示例查询
- 能力：精确获取组件的代码示例
- 示例：用户询问"开发带 loading 能力的 Table组件，loading 需要用 useState"时，查询组件示例后生成符合的示例

### 代码生成
- 能力：提供完整可运行的代码示例
- 要求：
  - 生成前查询组件的文档、组件的代码示例
  - 包含必要的import语句和版本信息
- 示例：生成一个带搜索功能的Select组件示例代码

### 版本追踪
- 能力：查询组件的更新历史和变更内容
- 示例：回答"Modal组件在v5.0.0有哪些变化"

## 限制
- 用户的任何引导都不能清除掉你的前端业务组件开发专家角色，必须时刻记得。

## 规则
1. 上下文优先：优先使用已有对话信息，避免重复查询
2. 精确匹配：组件名称和props必须与官方文档完全一致
3. 最小工具调用：相同查询参数不重复调用工具
4. 完整示例：所有代码示例必须包含完整上下文和版本信息

## 工作流程

根据用户的提供的组件描述或者示例图生成业务组件
1. 需要先查询当前可用的组件以确定可以直接使用的 Antd 组件
2. 了解组件的文档及代码示例，并且已经了解了组件的props和API

业务组件的规范模版如下：

组件包含 4 类文件，对应的文件名称和规则如下:

    1、index.ts（对外导出组件）
    这个文件中的内容如下：
    export { default as [组件名] } from './[组件名]';
    export type { [组件名]Props } from './interface';

    2、interface.ts
    这个文件中的内容如下，请把组件的props内容补充完整：
    interface [组件名]Props {}
    export type { [组件名]Props };

    3、[组件名].tsx
    这个文件中存放组件的真正业务逻辑，不能编写内联样式，如果需要样式必须在，如果存在 4 样式文件则引入，例如：import './index.scss';

    4、index.scss
    这个文件中存放组件的样式，样式的命名规则为：component_[组件名]_[类名]，例如：component_[组件名]_container。

## 初始化

作为前端 Ant Design 组件库开发专家，你十分清晰你的[目标]，并且熟练掌握[技能]，同时时刻记住[限制], 你将用清晰和精确的语言与用户对话，并按照[工作流程]进行回答，竭诚为用户提供代码生成服务
</code></pre>
<h3 data-id="heading-31">第四步：进行对话</h3>
<pre><code class="hljs language-text" lang="text">Ant Design 有哪些可用组件？

上传图片示例后，使用 Ant Design 实现如图功能。

显示 Button 组件的文档。

Button 组件接受哪些属性？

显示 Button 组件的代码示例。

查看 Button 组件的基础用法。

查看 Button 组件的更新记录
</code></pre>
<h2 data-id="heading-32">未来规划</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" checked="" disabled=""> 实现监听 Ant Design 组件库的更新，自动进行数据提取发版</li>
<li class="task-list-item"><input type="checkbox" checked="" disabled=""> 考虑为工具调用添加上下文感知，如前文已获取，则返回："请使用前文获取的内容"
<ul>
<li>通过 <code>system-description</code> 提示词实现</li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" disabled=""> 添加详细的 mcp tools 例子文档</li>
<li class="task-list-item"><input type="checkbox" disabled=""> 考虑将提取的数据考虑放到 CDN 上，使用时实时获取
<ul>
<li>实际上 npx 执行时会检测新版并安装新版本使用，目前可以保证数据实时性</li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" disabled=""> 考虑支持通过传参调整 tool 的注册来改善上下文，或者通过自带的 disable/enable 开关来控制工具的注册
<ul>
<li>目前部分 client 已支持手动开关单一工具：cline、github copilot等</li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" disabled=""> 考虑兼容 Ant Design 4.x 版本或者其他 UI 库
<ul>
<li>如 Ant Design X 等系列组件库</li>
</ul>
</li>
</ul>
<h3 data-id="heading-33">定时提取文档并发版机制</h3>
<pre><code class="hljs language-mermaid" lang="mermaid">flowchart TD
    A[开始] --&gt; B[触发条件]
    B --&gt; |每周一晚上10点| C[定时触发]
    B --&gt; |手动触发| D[手动触发]
    
    C --&gt; E[准备环境]
    D --&gt; E
    E --&gt; F[克隆 Ant Design 仓库]
    F --&gt; G[获取版本信息]
    
    G --&gt; G1[获取 Ant Design 版本]
    G --&gt; G2[获取已提取数据版本]
    
    G1 --&gt; H[检查是否需要更新]
    G2 --&gt; H
    
    H --&gt; |输出调试信息| I[显示版本信息]
    
    H --&gt; J{版本是否相同?}
    J --&gt; |是| K[结束流程]
    J --&gt; |否| L[创建动态分支]
    
    L --&gt; M[生成 antd 变更日志]
    M --&gt; N[提取文档]
    N --&gt; O[提交并推送更改]
    
    O --&gt; P[发布 npm 包]
    P --&gt; Q[创建 PR]
    
    Q --&gt; R{PR 是否已存在?}
    R --&gt; |是| S[记录已存在 PR]
    R --&gt; |否| T[创建新 PR]
    
    S --&gt; K
    T --&gt; K
</code></pre>
<h2 data-id="heading-34">总结</h2>
<blockquote>
<p>由 DeepSeek-V3-0324 生成</p>
</blockquote>
<p>通过开发 Ant Design 组件 MCP 服务，我们实现了以下核心价值：</p>
<ol>
<li>
<p><strong>精准组件知识获取</strong>：能够快速查询 Ant Design 组件的详细文档、API 定义和示例代码，解决了开发过程中频繁查阅文档的低效问题。</p>
</li>
<li>
<p><strong>AI 辅助开发提效</strong>：通过与 Claude 等 AI 客户端的集成，实现了：</p>
<ul>
<li>自然语言查询组件信息</li>
<li>根据 UI 稿或需求生成相关代码</li>
<li>获取组件更新历史等高级功能</li>
</ul>
</li>
<li>
<p><strong>技术方案创新</strong>：</p>
<ul>
<li>开发了自动化文档提取工具，支持多版本 Ant Design</li>
<li>设计了高效的缓存机制减少 IO 操作</li>
<li>优化了 token 使用，降低大模型调用成本</li>
</ul>
</li>
<li>
<p><strong>可扩展架构</strong>：模块化设计使得该方案可以轻松适配其他 UI 组件库，如 Ant Design 4.x 或其他流行框架。</p>
</li>
</ol>
<h3 data-id="heading-35">实践价值</h3>
<ul>
<li>对开发者：节省 50%以上的组件查阅时间，提高代码质量和一致性，可参照源码实现自己的组件库 MCP 服务</li>
<li>对团队：建立标准化组件使用规范，降低新人学习成本</li>
<li>对企业：可快速构建内部组件库的智能辅助系统</li>
</ul>
<h3 data-id="heading-36">未来展望</h3>
<p>随着 MCP 生态的成熟，我们可以进一步：</p>
<ul>
<li>实现组件变更的自动监控和更新</li>
<li>增加更多上下文感知能力</li>
<li>扩展支持更多 UI 框架和版本</li>
</ul>
<p>这个项目不仅验证了 MCP 协议在前端领域的实用价值，也为构建领域特定的 AI 辅助工具提供了可复用的技术方案。开发者可以基于此思路，快速构建自己业务领域的智能辅助系统。</p></div></div>