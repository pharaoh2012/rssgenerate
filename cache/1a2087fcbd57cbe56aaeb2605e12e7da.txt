
	<div class="postTitle">
		<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/strick/p/18663712" title="发布于 2025-07-28 10:25">
    <span role="heading" aria-level="2">带团队后的日常思考（十七）</span>
    

</a>

	</div>
	<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>一、日常问题</h1>
<p><span style="font-size: 16px"><strong>1）应对简陋需求</strong></span></p>
<p>　　最近接到隔壁算法组的一个广告配置的需求，就给了两行描述，两张配置截图，给的信息太简陋。</p>
<p>　　给的信息太少，在开发过程中很容易出现目标偏差，例如将预期的圆形最后做成方形。</p>
<p>　　所以前期的准备一定要做好，首先就是理解需求背后的目标，然后再确认也没结构和交互细节。</p>
<p>　　从沟通中了解到需要在现在的广告列表页面增加个流量配置的功能，那就基于列表页做修改。</p>
<p>　　既然有了配置，那就应该有张管理界面，包括列表和上下架。</p>
<p>　　再根据提供的两张配置截图，确认配置需要的字段，并且修改原先的交互流程，改成更利于实现和维护的方式。</p>
<p>　　界面效果完成后，在技术联调时，又出了些问题。之前做的都是需求准备，漏了技术准备。</p>
<p>　　虽然我这边做的技术调整并不复杂，但是调整也是需求花时间的。</p>
<p>　　若遇到复杂情况，调整整个技术方案，那将是巨大的浪费，之前有个需求，就是因为调整了多次方案导致持续一年才上线。</p>
<p>　　所以说，遇到一个简陋需求，要主动去引导提需求的人完善细节，然后做足需求和技术的前期准备，避免不必要的返工和调整。</p>
<p><span style="font-size: 16px"><strong>&nbsp;2）眼见为实</strong></span></p>
<p>　　当需求描述比较模糊或比较复杂时，一定要做出个实物让人能看到，而不是靠嘴说。</p>
<p>　　靠嘴说总会出现偏差，导致最后的返工。而实物不一定要可操作的程序，可以是一张图，一张表等等。</p>
<p>　　只要能将问题描述清楚，所有人能达成共识就行了。</p>
<p>　　只有在大家眼睛看到了后，才能感同身受，不然就是盲人摸象，各有各的理解。</p>
<p><span style="font-size: 16px"><strong>3）团队意识</strong></span></p>
<p>　　在找工作时，招聘条件中经常会有一条叫要有团队意识。</p>
<p>　　我觉得不给别的组增加工作量，就是团队意识的一种体现，即不给别人添麻烦。</p>
<p>　　团队意识这个问题不是发生在我们组，是隔壁组，当时有个需求改动。</p>
<p>　　然后周四下午明确了技术方案，新的需求采用新接口新的数据库表，老的功能全部沿用不变。</p>
<p>　　结果周五下午，测试开始工作时，发现老的功能都受了影响，大大增加了她的工作量，翻了几倍。</p>
<p>　　本来只要测试新的需求即可，但是现在要连同老功能一起测试，当天晚上，她还要加班验收。</p>
<p>　　这对于我们团队也是个警示，确认好方案后，不要随意变动，若会影响其他团队，要及时同步。</p>
<p><span style="font-size: 16px"><strong>4）npm删除stylus</strong></span></p>
<p>　　周三下午发生了件突发事故。</p>
<p>　　测试环境的一个项目在发布后突然不能启动了，排查发现是 <span style="color: rgba(51, 102, 255, 1)"><a href="https://www.npmjs.com/package/stylus?activeTab=readme" target="_blank" rel="noopener nofollow"><span style="color: rgba(51, 102, 255, 1)">stylus</span></a></span> 被 npm 平台删除了。</p>
<p>　　<img src="https://img2024.cnblogs.com/blog/211606/202507/211606-20250723162148132-454361704.png" width="800"></p>
<p>　　找到 stylus 的 Github 主页，在 issues 的第一条置顶中找到了<span style="color: rgba(51, 102, 255, 1)"><a href="https://github.com/stylus/stylus/issues/2938" target="_blank" rel="noopener nofollow"><span style="color: rgba(51, 102, 255, 1)">解决方案</span></a></span>。</p>
<p>　　就是切换下载的源地址，从 npm 切换到 Github 中，package.json 参考：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">{
  </span>"dependencies"<span style="color: rgba(0, 0, 0, 1)">: {
    </span>"stylus": "github:stylus/stylus#0.54.4"<span style="color: rgba(0, 0, 0, 1)">
  }
}</span></pre>
</div>
<p>　　yarn 打包的，也是在 package.json 修改，参考：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">{
  </span>"resolutions"<span style="color: rgba(0, 0, 0, 1)">: {
    </span>"stylus": "github:stylus/stylus#0.54.4"<span style="color: rgba(0, 0, 0, 1)">
  }
}</span></pre>
</div>
<h1>二、工作优化</h1>
<p><strong style="font-size: 16px">1）埋点引起的4个问题</strong></p>
<p>　　在本次的年终盛典活动中，有两张页面是直接在后台界面配置生成的。</p>
<p>　　当时就觉得不会有问题，但没想到在运营要埋点数据时，却出现了 4 个问题。</p>
<p>　　第一个问题是，他们不知道看板在哪里，问数据组的人，她居然也不知道，后面只能反查数据库表去搜索。</p>
<p>　　第二个问题是，有个产品知道看板在哪里，但是点进去是空白的，原来从去年 10 月份开始，看板就异常了，但居然没人上报反馈。</p>
<p>　　第三个问题是，有一张页面的埋点没有入库，排查后发现是因为有个值不符合入库规则，那马上就修复了传送规则。</p>
<p>　　由此就引出了第四个问题，由于是后台生成的页面，所以没有引起注意，埋点也就没有让 QA 验收，流程上的漏洞导致没有发现埋点问题。</p>
<p>　　在未来，无论是手写还是生成的，都要验收埋点。</p>
<p>　　其他项目也是的，很多细节还是要打磨推敲，避免遗漏。</p>
<p><span style="font-size: 16px"><strong>2）需求更改流程优化</strong></span></p>
<p>　　当业务或产品在开发的过程中，提出业务的修改时，一定要引起警惕。</p>
<p>　　很多时候，他只是说了简单的一句话，但是真做起来却要触发很多联动。</p>
<p>　　所以，最科学的方法是让相关人员补齐需求文档，然后任何改动都要同步给测试组。</p>
<p>　　若与服务端或其他端有关，也要一并同步，各组之间要达成共识。</p>
<p>　　在拿到改动的文档后，再各自评估改动的成本，然后计算风险，再决定改不改。</p>
<p>　　上来就干，就会有很多项目风险隐患，还可能会影响其它项目的进度。</p>
<p>　　上个月有个短剧的需求，运营在群里说增加个多语言的功能，没通知产品，服务端就开干了。</p>
<p>　　干到后面才发现搞定不了，需要客户端介入，增加了几天的工作量。</p>
<p>　　最后才通知到产品，产品认为这个功能可以先不做，运营也没有强求。</p>
<p>　　如果按流程来，那么这个需求都不用开始，也不必耗费人力在此处。</p>
<p><span style="font-size: 16px"><strong>3）管理后台分离</strong></span></p>
<p>　　公司有两个产品，当年两个产品的后台设计在了一个项目中，随着时间的推移，项目变得越来越庞大。</p>
<p>　　每次在代码发布时，构建都会消耗不少时间，于是就想到了优化。</p>
<p>　　那这个时候其实有很多方法可供选择，例如拆分成两个独立的后台，但如此一来，公共代码也要拆分成两份维护。</p>
<p>　　或者采用微前端技术，剥离一个项目出来，不过有一定的开发成本。</p>
<p>　　在观察后发现，构建会根据路由文件来，如果路由文件中没有声明，那么就不会将此文件纳入构建流程中。</p>
<p>　　于是声明了两份路由文件，大家维护各自的路由。</p>
<p>　　公司采用的是 umi3.0 框架，在执行和构建两个命令中增加一个自定义的环境变量来区分。</p>
<div class="cnblogs_code">
<pre>  "scripts"<span style="color: rgba(0, 0, 0, 1)">: {
    </span>"start": "umi dev"<span style="color: rgba(0, 0, 0, 1)">,
    </span>"start2": "THEME=fj umi dev"<span style="color: rgba(0, 0, 0, 1)">,
    </span>"build": "umi build"<span style="color: rgba(0, 0, 0, 1)">,
    </span>"build2": "THEME=fj umi build"<span style="color: rgba(0, 0, 0, 1)">,
  },</span></pre>
</div>
<p>　　在 .umirc.js 配置文件中，就能根据此变量来引入合适的路由。</p>
<div class="cnblogs_code">
<pre>import routes from './src/routes'<span style="color: rgba(0, 0, 0, 1)">;
import routes2 from </span>'./src/routes-fj'<span style="color: rgba(0, 0, 0, 1)">;
const { THEME } </span>=<span style="color: rgba(0, 0, 0, 1)"> process.env;
export </span><span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)"> {
  define: {
    </span>'process.env'<span style="color: rgba(0, 0, 0, 1)">: {
      THEME
    }
  },
  routes: (THEME </span>=== 'fj' ?<span style="color: rgba(0, 0, 0, 1)"> routes2 : routes),
}</span></pre>
</div>
<p>　　在完成路由构建后，前后的代码发布总时间减少了 3 分钟以上。</p>
<p>　　经过一个月左右的时间，陆续将测试、预发和生产的三个发布流水线部署完成。</p>
<p>　　当然，在改造的过程中，也会遇到些问题，例如菜单的显示。</p>
<p>　　路由分离后，需要根据当前环境在展示相应的菜单，而不是像以前那样展示所有。</p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

	<div class="postDesc"><img src="/skins/gray/images/speech.gif" align="absmiddle">&nbsp;posted on 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-28 10:25">2025-07-28 10:25</span>&nbsp;
<a href="https://www.cnblogs.com/strick">咖啡机（K.F.J）</a>&nbsp;
阅读(<span id="post_view_count">41</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18663712);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18663712', targetLink: 'https://www.cnblogs.com/strick/p/18663712', title: '带团队后的日常思考（十七）' })">举报</a>
</div>
