
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/rainbond/p/18662798" title="发布于 2025-01-09 19:32">
    <span role="heading" aria-level="2">还不会 Cert Manager 自动签发证书？一文掌握</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>相信很多小伙伴对于 Cert Manager 不陌生，Cert Manager 是 Kubernetes 上的证书管理工具，基于 <a href="https://tools.ietf.org/html/rfc8555" target="_blank" rel="noopener nofollow">ACME</a> 协议与 <a href="https://letsencrypt.org/" target="_blank" rel="noopener nofollow">Let's Encrypt</a> 签发免费证书并为证书自动续期，实现永久免费使用证书。</p>
<p>本文将介绍如何使用 Cert Manager 实现自动签发证书并与 Rainbond 结合使用。</p>
<h2 id="cert-manager-概述">Cert Manager 概述</h2>
<h3 id="工作机制概述">工作机制概述</h3>
<p>在将 Cert Manager 部署到 Kubernetes 集群后，可以通过创建支持的自定义资源 CRD 来实现证书的签发和自动续期功能。以下是 Cert Manager 的工作机制概览：</p>
<p><img src="https://cert-manager.io/images/high-level-overview.svg" alt="" loading="lazy"></p>
<p><code>Issuer</code> 是 Cert Manager 用于定义证书签发方式的资源类型。它支持以下多种证书颁发机构：</p>
<ul>
<li>Let's Encrypt：广泛使用的免费证书颁发机构，支持 ACME 协议。</li>
<li>HashiCorp Vault：适用于企业级密钥管理和证书签发。</li>
<li>Venafi：支持企业环境中更复杂的证书管理需求。</li>
<li>自签发证书：适合内部使用场景。</li>
</ul>
<p><code>Certificate</code> 是 Cert Manager 的核心资源之一，用于定义需要签发的域名证书及其相关配置。它包含以下关键信息：</p>
<ul>
<li>域名信息：需要绑定证书的具体域名。</li>
<li>配置参数：指定签发证书所需的额外信息，例如有效期、密钥长度等。</li>
<li>Issuer 的引用：关联到某个具体的 <code>Issuer</code> 或 <code>ClusterIssuer</code>。</li>
</ul>
<p><code>Secrets</code> 是 Kubernetes 的资源对象，签发完成的证书最终会存储在 <code>Secrets</code> 中，供其他组件引用。</p>
<h3 id="证书签发概述">证书签发概述</h3>
<p>本文使用 Let’s Encrypt 作为证书颁发机构，Let’s Encrypt 利用 ACME 协议校验域名的归属，校验成功后可以自动颁发免费证书。免费证书有效期只有90天，默认情况下 Cert Manager 会在证书到期前30天自动续期，即实现永久使用免费证书。校验域名归属的两种方式分别是 <code>HTTP-01</code> 和 <code>DNS-01</code>。</p>
<p><strong>HTTP-01</strong>：通过向域名的 HTTP 服务发送请求验证域名归属，适用于使用 Ingress 暴露流量的服务，但不支持泛域名证书。Cert Manager 会动态创建或修改 Ingress 规则，添加临时路径以响应 Let’s Encrypt 的验证请求。验证通过后颁发证书。</p>
<p><strong>DNS-01</strong>：通过在 DNS 提供商处添加 TXT 记录验证域名归属，支持泛域名证书且无需 Ingress。Cert Manager 使用 DNS 提供商的 API 自动更新记录。Let’s Encrypt 查询 TXT 记录后完成验证并颁发证书。</p>
<h3 id="校验方式对比">校验方式对比</h3>
<table>
<thead>
<tr>
<th>特性</th>
<th>HTTP-01</th>
<th>DNS-01</th>
</tr>
</thead>
<tbody>
<tr>
<td>是否依赖 Ingress</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>是否支持泛域名</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>配置难度</td>
<td>简单，适用于所有 DNS 提供商</td>
<td>配置复杂，依赖 DNS 提供商的 API 支持</td>
</tr>
<tr>
<td>典型适用场景</td>
<td>仅服务通过 Ingress 暴露流量</td>
<td>需要泛域名证书或无 Ingress 的服务</td>
</tr>
</tbody>
</table>
<h2 id="部署-cert-manager-和-rainbond">部署 Cert Manager 和 Rainbond</h2>
<p>使用 Helm 安装 Cert Manager，更多请参考<a href="https://cert-manager.io/docs/installation/" target="_blank" rel="noopener nofollow">Cert Manager 部署文档</a>。</p>
<pre><code class="language-bash">$ helm repo add jetstack https://charts.jetstack.io
$ helm install \
  cert-manager jetstack/cert-manager \
  --namespace cert-manager \
  --create-namespace \
  --version v1.16.2 \
  --set crds.enabled=true
</code></pre>
<p>执行以下命令，<a href="http://localhost:3000/docs/quick-start/quick-install" target="_blank" rel="noopener nofollow">快速安装 Rainbond</a>。</p>
<pre><code class="language-bash">curl -o install.sh https://get.rainbond.com &amp;&amp; bash ./install.sh
</code></pre>
<h3 id="创建-issuer">创建 Issuer</h3>
<p><a href="https://cert-manager.io/docs/configuration/acme/http01/" target="_blank" rel="noopener nofollow">Issuer</a> 是 Cert Manager 的核心资源，用于定义证书的签发方式和配置。以下是一个示例，使用 <strong>HTTP-01</strong> 校验方式结合 <code>Ingress</code> 签发证书。</p>
<pre><code class="language-yaml">$ kubectl apply -f issuer.yaml
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: issuer                 # Issuer 的名称
  namespace: default           # 所在的命名空间
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory  # Let's Encrypt 的生产环境 ACME 服务地址
    privateKeySecretRef:
      name: issuer-account-key   # 保存 ACME 私钥的 Kubernetes Secret
    solvers:                     # 域名校验方式
    - http01:
        ingress:
          ingressClassName: apisix  # 使用 APISIX 作为 Ingress 控制器
</code></pre>
<h3 id="创建-certificate">创建 Certificate</h3>
<p><a href="https://cert-manager.io/docs/usage/certificate/" target="_blank" rel="noopener nofollow">Certificate</a> 是 Cert Manager 的核心资源之一，用于指定需要签发的域名证书及其相关配置。以下是一个完整的配置示例，结合前面创建的 <code>Issuer</code>，为指定域名自动签发和续期证书。</p>
<p>以下 YAML 文件创建了一个 <code>Certificate</code> 资源，为域名 <code>test.rainbond.com</code> 签发证书：</p>
<pre><code class="language-yaml">$ kubectl apply -f certificate.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: test-rainbond-com # Certificate 资源的名称
  namespace: default      # 所在的命名空间
spec:
  dnsNames:
  - test.rainbond.com     # 需要绑定证书的域名
  issuerRef:
    kind: Issuer          # 引用的 Issuer 类型
    name: issuer          # 引用的 Issuer 名称
  secretName: test-rainbond-com-tls # 存储签发的证书和私钥的 Secret 名称
</code></pre>
<h3 id="获取和查看证书">获取和查看证书</h3>
<p>创建 <code>Certificate</code> 后，可以通过以下步骤检查签发状态并获取证书内容：</p>
<ol>
<li>检查 Certificate 签发状态，使用 <code>kubectl get certificate</code> 命令查看 Certificate 的状态：</li>
</ol>
<pre><code class="language-bash">$ kubectl get certificate -n default
NAME                READY   SECRET                  AGE
test-rainbond-com   True    test-rainbond-com-tls   1m
</code></pre>
<ul>
<li>READY 为 <code>True</code>：表示证书签发成功。证书已保存在指定的 <code>Secret</code> 中。</li>
<li>READY 为 <code>False</code>：表示签发失败。需要进一步排查原因。</li>
</ul>
<ol start="2">
<li>排查签发失败原因，如果 <code>READY</code> 状态为 <code>False</code>，可以使用以下命令查看详细事件日志：</li>
</ol>
<pre><code class="language-bash">kubectl describe certificate test-rainbond-com -n default
</code></pre>
<p>日志中会显示失败的原因，例如域名校验失败、配置错误或 Issuer 不可用。</p>
<ol start="3">
<li>查看生成的 Secret，当 <code>READY</code> 状态为 <code>True</code> 时，证书和密钥将保存在指定的 Secret 中。可以通过以下命令查看：</li>
</ol>
<pre><code class="language-bash">$ kubectl get secret test-rainbond-com-tls -n default
NAME                   TYPE                DATA   AGE
test-rainbond-com-tls  kubernetes.io/tls  2      1m
</code></pre>
<ul>
<li><code>tls.crt</code>: 证书内容。</li>
<li><code>tls.key</code>: 证书对应的私钥。</li>
</ul>
<ol start="4">
<li>获取具体证书和密钥内容，使用以下命令查看或提取证书和私钥内容：</li>
</ol>
<pre><code>$ kubectl get secret test-rainbond-com-tls -n default -o yaml
apiVersion: v1
kind: Secret
metadata:
  name: test-rainbond-com-tls
  namespace: default
data:
  tls.crt: &lt;base64 encoded certificate&gt;
  tls.key: &lt;base64 encoded private key&gt;
</code></pre>
<p>可以使用 <code>base64</code> 解码证书内容：</p>
<pre><code class="language-bash">echo "&lt;base64 encoded certificate&gt;" | base64 -d
</code></pre>
<h2 id="在-rainbond-中使用证书">在 Rainbond 中使用证书</h2>
<p>Rainbond v6 版本采用 APISIX 作为默认的 Ingress 控制器，通过配置 <code>ApisixTls</code> 资源即可轻松绑定证书，APISIX 会根据网关中的域名自动匹配对应的证书。</p>
<pre><code class="language-yaml">$ kubectl apply -f tls.yaml
apiVersion: apisix.apache.org/v2
kind: ApisixTls
metadata:
  name: test-rainbond-com       # 资源名称
  namespace: default            # 所在命名空间
spec:
  hosts:
  - test.rainbond.com           # 绑定的域名
  ingressClassName: apisix      # 指定 Ingress 类名
  secret:
    name: test-rainbond-com-tls # 引用存储证书的 Secret 名称
    namespace: default          # 引用的 Secret 所在命名空间
</code></pre>
<h3 id="添加路由">添加路由</h3>
<p>在 Rainbond 页面上添加网关路由。进入网关管理 &gt; 路由设置，创建一个新的路由，填写域名（如 <code>test.rainbond.com</code>）并完成路由配置。</p>
<p>Rainbond 会自动检测网关路由的域名是否与 <code>ApisixTls</code> 中的 <code>hosts</code> 匹配。如果匹配成功，将自动为该域名启用 HTTPS，并绑定对应的证书。</p>
<h2 id="最后">最后</h2>
<p>通过本文的介绍，我们详细了解了如何使用 Cert Manager 在 Kubernetes 中实现证书的自动签发与续期，并将其与 Rainbond 集成。Cert Manager 的灵活性与 Rainbond 的易用性结合，可以大大简化 HTTPS 的部署流程，为服务提供安全性保障。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.04083565975694444" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-09 19:33">2025-01-09 19:32</span>&nbsp;
<a href="https://www.cnblogs.com/rainbond">Rainbond开源</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18662798" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18662798);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18662798', targetLink: 'https://www.cnblogs.com/rainbond/p/18662798', title: '还不会 Cert Manager 自动签发证书？一文掌握' })">举报</a>
</div>
        