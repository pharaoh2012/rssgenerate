
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/uzuki/p/18744303" title="发布于 2025-02-28 23:07">
    <span role="heading" aria-level="2">Vulkan环境配置 | vscode+msvc 解决方案</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="vulkan环境配置--vscodemsvc-解决方案">Vulkan环境配置 | vscode+msvc 解决方案</h1>
<h2 id="前言">前言</h2>
<p>如果作为Windows 11侠的你是一个vscode爱好者，凑巧电脑上还安装有Visual Studio，这个时候你突然想配置一个Vulkan开发环境。作为minimalist的你可不希望在电脑上安装任何额外的组件，那么这篇安装指南一定适合你。</p>
<h2 id="准备工作">准备工作</h2>
<p>你需要确保你的环境都已经有下列程序：</p>
<ul>
<li>Visual Studio Community 2019或者2022（2017还没试过，应该也可以）</li>
<li>vscode</li>
</ul>
<h3 id="安装msvc">安装MSVC</h3>
<p>a.首先打开Visual Studio Installer，点击修改：</p>
<p><img src="https://img2024.cnblogs.com/blog/1887071/202502/1887071-20250228230045895-1440895063.png" alt="" loading="lazy"></p>
<p>in case 你不知道Visual Studio Installer怎么打开</p>
<p><img src="https://img2024.cnblogs.com/blog/1887071/202502/1887071-20250228230122511-236602309.png" alt="" loading="lazy"></p>
<p>b.勾选上MSVC x64/x86生成工具，并点击右下角的修改，Visual Studio Installer会自动下载并安装</p>
<p><img src="https://img2024.cnblogs.com/blog/1887071/202502/1887071-20250228230214639-2058341168.png" alt="" loading="lazy"></p>
<p>c.安装完毕之后，打开开始，搜索x64 Native Tools Command Prompt for VS 2019，打开并键入 <code>cl</code></p>
<p>如果你的命令行有如下输出，说明你已经正确安装MSVC了</p>
<p><img src="https://img2024.cnblogs.com/blog/1887071/202502/1887071-20250228230236246-335037074.png" alt="" loading="lazy"></p>
<h3 id="下载并安装vulkan-sdk">下载并安装Vulkan SDK</h3>
<p>a.打开https://vulkan.lunarg.com/sdk/home#windows，选择最新版的SDK并下载安装：</p>
<p><img src="https://img2024.cnblogs.com/blog/1887071/202502/1887071-20250228230316077-663003782.png" alt="" loading="lazy"></p>
<p>b.打开环境变量，如果你能看到这些环境变量，说明你已经正确安装了Vulkan SDK</p>
<p><img src="https://img2024.cnblogs.com/blog/1887071/202502/1887071-20250228230358336-529434706.png" alt="" loading="lazy"></p>
<p>除此之外还可以在开始菜单打开Vulkan Cube例程进行验证：</p>
<p><img src="https://img2024.cnblogs.com/blog/1887071/202502/1887071-20250228230414247-191122035.png" alt="" loading="lazy"></p>
<h3 id="下载glfw与glm">下载GLFW与GLM</h3>
<p>GLFW用于Vulkan的窗口显示（除非你想做off screen渲染，或者直接用Windows提供的窗口接口），GLM用于Vulkan中的线性代数运算</p>
<p>从https://www.glfw.org/与https://github.com/g-truc/glm下载两个库并解压到一个文件夹中：</p>
<p><img src="https://img2024.cnblogs.com/blog/1887071/202502/1887071-20250228230426040-1779629127.png" alt="" loading="lazy"></p>
<h2 id="配置vscode开发环境">配置vscode开发环境</h2>
<p>a.为了方便在不同设备上进行开发，首先打开环境变量，新建如下变量并保存</p>
<p>VCVARS64（找到你的Visual Studio路径并填入）</p>
<p><img src="https://img2024.cnblogs.com/blog/1887071/202502/1887071-20250228230443808-337930530.png" alt="" loading="lazy"></p>
<p>GLFW_SDK与GLM_SDK（填入你上一步将GLFW与GLM解压的目标路径）</p>
<p><img src="https://img2024.cnblogs.com/blog/1887071/202502/1887071-20250228230452008-755332574.png" alt="" loading="lazy"></p>
<p>这样，当你把项目同步到不同的设备上进行开发时只需要重新配置这三个环境变量而不需要改动项目本身了</p>
<p>b.我们配置编译使用的批处理命令，接下来打开vscode，新建一个项目，并在其中新建一个bat文件，名为<code>build.bat</code>，填入如下内容并保存：</p>
<pre><code class="language-bat">@echo off
call "%VCVARS64%"

SET includes=/Isrc /I%VULKAN_SDK%/Include /I%GLFW_SDK%/include /I%GLM_SDK%
SET links=/link /LIBPATH:%VULKAN_SDK%/Lib /LIBPATH:%GLFW_SDK%/lib-vc2019 vulkan-1.lib glfw3_mt.lib user32.lib gdi32.lib shell32.lib
SET defines=/D DEBUG
SET standard=/std:c++17
SET optim=/O2

echo "Building main..."
cl /EHsc %standard% %optim% %includes% %defines% src/main.cpp %links% 
</code></pre>
<p>注意，<code>/LIBPATH:%GLFW_SDK%/lib-vc2019</code>这一项改成你所安装的Viusal Studio所对应的版本</p>
<p>由于GLM本身只有头文件，因此不需要在编译过程进行链接</p>
<p>（Optional）如果你希望运行过程进行动态链接的话，在Path中添加GLFW库的路径</p>
<p><img src="https://img2024.cnblogs.com/blog/1887071/202502/1887071-20250228230510073-1724330695.png" alt="" loading="lazy"></p>
<p>并将<code>build.bat</code>的第四行改为：</p>
<p><code>SET links=/link /LIBPATH:%VULKAN_SDK%/Lib /LIBPATH:%GLFW_SDK%/lib-vc2019 vulkan-1.lib glfw3dll.lib</code></p>
<p>c.接下来我们配置编译与debug的设定，新建一个文件夹名为<code>.vscode</code></p>
<p>在其中新建一个文件名为<code>tasks.json</code>，并填入如下内容：</p>
<pre><code class="language-json">{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Windows Build",
            "command": "${workspaceFolder}/build.bat",
            "group": {
                "kind": "build",
                "isDefault": true
            }
        }
    ]
}
</code></pre>
<p>在其中新建一个文件名为<code>launch.json</code>，并填入如下内容：</p>
<pre><code class="language-json">{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Windows Launch",
            "program": "${workspaceFolder}\\main.exe",
            "type": "cppvsdbg",
            "request": "launch",
            "cwd": "${workspaceFolder}",
            "logging": {
                "moduleLoad": false
            },
        }
    ]
}
</code></pre>
<p>d.最后再配置vscode开发的语法高亮</p>
<p>首先打开exntension，确保你已经下载了开发C/C++所需要的extension了</p>
<p><img src="https://img2024.cnblogs.com/blog/1887071/202502/1887071-20250228230522721-1778017680.png" alt="" loading="lazy"></p>
<p>打开File -&gt; Preferences -&gt; Setting，点击Workspace</p>
<p>在Include Path这里分别加上</p>
<p><code>"C:\\Program Files\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.42.34433\\include",</code></p>
<p><code>"${GLFW_SDK}\\include",</code></p>
<p><code>"${GLM_SDK}",</code></p>
<p><code>"${workspaceFolder}\\src",</code></p>
<p><code>"${VULKAN_SDK}\\Include"</code></p>
<p><img src="https://img2024.cnblogs.com/blog/1887071/202502/1887071-20250228230534462-1537621661.png" alt="" loading="lazy"></p>
<p>这样，你就已经完成了对vulkan开发环境的配置了。</p>
<h2 id="编译与运行">编译与运行</h2>
<p>a.首先新建一个文件，路径为<code>src/main.cpp</code>，填入以下内容并保存：</p>
<pre><code class="language-cpp">#define GLFW_INCLUDE_VULKAN
#include &lt;GLFW/glfw3.h&gt;

#define GLM_FORCE_RADIANS
#define GLM_FORCE_DEPTH_ZERO_TO_ONE
#include &lt;glm/vec4.hpp&gt;
#include &lt;glm/mat4x4.hpp&gt;

#include &lt;iostream&gt;

int main() {
    glfwInit();

    glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);
    GLFWwindow* window = glfwCreateWindow(800, 600, "Vulkan window", nullptr, nullptr);

    uint32_t extensionCount = 0;
    vkEnumerateInstanceExtensionProperties(nullptr, &amp;extensionCount, nullptr);

    std::cout &lt;&lt; extensionCount &lt;&lt; " extensions supported\n";

    glm::mat4 matrix;
    glm::vec4 vec;
    auto test = matrix * vec;

    while(!glfwWindowShouldClose(window)) {
        glfwPollEvents();
    }

    glfwDestroyWindow(window);

    glfwTerminate();

    return 0;
}
</code></pre>
<p>使用快捷键<code>ctrl+shift+B</code>进行代码编译，编译成功之后按<code>F5</code>进行debug运行，控制台输出如下内容说明你的开发环境已经配置成功：</p>
<p><img src="https://img2024.cnblogs.com/blog/1887071/202502/1887071-20250228230543749-171285705.png" alt="" loading="lazy"></p>
<h2 id="代码">代码</h2>
<p>如果你希望获取代码的话，可以从https://github.com/Uzukidd/vulkan-tutorial直接进行clone</p>
<h2 id="引用">引用</h2>
<p><a href="https://vulkan-tutorial.com/Drawing_a_triangle/Setup/Validation_layers" target="_blank" rel="noopener nofollow">Vulkan Tutorial</a></p>
<p><a href="https://youtu.be/tRQ3zqCiKdQ?si=VBA6jiciYnOIZ9vo" target="_blank" rel="noopener nofollow">C++ Vulkan Engine | Development Setup</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.7162199146006945" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-28 23:07">2025-02-28 23:07</span>&nbsp;
<a href="https://www.cnblogs.com/uzuki">Uzuki</a>&nbsp;
阅读(<span id="post_view_count">35</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18744303" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18744303);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18744303', targetLink: 'https://www.cnblogs.com/uzuki/p/18744303', title: 'Vulkan环境配置 | vscode+msvc 解决方案' })">举报</a>
</div>
        