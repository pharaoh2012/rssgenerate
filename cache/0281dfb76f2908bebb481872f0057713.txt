
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/deali/p/18775970" title="发布于 2025-03-16 23:29">
    <span role="heading" aria-level="2">DeepSeek+Claude强强联手，使用AI驱动DjangoStarter 3.1框架升级</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>上个月底培训了一周就没时间更新博客</p>
<p>上周有一些空闲时间，就继续体验最近很火的AI辅助编程</p>
<p>之前的文章中有说到我配置好了 VSCode + Cline 插件搭配本地部署的 DeepSeek 来实现AI辅助编程</p>
<blockquote>
<p>参考: <a href="https://www.cnblogs.com/deali/p/18695714" target="_blank">开发者新选择：用DeepSeek实现Cursor级智能编程的免费方案</a></p>
</blockquote>
<p>但 Cline 插件消耗 token 太快了，换本地部署的 DeepSeek 的话不够聪明</p>
<p>我后面又换了 RooCode 、 Continue 这俩插件，还有试了一下新的IDE Trae</p>
<p>用下来 RooCode 还不错，这是 Cline 的 fork 版本，功能多了一些，消耗 Token 数量我没去统计，感觉可能差不多</p>
<p>大模型服务我选择了购买 DeepSeek 和 Claude 的 API</p>
<p>Trae 胜在免费，不过国内外区别对待是有点让人难受的</p>
<p>最终我在 Claude 和 DeepSeek 的辅助下，完成了 DjangoStarter 3.1 版本的开发</p>
<h2 id="关于-djangostarter">关于 DjangoStarter</h2>
<p>DjangoStarter v3 是下一代 Django 项目快速开发模板，专为提升开发效率和性能而设计。</p>
<p>结合了 Django 的丰富功能和 Django-Ninja 的性能、灵活、简洁特性，v3 版本旨在为开发者提供一个更加强大、简洁和高速的开发体验。</p>
<p>通过这个全新的框架版本，开发者能够迅速搭建起符合现代 web 应用标准的项目基础架构。</p>
<p>之前我写了一篇文章专门介绍这个v3版本，这里就不赘述了。</p>
<p>感兴趣的同学可以查看: <a href="https://www.cnblogs.com/deali/p/18237621" target="_blank">关于正在开发中的DjangoStarter v3版本</a></p>
<h2 id="重构界面">重构界面</h2>
<p>本次最大的改变就是使用 Tailwind CSS 取代了原本的 Bootstrap，并且加入了很多新的页面，比如用户中心、设置、关于、联系我们、登录、注册、用户协议等，基本就是往 CMS 的方向走。</p>
<p>我甚至一度想引入 wagtail ，不过后面想想还是算了，已经够重了，等下完全和小项目不沾边，哈哈哈😄</p>
<h2 id="国际化支持-beta">国际化支持 (beta)</h2>
<p>这次还添加了国际化支持</p>
<p>Django 本身是有国际化功能的</p>
<p>只不过很多项目都去除了</p>
<p>这次我加入了国际化支持，不过只是测试版，只是添加了支持，翻译部分我还没做好，所以也就还没把切换语言的按钮加上。</p>
<p>以下是一些国际化功能的用法</p>
<h2 id="在模板里">在模板里</h2>
<pre><code class="language-django">{% translate 'Home' %}
</code></pre>
<h3 id="在python代码里">在python代码里</h3>
<pre><code class="language-python">from django.utils.translation import gettext_lazy as _

print(_('hello'))
</code></pre>
<h3 id="生成翻译文件">生成翻译文件</h3>
<p>在 <code>src</code> 目录下执行</p>
<pre><code class="language-bash">django-admin makemessages -l [language_code]
</code></pre>
<p>language_code:</p>
<ul>
<li>zh_HAns</li>
<li>en_US</li>
</ul>
<p>其他语言可以参考Django官网</p>
<h3 id="编译消息文件">编译消息文件</h3>
<p>依然是在 <code>src</code> 目录下执行</p>
<pre><code class="language-bash">django-admin compilemessages
</code></pre>
<h3 id="windows-开发环境">Windows 开发环境</h3>
<p>如果是使用 windows 开发，需要先安装 <code>gettext</code> 工具</p>
<p>推荐使用 scoop 包管理器</p>
<pre><code class="language-bash">scoop install gettext
</code></pre>
<p>安装完成之后，执行以下命令验证</p>
<pre><code class="language-bash">xgettext --version
</code></pre>
<h2 id="部分界面截图">部分界面截图</h2>
<h3 id="旧版主页">旧版主页</h3>
<p>先来看看旧版的主页长什么样</p>
<p><img src="https://img2024.cnblogs.com/blog/866942/202503/866942-20250316232232483-150474188.png" alt="" loading="lazy"></p>
<h3 id="新版主页">新版主页</h3>
<p>新的界面使用 Tailwind CSS 重构，好看了很多</p>
<p><img src="https://img2024.cnblogs.com/blog/866942/202503/866942-20250316232242885-1324194229.png" alt="" loading="lazy"></p>
<p>底部也是可以配置的</p>
<p><img src="https://img2024.cnblogs.com/blog/866942/202503/866942-20250316232252300-333474931.png" alt="" loading="lazy"></p>
<h3 id="关于">关于</h3>
<p>这个页面做了很多动效，可以看看后面的动图</p>
<p><img src="https://img2024.cnblogs.com/blog/866942/202503/866942-20250316232310745-388604460.png" alt="" loading="lazy"></p>
<p>动效是用AOS做的，感觉还不错，挺方便的，不过要注意得使用 3.0 的 beta 版本，一开始没注意遇到了不少坑。</p>
<p><img src="https://img2024.cnblogs.com/blog/866942/202503/866942-20250316232358373-899327767.gif" alt="" loading="lazy"></p>
<h3 id="联系我们">联系我们</h3>
<p>这些联系方式都是可以配置的</p>
<p><img src="https://img2024.cnblogs.com/blog/866942/202503/866942-20250316232430567-297100368.png" alt="" loading="lazy"></p>
<p>表单也用上了 DjangoStarter 新版封装好的 BaseModelForm</p>
<p><img src="https://img2024.cnblogs.com/blog/866942/202503/866942-20250316232439369-1523892867.png" alt="" loading="lazy"></p>
<p>封装好的 BaseModelForm 用起来是这样</p>
<pre><code class="language-python">class ContactModelForm(BaseModelForm):
    class Meta:
        model = Contact
        fields = ('name', 'email', 'phone', 'message')
        widgets = {
            'name': forms.TextInput(attrs={'placeholder': '请输入您的姓名'}),
            'email': forms.EmailInput(attrs={'placeholder': '请输入您的邮箱'}),
            'phone': forms.TextInput(attrs={'placeholder': '请输入您的联系电话'}),
            'message': forms.Textarea(attrs={'placeholder': '请输入您的留言内容', 'rows': 4})
        }
</code></pre>
<h3 id="登录注册">登录/注册</h3>
<p>这个登录页面是之前使用 wagtail 那个项目里面搬过来的</p>
<p><img src="https://img2024.cnblogs.com/blog/866942/202503/866942-20250316232449048-59338338.png" alt="" loading="lazy"></p>
<p>注册页面也是类似的，这里就不贴图片了</p>
<h3 id="个人中心">个人中心</h3>
<p>个人中心这里的布局来自之前的 TodayTV 项目，不过原来也是从其他在线模板参考来的，界面不是很好看。</p>
<p>然而我用 Claude 3.5 和 DeepSeek R1 反复优化多次，仍然无法让我满意，而且代码越来越乱，感觉后面还是得自己来改。</p>
<p><img src="https://img2024.cnblogs.com/blog/866942/202503/866942-20250316232506493-1500544533.png" alt="" loading="lazy"></p>
<p>下面的关于我</p>
<p><img src="https://img2024.cnblogs.com/blog/866942/202503/866942-20250316232517086-1107017246.png" alt="" loading="lazy"></p>
<h3 id="修改资料">修改资料</h3>
<p>这也是从 TodayTV 项目来的，搭配 Django Forms 实现出来的效果还可以。</p>
<p><img src="https://img2024.cnblogs.com/blog/866942/202503/866942-20250316232529732-174226641.png" alt="" loading="lazy"></p>
<h3 id="隐私政策">隐私政策</h3>
<p>这个是用 Claude 生成的，使用 RooCode 优化的提示词，看着有模有样的。</p>
<p><img src="https://img2024.cnblogs.com/blog/866942/202503/866942-20250316232541109-392151545.png" alt="" loading="lazy"></p>
<p>服务条款也是类似的，这里我就不截图了。</p>
<h3 id="demo页面">Demo页面</h3>
<p>为了方便演示各种功能，我还新增了Demo页面</p>
<p>当然这个不太协调的页面是 AI 辅助布局的</p>
<p><img src="https://img2024.cnblogs.com/blog/866942/202503/866942-20250316232552559-837565301.png" alt="" loading="lazy"></p>
<h3 id="错误页面">错误页面</h3>
<p>并且用 Claude 生成了几个错误页面</p>
<p>包括403、404、500页面，都是类似的，这里我只贴403页面的截图</p>
<p><img src="https://img2024.cnblogs.com/blog/866942/202503/866942-20250316232651272-1787945035.png" alt="" loading="lazy"></p>
<h2 id="解决了一个-issue">解决了一个 issue</h2>
<p><a href="https://github.com/Deali-Axy/DjangoStarter/issues/20" target="_blank" rel="noopener nofollow">https://github.com/Deali-Axy/DjangoStarter/issues/20</a></p>
<p>有用户反馈本来应该返回400的接口，实际返回了200</p>
<p>我看了之后发现这个问题属于是从DRF迁移到ninja的历史遗留问题</p>
<p>之前我在框架里封装 responses 用于快捷输出各种返回状态</p>
<pre><code class="language-python">def ok(message: str, data: Optional[dict] = None):
    return _gen_resp(message, data, 200)

def forbidden(message: str, data: Optional[dict] = None):
    return _gen_resp(message, data, 403)

def bad_request(message: str, data: Optional[dict] = None):
    return _gen_resp(message, data, 400)

def not_found(message: str, data: Optional[dict] = None):
    return _gen_resp(message, data, 404)
</code></pre>
<p>但现在 ninja 里，一直返回的都是 200，这个就是处理返回状态码的地方出问题。</p>
<p>有几种解决思路，反正原本我用重写 renderer 的方式是没办法的，renderer里没法定义返回值，只能改变相应内容。</p>
<p>要不就是用 django 中间件，但需要解析 JSON 会影响性能</p>
<p>最终我对 responses 进行了改造，新增了 <code>ResponseGenerator</code> 这个类，代码就不贴了</p>
<p>关键实现就是用了 ninja 的 <code>api.create_response</code> 这个方法可以指定 status code</p>
<p>在需要用到的地方，比如 src/apps/account/apis/auth/apis.py</p>
<pre><code class="language-python">router = Router(tags=['auth'])

_resp = ResponseGenerator(router=router)

@router.post('/register', url_name='account/auth/register')
def register(request, data: RegisterSchema):
    if User.objects.filter(username=data.username).exists():
        return _resp.bad_request(request, '用户名已存在！')

    if data.phone:
        phone_pattern = '^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$'
        if not re.match(phone_pattern, data.phone):
            return _resp.bad_request(request, '手机号码格式不对！')

        if UserProfile.objects.filter(phone=data.phone).exists():
            return _resp.bad_request(request, '手机号已存在！')

    if data.password != data.confirm_password:
        return _resp.bad_request(request, '密码不一致！')
</code></pre>
<p>相比起原来的，每个返回的响应需要添加 request 参数</p>
<p>虽然比起原来复杂一点，也算是搞定了。</p>
<h2 id="todos">Todos</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"><label> <a href="https://django-ninja.cn" target="_blank" rel="noopener nofollow">https://django-ninja.cn</a> 上有不少 ninja 周边生态组件，后续可以用上</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"><label> 将 admin 由 simpleui 切换到 unfold admin</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"><label> 增加更多的默认页面</label></li>
</ul>

</div>
<div id="MySignature" role="contentinfo">
    微信公众号：「程序设计实验室」
专注于互联网热门新技术探索与团队敏捷开发实践，包括架构设计、机器学习与数据分析算法、移动端开发、Linux、Web前后端开发等，欢迎一起探讨技术，分享学习实践经验。
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.8761875923055555" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-16 23:29">2025-03-16 23:29</span>&nbsp;
<a href="https://www.cnblogs.com/deali">程序设计实验室</a>&nbsp;
阅读(<span id="post_view_count">312</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18775970" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18775970);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18775970', targetLink: 'https://www.cnblogs.com/deali/p/18775970', title: 'DeepSeek+Claude强强联手，使用AI驱动DjangoStarter 3.1框架升级' })">举报</a>
</div>
        