
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/noear/p/18719650" title="发布于 2025-02-17 11:30">
    <span role="heading" aria-level="2">快速集成和使用 solon-flow 规则与流引擎（用 yaml 编写业务规则）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        solon-flow 是新的规则引擎技术，由 OpenSolon 开源组织提供的基于 Java 语言开发的开源规则引擎，可以将复杂且多变的业务规则从硬编码中解放出来，以 yaml 规则脚本的形式存放在文件或特定的存储介质中（例如数据库），使得业务规则的变更不需要修改项目代码、不需要重启服务器就可以立即生效。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>本文参考自：<a href="https://www.cnblogs.com/studyjobs/p/18125096" target="_blank">https://www.cnblogs.com/studyjobs/p/18125096</a></p>
<p>规则引擎技术的主要思想是将应用程序中的业务规则分离出来，业务规则不再以程序代码的形式驻留在系统中，而是存储在独立的文件或者数据库中，完全独立于程序。业务人员可以像管理数据一样对业务规则进行管理。业务规则在程序运行时被加载到规则引擎中供应用系统调用。</p>
<p>solon-flow 是新的规则引擎技术，由 OpenSolon 开源组织提供的基于 Java 语言开发的开源规则引擎，可以将复杂且多变的业务规则从硬编码中解放出来，以 yaml 规则脚本的形式存放在文件或特定的存储介质中（例如数据库），使得业务规则的变更不需要修改项目代码、不需要重启服务器就可以立即生效。</p>
<p>本篇博客的 demo 以个税计算器为例，介绍如何使用 solon-flow 规则引擎，有关具体技术细节，限于篇幅有限，这里不会介绍，具体细节可以参考官网。</p>
<p>solon-flow 官网地址：<a href="https://solon.noear.org/article/learn-solon-flow" target="_blank" rel="noopener nofollow">https://solon.noear.org/article/learn-solon-flow</a></p>
<p>solon-flow 源码下载地址：<a href="https://gitee.com/opensolon/solon/tree/main/solon-projects/solon-flow/solon-flow" target="_blank" rel="noopener nofollow">https://gitee.com/opensolon/solon/tree/main/solon-projects/solon-flow/solon-flow</a></p>
<h3 id="1搭建工程">1、搭建工程</h3>
<p>搭建一个 solon 工程，结构如下：</p>
<img src="https://teamx.noear.org/img/7c8c1fd3d4644b99a66eb73aabc95868.png" width="300">
<p>solon-flow 规则引擎将规则编写在以 .yml （很流行的配置文）为后缀的文件中，yml 文件默认也是使用 yaml + java 语言编写，所以学习起来很容易。</p>
<p>一般情况下，我们使用 IDEA 编写业务规则，默认情况下 .yml 文件会被打包到项目 jar 包中，为了方便后续调整规则，我们可以将 yml 文件的内容，存储到数据库中或者 oss 云盘中，程序在运行时从 jar 包外部读取规则内容。</p>
<p>完束上的 pom 文件的内容：</p>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;parent&gt;
        &lt;groupId&gt;org.noear&lt;/groupId&gt;
        &lt;artifactId&gt;solon-parent&lt;/artifactId&gt;
        &lt;version&gt;3.0.8&lt;/version&gt;
        &lt;relativePath /&gt;
    &lt;/parent&gt;

    &lt;groupId&gt;com.example&lt;/groupId&gt;
    &lt;artifactId&gt;demo-rule&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;

    &lt;properties&gt;
        &lt;java.version&gt;11&lt;/java.version&gt;
    &lt;/properties&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.noear&lt;/groupId&gt;
            &lt;artifactId&gt;solon-web&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;!-- 规则与流引擎 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.noear&lt;/groupId&gt;
            &lt;artifactId&gt;solon-flow&lt;/artifactId&gt;
        &lt;/dependency&gt;
        
        &lt;dependency&gt;
            &lt;groupId&gt;org.noear&lt;/groupId&gt;
            &lt;artifactId&gt;solon-logging-simple&lt;/artifactId&gt;
        &lt;/dependency&gt;
        
        &lt;dependency&gt;
            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
            &lt;artifactId&gt;lombok&lt;/artifactId&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.noear&lt;/groupId&gt;
            &lt;artifactId&gt;solon-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;

        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.noear&lt;/groupId&gt;
                &lt;artifactId&gt;solon-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;
</code></pre>
<h3 id="2代码细节展示">2、代码细节展示</h3>
<p>此文的 demo 是个税计算器，我们创建一个用于向规则引擎传递数据的实体类</p>
<pre><code class="language-java">package com.example.demo.model;

import lombok.Data;

@Data
public class Calculation {
    //税前工资
    private double wage;
    //应纳税所得额
    private double wagemore;
    //税率
    private double cess;
    //速算扣除数
    private double preminus;
    //扣税额
    private double wageminus;
    //税后工资
    private double actualwage;
}
</code></pre>
<p>这里不考虑缴纳社保和专项扣除等因素，个税计算的规则如下：</p>
 <img src="https://teamx.noear.org/img/64aeb746bc0f4a8c94fc20b570bc3ccc.png" height="250">
<p>之后我们在 <code>flow/rule.yml</code> 中编写的规则如下：</p>
<pre><code class="language-yaml">id: rule
nodes:
  - id: "tax_setWagemore" #计算应纳税所得额
    when: |
      import java.time.LocalDate;
      //2022-10-1 后生效
      return cal.getWage() &gt; 0 &amp;&amp; LocalDate.now().compareTo(LocalDate.of(2022,10,1)) &gt; 0;
    task: |
      double wagemore = cal.getWage() - 5000;
      cal.setWagemore(wagemore);
  - id: "tax_3000"  #设置税率、速算扣除数
    when: "cal.getWagemore() &lt;= 3000"
    task: |
      cal.setCess(0.03);//税率
      cal.setPreminus(0);//速算扣除数
  - id: "tax_12000"
    when: "cal.getWagemore() &gt; 3000 &amp;&amp; cal.getWagemore() &lt;= 12000"
    task: |
      cal.setCess(0.1);//税率
      cal.setPreminus(210);//速算扣除数
  - id: "tax_25000"
    when: "cal.getWagemore() &gt; 12000 &amp;&amp; cal.getWagemore() &lt;= 25000"
    task: |
      cal.setCess(0.2);
      cal.setPreminus(1410);
  - id: "tax_35000"
    when: "cal.getWagemore() &gt; 25000 &amp;&amp; cal.getWagemore() &lt;= 35000"
    task: |
      cal.setCess(0.25);
      cal.setPreminus(2660);
  - id: "tax_55000"
    when: "cal.getWagemore() &gt; 35000 &amp;&amp; cal.getWagemore() &lt;= 55000"
    task: |
      cal.setCess(0.25);
      cal.setPreminus(2660);
  - id: "tax_80000"
    when: "cal.getWagemore() &gt; 55000 &amp;&amp; cal.getWagemore() &lt;= 80000"
    task: |
      cal.setCess(0.35);
      cal.setPreminus(7160);
  - id: "tax_max"
    when: "cal.getWagemore() &gt; 80000"
    task: |
      cal.setCess(0.45);
      cal.setPreminus(15160);
  - id: "tax_result"
    when: "cal.getWage() &gt; 0 &amp;&amp; cal.getWagemore() &gt; 0 &amp;&amp; cal.getCess() &gt; 0"
    task: |
      //扣税额
      double wageminus = cal.getWagemore() * cal.getCess() - cal.getPreminus();
      double actualwage = cal.getWage() - wageminus;
      cal.setWageminus(wageminus);
      cal.setActualwage(actualwage);
      System.out.println("--税前工资："+cal.getWage());
      System.out.println("--应纳税所得额："+cal.getWagemore());
      System.out.println("--税率：" + cal.getCess());
      System.out.println("--速算扣除数：" + cal.getPreminus());
      System.out.println("--扣税额：" + cal.getWageminus());
      System.out.println("--税后工资：" + cal.getActualwage());
</code></pre>
<p>本 demo 设定每次被调用时，都去读取 rule.yml 的内容（可时实生效），具体代码在 RuleService 中实现：</p>
<pre><code class="language-java">package com.example.demo.dso;

import com.example.demo.model.Calculation;
import org.noear.solon.annotation.Component;
import org.noear.solon.annotation.Inject;
import org.noear.solon.flow.ChainContext;
import org.noear.solon.flow.FlowEngine;

@Component
public class RuleService {
    //调用Drools规则引擎实现个人所得税计算
    public Calculation calculate(Calculation calculation) throws Throwable {
        FlowEngine flowEngine = FlowEngine.newInstance();
        flowEngine.load(Chain.parseByUri("file:src/main/resources/flow/rule.yml")); //动态加载源码下的文件，修改后实时生效

        //构建上下文
        ChainContext ctx = new ChainContext();
        ctx.put("cal", calculation);

        //执行规则
        flowEngine.eval("rule", ctx);

        //返回运行算后的
        return calculation;
    }
}
</code></pre>
<p>然后在 RuleController 中对外提供计算个税的接口，只需要传递一个税前工资额即可计算得出结果</p>
<pre><code class="language-java">@Mapping("rule")
@Controller
public class RuleController {
    @Inject
    RuleService ruleService;

    @Mapping("calculate")
    public Calculation calculate(double wage) throws Throwable {
        Calculation calculation = new Calculation();
        calculation.setWage(wage);
        calculation = ruleService.calculate(calculation);
        System.out.println(calculation);
        return calculation;
    }
}
</code></pre>
<h3 id="3验证成果">3、验证成果</h3>
<p>启动后，可以访问接口 <code>http://localhost:8080/rule/calculate?wage=10000</code> 即可查看到静态页面，输入 10000 元计算个税，如下图：</p>
<img src="https://teamx.noear.org/img/5e49e5ae224442358d3479d5426e8f42.png" width="500">
<p>结果可以发现，税率是 0.1，执行的是 rule.yml 文件中的名称为 tax_12000 的规则，此时你可以使用 IDEA 修改一下，比如将税率修改为 0.2</p>
<pre><code class="language-yaml">  - id: "tax_12000"
    when: "cal.getWagemore() &gt; 3000 &amp;&amp; cal.getWagemore() &lt;= 12000"
    task: |
      cal.setCess(0.2);//这里故意将税率修改为 0.2
      cal.setPreminus(210);//速算扣除数
</code></pre>
<p>注意不需要重启 IDEA 的项目（可时实生效），此时重新点击页面中的计算，发现刚刚修改的规则生效了，如下图所示：</p>
<img src="https://teamx.noear.org/img/209bc35e16424cdd939e8a618fc25b14.png" width="500">
<p>好了，以上就是有关 solon 使用 drools 规则引擎的介绍（在 spring 里差不多），有兴趣的话可以下载源代码进行验证。</p>
<p>本示例，源码下载地址：</p>
<p><a href="https://gitee.com/opensolon/solon-flow_rule-demo" target="_blank" rel="noopener nofollow">https://gitee.com/opensolon/solon-flow_rule-demo</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.036106643287037034" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-17 11:31">2025-02-17 11:30</span>&nbsp;
<a href="https://www.cnblogs.com/noear">带刺的坐椅</a>&nbsp;
阅读(<span id="post_view_count">33</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18719650" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18719650);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18719650', targetLink: 'https://www.cnblogs.com/noear/p/18719650', title: '快速集成和使用 solon-flow 规则与流引擎（用 yaml 编写业务规则）' })">举报</a>
</div>
        