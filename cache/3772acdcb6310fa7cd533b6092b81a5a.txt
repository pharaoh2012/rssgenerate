
        <h2>
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wuhuacong/p/18650452" title="发布于 2025-01-07 17:31">
    <span role="heading" aria-level="2">WxPython跨平台开发框架之使用PyInstaller 进行打包处理</span>
    

</a>

        </h2>
        <div class="postbody">
                <div id="cnblogs_post_description" style="display: none">
        
        使用PyInstaller 打包Python项目是一个常见的需求，它可以将Python程序及其所有依赖项打包成一个独立的可执行文件或者安装文件，方便在没有安装Python环境的机器上运行。本随笔介绍WxPython跨平台开发框架中使用PyInstaller 进行打包处理，包括在WIndow平台下生成独立的exe文件，松散结构的exe文件和目录，以及在MacOS上生成安装包的处理过程。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>使用PyInstaller&nbsp;打包Python项目是一个常见的需求，它可以将Python程序及其所有依赖项打包成一个独立的可执行文件或者安装文件，方便在没有安装Python环境的机器上运行。本随笔介绍WxPython跨平台开发框架中使用PyInstaller 进行打包处理，包括在WIndow平台下生成独立的exe文件，松散结构的exe文件和目录，以及在MacOS上生成安装包的处理过程。</p>
<h3>1. 安装和使用 PyInstaller 进行程序打包处理</h3>
<p class="marklang-paragraph">PyInstaller是目前最流行的Python打包工具之一。它可以将Python脚本打包成独立的可执行文件，支持Windows、Linux和macOS平台。</p>
<p class="marklang-paragraph">打包后的可执行文件可以在没有 Python 环境的机器上运行。PyInstaller 会自动分析程序的依赖关系，并将所有必要的库和资源打包到一个文件或者一个文件夹中。</p>
<p class="marklang-paragraph">cx_Freeze是另一个常用的Python打包工具，同样支持跨平台。</p>
<p class="marklang-paragraph">Py2exe是专门用于将Python脚本打包成Windows平台可执行文件的工具。</p>
<p class="marklang-paragraph">首先，确保您的Python环境已经安装。然后，通过pip安装PyInstaller。在VSCode或者其他编辑器的命令行（终端）中执行以下命令：</p>
<div class="code-header">
<div class="cnblogs_code">
<pre>pip install pyinstaller</pre>
</div>
<p>在项目目录下，使用PyInstaller命令来打包您的Python脚本。假设您的主程序文件名为<code>main.py</code>，则可以使用以下命令：</p>
<div class="cnblogs_code">
<pre>pyinstaller --onefile main.py</pre>
</div>
<p>这里的<code>--onefile</code>选项指示PyInstaller生成一个单独的可执行文件，而不是一个包含多个文件的文件夹。PyInstaller还支持许多其他选项，如<code>--icon</code>来指定应用程序的图标，<code>--windowed</code>或<code>--noconsole</code>来避免在Windows上打开命令行窗口等。</p>
<p>PyInstaller完成打包后，会在<code>dist</code>目录下生成可执行文件（或文件夹，如果您没有使用<code>--onefile</code>选项）。进入<code>dist</code>目录，您应该能看到一个名为<code>main</code>（或您指定的名称，如果使用了<code>--name</code>选项）的可执行文件。</p>
<p class="marklang-paragraph">如果一切正常，您的Python程序现在应该会在没有Python环境的情况下运行。</p>
<p class="marklang-paragraph">使用PyInstaller打包Python项目是一个简单而强大的方法，可以让您的程序更加便携和易于分发。通过遵循上述步骤，您可以轻松地将您的Python项目打包成一个可执行文件。</p>
<h4><strong>常用选项</strong></h4>
<p>PyInstaller 提供了很多命令行选项，用于定制打包过程。以下是一些常用的选项：</p>
<h4><code>--onefile</code></h4>
<p>生成单个可执行文件。默认情况下，PyInstaller 会生成一个文件夹，里面包含了可执行文件和所有相关的依赖项。如果你希望打包成一个独立的可执行文件（可能会更大），可以使用 <code>--onefile</code> 选项。</p>
<h4><code>--noconsole</code></h4>
<p>如果你正在创建一个 GUI 应用程序（如使用 wxPython 或 PyQt），并且不希望显示控制台窗口，可以使用 <code>--noconsole</code> 选项。此选项会隐藏控制台窗口，适用于 Windows 和 macOS。</p>
<h4><code>--icon</code></h4>
<p>为生成的可执行文件指定一个图标。图标文件可以是 <code>.ico</code>（Windows）或 <code>.icns</code>（macOS）格式。</p>
<h4><code>--onedir</code></h4>
<p>生成一个包含可执行文件和所有依赖项的文件夹，而不是单个文件。你可以将整个文件夹分发给其他用户。</p>
<div>
<div>
<p><code>build</code> 文件夹被<em>PyInstaller</em>用来收集和准备捆绑的文件，它包含分析的结果和一些额外的日志。在大多数情况下，你可以忽略这个文件夹的内容，除非你想调试问题。</p>
<p><code>dist</code> （代表 "分发"）文件夹包含要分发的文件。这包括你的应用程序，捆绑成一个可执行文件，以及任何相关的库（例如WxPython、PyQt6 等）和二进制<code>.so</code> 文件。</p>
</div>
</div>
<p>&nbsp;</p>
<h3 class="marklang-paragraph">2、使用.spec文件进行定制打包处理</h3>
<p class="marklang-paragraph">打包过程中，PyInstaller 会生成一个 <code>.spec</code> 文件。这个文件包含了 PyInstaller 的配置信息，其中包含了构建过程的所有配置信息。你可以修改这个文件来定制打包过程。</p>
<p class="marklang-paragraph">如果我们执行下面代码</p>
<div class="cnblogs_code">
<pre>pyinstaller main.py</pre>
</div>
<p>或者指定更多的参数的代码</p>
<div class="cnblogs_code">
<pre>pyinstaller --onefile --icon=your_icon.ico main.py</pre>
</div>
<p>PyInstaller 都会生成一个&nbsp;<code>.spec</code>&nbsp;文件，然后可以编辑 <code>main.spec</code> 文件，例如：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> main.spec</span><span style="color: rgba(0, 128, 0, 1)">
#</span><span style="color: rgba(0, 128, 0, 1)"> -*- mode: python ; coding: utf-8 -*-</span>
<span style="color: rgba(0, 0, 0, 1)">
block_cipher </span>=<span style="color: rgba(0, 0, 0, 1)"> None

a </span>= Analysis([<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">main.py</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">],
             pathex</span>=[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">/path/to/your/script</span><span style="color: rgba(128, 0, 0, 1)">'</span>],  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 项目的路径</span>
             binaries=<span style="color: rgba(0, 0, 0, 1)">[],
             datas</span>=[(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">data/*.txt</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">data</span><span style="color: rgba(128, 0, 0, 1)">'</span>)],  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 资源文件</span>
             hiddenimports=[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">some_module</span><span style="color: rgba(128, 0, 0, 1)">'</span>],  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 隐藏导入模块</span>
             hookspath=<span style="color: rgba(0, 0, 0, 1)">[],
             runtime_hooks</span>=<span style="color: rgba(0, 0, 0, 1)">[],
             excludes</span>=<span style="color: rgba(0, 0, 0, 1)">[],
             win_no_prefer_redirects</span>=<span style="color: rgba(0, 0, 0, 1)">False,
             win_private_assemblies</span>=<span style="color: rgba(0, 0, 0, 1)">False)

pyz </span>=<span style="color: rgba(0, 0, 0, 1)"> PYZ(a.pure)

exe </span>=<span style="color: rgba(0, 0, 0, 1)"> EXE(pyz,
          a.scripts,
          a.binaries,
          a.zipfiles,
          a.datas,
          name</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">main</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">,
          debug</span>=<span style="color: rgba(0, 0, 0, 1)">False,
          strip</span>=<span style="color: rgba(0, 0, 0, 1)">False,
          upx</span>=<span style="color: rgba(0, 0, 0, 1)">True,
          console</span>=False)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 设置是否显示控制台</span></pre>
</div>
<p>一般情况下，我们的.spec文件会比这个更多的内容，虽然原则上.spec文件支持跨平台的配置，不过我们在实际中往往根据不同的平台配置特定的.spec文件。</p>
<p>你可以手动修改 <code>.spec</code> 文件来添加资源文件、修改导入模块、定制输出路径等。</p>
<p>你可以通过编辑<code>.spec</code>&nbsp;文件，在EXE、COLLECT和BUNDLE块下添加一个<code>name=</code>&nbsp;，为<em>PyInstaller</em>提供一个更好的名字，以便为应用程序（和<code>dist</code>&nbsp;文件夹）使用。</p>
<p>EXE下的名字是<em>可执行文件</em>的名字，BUNDLE下的名字是应用程序包的名字。</p>
<p>修改完成后，执行以下命令来重新打包：</p>
<h4>解决常见问题</h4>
<ul>
<li>
<p><strong>缺少依赖库</strong>：如果打包后运行时出现缺少模块的错误，可以尝试将缺少的模块加入到 <code>hiddenimports</code> 中，或者通过 <code>--hidden-import</code> 选项指定：</p>
</li>
<li><strong>大文件</strong>：如果使用 <code>--onefile</code> 时打包后的文件太大，考虑使用 <code>--onedir</code> 或通过压缩文件等方法进行优化。</li>
<li><span style="font-size: 12px"><strong style="font-size: 1.17em">处理资源文件：</strong></span>如果你的应用程序包含非 Python 代码的资源（如图像、配置文件、数据文件等），你需要通过 <code>--add-data</code> 选项指定资源文件的路径，或者在 <code>.spec</code> 文件中修改 <code>datas</code> 选项。</li>
<li>
<p><strong>动态链接库</strong>，如果你的应用程序依赖于特定的动态链接库（如 DLL 文件或 <code>.so</code> 文件），你需要将这些库包含到打包中。可以在 <code>.spec</code> 文件的 <code>binaries</code> 选项中指定：</p>
</li>
<li>
<p><strong>多平台支持：</strong>PyInstaller 支持 Windows、Linux 和 macOS 等多个平台，但需要在相应的平台上打包。例如，如果你要为 Windows 用户创建可执行文件，最好在 Windows 上运行 PyInstaller 来生成 Windows 的 <code>.exe</code> 文件。如果在 macOS 上打包，生成的文件只能在 macOS 上运行。</p>
</li>
</ul>
<p>PyInstaller 有丰富的文档，提供了详细的使用说明和常见问题解答，你可以通过以下链接访问：</p>
<ul>
<li>PyInstaller 官方文档：<a href="https://pyinstaller.readthedocs.io" rel="noopener nofollow" target="_new">https://pyinstaller.readthedocs.io</a></li>
<li>GitHub 代码库：<a href="https://github.com/pyinstaller/pyinstaller" rel="noopener nofollow" target="_new">https://github.com/pyinstaller/pyinstaller</a></li>
</ul>
<p>这些文档和资源能帮助你深入了解 PyInstaller 的使用方式，并解决在打包过程中可能遇到的问题。</p>
<p>&nbsp;</p>
<h3>3、WxPython跨平台开发框架中定制不同平台的 .spec文件</h3>
<p>前面介绍了，我们推荐使用修改配置.spec文件的方式生成打包文件，并且可以通过定制不同平台的.spec文件，以便实现更好的处理，避免冲突。</p>
<p>对于不同平台的图标处理，我们可以使用代码来判断，.spec文件本身可以编写python的代码的。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> sys
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> os
</span><span style="color: rgba(0, 0, 255, 1)">from</span> pathlib <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> Path

</span><span style="color: rgba(0, 0, 255, 1)">if</span> sys.platform == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">win32</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
    icon </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">app/images/app.ico</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 0, 255, 1)">elif</span> sys.platform == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">darwin</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
    icon </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">app/images/app.icns</span><span style="color: rgba(128, 0, 0, 1)">"</span></pre>
</div>
<p>另外我们的业务窗体是动态根据路径解析的，因此在打包的时候，会漏掉的，为了解决这个问题，需要手动把视图部分的模块加载到hidden-import集合中，如下所示。</p>
<p>为了避免手工填写出错和麻烦，使用python函数递归处理目录的视图模块。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> collect_modules(directory):
    modules </span>=<span style="color: rgba(0, 0, 0, 1)"> []
    </span><span style="color: rgba(0, 0, 255, 1)">for</span> root, dirs, files <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> os.walk(directory):
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> file <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> files:
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> file.endswith(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">.py</span><span style="color: rgba(128, 0, 0, 1)">"</span>) <span style="color: rgba(0, 0, 255, 1)">and</span> file != <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">__init__.py</span><span style="color: rgba(128, 0, 0, 1)">"</span>:  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 排除 __init__.py 文件</span>
                module_path =<span style="color: rgba(0, 0, 0, 1)"> os.path.relpath(os.path.join(root, file), directory)
                module_name </span>= module_path.replace(os.path.sep, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">.</span><span style="color: rgba(128, 0, 0, 1)">"</span>).replace(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">.py</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">)
                modules.append(module_name)
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> modules


</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 使用动态加载目录下的模块方式</span>
hiddenimports = collect_modules(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">app/views</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
hiddenimports </span>= [f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">views.{module}</span><span style="color: rgba(128, 0, 0, 1)">"</span> <span style="color: rgba(0, 0, 255, 1)">for</span> module <span style="color: rgba(0, 0, 255, 1)">in</span> hiddenimports]</pre>
</div>
<p>这样在修改里面的变量即可。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Analysis: PyInstaller Analysis object</span>
a =<span style="color: rgba(0, 0, 0, 1)"> Analysis(
    [</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">app/main.py</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">],
    pathex</span>=<span style="color: rgba(0, 0, 0, 1)">[],
    binaries</span>=<span style="color: rgba(0, 0, 0, 1)">[],
    datas</span>=<span style="color: rgba(0, 0, 0, 1)">[
        (</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">app/images/splash.png</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">images</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">),
        (</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">app/.env</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">),
        (</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">app/settings.ini</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">),
    ],
    hiddenimports</span>=<span style="color: rgba(0, 0, 0, 1)">hiddenimports,
    hookspath</span>=<span style="color: rgba(0, 0, 0, 1)">[],
    hooksconfig</span>=<span style="color: rgba(0, 0, 0, 1)">{},
    runtime_hooks</span>=<span style="color: rgba(0, 0, 0, 1)">[],
    excludes</span>=<span style="color: rgba(0, 0, 0, 1)">[],
    noarchive</span>=<span style="color: rgba(0, 0, 0, 1)">False,
    optimize</span>=<span style="color: rgba(0, 0, 0, 1)">0,
)</span></pre>
</div>
<h4>1）WIndows平台的打包文件生成</h4>
<p>然后指定EXE（用于Window的处理打包）</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> PYZ: PyInstaller PYZ object</span>
pyz =<span style="color: rgba(0, 0, 0, 1)"> PYZ(a.pure)

</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> EXE: PyInstaller EXE object</span>
exe =<span style="color: rgba(0, 0, 0, 1)"> EXE(
    pyz,
    a.scripts,
<strong><span style="color: rgba(255, 0, 0, 1)">    a.binaries,</span></strong>
<span style="color: rgba(255, 0, 0, 1)"><strong>    a.datas,</strong></span>
    [],
    name</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">wxpython_project</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    debug</span>=<span style="color: rgba(0, 0, 0, 1)">False,
    bootloader_ignore_signals</span>=<span style="color: rgba(0, 0, 0, 1)">False,
    strip</span>=<span style="color: rgba(0, 0, 0, 1)">False,
    upx</span>=<span style="color: rgba(0, 0, 0, 1)">True,
    upx_exclude</span>=<span style="color: rgba(0, 0, 0, 1)">[],
    runtime_tmpdir</span>=<span style="color: rgba(0, 0, 0, 1)">None,
    console</span>=False,  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> True启用/False禁用命令行窗口</span>
    onefile=False,  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> &lt;-- False取消、True使用 onefile 模式</span>
    icon=icon,  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> &lt;-- 图标路径</span>
    disable_windowed_traceback=<span style="color: rgba(0, 0, 0, 1)">False,
    argv_emulation</span>=<span style="color: rgba(0, 0, 0, 1)">False,
    target_arch</span>=<span style="color: rgba(0, 0, 0, 1)">None,
    codesign_identity</span>=<span style="color: rgba(0, 0, 0, 1)">None,
    entitlements_file</span>=<span style="color: rgba(0, 0, 0, 1)">None,
)</span></pre>
</div>
<p>最后在dist目录上生成一个文件，如下所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202501/8867-20250103164101249-438414474.png" alt="" width="221" height="68" loading="lazy"></p>
<p>本文件用于Window平台下打包整个项目，生成一个独立的exe文件，包含了所有的依赖和资源文件，文件运行后会在临时目录中解压出来一个文件夹，程序退出后，该文件夹自动移除。</p>
<p>临时目录一般在C:\Users\Administrator\AppData\Local\Temp。</p>
<p>&nbsp;</p>
<p>如果我们想在Windows平台生成的dist目录中生成一个启动exe，和其他相关的Lib依赖库目录，那么我们可以适当调整下.spec文件，让它可以生成松散结构的文件目录包。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> PYZ: PyInstaller PYZ object</span>
pyz =<span style="color: rgba(0, 0, 0, 1)"> PYZ(a.pure)

exe </span>=<span style="color: rgba(0, 0, 0, 1)"> EXE(
    pyz,
    a.scripts,
<span style="color: rgba(255, 0, 0, 1)"><strong>    [],
    exclude_binaries</strong></span></span><span style="color: rgba(255, 0, 0, 1)"><strong>=</strong></span><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)"><strong>True,</strong></span>
    name</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">wxpython_project</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    debug</span>=<span style="color: rgba(0, 0, 0, 1)">False,
    bootloader_ignore_signals</span>=<span style="color: rgba(0, 0, 0, 1)">False,
    strip</span>=<span style="color: rgba(0, 0, 0, 1)">False,
    upx</span>=<span style="color: rgba(0, 0, 0, 1)">True,
    console</span>=False,  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> True启用/False禁用命令行窗口</span>
    icon=icon,  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> &lt;-- 图标路径</span>
    disable_windowed_traceback=<span style="color: rgba(0, 0, 0, 1)">False,
    argv_emulation</span>=<span style="color: rgba(0, 0, 0, 1)">False,
    target_arch</span>=<span style="color: rgba(0, 0, 0, 1)">None,
    codesign_identity</span>=<span style="color: rgba(0, 0, 0, 1)">None,
    entitlements_file</span>=<span style="color: rgba(0, 0, 0, 1)">None,
)

</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> COLLECT: PyInstaller COLLECT object</span>
coll =<span style="color: rgba(0, 0, 0, 1)"> COLLECT(
    exe,
<span style="color: rgba(255, 0, 0, 1)"><strong>    a.binaries,
    a.datas,</strong></span>
    strip</span>=<span style="color: rgba(0, 0, 0, 1)">False,
    upx</span>=<span style="color: rgba(0, 0, 0, 1)">True,
    upx_exclude</span>=<span style="color: rgba(0, 0, 0, 1)">[],
    name</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">main</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
)</span></pre>
</div>
<p>相当于之前在exe包中的a.binaries 和 a.datas从EXE 构造函数中移到了Collect的构造函数里面了。这样会生成下面的目录结构。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202501/8867-20250106114318758-1760130470.png" alt="" width="426" height="199" loading="lazy"></p>
<p>其中_internal目录包含程序的相关依赖包和文件资源。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202501/8867-20250106114500092-262318247.png" alt="" width="743" height="486" loading="lazy"></p>
<p>如果我们需要使用第三方安装包制作工具（如SetupFactory ），那么整合这些文件即可实现安装程序的处理。</p>
<p>&nbsp;</p>
<h4>2）MacOs下的打包文件生成</h4>
<p>&nbsp;如果在MacOS或者Linux下的打包处理，会有所不同。</p>
<div>在MacOS中，我们需要使用 BUNDLE 创建 macOS 应用包</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 使用 BUNDLE 创建 macOS 应用包</span>
app =<span style="color: rgba(0, 0, 0, 1)"> BUNDLE(
    coll,
    name</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">wxpython_project.app</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    icon</span>=<span style="color: rgba(0, 0, 0, 1)">icon,
    bundle_identifier</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">com.iqidi.wxpython_project</span><span style="color: rgba(128, 0, 0, 1)">"</span>,  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 推荐设置唯一的 bundle identifier</span>
    info_plist=<span style="color: rgba(0, 0, 0, 1)">{
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">NSPrincipalClass</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">NSApplication</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">NSHighResolutionCapable</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">True</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    },
)</span></pre>
</div>
<p>生成的&nbsp;wxpython_project.app 应用程序捆绑包，实际上只是一个特殊的文件夹。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202501/8867-20250107173107605-190019609.png" alt="" loading="lazy"></p>
<p>虽然macOS将其显示为一个应用程序，但如果你试图分享它，你实际上将分享数百个单独的文件。为了正确分发应用程序，我们需要某种方式将其打包成一个单一的文件。</p>
<p>如果你以前安装过macOS应用程序，通常情况下你会得到一个<em>磁盘镜像</em>&nbsp;<code>.dmg</code>&nbsp;，打开后会显示应用程序包，以及一个指向<em>应用程序</em>文件夹的链接。要安装该应用程序，你只需将其拖到目标上。</p>
<p>为了创建我们的<em>磁盘镜像</em>，我们将使用<a title="https://github.com/create-dmg/create-dmg" href="https://github.com/create-dmg/create-dmg" target="_blank" rel="noopener nofollow">create-dmg</a>工具。这是一个命令行工具，它提供了一个简单的方法来自动建立磁盘镜像。如果你使用Homebrew，你可以用以下命令安装 create-dmg。</p>
<div class="cnblogs_code">
<pre>brew <span style="color: rgba(0, 0, 255, 1)">install</span> create-dmg</pre>
</div>
<p><code>create-dmg</code>&nbsp;是一个用于 macOS 的命令行工具，用于创建&nbsp;<code>.dmg</code>&nbsp;(Disk Image) 文件，这些文件通常用于分发 macOS 应用程序。它简化了创建&nbsp;<code>.dmg</code>&nbsp;文件的过程，并允许你自定义磁盘映像的外观和行为。以下是&nbsp;<code>create-dmg</code>&nbsp;的一些主要功能和使用方法：</p>
<p>主要功能：</p>
<ol>
<li>简单易用：通过命令行参数，快速创建&nbsp;<code>.dmg</code>&nbsp;文件。</li>
<li>自定义背景图片：可以为磁盘映像设置自定义背景图片。</li>
<li>应用程序放置位置：可以指定应用程序图标在磁盘映像中的位置。</li>
<li>图标大小和排列：自定义图标的大小和排列方式。</li>
<li>自动挂载和卸载：创建&nbsp;<code>.dmg</code>&nbsp;文件时自动挂载和卸载磁盘映像。</li>
</ol>
<p>以下是一个简单的示例，用于创建一个&nbsp;<code>.dmg</code>&nbsp;文件：</p>
<div class="cnblogs_code">
<pre>create-dmg <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">path/to/your/app</span><span style="color: rgba(128, 0, 0, 1)">'</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">path/to/output/directory</span><span style="color: rgba(128, 0, 0, 1)">'</span></pre>
</div>
<p>常用参数：</p>
<p><code>create-dmg</code>&nbsp;提供了多种参数来定制&nbsp;<code>.dmg</code>&nbsp;文件。以下是一些常用参数：</p>
<ul>
<li><code>--overwrite</code>：如果输出目录已经存在相同名称的&nbsp;<code>.dmg</code>&nbsp;文件，使用此参数将其覆盖。</li>
<li><code>--background</code>：指定&nbsp;<code>.dmg</code>&nbsp;文件的背景图片。</li>
<li><code>--icon</code>：设置应用程序图标的位置，格式为&nbsp;<code>name:x,y</code>，例如：<code>--icon "YourAppName:150,150"</code>.</li>
<li><code>--icon-size</code>：设置图标的大小，默认值为 80。</li>
<li><code>--window-size</code>：设置&nbsp;<code>.dmg</code>&nbsp;窗口的大小，格式为&nbsp;<code>width,height</code>，例如：<code>--window-size 600,400</code>.</li>
<li><code>--title</code>：设置&nbsp;<code>.dmg</code>&nbsp;窗口的标题。</li>
</ul>
<p>以下是一个更复杂的示例，展示了如何使用多个参数来自定义&nbsp;<code>.dmg</code>&nbsp;文件：</p>
<div class="cnblogs_code">
<pre>create-dmg <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">path/to/your/app</span><span style="color: rgba(128, 0, 0, 1)">'</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">path/to/output/directory</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)"> \
  </span>--<span style="color: rgba(0, 0, 0, 1)">overwrite \
  </span>--background <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">path/to/background.png</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)"> \
  </span>--icon <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">YourAppName:150,150</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)"> \
  </span>--icon-size <span style="color: rgba(128, 0, 128, 1)">100</span><span style="color: rgba(0, 0, 0, 1)"> \
  </span>--window-size <span style="color: rgba(128, 0, 128, 1)">800</span>,<span style="color: rgba(128, 0, 128, 1)">600</span><span style="color: rgba(0, 0, 0, 1)"> \
  </span>--title <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">YourAppName Installer</span><span style="color: rgba(128, 0, 0, 1)">'</span></pre>
</div>
<p>&nbsp;</p>
</div>
</div>
<div id="MySignature" role="contentinfo">
    <div style="border-right-color: #cccccc; border-right-width: 1px; border-right-style: solid; padding-right: 5px; border-top-color: #cccccc; border-top-width: 1px; border-top-style: solid; padding-left: 4px; font-size: 13px; padding-bottom: 4px; border-left-color: #cccccc; border-left-width: 1px; border-left-style: solid; width: 98%; padding-top: 4px; border-bottom-color: #cccccc; border-bottom-width: 1px; border-bottom-style: solid; background-color: #eeeeee;">
    <img src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif" align="top" alt="">
    <span style="color: #000000"><span class="Apple-tab-span" style="white-space: pre"></span>
     专注于代码生成工具、.Net/.NetCore 框架架构及软件开发，以及各种Vue.js的前端技术应用。著有Winform开发框架/混合式开发框架、微信开发框架、Bootstrap开发框架、ABP开发框架、SqlSugar开发框架等框架产品。
     <br>&nbsp;&nbsp;转载请注明出处：撰写人：伍华聪&nbsp;&nbsp;<a href="http://www.iqidi.com/" target="_blank">http://www.iqidi.com</a>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span></div>
</div>
<div class="clear"></div>

        </div>
        <p class="postfoot">
            posted on 
<span id="post-date" data-last-update-days="0.5287577380208334" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-07 17:32">2025-01-07 17:31</span>&nbsp;
<a href="https://www.cnblogs.com/wuhuacong">伍华聪</a>&nbsp;
阅读(<span id="post_view_count">104</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18650452" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18650452);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18650452', targetLink: 'https://www.cnblogs.com/wuhuacong/p/18650452', title: 'WxPython跨平台开发框架之使用PyInstaller 进行打包处理' })">举报</a>

        </p>
    