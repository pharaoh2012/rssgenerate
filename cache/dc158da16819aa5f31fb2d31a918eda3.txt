
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/D1TA/p/18803169" title="发布于 2025-03-31 22:35">
    <span role="heading" aria-level="2">MCP技术：渗透测试从自动化到智能化</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/2839487/202503/2839487-20250331223443352-1051057913.png" alt="MCP技术：渗透测试从自动化到智能化" class="desc_img">
        还在自动化渗透测试？进来我教你智能化渗透测试！
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在人工智能快速发展的今天，如何让AI更高效地与现实世界交互，成为许多开发者和研究者关注的焦点。MCP（Model Context Protocol）技术作为一种创新的工具集成方案，为AI提供了一种“双手”的能力，使其能够通过调用外部工具完成复杂任务。本文将展示在实际场景中的应用。</p>
<h2 id="环境搭建">环境搭建</h2>
<p>在开始构建MCP工具之前，我们需要先搭建一个稳定的工作环境。以下是详细的环境配置步骤：</p>
<h3 id="初始化项目">初始化项目</h3>
<p>首先，我们需要初始化一个项目目录，这将作为我们后续开发的基础。运行以下命令：</p>
<pre><code class="language-bash">uv init dirsearch-mcp-server
</code></pre>
<p>这一步会创建一个名为<code>dirsearch-mcp-server</code>的目录，并初始化项目结构。</p>
<p><strong>注：</strong><br>
uv 是一个挺全面的python依赖管理工具，但本人不用python做主力很久，略有生疏，按照大家的推荐也使用的uv。<br>
这个项目名称原本是想用来连接dirsearch使用的，奈何环境问题一直搞不定，遂怒，决定使用 <code>go run main.go</code> 运行自编写的go程序，环境报错，亦怒， 直接 <code>go build</code> 编译执行。</p>
<h3 id="创建python虚拟环境">创建Python虚拟环境</h3>
<p>为了确保开发环境的隔离性和稳定性，我们使用Python虚拟环境。进入项目目录后，运行以下命令：</p>
<pre><code class="language-bash">cd dirsearch-mcp-server
uv venv
</code></pre>
<p>这将创建一个名为<code>.venv</code>的虚拟环境，所有依赖包都将安装在这个环境中，避免与其他项目产生冲突。</p>
<h3 id="激活虚拟环境">激活虚拟环境</h3>
<p>激活虚拟环境是使用MCP工具的前提。根据你的操作系统，运行以下命令：</p>
<pre><code class="language-bash">.venv\Scripts\activate
</code></pre>
<p>激活后，你的命令行提示符会显示<code>(venv)</code>，表示虚拟环境已成功激活。</p>
<h3 id="安装依赖">安装依赖</h3>
<p>接下来，我们需要安装MCP的依赖包。运行以下命令：</p>
<pre><code class="language-bash">uv add mcp[cli]
</code></pre>
<p>这将安装MCP的核心库及其命令行接口（CLI），为后续开发提供支持。</p>
<h2 id="创建mcp服务器赋予ai执行能力">创建MCP服务器：赋予AI执行能力</h2>
<p>在环境配置完成后，我们可以开始创建一个MCP服务器。以下是具体的实现代码：</p>
<pre><code class="language-python">import subprocess  
import time  
from pathlib import Path  
  
from mcp.server.fastmcp import FastMCP  
  
# Initialize FastMCP server  
mcp = FastMCP("beian-query-server", log_level="ERROR")  
  
@mcp.tool()  
async def run_beian_query(domain: str, timeout: int = 300) -&gt; dict:  
    """  
    执行备案信息查询工具  
  
    参数:  
        domain (str): 要查询的域名 (如 baidu.com)  
        timeout (int): 最大执行时间（秒）  
  
    返回:  
        dict: 包含执行结果的字典  
    """  
    start_time = time.time()  
    result = {  
        "status": "pending",  
        "command": "",  
        "returncode": None,  
        "stdout": "",  
        "stderr": "",  
        "duration": 0.0  
    }  
    try:  
        # 配置固定参数  
        target_dir = r"E:\Script\GoStore\RedTeam\tools\ToolsForBeian"  
        exe_path = str(Path(target_dir) / "beian.exe")    
        go_cmd = [exe_path, "info", "-i", domain]         
  
        # 验证环境  
        if not Path(exe_path).exists():  # 关键修改点3  
            raise FileNotFoundError(f"beian.exe not found in {target_dir}")  
  
        # 记录完整命令  
        result["command"] = " ".join(go_cmd)  
  
        # 执行命令  
        process = subprocess.run(  
            go_cmd,  
            cwd=target_dir,  
            stdout=subprocess.PIPE,  
            stderr=subprocess.PIPE,  
            timeout=timeout,  
            encoding='utf-8',  
            errors='replace'  
        )  
  
        # 记录结果  
        result.update({  
            "status": "success",  
            "returncode": process.returncode,  
            "stdout": process.stdout.strip(),  
            "stderr": process.stderr.strip(),  
            "duration": round(time.time() - start_time, 2)  
        })  
  
    except subprocess.TimeoutExpired as e:  
        result.update({  
            "status": "timeout",  
            "stderr": f"执行超时 ({timeout}s)",  
            "duration": timeout  
        })  
    except Exception as e:  
        result.update({  
            "status": "error",  
            "stderr": str(e),  
            "duration": round(time.time() - start_time, 2)  
        })  
  
    return result  
  
if __name__ == "__main__":  
    mcp.run(transport="stdio")
</code></pre>
<p>上述 exePath 中的beian.exe 就是编译后的程序名称</p>
<h3 id="代码解析">代码解析</h3>
<ol>
<li>
<p><strong>初始化MCP服务器</strong><br>
使用<code>FastMCP</code>类创建一个服务器实例，指定服务器名称为<code>beian-query-server</code>，并将日志级别设置为<code>ERROR</code>，以减少不必要的输出。</p>
</li>
<li>
<p><strong>定义工具函数</strong><br>
通过<code>@mcp.tool()</code>装饰器，我们将<code>run_beian_query</code>函数注册为一个MCP工具。这个函数接收两个参数：<code>domain</code>（域名）和<code>timeout</code>（超时时间），并返回一个包含执行结果的字典。</p>
</li>
<li>
<p><strong>工具逻辑</strong></p>
<ul>
<li>配置工具路径：指定<code>beian.exe</code>的路径，并验证其是否存在。</li>
<li>执行命令：通过<code>subprocess.run</code>执行备案查询命令，并捕获输出和错误信息。</li>
<li>结果处理：根据执行结果更新状态、返回码、输出内容和执行时间。</li>
</ul>
</li>
</ol>
<h2 id="配置mcp-client">配置MCP Client</h2>
<p>创建好 server 后，就需要对client进行配置了，由于 vscode 中 cline  插件很好的支持了 mcp server 功能，可以节省我们创建 mcp client 的步骤 ，但是使用时需要进行相关配置，以下是配置文件的内容：</p>
<pre><code class="language-json">{
  "mcpServers": {
    "beian-query-server": {
      "name": "调用golang工具的备案查询工具",
      "key": "dirsearch-mcp-server",
      "command": "uv",
      "args": [
        "--directory",
        "E:\\Script\\PyStore\\dirsearch-mcp-server\\",
        "run",
        "--with",
        "mcp",
        "mcp",
        "run",
        "main.py"
      ],
      "disabled": false,
      "autoApprove": []
    }
  }
}
</code></pre>
<h3 id="配置文件解析">配置文件解析</h3>
<ul>
<li><strong><code>name</code></strong>：工具的名称，用于描述工具的功能。</li>
<li><strong><code>key</code></strong>：工具的唯一标识符。</li>
<li><strong><code>command</code></strong>：运行工具的命令。</li>
<li><strong><code>args</code></strong>：命令的参数列表，用于指定运行环境和脚本路径。</li>
<li><strong><code>disabled</code></strong>：是否禁用该工具。</li>
<li><strong><code>autoApprove</code></strong>：自动批准的工具列表。</li>
</ul>
<p>这段配置相当于运行以下命令：</p>
<pre><code class="language-bash">uv --directory E:\Script\PyStore\dirsearch-mcp-server\ run --with mcp mcp run main.py
</code></pre>
<h2 id="运行">运行</h2>
<p>为了更方便地使用MCP工具，我们可以在VSCode中安装<code>cline</code>插件，并进行以下配置：</p>
<ol>
<li>
<p><strong>安装插件</strong><br>
在VSCode的扩展市场中搜索并安装<code>cline</code>插件。</p>
</li>
<li>
<p><strong>选择MCP服务器</strong><br>
打开VSCode，选择<code>MCP server</code>作为目标服务器。</p>
</li>
<li>
<p><strong>配置工具</strong><br>
点击<code>Config</code>按钮，按照提示完成配置。</p>
</li>
<li>
<p><strong>运行工具</strong><br>
配置完成后，工具将自动运行，如下图所示：</p>
</li>
</ol>
<p><img src="https://img2024.cnblogs.com/blog/2839487/202503/2839487-20250331223237505-1653039768.png" alt="" loading="lazy"></p>
<ol start="5">
<li><strong>查看结果</strong><br>
工具运行后，你可以在VSCode的输出窗口中查看结果，如下图所示：<br>
<img src="https://img2024.cnblogs.com/blog/2839487/202503/2839487-20250331223329900-243409686.png" alt="" loading="lazy"></li>
</ol>
<p><img src="https://img2024.cnblogs.com/blog/2839487/202503/2839487-20250331223337688-1537792646.png" alt="" loading="lazy"></p>
<p>最终的查询结果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/2839487/202503/2839487-20250331223346074-1315394458.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/2839487/202503/2839487-20250331223353867-423728027.png" alt="" loading="lazy"></p>
<h2 id="总结">总结</h2>
<p>通过本文的介绍，我们成功搭建了一个基于MCP技术及ai技术的智能化备案信息查询工具，并实现了自动调用和结果展示。</p>
<p><strong>MCP技术为AI提供了一种与外部工具交互的能力，在渗透测试中，如果将完整的渗透测试工具链通过MCP技术装备给ai调用，那么智能化的渗透测试工具将极大的提高工作的效率，就可以实现渗透测试从自动化到完全智能化的转变。</strong></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.6583047728900463" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-31 22:35">2025-03-31 22:35</span>&nbsp;
<a href="https://www.cnblogs.com/D1TA">D1TAsec</a>&nbsp;
阅读(<span id="post_view_count">78</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18803169" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18803169);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18803169', targetLink: 'https://www.cnblogs.com/D1TA/p/18803169', title: 'MCP技术：渗透测试从自动化到智能化' })">举报</a>
</div>
        