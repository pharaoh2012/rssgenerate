
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/somefuture/p/18624127" title="发布于 2024-12-23 15:21">
    <span role="heading" aria-level="2">Java的HTTP接口测试框架Gatling</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>之前讲过的《<a href="https://www.cnblogs.com/somefuture/p/18122096" title="JHM" target="_blank">JHM</a>》是一个java的基准测试框架，一般用于测试jdk里的API。如果要测试http接口，可以使用Gatling。</p>
<blockquote>
<p>你可能用过JMeter，也是可以的</p>
</blockquote>
<p>原生的Gatling是基于代码测试的，没有UI。你需要创建一个maven项目，或者下载官方的例子：<a href="https://github.com/gatling/gatling-js-demo/archive/refs/heads/main.zip" target="_blank" rel="noopener nofollow">https://github.com/gatling/gatling-js-demo/archive/refs/heads/main.zip</a> 。</p>
<blockquote>
<p>官方文档参考：<a href="https://docs.gatling.io/reference/install/oss/" target="_blank" rel="noopener nofollow">https://docs.gatling.io/reference/install/oss/</a></p>
</blockquote>
<h1 id="配置">配置</h1>
<p>打开这个例子项目，找到类 <code>ComputerDatabaseSimulation</code> 进行修改。</p>
<p>比如我想测试 <code>http://localhost:8080/unified-list-service/dpa/landing</code> 这个地址。配置如下：</p>
<pre><code class="language-java">import io.gatling.javaapi.core.ScenarioBuilder;
import io.gatling.javaapi.core.Simulation;
import io.gatling.javaapi.http.HttpProtocolBuilder;

import static io.gatling.javaapi.core.CoreDsl.atOnceUsers;
import static io.gatling.javaapi.core.CoreDsl.constantUsersPerSec;
import static io.gatling.javaapi.core.CoreDsl.scenario;
import static io.gatling.javaapi.http.HttpDsl.http;

public class ComputerDatabaseSimulation extends Simulation {
    HttpProtocolBuilder httpProtocol =
            http.baseUrl("http://localhost:8080/unified-list-service/dpa")
                    .acceptHeader("*/*");
    ScenarioBuilder myScenario = scenario("My Scenario")
            .exec(http("Request pure").get("/landing"));

    {
        setUp(myScenario.injectOpen(constantUsersPerSec(300).during(10)))
                .protocols(httpProtocol);
    }
}
</code></pre>
<p>这个配置的意思是每秒生成300个请求，连续生成10秒，共计3000个请求。</p>
<p>如果想直接生成这3000个请求，可以使用</p>
<pre><code class="language-java">setUp(myScenario.injectOpen(atOnceUsers(3000))).protocols(httpProtocol);
</code></pre>
<p>setUp可以接受多个场景，比如</p>
<pre><code class="language-java">        setUp(
                myScenario1.injectOpen(constantUsersPerSec(300).during(10)), 
                myScenario2.injectOpen(atOnceUsers(300))
        ).protocols(httpProtocol);
</code></pre>
<p>每个场景也可以执行多种请求，比如：</p>
<pre><code class="language-java">    ScenarioBuilder myScenario1 = scenario("My Scenario")
            .exec(
                    http("Request pure").get("/landing"), 
                    http("Request swid").get("/landing?swid={d80a2714}")
            ).exec(http("Request 1").get("/landing?date={today}"));
</code></pre>
<h1 id="运行">运行</h1>
<p>执行命令<code>mvn gatling:test</code><br>
<img src="https://img2024.cnblogs.com/blog/2157887/202412/2157887-20241223151710519-1627637524.png" alt="image" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.04163611499189815" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-23 15:22">2024-12-23 15:21</span>&nbsp;
<a href="https://www.cnblogs.com/somefuture">大卫小东（Sheldon）</a>&nbsp;
阅读(<span id="post_view_count">26</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18624127" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18624127);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18624127', targetLink: 'https://www.cnblogs.com/somefuture/p/18624127', title: 'Java的HTTP接口测试框架Gatling' })">举报</a>
</div>
        