
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/seamount3/p/18690818" title="发布于 2025-01-25 11:17">
    <span role="heading" aria-level="2">AQS源码解析</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="掌握aqs">掌握AQS</h1>
<h3 id="何为aqs">何为AQS</h3>
<p>AQS是一个用于构建锁和同步器的基础框架,实际上AQS核心代码主要是实现了线程的<strong>阻塞和唤醒机制</strong>以及<strong>资源状态的基本管理</strong></p>
<h3 id="aqs的核心功能">AQS的核心功能</h3>
<ol>
<li>
<p><strong>线程的排队管理</strong>：通过 CLH 队列管理线程的阻塞和唤醒。</p>
</li>
<li>
<p><strong>资源状态的基本管理</strong>：通过 <code>state</code> 表示资源状态，通过 <code>compareAndSetState</code> 实现原子操作。</p>
</li>
<li>
<p><strong>线程的唤醒和调度</strong>：通过 <code>unparkSuccessor</code> 唤醒后继线程。</p>
</li>
</ol>
<blockquote>
<p>由于AQS目的就是做一个构建锁和同步器的基础框架,对于这类框架以上功能有部分是我们AQS可以直接实现,例如线程的唤醒和阻塞,线程的排队管理也可以我们直接在AQS实现,另一部分,资源状态的基本管理,在AQS是无法直接写死的,所以AQS使用了<strong>模板方法</strong>,并且抽象出了state,所有对state的操作都由AQS的子类来实现</p>
</blockquote>
<h5 id="线程获取不到锁首先为什么要排队">线程获取不到锁首先为什么要排队?</h5>
<p>如果线程在资源不可用的情况下继续占用 CPU，而不是进入等待队列进行管理，其实是浪费了CPU资源,让CPU去执行其他线程的代码,可以提升整个系统的并发量嘛,上面是阻塞的流程,而阻塞归根到底到有资源的时候就需要接着唤醒,所以才以队列这样的数据结构来实现此功能</p>
<h3 id="核心api">核心API</h3>
<p>例如如下两个,实际上有很多个,不过功能类似,只不过要考虑独占锁与共享锁以及是否支持中断</p>
<ul>
<li>acquire</li>
<li>release</li>
</ul>
<h4 id="随口一提为什么要支持中断">(随口一提)为什么要支持中断?</h4>
<p>由于是底层框架嘛,需要为用户提供更多种选择,所以支持了中断与非中断</p>
<h4 id="随口一提中断与不可中断的区别">(随口一提)中断与不可中断的区别?</h4>
<ol>
<li><strong>不可中断模式 (Uninterruptible)</strong>：如 <code>acquire</code> 方法，线程在获取资源时忽略中断，必须获取到资源后才能退出。</li>
<li><strong>可中断模式 (Interruptible)</strong>：如 <code>acquireInterruptibly</code> 方法，线程在获取资源时可以响应中断，提前退出。</li>
</ol>
<h5 id="设计不可中断模式的原因"><strong>设计不可中断模式的原因：</strong></h5>
<ol>
<li><strong>简化逻辑</strong>：
<ul>
<li>在很多场景下，锁的获取过程希望简单明确，即 "要么成功获取，要么阻塞直到获取到资源"。</li>
<li>忽略中断可以避免处理中断逻辑带来的复杂性，减少开发者出错的可能性。</li>
</ul>
</li>
<li><strong>保证任务完整性</strong>：
<ul>
<li>某些关键任务不希望因为中断信号而被打断，特别是在资源状态必须保持一致的情况下。</li>
</ul>
</li>
<li><strong>降低性能开销</strong>：
<ul>
<li>响应中断需要额外的判断逻辑，忽略中断可以简化实现，提高性能。</li>
</ul>
</li>
</ol>
<h5 id="随口一提中断方式如何实现">(随口一提)中断方式如何实现</h5>
<p>对于java来讲是简单的,无非就是获取当前线程的状态,代码上来讲就是Thread.interrupted(),获取当前线程是否被中断</p>
<h4 id="如何管理独占锁之acquire">如何管理(独占锁)之acquire</h4>
<p>AQS通过Node对象实例来进行映射被阻塞的线程,也就是Node类里面有个Thread属性</p>
<pre><code class="language-java">public final void acquire(int arg) {
        if (!tryAcquire(arg) &amp;&amp;
            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
            selfInterrupt();
    }
</code></pre>
<h5 id="tryacquire">tryAcquire</h5>
<p>交由子类来实现</p>
<h5 id="添加新阻塞线程的流程addwaiter">添加新阻塞线程的流程addWaiter</h5>
<ol>
<li>生成一个node(构造器参数:currentThread,mode("独占" or "共享"))</li>
<li>如果tail为null,直接enq(node),并且返回node<br>
(tail是AQS实例的变量还有一个head)</li>
<li>非null的话,会使用CAS的方式去修改对应的tail(把tail设置成node),同时原先的prev(原先的tail)的next设置成node,CAS成功直接返回node</li>
<li>CAS失败走退化路径(enq)</li>
</ol>
<p>但是上面的逻辑仍然存在并发问题,例如说下面两个情况:</p>
<ol>
<li>如果两个线程同时判断当前tail为null呢?</li>
<li>如果两个线程同时执行获取到tail,只有一个CAS成功呢,那另一个怎么办?</li>
</ol>
<p>所以完整的过程</p>
<h5 id="核心方法退化路径-enq">核心方法退化路径 (<code>enq</code>)</h5>
<p>enq的核心逻辑就是自旋+CAS就和Synchronized在轻量级锁时类似机制,只不过enq是死循环</p>
<h5 id="提出问题为什么不直接使用enq这么设计有什么好处">提出问题:为什么不直接使用enq这么设计有什么好处?</h5>
<p>其实是<strong>快速路径</strong>和<strong>完整路径</strong>的设计思想</p>
<p>快速路径指的是addWaiter中的这一段</p>
<pre><code class="language-java"> Node pred = tail;
        if (pred != null) {
            node.prev = pred;
            if (compareAndSetTail(pred, node)) {
                pred.next = node;
                return node;
            }
        }
</code></pre>
<p>而完整路径则指代的是enq的逻辑</p>
<p><strong>这么设计的好处在于</strong></p>
<ol>
<li><strong>提升性能</strong>:大部分情况下,是已有head的那么再去考虑head的if逻辑判断其实是没必要执行的,另一方面,如果我们在多线程的情况下,我们不在这里通过快速路径的方式过滤掉一部分线程,到完整路径的自旋等等操作会导致竞争更加激烈,自然能提升一部分的性能,所以这类设计使得部分场景性能更优</li>
<li><strong>分离简单情况和复杂情况</strong>:这个主要是编码思路的学习了,这种设计是典型的 <strong>"优化常见路径，退化处理复杂情况"</strong> 的思想，是一种平衡性能和线程安全的工程实践。如果工程上遇到较为复杂业务也可以利用这个思想来对场景进行解剖</li>
</ol>
<h5 id="acquirequeued">acquireQueued</h5>
<pre><code class="language-java">  final boolean acquireQueued(final Node node, int arg) {
        boolean failed = true;
        try {
            boolean interrupted = false;
            for (;;) {
                final Node p = node.predecessor();
                if (p == head &amp;&amp; tryAcquire(arg)) {
                    setHead(node);
                    p.next = null; // help GC
                    failed = false;
                    return interrupted;
                }
                if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;
                    parkAndCheckInterrupt())
                    interrupted = true;
            }
        } finally {
            if (failed)
                cancelAcquire(node);
        }
    }
</code></pre>
<p><strong>获取前驱节点并检查是否为队首：</strong></p>
<pre><code class="language-java">final Node p = node.predecessor();
if (p == head &amp;&amp; tryAcquire(arg)) {
    setHead(node); // 成为新的头节点
    p.next = null; // 帮助 GC
    failed = false;
    return interrupted;
}
</code></pre>
<ul>
<li>如果当前节点的前驱是头节点，尝试获取资源。</li>
<li>成功后，将当前节点设置为新的头节点，断开原头节点的引用。</li>
</ul>
<p><strong>判断是否需要挂起：</strong></p>
<pre><code class="language-java">if (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt())
    interrupted = true;
</code></pre>
<ul>
<li>如果获取失败，检查前驱节点是否要求挂起。</li>
<li>挂起线程，等待被唤醒。</li>
</ul>
<p><strong>处理中断：</strong></p>
<ul>
<li><code>acquireQueued</code> 不响应中断，但会记录中断状态。</li>
<li>如果线程在等待过程中被中断，<code>interrupted</code> 变量会被设置为 <code>true</code>。</li>
</ul>
<p><strong>失败处理：</strong></p>
<pre><code class="language-java">if (failed)
    cancelAcquire(node);
</code></pre>
<ul>
<li>如果线程未成功获取资源（<code>failed == true</code>），调用 <code>cancelAcquire</code> 移除当前节点。</li>
</ul>
<h4 id="如何管理独占锁之release">如何管理(独占锁)之release</h4>
<ol>
<li>if(tryRelease(arg))--&gt;由子类实现来负责修改state值</li>
<li>如果head存在并且head.waitStatus!=0,进行唤醒后续节点unparkSuccessor</li>
</ol>
<h6 id="waitstatus的意义">waitStatus的意义</h6>
<p><strong><code>waitStatus</code> 的作用：</strong> <code>waitStatus</code> 是 AQS 中每个节点的重要状态字段，用来描述节点的状态：</p>
<ul>
<li><code>0</code>：节点处于正常状态。</li>
<li><code>&lt; 0</code>（如 <code>Node.SIGNAL = -1</code>）：表示后继节点需要被唤醒。</li>
<li><code>&gt; 0</code>：节点被取消（如中断、超时等）。</li>
</ul>
<h5 id="unparksuccessor">unparkSuccessor</h5>
<ol>
<li><strong>尝试清理当前节点的 <code>waitStatus</code>：</strong></li>
</ol>
<pre><code class="language-java">if (ws &lt; 0)
    compareAndSetWaitStatus(node, ws, 0);
</code></pre>
<ul>
<li>如果当前节点的 <code>waitStatus</code> 为负数（通常为 <code>Node.SIGNAL</code>），表示需要通知后继节点。</li>
<li>在通知前，将其重置为 <code>0</code>，避免重复通知。</li>
</ul>
<ol start="2">
<li><strong>找到需要唤醒的后继节点：</strong></li>
</ol>
<ul>
<li>首先尝试使用 <code>node.next</code>。</li>
<li>如果 <code>node.next</code> 为 <code>null</code> 或 <code>waitStatus &gt; 0</code>（取消状态），则从尾部向前查找有效节点。</li>
</ul>
<ol start="3">
<li><strong>唤醒线程：</strong></li>
</ol>
<ul>
<li>找到有效节点后，通过 <code>LockSupport.unpark(s.thread)</code> 唤醒对应线程。</li>
</ul>
<h5 id="1-为什么需要从尾部遍历"><strong>1. 为什么需要从尾部遍历？</strong></h5>
<p>这是为了找到真正需要被唤醒的 <strong>有效后继节点</strong>。<br>
原因是：</p>
<ol>
<li><strong>节点可能被取消：</strong>
<ul>
<li>某些节点在等待期间可能因为超时或中断而被取消（<code>waitStatus &gt; 0</code> 表示取消状态）。</li>
<li>如果直接访问 <code>node.next</code>，它可能是一个取消的节点，无法唤醒。</li>
</ul>
</li>
<li><strong><code>node.next</code> 可能为空：</strong>
<ul>
<li>在某些特殊情况下，队列的连接关系可能未完全建立（例如，前后节点未及时更新）。</li>
<li>为了确保不遗漏有效节点，需要从队列尾部逆向查找。</li>
</ul>
</li>
</ol>
<h3 id="最终问题">最终问题</h3>
<ol>
<li>为什么release这边不进行节点的释放,那么最终Node的释放如何控制?</li>
</ol>
<blockquote>
<p>因为对应的逻辑会在acquire进行执行,主要情况是会在acquireQueue中进行,在aquireQueue中如果判断当前node的前驱节点是head,会进行help GC 的操作,而且acquireQueue是一个死循环除非前驱节点是head&amp;&amp;拿到资源了也就是轮到他来执行了,才会去释放掉原本的head,所以我们release只需要去确保能够正确唤醒后续节点即可</p>
</blockquote>
<ol start="2">
<li><code>acquireQueued</code> 是否会阻塞线程？</li>
</ol>
<blockquote>
<p><strong>会阻塞线程。</strong><br>
虽然代码中线程会自旋尝试获取资源，但并不是一直占用 CPU 进行无休止地尝试。</p>
<p>具体来说：</p>
<ul>
<li>如果当前线程的前驱节点不是 <code>head</code>，或者资源无法被成功获取，线程会调用 <code>parkAndCheckInterrupt</code> 方法，将线程挂起（阻塞），直到被显式唤醒。</li>
<li>因此，<code>acquireQueued</code> 的实现并非忙等，而是通过 <strong>自旋 + 阻塞</strong> 的方式高效等待。</li>
</ul>
</blockquote>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.044251560409722224" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-25 11:18">2025-01-25 11:17</span>&nbsp;
<a href="https://www.cnblogs.com/seamount3">海山了-</a>&nbsp;
阅读(<span id="post_view_count">4</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18690818" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18690818);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18690818', targetLink: 'https://www.cnblogs.com/seamount3/p/18690818', title: 'AQS源码解析' })">举报</a>
</div>
        