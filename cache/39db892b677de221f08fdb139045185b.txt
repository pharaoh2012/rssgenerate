
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ofnoname/p/18815655" title="发布于 2025-04-11 22:57">
    <span role="heading" aria-level="2">树链剖分原理讲解：长子继承，树上山河</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在线段树中，我们常常需要维护数组区间上的信息，比如区间和、区间最大值或区间最小值。通过将数组分割成若干子区间，我们实现了对区间的高效查询和更新操作。线段树之所以高效，是因为每次操作只需要处理树上的少数节点，查询和修改操作复杂度均为 <span class="math inline">\(O(\log n)\)</span>。</p>
<p>但如果问题不再局限于<strong>数组区间</strong>，而是转移到<strong>树结构</strong>之上呢？例如，我们希望维护树上从节点 <span class="math inline">\(u\)</span> 到节点 <span class="math inline">\(v\)</span> 的路径上每个节点的信息（查询和修改），这时候线段树直接套用已经行不通了。</p>
<h3 id="树上路径和数组的转换">树上路径和数组的转换</h3>
<p>与数组不同的是，树上的节点并不存在连续的线性关系，每个节点可能存在多个子节点，整体呈现分支结构。节点 <span class="math inline">\(u\)</span> 到节点 <span class="math inline">\(v\)</span> 的路径信息，包括它们的最近公共祖先（LCA）分别到他们的路径，沿着路径遍历。这等价于在数组 <span class="math inline">\(O(n)\)</span>，显然对于大规模数据是无法接受的。</p>
<p>为了解决这个问题，我们迫切需要一种高效的方法，使得在树上的路径维护操作（如区间修改、区间查询）能够达到类似线段树般的复杂度水平。于是，树链剖分便应运而生。</p>
<p><img src="https://img2024.cnblogs.com/blog/1545207/202504/1545207-20250411220847115-523016105.png" alt="image" loading="lazy"></p>
<h2 id="树链剖分原理长子继承法">树链剖分原理：长子继承法</h2>
<p>在树上进行路径维护时，如果我们仍然沿用朴素的方法逐条路径查询，效率将十分低下。为了让树也可以享受线段树的高效，我们要怎样给树上的节点赋值下标呢？</p>
<p>树链剖分的思想是：<strong>将一棵树划分成若干条链，使得树上的路径能够高效地被分解为若干条连续的链，以便利用高效的数据结构（例如线段树）维护链上的信息</strong>。</p>
<p>具体而言，我们将树中的边划分为两类：</p>
<ul>
<li><strong>重边</strong>：连接父亲节点与其子节点中<strong>子树大小最大</strong>的那条边。</li>
<li><strong>轻边</strong>：连接父亲节点与其余子节点的边。</li>
<li><strong>重链</strong>：由重边连接成的链</li>
</ul>
<p>每个节点将它所有子节点中子树最大的“长子”作为重儿子（一样大则任选一个），这样一代代“长子继承”，形成了若干条长长的“世袭”链条，余下的为短短的轻链。接下来按照 dfs 的访问时间戳来为节点赋值，每个子树都总是首先访问自己的重边儿子</p>
<p>实现上，按惯例来讲，进行树链剖分通常需要两次遍历。</p>
<h3 id="步骤一第一次dfs预处理树的基础信息">步骤一：第一次DFS（预处理树的基础信息）</h3>
<p>假定我们用邻接表存储树（存储所有儿子）。首先，我们需要遍历整棵树以收集每个节点的基本信息，包括：</p>
<ul>
<li>每个节点的父节点</li>
<li>节点深度</li>
<li>子树大小</li>
<li>重儿子</li>
</ul>
<h3 id="步骤二第二次dfs重链划分">步骤二：第二次DFS（重链划分）</h3>
<p>我们掌握了树中每个节点的子树大小、深度信息以及确定了每个节点的重儿子。第二步是核心，我们要为节点分配时间戳 <span class="math inline">\(\text {dfn}_x\)</span>，并且将节点划分到各个链当中：</p>
<ul>
<li>标记每个节点所属的链顶 <span class="math inline">\(\text{top}[x]\)</span></li>
<li>为每个节点分配DFS序号 <span class="math inline">\(\text{dfn}[x]\)</span>（也称为时间戳）</li>
</ul>
<p>在进行链划分时，我们总是优先进入重儿子，然后再进入轻儿子们，以保持链的连续性，保证同一重链上的节点DFS序连续，而搜索顺序就是他们在新数据结构里（如线段树）的编号。</p>
<pre><code class="language-cpp">class Tree {
    struct Node {
        int size, fa, hson, top, dfn, dep;
        vector&lt;int&gt; to;
    };

    int n, root;
    vector&lt;Node&gt; nodes;

    void dfs1(int u, int fa) {
        nodes[u].fa = fa;
        nodes[u].size = 1;
        for (int v : nodes[u].to) {
            if (v == fa) continue;
            dfs1(v, u);
            nodes[u].size += nodes[v].size;
            if (nodes[v].size &gt; nodes[nodes[u].hson].size) {
                nodes[u].hson = v;
            }
        }
    }
    void dfs2(int u, int fa, int &amp;idx) {
        nodes[u].dfn = idx++;
        nodes[u].top = (nodes[u].hson == -1) ? u : nodes[nodes[u].hson].top;
        for (int v : nodes[u].to) {
            if (v == fa) continue;
            dfs2(v, u, idx);
        }
    }
public:
    Tree(int n, int root): n(n), nodes(n), root(root) {}
    void addEdge(int u, int v) {
        nodes[u].to.push_back(v);
        nodes[v].to.push_back(u);
    }
    void hld() {
        dfs1(root, -1);
        int idx = 0;
        dfs2(root, -1, idx);
    }
};
</code></pre>
<p>执行完上述两个DFS过程之后，我们就完成了树链的划分，每个节点被划入一条重链或形成轻链。</p>
<p><img src="https://img2024.cnblogs.com/blog/1545207/202504/1545207-20250411220820589-1842929139.png" alt="image" loading="lazy"></p>
<h2 id="树链剖分的性质与复杂度">树链剖分的性质与复杂度</h2>
<p>通过两次DFS剖分后，我们的轻重链划分和时间戳拥有这些性质，主要体现在以下几个重要性质上：</p>
<h4 id="性质1每个节点唯一属于某条重链">性质1：每个节点唯一属于某条重链</h4>
<p>把一个单独叶节点也视为重链的情况下，每个节点被明确划入了一条重链，由 <span class="math inline">\(\text{top}[x]\)</span> 标识。而一条轻边总可以连接两条重链。</p>
<h4 id="性质2dfs序时间戳的连续性">性质2：DFS序（时间戳）的连续性</h4>
<p>同一个子树内的节点，其DFS序（即时间戳 <span class="math inline">\(\text{dfn}[x]\)</span> ）必然连续。同一条重链上的节点，其DFS序也必然连续。这意味着一条重链（或一个子树）的维护（如将所有点修改、查询）可以转化为线段树的区间维护。</p>
<p><img src="https://img2024.cnblogs.com/blog/1545207/202504/1545207-20250411220917063-1781170961.png" alt="image" loading="lazy"></p>
<h4 id="性质3树上任意两点路径最多经过--条重链">性质3：树上任意两点路径最多经过 <span class="math inline">\(O(\log n)\)</span> 条重链</h4>
<p><strong>这是树链剖分最核心的性质之一。</strong>每个节点到根节点路径上经过的轻链数目不会超过 <span class="math inline">\(O(\log n)\)</span>，因此从任意节点到另一节点的路径也最多经过 <span class="math inline">\(O(\log n)\)</span> 条重链。</p>
<p>这是因为，每个节点到根节点的路径上，每经过轻链时子树大小至少减半（因为轻链连接的是轻儿子，其不是最终的儿子，大小一定大于父节点的一半）</p>
<p>有了以上性质后，我们可以将树上路径维护问题<strong>转化为最多<span class="math inline">\(O(\log n)\)</span>次区间维护问题</strong>：</p>
<p>假设我们需要维护节点 <span class="math inline">\(u\)</span> 到节点 <span class="math inline">\(v\)</span> 的路径，要将其拆分为多条重链。我们可以不断将节点所在的链顶深度较深的节点上跳至链顶节点的父亲，直到两节点处于同一条重链中为止：</p>
<pre><code class="language-cpp">void path(int u, int v) {
    while (nodes[u].top != nodes[v].top) {
        if (nodes[nodes[u].top].dep &lt; nodes[nodes[v].top].dep) swap(u, v);
        // 处理重链里 u 到 top[u] 部分
        u = nodes[nodes[u].top].fa;
    }
    if (nodes[u].dfn &gt; nodes[v].dfn) swap(u, v);
    // 处理重链里 u 到 v 部分
}
</code></pre>
<p>通过上述方法，路径查询或修改问题被成功地转化为线段树上最多 <span class="math inline">\(O(\log n)\)</span> 次的区间维护操作。</p>
<h4 id="树链剖分的复杂度分析">树链剖分的复杂度分析</h4>
<p>树链剖分的效率主要分为两个阶段：</p>
<ul>
<li>
<p><strong>预处理阶段</strong>：</p>
<ul>
<li>进行两次DFS，复杂度显然为 <span class="math inline">\(O(n)\)</span>。</li>
<li>构建线段树或其他数据结构，复杂度通常为 <span class="math inline">\(O(n)\)</span>。</li>
</ul>
</li>
<li>
<p><strong>单次操作阶段（路径查询或修改）</strong>：</p>
<ul>
<li>单次路径维护最多涉及 <span class="math inline">\(O(\log n)\)</span> 条链。</li>
<li>每次涉及链上的区间维护，线段树复杂度为 <span class="math inline">\(O(\log n)\)</span>。</li>
<li>故总复杂度为 <span class="math inline">\(O(\log^2 n)\)</span>。</li>
</ul>
</li>
</ul>
<p>总结一下树链剖分的复杂度为：</p>
<table>
<thead>
<tr>
<th>阶段</th>
<th>操作内容</th>
<th>时间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>预处理</td>
<td>两次DFS + 数据结构构建</td>
<td><span class="math inline">\(O(n)\)</span></td>
</tr>
<tr>
<td>单次维护</td>
<td>路径修改或查询</td>
<td><span class="math inline">\(O(\log^2 n)\)</span></td>
</tr>
</tbody>
</table>
<p>通常 <span class="math inline">\(O(\log^2 n)\)</span> 已经能很好满足绝大多数树上问题的需求了，而树链剖分实现难度适中，因此应用十分广泛。</p>
<h2 id="树链剖分与-lca">树链剖分与 LCA</h2>
<p>树链剖分由于天然维护了树的链状结构和深度信息，可以用来高效求解LCA问题。既然之前都已经实现求解两点间的路径并分为少量重链了。求解 LCA 实际上更简单。</p>
<p>回忆一下我们上一节讲到的树链剖分的重要性质：树上的任意一条路径可以被分解为最多 <span class="math inline">\(O(\log n)\)</span> 条连续的链段。</p>
<p>这意味着，当我们需要求解两个节点 <span class="math inline">\(u\)</span> 与 <span class="math inline">\(v\)</span> 的 LCA 时，可以沿着重链迅速地将两个节点“上跳”到同一条重链，然后再简单判断二者的深度即可确定 LCA。</p>
<p>具体的求解过程如下：</p>
<ol>
<li>若两个节点不在同一重链，选择较深的节点，将该节点跳到其当前链顶的父节点。</li>
<li>重复第1步，直到两个节点在同一条重链内。</li>
<li>此时，深度较小的节点即为所求LCA。</li>
</ol>
<p><img src="https://img2024.cnblogs.com/blog/1545207/202504/1545207-20250411230804352-1881193193.png" alt="image" loading="lazy"></p>
<pre><code class="language-cpp">int lca(int u, int v) {
    while (nodes[u].top != nodes[v].top) {
        if (nodes[nodes[u].top].dep &lt; nodes[nodes[v].top].dep) swap(u, v);
        u = nodes[nodes[u].top].fa;
    } return (nodes[u].dfn &lt; nodes[v].dfn) ? u : v;
}
</code></pre>
<h3 id="树链剖分求lca与其他方法的对比">树链剖分求LCA与其他方法的对比</h3>
<p>LCA问题有多种经典算法，包括：</p>
<ul>
<li>倍增法（Binary Lifting）</li>
<li>Tarjan 离线算法（基于并查集）</li>
<li>欧拉序+RMQ方法</li>
<li>树链剖分方法</li>
</ul>
<p>下面我们将树链剖分求LCA方法与这些常用方法进行比较：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>预处理复杂度</th>
<th>单次查询复杂度</th>
<th>优势</th>
<th>劣势</th>
<th>在线性</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>树链剖分</strong></td>
<td><span class="math inline">\(O(n)\)</span></td>
<td><span class="math inline">\(O(\log n)\)</span></td>
<td>实现简单，便于与其他树链剖分任务结合</td>
<td>单次复杂度略高于RMQ</td>
<td>在线</td>
</tr>
<tr>
<td>倍增法</td>
<td><span class="math inline">\(O(n \log n)\)</span></td>
<td><span class="math inline">\(O(\log n)\)</span></td>
<td>实现直观</td>
<td>实践中常数稍大</td>
<td>在线</td>
</tr>
<tr>
<td>Tarjan算法</td>
<td><span class="math inline">\(O(n+q)\)</span>（离线）</td>
<td>均摊<span class="math inline">\(O(1)\)</span></td>
<td>单次查询最快</td>
<td>离线处理，无法实时回答</td>
<td>离线</td>
</tr>
<tr>
<td>欧拉序+RMQ</td>
<td><span class="math inline">\(O(n \log n)\)</span></td>
<td><span class="math inline">\(O(1)\)</span></td>
<td>在线查询效率最高</td>
<td>需额外处理RMQ问题，空间较大</td>
<td>在线</td>
</tr>
</tbody>
</table>
<p>我们可以看到，树链剖分虽然单次查询复杂度略高于欧拉序+RMQ方法，但优势也很明显：</p>
<ul>
<li>与树链剖分的其他操作（路径修改、查询）相结合极其自然。</li>
<li>实现简单，便于维护和扩展。</li>
<li>不需要额外的大空间，数据结构也统一。</li>
</ul>
<p>因此，在实际编程竞赛或工程应用中，如果已经采用了树链剖分维护其他树上问题，那么使用树链剖分直接求LCA通常是一个很好的选择。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5480367497939815" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-11 23:09">2025-04-11 22:57</span>&nbsp;
<a href="https://www.cnblogs.com/ofnoname">Ofnoname</a>&nbsp;
阅读(<span id="post_view_count">48</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18815655" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18815655);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18815655', targetLink: 'https://www.cnblogs.com/ofnoname/p/18815655', title: '树链剖分原理讲解：长子继承，树上山河' })">举报</a>
</div>
        