
        <h2>
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wuhuacong/p/18637653" title="发布于 2024-12-28 16:50">
    <span role="heading" aria-level="2">WxPython跨平台开发框架之列表数据的通用打印处理</span>
    

</a>

        </h2>
        <div class="postbody">
                <div id="cnblogs_post_description" style="display: none">
        
        在WxPython跨平台开发框架中，我们大多数情况下，数据记录通过wx.Grid的数据表格进行展示，其中表格的数据记录的显示和相关处理，通过在基类窗体 BaseListFrame 进行统一的处理，因此对于常规的数据记录打印，我们也可以在其中集成相关的打印处理，本篇随笔介绍如何利用WxPython内置的打印数据组件实现列表数据的自定义打印处理，以及对记录进行分页等常规操作。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>在WxPython跨平台开发框架中，我们大多数情况下，数据记录通过wx.Grid的数据表格进行展示，其中表格的数据记录的显示和相关处理，通过在基类窗体&nbsp;BaseListFrame 进行统一的处理，因此对于常规的数据记录打印，我们也可以在其中集成相关的打印处理，本篇随笔介绍如何利用WxPython内置的打印数据组件实现列表数据的自定义打印处理，以及对记录进行分页等常规操作。</p>
<h3>1、WxPython内置的打印数据组件</h3>
<p><code>wx.PrintPreview</code>、<code>wx.Printer</code> 和 <code>wx.Printout</code> 是 wxPython 提供的用于打印功能的核心类。它们帮助开发者在程序中实现打印和打印预览功能。下面是关于这三个类的详细介绍及其使用方法。</p>
<h4>1） <strong><code>wx.Printout</code></strong></h4>
<p><code>wx.Printout</code> 是一个抽象类，通常需要被子类化以便在打印时自定义页面内容。你可以通过继承 <code>wx.Printout</code> 类来实现自定义打印内容，重写 <code>OnPrintPage</code> 方法来决定每一页的打印内容。</p>
<p>常用方法：</p>
<ul>
<li><strong><code>OnPrintPage(page)</code></strong>: 该方法是打印过程中每一页的核心方法。你需要在这里绘制要打印的内容，例如文本、图片、图形等。每次页面需要绘制时，该方法会被调用。</li>
<li><strong><code>GetDC()</code></strong>: 获取一个打印设备上下文（<code>wx.DC</code> 对象），用于在页面上绘制内容。</li>
<li><strong><code>HasPage(page)</code></strong>: 该方法用于检查是否有足够的内容来填充打印页面，返回 <code>True</code> 或 <code>False</code>。</li>
</ul>
<p>简单的wx.PrintOut的子类继承处理如下所示。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> wx

</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> MyPrintout(wx.Printout):
    </span><span style="color: rgba(0, 0, 255, 1)">def</span> <span style="color: rgba(128, 0, 128, 1)">__init__</span><span style="color: rgba(0, 0, 0, 1)">(self):
        super().</span><span style="color: rgba(128, 0, 128, 1)">__init__</span><span style="color: rgba(0, 0, 0, 1)">()

    </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> OnPrintPage(self, page):
        dc </span>=<span style="color: rgba(0, 0, 0, 1)"> self.GetDC()
        dc.SetFont(wx.Font(</span>10<span style="color: rgba(0, 0, 0, 1)">, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))
        dc.DrawText(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Hello, this is a print test!</span><span style="color: rgba(128, 0, 0, 1)">"</span>, 100, 100<span style="color: rgba(0, 0, 0, 1)">)
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> True</pre>
</div>
<p>一般情况下，我们肯定会添加很多相关的绘制逻辑处理，这里只是简单的介绍。</p>
<h4>2）&nbsp;<strong><code>wx.Printer</code></strong></h4>
<p><code>wx.Printer</code> 是用来执行实际打印操作的类。它用于与打印机进行交互，发送页面内容到打印机。你可以使用 <code>wx.Printer</code> 来选择打印机、启动打印作业并发送打印内容。</p>
<p>常用方法：</p>
<ul>
<li><strong><code>Print(printout)</code></strong>: 用于启动打印操作，将 <code>printout</code> 对象中的内容发送到打印机。</li>
<li><strong><code>GetCurrentPrinterName()</code></strong>: 获取当前选定的打印机名称。</li>
<li><strong><code>SetPageSize(width, height)</code></strong>: 设置打印页面的大小。</li>
<li><strong><code>SetPrintData(print_data)</code></strong>: 设置打印的数据，控制打印的纸张大小、打印质量等</li>
</ul>
<h4>3） <strong><code>wx.PrintPreview</code></strong></h4>
<p><code>wx.PrintPreview</code> 用于实现打印预览功能，它允许你查看打印内容的预览，而不是直接将内容发送到打印机。通过打印预览，你可以看到打印文档的外观，并进行调整（如分页、内容布局等）。</p>
<p>常用方法：</p>
<ul>
<li><strong><code>IsOk()</code></strong>: 检查打印预览是否成功创建。</li>
<li><strong><code>Show()</code></strong>: 显示打印预览窗口。</li>
<li><strong><code>SetPagesPerPreview(pages)</code></strong>: 设置每个预览页面显示的页面数。</li>
</ul>
<p>通常，<code>wx.PrintPreview</code> 是在打印机选择之前使用的，它会展示打印内容的预览。预览确认后，用户可以选择继续打印，程序则使用 <code>wx.Printer</code> 实际执行打印操作。</p>
<p>&nbsp;</p>
<p>绘制二维表的打印预览可以通过在 <code>wx.Printout</code> 类的 <code>OnPrintPage</code> 方法中逐行逐列绘制表格内容。为了实现更复杂的表格布局，通常需要计算每一行和每一列的位置，确保文本不会超出页面边界，并在必要时分页。</p>
<p>如果需要在 wxPython 中实现打印预览，可以使用 <code>wx.PrintPreview</code> 类来生成打印预览。这个类允许你在显示打印预览时，不直接打印内容，而是显示一个打印的“模拟”视图，用户可以在此视图中查看打印效果，决定是否继续打印。</p>
<p><strong>高级功能：表格样式</strong></p>
<p>如果你需要更复杂的表格样式（例如，添加边框、背景色或其他格式化功能），你可以通过 <code>dc.SetPen()</code>、<code>dc.SetBrush()</code> 等方法来实现。</p>
<p>示例：给表格添加边框</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> draw_table_border(dc, x_pos, y_pos, width, height):
    dc.SetPen(wx.Pen(wx.Colour(0, 0, 0)))  </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 设置边框颜色</span>
    dc.SetBrush(wx.Brush(wx.Colour(255, 255, 255)))  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 设置背景颜色</span>
    dc.DrawRectangle(x_pos, y_pos, width, height)</pre>
</div>
<p>你可以在 <code>OnPrintPage</code> 方法中调用此函数，为每个单元格添加边框。</p>
<p>&nbsp;</p>
<h3>2、在框架的基类窗体中实现自定义打印及分页处理</h3>
<p>在我的WxPython跨平台开发框架中，我们对于常规窗体列表界面做了抽象处理，一般绝大多数的逻辑封装在基类上，基类提供一些可重写的函数给子类实现弹性化的处理。</p>
<p>如下是基类窗体和其他窗体之间的集成关系。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202411/8867-20241111131058275-415274506.png" alt="" class="medium-zoom-image" loading="lazy"></p>
<p>一般列表界面，如下所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202412/8867-20241228154910626-1764508971.png" alt=""></p>
<p>我们打印模块的处理，需要把这些列表的记录显示在打印预览界面上，并决定是否继续打印即可。</p>
<p>前面介绍了wx.PrintOut的子类处理，只是简单的输出一些文本信息，一般对于更复杂的打印需求（例如表格或多页文档），你可以在 <code>OnPrintPage</code> 中使用更复杂的绘制逻辑。例如，绘制多个表格行或根据页数拆分内容等等。</p>
<p>我们先来看看实现后的打印预览界面效果，有一个感官认识后再继续探寻它的实现机制。</p>
<p>打印预览入口，在列表界面上右键，弹出打印菜单，如下界面所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202412/8867-20241228155336036-1365203876.png" alt=""></p>
<p>打印预览界面如下所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202412/8867-20241228155712289-2015393758.png" alt=""></p>
<p>我们来看看，对于列表数据，我们是如何一步步通过自定义的方式实现打印的内容绘制的。</p>
<p>打印有几个注意的地方，由于不同的操作系统或者不同的设置可能会导致打印面板的尺寸有所差异，因此最好统一转换为一个逻辑的尺寸处理；另外分页的处理是关键，需要根据字体文字计算出你绘制一行所需要的高度，然后根据操作的页面高度计算可以绘制的行数，然后在表格行记录中循环处理，判断达到每页的行数就换行即可。</p>
<p>在我们的WxPython跨平台框架中列表入口菜单的实现如下代码所示，主要就是调用MyPrintOut的自定义对象，然后调用PrintPreview进行打印预览窗体的显示即可，如下代码所示。</p>
<div class="cnblogs_code">
<pre>    <span style="color: rgba(0, 0, 255, 1)">def</span> OnPrint(self, event: wx.Event) -&gt;<span style="color: rgba(0, 0, 0, 1)"> None:
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">打印表格</span><span style="color: rgba(128, 0, 0, 1)">"""</span>

        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 创建打印数据对象</span>
        pageData =<span style="color: rgba(0, 0, 0, 1)"> wx.PrintData()
        pageData.SetPaperId(wx.PAPER_A4)  </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 设置纸张类型为 A4</span>
        pageData.SetOrientation(wx.LANDSCAPE)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 设置纸张方向为纵向</span>

        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 将打印数据设置到打印机对象</span>
        data =<span style="color: rgba(0, 0, 0, 1)"> wx.PrintDialogData(pageData)
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 窗口标题</span>
        page_title =<span style="color: rgba(0, 0, 0, 1)"> self.GetTitle()

        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 创建打印输出对象</span>
        printout =<span style="color: rgba(0, 0, 0, 1)"> ctrl.MyPrintout(self.grid, page_title)
        printout2 </span>=<span style="color: rgba(0, 0, 0, 1)"> ctrl.MyPrintout(self.grid, page_title)

        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 创建打印机对象，并将打印数据传递给打印机</span>
        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> printer = wx.Printer(data)</span>
        preview = wx.PrintPreview(printout, printout2, data=<span style="color: rgba(0, 0, 0, 1)">data)
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> preview.IsOk():
            preview.SetZoom(</span>100<span style="color: rgba(0, 0, 0, 1)">)
            frame </span>=<span style="color: rgba(0, 0, 0, 1)"> wx.PreviewFrame(
                preview, self, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">打印预览</span><span style="color: rgba(128, 0, 0, 1)">"</span>, pos=self.GetPosition(), size=<span style="color: rgba(0, 0, 0, 1)">self.GetSize()
            )
            frame.Initialize()
            frame.Show(True)</span></pre>
</div>
<p>wx.PrintPreview需要接受两个PrintOut对象，如代码：printout, printout2</p>
<p>wx.PrintData 主要就是指定页面尺寸及布局等相关信息，具体的逻辑还是在自定义的&nbsp;MyPrintout 类里面，它接受当前的wx.Grid对象和当前页面的标题。</p>
<p>而ctrl.MyPrintOut是我们根据需要打印的二维表内容进行的逻辑封装，它们的类初始化代码如下。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> MyPrintout(wx.Printout):
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">创建一个自定义的 wx.Printout 类，在其中定义如何打印 wx.Grid 的内容。</span><span style="color: rgba(128, 0, 0, 1)">"""</span>

    <span style="color: rgba(0, 0, 255, 1)">def</span> <span style="color: rgba(128, 0, 128, 1)">__init__</span><span style="color: rgba(0, 0, 0, 1)">(
        self,
        grid: gridlib.Grid,
        title: str </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">打印标题</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        margins</span>=(wx.Point(10, 10), wx.Point(10, 10<span style="color: rgba(0, 0, 0, 1)">)),
    ):
        super().</span><span style="color: rgba(128, 0, 128, 1)">__init__</span><span style="color: rgba(0, 0, 0, 1)">()
        self.grid </span>=<span style="color: rgba(0, 0, 0, 1)"> grid
        self.title </span>=<span style="color: rgba(0, 0, 0, 1)"> title
        self.margins </span>=<span style="color: rgba(0, 0, 0, 1)"> margins

        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 获取网格的行列数</span>
        self.row_count =<span style="color: rgba(0, 0, 0, 1)"> self.grid.GetNumberRows()
        self.col_count </span>=<span style="color: rgba(0, 0, 0, 1)"> self.grid.GetNumberCols()
        self.current_row </span>= 0  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 记录当前打印的行数</span></pre>
</div>
<p>我们记录表格对象，以及表格的行数和列数，以及当前打印的行数，默认从0开始，在每次计算分页的时候，需要知道当前的记录才能接着绘制剩余的记录。</p>
<p>我们通过转换逻辑单位，获得绘制设备的页面高度和宽度，然后每行记录的高度，我们根据内容的实际高度+一定的空白间距，如下代码</p>
<div class="cnblogs_code">
<pre>        font =<span style="color: rgba(0, 0, 0, 1)"> wx.Font(
            FONTSIZE, wx.FONTFAMILY_TELETYPE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL
        )
        dc.SetFont(font)
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 计算每行的高度</span>
        self.lineHeight = dc.GetCharHeight() + 5  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 加上5像素的间距</span></pre>
</div>
<p>计算每页可以绘制多少行，需要记录摒除标题内容、表格标题行以及相关空白，剩下的页面高度除以一行的高度，进行计算获得即可。如下代码所示。</p>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 标题高度 + 标题底部空白行高度 + 表头高度</span>
        y_offset = 20 + 20 + 20
        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 计算每页可以显示的行数</span>
        self.linesPerPage = int((self.pageHeight - y_offset) // self.lineHeight)</pre>
</div>
<p>然后，我们在PrintOut的子类实现中重写 OnPreparePrinting(self) 函数，这个函数在绘制页面前执行一次，我们需要在其中计算出页面的数量。</p>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 计算页面数</span>
        self.numPages = self.row_count //<span style="color: rgba(0, 0, 0, 1)"> self.linesPerPage
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> self.row_count % self.linesPerPage !=<span style="color: rgba(0, 0, 0, 1)"> 0:
            self.numPages </span>+= 1</pre>
</div>
<p>然后在重写两个函数，决定是否存在下一页，以及页码信息，如下所示的函数实现。</p>
<div class="cnblogs_code">
<pre>    <span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> HasPage(self, page):
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> page &lt;=<span style="color: rgba(0, 0, 0, 1)"> self.numPages

    </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> GetPageInfo(self):
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> (1, self.numPages, 1, self.numPages)</pre>
</div>
<p>剩下的就是实现</p>
<div>def OnPrintPage(self, page: int) -&gt; bool:</div>
<p>这个函数就是主要控制绘制内容和分页标识的处理的。</p>
<p>绘制的内容，主要根据起始位置，并设置相关的字体大小实现绘制即可，我们简单介绍一下，如下是在页面顶部的中间绘制标题。</p>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 绘制标题，居中显示</span>
        text_width, text_height =<span style="color: rgba(0, 0, 0, 1)"> dc.GetTextExtent(self.title)
        title_x </span>= (width - text_width) // 2  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 计算居中的X位置</span>
        dc.DrawText(self.title, int(title_x), int(y_offset))</pre>
</div>
<p>线条的绘制也是类似，确定位置和颜色等，画线绘制即可。</p>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 设置线条颜色</span>
        dc.SetPen(wx.Pen(wx.Colour(0, 0, 0)))  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 黑色线条</span>
        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 将所有的坐标转换为整数</span>
        dc.DrawLine(line_x, line_y, line_x + line_width, line_y)</pre>
</div>
<p>绘制表头的时候，我们切换会正常的字体大小，然后遍历绘制</p>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 绘制表头</span>
<span style="color: rgba(0, 0, 0, 1)">        font.SetPointSize(FONTSIZE)
        dc.SetFont(font)
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> col <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> range(self.col_count):
            dc.DrawText(
                self.grid.GetColLabelValue(col),
                int(x_offset </span>+<span style="color: rgba(0, 0, 0, 1)"> sum(col_widths[:col])),
                int(y_offset),
            )</span></pre>
</div>
<p>其中的&nbsp;col_widths 是我们前面根据表格的列数量进行计算的宽度集合</p>
<div class="cnblogs_code">
<pre>col_widths = [self.grid.GetColSize(col) <span style="color: rgba(0, 0, 255, 1)">for</span> col <span style="color: rgba(0, 0, 255, 1)">in</span> range(self.col_count)]</pre>
</div>
<p>以上内容是我们每页都需要绘制的常规信息，因此先绘制报表表头、线条、表格标题行这些。</p>
<p>下面我们需要根据当前page的页码来计算当前开始的行记录，page为1的时候，那么当前的开始行号是0，否则就是根据页码计算数值。</p>
<div class="cnblogs_code">
<pre>self.current_row = (page - 1) * self.linesPerPage  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 计算当前页面的起始行数</span></pre>
</div>
<p>下面就是对数据进行分页的处理了，如果需要分页，在OnPrintPage函数中返回False，否则返回True，如下代码所示。</p>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 绘制表格的内容</span>
        lines_on_page = 0  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 记录当前页面的行数</span>
        <span style="color: rgba(0, 0, 255, 1)">for</span> row <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> range(self.current_row, self.row_count):
            y_offset </span>+= self.lineHeight  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 增加行的高度</span>
            <span style="color: rgba(0, 0, 255, 1)">for</span> col <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> range(self.col_count):
                cell_value </span>=<span style="color: rgba(0, 0, 0, 1)"> self.grid.GetCellValue(row, col)
                dc.DrawText(
                    cell_value,
                    x_offset </span>+<span style="color: rgba(0, 0, 0, 1)"> sum(col_widths[:col]),
                    y_offset,
                )
            lines_on_page </span>+= 1
            <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 如果当前页面的行数已经达到最大值，则绘制页脚，并返回False，继续打印下一页</span>
            <span style="color: rgba(0, 0, 255, 1)">if</span> lines_on_page &gt;=<span style="color: rgba(0, 0, 0, 1)"> self.linesPerPage:
                self.draw_footer(dc, page) </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 绘制页脚，底部的页码</span>
                <span style="color: rgba(0, 0, 255, 1)">return</span> False  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 打印完一页后返回False，继续打印下一页</span>
<span style="color: rgba(0, 0, 0, 1)">
        self.draw_footer(dc, page)
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> True</pre>
</div>
<p>而底部的页码信息，我们简单绘制当前页面和页面总数即可，如下函数。</p>
<div class="cnblogs_code">
<pre>    <span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> draw_footer(self, dc: wx.DC, page: int):
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 绘制当前页码</span>
        page_num_text = f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">当前页码: {page} / {self.numPages}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
        page_num_width, page_num_height </span>=<span style="color: rgba(0, 0, 0, 1)"> dc.GetTextExtent(page_num_text)
        dc.DrawText(
            page_num_text,
            int((self.pageWidth </span>- page_num_width) // 2<span style="color: rgba(0, 0, 0, 1)">),
            int(self.y2),
        )</span></pre>
</div>
<p>最后获得随笔开始前介绍的效果。</p>
<p>如果没有分页信息，那么底部空白一些，还是会绘制页码信息，如下是没有更多记录的时候打印预览的界面效果</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202412/8867-20241228164852347-448781208.png" alt=""></p>
<p>以上就是整个实现的过程，我们在WxPython开发框架中自定义PrintOut对象，实现WxPython跨平台开发框架之列表数据的通用打印处理过程。</p>
</div>
<div id="MySignature" role="contentinfo">
    <div style="border-right-color: #cccccc; border-right-width: 1px; border-right-style: solid; padding-right: 5px; border-top-color: #cccccc; border-top-width: 1px; border-top-style: solid; padding-left: 4px; font-size: 13px; padding-bottom: 4px; border-left-color: #cccccc; border-left-width: 1px; border-left-style: solid; width: 98%; padding-top: 4px; border-bottom-color: #cccccc; border-bottom-width: 1px; border-bottom-style: solid; background-color: #eeeeee;">
    <img src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif" align="top" alt="">
    <span style="color: #000000"><span class="Apple-tab-span" style="white-space: pre"></span>
     专注于代码生成工具、.Net/.NetCore 框架架构及软件开发，以及各种Vue.js的前端技术应用。著有Winform开发框架/混合式开发框架、微信开发框架、Bootstrap开发框架、ABP开发框架、SqlSugar开发框架等框架产品。
     <br>&nbsp;&nbsp;转载请注明出处：撰写人：伍华聪&nbsp;&nbsp;<a href="http://www.iqidi.com/" target="_blank">http://www.iqidi.com</a>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span></div>
</div>
<div class="clear"></div>

        </div>
        <p class="postfoot">
            posted on 
<span id="post-date" data-last-update-days="0.05851890887731481" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-28 16:50">2024-12-28 16:50</span>&nbsp;
<a href="https://www.cnblogs.com/wuhuacong">伍华聪</a>&nbsp;
阅读(<span id="post_view_count">15</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18637653" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18637653);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18637653', targetLink: 'https://www.cnblogs.com/wuhuacong/p/18637653', title: 'WxPython跨平台开发框架之列表数据的通用打印处理' })">举报</a>

        </p>
    