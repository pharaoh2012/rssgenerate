
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Albiehao/p/18823923" title="发布于 2025-04-13 22:11">
    <span role="heading" aria-level="2">leetcode001 两数之和</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h3 id="问题描述两数之和"><strong>问题描述：两数之和</strong></h3>
<p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值 <code>target</code></strong> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案，并且<strong>不能重复使用相同的元素</strong>。可以按任意顺序返回答案。</p>
<hr>
<h3 id="示例"><strong>示例</strong></h3>
<h4 id="示例-1"><strong>示例 1</strong></h4>
<ul>
<li><strong>输入</strong>: <code>nums = [2,7,11,15], target = 9</code></li>
<li><strong>输出</strong>: <code>[0,1]</code></li>
<li><strong>解释</strong>: 因为 <code>nums[0] + nums[1] == 9</code>，返回 <code>[0, 1]</code>。</li>
</ul>
<h4 id="示例-2"><strong>示例 2</strong></h4>
<ul>
<li><strong>输入</strong>: <code>nums = [3,2,4], target = 6</code></li>
<li><strong>输出</strong>: <code>[1,2]</code></li>
<li><strong>解释</strong>: <code>nums[1] + nums[2] == 6</code>，返回 <code>[1, 2]</code>。</li>
</ul>
<h4 id="示例-3"><strong>示例 3</strong></h4>
<ul>
<li><strong>输入</strong>: <code>nums = [3,3], target = 6</code></li>
<li><strong>输出</strong>: <code>[0,1]</code></li>
<li><strong>解释</strong>: <code>nums[0] + nums[1] == 6</code>，返回 <code>[0, 1]</code>。</li>
</ul>
<hr>
<h3 id="约束条件"><strong>约束条件</strong></h3>
<ul>
<li><code>2 &lt;= nums.length &lt;= 10⁴</code></li>
<li><code>-10⁹ &lt;= nums[i] &lt;= 10⁹</code></li>
<li><code>-10⁹ &lt;= target &lt;= 10⁹</code></li>
<li><strong>只会存在一个有效答案</strong></li>
</ul>
<hr>
<h3 id="进阶要求"><strong>进阶要求</strong></h3>
<p><strong>你能想出一个时间复杂度小于 O(n²) 的算法吗？</strong></p>
<hr>
<h3 id="解法思路"><strong>解法思路</strong></h3>
<h4 id="1-暴力枚举brute-force"><strong>1. 暴力枚举（Brute Force）</strong></h4>
<ul>
<li><strong>时间复杂度</strong>: O(n²)</li>
<li><strong>空间复杂度</strong>: O(1)</li>
<li><strong>思路</strong>：
<ul>
<li>使用双重循环，遍历所有可能的两个数的组合。</li>
<li>检查它们的和是否等于 <code>target</code>，如果找到则返回下标。</li>
</ul>
</li>
</ul>
<h4 id="2-哈希表优化optimal-solution"><strong>2. 哈希表优化（Optimal Solution）</strong></h4>
<ul>
<li><strong>时间复杂度</strong>: O(n)</li>
<li><strong>空间复杂度</strong>: O(n)</li>
<li><strong>思路</strong>：
<ul>
<li>使用哈希表（如 <code>unordered_map</code>）存储 <code>{value: index}</code>。</li>
<li>遍历数组，对于每个元素 <code>nums[i]</code>，计算 <code>complement = target - nums[i]</code>。</li>
<li>检查 <code>complement</code> 是否在哈希表中：
<ul>
<li>如果存在，直接返回 <code>{map[complement], i}</code>。</li>
<li>否则，将当前 <code>nums[i]</code> 存入哈希表。</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h3 id="代码实现"><strong>代码实现</strong></h3>
<h4 id="暴力枚举c"><strong>暴力枚举（C++）</strong></h4>
<pre><code class="language-cpp">class Solution {
public:
    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {
        // 暴力枚举
        for(int i = 0; i &lt; nums.size(); i++){  
            for(int j = i + 1; j &lt; nums.size(); j++){  
                if(nums[i] + nums[j] == target){ 
                    return {i, j};  
                }
            }
        }
        return {};  // 理论上题目保证有解，但最好添加默认返回值
    }
};
</code></pre>
<h4 id="哈希表优化c"><strong>哈希表优化（C++）</strong></h4>
<pre><code class="language-cpp">
</code></pre>
<hr>
<h3 id="总结"><strong>总结</strong></h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>时间复杂度</th>
<th>空间复杂度</th>
<th>适用情况</th>
</tr>
</thead>
<tbody>
<tr>
<td>暴力枚举</td>
<td>O(n²)</td>
<td>O(1)</td>
<td>数据量较小</td>
</tr>
<tr>
<td>哈希表优化</td>
<td>O(n)</td>
<td>O(n)</td>
<td>数据量较大</td>
</tr>
</tbody>
</table>
<p><strong>推荐使用哈希表优化解法</strong>，因为它显著降低了时间复杂度，适用于较大的输入规模。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0022286104953703704" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-13 22:11">2025-04-13 22:11</span>&nbsp;
<a href="https://www.cnblogs.com/Albiehao">Albiehao</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18823923);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18823923', targetLink: 'https://www.cnblogs.com/Albiehao/p/18823923', title: 'leetcode001 两数之和' })">举报</a>
</div>
        