
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/houhuilinblogs/p/18737565" title="发布于 2025-02-26 00:00">
    <span role="heading" aria-level="2">redis - [07] 数据类型</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<blockquote>
<p><span style="font-family: 楷体; font-size: 18px">  redis是一个开源(BSD许可)的，内存中的数据结构存储系统，可以用作数据库、缓存和消息中间件MQ。它支持多种类型的数据结构，如字符串（String）、散列（Hash）、列表（List）、集合（Set）、有序集合（Sorted Sets）与范围查询（bitmaps、hyperloglogs）和地理空间（geospatial）索引半径查询。Redis内置了复制（replication）、LUA脚本（Lua Scripting</span><span style="font-family: 楷体; font-size: 18px">）、LRU驱动事件、事务（Transactions）和不同级别的磁盘持久化（Persistence），并通过Redis哨兵（Sentinel）和自动分区（Cluster）提供高可用性。redis不区分大小写命令。</span></p>
</blockquote>
<p>&nbsp;</p>
<h3><span style="font-family: 楷体; font-size: 18px">000 || redis-key</span></h3>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; set name harley # 设置key
OK
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; keys *    # 查看当前数据库中所有的key
1) "name"
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; exists name # 查看是否存在某key
(integer) 1
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; move name 1 # 移除key
(integer) 1
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; keys *
(empty array)
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; set name harley
OK
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; keys *
1) "name"
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; clear # 清屏
127.0.0.1:6379&gt; expire name 10 # 设置name的过期时间为10s
(integer) 1
127.0.0.1:6379&gt; ttl name # 查看name的剩余过期时间
(integer) 7
127.0.0.1:6379&gt; ttl name
(integer) 3
127.0.0.1:6379&gt; get name # 查看name的值
(nil)
127.0.0.1:6379&gt; set name harley
OK
127.0.0.1:6379&gt; type name # 查看key的类型
string
127.0.0.1:6379&gt;</code></pre>
<blockquote>
<p><span style="font-family: 楷体; font-size: 18px">过期时间可以用于设置cookie的过期时间设置</span></p>
</blockquote>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3><span style="font-family: 楷体; font-size: 18px">001 ||&nbsp;String</span></h3>
<blockquote>
<p><span style="font-family: 楷体; font-size: 18px">90%的java程序员使用redis只会使用一个String类型</span></p>
</blockquote>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; set key1 v1  # 设置值
OK
127.0.0.1:6379&gt; get key1 # 获得值
"v1"
127.0.0.1:6379&gt; keys * # 查看所有的键
1) "key1"
127.0.0.1:6379&gt; exists key1 # 判断某key是否存在
(integer) 1
127.0.0.1:6379&gt; append key1 "hello" # 追加字符串,如果key1不存在即新建
(integer) 7
127.0.0.1:6379&gt; get key1 # 查看键
"v1hello"
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; STRLEN key1 # 获取字符串的长度
(integer) 7
127.0.0.1:6379&gt; APPEND key1 harley
(integer) 13
127.0.0.1:6379&gt; STRLEN key1
(integer) 13
127.0.0.1:6379&gt; get key1
"v1helloharley"
127.0.0.1:6379&gt;</code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">计数器</span></h4>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; set views 0 # 初始值为0
OK
127.0.0.1:6379&gt; get views
"0"
127.0.0.1:6379&gt; INCR views # 自增1
(integer) 1
127.0.0.1:6379&gt; get views
"1"
127.0.0.1:6379&gt; INCR views
(integer) 2
127.0.0.1:6379&gt; INCR views
(integer) 3
127.0.0.1:6379&gt; get views
"3"
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; decr views # 自减1
(integer) 2
127.0.0.1:6379&gt; decr views
(integer) 1
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; get views
"1"
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; INCRBY views 10 # 步长10，自增10
(integer) 11
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; DECRBY views 5 # 自减5
(integer) 6</code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">字符串范围</span></h4>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; set key1 "hello,harley" # 设置key1的值
OK
127.0.0.1:6379&gt; get key1
"hello,harley"
127.0.0.1:6379&gt; GETRANGE key1 0 3 # 截取字符串[0,3]
"hell"
127.0.0.1:6379&gt; GETRANGE key1 0 -1 # 获取全部的字符串 等同于get key
"hello,harley"
127.0.0.1:6379&gt; set key2 abcdefg
OK
127.0.0.1:6379&gt; get key2
"abcdefg"
127.0.0.1:6379&gt; SETRANGE key2 1 hello # 替换指定位置开始的字符串
(integer) 7
127.0.0.1:6379&gt; get key2
"ahellog"
127.0.0.1:6379&gt; </code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">setex &amp; setnx</span></h4>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; setex key3 30 "hello" # 设置过期时间30s, set with expire
OK
127.0.0.1:6379&gt; ttl key3
(integer) 27
127.0.0.1:6379&gt; get key3
"hello"
127.0.0.1:6379&gt; setnx mykey "redis" # 不存在设置(在分布式锁中会常常使用)
(integer) 1
127.0.0.1:6379&gt; ttl key3
(integer) -2
127.0.0.1:6379&gt; keys *
1) "key2"
2) "mykey"
3) "key1"
127.0.0.1:6379&gt; setnx mykey "MongoDB"# 如果当前key存在则创建失败,返回0
(integer) 0
127.0.0.1:6379&gt; get mykey
"redis"
127.0.0.1:6379&gt; </code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">批量设置值</span></h4>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3 # 批量设置值
OK
127.0.0.1:6379&gt; keys *
1) "k3"
2) "k1"
3) "k2"
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; mget k1 k2 k3 # 获取多个值
1) "v1"
2) "v2"
3) "v3"
127.0.0.1:6379&gt; msetnx k1 v1 k4 v4 # 是一个原子性操作,k1已存在,所以执行失败
(integer) 0
127.0.0.1:6379&gt; keys *
1) "k3"
2) "k1"
3) "k2"
127.0.0.1:6379&gt; </code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">对象</span></h4>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; mset user1:1:name zhangsan user1:1:age 18 # 设置name和age
OK
127.0.0.1:6379&gt; mget user1:1:name user1:1:age # 批量获取值
1) "zhangsan"
2) "18"
127.0.0.1:6379&gt; </code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">getset</span></h4>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; getset db redis # 先返回get的值,再进行set
(nil)
127.0.0.1:6379&gt; get db
"redis"
127.0.0.1:6379&gt; getset db mongodb # 更新操作
"redis"
127.0.0.1:6379&gt; get db
"mongodb"</code></pre>
<p>&nbsp;</p>
<h4><span style="font-family: 楷体; font-size: 18px">适用场景</span></h4>
<blockquote>
<p><span style="font-family: 楷体; font-size: 18px">String类似的使用场景，value除了字符串还可以是数字</span></p>
</blockquote>
<ul>
<li><span style="font-family: 楷体; font-size: 18px">计数器</span></li>
<li><span style="font-family: 楷体; font-size: 18px">统计多单位的数量：uid:572413118:follow 0</span></li>
<li><span style="font-family: 楷体; font-size: 18px">粉丝数</span></li>
<li><span style="font-family: 楷体; font-size: 18px">对象存储</span></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3><span style="font-family: 楷体; font-size: 18px">002 || List</span></h3>
<blockquote>
<p><span style="font-family: 楷体; font-size: 18px">基本的数据类型，列表。在redis里可以把list当做栈、队列、阻塞队列</span></p>
</blockquote>
<p><span style="font-family: 楷体; font-size: 18px">可以在list的左右两边同时插入值</span></p>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; lpush list one # 将一个值或者多个值插入到列表的最左边
(integer) 1
127.0.0.1:6379&gt; lpush list two
(integer) 2
127.0.0.1:6379&gt; lpush list three
(integer) 3
127.0.0.1:6379&gt; lrange list 0 -1 # 获取到列表的所有值
1) "three"
2) "two"
3) "one"
127.0.0.1:6379&gt; lrange list 0 1
1) "three"
2) "two"
127.0.0.1:6379&gt; lrange list 0 0 # 获取最新插入的值
1) "three"
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; Rpush list four # 将值插入到列表最右边
(integer) 4
127.0.0.1:6379&gt; lrange list 0 -1
1) "three"
2) "two"
3) "one"
4) "four"
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; lrange list 0 -1
1) "three"
2) "two"
3) "one"
4) "four"
127.0.0.1:6379&gt; Lpop list # 移除list第一个元素
"three"
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; Rpop list # 移除list最后一个元素
"four"
127.0.0.1:6379&gt; lrange list 0 -1
1) "two"
2) "one"
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; lindex list 1 # 通过下标获取list中某一个值
"one"
127.0.0.1:6379&gt; lindex list 0 
"two"
127.0.0.1:6379&gt; </code></pre>
<p><span style="font-family: 楷体; font-size: 18px">获取到列表的长度</span></p>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; Lpush list one
(integer) 1
127.0.0.1:6379&gt; Lpush list two
(integer) 2
127.0.0.1:6379&gt; Lpush list three
(integer) 3
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; Llen list # 获取列表的值
(integer) 3
127.0.0.1:6379&gt; </code></pre>
<p><span style="font-family: 楷体; font-size: 18px">移除元素</span></p>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; lpush list one
(integer) 1
127.0.0.1:6379&gt; lpush list two
(integer) 2
127.0.0.1:6379&gt; lpush list three
(integer) 3
127.0.0.1:6379&gt; llen list
(integer) 3
127.0.0.1:6379&gt; lpush list three
(integer) 4
127.0.0.1:6379&gt; lrange list 0 -1
1) "three"
2) "three"
3) "two"
4) "one"
127.0.0.1:6379&gt; lrem list 1 one # 移除list指定个数的value
(integer) 1
127.0.0.1:6379&gt; lrange list 0 -1
1) "three"
2) "three"
3) "two"
127.0.0.1:6379&gt; lrem list 2 three # 移除list中指定个数的value
(integer) 2
127.0.0.1:6379&gt; lrange list 0 -1
1) "two"
127.0.0.1:6379&gt;</code></pre>
<p><span style="font-family: 楷体; font-size: 18px">只保留一部分值trim操作</span></p>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; rpush mylist "hello"
(integer) 1
127.0.0.1:6379&gt; rpush mylist "hello1"
(integer) 2
127.0.0.1:6379&gt; rpush mylist "hello2"
(integer) 3
127.0.0.1:6379&gt; rpush mylist "hello3"
(integer) 4
127.0.0.1:6379&gt; ltrim mylist 1 2 # 通过下标截取指定的长度,list的值发生变化
OK
127.0.0.1:6379&gt; lrange mylist 0 -1
1) "hello1"
2) "hello2"
127.0.0.1:6379&gt; </code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">rpoplpush</span></h4>
<blockquote>
<p><span style="font-family: 楷体; font-size: 18px">移除列表的最后一个元素，并将其移动到新的列表中</span></p>
</blockquote>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; rpush mylist "hello"
(integer) 1
127.0.0.1:6379&gt; rpush mylist "hello1"
(integer) 2
127.0.0.1:6379&gt; rpush mylist "hello2"
(integer) 3
127.0.0.1:6379&gt; rpoplpush mylist myotherlist
"hello2"
127.0.0.1:6379&gt; lrange mylist 0 -1
1) "hello"
2) "hello1"
127.0.0.1:6379&gt; lrange myotherlist 0 -1
1) "hello2"
127.0.0.1:6379&gt; </code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">lset</span></h4>
<blockquote>
<p><span style="font-family: 楷体; font-size: 18px">将列表中指定下标的值替换为另外一个值，更新操作</span></p>
</blockquote>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; exists list # 判断这个列表是否存在
(integer) 0
127.0.0.1:6379&gt; lset list 0 item # 如果不存在列表,更新时会报错
(error) ERR no such key
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; lpush list value1
(integer) 1
127.0.0.1:6379&gt; lrange list 0 0
1) "value1"
127.0.0.1:6379&gt; lset list 0 item # 如果存在,则会更新指定下标的值
OK
127.0.0.1:6379&gt; lrange list 0 0
1) "item"
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; lset list 1 other # 如果不存在,则会报错
(error) ERR index out of range
127.0.0.1:6379&gt; </code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">linsert</span></h4>
<blockquote>
<p><span style="font-family: 楷体; font-size: 18px">将某个具体的value插入到list中某个元素的前面或者后面</span></p>
</blockquote>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; rpush mylist "hello"
(integer) 1
127.0.0.1:6379&gt; rpush mylist "world"
(integer) 2
127.0.0.1:6379&gt; linsert mylist before world my
(integer) 3
127.0.0.1:6379&gt; lrange mylist 0 -1
1) "hello"
2) "my"
3) "world"
127.0.0.1:6379&gt; linsert mylist after my only
(integer) 4
127.0.0.1:6379&gt; lrange mylist 0 -1
1) "hello"
2) "my"
3) "only"
4) "world"
127.0.0.1:6379&gt; </code></pre>
<p>&nbsp;</p>
<ul>
<li><span style="font-family: 楷体; font-size: 18px">实际上是一个链表，before Node after，可以在left和right都可以插入值</span></li>
<li><span style="font-family: 楷体"><span style="font-size: 18px">如果key不存在，则创建新的链表</span></span></li>
<li><span style="font-family: 楷体"><span style="font-size: 18px">如果key存在，则新增元素</span></span></li>
<li><span style="font-family: 楷体"><span style="font-size: 18px">如果移除了所有的值，则为空链表</span></span></li>
<li><span style="font-family: 楷体"><span style="font-size: 18px">在两边插入或者更新值，效率最高！中间元素，效率会比较低。</span></span></li>
</ul>
<h4><span style="font-family: 楷体"><span style="font-size: 18px">适用场景</span></span></h4>
<ul>
<li><span style="font-family: 楷体"><span style="font-size: 18px">消息队列</span></span></li>
<li><span style="font-family: 楷体"><span style="font-size: 18px">栈</span></span></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3><span style="font-family: 楷体; font-size: 18px">003 || Set</span></h3>
<p>&nbsp;</p>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; sadd myset hello # 向set中添加元素
(integer) 1
127.0.0.1:6379&gt; sadd myset harley
(integer) 1
127.0.0.1:6379&gt; smembers myset # 查看set中的值
1) "harley"
2) "hello"
127.0.0.1:6379&gt; sadd myset loveyl
(integer) 1
127.0.0.1:6379&gt; smembers myset 
1) "harley"
2) "loveyl"
3) "hello"
127.0.0.1:6379&gt; sadd myset hello # set中的值是无序且不重复的
(integer) 0
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; sismember myset harley # 查看set中是否存在某值
(integer) 1
127.0.0.1:6379&gt; sismember myset hello
(integer) 1</code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">scard</span></h4>
<blockquote>
<p><span style="font-family: 楷体; font-size: 18px">获取set集合中内容元素个数</span></p>
</blockquote>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; smembers myset
1) "harley"
2) "loveyl"
3) "hello"
127.0.0.1:6379&gt; scard myset
(integer) 3</code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">srem</span></h4>
<blockquote>
<p><span style="font-family: 楷体; font-size: 18px">移除set中的指定值</span></p>
</blockquote>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; srem myset hello
(integer) 1
127.0.0.1:6379&gt; smembers myset
1) "harley"
2) "loveyl"
127.0.0.1:6379&gt; scard myset
(integer) 2
127.0.0.1:6379&gt; </code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">srandmemeber</span></h4>
<blockquote>
<p><span style="font-family: 楷体; font-size: 18px">随机抽选出一个元素</span></p>
</blockquote>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; smembers myset
1) "hahaha"
2) "harley"
3) "world"
4) "loveyl"
5) "hello"
127.0.0.1:6379&gt; srandmember myset
"harley"
127.0.0.1:6379&gt; srandmember myset
"world"
127.0.0.1:6379&gt; srandmember myset
"hello"
127.0.0.1:6379&gt; srandmember myset
"loveyl"
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; srandmember myset 2
1) "loveyl"
2) "world"
127.0.0.1:6379&gt; </code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">spop</span></h4>
<blockquote>
<p><span style="font-family: 楷体; font-size: 18px">随机删除一个元素</span></p>
</blockquote>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; spop myset
"hello"
127.0.0.1:6379&gt; spop myset
"hahaha"
127.0.0.1:6379&gt; smembers myset
1) "loveyl"
2) "harley"
3) "world"
127.0.0.1:6379&gt; </code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">smove</span></h4>
<blockquote>
<p><span style="font-family: 楷体; font-size: 18px">将一个指定的值移动到另外一个set中</span></p>
</blockquote>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; sadd myset hello
(integer) 1
127.0.0.1:6379&gt; sadd myset world
(integer) 1
127.0.0.1:6379&gt; sadd myset harley
(integer) 1
127.0.0.1:6379&gt; smove myset myset2 harley
(integer) 1
127.0.0.1:6379&gt; smembers myset2
1) "harley"
127.0.0.1:6379&gt; smembers myset
1) "world"
2) "hello"
127.0.0.1:6379&gt; </code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">差集 &amp; 交集 &amp;&nbsp;并集</span></h4>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; sadd key1 a
(integer) 1
127.0.0.1:6379&gt; sadd key1 b
(integer) 1
127.0.0.1:6379&gt; sadd key1 c
(integer) 1
127.0.0.1:6379&gt; sadd key2 c
(integer) 1
127.0.0.1:6379&gt; sadd key2 d
(integer) 1
127.0.0.1:6379&gt; sadd key2 e
(integer) 1
127.0.0.1:6379&gt; sdiff key1 key2 # 差集
1) "a"
2) "b"
127.0.0.1:6379&gt; sinter key1 key2 # 交集
1) "c"
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; sunion key1 key2 # 并集
1) "a"
2) "b"
3) "c"
4) "e"
5) "d"
127.0.0.1:6379&gt; </code></pre>
<p>&nbsp;</p>
<h3><span style="font-family: 楷体; font-size: 18px">004 || Hash</span></h3>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; hset myhash field1 harley # set一个具体的key-value
(integer) 1
127.0.0.1:6379&gt; hget myhash field1
"harley"
127.0.0.1:6379&gt; hmset myhash field1 hello field2 world # set多个key-value
OK
127.0.0.1:6379&gt; hmget myhash field1 field2 # 获取多个字段值
1) "hello"
2) "world"
127.0.0.1:6379&gt; hgetall myhash # 获取全部数据
1) "field1"
2) "hello"
3) "field2"
4) "world"
127.0.0.1:6379&gt; hdel myhash field1 # 删除指定的key,value也会被删除
(integer) 1
127.0.0.1:6379&gt; hgetall myhash
1) "field2"
2) "world"
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; hlen myhash # 查看hash的字段数量
(integer) 1
127.0.0.1:6379&gt;
127.0.0.1:6379&gt; hexists myhash field1 # 判断hash中指定字段是否存在
(integer) 0
127.0.0.1:6379&gt; hexists myhash field2
(integer) 1
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; hkeys myhash # 获取所有的字段
1) "field2"
127.0.0.1:6379&gt; hvals myhash # 获取所有的值
1) "world"</code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">hincrby &amp; hsetnx</span></h4>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; hset myhash field3 5 
(integer) 1
127.0.0.1:6379&gt; hincrby myhash field3 1 # 指定增量
(integer) 6
127.0.0.1:6379&gt; hgetall myhash
1) "field3"
2) "6"
127.0.0.1:6379&gt; hincrby myhash field3 -2
(integer) 4
127.0.0.1:6379&gt; hgetall myhash
1) "field3"
2) "4"
127.0.0.1:6379&gt; hsetnx myhash field4 hello # 如果不存在可以设置值
(integer) 1
127.0.0.1:6379&gt; hsetnx myhash field4 world # 如果存在则会执行失败
(integer) 0
127.0.0.1:6379&gt; </code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">hash变更的数据user</span></h4>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; hset user:1 name harley
(integer) 1
127.0.0.1:6379&gt; hget user:1 name
"harley"
127.0.0.1:6379&gt; </code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">适用场景</span></h4>
<ul>
<li><span style="font-family: 楷体; font-size: 18px">可以用于存储用户信息、经常变动的信息。</span></li>
<li><span style="font-family: 楷体; font-size: 18px">hash更适合于对象的存储，String更适合字符串存储。</span></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3><span style="font-family: 楷体; font-size: 18px">005 || Zset</span></h3>
<blockquote>
<p><span style="font-family: 楷体; font-size: 18px">有序集合，在set的基础上增加了一个值</span></p>
</blockquote>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; zadd myzset 1 one
(integer) 1
127.0.0.1:6379&gt; zadd myzset 2 two
(integer) 1
127.0.0.1:6379&gt; zadd myzset 3 three 4 four # 添加多个值
(integer) 2
127.0.0.1:6379&gt; zrange myzset 0 -1
1) "one"
2) "two"
3) "three"
4) "four"
127.0.0.1:6379&gt; </code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">zrangebyscore</span></h4>
<blockquote>
<p><span style="font-family: 楷体; font-size: 18px">排序</span></p>
</blockquote>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; zadd salary 2500 harley
(integer) 1
127.0.0.1:6379&gt; zadd salary 5000 cc_zeal
(integer) 1
127.0.0.1:6379&gt; zadd salary 500 jone
(integer) 1
127.0.0.1:6379&gt; zrangebyscore salary -inf +inf # 按照score升序排列
1) "jone"
2) "harley"
3) "cc_zeal"
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; zrevrange salary 0 -1 # 降序排列
1) "cc_zeal"
2) "harley"
3) "jone"
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; zrangebyscore salary -inf +inf withscores
1) "jone"
2) "500"
3) "harley"
4) "2500"
5) "cc_zeal"
6) "5000"
127.0.0.1:6379&gt;
127.0.0.1:6379&gt; zrangebyscore salary -inf 2500 withscores # 显示小于2500的升序排列
1) "jone"
2) "500"
3) "harley"
4) "2500"
127.0.0.1:6379&gt; </code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">zrem</span></h4>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; zrange salary 0 -1
1) "jone"
2) "harley"
3) "cc_zeal"
127.0.0.1:6379&gt; zrem salary jone # 移除有序集合中指定的元素
(integer) 1
127.0.0.1:6379&gt; zrange salary 0 -1
1) "harley"
2) "cc_zeal"
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; zcard salary # 获取有序集合中的个数
(integer) 2
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; zadd myset 1 hello
(integer) 1
127.0.0.1:6379&gt; zadd myset 2 world 3 harley
(integer) 2
127.0.0.1:6379&gt; zcount myset 1 3 # 获取指定区间成员数量
(integer) 3
127.0.0.1:6379&gt; zcount myset 1 2
(integer) 2
127.0.0.1:6379&gt; </code></pre>
<p>&nbsp;</p>
<h3><span style="font-family: 楷体; font-size: 18px">006 || Geospatial</span></h3>
<blockquote>
<p><span style="font-family: 楷体; font-size: 18px">地理位置，推算地理位置的信息，两地之间的距离。</span></p>
</blockquote>
<h4><span style="font-family: 楷体; font-size: 18px">geoadd</span></h4>
<blockquote>
<p><span style="font-family: 楷体; font-size: 18px">添加地理位置，两极无法直接添加，一般会下载城市数据，用java程序一次性导入</span></p>
<p><span style="font-family: 楷体; font-size: 18px">key 值(维度、精度、名称)</span></p>
</blockquote>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; geoadd china:city 116.40 39.90  beijing # 添加城市的坐标
(integer) 1
127.0.0.1:6379&gt; geoadd china:city 121.47 31.23  shanghai
(integer) 1
127.0.0.1:6379&gt; geoadd china:city 106.50 29.53 chongqing
(integer) 1
127.0.0.1:6379&gt; geoadd china:city 114.05 22.52 shenzhen
(integer) 1
127.0.0.1:6379&gt; geoadd china:city 120.16 30.24 hangzhou 108.96 34.26  xian
(integer) 2</code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">geops</span></h4>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; geopos china:city beijing # 获取指定城市的经度纬度
1) 1) "116.39999896287918091"
   2) "39.90000009167092543"
127.0.0.1:6379&gt; geopos china:city beijing shanghai
1) 1) "116.39999896287918091"
   2) "39.90000009167092543"
2) 1) "121.47000163793563843"
   2) "31.22999903975783553"
127.0.0.1:6379&gt; </code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">geodist</span></h4>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; geodist china:city beijing shanghai # 获取两地的直线距离
"1067378.7564"
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; geodist china:city beijing shanghai km # 获取两地的直线距离(单位km)
"1067.3788"
127.0.0.1:6379&gt; </code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">georadius</span></h4>
<blockquote>
<p><span style="font-family: 楷体"><span style="font-size: 18px">以给定的经纬度为中心，找出某一半径内的元素</span></span></p>
</blockquote>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; georadius china:city 110 30 1000 km
1) "chongqing"
2) "xian"
3) "shenzhen"
4) "hangzhou"
127.0.0.1:6379&gt; georadius china:city 110 30 500 km
1) "chongqing"
2) "xian"
127.0.0.1:6379&gt; 
127.0.0.1:6379&gt; georadius china:city 110 30 500 km withcoord # 经纬度
1) 1) "chongqing"
   2) 1) "106.49999767541885376"
      2) "29.52999957900659211"
2) 1) "xian"
   2) 1) "108.96000176668167114"
      2) "34.25999964418929977"
127.0.0.1:6379&gt; georadius china:city 110 30 500 km withdist # 直线距离
1) 1) "chongqing"
   2) "341.9374"
2) 1) "xian"
   2) "483.8340"</code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">georadiusbymember</span></h4>
<blockquote>
<p><span style="font-family: 楷体; font-size: 18px">找出指定元素周围的其他元素</span></p>
</blockquote>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; georadiusbymember china:city shanghai 500 km
1) "hangzhou"
2) "shanghai"
127.0.0.1:6379&gt; </code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">geohash</span></h4>
<blockquote>
<p><span style="font-family: 楷体; font-size: 18px">将二维的经纬度转换为一维的字符串，如果两个字符串越接近，距离越接近</span></p>
</blockquote>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; geohash china:city beijing chongqing
1) "wx4fbxxfke0" # 经纬度hash
2) "wm5xzrybty0" # 经纬度hash
127.0.0.1:6379&gt; </code></pre>
<h4><span style="font-family: 楷体; font-size: 18px">清除</span></h4>
<blockquote>
<p><span style="font-family: 楷体; font-size: 18px">geo底层是zset，可以使用zset的命令清除掉geo的元素</span></p>
</blockquote>
<pre class="language-bash highlighter-hljs"><code>127.0.0.1:6379&gt; zrange china:city 0 -1
1) "chongqing"
2) "xian"
3) "shenzhen"
4) "hangzhou"
5) "shanghai"
6) "beijing"
127.0.0.1:6379&gt; zrem china:city xian
(integer) 1
127.0.0.1:6379&gt; zrange china:city 0 -1
1) "chongqing"
2) "shenzhen"
3) "hangzhou"
4) "shanghai"
5) "beijing"
127.0.0.1:6379&gt; </code></pre>
<p>&nbsp;</p>
<h3><span style="font-family: 楷体; font-size: 18px">007 || Hyperloglog</span></h3>
<p><span style="font-family: 楷体; font-size: 18px">略</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3><span style="font-family: 楷体; font-size: 18px">008 || bitmap</span></h3>
<p><span style="font-family: 楷体; font-size: 18px">略</span></p>
<p>&nbsp;</p>
<p style="text-align: center">&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.009721530069444444" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-26 00:06">2025-02-26 00:00</span>&nbsp;
<a href="https://www.cnblogs.com/houhuilinblogs">HOUHUILIN</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18737565" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18737565);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18737565', targetLink: 'https://www.cnblogs.com/houhuilinblogs/p/18737565', title: 'redis - [07] 数据类型' })">举报</a>
</div>
        