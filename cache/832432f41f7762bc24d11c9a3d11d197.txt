
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/qiu-gu/p/18872475" title="发布于 2025-05-12 16:22">
    <span role="heading" aria-level="2">通过 Nuke 为 Dotnet  Core 应用构建自动化流程</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h2>为什么使用Nuke</h2>
<p>最开始了解Nuke，是浏览github时，刷到了这个项目，看简介可以通过C# 来定义构建任务和流程，这一点很新颖，对我来讲，c# 显然更容易理解和维护。</p>
<p>再看给出的示例，确实比较清晰，简洁。看了下官方文档，也提供了大量第三方CLI的支持，工具支持比较好，也就是可以使用C#方法调用，代替直接使用cli 命令。</p>
<p>还可以与 gitlab jenkins 结合，实现CI、CD，兼容windows 与 linux。</p>
<p>看文档介绍，是不错的，对于缺少运维人员的团队，可以尝试使用。</p>
<p><img src="https://img2024.cnblogs.com/blog/2750979/202505/2750979-20250512143059648-1557132664.jpg" alt="" width="472" height="372" loading="lazy"></p>
<p>&nbsp;</p>
<h2>示例场景</h2>
<ol>
<li>为同一个解决方案下的多个Dotnet Core 项目构建dokcer镜像</li>
<li>使用Gitversion的版本策略，生成镜像标签</li>
<li>并推送至镜像仓库</li>
</ol>
<p>&nbsp;逻辑比较简单，可以拆分为，通过 gitversion 生成版本号，通过docker build 生成镜像，以及通过docker push 推送镜像。</p>
<h2>Nuke 初始化</h2>
<p>按需安装Nuke 版本，以及在项目跟目录下，进行初始化。</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">dotnet tool install Nuke.GlobalTool --global<br>nuke :setup
</pre>
</div>
<p>&nbsp;</p>
<h2>调整构建流程</h2>
<p>通过&nbsp;LoginDocker 实现了登录docker镜像仓库；</p>
<p>通过&nbsp;BuildDockerImages 实现了多个项目的镜像构建，并采用&nbsp;GitVersion 的&nbsp;FullSemVer 作为版本号，构建时启用了DOCKER_BUILDKIT；</p>
<p>通过 PushImages 实现了镜像推送；</p>
<p>通过&nbsp;CleanImages 清除本地镜像；</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Collections.Generic;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Linq;

</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Nuke.Common;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Nuke.Common.ProjectModel;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Nuke.Common.Tooling;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Nuke.Common.Tools.Docker;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Nuke.Common.Tools.GitVersion;

</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Serilog;

</span><span style="color: rgba(0, 0, 255, 1)">using</span> <span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 0, 1)"> Nuke.Common.IO.FileSystemTasks;
</span><span style="color: rgba(0, 0, 255, 1)">using</span> <span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 0, 1)"> Nuke.Common.Tools.Docker.DockerTasks;

</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Build : NukeBuild
{
    [GitVersion] </span><span style="color: rgba(0, 0, 255, 1)">readonly</span><span style="color: rgba(0, 0, 0, 1)"> GitVersion GitVersion;
    [Solution] </span><span style="color: rgba(0, 0, 255, 1)">readonly</span><span style="color: rgba(0, 0, 0, 1)"> Solution Solution;
    [Parameter(Name </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">proj</span><span style="color: rgba(128, 0, 0, 1)">"</span>)] <span style="color: rgba(0, 0, 255, 1)">readonly</span> <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> ProjectName;

    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> Build()
    {
        DockerLogger </span>= (s, e) =&gt;<span style="color: rgba(0, 0, 0, 1)"> Log.Debug(e);
    }

    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">int</span> Main() =&gt; Execute&lt;Build&gt;(x =&gt;<span style="color: rgba(0, 0, 0, 1)"> x.RunDockerTasks);
    </span><span style="color: rgba(0, 0, 255, 1)">string</span> RegistryUrl =&gt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">registry.mydomain.com</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">string</span> ImagePrefix =&gt; $<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{RegistryUrl}/products</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;

    IEnumerable</span>&lt;Project&gt; Projects =&gt; Solution.AllProjects.Where(p =&gt; p.Name.EndWith(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Host</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">));

    </span><span style="color: rgba(0, 0, 255, 1)">readonly</span> List&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt; localImages = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)">();

    Target LoginDocker </span>=&gt; _ =&gt;<span style="color: rgba(0, 0, 0, 1)"> _
        .Executes(() </span>=&gt;<span style="color: rgba(0, 0, 0, 1)">
        {
            DockerLogin(_ </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> _
                .SetServer(RegistryUrl)
                .SetUsername(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">xxx</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
                .SetPassword(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">xxxxx</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">));
        });

    Target BuildDockerImages </span>=&gt; _ =&gt;<span style="color: rgba(0, 0, 0, 1)"> _
        .Executes(() </span>=&gt;<span style="color: rgba(0, 0, 0, 1)">
        {
            </span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> project <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> Projects)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">var</span> tag = $<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{ImagePrefix}{project.Name}:{GitVersion.FullSemVer}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
                localImages.Add(tag);
                DockerBuild(_ </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> _
                    .SetProcessEnvironmentVariable(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">DOCKER_BUILDKIT</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">1</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
                    .SetPath(“./”)
                    .SetFile(project.Directory </span>/ <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Dockerfile</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
                    .SetTag(tag)</span><span style="color: rgba(0, 0, 0, 1)">);
            }
        });

    Target PushImages </span>=&gt; _ =&gt;<span style="color: rgba(0, 0, 0, 1)"> _
        .DependsOn(BuildDockerImages)
        .DependsOn(LoginDocker)
        .Executes(() </span>=&gt;<span style="color: rgba(0, 0, 0, 1)">
        {
            </span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> image <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> localImages)
            {
                DockerPush(_ </span>=&gt;<span style="color: rgba(0, 0, 0, 1)">
                _.SetName(image));
            }
        });

    Target CleanImages </span>=&gt; _ =&gt;<span style="color: rgba(0, 0, 0, 1)"> _
        .DependsOn(PushImages)
        .Executes(() </span>=&gt;<span style="color: rgba(0, 0, 0, 1)">
        {
            </span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> image <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> localImages)
            {
                DockerImageRm(s </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> s
                .SetImages(image)
                .SetForce(</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">));
            }
        });

    Target RunDockerTasks </span>=&gt; _ =&gt;<span style="color: rgba(0, 0, 0, 1)"> _
        .DependsOn(CleanImages)
        .Executes(() </span>=&gt;<span style="color: rgba(0, 0, 0, 1)">
        {
            Serilog.Log.Information($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{ProjectName} 构建结束</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        });
}</span></pre>
</div>
<h2>调试</h2>
<p>本地运行代码，既可以执行以上逻辑，以及调试；非常方便。</p>
<h2>调用</h2>
<p>通过 执行命令行：dotnet nuke RunDockerTasks 即可执行镜像的构建与推送，可以很方便的与gitlab、github、jenkins 等结合。</p>
<p><img src="https://img2024.cnblogs.com/blog/2750979/202505/2750979-20250512161839802-664936402.png" alt="" loading="lazy"></p>
<h2>优化</h2>
<ol>
<li>执行以上CI，需要宿主机，安装Dotnet SDK，以实现 Dotnet tools 的安装，以及Docker 客户端的安装；可以考虑使用Docker In Docker的方式，减少对服务器的要求；</li>
<li>默认会对所有的项目进行构建并推送，可以结合&nbsp;Parameter 的方式，按需指定需构建的项目；</li>
<li>可以使用compose 方式构建，隐藏项目细节；</li>
</ol>
<h2>总结</h2>
<p>对于功能不复杂、脚本不熟悉、或者缺少运维的场景下，可以尝试使用。</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.6832259122025462" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-12 16:48">2025-05-12 16:22</span>&nbsp;
<a href="https://www.cnblogs.com/qiu-gu">高堂古秋</a>&nbsp;
阅读(<span id="post_view_count">63</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18872475);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18872475', targetLink: 'https://www.cnblogs.com/qiu-gu/p/18872475', title: '通过 Nuke 为 Dotnet  Core 应用构建自动化流程' })">举报</a>
</div>
        