
		<h2>
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Heven-Art/p/19060889" title="发布于 2025-08-27 14:14">
    <span role="heading" aria-level="2">C++ 与 C#混合编程 示例 （基于VS2022）</span>
    

</a>

		</h2>
		<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>C#使用过程中经常会遇到和C++联合开发的过程，通过C++编写动态库，封装成dll后再C#中调用，在此做个记录，</p>
<p>一、新建C#控制台项目</p>
<p>打开VisualStudio，新建一个C#控制台项目，</p>
<p><img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2316974/202508/2316974-20250827111708569-335280870.png" class="lazyload"></p>
<p>&nbsp;</p>
<p>项目名称HelloWorldTest</p>
<p><img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2316974/202508/2316974-20250827111752655-1293930629.png" class="lazyload"></p>
<p>&nbsp;下一步</p>
<p><img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2316974/202508/2316974-20250827111810515-1319678182.png" class="lazyload"></p>
<p>&nbsp;</p>
<p>点击下一步，一个默认c#项目创建完成</p>
<p>&nbsp;</p>
<p>二、创建C++库</p>
<p>在解决方案上右键--添加--新建项目，建一个C++动态链接库工程，</p>
<p><img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2316974/202508/2316974-20250827112226420-1178568125.png" class="lazyload"></p>
<p>&nbsp;</p>
<p>输入项目名称HelloDll，然后下一步</p>
<p><img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2316974/202508/2316974-20250827112931076-121005671.png" class="lazyload"></p>
<p>&nbsp;</p>
<p>创建完成后如下，在 项目--右键--添加--类， 添加 TestDll 头文件 和源文件 ，文件内容如下：</p>
<p><img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2316974/202508/2316974-20250827113317804-2088970999.png" class="lazyload"></p>
<p>&nbsp;然后在&nbsp;TestDll.cpp 文件 添加代码，如下</p>
<div class="cnblogs_code">
<pre>#include <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">pch.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">TestDll.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#include</span>&lt;iostream&gt;

<span style="color: rgba(0, 0, 255, 1)">void</span> HelloWorld(<span style="color: rgba(0, 0, 255, 1)">char</span>*<span style="color: rgba(0, 0, 0, 1)"> name)
{
    std::cout </span>&lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Hello World </span><span style="color: rgba(128, 0, 0, 1)">"</span> &lt;&lt; name &lt;&lt;<span style="color: rgba(0, 0, 0, 1)"> std::endl;
}

</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> Test()
{
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">666666</span><span style="color: rgba(0, 0, 0, 1)">;
}

</span><span style="color: rgba(0, 0, 255, 1)">int</span> Add(<span style="color: rgba(0, 0, 255, 1)">int</span> a, <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> b)
{
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> a +<span style="color: rgba(0, 0, 0, 1)"> b;
}</span></pre>
</div>
<p>&nbsp;</p>
<p>C++库导出有两种方式，建议两种方式同时使用</p>
<p>&nbsp;</p>
<p>1、以C语言接口的方式导出</p>
<p>在函数前面加上&nbsp;extern "C" __declspec(dllexport)</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">extern</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">C</span><span style="color: rgba(128, 0, 0, 1)">"</span> __declspec(dllexport) <span style="color: rgba(0, 0, 255, 1)">void</span> HelloWorld(<span style="color: rgba(0, 0, 255, 1)">char</span>*<span style="color: rgba(0, 0, 0, 1)"> name);
</span><span style="color: rgba(0, 0, 255, 1)">extern</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">C</span><span style="color: rgba(128, 0, 0, 1)">"</span> __declspec(dllexport) <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> Test();
</span><span style="color: rgba(0, 0, 255, 1)">extern</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">C</span><span style="color: rgba(128, 0, 0, 1)">"</span> __declspec(dllexport) <span style="color: rgba(0, 0, 255, 1)">int</span> Add(<span style="color: rgba(0, 0, 255, 1)">int</span> a,<span style="color: rgba(0, 0, 255, 1)">int</span> b);</pre>
</div>
<p>&nbsp;</p>
<p>或者使用 extern "C" 包装&nbsp;&nbsp;类文件</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">#pragma</span> once<span style="color: rgba(0, 0, 0, 1)">

#ifdef __cplusplus
</span><span style="color: rgba(0, 0, 255, 1)">extern</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">C</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 0, 255, 1)">#endif</span> 
    <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> TestDll
    {
         __declspec(dllexport) </span><span style="color: rgba(0, 0, 255, 1)">void</span> HelloWorld(<span style="color: rgba(0, 0, 255, 1)">char</span>*<span style="color: rgba(0, 0, 0, 1)"> name);
         __declspec(dllexport) </span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> Test();
         __declspec(dllexport) </span><span style="color: rgba(0, 0, 255, 1)">int</span> Add(<span style="color: rgba(0, 0, 255, 1)">int</span> a, <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> b);
    };
#ifdef __cplusplus
}
</span><span style="color: rgba(0, 0, 255, 1)">#endif</span></pre>
</div>
<p>&nbsp;</p>
<p>2、以模块定义文件的方式导出</p>
<p>在源文件上点击右键，选择添加-》新建项，然后选择 代码-》模块定义文件，添加TestDll.def 文件</p>
<p><img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2316974/202508/2316974-20250827114825397-2037035683.png" class="lazyload"></p>
<p>&nbsp;</p>
<p>在TestDll.def 中输入 代码如下：</p>
<div class="cnblogs_code">
<pre>LIBRARY <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">TestDll</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">

EXPORTS   //下边是要导出的函数 不需要分号隔开

HelloWorld @ </span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)"> 
Test @ </span><span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">
Add @ </span><span style="color: rgba(128, 0, 128, 1)">3</span></pre>
</div>
<p>&nbsp;</p>
<p>编译生成dll。这里需要注意的是，如果生成是64位的库，C#程序也要是64位的，否则会报错</p>
<p><img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2316974/202508/2316974-20250827115203758-966641645.png" class="lazyload"></p>
<p>&nbsp;</p>
<p>三、C#项目HelloWorldTest下 添加代码</p>
<p>注意 导入命名空间using System.Runtime.InteropServices;</p>
<p>在DllImport导入C/C++编写的动态库时函数，可以加上一些约定参数，例如：</p>
<div class="cnblogs_code">
<pre>[DllImport(<span style="color: rgba(128, 0, 0, 1)">@"</span><span style="color: rgba(128, 0, 0, 1)">HelloDll.dll</span><span style="color: rgba(128, 0, 0, 1)">"</span>, EntryPoint = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Test</span><span style="color: rgba(128, 0, 0, 1)">"</span>, SetLastError = <span style="color: rgba(0, 0, 255, 1)">true</span>, CharSet = CharSet.Ansi, ExactSpelling = <span style="color: rgba(0, 0, 255, 1)">false</span>, CallingConvention = CallingConvention.StdCall)]</pre>
</div>
<p>CallingConvention = CallingConvention.Cdecl，来指定入口点的调用约定</p>
<p>C/C++编写的动态库默认的入口点约定为_cdecl，VS 默认调用动态库时的约定为_winapi</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Collections.Generic;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Linq;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Runtime.InteropServices;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Text;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Threading.Tasks;

</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> HelloWorldTest
{
    </span><span style="color: rgba(0, 0, 255, 1)">internal</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Program
    {
        [DllImport(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">HelloDll.dll</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">extern</span> <span style="color: rgba(0, 0, 255, 1)">void</span> HelloWorld(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> name);
        [DllImport(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">HelloDll.dll</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">extern</span> <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> Test();
        [DllImport(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">HelloDll.dll</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">extern</span> <span style="color: rgba(0, 0, 255, 1)">int</span> Add(<span style="color: rgba(0, 0, 255, 1)">int</span> a, <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> b);

        </span><span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> Main(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">[] args)
        {
            Console.WriteLine(Test().ToString());
            Console.WriteLine(Add(</span><span style="color: rgba(128, 0, 128, 1)">2</span>, <span style="color: rgba(128, 0, 128, 1)">5</span><span style="color: rgba(0, 0, 0, 1)">));
            HelloWorld(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">大大大大大猩猩</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            Console.ReadKey();
        }
    }
}</span></pre>
</div>
<p>&nbsp;</p>
<p>然后生成程序 ，注意生成格式要一致</p>
<p><img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2316974/202508/2316974-20250827140951927-107683141.png" class="lazyload"></p>
<p>&nbsp;</p>
<p>把HelloDll.dll添加&nbsp;HelloWorldTest 项目的引用中 或 把&nbsp;HelloDll.dll文件放到HelloWorldTest.exe 所在目录</p>
<p><img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2316974/202508/2316974-20250827141155269-276393537.png" class="lazyload"></p>
<p>&nbsp;F5 启动程序&nbsp;</p>
<p><img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2316974/202508/2316974-20250827141325340-203503449.png" class="lazyload"></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

		<p class="postfoot">
			posted on 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-27 14:14">2025-08-27 14:14</span>&nbsp;
<a href="https://www.cnblogs.com/Heven-Art">大大大大大大猩猩</a>&nbsp;
阅读(<span id="post_view_count">240</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19060889);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19060889', targetLink: 'https://www.cnblogs.com/Heven-Art/p/19060889', title: 'C++ 与 C#混合编程 示例 （基于VS2022）' })">举报</a>

		</p>
	