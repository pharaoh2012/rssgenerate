
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zhaoweiwei/p/19047253/whisper" title="发布于 2025-08-20 15:10">
    <span role="heading" aria-level="2">whisper语音转文字及其视频配置中英文字幕应用</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        本文较为详细的介绍了OpenAI的开源语音转文字模型Whisper基本情况及安装过程，并介绍了它在处理音视频文件中语音时各种参数的详细用法，最后还介绍了如何使用python语言对该模型进行调用。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>1 简介及安装</h1>
<h2>1.1 简介</h2>
<p>Whisper是由OpenAI训练并开源的通用语音识别模型，它在英语语音识别的稳健性和准确性方面已接近人类水平。</p>
<p>Paper：<a href="https://cdn.openai.com/papers/whisper.pdf" target="_blank" rel="noopener nofollow">https://cdn.openai.com/papers/whisper.pdf</a></p>
<p>Code：<a href="https://github.com/openai/whisper" target="_blank" rel="noopener nofollow">https://github.com/openai/whisper</a></p>
<p>Blog：<a href="https://openai.com/blog/whisper" target="_blank" rel="noopener nofollow">https://openai.com/blog/whisper</a></p>
<p>Whisper 是一种自动语音识别 (ASR) 系统，根据从网络收集的680,000小时多语言和多任务监督数据进行训练。使用这种大规模且多样化的数据集，能够提升模型在口音、背景噪音及专业术语方面的稳健性。此外，该模型还支持多种语言的转录，以及将这些语言翻译成英语。Whisper架构是一种简单的端到端方法，实现为编码器-解码器转换器。输入音频被分成30秒的块，转换为对数梅尔频谱图，然后传递给编码器。解码器经过训练，可以预测相应的文本标题，并与特殊的令牌混合使用，这些令牌指导单个模型执行语言识别、短语级时间戳、多语言语音转录和英语语音翻译等任务。Whisper 的音频数据集中约有三分之一是非英语内容，模型在训练时会交替执行两个任务：将音频转录为原始语言，或翻译成英语。更为详细信息请阅读论文及博客。</p>
<h2>1.2 安装</h2>
<h3>1. 安装ffmpeg</h3>
<p>ffmpeg可以很方便的处理各种音视频文件，在识别视频相应语音内容时需要该库的支持，可参考文中本文最后第2项博客，下载预编译版本ffmpeg并配置环境变量，最终如在命令行下可以直接查看ffmpeg版本信息说明安装成功。</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202508/465567-20250819175026886-402144206.png" alt="image" width="775" height="281" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<h3>2. 创建新的conda环境</h3>
<p>whisper官网指出项目兼容3.8-3.11，这里安装的是3.10</p>
<div class="cnblogs_code">
<pre>conda create -n whisper python=<span style="color: rgba(128, 0, 128, 1)">3.10</span> -y<br>conda activate whisper</pre>
</div>
<h3>3.&nbsp;安装PyTorch</h3>
<p>如果没有GPU则安装CPU版本torch</p>
<div class="cnblogs_code">
<pre>conda <span style="color: rgba(0, 0, 255, 1)">install</span> -c pytorch pytorch torchvision torchaudio cpuonly -y</pre>
</div>
<p>如果有GPU则根据相应驱动版本安装合适的torch版本，</p>
<div class="cnblogs_code">
<pre>pip <span style="color: rgba(0, 0, 255, 1)">install</span> torch==<span style="color: rgba(128, 0, 128, 1)">2.6</span>.<span style="color: rgba(128, 0, 128, 1)">0</span> torchvision torchaudio --index-url https:<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">download.pytorch.org/whl/cu124</span></pre>
</div>
<p>注意，这里只需指定torch版本即可，torchvision/torchaudio版本在安装时会自动匹配，安装完成后可以使用如下脚本测试环境：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> torch
</span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Torch version:</span><span style="color: rgba(128, 0, 0, 1)">"</span>, torch.<span style="color: rgba(128, 0, 128, 1)">__version__</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">CUDA available:</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, torch.cuda.is_available())
</span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">CUDA version used by PyTorch:</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, torch.version.cuda)
</span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Device:</span><span style="color: rgba(128, 0, 0, 1)">"</span>, torch.device(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">cuda:0</span><span style="color: rgba(128, 0, 0, 1)">"</span> <span style="color: rgba(0, 0, 255, 1)">if</span> torch.cuda.is_available() <span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">cpu</span><span style="color: rgba(128, 0, 0, 1)">"</span>))</pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/465567/202508/465567-20250819181133384-2009492996.png" alt="image" width="597" height="373" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>从图中可以看出torch使用的CUDA版本12.4是小于PC上实际安装的CUDA版本12.8，这是因为一般软件都保持向下兼容，所以12.8是兼容12.4的，所以即便是torch使用的CUDA版本稍低也没有问题。</p>
<h3>4. 安装Whisper</h3>
<p>使用如下命令进行安装</p>
<div class="cnblogs_code">
<pre>pip <span style="color: rgba(0, 0, 255, 1)">install</span> openai-whisper -i https:<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">pypi.tuna.tsinghua.edu.cn/simple</span></pre>
</div>
<p>安装完成后可以查看whisper帮助信息：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202508/465567-20250819182023217-945204961.png" alt="image" width="497" height="375" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>以下是本人环境中所安装的所有python库，如果在使用whisper中遇见问题时可以参考安装：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202508/465567-20250819182224927-410997889.png" alt="image" width="225" height="412" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<h1>2 实际应用</h1>
<h2>2.1 模型说明</h2>
<p>最新版本的whisper提供了6种模型，其中4种还提供了只支持英文的版本，各种模型在速度和精度上做出了相应的权衡。以下是可用模型的名称及其相对于大型模型的近似内存要求和推理速度，表中的相对速度是通过在A100上转录英语语音来测量的，真实世界的速度可能会因许多因素而显著变化，包括语言、说话速度和可用硬件。</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202508/465567-20250819182624463-835023812.png" alt="image" width="725" height="239" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>仅用于英语应用程序时，.en模型往往表现更好，特别是对于tiny.en和base.en模型。据官方观察，对于small.en和medium.en模型，差异并不是那么显著。此外，turbo模型是large-v3的优化版本，可提供更快的转录速度，同时将准确性降低到最低限度。Whisper的表现因语言而异，下图显示了使用在Common Voice 15和Fleurs数据集上评估的WER（单词错误率）或CER（字符错误率，以斜体显示）按语言对large-v3和large-v2模型的性能细分。</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202508/465567-20250819184504375-1380217490.png" alt="image" width="623" height="872" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>从图中可以看到v3大模型比v2有明显的提升，特别是中文对广东话的识别水平比普通话还高。</p>
<h2>2.2 命令行用法</h2>
<h3>1. 音频解析</h3>
<p>使用如下命令可以让Whisper同时处理多个音频文件，并指定使用turbo模型（属于small模型的优化版，速度快但精度略低于medium/large）进行转录或翻译，运行命令后，whisper会自动下载所用的模型文件，在Windows系统中，默认路径为C:\Users\&lt;用户名&gt;\.cache\whisper。<code><br></code></p>
<div class="cnblogs_code">
<pre>whisper audio1.mp3 audio2.wav dilireba.mp3 --model turbo</pre>
</div>
<p>如果在参数中没有用--language指定语言，whisper会首先检测语种然后再进行解析，程序运行过程信息如下所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202508/465567-20250820094641489-763071702.png" alt="image" width="630" height="371" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>最终将产生txt、srt、tsv、vtt、json五种文件格式，它们分别适用于不同的场景，用途各有侧重：</p>
<p><strong>（1）.txt（纯文本文件）</strong></p>
<ul class="auto-hide-last-sibling-br">
<li>用途：最基础的转录结果，仅包含音频中的文字内容，不包含时间戳。</li>
<li>适用场景：
<ul class="auto-hide-last-sibling-br">
<li>快速查看音频的完整文字记录（如会议纪要、访谈内容）。</li>
<li>需要对文本进行二次编辑（如提取关键词、摘要）。</li>
<li>无需时间信息的场景（如单纯的文字存档）。</li>
</ul>
</li>
<li>特点：格式简单，可读性强，兼容性高（任何文本编辑器都能打开）。</li>
</ul>
<p><strong>（2）.srt（SubRip Subtitle，字幕文件）</strong></p>
<ul class="auto-hide-last-sibling-br">
<li>用途：最常用的字幕格式之一，包含文字内容和精确的时间戳（开始 / 结束时间）。</li>
<li>适用场景：
<ul class="auto-hide-last-sibling-br">
<li>视频字幕制作（如电影、剧集、短视频添加字幕）。</li>
<li>支持大多数视频播放器（如 VLC、PotPlayer）和视频编辑软件（如 Premiere、剪映）。</li>
</ul>
</li>
<li>格式示例：
<div class="relative w-fit custom-code-block-canvas-wrapper w-full">
<div class="code-block-element-YDlfvc light custom-code-block-container--plaintext hide-indicator disable-theme-style custom-code-block-container">
<div class="code-area-tZtDgG code-area" dir="ltr">
<div class="header-wrapper-UnnlXS">
<div class="header-cGu84a">
<div class="title-XQhI4x clickable-eGISjP" data-popupid="3tgkscd">
<div class="text-jgT4jF">
<div class="cnblogs_code">
<pre><span style="color: rgba(128, 0, 128, 1)">1</span>
<span style="color: rgba(128, 0, 128, 1)">00</span>:<span style="color: rgba(128, 0, 128, 1)">00</span>:<span style="color: rgba(128, 0, 128, 1)">00</span>,<span style="color: rgba(128, 0, 128, 1)">000</span> --&gt; <span style="color: rgba(128, 0, 128, 1)">00</span>:<span style="color: rgba(128, 0, 128, 1)">00</span>:<span style="color: rgba(128, 0, 128, 1)">03</span>,<span style="color: rgba(128, 0, 128, 1)">500</span><span style="color: rgba(0, 0, 0, 1)">
大家好,我是星光队员迪丽热八

</span><span style="color: rgba(128, 0, 128, 1)">2</span>
<span style="color: rgba(128, 0, 128, 1)">00</span>:<span style="color: rgba(128, 0, 128, 1)">00</span>:<span style="color: rgba(128, 0, 128, 1)">03</span>,<span style="color: rgba(128, 0, 128, 1)">500</span> --&gt; <span style="color: rgba(128, 0, 128, 1)">00</span>:<span style="color: rgba(128, 0, 128, 1)">00</span>:<span style="color: rgba(128, 0, 128, 1)">06</span>,<span style="color: rgba(128, 0, 128, 1)">820</span><span style="color: rgba(0, 0, 0, 1)">
和我一起加入脱贫攻坚战星光行动</span></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</li>
<li>特点：结构清晰，时间戳精确到毫秒，支持多语言字幕。</li>
</ul>
<p><strong>（3）&nbsp;<code>.vtt</code>（WebVTT，网页视频字幕文件）</strong></p>
<ul class="auto-hide-last-sibling-br">
<li>用途：专为网页设计的字幕格式，是 HTML5 标准支持的字幕格式。</li>
<li>适用场景：
<ul class="auto-hide-last-sibling-br">
<li>网页中的视频字幕（如 YouTube、B 站、自有网站的视频）。</li>
<li>支持浏览器直接解析，无需额外插件。</li>
</ul>
</li>
<li>格式示例：
<div class="relative w-fit custom-code-block-canvas-wrapper w-full">
<div class="canvas_wrapper-IbhP3H exited-lytMPl" data-testid="canvas-wrapper">
<div class="container-outer-PoCILM" data-testid="canvas_panel_container" data-visible="false" data-state="2">
<div class="container-lYUJLU">
<div class="container-footer-rlbyFI">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">WEBVTT

</span><span style="color: rgba(128, 0, 128, 1)">00</span>:<span style="color: rgba(128, 0, 128, 1)">00.000</span> --&gt; <span style="color: rgba(128, 0, 128, 1)">00</span>:<span style="color: rgba(128, 0, 128, 1)">03.500</span><span style="color: rgba(0, 0, 0, 1)">
大家好,我是星光队员迪丽热八

</span><span style="color: rgba(128, 0, 128, 1)">00</span>:<span style="color: rgba(128, 0, 128, 1)">03.500</span> --&gt; <span style="color: rgba(128, 0, 128, 1)">00</span>:<span style="color: rgba(128, 0, 128, 1)">06.820</span><span style="color: rgba(0, 0, 0, 1)">
和我一起加入脱贫攻坚战星光行动</span></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</li>
<li>特点：与<code>srt</code>类似，但时间戳用<code>.</code>分隔毫秒（而非<code>,</code>），且开头需标注<code>WEBVTT</code>。</li>
</ul>
<p class="header-vfC6AV auto-hide-last-sibling-br"><strong><code>（4）.tsb</code>（Tab-Separated Values，制表符分隔文件）</strong></p>
<ul class="auto-hide-last-sibling-br">
<li>用途：结构化的表格数据文件，包含时间戳（开始 / 结束时间）、文字内容等信息，便于数据分析或批量处理。</li>
<li>适用场景：
<ul class="auto-hide-last-sibling-br">
<li>对字幕内容进行数据分析（如统计每段台词的时长、关键词出现频率）。</li>
<li>导入到 Excel、Google Sheets 等表格工具中编辑或筛选。</li>
<li>批量修改字幕（如通过脚本处理表格数据后再转换为其他字幕格式）。</li>
</ul>
</li>
<li>格式示例：
<div class="relative w-fit custom-code-block-canvas-wrapper w-full">
<div class="canvas_wrapper-IbhP3H exited-lytMPl" data-testid="canvas-wrapper">
<div class="container-outer-PoCILM" data-testid="canvas_panel_container" data-visible="false" data-state="2">
<div class="container-lYUJLU">
<div class="container-footer-rlbyFI">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">start    end    text
</span><span style="color: rgba(128, 0, 128, 1)">0</span>    <span style="color: rgba(128, 0, 128, 1)">3500</span><span style="color: rgba(0, 0, 0, 1)">    大家好,我是星光队员迪丽热八
</span><span style="color: rgba(128, 0, 128, 1)">3500</span>    <span style="color: rgba(128, 0, 128, 1)">6820</span><span style="color: rgba(0, 0, 0, 1)">    和我一起加入脱贫攻坚战星光行动
</span><span style="color: rgba(128, 0, 128, 1)">6820</span>    <span style="color: rgba(128, 0, 128, 1)">9740</span>    6月28日我在电影频道跟您不见不散</pre>
</div>
</div>
</div>
</div>
</div>
</div>
</li>
<li>特点：以制表符分隔列，机器可读性强，适合自动化处理。</li>
</ul>
<strong>（5）<code>.json</code>（JavaScript Object Notation，结构化数据文件）</strong>
<ul class="auto-hide-last-sibling-br">
<li>核心用途：存储最完整的转录信息，包含文字、时间戳、置信度等详细元数据，适合程序解析。</li>
<li>包含的关键信息：
<ul class="auto-hide-last-sibling-br">
<li>整体转录文本（text）；</li>
<li>分段信息（segments数组，含每段的id、start、end、text）；<code><br></code></li>
<li>单词级细节（部分模型支持，words数组，含每个单词的start、end、probability置信度）；</li>
<li>语言信息（language，如zh表示中文）。</li>




</ul>




</li>
<li>适用场景：
<ul class="auto-hide-last-sibling-br">
<li>开发字幕工具（通过代码解析JSON自动生成字幕）；</li>
<li>语音数据分析（如计算语速、定位关键词出现的精确时间）；</li>
<li>与其他系统集成（如导入内容管理系统、AI 分析平台）；</li>
<li>保留原始数据用于质量评估（通过置信度筛选低精度片段）。</li>




</ul>




</li>
<li>特点：信息最全面，结构严谨，必须通过代码或 JSON 解析工具处理，不适合人工直接编辑。</li>




</ul>
<p>可通过--output_format参数指定格式（如--output_format srt,json同时生成两种），默认会生成所有格式。</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202508/465567-20250820100955787-374524115.png" alt="image" width="452" height="381" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>如需指定输出目录：--output_dir ./transcripts</p>
<p>如需翻译为英语：--task translate</p>
<p>如下命令示例了较为完整的用法：</p>
<div class="cnblogs_code">
<pre>whisper dilireba.mp3 --model large --language Chinese --output_dir ./results --output_format txt --task translate</pre>
</div>
<p>最终产生如下结果：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202508/465567-20250820103606617-2134563276.png" alt="image" width="944" height="331" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>官网已经明确说明turb模型不支持英文翻译，所以要进行其他语种到英语翻译时请使用其他模型，使用medium或者large模型可获取最好的翻译结果。</p>
<h3>2. 视频解析</h3>
<p>进行视频解析时用法和进行音频解析时类似，例如：</p>
<div class="cnblogs_code">
<pre>whisper zhouxingchi.mp4 --model medium --language Chinese --task translate</pre>
</div>
<p>该命令使用medium模型解析中文电影，并进行英文翻译。命令运行完成后也会生成.srt英文版本字幕文件。使用vlc对原音频文件进行播放，vlc会自动检测并加载字幕文件，因为原始视频中本身存在中文字幕，播放时英文字幕和远有字幕会重合到一起，可以修改偏好设置 “显示设置” 为全部。并展开&nbsp;“视频”&nbsp;→ 点击&nbsp;“字幕 / OSD”，在其中修改“强制字幕位置”参数，如这里修改为100：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202508/465567-20250820120503315-557589862.png" alt="image" width="586" height="533" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>保存以上设置，并重新打开视频文件进行播放，可以看到英文字幕位置已经和远有的中文字幕已经错开：&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202508/465567-20250820115912041-1183291777.png" alt="image" width="778" height="354" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<h2>2.3 python用法</h2>
<h3>1. 简单示例</h3>
<p>首先给出源码：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> whisper

model </span>= whisper.load_model(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">base</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
result </span>= model.transcribe(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">../audio/dilireba.mp3</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 0, 255, 1)">print</span>(result[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">text</span><span style="color: rgba(128, 0, 0, 1)">"</span>])</pre>
</div>
<p>对比之前的结果可以看出在使用“base”模型时，解析结果明显比较差，例如将“脱贫攻坚战”解析为“拖平公间站”，所以要想取得最精确的结果最好还是使用large模型。</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202508/465567-20250820124401578-742978269.png" alt="image" width="918" height="68" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<h3>2. 英文视频配置中文字幕</h3>
<p>上一节中已经说了如何对中文视频配置英文字幕，还有一种相反的情况就是给英文视频配置中文字幕，这里首先需要解析出英文字幕文件，如调用如下命令：</p>
<div class="cnblogs_code">
<pre>whisper .\IntroToNVIDIANsightSystemsCUDADeveloperTools_2.mp4 --model medium --language English --output_format srt</pre>
</div>
<p>生成的字幕文件IntroToNVIDIANsightSystemsCUDADeveloperTools_2.srt内容如下：</p>
<div class="cnblogs_code">
<pre>1
00:00:00,000 --&gt; 00:00:02,640<span style="color: rgba(0, 0, 0, 1)">
Hey everyone, my name </span><span style="color: rgba(0, 0, 255, 1)">is</span><span style="color: rgba(0, 0, 0, 1)"> Sven Middlebär.

</span>2
00:00:02,640 --&gt; 00:00:06,200<span style="color: rgba(0, 0, 0, 1)">
Welcome again to the Cuda Developer Tools video series.

</span>3
00:00:06,200 --&gt; 00:00:10,820<span style="color: rgba(0, 0, 0, 1)">
In the first episode of this series, Robby introduced you to the Ansight Tools ecosystem.

</span>4
00:00:10,820 --&gt; 00:00:14,960<span style="color: rgba(0, 0, 0, 1)">
He explained what tools it offers </span><span style="color: rgba(0, 0, 255, 1)">and</span> what a typical profiling workflow looks like.</pre>
</div>
<p>比较笨的方法就是直接复制相应英文文本到翻译工具（如谷歌、百度）中，逐句翻译成中文，然后将相应的中文文本替换SRT文件里对于的英文内容，其他时间戳和序号保持不变。这种方法适用于字幕量少，追求精确的场景。对于字幕量大，追求效率的场景，就需要借助python脚本及翻译API进行自动化翻译，本来想借助谷歌翻译，但是由于国内的限制导致API访问会超时失败，只好改为使用百度翻译，首先按如下步骤，申请百度翻译开放平台的 API，获取appid和secretKey：<code><br></code></p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202508/465567-20250820143548821-147592974.png" alt="image" width="864" height="530" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>测试实验用，申请为“个人开发者”即可：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202508/465567-20250820143646132-779838028.png" alt="image" width="413" height="415" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>申请完成后会给出APP ID及密钥：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202508/465567-20250820143812904-856764597.png" alt="image" width="704" height="238" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>之后开通相应的服务，这里选择的最基础的“通用文本翻译”：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202508/465567-20250820143908681-1480770345.png" alt="image" width="543" height="315" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<div class="cnblogs_code">
<pre>pip install pysrt deep-translator  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> pysrt 处理 SRT，deep-translator中的BaiduTranslator可帮助完成百度翻译api调用</span></pre>
</div>
<p>以下是完整处理程序baidu_srt_translator.py源码：</p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_24ccfa4e-33d0-46b1-862d-fe1c5790b82c" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_24ccfa4e-33d0-46b1-862d-fe1c5790b82c" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_24ccfa4e-33d0-46b1-862d-fe1c5790b82c" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> pysrt
</span><span style="color: rgba(0, 0, 255, 1)">from</span> deep_translator <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> BaiduTranslator
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> time

</span><span style="color: rgba(0, 0, 255, 1)">def</span> translate_srt_baidu(input_path, output_path, appid, appkey, source_lang=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">en</span><span style="color: rgba(128, 0, 0, 1)">'</span>, target_lang=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">zh</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">):
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
    使用百度翻译API将SRT字幕文件从源语言翻译到目标语言
    
    参数:
        input_path: 输入的SRT文件路径
        output_path: 输出的翻译后SRT文件路径
        appid: 百度翻译API的appid
        appkey: 百度翻译API的appkey
        source_lang: 源语言代码（默认英文'en'）
        target_lang: 目标语言代码（默认中文'zh'）
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span>
    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 读取SRT文件</span>
    <span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">:
        subs </span>=<span style="color: rgba(0, 0, 0, 1)"> pysrt.open(input_path)
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">成功读取SRT文件，共包含 {len(subs)} 条字幕</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">except</span><span style="color: rgba(0, 0, 0, 1)"> Exception as e:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">读取SRT文件失败：{str(e)}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        </span><span style="color: rgba(0, 0, 255, 1)">return</span>
    
    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 初始化百度翻译器</span>
    <span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">:
        translator </span>=<span style="color: rgba(0, 0, 0, 1)"> BaiduTranslator(
            appid</span>=<span style="color: rgba(0, 0, 0, 1)">appid,
            appkey</span>=<span style="color: rgba(0, 0, 0, 1)">appkey,
            source</span>=<span style="color: rgba(0, 0, 0, 1)">source_lang,
            target</span>=<span style="color: rgba(0, 0, 0, 1)">target_lang
        )
    </span><span style="color: rgba(0, 0, 255, 1)">except</span><span style="color: rgba(0, 0, 0, 1)"> Exception as e:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">初始化翻译器失败：{str(e)}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        </span><span style="color: rgba(0, 0, 255, 1)">return</span>
    
    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 逐句翻译字幕</span>
    <span style="color: rgba(0, 0, 255, 1)">for</span> i, sub <span style="color: rgba(0, 0, 255, 1)">in</span> enumerate(subs, 1<span style="color: rgba(0, 0, 0, 1)">):
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 跳过空文本</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(0, 0, 255, 1)">not</span><span style="color: rgba(0, 0, 0, 1)"> sub.text.strip():
            </span><span style="color: rgba(0, 0, 255, 1)">continue</span>
        
        <span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">:
            </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 翻译文本（百度翻译API有频率限制，添加适当延迟）</span>
            translated_text =<span style="color: rgba(0, 0, 0, 1)"> translator.translate(sub.text)
            sub.text </span>=<span style="color: rgba(0, 0, 0, 1)"> translated_text
            
            </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 显示进度</span>
            <span style="color: rgba(0, 0, 255, 1)">if</span> i % 10 ==<span style="color: rgba(0, 0, 0, 1)"> 0:
                </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">已完成 {i}/{len(subs)} 条字幕翻译</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
            
            </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 避免触发API频率限制</span>
            time.sleep(0.5<span style="color: rgba(0, 0, 0, 1)">)
            
        </span><span style="color: rgba(0, 0, 255, 1)">except</span><span style="color: rgba(0, 0, 0, 1)"> Exception as e:
            </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">第 {i} 条字幕翻译失败：{str(e)}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
            </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">原文：{sub.text}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
            </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 失败时保留原文</span>
            <span style="color: rgba(0, 0, 255, 1)">continue</span>
    
    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 保存翻译后的文件</span>
    <span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">:
        subs.save(output_path, encoding</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">utf-8</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\n翻译完成！结果已保存至：{output_path}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">except</span><span style="color: rgba(0, 0, 0, 1)"> Exception as e:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">保存文件失败：{str(e)}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> main():
    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 请替换为你的百度翻译API信息</span>
    BAIDU_APPID = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">你的百度翻译appid</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    BAIDU_APPKEY </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">你的百度翻译appkey</span><span style="color: rgba(128, 0, 0, 1)">"</span>
    
    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 输入输出文件路径</span>
    INPUT_SRT = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">..\\video\\IntroToNVIDIANsightSystemsCUDADeveloperTools_2.srt</span><span style="color: rgba(128, 0, 0, 1)">"</span>   <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 输入的英文字幕文件</span>
    OUTPUT_SRT = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">..\\video\\IntroToNVIDIANsightSystemsCUDADeveloperTools_cn.srt</span><span style="color: rgba(128, 0, 0, 1)">"</span>  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 输出的中文字幕文件</span>
    
    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 调用翻译函数</span>
<span style="color: rgba(0, 0, 0, 1)">    translate_srt_baidu(
        input_path</span>=<span style="color: rgba(0, 0, 0, 1)">INPUT_SRT,
        output_path</span>=<span style="color: rgba(0, 0, 0, 1)">OUTPUT_SRT,
        appid</span>=<span style="color: rgba(0, 0, 0, 1)">BAIDU_APPID,
        appkey</span>=<span style="color: rgba(0, 0, 0, 1)">BAIDU_APPKEY,
        source_lang</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">en</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">,
        target_lang</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">zh</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">
    )

</span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(128, 0, 128, 1)">__name__</span> == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">__main__</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
    main()</span></pre>
</div>
<span class="cnblogs_code_collapse">baidu_srt_translator.py</span></div>
<p>注意需要将程序中的BAIDU_APPID和BAIDU_APPKEY换成自己的百度翻译API对应内容，另外百度翻译 API 对免费用户有QPS（每秒请求数）限制（通常为 1-5 次 / 秒），如果程序请求过快会触发限制，这时会提示如下错误：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202508/465567-20250820145144445-919940863.png" alt="image" width="548" height="122" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>比如我在调用时就是将其中的time.sleep(0.5)语句改为time.sleep(1)，即增加1秒的间隔才能正常的完成srt文件翻译：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202508/465567-20250820145501354-207731644.png" alt="image" width="540" height="161" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>完成翻译后将中文srt结果文件的名称改为和视频文件名相同（英文名可以改为其他名称，如在名称后增加en），再次用vlc播放该视频文件时，会自动加载中文字幕为默认字幕，效果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202508/465567-20250820145656857-1912129494.png" alt="image" width="756" height="577" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>当然也可以在播放过程中切换成“轨道2”，改为英文字幕：</p>
<p><img src="https://img2024.cnblogs.com/blog/465567/202508/465567-20250820150249827-1073252409.png" alt="image" width="590" height="366" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>除百度翻译外，也可以使用阿里翻译或者DeepL翻译。阿里翻译也需要去开放平台申请API，并获取相关密钥；而DeepL是一家提供高质量翻译服务的公司，<code>deep-translator</code>支持调用 DeepL翻译引擎，它在使用时无需额外申请密钥（但免费版有一定的调用限制），这里不再详细进行说明。</p>
<p>&nbsp;</p>
<h1>参考</h1>
<p>1.&nbsp;<a href="https://blog.csdn.net/weixin_44966641/article/details/127908459" target="_blank" rel="noopener nofollow">https://blog.csdn.net/weixin_44966641/article/details/127908459</a></p>
<p>2.&nbsp;<a href="https://blog.csdn.net/make_progress/article/details/136175745" target="_blank" rel="noopener nofollow">https://blog.csdn.net/make_progress/article/details/136175745</a></p>
<p>3.&nbsp;<a href="https://zhuanlan.zhihu.com/p/617770448" target="_blank" rel="noopener nofollow">https://zhuanlan.zhihu.com/p/617770448</a></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-20 15:10">2025-08-20 15:10</span>&nbsp;
<a href="https://www.cnblogs.com/zhaoweiwei">weiwei22844</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19047253);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19047253', targetLink: 'https://www.cnblogs.com/zhaoweiwei/p/19047253/whisper', title: 'whisper语音转文字及其视频配置中英文字幕应用' })">举报</a>
</div>
        