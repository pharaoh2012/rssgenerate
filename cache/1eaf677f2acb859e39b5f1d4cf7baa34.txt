<!----> <meta itemprop="headline" content="Vue3项目投屏功能开发"> <meta itemprop="keywords" content="前端,JavaScript"> <meta itemprop="datePublished" content="2025-04-08T09:38:19.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="哎呀喂喂呀"> <meta itemprop="url" content="https://juejin.cn/user/836067518059303"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-799d3073="">
            Vue3项目投屏功能开发
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-799d3073=""><div class="author-info-box" data-v-799d3073=""><div class="author-name" data-v-799d3073=""><a href="/user/836067518059303/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-6a576a98="" data-v-799d3073=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-6a576a98="">
    哎呀喂喂呀
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-799d3073=""><time datetime="2025-04-08T09:38:19.000Z" title="Tue Apr 08 2025 09:38:19 GMT+0000 (Coordinated Universal Time)" class="time" data-v-799d3073="">
                    2025-04-08
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-799d3073=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-799d3073=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-799d3073=""></circle></svg> <span class="views-count" data-v-799d3073="">
                    7,822
                  </span> <span class="read-time" data-v-799d3073=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-799d3073=""><rect width="16" height="16" fill="none" data-v-799d3073=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-799d3073=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-799d3073=""></path></svg>
                    阅读4分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-799d3073=""></div> <!----> <!----></div> <!----> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-799d3073=""><div class="article-viewer markdown-body result"><p>最近接了个大屏项目，产品想在不同的显示器上展示大屏项目不同的页面，做出来的效果图大概长这样
<img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ab3c6e845e5e4c159e28d8428ac25b7f~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5ZOO5ZGA5ZaC5ZaC5ZGA:q75.awebp?rk3s=f64ab15b&amp;x-expires=1748942633&amp;x-signature=i0OrYRqp0sb9Ok%2BJmRn3BkxVvY8%3D" alt="image.png" loading="lazy">
看着这个图的第一时间我就去找产品掰扯，想让他把这个功能pass掉。。。我在想浏览器怎么访问到系统的参数。
当我去翻阅文献的时候发现国外有大佬做出来了这个功能而且很全面。但是使用原生的html写的。我决定参考他的demo把他搬到大屏的项目里头。</p>
<p>参考文献：<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.chrome.com%2Fdocs%2Fcapabilities%2Fweb-apis%2Fwindow-management%3Fhl%3Dzh-cn" target="_blank" title="https://developer.chrome.com/docs/capabilities/web-apis/window-management?hl=zh-cn" ref="nofollow noopener noreferrer">developer.chrome.com/docs/capabi…</a></p>
<p>参考demo：<a href="https://link.juejin.cn?target=https%3A%2F%2Fmichaelwasserman.github.io%2Fwindow-placement-demo%2F" target="_blank" title="https://michaelwasserman.github.io/window-placement-demo/" ref="nofollow noopener noreferrer">michaelwasserman.github.io/window-plac…</a></p>
<p>不多bb直接看关键代码：</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">ElMessage</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'element-plus'</span>

<span class="hljs-keyword">let</span> permissionStatus = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 存储窗口管理权限状态</span>
<span class="hljs-keyword">let</span> screenDetails = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 屏幕详情信息</span>
<span class="hljs-keyword">let</span> popup = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 存储当前打开的窗口引用</span>
<span class="hljs-keyword">let</span> popupObserverInterval = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 存储监视窗口状态的定时器ID</span>

<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'load'</span>, <span class="hljs-keyword">async</span> () =&gt; {
    <span class="hljs-comment">// getScreenDetails: 获取多屏幕详细信息、isExtended: 检查是否是扩展显示、onchange: 屏幕变化事件支持</span>
    <span class="hljs-keyword">if</span> (!(<span class="hljs-string">'getScreenDetails'</span> <span class="hljs-keyword">in</span> self) || !(<span class="hljs-string">'isExtended'</span> <span class="hljs-keyword">in</span> screen) || !(<span class="hljs-string">'onchange'</span> <span class="hljs-keyword">in</span> screen)) {
        <span class="hljs-comment">// ElMessage.error('浏览器版本不支持！')</span>
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-comment">// 监听屏幕变化（新增显示器，断开显示器）</span>
        screen.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'change'</span>, <span class="hljs-function">() =&gt;</span> {
            <span class="hljs-title function_">updateScreens</span>(<span class="hljs-comment">/*requestPermission=*/</span><span class="hljs-literal">false</span>)
        })

        <span class="hljs-comment">// 窗口变化</span>
        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'resize'</span>, <span class="hljs-function">() =&gt;</span> {
            <span class="hljs-title function_">updateScreens</span>(<span class="hljs-comment">/*requestPermission=*/</span><span class="hljs-literal">false</span>)
        })

        <span class="hljs-comment">// 查看窗口管理权限</span>
        <span class="hljs-comment">/**
         * window.navigator 是 JavaScript 中的一个对象，它提供了有关浏览器和操作系统的一些信息。
         * 
         * 使用方法：navigator.xxxxx
         * 
         * 主要功能：获取浏览器信息、设备能力检测、硬件访问、位置服务、多媒体和设备接口
         * 
         * 浏览器信息：
         * userAgent：获取浏览器以及操作系统的信息
         * appName：获取浏览器名称
         * appVersion：获取浏览器版本
         * platform：获取操作系统类型
         * 
         * 设备能力检测：
         * cookieEnabled：浏览器是否启用cookie
         * onLine：浏览器是否在线
         * language/languages：用户首选浏览器语言
         * 
         * 硬件访问：
         * hardwareConcurrency：可用CPU数量
         * deviceMemory：设备内存(GB)
         *  
         * 位置服务：
         * geolocation：获取用户位置信息
         * 
         * 多媒体和设备接口：
         * mediaDevices 用于获取用户的媒体设备（如摄像头、麦克风等）。
         */</span>
        permissionStatus = <span class="hljs-keyword">await</span> navigator.<span class="hljs-property">permissions</span>.<span class="hljs-title function_">query</span>({ <span class="hljs-attr">name</span>: <span class="hljs-string">'window-management'</span> })

        <span class="hljs-comment">// 监听窗口权限变化</span>
        permissionStatus.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'change'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {
            permissionStatus = e
            <span class="hljs-title function_">updateScreens</span>(<span class="hljs-comment">/*requestPermission=*/</span><span class="hljs-literal">false</span>)
        })
    }
    <span class="hljs-title function_">updateScreens</span>(<span class="hljs-comment">/*requestPermission=*/</span><span class="hljs-literal">false</span>)
})

<span class="hljs-comment">// 更新屏幕信息</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">updateScreens</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">requestPermission = <span class="hljs-literal">true</span></span>) =&gt; {
    <span class="hljs-keyword">const</span> screens = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getScreenDetailsWithWarningAndFallback</span>(requestPermission)
    <span class="hljs-keyword">return</span> {
        <span class="hljs-attr">screenList</span>: screens,
        <span class="hljs-attr">currentScreen</span>: <span class="hljs-keyword">await</span> <span class="hljs-title function_">getCurrentScreen</span>()
    }
}

<span class="hljs-comment">// 获取所有连接的显示器信息</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">getScreenDetailsWithWarningAndFallback</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">requestPermission = <span class="hljs-literal">false</span></span>) =&gt; {
    <span class="hljs-keyword">if</span> (<span class="hljs-string">'getScreenDetails'</span> <span class="hljs-keyword">in</span> self) {
        <span class="hljs-keyword">try</span> {
            <span class="hljs-comment">// 检查和请求权限</span>
            <span class="hljs-keyword">if</span> (!screenDetails &amp;&amp; ((permissionStatus &amp;&amp; permissionStatus.<span class="hljs-property">state</span> == <span class="hljs-string">'granted'</span>) || (permissionStatus &amp;&amp; permissionStatus.<span class="hljs-property">state</span> == <span class="hljs-string">'prompt'</span> &amp;&amp; requestPermission))) {
                <span class="hljs-comment">// getScreenDetails：Window Management API 的方法 允许网页应用获取关于用户显示器配置的详细信息。</span>
                screenDetails = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getScreenDetails</span>().<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> { 
                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'获取屏幕详情失败:'</span>, e); 
                    <span class="hljs-comment">// 检查是否是由于非localhost环境引起的错误</span>
                    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">hostname</span> !== <span class="hljs-string">'localhost'</span> &amp;&amp; !<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">protocol</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">'https'</span>)) {
                        <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">warning</span>(<span class="hljs-string">'Window Management API仅在localhost或HTTPS环境下可用'</span>);
                    }
                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
                });
                <span class="hljs-comment">// 监听屏幕配置变化（如接入新显示器、分辨率改变等）</span>
                <span class="hljs-keyword">if</span> (screenDetails) {
                    screenDetails.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'screenchange'</span>, <span class="hljs-function">() =&gt;</span> {
                        <span class="hljs-title function_">updateScreens</span>(<span class="hljs-comment">/*requestPermission=*/</span><span class="hljs-literal">false</span>)
                        <span class="hljs-title function_">setScreenListeners</span>()
                    })
                    <span class="hljs-title function_">setScreenListeners</span>()
                }
            }

            <span class="hljs-comment">// 抛错</span>
            <span class="hljs-keyword">if</span> (screenDetails &amp;&amp; screenDetails.<span class="hljs-property">screens</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">1</span>) {
            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (screenDetails &amp;&amp; screenDetails.<span class="hljs-property">screens</span>.<span class="hljs-property">length</span> == <span class="hljs-number">1</span>) {
                <span class="hljs-comment">// ElMessage.error('请扩展您的桌面到多个屏幕以获得完整的演示功能')</span>
            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (screenDetails || (permissionStatus &amp;&amp; permissionStatus.<span class="hljs-property">state</span> === <span class="hljs-string">'denied'</span>)) {
                <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'请允许窗口管理权限以获得完整的演示功能'</span>)
            }

            <span class="hljs-keyword">if</span> (screenDetails) {
                <span class="hljs-keyword">return</span> screenDetails.<span class="hljs-property">screens</span>
            }
        } <span class="hljs-keyword">catch</span> (error) {
            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'获取屏幕详情过程中出错:'</span>, error);
        }
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">'当前环境不支持Window Management API'</span>);
    }
    <span class="hljs-comment">// 如果不支持多屏幕API，返回基本的screen信息</span>
    <span class="hljs-keyword">return</span> [<span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>]
}

<span class="hljs-comment">// 设置屏幕变化的监听器</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">setScreenListeners</span> = (<span class="hljs-params"></span>) =&gt; {
    <span class="hljs-keyword">let</span> screens = screenDetails ? screenDetails.<span class="hljs-property">screens</span> : [<span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>]
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> s <span class="hljs-keyword">of</span> screens) {
        s.<span class="hljs-property">onchange</span> = <span class="hljs-function">() =&gt;</span> { <span class="hljs-title function_">updateScreens</span>(<span class="hljs-comment">/*requestPermission=*/</span><span class="hljs-literal">false</span>) }
    }
}

<span class="hljs-comment">// 获取窗口所在显示器</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">getCurrentScreen</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; {
    <span class="hljs-keyword">try</span> {
        <span class="hljs-comment">// Check if getScreenDetails is available</span>
        <span class="hljs-keyword">if</span> (!(<span class="hljs-string">'getScreenDetails'</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>)) {
            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">'getScreenDetails API is not available in this context.'</span>);
            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>; <span class="hljs-comment">// fallback to basic screen info</span>
        }
        
        <span class="hljs-keyword">const</span> screenDetails = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">getScreenDetails</span>();
        <span class="hljs-keyword">const</span> currentScreen = screenDetails.<span class="hljs-property">currentScreen</span>;
        <span class="hljs-keyword">return</span> currentScreen;
    } <span class="hljs-keyword">catch</span> (error) {
        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">'Failed to get screen details:'</span>, error);
        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>; <span class="hljs-comment">// fallback to basic screen info</span>
    }
}

<span class="hljs-comment">/**
 * 在指定屏幕打开新浏览器窗口前的设置
 * <span class="hljs-doctag">@param</span> screenIndex 屏幕索引
 * */</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">openPopup</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">screenIndex</span>) =&gt; {
    <span class="hljs-keyword">try</span> {
        <span class="hljs-keyword">const</span> screens = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getScreenDetailsWithWarningAndFallback</span>(<span class="hljs-comment">/*requestPermission=*/</span><span class="hljs-literal">true</span>);
        <span class="hljs-keyword">const</span> currentScreen = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getCurrentScreen</span>();

        <span class="hljs-keyword">if</span> (screenIndex == <span class="hljs-number">0</span> || screenIndex) {
            <span class="hljs-comment">// if (currentScreen.label == screens[screenIndex].label) {</span>
            <span class="hljs-comment">//     ElMessage.error('当前屏幕已打开')</span>
            <span class="hljs-comment">//     return</span>
            <span class="hljs-comment">// }</span>

            <span class="hljs-comment">// 选择需要打开的屏幕</span>
            <span class="hljs-keyword">const</span> screen = screens[screenIndex];
            
            <span class="hljs-keyword">if</span> (!screen) {
                <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'无法获取指定屏幕信息，可能是在非HTTPS或非localhost环境'</span>);
                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
            }

            <span class="hljs-comment">// 新开浏览器窗口设置</span>
            <span class="hljs-keyword">const</span> option = {
                <span class="hljs-attr">url</span>: <span class="hljs-variable language_">window</span>.<span class="hljs-property">origin</span>, <span class="hljs-comment">// 跳转地址</span>
                <span class="hljs-attr">x</span>: screen.<span class="hljs-property">availLeft</span> || <span class="hljs-number">0</span>, <span class="hljs-comment">// 屏幕可用区域的左边界</span>
                <span class="hljs-attr">y</span>: screen.<span class="hljs-property">availTop</span> || <span class="hljs-number">0</span>, <span class="hljs-comment">// 屏幕可用区域的上边界</span>
                <span class="hljs-attr">width</span>: screen.<span class="hljs-property">availWidth</span> || <span class="hljs-number">800</span>, <span class="hljs-comment">// 屏幕可用区域的宽</span>
                <span class="hljs-attr">height</span>: screen.<span class="hljs-property">availHeight</span> || <span class="hljs-number">600</span> <span class="hljs-comment">// 屏幕可用区域的高</span>
            }

            <span class="hljs-keyword">return</span> <span class="hljs-title function_">openWindow</span>(option);
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">warning</span>(<span class="hljs-string">'请选择需要投屏的屏幕！'</span>);
        }
    } <span class="hljs-keyword">catch</span> (error) {
        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'打开窗口失败:'</span>, error);
        <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'打开窗口失败，可能是在非HTTPS或非localhost环境'</span>);
        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
    }
}

<span class="hljs-comment">// 打开浏览器窗口</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">openWindow</span> = (<span class="hljs-params">option</span>) =&gt; {
    <span class="hljs-keyword">if</span> (popupObserverInterval) <span class="hljs-built_in">clearInterval</span>(popupObserverInterval)

    <span class="hljs-keyword">const</span> features = <span class="hljs-title function_">getFeaturesFromOption</span>(option)
    popup = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(option.<span class="hljs-property">url</span>, <span class="hljs-string">'_blank'</span>, features)

    <span class="hljs-comment">// 每300ms检查一次窗口是否关闭</span>
    <span class="hljs-keyword">if</span> (popup) {
        popupObserverInterval = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> {
            <span class="hljs-comment">// 窗口关闭时清除</span>
            <span class="hljs-built_in">clearInterval</span>(popupObserverInterval)
            popupObserverInterval = <span class="hljs-literal">null</span>
            popup = <span class="hljs-literal">null</span>
        }, <span class="hljs-number">300</span>)
    }

    <span class="hljs-keyword">return</span> popup
}

<span class="hljs-comment">// 窗口特性字符串处理</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">getFeaturesFromOption</span> = (<span class="hljs-params">option</span>) =&gt; {
    <span class="hljs-keyword">return</span> <span class="hljs-string">`left=<span class="hljs-subst">${option.x}</span>,top=<span class="hljs-subst">${option.y}</span>,width=<span class="hljs-subst">${option.width}</span>,height=<span class="hljs-subst">${option.height}</span>`</span>
}

<span class="hljs-keyword">export</span> {
    updateScreens, openPopup
}
</code></pre>
<p>vue组件代码就很简单了就不展示了
调用也就是updateScreens方法检测显示器，openPopup在指定的显示器新开一个窗口</p>
<p>如果有侵权请私信我，直接删文处理了</p></div></div>