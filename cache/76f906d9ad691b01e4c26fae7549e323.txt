
	<h1 class="postTitle"><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/georgewing/p/19008192" title="发布于 2025-07-29 10:18">
    <span role="heading" aria-level="2">白话Docker系列（一）：用Web应用实例深入容器</span>
    

</a>
</h1>
	    <div id="cnblogs_post_description" style="display: none">
        
        白话Docker系列（二）：我会通过用Docker部署一个Node.js编写的web应用程序，来深入地理解Docker容器的本质。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>我会通过用Docker部署一个Node.js编写的web应用程序，来深入地理解Docker容器的本质。</p>
<h1 id="一准备工作">一、准备工作</h1>
<p>在开始前，需要在你的Mac电脑中安装Docker。在官方网站上有各种环境下的<a href="https://docs.docker.com/get-started/get-docker/" target="_blank" rel="noopener nofollow">安装指南</a>，用Mac电脑的就看<a href="https://docs.docker.com/desktop/setup/install/mac-install/" target="_blank" rel="noopener nofollow">Install Docker Desktop on Mac</a>。</p>
<h2 id="安装docker">安装Docker</h2>
<p>安装步骤非常简单：</p>
<ol>
<li>
<p>如果是M1芯片的arm64架构，就下载<a href="https://desktop.docker.com/mac/main/arm64/Docker.dmg" target="_blank" rel="noopener nofollow">Docker for Mac with Apple silicon</a>。</p>
</li>
<li>
<p>双击<code>Docker.dmg</code>文件，然后把鲸鱼图标拖放到Applications文件夹即可。<br>
<img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/11617/202507/11617-20250729020656223-184161159.png" class="lazyload"></p>
</li>
</ol>
<h2 id="运行docker">运行Docker</h2>
<p>在应用中找到Docker图标，点击运行。<br>
<img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/11617/202507/11617-20250729020721751-45246636.png" class="lazyload"></p>
<p>运行后，在菜单栏会看到多了一个鲸鱼图标：<br>
<img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/11617/202507/11617-20250729020739666-883684523.png" class="lazyload"></p>
<p>然后，在终端用命令查下Docker的版本：</p>
<p><code>docker --version</code></p>
<p>再查下<code>docker info</code>是不是也正常。如果都正常，就可以用Node.js编写web应用了。</p>
<p>在这里，我是用Nestjs写的应用程序，代码非常简单。也就是用Nestjs的cli工具生成的，创建应用的这一步就直接跳过了，直接上代码：</p>
<pre><code class="language-TypeScript">// app.controller.ts部分
import { Controller, Get } from '@nestjs/common';
import { AppService } from './app.service';

@Controller()
export class AppController {
  constructor(private readonly appService: AppService) {}

  @Get()
  getHello(): string {
    return this.appService.getHello();
  }
}

// app.module.ts部分
import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';

@Module({
  imports: [],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}


// app.service.ts部分
import { Injectable } from '@nestjs/common';

@Injectable()
export class AppService {
  getHello(): string {
    return 'Hello World!';
  }
}

// main.ts部分
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();
</code></pre>
<p>在上面的代码中，就是用Nest框架启动了一个Web服务器，只有一个简单的功能是：打印出“Hello World!”。</p>
<p>那么，将这样的一个应用程序容器化，第一步是制作容器镜像。</p>
<h1 id="二docker的配置文件dockerfile">二、Docker的配置文件：Dockerfile</h1>
<p>首先，我们在这个Nestjs的应用程序的根目录下创建一个文本文件，文件名是：<code>Dockerfile</code>，没有扩展名的。</p>
<pre><code class="language-SQL"># 使用官方提供的Node.js开发镜像作为基础镜像
FROM node:22-slim

# 工作目录切换为 /usr/src/app
WORKDIR /usr/src/app

# 将 package.json复制到当前目录下
COPY package.json ./

RUN npm config set registry https://registry.npmmirror.com/
# 使用npm命令安装这个应用所需要的依赖
RUN npm install

RUN npm install -g pnpm

COPY . .

# 暴露给外界访问容器3000端口
EXPOSE 3000

# 设置容器进程为：pnpm run start:dev，即：这个Node应用开发环境的启动命令
CMD ["pnpm", "run", "start:dev"]
</code></pre>
<p>通过Dockerfile的内容，可以看到是用一些标准的大写词语来描述Docker镜像。这些大写的词语就是按上面内容顺序来处理的。</p>
<h1 id="三制作docker镜像">三、制作Docker镜像</h1>
<p>接下来，可以用Docker制作这个应用的镜像了，在当前目录执行：</p>
<p><code>docker build -t nestjs-app .</code></p>
<p>这个<code>-t</code>是给这个镜像加tag，也就是起个名儿。docker build会自动加载当前目录中的Dockerfile，然后按照里面的顺序一个个的执行其中的大写词语。在这个过程里面，实际上就等同于Docker使用基础镜像启动了一个容器，然后在这个容器中一个个执行Dockerfile中的大写词语。</p>
<p>在每次执行后，都会生成一个对应的镜像层。</p>
<p>Docker build操作完成后，可以用 docker image命令查下结果：</p>
<pre><code class="language-SQL">docker image ls 

REPOSITORY           TAG                     IMAGE ID       CREATED         SIZE
nestjs-app          latest                  2badda7aef21   2 hours ago     1.11GB
</code></pre>
<h1 id="四使用docker镜像启动容器">四、使用Docker镜像启动容器</h1>
<p>使用这个镜像，用<code>docker run</code>命令来启动容器：</p>
<p><code>docker run nestjs-app</code></p>
<p>在镜像名的后面，什么都不用写，这是因为在Dockerfile中已经指定CMD了，不然，就得把进程的开发环境启动命令加在后面：</p>
<p><code>docker run -p 3000:8080 nestjs-app pnpm run start:dev</code></p>
<p>在容器启动了之后，可以用<code>docker ps</code>命令看一下：</p>
<pre><code class="language-SQL">docker ps

CONTAINER ID   IMAGE               COMMAND                   CREATED 
8015b4eac7eb   nestjs-app   "docker-entrypoint.s…"   23 seconds ago
</code></pre>
<p>在这个命令中，我通过<code>-p 3000:8080</code>告诉Docker，把容器中8080端口映射到宿主机的3000端口。</p>
<p>这样，访问宿主机的3000端口，就可以看到容器中应用程序返回的结果：<br>
<img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/11617/202507/11617-20250729020811267-1809469515.png" class="lazyload"></p>
<p>这是VSCode中的插件 Thunder client，类似用<code>curl</code> <code>http://localhost:3000</code>。</p>
<p>这样，已经使用容器完成了一个web应用的开发与测试。</p>
<h1 id="五总结">五、总结</h1>
<p>这里我用了一个Node.js应用作为实例，讲解了Docker容器使用的主要场景。熟悉了这些操作，也就基本摸清了Docker容器核心功能。</p>
<p>在这个容器进程“pnpm run start:dev”，是运行在由Linux Namespace和Cgroups所构成的隔离环境中；运行它所需要的各种文件，是由多个分层挂载在一块的rootfs层提供的。</p>
<p>Docker系列一就是上述内容。系列二是讲怎样在K8S中配置多个docker容器的。</p>

</div>
<div class="clear"></div>

	<div class="postDesc">posted on 
<span id="post-date" data-last-update-days="0.18263888888888888" data-date-updated="2025-07-29 14:41">2025-07-29 10:18</span>&nbsp;
<a href="https://www.cnblogs.com/georgewing">豆豆の爸爸</a>&nbsp;
阅读(<span id="post_view_count">311</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19008192);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19008192', targetLink: 'https://www.cnblogs.com/georgewing/p/19008192', title: '白话Docker系列（一）：用Web应用实例深入容器' })">举报</a>
</div>
