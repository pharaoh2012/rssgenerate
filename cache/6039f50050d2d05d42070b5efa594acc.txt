
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/buachuan/p/18794647" title="发布于 2025-03-26 20:42">
    <span role="heading" aria-level="2">从配置读取到懒加载模式：从具体问题到抽象设计语素的提炼</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>在实际项目中，我们常常需要高效、线程安全地加载配置文件。为了确保在高并发场景下配置只加载一次、且读取速度尽可能快，我们往往会设计一些特殊的加载方案。今天，我将记录一次从具体实现问题出发，逐步抽象出高级设计概念的过程。</p>
<h2 data-start="176" data-end="191">1. 高效加载配置的需求</h2>
<p data-start="193" data-end="308">在项目初期，我们的需求很简单：<strong data-start="208" data-end="227">如何在多线程环境下高效加载配置</strong>。为了避免重复加载和可能的线程竞争，我们通常会先检查配置是否已经加载。如果已加载，则直接返回；如果没有，则进入初始化阶段。这样既保证了性能，又保证了加载的唯一性。</p>
<p data-start="310" data-end="325">例如，一个常见的实现思路如下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">if</span> (_config != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> _config;
</span><span style="color: rgba(0, 0, 255, 1)">lock</span><span style="color: rgba(0, 0, 0, 1)"> (_lock)
{
    </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (_initialized)
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> _config ?? <span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> InvalidOperationException($<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">加载配置失败{_path}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    _initialized </span>= <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">初始化操作。</span>
    _config =<span style="color: rgba(0, 0, 0, 1)"> LoadConfig();
}</span></pre>
</div>
<p>这段代码试图通过锁外的判空和锁内的 _initialized 标志来保证加载逻辑的线程安全和高效。</p>
<h2 data-start="176" data-end="191">2. 关于 ?? throw 的讨论</h2>
<p>在初始化代码中，我们看到了一行：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">return</span> _config ?? <span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> InvalidOperationException($<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">加载配置失败{_path}</span><span style="color: rgba(128, 0, 0, 1)">"</span>);</pre>
</div>
<p data-start="751" data-end="829">这行代码的作用是在 _config 为 null 时，立即抛出异常，提示加载配置失败。那么问题来了：<strong data-start="801" data-end="829">在这里是否有必要进行 _config 的空判断？</strong></p>
<p data-start="831" data-end="962">从设计上讲，如果初始化成功，那么 _config 应该始终不为空。但在实际编程中，为了防御不可预期的情况（例如加载过程中出现异常），开发者可能会添加这种额外的检查。这种做法在一定程度上可以捕获那些可能出现的意外情况，但同时也反映出状态管理上可能存在的不一致问题。</p>
<p data-start="831" data-end="962">如果初始化失败，_initialized 不应该被置为 true。也就是说，只有在 _config 确保被正确赋值后，再设置 _initialized 为 true。这样可以确保状态的一致性，从而避免在后续调用时出现 _initialized 为 true 而 _config 为 null 的情况。改进一下代码：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">if</span> (_config != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> _config;
</span><span style="color: rgba(0, 0, 255, 1)">lock</span><span style="color: rgba(0, 0, 0, 1)"> (_lock)
{
    </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (_initialized)
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> _config ?? <span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> InvalidOperationException($<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">加载配置失败{_path}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">初始化操作。</span>
    _config =<span style="color: rgba(0, 0, 0, 1)"> LoadConfig();
    _initialized </span>= <span style="color: rgba(0, 0, 255, 1)">true</span>;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">将这行放在_config赋值之后</span>
}</pre>
</div>
<p>这样就能解决问题了。</p>
<h2 data-start="176" data-end="191">3. _initialized 变量的冗余性</h2>
<p data-start="991" data-end="1113">进一步分析后，我们可能会发现：如果我们的加载逻辑足够严谨，确保在 _config 正确赋值后才进入“已加载”的状态，那么 _initialized 变量其实就显得多余了。也就是说，只需要依靠 _config 的非空判断就可以判断配置是否已加载。</p>
<p data-start="1115" data-end="1198">这种改进不仅可以简化代码，还能避免因为状态标记和实际值不匹配而引起的潜在问题。代码可以重构为更简单的形式，只关注 _config 的状态，从而实现更直观和可靠的逻辑。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">if</span> (_config != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> _config;
</span><span style="color: rgba(0, 0, 255, 1)">lock</span><span style="color: rgba(0, 0, 0, 1)"> (_lock)
{
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (_config != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> _config;
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">初始化操作。</span>
    _config =<span style="color: rgba(0, 0, 0, 1)"> LoadConfig();
}</span></pre>
</div>
<h2 data-start="176" data-end="191">4. 经典的双重判空检查</h2>
<p>仔细回顾，我们的这种实现实际上就是经典的<strong data-start="1237" data-end="1247">双重判空检查</strong>模式。最外层的 _config 判空用于提高效率（避免不必要的锁），而在锁内部再进行一次检查确保线程安全。这是解决懒加载问题的一种传统方法。</p>
<h2 data-start="176" data-end="191">5. 编程语言内置封装</h2>
<p>针对上述问题，C# 提供了内置的懒加载机制——<strong data-start="1419" data-end="1430">Lazy&lt;T&gt;</strong>，避免手动管理锁和状态标记。</p>
<h2 data-start="176" data-end="191">6. 从具体实例到抽象设计语素的提炼</h2>
<p data-start="2261" data-end="2379">回顾整个过程，从最初为了解决配置加载的性能和线程安全问题，到思考状态同步与是否需要额外的 _initialized 标记，到识别这是经典的双重判空检查，我们实际上经历了一次从具体实例到抽象设计语素的提炼过程。</p>
<p data-start="2381" data-end="2481">这种思考模式与科学研究中从具体实验现象提炼出普适规律非常相似。通过对问题的不断深入理解和抽象，我们可以形成一套更为通用的设计原则，这些原则可以在日后的其他场景中反复使用，成为开发者手中的基本设计语素。</p>
<p data-start="2483" data-end="2574">这种从具体案例中总结经验，并提炼出抽象设计理念的方法，不仅提升了代码质量，还极大地提高了系统的可维护性和扩展性。正是这种持续迭代和抽象提升的过程，推动了软件设计模式和工程实践的发展。</p>
</div>
<div id="MySignature" role="contentinfo">
    <p>本文作者：<a href="https://www.cnblogs.com/buachuan/" target="_blank">陈百川</a>，欢迎留言讨论。转载请注明原文链接：<a href="https://www.cnblogs.com/buachuan/p/18794647" target="_blank">https://www.cnblogs.com/buachuan/p/18794647</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.06461316157291666" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-26 20:43">2025-03-26 20:42</span>&nbsp;
<a href="https://www.cnblogs.com/buachuan">陈百川</a>&nbsp;
阅读(<span id="post_view_count">19</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18794647" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18794647);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18794647', targetLink: 'https://www.cnblogs.com/buachuan/p/18794647', title: '从配置读取到懒加载模式：从具体问题到抽象设计语素的提炼' })">举报</a>
</div>
        