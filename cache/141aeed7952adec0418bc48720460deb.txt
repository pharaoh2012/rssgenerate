
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Amd794/p/18907842" title="发布于 2025-06-03 00:23">
    <span role="heading" aria-level="2">FastAPI安全认证：从密码到令牌的魔法之旅</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/1546022/202506/1546022-20250602213807865-7190606.png" alt="FastAPI安全认证：从密码到令牌的魔法之旅" class="desc_img">
        在FastAPI中实现OAuth2密码流程的认证机制。通过创建令牌端点，用户可以使用用户名和密码获取JWT访问令牌。代码示例展示了如何使用CryptContext进行密码哈希处理，生成和验证JWT令牌，并实现安全路由保护。此外，还提供了JWT令牌的结构解析、常见报错解决方案以及安全增强建议，如使用HTTPS传输令牌和从环境变量读取密钥。最后，通过课后Quiz巩固了关键概念。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<hr>
<p>title: FastAPI安全认证：从密码到令牌的魔法之旅<br>
date: 2025/06/02 13:24:43<br>
updated: 2025/06/02 13:24:43<br>
author: <a href="https://cmdragon.cn" target="_blank" rel="noopener nofollow"> cmdragon </a></p>
<p>excerpt:<br>
在FastAPI中实现OAuth2密码流程的认证机制。通过创建令牌端点，用户可以使用用户名和密码获取JWT访问令牌。代码示例展示了如何使用<code>CryptContext</code>进行密码哈希处理，生成和验证JWT令牌，并实现安全路由保护。此外，还提供了JWT令牌的结构解析、常见报错解决方案以及安全增强建议，如使用HTTPS传输令牌和从环境变量读取密钥。最后，通过课后Quiz巩固了关键概念。</p>
<p>categories:</p>
<ul>
<li>后端开发</li>
<li>FastAPI</li>
</ul>
<p>tags:</p>
<ul>
<li>FastAPI</li>
<li>OAuth2</li>
<li>JWT</li>
<li>安全认证</li>
<li>密码哈希</li>
<li>令牌校验</li>
<li>访问控制</li>
</ul>
<hr>
<img src="https://static.shutu.cn/shutu/jpeg/open5f/2025/06/02/3489d9d94a2b502bb25e9c2c82793898.jpeg" title="cmdragon_cn.png" alt="cmdragon_cn.png">
<img src="https://api2.cmdragon.cn/upload/cmder/20250304_012821924.jpg" title="cmdragon_cn.png" alt="cmdragon_cn.png">
<p>扫描<a href="https://api2.cmdragon.cn/upload/cmder/20250304_012821924.jpg" target="_blank" rel="noopener nofollow">二维码</a><br>
关注或者微信搜一搜：<code>编程智域 前端至全栈交流与成长</code></p>
<p><a href="https://tools.cmdragon.cn/zh/apps?category=ai_chat" target="_blank" rel="noopener nofollow">探索数千个预构建的 AI 应用，开启你的下一个伟大创意</a>：<a href="https://tools.cmdragon.cn/" target="_blank" rel="noopener nofollow">https://tools.cmdragon.cn/</a></p>
<h1 id="第一章fastapi安全认证核心实现">第一章：FastAPI安全认证核心实现</h1>
<p>（注：根据写作规范要求，章节编号从第一章开始编排）</p>
<h2 id="一令牌端点token-endpoint的创建">一、令牌端点（Token Endpoint）的创建</h2>
<h3 id="11-oauth2密码流程原理">1.1 OAuth2密码流程原理</h3>
<p>OAuth2密码流程（Password Grant）是直接通过用户名密码获取访问令牌的认证方式。类比演唱会验票流程：用户先到售票处（令牌端点）用身份证（凭证）换取门票（令牌），之后凭门票入场（访问资源）。</p>
<p>流程步骤：</p>
<ol>
<li>客户端发送用户名密码到<code>/token</code>端点</li>
<li>服务器验证凭证有效性</li>
<li>生成包含用户身份和有效期的JWT令牌</li>
<li>返回访问令牌给客户端</li>
</ol>
<h3 id="12-fastapi端点实现">1.2 FastAPI端点实现</h3>
<pre><code class="language-python">from fastapi import APIRouter, Depends, HTTPException, status
from pydantic import BaseModel
from datetime import datetime, timedelta
from jose import JWTError, jwt
from passlib.context import CryptContext

router = APIRouter(tags=["Authentication"])

# 密码哈希配置（使用bcrypt算法）
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# JWT配置（实际项目应从环境变量读取）
SECRET_KEY = "your-secret-key-keep-it-secret!"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30


# 用户模型
class UserCreate(BaseModel):
    username: str
    password: str


# 令牌响应模型
class Token(BaseModel):
    access_token: str
    token_type: str


@router.post("/token", response_model=Token)
async def login_for_access_token(form_data: UserCreate):
    # 用户验证（示例用静态数据，实际应查数据库）
    if form_data.username != "admin" or not pwd_context.verify(
            "secret",  # 数据库中存储的哈希密码
            form_data.password
    ):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="用户名或密码错误",
            headers={"WWW-Authenticate": "Bearer"},
        )

    # 生成JWT令牌
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": form_data.username},
        expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}


def create_access_token(data: dict, expires_delta: timedelta):
    to_encode = data.copy()
    expire = datetime.utcnow() + expires_delta
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt
</code></pre>
<h4 id="代码解析">代码解析：</h4>
<ol>
<li><code>CryptContext</code> 使用bcrypt算法进行密码哈希处理</li>
<li><code>UserCreate</code>模型规范了客户端请求的数据格式</li>
<li>密码验证使用<code>verify()</code>方法比对哈希值</li>
<li><code>create_access_token</code>生成带过期时间的JWT令牌</li>
</ol>
<h3 id="13-运行环境配置">1.3 运行环境配置</h3>
<pre><code class="language-bash"># 安装依赖库（版本需严格对应）
fastapi==0.68.1
uvicorn==0.15.0
python-jose[cryptography]==3.3.0
passlib==1.7.4
</code></pre>
<h2 id="二访问令牌生成与校验">二、访问令牌生成与校验</h2>
<h3 id="21-jwt令牌结构解析">2.1 JWT令牌结构解析</h3>
<p>示例令牌：<br>
<code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTY1OTA3MDQwMH0.3w7hJH4KZ6Q-Mje3Q2T3T6k4Vd6QyQ6Qk7v6Qw7q6Qk</code></p>
<p>分段说明：</p>
<ul>
<li>Header：<code>{"alg": "HS256", "typ": "JWT"}</code></li>
<li>Payload：<code>{"sub": "admin", "exp": 1659070400}</code></li>
<li>Signature：使用密钥对前两部分的签名</li>
</ul>
<h3 id="22-令牌校验实现">2.2 令牌校验实现</h3>
<pre><code class="language-python">from fastapi.security import OAuth2PasswordBearer

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/token")


async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="无法验证凭证",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception

    # 此处应查询数据库验证用户存在性
    if username != "admin":
        raise credentials_exception
    return username


# 安全路由示例
@router.get("/protected")
async def protected_route(current_user: str = Depends(get_current_user)):
    return {"message": f"欢迎您, {current_user}"}
</code></pre>
<h4 id="校验流程">校验流程：</h4>
<ol>
<li>从请求头提取Bearer令牌</li>
<li>解码并验证JWT签名</li>
<li>检查令牌有效期</li>
<li>验证用户是否存在（示例简化处理）</li>
</ol>
<h2 id="三课后quiz">三、课后Quiz</h2>
<ol>
<li>
<p><strong>为什么在密码存储时要使用哈希而不是明文？</strong><br>
A. 提高查询速度<br>
B. 防止数据泄露导致密码暴露<br>
C. 减少存储空间占用<br>
D. 方便密码找回</p>
<p><strong>答案</strong>：B。哈希处理后的密码即使泄露也无法逆向获取原始密码</p>
</li>
<li>
<p><strong>JWT中的签名部分主要作用是什么？</strong><br>
A. 美化令牌格式<br>
B. 验证令牌内容未被篡改<br>
C. 加速令牌解析<br>
D. 支持多种加密算法</p>
<p><strong>答案</strong>：B。签名确保令牌在传输过程中未被修改</p>
</li>
</ol>
<h2 id="四常见报错解决方案">四、常见报错解决方案</h2>
<h3 id="问题1401-unauthorized">问题1：401 Unauthorized</h3>
<ul>
<li><strong>现象</strong>：<code>{"detail":"Not authenticated"}</code></li>
<li><strong>原因</strong>：请求头缺少Authorization字段或格式错误</li>
<li><strong>解决</strong>：<pre><code class="language-bash">curl -H "Authorization: Bearer your_token" http://localhost:8000/protected
</code></pre>
</li>
</ul>
<h3 id="问题2422-validation-error">问题2：422 Validation Error</h3>
<ul>
<li><strong>现象</strong>：请求体参数校验失败</li>
<li><strong>原因</strong>：未按UserCreate模型格式提交数据</li>
<li><strong>解决</strong>：检查请求是否包含username和password字段</li>
</ul>
<h3 id="问题3403-forbidden">问题3：403 Forbidden</h3>
<ul>
<li><strong>现象</strong>：<code>{"detail": "Invalid authentication credentials"}</code></li>
<li><strong>原因</strong>：令牌已过期或签名验证失败</li>
<li><strong>解决</strong>：重新获取有效令牌，检查密钥一致性</li>
</ul>
<h2 id="五安全增强建议">五、安全增强建议</h2>
<ol>
<li><strong>生产环境必须</strong>：
<ul>
<li>通过HTTPS传输令牌</li>
<li>使用环境变量存储密钥</li>
<li>定期轮换加密密钥</li>
</ul>
</li>
<li><strong>推荐方案</strong>：<pre><code class="language-python"># 从环境变量读取密钥
import os
SECRET_KEY = os.getenv("JWT_SECRET_KEY")
if not SECRET_KEY:
    raise ValueError("Missing JWT_SECRET_KEY environment variable")
</code></pre>
</li>
</ol>
<p>通过本章学习，开发者可以掌握FastAPI的OAuth2密码流程核心实现，建议结合数据库实现完整的用户管理系统。下一章将讲解权限控制与角色管理的高级应用。</p>
<p>余下文章内容请点击跳转至 个人博客页面 或者 扫码关注或者微信搜一搜：<code>编程智域 前端至全栈交流与成长</code>，阅读完整的文章：<a href="https://blog.cmdragon.cn/posts/4541d035d084/" target="_blank" rel="noopener nofollow">FastAPI安全认证：从密码到令牌的魔法之旅 | cmdragon's Blog</a></p>
<h2 id="往期文章归档">往期文章归档：</h2>
<ul>
<li><a href="https://blog.cmdragon.cn/posts/e1b940e13b4d/" target="_blank" rel="noopener nofollow">密码哈希：Bcrypt的魔法与盐值的秘密 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/15de786fd044/" target="_blank" rel="noopener nofollow">用户认证的魔法配方：从模型设计到密码安全的奇幻之旅 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/bbb2f2716edb/" target="_blank" rel="noopener nofollow">FastAPI安全门神：OAuth2PasswordBearer的奇妙冒险 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/4054bb761a12/" target="_blank" rel="noopener nofollow">OAuth2密码模式：信任的甜蜜陷阱与安全指南 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/547a7e3d7ac7/" target="_blank" rel="noopener nofollow">API安全大揭秘：认证与授权的双面舞会 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/4a29b618aa59/" target="_blank" rel="noopener nofollow">异步日志监控：FastAPI与MongoDB的高效整合之道 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/6455cdef0c41/" target="_blank" rel="noopener nofollow">FastAPI与MongoDB分片集群：异步数据路由与聚合优化 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/3c81964d922c/" target="_blank" rel="noopener nofollow">FastAPI与MongoDB Change Stream的实时数据交响曲 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/b933afc93ab1/" target="_blank" rel="noopener nofollow">地理空间索引：解锁日志分析中的位置智慧 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/73a07166228e/" target="_blank" rel="noopener nofollow">异步之舞：FastAPI与MongoDB的极致性能优化之旅 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/f243ecf59662/" target="_blank" rel="noopener nofollow">异步日志分析：MongoDB与FastAPI的高效存储揭秘 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/2565cdc59f74/" target="_blank" rel="noopener nofollow">MongoDB索引优化的艺术：从基础原理到性能调优实战 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/714772e1fbe0/" target="_blank" rel="noopener nofollow">解锁FastAPI与MongoDB聚合管道的性能奥秘 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/bd24c2bf486f/" target="_blank" rel="noopener nofollow">异步之舞：Motor驱动与MongoDB的CRUD交响曲 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/8d4b0186aaf6/" target="_blank" rel="noopener nofollow">异步之舞：FastAPI与MongoDB的深度协奏 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/67c49b3ab489/" target="_blank" rel="noopener nofollow">数据库迁移的艺术：FastAPI生产环境中的灰度发布与回滚策略 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/c761e999ff26/" target="_blank" rel="noopener nofollow">数据库迁移的艺术：团队协作中的冲突预防与解决之道 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/1129cda88dea/" target="_blank" rel="noopener nofollow">驾驭FastAPI多数据库：从读写分离到跨库事务的艺术 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/e878319e1f7e/" target="_blank" rel="noopener nofollow">数据库事务隔离与Alembic数据恢复的实战艺术 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/24aeaadbab78/" target="_blank" rel="noopener nofollow">FastAPI与Alembic：数据库迁移的隐秘艺术 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/944b5aca784d/" target="_blank" rel="noopener nofollow">飞行中的引擎更换：生产环境数据库迁移的艺术与科学 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/24dfbc5f2148/" target="_blank" rel="noopener nofollow">Alembic迁移脚本冲突的智能检测与优雅合并之道 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/91ba0550aa71/" target="_blank" rel="noopener nofollow">多数据库迁移的艺术：Alembic在复杂环境中的精妙应用 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/55a63eaa29d3/" target="_blank" rel="noopener nofollow">数据库事务回滚：FastAPI中的存档与读档大法 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/24a6445f18ef/" target="_blank" rel="noopener nofollow">Alembic迁移脚本：让数据库变身时间旅行者 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/57d1e2810a31/" target="_blank" rel="noopener nofollow">数据库连接池：从银行柜台到代码世界的奇妙旅程 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/336930484b68/" target="_blank" rel="noopener nofollow">点赞背后的技术大冒险：分布式事务与SAGA模式 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/bd59ee70c62e/" target="_blank" rel="noopener nofollow">N+1查询：数据库性能的隐形杀手与终极拯救指南 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/9f5729db84ef/" target="_blank" rel="noopener nofollow">FastAPI与Tortoise-ORM开发的神奇之旅 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/62012cf83e26/" target="_blank" rel="noopener nofollow">DDD分层设计与异步职责划分：让你的代码不再“异步”混乱 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/c195d6c4d0b5/" target="_blank" rel="noopener nofollow">异步数据库事务锁：电商库存扣减的防超卖秘籍 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/f0e851eb1a74/" target="_blank" rel="noopener nofollow">FastAPI中的复杂查询与原子更新指南 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/512d338e0833/" target="_blank" rel="noopener nofollow">深入解析Tortoise-ORM关系型字段与异步查询 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/7649fa5d5b04/" target="_blank" rel="noopener nofollow">FastAPI与Tortoise-ORM模型配置及aerich迁移工具 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/c9824156400c/" target="_blank" rel="noopener nofollow">异步IO与Tortoise-ORM的数据库 | cmdragon's Blog</a></li>
<li><a href="https://tools.cmdragon.cn/sitemap_index.xml" target="_blank" rel="noopener nofollow">XML Sitemap</a></li>
<li></li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0814826770787037" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-06-03 00:24">2025-06-03 00:23</span>&nbsp;
<a href="https://www.cnblogs.com/Amd794">Amd794</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18907842);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18907842', targetLink: 'https://www.cnblogs.com/Amd794/p/18907842', title: 'FastAPI安全认证：从密码到令牌的魔法之旅' })">举报</a>
</div>
        