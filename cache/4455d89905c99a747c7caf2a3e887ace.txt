
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/edisontalk/p/-/quick-start-agent-orchestration-groupchat" title="发布于 2025-07-27 21:14">
    <span role="heading" aria-level="2">多Agent协作入门：群聊编排模式</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250727212215335-744660067.png" alt="多Agent协作入门：群聊编排模式" class="desc_img">
        在群聊编排模式中，各个Agent就像加入了一个微信群，由群管理员协调进行群聊对话。这种模式非常适合于模拟会议、辩论或协作解决问题的会议类型场景。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>大家好，我是Edison。</p>
<p><span><a class="normal_text_link" href="https://www.cnblogs.com/edisontalk/p/-/quick-start-agent-orchestration-sequential" target="_blank" data-itemshowtype="0" data-linktype="2">上一篇</a>我们学习了Semantic Kernel中的顺序编排模式，它<span>非常适合如文档审阅、数据处理管道等工作流类型任务场景。今天，我们学习新的模式：群聊编排。</span></span></p>
<h1><strong>群聊编排模式简介</strong></h1>
<p>在群聊编排模式中，各个Agent就像加入了一个微信群，由群管理员协调进行群聊对话。这种模式非常适合于模拟会议、辩论或协作解决问题的会议类型场景。</p>
<p>下图展示了一个讨论业务建议的用例，由一个Chat Manager负责主持对话，依次让三个参与对话的Agent进行建议发表。这个Chat Manager就像是群管理员，它不仅负责主持对话，也会在必要时引入人工干预。</p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250725202800434-217247411.png" alt="image" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<h1><strong><span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 8px;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin-top: 8px;margin-bottom: 8px;outline: 0px;visibility: visible;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;strong&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">实现群聊编排模式</span></strong></h1>
<p>这里我们来实现一个和上一节类似的DEMO，我们定义2个Agent：广告文案写手（CopyWriter） 和 编辑/审稿人（Editor），假设他们是一个小Team，在承接广告文案的创作。假设每个文案都需要审稿人审核，可以有多轮审核，直到审核确认OK才能交付。</p>
<p>为了简单地实现这个功能，我们还是创建一个.NET控制台项目，然后安装以下包：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">Microsoft.SemanticKernel.Agents.Core
Microsoft.SemanticKernel.Agents.OpenAI (Preview版本）
Microsoft.SemanticKernel.Agents.Orchestration (Preview版本）
Microsoft.SemanticKernel.Agents.Runtime.InProcess (Preview版本）</span></pre>
</div>
<p>需要注意的是，由于Semantic Kernel的较多功能目前还处于实验预览阶段，所以建议在该项目的csproj文件中加入以下配置，统一取消警告：</p>
<div class="cnblogs_code">
<pre>&lt;PropertyGroup&gt;
&lt;NoWarn&gt;$(NoWarn);CA2007;IDE1006;SKEXP0001;SKEXP0110;OPENAI001&lt;/NoWarn&gt;
&lt;/PropertyGroup&gt;</pre>
</div>
<p>创建一个appsettings.json配置文件，填入以下关于LLM API的配置，其中API_KEY请输入你自己的：</p>
<div class="cnblogs_code">
<pre>{
  "LLM": {
    "BASE_URL": "https://api.siliconflow.cn",
    "API_KEY": "******************************",
    "MODEL_ID": "Qwen/Qwen2.5-32B-Instruct"
  }
}</pre>
</div>
<p data-pm-slice="0 0 []">这里我们使用SiliconCloud提供的&nbsp;<span class="code-snippet__string">Qwen2.5-32B-Instruct&nbsp;模型，你可以通过这个URL注册账号：<a href="https://cloud.siliconflow.cn/i/DomqCefW" rel="noopener nofollow" target="_blank">https://cloud.siliconflow.cn/i/DomqCefW</a>&nbsp;获取大量免费的Token来进行本次实验。</span></p>
<p data-pm-slice="0 0 []">有了LLM API，我们可以创建一个Kernel供后续使用，这也是老面孔了：</p>
<div class="cnblogs_code">
<pre>Console.WriteLine(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Now loading the configuration...</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> config = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ConfigurationBuilder()
    .AddJsonFile($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">appsettings.json</span><span style="color: rgba(128, 0, 0, 1)">"</span>, optional: <span style="color: rgba(0, 0, 255, 1)">false</span>, reloadOnChange: <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">)
    .Build();
Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Now loading the chat client...</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> chattingApiConfiguration = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> OpenAiConfiguration(
    config.GetSection(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">LLM:MODEL_ID</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">).Value,
    config.GetSection(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">LLM:BASE_URL</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">).Value,
    config.GetSection(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">LLM:API_KEY</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">).Value);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> openAiChattingClient = <span style="color: rgba(0, 0, 255, 1)">new</span> HttpClient(<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> OpenAiHttpHandler(chattingApiConfiguration.EndPoint));
</span><span style="color: rgba(0, 0, 255, 1)">var</span> kernel =<span style="color: rgba(0, 0, 0, 1)"> Kernel.CreateBuilder()
    .AddOpenAIChatCompletion(chattingApiConfiguration.ModelId, chattingApiConfiguration.ApiKey, httpClient: openAiChattingClient)
    .Build();</span></pre>
</div>
<p><span><span>接下来，我们就一步一步地来看看核心的代码。</span></span></p>
<h1><span>定义Agent</span></h1>
<p><span><span><span>这里我们来定义2个Agent：Writer，Editor</span></span></span></p>
<p><strong>（1）Writer 文案写手</strong></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> writerAgent = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatCompletionAgent()
{
    Name </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">CopyWriter</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Instructions </span>= <span style="color: rgba(128, 0, 0, 1)">"""
</span>                You are a copywriter with ten years of experience and are known <span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> brevity and a dry humor.
                The goal </span><span style="color: rgba(0, 0, 255, 1)">is</span> to refine and decide on the single best copy <span style="color: rgba(0, 0, 255, 1)">as</span> an expert <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> the field.
                Only provide a single proposal per response.
                You</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">re laser focused on the goal at hand.</span>
                Don<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">t waste time with chit chat.</span>
<span style="color: rgba(0, 0, 0, 1)">                Consider suggestions when refining an idea.
                </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">,</span>
    Description = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">A copy writer.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Kernel </span>=<span style="color: rgba(0, 0, 0, 1)"> kernel
};</span></pre>
</div>
<p><strong>（2）Editor 审核编辑</strong></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> editorAgent = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatCompletionAgent()
{
    Name </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Reviewer</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Instructions </span>= <span style="color: rgba(128, 0, 0, 1)">"""
</span>                You are an art director who has opinions about copywriting born of a love <span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> David Ogilvy.
                The goal </span><span style="color: rgba(0, 0, 255, 1)">is</span> to determine <span style="color: rgba(0, 0, 255, 1)">if</span> the given copy <span style="color: rgba(0, 0, 255, 1)">is</span><span style="color: rgba(0, 0, 0, 1)"> acceptable to print.
                If so, state that it </span><span style="color: rgba(0, 0, 255, 1)">is</span><span style="color: rgba(0, 0, 0, 1)"> approved.
                If not, provide insight on how to refine suggested copy without example.
                </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">,</span>
    Description = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">An editor.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Kernel </span>=<span style="color: rgba(0, 0, 0, 1)"> kernel
};</span></pre>
</div>
<h1><span>选择编排模式</span></h1>
<p><span><span>这里我们选择的是群聊编排模式：<span><span>GroupChatOrchestration，将需要编排的2个Agent作为参数传递给它。</span></span></span></span></p>
<p><span><span>需要注意的是：<span><strong>这里我们选择Semantic Kernel预定义好的群管理员类 RoundRobinGroupChatManager，顾名思义，它的策略就是轮流让参与的群成员发言，没有特殊的指定逻辑</strong><span>。</span></span></span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Set up the GroupChat Orchestration</span>
ChatHistory history =<span style="color: rgba(0, 0, 0, 1)"> [];
ValueTask responseCallback(ChatMessageContent response)
{
    history.Add(response);
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> ValueTask.CompletedTask;
}
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Use RoundRobinGroupChatManager to manage the conversation flow</span>
<span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">string</span> topic = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Create a slogan for a new electric SUV that is affordable and fun to drive.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 0, 255, 1)">var</span> orchestration = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> GroupChatOrchestration(
    </span><span style="color: rgba(0, 0, 255, 1)">new</span> RoundRobinGroupChatManager { MaximumInvocationCount = <span style="color: rgba(128, 0, 128, 1)">5</span> }, <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Maximum 5 rounds of conversation</span>
<span style="color: rgba(0, 0, 0, 1)">    writerAgent,
    editorAgent)
{
    ResponseCallback </span>=<span style="color: rgba(0, 0, 0, 1)"> responseCallback
};</span></pre>
</div>
<h1><span data-pm-slice="3 3 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;p&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;line-height: 1.75em; margin: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,null,&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:null},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 8px;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;data-pm-slice&quot;:&quot;3 3 [\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;section\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;letter-spacing: 0.578px;text-align: left;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;p\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;line-height: 1.75em; margin: 8px;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,null,\&quot;node\&quot;,{\&quot;tagName\&quot;:\&quot;span\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:null},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;}]&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;text-transform: none;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;text-align: left;margin-top: 8px;margin-bottom: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">启动运行时</span></span></h1>
<p><span><span>在Semantic Kernel中，需要运行时（Runtime）才能管理Agent的执行，因此这里我们需要在正式开始前使用InProcessRuntime并启动起来。</span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Start the Runtime</span>
<span style="color: rgba(0, 0, 255, 1)">var</span> runtime = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> InProcessRuntime();
</span><span style="color: rgba(0, 0, 255, 1)">await</span> runtime.StartAsync();</pre>
</div>
<h1><span>调用编排 并 收集结果</span></h1>
<p><span><span>准备工作差不多了，现在我们可以开始调用编排了。</span></span></p>
<p><span><span>这也是老面孔代码了，不过多解释。</span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Start the Chat</span>
Console.WriteLine($<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)"># INPUT: {topic}{Environment.NewLine}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">
{
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Invoke the Orchestration</span>
    <span style="color: rgba(0, 0, 255, 1)">var</span> result = <span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> orchestration.InvokeAsync(topic, runtime);
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Collect Results from multi Agents</span>
    <span style="color: rgba(0, 0, 255, 1)">var</span> output = <span style="color: rgba(0, 0, 255, 1)">await</span> result.GetValueAsync(TimeSpan.FromSeconds(<span style="color: rgba(128, 0, 128, 1)">10</span> * <span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">));
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Print the Results</span>
    Console.WriteLine($<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{Environment.NewLine}# RESULT: {output}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{Environment.NewLine}#ORCHESTRATION HISTORY:{Environment.NewLine}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> message <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> history)
    {
        Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">#{message.Role} - {message.AuthorName}:</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{message.Content}{Environment.NewLine}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    }
}
</span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (HttpOperationException ex)
{
    Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Exception: {ex.Message}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
}
</span><span style="color: rgba(0, 0, 255, 1)">finally</span><span style="color: rgba(0, 0, 0, 1)">
{
    </span><span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> runtime.RunUntilIdleAsync();
    Console.ResetColor();
    Console.WriteLine();
}</span></pre>
</div>
<p>上面的代码示例中主动输出了编排过程中每个Agent的生成结果历史记录，便于我们一会儿查看。</p>
<h1><strong><span>效果展示</span></strong></h1>
<p>用户输入问题："Create a slogan for a new electric SUV that is affordable and fun to drive."</p>
<p><span data-pm-slice="3 3 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;p&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;line-height: 1.75em; margin: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,null,&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:null},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span data-pm-slice="3 3 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 8px;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;data-pm-slice&quot;:&quot;3 3 [\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;section\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;letter-spacing: 0.578px;text-align: left;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;p\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;line-height: 1.75em; margin: 8px;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,null,\&quot;node\&quot;,{\&quot;tagName\&quot;:\&quot;span\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:null},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;}]&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">假设客户公司有一个新产品：一辆新的电动SUV汽车，它性价比高，且驾驶乐趣足。</span></span></p>
<p><span data-pm-slice="3 3 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;p&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;line-height: 1.75em; margin: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,null,&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:null},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span data-pm-slice="3 3 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 8px;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;data-pm-slice&quot;:&quot;3 3 [\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;section\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;letter-spacing: 0.578px;text-align: left;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;p\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;line-height: 1.75em; margin: 8px;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,null,\&quot;node\&quot;,{\&quot;tagName\&quot;:\&quot;span\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:null},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;}]&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">最终经过2个Agent的多轮对话，结果显示如下：</span></span></p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250725203208075-2035092424.png" alt="image" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>可以看到：</p>
<p>第一轮对话：Agent1-文案写手根据用户需求写了一个初稿，Agent2-审核员对这个初稿进行了初步审核。</p>
<p><span data-pm-slice="3 3 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;p&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;line-height: 1.75em; margin: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,null,&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:null},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span data-pm-slice="3 3 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 8px;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;data-pm-slice&quot;:&quot;3 3 [\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;section\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;letter-spacing: 0.578px;text-align: left;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;p\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;line-height: 1.75em; margin: 8px;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,null,\&quot;node\&quot;,{\&quot;tagName\&quot;:\&quot;span\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:null},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;}]&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">第二轮对话：Agent1-文案写手并没有着急修改而是让审核员确认是否需要进一步完善，Agent2-审核员则在这次对话给出了一些修改建议。</span></span></p>
<p><span data-pm-slice="3 3 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;p&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;line-height: 1.75em; margin: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,null,&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:null},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span data-pm-slice="3 3 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 8px;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;data-pm-slice&quot;:&quot;3 3 [\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;section\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;letter-spacing: 0.578px;text-align: left;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;p\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;line-height: 1.75em; margin: 8px;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,null,\&quot;node\&quot;,{\&quot;tagName\&quot;:\&quot;span\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:null},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;}]&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">第三轮对话：Agent1-文案写手根据修改建议给出了第二版，这次Agent2-审核员确认OK也没有再给出其他建议，群聊对话也就此为止结束了。</span></span></p>
<h1><span data-pm-slice="3 3 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;p&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;line-height: 1.75em; margin: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,null,&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:null},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span data-pm-slice="3 3 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 8px;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;data-pm-slice&quot;:&quot;3 3 [\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;section\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;letter-spacing: 0.578px;text-align: left;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;p\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;line-height: 1.75em; margin: 8px;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,null,\&quot;node\&quot;,{\&quot;tagName\&quot;:\&quot;span\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:null},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;}]&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">自定义群管理员</span></span></h1>
<p>除了预定好的群管理员之外，我们还可以通过继承 GroupChatManager 来创建自定义的群管理员类，如下所示：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Microsoft.SemanticKernel.Agents.Orchestration.GroupChat;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Microsoft.SemanticKernel.ChatCompletion;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Threading;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Threading.Tasks;

</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> CustomGroupChatManager : GroupChatManager
{
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">override</span> ValueTask&lt;GroupChatManagerResult&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;&gt; FilterResults(ChatHistory history, CancellationToken cancellationToken = <span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Custom logic to filter or summarize chat results</span>
        <span style="color: rgba(0, 0, 255, 1)">return</span> ValueTask.FromResult(<span style="color: rgba(0, 0, 255, 1)">new</span> GroupChatManagerResult&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Summary</span><span style="color: rgba(128, 0, 0, 1)">"</span>) { Reason = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Custom summary logic.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> });
    }
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">override</span> ValueTask&lt;GroupChatManagerResult&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;&gt; SelectNextAgent(ChatHistory history, GroupChatTeam team, CancellationToken cancellationToken = <span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Randomly select an agent from the team</span>
        <span style="color: rgba(0, 0, 255, 1)">var</span> random = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Random();
        </span><span style="color: rgba(0, 0, 255, 1)">int</span> index =<span style="color: rgba(0, 0, 0, 1)"> random.Next(team.Members.Count);
        </span><span style="color: rgba(0, 0, 255, 1)">string</span> nextAgent =<span style="color: rgba(0, 0, 0, 1)"> team.Members[index].Id;
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> ValueTask.FromResult(<span style="color: rgba(0, 0, 255, 1)">new</span> GroupChatManagerResult&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;(nextAgent) { Reason = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Custom selection logic.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> });
    }
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">override</span> ValueTask&lt;GroupChatManagerResult&lt;<span style="color: rgba(0, 0, 255, 1)">bool</span>&gt;&gt; ShouldRequestUserInput(ChatHistory history, CancellationToken cancellationToken = <span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Custom logic to decide if user input is needed</span>
        <span style="color: rgba(0, 0, 255, 1)">return</span> ValueTask.FromResult(<span style="color: rgba(0, 0, 255, 1)">new</span> GroupChatManagerResult&lt;<span style="color: rgba(0, 0, 255, 1)">bool</span>&gt;(<span style="color: rgba(0, 0, 255, 1)">false</span>) { Reason = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">No user input required.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> });
    }
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">override</span> ValueTask&lt;GroupChatManagerResult&lt;<span style="color: rgba(0, 0, 255, 1)">bool</span>&gt;&gt; ShouldTerminate(ChatHistory history, CancellationToken cancellationToken = <span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Optionally call the base implementation to check for default termination logic</span>
        <span style="color: rgba(0, 0, 255, 1)">var</span> baseResult = <span style="color: rgba(0, 0, 255, 1)">base</span><span style="color: rgba(0, 0, 0, 1)">.ShouldTerminate(history, cancellationToken).Result;
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (baseResult.Value)
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> If the base logic says to terminate, respect it</span>
            <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> ValueTask.FromResult(baseResult);
        }
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Custom logic to determine if the chat should terminate</span>
        <span style="color: rgba(0, 0, 255, 1)">bool</span> shouldEnd = history.Count &gt; <span style="color: rgba(128, 0, 128, 1)">10</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Example: end after 10 messages</span>
        <span style="color: rgba(0, 0, 255, 1)">return</span> ValueTask.FromResult(<span style="color: rgba(0, 0, 255, 1)">new</span> GroupChatManagerResult&lt;<span style="color: rgba(0, 0, 255, 1)">bool</span>&gt;(shouldEnd) { Reason = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Custom termination logic.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> });
    }
}</span></pre>
</div>
<p><span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; text-align: left; margin: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;strong&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;caret-color: var(--weui-BRAND); letter-spacing: 0.034em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">定义好之后，只需要在使用群聊编排模式的时候使用这个自定义管理器即可，如下所示：</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">GroupChatOrchestration orchestration 
  </span>= <span style="color: rgba(0, 0, 255, 1)">new</span> (<span style="color: rgba(0, 0, 255, 1)">new</span> CustomGroupChatManager { MaximumInvocationCount = <span style="color: rgba(128, 0, 128, 1)">5</span> }, ...);</pre>
</div>
<h1><strong><span>AgentChat</span></strong></h1>
<p>对于多Agent群聊来说，Semantic Kernel还提供了AgentChat的具体实现AgentGroupChat，它使用基于策略的方法来管理聊天的动态，具体实现上就是自己定义两个Strategy：SelectionStrategy 和 TerminationStrategy。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Initialize AgentGroupChat</span>
<span style="color: rgba(0, 0, 255, 1)">var</span> groupChat = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> AgentGroupChat(reviewerAgent, writerAgent)
{
    ExecutionSettings </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> AgentGroupChatSettings()
    {
        SelectionStrategy </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> KernelFunctionSelectionStrategy(selectionFunction, kernel)
        {
            InitialAgent </span>=<span style="color: rgba(0, 0, 0, 1)"> reviewerAgent,
            HistoryReducer </span>=<span style="color: rgba(0, 0, 0, 1)"> historyReducer,
            HistoryVariableName </span>=<span style="color: rgba(0, 0, 0, 1)"> KernelFunctionTerminationStrategy.DefaultHistoryVariableName,
            ResultParser </span>= (result) =&gt;<span style="color: rgba(0, 0, 0, 1)">
            {
                </span><span style="color: rgba(0, 0, 255, 1)">var</span> val = result.GetValue&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;() ??<span style="color: rgba(0, 0, 0, 1)"> ReviewerAgent.AgentName;
                </span><span style="color: rgba(0, 0, 255, 1)">return</span> val.ReplaceLineEndings(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">).Trim();
            }
        },
        TerminationStrategy </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> KernelFunctionTerminationStrategy(terminationFunction, kernel)
        {
            Agents </span>=<span style="color: rgba(0, 0, 0, 1)"> [reviewerAgent],
            HistoryReducer </span>=<span style="color: rgba(0, 0, 0, 1)"> historyReducer,
            HistoryVariableName </span>=<span style="color: rgba(0, 0, 0, 1)"> KernelFunctionTerminationStrategy.DefaultHistoryVariableName,
            MaximumIterations </span>= <span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">,
            ResultParser </span>= (result) =&gt;<span style="color: rgba(0, 0, 0, 1)">
            {
                </span><span style="color: rgba(0, 0, 255, 1)">var</span> val = result.GetValue&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;() ?? <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.Empty;
                </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> val.Contains(TerminationToken, StringComparison.OrdinalIgnoreCase);
            }
        }
    }
};</span></pre>
</div>
<p>更多详细内容，请阅读《<a href="https://www.cnblogs.com/edisontalk/p/-/quick-start-agent-orchestration-agentgroupchat" target="_blank">多Agent协作入门：AgentGroupChat</a>》</p>
<h1><strong><span>小结</span></strong></h1>
<p>本文介绍了群聊编排模式的基本概念，然后通过一个案例介绍了如何实现一个群聊编排模式，相信通过这个案例你能够有个感性的认识。</p>
<p>下一篇，我们将学习移交（Handoff）编排模式，它特别适合于动态工作流、专家交接方案等应用场景。</p>
<h1>参考资料</h1>
<p><span><span>Microsoft Learn:&nbsp;</span></span><a href="https://learn.microsoft.com/zh-cn/semantic-kernel/frameworks/agent/agent-orchestration?wt.mc_id=MVP_397012" target="_blank" rel="noopener nofollow">https://learn.microsoft.com/zh-cn/semantic-kernel/frameworks/agent/agent-orchestration</a></p>
<h1>推荐学习</h1>
<p><span><span><span><span><span><span><span><span>圣杰：<span>《<a href="https://www.cnblogs.com/sheng-jie/p/18840383" target="_blank">.NET+AI | Semantic Kernel入门到精通</a>》</span></span></span></span></span></span></span></span></span></p>
<p>&nbsp;</p>
<p style="text-align: center"><img src="https://images.cnblogs.com/cnblogs_com/edisonchou/1647700/o_200902144330EdisonTalk-Footer.jpg" alt="" style="width: 65%; border: 1px solid rgba(221, 221, 221, 1); border-radius: 3px; box-shadow: 0 4px 8px rgba(3, 27, 78, 0.12)"></p>
<div id="Copyright">
<p>作者：<span style="text-decoration: underline">爱迪生</span></p>
<p>出处：<a title="from" href="https://edisontalk.cnblogs.com" target="_blank">https://edisontalk.cnblogs.com</a></p>
<p>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。</p>
</div>
</div>
<div id="MySignature" role="contentinfo">
    <div align="center"><a href="https://weibo.com/u/2068032061?s=6uyXnP" target="_blank"><img border="0" src="http://service.t.sina.com.cn/widget/qmd/2068032061/d643d182/10.png"></a></div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.005555555555555556" data-date-updated="2025-07-27 21:22">2025-07-27 21:14</span>&nbsp;
<a href="https://www.cnblogs.com/edisontalk">EdisonZhou</a>&nbsp;
阅读(<span id="post_view_count">5</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19005375);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19005375', targetLink: 'https://www.cnblogs.com/edisontalk/p/-/quick-start-agent-orchestration-groupchat', title: '多Agent协作入门：群聊编排模式' })">举报</a>
</div>
        