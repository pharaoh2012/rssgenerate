
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/du-hong/p/18420303" title="发布于 2025-06-18 16:00">
    <span role="heading" aria-level="2">《刚刚问世》系列初窥篇-Java+Playwright自动化测试-18- 操作模态对话框弹窗 （详细教程）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h3 id="autoid-0-0-0">1.简介</h3>
<p>我们在日常工作中，会经常遇到弹出警告框的问题，弹框无法绕过，必须处理才可以执行后续的测试，所以弹框处理也是我们必须掌握的一个知识。宏哥在java+selenium系列文章中介绍过这部分内容。那么，playwright对于弹框的处理是怎样的？是否比selenium更加简单呢？之前宏哥在Python+Playwright系列文章中也介绍过，看一下Java和Python的处理是否有区别？下面宏哥就来介绍一下playwright对于弹框的处理。自己在文章中查找答案。</p>
<h3 id="autoid-0-1-0">2.弹框分类</h3>
<p>弹框通常分为3种，分别为alert，confirm，promot。</p>
<ul>
<li>alert弹框：只有信息和确定按键</li>
<li>confirm弹框：在alert弹窗基础上增加了取消按钮</li>
<li>prompt弹框：在confirm的基础上增加了可输入文本内容的功能</li>
</ul>
<h3 id="autoid-0-2-0">3.dialog 弹窗</h3>
<p><a title="Dialog" href="https://playwright.dev/java/docs/api/class-dialog" rel="noopener nofollow">Dialog</a>&nbsp;对象通过&nbsp;<a href="https://playwright.dev/java/docs/api/class-page#page-event-dialog" rel="noopener nofollow">Page.onDialog（handler）</a>&nbsp;事件按页面调度。</p>
<p><span>使用 class 的示例：</span><code>Dialog</code></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span> com.microsoft.playwright.*<span style="color: rgba(0, 0, 0, 1)">;

</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Example {
  </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {
    </span><span style="color: rgba(0, 0, 255, 1)">try</span> (Playwright playwright =<span style="color: rgba(0, 0, 0, 1)"> Playwright.create()) {
      BrowserType chromium </span>=<span style="color: rgba(0, 0, 0, 1)"> playwright.chromium();
      Browser browser </span>=<span style="color: rgba(0, 0, 0, 1)"> chromium.launch();
      Page page </span>=<span style="color: rgba(0, 0, 0, 1)"> browser.newPage();
      page.onDialog(dialog </span>-&gt;<span style="color: rgba(0, 0, 0, 1)"> {
        System.out.println(dialog.message());
        dialog.dismiss();
      });
      page.evaluate(</span>"alert('1')"<span style="color: rgba(0, 0, 0, 1)">);
      browser.close();
    }
  }
}</span></pre>
</div>
<p>敲黑板！！！注意：对话框会自动关闭，除非有&nbsp;<a href="https://playwright.dev/java/docs/api/class-page#page-event-dialog" rel="noopener nofollow">Page.onDialog（handler）</a>&nbsp;侦听器。当侦听器存在时，它<span>必须&nbsp;<a href="https://playwright.dev/java/docs/api/class-dialog#dialog-accept" rel="noopener nofollow">Dialog.accept（）</a>&nbsp;或&nbsp;<a href="https://playwright.dev/java/docs/api/class-dialog#dialog-dismiss" rel="noopener nofollow">Dialog.dismiss（）</a>&nbsp;对话框 - 否则页面将<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#never_blocking" rel="noopener nofollow" target="_blank">冻结</a>等待对话框，并且单击等操作将永远不会完成。</span></p>
<div>
<div>
<h4 id="autoid-0-3-0">3.1dialog方法</h4>
<h5>3.1.1accept()</h5>
<p><strong>用法：</strong></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">Dialog.accept();
Dialog.accept(promptText);</span></pre>
</div>
<p><strong>参数：</strong></p>
<p>promptText 字符串（可选), 要在提示中输入的文本。如果对话框 type 没有提示，则不会产生任何影响.</p>
<h5>3.1.2defaultValue()</h5>
<p>default_value, 如果对话框是提示的，则返回默认提示值。否则，返回空字符串。</p>
<div class="cnblogs_code">
<pre>Dialog.defaultValue();</pre>
</div>
<h5>3.1.3dismiss()</h5>
<p>当对话框被关闭时返回。</p>
<div class="cnblogs_code">
<pre>Dialog.dismiss();</pre>
</div>
<h5>3.1.4message()</h5>
<p>message 获取对话框中显示的消息,。</p>
<div class="cnblogs_code">
<pre>Dialog.message();</pre>
</div>
<h5>3.1.5page()</h5>
<p>启动此对话框的页面（如果可用）。</p>
<div class="cnblogs_code">
<pre>Dialog.page();</pre>
</div>
<h5>3.1.6type()</h5>
<p>type返回对话框的类型，可以是alert, beforeunload, confirm或 prompt其中一个。</p>
<div class="cnblogs_code">
<pre>Dialog.type();</pre>
</div>
<h3 id="autoid-0-4-0">3.2dialog 事件监听</h3>
<p>Playwright 可以与网页对话框进行交互，例如&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/alert" rel="noopener nofollow" target="_blank"><code>alert</code></a>、<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm" rel="noopener nofollow" target="_blank"><code>confirm</code></a>、<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt" rel="noopener nofollow" target="_blank"><code>prompt</code></a>&nbsp;以及&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event" rel="noopener nofollow" target="_blank"><code>beforeunload</code></a>&nbsp;确认。playwright 框架可以监听dialog事件，不管你alert 什么时候弹出来，监听到事件就自动处理了。</p>
<p>默认情况下，Playwright 会自动关闭对话框，因此您不必处理它们。但是，可以在触发对话的操作之前注册对话处理程序&nbsp;<a href="https://playwright.dev/java/docs/api/class-dialog#dialog-accept" rel="noopener nofollow">Dialog.accept（）</a>&nbsp;或&nbsp;<a href="https://playwright.dev/java/docs/api/class-dialog#dialog-dismiss" rel="noopener nofollow">Dialog.dismiss（）</a>&nbsp;它。</p>
<div class="cnblogs_code">
<pre>page.onDialog(dialog -&gt;<span style="color: rgba(0, 0, 0, 1)"> dialog.accept());
page.getByRole(AriaRole.BUTTON).click();</span></pre>
</div>
<p><a href="https://playwright.dev/java/docs/api/class-page#page-event-dialog" rel="noopener nofollow">Page.onDialog（handler）</a>&nbsp;侦听器<span>必须处理对话。否则，你的操作将停止，无论是&nbsp;<a href="https://playwright.dev/java/docs/api/class-locator#locator-click" rel="noopener nofollow">Locator.click（）</a>&nbsp;还是其他内容。这是因为 Web 中的对话框是模态对话框，因此会阻止进一步的页面执行，直到它们被处理。</span></p>
<p><span>因此，以下代码段将永远无法解析：</span></p>
<div class="cnblogs_code">
<pre>page.onDialog(dialog -&gt;<span style="color: rgba(0, 0, 0, 1)"> System.out.println(dialog.message()));
page.getByRole(AriaRole.BUTTON).click(); </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Will hang here</span></pre>
</div>
</div>
<p><strong>注:当没有page.on("dialog")侦听器存在时，所有对话框都会自动关闭。</strong></p>
</div>
<h3 id="autoid-0-5-0">3.模态框的定义</h3>
<p>　　模态对话框（Modal Dialogue Box，又叫做模式对话框），是指在用户想要对对话框以外的应用程序进行操作时，必须首先对该对话框进行响应。如单击【确定】或【取消】按钮等将该对话框关闭。一般来说，Windows应用程序中，对话框分为模态对话框和<a href="https://baike.baidu.com/item/%E9%9D%9E%E6%A8%A1%E6%80%81%E5%AF%B9%E8%AF%9D%E6%A1%86/4751676" rel="noopener nofollow" target="_blank" data-lemmaid="4751676">非模态对话框</a>两种。二者的区别在于当对话框打开时，是否允许用户进行其他对象的操作。</p>
<h4 id="autoid-0-6-0">3.1警告框</h4>
<p>警告框经常用于确保用户可以得到某些信息。</p>
<p>当警告框出现后，用户需要点击确定按钮才能继续进行操作。</p>
<p>语法：</p>
<div class="cnblogs_code">
<pre>alert("文本")</pre>
</div>
<h4 id="autoid-0-6-1">3.2确认框</h4>
<p>确认框用于使用户可以验证或者接受某些信息。</p>
<p>当确认框出现后，用户需要点击确定或者取消按钮才能继续进行操作。</p>
<p>如果用户点击确认，那么返回值为 true。如果用户点击取消，那么返回值为 false。</p>
<p>语法：</p>
<div class="cnblogs_code">
<pre>confirm("文本")</pre>
</div>
<h4 id="autoid-0-6-2">3.3提示框</h4>
<p>提示框经常用于提示用户在进入页面前输入某个值。</p>
<p>当提示框出现后，用户需要输入某个值，然后点击确认或取消按钮才能继续操纵。</p>
<p>如果用户点击确认，那么返回值为输入的值。如果用户点击取消，那么返回值为 null。</p>
<p>语法：</p>
<div class="cnblogs_code">
<pre>prompt("文本","默认值")</pre>
</div>
<h4 id="autoid-0-6-3">3.4测试页面准备</h4>
<p>ModalDialogueBox.html页面参考代码如下：</p>
<div class="cnblogs_code">
<pre>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="UTF-8"&gt;
&lt;title&gt;模态框&lt;/title&gt;
&lt;/head&gt;
&lt;script type="text/javascript"&gt;
window.onload = function(){
    document.getElementById("input_1").onclick = function(){
        alert("您关注了‘北京宏哥’微信公众号！");
    };
    document.getElementById("input_2").onclick = function(){
        confirm("确定关注微信公众号：北京宏哥？")
    };
    document.getElementById("input_3").onclick = function(){
        prompt("请输入微信公众号：","北京宏哥");
    };
}

&lt;/script&gt;
&lt;style&gt;
.button1 {
    background-color: #f44336; 
    border: none;
    color: white;
    padding: 15px 32px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 28px;
    margin-bottom: 100px;
    text-decoration:none;
    color: white;
}
.button {
    background-color: #4CAF50;
    border: none;
    color: white;
    padding: 15px 32px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 4px 2px;
    cursor: pointer;
}
#myAnchor
{
  text-decoration:none;
  color: white;
}
&lt;/style&gt;
&lt;body&gt;
    &lt;div style=" text-align:center;"&gt;
        &lt;div style="height: 100px;margin-top: 200px;"&gt;
            &lt;button class="button1"&gt;&lt;a id="myAnchor" href="https://www.cnblogs.com/du-hong/"&gt;北京-宏哥&lt;/a&gt;&lt;/button&gt;&lt;/br&gt;
            测试练习模态框的处理：&lt;br&gt;&lt;br&gt;
            1.警告框
            &lt;input class="button" type="button" id="input_1" value="点击弹出警告框"&gt;&lt;br&gt;&lt;br&gt;
            2.确认框
            &lt;input class="button" type="button" id="input_2" value="点击弹出确认框"&gt;&lt;br&gt;&lt;br&gt;
            3.提示框
            &lt;input class="button" type="button" id="input_3" value="点击弹出提示框"&gt;&lt;br&gt;&lt;br&gt;
        &lt;/div&gt;
    &lt;/div
&lt;/body&gt;
&lt;/html&gt;</pre>
</div>
<p>浏览器打开页面并触发相应弹窗，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202409/1232840-20240923145446349-1350934339.gif" alt="" loading="lazy"></p>
<h3 id="autoid-0-6-4">4.牛刀小试</h3>
<p>下边宏哥就利用上边准备好的模态框例子进行一下演示。分别演示当监听器存在和不存在时测试场景，来看一下宏哥如何处理的，供大家学习和参考。</p>
<h4>4.1监听器存在</h4>
<p>监听器存在，简单地就是在代码中出现：<a href="https://playwright.dev/java/docs/api/class-page#page-event-dialog" rel="noopener nofollow">Page.onDialog（handler）</a>&nbsp;，那么就表示监听器存在，按照上边的理论知识，我们知道：必须处理弹窗才可以进行后续测试，否则就会一致停留在弹出处，不执行后续操作。</p>
<h5>4.1.1代码设计</h5>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202409/1232840-20240923153720995-14505954.png" alt="" loading="lazy"></p>
<h5>4.1.2参考代码</h5>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.bjhg.playwright;

</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Browser;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserContext;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserType;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Page;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Playwright;

</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
 * </span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)"> 北京-宏哥
 * 
 * @公众号:北京宏哥（微信搜索，关注宏哥，提前解锁更多测试干货）
 * 
 * 《刚刚问世》系列初窥篇-Java+Playwright自动化测试-18- 操作模态对话框弹窗 （详细教程）
 *
 * 2024年9月30日
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Test_ModalDialog {
    
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {
        </span><span style="color: rgba(0, 0, 255, 1)">try</span> (Playwright playwright =<span style="color: rgba(0, 0, 0, 1)"> Playwright.create()) {
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">1.使用chromium浏览器，# 浏览器配置，设置以GUI模式启动Chrome浏览器（要查看浏览器UI，在启动浏览器时传递 headless=false 标志。您还可以使用 slowMo 来减慢执行速度。</span>
          Browser browser = playwright.chromium().launch(<span style="color: rgba(0, 0, 255, 1)">new</span> BrowserType.LaunchOptions().setHeadless(<span style="color: rgba(0, 0, 255, 1)">false</span>).setSlowMo(3000<span style="color: rgba(0, 0, 0, 1)">));
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">2.创建context</span>
          BrowserContext context =<span style="color: rgba(0, 0, 0, 1)"> browser.newContext();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">创建page</span>
          Page page =<span style="color: rgba(0, 0, 0, 1)"> context.newPage();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">3.浏览器本地demo</span>
          page.navigate("file:///E:/Desktop/test/ModalDialogueBox.html"<span style="color: rgba(0, 0, 0, 1)">);
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">Dialog监听器存在</span>
          page.onDialog(dialog -&gt;<span style="color: rgba(0, 0, 0, 1)"> {
              System.out.println(dialog.message());
              </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">Dialog.accept()或 Dialog.dismiss()必须处理 它。</span>
<span style="color: rgba(0, 0, 0, 1)">              dialog.accept();
            });
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">定位到要操作的alert警告框并点击</span>
          page.locator("#input_1"<span style="color: rgba(0, 0, 0, 1)">).click();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">定位到要操作的confirm警告框并点击</span>
          page.locator("#input_2"<span style="color: rgba(0, 0, 0, 1)">).click();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">定位到要操作的prompt警告框并点击</span>
          page.locator("#input_3"<span style="color: rgba(0, 0, 0, 1)">).click();
          
          System.out.println(</span>"Test Pass"<span style="color: rgba(0, 0, 0, 1)">);
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭page</span>
<span style="color: rgba(0, 0, 0, 1)">          page.close();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭browser</span>
<span style="color: rgba(0, 0, 0, 1)">          browser.close();
        }
    }
}</span></pre>
</div>
<h5>4.1.3运行代码</h5>
<p>1.运行代码，右键Run As-&gt;Java Application，就可以看到控制台输出，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202409/1232840-20240923153646975-256461713.png" alt="" loading="lazy"></p>
<p>2.运行代码后电脑端的浏览器的动作。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202409/1232840-20240923154215991-1909332674.gif" alt="" loading="lazy"></p>
<h4>4.2监听器不存在</h4>
<p>监听器不存在，简单地就是在代码中不出现：<a href="https://playwright.dev/java/docs/api/class-page#page-event-dialog" rel="noopener nofollow">Page.onDialog（handler）</a>&nbsp;，那么就表示监听器不存在，按照上边的理论知识，我们知道：不需要处理弹窗就可以进行后续测试，因为此时playwright会帮你自动处理好，不影响执行后续操作。</p>
<h5>4.2.1代码设计</h5>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202409/1232840-20240923154539818-526027396.png" alt="" loading="lazy"></p>
<h5>4.2.2参考代码</h5>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.bjhg.playwright;

</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Browser;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserContext;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserType;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Page;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Playwright;

</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
 * </span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)"> 北京-宏哥
 * 
 * @公众号:北京宏哥（微信搜索，关注宏哥，提前解锁更多测试干货）
 * 
 * 《刚刚问世》系列初窥篇-Java+Playwright自动化测试-18- 操作模态对话框弹窗 （详细教程）
 *
 * 2024年9月30日
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Test_ModalDialog {
    
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {
        </span><span style="color: rgba(0, 0, 255, 1)">try</span> (Playwright playwright =<span style="color: rgba(0, 0, 0, 1)"> Playwright.create()) {
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">1.使用chromium浏览器，# 浏览器配置，设置以GUI模式启动Chrome浏览器（要查看浏览器UI，在启动浏览器时传递 headless=false 标志。您还可以使用 slowMo 来减慢执行速度。</span>
          Browser browser = playwright.chromium().launch(<span style="color: rgba(0, 0, 255, 1)">new</span> BrowserType.LaunchOptions().setHeadless(<span style="color: rgba(0, 0, 255, 1)">false</span>).setSlowMo(3000<span style="color: rgba(0, 0, 0, 1)">));
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">2.创建context</span>
          BrowserContext context =<span style="color: rgba(0, 0, 0, 1)"> browser.newContext();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">创建page</span>
          Page page =<span style="color: rgba(0, 0, 0, 1)"> context.newPage();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">3.浏览器本地demo</span>
          page.navigate("file:///E:/Desktop/test/ModalDialogueBox.html"<span style="color: rgba(0, 0, 0, 1)">);
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">Dialog监听器不存在--注销掉即可！
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">          page.onDialog(dialog -&gt; {
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">              System.out.println(dialog.message());
</span><span style="color: rgba(0, 128, 0, 1)">//</span>              <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">Dialog.accept()或 Dialog.dismiss()必须处理 它。
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">              dialog.accept();
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">            });
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">定位到要操作的alert警告框并点击</span>
          page.locator("#input_1"<span style="color: rgba(0, 0, 0, 1)">).click();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">定位到要操作的confirm警告框并点击</span>
          page.locator("#input_2"<span style="color: rgba(0, 0, 0, 1)">).click();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">定位到要操作的prompt警告框并点击</span>
          page.locator("#input_3"<span style="color: rgba(0, 0, 0, 1)">).click();
          
          System.out.println(</span>"Test Pass"<span style="color: rgba(0, 0, 0, 1)">);
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭page</span>
<span style="color: rgba(0, 0, 0, 1)">          page.close();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭browser</span>
<span style="color: rgba(0, 0, 0, 1)">          browser.close();
        }
    }
}</span></pre>
</div>
<h5>4.2.3运行代码</h5>
<p>1.运行代码，右键Run As-&gt;Java Application，就可以看到控制台输出，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202409/1232840-20240923154502390-1382972914.png" alt="" loading="lazy"></p>
<p>2.运行代码后电脑端的浏览器的动作。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202409/1232840-20240923154754372-1477126305.gif" alt="" loading="lazy"></p>
<h3 id="autoid-0-8-2">5.小结</h3>
<p><a href="https://playwright.dev/java/docs/api/class-page#page-event-dialog" rel="noopener nofollow">Page.onDialog（handler）</a>&nbsp;监听器存在必须处理该对话框。否则您的操作将停止，无论是 locator.click（） 还是其他内容。这是因为Web中的对话框是模态，因此在处理它们之前会阻止进一步的页面执行。</p>
<p>例如下边宏哥演示的是：只打印message，而没有处理就会一直卡在那个弹出框不继续往下操作了。宏哥就是将处理代码注释，打印代码留下。不过这种情况你手动点击“确定”，代码也是可以向下执行的。</p>
<div class="cnblogs_code">
<pre>          page.onDialog(dialog -&gt;<span style="color: rgba(0, 0, 0, 1)"> {
              System.out.println(dialog.message());
              </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">Dialog.accept()或 Dialog.dismiss()必须处理 它。
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">              dialog.accept();</span>
            });</pre>
</div>
<p>运行代码后电脑端的浏览器的动作（可以看到playwright没有自动处理弹窗，而是弹出后卡主不动了，当然此时你若是手动点击确定或者取消，就会继续执行测试，有兴趣的可以自己试一下）。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202409/1232840-20240923161127362-1058638291.gif" alt="" loading="lazy"></p>
<p>&nbsp;好了，今天时间也不早了，宏哥就讲解和分享到这里，感谢您耐心的阅读，希望对您有所帮助。</p>
</div>
<div id="MySignature" role="contentinfo">
    <div id="MySignature" style="display: block">
	<div style="font-size: 13px; border: 1px dashed rgb(45, 161, 45); padding: 10px 15px; background-color: rgb(248, 248, 248)">
		<label style="font-weight: bold">
			&nbsp;&nbsp;&nbsp;&nbsp;为了方便大家在移动端也能看到我分享的博文，现已注册个人微信公众号，扫描左下方二维码即可，欢迎大家关注，提前解锁更多测试干货！有时间会及时分享相关技术博文。
		</label>
		<br>
		<label style="font-weight: bold">
			&nbsp;&nbsp;&nbsp;&nbsp;为了方便大家互动讨论相关技术问题，刚刚建立了咱们的专门的微信群交流互动群，群内会分享交流测试领域前沿知识。  请您扫描中间的微信二维码进群 
		</label>
		<br>
		<label style="font-weight: bold">
			&nbsp;&nbsp;&nbsp;&nbsp;为了方便大家互动讨论相关技术问题，现已组建专门的微信群，由于微信群满100，请您扫描右下方宏哥个人微信二维码拉你进群
			<label style="font-weight: bold; color: red; font-size: 15px">
				（请务必备注：已关注公众号进群）平时上班忙（和你一样），所以加好友不及时，请稍安勿躁~
			</label>
			，欢迎大家加入这个大家庭，我们一起畅游知识的海洋。
		</label>
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;感谢您花时间阅读此篇文章,如果您觉得这篇文章你学到了东西也是为了犒劳下博主的码字不易不妨打赏一下吧，让博主能喝上一杯咖啡，在此谢过了！
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;如果您觉得阅读本文对您有帮助，请点一下左下角
		<a id="recommend" style="font-weight: bold; color: red; font-size: 15px; text-decoration: underline">
			“推荐”
		</a>
		按钮，您的
		<label style="font-weight: bold; color: red; font-size: 15px">
			“推荐”
		</label>
		将是我最大的写作动力！另外您也可以选择
		<a id="follow_me_btn" style="cursor: pointer; color: blue; text-decoration: underline">
			【
			<strong>
				关注我
			</strong>
			】
		</a>
		，可以很方便找到我！
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;本文版权归作者和博客园共有，来源网址：
		<a href="https://www.cnblogs.com/du-hong" style="color: red; text-decoration: underline" target="_blank">
			https://www.cnblogs.com/du-hong
		</a>
		欢迎各位转载，但是未经作者本人同意，转载文章之后必须在文章页面明显位置给出作者和原文连接，否则保留追究法律责任的权利！
	</div>
	<div style="text-align: center; margin-top: 10px">
		<p style=" font-weight: bolder; color: red; ">
			公众号(关注宏哥)&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			微信群(扫码进群) &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;客服微信
		</p>
		<img style="width: 200px;padding-right: 50px;" alt="个人微信公众号" src="https://img2018.cnblogs.com/common/1741949/201911/1741949-20191119095948011-608816619.png">
		<img style="width: 200px;padding-right: 65px;" alt="微信群" src="https://img2024.cnblogs.com/blog/1232840/202506/1232840-20250610113707419-637869921.png">
		<img style="width: 200px" alt="个人微信" src="https://img2018.cnblogs.com/common/1741949/201911/1741949-20191106101257091-849954564.png">
	</div>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-18 16:00">2025-06-18 16:00</span>&nbsp;
<a href="https://www.cnblogs.com/du-hong">北京-宏哥</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18420303);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18420303', targetLink: 'https://www.cnblogs.com/du-hong/p/18420303', title: '《刚刚问世》系列初窥篇-Java+Playwright自动化测试-18- 操作模态对话框弹窗 （详细教程）' })">举报</a>
</div>
        