
	<h1 class="postTitle"><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/runningRain/p/18723147" title="发布于 2025-02-18 23:32">
    <span role="heading" aria-level="2">记录一次WPF程序进程挂起问题</span>
    

</a>
</h1>
	    <div id="cnblogs_post_description" style="display: none">
        
        解决一个WPF程序启动Process使用不当导致的进程挂起问题。SocketException: 通常每个套接字地址(协议/网络地址/端口)只允许使用一次
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="1-使用背景">1. 使用背景</h2>
<p>开发<code>WPF</code>单进程项目，在项目中使用<code>MongoDB</code>数据库，需要连接多个不同的数据库实例，另外项目框架采用了事件聚合器来管理模块间的通知调用，基于<code>NetMQ</code>实现了一个<code>ZeroMQPublisher</code>和<code>ZeroMQSubscriber</code>。</p>
<p><strong>事件聚合器服务实现方案</strong>：</p>
<ul>
<li><code>ZeroMQPublisher</code> 启动时会监听本机地址的一个端口（比如<code>tcp://*:5866</code>）</li>
<li><code>ZeroMQSubscriber</code>启动时需要去连接NetMQ服务端（比如：<code>tcp://127.0.0.1:5866</code>）</li>
</ul>
<p><strong>启动数据库实例的实现方案</strong>：</p>
<p>在<code>C#</code>代码中通过<code>Process</code>来启动<code>mongod.exe</code>，启动时分别指定不同的启动参数（<code>--dbpath</code> <code>--port</code> <code>--replSet</code> <code>--logpath</code> 等等）。该逻辑在应用程序启动时调用。</p>
<ul>
<li>具体实现代码片段如下：</li>
</ul>

<pre><code>var startInfo = new ProcessStartInfo
{
    FileName = processName,
    Arguments = $"--dbpath \"{mongoConfig.DBPath}\" --port {mongoConfig.Port} --replSet {mongoConfig.ReplicaSetName} " +
    $"--logpath {Path.Combine(mongoConfig.DBPath, "mongod.log")} --logappend",
    UseShellExecute = false,
    RedirectStandardOutput = true,
    RedirectStandardError = true,
    CreateNoWindow = true,
    // 指定用于读取标准输出流的编码。指定为 UTF8 可以确保正确读取输出
    StandardOutputEncoding = Encoding.UTF8,
    // 指定用于读取标准错误流的编码。同样，指定为 UTF8 可以确保正确读取错误输出
    StandardErrorEncoding = Encoding.UTF8
};

var _mongoProcess = new Process { StartInfo = startInfo };
_mongoProcess.Start();

// 订阅输出和错误事件
_mongoProcess.OutputDataReceived += (sender, e) =&gt;
{
    if (!string.IsNullOrEmpty(e.Data))
    {
        outputMsgCallback?.Invoke("MongoDB 输出: " + e.Data);
    }
};

_mongoProcess.ErrorDataReceived += (sender, e) =&gt;
{
    if (!string.IsNullOrEmpty(e.Data))
    {
        outputMsgCallback?.Invoke("MongoDB 错误: " + e.Data);
    }
};

_mongoProcess.BeginOutputReadLine();
_mongoProcess.BeginErrorReadLine();
</code></pre>
<p>注：为了实现数据库实例在<code>WPF</code>程序退出后依然可以连接，故在退出程序时，未清除上面的<code>Process</code>资源。</p>
<ul>
<li>实现效果：
<ul>
<li>a. 可以通过配置启动多个不同的<code>mongo db</code> 数据库实例;</li>
<li>b. 可以将<code>mongo db</code>数据库实例启动的日志重定向输出，并通过<code>outputMsgCallback</code>的定义来记录起来（已有指定的 --logpath ，其实可以不需要重定向的输出信息）</li>
</ul>
</li>
</ul>
<h2 id="2-问题现象">2. 问题现象</h2>
<ul>
<li><code>WPF</code>程序退出后，再次启动程序，会提示如下报错信息：</li>
</ul>

<pre><code>内部异常:
SocketException: 通常每个套接字地址(协议/网络地址/端口)只允许使用一次。
</code></pre>
<ul>
<li>检查端口占用情况，执行 <code>netstat -ano | finstr :5866</code>，返回如下信息：</li>
</ul>

<pre><code>TCP    0.0.0.0:5866       0.0.0.0:0        LISTENING     46064 
TCP    127.0.0.1:3172     127.0.0.1:5866   ESTABLISHED   46064 
TCP    127.0.0.1:5866     127.0.0.1:3172   ESTABLISHED   46064
</code></pre>
<p>通过上面显示的进程<code>id 46064</code> 去查询对应的进程（<code>tasklist /FI "PID eq 46064" </code>），显示查询不到对应的进程信息。<br>
<img src="https://img2024.cnblogs.com/blog/992715/202502/992715-20250218233413793-2088521709.png" alt="" loading="lazy"></p>
<h2 id="3-问题原因及分析">3. 问题原因及分析</h2>
<ol>
<li>检查实现逻辑，发现在应用程序退出时，已调用对应的<code>NetMQ</code>的<code>Dispose</code>释放逻辑；</li>
<li>优化尝试：在释放连接资源前，先执行<code>DiscConnect</code>逻辑亦无法解决问题；</li>
<li>工具分析 <code>[TCPView](https://learn.microsoft.com/en-us/sysinternals/downloads/tcpview?spm=5aebb161.543df828.0.0.737f7038lsFU2W)</code><br>
使用<code>TCPView</code>工具可以看到上面对应的3个<code>tcp</code>的连接信息，但是无法查看到关联的实际进程信息，依然无法解决问题。<br>
4. 使用<code>[ProcessExplorer](https://learn.microsoft.com/en-us/sysinternals/downloads/process-explorer)</code>工具查看进程信息，选择<code>mongod.exe</code>，查看属性，发现其会显示<code>Parent</code>为上面的WPF应用进程。<br>
<img src="https://img2024.cnblogs.com/blog/992715/202502/992715-20250218233512978-867516994.png" alt="" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/992715/202502/992715-20250218233451970-1695369350.png" alt="" loading="lazy"></li>
</ol>
<p><code>kill</code>这两个<code>mongod.exe</code>后，不再出现上面的端口占用问题。因此，问题的主要原因是<code>mongod.exe</code>启动的数据库实例进程和主进程是关联在一起的，根本原因是<code>Process</code>启动进程是未和主进程相隔离。</p>
<h2 id="4-解决方案">4. 解决方案</h2>
<ol>
<li>修改进程启动方式：</li>
</ol>

<pre><code>var startInfo = new ProcessStartInfo
{
    FileName = processName,
    Arguments = $"--dbpath \"{mongoConfig.DBPath}\" --port {mongoConfig.Port} --replSet {mongoConfig.ReplicaSetName} " +
    $"--logpath {Path.Combine(mongoConfig.DBPath, "mongod.log")} --logappend",
    UseShellExecute = true,
    CreateNoWindow = true,
    WindowStyle = ProcessWindowStyle.Hidden
};
</code></pre>
<ul>
<li>通过<code>Shell</code>来启动进程（<code>UseShellExecute = true</code>），而不是直接由当前应用程序启动;</li>
<li>隐藏启动的<code>Shell</code>窗口（<code>WindowStyle = ProcessWindowStyle.Hidden</code>）;</li>
</ul>

</div>
<div class="clear"></div>

	<div class="postDesc">posted on 
<span id="post-date" data-last-update-days="0.6965747262754629" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-18 23:37">2025-02-18 23:32</span>&nbsp;
<a href="https://www.cnblogs.com/runningRain">积跬步---行千里</a>&nbsp;
阅读(<span id="post_view_count">168</span>)&nbsp;
评论(<span id="post_comment_count">4</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18723147" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18723147);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18723147', targetLink: 'https://www.cnblogs.com/runningRain/p/18723147', title: '记录一次WPF程序进程挂起问题' })">举报</a>
</div>
