
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mingupupu/p/18880039" title="发布于 2025-05-16 15:08">
    <span role="heading" aria-level="2">使用PocketFlowSharp创建一个Human_Evaluation示例</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="效果">效果</h2>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202505/3288240-20250516150750531-1817709556.gif" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202505/3288240-20250516150750436-1819363319.png" alt="image-20250516142423902" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202505/3288240-20250516150750416-1566059624.png" alt="image-20250516142438960" loading="lazy"></p>
<h2 id="实践">实践</h2>
<p>有时候AI生成的结果我们并不满意在进入下一步之前，我们需要对AI生成的结果进行人工审核，同意了才能进入下一个流程。</p>
<p>Human_Evaluation就是人工判断的一个简单示例。</p>
<pre><code class="language-csharp"> internal class Program
 {
     static async Task Main(string[] args)
     {
         // Load .env file
         DotEnv.Load();

         // Get environment variables from .env file
         var envVars = DotEnv.Read();

         string ModelName = envVars["ModelName"];
         string EndPoint = envVars["EndPoint"];
         string ApiKey = envVars["ApiKey"];

         Utils.ModelName = ModelName;
         Utils.EndPoint = EndPoint;
         Utils.ApiKey = ApiKey;

         // 创建共享数据字典
         var shared = new Dictionary&lt;string, object&gt;();

         // 创建并运行流程
         var humanEvalFlow = CreateFlow();
         Console.WriteLine("\n欢迎使用人工判断示例！");
         Console.WriteLine("------------------------");
         await humanEvalFlow.RunAsync(shared);
         Console.WriteLine("\n感谢使用人工判断示例！");
     }

     static AsyncFlow CreateFlow()
     {
         // 创建节点实例
         var inputNode = new TaskInputNode();
         var aiResponseNode = new AIResponseNode();
         var humanApprovalNode = new HumanApprovalNode();
         var endNode = new NoOpNode();

         // 创建从输入节点开始的流程
         var flow = new AsyncFlow(inputNode);

         // 连接节点
         _ = inputNode - "generate" - aiResponseNode;
         _ = aiResponseNode - "approve" - humanApprovalNode;
         _ = humanApprovalNode - "retry" - aiResponseNode;     // 不接受时重新生成
         _ = humanApprovalNode - "accept" - endNode;          // 接受时结束流程

         return flow;
     }
 }
</code></pre>
<p>看一下整体的流程图：</p>
<div class="mermaid">graph TD
    A[输入节点] --&gt;|"generate"| B[AI回复节点]
    B --&gt;|"approve"| C[人工审核节点]
    C --&gt;|"approve"| D[结束节点]
    C --&gt;|"retry"| B
</div><p>输入节点：</p>
<pre><code class="language-csharp"> public class TaskInputNode : AsyncNode
 {
     protected override async Task&lt;object&gt; PrepAsync(Dictionary&lt;string, object&gt; shared)
     {
         Console.WriteLine("\n请输入需要AI处理的任务：");
         string task = Console.ReadLine();
         return task;
     }

     protected override async Task&lt;object&gt; ExecAsync(object prepResult)
     {
         string task = (string)prepResult;
         Console.WriteLine($"\n已收到任务：{task}");
         return task;
     }

     protected override async Task&lt;object&gt; PostAsync(Dictionary&lt;string, object&gt; shared, object prepResult, object execResult)
     {
         string task = (string)execResult;
         shared["task"] = task;
         return "generate";
     }
 }
</code></pre>
<p>AI回复节点：</p>
<pre><code class="language-csharp">public class AIResponseNode : AsyncNode
{
    private static int attemptCount = 0;

    protected override async Task&lt;object&gt; PrepAsync(Dictionary&lt;string, object&gt; shared)
    {
        return shared["task"];
    }

    protected override async Task&lt;object&gt; ExecAsync(object prepResult)
    {
        string task = (string)prepResult;
        attemptCount++;
        
        Console.WriteLine("AI正在生成回复...\n");
        Console.WriteLine($"任务：{task}\n");
        Console.WriteLine($"这是第 {attemptCount} 次生成的AI回复：\n");
        var result = await Utils.CallLLMStreamingAsync(task);

        string response="";
        Console.ForegroundColor = ConsoleColor.Green;
        await foreach (StreamingChatCompletionUpdate completionUpdate in result)
        {
            if (completionUpdate.ContentUpdate.Count &gt; 0)
            {
                Console.Write(completionUpdate.ContentUpdate[0].Text);
                response += completionUpdate.ContentUpdate[0].Text.ToString();
            }
        }
        Console.ForegroundColor = ConsoleColor.White;

        return response;
    }

    protected override async Task&lt;object&gt; PostAsync(Dictionary&lt;string, object&gt; shared, object prepResult, object execResult)
    {
        string response = (string)execResult;
        shared["response"] = response;
        return "approve";
    }
}
</code></pre>
<p>人工审核节点：</p>
<pre><code class="language-csharp"> public class HumanApprovalNode : AsyncNode
 {
     protected override async Task&lt;object&gt; PrepAsync(Dictionary&lt;string, object&gt; shared)
     {
         return shared["response"];
     }

     protected override async Task&lt;object&gt; ExecAsync(object prepResult)
     {
         Console.Write("\n您接受这个AI回复吗？(y/n): ");
         string answer = Console.ReadLine()?.ToLower() ?? "n";
         return answer;
     }

     protected override async Task&lt;object&gt; PostAsync(Dictionary&lt;string, object&gt; shared, object prepResult, object execResult)
     {
         string answer = (string)execResult;

         if (answer == "y")
         {
             Console.WriteLine($"已接受的回复：\n{shared["response"]}");
             return "accept";
         }
         else
         {
             Console.WriteLine("\n好的，让AI重新生成回复...");
             return "retry";
         }
     }
 }
</code></pre>
<p>结束节点：</p>
<pre><code class="language-csharp"> public class NoOpNode : AsyncNode
 {
     protected override async Task&lt;object&gt; PrepAsync(Dictionary&lt;string, object&gt; shared) =&gt; null;
     protected override async Task&lt;object&gt; ExecAsync(object prepResult) =&gt; null;
     protected override async Task&lt;object&gt; PostAsync(Dictionary&lt;string, object&gt; shared, object prepResult, object execResult) =&gt; null;
 }
</code></pre>
<p>帮助类：</p>
<pre><code class="language-csharp"> public static class Utils
 {
     public static string ModelName { get; set; }
     public static string EndPoint { get; set; }
     public static string ApiKey { get; set; }

     public static async Task&lt;string&gt; CallLLMAsync(string prompt)
     {
         ApiKeyCredential apiKeyCredential = new ApiKeyCredential(ApiKey);

         OpenAIClientOptions openAIClientOptions = new OpenAIClientOptions();
         openAIClientOptions.Endpoint = new Uri(EndPoint);

         ChatClient client = new(model: ModelName, apiKeyCredential, openAIClientOptions);

         ChatCompletion completion = await client.CompleteChatAsync(prompt);

         return completion.Content[0].Text;
     }

     public static async Task&lt;AsyncCollectionResult&lt;StreamingChatCompletionUpdate&gt;&gt; CallLLMStreamingAsync(string prompt)
     {
         ApiKeyCredential apiKeyCredential = new ApiKeyCredential(ApiKey);

         OpenAIClientOptions openAIClientOptions = new OpenAIClientOptions();
         openAIClientOptions.Endpoint = new Uri(EndPoint);

         ChatClient client = new(model: ModelName, apiKeyCredential, openAIClientOptions);

         var completion = client.CompleteChatStreamingAsync(prompt);
        
         return completion;
     }
 }
</code></pre>
<p>全部代码在：<a href="https://github.com/Ming-jiayou/PocketFlowSharp/tree/main/PocketFlowSharpSamples.Console/Human_Evaluation" target="_blank" rel="noopener nofollow">https://github.com/Ming-jiayou/PocketFlowSharp/tree/main/PocketFlowSharpSamples.Console/Human_Evaluation</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.8303770200416667" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-16 15:08">2025-05-16 15:08</span>&nbsp;
<a href="https://www.cnblogs.com/mingupupu">mingupupup</a>&nbsp;
阅读(<span id="post_view_count">60</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18880039);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18880039', targetLink: 'https://www.cnblogs.com/mingupupu/p/18880039', title: '使用PocketFlowSharp创建一个Human_Evaluation示例' })">举报</a>
</div>
        