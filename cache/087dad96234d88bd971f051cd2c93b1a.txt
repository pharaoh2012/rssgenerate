
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ivictor/p/18622997" title="发布于 2024-12-23 08:45">
    <span role="heading" aria-level="2">MySQL 优化利器 SHOW PROFILE 的实现原理</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			    <div id="cnblogs_post_description" style="display: none">
        
        通过可传输表空间的方式导入一个 4GB 大小的表，为什么大部分耗时是在System lock阶段？
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1 data-tool="mdnice编辑器"><span style="color: rgba(0, 128, 0, 1)">背景</span></h1>
<p data-tool="mdnice编辑器">最近碰到一个 case，通过可传输表空间的方式导入一个 4GB 大小的表，耗时 13 分钟。</p>
<p data-tool="mdnice编辑器">通过<code>PROFILE</code>定位，发现大部分耗时竟然是在<code>System lock</code>阶段。</p>
<pre data-tool="mdnice编辑器"><code>mysql&gt;&nbsp;set&nbsp;profiling=1;<br>Query&nbsp;OK,&nbsp;0&nbsp;rows&nbsp;affected,&nbsp;1&nbsp;warning&nbsp;(0.00&nbsp;sec)<br><br>mysql&gt;&nbsp;alter&nbsp;table&nbsp;sbtest2&nbsp;import&nbsp;tablespace;<br>Query&nbsp;OK,&nbsp;0&nbsp;rows&nbsp;affected&nbsp;(13&nbsp;min&nbsp;8.99&nbsp;sec)<br><br>mysql&gt;&nbsp;show&nbsp;profile&nbsp;for&nbsp;query&nbsp;1;<br>+--------------------------------+------------+<br>|&nbsp;Status&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Duration&nbsp;&nbsp;&nbsp;|<br>+--------------------------------+------------+<br>|&nbsp;starting&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;0.000119&nbsp;|<br>|&nbsp;Executing&nbsp;hook&nbsp;on&nbsp;transaction&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;0.000004&nbsp;|<br>|&nbsp;starting&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;0.000055&nbsp;|<br>|&nbsp;checking&nbsp;permissions&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;0.000010&nbsp;|<br>|&nbsp;discard_or_import_tablespace&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;0.000007&nbsp;|<br>|&nbsp;Opening&nbsp;tables&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;0.000156&nbsp;|<br>|&nbsp;System&nbsp;lock&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;788.966338&nbsp;|<br>|&nbsp;end&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;0.007391&nbsp;|<br>|&nbsp;waiting&nbsp;for&nbsp;handler&nbsp;commit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;0.000041&nbsp;|<br>|&nbsp;waiting&nbsp;for&nbsp;handler&nbsp;commit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;0.011179&nbsp;|<br>|&nbsp;query&nbsp;end&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;0.000022&nbsp;|<br>|&nbsp;closing&nbsp;tables&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;0.000019&nbsp;|<br>|&nbsp;waiting&nbsp;for&nbsp;handler&nbsp;commit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;0.000031&nbsp;|<br>|&nbsp;freeing&nbsp;items&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;0.000035&nbsp;|<br>|&nbsp;cleaning&nbsp;up&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;0.000043&nbsp;|<br>+--------------------------------+------------+<br>15&nbsp;rows&nbsp;in&nbsp;set,&nbsp;1&nbsp;warning&nbsp;(0.03&nbsp;sec)<br></code></pre>
<p data-tool="mdnice编辑器">不仅如此，SQL 在执行的过程中，<code>show processlist</code>中的状态显示的也是<code>System lock</code>。</p>
<pre data-tool="mdnice编辑器"><code>mysql&gt;&nbsp;show&nbsp;processlist;<br>+----+-----------------+-----------+--------+---------+------+------------------------+---------------------------------------+<br>|&nbsp;Id&nbsp;|&nbsp;User&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Host&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;db&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Command&nbsp;|&nbsp;Time&nbsp;|&nbsp;State&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Info&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>+----+-----------------+-----------+--------+---------+------+------------------------+---------------------------------------+<br>|&nbsp;&nbsp;5&nbsp;|&nbsp;event_scheduler&nbsp;|&nbsp;localhost&nbsp;|&nbsp;NULL&nbsp;&nbsp;&nbsp;|&nbsp;Daemon&nbsp;&nbsp;|&nbsp;&nbsp;818&nbsp;|&nbsp;Waiting&nbsp;on&nbsp;empty&nbsp;queue&nbsp;|&nbsp;NULL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>|&nbsp;10&nbsp;|&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;localhost&nbsp;|&nbsp;sbtest&nbsp;|&nbsp;Query&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;648&nbsp;|&nbsp;System&nbsp;lock&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;alter&nbsp;table&nbsp;sbtest2&nbsp;import&nbsp;tablespace&nbsp;|<br>|&nbsp;14&nbsp;|&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;localhost&nbsp;|&nbsp;NULL&nbsp;&nbsp;&nbsp;|&nbsp;Query&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;|&nbsp;init&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;show&nbsp;processlist&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>+----+-----------------+-----------+--------+---------+------+------------------------+---------------------------------------+<br>3&nbsp;rows&nbsp;in&nbsp;set,&nbsp;1&nbsp;warning&nbsp;(0.00&nbsp;sec)<br></code></pre>
<p data-tool="mdnice编辑器">这个状态其实有很大的误导性。</p>
<p data-tool="mdnice编辑器">接下来我们从<code>SHOW PROFILE</code>的基本用法出发，从源码角度分析它的实现原理。</p>
<p data-tool="mdnice编辑器">最后在分析的基础上，看看 case 中的表空间导入操作为什么大部分耗时是在<code>System lock</code>阶段。</p>
<h1 data-tool="mdnice编辑器"><span style="color: rgba(0, 128, 0, 1)">SHOW PROFILE 的基本用法</span></h1>
<p data-tool="mdnice编辑器">下面通过一个示例来看看<code>SHOW PROFILE</code>的用法。</p>
<pre data-tool="mdnice编辑器"><code>#&nbsp;开启&nbsp;Profiling<br>mysql&gt;&nbsp;set&nbsp;profiling=1;<br>Query&nbsp;OK,&nbsp;0&nbsp;rows&nbsp;affected,&nbsp;1&nbsp;warning&nbsp;(0.00&nbsp;sec)<br><br>#&nbsp;执行需要分析的&nbsp;SQL<br>mysql&gt;&nbsp;select&nbsp;count(*)&nbsp;from&nbsp;slowtech.t1;<br>+----------+<br>|&nbsp;count(*)&nbsp;|<br>+----------+<br>|&nbsp;&nbsp;1048576&nbsp;|<br>+----------+<br>1&nbsp;row&nbsp;in&nbsp;set&nbsp;(1.09&nbsp;sec)<br><br>#&nbsp;通过&nbsp;show&nbsp;profiles&nbsp;查看&nbsp;SQL&nbsp;对应的&nbsp;Query_ID<br>mysql&gt;&nbsp;show&nbsp;profiles;<br>+----------+------------+----------------------------------+<br>|&nbsp;Query_ID&nbsp;|&nbsp;Duration&nbsp;&nbsp;&nbsp;|&nbsp;Query&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>+----------+------------+----------------------------------+<br>|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;|&nbsp;1.09378600&nbsp;|&nbsp;select&nbsp;count(*)&nbsp;from&nbsp;slowtech.t1&nbsp;|<br>+----------+------------+----------------------------------+<br>1&nbsp;row&nbsp;in&nbsp;set,&nbsp;1&nbsp;warning&nbsp;(0.00&nbsp;sec)<br><br>#&nbsp;查看该&nbsp;SQL&nbsp;各个阶段的执行耗时情况，其中，1&nbsp;是该&nbsp;SQL&nbsp;对应的&nbsp;Query_ID<br>mysql&gt;&nbsp;show&nbsp;profile&nbsp;for&nbsp;query&nbsp;1;<br>+--------------------------------+----------+<br>|&nbsp;Status&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Duration&nbsp;|<br>+--------------------------------+----------+<br>|&nbsp;starting&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000157&nbsp;|<br>|&nbsp;Executing&nbsp;hook&nbsp;on&nbsp;transaction&nbsp;&nbsp;|&nbsp;0.000009&nbsp;|<br>|&nbsp;starting&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000020&nbsp;|<br>|&nbsp;checking&nbsp;permissions&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000012&nbsp;|<br>|&nbsp;Opening&nbsp;tables&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000076&nbsp;|<br>|&nbsp;init&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000011&nbsp;|<br>|&nbsp;System&nbsp;lock&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000026&nbsp;|<br>|&nbsp;optimizing&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000013&nbsp;|<br>|&nbsp;statistics&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000033&nbsp;|<br>|&nbsp;preparing&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000032&nbsp;|<br>|&nbsp;executing&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;1.093124&nbsp;|<br>|&nbsp;end&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000025&nbsp;|<br>|&nbsp;query&nbsp;end&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000013&nbsp;|<br>|&nbsp;waiting&nbsp;for&nbsp;handler&nbsp;commit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000078&nbsp;|<br>|&nbsp;closing&nbsp;tables&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000048&nbsp;|<br>|&nbsp;freeing&nbsp;items&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000076&nbsp;|<br>|&nbsp;cleaning&nbsp;up&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000037&nbsp;|<br>+--------------------------------+----------+<br>17&nbsp;rows&nbsp;in&nbsp;set,&nbsp;1&nbsp;warning&nbsp;(0.01&nbsp;sec)<br></code></pre>
<p data-tool="mdnice编辑器">如果指定 all 还会输出更详细的统计信息，包括 CPU、上下文切换、磁盘IO、IPC（进程间通信）发送/接受的消息数量、页面故障次数、交换次数等。</p>
<p data-tool="mdnice编辑器">需要注意的是，这里的统计信息是针对整个进程的，不是单个 SQL 的。如果在执行上述 SQL 的同时还有其它 SQL 在执行，那么这些数据就不能用来评估该 SQL 的资源使用情况。</p>
<pre data-tool="mdnice编辑器"><code>mysql&gt;&nbsp;show&nbsp;profile&nbsp;all&nbsp;for&nbsp;query&nbsp;1\G<br>...<br>***************************&nbsp;11.&nbsp;row&nbsp;***************************<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Status:&nbsp;executing<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Duration:&nbsp;0.825417<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPU_user:&nbsp;1.486951<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPU_system:&nbsp;0.007982<br>&nbsp;&nbsp;Context_voluntary:&nbsp;0<br>Context_involuntary:&nbsp;553<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Block_ops_in:&nbsp;0<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Block_ops_out:&nbsp;0<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Messages_sent:&nbsp;0<br>&nbsp;&nbsp;Messages_received:&nbsp;0<br>&nbsp;&nbsp;Page_faults_major:&nbsp;0<br>&nbsp;&nbsp;Page_faults_minor:&nbsp;24<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Swaps:&nbsp;0<br>&nbsp;&nbsp;&nbsp;&nbsp;Source_function:&nbsp;ExecuteIteratorQuery<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Source_file:&nbsp;sql_union.cc<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Source_line:&nbsp;1678<br>...<br>17&nbsp;rows&nbsp;in&nbsp;set,&nbsp;1&nbsp;warning&nbsp;(0.00&nbsp;sec)<br></code></pre>
<h1 data-tool="mdnice编辑器"><span style="color: rgba(0, 128, 0, 1)">SHOW PROFILE 的实现原理</span></h1>
<p data-tool="mdnice编辑器">SHOW PROFILE 主要是在<code>sql_profile.cc</code>中实现的。它的实现主要分为两部分：</p>
<ol class="list-paddingleft-1" data-tool="mdnice编辑器">
<li>数据的采集。</li>
<li>数据的计算。</li>
</ol>
<p data-tool="mdnice编辑器">下面我们分别从这两个维度来看看 SHOW PROFILE 的实现原理。</p>
<h2 data-tool="mdnice编辑器"><span style="color: rgba(0, 128, 0, 1)">数据的采集</span></h2>
<p data-tool="mdnice编辑器">数据的采集实际上是通过“埋点”实现的。不同阶段对应的“埋点”地址可通过<code>show profile source</code>查看。</p>
<pre data-tool="mdnice编辑器"><code>mysql&gt;&nbsp;show&nbsp;profile&nbsp;source&nbsp;for&nbsp;query&nbsp;1;<br>+--------------------------------+----------+-------------------------+----------------------+-------------+<br>|&nbsp;Status&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Duration&nbsp;|&nbsp;Source_function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Source_file&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Source_line&nbsp;|<br>+--------------------------------+----------+-------------------------+----------------------+-------------+<br>|&nbsp;starting&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000157&nbsp;|&nbsp;NULL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;NULL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL&nbsp;|<br>|&nbsp;Executing&nbsp;hook&nbsp;on&nbsp;transaction&nbsp;&nbsp;|&nbsp;0.000009&nbsp;|&nbsp;launch_hook_trans_begin&nbsp;|&nbsp;rpl_handler.cc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1484&nbsp;|<br>|&nbsp;starting&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000020&nbsp;|&nbsp;launch_hook_trans_begin&nbsp;|&nbsp;rpl_handler.cc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1486&nbsp;|<br>|&nbsp;checking&nbsp;permissions&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000012&nbsp;|&nbsp;check_access&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;sql_authorization.cc&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2173&nbsp;|<br>|&nbsp;Opening&nbsp;tables&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000076&nbsp;|&nbsp;open_tables&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;sql_base.cc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5911&nbsp;|<br>|&nbsp;init&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000011&nbsp;|&nbsp;execute&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;sql_select.cc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;760&nbsp;|<br>|&nbsp;System&nbsp;lock&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000026&nbsp;|&nbsp;mysql_lock_tables&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;lock.cc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;332&nbsp;|<br>|&nbsp;optimizing&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000013&nbsp;|&nbsp;optimize&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;sql_optimizer.cc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;379&nbsp;|<br>|&nbsp;statistics&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000033&nbsp;|&nbsp;optimize&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;sql_optimizer.cc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;721&nbsp;|<br>|&nbsp;preparing&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000032&nbsp;|&nbsp;optimize&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;sql_optimizer.cc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;806&nbsp;|<br>|&nbsp;executing&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;1.093124&nbsp;|&nbsp;ExecuteIteratorQuery&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;sql_union.cc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1677&nbsp;|<br>|&nbsp;end&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000025&nbsp;|&nbsp;execute&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;sql_select.cc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;796&nbsp;|<br>|&nbsp;query&nbsp;end&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000013&nbsp;|&nbsp;mysql_execute_command&nbsp;&nbsp;&nbsp;|&nbsp;sql_parse.cc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4896&nbsp;|<br>|&nbsp;waiting&nbsp;for&nbsp;handler&nbsp;commit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000078&nbsp;|&nbsp;ha_commit_trans&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;handler.cc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1636&nbsp;|<br>|&nbsp;closing&nbsp;tables&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000048&nbsp;|&nbsp;mysql_execute_command&nbsp;&nbsp;&nbsp;|&nbsp;sql_parse.cc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4960&nbsp;|<br>|&nbsp;freeing&nbsp;items&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000076&nbsp;|&nbsp;dispatch_sql_command&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;sql_parse.cc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5434&nbsp;|<br>|&nbsp;cleaning&nbsp;up&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0.000037&nbsp;|&nbsp;dispatch_command&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;sql_parse.cc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2478&nbsp;|<br>+--------------------------------+----------+-------------------------+----------------------+-------------+<br>17&nbsp;rows&nbsp;in&nbsp;set,&nbsp;1&nbsp;warning&nbsp;(0.00&nbsp;sec)<br></code></pre>
<p data-tool="mdnice编辑器">以<code>executing</code>为例，它对应的“埋点”地址是<code>sql_union.cc</code>文件的第 1677 行，该行对应的代码是：</p>
<pre data-tool="mdnice编辑器"><code>&nbsp;&nbsp;THD_STAGE_INFO(thd,&nbsp;stage_executing);<br></code></pre>
<p data-tool="mdnice编辑器">其它的“埋点”地址也类似，调用的都是<code>THD_STAGE_INFO</code>，唯一不一样的是 stage 的名称。</p>
<p data-tool="mdnice编辑器">THD_STAGE_INFO 主要会做两件事情：</p>
<ol class="list-paddingleft-1" data-tool="mdnice编辑器">
<li>采集数据。</li>
<li>将采集到的数据添加到队列中。</li>
</ol>
<p data-tool="mdnice编辑器">下面我们结合代码看看具体的实现细节。</p>
<pre data-tool="mdnice编辑器"><code>void&nbsp;QUERY_PROFILE::new_status(const&nbsp;char&nbsp;*status_arg,&nbsp;const&nbsp;char&nbsp;*function_arg,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;*file_arg,&nbsp;unsigned&nbsp;int&nbsp;line_arg)&nbsp;{<br>&nbsp;&nbsp;PROF_MEASUREMENT&nbsp;*prof;<br>&nbsp;&nbsp;...<br>&nbsp;&nbsp;//&nbsp;初始化&nbsp;PROF_MEASUREMENT，初始化的过程中会采集数据。<br>&nbsp;&nbsp;if&nbsp;((function_arg&nbsp;!=&nbsp;nullptr)&nbsp;&amp;&amp;&nbsp;(file_arg&nbsp;!=&nbsp;nullptr))<br>&nbsp;&nbsp;&nbsp;&nbsp;prof&nbsp;=&nbsp;new&nbsp;PROF_MEASUREMENT(this,&nbsp;status_arg,&nbsp;function_arg,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;base_name(file_arg),&nbsp;line_arg);<br>&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;prof&nbsp;=&nbsp;new&nbsp;PROF_MEASUREMENT(this,&nbsp;status_arg);<br>&nbsp;&nbsp;//&nbsp;m_seq&nbsp;是阶段的序号，对应&nbsp;information_schema.profiling&nbsp;中的&nbsp;SEQ。<br>&nbsp;&nbsp;prof-&gt;m_seq&nbsp;=&nbsp;m_seq_counter++;&nbsp;<br>&nbsp;&nbsp;//&nbsp;time_usecs&nbsp;是采集到的系统当前时间。<br>&nbsp;&nbsp;m_end_time_usecs&nbsp;=&nbsp;prof-&gt;time_usecs;&nbsp;<br>&nbsp;&nbsp;//&nbsp;将采集到的数据添加到队列中，这个队列在查询时会用到。<br>&nbsp;&nbsp;entries.push_back(prof);&nbsp;<br>&nbsp;&nbsp;...<br>}<br></code></pre>
<p data-tool="mdnice编辑器">继续分析<code>PROF_MEASUREMENT</code>的初始化逻辑。</p>
<pre data-tool="mdnice编辑器"><code>PROF_MEASUREMENT::PROF_MEASUREMENT(QUERY_PROFILE&nbsp;*profile_arg,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;*status_arg,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;*function_arg,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char&nbsp;*file_arg,&nbsp;unsigned&nbsp;int&nbsp;line_arg)<br>&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;profile(profile_arg)&nbsp;{<br>&nbsp;&nbsp;collect();<br>&nbsp;&nbsp;set_label(status_arg,&nbsp;function_arg,&nbsp;file_arg,&nbsp;line_arg);<br>}<br><br>void&nbsp;PROF_MEASUREMENT::collect()&nbsp;{<br>&nbsp;&nbsp;time_usecs&nbsp;=&nbsp;(double)my_getsystime()&nbsp;/&nbsp;10.0;&nbsp;/*&nbsp;1&nbsp;sec&nbsp;was&nbsp;1e7,&nbsp;now&nbsp;is&nbsp;1e6&nbsp;*/<br>#ifdef&nbsp;HAVE_GETRUSAGE<br>&nbsp;&nbsp;getrusage(RUSAGE_SELF,&nbsp;&amp;rusage);<br>#elif&nbsp;defined(_WIN32)<br>&nbsp;&nbsp;...<br>#endif<br>}<br></code></pre>
<p data-tool="mdnice编辑器">PROF_MEASUREMENT 在初始化时会调用<code>collect</code>函数，<code>collect()</code>函数非常关键，它会做两件事情：</p>
<ol class="list-paddingleft-1" data-tool="mdnice编辑器">
<li>
<p>通过<code>my_getsystime()</code>获取系统的当前时间。</p>
</li>
<li>
<p>通过<code>getrusage(RUSAGE_SELF, &amp;rusage)</code>获取当前进程（注意是进程，不是当前 SQL）的资源使用情况。</p>
<p><code>getrusage</code>是一个用于获取进程或线程资源使用情况的系统调用。它返回进程在执行期间所消耗的资源信息，包括 CPU 时间、内存使用、页面故障、上下文切换等信息。</p>
</li>
</ol>
<p data-tool="mdnice编辑器">PROF_MEASUREMENT 初始化完毕后，会将其添加到 entries 中。entries 是一个队列（<code>Queue&lt;PROF_MEASUREMENT&gt; entries</code>）。这个队列，会在执行<code>show profile for query N</code>或者<code>information_schema.profiling</code>时用到。</p>
<p data-tool="mdnice编辑器">说完数据的采集，接下来我们看看数据的计算，毕竟“埋点”收集的只是系统当前时间，而我们在<code>show profile for query N</code>中看到的Duration 是一个时长。</p>
<h2 data-tool="mdnice编辑器"><span style="color: rgba(0, 128, 0, 1)">数据的计算</span></h2>
<p data-tool="mdnice编辑器">当我们在执行<code>show profile for query N</code>时，实际上查询的是<code>information_schema.profiling</code>，此时，会调用<code>PROFILING::fill_statistics_info</code>来填充数据。</p>
<p data-tool="mdnice编辑器">下面我们看看该函数的实现逻辑。</p>
<pre data-tool="mdnice编辑器"><code>int&nbsp;PROFILING::fill_statistics_info(THD&nbsp;*thd_arg,&nbsp;Table_ref&nbsp;*tables)&nbsp;{<br>&nbsp;&nbsp;DBUG_TRACE;<br>&nbsp;&nbsp;TABLE&nbsp;*table&nbsp;=&nbsp;tables-&gt;table;<br>&nbsp;&nbsp;ulonglong&nbsp;row_number&nbsp;=&nbsp;0;<br><br>&nbsp;&nbsp;QUERY_PROFILE&nbsp;*query;<br>&nbsp;&nbsp;//&nbsp;循环&nbsp;history&nbsp;队列，队列中的元素是&nbsp;QUERY_PROFILE，每一个查询对应一个&nbsp;QUERY_PROFILE。<br>&nbsp;&nbsp;//&nbsp;队列的大小由参数&nbsp;profiling_history_size&nbsp;决定，默认是&nbsp;15。<br>&nbsp;&nbsp;void&nbsp;*history_iterator;<br>&nbsp;&nbsp;for&nbsp;(history_iterator&nbsp;=&nbsp;history.new_iterator();&nbsp;history_iterator&nbsp;!=&nbsp;nullptr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;history_iterator&nbsp;=&nbsp;history.iterator_next(history_iterator))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;query&nbsp;=&nbsp;history.iterator_value(history_iterator);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;ulong&nbsp;seq;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;*entry_iterator;<br>&nbsp;&nbsp;&nbsp;&nbsp;PROF_MEASUREMENT&nbsp;*entry,&nbsp;*previous&nbsp;=&nbsp;nullptr;<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;循环每个查询中的&nbsp;entries，entries&nbsp;存储了每个阶段的系统当前时间。<br>&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(entry_iterator&nbsp;=&nbsp;query-&gt;entries.new_iterator();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entry_iterator&nbsp;!=&nbsp;nullptr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entry_iterator&nbsp;=&nbsp;query-&gt;entries.iterator_next(entry_iterator),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;previous&nbsp;=&nbsp;entry,&nbsp;row_number++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entry&nbsp;=&nbsp;query-&gt;entries.iterator_value(entry_iterator);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seq&nbsp;=&nbsp;entry-&gt;m_seq;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(previous&nbsp;==&nbsp;nullptr)&nbsp;continue;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(thd_arg-&gt;lex-&gt;sql_command&nbsp;==&nbsp;SQLCOM_SHOW_PROFILE)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(thd_arg-&gt;lex-&gt;show_profile_query_id&nbsp;==<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0)&nbsp;/*&nbsp;0&nbsp;==&nbsp;show&nbsp;final&nbsp;query&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(query&nbsp;!=&nbsp;last)&nbsp;continue;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;如果记录中的&nbsp;Query_ID&nbsp;跟&nbsp;show&nbsp;profile&nbsp;for&nbsp;query&nbsp;query_id&nbsp;中的不一致，则继续判断下一条记录<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(thd_arg-&gt;lex-&gt;show_profile_query_id&nbsp;!=&nbsp;query-&gt;profiling_query_id)&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restore_record(table,&nbsp;s-&gt;default_values);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;query-&gt;profiling_query_id&nbsp;用来填充&nbsp;information_schema.profiling&nbsp;中的&nbsp;QUERY_ID<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;field[0]-&gt;store((ulonglong)query-&gt;profiling_query_id,&nbsp;true);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;seq&nbsp;用来填充&nbsp;information_schema.profiling&nbsp;中的&nbsp;SEQ<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;field[1]-&gt;store((ulonglong)seq,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;true);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;status&nbsp;用来填充&nbsp;information_schema.profiling&nbsp;中的&nbsp;STATE<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;注意，这里是上一条记录的&nbsp;status，不是当前记录的&nbsp;status<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;field[2]-&gt;store(previous-&gt;status,&nbsp;strlen(previous-&gt;status),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;system_charset_info);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;当前记录的&nbsp;time_usecs&nbsp;减去上一条记录的&nbsp;time_usecs&nbsp;的值，换算成秒，用来填充&nbsp;information_schema.profiling&nbsp;中的&nbsp;DURATION<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;my_decimal&nbsp;duration_decimal;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double2my_decimal(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E_DEC_FATAL_ERROR,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(entry-&gt;time_usecs&nbsp;-&nbsp;previous-&gt;time_usecs)&nbsp;/&nbsp;(1000.0&nbsp;*&nbsp;1000),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;duration_decimal);&nbsp;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;field[3]-&gt;store_decimal(&amp;duration_decimal);<br>#ifdef&nbsp;HAVE_GETRUSAGE<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;my_decimal&nbsp;cpu_utime_decimal,&nbsp;cpu_stime_decimal;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;当前记录的&nbsp;ru_utime&nbsp;减去上一条记录的&nbsp;ru_utime，用来填充&nbsp;information_schema.profiling&nbsp;中的&nbsp;CPU_USER<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double2my_decimal(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E_DEC_FATAL_ERROR,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RUSAGE_DIFF_USEC(entry-&gt;rusage.ru_utime,&nbsp;previous-&gt;rusage.ru_utime)&nbsp;/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(1000.0&nbsp;*&nbsp;1000),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;cpu_utime_decimal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;field[4]-&gt;store_decimal(&amp;cpu_utime_decimal);<br>...<br><br>&nbsp;&nbsp;return&nbsp;0;<br>}<br></code></pre>
<p data-tool="mdnice编辑器">可以看到，<code>information_schema.profiling</code>中的第三列（STATE，对应&nbsp;<code>show profile for query N</code>&nbsp;中的 Status）存储的是上一条记录的 status（阶段名），而第四列（DURATION）的值等于当前记录的采集时间（entry-&gt;time_usecs）减去上一条记录的采集时间（previous-&gt;time_usecs）。</p>
<p data-tool="mdnice编辑器">所以，我们在<code>show profile for query N</code>中看到的 Duration 实际上通过下一个阶段的采集时间减去当前阶段的采集时间得到的，并不是<code>show profile source</code>中函数（Source_function）的执行时长。</p>
<p data-tool="mdnice编辑器">这种实现方式在判断操作当前状态和分析各个阶段耗时时存在一定的误导性。</p>
<p data-tool="mdnice编辑器">回到开头的 case。</p>
<h1 data-tool="mdnice编辑器"><span style="color: rgba(0, 128, 0, 1)">表空间导入操作为什么大部分耗时是在 System lock 阶段？</span></h1>
<p data-tool="mdnice编辑器">表空间导入操作是在<code>mysql_discard_or_import_tablespace</code>函数中实现的。</p>
<p data-tool="mdnice编辑器">下面是该函数简化后的代码。</p>
<pre data-tool="mdnice编辑器"><code>bool&nbsp;Sql_cmd_discard_import_tablespace::mysql_discard_or_import_tablespace(<br>&nbsp;&nbsp;&nbsp;&nbsp;THD&nbsp;*thd,&nbsp;Table_ref&nbsp;*table_list)&nbsp;{<br>&nbsp;&nbsp;...&nbsp;<br>&nbsp;&nbsp;THD_STAGE_INFO(thd,&nbsp;stage_discard_or_import_tablespace);<br>&nbsp;&nbsp;...<br>&nbsp;&nbsp;if&nbsp;(open_and_lock_tables(thd,&nbsp;table_list,&nbsp;0,&nbsp;&amp;alter_prelocking_strategy))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;...<br>&nbsp;&nbsp;const&nbsp;bool&nbsp;discard&nbsp;=<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(m_alter_info-&gt;flags&nbsp;&amp;&nbsp;Alter_info::ALTER_DISCARD_TABLESPACE);<br>&nbsp;&nbsp;error&nbsp;=&nbsp;table_list-&gt;table-&gt;file-&gt;ha_discard_or_import_tablespace(discard,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table_def);&nbsp;<br>&nbsp;&nbsp;THD_STAGE_INFO(thd,&nbsp;stage_end);<br>&nbsp;&nbsp;...<br>&nbsp;&nbsp;return&nbsp;true;<br>}<br></code></pre>
<p data-tool="mdnice编辑器">可以看到，该函数实际调用的是 THD_STAGE_INFO(thd, stage_discard_or_import_tablespace)。</p>
<p data-tool="mdnice编辑器">只不过，在调用 THD_STAGE_INFO(thd, stage_discard_or_import_tablespace) 后，调用了 open_and_lock_tables。</p>
<p data-tool="mdnice编辑器">而 open_and_lock_tables 最后会调用 THD_STAGE_INFO(thd, stage_system_lock)。</p>
<p data-tool="mdnice编辑器">这也就是为什么上述函数中虽然调用了 THD_STAGE_INFO(thd, stage_discard_or_import_tablespace)，但<code>show profile</code>和<code>show processlist</code>的输出中却显示<code>System lock</code>。</p>
<p data-tool="mdnice编辑器">但基于对耗时的分析，我们发现这么显示其实并不合理。</p>
<p data-tool="mdnice编辑器">在开头的 case 中，虽然<code>System lock</code>阶段显示的耗时是 788.966338 秒，但实际上<code>open_and_lock_tables</code>这个函数只消耗了 0.000179 秒，真正的耗时是来自&nbsp;<code>table_list-&gt;table-&gt;file-&gt;ha_discard_or_import_tablespace</code>，其执行时间长达 788.965481 秒。</p>
<p data-tool="mdnice编辑器">为什么这个函数需要执行这么久呢？主要是表空间在导入的过程中会检查并更新表空间中的每个页，包括验证页是否损坏、更新表空间 ID 和 LSN、处理 Btree 页（如设置索引 ID、清除 delete marked 记录等）、将页标记为脏页等。表越大，检查校验的时候会越久。</p>
<p data-tool="mdnice编辑器">如此来看，针对表空间导入操作，将其状态显示为<code>discard_or_import_tablespace</code>更能反映操作的真实情况。</p>
<h1 data-tool="mdnice编辑器"><span style="color: rgba(0, 128, 0, 1)">总结</span></h1>
<ol class="list-paddingleft-1" data-tool="mdnice编辑器">
<li>
<p>在<code>SHOW PROFILE</code>中显示的每个阶段的耗时，实际上是由下一个阶段的采集时间减去当前阶段的采集时间得出的。</p>
<p>每个阶段的采集时间是通过在代码的不同路径中植入 <code>THD_STAGE_INFO(thd, stage_xxx)</code> 实现的，采集的是系统当前时间。</p>
</li>
<li>
<p>这种实现方式在判断操作当前状态（通过 SHOW PROCESSLIST）和分析各个阶段耗时（通过 SHOW PROFILE ）时存在一定的误导性，主要是因为预定义的阶段数量是有限的。</p>
<p>在 MySQL 8.4 中，共定义了 98 个阶段，具体的阶段名可在<code>mysqld.cc</code>中的<code>all_server_stages</code>数组找到。</p>
</li>
<li>
<p>在表空间导入操作中，虽然大部分耗时显示为<code>System lock</code>阶段，但实际上，使用<code>discard_or_import_tablespace</code>来描述这一过程会更为准确。</p>
</li>
</ol>
<h1 data-tool="mdnice编辑器"><span style="color: rgba(0, 128, 0, 1)">参考资料</span></h1>
<ol class="list-paddingleft-1" data-tool="mdnice编辑器">
<li><a href="https://dev.mysql.com/doc/refman/8.4/en/show-profile.html" target="_blank" rel="noopener nofollow">https://dev.mysql.com/doc/refman/8.4/en/show-profile.html</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.4/en/performance-schema-query-profiling.html" target="_blank" rel="noopener nofollow">https://dev.mysql.com/doc/refman/8.4/en/performance-schema-query-profiling.html</a></li>
<li><a href="https://dev.mysql.com/worklog/task/?id=5522" target="_blank" rel="noopener nofollow">https://dev.mysql.com/worklog/task/?id=5522</a></li>
</ol>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.2593219207210648" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-23 08:45">2024-12-23 08:45</span>&nbsp;
<a href="https://www.cnblogs.com/ivictor">iVictor</a>&nbsp;
阅读(<span id="post_view_count">205</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18622997" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18622997);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18622997', targetLink: 'https://www.cnblogs.com/ivictor/p/18622997', title: 'MySQL 优化利器 SHOW PROFILE 的实现原理' })">举报</a>
</div>
	