
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/qq21497936/p/18920324" title="发布于 2025-06-09 10:38">
    <span role="heading" aria-level="2">GStreamer开发笔记（五）：gstreamer创建组件、管道和总线实现简单的播放器</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div class="cl-preview-section">
<h1>前言</h1>
</div>
<div class="cl-preview-section">
<p>  前面是自动构建管道。本篇实例化每个元素并将它们链接在一起来手动构建一个管道。<br>  本篇创建管道分为：创建组件，连接组件，获取总线，阻塞提取需要的消息并处理。</p>

</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="Demo_6"></a>Demo</h1>

</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/47448fcf10a24c768960edf65f26bfd4.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="_11"></a>管道图</h1>

</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/d972f2dee0a049c0b2fd92e8b7bf7b95.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">
<p>  我们创建了两个元素：videotestsrc和autovideosink。不创建过滤元件。因此，管道看起来如下：<br>  <img src="https://i-blog.csdnimg.cn/direct/1fae8c542fca44e0af596d4df2c590c1.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="_20"></a>连接源组件和接收组件程序</h1>

</div>
<div class="cl-preview-section">
<h2><a id="gst_21"></a>步骤一：初始化gst</h2>

</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/32a1cdea28aa468b8faf5e459c89085b.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">
<h2><a id="_24"></a>步骤二：创建组件</h2>

</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/9d7b5862c4db44cfae418639f0f6db33.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">
<p>  使用gst_element_factory_make()创建新组件。第一个参数是要创建的元素类型（默认就有一些常见类型，可通过gstreamer工具获取所有可用类型的列表）。第二个参数是给这个特定实例起的名字。如果没有保留指针，为元素命名对于以后检索它们很有用（并且可以获得更有意义的调试输出）。但是，如果为名称传递NULL，GStreamer将为您提供一个唯一的名称。<br>  代码创建了两个元素：videotestsrc和autovideosink。不创建过滤元件。因此，管道看起来如下：<br>  <img src="https://i-blog.csdnimg.cn/direct/2b4895b46fac41beac8226a0d7987321.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">
<ul>
<li>videotestsrc是一个源组件（它生成数据），用于创建测试视频模式。此元素可用于调试目的，通常在实际应用程序中找不到。</li>
<li>autovideosink是一个接收组件（它消耗数据），它在窗口上显示它接收到的图像。根据操作系统的不同，存在几种具有不同功能的视频接收器。autovideosink会自动选择并实例化最佳的一个，因此不必担心细节，并且代码更加独立于平台。</li>

</ul>

</div>
<div class="cl-preview-section">
<h2><a id="_33"></a>步骤三：创建空管道</h2>

</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/8c060a94835d4d44893e2952c485d648.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">
<p>  GStreamer中的所有元素通常必须包含在管道中才能使用，因为它负责一些时钟和消息传递功能。我们使用gst_pipeline_new()创建管道。</p>

</div>
<div class="cl-preview-section">
<h2><a id="_37"></a>步骤四：管道连接组件，此处连接：源组件、接收组件</h2>

</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/685562c0a3814bb3828a50fbc748cb0d.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">
<h2><a id="_40"></a>步骤五：修改源组件属性</h2>

</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/7ee3c54d4a2f4303a4499396a4a93dbe.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">
<h2><a id="PALYING_43"></a>步骤六：设置组件状态PALYING，开始播放</h2>

</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/62096323af9a48d0b6a18fd66144a069.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">
<h2><a id="bus_46"></a>步骤七：获取bus总线，阻塞函数直至总线触发错误或流结束后继续</h2>

</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/93ae96fb492f45e2b2ea78a51e84923e.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">
<h2><a id="_49"></a>步骤八：处理返回消息</h2>

</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/0eb2bd4fbe7d455a9eb3f8a4ec4de2b8.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">
<h2><a id="_52"></a>步骤九：释放资源</h2>

</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/2f0a3457de52470a93ad4db59ade3b03.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="_58"></a>关键函数</h1>

</div>
<div class="cl-preview-section">
<h2><a id="gst_element_factory_make_59"></a>gst_element_factory_make()</h2>

</div>
<div class="cl-preview-section">
<p>  gst_element_factory_make 是 GStreamer 框架中的一个函数，用于创建 GStreamer 元素（Element）。GStreamer 是一个强大的多媒体框架，允许开发者构建媒体处理管道，而元素是这些管道的基本构建块。</p>

</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp">GstElement<span class="token operator">* <span class="token function">gst_element_factory_make<span class="token punctuation">(<span class="token keyword">const gchar <span class="token operator">*factoryname<span class="token punctuation">, <span class="token keyword">const gchar <span class="token operator">*name<span class="token punctuation">)<span class="token punctuation">;
</span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<ul>
<li>参数一：要创建的元素的工厂名称。例如，如果想创建一个视频源元素，可以使用 “videotestsrc”</li>
<li>参数二：为创建的元素指定一个名称。如果为NULL，GStreamer 会为该元素自动分配一个唯一的名称。<br>  成功时：返回指向新创建元素的指针（GstElement*），失败时：返回NULL。</li>

</ul>

</div>
<div class="cl-preview-section">
<h2><a id="gst_pipeline_new_67"></a>gst_pipeline_new()</h2>

</div>
<div class="cl-preview-section">
<p>  gst_pipeline_new()是GStreamer框架中的一个函数，用于创建一个新的管道（Pipeline）。管道是 GStreamer 中用于连接和管理多个元素的核心结构，它定义了媒体数据从源到接收器的处理路径。</p>

</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp">GstElement<span class="token operator">* <span class="token function">gst_pipeline_new<span class="token punctuation">(<span class="token keyword">const gchar <span class="token operator">*name<span class="token punctuation">)<span class="token punctuation">;
</span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<ul>
<li>参数一：为创建的管道指定一个名称。如果为 NULL，GStreamer 会为管道自动分配一个唯一的名称。<br>  成功时：返回指向新创建管道的指针（GstElement*），实际上是一个GstPipeline 类型的对象，但通常通过 GstElement 指针来引用。失败时：返回NULL。</li>

</ul>

</div>
<div class="cl-preview-section">
<h2><a id="gst_bin_add_many_74"></a>gst_bin_add_many()</h2>

</div>
<div class="cl-preview-section">
<p>  gst_bin_add_many()是GStreamer框架中的一个函数，用于将多个元素添加到一个GstBin（如GstPipeline）中。GstBin 是一个可以包含其他元素的容器，GstPipeline是GstBin的一种特殊类型，用于管理媒体处理流程。</p>

</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp">guint <span class="token function">gst_bin_add_many<span class="token punctuation">(GstBin <span class="token operator">*bin<span class="token punctuation">, GstElement <span class="token operator">*element_1<span class="token punctuation">, <span class="token punctuation">.<span class="token punctuation">.<span class="token punctuation">.<span class="token punctuation">, <span class="token constant">NULL<span class="token punctuation">)<span class="token punctuation">;
</span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<ul>
<li>参数一：指向目标 GstBin 的指针，通常是一个 GstPipeline。</li>
<li>参数二（实际多个）：可变参数，GstElement* 类型，要添加到bin中的元素列表，可变参数允许一次添加多个元素，最后一个参数必须是 NULL，以指示参数列表的结束。<br>  成功时：返回添加的元素数量（不包括最后的NULL）。失败时：如果任何元素无法添加，函数将返回 0，并且不会添加任何元素。</li>

</ul>

</div>
<div class="cl-preview-section">
<h2><a id="gst_element_link_82"></a>gst_element_link()</h2>

</div>
<div class="cl-preview-section">
<p>  gst_element_link() 是 GStreamer 框架中的一个函数，用于将两个元素链接在一起，以便媒体数据可以在它们之间流动。在 GStreamer 管道中，元素通过“链接”来形成一个处理链，数据从源元素流向接收器元素，经过各种处理步骤。</p>

</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp">gboolean <span class="token function">gst_element_link<span class="token punctuation">(GstElement <span class="token operator">*src<span class="token punctuation">, GstElement <span class="token operator">*dest<span class="token punctuation">)<span class="token punctuation">;
</span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<ul>
<li>参数一：指向源元素的指针，数据将从该元素流出。</li>
<li>参数二：指向目标元素的指针，数据将流入该元素。<br>  成功时：返回 TRUE。失败时：返回 FALSE。</li>

</ul>

</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="Demo_93"></a>Demo源码</h1>

</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;gst/gst.h&gt;

Int <span class="token function">main <span class="token punctuation">(<span class="token keyword">int argc<span class="token punctuation">, <span class="token keyword">char <span class="token operator">*argv<span class="token punctuation">[<span class="token punctuation">]<span class="token punctuation">)
<span class="token punctuation">{
    GstElement <span class="token operator">*pipeline<span class="token punctuation">, <span class="token operator">*source<span class="token punctuation">, <span class="token operator">*sink<span class="token punctuation">;
    GstBus <span class="token operator">*bus<span class="token punctuation">;
    GstMessage <span class="token operator">*msg<span class="token punctuation">;
    GstStateChangeReturn ret<span class="token punctuation">;

    <span class="token comment">// 步骤一：初始化gst
    <span class="token function">gst_init <span class="token punctuation">(<span class="token operator">&amp;argc<span class="token punctuation">, <span class="token operator">&amp;argv<span class="token punctuation">)<span class="token punctuation">;

    <span class="token comment">// 步骤二：创建组件
    source <span class="token operator">= <span class="token function">gst_element_factory_make<span class="token punctuation">(<span class="token string">"videotestsrc"<span class="token punctuation">, <span class="token string">"source"<span class="token punctuation">)<span class="token punctuation">;
    sink <span class="token operator">= <span class="token function">gst_element_factory_make<span class="token punctuation">(<span class="token string">"autovideosink"<span class="token punctuation">, <span class="token string">"sink"<span class="token punctuation">)<span class="token punctuation">;

    <span class="token comment">// 步骤三：创建空管道
    pipeline <span class="token operator">= <span class="token function">gst_pipeline_new<span class="token punctuation">(<span class="token string">"test-pipeline"<span class="token punctuation">)<span class="token punctuation">;

    <span class="token keyword">if<span class="token punctuation">(<span class="token operator">!pipeline <span class="token operator">|| <span class="token operator">!source <span class="token operator">|| <span class="token operator">!sink<span class="token punctuation">)
    <span class="token punctuation">{
        <span class="token function">g_printerr<span class="token punctuation">(<span class="token string">"Not all elements could be created.\n"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return <span class="token operator">-<span class="token number">1<span class="token punctuation">;
    <span class="token punctuation">}

    <span class="token comment">// 步骤四：管道连接组件，此处连接：源组件、接收组件
    <span class="token function">gst_bin_add_many<span class="token punctuation">(<span class="token function">GST_BIN<span class="token punctuation">(pipeline<span class="token punctuation">)<span class="token punctuation">, source<span class="token punctuation">, sink<span class="token punctuation">, <span class="token constant">NULL<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">if<span class="token punctuation">(<span class="token function">gst_element_link<span class="token punctuation">(source<span class="token punctuation">, sink<span class="token punctuation">) <span class="token operator">!= TRUE<span class="token punctuation">)
    <span class="token punctuation">{
        <span class="token function">g_printerr<span class="token punctuation">(<span class="token string">"Elements could not be linked.\n"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">gst_object_unref<span class="token punctuation">(pipeline<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return <span class="token operator">-<span class="token number">1<span class="token punctuation">;
    <span class="token punctuation">}

    <span class="token comment">// 步骤五：修改源组件属性
    <span class="token function">g_object_set<span class="token punctuation">(source<span class="token punctuation">, <span class="token string">"pattern"<span class="token punctuation">, <span class="token number">0<span class="token punctuation">, <span class="token constant">NULL<span class="token punctuation">)<span class="token punctuation">;

    <span class="token comment">// 步骤六：设置组件状态PALYING，开始播放
    ret <span class="token operator">= <span class="token function">gst_element_set_state<span class="token punctuation">(pipeline<span class="token punctuation">, GST_STATE_PLAYING<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">if<span class="token punctuation">(ret <span class="token operator">== GST_STATE_CHANGE_FAILURE<span class="token punctuation">)
    <span class="token punctuation">{
        <span class="token function">g_printerr<span class="token punctuation">(<span class="token string">"Unable to set the pipeline to the playing state.\n"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">gst_object_unref<span class="token punctuation">(pipeline<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return <span class="token operator">-<span class="token number">1<span class="token punctuation">;
    <span class="token punctuation">}

    <span class="token comment">// 步骤七：获取bus总线，阻塞函数直至总线触发错误或流结束后继续
    bus <span class="token operator">= <span class="token function">gst_element_get_bus<span class="token punctuation">(pipeline<span class="token punctuation">)<span class="token punctuation">;
    msg <span class="token operator">= <span class="token function">gst_bus_timed_pop_filtered<span class="token punctuation">(bus<span class="token punctuation">, GST_CLOCK_TIME_NONE<span class="token punctuation">, GST_MESSAGE_ERROR <span class="token operator">| GST_MESSAGE_EOS<span class="token punctuation">)<span class="token punctuation">;

    <span class="token comment">// 步骤八：处理返回消息
    <span class="token keyword">if<span class="token punctuation">(msg <span class="token operator">!= <span class="token constant">NULL<span class="token punctuation">)
    <span class="token punctuation">{
        GError <span class="token operator">*err<span class="token punctuation">;
        gchar <span class="token operator">*debug_info<span class="token punctuation">;

        <span class="token keyword">switch<span class="token punctuation">(<span class="token function">GST_MESSAGE_TYPE<span class="token punctuation">(msg<span class="token punctuation">)<span class="token punctuation">)
        <span class="token punctuation">{
        <span class="token keyword">case GST_MESSAGE_ERROR<span class="token operator">:
            <span class="token function">gst_message_parse_error<span class="token punctuation">(msg<span class="token punctuation">, <span class="token operator">&amp;err<span class="token punctuation">, <span class="token operator">&amp;debug_info<span class="token punctuation">)<span class="token punctuation">;
            <span class="token function">g_printerr<span class="token punctuation">(<span class="token string">"Error received from element %s: %s\n"<span class="token punctuation">,
                        <span class="token function">GST_OBJECT_NAME<span class="token punctuation">(msg<span class="token operator">-&gt;src<span class="token punctuation">)<span class="token punctuation">,
                        err<span class="token operator">-&gt;message<span class="token punctuation">)<span class="token punctuation">;
            <span class="token function">g_printerr<span class="token punctuation">(<span class="token string">"Debugging information: %s\n"<span class="token punctuation">,
                        debug_info <span class="token operator">? debug_info <span class="token operator">: <span class="token string">"none"<span class="token punctuation">)<span class="token punctuation">;
            <span class="token function">g_clear_error<span class="token punctuation">(<span class="token operator">&amp;err<span class="token punctuation">)<span class="token punctuation">;
            <span class="token function">g_free<span class="token punctuation">(debug_info<span class="token punctuation">)<span class="token punctuation">;
            <span class="token keyword">break<span class="token punctuation">;
        <span class="token keyword">case GST_MESSAGE_EOS<span class="token operator">:
            <span class="token function">g_print<span class="token punctuation">(<span class="token string">"End-Of-Stream reached.\n"<span class="token punctuation">)<span class="token punctuation">;
            <span class="token keyword">break<span class="token punctuation">;
        <span class="token keyword">default<span class="token operator">:
            <span class="token function">g_printerr<span class="token punctuation">(<span class="token string">"Unexpected message received.\n"<span class="token punctuation">)<span class="token punctuation">;
            <span class="token keyword">break<span class="token punctuation">;
        <span class="token punctuation">}
        <span class="token function">gst_message_unref<span class="token punctuation">(msg<span class="token punctuation">)<span class="token punctuation">;
    <span class="token punctuation">}

    <span class="token comment">// 步骤九：释放资源
    <span class="token function">gst_object_unref<span class="token punctuation">(bus<span class="token punctuation">)<span class="token punctuation">;
    <span class="token function">gst_element_set_state<span class="token punctuation">(pipeline<span class="token punctuation">, GST_STATE_NULL<span class="token punctuation">)<span class="token punctuation">;
    <span class="token function">gst_object_unref<span class="token punctuation">(pipeline<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">return <span class="token number">0<span class="token punctuation">;
<span class="token punctuation">}
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="v110_183"></a>工程模板v1.1.0</h1>
</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/4e7fbe77167c4a9ea62ba7922e48ea66.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="_193"></a>入坑</h1>
</div>
<div class="cl-preview-section">
<h2><a id="g_type_check_instace_cast_194"></a>入坑一：无法连接g_type_check_instace_cast</h2>
</div>
<div class="cl-preview-section">
<h3><a id="_195"></a>问题</h3>
</div>
<div class="cl-preview-section">
<p>  未定义库，无法连接</p>
</div>
<div class="cl-preview-section">
<h3><a id="_197"></a>原因</h3>
</div>
<div class="cl-preview-section">
<p>  这是gobject2.0库的</p>
</div>
<div class="cl-preview-section">
<h3><a id="_199"></a>解决</h3>
</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/97a27eb5135340ebb3352ab8d6076b5e.png" alt="在这里插入图片描述"></p>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-09 10:39">2025-06-09 10:38</span>&nbsp;
<a href="https://www.cnblogs.com/qq21497936">长沙红胖子Qt创微智科</a>&nbsp;
阅读(<span id="post_view_count">52</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18920324);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18920324', targetLink: 'https://www.cnblogs.com/qq21497936/p/18920324', title: 'GStreamer开发笔记（五）：gstreamer创建组件、管道和总线实现简单的播放器' })">举报</a>
</div>
        