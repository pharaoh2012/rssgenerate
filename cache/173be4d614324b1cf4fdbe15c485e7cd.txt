
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/vipsoft/p/19052164" title="发布于 2025-08-22 10:12">
    <span role="heading" aria-level="2">Java Spring Boot 修改yml配置&amp;加载顺序规则</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p></p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#spring-boot-的配置加载顺序规则" rel="noopener nofollow">Spring Boot 的配置加载顺序规则</a><ul><li><a href="#1-格式优先级高于profile" rel="noopener nofollow">1. 格式优先级高于Profile</a></li><li><a href="#2-配置加载顺序" rel="noopener nofollow">2. 配置加载顺序</a></li></ul></li><li><a href="#配置方案" rel="noopener nofollow">配置方案</a><ul><li><a href="#参数形式" rel="noopener nofollow">参数形式</a></li><li><a href="#使用配置文件推荐最清晰最易维护" rel="noopener nofollow">使用配置文件（推荐，最清晰、最易维护）</a></li><li><a href="#使用shell脚本或batch文件windows批处理" rel="noopener nofollow">使用Shell脚本或Batch文件（Windows批处理）</a></li><li><a href="#使用环境变量" rel="noopener nofollow">使用环境变量</a></li></ul></li><li><a href="#最佳实践建议" rel="noopener nofollow">最佳实践建议</a></li></ul></div><p></p>
<h2 id="spring-boot-的配置加载顺序规则">Spring Boot 的配置加载顺序规则</h2>
<p>Spring Boot 有非常明确的配置加载顺序和优先级规则：</p>
<h3 id="1-格式优先级高于profile">1. 格式优先级高于Profile</h3>
<p>对于<strong>相同名称的配置文件</strong>，<strong>文件格式的优先级是固定的</strong>，与加载顺序无关：</p>
<p><strong><code>.properties</code> &gt; <code>.yml</code> &gt; <code>.yaml</code></strong></p>
<p>也就是说，如果同时存在 <code>application-vipsoft.properties</code> 和 <code>application-vipsoft.yml</code>：</p>
<ul>
<li><strong><code>application-vipsoft.properties</code> 中的配置会覆盖 <code>application-vipsoft.yml</code> 中的相同配置</strong></li>
<li>这是由Spring Boot的设计决定的，properties文件的优先级永远高于yml/yaml文件</li>
</ul>
<h3 id="2-配置加载顺序">2. 配置加载顺序</h3>
<p>Spring Boot 按以下顺序加载配置（后面的覆盖前面的）：</p>
<ol>
<li>Jar包内的 <code>application.yml</code> (或application.properties)</li>
<li>Jar包内的 <code>application-{profile}.yml</code></li>
<li>Jar包外（同一目录）的 <code>application.yml</code></li>
<li><strong>Jar包外（同一目录）的 <code>application-{profile}.yml</code></strong></li>
<li>Jar包外（同一目录）的 <code>application.properties</code></li>
<li><strong>Jar包外（同一目录）的 <code>application-{profile}.properties</code></strong></li>
<li><strong>当前目录下的 <code>/config</code> 子目录</strong> ✅ <strong>最高优先级 【推荐】</strong></li>
<li>命令行参数</li>
<li>环境变量</li>
</ol>
<p>如果有以下两个文件：</p>
<pre><code>D:\your-app\
│   application-vipsoft.yml        ← 优先级：第二
│   his-web-1.0.0.jar
│
└───config/
        application-vipsoft.yml    ← 优先级：第一（最高）
</code></pre>
<ul>
<li><strong>将主要配置放在config目录</strong>下，这是最标准的位置</li>
<li>外层可以放一些最基础的默认配置或示例配置</li>
<li>利用这种覆盖特性可以实现灵活的配置管理</li>
</ul>
<p><strong>所以，如果您想要最高优先级的配置，请放在config目录下！</strong></p>
<h2 id="配置方案">配置方案</h2>
<p>有时候运行好多年的系统，突然要改个配置。新的程序可能会产生BUG，那如何更新已有 yml 的值，有如下操作</p>
<h3 id="参数形式">参数形式</h3>
<p>适合改动较少的情况</p>
<pre><code class="language-bash">echo on
REM 后续命令使用的是：UTF-8编码
echo chcp 65001

title HIS API DEV 8090

"%JAVA_HOME%\bin\java" -Dloader.path=D:\Software\JavaLib -Dfile.encoding=UTF-8 -jar his-web-1.0.0.jar --server.port=8090 --spring.profiles.active=vipsoft

pause
</code></pre>
<h3 id="使用配置文件推荐最清晰最易维护">使用配置文件（推荐，最清晰、最易维护）</h3>
<p>这是Spring Boot应用的首选方式。将那些不常改变的参数（尤其是数据库连接、API地址等）移动到配置文件中。</p>
<ol>
<li>创建/修改 application-vipsoft.yml 文件<br>
由于您已经指定了 --spring.profiles.active=vipsoft，Spring Boot会自动加载 application-vipsoft.yml。将这个文件放在与您的jar包同一目录下</li>
</ol>
<pre><code class="language-yml">server:
  port: 22588

his:
  api-url: http://192.168.0.1/webservice/service.asmx?wsdl

spring:
  datasource:
    his:
      url: http://192.168.0.1/webservice/service.asmx?wsdl
      username: username
      password: pwd

</code></pre>
<ol start="2">
<li>简化后的启动命令<br>
现在，启动命令变得非常干净，只需要关注核心的JVM参数和配置文件激活。</li>
</ol>
<pre><code>echo on
REM 后续命令使用的是：UTF-8编码
echo chcp 65001

title HIS API DEV 8090

"%JAVA_HOME%\bin\java" -Dloader.path=D:\Software\JavaLib -Dfile.encoding=UTF-8 -jar his-web-1.0.0.jar --server.port=8090 --spring.profiles.active=vipsoft

pause
</code></pre>
<p><strong>优点：</strong></p>
<ul>
<li>命令极其简洁，不易出错。</li>
<li>配置与代码分离，安全性更高（尤其是密码）。</li>
<li>修改配置无需重新打包jar文件。</li>
<li>不同环境（如测试、生产）可以轻松使用不同的配置文件。</li>
</ul>
<h3 id="使用shell脚本或batch文件windows批处理">使用Shell脚本或Batch文件（Windows批处理）</h3>
<p>对于Windows，创建一个 startup.bat 文件。</p>
<pre><code class="language-bash">@echo off
title HIS API DEV 8090

set JAVA_OPTS=-Dloader.path=D:\Software\JavaLib -Dfile.encoding=UTF-8
set SPRING_OPTS=--spring.profiles.active=vipsoft --server.port=8090
set HIS_OPTS=--his.api-url=http://192.168.0.1/webservice/service.asmx?wsdl
set DS_OPTS=--spring.datasource.his.url="jdbc:sqlserver://192.168.0.2:1433;DatabaseName=XXX" --spring.datasource.his.username=username --spring.datasource.his.password=pwd

echo Starting application...
"%JAVA_HOME%\bin\java" %JAVA_OPTS% -jar his-web-1.0.0.jar %SPRING_OPTS% %HIS_OPTS% %DS_OPTS%

pause
</code></pre>
<p><strong>优点：</strong></p>
<ul>
<li>逻辑清晰，参数被分类设置。</li>
<li>一键启动，避免了每次输入长命令。</li>
<li>易于维护和修改参数。</li>
</ul>
<h3 id="使用环境变量">使用环境变量</h3>
<p>Spring Boot可以从环境变量中读取配置，这是一种非常云原生的做法。</p>
<ol>
<li>设置环境变量（可以在批处理文件中设置，也可以在系统高级设置中设置）</li>
</ol>
<pre><code class="language-bash">set SPRING_DATASOURCE_HIS_URL=jdbc:sqlserver://192.168.0.2:1433;DatabaseName=XXX
set SPRING_DATASOURCE_HIS_USERNAME=username
set SPRING_DATASOURCE_HIS_PASSWORD=pwd
set HIS_API_URL=http://192.168.0.1/webservice/service.asmx?wsdl
</code></pre>
<p>注意：Spring Boot将大写环境变量中的 _ 视为配置中的 .，例如 SPRING_DATASOURCE_HIS_URL 对应 spring.datasource.his.url。<br>
2. 启动命令</p>
<pre><code class="language-bash">echo on
REM 后续命令使用的是：UTF-8编码
echo chcp 65001

title HIS API DEV 8090

"%JAVA_HOME%\bin\java" -Dloader.path=D:\Software\JavaLib -Dfile.encoding=UTF-8 -jar his-web-1.0.0.jar --server.port=8090 --spring.profiles.active=vipsoft

pause
</code></pre>
<p><strong>优点：</strong></p>
<ul>
<li>安全性高，敏感信息（如密码）不出现在命令行或配置文件中。</li>
<li>配置非常灵活，特别适合Docker、Kubernetes等容器化部署。</li>
</ul>
<h2 id="最佳实践建议">最佳实践建议</h2>
<ol>
<li><strong>检查jar包内</strong>：先用解压软件查看jar包内是否已有 <code>application-vipsoft.yml</code></li>
<li><strong>保持一致</strong>：外部配置文件格式尽量与内部保持一致</li>
<li><strong>外部配置优先</strong>：将需要修改的配置放在jar包外部的配置文件中，这样升级jar包时配置不会丢失</li>
<li><strong>敏感信息处理</strong>：密码等敏感信息最好不要写在配置文件中，而是通过环境变量或命令行参数传入</li>
</ol>
<p><strong>最终建议</strong>：检查jar包内的配置格式，然后在外部使用<strong>相同格式</strong>的配置文件，这样最清晰易懂。<br>
``</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/vipsoft/" target="_blank">VipSoft</a>  转载请注明原文链接：<a href="https://www.cnblogs.com/vipsoft/p/19052164" target="_blank">https://www.cnblogs.com/vipsoft/p/19052164</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.022916666666666665" data-date-updated="2025-08-22 10:45">2025-08-22 10:12</span>&nbsp;
<a href="https://www.cnblogs.com/vipsoft">VipSoft</a>&nbsp;
阅读(<span id="post_view_count">48</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19052164);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19052164', targetLink: 'https://www.cnblogs.com/vipsoft/p/19052164', title: 'Java Spring Boot 修改yml配置&amp;amp;加载顺序规则' })">举报</a>
</div>
        