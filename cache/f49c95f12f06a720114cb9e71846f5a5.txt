
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/OrdinaryLT/p/18823154" title="发布于 2025-04-13 17:19">
    <span role="heading" aria-level="2">Avalonia跨平台实战(二)，Avalonia相比WPF的便利合集(一)</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h4 id="本话讲的是avalonia中相比于wpf更方便的一些特性">本话讲的是Avalonia中相比于WPF更方便的一些特性</h4>
<hr>
<ul>
<li>
<h3 id="布局">布局</h3>
<h5 id="布局方面没什么好说的和wpf没什么区别gridstckpanel这些不熟悉的话可以b站上找一下教程">布局方面没什么好说的，和WPF没什么区别，Grid，StckPanel...这些，不熟悉的话可以B站上找一下教程</h5>
</li>
<li>
<h3 id="xml树">xml树</h3>
<h5 id="在wpf中我们是可以在调试的时候显示xml结构树的在avalonia中有些区别在调试模式下我们可以按f12调出devtools就可以看到xml结构树了">在WPF中我们是可以在调试的时候显示Xml结构树的，在Avalonia中有些区别，在调试模式下，我们可以按F12调出Devtools，就可以看到Xml结构树了</h5>
<p><img src="https://img2024.cnblogs.com/blog/923811/202504/923811-20250413124751721-396467799.png" alt="image" loading="lazy"></p>
</li>
<li>
<h3 id="margin">Margin</h3>
<h4 id="在avalonia中我们有两种方式去给元素更便利的添加margin">在Avalonia中，我们有两种方式去给元素更便利的添加Margin</h4>
<hr>
<ul>
<li>
<h4 id="特性">特性</h4>
<h5 id="看到margin熟悉wpf的小伙伴应该很清楚有时候为了给panel中各种控件写margin的繁琐现在avalonia对于布局新出了一个特性spacing">看到Margin，熟悉WPF的小伙伴应该很清楚有时候为了给panel中各种控件写margin的繁琐，现在Avalonia对于布局新出了一个特性，Spacing。</h5>
<h5 id="在这里可以看到我在stackpanel中放了4个textblock且没设间距看起来像只有一个元素一样在wpf中我们调整间距的话还得去给每一个子元素添加margin间距">在这里可以看到，我在StackPanel中放了4个Textblock，且没设间距，看起来像只有一个元素一样，在WPF中，我们调整间距的话还得去给每一个子元素添加margin间距，。</h5>
<img src="https://img2024.cnblogs.com/blog/923811/202504/923811-20250413124857552-578887564.png" alt="image" loading="lazy">
<h5 id="但是现在有新特性直接一句代码就可以搞定没错就简简单单的spacing10就搞定了每一个元素的间距再也不用为了调整各种间距而头疼了">但是现在有新特性，直接一句代码就可以搞定。没错，就简简单单的<code>Spacing="10"</code>就搞定了每一个元素的间距，再也不用为了调整各种间距而头疼了</h5>
<img src="https://img2024.cnblogs.com/blog/923811/202504/923811-20250413125103267-848441118.png" alt="image" loading="lazy"></li>
</ul>
<hr>
<ul>
<li>
<h4 id="style">style</h4>
<h5 id="没错我们还可以使用style来更方便的给元素添加特性也许大家会想wpf中不也可以吗其实在avalonia中对于选择器引入了css的概念熟悉前端的小伙伴应该知道css选择器有很多可以更加方便的查找符合条件的元素不说废话上图请看下图">没错，我们还可以使用Style来更方便的给元素添加特性。也许大家会想，WPF中不也可以吗。其实在Avalonia中对于选择器引入了CSS的概念，熟悉前端的小伙伴应该知道，css选择器有很多，可以更加方便的查找符合条件的元素，不说废话，上图，请看下图</h5>
<img src="https://img2024.cnblogs.com/blog/923811/202504/923811-20250413130116396-1873972081.png" alt="image" loading="lazy">
<h6 id="这里可以看到我们定义了一个样式大家有没有看出区别没错在stackpanel上有这么一个属性classesaaa这代表我们可以给这个元素绑定多个属性和前端用法一样classesclass1-class2就可以添加多个特性了">这里可以看到，我们定义了一个样式，大家有没有看出区别，没错，在StackPanel上有这么一个属性<code>Classes="aaa"</code>,这代表我们可以给这个元素绑定多个属性，和前端用法一样<code>Classes="class1 class2"</code>就可以添加多个特性了</h6>
<h6 id="在style上也看到这么一句话selectorstackpanelaaa-textblock这句话代表什么呢也就是这个样式只会作用于stackpanel且带有aaa样式下的所有textblock元素所以看到这里其实已经知晓avalonia中引入了css中的概念有各种选择器这可以使我们更加便利的调整自己所需要的样式">在Style上，也看到这么一句话<code>Selector="StackPanel.aaa TextBlock"</code>，这句话代表什么呢，也就是这个样式只会作用于StackPanel且带有aaa样式下的所有TextBlock元素。所以，看到这里，其实已经知晓Avalonia中引入了css中的概念，有各种选择器。这可以使我们更加便利的调整自己所需要的样式。</h6>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<h3 id="特性-1">特性</h3>
<ul>
<li>
<h5 id="watermark提示文本">Watermark提示文本</h5>
<h6 id="在wpf中我们要知道想要为输入框输入提示文本要么借助第三方控件库要么自己自定义控件但是在avalonia中官方自己提供了这个属性就是watermark只需要在textbox上加上这个属性就行">在WPF中我们要知道，想要为输入框输入提示文本，要么借助第三方控件库，要么自己自定义控件，但是在Avalonia中，官方自己提供了这个属性，就是Watermark，只需要在textbox上加上这个属性就行</h6>
<pre><code>&lt;TextBox Watermark="请输入账号"&gt;&lt;/TextBox&gt;
</code></pre>
<img src="https://img2024.cnblogs.com/blog/923811/202504/923811-20250413153218534-28554547.png" alt="image" loading="lazy">
<h6 id="可以清除的看到只需要加上这么一个属性就完成了提示文本">可以清除的看到只需要加上这么一个属性就完成了提示文本</h6>
</li>
</ul>
<hr>
<ul>
<li>
<h5 id="maskedtextbox">MaskedTextBox</h5>
<h6 id="这个控件我们知道winform中有wpf中原生是没有的想要只能自定义而avalonia中原生是自带这个控件的">这个控件我们知道winform中有，wpf中原生是没有的，想要只能自定义，而Avalonia中原生是自带这个控件的</h6>
<pre><code>&lt;MaskedTextBox Mask="(+86) ###-####-####"&gt;&lt;/MaskedTextBox&gt;
</code></pre>
<h6 id="只需要这么使用我们就能得到下图的效果">只需要这么使用，我们就能得到下图的效果</h6>
<p><img src="https://img2024.cnblogs.com/blog/923811/202504/923811-20250413154304372-1687781837.png" alt="image" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/923811/202504/923811-20250413154256875-1795167384.png" alt="image" loading="lazy"></p>
</li>
</ul>
<hr>
<ul>
<li>
<h5 id="rowdefinitionscolumndefinitions">RowDefinitions、ColumnDefinitions</h5>
<h6 id="在wpf中我们定义一个三行三列的栅格布局得这么写">在Wpf中我们定义一个三行三列的栅格布局得这么写</h6>
<pre><code>&lt;Grid&gt;
	&lt;Grid.RowDefinitions&gt;
		&lt;RowDefinition Height="*" /&gt;
		&lt;RowDefinition Height="*" /&gt;
		&lt;RowDefinition Height="*" /&gt;
	&lt;/Grid.RowDefinitions&gt;
	&lt;Grid.ColumnDefinitions&gt;
		&lt;ColumnDefinition Width="*" /&gt;
		&lt;ColumnDefinition Width="*" /&gt;
		&lt;ColumnDefinition Width="*" /&gt;
	&lt;/Grid.ColumnDefinitions&gt;
&lt;/Grid&gt;
</code></pre>
<h6 id="但是在avalonia中我们只需要这么写就可以实现同样的效果当然在比较复杂的场景下也可以像上面的写法来写并不是说只支持下面这种写法下面这种写法只是在简单场景下更方便我们写布局不用再去写更多的代码">但是在Avalonia中我们只需要这么写就可以实现同样的效果，当然，在比较复杂的场景下也可以像上面的写法来写，并不是说只支持下面这种写法，下面这种写法只是在简单场景下更方便我们写布局，不用再去写更多的代码</h6>
<pre><code>&lt;Grid RowDefinitions ="*,*,*" ColumnDefinitions="*,*,*"&gt;&lt;/Grid&gt;
</code></pre>
</li>
<li>
<h5 id="数据绑定">数据绑定</h5>
<h6 id="这里简单说一下数据绑定上相对于wpf的便利性">这里简单说一下数据绑定上相对于WPF的便利性</h6>
<pre><code>&lt;TextBox Name="txtTelphone" Width="200" Watermark="请输入电话号码"&gt;&lt;/TextBox&gt;
&lt;TextBlock Text="{Binding #txtTelphone.Text}"&gt;&lt;/TextBlock&gt;
</code></pre>
<img src="https://img2024.cnblogs.com/blog/923811/202504/923811-20250413155639807-316518522.png" alt="image" loading="lazy">
<h6 id="这里同样可以看到类似于css选择器的绑定方式直接将输入框的文本绑定到textblock上了">这里同样可以看到类似于CSS选择器的绑定方式，直接将输入框的文本绑定到textblock上了。</h6>
<h6 id="对于数据绑定还有更多便利的使用请查看官方文档avalonia下更方便的数据绑定">对于数据绑定还有更多便利的使用，请查看官方文档<a href="https://docs.avaloniaui.net/zh-Hans/docs/guides/data-binding/binding-to-controls" title="Avalonia下更方便的数据绑定" target="_blank" rel="noopener nofollow">Avalonia下更方便的数据绑定</a></h6>
</li>
<li>
<h5 id="响应式事件">响应式事件</h5>
<h6 id="这里的响应式事件也就是会监听某个属性的状态来决定某个元素的状态也就是响应用户交互并触发操作下面将用一个最简单的例子来讲一下其效果和前端表单form的数据验证一样">这里的响应式事件也就是会监听某个属性的状态来决定某个元素的状态，也就是响应用户交互并触发操作，下面将用一个最简单的例子来讲一下，其效果和前端表单Form的数据验证一样</h6>
<pre><code>&lt;TextBox Width="200" Watermark="请输入文本" Text="{Binding InputText}"&gt;&lt;/TextBox&gt;
&lt;Button Width="100" Content="测试按钮" Command="{Binding ButtonIsEnableCommand}"&lt;/Button&gt;
</code></pre>
<pre><code>private string _inputText;
public string InputText
{
	get =&gt; _inputText;
	set =&gt; this.RaiseAndSetIfChanged(ref _inputText, value);  
}
public ReactiveCommand&lt;Unit,Unit&gt; ButtonIsEnableCommand { get; }
public MainWindowViewModel()
{
	var buttonIsEnable = this.WhenAnyValue(x=&gt;x.InputText,x=&gt;!string.IsNullOrWhiteSpace(x));
	ButtonIsEnableCommand = ReactiveCommand.Create(ButtonIsEnable, buttonIsEnable);
}
private void ButtonIsEnable()
{
}
</code></pre>
<h6 id="上面是我们的代码可以看到我们给文本框绑定了属性同样也给按钮绑定了事件这样会有什么效果呢看下图">上面是我们的代码，可以看到我们给文本框绑定了属性，同样也给按钮绑定了事件，这样会有什么效果呢，看下图</h6>
<img src="https://img2024.cnblogs.com/blog/923811/202504/923811-20250413170156617-1301914686.png" alt="image" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/923811/202504/923811-20250413170206171-534990570.png" alt="image" loading="lazy">
<h6 id="可以清楚的看到在文本框没有输入文本的情况下按钮是不可点击的状态且我们并没有设置按钮的的isenable属性这样就完成了响应式事件对于这种情况相信很多小伙伴可以想到应用的场景在某些场景下我们要根据状态来是否可执行下一步就可以用这个来实现">可以清楚的看到，在文本框没有输入文本的情况下，按钮是不可点击的状态，且我们并没有设置按钮的的IsEnable属性。这样就完成了响应式事件，对于这种情况，相信很多小伙伴可以想到应用的场景。在某些场景下，我们要根据状态来是否可执行下一步就可以用这个来实现</h6>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<h3 id="动画animation">动画Animation</h3>
<h5 id="说到动画我们更加熟悉的应该是前端了前端实现动画可以说是最简单了基于css可以实现很多酷炫好看的动画">说到动画，我们更加熟悉的应该是前端了，前端实现动画可以说是最简单了，基于css可以实现很多酷炫好看的动画。</h5>
<h5 id="现在在avalonia中我们也可以像css一样更好的使用关键帧动画过渡效果">现在在Avalonia中我们也可以像css一样，更好的使用关键帧动画、过渡效果，</h5>
<p><img src="https://img2024.cnblogs.com/blog/923811/202504/923811-20250413152519287-374921753.png" alt="image" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/923811/202504/923811-20250413152545437-1984560912.png" alt="image" loading="lazy"></p>
<h5 id="如上面两张图所示我们可以看到css选择器的概念基于这种概念去设置对应元素的动画和过渡效果比起wpf来是不是更方便呢">如上面两张图所示，我们可以看到css选择器的概念，基于这种概念，去设置对应元素的动画和过渡效果，比起WPF来是不是更方便呢</h5>
<hr>
<h5 id="此次记录的便利性暂时到这博主后续会继续研究继续更新其他的便利性咱们下一话讲一下某些从wpf转到avalonia下可能遇到的坑">此次记录的便利性暂时到这，博主后续会继续研究继续更新其他的便利性，咱们下一话讲一下某些从WPF转到Avalonia下可能遇到的坑</h5>
</li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.007477971266203704" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-13 18:06">2025-04-13 17:19</span>&nbsp;
<a href="https://www.cnblogs.com/OrdinaryLT">阳光小码农</a>&nbsp;
阅读(<span id="post_view_count">17</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18823154);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18823154', targetLink: 'https://www.cnblogs.com/OrdinaryLT/p/18823154', title: 'Avalonia跨平台实战(二)，Avalonia相比WPF的便利合集(一)' })">举报</a>
</div>
        