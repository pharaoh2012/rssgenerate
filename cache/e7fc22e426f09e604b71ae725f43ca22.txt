
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18773357" title="发布于 2025-03-15 10:35">
    <span role="heading" aria-level="2">『Plotly实战指南』--绘图初体验</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>今天，打算通过绘制一个简单的散点图，来开启我们 <code>Plotly</code> 绘图的初次尝试。</p>
<p>本文目的不是介绍如何绘制散点图，而是通过散点图来介绍<code>Plotly</code> 绘图的基础步骤。</p>
<h1 id="1-绘制散点图初探-plotly">1. 绘制散点图：初探 Plotly</h1>
<p>散点图是展示变量关系的基础图表，在<code>Plotly</code>中，绘制散点图非常简单。</p>
<p>以下是一个示例代码：</p>
<pre><code class="language-python">import plotly.express as px

# 准备数据
data = {
    "x": [1, 2, 3, 4, 5],
    "y": [2, 3, 5, 7, 11]
}

# 绘制散点图
fig = px.scatter(data, x="x", y="y", title="简单的散点图")
fig.show()
</code></pre>
<p>运行后，你会看到一个交互式散点图，数据点根据<code>x</code>和<code>y</code>的值准确定位。</p>
<p>当你移动鼠标到散点上时，它们还会弹出身份标签，显示精确的坐标值。</p>
<p><code>Plotly</code>的交互性让数据探索变得更加灵活。</p>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250315103429857-2093347332.gif" alt="" loading="lazy"></p>
<h1 id="2-数据点定位与呈现">2. 数据点定位与呈现</h1>
<p>在散点图中，数据点的位置由<code>x</code>和<code>y</code>值决定，代码中的字典<code>data</code>存储了这些值。</p>
<p><code>Plotly</code>的<code>px.scatter</code>函数读取数据后，将点绘制在图中。</p>
<p><code>Plotly</code> 的可视化不仅依赖数据准确性，还通过样式增强可读性和美观性。</p>
<p>例如，<code>title</code>参数为图表添加标题，交互性则让用户可以通过鼠标操作探索数据，如放大或查看数据点数值。</p>
<p>也就是说，使用<code>Plotly</code>来绘图，我们的重点只要放在自己的数据上就可以了，不用花费精力在图形的样式和交互上。</p>
<h1 id="3-plotly的幕后工作">3. Plotly的幕后工作</h1>
<p>上面的代码很简单，开头通过<code>import plotly.express as px</code>导入了<code>Plotly</code>的<code>express</code>模块。</p>
<p><code>express</code>是<code>Plotly</code>的简洁易用的高层次接口，通过简单的函数调用即可生成图表。</p>
<p>绘制图表时，如果不需要深度的定制图表的显示，那么最常用的就是这个模块。</p>
<p>当我们简简单单导入<code>import plotly.express as px</code>时，<code>Plotly</code>其实已经做了：</p>
<ol>
<li><strong>加载核心引擎</strong>：导入<code>Plotly</code>的<code>JavaScript</code>渲染引擎</li>
<li><strong>建立翻译通道</strong>：创建<code>Python</code>与<code>WebGL</code>之间的<code>JSON</code>通信协议</li>
<li><strong>初始化画布</strong>：准备好交互式图表的渲染容器</li>
</ol>
<p>当我们通过<code>px.scatter</code>绘制散点图时，它也自动帮我们处理了：</p>
<ol>
<li>坐标轴的智能缩放</li>
<li>数据标签的自动生成</li>
<li>交互功能的默认配置</li>
</ol>
<h1 id="4-绘图函数">4. 绘图函数</h1>
<p>使用<code>Plotly</code>的绘图函数，关键是准备数据，比如上面示例中，数据以字典形式存储，<code>x</code>和<code>y</code>键对应横纵坐标。</p>
<p><code>px.scatter</code>函数通过这些键读取数据并绘制，当绘制不同的图形时（比如折线图，柱状图等等），重点关注不同的函数中，对数据格式的要求。</p>
<p>除了数据点，<code>Plotly</code>也提供其他丰富的参数选项，如颜色、大小、形状等，这些参数的灵活使用能让图表更符合需求。</p>
<p>比如上面的<code>px.scatter</code>函数，通过参数<code>color</code>可以设置不同点的颜色，通过<code>size</code>参数可以控制数据点的体积大小。</p>
<pre><code class="language-python">import pandas as pd

df = pd.DataFrame(
    {
        "x轴": [1, 3, 5],
        "y轴": [2, 4, 6],
        "分类": ["A", "B", "A"],
    }
)

px.scatter(
    df,
    x="x轴",
    y="y轴",
    color="分类",
    size="y轴",
    hover_data=["x轴", "y轴"],
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250315103429860-1126698237.gif" alt="" loading="lazy"></p>
<p>上面的示例，通过<strong>Y轴</strong>的数值来控制点的大小，通过<strong>分类</strong>的值来控制颜色的不同。</p>
<h1 id="5-总结">5. 总结</h1>
<p>通过这次<code>Plotly</code>绘图的初次尝试，我们成功绘制了散点图，并深入了解了其工作原理和使用方法。</p>
<p>从数据点定位到可视化呈现，从导入库的原理到绘图参数的设置，<code>Plotly</code> 都展现了强大的功能和易用性。</p>
<p>无论是数据分析人员还是爱好者，<code>Plotly</code> 都是一个值得尝试的工具。</p>
<p>后续的文章将继续探索更多图表类型和高级功能，让数据呈现更加完美。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.01263344838425926" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-15 10:35">2025-03-15 10:35</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18773357" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18773357);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18773357', targetLink: 'https://www.cnblogs.com/wang_yb/p/18773357', title: '『Plotly实战指南』--绘图初体验' })">举报</a>
</div>
        