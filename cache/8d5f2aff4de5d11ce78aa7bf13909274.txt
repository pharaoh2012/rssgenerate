
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ofnoname/p/18730302" title="发布于 2025-02-22 00:09">
    <span role="heading" aria-level="2">流淌的邂逅：最大流与二分图匹配</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="图的匹配问题">图的匹配问题</h2>
<p>在图论中，匹配问题是一个重要的研究课题，广泛应用于资源分配、网络流、任务调度等领域。图的匹配指的是一个子集边集，其中没有任何两条边共享一个公共顶点。具体来说，假设有一个无向图 <span class="math inline">\(G=(V, E)\)</span>，其中 <span class="math inline">\(V\)</span> 表示顶点集合，<span class="math inline">\(E\)</span> 表示边集合。图的匹配是边的一个集合 <span class="math inline">\(M \subseteq E\)</span>，满足对于任意两条边 <span class="math inline">\(e_1 = (u_1, v_1)\)</span> 和 <span class="math inline">\(e_2 = (u_2, v_2)\)</span>，都有 <span class="math inline">\(u_1 \neq u_2\)</span> 且 <span class="math inline">\(v_1 \neq v_2\)</span>，即没有顶点重复出现在两条边中。</p>
<p>图的匹配问题可以根据目标的不同，细分为多个类型。最常见的类型是<strong>最大匹配</strong>和<strong>最大权重匹配</strong>。</p>
<ul>
<li>
<p><strong>最大匹配</strong>：在所有可能的匹配中，边的数量最多的匹配称为最大匹配。即对于一个给定图<span class="math inline">\(G\)</span>，最大匹配是包含最大数量边的匹配。我们通常用 <span class="math inline">\(M_{\text{max}}\)</span> 表示最大匹配，其大小为 <span class="math inline">\(|M_{\text{max}}|\)</span>，即匹配中包含的边数。</p>
</li>
<li>
<p><strong>最大权重匹配</strong>：当图的边带有权重时，我们追求的是边权和最大的匹配。具体而言，给定一个图 <span class="math inline">\(G=(V, E)\)</span>，每条边 <span class="math inline">\(e \in E\)</span> 有一个与之关联的权重 <span class="math inline">\(w(e)\)</span>，最大权重匹配是使得匹配中的边的权重之和最大化的匹配。我们用 <span class="math inline">\(M_{\text{max\_weight}}\)</span> 表示最大权重匹配，其目标是：</p>
<p></p><div class="math display">\[\max_{M \subseteq E} \sum_{e \in M} w(e)
\]</div><p></p></li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/1545207/202502/1545207-20250221213819711-581583407.png" alt="image" loading="lazy"></p>
<p>其中，每一个节点都有一个匹配边相连的匹配叫做<strong>完美匹配</strong>，完美匹配若存在，则必然是最大匹配。只有偶数个节点的图才可能有<strong>完美匹配</strong>，匹配边数 <span class="math inline">\(\frac V 2\)</span>。</p>
<h2 id="二分图及其匹配">二分图及其匹配</h2>
<p>二分图（Bipartite Graph）是图论中的一种特殊图结构，它的顶点集可以被划分成两个不相交的子集，使得每条边都连接这两个子集中的一个顶点。换句话说，二分图 <span class="math inline">\(G=(V, E)\)</span> 是一个图，其中顶点集 <span class="math inline">\(V\)</span> 可以分为两个子集 <span class="math inline">\(V_1\)</span> 和 $V_2 $，且任意一条边都连接 <span class="math inline">\(V_1\)</span> 中的顶点和 <span class="math inline">\(V_2\)</span> 中的顶点，而不可能有边连接两个 <span class="math inline">\(V_1\)</span> 中的顶点或两个 <span class="math inline">\(V_2\)</span> 中的顶点。直观上，二分图长得很像我们中小学做的连线题，他刚好可以把点集划分为两个子集，子集内无边，所有边都是两个子集之间的边。</p>
<p>形式上，二分图的定义为：如果存在一个划分 <span class="math inline">\(V = V_1 \cup V_2\)</span> ，且对于任意边 <span class="math inline">\(e = (u, v) \in E\)</span>，都有 <span class="math inline">\(u \in V_1\)</span> 且 <span class="math inline">\(v \in V_2\)</span>（或反之），那么图 <span class="math inline">\(G\)</span> 就是一个二分图。</p>
<p>二分图有很多实际应用，例如任务分配、网络匹配、推荐系统等。其独特的结构使得二分图匹配问题相比一般图的匹配问题更加简单且具有优良的算法性质。</p>
<p><strong>判定二分图</strong></p>
<p>判定一个图是否为二分图，最常见的判定方法是利用<strong>染色法</strong>，该方法基于图的二分性特性，即一个二分图的顶点可以被染成两种颜色，且每条边连接的两个顶点的颜色不同。</p>
<p>我们随便选取一个顶点并将其染成颜色1。接下来对于每个已染色的顶点，检查它的邻居。如果邻居未染色，则给它染上与当前顶点不同的颜色；如果邻居已经染色且颜色与当前顶点相同，则说明图中存在一条边连接两个相同颜色的顶点，从而该图不是二分图；如果在图中所有顶点都能成功染色且没有颜色冲突，则该图是二分图。</p>
<p>另外，二分图的一个重要性质是<strong>二分图没有奇数长度的环</strong>（实际上是图为二分图的充分必要条件）。</p>
<p><strong>二分图的匹配</strong></p>
<p>对于一般的无向图 <span class="math inline">\(G=(V, E)\)</span>，其中没有任何关于顶点集合的约束，图的匹配问题相对复杂。而在二分图中，由于所有的边都仅连接两个不同子集中的顶点，独特的性质使得求解二分图匹配的特有算法更加高效。</p>
<h2 id="用最大流解决二分图最大匹配">用最大流解决二分图最大匹配</h2>
<p>由于二分图的优秀性质。其最大匹配问题可以通过转化成最大流算法来高效解决。具体来说，给定一个二分图 <span class="math inline">\(G=(V_1 \cup V_2, E)\)</span>，我们可以构建一个流网络，将原本的匹配问题转化为寻找一个流量最大的网络流问题。</p>
<p>在二分图中，顶点集 <span class="math inline">\(V\)</span> 被分为两个不相交的子集 <span class="math inline">\(V_1\)</span> 和 <span class="math inline">\(V_2\)</span>。我们想要找到一个匹配，意味着要在 <span class="math inline">\(V_1\)</span> 和 <span class="math inline">\(V_2\)</span> 之间选择一些边，使得这些边所连接的顶点不重复，并且数量最大。为了将此问题转化为最大流问题，我们进行如下构建：</p>
<ul>
<li>在二分图的基础上，额外添加一个源点 <span class="math inline">\(s\)</span> 和汇点 <span class="math inline">\(t\)</span>，构成流网络。</li>
<li>对于每个顶点 <span class="math inline">\(u \in V_1\)</span>，添加一条从源点 <span class="math inline">\(s\)</span> 到 <span class="math inline">\(u\)</span> 的边，边的容量设为 1。</li>
<li>对于每个顶点 <span class="math inline">\(v \in V_2\)</span>，添加一条从 <span class="math inline">\(v\)</span> 到汇点 <span class="math inline">\(t\)</span> 的边，边的容量设为 1。</li>
<li>对于二分图中的每一条边 <span class="math inline">\(e = (u, v)\)</span>，其中 <span class="math inline">\(u \in V_1\)</span> 且 <span class="math inline">\(v \in V_2\)</span>，添加一条从 <span class="math inline">\(u\)</span> 到 <span class="math inline">\(v\)</span> 的边，边的容量也设为1。</li>
<li>在这个流网络中，我们的目标是找到最大流，最大流量的大小恰好对应于二分图中的最大匹配的边数。</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/1545207/202502/1545207-20250221215931884-427618633.png" alt="image" loading="lazy"></p>
<p>这样做正确且符合直觉。这里的每条边的容量设为1，表示一个顶点只参与一次匹配。源点到 <span class="math inline">\(V_1\)</span> 的边保证了每个 <span class="math inline">\(V_1\)</span> 中的顶点可以被匹配，而  <span class="math inline">\(V_2\)</span> 到汇点的边保证了每个 <span class="math inline">\(V_2\)</span> 中的顶点也只能被匹配一次。最大流的值是多少，就代表有多少流量可以穿过二分图中的边到达另一集合再抵达汇点，每一单位的流量代表着一个匹配的边。</p>
<h3 id="为什么最大流算法在这样的图上高效">为什么最大流算法在这样的图上高效？</h3>
<p>将二分图最大匹配问题转化为最大流问题后，我们可以利用最大流算法来高效求解。最大流算法通常使用 <strong>Ford-Fulkerson 增广</strong>（如 <strong>Edmonds-Karp</strong> 或 <strong>Dinic</strong> 等）。通常的最大流算法复杂度较高，但是在这个性质特殊的图里，实际上很高效。</p>
<ul>
<li>
<p><strong>容量为1的边</strong>：在构建的流网络中，每条边的容量都是1。这意味着每次通过增广路径寻找流时，每条边只能通过一个单位的流量，这大大简化了计算。每次流量的增广就等价于找到了一条匹配边。</p>
</li>
<li>
<p><strong>图的结构特殊</strong>：使用最大流算法时，寻找增广路径（即未满流的路径）是解决问题的核心。构造出来的图总是一个二分图加上源点和汇点，绝大多数点的入度或出度是 1。</p>
</li>
</ul>
<p>以 Dinic 为例，在一般的图上，dinic 的一轮增广复杂度上界为 <span class="math inline">\(O(VE)\)</span>，增广轮数上界 <span class="math inline">\(O(V)\)</span>，一共是 <span class="math inline">\(O(V^2E)\)</span>；但是在满足上述两特殊条件的图上，可以用数学知识证明：一轮增广复杂度上界为 <span class="math inline">\(O(E)\)</span>，增广轮数上界 <span class="math inline">\(O(\sqrt V)\)</span>，一共是 <span class="math inline">\(O(\sqrt VE)\)</span>。</p>
<h2 id="从最大匹配到最大权重匹配的改造">从最大匹配到最大权重匹配的改造</h2>
<p>对于图带有边权重的匹配问题，即最大权重匹配问题。最大权重匹配要求找到一个匹配，使得匹配的边的权重之和最大。相应的，我们将探讨如何将最大权重匹配问题转化为<strong>费用流问题</strong>，并借助最小费用最大流算法来求解。</p>
<p>我们将问题转化为一个带有费用的流网络。具体转化步骤如下：</p>
<ul>
<li>与求解最大匹配时相同，仍然从二分图中构建一个流网络。</li>
<li>设源点为 <span class="math inline">\(s\)</span>，汇点为 <span class="math inline">\(t\)</span>，对于每个 <span class="math inline">\(u \in V_1\)</span>，添加从源点到 <span class="math inline">\(u\)</span> 的边，边的容量为 1，费用为 0；对于每个 <span class="math inline">\(v \in V_2\)</span>，添加从 <span class="math inline">\(v\)</span> 到汇点 <span class="math inline">\(t\)</span> 的边，边的容量为1，费用为 0。</li>
<li>对于二分图中的每一条边 <span class="math inline">\(e = (u, v)\)</span>，添加一条从 <span class="math inline">\(u\)</span> 到 <span class="math inline">\(v\)</span> 的边，边的容量也设为1，但边的费用为 <span class="math inline">\(-w(u, v)\)</span>（负号的引入是为了将最大化问题转化为最小化问题）。</li>
<li>在这个流网络中，我们的目标是通过流量最大化来得到最大匹配的同时，最小化流量通过的费用。换句话说，我们希望通过最小费用最大流算法来找出一种流动方式，使得匹配的权重之和最大。由于每条边的费用被设置为 <span class="math inline">\(-w(u, v)\)</span>，最小费用最大流的求解结果正是最大权重匹配的结果。</li>
</ul>
<p>在这个网络中，每条边的容量为 1，表示每次流动通过的边代表一条匹配。每条从 <span class="math inline">\(u\)</span> 到 <span class="math inline">\(v\)</span> 的边的费用是负的边权 <span class="math inline">\(-w(u, v)\)</span>，目的是将原来的最大权重和转化为最小费用流问题。通过最小化负权和，我们实际上是在最大化匹配的权重和。</p>
<h2 id="拓展知识könig定理">拓展知识：König定理</h2>
<p>在二分图中，除了最大匹配之外，还有两个重要的概念：<strong>最小点覆盖</strong>和<strong>最大独立集</strong>。它们与最大匹配之间有着密切的关系，且在二分图中，最大匹配、最小点覆盖和最大独立集三者之间是互相等价的。</p>
<ol>
<li>
<p><strong>最小点覆盖</strong>：<br>
在一个图中，点覆盖是指一个顶点集 <span class="math inline">\(S \subseteq V\)</span>，使得图中每一条边至少有一个端点在 <span class="math inline">\(S\)</span> 中。最小点覆盖是点覆盖中包含顶点数最少的那个集合。对于二分图 <span class="math inline">\(G=(V_1 \cup V_2, E)\)</span>，最小点覆盖指的是一个最小的顶点集 <span class="math inline">\(C \subseteq V_1 \cup V_2\)</span>，满足每条边都有一个端点在 <span class="math inline">\(C\)</span> 中。</p>
</li>
<li>
<p><strong>最大独立集</strong>：<br>
在图论中，独立集是指一个顶点集 <span class="math inline">\(I \subseteq V\)</span>，其中图中任意两顶点之间没有边相连。最大独立集是包含最多顶点的独立集。对于二分图 <span class="math inline">\(G=(V_1 \cup V_2, E)\)</span>，最大独立集指的是一个包含 <span class="math inline">\(V_1\)</span> 和 <span class="math inline">\(V_2\)</span> 中顶点的最大独立集，且没有任何两个顶点在图中通过边连接。</p>
</li>
</ol>
<p>在二分图中，最大匹配、最小点覆盖和最大独立集之间存在一个著名的<strong>König定理</strong>，该定理指出：</p>
<p></p><div class="math display">\[最大匹配的大小 = 最小点覆盖的大小 = V - 最大独立集的大小
\]</div><p></p><p>如果我们已知二分图中的最大匹配 <span class="math inline">\(M\)</span>，则可以通过匈牙利算法中增广路的方式来操作，构造一个最小点覆盖。最大匹配的大小直接决定了最小点覆盖的大小，且它们的大小相等。而最小覆盖集反选可以直接得到最大独立集，所以他们也密切相关。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.4385439838032407" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-22 00:12">2025-02-22 00:09</span>&nbsp;
<a href="https://www.cnblogs.com/ofnoname">Ofnoname</a>&nbsp;
阅读(<span id="post_view_count">15</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18730302" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18730302);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18730302', targetLink: 'https://www.cnblogs.com/ofnoname/p/18730302', title: '流淌的邂逅：最大流与二分图匹配' })">举报</a>
</div>
        