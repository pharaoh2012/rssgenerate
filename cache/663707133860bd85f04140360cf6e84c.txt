
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/yuwen01/p/18737476" title="发布于 2025-02-25 22:58">
    <span role="heading" aria-level="2">Ansible 数百台批量操作前期准备工作</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="ansible-数百台批量操作前期准备工作">Ansible 数百台批量操作前期准备工作</h1>
<blockquote>
<p>背景： 当前有100台服务器在同一个内网，需要统一部署业务程序并且对主机修改主机名，只提供了一个文档<code>host_user.txt</code>，内容 “ IP   用户   密码 ” 三列。</p>
<p>host_user.txt 内容示例：</p>
<p>10.0.0.11 root xxxx</p>
<p>10.0.0.12 root xxxx</p>
<p>10.0.0.13 root xxxx</p>
<p>技术难点：</p>
<p>1、如何避免一台台服务配置免密等</p>
<p>2、如何避免在ansible配置主机清单中统一添加业务主机</p>
</blockquote>
<p>思路： 想根据 <code>host_user.txt</code> 文件的内容自动生成 <code>ansible/hosts</code> 文件，可以通过 Shell 脚本或 Python 脚本来实现。提供两种方法来动态生成 <code>ansible/hosts</code> 文件。</p>
<blockquote>
<p>核心是 <code>ansible_ssh_user</code> 和 <code>ansible_ssh_pass</code>，它允许 Ansible <strong>直接使用用户名和密码进行 SSH 连接</strong>，从而<strong>跳过手动配置 SSH 免密（key-based authentication）</strong>。</p>
<p>默认情况下，Ansible 连接远程主机时使用 <strong>基于 SSH 密钥（key-based authentication）</strong>，也就是通过 <code>ssh-keygen</code> 生成密钥并手动拷贝到远程主机 <code>~/.ssh/authorized_keys</code> 文件中来实现免密登录。</p>
<p>但如果在 <code>hosts</code> 文件中指定了 <code>ansible_ssh_pass</code>，Ansible 就会<strong>改用密码认证方式</strong>，而不会尝试使用 SSH 密钥。这就相当于你手动输入密码进行 SSH 连接一样，因此你不需要提前配置免密。</p>
</blockquote>
<h3 id="方法-1使用-shell-脚本">方法 1：使用 Shell 脚本</h3>
<p>可以使用一个简单的 Shell 脚本来读取 <code>user.txt</code> 并格式化成 Ansible 所需的 <code>hosts</code> 文件格式。</p>
<h4 id="shell-脚本">Shell 脚本</h4>
<pre><code class="language-shell">#!/bin/bash

# 定义输入和输出文件
input_file="user.txt"
output_file="/etc/ansible/hosts"

# 清空 hosts 文件
&gt; "$output_file"

# 写入 Ansible 组名
echo "[All-server]" &gt;&gt; "$output_file"

# 逐行读取 user.txt 并转换格式
while IFS=" " read -r ip user pass; do
    echo "$ip ansible_ssh_port=22 ansible_ssh_user=$user ansible_ssh_pass='$pass'" &gt;&gt; "$output_file"
done &lt; "$input_file"

echo "Ansible hosts 文件已生成：$output_file"
</code></pre>
<h4 id="使用说明">使用说明：</h4>
<ol>
<li>
<p>将上述脚本保存为一个 <code>.sh</code> 文件（ <code>generate_hosts.sh</code>）。</p>
</li>
<li>
<p>赋予执行权限：</p>
<pre><code class="language-bash">chmod +x generate_hosts.sh
</code></pre>
</li>
<li>
<p>执行脚本：</p>
<pre><code class="language-bash">./generate_hosts.sh
</code></pre>
</li>
</ol>
<p>这个脚本会根据 <code>user.txt</code> 文件的内容生成一个格式化好的 <code>/etc/ansible/hosts</code> 文件。</p>
<h4 id="shell脚本分析">shell脚本分析：</h4>
<p><code>while IFS=" " read -r ip user pass;</code> 语句</p>
<p>这个语句用于逐行读取文件或标准输入中的数据，并将每一行的内容按空格分割成不同的字段。具体解释如下：</p>
<ul>
<li>
<p><strong><code>IFS=" "</code></strong>：<code>IFS</code> 是 "内部字段分隔符"（Internal Field Separator）的缩写，定义了 Shell 在分割字符串时用作分隔符的字符。默认情况下，<code>IFS</code> 是空格、制表符和换行符，但在这里我们明确指定为一个空格 <code>" "</code>，意味着按空格来分割每一行。</p>
</li>
<li>
<p><strong><code>read -r ip user pass</code></strong>：</p>
<ul>
<li><code>read</code> 命令用于从输入中读取一行并将它分配给变量。</li>
<li><code>-r</code> 选项告诉 <code>read</code> 不要转义反斜杠（<code>\</code>），这是为了避免将反斜杠作为特殊字符处理。</li>
<li><code>ip user pass</code> 是我们想要从每一行中提取的变量名。<code>read</code> 会将每一行按空格分割，依次将第一部分赋给 <code>ip</code>，第二部分赋给 <code>user</code>，第三部分赋给 <code>pass</code>。如果一行有超过三个字段，后面的内容将被赋给 <code>pass</code>。</li>
</ul>
</li>
</ul>
<h3 id="方法-2使用-python-脚本">方法 2：使用 Python 脚本</h3>
<p>Python，以下是通过 Python 脚本实现的方式。</p>
<h4 id="python-脚本">Python 脚本</h4>
<pre><code class="language-python">#!/usr/bin/env python2
# -*- coding: utf-8 -*-

# 定义输入和输出文件
input_file = "user.txt"
output_file = "/etc/ansible/hosts"

# 先清空 hosts 文件并写入 Ansible 组名
with open(output_file, 'w') as f:
    f.write("[All-server]\n")

# 读取 user.txt 并格式化内容
with open(input_file, 'r') as infile:
    with open(output_file, 'a') as outfile:
        for line in infile:
            ip, user, password = line.strip().split()
            outfile.write("{ip} ansible_ssh_port=22 ansible_ssh_user={user} ansible_ssh_pass='{password}'\n".format(
                ip=ip, user=user, password=password
            ))

print("Ansible hosts 文件已生成: {}".format(output_file))
</code></pre>
<h4 id="使用说明-1">使用说明：</h4>
<ol>
<li>
<p>将 Python 脚本保存为 <code>.py</code> 文件（generate_hosts.py`）。</p>
</li>
<li>
<p>赋予执行权限：</p>
<pre><code class="language-bash">chmod +x generate_hosts.py
</code></pre>
</li>
<li>
<p>执行脚本：</p>
<pre><code class="language-bash">./generate_hosts.py
</code></pre>
</li>
</ol>
<h3 id="脚本工作原理">脚本工作原理：</h3>
<ul>
<li><strong>Shell 脚本</strong>：读取 <code>user.txt</code> 文件，每行包含 IP 地址、用户名和密码。然后，它将这些信息格式化并写入 <code>/etc/ansible/hosts</code> 文件。</li>
<li><strong>Python 脚本</strong>：功能和 Shell 脚本类似，读取 <code>user.txt</code> 文件，提取 IP 地址、用户名和密码，按照 Ansible 所需格式输出到 <code>/etc/ansible/hosts</code> 文件。</li>
</ul>
<h3 id="最后的运行成果">最后的运行成果：</h3>
<p><img src="https://img2024.cnblogs.com/blog/1893152/202502/1893152-20250225230004652-1322164578.png" alt="image" loading="lazy"></p>
<p>可以选择其中一种方式来自动化生成 Ansible 主机清单文件，并直接使用它来管理 100 台服务器，这里我自己推荐使用Shell方便快捷。</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/yuwen01/" target="_blank">xiao智</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/yuwen01/p/18737476" target="_blank">https://www.cnblogs.com/yuwen01/p/18737476</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.025086625431712962" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-25 23:44">2025-02-25 22:58</span>&nbsp;
<a href="https://www.cnblogs.com/yuwen01">xiao智</a>&nbsp;
阅读(<span id="post_view_count">14</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18737476" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18737476);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18737476', targetLink: 'https://www.cnblogs.com/yuwen01/p/18737476', title: 'Ansible 数百台批量操作前期准备工作' })">举报</a>
</div>
        