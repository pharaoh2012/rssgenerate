<!----> <meta itemprop="headline" content="我很好奇客户会用得懂这个组件吗"> <meta itemprop="keywords" content="前端,JavaScript,Vue.js"> <meta itemprop="datePublished" content="2024-12-08T09:58:19.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="岁月可贵"> <meta itemprop="url" content="https://juejin.cn/user/1258302989143437"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-fcbde74a="">
            我很好奇客户会用得懂这个组件吗
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-fcbde74a=""><div class="author-info-box" data-v-fcbde74a=""><div class="author-name" data-v-fcbde74a=""><a href="/user/1258302989143437/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-fcbde74a=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    岁月可贵
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-fcbde74a=""><time datetime="2024-12-08T09:58:19.000Z" title="Sun Dec 08 2024 09:58:19 GMT+0000 (Coordinated Universal Time)" class="time" data-v-fcbde74a="">
                    2024-12-08
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-fcbde74a=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-fcbde74a=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-fcbde74a=""></circle></svg> <span class="views-count" data-v-fcbde74a="">
                    12,223
                  </span> <span class="read-time" data-v-fcbde74a=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-fcbde74a=""><rect width="16" height="16" fill="none" data-v-fcbde74a=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-fcbde74a=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-fcbde74a=""></path></svg>
                    阅读19分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-fcbde74a=""></div> <!----> <!----></div> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-fcbde74a=""><div class="article-viewer markdown-body result"><h2 data-id="heading-0">一、前言</h2>
<p>我们是公司是搞内网安全的，会收集日常电脑操作行为数据。基于前期设置的预警策略，对收集到的数据进行汇总处理分析形成报表。</p>
<p>因此经常要对数据进行分析，会涉及到对多数据字段进行过滤处理。前期界面上基本都是多个单一字段做过滤处理，并没有考虑多字段做<strong>关系运算</strong>后在做过滤处理。</p>
<p>由此产品经理设计了下面的组件，我也不知道这个组件叫啥名🤣，暂且称它为 <strong>条件过滤树</strong></p>
<p>由于涉及到产品设计，原型图不方便贴出，但该组件是参考 <a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.sensorsdata.cn%2Fdemo%2Fdemo.html" target="_blank" title="https://www.sensorsdata.cn/demo/demo.html" ref="nofollow noopener noreferrer">神策数据</a>中的某个组件，大家可以去那里看看。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c55f50ff7fe048c3a1210b63a7489f20~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bKB5pyI5Y-v6LS1:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741753101&amp;x-signature=5gzGeOqBG1CplIzz9DaPVSb3gn4%3D" alt="2.png" loading="lazy"></p>
<p>一开始拿到手的时候，想着看看有没有写好的轮子，<a href="https://link.juejin.cn?target=https%3A%2F%2Funpkg.com%2F%40aligov%2Fformily-rule-tree%401.6.0%2Fbuild%2Findex.html" target="_blank" title="https://unpkg.com/@aligov/formily-rule-tree@1.6.0/build/index.html" ref="nofollow noopener noreferrer">有找到但技术栈不适合</a>，没办法只能硬写了🤣。</p>
<p>公司用的技术栈是 vue2，写完感觉就是在堆屎🤣，开发时间不够，一天硬搓出来，很多细节也没有细究，也是一个小 demo。</p>
<p>效果图：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/3c847d32b3304807b8093e696b9bdcb8~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bKB5pyI5Y-v6LS1:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741753101&amp;x-signature=dWEdKH4kmCJZizCQWjS5ULoApgA%3D" alt="1.jpg" loading="lazy"></p>
<p>后面比较闲，想着这个组件还是值去研究，去写好的。所以决定重新用 vue3（script setup）去重新封装（平时私下写 vue3 居多）。</p>
<p>顺便总结一下遇到问题，如有不对的地方或有更好的解决方案也请掘友们指出😁。
<img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/eb6f5892681b4438b85533ca07b585f2~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bKB5pyI5Y-v6LS1:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741753101&amp;x-signature=UJH%2FeGsyMmWN9EEa1KsOWkT1Snc%3D" alt="img" loading="lazy"></p>
<p>vue3 实现的效果图：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/87f2b06d89bf4b21a77d17215c5e7737~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bKB5pyI5Y-v6LS1:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741753101&amp;x-signature=xmKFTOM9ZMT9z3GwcLQr4SKb%2BEo%3D" alt="动画.gif" loading="lazy"></p>
<h2 data-id="heading-1">二、主要功能</h2>
<p><strong>条件过滤树</strong> 目前实现的功能点如下：</p>
<ul>
<li>实现 <strong>增加节点</strong>、<strong>删除节点</strong>、<strong>编辑节点</strong></li>
<li>实现 <strong>表单校验</strong></li>
<li>实现 <strong>自定义节点内容</strong></li>
</ul>
<h2 data-id="heading-2">三、设计思路</h2>
<h3 data-id="heading-3">3.1、数据结构</h3>
<p>一开始在公司自己设计的数据结构是这样的：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">const</span> form = {
   <span class="hljs-attr">relation</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 关系</span>
   <span class="hljs-attr">cond_child</span>: [
       {
         <span class="hljs-attr">relation</span>: <span class="hljs-number">2</span>,
         <span class="hljs-attr">cond_child</span>: [
            {
              <span class="hljs-attr">field</span>: <span class="hljs-string">'fileType'</span>, <span class="hljs-comment">// 操作字段</span>
              <span class="hljs-attr">oper</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 操作符</span>
              <span class="hljs-attr">value</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 值</span>
            },
            {
              <span class="hljs-attr">field</span>: <span class="hljs-string">'fileType'</span>, <span class="hljs-comment">// 操作字段</span>
              <span class="hljs-attr">oper</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 操作符</span>
              <span class="hljs-attr">value</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 值</span>
            }
         ]
       },
       {
          <span class="hljs-attr">field</span>: <span class="hljs-string">'operType'</span>, <span class="hljs-comment">// 操作字段</span>
          <span class="hljs-attr">oper</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">// 操作符</span>
          <span class="hljs-attr">value</span>: <span class="hljs-number">2</span> <span class="hljs-comment">// 值</span>
       }
   ] 
}
</code></pre>
<p>出现了几个问题😒：</p>
<ul>
<li>字段值 <code>value</code>: 只能定义一个值，如果出现多个值该如何处理</li>
<li>没有字段标记该字段 <code>field</code> 是支持什么形式的输入（<code>input</code>、<code>select</code>）</li>
</ul>
<p>前面俩个问题还好，主要是下面这个问题：</p>
<ul>
<li>没有字段可以判断该条件是否为 <strong>叶子节点</strong>，只能通过判断 <code>cond_child</code> 是否为空。这就引发了下面的问题</li>
</ul>
<p>如果当前 <code>form</code> 表单的数据如下：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">const</span> form = {
   <span class="hljs-attr">field</span>: <span class="hljs-string">'operType'</span>, <span class="hljs-comment">// 操作字段</span>
   <span class="hljs-attr">oper</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">// 操作符</span>
   <span class="hljs-attr">value</span>: <span class="hljs-number">2</span> <span class="hljs-comment">// 值</span>
}
</code></pre>
<p>在此条件下添加一个<strong>且</strong>的条件，数据结构则变成了：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">const</span> form = {
   <span class="hljs-attr">relation</span>: <span class="hljs-number">1</span>,
   <span class="hljs-attr">cond_children</span>: [
     {
       <span class="hljs-attr">field</span>: <span class="hljs-string">'operType'</span>, <span class="hljs-comment">// 操作字段</span>
       <span class="hljs-attr">oper</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">// 操作符</span>
       <span class="hljs-attr">value</span>: <span class="hljs-number">2</span> <span class="hljs-comment">// 值</span>
     },
     {
       <span class="hljs-attr">field</span>: <span class="hljs-string">'fileType'</span>, <span class="hljs-comment">// 操作字段</span>
       <span class="hljs-attr">oper</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">// 操作符</span>
       <span class="hljs-attr">value</span>: <span class="hljs-number">2</span> <span class="hljs-comment">// 值</span>
     }
   ]
}
</code></pre>
<p>这一切看上去也没什么问题，监听<code>addRule 事件</code>，修改 <code>this.form</code>。但界面没有重新渲染，<code>this.form</code> 数据是正确的。</p>
<p>大概代码如下：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">const</span> ruleItem = {
   <span class="hljs-attr">field</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">form</span>.<span class="hljs-property">field</span>,
   ....
}

<span class="hljs-comment">// 添加 cond_child 属性</span>
<span class="hljs-variable language_">this</span>.<span class="hljs-property">form</span>.<span class="hljs-property">cond_child</span> = [ruleItem, { <span class="hljs-comment">/* 新的规则 */</span>  }]

<span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">form</span>.<span class="hljs-property">field</span>; <span class="hljs-comment">// 删除没有的属性 </span>
</code></pre>
<p><strong>原因</strong>：vue2 监听的对象是 <code>this.form</code> 的引用，而我直接操作 <code>this.form</code> 修改，添加 <code>cond_children</code> 属性，导致监听不到。</p>
<p><strong>解决方法</strong>：使用 <code>vue.$set()</code> 和 <code>vue.$delete()</code> 。但觉得复杂了，我改掉 <code>this.form</code>引用不就解决了。</p>
<p>后面改成了如下代码：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// 拷贝一份数据</span>
<span class="hljs-keyword">const</span> data = <span class="hljs-title function_">cloneDeep</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">form</span>);
<span class="hljs-comment">// 对 data 进行修改</span>
....
<span class="hljs-comment">// 重新赋值给 form</span>
<span class="hljs-variable language_">this</span>.<span class="hljs-property">form</span> = data
</code></pre>
<p>问题解决👌。</p>
<p>由于出现了上面的问题， vue3 重新封装，重新定义一下数据结构。</p>
<p>✍️ 具体结构如下：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">const</span> formData = <span class="hljs-title function_">ref</span>({
  <span class="hljs-attr">is_leaf</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 是否为叶子节点</span>
  <span class="hljs-attr">relation</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 关系</span>
  <span class="hljs-attr">children</span>: [
    {
      <span class="hljs-attr">is_leaf</span>: <span class="hljs-literal">false</span>,
      <span class="hljs-attr">relation</span>: <span class="hljs-number">0</span>,
      <span class="hljs-attr">children</span>: [
        {
          <span class="hljs-attr">is_leaf</span>: <span class="hljs-literal">false</span>,
          <span class="hljs-attr">relation</span>: <span class="hljs-number">1</span>,
          <span class="hljs-attr">children</span>: [
            {
              <span class="hljs-attr">is_leaf</span>: <span class="hljs-literal">true</span>,
              <span class="hljs-attr">data</span>: {
                <span class="hljs-attr">filter_type</span>: <span class="hljs-string">'userBehavior'</span>, <span class="hljs-comment">// 字段</span>
                <span class="hljs-attr">oper_type</span>: <span class="hljs-number">1</span>,
                <span class="hljs-attr">content</span>: [<span class="hljs-string">''</span>], <span class="hljs-comment">// 内容</span>
              }
            },
            {
              <span class="hljs-attr">is_leaf</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 叶子节点</span>
              <span class="hljs-attr">data</span>: {
                <span class="hljs-attr">filter_type</span>: <span class="hljs-string">'fileType'</span>, <span class="hljs-comment">// 字段</span>
                <span class="hljs-attr">oper_type</span>: <span class="hljs-number">1</span>,
                <span class="hljs-attr">content</span>: [<span class="hljs-string">''</span>], <span class="hljs-comment">// 内容</span>
              }
            }
          ]
        },
        {
          <span class="hljs-attr">is_leaf</span>: <span class="hljs-literal">true</span>,
          <span class="hljs-attr">data</span>: {
            <span class="hljs-attr">filter_type</span>: <span class="hljs-string">'diskType'</span>, <span class="hljs-comment">// 字段</span>
            <span class="hljs-attr">oper_type</span>: <span class="hljs-number">1</span>,
            <span class="hljs-attr">content</span>: [<span class="hljs-string">''</span>], <span class="hljs-comment">// 内容</span>
          }
        }
      ]
    }
  ]
})
</code></pre>
<h3 data-id="heading-4">3.2、组件设计</h3>
<p>⚡目前设计是： <code>RuleTree (树)</code>、<code>RuleItem（结点）</code>、<code>index.vue（入口）</code></p>
<p>✍️ <strong>vue3 的调用使用方法</strong>：</p>
<pre><code class="hljs language-js" lang="js">&lt;template&gt;
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">RuleTree</span> <span class="hljs-attr">:rules</span>=<span class="hljs-string">"rules"</span> <span class="hljs-attr">v-model:form</span>=<span class="hljs-string">"data"</span> <span class="hljs-attr">:dataMap</span>=<span class="hljs-string">"dataMap"</span> /&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { reactive, ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">RuleTree</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/RuleTree/index'</span>
<span class="hljs-keyword">const</span> rules = <span class="hljs-title function_">ref</span>({}) <span class="hljs-comment">// 表单规则</span>
<span class="hljs-keyword">const</span> data = <span class="hljs-title function_">ref</span>({}) <span class="hljs-comment">// 规则数据</span>
<span class="hljs-keyword">const</span> dataMap = <span class="hljs-title function_">reactive</span>({ 
  <span class="hljs-attr">operList</span>: [], <span class="hljs-comment">// 操作符</span>
  <span class="hljs-attr">dataList</span>: [] <span class="hljs-comment">// 字段字典</span>
})
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
</code></pre>
<h3 data-id="heading-5">3.3、表单校验</h3>
<p>一开始使用 vue2 为了快😂，直接往 <strong>data</strong> 里面注入了错误信息，通过 <code>el-form-item</code> 的 <code>error</code> 进行显示</p>
<pre><code class="hljs language-javascript" lang="javascript">&lt;!-- ruleItem.<span class="hljs-property">vue</span> --&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">:error</span>=<span class="hljs-string">"rule.error"</span> <span class="hljs-attr">:prop</span>=<span class="hljs-string">"rule.filter_type"</span>&gt;</span>
<span class="hljs-comment">&lt;!-- 内容的显示 --&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span>
</code></pre>
<p>但后面发现了几个问题😒:</p>
<ul>
<li>必须手动去触发校验，没法通过 <code>trigger</code> 的形式使内部表单元素自动触发，这就使得跟其他表单组件有点出入</li>
<li>污染数据，需要在 <code>data</code> 注入 <code>error</code> 变量（用于标记校验信息）</li>
</ul>
<p>到了 vue3 这里，就没有使用上面的那种方式，而是配合 <code>el-form</code>、<code>el-form-item</code> 进行校验。</p>
<p>这里最大的问题：该组件是属于<strong>递归组件</strong>，如何通知到最底层的组件进行表单校验也是试了好多方法，一开始走了好多弯路。</p>
<p>后面接着细说。。。。</p>
<h3 data-id="heading-6">3.4、对节点的增加和删除</h3>
<p>这里最大的问题：除了上面提到的事件的传递外，还有如何确定节点的位置。</p>
<p>后面接着细说。。。。</p>
<h2 data-id="heading-7">四、开发过程</h2>
<h3 data-id="heading-8">4.1、数据驱动页面显示</h3>
<p>该部分主要解决的是能够根据数据在页面上能够展现出来。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/d729967ad4894cd8be6e9154740132a6~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bKB5pyI5Y-v6LS1:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741753101&amp;x-signature=H0nWvA3MRujxMQqAha6EtH39S8I%3D" alt="1.png" loading="lazy"></p>
<p>✍️ <strong>代码实现</strong></p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// RuleTree.vue </span>
&lt;template&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-tree"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"formData &amp;&amp; !formData.is_leaf &amp;&amp; formData.next.length != 0"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-item-container"</span>&gt;</span>
      
        <span class="hljs-comment">&lt;!-- 修改关系 --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"relation"</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"formData.next.length &gt;= 2"</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span>&gt;</span>且<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span>&gt;</span>或<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        
        <span class="hljs-comment">&lt;!-- 非叶子节点，往下接着递归 --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">RuleTree</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(cond, i) in formData.next"</span> <span class="hljs-attr">:formData</span>=<span class="hljs-string">"cond"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"i"</span> /&gt;</span>
        
      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-else</span>&gt;</span>
    
      <span class="hljs-comment">&lt;!-- 叶子节点 --&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">RuleItem</span> <span class="hljs-attr">:config</span>=<span class="hljs-string">"formData.data"</span>/&gt;</span>
      
    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { defineProps, inject } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">RuleItem</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./RuleItem'</span>
<span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>({
  <span class="hljs-attr">formData</span>: {
    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>,
    <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> ({})
  }
})
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
</code></pre>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// RuleItem.vue</span>
&lt;template&gt;
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{{ JSON.stringify(config) }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { defineProps } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>({
  <span class="hljs-attr">config</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>, <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> ({}) }
})
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
</code></pre>
<p>这部分没有遇到什么问题，顺利通过👌...</p>
<h3 data-id="heading-9">4.2、如何确定 <strong>ruleNode</strong> 在 <strong>ruleTree</strong> 的位置</h3>
<p>目前该组件设计之初并没有考虑到可以套多层节点，仅设计了套俩层。（后续完善成通过配置进行处理）</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/1b42947aec0041918601eb8091037bf6~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bKB5pyI5Y-v6LS1:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741753101&amp;x-signature=akNV7AI341864jGh2WMMgVz8UaM%3D" alt="1.png" loading="lazy"></p>
<p>这里通过三个参数来确定 <strong>runleNode</strong> 在 <strong>ruleTree</strong> 的位置:</p>
<ul>
<li><code>curDepth</code>: 当前层级</li>
<li><code>index</code>: 下标（当前层级下的 <code>next</code> 中数据 <code>config</code> 所在的位置）</li>
<li><code>branch</code>: 分支（只有 0， 1）仅设置了俩层</li>
</ul>
<p>✍️ <strong>代码实现</strong>：</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// RuleTree.vue </span>
&lt;template&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-tree"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"formData &amp;&amp; !formData.is_leaf &amp;&amp; formData.next.length != 0"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-item-container"</span>&gt;</span>
      
        <span class="hljs-comment">&lt;!-- 修改关系 --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"relation"</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"formData.next.length &gt;= 2"</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span>&gt;</span>且<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span>&gt;</span>或<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        
        <span class="hljs-comment">&lt;!-- 非叶子节点，往下接着递归 --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">RuleTree</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(cond, i) in formData.next"</span> <span class="hljs-attr">:formData</span>=<span class="hljs-string">"cond"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"i"</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">"i"</span> <span class="hljs-attr">:curDepth</span>=<span class="hljs-string">"curDepth + 1"</span>
          <span class="hljs-attr">:branch</span>=<span class="hljs-string">"curDepth === 0 ? i : branch"</span>/&gt;</span>
        
      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-else</span>&gt;</span>
    
      <span class="hljs-comment">&lt;!-- 叶子节点 --&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">RuleItem</span> <span class="hljs-attr">:config</span>=<span class="hljs-string">"formData.data"</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">"index"</span> <span class="hljs-attr">:showAddBtn</span>=<span class="hljs-string">"showAddBtn"</span> <span class="hljs-attr">:branch</span>=<span class="hljs-string">"branch"</span> <span class="hljs-attr">:curDepth</span>=<span class="hljs-string">"curDepth"</span>/&gt;</span>
      
    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { defineProps, inject } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">RuleItem</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./RuleItem'</span>
<span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>({
  <span class="hljs-attr">formData</span>: {
    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>,
    <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> ({})
  },
  <span class="hljs-attr">curDepth</span>: { <span class="hljs-comment">// 层级</span>
    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,
    <span class="hljs-attr">default</span>: <span class="hljs-number">0</span>
  },
  <span class="hljs-attr">branch</span>: { <span class="hljs-comment">// 分支</span>
    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,
    <span class="hljs-attr">default</span>: <span class="hljs-number">0</span>
  },
  <span class="hljs-attr">index</span>: { <span class="hljs-comment">// 下标</span>
    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,
    <span class="hljs-attr">default</span>: <span class="hljs-number">0</span>
  },
})
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
</code></pre>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// RuleItem.vue</span>
&lt;template&gt;
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{{ JSON.stringify(config) }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { defineProps } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>({
  <span class="hljs-attr">config</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>, <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> ({}) },
  <span class="hljs-attr">index</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>, <span class="hljs-attr">default</span>: <span class="hljs-number">0</span> },
  <span class="hljs-attr">branch</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>, <span class="hljs-attr">default</span>: <span class="hljs-number">0</span> },
  <span class="hljs-attr">curDepth</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>, <span class="hljs-attr">default</span>: <span class="hljs-number">0</span> }
})
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
</code></pre>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/9998f7c1a6584dbd9b244b1a7674e76e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bKB5pyI5Y-v6LS1:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741753101&amp;x-signature=HTS28Ztro6fKR5fA9qsA2u4iJAc%3D" alt="1.png" loading="lazy"></p>
<h3 data-id="heading-10">4.3、如何进行增删</h3>
<p>上面已经确定好了三个参数，这里需要在 <strong>ruleItem</strong> 层级将事件进行抛出。现在问题是要抛到那一层，一开始是抛到了 <code>ruleTree</code> 层。</p>
<p>后面发现在 <code>ruleTree</code> 修改数据结构时（增加、删除节点），由于 <code>上层 index</code>(组件的入口文件)并没有进行双向数据绑定，导致数据没有同步到该层级。</p>
<pre><code class="hljs language-js" lang="js">&lt;template&gt;
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">RuleTree</span> <span class="hljs-attr">:formData</span>=<span class="hljs-string">"form"</span> /&gt;</span></span>
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"addRuleByTree"</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">"Plus"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span>
&lt;/template&gt;
</code></pre>
<p>因此，就设计成了将事件抛到<code>组件入口 index</code> 层级。 <code>ruleTree</code> 和 <code>ruleItem</code> 仅做数据层面的渲染以及事件的抛出。</p>
<p>这又有一个问题，由于上面事件抛出又多了加了一层：</p>
<ul>
<li>
<p>原本：<code>孙（ruleItem）</code> 抛给 <code>子（ruleTree）</code> 即可</p>
</li>
<li>
<p>现在：<code>孙（ruleItem）</code> 经过 <code>子（ruleTree）</code>，在抛给<code>父（index）</code></p>
</li>
</ul>
<p>vue2：使用的是事件总线的方式在 <strong>ruleItem</strong> 直接将参数（<code>curDeth</code>、<code>index</code>、<code>depth</code>）抛给了<code>index</code></p>
<blockquote>
<p>之所以采用事件总线，一开始是使用 emit 一层层往外抛事件的，但在开发过程中发现，对于<strong>递归组件</strong>偶尔事件在 <strong>index 层级</strong>没有接收到，后面因为时间问题，也没有去细究就使用了事件总线的方式。</p>
<p>缺点：<strong>组件挂载后需要监听事件，销毁后需要注销事件</strong></p>
</blockquote>
<p>vue3：这里则使用的是依赖注入（ provide, inject ）的方式，在 <strong>ruleItem</strong> 通过 emits 事件抛给<strong>ruleTree</strong>，拿到参数后，在调用 inject 方法触发事件。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/02d428fc27fc4cf388ed56be86aeb181~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bKB5pyI5Y-v6LS1:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741753101&amp;x-signature=4OV%2Fd5vS0VDkyuxTMsnwG2TjcfM%3D" alt="1.png" loading="lazy"></p>
<blockquote>
<p>事件抛出也可以绕过 <strong>RuleTree</strong>，直接抛到 <strong>index</strong>。</p>
<p>这里只不过说修改 <code>relation</code> 是在 <code>RuleTree</code> 抛给了 <code>index</code>。</p>
<p>为了统一所以增加删除节点才通过 <strong>RuleTree</strong> 在抛出。</p>
</blockquote>
<p><strong>代码实现</strong></p>
<p>1、✍️ 添加节点</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 添加节点</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">addRule</span> = (<span class="hljs-params">params</span>) =&gt; {
  <span class="hljs-keyword">const</span> { depth, index, branch } = params
  <span class="hljs-keyword">let</span> data = <span class="hljs-title function_">cloneDeep</span>(props.<span class="hljs-property">form</span>)
  <span class="hljs-keyword">const</span> isAddLayer = depth === <span class="hljs-number">0</span>
  <span class="hljs-keyword">let</span> customRule = ruleNode.<span class="hljs-property">value</span>
  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> props.<span class="hljs-property">addRules</span> === <span class="hljs-string">'function'</span>) {
    <span class="hljs-keyword">const</span> res = props.<span class="hljs-title function_">addRules</span>()
    <span class="hljs-keyword">if</span> (res) customRule = res
  }

  <span class="hljs-keyword">const</span> <span class="hljs-title function_">addRuleNode</span> = (<span class="hljs-params">obj, depth, i, branch</span>) =&gt; {
    <span class="hljs-keyword">if</span> (depth === <span class="hljs-number">0</span>) {
      <span class="hljs-comment">// 到达对应层级</span>
      <span class="hljs-keyword">if</span> (isAddLayer) {
        <span class="hljs-keyword">const</span> clickRule = <span class="hljs-title function_">cloneDeep</span>(obj.<span class="hljs-property">next</span>[i].<span class="hljs-property">data</span>)

        obj.<span class="hljs-property">next</span>[i].<span class="hljs-property">relation</span> = <span class="hljs-number">1</span>
        obj.<span class="hljs-property">next</span>[i].<span class="hljs-property">is_leaf</span> = <span class="hljs-literal">false</span>
        obj.<span class="hljs-property">next</span>[i].<span class="hljs-property">next</span> = [{
          <span class="hljs-attr">is_leaf</span>: <span class="hljs-literal">true</span>,
          <span class="hljs-attr">data</span>: {
            ...clickRule
          }
        }, customRule]
      } <span class="hljs-keyword">else</span> {
        i++
        obj.<span class="hljs-property">next</span>.<span class="hljs-title function_">splice</span>(i, <span class="hljs-number">0</span>, customRule)
      }
      <span class="hljs-keyword">return</span>
    }

    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(obj.<span class="hljs-property">next</span>)) {
      <span class="hljs-keyword">if</span> (<span class="hljs-title function_">addRuleNode</span>(obj.<span class="hljs-property">next</span>[branch], depth - <span class="hljs-number">1</span>, i)) {
        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>
      }
    }
  }
  <span class="hljs-title function_">addRuleNode</span>(data, depth, index, branch)
  <span class="hljs-title function_">emits</span>(<span class="hljs-string">'update:form'</span>, data)
}
</code></pre>
<p>2、✍️ 删除节点</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 删除节点</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">delRule</span> = (<span class="hljs-params">params</span>) =&gt; {
  <span class="hljs-keyword">const</span> { depth, index, branch } = params
  <span class="hljs-keyword">let</span> data = <span class="hljs-title function_">cloneDeep</span>(props.<span class="hljs-property">form</span>)
  <span class="hljs-keyword">const</span> <span class="hljs-title function_">delRuleNode</span> = (<span class="hljs-params">obj, depth, i, branch</span>) =&gt; {
    <span class="hljs-comment">// 如果已经到达目标层级</span>
    <span class="hljs-keyword">if</span> (depth === <span class="hljs-number">0</span>) {
      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(obj.<span class="hljs-property">next</span>) &amp;&amp; obj.<span class="hljs-property">next</span>.<span class="hljs-property">length</span> &gt; i) {
        <span class="hljs-comment">// 删除指定下标的对象</span>
        obj.<span class="hljs-property">next</span>.<span class="hljs-title function_">splice</span>(i, <span class="hljs-number">1</span>)
        <span class="hljs-keyword">if</span> (obj.<span class="hljs-property">next</span>.<span class="hljs-property">length</span> === <span class="hljs-number">1</span> &amp;&amp; obj.<span class="hljs-property">next</span>[<span class="hljs-number">0</span>].<span class="hljs-property">is_leaf</span>) { <span class="hljs-comment">// 变成叶子结点</span>
          obj.<span class="hljs-property">is_leaf</span> = <span class="hljs-literal">true</span>
          obj.<span class="hljs-property">data</span> = obj.<span class="hljs-property">next</span>[<span class="hljs-number">0</span>].<span class="hljs-property">data</span>
          obj.<span class="hljs-property">next</span> = []
        }
        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> <span class="hljs-comment">// 删除成功</span>
      }
      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> <span class="hljs-comment">// 删除失败</span>
    }

    <span class="hljs-comment">// 如果还没到达目标层级，继续递归</span>
    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(obj.<span class="hljs-property">next</span>)) {
      <span class="hljs-keyword">if</span> (<span class="hljs-title function_">delRuleNode</span>(obj.<span class="hljs-property">next</span>[branch], depth - <span class="hljs-number">1</span>, i)) {
        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>
      }
    }
  }

  data.<span class="hljs-property">is_leaf</span> ? data = {} : <span class="hljs-title function_">delRuleNode</span>(data, depth, index, branch)
  data = <span class="hljs-title function_">formatForm</span>(data) <span class="hljs-comment">// 调整数据结构，后面【注意】会细讲</span>
  <span class="hljs-title function_">emits</span>(<span class="hljs-string">'update:form'</span>, data)
}
</code></pre>
<p><strong>注意</strong> 删除节点后可能会出现下面这种情况：</p>
<p>原本：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/4e6259d99eb64ed3bacaa8ed3ab41275~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bKB5pyI5Y-v6LS1:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741753101&amp;x-signature=PE8HD60M85cZUz4gQ7kIKsSyXkY%3D" alt="2.png" loading="lazy"></p>
<p>删除节点后：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/52e414bc4d3842329d41cd2b0ae15f10~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bKB5pyI5Y-v6LS1:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741753101&amp;x-signature=UbwQdqzotX1zhseFwaxKEFp2Fxc%3D" alt="2.png" loading="lazy"></p>
<p>删除后数据结构：</p>
<pre><code class="hljs language-js" lang="js">{
    <span class="hljs-string">"is_leaf"</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-string">"data"</span>: {},
    <span class="hljs-string">"next"</span>: [
        {
            <span class="hljs-string">"is_leaf"</span>: <span class="hljs-literal">false</span>,
            <span class="hljs-string">"data"</span>: {
                <span class="hljs-string">"filter_type"</span>: <span class="hljs-string">"operType"</span>,
                <span class="hljs-string">"opr_type"</span>: <span class="hljs-number">1</span>,
                <span class="hljs-string">"content"</span>: []
            },
            <span class="hljs-string">"relation"</span>: <span class="hljs-number">1</span>,
            <span class="hljs-string">"next"</span>: [
                {
                    <span class="hljs-string">"is_leaf"</span>: <span class="hljs-literal">true</span>,
                    <span class="hljs-string">"data"</span>: {
                        <span class="hljs-string">"filter_type"</span>: <span class="hljs-string">"operType"</span>,
                        <span class="hljs-string">"opr_type"</span>: <span class="hljs-number">1</span>,
                        <span class="hljs-string">"content"</span>: []
                    }
                },
                {
                    <span class="hljs-string">"is_leaf"</span>: <span class="hljs-literal">true</span>,
                    <span class="hljs-string">"data"</span>: {
                        <span class="hljs-string">"filter_type"</span>: <span class="hljs-string">"operType"</span>,
                        <span class="hljs-string">"opr_type"</span>: <span class="hljs-number">1</span>,
                        <span class="hljs-string">"content"</span>: []
                    }
                }
            ]
        }
    ],
    <span class="hljs-string">"relation"</span>: <span class="hljs-number">1</span>
}
</code></pre>
<p>查看数据结构，组件的渲染是没有问题，这部分在渲染<code>且或</code>操作符时，需要判断当前的 <code>next</code> 长度是否为大于 1</p>
<pre><code class="hljs language-js" lang="js">&lt;template v-<span class="hljs-keyword">if</span>=<span class="hljs-string">"formData &amp;&amp; !formData.is_leaf &amp;&amp; formData.next.length != 0"</span>&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-item-container"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"relation"</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"formData.next.length &gt;= 2"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"+formData.relation === 1 ? 'active' : ''"</span>
        @<span class="hljs-attr">click</span>=<span class="hljs-string">"changeRelation(1)"</span>&gt;</span>且<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"+formData.relation === 2 ? 'active' : ''"</span>
        @<span class="hljs-attr">click</span>=<span class="hljs-string">"changeRelation(2)"</span>&gt;</span>或<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">RuleTree</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(cond, i) in formData.next"</span> <span class="hljs-attr">:formData</span>=<span class="hljs-string">"cond"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"i"</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">"i"</span> <span class="hljs-attr">:curDepth</span>=<span class="hljs-string">"curDepth + 1"</span>
      <span class="hljs-attr">:branch</span>=<span class="hljs-string">"curDepth === 0 ? i : branch"</span> <span class="hljs-attr">:showAddBtn</span>=<span class="hljs-string">"showAddBtn"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">"slotProps"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"slotProps"</span> /&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">RuleTree</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
&lt;/template&gt;
</code></pre>
<p>界面显示是小问题，问题是该数据结构是要发送给到后端的，<code>relation</code> 标记了同级目录下的 <code>next</code>中所有条件的关系，但 <code>next</code> 只有一个。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/b88435884f124c6797de9fed7f86c646~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bKB5pyI5Y-v6LS1:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741753101&amp;x-signature=fe%2F%2F%2Fu0X6rIg9eCmESCCimDgoGw%3D" alt="2.png" loading="lazy"></p>
<p>这里觉得不是很好，因此这里删除节点后，又对数据结构的层级做了格式化的操作</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">formatForm</span> = (<span class="hljs-params">data</span>) =&gt; {
  <span class="hljs-keyword">if</span> (!data.<span class="hljs-property">is_leaf</span>) {
    <span class="hljs-keyword">if</span> (data.<span class="hljs-property">next</span> &amp;&amp; data.<span class="hljs-property">next</span>.<span class="hljs-property">length</span> === <span class="hljs-number">1</span>) {
      data = data.<span class="hljs-property">next</span>[<span class="hljs-number">0</span>]
      <span class="hljs-keyword">return</span> data
    }
    <span class="hljs-keyword">return</span> data
  }
  <span class="hljs-keyword">return</span> data
}
</code></pre>
<p>因为这里的组件设计只能套俩层，故只要处理上面这种情况即可。</p>
<p>3、✍️ provide inject 事件的注入</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// index.vue</span>
&lt;template&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tree"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">RuleTree</span> <span class="hljs-attr">:formData</span>=<span class="hljs-string">"form"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">RuleTree</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"addRuleByTree"</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">"Plus"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { ref, defineProps, defineEmits, defineExpose, provide, watch, computed } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">RuleTree</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./RuleTree'</span>
<span class="hljs-keyword">import</span> { cloneDeep } <span class="hljs-keyword">from</span> <span class="hljs-string">'lodash'</span>
<span class="hljs-keyword">const</span> emits = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">'update:form'</span>])
<span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>({
  <span class="hljs-attr">form</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>, <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> ({}) },
  <span class="hljs-attr">rules</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>, <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> ({}) },
  <span class="hljs-attr">addRules</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Function</span>, <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> { } },
  <span class="hljs-attr">depth</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>, <span class="hljs-attr">default</span>: <span class="hljs-number">2</span> }
})

<span class="hljs-comment">// 添加节点</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">addRule</span> = (<span class="hljs-params">params</span>) =&gt; {}

<span class="hljs-comment">// 删除节点</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">delRule</span> = (<span class="hljs-params">params</span>) =&gt; {}

<span class="hljs-comment">// 修改关系 （跟只有俩层，比较简单，不做更多描述）</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">changeRelation</span> = (<span class="hljs-params">params</span>) =&gt; {
  <span class="hljs-keyword">const</span> { value, depth, branch } = params
  <span class="hljs-keyword">const</span> data = <span class="hljs-title function_">cloneDeep</span>(props.<span class="hljs-property">form</span>)
  <span class="hljs-keyword">if</span> (depth === <span class="hljs-number">0</span>) {
    data.<span class="hljs-property">relation</span> = value
  } <span class="hljs-keyword">else</span> {
    data.<span class="hljs-property">next</span>[branch].<span class="hljs-property">relation</span> = value
  }
  <span class="hljs-title function_">emits</span>(<span class="hljs-string">'update:form'</span>, data)
}

<span class="hljs-comment">// 调整数据结构</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">formatForm</span> = (<span class="hljs-params">data</span>) =&gt; {
  <span class="hljs-keyword">if</span> (!data.<span class="hljs-property">is_leaf</span>) {
    <span class="hljs-keyword">if</span> (data.<span class="hljs-property">next</span> &amp;&amp; data.<span class="hljs-property">next</span>.<span class="hljs-property">length</span> === <span class="hljs-number">1</span>) {
      data = data.<span class="hljs-property">next</span>[<span class="hljs-number">0</span>]
      <span class="hljs-keyword">return</span> data
    }
    <span class="hljs-keyword">return</span> data
  }
  <span class="hljs-keyword">return</span> data
}

<span class="hljs-comment">// 注入</span>
<span class="hljs-title function_">provide</span>(<span class="hljs-string">'addRule'</span>, addRule)
<span class="hljs-title function_">provide</span>(<span class="hljs-string">'delRule'</span>, delRule)
<span class="hljs-title function_">provide</span>(<span class="hljs-string">'changeRelation'</span>, changeRelation)

</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>

</code></pre>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// ruleTree.vue</span>
&lt;template&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-tree"</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">"curDepth &gt; 0 ? { paddingLeft: '60px' } : {}"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"formData &amp;&amp; !formData.is_leaf &amp;&amp; formData.next.length != 0"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-item-container"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"relation"</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"formData.next.length &gt;= 2"</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"+formData.relation === 1 ? 'active' : ''"</span>
            @<span class="hljs-attr">click</span>=<span class="hljs-string">"changeRelation(1)"</span>&gt;</span>且<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"+formData.relation === 2 ? 'active' : ''"</span>
            @<span class="hljs-attr">click</span>=<span class="hljs-string">"changeRelation(2)"</span>&gt;</span>或<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">RuleTree</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(cond, i) in formData.next"</span> <span class="hljs-attr">:formData</span>=<span class="hljs-string">"cond"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"i"</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">"i"</span> <span class="hljs-attr">:curDepth</span>=<span class="hljs-string">"curDepth + 1"</span>
          <span class="hljs-attr">:branch</span>=<span class="hljs-string">"curDepth === 0 ? i : branch"</span> <span class="hljs-attr">:showAddBtn</span>=<span class="hljs-string">"showAddBtn"</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">RuleTree</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-else</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">RuleItem</span> <span class="hljs-attr">:config</span>=<span class="hljs-string">"formData.data"</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">"index"</span> <span class="hljs-attr">:showAddBtn</span>=<span class="hljs-string">"showAddBtn"</span> <span class="hljs-attr">:branch</span>=<span class="hljs-string">"branch"</span> <span class="hljs-attr">:curDepth</span>=<span class="hljs-string">"curDepth"</span>
        @<span class="hljs-attr">addRule</span>=<span class="hljs-string">"addRule"</span> @<span class="hljs-attr">delRule</span>=<span class="hljs-string">"delRule"</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">RuleItem</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { defineProps, inject } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">RuleItem</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./RuleItem'</span>
<span class="hljs-keyword">const</span> changeRelationFuncInject = <span class="hljs-title function_">inject</span>(<span class="hljs-string">'changeRelation'</span>)
<span class="hljs-keyword">const</span> addRuleFuncInject = <span class="hljs-title function_">inject</span>(<span class="hljs-string">'addRule'</span>)
<span class="hljs-keyword">const</span> delRuleFuncInject = <span class="hljs-title function_">inject</span>(<span class="hljs-string">'delRule'</span>)
<span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>({
  <span class="hljs-attr">formData</span>: {
    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>,
    <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> ({})
  },
  <span class="hljs-attr">curDepth</span>: { <span class="hljs-comment">// 层级</span>
    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,
    <span class="hljs-attr">default</span>: <span class="hljs-number">0</span>
  },
  <span class="hljs-attr">branch</span>: { <span class="hljs-comment">// 分支</span>
    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,
    <span class="hljs-attr">default</span>: <span class="hljs-number">0</span>
  },
  <span class="hljs-attr">index</span>: { <span class="hljs-comment">// 下标</span>
    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,
    <span class="hljs-attr">default</span>: <span class="hljs-number">0</span>
  },
  <span class="hljs-attr">showAddBtn</span>: {
    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Boolean</span>,
    <span class="hljs-attr">default</span>: <span class="hljs-literal">false</span>
  }
})

<span class="hljs-keyword">const</span> <span class="hljs-title function_">changeRelation</span> = (<span class="hljs-params">value</span>) =&gt; {
  <span class="hljs-title function_">changeRelationFuncInject</span>({
    <span class="hljs-attr">depth</span>: props.<span class="hljs-property">curDepth</span>,
    <span class="hljs-attr">branch</span>: props.<span class="hljs-property">branch</span>,
    value
  })
}

<span class="hljs-keyword">const</span> <span class="hljs-title function_">addRule</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-title function_">addRuleFuncInject</span>({
    <span class="hljs-attr">branch</span>: props.<span class="hljs-property">branch</span>,
    <span class="hljs-attr">depth</span>: props.<span class="hljs-property">curDepth</span> - <span class="hljs-number">1</span>,
    <span class="hljs-attr">index</span>: props.<span class="hljs-property">index</span>
  })
}

<span class="hljs-keyword">const</span> <span class="hljs-title function_">delRule</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-title function_">delRuleFuncInject</span>({
    <span class="hljs-attr">branch</span>: props.<span class="hljs-property">branch</span>,
    <span class="hljs-attr">depth</span>: props.<span class="hljs-property">curDepth</span> - <span class="hljs-number">1</span>,
    <span class="hljs-attr">index</span>: props.<span class="hljs-property">index</span>
  })
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
</code></pre>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// ruleItem.vue</span>
&lt;template&gt;
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-item"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-node"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{{ JSON.stringify(config) }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"oper-btn"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"showAddBtn"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"addRule"</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"delRule"</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { defineProps, defineEmits, watch, ref, inject, onMounted, computed } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">const</span> emits = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">'addRule'</span>, <span class="hljs-string">'delRule'</span>])
<span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>({
  <span class="hljs-attr">config</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>, <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> ({}) },
  <span class="hljs-attr">index</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>, <span class="hljs-attr">default</span>: <span class="hljs-number">0</span> },
  <span class="hljs-attr">showAddBtn</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Boolean</span>, <span class="hljs-attr">default</span>: <span class="hljs-literal">false</span> },
  <span class="hljs-attr">branch</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>, <span class="hljs-attr">default</span>: <span class="hljs-number">0</span> },
  <span class="hljs-attr">curDepth</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>, <span class="hljs-attr">default</span>: <span class="hljs-number">0</span> }
})

<span class="hljs-keyword">const</span> <span class="hljs-title function_">addRule</span> = (<span class="hljs-params"></span>) =&gt;  <span class="hljs-title function_">emits</span>(<span class="hljs-string">'addRule'</span>)
<span class="hljs-keyword">const</span> <span class="hljs-title function_">delRule</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">emits</span>(<span class="hljs-string">'delRule'</span>)
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
</code></pre>
<h3 data-id="heading-11">4.4、如何自定义内容</h3>
<p>该部分使用的是<strong>插槽</strong>的形式进行实现的，这里考虑到需要 <code>增加删除节点</code>，如果由上层去定位节点位置可能会比较麻烦。</p>
<ul>
<li>上层通过 id 去定位可能就不会很复杂</li>
</ul>
<p>故：内部使用插槽时除了将数据抛出外，还好会将<code>增加节点</code>、<code>删除节点</code>事件方法抛出，由上层自行决定是否使用。</p>
<p>✍️ <strong>代码实现</strong></p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// RuleTree.vue</span>
&lt;template&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-tree"</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">"curDepth &gt; 0 ? { paddingLeft: '60px' } : {}"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"formData &amp;&amp; !formData.is_leaf &amp;&amp; formData.next.length != 0"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-item-container"</span>&gt;</span>
      
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"relation"</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"formData.next.length &gt;= 2"</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"+formData.relation === 1 ? 'active' : ''"</span>
            @<span class="hljs-attr">click</span>=<span class="hljs-string">"changeRelation(1)"</span>&gt;</span>且<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"+formData.relation === 2 ? 'active' : ''"</span>
            @<span class="hljs-attr">click</span>=<span class="hljs-string">"changeRelation(2)"</span>&gt;</span>或<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        
        <span class="hljs-tag">&lt;<span class="hljs-name">RuleTree</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(cond, i) in formData.next"</span> <span class="hljs-attr">:formData</span>=<span class="hljs-string">"cond"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"i"</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">"i"</span> <span class="hljs-attr">:curDepth</span>=<span class="hljs-string">"curDepth + 1"</span>
          <span class="hljs-attr">:branch</span>=<span class="hljs-string">"curDepth === 0 ? i : branch"</span> <span class="hljs-attr">:showAddBtn</span>=<span class="hljs-string">"showAddBtn"</span>&gt;</span>
          
          <span class="hljs-comment">&lt;!-- 插槽 --&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">"slotProps"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"slotProps"</span> /&gt;</span>
          <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
          
        <span class="hljs-tag">&lt;/<span class="hljs-name">RuleTree</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-else</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">RuleItem</span> <span class="hljs-attr">:config</span>=<span class="hljs-string">"formData.data"</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">"index"</span> <span class="hljs-attr">:showAddBtn</span>=<span class="hljs-string">"showAddBtn"</span> <span class="hljs-attr">:branch</span>=<span class="hljs-string">"branch"</span> <span class="hljs-attr">:curDepth</span>=<span class="hljs-string">"curDepth"</span>
        @<span class="hljs-attr">addRule</span>=<span class="hljs-string">"addRule"</span> @<span class="hljs-attr">delRule</span>=<span class="hljs-string">"delRule"</span>&gt;</span>
        
         <span class="hljs-comment">&lt;!-- 插槽 --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">"slotProps"</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"slotProps"</span> /&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
        
      <span class="hljs-tag">&lt;/<span class="hljs-name">RuleItem</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { defineProps } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">RuleItem</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./RuleItem'</span>
<span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>({
  <span class="hljs-attr">formData</span>: {
    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>,
    <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> ({})
  },
  <span class="hljs-attr">curDepth</span>: { <span class="hljs-comment">// 层级</span>
    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,
    <span class="hljs-attr">default</span>: <span class="hljs-number">0</span>
  },
  <span class="hljs-attr">branch</span>: { <span class="hljs-comment">// 分支</span>
    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,
    <span class="hljs-attr">default</span>: <span class="hljs-number">0</span>
  },
  <span class="hljs-attr">index</span>: { <span class="hljs-comment">// 下标</span>
    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,
    <span class="hljs-attr">default</span>: <span class="hljs-number">0</span>
  },
  <span class="hljs-attr">showAddBtn</span>: {
    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Boolean</span>,
    <span class="hljs-attr">default</span>: <span class="hljs-literal">false</span>
  }
})
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
</code></pre>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// ruleItem.vue</span>
&lt;template&gt;
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">"config"</span> <span class="hljs-attr">:addRule</span>=<span class="hljs-string">"addRule"</span> <span class="hljs-attr">:delRule</span>=<span class="hljs-string">"delRule"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-item"</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-node"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{{ JSON.stringify(config) }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"oper-btn"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"showAddBtn"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"addRule"</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"delRule"</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { defineProps, defineEmits, watch, ref, inject, onMounted, computed } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">const</span> emits = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">'addRule'</span>, <span class="hljs-string">'delRule'</span>])
<span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>({
  <span class="hljs-attr">config</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>, <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> ({}) },
  <span class="hljs-attr">index</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>, <span class="hljs-attr">default</span>: <span class="hljs-number">0</span> },
  <span class="hljs-attr">showAddBtn</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Boolean</span>, <span class="hljs-attr">default</span>: <span class="hljs-literal">false</span> },
  <span class="hljs-attr">branch</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>, <span class="hljs-attr">default</span>: <span class="hljs-number">0</span> },
  <span class="hljs-attr">curDepth</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>, <span class="hljs-attr">default</span>: <span class="hljs-number">0</span> }
})

<span class="hljs-keyword">const</span> <span class="hljs-title function_">addRule</span> = (<span class="hljs-params"></span>) =&gt;  <span class="hljs-title function_">emits</span>(<span class="hljs-string">'addRule'</span>)
<span class="hljs-keyword">const</span> <span class="hljs-title function_">delRule</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">emits</span>(<span class="hljs-string">'delRule'</span>)
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
</code></pre>
<h3 data-id="heading-12">4.5、如何进行表单校验</h3>
<p>由于是配合<code>el-form</code> 和 <code>el-form-item</code>进行使用的，这里的第一个问题是：</p>
<ul>
<li>这个两个组件是要套在哪个位置上最为合适，一开始我是套在 <code>RuleTree</code></li>
</ul>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// RuleTree</span>
&lt;template&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-tree"</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">"curDepth &gt; 0 ? { paddingLeft: '60px' } : {}"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"formData &amp;&amp; !formData.is_leaf &amp;&amp; formData.next.length != 0"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-item-container"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span>&gt;</span>
           <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span>
             <span class="hljs-tag">&lt;<span class="hljs-name">RuleTree</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(cond, i) in formData.next"</span> <span class="hljs-attr">:formData</span>=<span class="hljs-string">"cond"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"i"</span>/&gt;</span>
           <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-else</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">RuleItem</span> <span class="hljs-attr">:config</span>=<span class="hljs-string">"formData.data"</span> /&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
&lt;/template&gt;
</code></pre>
<p>之所以放到这里是想着一个<strong>子树</strong> 对应一个表单，但这里就发现了一个问题，又出现了<strong>递归现象</strong>（<code>el-form-item </code> 套 <code>el-form</code>）一直循环套下去，如果后续层级修改成可配置则递归的层级会更深。</p>
<p>而且如果出现<strong>递归现象</strong>，上层要通知底层组件进行校验也很麻烦（<code>el-form</code>校验的方式是通过 <code>ref</code>）</p>
<p>经过考虑后：将 <code>el-form</code> 和 <code>el-form-item</code> 放到 <strong>RuleItem</strong>。</p>
<p>放到这里的好处：</p>
<ul>
<li>收集表单<code>ref</code> 比较好收集</li>
<li>表单需要绑定数据，在这一层拿到的这个节点的数据比较简单</li>
</ul>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// RuleItem.vue</span>
&lt;template&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"formRef"</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">"config"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"content"</span> <span class="hljs-attr">:rules</span>=<span class="hljs-string">"rules[config.filter_type]"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-item"</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-node"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{{ JSON.stringify(config) }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"oper-btn"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"showAddBtn"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"addRule"</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"delRule"</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span></span>  
&lt;/template&gt;
</code></pre>
<p>到这里，就能实现通过配置 <code>trigger</code> 实现表单组件自动触发校验。</p>
<p>接下来：上层需要通过 <code>ref</code> 去触发校验，代码如下：</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 调用方</span>
&lt;template&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">RuleTree</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"ruleTreeRef"</span> <span class="hljs-attr">:rules</span>=<span class="hljs-string">"rules"</span> <span class="hljs-attr">v-model:form</span>=<span class="hljs-string">"formData"</span> <span class="hljs-attr">:dataMap</span>=<span class="hljs-string">"dataMap"</span> /&gt;</span></span>
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"validate"</span>&gt;</span>校验<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { reactive, ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">RuleTree</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/RuleTree/index'</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">ElMessage</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'element-plus'</span>

<span class="hljs-keyword">const</span> <span class="hljs-title function_">isNotEmpty</span> = (<span class="hljs-params">rule, value, callback</span>) =&gt; {
  <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-title function_">callback</span>()
  <span class="hljs-keyword">return</span> <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">'不能为空'</span>))
}

<span class="hljs-keyword">const</span> dataMap = <span class="hljs-title function_">reactive</span>({}) <span class="hljs-comment">// 不重要</span>

<span class="hljs-keyword">const</span> formData = <span class="hljs-title function_">ref</span>({})
<span class="hljs-comment">// 表单规则（el-form 一致）</span>
<span class="hljs-keyword">const</span> rules = <span class="hljs-title function_">ref</span>({
  <span class="hljs-attr">userBehavior</span>: [
    { <span class="hljs-attr">validator</span>: isNotEmpty, <span class="hljs-attr">trigger</span>: <span class="hljs-string">'change'</span> }
  ],

  <span class="hljs-attr">fileSize</span>: [
    { <span class="hljs-attr">validator</span>: isNotEmpty, <span class="hljs-attr">trigger</span>: <span class="hljs-string">'blur'</span> }
  ],
  <span class="hljs-attr">operType</span>: [
    {
      <span class="hljs-attr">validator</span>: <span class="hljs-function">(<span class="hljs-params">rule, value, callback</span>) =&gt;</span> {
        <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">1</span>) <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">'长度需要大于 1'</span>))
        <span class="hljs-keyword">return</span> <span class="hljs-title function_">callback</span>()
      },
      <span class="hljs-attr">trigger</span>: <span class="hljs-string">'blur'</span>
    }
  ]
})

<span class="hljs-comment">// 校验</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">validate</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; {
  ruleTreeRef.<span class="hljs-property">value</span>.<span class="hljs-title function_">validate</span>(<span class="hljs-function">(<span class="hljs-params">valid</span>) =&gt;</span> {
    <span class="hljs-keyword">if</span> (valid) <span class="hljs-keyword">return</span> <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">success</span>(<span class="hljs-string">'校验通过'</span>)
    <span class="hljs-keyword">return</span> <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'校验失败'</span>)
  })
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
</code></pre>
<p>这里很明显在 <strong>组件入口文件 index</strong> 中需要提供 <code>validate</code> 方法供上层触发校验。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// index.vue</span>
&lt;script setup&gt;
<span class="hljs-keyword">import</span> { defineExpose } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">validate</span> = (<span class="hljs-params">callback</span>) =&gt; {
  <span class="hljs-comment">// TODO 这里需要通知 RuleItem 触发校验，并把结果返回</span>
  
  <span class="hljs-comment">// TODO 汇总所有结果，将最终的校验结果给到上层</span>
}

<span class="hljs-title function_">defineExpose</span>({ validate })
&lt;/script&gt;
</code></pre>
<p>一开始想怎么通知 <code>ruleItem</code> 触发校验也是想了很久，这里是有组件递归的现象。</p>
<p>后面想到可以通过 <code>provide、inject</code>先收集到所有 <code>el-form</code>对象保存到数组中，手动触发校验时遍历该数组进行校验即可。</p>
<p>✍️ <strong>代码实现</strong></p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// index.vue</span>
&lt;script setup&gt;
<span class="hljs-keyword">import</span> { defineExpose, provide, ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>

<span class="hljs-keyword">const</span> ruleNodeList = <span class="hljs-title function_">ref</span>([])
<span class="hljs-keyword">const</span> <span class="hljs-title function_">collectRuleNode</span> = (<span class="hljs-params">ruleNode</span>) =&gt; {
  ruleNodeList.<span class="hljs-property">value</span>.<span class="hljs-title function_">push</span>(ruleNode)
}

<span class="hljs-keyword">const</span> <span class="hljs-title function_">validate</span> = (<span class="hljs-params">callback</span>) =&gt; {
   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {
    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(ruleNodeList.<span class="hljs-property">value</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">value</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">ruleNode</span> =&gt;</span> ruleNode.<span class="hljs-property">value</span>.<span class="hljs-title function_">validate</span>())).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> {
      <span class="hljs-keyword">typeof</span> callback === <span class="hljs-string">'function'</span> ? <span class="hljs-title function_">callback</span>(<span class="hljs-literal">true</span>) : <span class="hljs-title function_">resolve</span>(<span class="hljs-literal">true</span>)
    }).<span class="hljs-keyword">catch</span>(<span class="hljs-function">() =&gt;</span> {
      <span class="hljs-keyword">typeof</span> callback === <span class="hljs-string">'function'</span> ? <span class="hljs-title function_">callback</span>(<span class="hljs-literal">false</span>) : <span class="hljs-title function_">resolve</span>(<span class="hljs-literal">false</span>)
    })
  })
}

<span class="hljs-title function_">provide</span>(<span class="hljs-string">'collectRuleNode'</span>, collectRuleNode)
<span class="hljs-title function_">defineExpose</span>({ validate })
&lt;/script&gt;
</code></pre>
<pre><code class="hljs language-js" lang="js">&lt;template&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"elFormRef"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"formRef"</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">"config"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"content"</span> <span class="hljs-attr">:rules</span>=<span class="hljs-string">"rules[config.filter_type]"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-item"</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-node"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{{ JSON.stringify(config) }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"oper-btn"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"showAddBtn"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"addRule"</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"delRule"</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span></span>  
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { ref, inject, onMounted } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">const</span> elFormRef = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>)
<span class="hljs-keyword">const</span> collectRuleNodeFuncInject = <span class="hljs-title function_">inject</span>(<span class="hljs-string">'collectRuleNode'</span>)

<span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> {
    <span class="hljs-title function_">collectRuleNodeFuncInject</span>(elFormRef)
})
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
</code></pre>
<h2 data-id="heading-13">五、使用说明</h2>
<h3 data-id="heading-14">5.1、基本使用</h3>
<pre><code class="hljs language-js" lang="js">&lt;template&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">RuleTree</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"ruleTreeRef"</span> <span class="hljs-attr">v-model:form</span>=<span class="hljs-string">"formData"</span> <span class="hljs-attr">:dataMap</span>=<span class="hljs-string">"dataMap"</span> /&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { reactive, ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">RuleTree</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/RuleTree/index'</span>

<span class="hljs-keyword">const</span> dataMap = <span class="hljs-title function_">reactive</span>({
  <span class="hljs-attr">operList</span>: [
    { <span class="hljs-attr">label</span>: <span class="hljs-string">'大于'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">1</span> },
    { <span class="hljs-attr">label</span>: <span class="hljs-string">'等于'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">2</span> },
    { <span class="hljs-attr">label</span>: <span class="hljs-string">'小于'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">3</span> },
    { <span class="hljs-attr">label</span>: <span class="hljs-string">'介于'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">4</span> }
  ],
  <span class="hljs-attr">dataList</span>: [
    {
      <span class="hljs-attr">label</span>: <span class="hljs-string">'文件类型'</span>,
      <span class="hljs-attr">field</span>: <span class="hljs-string">'fileType'</span>,
      <span class="hljs-attr">type</span>: <span class="hljs-string">'select'</span>,
      <span class="hljs-attr">valueList</span>: [
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'文件类型-1'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">1</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'文件类型-2'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">2</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'文件类型-3'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">3</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'文件类型-4'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">4</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'文件类型-5'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">5</span> }
      ]
    },
    {
      <span class="hljs-attr">label</span>: <span class="hljs-string">'磁盘类型'</span>,
      <span class="hljs-attr">field</span>: <span class="hljs-string">'diskType'</span>,
      <span class="hljs-attr">type</span>: <span class="hljs-string">'select'</span>,
      <span class="hljs-attr">valueList</span>: [
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'磁盘类型-1'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">1</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'磁盘类型-2'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">2</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'磁盘类型-3'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">3</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'磁盘类型-4'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">4</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'磁盘类型-5'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">5</span> }
      ]
    }
  ]
})

<span class="hljs-keyword">const</span> formData = <span class="hljs-title function_">ref</span>({})
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
</code></pre>
<h3 data-id="heading-15">5.2、使用自定义内容</h3>
<pre><code class="hljs language-js" lang="js">&lt;template&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">RuleTree</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"ruleTreeRef"</span> <span class="hljs-attr">v-model:form</span>=<span class="hljs-string">"formData"</span>&gt;</span>
     <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">"{ data, addRule, delRule }"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
          数据：{{ JSON.stringify(data) }}
          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"addRule"</span>&gt;</span>增加<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"danger"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"delRule"</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">RuleTree</span>&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { reactive, ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">RuleTree</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/RuleTree/index'</span>
<span class="hljs-keyword">const</span> formData = <span class="hljs-title function_">ref</span>({})
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
</code></pre>
<h3 data-id="heading-16">5.3、表单校验</h3>
<pre><code class="hljs language-js" lang="js">&lt;template&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">RuleTree</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"ruleTreeRef"</span> <span class="hljs-attr">:rules</span>=<span class="hljs-string">"rules"</span> <span class="hljs-attr">v-model:form</span>=<span class="hljs-string">"formData"</span> <span class="hljs-attr">:dataMap</span>=<span class="hljs-string">"dataMap"</span> /&gt;</span></span>
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"validate"</span>&gt;</span>校验<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { reactive, ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">RuleTree</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/RuleTree/index'</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">ElMessage</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'element-plus'</span>

<span class="hljs-keyword">const</span> <span class="hljs-title function_">isNotEmpty</span> = (<span class="hljs-params">rule, value, callback</span>) =&gt; {
  <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-title function_">callback</span>()
  <span class="hljs-keyword">return</span> <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">'不能为空'</span>))
}

<span class="hljs-keyword">const</span> dataMap = <span class="hljs-title function_">reactive</span>({
  <span class="hljs-attr">operList</span>: [
    { <span class="hljs-attr">label</span>: <span class="hljs-string">'大于'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">1</span> },
    { <span class="hljs-attr">label</span>: <span class="hljs-string">'等于'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">2</span> },
    { <span class="hljs-attr">label</span>: <span class="hljs-string">'小于'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">3</span> },
    { <span class="hljs-attr">label</span>: <span class="hljs-string">'介于'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">4</span> }
  ],
  <span class="hljs-attr">dataList</span>: [
    {
      <span class="hljs-attr">label</span>: <span class="hljs-string">'文件类型'</span>,
      <span class="hljs-attr">field</span>: <span class="hljs-string">'fileType'</span>,
      <span class="hljs-attr">type</span>: <span class="hljs-string">'select'</span>,
      <span class="hljs-attr">valueList</span>: [
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'文件类型-1'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">1</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'文件类型-2'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">2</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'文件类型-3'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">3</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'文件类型-4'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">4</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'文件类型-5'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">5</span> }
      ]
    },
    {
      <span class="hljs-attr">label</span>: <span class="hljs-string">'磁盘类型'</span>,
      <span class="hljs-attr">field</span>: <span class="hljs-string">'diskType'</span>,
      <span class="hljs-attr">type</span>: <span class="hljs-string">'select'</span>,
      <span class="hljs-attr">valueList</span>: [
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'磁盘类型-1'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">1</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'磁盘类型-2'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">2</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'磁盘类型-3'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">3</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'磁盘类型-4'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">4</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'磁盘类型-5'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">5</span> }
      ]
    }
  ]
})

<span class="hljs-keyword">const</span> formData = <span class="hljs-title function_">ref</span>({})
<span class="hljs-keyword">const</span> rules = <span class="hljs-title function_">ref</span>({
  <span class="hljs-attr">userBehavior</span>: [
    { <span class="hljs-attr">validator</span>: isNotEmpty, <span class="hljs-attr">trigger</span>: <span class="hljs-string">'change'</span> }
  ],

  <span class="hljs-attr">fileSize</span>: [
    { <span class="hljs-attr">validator</span>: isNotEmpty, <span class="hljs-attr">trigger</span>: <span class="hljs-string">'blur'</span> }
  ],
  <span class="hljs-attr">operType</span>: [
    {
      <span class="hljs-attr">validator</span>: <span class="hljs-function">(<span class="hljs-params">rule, value, callback</span>) =&gt;</span> {
        <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">1</span>) <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">'长度需要大于 1'</span>))
        <span class="hljs-keyword">return</span> <span class="hljs-title function_">callback</span>()
      },
      <span class="hljs-attr">trigger</span>: <span class="hljs-string">'blur'</span>
    }
  ]
})

<span class="hljs-keyword">const</span> <span class="hljs-title function_">validate</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; {
  ruleTreeRef.<span class="hljs-property">value</span>.<span class="hljs-title function_">validate</span>(<span class="hljs-function">(<span class="hljs-params">valid</span>) =&gt;</span> {
    <span class="hljs-keyword">if</span> (valid) <span class="hljs-keyword">return</span> <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">success</span>(<span class="hljs-string">'校验通过'</span>)
    <span class="hljs-keyword">return</span> <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'校验失败'</span>)
  })
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
</code></pre>
<h2 data-id="heading-17">六、不足及后续开发</h2>
<p>目前存在的不足：</p>
<ul>
<li>目前组件层级只能套俩层，后续会调整成可配置的</li>
<li>没法实现鼠标拖拽节点（el-tree 有点类似）修改其相对位置（后续看看可行性）</li>
</ul>
<p>针对第二点：这里请教一下掘友有没有好用的拖拽插件可以使用。
<img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/eb6f5892681b4438b85533ca07b585f2~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bKB5pyI5Y-v6LS1:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741753101&amp;x-signature=UJH%2FeGsyMmWN9EEa1KsOWkT1Snc%3D" alt="img" loading="lazy"></p>
<h2 data-id="heading-18">七、组件源码</h2>
<p>vue2 写得比较简陋也有些问题，这里就不贴出来如果有需要的话，后续我修改后会贴出来。</p>
<p><strong>注</strong>：想着每个业务场景使用该组件时，除非很通用（对于操作符<strong>介于</strong>，要显示一个还是俩个输入框，每个场景可能有所不同）才会使用到<code>ruleItem</code>设置好的组件进行渲染，不然会使用<strong>自定义内容</strong>的形式进行渲染。故<strong>ruleItem</strong> 渲染处理的比较简单。</p>
<h3 data-id="heading-19">7.1、入口文件 index.vue</h3>
<pre><code class="hljs language-js" lang="js">&lt;template&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tree"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">RuleTree</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"JSON.stringify(form) !== '{}'"</span> <span class="hljs-attr">:formData</span>=<span class="hljs-string">"form"</span> <span class="hljs-attr">:showAddBtn</span>=<span class="hljs-string">"showAddBtn"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">"slotProps"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"slotProps"</span> /&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">RuleTree</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"addRuleByTree"</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">"Plus"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { ref, defineProps, defineEmits, defineExpose, provide, watch, computed } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">RuleTree</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./RuleTree'</span>
<span class="hljs-keyword">import</span> { cloneDeep } <span class="hljs-keyword">from</span> <span class="hljs-string">'lodash'</span>
<span class="hljs-keyword">const</span> emits = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">'update:form'</span>])
<span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>({
  <span class="hljs-attr">form</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>, <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> ({}) },
  <span class="hljs-attr">rules</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>, <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> ({}) },
  <span class="hljs-attr">addRules</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Function</span>, <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> { } },
  <span class="hljs-attr">depth</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>, <span class="hljs-attr">default</span>: <span class="hljs-number">2</span> },
  <span class="hljs-attr">dataMap</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Array</span>, <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> ([]) }
})

<span class="hljs-keyword">const</span> showAddBtn = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>)
<span class="hljs-keyword">const</span> ruleNodeList = <span class="hljs-title function_">ref</span>([])

<span class="hljs-keyword">const</span> ruleNode = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> {
  <span class="hljs-keyword">const</span> rule = {
    <span class="hljs-attr">is_leaf</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">data</span>: {}
  }
  <span class="hljs-keyword">const</span> { dataList = [], operList = [] } = props.<span class="hljs-property">dataMap</span>
  <span class="hljs-keyword">const</span> { valueList = [] } = dataList
  <span class="hljs-keyword">if</span> (dataList.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; operList.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) {
    rule.<span class="hljs-property">data</span>.<span class="hljs-property">filter_type</span> = dataList[<span class="hljs-number">0</span>].<span class="hljs-property">field</span>
    rule.<span class="hljs-property">data</span>.<span class="hljs-property">opr_type</span> = operList[<span class="hljs-number">0</span>].<span class="hljs-property">value</span>
    rule.<span class="hljs-property">data</span>.<span class="hljs-property">content</span> = valueList.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">value</span>)
  }
  <span class="hljs-keyword">return</span> rule
})

<span class="hljs-title function_">watch</span>(<span class="hljs-function">() =&gt;</span> props.<span class="hljs-property">form</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {
  showAddBtn.<span class="hljs-property">value</span> = data.<span class="hljs-property">next</span> &amp;&amp; data.<span class="hljs-property">next</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">1</span>
}, { <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span> })

<span class="hljs-comment">// 往树上添加结点</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">addRuleByTree</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">let</span> data = <span class="hljs-title function_">cloneDeep</span>(props.<span class="hljs-property">form</span>)
  <span class="hljs-keyword">const</span> isInit = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data) === <span class="hljs-string">'{}'</span>
  <span class="hljs-keyword">let</span> rule = ruleNode.<span class="hljs-property">value</span>

  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> props.<span class="hljs-property">addRules</span> === <span class="hljs-string">'function'</span>) {
    <span class="hljs-keyword">const</span> res = props.<span class="hljs-title function_">addRules</span>()
    <span class="hljs-keyword">if</span> (res) rule = res
  }

  <span class="hljs-keyword">if</span> (isInit) { <span class="hljs-comment">// 未初始化</span>
    <span class="hljs-keyword">const</span> form = {}
    form.<span class="hljs-property">is_leaf</span> = <span class="hljs-literal">true</span>
    form.<span class="hljs-property">data</span> = rule.<span class="hljs-property">data</span>
    form.<span class="hljs-property">next</span> = []
    data = form
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">const</span> len = data.<span class="hljs-property">next</span>.<span class="hljs-property">length</span>
    data.<span class="hljs-property">is_leaf</span> = <span class="hljs-literal">false</span>
    <span class="hljs-keyword">if</span> (len === <span class="hljs-number">0</span>) {
      data.<span class="hljs-property">relation</span> = <span class="hljs-number">1</span>
      data.<span class="hljs-property">next</span> = [{
        <span class="hljs-attr">is_leaf</span>: <span class="hljs-literal">true</span>,
        <span class="hljs-attr">data</span>: data.<span class="hljs-property">data</span>
      }, rule]
      data.<span class="hljs-property">data</span> = {}
    } <span class="hljs-keyword">else</span> {
      data.<span class="hljs-property">next</span>.<span class="hljs-title function_">push</span>(rule)
    }
  }
  <span class="hljs-title function_">emits</span>(<span class="hljs-string">'update:form'</span>, data)
}

<span class="hljs-comment">// 添加节点</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">addRule</span> = (<span class="hljs-params">params</span>) =&gt; {
  <span class="hljs-keyword">const</span> { depth, index, branch } = params
  <span class="hljs-keyword">let</span> data = <span class="hljs-title function_">cloneDeep</span>(props.<span class="hljs-property">form</span>)
  <span class="hljs-keyword">const</span> isAddLayer = depth === <span class="hljs-number">0</span>
  <span class="hljs-keyword">let</span> customRule = ruleNode.<span class="hljs-property">value</span>
  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> props.<span class="hljs-property">addRules</span> === <span class="hljs-string">'function'</span>) {
    <span class="hljs-keyword">const</span> res = props.<span class="hljs-title function_">addRules</span>()
    <span class="hljs-keyword">if</span> (res) customRule = res
  }

  <span class="hljs-keyword">const</span> <span class="hljs-title function_">addRuleNode</span> = (<span class="hljs-params">obj, depth, i, branch</span>) =&gt; {
    <span class="hljs-keyword">if</span> (depth === <span class="hljs-number">0</span>) {
      <span class="hljs-comment">// 到达对应层级</span>
      <span class="hljs-keyword">if</span> (isAddLayer) {
        <span class="hljs-keyword">const</span> clickRule = <span class="hljs-title function_">cloneDeep</span>(obj.<span class="hljs-property">next</span>[i].<span class="hljs-property">data</span>)

        obj.<span class="hljs-property">next</span>[i].<span class="hljs-property">relation</span> = <span class="hljs-number">1</span>
        obj.<span class="hljs-property">next</span>[i].<span class="hljs-property">is_leaf</span> = <span class="hljs-literal">false</span>
        obj.<span class="hljs-property">next</span>[i].<span class="hljs-property">next</span> = [{
          <span class="hljs-attr">is_leaf</span>: <span class="hljs-literal">true</span>,
          <span class="hljs-attr">data</span>: {
            ...clickRule
          }
        }, customRule]
      } <span class="hljs-keyword">else</span> {
        i++
        obj.<span class="hljs-property">next</span>.<span class="hljs-title function_">splice</span>(i, <span class="hljs-number">0</span>, customRule)
      }
      <span class="hljs-keyword">return</span>
    }

    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(obj.<span class="hljs-property">next</span>)) {
      <span class="hljs-keyword">if</span> (<span class="hljs-title function_">addRuleNode</span>(obj.<span class="hljs-property">next</span>[branch], depth - <span class="hljs-number">1</span>, i)) {
        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>
      }
    }
  }
  <span class="hljs-title function_">addRuleNode</span>(data, depth, index, branch)
  data = <span class="hljs-title function_">formatForm</span>(data)
  <span class="hljs-title function_">emits</span>(<span class="hljs-string">'update:form'</span>, data)
}

<span class="hljs-comment">// 删除节点</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">delRule</span> = (<span class="hljs-params">params</span>) =&gt; {
  <span class="hljs-keyword">const</span> { depth, index, branch } = params
  <span class="hljs-keyword">let</span> data = <span class="hljs-title function_">cloneDeep</span>(props.<span class="hljs-property">form</span>)
  <span class="hljs-keyword">const</span> <span class="hljs-title function_">delRuleNode</span> = (<span class="hljs-params">obj, depth, i, branch</span>) =&gt; {
    <span class="hljs-comment">// 如果已经到达目标层级</span>
    <span class="hljs-keyword">if</span> (depth === <span class="hljs-number">0</span>) {
      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(obj.<span class="hljs-property">next</span>) &amp;&amp; obj.<span class="hljs-property">next</span>.<span class="hljs-property">length</span> &gt; i) {
        <span class="hljs-comment">// 删除指定下标的对象</span>
        obj.<span class="hljs-property">next</span>.<span class="hljs-title function_">splice</span>(i, <span class="hljs-number">1</span>)
        <span class="hljs-keyword">if</span> (obj.<span class="hljs-property">next</span>.<span class="hljs-property">length</span> === <span class="hljs-number">1</span> &amp;&amp; obj.<span class="hljs-property">next</span>[<span class="hljs-number">0</span>].<span class="hljs-property">is_leaf</span>) { <span class="hljs-comment">// 变成叶子结点</span>
          obj.<span class="hljs-property">is_leaf</span> = <span class="hljs-literal">true</span>
          obj.<span class="hljs-property">data</span> = obj.<span class="hljs-property">next</span>[<span class="hljs-number">0</span>].<span class="hljs-property">data</span>
          obj.<span class="hljs-property">next</span> = []
        }
        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> <span class="hljs-comment">// 删除成功</span>
      }
      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> <span class="hljs-comment">// 删除失败</span>
    }

    <span class="hljs-comment">// 如果还没到达目标层级，继续递归</span>
    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(obj.<span class="hljs-property">next</span>)) {
      <span class="hljs-keyword">if</span> (<span class="hljs-title function_">delRuleNode</span>(obj.<span class="hljs-property">next</span>[branch], depth - <span class="hljs-number">1</span>, i)) {
        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>
      }
    }
  }

  data.<span class="hljs-property">is_leaf</span> ? data = {} : <span class="hljs-title function_">delRuleNode</span>(data, depth, index, branch)
  data = <span class="hljs-title function_">formatForm</span>(data)
  <span class="hljs-title function_">emits</span>(<span class="hljs-string">'update:form'</span>, data)
}

<span class="hljs-comment">// 修改关系</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">changeRelation</span> = (<span class="hljs-params">params</span>) =&gt; {
  <span class="hljs-keyword">const</span> { value, depth, branch } = params
  <span class="hljs-keyword">const</span> data = <span class="hljs-title function_">cloneDeep</span>(props.<span class="hljs-property">form</span>)
  <span class="hljs-keyword">if</span> (depth === <span class="hljs-number">0</span>) {
    data.<span class="hljs-property">relation</span> = value
  } <span class="hljs-keyword">else</span> {
    data.<span class="hljs-property">next</span>[branch].<span class="hljs-property">relation</span> = value
  }
  <span class="hljs-title function_">emits</span>(<span class="hljs-string">'update:form'</span>, data)
}

<span class="hljs-comment">// 调整数据结构</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">formatForm</span> = (<span class="hljs-params">data</span>) =&gt; {
  <span class="hljs-keyword">if</span> (!data.<span class="hljs-property">is_leaf</span>) {
    <span class="hljs-keyword">if</span> (data.<span class="hljs-property">next</span> &amp;&amp; data.<span class="hljs-property">next</span>.<span class="hljs-property">length</span> === <span class="hljs-number">1</span>) {
      data = data.<span class="hljs-property">next</span>[<span class="hljs-number">0</span>]
      <span class="hljs-keyword">return</span> data
    }
    <span class="hljs-keyword">return</span> data
  }
  <span class="hljs-keyword">return</span> data
}

<span class="hljs-keyword">const</span> <span class="hljs-title function_">collectRuleNode</span> = (<span class="hljs-params">ruleNode</span>) =&gt; {
  ruleNodeList.<span class="hljs-property">value</span>.<span class="hljs-title function_">push</span>(ruleNode)
}

<span class="hljs-keyword">const</span> <span class="hljs-title function_">validate</span> = (<span class="hljs-params">callback</span>) =&gt; {
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {
    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(ruleNodeList.<span class="hljs-property">value</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">value</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">ruleNode</span> =&gt;</span> ruleNode.<span class="hljs-property">value</span>.<span class="hljs-title function_">validate</span>())).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> {
      <span class="hljs-keyword">typeof</span> callback === <span class="hljs-string">'function'</span> ? <span class="hljs-title function_">callback</span>(<span class="hljs-literal">true</span>) : <span class="hljs-title function_">resolve</span>(<span class="hljs-literal">true</span>)
    }).<span class="hljs-keyword">catch</span>(<span class="hljs-function">() =&gt;</span> {
      <span class="hljs-keyword">typeof</span> callback === <span class="hljs-string">'function'</span> ? <span class="hljs-title function_">callback</span>(<span class="hljs-literal">false</span>) : <span class="hljs-title function_">resolve</span>(<span class="hljs-literal">false</span>)
    })
  })
}
<span class="hljs-title function_">provide</span>(<span class="hljs-string">'addRule'</span>, addRule)
<span class="hljs-title function_">provide</span>(<span class="hljs-string">'delRule'</span>, delRule)
<span class="hljs-title function_">provide</span>(<span class="hljs-string">'changeRelation'</span>, changeRelation)
<span class="hljs-title function_">provide</span>(<span class="hljs-string">'collectRuleNode'</span>, collectRuleNode)
<span class="hljs-title function_">provide</span>(<span class="hljs-string">'rules'</span>, props.<span class="hljs-property">rules</span>)
<span class="hljs-title function_">provide</span>(<span class="hljs-string">'dataMap'</span>, props.<span class="hljs-property">dataMap</span>)
<span class="hljs-title function_">provide</span>(<span class="hljs-string">'addRuleByTree'</span>, addRuleByTree)

<span class="hljs-title function_">defineExpose</span>({
  validate
})
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
</code></pre>
<h3 data-id="heading-20">7.2、RuleTree.vue</h3>
<pre><code class="hljs language-js" lang="js">&lt;template&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-tree"</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">"curDepth &gt; 0 ? { paddingLeft: '60px' } : {}"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"formData &amp;&amp; !formData.is_leaf &amp;&amp; formData.next.length != 0"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-item-container"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"relation"</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"formData.next.length &gt;= 2"</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"+formData.relation === 1 ? 'active' : ''"</span>
            @<span class="hljs-attr">click</span>=<span class="hljs-string">"changeRelation(1)"</span>&gt;</span>且<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"+formData.relation === 2 ? 'active' : ''"</span>
            @<span class="hljs-attr">click</span>=<span class="hljs-string">"changeRelation(2)"</span>&gt;</span>或<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">RuleTree</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(cond, i) in formData.next"</span> <span class="hljs-attr">:formData</span>=<span class="hljs-string">"cond"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"i"</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">"i"</span> <span class="hljs-attr">:curDepth</span>=<span class="hljs-string">"curDepth + 1"</span>
          <span class="hljs-attr">:branch</span>=<span class="hljs-string">"curDepth === 0 ? i : branch"</span> <span class="hljs-attr">:showAddBtn</span>=<span class="hljs-string">"showAddBtn"</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">"slotProps"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"slotProps"</span> /&gt;</span>
          <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">RuleTree</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-else</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">RuleItem</span> <span class="hljs-attr">:config</span>=<span class="hljs-string">"formData.data"</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">"index"</span> <span class="hljs-attr">:showAddBtn</span>=<span class="hljs-string">"showAddBtn"</span> <span class="hljs-attr">:branch</span>=<span class="hljs-string">"branch"</span> <span class="hljs-attr">:curDepth</span>=<span class="hljs-string">"curDepth"</span>
        @<span class="hljs-attr">addRule</span>=<span class="hljs-string">"addRule"</span> @<span class="hljs-attr">delRule</span>=<span class="hljs-string">"delRule"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">"slotProps"</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"slotProps"</span> /&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">RuleItem</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { defineProps, inject } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">RuleItem</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./RuleItem'</span>
<span class="hljs-keyword">const</span> changeRelationFuncInject = <span class="hljs-title function_">inject</span>(<span class="hljs-string">'changeRelation'</span>)
<span class="hljs-keyword">const</span> addRuleFuncInject = <span class="hljs-title function_">inject</span>(<span class="hljs-string">'addRule'</span>)
<span class="hljs-keyword">const</span> delRuleFuncInject = <span class="hljs-title function_">inject</span>(<span class="hljs-string">'delRule'</span>)
<span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>({
  <span class="hljs-attr">formData</span>: {
    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>,
    <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> ({})
  },
  <span class="hljs-attr">curDepth</span>: { <span class="hljs-comment">// 层级</span>
    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,
    <span class="hljs-attr">default</span>: <span class="hljs-number">0</span>
  },
  <span class="hljs-attr">branch</span>: { <span class="hljs-comment">// 分支</span>
    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,
    <span class="hljs-attr">default</span>: <span class="hljs-number">0</span>
  },
  <span class="hljs-attr">index</span>: { <span class="hljs-comment">// 下标</span>
    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,
    <span class="hljs-attr">default</span>: <span class="hljs-number">0</span>
  },
  <span class="hljs-attr">showAddBtn</span>: {
    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Boolean</span>,
    <span class="hljs-attr">default</span>: <span class="hljs-literal">false</span>
  }
})

<span class="hljs-keyword">const</span> <span class="hljs-title function_">changeRelation</span> = (<span class="hljs-params">value</span>) =&gt; {
  <span class="hljs-title function_">changeRelationFuncInject</span>({
    <span class="hljs-attr">depth</span>: props.<span class="hljs-property">curDepth</span>,
    <span class="hljs-attr">branch</span>: props.<span class="hljs-property">branch</span>,
    value
  })
}

<span class="hljs-keyword">const</span> <span class="hljs-title function_">addRule</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-title function_">addRuleFuncInject</span>({
    <span class="hljs-attr">branch</span>: props.<span class="hljs-property">branch</span>,
    <span class="hljs-attr">depth</span>: props.<span class="hljs-property">curDepth</span> - <span class="hljs-number">1</span>,
    <span class="hljs-attr">index</span>: props.<span class="hljs-property">index</span>
  })
}

<span class="hljs-keyword">const</span> <span class="hljs-title function_">delRule</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-title function_">delRuleFuncInject</span>({
    <span class="hljs-attr">branch</span>: props.<span class="hljs-property">branch</span>,
    <span class="hljs-attr">depth</span>: props.<span class="hljs-property">curDepth</span> - <span class="hljs-number">1</span>,
    <span class="hljs-attr">index</span>: props.<span class="hljs-property">index</span>
  })
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"scss"</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css">
<span class="hljs-selector-class">.rule-tree</span> {
  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20px</span>;

  <span class="hljs-selector-class">.rule-item-container</span> {
    <span class="hljs-attribute">position</span>: relative;

    <span class="hljs-selector-class">.relation</span> {
      <span class="hljs-attribute">position</span>: absolute;
      <span class="hljs-attribute">top</span>: <span class="hljs-number">0px</span>;
      <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0px</span>;
      <span class="hljs-attribute">left</span>: <span class="hljs-number">12px</span>;
      <span class="hljs-attribute">display</span>: flex;
      <span class="hljs-attribute">flex-direction</span>: column;
      <span class="hljs-attribute">justify-content</span>: center;
      <span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;
      <span class="hljs-attribute">border-right</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">var</span>(--el-color-primary);

      <span class="hljs-selector-class">.el-button</span> {
        <span class="hljs-attribute">color</span>: <span class="hljs-number">#c0c4cc</span>;

        &amp;<span class="hljs-selector-class">.active</span> {
          <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--el-color-primary);
        }
      }
    }
  }

  <span class="hljs-selector-class">.el-button</span> {
    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span>;
  }
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span>
</code></pre>
<h3 data-id="heading-21">7.3、ruleItem.vue</h3>
<pre><code class="hljs language-js" lang="js">&lt;template&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"formRef"</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"show"</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">"config"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"content"</span> <span class="hljs-attr">:rules</span>=<span class="hljs-string">"rules[config.filter_type]"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">"config"</span> <span class="hljs-attr">:addRule</span>=<span class="hljs-string">"addRule"</span> <span class="hljs-attr">:delRule</span>=<span class="hljs-string">"delRule"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-item"</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"rule-node"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"config.filter_type"</span>&gt;</span>
              <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in map.labelList"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"item.field"</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"item.field"</span> <span class="hljs-attr">:label</span>=<span class="hljs-string">"item.label"</span> /&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"config.opr_type"</span>&gt;</span>
              <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in map.operList"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"item.value"</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"item.value"</span> <span class="hljs-attr">:label</span>=<span class="hljs-string">"item.label"</span> /&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"value-select"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"config.content"</span> <span class="hljs-attr">multiple</span> <span class="hljs-attr">collapse-tags</span> <span class="hljs-attr">collapse-tags-tooltip</span>
              <span class="hljs-attr">:max-collapse-tags</span>=<span class="hljs-string">"2"</span>&gt;</span>
              <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item) in map.dataList[config.filter_type].valueList"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"item.value"</span>
                <span class="hljs-attr">:value</span>=<span class="hljs-string">"item.value"</span> <span class="hljs-attr">:label</span>=<span class="hljs-string">"item.label"</span> /&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span>
          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"oper-btn"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"showAddBtn"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"addRule"</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"delRule"</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { defineProps, defineEmits, watch, ref, inject, onMounted, computed } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">const</span> emits = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">'addRule'</span>, <span class="hljs-string">'delRule'</span>])
<span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>({
  <span class="hljs-attr">config</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>, <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> ({}) },
  <span class="hljs-attr">index</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>, <span class="hljs-attr">default</span>: <span class="hljs-number">0</span> },
  <span class="hljs-attr">showAddBtn</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Boolean</span>, <span class="hljs-attr">default</span>: <span class="hljs-literal">false</span> },
  <span class="hljs-attr">branch</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>, <span class="hljs-attr">default</span>: <span class="hljs-number">0</span> },
  <span class="hljs-attr">curDepth</span>: { <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>, <span class="hljs-attr">default</span>: <span class="hljs-number">0</span> }
})
<span class="hljs-keyword">const</span> collectRuleNodeFuncInject = <span class="hljs-title function_">inject</span>(<span class="hljs-string">'collectRuleNode'</span>)
<span class="hljs-keyword">const</span> rules = <span class="hljs-title function_">inject</span>(<span class="hljs-string">'rules'</span>)
<span class="hljs-keyword">const</span> dataMap = <span class="hljs-title function_">inject</span>(<span class="hljs-string">'dataMap'</span>)
<span class="hljs-keyword">const</span> addRuleByTreeFunc = <span class="hljs-title function_">inject</span>(<span class="hljs-string">'addRuleByTree'</span>)
<span class="hljs-keyword">const</span> formRef = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>)
<span class="hljs-keyword">const</span> show = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>)

<span class="hljs-keyword">const</span> map = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> {
  <span class="hljs-keyword">const</span> operList = dataMap.<span class="hljs-property">operList</span>
  <span class="hljs-keyword">const</span> labelList = dataMap.<span class="hljs-property">dataList</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> {
    <span class="hljs-keyword">return</span> {
      <span class="hljs-attr">label</span>: item.<span class="hljs-property">label</span>,
      <span class="hljs-attr">field</span>: item.<span class="hljs-property">field</span>
    }
  })

  <span class="hljs-keyword">const</span> dataList = dataMap.<span class="hljs-property">dataList</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> {
    acc[cur.<span class="hljs-property">field</span>] = cur
    <span class="hljs-keyword">return</span> acc
  }, {})
  <span class="hljs-keyword">return</span> {
    operList,
    labelList,
    dataList
  }
})

<span class="hljs-title function_">watch</span>(<span class="hljs-function">() =&gt;</span> props.<span class="hljs-property">config</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {
  show.<span class="hljs-property">value</span> = data.<span class="hljs-property">filter_type</span> &amp;&amp; data.<span class="hljs-property">opr_type</span> &amp;&amp; data.<span class="hljs-property">content</span>
}, { <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">deep</span>: <span class="hljs-number">2</span> })

<span class="hljs-keyword">const</span> <span class="hljs-title function_">addRule</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">if</span> (!props.<span class="hljs-property">showAddBtn</span>) {
    <span class="hljs-title function_">addRuleByTreeFunc</span>()
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-title function_">emits</span>(<span class="hljs-string">'addRule'</span>)
  }
}
<span class="hljs-keyword">const</span> <span class="hljs-title function_">delRule</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">emits</span>(<span class="hljs-string">'delRule'</span>)

<span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> {
  <span class="hljs-title function_">collectRuleNodeFuncInject</span>(formRef)
})
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"scss"</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css">
<span class="hljs-selector-class">.rule-item</span> {
  <span class="hljs-attribute">display</span>: flex;
  <span class="hljs-attribute">gap</span>: <span class="hljs-number">6px</span>;

  <span class="hljs-selector-class">.rule-node</span> {
    <span class="hljs-selector-class">.el-select</span> {
      <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>;

      &amp;<span class="hljs-selector-class">.value-select</span> {
        <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;
      }
    }

    <span class="hljs-attribute">display</span>: flex;
    <span class="hljs-attribute">gap</span>: <span class="hljs-number">6px</span>;
  }
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span>
</code></pre>
<h3 data-id="heading-22">7.4、使用（完整代码）</h3>
<pre><code class="hljs language-js" lang="js">&lt;template&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"满足条件"</span>&gt;</span>
        <span class="hljs-comment">&lt;!-- 不使用插槽 --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">RuleTree</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"ruleTreeRef"</span> <span class="hljs-attr">:rules</span>=<span class="hljs-string">"rules"</span> <span class="hljs-attr">v-model:form</span>=<span class="hljs-string">"formData"</span> <span class="hljs-attr">:dataMap</span>=<span class="hljs-string">"dataMap"</span> /&gt;</span>
        
        <span class="hljs-comment">&lt;!-- 使用插槽 --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">RuleTree</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"ruleTreeRef"</span> <span class="hljs-attr">:rules</span>=<span class="hljs-string">"rules"</span> <span class="hljs-attr">v-model:form</span>=<span class="hljs-string">"formData"</span> <span class="hljs-attr">:dataMap</span>=<span class="hljs-string">"dataMap"</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">"{ data, addRule, delRule }"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
              数据：{{ JSON.stringify(data) }}
              <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"addRule"</span>&gt;</span>增加<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
              <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"danger"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"delRule"</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
          <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">RuleTree</span>&gt;</span>
        
      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"validate"</span>&gt;</span>校验<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { reactive, ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">RuleTree</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/RuleTree/index'</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">ElMessage</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'element-plus'</span>

<span class="hljs-keyword">const</span> <span class="hljs-title function_">isNotEmpty</span> = (<span class="hljs-params">rule, value, callback</span>) =&gt; {
  <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-title function_">callback</span>()
  <span class="hljs-keyword">return</span> <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">'不能为空'</span>))
}

<span class="hljs-keyword">const</span> dataMap = <span class="hljs-title function_">reactive</span>({
  <span class="hljs-attr">operList</span>: [
    { <span class="hljs-attr">label</span>: <span class="hljs-string">'大于'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">1</span> },
    { <span class="hljs-attr">label</span>: <span class="hljs-string">'等于'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">2</span> },
    { <span class="hljs-attr">label</span>: <span class="hljs-string">'小于'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">3</span> },
    { <span class="hljs-attr">label</span>: <span class="hljs-string">'介于'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">4</span> }
  ],
  <span class="hljs-attr">dataList</span>: [
    {
      <span class="hljs-attr">label</span>: <span class="hljs-string">'操作类型'</span>,
      <span class="hljs-attr">field</span>: <span class="hljs-string">'operType'</span>,
      <span class="hljs-attr">type</span>: <span class="hljs-string">'select'</span>,
      <span class="hljs-attr">valueList</span>: [
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'操作类型-1'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">1</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'操作类型-2'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">2</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'操作类型-3'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">3</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'操作类型-4'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">4</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'操作类型-5'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">5</span> }
      ]
    },
    {
      <span class="hljs-attr">label</span>: <span class="hljs-string">'文件类型'</span>,
      <span class="hljs-attr">field</span>: <span class="hljs-string">'fileType'</span>,
      <span class="hljs-attr">type</span>: <span class="hljs-string">'select'</span>,
      <span class="hljs-attr">valueList</span>: [
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'文件类型-1'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">1</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'文件类型-2'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">2</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'文件类型-3'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">3</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'文件类型-4'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">4</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'文件类型-5'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">5</span> }
      ]
    },
    {
      <span class="hljs-attr">label</span>: <span class="hljs-string">'磁盘类型'</span>,
      <span class="hljs-attr">field</span>: <span class="hljs-string">'diskType'</span>,
      <span class="hljs-attr">type</span>: <span class="hljs-string">'select'</span>,
      <span class="hljs-attr">valueList</span>: [
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'磁盘类型-1'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">1</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'磁盘类型-2'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">2</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'磁盘类型-3'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">3</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'磁盘类型-4'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">4</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'磁盘类型-5'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">5</span> }
      ]
    },
    {
      <span class="hljs-attr">label</span>: <span class="hljs-string">'用户行为'</span>,
      <span class="hljs-attr">field</span>: <span class="hljs-string">'userBehavior'</span>,
      <span class="hljs-attr">type</span>: <span class="hljs-string">'select'</span>,
      <span class="hljs-attr">valueList</span>: [
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'用户行为-1'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">1</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'用户行为-2'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">2</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'用户行为-3'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">3</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'用户行为-4'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">4</span> },
        { <span class="hljs-attr">label</span>: <span class="hljs-string">'用户行为-5'</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">5</span> }
      ]
    },
    {
      <span class="hljs-attr">label</span>: <span class="hljs-string">'文件大小'</span>,
      <span class="hljs-attr">field</span>: <span class="hljs-string">'fileSize'</span>,
      <span class="hljs-attr">type</span>: <span class="hljs-string">'input'</span>
    }
  ]
})

<span class="hljs-keyword">const</span> ruleTreeRef = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>)

<span class="hljs-keyword">const</span> rules = <span class="hljs-title function_">ref</span>({
  <span class="hljs-attr">userBehavior</span>: [
    { <span class="hljs-attr">validator</span>: isNotEmpty, <span class="hljs-attr">trigger</span>: <span class="hljs-string">'change'</span> }
  ],

  <span class="hljs-attr">fileSize</span>: [
    { <span class="hljs-attr">validator</span>: isNotEmpty, <span class="hljs-attr">trigger</span>: <span class="hljs-string">'blur'</span> }
  ],
  <span class="hljs-attr">operType</span>: [
    {
      <span class="hljs-attr">validator</span>: <span class="hljs-function">(<span class="hljs-params">rule, value, callback</span>) =&gt;</span> {
        <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">1</span>) <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">'长度需要大于 1'</span>))
        <span class="hljs-keyword">return</span> <span class="hljs-title function_">callback</span>()
      },
      <span class="hljs-attr">trigger</span>: <span class="hljs-string">'blur'</span>
    }
  ]
})

<span class="hljs-keyword">const</span> formData = <span class="hljs-title function_">ref</span>({})

<span class="hljs-keyword">const</span> <span class="hljs-title function_">validate</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; {
  ruleTreeRef.<span class="hljs-property">value</span>.<span class="hljs-title function_">validate</span>(<span class="hljs-function">(<span class="hljs-params">valid</span>) =&gt;</span> {
    <span class="hljs-keyword">if</span> (valid) <span class="hljs-keyword">return</span> <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">success</span>(<span class="hljs-string">'校验通过'</span>)
    <span class="hljs-keyword">return</span> <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'校验失败'</span>)
  })
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"scss"</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span>
</code></pre></div></div>