
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/stars-one/p/18686180" title="发布于 2025-01-22 15:27">
    <span role="heading" aria-level="2">Jetpack架构组件学习(6)——使用Glance实现桌面小组件</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>原文地址: <a href="https://stars-one.site/2025/01/22/jetpack-study-6" target="_blank" rel="noopener nofollow">Jetpack架构组件学习(6)——使用Glance实现桌面小组件-Stars-One的杂货小窝</a></p>
</blockquote>
<p>公司陆续整了几个Compose写的app,有个小组件的功能,顺便试了下Jetpack库里的Glance框架</p>
<p>感觉与原来的Remoteview差点意思,不过点击事件的使用比Remoteview要方便不少</p>
<blockquote>
<p>PS: 如果想看Remoteview实现的小组件,可以参考我的此文<a href="https://stars-one.site/2024/03/14/android-widget-use" target="_blank" rel="noopener nofollow">Android 桌面小组件使用-Stars-One的杂货小窝</a></p>
</blockquote>
<h2 id="基本使用">基本使用</h2>
<h3 id="1添加依赖">1.添加依赖</h3>
<p>添加Glance依赖:</p>
<pre><code>// For AppWidgets support
   implementation "androidx.glance:glance-appwidget:1.1.0"

   // For interop APIs with Material 3
   implementation "androidx.glance:glance-material3:1.1.0"

   // For interop APIs with Material 2
   implementation "androidx.glance:glance-material:1.1.0"
</code></pre>
<h3 id="2正常的相关设置">2.正常的相关设置</h3>
<p>xml文件夹添加小组件<code>widget_info.xml</code>配置:</p>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;appwidget-provider xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:targetCellWidth="2"
    android:targetCellHeight="2"
    android:minWidth="250dp"
    android:minHeight="250dp"
    android:updatePeriodMillis="0"
    android:initialLayout="@layout/glance_default_loading_layout"
    tools:targetApi="s"&gt;
&lt;/appwidget-provider&gt;
</code></pre>
<p>清单文件配置:</p>
<pre><code class="language-xml">&lt;receiver android:name=".appwidgets.MyAppWidgetReceiver"
	android:exported="true"&gt;
	&lt;intent-filter&gt;
		&lt;action android:name="android.appwidget.action.APPWIDGET_UPDATE" /&gt;
	&lt;/intent-filter&gt;
	&lt;meta-data
		android:name="android.appwidget.provider"
		android:resource="@xml/widget_info" /&gt;
&lt;/receiver&gt;
</code></pre>
<h3 id="3创建widget对象和实现界面">3.创建widget对象和实现界面</h3>
<p>需要注意的几点:</p>
<ol>
<li>界面的Row,Column,Text等,注意要使用Glance的包下的,否则会无法正常显示界面</li>
</ol>
<blockquote>
<p>官方也是说明了,Row,Box,Column实际最后创建的对象对应的Linearlayout和Framelayout</p>
</blockquote>
<ol start="2">
<li>点击跳转的对应actionStartActivity方法,实际是返回一个Action对象 通过<code>GlanceModifier.clickable(actionStartActivity(MainActivity::class.java))</code>进行对应跳转</li>
</ol>
<p>除了activity外,还能启动Service,BoardCast,详见此文档<a href="https://developer.android.google.cn/develop/ui/compose/glance/user-interaction?hl=bg" target="_blank" rel="noopener nofollow">处理用户互动  |  Jetpack Compose  |  Android Developers</a></p>
<ol start="3">
<li>关于背景圆角的方法,目前采用Box里面套一个Image和具体内容实现,Image去加载我们drawable里的矢量图对象(shape的那种)来实现</li>
<li>remember在里面可用,但如果结合animateColorAsState这种动画效果,实际上并没有效果(只是单纯的变更,没有中间过渡过程)</li>
</ol>
<pre><code class="language-kotlin">class MyAppWidgetReceiver : GlanceAppWidgetReceiver() {
    //MyAppWidget里就是类似我们remoteview的创建
    override val glanceAppWidget: GlanceAppWidget = MyAppWidget()
}

class MyAppWidget : GlanceAppWidget() {

    override suspend fun provideGlance(context: Context, id: GlanceId) {

        // In this method, load data needed to render the AppWidget.
        // Use `withContext` to switch to another thread for long running
        // operations.
        provideContent {
            val upSpeed by DataRespotiy.upSpeed.asFlow().collectAsState(initial = 0L)
            val downloadSpeed by DataRespotiy.downloadSpeed.asFlow().collectAsState(initial = 0L)

            Box(GlanceModifier.fillMaxSize()) {
                Image(provider = ImageProvider(R.drawable.app_widget_bg), contentDescription = null, modifier = GlanceModifier.fillMaxSize())

                Column(GlanceModifier.fillMaxSize()) {
                    Spacer(GlanceModifier.height(28.dp))
                    Row(GlanceModifier.fillMaxWidth().padding(horizontal = 20.dp)) {
                        androidx.glance.Image(provider = ImageProvider(R.mipmap.logo), contentDescription = null, modifier = GlanceModifier.size(108.dp))

                        Spacer(modifier = GlanceModifier.width(24.dp))
                        Column(GlanceModifier.defaultWeight()) {
                            Row(modifier = GlanceModifier.wrapContentHeight(), horizontalAlignment = Alignment.End, verticalAlignment = Alignment.Vertical.CenterVertically) {
                                Text(text = "${upSpeed} Kb/s", style = TextStyle(color = ColorProvider(APP_Primary_color), fontSize = 22.sp))
                                Spacer(modifier = GlanceModifier.width(4.dp))
                                androidx.glance.Image(provider = ImageProvider(R.drawable.icon_upload_widget), contentDescription = null, modifier = GlanceModifier.size(32.dp))
                            }

                            Spacer(modifier = GlanceModifier.height(18.dp))

                            Row(modifier = GlanceModifier, horizontalAlignment = Alignment.End, verticalAlignment = Alignment.Vertical.CenterVertically) {
                                Text(text = "${downloadSpeed} Kb/s", style = TextStyle(color = ColorProvider(APP_Bigfile_color), fontSize = 22.sp))
                                Spacer(modifier = GlanceModifier.width(4.dp))
                                androidx.glance.Image(provider = ImageProvider(R.drawable.icon_down_widget), contentDescription = null, modifier = GlanceModifier.size(32.dp))
                            }
                        }
                    }
                    Spacer(GlanceModifier.height(28.dp))

                    Box(modifier = GlanceModifier.fillMaxWidth().defaultWeight()) {
                        Image(provider = ImageProvider(R.drawable.app_widget_bg1), contentDescription = null, modifier = GlanceModifier.fillMaxSize())
                        Row(
                            modifier = GlanceModifier.fillMaxSize()
                                .padding(horizontal = 20.dp,16.dp), horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            val modifier = GlanceModifier.defaultWeight()
                            //todo 不同的item类型
                            repeat(3) { index -&gt;
                                Row(modifier, horizontalAlignment = Alignment.CenterHorizontally, verticalAlignment = Alignment.Vertical.CenterVertically) {
                                    androidx.glance.Image(
                                        provider = ImageProvider(R.drawable.icon_net_test), contentDescription = null, modifier = GlanceModifier
                                            .size(108.dp)
                                            .clickable(actionStartActivity(MainActivity::class.java))
                                    )
                                }

                                Spacer(GlanceModifier.width(20.dp))
                            }

                        }
                    }


                }
            }

        }
    }
}
</code></pre>
<h2 id="其他补充">其他补充</h2>
<p>更新小组件方法:</p>
<pre><code class="language-kotlin">val manager = GlanceAppWidgetManager(application)
val widget = MyAppWidget()
val glanceIds = manager.getGlanceIds(widget.javaClass)

glanceIds.forEach { glanceId -&gt;
	widget.update(application, glanceId)
}

//第二种方式(实际上和上面的方法是一样的,下面这个是官方给我们封装的另外个方法)
MyAppWidget().updateAll(application)
</code></pre>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://developer.android.google.cn/develop/ui/compose/glance/setup?hl=bg" target="_blank" rel="noopener nofollow">Glance 设置  |  Jetpack Compose  |  Android Developers</a></li>
</ul>

</div>
<div id="MySignature" role="contentinfo">
    <hr>
<span>提问之前，请先看</span><a style="color:blue" href="https://www.cnblogs.com/stars-one/p/12500031.html">提问须知</a>
<span>点击右侧图标发起提问</span>
<a target="_blank" href="http://wpa.qq.com/msgrd?v=3&amp;uin=1053894518&amp;site=qq&amp;menu=yes"><img border="0" src="http://wpa.qq.com/pa?p=2:1053894518:52" alt="联系我" title="联系我"></a>
<span>或者加入QQ群一起学习</span>
<a target="_blank" href="//shang.qq.com/wpa/qunwpa?idkey=6ca8d206ad4466e4675efa436df96c0837047da959c3fa550a1c568dc8c1fb6a"><img border="0" src="//pub.idqqimg.com/wpa/images/group.png" alt="Stars-One安卓学习交流群" title="Stars-One安卓学习交流群"></a>
TornadoFx学习交流群:1071184701
<img src="https://img2020.cnblogs.com/blog/1210268/202003/1210268-20200316120825333-1551152974.png" width="1000" height="auto">
<img src="https://img2018.cnblogs.com/blog/1210268/201905/1210268-20190508151523126-971809604.gif" width="1000" height="auto">
<!--<img src="https://img2020.cnblogs.com/blog/1210268/202004/1210268-20200413161422035-1188549898.gif" width="1000" height="auto">-->


</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.03673254717708333" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-22 15:27">2025-01-22 15:27</span>&nbsp;
<a href="https://www.cnblogs.com/stars-one">Stars-one</a>&nbsp;
阅读(<span id="post_view_count">15</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18686180" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18686180);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18686180', targetLink: 'https://www.cnblogs.com/stars-one/p/18686180', title: 'Jetpack架构组件学习(6)——使用Glance实现桌面小组件' })">举报</a>
</div>
        