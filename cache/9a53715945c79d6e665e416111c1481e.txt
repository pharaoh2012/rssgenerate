
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Tomorrowland/p/18736500" title="发布于 2025-02-25 15:52">
    <span role="heading" aria-level="2">Java中ArrayList的常见用法</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>Java 中的 <code>ArrayList</code> 是一个非常常用的动态数组，它属于 Java 集合框架的一部分。与普通数组不同，<code>ArrayList</code> 可以在需要时动态调整其大小。以下是 <code>ArrayList</code> 的一些详细介绍：</p>
<h3 id="基本特性">基本特性</h3>
<ol>
<li><strong>动态大小</strong>：<code>ArrayList</code> 会自动调整其大小以适应新元素。</li>
<li><strong>有序集合</strong>：元素按插入顺序存储，但可以通过索引访问。</li>
<li><strong>允许重复</strong>：可以包含重复的元素。</li>
<li><strong>允许空值</strong>：可以包含 <code>null</code> 值。</li>
<li><strong>非线程安全</strong>：在多线程环境下使用时需要手动同步。</li>
</ol>
<h3 id="常用方法">常用方法</h3>
<ul>
<li>
<p><strong>创建 ArrayList</strong></p>
<pre><code class="language-java">ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();
</code></pre>
</li>
<li>
<p><strong>添加元素</strong></p>
<ul>
<li>添加单个元素：<code>add(E e)</code><pre><code class="language-java">list.add("apple");
</code></pre>
</li>
<li>在指定位置添加：<code>add(int index, E element)</code><pre><code class="language-java">list.add(1, "banana");
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong>访问元素</strong></p>
<ul>
<li>通过索引：<code>get(int index)</code><pre><code class="language-java">String fruit = list.get(0);
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong>修改元素</strong></p>
<ul>
<li>修改元素值：<code>set(int index, E element)</code><pre><code class="language-java">list.set(1, "orange");
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong>删除元素</strong></p>
<ul>
<li>通过索引删除：<code>remove(int index)</code><pre><code class="language-java">list.remove(0);
</code></pre>
</li>
<li>通过值删除（第一个匹配的元素）：<code>remove(Object o)</code><pre><code class="language-java">list.remove("banana");
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong>遍历元素</strong></p>
<pre><code class="language-java">for (String item : list) {
    System.out.println(item);
}
</code></pre>
</li>
<li>
<p><strong>其他常用方法</strong></p>
<ul>
<li><strong>获取大小</strong>：<code>size()</code></li>
<li><strong>检查是否为空</strong>：<code>isEmpty()</code></li>
<li><strong>清空列表</strong>：<code>clear()</code></li>
<li><strong>检查是否包含指定元素</strong>：<code>contains(Object o)</code></li>
<li><strong>获取元素索引</strong>：<code>indexOf(Object o)</code></li>
</ul>
</li>
</ul>
<h3 id="性能注意事项">性能注意事项</h3>
<ul>
<li><strong>时间复杂度</strong>：
<ul>
<li>添加/修改/获取元素：<code>O(1)</code>（平均情况）</li>
<li>在中间插入/删除元素：<code>O(n)</code></li>
</ul>
</li>
<li>由于 <code>ArrayList</code> 是基于数组实现的，当超过初始容量时，可能需要重新分配数组，这会涉及原数组到新数组的复制。</li>
</ul>
<h3 id="使用示例">使用示例</h3>
<pre><code class="language-java">import java.util.ArrayList;

public class ArrayListExample {
    public static void main(String[] args) {
        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();

        // 添加元素
        list.add("apple");
        list.add("banana");
        list.add("cherry");

        // 插入元素
        list.add(1, "orange");

        // 访问和修改元素
        String fruit = list.get(0);
        list.set(1, "kiwi");

        // 删除元素
        list.remove("banana");

        // 输出列表
        for (String item : list) {
            System.out.println(item);
        }
    }
}
</code></pre>
<p><code>ArrayList</code> 是适用于频繁访问和修改的场景，但在性能和安全性要求较高的情况下，选择其他集合（如 <code>LinkedList</code> 或同步列表）可能更为合适。</p>
<p>是的， <strong><code>ArrayList</code> 只能存储引用数据类型</strong>，不能直接存储基本数据类型（如 <code>int</code>、<code>double</code>、<code>char</code> 等）。这是因为 <code>ArrayList</code> 是基于 Java 的泛型实现的，而泛型只支持对象类型（引用类型），不支持基本数据类型。</p>
<hr>
<h3 id="如何存储基本数据类型"><strong>如何存储基本数据类型？</strong></h3>
<p>虽然 <code>ArrayList</code> 不能直接存储基本数据类型，但 Java 提供了自动装箱（Autoboxing）机制，可以将基本数据类型自动转换为对应的包装类，使其间接存储基本数据类型。</p>
<h4 id="常见的基本数据类型及其对应的包装类"><strong>常见的基本数据类型及其对应的包装类</strong></h4>
<table>
<thead>
<tr>
<th>基本数据类型</th>
<th>包装类（引用类型）</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>int</code></td>
<td><code>Integer</code></td>
</tr>
<tr>
<td><code>double</code></td>
<td><code>Double</code></td>
</tr>
<tr>
<td><code>char</code></td>
<td><code>Character</code></td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>Boolean</code></td>
</tr>
<tr>
<td><code>float</code></td>
<td><code>Float</code></td>
</tr>
<tr>
<td><code>long</code></td>
<td><code>Long</code></td>
</tr>
<tr>
<td><code>short</code></td>
<td><code>Short</code></td>
</tr>
<tr>
<td><code>byte</code></td>
<td><code>Byte</code></td>
</tr>
</tbody>
</table>
<p>示例：</p>
<pre><code class="language-java">ArrayList&lt;Integer&gt; intList = new ArrayList&lt;&gt;();
intList.add(10);   // 自动装箱，将 int 转为 Integer
intList.add(20);
intList.add(30);

System.out.println(intList); // 输出： [10, 20, 30]
</code></pre>
<p>在这个例子中，<code>10</code>、<code>20</code> 和 <code>30</code> 是 <code>int</code> 类型的数据，但 Java 自动将它们转换为 <code>Integer</code>（包装类）对象，并存入了 <code>ArrayList</code>。</p>
<h4 id="取值时自动拆箱"><strong>取值时自动拆箱</strong></h4>
<p>存储在 <code>ArrayList</code> 中的包装类对象，在需要时会自动转换回基本数据类型（称为“拆箱”）。</p>
<p>示例：</p>
<pre><code class="language-java">int sum = 0;
for (int num : intList) {  // 自动拆箱，将 Integer 转为 int
    sum += num;
}
System.out.println("总和：" + sum);
</code></pre>
<hr>
<h3 id="注意事项"><strong>注意事项</strong></h3>
<ol>
<li>
<p><strong>性能</strong></p>
<ul>
<li>自动装箱和拆箱虽然使用方便，但它会增加一定的性能开销，尤其是频繁操作时。</li>
</ul>
</li>
<li>
<p><strong>避免空指针异常</strong></p>
<ul>
<li>如果 <code>ArrayList</code> 中的某个元素为 <code>null</code>，在拆箱时会抛出 <code>NullPointerException</code>。</li>
<li>例如：<pre><code class="language-java">ArrayList&lt;Integer&gt; intList = new ArrayList&lt;&gt;();
intList.add(null); // 添加了一个 null
int num = intList.get(0); // 自动拆箱时抛出 NullPointerException
</code></pre>
</li>
</ul>
</li>
</ol>
<hr>
<h3 id="如果需要存储多个不同的基本数据类型"><strong>如果需要存储多个不同的基本数据类型？</strong></h3>
<p>如果你的 <code>ArrayList</code> 需要同时存储多种基本数据类型，可以考虑以下几种方式：</p>
<ol>
<li>
<p><strong>使用 <code>ArrayList&lt;Object&gt;</code></strong></p>
<ul>
<li>通过手动装箱，将数据都存储为对应的包装类，然后将它们存入一个 <code>ArrayList&lt;Object&gt;</code> 中。</li>
<li>示例：<pre><code class="language-java">ArrayList&lt;Object&gt; list = new ArrayList&lt;&gt;();
list.add(123);        // 存储 Integer
list.add(45.67);      // 存储 Double
list.add("Hello");    // 存储 String
list.add(true);       // 存储 Boolean

for (Object obj : list) {
    System.out.println(obj.toString());
}
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong>使用自定义类进行封装</strong></p>
<ul>
<li>自定义一个类，把所有需要的数据类型存为类的字段。</li>
<li>示例：<pre><code class="language-java">class Data {
    int intValue;
    double doubleValue;
    String stringValue;

    Data(int intValue, double doubleValue, String stringValue) {
        this.intValue = intValue;
        this.doubleValue = doubleValue;
        this.stringValue = stringValue;
    }
}

ArrayList&lt;Data&gt; dataList = new ArrayList&lt;&gt;();
dataList.add(new Data(10, 20.5, "Hello"));

for (Data data : dataList) {
    System.out.println(data.intValue + ", " + data.doubleValue + ", " + data.stringValue);
}
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong>使用 <code>Map</code> 或其他集合结构</strong></p>
<ul>
<li>可以使用 <code>Map&lt;String, Object&gt;</code> 或类似的容器，按键值对存储不同类型的数据。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="总结">总结</h3>
<ul>
<li><strong><code>ArrayList</code> 只能直接存储引用类型。</strong></li>
<li>如果要存储基本数据类型，可以通过包装类实现，依赖于自动装箱和拆箱机制。</li>
<li>对于需要混合存储多种类型的数据，可以使用 <code>ArrayList&lt;Object&gt;</code> 或自定义类、<code>Map</code> 等其他结构。-</li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.020028284818287036" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-25 15:52">2025-02-25 15:52</span>&nbsp;
<a href="https://www.cnblogs.com/Tomorrowland">Tomorrowland_D</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18736500" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18736500);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18736500', targetLink: 'https://www.cnblogs.com/Tomorrowland/p/18736500', title: 'Java中ArrayList的常见用法' })">举报</a>
</div>
        