
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xxbang/p/18767172" title="发布于 2025-03-12 12:08">
    <span role="heading" aria-level="2">挖掘 URLSearchParams 的强大功能：查询参数处理的终极指南！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>大家好，我是付杰！<br>
今天咱们来聊聊JavaScript中一个超级好用，但可能很多人忽视的API URLSearchParams。<br>
如果你曾经为了处理URL中的查询字符串而烦恼，比如手动解析?name=张三&amp;age=30这样的参数，那今天的内容绝对能让你眼前一亮！<br>
以前，我们可能得自己写一堆代码来解析这些参数，操作起来不仅效率低，还容易出错（谁还没被各种split()和indexOf()折磨过呢？）。但现在，有了URLSearchParams，一切都变得简单直观了！它专门用来处理URL中?后面那一串东西，让我们能轻松地解析、修改和构建查询字符串。</p>
<p>虽然URLSearchParams不太为人所知，但我相信，一旦你开始用上它，你就会发现它简直是Web开发中的一个小神器！今天的文章，我会带大家深入了解一下它的功能和用法，让你以后处理URL参数时更加得心应手。</p>
<p>好了，话不多说，咱们直接进入正题吧！🧑‍💻</p>
<br>
<h2 id="1-什么是-urlsearchparams">1. 什么是 URLSearchParams？</h2>
<p>URLSearchParams是ECMAScript 2015（也就是我们常说的ES6）中引入的一个内置构造函数，专门用来处理URL中的查询字符串。简单来说，它是用来解析和操作?后面的那部分内容的。想象一下，如果你需要从<code>https://example.com/?name=张三&amp;age=30</code>中提取出name和age的值，以前可能需要手动写代码去解析，但现在有了URLSearchParams，一切都变得轻松多了。</p>
<br>
<h2 id="2-urlsearchparams-的作用">2. URLSearchParams 的作用</h2>
<p>它的主要功能就是帮我们搞定URL中那些查询参数（就是?后面那一串东西）。它不仅能把这些参数解析成一堆键值对，还能让我们轻松地访问、修改、添加甚至删除这些参数。听起来是不是很方便？下面咱们具体来看看它都能干点啥：</p>
<ol>
<li>
<p>解析查询参数：你把一个像?name=张三&amp;age=30这样的查询字符串扔给URLSearchParams，它就能自动把它解析成一个对象，然后你就可以像操作字典一样轻松地访问这些参数了。而且它还贴心地帮你处理了编码和解码的问题，完全不用你操心。</p>
</li>
<li>
<p>访问查询参数：通过它提供的方法，你可以轻松地获取某个参数的值。比如，你想拿到name的值，直接调用get('name')就行了。如果你想一次性获取所有参数，它还能给你返回一个迭代器，让你灵活地遍历这些键值对。</p>
</li>
<li>
<p>添加和修改查询参数：如果你想动态地往URL里加点新参数，或者修改已有的参数，URLSearchParams也完全不在话下。它提供了append()、set()和delete()这些方法，让你轻松地添加、修改或删除参数。比如你想把age改成35？简单，set('age', 35)就搞定了！</p>
</li>
<li>
<p>生成查询字符串：最后，如果你想把修改后的参数重新变成一个查询字符串，URLSearchParams也能帮你搞定。调用toString()方法，它就会把你当前的参数对象转换成标准的URL查询字符串，直接用到你的URL里，或者发请求的时候带上，简直是方便到飞起！</p>
</li>
</ol>
<br>
<h2 id="3-urlsearchparams-对象">3. URLSearchParams 对象</h2>
<p>URLSearchParams 其实是一个JavaScript内置的构造函数，也就是说，它不是一个可以直接用的方法，而是需要我们通过 new 关键字来创建一个实例对象。<br>
URLSearchParams 的实例化的参数也非常灵活，它可以直接接收一个查询字符串、一个键值对数组，甚至是一个对象。下面我们来通过几个具体的代码示例，看看如何用不同的方式创建 URLSearchParams 对象，并解析其中的参数。</p>
<h3 id="31-解析字符串">3.1 解析字符串</h3>
<p>最常见的场景是直接从URL中的查询字符串实例化 URLSearchParams。比如，我们有一个URL：<code>https://example.com/?name=张三&amp;age=30</code>，我们可以这样解析：</p>
<p><img src="https://img2024.cnblogs.com/blog/2026765/202503/2026765-20250312120257024-526626241.png" alt="image" loading="lazy"></p>
<br>
<h3 id="32-解析键值对数组">3.2 解析键值对数组</h3>
<p>有时候，我们可能已经有一个键值对数组，比如 [['name', '张三'], ['age', '30']]，我们也可以直接用它来实例化 URLSearchParams：</p>
<p><img src="https://img2024.cnblogs.com/blog/2026765/202503/2026765-20250312120312934-161457293.png" alt="image" loading="lazy"></p>
<br>
<h3 id="33-解析键值对">3.3 解析键值对</h3>
<p>URLSearchParams也可以通过普通对象创建实例化，解析对象参数：</p>
<p><img src="https://img2024.cnblogs.com/blog/2026765/202503/2026765-20250312120322019-201305644.png" alt="image" loading="lazy"></p>
<br>
<h3 id="34-处理重复参数">3.4 处理重复参数</h3>
<p>有时候，URL中可能会包含重复的参数，比如 ?name=张三&amp;name=李四，这时 URLSearchParams 也能很好地处理：</p>
<p><img src="https://img2024.cnblogs.com/blog/2026765/202503/2026765-20250312120329564-749853443.png" alt="image" loading="lazy"></p>
<br>
<h3 id="35-处理特殊字符">3.5 处理特殊字符</h3>
<p>URLSearchParams 还会自动处理URL中的特殊字符，比如空格会被转换成 +，中文字符会被编码：</p>
<p><img src="https://img2024.cnblogs.com/blog/2026765/202503/2026765-20250312120338380-865477169.png" alt="image" loading="lazy"></p>
<p>通过以上代码示例，我们可以看到，URLSearchParams 的实例化方式非常灵活，无论是从查询字符串、键值对数组、对象。它都能轻松应对。而且，它还支持处理重复参数和特殊字符，完全不用我们手动去折腾！</p>
<p>接下来，我们通过一些代码示例，来看看URLSearchParams的常用方法和属性。</p>
<br>
<h2 id="4-urlsearchparams-的常用方法和属性">4. URLSearchParams 的常用方法和属性</h2>
<h3 id="41-获取参数-get-和-getall">4.1 获取参数 get() 和 getAll()</h3>
<p>get() 用来获取指定参数的值，如果参数有多个值，只返回第一个。getAll() 则返回所有值的数组。</p>
<p><img src="https://img2024.cnblogs.com/blog/2026765/202503/2026765-20250312120443495-1582531108.png" alt="image" loading="lazy"></p>
<br>
<h3 id="42-添加和修改参数-append-和-set">4.2 添加和修改参数 append() 和 set()</h3>
<p>append() 用来添加一个新的参数值，即使参数已经存在，也不会覆盖。<br>
set() 用来设置参数值，如果参数已存在，会覆盖旧值；如果不存在，会自动添加。</p>
<p><img src="https://img2024.cnblogs.com/blog/2026765/202503/2026765-20250312120447743-1645947753.png" alt="image" loading="lazy"></p>
<br>
<h3 id="43-删除参数-delete">4.3 删除参数 delete()</h3>
<p>delete() 用来删除指定的参数。<br>
<img src="https://img2024.cnblogs.com/blog/2026765/202503/2026765-20250312120455566-1887646257.png" alt="image" loading="lazy"></p>
<br>
<h3 id="44-遍历参数foreach-和-entries">4.4 遍历参数：forEach() 和 entries()</h3>
<p>有时候我们需要遍历所有参数，forEach() 和 entries() 就能派上用场啦！<br>
forEach() 可以遍历所有参数，支持回调函数。<br>
entries() 返回一个迭代器，可以用 for...of 遍历。<br>
keys() 返回一个获取 key 值的迭代器<br>
values() 返回一个获取 value 值的迭代器</p>
<p><img src="https://img2024.cnblogs.com/blog/2026765/202503/2026765-20250312120506668-1145085583.png" alt="image" loading="lazy"></p>
<br>
<h3 id="45-判断参数是否存在has">4.5 判断参数是否存在：has()</h3>
<p>has() 用来判断某个参数是否存在。</p>
<p><img src="https://img2024.cnblogs.com/blog/2026765/202503/2026765-20250312120526842-1606960717.png" alt="image" loading="lazy"></p>
<br>
<h3 id="46-转换成字符串tostring">4.6 转换成字符串：toString()</h3>
<p>toString() 将 URLSearchParams 对象转换成查询字符串。</p>
<p><img src="https://img2024.cnblogs.com/blog/2026765/202503/2026765-20250312120540549-1410439694.png" alt="image" loading="lazy"></p>
<br>
<h3 id="47-属性size">4.7 属性：size</h3>
<p>size 属性是用于返回查询参数的数量。</p>
<p><img src="https://img2024.cnblogs.com/blog/2026765/202503/2026765-20250312120550154-1017190155.png" alt="image" loading="lazy"></p>
<br>
<h2 id="5-实际开发场景-urlsearchparams-与-url-配合">5. 实际开发场景: URLSearchParams 与 URL 配合</h2>
<p>在实际开发场景中, 你是需要解析一个完整的 URL 中的参数部分。比如一个像这样的 URL: <code>https://example.com/?name=张三&amp;age=30</code>。你可能会想：“怎么才能优雅地把 ?name=张三&amp;age=30 这部分提取出来，然后操作它呢？”</p>
<p>别担心！JavaScript 给我们提供了一个强大的组合技：URL 对象 + URLSearchParams。用它们，我们可以轻松地从完整的 URL 中提取查询字符串，然后进行各种酷炫操作。下面来看看怎么玩！</p>
<p>首先，我们可以用 URL 对象来解析完整的 URL，然后通过它的 search 属性拿到查询字符串部分。<br>
有了查询字符串，我们就可以用 URLSearchParams 来处理它啦！直接传 queryString 给它就行</p>
<p><img src="https://img2024.cnblogs.com/blog/2026765/202503/2026765-20250312120556223-709817562.png" alt="image" loading="lazy"></p>
<p>如果觉得多写一步麻烦，其实 URL 对象还提供了一个更优雅的方式，直接用 url.searchParams 就能拿到 URLSearchParams 实例对象！</p>
<p><img src="https://img2024.cnblogs.com/blog/2026765/202503/2026765-20250312120601969-1034982223.png" alt="image" loading="lazy"></p>
<br>
<h2 id="总结">总结</h2>
<p>URLSearchParams 是 JavaScript 中处理 URL 查询参数的利器，它简化了解析和操作查询字符串的复杂度。通过它，我们可以轻松地获取、添加、修改或删除参数，甚至还能处理重复参数和特殊字符。结合 URL 对象，它更是强大到飞起。无论你是处理简单的查询字符串，还是需要动态生成复杂的 URL，URLSearchParams 都能搞定！</p>
<blockquote>
<p>如果觉得本文对你有帮助，希望能够给我点赞支持一下哦 💪 也可以关注wx公众号：<code>程序员付杰</code> 回复加群，一起学习前端技能</p>
</blockquote>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="18.255634837861113" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-12 12:08">2025-03-12 12:08</span>&nbsp;
<a href="https://www.cnblogs.com/xxbang">程序员付杰</a>&nbsp;
阅读(<span id="post_view_count">159</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18767172" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18767172);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18767172', targetLink: 'https://www.cnblogs.com/xxbang/p/18767172', title: '挖掘 URLSearchParams 的强大功能：查询参数处理的终极指南！' })">举报</a>
</div>
        