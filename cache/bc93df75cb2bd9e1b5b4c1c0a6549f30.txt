
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/liyongqiang-cc/p/18664139" title="发布于 2025-01-10 16:03">
    <span role="heading" aria-level="2">.NetCore依赖注入（DI）之生命周期</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在 .NET Core 中，依赖注入（Dependency Injection，DI）是一种实现控制反转（Inversion of Control，IoC）的技术，它通过将依赖对象注入到需要它们的对象中，来实现对象之间的解耦。依赖注入的生命周期决定了对象在应用程序中的创建和管理方式。常见的生命周期有三种：<strong>Transient（瞬态）</strong>、<strong>Scoped（作用域）</strong> 和 <strong>Singleton（单例）</strong>。</p>
<hr>
<h3 id="1-transient瞬态"><strong>1. Transient（瞬态）</strong></h3>
<h4 id="定义"><strong>定义：</strong></h4>
<p>每次请求时都会创建一个新的实例。</p>
<h4 id="特点"><strong>特点：</strong></h4>
<ul>
<li>每次注入时都会创建一个新的对象。</li>
<li>对象的生命周期仅限于当前请求。</li>
<li>适用于轻量级、无状态的服务。</li>
</ul>
<h4 id="使用场景"><strong>使用场景：</strong></h4>
<ul>
<li>适用于每次请求都需要独立实例的场景，例如工具类、无状态服务等。</li>
</ul>
<h4 id="示例"><strong>示例：</strong></h4>
<pre><code>public&nbsp;interface&nbsp;ITransientService
{
&nbsp;&nbsp;&nbsp;&nbsp;Guid&nbsp;GetOperationId();
}

public&nbsp;class&nbsp;TransientService&nbsp;:&nbsp;ITransientService
{
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;readonly&nbsp;Guid&nbsp;_operationId;

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;TransientService()
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_operationId&nbsp;=&nbsp;Guid.NewGuid();
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Guid&nbsp;GetOperationId()&nbsp;=&gt;&nbsp;_operationId;
}
</code></pre>
<p>在 <code>Startup.cs</code> 中注册：</p>
<pre><code>public&nbsp;void&nbsp;ConfigureServices(IServiceCollection&nbsp;services)
{
&nbsp;&nbsp;&nbsp;&nbsp;services.AddTransient&lt;ITransientService,&nbsp;TransientService&gt;();
}
</code></pre>
<p>在控制器中使用：</p>
<pre><code>public&nbsp;class&nbsp;HomeController&nbsp;:&nbsp;Controller
{
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;readonly&nbsp;ITransientService&nbsp;_transientService1;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;readonly&nbsp;ITransientService&nbsp;_transientService2;

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;HomeController(ITransientService&nbsp;transientService1,&nbsp;ITransientService&nbsp;transientService2)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_transientService1&nbsp;=&nbsp;transientService1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_transientService2&nbsp;=&nbsp;transientService2;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;IActionResult&nbsp;Index()
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_transientService1.DoWork();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_transientService2.DoWork();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;验证是否为不同实例
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(_transientService1&nbsp;==&nbsp;_transientService2);&nbsp;&nbsp;//&nbsp;输出：False

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Ok();
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</code></pre>
<h4 id="输出"><strong>输出：</strong></h4>
<pre><code>Transient&nbsp;Service:&nbsp;Doing&nbsp;work...
&nbsp;&nbsp;&nbsp;&nbsp;Transient&nbsp;Service:&nbsp;Doing&nbsp;work...
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;False
</code></pre>
<hr>
<h3 id="2-scoped作用域"><strong>2. Scoped（作用域）</strong></h3>
<h4 id="定义-1"><strong>定义：</strong></h4>
<p>在同一个作用域内，对象是单例的；但在不同的作用域中，会创建新的实例。</p>
<h4 id="特点-1"><strong>特点：</strong></h4>
<ul>
<li>对象的生命周期与请求的作用域一致。</li>
<li>适用于需要在请求范围内共享状态的服务。</li>
</ul>
<h4 id="使用场景-1"><strong>使用场景：</strong></h4>
<ul>
<li>适用于需要在请求范围内共享状态的场景，例如数据库上下文、工作单元模式等。</li>
</ul>
<h4 id="示例-1"><strong>示例：</strong></h4>
<pre><code>public&nbsp;interface&nbsp;IScopedService
{
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;DoWork();
}

public&nbsp;class&nbsp;ScopedService&nbsp;:&nbsp;IScopedService
{
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;DoWork()
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine("Scoped&nbsp;Service:&nbsp;Doing&nbsp;work...");
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</code></pre>
<p>在 <code>Startup.cs</code> 中注册</p>
<pre><code>public&nbsp;void&nbsp;ConfigureServices(IServiceCollection&nbsp;services)
{
&nbsp;&nbsp;&nbsp;&nbsp;services.AddScoped&lt;IScopedService,&nbsp;ScopedService&gt;();
}
</code></pre>
<p>在控制器中使用：</p>
<pre><code>public&nbsp;class&nbsp;HomeController&nbsp;:&nbsp;Controller
{
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;readonly&nbsp;IScopedService&nbsp;_scopedService1;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;readonly&nbsp;IScopedService&nbsp;_scopedService2;

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;HomeController(IScopedService&nbsp;scopedService1,&nbsp;IScopedService&nbsp;scopedService2)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_scopedService1&nbsp;=&nbsp;scopedService1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_scopedService2&nbsp;=&nbsp;scopedService2;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;IActionResult&nbsp;Index()
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_scopedService1.DoWork();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_scopedService2.DoWork();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;验证是否为相同实例
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(_scopedService1&nbsp;==&nbsp;_scopedService2);&nbsp;&nbsp;//&nbsp;输出：True

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Ok();
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</code></pre>
<h4 id="输出-1"><strong>输出：</strong></h4>
<pre><code>Scoped&nbsp;Service:&nbsp;Doing&nbsp;work...
&nbsp;&nbsp;&nbsp;&nbsp;Scoped&nbsp;Service:&nbsp;Doing&nbsp;work...
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;True
</code></pre>
<hr>
<h3 id="3-singleton单例"><strong>3. Singleton（单例）</strong></h3>
<h4 id="定义-2"><strong>定义：</strong></h4>
<p>在整个应用程序生命周期中，只创建一个实例。</p>
<h4 id="特点-2"><strong>特点：</strong></h4>
<ul>
<li>对象的生命周期与应用程序的生命周期一致。</li>
<li>适用于全局共享的服务，如配置管理、日志记录等。</li>
</ul>
<h4 id="使用场景-2"><strong>使用场景：</strong></h4>
<ul>
<li>适用于需要全局共享的场景，例如配置管理、缓存、日志记录等。</li>
</ul>
<h4 id="示例-2"><strong>示例：</strong></h4>
<pre><code>public&nbsp;interface&nbsp;ISingletonService
{
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;DoWork();
}

public&nbsp;class&nbsp;SingletonService&nbsp;:&nbsp;ISingletonService
{
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;DoWork()
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine("Singleton&nbsp;Service:&nbsp;Doing&nbsp;work...");
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</code></pre>
<p>在 <code>Startup.cs</code> 中注册：</p>
<pre><code>public&nbsp;void&nbsp;ConfigureServices(IServiceCollection&nbsp;services)
{
&nbsp;&nbsp;&nbsp;&nbsp;services.AddSingleton&lt;ISingletonService,&nbsp;SingletonService&gt;();
}
</code></pre>
<p>在控制器中使用：</p>
<pre><code>public&nbsp;class&nbsp;HomeController&nbsp;:&nbsp;Controller
{
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;readonly&nbsp;ISingletonService&nbsp;_singletonService1;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;readonly&nbsp;ISingletonService&nbsp;_singletonService2;

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;HomeController(ISingletonService&nbsp;singletonService1,&nbsp;ISingletonService&nbsp;singletonService2)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_singletonService1&nbsp;=&nbsp;singletonService1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_singletonService2&nbsp;=&nbsp;singletonService2;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;IActionResult&nbsp;Index()
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_singletonService1.DoWork();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_singletonService2.DoWork();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;验证是否为相同实例
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(_singletonService1&nbsp;==&nbsp;_singletonService2);&nbsp;&nbsp;//&nbsp;输出：True

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Ok();
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</code></pre>
<h4 id="输出-2"><strong>输出：</strong></h4>
<pre><code>Singleton&nbsp;Service:&nbsp;Doing&nbsp;work...
Singleton&nbsp;Service:&nbsp;Doing&nbsp;work...
True
</code></pre>
<hr>
<h3 id="总结"><strong>总结</strong></h3>
<table>
<thead>
<tr>
<th><strong>生命周期</strong></th>
<th><strong>定义</strong></th>
<th><strong>特点</strong></th>
<th><strong>使用场景</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Transient</strong></td>
<td>每次请求时创建新的实例</td>
<td>每次注入时都会创建一个新的对象</td>
<td>轻量级、无状态的服务，如工具类、无状态服务</td>
</tr>
<tr>
<td><strong>Scoped</strong></td>
<td>在同一个作用域内，对象是单例的</td>
<td>对象的生命周期与请求的作用域一致</td>
<td>需要在请求范围内共享状态的服务，如数据库上下文</td>
</tr>
<tr>
<td><strong>Singleton</strong></td>
<td>在整个应用程序生命周期中，只创建一个实例</td>
<td>对象的生命周期与应用程序的生命周期一致</td>
<td>全局共享的服务，如配置管理、日志记录</td>
</tr>
</tbody>
</table>
<p>通过合理选择依赖注入的生命周期，我们可以实现对象的灵活管理和高效使用，从而提高应用程序的性能和可维护性。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.2592386623599536" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-10 16:04">2025-01-10 16:03</span>&nbsp;
<a href="https://www.cnblogs.com/liyongqiang-cc">代码拾光</a>&nbsp;
阅读(<span id="post_view_count">249</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18664139" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18664139);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18664139', targetLink: 'https://www.cnblogs.com/liyongqiang-cc/p/18664139', title: '.NetCore依赖注入（DI）之生命周期' })">举报</a>
</div>
        