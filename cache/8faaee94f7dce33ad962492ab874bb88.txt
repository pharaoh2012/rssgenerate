
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/edisontalk/p/-/quick-start-agent-orchestration-sequential" title="发布于 2025-07-17 08:30">
    <span role="heading" aria-level="2">多Agent协作入门：顺序编排模式</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250715190135626-407093117.png" alt="多Agent协作入门：顺序编排模式" class="desc_img">
        在顺序编排模式中，各个Agent被组成一个流程，每个Agent都会处理任务，并将执行结果输出传递给下一个待执行的Agent。可以看出，对于每个基于上一步骤构建的工作流（Workflow）来说，这是比较适合的模式。目前，像文档审阅、工作流、数据处理管道、多阶段推理等，是比较常见的应用场景。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>大家好，我是Edison。</p>
<p><span><a class="normal_text_link" href="https://www.cnblogs.com/edisontalk/p/-/quick-start-agent-orchestration-concurrent" target="_blank" data-itemshowtype="0" data-linktype="2">上一篇</a>我们学习了Semantic Kernel中的并发编排模式，它<span>非常适合并行分析、独立子任务并集成决策的任务场景。今天，我们学习新的模式：顺序编排。</span></span></p>
<h1><strong>顺序编排模式简介</strong></h1>
<p>在顺序编排模式中，各个Agent被组成一个流程，每个Agent都会处理任务，并将执行结果输出传递给下一个待执行的Agent。可以看出，对于每个基于上一步骤构建的工作流<span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;p&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;line-height: 1.75em;margin: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;strong&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">（Workflow）来说，这是比较适合的模式。</span></p>
<p>目前，像文档审阅、工作流、数据处理管道、多阶段推理等，是比较常见的应用场景。</p>
<p>下图展示了一个文档翻译的用例，文档先通过Agent1生成摘要，然后通过Agent2执行翻译，最后通过Agent3进行审阅和质量保证，最终生成最后的翻译结果。可以看到，每个Agent都在基于上一个步骤的处理结果进行构建，这就是一个典型的顺序编排用例。</p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250715185420581-1064481026.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<h1><strong><span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 8px;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin-top: 8px;margin-bottom: 8px;outline: 0px;visibility: visible;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;strong&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">实现顺序编排模式</span></strong></h1>
<p>这里我们来实现一个DEMO，我们定义3个Agent：分析师（Analyst）、广告文案写手（CopyWriter） 和 编辑/审稿人（Editor），假设他们是一个小Team，在承接广告文案的创作。</p>
<p>那么我们这个DEMO的目标，就是可以让他们可以来接客，只要客户分配一个广告文案创作的任务，它们就可以配合来生成最终的文案：首先由分析师分析要介绍产品的亮点和宣传思路，再由写手生成一个文案草稿，最后由审稿人进行评估给出最终文案，这就是一个典型的工作流处理。</p>
<p>为了简单地实现这个功能，我们创建一个.NET控制台项目，然后安装以下包：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">Microsoft.SemanticKernel.Agents.Core
Microsoft.SemanticKernel.Agents.OpenAI (Preview版本）
Microsoft.SemanticKernel.Agents.Orchestration (Preview版本）
Microsoft.SemanticKernel.Agents.Runtime.InProcess (Preview版本）</span></pre>
</div>
<p>需要注意的是，由于Semantic Kernel的较多功能目前还处于实验预览阶段，所以建议在该项目的csproj文件中加入以下配置，统一取消警告：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">PropertyGroup</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">NoWarn</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>$(NoWarn);CA2007;IDE1006;SKEXP0001;SKEXP0110;OPENAI001<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">NoWarn</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">PropertyGroup</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre>
</div>
<p>创建一个appsettings.json配置文件，填入以下关于LLM API的配置，其中API_KEY请输入你自己的：</p>
<div class="cnblogs_code">
<pre>{
  "LLM": {
    "BASE_URL": "https://api.siliconflow.cn",
    "API_KEY": "******************************",
    "MODEL_ID": "Qwen/Qwen2.5-32B-Instruct"
  }
}</pre>
</div>
<p data-pm-slice="0 0 []">这里我们使用SiliconCloud提供的&nbsp;<span class="code-snippet__string">Qwen2.5-32B-Instruct&nbsp;模型，你可以通过这个URL注册账号：<a href="https://cloud.siliconflow.cn/i/DomqCefW" rel="noopener nofollow" target="_blank">https://cloud.siliconflow.cn/i/DomqCefW</a>&nbsp;获取大量免费的Token来进行本次实验。</span></p>
<p data-pm-slice="0 0 []">有了LLM API，我们可以创建一个Kernel供后续使用，这也是老面孔了：</p>
<div class="cnblogs_code">
<pre>Console.WriteLine(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Now loading the configuration...</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> config = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ConfigurationBuilder()
    .AddJsonFile($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">appsettings.json</span><span style="color: rgba(128, 0, 0, 1)">"</span>, optional: <span style="color: rgba(0, 0, 255, 1)">false</span>, reloadOnChange: <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">)
    .Build();
Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Now loading the chat client...</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> chattingApiConfiguration = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> OpenAiConfiguration(
    config.GetSection(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">LLM:MODEL_ID</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">).Value,
    config.GetSection(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">LLM:BASE_URL</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">).Value,
    config.GetSection(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">LLM:API_KEY</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">).Value);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> openAiChattingClient = <span style="color: rgba(0, 0, 255, 1)">new</span> HttpClient(<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> OpenAiHttpHandler(chattingApiConfiguration.EndPoint));
</span><span style="color: rgba(0, 0, 255, 1)">var</span> kernel =<span style="color: rgba(0, 0, 0, 1)"> Kernel.CreateBuilder()
    .AddOpenAIChatCompletion(chattingApiConfiguration.ModelId, chattingApiConfiguration.ApiKey, httpClient: openAiChattingClient)
    .Build();</span></pre>
</div>
<p><span><span>接下来，我们就一步一步地来看看核心的代码。</span></span></p>
<h1><span>定义3个Agent</span></h1>
<p><span><span>这里我们来定义3个Agent：Analyst，Writer，Editor</span></span></p>
<p><span><span>（1）<strong>Analyst 分析师</strong></span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> analystAgent = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatCompletionAgent()
{
    Name </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Analyst</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Instructions </span>= <span style="color: rgba(128, 0, 0, 1)">"""
</span><span style="color: rgba(0, 0, 0, 1)">                You are a marketing analyst. Given a product description, identify:
                </span>-<span style="color: rgba(0, 0, 0, 1)"> Key features
                </span>-<span style="color: rgba(0, 0, 0, 1)"> Target audience
                </span>-<span style="color: rgba(0, 0, 0, 1)"> Unique selling points
                </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">,</span>
    Description = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">A agent that extracts key concepts from a product description.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Kernel </span>=<span style="color: rgba(0, 0, 0, 1)"> kernel
};</span></pre>
</div>
<p><span><span><span><span>（2）<strong>Writer 文案写手</strong></span></span></span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> writerAgent = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatCompletionAgent()
{
    Name </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">CopyWriter</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Instructions </span>= <span style="color: rgba(128, 0, 0, 1)">"""
</span><span style="color: rgba(0, 0, 0, 1)">                You are a marketing copywriter. Given a block of text describing features, audience, and USPs,
                compose a compelling marketing copy (like a newsletter section) that highlights these points.
                Output should be </span><span style="color: rgba(0, 0, 255, 1)">short</span> (around <span style="color: rgba(128, 0, 128, 1)">150</span> words), output just the copy <span style="color: rgba(0, 0, 255, 1)">as</span><span style="color: rgba(0, 0, 0, 1)"> a single text block.
                </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">,</span>
    Description = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">An agent that writes a marketing copy based on the extracted concepts.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Kernel </span>=<span style="color: rgba(0, 0, 0, 1)"> kernel
};</span></pre>
</div>
<p>（3）<strong>Editor 编辑/审稿人</strong></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> editorAgent = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatCompletionAgent()
{
    Name </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Editor</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Instructions </span>= <span style="color: rgba(128, 0, 0, 1)">"""
</span><span style="color: rgba(0, 0, 0, 1)">                You are an editor. Given the draft copy, correct grammar, improve clarity, ensure consistent tone,
                give format and make it polished. Output the final improved copy </span><span style="color: rgba(0, 0, 255, 1)">as</span><span style="color: rgba(0, 0, 0, 1)"> a single text block.
                </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">,</span>
    Description = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">An agent that formats and proofreads the marketing copy.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Kernel </span>=<span style="color: rgba(0, 0, 0, 1)"> kernel
};</span></pre>
</div>
<h1><span>选择编排模式</span></h1>
<p><span><span>这里我们选择的是顺序编排模式：<span><span>SequentialOrchestration，将需要编排的3个Agent作为参数传递给它。</span></span></span></span></p>
<p><span><span>需要注意的是：<span><strong>这里为了能够显示每个Agent的执行结果，我们定一个了一个自定义的回调方法 responseCallback，帮助显示每个Agent的输出记录供参考</strong><span>。</span></span></span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Set up the Sequential Orchestration</span>
ChatHistory history =<span style="color: rgba(0, 0, 0, 1)"> [];
ValueTask responseCallback(ChatMessageContent response)
{
    history.Add(response);
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> ValueTask.CompletedTask;
}
</span><span style="color: rgba(0, 0, 255, 1)">var</span> orchestration = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> SequentialOrchestration(analystAgent, writerAgent, editorAgent)
{
    ResponseCallback </span>=<span style="color: rgba(0, 0, 0, 1)"> responseCallback
};</span></pre>
</div>
<h1><span data-pm-slice="3 3 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;p&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;line-height: 1.75em; margin: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,null,&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:null},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 8px;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;data-pm-slice&quot;:&quot;3 3 [\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;section\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;letter-spacing: 0.578px;text-align: left;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;p\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;line-height: 1.75em; margin: 8px;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,null,\&quot;node\&quot;,{\&quot;tagName\&quot;:\&quot;span\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:null},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;}]&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;text-transform: none;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;text-align: left;margin-top: 8px;margin-bottom: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">启动运行时</span></span></h1>
<p><span><span>在Semantic Kernel中，需要运行时（Runtime）才能管理Agent的执行，因此这里我们需要在正式开始前使用InProcessRuntime并启动起来。</span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Start the Runtime</span>
<span style="color: rgba(0, 0, 255, 1)">var</span> runtime = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> InProcessRuntime();
</span><span style="color: rgba(0, 0, 255, 1)">await</span> runtime.StartAsync();</pre>
</div>
<h1><span>调用编排 并 收集结果</span></h1>
<p><span><span>准备工作差不多了，现在我们可以开始调用编排了。</span></span><span><span>这也是老面孔代码了，不过多解释。</span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Start the Chat</span>
Console.WriteLine(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">----------Agents are Ready. Let's Start Working!----------</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">while</span> (<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">)
{
    Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">User&gt; </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 0, 255, 1)">var</span> input =<span style="color: rgba(0, 0, 0, 1)"> Console.ReadLine();
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.IsNullOrWhiteSpace(input))
        </span><span style="color: rgba(0, 0, 255, 1)">continue</span><span style="color: rgba(0, 0, 0, 1)">;
    input </span>=<span style="color: rgba(0, 0, 0, 1)"> input.Trim();
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (input.Equals(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">EXIT</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, StringComparison.OrdinalIgnoreCase))
    {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Stop the Runtime</span>
        <span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> runtime.RunUntilIdleAsync();
        </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">
    {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Invoke the Orchestration</span>
        <span style="color: rgba(0, 0, 255, 1)">var</span> result = <span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> orchestration.InvokeAsync(input, runtime);
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Collect Results from multi Agents</span>
        <span style="color: rgba(0, 0, 255, 1)">var</span> output = <span style="color: rgba(0, 0, 255, 1)">await</span> result.GetValueAsync(TimeSpan.FromSeconds(<span style="color: rgba(128, 0, 128, 1)">10</span> * <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">));
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Print the Results</span>
        Console.WriteLine($<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{Environment.NewLine}# RESULT: {output}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{Environment.NewLine}ORCHESTRATION HISTORY</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> message <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> history)
        {
            Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">#{message.Role} - {message.AuthorName}:</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{message.Content.Replace(</span><span style="color: rgba(128, 0, 0, 1)">"</span>---<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">, string.Empty)}{Environment.NewLine}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        }
    }
    </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (HttpOperationException ex)
    {
        Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Exception: {ex.Message}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    }
    </span><span style="color: rgba(0, 0, 255, 1)">finally</span><span style="color: rgba(0, 0, 0, 1)">
    {
        Console.ResetColor();
        Console.WriteLine();
    }
}</span></pre>
</div>
<p><span>需要注意的是：<span><strong>上面的代码示例中我主动输出了编排过程中每个Agent的生成结果历史记录</strong><span><strong>，便于我们一会儿查看</strong>。</span></span></span></p>
<h1><span><span><strong><span>效果展示</span></strong></span></span></h1>
<p>用户输入问题："Please help to introduce our new product: An eco-friendly stainless steel water bottle that keeps drinks cold for 24 hours."</p>
<p><span data-pm-slice="3 3 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;p&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;line-height: 1.75em; margin: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,null,&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:null},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span data-pm-slice="3 3 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 8px;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;data-pm-slice&quot;:&quot;3 3 [\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;section\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;letter-spacing: 0.578px;text-align: left;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;p\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;line-height: 1.75em; margin: 8px;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,null,\&quot;node\&quot;,{\&quot;tagName\&quot;:\&quot;span\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:null},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;}]&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">假设客户公司有一个新产品：一个环保的不锈钢水瓶，可以让饮料保持24小时的低温，需要帮忙创作一个广告文案。</span></span></p>
<p><span data-pm-slice="3 3 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;p&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;line-height: 1.75em; margin: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,null,&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:null},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span data-pm-slice="3 3 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 8px;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;data-pm-slice&quot;:&quot;3 3 [\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;section\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;letter-spacing: 0.578px;text-align: left;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;p\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;line-height: 1.75em; margin: 8px;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,null,\&quot;node\&quot;,{\&quot;tagName\&quot;:\&quot;span\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:null},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;}]&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">最终经过3个Agent的顺序合作，结果显示如下：</span></span></p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250715185850630-1812894932.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p><span data-pm-slice="3 3 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;p&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;line-height: 1.75em; margin: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,null,&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:null},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span data-pm-slice="3 3 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 8px;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;data-pm-slice&quot;:&quot;3 3 [\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;section\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;letter-spacing: 0.578px;text-align: left;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;p\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;line-height: 1.75em; margin: 8px;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,null,\&quot;node\&quot;,{\&quot;tagName\&quot;:\&quot;span\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:null},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;}]&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span><span>可以看到，它们合作写出了一段适合宣传的广告文案。</span></span></span></span></p>
<p><span data-pm-slice="3 3 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;p&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;line-height: 1.75em; margin: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,null,&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:null},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span data-pm-slice="3 3 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 8px;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;data-pm-slice&quot;:&quot;3 3 [\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;section\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;letter-spacing: 0.578px;text-align: left;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;p\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;line-height: 1.75em; margin: 8px;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,null,\&quot;node\&quot;,{\&quot;tagName\&quot;:\&quot;span\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:null},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;}]&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span><span>那么，它们到底是如何合作的呢？刚刚我们主动输出了历史记录，可以看看：</span></span></span></span></p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250715185859525-1185016388.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>可以看到，Agent1-分析师对产品介绍生成了很多关键卖点和受众群体的分析结果，Agent2-写手便基于分析结果写了一个文案草稿，最终Agent3-编辑对文案进行了审核，最终发布广告文案。</p>
<h1><strong><span>小结</span></strong></h1>
<p>本文介绍了顺序编排模式的基本概念，然后通过一个案例介绍了如何实现一个顺序编排模式，相信通过这个案例你能够有个感性的认识。</p>
<p>下一篇，我们将再次学习群聊编排模式，并通过自定义群组聊天管理器（GroupChatManager）来自定义群聊流程。</p>
<h1>参考资料</h1>
<p><span><span>Microsoft Learn:&nbsp;</span></span><a href="https://learn.microsoft.com/zh-cn/semantic-kernel/frameworks/agent/agent-orchestration?wt.mc_id=MVP_397012" target="_blank" rel="noopener nofollow">https://learn.microsoft.com/zh-cn/semantic-kernel/frameworks/agent/agent-orchestration</a></p>
<h1>推荐学习</h1>
<p><span><span><span><span><span><span><span><span>圣杰：<span>《<a href="https://www.cnblogs.com/sheng-jie/p/18840383" target="_blank">.NET+AI | Semantic Kernel入门到精通</a>》</span></span></span></span></span></span></span></span></span></p>
<p>&nbsp;</p>
<p style="text-align: center"><img src="https://images.cnblogs.com/cnblogs_com/edisonchou/1647700/o_200902144330EdisonTalk-Footer.jpg" alt="" style="width: 65%; border: 1px solid rgba(221, 221, 221, 1); border-radius: 3px; box-shadow: 0 4px 8px rgba(3, 27, 78, 0.12)"></p>
<div id="Copyright">
<p>作者：<span style="text-decoration: underline">爱迪生</span></p>
<p>出处：<a title="from" href="https://edisontalk.cnblogs.com" target="_blank">https://edisontalk.cnblogs.com</a></p>
<p>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。</p>
</div>
</div>
<div id="MySignature" role="contentinfo">
    <div align="center"><a href="https://weibo.com/u/2068032061?s=6uyXnP" target="_blank"><img border="0" src="http://service.t.sina.com.cn/widget/qmd/2068032061/d643d182/10.png"></a></div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0125" data-date-updated="2025-07-17 08:48">2025-07-17 08:30</span>&nbsp;
<a href="https://www.cnblogs.com/edisontalk">EdisonZhou</a>&nbsp;
阅读(<span id="post_view_count">15</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18986198);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18986198', targetLink: 'https://www.cnblogs.com/edisontalk/p/-/quick-start-agent-orchestration-sequential', title: '多Agent协作入门：顺序编排模式' })">举报</a>
</div>
        