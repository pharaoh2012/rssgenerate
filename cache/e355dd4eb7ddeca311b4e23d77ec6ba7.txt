
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xiao987334176/p/18845151" title="发布于 2025-04-24 19:01">
    <span role="heading" aria-level="2">MCP协议Streamable HTTP</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>一、概述</h1>
<p>2025&nbsp;年&nbsp;3&nbsp;月&nbsp;26&nbsp;日，模型上下文协议（Model&nbsp;Context&nbsp;Protocol，简称&nbsp;MCP）引入了一项关键更新：用&nbsp;Streamable&nbsp;HTTP&nbsp;替代原先的&nbsp;HTTP&nbsp;+&nbsp;SSE&nbsp;作为默认传输方式。<br>这一变更在解决原有方案中连接不可恢复、服务端长连接压力大等问题的同时，依然保留了 SSE 带来的流式响应优势。</p>
<h2>HTTP + SSE 的缺陷</h2>
<div>
<div>
<p>远程 <code>MCP</code> 通过 <code>HTTP + SSE</code> 的传输方式工作，存在以下问题，这也是它所被替换的根本原因：</p>
<ul>
<li>不支持恢复连接</li>
<li>要求服务器保持高可用的长连接</li>
<li>服务器只能通过 <code>SSE</code> 发送消息</li>



</ul>
<h3 data-id="heading-2">不支持恢复连接</h3>
<p>如果客户端和服务器之间的 <code>SSE</code> 连接中断了，就无法 “从端点继续”，只能重新开始新的连接，之前的上下文可能会丢失。</p>
<h3 data-id="heading-3">要求服务器保持高可用的长连接</h3>
<p>服务器必须一直保持一个稳定、不中断的 <code>SSE</code> 长连接，否则通信就中断。</p>
<h3 data-id="heading-4">服务器只能通过 <code>SSE</code> 发送消息</h3>
<p>服务器无法在已有的请求之外，主动地发送消息给客户端，除了通过专门的&nbsp;/sse&nbsp;通道。换句话说，它是“单向被动响应”，而不是“任意时机推送”。</p>



</div>



</div>
<div>&nbsp;</div>
<div>
<div>
<div>
<h1 data-id="heading-5">二、Streamable HTTP</h1>
<p><code>Streamable HTTP</code> 并不是传统意义上的 <strong>流式 HTTP</strong>（<code>Streaming HTTP</code>），它指的是一种&nbsp;<strong>兼具以下特性的传输机制</strong>：</p>
<ul>
<li>
<p>以普通&nbsp;<code>HTTP</code>&nbsp;请求为基础，客户端用&nbsp;<code>POST/GET</code>&nbsp;发请求；</p>



</li>
<li>
<p>服务器可选地将响应升级为&nbsp;<code>SSE</code>&nbsp;流，实现 <strong>流式传输</strong> 的能力（当需要时）；</p>



</li>
<li>
<p>去中心化、无强制要求持续连接，支持&nbsp;<code>stateless</code>&nbsp;模式；</p>



</li>
<li>
<p>客户端和服务端之间的消息传输更加灵活，比如同一个&nbsp;<code>/message</code>&nbsp;端点可用于发起请求和接收&nbsp;<code>SSE</code>&nbsp;流；</p>



</li>
<li>
<p>不再需要单独的&nbsp;<code>/sse</code>&nbsp;端点，一切通过统一的&nbsp;<code>/message</code>&nbsp;协议层处理。</p>



</li>



</ul>
<h2 data-id="heading-6">Streamable HTTP 的优势</h2>
<ul>
<li>
<p>支持无状态服务器：无需维持高可用的长连接</p>



</li>
<li>
<p>纯&nbsp;<code>HTTP</code>&nbsp;实现：<code>MCP</code>&nbsp;可在纯&nbsp;<code>HTTP</code>&nbsp;服务中实现，无需&nbsp;<code>SSE</code>&nbsp;支持</p>



</li>
<li>
<p>兼容基础设施：因为 “只是&nbsp;HTTP”，可以与中间件和现有基础设施良好集成</p>



</li>
<li>
<p>向后兼容：是当前 <code>HTTP+SSE</code> 传输方式的渐进式改进</p>



</li>
<li>
<p>灵活的传输方式：服务器可选择是否使用&nbsp;<code>SSE</code>&nbsp;进行流式响应</p>



</li>



</ul>
<h2 data-id="heading-7">从 HTTP+SSE 到 Streamable HTTP 的变化</h2>
<ul>
<li>
<p>移除了&nbsp;<code>/sse</code>&nbsp;端点</p>



</li>
<li>
<p>所有客户端&nbsp;→&nbsp;服务端的消息都通过&nbsp;<code>/message</code>（或类似端点）发送</p>



</li>
<li>
<p>所有客户端&nbsp;→&nbsp;服务端的请求都可以被服务器升级为&nbsp;<code>SSE</code>，以发送通知或请求</p>



</li>
<li>
<p>服务器可以选择建立会话&nbsp;<code>ID</code>&nbsp;以维护状态</p>



</li>
<li>
<p>客户端可以通过对&nbsp;<code>/message</code>&nbsp;发送一个空的&nbsp;<code>GET</code>&nbsp;请求启动&nbsp;<code>SSE</code>&nbsp;流</p>



</li>
<li>
<p>该方法兼容旧版本的实现，并允许服务器保持无状态（如果有需要）</p>



</li>



</ul>



</div>



<br>
<div><img src="https://img2024.cnblogs.com/blog/1341090/202504/1341090-20250424183511029-271171222.png" alt="">
<h1>三、Streamable HTTP demo演示</h1>
<p>目前我所了解到的，Java，Nodejs，这些都已经支持了Streamable HTTP。</p>
<p>之前用的fastmcp框架，目前不支持Streamable HTTP，但是官方表示，未来会支持，具体发布时间待定。</p>
<p>&nbsp;</p>
<p>所以本文要演示Streamable HTTP，只能用Nodejs了，Java代码，我也不会。</p>
<h2>mcp-server-code-runner</h2>
<p>mcp-server-code-runner是github里面的一个支持Streamable HTTP的项目，github地址：<a href="https://github.com/formulahendry/mcp-server-code-runner" target="_blank" rel="noopener nofollow">https://github.com/formulahendry/mcp-server-code-runner</a></p>



</div>




</div>



</div>
<div>
<h3>安装 Node.js</h3>
<p>从 https://nodejs.org/en 安装 LTS 版的 Node.js 即可。</p>



</div>
<div>
<h3>运行Streamable HTTP</h3>
<p>从github上面下载代码之后，进入项目代码目录，运行以下命令即可</p>



</div>
<div>
<div class="cnblogs_code">
<pre>npm <span style="color: rgba(0, 0, 255, 1)">install</span><span style="color: rgba(0, 0, 0, 1)">
npm run build
npm run start:streamableHttp</span></pre>
</div>
<p>执行之后，会输出：</p>
<div class="cnblogs_code">
<pre>&gt; mcp-server-code-runner@<span style="color: rgba(128, 0, 128, 1)">0.1</span>.<span style="color: rgba(128, 0, 128, 1)">6</span><span style="color: rgba(0, 0, 0, 1)"> start:streamableHttp
</span>&gt; node dist/<span style="color: rgba(0, 0, 0, 1)">streamableHttp.js

Code Runner MCP Streamable HTTP Server listening on port </span><span style="color: rgba(128, 0, 128, 1)">3088</span></pre>
</div>
<p>这里可以看到，监听端口是3088</p>
</div>
<div><br>
<h2>Cherry Studio添加Streamable HTTP</h2>
<p>请确保你的Cherry Studio客户端是最新版本，因为只有最新版本，才支持Streamable HTTP</p>
<p>下载地址：<a href="https://github.com/CherryHQ/cherry-studio/releases" target="_blank" rel="noopener nofollow">https://github.com/CherryHQ/cherry-studio/releases</a></p>
<div>目前最新版本是v1.2.7</div>
<div>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202504/1341090-20250424184752275-1247787901.png" alt="" loading="lazy"></p>
<p>安装完成后，点击MCP服务器</p>
<h2>添加MCP服务器</h2>
<p>名称：streamable-http-mcp</p>
<p>类型：Streamable HTTP</p>
<p>URL：http://localhost:3088/mcp</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202504/1341090-20250424184848410-301734606.png" alt="" loading="lazy"></p>
<p><span style="color: rgba(255, 0, 0, 1)"><strong>注意：url后面是mcp，因为官方给的sdk，url后面就是mcp</strong></span></p>
<p><span style="color: rgba(255, 0, 0, 1)"><strong>这里新增了请求头，如果你觉得MCP Server暴露在公网，任何人都可以接入MCP Server不安全，这里是可以做token校验的</strong></span></p>
<p><span style="color: rgba(255, 0, 0, 1)"><strong>需要修改MCP Server里面的逻辑代码，建立请求之前，就校验token。如果是非法token，就返回401错误。</strong></span></p>
<p>&nbsp;</p>
<p>保存成功后，点击工具</p>
<p>这里可以看到一个工具run-code</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202504/1341090-20250424185113850-82335370.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h2>MCP测试</h2>
<p>新建一个默认助手，在对话框，选择MCP设置，选择添加的MCP服务器，streamable-http-mcp</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202504/1341090-20250424185230707-1805705298.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;根据github项目提示，演示了3个问题，分别是：</p>
<div class="cnblogs_code">
<pre>Run the JavaScript Code: console.log(<span style="color: rgba(128, 0, 128, 1)">5</span>+<span style="color: rgba(128, 0, 128, 1)">6</span><span style="color: rgba(0, 0, 0, 1)">)
Where is temporary folder </span><span style="color: rgba(0, 0, 255, 1)">in</span> my OS? Use run-<span style="color: rgba(0, 0, 0, 1)">code tool
How many CPUs </span><span style="color: rgba(0, 0, 255, 1)">do</span> I have <span style="color: rgba(0, 0, 255, 1)">in</span> my machine? Use run-code tool</pre>
</div>
<p>转换为中文</p>
<div class="cnblogs_code">
<pre>运行JavaScript代码：console.log(<span style="color: rgba(128, 0, 128, 1)">5</span>+<span style="color: rgba(128, 0, 128, 1)">6</span><span style="color: rgba(0, 0, 0, 1)">)
我的操作系统中的临时文件夹在哪里？使用运行代码工具
我的机器上有多少个CPU？使用运行代码工具</span></pre>
</div>
<p>&nbsp;</p>
<p>分别输入3个问题</p>
<h3>运行JavaScript代码：console.log(5+6)</h3>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202504/1341090-20250424185530188-1981462949.png" alt="" loading="lazy"></p>
<p>答案是11，是正确的</p>
<h3>我的操作系统中的临时文件夹在哪里？使用运行代码工具</h3>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202504/1341090-20250424185608453-1673074435.png" alt="" loading="lazy"></p>
<p>答案是，C:\Users\98733\AppData\Local\Temp，也是对的。</p>
<h3>我的机器上有多少个CPU？使用运行代码工具</h3>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202504/1341090-20250424185740388-447155998.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>打开任务管理，选择性能，右下角可以看到核心数</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202504/1341090-20250424190012011-1681994560.png" alt="" loading="lazy"></p>
<p>&nbsp;确实是8个，也是正确的。</p>
<p>&nbsp;</p>
<p>网上找了一些文章，使用的python的，基本上都是通过FastAPI来实现的，但是测试下来，效果都不好。</p>
<p>有些代码运行没问题，但是Cherry Studio客户端添加会出现各种报错。</p>
<p>即使添加MCP服务器没报错，但是在聊天窗口调用MCP服务器还是会出现各种报错。</p>
<p>怎么办呢？目前也没有找到能正常使用的python框架，只能等待fastmcp官方更新吧，希望快一些。</p>
</div>
<div>&nbsp;</div>
<div><br>本文参考链接：</div>
<div>https://juejin.cn/post/7493404904725741603<br>https://www.cnblogs.com/formulahendry/p/18837144</div>



</div>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0510710735775463" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-24 19:18">2025-04-24 19:01</span>&nbsp;
<a href="https://www.cnblogs.com/xiao987334176">肖祥</a>&nbsp;
阅读(<span id="post_view_count">13</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18845151);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18845151', targetLink: 'https://www.cnblogs.com/xiao987334176/p/18845151', title: 'MCP协议Streamable HTTP' })">举报</a>
</div>
        