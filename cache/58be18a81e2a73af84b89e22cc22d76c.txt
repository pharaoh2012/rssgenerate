
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lradian/p/18848104" title="发布于 2025-04-26 16:15">
    <span role="heading" aria-level="2">字符串处理函数</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        字符串处理函数
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="strstr函数">strstr函数</h1>
<p>此函数用于从目标字符串中查找子串</p>
<pre><code>char *strstr(const char *haystack, const char *needle);
//haystack：主字符串，即要搜索的字符串
//needle:子字符串，即要查找的字符串
//ret:如果找到子字符串，返回子字符串在主字符串中的起始位置的指针;如果没有找到子字符串，返回 NULL

</code></pre>
<h1 id="strtok函数">strtok函数</h1>
<p>用于字符串分割的函数，它可以根据指定的分隔符将字符串拆分成多个子字符串</p>
<pre><code>char *strtok(char *str, const char *delim);
//str: 是要分割的原始字符串,str 传入 NULL，strtok 会维护一个内部指针来记录上次分割的位置,并记录分隔符后边的地址，如果不是NULL，则记录分隔符前边的字符串的首地址。
//delim:分隔符字符串，包含所有可能的分隔符字符
//ret:返回下一个子字符串的指针,如果没有更多的子字符串，则返回 NULL
</code></pre>
<h1 id="strcpy函数">strcpy函数</h1>
<p>strcpy 是一个字符串拷贝函数，用于将一个字符串的内容复制到另一个字符串中。</p>
<pre><code>char *strcpy(char *dest, const char *src);
//dest：目标字符串，即要将源字符串复制到的位置,dest 必须有足够的空间来存储源字符串（包括字符串结束符 \0）
//src：源字符串，即要复制的内容
//ret:返回目标字符串 dest 的指针
</code></pre>
<h1 id="strncpy函数">strncpy函数</h1>
<p>strncpy 是一个字符串拷贝函数，用于将一个字符串的内容复制到另一个字符串中，并且可以指定最大复制的字符数。</p>
<pre><code>char *strncpy(char *dest, const char *src, size_t n);
//dest：目标字符串，即要将源字符串复制到的位置。注意：dest 必须有足够的空间来存储最多 n 个字符。
//src：源字符串，即要复制的内容
//n:指定最多复制的字符数
//ret:返回目标字符串 dest 的指针
//注意：如果源字符串 src 的长度小于 n，strncpy 会在目标字符串的剩余部分填充 \0，直到总长度达到 n；如果源字符串 src 的长度大于或等于 n，strncpy 只会复制前 n 个字符，不会在目标字符串末尾添加 \0。
</code></pre>
<h1 id="strcmp函数">strcmp函数</h1>
<p>strcmp 是一个字符串比较函数，用于比较两个字符串的大小。</p>
<pre><code>int strcmp(const char *str1, const char *str2);
//str1：第一个要比较的字符串
//str1：第二个要比较的字符串
//ret:返回一个整数值，表示两个字符串的比较结果
//返回值 &lt; 0：表示 str1 小于 str2
//返回值 == 0：表示 str1 等于 str2
//返回值 &gt; 0：表示 str1 大于 str2
//比较是基于字符的 ASCII 值进行的，从第一个字符开始逐个比较，直到遇到不同的字符或字符串结束符 \0
</code></pre>
<h1 id="strncmp函数">strncmp函数</h1>
<p>strncmp 是一个字符串比较函数，用于比较两个字符串的前 n 个字符。它与 strcmp 类似，但提供了更灵活的比较方式，允许用户指定比较的最大字符数.</p>
<pre><code>int strncmp(const char *str1, const char *str2, size_t n);
//str1：第一个要比较的字符串
//str1：第二个要比较的字符串
//n:指定比较的最大字符数
//ret:返回一个整数值，表示两个字符串的比较结果
//返回值 &lt; 0：表示 str1 的前 n 个字符小于 str2 的前 n 个字符。
//返回值 == 0：表示 str1 的前 n 个字符等于 str2 的前 n 个字符。
//返回值 &gt; 0：表示 str1 的前 n 个字符大于 str2 的前 n 个字符。
//比较是基于字符的 ASCII 值进行的，从第一个字符开始逐个比较，直到遇到不同的字符或比较了 n 个字符为止。
</code></pre>
<h1 id="strlen函数">strlen函数</h1>
<p>strlen 是一个函数，用于计算字符串的长度.</p>
<pre><code>size_t strlen(const char *str);
//str：要计算长度的字符串。str 必须是一个以空字符（'\0'）结尾的字符数组，即一个标准的 C 字符串。
//ret:返回字符串的长度（不包括字符串结束符 '\0'），类型为 size_t（无符号整数类型，通常用于表示大小）。如果输入的字符串是空字符串（""），strlen 将返回 0。
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="11.837932230679398" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-26 16:15">2025-04-26 16:15</span>&nbsp;
<a href="https://www.cnblogs.com/lradian">LRadian</a>&nbsp;
阅读(<span id="post_view_count">47</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18848104);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18848104', targetLink: 'https://www.cnblogs.com/lradian/p/18848104', title: '字符串处理函数' })">举报</a>
</div>
        