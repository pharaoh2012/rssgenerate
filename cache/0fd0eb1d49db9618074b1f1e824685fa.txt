
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/linx/p/18863718" title="发布于 2025-05-07 10:09">
    <span role="heading" aria-level="2">Web前端入门第 46 问：CSS 中的数学函数不要只会 calc</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>数学函数可以用来做什么？</p>
<p>最基础的当然是用来进行四则运算了，再进一步可以用来平方，对数，幂，绝对值，取余等，当然还可以用来计算三角函数。</p>
<h2 id="css-中的数学函数">CSS 中的数学函数</h2>
<p>灵活运用 CSS 中的数学函数，可以抛弃很多原本需要 JS 才能实现的布局场景。</p>
<h3 id="calc">calc()</h3>
<p>最基础的四则运算函数，对头，就是用来做小学就学过的加、减、乘、除。</p>
<p>比如有这么一个需求：子元素占用宽度是父元素的一半多20像素！</p>
<p>这个需求，如果用常规的布局思路来看，父元素如果宽度固定 <code>200px</code>，还能简单的算出来，子元素宽度是 <code>120px</code>。</p>
<p>但如果父元素的宽度不固定呢？还能计算出来吗？如果没有 calc 函数，那么唯一的办法就只有拿出 40 米的 JS 大刀了~。</p>
<p>使用 calc 函数，就可以轻松解决这个问题：</p>
<pre><code class="language-css">.box {
  width: 100%;
}
.box .child {
  width: calc(50% + 20px);
}
</code></pre>
<p><strong>注意：</strong></p>
<p>加法(<code>+</code>)、减法(<code>-</code>) 运算符左右两边必须要有空格！原因是如果没有空格字符串，<code>-20px</code> 是表示的负数，而不是减法。</p>
<p>除法中：除数（除号 <code>/</code> 右面的数）必须是一个数字（如：1，1.1，+2，-2.3，1e4），不能是带有单位的值（如：2px，50%，3vw，2em）。与以前学过的除法一样，<code>0</code> 不能作为除数！</p>
<p>乘法中：乘号（<code>*</code>）两边必须有一个数字。原因：<code>calc(20px * 20px)</code> 表示的像素平方，在浏览器中无法解析这种值！！</p>
<p>calc() 的各种使用方式：</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;div class="child"&gt;calc(50% + 20px)&lt;/div&gt;
  &lt;div class="child"&gt;calc(12 * 20px)&lt;/div&gt;
  &lt;div class="child"&gt;calc(100% / 3)&lt;/div&gt;
  &lt;div class="child"&gt;calc(10em + 40px)&lt;/div&gt;
  &lt;div class="child"&gt;calc(var(--child-width) + 40px - 20px)&lt;/div&gt;
  &lt;div class="child"&gt;calc((((40vw + 20px) * 3) - 500px) / 5)&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
.box {
  margin: 20px 0;
  width: 400px;
  border: var(--base-border, 2px solid rgba(255, 71, 87,0.3));
}
.box .child {
  margin: 10px;
  border: 1px solid #ffa947;
  padding: 10px;
}
.box .child:nth-of-type(1) {
  /* 加法 */
  width: calc(50% + 20px);
}
.box .child:nth-of-type(2) {
  /* 乘法 */
  width: calc(12 * 20px);
}
.box .child:nth-of-type(3) {
  /* 除法 */
  width: calc(100% / 3);
}
.box .child:nth-of-type(4) {
  /* 不同的单位加法 */
  width: calc(10em + 40px);
}
.box .child:nth-of-type(5) {
  /* 使用 CSS 变量 */
  --child-width: 16vw;
  width: calc(var(--child-width) + 40px - 20px);
}
.box .child:nth-of-type(6) {
  /* 复杂的四则运算 */
  width: calc((((40vw + 20px) * 3) - 500px) / 5);
}
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202505/596097-20250507100755660-624467442.png" alt="" width="320" loading="lazy"></p>
<h3 id="min">min()</h3>
<p><code>min()</code> 用于获取一组数值中的最小值。通常用于比较不同单位之间的最小值，比如 <code>min(400px, 50%, 20em, 10vw)</code></p>
<p>使用示例：</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;div class="child"&gt;min(230px, 220px)&lt;/div&gt;
  &lt;div class="child"&gt;min(50%, 220px)&lt;/div&gt;
  &lt;div class="child"&gt;min(20vw, 20em, 1000px)&lt;/div&gt;
  &lt;div class="child"&gt;min(var(--child-width), 100em, calc(100% * 0.85))&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
.box {
  margin: 20px 0;
  width: 400px;
  border: var(--base-border, 2px solid rgba(255, 71, 87,0.3));
}
.box .child {
  margin: 10px;
  border: 1px solid #ffa947;
  padding: 10px;
}
.box .child:nth-of-type(1) {
  /* 相同单位比较 */
  width: min(230px, 220px);
}
.box .child:nth-of-type(2) {
  /* 不同单位比较 */
  width: min(50%, 220px);
}
.box .child:nth-of-type(3) {
  /* 多个不同单位比较 */
  width: min(20vw, 20em, 1000px);
}
.box .child:nth-of-type(4) {
  /* 使用 var 和 calc */
  --child-width: 26vw;
  width: min(var(--child-width), 100em, calc(100% * 0.85));
}
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202505/596097-20250507100810348-1508760897.png" alt="" width="320" loading="lazy"></p>
<h3 id="max">max()</h3>
<p><code>max()</code> 用于获取一组数值中的最大值。与 <code>min()</code> 类似，作用相反取最大值，比如 <code>max(400px, 50%, 20em, 10vw)</code></p>
<p>使用示例：</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;div class="child"&gt;max(230px, 220px)&lt;/div&gt;
  &lt;div class="child"&gt;max(50%, 220px)&lt;/div&gt;
  &lt;div class="child"&gt;max(20vw, 20em, 300px)&lt;/div&gt;
  &lt;div class="child"&gt;max(var(--child-width), 6em, calc(100% * 0.9))&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
.box {
  margin: 20px 0;
  width: 400px;
  border: var(--base-border, 2px solid rgba(255, 71, 87,0.3));
}
.box .child {
  margin: 10px;
  border: 1px solid #ffa947;
  padding: 10px;
}
.box .child:nth-of-type(1) {
  /* 相同单位比较 */
  width: max(230px, 220px);
}
.box .child:nth-of-type(2) {
  /* 不同单位比较 */
  width: max(50%, 220px);
}
.box .child:nth-of-type(3) {
  /* 多个不同单位比较 */
  width: max(20vw, 20em, 300px);
}
.box .child:nth-of-type(4) {
  /* 使用 var 和 calc */
  --child-width: 6vw;
  width: max(var(--child-width), 6em, calc(100% * 0.9));
}
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202505/596097-20250507100815477-1513736073.png" alt="" width="320" loading="lazy"></p>
<h3 id="clamp">clamp()</h3>
<p>此函数是 <code>min()</code> 和 <code>max()</code> 的结合体，可以同时指定最小值和最大值以及限定值，使用方式：<code>clamp(min, value, max)</code>。</p>
<p>比如 <code>clamp(400px, 50%, 20em)</code> 表示如果 50% 小于 400px，则取 400px，如果 50% 大于 20em，则取 20em，否则取 50%。</p>
<p>使用示例：</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;div class="child"&gt;clamp(180px, 50%, 100px)&lt;/div&gt;
  &lt;div class="child"&gt;clamp(100px, 60%, 320px)&lt;/div&gt;
  &lt;div class="child"&gt;clamp(20vw, 20em, 300px)&lt;/div&gt;
  &lt;div class="child"&gt;clamp(var(--child-width), 20em, calc(100% * 0.9))&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
.box {
  margin: 20px 0;
  width: 400px;
  border: var(--base-border, 2px solid rgba(255, 71, 87,0.3));
  resize: both;
  overflow: auto;
}
.box .child {
  margin: 10px;
  border: 1px solid #ffa947;
  padding: 10px;
}
.box .child:nth-of-type(1) {
  /* 最小值180px 大于了 最大值 100px，直接应用了 180px */
  width: clamp(180px, 50%, 100px);
}
.box .child:nth-of-type(2) {
  /* 子元素大小必在 100px ~ 320px 之间 */
  width: clamp(100px, 60%, 320px);
}
.box .child:nth-of-type(3) {
  /* 子元素大小必在 10% ~ 90% 之间 */
  width: clamp(10%, 20em, 90%);
}
.box .child:nth-of-type(4) {
  /* 也可使用 var 和 calc */
  --child-width: 6vw;
  width: clamp(var(--child-width), 20em, calc(100% * 0.9));
}
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202505/596097-20250507100821497-1728730837.png" alt="" width="320" loading="lazy"></p>
<h3 id="一个组合应用例子">一个组合应用例子</h3>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;div class="child"&gt;组合应用&lt;/div&gt;
  &lt;div class="child"&gt;组合应用&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
.box {
  margin: 20px 0;
  width: 400px;
  border: var(--base-border, 2px solid rgba(255, 71, 87,0.3));
  resize: both;
  overflow: auto;
}
.box .child {
  margin: 10px;
  border: 1px solid #ffa947;
  padding: 10px;
}
.box .child:nth-of-type(1) {
  --base-width: 10%;
  width: clamp(min(20px, 10rem), calc(var(--base-width) * 6), max(100%, 100vw));
}
.box .child:nth-of-type(2) {
  --base-width: 10%;
  width: clamp(min(20px, var(--base-width)), calc(min(var(--base-width) * 4, 300px)), max(calc(var(--base-width) * 9), 100vw));
}
&lt;/style&gt;
</code></pre>
<p>可以看到上面例子中，clamp 函数可以嵌套 min、calc、max 函数，calc 函数也可以可以嵌套使用 min 函数，max 函数也可以使用 calc 的计算结果。</p>
<p>套娃一样的用法，可以组合出各种复杂的运算场景！！</p>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202505/596097-20250507100828810-1422642392.png" alt="" width="320" loading="lazy"></p>
<h2 id="其他数学函数">其他数学函数</h2>
<p>对于 CSS 布局而言，四个基本的数学函数已经完全足够了，但在一些 3D 和动画场景中，您可能会用到一些其他数学运算函数，目前 CSS 支持的数学运算函数如下：</p>
<h3 id="阶跃值函数">阶跃值函数</h3>
<p><code>round()</code> <code>实验性</code> 根据舍入策略计算一个舍入的数字。</p>
<p><code>mod()</code> <code>实验性</code> 计算一个数除以另一个数的模（与除数的符号相同）。</p>
<p><code>rem()</code> <code>实验性</code> 计算一个数字除以另一个数字的余数（与被除数的符号相同）。</p>
<h3 id="三角函数">三角函数</h3>
<p><code>sin()</code> 计算一个数的三角函数正弦值。</p>
<p><code>cos()</code> 计算一个数的三角函数余弦值。</p>
<p><code>tan()</code> 计算一个数的三角函数正切值。</p>
<p><code>asin()</code> 计算一个数的三角函数反正弦值。</p>
<p><code>acos()</code> 计算一个数的三角函数反余弦值。</p>
<p><code>atan()</code> 计算一个数的三角函数反正切值。</p>
<p><code>atan2()</code> 计算平面内两个数字的三角函数反正切值。</p>
<h3 id="指数函数">指数函数</h3>
<p><code>pow()</code> 计算基数的幂次方值。</p>
<p><code>sqrt()</code> 计算一个数的平方根。</p>
<p><code>hypot()</code> 计算其参数平方之和的平方根。</p>
<p><code>log()</code> 计算一个数的对数值。</p>
<p><code>exp()</code> 计算一个数的 e 次方值。</p>
<h3 id="符号函数">符号函数</h3>
<p><code>abs()</code> <code>实验性</code> 计算一个数的绝对值。</p>
<p><code>sign()</code> <code>实验性</code> 计算一个数的符号值（正值或负值）。</p>
<p>对于高级运算函数有兴趣可以参阅 MDN 文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Values_and_Units/CSS_Value_Functions" target="_blank" rel="noopener nofollow">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Values_and_Units/CSS_Value_Functions</a></p>
<h2 id="写在最后">写在最后</h2>
<p>在响应式布局中，灵活运用数学函数，可以简化很多不必要的代码，也许您都可以放弃部分非必要的 <code>媒体查询</code> 代码。</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>&nbsp;</p>
<p style="font-size: 18px;font-weight: bold;">文章收录于微信公众号【<span style="color:rgb(255, 71, 87)">前端路引</span>】，欢迎 <span style="color:#4ec259">微信扫一扫</span> 查看更多文章。</p>
<p>
  <img style="max-width: 320px;" src="https://images.cnblogs.com/cnblogs_com/linx/2447020/o_250228035031_%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png">
</p>
<p>本文来自博客园，作者：<a href="https://www.cnblogs.com/linx/" target="_blank">前端路引</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/linx/p/18863718" target="_blank">https://www.cnblogs.com/linx/p/18863718</a></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.3418611359085648" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-07 10:10">2025-05-07 10:09</span>&nbsp;
<a href="https://www.cnblogs.com/linx">前端路引</a>&nbsp;
Views(<span id="post_view_count">38</span>)&nbsp;
Comments(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18863718);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18863718', targetLink: 'https://www.cnblogs.com/linx/p/18863718', title: 'Web前端入门第 46 问：CSS 中的数学函数不要只会 calc' })">举报</a>
</div>
	