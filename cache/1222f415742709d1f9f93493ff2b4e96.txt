
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/rcg714786690/p/18784033" title="发布于 2025-03-20 21:43">
    <span role="heading" aria-level="2">VTK-8.2.0源码编译和初步使用(Cmake+VS2015+Qt5.14.2)</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><strong>一、准备数据</strong></p>
<p>1、首先确保已安装VS5015和Qt5.14.2</p>
<p>2、下载Cmake并安装：<a href="https://cmake.org/download/" rel="noopener nofollow">Download CMake</a></p>
<p>3、下载VTK-8.2.0源码和数据并解压：<a href="https://vtk.org/download/" rel="noopener nofollow">Download | VTK</a><a href="https://vtk.org/download/" rel="noopener nofollow"><br></a></p>
<p><strong>二、Cmake构建</strong></p>
<p>1、在本地磁盘创建相关文件夹</p>
<p><img src="https://img2024.cnblogs.com/blog/1600978/202503/1600978-20250320203802249-193424634.png" alt="" loading="lazy"></p>
<p>2、进入源码根目录，找到CmakeList.txt，修改CmakeList.txt中的选项，使得Debug模式下生成的lib和dll文件能自带后缀_d，便于Release的库文件进行区分，否则后面可能编译或链接有问题。</p>
<p><img src="https://img2024.cnblogs.com/blog/1600978/202503/1600978-20250320205245757-897449616.png" alt="" loading="lazy"></p>
<p>3、在Cmake中填入源码位置，编译后的位置，勾选Grouped方便看分组，点击Configure，选择VS2015，x64，点击Finish，等待配置完成。</p>
<p><img src="https://img2024.cnblogs.com/blog/1600978/202503/1600978-20250320204206435-1912668573.png" alt="" loading="lazy"></p>
<p>4、按下图勾选，并设置库文件统一存放目录，再次点击Configure。（如果勾选BUILD_TESTING后期VS编译时间会比较长，默认不勾选）</p>
<p><img src="https://img2024.cnblogs.com/blog/1600978/202503/1600978-20250320205835742-524183297.png" alt="" loading="lazy"></p>
<p>&nbsp;5、确认Qt的相关目录是否正确，不正确手动修改为正确的Qt的目录，VTK_QT_VERSION根据自己的Qt版本选择5或6，再次Configure，直至确认所有红色选项消失，点击Generate</p>
<p><img src="https://img2024.cnblogs.com/blog/1600978/202503/1600978-20250320210224080-194591995.png" alt="" loading="lazy"></p>
<p>6、进入VTK-8.2.0-Build目录，找到VTK.sln，用VS2015打开，先选择Debug, x64平台，解决方案管理器中，找到INSTALL项目，右键，生成，等待VS编译完成。再选择Release，x64平台，再次生成INSTALL项目。</p>
<p><img src="https://img2024.cnblogs.com/blog/1600978/202503/1600978-20250320210948454-190759454.png" alt="" loading="lazy"></p>
<p>&nbsp;7、VS编译完成后，在VTK-8.2.0-Install文件夹中就会有我们想要的头文件、库文件(Debug和Release库都在里面)，随后将bin文件夹加入系统环境变量，方便后续VS或Qt中使用</p>
<p><img src="https://img2024.cnblogs.com/blog/1600978/202503/1600978-20250320211533679-880117283.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1600978/202503/1600978-20250320212256641-560910359.png" alt="" loading="lazy"></p>
<p>&nbsp;三、在QCreator中创建工程VTKTest，以官方代码Hello VTK为例，</p>
<p>1、打开pro文件，添加VTK库文件</p>
<p><img src="https://img2024.cnblogs.com/blog/1600978/202503/1600978-20250320212957117-385547867.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre>INCLUDEPATH += E:\Code\VTK-<span style="color: rgba(128, 0, 128, 1)">8.2</span>.<span style="color: rgba(128, 0, 128, 1)">0</span>-Install\include\vtk-<span style="color: rgba(128, 0, 128, 1)">8.2</span><span style="color: rgba(0, 0, 0, 1)">

win32:CONFIG(debug, debug</span>|release): LIBS += -LE:\Code\VTK-<span style="color: rgba(128, 0, 128, 1)">8.2</span>.<span style="color: rgba(128, 0, 128, 1)">0</span>-<span style="color: rgba(0, 0, 0, 1)">Install\lib \
                        </span>-lvtkFiltersSources-<span style="color: rgba(128, 0, 128, 1)">8</span><span style="color: rgba(0, 0, 0, 1)">.2_d \
                        </span>-lvtkCommonColor-<span style="color: rgba(128, 0, 128, 1)">8</span><span style="color: rgba(0, 0, 0, 1)">.2_d \
                        </span>-lvtkCommonCore-<span style="color: rgba(128, 0, 128, 1)">8</span><span style="color: rgba(0, 0, 0, 1)">.2_d \
                        </span>-lvtkCommonExecutionModel-<span style="color: rgba(128, 0, 128, 1)">8</span><span style="color: rgba(0, 0, 0, 1)">.2_d \
                        </span>-lvtkFiltersSources-<span style="color: rgba(128, 0, 128, 1)">8</span><span style="color: rgba(0, 0, 0, 1)">.2_d \
                        </span>-lvtkInteractionStyle-<span style="color: rgba(128, 0, 128, 1)">8</span><span style="color: rgba(0, 0, 0, 1)">.2_d \
                        </span>-lvtkRenderingContextOpenGL2-<span style="color: rgba(128, 0, 128, 1)">8</span><span style="color: rgba(0, 0, 0, 1)">.2_d \
                        </span>-lvtkRenderingCore-<span style="color: rgba(128, 0, 128, 1)">8</span><span style="color: rgba(0, 0, 0, 1)">.2_d \
                        </span>-lvtkRenderingFreeType-<span style="color: rgba(128, 0, 128, 1)">8</span><span style="color: rgba(0, 0, 0, 1)">.2_d \
                        </span>-lvtkRenderingGL2PSOpenGL2-<span style="color: rgba(128, 0, 128, 1)">8</span><span style="color: rgba(0, 0, 0, 1)">.2_d \
                        </span>-lvtkRenderingOpenGL2-<span style="color: rgba(128, 0, 128, 1)">8</span><span style="color: rgba(0, 0, 0, 1)">.2_d \
                        </span>-lvtkGUISupportQt-<span style="color: rgba(128, 0, 128, 1)">8</span><span style="color: rgba(0, 0, 0, 1)">.2_d
</span><span style="color: rgba(0, 0, 255, 1)">else</span>:win32:CONFIG(release, debug|release): LIBS +=-LE:\Code\VTK-<span style="color: rgba(128, 0, 128, 1)">8.2</span>.<span style="color: rgba(128, 0, 128, 1)">0</span>-<span style="color: rgba(0, 0, 0, 1)">Install\lib \
                        </span>-lvtkFiltersSources-<span style="color: rgba(128, 0, 128, 1)">8.2</span><span style="color: rgba(0, 0, 0, 1)"> \
                        </span>-lvtkCommonColor-<span style="color: rgba(128, 0, 128, 1)">8.2</span><span style="color: rgba(0, 0, 0, 1)"> \
                        </span>-lvtkCommonCore-<span style="color: rgba(128, 0, 128, 1)">8.2</span><span style="color: rgba(0, 0, 0, 1)"> \
                        </span>-lvtkCommonExecutionModel-<span style="color: rgba(128, 0, 128, 1)">8.2</span><span style="color: rgba(0, 0, 0, 1)"> \
                        </span>-lvtkFiltersSources-<span style="color: rgba(128, 0, 128, 1)">8.2</span><span style="color: rgba(0, 0, 0, 1)"> \
                        </span>-lvtkInteractionStyle-<span style="color: rgba(128, 0, 128, 1)">8.2</span><span style="color: rgba(0, 0, 0, 1)"> \
                        </span>-lvtkRenderingContextOpenGL2-<span style="color: rgba(128, 0, 128, 1)">8.2</span><span style="color: rgba(0, 0, 0, 1)"> \
                        </span>-lvtkRenderingCore-<span style="color: rgba(128, 0, 128, 1)">8.2</span><span style="color: rgba(0, 0, 0, 1)"> \
                        </span>-lvtkRenderingFreeType-<span style="color: rgba(128, 0, 128, 1)">8.2</span><span style="color: rgba(0, 0, 0, 1)"> \
                        </span>-lvtkRenderingGL2PSOpenGL2-<span style="color: rgba(128, 0, 128, 1)">8.2</span><span style="color: rgba(0, 0, 0, 1)"> \
                        </span>-lvtkRenderingOpenGL2-<span style="color: rgba(128, 0, 128, 1)">8.2</span><span style="color: rgba(0, 0, 0, 1)"> \
                        </span>-lvtkGUISupportQt-<span style="color: rgba(128, 0, 128, 1)">8.2</span></pre>
</div>
<p>2、在main.cpp中添加初始化代码</p>
<p><img src="https://img2024.cnblogs.com/blog/1600978/202503/1600978-20250320213653562-1257685641.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre>#include&lt;vtkAutoInit.h&gt;<span style="color: rgba(0, 0, 0, 1)">
VTK_MODULE_INIT(vtkRenderingOpenGL2)
VTK_MODULE_INIT(vtkInteractionStyle)
VTK_MODULE_INIT(vtkRenderingFreeType)</span></pre>
</div>
<p>3、MainWindow.cpp，添加相关代码</p>
<div class="cnblogs_code">
<pre>#include <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MainWindow.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ui_MainWindow.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">

#include </span>&lt;vtkActor.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;vtkCamera.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;vtkCylinderSource.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;vtkNamedColors.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;vtkNew.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;vtkPolyDataMapper.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;vtkProperty.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;vtkRenderWindow.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;vtkRenderWindowInteractor.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;vtkRenderer.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;vtkGenericOpenGLRenderWindow.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;array&gt;<span style="color: rgba(0, 0, 0, 1)">

MainWindow::MainWindow(QWidget </span>*<span style="color: rgba(0, 0, 0, 1)">parent)
    : QMainWindow(parent)
    , ui(</span><span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Ui::MainWindow)
    , m_pScene(nullptr)
{
    ui</span>-&gt;setupUi(<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">);

    m_pScene </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> QVTKOpenGLWidget();
    </span><span style="color: rgba(0, 0, 255, 1)">this</span>-&gt;<span style="color: rgba(0, 0, 0, 1)">setCentralWidget(m_pScene);

    vtkNew</span>&lt;vtkNamedColors&gt;<span style="color: rgba(0, 0, 0, 1)"> colors;

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Set the background color.</span>
    std::array&lt;unsigned <span style="color: rgba(0, 0, 255, 1)">char</span>, <span style="color: rgba(128, 0, 128, 1)">4</span>&gt; bkg{{<span style="color: rgba(128, 0, 128, 1)">26</span>, <span style="color: rgba(128, 0, 128, 1)">51</span>, <span style="color: rgba(128, 0, 128, 1)">102</span>, <span style="color: rgba(128, 0, 128, 1)">255</span><span style="color: rgba(0, 0, 0, 1)">}};
    colors</span>-&gt;SetColor(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">BkgColor</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, bkg.data());

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> This creates a polygonal cylinder model with eight circumferential facets
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> (i.e, in practice an octagonal prism).</span>
    vtkNew&lt;vtkCylinderSource&gt;<span style="color: rgba(0, 0, 0, 1)"> cylinder;
    cylinder</span>-&gt;SetResolution(<span style="color: rgba(128, 0, 128, 1)">8</span><span style="color: rgba(0, 0, 0, 1)">);

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> The mapper is responsible for pushing the geometry into the graphics
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> library. It may also do color mapping, if scalars or other attributes are
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> defined.</span>
    vtkNew&lt;vtkPolyDataMapper&gt;<span style="color: rgba(0, 0, 0, 1)"> cylinderMapper;
    cylinderMapper</span>-&gt;SetInputConnection(cylinder-&gt;<span style="color: rgba(0, 0, 0, 1)">GetOutputPort());

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> The actor is a grouping mechanism: besides the geometry (mapper), it
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> also has a property, transformation matrix, and/or texture map.
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Here we set its color and rotate it around the X and Y axes.</span>
    vtkNew&lt;vtkActor&gt;<span style="color: rgba(0, 0, 0, 1)"> cylinderActor;
    cylinderActor</span>-&gt;<span style="color: rgba(0, 0, 0, 1)">SetMapper(cylinderMapper);
    cylinderActor</span>-&gt;GetProperty()-&gt;<span style="color: rgba(0, 0, 0, 1)">SetColor(
        colors</span>-&gt;GetColor4d(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Tomato</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">).GetData());
    cylinderActor</span>-&gt;RotateX(<span style="color: rgba(128, 0, 128, 1)">30.0</span><span style="color: rgba(0, 0, 0, 1)">);
    cylinderActor</span>-&gt;RotateY(-<span style="color: rgba(128, 0, 128, 1)">45.0</span><span style="color: rgba(0, 0, 0, 1)">);

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> The renderer generates the image
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> which is then displayed on the render window.
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> It can be thought of as a scene to which the actor is added</span>
    vtkNew&lt;vtkRenderer&gt;<span style="color: rgba(0, 0, 0, 1)"> renderer;
    renderer</span>-&gt;<span style="color: rgba(0, 0, 0, 1)">AddActor(cylinderActor);
    renderer</span>-&gt;SetBackground(colors-&gt;GetColor3d(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">BkgColor</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">).GetData());
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Zoom in a little by accessing the camera and invoking its "Zoom" method.</span>
    renderer-&gt;<span style="color: rgba(0, 0, 0, 1)">ResetCamera();
    renderer</span>-&gt;GetActiveCamera()-&gt;Zoom(<span style="color: rgba(128, 0, 128, 1)">1.5</span><span style="color: rgba(0, 0, 0, 1)">);

    vtkSmartPointer</span>&lt;vtkGenericOpenGLRenderWindow&gt; window = vtkSmartPointer&lt;vtkGenericOpenGLRenderWindow&gt;<span style="color: rgba(0, 0, 0, 1)">::New();
    window</span>-&gt;<span style="color: rgba(0, 0, 0, 1)">AddRenderer(renderer);


    m_pScene</span>-&gt;<span style="color: rgba(0, 0, 0, 1)">SetRenderWindow(window);
    m_pScene</span>-&gt;GetRenderWindow()-&gt;<span style="color: rgba(0, 0, 0, 1)">Render();
    m_pScene</span>-&gt;GetRenderWindow()-&gt;<span style="color: rgba(0, 0, 0, 1)">Start();
}

MainWindow::</span>~<span style="color: rgba(0, 0, 0, 1)">MainWindow()
{
    </span><span style="color: rgba(0, 0, 255, 1)">delete</span><span style="color: rgba(0, 0, 0, 1)"> ui;
}</span></pre>
</div>
<p>4、结果。</p>
<p><img src="https://img2024.cnblogs.com/blog/1600978/202503/1600978-20250320213955611-1020210892.png" alt="" loading="lazy"></p>
<p><strong>总结：</strong></p>
<p><strong>最好事先在Debug模式下加入后缀_d，否则容易混淆库文件，按上述步骤，在Debug模式和Release模式下都可以运行！</strong></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.35454816584375" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-20 21:44">2025-03-20 21:43</span>&nbsp;
<a href="https://www.cnblogs.com/rcg714786690">任小七</a>&nbsp;
阅读(<span id="post_view_count">8</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18784033" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18784033);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18784033', targetLink: 'https://www.cnblogs.com/rcg714786690/p/18784033', title: 'VTK-8.2.0源码编译和初步使用(Cmake+VS2015+Qt5.14.2)' })">举报</a>
</div>
	