
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/TheMagicalRainbowSea/p/19048145" title="发布于 2025-08-20 10:59">
    <span role="heading" aria-level="2">伙伴匹配系统(移动端 H5 网站（APP 风格）基于Spring Boot 后端 + Vue3 - 06</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="伙伴匹配系统移动端-h5-网站app-风格基于spring-boot-后端--vue3---06">伙伴匹配系统(移动端 H5 网站（APP 风格）基于Spring Boot 后端 + Vue3 - 06</h1>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105925175-1700564623.gif" class="lazyload"></p>
<p><strong>项目地址：</strong></p>
<ul>
<li>Github：<a href="https://github.com/China-Rainbow-sea/yupao" target="_blank" rel="noopener nofollow">https://github.com/China-Rainbow-sea/yupao</a></li>
<li>Gitee：<a href="https://gitee.com/Rainbow--Sea/yupao" target="_blank" rel="noopener nofollow">https://gitee.com/Rainbow--Sea/yupao</a></li>
</ul>
<p>@</p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#伙伴匹配系统移动端-h5-网站app-风格基于spring-boot-后端--vue3---06" rel="noopener nofollow">伙伴匹配系统(移动端 H5 网站（APP 风格）基于Spring Boot 后端 + Vue3 - 06</a></li><li><a href="#上线部署" rel="noopener nofollow">上线部署：</a></li><li><a href="#免备案快速上线方案" rel="noopener nofollow">免备案快速上线方案：</a></li><li><a href="#快速启动项目" rel="noopener nofollow">快速启动项目</a><ul><li><a href="#快速本地启动前端" rel="noopener nofollow">快速本地启动前端</a></li><li><a href="#快速本地启动后端" rel="noopener nofollow">快速本地启动后端</a></li></ul></li><li><a href="#补充" rel="noopener nofollow">补充</a></li><li><a href="#优化点" rel="noopener nofollow">优化点：</a></li><li><a href="#最后" rel="noopener nofollow">最后：</a></li></ul></div><p></p>
<h1 id="上线部署">上线部署：</h1>
<p>先区分多环境：前端区分开发和线上接口，后端 prod 改为用户线上公网可访问的数据库。</p>
<h1 id="免备案快速上线方案">免备案快速上线方案：</h1>
<ul>
<li><strong>前端：</strong> Vercerl(免费国外的慢了一些)：<a href="https://vercel.com/" target="_blank" rel="noopener nofollow">https://vercel.com/</a></li>
</ul>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105915716-217076470.png" class="lazyload"></p>
<p><strong>前端打包方式：</strong></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105915516-620696396.png" class="lazyload"></p>
<p>我们可以，忽略 Vite 的规范提示，直接打包</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105918233-768405454.png" class="lazyload"></p>
<pre><code class="language-json">  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
</code></pre>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105915006-1313256409.png" class="lazyload"></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105915581-1584631368.png" class="lazyload"></p>
<p>这里使用 Vercerl 需要安装如下 serve 工具：执行如下命令：</p>
<pre><code class="language-shell">npm i -g serve
</code></pre>
<p>安装好之后，就可以使用该 vercel 了</p>
<pre><code class="language-shell">vercel --prod
</code></pre>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105918013-1005213293.png" class="lazyload"></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105916043-594061292.png" class="lazyload"></p>
<ul>
<li><strong>后端：</strong>微信云托管(部署容器的平台，付费)：<a href="https://cloud.weixin.qq.com/cloudrun" target="_blank" rel="noopener nofollow">https://cloud.weixin.qq.com/cloudrun</a></li>
</ul>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105917338-221551558.png" class="lazyload"></p>
<h1 id="快速启动项目">快速启动项目</h1>
<h2 id="快速本地启动前端">快速本地启动前端</h2>
<ol>
<li>安装 node &gt;= 16</li>
<li>在项目的控制台输入如下命令</li>
</ol>
<pre><code class="language-shell">npm install --force
</code></pre>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105915608-1230592341.png" class="lazyload"></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105918149-2051766285.png" class="lazyload"></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105916293-1516645175.png" class="lazyload"></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105916327-381537630.png" class="lazyload"></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105917906-1753643621.png" class="lazyload"></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105915585-2095384230.png" class="lazyload"></p>
<h2 id="快速本地启动后端">快速本地启动后端</h2>
<ol>
<li>导入项目：JDK 1.8</li>
<li>配置 本地 Maven ，使用 Maven 加载依赖</li>
<li>需要安装：MySQL5/8，Redis</li>
<li>MySQL 创建如下数据表：</li>
</ol>
<pre><code class="language-sql">create table tag
(
    id           bigint auto_increment comment 'id'
        primary key,
    tagName      varchar(256)                       null comment '标签名称',
    userId       bigint                             null comment '用户id',
    parenId      bigint                             null comment '父标签 id',
    isParent     tinyint                            null comment '0 - 不是, 1- 父标签',
    createTime   datetime default CURRENT_TIMESTAMP null comment '创建时间',
    updateTime   datetime default CURRENT_TIMESTAMP null comment '更新时间',
    isDelete     tinyint  default 0                 not null comment '是否删除 0 1（逻辑删除）'
)
    comment '标签';


--   为 user 表，添加上一个新的 tags 字段
alter table user add column tags varchar(1024) null comment '标签列表';



# 数据库初始化
# @author &lt;a href="https://github.com/China-Rainbow-sea"&gt;
create
database if not exists yupao;

use
yupao;

-- 用户表
create table user
(
    username     varchar(256) null comment '用户昵称',
    id           bigint auto_increment comment 'id'
        primary key,
    userAccount  varchar(256) null comment '账号',
    avatarUrl    varchar(1024) null comment '用户头像',
    gender       tinyint null comment '性别',
    userPassword varchar(512)       not null comment '密码',
    phone        varchar(128) null comment '电话',
    email        varchar(512) null comment '邮箱',
    userStatus   int      default 0 not null comment '状态 0 - 正常',
    createTime   datetime default CURRENT_TIMESTAMP null comment '创建时间',
    updateTime   datetime default CURRENT_TIMESTAMP null on update CURRENT_TIMESTAMP,
    isDelete     tinyint  default 0 not null comment '是否删除',
    userRole     int      default 0 not null comment '用户角色 0 - 普通用户 1 - 管理员',
    planetCode   varchar(512) null comment '星球编号',
    tags         varchar(1024) null comment '标签 json 列表'
) comment '用户';

-- 队伍表
create table team
(
    id          bigint auto_increment comment 'id' primary key,
    name        varchar(256)       not null comment '队伍名称',
    description varchar(1024) null comment '描述',
    maxNum      int      default 1 not null comment '最大人数',
    expireTime  datetime null comment '过期时间',
    userId      bigint comment '用户id（队长 id）',
    status      int      default 0 not null comment '0 - 公开，1 - 私有，2 - 加密',
    password    varchar(512) null comment '密码',
    createTime  datetime default CURRENT_TIMESTAMP null comment '创建时间',
    updateTime  datetime default CURRENT_TIMESTAMP null on update CURRENT_TIMESTAMP,
    isDelete    tinyint  default 0 not null comment '是否删除'
) comment '队伍';

-- 用户队伍关系
create table user_team
(
    id         bigint auto_increment comment 'id'
        primary key,
    userId     bigint comment '用户id',
    teamId     bigint comment '队伍id',
    joinTime   datetime null comment '加入时间',
    createTime datetime default CURRENT_TIMESTAMP null comment '创建时间',
    updateTime datetime default CURRENT_TIMESTAMP null on update CURRENT_TIMESTAMP,
    isDelete   tinyint  default 0 not null comment '是否删除'
) comment '用户队伍关系';


-- 标签表（可以不创建，因为标签字段已经放到了用户表中）
create table tag
(
    id         bigint auto_increment comment 'id'
        primary key,
    tagName    varchar(256) null comment '标签名称',
    userId     bigint null comment '用户 id',
    parentId   bigint null comment '父标签 id',
    isParent   tinyint null comment '0 - 不是, 1 - 父标签',
    createTime datetime default CURRENT_TIMESTAMP null comment '创建时间',
    updateTime datetime default CURRENT_TIMESTAMP null on update CURRENT_TIMESTAMP,
    isDelete   tinyint  default 0 not null comment '是否删除',
    constraint uniIdx_tagName
        unique (tagName)
) comment '标签';

# https://t.zsxq.com/0emozsIJh

create index idx_userId
    on tag (userId);
</code></pre>
<ol start="5">
<li>修改 resources 目录下的 <code>application.yaml</code>的配置文件，主要是修改其中的：MySQL，以及 Redis 的配置</li>
</ol>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105916513-1743451572.png" class="lazyload"></p>
<ol start="5">
<li>后端处理访问的地址路径的修改：为你自己的</li>
</ol>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105914629-534560180.png" class="lazyload"></p>
<pre><code class="language-java">@CrossOrigin(origins = {"http://localhost:5173","http://localhost:3000"})  // 配置前端访问路径的放行,可以配置多个

</code></pre>
<ol start="6">
<li>后端<strong>跨域问题</strong>处理配置，你自己想要放行的路径地址：在 yupao-backend/src/main/java/com/rainbowsea/yupao/config/WebMvcConfg.java 目录下</li>
</ol>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105915605-564209401.png" class="lazyload"></p>
<ol start="7">
<li>该项目的 Swagger  接口文档地址：<a href="http://localhost:8080/api/doc.html" target="_blank" rel="noopener nofollow">http://localhost:8080/api/doc.html</a></li>
</ol>
<h1 id="补充">补充</h1>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105916298-2034715804.png" class="lazyload"></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105915477-1178446730.png" class="lazyload"></p>
<p>坑点：</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105914680-840069951.png" class="lazyload"></p>
<p>拷贝，复制，工具类</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105915155-992785592.png" class="lazyload"></p>
<p><strong>技巧：</strong></p>
<p>当如果我们想要，让每个包装类，映射到前端的时候，都有一个分页属性的话，我们可以编写一个，通用的分页类，让其它需要给分页类的，实体类，继承该分页类即可。</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105915031-293402892.png" class="lazyload"></p>
<pre><code class="language-java">package com.rainbowsea.yupao.common;


import lombok.Data;

import java.io.Serializable;

/**
 * 通用分页请求参数
 */
@Data
public class PageRequest implements Serializable {

    private static final long serialVersionUID = 9075699384270981491L;

    /**
     * 页面大小
     */
    protected int pageSize = 10;

    /**
     * 当前是第几页
     */
    protected int pageNum = 1;
}

</code></pre>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105914625-2050513693.png" class="lazyload"></p>
<pre><code class="language-java">
@Data
@EqualsAndHashCode(callSuper = true) //  告诉lombok在生成的 equals()​ 方法中调用 super.equals()​，并在生成的 hashCode()​ 方法中包含 super
// .hashCode
// ()​ 的结果。
public class TeamQuery extends PageRequest {
    /**
     * id
     */
    private Long id;

    /**
     * id 列表
     */
    private List&lt;Long&gt; idList;

}
</code></pre>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105914652-1415667319.png" class="lazyload"></p>
<pre><code class="language-java">import java.util.Optional;
  // status 是否公开(int) 不传默认 0(公开)
        int status = Optional.ofNullable(team.getStatus()).orElse(0);
</code></pre>
<p><strong>技巧：</strong></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105914933-1038838523.png" class="lazyload"></p>
<p><strong>跨域</strong></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105916257-612316506.png" class="lazyload"></p>
<p>注意点：</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105915060-1426068162.png" class="lazyload"></p>
<hr>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105914777-851513665.png" class="lazyload"></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105916264-1358847329.png" class="lazyload"></p>
<pre><code class="language-shell">npm i --save-dev @types/node
</code></pre>
<p>问题：Uncaught ReferenceError: Cannot access ‘xxx‘ before initialization问题</p>
<ul>
<li><a href="https://blog.csdn.net/cjy030209/article/details/133504889" target="_blank" rel="noopener nofollow">https://blog.csdn.net/cjy030209/article/details/133504889</a></li>
</ul>
<hr>
<h1 id="优化点">优化点：</h1>
<ol>
<li>加入不同的队伍，抢的不是同一个资源，就不需要，抢锁了。可以将锁的范围缩小一些。</li>
</ol>
<p>用户和队伍 Id，都要锁一下。</p>
<ul>
<li>同一个用户，同时刻只允许你加入一个队伍，一个用户不可以一次性加入 10 个队伍。</li>
<li>sysnchronized 是(加在对象上的)，String.valueOf(id).intern 表示根据 Id 是，每次生成的是同一个对象的地址，不会新 new 一个 String 对象，新 new 就是不同的对象，不同的锁了。</li>
<li>可以试试，将锁的范围设计的更加小一些，比如试试使用<strong>段锁</strong>。</li>
</ul>
<ol start="2">
<li>分享队伍——，可以新开一个链接，（其中页面上是一个二维码）</li>
<li>内容多的时候，分页显示</li>
<li>根据标签页查询的时候，太慢了，也可以试试添加上<strong>加载骨架</strong>进行一个优化。以及优化查询速度，太慢了。</li>
<li>添加注册功能和对应登录功能</li>
</ol>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105915780-500774412.png" class="lazyload"></p>
<ol start="6">
<li>优化前端性别选择，而不是输入数字 1，0</li>
<li>增加退出功能</li>
<li><font style="color: rgba(31, 35, 40, 1)">切换搜索模式（搜索用户、搜索标签）</font></li>
<li><font style="color: rgba(31, 35, 40, 1)">用户可以上传</font><strong><font style="color: rgba(31, 35, 40, 1)">用户头像</font></strong><font style="color: rgba(31, 35, 40, 1)">，</font><strong><font style="color: rgba(31, 35, 40, 1)">队伍头像</font></strong><font style="color: rgba(31, 35, 40, 1)">。</font></li>
</ol>
<h1 id="最后">最后：</h1>
<blockquote>
<p>“在这个最后的篇章中，我要表达我对每一位读者的感激之情。你们的关注和回复是我创作的动力源泉，我从你们身上吸取了无尽的灵感与勇气。我会将你们的鼓励留在心底，继续在其他的领域奋斗。感谢你们，我们总会在某个时刻再次相遇。”</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3084824/202508/3084824-20250820105917701-927084332.gif" class="lazyload"></p>
</blockquote>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-20 11:00">2025-08-20 10:59</span>&nbsp;
<a href="https://www.cnblogs.com/TheMagicalRainbowSea">Rainbow-Sea</a>&nbsp;
阅读(<span id="post_view_count">42</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19048145);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19048145', targetLink: 'https://www.cnblogs.com/TheMagicalRainbowSea/p/19048145', title: '伙伴匹配系统(移动端 H5 网站（APP 风格）基于Spring Boot 后端 + Vue3 - 06' })">举报</a>
</div>
	