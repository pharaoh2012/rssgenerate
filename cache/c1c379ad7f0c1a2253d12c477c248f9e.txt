
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/yupi/p/18814281" title="发布于 2025-04-08 11:23">
    <span role="heading" aria-level="2">如何开发 MCP 服务？保姆级教程！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/2225420/202504/2225420-20250408105315407-364078471.png" alt="如何开发 MCP 服务？保姆级教程！" class="desc_img">
        以前，如果想让 AI 处理我们的数据，基本只能靠预训练数据或者上传数据，既麻烦又低效。现在，MCP 解决了这个问题。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p class="md-end-block md-heading"><span class="md-plain">最近这段时间有个 AI 相关的概念特别火，叫 MCP，全称模型上下文协议（Model Context Protocol）。这是由 Anthropic 推出的一项开放标准，目标是为大型语言模型和 AI 助手提供一个统一、标准化的接口，使 AI 能够轻松操作外部工具并完成更复杂的任务。</span></p>
<p class="md-end-block md-p"><span class="md-plain">这篇文章，就带大家速通 MCP，了解其核心概念，并且以我们给自己产品 <span class="md-meta-i-c  md-link"><a href="https://www.mianshiya.com/" rel="noopener nofollow"><span class="md-plain">面试鸭</span></a><span class="md-plain"> 开发的面试搜题 MCP 服务为例，带大家实战 MCP 服务端和客户端的开发！</span></span></span></p>
<blockquote>
<p class="md-end-block md-p"><span class="md-plain">开源指路：<span class="md-link md-pair-s"><a href="https://github.com/yuyuanweb/mcp-mianshiya-server" rel="noopener nofollow">https://github.com/yuyuanweb/mcp-mianshiya-server</a></span></span></p>
</blockquote>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1744008993525-16f07f5b-e3b4-4f1a-97dd-ea886c8d945d.png"><img src="https://pic.yupi.icu/1/1744008993525-16f07f5b-e3b4-4f1a-97dd-ea886c8d945d.png"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">MCP 为啥如此重要？</span></h2>
<p class="md-end-block md-p"><span class="md-plain">以前，如果想让 AI 处理我们的数据，基本只能靠预训练数据或者上传数据，既麻烦又低效。而且，就算是很强大的 AI 模型，也会有数据隔离的问题，无法直接访问新数据，每次有新的数据进来，都要重新训练或上传，扩展起来比较困难。</span></p>
<p class="md-end-block md-p"><span class="md-plain">现在，MCP 解决了这个问题，它突破了模型对静态知识库的依赖，使其具备更强的动态交互能力，能够像人类一样调用搜索引擎、访问本地文件、连接 API 服务，甚至直接操作第三方库。所以 MCP 相当于在 AI 和数据之间架起了一座桥。更重要的是，只要大家都遵循 MCP 这套协议，AI 就能无缝连接本地数据、互联网资源、开发工具、生产力软件，甚至整个社区生态，实现真正的“万物互联”，这将极大提升 AI 的协作和工作能力，价值不可估量。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1744006127873-09bedb4a-5c7c-4cd0-9c4d-3620f319eac7.png"><img src="https://pic.yupi.icu/1/1744006127873-09bedb4a-5c7c-4cd0-9c4d-3620f319eac7.png"></span></p>
<h2 class="md-end-block md-heading"><span class="md-pair-s ">MCP 总体架构</span></h2>
<p class="md-end-block md-p"><span class="md-plain">MCP 的核心是 “客户端 - 服务器” 架构，其中 MCP 客户端主机可以连接到多个服务器。客户端主机是指希望通过 MCP 访问数据的程序，比如 Claude Desktop、IDE 或 AI 工具。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1742979138403-f9f03e19-3537-461e-95d5-6f8a9a413c3a.jpeg"><img src="https://pic.yupi.icu/1/1742979138403-f9f03e19-3537-461e-95d5-6f8a9a413c3a.jpeg"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">MCP Java SDK 架构</span></h2>
<p class="md-end-block md-p"><span class="md-plain">我们可以使用 Spring AI 框架来开发 MCP 服务，可以先通过 <span class="md-meta-i-c  md-link"><a href="https://docs.spring.io/spring-ai/reference/api/mcp/mcp-overview.html" rel="noopener nofollow"><span class="md-plain">官方文档</span></a><span class="md-plain"> 来了解其基本架构。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">遵循三层架构：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1742980122479-fdc478e9-b5a2-40b9-8ba1-5fd8817a8551.png"><img src="https://pic.yupi.icu/1/1742980122479-fdc478e9-b5a2-40b9-8ba1-5fd8817a8551.png"></span></p>
<p class="md-end-block md-p"><span class="md-plain">我们分别来看每一层的作用：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">客户端/服务器层：McpClient 处理客户端操作，而 McpServer 管理服务器端协议操作。两者都使用 McpSession 进行通信管理。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">会话层（McpSession）：通过 DefaultMcpSession 实现管理通信模式和状态。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">传输层（McpTransport）：处理 JSON-RPC 消息序列化和反序列化，支持多种传输实现。</span></p>
</li>
</ul>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">MCP 客户端</span></h3>
<p class="md-end-block md-p"><span class="md-plain">MCP 客户端是 MCP 架构中的关键组件，主要负责和 MCP 服务器建立连接并进行通信。它能自动匹配服务器的协议版本，确认可用功能，并负责数据传输和 JSON-RPC 交互。此外，它还能发现和使用各种工具、管理资源，并与提示系统进行交互。</span></p>
<p class="md-end-block md-p"><span class="md-plain">除了这些核心功能，MCP 客户端还支持一些额外特性，比如根管理、采样控制，以及同步或异步操作。为了适应不同场景，它提供了多种数据传输方式，包括标准输入/输出、基于 Java HttpClient 和 WebFlux 的 SSE 传输。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1742980741377-6e68d16e-900f-456b-8a92-c2c14975fbe8.png"><img src="https://pic.yupi.icu/1/1742980741377-6e68d16e-900f-456b-8a92-c2c14975fbe8.png"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">MCP 服务端</span></h3>
<p class="md-end-block md-p"><span class="md-plain">MCP 服务器是整个 MCP 架构的核心部分，主要用来为客户端提供各种工具、资源和功能支持。它负责处理客户端的请求，包括解析协议、提供工具、管理资源以及处理各种交互信息。同时，它还能记录日志、发送通知，并且支持多个客户端同时连接，保证高效的通信和协作。它可以通过多种方式进行数据传输，比如标准输入/输出、Servlet、WebFlux 和 WebMVC，满足不同应用场景的需求。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1742980873671-f074c8e9-59eb-434e-be2c-ccdaf4d3c8a0.png"><img src="https://pic.yupi.icu/1/1742980873671-f074c8e9-59eb-434e-be2c-ccdaf4d3c8a0.png"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">Spring AI 集成 MCP</span></h3>
<p class="md-end-block md-p"><span class="md-plain">可以通过引入一些依赖，直接让 Spring AI 和 MCP 进行集成，在 Spring Boot 项目中轻松使用。</span></p>
<p class="md-end-block md-p"><span class="md-plain">比如客户端启动器：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">spring-ai-starter-mcp-client：核心启动器，提供 STDIO 和基于 HTTP 的 SSE 支持 </span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">spring-ai-starter-mcp-client-webflux：基于 WebFlux 的 SSE 流式传输实现 </span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-plain">服务器启动器：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">spring-ai-starter-mcp-server：核心服务器，具有 STDIO 传输支持 </span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">spring-ai-starter-mcp-server-webmvc：基于 Spring MVC 的 SSE 流式传输实现 </span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">spring-ai-starter-mcp-server-webflux：基于 WebFlux 的 SSE 流式传输实现</span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-plain">下面我们来实战 MCP 项目的开发。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">MCP 开发</span></h2>
<p class="md-end-block md-p"><span class="md-plain">MCP 的使用分为两种模式，STDIO 模式（本地运行）和 SSE 模式（远程服务）。</span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">MCP 服务端（基于stdio标准流）</span></h3>
<p class="md-end-block md-p"><span class="md-plain">基于 stdio 的实现是最常见的 MCP 客户端方案，它通过标准输入输出流与 MCP 服务器进行通信。这种方式简单直观，能够直接通过进程间通信实现数据交互，避免了额外的网络通信开销。特别适用于本地部署的 MCP 服务器，可以在同一台机器上启动 MCP 服务器进程，与客户端无缝对接。</span></p>
<p class="md-end-block md-p"><span class="md-plain">1、引入依赖</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;org.springframework.ai<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;spring-ai-mcp-server-spring-boot-starter<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;1.0.0-M6<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">2、配置 MCP 服务端</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-atom">spring<span class="cm-meta">:<br><span><span class="cm-atom">application<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; name<span class="cm-meta">:&nbsp;mcp-server<br><span><span class="cm-atom">main<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; web-application-type<span class="cm-meta">:&nbsp;none&nbsp;<span class="cm-comment"># 必须禁用web应用类型<br><span><span class="cm-atom">&nbsp; banner-mode<span class="cm-meta">:&nbsp;off&nbsp;<span class="cm-comment"># 禁用banner<br><span><span class="cm-atom">ai<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; mcp<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; server<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; stdio<span class="cm-meta">:&nbsp;true&nbsp;<span class="cm-comment"># 启用stdio模式<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; name<span class="cm-meta">:&nbsp;mcp-server&nbsp;<span class="cm-comment"># 服务器名称<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; version<span class="cm-meta">:&nbsp;0.0.1&nbsp;<span class="cm-comment"># 服务器版本</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">3、实现 MCP 工具</span></p>
<p class="md-end-block md-p"><span class="md-pair-s"><code>@Tool</code><span class="md-plain"> 是 Spring AI MCP 框架中用于快速暴露业务能力为 AI 工具的核心注解，该注解实现 Java 方法与 MCP 协议工具的自动映射，并且可以通过注解的属性 <span class="md-pair-s"><code>description</code><span class="md-plain">，帮助人工智能模型根据用户输入的信息决定是否调用这些工具，并返回相应的结果。</span></span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">下面是一段示例代码：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">/**<br><span><span class="cm-comment">* 根据搜索词搜索面试鸭面试题目<br><span><span class="cm-comment">*<br><span><span class="cm-comment">* @param searchText 搜索词<br><span><span class="cm-comment">* @return 面试鸭搜索结果的题目链接<br><span><span class="cm-comment">*/<br><span><span class="cm-meta">@Tool(<span class="cm-variable">description&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"根据搜索词搜索面试鸭面试题目（如果用户提的问题的技术面试题，优先搜索面试鸭的题目列表）")<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-def">callMianshiya(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">searchText) {<br><span>&nbsp; &nbsp;<span class="cm-comment">// 执行从面试鸭数据库中搜索题目的逻辑（代码省略）<br><span>&nbsp; &nbsp;<span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-string">"用户要搜索："&nbsp;<span class="cm-operator">+&nbsp;<span class="cm-variable">searchText);<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">4、注册 MCP 工具</span></p>
<p class="md-end-block md-p"><span class="md-plain">最后向 MCP 服务注册刚刚写的工具：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Bean<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable">ToolCallbackProvider&nbsp;<span class="cm-def">serverTools(<span class="cm-variable">MianshiyaService&nbsp;<span class="cm-variable">mianshiyaService) {<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">MethodToolCallbackProvider.<span class="cm-variable">builder()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">toolObjects(<span class="cm-variable">mianshiyaService)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">这段代码定义了一个 Spring 的 Bean，用于将面试鸭的题目搜索服务<span class="md-pair-s"><code>MianshiyaService</code><span class="md-plain">中所有用 @Tool 注解标记的方法注册为工具，供 AI 模型调用。<span class="md-pair-s"><code>ToolCallbackProvider</code><span class="md-plain">是 Spring AI 中的一个接口，用于定义工具发现机制，主要负责将那些使用 <span class="md-pair-s"><code>@Tool</code><span class="md-plain"> 注解标记的方法转换为工具回调对象，并提供给 ChatClient 或ChatModel 使用，以便 AI 模型能够在对话过程中调用这些工具。</span></span></span></span></span></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">5、运行服务端</span></p>
<p class="md-end-block md-p"><span class="md-plain">MCP 服务端代码写完之后，直接用 Maven 打包运行项目：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>mvn clean package&nbsp;<span class="cm-attribute">-DskipTests</span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">MCP 客户端（基于 stdio 标准流）</span></h3>
<p class="md-end-block md-p"><span class="md-plain">1、引入依赖</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;org.springframework.ai<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;spring-ai-mcp-client-spring-boot-starter<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;1.0.0-M6<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">2、配置 MCP 服务器</span></p>
<p class="md-end-block md-p"><span class="md-plain">因为刚刚服务端是通过<span class="md-pair-s"><code>stdio</code><span class="md-plain">实现的，需要在<span class="md-pair-s"><code>application.yml</code><span class="md-plain">中配置MCP服务器的一些参数：</span></span></span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-atom">spring<span class="cm-meta">:<br><span><span class="cm-atom">ai<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; mcp<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; client<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; stdio<span class="cm-meta">:<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment"># 指定MCP服务器配置文件<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; &nbsp; servers-configuration<span class="cm-meta">:&nbsp;classpath<span class="cm-meta">:/mcp-servers-config.json<br><span><span class="cm-atom">mandatory-file-encoding<span class="cm-meta">:&nbsp;UTF-8</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">其中 <span class="md-pair-s"><code>mcp-servers-config.json</code><span class="md-plain"> 的配置如下：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>{<br><span>&nbsp;<span class="cm-string cm-property">"mcpServers": {<br><span>&nbsp; &nbsp;<span class="cm-string cm-property">"mianshiyaServer": {<br><span>&nbsp; &nbsp; &nbsp;<span class="cm-string cm-property">"command":&nbsp;<span class="cm-string">"java",<br><span>&nbsp; &nbsp; &nbsp;<span class="cm-string cm-property">"args": [<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"-Dspring.ai.mcp.server.stdio=true",<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"-Dspring.main.web-application-type=none",<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"-Dlogging.pattern.console=",<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"-jar",<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"/Users/yupi/Documents/mcp-server/target/mcp-server-0.0.1-SNAPSHOT.jar"<br><span>&nbsp; &nbsp; ],<br><span>&nbsp; &nbsp; &nbsp;<span class="cm-string cm-property">"env": {}<br><span>&nbsp; }<br><span>}<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">这个配置文件设置了 MCP 客户端的基本配置，包括 Java 命令参数，服务端 jar 包的绝对路径等。上述的 JSON 配置文件也可以直接写在<span class="md-pair-s"><code>application.yml</code><span class="md-plain">里，效果是一样的。</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-atom">&nbsp; mcp<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; client<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; stdio<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; &nbsp; connections<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; server1<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; command<span class="cm-meta">:&nbsp;java<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; args<span class="cm-meta">:<br><span><span class="cm-meta">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&nbsp;-Dspring.ai.mcp.server.stdio=true<br><span><span class="cm-meta">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&nbsp;-Dspring.main.web-application-type=none<br><span><span class="cm-meta">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&nbsp;-Dlogging.pattern.console=<br><span><span class="cm-meta">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&nbsp;-jar<br><span><span class="cm-meta">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&nbsp;/Users/yupi/Documents/mcp-server/target/mcp-server-0.0.1-SNAPSHOT.jar</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">客户端我们使用阿里巴巴的通义千问模型，所以引入 <span class="md-pair-s"><code>spring-ai-alibaba-starter</code><span class="md-plain"> 依赖，如果你使用的是其他的模型，也可以使用对应的依赖项，比如 <span class="md-pair-s"><code>openAI</code><span class="md-plain"> 引入 <span class="md-pair-s"><code>spring-ai-openai-spring-boot-starter</code><span class="md-plain"> 这个依赖就行了。还需要配置大模型的密钥等信息，key 可以直接 <span class="md-meta-i-c  md-link"><a href="https://help.aliyun.com/zh/model-studio/developer-reference/get-api-key" rel="noopener nofollow"><span class="md-plain">去官网</span></a><span class="md-plain"> 申请，模型我们用的是 qwen-max。</span></span></span></span></span></span></span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-atom">spring<span class="cm-meta">:<br><span><span class="cm-atom">ai<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; dashscope<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; api-key<span class="cm-meta">:&nbsp;$<span class="cm-meta">{通义千问的key<span class="cm-meta">}<br><span><span class="cm-atom">&nbsp; &nbsp; chat<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; options<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; &nbsp; model<span class="cm-meta">:&nbsp;qwen-max</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">3、初始化聊天客户端，一行代码就搞定了：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Bean<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable">ChatClient&nbsp;<span class="cm-def">initChatClient(<span class="cm-variable">ChatClient.<span class="cm-variable">Builder&nbsp;<span class="cm-variable">chatClientBuilder,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="cm-variable">ToolCallbackProvider&nbsp;<span class="cm-variable">mcpTools) {<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">chatClientBuilder.<span class="cm-variable">defaultTools(<span class="cm-variable">mcpTools).<span class="cm-variable">build();<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">这段代码定义了一个 Spring Bean，用于初始化一个AI 聊天客户端，里面有两个参数：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">ChatClient.Builder 是 Spring AI 提供的 AI 聊天客户端构建器，用于构建 ChatClient 实例，是由 Spring AI自动注入的</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">另一个是 ToolCallbackProvider，用于从 MCP 服务端发现并获取 AI 工具。</span></p>
</li>
</ul>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">4、接口调用</span></p>
<p class="md-end-block md-p"><span class="md-plain">直接调用<span class="md-pair-s"><code>ChatClient</code><span class="md-plain">，将面试问题输入给AI即可，也不需要写过多的 prompt，因为在 MCP 服务端的工具描述中，已经写的比较详细了 —— 比如用户想要搜索技术面试题，就会自动调用刚刚写的工具。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">普通调用：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@PostMapping(<span class="cm-variable">value&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"/ai/answer")<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-def">generate(<span class="cm-meta">@RequestBody&nbsp;<span class="cm-variable">AskRequest&nbsp;<span class="cm-variable">request) {<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">chatClient.<span class="cm-variable">prompt()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">user(<span class="cm-variable">request.<span class="cm-variable">getContent())<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">call()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">content();<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">如果需要实时输出返回内容，可以进行 SSE 流式调用：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@PostMapping(<span class="cm-variable">value&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"/ai/answer/sse",&nbsp;<span class="cm-variable">produces&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">MediaType.<span class="cm-variable">TEXT_EVENT_STREAM_VALUE)<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable">Flux<span class="cm-operator">&lt;<span class="cm-variable-3">String<span class="cm-operator">&gt;&nbsp;<span class="cm-def">generateStreamAsString(<span class="cm-meta">@RequestBody&nbsp;<span class="cm-variable">AskRequest&nbsp;<span class="cm-variable">request) {<br><span>&nbsp; &nbsp;<span class="cm-variable">Flux<span class="cm-operator">&lt;<span class="cm-variable-3">String<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">content&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">chatClient.<span class="cm-variable">prompt()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">user(<span class="cm-variable">request.<span class="cm-variable">getContent())<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">stream()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">content();<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">content<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">concatWith(<span class="cm-variable">Flux.<span class="cm-variable">just(<span class="cm-string">"[complete]"));<br><span><span>​<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">最后测试一下，输入面试题目 “HashMap的原理是啥”，就会返回 <span class="md-meta-i-c  md-link"><a href="https://www.mianshiya.com/" rel="noopener nofollow"><span class="md-plain">面试鸭</span></a><span class="md-plain"> 的题目以及链接。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1742995382158-d78ef20c-6212-4a57-869f-4db3d8b4dd1b.png"><img src="https://pic.yupi.icu/1/1742995382158-d78ef20c-6212-4a57-869f-4db3d8b4dd1b.png"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">MCP 服务端（基于 SSE）</span></h3>
<p class="md-end-block md-p"><span class="md-plain">除了基于 <span class="md-pair-s"><code>stdio</code><span class="md-plain"> 的实现外，Spring AI 还提供了基于 Server-Sent Events (SSE) 的 MCP 客户端方案。相较于 <span class="md-pair-s"><code>stdio</code><span class="md-plain"> 方式，SSE 更适用于远程部署的 MCP 服务器，客户端可以通过标准 HTTP 协议与服务器建立连接，实现单向的实时数据推送。基于 SSE 的 MCP 服务器支持被多个客户端远程调用。</span></span></span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">1、引入依赖</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;org.springframework.ai<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;spring-ai-mcp-server-webflux-spring-boot-starter<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;1.0.0-M6<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">2、配置 MCP 服务端</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-atom">server<span class="cm-meta">:<br><span><span class="cm-atom">port<span class="cm-meta">:&nbsp;<span class="cm-number">8090<br><span><span class="cm-atom">spring<span class="cm-meta">:<br><span><span class="cm-atom">application<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; name<span class="cm-meta">:&nbsp;mcp-server<br><span><span class="cm-atom">ai<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; mcp<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; server<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; name<span class="cm-meta">:&nbsp;mcp-server&nbsp;<span class="cm-comment"># MCP服务器名称<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; version<span class="cm-meta">:&nbsp;0.0.1 &nbsp;&nbsp;<span class="cm-comment"># 服务器版本号</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">除了引入的依赖包不一样，以及配置文件不同，其他的不需要修改。</span></p>
<p class="md-end-block md-p"><span class="md-plain">3、运行服务端</span></p>
<p class="md-end-block md-p"><span class="md-plain">MCP 服务端写完之后，直接打包运行：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>mvn clean package&nbsp;<span class="cm-attribute">-DskipTests</span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">直接用 jar 选项运行 MCP 服务端：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>java&nbsp;<span class="cm-attribute">-jar&nbsp;target/mcp-server-0.0.1-SNAPSHOT.jar&nbsp;<span class="cm-attribute">--spring.profiles<span class="cm-def">.active<span class="cm-operator">=prod</span></span></span></span></span></pre>
<h3 class="md-end-block md-heading"><span class="md-plain">MCP 客户端（基于 SSE）</span></h3>
<p class="md-end-block md-p"><span class="md-plain">1、引入依赖</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;org.springframework.ai<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;spring-ai-mcp-client-webflux-spring-boot-starter<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;1.0.0-M6<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">2、配置 MCP 服务器</span></p>
<p class="md-end-block md-p"><span class="md-plain">因为刚刚服务端是通过 SSE 实现的，需要在<span class="md-pair-s"><code>application.yml</code><span class="md-plain">中配置 MCP 服务器的 URL 端口：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-atom">spring<span class="cm-meta">:<br><span><span class="cm-atom">ai<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; mcp<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; client<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; enabled<span class="cm-meta">:&nbsp;<span class="cm-keyword">true<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; name<span class="cm-meta">:&nbsp;mcp-client<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; version<span class="cm-meta">:&nbsp;<span class="cm-number">1.0.0<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; request-timeout<span class="cm-meta">:&nbsp;30s<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; type<span class="cm-meta">:&nbsp;ASYNC&nbsp;<span class="cm-comment"># 类型同步或者异步<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; sse<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; &nbsp; connections<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; server1<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; url<span class="cm-meta">:&nbsp;http<span class="cm-meta">://localhost<span class="cm-meta">:<span class="cm-number">8090</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">和 MCP 服务端的修改一样， 除了依赖和配置的修改，其他的也不需要调整。</span></p>
<p class="md-end-block md-p"><span class="md-plain">最后测试一下，输入面试题目 “MySQL的事务是怎么实现的？”，就会返回 <span class="md-meta-i-c  md-link"><a href="https://www.mianshiya.com/" rel="noopener nofollow"><span class="md-plain">面试鸭</span></a><span class="md-plain"> 的题目以及链接等。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1743057898494-b41f995d-7eb9-4a5b-b6c9-fd569bc323a4.png"><img src="https://pic.yupi.icu/1/1743057898494-b41f995d-7eb9-4a5b-b6c9-fd569bc323a4.png"></span></p>
<h2 class="md-end-block md-heading"><span class="md-plain">软件使用 MCP</span></h2>
<p class="md-end-block md-p"><span class="md-plain">除了利用程序去调用 MCP 服务外，MCP 服务端还任意支持 MCP 协议的智能体助手，比如 Claude、Cursor 以及 Cherry Studio 等，都可以快速接入。（前提需要 Java 运行时环境）</span></p>
<p class="md-end-block md-p"><span class="md-plain">首先下载我们 <span class="md-meta-i-c  md-link"><a href="https://github.com/yuyuanweb/mcp-mianshiya-server" rel="noopener nofollow"><span class="md-plain">开源的面试鸭 MCP 服务</span></a><span class="md-plain"> 代码到本地：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-builtin">git&nbsp;clone https://github.com/yuyuanweb/mcp-mianshiya-server&nbsp;</span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">然后使用 Maven 打包构建项目：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-builtin">cd&nbsp;mcp-mianshiya-server<br><span>mvn clean package</span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">下面我们以 Cherry Studio 这样一个 AI 客户端软件为例，演示如何使用 MCP 服务。</span></p>
<p class="md-end-block md-p"><span class="md-plain">1、打开 Cherry Studio 的 “设置”，点击 “MCP 服务器”：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1743063238632-2156707f-cfa4-4493-bf3e-68279f3972b9.png"><img src="https://pic.yupi.icu/1/1743063238632-2156707f-cfa4-4493-bf3e-68279f3972b9.png"></span></p>
<p class="md-end-block md-p"><span class="md-plain">2、点击 “编辑 JSON”，将以下 MCP 配置添加到配置文件中：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>{<br><span>&nbsp;<span class="cm-string cm-property">"mcpServers": {<br><span>&nbsp; &nbsp;<span class="cm-string cm-property">"mianshiyaServer": {<br><span>&nbsp; &nbsp; &nbsp;<span class="cm-string cm-property">"command":&nbsp;<span class="cm-string">"java",<br><span>&nbsp; &nbsp; &nbsp;<span class="cm-string cm-property">"args": [<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"-Dspring.ai.mcp.server.stdio=true",<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"-Dspring.main.web-application-type=none",<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"-Dlogging.pattern.console=",<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"-jar",<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"/yourPath/mcp-server-0.0.1-SNAPSHOT.jar"<br><span>&nbsp; &nbsp; ],<br><span>&nbsp; &nbsp; &nbsp;<span class="cm-string cm-property">"env": {}<br><span>&nbsp; }<br><span>}<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">3、在 “设置 =&gt; 模型服务” 里选择一个模型，输入 API 密钥，选择模型设置，勾选下工具函数调用功能：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1743063246205-718e7d0b-5992-4b85-bbff-bc676adbab7b.png"><img src="https://pic.yupi.icu/1/1743063246205-718e7d0b-5992-4b85-bbff-bc676adbab7b.png"></span></p>
<p class="md-end-block md-p"><span class="md-plain">4、进入聊天页面，在输入框下面勾选开启 MCP 服务：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1743063248363-b3a09c97-1bb9-4f97-ab0a-2cee5a641c83.png"><img src="https://pic.yupi.icu/1/1743063248363-b3a09c97-1bb9-4f97-ab0a-2cee5a641c83.png"></span></p>
<p class="md-end-block md-p"><span class="md-plain">配置完成，尝试搜索下面试题目，效果不戳！</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1743063251268-145a5d00-4495-49e8-91db-f5536efca436.png"><img src="https://pic.yupi.icu/1/1743063251268-145a5d00-4495-49e8-91db-f5536efca436.png"></span></p>
<p class="md-end-block md-p"><span class="md-plain">甚至还进行面经解析，返回多个面试题目与答案的链接！</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1743143537320-1fca3955-3128-42a6-bd32-0cace3bab2ab.png"><img src="https://pic.yupi.icu/1/1743143537320-1fca3955-3128-42a6-bd32-0cace3bab2ab.png"></span></p>
<p class="md-end-block md-p"><span class="md-plain">当然这个功能我们面试鸭官方也实现了，帮助大家面试复盘：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1744008304237-fdfb2b99-9038-43de-94ed-ca0760afdf40.png"><img src="https://pic.yupi.icu/1/1744008304237-fdfb2b99-9038-43de-94ed-ca0760afdf40.png"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">上传 MCP 服务</span></h2>
<p class="md-end-block md-p"><span class="md-plain">和开发一个 APP 一样，我们也可以把做好的 MCP 服务分享到第三方 MCP 服务平台。比如 MCP.so，可以理解为 MCP 服务的应用市场。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1744008425870-c5b7958e-98cc-4a14-a4af-cba3af01fcde.png"><img src="https://pic.yupi.icu/1/1744008425870-c5b7958e-98cc-4a14-a4af-cba3af01fcde.png"></span></p>
<p class="md-end-block md-p"><span class="md-plain">直接点击头像左侧的提交按钮，然后填写 MCP 服务的项目地址、以及服务器配置实例，点击提交即可。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1744008547763-70effe90-c0aa-4683-bbc8-060639266529.png"><img src="https://pic.yupi.icu/1/1744008547763-70effe90-c0aa-4683-bbc8-060639266529.png"></span></p>
<p class="md-end-block md-p"><span class="md-plain">提交完成后就可以在平台搜索到了：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1744008638998-003207ee-8394-4ded-9ea6-83dbf189477c.png"><img src="https://pic.yupi.icu/1/1744008638998-003207ee-8394-4ded-9ea6-83dbf189477c.png"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<div class="md-hr md-end-block"><hr></div>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">OK 就分享到这里，学会的话记得点赞收藏哦。也欢迎大家在评论区交流你对 MCP 的看法和理解~</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">更多编程学习资源</span></h2>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/course" rel="noopener nofollow"><span class="md-plain">Java前端程序员必做项目实战教程+毕设网站</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/" rel="noopener nofollow"><span class="md-plain">程序员免费编程学习交流社区（自学必备）</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/course/cv" rel="noopener nofollow"><span class="md-plain">程序员保姆级求职写简历指南（找工作必备）</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.mianshiya.com/" rel="noopener nofollow"><span class="md-plain">程序员免费面试刷题网站工具（找工作必备）</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640584449888772098" rel="noopener nofollow"><span class="md-plain">最新Java零基础入门学习路线 + Java教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586673306091521" rel="noopener nofollow"><span class="md-plain">最新Python零基础入门学习路线 + Python教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586014108303362" rel="noopener nofollow"><span class="md-plain">最新前端零基础入门学习路线 + 前端教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586867363954689" rel="noopener nofollow"><span class="md-plain">最新数据结构和算法零基础入门学习路线 + 算法教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1644279832026075138" rel="noopener nofollow"><span class="md-plain">最新C++零基础入门学习路线、C++教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1641797333479903234" rel="noopener nofollow"><span class="md-plain">最新数据库零基础入门学习路线 + 数据库教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640589994284695553" rel="noopener nofollow"><span class="md-plain">最新Redis零基础入门学习路线 + Redis教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1641035880439271426" rel="noopener nofollow"><span class="md-plain">最新计算机基础入门学习路线 + 计算机基础教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1641366118197153793" rel="noopener nofollow"><span class="md-plain">最新小程序入门学习路线 + 小程序开发教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="http://sqlmother.yupi.icu/" rel="noopener nofollow"><span class="md-plain">最新SQL零基础入门学习路线 + SQL教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586295529324545" rel="noopener nofollow"><span class="md-plain">最新Linux零基础入门学习路线 + Linux教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640588753362108417" rel="noopener nofollow"><span class="md-plain">最新Git/GitHub零基础入门学习路线 + Git教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640587909942099969" rel="noopener nofollow"><span class="md-plain">最新操作系统零基础入门学习路线 + 操作系统教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640588119619551233" rel="noopener nofollow"><span class="md-plain">最新计算机网络零基础入门学习路线 + 计算机网络教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640588392073150465" rel="noopener nofollow"><span class="md-plain">最新设计模式零基础入门学习路线 + 设计模式教程</span></a></span></p>
</li>
<li class="md-list-item md-focus-container">
<p class="md-end-block md-p md-focus"><span class="md-meta-i-c md-link md-expand"><a href="https://www.code-nav.cn/post/1640648711119892481" rel="noopener nofollow"><span class="md-plain">最新软件工程零基础入门学习路线 + 软件工程教程</span></a></span></p>
</li>
</ul>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.28813687541782407" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-08 11:23">2025-04-08 11:23</span>&nbsp;
<a href="https://www.cnblogs.com/yupi">程序员鱼皮</a>&nbsp;
阅读(<span id="post_view_count">301</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18814281" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18814281);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18814281', targetLink: 'https://www.cnblogs.com/yupi/p/18814281', title: '如何开发 MCP 服务？保姆级教程！' })">举报</a>
</div>
        