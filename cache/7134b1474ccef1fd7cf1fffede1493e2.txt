
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xiaogongzi/p/18880362" title="发布于 2025-05-16 17:33">
    <span role="heading" aria-level="2">K8stools工具</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="简介">📌简介</h1>
<p>K8stools 是一个 Kubernetes 日常运维辅助工具集，旨在提升运维效率，辅助平台治理与资源优化。功能涵盖资源分析、趋势评估、异常检测、行为采集、成本估算等常见场景，适用于 DevOps、SRE、平台工程团队。</p>
<p><a href="https://github.com/karlhuang95/k8stools" target="_blank" rel="noopener nofollow">工具地址</a></p>
<h1 id="功能模块">🎯功能模块</h1>
<table>
<thead>
<tr>
<th>模块名称</th>
<th>功能说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>costEstimator</td>
<td>成本估算</td>
</tr>
<tr>
<td>cpu</td>
<td>获取k8s的cpu使用情况</td>
</tr>
<tr>
<td>paradise</td>
<td>k8s理想情况分配</td>
</tr>
<tr>
<td>poderrors</td>
<td>异常检查</td>
</tr>
<tr>
<td>runtimeInspect</td>
<td>采集运行中的 Pod 容器行为信息（进程、端口、环境变量）</td>
</tr>
<tr>
<td>trend</td>
<td>基于 Prometheus 的资源使用趋势分析与建议</td>
</tr>
</tbody>
</table>
<h1 id="-配置文件说明configyaml">📄 配置文件说明（config.yaml）</h1>
<pre><code class="language-yaml">kubeconfig: /root/.kube/config
namespace:
  - {namespace}-prod
prometheus: http://prom.example.net

cost:
  cpuPrice: 4000   # 单台机器价格（单位元）
  totalCpu: 16     # 单台机器 CPU 核数
</code></pre>
<h1 id="-各子工具设计逻辑">🧠 各子工具设计逻辑</h1>
<hr>
<h1 id="-paradise---理想资源建议工具">📊 paradise - 理想资源建议工具</h1>
<p><strong>CPU 建议规则：</strong></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>设计逻辑</th>
</tr>
</thead>
<tbody>
<tr>
<td>Requests</td>
<td>当前使用量的 50%~80%，保证调度时有资源可用</td>
</tr>
<tr>
<td>Limits</td>
<td>当前使用量的 100%~150%，防止异常飙高占满节点</td>
</tr>
<tr>
<td>特殊处理</td>
<td>使用低于 50m 的容器 → 默认给 50m，避免调度失败；高于 1000m 提示设置上限</td>
</tr>
</tbody>
</table>
<p><strong>内存建议规则：</strong></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>设计逻辑</th>
</tr>
</thead>
<tbody>
<tr>
<td>Requests</td>
<td>当前使用量的 70%~100%，确保稳定调度</td>
</tr>
<tr>
<td>Limits</td>
<td>当前使用量的 150%~200%，保留 buffer 防止 OOM</td>
</tr>
<tr>
<td>特殊处理</td>
<td>对 sidecar / agent 等轻量容器，给最小起点值如 64Mi</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="-trend---资源趋势分析工具">📈 trend - 资源趋势分析工具</h1>
<p><strong>数据来源：Prometheus 查询</strong></p>
<table>
<thead>
<tr>
<th>指标</th>
<th>查询方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>平均 CPU 使用量</td>
<td><code>avg_over_time(container_cpu_usage_seconds_total[1w])</code>（单位：m）</td>
</tr>
<tr>
<td>最大 CPU 使用量</td>
<td><code>max_over_time(container_cpu_usage_seconds_total[1w])</code>（单位：m）</td>
</tr>
<tr>
<td>平均/最大内存使用量</td>
<td>类似用 <code>container_memory_usage_bytes</code> 查询，并换算成 MiB</td>
</tr>
</tbody>
</table>
<p><strong>推荐策略（保守 &amp; 稳健）</strong></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>推荐计算公式</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU Requests</td>
<td><code>ceil(平均 CPU 使用量 × 1.2)</code></td>
</tr>
<tr>
<td>CPU Limits</td>
<td><code>ceil(最大 CPU 使用量 × 1.5)</code></td>
</tr>
<tr>
<td>内存 Requests</td>
<td><code>ceil(平均内存使用量 × 1.2)</code></td>
</tr>
<tr>
<td>内存 Limits</td>
<td><code>ceil(最大内存使用量 × 1.5)</code></td>
</tr>
</tbody>
</table>
<hr>
<h1 id="-poderrors---异常-pod-检查工具">🚨 poderrors - 异常 Pod 检查工具</h1>
<p><strong>功能说明：</strong></p>
<ul>
<li>遍历所有或指定命名空间下的 Pod</li>
<li>检查所有处于异常状态的容器（如 CrashLoop、ImagePullBackOff、OOMKilled 等）</li>
<li>输出字段：</li>
</ul>
<table>
<thead>
<tr>
<th>Namespace</th>
<th>Pod</th>
<th>Container</th>
<th>Reason</th>
<th>Message</th>
<th>Restart Count</th>
<th>Age</th>
</tr>
</thead>
<tbody>
<tr>
<td>default</td>
<td>api-xxx</td>
<td>app</td>
<td>CrashLoopBackOff</td>
<td>Back-off restarting failed container</td>
<td>5</td>
<td>3m</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="-runtimeinspect---容器行为采集工具">🔍 runtimeInspect - 容器行为采集工具</h1>
<p><strong>功能说明：</strong></p>
<ul>
<li>采集运行中 Pod 的详细信息，包括：
<ul>
<li>容器内进程列表</li>
<li>监听端口信息</li>
<li>环境变量</li>
</ul>
</li>
</ul>
<p><strong>使用场景：</strong></p>
<ul>
<li>排查线上故障时快速查看容器内部运行情况</li>
<li>无需进入容器即可采集运行行为（非入侵式）</li>
</ul>
<hr>
<h1 id="-costestimator---成本估算工具">💰 costEstimator - 成本估算工具</h1>
<p><strong>计算模型：</strong></p>
<ul>
<li>基于你提供的每台机器：
<ul>
<li>CPU 核数（如：16）</li>
<li>单价（如：4000元）</li>
</ul>
</li>
</ul>
<p><strong>计算逻辑：</strong></p>
<table>
<thead>
<tr>
<th>步骤</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>每核价格</td>
<td><code>单价 / 总 CPU 数</code></td>
</tr>
<tr>
<td>容器请求费用</td>
<td><code>CPU Request (m) × 每毫核价格</code></td>
</tr>
<tr>
<td>每月总费用</td>
<td><code>容器费用 × 24 × 30</code>（按 30 天、全天运行估算）</td>
</tr>
</tbody>
</table>
<p><strong>输出字段：</strong></p>
<table>
<thead>
<tr>
<th>Namespace</th>
<th>Pod</th>
<th>Container</th>
<th>CPU Request (m)</th>
<th>CPU Cost (元)</th>
<th>Total Cost (元/月)</th>
</tr>
</thead>
</table>
<hr>
<h1 id="-示例命令">📦 示例命令</h1>
<pre><code class="language-bash">k8stools paradise        -f config.yaml   # 理想资源建议
k8stools trend           -f config.yaml   # 资源趋势分析
k8stools poderrors       -f config.yaml   # 异常 Pod 检查
k8stools runtimeInspect  -f config.yaml   # 容器运行时行为采集
k8stools costEstimator   -f config.yaml   # 成本估算
</code></pre>
<pre><code class="language-bash"># 计算资源使用情况的理想配置建议
k8stools paradise -f config.yaml

# 基于 Prometheus 历史数据的趋势分析
k8stools trend -f config.yaml

# 检查所有命名空间下异常状态的 Pod
k8stools poderrors -f config.yaml

# 查看容器运行时信息（进程、端口、环境变量）
k8stools runtimeInspect -f config.yaml

# 根据配置中机器单价和总 CPU 数进行成本估算
k8stools costEstimator -f config.yaml
</code></pre>
<hr>
<h1 id="-建议输出目录结构">📁 建议输出目录结构</h1>
<p>统一将输出放到 <code>output/</code> 目录，并添加时间戳，便于追溯与比较：</p>
<pre><code>output/
├── cpu_info_2025-04-21.csv
├── cost_estimate_2025-04-21.csv
└── resource_trend_2025-04-21.csv
</code></pre>
<h1 id="-联系与反馈">📬 联系与反馈</h1>
<p>如有建议或需求，欢迎反馈或提交 PR，一起打磨出更适合生产的 K8s 工具链！</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.02966663737037037" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-16 17:34">2025-05-16 17:33</span>&nbsp;
<a href="https://www.cnblogs.com/xiaogongzi">zz小公子</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18880362);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18880362', targetLink: 'https://www.cnblogs.com/xiaogongzi/p/18880362', title: 'K8stools工具' })">举报</a>
</div>
        