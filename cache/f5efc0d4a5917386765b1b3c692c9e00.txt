
	<div class="postTitle">
		<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kongsq/p/18695516" title="发布于 2025-01-30 23:42">
    <span role="heading" aria-level="2">电商系统-用户认证（二）</span>
    

</a>

	</div>
	    <div id="cnblogs_post_description" style="display: none">
        
        JWT令牌简介,JWT令牌结构
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h2>一、 Spring security Oauth 2.0认证解决方案</h2>
<p><br>本项目采用 Spring security + Oauth2+JWT完成用户认证及用户授权，Spring security 是一个强大的和高度可定制的身份验证和访问控制框架，Spring security 框架集成了Oauth2协议，下图是项目认证架构图：</p>
<p><img src="https://img2024.cnblogs.com/blog/527658/202501/527658-20250130233333399-1922265246.png" alt="" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>&nbsp;</p>
<p><br>1、用户请求认证服务完成认证。</p>
<p>2、认证服务下发用户身份令牌，拥有身份令牌表示身份合法。</p>
<p>3、用户携带令牌请求资源服务，请求资源服务必先经过网关。</p>
<p>4、网关校验用户身份令牌的合法，不合法表示用户没有登录，如果合法则放行继续访问。</p>
<p>5、资源服务获取令牌，根据令牌完成授权。</p>
<p>6、资源服务完成授权则响应资源信息。</p>
<h2>二、Jwt令牌简介</h2>
<p><br>　　JSON Web Token（JWT）是一个开放的行业标准（RFC 7519），它定义了一种简介的、自包含的协议格式，用于 在通信双方传递json对象，传递的信息经过数字签名可以被验证和信任。JWT可以使用HMAC算法或使用RSA的公 钥/私钥对来签名，防止被篡改。</p>
<p>　　官网：<a href="https://jwt.io/" target="_blank" rel="noopener nofollow">https://jwt.io/</a></p>
<p>　　标准：<a href="https://tools.ietf.org/html/rfc7519" target="_blank" rel="noopener nofollow">https://tools.ietf.org/html/rfc7519</a></p>
<p>　　<strong>JWT令牌的优点：</strong></p>
<p>1、jwt基于json，非常方便解析。<br>2、可以在令牌中自定义丰富的内容，易扩展。<br>3、通过非对称加密算法及数字签名技术，JWT防止篡改，安全性高。<br>4、资源服务使用JWT可不依赖认证服务即可完成授权。<br><strong>　　<strong>JWT令牌的</strong>缺点：</strong></p>
<p>１、JWT令牌较长，占存储空间比较大。</p>
<h3>2.1 令牌结构</h3>
<p><br>通过学习JWT令牌结构为自定义jwt令牌打好基础。</p>
<p>JWT令牌由三部分组成，每部分中间使用点（.）分隔，比如：xxxxx.yyyyy.zzzzz</p>
<p><strong>Header(头部)</strong></p>
<p>头部包括令牌的类型（即JWT）及使用的哈希算法（如HMAC SHA256或RSA）</p>
<p>一个例子如下：</p>
<p>下边是Header部分的内容</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">{
    </span>"alg": "HS256"<span style="color: rgba(0, 0, 0, 1)">,
    </span>"typ": "JWT"<span style="color: rgba(0, 0, 0, 1)">
}</span></pre>
</div>
<p>&nbsp;</p>
<p><br><br>将上边的内容使用Base64Url编码，得到一个字符串就是JWT令牌的第一部分。</p>
<p><strong>Payload(负载)</strong></p>
<p>　　第二部分是负载，内容也是一个json对象，它是存放有效信息的地方，它可以存放jwt提供的现成字段，比 如：iss（签发者）,exp（过期时间戳）, sub（面向的用户）等，也可自定义字段。</p>
<p>　　此部分不建议存放敏感信息，因为此部分可以解码还原原始内容。</p>
<p>　　最后将第二部分负载使用Base64Url编码，得到一个字符串就是JWT令牌的第二部分。</p>
<p>一个例子：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">{
    "sub": "1234567890",
    "name": "456",
    "admin": true
}</span></pre>
</div>
<p>&nbsp;</p>
<p><br><br><strong>Signature(签名)</strong></p>
<p>第三部分是签名，此部分用于防止jwt内容被篡改。</p>
<p>这个部分使用base64url将前两部分进行编码，编码后使用点（.）连接组成字符串，最后使用header中声明 签名算法进行签名。</p>
<p>一个例子：</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">HMACSHA256(
    base64UrlEncode(header) + "." +
    base64UrlEncode(payload),
    secret)</span></pre>
</div>
<p>&nbsp;</p>
<p><br>　　base64UrlEncode(header)：jwt令牌的第一部分。</p>
<p>　　base64UrlEncode(payload)：jwt令牌的第二部分。</p>
<p>　　secret：签名所使用的密钥。</p>
<h3>2.2 生成私钥公钥</h3>
<p><br>JWT令牌生成采用非对称加密算法</p>
<p>1、生成密钥证书 下边命令生成密钥证书，采用RSA 算法每个证书包含公钥和私钥</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">keytool -genkeypair -alias shangcheng -keyalg RSA -keypass
shangcheng -keystore changgou.jks -storepass shangcheng</span></pre>
</div>
<p>&nbsp;</p>
<p><br><br>Keytool 是一个java提供的证书管理工具</p>
<p>-alias：密钥的别名<br>-keyalg：使用的hash算法<br>-keypass：密钥的访问密码<br>-keystore：密钥库文件名，shangcheng.jks保存了生成的证书<br>-storepass：密钥库的访问密码</p>
<p>查询证书信息：</p>
<div class="cnblogs_code">
<pre>keytool -list -keystore shangcheng.jks</pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>2.3、导出公钥</h3>
<p><br>openssl是一个加解密工具包，这里使用openssl来导出公钥信息。</p>
<p>安装 openssl：<a title="测试" href="http://slproweb.com/products/Win32OpenSSL.html" target="_blank" rel="noopener nofollow">http://slproweb.com/products/Win32OpenSSL.html</a></p>
<p>安装资料目录下的Win64OpenSSL-1_1_1b.exe</p>
<p>配置openssl的path环境变量，</p>
<p>cmd进入shangcheng.jks文件所在目录执行如下命令：</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">keytool -list -rfc --keystore shangcheng.jks | openssl x509 
-inform pem -pubkey</span></pre>
</div>
<p>&nbsp;</p>
<p><br>下面段内容是公钥</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvFsEiaLvij9C1Mz+oyAm
t47whAaRkRu/8kePM+X8760UGU0RMwGti6Z9y3LQ0RvK6I0brXmbGB/RsN38PVnh
cP8ZfxGUH26kX0RK+tlrxcrG+HkPYOH4XPAL8Q1lu1n9x3tLcIPxq8ZZtuIyKYEm
oLKyMsvTviG5flTpDprT25unWgE4md1kthRWXOnfWHATVY7Y/r4obiOL1mS5bEa/
iNKotQNnvIAKtjBM4RlIDWMa6dmz+lHtLtqDD2LF1qwoiSIHI75LQZ/CNYaHCfZS
xtOydpNKq8eb1/PGiLNolD4La2zf0/1dlcr5mkesV570NxRmU1tFm8Zd3MZlZmyv
9QIDAQAB
-----END PUBLIC KEY-----</span></pre>
</div>
<p>&nbsp;</p>
<p><br>将上边的公钥拷贝到文本public.key文件中，合并为一行,可以将它放到需要实现授权认证的工程中。<br><br></p>
</div>
<div class="clear"></div>

	<div class="postDesc">posted on 
<span id="post-date" data-last-update-days="0.032120447578703706" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-30 23:44">2025-01-30 23:42</span>&nbsp;
<a href="https://www.cnblogs.com/kongsq">努力--坚持</a>&nbsp;
阅读(<span id="post_view_count">3</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18695516" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18695516);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18695516', targetLink: 'https://www.cnblogs.com/kongsq/p/18695516', title: '电商系统-用户认证（二）' })">举报</a>
</div>
