
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/MrVolleyball/p/18996229" title="发布于 2025-07-24 10:46">
    <span role="heading" aria-level="2">深入浅出--从零开始建设k8s监控之thanos（六）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>书接上文，目前环境已经做好了水平拆分，是这个样子的</p>
<p><img alt="prometheus_6_1" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1416773/202507/1416773-20250721172418186-1518697965.png" class="lazyload"></p>
<p>本文使用thanos对这些prometheus进行数据汇聚，并且详细讨论一下thanos</p>
<h2 id="环境准备">环境准备</h2>
<table>
<thead>
<tr>
<th>组件</th>
<th>版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>操作系统</td>
<td>Ubuntu 22.04.4 LTS</td>
</tr>
<tr>
<td>docker</td>
<td>24.0.7</td>
</tr>
<tr>
<td>thanos</td>
<td>0.36.1</td>
</tr>
</tbody>
</table>
<h2 id="thanos概述">thanos概述</h2>
<p>thanos主要有4个组件</p>
<ul>
<li>receive：独立部署，提供了数据写入的api，prometheus通过这个api把数据推送到receive的对象存储</li>
<li>sidecar：与prometheus部署在一起，成为prometheus的sidecar，负责把prometheus本地的数据上传至对象存储当中</li>
<li>query：独立部署，是一个兼容了prometheus的查询组件，汇总了来自不同来源的查询结果，并且可以从Sidecar和Store中读取数据</li>
<li>store：独立部署，提供了对象数据存储功能，并且提供相关的api，query通过该api查询历史数据</li>
</ul>
<p>thanos有两种工作模式，receive与sidecar</p>
<h2 id="receive模式">receive模式</h2>
<p>Receive 是一个可以接收来自 Prometheus 远程写入的数据的组件，主要用于高可用的集群环境中。它能够处理来自多个 Prometheus 实例的写入请求</p>
<p><img alt="prometheus_6_2" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1416773/202507/1416773-20250721172438127-955293648.png" class="lazyload"></p>
<h3 id="1-部署thanos-receive">1. 部署thanos receive</h3>
<pre><code>▶ mkdir -p data &amp;&amp; chmod 777 data
▶ docker run -d --net=host \
  --name thanos-receive \
  -v "./data:/data" \
  registry.cn-beijing.aliyuncs.com/wilsonchai/thanos:0.36.1 \
  receive \
    --grpc-address 0.0.0.0:10907 \
    --http-address 0.0.0.0:10909 \
    --receive.replication-factor 1 \
    --label "receive_cluster=\"wilson-test\"" \
    --remote-write.address 0.0.0.0:10908
</code></pre>
<h3 id="2-改造prometheus">2. 改造prometheus</h3>
<p>分别对3个prometheus进行改造，分别修改其configmap</p>
<ul>
<li>负责采集k8s监控数据</li>
</ul>
<pre><code>...
    scrape_configs:
...
    remote_write:
      - url: "http://10.22.11.156:10908/api/v1/receive"
        write_relabel_configs:
          - action: replace
            source_labels: []
            target_label: from
            replacement: "prometheus-k8s"

</code></pre>
<ul>
<li>负责采集node监控数据</li>
</ul>
<pre><code>...
    scrape_configs:
...
    remote_write:
      - url: "http://10.22.11.156:10908/api/v1/receive"
        write_relabel_configs:
          - action: replace
            source_labels: []
            target_label: from
            replacement: "prometheus-node"

</code></pre>
<ul>
<li>负责采集pushgateway监控数据</li>
</ul>
<pre><code>...
    scrape_configs:
...
    remote_write:
      - url: "http://10.22.11.156:10908/api/v1/receive"
        write_relabel_configs:
          - action: replace
            source_labels: []
            target_label: from
            replacement: "prometheus-pushgateway"

</code></pre>
<h3 id="3-部署thanos-query">3. 部署thanos query</h3>
<pre><code>docker run -d --net=host \
  --name thanos-query \
  registry.cn-beijing.aliyuncs.com/wilsonchai/thanos:0.36.1 \
  query \
    --http-address "0.0.0.0:39090" \
    --grpc-address "0.0.0.0:39091" \
    --store "127.0.0.1:10907"
</code></pre>
<p>登录thanos-query提供的web界面<code>http://127.0.0.1:39090/</code>，可以看到3个prometheus节点的数据都已汇聚，并且已经标注了来源，<code>from</code>标签</p>
<h3 id="4-部署对象存储-minio">4. 部署对象存储 minio</h3>
<p>目前我们的数据还是存储在receive的本地磁盘上的，为了长期保留数据，将其推送至自建的对象存储当中</p>
<p><img alt="prometheus_6_3" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1416773/202507/1416773-20250721172458274-852967067.png" class="lazyload"></p>
<p>创建minio</p>
<pre><code>docker run -d --name minio --net host \
  -e "MINIO_ACCESS_KEY=minioadmin" \
  -e "MINIO_SECRET_KEY=minioadmin" \
  -v ./data:/data \
  -v ./config:/root/.minio \
  registry.cn-beijing.aliyuncs.com/wilsonchai/minio:RELEASE.2024-10-13T13-34-11Z \
  server /data --console-address ":9000" -address ":9090"

</code></pre>
<p>通过用户名密码登录web页面<code>http://127.0.0.1:9000/</code>，然后创建<code>bucket</code>，再创建<code>access key</code></p>
<p>回到thanos，创建bucket.yml文件</p>
<pre><code>type: S3
config:
  bucket: "wilson-test"
  endpoint: "127.0.0.1:9090"
  access_key: "zzUrkBzyqcCDXySsMLlS"
  secret_key: "nWCcztESnxnUZIKSKsELGEFdg6l6fjzhtqkARJB8"
  insecure: true
</code></pre>
<p>最后重建thanos receive</p>
<pre><code>docker run -d --net=host \
  --name thanos-receive \
  -v ./bucket.yml:/etc/thanos/bucket.yml \
  -v "./data:/data" \
  registry.cn-beijing.aliyuncs.com/wilsonchai/thanos:0.36.1 \
  receive \
    --grpc-address 0.0.0.0:10907 \
    --http-address 0.0.0.0:10909 \
    --objstore.config-file=/etc/thanos/bucket.yml \
    --tsdb.retention=2d \
    --label "receive_cluster=\"wilson-test\"" \
    --remote-write.address 0.0.0.0:10908
</code></pre>
<p>默认情况下每个2小时，thanos就会往对象存储当中推送数据，这个时间可以调整，只需要调整以下参数即可</p>
<pre><code>    --tsdb.min-block-duration=10m \
    --tsdb.max-block-duration=10m \
</code></pre>
<p>检查minio的控制台，检查是否成功上传</p>
<p><img alt="prometheus_6_4" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1416773/202507/1416773-20250721172523672-1637626689.png" class="lazyload"></p>
<h3 id="5-部署thanos-store直接读取对象存储">5. 部署thanos-store，直接读取对象存储</h3>
<p>store gateway就是简单的去读取对象存储当中的数据，通过 api暴露给thanos-query，thanos-query调用store api然后获取数据，这样就可以直接读取对象存储的数据了</p>
<p><img alt="prometheus_6_6" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1416773/202507/1416773-20250721172552514-601594264.png" class="lazyload"></p>
<p>部署store</p>
<pre><code>docker run -d --net=host \
  --name thanos-store \
  -v "./data-store:/data" \
  -v ./bucket.yml:/etc/thanos/bucket.yml \
  registry.cn-beijing.aliyuncs.com/wilsonchai/thanos:0.36.1 \
  store \
    --objstore.config-file "/etc/thanos/bucket.yml"
</code></pre>
<p>这里的bucket.yaml，还是沿用了上面的bucket.yaml，指向同样的对象存储</p>
<p>调整thanos-query的配置，新增thanos-store的地址</p>
<pre><code>docker run -d --net=host \
  --name thanos-query \
  registry.cn-beijing.aliyuncs.com/wilsonchai/thanos:0.36.1 \
  query \
    --http-address "0.0.0.0:39090" \
    --grpc-address "0.0.0.0:39091" \
    --store "127.0.0.1:10907" \
    --store "127.0.0.1:10901"
</code></pre>
<p><code>127.0.0.1:10901</code>就是新增的store的grpc地址，添加完毕后，检查thanos-query的web页面</p>
<p><img alt="prometheus_6_5" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1416773/202507/1416773-20250721172611905-83259065.png" class="lazyload"></p>
<p>thanos-query的数据源来自两个地方，一个是receive，一个是store，并且thanos-query有自动去重的功能，真牛皮！</p>
<h3 id="6-小结">6. 小结</h3>
<ul>
<li>以上就是receive模式的基本使用方法，在receive模式中，使用了receive、query、store等组件，并且展示了它们之间如何协调合作</li>
<li>上述演示的对象存储，是自建的minio，在实际工作中，可以使用云厂商的对象存储相互配合，易于管理</li>
</ul>
<h2 id="联系我">联系我</h2>
<ul>
<li>联系我，做深入的交流<br>
<img alt="" width="500" height="200" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1416773/202411/1416773-20241121135740959-1907948957.png#" class="lazyload"></li>
</ul>
<hr>
<p>至此，本文结束<br>
在下才疏学浅，有撒汤漏水的，请各位不吝赐教...</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/MrVolleyball/" target="_blank">it排球君</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/MrVolleyball/p/18996229" target="_blank">https://www.cnblogs.com/MrVolleyball/p/18996229</a></p>
<div>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须在文章页面给出原文连接，否则保留追究法律责任的权利。 </div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-24 10:47">2025-07-24 10:46</span>&nbsp;
<a href="https://www.cnblogs.com/MrVolleyball">it排球君</a>&nbsp;
阅读(<span id="post_view_count">121</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18996229);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18996229', targetLink: 'https://www.cnblogs.com/MrVolleyball/p/18996229', title: '深入浅出--从零开始建设k8s监控之thanos（六）' })">举报</a>
</div>
        