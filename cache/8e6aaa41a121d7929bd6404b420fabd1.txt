
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xwz1024/p/18995460" title="发布于 2025-07-21 11:22">
    <span role="heading" aria-level="2">Django实战：基于Django和openpyxl实现Excel导入导出功能</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250721112223251-1649258574.png" alt="Django实战：基于Django和openpyxl实现Excel导入导出功能" class="desc_img">
        `openpyxl` 是用于处理 Excel 文件的 Python 库。本文详解其在 Django 项目中的实战应用，涵盖 Excel 文件的生成、下载、上传与解析。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="一openpyxl-介绍">一、openpyxl 介绍</h2>
<p><code>openpyxl</code> 是一个用于读取和写入 Excel 2010 xlsx/xlsm/xltx/xltm 文件的 Python 库。使用场景包括：</p>
<ul>
<li>数据分析：从 Excel 文件中读取数据，进行处理和分析。</li>
<li>自动化办公：自动生成报告、填写表格等。</li>
<li>数据导入导出：将数据从 Python 程序导入到 Excel，或将 Excel 数据导入到 Python 程序中。</li>
</ul>
<p>安装<code>openpyxl</code></p>
<pre><code class="language-sh">pip install openpyxl
</code></pre>
<h2 id="二excel文件下载">二、Excel文件下载</h2>
<h3 id="创建并保存-excel-文件">创建并保存 Excel 文件</h3>
<p>示例：创建一个新的 Excel 工作簿，并写入一些数据，最后保存为文件</p>
<pre><code class="language-python">from openpyxl import Workbook

# 创建一个新的工作簿
workbook = Workbook()

# 获取默认的工作表
sheet = workbook.active
sheet.title = "MySheet"  # 设置工作表标题

# 写入数据到单元格
sheet['A1'] = "Hello, Openpyxl!"
sheet['B2'] = 42

# 保存工作簿
workbook.save('new_example.xlsx')
</code></pre>
<h3 id="excel工具函数">Excel工具函数</h3>
<p>为提高代码复用率，整理处理Excel工具函数</p>
<ul>
<li>create_excel_workbook()：将数据 <code>data</code> 按照指定字段和标签写入一个新的 Excel 工作簿，并设置表头和列宽。</li>
<li>generate_excel_response()：将 <code>workbook</code>（Excel 工作簿）生成 Excel 文件，并通过 HTTP 响应返回给客户端下载</li>
<li>process_item()：将一个数据项 <code>item</code> 按照指定字段顺序 <code>fields</code> 转换为一行数据（列表）</li>
<li>convert_datetime()：将带有时区信息的 ISO 格式时间字符串（如 <code>"2023-01-01T12:34:56.789+08:00"</code>）转换为去除时区、毫秒并替换 <code>T</code> 为空格的字符串，输出格式为 <code>"YYYY-MM-DD HH:MM:SS"</code>。</li>
</ul>
<pre><code class="language-python">from urllib.parse import quote
from django.http import HttpResponse
from openpyxl import Workbook
from openpyxl.utils import get_column_letter


def convert_datetime(datetime_str):
    # 移除时区部分（+08:00）
    datetime_without_tz = datetime_str.replace("+08:00", "")
    # 移除 "T" 并截取到秒部分（去掉毫秒）
    return datetime_without_tz.replace("T", " ").split(".")[0]


def process_item(item, fields, data_map={}):
    """将单个数据项转换为行数据"""
    row = []
    for field in fields:
        value = item.get(field)
        # 友好显示转换
        if field in data_map:
            value = data_map[field].get(value, None)
        # 特殊字段类型转换
        elif field == "id" or field == "job_id":
            value = str(value)
        elif field == "create_time" or field == "date_created" or field == "date_done":
            value = convert_datetime(value)
        row.append(value)
    return row


def create_excel_workbook(data, fields_labels, data_map={}, sheet_name="Sheet1"):
    """
    将数据写入Excel文件
    """
    fields = list(fields_labels.keys())
    labels = list(fields_labels.values())
    # 创建一个 Excel 工作簿
    workbook = Workbook()
    sheet = workbook.active
    sheet.title = sheet_name
    # 设置表头
    sheet.append(labels)
    # 添加数据
    for item in data:
        row = process_item(item, fields, data_map)
        sheet.append(row)
    # 设置列宽
    for col_num in range(1, len(labels) + 1):
        col_letter = get_column_letter(col_num)
        sheet.column_dimensions[col_letter].width = 15

    return workbook


def generate_excel_response(workbook, file_name="export.xlsx"):
    """
    生成 Excel 文件并返回 HTTP 响应。
    """
    response = HttpResponse(
        content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    response["Content-Disposition"] = f"attachment; filename={quote(file_name)}"
    workbook.save(response)
    return response

</code></pre>
<p><a href="https://gitee.com/zhulj993/mars-mgn/blob/master/mysite/mars_framework/utils/excel.py" target="_blank" rel="noopener nofollow">点击查看完整代码</a></p>
<h3 id="项目实战excel文件下载">项目实战：Excel文件下载</h3>
<p>实战场景：在Django+Vue3后台管理系统中，实现用户的导入导出功能是常见需求。用户导入功能，一般需要先下载模板，填写后再导入。</p>
<p><img alt="image-20250721095339847" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250721112059770-1571257508.png" class="lazyload"></p>
<p>实战代码：定义视图，将示例数据导出为 Excel 文件并返回给用户下载，实现<strong>下载模板</strong>功能</p>
<pre><code class="language-python">  @extend_schema(summary="获得用户导入模板")
    @action(
        methods=["get"],
        detail=False,
        url_path="get-import-template",
    )
    def get_import_template(self, request, *args, **kwargs):
        """获得用户导入模板"""

        # 定义示例数据
        data = [
            {
                "username": "xiaozhang",
                "nickname": "小张",
                "deptId": "103",
                "email": "xz@qq.com",
                "mobile": "13312345670",
                "sex": "男",
                "status": "开启",
            },
            {
                "username": "xiaoli",
                "nickname": "小李",
                "deptId": "",
                "email": "",
                "mobile": "",
                "sex": "",
                "status": "关闭",
            },
        ]

        fields_labels = {
            "username": "用户账号",
            "nickname": "用户昵称",
            "deptId": "部门编号",
            "email": "用户邮箱",
            "mobile": "手机号码",
            "sex": "用户性别",
            "status": "账号状态",
        }

        # 返回工作簿
        workbook = create_excel_workbook(data, fields_labels)
        return generate_excel_response(workbook, "用户导入模板.xlsx")
</code></pre>
<p>实现效果</p>
<p><img alt="image-20250721100409108" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250721112112552-1021403173.png" class="lazyload"></p>
<h2 id="三excel-文件上传">三、Excel 文件上传</h2>
<h3 id="获取上传的文件">获取上传的文件</h3>
<p>当 Django 处理文件上传时，文件数据会被放置在 request.FILES 中。获取上传文件示例</p>
<pre><code class="language-python">file = request.FILES.get("file")
</code></pre>
<h3 id="读取excel中的数据">读取Excel中的数据</h3>
<p>示例：读取<code>example.xlsx</code>文件中的标题、单元格等信息</p>
<pre><code class="language-python">from openpyxl import load_workbook

# 加载一个已存在的Excel文件
workbook = load_workbook('example.xlsx')

# 获取工作簿中的工作表
sheet = workbook.active  # 获取当前活动的工作表
print(sheet.title)  # 输出工作表的标题

# 读取单元格的值
cell_value = sheet['A1'].value
print(cell_value)
</code></pre>
<h3 id="项目实战excel文件上传">项目实战：Excel文件上传</h3>
<p>实战场景：在Django+Vue3后台管理系统中，实现用户导入功能</p>
<ul>
<li>第一步：获取用户上传的文件</li>
<li>第二步：调用<code>get_user_import_data()</code>函数，读取Excel文件中的用户数据，并将其转换为系统所需格式的字典列表。</li>
<li>第三步：使用序列化器，将用户信息保存到数据库</li>
</ul>
<p><img alt="image-20250721102457976" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250721112124066-1932740043.png" class="lazyload"></p>
<pre><code class="language-python">def get_user_import_data(file) -&gt; list:
    """
    读取Excel文件中的用户信息，并将其转换为字典列表
    """
    # 加载Excel文件
    workbook = load_workbook(file)
    sheet = workbook.active
    # 固定表头，以确保数据字段的一致性
    headers = ["username", "nickname", "deptId", "email", "mobile", "sex", "status"]
    # 初始化数据列表
    data = []
    # 遍历每一行数据
    for row in sheet.iter_rows(min_row=2, values_only=True):
        # 将当前行数据与表头 zip 后转换为字典
        user_data = dict(zip(headers, row))
        # 转换 sex 和 status 字段
        user_data["sex"] = (
            1 if user_data["sex"] == "男" else 2 if user_data["sex"] == "女" else 0
        )
        user_data["status"] = (
            0
            if user_data["status"] == "开启"
            else 1 if user_data["status"] == "关闭" else None
        )
        data.append(user_data)

    return data
</code></pre>
<p>实现效果：<a href="https://gitee.com/zhulj993/mars-mgn/blob/master/mysite/myapp_system/user/views.py" target="_blank" rel="noopener nofollow">点击查看完整代码</a></p>
<p><img alt="image-20250721104341379" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250721112134785-217167312.png" class="lazyload"></p>
<hr>
<p>您正在阅读的是《<strong>Django从入门到实战</strong>》专栏！关注不迷路~</p>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-21 11:23">2025-07-21 11:22</span>&nbsp;
<a href="https://www.cnblogs.com/xwz1024">小王子1024</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18995460);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18995460', targetLink: 'https://www.cnblogs.com/xwz1024/p/18995460', title: 'Django实战：基于Django和openpyxl实现Excel导入导出功能' })">举报</a>
</div>
	