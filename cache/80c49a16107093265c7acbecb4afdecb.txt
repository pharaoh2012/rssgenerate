
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/clairejing/p/18972723" title="发布于 2025-07-08 11:54">
    <span role="heading" aria-level="2">Spring AI Alibaba智能测试用例生成</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div class="ace-line" dir="auto" data-node="true"><span data-leaf="true">👋 还在为手动编写测试用例秃头吗？面对复杂需求文档，一个一个抠测试点，不仅效率低，还容易遗漏关键场景？为了解决该问题，笔者依托Spring AI开发了测试用例生成工具~</span></div>
<div class="ace-line" dir="auto" data-node="true"><span data-leaf="true"><span data-string="true" data-enter="true" data-leaf="true">​后端源码：<a href="https://github.com/qa-dpp/case-ai-backend" target="_blank" rel="noopener nofollow">https://github.com/qa-dpp/case-ai-backend</a></span></span></div>
<div class="ace-line" dir="auto" data-node="true"><span data-leaf="true"><span data-string="true" data-enter="true" data-leaf="true">前端源码：<a href="https://github.com/qa-dpp/case-ai-front" target="_blank" rel="noopener nofollow">https://github.com/qa-dpp/case-ai-front</a></span></span></div>
<div class="ace-line" dir="auto" data-node="true">&nbsp;</div>
<div class="ace-line" dir="auto" data-node="true">&nbsp;</div>
<div class="ace-line" dir="auto" data-node="true">&nbsp;</div>
<div class="ace-line" dir="auto" data-node="true">&nbsp;</div>
<div class="ace-line heading-h2" dir="auto" data-node="true"><span data-leaf="true">🌟&nbsp;<strong>核心功能</strong><span data-string="true" data-enter="true" data-leaf="true">​</span></span></div>
<div class="ace-line list-div" dir="auto" data-node="true">
<ul class="list-bullet1 r-list r-list-bullet">
<li><span data-leaf="true">全类型文档分析<span data-leaf="true">：基于 Spring AI Alibaba的自然语言处理和图像识别能力，支持pdf 、word、txt多种格式需求文档，精准提取需求点。<span data-string="true" data-enter="true" data-leaf="true">​</span></span></span></li>
</ul>
</div>
<div class="ace-line list-div" dir="auto" data-node="true">
<ul class="list-bullet1 r-list r-list-bullet">
<li><span data-leaf="true">智能生成与筛选<span data-leaf="true">：采用&nbsp;Spring AI Alibaba的生成者评估者模式，生成者批量产出候选测试用例，评估者从合理性、覆盖率等维度筛选，保障用例质量与全面性。<span data-string="true" data-enter="true" data-leaf="true">​</span></span></span></li>
</ul>
</div>
<div class="ace-line list-div" dir="auto" data-node="true">
<ul class="list-bullet1 r-list r-list-bullet">
<li><span data-leaf="true">脑图可视化呈现<span data-leaf="true">：将生成的测试用例自动转化为表格和脑图，清晰展示用例逻辑结构和与需求的对应关系，方便理解、执行与团队协作。<span data-string="true" data-enter="true" data-leaf="true">​</span></span></span></li>
</ul>
</div>
<div class="ace-line heading-h2" dir="auto" data-node="true"><span data-leaf="true">🛠️&nbsp;<strong>技术架构</strong><span data-string="true" data-enter="true" data-leaf="true">​</span></span></div>
<div class="ace-line list-div" dir="auto" data-node="true">
<ul class="list-bullet1 r-list r-list-bullet">
<li><span data-leaf="true">底层框架<span data-leaf="true">：依托 Spring AI Alibaba，实现对文档的智能解析与处理。<span data-leaf="true">​</span></span></span></li>
</ul>
</div>
<div class="ace-line list-div" dir="auto" data-node="true">
<ul class="list-bullet1 r-list r-list-bullet">
<li><span data-leaf="true">生成模式<span data-leaf="true">：运用生成者评估者模式，构建高效可靠的测试用例生成流程。<span data-string="true" data-enter="true" data-leaf="true">​</span></span></span></li>
</ul>
</div>
<div class="ace-line list-div" dir="auto" data-node="true">
<ul class="list-bullet1 r-list r-list-bullet">
<li><span data-leaf="true">可视化<span data-leaf="true">：集成表格和脑图生成技术，让测试用例以直观图形化方式呈现。</span></span></li>
</ul>
<p>&nbsp;</p>
<p>🛠️<strong>代码整体框架：</strong></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1284295/202507/1284295-20250707151726023-56169111.png" class="lazyload"></p>
<p>&nbsp;</p>
<p>🛠️<strong>代码详解：</strong></p>
<h3 class="header-vfC6AV auto-hide-last-sibling-br">1. 常量定义（<span class="code-file-path-iIAQg1">Consts.java）</span></h3>
<div class="cnblogs_code">
<pre>package<span> com.fingertip.caseaibackend.commons;

public class<span> Consts {
    public static final String ANALYZE_PROMPT =<span> ...;
    public static final String CASE_WRITER_PROMPT =<span> ...;
    public static final String CASE_REVIEWER_PROMPT =<span> ...;
    public static final String CASE_FORMAT_PROMPT =<span> ...;
    public static final String VISUAL_PROMPT =<span> ...;

    public static final String ORIGIN_MESSAGE = "originMessage"<span>;
    public static final String CASE_INFO_MESSAGE = "caseInfoMessage"<span>;
    public static final String CASE_REVIEW_MESSAGE = "caseReviewMessage"<span>;
    public static final String CASE_FORMAT_MESSAGE = "caseFormatMessage"<span>;
}</span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<p>该类定义了一系列常量，包括与大语言模型交互时使用的提示信息（如需求分析提示、测试用例编写提示等）以及状态图中使用的消息键。</p>
<h3 class="header-vfC6AV auto-hide-last-sibling-br">2. 配置文件（<span class="code-file-path-iIAQg1">application.yml）</span></h3>
<div class="cnblogs_code">
<pre><span>server:
  port: 8080<span>

spring:
  application:
    name: spring-ai-alibaba-openai-chat-model-<span>example
  ai:
    openai:
      api-<span>key: xxx
      base-url: https://api.siliconflow.cn/
<span>      chat:
        options:
          model: deepseek-ai/DeepSeek-<span>R1
  servlet:
    multipart:
      max-file-<span>size: 50MB
      max-request-<span>size: 50MB
case-<span>model:
  visual:
    api-<span>key: xxx
    base-url: https://api.siliconflow.cn/
    model: Qwen/Qwen2.5-VL-72B-<span>Instruct
  analyze:
    api-<span>key: xxx
    base-url: https://api.siliconflow.cn/
    model: deepseek-ai/DeepSeek-<span>R1
  generate:
    api-<span>key: xxx
    base-url: https://api.siliconflow.cn/
    model: deepseek-ai/DeepSeek-R1-Distill-Qwen-<span>7B
  reviewer:
    api-<span>key: xxx
    base-url: https://api.siliconflow.cn/
    model: MiniMaxAI/MiniMax-M1-<span>80k
  format:
    api-<span>key: xxx
    base-url: https://api.siliconflow.cn/
    model: deepseek-ai/DeepSeek-<span>V3
logging:
  level:
    root: INFO
    org.springframework.ai: DEBUG
    com.example.demo: DEBUG</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<p>配置文件定义了服务器端口、Spring AI 的基本配置（如 API 密钥、基础 URL、模型类型）以及不同任务（如可视化、需求分析、测试用例生成等）使用的模型信息。同时，还配置了文件上传的最大大小和日志级别。</p>
<h3 class="header-vfC6AV auto-hide-last-sibling-br">3. 大语言模型配置（<span class="code-file-path-iIAQg1">LLMConfig.java）</span></h3>
<div class="cnblogs_code">
<pre>package<span> com.fingertip.caseaibackend.aiproxies.configs;

import<span> org.springframework.ai.chat.model.ChatModel;
import<span> org.springframework.ai.openai.OpenAiChatModel;
import<span> org.springframework.ai.openai.OpenAiChatOptions;
import<span> org.springframework.ai.openai.api.OpenAiApi;
import<span> org.springframework.beans.factory.annotation.Value;
import<span> org.springframework.context.annotation.Bean;
import<span> org.springframework.context.annotation.Configuration;

@Configuration
public class<span> LLMConfig {
    @Value("${case-model.analyze.api-key}"<span>)
    private String analyze_apiKey = ""<span>;
    @Value("${case-model.analyze.base-url}"<span>)
    private String analyze_baseUrl = ""<span>;
    @Value("${case-model.analyze.model}"<span>)
    private String analyze_Model = ""<span>;

    @Bean
    public<span> ChatModel analyzeModel() {
        OpenAiChatOptions options = new<span> OpenAiChatOptions();
        options.setModel(analyze_Model);
        options.setTemperature(0.7<span>);
        return<span> OpenAiChatModel.builder().openAiApi(OpenAiApi.builder().apiKey(analyze_apiKey).baseUrl(analyze_baseUrl).build()).defaultOptions(options).build();
    }

    // 其他模型配置...
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<p>该类使用 Spring 的&nbsp;<code>@Configuration</code>&nbsp;注解，通过&nbsp;<code>@Value</code>&nbsp;注解从配置文件中读取不同任务所需的 API 密钥、基础 URL 和模型类型，然后创建相应的&nbsp;<code>ChatModel</code>&nbsp;实例。</p>
<h3 class="header-vfC6AV auto-hide-last-sibling-br">4. 控制器（<span class="code-file-path-iIAQg1">AiChatController.java）</span></h3>
<div class="cnblogs_code">
<pre><span>@RestController
@RequestMapping("/ai-api"<span>)
public class<span> AiChatController {
    private static final String DEFAULT_PROMPT = "你好，介绍下你自己！"<span>;

    private final<span> ChatClient openAiAnalyzeChatClient;
    private final<span> ChatClient openAiGenerateChatClient;
    private final<span> ChatClient openAiReviewerChatClient;
    private final<span> ChatClient openAiFormatChatClient;
    private final<span> ChatClient openAiVisualChatClient;

    public AiChatController(@Qualifier("analyzeModel"<span>) ChatModel analyzeModel, ...) {
        this.openAiAnalyzeChatClient =<span> ChatClient.builder(analyzeModel)
                .defaultAdvisors(new<span> SimpleLoggerAdvisor())
                .defaultOptions(OpenAiChatOptions.builder().topP(0.7<span>).build())
                .build();
        // 其他 ChatClient 初始化...
<span>    }

    @PostMapping("/file/upload"<span>)
    public ApiResult&lt;String&gt; uploadFile(@RequestParam("files"<span>) MultipartFile[] files) {
        ApiResult&lt;String&gt; result = new ApiResult&lt;&gt;<span>();
        try<span> {
            if (files == null || files.length == 0<span>) {
                result.setMessage("上传文件为空"<span>);
                result.setCode(400<span>);
                return<span> result;
            }

            StringBuilder contentBuilder = new<span> StringBuilder();
            for<span> (MultipartFile file : files) {
                if<span> (file.isEmpty()) {
                    continue<span>;
                }
                String fileName =<span> file.getOriginalFilename();
                if (fileName == null<span>) {
                    continue<span>;
                }

                if (fileName.endsWith(".docx") || fileName.endsWith(".pdf"<span>)) {
                    List&lt;Media&gt; mediaList = null<span>;
                    if (fileName.endsWith(".docx"<span>)) {
                        // 将 docx 转换为 PDF
                        XWPFDocument docxDoc = new<span> XWPFDocument(file.getInputStream());
                        ByteArrayOutputStream pdfOutputStream = new<span> ByteArrayOutputStream();
                        PdfOptions options =<span> PdfOptions.create();
                        PdfConverter.getInstance().convert(docxDoc, pdfOutputStream, options);
                        byte[] pdfBytes =<span> pdfOutputStream.toByteArray();
                        mediaList =<span> convertPdfToImages(pdfBytes);
                    } else if (fileName.endsWith(".pdf"<span>)) {
                        mediaList =<span> convertPdfToImages(file.getBytes());
                    }
                    if (mediaList != null &amp;&amp; !<span>mediaList.isEmpty()) {
                        UserMessage message = UserMessage.builder().text(Consts.VISUAL_PROMPT).media(mediaList).metadata(new HashMap&lt;&gt;<span>()).build();
                        message.getMetadata().put(MESSAGE_FORMAT, MessageFormat.IMAGE);
                        String content = openAiVisualChatClient.prompt(new<span> Prompt(message)).call().content();
                        contentBuilder.append(content).append("\n"<span>);
                    }
                } else<span> {
                    if (!<span>file.isEmpty()) {
                        contentBuilder.append(file.getOriginalFilename()).append(":\n"<span>);
                        contentBuilder.append(new String(file.getBytes(), StandardCharsets.UTF_8)).append("\n"<span>);
                    }
                }
            }
            String content =<span> contentBuilder.toString();

            String resp =<span> openAiAnalyzeChatClient
                    .prompt(Consts.ANALYZE_PROMPT)
                    .user(content)
                    .call()
                    .content();

            result.setData(resp);
            result.setMessage("解析完成"<span>);
            result.setCode(200<span>);
        } catch<span> (Exception e) {
            result.setMessage("文件处理异常: " +<span> e.getMessage());
            result.setCode(500<span>);
            return<span> result;
        }
        return<span> result;
    }

    // 其他接口方法...
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<p><code>AiChatController</code>&nbsp;是项目的控制器类，负责处理客户端的请求。它通过构造函数注入不同任务的&nbsp;<code>ChatClient</code>&nbsp;实例，提供了文件上传、流式文件上传和测试用例创建等接口。在文件上传接口中，会根据文件类型（<code>.docx</code>&nbsp;或&nbsp;<code>.pdf</code>）进行相应的处理，如将&nbsp;<code>docx</code>&nbsp;转换为&nbsp;<code>PDF</code>，再将&nbsp;<code>PDF</code>&nbsp;转换为图片，最后调用可视化模型进行处理</p>
<h3 class="header-vfC6AV auto-hide-last-sibling-br">5. 节点类（<span class="code-file-path-iIAQg1">CaseGenerateNode.java,&nbsp;<span class="code-file-path-iIAQg1">CaseReviewerNode.java,&nbsp;<span class="code-file-path-iIAQg1">CaseFormatNode.java）</span></span></span></h3>
<div class="cnblogs_code">
<pre>package<span> com.fingertip.caseaibackend.aiproxies.nodes;

import<span> com.alibaba.cloud.ai.graph.OverAllState;
import<span> com.alibaba.cloud.ai.graph.action.NodeAction;
import<span> com.fingertip.caseaibackend.commons.Consts;
import<span> org.springframework.ai.chat.client.ChatClient;
import<span> org.springframework.ai.chat.model.ChatResponse;
import<span> org.springframework.util.StringUtils;

import<span> java.util.HashMap;
import<span> java.util.Map;

public class CaseGenerateNode implements<span> NodeAction {
    private final<span> ChatClient chatClient;

    public<span> CaseGenerateNode(ChatClient chatClient) {
        this.chatClient =<span> chatClient;
    }

    @Override
    public Map&lt;String, Object&gt;<span> apply(OverAllState t) {
        String origin_message = (String) t.value(Consts.ORIGIN_MESSAGE).orElse(""<span>);
        String case_reviewer_message = (String) t.value(Consts.CASE_REVIEW_MESSAGE).orElse(""<span>);
        String caseInfo = (String) t.value(Consts.CASE_INFO_MESSAGE).orElse(""<span>);

        if (!<span>StringUtils.hasText(origin_message)) {
            throw new IllegalArgumentException("没有找到原始消息"<span>);
        }
        String content = Consts.CASE_WRITER_PROMPT + "\n\n" +<span> origin_message;
        if (StringUtils.hasText(case_reviewer_message) &amp;&amp;<span> StringUtils.hasText(caseInfo)) {
            content = "%s\n# 原始需求:\n%s\n\n# 上个版本需求用例:\n%s \n# 专家意见:%s\n"<span>.formatted(Consts.CASE_WRITER_PROMPT, origin_message, caseInfo, case_reviewer_message);
        }

        ChatResponse response =<span> chatClient.prompt(content).call().chatResponse();
        String output = null<span>;
        if (response != null<span>) {
            output =<span> response.getResult().getOutput().getText();
        }

        Map&lt;String, Object&gt; updated = new HashMap&lt;&gt;<span>();
        updated.put(Consts.CASE_INFO_MESSAGE, output);

        return<span> updated;
    }
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<p>这些节点类实现了&nbsp;<code>NodeAction</code>&nbsp;接口，用于在状态图中执行特定的任务。例如，<code>CaseGenerateNode</code>&nbsp;负责根据原始需求和评审意见生成测试用例，它从&nbsp;<code>OverAllState</code>&nbsp;中获取所需的信息，构造请求内容，调用相应的&nbsp;<code>ChatClient</code>&nbsp;与大语言模型交互，最后将生成的测试用例信息存储到&nbsp;<code>OverAllState</code>&nbsp;中。</p>
<h3 class="header-vfC6AV auto-hide-last-sibling-br">6. 反馈分发器（<span class="code-file-path-iIAQg1">FeedbackDispatcher.java）</span></h3>
<div class="cnblogs_code">
<pre>package<span> com.fingertip.caseaibackend.aiproxies.nodes;

import<span> com.alibaba.cloud.ai.graph.OverAllState;
import<span> com.alibaba.cloud.ai.graph.action.EdgeAction;
import<span> com.fingertip.caseaibackend.commons.Consts;

public class FeedbackDispatcher implements<span> EdgeAction {
    @Override
    public<span> String apply(OverAllState t) {
        String output = (String) t.value(Consts.CASE_REVIEW_MESSAGE).orElse(""<span>);
        return output.toLowerCase().contains("approve") ? "positive" : "negative"<span>;
    }
}</span></span></span></span></span></span></span></span></pre>
</div>
<p><code>FeedbackDispatcher</code>&nbsp;实现了&nbsp;<code>EdgeAction</code>&nbsp;接口，根据测试用例评审结果（<code>CASE_REVIEW_MESSAGE</code>）判断是否通过评审，并返回相应的反馈结果（<code>positive</code>&nbsp;或&nbsp;<code>negative</code>），用于状态图中的流程控制</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>🌟C端页面</p>
<p>&nbsp;</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1284295/202507/1284295-20250707150309470-407562031.png" class="lazyload"></p>
<p>&nbsp;</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1284295/202507/1284295-20250707152041738-1664523471.png" class="lazyload"></p>
<p>&nbsp;</p>
<p>&nbsp;总结：</p>
<p>目前用例生成的promot需持续调优，测试用例的补全、最终用例的存储、下载功能有待开发，敬请期待~</p>
<p>&nbsp;</p>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-08 11:55">2025-07-08 11:54</span>&nbsp;
<a href="https://www.cnblogs.com/clairejing">小屁妞</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18972723);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18972723', targetLink: 'https://www.cnblogs.com/clairejing/p/18972723', title: 'Spring AI Alibaba智能测试用例生成' })">举报</a>
</div>
        