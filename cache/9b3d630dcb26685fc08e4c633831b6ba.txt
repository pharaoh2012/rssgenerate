
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/east4ming/p/18980661" title="发布于 2025-07-12 15:26">
    <span role="heading" aria-level="2">Python 脚本最佳实践2025版</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前文">前文</h2>
<p>可以直接把这篇文章喂给 AI, 可以放到 AI 角色设定里, 也可以直接作为提示词.<br>
这样, 你只管提需求, 写脚本就让 AI 来.</p>
<h2 id="概述">概述</h2>
<ul>
<li>追求<strong>简洁和清晰</strong>：脚本应简单明了。</li>
<li>使用函数 (<strong>functions</strong>)、常量 (<strong>constants</strong>) 和适当的导入 (<strong>import</strong> ) 实践来有逻辑地组织你的 Python 脚本。</li>
<li>使用枚举 (<strong>enumerations</strong> ) 和数据类 (<strong>data classes</strong>) 等数据结构高效管理脚本状态。</li>
<li>通过命令行参数增强交互性，并使用日志 (<strong>logging</strong> ) 和 <strong>Rich</strong> 等库提供结构化反馈以提高鲁棒性。</li>
<li>通过使用 <strong>PEP 723</strong> 在行内处理依赖项来创建<strong>自包含、可共享的脚本</strong>。</li>
</ul>
<h2 id="基础">基础</h2>
<ul>
<li>脚本开头用注释说明功能、作者、版本和修改记录</li>
<li>避免 Hardcode, Hardcode 会使脚本缺乏灵活性</li>
<li>使用命名常量以提高清晰度，使脚本更易于阅读和维护</li>
<li>并使用入口点 (entrypoint -- <code>if __name__ == "__main__":</code>) 将可执行代码与可导入的定义分离</li>
<li>使用 Python 工具 -- <code>uv</code>:
<ul>
<li>用于替代 pip、pip-tools、poetry、pyenv、twine、virtualenv 等工具。</li>
<li>UV 可以运行 Python 脚本，并支持添加依赖项和运行脚本。</li>
<li>UV 支持使用内联元数据添加依赖项，并可以运行脚本而无需手动安装依赖项。</li>
<li>UV 安装命令：<code>$ curl -LsSf https://astral.sh/uv/install.sh | sh</code></li>
</ul>
</li>
<li>使用 Shebang 行：<code>#!/usr/bin/env -S uv run --script</code></li>
<li><strong>敏感信息</strong>: 密码/密钥等不要硬编码，使用环境变量或配置文件</li>
</ul>
<h2 id="外部库和依赖">外部库和依赖</h2>
<ul>
<li>
<p>在<strong>需要时</strong>集成第三方库，以利用专业功能或简化复杂任务。</p>
</li>
<li>
<p>在文件中声明和管理脚本依赖项，使用 <strong>PEP 723</strong> 等标准以提高可重复性。</p>
<pre><code class="language-python"># /// script
# requires-python = "&gt;=3.13"
# dependencies = [
#   "requests==2.32.4",
# ]
# ///
</code></pre>
</li>
<li>
<p>Python 的官方风格指南 PEP 8 建议对导入语句的顺序进行特定的约定，这可以显著提高可读性。遵循这些约定是标准做法，并且有像 <strong>Ruff</strong> 这样的现代工具来强制执行这些约定。</p>
</li>
<li>
<p>避免本地或库特定的导入</p>
</li>
<li>
<p>（可选） 最小化依赖：主要依赖标准库。</p>
</li>
</ul>
<h2 id="命令行参数">命令行参数</h2>
<ul>
<li>使用辅助库添加命令行参数，使脚本具有交互性和可配置性。</li>
<li>定义一个清晰的 <code>main()</code> 函数来封装由命令行界面（CLI）触发的核心脚本逻辑。</li>
<li>推荐使用 Click 等第三方库，它提供了更直观和 Pythonic 的方式来使用装饰器创建命令行界面</li>
<li>利用参数解析进行输入验证：像 Click 这样的工具不仅适用于定义参数，还适用于在脚本边界处验证用户输入——例如，使用<code>click.Choice</code>或<code>type=int</code>。在此处处理输入验证通常可以减少在核心逻辑函数内部深入检查类型或值时所需的繁琐 try...except 代码块，从而保持代码更简洁。</li>
</ul>
<h2 id="结构化数据">结构化数据</h2>
<ul>
<li>选择合适的数据结构来改进数据的表示方式。</li>
<li>使用 <code>enum</code>表示表示固定的选择集、状态、模式和映射输入；建议用于清晰性和类型安全，而不是原始字符串或整数，用于预定义的选择。</li>
<li>使用 <code>dataclass</code> 表示灵活的数据记录，具有类型注解、减少样板代码和轻松添加方法；建议用于作为大多数结构化数据的绝佳默认选项。平衡了功能、可读性和易用性。</li>
<li>使用  <code>namedtuple</code> 表示简单的、不可变的数据包，函数返回值，以及低开销的命名访问；建议用于简洁、固定的记录，其中不可变性至关重要。</li>
</ul>
<h2 id="改进反馈和鲁棒性">改进反馈和鲁棒性</h2>
<ul>
<li>使用结构化日志（内置的 <code>logging</code> 模块）而不是完全依赖 <code>print()</code> 。</li>
<li>在开发过程中使用 <code>assert</code> 语句进行内部一致性检查。</li>
<li>改进终端输出呈现，可能使用为更丰富的界面设计的库，如 <strong>Rich</strong>。它非常适合跨不同操作系统创建美观的终端输出，支持颜色、表格、Markdown、进度条等。（你也可以用它来覆盖 <code>logging</code> 和异常的默认处理器）</li>
</ul>
<p>EOF</p>
<blockquote>
<p><em>三人行, 必有我师; 知识共享, 天下为公.</em>  本文由东风微鸣技术博客 <a href="https://EWhisper.cn" target="_blank" rel="noopener nofollow">EWhisper.cn</a> 编写.</p>
</blockquote>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-12 15:26">2025-07-12 15:26</span>&nbsp;
<a href="https://www.cnblogs.com/east4ming">东风微鸣</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18980661);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18980661', targetLink: 'https://www.cnblogs.com/east4ming/p/18980661', title: 'Python 脚本最佳实践2025版' })">举报</a>
</div>
        