
	<h1 class="postTitle"><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/leiwenbin627/p/18870276" title="发布于 2025-05-10 23:02">
    <span role="heading" aria-level="2">MySQL高可用之ProxySQL + MGR 实现读写分离实战</span>
    

</a>
</h1>
	<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>部署MGR</h1>
<h2>1、MGR 前置介绍</h2>
<p>阿里云<a class="hl hl-1" href="https://so.csdn.net/so/search?q=RDS&amp;spm=1001.2101.3001.7020" target="_blank" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=RDS&amp;spm=1001.2101.3001.7020&quot;,&quot;extra&quot;:&quot;{\&quot;searchword\&quot;:\&quot;RDS\&quot;}&quot;}" data-tit="RDS" data-pretit="rds" rel="noopener nofollow">RDS</a>集群方案用的就是<code>MGR</code>模式！</p>
<p><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510213740362-108210234.png" alt=""></p>
<h3>1.1、什么是 MGR</h3>
<ul>
<li>MGR（MySQL Group Replication）是MySQL 5.7.17版本诞生的，是MySQL自带的一个插件，可以灵活部署。</li>
<li>保证数据一致性又可以自动切换，具备故障检测功能、支持多节点写入。</li>
<li>集群是多个MySQL Server节点共同组成的分布式集群，每个Server都有完整的副本，它是基于ROW格式的二进制日志文件和GTID特性。</li>
</ul>
<h3>1.2、MGR 优点</h3>
<ul>
<li>强一致性：基于原生复制及paxos协议的组复制技术，并以插件的方式提供，提供一致数据安全保证。</li>
<li>高容错性：只要不是大多数节点坏掉就可以继续工作，有自动检测机制，当不同节点产生资源争用冲突时，不会出现错误，按照先到者优先原则进行处理，并且内置了自动化脑裂防护机制。</li>
<li>高扩展性：节点的新增和移除都是自动的，新节点加入后，会自动从其他节点上同步状态，直到新节点和其他节点保持一致，如果某节点被移除了，其他节点自动更新组信息，自动维护新的组信息。</li>
<li>灵活性：有单主模式和多主模式。单主模式下，会自动选主，所有更新操作都在主上进行；多主模式下，所有server都可以同时处理更新操作。工作中优先使用单主模式！</li>
</ul>
<h3>1.3、MGR 缺点</h3>
<ul>
<li>仅支持InnoDB表，并且每张表一定要有一个主键，用于做write set的冲突检测。</li>
<li>必须打开GTID特性，二进制日志格式必须设置为ROW，用于选主与write set；主从状态信息存于表中（–master-info-repository=TABLE 、–relay-log-inforepository=TABLE），–log-slave-updates打开。</li>
<li>MGR不支持大事务，事务大小最好不超过143MB，当事务过大，无法在5秒的时间内通过网络在组成员之间复制消息，则可能会怀疑成员失败了，然后将其驱逐出局。</li>
<li>目前一个MGR集群最多支持9个节点。</li>
<li>不支持外键于save point特性，无法做全局间的约束检测与部分事务回滚。</li>
<li>二进制日志不支持Binlog Event Checksum。</li>
</ul>
<h3>1.4、MGR 适用场景</h3>
<ul>
<li>金融交易、重要数据存储、对主从一致性要求高的场景。</li>
<li>核心数据总量未过亿。</li>
<li>读多写少，如：互联网电商。</li>
</ul>
<h2>2、<span class="words-blog hl-git-1" data-tit="MySQL" data-pretit="mysql">MySQL&nbsp;MGR 搭建流程</span></h2>
<h3>2.1、环境准备</h3>
<p>本次集群搭建，我使用3台阿里云<a class="hl hl-1" href="https://so.csdn.net/so/search?q=ECS&amp;spm=1001.2101.3001.7020" target="_blank" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=ECS&amp;spm=1001.2101.3001.7020&quot;,&quot;extra&quot;:&quot;{\&quot;searchword\&quot;:\&quot;ECS\&quot;}&quot;}" data-tit="ECS" data-pretit="ecs" rel="noopener nofollow">ECS</a>服务器（<code>CentOS 7.9，2核2G，20G硬盘</code>），每台服务器都分配公网IP，开放安全组：<code>22（SSH）、3306（MySQL）、24901（MGR）</code>。我的<a class="hl hl-1" href="https://so.csdn.net/so/search?q=%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE&amp;spm=1001.2101.3001.7020" target="_blank" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE&amp;spm=1001.2101.3001.7020&quot;,&quot;extra&quot;:&quot;{\&quot;searchword\&quot;:\&quot;服务器配置\&quot;}&quot;}" data-tit="服务器配置" data-pretit="服务器配置" rel="noopener nofollow">服务器配置</a>如下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(128, 0, 0, 1)">Master服务器（hostname:n0)：172.21.180.98
Slave服务器1（hostname:n1)：172.21.180.99
Slave服务器2（hostname:n2)：172.21.180.100</span></pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510214503513-1897338959.png" alt=""></p>
<h3>2.2、搭建流程</h3>
<h4>2.2.1、配置系统环境</h4>
<p>将<span class="words-blog hl-git-1" data-tit="Hosts" data-pretit="hosts">Hosts文件写入n0/n1/n2节点与内网IP对应关系，后面配置采用域名访问：</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 3台服务器都执行
</span><span style="color: rgba(0, 0, 255, 1)">sudo</span> <span style="color: rgba(0, 0, 255, 1)">cat</span> &gt; /etc/hosts &lt;&lt;-<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">EOF</span><span style="color: rgba(128, 0, 0, 1)">'</span>
<span style="color: rgba(128, 0, 128, 1)">172.21</span>.<span style="color: rgba(128, 0, 128, 1)">180.98</span><span style="color: rgba(0, 0, 0, 1)"> n0
</span><span style="color: rgba(128, 0, 128, 1)">172.21</span>.<span style="color: rgba(128, 0, 128, 1)">180.99</span><span style="color: rgba(0, 0, 0, 1)"> n1
</span><span style="color: rgba(128, 0, 128, 1)">172.21</span>.<span style="color: rgba(128, 0, 128, 1)">180.100</span><span style="color: rgba(0, 0, 0, 1)"> n2
EOF</span></pre>
</div>
<p>分别为三台服务器依次设置主机名称，三台服务器执行命令：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 第1台服务器
hostnamectl set</span>-<span style="color: rgba(0, 0, 255, 1)">hostname</span><span style="color: rgba(0, 0, 0, 1)"> n0

# 第2台服务器
hostnamectl set</span>-<span style="color: rgba(0, 0, 255, 1)">hostname</span><span style="color: rgba(0, 0, 0, 1)"> n1

# 第3台服务器
hostnamectl set</span>-<span style="color: rgba(0, 0, 255, 1)">hostname</span> n2</pre>
</div>
<h4>2.2.2、安装 MySQL</h4>
<p>下载 MySQL 官方YUM仓库源（这个并不是安装MySQL）：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 3台服务器都执行
cd </span>/home/
<span style="color: rgba(0, 0, 255, 1)">wget</span> --no-check-certificate https:<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">repo.mysql.com/mysql80-community-release-el7-5.noarch.rpm</span>
<span style="color: rgba(0, 0, 255, 1)">yum</span> localinstall -y mysql80-community-release-el7-<span style="color: rgba(128, 0, 128, 1)">5</span>.noarch.rpm</pre>
</div>
<p>修改仓库配置，将下图中gpgcheck置为0：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">vi</span> /etc/<span style="color: rgba(0, 0, 255, 1)">yum</span>.repos.d/mysql-community.repo</pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510214849282-1134941147.png" alt=""></p>
<p>安装 MySQL 8.0.26：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 3台服务器都执行
</span><span style="color: rgba(0, 0, 255, 1)">yum</span> <span style="color: rgba(0, 0, 255, 1)">install</span> -y mysql-community-server-<span style="color: rgba(128, 0, 128, 1)">8.0</span>.<span style="color: rgba(128, 0, 128, 1)">26</span></pre>
</div>
<h4>2.2.3、配置启动 MySQL</h4>
<p>主节点n0执行：直接CV就行，不要墨迹！</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 修改 MySQL 配置
</span><span style="color: rgba(0, 0, 255, 1)">sudo</span> <span style="color: rgba(0, 0, 255, 1)">cat</span> &gt;&gt; /etc/my.cnf &lt;&lt;-<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">EOF</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">

# 使用mysql_native_password密码策略，防止navicat连不上mysql8
default_authentication_plugin</span>=<span style="color: rgba(0, 0, 0, 1)">mysql_native_password
# 设置MySQL插件目录：MGR基于插件，必须设置插件路径
plugin_dir</span>=/usr/lib64/mysql/<span style="color: rgba(0, 0, 0, 1)">plugin
# 服务器编号，Master</span>=<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
server_id</span>=<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
# 开启binlog的GTID模式（MGR强制要求）
gtid_mode</span>=<span style="color: rgba(0, 0, 0, 1)">ON
# 开启后MySQL只允许能够保障事务安全，并且能够被日志记录的SQL语句被执行
enforce_gtid_consistency</span>=<span style="color: rgba(0, 0, 0, 1)">ON
# 关闭binlog校验（MGR强制要求）
binlog_checksum</span>=<span style="color: rgba(0, 0, 0, 1)">NONE

# 定义用于事务期间哈希写入提取的算法，组复制模式下必须设置为 XXHASH64。
transaction_write_set_extraction</span>=<span style="color: rgba(0, 0, 0, 1)">XXHASH64
# 确定组复制恢复时是否应该应用 SSL，通常设置为“开”，但默认设置为“关”。
loose</span>-group_replication_recovery_use_ssl=<span style="color: rgba(0, 0, 0, 1)">ON
# 服务器实例所在复制组名称，必须是有效的 UUID，所有节点必须相同。
loose</span>-group_replication_group_name=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">bbbbbbbb-bbbb-cccc-dddd-eeeeeeeeeeee</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
# 确定服务器是否应该在服务器启动期间启动组复制。
loose</span>-group_replication_start_on_boot=<span style="color: rgba(0, 0, 0, 1)">OFF

# 为复制组中其他的成员提供的网络地址，指定为“主机:端口”的格式化字符串。
# 很多人想当然认为端口应该是3306，起始不然，MGR需要开启新端口24901同步交换
# 所以这里不要写错，同时，前面我们配置了hosts文件做了主机名与IP的映射，这里直接写主机名即可
loose</span>-group_replication_local_address=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">n0:24901</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">

# 用于建立新成员到组的连接组成员列表。
# 这个列表指定为由分隔号间隔的组成员网络地址列表，类似 host1:port1、host2:port2 的格式。
# 同样采用n0</span>~<span style="color: rgba(0, 0, 0, 1)">n2的主机名替代
loose</span>-group_replication_group_seeds=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">n0:24901,n1:24901,n2:24901</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">

# 配置此服务器为引导组，这个选项必须仅在一台服务器上设置，
# 并且仅当第一次启动组或者重新启动整个组时。成功引导组启动后，将此选项设置为关闭。
loose</span>-group_replication_bootstrap_group=<span style="color: rgba(0, 0, 0, 1)">OFF
EOF</span></pre>
</div>
<p>从节点n1执行：直接CV就行，不要墨迹！</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">sudo</span> <span style="color: rgba(0, 0, 255, 1)">cat</span> &gt;&gt; /etc/my.cnf &lt;&lt;-<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">EOF</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">
default_authentication_plugin</span>=<span style="color: rgba(0, 0, 0, 1)">mysql_native_password
plugin_dir</span>=/usr/lib64/mysql/<span style="color: rgba(0, 0, 0, 1)">plugin

# 设置唯一的服务器编号
server_id</span>=<span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">
gtid_mode</span>=<span style="color: rgba(0, 0, 0, 1)">ON
enforce_gtid_consistency</span>=<span style="color: rgba(0, 0, 0, 1)">ON
binlog_checksum</span>=<span style="color: rgba(0, 0, 0, 1)">NONE

# 这个参数决定primary节点到secondary节点的请求是否为基于 RSA 密钥对的密码交换所需的公钥
loose</span>-group_replication_recovery_get_public_key=<span style="color: rgba(0, 0, 0, 1)">ON
loose</span>-group_replication_recovery_use_ssl=<span style="color: rgba(0, 0, 0, 1)">ON
loose</span>-group_replication_group_name=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">bbbbbbbb-bbbb-cccc-dddd-eeeeeeeeeeee</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
loose</span>-group_replication_start_on_boot=<span style="color: rgba(0, 0, 0, 1)">OFF

# 设置本机地址n1:</span><span style="color: rgba(128, 0, 128, 1)">24901</span><span style="color: rgba(0, 0, 0, 1)">
loose</span>-group_replication_local_address=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">n1:24901</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
loose</span>-group_replication_group_seeds=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">n0:24901,n1:24901,n2:24901</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
loose</span>-group_replication_bootstrap_group=<span style="color: rgba(0, 0, 0, 1)">OFF
EOF</span></pre>
</div>
<p>从节点n2执行：直接CV就行，不要墨迹！</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">sudo</span> <span style="color: rgba(0, 0, 255, 1)">cat</span> &gt;&gt; /etc/my.cnf &lt;&lt;-<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">EOF</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">
default_authentication_plugin</span>=<span style="color: rgba(0, 0, 0, 1)">mysql_native_password
plugin_dir</span>=/usr/lib64/mysql/<span style="color: rgba(0, 0, 0, 1)">plugin

#设置唯一的服务器编号
server_id</span>=<span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">
gtid_mode</span>=<span style="color: rgba(0, 0, 0, 1)">ON
enforce_gtid_consistency</span>=<span style="color: rgba(0, 0, 0, 1)">ON
binlog_checksum</span>=<span style="color: rgba(0, 0, 0, 1)">NONE

#这个参数决定primary节点到secondary节点的请求是否为基于 RSA 密钥对的密码交换所需的公钥
loose</span>-group_replication_recovery_get_public_key=<span style="color: rgba(0, 0, 0, 1)">ON
loose</span>-group_replication_recovery_use_ssl=<span style="color: rgba(0, 0, 0, 1)">ON
loose</span>-group_replication_group_name=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">bbbbbbbb-bbbb-cccc-dddd-eeeeeeeeeeee</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
loose</span>-group_replication_start_on_boot=<span style="color: rgba(0, 0, 0, 1)">OFF

#设置本机地址n2:</span><span style="color: rgba(128, 0, 128, 1)">24901</span><span style="color: rgba(0, 0, 0, 1)">
loose</span>-group_replication_local_address=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">n2:24901</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
loose</span>-group_replication_group_seeds=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">n0:24901,n1:24901,n2:24901</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
loose</span>-group_replication_bootstrap_group=<span style="color: rgba(0, 0, 0, 1)">OFF
EOF</span></pre>
</div>
<p>三台服务器，依次启动 MySQL</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 3台服务器都执行
systemctl start mysqld</span></pre>
</div>
<h4>2.2.4、修改密码、设置主从同步</h4>
<p>三台服务器，依次通过该命令，获取数据库连接密码：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 获取数据库密码
</span><span style="color: rgba(0, 0, 255, 1)">grep</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">temporary password</span><span style="color: rgba(128, 0, 0, 1)">'</span> /var/log/mysqld.log</pre>
</div>
<p>三台服务器，连接到数据库控制台中：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 连接数据库
mysql </span>-uroot -p<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">密码</span><span style="color: rgba(128, 0, 0, 1)">'</span></pre>
</div>
<p>三台数据库控制台中，都执行下述命令（3台服务器都执行）：</p>
<div class="cnblogs_code">
<pre># 修改root密码为asAS123456!<span style="color: rgba(0, 0, 0, 1)">
ALTER USER </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">root</span><span style="color: rgba(128, 0, 0, 1)">'</span>@<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">localhost</span><span style="color: rgba(128, 0, 0, 1)">'</span> IDENTIFIED WITH mysql_native_password BY <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">asAS123456!</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">;
# 创建rpl_user账户，此账户用于实现主从数据同步
CREATE USER rpl_user@</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">%</span><span style="color: rgba(128, 0, 0, 1)">'</span> IDENTIFIED BY <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">asAS123456!</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">;
# 赋予主从同步权限
GRANT REPLICATION SLAVE ON </span>*.* TO rpl_user@<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">%</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">;

# 创建一个远程连接用户，这个用户用在Navcate、JDBC登录的时候，直接用root登录不好
create user </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">remote</span><span style="color: rgba(128, 0, 0, 1)">'</span>@<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">%</span><span style="color: rgba(128, 0, 0, 1)">'</span> identified with mysql_native_password by <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">asAS123456!</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">;
# 为remote用户赋予所有数据库资源的访问权限，熟悉grant的小伙伴可以自己调整
grant all privileges on </span>*.* to remote@<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">%</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">;

# 让刚才的修改生效
FLUSH PRIVILEGES;

# 删除已产生的Binlog
# 一定要RESET MASTER，它会删除刚才已产生的Binlog
# 因为刚才Binglog包含创建用户这种高权限操作，用于主从同步的rpl_user账户是没有权限执行的
# 这就会导致RelayLog重放无法正确执行，导致从属服务器卡死在</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">RECEVERING</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">状态
# 利用RESET MASTER删除这些无法执行的binlog，就没问题了
RESET MASTER;</span></pre>
</div>
<h4>2.2.5、安装 MGR 插件</h4>
<p>在三台服务器的MySQL控制台中，安装MGR插件，执行命令：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 3台服务器都执行
INSTALL PLUGIN group_replication SONAME </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">group_replication.so</span><span style="color: rgba(128, 0, 0, 1)">'</span>;</pre>
</div>
<p>在主服务器的MySQL控制台上，执行下述命令：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 注意：只在主服务器上运行
# 我们在 primary.cnf 配置文件中把 group_replication_bootstrap_group 参数设置成 OFF
# 在 primary 服务器启动时并不会直接启动复制组，通过下面的命令动态的开启复制组使我们的集群更安全
SET GLOBAL group_replication_bootstrap_group</span>=<span style="color: rgba(0, 0, 0, 1)">ON;
START GROUP_REPLICATION;
SET GLOBAL group_replication_bootstrap_group</span>=OFF;</pre>
</div>
<p>在两个从服务器MySQL控制台上，执行下述命令：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 指定主从账户与指定通信频道
CHANGE MASTER TO MASTER_USER</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">rpl_user</span><span style="color: rgba(128, 0, 0, 1)">"</span>, MASTER_PASSWORD=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">asAS123456!</span><span style="color: rgba(128, 0, 0, 1)">"</span> FOR CHANNEL <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">group_replication_recovery</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">;

# 开启组网数据同步
START GROUP_REPLICATION;</span></pre>
</div>
<p>当两个从节点都运行完毕后，运行下面SQL结果进行验证：</p>
<div class="cnblogs_code">
<pre>SELECT * FROM performance_schema.replication_group_members;</pre>
</div>
<p>出现以下情况，每个节点都是<code>ONLINE</code>状态，说明集群搭建成功：</p>
<p><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510215547506-250626991.png" alt=""></p>
<h2>3、MySQL MGR 故障转移</h2>
<p>上面已经将MySQL MGR集群搭建完毕，并且节点都是<code>ONLINE</code>状态。</p>
<p><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510215654289-1470409772.png" alt=""></p>
<h3>3.1、主节点n0下线，重新选举</h3>
<p>首先，在主服务器n0上执行停止mysql命令，如下：</p>
<div class="cnblogs_code">
<pre>systemctl stop mysqld;</pre>
</div>
<p>此时，在从节点n1查看集群状态发现，n1被选举为主节点：</p>
<p><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510215814690-1637336233.png" alt=""></p>
<p>这是由于MGR集群选举策略为：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(128, 0, 0, 1)">·优先低版本节点
·版本一样，优先权重大的节点
·版本与权重一样，按照 server uuid 的字母顺序选主</span></pre>
</div>
<p>在n1从节点上，通过命令查看故障转移日志：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 查看MySQL日志
</span><span style="color: rgba(0, 0, 255, 1)">tail</span> -n <span style="color: rgba(128, 0, 128, 1)">50</span> /var/log/mysqld.log</pre>
</div>
<p>n1日志解析如下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(128, 0, 0, 1)"># n0:3306（主节点n0）从组中被移除掉
[Warning] [MY-011499] [Repl] Plugin group_replication reported: 'Members removed from the group: n0:3306'

# 重新选举新的 Primary 主节点
[System] [MY-011500] [Repl] Plugin group_replication reported: 'Primary server with address n0:3306 left the group. Electing new Primary.'

# n1:3306（从节点n1）被选举为主节点，执行之前未完成的事务处理
[System] [MY-011507] [Repl] Plugin group_replication reported: 'A new primary with address n1:3306 was elected. The new primary will execute all previous group transactions before allowing writes.'

# 组成员目前只剩 n1:3306, n2:3306
[System] [MY-011503] [Repl] Plugin group_replication reported: 'Group membership changed to n1:3306, n2:3306 on view 17172171443362674:4.'

# 关闭 n1 节点的只读状态
[System] [MY-013731] [Repl] Plugin group_replication reported: 'The member action "mysql_disable_super_read_only_if_primary" for event "AFTER_PRIMARY_ELECTION" with priority "1" will be run.'

# 设置 super_read_only=OFF
[System] [MY-011566] [Repl] Plugin group_replication reported: 'Setting super_read_only=OFF.'

# 当前节点（n1）以主节点身份工作
[System] [MY-011510] [Repl] Plugin group_replication reported: 'This server is working as primary member.'</span></pre>
</div>
<p>在n2从节点上，通过命令查看故障转移日志：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 查看MySQL日志
</span><span style="color: rgba(0, 0, 255, 1)">tail</span> -n <span style="color: rgba(128, 0, 128, 1)">50</span> /var/log/mysqld.log</pre>
</div>
<p>n2日志解析如下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(128, 0, 0, 1)"># n0:3306（主节点n0）从组中被移除掉
[Warning] [MY-011499] [Repl] Plugin group_replication reported: 'Members removed from the group: n0:3306'

# 重新选举新的 Primary 主节点
[System] [MY-011500] [Repl] Plugin group_replication reported: 'Primary server with address n0:3306 left the group. Electing new Primary.'

# n1:3306（从节点n1）被选举为主节点，执行之前未完成的事务处理
[System] [MY-011507] [Repl] Plugin group_replication reported: 'A new primary with address n1:3306 was elected. The new primary will execute all previous group transactions before allowing writes.'

# 组成员目前只剩 n1:3306, n2:3306
[System] [MY-011503] [Repl] Plugin group_replication reported: 'Group membership changed to n1:3306, n2:3306 on view 17172171443362674:4.'

# 当前节点（n2）作为主节点（n1）的从成员身份工作
[System] [MY-011511] [Repl] Plugin group_replication reported: 'This server is working as secondary member with primary member address n1:3306.'</span></pre>
</div>
<h3>3.2、新主节点n1下线，集群不可用</h3>
<p>当在新晋升的主节点n1上执行停止MySQL操作：</p>
<div class="cnblogs_code">
<pre>systemctl stop mysqld;</pre>
</div>
<p>此时，在n2上通过命令查看发现，n1主节点尽管已经下线，但n2查看集群状态时还在显示，因为只有1个节点的情况下，少于<code>n/2+1</code>的规则，导致整体 MGR 集群失效，n2节点无法产生重新选举，同时n2的日志也不会有任何新内容产生：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">SELECT</span> <span style="color: rgba(128, 128, 128, 1)">*</span> <span style="color: rgba(0, 0, 255, 1)">FROM</span> performance_schema.replication_group_members;</pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510220351334-2011619551.png" alt=""></p>
<h3>3.3、恢复 MGR 集群</h3>
<p>恢复流程很简单，先将三台服务器的MySQL各自重启：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 3台服务器都执行
systemctl restart mysqld;</span></pre>
</div>
<p>然后重复执行&nbsp;<code>2.2.5</code>&nbsp;章节流程即可恢复 MGR 集群。</p>
<h2>4、单主模式和多主模式</h2>
<h3>4.1、模式介绍</h3>
<h4>4.1.1、单主模式</h4>
<p>在单主模式下, 组复制具有自动选主功能，每次只有一个&nbsp;<span class="words-blog hl-git-1" data-tit="server" data-pretit="server">server成员可以作为主节点。</span></p>
<p><span class="words-blog hl-git-1" data-tit="server" data-pretit="server">单主模式 group 内只有一台节点可写可读，其他节点只可以读。对于group的部署，需要先跑起primary主节点，然后再跑起其他的节点，并把这些节点加进group。其他的节点就会自动同步primary节点上面的变化，然后将自己设置为只读模式。</span></p>
<p><span class="words-blog hl-git-1" data-tit="server" data-pretit="server">当primary主节点意外宕机或者下线，在满足大多数节点存活的情况下，group内部发起选举，选出下一个可用的读节点，提升为primary节点。</span></p>
<p><span class="words-blog hl-git-1" data-tit="server" data-pretit="server"><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510220921592-1058599842.png" alt=""></span></p>
<h4>4.1.2、多主模式</h4>
<p>在多主模式下，所有的 MySQL 节点都可以同时接受读写操作。group内的所有节点都是primary主节点，同时可以进行读写操作，并且数据是最终一致的。</p>
<p><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510221003246-1797365484.png" alt=""></p>
<h3>4.2、模式切换</h3>
<p>之前我们搭建的 MySQL MGR 集群就是单主模式（默认），那么如何切换为多主模式呢？按照如下操作进行。</p>
<h4>4.2.1、单主 ——&gt; 多主</h4>
<p>从 n0 ~ n2 停止组复制，开启多主模式（3个节点都执行）：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 停止组复制
stop group_replication;

# 是否启用单主模式，默认ON，OFF代表多主
set global group_replication_single_primary_mode</span>=<span style="color: rgba(0, 0, 0, 1)">OFF;

# 是否开启条件检查，因为多主的约束更为严格，不符合要求的直接拒绝
# 不支持外键的级联操作
# 不支持“串行化Serializable”
set global group_replication_enforce_update_everywhere_checks</span>=ON;</pre>
</div>
<p>在 n0 主节点启用组复制：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 只在 n0 上执行
SET GLOBAL group_replication_bootstrap_group</span>=<span style="color: rgba(0, 0, 0, 1)">ON;
START GROUP_REPLICATION;
SET GLOBAL group_replication_bootstrap_group</span>=OFF;</pre>
</div>
<p>在 n1，n2 节点上启用组复制：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 只在 n1, n2 上执行
START GROUP_REPLICATION;</span></pre>
</div>
<p>此时，可以看到三台MySQL都是主节点：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">SELECT</span> <span style="color: rgba(128, 128, 128, 1)">*</span> <span style="color: rgba(0, 0, 255, 1)">FROM</span> performance_schema.replication_group_members;</pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510221303273-1313982146.png" alt=""></p>
<h4>4.2.2、多主 ——&gt; 单主</h4>
<p>从 n0 ~ n2 停止组复制，开启单主模式（3个节点都执行）：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 停止组复制
stop group_replication;

# 是否开启条件检查，因为多主的约束更为严格，不符合要求的直接拒绝
# 不支持外键的级联操作
# 不支持“串行化Serializable”
set global group_replication_enforce_update_everywhere_checks</span>=<span style="color: rgba(0, 0, 0, 1)">OFF;

# 是否启用单主模式，默认ON，OFF代表多主
set global group_replication_single_primary_mode</span>=ON;</pre>
</div>
<p>在 n0 主节点启用组复制：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 只在 n0 上执行
SET GLOBAL group_replication_bootstrap_group</span>=<span style="color: rgba(0, 0, 0, 1)">ON;
START GROUP_REPLICATION;
SET GLOBAL group_replication_bootstrap_group</span>=OFF;</pre>
</div>
<p>在 n1，n2 节点上启用组复制：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 只在 n1, n2 上执行
START GROUP_REPLICATION;</span></pre>
</div>
<p>此时，可以看到三台MySQL变成了主从模式：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">SELECT</span> <span style="color: rgba(128, 128, 128, 1)">*</span> <span style="color: rgba(0, 0, 255, 1)">FROM</span> performance_schema.replication_group_members;</pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510222033374-415354422.png" alt=""></p>
<p>MGR部署参考：https://blog.csdn.net/weixin_46594796/article/details/139321738</p>
<h1>部署ProxySQL&nbsp;实现MGR读写分离</h1>
<h2>1、ProxySQL 介绍</h2>
<h3>1.1、ProxySQL 如何工作</h3>
<div class="cnblogs_code">
<pre><span style="color: rgba(128, 0, 0, 1)">ProxySQL 和 ShardingJDBC 类似竞品关系，国内使用 ShardingJDBC 更多，国外使用 ProxySQL 更多。
ProxySQL 主要能够提供：读写分离 + 故障转移
ShardingJDBC 主要能够提供：读写分离 + 分库分表
所以很多场景会考虑将 ProxySQL 和 ShardingJDBC + MySQL MGR 一起使用，通过 ProxySQL 提供读写分离 + 故障转移，通过 ShardingJDBC 提供分库分表（不需要再提供读写分离），非常优雅！</span></pre>
</div>
<p>当我们搭建好了MGR集群，由于组复制的存在，保证每个节点的数据都是强一致的。不会出现主节点有数据，而从节点没有数据的情况。主节点可读可写，从节点只负责读操作，这是经典的MGR集群方案：</p>
<p><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510223210068-649434262.png" alt=""></p>
<p>不过，试想这样一种情况，当主节点发生宕机，MGR集群虽然虽然可以自动进行故障转移，重新选举新的主节点，但是<span class="doubao-hl hl " data-report-click="{&quot;spm&quot;:&quot;3001.10781&quot;,&quot;extra&quot;:&quot;{\&quot;word\&quot;:\&quot;Java\&quot;}&quot;}" data-tit="Java" data-pretit="java">Java应用不能感知到数据库发生了宕机现象，依旧会把写操作发送给宕机的主节点，此时就会发生错误。</span></p>
<p><span class="doubao-hl hl " data-report-click="{&quot;spm&quot;:&quot;3001.10781&quot;,&quot;extra&quot;:&quot;{\&quot;word\&quot;:\&quot;Java\&quot;}&quot;}" data-tit="Java" data-pretit="java"><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510223302242-146388601.png" alt=""></span></p>
<p>针对这种情况，<code>ProxySQL</code>就发挥出了作用，通过ProxySQL自动对MGR集群进行健康状态感知。</p>
<p><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510223349725-277882409.png" alt=""></p>
<p>使用ProxySQL时，如果主服务器发生了宕机，会将写入请求转移到故障转移到新晋升的主节点上，并且提供了读写分离功能。</p>
<p><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510223428414-1072908493.png" alt=""></p>
<h3>1.2、ProxySQL 工作原理</h3>
<p>ProxySQL对于MGR集群节点，都新增了一个数据库用户，例如：monitor。ProxySQL通过monitor用户定时发送select查询请求，判断当前数据库节点是否可以，如果出现3次不能执行select查询，就认为该节点产生故障，就需要从集群中移除。</p>
<p><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510223550085-1861817823.png" alt=""></p>
<p>不过此时有个问题，就是ProxySQL如何判断哪个节点是主，哪个节点是从呢？ProxySQL要求每个MGR集群中的节点都在各自服务器上创建视图，作用是收集当前节点运行状态，判断当前节点是主是从。</p>
<p><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510223644740-1789942226.png" alt=""></p>
<p>当ProxySQL知道了主从之后，此时Java应用进行SQL操作，就会被ProxySQL进行路由分发了！</p>
<p><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510223754320-1996799082.png" alt=""></p>
<h2>2、ProxySQL 安装</h2>
<div class="cnblogs_code">
<pre><span style="color: rgba(128, 0, 0, 1)">我这里使用一台阿里云ECS（2核2G），开放22、6032、6033端口号。</span></pre>
</div>
<p>首先，下载ProxySQL安装包，进行安装操作：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 下载 ProxySQL 安装包（这里是通过oss直接下载的，也可以通过官方下载，不过很慢）
</span><span style="color: rgba(0, 0, 255, 1)">wget</span> --no-check-certificate https:<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">manongbiji.oss-cn-beijing.aliyuncs.com/ittailkshow/mgr/download/proxysql-2.2.0-1-centos7.x86_64.rpm</span>
<span style="color: rgba(0, 0, 0, 1)">
# 安装 ProxySQL
cd </span>/home/
<span style="color: rgba(0, 0, 255, 1)">yum</span> localinstall -y proxysql-<span style="color: rgba(128, 0, 128, 1)">2.2</span>.<span style="color: rgba(128, 0, 128, 1)">0</span>-<span style="color: rgba(128, 0, 128, 1)">1</span>-centos7.x86_64.rpm</pre>
</div>
<p>启动 ProxySQL 服务，可以发现启动完毕：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 启动 ProxySQL
service proxysql start</span></pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510224033598-1260688462.png" alt=""></p>
<p>安装MySQL YUM仓库源：</p>
<div class="cnblogs_code">
<pre>cd /home/
<span style="color: rgba(0, 0, 255, 1)">wget</span> --no-check-certificate https:<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">repo.mysql.com/mysql80-community-release-el7-5.noarch.rpm</span>
<span style="color: rgba(0, 0, 255, 1)">yum</span> localinstall -y mysql80-community-release-el7-<span style="color: rgba(128, 0, 128, 1)">5</span><span style="color: rgba(0, 0, 0, 1)">.noarch.rpm
</span><span style="color: rgba(0, 0, 255, 1)">sudo</span> <span style="color: rgba(0, 0, 255, 1)">yum</span> makecache fast</pre>
</div>
<p>将 MySQL 8 下载地址调整为腾讯云镜像（否则下载速度KB维度）：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 修改配置
vim </span>/etc/<span style="color: rgba(0, 0, 255, 1)">yum</span>.repos.d/mysql-community.repo</pre>
</div>
<div class="cnblogs_code">
<pre># 将 mysql80-<span style="color: rgba(0, 0, 0, 1)">community 的 baseurl 内容替换如下
https:</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">mirrors.cloud.tencent.com/mysql/yum/mysql-8.0-community-el7-x86_64/</span>
# 将 mysql80-community 的 gpgcheck 内容替换为 <span style="color: rgba(128, 0, 128, 1)">0</span></pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510224211921-366924940.png" alt=""></p>
<p>配置好镜像后，安装好MySQL YUM源，就可以下载MySQL客户端了：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">yum</span> <span style="color: rgba(0, 0, 255, 1)">install</span> -y mysql-community-client</pre>
</div>
<h2>3、ProxySQL + MGR 读写分离</h2>
<h3>3.1、读写分离配置</h3>
<p>通过上述操作，前置准备已完成，此时链接上ProxySQL：</p>
<div class="cnblogs_code">
<pre>mysql -u admin -padmin -h <span style="color: rgba(128, 0, 128, 1)">127.0</span>.<span style="color: rgba(128, 0, 128, 1)">0.1</span> -P6032 --prompt=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Admin&gt; </span><span style="color: rgba(128, 0, 0, 1)">'</span></pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510224411486-1976069890.png" alt=""></p>
<p>接着，将MGR集群节点配置到ProxySQL中，使用的是MGR节点的内网ip：</p>
<div class="cnblogs_code">
<pre># 我的MGR集群的三个节点内网IP分别是：<span style="color: rgba(128, 0, 128, 1)">172.21</span>.<span style="color: rgba(128, 0, 128, 1)">180.98</span> | <span style="color: rgba(128, 0, 128, 1)">172.21</span>.<span style="color: rgba(128, 0, 128, 1)">180.99</span> | <span style="color: rgba(128, 0, 128, 1)">172.21</span>.<span style="color: rgba(128, 0, 128, 1)">180.100</span><span style="color: rgba(0, 0, 0, 1)">
insert into mysql_servers(hostgroup_id,</span><span style="color: rgba(0, 0, 255, 1)">hostname</span>,port) values (<span style="color: rgba(128, 0, 128, 1)">10</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">172.21.180.98</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 128, 1)">3306</span><span style="color: rgba(0, 0, 0, 1)">);
insert into mysql_servers(hostgroup_id,</span><span style="color: rgba(0, 0, 255, 1)">hostname</span>,port) values (<span style="color: rgba(128, 0, 128, 1)">10</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">172.21.180.99</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 128, 1)">3306</span><span style="color: rgba(0, 0, 0, 1)">);
insert into mysql_servers(hostgroup_id,</span><span style="color: rgba(0, 0, 255, 1)">hostname</span>,port) values (<span style="color: rgba(128, 0, 128, 1)">10</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">172.21.180.100</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 128, 1)">3306</span><span style="color: rgba(0, 0, 0, 1)">);

# 启用上述配置 </span>+<span style="color: rgba(0, 0, 0, 1)"> 持久化保存
load mysql servers to runtime;
save mysql servers to disk;</span></pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510224532258-248650863.png" alt=""></p>
<p>接下来这步需要在<code>MGR主节点</code>上进行，配置会通过主节点同步到其他从属节点：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 使用 sys 数据库
use sys;

# MySQL降低密码强度
set global validate_password.policy</span>=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
set global validate_password.length</span>=<span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">;

# 创建角色（monitor监听运行状态，proxysql是java应用连接账号）
CREATE USER </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">monitor</span><span style="color: rgba(128, 0, 0, 1)">'</span>@<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">%</span><span style="color: rgba(128, 0, 0, 1)">'</span> IDENTIFIED BY <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">monitor@1025</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
CREATE USER </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">proxysql</span><span style="color: rgba(128, 0, 0, 1)">'</span>@<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">%</span><span style="color: rgba(128, 0, 0, 1)">'</span> IDENTIFIED BY <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">proxysql@1025</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
GRANT ALL PRIVILEGES ON </span>*.* TO <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">monitor</span><span style="color: rgba(128, 0, 0, 1)">'</span>@<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">%</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)"> ;
GRANT ALL PRIVILEGES ON </span>*.* TO <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">proxysql</span><span style="color: rgba(128, 0, 0, 1)">'</span>@<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">%</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)"> ;
FLUSH PRIVILEGES;</span></pre>
</div>
<p>从这里使用<span class="words-blog hl-git-1" data-tit="Navicat" data-pretit="navicat">Navicat进入sys数据库，连接到MGR主节点上，创建视图（一段一段执行，用Navicat是因为避免控制台出现ERROR）：</span></p>
<p><span class="words-blog hl-git-1" data-tit="Navicat" data-pretit="navicat"><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510224656917-1082803217.png" alt=""></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 创建函数
CREATE FUNCTION my_id() RETURNS TEXT(</span><span style="color: rgba(128, 0, 128, 1)">36</span>) DETERMINISTIC NO SQL RETURN (SELECT @@global.server_uuid as my_id);</pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 函数：判断是否是主分区
CREATE FUNCTION gr_member_in_primary_partition()
    RETURNS VARCHAR(</span><span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">)
    DETERMINISTIC
    BEGIN
    RETURN (SELECT IF( MEMBER_STATE</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">ONLINE</span><span style="color: rgba(128, 0, 0, 1)">'</span> AND ((SELECT COUNT(*<span style="color: rgba(0, 0, 0, 1)">) FROM
    performance_schema.replication_group_members WHERE MEMBER_STATE NOT IN (</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">ONLINE</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">RECOVERING</span><span style="color: rgba(128, 0, 0, 1)">'</span>)) &gt;=<span style="color: rgba(0, 0, 0, 1)">
    ((SELECT COUNT(</span>*) FROM performance_schema.replication_group_members)/<span style="color: rgba(128, 0, 128, 1)">2</span>) = <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">),
    </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">YES</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">NO</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)"> ) FROM performance_schema.replication_group_members JOIN
    performance_schema.replication_group_member_stats USING(member_id) where member_id</span>=<span style="color: rgba(0, 0, 0, 1)">my_id());
END</span></pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 创建视图
CREATE VIEW gr_member_routing_candidate_status AS SELECT
sys.gr_member_in_primary_partition() as viable_candidate,
IF( (SELECT (SELECT GROUP_CONCAT(variable_value) FROM
performance_schema.global_variables WHERE variable_name IN (</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">read_only</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">super_read_only</span><span style="color: rgba(128, 0, 0, 1)">'</span>)) != <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">OFF,OFF</span><span style="color: rgba(128, 0, 0, 1)">'</span>), <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">YES</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">NO</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">) as read_only,
Count_Transactions_Remote_In_Applier_Queue as transactions_behind, Count_Transactions_in_queue as </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">transactions_to_cert</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">
from performance_schema.replication_group_member_stats where member_id</span>=my_id();</pre>
</div>
<p>此时，回到ProxySQL服务器控制台上，设置监控账号：</p>
<div class="cnblogs_code">
<pre>set mysql-monitor_username=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">monitor</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">;
set mysql</span>-monitor_password=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">monitor@1025</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">;
insert into mysql_users(username,password,active,default_hostgroup,transaction_persistent) values(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">proxysql</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">proxysql@1025</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 128, 1)">10</span>,<span style="color: rgba(128, 0, 128, 1)">1</span>);</pre>
</div>
<p>设置读写组：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 主负责写、从负责读，当MGR主库切换后，代理自动识别主从。
# ProxySQL代理每一个后端MGR集群时，都必须为这个MGR定义写组10、备写组20、读组30、离线组40，
# 注意：max_transactions_behind 是设置延迟大小，可以给大点,建议自己去开个并行复制。
insert into mysql_group_replication_hostgroups (writer_hostgroup,backup_writer_hostgroup,reader_hostgroup,
offline_hostgroup,active,max_writers,writer_is_also_reader,max_transactions_behind) values (</span><span style="color: rgba(128, 0, 128, 1)">10</span>,<span style="color: rgba(128, 0, 128, 1)">20</span>,<span style="color: rgba(128, 0, 128, 1)">30</span>,<span style="color: rgba(128, 0, 128, 1)">40</span>,<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 128, 1)">1</span>,<span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">100</span>);</pre>
</div>
<p>启用规则：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">load mysql servers to runtime;
save mysql servers to disk;
load mysql users to runtime;
save mysql users to disk;
load mysql variables to runtime;
save mysql variables to disk;</span></pre>
</div>
<p>状态校验，编号为10是主节点，编号为30是从节点：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">select</span> hostgroup_id, hostname, port,status <span style="color: rgba(0, 0, 255, 1)">from</span> runtime_mysql_servers;</pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510225200063-922424860.png" alt=""></p>
<p>进行读写分离配置：</p>
<div class="cnblogs_code">
<pre># <span style="color: rgba(0, 0, 255, 1)">select</span> <span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> update走主节点，其他select走从节点
# 其他 </span><span style="color: rgba(0, 0, 255, 1)">insert</span> <span style="color: rgba(0, 0, 255, 1)">update</span> <span style="color: rgba(0, 0, 255, 1)">delete</span><span style="color: rgba(0, 0, 0, 1)"> 走主节点
</span><span style="color: rgba(0, 0, 255, 1)">insert</span> <span style="color: rgba(0, 0, 255, 1)">into</span><span style="color: rgba(0, 0, 0, 1)"> mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply)
</span><span style="color: rgba(0, 0, 255, 1)">VALUES</span> (<span style="color: rgba(128, 0, 0, 1); font-weight: bold">1</span>,<span style="color: rgba(128, 0, 0, 1); font-weight: bold">1</span>,<span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">^SELECT.*FOR UPDATE$</span><span style="color: rgba(255, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1); font-weight: bold">10</span>,<span style="color: rgba(128, 0, 0, 1); font-weight: bold">1</span>),(<span style="color: rgba(128, 0, 0, 1); font-weight: bold">2</span>,<span style="color: rgba(128, 0, 0, 1); font-weight: bold">1</span>,<span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">^SELECT</span><span style="color: rgba(255, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1); font-weight: bold">30</span>,<span style="color: rgba(128, 0, 0, 1); font-weight: bold">1</span>);</pre>
</div>
<div class="cnblogs_code">
<pre># 配置加载 <span style="color: rgba(128, 128, 128, 1)">+</span><span style="color: rgba(0, 0, 0, 1)"> 持久化
</span><span style="color: rgba(0, 0, 255, 1)">load</span> mysql query rules <span style="color: rgba(0, 0, 255, 1)">to</span><span style="color: rgba(0, 0, 0, 1)"> runtime;
</span><span style="color: rgba(0, 0, 255, 1)">save</span> mysql query rules <span style="color: rgba(0, 0, 255, 1)">to</span> <span style="color: rgba(0, 0, 255, 1)">disk</span>;</pre>
</div>
<h3>3.2、读写分离测试</h3>
<p>这里注意，进行读写分离实战测试时，要连接<code>ProxySQL 6033</code>端口，6032是Admin，6033才是客户端（Java程序也连6033！）：</p>
<div class="cnblogs_code">
<pre># 链接 ProxySQL <span style="color: rgba(128, 0, 0, 1); font-weight: bold">6033</span><span style="color: rgba(0, 0, 0, 1)">
mysql </span><span style="color: rgba(128, 128, 128, 1)">-</span>uproxysql <span style="color: rgba(128, 128, 128, 1)">-</span>pproxysql<span style="color: rgba(0, 128, 0, 1)">@1025</span> <span style="color: rgba(128, 128, 128, 1)">-</span>h127.<span style="color: rgba(128, 0, 0, 1); font-weight: bold">0.0</span>.<span style="color: rgba(128, 0, 0, 1); font-weight: bold">1</span> <span style="color: rgba(128, 128, 128, 1)">-</span><span style="color: rgba(0, 0, 0, 1)">P6033

# 创建一个test数据库，查询一条数据，写一条数据
</span><span style="color: rgba(0, 0, 255, 1)">use</span><span style="color: rgba(0, 0, 0, 1)"> test;
</span><span style="color: rgba(0, 0, 255, 1)">select</span> <span style="color: rgba(128, 128, 128, 1)">*</span> <span style="color: rgba(0, 0, 255, 1)">from</span><span style="color: rgba(0, 0, 0, 1)"> test;
</span><span style="color: rgba(0, 0, 255, 1)">insert</span> <span style="color: rgba(0, 0, 255, 1)">into</span> test <span style="color: rgba(0, 0, 255, 1)">values</span>(<span style="color: rgba(128, 0, 0, 1); font-weight: bold">20</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">select</span> <span style="color: rgba(128, 128, 128, 1)">*</span> <span style="color: rgba(0, 0, 255, 1)">from</span> test <span style="color: rgba(0, 0, 255, 1)">for</span> <span style="color: rgba(0, 0, 255, 1)">update</span><span style="color: rgba(0, 0, 0, 1)">;

# 回到6032，查看路由日志
mysql </span><span style="color: rgba(128, 128, 128, 1)">-</span>uadmin <span style="color: rgba(128, 128, 128, 1)">-</span>padmin <span style="color: rgba(128, 128, 128, 1)">-</span>h127.<span style="color: rgba(128, 0, 0, 1); font-weight: bold">0.0</span>.<span style="color: rgba(128, 0, 0, 1); font-weight: bold">1</span> <span style="color: rgba(128, 128, 128, 1)">-</span><span style="color: rgba(0, 0, 0, 1)">P6032
</span><span style="color: rgba(0, 0, 255, 1)">select</span> hostgroup,digest_text <span style="color: rgba(0, 0, 255, 1)">from</span> stats_mysql_query_digest <span style="color: rgba(0, 0, 255, 1)">order</span> <span style="color: rgba(0, 0, 255, 1)">by</span> digest_text <span style="color: rgba(0, 0, 255, 1)">desc</span> limit <span style="color: rgba(128, 0, 0, 1); font-weight: bold">10</span>;</pre>
</div>
<p>可以看到，读写分离成功！</p>
<p><img src="https://img2024.cnblogs.com/blog/1647269/202505/1647269-20250510225702850-2007901932.png" alt=""></p>
<h3>3.3、<span class="doubao-hl hl " data-report-click="{&quot;spm&quot;:&quot;3001.10781&quot;,&quot;extra&quot;:&quot;{\&quot;word\&quot;:\&quot;SpringBoot\&quot;}&quot;}" data-tit="SpringBoot" data-pretit="springboot">SpringBoot&nbsp;整合</span></h3>
<div class="cnblogs_code">
<pre><span style="color: rgba(128, 0, 0, 1)">到这里说一下大家可能关注的点，就是ProxySQL + MySQL MGR`整合完毕后，如何通过SpringBoot进行整合，其实很简单。</span></pre>
</div>
<p>只需要将SpringBoot的yml配置文件中配置连接到ProxySQL就可以了</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">spring:
  datasource:
    driver</span>-<span style="color: rgba(0, 0, 255, 1)">class</span>-<span style="color: rgba(0, 0, 0, 1)">name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql:</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">123.56.41.203:6033/quick_chat?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai&amp;useSSL=false&amp;rewriteBatchedStatements=true</span>
<span style="color: rgba(0, 0, 0, 1)">    username: proxysql
    password: proxysql@</span>1025</pre>
</div>
<p>如果运行期间出现以下错误，要么mysql驱动版本号不对，要么就是ProxySQL需要调整了：</p>
<div class="cnblogs_code">
<pre>proxysql Caused by: java.sql.SQLException: Unknown system variable <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">query_cache_size</span><span style="color: rgba(128, 0, 0, 1)">'</span></pre>
</div>
<p>如果要调整<code>ProxySQL</code>，请执行如下命令，即可解决上述问题：</p>
<div class="cnblogs_code">
<pre># 连接到Proxy <span style="color: rgba(128, 0, 128, 1)">6032</span><span style="color: rgba(0, 0, 0, 1)">
mysql </span>-uadmin -padmin -h127.<span style="color: rgba(128, 0, 128, 1)">0.0</span>.<span style="color: rgba(128, 0, 128, 1)">1</span> -<span style="color: rgba(0, 0, 0, 1)">P6032

# 解决 Unknown system variable </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">query_cache_size</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)"> 问题
update global_variables set variable_value</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">8.0.4 (ProxySQL)</span><span style="color: rgba(128, 0, 0, 1)">'</span> where variable_name=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">mysql-server_version</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">;
load mysql variables to run;save mysql variables to disk;</span></pre>
</div>
<p>ProxySQL搭建参考：https://xuzhibin.blog.csdn.net/article/details/139408078?spm=1001.2014.3001.5502</p>
<p>其他资料：https://www.cnblogs.com/kebibuluan/p/18328618</p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

	<div class="postDesc">posted on 
<span id="post-date" data-last-update-days="0.7196546638310185" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-10 23:03">2025-05-10 23:02</span>&nbsp;
<a href="https://www.cnblogs.com/leiwenbin627">SZ_文彬</a>&nbsp;
阅读(<span id="post_view_count">34</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18870276);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18870276', targetLink: 'https://www.cnblogs.com/leiwenbin627/p/18870276', title: 'MySQL高可用之ProxySQL + MGR 实现读写分离实战' })">举报</a>
</div>
