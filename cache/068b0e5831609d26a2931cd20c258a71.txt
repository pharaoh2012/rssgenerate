
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/imzx/p/18688135" title="发布于 2025-01-23 16:53">
    <span role="heading" aria-level="2">某次信创环境Oceanbase数据库偶发乱码问题</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>资料迁移，整理分享。 问题发生在2023年</p>
<hr>
<h2 id="一环境介绍及问题简述">一、环境介绍及问题简述</h2>
<table><tbody><tr><td style="width: 487px">数据库</td><td style="width: 788px">oceanbase</td></tr><tr><td style="width: 487px">操作系统</td><td style="width: 788px">Linux （麒麟）</td></tr><tr><td style="width: 487px">WEB中间件</td><td style="width: 788px">Tongweb</td></tr><tr><td style="width: 487px">数据库表编码</td><td style="width: 788px">GBK</td></tr><tr><td style="width: 487px">中间件默认使用的HTTP通道编码</td><td style="width: 788px">GBK</td></tr><tr><td style="width: 487px">Java应用</td><td style="width: 788px">UTF8</td></tr></tbody></table>
在客户方搭建的信创环境中，使用麒麟Linux作为操作系统，Oceanbase作为应用数据库，东方通TongWeb作为Web应用容器，在此环境下 部署我司JAVA应用（后续表述中将使用简称WebA），在WebA使用过程中，偶发的出现中文字符入库后乱码的问题，导致业务数据无法正常查看。
<p>其中，oceanbase数据库编码使用GBK，TongWeb中HTTP通道也使用了默认的GBK编码，WebA则采用UTF8编码，应用与数据库的连接，交由TongWeb中的数据源配置进行池化管理。</p>
<p>该乱码问题随机出现，无规律，时间随机，针对同一个功能，即便是相同的数据，也不会重复触发。</p>
<h2 id="二结论声明">二、结论声明</h2>
<ul>
<li>排查后发现，现场存在定制化功能，对外公布接口，该接口在收到请求后，会调用set names gbk这个数据库命令以防止后续SP执行返回中文乱码。</li>
<li>该命令会修改数据库session级的字符编码，而且WebA的数据库连接是由中间件池化管理的，进而导致连接池里的连接被 set names gbk 命令污染。</li>
<li>WebA采用的字符集又是UTF8，后续使用过程中，使用被污染的连接操作中文字符时就会出现乱码问题。</li>
</ul>
<h2 id="三原因解释">三、原因解释</h2>
<p>1、作为前提，需要知道，每一种编码方式会有自己的字符映射表。同样的字节序列在不同的编码方式中代表的是不同的字符。</p>
<p>2、在向数据库服务器发送一条SQL指令时，指令及指令中的数据是以字节序列的形式发送到后台的。</p>
<p>3、在数据库中，可以通过 show variables like '%char%' 命令获取当前连接下的数据库编码，如下图</p>
<p><img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/AX.png" alt="database.png" loading="lazy"></p>
<p>其中，character_set_client 是数据库服务器认为的请求端使用的字符编码方式，如上图，即便客户端在发送sql语句时，使用的是GBK编码，服务器也会将其认为是UTF8编码进行处理。</p>
<p>character_set_connection 数据库服务器会把按照 character_set_client  编码处理的字符再转换为  character_set_connection  对应的编码方案。此时，如果两者的配置值相同，就可以省略一个转换的操作。</p>
<p>服务器的后续操作中，还会发生 character_set_connection到数据库表或数据表列的字符转换。</p>
<p>character_set_results 是服务器向请求端返回数据时使用的字符集，服务器会采用该变量指定的字符集对返回给客户端的数据进行编码。</p>
<p>针对入库乱码的问题，此处重点关注 character_set_client 与 character_set_connection</p>
<p>4、set names gbk的作用</p>
<p>该 语句将三个会话系统变 量 character_set_client ， character_set_connection  和 character_set_results 设置为给定的GBK字符集。 该命令仅作用于当前数据库会话，SESSION级别，详情见<a href="https://help.aliyun.com/apsara/agile/v_3_5_0_20210228/oceanbase/enterprise-user-guide/set-names.html" target="_blank" rel="noopener nofollow">SET NAMES_用户指南_云数据库OceanBase_敏捷版通用版本 (aliyun.com)</a>。<br>
<img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/dg-1693795068677.png" alt="dg" loading="lazy"></p>
<p>另外，在OB数据中，支持在租户级、Database 级、表级、字段级、session 级设置字符集，详见<a href="https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-10000000000354522" target="_blank" rel="noopener nofollow">字符集规范-OceanBase 数据库 -OceanBase文档中心-分布式数据库使用文档</a></p>
<p>5、测试（MySQL环境，OceanBase环境）。</p>
<p>MySQL测试用例一 ：</p>
<pre><code>  在WebA中通过代码修改 当前数据库连接 的字符编码设置，修改前后重复执行  SELECT '中文字段啊四川省' as col FROM dual  语句，查看输出结果是否乱码。
</code></pre>
<table style="height: 992px; margin-left: auto; margin-right: auto"><tbody><tr><td style="color: rgba(231, 76, 60, 1)">character_set_client</td><td style="color: rgba(231, 76, 60, 1)">character_set_connection</td><td>是否乱码</td><td>结果</td></tr><tr><td>utf8mb4</td><td>utf8mb4</td><td>&nbsp;否</td><td><img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/uu.png" alt="uu.png"></td></tr><tr><td>utf8mb4</td><td>gbk</td><td>否</td><td><img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/ug.png" alt="ug.png"></td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>gbk</td><td>gbk</td><td>是</td><td><img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/gg.png" alt="gg.png"></td></tr><tr><td>gbk</td><td>utf8mb4</td><td>是</td><td><img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/gu.png" alt="gu.png"></td></tr></tbody></table>
MySQL测试用例二：
<p>定义如下数据库表</p>
<pre><code class="language-sql">CREATE TABLE  encoding_test (  
  zzz  varchar(100) DEFAULT NULL,  
  xxx  varchar(100) DEFAULT NULL,  
  ccc  varchar(100) DEFAULT NULL,  
  vvv  varchar(100) DEFAULT NULL  
) ENGINE=InnoDB DEFAULT CHARSET=gbk
</code></pre>
<p>修改 当前数据库连接 的字符编码设置，执行insert插入语句，查看插入的数据是否乱码。</p>
<p><img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/insert.png" alt="insert.png" loading="lazy"></p>
<table><tbody><tr>
  <td style="color: rgba(231, 76, 60, 1)">character_set_client</td>
  <td style="color: rgba(231, 76, 60, 1)">character_set_connection</td>
  <td>是否乱码</td><td>结果</td>
  </tr>
  <tr><td>utf8mb4</td>
    <td>utf8mb4</td>
    <td>否</td><td>
    <img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/iuu.png" alt="iuu.png">
    </td>
  </tr>
  <tr>
    <td>utf8mb4</td>
    <td>gbk</td>
    <td>否</td>
    <td><img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/iug.png" alt="iug.png"></td>
  </tr>
  <tr>
    <td>gbk</td><td>gbk</td>
    <td>是</td>
    <td><img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/igg.png" alt="igg.png"></td>
  </tr>
  <tr>
    <td>gbk</td>
    <td>utf8mb4</td>
    <td>是</td>
    <td><img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/igu.png" alt="igu.png"></td>
  </tr>
  </tbody>
</table>
<p><strong>由上结果可证： 在mysql的innodb引擎下，当 character_set_client 的编码与请求端的实际编码方式不匹配时，会出现数据的乱码情况。</strong></p>
<p>OceanBase测试用例一 ：</p>
<pre><code>  通过代码修改 当前数据库连接 的字符编码设置，修改前后重复执行  SELECT '中文字段啊四川省' as col FROM dual  语句，查看输出结果是否乱码。
</code></pre>
<table style="height: 992px; margin-left: auto; margin-right: auto">
	<tbody>
			<tr>
			<td style="color: rgba(231, 76, 60, 1)">
				<div>
					<p>character_se</p>
					<p>t_client</p>
				</div>
			</td>
			<td style="color: rgba(231, 76, 60, 1)">
				<div>
					<p>character_se</p>
					<p>t_connection</p>
				</div>
			</td>
			<td style="color: rgba(231, 76, 60, 1)">
				<div>
					<p>character_se</p>
					<p>t_results</p>
				</div>
			</td>
			<td>
        <div>
					<p>是否</p>
					<p>乱码</p>
				</div>
        </td>
			<td>结果</td>
		</tr>
		<tr>
			<td>utf8mb4</td>
			<td>utf8mb4</td>
			<td>utf8mb4</td>
			<td>&nbsp;否</td>
			<td>
				<img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/ouuu.png" alt="ouuu.png"></td>
			</tr>
			<tr>
				<td>utf8mb4</td>
				<td>utf8mb4</td>
				<td>gbk</td>
				<td>否</td>
				<td>
					<img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/ouug.png" alt="ouug.png"></td>
				</tr>
				<tr>
					<td>utf8mb4</td>
					<td>gbk</td>
					<td>utf8mb4</td>
					<td>是</td>
					<td>
						<img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/ougu.png" alt="ougu.png"></td>
					</tr>
					<tr>
						<td>utf8mb4</td>
						<td>gbk</td>
						<td>gbk</td>
						<td>是</td>
						<td>
							<img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/ougg.png" alt="ougg.png"></td>
						</tr>
						<tr>
							<td>&nbsp;</td>
							<td>&nbsp;</td>
							<td>&nbsp;</td>
							<td>&nbsp;</td>
							<td>&nbsp;</td>
						</tr>
						<tr>
							<td>gbk</td>
							<td>utf8mb4</td>
							<td>utf8mb4</td>
							<td>否</td>
							<td>
								<img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/oguu.png" alt="oguu.png"></td>
							</tr>
							<tr>
								<td>gbk</td>
								<td>utf8mb4</td>
								<td>gbk</td>
								<td>否</td>
								<td>
									<img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/ogug.png" alt="ogug.png"></td>
								</tr>
								<tr>
									<td>gbk</td>
									<td>gbk</td>
									<td>utf8mb4</td>
									<td>是</td>
									<td>
										<img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/oggu.png" alt="oggu.png"></td>
									</tr>
									<tr>
										<td>gbk</td>
										<td>gbk</td>
										<td>gbk</td>
										<td>是</td>
										<td>
											<img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/oggg.png" alt="oggg.png"></td>
										</tr>
									</tbody>
								</table>
<p>根据上方表格及输出截图发现，oceanbase中，character_set_connection与请求端编码一致时不会出现乱码的情况。</p>
<h2 id="oceanbase测试用例二">Oceanbase测试用例二：</h2>
<p>字段，测试代码沿用mysql测试示例二中的内容，下方继续以表格形式展示：</p>
<table style="height: 992px; margin-left: auto; margin-right: auto">
	<tbody>
		<tr>
			<td style="color: rgba(231, 76, 60, 1); width: 107px">
				<div>
					<p>character_se</p>
					<p>t_client</p>
				</div>
			</td>
			<td style="color: rgba(231, 76, 60, 1); width: 117px">
				<div>
					<p>character_se</p>
					<p>t_connection</p>
				</div>
			</td>
			<td style="color: rgba(231, 76, 60, 1); width: 113px">
				<div>
					<p>character_se</p>
					<p>t_results</p>
				</div>
			</td>
			<td style="width: 143px">是否乱码</td>
			<td style="width: 534px">结果</td>
		</tr>
		<tr>
			<td style="width: 107px">utf8mb4</td>
			<td style="width: 117px">utf8mb4</td>
			<td style="width: 113px">utf8mb4</td>
			<td style="width: 143px">&nbsp;否</td>
			<td style="width: 534px">
				<img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/oiuuu.png" alt="oiuuu.png"></td>
			</tr>
			<tr>
				<td style="width: 107px">utf8mb4</td>
				<td style="width: 117px">utf8mb4</td>
				<td style="width: 113px">gbk</td>
				<td style="width: 143px">否</td>
				<td style="width: 534px">&nbsp;</td>
			</tr>
			<tr>
				<td style="width: 107px">utf8mb4</td>
				<td style="width: 117px">gbk</td>
				<td style="width: 113px">utf8mb4</td>
				<td style="width: 143px">
					<div>
						<p>无法确定。</p>
						<p>默认配置插入一条数据后，切换为当前组合，第一或者第二条数据会乱码，后面出现较少</p>
					</div>
				</td>
				<td style="width: 534px">
					<img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/oiugu.png" alt="oiugu.png"></td>
				</tr>
				<tr>
					<td style="width: 107px">utf8mb4</td>
					<td style="width: 117px">gbk</td>
					<td style="width: 113px">gbk</td>
					<td style="width: 143px">无法确定，得不到确切的规律，多次执行时甚至会间接出现乱码与不乱码的情况。</td>
					<td style="width: 534px">
						<img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/oiugg.png" alt="oiugg.png"></td>
					</tr>
					<tr>
						<td style="width: 107px">&nbsp;</td>
						<td style="width: 117px">&nbsp;</td>
						<td style="width: 113px">&nbsp;</td>
						<td style="width: 143px">&nbsp;</td>
						<td style="width: 534px">&nbsp;</td>
					</tr>
					<tr>
						<td style="width: 107px">gbk</td>
						<td style="width: 117px">utf8mb4</td>
						<td style="width: 113px">utf8mb4</td>
						<td style="width: 143px">否</td>
						<td style="width: 534px">
							<img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/oiguu.png" alt="oiguu.png"></td>
						</tr>
						<tr>
							<td style="width: 107px">gbk</td>
							<td style="width: 117px">utf8mb4</td>
							<td style="width: 113px">gbk</td>
							<td style="width: 143px">否</td>
							<td style="width: 534px">
								<img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/oigug.png" alt="oigug.png"></td>
							</tr>
							<tr>
								<td style="width: 107px">gbk</td>
								<td style="width: 117px">gbk</td>
								<td style="width: 113px">utf8mb4</td>
								<td style="width: 143px">无法确定，得不到确切的规律，多次执行时甚至会间接出现乱码与不乱码的情况</td>
								<td style="width: 534px">
									<img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/oiggu.png" alt="oiggu.png"></td>
								</tr>
								<tr>
									<td style="width: 107px">gbk</td>
									<td style="width: 117px">gbk</td>
									<td style="width: 113px">gbk</td>
									<td style="width: 143px">无法确定，得不到确切的规律，多次执行时甚至会间接出现乱码与不乱码的情况</td>
									<td style="width: 534px">请看下面的对比图</td>
								</tr>
							</tbody>
						</table>
<p>这里有一个很奇怪的地方是：</p>
<p>直 接运行 set character_set_client = gbk,  character_set_connection = gbk,  character_set_results = gbk, 然后执行插入，有时可以得到正常数据，有时候又是乱码的数据。</p>
<p><img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/oiggg.png" alt="oiggg" loading="lazy"></p>
<p><img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/oiggg_luan.png" alt="oiggg_luan" loading="lazy"></p>
<hr>
<p>运行 set names gbk后执行插入，则可以稳定触发乱码现象。下方为对比图：<img src="https://gitee.com/hysf/MarkdownNotes/raw/master/16_Oceanbase%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%B6%E5%8F%91%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.assets/o_compare.png" alt="o_compare" loading="lazy"></p>
<hr>
<p><strong>根据以上测试结果发现，在oceanbase中当 character_set_connection 的编码与请求端的实际编码方式不匹配时，会出现数据的乱码情况，且该乱码情况也是随机出现，无法确认规律。</strong></p>
<h2 id="四使用建议">四、使用建议</h2>
<p>1、 建议将  character_set_client ， character_set_connection  和 character_set_results  都设置为应用使用的编码方式，在WebA应用的环境下使用时，应该将参数默认设置为 utf8mb4。具体设置方式请参考：</p>
<blockquote>
<p>部署在oceanbase上需要注意字符集规范，oceanbase默认字符集为utf-8, 无特殊需求无需修改。</p>
<p>oceanbase中指定字符集方式：</p>
<p>• 在创建租户时设置字符集</p>
<p>º 可以在 create tenant 语句添加 charset 设置，添加 "charset=utf8"</p>
<p>º 可以在 OCP 中创建租户时，选择字符集为utf8</p>
<p>• 设置客户端（链路）字符集</p>
<p>º 客户端（链路）字符集是配置 client 和 server 之间交互使用的字符集设置</p>
<p>set global character_set_client = utf8;</p>
<p>set global character_set_connection = utf8;</p>
<p>set global character_set_results = utf8;</p>
<p>• 设置客户端字符集</p>
<p>º 使用jdbc 连接 OceanBase 数据库，utf8 链路一般在 url 里修改参数设置，添加 characterEncoding=utf8</p>
<p>String url = "jdbc:oceanbase://xxx.xxx.xxx.xxx:xxxx?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;connectTimeout=30000&amp;rewriteBatchedStatements=true";</p>
<p>客户端和服务端字符集编码要保持一致。</p>
</blockquote>
<h2 id="五当前采用的修复方案">五、当前采用的修复方案</h2>
<p>1、使用jdbc初始化征信接口使用的数据库连接，避免与框架使用的数据库连接池冲突。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5123252201979167" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-23 17:55">2025-01-23 16:53</span>&nbsp;
<a href="https://www.cnblogs.com/imzx">化云随风去</a>&nbsp;
阅读(<span id="post_view_count">118</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18688135" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18688135);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18688135', targetLink: 'https://www.cnblogs.com/imzx/p/18688135', title: '某次信创环境Oceanbase数据库偶发乱码问题' })">举报</a>
</div>
        