
		<h2>
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xiangji/p/18901576" title="发布于 2025-05-29 08:27">
    <span role="heading" aria-level="2">ShadowSql之表达式树</span>
    

</a>

		</h2>
		<div class="postText"><div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>ShadowSql的主要思想通过表和字段的影子来拼写sql</p>
<p>.net中的表达式树是作为模型类和查询逻辑的影子,非常契合ShadowSql</p>
<p>拿表达式树来拼写sql就和EF类似</p>
<p>&nbsp;</p>
<p><strong>一、nuget包</strong></p>
<p>nuget安装ShadowSql.Expressions</p>
<p>引用命名空间:&nbsp;ShadowSql.Expressions</p>
<p>&nbsp;</p>
<p><strong>二、使用用法</strong></p>
<p>1. 表达式查询</p>
<p style="margin-left: 30px">1.1 按常量查询</p>
<div class="cnblogs_Highlighter" style="margin-left: 30px">
<pre class="brush:csharp;gutter:true;">var query = new TableSqlQuery&lt;User&gt;("Users")
    .Where(u =&gt; u.Name == "张三");
// SELECT * FROM [Users] WHERE [Name]='张三'</pre>
</div>
<p style="margin-left: 30px">1.2 按参数查询</p>
<div class="cnblogs_Highlighter" style="margin-left: 30px">
<pre class="brush:csharp;gutter:true;">var query = new TableSqlQuery&lt;User&gt;()
    .Where&lt;UserParameter&gt;((u, p) =&gt; u.Age &gt; p.Age2);
// SELECT * FROM [User] WHERE [Age]&gt;@Age2</pre>
</div>
<p style="margin-left: 30px">&nbsp;注:&nbsp;TableSqlQuery不传参数tableName会以类名为表名</p>
<p>&nbsp;2. 表达式排序</p>
<p style="margin-left: 30px">2.1 对单个字段排序</p>
<div class="cnblogs_Highlighter" style="margin-left: 30px">
<pre class="brush:csharp;gutter:true;">var cursor = new Table("Users")
    .Take&lt;User&gt;(10)
    .Asc(u =&gt; u.Id);
// SELECT TOP 10 * FROM [Users] ORDER BY [Id]</pre>
</div>
<p style="margin-left: 30px">2.2 对多个字段排序</p>
<div class="cnblogs_Highlighter" style="margin-left: 30px">
<pre class="brush:csharp;gutter:true;">var cursor = new Table("Users")
    .Take&lt;User&gt;(10)
    .Desc(u =&gt; new { u.Age, u.Id });
// SELECT TOP 10 * FROM [Users] ORDER BY [Age] DESC,[Id] DESC</pre>
</div>
<p>&nbsp;</p>
<p>3. 联表查询</p>
<p style="margin-left: 30px">3.1 主外键联表</p>
<div class="cnblogs_Highlighter" style="margin-left: 30px">
<pre class="brush:csharp;gutter:true;">var query = new Table("Users")
    .SqlJoin&lt;User, UserRole&gt;(new Table("UserRoles"))
    .On(u =&gt; u.Id, r =&gt; r.UserId);
// SELECT * FROM [Users] AS t1 INNER JOIN [UserRoles] AS t2 ON t1.[Id]=t2.[UserId]</pre>
</div>
<p style="margin-left: 30px">3.2 逻辑表达式联表</p>
<div class="cnblogs_Highlighter" style="margin-left: 30px">
<pre class="brush:csharp;gutter:true;">var query = new Table("Users")
    .SqlJoin&lt;User, UserRole&gt;(new Table("UserRoles"))
    .On((u, r) =&gt; u.Id == r.UserId);
// SELECT * FROM [Users] AS t1 INNER JOIN [UserRoles] AS t2 ON t1.[Id]=t2.[UserId]</pre>
</div>
<p>&nbsp;</p>
<p>4. 插入</p>
<p style="margin-left: 30px">4.1 插入常量值</p>
<div class="cnblogs_Highlighter" style="margin-left: 30px">
<pre class="brush:csharp;gutter:true;">var insert = new Table("Users")
    .ToInsert(() =&gt; new User { Name = "张三", Age = 18 });
// INSERT INTO [Users]([Name],[Age])VALUES('张三',18)</pre>
</div>
<p style="margin-left: 30px">4.2 插入参数</p>
<div class="cnblogs_Highlighter" style="margin-left: 30px">
<pre class="brush:csharp;gutter:true;">var insert = new Table("Users")
    .ToInsert&lt;UserParameter, User&gt;(p =&gt; new User { Name = p.Name2, Age = p.Age2 });
// INSERT INTO [Users]([Name],[Age])VALUES(@Name2,@Age2)</pre>
</div>
<p>&nbsp;</p>
<p>5. 表达式删除</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">var delete = new TableSqlQuery&lt;Student&gt;("Students")
    .Where(s =&gt; s.Score &lt; 60)
    .ToDelete();
// DELETE FROM [Students] WHERE [Score]&lt;60</pre>
</div>
<p>&nbsp;</p>
<p>6. 表达式更新</p>
<p style="margin-left: 30px"><br>6.1 常量更新</p>
<div class="cnblogs_Highlighter" style="margin-left: 30px">
<pre class="brush:csharp;gutter:true;">var update = new Table("Users")
    .ToUpdate&lt;User&gt;(u =&gt; u.Id == 1)
    .Set(u =&gt; new User { Age = 18 });
// UPDATE [Users] SET [Age]=18 WHERE [Id]=1</pre>
</div>
<p style="margin-left: 30px">6.2 参数化更新</p>
<div class="cnblogs_Highlighter" style="margin-left: 30px">
<pre class="brush:csharp;gutter:true;">var user = new User { Id =1, Age = 18 };
var update = EmptyTable.Use("Users")
    .ToUpdate&lt;User&gt;(u =&gt; u.Id == user.Id)
    .Set(u =&gt; new User { Age = user.Age });
// UPDATE [Users] SET [Age]=@Age WHERE [Id]=@Id</pre>
</div>
<p style="margin-left: 30px">6.3 原值叠加更新</p>
<div class="cnblogs_Highlighter" style="margin-left: 30px">
<pre class="brush:csharp;gutter:true;">var update = new Table("Students")
    .ToUpdate&lt;Student&gt;(u =&gt; u.Score &lt; 60 &amp;&amp; u.Score &gt; 55)
    .Set(u =&gt; new Student { Score = u.Score + 5 });
// UPDATE [Students] SET [Score]=([Score]+5) WHERE [Score]&lt;60 AND [Score]&gt;55</pre>
</div>
<p>&nbsp;</p>
<p>7、表达式获取数据</p>
<p style="margin-left: 30px"><br>7.1 直接获取全表</p>
<div class="cnblogs_Highlighter" style="margin-left: 30px">
<pre class="brush:csharp;gutter:true;">var select = new Table("Users")
    .ToSelect&lt;User&gt;()
    .Select(u =&gt; new { u.Id, u.Name });
// SELECT [Id],[Name] FROM [Users]</pre>
</div>
<p style="margin-left: 30px">7.3 从查询表达式获取</p>
<div class="cnblogs_Highlighter" style="margin-left: 30px">
<pre class="brush:csharp;gutter:true;">var select = new Table("Users")
    .ToSelect&lt;User&gt;(u =&gt; u.Status)
    .Select(u =&gt; u.Id);
// SELECT [Id] FROM [Users] WHERE [Status]=1</pre>
</div>
<p style="margin-left: 30px">7.3 从表查询获取</p>
<div class="cnblogs_Highlighter" style="margin-left: 30px">
<pre class="brush:csharp;gutter:true;">var select = new Table("Users")
    .ToSqlQuery&lt;User&gt;()
    .Where(u =&gt; u.Status)
    .ToSelect()
    .Select(u =&gt; new { u.Id, u.Name });
// SELECT [Id],[Name] FROM [Users] WHERE [Status]=1</pre>
</div>
<p style="margin-left: 30px">7.4 分页获取</p>
<div class="cnblogs_Highlighter" style="margin-left: 30px">
<pre class="brush:csharp;gutter:true;">var select = new Table("Users")
    .ToSqlQuery&lt;User&gt;()
    .Where(u =&gt; u.Status)
    .Take(10, 20)
    .Desc(u =&gt; u.Id)
    .ToSelect();
// SELECT * FROM [Users] WHERE [Status]=1 ORDER BY [Id] OFFSET 20 ROWS FETCH NEXT 10 ROWS ONLY
</pre>
</div>
<p>&nbsp;</p>
<p><strong>三、实现方法</strong></p>
<p>1. 解析表达式树</p>
<p style="margin-left: 30px">解析表达式树需要一些技巧,需要用到设计模式</p>
<p>1.1 Visitor解析CURD组件</p>
<p>　　CURD中好些地方都可以用表达式树</p>
<p>&nbsp; &nbsp; &nbsp; 首先需要用到ExpressionVisitor类,这个类用到了访问者模式</p>
<p>　&nbsp; 定义基类VisitorBase继承ExpressionVisitor,定义可能用到的一些方法,这个地方用到了模版方法设计模式</p>
<p>　&nbsp; 实现SelectVisitor、UpdateVisitor、OrderByVisitor等</p>
<p>1.2&nbsp; VisitSource表示数据源组件的能力和作用</p>
<p>　　另外单表可以CURD,联表也可以CURD,分组还可以查询,就又抽象出表达式数据源</p>
<p>　　数据源基类是VisitSourceBase,定义一些常用方法和必须的抽象方法也是模版方法设计模式</p>
<p>　　实现TableVisitor、GroupByVisitor、JoinOnVisitor等</p>
<p>1.3&nbsp;Visitor和VisitSource组合起来解析表达式树</p>
<p>　　这样组合可以节省大量代码,这就是运用了桥接设计模式</p>
<p>&nbsp; &nbsp; &nbsp; 感兴趣的同学可以去查看源代码</p>
<p>&nbsp;</p>
<p><strong><strong>四、</strong>参数化sql</strong></p>
<p style="margin-left: 30px">ShadowSql对参数化查询支持的很好,本人也是非常推荐使用参数化查询</p>
<p style="margin-left: 30px">其一、参数化查询可以防sql注入</p>
<p style="margin-left: 30px">其二、参数化查询sql可以复用,可以考虑把参数化查询的sql缓存起来,用Dapper调用sql和参数对象直接执行</p>
<p>&nbsp;</p>
<p>欢迎大家尝试,有什么问题给我留言,我会尽力满足大家的需求</p>
<p>&nbsp;</p>
<p>源码托管地址: https://github.com/donetsoftwork/Shadow，也欢迎大家直接查看源码。</p>
<p>gitee同步更新:https://gitee.com/donetsoftwork/Shadow</p>
<p>文档地址:&nbsp;https://donetsoftwork.github.io/Shadow/expression/index.html<br>如果大家喜欢请动动您发财的小手手帮忙点一下Star。</p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>
</div>
		<p class="postfoot">
			posted on 
<span id="post-date" data-last-update-days="0.16292816425810186" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-29 14:23">2025-05-29 08:27</span>&nbsp;
<a href="https://www.cnblogs.com/xiangji">xiangji</a>&nbsp;
阅读(<span id="post_view_count">54</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18901576);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18901576', targetLink: 'https://www.cnblogs.com/xiangji/p/18901576', title: 'ShadowSql之表达式树' })">举报</a>

		</p>
	