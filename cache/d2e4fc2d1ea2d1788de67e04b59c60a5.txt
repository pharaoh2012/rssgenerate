
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/henjay724/p/18860608" title="发布于 2025-05-05 23:15">
    <span role="heading" aria-level="2">痞子衡嵌入式：聊聊i.MXRT1024/1064片内4MB Flash的SFDP表易丢失导致的烧录异常</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<hr>
<p>　　大家好，我是痞子衡，是正经搞技术的痞子。今天痞子衡给大家介绍的是<strong>i.MXRT1024/1064片内4MB Flash的SFDP表易丢失导致的烧录异常</strong>。</p>
<p>　　我们知道 i.MXRT 系列本身并没有片内非易失性存储器作为启动设备，所以硬件工程师第一件事便是为 i.MXRT 搭配一颗外置代码存储器，而串行 NOR Flash 往往是代码存储器的第一选择。既然这是刚需，为何不直接合封一颗经典的 NOR Flash 进芯片内部呢？是的，恩智浦也考虑到了这一点，这便有了 i.MXRT1024/1064 这两颗内置 Flash 的型号（至于没有给 i.MXRT 全系列强制标配 NOR Flash，也跟代码存储器类型以及容量、速度需求不一有关）。</p>
<p>　　近期有一个 RT1064 客户反馈，在给产品做量产时出现芯片无法正常使用 J-Link 或者恩智浦官方下载工具下载程序到片内 Flash 的现象，恰好痞子衡手头有一块官方 RT1064-EVK 板卡也无法烧录程序，经过痞子衡的一番摸索，发现片内 Flash 竟然没有有效的 SFDP 表，这是怎么回事？且听痞子衡细说：</p>
<h3 id="一rt片内flash简介">一、RT片内Flash简介</h3>
<h4 id="11-w25q32jv">1.1 W25Q32JV</h4>
<p>　　芯片合封技术实际上并不是什么新鲜事，对于 RT1024/1064 来说，就是将 RT1020/RT1060 的 Die 与选定的一颗 NOR Flash Die 封装在一起，RT 与 Flash 之间的信号连接在片内完成。</p>
<p>　　那么 RT1024/1064 内置的 NOR Flash 到底来自哪家供应商呢？这可以借助 \SDK_2_16_000_EVK-MIMXRT1064\boards\evkmimxrt1064\driver_examples\flexspi\nor_internal\polling_transfer 例程简单修改一下代码，读回 Flash 的 JEDEC ID 得知是来自全球排名第一的 NOR Flash 厂商 Winbond 的 W25Q32JV-IQ/JQ（4MB, 四线, 133MHz SDR，3.3V）。</p>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/cnblogs/i.MXRT_SIPFlash_SFDP_jedec_id.png" alt="" loading="lazy"></p>
<h4 id="12-rt1024片内连接">1.2 RT1024片内连接</h4>
<p>　　在 RT1024 上使用了如下 PAD 连接到了片内 Flash，这些 PAD 同时也是外部引脚。（注意其中 GPIO_SD_B1_05 并没有被 BootROM 初始化，因为片内 Flash 不能直接高速启动）</p>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/cnblogs/i.MXRT_SIPFlash_SFDP_RT1024_pin_conn.png" alt="" loading="lazy"></p>
<h4 id="13-rt1064片内连接">1.3 RT1064片内连接</h4>
<p>　　在 RT1064 上使用了如下 PAD 连接到了片内 Flash，这些 PAD 仅是内部引脚，没有引到外部。（不过在 BGA 225 封装的 RT1060X 型号上被引出了）</p>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/cnblogs/i.MXRT_SIPFlash_SFDP_RT1064_pin_conn2.png" alt="" loading="lazy"></p>
<h3 id="二sfdp对于烧录工具的重要性">二、SFDP对于烧录工具的重要性</h3>
<p>　　JESD216 是一个关于串行 NOR Flash 的标准，它“规范”了 NOR Flash 厂商的产品。这里的“规范”两字加了引号，因为这个标准比较有意思，并不是先有标准，再有 Flash 产品，而是先有各大厂商的 Flash 产品出来，然后 JESD216 才开始总结这些不同厂商的产品特性，企图形成一个看起来比较统一的规范。</p>
<p>　　目前主流 NOR Flash 厂商产品都是支持 JESD216 标准的，这体现在如下 Read SFDP (0x5A) 命令时序统一上。JESD216 标准定义了一个 256 字节大小的 SFDP 表，这个表收纳了该 Flash 的几乎全部特性（速度、容量、寄存器分布、命令集等等），对于软件驱动开发者来说尤其重要。</p>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/cnblogs/i.MXRT_SIPFlash_SFDP_read_sfdp.png" alt="" loading="lazy"></p>
<p>　　SFDP 表结构大概是这样，一开始是 signature 以及 version，然后是 Flash 各种属性信息。看到这你就能明白为啥 SFDP 对于烧录工具的重要性了，烧录工具依赖底层的 Flashloader，而 Flashloader 一般设计上是追求通用的，所以其会先获取 Flash SFDP 表进行解析得到 Flash 全部信息，然后根据这些信息加载合适的软件驱动去读写擦 Flash。因此如果得不到正确的 SFDP 表，那么依赖通用 Flashloader 的烧录工具便无法正常工作。J-Link 以及恩智浦官方烧录工具都是基于通用 Flashloader 思想设计的。</p>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/cnblogs/i.MXRT_SIPFlash_SFDP_sfdp_structure.png" alt="" loading="lazy"></p>
<h3 id="三winbond-nor-flash的sfdp操作">三、Winbond NOR Flash的SFDP操作</h3>
<p>　　翻开以 W25Q32JV 为代表的 Winbond NOR Flash 数据手册，我们从其模块框图可以得知 Flash 内部存储颗粒由三种类型组成， 地址范围 0x000000 - 0x3FFFFF 的 Memory Block，地址范围 0x000000 - 0x0000FF 的 SFDP，地址范围 0x001000 - 0x0030FF 的 Security Registers。对于 Memory Block 的读写擦操作我们再熟悉不过了，那后两种类型该用什么命令操作呢？</p>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/cnblogs/i.MXRT_SIPFlash_SFDP_W25Q32_bg.png" alt="" loading="lazy"></p>
<p>　　继续查看数据手册，找到了如下关于 Security Registers 的专用读写擦命令时序。上一节介绍了 Read SFDP 命令，似乎 SFDP 这个地址空间仅支持读操作，那么 SFDP 数据是如何在 Flash 出厂时被写入的呢？到底是直接固化（随芯片 TO）？还是 OTP 一次性专用后门命令擦写的？带着这个疑惑，痞子衡咨询了 Winbond 技术人员，他们告知其实 Security Registers 擦写命令可以同样擦写 SFDP 空间。</p>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/cnblogs/i.MXRT_SIPFlash_SFDP_W25Q32_cmd_list.png" alt="" loading="lazy"></p>
<p>　　即 Security Registers 读写擦命令时序里地址参数 A15-12 设 4'b0000 时，实际操作得就是 SFDP 空间（虽然手册里没有明说这一点）。基于这个消息，痞子衡找了一个正常的 RT1064-EVK 板卡读出其有效的 SFDP 表数据，然后将该 SFDP 表写入异常的 RT1064-EVK 板卡，这时候下载工具就能够正常烧录了。所以 RT1024/RT1064 芯片发生这种异常，要么是出厂漏烧了 SFDP 表，要么是 SFDP 被用户误擦除过。</p>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/cnblogs/i.MXRT_SIPFlash_SFDP_W25Q32_cmd_list2.png" alt="" loading="lazy"></p>
<p>　　至此，i.MXRT1024/1064片内4MB Flash的SFDP表易丢失导致的烧录异常痞子衡便介绍完毕了，掌声在哪里~~~</p>
<h3 id="欢迎订阅">欢迎订阅</h3>
<p>文章会同时发布到我的 <a href="https://www.cnblogs.com/henjay724/" target="_blank">博客园</a>、<a href="https://blog.csdn.net/henjay724" target="_blank" rel="noopener nofollow">CSDN</a>、<a href="http://weixin.sogou.com/weixin?type=1&amp;query=%E7%97%9E%E5%AD%90%E8%A1%A1%E5%B5%8C%E5%85%A5%E5%BC%8F" target="_blank" rel="noopener nofollow">微信公众号</a>、<a href="https://www.zhihu.com/people/henjay724" target="_blank" rel="noopener nofollow">知乎</a>、<a href="https://www.eefocus.com/user/3876937/article/" target="_blank" rel="noopener nofollow">与非网</a>、<a href="https://blog.chinaaet.com/henjay724" target="_blank" rel="noopener nofollow">电子技术应用AET</a>、<a href="https://www.dianyuan.com/people/912268" target="_blank" rel="noopener nofollow">电子星球</a>、<a href="https://blog.51cto.com/henjay724" target="_blank" rel="noopener nofollow">51CTO</a> 平台上。</p>
<p>微信搜索"<strong>痞子衡嵌入式</strong>"或者扫描下面二维码，就可以在手机上第一时间看了哦。</p>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/github/pzhMcu_qrcode_258x258.jpg" alt="" loading="lazy"></p>

</div>
<div id="MySignature" role="contentinfo">
    <div class="autograph"> 
  <p style="font-family: 楷体; font-size: 15px">&nbsp;&nbsp;最后欢迎关注痞子衡个人微信公众号【痞子衡嵌入式】，一个专注嵌入式技术的公众号，跟着痞子衡一起玩转嵌入式。</p>

  <img style="float: left" src="https://img2022.cnblogs.com/blog/623659/202211/623659-20221116165755872-427238307.jpg" alt="痞子衡嵌入式-微信二维码" class="img_avatar">

  <img style="float: right" src="http://henjay724.com/image/cnblogs/baogeMcu_payment_wechat_150x150.png" alt="痞子衡嵌入式-微信收款二维码" class="img_avatar">

  <img style="float: right" src="http://henjay724.com/image/cnblogs/baogeMcu_payment_alipay_150x150.jpg" alt="痞子衡嵌入式-支付宝收款二维码" class="img_avatar">

<br>
  <p>&nbsp;&nbsp;衡杰(痞子衡)，目前就职于某全球顶级半导体原厂MCU系统部门，担任高级嵌入式系统应用工程师。</p>

  <p>&nbsp;&nbsp;专栏内所有文章的转载请注明出处：<a href="http://www.cnblogs.com/henjay724/" target="_blank">http://www.cnblogs.com/henjay724/</a></p>

  <p>&nbsp;&nbsp;与痞子衡进一步交流或咨询业务合作请发邮件至 <a href="hengjie1989@foxmail.com" target="_blank">hengjie1989@foxmail.com</a></p>

  <p>&nbsp;&nbsp;可以关注痞子衡的Github主页 <a href="https://github.com/JayHeng" target="_blank">https://github.com/JayHeng</a>，有很多好玩的嵌入式项目。</p>

  <p><font color="yellow">&nbsp;&nbsp;关于专栏文章有任何疑问请直接在博客下面留言，痞子衡会及时回复免费(划重点)答疑。</font></p>

  <p><font color="red">&nbsp;&nbsp;痞子衡邮箱已被私信挤爆，技术问题不推荐私信，坚持私信请先扫码付款(5元起步)再发。</font></p>
<br>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.7931207548761574" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-05 23:16">2025-05-05 23:15</span>&nbsp;
<a href="https://www.cnblogs.com/henjay724">痞子衡</a>&nbsp;
阅读(<span id="post_view_count">69</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18860608);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18860608', targetLink: 'https://www.cnblogs.com/henjay724/p/18860608', title: '痞子衡嵌入式：聊聊i.MXRT1024/1064片内4MB Flash的SFDP表易丢失导致的烧录异常' })">举报</a>
</div>
        