
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Bug-Hunter/p/18862776" title="发布于 2025-05-06 17:10">
    <span role="heading" aria-level="2">基于docker的AI-Codereview-Gitlab部署实战</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><strong>AI-Codereview-Gitlab是一个基于大模型的自动化代码审查工具，帮助开发团队在代码合并或提交时，快速进行智能化的审查(Code Review)，提升代码质量和开发效率。</strong></p>
<h1 id="主要功能">主要功能</h1>
<ul>
<li>🚀 多模型支持
<ul>
<li>兼容 DeepSeek、ZhipuAI、OpenAI、通义千问 和 Ollama，想用哪个就用哪个。</li>
</ul>
</li>
<li>📢 消息即时推送
<ul>
<li>审查结果一键直达 钉钉、企业微信 或 飞书，代码问题无处可藏！</li>
</ul>
</li>
<li>📅 自动化日报生成
<ul>
<li>基于 GitLab &amp; GitHub Commit 记录，自动整理每日开发进展，谁在摸鱼、谁在卷，一目了然 😼。</li>
</ul>
</li>
<li>📊 可视化 Dashboard
<ul>
<li>集中展示所有 Code Review 记录，项目统计、开发者统计，数据说话，甩锅无门！</li>
</ul>
</li>
<li>🎭 Review Style 任你选
<ul>
<li>专业型 🤵：严谨细致，正式专业。</li>
<li>讽刺型 😈：毒舌吐槽，专治不服（"这代码是用脚写的吗？"）</li>
<li>绅士型 🌸：温柔建议，如沐春风（"或许这里可以再优化一下呢~"）</li>
<li>幽默型 🤪：搞笑点评，快乐改码（"这段 if-else 比我的相亲经历还曲折！"）</li>
</ul>
</li>
</ul>
<h1 id="工作原理">工作原理</h1>
<p>当用户在 GitLab 上提交代码（如 Merge Request 或 Push 操作）时，GitLab 将自动触发 webhook事件，调用本系统的接口。系统随后通过第三方大模型对代码进行审查，并将审查结果直接反馈到对应的 Merge Request 或 Commit 的Note 中，便于团队查看和处理。</p>
<p><img src="https://img2024.cnblogs.com/blog/954348/202505/954348-20250506170754179-1500883582.png" alt="" loading="lazy"></p>
<p>以上均为官方描述，下面进行实战部署操作。</p>
<h1 id="部署实战">部署实战</h1>
<p>官方给了两种部署方案，分别是Docker部署和本地Python环境部署，我们采用的是第一种，并且根据实战操作对部分内容进行了修改。</p>
<h2 id="1-前期环境准备">1. 前期环境准备</h2>
<blockquote>
<p>操作系统：centos7</p>
<p>Docker版本：24.0.0</p>
<p>Docker-Compose版本：v2.28.0</p>
<p>git版本：1.8.3.1</p>
</blockquote>
<ul>
<li>
<p>Docker国内镜像源设置：</p>
<pre><code>vim /etc/docker/daemon.json
</code></pre>
<p>将daemon.json改为如下内容：</p>
<pre><code>{ 
     "registry-mirrors": ["https://registry.docker-cn.com","https://pee6w651.mirror.aliyuncs.com"],
     "live-restore": true
}
</code></pre>
<p>保存成功后，运行如下命令进行重新加载：</p>
<pre><code>systemctl daemon-reload
systemctl restart docker
</code></pre>
</li>
</ul>
<h2 id="2获取源码">2.获取源码</h2>
<p>实战命令(由于访问GitHub经常超时或者时间较长)：</p>
<pre><code>cd /opt
git clone https://gitcode.com/gh_mirrors/ai/AI-Codereview-Gitlab.git
cd AI-Codereview-Gitlab
</code></pre>
<p>官方命令：</p>
<pre><code>cd /opt
git clone https://github.com/sunmh207/AI-Codereview-Gitlab.git
cd AI-Codereview-Gitlab
</code></pre>
<h2 id="3-配置文件">3. 配置文件</h2>
<p>获取源码后，在AI-Codereview-Gitlab目录下，创建配置文件，执行如下命令：</p>
<pre><code class="language-aiignore">cp conf/.env.dist conf/.env
vim conf/.env
</code></pre>
<p>编辑 conf/.env 文件，配置以下关键参数：</p>
<ul>
<li>
<p>大模型供应商配置参数，此处采用本地ollama部署的Deepseek:32B的大模型，因此修改如下参数部分：</p>
<pre><code class="language-env">#大模型供应商配置,支持 deepseek, openai,zhipuai,qwen 和 ollama
LLM_PROVIDER=ollama
...
#OllaMA settings; 注意: 如果使用 Docker 部署，127.0.0.1 指向的是容器内部的地址。请将其替换为实际的 Ollama服务器IP地址。
OLLAMA_API_BASE_URL=http://127.0.0.1:11434
OLLAMA_API_MODEL=deepseek-r1:32b
...
</code></pre>
</li>
<li>
<p>Gitlab配置，由于本地GitLab端口不是默认80，因此修改如下参数部分：</p>
<pre><code>#Gitlab配置
GITLAB_URL=http://192.168.1.111:9080/ #部分老版本Gitlab webhook不传递URL，需要开启此配置，示例：https://gitlab.example.com
#GITLAB_ACCESS_TOKEN={YOUR_GITLAB_ACCESS_TOKEN} #系统会优先使用此GITLAB_ACCESS_TOKEN，如果未配置，则使用Webhook 传递的Secret Token
</code></pre>
<p>同时还需要修改api.py文件内容，修改内容如下：</p>
<pre><code class="language-py">将
def handle_github_webhook(event_type, data):
    # 获取GitHub配置
    github_token = os.getenv('GITHUB_ACCESS_TOKEN') or request.headers.get('X-GitHub-Token')
...
改为：
def handle_github_webhook(event_type, data):
    # 获取GitHub配置
    github_token = os.getenv('GITHUB_ACCESS_TOKEN')
...
</code></pre>
</li>
<li>
<p>推送配置，由于本次没有设置企微或钉钉推送，因此未进行相关配置，有需求根据env中的提示进行配置。</p>
</li>
</ul>
<h2 id="4-镜像修改">4. 镜像修改</h2>
<p>官方配置的镜像源部分位于境外，导致部署过程中下载较慢或者网络异常，因此需要修改docker-compose.yml和Dockerfile中的部分参数，具体如下：</p>
<ul>
<li>
<p>修改docker-compose.yml中的image参数：</p>
</li>
<li>
<p>修改Dockerfile中Python 基础镜像和依赖源参数：</p>
<pre><code class="language-dockerfile"># 使用官方的 Python 基础镜像改为swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/python:3.10-slim国内
FROM swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/python:3.10-slim AS base
...
# 安装依赖加上国内源
RUN pip install --no-cache-dir -r requirements.txt -i https://pypi.mirrors.ustc.edu.cn/simple/
</code></pre>
<p>修改完成后进行保存。</p>
</li>
</ul>
<h2 id="5-启动服务">5. 启动服务</h2>
<pre><code class="language-shell">docker-compose up -d
</code></pre>
<h2 id="6-验证部署">6. 验证部署</h2>
<ul>
<li>主服务验证：
<ul>
<li>访问 <a href="http://your-server-ip:5001" target="_blank" rel="noopener nofollow">http://your-server-ip:5001</a></li>
<li>显示 "The code review server is running." 说明服务启动成功。</li>
</ul>
</li>
<li>Dashboard 验证：
<ul>
<li>访问 <a href="http://your-server-ip:5002" target="_blank" rel="noopener nofollow">http://your-server-ip:5002</a></li>
<li>看到一个审查日志页面，说明 Dashboard 启动成功。</li>
</ul>
</li>
</ul>
<h2 id="7-配置-gitlab-webhook">7. 配置 GitLab Webhook</h2>
<h3 id="创建access-token">创建Access Token</h3>
<p>方法一：在 GitLab 个人设置中，创建一个 Personal Access Token。</p>
<p>方法二：在 GitLab 项目设置中，创建Project Access Token。</p>
<p>注：创建的Access Token需要复制后单独保存，否则无法再次获取。</p>
<h3 id="配置-webhook">配置 Webhook</h3>
<p>在 GitLab 项目设置中，配置 Webhook：</p>
<ul>
<li>URL：<a href="http://your-server-ip:5001/review/webhook" target="_blank" rel="noopener nofollow">http://your-server-ip:5001/review/webhook</a></li>
<li>Trigger Events：勾选 Push Events 和 Merge Request Events (不要勾选其它Event)</li>
<li>Secret Token：上面配置的 Access Token(可选)</li>
</ul>
<h3 id="备注"><strong>备注</strong></h3>
<ol>
<li>Token使用优先级<br>
- 系统优先使用 .env 文件中的 GITLAB_ACCESS_TOKEN。<br>
- 如果 .env 文件中没有配置 GITLAB_ACCESS_TOKEN，则使用 Webhook 传递的Secret Token。</li>
<li>网络访问要求<br>
- 请确保 GitLab 能够访问本系统。<br>
- 若内网环境受限，建议将系统部署在外网服务器上。</li>
</ol>
<h2 id="8-配置消息推送">8. 配置消息推送</h2>
<p>配置钉钉推送</p>
<ul>
<li>
<p>在钉钉群中添加一个自定义机器人，获取 Webhook URL。</p>
</li>
<li>
<p>更新 .env 中的配置：</p>
<pre><code>#钉钉配置
DINGTALK_ENABLED=1  #0不发送钉钉消息，1发送钉钉消息
DINGTALK_WEBHOOK_URL=https://oapi.dingtalk.com/robot/send?access_token=xxx #替换为你的Webhook URL
</code></pre>
</li>
</ul>
<p>企业微信和飞书推送配置类似。</p>
<h1 id="最终效果">最终效果</h1>
<p><img src="https://img2024.cnblogs.com/blog/954348/202505/954348-20250506170419073-1656590464.png" alt="" loading="lazy"></p>

</div>
<div id="MySignature" role="contentinfo">
    原创帖，转载请注明出处及作者，标注严禁转载帖请勿转载，谢谢！
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5444725320787037" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-06 17:11">2025-05-06 17:10</span>&nbsp;
<a href="https://www.cnblogs.com/Bug-Hunter">一点空白</a>&nbsp;
阅读(<span id="post_view_count">162</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18862776);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18862776', targetLink: 'https://www.cnblogs.com/Bug-Hunter/p/18862776', title: '基于docker的AI-Codereview-Gitlab部署实战' })">举报</a>
</div>
        