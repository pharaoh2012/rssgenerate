
        <h2>
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/graphics/p/18980237" title="发布于 2025-07-12 10:11">
    <span role="heading" aria-level="2">JavaScript面试题，为什么[] + 0 = '0', 而{} + 0 = 0?</span>
    

</a>

        </h2>
        <div class="postbody">
            <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="介绍">介绍</h2>
<p>昨天在网上看到一道面试题，是关于JavaScript中的<code>+</code>元算符的，如下：</p>
<pre><code class="language-javascript">[] + 0 = ?
{} + 0 = ?
</code></pre>
<p>要解决这道题，我们首先要了解JavaScript中<code>+</code>运算符的行为，<code>+</code>元算符在JavaScript中主要有三种用途：一是用于数字相加，二是用于字符串连接，三是用于类型转换。</p>
<pre><code class="language-js">1 + 2 = 3 // 数字相加
'Hello, ' + 'World!' = 'Hello, World!' // 字符串连接
+'1' = 1 // 字符串转换为数字
</code></pre>
<p>再回到面试题，可以看出，这并非常规的加法操作，因为运算符两侧的操作数并非都是数字类型，而是包含了数组和对象。难道是字符串连接吗？不确定，是类型转换？好像也不是。</p>
<p>追本溯源，我们先看看MDN上关于<code>+</code>的运行规则吧：</p>
<p>如果<code>+</code>元算符的操作数包含非基本类型（比如对象，数组等），先将其转换为基本类型(primitive type)。</p>
<blockquote>
<p>在JavaScript中，基本类型包括<code>undefined</code>、<code>null</code>、<code>boolean</code>、<code>number</code>、<code>string</code>、<code>BigInt</code>、<code>Symbol</code>。</p>
</blockquote>
<p>当<code>+</code>元算符两侧都是基本类型时，执行规则如下：</p>
<ol>
<li>有一个操作数是字符串时，将另一个操作数也转换为字符串，并执行字符串连接；</li>
<li>有一个操作数是<code>BigInt</code>时，将另一个操作数也转换为<code>BigInt</code>，并执行加法；</li>
<li>否则，将两个操作数都转换为数字，并执行加法。</li>
</ol>
<p>举几个列子：</p>
<pre><code class="language-js">1 + `2` = '12' // 满足规则1，将数字1转换为字符串'1'，执行字符串连接
1 + 2n = 3n // 满足规则2，将数字1转换为
null + true = 1 // 满足规则3，将null转换为数字0，将true转换为数字1，执行加法
</code></pre>
<p>注意以上3条规则是按顺序执行的，字符串连接的优先级高于数字加法，所以字符串和数字相加时，永远会转换为字符串连接。</p>
<p>现在来看<code>[] + 0</code>该如何执行，首先<code>[]</code>是数组，不属于基本类型，所以先将它转换为基本类型，对象类型转换为基本类型的操作如下：</p>
<ol>
<li>调用对象的<code>toPrimitive</code>方法；</li>
<li>如果没有<code>toPrimitive</code>方法，则调用<code>valueOf</code>方法；</li>
<li>如果<code>valueOf</code>方法返回的值不是基本类型，则调用<code>toString</code>方法；</li>
<li>如果<code>toString</code>方法返回的值仍不是基本类型，则抛出错误。</li>
</ol>
<p>所以<code>[] + 0</code>的执行过程如下：</p>
<ol>
<li><code>[]</code>没有<code>toPrimitive</code>方法，所以调用<code>valueOf</code>方法。</li>
<li><code>valueOf</code>方法返回值仍然是数组对象<code>[]</code>。</li>
<li>接着调用<code>toString</code>方法，返回空字符串<code>''</code>。</li>
</ol>
<p>因此，<code>[] + 0</code>等价于<code>'' + 0</code>, 此时<code>+</code>两侧都是基本类型了，并且满足有一侧是字符串的条件，所以将另一侧的操作数<code>0</code>也转换为字符串，执行字符串连接，结果为<code>'' + '0'</code> = <code>'0'</code>。</p>
<p>再来看<code>{} + 0</code>, <code>{}</code>和<code>[]</code>一样，都是对象类型，所以先将其转换为基本类型。</p>
<ol>
<li><code>{}</code>没有<code>toPrimitive</code>方法，所以调用<code>valueOf</code>方法，返回值仍然是对象<code>{}</code>。</li>
<li>接着调用<code>toString</code>方法，返回字符串<code>'[object Object]'</code></li>
<li>然后将<code>'[object Object]'</code>与<code>0</code>进行字符串连接，结果为<code>'[object Object]' + '0'</code> = <code>'[object Object]0'</code>。</li>
</ol>
<p>哈哈，但是我要告诉你，这个答案是错误的，这个分析是没有问题的，但是JavaScript解释器不同意，当它看到<code>{}</code>时，会将其解释为一个空的代码块，而不是一个空对象，因此，<code>{} + </code>实际上等于下面的代码：</p>
<pre><code class="language-javascript">{}
+ 0
</code></pre>
<p>这时，而<code>{}</code>被视为一个空代码块, 没有返回任何结果，而<code>+ 0</code>被解释为一条独立的语句，返回值是0，最终结果是<code>0</code>。</p>
<p>如果要让代码按照我们上面分析的过程执行，那么就要防止JavaScript将<code>{}</code>解释为空代码块，可以用<code>()</code>将其包裹起来。</p>
<pre><code class="language-javascript">({}) + 0 // 结果为 '[object Object]0'
</code></pre>
<h2 id="总结">总结</h2>
<pre><code class="language-js">[] + 0 = '0'
{} + 0 = 0
</code></pre>
<p>说实话这道题目比较偏门，但是对于了解JavaScript中<code>+</code>运算符的行为还是很有帮助的，通过一道题，能了解一个知识点，还是很值得的。</p>
<p>有的时候，不要光纠结问题的答案，更应该关注的是问题背后的原理的规则，就比如这道题，在没有写这篇文章之前，如果让我回答，我是答不上来的，我需要查阅资料，了解<code>+</code>运算符的行为规则，才能得出正确的答案。我觉得相比知道答案，更有意思的是分析的过程，这个过程体现了一个程序员处理问题的逻辑思维能力，小到一道面试题，大到一个复杂的系统设计，都是如此。那么如何培养这种能力呢，我也一直在寻找答案...</p>
<p>最后给大家留几道思考题：</p>
<pre><code class="language-javascript">[] + [] = ?
{} + [] = ?
[] + {} = ?
{} + {} = ?
</code></pre>
<p>今天就到这里了，我们明天见。</p>
<blockquote>
<p>今天周六，准备出去逛逛，奈何天气太热，动也不想动，只能呆在家里了。锁凤十代打了两天，手感非常不错，准备留下了，之前买的猛禽就退了吧，现在赚钱不易，还是要精打细算的好。</p>
</blockquote>

</div>
<div id="MySignature" role="contentinfo">
    <div id="ZddSignature">
<div>作者：<a href="http://www.cnblogs.com/graphics/" target="_blank">zdd</a></div>
<div>出处：<a href="http://www.cnblogs.com/graphics/" target="_blank">http://www.cnblogs.com/graphics/</a>
<div>
<div>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利.</div>
</div>
</div>
</div>
</div>
<div class="clear"></div>

        </div>
        <p class="postfoot">
            posted on 
<span id="post-date" data-last-update-days="0.05763888888888889" data-date-updated="2025-07-12 11:34">2025-07-12 10:11</span>&nbsp;
<a href="https://www.cnblogs.com/graphics">前端风云志</a>&nbsp;
阅读(<span id="post_view_count">46</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18980237);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18980237', targetLink: 'https://www.cnblogs.com/graphics/p/18980237', title: 'JavaScript面试题，为什么[] + 0 = &amp;#39;0&amp;#39;, 而{} + 0 = 0?' })">举报</a>

        </p>
    