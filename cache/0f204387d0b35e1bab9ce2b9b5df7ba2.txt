
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/linx/p/18814772" title="发布于 2025-04-08 15:22">
    <span role="heading" aria-level="2">Web前端入门第 29 问：CSS 盒模型：网页布局的基石</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在 Web 网页开发中，<code>盒模型</code>（<code>Box Model</code>） 是 CSS 的核心概念，它决定了每个 HTML 元素在页面中占据的空间和布局方式。</p>
<p>无论是文本、图片还是按钮，浏览器都会将它们视为一个矩形盒子，并通过盒模型的规则计算其尺寸和位置。</p>
<p>Web 网页开发，就是把一个个的盒子摆在正确的位置，堆叠成好看的样子。</p>
<p>我一直觉得叫 <code>盒模型</code> 不是太完美，毕竟网页是二维平面，盒子给人的感觉像是三维中的事物，不过前人栽的树，咱们还是好好乘凉就行。</p>
<h2 id="盒模型的四大组成部分">盒模型的四大组成部分</h2>
<p>每个元素对应的盒子由四层结构组成，从内到外依次为：</p>
<ol>
<li>
<p><strong>内容区（Content）</strong></p>
<ul>
<li>盒子里面装的东西（如文字、图片等），如手机的屏幕显示内容区域。</li>
<li>通过 <code>width</code> 和 <code>height</code> 控制尺寸（默认仅作用于内容区）。</li>
</ul>
</li>
<li>
<p><strong>内边距（Padding）</strong></p>
<ul>
<li>内容区与边框之间的空白区域，如手机屏幕的黑边。</li>
<li>通过 <code>padding</code> 属性设置（如 <code>padding: 20px;</code>）。</li>
<li>可分别控制四个方向：<code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, <code>padding-left</code> 等。</li>
<li><code>padding</code> 用法：</li>
</ul>
<pre><code class="language-css">.box1 {
    padding: 1px; /* 设置一个值等同于 `padding: 1px 1px 1px 1px;` 四个值分别代表上右下左 */
}
.box2 {
    padding: 1px 2px; /* 设置两个值等同于 `padding: 1px 2px 1px 2px;` */
}
.box3 {
    padding: 1px 2px 3px; /* 设置三个值等同于 `padding: 1px 2px 3px 2px;` */
}
.box4 {
    padding: 1px 2px 3px 4px; /* 写全四个值 */
}
</code></pre>
</li>
<li>
<p><strong>边框（Border）</strong></p>
<ul>
<li>围绕内容和内边距的可见线条，如手机的金属边框厚度。</li>
<li>通过 <code>border</code> 属性设置（如 <code>border: 2px solid #333;</code>）。</li>
<li>可自定义样式（实线、虚线）、颜色、圆角（<code>border-radius</code>）。</li>
<li><code>border</code> 用法：</li>
</ul>
<pre><code class="language-css">.box1 {
    border: 2px solid #333;
}
/* 等同于 */
.box1 {
    border-width: 2px;
    border-style: solid;
    border-color: #333;
}
/* 等同于 */
.box1 {
    border-width: 2px 2px 2px 2px;
    border-style: solid solid solid solid;
    border-color: #333 #333 #333 #333;
}
</code></pre>
</li>
<li>
<p><strong>外边距（Margin）</strong></p>
<ul>
<li>盒子与其他元素之间的透明空白区域，如两个手机之间的距离区域。</li>
<li>通过 <code>margin</code> 属性设置（如 <code>margin: 10px;</code>）。</li>
<li>支持负值（用于特殊布局，如元素重叠）。</li>
<li>其用法与 <code>padding</code> 类似，也是可以同时设置四个方向。</li>
</ul>
</li>
</ol>
<h2 id="标准盒模型-vs-替代盒模型">标准盒模型 vs 替代盒模型</h2>
<p>默认情况下，浏览器使用 <strong>标准盒模型（content-box）</strong>，此时元素的<strong>总宽度</strong>计算公式为：</p>
<p><code>总宽度 = width + padding-left + padding-right + border-left + border-right + margin-left + margin-right</code></p>
<p>这种计算方式容易导致布局偏差（例如设置 <code>width: 100%</code> 后元素溢出容器）。</p>
<hr>
<p><strong>替代盒模型（border-box）</strong> 通过 <code>box-sizing</code> 属性切换：</p>
<pre><code class="language-css">.box1 {
  box-sizing: border-box;
}
</code></pre>
<p>此时元素的 <code>width</code> 和 <code>height</code> 直接表示<strong>整个盒子的尺寸</strong>（包含内容、内边距和边框），计算公式变为：</p>
<p><code>总宽度 = width（已包含padding和border） + margin-left + margin-right</code></p>
<p>这种方式更符合直觉，能显著简化布局计算，但需要注意设置行高需要减去 padding 和 border 。</p>
<p>如果觉得 <code>替代盒模型</code> 更符合使用方式，可使用通配符 <code>*</code> 全局设置元素的盒模型：</p>
<pre><code class="language-css">* {
  box-sizing: border-box;
}
</code></pre>
<h2 id="盒模型实战演示">盒模型实战演示</h2>
<p><strong>示例代码：</strong></p>
<pre><code class="language-html">&lt;div class="box"&gt;这是一个盒子&lt;/div&gt;
</code></pre>
<pre><code class="language-css">.box {
  width: 200px;
  height: 100px;
  padding: 20px;
  border: 5px solid #ff6b6b;
  margin: 30px;
  background-color: #ffe8e8;
  box-sizing: content-box; /* 默认值 */
}
</code></pre>
<hr>
<p><strong>效果解析（标准盒模型）：</strong></p>
<ul>
<li>内容区：200px × 100px</li>
<li>总宽度：200 + 20×2 + 5×2 + 30×2 = 310px</li>
<li>总高度：100 + 20×2 + 5×2 + 30×2 = 210px</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250408151801212-1467178052.png" alt="" width="600" loading="lazy"></p>
<hr>
<p>如果将 <code>box-sizing</code> 改为 <code>border-box</code>，则：</p>
<ul>
<li>总宽度：200px（包含padding和border） + 30×2 = 260px</li>
<li>内容区自动缩小：200 - (20×2 + 5×2) = 150px</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250408152016944-1167629828.png" alt="" width="600" loading="lazy"></p>
<h2 id="盒模型常见问题与技巧">盒模型常见问题与技巧</h2>
<ol>
<li>
<p><strong>外边距合并（Margin Collapse）</strong></p>
<ul>
<li>现象：垂直相邻的两个块级元素，上下外边距会合并为较大的那个值。</li>
<li>解决方案：使用 <code>padding</code> 替代，或通过父元素添加 <code>overflow: hidden</code>。</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250408152036769-317775982.png" alt="" width="600" loading="lazy"></p>
</li>
<li>
<p><strong>元素居中</strong></p>
<pre><code class="language-css">/* 水平居中 */
.box {
    margin-left: auto;
    margin-right: auto;
}
</code></pre>
<p>可利用 <code>margin</code> 属性实现水平居中，如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250408152046842-404716173.png" alt="" width="600" loading="lazy"></p>
</li>
<li>
<p><strong>调试盒模型</strong></p>
<ul>
<li>使用浏览器开发者工具（如Chrome DevTools）直接查看盒模型结构：</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250408152057961-1149877125.png" alt="" width="600" loading="lazy"></p>
<ul>
<li>通过 <code>outline: 1px solid red;</code> 临时高亮元素（不占用布局空间）。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="总结">总结</h2>
<p>盒模型是CSS布局的基石，理解其组成和行为是避免布局混乱的关键。</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>&nbsp;</p>
<p style="font-size: 18px;font-weight: bold;"><span style="color:rgb(255, 71, 87)">文章正在持续更新中...</span>，首发微信公众号【<span style="color:rgb(255, 71, 87)">前端路引</span>】，欢迎关注公众号获取最新文章。</p>
<p>
  <img style="max-width: 320px;" src="https://images.cnblogs.com/cnblogs_com/linx/2447020/o_250228035031_%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png">
</p>
<p>本文来自博客园，作者：<a href="https://www.cnblogs.com/linx/" target="_blank">前端路引</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/linx/p/18814772" target="_blank">https://www.cnblogs.com/linx/p/18814772</a></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.07215121820949075" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-08 15:23">2025-04-08 15:22</span>&nbsp;
<a href="https://www.cnblogs.com/linx">前端路引</a>&nbsp;
Views(<span id="post_view_count">32</span>)&nbsp;
Comments(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18814772" rel="nofollow">Edit</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18814772);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18814772', targetLink: 'https://www.cnblogs.com/linx/p/18814772', title: 'Web前端入门第 29 问：CSS 盒模型：网页布局的基石' })">举报</a>
</div>
	