
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mengps/p/18637740" title="发布于 2024-12-28 17:54">
    <span role="heading" aria-level="2">Qt 中实现系统主题感知</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/802097/202412/802097-20241228175358537-1650770229.png" alt="Qt 中实现系统主题感知" class="desc_img">
        在现代桌面应用程序开发中，系统主题感知是一项重要的功能，它使得应用程序能够根据用户的系统主题设置（如深色模式或浅色模式）自动调整其外观。
Qt 作为一个跨平台的C++图形用户界面应用程序开发框架，提供了丰富的工具和类来实现这一功能。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h3 id="写在前面">【写在前面】</h3>
<p>在现代桌面应用程序开发中，系统主题感知是一项重要的功能，它使得应用程序能够根据用户的系统主题设置（如深色模式或浅色模式）自动调整其外观。</p>
<p>Qt 作为一个跨平台的C++图形用户界面应用程序开发框架，提供了丰富的工具和类来实现这一功能。</p>
<hr>
<h3 id="正文开始">【正文开始】</h3>
<h4 id="一使用效果">一、使用效果</h4>
<p><img src="https://img2024.cnblogs.com/blog/802097/202412/802097-20241228175313267-659959895.gif" alt="image" loading="lazy"></p>
<h4 id="二系统主题感知助手类systemthemehelper">二、系统主题感知助手类（SystemThemeHelper）</h4>
<p><code>SystemThemeHelper</code>类是一个封装了系统主题感知功能的Qt对象。它主要通过读取系统设置和监听系统主题变化来更新应用程序的主题颜色和颜色方案。</p>
<ol>
<li>
<p><strong>类定义与属性</strong></p>
<p>在<code>systemthemehelper.h</code>中，<code>SystemThemeHelper</code>类继承自<code>QObject</code>，并定义了两个属性：<code>themeColor</code>和<code>colorScheme</code>。这两个属性分别表示当前的主题颜色和颜色方案（深色、浅色或无）。</p>
<pre><code class="language-cpp">class SystemThemeHelper : public QObject
{
    Q_OBJECT
    Q_PROPERTY(QColor themeColor READ themeColor NOTIFY themeColorChanged)
    Q_PROPERTY(SystemThemeHelper::ColorScheme colorScheme READ colorScheme NOTIFY colorSchemeChanged)
    // ...
};
</code></pre>
<p><code>ColorScheme</code>是一个枚举类，定义了三种颜色方案：<code>None</code>、<code>Dark</code>和<code>Light</code>。</p>
</li>
<li>
<p><strong>构造函数与析构函数</strong></p>
<p><code>SystemThemeHelper</code>的构造函数初始化了一些私有成员变量，并启动了一个定时器，用于定期更新主题颜色和颜色方案。析构函数则负责清理资源。</p>
<pre><code class="language-cpp">SystemThemeHelper::SystemThemeHelper(QObject *parent)
    : QObject{parent}, d_ptr(new SystemThemeHelperPrivate(this))
{
    Q_D(SystemThemeHelper);
    d-&gt;m_themeColor = getThemeColor();
    d-&gt;m_colorScheme = getColorScheme();
    d-&gt;m_timer.start(200, this);
    #ifdef Q_OS_WIN
    initializeFunctionPointers();
    #endif
}

SystemThemeHelper::~SystemThemeHelper()
{
    // 清理资源
}
</code></pre>
</li>
<li>
<p><strong>获取主题颜色和颜色方案</strong></p>
<p><code>getThemeColor</code>和<code>getColorScheme</code>是两个不可用于绑定的方法，它们立即返回当前的主题颜色和颜色方案，但不会触发任何更新通知。这两个方法主要用于快速获取当前设置，而不关心后续的变化。</p>
<pre><code class="language-cpp">QColor SystemThemeHelper::getThemeColor() const
{
    Q_D(const SystemThemeHelper);
    #ifdef Q_OS_WIN
    return QColor::fromRgb(d-&gt;m_themeColorSettings.value("ColorizationColor").toUInt());
    #endif
}

SystemThemeHelper::ColorScheme SystemThemeHelper::getColorScheme() const
{
    Q_D(const SystemThemeHelper);
    #if QT_VERSION &gt;= QT_VERSION_CHECK(6, 5, 0)
    const auto scheme = QGuiApplication::styleHints()-&gt;colorScheme();
    return scheme == Qt::ColorScheme::Dark ? ColorScheme::Dark : ColorScheme::Light;
    #else
    #ifdef Q_OS_WIN
    return !d-&gt;m_colorSchemeSettings.value("AppsUseLightTheme").toBool() ? ColorScheme::Dark : ColorScheme::Light;
    #else //linux
    const QPalette defaultPalette;
    const auto text = defaultPalette.color(QPalette::WindowText);
    const auto window = defaultPalette.color(QPalette::Window);
    return text.lightness() &gt; window.lightness() ? ColorScheme::Dark : ColorScheme::Light;
    #endif // Q_OS_WIN
    #endif // QT_VERSION
}
</code></pre>
</li>
<li>
<p><strong>更新主题颜色和颜色方案</strong></p>
<p><code>themeColor</code>和<code>colorScheme</code>是两个可用于绑定的方法，它们返回当前的主题颜色和颜色方案，并在值发生变化时发出通知。这两个方法内部调用了私有成员函数的更新逻辑。</p>
<pre><code class="language-cpp">QColor SystemThemeHelper::themeColor()
{
    Q_D(SystemThemeHelper);
    d-&gt;_updateThemeColor();
    return d-&gt;m_themeColor;
}

SystemThemeHelper::ColorScheme SystemThemeHelper::colorScheme()
{
    Q_D(SystemThemeHelper);
    d-&gt;_updateColorScheme();
    return d-&gt;m_colorScheme;
}
</code></pre>
</li>
<li>
<p><strong>设置窗口标题栏模式</strong></p>
<p><code>setWindowTitleBarMode</code>方法允许设置窗口标题栏的模式（深色或浅色）。这个方法在Windows平台上通过调用 <code>DWM API</code> 实现，而在其他平台上则不支持。</p>
<pre><code class="language-cpp">bool SystemThemeHelper::setWindowTitleBarMode(QWindow *window, bool isDark)
{
    #ifdef Q_OS_WIN
    return bool(pDwmSetWindowAttribute ? !pDwmSetWindowAttribute(HWND(window-&gt;winId()), 20, &amp;isDark, sizeof(BOOL)) : false);
    #else
    return false;
    #endif //Q_OS_WIN
}
</code></pre>
</li>
<li>
<p><strong>定时器事件处理</strong></p>
<p><code>timerEvent</code>方法是一个虚函数，用于处理定时器事件。它定期调用更新函数来检查主题颜色和颜色方案是否发生变化，并在变化时发出通知。</p>
<pre><code class="language-cpp">void SystemThemeHelper::timerEvent(QTimerEvent *)
{
    Q_D(SystemThemeHelper);
    d-&gt;_updateThemeColor();
    d-&gt;_updateColorScheme();
}
</code></pre>
</li>
</ol>
<h4 id="三实现细节">三、实现细节</h4>
<p><code>SystemThemeHelperPrivate</code>是<code>SystemThemeHelper</code>的私有实现类，它封装了所有的实现细节和状态变量。这个类主要负责读取系统设置、更新主题颜色和颜色方案，并发出通知。</p>
<ol>
<li>
<p><strong>构造函数与成员变量</strong></p>
<p><code>SystemThemeHelperPrivate</code>的构造函数接收一个指向<code>SystemThemeHelper</code>的指针，并初始化成员变量。成员变量包括主题颜色、颜色方案、定时器和一些平台特定的设置对象。</p>
<pre><code class="language-cpp">SystemThemeHelperPrivate::SystemThemeHelperPrivate(SystemThemeHelper *q)
    : q_ptr(q)
{
    // 初始化成员变量
}
</code></pre>
</li>
<li>
<p><strong>更新函数</strong></p>
<p><code>_updateThemeColor</code>和<code>_updateColorScheme</code>是两个更新函数，它们检查当前的主题颜色和颜色方案是否发生变化，并在变化时更新成员变量并发出通知。</p>
<pre><code class="language-cpp">void SystemThemeHelperPrivate::_updateThemeColor()
{
    Q_Q(SystemThemeHelper);
    auto nowThemeColor = q-&gt;getThemeColor();
    if (nowThemeColor != m_themeColor) {
        m_themeColor = nowThemeColor;
        emit q-&gt;themeColorChanged();
    }
}

void SystemThemeHelperPrivate::_updateColorScheme()
{
    Q_Q(SystemThemeHelper);
    auto nowColorScheme = q-&gt;getColorScheme();
    if (nowColorScheme != m_colorScheme) {
        m_colorScheme = nowColorScheme;
        emit q-&gt;colorSchemeChanged();
    }
}
</code></pre>
</li>
<li>
<p><strong>平台特定的实现</strong></p>
<p>在Windows平台上，<code>SystemThemeHelperPrivate</code>使用<code>QSettings</code>来读取系统主题设置，并使用DWM API来设置窗口标题栏的模式。这些实现细节被封装在条件编译块中，以确保跨平台的兼容性。</p>
<pre><code class="language-cpp">#ifdef Q_OS_WIN
QSettings m_themeColorSettings{QSettings::UserScope, "Microsoft", "Windows\\DWM"};
QSettings m_colorSchemeSettings{QSettings::UserScope, "Microsoft", "Windows\\CurrentVersion\\Themes\\Personalize"};
static DwmSetWindowAttributeFunc pDwmSetWindowAttribute = nullptr;
// ...
static inline bool initializeFunctionPointers()
{
    // 初始化DWM API函数指针
}
#endif //Q_OS_WIN
</code></pre>
</li>
</ol>
<h4 id="四如何使用">四、如何使用</h4>
<p>C++：</p>
<pre><code class="language-c++">	SystemThemeHelper *helper = new SystemThemeHelper;
    QObject::connect(helper, &amp;SystemThemeHelper::themeColorChanged, [helper]{
        qDebug() &lt;&lt; helper-&gt;getThemeColor();
    });
    QObject::connect(helper, &amp;SystemThemeHelper::colorSchemeChanged, [helper]{
        qDebug() &lt;&lt; helper-&gt;getColorScheme();
    });
</code></pre>
<p>Qml：</p>
<pre><code class="language-javascript">import QtQuick 2.15
import QtQuick.Window 2.15

import DelegateUI.Utils 1.0

Window {
    id: window
    width: 640
    height: 480
    visible: true
    title: qsTr("SystemThemeHelper Test - ") + (themeHelper.colorScheme == SystemThemeHelper.Dark ? "Dark" : "Light")
    color: themeHelper.colorScheme == SystemThemeHelper.Dark ? "black" : "white"

    Behavior on color { ColorAnimation { } }

    SystemThemeHelper {
        id: themeHelper
        onThemeColorChanged: {
            console.log("onThemeColorChanged:", themeColor);
        }
        onColorSchemeChanged: {
            setWindowTitleBarMode(window, themeHelper.colorScheme == SystemThemeHelper.Dark)
            console.log("onColorSchemeChanged:", colorScheme);
        }
        Component.onCompleted: {
            console.log("onColorSchemeChanged:", colorScheme);
            setWindowTitleBarMode(window, themeHelper.colorScheme == SystemThemeHelper.Dark)
        }
    }

    Text {
        anchors.centerIn: parent
        text: qsTr("主题颜色")
        font.family: "微软雅黑"
        font.pointSize: 32
        color: themeHelper.themeColor
    }
}

</code></pre>
<hr>
<h3 id="结语">【结语】</h3>
<p>通过<code>SystemThemeHelper</code>类，我们可以在 Qt 应用程序中实现系统主题感知功能。</p>
<p>这个类封装了读取系统设置、更新主题颜色和颜色方案以及发出通知的逻辑，使得我们可以轻松地根据系统主题变化来调整应用程序的外观。</p>
<p>此外，通过条件编译和平台特定的实现，还确保了跨平台的兼容性。</p>
<p>最后：项目链接(多多star呀..⭐_⭐)：</p>
<p>Github: <a href="https://github.com/mengps/QmlControls" target="_blank" rel="noopener nofollow">https://github.com/mengps/QmlControls</a></p>
<p>Gitee: <a href="https://gitee.com/MenPenS/QmlControls" target="_blank" rel="noopener nofollow">https://gitee.com/MenPenS/QmlControls</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.013359799716435186" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-28 17:55">2024-12-28 17:54</span>&nbsp;
<a href="https://www.cnblogs.com/mengps">梦起丶</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18637740" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18637740);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18637740', targetLink: 'https://www.cnblogs.com/mengps/p/18637740', title: 'Qt 中实现系统主题感知' })">举报</a>
</div>
        