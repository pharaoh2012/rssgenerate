
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ThinkerQAQ/p/18966188" title="发布于 2025-07-04 21:23">
    <span role="heading" aria-level="2">10.Java Spring框架源码分析-IOC-实例化所有非懒加载的单实例bean</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p></p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#1-要研究的代码" rel="noopener nofollow">1. 要研究的代码</a></li><li><a href="#2-实例化所有非懒加载的单实例bean" rel="noopener nofollow">2. 实例化所有非懒加载的单实例bean</a><ul><li><a href="#21-获取所有beanname一个个创建" rel="noopener nofollow">2.1. 获取所有BeanName，一个个创建</a></li><li><a href="#22-创建单个bean" rel="noopener nofollow">2.2. 创建单个bean</a></li><li><a href="#23-看看之前创建bean有木有没有再去创建不是缓存而是之前步骤创建的bean" rel="noopener nofollow">2.3. 看看之前创建bean有木有，没有再去创建【不是缓存，而是之前步骤创建的Bean】</a></li><li><a href="#24-从缓存中获取没有再创建" rel="noopener nofollow">2.4. 从缓存中获取，没有再创建</a></li><li><a href="#25-先看看能不能返回代理对象不能再创建" rel="noopener nofollow">2.5. 先看看能不能返回代理对象，不能再创建</a><ul><li><a href="#251-从代理对象中获取" rel="noopener nofollow">2.5.1. 从代理对象中获取</a><ul><li><a href="#2511-第一次创建业务bean进到这里的时候并不会返回代理对象" rel="noopener nofollow">2.5.1.1. 第一次创建业务bean进到这里的时候并不会返回代理对象</a></li><li><a href="#2512-在实例化之前调用" rel="noopener nofollow">2.5.1.2. 在实例化之前调用</a></li><li><a href="#2513-如果有代理对象那么调用" rel="noopener nofollow">2.5.1.3. 如果有代理对象那么调用</a></li></ul></li></ul></li><li><a href="#26-真正创建bean实例" rel="noopener nofollow">2.6. 真正创建bean实例</a><ul><li><a href="#261-创建bean实例" rel="noopener nofollow">2.6.1. 创建bean实例</a></li><li><a href="#262-为bean的属性赋值" rel="noopener nofollow">2.6.2. 为bean的属性赋值</a></li><li><a href="#263-初始化bean" rel="noopener nofollow">2.6.3. 初始化bean</a><ul><li><a href="#2631-执行所有beanpostprocessor的postprocessbeforeinitialization方法" rel="noopener nofollow">2.6.3.1. 执行所有BeanPostProcessor的postProcessBeforeInitialization方法</a></li><li><a href="#2632-调用自定义的初始化方法initializingbean" rel="noopener nofollow">2.6.3.2. 调用自定义的初始化方法【InitializingBean】</a></li><li><a href="#2633-调用所有beanpostprocessor的postprocessafterinitialization方法" rel="noopener nofollow">2.6.3.3. 调用所有BeanPostProcessor的postProcessAfterInitialization方法</a></li></ul></li><li><a href="#264-注册bean的销毁方法" rel="noopener nofollow">2.6.4. 注册bean的销毁方法</a></li></ul></li></ul></li></ul></div><p></p>
<h2 id="1-要研究的代码">1. 要研究的代码</h2>
<ul>
<li>finishBeanFactoryInitialization</li>
</ul>
<pre><code class="language-java">protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
	// Initialize conversion service for this context.
	if (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;
			beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) {
		beanFactory.setConversionService(
				beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));
	}

	// Register a default embedded value resolver if no bean post-processor
	// (such as a PropertyPlaceholderConfigurer bean) registered any before:
	// at this point, primarily for resolution in annotation attribute values.
	if (!beanFactory.hasEmbeddedValueResolver()) {
		beanFactory.addEmbeddedValueResolver(new StringValueResolver() {
			@Override
			public String resolveStringValue(String strVal) {
				return getEnvironment().resolvePlaceholders(strVal);
			}
		});
	}

	// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.
	String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
	for (String weaverAwareName : weaverAwareNames) {
		getBean(weaverAwareName);
	}

	// Stop using the temporary ClassLoader for type matching.
	beanFactory.setTempClassLoader(null);

	// Allow for caching all bean definition metadata, not expecting further changes.
	beanFactory.freezeConfiguration();

	// Instantiate all remaining (non-lazy-init) singletons.
	//实例化所有剩下的非懒加载的单实例bean
	beanFactory.preInstantiateSingletons();
}
</code></pre>
<p>这个步骤中尤其重要，他的preInstantiateSingletons会实例化所有非懒加载的单实例bean</p>
<h2 id="2-实例化所有非懒加载的单实例bean">2. 实例化所有非懒加载的单实例bean</h2>
<h3 id="21-获取所有beanname一个个创建">2.1. 获取所有BeanName，一个个创建</h3>
<ul>
<li>DefaultListableBeanFactory preInstantiateSingletons</li>
</ul>
<pre><code class="language-java">public void preInstantiateSingletons() throws BeansException {
	if (logger.isDebugEnabled()) {
		logger.debug("Pre-instantiating singletons in " + this);
	}

	// Iterate over a copy to allow for init methods which in turn register new bean definitions.
	// While this may not be part of the regular factory bootstrap, it does otherwise work fine.
	List&lt;String&gt; beanNames = new ArrayList&lt;String&gt;(this.beanDefinitionNames);

	// Trigger initialization of all non-lazy singleton beans...
	//遍历所有bean名
	for (String beanName : beanNames) {
		//封装成RootBeanDefinition
		RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);
		//不是抽象的、是单例的、不是懒加载的
		if (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) {
			//是FactoryBean类型的（Spring提供的工厂模式，有一个getObject创建bean）
			if (isFactoryBean(beanName)) {
				final FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) getBean(FACTORY_BEAN_PREFIX + beanName);
				boolean isEagerInit;
				if (System.getSecurityManager() != null &amp;&amp; factory instanceof SmartFactoryBean) {
					isEagerInit = AccessController.doPrivileged(new PrivilegedAction&lt;Boolean&gt;() {
						@Override
						public Boolean run() {
							return ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit();
						}
					}, getAccessControlContext());
				}
				else {
					isEagerInit = (factory instanceof SmartFactoryBean &amp;&amp;
							((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());
				}
				if (isEagerInit) {
					getBean(beanName);
				}
			}
			//不是FactoryBean
			else {
				//调用AbstractBeanFactory的getBean
				getBean(beanName);
			}
		}
	}

	// Trigger post-initialization callback for all applicable beans...
	//遍历所有bean
	for (String beanName : beanNames) {
		Object singletonInstance = getSingleton(beanName);
		//如果这个bean是SmartInitializingSingleton类型的
		if (singletonInstance instanceof SmartInitializingSingleton) {
			final SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;
			if (System.getSecurityManager() != null) {
				AccessController.doPrivileged(new PrivilegedAction&lt;Object&gt;() {
					@Override
					public Object run() {
						smartSingleton.afterSingletonsInstantiated();
						return null;
					}
				}, getAccessControlContext());
			}
			else {
				//调用其afterSingletonsInstantiated方法
				smartSingleton.afterSingletonsInstantiated();
			}
		}
	}
}
</code></pre>
<h3 id="22-创建单个bean">2.2. 创建单个bean</h3>
<ul>
<li>AbstractBeanFactory getBean</li>
</ul>
<pre><code class="language-java">@Override
public Object getBean(String name) throws BeansException {
//传入beanName
return doGetBean(name, null, null, false);
}
</code></pre>
<h3 id="23-看看之前创建bean有木有没有再去创建不是缓存而是之前步骤创建的bean">2.3. 看看之前创建bean有木有，没有再去创建【不是缓存，而是之前步骤创建的Bean】</h3>
<ul>
<li>doGetBean</li>
</ul>
<pre><code class="language-java">protected &lt;T&gt; T doGetBean(
		final String name, final Class&lt;T&gt; requiredType, final Object[] args, boolean typeCheckOnly)
		throws BeansException {

	final String beanName = transformedBeanName(name);
	Object bean;

	// Eagerly check singleton cache for manually registered singletons.
	//从之前预加载的bean中获取
	Object sharedInstance = getSingleton(beanName);
	if (sharedInstance != null &amp;&amp; args == null) {
		if (logger.isDebugEnabled()) {
			if (isSingletonCurrentlyInCreation(beanName)) {
				logger.debug("Returning eagerly cached instance of singleton bean '" + beanName +
						"' that is not fully initialized yet - a consequence of a circular reference");
			}
			else {
				logger.debug("Returning cached instance of singleton bean '" + beanName + "'");
			}
		}
		//之前预加载的bean中有
		bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);
	}
	//之前预加载的bean中没有
	else {
		// Fail if we're already creating this bean instance:
		// We're assumably within a circular reference.
		if (isPrototypeCurrentlyInCreation(beanName)) {
			throw new BeanCurrentlyInCreationException(beanName);
		}

		// Check if bean definition exists in this factory.
		//通过父BeanFactory获取bean
		BeanFactory parentBeanFactory = getParentBeanFactory();
		if (parentBeanFactory != null &amp;&amp; !containsBeanDefinition(beanName)) {
			// Not found -&gt; check parent.
			String nameToLookup = originalBeanName(name);
			if (args != null) {
				// Delegation to parent with explicit args.
				return (T) parentBeanFactory.getBean(nameToLookup, args);
			}
			else {
				// No args -&gt; delegate to standard getBean method.
				return parentBeanFactory.getBean(nameToLookup, requiredType);
			}
		}

		if (!typeCheckOnly) {
			//标记当前bean已创建
			markBeanAsCreated(beanName);
		}

		try {
			final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);
			checkMergedBeanDefinition(mbd, beanName, args);

			// Guarantee initialization of beans that the current bean depends on.
			//获取当前bean依赖的其他bean 指的是@DependsOn("。。。。")
			String[] dependsOn = mbd.getDependsOn();
			if (dependsOn != null) {
				//遍历其他bean
				for (String dep : dependsOn) {
					//如果其他bean也依赖当前bean
					if (isDependent(beanName, dep)) {
					//抛出循环依赖异常
						throw new BeanCreationException(mbd.getResourceDescription(), beanName,
								"Circular depends-on relationship between '" + beanName + "' and '" + dep + "'");
					}
					//注册依赖bean
					registerDependentBean(dep, beanName);
					//获取依赖bean，获取不到则抛出不存在的异常
					try {
						getBean(dep);
					}
					catch (NoSuchBeanDefinitionException ex) {
						throw new BeanCreationException(mbd.getResourceDescription(), beanName,
								"'" + beanName + "' depends on missing bean '" + dep + "'", ex);
					}
				}
			}
			
			//单实例的
			// Create bean instance.
			if (mbd.isSingleton()) {
				//回调第二个参数的getObject方法，最后调用createBean方法创建bean
				sharedInstance = getSingleton(beanName, new ObjectFactory&lt;Object&gt;() {
					@Override
					public Object getObject() throws BeansException {
						try {
						    //创建bean实例
							return createBean(beanName, mbd, args);
						}
						//创建失败销毁bean
						catch (BeansException ex) {
							// Explicitly remove instance from singleton cache: It might have been put there
							// eagerly by the creation process, to allow for circular reference resolution.
							// Also remove any beans that received a temporary reference to the bean.
							destroySingleton(beanName);
							throw ex;
						}
					}
				});
				bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
			}
			//prototype的
			else if (mbd.isPrototype()) {
				// It's a prototype -&gt; create a new instance.
				Object prototypeInstance = null;
				try {
					beforePrototypeCreation(beanName);
					prototypeInstance = createBean(beanName, mbd, args);
				}
				finally {
					afterPrototypeCreation(beanName);
				}
				bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
			}
			//其他的：session等
			else {
				String scopeName = mbd.getScope();
				final Scope scope = this.scopes.get(scopeName);
				if (scope == null) {
					throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");
				}
				try {
					Object scopedInstance = scope.get(beanName, new ObjectFactory&lt;Object&gt;() {
						@Override
						public Object getObject() throws BeansException {
							beforePrototypeCreation(beanName);
							try {
								return createBean(beanName, mbd, args);
							}
							finally {
								afterPrototypeCreation(beanName);
							}
						}
					});
					bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
				}
				catch (IllegalStateException ex) {
					throw new BeanCreationException(beanName,
							"Scope '" + scopeName + "' is not active for the current thread; consider " +
							"defining a scoped proxy for this bean if you intend to refer to it from a singleton",
							ex);
				}
			}
		}
		catch (BeansException ex) {
			cleanupAfterBeanCreationFailure(beanName);
			throw ex;
		}
	}

	// Check if required type matches the type of the actual bean instance.
	if (requiredType != null &amp;&amp; bean != null &amp;&amp; !requiredType.isInstance(bean)) {
		try {
			return getTypeConverter().convertIfNecessary(bean, requiredType);
		}
		catch (TypeMismatchException ex) {
			if (logger.isDebugEnabled()) {
				logger.debug("Failed to convert bean '" + name + "' to required type '" +
						ClassUtils.getQualifiedName(requiredType) + "'", ex);
			}
			throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());
		}
	}
	return (T) bean;
}
</code></pre>
<h3 id="24-从缓存中获取没有再创建">2.4. 从缓存中获取，没有再创建</h3>
<ul>
<li>DefaultSingletonBeanRegistry getSingleton</li>
</ul>
<pre><code class="language-java">public Object getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory) {
	Assert.notNull(beanName, "'beanName' must not be null");
	//加锁
	synchronized (this.singletonObjects) {
		//从缓存map中获取
		Object singletonObject = this.singletonObjects.get(beanName);
		if (singletonObject == null) {
			if (this.singletonsCurrentlyInDestruction) {
				throw new BeanCreationNotAllowedException(beanName,
						"Singleton bean creation not allowed while singletons of this factory are in destruction " +
						"(Do not request a bean from a BeanFactory in a destroy method implementation!)");
			}
			if (logger.isDebugEnabled()) {
				logger.debug("Creating shared instance of singleton bean '" + beanName + "'");
			}
			//bean创建之前调用
			beforeSingletonCreation(beanName);
			boolean newSingleton = false;
			boolean recordSuppressedExceptions = (this.suppressedExceptions == null);
			if (recordSuppressedExceptions) {
				this.suppressedExceptions = new LinkedHashSet&lt;Exception&gt;();
			}
			try {
				//通过beanFactory创建bean
				singletonObject = singletonFactory.getObject();
				newSingleton = true;
			}
			catch (IllegalStateException ex) {
				// Has the singleton object implicitly appeared in the meantime -&gt;
				// if yes, proceed with it since the exception indicates that state.
				singletonObject = this.singletonObjects.get(beanName);
				if (singletonObject == null) {
					throw ex;
				}
			}
			catch (BeanCreationException ex) {
				if (recordSuppressedExceptions) {
					for (Exception suppressedException : this.suppressedExceptions) {
						ex.addRelatedCause(suppressedException);
					}
				}
				throw ex;
			}
			finally {
				if (recordSuppressedExceptions) {
					this.suppressedExceptions = null;
				}
				//bean创建之后调用
				afterSingletonCreation(beanName);
			}
			if (newSingleton) {
				//把新创建的bean放入map中（ioc容器）
				addSingleton(beanName, singletonObject);
			}
		}
		return (singletonObject != NULL_OBJECT ? singletonObject : null);
	}
}
</code></pre>
<h3 id="25-先看看能不能返回代理对象不能再创建">2.5. 先看看能不能返回代理对象，不能再创建</h3>
<ul>
<li>AbstractAutowireCapableBeanFactory createBean</li>
</ul>
<pre><code class="language-java">protected Object createBean(String beanName, RootBeanDefinition mbd, Object[] args) throws BeanCreationException {
	if (logger.isDebugEnabled()) {
		logger.debug("Creating instance of bean '" + beanName + "'");
	}
	//bean的定义
	RootBeanDefinition mbdToUse = mbd;

	// Make sure bean class is actually resolved at this point, and
	// clone the bean definition in case of a dynamically resolved Class
	// which cannot be stored in the shared merged bean definition.
	//拿到bean的类型
	Class&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);
	if (resolvedClass != null &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != null) {
		mbdToUse = new RootBeanDefinition(mbd);
		mbdToUse.setBeanClass(resolvedClass);
	}

	// Prepare method overrides.
	try {
		mbdToUse.prepareMethodOverrides();
	}
	catch (BeanDefinitionValidationException ex) {
		throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(),
				beanName, "Validation of method overrides failed", ex);
	}

	try {
		// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.
		//这里BeanPostProcessor可以返回代理对象
		Object bean = resolveBeforeInstantiation(beanName, mbdToUse);
		if (bean != null) {
			return bean;
		}
	}
	catch (Throwable ex) {
		throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName,
				"BeanPostProcessor before instantiation of bean failed", ex);
	}

	//真正创建bean
	Object beanInstance = doCreateBean(beanName, mbdToUse, args);
	if (logger.isDebugEnabled()) {
		logger.debug("Finished creating instance of bean '" + beanName + "'");
	}
	return beanInstance;
}
</code></pre>
<h4 id="251-从代理对象中获取">2.5.1. 从代理对象中获取</h4>
<h5 id="2511-第一次创建业务bean进到这里的时候并不会返回代理对象">2.5.1.1. 第一次创建业务bean进到这里的时候并不会返回代理对象</h5>
<p>举个例子，如果我们有一个业务Bean叫Calc，他的代理Bean叫CalcProxy</p>
<ul>
<li>
<p>第一次从容器中获取Calc Bean的场景</p>
<ul>
<li>从容器中获取Calc Bean</li>
<li>进入到这里的时候既没有Bean Calc也没有Bean CalcProxy，所以不会返回代理bean</li>
<li>真正创建业务Bean Calc</li>
<li>然后调用<code>执行所有PostProcessor的postProcessAfterInitialization方法</code>创建代理对象</li>
</ul>
</li>
<li>
<p>第二次从容器中获取Calc Bean的场景</p>
<ul>
<li>从容器中获取Calc Bean</li>
<li>由于容器中没有，需要先创建业务Bean Calc</li>
<li>进入到这里的时候已经有了代理Bean CalcProxy，返回</li>
</ul>
</li>
<li>
<p>resolveBeforeInstantiation</p>
</li>
</ul>
<pre><code class="language-java">protected Object resolveBeforeInstantiation(String beanName, RootBeanDefinition mbd) {
	Object bean = null;
	if (!Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) {
		// Make sure bean class is actually resolved at this point.
		//调用AbstractBeanFactory的hasInstantiationAwareBeanPostProcessors方法查看是否包含InstantiationAwareBeanPostProcessors类型的PostProcessor
		if (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) {
			Class&lt;?&gt; targetType = determineTargetType(beanName, mbd);
			if (targetType != null) {
				//调用InstantiationAwareBeanPostProcessor类型的postProcessBeforeInstantiation方法获取代理对象
				bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);
				if (bean != null) {
					//代理对象不为空那么调用postProcessAfterInitialization方法操作bean
					bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);
				}
			}
		}
		mbd.beforeInstantiationResolved = (bean != null);
	}
	return bean;
}
</code></pre>
<p>通过调用InstantiationAwareBeanPostProcessor类型的postProcessBeforeInstantiation方法获取代理对象，有的话再调用postProcessAfterInitialization方法操作bean，并返回</p>
<h5 id="2512-在实例化之前调用">2.5.1.2. 在实例化之前调用</h5>
<ul>
<li>applyBeanPostProcessorsBeforeInstantiation</li>
</ul>
<pre><code class="language-java">protected Object applyBeanPostProcessorsBeforeInstantiation(Class&lt;?&gt; beanClass, String beanName) {
	//遍历所有BeanPostProcessor
	for (BeanPostProcessor bp : getBeanPostProcessors()) {
		//如果是InstantiationAwareBeanPostProcessor类型的
		if (bp instanceof InstantiationAwareBeanPostProcessor) {
			InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;
			//那么调用postProcessBeforeInstantiation方法获取代理对象
			Object result = ibp.postProcessBeforeInstantiation(beanClass, beanName);
			if (result != null) {
				return result;
			}
		}
	}
	return null;
}
</code></pre>
<h5 id="2513-如果有代理对象那么调用">2.5.1.3. 如果有代理对象那么调用</h5>
<ul>
<li>applyBeanPostProcessorsAfterInitialization</li>
</ul>
<pre><code class="language-java">public Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)
		throws BeansException {

	Object result = existingBean;
	//遍历所有BeanPostProcessor
	for (BeanPostProcessor processor : getBeanPostProcessors()) {
		//调用postProcessAfterInitialization方法操作bean	
		result = processor.postProcessAfterInitialization(result, beanName);
		if (result == null) {
			return result;
		}
	}
	return result;
}
</code></pre>
<h3 id="26-真正创建bean实例">2.6. 真正创建bean实例</h3>
<ul>
<li>doCreateBean</li>
</ul>
<pre><code class="language-java">protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args)
		throws BeanCreationException {

	// Instantiate the bean.
	BeanWrapper instanceWrapper = null;
	if (mbd.isSingleton()) {
		instanceWrapper = this.factoryBeanInstanceCache.remove(beanName);
	}
	if (instanceWrapper == null) {
		//创建bean对象
		instanceWrapper = createBeanInstance(beanName, mbd, args);
	}
	final Object bean = (instanceWrapper != null ? instanceWrapper.getWrappedInstance() : null);
	Class&lt;?&gt; beanType = (instanceWrapper != null ? instanceWrapper.getWrappedClass() : null);
	mbd.resolvedTargetType = beanType;

	// Allow post-processors to modify the merged bean definition.
	synchronized (mbd.postProcessingLock) {
		if (!mbd.postProcessed) {
			try {
				//调用MergedBeanDefinitionPostProcessor的postProcessMergedBeanDefinition方法
				applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
			}
			catch (Throwable ex) {
				throw new BeanCreationException(mbd.getResourceDescription(), beanName,
						"Post-processing of merged bean definition failed", ex);
			}
			mbd.postProcessed = true;
		}
	}

	// Eagerly cache singletons to be able to resolve circular references
	// even when triggered by lifecycle interfaces like BeanFactoryAware.
	boolean earlySingletonExposure = (mbd.isSingleton() &amp;&amp; this.allowCircularReferences &amp;&amp;
			isSingletonCurrentlyInCreation(beanName));
	if (earlySingletonExposure) {
		if (logger.isDebugEnabled()) {
			logger.debug("Eagerly caching bean '" + beanName +
					"' to allow for resolving potential circular references");
		}
		addSingletonFactory(beanName, new ObjectFactory&lt;Object&gt;() {
			@Override
			public Object getObject() throws BeansException {
				return getEarlyBeanReference(beanName, mbd, bean);
			}
		});
	}

	// Initialize the bean instance.
	Object exposedObject = bean;
	try {
		//为bean的属性赋值
		populateBean(beanName, mbd, instanceWrapper);
		if (exposedObject != null) {
			//初始化bean
			exposedObject = initializeBean(beanName, exposedObject, mbd);
		}
	}
	catch (Throwable ex) {
		if (ex instanceof BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) {
			throw (BeanCreationException) ex;
		}
		else {
			throw new BeanCreationException(
					mbd.getResourceDescription(), beanName, "Initialization of bean failed", ex);
		}
	}

	if (earlySingletonExposure) {
		Object earlySingletonReference = getSingleton(beanName, false);
		if (earlySingletonReference != null) {
			if (exposedObject == bean) {
				exposedObject = earlySingletonReference;
			}
			else if (!this.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) {
				String[] dependentBeans = getDependentBeans(beanName);
				Set&lt;String&gt; actualDependentBeans = new LinkedHashSet&lt;String&gt;(dependentBeans.length);
				for (String dependentBean : dependentBeans) {
					if (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {
						actualDependentBeans.add(dependentBean);
					}
				}
				if (!actualDependentBeans.isEmpty()) {
					throw new BeanCurrentlyInCreationException(beanName,
							"Bean with name '" + beanName + "' has been injected into other beans [" +
							StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +
							"] in its raw version as part of a circular reference, but has eventually been " +
							"wrapped. This means that said other beans do not use the final version of the " +
							"bean. This is often the result of over-eager type matching - consider using " +
							"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example.");
				}
			}
		}
	}

	// Register bean as disposable.
	try {
		//注册bean的销毁方法，registerDisposableBeanIfNecessary
		不是调用(beanName, bean, mbd);
	}
	catch (BeanDefinitionValidationException ex) {
		throw new BeanCreationException(
				mbd.getResourceDescription(), beanName, "Invalid destruction signature", ex);
	}

	return exposedObject;
}
</code></pre>
<p>创建实例的时候分成以下几个步骤</p>
<ol>
<li>创建bean实例</li>
<li>为bean的属性赋值</li>
<li>初始化bean</li>
</ol>
<h4 id="261-创建bean实例">2.6.1. 创建bean实例</h4>
<ul>
<li>createBeanInstance</li>
</ul>
<pre><code class="language-java">protected BeanWrapper createBeanInstance(String beanName, RootBeanDefinition mbd, Object[] args) {
	// Make sure bean class is actually resolved at this point.
	//获取bean的类型
	Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);

	if (beanClass != null &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) {
		throw new BeanCreationException(mbd.getResourceDescription(), beanName,
				"Bean class isn't public, and non-public access not allowed: " + beanClass.getName());
	}

	//使用工厂方法创建bean
	if (mbd.getFactoryMethodName() != null) {
		return instantiateUsingFactoryMethod(beanName, mbd, args);
	}

	// Shortcut when re-creating the same bean...
	//调用bean的有参构造方法
	boolean resolved = false;
	boolean autowireNecessary = false;
	if (args == null) {
		synchronized (mbd.constructorArgumentLock) {
			if (mbd.resolvedConstructorOrFactoryMethod != null) {
				resolved = true;
				autowireNecessary = mbd.constructorArgumentsResolved;
			}
		}
	}
	if (resolved) {
		if (autowireNecessary) {
			return autowireConstructor(beanName, mbd, null, null);
		}
		else {
			return instantiateBean(beanName, mbd);
		}
	}

	// Candidate constructors for autowiring?
	Constructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);
	if (ctors != null || mbd.getResolvedAutowireMode() == AUTOWIRE_CONSTRUCTOR ||
			mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args)) {
		return autowireConstructor(beanName, mbd, ctors, args);
	}

	// No special handling: simply use no-arg constructor.
	//调用bean的无参构造方法
	return instantiateBean(beanName, mbd);
}
</code></pre>
<h4 id="262-为bean的属性赋值">2.6.2. 为bean的属性赋值</h4>
<ul>
<li>populateBean</li>
</ul>
<pre><code class="language-java">protected void populateBean(String beanName, RootBeanDefinition mbd, BeanWrapper bw) {
	//拿到所有的属性值
	PropertyValues pvs = mbd.getPropertyValues();

	if (bw == null) {
		if (!pvs.isEmpty()) {
			throw new BeanCreationException(
					mbd.getResourceDescription(), beanName, "Cannot apply property values to null instance");
		}
		else {
			// Skip property population phase for null instance.
			return;
		}
	}

	// Give any InstantiationAwareBeanPostProcessors the opportunity to modify the
	// state of the bean before properties are set. This can be used, for example,
	// to support styles of field injection.
	boolean continueWithPropertyPopulation = true;

	//有InstantiationAwareBeanPostProcessor类型的PostProcessor
	if (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) {
		//遍历所有PostProcessor
		for (BeanPostProcessor bp : getBeanPostProcessors()) {
			//调用InstantiationAwareBeanPostProcessor的postProcessAfterInstantiation方法
			if (bp instanceof InstantiationAwareBeanPostProcessor) {
				InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;
				if (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) {
					continueWithPropertyPopulation = false;
					break;
				}
			}
		}
	}

	if (!continueWithPropertyPopulation) {
		return;
	}

	if (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME ||
			mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) {
		MutablePropertyValues newPvs = new MutablePropertyValues(pvs);

		// Add property values based on autowire by name if applicable.
		if (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME) {
			autowireByName(beanName, mbd, bw, newPvs);
		}

		// Add property values based on autowire by type if applicable.
		if (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) {
			autowireByType(beanName, mbd, bw, newPvs);
		}

		pvs = newPvs;
	}

	boolean hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();
	boolean needsDepCheck = (mbd.getDependencyCheck() != RootBeanDefinition.DEPENDENCY_CHECK_NONE);

	if (hasInstAwareBpps || needsDepCheck) {
		PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
		if (hasInstAwareBpps) {
			//遍历所有PostProcessor
			for (BeanPostProcessor bp : getBeanPostProcessors()) {
				//调用InstantiationAwareBeanPostProcessor的postProcessPropertyValues方法
				if (bp instanceof InstantiationAwareBeanPostProcessor) {
					InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;
					pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);
					if (pvs == null) {
						return;
					}
				}
			}
		}
		if (needsDepCheck) {
			checkDependencies(beanName, mbd, filteredPds, pvs);
		}
	}
	//调用setter方法为属性赋值
	applyPropertyValues(beanName, mbd, bw, pvs);
}
</code></pre>
<p>属性赋值有三个操作</p>
<ul>
<li>调用InstantiationAwareBeanPostProcessor的postProcessAfterInstantiation方法</li>
<li>调用InstantiationAwareBeanPostProcessor的postProcessPropertyValues方法</li>
<li>调用setter方法为属性赋值</li>
</ul>
<h4 id="263-初始化bean">2.6.3. 初始化bean</h4>
<ul>
<li>initializeBean</li>
</ul>
<pre><code class="language-java">protected Object initializeBean(final String beanName, final Object bean, RootBeanDefinition mbd) {
	if (System.getSecurityManager() != null) {
		AccessController.doPrivileged(new PrivilegedAction&lt;Object&gt;() {
			@Override
			public Object run() {
				invokeAwareMethods(beanName, bean);
				return null;
			}
		}, getAccessControlContext());
	}
	else {
		//执行XXXAware接口的方法
		invokeAwareMethods(beanName, bean);
	}

	Object wrappedBean = bean;
	if (mbd == null || !mbd.isSynthetic()) {
		//执行所有PostProcessor的postProcessBeforeInitialization方法
		wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);
	}

	try {
		//调用自定义的初始化方法
		invokeInitMethods(beanName, wrappedBean, mbd);
	}
	catch (Throwable ex) {
		throw new BeanCreationException(
				(mbd != null ? mbd.getResourceDescription() : null),
				beanName, "Invocation of init method failed", ex);
	}
	if (mbd == null || !mbd.isSynthetic()) {
		//调用所有BeanPostProcessor的postProcessAfterInitialization方法
		wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);
	}
	return wrappedBean;
}
</code></pre>
<h5 id="2631-执行所有beanpostprocessor的postprocessbeforeinitialization方法">2.6.3.1. 执行所有BeanPostProcessor的postProcessBeforeInitialization方法</h5>
<ul>
<li>applyBeanPostProcessorsBeforeInitialization</li>
</ul>
<pre><code class="language-java">public Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)
		throws BeansException {

	Object result = existingBean;
	//遍历所有PostProcessor，调用postProcessBeforeInitialization方法
	for (BeanPostProcessor processor : getBeanPostProcessors()) {
		result = processor.postProcessBeforeInitialization(result, beanName);
		if (result == null) {
			return result;
		}
	}
	return result;
}
</code></pre>
<h5 id="2632-调用自定义的初始化方法initializingbean">2.6.3.2. 调用自定义的初始化方法【InitializingBean】</h5>
<ul>
<li>invokeInitMethods</li>
</ul>
<pre><code class="language-java">protected void invokeInitMethods(String beanName, final Object bean, RootBeanDefinition mbd)
		throws Throwable {

	//是InitializingBean对象
	boolean isInitializingBean = (bean instanceof InitializingBean);
	if (isInitializingBean &amp;&amp; (mbd == null || !mbd.isExternallyManagedInitMethod("afterPropertiesSet"))) {
		if (logger.isDebugEnabled()) {
			logger.debug("Invoking afterPropertiesSet() on bean with name '" + beanName + "'");
		}
		if (System.getSecurityManager() != null) {
			try {
				AccessController.doPrivileged(new PrivilegedExceptionAction&lt;Object&gt;() {
					@Override
					public Object run() throws Exception {
						((InitializingBean) bean).afterPropertiesSet();
						return null;
					}
				}, getAccessControlContext());
			}
			catch (PrivilegedActionException pae) {
				throw pae.getException();
			}
		}
		else {
			//调用bean的afterPropertiesSet方法
			((InitializingBean) bean).afterPropertiesSet();
		}
	}

	if (mbd != null) {
		String initMethodName = mbd.getInitMethodName();
		if (initMethodName != null &amp;&amp; !(isInitializingBean &amp;&amp; "afterPropertiesSet".equals(initMethodName)) &amp;&amp;
				!mbd.isExternallyManagedInitMethod(initMethodName)) {
			//执行自定义的初始化方法
			invokeCustomInitMethod(beanName, bean, mbd);
		}
	}
}
</code></pre>
<h5 id="2633-调用所有beanpostprocessor的postprocessafterinitialization方法">2.6.3.3. 调用所有BeanPostProcessor的postProcessAfterInitialization方法</h5>
<p>这里会创建代理bean</p>
<ul>
<li>applyBeanPostProcessorsAfterInitialization</li>
</ul>
<pre><code class="language-java">public Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)
		throws BeansException {

	Object result = existingBean;
	//遍历所有BeanPostProcessor
	for (BeanPostProcessor processor : getBeanPostProcessors()) {
		//调用postProcessAfterInitialization方法
		result = processor.postProcessAfterInitialization(result, beanName);
		if (result == null) {
			return result;
		}
	}
	return result;
}
</code></pre>
<h4 id="264-注册bean的销毁方法">2.6.4. 注册bean的销毁方法</h4>
<ul>
<li>registerDisposableBeanIfNecessary</li>
</ul>
<pre><code class="language-java">protected void registerDisposableBeanIfNecessary(String beanName, Object bean, RootBeanDefinition mbd) {
	AccessControlContext acc = (System.getSecurityManager() != null ? getAccessControlContext() : null);
	if (!mbd.isPrototype() &amp;&amp; requiresDestruction(bean, mbd)) {
		if (mbd.isSingleton()) {
			// Register a DisposableBean implementation that performs all destruction
			// work for the given bean: DestructionAwareBeanPostProcessors,
			// DisposableBean interface, custom destroy method.
			registerDisposableBean(beanName,
					new DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc));
		}
		else {
			// A bean with a custom scope...
			Scope scope = this.scopes.get(mbd.getScope());
			if (scope == null) {
				throw new IllegalStateException("No Scope registered for scope name '" + mbd.getScope() + "'");
			}
			scope.registerDestructionCallback(beanName,
					new DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc));
		}
	}
}
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-04 21:24">2025-07-04 21:23</span>&nbsp;
<a href="https://www.cnblogs.com/ThinkerQAQ">ThinkerQAQ</a>&nbsp;
阅读(<span id="post_view_count">26</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18966188);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18966188', targetLink: 'https://www.cnblogs.com/ThinkerQAQ/p/18966188', title: '10.Java Spring框架源码分析-IOC-实例化所有非懒加载的单实例bean' })">举报</a>
</div>
        