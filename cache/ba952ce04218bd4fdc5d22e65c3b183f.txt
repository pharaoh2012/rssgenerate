
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/noear/p/19046830" title="发布于 2025-08-19 15:46">
    <span role="heading" aria-level="2">Java MCP 的鉴权？好简单的啦</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        MCP鉴权可通过多种方式实现，关键取决于工具选择。客户端可通过queryString、header或env传递token，solon-ai-mcp框架提供了简洁的配置方式。服务端支持三种鉴权方案：1)各工具单独鉴权（适用于所有传输方式）；2)HTTP类传输的集中鉴权；3)程序启动时鉴权（适用于stdio）。使用solon-ai-mcp可简化鉴权流程，通过注解或过滤器灵活实现权限控制。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>听说 mcp 的鉴权，是件很麻烦的事情？估计是没选好工具。</p>
<h2 id="一mcp-client-侧负责传递比较简单">一、MCP Client 侧（负责传递，比较简单）</h2>
<p>在客户端，一般是使用 queryString 或者 header 或者 env（stdio 方式用） 传递鉴权信息，比如变量：token（名字随便取）</p>
<h3 id="1常见的-mcpservers-json-配置方式">（1）常见的 mcpServers json 配置方式</h3>
<p>不同服务平台，mcpServers json 的配置格式可能会略有不同。具体需要按服务平台要求配置。</p>
<ul>
<li>使用 queryString 传递（http 类传输方式）</li>
</ul>
<pre><code class="language-json">{
    "mcpServers": {
        "demo": {
            "type":"sse"
            "url": "https://localhost:8080/mcp?token=xxxx"
        }
    }
}
</code></pre>
<ul>
<li>使用 header 传递（http 类传输方式）</li>
</ul>
<pre><code class="language-json">{
    "mcpServers": {
        "demo": {
            "type":"streamable",
            "url": "https://localhost:8080/mcp",
            "headers": {"token":"xxx"}
        }
    }
}
</code></pre>
<ul>
<li>使用 env 传递（stdio 传输方式）</li>
</ul>
<pre><code class="language-json">{
    "mcpServers": {
        "demo": {
            "type":"stdio",
            "command":"java",
            "args": ["-jar", "/data/demo/target/demo-mcp-stdio.jar"]
            "env": {"token": "xxx"}
        }
    }
}
</code></pre>
<h3 id="2使用-solon-ai-mcp-作为客户端">（2）使用 solon-ai-mcp 作为客户端</h3>
<p>solon-ai-mcp 是比较简洁的 mcp java client 框架。它的体验与 mcpServers json 配置相差不大。</p>
<ul>
<li>使用 queryString 传递（http 类传输方式）</li>
</ul>
<pre><code class="language-java">import org.noear.solon.ai.mcp.client.McpClientProvider;

McpClientProvider mcpClient =  McpClientProvider.builder()
                .channel(McpChannel.SSE) //表示使用 sse 传输方式
                .apiUrl("https://localhost:8080/mcp?token=xxxx")
                .build();
                
//mcpClient.getTools();
</code></pre>
<ul>
<li>使用 header 传递（http 类传输方式）</li>
</ul>
<pre><code class="language-java">import org.noear.solon.ai.mcp.client.McpClientProvider;

McpClientProvider mcpClient =  McpClientProvider.builder()
                .channel(McpChannel.STREAMABLE) //表示使用 streamable 传输方式
                .apiUrl("https://localhost:8080/mcp")
                .headerSet("token", "xxxx")
                .build(); 
                
//mcpClient.getTools();
</code></pre>
<ul>
<li>使用 env 传递（stdio 传输方式）</li>
</ul>
<pre><code class="language-java">import org.noear.solon.ai.mcp.client.McpClientProvider;

McpClientProvider mcpClient = McpClientProvider.builder()
                .channel(McpChannel.STDIO) //表示使用 stdio 传输方式
                .serverParameters(McpServerParameters.builder("java")
                        .args("-jar", "/data/demo/target/demo-mcp-stdio.jar")
                        .addEnvVar("token","xxx")
                        .build())
                .build();
                                
//mcpClient.getTools();
</code></pre>
<ul>
<li>与 chatModel 结合使用示例：</li>
</ul>
<pre><code class="language-java">import org.noear.solon.ai.chat.ChatModel;
import org.noear.solon.ai.chat.ChatResponse;

ChatModel chatModel = ChatModel.of(apiUrl).provider(provider).model(model)
                .defaultToolsAdd(mcpClient) //重点是这一行
                .build();

ChatResponse resp = chatModel
        .prompt("今天杭州的天气情况？")
        .call();
</code></pre>
<h2 id="二mcp-server-侧也好简单的">二、MCP Server 侧（也好简单的）</h2>
<h3 id="1方式1每个工具各自鉴权适合-stdiossestreamable-三种传输方式">（1）方式1：每个工具各自鉴权（适合 <code>stdio</code>，<code>sse</code>，<code>streamable</code> 三种传输方式）</h3>
<p>在 solon-ai-mcp 里，可以使用 <code>@Header</code> 注解，获取 mcp 连接的元信息（比如 queryString、header、env）</p>
<pre><code class="language-java">import org.noear.solon.ai.annotation.ToolMapping;
import org.noear.solon.ai.mcp.McpChannel;
import org.noear.solon.ai.mcp.server.annotation.McpServerEndpoint;
import org.noear.solon.annotation.Header;
import org.noear.solon.annotation.Param;

@McpServerEndpoint(channel = McpChannel.STREAMABLE, mcpEndpoint = "/mcp")
public class McpServerTool {
    @ToolMapping(description = "你好世界")
    public String hello(@Param(name="name", description = "名字") String name, @Header("token") String token) {
        if(token == null) {
            throw new IllegalArgumentException("你没有权限哦!");
        }

        return "你好，" + name;
    }
}
</code></pre>
<h3 id="2方式2为-http-传输的所有工具集中鉴权适合-ssestreamable-http类的传输方式">（2）方式2：为 http 传输的所有工具集中鉴权（适合 <code>sse</code>，<code>streamable</code> http类的传输方式）</h3>
<p>solon-ai-mcp 也可以通过过滤器（Filter），实现单点鉴权。</p>
<pre><code class="language-java">@Managed
public class McpServerTool implements Filter {
    @Override
    public void doFilter(Context ctx, FilterChain chain) throws Throwable {
        if (ctx.pathNew().equals("/mcp")) {
            String token = ctx.header("token"); //支持从 header 取
            if (token == null) {
                token = ctx.param("token"); //支持从 queryString 取
            }

            if (token == null) {
                ctx.status(401, "你没有权限哦!");
                return;
            }
        }

        chain.doFilter(ctx);
    }
}
</code></pre>
<h3 id="3方式3程序启动时鉴权适合-stdio-传输方式">（3）方式3：程序启动时鉴权（适合 <code>stdio</code> 传输方式）</h3>
<pre><code class="language-java">@SolonMain
public class McpApp {
    public static void main(String[] args) {
        String token = System.getenv("token");
        if (Utils.isEmpty(token)) {
            throw new RuntimeException("你没有权限哦");
        }

        Solon.start(McpApp.class, args);
    }
}
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-19 15:46">2025-08-19 15:46</span>&nbsp;
<a href="https://www.cnblogs.com/noear">带刺的坐椅</a>&nbsp;
阅读(<span id="post_view_count">181</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19046830);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19046830', targetLink: 'https://www.cnblogs.com/noear/p/19046830', title: 'Java MCP 的鉴权？好简单的啦' })">举报</a>
</div>
        