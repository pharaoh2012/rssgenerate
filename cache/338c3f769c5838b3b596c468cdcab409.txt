<!----> <meta itemprop="headline" content="前端适配：你一般用哪种方案？"> <meta itemprop="keywords" content="前端,响应式设计,交互设计"> <meta itemprop="datePublished" content="2024-11-01T07:11:05.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="zykk"> <meta itemprop="url" content="https://juejin.cn/user/2740441517398525"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-7cdd11fb="">
            前端适配：你一般用哪种方案？
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-7cdd11fb=""><div class="author-info-box" data-v-7cdd11fb=""><div class="author-name" data-v-7cdd11fb=""><a href="/user/2740441517398525/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-7cdd11fb=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    zykk
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-7cdd11fb=""><time datetime="2024-11-01T07:11:05.000Z" title="Fri Nov 01 2024 07:11:05 GMT+0000 (Coordinated Universal Time)" class="time" data-v-7cdd11fb="">
                    2024-11-01
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-7cdd11fb=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-7cdd11fb=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-7cdd11fb=""></circle></svg> <span class="views-count" data-v-7cdd11fb="">
                    16,226
                  </span> <span class="read-time" data-v-7cdd11fb=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-7cdd11fb=""><rect width="16" height="16" fill="none" data-v-7cdd11fb=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-7cdd11fb=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-7cdd11fb=""></path></svg>
                    阅读4分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-7cdd11fb=""></div> <!----> <!----></div> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-7cdd11fb=""><div class="article-viewer markdown-body result"><h2 data-id="heading-0">前言</h2>
<p>最近在公司改bug，突然发现上一个前端留下的毛病不少，页面存在各种适配问题，为此甲方爸爸时常提出宝贵意见！</p>
<p>你的页面是不是时常是这样：</p>
<p>侧边栏未收缩时：
<img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/8128ddffe15945538bb66e8119fd6792~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenlraw==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1737670701&amp;x-signature=Q1RR0GAPtBi4kbHUMIXP%2BLGXjdU%3D" alt="image.png" loading="lazy"></p>
<p>收缩后：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c803dff136bd4139b1fc1597cb577c69~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenlraw==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1737670701&amp;x-signature=o5lsUd9MBdpOJ4IkiM5QwvqsqG8%3D" alt="image.png" loading="lazy"></p>
<p>这样（缩小挤成一坨）：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/bc3ace8d37d047af9c23b80d32c8617b~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenlraw==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1737670701&amp;x-signature=VNbiKwHE9smvPL%2FeQp3NeVkc5Zk%3D" alt="image.png" loading="lazy"></p>
<p>又或是这样：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/82b53b53a8424b39a923b7aa81f211e9~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenlraw==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1737670701&amp;x-signature=h6w6isCzNq0n3i%2FCbLhAcuGHcEQ%3D" alt="image.png" loading="lazy"></p>
<p>那么废话不多说，今天由我不是程序猿kk为大家讲解一些前端必备知识：适配工作。</p>
<h2 data-id="heading-1">流式布局</h2>
<p>学会利用相对单位（例如百分比，vh或是vw），而不是只会用px一类固定单位设计布局，前言中提到的收缩后多出一大块空白，就是由于写死了宽度，例如1000px或是89vw，那么当侧边栏进行收缩，右边内容宽度还是只有89个vw，因此我们可以将其更改为100%，这样不论侧边栏是否收缩，内容都会占满屏幕的全部。</p>
<pre><code class="hljs language-css" lang="css"><span class="hljs-selector-class">.map</span> {
  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;
  <span class="hljs-attribute">height</span>: <span class="hljs-number">90vh</span>;
  <span class="hljs-attribute">position</span>: relative;
}
</code></pre>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/824fad28e26840a0a3de68fca84ebade~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenlraw==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1737670701&amp;x-signature=LLACJpSLWKE1znQcWO%2FSWBQ4c8c%3D" alt="image.png" loading="lazy"></p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/87aa2194a8ff45dba60218a36d6f844e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenlraw==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1737670701&amp;x-signature=8St3xIr8tyjmhmc1eRMMpp4yLtA%3D" alt="image.png" loading="lazy"></p>
<h2 data-id="heading-2">rem和第三方插件</h2>
<h3 data-id="heading-3">什么是rem</h3>
<p><code>rem</code>与em不同，rem会根据html的根节点字体大小进行变换，例如1rem就是一个字体大小那么大，比如根大小<code>font size</code>为12px，那么1rem即12px，大家可以在网上寻找单位换算工具进行换算（从设计稿的px到rem）或是下载相关插件例如<code>gulp-px3rem</code>，这样在不同分辨率，不同缩放比的电脑下都能够轻松应对了。</p>
<h3 data-id="heading-4">使用</h3>
<p>第三方插件，例如做移动端适配的flexible.js，<code>lib-flexible库</code>，其核心原理就是rem,我们需要做的就是根据不同屏幕计算出不同的fontsize，而页面中元素都是用rem做单位，据此实现了自适应</p>
<p><code>源码：</code></p>
<pre><code class="hljs language-js" lang="js">;(<span class="hljs-keyword">function</span>(<span class="hljs-params">win, lib</span>) {
    <span class="hljs-keyword">var</span> doc = win.<span class="hljs-property">document</span>;
    <span class="hljs-keyword">var</span> docEl = doc.<span class="hljs-property">documentElement</span>;
    <span class="hljs-keyword">var</span> metaEl = doc.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">'meta[name="viewport"]'</span>);
    <span class="hljs-keyword">var</span> flexibleEl = doc.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">'meta[name="flexible"]'</span>);
    <span class="hljs-keyword">var</span> dpr = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">var</span> scale = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">var</span> tid;
    <span class="hljs-keyword">var</span> flexible = lib.<span class="hljs-property">flexible</span> || (lib.<span class="hljs-property">flexible</span> = {});
    
    <span class="hljs-keyword">if</span> (metaEl) {
        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">'将根据已有的meta标签来设置缩放比例'</span>);
        <span class="hljs-keyword">var</span> match = metaEl.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">'content'</span>).<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/initial-scale=([d.]+)/</span>);
        <span class="hljs-keyword">if</span> (match) {
            scale = <span class="hljs-built_in">parseFloat</span>(match[<span class="hljs-number">1</span>]);
            dpr = <span class="hljs-built_in">parseInt</span>(<span class="hljs-number">1</span> / scale);
        }
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (flexibleEl) {
        <span class="hljs-keyword">var</span> content = flexibleEl.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">'content'</span>);
        <span class="hljs-keyword">if</span> (content) {
            <span class="hljs-keyword">var</span> initialDpr = content.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/initial-dpr=([d.]+)/</span>);
            <span class="hljs-keyword">var</span> maximumDpr = content.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/maximum-dpr=([d.]+)/</span>);
            <span class="hljs-keyword">if</span> (initialDpr) {
                dpr = <span class="hljs-built_in">parseFloat</span>(initialDpr[<span class="hljs-number">1</span>]);
                scale = <span class="hljs-built_in">parseFloat</span>((<span class="hljs-number">1</span> / dpr).<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>));    
            }
            <span class="hljs-keyword">if</span> (maximumDpr) {
                dpr = <span class="hljs-built_in">parseFloat</span>(maximumDpr[<span class="hljs-number">1</span>]);
                scale = <span class="hljs-built_in">parseFloat</span>((<span class="hljs-number">1</span> / dpr).<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>));    
            }
        }
    }

    <span class="hljs-keyword">if</span> (!dpr &amp;&amp; !scale) {
        <span class="hljs-keyword">var</span> isAndroid = win.<span class="hljs-property">navigator</span>.<span class="hljs-property">appVersion</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/android/gi</span>);
        <span class="hljs-keyword">var</span> isIPhone = win.<span class="hljs-property">navigator</span>.<span class="hljs-property">appVersion</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/iphone/gi</span>);
        <span class="hljs-keyword">var</span> devicePixelRatio = win.<span class="hljs-property">devicePixelRatio</span>;
        <span class="hljs-keyword">if</span> (isIPhone) {
            <span class="hljs-comment">// iOS下，对于2和3的屏，用2倍的方案，其余的用1倍方案</span>
            <span class="hljs-keyword">if</span> (devicePixelRatio &gt;= <span class="hljs-number">3</span> &amp;&amp; (!dpr || dpr &gt;= <span class="hljs-number">3</span>)) {                
                dpr = <span class="hljs-number">3</span>;
            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (devicePixelRatio &gt;= <span class="hljs-number">2</span> &amp;&amp; (!dpr || dpr &gt;= <span class="hljs-number">2</span>)){
                dpr = <span class="hljs-number">2</span>;
            } <span class="hljs-keyword">else</span> {
                dpr = <span class="hljs-number">1</span>;
            }
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-comment">// 其他设备下，仍旧使用1倍的方案</span>
            dpr = <span class="hljs-number">1</span>;
        }
        scale = <span class="hljs-number">1</span> / dpr;
    }

    docEl.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">'data-dpr'</span>, dpr);
    <span class="hljs-keyword">if</span> (!metaEl) {
        metaEl = doc.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">'meta'</span>);
        metaEl.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">'name'</span>, <span class="hljs-string">'viewport'</span>);
        metaEl.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">'content'</span>, <span class="hljs-string">'initial-scale='</span> + scale + <span class="hljs-string">', maximum-scale='</span> + scale + <span class="hljs-string">', minimum-scale='</span> + scale + <span class="hljs-string">', user-scalable=no'</span>);
        <span class="hljs-keyword">if</span> (docEl.<span class="hljs-property">firstElementChild</span>) {
            docEl.<span class="hljs-property">firstElementChild</span>.<span class="hljs-title function_">appendChild</span>(metaEl);
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">var</span> wrap = doc.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">'div'</span>);
            wrap.<span class="hljs-title function_">appendChild</span>(metaEl);
            doc.<span class="hljs-title function_">write</span>(wrap.<span class="hljs-property">innerHTML</span>);
        }
    }

    <span class="hljs-keyword">function</span> <span class="hljs-title function_">refreshRem</span>(<span class="hljs-params"></span>){
        <span class="hljs-keyword">var</span> width = docEl.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">width</span>;
        <span class="hljs-keyword">if</span> (width / dpr &gt; <span class="hljs-number">540</span>) {
            width = <span class="hljs-number">540</span> * dpr;
        }
        <span class="hljs-keyword">var</span> rem = width / <span class="hljs-number">10</span>;
        docEl.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = rem + <span class="hljs-string">'px'</span>;
        flexible.<span class="hljs-property">rem</span> = win.<span class="hljs-property">rem</span> = rem;
    }

    win.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'resize'</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {
        <span class="hljs-built_in">clearTimeout</span>(tid);
        tid = <span class="hljs-built_in">setTimeout</span>(refreshRem, <span class="hljs-number">300</span>);
    }, <span class="hljs-literal">false</span>);
    win.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'pageshow'</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) {
        <span class="hljs-keyword">if</span> (e.<span class="hljs-property">persisted</span>) {
            <span class="hljs-built_in">clearTimeout</span>(tid);
            tid = <span class="hljs-built_in">setTimeout</span>(refreshRem, <span class="hljs-number">300</span>);
        }
    }, <span class="hljs-literal">false</span>);

    <span class="hljs-keyword">if</span> (doc.<span class="hljs-property">readyState</span> === <span class="hljs-string">'complete'</span>) {
        doc.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = <span class="hljs-number">12</span> * dpr + <span class="hljs-string">'px'</span>;
    } <span class="hljs-keyword">else</span> {
        doc.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'DOMContentLoaded'</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) {
            doc.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = <span class="hljs-number">12</span> * dpr + <span class="hljs-string">'px'</span>;
        }, <span class="hljs-literal">false</span>);
    }
    

    <span class="hljs-title function_">refreshRem</span>();

    flexible.<span class="hljs-property">dpr</span> = win.<span class="hljs-property">dpr</span> = dpr;
    flexible.<span class="hljs-property">refreshRem</span> = refreshRem;
    flexible.<span class="hljs-property">rem2px</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">d</span>) {
        <span class="hljs-keyword">var</span> val = <span class="hljs-built_in">parseFloat</span>(d) * <span class="hljs-variable language_">this</span>.<span class="hljs-property">rem</span>;
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> d === <span class="hljs-string">'string'</span> &amp;&amp; d.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/rem$/</span>)) {
            val += <span class="hljs-string">'px'</span>;
        }
        <span class="hljs-keyword">return</span> val;
    }
    flexible.<span class="hljs-property">px2rem</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">d</span>) {
        <span class="hljs-keyword">var</span> val = <span class="hljs-built_in">parseFloat</span>(d) / <span class="hljs-variable language_">this</span>.<span class="hljs-property">rem</span>;
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> d === <span class="hljs-string">'string'</span> &amp;&amp; d.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/px$/</span>)) {
            val += <span class="hljs-string">'rem'</span>;
        }
        <span class="hljs-keyword">return</span> val;
    }

})(<span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">window</span>[<span class="hljs-string">'lib'</span>] || (<span class="hljs-variable language_">window</span>[<span class="hljs-string">'lib'</span>] = {}));
</code></pre>
<p>大家如果对相关原理感兴趣，可以阅读：<a href="https://link.juejin.cn?target=http%3A%2F%2Fcaibaojian.com%2Fflexible-js-2.html" target="_blank" title="http://caibaojian.com/flexible-js-2.html" ref="nofollow noopener noreferrer">flexible.js如何实现rem自适应-前端开发博客</a></p>
<p>在实际开发中应用场景不同效果不同，因此不能写死px。</p>
<p>在PC端适配我们可以自动转换rem适配方案（postcss-pxtorem、amfe-flexible）,这里以vue3+vite为例子。事实上amfe-flexible是lib-flexible的升级版。</p>
<p><strong>注意：</strong> 行内样式px不会转化为rem</p>
<pre><code class="hljs language-bash" lang="bash">npm install postcss postcss-pxtorem --save-dev  // 我试过了反正我报错了，版本太高 大家可以指定5.1.1
npm install postcss-pxtorem@^5.1.1 
npm i amfe-flexible --save
</code></pre>
<p>记得在main.js中引入amfe-flexible</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">import</span> <span class="hljs-string">"amfe-flexible"</span>
</code></pre>
<p>相关配置</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/405f024d69d74e0a8c960a1d3578b471~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenlraw==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1737670701&amp;x-signature=%2B1YYFma34Cczu8vcxV1Yk9rwYhw%3D" alt="image.png" loading="lazy"></p>
<h2 data-id="heading-5">媒体查询</h2>
<p>通过查询不同的宽度来执行不同的css代码，最终以达到界面的配置。</p>
<p>在 CSS 中使用 <code>@media</code> 查询来检测屏幕宽度。当屏幕宽度小于 1024px 时，增加 <code>margin-top</code> 以向下移动表格。</p>
<pre><code class="hljs language-js" lang="js">
.<span class="hljs-property">responsive</span>-table {
  <span class="hljs-attr">transition</span>: margin-top <span class="hljs-number">0.</span>3s; <span class="hljs-comment">/* 添加过渡效果 */</span>
}

@media (max-<span class="hljs-attr">width</span>: 1024px) {
  .<span class="hljs-property">responsive</span>-table {
    margin-<span class="hljs-attr">top</span>: 200px; <span class="hljs-comment">/* 向下移动的距离 */</span>
  }
}
</code></pre>
<h2 data-id="heading-6">弹性布局</h2>
<p>创建一个响应式的卡片布局，当屏幕宽度减小时，卡片会自动换行。</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Flexbox Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">
        <span class="hljs-selector-tag">body</span> {
            <span class="hljs-attribute">display</span>: flex;
            <span class="hljs-attribute">justify-content</span>: center;
            <span class="hljs-attribute">align-items</span>: center;
            <span class="hljs-attribute">flex-wrap</span>: wrap;
            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;
            <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;
            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f0f0f0</span>;
        }

        <span class="hljs-selector-class">.card-container</span> {
            <span class="hljs-attribute">display</span>: flex;
            <span class="hljs-attribute">flex-wrap</span>: wrap;
            <span class="hljs-attribute">justify-content</span>: center;
            <span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;
        }

        <span class="hljs-selector-class">.card</span> {
            <span class="hljs-attribute">background-color</span>: white;
            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;
            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;
            <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;
            <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;
            <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">300px</span>; <span class="hljs-comment">/* 基于300px，允许增长和收缩 */</span>
            <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">10px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>);
            <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">0.3s</span>;
        }

        <span class="hljs-selector-class">.card</span><span class="hljs-selector-pseudo">:hover</span> {
            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">5px</span>);
        }
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card-container"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card"</span>&gt;</span>Card 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card"</span>&gt;</span>Card 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card"</span>&gt;</span>Card 3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card"</span>&gt;</span>Card 4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card"</span>&gt;</span>Card 5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>
</code></pre>
<h2 data-id="heading-7">小结</h2>
<p>还是多提一嘴，应该不会有小伙伴把字体大小的单位也用rem吧？</p></div></div>