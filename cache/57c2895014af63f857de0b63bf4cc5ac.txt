
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zhmetosr/p/19065290" title="发布于 2025-08-29 22:50">
    <span role="heading" aria-level="2">记一次开发</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="记一次全栈开发">记一次全栈开发</h1>
<h2 id="目录">目录</h2>
<ul>
<li><a href="#%E9%A1%B9%E7%9B%AE%E6%A6%82%E8%BF%B0" rel="noopener nofollow">项目概述</a></li>
<li><a href="#%E6%8A%80%E6%9C%AF%E6%A0%88%E9%80%89%E6%8B%A9" rel="noopener nofollow">技术栈选择</a></li>
<li><a href="#%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91" rel="noopener nofollow">前端开发</a></li>
<li><a href="#%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91" rel="noopener nofollow">后端开发</a></li>
<li><a href="#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96" rel="noopener nofollow">性能优化</a></li>
<li><a href="#%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B" rel="noopener nofollow">部署流程</a></li>
<li><a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" rel="noopener nofollow">常见问题与解决方案</a></li>
<li><a href="#%E7%BB%B4%E6%8A%A4%E4%B8%8E%E6%9B%B4%E6%96%B0" rel="noopener nofollow">维护与更新</a></li>
</ul>
<h2 id="概述">概述</h2>
<p>企业官网是公司的数字门面，不仅展示公司形象，还承载着品牌传播、产品展示、客户沟通等多种功能，我身为一名全栈开发又是公司的董事长必须自己开发<br>
现在让我们开始吧，程序代码全部手敲耗时20小时，希望大家可以给各位开发者带来帮助</p>
<h3 id="核心功能需求">核心功能需求</h3>
<ul>
<li>公司简介与品牌展示</li>
<li>产品与服务介绍</li>
<li>成功案例展示</li>
<li>新闻动态发布</li>
<li>团队介绍</li>
<li>联系方式</li>
<li>后台内容管理系统</li>
</ul>
<h2 id="技术栈选择">技术栈选择</h2>
<h3 id="前端技术栈">前端技术栈</h3>
<table>
<thead>
<tr>
<th>技术</th>
<th>版本</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>Vue.js</td>
<td>3.x</td>
<td>前端框架</td>
</tr>
<tr>
<td>Vite</td>
<td>4.x</td>
<td>构建工具</td>
</tr>
<tr>
<td>Vue Router</td>
<td>4.x</td>
<td>路由管理</td>
</tr>
<tr>
<td>Pinia</td>
<td>2.x</td>
<td>状态管理</td>
</tr>
<tr>
<td>Element Plus</td>
<td>2.x</td>
<td>UI组件库</td>
</tr>
<tr>
<td>TypeScript</td>
<td>4.x</td>
<td>类型系统</td>
</tr>
<tr>
<td>SCSS</td>
<td>-</td>
<td>CSS预处理器</td>
</tr>
</tbody>
</table>
<h3 id="后端技术栈">后端技术栈</h3>
<table>
<thead>
<tr>
<th>技术</th>
<th>版本</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>Node.js</td>
<td>16.x</td>
<td>运行环境</td>
</tr>
<tr>
<td>Express</td>
<td>4.x</td>
<td>Web框架</td>
</tr>
<tr>
<td>MongoDB</td>
<td>4.4</td>
<td>数据库</td>
</tr>
<tr>
<td>Mongoose</td>
<td>6.x</td>
<td>ODM工具</td>
</tr>
<tr>
<td>JWT</td>
<td>-</td>
<td>身份认证</td>
</tr>
<tr>
<td>Multer</td>
<td>-</td>
<td>文件上传</td>
</tr>
</tbody>
</table>
<h2 id="前端开发">前端开发</h2>
<h3 id="项目结构">项目结构</h3>
<pre><code>jishun-website/
├── public/                 # 静态资源
├── src/
│   ├── assets/             # 资源文件
│   ├── components/         # 组件
│   │   ├── common/         # 通用组件
│   │   └── business/       # 业务组件
│   ├── directives/         # 自定义指令
│   ├── router/             # 路由配置
│   ├── services/           # API服务
│   ├── stores/             # 状态管理
│   ├── views/              # 页面视图
│   ├── App.vue             # 根组件
│   └── main.ts             # 入口文件
├── .env                    # 环境变量
├── index.html              # HTML模板
├── package.json            # 项目依赖
├── tsconfig.json           # TypeScript配置
└── vite.config.ts          # Vite配置
</code></pre>
<h3 id="关键实现">关键实现</h3>
<h4 id="响应式设计">响应式设计</h4>
<p>使用媒体查询和弹性布局实现全设备适配：</p>
<pre><code class="language-scss">// 断点变量
$breakpoints: (
  'sm': 576px,
  'md': 768px,
  'lg': 992px,
  'xl': 1200px,
  'xxl': 1400px
);

// 响应式混合宏
@mixin respond-to($breakpoint) {
  $value: map-get($breakpoints, $breakpoint);
  
  @if $value {
    @media (min-width: $value) {
      @content;
    }
  } @else {
    @error "Unknown breakpoint: #{$breakpoint}";
  }
}

.container {
  width: 100%;
  padding: 0 15px;
  
  @include respond-to('md') {
    max-width: 720px;
    margin: 0 auto;
  }
  
  @include respond-to('lg') {
    max-width: 960px;
  }
  
  @include respond-to('xl') {
    max-width: 1140px;
  }
}
</code></pre>
<h4 id="组件化开发">组件化开发</h4>
<p>基于Vue 3组合式API实现高复用性组件：</p>
<pre><code class="language-typescript">// src/components/common/ImageCarousel.vue
&lt;script setup lang="ts"&gt;
import { ref, onMounted, watch } from 'vue';

interface Props {
  images: string[];
  autoplay?: boolean;
  interval?: number;
}

const props = withDefaults(defineProps&lt;Props&gt;(), {
  autoplay: true,
  interval: 3000
});

const currentIndex = ref(0);
const timer = ref&lt;number | null&gt;(null);

const next = () =&gt; {
  currentIndex.value = (currentIndex.value + 1) % props.images.length;
};

const prev = () =&gt; {
  currentIndex.value = (currentIndex.value - 1 + props.images.length) % props.images.length;
};

const startAutoplay = () =&gt; {
  if (props.autoplay &amp;&amp; props.images.length &gt; 1) {
    timer.value = window.setInterval(() =&gt; {
      next();
    }, props.interval);
  }
};

const stopAutoplay = () =&gt; {
  if (timer.value) {
    clearInterval(timer.value);
    timer.value = null;
  }
};

watch(() =&gt; props.images, () =&gt; {
  stopAutoplay();
  startAutoplay();
});

onMounted(() =&gt; {
  startAutoplay();
});

defineExpose({
  next,
  prev
});
&lt;/script&gt;

&lt;template&gt;
  &lt;div 
    class="carousel" 
    @mouseenter="stopAutoplay" 
    @mouseleave="startAutoplay"
  &gt;
    &lt;div class="carousel-inner"&gt;
      &lt;transition-group name="fade"&gt;
        &lt;div 
          v-for="(image, index) in images" 
          :key="image"
          class="carousel-item"
          :class="{ active: index === currentIndex }"
        &gt;
          &lt;img :src="image" alt="Carousel image" /&gt;
        &lt;/div&gt;
      &lt;/transition-group&gt;
    &lt;/div&gt;
    
    &lt;button class="carousel-control prev" @click="prev"&gt;
      &lt;span class="icon"&gt;&amp;#10094;&lt;/span&gt;
    &lt;/button&gt;
    
    &lt;button class="carousel-control next" @click="next"&gt;
      &lt;span class="icon"&gt;&amp;#10095;&lt;/span&gt;
    &lt;/button&gt;
    
    &lt;div class="carousel-indicators"&gt;
      &lt;button 
        v-for="(_, index) in images" 
        :key="index"
        class="indicator"
        :class="{ active: index === currentIndex }"
        @click="currentIndex = index"
      &gt;&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;style scoped lang="scss"&gt;
.carousel {
  position: relative;
  width: 100%;
  overflow: hidden;
  
  &amp;-inner {
    position: relative;
    width: 100%;
    height: 100%;
  }
  
  &amp;-item {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.5s ease;
    
    &amp;.active {
      opacity: 1;
      z-index: 1;
    }
    
    img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
}

.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.5s ease;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}
&lt;/style&gt;
</code></pre>
<h4 id="状态管理">状态管理</h4>
<p>我使用Pinia进行状态管理：</p>
<pre><code class="language-typescript">// src/stores/news.ts
import { defineStore } from 'pinia';
import { ref, computed } from 'vue';
import type { NewsItem } from '@/types';
import { fetchNewsList, fetchNewsDetail } from '@/services/api';

export const useNewsStore = defineStore('news', () =&gt; {
  const newsList = ref&lt;NewsItem[]&gt;([]);
  const currentNews = ref&lt;NewsItem | null&gt;(null);
  const loading = ref(false);
  const error = ref&lt;string | null&gt;(null);
  
  const latestNews = computed(() =&gt; {
    return [...newsList.value].sort((a, b) =&gt; 
      new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime()
    ).slice(0, 5);
  });
  
  async function getNewsList() {
    loading.value = true;
    error.value = null;
    
    try {
      newsList.value = await fetchNewsList();
    } catch (err) {
      error.value = err instanceof Error ? err.message : '获取新闻列表失败';
    } finally {
      loading.value = false;
    }
  }
  
  async function getNewsDetail(id: string) {
    loading.value = true;
    error.value = null;
    
    try {
      currentNews.value = await fetchNewsDetail(id);
    } catch (err) {
      error.value = err instanceof Error ? err.message : '获取新闻详情失败';
    } finally {
      loading.value = false;
    }
  }
  
  return {
    newsList,
    currentNews,
    loading,
    error,
    latestNews,
    getNewsList,
    getNewsDetail
  };
});
</code></pre>
<h2 id="后端开发">后端开发</h2>
<h3 id="项目结构-1">项目结构</h3>
<pre><code>jishun-website-backend/
├── src/
│   ├── config/             # 配置文件
│   ├── controllers/        # 控制器
│   ├── middlewares/        # 中间件
│   ├── models/             # 数据模型
│   ├── routes/             # 路由定义
│   ├── services/           # 业务逻辑
│   ├── utils/              # 工具函数
│   ├── app.ts              # 应用配置
│   └── index.ts            # 入口文件
├── uploads/                # 上传文件目录
├── .env                    # 环境变量
├── package.json            # 项目依赖
└── tsconfig.json           # TypeScript配置
</code></pre>
<h3 id="关键实现-1">关键实现</h3>
<h4 id="数据模型设计">数据模型设计</h4>
<p>使用Mongoose定义数据模型：</p>
<pre><code class="language-typescript">// src/models/News.ts
import mongoose, { Schema, Document } from 'mongoose';

export interface INews extends Document {
  title: string;
  content: string;
  summary: string;
  coverImage: string;
  publishDate: Date;
  author: string;
  tags: string[];
  isPublished: boolean;
  viewCount: number;
  createdAt: Date;
  updatedAt: Date;
}

const NewsSchema: Schema = new Schema({
  title: { type: String, required: true, trim: true },
  content: { type: String, required: true },
  summary: { type: String, required: true, trim: true },
  coverImage: { type: String, required: true },
  publishDate: { type: Date, default: Date.now },
  author: { type: String, required: true },
  tags: [{ type: String, trim: true }],
  isPublished: { type: Boolean, default: false },
  viewCount: { type: Number, default: 0 }
}, {
  timestamps: true
});

// 添加全文搜索索引
NewsSchema.index({
  title: 'text',
  content: 'text',
  summary: 'text',
  tags: 'text'
});

export default mongoose.model&lt;INews&gt;('News', NewsSchema);
</code></pre>
<h4 id="api路由设计">API路由设计</h4>
<p>RESTful API设计：</p>
<pre><code class="language-typescript">// src/routes/news.ts
import express from 'express';
import { 
  getAllNews,
  getNewsById,
  createNews,
  updateNews,
  deleteNews,
  searchNews
} from '../controllers/newsController';
import { authenticate, authorize } from '../middlewares/auth';
import { validateNewsInput } from '../middlewares/validation';

const router = express.Router();

// 公开路由
router.get('/', getAllNews);
router.get('/search', searchNews);
router.get('/:id', getNewsById);

// 需要认证的路由
router.post('/', authenticate, authorize(['admin', 'editor']), validateNewsInput, createNews);
router.put('/:id', authenticate, authorize(['admin', 'editor']), validateNewsInput, updateNews);
router.delete('/:id', authenticate, authorize(['admin']), deleteNews);

export default router;
</code></pre>
<h4 id="身份验证中间件">身份验证中间件</h4>
<p>JWT认证实现：</p>
<pre><code class="language-typescript">// src/middlewares/auth.ts
import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
import User from '../models/User';

interface DecodedToken {
  id: string;
  role: string;
}

declare global {
  namespace Express {
    interface Request {
      user?: any;
    }
  }
}

export const authenticate = async (req: Request, res: Response, next: NextFunction) =&gt; {
  try {
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ message: '未提供认证令牌' });
    }
    
    const token = authHeader.split(' ')[1];
    const decoded = jwt.verify(token, process.env.JWT_SECRET as string) as DecodedToken;
    
    const user = await User.findById(decoded.id).select('-password');
    
    if (!user) {
      return res.status(401).json({ message: '用户不存在' });
    }
    
    req.user = user;
    next();
  } catch (error) {
    return res.status(401).json({ message: '无效的认证令牌' });
  }
};

export const authorize = (roles: string[]) =&gt; {
  return (req: Request, res: Response, next: NextFunction) =&gt; {
    if (!req.user) {
      return res.status(401).json({ message: '未认证的用户' });
    }
    
    if (!roles.includes(req.user.role)) {
      return res.status(403).json({ message: '没有权限执行此操作' });
    }
    
    next();
  };
};
</code></pre>
<h2 id="性能优化">性能优化</h2>
<h3 id="前端性能优化">前端性能优化</h3>
<ol>
<li><strong>代码分割与懒加载</strong></li>
</ol>
<pre><code class="language-typescript">// src/router/index.ts
import { createRouter, createWebHistory } from 'vue-router';

const routes = [
  {
    path: '/',
    component: () =&gt; import('../views/Home.vue')
  },
  {
    path: '/about',
    component: () =&gt; import('../views/About.vue')
  },
  {
    path: '/news',
    component: () =&gt; import('../views/News.vue')
  },
  {
    path: '/news/:id',
    component: () =&gt; import('../views/NewsDetail.vue')
  },
];

const router = createRouter({
  history: createWebHistory(),
  routes,
  scrollBehavior(to, from, savedPosition) {
    if (savedPosition) {
      return savedPosition;
    } else {
      return { top: 0 };
    }
  }
});

export default router;
</code></pre>
<ol start="2">
<li><strong>图片优化</strong></li>
</ol>
<pre><code class="language-typescript">// src/directives/lazyload.ts
import { DirectiveBinding } from 'vue';

export default {
  mounted(el: HTMLImageElement, binding: DirectiveBinding) {
    const observer = new IntersectionObserver((entries) =&gt; {
      entries.forEach(entry =&gt; {
        if (entry.isIntersecting) {
          el.src = binding.value;
          observer.unobserve(el);
        }
      });
    });
    
    observer.observe(el);
  }
};

// 使用方式
// &lt;img v-lazy="'/path/to/image.jpg'" alt="Lazy loaded image"&gt;
</code></pre>
<ol start="3">
<li><strong>资源预加载</strong></li>
</ol>
<pre><code class="language-html">&lt;!-- index.html --&gt;
&lt;head&gt;
  &lt;!-- 预加载关键资源 --&gt;
  &lt;link rel="preload" href="/fonts/custom-font.woff2" as="font" type="font/woff2" crossorigin&gt;
  &lt;link rel="preload" href="/assets/hero-image.webp" as="image"&gt;
  
  &lt;!-- 预连接第三方域名 --&gt;
  &lt;link rel="preconnect" href="https://api.example.com"&gt;
  &lt;link rel="dns-prefetch" href="https://api.example.com"&gt;
&lt;/head&gt;
</code></pre>
<h3 id="后端性能优化">后端性能优化</h3>
<ol>
<li><strong>数据库查询优化</strong></li>
</ol>
<pre><code class="language-typescript">// 添加适当的索引
NewsSchema.index({ publishDate: -1 });
NewsSchema.index({ tags: 1 });

// 使用投影只返回需要的字段
const newsList = await News.find({ isPublished: true })
  .select('title summary coverImage publishDate author')
  .sort({ publishDate: -1 })
  .limit(10);
</code></pre>
<ol start="2">
<li><strong>API响应缓存</strong></li>
</ol>
<pre><code class="language-typescript">// src/middlewares/cache.ts
import { Request, Response, NextFunction } from 'express';
import NodeCache from 'node-cache';

const cache = new NodeCache({ stdTTL: 60 }); // 默认缓存60秒

export const cacheMiddleware = (duration: number = 60) =&gt; {
  return (req: Request, res: Response, next: NextFunction) =&gt; {
    // 只缓存GET请求
    if (req.method !== 'GET') {
      return next();
    }
    
    const key = `__express__${req.originalUrl || req.url}`;
    const cachedBody = cache.get(key);
    
    if (cachedBody) {
      res.send(cachedBody);
      return;
    }
    
    const originalSend = res.send;
    
    res.send = function(body): Response {
      cache.set(key, body, duration);
      return originalSend.call(this, body);
    };
    
    next();
  };
};

// 使用方式
// app.use('/api/news', cacheMiddleware(300), newsRoutes);
</code></pre>
<h2 id="部署流程">部署流程</h2>
<h3 id="宝塔面板部署">宝塔面板部署</h3>
<h4 id="1-安装宝塔面板">1. 安装宝塔面板</h4>
<pre><code class="language-bash"># CentOS系统
yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh

# Ubuntu/Debian系统
wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh
</code></pre>
<h4 id="2-安装必要软件">2. 安装必要软件</h4>
<p>通过宝塔面板安装：</p>
<ul>
<li>Nginx 1.20</li>
<li>Node.js 16.x</li>
<li>MongoDB 4.4</li>
<li>PM2管理器</li>
</ul>
<h4 id="3-前端部署">3. 前端部署</h4>
<pre><code class="language-bash"># 克隆代码库
git clone https://github.com/your-repo/jishun-website.git /www/wwwroot/jishunkeji.cn/jishun-website

# 安装依赖并构建
cd /www/wwwroot/jishunkeji.cn/jishun-website
npm install
npm run build
</code></pre>
<h4 id="4-后端部署">4. 后端部署</h4>
<pre><code class="language-bash"># 克隆代码库
git clone https://github.com/your-repo/jishun-website-backend.git /www/wwwroot/jishunkeji.cn/jishun-website-backend

# 安装依赖并构建
cd /www/wwwroot/jishunkeji.cn/jishun-website-backend
npm install
npm run build

# 创建PM2配置文件
cat &gt; ecosystem.config.js &lt;&lt; 'EOL'
module.exports = {
  apps: [{
    name: "jishun-backend",
    script: "./dist/index.js",
    instances: 2,
    exec_mode: "cluster",
    env: {
      NODE_ENV: "production",
      PORT: 5001
    },
    max_memory_restart: "300M"
  }]
}
EOL

# 启动服务
pm2 start ecosystem.config.js
</code></pre>
<h4 id="5-nginx配置">5. Nginx配置</h4>
<pre><code class="language-nginx">server {
    listen 80;
    server_name jishunkeji.cn www.jishunkeji.cn;
    
    # 重定向到HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    server_name jishunkeji.cn www.jishunkeji.cn;
    
    # SSL配置
    ssl_certificate /path/to/cert.pem;
    ssl_certificate_key /path/to/key.pem;
    
    root /www/wwwroot/jishunkeji.cn/jishun-website/dist;
    index index.html;
    
    # 添加正确的MIME类型映射
    include /etc/nginx/mime.types;
    types {
        application/javascript js mjs ts;
        application/json json;
        text/css css;
    }
    
    # JavaScript文件特殊处理
    location ~* \.(js|mjs|ts)$ {
        add_header Content-Type application/javascript;
        try_files $uri =404;
    }
    
    # 静态资源缓存
    location ~* \.(css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, max-age=31536000, immutable";
    }
    
    # 启用Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # 前端路由支持
    location / {
        try_files $uri $uri/ /index.html;
    }
    
    # 后端API代理
    location /api {
        proxy_pass http://127.0.0.1:5001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_cache_bypass $http_upgrade;
    }
    
    # 安全相关头部
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Frame-Options SAMEORIGIN;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
}
</code></pre>
<h2 id="常见问题与解决方案">常见问题与解决方案</h2>
<h3 id="1-mime类型配置问题">1. MIME类型配置问题</h3>
<p><strong>问题</strong>：部署后前端页面出现白屏，控制台报错：</p>
<pre><code>Failed to load module script: Expected a JavaScript-or-Wasm module script but the server responded with a MIME type of "video/mp2t".
</code></pre>
<p><strong>解决方案</strong>：</p>
<p>在Nginx配置中添加正确的MIME类型映射：(这个最坑）</p>
<pre><code class="language-nginx">types {
    application/javascript js mjs ts;
    application/json json;
    text/css css;
}

location ~* \.(js|mjs|ts)$ {
    add_header Content-Type application/javascript;
    try_files $uri =404;
}
</code></pre>
<p>上面是方法一<br>
如果不行用方法二这个我搞了2个小时<br>
然后发现是<br>
<img src="https://img2024.cnblogs.com/blog/3661568/202508/3661568-20250829224345947-1546868301.png" alt="image" loading="lazy"></p>
<h3 id="2-跨域资源共享cors问题">2. 跨域资源共享(CORS)问题</h3>
<p><strong>问题</strong>：开发环境正常，生产环境API请求失败，控制台报CORS错误。</p>
<p><strong>解决方案</strong>：</p>
<p>在后端添加CORS中间件：</p>
<pre><code class="language-typescript">import cors from 'cors';

// 配置CORS
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? 'https://jishunkeji.cn' 
    : 'http://localhost:3000',
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));
</code></pre>
<h3 id="3-文件上传权限问题">3. 文件上传权限问题</h3>
<p><strong>问题</strong>：在生产环境中，文件上传失败，服务器日志显示权限错误。</p>
<p><strong>解决方案</strong>：</p>
<ol>
<li>检查并修正上传目录的权限：</li>
</ol>
<pre><code class="language-bash"># 设置正确的目录权限
chown -R www:www /www/wwwroot/jishunkeji.cn/jishun-website-backend/uploads
chmod -R 755 /www/wwwroot/jishunkeji.cn/jishun-website-backend/uploads
</code></pre>
<ol start="2">
<li>在Node.js应用中确保上传目录存在：</li>
</ol>
<pre><code class="language-typescript">import fs from 'fs';
import path from 'path';

const uploadDir = path.join(__dirname, '../uploads');

// 确保上传目录存在
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}
</code></pre>
<h3 id="4-pm2启动问题">4. PM2启动问题</h3>
<p><strong>问题</strong>：PM2启动失败，提示"未检测到pm2，请先安装pm2或切换node版本后再试"。</p>
<p><strong>解决方案</strong>：</p>
<ol>
<li>确保全局安装PM2：</li>
</ol>
<pre><code class="language-bash">npm install -g pm2
</code></pre>
<ol start="2">
<li>如果使用NVM管理Node.js版本，确保在正确的Node.js版本下安装PM2：<br>
！！！：新版本没有pm2，pm2被默认到了建站的地方</li>
</ol>
<pre><code class="language-bash">nvm use 16
npm install -g pm2
</code></pre>
<ol start="3">
<li>在宝塔面板中，确保选择了正确的Node.js版本。</li>
</ol>
<h2 id="维护与更新">维护与更新</h2>
<h3 id="自动化部署流程">自动化部署流程</h3>
<p>创建简单的部署脚本：</p>
<pre><code class="language-bash">#!/bin/bash
# deploy.sh

# 前端部署
cd /www/wwwroot/jishunkeji.cn/jishun-website
git pull
npm install
npm run build

# 后端部署
cd /www/wwwroot/jishunkeji.cn/jishun-website-backend
git pull
npm install
npm run build
pm2 reload jishun-backend
</code></pre>
<h3 id="监控与日志">监控与日志</h3>
<ol>
<li><strong>使用PM2监控后端服务</strong></li>
</ol>
<pre><code class="language-bash"># 查看应用状态
pm2 status

# 查看日志
pm2 logs jishun-backend

# 监控资源使用
pm2 monit
</code></pre>
<ol start="2">
<li><strong>Nginx日志分析</strong></li>
</ol>
<pre><code class="language-bash"># 安装GoAccess日志分析工具
yum install goaccess

# 分析Nginx访问日志
goaccess /var/log/nginx/access.log -o /www/wwwroot/report.html --log-format=COMBINED
</code></pre>
<h3 id="数据备份策略">数据备份策略</h3>
<p>创建MongoDB备份脚本：</p>
<pre><code class="language-bash">#!/bin/bash
# backup.sh

# 设置变量
BACKUP_DIR="/www/backup/mongodb"
DATE=$(date +%Y%m%d_%H%M%S)
DB_NAME="jishun_website"

# 创建备份目录
mkdir -p $BACKUP_DIR

# 执行备份
mongodump --db $DB_NAME --out $BACKUP_DIR/$DATE

# 压缩备份
cd $BACKUP_DIR
tar -zcvf $DATE.tar.gz $DATE
rm -rf $DATE

# 删除7天前的备份
find $BACKUP_DIR -name "*.tar.gz" -type f -mtime +7 -delete
</code></pre>
<p>添加到crontab定时执行：</p>
<pre><code class="language-bash"># 每天凌晨3点执行备份
0 3 * * * /path/to/backup.sh &gt;&gt; /var/log/mongodb_backup.log 2&gt;&amp;1
</code></pre>
<hr>
<p>本文档详细记录了企业网站的开发与部署流程，从技术选型到最终上线。通过合理的架构设计、性能优化和部署配置，我成功构建了一个高性能、易维护的企业官网系统,希望能给各位开发者帮助吧<br>
那么下面请欣赏我的报错<br>
<img src="https://img2024.cnblogs.com/blog/3661568/202508/3661568-20250829224637994-82498419.png" alt="322c6cedce7dfb65accfb9ae8a0f43f7" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/3661568/202508/3661568-20250829224654793-1226091550.png" alt="6db73cb15c610250d16ccff397af7a1b" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/3661568/202508/3661568-20250829224722677-445837417.png" alt="6c97e3cad646f48d34b72059e45a8ab9" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/3661568/202508/3661568-20250829224731214-725026507.png" alt="3d3cc41cbfe1f30e0e0535270d491f7f" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/3661568/202508/3661568-20250829224744859-837285730.png" alt="18f9c861314659e86301ff3aa60ee604" loading="lazy"></p>
<h3 id="感谢浏览能否给我一个赞和评论呢让我们共同进步">感谢浏览，能否给我一个赞和评论呢让我们共同进步</h3>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-29 22:51">2025-08-29 22:50</span>&nbsp;
<a href="https://www.cnblogs.com/zhmetosr">zhmetosr</a>&nbsp;
阅读(<span id="post_view_count">47</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19065290);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19065290', targetLink: 'https://www.cnblogs.com/zhmetosr/p/19065290', title: '记一次开发' })">举报</a>
</div>
        