
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/hsiang/p/18684819" title="发布于 2025-01-25 12:00">
    <span role="heading" aria-level="2">Avalonia系列文章之再试牛刀</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        通过前一篇文章，已经了解了AvaloniaUI的环境安装以及项目创建，磨刀不误砍柴工，今天继续进行Avalonia基础知识学习，如有不足之处，还请指正。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>通过前一篇文章，已经了解了AvaloniaUI的环境安装以及项目创建，磨刀不误砍柴工，今天继续进行Avalonia基础知识学习，如有不足之处，还请指正。</p>
<h1>项目组成</h1>
<p>在前一篇文章中，我们创建了第一个Avalonia项目“FirstAvalonia”，通过分析发现，默认创建的解决方案，有两部分组成：</p>
<ul>
<li>FirstAvalonia.Desktop，此项目表示我们创建的项目是基于Windows桌面程序的，Program类中的Main方法为程序启动入口。</li>
<li>FirstAvalonia，此项目为多平台之间共享的主要项目，默认基于MVVM模式进行开发，主要程序结构如下：
<ol>
<li>Views，存放视图页面，为了与WPF创建的".xaml"进行区分，Avalonia UI 使用了自己的<code>.axaml</code>扩展名——'Avalonia XAML'。</li>
<li>ViewModels，存放视图模型，默认创建的ViewModel根据选择的“Design Pattern”不同，继承不同的基类，实现具备通知功能的属性。</li>
<li>Assets，主要存放一些静态资源，如图片等。</li>
<li>App.axaml，为应用程序的入口，可以定义主题样式等内容。</li>
</ol>
</li>
</ul>
<p>默认创建的项目示例，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1068941/202501/1068941-20250122003611657-2050014171.png"></p>
<h1>视图文件</h1>
<p>默认创建的MainWindow.axaml文件，是一个典型的Avalonia视图文件，主要包含Window标签以及一些属性和一个内容，它表示一个窗口，以及一些窗口设置，和它的内容（MainView是一个用户控件）。</p>
<p>根节点定义了视图页面的类型（如：Window，Page，UserControl等），它有三个重要属性：</p>
<ul>
<li>xmlns="https://github.com/avaloniaui" ——这是 Avalonia UI 本身的XAML命名空间声明。这是必需的，否则文件将无法被识别为Avalonia XAML文档；</li>
<li>xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" ——这是XAML语言命名空间的声明；</li>
<li>x:Class="AvaloniaApplication1.MainWindow" ——这是上面声明的扩展（用于'x'）告诉XAML编译器在文件中找到相关联的类的位置。这个类在代码后台文件中定义，通常用C#编写。</li>
</ul>
<p>具体如下所示：</p>
<pre class="language-xml highlighter-hljs"><code>&lt;Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="using:FirstAvalonia.ViewModels"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:views="clr-namespace:FirstAvalonia.Views"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="FirstAvalonia.Views.MainWindow"
        Icon="/Assets/avalonia-logo.ico"
        Title="FirstAvalonia"&gt;
        &lt;views:MainView /&gt;
&lt;/Window&gt;</code></pre>
<p>与XAML一样，在Avalonia XAML文件中，可以根据需要声明命名空间，并以此来找到XAML文件中使用的元素的定义。可以使用<code>xmlns</code>属性添加命名空间。命名空间声明的格式如下：</p>
<pre class="language-xml highlighter-hljs"><code>xmlns:alias="definition"</code></pre>
<div class="language-xml codeBlockContainer_Ckt0 theme-code-block">
<div class="codeBlockContent_biex">
<p>通常在根元素中定义您要使用的所有命名空间是标准做法。其中alias是命名控件的别名，别名在文件内始终保持唯一。其中命名空间的引用，通常采用命名空间前缀，格式为“clr-namespace:命名空间”，当代码存在于与XAML相同的程序集中时，您可以使用此语法，如：xmlns:views="clr-namespace:FirstAvalonia.Views"；如果代码在另一个被引用的程序集中（例如一个库中），您必须扩展说明以包含被引用程序集的名称：<span class="token tag attr-name namespace">xmlns:</span><span class="token tag attr-name">别名</span><span class="token tag attr-value punctuation attr-equals">=</span><span class="token tag attr-value punctuation">"</span><span class="token tag attr-value">clr-namespace:命名空间;assembly=程序集</span><span class="token tag attr-value punctuation">"。</span></p>
</div>
</div>
<h1>code-behind文件</h1>
<p>与WPF一样，Avalonia视图文件有一个关联的code-behind文件，并以“.axaml.cs”为文件后缀，主要用来处理事件以及其他逻辑等。通常情况下，在Visual Studio 开发工具中， code-behind文件，显示在视图文件的下一级。</p>
<p><img src="https://img2024.cnblogs.com/blog/1068941/202501/1068941-20250123004821392-2003062239.png"></p>
<p>code-behind类包含一个与视图文件同名的类，并用“partial”关键字修饰，表示一个部分类，在编译时，视图页面和code-behind类，会编译成一个类。</p>
<pre class="language-csharp highlighter-hljs"><code>using Avalonia.Controls;

namespace FirstAvalonia.Views;

public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
    }
}</code></pre>
<p>code-behind类名与XAML文件的名称匹配，并且在<code>Window</code>元素的<code>x:Class</code>属性中也有引用。</p>
<pre class="language-xml highlighter-hljs"><code>&lt;Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="using:FirstAvalonia.ViewModels"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:views="clr-namespace:FirstAvalonia.Views"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="FirstAvalonia.Views.MainWindow"
        Icon="/Assets/avalonia-logo.ico"
        Title="FirstAvalonia"&gt;
        &lt;views:MainView /&gt;
&lt;/Window&gt;</code></pre>
<p>注意：如果在代码中对类名或其命名空间进行了任何更改，请确保<code>x:Class</code>属性始终匹配，否则会出现错误。</p>
<h1>用户控件</h1>
<p>默认创建的项目中，在MainWindow页面的Window根节点下，有一个内容节点MainView，此节点表示一个自定义的用户控件，用于显示内容，这样可以达到控件的有效复用。</p>
<ol>
<li>首先引入MainView所在的命名空间，并将别名命名为views，因为MainWindow和MainView在同一个程序集内，所以直接通过xmlns:views="clr-namespace:FirstAvalonia.Views"引入即可，不需要添加程序集说明。</li>
<li>其次引入命名空间后，即可访问MainView视图，格式为：&lt;views:MainView /&gt;。</li>
</ol>
<p>MainView和MainWindow不仅根节点不同，在code-behind类中，所继承的父类也不同，表示它们属于不同的控件形式。以MainView视图为例，MainView的根节点为UserControl，表示一个自定义的用户控件，由于Avalonia默认采用MVVM开发模式，与普通控件有以下几点需要注意：</p>
<ol>
<li>在此页面中，首先引入MainViewModel所在的命名空间，语句为：xmlns:vm="clr-namespace:FirstAvalonia.ViewModels"。</li>
<li>声明x:DataType类型为MainViewModel类型，语句为：x:DataType="vm:MainViewModel"。</li>
<li>将UI页面的DataContext设置为MainViewModel。</li>
</ol>
<p>另外，我们还可以给UserControl添加UI元素，如TextBlock，Button等，如下所示：</p>
<pre class="language-xml highlighter-hljs"><code>&lt;UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:vm="clr-namespace:FirstAvalonia.ViewModels"
             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
             x:Class="FirstAvalonia.Views.MainView"
             x:DataType="vm:MainViewModel"&gt;
  &lt;Design.DataContext&gt;
    &lt;vm:MainViewModel /&gt;
  &lt;/Design.DataContext&gt;

  &lt;TextBlock Text="{Binding Greeting}" HorizontalAlignment="Center" VerticalAlignment="Center"/&gt;
&lt;/UserControl&gt;</code></pre>
<p>在上述示例中，TextBlock控件的Text属性，通过Binding的方式动态的显示ViewModel中的Greeting对应的值。</p>
<pre class="language-csharp highlighter-hljs"><code>namespace FirstAvalonia.ViewModels;

public class MainViewModel : ViewModelBase
{
    public string Greeting =&gt; "Welcome to Avalonia!";
}</code></pre>
<p>默认创建的MainView.axaml中，只有一个TextBlock控件，它用于显示只读文本，我们还可以添加其他控件，控件的元素标签和类名相同，一个UI可以由多种不同类型的控件组成，不要如果要组织不同的控件显示在UI页面中，则需要布局控件进行排版才行。否则所有的控件都会堆积在一起。如果要添加一个按钮在在页面中，代码如下所示：</p>
<pre class="language-xml highlighter-hljs"><code>&lt;UserControl xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;
    &lt;Button&gt;Hello World!&lt;/Button&gt;
&lt;/UserControl&gt;</code></pre>
<p>还可以通过给元素添加属性来设置空间的呈现方式，如背景色Background等属性，如果要给一个按钮设置蓝色的背景色，则可以如下设置：</p>
<pre class="language-xml highlighter-hljs"><code>&lt;UserControl xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;
    &lt;Button Background="Blue"&gt;Hello World!&lt;/Button&gt;
&lt;/UserControl&gt;</code></pre>
<p>在上述示例中Button按钮的包含起始标签，和结束标签，而在两个标签之间则是按钮的内容，也可以通过Content属性来设置内容。</p>
<h1>设计预览</h1>
<p>在Visual Studio开发工具中，通过预览功能，我们可以实时的查看页面布局效果，方便及时调整。，如下所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1068941/202501/1068941-20250124232051260-1956217072.png"></p>
<p>&nbsp;</p>
<p>以上就是《Avalonia系列文章之再试牛刀》的全部内容。</p>
</div>
<div id="MySignature" role="contentinfo">
    <div id="AllanboltSignature">
 
    <p style="border-top: #e0e0e0 1px dashed; border-right: #e0e0e0 1px dashed; border-bottom: #e0e0e0 1px dashed; border-left: #e0e0e0 1px dashed; padding-top: 10px; padding-right: 10px; padding-bottom: 10px; padding-left: 30px; font-family: 微软雅黑; font-size: 12px" id="PSignature">
<br>
  <a style="float: left; display: block; padding-right: 10px" target="_blank" href="https://images.cnblogs.com/cnblogs_com/hsiang/1154298/o_115f1cd8.jpg">
   <img alt="" src="https://images.cnblogs.com/cnblogs_com/hsiang/1154298/o_115f1cd8.jpg" width="80px" height="80px">
   </a>
    作者：<a href="http://www.cnblogs.com/hsiang/" target="_blank">老码识途</a>
    <br>
    出处：<a href="http://www.cnblogs.com/hsiang/" target="_blank">http://www.cnblogs.com/hsiang/</a>
    <br>
    本文版权归作者和博客园共有，写文不易，支持原创，欢迎转载【点赞】，转载请保留此段声明，且在文章页面明显位置给出原文连接，谢谢。
    <br>关注个人公众号，定时同步更新技术及职场文章
<br><br>
   </p>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="11.7598443845625" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-25 12:00">2025-01-25 12:00</span>&nbsp;
<a href="https://www.cnblogs.com/hsiang">老码识途呀</a>&nbsp;
阅读(<span id="post_view_count">74</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18684819" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18684819);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18684819', targetLink: 'https://www.cnblogs.com/hsiang/p/18684819', title: 'Avalonia系列文章之再试牛刀' })">举报</a>
</div>
        