
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Yesi/p/18813112" title="发布于 2025-04-07 16:49">
    <span role="heading" aria-level="2">通过 C# 获取PDF文档中的字体名、大小、颜色、样式等</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>在设计和出版行业中，字体的选择和使用对最终作品的质量有着重要影响。然而，有时我们可能会遇到包含未知字体的PDF文件，这使得我们无法准确地复制或修改文档。获取PDF中的字体信息可以解决这个问题，让我们能够更好地处理这些文件。无论是用于重新设计、文档翻译还是个人学习，了解如何获取PDF中的字体信息都是一项非常有用的技能。本文将介绍如何通过C#获取PDF中指定文本或所有文本的字体信息。</p>
<ul>
<li>C# 获取PDF中指定文本的字体信息</li>
<li>C# 获取PDF文档中用到的所有字体信息</li>
</ul>
<p>获取字体的操作需要用到第三方库&nbsp;<span style="background-color: rgba(255, 255, 0, 1)"><strong><a href="https://www.e-iceblue.cn/Introduce/Spire-PDF-NET.html" rel="noopener nofollow" target="_blank"><span style="background-color: rgba(255, 255, 0, 1)">Spire.PDF for .NET</span></a></strong></span>，我们可以通过以下链接下载产品包后手动添加引用，或者直接通过<a href="http://www.nuget.org/packages/Spire.PDF/" rel="noopener nofollow" target="_blank">NuGet</a>安装。</p>
<p><a href="https://www.e-iceblue.cn/Downloads/Spire-PDF-NET.html" target="_blank" rel="noopener nofollow">https://www.e-iceblue.cn/Downloads/Spire-PDF-NET.html</a></p>
<p>&nbsp;</p>
<h3>C# 获取PDF中指定文本的字体信息</h3>
<p>通过使用Spire.PDF for .NET提供的<em><strong> PdfTextFragment</strong></em> 类下的各属性，我们可以获取字体名称、大小、样式和颜色。主要实现步骤如下</p>
<ol>
<li>加载 PDF 文件，然后获取指定页面。</li>
<li>通过 <strong><em>PdfTextFinder.Find()</em></strong> 方法查找指定文本，并返回一个 PdfTextFragment 对象。</li>
<li>创建一个StringBuilder实例来存储信息。</li>
<li>遍历所有查找到的文本</li>
<li>通过 <em><strong>PdfTextFragment.Text</strong></em> 属性获取找到的文本内容。</li>
<li>通过 <em><strong>PdfTextFragment.TextStates[0].FontName</strong></em> 属性获取找到的文本的字体名称。</li>
<li>通过 <em><strong>PdfTextFragment.TextStates[0].FontSize</strong></em> 属性获取找到的文本的字体大小。</li>
<li>通过 <em><strong>PdfTextFragment.TextStates[0].FontFamily</strong></em> 属性获取找到的文本的字体类型。</li>
<li>通过 <em><strong>PdfTextFragment.TextStates[0].IsBold 和 PdfTextFragment.TextStates[0].IsSimulateBold</strong></em> 属性指示字体是否加粗或模拟加粗（字体样式设置为填充和描边）。</li>
<li>通过 <em><strong>PdfTextFragment.TextStates[0].IsItalic</strong> </em>属性指示字体是否为斜体.</li>
<li>使用 <em><strong>PdfTextFragment.TextStates[0].ForegroundColor</strong> </em>属性获取找到的文本的字体颜色。</li>
<li>将获取到的字体信息添加到StringBuilder实例中，然后写入 txt 文件。</li>
</ol>
<p>C#代码：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Spire.Pdf;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Spire.Pdf.Texts;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Collections.Generic;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Drawing;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.IO;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Text;

</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> GetTextFont
{
    </span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Program
    {
        </span><span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> Main(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">[] args)
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 加载PDF文件</span>
            PdfDocument pdf = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> PdfDocument();
            pdf.LoadFromFile(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">E:\\PythonPDF\\南极.pdf</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取第一页</span>
            PdfPageBase page = pdf.Pages[<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">];

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建PdfTextFinder实例</span>
            PdfTextFinder finds = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> PdfTextFinder(page);

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 查找页面上指定文本</span>
            finds.Options.Parameter =<span style="color: rgba(0, 0, 0, 1)"> TextFindParameter.None;
            List</span>&lt;PdfTextFragment&gt; result = finds.Find(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">南极洲</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建StringBuilder实例</span>
            StringBuilder str = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> StringBuilder();

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 遍历所有查找到的文本</span>
            <span style="color: rgba(0, 0, 255, 1)">foreach</span> (PdfTextFragment find <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> result)
            {
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取文本</span>
                <span style="color: rgba(0, 0, 255, 1)">string</span> text =<span style="color: rgba(0, 0, 0, 1)"> find.Text;
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取字体名</span>
                <span style="color: rgba(0, 0, 255, 1)">string</span> FontName = find.TextStates[<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">].FontName;
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取字体大小</span>
                <span style="color: rgba(0, 0, 255, 1)">float</span> FontSize = find.TextStates[<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">].FontSize;
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取字体类型</span>
                <span style="color: rgba(0, 0, 255, 1)">string</span> FontFamily = find.TextStates[<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">].FontFamily;
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 判断是否加粗或模拟加粗</span>
                <span style="color: rgba(0, 0, 255, 1)">bool</span> IsBold = find.TextStates[<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">].IsBold;
                </span><span style="color: rgba(0, 0, 255, 1)">bool</span> IsSimulateBold = find.TextStates[<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">].IsSimulateBold;
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 判断是否为斜体</span>
                <span style="color: rgba(0, 0, 255, 1)">bool</span> IsItalic = find.TextStates[<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">].IsItalic;
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取字体颜色</span>
                Color color = find.TextStates[<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">].ForegroundColor;

                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 将获取到的信息添加到StringBuilder实例中</span>
<span style="color: rgba(0, 0, 0, 1)">                str.AppendLine(text);
                str.AppendLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">字体名： </span><span style="color: rgba(128, 0, 0, 1)">"</span> +<span style="color: rgba(0, 0, 0, 1)"> FontName);
                str.AppendLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">字体大小： </span><span style="color: rgba(128, 0, 0, 1)">"</span> +<span style="color: rgba(0, 0, 0, 1)"> FontSize);
                str.AppendLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">字体系列： </span><span style="color: rgba(128, 0, 0, 1)">"</span> +<span style="color: rgba(0, 0, 0, 1)"> FontFamily);
                str.AppendLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">是否加粗： </span><span style="color: rgba(128, 0, 0, 1)">"</span> +<span style="color: rgba(0, 0, 0, 1)"> IsBold);
                str.AppendLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">是否模拟加粗： </span><span style="color: rgba(128, 0, 0, 1)">"</span> +<span style="color: rgba(0, 0, 0, 1)"> IsSimulateBold);
                str.AppendLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">是否为斜体： </span><span style="color: rgba(128, 0, 0, 1)">"</span> +<span style="color: rgba(0, 0, 0, 1)"> IsItalic);
                str.AppendLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">字体颜色：</span><span style="color: rgba(128, 0, 0, 1)">"</span> +<span style="color: rgba(0, 0, 0, 1)"> color);
                str.AppendLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            }
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 写入一个txt文件</span>
            File.WriteAllText(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Pdf字体.txt</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, str.ToString());
        }
    }
}</span></pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/706090/202504/706090-20250407164826980-287391982.png" alt=""></p>
<p>&nbsp;</p>
<h3>C# 获取PDF文档中用到的所有字体信息</h3>
<p>PdfUsedFont 类表示PDF文档中使用到的字体，它提供了不同的属性来帮助我们获取字体名称、大小、类型和样式等。主要实现步骤如下：</p>
<ol>
<li>加载 PDF 文件。</li>
<li>通过 <em><strong>PdfDocument.UsedFonts</strong></em> 属性获取 PDF 文件中使用的所有字体。</li>
<li>创建一个StringBuilder实例来存储信息。</li>
<li>遍历所有使用到的字体。</li>
<li>通过 <em><strong>PdfUsedFont.Name</strong></em> 属性获取字体名称。</li>
<li>通过 <em><strong>PdfUsedFont.Size</strong></em> 属性获取字体大小。</li>
<li>通过 <em><strong>PdfUsedFont.Type</strong></em> 属性获取字体类型。</li>
<li>通过 <em><strong>PdfUsedFont.Style</strong></em> 属性获取字体样式。</li>
<li>将获取到的字体信息添加到StringBuilder实例中，然后写入 txt 文件。</li>
</ol>
<p>C#代码：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Spire.Pdf;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Spire.Pdf.Graphics.Fonts;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Spire.Pdf.Graphics;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.IO;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Text;

</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> GetTextFont
{
    </span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Program
    {
        </span><span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> Main(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">[] args)
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 加载PDF文件</span>
            PdfDocument pdf = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> PdfDocument();
            pdf.LoadFromFile(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">E:\\PythonPDF\\南极.pdf</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取PDF文件中使用到的字体</span>
            PdfUsedFont[] fonts =<span style="color: rgba(0, 0, 0, 1)"> pdf.UsedFonts;

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建StringBuilder实例</span>
            StringBuilder str = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> StringBuilder();

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 遍历所有使用到的字体</span>
            <span style="color: rgba(0, 0, 255, 1)">foreach</span> (PdfUsedFont font <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> fonts)
            {
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取字体名</span>
                <span style="color: rgba(0, 0, 255, 1)">string</span> name =<span style="color: rgba(0, 0, 0, 1)"> font.Name;

                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取字体大小</span>
                <span style="color: rgba(0, 0, 255, 1)">float</span> size =<span style="color: rgba(0, 0, 0, 1)"> font.Size;

                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取字体类型</span>
                PdfFontType type =<span style="color: rgba(0, 0, 0, 1)"> font.Type;

                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取字体样式</span>
                PdfFontStyle style =<span style="color: rgba(0, 0, 0, 1)"> font.Style;

                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 将获取到的信息添加到StringBuilder实例中</span>
                str.AppendLine(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">字体名称： </span><span style="color: rgba(128, 0, 0, 1)">"</span> + name + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)"> 字体大小： </span><span style="color: rgba(128, 0, 0, 1)">"</span> + size + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)"> 字体类型： </span><span style="color: rgba(128, 0, 0, 1)">"</span> + type + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)"> 字体样式： </span><span style="color: rgba(128, 0, 0, 1)">"</span> +<span style="color: rgba(0, 0, 0, 1)"> style);

            }

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 写入一个txt文件</span>
            File.WriteAllText(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Pdf字体信息.txt</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, str.ToString());
        }
    }
}</span></pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/706090/202504/706090-20250407164942206-1843656124.png" alt=""></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.061365182155092596" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-07 16:50">2025-04-07 16:49</span>&nbsp;
<a href="https://www.cnblogs.com/Yesi">E-iceblue</a>&nbsp;
阅读(<span id="post_view_count">24</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18813112" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18813112);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18813112', targetLink: 'https://www.cnblogs.com/Yesi/p/18813112', title: '通过 C# 获取PDF文档中的字体名、大小、颜色、样式等' })">举报</a>
</div>
        