
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/huangSir-devops/p/18857799" title="发布于 2025-05-03 18:53">
    <span role="heading" aria-level="2">K8s新手系列之Label标签和Label选择器</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="概述">概述</h2>
<p>官网：<a href="https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/labels/" target="_blank" rel="noopener nofollow">https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/labels/</a></p>
<p>在K8s中，Label（标签） 是用于标识和组织集群资源（如Pod、Service、Deployment、Node等）的核心机制，其主要作用就是在各种资源上添加表示，用来对它们进行区分和选择。</p>
<h2 id="label的特点">Label的特点</h2>
<ul>
<li>一个Label会以key/value键值对的形式附加到各种对象上，如Node、Pod、Service等等</li>
<li>一个资源对象可以定义任意数量的Label ，同一个Label也可以被添加到任意数量的资源对象上去</li>
<li>Label通常在资源对象定义时确定，当然也可以在对象创建后动态添加或者删除</li>
</ul>
<h2 id="label的定义规则">Label的定义规则</h2>
<h3 id="key的定义规则">Key的定义规则</h3>
<ul>
<li><code>kubernetes.io/</code> 和<code> k8s.io/</code> 前缀是为 Kubernetes 核心组件保留的。</li>
<li>格式：[前缀/]名称</li>
<li>前缀（可选）：DNS子域格式（如 k8s.example.com/），不超过253字符。</li>
<li>名称：不超过63字符，允许字母、数字、-、_、.，且需以字母或数字开头和结尾</li>
</ul>
<h3 id="value的定义规则">Value的定义规则</h3>
<ul>
<li>必须为 63 个字符或更少（可以为空）</li>
<li>除非标签值为空，必须以字母数字字符（[a-z0-9A-Z]）开头和结尾</li>
<li>包含破折号（-）、下划线（_）、点（.）和字母或数字</li>
</ul>
<h2 id="label的操作">Label的操作</h2>
<h3 id="给资源添加label">给资源添加Label</h3>
<h4 id="方式一在资源清单中指定">方式一：在资源清单中指定</h4>
<p>可以在资源文件中的<code>metadata.labels</code>中指定标签。以定义Pod为例：</p>
<pre><code># 创建Pod
[root@master01 ~/label]# cat pod-label.yaml
apiVersion: v1
kind: Pod
metadata:
  name: pod-label
  # 添加label标签，标签以key: value的形式定义
  labels:
    app: nginx
spec:
  containers:
  - name: nginx-container
    image: nginx
[root@master01 ~/label]# kubectl apply -f pod-label.yaml
pod/pod-label created

# 验证是否定义成功
[root@master01 ~/label]# kubectl get pod pod-label --show-labels
NAME        READY   STATUS    RESTARTS   AGE   LABELS
pod-label   1/1     Running   0          49s   app=nginx
</code></pre>
<h4 id="方式二直接在已存在的资源上添加label">方式二：直接在已存在的资源上添加Label</h4>
<p>语法：</p>
<pre><code>kubectl label pods &lt;pod-name&gt; &lt;labelKey=value&gt;
</code></pre>
<p>示例：在上述创建Pod中添加一个新的label</p>
<pre><code># 添加label
[root@master01 ~/label]# kubectl label pods pod-label env=dev
pod/pod-label labeled
# 验证是否添加成功
[root@master01 ~/label]# kubectl get pod pod-label --show-labels
NAME        READY   STATUS    RESTARTS   AGE     LABELS
pod-label   1/1     Running   0          4m10s   app=nginx,env=dev
</code></pre>
<h3 id="修改资源中指定的labelvalue">修改资源中指定的LabelValue</h3>
<p>Label的Key无法进行修改，只能进行删除，或者添加一个新的Key，将原来的Key进行删除，形成修改的假象，这里我们主要讲解修改Label的Value</p>
<p>语法：</p>
<pre><code>kubectl label pods &lt;pod-name&gt; &lt;labelKey=value&gt; --overwrite
</code></pre>
<p>示例：将上述Pod的env的value修改为prod</p>
<pre><code># 修改Label
[root@master01 ~/label]# kubectl label pods pod-label env=prod --overwrite
pod/pod-label labeled
# 验证是否修改成功
[root@master01 ~/label]# kubectl get pod pod-label --show-labels
NAME        READY   STATUS    RESTARTS   AGE   LABELS
pod-label   1/1     Running   0          12m   app=nginx,env=prod
</code></pre>
<h3 id="查看资源中的label">查看资源中的Label</h3>
<p>示例：</p>
<pre><code># 查看指定资源的Label
[root@master01 ~/label]# kubectl get pod --show-labels
NAME                READY   STATUS    RESTARTS   AGE   LABELS
pod-label           1/1     Running   0          13m   app=nginx,env=prod
static-web-node02   1/1     Running   0          18m   role=myrole

# 查看指定资源的Label列
[root@master01 ~/label]# kubectl get pod -L env,app
NAME                READY   STATUS    RESTARTS   AGE   ENV    APP
pod-label           1/1     Running   0          13m   prod   nginx
static-web-node02   1/1     Running   0          18m
</code></pre>
<h3 id="删除资源中的label">删除资源中的Label</h3>
<p>语法：</p>
<pre><code># 注意，labelKey后有一个"-"减号
kubectl label pods &lt;pod-name&gt; &lt;labelKey&gt;-
</code></pre>
<p>示例：删除上述Pod中的env的label</p>
<pre><code># 删除Label
[root@master01 ~/label]# kubectl label pod pod-label env-
pod/pod-label unlabeled

# 验证是否删除成功
[root@master01 ~/label]# kubectl get pod pod-label --show-labels
NAME        READY   STATUS    RESTARTS   AGE   LABELS
pod-label   1/1     Running   0          18m   app=nginx
</code></pre>
<h2 id="label选择器">Label选择器</h2>
<p>官网文档：<a href="https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/labels/#label-selectors" target="_blank" rel="noopener nofollow">https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/labels/#label-selectors</a></p>
<p>在Kubernetes中，Label选择器（Label Selector） 是用于根据标签（Label）筛选和操作资源的核心机制。<br>
Kubernetes中支持两种类型的Label选择器</p>
<h3 id="等式选择器">等式选择器</h3>
<p>通过精确匹配标签的键和值来筛选资源，支持以下操作符：</p>
<ul>
<li><code>=</code>或者<code>==</code>：匹配key等于指定value的资源</li>
</ul>
<pre><code># 选择所有包含 `env=prod` 标签的Pod
kubectl get pods -l env=prod
</code></pre>
<ul>
<li><code>!=</code>：匹配键值不等于指定值的资源</li>
</ul>
<pre><code># 选择所有不包含 `tier=frontend` 标签的Pod
kubectl get pods -l tier!=frontend
</code></pre>
<h3 id="集合选择器">集合选择器</h3>
<p>通过集合操作符（如 in、notin、exists）灵活筛选资源，支持更复杂的条件。</p>
<ul>
<li>in：指定key的value在指定的集合中</li>
</ul>
<pre><code># 选择 `env` 是 `prod` 或 `staging` 的Pod
kubectl get pods -l "env in (prod, staging)"
</code></pre>
<ul>
<li>notin: key的value不在指定集合中</li>
</ul>
<pre><code>kubectl get pods -l "env notin (frontend, backend)"
</code></pre>
<ul>
<li>exists：key必须存在（不关心value）</li>
</ul>
<pre><code># 选择存在env这个key的Pod
kubectl get pods -l "env,app"
</code></pre>
<ul>
<li>doesnotexist：key必须不存在</li>
</ul>
<pre><code># 选择不包含 `tier`、`test` 标签的Pod，
# 注意！！！这里需要使用单引号，使用双引号可能导致bash不解析
kubectl get pods -l '!tier,!test'
</code></pre>
<h2 id="通过label操作k8s的资源">通过Label操作K8s的资源</h2>
<h3 id="通过label查看指定的资源">通过Label查看指定的资源</h3>
<p>语法：</p>
<pre><code>kubectl get &lt;resource-type&gt; -l &lt;label-operation&gt; -n &lt;namespace&gt;
</code></pre>
<p>示例：</p>
<pre><code># 查看label为app=nginx的Pod
[root@master01 ~/label]# kubectl get pod -l "app=nginx"
NAME        READY   STATUS    RESTARTS   AGE
pod-label   1/1     Running   0          37m

# 查看calico-system名称空间下指定的Label存在的Pod
[root@master01 ~/label]# kubectl get po -l "app.kubernetes.io/name" -n calico-system
NAME                                       READY   STATUS    RESTARTS        AGE
calico-kube-controllers-585c6db9c7-9wm4p   1/1     Running   1 (6d22h ago)   6d23h
calico-node-64sq8                          1/1     Running   0               22h
calico-node-kgkmk                          1/1     Running   0               22h
calico-node-vn47d                          1/1     Running   0               22h
calico-typha-666d79c78b-65szp              1/1     Running   1 (6d22h ago)   6d23h
calico-typha-666d79c78b-n9mjq              1/1     Running   1 (6d22h ago)   6d23h
csi-node-driver-92w48                      2/2     Running   4 (6d22h ago)   6d23h
csi-node-driver-96tfv                      2/2     Running   2 (6d22h ago)   6d23h
csi-node-driver-wbf7v                      2/2     Running   2 (6d22h ago)   6d23h
</code></pre>
<h3 id="通过label删除资源">通过Label删除资源</h3>
<p>语法：</p>
<pre><code>kubectl delete &lt;resource-type&gt; -l &lt;label&gt; -n &lt;namespace&gt;
</code></pre>
<p>示例：</p>
<pre><code># 通过label删除Pod
[root@master01 ~/label]# kubectl delete po -l "app=nginx"
pod "pod-label" deleted

# 验证是否删除成功
[root@master01 ~/label]# kubectl get po pod-label
Error from server (NotFound): pods "pod-label" not found
</code></pre>
<h2 id="资源文件中使用选择器">资源文件中使用选择器</h2>
<h3 id="示例deployment中使用">示例：Deployment中使用</h3>
<p>在Deployment中，spec.selector 用于选择目标Pod。常用 <code>matchLabels</code> 或 <code>matchExpressions</code>：</p>
<pre><code>apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: nginx   # 精确匹配标签 app=nginx
    matchExpressions:  # 集合选择器（可选）
      - {key: env, operator: In, values: [prod, staging]}
  template:
    metadata:
      labels:
        app: nginx
        env: prod
    # ... Pod配置
</code></pre>
<h3 id="示例service中使用">示例：Service中使用</h3>
<p>Service通过 spec.selector 选择Pod：</p>
<pre><code>apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx   # 选择所有包含 app=nginx 标签的Pod
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9376
</code></pre>
<h2 id="label及label选择器的使用场景">Label及Label选择器的使用场景</h2>
<ul>
<li>批量操作资源：通过标签选择器批量操作符合条件的资源</li>
<li>服务发现：Service通过选择器关联Pod，实现动态流量路由</li>
<li>多维度分组：按照业务、环境、层级等多维度管理资源</li>
<li>通过标签区分新旧版本Pod，逐步切换流量</li>
</ul>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/huangSir-devops/" target="_blank">huangSir-devops</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/huangSir-devops/p/18857799" target="_blank">https://www.cnblogs.com/huangSir-devops/p/18857799</a>，微信Vac666666，欢迎交流</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.3237848269710648" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-03 18:53">2025-05-03 18:53</span>&nbsp;
<a href="https://www.cnblogs.com/huangSir-devops">huangSir-devops</a>&nbsp;
阅读(<span id="post_view_count">5</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18857799);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18857799', targetLink: 'https://www.cnblogs.com/huangSir-devops/p/18857799', title: 'K8s新手系列之Label标签和Label选择器' })">举报</a>
</div>
        