
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lulight/p/18786601" title="发布于 2025-03-22 15:23">
    <span role="heading" aria-level="2">【Azure Developer】分享两段Python代码处理表格(CSV格式)数据 : 根据每列的内容生成SQL语句</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>问题描述</h1>
<p>在处理一个数据收集工作任务上，收集到的数据内容格式都不能直接对应到数据库中的表格内容。</p>
<p>&nbsp;</p>
<p><strong>比如：</strong></p>
<p><strong>第一种情况：</strong>服务名作为第一列内容，然后之后每一列为一个人名，1：代表此人拥有这个服务，0：代表不拥有。&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/2127802/202503/2127802-20250322143119350-1207375880.png" width="999" height="190" loading="lazy"></p>
<p><strong>第二种情况：</strong>服务名称为第一列，第二列紧跟人名，并均有重复的情况。</p>
<p><img src="https://img2024.cnblogs.com/blog/2127802/202503/2127802-20250322143916416-416962691.png" width="999" height="375" loading="lazy"></p>
<p>** 以上两种情况，都需要转换为 Name所对应的Services数据（多个Services用逗号连接在一起)。</p>
<p>&nbsp;</p>
<p>由于数据量大，如果人工处理，工作量非常巨大，机械性，重复且易出错。于是，借助Python Pandas，短短几句代码就可以实现！</p>
<p>&nbsp;</p>
<h1>问题解答</h1>
<h2>1： 通过引入&nbsp;pandas 组件，读取CSV文件</h2>
<div>
<blockquote>
<div>import pandas as pd</div>
<div>&nbsp;</div>
<div><span style="background-color: initial">df = pd.read_csv('service.csv')</span></div>
</blockquote>
</div>
<h2>2：第一种情况：使用双层 for 循环</h2>
<ul>
<li>第一层循环文件中的全部列，并且增加一个“行索引” rowIdx ，用于标记并获取当前行所代表的Service名称</li>
<li>第二层循环列中的每一个单元格，判断值是否等于1，相等则取出Service名并进行追加</li>
<li>第二层循环完成后，对 services 字符串的最后一个逗号进行清除</li>
<li>根据固定格式，正常UPDATE SQL语句</li>
</ul>
<div>
<div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">for</span> column <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> df.columns: 
    services </span>=<span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">
    rowIdx </span>=<span style="color: rgba(128, 0, 128, 1)">0</span>

    <span style="color: rgba(0, 0, 255, 1)">for</span> value <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> df[column]:
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> value ==<span style="color: rgba(128, 0, 128, 1)">1.0</span><span style="color: rgba(0, 0, 0, 1)">:
            services </span>+= df[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Services</span><span style="color: rgba(128, 0, 0, 1)">'</span>][rowIdx] + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">,</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">               
        rowIdx </span>+= <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">

    services </span>= services.rstrip(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">,</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    
    print(f</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">UPDATE [dbo].[NameServiceMapping] SET Services='{services}' WHERE NAME ='{column}'</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    print(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\n</span><span style="color: rgba(128, 0, 0, 1)">"</span>)</pre>
</div>
<p>&nbsp;</p>
<h2>3：第二种情况：使用一个 For 加 字典数据结构 {}&nbsp;</h2>
<ul>
<li>读取第二列 Name， 作为字典&nbsp;d&nbsp;的Key</li>
<li>判断字典 d 中是否已经存在这个Name的Key, 使用 __contains__ 进行判断
<ul>
<li>如存在，则追加第一列中的Service。</li>
<li>反之，则为字典新加一个Key。</li>
</ul>
</li>
<li>最后循环字典 d, 并生成 UPDATE SQL语句</li>
</ul>
<div class="cnblogs_code">
<pre>d =<span style="color: rgba(0, 0, 0, 1)"> {}

rowindex </span>=<span style="color: rgba(0, 0, 0, 1)">0
</span><span style="color: rgba(0, 0, 255, 1)">for</span> name <span style="color: rgba(0, 0, 255, 1)">in</span> df[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Name</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]:
    </span><span style="color: rgba(0, 0, 255, 1)">if</span>(d.<span style="color: rgba(128, 0, 128, 1)">__contains__</span><span style="color: rgba(0, 0, 0, 1)">(name)):
        d[name] </span>= d[name] + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">,</span><span style="color: rgba(128, 0, 0, 1)">"</span>+df[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Services</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">][rowindex]
    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
        d[name] </span>= df[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Services</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">][rowindex]
    rowindex </span>+=1

<span style="color: rgba(0, 0, 255, 1)">for</span> key <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> d:
    </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">UPDATE [dbo].[NameServiceMapping] SET Services='{d[key]}' WHERE NAME ='{key}'</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\n</span><span style="color: rgba(128, 0, 0, 1)">"</span>)</pre>
</div>
<p>&nbsp;</p>
</div>
<h2>3：执行结果</h2>
<p><em>第一种结果：</em></p>
<p><img src="https://img2024.cnblogs.com/blog/2127802/202503/2127802-20250322150834948-2015262180.png" width="666" height="414" loading="lazy"></p>
<p>&nbsp;</p>
<p><em>第二种结果：</em></p>
</div>
<p><img src="https://img2024.cnblogs.com/blog/2127802/202503/2127802-20250322152121785-1688958339.png" width="666" height="393" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>参考资料</h1>
<p>Python&nbsp;<span class="color_h1">字典(Dictionary)：<a href="https://www.runoob.com/python/python-dictionary.html" target="_blank" rel="noopener nofollow">https://www.runoob.com/python/python-dictionary.html</a></span></p>
<div><span class="color_h1">&nbsp;</span></div>
</div>
<div id="MySignature" role="contentinfo">
    <div style="background: #1c5f55;height: 36px;width: 618px;padding: 14px 5px 0px 3px;">
  <p style="
    font-weight: bold;
    color: white;
">当在复杂的环境中面临问题，格物之道需：浊而静之徐清，安以动之徐生。 云中，恰是如此!</p>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.03440836381365741" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-22 15:29">2025-03-22 15:23</span>&nbsp;
<a href="https://www.cnblogs.com/lulight">路边两盏灯</a>&nbsp;
阅读(<span id="post_view_count">2</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18786601" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18786601);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18786601', targetLink: 'https://www.cnblogs.com/lulight/p/18786601', title: '【Azure Developer】分享两段Python代码处理表格(CSV格式)数据 : 根据每列的内容生成SQL语句' })">举报</a>
</div>
        