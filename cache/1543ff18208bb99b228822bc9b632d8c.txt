
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/codingtea/p/19057190" title="发布于 2025-08-25 16:32">
    <span role="heading" aria-level="2">基于stm32单片机家庭环境监测系统</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div id="article_content" class="article_content clearfix">
<div id="content_views" class="htmledit_views atom-one-dark">
<p id="main-toc">&nbsp;</p>
<h2 id="1.%E6%BC%94%E7%A4%BA%E8%A7%86%E9%A2%91"><a name="t0"></a>1.演示视频</h2>
<p><a class=" wrap external" href="https://www.bilibili.com/video/BV18de4z8Est/?vd_source=fe50c8500dae5a3543c98e910b928780" target="_blank" data-za-detail-view-id="1043" rel="noopener nofollow">基于stm32单片机家庭环境监测系统视频演示_哔哩哔哩_bilibili</a></p>
<h2 id="2.%20%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D">2. 项目介绍</h2>
<p>本项目基于STM32F103C8T6最小系统板，打造了一个功能强大、显示直观的家庭环境监测系统。系统集成了温湿度、光照强度、多种气体、人体感应等传感器，并通过OLED屏幕本地实时显示数据，同时支持手机蓝牙小程序远程监控与告警。它不仅是一个全面的环境数据采集站，更是一个具备布防/撤防功能的简易家庭安防系统。</p>
<h2 id="3.%20%E7%B3%BB%E7%BB%9F%E5%8A%9F%E8%83%BD%E4%BA%AE%E7%82%B9"><a name="t2"></a>3. 系统功能亮点</h2>
<ul>
<li>​<strong>环境多参数监测</strong>​：实时采集温度、湿度、光照强度、空气质量（CO/CO2/烟雾等综合指标）。</li>
<li>​<strong>人体红外感应</strong>​：检测指定区域内是否有人体活动。</li>
<li>​<strong>双模远程通信</strong>​：支持ESP32 Wi-Fi模块​（预留扩展接口）和HC-05/06蓝牙模块与手机连接。</li>
<li>​<strong>手机小程序监控</strong>​：通过自开发的微信小程序，可远程查看所有传感器数据，并进行系统控制。</li>
<li>​<strong>智能安防布防</strong>​：具备“布防”和“撤防”两种模式。在布防模式下，检测到人体入侵将触发本地蜂鸣器高声警报并推送手机提醒。</li>
<li>​<strong>交互与提示</strong>​：配备四个功能按键和一个蜂鸣器，方便本地操作和声音提示。</li>
</ul>
<h2 id="4.%E7%A1%AC%E4%BB%B6%E8%AE%BE%E8%AE%A1"><a name="t3"></a>4.硬件设计</h2>
<h3 id="4.%20%E7%A1%AC%E4%BB%B6%E7%BB%84%E6%88%90%20(BOM%20List)"><a name="t4"></a>4.1 硬件组成 (BOM List)</h3>
<div class="table-box">
<table>
<thead>
<tr><th>模块名称</th><th>型号/规格</th><th>通信协议</th><th>功能</th></tr>
</thead>
<tbody>
<tr>
<td>​<strong>主控芯片</strong>​</td>
<td>STM32F103C8T6 (最小系统板)</td>
<td>-</td>
<td>系统核心，负责数据处理与逻辑控制</td>
</tr>
<tr>
<td>​<strong>显示模块</strong>​</td>
<td>0.96英寸 OLED屏</td>
<td>I2C</td>
<td>本地实时显示所有传感器数据及系统状态</td>
</tr>
<tr>
<td>​<strong>温湿度传感器</strong>​</td>
<td>AHT20</td>
<td>I2C</td>
<td>高精度测量环境温度和湿度</td>
</tr>
<tr>
<td>​<strong>光照传感器</strong>​</td>
<td>GY-30 (BH1750)</td>
<td>I2C</td>
<td>检测环境光照强度 (Lux)</td>
</tr>
<tr>
<td>​<strong>气体传感器</strong>​</td>
<td>MQ-135</td>
<td>模拟/数字</td>
<td>综合检测空气质量、CO2、CO、烟雾、苯等有害气体</td>
</tr>
<tr>
<td>​<strong>人体红外传感器</strong>​</td>
<td>HC-SR501</td>
<td>数字GPIO</td>
<td>检测人体移动</td>
</tr>
<tr>
<td>​<strong>蓝牙模块</strong>​</td>
<td>HC-05 或 HC-06</td>
<td>UART</td>
<td>与手机小程序进行串口蓝牙通信</td>
</tr>
<tr>
<td>​<strong>Wi-Fi模块</strong>​</td>
<td>ESP-01S (ESP8266) 或 ESP32</td>
<td>UART</td>
<td>预留物联网扩展接口，可接入云平台</td>
</tr>
<tr>
<td>​<strong>声学提示</strong>​</td>
<td>有源蜂鸣器</td>
<td>GPIO</td>
<td>发出警报和提示音</td>
</tr>
<tr>
<td>​<strong>输入控制</strong>​</td>
<td>4x轻触按键</td>
<td>GPIO</td>
<td>本地切换模式、设置参数等</td>
</tr>
<tr>
<td>​<strong>供电接口</strong>​</td>
<td>Type-C</td>
<td>-</td>
<td>5V供电，并配有电源开关</td>
</tr>
</tbody>
</table>
</div>
<h3 id="4.2%E4%B8%BB%E8%A6%81%E8%8A%AF%E7%89%87%E4%BB%8B%E7%BB%8D"><a name="t5"></a>4.2主要芯片介绍</h3>
<p>​<strong>STM32F103C8T6介绍</strong></p>
<p>STM32F103C8T6是一款由意法半导体公司（ST）推出的基于Cortex-M3内核的32位微控制器，硬件采用LQFP48封装，属于ST公司微控制器中的STM32系列。</p>
<p><img alt="wechat_2025-08-22_173643_874" loading="lazy" style="display: block; margin-left: auto; margin-right: auto" data-src="https://img2024.cnblogs.com/blog/3687401/202508/3687401-20250825162300965-33011818.png" class="lazyload"></p>
<p>&nbsp;</p>
<p><img alt="" data-src="https://i-blog.csdnimg.cn/direct/a187c25bf07b4d15863602fb0fa3183d.png" class="lazyload"></p>
<p><strong>AHT20温湿度传感器介绍</strong></p>
<p><strong>AHT20</strong>是一款高精度数字温湿度传感器，采用I2C通信（地址0x38），供电需3.3V。其温度精度±0.3℃，湿度精度±2%RH，出厂已校准，即插即用。相比DHT11，精度更高、通信更稳定，是环境监测项目的理想选择。</p>
<p style="text-align: center"><img alt="" data-src="https://i-blog.csdnimg.cn/direct/675a93eccb0f4a49942f42c1fad91531.png" class="lazyload"></p>
<p style="text-align: center"><img alt="wechat_2025-08-22_173414_240" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3687401/202508/3687401-20250825162335459-1932598048.png" class="lazyload"></p>
<p>&nbsp;</p>
<p><strong>BH1750光照强度传感器介绍</strong></p>
<p><strong>BH1750FVI</strong>​ 是一款数字式环境光强度传感器。它通过 ​<strong>I2C</strong>​ 接口直接输出光照度值（单位：Lux），测量范围 ​<strong>1 - 65535 lx</strong>。具有高精度、无需外部元件等优点，是替代光敏电阻的理想选择，广泛应用于自动背光调节和智能照明系统。</p>
<p><img alt="wechat_2025-08-22_173935_537" loading="lazy" style="display: block; margin-left: auto; margin-right: auto" data-src="https://img2024.cnblogs.com/blog/3687401/202508/3687401-20250825162346539-2108761849.png" class="lazyload"></p>
<p>&nbsp;</p>
<p><img alt="" style="text-align: center" data-src="https://i-blog.csdnimg.cn/direct/b76ce51456114c7d9e1c5e56a6653008.png" class="lazyload"></p>
<p><strong>ECB01H2S蓝牙模块介绍</strong></p>
<p><strong>ECB01H2S</strong>​ 是一款基于蓝牙5.0的<strong>串口透传模块</strong>。它将复杂的蓝牙协议封装成简单的串口通信，用户只需通过<strong>AT指令</strong>进行配置，即可让主控设备（如STM32）通过串口与手机等蓝牙主机实现无线数据双向传输，极大简化了无线通信功能的开发流程，广泛应用于智能硬件和数据传输项目。</p>
<p><img alt="wechat_2025-08-22_174227_152" loading="lazy" style="display: block; margin-left: auto; margin-right: auto" data-src="https://img2024.cnblogs.com/blog/3687401/202508/3687401-20250825162401693-1436577520.png" class="lazyload"></p>
<p>&nbsp;</p>
<p style="text-align: center"><img alt="" data-src="https://i-blog.csdnimg.cn/direct/00fca88ef9e045d682478ba2e49c6c09.png" class="lazyload"></p>
<p><strong>I2C OLED显示屏介绍&nbsp;</strong></p>
<p>该屏幕拥有<strong>128x64</strong>高分辨率，采用<strong>I2C接口</strong>，仅需两根信号线即可驱动。其像素点自发光，显示黑色时功耗极低，无需背光，视觉效果清晰锐利，对比度高，是嵌入式项目中最受欢迎的小型显示方案。</p>
<p><img alt="wechat_2025-08-22_174018_856" loading="lazy" style="display: block; margin-left: auto; margin-right: auto" data-src="https://img2024.cnblogs.com/blog/3687401/202508/3687401-20250825162411434-1894730924.png" class="lazyload"></p>
<p>&nbsp;</p>
<p style="text-align: center"><img alt="" data-src="https://i-blog.csdnimg.cn/direct/f6bec644fbda4b88abe8b0f06c4613a9.png" class="lazyload"></p>
<p><strong>ESP8266WiFi模块介绍</strong></p>
<p><strong>ESP8266</strong>​ 是一款低成本、高性能的Wi-Fi SOC芯片模块。其核心功能是通过<strong>串口AT指令</strong>与单片机通信，轻松实现设备联网。它内置了TCP/IP协议栈，可作为独立MCU或Wi-Fi适配器使用，是物联网项目中实现无线连接最经典、性价比最高的解决方案之一。</p>
<p><img alt="wechat_2025-08-22_174054_704" loading="lazy" style="display: block; margin-left: auto; margin-right: auto" data-src="https://img2024.cnblogs.com/blog/3687401/202508/3687401-20250825162429723-1282193890.png" class="lazyload"></p>
<p>&nbsp;</p>
<h2 id="%E2%80%8B%E7%BC%96%E8%BE%91" style="text-align: center"><a name="t6"></a><img alt="" data-src="https://i-blog.csdnimg.cn/direct/7134319da7f04566a73e569fc74759ab.png" class="lazyload"></h2>
<h2 id="5.%20%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0"><a name="t7"></a>5.系统设计与实现</h2>
<h3 id="5.1%E6%95%B4%E4%BD%93%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1"><a name="t8"></a>5.1整体系统设计</h3>
<p><img alt="76bab49486774c0cba95846dfd571661" loading="lazy" style="display: block; margin-left: auto; margin-right: auto" data-src="https://img2024.cnblogs.com/blog/3687401/202508/3687401-20250825162444451-942898825.png" class="lazyload"></p>
<p>&nbsp;</p>
<h3 id="5.2%20%E6%95%B0%E6%8D%AE%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E9%80%BB%E8%BE%91"><a name="t9"></a>5.2 <a class="hl hl-1" href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E6%B5%81&amp;spm=1001.2101.3001.7020" target="_blank" data-report-view="{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E6%B5%81&amp;spm=1001.2101.3001.7020&quot;,&quot;extra&quot;:&quot;{\&quot;searchword\&quot;:\&quot;数据流\&quot;}&quot;}" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E6%B5%81&amp;spm=1001.2101.3001.7020&quot;,&quot;extra&quot;:&quot;{\&quot;searchword\&quot;:\&quot;数据流\&quot;}&quot;}" data-tit="数据流" data-pretit="数据流" rel="noopener nofollow">数据流</a>与工作逻辑</h3>
<ol>
<li>​<strong>数据采集层</strong>​：STM32主控循环读取各个传感器的数据。</li>
<li>​<strong>数据处理层</strong>​：对原始数据进行滤波、校准和计算，得到有意义的物理量（如℃、%RH、Lux、空气质量等级）。</li>
<li>​<strong>本地显示层</strong>​：处理后的数据通过I2C协议发送到OLED屏幕进行刷新显示。</li>
<li>​<strong>远程通信层</strong>​：STM32通过串口将数据按照自定义协议格式发送给蓝牙模块，再由蓝牙传输至手机小程序。手机下发的控制指令（如布防）也通过此路径逆向传输给STM32。</li>
</ol>
<p>​<strong>逻辑控制层</strong>​：主控根据当前系统模式（布防/撤防）和传感器状态（是否检测到人）执行相应的动作，如控制蜂鸣器。<img alt="4ed3461df1ee4154bf4aeeef46c4ac83" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3687401/202508/3687401-20250825162513174-1362517357.png" class="lazyload"></p>
<ul>
<li><strong>本地显示效果：</strong>​</li>
</ul>
<p>&nbsp;</p>
<p>　　　　屏幕第一页显示：<code>温度: 26.5℃</code>， <code>湿度: 45%</code>， <code>光照: 256 Lux</code>。</p>
<p>　　　　屏幕循环显示气体数据：<code>Air Q: Good</code>， <code>Gas: None</code>， <code>PM2.5: 15</code>， <code>Smoke: Low</code>。</p>
<p>　　　　人体检测状态：<code>P: Yes</code> (有人) 或 <code>P: No</code> (无人)。</p>
<p>　　　　安防状态：<code>Security On</code> (布防) 或 <code>Security Off</code> (撤防)。</p>
<p>&nbsp;</p>
<ul>
<li>​<strong>手机监控</strong>​：</li>
</ul>
<p>&nbsp;</p>
<p>　　　　手机小程序成功连接蓝牙后，界面同步显示所有环境数据。</p>
<p>　　　　设有“布防/撤防”切换按钮。</p>
<p>　　　　在布防状态下，若检测到人体，手机端会弹出<strong>弹窗警报</strong>，并显示“警戒中！”。</p>
<p>&nbsp;</p>
<ul>
<li>​<strong>安防联动</strong>​：</li>
</ul>
<p>&nbsp;</p>
<p>​　　　　<strong>撤防模式</strong>​：检测到人体，仅在屏幕和手机端显示“有人”，无声音警报。​<strong>​（适合家中有人时）​</strong>​</p>
<p>​　　　　<strong>布防模式</strong>​：检测到人体，​<strong>蜂鸣器立即鸣叫</strong>，同时手机端弹出警报。​<strong>​（适合出门或夜间）​</strong>​​</p>
<h2 id="6.%E4%BB%A3%E7%A0%81%E5%B1%95%E7%A4%BA"><a name="t10"></a>6.代码展示</h2>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> USER CODE BEGIN Header </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">*
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body - 简化版
  ******************************************************************************
  </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> USER CODE END Header </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> Includes ------------------------------------------------------------------</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">main.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">oled.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">temp_humi.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">gas_sensor.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">light_sensor.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">bluetooth.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">gas_display.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">buzzer.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;stdio.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>.h&gt;

<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> Private variables ---------------------------------------------------------</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
I2C_HandleTypeDef hi2c1;
ADC_HandleTypeDef hadc1;
UART_HandleTypeDef huart1;

</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> Private function prototypes -----------------------------------------------</span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">void</span> SystemClock_Config(<span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">void</span> MX_GPIO_Init(<span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">void</span> MX_I2C1_Init(<span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">void</span> MX_ADC1_Init(<span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">void</span> MX_USART1_UART_Init(<span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">);

</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">*
  * @brief  IR传感器初始化 - 简化版
  * @param  None
  * @retval None
  </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">void</span> IR_Sensor_Init(<span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">)
{
  GPIO_InitTypeDef GPIO_InitStruct </span>= {<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">};
  
  __HAL_RCC_GPIOB_CLK_ENABLE();
  
  GPIO_InitStruct.Pin </span>=<span style="color: rgba(0, 0, 0, 1)"> GPIO_PIN_9;
  GPIO_InitStruct.Mode </span>=<span style="color: rgba(0, 0, 0, 1)"> GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull </span>=<span style="color: rgba(0, 0, 0, 1)"> GPIO_PULLUP;
  GPIO_InitStruct.Speed </span>=<span style="color: rgba(0, 0, 0, 1)"> GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, </span>&amp;<span style="color: rgba(0, 0, 0, 1)">GPIO_InitStruct);
}

</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">*
  * @brief  检测人体存在 - 简化版
  * @param  None
  * @retval 1: 检测到人体, 0: 未检测到人体
  </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
uint8_t IR_Sensor_Detect(</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">)
{
  </span><span style="color: rgba(0, 0, 255, 1)">return</span> (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_RESET) ? <span style="color: rgba(128, 0, 128, 1)">1</span> : <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
}

</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">*
  * @brief  应用程序入口点
  * @retval int
  </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">int</span> main(<span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">)
{
  </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 初始化HAL库 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
  HAL_Init();
  
  </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 配置系统时钟 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
  SystemClock_Config();
  
  </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 初始化所有外设 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_ADC1_Init();
  MX_USART1_UART_Init();
  
  </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 初始化所有传感器和外设 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
  OLED_Init();
  TEMP_HUMI_Init();
  GAS_SENSOR_Init();
  LIGHT_SENSOR_Init();
  IR_Sensor_Init();
  Bluetooth_Init();
  BUZZER_Init();
  
  </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 显示初始屏幕 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
  OLED_Clear();
  OLED_ShowString(</span><span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Starting...</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">12</span><span style="color: rgba(0, 0, 0, 1)">);
  OLED_Refresh();
  
  </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 初始化变量 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
  <span style="color: rgba(0, 0, 255, 1)">float</span> temperature = <span style="color: rgba(128, 0, 128, 1)">0.0f</span><span style="color: rgba(0, 0, 0, 1)">;
  </span><span style="color: rgba(0, 0, 255, 1)">float</span> humidity = <span style="color: rgba(128, 0, 128, 1)">0.0f</span><span style="color: rgba(0, 0, 0, 1)">;
  </span><span style="color: rgba(0, 0, 255, 1)">float</span> light = <span style="color: rgba(128, 0, 128, 1)">0.0f</span><span style="color: rgba(0, 0, 0, 1)">;
  uint8_t ir_status </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
  uint8_t last_ir_status </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
  uint8_t bt_send_counter </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
  
  </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 创建气体数据结构 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
  GAS_DATA gas_data </span>= {<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">};
  
  </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 气体传感器初始校准 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
  GAS_SENSOR_Calibrate(</span><span style="color: rgba(128, 0, 128, 1)">400.0f</span><span style="color: rgba(0, 0, 0, 1)">);
  
  </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 手动设置一些初始值，确保数据不为空 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
  gas_data.raw_ppm </span>= <span style="color: rgba(128, 0, 128, 1)">500.0f</span><span style="color: rgba(0, 0, 0, 1)">;
  gas_data.co2_equivalent </span>= <span style="color: rgba(128, 0, 128, 1)">400.0f</span><span style="color: rgba(0, 0, 0, 1)">;
  gas_data.combustible_gas </span>= <span style="color: rgba(128, 0, 128, 1)">150.0f</span><span style="color: rgba(0, 0, 0, 1)">;
  gas_data.smoke_density </span>= <span style="color: rgba(128, 0, 128, 1)">75.0f</span><span style="color: rgba(0, 0, 0, 1)">;
  gas_data.pm25 </span>= <span style="color: rgba(128, 0, 128, 1)">50.0f</span><span style="color: rgba(0, 0, 0, 1)">;
  gas_data.aqi </span>= <span style="color: rgba(128, 0, 128, 1)">100</span><span style="color: rgba(0, 0, 0, 1)">;
  gas_data.change_rate </span>= <span style="color: rgba(128, 0, 128, 1)">0.5f</span><span style="color: rgba(0, 0, 0, 1)">;
  gas_data.gas_type </span>=<span style="color: rgba(0, 0, 0, 1)"> GAS_TYPE_NORMAL;
  gas_data.safety_level </span>=<span style="color: rgba(0, 0, 0, 1)"> SAFETY_LEVEL_SAFE;
  gas_data.leak_detected </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
  gas_data.fire_risk </span>= <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">;
  
  </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 无限循环 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
  <span style="color: rgba(0, 0, 255, 1)">while</span> (<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">)
  {
    </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 检查布防/撤防状态是否改变 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (Bluetooth_GetAndClearStatusChanged()) {
      uint8_t armed_status </span>=<span style="color: rgba(0, 0, 0, 1)"> Bluetooth_GetArmedStatus();
      DISPLAY_ArmedStatus(armed_status, </span><span style="color: rgba(128, 0, 128, 1)">3000</span><span style="color: rgba(0, 0, 0, 1)">);
      
      </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (armed_status) {
        BUZZER_LoudAlarm();
      } </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
        BUZZER_Beep(</span><span style="color: rgba(128, 0, 128, 1)">100</span><span style="color: rgba(0, 0, 0, 1)">);
      }
    }
    
    </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 读取传感器数据 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    TEMP_HUMI_ReadData(</span>&amp;temperature, &amp;<span style="color: rgba(0, 0, 0, 1)">humidity);
    </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (LIGHT_SENSOR_IsConnected()) {
      LIGHT_SENSOR_ReadLight(</span>&amp;<span style="color: rgba(0, 0, 0, 1)">light);
    }
    ir_status </span>=<span style="color: rgba(0, 0, 0, 1)"> IR_Sensor_Detect();
    
    </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 更新气体传感器数据 - 确保每次循环都更新 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    uint16_t adc_value </span>=<span style="color: rgba(0, 0, 0, 1)"> GAS_SENSOR_Read();
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (adc_value &gt; <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">) {
      GAS_SENSOR_UpdateData(</span>&amp;<span style="color: rgba(0, 0, 0, 1)">gas_data);
    }
    
    </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 人体检测处理 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span> (ir_status &amp;&amp; !<span style="color: rgba(0, 0, 0, 1)">last_ir_status) {
      </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 更新显示 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
      DISPLAY_UpdateEnvData(temperature, humidity, light, ir_status);
      DISPLAY_GasData(</span>&amp;<span style="color: rgba(0, 0, 0, 1)">gas_data);
      
      </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 发送数据到蓝牙 - 恢复原来的两次发送格式 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
      <span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 第一次发送基本环境数据 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
      <span style="color: rgba(0, 0, 255, 1)">char</span> bt_data1[<span style="color: rgba(128, 0, 128, 1)">150</span><span style="color: rgba(0, 0, 0, 1)">];
      sprintf(bt_data1, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{\"temp\":%.1f,\"humi\":%.1f,\"light\":%.1f,\"human\":%d,\"aqi\":%d,\"pm25\":%.1f}\r\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
              temperature, humidity, light, ir_status, gas_data.aqi, gas_data.pm25);
      Bluetooth_SendString(bt_data1);
      
      </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 短暂延时，确保第一条数据发送完成 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
      HAL_Delay(</span><span style="color: rgba(128, 0, 128, 1)">20</span><span style="color: rgba(0, 0, 0, 1)">);
      
      </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 第二次发送气体详细数据 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
      <span style="color: rgba(0, 0, 255, 1)">char</span> bt_data2[<span style="color: rgba(128, 0, 128, 1)">150</span><span style="color: rgba(0, 0, 0, 1)">];
      sprintf(bt_data2, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{\"co2\":%.1f,\"ppm\":%.1f,\"gas_type\":%d,\"safety\":%d,\"leak\":%d,\"fire\":%d,\"rate\":%.2f}\r\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
              gas_data.co2_equivalent, gas_data.raw_ppm, gas_data.gas_type, 
              gas_data.safety_level, gas_data.leak_detected, gas_data.fire_risk, gas_data.change_rate);
      Bluetooth_SendString(bt_data2);
      
      </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 布防状态下发出警报 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
      <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (Bluetooth_GetArmedStatus()) {
        BUZZER_EmergencyAlarm();
      }
    }
    last_ir_status </span>=<span style="color: rgba(0, 0, 0, 1)"> ir_status;
    
    </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 更新显示 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    DISPLAY_UpdateEnvData(temperature, humidity, light, ir_status);
    DISPLAY_GasData(</span>&amp;<span style="color: rgba(0, 0, 0, 1)">gas_data);
    
    </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 处理蓝牙数据 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    Bluetooth_Process();
    
    </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 每5秒通过蓝牙发送环境数据 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span> (++bt_send_counter &gt;= <span style="color: rgba(128, 0, 128, 1)">5</span><span style="color: rgba(0, 0, 0, 1)">) {
      bt_send_counter </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
      
      </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 恢复原来的两次发送格式 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
      <span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 第一次发送基本环境数据 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
      <span style="color: rgba(0, 0, 255, 1)">char</span> bt_data1[<span style="color: rgba(128, 0, 128, 1)">150</span><span style="color: rgba(0, 0, 0, 1)">];
      sprintf(bt_data1, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{\"temp\":%.1f,\"humi\":%.1f,\"light\":%.1f,\"human\":%d,\"aqi\":%d,\"pm25\":%.1f}\r\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
              temperature, humidity, light, ir_status, gas_data.aqi, gas_data.pm25);
      Bluetooth_SendString(bt_data1);
      
      </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 短暂延时，确保第一条数据发送完成 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
      HAL_Delay(</span><span style="color: rgba(128, 0, 128, 1)">50</span><span style="color: rgba(0, 0, 0, 1)">);
      
      </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 第二次发送气体详细数据 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
      <span style="color: rgba(0, 0, 255, 1)">char</span> bt_data2[<span style="color: rgba(128, 0, 128, 1)">150</span><span style="color: rgba(0, 0, 0, 1)">];
      sprintf(bt_data2, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{\"co2\":%.1f,\"ppm\":%.1f,\"gas_type\":%d,\"safety\":%d,\"leak\":%d,\"fire\":%d,\"rate\":%.2f}\r\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
              gas_data.co2_equivalent, gas_data.raw_ppm, gas_data.gas_type, 
              gas_data.safety_level, gas_data.leak_detected, gas_data.fire_risk, gas_data.change_rate);
      Bluetooth_SendString(bt_data2);
    }
    
    </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 切换LED指示灯状态 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
    
    </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 延时1秒 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    HAL_Delay(</span><span style="color: rgba(128, 0, 128, 1)">1000</span><span style="color: rgba(0, 0, 0, 1)">);
  }
}

</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">*
  * @brief 系统时钟配置
  * @retval None
  </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">void</span> SystemClock_Config(<span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">)
{
  RCC_OscInitTypeDef RCC_OscInitStruct </span>= {<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">};
  RCC_ClkInitTypeDef RCC_ClkInitStruct </span>= {<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">};
  RCC_PeriphCLKInitTypeDef PeriphClkInit </span>= {<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">};

  RCC_OscInitStruct.OscillatorType </span>=<span style="color: rgba(0, 0, 0, 1)"> RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState </span>=<span style="color: rgba(0, 0, 0, 1)"> RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue </span>=<span style="color: rgba(0, 0, 0, 1)"> RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState </span>=<span style="color: rgba(0, 0, 0, 1)"> RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState </span>=<span style="color: rgba(0, 0, 0, 1)"> RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource </span>=<span style="color: rgba(0, 0, 0, 1)"> RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL </span>=<span style="color: rgba(0, 0, 0, 1)"> RCC_PLL_MUL9;
  HAL_RCC_OscConfig(</span>&amp;<span style="color: rgba(0, 0, 0, 1)">RCC_OscInitStruct);

  RCC_ClkInitStruct.ClockType </span>= RCC_CLOCKTYPE_HCLK|<span style="color: rgba(0, 0, 0, 1)">RCC_CLOCKTYPE_SYSCLK
                              </span>|RCC_CLOCKTYPE_PCLK1|<span style="color: rgba(0, 0, 0, 1)">RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource </span>=<span style="color: rgba(0, 0, 0, 1)"> RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider </span>=<span style="color: rgba(0, 0, 0, 1)"> RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider </span>=<span style="color: rgba(0, 0, 0, 1)"> RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider </span>=<span style="color: rgba(0, 0, 0, 1)"> RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(</span>&amp;<span style="color: rgba(0, 0, 0, 1)">RCC_ClkInitStruct, FLASH_LATENCY_2);
  
  </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 配置ADC时钟 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
  PeriphClkInit.PeriphClockSelection </span>=<span style="color: rgba(0, 0, 0, 1)"> RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection </span>=<span style="color: rgba(0, 0, 0, 1)"> RCC_ADCPCLK2_DIV6;
  HAL_RCCEx_PeriphCLKConfig(</span>&amp;<span style="color: rgba(0, 0, 0, 1)">PeriphClkInit);
}

</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">*
  * @brief GPIO初始化函数
  * @param None
  * @retval None
  </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">void</span> MX_GPIO_Init(<span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">)
{
  GPIO_InitTypeDef GPIO_InitStruct </span>= {<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">};

  </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 使能GPIO时钟 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 配置PC13引脚为输出 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
  GPIO_InitStruct.Pin </span>=<span style="color: rgba(0, 0, 0, 1)"> GPIO_PIN_13;
  GPIO_InitStruct.Mode </span>=<span style="color: rgba(0, 0, 0, 1)"> GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull </span>=<span style="color: rgba(0, 0, 0, 1)"> GPIO_NOPULL;
  GPIO_InitStruct.Speed </span>=<span style="color: rgba(0, 0, 0, 1)"> GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, </span>&amp;<span style="color: rgba(0, 0, 0, 1)">GPIO_InitStruct);
  
  </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 配置PA0引脚为模拟输入（气体传感器） </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
  GPIO_InitStruct.Pin </span>=<span style="color: rgba(0, 0, 0, 1)"> GPIO_PIN_0;
  GPIO_InitStruct.Mode </span>=<span style="color: rgba(0, 0, 0, 1)"> GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull </span>=<span style="color: rgba(0, 0, 0, 1)"> GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, </span>&amp;<span style="color: rgba(0, 0, 0, 1)">GPIO_InitStruct);
}

</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">*
  * @brief I2C1初始化函数
  * @param None
  * @retval None
  </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">void</span> MX_I2C1_Init(<span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">)
{
  hi2c1.Instance </span>=<span style="color: rgba(0, 0, 0, 1)"> I2C1;
  hi2c1.Init.ClockSpeed </span>= <span style="color: rgba(128, 0, 128, 1)">100000</span><span style="color: rgba(0, 0, 0, 1)">;
  hi2c1.Init.DutyCycle </span>=<span style="color: rgba(0, 0, 0, 1)"> I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
  hi2c1.Init.AddressingMode </span>=<span style="color: rgba(0, 0, 0, 1)"> I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode </span>=<span style="color: rgba(0, 0, 0, 1)"> I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
  hi2c1.Init.GeneralCallMode </span>=<span style="color: rgba(0, 0, 0, 1)"> I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode </span>=<span style="color: rgba(0, 0, 0, 1)"> I2C_NOSTRETCH_DISABLE;
  
  HAL_I2C_Init(</span>&amp;<span style="color: rgba(0, 0, 0, 1)">hi2c1);
}

</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">*
  * @brief ADC1初始化函数
  * @param None
  * @retval None
  </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">void</span> MX_ADC1_Init(<span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">)
{
  ADC_ChannelConfTypeDef sConfig </span>= {<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">};

  </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> ADC1基本配置 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
  hadc1.Instance </span>=<span style="color: rgba(0, 0, 0, 1)"> ADC1;
  hadc1.Init.ScanConvMode </span>=<span style="color: rgba(0, 0, 0, 1)"> ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode </span>=<span style="color: rgba(0, 0, 0, 1)"> DISABLE;
  hadc1.Init.DiscontinuousConvMode </span>=<span style="color: rgba(0, 0, 0, 1)"> DISABLE;
  hadc1.Init.ExternalTrigConv </span>=<span style="color: rgba(0, 0, 0, 1)"> ADC_SOFTWARE_START;
  hadc1.Init.DataAlign </span>=<span style="color: rgba(0, 0, 0, 1)"> ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion </span>= <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
  HAL_ADC_Init(</span>&amp;<span style="color: rgba(0, 0, 0, 1)">hadc1);

  </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 配置ADC通道0（PA0引脚）- 气体传感器 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
  sConfig.Channel </span>=<span style="color: rgba(0, 0, 0, 1)"> ADC_CHANNEL_0;
  sConfig.Rank </span>=<span style="color: rgba(0, 0, 0, 1)"> ADC_REGULAR_RANK_1;
  sConfig.SamplingTime </span>=<span style="color: rgba(0, 0, 0, 1)"> ADC_SAMPLETIME_55CYCLES_5;
  HAL_ADC_ConfigChannel(</span>&amp;hadc1, &amp;<span style="color: rgba(0, 0, 0, 1)">sConfig);
  
  </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 校准ADC </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
  HAL_ADCEx_Calibration_Start(</span>&amp;<span style="color: rgba(0, 0, 0, 1)">hadc1);
}

</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">*
  * @brief USART1初始化函数
  * @param None
  * @retval None
  </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">void</span> MX_USART1_UART_Init(<span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">)
{
  huart1.Instance </span>=<span style="color: rgba(0, 0, 0, 1)"> USART1;
  huart1.Init.BaudRate </span>= <span style="color: rgba(128, 0, 128, 1)">9600</span><span style="color: rgba(0, 0, 0, 1)">;
  huart1.Init.WordLength </span>=<span style="color: rgba(0, 0, 0, 1)"> UART_WORDLENGTH_8B;
  huart1.Init.StopBits </span>=<span style="color: rgba(0, 0, 0, 1)"> UART_STOPBITS_1;
  huart1.Init.Parity </span>=<span style="color: rgba(0, 0, 0, 1)"> UART_PARITY_NONE;
  huart1.Init.Mode </span>=<span style="color: rgba(0, 0, 0, 1)"> UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl </span>=<span style="color: rgba(0, 0, 0, 1)"> UART_HWCONTROL_NONE;
  huart1.Init.OverSampling </span>=<span style="color: rgba(0, 0, 0, 1)"> UART_OVERSAMPLING_16;
  
  HAL_UART_Init(</span>&amp;<span style="color: rgba(0, 0, 0, 1)">huart1);
  
  </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 启用UART接收中断 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
  HAL_NVIC_SetPriority(USART1_IRQn, </span><span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">);
  HAL_NVIC_EnableIRQ(USART1_IRQn);
}

</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">*
  * @brief 错误处理函数
  * @retval None
  </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">void</span> Error_Handler(<span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">)
{
  __disable_irq();
  </span><span style="color: rgba(0, 0, 255, 1)">while</span> (<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">)
  {
  }
}

#ifdef  USE_FULL_ASSERT
</span><span style="color: rgba(0, 0, 255, 1)">void</span> assert_failed(uint8_t *<span style="color: rgba(0, 0, 0, 1)">file, uint32_t line)
{
  </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 用户可以添加自己的实现来报告文件名和行号 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
}
</span><span style="color: rgba(0, 0, 255, 1)">#endif</span> /* USE_FULL_ASSERT */</pre>
</div>
<p>&nbsp;</p>
<div class="hide-preCode-box"><span class="hide-preCode-bt" data-report-view="{&quot;spm&quot;:&quot;1001.2101.3001.7365&quot;}"><img alt="" class="look-more-preCode contentImg-no-view lazyload" title="" data-src="https://csdnimg.cn/release/blogv2/dist/pc/img/runCode/icon-arrowwhite.png"></span></div>
<h2><a name="t11"></a>7.​原理图</h2>
<h2><img alt="668eda3bdaa440bb94d8b1539b46a553" loading="lazy" style="display: block; margin-left: auto; margin-right: auto" data-src="https://img2024.cnblogs.com/blog/3687401/202508/3687401-20250825162718550-1031062932.png" class="lazyload"></h2>
<p>&nbsp;</p>
<p style="text-align: center"><img alt="" data-src="https://i-blog.csdnimg.cn/direct/668eda3bdaa440bb94d8b1539b46a553.png" class="lazyload"></p>
<p><strong>欢迎在评论区交流讨论！​</strong></p>
</div>
<div data-report-view="{&quot;mod&quot;:&quot;1585297308_001&quot;,&quot;spm&quot;:&quot;1001.2101.3001.6548&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/ningfoshao8678/article/details/150614399&quot;,&quot;extend1&quot;:&quot;pc&quot;,&quot;ab&quot;:&quot;new&quot;}">&nbsp;</div>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0006944444444444445" data-date-updated="2025-08-25 16:33">2025-08-25 16:32</span>&nbsp;
<a href="https://www.cnblogs.com/codingtea">Coding茶水间</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19057190);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19057190', targetLink: 'https://www.cnblogs.com/codingtea/p/19057190', title: '基于stm32单片机家庭环境监测系统' })">举报</a>
</div>
        