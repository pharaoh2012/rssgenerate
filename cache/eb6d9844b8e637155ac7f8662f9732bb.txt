
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Ex1st/p/18806771/anonymous" title="发布于 2025-04-02 21:36">
    <span role="heading" aria-level="2">Anonymous打靶学习笔记(5)</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>参考视频https://www.bilibili.com/video/BV1XufaYAEKc/?spm_id_from=333.1387.search.video_card.click<br>
<img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552593-2100520346.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552695-1767376441.png" alt="" loading="lazy">常见的100个端口都是关闭的</p>
<p>只有扩大扫描范围了<img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552703-1382180324.png" alt="" loading="lazy"></p>
<p>开了四个端口<img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552675-857971209.png" alt="" loading="lazy"></p>
<p>ftp：文件共享服务</p>
<p><img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552669-1070363937.png" alt="" loading="lazy"></p>
<blockquote>
<h3 id="243f3288">🔹 端口 139：NetBIOS Session Service</h3>
1、协议：**NetBIOS over TCP/IP（NBT）**
<p>2、使用服务：<strong>SMBv1</strong> 协议</p>
<p>3、功能：用于早期 Windows 网络中的文件/打印共享</p>
<p>4、特点：</p>
<pre><code>- 基于 NetBIOS（老式协议）
- 一般在 Windows XP 或更早系统中常见
- 使用 TCP 协议
</code></pre>
<h3 id="f01aca37">🔹 端口 445：Microsoft-DS（Directory Services）</h3>
1、协议：**SMB（Server Message Block） 直接在 TCP/IP 上传输**
<p>2、使用服务：<strong>SMBv2 / SMBv3</strong></p>
<p>3、功能：</p>
<pre><code>- 文件共享（Windows 网络共享）
- 打印机共享
- 远程服务调用
- Active Directory 通信
</code></pre>
<p>4、特点：</p>
<pre><code>- 新版本的 SMB 都使用这个端口（SMBv2、SMBv3）
- 不再依赖 NetBIOS（不需要 137-139）
- 默认启用在 Windows 2000 及之后的版本
</code></pre>
<h3 id="4b693b79">🛡️ 安全相关：</h3>
**1、端口 445 是攻击目标的高危端口之一！**
<pre><code>- 曾被用于 **永恒之蓝（EternalBlue）** 漏洞（利用 SMBv1）
- 被多个蠕虫、勒索病毒（如 WannaCry）广泛利用
</code></pre>
<p>2、SMBv1 <strong>不安全，建议禁用</strong>（微软官方早就不推荐使用）</p>
</blockquote>
<p>第三个问题，直接匿名访问，无需输入密码</p>
<p><img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552686-1387955223.png" alt="" loading="lazy"></p>
<h1 id="p1OBs">利用ftp</h1>
对ftp进行匿名访问时，需要指定用户名，这里就是这个房间的名字，这也是常见的ftp匿名登录的用户名之一
<p><img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552922-1044839468.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552823-697538384.png" alt="" loading="lazy"></p>
<p>允许匿名访问，登录成功</p>
<p><img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552834-1506480801.png" alt="" loading="lazy"></p>
<p>这里看到三个文件，其中有一个脚本文件，把它下载下来看看</p>
<p><img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552844-859190775.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552961-2090368378.png" alt="" loading="lazy"></p>
<p>目前还没有学shell代码，所以查一下意思：</p>
<p><img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552931-482901094.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213553146-2085636830.png" alt="" loading="lazy"><img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552839-1480902015.png" alt="" loading="lazy"><img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213553161-1449931783.png" alt="" loading="lazy"><img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552946-625815991.png" alt="" loading="lazy"></p>
<blockquote>
<p>总结一下它就是一个被自动执行的定时清理任务</p>
</blockquote>
<p>漏洞点分析:</p>
<p><a href="https://www.yuque.com/yuqueyonghu9xetqv/dm8s9z/op7y6qxkrkz16mph" target="_blank" rel="noopener nofollow">超可爱的chatGPT的shell脚本漏洞讲解</a></p>
<p>但是这里好像直接覆盖脚本就行了（这里确实有写入权限</p>
<blockquote>
<p>既然我们可以访问到这个共享，如果我们有写入权限的话，可以把它覆盖成反弹shell的代码，让它反弹一个shell给我们</p>
</blockquote>
<p>第一台靶机也是反弹shell，我们可以把它们联系起来总结一下：</p>
<blockquote>
<p>第一台：</p>
<p><img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552974-1911537786.png" alt="" loading="lazy"></p>
</blockquote>
<p>首先我们都需要有一个拥有写入权限的脚本文件，这样才能注入payload覆盖原文件，然后再执行，从而成功反弹shell</p>
<p>那后面的步骤就很清晰了</p>
<p>1、get下载clsean.sh</p>
<p>2、修改成反弹shell的payload</p>
<p>3、监听指定的端口</p>
<p>4、put放回去（上传shell脚本）<strong>（先监听端口再上传脚本比较好）</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552983-993894424.png" alt="" loading="lazy"><img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552960-1351862039.png" alt="" loading="lazy"><img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552947-370118871.png" alt="" loading="lazy"></p>
<p>这里提示需要tty-present<img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552957-721885142.png" alt="" loading="lazy"></p>
<blockquote>
<h3 id="74bac40b">TY Spawn Shell（生成 TTY Shell）</h3>
在渗透测试（pen test）过程中，你可能会拿到一个 **没有 TTY 的 shell**，但你希望能更方便地与系统交互。这时可以尝试使用一些命令，**生成一个有 TTY 的交互式 shell**（也叫 “spawn a tty shell”）。当然，是否成功取决于目标系统的环境和已安装的软件。
<h3 id="4ae1c4c1">🔸解释一下背景：</h3>
在一些攻击过程中，比如通过某个漏洞执行命令拿到的反弹 shell（reverse shell），你拿到的是一个“非交互式 shell”，特点是：
<p>1、不能用方向键编辑命令</p>
<p>2、无法使用 <code>Ctrl+C</code> 中断</p>
<p>3、无法清屏或用 <code>sudo</code>（因为 sudo 会提示密码，需要 TTY）</p>
<p>4、交互很卡、不方便</p>
<p>这时候我们希望通过一些技巧，把这个 shell 升级成带 TTY 的“伪终端”，就可以像正常登录进系统那样操作。</p>
</blockquote>
<p><a href="https://www.yuque.com/yuqueyonghu9xetqv/dm8s9z/fg2gv6gha7d17glg" target="_blank" rel="noopener nofollow">生成tty shell</a>原理</p>
<p>那根据他的要求生成tty shell之后，我们再试试sudo -l<img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552964-15879337.png" alt="" loading="lazy"></p>
<p>可以看到还是需要密码<img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552949-398333783.png" alt="" loading="lazy"></p>
<p>这里可以一直换行防止shell断掉</p>
<p>于是枚举中sudo -l的思路就断了，我们可以跟着第三台靶机的枚举思路，SUID尝试</p>
<p><img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552940-39968715.png" alt="" loading="lazy"></p>
<blockquote>
<p>-p：加了之后会继承env的权限，因为这里设置了suid标志位是root权限，如果不加是以当前用户来执行的</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552980-1169007014.png" alt="" loading="lazy"><img src="https://img2024.cnblogs.com/blog/3527808/202504/3527808-20250402213552957-1234692824.png" alt="" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.027554294453703703" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-02 21:37">2025-04-02 21:36</span>&nbsp;
<a href="https://www.cnblogs.com/Ex1st">RC42</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18806771" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18806771);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18806771', targetLink: 'https://www.cnblogs.com/Ex1st/p/18806771/anonymous', title: 'Anonymous打靶学习笔记(5)' })">举报</a>
</div>
        