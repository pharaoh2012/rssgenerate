
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/qq21497936/p/18838000" title="发布于 2025-04-21 09:40">
    <span role="heading" aria-level="2">live555开发笔记（二）：live555创建RTSP服务器源码剖析，创建rtsp服务器的基本流程总结</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div class="cl-preview-section">
<h1>前言</h1>
</div>
<div class="cl-preview-section">
<p>  基于Live555的流媒体服务器方案源码剖析，了解基本的代码搭建步骤。</p>
</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="Demo_5"></a>Demo</h1>
</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202504/1971530-20250421093949578-1939434111.gif" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<h2><a id="h264265_7"></a>关于.h264与.265</h2>
</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202504/1971530-20250421093949293-278608939.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<p>  没深入研究，但是h264的后缀名.264替换为.h264文件，流媒体服务器连接播放rtsp是成功的。</p>
</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="_14"></a>阅读示例</h1>
</div>
<div class="cl-preview-section">
<p>  这是学习的必经之路，live555本身是一套框架，我们需要按照预定义的流程建立服务，按照预定义的一些虚函数自己实现这些函数。文档和其他资料上这块都很少，所以自行参照示例进行逐步学习。<br>  <img src="https://img2024.cnblogs.com/blog/1971530/202504/1971530-20250421093949174-2103786228.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="TestOnDemandRTSPServercpp_23"></a>TestOnDemandRTSPServer.cpp示例研究</h1>


</div>
<div class="cl-preview-section">
<p>  从main函数开始，遇到新的类则单独往下跳，分析完再回来，建议看至少2-3次，前后呼应分析过程。</p>


</div>
<div class="cl-preview-section">
<h2><a id="_25"></a>全局变量</h2>


</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp"><span class="token comment">// 环境输出的
UsageEnvironment<span class="token operator">* env<span class="token punctuation">;
<span class="token comment">// 要使每个流的第二个和后续客户端重用与第一个客户端相同的输入流（而不是从每个客户端的开始播放文件），请将以下“False”更改为“True”
Boolean reuseFirstSource <span class="token operator">= False<span class="token punctuation">;  
<span class="token comment">// 要仅流式传输*MPEG-1 or 2视频“I”帧（例如，为了减少网络带宽），请将以下“False”更改为“True”：
Boolean iFramesOnly <span class="token operator">= False<span class="token punctuation">;
</span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<h2><a id="_34"></a>代码流程</h2>
</div>
<div class="cl-preview-section">
<p>  首先创建任务调度器，然后设置我们的使用环境（注意：此代码是所有live555都需要这么做的）：</p>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp">TaskScheduler<span class="token operator">* scheduler <span class="token operator">= <span class="token class-name">BasicTaskScheduler<span class="token operator">::<span class="token function">createNew<span class="token punctuation">(<span class="token punctuation">)<span class="token punctuation">;
env <span class="token operator">= <span class="token class-name">BasicUsageEnvironment<span class="token operator">::<span class="token function">createNew<span class="token punctuation">(<span class="token operator">*scheduler<span class="token punctuation">)<span class="token punctuation">;
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  开始进行权限控制，可以不控制则设置为null：</p>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp"><span class="token comment">// 用于可选用户/密码身份验证的数据结构：
UserAuthenticationDatabase<span class="token operator">* authDB <span class="token operator">= <span class="token constant">NULL<span class="token punctuation">;
</span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  控制是否可以权限控制的用户名和密码：</p>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-c[[">// 是否对接入权限进行控制
//#define ACCESS_CONTROL // 屏蔽了，则是没定义，不进行权限控制
#ifdef ACCESS_CONTROL
// 要实现对RTSP服务器的客户端访问控制，请执行以下操作：
authDB = new UserAuthenticationDatabase;
// 添加权限用于名称和密码，添加允许访问服务器的每个&lt;username&gt;、&lt;password&gt;
authDB-&gt;addUserRecord("username1", "password1");
// 对允许访问服务器的每个&lt;username&gt;、&lt;password&gt;重复上述操作。
#endif
</code></pre>
</div>
<div class="cl-preview-section">
<p>  创建RTSP服务：</p>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp"><span class="token comment">// 创建RTSP服务，其中autoDB要是没有权限控制则是输入0(默认不写入就是输入0）
RTSPServer<span class="token operator">* rtspServer <span class="token operator">= <span class="token class-name">RTSPServer<span class="token operator">::<span class="token function">createNew<span class="token punctuation">(<span class="token operator">*env<span class="token punctuation">, <span class="token number">8554<span class="token punctuation">, authDB<span class="token punctuation">)<span class="token punctuation">;
<span class="token keyword">if <span class="token punctuation">(rtspServer <span class="token operator">== <span class="token constant">NULL<span class="token punctuation">) 
<span class="token punctuation">{
  <span class="token operator">*env <span class="token operator">&lt;&lt; <span class="token string">"Failed to create RTSP server: " <span class="token operator">&lt;&lt; env<span class="token operator">-&gt;<span class="token function">getResultMsg<span class="token punctuation">(<span class="token punctuation">) <span class="token operator">&lt;&lt; <span class="token string">"\n"<span class="token punctuation">;
  <span class="token function">exit<span class="token punctuation">(<span class="token number">1<span class="token punctuation">)<span class="token punctuation">;
<span class="token punctuation">}
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  创建描述符，这个可以不用：</p>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp"><span class="token comment">// 描述符，
<span class="token keyword">char <span class="token keyword">const<span class="token operator">* descriptionString <span class="token operator">= <span class="token string">"Session streamed by \"testOnDemandRTSPServer\""<span class="token punctuation">;
</span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  下面就是关键步骤了，添加RTSP服务器的流，整个流分为好几种，我们本章主要测试mp4文件，想挑mp4的来解说，但是没有mp4，那我们就直接挑一个.H264来解说：</p>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp"><span class="token comment">// ===== 下面开始创建实际的流，有很多流，根据格式来 =====
<span class="token comment">// A MPEG-4 video elementary stream:
<span class="token punctuation">{
  <span class="token keyword">char <span class="token keyword">const<span class="token operator">* streamName <span class="token operator">= <span class="token string">"mpeg4ESVideoTest"<span class="token punctuation">;
    <span class="token keyword">char <span class="token keyword">const<span class="token operator">* inputFileName <span class="token operator">= <span class="token string">"test.m4e"<span class="token punctuation">;
    ServerMediaSession<span class="token operator">* sms <span class="token operator">= <span class="token class-name">ServerMediaSession<span class="token operator">::<span class="token function">createNew<span class="token punctuation">(<span class="token operator">*env<span class="token punctuation">, streamName<span class="token punctuation">, streamName<span class="token punctuation">, descriptionString<span class="token punctuation">)<span class="token punctuation">;
    sms<span class="token operator">-&gt;<span class="token function">addSubsession<span class="token punctuation">(<span class="token class-name">MPEG4VideoFileServerMediaSubsession<span class="token operator">::<span class="token function">createNew<span class="token punctuation">(<span class="token operator">*env<span class="token punctuation">, inputFileName<span class="token punctuation">, reuseFirstSource<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    rtspServer<span class="token operator">-&gt;<span class="token function">addServerMediaSession<span class="token punctuation">(sms<span class="token punctuation">)<span class="token punctuation">;
    <span class="token function">announceStream<span class="token punctuation">(rtspServer<span class="token punctuation">, sms<span class="token punctuation">, streamName<span class="token punctuation">, inputFileName<span class="token punctuation">)<span class="token punctuation">;
  <span class="token punctuation">}
  <span class="token comment">// A H.264 video elementary stream:
  <span class="token punctuation">{
    <span class="token keyword">char <span class="token keyword">const<span class="token operator">* streamName <span class="token operator">= <span class="token string">"h264ESVideoTest"<span class="token punctuation">;
    <span class="token keyword">char <span class="token keyword">const<span class="token operator">* inputFileName <span class="token operator">= <span class="token string">"test.264"<span class="token punctuation">;
    ServerMediaSession<span class="token operator">* sms <span class="token operator">= <span class="token class-name">ServerMediaSession<span class="token operator">::<span class="token function">createNew<span class="token punctuation">(<span class="token operator">*env<span class="token punctuation">, streamName<span class="token punctuation">, streamName<span class="token punctuation">, descriptionString<span class="token punctuation">)<span class="token punctuation">;
    sms<span class="token operator">-&gt;<span class="token function">addSubsession<span class="token punctuation">(<span class="token class-name">H264VideoFileServerMediaSubsession<span class="token operator">::<span class="token function">createNew<span class="token punctuation">(<span class="token operator">*env<span class="token punctuation">, inputFileName<span class="token punctuation">, reuseFirstSource<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    rtspServer<span class="token operator">-&gt;<span class="token function">addServerMediaSession<span class="token punctuation">(sms<span class="token punctuation">)<span class="token punctuation">;
    <span class="token function">announceStream<span class="token punctuation">(rtspServer<span class="token punctuation">, sms<span class="token punctuation">, streamName<span class="token punctuation">, inputFileName<span class="token punctuation">)<span class="token punctuation">;
  <span class="token punctuation">}
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  其中announceStream函数只是打印流名称和文件名，不用管。其他的代码就是如何生成流，如何添加进去，后续大部分代码都是这样，至于具体的文件都是继承了几个主要类，笔者全部扫了一遍，本代码里面涉及的几个SubSession相关的子类，我们需要流媒体服务器处理数据，就是需要重写这些文件subsession来实现数据的处理，现在都截图出来，如下：<br>  <img src="https://img2024.cnblogs.com/blog/1971530/202504/1971530-20250421093949275-134515776.png" alt="在这里插入图片描述"></p>
<div class="cl-preview-section">
<p> <img src="https://img2024.cnblogs.com/blog/1971530/202504/1971530-20250421093949215-1469173740.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202504/1971530-20250421093949229-653932197.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202504/1971530-20250421093949411-1827090268.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202504/1971530-20250421093949416-1092598994.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202504/1971530-20250421093949432-1035275325.png" alt="在这里插入图片描述"><br>  所以一共有三种：<br>• 继承自：FileServerMediaSubsession<br>• 继承自：OnDemandServerMediaSubsession<br>• 继承自：Medium<br>  以上就是按照框架的方式设置一些参数，如帧率、分辨率、音频流数据、视频流数据，但是这个发的是视频流数据，编码还是解码都需要自己弄。<br>  思考一下，如果是有一个本地文件，当作流媒体服务器，那么需要在有客户端获取rtsp流的时候，服务器就进行编码器准备开始解码，要数据的时候，就解码一帧数据往外发，大致就是这个流程。<br>  这里对subsession不做深入探讨，继续分析接下来的代码：</p>


</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp"><span class="token comment">// 尝试为RTSP over HTTP隧道创建一个HTTP服务器,首先尝试使用默认HTTP端口（80），然后使用其他HTTP端口号（8000和8080）
<span class="token keyword">if<span class="token punctuation">(   rtspServer<span class="token operator">-&gt;<span class="token function">setUpTunnelingOverHTTP<span class="token punctuation">(<span class="token number">80<span class="token punctuation">)
  <span class="token operator">|| rtspServer<span class="token operator">-&gt;<span class="token function">setUpTunnelingOverHTTP<span class="token punctuation">(<span class="token number">8000<span class="token punctuation">)
  <span class="token operator">|| rtspServer<span class="token operator">-&gt;<span class="token function">setUpTunnelingOverHTTP<span class="token punctuation">(<span class="token number">8080<span class="token punctuation">)<span class="token punctuation">)
<span class="token punctuation">{
    <span class="token comment">// 打印输出
    <span class="token operator">*env <span class="token operator">&lt;&lt; <span class="token string">"\n(We use port " <span class="token operator">&lt;&lt; rtspServer<span class="token operator">-&gt;<span class="token function">httpServerPortNum<span class="token punctuation">(<span class="token punctuation">) <span class="token operator">&lt;&lt; <span class="token string">" for optional RTSP-over-HTTP tunneling.)\n"<span class="token punctuation">;
<span class="token punctuation">}<span class="token keyword">else<span class="token punctuation">{
    <span class="token operator">*env <span class="token operator">&lt;&lt; <span class="token string">"\n(RTSP-over-HTTP tunneling is not available.)\n"<span class="token punctuation">;
<span class="token punctuation">}
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  这是启动rtsp服务的http端口了。</p>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp"><span class="token comment">// 启动流服务，不再返回了
env<span class="token operator">-&gt;<span class="token function">taskScheduler<span class="token punctuation">(<span class="token punctuation">)<span class="token punctuation">.<span class="token function">doEventLoop<span class="token punctuation">(<span class="token punctuation">)<span class="token punctuation">;
</span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  这是进入rtsp服务器循环了，程序将阻塞在此处了。</p>
</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="Live555_134"></a>Live555流媒体服务实现基本流程</h1>
</div>
<div class="cl-preview-section">
<h2><a id="RTSP_135"></a>步骤一：创建RTSP服务器</h2>
</div>
<div class="cl-preview-section">
<p>  创建一个Rtsp服务器实例，服务器实例后续需要添加流服务媒体实例。<br>  <img src="https://img2024.cnblogs.com/blog/1971530/202504/1971530-20250421093949483-833234615.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<h2><a id="ServerMediaSession_139"></a>步骤二：添加ServerMediaSession实例</h2>


</div>
<div class="cl-preview-section">
<p>  创建服务媒体实例，这代表了一个流媒体对话，但是流媒体对话的流服务服务流需要单独创建，使用ServerMediaSubsession实例。<br>  <img src="https://img2024.cnblogs.com/blog/1971530/202504/1971530-20250421093949521-1668247552.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<h2><a id="ServerMediaSubSession_143"></a>步骤三：实现ServerMediaSubSession实例（实现重点）</h2>


</div>
<div class="cl-preview-section">
<p>  ServerMediaSubsession是具体服务流数的实例，在这个类中都需要实现流媒体的操作函数，这些操作函数决定了流媒体对应指令的具体参数配置和动作。<br>  这里分为三类：</p>


</div>
<div class="cl-preview-section">
<ul>
<li>继承自：FileServerMediaSubsession</li>
<li>继承自：OnDemandServerMediaSubsession</li>
<li>继承自：Medium<br>  实现一些函数，咱们也不太清楚，但是知道需要拿到流的原始数据然后喂出去。<br>  <img src="https://img2024.cnblogs.com/blog/1971530/202504/1971530-20250421093949481-1737930359.png" alt="在这里插入图片描述"></li>


</ul>


</div>
<div class="cl-preview-section">
<h2><a id="_152"></a>步骤四：启动服务端口</h2>


</div>
<div class="cl-preview-section">
<p>  为rtsp创建一个http服务器，对外可以连接到的rtsp服务器。<br>  <img src="https://img2024.cnblogs.com/blog/1971530/202504/1971530-20250421093949447-1313143750.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<h2><a id="_156"></a>步骤五：服务器运行</h2>


</div>
<div class="cl-preview-section">
<p>  这是服务器进入循环，当前线程（单线程则是主线程，同时也可以代表本进程）则会阻塞在此处。<br>  以上就是live555的rtsp建立rtsp服务器的流程，核心的点就在subsession中的数据处理，按照连接的流媒体格式，将流媒体的原始数据发出去，客户端就可以了播放了。<br>  <img src="https://img2024.cnblogs.com/blog/1971530/202504/1971530-20250421093949404-1036657013.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="_164"></a>整理后的中文注释源码</h1>


</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">"liveMedia.hh"
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">"BasicUsageEnvironment.hh"

<span class="token comment">// webm mkv文件使用
<span class="token keyword">static <span class="token keyword">char newDemuxWatchVariable<span class="token punctuation">;
<span class="token keyword">static MatroskaFileServerDemux<span class="token operator">* matroskaDemux<span class="token punctuation">;
<span class="token keyword">static <span class="token keyword">void <span class="token function">onMatroskaDemuxCreation<span class="token punctuation">(MatroskaFileServerDemux<span class="token operator">* newDemux<span class="token punctuation">, <span class="token keyword">void<span class="token operator">* <span class="token comment">/*clientData*/<span class="token punctuation">)
<span class="token punctuation">{
    matroskaDemux <span class="token operator">= newDemux<span class="token punctuation">;
    newDemuxWatchVariable <span class="token operator">= <span class="token number">1<span class="token punctuation">;
<span class="token punctuation">}

<span class="token comment">// ogg文件使用
<span class="token keyword">static OggFileServerDemux<span class="token operator">* oggDemux<span class="token punctuation">;
<span class="token keyword">static <span class="token keyword">void <span class="token function">onOggDemuxCreation<span class="token punctuation">(OggFileServerDemux<span class="token operator">* newDemux<span class="token punctuation">, <span class="token keyword">void<span class="token operator">* <span class="token comment">/*clientData*/<span class="token punctuation">)
<span class="token punctuation">{
    oggDemux <span class="token operator">= newDemux<span class="token punctuation">;
    newDemuxWatchVariable <span class="token operator">= <span class="token number">1<span class="token punctuation">;
<span class="token punctuation">}


<span class="token comment">// 打印流的相关信息
<span class="token keyword">static <span class="token keyword">void <span class="token function">announceStream<span class="token punctuation">(RTSPServer<span class="token operator">* rtspServer<span class="token punctuation">,
                           ServerMediaSession<span class="token operator">* sms<span class="token punctuation">,
                           <span class="token keyword">char <span class="token keyword">const<span class="token operator">* streamName<span class="token punctuation">,
                           <span class="token keyword">char <span class="token keyword">const<span class="token operator">* inputFileName<span class="token punctuation">)
<span class="token punctuation">{
    <span class="token comment">// 获取rtsp地址
    <span class="token keyword">char<span class="token operator">* url <span class="token operator">= rtspServer<span class="token operator">-&gt;<span class="token function">rtspURL<span class="token punctuation">(sms<span class="token punctuation">)<span class="token punctuation">;
    <span class="token comment">// 获取使用环境
    UsageEnvironment<span class="token operator">&amp; env <span class="token operator">= rtspServer<span class="token operator">-&gt;<span class="token function">envir<span class="token punctuation">(<span class="token punctuation">)<span class="token punctuation">;
    <span class="token comment">// 使用环境输出“流名称”和“输入文件名”
    env <span class="token operator">&lt;&lt; <span class="token string">"\n\"" <span class="token operator">&lt;&lt; streamName <span class="token operator">&lt;&lt; <span class="token string">"\" stream, from the file \"" <span class="token operator">&lt;&lt; inputFileName <span class="token operator">&lt;&lt; <span class="token string">"\"\n"<span class="token punctuation">;
    env <span class="token operator">&lt;&lt; <span class="token string">"Play this stream using the URL \"" <span class="token operator">&lt;&lt; url <span class="token operator">&lt;&lt; <span class="token string">"\"\n"<span class="token punctuation">;
    <span class="token keyword">delete<span class="token punctuation">[<span class="token punctuation">] url<span class="token punctuation">;
<span class="token punctuation">}

<span class="token keyword">int <span class="token function">main<span class="token punctuation">(<span class="token keyword">int argc<span class="token punctuation">, <span class="token keyword">char<span class="token operator">*<span class="token operator">* argv<span class="token punctuation">)
<span class="token punctuation">{
    <span class="token comment">// 全局环境输出的
    UsageEnvironment<span class="token operator">* env<span class="token punctuation">;

    <span class="token comment">// 要使每个流的第二个和后续客户端重用与第一个客户端相同的输入流（而不是从每个客户端的开始播放文件），请将以下“False”更改为“True”
    Boolean reuseFirstSource <span class="token operator">= False<span class="token punctuation">;

    <span class="token comment">// 要仅流式传输*MPEG-1 or 2视频“I”帧（例如，为了减少网络带宽），请将以下“False”更改为“True”：
    Boolean iFramesOnly <span class="token operator">= False<span class="token punctuation">;

    <span class="token comment">// 创建任务调度器、设置使用环境
    TaskScheduler<span class="token operator">* scheduler <span class="token operator">= <span class="token class-name">BasicTaskScheduler<span class="token operator">::<span class="token function">createNew<span class="token punctuation">(<span class="token punctuation">)<span class="token punctuation">;
    env <span class="token operator">= <span class="token class-name">BasicUsageEnvironment<span class="token operator">::<span class="token function">createNew<span class="token punctuation">(<span class="token operator">*scheduler<span class="token punctuation">)<span class="token punctuation">;

    <span class="token comment">// 用于可选用户/密码身份验证的数据结构：
    UserAuthenticationDatabase<span class="token operator">* authDB <span class="token operator">= <span class="token constant">NULL<span class="token punctuation">;
    <span class="token comment">// 是否对接入权限进行控制
<span class="token comment">//#define ACCESS_CONTROL
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">ifdef <span class="token expression">ACCESS_CONTROL
    <span class="token comment">// 要实现对RTSP服务器的客户端访问控制，请执行以下操作：
    authDB <span class="token operator">= <span class="token keyword">new UserAuthenticationDatabase<span class="token punctuation">;
    <span class="token comment">// 添加权限用于名称和密码，添加允许访问服务器的每个&lt;username&gt;、&lt;password&gt;
    authDB<span class="token operator">-&gt;<span class="token function">addUserRecord<span class="token punctuation">(<span class="token string">"username1"<span class="token punctuation">, <span class="token string">"password1"<span class="token punctuation">)<span class="token punctuation">;
    <span class="token comment">// 对允许访问服务器的每个&lt;username&gt;、&lt;password&gt;重复上述操作。
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">endif

    <span class="token comment">// 创建RTSP服务，其中autoDB要是没有权限控制则是输入0(默认不写入就是输入0）
    RTSPServer<span class="token operator">* rtspServer <span class="token operator">= <span class="token class-name">RTSPServer<span class="token operator">::<span class="token function">createNew<span class="token punctuation">(<span class="token operator">*env<span class="token punctuation">, <span class="token number">8554<span class="token punctuation">, authDB<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">if<span class="token punctuation">(rtspServer <span class="token operator">== <span class="token constant">NULL<span class="token punctuation">)
    <span class="token punctuation">{
        <span class="token operator">*env <span class="token operator">&lt;&lt; <span class="token string">"Failed to create RTSP server: " <span class="token operator">&lt;&lt; env<span class="token operator">-&gt;<span class="token function">getResultMsg<span class="token punctuation">(<span class="token punctuation">) <span class="token operator">&lt;&lt; <span class="token string">"\n"<span class="token punctuation">;
        <span class="token function">exit<span class="token punctuation">(<span class="token number">1<span class="token punctuation">)<span class="token punctuation">;
    <span class="token punctuation">}

    <span class="token comment">// 描述符，
    <span class="token keyword">char <span class="token keyword">const<span class="token operator">* descriptionString <span class="token operator">= <span class="token string">"Session streamed by \"testOnDemandRTSPServer\""<span class="token punctuation">;

    <span class="token comment">// 设置RTSP服务器可以提供的每个可能的流。
    <span class="token comment">// 每个这样的流都是使用“ServerMediaSession”对象实现的，
    <span class="token comment">// 每个音频/视频子流都有一个或多个“ServerMediaSubsession”对象。

    <span class="token comment">// ===== 下面开始创建实际的流，有很多流，根据格式来 =====
    <span class="token comment">// A MPEG-4 video elementary stream:
    <span class="token punctuation">{
        <span class="token keyword">char <span class="token keyword">const<span class="token operator">* streamName <span class="token operator">= <span class="token string">"mpeg4ESVideoTest"<span class="token punctuation">;
        <span class="token keyword">char <span class="token keyword">const<span class="token operator">* inputFileName <span class="token operator">= <span class="token string">"test.m4e"<span class="token punctuation">;
        ServerMediaSession<span class="token operator">* sms <span class="token operator">= <span class="token class-name">ServerMediaSession<span class="token operator">::<span class="token function">createNew<span class="token punctuation">(<span class="token operator">*env<span class="token punctuation">, streamName<span class="token punctuation">, streamName<span class="token punctuation">, descriptionString<span class="token punctuation">)<span class="token punctuation">;
        sms<span class="token operator">-&gt;<span class="token function">addSubsession<span class="token punctuation">(<span class="token class-name">MPEG4VideoFileServerMediaSubsession<span class="token operator">::<span class="token function">createNew<span class="token punctuation">(<span class="token operator">*env<span class="token punctuation">, inputFileName<span class="token punctuation">, reuseFirstSource<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
        rtspServer<span class="token operator">-&gt;<span class="token function">addServerMediaSession<span class="token punctuation">(sms<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">announceStream<span class="token punctuation">(rtspServer<span class="token punctuation">, sms<span class="token punctuation">, streamName<span class="token punctuation">, inputFileName<span class="token punctuation">)<span class="token punctuation">;
    <span class="token punctuation">}

    <span class="token comment">// A H.264 video elementary stream:
    <span class="token punctuation">{
        <span class="token keyword">char <span class="token keyword">const<span class="token operator">* streamName <span class="token operator">= <span class="token string">"h264ESVideoTest"<span class="token punctuation">;
        <span class="token keyword">char <span class="token keyword">const<span class="token operator">* inputFileName <span class="token operator">= <span class="token string">"test.264"<span class="token punctuation">;
        ServerMediaSession<span class="token operator">* sms <span class="token operator">= <span class="token class-name">ServerMediaSession<span class="token operator">::<span class="token function">createNew<span class="token punctuation">(<span class="token operator">*env<span class="token punctuation">, streamName<span class="token punctuation">, streamName<span class="token punctuation">, descriptionString<span class="token punctuation">)<span class="token punctuation">;
        sms<span class="token operator">-&gt;<span class="token function">addSubsession<span class="token punctuation">(<span class="token class-name">H264VideoFileServerMediaSubsession<span class="token operator">::<span class="token function">createNew<span class="token punctuation">(<span class="token operator">*env<span class="token punctuation">, inputFileName<span class="token punctuation">, reuseFirstSource<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
        rtspServer<span class="token operator">-&gt;<span class="token function">addServerMediaSession<span class="token punctuation">(sms<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">announceStream<span class="token punctuation">(rtspServer<span class="token punctuation">, sms<span class="token punctuation">, streamName<span class="token punctuation">, inputFileName<span class="token punctuation">)<span class="token punctuation">;
    <span class="token punctuation">}

    <span class="token comment">// A H.265 video elementary stream:
    <span class="token punctuation">{
        <span class="token keyword">char <span class="token keyword">const<span class="token operator">* streamName <span class="token operator">= <span class="token string">"h265ESVideoTest"<span class="token punctuation">;
        <span class="token keyword">char <span class="token keyword">const<span class="token operator">* inputFileName <span class="token operator">= <span class="token string">"test.265"<span class="token punctuation">;
        ServerMediaSession<span class="token operator">* sms <span class="token operator">= <span class="token class-name">ServerMediaSession<span class="token operator">::<span class="token function">createNew<span class="token punctuation">(<span class="token operator">*env<span class="token punctuation">, streamName<span class="token punctuation">, streamName<span class="token punctuation">, descriptionString<span class="token punctuation">)<span class="token punctuation">;
        sms<span class="token operator">-&gt;<span class="token function">addSubsession<span class="token punctuation">(<span class="token class-name">H265VideoFileServerMediaSubsession<span class="token operator">::<span class="token function">createNew<span class="token punctuation">(<span class="token operator">*env<span class="token punctuation">, inputFileName<span class="token punctuation">, reuseFirstSource<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
        rtspServer<span class="token operator">-&gt;<span class="token function">addServerMediaSession<span class="token punctuation">(sms<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">announceStream<span class="token punctuation">(rtspServer<span class="token punctuation">, sms<span class="token punctuation">, streamName<span class="token punctuation">, inputFileName<span class="token punctuation">)<span class="token punctuation">;
    <span class="token punctuation">}

    <span class="token comment">// A MPEG-1 or 2 audio+video program stream:
    <span class="token punctuation">{
        <span class="token keyword">char <span class="token keyword">const<span class="token operator">* streamName <span class="token operator">= <span class="token string">"mpeg1or2AudioVideoTest"<span class="token punctuation">;
        <span class="token keyword">char <span class="token keyword">const<span class="token operator">* inputFileName <span class="token operator">= <span class="token string">"test.mpg"<span class="token punctuation">;
        <span class="token comment">// NOTE: This *must* be a Program Stream; not an Elementary Stream
        ServerMediaSession<span class="token operator">* sms <span class="token operator">= <span class="token class-name">ServerMediaSession<span class="token operator">::<span class="token function">createNew<span class="token punctuation">(<span class="token operator">*env<span class="token punctuation">, streamName<span class="token punctuation">, streamName<span class="token punctuation">, descriptionString<span class="token punctuation">)<span class="token punctuation">;
        MPEG1or2FileServerDemux<span class="token operator">* demux <span class="token operator">= <span class="token class-name">MPEG1or2FileServerDemux<span class="token operator">::<span class="token function">createNew<span class="token punctuation">(<span class="token operator">*env<span class="token punctuation">, inputFileName<span class="token punctuation">, reuseFirstSource<span class="token punctuation">)<span class="token punctuation">;
        sms<span class="token operator">-&gt;<span class="token function">addSubsession<span class="token punctuation">(demux<span class="token operator">-&gt;<span class="token function">newVideoServerMediaSubsession<span class="token punctuation">(iFramesOnly<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
        sms<span class="token operator">-&gt;<span class="token function">addSubsession<span class="token punctuation">(demux<span class="token operator">-&gt;<span class="token function">newAudioServerMediaSubsession<span class="token punctuation">(<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
        rtspServer<span class="token operator">-&gt;<span class="token function">addServerMediaSession<span class="token punctuation">(sms<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">announceStream<span class="token punctuation">(rtspServer<span class="token punctuation">, sms<span class="token punctuation">, streamName<span class="token punctuation">, inputFileName<span class="token punctuation">)<span class="token punctuation">;
    <span class="token punctuation">}

    <span class="token comment">// A MPEG-1 or 2 video elementary stream:
    <span class="token punctuation">{
        <span class="token keyword">char <span class="token keyword">const<span class="token operator">* streamName <span class="token operator">= <span class="token string">"mpeg1or2ESVideoTest"<span class="token punctuation">;
        <span class="token keyword">char <span class="token keyword">const<span class="token operator">* inputFileName <span class="token operator">= <span class="token string">"testv.mpg"<span class="token punctuation">;
        <span class="token comment">// NOTE: This *must* be a Video Elementary Stream; not a Program Stream
        ServerMediaSession<span class="token operator">* sms <span class="token operator">= <span class="token class-name">ServerMediaSession<span class="token operator">::<span class="token function">createNew<span class="token punctuation">(<span class="token operator">*env<span class="token punctuation">, streamName<span class="token punctuation">, streamName<span class="token punctuation">, descriptionString<span class="token punctuation">)<span class="token punctuation">;
        sms<span class="token operator">-&gt;<span class="token function">addSubsession<span class="token punctuation">(<span class="token class-name">MPEG1or2VideoFileServerMediaSubsession<span class="token operator">::<span class="token function">createNew<span class="token punctuation">(<span class="token operator">*env<span class="token punctuation">, inputFileName<span class="token punctuation">, reuseFirstSource<span class="token punctuation">, iFramesOnly<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
        rtspServer<span class="token operator">-&gt;<span class="token function">addServerMediaSession<span class="token punctuation">(sms<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">announceStream<span class="token punctuation">(rtspServer<span class="token punctuation">, sms<span class="token punctuation">, streamName<span class="token punctuation">, inputFileName<span class="token punctuation">)<span class="token punctuation">;
    <span class="token punctuation">}

    <span class="token comment">// A MP3 audio stream (actually, any MPEG-1 or 2 audio file will work):
    <span class="token comment">// To stream using 'ADUs' rather than raw MP3 frames, uncomment the following:
<span class="token comment">//#define STREAM_USING_ADUS 1
    <span class="token comment">// To also reorder ADUs before streaming, uncomment the following:
<span class="token comment">//#define INTERLEAVE_ADUS 1
    <span class="token comment">// (For more information about ADUs and interleaving,
    <span class="token comment">//  see &lt;http://www.live555.com/rtp-mp3/&gt;)
    <span class="token punctuation">{
        <span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* streamName </span><span class="token operator">= </span><span class="token string">"mp3AudioTest"</span><span class="token punctuation">;
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* inputFileName </span><span class="token operator">= </span><span class="token string">"test.mp3"</span><span class="token punctuation">;
        ServerMediaSession</span><span class="token operator">* sms </span><span class="token operator">= </span><span class="token class-name">ServerMediaSession</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, streamName</span><span class="token punctuation">, streamName</span><span class="token punctuation">, descriptionString</span><span class="token punctuation">)</span><span class="token punctuation">;
        Boolean useADUs </span><span class="token operator">= False</span><span class="token punctuation">;
        Interleaving</span><span class="token operator">* interleaving </span><span class="token operator">= </span><span class="token constant">NULL</span><span class="token punctuation">;
</span><span class="token directive-hash">#</span><span class="token directive keyword">ifdef </span><span class="token expression">STREAM_USING_ADUS
        useADUs </span><span class="token operator">= True</span><span class="token punctuation">;
</span><span class="token directive-hash">#</span><span class="token directive keyword">ifdef </span><span class="token expression">INTERLEAVE_ADUS
        </span><span class="token keyword">unsigned </span><span class="token keyword">char interleaveCycle</span><span class="token punctuation">[</span><span class="token punctuation">] </span><span class="token operator">= </span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">; </span><span class="token comment">// or choose your own...
        </span><span class="token keyword">unsigned </span><span class="token keyword">const interleaveCycleSize </span><span class="token operator">= </span><span class="token punctuation">(</span><span class="token keyword">sizeof interleaveCycle</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">sizeof </span><span class="token punctuation">(</span><span class="token keyword">unsigned </span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;
        interleaving </span><span class="token operator">= </span><span class="token keyword">new </span><span class="token function">Interleaving</span><span class="token punctuation">(interleaveCycleSize</span><span class="token punctuation">, interleaveCycle</span><span class="token punctuation">)</span><span class="token punctuation">;
</span><span class="token directive-hash">#</span><span class="token directive keyword">endif
</span><span class="token directive-hash">#</span><span class="token directive keyword">endif
        sms</span><span class="token operator">-&gt;</span><span class="token function">addSubsession</span><span class="token punctuation">(</span><span class="token class-name">MP3AudioFileServerMediaSubsession</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">, reuseFirstSource</span><span class="token punctuation">, useADUs</span><span class="token punctuation">, interleaving</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;
        rtspServer</span><span class="token operator">-&gt;</span><span class="token function">addServerMediaSession</span><span class="token punctuation">(sms</span><span class="token punctuation">)</span><span class="token punctuation">;
        </span><span class="token function">announceStream</span><span class="token punctuation">(rtspServer</span><span class="token punctuation">, sms</span><span class="token punctuation">, streamName</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">)</span><span class="token punctuation">;
    </span><span class="token punctuation">}

    </span><span class="token comment">// A WAV audio stream:
    </span><span class="token punctuation">{
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* streamName </span><span class="token operator">= </span><span class="token string">"wavAudioTest"</span><span class="token punctuation">;
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* inputFileName </span><span class="token operator">= </span><span class="token string">"test.wav"</span><span class="token punctuation">;
        ServerMediaSession</span><span class="token operator">* sms </span><span class="token operator">= </span><span class="token class-name">ServerMediaSession</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, streamName</span><span class="token punctuation">, streamName</span><span class="token punctuation">, descriptionString</span><span class="token punctuation">)</span><span class="token punctuation">;
        </span><span class="token comment">// To convert 16-bit PCM data to 8-bit u-law, prior to streaming,
        </span><span class="token comment">// change the following to True:
        Boolean convertToULaw </span><span class="token operator">= False</span><span class="token punctuation">;
        sms</span><span class="token operator">-&gt;</span><span class="token function">addSubsession</span><span class="token punctuation">(</span><span class="token class-name">WAVAudioFileServerMediaSubsession</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">, reuseFirstSource</span><span class="token punctuation">, convertToULaw</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;
        rtspServer</span><span class="token operator">-&gt;</span><span class="token function">addServerMediaSession</span><span class="token punctuation">(sms</span><span class="token punctuation">)</span><span class="token punctuation">;
        </span><span class="token function">announceStream</span><span class="token punctuation">(rtspServer</span><span class="token punctuation">, sms</span><span class="token punctuation">, streamName</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">)</span><span class="token punctuation">;
    </span><span class="token punctuation">}

    </span><span class="token comment">// An AMR audio stream:
    </span><span class="token punctuation">{
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* streamName </span><span class="token operator">= </span><span class="token string">"amrAudioTest"</span><span class="token punctuation">;
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* inputFileName </span><span class="token operator">= </span><span class="token string">"test.amr"</span><span class="token punctuation">;
        ServerMediaSession</span><span class="token operator">* sms </span><span class="token operator">= </span><span class="token class-name">ServerMediaSession</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, streamName</span><span class="token punctuation">, streamName</span><span class="token punctuation">, descriptionString</span><span class="token punctuation">)</span><span class="token punctuation">;
        sms</span><span class="token operator">-&gt;</span><span class="token function">addSubsession</span><span class="token punctuation">(</span><span class="token class-name">AMRAudioFileServerMediaSubsession</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">, reuseFirstSource</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;
        rtspServer</span><span class="token operator">-&gt;</span><span class="token function">addServerMediaSession</span><span class="token punctuation">(sms</span><span class="token punctuation">)</span><span class="token punctuation">;
        </span><span class="token function">announceStream</span><span class="token punctuation">(rtspServer</span><span class="token punctuation">, sms</span><span class="token punctuation">, streamName</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">)</span><span class="token punctuation">;
    </span><span class="token punctuation">}

    </span><span class="token comment">// A 'VOB' file (e.g., from an unencrypted DVD):
    </span><span class="token punctuation">{
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* streamName </span><span class="token operator">= </span><span class="token string">"vobTest"</span><span class="token punctuation">;
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* inputFileName </span><span class="token operator">= </span><span class="token string">"test.vob"</span><span class="token punctuation">;
        ServerMediaSession</span><span class="token operator">* sms </span><span class="token operator">= </span><span class="token class-name">ServerMediaSession</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, streamName</span><span class="token punctuation">, streamName</span><span class="token punctuation">, descriptionString</span><span class="token punctuation">)</span><span class="token punctuation">;
        </span><span class="token comment">// Note: VOB files are MPEG-2 Program Stream files, but using AC-3 audio
        MPEG1or2FileServerDemux</span><span class="token operator">* demux </span><span class="token operator">= </span><span class="token class-name">MPEG1or2FileServerDemux</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">, reuseFirstSource</span><span class="token punctuation">)</span><span class="token punctuation">;
        sms</span><span class="token operator">-&gt;</span><span class="token function">addSubsession</span><span class="token punctuation">(demux</span><span class="token operator">-&gt;</span><span class="token function">newVideoServerMediaSubsession</span><span class="token punctuation">(iFramesOnly</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;
        sms</span><span class="token operator">-&gt;</span><span class="token function">addSubsession</span><span class="token punctuation">(demux</span><span class="token operator">-&gt;</span><span class="token function">newAC3AudioServerMediaSubsession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;
        rtspServer</span><span class="token operator">-&gt;</span><span class="token function">addServerMediaSession</span><span class="token punctuation">(sms</span><span class="token punctuation">)</span><span class="token punctuation">;
        </span><span class="token function">announceStream</span><span class="token punctuation">(rtspServer</span><span class="token punctuation">, sms</span><span class="token punctuation">, streamName</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">)</span><span class="token punctuation">;
    </span><span class="token punctuation">}

    </span><span class="token comment">// A MPEG-2 Transport Stream:
    </span><span class="token punctuation">{
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* streamName </span><span class="token operator">= </span><span class="token string">"mpeg2TransportStreamTest"</span><span class="token punctuation">;
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* inputFileName </span><span class="token operator">= </span><span class="token string">"test.ts"</span><span class="token punctuation">;
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* indexFileName </span><span class="token operator">= </span><span class="token string">"test.tsx"</span><span class="token punctuation">;
        ServerMediaSession</span><span class="token operator">* sms </span><span class="token operator">= </span><span class="token class-name">ServerMediaSession</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, streamName</span><span class="token punctuation">, streamName</span><span class="token punctuation">, descriptionString</span><span class="token punctuation">)</span><span class="token punctuation">;
        sms</span><span class="token operator">-&gt;</span><span class="token function">addSubsession</span><span class="token punctuation">(</span><span class="token class-name">MPEG2TransportFileServerMediaSubsession</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">, indexFileName</span><span class="token punctuation">, reuseFirstSource</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;
        rtspServer</span><span class="token operator">-&gt;</span><span class="token function">addServerMediaSession</span><span class="token punctuation">(sms</span><span class="token punctuation">)</span><span class="token punctuation">;
        </span><span class="token function">announceStream</span><span class="token punctuation">(rtspServer</span><span class="token punctuation">, sms</span><span class="token punctuation">, streamName</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">)</span><span class="token punctuation">;
    </span><span class="token punctuation">}

    </span><span class="token comment">// An AAC audio stream (ADTS-format file):
    </span><span class="token punctuation">{
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* streamName </span><span class="token operator">= </span><span class="token string">"aacAudioTest"</span><span class="token punctuation">;
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* inputFileName </span><span class="token operator">= </span><span class="token string">"test.aac"</span><span class="token punctuation">;
        ServerMediaSession</span><span class="token operator">* sms </span><span class="token operator">= </span><span class="token class-name">ServerMediaSession</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, streamName</span><span class="token punctuation">, streamName</span><span class="token punctuation">, descriptionString</span><span class="token punctuation">)</span><span class="token punctuation">;
        sms</span><span class="token operator">-&gt;</span><span class="token function">addSubsession</span><span class="token punctuation">(</span><span class="token class-name">ADTSAudioFileServerMediaSubsession</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">, reuseFirstSource</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;
        rtspServer</span><span class="token operator">-&gt;</span><span class="token function">addServerMediaSession</span><span class="token punctuation">(sms</span><span class="token punctuation">)</span><span class="token punctuation">;
        </span><span class="token function">announceStream</span><span class="token punctuation">(rtspServer</span><span class="token punctuation">, sms</span><span class="token punctuation">, streamName</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">)</span><span class="token punctuation">;
    </span><span class="token punctuation">}

    </span><span class="token comment">// A DV video stream:
    </span><span class="token punctuation">{
        </span><span class="token comment">// First, make sure that the RTPSinks' buffers will be large enough to handle the huge size of DV frames (as big as 288000).
        OutPacketBuffer</span><span class="token operator">::maxSize </span><span class="token operator">= </span><span class="token number">300000</span><span class="token punctuation">;
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* streamName </span><span class="token operator">= </span><span class="token string">"dvVideoTest"</span><span class="token punctuation">;
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* inputFileName </span><span class="token operator">= </span><span class="token string">"test.dv"</span><span class="token punctuation">;
        ServerMediaSession</span><span class="token operator">* sms </span><span class="token operator">= </span><span class="token class-name">ServerMediaSession</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, streamName</span><span class="token punctuation">, streamName</span><span class="token punctuation">, descriptionString</span><span class="token punctuation">)</span><span class="token punctuation">;
        sms</span><span class="token operator">-&gt;</span><span class="token function">addSubsession</span><span class="token punctuation">(</span><span class="token class-name">DVVideoFileServerMediaSubsession</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">, reuseFirstSource</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;
        rtspServer</span><span class="token operator">-&gt;</span><span class="token function">addServerMediaSession</span><span class="token punctuation">(sms</span><span class="token punctuation">)</span><span class="token punctuation">;
        </span><span class="token function">announceStream</span><span class="token punctuation">(rtspServer</span><span class="token punctuation">, sms</span><span class="token punctuation">, streamName</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">)</span><span class="token punctuation">;
    </span><span class="token punctuation">}

    </span><span class="token comment">// A AC3 video elementary stream:
    </span><span class="token punctuation">{
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* streamName </span><span class="token operator">= </span><span class="token string">"ac3AudioTest"</span><span class="token punctuation">;
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* inputFileName </span><span class="token operator">= </span><span class="token string">"test.ac3"</span><span class="token punctuation">;
        ServerMediaSession</span><span class="token operator">* sms </span><span class="token operator">= </span><span class="token class-name">ServerMediaSession</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, streamName</span><span class="token punctuation">, streamName</span><span class="token punctuation">, descriptionString</span><span class="token punctuation">)</span><span class="token punctuation">;
        sms</span><span class="token operator">-&gt;</span><span class="token function">addSubsession</span><span class="token punctuation">(</span><span class="token class-name">AC3AudioFileServerMediaSubsession</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">, reuseFirstSource</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;
        rtspServer</span><span class="token operator">-&gt;</span><span class="token function">addServerMediaSession</span><span class="token punctuation">(sms</span><span class="token punctuation">)</span><span class="token punctuation">;
        </span><span class="token function">announceStream</span><span class="token punctuation">(rtspServer</span><span class="token punctuation">, sms</span><span class="token punctuation">, streamName</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">)</span><span class="token punctuation">;
    </span><span class="token punctuation">}

    </span><span class="token comment">// A Matroska ('.mkv') file, with video+audio+subtitle streams:
    </span><span class="token punctuation">{
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* streamName </span><span class="token operator">= </span><span class="token string">"matroskaFileTest"</span><span class="token punctuation">;
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* inputFileName </span><span class="token operator">= </span><span class="token string">"test.mkv"</span><span class="token punctuation">;
        ServerMediaSession</span><span class="token operator">* sms </span><span class="token operator">= </span><span class="token class-name">ServerMediaSession</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, streamName</span><span class="token punctuation">, streamName</span><span class="token punctuation">, descriptionString</span><span class="token punctuation">)</span><span class="token punctuation">;
        newDemuxWatchVariable </span><span class="token operator">= </span><span class="token number">0</span><span class="token punctuation">;
        </span><span class="token class-name">MatroskaFileServerDemux</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">, onMatroskaDemuxCreation</span><span class="token punctuation">, </span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;
        env</span><span class="token operator">-&gt;</span><span class="token function">taskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doEventLoop</span><span class="token punctuation">(</span><span class="token operator">&amp;newDemuxWatchVariable</span><span class="token punctuation">)</span><span class="token punctuation">;
        Boolean sessionHasTracks </span><span class="token operator">= False</span><span class="token punctuation">;
        ServerMediaSubsession</span><span class="token operator">* smss</span><span class="token punctuation">;
        </span><span class="token keyword">while </span><span class="token punctuation">(</span><span class="token punctuation">(smss </span><span class="token operator">= matroskaDemux</span><span class="token operator">-&gt;</span><span class="token function">newServerMediaSubsession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">) </span><span class="token operator">!= </span><span class="token constant">NULL</span><span class="token punctuation">)
        </span><span class="token punctuation">{
            sms</span><span class="token operator">-&gt;</span><span class="token function">addSubsession</span><span class="token punctuation">(smss</span><span class="token punctuation">)</span><span class="token punctuation">;
            sessionHasTracks </span><span class="token operator">= True</span><span class="token punctuation">;
        </span><span class="token punctuation">}
        </span><span class="token keyword">if </span><span class="token punctuation">(sessionHasTracks</span><span class="token punctuation">)
        </span><span class="token punctuation">{
            rtspServer</span><span class="token operator">-&gt;</span><span class="token function">addServerMediaSession</span><span class="token punctuation">(sms</span><span class="token punctuation">)</span><span class="token punctuation">;
        </span><span class="token punctuation">}
        </span><span class="token comment">// otherwise, because the stream has no tracks, we don't add a ServerMediaSession to the server.
        </span><span class="token function">announceStream</span><span class="token punctuation">(rtspServer</span><span class="token punctuation">, sms</span><span class="token punctuation">, streamName</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">)</span><span class="token punctuation">;
    </span><span class="token punctuation">}

    </span><span class="token comment">// A WebM ('.webm') file, with video(VP8)+audio(Vorbis) streams:
    </span><span class="token comment">// (Note: ".webm' files are special types of Matroska files, so we use the same code as the Matroska ('.mkv') file code above.)
    </span><span class="token punctuation">{
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* streamName </span><span class="token operator">= </span><span class="token string">"webmFileTest"</span><span class="token punctuation">;
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* inputFileName </span><span class="token operator">= </span><span class="token string">"test.webm"</span><span class="token punctuation">;
        ServerMediaSession</span><span class="token operator">* sms </span><span class="token operator">= </span><span class="token class-name">ServerMediaSession</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, streamName</span><span class="token punctuation">, streamName</span><span class="token punctuation">, descriptionString</span><span class="token punctuation">)</span><span class="token punctuation">;
        newDemuxWatchVariable </span><span class="token operator">= </span><span class="token number">0</span><span class="token punctuation">;
        </span><span class="token class-name">MatroskaFileServerDemux</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">, onMatroskaDemuxCreation</span><span class="token punctuation">, </span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;
        env</span><span class="token operator">-&gt;</span><span class="token function">taskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doEventLoop</span><span class="token punctuation">(</span><span class="token operator">&amp;newDemuxWatchVariable</span><span class="token punctuation">)</span><span class="token punctuation">;
        Boolean sessionHasTracks </span><span class="token operator">= False</span><span class="token punctuation">;
        ServerMediaSubsession</span><span class="token operator">* smss</span><span class="token punctuation">;
        </span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(smss </span><span class="token operator">= matroskaDemux</span><span class="token operator">-&gt;</span><span class="token function">newServerMediaSubsession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">) </span><span class="token operator">!= </span><span class="token constant">NULL</span><span class="token punctuation">)
        </span><span class="token punctuation">{
            sms</span><span class="token operator">-&gt;</span><span class="token function">addSubsession</span><span class="token punctuation">(smss</span><span class="token punctuation">)</span><span class="token punctuation">;
            sessionHasTracks </span><span class="token operator">= True</span><span class="token punctuation">;
        </span><span class="token punctuation">}
        </span><span class="token keyword">if</span><span class="token punctuation">(sessionHasTracks</span><span class="token punctuation">)
        </span><span class="token punctuation">{
            rtspServer</span><span class="token operator">-&gt;</span><span class="token function">addServerMediaSession</span><span class="token punctuation">(sms</span><span class="token punctuation">)</span><span class="token punctuation">;
        </span><span class="token punctuation">}
        </span><span class="token comment">// otherwise, because the stream has no tracks, we don't add a ServerMediaSession to the server.
        </span><span class="token function">announceStream</span><span class="token punctuation">(rtspServer</span><span class="token punctuation">, sms</span><span class="token punctuation">, streamName</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">)</span><span class="token punctuation">;
    </span><span class="token punctuation">}

    </span><span class="token comment">// An Ogg ('.ogg') file, with video and/or audio streams:
    </span><span class="token punctuation">{
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* streamName </span><span class="token operator">= </span><span class="token string">"oggFileTest"</span><span class="token punctuation">;
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* inputFileName </span><span class="token operator">= </span><span class="token string">"test.ogg"</span><span class="token punctuation">;
        ServerMediaSession</span><span class="token operator">* sms </span><span class="token operator">= </span><span class="token class-name">ServerMediaSession</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, streamName</span><span class="token punctuation">, streamName</span><span class="token punctuation">, descriptionString</span><span class="token punctuation">)</span><span class="token punctuation">;

        newDemuxWatchVariable </span><span class="token operator">= </span><span class="token number">0</span><span class="token punctuation">;
        </span><span class="token class-name">OggFileServerDemux</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">, onOggDemuxCreation</span><span class="token punctuation">, </span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;
        env</span><span class="token operator">-&gt;</span><span class="token function">taskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doEventLoop</span><span class="token punctuation">(</span><span class="token operator">&amp;newDemuxWatchVariable</span><span class="token punctuation">)</span><span class="token punctuation">;

        Boolean sessionHasTracks </span><span class="token operator">= False</span><span class="token punctuation">;
        ServerMediaSubsession</span><span class="token operator">* smss</span><span class="token punctuation">;
        </span><span class="token keyword">while </span><span class="token punctuation">(</span><span class="token punctuation">(smss </span><span class="token operator">= oggDemux</span><span class="token operator">-&gt;</span><span class="token function">newServerMediaSubsession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">) </span><span class="token operator">!= </span><span class="token constant">NULL</span><span class="token punctuation">)
        </span><span class="token punctuation">{
            sms</span><span class="token operator">-&gt;</span><span class="token function">addSubsession</span><span class="token punctuation">(smss</span><span class="token punctuation">)</span><span class="token punctuation">;
            sessionHasTracks </span><span class="token operator">= True</span><span class="token punctuation">;
        </span><span class="token punctuation">}
        </span><span class="token keyword">if </span><span class="token punctuation">(sessionHasTracks</span><span class="token punctuation">)
        </span><span class="token punctuation">{
            rtspServer</span><span class="token operator">-&gt;</span><span class="token function">addServerMediaSession</span><span class="token punctuation">(sms</span><span class="token punctuation">)</span><span class="token punctuation">;
        </span><span class="token punctuation">}
        </span><span class="token comment">// otherwise, because the stream has no tracks, we don't add a ServerMediaSession to the server.
        </span><span class="token function">announceStream</span><span class="token punctuation">(rtspServer</span><span class="token punctuation">, sms</span><span class="token punctuation">, streamName</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">)</span><span class="token punctuation">;
    </span><span class="token punctuation">}

    </span><span class="token comment">// An Opus ('.opus') audio file:
    </span><span class="token comment">// (Note: ".opus' files are special types of Ogg files, so we use the same code as the Ogg ('.ogg') file code above.)
    </span><span class="token punctuation">{
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* streamName </span><span class="token operator">= </span><span class="token string">"opusFileTest"</span><span class="token punctuation">;
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* inputFileName </span><span class="token operator">= </span><span class="token string">"test.opus"</span><span class="token punctuation">;
        ServerMediaSession</span><span class="token operator">* sms </span><span class="token operator">= </span><span class="token class-name">ServerMediaSession</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, streamName</span><span class="token punctuation">, streamName</span><span class="token punctuation">, descriptionString</span><span class="token punctuation">)</span><span class="token punctuation">;
        newDemuxWatchVariable </span><span class="token operator">= </span><span class="token number">0</span><span class="token punctuation">;
        </span><span class="token class-name">OggFileServerDemux</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">, onOggDemuxCreation</span><span class="token punctuation">, </span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;
        env</span><span class="token operator">-&gt;</span><span class="token function">taskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doEventLoop</span><span class="token punctuation">(</span><span class="token operator">&amp;newDemuxWatchVariable</span><span class="token punctuation">)</span><span class="token punctuation">;

        Boolean sessionHasTracks </span><span class="token operator">= False</span><span class="token punctuation">;
        ServerMediaSubsession</span><span class="token operator">* smss</span><span class="token punctuation">;
        </span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(smss </span><span class="token operator">= oggDemux</span><span class="token operator">-&gt;</span><span class="token function">newServerMediaSubsession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">) </span><span class="token operator">!= </span><span class="token constant">NULL</span><span class="token punctuation">)
        </span><span class="token punctuation">{
            sms</span><span class="token operator">-&gt;</span><span class="token function">addSubsession</span><span class="token punctuation">(smss</span><span class="token punctuation">)</span><span class="token punctuation">;
            sessionHasTracks </span><span class="token operator">= True</span><span class="token punctuation">;
        </span><span class="token punctuation">}
        </span><span class="token keyword">if</span><span class="token punctuation">(sessionHasTracks</span><span class="token punctuation">)
        </span><span class="token punctuation">{
            rtspServer</span><span class="token operator">-&gt;</span><span class="token function">addServerMediaSession</span><span class="token punctuation">(sms</span><span class="token punctuation">)</span><span class="token punctuation">;
        </span><span class="token punctuation">}
        </span><span class="token comment">// otherwise, because the stream has no tracks, we don't add a ServerMediaSession to the server.
        </span><span class="token function">announceStream</span><span class="token punctuation">(rtspServer</span><span class="token punctuation">, sms</span><span class="token punctuation">, streamName</span><span class="token punctuation">, inputFileName</span><span class="token punctuation">)</span><span class="token punctuation">;
    </span><span class="token punctuation">}

    </span><span class="token comment">// A MPEG-2 Transport Stream, coming from a live UDP (raw-UDP or RTP/UDP) source:
    </span><span class="token punctuation">{
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* streamName </span><span class="token operator">= </span><span class="token string">"mpeg2TransportStreamFromUDPSourceTest"</span><span class="token punctuation">;
        </span><span class="token keyword">char </span><span class="token keyword">const</span><span class="token operator">* inputAddressStr </span><span class="token operator">= </span><span class="token string">"239.255.42.42"</span><span class="token punctuation">;
        </span><span class="token comment">// This causes the server to take its input from the stream sent by the "testMPEG2TransportStreamer" demo application.
        </span><span class="token comment">// (Note: If the input UDP source is unicast rather than multicast, then change this to NULL.)
        portNumBits </span><span class="token keyword">const inputPortNum </span><span class="token operator">= </span><span class="token number">1234</span><span class="token punctuation">;
        </span><span class="token comment">// This causes the server to take its input from the stream sent by the "testMPEG2TransportStreamer" demo application.
        Boolean </span><span class="token keyword">const inputStreamIsRawUDP </span><span class="token operator">= False</span><span class="token punctuation">;
        ServerMediaSession</span><span class="token operator">* sms </span><span class="token operator">= </span><span class="token class-name">ServerMediaSession</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, streamName</span><span class="token punctuation">, streamName</span><span class="token punctuation">, descriptionString</span><span class="token punctuation">)</span><span class="token punctuation">;
        sms</span><span class="token operator">-&gt;</span><span class="token function">addSubsession</span><span class="token punctuation">(</span><span class="token class-name">MPEG2TransportUDPServerMediaSubsession</span><span class="token operator">::</span><span class="token function">createNew</span><span class="token punctuation">(</span><span class="token operator">*env</span><span class="token punctuation">, inputAddressStr</span><span class="token punctuation">, inputPortNum</span><span class="token punctuation">, inputStreamIsRawUDP</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;
        rtspServer</span><span class="token operator">-&gt;</span><span class="token function">addServerMediaSession</span><span class="token punctuation">(sms</span><span class="token punctuation">)</span><span class="token punctuation">;

        </span><span class="token keyword">char</span><span class="token operator">* url </span><span class="token operator">= rtspServer</span><span class="token operator">-&gt;</span><span class="token function">rtspURL</span><span class="token punctuation">(sms</span><span class="token punctuation">)</span><span class="token punctuation">;
        </span><span class="token operator">*env </span><span class="token operator">&lt;&lt; </span><span class="token string">"\n\"" </span><span class="token operator">&lt;&lt; streamName </span><span class="token operator">&lt;&lt; </span><span class="token string">"\" stream, from a UDP Transport Stream input source \n\t("</span><span class="token punctuation">;
        </span><span class="token keyword">if </span><span class="token punctuation">(inputAddressStr </span><span class="token operator">!= </span><span class="token constant">NULL</span><span class="token punctuation">)
        </span><span class="token punctuation">{
        </span><span class="token operator">*env </span><span class="token operator">&lt;&lt; </span><span class="token string">"IP multicast address " </span><span class="token operator">&lt;&lt; inputAddressStr </span><span class="token operator">&lt;&lt; </span><span class="token string">","</span><span class="token punctuation">;
        </span><span class="token punctuation">} </span><span class="token keyword">else </span><span class="token punctuation">{
        </span><span class="token operator">*env </span><span class="token operator">&lt;&lt; </span><span class="token string">"unicast;"</span><span class="token punctuation">;
        </span><span class="token punctuation">}
        </span><span class="token operator">*env </span><span class="token operator">&lt;&lt; </span><span class="token string">" port " </span><span class="token operator">&lt;&lt; inputPortNum </span><span class="token operator">&lt;&lt; </span><span class="token string">")\n"</span><span class="token punctuation">;
        </span><span class="token operator">*env </span><span class="token operator">&lt;&lt; </span><span class="token string">"Play this stream using the URL \"" </span><span class="token operator">&lt;&lt; url </span><span class="token operator">&lt;&lt; </span><span class="token string">"\"\n"</span><span class="token punctuation">;
        </span><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">] url</span><span class="token punctuation">;
    </span><span class="token punctuation">}

    </span><span class="token comment">// 尝试为RTSP over HTTP隧道创建一个HTTP服务器,首先尝试使用默认HTTP端口（80），然后使用其他HTTP端口号（8000和8080）
    </span><span class="token keyword">if</span><span class="token punctuation">(   rtspServer</span><span class="token operator">-&gt;</span><span class="token function">setUpTunnelingOverHTTP</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)
       </span><span class="token operator">|| rtspServer</span><span class="token operator">-&gt;</span><span class="token function">setUpTunnelingOverHTTP</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)
       </span><span class="token operator">|| rtspServer</span><span class="token operator">-&gt;</span><span class="token function">setUpTunnelingOverHTTP</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)
    </span><span class="token punctuation">{
        </span><span class="token comment">// 打印输出
        </span><span class="token operator">*env </span><span class="token operator">&lt;&lt; </span><span class="token string">"\n(We use port " </span><span class="token operator">&lt;&lt; rtspServer</span><span class="token operator">-&gt;</span><span class="token function">httpServerPortNum</span><span class="token punctuation">(</span><span class="token punctuation">) </span><span class="token operator">&lt;&lt; </span><span class="token string">" for optional RTSP-over-HTTP tunneling.)\n"</span><span class="token punctuation">;
    </span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{
        </span><span class="token operator">*env </span><span class="token operator">&lt;&lt; </span><span class="token string">"\n(RTSP-over-HTTP tunneling is not available.)\n"</span><span class="token punctuation">;
    </span><span class="token punctuation">}

    </span><span class="token comment">// 启动流服务，不再返回了
    env</span><span class="token operator">-&gt;</span><span class="token function">taskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;

    </span><span class="token keyword">return </span><span class="token number">0</span><span class="token punctuation">;
</span><span class="token punctuation">}
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="v110_548"></a>工程模板v1.1.0</h1>
</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202504/1971530-20250421093949437-1852994672.png" alt="在这里插入图片描述"></p>
</div>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.8580295114293981" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-21 09:40">2025-04-21 09:40</span>&nbsp;
<a href="https://www.cnblogs.com/qq21497936">长沙红胖子Qt创微智科</a>&nbsp;
阅读(<span id="post_view_count">108</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18838000);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18838000', targetLink: 'https://www.cnblogs.com/qq21497936/p/18838000', title: 'live555开发笔记（二）：live555创建RTSP服务器源码剖析，创建rtsp服务器的基本流程总结' })">举报</a>
</div>
        