
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/SkyXZ/p/18835033" title="发布于 2025-04-19 05:41">
    <span role="heading" aria-level="2">Python日志模块Logging使用指北</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="python日志模块logging使用指北">Python日志模块Logging使用指北</h1>
<blockquote>
<p>作者：SkyXZ</p>
<p>CSDN：<a href="https://blog.csdn.net/xiongqi123123?spm=1000.2115.3001.5343" target="_blank" rel="noopener nofollow">SkyXZ～-CSDN博客</a></p>
<p>博客园：<a href="https://www.cnblogs.com/SkyXZ" target="_blank">SkyXZ - 博客园</a></p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <code>Logging</code>模块是<code>Python</code>中一个很重要的日志模块，它提供了灵活的日志记录功能，广泛应用于调试、运行状态监控、错误追踪以及系统运维中。相比于简单的<code>print()</code>打印调试，<code>Logging</code>支持不同的日志级别（如<code>DEBUG</code>、<code>INFO</code>、<code>WARNING</code>、<code>ERROR</code>和<code>CRITICAL</code>），可将日志输出到不同位置（如控制台、文件、网络等），还能自定义日志格式和处理方式，从而更好地满足实际项目中的日志管理需求。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;相信各位小伙伴在平时比赛或者项目中写Python代码的时候，肯定会遇到代码出现莫名其妙的报错，而我们一时半会无法快速定位到问题出在哪里。这时候，相信很多同学都会使用 <code>print()</code> 函数在代码的不同地方插入打印输出来不断调试、缩小问题范围。虽然这种方式简单粗暴，在小项目或调试时确实能派上用场，但随着项目复杂度的提高，<code>print()</code>调试法就显得力不从心了。比如，你可能想区分调试信息和错误信息，或者只在生产环境中输出关键日志，还可能需要将日志写入文件供后续分析抑或是在找到问题之后还需手动删除各处的调试 <code>print()</code> 函数，这不仅麻烦，而且很容易遗漏，甚至可能将调试信息带到线上环境，造成信息泄露或日志污染。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此，学会使用专业的日志工具显得尤为重要。在Python中，<code>logging</code> 模块正是官方推荐用于记录日志的强大工具。它不仅支持不同的日志等级（如 <code>DEBUG</code>、<code>INFO</code>、<code>WARNING</code>、<code>ERROR</code>、<code>CRITICAL</code>），还允许我们将日志灵活地输出到控制台、文件，甚至远程服务器。此外，<code>logging</code> 还支持自定义日志格式和多种处理器组合，能很好地适配各种复杂应用场景。接下来，我们就从最基础的用法入手，带你一步步掌握 <code>logging</code> 模块的强大功能，写出更专业、更易维护的Python代码！！！</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先我们要知道，在<code>Logging</code>模块中日志根据作用以及重要程度从小到大依次被分为了如下五个等级，具体如下表：</p>
<table>
<thead>
<tr>
<th>日志等级（level）</th>
<th style="text-align: left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>DEBUG</td>
<td style="text-align: left">调试信息，通常在诊断问题的时候使用</td>
</tr>
<tr>
<td>INFO</td>
<td style="text-align: left">普通信息，确认程序按照预期运行</td>
</tr>
<tr>
<td>WARNING</td>
<td style="text-align: left">警告信息，表示发生意想不到的事，或者指示接下来可能会出现一些问题，但是程序还是继续运行</td>
</tr>
<tr>
<td>ERROR</td>
<td style="text-align: left">错误信息，程序运行中出现了一些问题，程序某些功能可能不能执行</td>
</tr>
<tr>
<td>CRITICAL</td>
<td style="text-align: left">危险信息，一个严重的错误，导致程序无法继续运行</td>
</tr>
</tbody>
</table>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;知道了这些，那我们具体该如何在代码中实现日志管理呢？我们接着往下讲，首先我们肯定是要在代码中导入我们的<code>logging</code>模块，这个模块是Python内置的，无需额外安装，接着我们要引入<code>logging</code>模块中的<code>basicConfig</code>函数，这个是配置日志系统最常用、最简单的一种方式，我们可以通过它来设置最低显示的日志等级、日志的显示格式、日志输出位置（默认是终端）以及写入文件的文件名和编码，接着我们结合示例来给大家演示一下：</p>
<ul>
<li>最低显示的日志等级：</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从下面的代码中我们可以看到，我们可以使用<code>level</code>参数来设置日志的最低显示的等级，而当我们在<code>basicConfig</code>中将最低显示的日志等级<code>level</code>设置为<code>WARNING</code>的时候，只有大于 <code>WARNING</code>的消息才会被显示出来</p>
<pre><code class="language-python">import logging
logging.basicConfig(
    level=logging.WARNING,
)
logging.debug("This is a debug message")
logging.info("This is an info message")
logging.warning("This is a warning message")
logging.error("This is an error message")
logging.critical("This is a critical message")
</code></pre>
<p><img src="https://img2023.cnblogs.com/blog/3505969/202504/3505969-20250419050315620-2031613107.png" alt="image-20250419050311848" loading="lazy"></p>
<ul>
<li>日志的显示格式：</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除了设置最低显示的日志等级之外，我们还可以使用<code>format</code>参数来对我们的日志显示格式进行设置，<code>format</code>有很多可供选择的占位符，具体的见下表：</p>
<table>
<thead>
<tr>
<th>format占位符</th>
<th>含义说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>%(asctime)s</code></td>
<td>日志事件发生的时间（默认格式可自定义）</td>
</tr>
<tr>
<td><code>%(levelname)s</code></td>
<td>日志级别名称（如 INFO、DEBUG 等）</td>
</tr>
<tr>
<td><code>%(message)s</code></td>
<td>日志内容主体（你传入的日志消息）</td>
</tr>
<tr>
<td><code>%(name)s</code></td>
<td>日志器的名称（Logger对象的名字）</td>
</tr>
<tr>
<td><code>%(filename)s</code></td>
<td>当前执行代码的文件名</td>
</tr>
<tr>
<td><code>%(funcName)s</code></td>
<td>调用日志输出函数的函数名</td>
</tr>
<tr>
<td><code>%(lineno)d</code></td>
<td>输出日志的代码行号</td>
</tr>
<tr>
<td><code>%(pathname)s</code></td>
<td>当前执行代码的完整路径</td>
</tr>
<tr>
<td><code>%(module)s</code></td>
<td>模块名</td>
</tr>
<tr>
<td><code>%(threadName)s</code></td>
<td>线程名称（在多线程应用中常用）</td>
</tr>
<tr>
<td><code>%(process)d</code></td>
<td>进程 ID（在多进程应用中常用）</td>
</tr>
</tbody>
</table>
<pre><code class="language-python">import logging
logging.basicConfig(
    level=logging.WARNING,
    format="时间:%(asctime)s-日志名称:%(name)s-日志级别:%(levelname)s-日志信息:%(message)s-文件名:%(filename)s-行号:%(lineno)d"
            
)
logging.debug("This is a debug message")
logging.info("This is an info message")
logging.warning("This is a warning message")
logging.error("This is an error message")
logging.critical("This is a critical message")
</code></pre>
<p><img src="https://img2023.cnblogs.com/blog/3505969/202504/3505969-20250419051008064-871862393.png" alt="image-20250419051004575" loading="lazy"></p>
<ul>
<li>日志输出位置:</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除了将日志信息打印到终端（默认行为）以外，我们还可以通过 <code>filename</code> 参数将日志写入到指定的文件中。这样一来，我们就可以保存程序运行过程中的所有重要信息，便于后续排查问题或对系统进行日志分析。 我们还可以指定文件的编码方式，比如使用 <code>utf-8</code>，以避免中文乱码等问题。下面我们通过一个示例将日志写入文件中：</p>
<pre><code class="language-python">import logging
logging.basicConfig(
    level=logging.WARNING,
    format = '[%(name)s] [%(asctime)s.%(msecs)03d] [%(levelname)s] %(message)s',
    filename='my_log.log',
    encoding="utf-8"
)
logging.debug("This is a debug message")
logging.info("This is an info message")
logging.warning("This is a warning message")
logging.error("This is an error message")
logging.critical("This is a critical message")
</code></pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以看到，运行了这段代码之后终端没有输出了，而在同路径下生成了一个我们指定的<code>my_log.log</code>文件，这个文件里就有我们需要的日志输出</p>
<p><img src="https://img2023.cnblogs.com/blog/3505969/202504/3505969-20250419054249700-1165507632.png" alt="image-20250419051411442" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/3505969/202504/3505969-20250419051544447-140932241.png" alt="image-20250419051540926" loading="lazy"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果想每次运行都重新生成日志文件，我们可以继续加上 <code>filemode='w'</code> 参数</p>
<pre><code class="language-python">import logging
logging.basicConfig(
    level=logging.WARNING,
    format = '[%(name)s] [%(asctime)s.%(msecs)03d] [%(levelname)s] %(message)s',
    filename='my_log.log',
    encoding="utf-8",
    filemode='w'
)
logging.debug("This is a debug message")
logging.info("This is an info message")
logging.warning("This is a warning message")
logging.error("This is an error message")
logging.critical("This is a critical message")
</code></pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除此之外，我们也可以给当前的日志信息“命个名”，这在大型项目中非常有用！只需要通过 <code>logging.getLogger("名字")</code> 来创建一个<strong>具名 Logger</strong>，你可以根据模块、功能、组件的不同给它们起不同的名字，这样日志输出的时候就能快速定位日志是从哪个部分打印出来的，非常适合团队协作和大型工程的调试分析。</p>
<pre><code class="language-python">import logging
logging.basicConfig(
    level=logging.WARNING,
    format = '[%(name)s] [%(asctime)s.%(msecs)03d] [%(levelname)s] %(message)s',
)
logger = logging.getLogger("example")
logger.debug("This is a debug message")
logger.info("This is an info message")
logger.warning("This is a warning message")
logger.error("This is an error message")
logger.critical("This is a critical message")
</code></pre>
<p><img src="https://img2023.cnblogs.com/blog/3505969/202504/3505969-20250419051904354-731409460.png" alt="image-20250419051901223" loading="lazy"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是有同学就要问了：<strong>“哥们哥们，如果我既想让日志在终端显示，又想把日志写进文件保存下来，该怎么办呢？”</strong>这个问题非常常见！实际上，<code>basicConfig</code> 方式虽然简单方便，但它本质上是对根日志器（root logger）做一次性配置的，<strong>不支持同时配置多个输出目标（Handler）</strong>。也就是说，如果你想实现“同时输出到终端和文件”，就需要用更灵活的方式——<strong>自定义 Logger + Handler + Formatter 的组合配置</strong>！</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>而<code>Handler </code>是什么呢?</strong><code>Handler </code>是 <code>logging</code> 模块中的一个核心概念，它负责将日志消息输出到指定的目标，如控制台、文件、网络等。而 Formatter 则负责定义输出日志的格式。通过组合 <code>Logger</code>、<code>Handler</code> 和 <code>Formatter</code>，我们能够更加灵活地控制日志的输出方式和格式。我们可以用下图来进行理解</p>
<p><img src="https://img2023.cnblogs.com/blog/3505969/202504/3505969-20250419052500766-1662893798.png" alt="image-20250419052456723" loading="lazy"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;具体的示例如下，我们首先创建一个 <code>logger</code> 对象，并通过 <code>getLogger</code> 方法为其指定一个名称（在这里是 <code>"example_logger"</code>）。接着，我们使用 <code>setLevel</code> 方法设置日志的最低输出级别为 <code>DEBUG</code>，这样所有级别（包括 <code>DEBUG</code>、<code>INFO</code>、<code>WARNING</code>、<code>ERROR</code> 和 <code>CRITICAL</code>）的日志都能被处理。然后，我们创建了两个 <code>Handler</code>：一个是 <code>StreamHandler</code>，用于将日志输出到控制台；另一个是 <code>FileHandler</code>，用于将日志写入名为 <code>logfile.log</code> 的文件。接着，我们使用 <code>Formatter</code> 设置日志输出的格式，包括日志器名称、日志时间、日志级别和日志信息，最后将这个 <code>Formatter</code> 配置应用到两个 <code>Handler</code> 上。最后，通过 <code>addHandler</code> 方法将这两个 <code>Handler</code> 添加到 <code>logger</code> 中，这样我们就能实现同时将日志输出到控制台和文件。</p>
<pre><code class="language-python">import logging

logger = logging.getLogger("example_logger")
logger.setLevel(logging.DEBUG)  

# 创建两个Handler，分别输出到控制台和文件
console_handler = logging.StreamHandler()  # 输出到控制台
file_handler = logging.FileHandler("logfile.log", encoding="utf-8")  # 输出到文件

# 创建Formatter并设置格式
formatter = logging.Formatter(
    '[%(name)s] [%(asctime)s] [%(levelname)s] %(message)s'
)
console_handler.setFormatter(formatter)  # 控制台Handler设置Formatter
file_handler.setFormatter(formatter)  # 文件Handler设置Formatter

# 将Handler添加到Logger中
logger.addHandler(console_handler)
logger.addHandler(file_handler)

logger.debug("This is a debug message")
logger.info("This is an info message")
logger.warning("This is a warning message")
logger.error("This is an error message")
logger.critical("This is a critical message")
</code></pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们运行下这段代码可以发现不仅终端有输出，我们的日志文件里面也有记录：</p>
<p><img src="https://img2023.cnblogs.com/blog/3505969/202504/3505969-20250419053117266-690779174.png" alt="image-20250419053113582" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/3505969/202504/3505969-20250419053124356-1081367757.png" alt="image-20250419053120876" loading="lazy"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong><font color="red">我们的基础教学到这就结束啦！希望本篇Blogs可以帮到大家！</font></strong></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.020831846168981483" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-19 05:45">2025-04-19 05:41</span>&nbsp;
<a href="https://www.cnblogs.com/SkyXZ">SkyXZ</a>&nbsp;
阅读(<span id="post_view_count">3</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18835033);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18835033', targetLink: 'https://www.cnblogs.com/SkyXZ/p/18835033', title: 'Python日志模块Logging使用指北' })">举报</a>
</div>
        