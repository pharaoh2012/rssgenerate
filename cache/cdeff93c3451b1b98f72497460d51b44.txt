
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18692631" title="发布于 2025-01-27 15:39">
    <span role="heading" aria-level="2">manim边学边做--时针方向变换</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>今天介绍的两个动画类<code>ClockwiseTransform</code>和<code>CounterclockwiseTransform</code>，</p>
<p>用于将某一个元素按照时针方向变换为另一个对象。</p>
<ol>
<li><code>ClockwiseTransform</code>：将一个对象以<strong>顺时针</strong>方向变换成另一个对象</li>
<li><code>CounterclockwiseTransform</code>：将一个对象以<strong>逆时针</strong>方向变换成另一个对象</li>
</ol>
<h1 id="1-动画概述">1. 动画概述</h1>
<h2 id="11-clockwisetransform">1.1. ClockwiseTransform</h2>
<p>在数学动画中，当你需要展示一个图形顺时针旋转并逐渐演变成另一个图形的过程时，就可以使用<code>ClockwiseTransform</code>。</p>
<p>例如，在讲解几何图形的变换、函数图像的演变等场景中，这个动画能够直观地展示顺时针的变换过程，帮助观众更好地理解图形之间的关系。</p>
<p><strong>顺时针变换</strong>是该动画类最显著的特点，它会使源对象以顺时针方向逐渐转变为目标对象。</p>
<p>它的参数主要有：</p>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>mobject</td>
<td>Mobject</td>
<td>起始的 <code>Mobject</code></td>
</tr>
<tr>
<td>target_mobject</td>
<td>Mobject</td>
<td>目标 <code>Mobject</code></td>
</tr>
<tr>
<td>path_arc</td>
<td>float</td>
<td>控制变换路径弧度的参数，用来确定对象在变换过程中所经过的<strong>顺时针</strong>弧线的弧度大小</td>
</tr>
</tbody>
</table>
<h2 id="12-counterclockwisetransform">1.2. CounterclockwiseTransform</h2>
<p><code>CounterclockwiseTransform</code> 与 <code>ClockwiseTransform</code> 类似，但它是将一个对象以逆时针方向变换成另一个对象。</p>
<p>在需要展示逆时针变换的场景中，如旋转木马的逆时针转动、几何图形的逆时针演变等，这个动画类就非常适用。</p>
<p>它的参数主要有：</p>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>mobject</td>
<td>Mobject</td>
<td>起始的 <code>Mobject</code></td>
</tr>
<tr>
<td>target_mobject</td>
<td>Mobject</td>
<td>目标 <code>Mobject</code></td>
</tr>
<tr>
<td>path_arc</td>
<td>float</td>
<td>控制变换路径弧度的参数，用来确定对象在变换过程中所经过的<strong>逆时针</strong>弧线的弧度大小</td>
</tr>
</tbody>
</table>
<h1 id="2-使用示例">2. 使用示例</h1>
<p>这两个类使用起来比较简单，也没什么参数，下面通过几个示例演示它们在实际动画中的一些可能的使用场景。</p>
<h2 id="21-图形顺时针变换">2.1. 图形顺时针变换</h2>
<p>这个示例实现了一个<strong>三角形</strong>顺时针变换为<strong>正方形</strong>的动画，直观展示了<code>ClockwiseTransform</code>对单个图形的变换效果。</p>
<pre><code class="language-rust">triangle = Triangle()
square = Square()
triangle.move_to(DOWN + LEFT * 2)
square.move_to(DOWN + RIGHT * 2)
self.add(triangle)
self.wait()
self.play(ClockwiseTransform(triangle, square))
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202501/83005-20250127153854113-1338020867.gif" alt="" loading="lazy"></p>
<h2 id="22-多个图形顺时针变换">2.2. 多个图形顺时针变换</h2>
<p>这个示例创建了多个<strong>圆形</strong>，使其分别顺时针变换为<strong>正方形</strong>，展示了多个对象同时进行顺时针变换的场景。</p>
<pre><code class="language-rust">circles = [
    Circle(radius=0.5) for i in range(3)
]
squares = [
    Square(side_length=1) for i in range(3)
]

circles[0].move_to(2 * LEFT + UP)
squares[0].move_to(2 * RIGHT + UP)
circles[1].move_to(2 * LEFT)
squares[1].move_to(2 * RIGHT)
circles[2].move_to(2 * LEFT + DOWN)
squares[2].move_to(2 * RIGHT + DOWN)

self.add(*circles)
self.wait()
animations = [ClockwiseTransform(circles[i], squares[i]) for i in range(3)]
self.play(*animations)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202501/83005-20250127153854239-1122903436.gif" alt="" loading="lazy"></p>
<h2 id="23-图形逆时针变换">2.3. 图形逆时针变换</h2>
<p>这个示例将<strong>五边形</strong>逆时针变换为<strong>八边形</strong>，体现了<code>CounterclockwiseTransform</code>对单个图形的逆时针变换功能。</p>
<pre><code class="language-rust">pentagon = RegularPolygon(n=5)
hexagon = RegularPolygon(n=8)
pentagon.move_to(UP + LEFT * 2)
hexagon.move_to(UP + RIGHT * 2)
self.add(pentagon)
self.wait()
self.play(CounterclockwiseTransform(pentagon, hexagon))
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202501/83005-20250127153854368-1872896488.gif" alt="" loading="lazy"></p>
<h2 id="24-多个图形逆时针变换">2.4. 多个图形逆时针变换</h2>
<p>这个示例实现了多个<strong>三角形</strong>逆时针变换为<strong>菱形</strong>的动画，呈现了多个对象同时进行逆时针变换的效果。</p>
<pre><code class="language-rust">triangles = [Triangle() for i in range(3)]
rhombuses = [RegularPolygon(n=4) for i in range(3)]

triangles[0].move_to(2 * LEFT + UP)
rhombuses[0].move_to(2 * RIGHT + UP)
triangles[1].move_to(2 * LEFT)
rhombuses[1].move_to(2 * RIGHT)
triangles[2].move_to(2 * LEFT + DOWN)
rhombuses[2].move_to(2 * RIGHT + DOWN)

self.add(*triangles)
self.wait()
animations = [
    CounterclockwiseTransform(triangles[i], rhombuses[i]) for i in range(3)
]
self.play(*animations)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202501/83005-20250127153854464-192795878.gif" alt="" loading="lazy"></p>
<h1 id="3-附件">3. 附件</h1>
<p>文中的代码只是关键部分的截取，完整的代码共享在网盘中（<code>clock.py</code>），</p>
<p>下载地址: <a href="https://url11.ctfile.com/d/45455611-64751047-a5be65?p=6872" target="_blank" rel="noopener nofollow">完整代码</a> (访问密码: 6872)</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.8591820342835648" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-27 15:40">2025-01-27 15:39</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">55</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18692631" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18692631);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18692631', targetLink: 'https://www.cnblogs.com/wang_yb/p/18692631', title: 'manim边学边做--时针方向变换' })">举报</a>
</div>
        