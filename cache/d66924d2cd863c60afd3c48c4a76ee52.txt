
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/weiyixuan2002621/p/18741208" title="发布于 2025-02-27 16:11">
    <span role="heading" aria-level="2">简易快递盒破损分类检测：</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<ul>
<li>本程序的主要目的是对破损的快递盒进行分类检测，主要使用<strong><a target="_blank">pytorch</a></strong>构建神经网络模型来解决这一问题。</li>
<li>本项目为本人第一个与深度学习有关的项目，有疏漏之处多多海涵，可以向我提出</li>
<li>有关于pytorch的内容请详见[<strong>官方文档</strong>](<a href="https://pytorch.org/docs/stable/index.html" target="_blank" rel="noopener nofollow">PyTorch 文档 — PyTorch 2.0 文档</a>)。如果需要中文版的教程，可以参考[<strong>知乎谭庆波</strong>](<a href="https://zhuanlan.zhihu.com/p/373559180" target="_blank" rel="noopener nofollow">PyTorch中文版官方教程来啦（附下载） - 知乎 (zhihu.com)</a>)的文档。</li>
<li>推荐使用<strong>CUDA</strong>来运行你的神经网络模型，这样可以使你的代码运行的更快。（<strong>[CUDA的下载地址](<a href="https://www.nvidia.cn/geforce/technologies/cuda/" target="_blank" rel="noopener nofollow">CUDA | GeForce (nvidia.cn)</a>)</strong>）</li>
<li>本程序还额外包括快递盒边缘检测和色彩识别的功能，如果需要使用这些功能，需要下载[<strong>opencv</strong>](<a href="https://opencv.org/" target="_blank" rel="noopener nofollow">首页 - OpenCV</a>)。</li>
<li>本程序曾用于哈尔滨工业大学的大创项目。作者：<em><strong>魏轶轩、崔家铭、史子琦、李武</strong></em>。</li>
<li>项目github地址：<a href="https://github.com/weiyixuanxx/Stereo-vision" target="_blank" rel="noopener nofollow">https://github.com/weiyixuanxx/Stereo-vision</a></li>
</ul>
<h2 id="1准备数据集">1.准备数据集</h2>
<ul>
<li>本次大创的数据集均存放于<strong>data</strong>中。</li>
<li>data下属两个文件：<strong>train</strong>和<strong>val</strong>。其中train为训练集，用于存放所有的训练数据；val为测试集，用于存放所有的测试数据。</li>
<li>train和val各自下属两个文件<strong>a</strong>和<strong>b</strong>，其含义是将图像分为两类：a类是正常完好包装的快递盒的图像，b类是有破损的快递盒的图像。</li>
<li>数据集中的图像通过<strong>双目识别摄像头</strong>获取。<em>有关于如何通过双目识别摄像头获取图像以及深度图是我们研究的另一个课题，此处不做阐述。</em></li>
<li>（<em>在中期实验阶段，数据集的内容并不是非常充分，有关于数据集的扩充我们打算放到结题部分去考虑。</em>）</li>
</ul>
<h2 id="2加载数据集">2.加载数据集</h2>
<ul>
<li>
<p><strong>图像的数据预处理：</strong></p>
<pre><code class="language-python">train_transformer=transforms.Compose([transforms.Resize(60),
                                 transforms.RandomCrop(48),
                                 transforms.ToTensor(),
                                 transforms.Normalize((0.5,0.5,0.5),(0.5,0.5,0.5))])
</code></pre>
<p>这段代码定义了一个数据预处理的变换序列 <code>train_transformer</code>，其包含四个变换操作：</p>
<ol>
<li><code>transforms.Resize(60)</code>：将输入的图像大小调整为60*60像素大小。</li>
<li><code>transforms.RandomCrop(48)</code>：随机裁剪输入图像为48*48像素大小。</li>
<li><code>transforms.ToTensor()</code>：将裁剪后的图像转换为张量形式，即将像素值转换为 [0,1]范围内的浮点数。</li>
<li><code>transforms.Normalize((0.5,0.5,0.5),(0.5,0.5,0.5))</code>：对张量进行标准化操作，即减去均值 0.5，除以标准差 0.5。</li>
<li>下面展示的<code>val_transformer</code>同理。</li>
</ol>
<pre><code class="language-python">val_transformer=transforms.Compose([transforms.Resize(48),
                                 transforms.ToTensor(),
                                 transforms.Normalize((0.5,0.5,0.5),(0.5,0.5,0.5))])
</code></pre>
</li>
<li>
<p><strong>读取并载入数据：</strong></p>
<pre><code class="language-python">train_dataset=datasets.ImageFolder(datatrain_dir,train_transformer)
val_dataset=datasets.ImageFolder(dataval_dir,val_transformer)
train_dataloader=torch.utils.data.DataLoader(train_dataset,
                          batch_size=64,shuffle=False,num_workers=1)
val_dataloader=torch.utils.data.DataLoader(val_dataset,batch_size=64                                        ,shuffle=False,num_workers=1)
</code></pre>
<ol>
<li><code>train_dataset</code>和<code>val_dataset</code>分别代表训练集和验证集。</li>
<li><code>train_dataloader</code>和<code>val_dataloader</code>用于将数据集分为小批量，并在训练和验证期间用于加载数据。</li>
</ol>
</li>
</ul>
<h2 id="3创建神经网络">3.创建神经网络</h2>
<ul>
<li>
<p><strong>定义一个神经网络模型：</strong></p>
<pre><code class="language-python">class CNN(nn.Module):
    def __init__(self,classes):
        super(CNN, self).__init__()
        self.conv1=nn.Conv2d(in_channels=3, out_channels=16, kernel_size=3, stride=2, padding=1)
        self.conv2=nn.Conv2d(in_channels=16, out_channels=32, kernel_size=3, stride=2, padding=1)
        self.conv3=nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, stride=2, padding=1)
        self.fc1=nn.Linear(64*6*6,100)
        self.fc2=nn.Linear(100,classes)
    
    def forward(self,x):
        x=F.relu(self.conv1(x))
        x=F.relu(self.conv2(x))
        x=F.relu(self.conv3(x))
        x=x.view(-1,64*6*6)
        x=F.relu(self.fc1(x))
        x=self.fc2(x)
        return x
</code></pre>
<p>如上所示，这段代码定义了一个卷积神经网络模型。</p>
<ol>
<li>该模型包含三个卷积层<code>conv1</code>、<code>conv2</code>、<code>conv3</code>和两个全连接层<code>fc1</code>、<code>fc2</code>。</li>
<li>卷积层<code>conv1</code>、<code>conv2</code>、<code>conv3</code>分别包含16、32和64个输出通道，使用3*3的卷积核大小，步幅为2，填充为1。</li>
<li>全连接层<code>fc1</code>的输入由卷积层计算得到，为64*6*6;全连接层<code>fc2</code>的输出为自定义<code>classes</code>，这样设计的好处是便于以后的改动。</li>
<li>模型的前向传递通过调用<code>forward</code>方法实现，输入图像x通过三个卷积层和激活函数<code>relu</code>进行特征提取和非线性变换，然后通过<code>view</code>方法将特征展开成一维向量，最后通过两个全连接层和<code>softmax</code>函数输出分类结果。</li>
</ol>
</li>
<li>
<p><strong>使用创建好的神经网络模型：</strong></p>
<pre><code class="language-python">net=CNN(2)
</code></pre>
</li>
</ul>
<h2 id="4进行训练测试">4.进行训练、测试</h2>
<ul>
<li>
<p><strong>初始化损失函数、优化器、学习率、训练轮次：</strong></p>
<pre><code class="language-python">from torch.optim import SGD
from torch.optim.lr_scheduler import StepLR

optim = SGD(net.parameters(),0.01,0.9)
criterion=torch.nn.CrossEntropyLoss()
lr_step=StepLR(optim,step_size=50,gamma=0.1)
epochs=200
</code></pre>
<ol>
<li><code>optim</code>使用了随机梯度下降<code>SGD</code>优化算法，对模型的参数进行优化更新。</li>
<li><code>SGD</code>有三个参数，第一个参数<code>net.parameters()</code>表示要更新的模型参数，第二个参数<code>lr=0.1</code>表示学习率，第三个参数<code>momentum=0.9</code>表示动量，可以加速训练过程。</li>
<li><code>criterion</code>定义了损失函数，这里使用了交叉熵损失函数<code>CrossEntropyLoss</code></li>
<li><code>lr_step</code>使用了步长学习率调整<code>StepLR</code>策略，即每50个<code>epoch</code>将学习率降低为原来的0.1倍。根据训练情况的不同，应<em>适当调整学习率</em>。</li>
<li><code>epochs</code>表示训练模型的总轮数。</li>
</ol>
</li>
<li>
<p><strong>创建训练函数：</strong></p>
<pre><code class="language-python">def train(net,optim,criterion,train_dataloader):
    running_loss = 0.0
    for data in train_dataloader:
        input,target=data
        output=net(input)
        loss=criterion(output,target)
        
        optim.zero_grad()
        loss.backward()
        optim.step()
        running_loss += loss.item()
    return running_loss / len(train_dataloader)
</code></pre>
<p>如上所示，这段代码定义了一个训练函数<code>train</code>，用于训练神经网络模型。</p>
<ol>
<li><code>train</code>接受四个参数：<code>net</code>表示要训练的神经网络模型，<code>optim</code>表示优化器，<code>criterion</code>表示损失函数，<code>train_dataloader</code>表示训练集数据加载器。</li>
<li>训练过程中，首先将<code>running_loss</code>初始化为0.0，然后遍历训练集数据加载器<code>train_dataloader</code>中的每个小批量数据<code>data</code>。</li>
<li>对于每个小批量数据，首先将输入数据<code>input</code>和目标标签数据<code>target</code>从<code>data</code>中提取出来，然后将输入数据<code>input</code>传入神经网络模型<code>net</code>中，得到输出<code>output</code>。</li>
<li>接下来，将输出<code>output</code>和目标标签数据<code>target</code>传入损失函数<code>criterion</code>中，计算出当前小批量数据的损失值<code>loss</code>。</li>
<li>将优化器<code>optim</code>的梯度缓存清零<code>optim.zero_grad()</code>，然后根据损失值<code>loss</code>计算梯度<code>loss.backward()</code>并进行参数更新<code>optim.step()</code>。</li>
<li>最后将当前小批量数据的损失值加到<code>running_loss</code>中,计算训练集的平均损失值并返回。</li>
</ol>
</li>
<li>
<p><strong>创建测试函数：</strong></p>
<pre><code class="language-python">def test(net,loader,criterion):
    net.eval()
    running_loss = 0.0
    correct = 0
    total = 0
    with torch.no_grad():
        for data in loader:
            inputs, labels = data
            inputs, labels = inputs, labels
            outputs = net(inputs)
            loss = criterion(outputs, labels)
            running_loss += loss.item()
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()
    return running_loss / len(loader), 100 * correct / total
</code></pre>
<p>如上所示，这段代码定义了一个测试函数<code>test</code>，用于测试训练好的神经网络模型在测试集上的表现。</p>
<ol>
<li><code>test</code>接受三个参数：<code>net</code>表示要测试的神经网络模型，<code>loader</code>表示测试集数据加载器，<code>criterion</code>表示损失函数。</li>
<li>测试过程中，首先将<code>net</code>设置为评估模式<code>eval</code>，然后将<code>running_loss</code>、<code>correct</code>和<code>total</code>分别初始化为0。</li>
<li>接下来，使用<code>torch.no_grad()</code>上下文管理器，该管理器可以在测试过程中不计算梯度，节省内存和时间。</li>
<li>遍历测试集数据加载器<code>loader</code>中的每个小批量数据<code>data</code>:对于每个小批量数据，首先将输入数据<code>inputs</code>和目标标签数据<code>labels</code>从<code>data</code>中提取出来。</li>
<li>将输入数据<code>inputs</code>传入神经网络模型<code>net</code>中，得到输出<code>outputs</code>。</li>
<li>接下来，将输出<code>outputs</code>和目标标签数据<code>labels</code>传入损失函数<code>criterion</code>中，计算出当前小批量数据的损失值<code>loss</code>,然后将当前损失值加到<code>running_loss</code>中。</li>
<li>使用<code>torch.max</code>函数找出输出<code>outputs</code>中概率最大的预测标签，并将其与目标标签<code>labels</code>进行比较，计算出正确分类的样本数<code>correct</code>和总样本数<code>total</code>。</li>
<li>最后，计算测试集的平均损失值和准确率，并返回。</li>
</ol>
</li>
<li>
<p><strong>使用训练函数和测试函数，进行训练、测试：</strong></p>
<pre><code class="language-python">for epoch in range(0,epochs):
        train_loss=train(net,optim,criterion,train_dataloader)
        test_loss,test_acc=test(net,train_dataloader,criterion)
        print("train_loss: " +str(train_loss)+" test_loss:                                "+str(test_loss)+"test_acc"+str(test_acc))
</code></pre>
</li>
<li>
<p><strong>保存训练结果：</strong></p>
<pre><code class="language-python">torch.save(net,'model.pth')
</code></pre>
</li>
</ul>
<p>上述内容的代码均在文件<strong>cnn.py</strong>中。</p>
<h2 id="5验证测试结果">5.验证测试结果</h2>
<p>验证测试结果的方式有两种：一种是终端输出的结果；一种是编写额外的测试程序。</p>
<ul>
<li>
<p><strong>终端输出的结果：</strong></p>
<p>刚开始训练时终端输出的结果，可以发现训练的正确率并不高：</p>
<p><img src="https://img2024.cnblogs.com/blog/2849450/202502/2849450-20250227160932082-1866663167.png" alt="image" loading="lazy"><br>
​      训练300次以后的正确率已经有了显著的提升：<br>
<img src="https://img2024.cnblogs.com/blog/2849450/202502/2849450-20250227160940204-918517624.png" alt="image" loading="lazy"></p>
</li>
<li>
<p><strong>额外编写的测试程序：</strong></p>
<pre><code class="language-python">import torch
import torchvision.transforms as transforms
from PIL import Image
from cnn import CNN

transformer = transforms.Compose([
    transforms.Resize((48, 48)),
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
])

model = torch.load('model.pth')
model.eval()

classes = ['good_box', 'evil_box']

img = Image.open('test1.jpg')
img_tensor = transformer(img).unsqueeze(0)

with torch.no_grad():
    output = model(img_tensor)
    _, predicted = torch.max(output.data, 1)
    print(classes[predicted.item()])
</code></pre>
<ol>
<li><code>torch.load</code>加载事先训练好的神经网络模型<code>model</code>，然后将其设置为评估模式：<code>model.eval()</code>。</li>
<li><code>classes</code>定义了数据集中的类别，这里是好盒子<code>good_box</code>和坏盒子<code>evil_box</code>。</li>
<li>本例中，待测试的图像文件是<code>'test1.jpg'</code>,通过<code>img_tensor = transformer(img).unsqueeze(0)</code>将其转换为张量形式。</li>
<li>使用<code>torch.max</code>找出输出中概率最大的预测标签，并将其与类别列表<code>classes</code>进行对应，最后打印出预测结果。</li>
</ol>
</li>
</ul>
<h2 id="6基于opencv实现的其它功能">6.基于opencv实现的其它功能</h2>
<ul>
<li>
<p><strong>基于canny的边缘轮廓检测：</strong></p>
<pre><code class="language-python">def edge_detection(img,canny_a,canny_b):
    img0 = cv.GaussianBlur(img, (5, 5), 0)
    edges=cv.Canny(img0,canny_a,canny_b)
    _,edges=cv.threshold(edges,127,255,cv.THRESH_BINARY)
    contours,hierarchy=cv.findContours(edges,cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)
    return contours,hierarchy,edges
</code></pre>
<ol>
<li>上述代码是一个可以实现边缘检测的函数，接受三个参数：原始图像<code>img</code>，canny算子的两个参数<code>canny_a</code>和<code>canny_b</code>。</li>
<li><code>cv.GaussianBlur(img, (5, 5), 0)</code>：对原始图像进行高斯模糊，去除图像噪点。</li>
<li><code>cv.Canny(img0,canny_a,canny_b)</code>：使用Canny算子进行边缘检测，得到二值化的边缘图像。</li>
<li><code>cv.threshold(edges,127,255,cv.THRESH_BINARY)</code>：对二值化的边缘图像进行阈值处理，将所有大于等于127的像素值设为255，其余设为0。</li>
<li><code>cv.findContours(edges,cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)</code>：通过<code>findContours</code>函数找到二值化边缘图像中的所有轮廓。</li>
<li><code>return contours,hierarchy,edges</code>：返回轮廓列表、层级和二值化边缘图像。</li>
</ol>
</li>
<li>
<p><strong>颜色识别：</strong></p>
<pre><code class="language-python">def color_detection(img,l1,l2,l3,u1,u2,u3):
    lower_range=np.array([l1,l2,l3])
    upper_range=np.array([u1,u2,u3])
    hsv_img = cv.cvtColor(img, cv.COLOR_BGR2HSV)
    mask = cv.inRange(hsv_img, lower_range, upper_range)
    target=cv.bitwise_and(img,img,mask=mask)
    return target
</code></pre>
<ol>
<li>上述代码是一个可以实现颜色识别的函数，接受七个参数：原始图像<code>img</code>，指定颜色区域的上下阈值<code>l1</code>、<code>l2</code>、<code>l3</code>、<code>u1</code>、<code>u2</code>、<code>u3</code>，以HSV空间表示。</li>
<li><code>cv.cvtColor(img, cv.COLOR_BGR2HSV)</code>：将输入图像<code>img</code>从BGR颜色空间转换为HSV颜色空间。</li>
<li><code>cv.inRange(hsv_img, lower_range, upper_range)</code>：得到指定颜色区域的二值掩模<code>mask</code>，<code>mask</code>中指定颜色区域的像素值为255，其余为0。</li>
<li><code>cv.bitwise_and(img,img,mask=mask)</code>：将输入图像<code>img</code>和二值掩模<code>mask</code>进行按位与操作，得到检测结果<code>target</code>。</li>
<li>最后，函数返回检测结果<code>target</code>。</li>
</ol>
</li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.006357006591435185" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-27 16:11">2025-02-27 16:11</span>&nbsp;
<a href="https://www.cnblogs.com/weiyixuan2002621">我的名称总是会被占用</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18741208" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18741208);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18741208', targetLink: 'https://www.cnblogs.com/weiyixuan2002621/p/18741208', title: '简易快递盒破损分类检测：' })">举报</a>
</div>
        