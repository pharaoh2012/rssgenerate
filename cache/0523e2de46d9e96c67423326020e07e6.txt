
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xwz1024/p/18952708" title="发布于 2025-06-27 17:18">
    <span role="heading" aria-level="2">Django实战：自定义中间件实现全链路操作日志记录</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="一中间件">一、中间件</h2>
<h3 id="介绍">介绍</h3>
<p>在 Django 中，中间件（Middleware）是一组轻量级、底层的插件系统，用于全局地改变 Django 的输入和输出。中间件可以在请求被处理之前和响应返回之前执行代码，从而实现各种功能，例如跨域资源共享（CORS）、用户认证、日志记录等。</p>
<h3 id="激活中间件">激活中间件</h3>
<p>若要激活中间件，需要添加到<code>settings.MIDDLEWARE</code>中</p>
<ul>
<li>每个中间件组件由字符串表示：指向中间件工厂类的完整 Python 路径。</li>
<li>需求注意中间件的添加顺序。因为中间件有执行顺序，而且中间件之间可能有依赖关系。</li>
<li>中间件的全局执行顺序
<ul>
<li>请求阶段：按<code>settings.MIDDLEWARE</code>中<strong>从上到下</strong>的顺序执行。</li>
<li>视图处理：请求到达视图函数。</li>
<li>响应阶段：按<code>settings.MIDDLEWARE</code>中<strong>从下到上</strong>的顺序执行。</li>
</ul>
</li>
</ul>
<pre><code class="language-python">MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # CORS跨域支持
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",  # I18N多语言支持，注意放置顺序
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # "myapp_system.operate_log.services.OperateLogMiddleware",  # 操作日志开关：如果数据库磁盘IO性能一般，建议关闭
]
</code></pre>
<h3 id="生命周期">生命周期</h3>
<p>中间件生命周期</p>
<ul>
<li>请求阶段：<code>process_request(request)</code>：在视图函数被调用之前执行，用于处理请求。如果返回 <code>HttpResponse</code> 对象，则后续的中间件和视图不会被调用，直接返回响应。</li>
<li>视图阶段：<code>process_view(request, view_func, view_args, view_kwargs)</code>：在视图函数被调用之前执行，可以用于根据视图函数的参数或请求信息进行额外处理。</li>
<li>响应阶段：<code>process_response(request, response)</code>：在视图函数返回响应后执行，用于处理响应对象，可以修改响应内容或响应头。</li>
<li>异常阶段：<code>process_exception(request, exception)</code>：当视图函数抛出异常时执行，用于处理异常并返回一个 <code>HttpResponse</code> 对象。</li>
</ul>
<p>内置中间件示例</p>
<ul>
<li><code>django.contrib.auth.middleware.AuthenticationMiddleware</code>：Django内置的认证中间件，实现将 <code>user</code> 属性添加到每个传入的 <code>HttpRequest</code> 对象中，表示当前已登录的用户</li>
</ul>
<pre><code class="language-python">class AuthenticationMiddleware(MiddlewareMixin):
    def process_request(self, request):
        if not hasattr(request, "session"):
            raise ImproperlyConfigured(
                "The Django authentication middleware requires session "
                "middleware to be installed. Edit your MIDDLEWARE setting to "
                "insert "
                "'django.contrib.sessions.middleware.SessionMiddleware' before "
                "'django.contrib.auth.middleware.AuthenticationMiddleware'."
            )
        request.user = SimpleLazyObject(lambda: get_user(request))
</code></pre>
<h2 id="二自定义中间件">二、自定义中间件</h2>
<h3 id="中间件钩子函数">中间件钩子函数</h3>
<p><code>process_view()</code>中间件钩子函数</p>
<ul>
<li>语法：<code>process_view(request, view_func, view_args, view_kwargs)</code></li>
<li>调用顺序：process_view() 只在 Django 调用视图前被调用。</li>
<li>返回
<ul>
<li>如果它返回 <code>None</code> ，Django 将继续处理这个请求，执行任何其他的 <code>process_view()</code> ，然后执行相应的视图。</li>
<li>如果它返回 <code>HttpResponse</code> 对象，Django 不会去影响调用相应的视图；它会将响应中间件应用到 <code>HttpResponse</code> 并返回结果。</li>
</ul>
</li>
</ul>
<h3 id="基于类的中间件">基于类的中间件</h3>
<p>基于类的自定义中间件格式</p>
<ul>
<li>语句<code>response = self.get_response(request)</code>，将<code>__call__()</code>方法中的代码分为两部分</li>
</ul>
<pre><code class="language-python">class SimpleMiddleware:
    def __init__(self, get_response):
        # 执行一次性配置和初始化工作
        self.get_response = get_response

    def __call__(self, request):
        # 每个请求调用一次，在视图函数被调用之前执行

        response = self.get_response(request)

        # 每个请求调用一次，在视图函数被调用之后执行
        return response
</code></pre>
<h2 id="三实战案例">三、实战案例</h2>
<h3 id="操作日志功能">操作日志功能</h3>
<p>通过自定义中间件，实现Django操作日志记录功能</p>
<ul>
<li>第1步：定义类<code>OperateLogMiddleware</code>，方法<code>__init__()</code>中，添加<code>exclude_urls</code>排除不需要记录的URL的列表，和一个字典<code>log_data</code>用于临时存放日志信息。</li>
</ul>
<p><img alt="image-20250627153737396" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202506/1565852-20250627171535223-1904760843.png" class="lazyload"></p>
<ul>
<li>第2步：在执行视图函数之前，向字典<code>log_data</code>记录请求方法、请求路径、操作IP、浏览器Agent信息等</li>
</ul>
<p><img alt="image-20250627154606871" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202506/1565852-20250627171544534-1920502128.png" class="lazyload"></p>
<ul>
<li>第3步：在执行视图函数之后，向字典<code>log_data</code>记录用户ID、业务状态码、HTTP状态码、响应数据、返回结果和执行时间</li>
</ul>
<p><img alt="image-20250627154833216" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202506/1565852-20250627171549077-1349510364.png" class="lazyload"></p>
<ul>
<li>第4步：<code>process_view()</code>中间件钩子函数中，向字典<code>log_data</code>记录视图名称、Action名称、资源ID</li>
</ul>
<p><img alt="image-20250627155122465" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202506/1565852-20250627171554394-802444048.png" class="lazyload"></p>
<p>第5步：字典<code>log_data</code>记录的操作日志信息，通过Celery异步任务，写入数据库。实现操作日志记录功能。</p>
<p>参考：<a href="https://gitee.com/zhulj993/mars-mgn/blob/master/mysite/myapp_system/operate_log/services.py" target="_blank" rel="noopener nofollow">完整代码地址</a></p>
<h3 id="参考资料">参考资料</h3>
<ul>
<li><a href="https://docs.djangoproject.com/zh-hans/4.2/topics/http/middleware/" target="_blank" rel="noopener nofollow">Django 自定义中间件</a></li>
<li><a href="https://docs.djangoproject.com/zh-hans/4.2/ref/middleware/" target="_blank" rel="noopener nofollow">Django 中间件</a></li>
</ul>
<hr>
<p>您正在阅读的是《<strong>Django从入门到实战</strong>》专栏！关注不迷路~</p>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-27 17:18">2025-06-27 17:18</span>&nbsp;
<a href="https://www.cnblogs.com/xwz1024">小王子1024</a>&nbsp;
阅读(<span id="post_view_count">50</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18952708);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18952708', targetLink: 'https://www.cnblogs.com/xwz1024/p/18952708', title: 'Django实战：自定义中间件实现全链路操作日志记录' })">举报</a>
</div>
	