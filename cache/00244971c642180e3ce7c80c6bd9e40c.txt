
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xwz1024/p/18989545" title="发布于 2025-07-17 14:14">
    <span role="heading" aria-level="2">Django 实战：静态文件与媒体文件从开发配置到生产部署</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250717141426629-1199024744.png" alt="Django 实战：静态文件与媒体文件从开发配置到生产部署" class="desc_img">
        Django项目中，静态文件（Static Files）和媒体文件（Media Files）是两类不同用途的文件。本文详细介绍了它们的区别、配置方法以及在开发与生产环境中的处理方式，并结合用户头像上传功能进行实战演示，最后讲解了如何通过Nginx或OpenResty部署静态与媒体文件服务。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="一静态文件与媒体文件">一、静态文件与媒体文件</h2>
<h3 id="区别与联系">区别与联系</h3>
<p>在 Django 项目中，静态文件（Static Files）和媒体文件（Media Files）是两种不同类型的文件，需要不同的处理方式。</p>
<table>
<thead>
<tr>
<th style="text-align: center"><strong>特性</strong></th>
<th style="text-align: center"><strong>静态文件 (Static Files)</strong></th>
<th style="text-align: center"><strong>媒体文件 (Media Files)</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center"><strong>定义</strong></td>
<td style="text-align: center">开发人员创建的文件（CSS, JS, 图片等）</td>
<td style="text-align: center">用户上传的文件（头像、文档等）</td>
</tr>
<tr>
<td style="text-align: center"><strong>来源</strong></td>
<td style="text-align: center">项目代码库的一部分</td>
<td style="text-align: center">用户生成的内容</td>
</tr>
<tr>
<td style="text-align: center"><strong>变更频率</strong></td>
<td style="text-align: center">低（部署时更新）</td>
<td style="text-align: center">高（用户随时上传）</td>
</tr>
<tr>
<td style="text-align: center"><strong>存储位置</strong></td>
<td style="text-align: center"><code>STATIC_ROOT</code></td>
<td style="text-align: center"><code>MEDIA_ROOT</code></td>
</tr>
<tr>
<td style="text-align: center"><strong>访问 URL</strong></td>
<td style="text-align: center"><code>STATIC_URL</code></td>
<td style="text-align: center"><code>MEDIA_URL</code></td>
</tr>
<tr>
<td style="text-align: center"><strong>生产环境服务</strong></td>
<td style="text-align: center">Nginx 直接提供</td>
<td style="text-align: center">Nginx 直接提供</td>
</tr>
<tr>
<td style="text-align: center"><strong>开发环境服务</strong></td>
<td style="text-align: center">Django 开发服务器</td>
<td style="text-align: center">Django 开发服务器</td>
</tr>
</tbody>
</table>
<h3 id="配置">配置</h3>
<p>在<code>settings.py</code>中，添加静态文件和媒体文件相关配置</p>
<pre><code class="language-python">### 静态文件配置
STATIC_ROOT = BASE_DIR / "static"
STATIC_URL = "/static/"

### 媒体文件配置（用户上传文件）
MEDIA_ROOT = BASE_DIR / "media"  # 文件存储的绝对物理路径
MEDIA_URL = "/media/"  # 访问媒体文件的URL前缀
FILE_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB内存缓冲
DATA_UPLOAD_MAX_MEMORY_SIZE = 104857600  # 100MB请求体限制

### 生产环境中，静态文件与媒体文件的访问地址
NGINX_BASE_URL = "http://192.168.0.73"  # 填写Nginx或OpenResty 的IP或域名
</code></pre>
<h3 id="开发环境配置">开发环境配置</h3>
<p>在开发环境中，访问静态文件或媒体文件，需要在<code>urls.py</code>添加如下配置。<a href="https://gitee.com/zhulj993/mars-mgn/blob/master/mysite/mysite/urls.py" target="_blank" rel="noopener nofollow">点击查看完整代码</a></p>
<pre><code class="language-python">### 下面配置只有在 DEBUG=True 时才生效
if settings.DEBUG:
    # 在开发环境提供静态和媒体文件。生产环境请关闭，并使用Nginx或OpenResty
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
</code></pre>
<h2 id="二媒体文件实战">二、媒体文件实战</h2>
<h3 id="实战场景">实战场景</h3>
<p>在一个信息管理系统中，用户自定义头像是常见的功能需求。实战场景：<strong>用户自定义头像功能实现</strong>。</p>
<h3 id="定义模型">定义模型</h3>
<p><code>avatar_upload_rename()</code>函数作用：头像文件重命名，然后按年份分目录存储</p>
<p><code>models.FileField()</code>模型字段：</p>
<ul>
<li><code>upload_to</code>：指定上传位置</li>
<li><code>max_length</code>：在数据库中创建为 varchar 类型，默认为 100 个字符</li>
<li><code>storage</code>（可选）：指定后端存储系统，默认为<code>FileSystemStorage</code>本地文件系统</li>
</ul>
<pre><code class="language-python">class SystemUsers(BaseModel, AbstractBaseUser):
    # ... 
    avatar = models.FileField(
        upload_to=avatar_upload_rename,
        max_length=512,
        blank=True,
        null=True,
        db_comment="头像地址",
        help_text="头像地址",
    )
    # ...
    

def avatar_upload_rename(instance, filename):
    """头像文件重命名，并指定存储路径"""
    ext = filename.split(".")[-1]  # 获取文件扩展名
    year = datetime.now().strftime("%Y")
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S%f")[:-3]
    return f"avatars/{year}/{timestamp}.{ext}"  # 按年份分目录存储
    
</code></pre>
<h3 id="定义序列化器">定义序列化器</h3>
<pre><code class="language-python">class UserProfileAvatarSerializer(serializers.ModelSerializer):
    """上传用户个人头像序列化器"""

    avatarFile = serializers.FileField(
        source="avatar",
        help_text="头像地址",
        max_length=512,
    )

    class Meta:
        model = SystemUsers
        fields = ["avatarFile"]
</code></pre>
<h3 id="定义视图">定义视图</h3>
<p><code>_build_avatar_response()</code>函数：返回完整的头像URL地址</p>
<ul>
<li>当<code>settings.DEBUG</code>为True（即开发环境时），返回由Django提供文件访问的URL地址</li>
<li>否则，返回Nginx提供文件访问的URL地址</li>
</ul>
<p><code>instance.avatar.url</code>：这里的<code>avatar</code>是一个FieldFile的实例，包含以下属性</p>
<ul>
<li>url 一个只读属性，返回访问文件的URL</li>
<li>name 文件名</li>
<li>path 一个只读属性，通过调用底层的 path() 方法，访问文件的本地文件系统路径</li>
<li>size 文件大小</li>
</ul>
<p><img alt="image-20250717093727565" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250717141223028-1690328959.png" class="lazyload"></p>
<h3 id="实现效果">实现效果</h3>
<p>用户上传头像后，返回由Django提供文件访问的URL地址（DEBUG = True）</p>
<p><img alt="image-20250717095545217" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250717141231670-1747272504.png" class="lazyload"></p>
<p>头像文件，按年份分目录存储</p>
<p><img alt="image-20250717100107618" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250717141242250-1739838500.png" class="lazyload"></p>
<p>如果在生产环境（DEBUG = False），则返回Nginx提供文件访问的URL地址。例如：<code>http://192.168.0.73/media/avatars/2025/20250611110101994.jpg</code></p>
<p><a href="https://gitee.com/zhulj993/mars-mgn/blob/master/mysite/myapp_system/user_profile/views.py" target="_blank" rel="noopener nofollow">点击查看完整代码</a></p>
<h2 id="三生产部署">三、生产部署</h2>
<h3 id="说明">说明</h3>
<p>在 Django 项目中，使用 Nginx 或 OpenResty 高效地托管静态文件和媒体文件，是生产环境的最佳实践。</p>
<h3 id="收集静态文件">收集静态文件</h3>
<p>收集静态文件相关功能依赖<code>django.contrib.staticfiles</code> 这个APP，它将各个应用的静态文件统一收集起来。确保它已添加在<code>settings.py</code>文件中的<code>INSTALLED_APPS</code>列表里。</p>
<pre><code class="language-python">INSTALLED_APPS = [
	# ...
    "django.contrib.staticfiles",
    # ...
]
</code></pre>
<p>运行下面命令，会将所有静态文件会汇总到配置文件<code>settings.py</code>指定的 <code>STATIC_ROOT</code> 目录</p>
<pre><code class="language-sh"># 收集静态文件
python manage.py collectstatic
# 或加上--noinput 参数，这样不用二次确认
python manage.py collectstatic --noinput
</code></pre>
<h3 id="nginx配置示例">Nginx配置示例</h3>
<pre><code class="language-sh">server {
    listen 80;
    server_name yourdomain.com;

    # 静态文件路由
    location /static/ {
        alias /var/www/myapp/static/;  # 替换为实际的 Django 静态文件路径
        expires 30d;  # 缓存时间
        access_log off;  # 可选：关闭日志减少IO
    }

    # 媒体文件路由（用户上传内容）
    location /media/ {
        alias /var/www/myapp/media/; # 替换为实际的 Django 媒体文件路径
    }

    # 前端配置
    location / {
        root /www/sites/mars-mgn-vue/index;  # 前端构建目录
        index index.html;
        try_files $uri $uri/ /index.html;   # 支持前端路由
    }
}
</code></pre>
<h3 id="openresty配置示例">OpenResty配置示例</h3>
<pre><code class="language-sh">server {
    listen 80 ; 
    server_name 192.168.0.73; 

    # 静态文件配置 (CSS, JS, images)
    location /static/ {
        alias /static/;  # 替换为实际的 Django 静态文件路径
        expires 1d;
        access_log off;
    }

    # 媒体文件配置 (用户上传内容)
    location /media/ {
        alias /media/;  # 替换为实际的 Django 媒体文件路径
        expires 1d;
        access_log off;
    }

    index index.php index.html index.htm default.php default.htm default.html; 
    proxy_set_header Host $host; 
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
    proxy_set_header X-Forwarded-Host $server_name; 
    proxy_set_header X-Real-IP $remote_addr; 
    proxy_http_version 1.1; 
    proxy_set_header Upgrade $http_upgrade; 
    proxy_set_header Connection $http_connection; 
    access_log /www/sites/mars-mgn-vue/log/access.log main; 
    error_log /www/sites/mars-mgn-vue/log/error.log; 
    location ^~ /.well-known/acme-challenge {
        allow all; 
        root /usr/share/nginx/html; 
    }
    # 前端配置
    location / {
        root /www/sites/mars-mgn-vue/index;  # 前端构建目录
        index index.html;
        try_files $uri $uri/ /index.html;   # 支持前端路由
    }
}
</code></pre>
<p><a href="https://gitee.com/zhulj993/mars-mgn/blob/master/devops/1panel/openresty.conf" target="_blank" rel="noopener nofollow">点击查看完整代码</a></p>
<hr>
<p>您正在阅读的是《<strong>Django从入门到实战</strong>》专栏！关注不迷路~</p>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-17 14:15">2025-07-17 14:14</span>&nbsp;
<a href="https://www.cnblogs.com/xwz1024">小王子1024</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18989545);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18989545', targetLink: 'https://www.cnblogs.com/xwz1024/p/18989545', title: 'Django 实战：静态文件与媒体文件从开发配置到生产部署' })">举报</a>
</div>
	