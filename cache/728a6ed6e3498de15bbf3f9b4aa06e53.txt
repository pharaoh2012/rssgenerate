
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mtueih/p/18850298" title="发布于 2025-04-27 19:46">
    <span role="heading" aria-level="2">使用 Joplin + Git + Gitee 实现笔记的多端同步</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="1-远程仓库环境准备">1-远程仓库环境准备</h2>
<h3 id="11-注册-gitee-账号">1.1-注册 Gitee 账号</h3>
<blockquote>
<p>由于使用 Git 作为版本控制工具，所以只要是 Git 支持的托管平台都是可以的。比如 Github、Gitlab。这里使用 Gitee 主要是考虑到安卓端访问 Gitee 更容易。</p>
</blockquote>
<h3 id="12-创建远程仓库">1.2-创建远程仓库</h3>
<p>创建一个<strong>远程仓库</strong>，用于存放笔记文件。</p>
<h2 id="2-本地仓库环境准备">2-本地仓库环境准备</h2>
<p>多端同步的核心工具是 <strong>Git</strong>，因此首先要在<strong>每个</strong>需要同步的平台上配置好 <strong>Git</strong> 环境。</p>
<h3 id="21-安装和配置-git">2.1-安装和配置 Git</h3>
<p><mark>PC 端安装和配置 Git 非常容易，因此不再赘述了，这里主要说一下安卓端。</mark></p>
<p><strong>Git</strong> 没有直接提供 Andriod 端的版本，所以需要借助 <strong>Termux</strong> 这个安卓平台上的<strong>终端模拟器</strong>来安装和运行。</p>
<blockquote>
<p>使用 <strong>Termux</strong> 还有一个特点就是很多操作和 Linux 平台上都是一致的，比如后面要使用 <strong>bash</strong> 脚本进行本地和远程仓库之间的同步操作，Linux 和 安卓端可以使用除了路径信息不一样外完全相同的脚本。</p>
</blockquote>
<p>因此首先要安装 <strong>Termux</strong>。</p>
<h4 id="211-安装-termux">2.1.1-安装 <strong>Termux</strong></h4>
<p><strong>Termux</strong> 可以通过 <strong>F-Droid</strong> 或者从 <strong>Github</strong> 下载安装包来安装。</p>
<h4 id="212-为-termux-获取设备存储访问权限">2.1.2-<mark>为 <strong>Termux</strong> 获取设备存储访问权限</mark></h4>
<p>由于安卓环境的特殊性，<strong>Termux</strong> 本身是没有安卓设备存储的访问权限的，因为后续要对本地仓库文件夹进行一系列的操作，所以这一部是非常<strong>必要</strong>且<strong>重要</strong>的。</p>
<ol>
<li>在 <strong>Termux</strong> 中执行以下命令：<br>
<code>termux-setup-storage</code></li>
<li>之后手机会提示授权，<mark>同意</mark>即可。</li>
</ol>
<p>之后，<strong>Termux</strong> 会在 <code>～</code> 目录(<code>~</code> 是 <strong>Termux</strong> 默认用户的 <strong>Home</strong> 目录，对应于手机存储的实际的 <code>/data/data/com.termux/files/home</code> 目录)下创建几个目录来<mark>映射</mark>手机对应的目录，当然，都是在 <code>/storage/emulated/0</code> 之下的目录。具体映射情况如下表：</p>
<table>
<thead>
<tr>
<th><strong>Termux</strong> 中的路径</th>
<th>手机存储中的实际路径</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><code>~/storage/shared</code></strong></td>
<td><strong><code>/storage/emulated/0</code></strong></td>
<td>相当于手机的默认用户的 <strong>Home</strong> 目录。</td>
</tr>
<tr>
<td><code>~/storage/downloads</code></td>
<td><code>/storage/emulated/0/Download</code></td>
<td>从系统浏览器等应用下载的文件默认保存目录。</td>
</tr>
<tr>
<td><code>~/storage/dcim</code></td>
<td><code>/storage/emulated/0/DCIM</code></td>
<td>相机捕获的图片和视频的常规存储目录。</td>
</tr>
<tr>
<td><code>~/storage/pictures</code></td>
<td><code>/storage/emulated/0/Pictures</code></td>
<td>用户可访问的图片存储目录。</td>
</tr>
<tr>
<td><code>~/storage/music</code></td>
<td><code>/storage/emulated/0/Music</code></td>
<td>用户音乐列表中的音频文件存储目录。</td>
</tr>
<tr>
<td><code>~/storage/movies</code></td>
<td><code>/storage/emulated/0/Movies</code></td>
<td>用户可访问的电影存储目录。</td>
</tr>
<tr>
<td><code>~/storage/external-1</code></td>
<td>外部存储卡路径（如果存在）</td>
<td>如果设备有外部存储卡，此目录会映射到外部存储卡的 Termux 私有文件夹。</td>
</tr>
</tbody>
</table>
<p>这里重点需要关注的是 <strong><code>~/storage/shared</code></strong> -&gt; <strong><code>/storage/emulated/0</code></strong>。</p>
<p>总之，就可以在 <strong>Termux</strong> 中使用映射的路径来访问手机的目录了，包括后续在 <strong>Termux</strong> 中访问、git 操作、bash 脚本中都使用映射的路径来访问。</p>
<h4 id="213-在-termux-中安装-git">2.1.3-在 <strong>Termux</strong> 中安装 <strong>Git</strong></h4>
<p>Termux 的默认包管理器是 <strong>pkg</strong>。习惯上，在使用包管理器安装特定的包之前，首先应<strong>更新软件包索引</strong>。</p>
<ol>
<li>更新 <strong>pkg</strong> 软件包索引。<br>
在 <strong>Termux</strong> 中输入以下命令：<br>
<code>pkg update</code></li>
<li>安装 <strong>Git</strong>。<br>
在 <strong>Termux</strong> 中输入以下命令：<br>
<code>pkg install git</code></li>
</ol>
<hr>
<p>至此，安卓平台的 Git 就安装完成了。</p>
<h4 id="214-配置-git-用户信息">2.1.4-配置 Git 用户信息</h4>
<p>配置本地 Git 的 <strong>user.name</strong> 和 <strong>user.email</strong> 信息，这对于 Git 的推送操作来说是必不可少的。</p>
<p>在 <strong>Termux</strong> 中输入以下两条命令：</p>
<ol>
<li><code>git config --global user.name "your name"</code></li>
<li><code>git config --global user.email "your@email.com"</code></li>
</ol>
<p>其中，</p>
<ul>
<li><code>config</code> 表示此命令用于配置一些东西；</li>
<li><code>--global</code> 表示配置全局信息，即配置的内容对当前用户下的所有本地 Git 仓库都生效，这不是必要的，但没有特殊需求的话推荐这样做；</li>
<li><code>user.name</code> 和 <code>user.email</code> 是所要配置的对象，对于推送操作来说，这两个信息是必不可少的；</li>
<li>最后的字符串是配置的内容，一般与代码托管平台上的信息相一致。</li>
</ul>
<h3 id="22-配置-ssh-密钥">2.2-配置 SSH 密钥</h3>
<p>创建 <strong>SSH 密钥</strong>是为了使用 <strong>SSH 协议</strong>更方便快捷的对<strong>远程仓库</strong>进行<strong>拉取</strong>和<strong>推送</strong>。</p>
<blockquote>
<p><strong>SSH</strong> 密钥是一种加密技术，一个 SSH 密钥包含一个<strong>公钥</strong>和一个<strong>私钥</strong>，公钥用于公开给别人，别人使用此公钥加密后的数据，只有对应的私钥能解密。因此，SSH 加密技术通常用于单向通信。</p>
</blockquote>
<p>在每个平台上都需要生成一对 SSH 密钥。</p>
<ol>
<li>生成 SSH 密钥<br>
每个平台生成 SSH 密钥的命令基本是一致的：<br>
<code>ssh-keygen -t rsa -C "注释信息"</code><br>
其中，
<ul>
<li><code>ssh-keygen</code> 是 <strong>OpenSSH</strong> 提供的一个用于生成 SSH 密钥对的工具；</li>
<li><code>-t rsa</code> 指定了密钥的类型或者说使用的加密算法；</li>
<li><code>-C "注释信息"</code> 指定了密钥的注释信息，这不是必要的，但通常的做法是用自己的邮箱地址作为注释信息。</li>
</ul>
</li>
</ol>
<p>输入命令后一路回车即可。</p>
<ol start="2">
<li>将每个平台的<mark>公钥</mark>添加到托管平台上</li>
</ol>
<p>上一步生成后在 <code>~/.ssh</code> 目录下会有 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文本文件，其中，<code>id_rsa</code> 里存的是私钥，<code>id_rsa.pub</code> 里存的是公钥，将每个平台上的 <code>id_rsa.pub</code> 文件中的内容分别复制，并添加到托管平台的 SSH 公钥列表中。</p>
<h3 id="23-创建并配置本地仓库">2.3-创建并配置本地仓库</h3>
<h4 id="231-创建本地仓库">2.3.1-创建本地仓库</h4>
<ol>
<li>首先分别在每个平台上，创建好用于存放笔记的文件夹，建议使用统一的名字，如 <code>Joplin</code>。</li>
</ol>
<p><mark>安卓端</mark>，为了 Joplin 软件以及<strong>你自己</strong>能够方便的访问，建议将目录创建在 <code>/storage/emulated/0</code> 之下，比如 <code>/storage/emulated/0/Joplin</code>。</p>
<ol start="2">
<li>
<p>初始化 Git 仓库，进入仓库目录，输入以下命令：<br>
<code>git init .</code></p>
</li>
<li>
<p>配置远程仓库的链接</p>
</li>
</ol>
<p>首先应获取远程仓库的 <strong>SSH 链接</strong>，建议复制粘贴，以免错误。在远程仓库的页面中就可以找到，注意要找的是 SSH 链接，应该类似下面这个样子：</p>
<p><code>git@gitee.com:mtueih/joplin.git</code></p>
<p>在仓库目录中，输入以下命令：</p>
<p><code>git remote add origin "git@gitee.com:mtueih/joplin.git"</code></p>
<p>注意将后面的链接替换成你的仓库的 SSH 链接。</p>
<p><mark>★【针对安卓端】将仓库目录添加到 Git 的安全目录列表中</mark></p>
<p>处于对安全的考虑，当执行一个 Git 操作时，如果操作的目标仓库的所有权不属于执行此操作的用户，这个操作不会被执行，并且 Git 会给出错误信息。简而言之就是 Git 只允许<strong>你</strong>对属于<strong>你</strong>的仓库执行操作。</p>
<p>在 <strong>Termux</strong> 环境中，通常都是以其默认用户的身份执行 <strong>Git</strong> 操作的，而创建在 <code>/storage/emulated/0</code> 之下的 Git 仓库的所有权并不是 <strong>Termux</strong> 的<strong>默认用户</strong>的，而是手机的<strong>默认用户</strong>的，或者说是因为此仓库的路径在 Termux 的默认用户的 Home 目录之外，这就会导致前述问题。</p>
<p>如前所述，将仓库目录创建在 <code>/storage/emulated/0/Joplin</code> 是迫不得已，所以有两种解决办法，一是修改仓库的所有权，二是将仓库目录添加到 Termux 的默认用户的全局 Git 配置的安全目录列表中。这里使用第二种方法。</p>
<p>在 Termux 中执行以下命令：</p>
<p><code>git config --global --add safe.directory /storage/emulated/0/joplin</code></p>
<p>这里注意将后面的仓库路径修改为你的仓库的实际路径，经实验，在此处使用 Termux 所映射的绝对/相对路径（<code>/data/data/com.termux/files/home/storage/shared/joplin</code> 或 <code>~/storage/shared/joplin</code>），和手机存储的实际路径（<code>/storage/emulated/0/joplin</code>），三者都是可以的，但是在没有解决这个问题之前执行 Git 命令，Git 给出的错误消息中，使用的是 <code>/storage/emulated/0/joplin</code>，至于为什么，咱就不得而知了。</p>
<hr>
<p>至此，远程和本地仓库的环境就准备好了。接下来就需要设置 <strong>Joplin</strong> 以让其将同步内容输出至本地仓库文件夹了。</p>
<h2 id="3-设置-joplin-的同步路径">3-设置 Joplin 的同步路径</h2>
<p>这一步在每个平台上的步骤都差不多，进入 Joplin 关于同步的设置，将同步目标改为文件系统，然后输入/选择之前创建的仓库路径即可。</p>
<p>如需加密，需要在每个平台上设置相同的主密码。</p>
<h2 id="4-通过脚本简化同步流程">4-通过脚本简化同步流程</h2>
<p>至此三端的同步其实已经搭建好了，但每次都要敲一大堆命令来同步实在是，尤其是在安卓端。另外我们可能需要，自动，定时触发同步操作，因此就不得不借助脚本。</p>
<p>由于操作系统之间的父子关系，实际上只需要为不同的平台编写两个脚本（当然，每个平台可能有细微的差异）就好：Powershell 脚本（什么？😅不会有人用 Windows 不装 Powershell 吧？那 bat 脚本也行）和Bash 脚本。</p>
<h3 id="41-bash-脚本">4.1-Bash 脚本</h3>
<p>由于 Bash 几乎是所有类 Unix 环境（包括 <strong>Termux</strong>）的默认 shell 工具，所以这里编写 Bash 的脚本。</p>
<p>这里以安卓端为例。</p>
<p>★经实测，在安卓端只能使用 <code>/storage/emulated/0/joplin</code> 或 <code>/data/data/com.termux/files/home/storage/shared/joplin</code> 这两个绝对路径，使用 <code>~/storage/shared/joplin</code> 是不行的，Git 会找不到这个路径。</p>
<pre><code class="language-bash">#!/bin/bash

# 设置本地仓库路径（根据实际情况修改）
repo_path="/storage/emulated/0/joplin"

# 切换到本地仓库目录
cd $repo_path

# 检查是否有未提交的改动
if git status --porcelain | grep -q .; then
    echo "检测到本地改动，准备提交..."
    # 添加所有改动到暂存区
    git add .
    # 提交改动，使用当前时间作为提交信息
    commit_message="自动提交于 $(date +%Y-%m-%d\ %H:%M:%S)"
    git commit -m "$commit_message"
    echo "本地改动已提交。"
else
    echo "本地没有未提交的改动。"
fi

# 获取远程和本地仓库的最新提交哈希值
local_hash=$(git rev-parse HEAD)
git fetch origin main
remote_hash=$(git rev-parse origin/main)

# 比较本地和远程仓库的哈希值
if [ "$local_hash" != "$remote_hash" ]; then
    # 检查本地哈希值是否包含在远程分支中
    if git merge-base --is-ancestor $remote_hash $local_hash; then
        echo "本地仓库比远程仓库新，准备推送更改..."
        git push origin main
        echo "推送完成。"
    elif git merge-base --is-ancestor $local_hash $remote_hash; then
        echo "远程仓库比本地仓库新，准备拉取更改..."
        git pull origin main
        echo "拉取完成。"
    else
        # 本地和远程仓库有分歧，询问用户保留哪个版本
        echo "本地和远程仓库有分歧。请选择保留哪个版本："
        echo "1) 保留远程版本 (pull --rebase)"
        echo "2) 保留本地版本 (push --force)"
        echo "3) 手动解决冲突"
        read -p "请选择一个选项 (1/2/3): " user_choice

        if [ "$user_choice" == "1" ]; then
            echo "准备拉取远程更改并变基..."
            git pull --rebase origin main
            echo "拉取并变基完成。"
        elif [ "$user_choice" == "2" ]; then
            echo "准备强制推送本地更改..."
            git push --force origin main
            echo "强制推送完成。"
        elif [ "$user_choice" == "3" ]; then
            echo "请手动解决冲突。"
            # 在这里可以添加手动解决冲突的步骤，例如使用 git mergetool
        else
            echo "无效的选择，脚本终止。"
        fi
    fi
else
    echo "远程仓库和本地仓库同步，无需操作。"
fi
</code></pre>
<p>其他平台（除了 Windows）只有仓库路径不一样，其他都是一样的。</p>
<h3 id="42-powershell-脚本">4.2-Powershell 脚本</h3>
<pre><code class="language-powershell"># 设置本地仓库路径（根据实际情况修改）
$repo_path = "E:\Joplin"

# 切换到本地仓库目录
Set-Location -Path $repo_path

# 检查是否有未提交的改动
$git_status = git status --porcelain
if ($git_status) {
    Write-Host "检测到本地改动，准备提交..."
    # 添加所有改动到暂存区
    git add .
    # 提交改动，使用当前时间作为提交信息
    $commit_message = "自动提交于 $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
    git commit -m $commit_message
    Write-Host "本地改动已提交。"
} else {
    Write-Host "本地没有未提交的改动。"
}

# 获取远程和本地仓库的最新提交哈希值
$local_hash = git rev-parse HEAD
git fetch origin main
$remote_hash = git rev-parse origin/main

# 比较本地和远程仓库的哈希值
if ($local_hash -ne $remote_hash) {
    # 检查本地哈希值是否包含在远程分支中
    if (git merge-base --is-ancestor $remote_hash $local_hash) {
        Write-Host "本地仓库比远程仓库新，准备推送更改..."
        git push origin main
        Write-Host "推送完成。"
    } elseif (git merge-base --is-ancestor $local_hash $remote_hash) {
        Write-Host "远程仓库比本地仓库新，准备拉取更改..."
        git pull origin main
        Write-Host "拉取完成。"
    } else {
        # 本地和远程仓库有分歧，询问用户保留哪个版本
        Write-Host "本地和远程仓库有分歧。请选择保留哪个版本："
        Write-Host "1) 保留远程版本 (pull --rebase)"
        Write-Host "2) 保留本地版本 (push --force)"
        Write-Host "3) 手动解决冲突"
        $user_choice = Read-Host "请选择一个选项 (1/2/3)"

        if ($user_choice -eq "1") {
            Write-Host "准备拉取远程更改并变基..."
            git pull --rebase origin main
            Write-Host "拉取并变基完成。"
        } elseif ($user_choice -eq "2") {
            Write-Host "准备强制推送本地更改..."
            git push --force origin main
            Write-Host "强制推送完成。"
        } elseif ($user_choice -eq "3") {
            Write-Host "请手动解决冲突。"
            # 在这里可以添加手动解决冲突的步骤，例如使用 git mergetool
        } else {
            Write-Host "无效的选择，脚本终止。"
        }
    }
} else {
    Write-Host "远程仓库和本地仓库同步，无需操作。"
}
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.6908450389490741" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-27 19:46">2025-04-27 19:46</span>&nbsp;
<a href="https://www.cnblogs.com/mtueih">Mtueih</a>&nbsp;
阅读(<span id="post_view_count">64</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18850298);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18850298', targetLink: 'https://www.cnblogs.com/mtueih/p/18850298', title: '使用 Joplin + Git + Gitee 实现笔记的多端同步' })">举报</a>
</div>
        