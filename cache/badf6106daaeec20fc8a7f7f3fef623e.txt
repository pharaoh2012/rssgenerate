
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ayuday/p/18991135" title="发布于 2025-07-18 11:00">
    <span role="heading" aria-level="2">Esbuild-新一代极速前端构建打包工具</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        Esbuild 是由 Figma 的 CTO 「Evan Wallace」基于 Golang 开发的一款打包工具，相比传统的打包工具，主打性能优势，在构建速度上可以快 10~100 倍。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="什么是-esbuild">什么是 Esbuild?</h2>
<p><a href="https://esbuild.uihtm.com" title="Esbuild" target="_blank" rel="noopener nofollow">Esbuild</a> 是由 Figma 的 CTO 「Evan Wallace」基于 Golang 开发的一款打包工具，相比传统的打包工具，主打性能优势，在构建速度上可以快 10~100 倍。</p>
<p>受够了<code>webpack</code>缓慢的打包速度，越来越多的团队开始探索采用更加底层的语言来编写前端的打包工具，以此来突破JavaScript语言的瓶颈。</p>
<p><code>esbuild</code>便是其中非常具有代表性的工具之一，它采用<code>Go</code>语言编写，经过了<code>vite</code>和<code>nest.js</code>的检验，开创了构建工具性能的新时代。</p>
<p>其主要特点：</p>
<ul>
<li>无需缓存即可实现极高的速度</li>
<li>内置JavaScript、CSS、TypeScript``和JSX</li>
<li>直接用于CLI、JS和Go的API</li>
<li>打包ESM和CommonJS模块</li>
<li>打包CSS，包括CSS modules</li>
<li>Tree shaking, minification, source maps</li>
<li>Local server, watch mode, plugins</li>
</ul>
<p><img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/356003/202507/356003-20250718104122369-616070878.png" class="lazyload"></p>
<h2 id="esbuild中文文档">esbuild中文文档</h2>
<p><a href="https://esbuild.uihtm.com" target="_blank" rel="noopener nofollow">https://esbuild.uihtm.com</a></p>
<h2 id="esbuild架构优势">Esbuild架构优势</h2>
<h3 id="1-golang-开发">1. Golang 开发</h3>
<p>采用 Go 语言开发，相比于 单线程 + JIT 性质的解释型语言 ，使用 Go 的优势在于 :</p>
<p>一方面可以充分利用多线程打包，并且线程之间共享内容，而 JS 如果使用多线程还需要有线程通信(postMessage)的开销；<br>
另一方面直接编译成机器码，而不用像 Node 一样先将 JS 代码解析为字节码，然后转换为机器码，大大节省了程序运行时间。</p>
<h3 id="2-多核并行">2. 多核并行</h3>
<p>内部打包算法充分利用多核 CPU 优势。Esbuild 内部算法设计是经过精心设计的，尽可能充分利用所有的 CPU 内核。所有的步骤尽可能并行，这也是得益于 Go 当中多线程共享内存的优势，而在 JS 中所有的步骤只能是串行的。</p>
<h3 id="3-从零造轮子">3. 从零造轮子</h3>
<p>从零开始造轮子，没有任何第三方库的黑盒逻辑，保证极致的代码性能。</p>
<ol start="4">
<li>高效利用内存<br>
一般而言，在 JS 开发的传统打包工具当中一般会频繁地解析和传递 AST 数据，比如 string -&gt; TS -&gt; JS -&gt; string，这其中会涉及复杂的编译工具链，比如 webpack -&gt; babel -&gt; terser，每次接触到新的工具链，都得重新解析 AST，导致大量的内存占用。而 Esbuild 中从头到尾尽可能地复用一份 AST 节点数据，从而大大提高了内存的利用效率，提升编译性能。</li>
</ol>
<h2 id="esbuild-与传统工具的对比">esbuild 与传统工具的对比</h2>
<table>
<thead>
<tr>
<th>特性</th>
<th>esbuild</th>
<th>Webpack</th>
<th>Rollup</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>构建速度</strong></td>
<td>极快（10-100 倍）</td>
<td>较慢</td>
<td>较快</td>
</tr>
<tr>
<td><strong>配置复杂度</strong></td>
<td>简单</td>
<td>复杂</td>
<td>中等</td>
</tr>
<tr>
<td><strong>插件系统</strong></td>
<td>灵活</td>
<td>非常灵活</td>
<td>灵活</td>
</tr>
<tr>
<td><strong>支持的文件格式</strong></td>
<td>JS、TS、JSX、CSS</td>
<td>多种格式（需插件支持）</td>
<td>JS、TS、JSX</td>
</tr>
<tr>
<td><strong>社区生态</strong></td>
<td>较小</td>
<td>非常成熟</td>
<td>成熟</td>
</tr>
</tbody>
</table>
<h2 id="使用场景">使用场景</h2>
<h3 id="1-小型项目">1. 小型项目</h3>
<p>对于小型项目，esbuild 的极速构建和简洁配置使其成为理想选择。开发者可以快速完成项目的打包工作，无需复杂的配置。</p>
<h3 id="2-大型项目">2. 大型项目</h3>
<p>对于大型项目，esbuild 的并行处理能力和插件系统可以显著提升构建效率。虽然 esbuild 的社区生态不如 Webpack 成熟，但其性能优势足以弥补这一不足。</p>
<h3 id="3-前端框架项目">3. 前端框架项目</h3>
<p>esbuild 支持 JSX 和 TypeScript，非常适合用于 React、Vue 等前端框架项目。通过插件系统，可以轻松扩展其功能，满足复杂项目的需求。</p>
<h2 id="安装-esbuild">安装 esbuild</h2>
<p>在使用 esbuild 之前，首先需要安装它。你可以通过 npm 或 yarn 来安装 esbuild：</p>
<pre><code class="language-bash">npm install esbuild --save-dev
或
yarn add esbuild --dev
</code></pre>
<h2 id="使用-esbuild-打包-javascript-文件">使用 esbuild 打包 JavaScript 文件</h2>
<p>首先，创建一个简单的项目结构：</p>
<pre><code class="language-javascript">my-project/
├── src/
│   └── index.js
└── package.json
</code></pre>
<p>在 src/index.js 文件中，添加一些简单的 JavaScript 代码：</p>
<pre><code class="language-javascript">// src/index.js
console.log("Hello, esbuild!");
</code></pre>
<p>接下来，我们编写一个简单的 esbuild 配置文件，用于打包 src/index.js 文件。</p>
<p>在项目根目录下创建一个 <code>build.js</code> 文件，内容如下：</p>
<h3 id="编写-esbuild-配置">编写 esbuild 配置</h3>
<pre><code class="language-javascript">const esbuild = require('esbuild');

esbuild.build({
  entryPoints: ['src/index.js'],
  outfile: 'dist/bundle.js',
  bundle: true,
  minify: true,
  sourcemap: true,
}).catch(() =&gt; process.exit(1));
</code></pre>
<p>在这个配置中：</p>
<ul>
<li>entryPoints：指定入口文件，即&nbsp;src/index.js。</li>
<li>outfile：指定输出文件的路径，即&nbsp;dist/bundle.js。</li>
<li>bundle：设置为&nbsp;true，表示将所有依赖打包到一个文件中。</li>
<li>minify：设置为&nbsp;true，表示对输出文件进行压缩。</li>
<li>sourcemap：设置为&nbsp;true，表示生成 source map 文件，方便调试。</li>
</ul>
<h3 id="运行打包命令">运行打包命令</h3>
<p>在终端中运行以下命令来执行打包：</p>
<pre><code class="language-bash">node build.js
</code></pre>
<p>运行完成后，你会在 dist 目录下看到生成的 <code>bundle.js</code> 文件。</p>
<h3 id="验证打包结果">验证打包结果</h3>
<p>你可以通过在浏览器中打开一个简单的 HTML 文件来验证打包结果。在项目根目录下创建一个 index.html 文件，内容如下：</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;esbuild Example&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;script src="dist/bundle.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>在浏览器中打开 index.html，你应该会在控制台中看到 Hello, esbuild! 的输出。</p>
<h2 id="esbuild高级功能使用插件">esbuild高级功能：使用插件</h2>
<p>esbuild 支持插件机制，允许你通过插件来扩展其功能。例如，你可以使用插件来处理 CSS、图片、TypeScript 等资源。</p>
<h3 id="安装插件">安装插件</h3>
<p>假设我们想要使用 esbuild-sass-plugin 来处理 Sass 文件，首先需要安装该插件：</p>
<pre><code class="language-bash">npm install esbuild-sass-plugin --save-dev
</code></pre>
<h3 id="修改配置文件">修改配置文件</h3>
<p>接下来，修改 build.js 文件，添加 Sass 插件：</p>
<pre><code class="language-javascript">const esbuild = require('esbuild');
const sassPlugin = require('esbuild-sass-plugin');

esbuild.build({
  entryPoints: ['src/index.js'],
  outfile: 'dist/bundle.js',
  bundle: true,
  minify: true,
  sourcemap: true,
  plugins: [sassPlugin()],
}).catch(() =&gt; process.exit(1));

</code></pre>
<h3 id="添加-sass-文件">添加 Sass 文件</h3>
<p>在 src 目录下创建一个 styles.scss 文件，内容如下：</p>
<pre><code class="language-js">// src/styles.scss
body {
  background-color: #f0f0f0;
  h1 {
    color: #333;
  }
}
</code></pre>
<p>然后在 src/index.js 中引入这个 Sass 文件：</p>
<pre><code class="language-javascript">// src/index.js
import './styles.scss';

console.log("Hello, esbuild!");
</code></pre>
<p>打包完成后，dist/bundle.js 中将包含处理后的 CSS 代码。</p>
<h2 id="总结">总结</h2>
<p>esbuild 作为一个新兴的 JavaScript 打包工具，以其极快的构建速度和简洁的 API 设计，迅速赢得了开发者的青睐。虽然它在社区生态和功能丰富度上还无法与 Webpack 等传统工具相比，但其性能优势使其成为小型项目和前端框架项目的理想选择。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-18 11:00">2025-07-18 11:00</span>&nbsp;
<a href="https://www.cnblogs.com/ayuday">ayuday</a>&nbsp;
阅读(<span id="post_view_count">53</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18991135);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18991135', targetLink: 'https://www.cnblogs.com/ayuday/p/18991135', title: 'Esbuild-新一代极速前端构建打包工具' })">举报</a>
</div>
        