
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lesliexin/p/18676994" title="发布于 2025-01-19 09:41">
    <span role="heading" aria-level="2">（原创）[开源][.Net Standard 2.0]  SimpleMMF （进程间通信框架）更新 v1.1，极低CPU占用</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="一前言">一、前言</h1>
<p>在上一篇 <a href="https://www.cnblogs.com/lesliexin/p/15106309.html" target="_blank">（原创）[.Net] 进程间通信框架（基于共享内存）——SimpleMMF </a> 中，发布了v1.0版，最大的问题是：<strong>CPU占用较高，至少40-50%</strong>。<br>
这既与我的开发水平有关，也与SimpleMMF诞生环境有关，这个主要是用在数字孪生各软件之间同步数据，而部署软件的工作站性能都强悍，像我常用的便是一个有着192GB内存的工作站，CPU的具体型号忘了。<br>
再加上相关的软件一个比一个吃资源，所以也不差SimpleMMF这一个。</p>
<p>但是，毕竟不完善，这几年间也时间有人发邮件说此问题，同时也反馈.net 4.8的版本也较低，也有人发了提升了.net版本及优化的工程，既然SimpleMMF不止我用，还在发挥作用，趁近期得空，好好的优化一版。</p>
<p><strong>相信看完的你，一定会有所收获！</strong></p>
<p>本文地址：<a href="https://www.cnblogs.com/lesliexin/p/18676994" target="_blank">https://www.cnblogs.com/lesliexin/p/18676994</a></p>
<h1 id="二开源地址">二、开源地址</h1>
<p>SimpleMMF 是开源的，开源地址如下：</p>
<p>GitHub:<br>
<a href="https://github.com/lesliexinxin/LeslieXin.SimpleMMF" target="_blank" rel="noopener nofollow">https://github.com/lesliexinxin/LeslieXin.SimpleMMF</a></p>
<p>Gitee:<br>
<a href="https://gitee.com/lesliexin/lesliexin.simplemmf" target="_blank" rel="noopener nofollow">https://gitee.com/lesliexin/lesliexin.simplemmf</a></p>
<p>同时v1.1也上传到了NuGet上，地址如下：<br>
<a href="https://www.nuget.org/packages/LeslieXin.SimpleMMF" target="_blank" rel="noopener nofollow">https://www.nuget.org/packages/LeslieXin.SimpleMMF</a></p>
<h1 id="三优化内容">三、优化内容</h1>
<p>本节是本文的核心，优化主要分两部分：<br>
1，.Net框架版本低的问题。<br>
2，CPU占用高的问题。<br>
我们下面分别来看。</p>
<h2 id="1net框架版本低的问题">1，.Net框架版本低的问题</h2>
<p>V1.0的版本是基于 .Net 4.5 开发的，为了兼容更广，特别是支持.Net Core、.Net6\7\8\9，必然要做调整。</p>
<p>经过对比选型，决定使用 .Net Standard 2.0 进行开发，因为它支持的范围更广，如图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1686429/202501/1686429-20250117151800344-1321903438.png" alt="" loading="lazy"></p>
<p>如此一来，本问题也就解决了。</p>
<h2 id="2cpu占用高的问题">2，CPU占用高的问题</h2>
<p>这个问题的根源，在于代码中使用轮询的方式，去监测共享内存状态，这样便会导致空转过快，进而导致CPU占用提升。</p>
<p>而优化方法，便是使用 <strong>命名事件</strong> ，MSDN上的解释如下：<br>
（<a href="https://learn.microsoft.com/zh-cn/dotnet/standard/threading/eventwaithandle%EF%BC%89" target="_blank" rel="noopener nofollow">https://learn.microsoft.com/zh-cn/dotnet/standard/threading/eventwaithandle）</a><br>
<img src="https://img2024.cnblogs.com/blog/1686429/202501/1686429-20250117160759172-690917223.png" alt="" loading="lazy"></p>
<p>因为有<strong>命名事件</strong>的参与，所以就不需要3个共享内存块了，只需要一个用来存储数据即可。</p>
<h1 id="四效果显示">四、效果显示</h1>
<p>演示Demo已开源：</p>
<p>GitHub:<br>
<a href="https://github.com/lesliexinxin/Demo_SimpleMMF" target="_blank" rel="noopener nofollow">https://github.com/lesliexinxin/Demo_SimpleMMF</a></p>
<p>Gitee:<br>
<a href="https://gitee.com/lesliexin/demo-simplemmf" target="_blank" rel="noopener nofollow">https://gitee.com/lesliexin/demo-simplemmf</a></p>
<p>请看下面的录屏，主要便是看CPU的占用与变化。</p>

<h1 id="五结语">五、结语</h1>
<p>技术没有新旧之分同，只有合不合适之分。<br>
感谢的大家的观看与学习，如有错误欢迎批评指正。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="2.3635276036296298" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-19 09:42">2025-01-19 09:41</span>&nbsp;
<a href="https://www.cnblogs.com/lesliexin">leslie_xin</a>&nbsp;
阅读(<span id="post_view_count">521</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18676994" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18676994);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18676994', targetLink: 'https://www.cnblogs.com/lesliexin/p/18676994', title: '（原创）[开源][.Net Standard 2.0]  SimpleMMF （进程间通信框架）更新 v1.1，极低CPU占用' })">举报</a>
</div>
        