
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xwz1024/p/19014745" title="发布于 2025-07-31 10:47">
    <span role="heading" aria-level="2">Django模型迁移指南：从命令用法到最佳实践</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250731104628195-290730179.png" alt="Django模型迁移指南：从命令用法到最佳实践" class="desc_img">
        Django迁移系统是数据库版本控制工具，通过生成迁移文件、应用迁移和回滚操作，实现模型与数据库结构的同步。支持迁移生成、应用、冲突解决及遗留数据库集成，确保开发过程中的数据模型一致性与灵活性。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="一迁移的工作原理">一、迁移的工作原理</h2>
<p>Django 迁移系统本质上是一套数据库版本控制系统，它通过以下三个核心环节实现模型与数据库的同步</p>
<ul>
<li>生成迁移文件：当模型发生变更时，<code>makemigrations</code> 命令会生成记录变更的 Python 脚本，存储在应用的 <code>migrations/</code> 目录下</li>
</ul>
<pre><code class="language-sh">your_app/
└── migrations/
    ├── 0001_initial.py  # 初始迁移文件
    └── 0002_auto_20250606_1006.py  # 自动生成的迁移文件
</code></pre>
<ul>
<li>应用迁移文件：运行<code>migrate</code> 命令会按顺序执行迁移文件，并通过数据库中的 <code>django_migrations</code> 表记录执行状态，确保每个迁移只被执行一次</li>
</ul>
<p><img alt="image-20250606100932629" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250731104607541-1123429343.png" class="lazyload"></p>
<ul>
<li>回滚迁移操作：支持将数据库状态回滚到指定的历史版本，可通过指定迁移编号或 <code>zero</code> 实现完全回滚</li>
</ul>
<h2 id="二生成迁移文件makemigrations">二、生成迁移文件：makemigrations</h2>
<h3 id="基本用法">基本用法</h3>
<p>修改模型后（比如添加字段、删除模型、修改字段类型等），使用以下命令生成迁移文件</p>
<pre><code class="language-sh"># 为指定应用生成迁移
python manage.py makemigrations your_app_name

# 为所有应用生成迁移
python manage.py makemigrations
</code></pre>
<h3 id="实用选项">实用选项</h3>
<p>预览迁移内容：不实际创建文件，仅查看变更内容</p>
<pre><code class="language-sh">python manage.py makemigrations --dry-run
</code></pre>
<p>解决迁移冲突：多开发者协作时合并迁移历史</p>
<pre><code class="language-sh">python manage.py makemigrations --merge
</code></pre>
<h3 id="迁移文件解释">迁移文件解释</h3>
<p>迁移文件是自动生成的 Python 脚本，通常位于每个 app 的 <code>migrations/</code> 文件夹下</p>
<pre><code class="language-sh">your_app/
└── migrations/
    ├── 0001_initial.py
    └── 0002_auto_20250606_1006.py

</code></pre>
<p>文件主要内容包括</p>
<ul>
<li>迁移依赖关系（<code>dependencies</code>）</li>
<li>操作列表（<code>operations</code>）：记录字段添加、删除、类型修改等具体变更</li>
</ul>
<pre><code class="language-python"># 迁移文件示例
# Generated by Django 4.2.20 on 2025-07-15 08:22

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('myapp_system', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='systemnotifymessage',
            name='user_id',
            field=models.ForeignKey(db_column='user_id', db_comment='接收用户ID', db_constraint=False, help_text='接收用户ID', on_delete=django.db.models.deletion.DO_NOTHING, related_name='notify_messages', to=settings.AUTH_USER_MODEL),
        ),
    ]
</code></pre>
<p><a href="https://gitee.com/zhulj993/mars-mgn/tree/master/mysite/myapp_system/migrations" target="_blank" rel="noopener nofollow">点击查看迁移文件完整代码</a></p>
<h2 id="三应用迁移migrate">三、应用迁移：migrate</h2>
<h3 id="基础用法">基础用法</h3>
<p>使用场景</p>
<ul>
<li>第一次运行 Django 项目之前</li>
<li>修改了 <code>models.py</code> 中的模型定义</li>
<li>添加了第三方 Django 应用</li>
</ul>
<pre><code class="language-sh"># 应用所有未执行的迁移
python manage.py migrate

# 仅应用指定应用的迁移
python manage.py migrate myapp

# 应用到指定版本的迁移
python manage.py migrate myapp 0001
</code></pre>
<h3 id="特殊场景处理">特殊场景处理</h3>
<p>初始化已有数据库：当数据库表结构已存在时，使用假造 - fake-initial` 选项跳过初始迁移</p>
<pre><code class="language-sh">python manage.py migrate --fake-initial
</code></pre>
<p>查看迁移状态：检查哪些迁移已应用，哪些未应用</p>
<pre><code class="language-sh">python manage.py showmigrations
</code></pre>
<h2 id="四遗留数据库集成inspectdb">四、遗留数据库集成：inspectdb</h2>
<p>当需要将 Django 与遗留数据库集成时，<code>inspectdb</code>工具能帮我们自动生成模型代码，省去手动编写的麻烦。</p>
<h3 id="基本用法-1">基本用法</h3>
<pre><code class="language-sh"># 查看生成的模型代码
python manage.py inspectdb

# 将模型代码保存到文件
python manage.py inspectdb &gt; my_models.py

# 为特定表生成模型
python manage.py inspectdb auth_user
</code></pre>
<h3 id="注意事项">注意事项</h3>
<p>使用重定向生成文件时，默认编码可能为 <code>UTF-16 LE</code>，导致 Django 无法识别，解决方法有两种：</p>
<ul>
<li>手动创建 Python 文件并复制内容</li>
<li>使用 VSCode 打开文件，通过 "选择编码" 功能重新保存为 UTF-8</li>
</ul>
<h2 id="五迁移回滚">五、迁移回滚</h2>
<h3 id="回滚前的准备工作">回滚前的准备工作</h3>
<p>查看当前迁移状态</p>
<pre><code class="language-sh">python manage.py showmigrations [app_name]

# 带 [X] 标记的表示已应用的迁移，例如：
myapp
  [X] 0001_initial
  [X] 0002_add_email_field
  [X] 0003_add_age_field
</code></pre>
<p>回滚前务必备份数据库，以防意外发生</p>
<pre><code class="language-sh"># MySQL 数据库备份示例
mysqldump -u username -p dbname &gt; backup_before_rollback.sql
</code></pre>
<h3 id="回滚操作方法">回滚操作方法</h3>
<p>回滚到指定迁移版本</p>
<pre><code class="language-sh"># 语法：python manage.py migrate [app_name] [迁移编号]

# 示例：将 myapp 应用回滚到 0001 版本
python manage.py migrate myapp 0001
</code></pre>
<p>完全回滚（清空所有迁移）</p>
<pre><code class="language-sh"># 完全回滚 myapp 应用的所有迁移
python manage.py migrate myapp zero
</code></pre>
<h3 id="回滚操作过程">回滚操作过程</h3>
<ul>
<li>检查目标迁移版本与当前版本的差异</li>
<li>自动生成反向 SQL 语句（基于迁移文件中的 operations）</li>
<li>执行反向操作并更新 django_migrations 表记录</li>
<li>不会删除迁移文件，只是标记其为未执行状态</li>
</ul>
<h2 id="六最佳实践">六、最佳实践</h2>
<ul>
<li>每次模型变更后生成并测试迁移</li>
<li>迁移文件应纳入版本控制</li>
<li>生产环境执行迁移前先在测试环境验证</li>
<li>复杂变更建议分步骤进行，避免一次性大规模迁移</li>
<li>谨慎使用回滚操作，先在测试环境验证回滚流程，再操作生产环境</li>
</ul>
<hr>
<p>您正在阅读的是《<strong>Django从入门到实战</strong>》专栏！关注不迷路~</p>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-31 10:48">2025-07-31 10:47</span>&nbsp;
<a href="https://www.cnblogs.com/xwz1024">小王子1024</a>&nbsp;
阅读(<span id="post_view_count">11</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19014745);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19014745', targetLink: 'https://www.cnblogs.com/xwz1024/p/19014745', title: 'Django模型迁移指南：从命令用法到最佳实践' })">举报</a>
</div>
	