
        <h2>
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ddcoder/p/18790693" title="发布于 2025-03-25 16:08">
    <span role="heading" aria-level="2">nacos(八): sentinel——基本使用</span>
    

</a>

        </h2>
        <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><strong>一、概要</strong></p>
<p>在微服务的架构中，流控是一个重要的任务。sentinel是阿里开源的流量治理组件，针对访问的“资源”或服务路径进行流控，内置了限流、熔断及系统负载保护等功能。</p>
<p>sentinel分为系统库及控制面板（也称“控制台"）两个部分。其中，控制台能运行于java 8及以上版本，不依赖于其它三方资源；而控制面板则是sentinel的管理中心，用户可通过图形化界面对规则进行管理和配置。</p>
<p>&nbsp;</p>
<p><strong>二、下载sentinel控制面板</strong></p>
<p>Sentinel官网地址：https://sentinelguard.io/zh-cn/index.html<br>Sentinel项目地址：https://github.com/alibaba/Sentinel</p>
<p>当前版本1.8.8：</p>
<p><img src="https://img2024.cnblogs.com/blog/842198/202503/842198-20250325092530096-815734395.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><strong>三、启动sentinel</strong></p>
<p>1) 一般启动：</p>
<div class="cnblogs_code">
<pre>java -jar sentinel-dashboard-<span style="color: rgba(128, 0, 128, 1)">1.8</span>.<span style="color: rgba(128, 0, 128, 1)">8</span>.jar</pre>
</div>
<p>2) 带参数启动：</p>
<div class="cnblogs_code">
<pre>java -Dserver.port=<span style="color: rgba(128, 0, 128, 1)">8080</span> -Dcsp.sentinel.dashboard.server=localhost:<span style="color: rgba(128, 0, 128, 1)">8080</span> -Dproject.name=sentinel-dashboard -jar sentinel-dashboard-<span style="color: rgba(128, 0, 128, 1)">1.8</span>.<span style="color: rgba(128, 0, 128, 1)">8</span>.jar</pre>
</div>
<p>其中：</p>
<p>-Dserver.port=8080：指定Sentinel控制台程序的端口为8080。<br>-Dcsp.sentinel.dashboard.server=localhost:8080：Sentinel控制台的访问地址，客户端会自动向该地址发送心跳包。<br>-Dproject.name=sentinel-dashboard：指定Sentinel控制台程序显示的名称。</p>
<p>3)&nbsp;带参数启动：</p>
<div class="cnblogs_code">
<pre>nohup java -server -Xms64m -Xmx256m -Dserver.port=<span style="color: rgba(128, 0, 128, 1)">8080</span> -Dcsp.sentinel.dashboard.server=<span style="color: rgba(128, 0, 128, 1)">192.168</span>.<span style="color: rgba(128, 0, 128, 1)">66.100</span>:<span style="color: rgba(128, 0, 128, 1)">8080 </span>-Dproject.name=sentinel-dashboard -jar sentinel-dashboard-<span style="color: rgba(128, 0, 128, 1)">1.8</span>.<span style="color: rgba(128, 0, 128, 1)">8</span>.jar &gt;&gt; /opt/sentinel.log <span style="color: rgba(128, 0, 128, 1)">2</span>&gt;&amp;<span style="color: rgba(128, 0, 128, 1)">1</span> &amp;</pre>
</div>
<p>启动成功后 ，在浏览器访问http://127.0.0.1:8080，即可看到sentinel的管理界面。并输入用户名sentinel和密码sentinel，即可进入管理，如下图：</p>
<p><img src="https://img2024.cnblogs.com/blog/842198/202503/842198-20250325094901757-752019094.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><strong>四、配置项目与sentinel进行通信</strong></p>
<p>当前将<a href="https://www.cnblogs.com/ddcoder/p/18728935" target="_blank">多模块项目中的producer(看这里)</a>进行扩展，集成sentinel。</p>
<p>1）在pom.xml中添加依赖</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">&lt;?</span><span style="color: rgba(255, 0, 255, 1)">xml version="1.0" encoding="UTF-8"</span><span style="color: rgba(0, 0, 255, 1)">?&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">project </span><span style="color: rgba(255, 0, 0, 1)">xmlns</span><span style="color: rgba(0, 0, 255, 1)">="http://maven.apache.org/POM/4.0.0"</span><span style="color: rgba(255, 0, 0, 1)"> xmlns:xsi</span><span style="color: rgba(0, 0, 255, 1)">="http://www.w3.org/2001/XMLSchema-instance"</span><span style="color: rgba(255, 0, 0, 1)">
         xsi:schemaLocation</span><span style="color: rgba(0, 0, 255, 1)">="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">modelVersion</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>4.0.0<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">modelVersion</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">parent</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>com.example<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>multimod_nacos<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">version</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>0.0.1-SNAPSHOT<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">version</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">parent</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>producer<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">packaging</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>jar<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">packaging</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">dependencies</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)">springboot</span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">dependency</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>org.springframework.boot<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>spring-boot-starter<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">dependency</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">dependency</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>org.springframework.boot<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>spring-boot-starter-web<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">dependency</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

        <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> 服务发现(生产者)  </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">dependency</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>com.alibaba.cloud<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">dependency</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

<strong><span style="color: rgba(255, 0, 0, 1)">        &lt;!--sentinel --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;
        &lt;/dependency&gt;</span></strong>

    <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">dependencies</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">build</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">plugins</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">plugin</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>org.apache.maven.plugins<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>maven-compiler-plugin<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">version</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>3.8.1<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">version</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">configuration</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">source</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>1.8<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">source</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">target</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>1.8<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">target</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">encoding</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>UTF-8<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">encoding</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">configuration</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">plugin</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">plugin</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>org.springframework.boot<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>spring-boot-maven-plugin<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">version</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>${spring-boot.version}<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">version</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">configuration</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">mainClass</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>com.example.producer.ProducerApplication<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">mainClass</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">skip</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>false<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">skip</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">configuration</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">executions</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">execution</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">id</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>repackage<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">id</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">goals</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                            <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">goal</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>repackage<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">goal</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                        <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">goals</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                    <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">execution</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
                <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">executions</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">plugin</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">plugins</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">build</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">project</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre>
</div>
<p>2）配置application.yml</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">server:
  port: 8085


spring:
  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
        username: nacos
        password: nacos
      config:
        server-addr: 127.0.0.1:8848
        username: nacos
        password: nacos
        namespace: public

    loadbalancer:
      nacos:
        enabled: true

<strong><span style="color: rgba(255, 0, 0, 1)">    sentinel:
      transport:
        port: 8719
        dashboard: 127.0.0.1:8080</span></strong>

  application:
    name: product1</span></pre>
</div>
<p>配置完成后，启动producer。访问producer中的资源/hello即可在sentinel面板中找到对就的模块。</p>
<p>注意：因为sentinel是lazyload模式，所以单纯的producer启动成功sentinel是不显示的。只有访问了项目的资源，sentinel才会显示对应的项目模块。</p>
<p><img src="https://img2024.cnblogs.com/blog/842198/202503/842198-20250325100626629-1580217476.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><strong>五、规则配置</strong></p>
<p>在“链路规则”菜单中，可以看到访问过的资源。在资源右侧，可以流控、熔断、热点和授权四种规则。</p>
<p><img src="https://img2024.cnblogs.com/blog/842198/202503/842198-20250325103535479-1679207305.png" alt="" loading="lazy"></p>
<p>&nbsp;关于这四种规则的详细配置，打开设置面版一目了解，就不在此一一赘述，如果感兴趣的小伙伴可查看这里<a href="https://blog.csdn.net/wpc2018/article/details/119138785" target="_blank" rel="noopener nofollow">（点击查看）</a></p>
<p>在使用的过程中，会遇到以下问题：如何对资源进行通配符限制？关于这个问题，只需要在项目中添加一个UrlCleaner类，就可以对访问的url进行规整并以通配符的形式传给sentinel：</p>
<p><img src="https://img2024.cnblogs.com/blog/842198/202503/842198-20250325105713882-732129355.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><strong>6、自定义限流方法</strong></p>
<p>&nbsp;1) 针对单个资源自定义限流方法</p>
<p>先定义一个处理限流的类，类内部定义自定义限流方法：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.example.producer.component;

</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.alibaba.csp.sentinel.slots.block.BlockException;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.stereotype.Component;

</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.io.IOException;

@Component
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> GlobalBlockHandler {
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> String handleBlock(<span style="color: rgba(255, 0, 0, 1)"><strong>String id,</strong></span>BlockException ex) <span style="color: rgba(0, 0, 255, 1)">throws</span><span style="color: rgba(0, 0, 0, 1)"> IOException {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> "Global block handler: " +<span style="color: rgba(0, 0, 0, 1)"> ex.getMessage();
    }

    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> String handleFlow(<span style="color: rgba(255, 0, 0, 1)"><strong>String id,</strong></span> Throwable ex) <span style="color: rgba(0, 0, 255, 1)">throws</span><span style="color: rgba(0, 0, 0, 1)"> IOException {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> "Global flow handler: " +<span style="color: rgba(0, 0, 0, 1)"> ex.getMessage();
    }
}</span></pre>
</div>
<p>再用@SentinelResource注解标注对应的类资源：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@RestController
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> HelloController {

    @RequestMapping(</span>"/hello"<span style="color: rgba(0, 0, 0, 1)">)
    @SentinelResource(value </span>= "hello"<span style="color: rgba(0, 0, 0, 1)">,
           <strong> <span style="color: rgba(255, 0, 0, 1)">fallback </span></strong></span><strong><span style="color: rgba(255, 0, 0, 1)">= "handleFlow",
            fallbackClass = com.example.producer.component.GlobalBlockHandler.class</span></strong><span style="color: rgba(0, 0, 0, 1)"><strong><span style="color: rgba(255, 0, 0, 1)">,</span></strong>
            blockHandler </span>= "handleBlock"<span style="color: rgba(0, 0, 0, 1)">,
            blockHandlerClass </span>= com.example.producer.component.GlobalBlockHandler.<span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> String Hello(<span style="color: rgba(255, 0, 0, 1)"><strong>String id</strong></span>){

        </span><span style="color: rgba(0, 0, 255, 1)">return</span> "hello world "+<span style="color: rgba(0, 0, 0, 1)">id;
    }


}</span></pre>
</div>
<p>这里要注意的是，自定义限流方法的参数，一定要跟controller里资源方法一致。</p>
<p>另外，需要重点注意的是，在sentinel控制面板内限流设置的时候，要使用<span style="color: rgba(255, 0, 0, 1)"><strong>资源名称</strong></span>去限流，自定义的限流方法才会生效；如果使用路径限流，自定义限流不生效。</p>
<p><img src="https://img2024.cnblogs.com/blog/842198/202503/842198-20250325152027651-1106484275.png" alt="" loading="lazy"></p>
<p>2）自定义全局限流方法&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@Component
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span> MyBlockExceptionHandler <span style="color: rgba(0, 0, 255, 1)">implements</span><span style="color: rgba(0, 0, 0, 1)"> BlockExceptionHandler {
​
    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span> handle(HttpServletRequest request, HttpServletResponse response, BlockException e) <span style="color: rgba(0, 0, 255, 1)">throws</span><span style="color: rgba(0, 0, 0, 1)"> Exception {
        log.info(</span>"UrlBlockHandler....................................."<span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 自定义封装的类，可以定义</span>
        Result restObject = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
​
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (e <span style="color: rgba(0, 0, 255, 1)">instanceof</span><span style="color: rgba(0, 0, 0, 1)"> FlowException) {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 限流</span>
            restObject = ResultUtils.wrapFail(5001,"接口限流"<span style="color: rgba(0, 0, 0, 1)">);
        } </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (e <span style="color: rgba(0, 0, 255, 1)">instanceof</span><span style="color: rgba(0, 0, 0, 1)"> DegradeException) {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 降级</span>
            restObject = ResultUtils.wrapFail(5002,"服务降级"<span style="color: rgba(0, 0, 0, 1)">);
        } </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (e <span style="color: rgba(0, 0, 255, 1)">instanceof</span><span style="color: rgba(0, 0, 0, 1)"> ParamFlowException) {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 热点参数</span>
            restObject = ResultUtils.wrapFail(5003,"热点参数限流"<span style="color: rgba(0, 0, 0, 1)">);
        } </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (e <span style="color: rgba(0, 0, 255, 1)">instanceof</span><span style="color: rgba(0, 0, 0, 1)"> SystemBlockException) {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 系统保护</span>
            restObject = ResultUtils.wrapFail(5004,"触发系统保护规则"<span style="color: rgba(0, 0, 0, 1)">);
        } </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (e <span style="color: rgba(0, 0, 255, 1)">instanceof</span><span style="color: rgba(0, 0, 0, 1)"> AuthorityException) {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 授权规则</span>
            restObject = ResultUtils.wrapFail(5005,"授权规则不通过"<span style="color: rgba(0, 0, 0, 1)">);
        }
​
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">返回json数据</span>
        response.setStatus(200<span style="color: rgba(0, 0, 0, 1)">);
        response.setCharacterEncoding(</span>"utf-8"<span style="color: rgba(0, 0, 0, 1)">);
        response.setContentType(MediaType.APPLICATION_JSON_VALUE);
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">springmvc 的一个json转换类 （jackson）</span>
        <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ObjectMapper().writeValue(response.getWriter(), restObject);
    }
}</span></pre>
</div>
<p>重点注意：只有对<strong><span style="color: rgba(255, 0, 0, 1)">路径</span></strong>进行限流设置，全局的限流方法才能生效；如果是针对资源名称进行限流设置，全局限流方法不被触发。</p>
<p>3）全局系统异常实现全局自定义限流方法</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.alibaba.csp.sentinel.slots.block.authority.AuthorityException;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.alibaba.csp.sentinel.slots.block.degrade.DegradeException;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.alibaba.csp.sentinel.slots.block.flow.FlowException;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowException;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.http.HttpStatus;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.web.bind.annotation.ExceptionHandler;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.web.bind.annotation.ResponseBody;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.web.bind.annotation.RestControllerAdvice;
 
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.util.HashMap;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.util.Map;
 
 
@RestControllerAdvice
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> CustomExceptionHandler {
 
    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 限流全局异常
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    @ExceptionHandler(FlowException.</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> Map handlerFlowException(){
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> HashMap(){{
            put(</span>"code"<span style="color: rgba(0, 0, 0, 1)">, HttpStatus.TOO_MANY_REQUESTS.value());
            put(</span>"msg", "被限流"<span style="color: rgba(0, 0, 0, 1)">);
        }};
    }
 
    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 熔断全局异常
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    @ExceptionHandler(DegradeException.</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> Map handlerDegradeException(){
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> HashMap(){{
            put(</span>"code"<span style="color: rgba(0, 0, 0, 1)">, HttpStatus.TOO_MANY_REQUESTS.value());
            put(</span>"msg", "被熔断"<span style="color: rgba(0, 0, 0, 1)">);
        }};
    }
 
    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * 热点限流异常
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    @ExceptionHandler(ParamFlowException.</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> Map handlerparamFlowException(){
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> HashMap(){{
            put(</span>"code"<span style="color: rgba(0, 0, 0, 1)">, HttpStatus.TOO_MANY_REQUESTS.value());
            put(</span>"msg", "热点限流"<span style="color: rgba(0, 0, 0, 1)">);
        }};
    }
 
    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     *  Sentinel 权限拦截全局异常
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    @ExceptionHandler(AuthorityException.</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">)
    @ResponseBody
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> Map handlerAuthorityException(){
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> HashMap(){{
            put(</span>"code"<span style="color: rgba(0, 0, 0, 1)">, HttpStatus.UNAUTHORIZED.value());
            put(</span>"msg", "暂无权限"<span style="color: rgba(0, 0, 0, 1)">);
        }};
    }
}</span></pre>
</div>
<p>重点注意的是，在sentinel控制面板内限流设置的时候，要使用<span style="color: rgba(255, 0, 0, 1)"><strong>资源名称</strong></span>去限流，全局系统异常自定义的限流方法才会生效；如果使用路径限流，则不生效。</p>
<p>&nbsp;</p>
<p>好了，到这里sentinel的基本使用以及自定义的限流方法已进行了较为详细的讨论。下一篇，让我们一起了解sentinel规则的持久化：)</p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

        <p class="postfoot">
            posted on 
<span id="post-date" data-last-update-days="0.008397035697916666" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-25 16:09">2025-03-25 16:08</span>&nbsp;
<a href="https://www.cnblogs.com/ddcoder">咚..咚</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18790693" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18790693);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18790693', targetLink: 'https://www.cnblogs.com/ddcoder/p/18790693', title: 'nacos(八): sentinel——基本使用' })">举报</a>

        </p>
    