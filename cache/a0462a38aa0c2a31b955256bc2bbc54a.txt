
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zxingduo/p/18797253" title="发布于 2025-03-28 09:06">
    <span role="heading" aria-level="2">注册回调单例类</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="注册回调类">注册回调类</h1>
<pre><code class="language-typescript">import { reactive } from "vue";

// 定义 Map 中的函数类型
type UpdateFunction = (value: string) =&gt; void;

class RegistryManager {
    // 私有静态实例，确保全局唯一
    private static instance: RegistryManager;

    private registry = reactive(new Map&lt;string, Map&lt;string, UpdateFunction&gt;&gt;());

    // 私有构造函数，禁止外部实例化
    private constructor() {}

    /**
     * 获取单例实例
     */
    public static getInstance(): RegistryManager {
        if (!RegistryManager.instance) {
            RegistryManager.instance = new RegistryManager();
        }
        return RegistryManager.instance;
    }

    /**
     * 注册回调函数
     * @param category 分类键
     * @param key 回调键
     * @param callback 回调函数
     */
    register(category: string, key: string, callback: UpdateFunction): void {
        if (!this.registry.has(category)) {
            this.registry.set(category, reactive(new Map&lt;string, UpdateFunction&gt;()));
        }
        this.registry.get(category)?.set(key, callback);
    }

    /**
     * 删除整个分类
     * @param category 分类键
     */
    removeCategory(category: string): boolean {
        return this.registry.delete(category);
    }

    /**
     * 删除分类中的特定回调
     * @param category 分类键
     * @param key 回调键
     */
    removeCallback(category: string, key: string): boolean {
        return this.registry.get(category)?.delete(key) || false;
    }

    /**
     * 获取分类中的所有回调键
     * @param category 分类键
     */
    getCallbackKeys(category: string): string[] {
        return Array.from(this.registry.get(category)?.keys() || []);
    }

    /**
     * 获取特定回调函数
     * @param category 分类键
     * @param key 回调键
     */
    getCallback(category: string, key: string): UpdateFunction | undefined {
        return this.registry.get(category)?.get(key);
    }

    /**
     * 检查分类是否存在
     * @param category 分类键
     */
    hasCategory(category: string): boolean {
        return this.registry.has(category);
    }

    /**
     * 检查回调是否存在
     * @param category 分类键
     * @param key 回调键
     */
    hasCallback(category: string, key: string): boolean {
        return this.registry.get(category)?.has(key) || false;
    }

    /**
     * 执行特定回调
     * @param category 分类键
     * @param key 回调键
     * @param value 传递给回调的值
     */
    executeCallback(category: string, key: string, value: string): boolean {
        const callback = this.getCallback(category, key);
        if (callback) {
            callback(value);
            return true;
        }
        return false;
    }

    /**
     * 批量执行分类中的所有回调
     * @param category 分类键
     * @param value 传递给回调的值
     */
    executeAllCallbacks(category: string, value: string): void {
        const callbacks = this.registry.get(category);
        if (callbacks) {
            callbacks.forEach(callback =&gt; callback(value));
        }
    }

    /**
     * 清空整个注册表
     */
    clear(): void {
        this.registry.clear();
    }
}

// 获取全局唯一实例
export const registryManager = RegistryManager.getInstance();
</code></pre>
<h2 id="功能说明">功能说明</h2>
<ol>
<li>
<p><strong>注册功能</strong>:</p>
<ul>
<li><code>register(category, key, callback)</code>: 注册一个新的回调函数到指定分类</li>
</ul>
</li>
<li>
<p><strong>删除功能</strong>:</p>
<ul>
<li><code>removeCategory(category)</code>: 删除整个分类</li>
<li><code>removeCallback(category, key)</code>: 删除分类中的特定回调</li>
<li><code>clear()</code>: 清空整个注册表</li>
</ul>
</li>
<li>
<p><strong>查询功能</strong>:</p>
<ul>
<li><code>getCallbackKeys(category)</code>: 获取分类中所有回调键</li>
<li><code>getCallback(category, key)</code>: 获取特定回调函数</li>
<li><code>hasCategory(category)</code>: 检查分类是否存在</li>
<li><code>hasCallback(category, key)</code>: 检查回调是否存在</li>
</ul>
</li>
<li>
<p><strong>执行功能</strong>:</p>
<ul>
<li><code>executeCallback(category, key, value)</code>: 执行特定回调</li>
<li><code>executeAllCallbacks(category, value)</code>: 批量执行分类中的所有回调</li>
</ul>
</li>
<li>
<p><strong>反应式特性</strong>:</p>
<ul>
<li>使用 Vue 的 <code>reactive</code> 包装 Map，确保响应式更新</li>
</ul>
</li>
</ol>
<h2 id="使用示例">使用示例</h2>
<pre><code class="language-typescript">// 注册回调
registryManager.register('user', 'updateName', (value) =&gt; {
    console.log(`Name updated to: ${value}`);
});

registryManager.register('user', 'updateEmail', (value) =&gt; {
    console.log(`Email updated to: ${value}`);
});

// 执行单个回调
registryManager.executeCallback('user', 'updateName', 'John Doe');

// 执行所有用户回调
registryManager.executeAllCallbacks('user', 'new@example.com');

// 删除特定回调
registryManager.removeCallback('user', 'updateEmail');

// 删除整个分类
registryManager.removeCategory('user');
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0011726230358796296" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-28 09:06">2025-03-28 09:06</span>&nbsp;
<a href="https://www.cnblogs.com/zxingduo">xingduo</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18797253" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18797253);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18797253', targetLink: 'https://www.cnblogs.com/zxingduo/p/18797253', title: '注册回调单例类' })">举报</a>
</div>
        