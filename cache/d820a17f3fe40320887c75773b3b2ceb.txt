
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/heymar/p/18555692" title="发布于 2024-11-19 22:10">
    <span role="heading" aria-level="2">ThreeJs-01开发环境搭建</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="写在前面好久不见各位之前一段时间因为一些事情有点忙但从未停止学习的脚步也屯了很多笔记会在未来的时间慢慢发出来从今天开始一起进入webgisthreejs目前大前端发展的一个方向开始学习希望里面可以有帮助到大家的内容有不足的地方还请指正一起学习进步">写在前面，好久不见各位，之前一段时间因为一些事情有点忙，但从未停止学习的脚步，也屯了很多笔记，会在未来的时间慢慢发出来，从今天开始一起进入WebGis，threeJs目前大前端发展的一个方向开始学习，希望里面可以有帮助到大家的内容，有不足的地方还请指正，一起学习进步！！！</h1>
<h1 id="1了解threejs">1.了解Three.js</h1>
<p><font style="color: rgba(34, 34, 34, 1)">近年来web得到了快速的发展。随着HTML5的普及，网页的表现能力越来越强大。网页上已经可以做出很多复杂的动画，精美的效果。还能通过WebGL在网页中绘制高性能的3D图形。</font></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220456213-940693658.gif" alt="" loading="lazy"></p>
<p><font style="color: rgba(18, 18, 18, 1)">随着浏览器性能和网络带宽的大幅度提升，以及WebGL的实现，使得3D技术不再是桌面程序的专利，越来越多的Web应用使用3D技术。</font></p>
<p><font style="color: rgba(18, 18, 18, 1)"></font></p>
<p><font style="color: rgba(18, 18, 18, 1)">对</font><strong><font style="color: rgba(18, 18, 18, 1)">网站</font></strong><font style="color: rgba(18, 18, 18, 1)">而言，Web3D技术运用，实现企业网站三维呈现，让企业形象更直观、更立体地展现给客户，打破传统平面展示模式，打造智慧、个性、创新的企业形象。目前政府有大量的新基建项目，如</font>数字孪生、智慧城市、智慧园区、智慧工厂等等都涉及到了3D可视化技术。</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220458722-763327193.gif" alt="" loading="lazy"></p>
<p>今天就来给大家讲讲如何系统的学好WEB 3D可视化技术。</p>
<p><font style="color: rgba(32, 33, 36, 1)">我们可以先从threejs库入手。threejs是一个让用户通过javascript入手进入搭建webgl项目的类库。众所周知学习webgl需要图形学知识，而webgl需要通过js和glsl两种语言。如果我们不通过threejs使用webgl势必逃不过底层知识:你必须全面了解着色器语法和自己编写顶点着色片元着色；但你使用了threejs显然可以便捷的逃过这些难懂的底层，对于传统js从业人员直接挑战的shader确实是有难度的。</font></p>
<p><font style="color: rgba(32, 33, 36, 1)"></font></p>
<p><font style="color: rgba(32, 33, 36, 1)">学习three.js首先掌握基础概念什么是点、线、面、几何体、材质、物体、场景、相机、渲染器、动画、控制器等基础概念，搞定一个最基础的场景和3d物体的显示。接着学会调试3D开发代码。接着即可深入上诉概念的每一个概念，详细了解官网文档该类的各种属性与概念。</font></p>
<p><font style="color: rgba(32, 33, 36, 1)">接着3d渲染要真实性，肯定离不开PBR，详细了解什么是PBR，PBR</font><font style="color: rgba(51, 51, 51, 1)">基于物理的光照原理的渲染,。掌握什么是环境贴图、凹凸贴图、置换贴图、放射光、</font><font style="color: rgba(32, 33, 36, 1)">,环境贴图、金属贴图、粗糙度贴图等等，去打造真实的物体显示效果。接着掌握如何绘制粒子群，来绘制雨雪、落叶、星河等各种粒子效果，甚至产品的粒子效果。</font></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220459989-1274332203.gif" alt="" loading="lazy"></p>
<p><font style="color: rgba(32, 33, 36, 1)">掌握了这些，基本就算入了个小门了，接着就是要实现能和物体进行交互，如何选中与场景中的物体进行交互。而且还要能够掌握物理引擎让物体有真实的物理效果，例如重力，反弹、摩擦力等这样物体相互作用会更加真实。</font></p>
<p><font style="color: rgba(32, 33, 36, 1)"></font></p>
<p><font style="color: rgba(32, 33, 36, 1)">接着就要开始真正进入WEBGL魔力的世界，掌握着色器语言，控制GPU渲染，掌握实现three.js底层封装的原理，能够图形渲染原理，掌握编写顶点着色器和片元着色器，来绘制动态飘扬的旗帜。以及编写动态的烟雾和乌云，水纹。</font></p>
<p><font style="color: rgba(32, 33, 36, 1)"></font></p>
<p><font style="color: rgba(32, 33, 36, 1)">掌握了这些就可以写节日酷炫的烟花了，接着可以继续掌握各种后期合成效果，对整个渲染画面进行调整，例如打造闪烁的画面，雪花感的陈旧电视画面，又或者通过编写着色器，打造出水底世界的效果。</font></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220501837-560740946.gif" alt="" loading="lazy"></p>
<p><font style="color: rgba(32, 33, 36, 1)">接着掌握曲线和物体运动的结合，在加上着色器编写，即可实现各种飞线、雷达、光墙特效。通过地理信息数据，获取建筑信息，可以生成建筑的框架和高度渲染出数字城市。当然日常网页也或有一些文字信息标识，想要文字标识也加上3d效果，就需要掌握css3d的渲染器来渲染。当然如果需要掌握渲染精美真实的智慧园区的，就需要掌握建模技术，例如学习blender软件搭建模型和优化模型，才能最终输出到网页中，包括动画也可以先用blender做好在输出到网页中，不用辛苦的进行复杂动画的编写，可以可视化的制作。</font></p>
<p><font style="color: rgba(32, 33, 36, 1)"></font></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220503001-1709654591.gif" alt="" loading="lazy"></p>
<h1 id="2本地搭建threejs官方文档网站">2.本地搭建Threejs官方文档网站</h1>
<p>因为Three.js官网是国外的服务器，所以为了方便学习和快速的查阅文档，我们可以自己搭建Three.js官网和文档，方便随时查看案例和文档内容进行学习。</p>
<p>1、首先进入threejs库GitHub地址：<a href="https://github.com/mrdoob/three.js" target="_blank" rel="noopener nofollow">https://github.com/mrdoob/three.js</a></p>
<p>2、下载完整代码</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220503388-1992364880.png" alt="" loading="lazy"></p>
<p>3、项目文件解压缩</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220503693-820483575.png" alt="" loading="lazy"></p>
<p>4、命令行安装依赖</p>
<p>一般安装可以用npm、yarn等包管理工具，课程以yarn举例，如果没有安装可以用npm install yarn -g进行安装。</p>
<blockquote>
<p>yarn install</p>
</blockquote>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220503974-1990027051.png" alt="" loading="lazy"></p>
<p>5、启动项目</p>
<blockquote>
<p>yarn start</p>
</blockquote>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220504292-193599969.png" alt="" loading="lazy"></p>
<p>浏览器访问即可：<a href="http://localhost:8080" target="_blank" rel="noopener nofollow">http://localhost:8080</a></p>
<p>6、文档目录介绍</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220504613-1628287718.png" alt="" loading="lazy"></p>
<p>build目录：</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220504885-1996146577.png" alt="" loading="lazy"></p>
<p>docs文档：</p>
<p>选择中文，查看中文文档。</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220505267-733582931.png" alt="" loading="lazy"></p>
<p>examples案例：</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220505706-123577437.png" alt="" loading="lazy"></p>
<p>可以通过网址，找到具体的案例代码，如此处的文件名称是：webgl_animation_keyframes。因此可以在文件夹找到对应的代码文件</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220506086-1194973741.png" alt="" loading="lazy"></p>
<p>editor目录：</p>
<p>官方提供的可视化编辑器，可以直接导入模型，修改材质，添加光照效果等等。</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220506364-1121674371.png" alt="" loading="lazy"></p>
<h1 id="3使用vite搭建threejs开发环境">3.使用vite搭建three.js开发环境</h1>
<p>为了方便模块化进行three.js项目的学习和开发，又不用学习太多的配置，增加学习成本，所以就使用Parcel这个web应用打包工具。</p>
<p>Parcel官网：<a href="https://v2.parceljs.cn/getting-started/webapp/" target="_blank" rel="noopener nofollow">https://v2.parceljs.cn/getting-started/webapp/</a></p>
<h2 id="1安装"><font style="color: rgba(31, 41, 55, 1)">1、安装</font></h2>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220506619-1350543219.png" alt="image-20241115201357469" loading="lazy"></p>
<p>选择无框架，也可以vue框架</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220506863-1450258079.png" alt="image-20241115201431713" loading="lazy"></p>
<p>删掉其他不相关，因为到时候three就是创建一个画布</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220507122-431571234.png" alt="image-20241115201737294" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220507403-1156670198.png" alt="image-20241115201805945" loading="lazy"></p>
<p><mark>threeJS创建几步曲</mark></p>
<p>先创建场景，创建相机，创建渲染器，创建网格，设置相机位置，渲染相机</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220507750-611311213.png" alt="image-20241115203436787" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220508022-780082372.png" alt="image-20241115203721820" loading="lazy"></p>
<p>就有了最基本的网格在画布中</p>
<p>如果想动起来</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220508266-939305337.png" alt="image-20241115204056170" loading="lazy"></p>
<h2 id="2项目设置"><font style="color: rgba(31, 41, 55, 1)">2、项目设置</font></h2>
<p><font style="color: rgba(31, 41, 55, 1)">现在已经安装了 Parcel，让我们为我们的应用程序创建一些源文件。Parcel 接受任何类型的文件作为入口点，但 HTML 文件是一个很好的起点。Parcel 将从那里遵循您的所有依赖项来构建您的应用程序。</font></p>
<p><font style="color: rgba(31, 41, 55, 1)">创建src文件夹，并且创建index.html文件</font></p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;link rel="stylesheet" href="./assets/css/style.css" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script src="./main/main.js" type="module"&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;

</code></pre>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220508565-1135738417.png" alt="" loading="lazy"></p>
<p>设置1个css文件</p>
<pre><code class="language-javascript">* {
  margin: 0;
  padding: 0;
}
body {
  background-color: skyblue;
}

</code></pre>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220508885-532544795.png" alt="" loading="lazy"></p>
<p>创建一个main.js</p>
<pre><code class="language-javascript">import * as THREE from "three";

// console.log(THREE);

// 目标：了解three.js最基本的内容

// 1、创建场景
const scene = new THREE.Scene();

// 2、创建相机
const camera = new THREE.PerspectiveCamera(
  75,
  window.innerWidth / window.innerHeight,
  0.1,
  1000
);

// 设置相机位置
camera.position.set(0, 0, 10);
scene.add(camera);

// 添加物体
// 创建几何体
const cubeGeometry = new THREE.BoxGeometry(1, 1, 1);
const cubeMaterial = new THREE.MeshBasicMaterial({ color: 0xffff00 });
// 根据几何体和材质创建物体
const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
// 将几何体添加到场景中
scene.add(cube);

// 初始化渲染器
const renderer = new THREE.WebGLRenderer();
// 设置渲染的尺寸大小
renderer.setSize(window.innerWidth, window.innerHeight);
// console.log(renderer);
// 将webgl渲染的canvas内容添加到body
document.body.appendChild(renderer.domElement);

// 使用渲染器，通过相机将场景渲染进来
renderer.render(scene, camera);

</code></pre>
<h2 id="3打包脚本"><font style="color: rgba(31, 41, 55, 1)">3、打包脚本</font></h2>
<p><font style="color: rgba(31, 41, 55, 1)">到目前为止，我们一直在</font><font style="color: rgba(31, 41, 55, var(--tw-text-opacity))">parcel</font><font style="color: rgba(31, 41, 55, 1)">直接运行 CLI，但在您的</font><font style="color: rgba(31, 41, 55, var(--tw-text-opacity))">package.json</font><font style="color: rgba(31, 41, 55, 1)">文件中创建一些脚本以简化此操作会很有用。</font><font style="color: rgba(31, 41, 55, 1)">我们还将设置一个脚本来</font><font style="color: rgba(31, 41, 55, 1)">使用该</font><font style="color: rgba(31, 41, 55, 1)">命令构建您的应用程序以进行</font><a href="https://v2.parceljs.cn/features/production/" target="_blank" rel="noopener nofollow">生产。</a><font style="color: rgba(31, 41, 55, var(--tw-text-opacity))">parcel build</font><font style="color: rgba(31, 41, 55, 1)">最后，您还可以</font><font style="color: rgba(31, 41, 55, 1)">使用该字段在一个地方声明您的</font><a href="https://v2.parceljs.cn/features/targets/#entries" target="_blank" rel="noopener nofollow">条目</a><font style="color: rgba(31, 41, 55, var(--tw-text-opacity))">source</font><font style="color: rgba(31, 41, 55, 1)">，这样您就不需要在每个</font><font style="color: rgba(31, 41, 55, var(--tw-text-opacity))">parcel</font><font style="color: rgba(31, 41, 55, 1)">命令中重复它们。</font></p>
<p><em><font style="color: rgba(12, 74, 110, var(--tw-text-opacity))">package.json：</font></em></p>
<pre><code class="language-javascript">{
  "name": "01-three_basic",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "dev": "parcel src/index.html",
    "build": "parcel build src/index.html"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "parcel": "^2.4.1"
  },
  "dependencies": {
    "dat.gui": "^0.7.9",
    "gsap": "^3.10.3",
    "three": "^0.139.2"
  }
}

</code></pre>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220509179-190552045.png" alt="" loading="lazy"></p>
<p>安装依赖package.json设置的依赖</p>
<blockquote>
<p>yarn install</p>
</blockquote>
<p><font style="color: rgba(31, 41, 55, 1)">现在您可以运行</font><font style="color: rgba(31, 41, 55, var(--tw-text-opacity))">yarn build</font><font style="color: rgba(31, 41, 55, 1)">以构建您的生产项目并</font><font style="color: rgba(31, 41, 55, var(--tw-text-opacity))">yarn dev</font><font style="color: rgba(31, 41, 55, 1)">启动开发服务器。</font></p>
<blockquote>
<p>yarn dev</p>
</blockquote>
<h1 id="4渲染第一个场景和物体">4.渲染第一个场景和物体</h1>
<h2 id="1-基本概念">1 基本概念</h2>
<p>三维的物体要渲染在二维的屏幕上。首先要创建一个场景来放置物体，那么最终怎么显示三维的内容，就应该找一个相机，将相机放在场景的某个位置，然后想要显示就要把相机拍的内容渲染出来。所以就引出三个基本概念：场景、相机、渲染器。</p>
<h3 id="11-场景">1.1 场景</h3>
<p>three.js创建场景非常的简单。</p>
<pre><code class="language-javascript">// 1、创建场景
const scene = new THREE.Scene();
</code></pre>
<h3 id="12-相机">1.2 相机</h3>
<p>three.js创建相机对象</p>
<pre><code class="language-javascript">// 2、创建相机
const camera = new THREE.PerspectiveCamera(
  75,
  window.innerWidth / window.innerHeight,
  0.1,
  1000
);

// 设置相机位置
camera.position.set(0, 0, 10);
</code></pre>
<p><font style="color: rgba(68, 68, 68, 1)">three.js里有几种不同的相机，在这里，我们使用的是</font><strong><font style="color: rgba(68, 68, 68, 1)">PerspectiveCamera</font></strong><font style="color: rgba(68, 68, 68, 1)">（透视摄像机）。</font></p>
<p><font style="color: rgba(68, 68, 68, 1)">第一个参数是</font><strong><font style="color: rgba(68, 68, 68, 1)">视野角度（FOV）</font></strong><font style="color: rgba(68, 68, 68, 1)">。视野角度就是无论在什么时候，你所能在显示器上看到的场景的范围，它的单位是角度(与弧度区分开)。</font></p>
<p><font style="color: rgba(68, 68, 68, 1)">第二个参数是</font><strong><font style="color: rgba(68, 68, 68, 1)">长宽比（aspect ratio）</font></strong><font style="color: rgba(68, 68, 68, 1)">。 也就是你用一个物体的宽除以它的高的值。比如说，当你在一个宽屏电视上播放老电影时，可以看到图像仿佛是被压扁的。</font></p>
<p><font style="color: rgba(68, 68, 68, 1)">接下来的两个参数是</font><strong><font style="color: rgba(68, 68, 68, 1)">近截面</font></strong><font style="color: rgba(68, 68, 68, 1)">（near）和</font><strong><font style="color: rgba(68, 68, 68, 1)">远截面</font></strong><font style="color: rgba(68, 68, 68, 1)">（far）。 当物体某些部分比摄像机的</font><strong><font style="color: rgba(68, 68, 68, 1)">远截面</font></strong><font style="color: rgba(68, 68, 68, 1)">远或者比</font><strong><font style="color: rgba(68, 68, 68, 1)">近截面</font></strong><font style="color: rgba(68, 68, 68, 1)">近的时候，该这些部分将不会被渲染到场景中。或许现在你不用担心这个值的影响，但未来为了获得更好的渲染性能，你将可以在你的应用程序里去设置它。</font></p>
<p><font style="color: rgba(68, 68, 68, 1)">下图椎体就是上面设置视野角度、长宽比、近截面和远截面的演示的相机透视椎体。</font></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220509482-1005040090.png" alt="" loading="lazy"></p>
<h3 id="13-渲染器">1.3 渲染器</h3>
<p><font style="color: rgba(68, 68, 68, 1)">接下来是渲染器。这里是施展魔法的地方。</font></p>
<pre><code class="language-javascript">// 初始化渲染器
const renderer = new THREE.WebGLRenderer();
// 设置渲染的尺寸大小
renderer.setSize(window.innerWidth, window.innerHeight);
// console.log(renderer);
// 将webgl渲染的canvas内容添加到body
document.body.appendChild(renderer.domElement);

// 使用渲染器，通过相机将场景渲染进来
renderer.render(scene, camera);
</code></pre>
<p><font style="color: rgba(68, 68, 68, 1)">除了创建一个渲染器的实例之外，我们还需要在我们的应用程序里设置一个渲染器的尺寸。比如说，我们可以使用所需要的渲染区域的宽高，来让渲染器渲染出的场景填充满我们的应用程序。因此，我们可以将渲染器宽高设置为浏览器窗口宽高。对于性能比较敏感的应用程序来说，你可以使用</font><strong><font style="color: rgba(68, 68, 68, 1)">setSize</font></strong><font style="color: rgba(68, 68, 68, 1)">传入一个较小的值，例如</font><strong><font style="color: rgba(68, 68, 68, 1)">window.innerWidth/2</font></strong><font style="color: rgba(68, 68, 68, 1)">和</font><strong><font style="color: rgba(68, 68, 68, 1)">window.innerHeight/2</font></strong><font style="color: rgba(68, 68, 68, 1)">，这将使得应用程序在渲染时，以一半的长宽尺寸渲染场景。</font></p>
<p><font style="color: rgba(68, 68, 68, 1)">接下来将</font><strong><font style="color: rgba(68, 68, 68, 1)">renderer</font></strong><font style="color: rgba(68, 68, 68, 1)">（渲染器）的dom元素（renderer.domElement）添加到我们的HTML文档中。渲染器用来显示场景给我们看的<canvas>元素。</canvas></font></p>
<p><font style="color: rgba(68, 68, 68, 1)">最后就是对将相机对场景进行拍照渲染啦。这一句就可以将画面渲染到canvas上显示出来</font></p>
<blockquote>
<p>renderer.render(scene, camera);</p>
</blockquote>
<h3 id="14-加入立方体"><font style="color: rgba(68, 68, 68, 1)">1.4 加入立方体</font></h3>
<p><font style="color: rgba(68, 68, 68, 1)">要创建一个立方体，我们需要一个</font><strong><font style="color: rgba(68, 68, 68, 1)">BoxGeometry</font></strong><font style="color: rgba(68, 68, 68, 1)">（立方体）对象. 这个对象包含了一个立方体中所有的顶点（</font><strong><font style="color: rgba(68, 68, 68, 1)">vertices</font></strong><font style="color: rgba(68, 68, 68, 1)">）和面（</font><strong><font style="color: rgba(68, 68, 68, 1)">faces</font></strong><font style="color: rgba(68, 68, 68, 1)">）。</font></p>
<p><font style="color: rgba(68, 68, 68, 1)">接下来，对于这个立方体，我们需要给它一个材质，来让它有颜色。这里我们使用的是</font><strong><font style="color: rgba(68, 68, 68, 1)">MeshBasicMaterial</font></strong><font style="color: rgba(68, 68, 68, 1)">。所有的材质都存有应用于他们的属性的对象。为了简单起见，我们只设置一个color属性，值为</font><strong><font style="color: rgba(68, 68, 68, 1)">0x00ff00</font></strong><font style="color: rgba(68, 68, 68, 1)">，也就是绿色。这里和CSS或者Photoshop中使用十六进制(</font><strong><font style="color: rgba(68, 68, 68, 1)">hex colors</font></strong><font style="color: rgba(68, 68, 68, 1)">)颜色格式来设置颜色的方式一致。</font></p>
<p><font style="color: rgba(68, 68, 68, 1)">第三步，我们需要一个</font><strong><font style="color: rgba(68, 68, 68, 1)">Mesh</font></strong><font style="color: rgba(68, 68, 68, 1)">（网格）。 网格包含一个几何体以及作用在此几何体上的材质，我们可以直接将网格对象放入到我们的场景中，并让它在场景中自由移动。</font></p>
<p><font style="color: rgba(68, 68, 68, 1)">默认情况下，当我们调用</font><strong><font style="color: rgba(68, 68, 68, 1)">scene.add()</font></strong><font style="color: rgba(68, 68, 68, 1)">的时候，物体将会被添加到</font><strong><font style="color: rgba(68, 68, 68, 1)">(0,0,0)</font></strong><font style="color: rgba(68, 68, 68, 1)">坐标。但将使得摄像机和立方体彼此在一起。为了防止这种情况的发生，我们只需要将摄像机稍微向外移动一些即可。</font></p>
<pre><code class="language-javascript">// 添加物体
// 创建几何体
const cubeGeometry = new THREE.BoxGeometry(1, 1, 1);
const cubeMaterial = new THREE.MeshBasicMaterial({ color: 0xffff00 });
// 根据几何体和材质创建物体
const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
// 将几何体添加到场景中
scene.add(cube);
</code></pre>
<h2 id="2-综合上述代码"><font style="color: rgba(68, 68, 68, 1)">2 综合上述代码</font></h2>
<p>1、在前面创建的项目中的main.js文件写入代码</p>
<pre><code class="language-javascript">import * as THREE from "three";

// console.log(THREE);

// 目标：了解three.js最基本的内容

// 1、创建场景
const scene = new THREE.Scene();

// 2、创建相机
const camera = new THREE.PerspectiveCamera(
  75,
  window.innerWidth / window.innerHeight,
  0.1,
  1000
);

// 设置相机位置
camera.position.set(0, 0, 10);
scene.add(camera);

// 添加物体
// 创建几何体
const cubeGeometry = new THREE.BoxGeometry(1, 1, 1);
const cubeMaterial = new THREE.MeshBasicMaterial({ color: 0xffff00 });
// 根据几何体和材质创建物体
const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
// 将几何体添加到场景中
scene.add(cube);

// 初始化渲染器
const renderer = new THREE.WebGLRenderer();
// 设置渲染的尺寸大小
renderer.setSize(window.innerWidth, window.innerHeight);
// console.log(renderer);
// 将webgl渲染的canvas内容添加到body
document.body.appendChild(renderer.domElement);

// 使用渲染器，通过相机将场景渲染进来
renderer.render(scene, camera);

</code></pre>
<p>效果演示：</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202411/2680817-20241119220509772-1402933168.png" alt="" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="33.699355980327546" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-11-19 22:13">2024-11-19 22:10</span>&nbsp;
<a href="https://www.cnblogs.com/heymar">Heymar-10</a>&nbsp;
阅读(<span id="post_view_count">360</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18555692" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18555692);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18555692', targetLink: 'https://www.cnblogs.com/heymar/p/18555692', title: 'ThreeJs-01开发环境搭建' })">举报</a>
</div>
        