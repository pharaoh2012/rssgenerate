
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/waterme123/p/18989374" title="发布于 2025-07-17 12:35">
    <span role="heading" aria-level="2">基于外卖系统的RBAC实现</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>基于角色的访问控制（RBAC）模型实现报告</p>
<ul>
<li>引言</li>
</ul>
<p>在我原本开发的基于 Java 的外卖管理系统中，员工之间并没有精细化的权限控制，不同岗位的员工共享了相同的后台操作权限。为了解决这一问题，并实现系统管理员、店铺管理员与普通员工之间的差异化访问控制，我基于课程中学习的 RBAC（基于角色的访问控制）模型，对系统权限模块进行了设计与实现，从而显著提升了系统的安全性和可维护性。</p>
<ul>
<li>RBAC 模型简介</li>
</ul>
<p>RBAC（Role-Based Access Control，基于角色的访问控制）是一种广泛应用于安全系统中的权限管理模型。该模型不再直接将权限分配给用户，而是通过角色这一中间层，将权限赋予角色，再将角色赋予用户，从而实现更具扩展性、可维护性与安全性的权限管理方式。</p>
<p>RBAC 的核心逻辑如下图所示：</p>
<p><img style="display: block; margin-left: auto; margin-right: auto" data-src="https://img2024.cnblogs.com/blog/3417030/202507/3417030-20250717123426870-1590340382.png" class="lazyload"></p>
<p>图 1RBAC 权限控制关系示意图</p>
<p>在此模型中，用户通过所分配的角色来获取访问权限，而角色封装了一组特定的权限。</p>
<p>RBAC 模型包含以下基本元素：</p>
<ul>
<li><strong>用户（User）</strong>：系统的使用者；</li>
<li><strong>角色（Role）</strong>：代表某一职责或岗位；</li>
<li><strong>权限（Permission）</strong>：对某项资源操作的授权。</li>
</ul>
<p>该结构简化了权限管理流程，有助于权限审计与策略执行。</p>
<ul>
<li>角色与权限需求分析</li>
</ul>
<table>
<tbody>
<tr>
<td>
<p>角色名</p>
</td>
<td>
<p>描述</p>
</td>
<td>
<p>所需权限</p>
</td>
</tr>
<tr>
<td>
<p>店主（Owner）</p>
</td>
<td>
<p>拥有全部权限的系统管理员</p>
</td>
<td>
<p>employee:view, employee:add, dish:add, dish:update, dish:delete, order:list, order:detail, statistics:view, category:<em>, setmeal:</em></p>
</td>
</tr>
<tr>
<td>
<p>店铺管理员（Manager）</p>
</td>
<td>
<p>协助管理店铺运营</p>
</td>
<td>
<p>dish:add, dish:update, order:list, statistics:view, category:view, setmeal:view</p>
</td>
</tr>
<tr>
<td>
<p>员工（Staff）</p>
</td>
<td>
<p>处理日常订单与只读权限</p>
</td>
<td>
<p>order:list, dish:view, category:view, setmeal:view</p>
</td>
</tr>
</tbody>
</table>
<ul>
<li>数据库设计</li>
</ul>
<p>为实现不同角色的权限映射，并避免硬编码，我设计了如下数据库结构支持多对多关系：</p>
<p><img style="display: block; margin-left: auto; margin-right: auto" data-src="https://img2024.cnblogs.com/blog/3417030/202507/3417030-20250717123429864-1584640845.png" class="lazyload"></p>
<p>图 2数据库表结构设计示意图</p>
<p>用户登录后，系统通过 employee_role 表查询用户所拥有的所有角色，再通过 role_permission 表获取其对应的权限，并将其缓存至 JWT 或 ThreadLocal，供后续权限校验使用。该结构支持灵活扩展与权限解耦，增强了系统的适应性。</p>
<ul>
<li>初始化数据</li>
</ul>
<p>为实现 RBAC 模型，部署时系统初始化了以下数据：</p>
<p>角色表</p>
<table>
<tbody>
<tr>
<td>
<p><strong>Role Name</strong></p>
</td>
<td>
<p><strong>Description </strong></p>
</td>
</tr>
<tr>
<td>
<p>Admin</p>
</td>
<td>
<p>拥有全部权限的管理员</p>
</td>
</tr>
<tr>
<td>
<p>Manager</p>
</td>
<td>
<p>店铺管理员</p>
</td>
</tr>
<tr>
<td>
<p>Staff</p>
</td>
<td>
<p>普通员工</p>
</td>
</tr>
</tbody>
</table>
<p>权限表</p>
<p>包括但不限于以下权限：</p>
<table>
<tbody>
<tr>
<td>
<p><strong>Permission Code</strong></p>
</td>
<td><br>
<table>
<tbody>
<tr>
<td>
<p><strong>Description</strong></p>
</td>
</tr>
</tbody>
</table>
</td>
</tr>
<tr>
<td>
<p>employee:view</p>
</td>
<td><br>
<p>查看员工信息</p>
</td>
</tr>
<tr>
<td>
<p>employee:add</p>
</td>
<td>
<p>添加员工</p>
</td>
</tr>
<tr>
<td>
<p>employee:update</p>
</td>
<td><br>
<table>
<tbody>
<tr>
<td>
<p>修改员工</p>
</td>
</tr>
</tbody>
</table>
</td>
</tr>
<tr>
<td>
<p>…</p>
</td>
<td>
<p>…</p>
</td>
</tr>
</tbody>
</table>
<p>角色与权限映射</p>
<table>
<tbody>
<tr>
<td>
<p><strong>Role</strong></p>
</td>
<td>
<p><strong>Assigned Permissions</strong></p>
</td>
</tr>
<tr align="left" valign="middle">
<td>
<p>Admin</p>
</td>
<td><br>
<p>全部权限</p>
</td>
</tr>
<tr>
<td>
<p>Manager</p>
</td>
<td>
<p>除员工管理外所有权限</p>
</td>
</tr>
<tr>
<td>
<p>Staff</p>
</td>
<td>
<p>查看订单、菜品、分类、套餐权限</p>
</td>
</tr>
</tbody>
</table>
<p>员工与角色绑定</p>
<table>
<tbody>
<tr>
<td>
<p><strong>Employee Username</strong></p>
</td>
<td>
<p><strong>Assigned Role</strong></p>
</td>
</tr>
<tr>
<td>
<p>admin</p>
</td>
<td><br>
<p>Admin</p>
</td>
</tr>
<tr>
<td>
<p>manager001</p>
</td>
<td><br>
<p>Manager</p>
</td>
</tr>
<tr>
<td>
<p>staff001</p>
</td>
<td>
<p>Staff</p>
</td>
</tr>
</tbody>
</table>
<ul>
<li>Java 实现部分</li>
</ul>
<p>为实现基于角色的权限控制，系统后端引入以下关键组件：</p>
<p>EmployeeController</p>
<p>负责登录处理，并从业务层获取权限信息写入 JWT。</p>
<p><img style="display: block; margin-left: auto; margin-right: auto" data-src="https://img2024.cnblogs.com/blog/3417030/202507/3417030-20250717123428866-1090546299.png" class="lazyload"></p>
<p style="text-align: center">图 3 控制器中嵌入权限信息的流程</p>
<p>EmployeeService</p>
<p>根据员工 ID 查询其角色，并进一步获取权限列表。</p>
<div style="text-align: center"><img data-src="https://img2024.cnblogs.com/blog/3417030/202507/3417030-20250717123429206-257381466.png" class="lazyload"></div>
<div style="text-align: center">图 4 角色与权限映射逻辑是 RBAC 实现的核心</div>
<p>PermissionAspect（AOP 权限切面）</p>
<p>在方法执行前判断当前用户是否拥有指定权限，否则抛出异常。</p>
<div style="text-align: center"><img data-src="https://img2024.cnblogs.com/blog/3417030/202507/3417030-20250717123431092-285136156.png" class="lazyload"></div>
<div style="text-align: center">图 5通过注解 + AOP 实现运行时权限校验。</div>
<p>JwtUtils</p>
<p>负责权限信息的生成与解析。</p>
<div style="text-align: center"><img data-src="https://img2024.cnblogs.com/blog/3417030/202507/3417030-20250717123428277-1816097186.png" class="lazyload"></div>
<div style="text-align: center">图 6 登录成功后将权限名称列表写入 JWT</div>
<div style="text-align: center"><img data-src="https://img2024.cnblogs.com/blog/3417030/202507/3417030-20250717123429194-101207037.png" class="lazyload"></div>
<div style="text-align: center">图 7 解析 JWT 并将权限缓存至 ThreadLocal</div>
<p>全局异常处理器</p>
<p>捕捉无权限访问异常，并返回统一格式的错误提示。</p>
<div style="text-align: center"><img data-src="https://img2024.cnblogs.com/blog/3417030/202507/3417030-20250717123427601-759607352.png" class="lazyload"></div>
<div style="text-align: center">图 8权限异常提示与前端配合完成提示展示</div>
<ul>
<li>功能演示</li>
</ul>
<p>本系统成功实现了 RBAC 模块，并以系统管理员、店铺管理员、员工三类角色为例完成功能验证。</p>
<p>首先使用管理员账户登录，成功访问员工管理页面，具备添加与修改等权限。</p>
<p><img data-src="https://img2024.cnblogs.com/blog/3417030/202507/3417030-20250717123442679-849100109.png" class="lazyload"></p>
<p><img data-src="https://img2024.cnblogs.com/blog/3417030/202507/3417030-20250717123431357-430917682.png" class="lazyload"></p>
<p>随后使用店铺管理员账户登录，员工管理页面无法加载数据，抓包结果显示后端返回了“无权限”的提示信息，正是我们在全局异常处理器中设置的响应内容，验证了权限校验机制的生效。</p>
<p><img data-src="https://img2024.cnblogs.com/blog/3417030/202507/3417030-20250717123442630-1695033954.png" class="lazyload"></p>
<p><img data-src="https://img2024.cnblogs.com/blog/3417030/202507/3417030-20250717123431526-1589995894.png" class="lazyload"></p>
<p><img data-src="https://img2024.cnblogs.com/blog/3417030/202507/3417030-20250717123430835-60440922.png" class="lazyload"></p>
<ul>
<li>问题与解决方案</li>
</ul>
<p>问题 1：数据库结构设计问题</p>
<p>最初采用物理外键约束，但在员工与角色、权限等数据绑定后，对数据进行修改变得困难，最终改为使用逻辑外键，通过业务逻辑保障一致性，提高了灵活性。</p>
<p>问题 2：权限未正确加载</p>
<p>登录后虽然成功绑定角色，但权限未加载，原因是 MyBatis 动态 SQL 参数名不一致（如 id 与 roleIds），修正参数后问题解决。</p>
<p>问题 3：JWT 权限存储问题</p>
<p>最初将完整权限数据写入 JWT，导致 Token 过长，解析失败。最终改为仅存权限名列表，并通过拦截器与 AOP 配合进行校验。</p>
<ul>
<li>总结</li>
</ul>
<p>本次基于 RBAC 的权限控制模块成功实现了多角色的精细化访问控制，通过数据库设计、数据初始化、JWT 注入、AOP 拦截等技术手段，构建了完整的权限管理机制。</p>
<p>开发过程中经历了外键设计、Token 设计、动态 SQL 传参、前后端协同等一系列问题，均成功解决，进一步加深了我对 RBAC 模型、权限控制、拦截器与 AOP 的理解。</p>
<p>该模块显著提升了系统安全性与灵活性，为后续引入菜单权限、数据权限、可视化配置等功能奠定了坚实基础。</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.001388888888888889" data-date-updated="2025-07-17 12:37">2025-07-17 12:35</span>&nbsp;
<a href="https://www.cnblogs.com/waterme123">waterme</a>&nbsp;
阅读(<span id="post_view_count">76</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18989374);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18989374', targetLink: 'https://www.cnblogs.com/waterme123/p/18989374', title: '基于外卖系统的RBAC实现' })">举报</a>
</div>
        