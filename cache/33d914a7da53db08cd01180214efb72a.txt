
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/TheMagicalRainbowSea/p/18816545" title="发布于 2025-04-09 14:20">
    <span role="heading" aria-level="2">11. RabbitMQ 消息队列 Federation (Exchange 交换机和 Queue队列) + Shovel 同步的搭建配置</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="11-rabbitmq-消息队列-federation-exchange-交换机和-queue队列--shovel--同步的搭建配置">11. RabbitMQ 消息队列 Federation (Exchange 交换机和 Queue队列) + Shovel  同步的搭建配置</h1>
<p>@</p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#11-rabbitmq-消息队列-federation-exchange-交换机和-queue队列--shovel--同步的搭建配置" rel="noopener nofollow">11. RabbitMQ 消息队列 Federation (Exchange 交换机和 Queue队列) + Shovel  同步的搭建配置</a></li><li><a href="#1-federation-exchange" rel="noopener nofollow">1. Federation Exchange</a></li><li><a href="#2-rabbitmq-在-docker-当中配置federation交换机" rel="noopener nofollow">2. RabbitMQ 在 Docker 当中配置Federation交换机</a><ul><li><a href="#1总体说明" rel="noopener nofollow">1、总体说明</a></li><li><a href="#2准备工作" rel="noopener nofollow">2、准备工作</a></li><li><a href="#3启用联邦插件" rel="noopener nofollow">3、启用联邦插件</a></li><li><a href="#4添加上游连接端点" rel="noopener nofollow">4、添加上游连接端点</a></li><li><a href="#5创建控制策略" rel="noopener nofollow">5、创建控制策略</a></li><li><a href="#6测试" rel="noopener nofollow">6、测试</a><ul><li><a href="#测试计划" rel="noopener nofollow">①测试计划</a></li><li><a href="#创建组件" rel="noopener nofollow">②创建组件</a></li><li><a href="#发布消息执行测试" rel="noopener nofollow">③发布消息执行测试</a></li></ul></li></ul></li><li><a href="#3-federation-queue" rel="noopener nofollow">3. Federation Queue</a></li><li><a href="#4-rabbitmq-docker-容器当中配置federation-队列" rel="noopener nofollow">4. RabbitMQ Docker 容器当中配置Federation 队列</a><ul><li><a href="#1总体说明-1" rel="noopener nofollow">1、总体说明</a></li><li><a href="#2创建控制策略" rel="noopener nofollow">2、创建控制策略</a></li><li><a href="#3测试" rel="noopener nofollow">3、测试</a><ul><li><a href="#测试计划-1" rel="noopener nofollow">①测试计划</a></li><li><a href="#创建组件-1" rel="noopener nofollow">②创建组件</a></li><li><a href="#执行测试" rel="noopener nofollow">③执行测试</a></li></ul></li></ul></li><li><a href="#5-rabbitmq-的--shovel--同步的搭建配置" rel="noopener nofollow">5. RabbitMQ 的  Shovel  同步的搭建配置</a></li><li><a href="#6-shovel-补充" rel="noopener nofollow">6. Shovel 补充：</a></li><li><a href="#7-最后" rel="noopener nofollow">7. 最后：</a></li></ul></div><p></p>
<hr>
<h1 id="1-federation-exchange">1. Federation Exchange</h1>
<p><strong>使用它的原因：</strong></p>
<p>(broker 北京)，(broker 深圳)彼此之间相距甚远，网络延迟是一个不得不面对的问题。有一个在北京 的业务(Client 北京) 需要连接(broker 北京)，向其中的交换器 exchangeA 发送消息，此时的网络延迟很小， (Client 北京)可以迅速将消息发送至 exchangeA 中，就算在开启了 publisherconfirm 机制或者事务机制的 情况下，也可以迅速收到确认信息。此时又有个在深圳的业务(Client 深圳)需要向 exchangeA 发送消息， 那么(Client 深圳) (broker 北京)之间有很大的网络延迟，(Client 深圳) 将发送消息至 exchangeA 会经历一 定的延迟，尤其是在开启了 publisherconfirm 机制或者事务机制的情况下，(Client 深圳) 会等待很长的延 迟时间来接收(broker 北京)的确认信息，进而必然造成这条发送线程的性能降低，甚至造成一定程度上的 阻塞。</p>
<p>将业务(Client 深圳)部署到北京的机房可以解决这个问题，但是如果(Client 深圳)调用的另些服务都部 署在深圳，那么又会引发新的时延问题，总不见得将所有业务全部部署在一个机房，那么容灾又何以实现？ 这里使用 Federation 插件就可以很好地解决这个问题。</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015198-2034878229.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>搭建步骤：</strong></p>
<blockquote>
<p><strong>1. 需要保证每台节点单独运行</strong></p>
<p><strong>2. 在每台机器上开启 federation 相关插件</strong></p>
<pre><code class="language-sh">rabbitmq-plugins enable rabbitmq_federation
</code></pre>
<pre><code class="language-sh">rabbitmq-plugins enable rabbitmq_federation_management
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015171-1382580694.png" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<blockquote>
<ol start="3">
<li><strong>原理图(先运行 consumer 在 node2 创建 fed_exchange)</strong></li>
</ol>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015172-1240668683.png" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<blockquote>
<p><strong>4.在 downstream(node2)配置 upstream(node1)</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015211-1015504660.png" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<blockquote>
<ol start="5">
<li><strong>添加 policy</strong></li>
</ol>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015225-1280720110.png" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<blockquote>
<p><strong>6. 成功的前提</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015170-967602040.png" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<h1 id="2-rabbitmq-在-docker-当中配置federation交换机">2. RabbitMQ 在 Docker 当中配置Federation交换机</h1>
<h2 id="1总体说明">1、总体说明</h2>
<ul>
<li>各节点操作：启用联邦插件</li>
<li>下游操作：
<ul>
<li>添加上游连接端点</li>
<li>创建控制策略</li>
</ul>
</li>
</ul>
<h2 id="2准备工作">2、准备工作</h2>
<p>为了执行相关测试，我们使用Docker创建两个RabbitMQ实例。</p>
<p><span style="color: rgba(0, 0, 255, 1)"><strong>特别提示</strong></span>：由于Federation机制的最大特点就是跨集群同步数据，所以这两个Docker容器中的RabbitMQ实例不加入集群！！！是两个<span style="color: rgba(0, 0, 255, 1)"><strong>独立的broker实例</strong></span>。</p>
<pre><code class="language-shell">docker run -d \
--name rabbitmq-shenzhen \
-p 51000:5672 \
-p 52000:15672 \
-v rabbitmq-plugin:/plugins \
-e RABBITMQ_DEFAULT_USER=guest \
-e RABBITMQ_DEFAULT_PASS=123456 \
rabbitmq:3.13-management

docker run -d \
--name rabbitmq-shanghai \
-p 61000:5672 \
-p 62000:15672 \
-v rabbitmq-plugin:/plugins \
-e RABBITMQ_DEFAULT_USER=guest \
-e RABBITMQ_DEFAULT_PASS=123456 \
rabbitmq:3.13-management
</code></pre>
<h2 id="3启用联邦插件">3、启用联邦插件</h2>
<p>在上游、下游节点中都需要开启。</p>
<p>Docker容器中的RabbitMQ已经开启了rabbitmq_federation，还需要开启rabbitmq_federation_management</p>
<pre><code class="language-shell">rabbitmq-plugins enable rabbitmq_federation
rabbitmq-plugins enable rabbitmq_federation_management
</code></pre>
<p>rabbitmq_federation_management插件启用后会在Management UI的Admin选项卡下看到：</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015199-741624346.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="4添加上游连接端点">4、添加上游连接端点</h2>
<p>在下游节点填写上游节点的连接信息：</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015215-509572869.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015180-638604977.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="5创建控制策略">5、创建控制策略</h2>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015157-1568920305.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015183-839828777.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="6测试">6、测试</h2>
<h3 id="测试计划">①测试计划</h3>
<p><span style="color: rgba(0, 0, 255, 1)"><strong>特别提示</strong></span>：</p>
<ul>
<li>普通交换机和联邦交换机名称要一致</li>
<li>交换机名称要能够和策略正则表达式匹配上</li>
<li>发送消息时，两边使用的路由键也要一致</li>
<li>队列名称不要求一致</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015206-1479817688.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="创建组件">②创建组件</h3>
<table>
<thead>
<tr>
<th>所在机房</th>
<th>交换机名称</th>
<th>路由键</th>
<th>队列名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>深圳机房（上游）</td>
<td>federated.exchange.demo</td>
<td>routing.key.demo.test</td>
<td>queue.normal.shenzhen</td>
</tr>
<tr>
<td>上海机房（下游）</td>
<td>federated.exchange.demo</td>
<td>routing.key.demo.test</td>
<td>queue.normal.shanghai</td>
</tr>
</tbody>
</table>
<p>创建组件后可以查看一下联邦状态，连接成功的联邦状态如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015174-395730648.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="发布消息执行测试">③发布消息执行测试</h3>
<p>在上游节点向交换机发布消息：<br>
<img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015223-1616250741.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>看到下游节点接收到了消息：</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015211-880007720.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="3-federation-queue">3. Federation Queue</h1>
<p><strong>使用它的原因：</strong></p>
<p>联邦队列可以在多个 Broker 节点(或者集群)之间为单个队列提供均衡负载的功能。一个联邦队列可以 连接一个或者多个上游队列(upstream queue)，并从这些上游队列中获取消息以满足本地消费者消费消息 的需求。</p>
<p><strong>搭建步骤：</strong></p>
<blockquote>
<ol>
<li><strong>原理图：</strong></li>
</ol>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015180-1647377102.png" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<blockquote>
<ol start="2">
<li>
<p><strong>添加 upstream(同上)</strong></p>
</li>
<li>
<p><strong>添加 policy</strong></p>
</li>
</ol>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015183-952913287.png" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<h1 id="4-rabbitmq-docker-容器当中配置federation-队列">4. RabbitMQ Docker 容器当中配置Federation 队列</h1>
<h2 id="1总体说明-1">1、总体说明</h2>
<p>Federation队列和Federation交换机的最核心区别就是：</p>
<ul>
<li>Federation Police作用在交换机上，就是Federation交换机</li>
<li>Federation Police作用在队列上，就是Federation队列</li>
</ul>
<h2 id="2创建控制策略">2、创建控制策略</h2>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015211-1409411373.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="3测试">3、测试</h2>
<h3 id="测试计划-1">①测试计划</h3>
<p>上游节点和下游节点中队列名称是相同的，只是下游队列中的节点附加了联邦策略而已</p>
<table>
<thead>
<tr>
<th>所在机房</th>
<th>交换机</th>
<th>路由键</th>
<th>队列</th>
</tr>
</thead>
<tbody>
<tr>
<td>深圳机房（上游）</td>
<td>exchange.normal.shenzhen</td>
<td>routing.key.normal.shenzhen</td>
<td>fed.queue.demo</td>
</tr>
<tr>
<td>上海机房（下游）</td>
<td>——</td>
<td>——</td>
<td>fed.queue.demo</td>
</tr>
</tbody>
</table>
<h3 id="创建组件-1">②创建组件</h3>
<p>上游节点都是常规操作，此处省略。重点需要关注的是下游节点的联邦队列创建时需要指定相关参数：</p>
<p>创建组件后可以查看一下联邦状态，连接成功的联邦状态如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015156-2078284414.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="执行测试">③执行测试</h3>
<p>在上游节点向交换机发布消息：</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015165-398493713.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>但此时发现下游节点中联邦队列并没有接收到消息，这是为什么呢？这里就体现出了联邦队列和联邦交换机工作逻辑的区别。</p>
<p>对联邦队列来说，如果没有监听联邦队列的消费端程序，它是不会到上游去拉取消息的！</p>
<p>如果有消费端监听联邦队列，那么首先消费联邦队列自身的消息；如果联邦队列为空，<span style="color: rgba(0, 0, 255, 1)"><strong>这时候才</strong></span>会到上游队列节点中拉取消息。</p>
<p>所以现在的测试效果需要消费端程序配合才能看到：</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015137-1610348568.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="5-rabbitmq-的--shovel--同步的搭建配置">5. RabbitMQ 的  Shovel  同步的搭建配置</h1>
<p><strong>使用它的原因：</strong></p>
<p>Federation 具备的数据转发功能类似，Shovel 够可靠、持续地从一个 Broker 中的队列(作为源端，即 source)拉取数据并转发至另一个 Broker 中的交换器(作为目的端，即 destination)。作为源端的队列和作 为目的端的交换器可以同时位于同一个 Broker，也可以位于不同的 Broker 上。Shovel 可以翻译为"铲子"， 是一种比较形象的比喻，这个"铲子"可以将消息从一方"铲子"另一方。Shovel 行为就像优秀的客户端应用 程序能够负责连接源和目的地、负责消息的读写及负责连接失败问题的处理。</p>
<p><strong>搭建步骤：</strong></p>
<blockquote>
<ol>
<li><strong>开启插件(需要的机器都开启)</strong></li>
</ol>
<pre><code class="language-sh">rabbitmq-plugins enable rabbitmq_shovel
</code></pre>
<pre><code class="language-sh">rabbitmq-plugins enable rabbitmq_shovel_management
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015204-654984629.png" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<blockquote>
<ol start="2">
<li><strong>原理图(在源头发送的消息直接回进入到目的地队列)</strong></li>
</ol>
<p>=<img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015184-1169253895.png" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<blockquote>
<ol start="3">
<li><strong>添加 shovel 源和目的地</strong></li>
</ol>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015203-396253055.png" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<h1 id="6-shovel-补充">6. Shovel 补充：</h1>
<p><strong>1. 启用Shovel插件</strong></p>
<pre><code class="language-shell">rabbitmq-plugins enable rabbitmq_shovel
rabbitmq-plugins enable rabbitmq_shovel_management
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015114-573565681.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>2. 配置Shovel</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015136-747133149.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>3. 测试</strong></p>
<p>1、测试计划</p>
<table>
<thead>
<tr>
<th>节点</th>
<th>交换机</th>
<th>路由键</th>
<th>队列</th>
</tr>
</thead>
<tbody>
<tr>
<td>深圳节点</td>
<td>exchange.shovel.test</td>
<td>exchange.shovel.test</td>
<td>queue.shovel.demo.shenzhen</td>
</tr>
<tr>
<td>上海节点</td>
<td>——</td>
<td>——</td>
<td>queue.shovel.demo.shanghai</td>
</tr>
</tbody>
</table>
<p><strong>2、测试效果</strong></p>
<p><strong>①发布消息</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015158-1035931931.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>②源节点</strong><br>
<img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015203-209161429.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>③目标节点</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015203-1750382244.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="7-最后">7. 最后：</h1>
<blockquote>
<p>“在这个最后的篇章中，我要表达我对每一位读者的感激之情。你们的关注和回复是我创作的动力源泉，我从你们身上吸取了无尽的灵感与勇气。我会将你们的鼓励留在心底，继续在其他的领域奋斗。感谢你们，我们总会在某个时刻再次相遇。”</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202504/3084824-20250409142015277-2101385632.gif" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.8607237265671296" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-09 14:21">2025-04-09 14:20</span>&nbsp;
<a href="https://www.cnblogs.com/TheMagicalRainbowSea">Rainbow-Sea</a>&nbsp;
阅读(<span id="post_view_count">91</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18816545" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18816545);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18816545', targetLink: 'https://www.cnblogs.com/TheMagicalRainbowSea/p/18816545', title: '11. RabbitMQ 消息队列 Federation (Exchange 交换机和 Queue队列) + Shovel 同步的搭建配置' })">举报</a>
</div>
	