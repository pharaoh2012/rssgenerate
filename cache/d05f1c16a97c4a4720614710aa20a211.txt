<!----> <meta itemprop="headline" content="前端速通Blob、File、FileReader、ArrayBuffer、Base64、URL.createObjectURL()"> <meta itemprop="keywords" content="前端,JavaScript"> <meta itemprop="datePublished" content="2024-10-12T02:07:16.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="朋朋Up"> <meta itemprop="url" content="https://juejin.cn/user/26044009808600"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-7cdd11fb="">
            前端速通Blob、File、FileReader、ArrayBuffer、Base64、URL.createObjectURL()
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-7cdd11fb=""><div class="author-info-box" data-v-7cdd11fb=""><div class="author-name" data-v-7cdd11fb=""><a href="/user/26044009808600/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-7cdd11fb=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    朋朋Up
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-7cdd11fb=""><time datetime="2024-10-12T02:07:16.000Z" title="Sat Oct 12 2024 02:07:16 GMT+0000 (Coordinated Universal Time)" class="time" data-v-7cdd11fb="">
                    2024-10-12
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-7cdd11fb=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-7cdd11fb=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-7cdd11fb=""></circle></svg> <span class="views-count" data-v-7cdd11fb="">
                    11,230
                  </span> <span class="read-time" data-v-7cdd11fb=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-7cdd11fb=""><rect width="16" height="16" fill="none" data-v-7cdd11fb=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-7cdd11fb=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-7cdd11fb=""></path></svg>
                    阅读13分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-7cdd11fb=""></div> <!----> <!----></div> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-7cdd11fb=""><div class="article-viewer markdown-body result"><h2 data-id="heading-0">引言</h2>
<p>在前端开发的旅途中，我们总会与 Blob、File、FileReader、ArrayBuffer、Base64、URL.createObjectURL() 这些“老朋友”不期而遇。通常，我们会祭出“万能”搜索引擎，复制粘贴一段代码，完成任务后便拍拍手走人，从未深究这些概念背后的奥秘。是时候痛下决心，抽出十分钟，一起搞懂这些“神秘代码”的真相！让我们在开发的江湖中，不再只是“复制侠”，而是“代码大师”！</p>
<h2 data-id="heading-1">Blob</h2>
<p><code>Blob</code> 对象表示一个不可变、原始数据的<strong>类文件</strong>对象。它的数据可以按文本（<code>text()方法</code>）或二进制（<code>arrayBuffer()方法</code>）的格式进行读取，也可以转换成 <a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FReadableStream" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream" ref="nofollow noopener noreferrer">ReadableStream</a> （<code>stream()方法</code>）可读流来用于数据操作。Blob 提供了一种高效的方式来操作数据文件，而不需要将数据全部加载到内存中(比如流式读取、文件切片<code>slice()方法</code>)，这在处理大型文件或二进制数据时非常有用。</p>
<p>Blob 表示的不一定是 JavaScript 原生格式的数据，它还可以用来存储文件、图片、音频、视频、甚至是纯文本等各种类型的数据。</p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FFile" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/API/File" ref="nofollow noopener noreferrer">File</a> 接口基于 <code>Blob</code>，继承了 blob 的功能并将其扩展以支持用户系统上的文件。</p>
<h3 data-id="heading-2">基本使用</h3>
<p>可以使用 new Blob() 构造函数来创建一个 Blob 对象：</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>(blobParts)
<span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>(blobParts, options)
</code></pre>
<ol>
<li>blobParts (可选)：一个<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FIteration_protocols%23%25E5%258F%25AF%25E8%25BF%25AD%25E4%25BB%25A3%25E5%258D%258F%25E8%25AE%25AE" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%8D%8F%E8%AE%AE" ref="nofollow noopener noreferrer">可迭代对象</a>，比如 Array，包含 <a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FArrayBuffer" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" ref="nofollow noopener noreferrer">ArrayBuffer</a>、<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FTypedArray" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" ref="nofollow noopener noreferrer">TypedArray</a>、<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FDataView" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView" ref="nofollow noopener noreferrer">DataView</a>、<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FBlob" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" ref="nofollow noopener noreferrer">Blob</a>、字符串或者任意这些元素的混合，这些元素将会被放入 Blob 中。</li>
<li>options (可选)：可以设置 type （<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FGlossary%2FMIME_type" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Glossary/MIME_type" ref="nofollow noopener noreferrer">MIME 类型</a>）和 endings （用于表示换行符）。</li>
</ol>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> blob1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([<span class="hljs-string">"Hello, world!"</span>], { <span class="hljs-attr">type</span>: <span class="hljs-string">"text/plain"</span> });

<span class="hljs-keyword">const</span> blob2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([<span class="hljs-string">'&lt;q id="a"&gt;&lt;span id="b"&gt;hey!&lt;/span&gt;&lt;/q&gt;'</span>], { <span class="hljs-attr">type</span>: <span class="hljs-string">"text/html"</span> });
</code></pre>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/48a159db2f4e465485def84b4fc42a95~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyL5pyLVXA=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735976905&amp;x-signature=W49tcesyxhiDYKtTki5uTzHWQWU%3D" alt="" loading="lazy"></p>
<p>Blob 对象主要有以下几个属性：</p>
<ol>
<li>size: 返回 Blob 对象的大小（以字节为单位）。</li>
</ol>
<pre><code class="hljs language-js" lang="js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(blob.<span class="hljs-property">size</span>); <span class="hljs-comment">// 输出 Blob 的大小</span>
</code></pre>
<ol start="2">
<li>type: 返回 Blob 对象的 MIME 类型。</li>
</ol>
<pre><code class="hljs language-js" lang="js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(blob.<span class="hljs-property">type</span>); <span class="hljs-comment">// 输出 Blob 的 MIME 类型</span>
</code></pre>
<p>Blob 对象提供了一些常用的方法来操作二进制数据。</p>
<ol>
<li><code>slice([start], [end], [contentType])</code></li>
</ol>
<p>该方法用于从 Blob 中提取一部分数据，并返回一个<strong>新的 Blob 对象</strong>。参数 start 和 end 表示提取的字节范围，contentType 设置提取部分的 MIME 类型。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([<span class="hljs-string">"Hello, world!"</span>], { <span class="hljs-attr">type</span>: <span class="hljs-string">"text/plain"</span> });

<span class="hljs-keyword">const</span> partialBlob = blob.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>);
</code></pre>
<ol start="2">
<li><code>text()</code></li>
</ol>
<p>该方法将 Blob 的内容读取为文本字符串。它返回一个 Promise，解析为文本数据。</p>
<pre><code class="hljs language-js" lang="js">blob.<span class="hljs-title function_">text</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">text</span>) =&gt;</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(text); <span class="hljs-comment">// 输出 "Hello, world!"</span>
});
</code></pre>
<ol start="3">
<li><code>arrayBuffer()</code></li>
</ol>
<p>该方法将 Blob 的内容读取为 ArrayBuffer 对象，适合处理二进制数据。它返回一个 Promise，解析为 ArrayBuffer 数据。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([<span class="hljs-string">"Hello, world!"</span>], { <span class="hljs-attr">type</span>: <span class="hljs-string">"text/plain"</span> });

blob.<span class="hljs-title function_">arrayBuffer</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">buffer</span>) =&gt;</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(buffer);
});
</code></pre>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/2fb2b993a3014b0dbc7910eb9f0de10b~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyL5pyLVXA=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735976905&amp;x-signature=TDkosHFsAlIvwCoMkasLHSgzabA%3D" alt="" loading="lazy"></p>
<ol start="4">
<li><code>stream()</code></li>
</ol>
<p>该方法将 Blob 的数据作为一个 ReadableStream 返回，允许你以流的方式处理数据，适合处理大文件。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([<span class="hljs-string">"Hello, world! This is a test Blob."</span>], { <span class="hljs-attr">type</span>: <span class="hljs-string">'text/plain'</span> });

<span class="hljs-comment">// 获取 Blob 的可读流</span>
<span class="hljs-keyword">const</span> readableStream = blob.<span class="hljs-title function_">stream</span>();

<span class="hljs-comment">// 创建一个默认的文本解码器</span>
<span class="hljs-keyword">const</span> reader = readableStream.<span class="hljs-title function_">getReader</span>();

<span class="hljs-comment">// 用于读取流并输出到控制台</span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">readStream</span>(<span class="hljs-params"></span>) {
  reader.<span class="hljs-title function_">read</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">{ done, value }</span>) =&gt;</span> {
    <span class="hljs-keyword">if</span> (done) {
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'Stream complete'</span>);
      <span class="hljs-keyword">return</span>;
    }
    <span class="hljs-comment">// 将 Uint8Array 转换为字符串并输出</span>
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextDecoder</span>(<span class="hljs-string">"utf-8"</span>).<span class="hljs-title function_">decode</span>(value));
    <span class="hljs-comment">// 继续读取下一个块</span>
    <span class="hljs-keyword">return</span> reader.<span class="hljs-title function_">read</span>().<span class="hljs-title function_">then</span>(processText);
  }).<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'Stream failed:'</span>, err);
  });
}

<span class="hljs-title function_">readStream</span>();
</code></pre>
<p>一个更复杂的示例：将一个 Blob 的内容流式读取并将其写入到另一个流中（了解即可）</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([<span class="hljs-string">"Hello, world! This is a test Blob."</span>], { <span class="hljs-attr">type</span>: <span class="hljs-string">'text/plain'</span> });

<span class="hljs-comment">// 使用 Blob.stream() 方法获取一个可读流</span>
<span class="hljs-keyword">const</span> readableStream = blob.<span class="hljs-title function_">stream</span>();

<span class="hljs-comment">// 创建一个新的 Response 对象，以便使用 Response.body 作为可读流</span>
<span class="hljs-keyword">const</span> response = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(readableStream);

<span class="hljs-comment">// 使用 TextDecoderStream 将二进制流转换为字符串</span>
<span class="hljs-keyword">const</span> textDecoderStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextDecoderStream</span>();
readableStream.<span class="hljs-title function_">pipeTo</span>(textDecoderStream.<span class="hljs-property">writable</span>);

<span class="hljs-comment">// 获取解码后的可读流</span>
<span class="hljs-keyword">const</span> decodedStream = textDecoderStream.<span class="hljs-property">readable</span>;

<span class="hljs-comment">// 创建一个可写流目标，通常是显示在页面上或传输到服务器</span>
<span class="hljs-keyword">const</span> writableStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WritableStream</span>({
  <span class="hljs-title function_">write</span>(<span class="hljs-params">chunk</span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chunk); <span class="hljs-comment">// 在控制台输出解码后的文本</span>
    <span class="hljs-comment">// 这里你可以将数据写入到某个地方，比如更新网页内容或上传到服务器</span>
  },
  <span class="hljs-title function_">close</span>(<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'Stream complete'</span>);
  }
});

<span class="hljs-comment">// 将解码后的流数据写入到可写流</span>
decodedStream.<span class="hljs-title function_">pipeTo</span>(writableStream).<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'Stream failed:'</span>, err);
});
</code></pre>
<h3 data-id="heading-3">使用场景</h3>
<p>只要记住，<strong>Blob 对象可以存储任何类型数据</strong>，那对于各种数据类型（比如文件、图像、音视频）相关的操作都可以使用 Blob。</p>
<ol>
<li>生成文件下载</li>
</ol>
<p>可以通过 Blob 创建文件并生成下载链接供用户下载文件</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([<span class="hljs-string">"This is a test file."</span>], { <span class="hljs-attr">type</span>: <span class="hljs-string">"text/plain"</span> });
<span class="hljs-keyword">const</span> url = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(blob); <span class="hljs-comment">// 创建一个 Blob URL</span>
<span class="hljs-keyword">const</span> a = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">"a"</span>);
a.<span class="hljs-property">href</span> = url;
a.<span class="hljs-property">download</span> = <span class="hljs-string">"test.txt"</span>;
a.<span class="hljs-title function_">click</span>();
<span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">revokeObjectURL</span>(url); <span class="hljs-comment">// 释放 URL 对象</span>
</code></pre>
<ol start="2">
<li>上传文件</li>
</ol>
<p>Blob 常用于上传文件到服务器，尤其是在使用 <code>FormData</code> API 时</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();
<span class="hljs-comment">// 做过上传文件功能的小伙伴，肯定都遇到过将 File 对象传入到 formData 中上传</span>
<span class="hljs-comment">// 其实 File 对象就是继承了 Blob 对象，只不过加上了一些文件信息。</span>
formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">"file"</span>, blob, <span class="hljs-string">"example.txt"</span>);

<span class="hljs-title function_">fetch</span>(<span class="hljs-string">"/upload"</span>, {
  <span class="hljs-attr">method</span>: <span class="hljs-string">"POST"</span>,
  <span class="hljs-attr">body</span>: formData,
}).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"File uploaded successfully"</span>);
});
</code></pre>
<ol start="3">
<li>图像处理</li>
</ol>
<p>通过 <a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FFileReader" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader" ref="nofollow noopener noreferrer">FileReader</a> API 可以将 Blob 对象读取为不同的数据格式。</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"fileInput"</span> <span class="hljs-attr">accept</span>=<span class="hljs-string">"image/*"</span> /&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"imageContainer"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
      <span class="hljs-keyword">const</span> fileInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">"fileInput"</span>);

      <span class="hljs-keyword">const</span> imageContainer = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">"imageContainer"</span>);

      fileInput.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"change"</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) {
        <span class="hljs-comment">// File 对象继承了 Blob 对象</span>
        <span class="hljs-keyword">const</span> file = event.<span class="hljs-property">target</span>.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];

        <span class="hljs-keyword">if</span> (file &amp;&amp; file.<span class="hljs-property">type</span>.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">"image/"</span>)) {
          <span class="hljs-keyword">const</span> reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>();

          reader.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) {
            <span class="hljs-keyword">const</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">"img"</span>);
            img.<span class="hljs-property">src</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">result</span>;
            img.<span class="hljs-property">style</span>.<span class="hljs-property">maxWidth</span> = <span class="hljs-string">"500px"</span>;
            img.<span class="hljs-property">style</span>.<span class="hljs-property">margin</span> = <span class="hljs-string">"10px"</span>;
            imageContainer.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">""</span>;
            imageContainer.<span class="hljs-title function_">appendChild</span>(img);
          };
          <span class="hljs-comment">// 转成 base64</span>
          reader.<span class="hljs-title function_">readAsDataURL</span>(file);
        } <span class="hljs-keyword">else</span> {
          <span class="hljs-title function_">alert</span>(<span class="hljs-string">"请选择一个有效的图片文件。"</span>);
        }
      });
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>
</code></pre>
<h2 data-id="heading-4">File</h2>
<h3 data-id="heading-5">基本使用</h3>
<p>File 是 JavaScript 中代表文件的数据结构，它继承自 Blob 对象，包含文件的元数据（如文件名、文件大小、类型等）。</p>
<p>Blob 是纯粹的二进制数据，它可以存储任何类型的数据，但不具有文件的元数据（如文件名、最后修改时间等）。</p>
<p>File 是 Blob 的子类，除了继承 Blob 的所有属性和方法之外，还包含文件的元数据。</p>
<p>你可以将 File 对象看作是带有文件信息的 Blob。Blob 更加通用，而 File 更专注于与文件系统的交互。</p>
<p>File 对象通常有三种方式获取：</p>
<ol>
<li>用户使用<code>&lt;input type="file"&gt;</code> 元素选择文件返回的 <a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FFileList" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/API/FileList" ref="nofollow noopener noreferrer">FileList</a> 对象中获取（即<code>files</code> 属性）</li>
<li>从拖放操作返回的 <a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FDataTransfer" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer" ref="nofollow noopener noreferrer">DataTransfer</a> 对象中获取。</li>
<li>可以使用 JavaScript 构造函数手动创建。</li>
</ol>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"fileInput"</span> /&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
  <span class="hljs-comment">// 获取用户上传的</span>
  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">"fileInput"</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"change"</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {
    <span class="hljs-keyword">const</span> file = event.<span class="hljs-property">target</span>.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"文件名:"</span>, file.<span class="hljs-property">name</span>);
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"文件类型:"</span>, file.<span class="hljs-property">type</span>);
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"文件大小:"</span>, file.<span class="hljs-property">size</span>);
  });
  
  <span class="hljs-comment">// 手动创建 File</span>
  <span class="hljs-keyword">const</span> file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>([<span class="hljs-string">"Hello, world!"</span>], <span class="hljs-string">"hello-world.txt"</span>, {
    <span class="hljs-attr">type</span>: <span class="hljs-string">"text/plain"</span>,
  });
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(file);
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/0df79aff096043faa47d5b85d73818a2~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyL5pyLVXA=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735976905&amp;x-signature=Wk%2FEM%2F2Pf79XBCiBnYHijOjGlL8%3D" alt="" loading="lazy"><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/d1bde208b7f7463083d808a13aa7dbe7~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyL5pyLVXA=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735976905&amp;x-signature=mlhLydn50jAk4gW5u%2F8onTz8GXU%3D" alt="" loading="lazy"></p>
<p>File 对象继承了 Blob 对象的方法，因此可以使用一些 Blob 对象的方法来处理文件数据。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> blob = file.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1024</span>); <span class="hljs-comment">// 获取文件的前 1024 个字节</span>

file.<span class="hljs-title function_">text</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">text</span>) =&gt;</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(text); <span class="hljs-comment">// 输出文件的文本内容</span>
});

file.<span class="hljs-title function_">arrayBuffer</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">buffer</span>) =&gt;</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(buffer); <span class="hljs-comment">// 输出文件的 ArrayBuffer</span>
});

<span class="hljs-keyword">const</span> stream = file.<span class="hljs-title function_">stream</span>();

<span class="hljs-comment">// File 对象上的一些常见属性</span>
file.<span class="hljs-property">type</span>
file.<span class="hljs-property">size</span>
file.<span class="hljs-property">name</span>
file.<span class="hljs-property">lastModified</span>
</code></pre>
<h3 data-id="heading-6">支持 Blob 和 File 对象的 API</h3>
<p>以下 API 都接受 <code>Blob</code> 对象和 <code>File</code> 对象：</p>
<ul>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FFileReader" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader" ref="nofollow noopener noreferrer">FileReader</a></li>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FURL%2FcreateObjectURL_static" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL_static" ref="nofollow noopener noreferrer">URL.createObjectURL()</a></li>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FWindow%2FcreateImageBitmap" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/createImageBitmap" ref="nofollow noopener noreferrer">Window.createImageBitmap()</a> 和 <a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FWorkerGlobalScope%2FcreateImageBitmap" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/API/WorkerGlobalScope/createImageBitmap" ref="nofollow noopener noreferrer">WorkerGlobalScope.createImageBitmap()</a></li>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FWindow%2Ffetch" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/fetch" ref="nofollow noopener noreferrer">fetch()</a> 方法的 <a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FRequestInit" target="_blank" title="https://developer.mozilla.org/en-US/docs/Web/API/RequestInit" ref="nofollow noopener noreferrer">body</a> 选项</li>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FXMLHttpRequest%2Fsend" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/send" ref="nofollow noopener noreferrer">XMLHttpRequest.send()</a></li>
</ul>
<h3 data-id="heading-7">FileReader</h3>
<p><code>FileReader</code> <strong>只能访问用户明确选择的文件内容</strong>，比如是使用 HTML <code>&lt;input type="file"&gt;</code> 元素或者通过拖放。</p>
<h4 data-id="heading-8">FileReader 实例属性</h4>

























<table><thead><tr><th>属性名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>readyState</code></td><td>Number</td><td>表示 <code>FileReader</code> 的当前状态。可能的值有： 0 - EMPTY：还没有加载任何数据。 1 - LOADING：数据正在被加载。 2 - DONE：已完成全部的读取请求。</td></tr><tr><td><code>result</code></td><td>Any</td><td>文件的内容。该属性仅在读取操作完成后才有效，数据的格式取决于使用的读取方法，例如字符串或 ArrayBuffer。</td></tr><tr><td><code>error</code></td><td>DOMException</td><td>如果读取过程中发生错误，该属性包含一个 <code>DOMException</code> 对象，描述错误的详细信息。</td></tr></tbody></table>
<h4 data-id="heading-9">FileReader 实例方法</h4>





























<table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>readAsArrayBuffer()</code></td><td>开始读取指定的 <code>Blob</code> 或 <code>File</code> 对象，并将文件内容读为 <code>ArrayBuffer</code>。</td></tr><tr><td><code>readAsBinaryString()</code></td><td>开始读取指定的 <code>Blob</code> 或 <code>File</code> 对象，并将文件内容读为二进制字符串。</td></tr><tr><td><code>readAsDataURL()</code></td><td>开始读取指定的 <code>Blob</code> 或 <code>File</code> 对象，并将文件内容读为 Data URL（Base64 编码的字符串）。</td></tr><tr><td><code>readAsText()</code></td><td>开始读取指定的 <code>Blob</code> 或 <code>File</code> 对象，并将文件内容读为文本字符串，默认使用 UTF-8 编码。</td></tr><tr><td><code>abort()</code></td><td>中止读取操作。在返回时，<code>readyState</code> 属性为 <code>DONE</code>。</td></tr></tbody></table>
<h4 data-id="heading-10">事件</h4>
<p>除了属性和方法，<code>FileReader</code> 还会触发一些事件，可以监听这些事件来处理读取过程中的不同阶段：</p>

































<table><thead><tr><th>事件名</th><th>描述</th></tr></thead><tbody><tr><td><code>onloadstart</code></td><td>在读取操作开始时触发。</td></tr><tr><td><code>onprogress</code></td><td>在读取数据块时周期性地触发。</td></tr><tr><td><code>onload</code></td><td>在读取操作成功完成时触发。</td></tr><tr><td><code>onabort</code></td><td>在读取操作被中止时触发。</td></tr><tr><td><code>onerror</code></td><td>在读取操作出错时触发。</td></tr><tr><td><code>onloadend</code></td><td>在读取操作完成时触发，无论成功或失败（包括被中止）。</td></tr></tbody></table>
<pre><code class="hljs language-html" lang="html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>FileReader Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Upload and Read a Text File<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"fileInput"</span> <span class="hljs-attr">accept</span>=<span class="hljs-string">".txt"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"fileContent"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"white-space: pre-wrap; margin-top: 20px;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'fileInput'</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'change'</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {
        <span class="hljs-keyword">const</span> file = event.<span class="hljs-property">target</span>.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];
        <span class="hljs-keyword">if</span> (!file) {
          <span class="hljs-keyword">return</span>;
        }

        <span class="hljs-keyword">const</span> reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>();

        <span class="hljs-comment">// 监听文件读取成功事件</span>
        reader.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) {
          <span class="hljs-keyword">const</span> content = e.<span class="hljs-property">target</span>.<span class="hljs-property">result</span>;
          <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'fileContent'</span>).<span class="hljs-property">textContent</span> = content;
        };

        <span class="hljs-comment">// 监听文件读取出错事件</span>
        reader.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) {
          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'Error reading file:'</span>, e.<span class="hljs-property">target</span>.<span class="hljs-property">error</span>);
        };

        <span class="hljs-comment">// 以文本格式读取文件</span>
        reader.<span class="hljs-title function_">readAsText</span>(file);
      });

    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>
</code></pre>
<h2 data-id="heading-11">Base64</h2>
<h3 data-id="heading-12">术语解释</h3>
<p>上面的 Blob、File 都是Web API，而 Base64 是一种方法，不是 Web API。</p>
<p>术语解释：</p>
<p>Base64 是一种用于将二进制数据编码为 ASCII 字符串的表示方法。它常用于在需要<strong>通过文本数据传输二进制数据</strong>的场合，例如在 URL、电子邮件以及 JSON 数据中嵌入图像或文件。</p>
<h3 data-id="heading-13">Base64 编码原理</h3>
<ol>
<li><strong>基本字符集</strong>：Base64 使用 64 个可打印字符来表示二进制数据。这些字符包括：</li>
</ol>
<ul>
<li>
<ul>
<li>大写字母 A-Z（26 个字符）</li>
<li>小写字母 a-z（26 个字符）</li>
<li>数字 0-9（10 个字符）</li>
<li>加号 (+) 和斜杠 (/)（2 个字符）</li>
</ul>
</li>
</ul>
<ol start="2">
<li><strong>数据分组</strong>：Base64 将输入的二进制数据分成 24 位（3 字节）一组，然后将这 24 位分为 4 个 6 位的块。每个 6 位的块被转换为一个 Base64 字符。</li>
<li><strong>填充字符</strong>：如果原始数据的字节数不是 3 的倍数，Base64 编码会在末尾添加一个或两个等号 (=) 作为填充，以确保输出字符数是 4 的倍数。</li>
</ol>
<h3 data-id="heading-14">示例</h3>
<p>将字符串 "Hello" 编码为 Base64：</p>
<ol>
<li>首先，将字符串转换为二进制：</li>
</ol>
<ul>
<li>
<ul>
<li>H: 01001000</li>
<li>e: 01100101</li>
<li>l: 01101100</li>
<li>l: 01101100</li>
<li>o: 01101111</li>
</ul>
</li>
</ul>
<ol start="2">
<li>将这些二进制数据合并并分为 6 位的块：</li>
</ol>
<ul>
<li>
<ul>
<li>010010 000110 010101 101100 011011 000110 1111</li>
</ul>
</li>
</ul>
<ol start="3">
<li>根据 Base64 字符集转换为字符：</li>
</ol>
<ul>
<li>
<ul>
<li>010010 -&gt; S</li>
<li>000110 -&gt; G</li>
<li>010101 -&gt; V</li>
<li>101100 -&gt; s</li>
<li>011011 -&gt; b</li>
<li>000110 -&gt; G</li>
<li>1111 -&gt; 8（由于不足 6 位，需要填充）</li>
</ul>
</li>
</ul>
<ol start="4">
<li>最终的 Base64 编码为 "SGVsbG8="。</li>
</ol>
<h3 data-id="heading-15">Base64 的应用场景</h3>
<ul>
<li><strong>嵌入图像</strong>：在 HTML 或 CSS 文件中直接嵌入图像数据，避免额外的 HTTP 请求。</li>
<li><strong>数据传输</strong>：在 JSON 或 XML 中传输二进制数据时，使用 Base64 将数据编码为文本格式。</li>
<li><strong>电子邮件</strong>：在 MIME 邮件中，Base64 用于编码二进制附件。</li>
</ul>
<h3 data-id="heading-16">总结</h3>
<p>Base64 是一种将二进制数据编码为文本格式的方法，广泛用于需要通过文本传输二进制数据的场合。虽然编码后的数据会比原始数据大约大 33%，但它保证了数据在传输过程中的完整性和可读性。</p>
<h2 data-id="heading-17">URL.createObjectURL()</h2>
<h3 data-id="heading-18">基本使用</h3>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FURL" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/API/URL" ref="nofollow noopener noreferrer">URL</a> 接口的提供了<code>createObjectURL()</code> 静态方法用于生成临时 URL ，它可以用来表示一个 <code>File</code>、<code>Blob</code> 或者 <code>MediaSource（基本被废弃）</code> 对象。允许开发者通过 URL 引用本地的文件或数据，而不需要将其上传到服务器。</p>
<p>这个 URL 生命周期与其创建时所在窗口的 document 绑定在一起，浏览器会在卸载文档时自动释放对象 URL，然而，为了优化性能和内存使用，如果在安全时间内可以明确卸载，就应该卸载，这时需手动调用<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FURL%2FrevokeObjectURL_static" target="_blank" title="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/revokeObjectURL_static" ref="nofollow noopener noreferrer">revokeObjectURL()</a>。</p>
<h3 data-id="heading-19">使用场景</h3>
<ul>
<li>预览文件：用户上传文件后，可以使用 <code>createObjectURL()</code> 生成一个 URL 来在浏览器中预览图像、视频或音频。</li>
<li>动态生成内容：在不需要持久化存储的情况下，使用 Blob 对象动态生成内容并通过 URL 引用。</li>
</ul>
<h3 data-id="heading-20">示例</h3>
<pre><code class="hljs language-html" lang="html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Image Preview<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Upload and Preview Image<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"fileInput"</span> <span class="hljs-attr">accept</span>=<span class="hljs-string">"image/*"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"preview"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"margin-top: 20px;"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"imagePreview"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">""</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"Image Preview"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"max-width: 100%; display: none;"</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'fileInput'</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'change'</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {
        <span class="hljs-keyword">const</span> file = event.<span class="hljs-property">target</span>.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];
        <span class="hljs-keyword">if</span> (!file) {
          <span class="hljs-keyword">return</span>;
        }

        <span class="hljs-comment">// 生成一个 URL 用于引用文件</span>
        <span class="hljs-keyword">const</span> imageUrl = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(file);

        <span class="hljs-comment">// 显示图像预览</span>
        <span class="hljs-keyword">const</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'imagePreview'</span>);
        img.<span class="hljs-property">src</span> = imageUrl;
        img.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">'block'</span>;

        img.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {
          <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">revokeObjectURL</span>(imageUrl);
        };
      });

    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>
</code></pre>
<h2 data-id="heading-21">ArrayBuffer、TypedArray 、DataView</h2>
<h3 data-id="heading-22">基本使用</h3>
<ol>
<li><strong>ArrayBuffer</strong>：</li>
</ol>
<ul>
<li><code>ArrayBuffer</code> 是一种用于表示通用的、固定长度的二进制数据块的对象。它实际上只是一个字节数组，不能直接操作数据，它本身不提供读取或写入数据的方法。</li>
<li><code>ArrayBuffer</code> 更多的是作为底层的二进制数据存储，是所有其他视图（如 <code>TypedArray</code> 和 <code>DataView</code>）的基础。</li>
</ul>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 创建一个 ArrayBuffer</span>
<span class="hljs-keyword">const</span> buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(<span class="hljs-number">8</span>); <span class="hljs-comment">// 8 字节的缓冲区</span>

<span class="hljs-comment">// 查看 ArrayBuffer 的大小</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(buffer.<span class="hljs-property">byteLength</span>); <span class="hljs-comment">// 输出 8</span>
</code></pre>
<ol start="2">
<li><strong>TypedArray</strong>：</li>
</ol>
<ul>
<li><code>TypedArray</code> 是一组类型化数组的视图，提供了对底层 <code>ArrayBuffer</code> 的数据进行读取和写入的能力。它们提供了类似于普通数组的接口，但操作的是二进制数据。</li>
<li>有多种类型的 <code>TypedArray</code>，如 <code>Int8Array</code>、<code>Uint8Array</code>、<code>Uint8ClampedArray</code>、<code>Int16Array</code>、<code>Uint16Array</code>、<code>Int32Array</code>、<code>Uint32Array</code>、<code>Float32Array</code> 和 <code>Float64Array</code>。每种类型的数组视图提供了针对特定数据类型的操作方法。</li>
<li>适用于大量相同类型数据的操作。</li>
</ul>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 1. 直接创建一个 TypedArray，会自动创建一个 ArrayBuffer</span>
<span class="hljs-keyword">let</span> int8Array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Int8Array</span>(<span class="hljs-number">4</span>);
<span class="hljs-comment">// 写入数据</span>
int8Array[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;
int8Array[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;

<span class="hljs-comment">// 2. 使用现有的 ArrayBuffer 创建一个 TypedArray</span>
<span class="hljs-keyword">let</span> buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(<span class="hljs-number">8</span>);
<span class="hljs-keyword">const</span> int32View = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Int32Array</span>(buffer, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 创建一个 Int32Array 视图 从偏移量 0 开始，长度为 2</span>
<span class="hljs-comment">// 写入数据</span>
int32View[<span class="hljs-number">0</span>] = <span class="hljs-number">12345</span>;
int32View[<span class="hljs-number">1</span>] = <span class="hljs-number">67890</span>;
<span class="hljs-comment">// 读取数据</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(int32View[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 输出 12345</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(int32View[<span class="hljs-number">1</span>]); <span class="hljs-comment">// 输出 67890</span>
</code></pre>
<ol start="3">
<li>DataView：</li>
</ol>
<ul>
<li><code>DataView</code> 是另一个视图，用于从 <code>ArrayBuffer</code> 中读取和写入不同类型的数据。</li>
<li>与 <code>TypedArray</code> 不同的是，<code>DataView</code> 允许在同一 <code>ArrayBuffer</code> 上进行多种类型的操作。</li>
<li>适用于需要在同一个 <code>ArrayBuffer</code> 上进行多种类型操作的情况。</li>
</ul>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 创建一个 ArrayBuffer</span>
<span class="hljs-keyword">const</span> buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(<span class="hljs-number">8</span>);

<span class="hljs-comment">// 创建一个 DataView</span>
<span class="hljs-keyword">const</span> dataView = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataView</span>(buffer);

<span class="hljs-comment">// 写入数据</span>
dataView.<span class="hljs-title function_">setInt32</span>(<span class="hljs-number">0</span>, <span class="hljs-number">12345</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 从偏移量 0 开始，小端模式</span>
dataView.<span class="hljs-title function_">setFloat32</span>(<span class="hljs-number">4</span>, <span class="hljs-number">3.14159</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 从偏移量 4 开始，小端模式</span>

<span class="hljs-comment">// 读取数据</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dataView.<span class="hljs-title function_">getInt32</span>(<span class="hljs-number">0</span>, <span class="hljs-literal">true</span>)); <span class="hljs-comment">// 输出 12345</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dataView.<span class="hljs-title function_">getFloat32</span>(<span class="hljs-number">4</span>, <span class="hljs-literal">true</span>)); <span class="hljs-comment">// 输出 3.14159</span>
</code></pre>
<h3 data-id="heading-23">完整示例</h3>
<pre><code class="hljs language-html" lang="html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Binary Data Handling<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Binary Data Handling<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"writeData"</span>&gt;</span>Write Data<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">pre</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"output"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'writeData'</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'click'</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {
        <span class="hljs-title function_">handleBinaryData</span>();
      });

      <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleBinaryData</span>(<span class="hljs-params"></span>) {
        <span class="hljs-comment">// 创建一个 ArrayBuffer</span>
        <span class="hljs-keyword">const</span> buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(<span class="hljs-number">16</span>);

        <span class="hljs-comment">// 创建一个 DataView</span>
        <span class="hljs-keyword">const</span> dataView = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataView</span>(buffer);

        <span class="hljs-comment">// 写入数据</span>
        dataView.<span class="hljs-title function_">setInt32</span>(<span class="hljs-number">0</span>, <span class="hljs-number">12345</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 从偏移量 0 开始，小端模式</span>
        dataView.<span class="hljs-title function_">setFloat32</span>(<span class="hljs-number">4</span>, <span class="hljs-number">3.14159</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 从偏移量 4 开始，小端模式</span>
        dataView.<span class="hljs-title function_">setUint8</span>(<span class="hljs-number">8</span>, <span class="hljs-number">255</span>); <span class="hljs-comment">// 从偏移量 8 开始，单字节无符号整数</span>
        dataView.<span class="hljs-title function_">setInt16</span>(<span class="hljs-number">9</span>, <span class="hljs-number">1234</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 从偏移量 9 开始，小端模式</span>

        <span class="hljs-comment">// 创建 TypedArray 视图</span>
        <span class="hljs-keyword">const</span> int32View = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Int32Array</span>(buffer, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>);
        <span class="hljs-keyword">const</span> float32View = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>(buffer, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>);
        <span class="hljs-keyword">const</span> uint8View = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(buffer, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>);
        <span class="hljs-keyword">const</span> int16View = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Int16Array</span>(buffer, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>);

        <span class="hljs-comment">// 读取数据</span>
        <span class="hljs-keyword">const</span> output = <span class="hljs-string">`
        Int32: <span class="hljs-subst">${int32View[<span class="hljs-number">0</span>]}</span>, <span class="hljs-subst">${int32View[<span class="hljs-number">1</span>]}</span>
        Float32: <span class="hljs-subst">${float32View[<span class="hljs-number">0</span>]}</span>
        Uint8: <span class="hljs-subst">${uint8View[<span class="hljs-number">0</span>]}</span>, <span class="hljs-subst">${uint8View[<span class="hljs-number">1</span>]}</span>
        Int16: <span class="hljs-subst">${int16View[<span class="hljs-number">0</span>]}</span>
    `</span>;

        <span class="hljs-comment">// 显示输出</span>
        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'output'</span>).<span class="hljs-property">textContent</span> = output;
      }

    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>
</code></pre>
<h2 data-id="heading-24">总结</h2>
<p>Blob、File 等等就是各种类型文件相关的对象，背后底层一般都是用二进制存储数据，而ArrayBuffer、TypedArray、DataView就是可以让你直接定义与操作二进制数组，而 Base64 又可以将二进制转成字符串文本进行存储，遇到图片展示需求就可以直接内联显示或者使用URL提供的静态方法createObjectURL()生成临时 url 来呈现也可以。</p></div></div>