
    <a name="top"></a>
    <h2><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zengzuo613/p/18943037" title="发布于 2025-06-27 08:09">
    <span role="heading" aria-level="2">MySQL 字符集、排序规则与查询关系详解</span>
    

</a>
</h2>
    <small>
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-27 08:09">2025-06-27 08:09</span>&nbsp;
<a href="https://www.cnblogs.com/zengzuo613">曾左</a>&nbsp;
阅读(<span id="post_view_count">9</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18943037);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18943037', targetLink: 'https://www.cnblogs.com/zengzuo613/p/18943037', title: 'MySQL 字符集、排序规则与查询关系详解' })">举报</a>
</small>
    <div class="entry">
        <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>MySQL 查询是否区分大小写及重音敏感，取决于创建时指定的字符集（character set）和排序规则（collation）。</p>
<p>（1）字符集（Character Set）：规定可存储的字符，如 utf8、utf8mb4、latin1 等。</p>
<p>（2）排序规则（Collation）：确定字符比较与排序规则，如是否区分大小写、重音等。</p>
<p>注意：</p>
<p>（1）每个排序规则必须对应特定的字符集，如 utf8mb4_bin 仅用于 utf8mb4 字符集。</p>
<p>（2）“重音敏感”（Accent Sensitive）：指排序规则将带重音符号的字母视为与基本字母相同或不同的特性，如 'cafe' 与 'café'。</p>
<p>在 MySQL 5.7 中，默认字符集和排序规则是 latin1 和 latin1_swedish_ci。实际应用里，建议使用 utf8mb4 字符集以支持完整 Unicode 字符（含 emoji），并采用默认对应的 utf8mb4_general_ci 排序规则，该规则下查询不区分大小写。</p>
<h2 id="一常见排序规则">一、常见排序规则</h2>
<table>
<thead>
<tr>
<th>排序规则</th>
<th>对应字符集</th>
<th>大小写敏感</th>
<th>重音敏感</th>
<th>适用版本</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>utf8_general_ci</td>
<td>utf8</td>
<td>❌</td>
<td>❌</td>
<td>所有版本</td>
<td>基本 Unicode 比较</td>
</tr>
<tr>
<td>utf8mb4_general_ci</td>
<td>utf8mb4</td>
<td>❌</td>
<td>❌</td>
<td>5.5.3+</td>
<td>默认的 utf8mb4 排序规则</td>
</tr>
<tr>
<td>latin1_swedish_ci</td>
<td>latin1</td>
<td>❌</td>
<td>❌</td>
<td>所有版本</td>
<td>传统西欧默认排序规则</td>
</tr>
<tr>
<td>utf8mb4_unicode_ci</td>
<td>utf8mb4</td>
<td>❌</td>
<td>✅</td>
<td>5.5.3+</td>
<td>符合 Unicode 标准的更准确排序</td>
</tr>
<tr>
<td>utf8mb4_0900_ai_ci</td>
<td>utf8mb4</td>
<td>❌</td>
<td>❌</td>
<td>8.0+</td>
<td>基于 Unicode 9.0 标准</td>
</tr>
<tr>
<td>utf8_bin</td>
<td>utf8</td>
<td>✅</td>
<td>✅</td>
<td>所有版本</td>
<td>二进制比较（严格区分大小写）</td>
</tr>
<tr>
<td>utf8mb4_bin</td>
<td>utf8mb4</td>
<td>✅</td>
<td>✅</td>
<td>5.5.3+</td>
<td>utf8mb4 的二进制比较</td>
</tr>
<tr>
<td>utf8mb4_unicode_cs</td>
<td>utf8mb4</td>
<td>✅</td>
<td>✅</td>
<td>5.5.3+</td>
<td>已弃用，改用 utf8mb4_bin</td>
</tr>
<tr>
<td>utf8mb4_0900_as_cs</td>
<td>utf8mb4</td>
<td>✅</td>
<td>✅</td>
<td>8.0+</td>
<td>严格区分大小写和重音</td>
</tr>
</tbody>
</table>
<p>表格说明：</p>
<p>（1）可通过排序规则后缀判断其是否支持大小写和重音敏感，ci、cs、ai、as 分别表示不区分大小写、区分大小写、不区分重音和区分重音。</p>
<p>（2）带 bin 后缀的排序规则基于二进制（Binary）比较，严格区分和重音。</p>
<h2 id="二设置方法">二、设置方法</h2>
<h3 id="1-数据库实例级">1. 数据库实例级</h3>
<pre><code class="language-conf"># my.conf 或 my.ini
[mysqld]
character-set-server=utf8mb4
collation-server=utf8mb4_general_ci
</code></pre>
<h3 id="2-数据库级">2. 数据库级</h3>
<pre><code class="language-sql">CREATE DATABASE mydb 
  CHARACTER SET utf8mb4 
  COLLATE utf8mb4_general_ci;
</code></pre>
<h3 id="3-表级">3. 表级</h3>
<pre><code class="language-sql">CREATE TABLE case_sensitive_table (
    id INT,
    username VARCHAR(50)
) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
</code></pre>
<h3 id="4-列级">4. 列级</h3>
<pre><code class="language-sql">CREATE TABLE case_sensitive_table (
    id INT,
    username VARCHAR(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin
) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
</code></pre>
<h2 id="三设置建议">三、设置建议</h2>
<h3 id="1-注意事项">1. 注意事项</h3>
<p>（1）性能影响：使用区分大小写的比较可能会影响查询性能，混合使用不同字符集也可能影响查询优化</p>
<p>（2）存储空间：不同字符集占用的存储空间不同 (如 utf8mb4 比 latin1 占用更多空间)</p>
<p>（3）索引限制：某些情况下不同字符集的列不能直接比较或连接</p>
<p>（4）转换风险：修改已有数据的字符集前需谨慎，可能导致数据丢失或损坏</p>
<h3 id="2-最佳实践">2. 最佳实践</h3>
<p>（1）尽量保持各表及表内各列字符集和排序规则一致，除非有特殊需求</p>
<p>（2）修改已有数据的字符集前先备份数据</p>
<p>（3）对于需要区分大小写的列 (如用户名、验证码)，明确指定使用<code>_bin</code>排序规则</p>
<p>（4）应文档化说明使用不同字符集/排序规则的原因</p>
<p>（5）MySQL 8.0 默认使用 utf8mb4 + utf8mb4_0900_ai_ci，它符合更新的 Unicode 标准且性能更优</p>
<h2 id="四查看方法">四、查看方法</h2>
<pre><code class="language-sql">## 查看数据库字符集和排序规则

SHOW VARIABLES LIKE 'character_set_server';
SHOW VARIABLES LIKE 'collation_server';

## 查看某表字符集和序规则
SHOW CREATE TABLE `table_name`; # CHARSET 后面为字符集
SHOW TABLE STATUS LIKE 'table_name'; # Collation 列表示排序规则
</code></pre>
<h2 id="五查询时如何强制区分大小写">五、查询时如何强制区分大小写</h2>
<h3 id="1-强制方法">1. 强制方法</h3>
<p>如遇到不支持区分大小写的排序规则，可使用以下方法强制启用：</p>
<p>（1）使用 COLLATE 指定区分大小写的排序规则</p>
<pre><code class="language-sql">SELECT * FROM table_name WHERE column_name COLLATE utf8mb4_bin = 'Value'; -- utf8mb4_bin 需适配字符集
</code></pre>
<p>（2）使用 BINARY 运算符</p>
<pre><code class="language-sql">SELECT * FROM table_name WHERE BINARY column_name = 'Value';
</code></pre>
<p>（3）使用 LIKE BINARY 语法</p>
<pre><code class="language-sql">SELECT * FROM table_name WHERE column_name LIKE BINARY 'Value';
</code></pre>
<p>（4）使用区分大小写的函数</p>
<pre><code class="language-sql">SELECT * FROM table_name WHERE CAST(column_name AS BINARY) = CAST('Value' AS BINARY);
</code></pre>
<p>（5）修改列或表的字符集排序规则</p>
<pre><code class="language-sql">-- 修改列的排序规则
ALTER TABLE table_name MODIFY column_name VARCHAR(255) COLLATE utf8mb4_bin;

-- 修改表的默认排序规则
ALTER TABLE table_name COLLATE utf8mb4_bin;
</code></pre>
<h3 id="2-各方法对比">2. 各方法对比</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>是否利用索引</th>
<th>持久性</th>
<th>字符集兼容性</th>
<th>推荐场景</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>使用 COLLATE 指定区分大小写的排序规则</td>
<td>✅ 是</td>
<td>仅当前查询</td>
<td>需匹配列字符集</td>
<td>临时区分大小写查询</td>
<td>需显式指定，字符集需一致</td>
</tr>
<tr>
<td>使用 BINARY 运算符</td>
<td>⚠️ 部分场景</td>
<td>仅当前查询</td>
<td>任意字符集</td>
<td>快速兼容性写法</td>
<td>某些版本无法利用索引</td>
</tr>
<tr>
<td>使用 LIKE BINARY 语法</td>
<td>⚠️ 部分场景</td>
<td>仅当前查询</td>
<td>任意字符集</td>
<td>不推荐（语义混淆）</td>
<td>性能差，模糊匹配语义不清晰</td>
</tr>
<tr>
<td>使用区分大小写的函数</td>
<td>⚠️ 部分场景</td>
<td>仅当前查询</td>
<td>任意字符集</td>
<td>极特殊场景</td>
<td>性能最差，语法冗长</td>
</tr>
<tr>
<td>修改列或表的字符集排序规则</td>
<td>✅ 是</td>
<td>✅ 永久生效</td>
<td>需匹配列字符集</td>
<td>需要长期区分大小写的字段</td>
<td>修改表结构可能锁表</td>
</tr>
</tbody>
</table>
<h3 id="3-使用建议">3. 使用建议</h3>
<p>如仅当前查询需区分大小写，建议<strong>使用 COLLATE 指定区分大小写的排序规则</strong>；如需永久生效，建议<strong>修改列或表的字符集排序规则</strong>。</p>

</div>
<div class="clear"></div>

        <div class="clear"></div>
        
</div>
    <ul class="postmetadata">
        <vc:categories-tags blog-app="zengzuo613" blog-id="714768" post-id="18943037"></vc:categories-tags>
    </ul>
