
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/czwy/p/18641846" title="发布于 2024-12-30 17:43">
    <span role="heading" aria-level="2">Raspberry pi 上部署调试.Net的IoT程序</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>树莓派（Raspberry pi）是一款基于ARM 架构的单板计算机（Single Board Computer），可以运行各种 Linux 操作系统，其官方推荐使用的 Raspberry Pi OS 也是基于Debian开发的。因其低能耗、便携小巧、GPIO等特性，可用于IoT应用开发。.NET可在各种平台和体系结构上运行，并提供了 IoT 库支持与传感器、模数转换器、舵机、FRID这些专用硬件设备交互，使 .NET在树莓派运行 IoT 应用成为可能。</p>
<h2 id="部署net的iot程序">部署.NET的IoT程序</h2>
<p>通常情况，在本机开发调试是最佳选择，但是树莓派的低能耗也制约了其性能，例如本文中相关操作是在 Raspberry Pi Zero 2 W 上进行的，其配备的Broadcom BCM2710A1 是一款四核 64 位 SoC（Arm Cortex-A53 @ 1GHz）的CPU，内存为512MB，在上边安装IDE编码和调试不太现实，因此需要在开发计算机上开发应用，然后将应用部署到树莓派上进行远程调试。</p>
<h3 id="发布程序">发布程序</h3>
<p>完成程序编码后，在项目名称右键菜单中选择“发布”，然后在发布配置窗中选择目标为文件夹，然后下一步特定目标依旧选择文件夹。<br>
<img src="https://img2024.cnblogs.com/blog/3056716/202412/3056716-20241230173519458-2034070973.png" alt="image" loading="lazy"><br>
完成后进行配置文件设置。配置选择<code>Debug|Any CPU</code> ；目标框架根据实际情况选择，这里选择了 <code>net8.0</code> ；部署模式可以选择依赖框架或者独立，由于远程调试时需要在树莓派上安装 .NET 运行时，所以这里选择依赖框架，可以减少程序大小；前边提到树莓派是 ARM 架构的，最新的操作系统也是64位的，所以目标运行时选择 <code>linux-arm64</code> 。<br>
<img src="https://img2024.cnblogs.com/blog/3056716/202412/3056716-20241230174506038-647190623.png" alt="image" loading="lazy"></p>
<p>配置完成后，点击“发布”按钮，程序会发布到配置的目标位置。</p>
<h3 id="部署到树莓派">部署到树莓派</h3>
<h4 id="树莓派上安装配置net">树莓派上安装配置.NET</h4>
<p>首先使用&nbsp;<a href="https://learn.microsoft.com/zh-cn/dotnet/core/tools/dotnet-install-script" target="_blank" rel="noopener nofollow">dotnet-install 脚本</a>&nbsp;在树莓派上安装 .NET。</p>
<pre><code>curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel LTS
</code></pre>
<blockquote>
<p><code>--channel</code>参数是指定安装的源通道。 可能的值为：</p>
<ul>
<li><code>STS</code>：最新的标准期限支持版本。</li>
<li><code>LTS</code>：最新的长期支持版本。</li>
<li>表示特定版本的由两部分构成的 A.B 格式版本（例如&nbsp;<code>3.1</code>&nbsp;或&nbsp;<code>8.0</code>）。</li>
<li>A.B.Cxx 格式的三部分版本，表示特定的 SDK 版本（例如 8.0.1xx 或 8.0.2xx）。 自 5.0 版本起可用。</li>
</ul>
</blockquote>
<p>然后将&nbsp;<code>DOTNET_ROOT</code>&nbsp;环境变量和 dotnet 目录添加到&nbsp;<code>$PATH</code></p>
<pre><code class="language-bash">echo 'export DOTNET_ROOT=$HOME/.dotnet' &gt;&gt; ~/.bashrc
echo 'export PATH=$PATH:$HOME/.dotnet' &gt;&gt; ~/.bashrc
source ~/.bashrc
</code></pre>
<h4 id="部署net程序">部署.NET程序</h4>
<p>Windows 10 (build 1809）之后的版本具有 OpenSSH，其中包括预安装的&nbsp;<code>scp</code>。可以使用scp命令把发布的文件拷贝到树莓派指定目录：</p>
<pre><code class="language-powershell">scp -r F:\Source\git\mfrcc522Sample\mfrcc522Sample\bin\Debug\net8.0\publish\linux-arm64 john@192.168.3.58:/home/john/Downloads/MFRC522
</code></pre>
<p>scp命令格式如下：</p>
<pre><code>scp [选项] [[用户@]源主机:]文件路径 [[用户@]目标主机:]文件路径
</code></pre>
<p>常用选项包括：</p>
<ul>
<li><code>-C</code>：允许压缩数据，提高传输效率。</li>
<li><code>-p</code>：保留文件的修改时间、访问时间和权限。</li>
<li><code>-r</code>：递归复制整个目录。</li>
<li><code>-q</code>：静默模式，不显示传输过程中的信息。</li>
<li><code>-v</code>：详细模式，显示传输过程中的详细信息。</li>
</ul>
<p>进入程序目录，给程序添加可执行权限后运行程序</p>
<pre><code class="language-bash">cd Downloads/MFRC522/linux-arm64
chmod 755 mfrcc522Sample
./mfrcc522Sample
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3056716/202412/3056716-20241230173550262-1631977227.png" alt="image" loading="lazy"></p>
<h3 id="远程调试">远程调试</h3>
<p>程序在树莓派上运行后，在开发电脑上打开visual Studio，选择“调试”&gt;“附加到进程…”，或者用快捷键<code>ctrl+alt+p</code> 打开"附加到进程"窗口，连接类型选择"SSH"，连接目标输入树莓派的ip，其格式为<code>&lt;username&gt;@&lt;IP&gt;</code>，点击查找按钮连接上树莓派后，进程列表会显示所有进程，选中目标进程。右下角代码类型下拉框选择”托管（.NET Core for unix）代码“，点击“附加”就可以开始远程调试了。<br>
<img src="https://img2024.cnblogs.com/blog/3056716/202412/3056716-20241230173639129-392669446.png" alt="image" loading="lazy"></p>
<p>接下来就可以远程调试用户代码了<br>
<img src="https://img2024.cnblogs.com/blog/3056716/202412/3056716-20241230173653212-1018128723.png" alt="image" loading="lazy"></p>
<h4 id="调试iot库源码">调试IoT库源码</h4>
<p>在调试过程中出现了IoT库报的错误，通过"F12"可以查看到源码， 想进一步调试IoT的代码，则需要启用源码调试。步骤如下：</p>
<ol>
<li>
<p>在“<strong>工具</strong>”（或“<strong>调试</strong>”）&gt;“<strong>选项</strong>”&gt;“<strong>调试</strong>”&gt;“<strong>常规</strong>”下，确保：</p>
<ul>
<li>取消选择“<strong>启用仅我的代码</strong>”。</li>
<li>选择“<strong>启用源链接支持</strong>”。<br>
<img src="https://img2024.cnblogs.com/blog/3056716/202412/3056716-20241230173707599-919110903.png" alt="image" loading="lazy"></li>
</ul>
</li>
<li>
<p>在“<strong>工具</strong>”（或“<strong>调试</strong>”）&gt;“<strong>选项</strong>”&gt;“<strong>调试</strong>”&gt;“<strong>符号</strong>”下，选择“<strong>Microsoft 符号服务器</strong>”。<br>
<img src="https://img2024.cnblogs.com/blog/3056716/202412/3056716-20241230173719682-456583505.png" alt="image" loading="lazy"></p>
</li>
</ol>
<p>调试过程中可能遇到断点处显式红心圆和警告提示：“当前不会命中断点。还没有为该文档加载任何符号。”<br>
<img src="https://img2024.cnblogs.com/blog/3056716/202412/3056716-20241230173732436-1314738781.png" alt="image" loading="lazy"></p>
<p>这时需要在导航栏选择“<strong>调试</strong>&gt;<strong>Windows</strong>&gt;<strong>模块</strong>”，检查模块是否已加载，如果显示没有加载符号，右键单击尚未加载符号的模块，点击”加载符号“，这时断点处会显示红色实心圆。<br>
<img src="https://img2024.cnblogs.com/blog/3056716/202412/3056716-20241230173743952-691597593.png" alt="image" loading="lazy"></p>
<h2 id="参考">参考</h2>
<ol>
<li><a href="https://learn.microsoft.com/zh-cn/dotnet/core/install/linux-scripted-manual#scripted-install" target="_blank" rel="noopener nofollow">在 Linux 上不使用包管理器的情况下安装 .NET - .NET | Microsoft Learn</a></li>
<li><a href="https://learn.microsoft.com/zh-cn/visualstudio/debugger/how-to-debug-dotnet-framework-source?view=vs-2022" target="_blank" rel="noopener nofollow">调试 .NET Framework 源代码 - Visual Studio (Windows) | Microsoft Learn</a></li>
<li><a href="https://learn.microsoft.com/zh-cn/troubleshoot/developer/visualstudio/debuggers/troubleshooting-breakpoints?view=vs-2022" target="_blank" rel="noopener nofollow">排查调试器中的断点问题 - Visual Studio | Microsoft Learn</a></li>
</ol>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="5.101864170638889" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-30 17:59">2024-12-30 17:43</span>&nbsp;
<a href="https://www.cnblogs.com/czwy">czwy</a>&nbsp;
阅读(<span id="post_view_count">262</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18641846" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18641846);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18641846', targetLink: 'https://www.cnblogs.com/czwy/p/18641846', title: 'Raspberry pi 上部署调试.Net的IoT程序' })">举报</a>
</div>
        