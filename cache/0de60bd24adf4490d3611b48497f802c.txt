
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/sinizu/p/18889651" title="发布于 2025-05-21 20:48">
    <span role="heading" aria-level="2">搭建阅读linux源码的舒适环境（vscode+clangd）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="准备linux源码">准备linux源码</h2>
<h3 id="linux官网下载源码压缩包">linux官网下载源码压缩包</h3>
<p><a href="" rel="noopener nofollow">https://www.kernel.org/</a></p>
<p><img src="https://img2024.cnblogs.com/blog/3570185/202505/3570185-20250521200845686-713393791.png" alt="" loading="lazy"></p>
<h3 id="解压">解压</h3>
<p>由于源码是经过两次压缩的，所以需要解压两次</p>
<pre><code>xz -d linux-6.14.7.tar.xz 
</code></pre>
<pre><code>tar xvf linux-6.14.7.tar
</code></pre>
<h2 id="编译内核">编译内核</h2>
<h3 id="生成config文件">生成.config文件</h3>
<p>假设是需要生成x86_64下的架构下的编译框架</p>
<pre><code class="language-bash">cd ~/code/linux/linux-6.14.7/
make ARCH=x86_64 defconfig
</code></pre>
<pre><code class="language-bash">sinizu@sinizu-GP65-Leopard-9SD ~/c/l/linux-6.14.7 [1]&gt; make ARCH=x86_64 defconfig                                                                                                      (base) 
  HOSTCC  scripts/basic/fixdep
  HOSTCC  scripts/kconfig/conf.o
  HOSTCC  scripts/kconfig/confdata.o
  HOSTCC  scripts/kconfig/expr.o
  LEX     scripts/kconfig/lexer.lex.c
  YACC    scripts/kconfig/parser.tab.[ch]
  HOSTCC  scripts/kconfig/lexer.lex.o
  HOSTCC  scripts/kconfig/menu.o
  HOSTCC  scripts/kconfig/parser.tab.o
  HOSTCC  scripts/kconfig/preprocess.o
  HOSTCC  scripts/kconfig/symbol.o
  HOSTCC  scripts/kconfig/util.o
  HOSTLD  scripts/kconfig/conf
*** Default configuration is based on 'x86_64_defconfig'
#
# configuration written to .config
#

</code></pre>
<p>查看.config文件，实际上就是内核的配置，是否要开启某些功能，这里咱们已经选择了默认的配置，如下所示</p>
<pre><code class="language-bash">sinizu@sinizu-GP65-Leopard-9SD ~/c/l/linux-6.14.7&gt; cat .config                                                                                                                         (base) 
#
# Automatically generated file; DO NOT EDIT.
# Linux/x86_64 6.14.7 Kernel Configuration
#
CONFIG_CC_VERSION_TEXT="gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0"
CONFIG_CC_IS_GCC=y
CONFIG_GCC_VERSION=130300
CONFIG_CLANG_VERSION=0
CONFIG_AS_IS_GNU=y
CONFIG_AS_VERSION=24200
CONFIG_LD_IS_BFD=y
CONFIG_LD_VERSION=24200
CONFIG_LLD_VERSION=0
CONFIG_RUSTC_VERSION=108600
CONFIG_RUSTC_LLVM_VERSION=190107
CONFIG_CC_CAN_LINK=y
CONFIG_CC_CAN_LINK_STATIC=y
CONFIG_CC_HAS_ASM_GOTO_OUTPUT=y
CONFIG_CC_HAS_ASM_GOTO_TIED_OUTPUT=y
CONFIG_TOOLS_SUPPORT_RELR=y
CONFIG_CC_HAS_ASM_INLINE=y
CONFIG_CC_HAS_NO_PROFILE_FN_ATTR=y
CONFIG_LD_CAN_USE_KEEP_IN_OVERLAY=y
CONFIG_RUSTC_HAS_COERCE_POINTEE=y
CONFIG_PAHOLE_VERSION=0
CONFIG_IRQ_WORK=y
CONFIG_BUILDTIME_TABLE_SORT=y
CONFIG_THREAD_INFO_IN_TASK=y
</code></pre>
<h3 id="开始编译">开始编译</h3>
<p>由于内核项目中make工程已经提供了生成compile_commands.json文件的配置，所以可以直接使用，只需指定框架即可</p>
<pre><code class="language-bash">make ARCH=x86_64 compile_commands.json                                                                                              
</code></pre>
<pre><code class="language-bash">sinizu@sinizu-GP65-Leopard-9SD ~/c/l/linux-6.14.7&gt; make ARCH=x86_64 compile_commands.json                                                                                              (base) 
  SYSHDR  arch/x86/include/generated/uapi/asm/unistd_32.h
  SYSHDR  arch/x86/include/generated/uapi/asm/unistd_64.h
  SYSHDR  arch/x86/include/generated/uapi/asm/unistd_x32.h
  SYSTBL  arch/x86/include/generated/asm/syscalls_32.h
  SYSHDR  arch/x86/include/generated/asm/unistd_32_ia32.h
  SYSHDR  arch/x86/include/generated/asm/unistd_64_x32.h
  SYSTBL  arch/x86/include/generated/asm/syscalls_64.h
  HOSTCC  arch/x86/tools/relocs_32.o
  HOSTCC  arch/x86/tools/relocs_64.o
  HOSTCC  arch/x86/tools/relocs_common.o
  HOSTLD  arch/x86/tools/relocs
  HOSTCC  scripts/selinux/mdp/mdp
  HOSTCC  scripts/kallsyms
  HOSTCC  scripts/sorttable

</code></pre>
<h3 id="检查是否生产compile_commandjson">检查是否生产compile_command.json</h3>
<pre><code class="language-bash">...
  CC      arch/x86/pci/mmconfig_64.o
  CC      arch/x86/pci/direct.o
  CC      arch/x86/pci/mmconfig-shared.o
  CC      arch/x86/pci/fixup.o
  CC      arch/x86/pci/acpi.o
  CC      arch/x86/pci/legacy.o
  CC      arch/x86/pci/irq.o
  CC      arch/x86/pci/common.o
  CC      arch/x86/pci/early.o
  CC      arch/x86/pci/bus_numa.o
  CC      arch/x86/pci/amd_bus.o
  AR      arch/x86/pci/built-in.a
  CC      arch/x86/power/cpu.o
  CC      arch/x86/power/hibernate_64.o
  AS      arch/x86/power/hibernate_asm_64.o
  CC      arch/x86/power/hibernate.o
  AR      arch/x86/power/built-in.a
  CC      arch/x86/video/video-common.o
  AR      arch/x86/video/built-in.a
  AR      built-in.a
  AR      vmlinux.a
  GEN     compile_commands.json
sinizu@sinizu-GP65-Leopard-9SD ~/c/l/linux-6.14.7&gt; ls -lh                                                                                                                              (base) 
总计 8.4M
drwxrwxr-x  23 sinizu sinizu 4.0K  5月 18 14:26 arch/
drwxrwxr-x   3 sinizu sinizu 4.0K  5月 21 20:12 block/
-rw-rw-r--   1 sinizu sinizu 238K  5月 21 20:27 built-in.a
drwxrwxr-x   2 sinizu sinizu 4.0K  5月 21 20:07 certs/
-rw-rw-r--   1 sinizu sinizu 6.8M  5月 21 20:27 compile_commands.json
-rw-rw-r--   1 sinizu sinizu  496  5月 18 14:26 COPYING
-rw-rw-r--   1 sinizu sinizu 104K  5月 18 14:26 CREDITS
</code></pre>
<p>可见编译参数的json文件已经生成。</p>
<h2 id="准备vscode环境">准备vscode环境</h2>
<h3 id="下载vscode">下载vscode</h3>
<p><a href="" rel="noopener nofollow">https://code.visualstudio.com/</a><br>
按照官网下载软件，并进行安装，安装过程略</p>
<h3 id="安装clangd插件">安装clangd插件</h3>
<p>插件市场搜索clangd,直接进行安装即可<br>
<img src="https://img2024.cnblogs.com/blog/3570185/202505/3570185-20250521203845381-1301537050.png" alt="" loading="lazy"></p>
<h2 id="准备clangd">准备clangd</h2>
<h3 id="安装clangd">安装clangd</h3>
<p>github下载最新版本的clangd<br>
<a href="" rel="noopener nofollow">https://github.com/clangd/clangd/releases/tag/18.1.3</a></p>
<h3 id="解压将clangd的可执行文件配置到vscode中">解压将clangd的可执行文件配置到vscode中</h3>
<p>假设解压后，我的clangd位于如下路径</p>
<pre><code class="language-bash">/home/sinizu/clangd_18.1.3/bin/clangd
</code></pre>
<p>打开vscode，按下shift+ctrl+p,选择用户配置，如下所示<br>
<img src="https://img2024.cnblogs.com/blog/3570185/202505/3570185-20250521202917254-1979353520.png" alt="" loading="lazy"><br>
接下来，将如下的配置行写到配置的json文件中</p>
<pre><code class="language-bash">"clangd.path": "/home/sinizu/clangd_18.1.3/bin/clangd",
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3570185/202505/3570185-20250521202849835-901864413.png" alt="" loading="lazy"></p>
<h2 id="大功告成">大功告成</h2>
<p>将linux文件夹打开，随便打开一个文件，可以看到clangd正在索引<br>
<img src="https://img2024.cnblogs.com/blog/3570185/202505/3570185-20250521203214010-108601689.png" alt="" loading="lazy"></p>
<p>等待索引完毕，就可以直接ctrl+鼠标左键进行代码跳转了！</p>
<h2 id="其他说明">其他说明</h2>
<h3 id="可选择的内核配置">可选择的内核配置</h3>
<ul>
<li>自行配置内核参数（图像界面）</li>
</ul>
<pre><code class="language-bash">make ARCH=x86_64 menuconfig  # 终端文本界面
# 或
make ARCH=x86_64 xconfig     # 图形界面（需安装 Qt）
</code></pre>
<ul>
<li>和当前操作系统一样的配置</li>
</ul>
<pre><code class="language-bash">cp /boot/config-$(uname -r) .config 
</code></pre>
<h3 id="缺少工具安装">缺少工具安装</h3>
<p>如果报错缺少工具（如 menuconfig），安装依赖：</p>
<pre><code class="language-bash">sudo apt-get install build-essential ncurses-dev libssl-dev  # Ubuntu/Debian
# 或
sudo dnf install ncurses-devel openssl-devel                 # Fedora
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5980633594016204" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-21 20:49">2025-05-21 20:48</span>&nbsp;
<a href="https://www.cnblogs.com/sinizu">sinizu</a>&nbsp;
阅读(<span id="post_view_count">53</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18889651);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18889651', targetLink: 'https://www.cnblogs.com/sinizu/p/18889651', title: '搭建阅读linux源码的舒适环境（vscode+clangd）' })">举报</a>
</div>
        