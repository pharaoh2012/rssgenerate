
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/sunkaixuan/p/18740748" title="发布于 2025-02-27 12:42">
    <span role="heading" aria-level="2">SQLSugar 支持 TDengine 超级表的使用指南</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>TDengine 是一款高性能、分布式的时序数据库，广泛应用于物联网、工业互联网等领域。其核心概念之一是<strong>超级表（Super Table）</strong>，它类似于传统数据库中的表结构模板，允许用户通过标签（Tag）动态创建和管理子表。SQLSugar 作为一款流行的 ORM 框架，提供了对 TDengine 超级表的支持，使得开发者能够更方便地操作 TDengine 数据库。</p>
<p>本文将介绍如何使用 SQLSugar 操作 TDengine 的超级表，包括创建超级表、查询子表、插入数据等操作。</p>
<h2>1. 创建超级表</h2>
<p>在使用 TDengine 的超级表之前，首先需要在数据库中创建超级表。SQLSugar 提供了&nbsp;<code>CodeFirst</code>&nbsp;模式，可以通过代码自动创建表结构。</p>
<p><strong>NUGET安装</strong></p>
<p>SqlSugar.TDengineCore 最新<br>SqlSugarCore&nbsp;&nbsp;最新</p>
<p><strong>创建数据库对象</strong></p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">//程序启动时加入
InstanceFactory.CustomAssemblies =
new System.Reflection.Assembly[] { typeof(TDengineProvider).Assembly };

//创建 db对象    
var db = new SqlSugarClient(new ConnectionConfig()
  {
      DbType = SqlSugar.DbType.TDengine,
      ConnectionString = Config.ConnectionString,
      IsAutoCloseConnection = true，
      ConfigureExternalServices = new ConfigureExternalServices()
      {
           EntityService= (property, column) =&gt;
           {
               if (column.SqlParameterDbType == null) 
               {
                   //需要给列加上通用转换，这样实体就不需要一个一个转了 
                   column.SqlParameterDbType = typeof(CommonPropertyConvert);
               }
           }
      }
  }); 

// 创建超级表
db.CodeFirst.InitTables&lt;SUsingTagModel&gt;();</pre>
</div>
<p>在上述代码中，<code>SUsingTagModel</code>&nbsp;是一个实体类，它映射了 TDengine 中的超级表结构。通过&nbsp;<code>CodeFirst.InitTables</code>&nbsp;方法，SQLSugar 会自动在 TDengine 中创建对应的超级表。</p>
<h2>2. 定义超级表实体类</h2>
<p>在 SQLSugar 中，超级表的实体类需要使用&nbsp;<code>STableAttribute</code>&nbsp;来标记，并通过&nbsp;<code>SugarColumn</code>&nbsp;来定义字段属性。</p>
<div class="md-code-block">
<div class="md-code-block-banner-wrap">
<div class="md-code-block-banner">
<div class="md-code-block-infostring">&nbsp;
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">[STableAttribute(STableName = "SUsingTagModel", Tag1 = nameof(Tag1))]
public class SUsingTagModel
{
    [SqlSugar.SugarColumn(IsPrimaryKey = true)]
    public DateTime Ts { get; set; }
    public bool Boolean { get; set; }
    public string Tag1 { get; set; }
}</pre>
</div>
</div>
</div>
</div>
</div>
<ul>
<li>
<p><code>STableAttribute</code>&nbsp;用于标记该类为超级表，<code>STableName</code>&nbsp;指定超级表的名称，<code>Tag1</code>&nbsp;指定标签字段。</p>
</li>
<li>
<p><code>SugarColumn</code>&nbsp;用于定义字段属性，<code>IsPrimaryKey</code>&nbsp;表示该字段为主键。</p>
</li>
</ul>
<h2>3. 查询超级表数据</h2>
<p>SQLSugar 提供了&nbsp;<code>AsTDengineSTable</code>&nbsp;方法，用于将查询操作映射到 TDengine 的超级表。</p>
<h3>查询所有数据</h3>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">var list1 = db.Queryable&lt;SUsingTagModel&gt;().AsTDengineSTable().ToList();</pre>
</div>
<h3>查询特定子表数据</h3>
<p>通过&nbsp;<code>Where</code>&nbsp;条件可以查询特定标签的子表数据。</p>
<div class="md-code-block">
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">// 查询子表A
var tagA = db.Queryable&lt;SUsingTagModel&gt;().AsTDengineSTable().Where(it =&gt; it.Tag1 == "a").ToList();

// 查询子表B
var tagB = db.Queryable&lt;SUsingTagModel&gt;().AsTDengineSTable().Where(it =&gt; it.Tag1 == "b").ToList();</pre>
</div>
</div>
<h2>4. 插入数据并动态创建子表</h2>
<p>在插入数据时，SQLSugar 支持根据标签值动态创建子表。通过&nbsp;<code>SetTDengineChildTableName</code>&nbsp;方法，可以指定子表的命名规则。</p>
<div class="md-code-block">
<div class="md-code-block-banner-wrap">
<div class="md-code-block-banner">
<div class="md-code-block-infostring">
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">db.Insertable(new List&lt;SUsingTagModel&gt;(){
    new SUsingTagModel()
    {
        Boolean = true,
        Tag1 = "a",
        Ts = DateTime.Now.AddMilliseconds(1)
    },
    new SUsingTagModel()
    {
        Boolean = true,
        Tag1 = "b",
        Ts = DateTime.Now.AddMilliseconds(3)
    }
})
.SetTDengineChildTableName((stableName, it) =&gt; $"{stableName}_{it.Tag1}")
.ExecuteCommand();</pre>
</div>
</div>
</div>
</div>
</div>
<ul>
<li>
<p><code>SetTDengineChildTableName</code>&nbsp;方法用于指定子表的命名规则，<code>stableName</code>&nbsp;是超级表的名称，<code>it</code>&nbsp;是当前插入的数据对象。</p>
</li>
<li>
<p><code>ExecuteCommand</code>&nbsp;方法执行插入操作，并自动创建子表。</p>
</li>
</ul>
<h2>5. 动态映射超级表名称</h2>
<p>在某些场景下，可能需要动态修改超级表的名称。SQLSugar 提供了&nbsp;<code>MappingSTableName</code>&nbsp;方法，可以在运行时动态映射超级表名称。</p>
<div class="md-code-block">
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">db.MappingSTableName&lt;SUsingTagModel&gt;("newSName001");</pre>
</div>
</div>
<ul>
<li>
<p><code>MappingSTableName</code>&nbsp;方法用于动态修改超级表的名称，替换实体类中&nbsp;<code>STableAttribute</code>&nbsp;的&nbsp;<code>STableName</code>&nbsp;属性。</p>
</li>
</ul>
<h2>6. 总结</h2>
<p>通过 SQLSugar 对 TDengine 超级表的支持，开发者可以更方便地操作 TDengine 数据库。本文介绍了如何使用 SQLSugar 创建超级表、查询子表、插入数据以及动态映射超级表名称。这些功能使得 SQLSugar 成为处理 TDengine 数据的强大工具，尤其适用于物联网、工业互联网等时序数据处理场景。</p>
<p>在实际开发中，开发者可以根据业务需求灵活运用这些功能，提升开发效率并优化数据库操作性能。</p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="3.924062793224537" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-27 12:44">2025-02-27 12:42</span>&nbsp;
<a href="https://www.cnblogs.com/sunkaixuan">阿妮亚</a>&nbsp;
阅读(<span id="post_view_count">428</span>)&nbsp;
评论(<span id="post_comment_count">4</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18740748" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18740748);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18740748', targetLink: 'https://www.cnblogs.com/sunkaixuan/p/18740748', title: 'SQLSugar 支持 TDengine 超级表的使用指南' })">举报</a>
</div>
	