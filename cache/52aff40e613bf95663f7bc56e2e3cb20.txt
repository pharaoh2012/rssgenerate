
        <div class="postTitle">
            <h1><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenyishi/p/18714657" title="发布于 2025-02-14 10:09">
    <span role="heading" aria-level="2">.NET中 泛型 + 依赖注入 的实现与应用</span>
    

</a>
</h1>
        </div>
        <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>在.NET中，注入泛型依赖项是一个常见的场景。</p>
<p>在依赖注入（DI）中使用泛型可以使得应用程序更加模块化、易于测试和扩展。</p>
<h4>在ASP.NET Core中注册泛型服务</h4>
<p>假设我们有一个需要注入的泛型接口 <code>IRepository&lt;T&gt;</code> 和实现类 <code>Repository&lt;T&gt;</code>。</p>
<pre><code class="language-csharp">public interface IRepository&lt;T&gt;
{
    T GetById(int id);
}

public class Repository&lt;T&gt; : IRepository&lt;T&gt;
{
    public T GetById(int id)
    {
        // 模拟从数据库中获取数据
        return default(T);
    }
}
</code></pre>
<p>接下来，我们需要将 <code>Repository&lt;T&gt;</code> 注册到DI容器中。</p>
<p>在ASP.NET Core中，可以通过 <code>AddTransient</code>、<code>AddScoped</code> 或 <code>AddSingleton</code> 方法来注册服务。</p>
<p>为了支持泛型，我们可以使用以下方式：</p>
<pre><code class="language-csharp">public void ConfigureServices(IServiceCollection services)
{
    // 注册泛型服务
    services.AddTransient(typeof(IRepository&lt;&gt;), typeof(Repository&lt;&gt;));
}
</code></pre>
<p>这段代码做了以下几件事：</p>
<ul>
<li><code>IRepository&lt;&gt;</code> 是一个泛型接口，表示任何类型的 <code>IRepository&lt;T&gt;</code>。</li>
<li><code>Repository&lt;&gt;</code> 是一个泛型类，它实现了 <code>IRepository&lt;T&gt;</code>。</li>
</ul>
<h4>注入泛型服务</h4>
<p>当你想在控制器或其他类中使用 <code>IRepository&lt;T&gt;</code> 时，你可以通过构造函数注入的方式来获取它。</p>
<pre><code class="language-csharp">public class MyController : Controller
{
    private readonly IRepository&lt;MyEntity&gt; _repository;

    public MyController(IRepository&lt;MyEntity&gt; repository)
    {
        _repository = repository;
    }

    public IActionResult GetEntity(int id)
    {
        var entity = _repository.GetById(id);
        return Ok(entity);
    }
}
</code></pre>
<p>在这个例子中，<code>MyController</code> 会自动获取类型为 <code>IRepository&lt;MyEntity&gt;</code> 的实例。</p>
<p>ASP.NET Core的依赖注入容器会根据泛型类型自动解析并提供 <code>Repository&lt;MyEntity&gt;</code>。</p>
<h4>泛型工厂方法</h4>
<p>如果你需要基于不同的类型动态创建泛型服务，可以使用泛型工厂方法。比如，你可以在运行时根据条件选择不同的服务实现。</p>
<pre><code class="language-csharp">public interface IFactoryService
{
    IRepository&lt;T&gt; CreateRepository&lt;T&gt;();
}

public class FactoryService : IFactoryService
{
    private readonly IServiceProvider _serviceProvider;

    public FactoryService(IServiceProvider serviceProvider)
    {
        _serviceProvider = serviceProvider;
    }

    public IRepository&lt;T&gt; CreateRepository&lt;T&gt;()
    {
        return _serviceProvider.GetRequiredService&lt;IRepository&lt;T&gt;&gt;();
    }
}
</code></pre>
<p>在 <code>FactoryService</code> 类中，我们使用 <code>IServiceProvider</code> 来手动解析泛型类型。然后，我们将 <code>FactoryService</code> 注册到DI容器中：</p>
<pre><code class="language-csharp">public void ConfigureServices(IServiceCollection services)
{
    services.AddTransient(typeof(IRepository&lt;&gt;), typeof(Repository&lt;&gt;));
    services.AddTransient&lt;IFactoryService, FactoryService&gt;();
}
</code></pre>
<p>这样，你就可以通过 <code>FactoryService</code> 动态创建任何类型的 <code>IRepository&lt;T&gt;</code>。</p>
<h4>小结</h4>
<p>在.NET中，注入泛型服务是非常简单的。通过使用ASP.NET Core的依赖注入框架，你可以：</p>
<ul>
<li>注册泛型接口和实现类。</li>
<li>在控制器或服务中通过构造函数注入泛型服务。</li>
<li>使用工厂方法动态创建泛型服务。</li>
</ul>
<p>这些功能使得你的代码更具灵活性和可扩展性。希望这篇文章能够帮助你更好地理解如何在ASP.NET Core中使用泛型进行依赖注入！</p>
</div>
<div class="clear"></div>

        <div class="postDesc">posted on 
<span id="post-date" data-last-update-days="1.3363016086666666" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-14 10:10">2025-02-14 10:09</span>&nbsp;
<a href="https://www.cnblogs.com/chenyishi">chester·chen</a>&nbsp;
阅读(<span id="post_view_count">460</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18714657" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18714657);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18714657', targetLink: 'https://www.cnblogs.com/chenyishi/p/18714657', title: '.NET中 泛型 + 依赖注入 的实现与应用' })">举报</a>
</div>
    