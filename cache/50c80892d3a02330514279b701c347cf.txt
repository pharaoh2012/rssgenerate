
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lori/p/18798116" title="发布于 2025-03-28 15:10">
    <span role="heading" aria-level="2">apisix~hmac-auth插件的使用</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>hmac-auth插件需要和 Consumer 一起使用，API 的使用者必须将密匙添加到请求头中以验证其请求，下面介绍它的主要用法</p>
<h1 id="参数">参数</h1>
<ul>
<li>algorithm 算法 默认hmac-sha256 ["hmac-sha1", "hmac-sha256", "hmac-sha512"]，客户端请求头X-HMAC-ALGORITHM=hmac-sha256</li>
<li>clock_skew 签名允许的时间偏移（以秒为单位）</li>
<li>access_key Consumer 的 access_key 必须是唯一的，客户端请求时在请求头添加X-HMAC-ACCESS-KEY=access_key值</li>
<li>signed_headers 要在加密计算中使用的 headers 列表，客户端请求头X-HMAC-SIGNED-HEADERS</li>
<li>X-HMAC-SIGNATURE 客户端请求头中的签名</li>
</ul>
<h1 id="消费者配置">消费者配置</h1>
<ul>
<li>添加hmac-auth插件，配置access_key，类似于app_id</li>
<li>这个消费者有两个能力，除了hmac-auth以外，还有key-auth的能力，即简单的认证方式</li>
</ul>
<p><img src="https://images.cnblogs.com/cnblogs_com/lori/2430318/o_250328070243_consumer.png" alt="" loading="lazy"></p>
<h1 id="签名生成的过程">签名生成的过程</h1>
<p>接下来，我们将以下述请求为例，为你介绍签名生成公式的具体计算过程：</p>
<pre><code>curl -i http://127.0.0.1:9080/index.html?name=james&amp;age=36 \
-H "X-HMAC-SIGNED-HEADERS: User-Agent;x-custom-a" \
-H "x-custom-a: test" \
-H "User-Agent: curl/7.29.0"
</code></pre>
<ol>
<li>上文请求默认的 HTTP Method 是 GET，得到 signing_string 为：</li>
</ol>
<pre><code>"GET"
</code></pre>
<ol start="2">
<li>请求的 URI 是 /index.html，根据 HTTP Method + \n + HTTP URI 得到 signing_string 为：</li>
</ol>
<pre><code>"GET
/index.html"
</code></pre>
<ol start="3">
<li>URL 中的 query 项是 name=james&amp;age=36，假设 encode_uri_params 为 false，根据 canonical_query_string 的算法，重点是对 key 进行字典排序，得到 age=36&amp;name=james；根据 HTTP Method + \n + HTTP URI + \n + canonical_query_string 得到 signing_string 为：</li>
</ol>
<pre><code>"GET
/index.html
age=36&amp;name=james"
</code></pre>
<ol start="4">
<li>access_key 是 user-key，根据 HTTP Method + \n + HTTP URI + \n + canonical_query_string + \n + access_key 得到 signing_string 为：</li>
</ol>
<pre><code>"GET
/index.html
age=36&amp;name=james
user-key"
</code></pre>
<ol start="5">
<li>Date 是指 <strong><code>GMT</code></strong> 格式的日期，不能缺少，形如 Tue, 19 Jan 2021 11:33:20 GMT, 根据 HTTP Method + \n + HTTP URI + \n + canonical_query_string + \n + access_key + \n + Date 得到 signing_string 为：</li>
</ol>
<pre><code>"GET
/index.html
age=36&amp;name=james
user-key
Tue, 19 Jan 2021 11:33:20 GMT"
</code></pre>
<blockquote>
<p>因为人家apisix服务端lua插件源码，使用的是这种GMT格式，所以咱们使用者也需要跟人家保持一致，事实上，我更倾向于使用时间戳，没有日期格式和时区的问题</p>
</blockquote>
<p><img src="https://images.cnblogs.com/cnblogs_com/lori/2430318/o_250328070841_gmt.png" alt="" loading="lazy"></p>
<ol start="6">
<li>signed_headers_string 用来制定参与到签名的 headers，在上面示例中包括 User-Agent: curl/7.29.0 和 x-custom-a: test。</li>
</ol>
<p>根据 HTTP Method + \n + HTTP URI + \n + canonical_query_string + \n + access_key + \n + Date + \n + signed_headers_string + \n，得到完整的 signing_string 为：</p>
<pre><code>"GET
/index.html
age=36&amp;name=james
user-key
Tue, 19 Jan 2021 11:33:20 GMT
User-Agent:curl/7.29.0
x-custom-a:test
"
</code></pre>
<p><strong>Body请求体校验</strong></p>
<p>当 validate_request_body 设置为 true 时，插件将计算请求 body 的 hmac-sha 值，并与请求 headers 中的 X-HMAC-DIGEST 的值进行校验。</p>
<p>X-HMAC-DIGEST: base64(hmac-sha())</p>
<pre><code>X-HMAC-DIGEST: base64(hmac-sha(&lt;body&gt;))
</code></pre>
<p>如果没有请求 body，你可以将 X-HMAC-DIGEST 的值设置为空字符串的 HMAC-SHA。</p>
<blockquote>
<p>注意:<br>
当开启 body 校验时，为了计算请求 body 的 hmac-sha 值，该插件会把 body 加载到内存中，在请求 body 较大的情况下，可能会造成较高的内存消耗。<br>
为了避免这种情况，你可以通过设置 max_req_body（默认值是 512KB）配置项来配置最大允许的 body 大小，body 超过此大小的请求会被拒绝。</p>
</blockquote>
<h1 id="测试插件">测试插件</h1>
<p>假设当前请求为：</p>
<pre><code>curl -i http://127.0.0.1:9080/index.html?name=james&amp;age=36 \
-H "X-HMAC-SIGNED-HEADERS: User-Agent;x-custom-a" \
-H "x-custom-a: test" \
-H "User-Agent: curl/7.29.0"
</code></pre>
<p>通过以下 Python 代码为上述请求生成签名 SIGNATURE：</p>
<pre><code>import base64
import hashlib
import hmac

secret = bytes('my-secret-key', 'utf-8')
message = bytes("""GET
/index.html
age=36&amp;name=james
user-key
Tue, 19 Jan 2021 11:33:20 GMT
User-Agent:curl/7.29.0
x-custom-a:test
""", 'utf-8')

hash = hmac.new(secret, message, hashlib.sha256)

# to lowercase base64
print(base64.b64encode(hash.digest()))
</code></pre>
<table>
<thead>
<tr>
<th>Type</th>
<th>Hash</th>
</tr>
</thead>
<tbody>
<tr>
<td>SIGNATURE</td>
<td>8XV1GB7Tq23OJcoz6wjqTs4ZLxr9DiLoY4PxzScWGYg=</td>
</tr>
</tbody>
</table>
<p>你也可以参考 Generating HMAC signatures 了解如何使用不同的编程语言生成签名。</p>
<p>签名生成后，你可以通过以下示例使用生成的签名发起请求：</p>
<pre><code>curl -i "http://127.0.0.1:9080/index.html?name=james&amp;age=36" \
-H "X-HMAC-SIGNATURE: 8XV1GB7Tq23OJcoz6wjqTs4ZLxr9DiLoY4PxzScWGYg=" \
-H "X-HMAC-ALGORITHM: hmac-sha256" \
-H "X-HMAC-ACCESS-KEY: user-key" \
-H "Date: Tue, 19 Jan 2021 11:33:20 GMT" \
-H "X-HMAC-SIGNED-HEADERS: User-Agent;x-custom-a" \
-H "x-custom-a: test" \
-H "User-Agent: curl/7.29.0"

HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Date: Tue, 19 Jan 2021 11:33:20 GMT
Server: APISIX/2.2
......
</code></pre>
<p>你也可以将签名放到请求头 Authorization 字段中：</p>
<pre><code>curl http://127.0.0.1:9080/index.html \
-H 'Authorization: hmac-auth-v1# + ACCESS_KEY + # + base64_encode(SIGNATURE) + # + ALGORITHM + # + DATE + # + SIGNED_HEADERS' -i
</code></pre>
<p>postman测试结果</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/lori/2430318/o_250328071232_hmac-auth.png" alt="" loading="lazy">)</p>

</div>
<div id="MySignature" role="contentinfo">
    <p></p>
<div class="navgood">
<p>作者：仓储大叔，张占岭，<br>
荣誉：微软MVP<br>QQ：853066980</p>

<p><strong>支付宝扫一扫，为大叔打赏!</strong>
<br><img src="https://images.cnblogs.com/cnblogs_com/lori/237884/o_IMG_7144.JPG"></p>
</div>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.0455422525972222" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-28 15:13">2025-03-28 15:10</span>&nbsp;
<a href="https://www.cnblogs.com/lori">张占岭</a>&nbsp;
阅读(<span id="post_view_count">98</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18798116" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18798116);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18798116', targetLink: 'https://www.cnblogs.com/lori/p/18798116', title: 'apisix~hmac-auth插件的使用' })">举报</a>
</div>
        