
    <a name="top"></a>
    <h2><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/jyzhao/p/18760246/oracle-23ai-tpch-zhi-xing-qing-kuang" title="发布于 2025-03-09 08:44">
    <span role="heading" aria-level="2">Oracle 23ai TPC-H 执行情况</span>
    

</a>
</h2>
    <small>
<span id="post-date" data-last-update-days="0.1463236174699074" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-09 08:45">2025-03-09 08:44</span>&nbsp;
<a href="https://www.cnblogs.com/jyzhao">AlfredZhao</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18760246" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18760246);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18760246', targetLink: 'https://www.cnblogs.com/jyzhao/p/18760246/oracle-23ai-tpch-zhi-xing-qing-kuang', title: 'Oracle 23ai TPC-H 执行情况' })">举报</a>
</small>
    <div class="entry">
        <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>TPC-H是一个广泛使用的基准测试，用于评估数据库系统在决策支持系统（DSS）场景下的性能。</p>
<p>在昨天的文章中，我们完成了《<a href="https://mp.weixin.qq.com/s/80xDPc8-NDeltnfRm5qwUg" target="_blank" rel="noopener nofollow">Oracle 23ai TPC-H 测试环境部署</a>》，本文将继续记录在未做任何优化场景下，这22条SQL的真实执行情况。</p>
<ul>
<li>1.修订执行有问题的SQL</li>
<li>2.完整运行22个SQL</li>
<li>3.测试结果统计（未做任何优化场景）</li>
</ul>
<h2 id="1-修订执行有问题的sql">1. 修订执行有问题的SQL</h2>
<p>因为根据《<a href="https://mp.weixin.qq.com/s/80xDPc8-NDeltnfRm5qwUg" target="_blank" rel="noopener nofollow">Oracle 23ai TPC-H 测试环境部署</a>》准备好的TPC-H环境，实际测试发现有5个SQL需要微调下，否则执行会报错。</p>
<p>但不必担心，都是比较小的问题，不需要大改，主要是不符合Oracle 特殊的语法规则，稍加修改即可：</p>
<ul>
<li>Oracle 不允许在子查询别名前使用 <code>AS</code> 关键字</li>
<li>Oracle 子查询的别名后面不需要也不能跟列名列表，只需要在子查询的末尾直接写上别名</li>
<li>Oracle 不支持 substring(c_phone from 1 for 2) 函数的这种语法</li>
</ul>
<p><strong>实际测试涉及到的具体SQL和改写方案参考：</strong></p>
<p>query7.sql、query8.sql、query9.sql</p>
<ul>
<li>删除报错位置的 <code>AS</code> 关键字，具体位置如果找不到可以执行下，会报错具体位置，删除报错位置的 <code>AS</code> 关键字即可。</li>
</ul>
<p>query13.sql</p>
<ul>
<li>删除报错位置的 <code>AS</code> 关键字</li>
<li>把别名后面指定的<code>(c_custkey,c_count)</code>列名都去掉，列名别名<code>c_count</code>直接在子查询中直接指定即可。</li>
</ul>
<p>query22.sql</p>
<ul>
<li>删除报错位置的 <code>AS</code> 关键字</li>
<li>将<code>substring(c_phone from 1 for 2)</code> 改写为：<code>substr(c_phone, 1, 2)</code>，共有三处。</li>
</ul>
<p><strong>其他优化（可选）：</strong></p>
<p>如果文件尾部有多余的where rownum语句，可以快速去掉，避免测试中不必要的错误回显：<br>
查询最后一行情况：<code>tail -n 1 query*.sql</code><br>
我这里去掉文件最后一行：<code>sed -i '$d' query*.sql</code></p>
<h2 id="2-完整运行22个sql">2. 完整运行22个SQL</h2>
<p>我需要记录在做任何优化之前，确保完整运行过TPC-H的22个SQL查询，并记录每个查询的执行时间。</p>
<p>我这里使用如下脚本 <code>query_all.sh</code> 测试：</p>
<p>vi query_all.sh</p>
<pre><code class="language-bash">for i in {1..22}; do
    echo "PROMPT 当前执行第 $i 个查询;" &gt;&gt; commands.sql
    echo "@query$i" &gt;&gt; commands.sql
done

sqlplus -s tpch/tpch@alfred @commands.sql &gt; output.log 2&gt;&amp;1
</code></pre>
<p>因为执行时间比较长，我这里选择放到后台执行，同时可以利用周末的时间：</p>
<pre><code class="language-bash">nohup sh query_all.sh &amp;
</code></pre>
<p>后台执行完成之后，发现这个output.log有811M大小..<br>
嗯，有些查询返回行数实在是太多了，先不管，直接过滤下执行时间显示：</p>
<pre><code class="language-bash">[oracle@dbtest dbgen]$ grep "Elapsed:" output.log
Elapsed: 00:06:36.20
Elapsed: 00:01:09.51
Elapsed: 00:07:43.89
Elapsed: 00:07:24.58
Elapsed: 00:08:11.85
Elapsed: 00:06:01.30
Elapsed: 00:07:39.31
Elapsed: 00:07:46.35
Elapsed: 00:10:10.19
Elapsed: 00:08:45.04
Elapsed: 00:00:56.25
Elapsed: 00:07:04.59
Elapsed: 00:02:46.57
Elapsed: 00:06:22.81
Elapsed: 00:00:00.06
Elapsed: 00:06:09.22
Elapsed: 00:00:00.38
Elapsed: 00:01:11.31
Elapsed: 00:06:20.15
Elapsed: 00:17:00.94
Elapsed: 00:07:05.97
Elapsed: 00:07:15.76
Elapsed: 00:14:26.95
Elapsed: 00:01:22.08
</code></pre>
<p>这有点乱。。而且咋是24个？比22个SQL要多了两个？<br>
这里使用到一个小技巧，在匹配到关键字的行之后，额外多显示后面 1 行内容：</p>
<pre><code class="language-bash">grep -A 1 "Elapsed:" output.log
</code></pre>
<p>这样显示结果就是这样，第一个<code>Elapsed</code>时间就是对应第1个查询，后面也都好找到一一对应了，方便判断，原来执行第 15 个查询，是存在先创建视图，再查询，再删除这个视图的逻辑，所以<code>Elapsed</code>会多了两个，去掉这两个时间干扰即可。</p>
<h2 id="3测试结果统计未做任何优化场景">3.测试结果统计（未做任何优化场景）</h2>
<p>这里让<code>鲸鱼小助手</code>帮我根据实际测试结果直接整理出表格，方便大家直观看到测试结果。</p>
<h3 id="查询执行时间统计表">查询执行时间统计表</h3>
<table>
<thead>
<tr>
<th>查询编号</th>
<th>执行时间 (HH:MM:SS)</th>
<th>执行时间 (秒)</th>
<th>执行快慢排名</th>
</tr>
</thead>
<tbody>
<tr>
<td>11</td>
<td>00:00:56.25</td>
<td>56.25</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>00:01:09.51</td>
<td>69.51</td>
<td>2</td>
</tr>
<tr>
<td>16</td>
<td>00:01:11.31</td>
<td>71.31</td>
<td>3</td>
</tr>
<tr>
<td>22</td>
<td>00:01:22.08</td>
<td>82.08</td>
<td>4</td>
</tr>
<tr>
<td>13</td>
<td>00:02:46.57</td>
<td>166.57</td>
<td>5</td>
</tr>
<tr>
<td>15</td>
<td>00:06:09.22</td>
<td>369.22</td>
<td>6</td>
</tr>
<tr>
<td>6</td>
<td>00:06:01.30</td>
<td>361.30</td>
<td>7</td>
</tr>
<tr>
<td>17</td>
<td>00:06:20.15</td>
<td>380.15</td>
<td>8</td>
</tr>
<tr>
<td>14</td>
<td>00:06:22.81</td>
<td>382.81</td>
<td>9</td>
</tr>
<tr>
<td>1</td>
<td>00:06:36.20</td>
<td>396.20</td>
<td>10</td>
</tr>
<tr>
<td>12</td>
<td>00:07:04.59</td>
<td>424.59</td>
<td>11</td>
</tr>
<tr>
<td>19</td>
<td>00:07:05.97</td>
<td>425.97</td>
<td>12</td>
</tr>
<tr>
<td>20</td>
<td>00:07:15.76</td>
<td>435.76</td>
<td>13</td>
</tr>
<tr>
<td>4</td>
<td>00:07:24.58</td>
<td>444.58</td>
<td>14</td>
</tr>
<tr>
<td>7</td>
<td>00:07:39.31</td>
<td>459.31</td>
<td>15</td>
</tr>
<tr>
<td>3</td>
<td>00:07:43.89</td>
<td>463.89</td>
<td>16</td>
</tr>
<tr>
<td>8</td>
<td>00:07:46.35</td>
<td>466.35</td>
<td>17</td>
</tr>
<tr>
<td>5</td>
<td>00:08:11.85</td>
<td>491.85</td>
<td>18</td>
</tr>
<tr>
<td>10</td>
<td>00:08:45.04</td>
<td>525.04</td>
<td>19</td>
</tr>
<tr>
<td>9</td>
<td>00:10:10.19</td>
<td>610.19</td>
<td>20</td>
</tr>
<tr>
<td>21</td>
<td>00:14:26.95</td>
<td>866.95</td>
<td>21</td>
</tr>
<tr>
<td>18</td>
<td>00:17:00.94</td>
<td>1020.94</td>
<td>22</td>
</tr>
</tbody>
</table>
<h3 id="top-5-慢-sql-执行情况">TOP 5 慢 SQL 执行情况</h3>
<table>
<thead>
<tr>
<th>查询编号</th>
<th>执行时间 (HH:MM:SS)</th>
<th>执行时间 (秒)</th>
<th>执行快慢排名</th>
</tr>
</thead>
<tbody>
<tr>
<td>18</td>
<td>00:17:00.94</td>
<td>1020.94</td>
<td>22</td>
</tr>
<tr>
<td>21</td>
<td>00:14:26.95</td>
<td>866.95</td>
<td>21</td>
</tr>
<tr>
<td>9</td>
<td>00:10:10.19</td>
<td>610.19</td>
<td>20</td>
</tr>
<tr>
<td>10</td>
<td>00:08:45.04</td>
<td>525.04</td>
<td>19</td>
</tr>
<tr>
<td>5</td>
<td>00:08:11.85</td>
<td>491.85</td>
<td>18</td>
</tr>
</tbody>
</table>
<h3 id="关键信息">关键信息</h3>
<ol>
<li><strong>最慢查询</strong>：
<ul>
<li>查询编号 <strong>18</strong>，执行时间 <strong>1020.94 秒</strong>（约 <strong>17 分钟</strong>），排名第 22。</li>
</ul>
</li>
<li><strong>第二慢查询</strong>：
<ul>
<li>查询编号 <strong>21</strong>，执行时间 <strong>866.95 秒</strong>（约 <strong>14 分 27 秒</strong>），排名第 21。</li>
</ul>
</li>
<li><strong>第三慢查询</strong>：
<ul>
<li>查询编号 <strong>9</strong>，执行时间 <strong>610.19 秒</strong>（约 <strong>10 分 10 秒</strong>），排名第 20。</li>
</ul>
</li>
<li><strong>第四慢查询</strong>：
<ul>
<li>查询编号 <strong>10</strong>，执行时间 <strong>525.04 秒</strong>（约 <strong>8 分 45 秒</strong>），排名第 19。</li>
</ul>
</li>
<li><strong>第五慢查询</strong>：
<ul>
<li>查询编号 <strong>5</strong>，执行时间 <strong>491.85 秒</strong>（约 <strong>8 分 12 秒</strong>），排名第 18。</li>
</ul>
</li>
</ol>
<h3 id="说明">说明</h3>
<ul>
<li><strong>执行快慢排名</strong> 是根据执行时间（秒）从小到大排序，排名越小表示查询越快，排名越大表示查询越慢。</li>
<li>以上 TOP 5 慢 SQL 的执行时间均超过 <strong>8 分钟</strong>，其中查询编号 <strong>18</strong> 和 <strong>21</strong> 的执行时间尤为突出，分别超过 <strong>17 分钟</strong> 和 <strong>14 分钟</strong>。</li>
<li>这些慢 SQL 可能需要进一步优化，例如检查索引、优化查询逻辑或调整数据库配置，以提升整体性能。</li>
</ul>
<p>在后续文章中我们将开始优化这些SQL，欢迎关注。</p>

</div>
<div id="MySignature" role="contentinfo">
    AlfredZhao©版权所有「从Oracle起航，领略精彩的IT技术。」
</div>
<div class="clear"></div>

        <div class="clear"></div>
        
</div>
    <ul class="postmetadata">
        <vc:categories-tags blog-app="jyzhao" blog-id="186567" post-id="18760246"></vc:categories-tags>
    </ul>
