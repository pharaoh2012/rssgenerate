
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/sun-10387834/p/19000782" title="发布于 2025-07-24 09:48">
    <span role="heading" aria-level="2">【🔥🔥🔥Redis 内存管理核心】过期键删除策略与内存淘汰机制详解</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>Redis 的<strong>过期键删除策略</strong>和<strong>内存淘汰策略</strong>是其管理内存、防止内存耗尽的关键机制，它们解决的是不同层面的问题：</p>
<h2 id="一过期键删除策略">一、过期键删除策略</h2>
<blockquote>
<p>目标是<strong>自动删除那些设置了过期时间且已过期的键</strong>，释放其占用的内存。Redis 采用两种策略协同工作：</p>
</blockquote>
<ol>
<li>
<p><strong>惰性删除</strong></p>
<ul>
<li><strong>原理：</strong> 当客户端尝试<strong>访问</strong>一个键时，Redis 会先检查这个键是否设置了过期时间以及是否已过期。</li>
<li><strong>操作：</strong> 如果键已过期，Redis 会立即删除这个键，然后才执行客户端的访问命令（返回 <code>nil</code> 或执行失败）。</li>
<li><strong>优点：</strong> 对 CPU 时间友好。只有在真正访问到过期键时才付出删除的成本。没有访问的过期键即使存在，也不会消耗额外的 CPU 去删除它们。</li>
<li><strong>缺点：</strong> 对内存不友好。如果一个键设置了过期时间但之后再也没有被访问过，那么它会一直占用内存空间，直到被访问或者被定期删除策略扫描到并删除。这相当于一种“内存泄漏”。</li>
</ul>
</li>
<li>
<p><strong>定期删除</strong></p>
<ul>
<li><strong>原理：</strong> Redis 会<strong>周期性地、主动地</strong>从设置了过期时间的键集合中<strong>随机抽取</strong>一部分键（默认每次检查 20 个键），检查它们是否过期。</li>
<li><strong>操作：</strong>
<ul>
<li>每次执行时，从过期字典中随机选择一定数量的键。</li>
<li>删除其中所有已过期的键。</li>
<li>如果发现本次检查中过期的键比例超过一定阈值（默认是 25%），则<strong>立即再随机抽取一批</strong>键进行检查（循环），直到过期键比例降到阈值以下或达到时间限制（避免过度占用 CPU）。</li>
</ul>
</li>
<li><strong>优点：</strong> 一定程度上减少了惰性删除带来的内存浪费问题，通过周期性扫描清理掉那些长期不被访问的过期键。</li>
<li><strong>缺点：</strong> 需要平衡扫描的频率、每次扫描的数量以及 CPU 消耗。扫描太频繁或每次扫描太多键会消耗过多 CPU；扫描太少或太慢则可能导致大量过期键堆积。它是一个<strong>折中方案</strong>，无法保证实时删除所有过期键。</li>
</ul>
</li>
</ol>
<p><strong>总结：</strong> Redis 通过<strong>惰性删除 + 定期删除</strong>的组合策略来管理过期键。惰性删除确保访问时数据是最新的且能释放内存；定期删除则像一个“清洁工”，定期清理那些“僵尸”过期键，减少内存占用。两者互补，但都无法保证绝对实时删除所有过期键。</p>
<h2 id="二内存淘汰策略">二、内存淘汰策略</h2>
<blockquote>
<p>目标是当 Redis 使用的内存<strong>达到 <code>maxmemory</code> 配置的限制</strong>时，Redis 如何选择要删除哪些键（无论是否过期）来释放空间，以便写入新数据。这是防止 Redis 因内存耗尽而崩溃的最后一道防线。</p>
</blockquote>
<p>Redis 提供了 8 种内存淘汰策略，通过 <code>maxmemory-policy</code> 配置项指定：</p>
<ol>
<li><strong><code>noeviction</code></strong>：<strong>默认策略</strong>。当内存不足时，新写入操作会<strong>报错</strong>（如 <code>(error) OOM command not allowed when used memory &gt; 'maxmemory'</code>）。读操作通常不受影响。适用于你确信数据绝对不能丢失且宁愿拒绝写入也不能覆盖数据的场景。</li>
<li><strong><code>allkeys-lru</code></strong>：从<strong>所有键空间</strong>中，使用 <strong>LRU 算法</strong>淘汰最近最少使用的键。这是最常用且通常效果较好的策略。</li>
<li><strong><code>volatile-lru</code></strong>：从<strong>设置了过期时间的键空间</strong>中，使用 <strong>LRU 算法</strong>淘汰最近最少使用的键。</li>
<li><strong><code>allkeys-lfu</code></strong>：从<strong>所有键空间</strong>中，使用 <strong>LFU 算法</strong>淘汰最不经常使用的键（根据访问频率）。适用于访问模式随时间变化较大的场景。</li>
<li><strong><code>volatile-lfu</code></strong>：从<strong>设置了过期时间的键空间</strong>中，使用 <strong>LFU 算法</strong>淘汰最不经常使用的键。</li>
<li><strong><code>allkeys-random</code></strong>：从<strong>所有键空间</strong>中，<strong>随机</strong>淘汰任意键。</li>
<li><strong><code>volatile-random</code></strong>：从<strong>设置了过期时间的键空间</strong>中，<strong>随机</strong>淘汰任意键。</li>
<li><strong><code>volatile-ttl</code></strong>：从<strong>设置了过期时间的键空间</strong>中，淘汰<strong>剩余生存时间最短</strong>的键。即优先淘汰即将过期的键。</li>
</ol>
<h3 id="关键点说明">关键点说明</h3>
<ul>
<li><strong>作用时机：</strong> 仅当内存使用达到 <code>maxmemory</code> 限制且客户端尝试执行会<strong>增加内存使用量</strong>的命令（如 <code>SET</code>, <code>LPUSH</code>, <code>HINCRBY</code> 等）时触发淘汰。</li>
<li><strong>作用范围：</strong> 以 <code>allkeys-</code> 开头的策略会淘汰所有键（包括未设置过期时间的键）。以 <code>volatile-</code> 开头的策略<strong>只淘汰设置了过期时间的键</strong>。</li>
<li><strong><code>volatile-lru</code>/<code>volatile-lfu</code>/<code>volatile-random</code>/<code>volatile-ttl</code> 的特殊情况：</strong> 如果内存不足时，淘汰池（设置了过期时间的键）中<strong>没有合适的键可淘汰</strong>（例如没有键设置过期时间），那么这些策略的行为会<strong>退化成 <code>noeviction</code></strong>，新写入操作会报错。</li>
<li><strong>LRU vs LFU：</strong>
<ul>
<li><strong>LRU (Least Recently Used)：</strong> 关注“最近使用时间”。认为最近没被用过的键将来也不太可能被用到。实现上是近似 LRU（采样）。</li>
<li><strong>LFU (Least Frequently Used)：</strong> 关注“访问频率”。认为访问次数最少的键将来也不太可能被用到。Redis 实现的 LFU 会随时间衰减访问计数（避免旧热点数据长期霸占）。</li>
</ul>
</li>
<li><strong>选择策略：</strong>
<ul>
<li>如果数据访问模式接近 LRU，或者不确定，<code>allkeys-lru</code> 通常是最佳选择。</li>
<li>如果数据有明显的热点和冷门区分，且热点访问频繁，<code>allkeys-lfu</code> 可能更好。</li>
<li>如果你希望 Redis 只作为缓存使用（数据可丢失），所有键都设置了过期时间，并且希望优先淘汰快过期的数据，可以用 <code>volatile-ttl</code>。</li>
<li>如果你有部分持久化数据（不能淘汰）和部分缓存数据（可淘汰），确保缓存数据都设置了过期时间，然后使用 <code>volatile-lru</code> 或 <code>volatile-lfu</code>。</li>
<li><code>noeviction</code> 适用于数据绝对不能丢失的场景（但要做好容量规划和监控）。</li>
<li><code>allkeys-random</code> 和 <code>volatile-random</code> 通常效果不如基于 LRU/LFU 的策略，除非你的访问模式是完全随机的。</li>
</ul>
</li>
</ul>
<p><strong>总结：</strong> 内存淘汰策略是 Redis 在内存耗尽时的<strong>应急机制</strong>，用于释放空间以允许新数据写入。你需要根据数据的特性（是否可丢失、访问模式、是否都设过期时间）来谨慎选择合适的策略。<code>allkeys-lru</code> 或 <code>allkeys-lfu</code> 是最常用和推荐的通用策略。务必配置 <code>maxmemory</code> 并根据需要设置 <code>maxmemory-policy</code>。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-24 09:49">2025-07-24 09:48</span>&nbsp;
<a href="https://www.cnblogs.com/sun-10387834">佛祖让我来巡山</a>&nbsp;
阅读(<span id="post_view_count">147</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19000782);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19000782', targetLink: 'https://www.cnblogs.com/sun-10387834/p/19000782', title: '【&amp;#128293;&amp;#128293;&amp;#128293;Redis 内存管理核心】过期键删除策略与内存淘汰机制详解' })">举报</a>
</div>
        