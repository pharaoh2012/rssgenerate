
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mjunz/p/18768799" title="发布于 2025-03-12 22:34">
    <span role="heading" aria-level="2">Netty基础—3.基础网络协议</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p data-track="3" data-pm-slice="0 0 []"><strong>大纲</strong></p>
<p data-track="4"><strong>1.网络基础的相关问题总结</strong></p>
<p data-track="5"><strong>2.七层模型和四层模型</strong></p>
<p data-track="6"><strong>3.物理层(网线 + 光缆 + 01电信号)</strong></p>
<p data-track="7"><strong>4.数据链路层(以太网协议 + 网卡mac地址)</strong></p>
<p data-track="8"><strong>5.网络层(IP协议 + 子网划分 + 路由器)</strong></p>
<p data-track="9"><strong>6.传输层(TCP和UDP协议 + Socket + 端口)</strong></p>
<p data-track="10"><strong>7.应用层(HTTP协议 + SMTP协议)</strong></p>
<p data-track="11"><strong>8.浏览器请求一个域名会发生什么</strong></p>
<p data-track="12"><strong>9.TCP三次握手建立连接的过程</strong></p>
<p data-track="13"><strong>10.如果TCP建立连接只握手两次</strong></p>
<p data-track="14"><strong>11.TCP断开连接的四次挥手</strong></p>
<p data-track="15"><strong>12.Socket编程和TCP/IP协议的关系</strong></p>
<p data-track="16"><strong>13.HTTP的工作原理</strong></p>
<p data-track="17"><strong>14.HTTPS的实现原理</strong></p>
<p data-track="18"><strong>15.全双工和半双工</strong></p>
<p data-track="19"><strong>16.Java进行IO读写的底层流程</strong></p>
<p data-track="20"><strong>17.同步和异步 + 阻塞和非阻塞</strong></p>
<p data-track="21"><strong>18.Linux的常用IO模型</strong></p>
<p data-track="22"><strong>19.IO多路复用技术</strong></p>
<p data-track="23"><strong>20.select、poll、epoll的区别</strong></p>
<p data-track="24">&nbsp;</p>
<p data-track="25"><strong>1.网络基础的相关问题总结</strong></p>
<p data-track="26">首先是七层模型和四层模型，然后是一次请求的全过程，接着是传输层的TCP连接(三次握手和四次挥手)，然后就是传输层TCP协议上的Socket编程，最后是应用层的HTTP协议。</p>
<p data-track="27">&nbsp;</p>
<p data-track="28"><strong>2.七层模型和四层模型</strong></p>
<p data-track="29">TCP/IP四层模型(应传网数)：应用层、传输层、网络层、数据链路层。其中每一层对应的协议分别是：数据链路层(以太网协议)，网络层(IP协议)，传输层(TCP协议)，应用层(HTTP协议)。</p>
<p data-track="30">&nbsp;</p>
<p data-track="31">OSI七层模型(应表会传网数物)：应用层、表示层、会话层、传输层、网络层、数据链路层、物理层。注意：物理层(网线和光缆传递01电信号)，会话层、表示层、应用层 -&gt; 应用层。</p>
<p data-track="32">&nbsp;</p>
<p data-track="33">电脑的网络设置中一般会包含IP地址、子网掩码、网关地址、DNS地址。IP地址和子网掩码用来划分子网，判断哪些IP地址在一个子网内。IP地址和mac地址是关联起来的，可以唯一定位网卡。网关地址可以认为是路由器上的那个网卡的IP地址，路由器上的网卡也有mac地址，mac地址对应了一个IP地址。</p>
<p data-track="34">&nbsp;</p>
<p data-track="35"><strong>3.物理层(网线 + 光缆 + 01电信号)</strong></p>
<p data-track="36">物理层指的是通过网线或光缆把各个电脑连接起来形成一个网络。物理层负责传输0和1的电信号，计算机的最底层就是0和1的电信号，所以物理层通过传输0和1的电信号把各个电脑连接起来。</p>
<p data-track="37">&nbsp;</p>
<p data-track="38"><strong>4.数据链路层(以太网协议 + 网卡mac地址)</strong></p>
<p data-track="39">数据链路层负责处理0和1的电信号如何分组，比如在一连串的电信号中区分哪些0和1分为一组、对应什么意思。一组电信号是一个数据包，也叫一个帧(frame)。每个帧分成两个部分，标头(head)和数据(data)。标头是一些说明性的数据，比如发送者、接收者和数据类型等。</p>
<pre class="highlighter-hljs"><code>//比如定义：
00000011(从电脑1出发，要到电脑2去)
00101(从电脑1出发，要到电脑3去)
0101(从电脑2触发，要到电脑4去)
01(从电脑3出发，要到电脑5去)</code></pre>
<p data-track="41">以太网协议规定了电信号的分组方式，在其协议下发送的数据包必须指定目标电脑网卡的mac地址。以太网协议规定了接入网络的所有设备都要有个网卡，每个网卡必须包含一个mac地址，mac地址就是网卡的唯一标识。所以以太网协议里的数据包，或者说在数据链路层传输的数据包，必须从一台电脑的网卡传输到另外一台电脑的网卡。</p>
<p data-track="42">&nbsp;</p>
<p data-track="43">在以太网里面，如果一台电脑发送一个数据包出去，会广播给局域网(子网)内的所有电脑的网卡，然后每台电脑都从数据包里获取接收者的mac地址，跟自己的mac地址进行对比，如果一样就说明这是发给自己的数据包。</p>
<p data-track="44">&nbsp;</p>
<p data-track="45"><strong>5.网络层(IP协议 + 子网划分 + 路由器)</strong></p>
<p data-track="46"><strong>(1)IP协议区分电脑属于哪个子网</strong></p>
<p data-track="47"><strong>(2)两个IP地址是否属于一个子网</strong></p>
<p data-track="48"><strong>(3)两台电脑如何传输数据包</strong></p>
<p data-track="49"><strong>(4)路由器的作用</strong></p>
<p data-track="50"><strong>(5)交换机和路由器的对比</strong></p>
<p data-track="51"><strong>(6)两个局域网如何通过路由器通信</strong></p>
<p data-track="52"><strong>(7)总结</strong></p>
<p data-track="53">&nbsp;</p>
<p data-track="54"><strong>(1)IP协议区分电脑属于哪个子网</strong></p>
<p data-track="55">子网(局域网)内的电脑在以太网协议下，是通过广播方式将一个数据包发送给另一台电脑的。</p>
<p data-track="56">&nbsp;</p>
<p data-track="57">但是如何知道哪些电脑是在同一个子网内的呢？网络层里有IP协议，通过IP协议就可以区分哪些电脑是一个子网的。</p>
<p data-track="58">&nbsp;</p>
<p data-track="59"><strong>(2)两个IP地址是否属于一个子网</strong></p>
<p data-track="60">每台计算机都会分配一个IP地址，如IPV4版本的IP地址由32个二进制数字组成。其中前24位代表了网络，后8位代表了主机。</p>
<p data-track="61">&nbsp;</p>
<p data-track="62">如果要判断两个IP地址是否是一个子网的，则要分别把两个IP地址和自己的子网掩码进行二进制的位与运算，位与运算后再比较一下代表网络的那部分，如果网络的那部分是一样的才是一个子网。</p>
<p data-track="63">&nbsp;</p>
<p data-track="64"><strong>(3)两台电脑如何传输数据包</strong></p>
<p data-track="65">两台在子网内的电脑可以通过广播 + mac地址的判断来发传输据包，两台不在子网内的电脑则不能通过广播而需要通过路由器来传输数据包。</p>
<p data-track="66">&nbsp;</p>
<p data-track="67"><strong>(4)路由器的作用</strong></p>
<p data-track="68">路由器负责将多个子网(局域网)进行连接。家里的网络是一个子网，要访问的网站是另一个子网。</p>
<p data-track="69">&nbsp;</p>
<p data-track="70">路由器其实就是配置了多个网卡的一个专用设备，可以通过不同的网卡接入不同的子网。</p>
<p data-track="71">&nbsp;</p>
<p data-track="72">路由器上的每个网卡都有mac地址和对应的IP地址。路由器虽然有mac地址，但是不能通过mac地址寻址。必须通过IP地址寻址，所以路由器是工作在网络层的设备。</p>
<p data-track="73">&nbsp;</p>
<p data-track="74"><strong>(5)交换机和路由器的对比</strong></p>
<p data-track="75">交换机主要用在局域网(子网)的通信，局域网里的电脑就是通过交换机把数据包广播到局域网内的其他电脑上。</p>
<p data-track="76">&nbsp;</p>
<p data-track="77">交换机是通过mac地址来寻址和传输数据包的，基于以太网协议工作在数据链路层。路由器是通过IP地址来寻址和传输数据包的，基于IP协议工作在网络层。网关也是路由器的一种，工作在网络层。</p>
<p data-track="78">&nbsp;</p>
<p data-track="79">LAN就是Local Area Network(局域网)，WAN就是Wide Area Network(广域网)，WLAN就是Wireless Local Area Network(无线局域网WIFI)。</p>
<p data-track="80">&nbsp;</p>
<p data-track="81"><strong>(6)两个局域网如何通过路由器通信</strong></p>
<p data-track="82">步骤一：首先路由器1配置了两块网卡分别和两个局域网相连。</p>
<p data-track="83">步骤二：然后子网1的电脑先通过交换机将数据包发送给路由器1。该过程要将路由器1的一块网卡的IP地址所对应的mac地址写到数据包头部，然后才能通过交换机将数据包广播出去到路由器1。</p>
<p data-track="84">步骤三：接着路由器1通过IP地址寻址后把数据包传输到路由器2。</p>
<p data-track="85">步骤四：当路由器2接收到数据包后会比较自己网卡里的mac地址确认是否给自己，然后会在子网2内将目标机器的IP地址对应的mac地址写入数据包头部，接着再次通过交换机广播给子网2的目标电脑。</p>
<p data-track="86">&nbsp;</p>
<p data-track="87">一个局域网内的每台机器都有自己的ARP缓存，ARP的作用是用来在一个局域网内让各个设备知道彼此的IP地址和mac地址的。</p>
<p data-track="88">&nbsp;</p>
<p data-track="89">一个IP地址对应着一个mac地址。如果子网内的机器需要进行通信，只需在数据包写上对方的mac地址，再通过交换机广播到对方的机器上即可。如果跨子网的机器需要进行通信，就要在数据包写上对方的IP地址，然后先通过mac地址广播到路由器，接着路由器再把数据包传输到路由器，最后让路由器再根据另外一个子网的IP地址转换为mac地址，然后通过另外一个子网的交换机广播到对方的机器上。</p>
<p data-track="90">&nbsp;</p>
<p data-track="91"><strong>(7)总结</strong></p>
<p data-track="92">网络层最重要的协议就是IP协议，IP协议定义了一个个的IP地址，通过IP地址可以划分出一个个的子网。</p>
<p data-track="93">&nbsp;</p>
<p data-track="94">子网内通信是通过以太网协议 + mac地址 + 交换机来广播数据包的。</p>
<p data-track="95">&nbsp;</p>
<p data-track="96">跨子网通信是先通过交换机将数据包广播到路由器(网关)上去，路由器(网关)可能会再进行不断转发到另一个路由器(网关)，直至转发到最后一个路由器发现目标机器的IP地址和自己是在同一个子网内，最后一个路由器根据ARP缓存可以知道目标机器的IP地址和对应子网的mac地址。所以由最后一个路由器通过以太网协议 + mac地址 + 交换机，把数据包广播到目标机器的网卡上。</p>
<p data-track="97">&nbsp;</p>
<p data-track="98">跨子网通信：IP地址 -&gt; mac地址 -&gt; 交换机 -&gt; 路由器 -&gt; IP地址 -&gt; 交换机。</p>
<p data-track="99">&nbsp;</p>
<p data-track="100"><strong>6.传输层(TCP和UDP协议 + Socket + 端口)</strong></p>
<p data-track="101">网络层基于IP协议，可实现一个主机到另一个主机的寻址和通信。</p>
<p data-track="102">&nbsp;</p>
<p data-track="103">传输层基于TCP/UDP协议，可实现一个主机端口到另一个主机端口的连接和通信，这个通信就是通过Socket来实现的。</p>
<p data-track="104">&nbsp;</p>
<p data-track="105">通过Socket可以基于TCP/IP协议完成基于IP地址和mac地址的转换和寻址，然后通过路由器通信建立一个端口到另外一个端口的连接。</p>
<p data-track="106">&nbsp;</p>
<p data-track="107">UDP和TCP都是传输层的协议，作用就是在数据包里加入端口号，这样就可以通过端口号进行点对点的通信。UDP协议是不可靠的，发出去的数据不确定是否能收到。TCP协议是可靠的，要进行三次握手，收到数据必须要进行回复。</p>
<p data-track="108">&nbsp;</p>
<p data-track="109"><strong>7.应用层(HTTP协议 + SMTP协议)</strong></p>
<p data-track="110">通过传输层的TCP协议可以实现应用间的数据传输，而不同的应用如邮件、网页等都会定义不同的应用层协议。常见的应用层协议有HTTP协议、SMTP协议等，这里的应用层综合了会话层、表示层、应用层。</p>
<p data-track="111">&nbsp;</p>
<p data-track="112"><strong>8.浏览器请求一个域名会发生什么</strong></p>
<p data-track="113"><strong>整体过程：</strong></p>
<p data-track="114">首先根据域名去找DNS服务器获取其对应的IP地址，接着用子网掩码去判断本地IP地址和域名IP地址是否在同一个子网。如果在同一个子网，则根据以太网协议 + mac地址 + 交换机将数据包广播出去。如果不在同一个子网，则先将数据包发送给网关(路由器)，再由网关转发数据包给域名IP所在子网的网关。</p>
<p data-track="115">&nbsp;</p>
<p data-track="116"><strong>应传网数：</strong></p>
<p data-track="117">应用层(HTTP协议)-&gt; 传输层(TCP协议) -&gt; 网络层(IP协议) -&gt; 数据链路层(以太网协议)。</p>
<p data-track="118">&nbsp;</p>
<p data-track="119"><strong>步骤一：</strong></p>
<p data-track="120">浏览器请求一个域名，先按照应用层的HTTP协议，将HTTP请求报文封装成一个HTTP数据包，此时的HTTP数据包是没有头的。</p>
<p data-track="121">&nbsp;</p>
<p data-track="122"><strong>步骤二：</strong></p>
<p data-track="123">接着HTTP数据包来到传输层，该层的TCP协议会HTTP给数据包设置端口。也就是会把HTTP数据包封装到一个TCP数据包上，并且添加一个TCP头，这个TCP头会包含发送者和接收者的端口。</p>
<p data-track="124">&nbsp;</p>
<p data-track="125"><strong>步骤三：</strong></p>
<p data-track="126">接着TCP数据包来到网络层，该层的IP协议会给TCP数据包设置IP地址。也就是会把TCP头和TCP数据包封装到一个IP数据包里，并且添加一个IP头，这个IP头里会包含发送者和接收者的IP地址。通过IP协议，可以判断发送者和接收者的IP地址是否是在同一个子网的。</p>
<p data-track="127">&nbsp;</p>
<p data-track="128"><strong>步骤四：</strong></p>
<p data-track="129">接着IP数据包来到数据链路层，该层的以太网协议会给IP数据包设置mac地址。也就是把IP头和IP数据包封装到一个以太网数据包里，并且添加一个以太网头。这个以太网头里会包含发送者和接收者的网卡的mac地址，以太网数据包的大小限制是1500字节。</p>
<p data-track="130">&nbsp;</p>
<p data-track="131"><strong>步骤五：</strong></p>
<p data-track="132">以太网数据包会通过交换机被发送到网关(路由器)，网关(路由器)又会将数据包发送给别的子网，最后到达服务器接收者。</p>
<p data-track="133">&nbsp;</p>
<p data-track="134"><strong>9.TCP三次握手建立连接的过程</strong></p>
<p data-track="135">在Socket编程中，三次握手的过程会由客户端执行connect()方法来触发。</p>
<p data-track="136">&nbsp;</p>
<p data-track="137"><strong>第一次握手：</strong></p>
<p data-track="138">客户端发送连接请求报文：ACK = 0、SYN = 1、seq = x。当客户端发出连接请求报文后，会处于SYN_SENT状态，等待服务器的响应。</p>
<p data-track="139">&nbsp;</p>
<p data-track="140"><strong>第二次握手：</strong></p>
<p data-track="141">服务端收到SYN = 1的连接请求报文后，需要返回一个确认报文：ACK = 1、SYN=1、ack = x + 1、seq = y。当服务端发出确认报文后，会处于SYN_RECV状态。</p>
<p data-track="142">&nbsp;</p>
<p data-track="143"><strong>第三次握手：</strong></p>
<p data-track="144">客户端收到ack = x + 1的确认报文后，会继续发送一个确认报文：ACK = 1、ack = y + 1、seq = x + 1。当服务端收到ack = y + 1的报文后，则说明连接建立成功，此时客户端和服务端都进入ESTABLISHED状态。</p>
<p data-track="145">&nbsp;</p>
<p data-track="146">三次握手就是三次请求，所以每次握手都会进行：封装TCP数据包、封装IP数据包、封装以太网数据包，然后通过"IP地址 -&gt; mac地址 -&gt; 交换机 -&gt; 路由器 -&gt; IP地址 -&gt; mac地址 -&gt; 交换机"的方式进行数据传输。</p>
<div class="pgc-img"><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/6d87ea3a819349acbe82f068a6832b20~tplv-obj.image?lk3s=ef143cfe&amp;traceid=20250312222920FBC3DEA0F74867C93433&amp;x-expires=2147483647&amp;x-signature=ZKAa6TWZs7sVXqYP9So%2FsBsTBCk%3D" data-ic="false" data-width="974" data-height="530" data-ic-uri=""></div>
<p data-track="147">&nbsp;</p>
<p data-track="148"><strong>10.如果TCP建立连接只握手两次</strong></p>
<p data-track="149"><strong>一.假如只需要两次握手就可以建立连接</strong></p>
<p data-track="150">如果客户端第一次握手发送过去，结果卡在某个地方没及时到达服务端。那么客户端会再次重试发送第一次握手过去，然后服务端收到了重发的第一次握手，于是返回第二次握手建立了连接。</p>
<p data-track="151">&nbsp;</p>
<p data-track="152">当客户端和服务端完成通信后，原来卡在某个地方的第一次握手发到了服务端，于是服务端又返回一个第二次握手，并且开辟资源准备和客户端进行通信。</p>
<p data-track="153">&nbsp;</p>
<p data-track="154">但是客户端此时已经通信完成了，不会再发送数据给服务端，从而造成服务端无效地开辟资源。</p>
<p data-track="155">&nbsp;</p>
<p data-track="156"><strong>二.假如需要三次握手才可以建立连接</strong></p>
<p data-track="157">此时面对上述情况，客户端收到服务端延迟的第二次握手时就会发现不对，于是就可借助第三次握手发送复位报文告诉服务端撤销开辟的资源。此外由于3次握手就够了，所以不需要4次或5次浪费资源了。</p>
<p data-track="158">&nbsp;</p>
<p data-track="159"><strong>11.TCP断开连接的四次挥手</strong></p>
<p data-track="160"><strong>第一次挥手：</strong></p>
<p data-track="161">客户端发送连接释放报文：FIN=1、seq=u，然后进入FIN-WAIT-1状态。</p>
<p data-track="162">&nbsp;</p>
<p data-track="163"><strong>第二次挥手：</strong></p>
<p data-track="164">服务端收到报文后进入CLOSE_WATI状态，然后返回客户端一个确认报文：ACK=1、ack=u+1、seq=v。客户端收到确认报文后进入FIN-WAIT-2状态，此时从客户端到服务端的连接就释放了。</p>
<p data-track="165">&nbsp;</p>
<p data-track="166"><strong>第三次挥手：</strong></p>
<p data-track="167">服务端发送连接释放报文：FIN=1、ack=u+1、seq=w，然后进入LAST-ACK状态。其中序列号seq是w而不是v+1，是因为服务端很可能又发送了一些数据。</p>
<p data-track="168">&nbsp;</p>
<p data-track="169"><strong>第四次挥手：</strong></p>
<p data-track="170">客户端收到连接释放报文后，发送应答报文：ACK=1、ack=w+1、seq=u+1。然后进入TIME_WAIT状态，再等一会便会进入CLOSED状态，服务端收到应答报文后也会进入CLOSED状态。</p>
<div class="pgc-img"><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/789bff2f580b4b20807f23b7ab5f83f6~tplv-obj.image?lk3s=ef143cfe&amp;traceid=20250312222920FBC3DEA0F74867C93433&amp;x-expires=2147483647&amp;x-signature=ektSYT4keudGH5hJ%2BLWcZ21BXDc%3D" data-ic="false" data-width="978" data-height="668" data-ic-uri=""></div>
<p data-track="171">由于TCP连接是全双工的，因此每个方向都必须要单独进行关闭。当一方完成数据发送任务后，需要发送一个FIN来终止这一方向的连接。收到一个FIN只是意味着这一方向上没有数据流动了也就是不会再收到数据，但在这个TCP连接上仍然可能会发送数据除非也发送一个FIN回去。</p>
<p data-track="172">&nbsp;</p>
<p data-track="173"><strong>12.Socket编程和TCP/IP协议的关系</strong></p>
<p data-track="174"><strong>(1)Socket通信的原理</strong></p>
<p data-track="175">首先服务端会有一个ServerSocket无限等待客户端来进行连接。然后某个客户端如果要跟服务端连接，就需要在客户端本地创建一个Socket去连接服务端。接着建立连接后，服务端上的ServerSocket也会创建出一个Socket，这样就可以由客户端的Socket跟服务端的Socket进行通信。</p>
<p data-track="176">&nbsp;</p>
<p data-track="177">其中连接的建立和释放，都是基于TCP三次握手和四次挥手来实现的。其中数据的传输是基于TCP协议的：封装TCP数据包 + TCP头(端口) -&gt; 封装IP数据包 + IP头(IP地址) -&gt; 封装以太网数据包 + 以太网头(mac地址)。</p>
<p data-track="178">&nbsp;</p>
<p data-track="179"><strong>(2)Socket编程的核心方法</strong></p>
<p data-track="180">TCP服务端：socket() -&gt; bind() -&gt; listen() -&gt; accept() -&gt; read() -&gt; write() -&gt; close()。</p>
<p data-track="181">&nbsp;</p>
<p data-track="182">TCP客户端：socket() -&gt; connect() -&gt; write() -&gt; read() -&gt; close()。</p>
<p data-track="183">&nbsp;</p>
<p data-track="184"><strong>13.HTTP的工作原理</strong></p>
<p data-track="185"><strong>(1)请求报文和响应报文的结构</strong></p>
<p data-track="186">请求报文的结构：请求行(方法 + 地址 + 版本)、请求头、请求体。</p>
<p data-track="187">&nbsp;</p>
<p data-track="188">响应报文的结构：响应行(版本 + 状态码 + 原因)、响应头、响应体。</p>
<p data-track="189">&nbsp;</p>
<p data-track="190"><strong>(2)HTTP工作原理</strong></p>
<p data-track="191">经过TCP三次握手建立TCP连接后，会先将HTTP请求封装到应用层数据包，再封装到TCP数据包，再封装到IP数据包，最后封装到以太网数据包。</p>
<p data-track="192">&nbsp;</p>
<p data-track="193">如果以太网数据包过大，那么会拆成几个包，然后通过以太网协议 + mac地址 + 交换机将数据包广播到网关(路由器)上。</p>
<p data-track="194">&nbsp;</p>
<p data-track="195">以太网数据包来到网关后，又会经过多个网关进行转发，最后到达目标机器。接着通过一层层拆包获取到HTTP请求报文，交给应用程序进行处理。</p>
<p data-track="196">&nbsp;</p>
<p data-track="197">最后目标机器会将HTTP响应按原路径返回给客户端，之后经过TCP四次挥手断开TCP连接。</p>
<p data-track="198">&nbsp;</p>
<p data-track="199"><strong>(3)HTTP 1.0</strong></p>
<p data-track="200">默认是短连接，也就是底层的TCP连接是短连接。比如一个网页要向服务端发送30个请求，则要进行30次TCP连接的建立和释放。</p>
<p data-track="201">&nbsp;</p>
<p data-track="202"><strong>(4)HTTP 1.1</strong></p>
<p data-track="203">默认是长连接，也就是底层的TCP连接是长连接。比如浏览器打开一个网页后，底层的TCP连接就保持着，不会马上断开。后续该网页发送的这30个请求就会共用一个TCP连接。</p>
<p data-track="204">&nbsp;</p>
<p data-track="205">HTTP本身其实是没有所谓的长连接和短连接之说，HTTP是长连接还是短连接指的是，底层的TCP连接是长连接还是短连接。</p>
<p data-track="206">&nbsp;</p>
<p data-track="207">HTTP服务一般用短连接，请求量大但每个请求不会频繁操作一般用短连接。数据库的连接一般用长连接，连接池一般使用的也都是长连接，而Dubbo://协议是基于长连接的。</p>
<p data-track="208">&nbsp;</p>
<p data-track="209"><strong>14.HTTPS的实现原理</strong></p>
<p data-track="210">HTTPS的工作原理会在TCP连接3次握手的基础上附加一些信息。</p>
<p data-track="211">&nbsp;</p>
<p data-track="212">步骤一：客户端把支持的加密规则发送给服务端。</p>
<p data-track="213">&nbsp;</p>
<p data-track="214">步骤二：服务端从这套加密规则里选出一套加密算法和Hash算法，然后把自己的身份信息用证书的方式发给客户端，证书里会有服务端的地址、加密公钥、证书颁发机构。</p>
<p data-track="215">&nbsp;</p>
<p data-track="216">步骤三：客户端收到消息后会验证证书的合法性，然后会生成一串随机数密码，并用证书里的公钥进行非对称加密，接着使用约定好的Hash算法生成握手消息的Hash值，然后用随机密码对消息进行对称加密，最后把加密数据、加密后的随机密码、Hash值发给服务端。</p>
<p data-track="217">&nbsp;</p>
<p data-track="218">步骤四：服务端收到消息后会从中取出公钥加密后的随机密码，然后用本地的私钥对公钥加密后的随机密码进行解密取出随机密码。接着用随机密码解密客户端发来的握手消息，然后计算握手消息的Hash值并验证是否与客户端发过来的Hash值一致，最后用随机密码加密一段握手消息发给客户端。</p>
<p data-track="219">&nbsp;</p>
<p data-track="220">步骤五：客户端拿到消息后，解密握手消息，然后计算消息的Hash值。如果计算的Hash值与服务端发来的Hash值一样，则握手结束。之后所有的数据都会由之前生成的随机密码，通过对称加密来加密。</p>
<p data-track="221">&nbsp;</p>
<p data-track="222"><strong>非对称加密：</strong>加密的时候是用了一个公钥去加密，然后解密的时候是用私钥去解密。</p>
<p data-track="223">&nbsp;</p>
<p data-track="224"><strong>对称加密：</strong>加密的时候用的算法，跟解密的时候用的算法是一样的。</p>
<p data-track="225">&nbsp;</p>
<p data-track="226">常用的非对称加密算法是RSA算法，常用的对称加密算法是AES、RC4等，常用的Hash加密算法就是MD5。</p>
<p data-track="227">&nbsp;</p>
<p data-track="228"><strong>15.全双工和半双工</strong></p>
<p data-track="229">全双工和半双工主要发生在交换机层面的。</p>
<p data-track="230">&nbsp;</p>
<p data-track="231">如果是全双工，发送数据和接收数据可以同时进行。如果是半双工，同一时刻要么只能发送数据、要么只能接收数据。</p>
<p data-track="232">&nbsp;</p>
<p data-track="233">使用半双工，需要先判断是否有数据正在接入，避免出现信号碰撞。使用全双工，不需要处理信号碰撞的问题，直接发送数据出去即可。</p>
<p data-track="234">&nbsp;</p>
<p data-track="235"><strong>16.Java进行IO读写的底层流程</strong></p>
<p data-track="236">用户程序进行IO读写，基本上会用到系统调用read和write。系统调用read把数据从内核缓冲区(内核空间)复制到进程缓冲区(用户空间)，系统调用write把数据从用户缓冲区(用户空间)复制到内核缓冲区(内核空间)。它们并不等价数据在内核缓冲区和磁盘之间的交换。</p>
<div class="pgc-img"><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/e4c3bc08205f43d1802b0f51ab370ed8~tplv-obj.image?lk3s=ef143cfe&amp;traceid=20250312222920FBC3DEA0F74867C93433&amp;x-expires=2147483647&amp;x-signature=RvIYeYtM5BkTofy%2BolgE0Pw2JcM%3D" data-ic="false" data-width="1080" data-height="691" data-ic-uri=""></div>
<p data-track="237">Java服务端处理网络请求的典型过程：</p>
<p data-track="238">&nbsp;</p>
<p data-track="239"><strong>步骤一：接收客户端请求</strong></p>
<p data-track="240">Linux通过网卡，读取客户断的请求数据，将数据读取到内核缓冲区。</p>
<p data-track="241">&nbsp;</p>
<p data-track="242"><strong>步骤二：获取请求数据</strong></p>
<p data-track="243">服务端从内核缓冲区读取数据到Java进程缓冲区。</p>
<p data-track="244">&nbsp;</p>
<p data-track="245"><strong>步骤三：服务器端业务处理</strong></p>
<p data-track="246">Java服务端在自己的用户空间中处理客户端请求。</p>
<p data-track="247">&nbsp;</p>
<p data-track="248"><strong>步骤四：服务器端返回数据</strong></p>
<p data-track="249">Java服务端已构建好的响应，从Java进程缓冲区写入内核缓冲区。</p>
<p data-track="250">&nbsp;</p>
<p data-track="251"><strong>步骤五：发送数据给客户端</strong></p>
<p data-track="252">Linux内核通过网络IO ，将内核缓冲区中的数据，写入网卡。网卡通过底层的通讯协议，会将数据发送给目标客户端。</p>
<p data-track="253">&nbsp;</p>
<p data-track="254"><strong>17.同步和异步 + 阻塞和非阻塞</strong></p>
<p data-track="255">同步和异步关注的是：是否亲自等消息、是否由其他线程告知自己。阻塞和非阻塞关注的是：当前事情还没做好时，是否还能做其他事情。</p>
<p data-track="256">&nbsp;</p>
<p data-track="257">同步阻塞：事情没做好时，亲自等该事情做好的消息，且不做其他事情。</p>
<p data-track="258">&nbsp;</p>
<p data-track="259">同步非阻塞：事情没做好时，会做其他事情，但会经常亲自等消息，轮询该事情是否做好。</p>
<p data-track="260">&nbsp;</p>
<p data-track="261">异步阻塞：事情没做好时，不会做其他事情，但也不会亲自等消息，而是由其他线程告知。</p>
<p data-track="262">&nbsp;</p>
<p data-track="263">异步非阻塞：事情没做好时，会做其他事情，也不会亲自等消息，而是由其他线程告知。</p>
<p data-track="264">&nbsp;</p>
<p data-track="265"><strong>18.Linux的常用IO模型</strong></p>
<p data-track="266"><strong>一.阻塞IO模型</strong></p>
<p data-track="267">进程(用户线程)会在用户空间中执行recvfrom系统调用，recvfrom会一直等待直到数据已经从内核空间的内核缓冲区复制到用户空间的用户缓冲区或者发生错误时才返回。</p>
<p data-track="268">&nbsp;</p>
<p data-track="269">所以进程(用户线程)从执行recvfrom系统调用开始，到recvfrom系统调用返回数据的这段时间内，都是阻塞的。</p>
<p data-track="270">&nbsp;</p>
<p data-track="271">优点：程序简单，用户线程不会占用CPU资源。</p>
<p data-track="272">缺点：一条线程维护一个连接，不适合高并发。</p>
<p data-track="273">&nbsp;</p>
<p data-track="274"><strong>二.非阻塞IO模型</strong></p>
<p data-track="275">进程(用户线程)会在用户空间中执行recvfrom系统调用，如果用户空间的用户缓冲区没有数据，那么recvfrom就不要等了，而是直接返回一个错误，从而不阻塞进程(用户线程)。</p>
<p data-track="276">&nbsp;</p>
<p data-track="277">但进程(用户线程)此后要不断轮询用户空间的用户缓冲区是否已经准备好数据，所以一般不推荐使用。</p>
<p data-track="278">&nbsp;</p>
<p data-track="279">特点：进程(用户线程)要不断轮询recvfrom系统调用，看数据是否已经准备好，直到数据准备好已完成recvfrom系统调用为止。</p>
<p data-track="280">&nbsp;</p>
<p data-track="281">优点：不会阻塞用户线程。</p>
<p data-track="282">缺点：需要轮询系统调用，占用CPU资源。</p>
<p data-track="283">&nbsp;</p>
<p data-track="284"><strong>三.IO复用模型</strong></p>
<p data-track="285">IO多路复用模型就是通过一种新的系统调用，让一个进程(用户线程)可以监视多个连接(文件描述符)，一旦某个连接就绪(文件描述符可读可写)，那么内核就会通知进程(用户线程)进行相应的IO系统调用。</p>
<p data-track="286">&nbsp;</p>
<p data-track="287">IO复用模型：两次调用、两次返回，同步IO、阻塞IO。该模型中首先执行的不是recvfrom系统调用，而是select/epoll系统调用。</p>
<p data-track="288">&nbsp;</p>
<p data-track="289">步骤一：执行select/epoll系统调用查询可以读的连接(就绪的文件描述符)</p>
<p data-track="290">此时内核会查询所有可以查询的socket列表。当任何一个socket中的数据准备好了之后，select/epoll系统调用就会返回。所以当进程(用户线程)调用了select/epoll系统调用时，是会被阻塞的；</p>
<p data-track="291">&nbsp;</p>
<p data-track="292">步骤二：进程(用户线程)获得了目标连接(准备好数据的socket)后，会发起recvfrom系统调用，此时进程(用户线程)也会被阻塞。此时数据会从内核缓冲区复制到用户缓冲区，recvfrom系统调用会将数据返回给进程(用户线程)。</p>
<p data-track="293">&nbsp;</p>
<p data-track="294">select/poll是顺序扫描文件描述符fd是否就绪。epoll是用事件驱动代替顺序扫描，当文件描述符fd就绪时，立即进行回调。</p>
<p data-track="295">&nbsp;</p>
<p data-track="296">优点：select/epoll可以同时处理成千上万个连接，不必每个连接创建一个线程。</p>
<p data-track="297">缺点：select/epoll系统调用还是属于同步阻塞IO。</p>
<p data-track="298">&nbsp;</p>
<p data-track="299"><strong>19.IO多路复用技术</strong></p>
<p data-track="300">IO多路复用技术通过把多个IO的阻塞复用到同一个select的阻塞上，从而使得系统在单线程的情况下可以同时处理多个客户端请求。</p>
<p data-track="301">&nbsp;</p>
<p data-track="302">与传统的多线程/多进程模型相比：IO多路复用的最大优势是系统开销小，系统不需要创建新的额外进程或线程，也不需要维护这些线程和进程的运行，降低了系统维护的工作量，节省了系统资源。</p>
<p data-track="303">&nbsp;</p>
<p data-track="304"><strong>20.select、poll、epoll的区别</strong></p>
<p data-track="305">区别一：</p>
<p data-track="306">epoll支持一个进程打开的socket描述符fd的数量不受限制。select最大的缺陷是单个进程所打开的socket描述符fd的数量是有限制的，默认1024。epoll在1G内存的机器上可以打开10万左右的连接，内存越大，打开的连接越多。</p>
<p data-track="307">&nbsp;</p>
<p data-track="308">区别二：</p>
<p data-track="309">epoll的IO效率不会随着fd数目的增加而线性下降。select/poll每次调用都会线性扫描全部socket集合，导致效率线性下降。epoll是根据每个fd上面的回调函数实现的，只有活跃的socket才会主动调用回调函数。</p>
<p data-track="310">&nbsp;</p>
<p data-track="311">区别三：</p>
<p data-track="312">epoll使用mmap加速内核与用户空间的消息传递。为了能让内核把fd消息通知给用户空间，select和poll需要通过内存复制来实现。epoll则通过mmap让内核和用户空间共享一块内存来避免内存复制。</p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.9315773042754629" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-12 22:35">2025-03-12 22:34</span>&nbsp;
<a href="https://www.cnblogs.com/mjunz">东阳马生架构</a>&nbsp;
阅读(<span id="post_view_count">149</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18768799" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18768799);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18768799', targetLink: 'https://www.cnblogs.com/mjunz/p/18768799', title: 'Netty基础—3.基础网络协议' })">举报</a>
</div>
        