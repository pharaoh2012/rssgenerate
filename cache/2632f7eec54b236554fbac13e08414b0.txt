
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/CheeseFunction/p/19016003" title="发布于 2025-08-01 08:18">
    <span role="heading" aria-level="2">浅谈后缀自动机</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h3 id="写在前面">写在前面：</h3>
<p>好久没有写出一些优质（本来也就不优质）的文章了，主要是最近学业太忙，连之前的笔误也没来得及修改，在此致歉。当然，消失了这么长时间我觉得我还是学有所获的，比如学会了LCT,TopTree,SAM,PAM以及计算几何这些神奇的东西，当然我后面也都会抽时间把它们写下来，不过对我而言，最难的肯定属于SAM。当然，痛苦和收获是成正比例的（<s>装什么13</s>,SAM之所以苦难，主要是因为它太全能了，比如什么字符串匹配（KMP)，最长公共子串（LCS)，本质不同的子串计数，第k大子串输出等等等，SAM全部适用，而且时间复杂度均在 <span class="math inline">\(O(n)\)</span> 到 <span class="math inline">\(O(n + m)\)</span> 之间，是非常amazing的的数据结构啊。好了，说了这么多，我们，直接开始！</p>
<h3 id="从基础开始">从基础开始</h3>
<p>为了能够讲清楚后缀自动机的基本原理，我们先从最简单的字符串 <code>s = "abab"</code> 开始。</p>
<h4 id="1子串后缀">1.子串？后缀？</h4>
<p>我们知道，后缀自动机顾名思义，就是由后缀构成的自动机（废话），而后缀和子串呢，在我学的时候，总是被搅得一头雾水不知所措，所以把这两个东西分开说说：</p>
<ul>
<li>子串(Substring)：从字符串任意位置开始之后连续的一段我们称之为子串，对于 <span class="math inline">\(S\)</span> 的子串 <span class="math inline">\(Z\)</span> 满足以下性质：
<ol>
<li><span class="math inline">\(Z \in S\)</span> ,这不难理解，从 <span class="math inline">\(S\)</span> 里面揪出来的字符，自然就属于 <span class="math inline">\(S\)</span> 。<br>
2.子串的occurrences可以重叠，例如 <code>"ababa"</code> 的子串 <code>"aba"</code> 出现位置是 <span class="math inline">\([0 , 2]\)</span> 与 <span class="math inline">\([2,4]\)</span> 。<br>
3.长度为 <span class="math inline">\(n\)</span> 的字符串一共有 <span class="math inline">\(\frac{n \times{n + 1}}{2}\)</span> 个子串，这也不难理解，我们小学二年级就学过的组合数学，我们知道，一个子串的开头 <span class="math inline">\(i\)</span> 和结尾 <span class="math inline">\(j\)</span> 必须满足 <span class="math inline">\(i \le j\)</span> ，可以写成组合数学的形式就是：</li>
</ol>
</li>
</ul>
<p></p><div class="math display">\[C(n + 1 , 2) = \frac{n \times{n + 1}}{2}
\]</div><p></p><ul>
<li>后缀（Suffix）<br>
终于说到后缀了吗？你可能认为这很简单，当然事先说好，这只是开始，我们马上难度飙升（从第 <span class="math inline">\(3\)</span> 部分开始）。为了学习后缀自动机，我们一定要了解，对于后缀的一些特殊性质：
<ol>
<li>唯一性：对于每一个位置都有唯一的后缀，因为后缀是从一个位置 <span class="math inline">\(i\)</span> 一直连接到末尾的一种<strong>特殊子串</strong>，所以存在唯一性。<br>
2.覆盖性：这个比较有意思，我们可以证明，对于任意一个子串 <span class="math inline">\(Z\)</span> ，是某一个后缀得到真前缀，这非常好理解，我们假设 <span class="math inline">\(Z\)</span> 的开头为 <span class="math inline">\(i\)</span> ，直接选择开头为 <span class="math inline">\(i\)</span> 的后缀就可以了。<br>
3.包含性：对于一个字符串 <span class="math inline">\(s\)</span> 有后缀 <span class="math inline">\(s[i...|s|]\)</span> 和 <span class="math inline">\(s[j...|s|]\)</span> 且满足  <span class="math inline">\(i \le j\)</span> ，则后者是前者的后缀，举个例子,  <code>s="banana"</code> 其中 "nana" 是 "banana" 的后缀。</li>
</ol>
</li>
</ul>
<p>看到这里了吗？你学会后缀自动机~最简单的部分啦！接下来难度飙升，做好准备！</p>
<h3 id="2引入fsa">2.引入FSA</h3>
<p>有限状态自动机（Finite State Automaton , FSA)，是不是听起来就高级？错啦，其实一点都不难（假的）。</p>
<ul>
<li>2.1 有限状态自动机？<br>
我们认为，有限FSA有以下几个部分构成：
<ul>
<li>状态集合 <span class="math inline">\(Q\)</span> ，表示系统可能处于的所有状态。</li>
<li>字符集 <span class="math inline">\(\sum\)</span> ， 表示输入的字符串符号集合。</li>
<li>转移函数 <span class="math inline">\(\delta\)</span> ，给定当前状态和输入符号，决定下一个状态是什么。</li>
<li>初始状态 <span class="math inline">\(q_0\)</span> ，自动机一开始的状态。</li>
<li>终止集合 <span class="math inline">\(F\)</span> ，某些状态被标记为“接受状态”。</li>
</ul>
</li>
<li>2.2 FSA <span class="math inline">\(\to\)</span> SAM的一些特殊性质
<ul>
<li>确定性：每个状态对同一输入符号只有 <strong>唯一转移</strong> ， 这很重要！</li>
<li>最小性: SAM在所有DFA中是最小的，能够存下所有子串而且状态数最少，最多 <span class="math inline">\(2n - 1\)</span> 个状态 , <span class="math inline">\(4n - 3\)</span> 条边。</li>
<li>后缀连接：这个后面再说<br>
总之，FSA一定是一个DAG，这很重要（大声）。</li>
</ul>
</li>
</ul>
<h3 id="3-先说点别的">3. 先说点别的</h3>
<p>这不是在开玩笑，是的，说SAM必须要先说它最重要的核心逻辑endpos，对于一个子串 <span class="math inline">\(Z\)</span> , 其endpos 是它所有结束的位置，例如对于 <code>S="ababa"</code> 的子串 <code>Z="a"</code> ，那么其endpos $ = { 0 , 2 , 4 }$ 。那么都说了endpos 了，必须把等价类也交出来了，是的，我们规定：对于一个字符串 <span class="math inline">\(S\)</span> ，子串 <span class="math inline">\(i\)</span> 与 <span class="math inline">\(j\)</span> 是等价类当且仅当 <span class="math inline">\(endpos(i) = endpos(j)\)</span> 。比如 <code>s = "abab"</code> 中：</p>
<ul>
<li>子串 <code>"ab"</code> 的 <code>enpos = {2 , 4}</code></li>
<li>子串 <code>"b"</code> 的 <code>endpos = {2 , 4}</code><br>
那么我们称 <code>"ab"</code> 和 <code>"b"</code> 是一个等价类。学过SAM的同学肯定知道，这些等价类是属于同一个状态的，没错，可我还是不想写那个部分，我们还要说一些endpos的特殊性质。同属一个等价类中的所有子串长度是连续的，而且对于一个等价类集合 <span class="math inline">\(D\)</span> 存在：若其中一个子串的长度大于等于另一个字串的长度，那么后者是前者的后缀，我们还是拿上面那个例子说事，此时的 <span class="math inline">\(D\)</span> 有 <code>"ab"</code> 和 <code>"b"</code> 两个子串，其中前者长度大于后者，所以后者是前者的后缀而且这个 <span class="math inline">\(D\)</span> 的长度在 <span class="math inline">\([1 , 2]\)</span> 而且连续，如何证明这个性质是正确的？我们尝试使用字符串匹配的思路解释，若对于一个后缀<span class="math inline">\(i\)</span> 是另一个后缀 <span class="math inline">\(j\)</span> 的后缀，容易证明 <span class="math inline">\(endpos(j) \in endpos(i)\)</span> ， 这样就很好理解了，当然这个性质解释了我们后面一个非常重要的东西Parent Tree。还有一个性质，就是对于一个长度为 <span class="math inline">\(n\)</span> 的字符串 <span class="math inline">\(S\)</span> 的所有等价类数量不超过 <span class="math inline">\(2n\)</span> ， 这后面会说。</li>
</ul>
<h3 id="3母树">3.母树</h3>
<p>母树（Parent Tree) ，讲解这个之前，我们需要先引入一个东西 <span class="math inline">\(\sigma\)</span> ，它是一个虚拟的东西用来充当根节点，对于 <span class="math inline">\(\sigma\)</span> 的endpos集合大小为 <span class="math inline">\(n\)</span> 且每个位置都包含，为什么要这么干呢？对于母树，相当于把我们上面所说的endpos性质1变成了树的形式，在母树上，任何一个父节点 <span class="math inline">\(i\)</span> 满足其所有子节点 <span class="math inline">\(j\)</span> 满足 <span class="math inline">\(endpos(j) \in endpos(i)\)</span> ，也就是说， <span class="math inline">\(i\)</span> 的子节点全部是 <span class="math inline">\(i\)</span> 的后缀。通过以上性质可知，Parent Tree 的高度是 <span class="math inline">\(n\)</span> 级别的，为了帮助理解，我们对于字符串 <code>S = "abcabdf"</code> 做一颗母树：</p>
<p>以下是字符串 <code>S = "abcabdf"</code> 的 <strong>Parent树（后缀链接树）</strong> 的构建步骤和图表：</p>
<div class="mermaid">graph TD
    %% 根节点（空串）
    0["0: endpos={0,1,2,3,4,5,6}\n子串: ε"] 

    %% 第一层节点
    0 --&gt; 1["1: endpos={1,4}\n子串: a"]
    0 --&gt; 7["7: endpos={6}\n子串: f"]
    0 --&gt; 3["3: endpos={3}\n子串: c"]
    0 --&gt; 8["8: endpos={5}\n子串: d"]

    %% 第二层节点
    1 --&gt; 2["2: endpos={2,5}\n子串: ab, b"]
    3 --&gt; 4["4: endpos={4}\n子串: abc, bc"]
    8 --&gt; 9["9: endpos={6}\n子串: df"]

    %% 第三层节点
    2 --&gt; 5["5: endpos={5}\n子串: abcab, bcab, cab"]
    4 --&gt; 6["6: endpos={6}\n子串: abcabd, bcabd, cabd"]
</div><p>但是这么看起来，母树的时间还是空间复杂度都很优秀了呀？是不是可以收手啦？当然不行！观察上面的母树一共 <span class="math inline">\(10\)</span> 个节点，而我们的SAM呢？也要十个节点，这个例子不是很好，大家可以尝试使用 <code>S = "abcbc"</code> 来举例子，最后的结果可以表明，SAM终究还是优化了 <span class="math inline">\(3\)</span> 个节点，我们来看一下SAM:</p>
<div class="mermaid">graph LR
    %% 初始状态
    0((0))

    %% 单字符状态
    0 --a--&gt; 1((1))
    0 --b--&gt; 2[[2]]
    0 --c--&gt; 3((3))
    0 --d--&gt; 8((8))
    0 --f--&gt; 7((7))

    %% 多字符状态
    1 --b--&gt; 2
    2 --c--&gt; 4((4))
    4 --a--&gt; 5[[5]]
    5 --b--&gt; 6[[6]]
    5 --d--&gt; 9((9))
    8 --f--&gt; 9

    %% 后缀链接（虚线）
    2 -.-&gt; 1
    4 -.-&gt; 2
    5 -.-&gt; 4
    6 -.-&gt; 5
    9 -.-&gt; 8
</div><p>欸，我们发现这个SAM好像有什么特殊的好东西，把所有虚线拎出来，我们发现，刚好构成了Parent Tree , 这是怎么一回事？在此之前，先把 Suffix Links 说完！</p>
<h3 id="4后缀连接">4.后缀连接</h3>
<p>后缀链接（Suffix Links) ，表示对于一个非 <span class="math inline">\(\sigma\)</span> 的状态 <span class="math inline">\(u\)</span> ，其后缀连接连接到SAM中  <span class="math inline">\(u\)</span> 的最长真后缀所在的状态，我们定义真后缀为不等于 <span class="math inline">\(u\)</span> 的后缀。那么这个后缀链接有什么用处啊？我们将在后面的构造SAM中说明，先说一些特殊性质：</p>
<h4 id="1-树形结构parent-树"><strong>1. 树形结构（Parent 树）</strong></h4>
<ul>
<li><strong>性质</strong>：所有后缀链接构成一棵以初始状态 $ \text{state}_0 $（空串）为根的树，称为 <strong>Parent 树</strong> 或 <strong>后缀链接树</strong>。</li>
<li><strong>原因</strong>：</li>
<li>每个非初始状态有且只有一个后缀链接（函数性质）。</li>
<li>沿后缀链接跳转最终必然到达初始状态（无环）。</li>
<li><strong>示例</strong>：</li>
</ul>
<div class="mermaid">  graph TD
      0((0)) --&gt; 1((1))
      0 --&gt; 3((3))
      1 --&gt; 2((2))
      2 --&gt; 4((4))
</div><h4 id="2-子串长度的严格递减"><strong>2. 子串长度的严格递减</strong></h4>
<ul>
<li><strong>性质</strong>：若 $ \text{link}[u] = v $，则 $ \text{len}(v) &lt; \text{len}(u) $。</li>
<li><strong>解释</strong>：</li>
<li>$ v $ 是 $ u $ 的最长真后缀，因此 $ v $ 的子串长度必然更短。</li>
</ul>
<h4 id="3-endpos-的包含关系"><strong>3. <code>endpos</code> 的包含关系</strong></h4>
<ul>
<li><strong>性质</strong>：若 $ \text{link}[u] = v $，则 $ \text{endpos}(u) \subseteq \text{endpos}(v) $。</li>
<li><strong>推论</strong>：</li>
<li>在 Parent 树中，子节点的 <code>endpos</code> 是父节点的子集。</li>
</ul>
<h4 id="4-后缀链接与状态分裂"><strong>4. 后缀链接与状态分裂</strong></h4>
<ul>
<li><strong>性质</strong>：在 SAM 的增量构造过程中，后缀链接指导状态的克隆（分裂）。</li>
<li><strong>过程</strong>：</li>
</ul>
<ol>
<li>当插入字符 $ c $ 导致 <code>endpos</code> 不一致时，需克隆状态。</li>
<li>新状态的 <code>link</code> 指向原 <code>link</code> 的目标，并更新相关转移。</li>
</ol>
<h4 id="5-叶子节点的后缀特性"><strong>5. 叶子节点的后缀特性</strong></h4>
<ul>
<li><strong>性质</strong>：Parent 树的叶子节点对应原字符串的 <strong>完整后缀</strong>。</li>
<li><strong>应用</strong>：</li>
<li>通过遍历叶子节点，可以枚举所有后缀。</li>
</ul>
<h4 id="6-线性跳转优化"><strong>6. 线性跳转优化</strong></h4>
<ul>
<li><strong>性质</strong>：通过后缀链接跳转，可将子串匹配的时间复杂度均摊为 $ O(1) $。</li>
</ul>
<hr>
<p>很全面了吧，母树真的不难吧，来吧，开始学习真正的SAM</p>
<h3 id="5-构建sam">5. 构建SAM</h3>
<p>SAM（Suffix Automaton ， SAM) ， 在我们前面所提到的所有信息中，我们主要讲述了SAM的全能以及一些特殊性质，以下是一些你必须要知道的规则：</p>
<ol>
<li>起点和终点之间的边代表给当前字符串添加一个字符。</li>
<li>从根到任意点的路径是 <span class="math inline">\(S\)</span> 的一个子串。</li>
<li>保证每一个节点上的点全部属于一个等价类。</li>
<li>点和点之间要有正确的父子关系，也就是说，到达 <span class="math inline">\(i\)</span> 的所有子串长度必须大于 <span class="math inline">\(i\)</span> 的父亲的子串长度，而且保证以 <span class="math inline">\(i\)</span> 为父亲的所有子节点均让 <span class="math inline">\(i\)</span> 是当前子节点子串后缀。</li>
</ol>
<p>接下来的学习，我们会连图带着文本一起学，一起来看一个例子 <code>S="abab"</code> ：</p>
<ol>
<li>初始化，我们放一个根节点 <span class="math inline">\(0\)</span> ，代表着空串，方便构建后缀自动机。</li>
</ol>
<div class="mermaid">graph LR
    0((0: len=0, link=null))
</div><ol start="2">
<li>接下来，我们需要插入 <code>a</code> 这一个新状态，此时我们的 last 指针指向 <span class="math inline">\(0\)</span> ，此时SAM上面没有子串，那么就设置一个新状态 <span class="math inline">\(1\)</span> ，令 <span class="math inline">\(1\)</span> 的 len 为 1，顺带提一嘴，我们的len表示当前节点中最长子串,link表示后缀连接：</li>
</ol>
<div class="mermaid">graph LR
    0((0)) --a--&gt; 1((1: len=1, link=0))
</div><p>此时last指向 <span class="math inline">\(1\)</span> 。<br>
3. 插入一个 <code>b</code>：<br>
设置一个新的状态 <code>2</code> ， 因为当前字符串中有 <code>{"a" , "")</code> 这两个子串 ，意味着会产生 <code>{"ab" , "b"}</code> 两个子串 <code>"ab"</code> 好说，但是 <code>"b"</code> 怎么办呢？还记得我们学过的后缀连接吗，没错，这个东西将在这里发挥用处，我们知道，不是对于每一个节点都要直接连接向当前节点的，对于要插入的一个字符 <span class="math inline">\(c\)</span> 以及它的父亲 <span class="math inline">\(i\)</span> ， 我们知道，<strong>对于 <span class="math inline">\(c\)</span> 可能产生的所有子串是每一个对于当前字串存在的 <span class="math inline">\(i\)</span> 的后缀并拼接上 <span class="math inline">\(c\)</span> 的字符串</strong> ， 是不是有点难懂了，没事，你可以先记下来，后面练多了就知道了。我们观察以上这句话和后缀链接的性质，没错，就是沿着后缀连接向上跳，当且仅当当前节点的后缀连接不是不存在而且当前节点也不存在子节点 <span class="math inline">\(c\)</span> ，我们就将 <span class="math inline">\(c\)</span> 添加到当前节点的儿子，那有的人就好奇了，欸为什么我们不能把 <span class="math inline">\(c\)</span> 连接到已经有 <span class="math inline">\(c\)</span> 的节点上呢？首先就是人家都有 <span class="math inline">\(c\)</span> 了，没办法往上面去挂。还有一个重要的原因就是我们需要连后缀链。是的，对于当前节点的 <span class="math inline">\(c\)</span> 儿子， 我们认定当其len 正好是它父亲的长度 + 1 的时候，我们就让插入的 <span class="math inline">\(c\)</span> 节点link为这个 <span class="math inline">\(c\)</span> 儿子，原因很好解释，因为根据endpos的性质可知：这个子节点是它父亲的直接拓展，这个子节点的子串集合是最简单的了，说白了就是不可能有别的子串在当前节点“捣乱”了，可以放心连接。</p>
<div class="mermaid">graph LR
    0((0)) --a--&gt; 1((1))
    0 --b--&gt; 2((2: len=2, link=0))
    1 --b--&gt; 2
</div><ol start="3">
<li>还要再插入一个 <code>a</code> , 没什么好说的，直接做就好了：</li>
</ol>
<div class="mermaid">graph LR
    0((0)) --a--&gt; 1((1))
    0 --b--&gt; 2((2))
    1 --b--&gt; 2
    2 --a--&gt; 3((3: len=3, link=1))
    1 --a--&gt; 3
</div><ol start="4">
<li>也是直接操作就可以了，没什么好说的：</li>
</ol>
<div class="mermaid">graph LR
    0((0)) --a--&gt; 1((1))
    0 --b--&gt; 2((2))
    1 --b--&gt; 2
    2 --a--&gt; 3((3))
    3 --b--&gt; 4((4: len=4, link=2))
    1 --a--&gt; 3
    2 --b--&gt; 4
</div><hr>
<p>其实这个例子举得很失败，但是当我们拿出 <code>S="abcb"</code> 的SAM 的时候，一切都变了</p>
<div class="mermaid">graph LR
    0 --a--&gt; 1
    0 --b--&gt; 5
    1 --b--&gt; 5
    5 --c--&gt; 3
    3 --b--&gt; 4
    5 --b--&gt; 4
    2 --c--&gt; 3
    1 -.-&gt; 0
    2 -.-&gt; 5
    3 -.-&gt; 0
    4 -.-&gt; 5
    5 -.-&gt; 0
</div><p>欸，这个 <span class="math inline">\(5\)</span> 是怎么来的，不是只有四个字符吗，没错，它分裂了，对于我们上面讲的，插入最后一个 <code>b</code> 的时候，我们跳着后缀链发现这个节点的 <code>b</code> 号儿子存在而且其len不为当前节点的len + 1 的时候，说明这个endpos有更长的子串，我们没有办法直接连接，不然如图所示：</p>
<div class="mermaid">graph LR
    0 --a--&gt; 1
    1 --b--&gt; 2
    0 --b--&gt; 2
    0 --c--&gt; 3
    2 --c--&gt; 3
    3 --b--&gt; 4
</div><p>此时我们的节点 <span class="math inline">\(2\)</span> 上发生了冲突，是的节点 <span class="math inline">\(2\)</span> 上的子串本来是 <code>{"ab" , "a"}</code> , 我们发现他们的endpos是不等价的，此时我们就需要把 <span class="math inline">\(2\)</span> 的一些子串单独拎出来，也就是 <code>b</code> 给拎出来（也就是把len小于等于插入当前字符子串最长真后缀的所有子串拎出来） ， 这样子子串被分成两部分，不再互相干扰，我们再克隆一下原来节点的状态就可以了，so sample 有没有？</p>
<p>好了，恭喜你，学会了后缀自动机，也就是SAM的基本操作了，要彻底学会它，你还要学会一些基本的应用。</p>
<h3 id="6sam的基本应用">6.SAM的基本应用</h3>
<p>我说过的，SAM是基本全能的amazing算法，它甚至可以代替我们的KMP!<br>
以下是 <strong>后缀自动机（SAM）的基本应用</strong> 及其实现方法，涵盖字符串匹配、子串统计、最长公共子串等经典问题，附代码模板和关键分析：</p>
<hr>
<h4 id="1-检查子串是否存在"><strong>1. 检查子串是否存在</strong></h4>
<p><strong>问题</strong>：判断模式串 <code>P</code> 是否是 <code>S</code> 的子串。<br>
<strong>方法</strong>：在 SAM 上从初始状态沿 <code>P</code> 的字符转移，若全程无阻塞则存在。<br>
<strong>代码</strong>（C++）：</p>
<pre><code class="language-cpp">bool is_substring(SAM &amp;sam, const string &amp;P) {
    int u = 0; // 初始状态
    for (char c : P) {
        if (!sam.st[u].trans.count(c)) return false;
        u = sam.st[u].trans[c];
    }
    return true;
}
</code></pre>
<p><strong>复杂度</strong>：<code>O(|P|)</code>。</p>
<hr>
<h4 id="2-统计不同子串数量"><strong>2. 统计不同子串数量</strong></h4>
<p><strong>问题</strong>：计算 <code>S</code> 中本质不同的子串个数。<br>
<strong>方法</strong>：利用 SAM 的状态性质，每个状态贡献 <code>len[u] - len[link[u]]</code> 个新子串。<br>
<strong>公式</strong>：</p>
<p></p><div class="math display">\[\text{ans} = \sum_{u} (\text{len}[u] - \text{len}[\text{link}[u]])
\]</div><p></p><p><strong>代码</strong>：</p>
<pre><code class="language-cpp">int count_distinct_substrings(SAM &amp;sam) {
    int res = 0;
    for (int u = 1; u &lt; sam.st.size(); u++) {
        res += sam.st[u].len - sam.st[sam.st[u].link].len;
    }
    return res;
}
</code></pre>
<p><strong>复杂度</strong>：<code>O(n)</code>。</p>
<hr>
<h4 id="3-计算子串出现次数"><strong>3. 计算子串出现次数</strong></h4>
<p><strong>问题</strong>：统计某个子串 <code>P</code> 在 <code>S</code> 中的所有出现次数。<br>
<strong>方法</strong>：</p>
<ol>
<li>预处理每个状态的 <code>cnt</code>（通过 Parent 树 DFS 或拓扑排序计算）。</li>
<li>在 SAM 上找到 <code>P</code> 对应的状态 <code>u</code>，其 <code>cnt[u]</code> 即为答案。</li>
</ol>
<p><strong>代码</strong>：</p>
<pre><code class="language-cpp">void preprocess_count(SAM &amp;sam) {
    vector&lt;int&gt; cnt(sam.st.size(), 1);
    // 按 len 倒序拓扑排序（Parent 树的逆序）
    vector&lt;int&gt; order(sam.st.size());
    iota(order.begin(), order.end(), 0);
    sort(order.begin(), order.end(), [&amp;](int a, int b) {
        return sam.st[a].len &gt; sam.st[b].len;
    });
    for (int u : order) {
        if (sam.st[u].link != -1) {
            cnt[sam.st[u].link] += cnt[u];
        }
    }
    sam.cnt = cnt;
}

int substring_count(SAM &amp;sam, const string &amp;P) {
    int u = 0;
    for (char c : P) {
        if (!sam.st[u].trans.count(c)) return 0;
        u = sam.st[u].trans[c];
    }
    return sam.cnt[u];
}
</code></pre>
<p><strong>复杂度</strong>：预处理 <code>O(n)</code>，查询 <code>O(|P|)</code>。</p>
<hr>
<h4 id="4-寻找最长重复子串"><strong>4. 寻找最长重复子串</strong></h4>
<p><strong>问题</strong>：找到 <code>S</code> 中最长的至少出现两次的子串。<br>
<strong>方法</strong>：在 Parent 树中寻找最深的满足 <code>cnt[u] ≥ 2</code> 的节点。<br>
<strong>代码</strong>：</p>
<pre><code class="language-cpp">string longest_repeated_substring(SAM &amp;sam) {
    int max_len = 0, best_u = -1;
    for (int u = 1; u &lt; sam.st.size(); u++) {
        if (sam.cnt[u] &gt;= 2 &amp;&amp; sam.st[u].len &gt; max_len) {
            max_len = sam.st[u].len;
            best_u = u;
        }
    }
    // 从 best_u 回溯构造子串
    string res;
    int u = best_u;
    while (u != 0) {
        for (auto [c, v] : sam.st[sam.st[u].link].trans) {
            if (v == u) {
                res.push_back(c);
                break;
            }
        }
        u = sam.st[u].link;
    }
    reverse(res.begin(), res.end());
    return res;
}
</code></pre>
<p><strong>复杂度</strong>：<code>O(n)</code>。</p>
<hr>
<h4 id="5-多字符串最长公共子串lcs"><strong>5. 多字符串最长公共子串（LCS）</strong></h4>
<p><strong>问题</strong>：求多个字符串的最长公共子串。<br>
<strong>方法</strong>：构建广义 SAM，对每个状态维护来自每个字符串的匹配次数。<br>
<strong>代码框架</strong>：</p>
<pre><code class="language-cpp">string longest_common_substring(const vector&lt;string&gt; &amp;strs) {
    GeneralizedSAM gsam;
    for (const string &amp;s : strs) {
        gsam.extend(s);
    }
    // 统计每个状态在所有字符串中的出现情况
    // 返回满足全覆盖条件的最长状态对应的子串
    // （具体实现需根据广义SAM的构造调整）
}
</code></pre>
<p><strong>复杂度</strong>：<code>O(\sum |S_i|)</code>。</p>
<hr>
<h4 id="6-字典序第-k-小子串"><strong>6. 字典序第 k 小子串</strong></h4>
<p><strong>问题</strong>：求 <code>S</code> 的所有子串中字典序第 <code>k</code> 小的子串。<br>
<strong>方法</strong>：在 SAM 的 DAG 上动态规划预处理每个状态的路径数，然后按字典序 DFS。<br>
<strong>代码逻辑</strong>：</p>
<pre><code class="language-cpp">void preprocess_kth(SAM &amp;sam) {
    vector&lt;int&gt; dp(sam.st.size(), 1);
    // 按 len 倒序拓扑排序
    for (int u : reverse_topological_order) {
        for (auto [c, v] : sam.st[u].trans) {
            dp[u] += dp[v];
        }
    }
}

string kth_substring(SAM &amp;sam, int k) {
    string res;
    int u = 0;
    while (k &gt; 0) {
        for (auto [c, v] : sam.st[u].trans) {
            if (k &gt; dp[v]) k -= dp[v];
            else {
                res.push_back(c);
                u = v;
                k--;
                break;
            }
        }
    }
    return res;
}
</code></pre>
<p><strong>复杂度</strong>：预处理 <code>O(n)</code>，查询 <code>O(|ans|)</code>。</p>
<hr>
<h4 id="总结表"><strong>总结表</strong></h4>
<table>
<thead>
<tr>
<th>应用场景</th>
<th>核心方法</th>
<th>时间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>子串存在性检查</td>
<td>SAM 上转移匹配</td>
<td><span class="math inline">\(O(|P|)\)</span></td>
</tr>
<tr>
<td>不同子串计数</td>
<td>利用 <code>len[u] - len[link[u]]</code></td>
<td><span class="math inline">\(O(n)\)</span></td>
</tr>
<tr>
<td>子串出现次数</td>
<td>Parent 树 DFS 统计 <code>cnt</code></td>
<td>预处理 <span class="math inline">\(O(n)\)</span></td>
</tr>
<tr>
<td>最长重复子串</td>
<td>找 <code>cnt ≥ 2</code> 的最深状态</td>
<td><span class="math inline">\(O(n)\)</span></td>
</tr>
<tr>
<td>多字符串 LCS</td>
<td>广义 SAM + 状态覆盖统计</td>
<td><span class="math inline">\(O(\sum |S_i|)\)</span></td>
</tr>
<tr>
<td>字典序第 k 小子串</td>
<td>DAG 上 DP + 字典序 DFS</td>
<td>预处理 <span class="math inline">\(O(n)\)</span></td>
</tr>
</tbody>
</table>
<p>恭喜你，现在你是真的学完SAM啦</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.024305555555555556" data-date-updated="2025-08-01 08:53">2025-08-01 08:18</span>&nbsp;
<a href="https://www.cnblogs.com/CheeseFunction">吃奶酪的猫</a>&nbsp;
阅读(<span id="post_view_count">8</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19016003);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19016003', targetLink: 'https://www.cnblogs.com/CheeseFunction/p/19016003', title: '浅谈后缀自动机' })">举报</a>
</div>
        