
	<div class="postTitle">
		<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/dnboy/p/18691857" title="发布于 2025-01-26 15:31">
    <span role="heading" aria-level="2">分布式系统学习10：分布式事务</span>
    

</a>

	</div>
	<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>这是小卷对<a href="https://so.csdn.net/so/search?q=%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener nofollow">分布式系统</a>架构学习的第13篇文章，今天学习面试中高频问题：分布式事务，为什么要用分布式事务，分布式事务的实现方案有哪些，方案对比优缺点；</p>
</blockquote>
<h2 id="1知识体系">1.知识体系</h2>
<p><img src="https://img2024.cnblogs.com/blog/2784584/202501/2784584-20250126152939439-1967290123.png" alt="" loading="lazy"></p>
<h2 id="1为什么要用分布式事务">1.为什么要用分布式事务</h2>
<p>单体架构时，以本地事务为例，业务场景是下单场景，用户下单、创建订单、扣减库存这些操作都可以在一个数据库事务中完成。</p>
<p><img src="https://img2024.cnblogs.com/blog/2784584/202501/2784584-20250126152952352-2146031345.png" alt="" loading="lazy"></p>
<p>而随着业务的增长，系统转变为分布式系统，原有的单体架构也拆分为多个微服务。下单场景需要在多个服务间操作，需要保证所有操作都能成功，保证整个下单流程的数据一致性，就需要用到分布式事务了</p>
<p><img src="https://img2024.cnblogs.com/blog/2784584/202501/2784584-20250126153003147-380342989.png" alt="" loading="lazy"></p>
<h2 id="2理论">2.理论</h2>
<ul>
<li><strong>分布式理论的CP</strong> -&gt; 刚性事务</li>
</ul>
<p>遵循ACID，对数据要求强一致性</p>
<ul>
<li><strong>分布式理论的AP+BASE</strong> -&gt; 柔性事务</li>
</ul>
<p>遵循BASE，允许一定时间内不同节点的数据不一致，但要求最终一致。</p>
<p>这里重新复习一遍BASE理论是什么：</p>
<ul>
<li>基本可用 <strong>Basically Available</strong></li>
<li>软状态 <strong>Soft State</strong></li>
<li>最终一致性 <strong>Eventually Consistent</strong></li>
</ul>
<p>基本可用：是指系统出现未知故障时，还是能用的；</p>
<p>软状态：允许系统存在中间态，即所有副本数据允许存在延迟；</p>
<p>最终一致性：存在软状态，在一定时间后，所有副本数据保持一致，从而达到数据最终一致性；</p>
<h2 id="3刚性事务cp模式">3.刚性事务（CP模式）</h2>
<p>刚性事务指的是强一致性，基础是XA协议，XA协议是一个基于<strong>数据库</strong>的分布式事务协议，其分为两部分：<strong>事务管理器（Transaction Manager）*<em>和*</em>本地资源管理器（Resource Manager）</strong>。事务管理器作为一个全局的调度者，负责对各个本地资源管理器统一号令提交或者回滚；</p>
<p>而2PC （两阶段提交）和3PC（三阶段提交）都是由XA协议衍生出来的</p>
<h3 id="31两阶段提交2pc">3.1两阶段提交（2PC）</h3>
<blockquote>
<p>引入一个作为协调者（coordinator）的组件来统一掌控所有参与者（participant）的操作结果，并最终指示这些节点是否要把操作结果进行真正的提交</p>
</blockquote>
<p>2PC指的是 Prepare &amp; Commit</p>
<p><strong>第一阶段：准备阶段</strong>：</p>
<ul>
<li>协调者向所有参与者发送REQUEST-TO-PREPARE</li>
<li>当参与者收到REQUEST-TO-PREPARE消息后，它向协调者发送消息PREPARE或者NO，表示事务是否准备好；如果发送是NO，那么事务回滚；</li>
</ul>
<p><strong>第二阶段：提交阶段</strong></p>
<ul>
<li>协调者收集所有参与者的返回信息，如果所有参与者都回复PREPARED，那么协调者向所有参与者发送COMMIT消息，否则，协调者发送ABORT消息</li>
<li>参与者收到协调者发来的Commit消息或Abort消息，它将执行提交或回滚，并向协调者发送DONE消息确认</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/2784584/202501/2784584-20250126153015311-1352700410.png" alt="" loading="lazy"></p>
<p><strong>两阶段提交的缺点：</strong></p>
<ul>
<li><strong>网络抖动导致数据不一致</strong>：第二阶段协调者向参与者发送commit命令后，如果发生网络抖动，有一部分参与者未收到commit请求，则无法执行事务提交，影响整个系统数据一致性；</li>
<li><strong>超时导致的同步阻塞问题</strong>：2PC中所有参与者节点都是事务阻塞型，当一个节点通信超时，其余参与者都会被阻塞；</li>
<li><strong>单点故障的风险</strong>：整个过程严重依赖协调者，如果协调者故障，参与者处于锁定资源的状态，无法完成事务commit的操作。即使重新选择一个协调者，也无法解决因前一个协调者宕机导致的阻塞问题；</li>
</ul>
<blockquote>
<p>2PC只适用于两个数据库（数据库实现了XA协议）之间使用，限制较大，两个系统间无法使用</p>
</blockquote>
<h3 id="32-三阶段提交3pc">3.2 三阶段提交（3PC）</h3>
<blockquote>
<p>在2PC的基础上，第一阶段和第二阶段中插入一个准备阶段，同时在协调者和参与者中都引入超时机制，当参与者为收到协调者发送的commit请求后，也会对本地事务commit，不会一直阻塞等待</p>
</blockquote>
<p>过程如下：</p>
<ul>
<li><strong>CanCommit</strong>：协调者向所有参与者发生Cancommit命令，算法可以执行事务提交操作，如果都响应YES，则下一阶段；</li>
<li><strong>PreCommit</strong>：协调者向所有参与者发送Precommit命令，是否可以进行事务预提交操作。参与者如果已执行了事务操作，则回复YES，进入下一阶段。如果回复NO，或者协调者没有收到参与者的回复，协调者就向所有参与者发送Abort请求，执行事务的中断；</li>
<li><strong>DoCommit</strong>：所有参与者已经回复YES，协调者发DoCommit命令正式提交事务，如果协调者没有收到参与者的ACK响应，则发Abort请求给所有参与者，中断事务。</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/2784584/202501/2784584-20250126153025990-613869124.png" alt="" loading="lazy"></p>
<p><strong>小结：</strong></p>
<p>2PC存在使用限制的问题，3PC存在数据不一致的问题，两者在实际中很少使用；</p>
<h2 id="4柔性事务ap-base-最终一致性">4.柔性事务（AP +BASE 最终一致性）</h2>
<p>柔性事务要求最终一致性，允许有中间态，柔性事务可以分为：TCC、Saga、本地消息表、MQ事务方案、最大努力通知</p>
<h3 id="41-tcc-补偿事务">4.1 TCC 补偿事务</h3>
<blockquote>
<p>TCC（Try Confirm Cancel）补偿事务，与2PC不同的是，2PC是在DB层面，TCC是在应用层面</p>
</blockquote>
<p>三个操作步骤：</p>
<ul>
<li><strong>Try阶段</strong>：完成业务检查，预留必须得业务资源；</li>
<li><strong>Confirm阶段</strong>：执行业务逻辑，只使用Try阶段预留的业务资源。Confirm需满足幂等性，保证一个分布式事务只成功一次；</li>
<li><strong>Cancel阶段</strong>：取消操作，释放Try阶段预留的业务资源，需要幂等性；</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/2784584/202501/2784584-20250126153037469-1414439863.png" alt="" loading="lazy"></p>
<h3 id="42-saga事务">4.2 Saga事务</h3>
<blockquote>
<p>Saga可以看做一个异步的、利用队列实现的补偿事务。</p>
<p>由一系列本地事务构成，每个本地事务更新了数据库后，会发布一条消息来触发Saga中的下一个本地事务的执行，如果某个本地事务失败了，Saga会执行这个失败事务之前 已提交的所有事务的补偿操作</p>
</blockquote>
<p>Saga的实现最流行的两种方式是：</p>
<ul>
<li><strong>基于事件的方式</strong>。这种方式没有协调中心，整个模式的工作方式就像舞蹈一样，各个舞蹈演员按照预先编排的动作和走位各自表演，最终形成一只舞蹈。处于当前Saga下的各个服务，会产生某类事件，或者<strong>监听其它服务产生的事件并决定是否需要针对监听到的事件做出响应</strong>。</li>
<li><strong>基于命令的方式</strong>。这种方式的工作形式就像一只乐队，由一个指挥家（协调中心）来协调大家的工作。<strong>协调中心</strong>来告诉Saga的参与方应该执行哪一个本地事务</li>
</ul>
<p><strong>基于事件的方式</strong></p>
<p>事务回滚：</p>
<ul>
<li>基于事件的回滚，需要相关服务提供补偿操作接口，某个节点发生无法执行事件操作时，需要发送事件通知，其他已执行了事务的节点监听事件并回应</li>
<li>优点：简单容易理解，适用于分布式事务只有2-4个步骤的场景。示例如：下单-扣款-库存减货-物流服务-订单完成 这样简单的场景</li>
<li>缺点：参与业务方多时，会出现很多问题</li>
</ul>
<h3 id="43本地消息表">4.3本地消息表</h3>
<blockquote>
<p>本地消息表的核心是将分布式事务拆成本地事务进行处理，最初是由eBay提出的</p>
</blockquote>
<p>下面以一个订单场景具体说明本地消息表的实现</p>
<p><em>例如，可以在订单库新增一个消息表，将新增订单和新增消息放到一个事务里完成，然后通过轮询的方式去查询消息表，将消息推送到 MQ，库存服务去消费 MQ。</em></p>
<p><img src="https://img2024.cnblogs.com/blog/2784584/202501/2784584-20250126153048193-179476728.png" alt="" loading="lazy"></p>
<p>执行流程为：</p>
<ol>
<li>订单服务，在一个事务里增加一个订单和一条消息，并提交</li>
<li>订单服务通过轮询的方式，查出未同步的消息，发到MQ，从设置失败重试机制；</li>
<li>库存服务，负责接收MQ消息，进行消费修改库存，由消费方保证幂等性；</li>
<li>库存服务修改成功后，调RPC接口修改订单服务的消息表状态；</li>
<li>修改失败，等待重试</li>
</ol>
<p>优点：方案轻量，消息可靠性不依赖消息中间件；</p>
<p>缺点：与业务强耦合，不可公用，消息数据与业务库同库，占资源；</p>
<h3 id="44-mq消息事务">4.4 MQ消息事务</h3>
<blockquote>
<p>MQ事务是对本地消息表的封装，将本地消息表存到MQ内部了，而不是业务数据库</p>
<p>将两个事务通过消息队列进行异步解耦，加上重试机制保证最终一致性</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/2784584/202501/2784584-20250126153057421-1467660646.png" alt="" loading="lazy"></p>
<p>发消息逻辑如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/2784584/202501/2784584-20250126153110163-1362321624.png" alt="" loading="lazy"></p>
<ul>
<li>发送方向MQ server端发送half消息；</li>
<li>MQ server将消息持久化后，发ACK给发送方</li>
<li>发送方开始执行本地事务</li>
<li>执行完成后，向MQ server提交二次确认</li>
<li>MQ server收到commit状态将半消息标记为可投递，订阅方将收到消息；MQ server如收到rollback状态则删除半消息，订阅方收不到消息；</li>
</ul>
<p>缺点：一次消息发送需要两次网络请求（half + commit/rolllback消息）</p>
<h3 id="45-最大努力通知">4.5 最大努力通知</h3>
<blockquote>
<p>也成为定期校对，是对MQ事务的进一步优化。</p>
<p>事务发起方增加了消息校对接口，也就是查询接口，事务接收方可以自行调用接口主动获取操作结果</p>
</blockquote>
<p>逻辑如下：</p>
<p>事务主动方尽最大努力（重试，轮询....）将事务发送给事务接收方，但是仍然存在消息接收不到，此时需要事务被动方主动调用事务主动方的消息校对接口查询业务消息并消费，这种通知的可靠性是由事务被动方保证的</p>
<p><img src="https://img2024.cnblogs.com/blog/2784584/202501/2784584-20250126153122574-1903417495.png" alt="" loading="lazy"></p>
<p>适用场景：</p>
<p><strong>业务通知类型的场景</strong>，如微信交易的结果，就是通过最大努力通知方式通知各个商户，既有回调通知，也有交易查询接口</p>
<h2 id="5-seata框架">5. Seata框架</h2>
<blockquote>
<p>开源的分布式事务解决方案，提供了AT、TCC、SAGA、XA事务模式，不需要自己手动实现分布式事务，直接使用框架就行</p>
</blockquote>
<p>有以下几个角色：</p>
<ul>
<li><strong>TC (Transaction Coordinator) - 事务协调者</strong>: 维护全局和分支事务的状态，驱动全局事务提交或回滚。</li>
<li><strong>TM (Transaction Manager) - 事务管理器</strong>: 定义全局事务的范围：开始全局事务、提交或回滚全局事务。</li>
<li><strong>RM (Resource Manager) - 资源管理器</strong>: 管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/2784584/202501/2784584-20250126153131781-2143099336.png" alt="" loading="lazy"></p>

</div>
<div class="clear"></div>

	<div class="postDesc">posted on 
<span id="post-date" data-last-update-days="0.8655021737743056" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-26 15:32">2025-01-26 15:31</span>&nbsp;
<a href="https://www.cnblogs.com/dnboy">卷福同学</a>&nbsp;
阅读(<span id="post_view_count">100</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18691857" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18691857);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18691857', targetLink: 'https://www.cnblogs.com/dnboy/p/18691857', title: '分布式系统学习10：分布式事务' })">举报</a>
</div>
