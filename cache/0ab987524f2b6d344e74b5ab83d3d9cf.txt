
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/EricsT/p/18870378" title="发布于 2025-05-14 19:15">
    <span role="heading" aria-level="2">变量和常量</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			    <div id="cnblogs_post_description" style="display: none">
        
        C#变量和常量
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>变量的基本概念</h1>
<p>变量本身被用来存储特定类型的数据，可以根据需要随时改变变量中所存储的数据值</p>
<p>变量具有名称、类型和值</p>
<p>变量名是变量在程序源代码中的标识</p>
<p>变量类型确定它所代表的内存的大小和类型</p>
<p>变量值是指它所代表的内存块中的数据</p>
<p>在程序执行过程中，变量的值可以发生变化</p>
<p>变量使用之前需要先声明变量，即指定变量的类型和名称</p>
<h1>变量的声明及赋值</h1>
<p>变量在使用之前，必须进行声明并赋值</p>
<h2>声明变量</h2>
<p>变量的使用是程序设计中一个十分重要的环节</p>
<p>为什么要声明变量呢？简而言之，就是告诉编译器这个变量是属于哪一种数据类型，这样子编译器才知道需要分配多少内存空间给它，以及能存放什么样的数据</p>
<p>在程序运行过程中，空间内的值是变化的，这个内存空间就称为变量</p>
<p>声明变量就是指定变量的名称和类型，变量的声明非常重要，未经声明的变量本身并不合法，也因此没有办法在程序中使用</p>
<p>在C#中，声明一个变量是由一个类型和跟在后面的一个或多个变量名组成的，多个变量之间用逗号分开，声明变量以分号结束</p>
<pre class="language-csharp highlighter-hljs"><code>类型 变量名_1, 变量名_2, 变量名_3;</code></pre>
<p>声明变量时，还可以初始化变量，即在每个变量名后面加上给变量赋初值的指令</p>
<pre class="language-csharp highlighter-hljs"><code>类型 变量名_1 = 变量值_1, 变量名_2 = 变量值_2, 变量名_3 = 变量值_3;</code></pre>
<p>在声明变量时，要注意变量名的命名规则</p>
<p>C#的变量名是一种标识符，应该符合标识符的命名规范</p>
<p>变量名是区分大小写的</p>
<p>下面列出变量的命名规则：</p>
<ul>
<li>变量名只能由数字、字母和下划线组成</li>
<li>变量名的第一个符号只能是字母和下划线，不能是数字</li>
<li>不能使用关键字作为变量名</li>
<li>一旦在一个语句块中定义了一个变量名，那么在变量的作用域内都不能再定义同名的变量</li>
</ul>
<p>在C#中允许使用汉字或其他语言文字作为变量名，在程序运行中是不会出现错误的，但是尽量是避免使用文字作为变量名</p>
<h2>变量赋值</h2>
<p>在C#中，使用赋值运算符<code>=</code>来给变量赋值，将赋值运算符右边的值赋给左边的变量</p>
<p>在对多个同类型的变量赋同一个值时，为了节省代码行数，可以同时对多个变量进行初始化</p>
<h2>变量的作用域</h2>
<p>由于变量被定义出来后只是暂存在内存中，等到程序执行到某一个节点后，该变量会被释放掉，也就是说变量有它的生命周期</p>
<p>变量的作用域是指程序源代码能够访问该变量的区域，若超出该区域，则在编译时会出现错误</p>
<p>在程序中，一般会根据变量的“有效范围”将变量分为“成员变量”和“局部变量”</p>
<h3>成员变量</h3>
<p>在类体中定义的变量称为成员变量</p>
<p>成员变量在整个类中都有效</p>
<p>类的成员变量在整个类中都有效</p>
<p>类的成员变量又可分为两种：静态变量和实例变量</p>
<p>如果在成员变量的类型前面加上关键字<code>static</code>这样的成员变量称为静态变量</p>
<p>静态变量的有效范围可以跨类，甚至可达到整个应用程序之内</p>
<p>对于静态变量，除了能在定义它的类内存取，还能直接以“类名.静态变量”的方式在其他类内使用</p>
<h3>局部变量</h3>
<p>在类的方法体中定义的变量称为局部变量</p>
<p>局部变量只在当前代码块中有效</p>
<p>在类的方法中声明的变量，包括方法的参数，都属于局部变量</p>
<p>局部变量只有在当前定义的方法内有效，不能用于类的其他方法中</p>
<p>局部变量的生命周期取决于方法，当方法被调用时，C#编译器为方法中的局部变量分配内存空间，当该方法调用结束后，则会释放方法中局部变量占用的内存空间，局部变量也将会销毁</p>
<p><img src="https://img2024.cnblogs.com/blog/3512406/202505/3512406-20250511004721429-1141478355.png"></p>
<h1>数据类型</h1>
<p>C#中的变量类型根据其定义可以分为两种：一种是值类型；另外一种是引用类型</p>
<p>这两种类型的差异在于数据的存储方式</p>
<p>值类型的变量本身直接存储数据</p>
<p>引用类型则存储实际数据的引用，程序通过此引用找到真正的数据</p>
<h2>值类型</h2>
<p>值类型变量直接存储其数据值，主要包含整数类型、浮点类型以及布尔类型等</p>
<p>值类型变量在栈中进行分配，因此效率很高，使用值类型主要目的是为了提高性能</p>
<p>值类型具有以下特性：</p>
<ul>
<li>值类型变量都存储在栈中</li>
<li>访问值类型变量时，一般都是直接访问其实例</li>
<li>每个值类型变量都有自己的数据副本，因此对一个值类型变量的操作不会影响其他变量</li>
<li>复制值类型变量时，复制的是变量的值，而不是变量的地址</li>
<li>值类型变量不能为null，必须具有一个确定的值</li>
</ul>
<p>值类型是从<code>System.ValueType</code>类继承而来的类型</p>
<h3>整数类型</h3>
<p>整数类型用来存储整数数值，即没有小数部分的数值</p>
<p>可以是正数，可以是负数，还可以是0</p>
<p>整型数据在C#中有3种表示形式：十进制、八进制以及十六进制</p>
<ul>
<li>十进制：123，456</li>
<li>八进制：0123（转换为十进制为83）</li>
<li>十六进制：0x25（转换为十进制为37），0Xb01e（转换为十进制为45086）</li>
</ul>
<p>不能以0作为十进制的开头（0除外）</p>
<p>八进制必须以0开头</p>
<p>十六进制必须以0X或0x开头</p>
<table style="border-collapse: collapse; width: 100.027%" border="1"><caption>C#内置的整数类型</caption>
<tbody>
<tr>
<td style="width: 33.3288%">类型</td>
<td style="width: 33.3288%">说明（8位等于1个字节）</td>
<td style="width: 33.3288%">范围</td>
</tr>
<tr>
<td style="width: 33.3288%">sbyte</td>
<td style="width: 33.3288%">8位有符号整数</td>
<td style="width: 33.3288%">-128~127</td>
</tr>
<tr>
<td style="width: 33.3288%">short</td>
<td style="width: 33.3288%">16位有符号整数</td>
<td style="width: 33.3288%">-32768~32767</td>
</tr>
<tr>
<td style="width: 33.3288%">int</td>
<td style="width: 33.3288%">32位有符号整数</td>
<td style="width: 33.3288%">-2147483648~2147483647</td>
</tr>
<tr>
<td style="width: 33.3288%">long</td>
<td style="width: 33.3288%">64位有符号整数</td>
<td style="width: 33.3288%">-9223372036854775808~9223372036854775807</td>
</tr>
<tr>
<td style="width: 33.3288%">byte</td>
<td style="width: 33.3288%">8位无符号整数</td>
<td style="width: 33.3288%">0~255</td>
</tr>
<tr>
<td style="width: 33.3288%">ushort</td>
<td style="width: 33.3288%">16位无符号整数</td>
<td style="width: 33.3288%">0~65535</td>
</tr>
<tr>
<td style="width: 33.3288%">uint</td>
<td style="width: 33.3288%">32位无符号整数</td>
<td style="width: 33.3288%">0~4294967295</td>
</tr>
<tr>
<td style="width: 33.3288%">ulong</td>
<td style="width: 33.3288%">64位无符号整数</td>
<td style="width: 33.3288%">0~18446744073709551615</td>
</tr>
</tbody>
</table>
<p>byte类型以及short类型是范围比较小的整数</p>
<p>如果正整数的范围没有超过65535，声明为<code>ushort</code>类型即可，更小的数值直接以<code>byte</code>类型处理</p>
<h3>浮点类型</h3>
<p>浮点类型变量主要用于处理含有小数的数值数据，浮点类型主要包含<code>float</code>和<code>double</code>两种数值类型</p>
<table style="border-collapse: collapse; width: 100.027%; height: 42px" border="1"><caption>浮点类型及描述</caption>
<tbody>
<tr style="height: 21px">
<td style="width: 32.3906%; height: 21px">类型</td>
<td style="width: 32.3906%; height: 21px">说明</td>
<td style="width: 32.3923%; height: 21px">范围</td>
</tr>
<tr>
<td style="width: 32.3906%">float</td>
<td style="width: 32.3906%">精确到7位数</td>
<td style="width: 32.3923%">±1.5 * 10<sup>-45</sup> ~ ±3.4 * 10<sup>38</sup></td>
</tr>
<tr style="height: 21px">
<td style="width: 32.3906%; height: 21px">double</td>
<td style="width: 32.3906%; height: 21px">精确到15~16位数</td>
<td style="width: 32.3923%; height: 21px">±5.0 * 10<sup>-324</sup> ~ ±1.7 * 10<sup>308</sup></td>
</tr>
</tbody>
</table>
<p>如果不做任何设置，包含小数点的数值都被认为是<code>double</code>类型</p>
<p>如果要将小数数值以<code>float</code>类型来处理，就应该强制使用<code>f</code>或者<code>F</code>将其指定为<code>float</code>类型</p>
<p>如果要将数值强制指定为<code>double</code>类型，则应该使用<code>d</code>或者<code>D</code>进行设置，但加不加<code>d</code>或者<code>D</code>没有硬性规定，可以加也可以不加</p>
<p>如果需要使用<code>float</code>类型变量时，必须在数值的后面跟随<code>f</code>或者<code>F</code>，否则编译器会直接将其作为<code>double</code>类型处理，也可以在<code>double</code>类型的值前面加上<code>(float)</code>，对其进行强制转换</p>
<h3>布尔类型</h3>
<p>布尔类型主要用来表示<code>true</code>和<code>false</code>值，一个布尔类型的变量，其值只能是<code>true</code>或者<code>false</code>，不能将其他的值指定给布尔类型变量，布尔类型变量不能与其他类型之间进行转换</p>
<p>布尔类型通常被用在流程控制中作为判断条件</p>
<p>在定义全局变量时，如果没有特定的要求不用对其进行初始化，整数类型和浮点类型的默认初始化为<code>0</code>，布尔类型的初始化为<code>false</code></p>
<h2>引用类型</h2>
<p>引用类型是构建C#应用程序的主要对象类型数据</p>
<p>在应用程序执行过程中，预先定义的对象类型以<code>new</code>创建对象实例，并且存储在堆中</p>
<p>堆是一种由系统弹性配置的内存空间，没有特定大小及存活时间，因此可以被弹性的运用于对象的访问</p>
<p>引用类型具有如下特征：</p>
<ul>
<li>必须在托管堆中为引用类型变量分配内存</li>
<li>使用<code>new</code>关键字来创建引用类型变量</li>
<li>在托管堆中分配的每个对象都有与之相关联的附件成员，这些成员必须初始化</li>
<li>引用类型变量可以引用同一个对象，在这种情形下，对一个变量的操作会影响另一个变量所引用的同一个对象</li>
<li>引用类型被赋值前的值都是<code>null</code></li>
</ul>
<p>所有被称作“类”的都是引用类型，主要包括类、接口、数组和委托</p>
<h2>值类型和引用类型的区别</h2>
<p>值类型直接存储其值，而引用类型储存对其值的引用</p>
<p>值类型是在栈中操作，而引用类型是在堆中分配存储单元，可以根据程序的运行情况动态的分配内存大小</p>
<p>栈在编译时就分配好内存空间，在代码中又栈的明确定义，而堆是程序运行中动态分配的内存空间，可以根据程序的运行情况动态的分配内存的大小</p>
<p>值类型总是在内存中占用一个预定义的字节数</p>
<p>引用类型的变量则在堆中分配一个内存空间，这个内存空间包含的是对另一个内存位置的引用，这个位置是托管堆中的一个地址，即存放此变量实际值的地方</p>
<p>C#的所有值类型均隐式派生自<code>System.ValueType</code>，而<code>System.ValueType</code>直接派生于<code>System.Object</code></p>
<p>即<code>System.ValueType</code>本身是一个类类型，而不是值类型，其关键在于<code>ValueType</code>重写了<code>Equals()</code>方法，从而对值类型按照实例的值来比较，而不是引用地址来比较</p>
<h2>枚举类型</h2>
<p>枚举类型是一种独特的值类型，用于声明一组具有相同性质的常量</p>
<p>使用枚举类型可以增加程序的可读性和可维护性，同时，枚举类型可以避免类型错误</p>
<p>在定义枚举类型时，如果不对其进行赋值，默认情况下，第一个枚举变量的值为<code>0</code>，后面每个枚举变量的值依次递增1</p>
<p>在C#中使用关键字<code>enum</code>类声明枚举</p>
<pre class="language-csharp highlighter-hljs"><code>enum 枚举名
{
    list1 = value1,
    list2 = value2,
    list3 = value3,
    ...
    listN = valueN,
}</code></pre>
<h2>类型转换</h2>
<p>类型转换就是将一种类型转换为另一种类型，转换可以是隐式转换，也可以是显示转换</p>
<h3>隐式转换</h3>
<p>所谓隐式转换就是不需要声明就能进行的转换</p>
<p>进行隐式转换时，编辑器不需要进行检查就能自动进行转换</p>
<table style="border-collapse: collapse; width: 100.027%; height: 231px" border="1"><caption>隐式类型转换表</caption>
<tbody>
<tr style="height: 21px">
<td style="width: 50.0269%; height: 21px">源类型</td>
<td style="width: 50.0269%; height: 21px">目标类型</td>
</tr>
<tr style="height: 21px">
<td style="width: 50.0269%; height: 21px">sbyte</td>
<td style="width: 50.0269%; height: 21px">short、int、long、float、double、decimal</td>
</tr>
<tr style="height: 21px">
<td style="width: 50.0269%; height: 21px">byte</td>
<td style="width: 50.0269%; height: 21px">short、ushort、int、uint、long、ulong、float、double 或 decimal</td>
</tr>
<tr style="height: 21px">
<td style="width: 50.0269%; height: 21px">short</td>
<td style="width: 50.0269%; height: 21px">int、long、float、double 或 decimal</td>
</tr>
<tr style="height: 21px">
<td style="width: 50.0269%; height: 21px">ushort</td>
<td style="width: 50.0269%; height: 21px">int、uint、long、ulong、float、double 或 decimal</td>
</tr>
<tr style="height: 21px">
<td style="width: 50.0269%; height: 21px">int</td>
<td style="width: 50.0269%; height: 21px">long、float、double 或 decimal</td>
</tr>
<tr style="height: 21px">
<td style="width: 50.0269%; height: 21px">uint</td>
<td style="width: 50.0269%; height: 21px">long、ulong、float、double 或 decimal</td>
</tr>
<tr style="height: 21px">
<td style="width: 50.0269%; height: 21px">char</td>
<td style="width: 50.0269%; height: 21px">ushort、int、uint、long、ulong、float、double 或 decimal</td>
</tr>
<tr style="height: 21px">
<td style="width: 50.0269%; height: 21px">float</td>
<td style="width: 50.0269%; height: 21px">double</td>
</tr>
<tr style="height: 21px">
<td style="width: 50.0269%; height: 21px">ulong</td>
<td style="width: 50.0269%; height: 21px">float、double 或 decimal</td>
</tr>
<tr style="height: 21px">
<td style="width: 50.0269%; height: 21px">long</td>
<td style="width: 50.0269%; height: 21px">float、double 或 decimal</td>
</tr>
</tbody>
</table>
<p>从<code>int</code>、<code>uint</code>、<code>long</code>或<code>ulong</code>到<code>float</code>，以及从<code>long</code>或<code>ulong</code>到<code>double</code>的转换可能导致精度损失，但是不会影响其数量级</p>
<p>其他的隐式转换不会丢失任何信息</p>
<p>当一种类型的值转换为大小相同或更大的另一类型时，则发生扩大转换</p>
<p>当一种类型的值转换为较小的一种类型时，则发生收缩转换</p>
<h3>显示转换</h3>
<p>显示转换也可以成为强制转换，需要在代码中明确的声明要转换的类型</p>
<p>如果要把高精度的变量的值赋给较低精度的变量，就需要使用显示转换</p>
<table style="border-collapse: collapse; width: 100.027%; height: 272px" border="1"><caption>显示类型转换表</caption>
<tbody>
<tr style="height: 21px">
<td style="width: 49.0444%; height: 21px">源类型</td>
<td style="width: 49.0444%; height: 21px">目标类型</td>
</tr>
<tr style="height: 21px">
<td style="width: 49.0444%; height: 21px">sbyte</td>
<td style="width: 49.0444%; height: 21px">byte、ushort、uint、ulong 或 char</td>
</tr>
<tr style="height: 21px">
<td style="width: 49.0444%; height: 21px">byte</td>
<td style="width: 49.0444%; height: 21px">sbyte 和 char</td>
</tr>
<tr style="height: 21px">
<td style="width: 49.0444%; height: 21px">short</td>
<td style="width: 49.0444%; height: 21px">sbyte、byte、ushort、uint、ulong 或 char</td>
</tr>
<tr style="height: 21px">
<td style="width: 49.0444%; height: 21px">ushort</td>
<td style="width: 49.0444%; height: 21px">sbyte、byte、short 或 char</td>
</tr>
<tr style="height: 21px">
<td style="width: 49.0444%; height: 21px">int</td>
<td style="width: 49.0444%; height: 21px">sbyte、byte、short、ushort、uint、ulong 或 char</td>
</tr>
<tr style="height: 21px">
<td style="width: 49.0444%; height: 21px">uint</td>
<td style="width: 49.0444%; height: 21px">sbyte、byte、short、ushort、int 或 char</td>
</tr>
<tr style="height: 21px">
<td style="width: 49.0444%; height: 21px">char</td>
<td style="width: 49.0444%; height: 21px">sbyte、byte 或 short</td>
</tr>
<tr style="height: 21px">
<td style="width: 49.0444%; height: 21px">float</td>
<td style="width: 49.0444%; height: 21px">sbyte、byte、short、ushort、int、uint、long、ulong、char 或 decimal</td>
</tr>
<tr style="height: 21px">
<td style="width: 49.0444%; height: 21px">ulong</td>
<td style="width: 49.0444%; height: 21px">sbyte、byte、short、ushort、int、uint、long 或 char</td>
</tr>
<tr style="height: 21px">
<td style="width: 49.0444%; height: 21px">long</td>
<td style="width: 49.0444%; height: 21px">sbyte、byte、short、ushort、int、uint、ulong 或 char</td>
</tr>
<tr style="height: 20px">
<td style="width: 49.0444%; height: 20px">double</td>
<td style="width: 49.0444%; height: 20px">sbyte、byte、short、ushort、int、uint、ulong、long、float、char 或 decimal</td>
</tr>
<tr style="height: 21px">
<td style="width: 49.0444%; height: 21px">decimal</td>
<td style="width: 49.0444%; height: 21px">sbyte、byte、short、ushort、int、uint、ulong、long、float、char 或 double</td>
</tr>
</tbody>
</table>
<p>由于显示转换包括所有的隐式转换和显示转换，因此总是可以使用强制转换表达式从任何数值类型转换为任何其他的数值类型</p>
<p>也可以通过<code>Convert</code>关键字进行显示类型转换</p>
<h3>装箱和拆箱</h3>
<p>将值类型转换为引用类型的过程叫做装箱，装箱允许将值类型隐式转换成引用类型</p>
<p>将引用类型转换为值类型的过程叫做拆箱，拆箱允许将引用类型显示转换为值类型</p>
<p>装箱是将一个值类型转换为一个对象类型（object）</p>
<p>拆箱则是将一个对象类型显示转换为一个值类型</p>
<p>对于装箱而言，它是将被装箱的值类型复制一个副本来转换；对于拆箱而言，需要注意类型的兼容性</p>
<h1>常量</h1>
<p>常量就是其值固定不变的量，而常量的值在编译时，就已经确定了</p>
<p>常量的类型只能为下列类型之一：<code>sbyte</code><code>byte</code><code>short</code><code>ushort</code><code>int</code><code>uint</code><code>long</code><code>ulong</code><code>char</code><code>float</code><code>double</code><code>decimal</code><code>bool</code><code>string</code>等</p>
<p>C#使用关键字<code>const</code>来定义常量，并且在创建常量时必须设置它的初始值</p>
<p>常量一旦设置就不允许修改</p>
<p>与变量不同，常量在整个程序中只能被赋值一次</p>
</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/EricsT/" target="_blank">EricsT</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/EricsT/p/18870378" target="_blank">https://www.cnblogs.com/EricsT/p/18870378</a></p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="10.958146310234953" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-14 19:15">2025-05-14 19:15</span>&nbsp;
<a href="https://www.cnblogs.com/EricsT">EricsT</a>&nbsp;
阅读(<span id="post_view_count">43</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18870378);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18870378', targetLink: 'https://www.cnblogs.com/EricsT/p/18870378', title: '变量和常量' })">举报</a>
</div>
	