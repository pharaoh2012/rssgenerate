
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/rainy-night/p/18723170" title="发布于 2025-02-18 23:54">
    <span role="heading" aria-level="2">TypeScript 中的 type 和 interface：你真的了解它们的不同吗？</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>如果你有写过 Vue3 的项目，那么对 TypeScript 肯定不会陌生。不管是公司新项目技术选型还是个人学习开发新的前端项目，Vue3 + TypeScript 已经成为首选技术方案之一</p>
<p>在 TypeScript 这个强大的静态类型系统中，<code>type</code>&nbsp;和&nbsp;<code>interface</code>&nbsp;是两个重要的关键字，用于定义和描述数据类型。然而，这两者之间的区别是什么，在实际开发过程中我们要怎么用呢？废话不说，直接进入正题，就让我们一起深入探讨吧</p>
<h1 id="一type-和-interface-的定义">一、type 和 interface 的定义</h1>
<ul>
<li><strong>type</strong>: 可以定义一个集合，可以包含各种类型的属性和值，以用来描述对象、函数、联合类型、交叉类型等</li>
</ul>
<pre><code class="language-typeScript">type Person = {
  name: string;
  age: number;
  sex: 0 | 1;
};
</code></pre>
<ul>
<li><strong>interface</strong>：它定义了一个对象的形状，描述了对象应该具有的属性及其类型</li>
</ul>
<pre><code class="language-typeScript">interface Person {
  name: string;
  age: number;
  sex: 0 | 1;
}
</code></pre>
<p>通过上面的示例，我们可以看到，虽然type 和interface都可以用来描述对象的结构，但是它们的语法略有不同。<code>type</code> 使用<code>等号</code>来定义类型别名，而 <code>interface</code> 使用<code>花括号</code>直接定义接口的成员</p>
<h1 id="二type-和-interface-的可扩展性">二、type 和 interface 的可扩展性</h1>
<ul>
<li><strong>type</strong>：它可以通过联合类型（<code>|</code>）和交叉类型（<code>&amp;</code>）进行组合，但不能直接扩展其他 <code>type</code></li>
</ul>
<pre><code class="language-typeScript">type A = { x: string };
type B = { y: string };
type C = A &amp; B; // C 同时具有 A 和 B 的属性
</code></pre>
<ul>
<li><strong>interface</strong>：它可以被扩展，可以使用 <code>extends</code> 关键字来实现接口的继承，从而添加更多属性或者方法</li>
</ul>
<pre><code class="language-typeScript">interface Fruit {
  name: string;
}

interface Apple extends Fruit {
  kind: string;
}
</code></pre>
<p>综合例子来看，<code>type</code> 适合于定义复杂的类型别名和泛型类型，以及进行条件类型的定义。<code>interface</code> 也具有相似的能力，它适合于描述对象的形状，定义类的契约和实现，以及接口之间的继承和扩展。这两者在许多情况下可以互相替代</p>
<h1 id="三type-和-interface-的兼容性">三、type 和 interface 的兼容性</h1>
<ul>
<li><strong>type</strong>：如果对类型别名进行重复定义，TypeScript 会报错。这意味着不能重新定义一个已存在的type</li>
</ul>
<pre><code class="language-typeScript">type A = { x: string };
type A = { y: string }; // 错误: 重复定义
</code></pre>
<ul>
<li><strong>interface</strong>：如果定义了多个同名的接口，它们会被合并成一个单一的接口，而不是报错。当多个同名接口出现时，它们的成员会被合并为一个接口，这种合并会在类型级别上进行，不会在运行时产生影响</li>
</ul>
<pre><code class="language-typeScript">interface A {
  x: string;
}
interface A {
  y: string;
  z: string;
}
</code></pre>
<p>就拿这个例子来说，无论你使用哪个<code>interface A</code>，都会引用同一个合并后的接口定义。这样的合并机制使得 TypeScript 中的接口能够更加灵活地进行组织和管理</p>
<h1 id="结语">结语</h1>
<p><code>type</code>和 <code>interface</code> 在 TypeScript 中都是用来定义类型的关键字，它们各有优势和适用场景。了解它们之间的区别和特性，可以更好地利用 TypeScript 的类型系统来提高代码质量和开发效率</p>
<p>在日常开发工作中，我们要遵循团队规范。例如，可以用<code>interface</code>定义一个复杂的对象类型，在组合不同类型时，可以使用 <code>type</code>关键字来定义</p>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.8540113823391203" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-18 23:55">2025-02-18 23:54</span>&nbsp;
<a href="https://www.cnblogs.com/rainy-night">初见雨夜</a>&nbsp;
阅读(<span id="post_view_count">173</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18723170" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18723170);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18723170', targetLink: 'https://www.cnblogs.com/rainy-night/p/18723170', title: 'TypeScript 中的 type 和 interface：你真的了解它们的不同吗？' })">举报</a>
</div>
	