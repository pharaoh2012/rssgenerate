
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bhdk/p/18731367" title="发布于 2025-02-22 20:48">
    <span role="heading" aria-level="2">Java 加密和解密</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在 Java 中，加密和解密通常通过 <strong>Java Cryptography Architecture (JCA)</strong> 和 <strong>Java Cryptography Extension (JCE)</strong> 实现。以下是常见的加密和解密操作示例，包括对称加密（如 AES）和非对称加密（如 RSA）。</p>
<hr>
<h3 id="一对称加密aes-示例">一、对称加密（AES 示例）</h3>
<p>对称加密使用相同的密钥进行加密和解密。</p>
<pre><code class="language-java">import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.util.Base64;

public class AESExample {
    public static void main(String[] args) throws Exception {
        // 生成密钥
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(128); // 128位密钥
        SecretKey secretKey = keyGen.generateKey();

        // 加密
        String originalText = "Hello, World!";
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        byte[] encryptedBytes = cipher.doFinal(originalText.getBytes());
        String encryptedText = Base64.getEncoder().encodeToString(encryptedBytes);
        System.out.println("加密后: " + encryptedText);

        // 解密
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(encryptedText));
        String decryptedText = new String(decryptedBytes);
        System.out.println("解密后: " + decryptedText);
    }
}
</code></pre>
<hr>
<h3 id="二非对称加密rsa-示例">二、非对称加密（RSA 示例）</h3>
<p>非对称加密使用公钥加密，私钥解密。</p>
<pre><code class="language-java">import javax.crypto.Cipher;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.util.Base64;

public class RSAExample {
    public static void main(String[] args) throws Exception {
        // 生成密钥对
        KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("RSA");
        keyPairGen.initialize(2048); // 2048位密钥
        KeyPair keyPair = keyPairGen.generateKeyPair();

        // 加密
        String originalText = "Hello, World!";
        Cipher cipher = Cipher.getInstance("RSA");
        cipher.init(Cipher.ENCRYPT_MODE, keyPair.getPublic());
        byte[] encryptedBytes = cipher.doFinal(originalText.getBytes());
        String encryptedText = Base64.getEncoder().encodeToString(encryptedBytes);
        System.out.println("加密后: " + encryptedText);

        // 解密
        cipher.init(Cipher.DECRYPT_MODE, keyPair.getPrivate());
        byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(encryptedText));
        String decryptedText = new String(decryptedBytes);
        System.out.println("解密后: " + decryptedText);
    }
}
</code></pre>
<hr>
<h3 id="三哈希算法sha-256-示例">三、哈希算法（SHA-256 示例）</h3>
<p>哈希算法用于生成不可逆的摘要信息。</p>
<pre><code class="language-java">import java.security.MessageDigest;
import java.util.HexFormat;

public class SHA256Example {
    public static void main(String[] args) throws Exception {
        String originalText = "Hello, World!";
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] hashBytes = digest.digest(originalText.getBytes());
        String hashText = HexFormat.of().formatHex(hashBytes);
        System.out.println("SHA-256 哈希值: " + hashText);
    }
}
</code></pre>
<hr>
<h3 id="四注意事项">四、注意事项</h3>
<ol>
<li><strong>密钥管理</strong>：密钥的安全性至关重要，建议使用安全的密钥存储和管理方式（如 KeyStore）。</li>
<li><strong>算法选择</strong>：根据需求选择合适的加密算法（如 AES 用于对称加密，RSA 用于非对称加密）。</li>
<li><strong>填充模式</strong>：加密时需指定填充模式（如 <code>AES/CBC/PKCS5Padding</code>），确保与解密方一致。</li>
<li><strong>异常处理</strong>：加密解密操作可能抛出异常，需进行适当的异常处理。</li>
</ol>
<hr>
<h3 id="五常用加密算法">五、常用加密算法</h3>
<table>
<thead>
<tr>
<th>类型</th>
<th>算法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>对称加密</td>
<td>AES</td>
<td>高级加密标准，速度快</td>
</tr>
<tr>
<td>对称加密</td>
<td>DES/3DES</td>
<td>数据加密标准，较旧</td>
</tr>
<tr>
<td>非对称加密</td>
<td>RSA</td>
<td>基于大数分解，安全性高</td>
</tr>
<tr>
<td>非对称加密</td>
<td>ECC</td>
<td>椭圆曲线加密，密钥短效率高</td>
</tr>
<tr>
<td>哈希算法</td>
<td>SHA-256</td>
<td>生成 256 位哈希值</td>
</tr>
<tr>
<td>哈希算法</td>
<td>MD5</td>
<td>生成 128 位哈希值，已不安全</td>
</tr>
</tbody>
</table>
<hr>
<p>通过以上示例和说明，您可以在 Java 中实现基本的加密和解密操作。如果需要更复杂的功能（如数字签名、证书管理等），可以进一步研究 JCA 和 JCE 的高级特性。 😊</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.3923086878530093" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-22 20:48">2025-02-22 20:48</span>&nbsp;
<a href="https://www.cnblogs.com/bhdk">我是god</a>&nbsp;
阅读(<span id="post_view_count">109</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18731367" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18731367);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18731367', targetLink: 'https://www.cnblogs.com/bhdk/p/18731367', title: 'Java 加密和解密' })">举报</a>
</div>
        