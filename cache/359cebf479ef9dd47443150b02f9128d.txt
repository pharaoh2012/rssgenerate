
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/guoxiaoyu/p/18676914" title="发布于 2025-01-18 16:17">
    <span role="heading" aria-level="2">从单数据源到多数据源的探讨</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>今天我想简单地分享一下如何将一个老项目从单数据源切换为多数据源的过程。这个项目是一个使用 WAR 部署的传统 JSP Web 项目，运行在 JDK 1.7 环境下，项目中并没有使用 Spring Boot，而仅仅采用了 Spring MVC 框架。我的主要任务是将原本使用单一数据源的架构，升级为支持多数据源的架构。</p>
<p>为此，首先需要梳理清楚当前项目的模块依赖和数据源的使用情况，了解项目中所有的模块和类是如何引用和交互的，特别是涉及到数据库操作的部分。</p>
<h1 id="引用排查">引用排查</h1>
<p>我也很直接，直接找到datasource关键字直接全局搜索，找到了很多引用地方，有些确实是命名不是很规范，并不是数据源也起名叫了这个名字，第一步直接去除没有用的相关类，做一个简单的筛除。如图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202501/1423484-20250117142431256-1825246917.png" alt="image" loading="lazy"></p>
<p>接下来，我将剩余的引用部分划分为三个主要部分，具体如下：第一部分是与XML配置相关的内容。由于该项目是一个较为传统的Spring MVC老项目，因此所有的Bean依赖关系都是在XML文件中显式配置的。这一部分的工作主要是分析和梳理XML配置文件中与Bean定义及依赖注入相关的内容。</p>
<p>第二部分是Java引用的相关内容。对于一些XML中配置好的Bean，这些配置会被注入到Java类的相应位置，并在运行时使用。因此，这一部分需要重点关注那些通过XML配置注入的Bean以及它们在Java代码中的应用场景。</p>
<p>最后第三部分是关于properties配置文件的检查。需要检查是否有单独的配置项存在于properties文件中，这些配置项可能会影响系统的某些行为或参数设置。</p>
<h1 id="业务梳理">业务梳理</h1>
<p>这部分不太好说，需要自己对整个项目有所掌握才可以，要不然会让自己看的头疼，这部分看的时候，大概想了一下为什么这里这么用，这里用到数据源做了哪些业务，如果切换成多数据源后，应该如何处理。</p>
<p>我大概看了一下有基本下面几种情况：</p>
<ol>
<li>注入数据源，直接生成jdbctemplate对象后，在代码里写业务逻辑执行SQL，看的头疼~~</li>
<li>注入到sqlsessionfactorybean中，集成到mybatis中。</li>
<li>使用现成的spring-security，注入数据源后，直接查询各种权限信息。</li>
<li>国际化配置使用到了数据源信息。</li>
</ol>
<p>目前就这几种，因为项目使用的是jndi的方式注入，所以对于多数据源来说也有一些困难。不过我的大概思路就是将数据源注入个默认数据源，使用动态key的方式切换数据源。</p>
<h1 id="后期思路">后期思路</h1>
<p>比如，配置文件首先就需要有多个数据源的信息，如下所示：</p>
<pre><code class="language-xml">&lt;bean id="dataSource1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"&gt;
  &lt;property name="driverClassName" value="com.mysql.jdbc.Driver"/&gt;
  &lt;property name="url" value="jdbc:mysql://localhost:3306/db1"/&gt;
  &lt;property name="username" value="user1"/&gt;
  &lt;property name="password" value="pass1"/&gt;
&lt;/bean&gt;

&lt;bean id="dataSource2" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"&gt;
  &lt;property name="driverClassName" value="com.mysql.jdbc.Driver"/&gt;
  &lt;property name="url" value="jdbc:mysql://localhost:3306/db2"/&gt;
  &lt;property name="username" value="user2"/&gt;
  &lt;property name="password" value="pass2"/&gt;
&lt;/bean&gt;

&lt;bean id="sqlSessionFactory" class="ReloadableSqlSessionFactoryBean"&gt;
    &lt;property name="targetDataSources"&gt;
        &lt;map key-type="java.lang.String"&gt;
            &lt;entry key="dataSource1" value-ref="dataSource1"/&gt;
            &lt;entry key="dataSource2" value-ref="dataSource2"/&gt;
        &lt;/map&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>定义数据源路由</p>
<pre><code class="language-java">public class DataSourceContextHolder {
    private static final ThreadLocal&lt;String&gt; contextHolder = new ThreadLocal&lt;&gt;();

    public static void setDataSourceKey(String key) {
        contextHolder.set(key);
    }

    public static String getDataSourceKey() {
        return contextHolder.get();
    }

    public static void clearDataSourceKey() {
        contextHolder.remove();
    }
}
</code></pre>
<p>配置动态数据源</p>
<pre><code class="language-java">import org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;

public class DynamicDataSource extends AbstractRoutingDataSource {
    @Override
    protected Object determineCurrentLookupKey() {
        return DataSourceContextHolder.getDataSourceKey();
    }
}
</code></pre>
<p>集成到SqlSessionFactoryBean，在 ReloadableSqlSessionFactoryBean 中使用动态数据源：</p>
<pre><code class="language-java">public class MySqlSessionFactoryBean extends SqlSessionFactoryBean implements DisposableBean {
    private static final Log log = LogFactory.getLog(MySqlSessionFactoryBean.class);

    private AbstractRoutingDataSource routingDataSource;

    public void setTargetDataSources(Map&lt;Object, Object&gt; targetDataSources) {
        if (routingDataSource == null) {
            routingDataSource = new DynamicDataSource();
        }
        routingDataSource.setTargetDataSources(targetDataSources);
        routingDataSource.setDefaultTargetDataSource(targetDataSources.values().iterator().next());
        super.setDataSource(routingDataSource);
    }

    @Override
    protected SqlSessionFactory buildSqlSessionFactory() throws Exception {
        return super.buildSqlSessionFactory();
    }

    @Override
    public void destroy() throws Exception {
        // 清理资源
    }
}
</code></pre>
<p>在需要切换数据源的地方调用 DataSourceContextHolder.setDataSourceKey("dataSource1") 或 DataSourceContextHolder.setDataSourceKey("dataSource2")。</p>
<p>总的来说，将传统单数据源架构迁移到多数据源架构并不简单，但通过合理的模块梳理和逐步推进，整个过程可以得到有效实施。</p>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.0814912779479167" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-18 16:17">2025-01-18 16:17</span>&nbsp;
<a href="https://www.cnblogs.com/guoxiaoyu">努力的小雨</a>&nbsp;
阅读(<span id="post_view_count">86</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18676914" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18676914);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18676914', targetLink: 'https://www.cnblogs.com/guoxiaoyu/p/18676914', title: '从单数据源到多数据源的探讨' })">举报</a>
</div>
	