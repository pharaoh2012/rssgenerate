
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/linx/p/18839965" title="发布于 2025-04-22 09:32">
    <span role="heading" aria-level="2">Web前端入门第 39 问：细说 CSS position 定位布局</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>CSS 的定位属性 <code>position</code> 可以把元素从文档流中拧出来，让其显示在其他位置。</p>
<p>但凡元素定位属性加身，元素位置便不再受文档流控制，这时候什么 <code>flex</code>、<code>grid</code> 都不好使了，定位的元素已然跳出三界外，不在五行中，这时候元素的位置由自身的偏移属性决定（top、right、bottom、left）。</p>

<h2 id="定位相关属性">定位相关属性</h2>
<p><code>position</code> 设置定位方式。</p>
<p><strong>以下属性仅对非 static 元素生效：</strong></p>
<p><code>top</code> 设置元素距离顶部的距离。<br>
<code>right</code> 设置元素距离右边的距离。<br>
<code>bottom</code> 设置元素距离底部的距离。<br>
<code>left</code> 设置元素距离左边的距离。<br>
<code>z-index</code> 设置元素的堆叠顺序。</p>
<h2 id="关于偏移位置">关于偏移位置</h2>
<p><code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code> 这几大偏移位置属性，就是其翻译过来的意思，设置元素对应方向的位置。</p>
<p>图解偏移位置属性：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250422092804636-1369069652.png" alt="" width="310" loading="lazy"></p>
<h2 id="默认值静态定位">默认值静态定位</h2>
<p>position 的默认值就是静态定位 <code>static</code>，此时元素按照正常的文档流渲染。</p>
<pre><code class="language-html">&lt;div class="list"&gt;
  &lt;div class="item"&gt;1&lt;/div&gt;
  &lt;div class="item"&gt;2&lt;/div&gt;
  &lt;div class="item"&gt;3&lt;/div&gt;
  &lt;div class="item"&gt;4&lt;/div&gt;
  &lt;div class="item"&gt;5&lt;/div&gt;
  &lt;div class="item"&gt;6&lt;/div&gt;
  &lt;div class="item"&gt;7&lt;/div&gt;
  &lt;div class="item"&gt;8&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  .list {
    width: 400px;
  }
  .item {
    height: 40px;
    margin: 10px 0;
    background-color: rgba(255, 71, 87,0.2);
  }
  .item:nth-child(2) {
    position: static;
    left: 10px;
    top: -20px;
  }
&lt;/style&gt;
</code></pre>
<p>显示效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250422092810313-1703035943.png" alt="" width="310" loading="lazy"></p>
<p>在不设置任何定位属性的时候，元素默认值就是 <code>static</code>。</p>
<p>如果想要覆盖非 static 的定位方式，则必须使用 static 进行替换。比如以前的导航吸附效果，导航移动到视窗之外时需要使用 <code>fixed</code> 固定定位，元素显示在视窗中的时候就用 <code>static</code> 正常的文档流显示。</p>
<p>static 定位属性是不支持偏移属性的，上面代码在<strong>开发者工具</strong>中显示的是这样：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250422092813511-1022274194.png" alt="" width="250" loading="lazy"></p>
<h2 id="相对定位">相对定位</h2>
<p>position 的 <code>relative</code> 相对定位属性值，相对于元素的当前位置进行位移，不会改变页面的正常布局。</p>
<p>比如：仅改变上例中的第二个元素样式，将定位属性值改为 <code>relative</code>：</p>
<pre><code class="language-css">  .item:nth-child(2) {
    position: relative;
    left: 10px;
    top: -20px;
  }
</code></pre>
<p>这时候，第二个子元素渲染效果就会变成这样：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250422092817759-1280048301.png" alt="" width="310" loading="lazy"></p>
<p>元素自身的位置还在，但位置偏移了，嗯...可以理解为：人走江山还在。</p>
<h2 id="绝对定位">绝对定位</h2>
<p>position 使用 <code>absolute</code> 便是绝对定位了。</p>
<p>还是使用第一例，定位属性值改为 <code>absolute</code>：</p>
<pre><code class="language-css">  .item:nth-child(2) {
    position: absolute;
    left: 20px;
    top: 20px;
  }
</code></pre>
<p>显示效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250422092821852-291089345.png" alt="" width="330" loading="lazy"></p>
<p>绝对定位元素会丢失自身位置（人走江山 she），还丢失了自身的大小，所以在使用绝对定位时候，要注意设置元素大小。</p>
<p>有没有好奇为什么会跑到浏览器的右上角？？</p>
<p>原因是绝对定位会相对于最近的 <code>非 static</code> 定位的祖先元素进行位置偏移，如果找不到这样的祖先元素，则相对于浏览器窗口。</p>
<p>所以我们在使用 <code>absolute</code> 时，最好先设置一个 <code>relative</code> 的祖先元素，比如将以上代码改为相对于 <code>.list</code> 列表定位，只需要给 .list 列表添加一个 <code>relative</code>。</p>
<pre><code class="language-css">  .list {
    width: 400px;
    position: relative;
  }
  .item:nth-child(2) {
    position: absolute;
    left: 20px;
    top: 20px;
  }
</code></pre>
<p>显示效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250422092827590-2031144655.png" alt="" width="320" loading="lazy"></p>
<p>找到了 .list 有相对定位属性，所以元素的偏移位置就会以 .list 这个盒子为参考。</p>
<h2 id="固定定位">固定定位</h2>
<p>position 的 <code>fixed</code> 就是用于固定定位，固定定位作用就是把元素给钉在浏览器的某个位置上，不会随页面滚动而滚动。</p>
<p><strong>fixed 元素不会受任何祖先元素影响，只与浏览器窗口有关。</strong></p>
<pre><code class="language-css">  .item:nth-child(2) {
    position: fixed;
    left: 20px;
    top: 20px;
    width: 40px;
  }
</code></pre>
<p>为了查看效果，添加了一个 <code>width: 40px;</code>，让定位的元素大一点。</p>
<p>显示效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250422092833154-1232145845.gif" alt="" width="310" loading="lazy"></p>
<p>可以明显看到 <code>fixed</code> 元素被钉在了浏览器左上角，不论页面怎么滚动，元素始终在同一位置。</p>
<h2 id="粘性定位">粘性定位</h2>
<p>position 的 <code>sticky</code> 属性值，跟 grid 网格布局同一时期出现，浏览器都是在 2017 年之后才开始支持，所以能不能使用请谨慎考虑。</p>
<p>使用 <code>height: 300px;</code> 控制 .list 高度，再添加 <code>overflow: auto;</code> 让 .list 元素可实现内部滚动，最后给子元素添加 <code>sticky</code> 属性值：</p>
<pre><code class="language-html">&lt;div class="list"&gt;
  &lt;div class="item"&gt;1&lt;/div&gt;
  &lt;div class="item"&gt;2&lt;/div&gt;
  &lt;div class="item"&gt;3&lt;/div&gt;
  &lt;div class="item"&gt;4&lt;/div&gt;
  &lt;div class="item"&gt;5&lt;/div&gt;
  &lt;div class="item"&gt;6&lt;/div&gt;
  &lt;div class="item"&gt;7&lt;/div&gt;
  &lt;div class="item"&gt;8&lt;/div&gt;
  &lt;div class="item"&gt;9&lt;/div&gt;
  &lt;div class="item"&gt;10&lt;/div&gt;
  &lt;div class="item"&gt;11&lt;/div&gt;
  &lt;div class="item"&gt;12&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  .list {
    width: 400px;
    height: 300px;
    overflow: auto;
  }
  .item {
    height: 40px;
    margin: 10px 0;
    background-color: rgba(255, 71, 87,0.2);
  }
  .item:nth-child(2) {
    background-color: rgba(255, 71, 87, 1);
    position: sticky;
    top: 0;
  }
&lt;/style&gt;
</code></pre>
<p>显示效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250422092841004-607108270.gif" alt="" width="310" loading="lazy"></p>
<p><code>sticky</code> 做的事就是常见的网页中<strong>导航吸附效果</strong>，最初这种吸附效果必须借助 javascript 来实现，如今粘性定位可完美做到吸附效果，无需 javascript。</p>
<p>以上仅使用了粘性定位的 <code>top</code> 方向，可思考下其他三个方向的粘性定位会有什么效果，同时设置多个方向又有什么神奇效果......</p>
<h3 id="控制元素堆叠顺序">控制元素堆叠顺序</h3>
<p>这里的 z-index 属性只对非 static 元素生效，可不像 grid 网格布局中那样，直接设置 z-index 值即可控制显示顺序。</p>
<p>如果有多个 fixed、absolute、relative、sticky 元素，当两个元素占用同一片区域的时候，要控制元素的堆叠顺序，那么就必须要使用 <code>z-index</code> 属性。常见的应用场景：一个网页上出现了多个弹窗，哪个弹窗要给用户看，就给哪个弹窗加一个较大的 <code>z-index</code> 属性值。</p>
<pre><code class="language-css">  .list {
    width: 400px;
    position: relative;
  }
  .item {
    height: 40px;
    margin: 10px 0;
    background-color: rgba(255, 71, 87,0.2);
  }
  .item:nth-child(2) {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    background-color: rgba(255, 71, 87, 1);
  }
</code></pre>
<p>默认的显示效果如下图左侧，定位的子元素 2 会遮挡住子元素 1。</p>
<p>给子元素 1 添加一个相对定位，并设置 z-index 为 2，即可让其显示在子元素 2 的上方（下图右侧），分分钟翻身做主人...</p>
<pre><code class="language-css">.item:nth-child(1) {
  position: relative;
  z-index: 2;
  background-color: burlywood;
}
</code></pre>
<p>显示效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250422092846476-1745918319.png" alt="" width="600" loading="lazy"></p>
<p><strong>注意：z-index 使用特殊的负数值时，可让元素沉底在所有正常元素下方。</strong></p>
<h2 id="实验中的定位相关属性">实验中的定位相关属性</h2>
<p>除了以上的常用的属性外，目前还新增了多个实验性的属性，由于大多浏览器都不支持，本文就不一一介绍，具体可参考 MDN：<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position-anchor" target="_blank" rel="noopener nofollow">https://developer.mozilla.org/en-US/docs/Web/CSS/position-anchor</a></p>
<p>实验性的属性都还没被纳入规范，未来可能还会发生变化！</p>
<p><code>position-anchor</code> 绑定一个元素到某个“锚点元素”（如按钮），使它的定位相对于该锚点。<br>
<code>position-area</code> 定义元素允许放置的区域（如安全区域，避免被遮挡）。<br>
<code>position-try</code> 定义定位策略的“尝试顺序”和“回退方案”。<br>
<code>position-try-fallbacks</code> 定义定位策略的“尝试顺序”和“回退方案”。<br>
<code>position-try-order</code> 控制多个 position-try 规则的优先级顺序。<br>
<code>position-visibility</code> 根据定位是否成功，自动控制元素可见性。</p>
<p>其作用让元素动态适应布局，避免溢出视口或被遮挡，比如 Select 的下拉选项，如果上方空间不足，就让其显示在下方。其目的就是要代替 javascript 的动态计算，让 css 实现类似效果。</p>
<h2 id="总结">总结</h2>
<p>position 这属性可以说在网页上随处可见它的身影，其在 Chrome 统计的 CSS 使用率数据中，常年霸榜前十，还是有必要熟练掌握的。</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>&nbsp;</p>
<p style="font-size: 18px;font-weight: bold;"><span style="color:rgb(255, 71, 87)">文章正在持续更新中...</span>，首发微信公众号【<span style="color:rgb(255, 71, 87)">前端路引</span>】，欢迎关注公众号获取最新文章。</p>
<p>
  <img style="max-width: 320px;" src="https://images.cnblogs.com/cnblogs_com/linx/2447020/o_250228035031_%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png">
</p>
<p>本文来自博客园，作者：<a href="https://www.cnblogs.com/linx/" target="_blank">前端路引</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/linx/p/18839965" target="_blank">https://www.cnblogs.com/linx/p/18839965</a></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.2019756579224537" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-22 09:32">2025-04-22 09:32</span>&nbsp;
<a href="https://www.cnblogs.com/linx">前端路引</a>&nbsp;
Views(<span id="post_view_count">83</span>)&nbsp;
Comments(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18839965);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18839965', targetLink: 'https://www.cnblogs.com/linx/p/18839965', title: 'Web前端入门第 39 问：细说 CSS position 定位布局' })">举报</a>
</div>
	