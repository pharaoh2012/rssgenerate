
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/linx/p/18830182" title="发布于 2025-04-17 09:06">
    <span role="heading" aria-level="2">Web前端入门第 36 问：多图细说 CSS grid 网格布局（一）父元素容器相关属性</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>grid 网格布局与 flex 弹性盒子布局一样，都需要控制 <code>容器</code> 跟 <code>子元素</code> 的样式才能做出想要的效果，部分场景只控制 <code>容器</code> 样式也行。</p>
<h2 id="grid-样式属性">grid 样式属性</h2>
<p>一大堆 <code>属性</code> 来袭~~</p>
<p>与网格相关的 CSS 属性有一大堆，毕竟要同时控制行和列（行、列也被称为 <code>网格轨道</code> <code>grid track</code>）。</p>
<h3 id="容器父元素相关的-css-属性">容器（父元素）相关的 CSS 属性</h3>
<p><code>display: grid</code>  设置容器为网格布局。<br>
<code>grid-template-columns</code>  设置列宽（可固定、百分比、<code>fr</code> 单位或函数）。<br>
<code>grid-template-rows</code>  设置行高。<br>
<code>grid-template-areas</code>  通过命名区域定义布局结构。<br>
<code>grid-template</code>  简写属性： grid-template-rows 、 grid-template-columns 与 grid-template-areas。<br>
<code>column-gap</code> 设置列间距。<br>
<code>row-gap</code> 设置行间距。<br>
<code>gap</code>  简写属性：column-gap、row-gap。<br>
<code>grid-auto-columns</code>  设置隐式创建（超出定义列）的列宽。<br>
<code>grid-auto-rows</code>  设置隐式创建（超出定义行）的行高。<br>
<code>grid-auto-flow</code>  控制自动放置子元素的流向。<br>
<code>grid</code>  简写属性，可同时设置显式网格属性 grid-template-rows 、 grid-template-columns 和 grid-template-areas，隐式网格属性 grid-auto-rows 、 grid-auto-columns 和 grid-auto-flow。<br>
<code>justify-items</code>  控制所有子元素在 <strong>行方向</strong> 的对齐方式（默认 <code>stretch</code>）。<br>
<code>align-items</code>  控制所有子元素在 <strong>列方向</strong> 的对齐方式（默认 <code>stretch</code>）。<br>
<code>justify-content</code>  当网格总宽度小于容器时，控制整体水平对齐。<br>
<code>align-content</code>  当网格总高度小于容器时，控制整体垂直对齐。</p>
<h3 id="子元素相关的-css-属性">子元素相关的 CSS 属性</h3>
<p><code>grid-column</code>  设置子元素占据的列范围（简写属性）。<br>
<code>grid-row</code>  设置子元素占据的行范围。<br>
<code>grid-area</code>  指定子元素属于哪个命名区域或简写位置。<br>
<code>justify-self</code>  覆盖容器的 <code>justify-items</code>，控制单个子元素的行对齐。<br>
<code>align-self</code>  覆盖容器的 <code>align-items</code>，控制单个子元素的列对齐。<br>
<code>order</code>  调整子元素的显示顺序（类似 Flexbox）。<br>
<code>z-index</code>  控制子元素的层叠顺序。</p>
<h3 id="grid-相关的函数单位">grid 相关的函数/单位</h3>
<p><code>fr</code>  剩余空间分配单位（类似 Flexbox 的 <code>flex-grow</code>）。<br>
<code>repeat()</code>  重复设置轨道（行/列）。<br>
<code>minmax()</code>  设置轨道（行/列）尺寸范围。<br>
<code>fit-content()</code>  将给定大小夹紧为可用大小。<br>
<code>auto-fit</code>/<code>auto-fill</code>  自动填充轨道（响应式布局常用）。</p>
<h2 id="第一式容器">第一式：容器</h2>
<p>本文中的默认代码，所有 grid 属性都是在此基础上增加：</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;div class="item"&gt;1&lt;/div&gt;
  &lt;div class="item"&gt;2&lt;/div&gt;
  &lt;div class="item"&gt;3&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  .box {
    flex: 0 0 auto;
    position: relative;
    font-size: 20px;
    margin: 20px 0;
    width: 400px;
    height: 280px;
    border: 2px solid #ff4757;
  }
  .box .item {
    border: 2px solid rgba(0,255,0,1);
    width: 40px;
    height: 40px;
  }
&lt;/style&gt;
</code></pre>
<h3 id="display-grid-让容器变身为网格布局">display: grid 让容器变身为网格布局</h3>
<p>与 flex 一样，网格布局也是从 <code>display</code> 开始， display 作用就是控制元素显示方式，使用率位居第二。</p>
<pre><code class="language-css">.box {
  display: grid;
}
</code></pre>
<p>显示效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250417090535204-11326853.png" alt="" loading="lazy"></p>
<p>注意第二个盒子看红色虚线，这个是 Chrome 浏览器的辅助显示 grid 网格线，就是 <code>display: grid</code> 将盒子分为了网格。</p>
<h3 id="控制网格行列大小">控制网格行/列大小</h3>
<p>默认情况网格的行和列都是 <code>auto</code>，即自动分配容器空间。</p>
<p><code>grid-template-columns</code> 设置列的大小。<br>
<code>grid-template-rows</code> 设置行的大小。</p>
<p><strong>使用固定像素值：</strong></p>
<pre><code class="language-css">.box {
  grid-template-columns: 130px 130px 130px;
  grid-template-rows: 80px 80px 80px;
}
</code></pre>
<p>显示效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250417090530763-429428927.png" alt="" loading="lazy"></p>
<p><strong>fr 单位：</strong></p>
<p><code>fr</code> 表示空间等份，<code>fr</code> 的值是相对于容器的可用空间计算得出，可食用浮点数值，比如 <code>0.5fr</code>。</p>
<pre><code class="language-css">.box {
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows: 1fr 1fr 1fr;
}
.box {
  grid-template-columns: 20% 80px 1fr;
}
</code></pre>
<p>以上代码将容器横向列分成 3 等分，纵向行也分成 3 等分，grid 网格很聪明，如果子元素太多，会自动调整，如下图第二项：</p>
<p>除了以上使用的单位，其他 CSS 的单位也支持，比如百分比、em、vw 等，单位也可以混着使用，比如下图第一项：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250417090526537-2071019683.png" alt="" loading="lazy"></p>
<h3 id="使用-repeat-函数">使用 repeat() 函数</h3>
<p>如果有 10 列等分的子元素，是不是要写 10 个 1fr ？</p>
<p>懒惰使科学进步，重复工作交给 <code>repeat()</code> 函数，如下：</p>
<pre><code class="language-css">grid-template-columns: repeat(3, 1fr); /* 表示 3 列等分 */
grid-template-columns: repeat(20, 1fr); /* 表示 20 列等分 */
grid-template-columns: 50px repeat(4, 1fr) 50px; /* 表示第一列 50px 接着重复 4 个等分的列，最后再跟一个 50px 列 */
grid-template-columns: repeat(2, 50px 1fr) 100px; /* 表示重复 2 次 50px 1fr ，最后一个列 100px */
</code></pre>
<p>fr 单位等分的空间如果不足以放下子元素内容，则会优先满足子元素大小，比如下图第一项：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250417090522202-187454905.png" alt="" loading="lazy"></p>
<p><strong>repeat()关键字：</strong></p>
<p><code>auto</code> 与 1fr 等效，表示等分空间。<br>
<code>auto-fill</code> 有剩余空间会使用空行/列占位。<br>
<code>auto-fit</code> 有剩余空间会拉伸现有行/列填充空间。<br>
<code>max-content</code> 列宽由单元格内最长文本决定。<br>
<code>min-content</code> 列宽由内容最小宽度决定。</p>
<p>使用方式如下：</p>
<pre><code class="language-css">grid-template-columns: repeat(3, auto); /* 效果与 repeat(3, 1fr) 相同 */
grid-template-columns: repeat(auto-fill, minmax(100px, 1fr)); /* 自动填充列，每列最小 100px，最大 1fr */
grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); /* 自动适应列，每列最小 100px，最大 1fr */
grid-template-columns: repeat(3, max-content); /* 列宽由单元格内最长文本决定 */
grid-template-columns: repeat(3, min-content); /* 列宽由内容最小宽度决定 */
</code></pre>
<p><code>auto-fill</code> 与 <code>auto-fit</code> 差异：容器空间过剩时，<code>auto-fill</code> 会创建额外的空行/列，而<code>auto-fit</code>会拉伸现有行/列填充空间。</p>
<p><code>max-content</code> 与 <code>min-content</code> 差异： <code>max-content</code> 会尽可能用多的把内容放下（尽量放在一行中），<code>min-content</code> 会用尽可能少的空间存放内容。</p>
<p>效果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250417090515973-778777074.png" alt="" loading="lazy"></p>
<p>注意：本例中取消了子元素的宽高设置。</p>
<h3 id="使用-minmax-函数">使用 minmax() 函数</h3>
<p>此函数包含两个参数，<code>最小值</code> 和 <code>最大值</code>，一般用于响应式布局，控制子元素最大宽度和最小宽度，使用方法参考上图。</p>
<p>此函数也可以单独使用，比如：</p>
<pre><code class="language-css">grid-template-columns: minmax(20px, auto) 1fr 1fr;
</code></pre>
<h3 id="使用-fit-content-函数">使用 fit-content() 函数</h3>
<p>计算规则：<code>min(最大尺寸, max(最小尺寸, argument))</code></p>
<p>首先用传入的 <code>参数</code> 与子元素的 <code>最小尺寸</code> 比较，取两者 <code>最大值</code>；<br>
再用比价出的 <code>最大值</code> 与子元素的 <code>最大尺寸</code> 比较，取 <code>最小值</code>。</p>
<pre><code class="language-css">grid-template-columns: fit-content(80px) 1fr; /* 第1列自适应但不超过80px，第2列占剩余空间 */
grid-template-columns: repeat(3, fit-content(80px)); /*  第1、2、3列自适应但不超过80px */
</code></pre>
<p>效果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250417090509874-1108769669.png" alt="" loading="lazy"></p>
<h3 id="grid-template-areas-设置网格区域">grid-template-areas 设置网格区域</h3>
<p>此属性的作用就是划地盘，老大（容器盒子）划分网格区域地盘命名，然后马仔（子元素）使用 <code>grid-area</code> 来插旗说某个地盘是谁的。</p>
<p><code>grid-template-areas</code> 需要结合 <code>grid-area</code> 使用，使用方法如下：</p>
<pre><code class="language-css">.box {
  display: grid;
  grid-template-areas: 
      "A A A"
      "B C C"
      "B D D"; /*区域划分为 三行 三列（A的地盘占了整个第一行，B占了第二行和第三行的第一列，C占了第二行剩余空间，D占了第三行剩余空间）*/
  grid-template-columns: repeat(3, 1fr); /* 指定容器分为 3 等分 */
  grid-template-rows: repeat(3, 1fr); /* 指定容器分为 3 等分 */
}
.box .item {
  border: 2px solid rgba(0,255,0,1);
}
.box .item:nth-child(1) {
  grid-area: A; /* 第 1 个子元素说它要 A 地盘 */
}
.box .item:nth-child(2) {
  grid-area: B; /* 第 2 个子元素说它要 B 地盘 */
}
.box .item:nth-child(3) {
  grid-area: C; /* 第 3 个子元素说它要 C 地盘 */
}
.box .item:nth-child(4) {
  grid-area: D; /* 第 4 个子元素说它要 D 地盘 */
}
</code></pre>
<p>如果这时候再来个马仔 E 说它也要 A 地盘怎么办？嘿...老大就会说那你也去 A 地盘站着吧~~，然后 A 和 E 就叠加在一起了，如下图二：</p>
<pre><code class="language-css">.box .item:nth-child(5) { /* 第 1 、5 子元素同时要 A 地盘 */
  grid-area: A;
  padding-left: 30px;
}
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250417090503537-954292362.png" alt="" loading="lazy"></p>
<p>可使用 <code>.</code> 来标记未命名区域，表示这地方是无主的，谁都不能占用，比如：</p>
<pre><code class="language-css">.box {
  grid-template-areas:
    "a a ."
    "a a ."
    ". b c";
}
</code></pre>
<p>以上代码 第一行 、 第二行 最后一列 及 第三行 第一列 都是未命名区域，</p>
<h3 id="grid-template-简写属性">grid-template 简写属性</h3>
<p>使用关键字 <code>none</code>：</p>
<pre><code class="language-css">grid-template: none;
</code></pre>
<p>同时设置行/列，需注意必须同时设置两个值，指定一个值是无效的。</p>
<pre><code class="language-css">grid-template: 100px 1fr / 50px 1fr;

/* 等价于 */

grid-template-rows: 100px 1fr;
grid-template-columns: 50px 1fr;
</code></pre>
<p>使用 <code>grid-template</code> 划分地盘：</p>
<pre><code class="language-css">grid-template:
  "a a a" 20%
  "b b b" auto;

/* 等价于 */
grid-template-rows: 20% auto;
grid-template-columns: none;
grid-template-areas:
    "a a a"
    "b b b";
</code></pre>
<p>使用 <code>grid-template</code> 设置所有属性：</p>
<pre><code class="language-css">grid-template:
  "A A A" 1fr
  "B C C" 1fr
  "B D D" 1fr
  / 1fr 1fr 1fr;

/* 等价于 */
grid-template-rows: 1fr 1fr 1fr;
grid-template-columns: 1fr 1fr 1fr;
grid-template-areas:
    "A A A"
    "B C C"
    "B D D";
</code></pre>
<p>还可定义 <code>行线命名</code>，具体使用方法需结合子元素 <code>grid-row</code> 来使用，后文再看，使用方法如下：</p>
<pre><code class="language-css">grid-template:
  [header-left] "head head" 30px [header-right]
  [main-left] "nav  main" 1fr [main-right]
  [footer-left] "nav  foot" 30px [footer-right]
  / 120px 1fr;
</code></pre>
<h3 id="定义行列间距">定义行列间距</h3>
<p>使用 <code>column-gap</code> 定义列间距，使用 <code>row-gap</code> 定义行间距，让子元素别离太近，有点边界感：</p>
<p>它俩都可食用所有 CSS 支持的单位~</p>
<pre><code class="language-css">.box {
  column-gap: 30px;
  row-gap: 20px;
}
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250417090454170-99590808.png" alt="" loading="lazy"></p>
<p>使用 <code>gap</code> 属性合并行列间距，以下代码与上面等效：</p>
<pre><code class="language-css">.box {
  gap: 20px 30px;
}
</code></pre>
<p><code>gap: 20px</code> 只有一个值时，表示行列间距都为 20px。</p>
<h3 id="设置隐式行列大小">设置隐式行列大小</h3>
<p>什么是隐式行列大小：</p>
<p><code>grid-template-columns</code> 声明的是显示的列大小，<code>grid-auto-columns</code> 声明的是隐式行列大小。</p>
<p>所谓显示就是明确看得到的列结构，而隐式就是没有明确声明的列大小。</p>
<p>比如：</p>
<pre><code class="language-css">.box {
  display: grid;
  grid-template-areas: "A A A A";
  grid-template-columns: 40px 1fr 50px; /* 显式 3 列 */
  grid-auto-columns: 100px; /* 隐式列宽 100px */
}
</code></pre>
<p>表格声明了 4 列，但只显式声明了前 3 列宽度，第 4 列隐式声明了宽度为 100px。</p>
<p>看下图左右两个容器的最后一个子元素 D 区别：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250417090447671-2014960326.png" alt="" loading="lazy"></p>
<p><code>grid-auto-rows</code> 用法与 <code>grid-auto-columns</code> 一致，都是用于隐式声明。</p>
<p>可使用关键字或函数设置隐式声明：</p>
<pre><code class="language-css">grid-auto-rows: minmax(100px, auto);
grid-auto-rows: fit-content(20%);
grid-auto-rows: min-content max-content auto;
</code></pre>
<p>其关含义可参考上文~~</p>
<h3 id="设置子元素的流向">设置子元素的流向</h3>
<p>网格布局默认按行排列子元素，可通过 <code>grid-auto-flow</code>  控制自动放置子元素的流向，其值有三个关键字，用法如下：</p>
<pre><code class="language-css">.box {
  display: grid;
  gap: 10px;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(5, minmax(40px, auto));
}
.box:nth-child(1) {
  grid-auto-flow: row;/* 默认行为 */
}
.box:nth-child(2) {
  grid-auto-flow: column;/* 按列排列子元素 */
}
.box:nth-child(3) {
  grid-auto-flow: dense row;/* 启用“密集填充”模式，尝试填充网格中的空隙 */
  /* grid-auto-flow: dense; 与 grid-auto-flow: dense row; 相同 */
}
.box:nth-child(4) {
  grid-auto-flow: dense column;/* 启用“密集填充”模式，尝试填充网格中的空隙 */
}

  
.box .item:nth-child(1),
.box .item:nth-child(2) { /* 控制第一个和第二个子元素宽高都占用 2 行 2 列 */
  grid-column: auto / span 2;
  grid-row: auto / span 2;
}
</code></pre>
<p><code>dense</code> 密集模式就是尝试填充网格中的空隙，只要子元素能放得下，就往空隙中塞，比如：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250417090440517-581301702.png" alt="" loading="lazy"></p>
<h3 id="简写属性-grid">简写属性 grid</h3>
<p>用于组合 <code>grid-template-rows</code>、<code>grid-template-columns</code>、<code>grid-template-areas</code>、<code>grid-auto-rows</code>、<code>grid-auto-columns</code> 和 <code>grid-auto-flow</code>。</p>
<p><strong>grid 简写最多覆盖三个属性，无法同时覆盖六个属性！！！</strong></p>
<p>grid 属性值语法规则：</p>
<pre><code class="language-css">/* &lt;'grid-template'&gt; values */

/* &lt;'grid-template-rows'&gt; /
   [ auto-flow &amp;&amp; dense? ] &lt;'grid-auto-columns'&gt;? values */

/* [ auto-flow &amp;&amp; dense? ] &lt;'grid-auto-rows'&gt;? /
   &lt;'grid-template-columns'&gt; values */
</code></pre>
<p>看以下各种简写：</p>
<pre><code class="language-css">grid: none; /* 不设置任何属性 */
</code></pre>
<hr>
<pre><code class="language-css">grid: "a" 100px "b" 1fr;

/* 等价于 */

grid-template-rows: 100px 1fr;
grid-template-areas:
  "a"
  "b";
</code></pre>
<hr>
<pre><code class="language-css">grid: [line-name1] "a" 100px [line-name2];

/* 等价于 */

grid-template-rows: [line-name1] 100px [line-name2];
grid-template-areas: "a";
</code></pre>
<hr>
<pre><code class="language-css">grid: "a" 200px "b" min-content;

/* 等价于 */
grid-template-rows: 200px min-content;
grid-template-areas:
  "a"
  "b";
</code></pre>
<hr>
<pre><code class="language-css">grid: 100px / 200px;

/* 等价于 */
grid-template-rows: 100px;
grid-template-columns: 200px;
</code></pre>
<hr>
<pre><code class="language-css">grid: 200px / auto-flow;

/* 等价于 */
grid-template-rows: 200px;
grid-auto-flow: column;
</code></pre>
<hr>
<pre><code class="language-css">grid: 30% / auto-flow dense;

/* 等价于 */
grid-template-rows: 30%;
grid-auto-flow: column dense;
</code></pre>
<hr>
<pre><code class="language-css">grid: repeat(3, [line1 line2 line3] 200px) / auto-flow 300px;

/* 等价于 */
grid-template-rows: repeat(3, [line1 line2 line3] 200px);
grid-auto-flow: column;
grid-auto-columns: 300px;
</code></pre>
<hr>
<pre><code class="language-css">grid: auto-flow / 200px;

/* 等价于 */
grid-auto-flow: row;
grid-template-columns: 200px;
</code></pre>
<hr>
<pre><code class="language-css">grid: auto-flow dense / 30%;

/* 等价于 */
grid-auto-flow: dense; /* 等同于 grid-auto-flow: dense row; */
grid-template-columns: 30%;
</code></pre>
<hr>
<pre><code class="language-css">grid: auto-flow dense 40% / [line1] minmax(20em, max-content);

/* 等价于 */
grid-template-columns: [line1] minmax(20em, max-content);
grid-auto-flow: dense;
grid-auto-rows: 40%;
</code></pre>
<h3 id="控制子元素对齐">控制子元素对齐</h3>
<p>几个控制对齐的属性与 flex 类似，这里就不多赘述了，可参考前一篇文章 <code>Web前端入门第 35 问：CSS 细说 flex 弹性盒子布局（多图）</code>。</p>
<p><code>justify-items</code>  控制所有子元素在 <strong>行方向</strong> 的对齐方式（默认 <code>stretch</code>）。<br>
<code>align-items</code>  控制所有子元素在 <strong>列方向</strong> 的对齐方式（默认 <code>stretch</code>）。<br>
<code>justify-content</code>  当网格总宽度小于容器时（子元素没撑满时），控制整体水平对齐。<br>
<code>align-content</code>  当网格总高度小于容器时（子元素没撑满时），控制整体垂直对齐。</p>
<p>本例中容器及子元素样式代码：</p>
<pre><code class="language-css">.box {
  display: grid;
  gap: 10px;
}
.box:nth-child(2n+1) {
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(3, 1fr);
}
.box .item {
  border: 2px solid rgba(0,255,0,1);
  width: 40px;
  height: 40px;
}
</code></pre>
<p>显示效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250417090426890-2127801324.png" alt="" loading="lazy"></p>
<h2 id="总结">总结</h2>
<p>父元素容器相关属性相关的 CSS 本文介绍完毕，作者也跟着学了一遍网格布局，以前似懂非懂的属性，现在嘛多少略知一二了，子元素相关的属性还有一大波，请看下回分解...</p>
<p>grid 布局的规范浏览器基本都是在 2017 年之后才开始支持，所以在使用网格布局时候，如果还要兼容 2017 年之前的浏览器版本，那么网格布局可以放弃了...</p>
<p>参考资料：<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid" target="_blank" rel="noopener nofollow">https://developer.mozilla.org/en-US/docs/Web/CSS/grid</a></p>

</div>
<div id="MySignature" role="contentinfo">
    <p>&nbsp;</p>
<p style="font-size: 18px;font-weight: bold;"><span style="color:rgb(255, 71, 87)">文章正在持续更新中...</span>，首发微信公众号【<span style="color:rgb(255, 71, 87)">前端路引</span>】，欢迎关注公众号获取最新文章。</p>
<p>
  <img style="max-width: 320px;" src="https://images.cnblogs.com/cnblogs_com/linx/2447020/o_250228035031_%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png">
</p>
<p>本文来自博客园，作者：<a href="https://www.cnblogs.com/linx/" target="_blank">前端路引</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/linx/p/18830182" target="_blank">https://www.cnblogs.com/linx/p/18830182</a></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.13376279619444445" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-17 09:07">2025-04-17 09:06</span>&nbsp;
<a href="https://www.cnblogs.com/linx">前端路引</a>&nbsp;
Views(<span id="post_view_count">22</span>)&nbsp;
Comments(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18830182);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18830182', targetLink: 'https://www.cnblogs.com/linx/p/18830182', title: 'Web前端入门第 36 问：多图细说 CSS grid 网格布局（一）父元素容器相关属性' })">举报</a>
</div>
	