
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/vipstone/p/18711725" title="发布于 2025-02-12 16:07">
    <span role="heading" aria-level="2">炸裂：SpringAI内置DeepSeek啦！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>好消息，Spring AI 最新快照版已经内置 DeepSeek 了，所以以后项目中对接 DeepSeek 就方便多了。但因为快照版会有很多 Bug，所以今天咱们就来看稳定版的 Spring AI 如何对接 DeepSeek 满血版。</p>
<h2 id="springai和deepseek介绍">SpringAI和DeepSeek介绍</h2>
<p>Spring AI 是 Spring 生态系统中的一个重要项目，旨在将人工智能集成到 Spring 应用程序中，它为 Java 开发者提供了一种便捷的方式来构建、管理和部署 AI 模型。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2025/png/92791/1739285249506-72b13103-1bf1-49d9-be49-2ce6e85981cf.png" alt="" loading="lazy"></p>
<p>Spring AI 的核心是解决了 Spring 生态和 AI 的快速集成：将您的企业<strong>数据和****API</strong> 与 <strong>AI 模型</strong>连接起来。</p>
<p>Spring AI 几乎支持所有主流的 AI 模型提供商，例如 Anthropic、OpenAI、Microsoft、Amazon、Google 和 Ollama。支持的功能如下：</p>
<ul>
<li><a href="https://docs.spring.io/spring-ai/reference/api/chatmodel.html" target="_blank" rel="noopener nofollow">聊天</a></li>
<li><a href="https://docs.spring.io/spring-ai/reference/api/embeddings.html" target="_blank" rel="noopener nofollow">嵌入附件</a></li>
<li><a href="https://docs.spring.io/spring-ai/reference/api/imageclient.html" target="_blank" rel="noopener nofollow">文本转图片</a></li>
<li><a href="https://docs.spring.io/spring-ai/reference/api/audio/transcriptions.html" target="_blank" rel="noopener nofollow">音频转文本</a></li>
<li><a href="https://docs.spring.io/spring-ai/reference/api/audio/speech.html" target="_blank" rel="noopener nofollow">文本转音频</a></li>
</ul>
<p>Spring AI 最新预览版也将集成 DeepSeek 大模型。</p>
<p><strong>DeepSeek 介绍</strong></p>
<p>DeepSeek 是国内顶尖 AI 团队「深度求索」开发的多模态大模型，具备数学推理、代码生成等深度能力，堪称"AI界的六边形战士"。DeepSeek 最新版本 R1 采用了“思维链”技术，能够展示完整的推理过程，使其在复杂推理任务上表现出色，甚至在某些方面可以与 OpenAI 的 O1 模型相媲美。</p>
<p>DeepSeek 身上的标签有很多，其中最具代表性的标签有以下两个：</p>
<ol>
<li><strong>低成本</strong>（不挑硬件、开源、使用简单无需复杂提示词）。</li>
<li><strong>高性能</strong>（推理能力极强、回答准确）。</li>
</ol>
<p>SpringAI 集成 DeepSeek 步骤如下。</p>
<h2 id="1环境准备">1.环境准备</h2>
<p>在开始集成之前，确保你的开发环境满足以下要求：</p>
<ul>
<li>JDK 17 或更高版本</li>
<li>Maven 或 Gradle 构建工具</li>
<li>DeepSeek API Key（可通过官网注册获取），申请地址：<a href="https://platform.deepseek.com/usage" target="_blank" rel="noopener nofollow">https://platform.deepseek.com/usage</a></li>
</ul>
<h2 id="2创建springboot项目">2.创建SpringBoot项目</h2>
<p>使用 Spring Initializr 或其他工具创建一个新的 Spring Boot 项目，确保版本为 3.2.x 或更高。</p>
<h2 id="3添加依赖">3.添加依赖</h2>
<p>在项目的 pom.xml 文件中添加 SpringAI 和 DeepSeek 的相关依赖。</p>
<p>以下是基于 Maven 的依赖配置示例：</p>
<pre><code class="language-xml">&lt;dependencies&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
  &lt;/dependency&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;org.springframework.ai&lt;/groupId&gt;
    &lt;artifactId&gt;spring-ai-openai-spring-boot-starter&lt;/artifactId&gt;
  &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<h2 id="4配置文件">4.配置文件</h2>
<p>在 application.properties 或 application.yml 文件中添加 DeepSeek 的配置信息：</p>
<pre><code class="language-properties"># 必填项
spring.ai.openai.api-key=you-apikey
spring.ai.openai.base-url=https://api.deepseek.com
# 模型选择（示例使用对话模型）
spring.ai.openai.chat.options.model=deepseek-chat
</code></pre>
<p>其中，api-key 是你在 DeepSeek 官网注册后获取的密钥，base-url 是 DeepSeek API 的服务地址，model 指定使用的模型版本。</p>
<h3 id="deepseek模型介绍">DeepSeek模型介绍</h3>
<p>DeepSeek 目前支持以下两种模型：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2025/png/92791/1739285249513-995fa8b1-b6a9-4a26-8751-49e53b702d4d.png" alt="" loading="lazy"></p>
<ul>
<li><strong>deepseek-chat（V3）</strong>：适用于聊天机器人、智能客服、内容生成等，能够理解和生成日常对话内容。</li>
<li><strong>deepseek-reasoner（R1）</strong>：专为复杂推理任务设计，适合解决需要深度逻辑分析和推理的问题。</li>
</ul>
<h2 id="5编写代码">5.编写代码</h2>
<p>创建一个控制器类，用于处理与 DeepSeek 的交互，以下是一个简单的示例：</p>
<pre><code class="language-java">import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/chat")
public class ChatController {

    @Autowired
    private DeepSeekClient deepSeekClient;

    @PostMapping
    public String chat(@RequestBody String message) {
        return deepSeekClient.chatCompletion(message).getOutput().getContent();
    }

    @GetMapping(value = "/stream", produces = "text/event-stream")
    public Flux&lt;String&gt; chatStream(@RequestParam String message) {
        return deepSeekClient.chatFluxCompletion(message)
        .map(response -&gt; response.getOutput().getContent());
    }
}
</code></pre>
<p>在上述代码中，chat 方法用于处理普通的非流式请求，而 chatStream 方法则支持流式响应，能够实时返回 AI 的推理结果。</p>
<h2 id="课后思考关于流式输出">课后思考：关于流式输出</h2>
<p>大模型的响应速度是很慢的，为了避免用户用户能够耐心等待输出的结果，我们通常会使用流式输出一点点将结果输出给用户，那么问题来了，想要实现流式结果输出，后端和前端要如何配合？后端要使用什么技术实现流式输出呢？</p>
<p>欢迎评论区给出你的解决答案，文章点赞过 100 咱们公布完整解决思路和具体实现源码哦。</p>
<blockquote>
<p>本文已收录到我的面试小站 <a href="https://www.javacn.site" target="_blank" rel="noopener nofollow">www.javacn.site</a>，其中包含的内容有：DeepSeek、场景题、并发编程、MySQL、Redis、Spring、Spring MVC、Spring Boot、Spring Cloud、MyBatis、JVM、设计模式、消息队列等模块。</p>
</blockquote>

</div>
<div id="MySignature" role="contentinfo">
    <div style="text-align: center; color: red">
关注下面二维码，订阅更多精彩内容。
<br>
<img style="margin-left: 0px" src="https://images.cnblogs.com/cnblogs_com/vipstone/848916/o_211225130402_gognzhonghao.jpg">
</div>

<div style="display: none">
    <img src="http://icdn.apigo.cn/gitchat/rabbitmq.png?imageView2/0/w/500/h/400">
</div>
<div style="margin-bottom: 50px; display: none">

<img title="微信打赏" src="http://icdn.apigo.cn/myinfo/wchat-pay.png" alt="微信打赏">
<br>

<div style="display: none">
<span style="display: block; position: absolute; height: 40px; top: 50%; margin-top: -20px">关注公众号（加好友）：</span>

<img style="margin-left: 144px" src="http://icdn.apigo.cn/gongzhonghao2.png?imageView2/0/w/120/h/120">
</div>
<p></p>

<div id="AllanboltSignature">
    <p style="border-top: #e0e0e0 1px dashed; border-right: #e0e0e0 1px dashed; border-bottom: #e0e0e0 1px dashed; border-left: #e0e0e0 1px dashed; padding-top: 10px; padding-right: 10px; padding-bottom: 10px; padding-left: 60px; background: url(&quot;https://images.cnblogs.com/cnblogs_com/lloydsheng/239039/o_copyright.gif&quot;) #e5f1f4 no-repeat 1% 50%; font-family: 微软雅黑; font-size: 11px" id="PSignature">
        <br> 作者：
        <a href="http://vipstone.cnblogs.com/" target="_blank">王磊的博客</a>
        <br> 出处：
        <a href="http://vipstone.cnblogs.com/" target="_blank">http://vipstone.cnblogs.com/</a>
        <br>
    </p>
</div></div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.20117059795949074" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-12 16:08">2025-02-12 16:07</span>&nbsp;
<a href="https://www.cnblogs.com/vipstone">磊哥|www.javacn.site</a>&nbsp;
阅读(<span id="post_view_count">171</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18711725" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18711725);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18711725', targetLink: 'https://www.cnblogs.com/vipstone/p/18711725', title: '炸裂：SpringAI内置DeepSeek啦！' })">举报</a>
</div>
        