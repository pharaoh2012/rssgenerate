
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/linx/p/18886166" title="发布于 2025-05-20 09:08">
    <span role="heading" aria-level="2">Web前端入门第 55 问：JavaScript 严格模式与非严格模式区别</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>JavaScript 默认是非严格模式的，可以通过 <code>"use strict";</code> 启用严格模式。此声明语句可以放在 JS 文件顶部，也可以放在函数内部。</p>
<h3 id="启用严格模式">启用严格模式</h3>
<p>1、外部脚本在 JS 文件开头声明，内部脚本在 <code>&lt;script&gt;</code> 标签开头声明，声明后所有 JS 代码启用严格模式：</p>
<pre><code class="language-js">"use strict";

console.log('Hello World!');
</code></pre>
<p><strong>错误写法：</strong></p>
<pre><code class="language-js">console.log("test");
"use strict"; // 置于代码之后的声明，严格模式不生效！
</code></pre>
<p>2、在函数内部声明函数启用严格模式，此时本函数体内部的 JS 代码将启用严格模式：</p>
<pre><code class="language-js">function strictFunc() {
  "use strict"; // 函数级严格模式
  let x = 10;
  y = 20; // ReferenceError: y is not defined
}

function nonStrictFunc() {
  y = 20; // 非严格模式下隐式创建全局变量（不推荐）
}
</code></pre>
<p><strong>错误写法：</strong></p>
<pre><code class="language-js">if (true) {
  "use strict"; // 无效！严格模式无法在块级作用域启用
  x = 10; // 非严格模式下隐式创建全局变量
}
</code></pre>
<p>3、模块化脚本（ES6 Modules）无需显式声明，默认启用严格模式：</p>
<pre><code class="language-js">// module.js（无需写 "use strict"）
export default function() {
  x = 10; // ReferenceError: x is not defined
}
</code></pre>
<p>4、类（ES6 Class）声明或类方法内部无需显式声明默认启用严格模式：</p>
<pre><code class="language-js">class MyClass {
  constructor() {
    x = 10; // ReferenceError: x is not defined
  }
}
</code></pre>
<p>为何 JS 代码会有两种不同的解析结果？</p>
<p>这就不得不提到历史原因了，JS 之父创造 JavaScript 时，仅用了 10 天时间，这久导致了 JS 在后来使用中发现了一些问题，又由于浏览器的版本迭代必须要兼顾一些旧的代码（不可能浏览器来一个版本更新，直接把所有网站一棒打死），所以就有了 <code>严格模式</code> 的出现，这个模式的用途就是告诉浏览器，我这个网站的代码你按照 <code>严格模式</code> 来解析，无需考虑历史兼容性，可能存在的隐式错误可以先告诉我。</p>
<h2 id="严格模式-vs-非严格模式">严格模式 vs 非严格模式</h2>
<p>主要区别如下：</p>
<h3 id="变量声明">变量声明</h3>
<p>非严格模式：未声明的变量赋值会隐式创建全局变量。</p>
<p>严格模式：未声明的变量赋值会抛出 ReferenceError。</p>
<pre><code class="language-html">&lt;script&gt;
  function test1 () {
    y = 10; // 声明为全局变量
  }
  test1();
  console.log(y); // 10
&lt;/script&gt;
&lt;script&gt;
  function test2 () {
    "use strict";
    x = 10; // ReferenceError: x is not defined
  }
  test2();
  console.log(x); // test2 报错，此行代码不执行
&lt;/script&gt;
</code></pre>
<h3 id="静默错误转显式错误">静默错误转显式错误</h3>
<p>删除不可删除的属性：<code>delete Object.prototype;</code> 在严格模式下报错。</p>
<p>重复参数名：<code>function(a, a) {}</code> 在严格模式下报语法错误。</p>
<p>只读属性赋值：<code>NaN = 1;</code> 在严格模式下报错。</p>
<pre><code class="language-html">&lt;script&gt;
  function test1 (a, a) {
    delete Object.prototype;
    NaN = 1;
  }
  test1();
&lt;/script&gt;
&lt;script&gt;
  "use strict";
  function test2 (a, a1) { // 报错 SyntaxError
    delete Object.prototype; // 报错 TypeError
    NaN = 1; // 报错 TypeError
  }
  test2();
&lt;/script&gt;
</code></pre>
<h3 id="this-指向">this 指向</h3>
<p>非严格模式：全局函数中 this 指向全局对象（如 window）。</p>
<p>严格模式：全局函数中 this 为 undefined。</p>
<pre><code class="language-html">&lt;script&gt;
  function test1 () {
    console.log(this); // 浏览器中指向 Window 对象，nodejs 中指向 global 对象
  }
  test1();
&lt;/script&gt;
&lt;script&gt;
  "use strict";
  function test2 () {
    console.log(this); // undefined
  }
  test2();
&lt;/script&gt;
</code></pre>
<h3 id="eval-和-arguments-限制">eval 和 arguments 限制</h3>
<p>eval 变量泄漏：严格模式下 eval 中的变量不会污染外部作用域。</p>
<p>禁用 arguments.callee：防止递归调用导致性能问题。</p>
<pre><code class="language-html">&lt;script&gt;
  function test1 () {
    eval('var a = 10');
    console.log(arguments.callee); // 指向函数本身
    console.log(a); // 10
  }
  test1();
&lt;/script&gt;
&lt;script&gt;
  "use strict";
  function test2 () {
    eval('var a = 10');
    console.log(arguments.callee); // 报错 TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them
    console.log(a); // ReferenceError: a is not defined
  }
  test2();
&lt;/script&gt;
</code></pre>
<h3 id="其他限制">其他限制</h3>
<p>八进制表示：禁止 0123，需用 0o123。</p>
<p>with 语句：严格模式下禁用，避免作用域混乱。</p>
<p>保留字限制：如 interface、private 等不能作为变量名。</p>
<pre><code class="language-html">&lt;script&gt;
  function test1 () {
    console.log(0123); // 83
    with (Math) {
      console.log(random()); // 输出随机数
    }
    var interface = 'str';
    console.log(interface); // str
  }
  test1();
&lt;/script&gt;
&lt;script&gt;
  "use strict";
  function test2 () {
    console.log(0123); // SyntaxError: Octal literals are not allowed in strict mode.
    with (Math) { // SyntaxError: Strict mode code may not include a with statement
      console.log(random());
    }
    var interface = 'str'; // SyntaxError: Unexpected strict mode reserved word
    console.log(interface);
  }
  test2();
&lt;/script&gt;
</code></pre>
<h2 id="写在最后">写在最后</h2>
<p>建议始终启用严格模式，强制更安全的编码实践，避免隐式错误，提升代码质量。</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>&nbsp;</p>
<p style="font-size: 18px;font-weight: bold;">文章收录于微信公众号【<span style="color:rgb(255, 71, 87)">前端路引</span>】，欢迎 <span style="color:#4ec259">微信扫一扫</span> 查看更多文章。</p>
<p>
  <img style="max-width: 320px;" src="https://images.cnblogs.com/cnblogs_com/linx/2447020/o_250228035031_%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png">
</p>
<p>本文来自博客园，作者：<a href="https://www.cnblogs.com/linx/" target="_blank">前端路引</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/linx/p/18886166" target="_blank">https://www.cnblogs.com/linx/p/18886166</a></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="17.799024176662037" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-20 09:09">2025-05-20 09:08</span>&nbsp;
<a href="https://www.cnblogs.com/linx">前端路引</a>&nbsp;
Views(<span id="post_view_count">259</span>)&nbsp;
Comments(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18886166);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18886166', targetLink: 'https://www.cnblogs.com/linx/p/18886166', title: 'Web前端入门第 55 问：JavaScript 严格模式与非严格模式区别' })">举报</a>
</div>
	