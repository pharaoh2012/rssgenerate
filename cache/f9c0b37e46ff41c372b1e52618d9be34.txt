
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Bxgldh/p/18996216" title="发布于 2025-07-21 17:23">
    <span role="heading" aria-level="2">手把手搭建 Astro + Github Pages + Github Actions</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        方便快捷的利用GitHub和Astro搭建一个属于自己博客网页
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>项目源地址：<a href="https://github.com/saicaca/fuwari?tab=readme-ov-file" target="_blank" rel="noopener nofollow">saicaca fuwari</a></p>
<p>我实现的效果：<a href="https://bxgldh.github.io/" target="_blank" rel="noopener nofollow">https://bxgldh.github.io/</a></p>
<p>挑模板挑了很久，个人认为原博主的这个模板非常好看O(∩_∩)O。<br>
但是由于我是小白，在上手初期看到博主github上的步骤时，有点懵也踩了不少坑，于是乎就有了这篇文章。</p>
<p>我会尽量保姆式的教学如何搭建一个这样的博客，可能对新手会相对友好一些~</p>
<h1 id="前言">前言</h1>
<p>这个网站的实现，主要使用到的是：</p>
<p>Github的Pages服务，它能够将我们托管在名为<code>username.github.io</code>仓库下的前端代码渲染成静态的页面。在完成部署后，我们就可以直接在<code>https://www.username.github.io</code>访问我们的博客。</p>
<p><code>ps：这里的username指的是你的GitHub账号的用户名，必须完全一致哈</code></p>
<p>Astro是一个现代化的 静态网站生成器，专为构建快速、内容驱动的网站而设计（如博客、文档站、营销页面等）。</p>
<p>除此之外我们还会用到Github的Actions服务，它允许你通过编写工作流（Workflow）脚本，自动完成代码测试、构建、部署等任务。在我们推送代码到 main 分支后，会自动将静态网页部署到 GitHub Pages。</p>
<h1 id="准备工作">准备工作</h1>
<p><strong>(适用于Windows系统)</strong></p>
<p>在开始之前，需要先安装一些工具：</p>
<p>Node.js、npm、pnpm、Git</p>
<p>除此之外，我们需要有一个Github账号，网上有很多注册账号的方法，Github也是非常好用的开源代码仓库，具体如何注册不再赘述。</p>
<h2 id="下载nodejsnpm">下载Node.js，npm</h2>
<p>参考来源: <a href="https://cmymoon.com/2024/01/17/hexo-github-da-jian-ge-ren-bo-ke/" target="_blank" rel="noopener nofollow">GitHub+Hexo 搭建个人博客</a></p>
<p>npm 是 Node.js 的包管理器，安装 Node.js 时会自动安装 npm。</p>
<p>我们在<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener nofollow">Node.js官网</a>下载LTS版本。</p>
<p>下载后，默认安装，之后打开cmd命令行工具，输入</p>
<pre><code class="language-cmd">node -v
</code></pre>
<p>安装成功后，会显示版本。这里我的版本是：v22.17.0</p>
<pre><code class="language-cmd">npm -v
</code></pre>
<p>显示npm版本，我的版本是：10.9.2</p>
<h2 id="下载git">下载Git</h2>
<p>Git可以帮助我们实现GitHub仓库的代码到本地的克隆，以及之后的上传</p>
<p><a href="https://git-scm.com/" target="_blank" rel="noopener nofollow">Git官网</a></p>
<p>下载完成后，默认安装。<br>
我们使用右键可以发现可以直接看到Git的帮助栏，有<code>Open Git Bash Here</code>的选项。通过它我们就可以在对应的目录下换出git的命令行工具</p>
<h1 id="本地部署">本地部署</h1>
<p>之后我们点开<a href="https://github.com/saicaca/fuwari?tab=readme-ov-file" target="_blank" rel="noopener nofollow">saicaca fuwari</a>的项目地址</p>
<p><img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3545172/202507/3545172-20250721171446392-1487563603.png" class="lazyload"></p>
<p>点击Generate a new repository，在Repository name下填入username.github.io，之后点创建仓库。</p>
<p>自己定一个地方，新建一个文件夹，在该路径下进入cmd</p>
<p>使用git把我们创建好的仓库克隆到本地</p>
<pre><code class="language-cmd">git clone https://github.com/username/username.github.io.git
</code></pre>
<p>可以看到已经把项目拉取到本地了</p>
<p><img alt="image-1" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3545172/202507/3545172-20250721171341738-2064692495.png" class="lazyload"></p>
<p>在这个文件夹下右键打开Git Bash<br>
运行</p>
<pre><code class="language-cmd">// 下载pnpm
npm install -g pnpm

// 安装项目的依赖
pnpm install
</code></pre>
<p>下载完成后，在Git Bash下运行</p>
<pre><code class="language-cmd">pnpm dev
</code></pre>
<p>浏览器访问<code>http://localhost:4321/</code>即可看到本地部署的模板</p>
<h2 id="home页面">Home页面</h2>
<ul>
<li>打开<code>src/config.ts</code>文件，修改对应的内容即可修改博客页面</li>
</ul>
<h2 id="博客">博客</h2>
<ul>
<li>在src/content/posts下新建md文件，即可添加博客</li>
<li>markdown的常见用法可以查看下一篇博客</li>
<li>在头部加入了浏览量</li>
<li>加入了评论、表情功能(giscus组件)</li>
</ul>
<h3 id="文章浏览量实现方法不蒜子插件">文章浏览量实现方法（不蒜子插件）</h3>
<p>在<code>src/pages/posts/[...slug].astro</code>中的word count and reading time模块的最后加入</p>
<pre><code class="language-html">&lt;!-- 新增阅读量统计 --&gt;
&lt;div class="flex flex-row items-center"&gt;
  &lt;div class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2"&gt;
    &lt;Icon name="material-symbols:visibility-outline-rounded"&gt;&lt;/Icon&gt;
  &lt;/div&gt;
  &lt;span id="busuanzi_container_page_pv"&gt;&lt;span id="busuanzi_value_page_pv"&gt;&lt;/span&gt; Page Views
&lt;/div&gt;
</code></pre>
<p>同文件中，添加js脚本</p>
<pre><code class="language-javascript">&lt;script async src="//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;
</code></pre>
<p>实现效果如下：<br>
<img alt="image-4" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3545172/202507/3545172-20250721171401618-1447334501.png" class="lazyload"></p>
<h3 id="总站浏览量实现方法不蒜子插件">总站浏览量实现方法（不蒜子插件）</h3>
<p>在<code>src/components/Footer.astro</code>的倒数第二个上面加入：</p>
<pre><code class="language-html">&lt;span id="busuanzi_container_site_pv"&gt;&lt;span id="busuanzi_value_site_pv"&gt;&lt;/span&gt; Total Visits&lt;/span&gt;
</code></pre>
<p>然后在<code>src\layouts\MainGridLayout.astro</code>的上一行加入：</p>
<pre><code class="language-javascript">&lt;script async src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;
</code></pre>
<p>实现效果如下：<br>
<img alt="image-5" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3545172/202507/3545172-20250721171411947-381473842.png" class="lazyload"></p>
<h3 id="评论功能实现方法">评论功能实现方法</h3>
<p>这里主要使用Giscus组件，是一个专门用于评论的工具，所有评论都存储在你对应仓库下的 GitHub Discussions 中。</p>
<p>下面整理一下如何安装和使用</p>
<p>参考来源: <a href="https://liruifengv.com/posts/add-comments-to-astro/" target="_blank" rel="noopener nofollow">为你的 Astro 博客添加评论功能</a></p>
<ol>
<li>确保仓库是public状态</li>
<li>去到<a href="https://github.com/apps/giscus" target="_blank" rel="noopener nofollow">giscus app</a>官网进行安装</li>
<li>在仓库中<a href="https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/enabling-or-disabling-github-discussions-for-a-repository" target="_blank" rel="noopener nofollow">启用discussion功能</a></li>
</ol>
<p>关于giscus app的配置，点击链接后，进行下载。</p>
<p>之后点击 website，</p>
<p><img alt="image-2" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3545172/202507/3545172-20250721171424437-174854119.png" class="lazyload"></p>
<p>我们需要在repository这一栏填入<code>自己的用户名/仓库名</code>，并选择title</p>
<p><img alt="image-3" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3545172/202507/3545172-20250721171503892-418771496.png" class="lazyload"></p>
<p>在discussion分类中选择announcements</p>
<p>并启用以下特性：</p>
<ul>
<li>reaction</li>
<li>评论输入框在上方</li>
<li>懒加载</li>
</ul>
<p>主题那里我并没有修改，到这里参考原博主结束。</p>
<p>我们也需要复制下面自动生成的代码，我在此基础上进行了一定的修改：</p>
<pre><code class="language-html">&lt;div class="giscus"&gt;&lt;/div&gt;

&lt;script is:inline&gt;
// 动态加载以适应主题切换
function loadGiscus() {
  const theme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
  
  const script = document.createElement('script');
  script.src = 'https://giscus.app/client.js';
  script.setAttribute('data-repo', 'Bxgldh/Bxgldh.github.io');
  script.setAttribute('data-repo-id', 'R_kgDOPGBMhQ'); // 从giscus.app获取
  script.setAttribute('data-category', 'Announcements');
  script.setAttribute('data-category-id', 'DIC_kwDOPGBMhc4Cscce');
  script.setAttribute('data-mapping', 'title');
  script.setAttribute('data-theme', theme);
  script.setAttribute('data-lang', 'zh-CN');
  script.setAttribute('crossorigin', 'anonymous');
  script.async = true;

  document.querySelector('.giscus').appendChild(script);
}

// 检测主题变化
const observer = new MutationObserver(loadGiscus);
observer.observe(document.documentElement, { 
  attributes: true, 
  attributeFilter: ['class'] 
});

window.addEventListener('load', loadGiscus);
&lt;/script&gt;
</code></pre>
<p>在src/components目录下，新建一个名为Giscus.astro的文件，将上面的代码粘贴进去.</p>
<p>之后来到刚才的<code>src/pages/posts/[...slug].astro</code>文件：<br>
在头部导入</p>
<pre><code class="language-html">import Giscus from "@components/Giscus.astro";
</code></pre>
<p>然后在<code>src/pages/posts/[...slug].astro</code>主体的markdown class下写</p>
<pre><code class="language-html">&lt;!-- 评论区域 --&gt;
&lt;section class="comments-section mt-12 pt-8 border-t border-gray-200 dark:border-gray-700"&gt;
    &lt;h2 class="text-2xl font-bold mb-6 pb-4 border-b border-gray-200 dark:border-gray-700 text-gray-900 dark:text-gray-100"&gt;
    评论
    &lt;/h2&gt;
    &lt;Giscus /&gt;
&lt;/section&gt;
</code></pre>
<p>css样式我就直接加了临时的，放到<code>src/pages/posts/[...slug].astro</code>的<code>&lt;MainGridLayout&gt;</code>中任意位置即可</p>
<pre><code class="language-css">&lt;style is:global&gt;
/* 评论区域样式 */
.comments-section {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid var(--border-color);
}

/* Giscus 容器样式 */
.giscus {
    margin-top: 1.5rem;
    min-height: 300px;
    border-radius: var(--radius-large);
    overflow: hidden;
}

/* 暗色模式适配 */
:global(html.dark) .giscus-frame {
    color-scheme: dark;
}

&lt;/style&gt;
</code></pre>
<h1 id="部署到github">部署到Github</h1>
<p>github仓库中，点击settings, Pages, 选择<code>Github Actions</code></p>
<p>在本地项目中，进入目录.github\workflows，新建一个名为deploy.yml的配置文件，复制如下内容保存：</p>
<pre><code class="language-yml">name: Deploy to GitHub Pages

on:
  # 每次推送到 `main` 分支时触发这个“工作流程”
  # 如果你使用了别的分支名，请按需将 `main` 替换成你的分支名
  push:
    branches: [ main ]
  # 允许你在 GitHub 上的 Actions 标签中手动触发此“工作流程”
  workflow_dispatch:

# 允许 job 克隆 repo 并创建一个 page deployment
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your repository using git
        uses: actions/checkout@v4
      - name: Install, build, and upload your site
        uses: withastro/action@v3
        # with:
          # path: . # 存储库中 Astro 项目的根位置。（可选）
          # node-version: 20 # 用于构建站点的特定 Node.js 版本，默认为 20。（可选）
          # package-manager: pnpm@latest # 应使用哪个 Node.js 包管理器来安装依赖项和构建站点。会根据存储库中的 lockfile 自动检测。（可选）

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
</code></pre>
<h2 id="若第一次向github仓库push">若第一次向github仓库push</h2>
<p>需要进行以下步骤将本地的ssh密钥存到GitHub账户中。</p>
<p>如果你在不需要科 学sw的地方，可以直接在进行下面第四条命令时，输入GitHub的账户和密码</p>
<p>反之，需要在本地cmd中运行：</p>
<pre><code class="language-cmd">ssh-keygen -t ed25519 -C "your_email@example.com"

cat ~/.ssh/id_ed25519.pub
</code></pre>
<p>这会输出类似这样的内容：</p>
<pre><code class="language-cmd">ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIE...你的用户名@你的电脑名
</code></pre>
<p>把这整行复制下来（包括开头的 ssh-ed25519 和结尾的邮箱或用户名）。</p>
<p>之后打开 GitHub，进入你的账号。</p>
<p>点击右上角头像 → Settings（设置）</p>
<p>左侧栏中找到：SSH and GPG keys（SSH 和 GPG 密钥）</p>
<p>点击右上角的绿色按钮 New SSH key</p>
<p>填写：</p>
<p>Title（标题）：随便写，比如 "My Laptop" 或 "MacBook SSH Key"</p>
<p>Key（密钥）：粘贴你刚才复制的那段公钥内容</p>
<p>点击 Add SSH key 即可</p>
<p>cmd运行以下命令，查看是否成功链接GitHub</p>
<pre><code class="language-cmd">ssh -T git@github.com
</code></pre>
<p>成功会有如下字样：</p>
<pre><code class="language-cmd">Hi your-username! You've successfully authenticated...
</code></pre>
<h2 id="反之跳过">反之跳过</h2>
<p>继续进行以下步骤</p>
<p>在根目录下启动git bash，依次运行</p>
<pre><code class="language-cmd">npm run build
git add .
git commit -m "第一篇博客"
git push origin main
</code></pre>
<p>之后访问<code>https://username.github.io/</code>即可</p>
<p>如果这篇文章有帮到你，还请留下一个点赞or评论再走吧~o(<em>￣▽￣</em>)ブ</p>
<p>遇到任何问题，或者发现有错的地方欢迎指正！</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.001388888888888889" data-date-updated="2025-07-21 17:25">2025-07-21 17:23</span>&nbsp;
<a href="https://www.cnblogs.com/Bxgldh">北下关刘德华</a>&nbsp;
阅读(<span id="post_view_count">37</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18996216);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18996216', targetLink: 'https://www.cnblogs.com/Bxgldh/p/18996216', title: '手把手搭建 Astro + Github Pages + Github Actions' })">举报</a>
</div>
        