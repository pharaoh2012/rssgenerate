
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/caoruipeng/p/18822555" title="发布于 2025-04-15 11:48">
    <span role="heading" aria-level="2">WPF静态资源StaticResource和动态资源DynamicResource有什么区别，x:Static又是什么意思？</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h2>什么叫WPF的资源(Resource)</h2>
<p>资源是保存在可执行文件中的一种不可执行数据。WPF中资源用<code>ResourceDictionary</code>类表示，这个类就是一个字典，字典的key和value都是<code>object</code>类型。所以在WPF中，资源可以可以是图像、字符串等所有的任意CLR对象，只要对象有一个默认的构造函数和独立的属性。 也就是说，应用程序中非程序代码的内容，比如点阵图、颜色、字型、动画/影片档以及字符串常量值，可将它们从程序中独立出来，单独包装成"资源(Resource)"。 静态资源(Static Resource)，动态资源（Dynamic Resources）。这两者的区别是：静态资源在第一次编译后即确定其对象或值，之后不能对其进行修改。 动态资源则是在运行时决定，当运行过程中真正需要时，才到资源目标中查找其值。因此，我们可以动态地修改它。由于动态资源的运行时才能确定其值，因此效率比静态资源要低。</p>
<p>在WPF中，StaticResource 和 DynamicResource 是用于引用资源（如样式、模板、颜色等）的两种方式。它们的主要区别在于资源的解析时机和适用场景。StaticResource静态资源只会被加载一次，在整个WPF的生命周期中不会再次修改。DynamicResource动态资源在运行时可随便变化的资源。</p>
<p>下面我们从资源的加载时机、性能和使用场景 三个方面依次介绍这两种资源。</p>
<h2>StaticResource</h2>
<p>加载时机：在 XAML 加载时（编译时）解析资源。<br>性能：性能较高，因为资源在加载时就被解析并固定下来。<br>适用场景：适用于资源在运行时不会发生变化的情况。</p>
<h2>DynamicResource</h2>
<p>加载时机：在运行时（需要时）解析资源。<br>性能：性能稍低，因为资源在运行时动态查找。<br>适用场景：适用于资源可能在运行时发生变化的情况，例如支持主题切换。</p>
<p>介绍完这两种资源的主要概念和区别之后，接下来我们就来介绍下，如何在WPF中使用这两种资源。</p>
<h2>StaticResource</h2>
<p>WPF中，静态资源可以定义在独立的xaml资源 文件中、可以定义在窗体的xaml文件中、可以定义在App.xaml全局文件、定义在控件模板或者样式中。</p>
<h3>1、在独立的资源文件中定义xaml文件</h3>
<p>我们定义一个单独的资源文件<code>Res.xaml</code>，里面定义一个资源。内容 如下：</p>
<pre class="highlighter-hljs"><code>&lt;ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;
    &lt;SolidColorBrush x:Key="PrimaryBrush" Color="Blue"&gt;&lt;/SolidColorBrush&gt;
&lt;/ResourceDictionary&gt;</code></pre>
<p>然后我们在MainWindow.xaml可以直接引用这个资源文件，然后使用这个静态资源<code>PrimaryBrush</code></p>
<pre class="highlighter-hljs"><code>&lt;Window.Resources&gt;
    &lt;ResourceDictionary&gt;
        &lt;ResourceDictionary.MergedDictionaries&gt;
            &lt;ResourceDictionary Source="Res.xaml"/&gt;
        &lt;/ResourceDictionary.MergedDictionaries&gt;
    &lt;/ResourceDictionary&gt;
&lt;/Window.Resources&gt;
&lt;Grid&gt;
    &lt;Button Content="test" Background="{StaticResource PrimaryBrush}"&gt;&lt;/Button&gt;
&lt;/Grid&gt;</code></pre>
<h3>2、在窗体的xaml文件中定义资源</h3>
<p>我们在MainWindow.xaml中可以直接定义资源，然后引用。</p>
<pre class="highlighter-hljs"><code>&lt;Window.Resources&gt;
        &lt;ResourceDictionary&gt;
            &lt;SolidColorBrush x:Key="PrimaryBrush" Color="Blue"&gt;&lt;/SolidColorBrush&gt;
        &lt;/ResourceDictionary&gt;
&lt;/Window.Resources&gt;
&lt;Grid&gt;
    &lt;Button Content="test" Background="{StaticResource PrimaryBrush}"&gt;&lt;/Button&gt;
&lt;/Grid&gt;</code></pre>
<h3>3、在App.xaml全局文件中定义资源</h3>
<p>在App.xaml中定义的资源文件，可以在当前项目的任何地方直接引用。但是注意 ，第一种方法或者第二种方法也定义了相同key的静态资源，窗体中的定义和静态资源文件中的定义会覆盖App.xaml中定义的静态资源。</p>
<pre class="highlighter-hljs"><code>&lt;Application.Resources&gt;
    &lt;SolidColorBrush x:Key="PrimaryBrush" Color="Blue"&gt;&lt;/SolidColorBrush&gt;
&lt;/Application.Resources&gt;</code></pre>
<h3>4、在Style样式中定义资源</h3>
<p>因为WPF的<code>Style</code>类中有一个属性表示资源，所以我们可以为Style定义静态资源，然后再Style定义中使用静态资源。</p>
<pre class="highlighter-hljs"><code>&lt;Style TargetType="{x:Type Button}"&gt;
    &lt;Style.Resources&gt;
        &lt;ResourceDictionary&gt;
            &lt;SolidColorBrush x:Key="ButtonForegroundBrush" Color="Red" /&gt;
        &lt;/ResourceDictionary&gt;
    &lt;/Style.Resources&gt;
    &lt;Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrush}" /&gt;
&lt;/Style&gt;</code></pre>
<h2>StaticResource资源的查找方式</h2>
<p>假设我们在不同的位置定义了一个同名key的静态资源，当有控件引用这个静态资源的时候，该使用哪个呢？其实静态资源的查找是有一个固定顺序的，最先查找到谁，就用谁。</p>
<p>（1）查找使用该资源的元素的Resource字典；<br>（2）顺着逻辑树向上查找父元素的资源字典，直到根节点；<br>（3）查找Application资源（App.xaml资源）；</p>
<h2>x:Static</h2>
<p>StaticResource主要用于引用 XAML文件中定义的资源（如颜色、样式、模板等），在xaml加载的时候解析。但是如果我的资源不是定义在资源文件中，而是定义在一个普通类中的静态字段，该如何引用了。这个时候x:Static就派上场了，x:Static用于引用静态字段、静态属性、常量或枚举值。</p>
<p>假设我们定义一个类：<code>Constants</code>，里面有一个静态字段：<code>AppTitle</code></p>
<pre class="highlighter-hljs"><code>public class Constants
{
    public const string AppTitle = "My Application";
}</code></pre>
<p>在xaml中，我们可以直接通过x:Static引用这个资源。这里的local是一个命名空间的别名。</p>
<pre class="highlighter-hljs"><code>&lt;Button Content="{x:Static local:Constants.AppTitle}"&gt;&lt;/Button&gt;</code></pre>
<h2>DynamicResource</h2>
<p>DynamicResource和StaticResource资源的定义方式都是一致的，唯一的不同就是，当资源内容被修改之后，静态资源引用的地方不会有任何变化。我们用下面的代码做演示：</p>
<pre class="highlighter-hljs"><code>&lt;Window.Resources&gt;
    &lt;ResourceDictionary&gt;
        &lt;SolidColorBrush x:Key="PrimaryBrush" Color="Blue"&gt;&lt;/SolidColorBrush&gt;
    &lt;/ResourceDictionary&gt;
&lt;/Window.Resources&gt;
&lt;StackPanel&gt;
    &lt;Button Foreground="{StaticResource PrimaryBrush}"&gt;测试按钮&lt;/Button&gt;
    &lt;Button Foreground="{DynamicResource PrimaryBrush}"&gt;测试按钮&lt;/Button&gt;
    &lt;Button Click="Button_Click" Content="修改资源"/&gt;
&lt;/StackPanel&gt;</code></pre>
<p>上面代码中有一个定义好的资源<code>PrimaryBrush</code>，两个Button分别以静态方式和动态方式引用。在第三个按钮的点击事件中，我们修改以下资源内容，就会发现，只有动态资源引用的地方前景色发生了变化。</p>
<pre class="highlighter-hljs"><code>private void Button_Click(object sender, RoutedEventArgs e)
{
    this.Resources["PrimaryBrush"] = new SolidColorBrush(Colors.Red);
}</code></pre>
<p>点击按钮后，执行效果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/665785/202504/665785-20250412205512070-192178892.png" width="787" height="119"></p>
<p>原文链接：<a href="http://cshelloworld.com/home/detail/1910955200127045632" rel="noopener nofollow">http://cshelloworld.com/home/detail/1910955200127045632</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.1905877899699074" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-15 11:48">2025-04-15 11:48</span>&nbsp;
<a href="https://www.cnblogs.com/caoruipeng">caoruipeng</a>&nbsp;
阅读(<span id="post_view_count">22</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18822555);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18822555', targetLink: 'https://www.cnblogs.com/caoruipeng/p/18822555', title: 'WPF静态资源StaticResource和动态资源DynamicResource有什么区别，x:Static又是什么意思？' })">举报</a>
</div>
        