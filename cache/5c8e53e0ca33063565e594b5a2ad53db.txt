
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/DOMLX/p/18729664" title="发布于 2025-02-21 17:33">
    <span role="heading" aria-level="2">c# 半导体/led行业 晶圆片WaferMap实现 map图实现入门篇</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><span style="font-size: 18px">原文作者：aircraft</span></p>
<p><span style="font-size: 18px">原文地址：<a href="https://www.cnblogs.com/DOMLX/p/18729664" target="_blank">https://www.cnblogs.com/DOMLX/p/18729664</a></span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt"><strong>第一 简介<br></strong></span></p>
<p><span style="font-size: 18px">又是好久没更新了，今天介绍个半导体/led行业生成晶圆片map图的小demo程序。</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">在半导体和led中经常需要对下图中的一个个晶圆片上的一个个die（晶圆）生成一个总体的map图，不管是检测中用来显示晶圆片上各个Die的好坏分布，还是用作于点击晶圆移动查看都是有必要的。</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250221164417471-553240326.jpg" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">&nbsp;像正常在半导体或者LED设备公司中工作过的人基本都有完整的map的显示控件的封装代码，但是如果你是刚跨行过来，或者是自己想研究学习，那么基本就要自己开发一个MAP控件。比如下图那样的就是</span></p>
<p><span style="font-size: 18px">工业公司开发的MAP控件led软件上显示的效果。</span></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250221164343471-784547114.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt"><strong>第二 demo结构<br></strong></span></p>
<p><span style="font-size: 18pt">工具环境是在VS2015下&nbsp;&nbsp; c#6.0以下的语法环境 基于c#和winfrom的对话框程序</span></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250221165521684-943376728.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt">mainFrom.cs就是个显示作用的窗体</span></p>
<p><span style="font-size: 18pt">waferDie.cs里只定义了Die类里面存放每个Die的行列坐标和颜色信息以及一些其他信息比如检测好坏等</span></p>
<p><span style="font-size: 18pt">WaferMapControl.cs就是创建个用户控件类，在上面实现绘制MAP功能，外部只要把晶圆的队列数组传入就可以直接使用</span></p>
<p><span style="font-size: 18pt">非常简单的三个文件，只要自己创建一下名字相同的三个代码文件，然后复制我下面的代码进去就可以运行使用了。注意：<span style="font-size: 18pt">WaferMapControl</span>是个用户控件，可以点添加，选择用户控件，然后改一下名字。</span></p>
<p><span style="font-size: 18pt"><strong>第三 代码<br></strong></span></p>
<p>&nbsp;<span style="font-size: 18pt"><span style="font-size: 18pt">mainFrom界面图：</span></span></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250221170348971-316237580.png" alt="" loading="lazy"></p>
<p>中间添加了一个panel的控件，属性为填充</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;<span style="font-size: 18pt"><span style="font-size: 18pt">mainFrom.cs代码：</span></span></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Collections.Generic;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.ComponentModel;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Data;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Drawing;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Linq;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Text;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Threading.Tasks;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Windows.Forms;


</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> waferMpingTest1
{
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">partial</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> mainFrom : Form
    {
        </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> mainFrom()
        {
            InitializeComponent();
            InitializeWaferMap();
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">GenerateTestData(1000000); </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 生成测试数据</span>
            GenerateTestData2(<span style="color: rgba(128, 0, 128, 1)">10</span>); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 生成测试数据</span>
<span style="color: rgba(0, 0, 0, 1)">        }
        WaferMapControl waferMap </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> WaferMapControl
        {
            Dock </span>=<span style="color: rgba(0, 0, 0, 1)"> DockStyle.Fill,
            BorderStyle </span>=<span style="color: rgba(0, 0, 0, 1)"> BorderStyle.FixedSingle
        };
        </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> InitializeWaferMap()
        {
            
            waferMap.DieClicked </span>+= (s, e) =&gt;<span style="color: rgba(0, 0, 0, 1)">
                MessageBox.Show($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Clicked Die: ({e.Die.Row}, {e.Die.Column})</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);

            panel1.Controls.Add(waferMap);
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">Controls.Add(waferMap);</span>
<span style="color: rgba(0, 0, 0, 1)">        }

        </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> GenerateTestData(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> count)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> random = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Random();
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> dies = <span style="color: rgba(0, 0, 255, 1)">new</span> List&lt;WaferDie&gt;<span style="color: rgba(0, 0, 0, 1)">(count);

            </span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = <span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt; count; i++<span style="color: rgba(0, 0, 0, 1)">)
            {
                dies.Add(</span><span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> WaferDie
                {
                    Row </span>= random.Next(-<span style="color: rgba(128, 0, 128, 1)">100</span>, <span style="color: rgba(128, 0, 128, 1)">100</span><span style="color: rgba(0, 0, 0, 1)">),
                    Column </span>= random.Next(-<span style="color: rgba(128, 0, 128, 1)">100</span>, <span style="color: rgba(128, 0, 128, 1)">100</span><span style="color: rgba(0, 0, 0, 1)">),
                    DieColor </span>=<span style="color: rgba(0, 0, 0, 1)"> Color.FromArgb(
                        random.Next(</span><span style="color: rgba(128, 0, 128, 1)">256</span><span style="color: rgba(0, 0, 0, 1)">),
                        random.Next(</span><span style="color: rgba(128, 0, 128, 1)">256</span><span style="color: rgba(0, 0, 0, 1)">),
                        random.Next(</span><span style="color: rgba(128, 0, 128, 1)">256</span><span style="color: rgba(0, 0, 0, 1)">))
                });
            }
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">WaferMapControl map = new WaferMapControl();</span>
<span style="color: rgba(0, 0, 0, 1)">            waferMap.LoadData(dies);
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">if (Controls[0] is WaferMapControl map)
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">map.LoadData(dies);</span>
<span style="color: rgba(0, 0, 0, 1)">        }

        </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> GenerateTestData2(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> count)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> random = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Random();
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> dies = <span style="color: rgba(0, 0, 255, 1)">new</span> List&lt;WaferDie&gt;<span style="color: rgba(0, 0, 0, 1)">(count);

            </span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = -count; i &lt; count; i++<span style="color: rgba(0, 0, 0, 1)">)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">for</span>(<span style="color: rgba(0, 0, 255, 1)">int</span> j = -count;j&lt;count;j++<span style="color: rgba(0, 0, 0, 1)">)
                {
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">dies.Add(new WaferDie
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">{
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">    Row = i,
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">    Column = j,
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">    DieColor = Color.FromArgb(
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   random.Next(0),
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   random.Next(256),
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   random.Next(0))
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">});</span>
<span style="color: rgba(0, 0, 0, 1)">
                    dies.Add(</span><span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> WaferDie
                    {
                        Row </span>=<span style="color: rgba(0, 0, 0, 1)"> i,
                        Column </span>=<span style="color: rgba(0, 0, 0, 1)"> j,
                        DieColor </span>=<span style="color: rgba(0, 0, 0, 1)"> Color.FromArgb(
                      </span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">66</span>,<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
                    });

                }


            }
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">WaferMapControl map = new WaferMapControl();</span>
<span style="color: rgba(0, 0, 0, 1)">            waferMap.LoadData(dies);
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">if (Controls[0] is WaferMapControl map)
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">map.LoadData(dies);</span>
<span style="color: rgba(0, 0, 0, 1)">        }
    }
}</span></pre>
</div>
<p>&nbsp;</p>
<p>上边主要就是在窗体里增加一下GenerateTestData（）函数，随机的生成一些晶圆Die的行列坐标和颜色数据然后放到list里传入给Map控件。</p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt">waferDie.cs代码：</span></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Collections.Generic;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Drawing;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Linq;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Text;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Threading.Tasks;

</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> waferMpingTest1
{
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 晶圆单元数据结构</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> WaferDie
    {
        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">int</span> Row { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span>; }      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 行坐标</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">int</span> Column { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span>; }   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 列坐标</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> Color DieColor { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span>; } <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显示颜色</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">object</span> Tag { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span>; }   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 附加数据</span>
<span style="color: rgba(0, 0, 0, 1)">    }
}</span></pre>
</div>
<p>&nbsp;</p>
<p><span style="font-size: 18px">上面主要就是构建个简单的晶圆类用来存放数据</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt">WaferMapControl.cs视图：</span></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250221170901470-441511826.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt">WaferMapControl.cs代码：<br></span></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Collections.Generic;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.ComponentModel;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Drawing;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Data;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Linq;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Text;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Threading.Tasks;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Windows.Forms;

</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> waferMpingTest1
{
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 晶圆图控件类，支持缩放、平移、坐标系切换等功能
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">partial</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> WaferMapControl : UserControl
    {
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 坐标系方向枚举
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">enum</span><span style="color: rgba(0, 0, 0, 1)"> CoordinateDirection
        {
            Normal,     </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 正常坐标系（左上角为原点，向右X增加，向下Y增加）</span>
            Rotated180  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 旋转180度坐标系（右下角为原点，向左X增加，向上Y增加）</span>
<span style="color: rgba(0, 0, 0, 1)">        }

        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 晶圆单元点击事件参数类
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> DieEventArgs : EventArgs
        {
            </span><span style="color: rgba(0, 0, 255, 1)">public</span> WaferDie Die { <span style="color: rgba(0, 0, 255, 1)">get</span><span style="color: rgba(0, 0, 0, 1)">; }

            </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
            <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 初始化事件参数
            </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> DieEventArgs(WaferDie die)
            {
                Die </span>=<span style="color: rgba(0, 0, 0, 1)"> die;
            }
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 双缓冲配置</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> WaferMapControl()
        {
            DoubleBuffered </span>= <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
            SetStyle(ControlStyles.OptimizedDoubleBuffer </span>|<span style="color: rgba(0, 0, 0, 1)">
                        ControlStyles.UserPaint </span>|<span style="color: rgba(0, 0, 0, 1)">
                        ControlStyles.AllPaintingInWmPaint, </span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 启用双缓冲和自定义绘制模式</span>
<span style="color: rgba(0, 0, 0, 1)">        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 数据存储和显示参数</span>
        <span style="color: rgba(0, 0, 255, 1)">private</span> List&lt;WaferDie&gt; _dies = <span style="color: rgba(0, 0, 255, 1)">new</span> List&lt;WaferDie&gt;();    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 存储所有晶圆单元数据</span>
        <span style="color: rgba(0, 0, 255, 1)">private</span> CoordinateDirection _direction = CoordinateDirection.Normal; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 当前坐标系方向</span>
        <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">float</span> _zoom = <span style="color: rgba(128, 0, 128, 1)">1.0f</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 缩放比例</span>
        <span style="color: rgba(0, 0, 255, 1)">private</span> PointF _offset = PointF.Empty; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 平移偏移量</span>
        <span style="color: rgba(0, 0, 255, 1)">private</span> Point _lastMousePos; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 上次鼠标位置

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 属性设置</span>
        [Description(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">当前坐标系方向</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
        </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> CoordinateDirection Direction
        {
            </span><span style="color: rgba(0, 0, 255, 1)">get</span> { <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> _direction; }
            </span><span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">
            {
                _direction </span>=<span style="color: rgba(0, 0, 0, 1)"> value;
                Invalidate(); </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 触发重绘</span>
<span style="color: rgba(0, 0, 0, 1)">            }
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 加载数据（带分块处理）</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span> LoadData(IEnumerable&lt;WaferDie&gt;<span style="color: rgba(0, 0, 0, 1)"> dies)
        {
            _dies.Clear();
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 实际项目需要分块加载，这里简化处理</span>
<span style="color: rgba(0, 0, 0, 1)">            _dies.AddRange(dies);
            OptimizeData();
            Invalidate();
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 数据优化（示例：建立空间索引）</span>
        <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> OptimizeData()
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 实际项目需要根据数据量建立空间索引
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 例如使用Dictionary&lt;Tuple&lt;int, int&gt;, WaferDie&gt;快速查找</span>
<span style="color: rgba(0, 0, 0, 1)">        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 绘制逻辑</span>
        <span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">override</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> OnPaint(PaintEventArgs e)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">base</span><span style="color: rgba(0, 0, 0, 1)">.OnPaint(e);
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> g =<span style="color: rgba(0, 0, 0, 1)"> e.Graphics;
            g.SmoothingMode </span>=<span style="color: rgba(0, 0, 0, 1)"> System.Drawing.Drawing2D.SmoothingMode.AntiAlias;

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 应用缩放和平移变换</span>
<span style="color: rgba(0, 0, 0, 1)">            g.TranslateTransform(_offset.X, _offset.Y);
            g.ScaleTransform(_zoom, _zoom);

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 绘制坐标系</span>
<span style="color: rgba(0, 0, 0, 1)">            DrawCoordinateSystem(g);

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 绘制晶圆单元（优化绘制范围）</span>
            <span style="color: rgba(0, 0, 255, 1)">var</span> visibleRect =<span style="color: rgba(0, 0, 0, 1)"> GetVisibleRect();
            </span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> die <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> GetVisibleDies(visibleRect))
            {
                DrawDie(g, die);
            }
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取可见区域（逻辑坐标）</span>
        <span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> RectangleF GetVisibleRect()
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> screenRect = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> RectangleF(
                </span>-_offset.X / _zoom,  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 逻辑坐标原点对应屏幕位置</span>
                -_offset.Y /<span style="color: rgba(0, 0, 0, 1)"> _zoom,
                ClientSize.Width </span>/ _zoom,  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 屏幕宽度对应的逻辑宽度</span>
                ClientSize.Height /<span style="color: rgba(0, 0, 0, 1)"> _zoom);
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> screenRect;
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取可见晶圆单元（示例伪代码）</span>
        <span style="color: rgba(0, 0, 255, 1)">private</span> IEnumerable&lt;WaferDie&gt;<span style="color: rgba(0, 0, 0, 1)"> GetVisibleDies(RectangleF visibleRect)
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 根据空间索引快速查找可见单元
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 这里简单返回全部数据（实际需要优化）</span>
            <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> _dies;
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 绘制单个晶圆单元</span>
        <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> DrawDie(Graphics g, WaferDie die)
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 坐标转换（根据坐标系方向）</span>
            <span style="color: rgba(0, 0, 255, 1)">float</span><span style="color: rgba(0, 0, 0, 1)"> x, y;
            ConvertCoordinates(die.Column, die.Row, </span><span style="color: rgba(0, 0, 255, 1)">out</span> x, <span style="color: rgba(0, 0, 255, 1)">out</span><span style="color: rgba(0, 0, 0, 1)"> y);

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 计算绘制位置和大小</span>
            <span style="color: rgba(0, 0, 255, 1)">float</span> size = Math.Max(<span style="color: rgba(128, 0, 128, 1)">2</span>, <span style="color: rgba(128, 0, 128, 1)">4</span> / _zoom); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 动态调整显示大小（最小2像素）</span>
            <span style="color: rgba(0, 0, 255, 1)">var</span> rect = <span style="color: rgba(0, 0, 255, 1)">new</span> RectangleF(x - size / <span style="color: rgba(128, 0, 128, 1)">2</span>, y - size / <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">, size, size);

            </span><span style="color: rgba(0, 0, 255, 1)">using</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> brush = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> SolidBrush(die.DieColor))
            {
                g.FillRectangle(brush, rect);
            }
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 坐标系转换</span>
        <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> ConvertCoordinates(<span style="color: rgba(0, 0, 255, 1)">int</span> col, <span style="color: rgba(0, 0, 255, 1)">int</span> row, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span> x, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span><span style="color: rgba(0, 0, 0, 1)"> y)
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 基础坐标转换（根据实际坐标系方向实现转换）</span>
            x = col * 2f;    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 列转换为X坐标（示例比例）</span>
            y = row * 2f;    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 行转换为Y坐标（示例比例）

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 示例缩放比例，实际应根据具体需求调整</span>
            x *=<span style="color: rgba(0, 0, 0, 1)"> _zoom;
            y </span>*=<span style="color: rgba(0, 0, 0, 1)"> _zoom;

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 方向修正</span>
            <span style="color: rgba(0, 0, 255, 1)">if</span> (_direction ==<span style="color: rgba(0, 0, 0, 1)"> CoordinateDirection.Rotated180)
            {
                x </span>= ClientSize.Width -<span style="color: rgba(0, 0, 0, 1)"> x;
                y </span>= ClientSize.Height -<span style="color: rgba(0, 0, 0, 1)"> y;
            }
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 绘制坐标系</span>
        <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> DrawCoordinateSystem(Graphics g)
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 根据坐标系方向绘制坐标轴和标签
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> （具体实现略，需要处理文字方向和位置）

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 绘制十字坐标轴</span>
            g.DrawLine(Pens.Black, <span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0</span>, ClientSize.Width, <span style="color: rgba(128, 0, 128, 1)">0</span>); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> X轴</span>
            g.DrawLine(Pens.Black, <span style="color: rgba(128, 0, 128, 1)">0</span>, ClientSize.Height, <span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0</span>); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Y轴</span>
<span style="color: rgba(0, 0, 0, 1)">
            
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 鼠标交互处理</span>
        <span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">override</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> OnMouseDown(MouseEventArgs e)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">base</span><span style="color: rgba(0, 0, 0, 1)">.OnMouseDown(e);
            _lastMousePos </span>=<span style="color: rgba(0, 0, 0, 1)"> e.Location;

            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (e.Button ==<span style="color: rgba(0, 0, 0, 1)"> MouseButtons.Left)
            {
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取点击位置对应的晶圆单元</span>
                <span style="color: rgba(0, 0, 255, 1)">var</span> logicalPoint =<span style="color: rgba(0, 0, 0, 1)"> ToLogicalPoint(e.Location);
                </span><span style="color: rgba(0, 0, 255, 1)">var</span> die =<span style="color: rgba(0, 0, 0, 1)"> FindDieAt(logicalPoint);

                </span><span style="color: rgba(0, 0, 255, 1)">if</span> (die != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
                {
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 触发点击事件</span>
                    OnDieClicked(<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> DieEventArgs(die));
                }
            }
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 坐标转换（屏幕坐标→逻辑坐标）</span>
        <span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> PointF ToLogicalPoint(Point screenPoint)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> PointF(
                (screenPoint.X </span>- _offset.X) /<span style="color: rgba(0, 0, 0, 1)"> _zoom,
                (screenPoint.Y </span>- _offset.Y) /<span style="color: rgba(0, 0, 0, 1)"> _zoom);
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 查找晶圆单元（示例伪代码）</span>
        <span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> WaferDie FindDieAt(PointF logicalPoint)
        { 
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 线性查找</span>
            <span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> die <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> _dies)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">float</span><span style="color: rgba(0, 0, 0, 1)"> dieX, dieY;
                ConvertCoordinates(die.Column, die.Row, </span><span style="color: rgba(0, 0, 255, 1)">out</span> dieX, <span style="color: rgba(0, 0, 255, 1)">out</span><span style="color: rgba(0, 0, 0, 1)"> dieY);

                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 点击检测（考虑显示尺寸和误差范围）</span>
                <span style="color: rgba(0, 0, 255, 1)">if</span> (Math.Abs(dieX - logicalPoint.X) &lt; <span style="color: rgba(128, 0, 128, 1)">5</span> &amp;&amp;<span style="color: rgba(0, 0, 0, 1)">
                    Math.Abs(dieY </span>- logicalPoint.Y) &lt; <span style="color: rgba(128, 0, 128, 1)">5</span><span style="color: rgba(0, 0, 0, 1)">)
                {
                    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> die;
                }
            }
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 鼠标拖动平移</span>
        <span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">override</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> OnMouseMove(MouseEventArgs e)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">base</span><span style="color: rgba(0, 0, 0, 1)">.OnMouseMove(e);
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (e.Button ==<span style="color: rgba(0, 0, 0, 1)"> MouseButtons.Left)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">var</span> delta = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Point(
                    e.X </span>-<span style="color: rgba(0, 0, 0, 1)"> _lastMousePos.X,
                    e.Y </span>-<span style="color: rgba(0, 0, 0, 1)"> _lastMousePos.Y);
                _offset.X </span>+=<span style="color: rgba(0, 0, 0, 1)"> delta.X;
                _offset.Y </span>+=<span style="color: rgba(0, 0, 0, 1)"> delta.Y;
                _lastMousePos </span>=<span style="color: rgba(0, 0, 0, 1)"> e.Location;
                Invalidate();
            }
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 鼠标滚轮缩放</span>
        <span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">override</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> OnMouseWheel(MouseEventArgs e)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">base</span><span style="color: rgba(0, 0, 0, 1)">.OnMouseWheel(e);
            </span><span style="color: rgba(0, 0, 255, 1)">float</span> zoomFactor = <span style="color: rgba(128, 0, 128, 1)">1.1f</span><span style="color: rgba(0, 0, 0, 1)">;
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (e.Delta &lt; <span style="color: rgba(128, 0, 128, 1)">0</span>) zoomFactor = <span style="color: rgba(128, 0, 128, 1)">1</span> /<span style="color: rgba(0, 0, 0, 1)"> zoomFactor;

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 保持缩放中心</span>
            <span style="color: rgba(0, 0, 255, 1)">var</span> beforeZoom =<span style="color: rgba(0, 0, 0, 1)"> ToLogicalPoint(e.Location);
            _zoom </span>*=<span style="color: rgba(0, 0, 0, 1)"> zoomFactor;
            _zoom </span>= Math.Max(<span style="color: rgba(128, 0, 128, 1)">0.5f</span>, Math.Min(<span style="color: rgba(128, 0, 128, 1)">20</span>, _zoom)); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 限制缩放范围
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">_zoom = 0.5f;</span>
            <span style="color: rgba(0, 0, 255, 1)">var</span> afterZoom =<span style="color: rgba(0, 0, 0, 1)"> ToLogicalPoint(e.Location);

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 调整偏移量保持视觉中心</span>
            _offset.X += (afterZoom.X - beforeZoom.X) *<span style="color: rgba(0, 0, 0, 1)"> _zoom;
            _offset.Y </span>+= (afterZoom.Y - beforeZoom.Y) *<span style="color: rgba(0, 0, 0, 1)"> _zoom;

            Invalidate();
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 自定义事件</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">event</span> EventHandler&lt;DieEventArgs&gt;<span style="color: rgba(0, 0, 0, 1)"> DieClicked;
        </span><span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">virtual</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> OnDieClicked(DieEventArgs e)
        {
            DieClicked</span>?.Invoke(<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">, e);
        }
    }
}</span></pre>
</div>
<p>&nbsp;</p>
<p><span style="font-size: 18px">上面代码里基本都打了一些关键的注释，看着注释理解这个代码就行了，只是个MAP图绘制的简单demo，需要作为工业公司软件开发使用的话还需要做优化。</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px"><span style="font-size: 18pt"><strong>第四 运行效果<br></strong></span></span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">释我们随便增加20行20列晶圆数据进去显示：<br></span></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250221171235520-990846758.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">可以看到每个晶圆都绘制成了一个个绿色的小矩形块，我们还可以鼠标点击获取晶圆的行列，点击坐标系原点那个晶圆，显示0行0列</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250221171358676-336798951.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">接下来传入40万颗晶圆数据显示，不放大的话只能看到一些绿色，放大菜可以看清单颗</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250221171539830-2005525502.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">可以将其放大，晶圆都是给我设置成同一个颜色，正常大家都要对其做一些标记的活，比如好的绿色，坏的红色，良的黄色</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250221171722296-1499066731.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">接下来传入百万级的数据，正常没有到micro级别的晶圆片都不会超过百万颗晶圆。只有mircro晶圆片才会有百万级，千万级的晶圆数量。这个时候对数据处理速度和电脑的性能都有一定的考验了。</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250221172045466-1836036791.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202502/1251892-20250221172117922-2024119716.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">OK，基本这个程序就是这样了，有基本的晶圆显示，鼠标点击，滚轮缩放等功能。</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px"><span style="font-size: 18px"><span style="font-size: 18pt"><strong>第五 程序变成完整版本的优化方向（工业级软件控件）<br></strong></span></span></span></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">上面到百万级的数据就开始会出现一些操作卡顿了，客户肯定是不可以接受的，以及界面的显示功能单一都是需要优化的。总结如下：<br></span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">1. <strong>性能优化</strong></span></p>
<ul>
<li>
<p><span style="font-size: 18px"><strong>网格索引</strong>：将晶圆单元按<code>GridSize</code>划分网格，查询时只需检查邻近网格（减少75%计算量）</span></p>



</li>
<li>
<p><span style="font-size: 18px"><strong>异步加载</strong>：使用<code>Task.Run</code>在后台线程加载数据，避免阻塞UI</span></p>



</li>
<li>
<p><span style="font-size: 18px"><strong>对象池</strong>：复用图形对象（如<code>SolidBrush</code>），降低GC压力</span></p>



</li>
<li>
<p><span style="font-size: 18px"><strong>分块渲染</strong>：每次只加载视窗内的<code>ChunkSize</code>数据，内存占用降低80%</span></p>



</li>
<li><span style="font-size: 18px"><strong>渲染绘制</strong>：将同色的Die直接一起批量绘制，而不是一颗颗的绘制</span></li>



</ul>
<p><span style="font-size: 18px">2. <strong>功能增强</strong></span></p>
<ul>
<li>
<p><span style="font-size: 18px"><strong>多选功能</strong>：通过<code>Ctrl+鼠标左键</code>实现多单元选择</span></p>



</li>
<li>
<p><span style="font-size: 18px"><strong>右键菜单</strong>：显示晶圆信息（坐标、颜色等）</span></p>



</li>
<li>
<p><span style="font-size: 18px"><strong>动态加载</strong>：进度条提示数据加载状态</span></p>



</li>
<li>
<p><span style="font-size: 18px"><strong>动画效果</strong>：平移/缩放时添加平滑过渡动画</span></p>



</li>



</ul>
<p><span style="font-size: 18px">3. <strong>界面美化</strong></span></p>
<ul>
<li>
<p><span style="font-size: 18px"><strong>网格系统</strong>：可开关的网格线，辅助精确对齐</span></p>



</li>
<li>
<p><span style="font-size: 18px"><strong>渐变填充</strong>：晶圆单元使用渐变色填充</span></p>



</li>
<li>
<p><span style="font-size: 18px"><strong>主题切换</strong>：支持深色/浅色主题模式</span></p>



</li>
<li>
<p><span style="font-size: 18px"><strong>高亮效果</strong>：鼠标悬停时显示边框高亮</span></p>



</li>



</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">最后的最后，深圳广州附近有没有大佬的公司招聘c#＋winfrom+halcon工程师啊，目前五年工作经验，主要从事软件开发和半导体、Led的2d检测，目前想往视觉2.5d/3D/Ai/半导体设备检测方向走走。</span></p>
</div>
<div id="MySignature" role="contentinfo">
    转发和使用本文，请注明作者信息和原文地址---本文原作者为aircraft

---大家好我是徐飞机，有没有大佬们的公司招c++开发/图像处理/opengl/opencv/halcon实习的啊，带上我一个呗QAQ。。。hhhhhh  想要免费获取前端，后端，c/c++,matlab，Python，opencv，机器学习，深度学习，安卓，java，等等全套视频教程请关注机器视觉开发公众号，转发集赞28即可百度云获得hhhhhhhh
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.9090337703101852" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-26 20:36">2025-02-21 17:33</span>&nbsp;
<a href="https://www.cnblogs.com/DOMLX">aircraft</a>&nbsp;
阅读(<span id="post_view_count">426</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18729664" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18729664);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18729664', targetLink: 'https://www.cnblogs.com/DOMLX/p/18729664', title: 'c# 半导体/led行业 晶圆片WaferMap实现 map图实现入门篇' })">举报</a>
</div>
        