
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/TwilightLemon/p/18901390" title="发布于 2025-05-28 22:15">
    <span role="heading" aria-level="2">WPF 使用GDI+提取图片主色调并生成Mica材质特效背景</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>先看效果，在浅色模式下：<br><img src="https://blog.twlmgatito.cn/_astro/20250528-172518.DM93XDZJ_ZunXRq.webp" width="670" height="377" loading="lazy"><img src="https://blog.twlmgatito.cn/_astro/20250528-172603.CYpF9oKl_Z1v0t7I.webp" width="670" height="377" loading="lazy"><img src="https://blog.twlmgatito.cn/_astro/20250528-172800.BA8GNJuo_Z1vELuB.webp" width="670" height="377" loading="lazy"><img src="https://blog.twlmgatito.cn/_astro/20250528-172923.CImSa9Kx_phzPR.webp" width="670" height="377" loading="lazy"></p>
<p>在深色模式下：</p>
<p><img src="https://blog.twlmgatito.cn/_astro/20250528-172848.B2nIEab2_VET2v.webp" width="670" height="377" loading="lazy"><img src="https://blog.twlmgatito.cn/_astro/20250528-172812.CHxDa2J2_2lCNlo.webp" width="670" height="377" loading="lazy"><img src="https://blog.twlmgatito.cn/_astro/20250528-172727.BTU0qduG_10utdj.webp" width="670" height="377" loading="lazy"></p>
<blockquote>
<p><em>P.S. 此算法只是尽可能地接近Windows Mica效果，并非实际实现；主色调提取算法只能确保在绝大多数情况下适用。</em></p>

</blockquote>
<p>测试项目在Github上开源:</p>
<p><a href="https://github.com/TwilightLemon/MicaImageTest" rel="noopener nofollow">TwilightLemon/MicaImageTest: WPF 使用GDI+提取图片主色调并生成Mica材质特效背景</a></p>
<h1 id="一简要原理和设计">一、简要原理和设计<a class="anchor" href="https://blog.twlmgatito.cn/posts/wpf-mica-image-with-major-color-extract/#%E4%B8%80%E7%AE%80%E8%A6%81%E5%8E%9F%E7%90%86%E5%92%8C%E8%AE%BE%E8%AE%A1" rel="noopener nofollow"><span class="anchor-icon" data-pagefind-ignore=""><br></span></a></h1>
<h2 id="11-mica效果">1.1 Mica效果<a class="anchor" href="https://blog.twlmgatito.cn/posts/wpf-mica-image-with-major-color-extract/#11-mica%E6%95%88%E6%9E%9C" rel="noopener nofollow"><span class="anchor-icon" data-pagefind-ignore=""><br></span></a></h2>
<p>Mica效果是Windows 11的一个新特性，旨在为应用程序提供一种更柔和的背景效果。它通过使用桌面壁纸的颜色和纹理来创建一个静态的模糊背景效果。一个大致的模拟过程如下：</p>
<ol>
<li>根据颜色模式(浅色或深色)来调整图像对比度</li>
<li>增加一个白色/黑色的遮罩层</li>
<li>大半径 高斯模糊处理</li>
</ol>
<p>在仓库代码中给出了所有组件的实现，如果你想调整效果，可以修改以下几个值：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">1</span> <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> ApplyMicaEffect(<span style="color: rgba(0, 0, 255, 1)">this</span> Bitmap bitmap,<span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)"> isDarkmode)
</span><span style="color: rgba(0, 128, 128, 1)">2</span> <span style="color: rgba(0, 0, 0, 1)">{
</span><span style="color: rgba(0, 128, 128, 1)">3</span>     bitmap.AdjustContrast(isDarkmode?-<span style="color: rgba(128, 0, 128, 1)">1</span>:-<span style="color: rgba(128, 0, 128, 1)">20</span>);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">Light Mode通常需要一个更高的对比度</span>
<span style="color: rgba(0, 128, 128, 1)">4</span>     bitmap.AddMask(isDarkmode);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">添加遮罩层</span>
<span style="color: rgba(0, 128, 128, 1)">5</span>     bitmap.ScaleImage(<span style="color: rgba(128, 0, 128, 1)">2</span>);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">放大图像(原始图像一般为500x500)以提高输出图像质量</span>
<span style="color: rgba(0, 128, 128, 1)">6</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> rect = <span style="color: rgba(0, 0, 255, 1)">new</span> Rectangle(<span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">, bitmap.Width, bitmap.Height);
</span><span style="color: rgba(0, 128, 128, 1)">7</span>     bitmap.GaussianBlur(<span style="color: rgba(0, 0, 255, 1)">ref</span> rect, 80f, <span style="color: rgba(0, 0, 255, 1)">false</span>);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">按需要调整模糊半径</span>
<span style="color: rgba(0, 128, 128, 1)">8</span> }</pre>
</div>
<h2 id="12-主色调提取与微调">1.2 主色调提取与微调<a class="anchor" href="https://blog.twlmgatito.cn/posts/wpf-mica-image-with-major-color-extract/#12-%E4%B8%BB%E8%89%B2%E8%B0%83%E6%8F%90%E5%8F%96%E4%B8%8E%E5%BE%AE%E8%B0%83" rel="noopener nofollow"><span class="anchor-icon" data-pagefind-ignore=""><br></span></a></h2>
<p>从原始图像中提取主色调，主要过程如下：</p>
<ol>
<li>像素采样和颜色量化便于统计</li>
<li>过滤过黑或过白的颜色值(我们会在调整步骤单独处理)</li>
<li>根据HSL的饱和度和亮度来计算权重，
<ul>
<li>饱和度越高，权重越大</li>
<li>亮度稳定（我们定为0.6），权重越大</li>
</ul>
</li>
<li>选择权重最大的颜色均值作为主色调</li>
</ol>
<p>之后为了适配UI，保证亮度、饱和度适合用于呈现内容，还要对颜色进行微调：</p>
<ol>
<li>将颜色转为HSL空间</li>
<li>根据颜色模式调节亮度</li>
<li>分层调整饱和度，一般来说暗色模式的对比度比亮色模式高</li>
<li>对特定色相区间（红/绿/蓝/黄）进行差异化调整</li>
</ol>
<p>最后计算焦点颜色（FocusAccentColor）只需要根据颜色模式调整亮度即可。</p>
<h1 id="二使用方法">二、使用方法<a class="anchor" href="https://blog.twlmgatito.cn/posts/wpf-mica-image-with-major-color-extract/#%E4%BA%8C%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95" rel="noopener nofollow"><span class="anchor-icon" data-pagefind-ignore=""><br></span></a></h1>
<p>将代码仓库中的<code>ImageHelper.cs</code>添加到项目，然后在需要的地方调用<code>Bitmap</code>的扩展方法来处理图像。以下是一个简单的示例：</p>
<p>首先开启项目允许使用UnSafe代码：</p>
<div class="cnblogs_code">
<pre>  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">PropertyGroup</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> 允许使用UnSafe代码 </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">AllowUnsafeBlocks</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>true<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">AllowUnsafeBlocks</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">PropertyGroup</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>  </pre>
</div>
<p>导入本地图像文件，计算主色调、焦点色调并应用Mica效果背景：</p>
<div class="cnblogs_code">
<pre> <span style="color: rgba(0, 0, 255, 1)">var</span> image=<span style="color: rgba(0, 0, 255, 1)">new</span> BitmapImage(<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Uri(ImagePath));
 SelectedImg </span>=<span style="color: rgba(0, 0, 0, 1)"> image;
 </span><span style="color: rgba(0, 0, 255, 1)">var</span> bitmap =<span style="color: rgba(0, 0, 0, 1)"> image.ToBitmap();
 </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">major color</span>
 <span style="color: rgba(0, 0, 255, 1)">var</span> majorColor =<span style="color: rgba(0, 0, 0, 1)"> bitmap.GetMajorColor().AdjustColor(IsDarkMode);
 </span><span style="color: rgba(0, 0, 255, 1)">var</span> focusColor =<span style="color: rgba(0, 0, 0, 1)"> majorColor.ApplyColorMode(IsDarkMode);
 App.Current.Resources[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">AccentColor</span><span style="color: rgba(128, 0, 0, 1)">"</span>] = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> SolidColorBrush(majorColor);
 App.Current.Resources[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">FocusedAccentColor</span><span style="color: rgba(128, 0, 0, 1)">"</span>] = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> SolidColorBrush(focusColor);
 </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">background</span>
<span style="color: rgba(0, 0, 0, 1)"> bitmap.ApplyMicaEffect(IsDarkMode);
 BackgroundImg </span>= bitmap.ToBitmapImage();</pre>
</div>
<p>其中，<code>SelectedImg</code>和<code>BackgroundImg</code>是绑定到UI的<code>BitmapImage</code>类型属性，<code>IsDarkMode</code>是指示当前颜色模式的布尔值。</p>
<h1 id="三注意事项">三、注意事项<a class="anchor" href="https://blog.twlmgatito.cn/posts/wpf-mica-image-with-major-color-extract/#%E4%B8%89%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" rel="noopener nofollow"><span class="anchor-icon" data-pagefind-ignore=""><br></span></a></h1>
<ol>
<li>处理大图像时可能会导致性能下降，建议使用较小的图像或在后台线程中处理。</li>
<li>如果高斯模糊组件报错，请确保Nuget包<code>System.Drawing.Common</code>的版本为<code>8.0.1</code>，因为代码中使用了反射获取<code>Bitmap</code>内部的句柄。</li>
<li>你可能需要根据实际情况调整模糊半径和对比度等参数，以获得最佳效果。</li>
<li>库中实现可能并非最佳写法，如果有更好的方法可以提交PR或者评论区见。</li>
</ol>
<p>最后附上<code>ImageHelper.cs</code>的完整代码:</p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_3d5fe780-0a52-4fc9-8c3d-edbb6a24f790" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_3d5fe780-0a52-4fc9-8c3d-edbb6a24f790" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_3d5fe780-0a52-4fc9-8c3d-edbb6a24f790" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 128, 128, 1)">  1</span> <span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Drawing;
</span><span style="color: rgba(0, 128, 128, 1)">  2</span> <span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Drawing.Drawing2D;
</span><span style="color: rgba(0, 128, 128, 1)">  3</span> <span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Drawing.Imaging;
</span><span style="color: rgba(0, 128, 128, 1)">  4</span> <span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.IO;
</span><span style="color: rgba(0, 128, 128, 1)">  5</span> <span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Reflection;
</span><span style="color: rgba(0, 128, 128, 1)">  6</span> <span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Runtime.InteropServices;
</span><span style="color: rgba(0, 128, 128, 1)">  7</span> <span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Windows.Media.Imaging;
</span><span style="color: rgba(0, 128, 128, 1)">  8</span> 
<span style="color: rgba(0, 128, 128, 1)">  9</span> <span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> MicaImageTest;
</span><span style="color: rgba(0, 128, 128, 1)"> 10</span> 
<span style="color: rgba(0, 128, 128, 1)"> 11</span> <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> ImageHelper
</span><span style="color: rgba(0, 128, 128, 1)"> 12</span> <span style="color: rgba(0, 0, 0, 1)">{
</span><span style="color: rgba(0, 128, 128, 1)"> 13</span>     <span style="color: rgba(0, 0, 255, 1)">#region</span> 处理模糊图像
<span style="color: rgba(0, 128, 128, 1)"> 14</span>     [DllImport(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">gdiplus.dll</span><span style="color: rgba(128, 0, 0, 1)">"</span>, SetLastError = <span style="color: rgba(0, 0, 255, 1)">true</span>, ExactSpelling = <span style="color: rgba(0, 0, 255, 1)">true</span>, CharSet =<span style="color: rgba(0, 0, 0, 1)"> CharSet.Unicode)]
</span><span style="color: rgba(0, 128, 128, 1)"> 15</span>     <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">extern</span> <span style="color: rgba(0, 0, 255, 1)">int</span> GdipBitmapApplyEffect(IntPtr bitmap, IntPtr effect, <span style="color: rgba(0, 0, 255, 1)">ref</span> Rectangle rectOfInterest, <span style="color: rgba(0, 0, 255, 1)">bool</span> useAuxData, IntPtr auxData, <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> auxDataSize);
</span><span style="color: rgba(0, 128, 128, 1)"> 16</span>     <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 17</span>     <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 获取对象的私有字段的值
</span><span style="color: rgba(0, 128, 128, 1)"> 18</span>     <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 19</span>     <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;typeparam name="TResult"&gt;</span><span style="color: rgba(0, 128, 0, 1)">字段的类型</span><span style="color: rgba(128, 128, 128, 1)">&lt;/typeparam&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 20</span>     <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;param name="obj"&gt;</span><span style="color: rgba(0, 128, 0, 1)">要从其中获取字段值的对象</span><span style="color: rgba(128, 128, 128, 1)">&lt;/param&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 21</span>     <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;param name="fieldName"&gt;</span><span style="color: rgba(0, 128, 0, 1)">字段的名称.</span><span style="color: rgba(128, 128, 128, 1)">&lt;/param&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 22</span>     <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;returns&gt;</span><span style="color: rgba(0, 128, 0, 1)">字段的值</span><span style="color: rgba(128, 128, 128, 1)">&lt;/returns&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 23</span>     <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;exception cref="System.InvalidOperationException"&gt;</span><span style="color: rgba(0, 128, 0, 1)">无法找到该字段.</span><span style="color: rgba(128, 128, 128, 1)">&lt;/exception&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 24</span>     <span style="color: rgba(128, 128, 128, 1)">///</span> 
<span style="color: rgba(0, 128, 128, 1)"> 25</span>     <span style="color: rgba(0, 0, 255, 1)">internal</span> <span style="color: rgba(0, 0, 255, 1)">static</span> TResult GetPrivateField&lt;TResult&gt;(<span style="color: rgba(0, 0, 255, 1)">this</span> <span style="color: rgba(0, 0, 255, 1)">object</span> obj, <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> fieldName)
</span><span style="color: rgba(0, 128, 128, 1)"> 26</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)"> 27</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (obj == <span style="color: rgba(0, 0, 255, 1)">null</span>) <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)">(TResult);
</span><span style="color: rgba(0, 128, 128, 1)"> 28</span>         Type ltType =<span style="color: rgba(0, 0, 0, 1)"> obj.GetType();
</span><span style="color: rgba(0, 128, 128, 1)"> 29</span>         FieldInfo lfiFieldInfo = ltType.GetField(fieldName, BindingFlags.GetField | BindingFlags.Instance |<span style="color: rgba(0, 0, 0, 1)"> BindingFlags.NonPublic);
</span><span style="color: rgba(0, 128, 128, 1)"> 30</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (lfiFieldInfo != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)"> 31</span>             <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> (TResult)lfiFieldInfo.GetValue(obj);
</span><span style="color: rgba(0, 128, 128, 1)"> 32</span>         <span style="color: rgba(0, 0, 255, 1)">else</span>
<span style="color: rgba(0, 128, 128, 1)"> 33</span>             <span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> InvalidOperationException(<span style="color: rgba(0, 0, 255, 1)">string</span>.Format(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Instance field '{0}' could not be located in object of type '{1}'.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, fieldName, obj.GetType().FullName));
</span><span style="color: rgba(0, 128, 128, 1)"> 34</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)"> 35</span> 
<span style="color: rgba(0, 128, 128, 1)"> 36</span> <span style="color: rgba(0, 0, 0, 1)">    [StructLayout(LayoutKind.Sequential)]
</span><span style="color: rgba(0, 128, 128, 1)"> 37</span>     <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> BlurParameters
</span><span style="color: rgba(0, 128, 128, 1)"> 38</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)"> 39</span>         <span style="color: rgba(0, 0, 255, 1)">internal</span> <span style="color: rgba(0, 0, 255, 1)">float</span><span style="color: rgba(0, 0, 0, 1)"> Radius;
</span><span style="color: rgba(0, 128, 128, 1)"> 40</span>         <span style="color: rgba(0, 0, 255, 1)">internal</span> <span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)"> ExpandEdges;
</span><span style="color: rgba(0, 128, 128, 1)"> 41</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)"> 42</span>     [DllImport(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">gdiplus.dll</span><span style="color: rgba(128, 0, 0, 1)">"</span>, SetLastError = <span style="color: rgba(0, 0, 255, 1)">true</span>, ExactSpelling = <span style="color: rgba(0, 0, 255, 1)">true</span>, CharSet =<span style="color: rgba(0, 0, 0, 1)"> CharSet.Unicode)]
</span><span style="color: rgba(0, 128, 128, 1)"> 43</span>     <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">extern</span> <span style="color: rgba(0, 0, 255, 1)">int</span> GdipCreateEffect(Guid guid, <span style="color: rgba(0, 0, 255, 1)">out</span><span style="color: rgba(0, 0, 0, 1)"> IntPtr effect);
</span><span style="color: rgba(0, 128, 128, 1)"> 44</span>     <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> Guid BlurEffectGuid = <span style="color: rgba(0, 0, 255, 1)">new</span> Guid(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{633C80A4-1843-482B-9EF2-BE2834C5FDD4}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 45</span>     [DllImport(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">gdiplus.dll</span><span style="color: rgba(128, 0, 0, 1)">"</span>, SetLastError = <span style="color: rgba(0, 0, 255, 1)">true</span>, ExactSpelling = <span style="color: rgba(0, 0, 255, 1)">true</span>, CharSet =<span style="color: rgba(0, 0, 0, 1)"> CharSet.Unicode)]
</span><span style="color: rgba(0, 128, 128, 1)"> 46</span>     <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">extern</span> <span style="color: rgba(0, 0, 255, 1)">int</span> GdipSetEffectParameters(IntPtr effect, IntPtr parameters, <span style="color: rgba(0, 0, 255, 1)">uint</span><span style="color: rgba(0, 0, 0, 1)"> size);
</span><span style="color: rgba(0, 128, 128, 1)"> 47</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> IntPtr NativeHandle(<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)"> Bitmap Bmp)
</span><span style="color: rgba(0, 128, 128, 1)"> 48</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)"> 49</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 通过反射获取Bitmap的私有字段nativeImage的值，该值为GDI+的内部图像句柄
</span><span style="color: rgba(0, 128, 128, 1)"> 50</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">新版(8.0.1)Drawing的Nuget包中字段由 nativeImage变更为_nativeImage</span>
<span style="color: rgba(0, 128, 128, 1)"> 51</span>         <span style="color: rgba(0, 0, 255, 1)">return</span> Bmp.GetPrivateField&lt;IntPtr&gt;(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">_nativeImage</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 52</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)"> 53</span>     [DllImport(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">gdiplus.dll</span><span style="color: rgba(128, 0, 0, 1)">"</span>, SetLastError = <span style="color: rgba(0, 0, 255, 1)">true</span>, ExactSpelling = <span style="color: rgba(0, 0, 255, 1)">true</span>, CharSet =<span style="color: rgba(0, 0, 0, 1)"> CharSet.Unicode)]
</span><span style="color: rgba(0, 128, 128, 1)"> 54</span>     <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">extern</span> <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> GdipDeleteEffect(IntPtr effect);
</span><span style="color: rgba(0, 128, 128, 1)"> 55</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> GaussianBlur(<span style="color: rgba(0, 0, 255, 1)">this</span> Bitmap Bmp, <span style="color: rgba(0, 0, 255, 1)">ref</span> Rectangle Rect, <span style="color: rgba(0, 0, 255, 1)">float</span> Radius = <span style="color: rgba(128, 0, 128, 1)">10</span>, <span style="color: rgba(0, 0, 255, 1)">bool</span> ExpandEdge = <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)"> 56</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)"> 57</span>         <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> Result;
</span><span style="color: rgba(0, 128, 128, 1)"> 58</span> <span style="color: rgba(0, 0, 0, 1)">        IntPtr BlurEffect;
</span><span style="color: rgba(0, 128, 128, 1)"> 59</span> <span style="color: rgba(0, 0, 0, 1)">        BlurParameters BlurPara;
</span><span style="color: rgba(0, 128, 128, 1)"> 60</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> ((Radius &lt; <span style="color: rgba(128, 0, 128, 1)">0</span>) || (Radius &gt; <span style="color: rgba(128, 0, 128, 1)">255</span><span style="color: rgba(0, 0, 0, 1)">))
</span><span style="color: rgba(0, 128, 128, 1)"> 61</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)"> 62</span>             <span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> ArgumentOutOfRangeException(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">半径必须在[0,255]范围内</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 63</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)"> 64</span>         BlurPara.Radius =<span style="color: rgba(0, 0, 0, 1)"> Radius;
</span><span style="color: rgba(0, 128, 128, 1)"> 65</span>         BlurPara.ExpandEdges =<span style="color: rgba(0, 0, 0, 1)"> ExpandEdge;
</span><span style="color: rgba(0, 128, 128, 1)"> 66</span>         Result = GdipCreateEffect(BlurEffectGuid, <span style="color: rgba(0, 0, 255, 1)">out</span><span style="color: rgba(0, 0, 0, 1)"> BlurEffect);
</span><span style="color: rgba(0, 128, 128, 1)"> 67</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (Result == <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)"> 68</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)"> 69</span>             IntPtr Handle =<span style="color: rgba(0, 0, 0, 1)"> Marshal.AllocHGlobal(Marshal.SizeOf(BlurPara));
</span><span style="color: rgba(0, 128, 128, 1)"> 70</span>             Marshal.StructureToPtr(BlurPara, Handle, <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 71</span>             GdipSetEffectParameters(BlurEffect, Handle, (<span style="color: rgba(0, 0, 255, 1)">uint</span><span style="color: rgba(0, 0, 0, 1)">)Marshal.SizeOf(BlurPara));
</span><span style="color: rgba(0, 128, 128, 1)"> 72</span>             GdipBitmapApplyEffect(Bmp.NativeHandle(), BlurEffect, <span style="color: rgba(0, 0, 255, 1)">ref</span> Rect, <span style="color: rgba(0, 0, 255, 1)">false</span>, IntPtr.Zero, <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 73</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 使用GdipBitmapCreateApplyEffect函数可以不改变原始的图像，而把模糊的结果写入到一个新的图像中</span>
<span style="color: rgba(0, 128, 128, 1)"> 74</span> <span style="color: rgba(0, 0, 0, 1)">            GdipDeleteEffect(BlurEffect);
</span><span style="color: rgba(0, 128, 128, 1)"> 75</span> <span style="color: rgba(0, 0, 0, 1)">            Marshal.FreeHGlobal(Handle);
</span><span style="color: rgba(0, 128, 128, 1)"> 76</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)"> 77</span>         <span style="color: rgba(0, 0, 255, 1)">else</span>
<span style="color: rgba(0, 128, 128, 1)"> 78</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)"> 79</span>             <span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> ExternalException(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">不支持的GDI+版本，必须为GDI+1.1及以上版本，且操作系统要求为Win Vista及之后版本.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 80</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)"> 81</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)"> 82</span>     <span style="color: rgba(0, 0, 255, 1)">#endregion</span>
<span style="color: rgba(0, 128, 128, 1)"> 83</span> 
<span style="color: rgba(0, 128, 128, 1)"> 84</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> System.Windows.Media.Color GetMajorColor(<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)"> Bitmap bitmap)
</span><span style="color: rgba(0, 128, 128, 1)"> 85</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)"> 86</span>         <span style="color: rgba(0, 0, 255, 1)">int</span> skip = Math.Max(<span style="color: rgba(128, 0, 128, 1)">1</span>, Math.Min(bitmap.Width, bitmap.Height) / <span style="color: rgba(128, 0, 128, 1)">100</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 87</span> 
<span style="color: rgba(0, 128, 128, 1)"> 88</span>         Dictionary&lt;<span style="color: rgba(0, 0, 255, 1)">int</span>, ColorInfo&gt; colorMap =<span style="color: rgba(0, 0, 0, 1)"> [];
</span><span style="color: rgba(0, 128, 128, 1)"> 89</span>         <span style="color: rgba(0, 0, 255, 1)">int</span> pixelCount = <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 90</span> 
<span style="color: rgba(0, 128, 128, 1)"> 91</span>         <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> h = <span style="color: rgba(128, 0, 128, 1)">0</span>; h &lt; bitmap.Height; h +=<span style="color: rgba(0, 0, 0, 1)"> skip)
</span><span style="color: rgba(0, 128, 128, 1)"> 92</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)"> 93</span>             <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> w = <span style="color: rgba(128, 0, 128, 1)">0</span>; w &lt; bitmap.Width; w +=<span style="color: rgba(0, 0, 0, 1)"> skip)
</span><span style="color: rgba(0, 128, 128, 1)"> 94</span> <span style="color: rgba(0, 0, 0, 1)">            {
</span><span style="color: rgba(0, 128, 128, 1)"> 95</span>                 Color pixel =<span style="color: rgba(0, 0, 0, 1)"> bitmap.GetPixel(w, h);
</span><span style="color: rgba(0, 128, 128, 1)"> 96</span> 
<span style="color: rgba(0, 128, 128, 1)"> 97</span>                 <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 量化颜色 (减少相似颜色的数量)</span>
<span style="color: rgba(0, 128, 128, 1)"> 98</span>                 <span style="color: rgba(0, 0, 255, 1)">int</span> quantizedR = pixel.R / <span style="color: rgba(128, 0, 128, 1)">16</span> * <span style="color: rgba(128, 0, 128, 1)">16</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 99</span>                 <span style="color: rgba(0, 0, 255, 1)">int</span> quantizedG = pixel.G / <span style="color: rgba(128, 0, 128, 1)">16</span> * <span style="color: rgba(128, 0, 128, 1)">16</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">100</span>                 <span style="color: rgba(0, 0, 255, 1)">int</span> quantizedB = pixel.B / <span style="color: rgba(128, 0, 128, 1)">16</span> * <span style="color: rgba(128, 0, 128, 1)">16</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">101</span> 
<span style="color: rgba(0, 128, 128, 1)">102</span>                 <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 排除极端黑白色</span>
<span style="color: rgba(0, 128, 128, 1)">103</span>                 <span style="color: rgba(0, 0, 255, 1)">int</span> averange = (pixel.R + pixel.G + pixel.B) / <span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">104</span>                 <span style="color: rgba(0, 0, 255, 1)">if</span> (averange &lt; <span style="color: rgba(128, 0, 128, 1)">24</span>) <span style="color: rgba(0, 0, 255, 1)">continue</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">105</span>                 <span style="color: rgba(0, 0, 255, 1)">if</span> (averange &gt; <span style="color: rgba(128, 0, 128, 1)">230</span>) <span style="color: rgba(0, 0, 255, 1)">continue</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">106</span> 
<span style="color: rgba(0, 128, 128, 1)">107</span>                 <span style="color: rgba(0, 0, 255, 1)">int</span> colorKey = (quantizedR &lt;&lt; <span style="color: rgba(128, 0, 128, 1)">16</span>) | (quantizedG &lt;&lt; <span style="color: rgba(128, 0, 128, 1)">8</span>) |<span style="color: rgba(0, 0, 0, 1)"> quantizedB;
</span><span style="color: rgba(0, 128, 128, 1)">108</span> 
<span style="color: rgba(0, 128, 128, 1)">109</span>                 <span style="color: rgba(0, 0, 255, 1)">if</span> (colorMap.TryGetValue(colorKey, <span style="color: rgba(0, 0, 255, 1)">out</span><span style="color: rgba(0, 0, 0, 1)"> ColorInfo info))
</span><span style="color: rgba(0, 128, 128, 1)">110</span> <span style="color: rgba(0, 0, 0, 1)">                {
</span><span style="color: rgba(0, 128, 128, 1)">111</span>                     info.Count++<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">112</span>                     info.SumR +=<span style="color: rgba(0, 0, 0, 1)"> pixel.R;
</span><span style="color: rgba(0, 128, 128, 1)">113</span>                     info.SumG +=<span style="color: rgba(0, 0, 0, 1)"> pixel.G;
</span><span style="color: rgba(0, 128, 128, 1)">114</span>                     info.SumB +=<span style="color: rgba(0, 0, 0, 1)"> pixel.B;
</span><span style="color: rgba(0, 128, 128, 1)">115</span> <span style="color: rgba(0, 0, 0, 1)">                }
</span><span style="color: rgba(0, 128, 128, 1)">116</span>                 <span style="color: rgba(0, 0, 255, 1)">else</span>
<span style="color: rgba(0, 128, 128, 1)">117</span> <span style="color: rgba(0, 0, 0, 1)">                {
</span><span style="color: rgba(0, 128, 128, 1)">118</span>                     colorMap[colorKey] = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ColorInfo
</span><span style="color: rgba(0, 128, 128, 1)">119</span> <span style="color: rgba(0, 0, 0, 1)">                    {
</span><span style="color: rgba(0, 128, 128, 1)">120</span>                         Count = <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)">121</span>                         SumR =<span style="color: rgba(0, 0, 0, 1)"> pixel.R,
</span><span style="color: rgba(0, 128, 128, 1)">122</span>                         SumG =<span style="color: rgba(0, 0, 0, 1)"> pixel.G,
</span><span style="color: rgba(0, 128, 128, 1)">123</span>                         SumB =<span style="color: rgba(0, 0, 0, 1)"> pixel.B
</span><span style="color: rgba(0, 128, 128, 1)">124</span> <span style="color: rgba(0, 0, 0, 1)">                    };
</span><span style="color: rgba(0, 128, 128, 1)">125</span> <span style="color: rgba(0, 0, 0, 1)">                }
</span><span style="color: rgba(0, 128, 128, 1)">126</span>                 pixelCount++<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">127</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)">128</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">129</span> 
<span style="color: rgba(0, 128, 128, 1)">130</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (pixelCount == <span style="color: rgba(128, 0, 128, 1)">0</span> || colorMap.Count == <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">131</span>             <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> System.Windows.Media.Colors.Gray;
</span><span style="color: rgba(0, 128, 128, 1)">132</span> 
<span style="color: rgba(0, 128, 128, 1)">133</span>         <span style="color: rgba(0, 0, 255, 1)">var</span> weightedColors = colorMap.Values.Select(info =&gt;
<span style="color: rgba(0, 128, 128, 1)">134</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">135</span>             <span style="color: rgba(0, 0, 255, 1)">float</span> r = info.SumR / (<span style="color: rgba(0, 0, 255, 1)">float</span>)info.Count /<span style="color: rgba(0, 0, 0, 1)"> 255f;
</span><span style="color: rgba(0, 128, 128, 1)">136</span>             <span style="color: rgba(0, 0, 255, 1)">float</span> g = info.SumG / (<span style="color: rgba(0, 0, 255, 1)">float</span>)info.Count /<span style="color: rgba(0, 0, 0, 1)"> 255f;
</span><span style="color: rgba(0, 128, 128, 1)">137</span>             <span style="color: rgba(0, 0, 255, 1)">float</span> b = info.SumB / (<span style="color: rgba(0, 0, 255, 1)">float</span>)info.Count /<span style="color: rgba(0, 0, 0, 1)"> 255f;
</span><span style="color: rgba(0, 128, 128, 1)">138</span> 
<span style="color: rgba(0, 128, 128, 1)">139</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 转换为HSL来检查饱和度和亮度</span>
<span style="color: rgba(0, 128, 128, 1)">140</span>             RgbToHsl(r, g, b, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span> h, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span> s, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span><span style="color: rgba(0, 0, 0, 1)"> l);
</span><span style="color: rgba(0, 128, 128, 1)">141</span> 
<span style="color: rgba(0, 128, 128, 1)">142</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 颜色越饱和越有可能是主色调，过亮或过暗的颜色权重降低</span>
<span style="color: rgba(0, 128, 128, 1)">143</span>             <span style="color: rgba(0, 0, 255, 1)">float</span> weight = info.Count * s * (<span style="color: rgba(128, 0, 128, 1)">1</span> - Math.Abs(l - <span style="color: rgba(128, 0, 128, 1)">0.6f</span>) * <span style="color: rgba(128, 0, 128, 1)">1.8f</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">144</span> 
<span style="color: rgba(0, 128, 128, 1)">145</span>             <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span>
<span style="color: rgba(0, 128, 128, 1)">146</span> <span style="color: rgba(0, 0, 0, 1)">            {
</span><span style="color: rgba(0, 128, 128, 1)">147</span>                 R = info.SumR /<span style="color: rgba(0, 0, 0, 1)"> info.Count,
</span><span style="color: rgba(0, 128, 128, 1)">148</span>                 G = info.SumG /<span style="color: rgba(0, 0, 0, 1)"> info.Count,
</span><span style="color: rgba(0, 128, 128, 1)">149</span>                 B = info.SumB /<span style="color: rgba(0, 0, 0, 1)"> info.Count,
</span><span style="color: rgba(0, 128, 128, 1)">150</span>                 Weight =<span style="color: rgba(0, 0, 0, 1)"> weight
</span><span style="color: rgba(0, 128, 128, 1)">151</span> <span style="color: rgba(0, 0, 0, 1)">            };
</span><span style="color: rgba(0, 128, 128, 1)">152</span> <span style="color: rgba(0, 0, 0, 1)">        })
</span><span style="color: rgba(0, 128, 128, 1)">153</span>         .OrderByDescending(c =&gt;<span style="color: rgba(0, 0, 0, 1)"> c.Weight);
</span><span style="color: rgba(0, 128, 128, 1)">154</span> 
<span style="color: rgba(0, 128, 128, 1)">155</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (weightedColors.First() <span style="color: rgba(0, 0, 255, 1)">is</span><span style="color: rgba(0, 0, 0, 1)"> { } dominantColor)
</span><span style="color: rgba(0, 128, 128, 1)">156</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">157</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 取权重最高的颜色</span>
<span style="color: rgba(0, 128, 128, 1)">158</span>             <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> System.Windows.Media.Color.FromRgb(
</span><span style="color: rgba(0, 128, 128, 1)">159</span>                 (<span style="color: rgba(0, 0, 255, 1)">byte</span><span style="color: rgba(0, 0, 0, 1)">)dominantColor.R,
</span><span style="color: rgba(0, 128, 128, 1)">160</span>                 (<span style="color: rgba(0, 0, 255, 1)">byte</span><span style="color: rgba(0, 0, 0, 1)">)dominantColor.G,
</span><span style="color: rgba(0, 128, 128, 1)">161</span>                 (<span style="color: rgba(0, 0, 255, 1)">byte</span><span style="color: rgba(0, 0, 0, 1)">)dominantColor.B);
</span><span style="color: rgba(0, 128, 128, 1)">162</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">163</span> 
<span style="color: rgba(0, 128, 128, 1)">164</span>         <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> System.Windows.Media.Colors.Gray;
</span><span style="color: rgba(0, 128, 128, 1)">165</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">166</span> 
<span style="color: rgba(0, 128, 128, 1)">167</span>     <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> ColorInfo
</span><span style="color: rgba(0, 128, 128, 1)">168</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">169</span>         <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">int</span> Count { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
</span><span style="color: rgba(0, 128, 128, 1)">170</span>         <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">int</span> SumR { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
</span><span style="color: rgba(0, 128, 128, 1)">171</span>         <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">int</span> SumG { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
</span><span style="color: rgba(0, 128, 128, 1)">172</span>         <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">int</span> SumB { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
</span><span style="color: rgba(0, 128, 128, 1)">173</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">174</span> 
<span style="color: rgba(0, 128, 128, 1)">175</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> System.Windows.Media.Color AdjustColor(<span style="color: rgba(0, 0, 255, 1)">this</span> System.Windows.Media.Color col, <span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)"> isDarkMode)
</span><span style="color: rgba(0, 128, 128, 1)">176</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">177</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 转换为HSL色彩空间，便于调整亮度和饱和度</span>
<span style="color: rgba(0, 128, 128, 1)">178</span>         RgbToHsl(col.R / 255f, col.G / 255f, col.B / 255f, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span> h, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span> s, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span><span style="color: rgba(0, 0, 0, 1)"> l);
</span><span style="color: rgba(0, 128, 128, 1)">179</span> 
<span style="color: rgba(0, 128, 128, 1)">180</span>         <span style="color: rgba(0, 0, 255, 1)">bool</span> isNearGrayscale = s &lt; <span style="color: rgba(128, 0, 128, 1)">0.15f</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 判断是否接近灰度
</span><span style="color: rgba(0, 128, 128, 1)">181</span> 
<span style="color: rgba(0, 128, 128, 1)">182</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 1. 基于UI模式进行初步亮度调整</span>
<span style="color: rgba(0, 128, 128, 1)">183</span>         <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (isDarkMode)
</span><span style="color: rgba(0, 128, 128, 1)">184</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">185</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 在暗色模式下，避免颜色过暗，提高整体亮度</span>
<span style="color: rgba(0, 128, 128, 1)">186</span>             <span style="color: rgba(0, 0, 255, 1)">if</span> (l &lt; <span style="color: rgba(128, 0, 128, 1)">0.5f</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">187</span>                 l = <span style="color: rgba(128, 0, 128, 1)">0.3f</span> + l * <span style="color: rgba(128, 0, 128, 1)">0.5f</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">188</span> 
<span style="color: rgba(0, 128, 128, 1)">189</span>             <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (isNearGrayscale)
</span><span style="color: rgba(0, 128, 128, 1)">190</span>                 l = Math.Max(l, <span style="color: rgba(128, 0, 128, 1)">0.4f</span>); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 确保足够明亮</span>
<span style="color: rgba(0, 128, 128, 1)">191</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">192</span>         <span style="color: rgba(0, 0, 255, 1)">else</span>
<span style="color: rgba(0, 128, 128, 1)">193</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">194</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 在亮色模式下，避免颜色过亮，降低整体亮度</span>
<span style="color: rgba(0, 128, 128, 1)">195</span>             <span style="color: rgba(0, 0, 255, 1)">if</span> (l &gt; <span style="color: rgba(128, 0, 128, 1)">0.5f</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">196</span>                 l = <span style="color: rgba(128, 0, 128, 1)">0.3f</span> + l * <span style="color: rgba(128, 0, 128, 1)">0.4f</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">197</span> 
<span style="color: rgba(0, 128, 128, 1)">198</span>             <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (isNearGrayscale)
</span><span style="color: rgba(0, 128, 128, 1)">199</span>                 l = Math.Min(l, <span style="color: rgba(128, 0, 128, 1)">0.6f</span>); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 确保不过亮</span>
<span style="color: rgba(0, 128, 128, 1)">200</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">201</span> 
<span style="color: rgba(0, 128, 128, 1)">202</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 2. 调整饱和度</span>
<span style="color: rgba(0, 128, 128, 1)">203</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">isNearGrayscale)
</span><span style="color: rgba(0, 128, 128, 1)">204</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">205</span>             <span style="color: rgba(0, 0, 255, 1)">if</span> (s &gt; <span style="color: rgba(128, 0, 128, 1)">0.7f</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">206</span> <span style="color: rgba(0, 0, 0, 1)">            {
</span><span style="color: rgba(0, 128, 128, 1)">207</span>                 <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 高饱和度降低，但是暗色模式需要更鲜明的颜色</span>
<span style="color: rgba(0, 128, 128, 1)">208</span>                 s = isDarkMode ? <span style="color: rgba(128, 0, 128, 1)">0.7f</span> - (s - <span style="color: rgba(128, 0, 128, 1)">0.7f</span>) * <span style="color: rgba(128, 0, 128, 1)">0.2f</span> : <span style="color: rgba(128, 0, 128, 1)">0.65f</span> - (s - <span style="color: rgba(128, 0, 128, 1)">0.7f</span>) * <span style="color: rgba(128, 0, 128, 1)">0.4f</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">209</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)">210</span>             <span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (s &gt; <span style="color: rgba(128, 0, 128, 1)">0.4f</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">211</span> <span style="color: rgba(0, 0, 0, 1)">            {
</span><span style="color: rgba(0, 128, 128, 1)">212</span>                 <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 中等饱和度微调</span>
<span style="color: rgba(0, 128, 128, 1)">213</span>                 s = isDarkMode ? s * <span style="color: rgba(128, 0, 128, 1)">0.85f</span> : s * <span style="color: rgba(128, 0, 128, 1)">0.75f</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">214</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)">215</span>             <span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (s &gt; <span style="color: rgba(128, 0, 128, 1)">0.1f</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 低饱和度但不是接近灰度</span>
<span style="color: rgba(0, 128, 128, 1)">216</span> <span style="color: rgba(0, 0, 0, 1)">            {
</span><span style="color: rgba(0, 128, 128, 1)">217</span>                 <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 低饱和度增强，尤其在暗色模式下</span>
<span style="color: rgba(0, 128, 128, 1)">218</span>                 s = isDarkMode ? Math.Min(<span style="color: rgba(128, 0, 128, 1)">0.5f</span>, s * <span style="color: rgba(128, 0, 128, 1)">1.5f</span>) : Math.Min(<span style="color: rgba(128, 0, 128, 1)">0.4f</span>, s * <span style="color: rgba(128, 0, 128, 1)">1.3f</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">219</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)">220</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">221</span> 
<span style="color: rgba(0, 128, 128, 1)">222</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 3. 特殊色相区域的处理</span>
<span style="color: rgba(0, 128, 128, 1)">223</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (!isNearGrayscale) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 仅处理有明显色相的颜色</span>
<span style="color: rgba(0, 128, 128, 1)">224</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">225</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 红色区域 (0-30° 或 330-360°)</span>
<span style="color: rgba(0, 128, 128, 1)">226</span>             <span style="color: rgba(0, 0, 255, 1)">if</span> ((h &lt;= <span style="color: rgba(128, 0, 128, 1)">0.08f</span>) || (h &gt;= <span style="color: rgba(128, 0, 128, 1)">0.92f</span><span style="color: rgba(0, 0, 0, 1)">))
</span><span style="color: rgba(0, 128, 128, 1)">227</span> <span style="color: rgba(0, 0, 0, 1)">            {
</span><span style="color: rgba(0, 128, 128, 1)">228</span>                 <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (isDarkMode)
</span><span style="color: rgba(0, 128, 128, 1)">229</span> <span style="color: rgba(0, 0, 0, 1)">                {
</span><span style="color: rgba(0, 128, 128, 1)">230</span>                     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 暗色模式下红色需要更高饱和度和亮度</span>
<span style="color: rgba(0, 128, 128, 1)">231</span>                     s = Math.Min(<span style="color: rgba(128, 0, 128, 1)">0.7f</span>, s * <span style="color: rgba(128, 0, 128, 1)">1.1f</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">232</span>                     l = Math.Min(<span style="color: rgba(128, 0, 128, 1)">0.8f</span>, l * <span style="color: rgba(128, 0, 128, 1)">1.15f</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">233</span> <span style="color: rgba(0, 0, 0, 1)">                }
</span><span style="color: rgba(0, 128, 128, 1)">234</span>                 <span style="color: rgba(0, 0, 255, 1)">else</span>
<span style="color: rgba(0, 128, 128, 1)">235</span> <span style="color: rgba(0, 0, 0, 1)">                {
</span><span style="color: rgba(0, 128, 128, 1)">236</span>                     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 亮色模式下红色降低饱和度，避免刺眼</span>
<span style="color: rgba(0, 128, 128, 1)">237</span>                     s *= <span style="color: rgba(128, 0, 128, 1)">0.8f</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">238</span>                     l = Math.Max(<span style="color: rgba(128, 0, 128, 1)">0.4f</span>, l * <span style="color: rgba(128, 0, 128, 1)">0.9f</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">239</span> <span style="color: rgba(0, 0, 0, 1)">                }
</span><span style="color: rgba(0, 128, 128, 1)">240</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)">241</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 绿色区域 (90-150°)</span>
<span style="color: rgba(0, 128, 128, 1)">242</span>             <span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (h &gt;= <span style="color: rgba(128, 0, 128, 1)">0.25f</span> &amp;&amp; h &lt;= <span style="color: rgba(128, 0, 128, 1)">0.42f</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">243</span> <span style="color: rgba(0, 0, 0, 1)">            {
</span><span style="color: rgba(0, 128, 128, 1)">244</span>                 <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (isDarkMode)
</span><span style="color: rgba(0, 128, 128, 1)">245</span> <span style="color: rgba(0, 0, 0, 1)">                {
</span><span style="color: rgba(0, 128, 128, 1)">246</span>                     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 暗色模式下绿色提高亮度，降低饱和度，避免荧光感</span>
<span style="color: rgba(0, 128, 128, 1)">247</span>                     s *= <span style="color: rgba(128, 0, 128, 1)">0.85f</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">248</span>                     l = Math.Min(<span style="color: rgba(128, 0, 128, 1)">0.7f</span>, l * <span style="color: rgba(128, 0, 128, 1)">1.2f</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">249</span> <span style="color: rgba(0, 0, 0, 1)">                }
</span><span style="color: rgba(0, 128, 128, 1)">250</span>                 <span style="color: rgba(0, 0, 255, 1)">else</span>
<span style="color: rgba(0, 128, 128, 1)">251</span> <span style="color: rgba(0, 0, 0, 1)">                {
</span><span style="color: rgba(0, 128, 128, 1)">252</span>                     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 亮色模式下绿色降低饱和度更多</span>
<span style="color: rgba(0, 128, 128, 1)">253</span>                     s *= <span style="color: rgba(128, 0, 128, 1)">0.75f</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">254</span> <span style="color: rgba(0, 0, 0, 1)">                }
</span><span style="color: rgba(0, 128, 128, 1)">255</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)">256</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 蓝色区域 (210-270°)</span>
<span style="color: rgba(0, 128, 128, 1)">257</span>             <span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (h &gt;= <span style="color: rgba(128, 0, 128, 1)">0.58f</span> &amp;&amp; h &lt;= <span style="color: rgba(128, 0, 128, 1)">0.75f</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">258</span> <span style="color: rgba(0, 0, 0, 1)">            {
</span><span style="color: rgba(0, 128, 128, 1)">259</span>                 <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (isDarkMode)
</span><span style="color: rgba(0, 128, 128, 1)">260</span> <span style="color: rgba(0, 0, 0, 1)">                {
</span><span style="color: rgba(0, 128, 128, 1)">261</span>                     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 暗色模式下蓝色提高亮度和饱和度</span>
<span style="color: rgba(0, 128, 128, 1)">262</span>                     s = Math.Min(<span style="color: rgba(128, 0, 128, 1)">0.85f</span>, s * <span style="color: rgba(128, 0, 128, 1)">1.2f</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">263</span>                     l = Math.Min(<span style="color: rgba(128, 0, 128, 1)">0.7f</span>, l * <span style="color: rgba(128, 0, 128, 1)">1.25f</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">264</span> <span style="color: rgba(0, 0, 0, 1)">                }
</span><span style="color: rgba(0, 128, 128, 1)">265</span>                 <span style="color: rgba(0, 0, 255, 1)">else</span>
<span style="color: rgba(0, 128, 128, 1)">266</span> <span style="color: rgba(0, 0, 0, 1)">                {
</span><span style="color: rgba(0, 128, 128, 1)">267</span>                     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 亮色模式下蓝色保持中等饱和度</span>
<span style="color: rgba(0, 128, 128, 1)">268</span>                     s = Math.Min(<span style="color: rgba(128, 0, 128, 1)">0.7f</span>, Math.Max(<span style="color: rgba(128, 0, 128, 1)">0.4f</span><span style="color: rgba(0, 0, 0, 1)">, s));
</span><span style="color: rgba(0, 128, 128, 1)">269</span> <span style="color: rgba(0, 0, 0, 1)">                }
</span><span style="color: rgba(0, 128, 128, 1)">270</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)">271</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 黄色区域 (30-90°)</span>
<span style="color: rgba(0, 128, 128, 1)">272</span>             <span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (h &gt; <span style="color: rgba(128, 0, 128, 1)">0.08f</span> &amp;&amp; h &lt; <span style="color: rgba(128, 0, 128, 1)">0.25f</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">273</span> <span style="color: rgba(0, 0, 0, 1)">            {
</span><span style="color: rgba(0, 128, 128, 1)">274</span>                 <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (isDarkMode)
</span><span style="color: rgba(0, 128, 128, 1)">275</span> <span style="color: rgba(0, 0, 0, 1)">                {
</span><span style="color: rgba(0, 128, 128, 1)">276</span>                     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 暗色模式下黄色需要降低饱和度，提高亮度</span>
<span style="color: rgba(0, 128, 128, 1)">277</span>                     s *= <span style="color: rgba(128, 0, 128, 1)">0.8f</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">278</span>                     l = Math.Min(<span style="color: rgba(128, 0, 128, 1)">0.75f</span>, l * <span style="color: rgba(128, 0, 128, 1)">1.2f</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">279</span> <span style="color: rgba(0, 0, 0, 1)">                }
</span><span style="color: rgba(0, 128, 128, 1)">280</span>                 <span style="color: rgba(0, 0, 255, 1)">else</span>
<span style="color: rgba(0, 128, 128, 1)">281</span> <span style="color: rgba(0, 0, 0, 1)">                {
</span><span style="color: rgba(0, 128, 128, 1)">282</span>                     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 亮色模式下黄色大幅降低饱和度</span>
<span style="color: rgba(0, 128, 128, 1)">283</span>                     s *= <span style="color: rgba(128, 0, 128, 1)">0.7f</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">284</span>                     l = Math.Max(<span style="color: rgba(128, 0, 128, 1)">0.5f</span>, l * <span style="color: rgba(128, 0, 128, 1)">0.9f</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">285</span> <span style="color: rgba(0, 0, 0, 1)">                }
</span><span style="color: rgba(0, 128, 128, 1)">286</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)">287</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">288</span> 
<span style="color: rgba(0, 128, 128, 1)">289</span> 
<span style="color: rgba(0, 128, 128, 1)">290</span> 
<span style="color: rgba(0, 128, 128, 1)">291</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 5. 最终亮度修正 - 确保在各种UI模式下都有足够的对比度</span>
<span style="color: rgba(0, 128, 128, 1)">292</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (isDarkMode &amp;&amp; l &lt; <span style="color: rgba(128, 0, 128, 1)">0.3f</span>) l = <span style="color: rgba(128, 0, 128, 1)">0.3f</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 暗色模式下确保最小亮度</span>
<span style="color: rgba(0, 128, 128, 1)">293</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (!isDarkMode &amp;&amp; l &gt; <span style="color: rgba(128, 0, 128, 1)">0.7f</span>) l = <span style="color: rgba(128, 0, 128, 1)">0.7f</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 亮色模式下确保最大亮度
</span><span style="color: rgba(0, 128, 128, 1)">294</span> 
<span style="color: rgba(0, 128, 128, 1)">295</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 转换回RGB</span>
<span style="color: rgba(0, 128, 128, 1)">296</span>         HslToRgb(h, s, l, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span> r, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span> g, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span><span style="color: rgba(0, 0, 0, 1)"> b);
</span><span style="color: rgba(0, 128, 128, 1)">297</span> 
<span style="color: rgba(0, 128, 128, 1)">298</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 确保RGB值在有效范围内</span>
<span style="color: rgba(0, 128, 128, 1)">299</span>         <span style="color: rgba(0, 0, 255, 1)">byte</span> R = (<span style="color: rgba(0, 0, 255, 1)">byte</span>)Math.Max(<span style="color: rgba(128, 0, 128, 1)">0</span>, Math.Min(<span style="color: rgba(128, 0, 128, 1)">255</span>, r * <span style="color: rgba(128, 0, 128, 1)">255</span><span style="color: rgba(0, 0, 0, 1)">));
</span><span style="color: rgba(0, 128, 128, 1)">300</span>         <span style="color: rgba(0, 0, 255, 1)">byte</span> G = (<span style="color: rgba(0, 0, 255, 1)">byte</span>)Math.Max(<span style="color: rgba(128, 0, 128, 1)">0</span>, Math.Min(<span style="color: rgba(128, 0, 128, 1)">255</span>, g * <span style="color: rgba(128, 0, 128, 1)">255</span><span style="color: rgba(0, 0, 0, 1)">));
</span><span style="color: rgba(0, 128, 128, 1)">301</span>         <span style="color: rgba(0, 0, 255, 1)">byte</span> B = (<span style="color: rgba(0, 0, 255, 1)">byte</span>)Math.Max(<span style="color: rgba(128, 0, 128, 1)">0</span>, Math.Min(<span style="color: rgba(128, 0, 128, 1)">255</span>, b * <span style="color: rgba(128, 0, 128, 1)">255</span><span style="color: rgba(0, 0, 0, 1)">));
</span><span style="color: rgba(0, 128, 128, 1)">302</span> 
<span style="color: rgba(0, 128, 128, 1)">303</span>         <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> System.Windows.Media.Color.FromRgb(R, G, B);
</span><span style="color: rgba(0, 128, 128, 1)">304</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">305</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> System.Windows.Media.Color ApplyColorMode(<span style="color: rgba(0, 0, 255, 1)">this</span> System.Windows.Media.Color color,<span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)"> isDarkMode)
</span><span style="color: rgba(0, 128, 128, 1)">306</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">307</span>         RgbToHsl(color.R/255f,color.G/255f, color.B/255f,<span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span> h, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span> s, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span><span style="color: rgba(0, 0, 0, 1)"> l);
</span><span style="color: rgba(0, 128, 128, 1)">308</span>         <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (isDarkMode)
</span><span style="color: rgba(0, 128, 128, 1)">309</span>             l = Math.Max(<span style="color: rgba(128, 0, 128, 1)">0.05f</span>, l - <span style="color: rgba(128, 0, 128, 1)">0.1f</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">310</span>         <span style="color: rgba(0, 0, 255, 1)">else</span>
<span style="color: rgba(0, 128, 128, 1)">311</span>             l = Math.Min(<span style="color: rgba(128, 0, 128, 1)">0.95f</span>, l + <span style="color: rgba(128, 0, 128, 1)">0.1f</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">312</span> 
<span style="color: rgba(0, 128, 128, 1)">313</span>         HslToRgb(h, s, l, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span> r, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span> g, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span><span style="color: rgba(0, 0, 0, 1)"> b);
</span><span style="color: rgba(0, 128, 128, 1)">314</span>         <span style="color: rgba(0, 0, 255, 1)">return</span> System.Windows.Media.Color.FromRgb((<span style="color: rgba(0, 0, 255, 1)">byte</span>)(r * <span style="color: rgba(128, 0, 128, 1)">255</span>), (<span style="color: rgba(0, 0, 255, 1)">byte</span>)(g * <span style="color: rgba(128, 0, 128, 1)">255</span>), (<span style="color: rgba(0, 0, 255, 1)">byte</span>)(b * <span style="color: rgba(128, 0, 128, 1)">255</span><span style="color: rgba(0, 0, 0, 1)">));
</span><span style="color: rgba(0, 128, 128, 1)">315</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">316</span> 
<span style="color: rgba(0, 128, 128, 1)">317</span>     <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> RgbToHsl(<span style="color: rgba(0, 0, 255, 1)">float</span> r, <span style="color: rgba(0, 0, 255, 1)">float</span> g, <span style="color: rgba(0, 0, 255, 1)">float</span> b, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span> h, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span> s, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span><span style="color: rgba(0, 0, 0, 1)"> l)
</span><span style="color: rgba(0, 128, 128, 1)">318</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">319</span>         <span style="color: rgba(0, 0, 255, 1)">float</span> max =<span style="color: rgba(0, 0, 0, 1)"> Math.Max(r, Math.Max(g, b));
</span><span style="color: rgba(0, 128, 128, 1)">320</span>         <span style="color: rgba(0, 0, 255, 1)">float</span> min =<span style="color: rgba(0, 0, 0, 1)"> Math.Min(r, Math.Min(g, b));
</span><span style="color: rgba(0, 128, 128, 1)">321</span> 
<span style="color: rgba(0, 128, 128, 1)">322</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 计算亮度</span>
<span style="color: rgba(0, 128, 128, 1)">323</span>         l = (max + min) / <span style="color: rgba(128, 0, 128, 1)">2.0f</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">324</span> 
<span style="color: rgba(0, 128, 128, 1)">325</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 默认值初始化</span>
<span style="color: rgba(0, 128, 128, 1)">326</span>         h = <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">327</span>         s = <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">328</span> 
<span style="color: rgba(0, 128, 128, 1)">329</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (max ==<span style="color: rgba(0, 0, 0, 1)"> min)
</span><span style="color: rgba(0, 128, 128, 1)">330</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">331</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 无色调 (灰色)</span>
<span style="color: rgba(0, 128, 128, 1)">332</span>             <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">333</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">334</span> 
<span style="color: rgba(0, 128, 128, 1)">335</span>         <span style="color: rgba(0, 0, 255, 1)">float</span> d = max -<span style="color: rgba(0, 0, 0, 1)"> min;
</span><span style="color: rgba(0, 128, 128, 1)">336</span> 
<span style="color: rgba(0, 128, 128, 1)">337</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 计算饱和度</span>
<span style="color: rgba(0, 128, 128, 1)">338</span>         s = l &gt; <span style="color: rgba(128, 0, 128, 1)">0.5f</span> ? d / (<span style="color: rgba(128, 0, 128, 1)">2.0f</span> - max - min) : d / (max +<span style="color: rgba(0, 0, 0, 1)"> min);
</span><span style="color: rgba(0, 128, 128, 1)">339</span> 
<span style="color: rgba(0, 128, 128, 1)">340</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 计算色相</span>
<span style="color: rgba(0, 128, 128, 1)">341</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (max ==<span style="color: rgba(0, 0, 0, 1)"> r)
</span><span style="color: rgba(0, 128, 128, 1)">342</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">343</span>             h = (g - b) / d + (g &lt; b ? <span style="color: rgba(128, 0, 128, 1)">6.0f</span> : <span style="color: rgba(128, 0, 128, 1)">0.0f</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">344</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">345</span>         <span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (max ==<span style="color: rgba(0, 0, 0, 1)"> g)
</span><span style="color: rgba(0, 128, 128, 1)">346</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">347</span>             h = (b - r) / d + <span style="color: rgba(128, 0, 128, 1)">2.0f</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">348</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">349</span>         <span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> max == b</span>
<span style="color: rgba(0, 128, 128, 1)">350</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">351</span>             h = (r - g) / d + <span style="color: rgba(128, 0, 128, 1)">4.0f</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">352</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">353</span> 
<span style="color: rgba(0, 128, 128, 1)">354</span>         h /= <span style="color: rgba(128, 0, 128, 1)">6.0f</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">355</span> 
<span style="color: rgba(0, 128, 128, 1)">356</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 确保h在[0,1]范围内</span>
<span style="color: rgba(0, 128, 128, 1)">357</span>         h = Math.Max(<span style="color: rgba(128, 0, 128, 1)">0</span>, Math.Min(<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">, h));
</span><span style="color: rgba(0, 128, 128, 1)">358</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">359</span> 
<span style="color: rgba(0, 128, 128, 1)">360</span>     <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> HslToRgb(<span style="color: rgba(0, 0, 255, 1)">float</span> h, <span style="color: rgba(0, 0, 255, 1)">float</span> s, <span style="color: rgba(0, 0, 255, 1)">float</span> l, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span> r, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span> g, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span><span style="color: rgba(0, 0, 0, 1)"> b)
</span><span style="color: rgba(0, 128, 128, 1)">361</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">362</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 确保h在[0,1]范围内</span>
<span style="color: rgba(0, 128, 128, 1)">363</span>         h = ((h % <span style="color: rgba(128, 0, 128, 1)">1.0f</span>) + <span style="color: rgba(128, 0, 128, 1)">1.0f</span>) % <span style="color: rgba(128, 0, 128, 1)">1.0f</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">364</span> 
<span style="color: rgba(0, 128, 128, 1)">365</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 确保s和l在[0,1]范围内</span>
<span style="color: rgba(0, 128, 128, 1)">366</span>         s = Math.Max(<span style="color: rgba(128, 0, 128, 1)">0</span>, Math.Min(<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">, s));
</span><span style="color: rgba(0, 128, 128, 1)">367</span>         l = Math.Max(<span style="color: rgba(128, 0, 128, 1)">0</span>, Math.Min(<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">, l));
</span><span style="color: rgba(0, 128, 128, 1)">368</span> 
<span style="color: rgba(0, 128, 128, 1)">369</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (s == <span style="color: rgba(128, 0, 128, 1)">0.0f</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">370</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">371</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 灰度颜色</span>
<span style="color: rgba(0, 128, 128, 1)">372</span>             r = g = b =<span style="color: rgba(0, 0, 0, 1)"> l;
</span><span style="color: rgba(0, 128, 128, 1)">373</span>             <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">374</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">375</span> 
<span style="color: rgba(0, 128, 128, 1)">376</span>         <span style="color: rgba(0, 0, 255, 1)">float</span> q = l &lt; <span style="color: rgba(128, 0, 128, 1)">0.5f</span> ? l * (<span style="color: rgba(128, 0, 128, 1)">1.0f</span> + s) : l + s - l *<span style="color: rgba(0, 0, 0, 1)"> s;
</span><span style="color: rgba(0, 128, 128, 1)">377</span>         <span style="color: rgba(0, 0, 255, 1)">float</span> p = <span style="color: rgba(128, 0, 128, 1)">2.0f</span> * l -<span style="color: rgba(0, 0, 0, 1)"> q;
</span><span style="color: rgba(0, 128, 128, 1)">378</span> 
<span style="color: rgba(0, 128, 128, 1)">379</span>         r = HueToRgb(p, q, h + <span style="color: rgba(128, 0, 128, 1)">1.0f</span> / <span style="color: rgba(128, 0, 128, 1)">3.0f</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">380</span>         g =<span style="color: rgba(0, 0, 0, 1)"> HueToRgb(p, q, h);
</span><span style="color: rgba(0, 128, 128, 1)">381</span>         b = HueToRgb(p, q, h - <span style="color: rgba(128, 0, 128, 1)">1.0f</span> / <span style="color: rgba(128, 0, 128, 1)">3.0f</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">382</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">383</span> 
<span style="color: rgba(0, 128, 128, 1)">384</span>     <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">float</span> HueToRgb(<span style="color: rgba(0, 0, 255, 1)">float</span> p, <span style="color: rgba(0, 0, 255, 1)">float</span> q, <span style="color: rgba(0, 0, 255, 1)">float</span><span style="color: rgba(0, 0, 0, 1)"> t)
</span><span style="color: rgba(0, 128, 128, 1)">385</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">386</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 确保t在[0,1]范围内</span>
<span style="color: rgba(0, 128, 128, 1)">387</span>         t = ((t % <span style="color: rgba(128, 0, 128, 1)">1.0f</span>) + <span style="color: rgba(128, 0, 128, 1)">1.0f</span>) % <span style="color: rgba(128, 0, 128, 1)">1.0f</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">388</span> 
<span style="color: rgba(0, 128, 128, 1)">389</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (t &lt; <span style="color: rgba(128, 0, 128, 1)">1.0f</span> / <span style="color: rgba(128, 0, 128, 1)">6.0f</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">390</span>             <span style="color: rgba(0, 0, 255, 1)">return</span> p + (q - p) * <span style="color: rgba(128, 0, 128, 1)">6.0f</span> *<span style="color: rgba(0, 0, 0, 1)"> t;
</span><span style="color: rgba(0, 128, 128, 1)">391</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (t &lt; <span style="color: rgba(128, 0, 128, 1)">0.5f</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">392</span>             <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> q;
</span><span style="color: rgba(0, 128, 128, 1)">393</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (t &lt; <span style="color: rgba(128, 0, 128, 1)">2.0f</span> / <span style="color: rgba(128, 0, 128, 1)">3.0f</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">394</span>             <span style="color: rgba(0, 0, 255, 1)">return</span> p + (q - p) * (<span style="color: rgba(128, 0, 128, 1)">2.0f</span> / <span style="color: rgba(128, 0, 128, 1)">3.0f</span> - t) * <span style="color: rgba(128, 0, 128, 1)">6.0f</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">395</span>         <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> p;
</span><span style="color: rgba(0, 128, 128, 1)">396</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">397</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> BitmapImage ToBitmapImage(<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)"> Bitmap Bmp)
</span><span style="color: rgba(0, 128, 128, 1)">398</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">399</span>         BitmapImage BmpImage = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)">();
</span><span style="color: rgba(0, 128, 128, 1)">400</span>         <span style="color: rgba(0, 0, 255, 1)">using</span> (MemoryStream lmemStream = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)">())
</span><span style="color: rgba(0, 128, 128, 1)">401</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">402</span> <span style="color: rgba(0, 0, 0, 1)">            Bmp.Save(lmemStream, ImageFormat.Png);
</span><span style="color: rgba(0, 128, 128, 1)">403</span> <span style="color: rgba(0, 0, 0, 1)">            BmpImage.BeginInit();
</span><span style="color: rgba(0, 128, 128, 1)">404</span>             BmpImage.StreamSource = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> MemoryStream(lmemStream.ToArray());
</span><span style="color: rgba(0, 128, 128, 1)">405</span> <span style="color: rgba(0, 0, 0, 1)">            BmpImage.EndInit();
</span><span style="color: rgba(0, 128, 128, 1)">406</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">407</span>         <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> BmpImage;
</span><span style="color: rgba(0, 128, 128, 1)">408</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">409</span> 
<span style="color: rgba(0, 128, 128, 1)">410</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> Bitmap ToBitmap(<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)"> BitmapImage img){
</span><span style="color: rgba(0, 128, 128, 1)">411</span>         <span style="color: rgba(0, 0, 255, 1)">using</span> MemoryStream outStream = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)">();
</span><span style="color: rgba(0, 128, 128, 1)">412</span>         BitmapEncoder enc = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> PngBitmapEncoder();
</span><span style="color: rgba(0, 128, 128, 1)">413</span> <span style="color: rgba(0, 0, 0, 1)">        enc.Frames.Add(BitmapFrame.Create(img));
</span><span style="color: rgba(0, 128, 128, 1)">414</span> <span style="color: rgba(0, 0, 0, 1)">        enc.Save(outStream);
</span><span style="color: rgba(0, 128, 128, 1)">415</span>         <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Bitmap(outStream);
</span><span style="color: rgba(0, 128, 128, 1)">416</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">417</span> 
<span style="color: rgba(0, 128, 128, 1)">418</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> AddMask(<span style="color: rgba(0, 0, 255, 1)">this</span> Bitmap bitmap,<span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)"> darkmode)
</span><span style="color: rgba(0, 128, 128, 1)">419</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">420</span>         <span style="color: rgba(0, 0, 255, 1)">var</span> color1 = darkmode ? Color.FromArgb(<span style="color: rgba(128, 0, 128, 1)">150</span>, <span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0</span>) : Color.FromArgb(<span style="color: rgba(128, 0, 128, 1)">160</span>, <span style="color: rgba(128, 0, 128, 1)">255</span>, <span style="color: rgba(128, 0, 128, 1)">255</span>, <span style="color: rgba(128, 0, 128, 1)">255</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">421</span>         <span style="color: rgba(0, 0, 255, 1)">var</span> color2 = darkmode ? Color.FromArgb(<span style="color: rgba(128, 0, 128, 1)">180</span>, <span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0</span>) : Color.FromArgb(<span style="color: rgba(128, 0, 128, 1)">200</span>, <span style="color: rgba(128, 0, 128, 1)">255</span>, <span style="color: rgba(128, 0, 128, 1)">255</span>, <span style="color: rgba(128, 0, 128, 1)">255</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">422</span>         <span style="color: rgba(0, 0, 255, 1)">using</span> Graphics g =<span style="color: rgba(0, 0, 0, 1)"> Graphics.FromImage(bitmap);
</span><span style="color: rgba(0, 128, 128, 1)">423</span>         <span style="color: rgba(0, 0, 255, 1)">using</span> LinearGradientBrush brush = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)">(
</span><span style="color: rgba(0, 128, 128, 1)">424</span>             <span style="color: rgba(0, 0, 255, 1)">new</span> Rectangle(<span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">, bitmap.Width, bitmap.Height),
</span><span style="color: rgba(0, 128, 128, 1)">425</span> <span style="color: rgba(0, 0, 0, 1)">            color1,
</span><span style="color: rgba(0, 128, 128, 1)">426</span> <span style="color: rgba(0, 0, 0, 1)">            color2,
</span><span style="color: rgba(0, 128, 128, 1)">427</span> <span style="color: rgba(0, 0, 0, 1)">            LinearGradientMode.Vertical);
</span><span style="color: rgba(0, 128, 128, 1)">428</span>         g.FillRectangle(brush, <span style="color: rgba(0, 0, 255, 1)">new</span> Rectangle(<span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">, bitmap.Width, bitmap.Height));
</span><span style="color: rgba(0, 128, 128, 1)">429</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">430</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> AdjustContrast(<span style="color: rgba(0, 0, 255, 1)">this</span> Bitmap bitmap, <span style="color: rgba(0, 0, 255, 1)">float</span><span style="color: rgba(0, 0, 0, 1)"> contrast)
</span><span style="color: rgba(0, 128, 128, 1)">431</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">432</span>         contrast = (<span style="color: rgba(128, 0, 128, 1)">100.0f</span> + contrast) / <span style="color: rgba(128, 0, 128, 1)">100.0f</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">433</span>         contrast *=<span style="color: rgba(0, 0, 0, 1)"> contrast;
</span><span style="color: rgba(0, 128, 128, 1)">434</span> 
<span style="color: rgba(0, 128, 128, 1)">435</span>         BitmapData data = bitmap.LockBits(<span style="color: rgba(0, 0, 255, 1)">new</span> Rectangle(<span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">, bitmap.Width, bitmap.Height),
</span><span style="color: rgba(0, 128, 128, 1)">436</span> <span style="color: rgba(0, 0, 0, 1)">            ImageLockMode.ReadWrite, bitmap.PixelFormat);
</span><span style="color: rgba(0, 128, 128, 1)">437</span> 
<span style="color: rgba(0, 128, 128, 1)">438</span>         <span style="color: rgba(0, 0, 255, 1)">int</span> width =<span style="color: rgba(0, 0, 0, 1)"> bitmap.Width;
</span><span style="color: rgba(0, 128, 128, 1)">439</span>         <span style="color: rgba(0, 0, 255, 1)">int</span> height =<span style="color: rgba(0, 0, 0, 1)"> bitmap.Height;
</span><span style="color: rgba(0, 128, 128, 1)">440</span> 
<span style="color: rgba(0, 128, 128, 1)">441</span>         <span style="color: rgba(0, 0, 255, 1)">unsafe</span>
<span style="color: rgba(0, 128, 128, 1)">442</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">443</span>             <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> y = <span style="color: rgba(128, 0, 128, 1)">0</span>; y &lt; height; y++<span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">444</span> <span style="color: rgba(0, 0, 0, 1)">            {
</span><span style="color: rgba(0, 128, 128, 1)">445</span>                 <span style="color: rgba(0, 0, 255, 1)">byte</span>* row = (<span style="color: rgba(0, 0, 255, 1)">byte</span>*)data.Scan0 + (y *<span style="color: rgba(0, 0, 0, 1)"> data.Stride);
</span><span style="color: rgba(0, 128, 128, 1)">446</span>                 <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> x = <span style="color: rgba(128, 0, 128, 1)">0</span>; x &lt; width; x++<span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">447</span> <span style="color: rgba(0, 0, 0, 1)">                {
</span><span style="color: rgba(0, 128, 128, 1)">448</span>                     <span style="color: rgba(0, 0, 255, 1)">int</span> idx = x * <span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">449</span> 
<span style="color: rgba(0, 128, 128, 1)">450</span>                     <span style="color: rgba(0, 0, 255, 1)">float</span> blue = row[idx] / <span style="color: rgba(128, 0, 128, 1)">255.0f</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">451</span>                     <span style="color: rgba(0, 0, 255, 1)">float</span> green = row[idx + <span style="color: rgba(128, 0, 128, 1)">1</span>] / <span style="color: rgba(128, 0, 128, 1)">255.0f</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">452</span>                     <span style="color: rgba(0, 0, 255, 1)">float</span> red = row[idx + <span style="color: rgba(128, 0, 128, 1)">2</span>] / <span style="color: rgba(128, 0, 128, 1)">255.0f</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">453</span> 
<span style="color: rgba(0, 128, 128, 1)">454</span>                     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 转换为HSL</span>
<span style="color: rgba(0, 128, 128, 1)">455</span>                     RgbToHsl(red, green, blue, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span> h, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span> s, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">float</span><span style="color: rgba(0, 0, 0, 1)"> l);
</span><span style="color: rgba(0, 128, 128, 1)">456</span> 
<span style="color: rgba(0, 128, 128, 1)">457</span>                     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 调整亮度以增加对比度</span>
<span style="color: rgba(0, 128, 128, 1)">458</span>                     l = (((l - <span style="color: rgba(128, 0, 128, 1)">0.5f</span>) * contrast) + <span style="color: rgba(128, 0, 128, 1)">0.5f</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">459</span> 
<span style="color: rgba(0, 128, 128, 1)">460</span>                     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 转换回RGB</span>
<span style="color: rgba(0, 128, 128, 1)">461</span>                     HslToRgb(h, s, l, <span style="color: rgba(0, 0, 255, 1)">out</span> red, <span style="color: rgba(0, 0, 255, 1)">out</span> green, <span style="color: rgba(0, 0, 255, 1)">out</span><span style="color: rgba(0, 0, 0, 1)"> blue);
</span><span style="color: rgba(0, 128, 128, 1)">462</span> 
<span style="color: rgba(0, 128, 128, 1)">463</span>                     row[idx] = (<span style="color: rgba(0, 0, 255, 1)">byte</span>)Math.Max(<span style="color: rgba(128, 0, 128, 1)">0</span>, Math.Min(<span style="color: rgba(128, 0, 128, 1)">255</span>, blue * <span style="color: rgba(128, 0, 128, 1)">255.0f</span><span style="color: rgba(0, 0, 0, 1)">));
</span><span style="color: rgba(0, 128, 128, 1)">464</span>                     row[idx + <span style="color: rgba(128, 0, 128, 1)">1</span>] = (<span style="color: rgba(0, 0, 255, 1)">byte</span>)Math.Max(<span style="color: rgba(128, 0, 128, 1)">0</span>, Math.Min(<span style="color: rgba(128, 0, 128, 1)">255</span>, green * <span style="color: rgba(128, 0, 128, 1)">255.0f</span><span style="color: rgba(0, 0, 0, 1)">));
</span><span style="color: rgba(0, 128, 128, 1)">465</span>                     row[idx + <span style="color: rgba(128, 0, 128, 1)">2</span>] = (<span style="color: rgba(0, 0, 255, 1)">byte</span>)Math.Max(<span style="color: rgba(128, 0, 128, 1)">0</span>, Math.Min(<span style="color: rgba(128, 0, 128, 1)">255</span>, red * <span style="color: rgba(128, 0, 128, 1)">255.0f</span><span style="color: rgba(0, 0, 0, 1)">));
</span><span style="color: rgba(0, 128, 128, 1)">466</span> <span style="color: rgba(0, 0, 0, 1)">                }
</span><span style="color: rgba(0, 128, 128, 1)">467</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)">468</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">469</span> 
<span style="color: rgba(0, 128, 128, 1)">470</span> <span style="color: rgba(0, 0, 0, 1)">        bitmap.UnlockBits(data);
</span><span style="color: rgba(0, 128, 128, 1)">471</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">472</span> 
<span style="color: rgba(0, 128, 128, 1)">473</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> ScaleImage(<span style="color: rgba(0, 0, 255, 1)">this</span> Bitmap bitmap, <span style="color: rgba(0, 0, 255, 1)">double</span><span style="color: rgba(0, 0, 0, 1)"> scale)
</span><span style="color: rgba(0, 128, 128, 1)">474</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">475</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 计算新的尺寸</span>
<span style="color: rgba(0, 128, 128, 1)">476</span>         <span style="color: rgba(0, 0, 255, 1)">int</span> newWidth = (<span style="color: rgba(0, 0, 255, 1)">int</span>)(bitmap.Width *<span style="color: rgba(0, 0, 0, 1)"> scale);
</span><span style="color: rgba(0, 128, 128, 1)">477</span>         <span style="color: rgba(0, 0, 255, 1)">int</span> newHeight = (<span style="color: rgba(0, 0, 255, 1)">int</span>)(bitmap.Height *<span style="color: rgba(0, 0, 0, 1)"> scale);
</span><span style="color: rgba(0, 128, 128, 1)">478</span> 
<span style="color: rgba(0, 128, 128, 1)">479</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建目标位图</span>
<span style="color: rgba(0, 128, 128, 1)">480</span>         Bitmap newBitmap = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Bitmap(newWidth, newHeight, bitmap.PixelFormat);
</span><span style="color: rgba(0, 128, 128, 1)">481</span> 
<span style="color: rgba(0, 128, 128, 1)">482</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置高质量绘图参数</span>
<span style="color: rgba(0, 128, 128, 1)">483</span>         <span style="color: rgba(0, 0, 255, 1)">using</span> (Graphics graphics =<span style="color: rgba(0, 0, 0, 1)"> Graphics.FromImage(newBitmap))
</span><span style="color: rgba(0, 128, 128, 1)">484</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">485</span>             graphics.CompositingQuality =<span style="color: rgba(0, 0, 0, 1)"> CompositingQuality.HighQuality;
</span><span style="color: rgba(0, 128, 128, 1)">486</span>             graphics.InterpolationMode =<span style="color: rgba(0, 0, 0, 1)"> InterpolationMode.HighQualityBicubic;
</span><span style="color: rgba(0, 128, 128, 1)">487</span>             graphics.SmoothingMode =<span style="color: rgba(0, 0, 0, 1)"> SmoothingMode.HighQuality;
</span><span style="color: rgba(0, 128, 128, 1)">488</span>             graphics.PixelOffsetMode =<span style="color: rgba(0, 0, 0, 1)"> PixelOffsetMode.HighQuality;
</span><span style="color: rgba(0, 128, 128, 1)">489</span> 
<span style="color: rgba(0, 128, 128, 1)">490</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 绘制缩放后的图像</span>
<span style="color: rgba(0, 128, 128, 1)">491</span> <span style="color: rgba(0, 0, 0, 1)">            graphics.DrawImage(bitmap,
</span><span style="color: rgba(0, 128, 128, 1)">492</span>                 <span style="color: rgba(0, 0, 255, 1)">new</span> Rectangle(<span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">, newWidth, newHeight),
</span><span style="color: rgba(0, 128, 128, 1)">493</span>                 <span style="color: rgba(0, 0, 255, 1)">new</span> Rectangle(<span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">, bitmap.Width, bitmap.Height),
</span><span style="color: rgba(0, 128, 128, 1)">494</span> <span style="color: rgba(0, 0, 0, 1)">                GraphicsUnit.Pixel);
</span><span style="color: rgba(0, 128, 128, 1)">495</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">496</span>         bitmap =<span style="color: rgba(0, 0, 0, 1)"> newBitmap;
</span><span style="color: rgba(0, 128, 128, 1)">497</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">498</span> 
<span style="color: rgba(0, 128, 128, 1)">499</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> ApplyMicaEffect(<span style="color: rgba(0, 0, 255, 1)">this</span> Bitmap bitmap,<span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)"> isDarkmode)
</span><span style="color: rgba(0, 128, 128, 1)">500</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">501</span>         bitmap.AdjustContrast(isDarkmode?-<span style="color: rgba(128, 0, 128, 1)">1</span>:-<span style="color: rgba(128, 0, 128, 1)">20</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">502</span> <span style="color: rgba(0, 0, 0, 1)">        bitmap.AddMask(isDarkmode);
</span><span style="color: rgba(0, 128, 128, 1)">503</span>         bitmap.ScaleImage(<span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">504</span>         <span style="color: rgba(0, 0, 255, 1)">var</span> rect = <span style="color: rgba(0, 0, 255, 1)">new</span> Rectangle(<span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">, bitmap.Width, bitmap.Height);
</span><span style="color: rgba(0, 128, 128, 1)">505</span>         bitmap.GaussianBlur(<span style="color: rgba(0, 0, 255, 1)">ref</span> rect, 80f, <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">506</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">507</span> }</pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1188749/202407/1188749-20240702112134529-1920703459.png" alt="" loading="lazy"></p>
<p>&nbsp; 本作品采用&nbsp;<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" rel="noopener nofollow">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>&nbsp;进行许可。欢迎转载、使用、重新发布，但务必保留文章署名TwilightLemon，不得用于商业目的，基于本文修改后的作品务必以相同的许可发布。</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0007412471111111111" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-28 22:16">2025-05-28 22:15</span>&nbsp;
<a href="https://www.cnblogs.com/TwilightLemon">TwilightLemon</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18901390);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18901390', targetLink: 'https://www.cnblogs.com/TwilightLemon/p/18901390', title: 'WPF 使用GDI+提取图片主色调并生成Mica材质特效背景' })">举报</a>
</div>
        