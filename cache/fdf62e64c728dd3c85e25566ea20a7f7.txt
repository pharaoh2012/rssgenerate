
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/forges/p/18740749" title="发布于 2025-02-27 12:41">
    <span role="heading" aria-level="2">在.NET Core中全面使用Autofac实现高效依赖注入</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1 class="md-end-block md-heading">&nbsp;</h1>
<p class="md-end-block md-p md-focus">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">依赖注入（Dependency Injection, DI）是现代软件开发中实现松耦合设计的核心模式。虽然.NET Core内置了轻量级DI容器，但在处理复杂场景时，开发者往往需要更强大的工具。Autofac作为.NET生态中最成熟的IoC容器之一，凭借其丰富的功能和卓越的性能，成为企业级应用的首选解决方案。本文将深入探讨如何从零开始在.NET Core项目中集成Autofac，并展示其高级功能的最佳实践。</span></p>
<h2 class="md-end-block md-heading"><span class="md-plain">一、Autofac核心优势解析</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">1.1 与原生容器的对比</span></h3>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">特性</span></span></th><th><span class="td-span"><span class="md-plain">.NET Core DI</span></span></th><th><span class="td-span"><span class="md-plain">Autofac</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">构造函数注入</span></span></td>
<td><span class="td-span"><span class="md-plain">✅</span></span></td>
<td><span class="td-span"><span class="md-plain">✅</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">属性注入</span></span></td>
<td><span class="td-span"><span class="md-plain">❌</span></span></td>
<td><span class="td-span"><span class="md-plain">✅</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">拦截器（AOP）</span></span></td>
<td><span class="td-span"><span class="md-plain">❌</span></span></td>
<td><span class="td-span"><span class="md-plain">✅</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">模块化注册</span></span></td>
<td><span class="td-span"><span class="md-plain">有限支持</span></span></td>
<td><span class="td-span"><span class="md-plain">✅</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">生命周期管理</span></span></td>
<td><span class="td-span"><span class="md-plain">基础</span></span></td>
<td><span class="td-span"><span class="md-plain">多级精细控制</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">批量注册</span></span></td>
<td><span class="td-span"><span class="md-plain">手动实现</span></span></td>
<td><span class="td-span"><span class="md-plain">智能程序集扫描</span></span></td>
</tr>
</tbody>
</table>
<h3 class="md-end-block md-heading"><span class="md-plain">1.2 适用场景</span></h3>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">需要动态代理实现日志/审计的复杂业务系统</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">多租户架构中需要隔离依赖配置</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">插件式系统动态加载模块</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">对DI性能有严格要求的微服务架构</span></p>
</li>
</ul>
<div class="md-hr md-end-block"><hr></div>
<h2 class="md-end-block md-heading"><span class="md-plain">二、项目集成实战</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">2.1 环境准备</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment"># 安装核心NuGet包<br><span>dotnet add package Autofac<br><span>dotnet add package Autofac.Extensions.DependencyInjection</span></span></span></span></pre>
<h3 class="md-end-block md-heading"><span class="md-plain">2.2 启动配置（.NET 6+）</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-keyword">var <span class="cm-def">builder <span class="cm-operator">= <span class="cm-variable">WebApplication.<span class="cm-variable">CreateBuilder(<span class="cm-variable">args);<br><span>​<br><span><span class="cm-comment">// 替换默认容器工厂<br><span><span class="cm-variable">builder.<span class="cm-variable">Host.<span class="cm-variable">UseServiceProviderFactory(<span class="cm-keyword">new <span class="cm-variable">AutofacServiceProviderFactory());<br><span>​<br><span><span class="cm-comment">// Autofac容器配置<br><span><span class="cm-variable">builder.<span class="cm-variable">Host.<span class="cm-variable">ConfigureContainer<span class="cm-operator">&lt;<span class="cm-variable">ContainerBuilder<span class="cm-operator">&gt;(<span class="cm-variable">container <span class="cm-operator">=&gt; <br><span>{<br><span> &nbsp; &nbsp;<span class="cm-comment">// 直接注册示例<br><span> &nbsp; &nbsp;<span class="cm-variable">container.<span class="cm-variable">RegisterType<span class="cm-operator">&lt;<span class="cm-variable">OrderService<span class="cm-operator">&gt;()<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">As<span class="cm-operator">&lt;<span class="cm-variable">IOrderService<span class="cm-operator">&gt;()<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">InstancePerLifetimeScope();<br><span>​<br><span> &nbsp; &nbsp;<span class="cm-comment">// 模块化注册<br><span> &nbsp; &nbsp;<span class="cm-variable">container.<span class="cm-variable">RegisterModule<span class="cm-operator">&lt;<span class="cm-variable">InfrastructureModule<span class="cm-operator">&gt;();<br><span>});<br><span>​<br><span><span class="cm-keyword">var <span class="cm-def">app <span class="cm-operator">= <span class="cm-variable">builder.<span class="cm-variable">Build();</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<h3 class="md-end-block md-heading"><span class="md-plain">2.3 模块化架构设计</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// InfrastructureModule.cs<br><span><span class="cm-keyword">public <span class="cm-keyword">class <span class="cm-def">InfrastructureModule : <span class="cm-variable">Module<br><span>{<br><span> &nbsp; &nbsp;<span class="cm-keyword">protected <span class="cm-keyword">override <span class="cm-keyword">void <span class="cm-variable">Load(<span class="cm-variable">ContainerBuilder <span class="cm-variable">builder)<br><span> &nbsp;  {<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 程序集批量注册<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">var <span class="cm-def">assembly <span class="cm-operator">= <span class="cm-keyword">typeof(<span class="cm-variable">Startup).<span class="cm-variable">Assembly;<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">builder.<span class="cm-variable">RegisterAssemblyTypes(<span class="cm-variable">assembly)<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">Where(<span class="cm-variable">t <span class="cm-operator">=&gt; <span class="cm-variable">t.<span class="cm-variable">Name.<span class="cm-variable">EndsWith(<span class="cm-string">"Repository"))<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">AsImplementedInterfaces()<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">InstancePerLifetimeScope();<br><span>​<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 特殊依赖配置<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">builder.<span class="cm-variable">Register(<span class="cm-variable">c <span class="cm-operator">=&gt; <span class="cm-keyword">new <span class="cm-variable">RedisCache(<span class="cm-string">"127.0.0.1:6379"))<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">As<span class="cm-operator">&lt;<span class="cm-variable">ICacheProvider<span class="cm-operator">&gt;()<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">SingleInstance();<br><span> &nbsp;  }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<div class="md-hr md-end-block"><hr></div>
<h2 class="md-end-block md-heading"><span class="md-plain">三、生命周期管理精要</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">3.1 核心生命周期策略</span></h3>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">策略</span></span></th><th><span class="td-span"><span class="md-plain">描述</span></span></th><th><span class="td-span"><span class="md-plain">典型应用场景</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-pair-s"><code>InstancePerDependency</code></span></span></td>
<td><span class="td-span"><span class="md-plain">每次解析创建新实例（默认）</span></span></td>
<td><span class="td-span"><span class="md-plain">无状态服务，轻量级工具类</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-pair-s"><code>InstancePerLifetimeScope</code></span></span></td>
<td><span class="td-span"><span class="md-plain">同一作用域内单例</span></span></td>
<td><span class="td-span"><span class="md-plain">HTTP请求内的服务共享</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-pair-s"><code>InstancePerMatchingScope</code></span></span></td>
<td><span class="td-span"><span class="md-plain">匹配指定标签的作用域内单例</span></span></td>
<td><span class="td-span"><span class="md-plain">多租户隔离/后台任务隔离</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-pair-s"><code>InstancePerRequest</code></span></span></td>
<td><span class="td-span"><span class="md-plain">Web请求级单例（已过时，推荐使用InstancePerLifetimeScope）</span></span></td>
<td><span class="td-span"><span class="md-plain">MVC控制器依赖</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-pair-s"><code>SingleInstance</code></span></span></td>
<td><span class="td-span"><span class="md-plain">全局单例</span></span></td>
<td><span class="td-span"><span class="md-plain">配置中心/日志管理器</span></span></td>
</tr>
</tbody>
</table>
<h3 class="md-end-block md-heading"><span class="md-plain">3.2 作用域实践</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 创建嵌套作用域<br><span><span class="cm-keyword">using (<span class="cm-keyword">var <span class="cm-def">scope <span class="cm-operator">= <span class="cm-variable">container.<span class="cm-variable">BeginLifetimeScope(<span class="cm-string">"export-process"))<br><span>{<br><span> &nbsp; &nbsp;<span class="cm-keyword">var <span class="cm-def">exporter <span class="cm-operator">= <span class="cm-variable">scope.<span class="cm-variable">Resolve<span class="cm-operator">&lt;<span class="cm-variable">IDataExporter<span class="cm-operator">&gt;();<br><span> &nbsp; &nbsp;<span class="cm-variable">exporter.<span class="cm-variable">ExportToCSV();<br><span> &nbsp; &nbsp;<br><span> &nbsp; &nbsp;<span class="cm-comment">// 子作用域<br><span> &nbsp; &nbsp;<span class="cm-keyword">using (<span class="cm-keyword">var <span class="cm-def">childScope <span class="cm-operator">= <span class="cm-variable">scope.<span class="cm-variable">BeginLifetimeScope())<br><span> &nbsp;  {<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">var <span class="cm-def">validator <span class="cm-operator">= <span class="cm-variable">childScope.<span class="cm-variable">Resolve<span class="cm-operator">&lt;<span class="cm-variable">IDataValidator<span class="cm-operator">&gt;();<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">validator.<span class="cm-variable">Validate();<br><span> &nbsp;  }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<div class="md-hr md-end-block"><hr></div>
<h2 class="md-end-block md-heading"><span class="md-plain">四、高级注册技巧</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">4.1 智能属性注入</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-keyword">public <span class="cm-keyword">class <span class="cm-def">ReportService<br><span>{<br><span> &nbsp;  [<span class="cm-variable">Autowired] <span class="cm-comment">// 自动解析属性<br><span> &nbsp; &nbsp;<span class="cm-keyword">public <span class="cm-variable">ILogger <span class="cm-variable">Logger { <span class="cm-keyword">get; <span class="cm-keyword">set; }<br><span>}<br><span>​<br><span><span class="cm-comment">// 注册配置<br><span><span class="cm-variable">builder.<span class="cm-variable">RegisterType<span class="cm-operator">&lt;<span class="cm-variable">ReportService<span class="cm-operator">&gt;()<br><span> &nbsp; &nbsp; &nbsp; .<span class="cm-variable">AsSelf()<br><span> &nbsp; &nbsp; &nbsp; .<span class="cm-variable">PropertiesAutowired();</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<h3 class="md-end-block md-heading"><span class="md-plain">4.2 参数化注册</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-variable">builder.<span class="cm-variable">Register(<span class="cm-variable">c <span class="cm-operator">=&gt; <span class="cm-keyword">new <span class="cm-variable">PaymentGateway(<br><span> &nbsp; &nbsp;<span class="cm-variable">c.<span class="cm-variable">Resolve<span class="cm-operator">&lt;<span class="cm-variable">IConfiguration<span class="cm-operator">&gt;()[<span class="cm-string">"Payment:ApiKey"]<br><span>)).<span class="cm-variable">As<span class="cm-operator">&lt;<span class="cm-variable">IPaymentGateway<span class="cm-operator">&gt;();</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<h3 class="md-end-block md-heading"><span class="md-plain">4.3 泛型类型解析</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 注册泛型仓库<br><span><span class="cm-variable">builder.<span class="cm-variable">RegisterGeneric(<span class="cm-keyword">typeof(<span class="cm-variable">Repository<span class="cm-operator">&lt;&gt;))<br><span> &nbsp; &nbsp; &nbsp; .<span class="cm-variable">As(<span class="cm-keyword">typeof(<span class="cm-variable">IRepository<span class="cm-operator">&lt;&gt;))<br><span> &nbsp; &nbsp; &nbsp; .<span class="cm-variable">InstancePerLifetimeScope();<br><span>​<br><span><span class="cm-comment">// 使用示例<br><span><span class="cm-keyword">public <span class="cm-keyword">class <span class="cm-def">UserService<br><span>{<br><span> &nbsp; &nbsp;<span class="cm-keyword">private <span class="cm-keyword">readonly <span class="cm-variable">IRepository<span class="cm-operator">&lt;<span class="cm-variable">User<span class="cm-operator">&gt; <span class="cm-variable">_userRepo;<br><span> &nbsp; &nbsp;<br><span> &nbsp; &nbsp;<span class="cm-keyword">public <span class="cm-variable">UserService(<span class="cm-variable">IRepository<span class="cm-operator">&lt;<span class="cm-variable">User<span class="cm-operator">&gt; <span class="cm-variable">userRepo)<br><span> &nbsp;  {<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">_userRepo <span class="cm-operator">= <span class="cm-variable">userRepo;<br><span> &nbsp;  }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<div class="md-hr md-end-block"><hr></div>
<h2 class="md-end-block md-heading"><span class="md-plain">五、面向切面编程（AOP）实战</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">5.1 实现方法拦截</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 性能监控拦截器<br><span><span class="cm-keyword">public <span class="cm-keyword">class <span class="cm-def">PerformanceInterceptor : <span class="cm-variable">IInterceptor<br><span>{<br><span> &nbsp; &nbsp;<span class="cm-keyword">public <span class="cm-keyword">void <span class="cm-variable">Intercept(<span class="cm-variable">IInvocation <span class="cm-variable">invocation)<br><span> &nbsp;  {<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">var <span class="cm-def">stopwatch <span class="cm-operator">= <span class="cm-variable">Stopwatch.<span class="cm-variable">StartNew();<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">try<br><span> &nbsp; &nbsp; &nbsp;  {<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">invocation.<span class="cm-variable">Proceed();<br><span> &nbsp; &nbsp; &nbsp;  }<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">finally<br><span> &nbsp; &nbsp; &nbsp;  {<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Logger.<span class="cm-variable">Info(<span class="cm-variable">$<span class="cm-string">"{invocation.Method.Name} 执行耗时: {stopwatch.ElapsedMilliseconds}ms");<br><span> &nbsp; &nbsp; &nbsp;  }<br><span> &nbsp;  }<br><span>}<br><span>​<br><span><span class="cm-comment">// 注册配置<br><span><span class="cm-variable">builder.<span class="cm-variable">RegisterType<span class="cm-operator">&lt;<span class="cm-variable">PerformanceInterceptor<span class="cm-operator">&gt;();<br><span><span class="cm-variable">builder.<span class="cm-variable">RegisterType<span class="cm-operator">&lt;<span class="cm-variable">OrderService<span class="cm-operator">&gt;()<br><span> &nbsp; &nbsp; &nbsp; .<span class="cm-variable">As<span class="cm-operator">&lt;<span class="cm-variable">IOrderService<span class="cm-operator">&gt;()<br><span> &nbsp; &nbsp; &nbsp; .<span class="cm-variable">EnableInterfaceInterceptors()<br><span> &nbsp; &nbsp; &nbsp; .<span class="cm-variable">InterceptedBy(<span class="cm-keyword">typeof(<span class="cm-variable">PerformanceInterceptor));</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<h3 class="md-end-block md-heading"><span class="md-plain">5.2 特性标注方式</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>[<span class="cm-variable">AttributeUsage(<span class="cm-variable">AttributeTargets.<span class="cm-variable">Method)]<br><span><span class="cm-keyword">public <span class="cm-keyword">class <span class="cm-def">AuditLogAttribute : <span class="cm-variable">InterceptorAttribute<br><span>{<br><span> &nbsp; &nbsp;<span class="cm-keyword">public <span class="cm-keyword">override <span class="cm-variable">IInterceptor <span class="cm-variable">CreateInterceptor(<span class="cm-variable">IComponentContext <span class="cm-variable">context)<br><span> &nbsp;  {<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return <span class="cm-variable">context.<span class="cm-variable">Resolve<span class="cm-operator">&lt;<span class="cm-variable">AuditInterceptor<span class="cm-operator">&gt;();<br><span> &nbsp;  }<br><span>}<br><span>​<br><span><span class="cm-comment">// 应用示例<br><span><span class="cm-keyword">public <span class="cm-keyword">interface <span class="cm-def">IOrderService<br><span>{<br><span> &nbsp;  [<span class="cm-variable">AuditLog]<br><span> &nbsp; &nbsp;<span class="cm-keyword">void <span class="cm-variable">PlaceOrder(<span class="cm-variable">Order <span class="cm-variable">order);<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<div class="md-hr md-end-block"><hr></div>
<h2 class="md-end-block md-heading"><span class="md-plain">六、疑难问题解决方案</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">6.1 循环依赖破局</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 使用Lazy延迟加载<br><span><span class="cm-keyword">public <span class="cm-keyword">class <span class="cm-def">ServiceA<br><span>{<br><span> &nbsp; &nbsp;<span class="cm-keyword">private <span class="cm-keyword">readonly <span class="cm-variable">Lazy<span class="cm-operator">&lt;<span class="cm-variable">ServiceB<span class="cm-operator">&gt; <span class="cm-variable">_b;<br><span> &nbsp; &nbsp;<br><span> &nbsp; &nbsp;<span class="cm-keyword">public <span class="cm-variable">ServiceA(<span class="cm-variable">Lazy<span class="cm-operator">&lt;<span class="cm-variable">ServiceB<span class="cm-operator">&gt; <span class="cm-variable">b)<br><span> &nbsp;  {<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">_b <span class="cm-operator">= <span class="cm-variable">b;<br><span> &nbsp;  }<br><span>​<br><span> &nbsp; &nbsp;<span class="cm-keyword">public <span class="cm-keyword">void <span class="cm-variable">Execute()<br><span> &nbsp;  {<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">_b.<span class="cm-variable">Value.<span class="cm-variable">DoSomething();<br><span> &nbsp;  }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<h3 class="md-end-block md-heading"><span class="md-plain">6.2 诊断未注册服务</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 容器验证<br><span><span class="cm-keyword">var <span class="cm-def">container <span class="cm-operator">= <span class="cm-variable">builder.<span class="cm-variable">Build();<br><span><span class="cm-variable">container.<span class="cm-variable">AssertConfigurationIsValid(); <span class="cm-comment">// 抛出异常显示配置问题</span></span></span></span></span></span></span></span></span></span></span></span></pre>
<h3 class="md-end-block md-heading"><span class="md-plain">6.3 内存泄漏预防</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 使用Owned控制资源生命周期<br><span><span class="cm-keyword">public <span class="cm-keyword">class <span class="cm-def">DataProcessor<br><span>{<br><span> &nbsp; &nbsp;<span class="cm-keyword">private <span class="cm-keyword">readonly <span class="cm-variable-3">Func<span class="cm-operator">&lt;<span class="cm-variable">Owned<span class="cm-operator">&lt;<span class="cm-variable">IDatabaseConnection<span class="cm-operator">&gt;&gt; <span class="cm-variable">_connectionFactory;<br><span>​<br><span> &nbsp; &nbsp;<span class="cm-keyword">public <span class="cm-variable">DataProcessor(<span class="cm-variable-3">Func<span class="cm-operator">&lt;<span class="cm-variable">Owned<span class="cm-operator">&lt;<span class="cm-variable">IDatabaseConnection<span class="cm-operator">&gt;&gt; <span class="cm-variable">factory)<br><span> &nbsp;  {<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">_connectionFactory <span class="cm-operator">= <span class="cm-variable">factory;<br><span> &nbsp;  }<br><span>​<br><span> &nbsp; &nbsp;<span class="cm-keyword">public <span class="cm-keyword">void <span class="cm-variable">ProcessData()<br><span> &nbsp;  {<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">using (<span class="cm-keyword">var <span class="cm-def">connection <span class="cm-operator">= <span class="cm-variable">_connectionFactory())<br><span> &nbsp; &nbsp; &nbsp;  {<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">connection.<span class="cm-variable">Value.<span class="cm-variable">ExecuteQuery(...);<br><span> &nbsp; &nbsp; &nbsp;  } <span class="cm-comment">// 自动释放资源<br><span> &nbsp;  }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<div class="md-hr md-end-block"><hr></div>
<h2 class="md-end-block md-heading"><span class="md-plain">七、性能优化指南</span></h2>
<ol class="ol-list" start="">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong><span class="md-plain">预编译容器</span></strong><span class="md-plain">（减少运行时开销）</span></span></p>
</li>
</ol>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-keyword">var <span class="cm-def">container <span class="cm-operator">= <span class="cm-variable">builder.<span class="cm-variable">Build();<br><span><span class="cm-variable">container.<span class="cm-variable">ConfigureForRuntimePerformance();</span></span></span></span></span></span></span></span></span></pre>
<ol class="ol-list" start="2">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong><span class="md-plain">智能程序集扫描</span></strong></span></p>
</li>
</ol>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 精确指定程序集范围<br><span><span class="cm-keyword">var <span class="cm-def">domainAssembly <span class="cm-operator">= <span class="cm-keyword">typeof(<span class="cm-variable">DomainModule).<span class="cm-variable">Assembly;<br><span><span class="cm-variable">builder.<span class="cm-variable">RegisterAssemblyTypes(<span class="cm-variable">domainAssembly)<br><span> &nbsp; &nbsp; &nbsp; .<span class="cm-variable">Where(<span class="cm-variable">t <span class="cm-operator">=&gt; <span class="cm-variable">t.<span class="cm-variable">Namespace.<span class="cm-variable">EndsWith(<span class="cm-string">".Services"))<br><span> &nbsp; &nbsp; &nbsp; .<span class="cm-variable">AsImplementedInterfaces();</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<ol class="ol-list" start="3">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong><span class="md-plain">生命周期最佳实践</span></strong></span></p>
</li>
</ol>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">避免在瞬态服务中引用单例服务</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">及时释放<span class="md-pair-s"><code>IDisposable</code><span class="md-plain">对象</span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">对高频创建的对象使用<span class="md-pair-s"><code>InstancePerDependency</code></span></span></p>
</li>
</ul>
<div class="md-hr md-end-block"><hr></div>
<h2 class="md-end-block md-heading"><span class="md-plain">八、测试驱动开发</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">8.1 单元测试示例</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>[<span class="cm-variable">Test]<br><span><span class="cm-keyword">public <span class="cm-keyword">void <span class="cm-variable">Should_Create_User()<br><span>{<br><span> &nbsp; &nbsp;<span class="cm-comment">// 配置测试容器<br><span> &nbsp; &nbsp;<span class="cm-keyword">var <span class="cm-def">builder <span class="cm-operator">= <span class="cm-keyword">new <span class="cm-variable">ContainerBuilder();<br><span> &nbsp; &nbsp;<span class="cm-keyword">var <span class="cm-def">mockRepo <span class="cm-operator">= <span class="cm-keyword">new <span class="cm-variable">Mock<span class="cm-operator">&lt;<span class="cm-variable">IUserRepository<span class="cm-operator">&gt;();<br><span> &nbsp; &nbsp;<span class="cm-variable">mockRepo.<span class="cm-variable">Setup(<span class="cm-variable">r <span class="cm-operator">=&gt; <span class="cm-variable">r.<span class="cm-variable">Create(<span class="cm-variable">It.<span class="cm-variable">IsAny<span class="cm-operator">&lt;<span class="cm-variable">User<span class="cm-operator">&gt;())).<span class="cm-variable">Returns(<span class="cm-atom">true);<br><span> &nbsp; &nbsp;<br><span> &nbsp; &nbsp;<span class="cm-variable">builder.<span class="cm-variable">RegisterInstance(<span class="cm-variable">mockRepo.<span class="cm-variable-3">Object);<br><span> &nbsp; &nbsp;<span class="cm-variable">builder.<span class="cm-variable">RegisterType<span class="cm-operator">&lt;<span class="cm-variable">UserService<span class="cm-operator">&gt;().<span class="cm-variable">AsSelf();<br><span> &nbsp; &nbsp;<br><span> &nbsp; &nbsp;<span class="cm-keyword">using <span class="cm-keyword">var <span class="cm-def">container <span class="cm-operator">= <span class="cm-variable">builder.<span class="cm-variable">Build();<br><span> &nbsp; &nbsp;<span class="cm-keyword">var <span class="cm-def">service <span class="cm-operator">= <span class="cm-variable">container.<span class="cm-variable">Resolve<span class="cm-operator">&lt;<span class="cm-variable">UserService<span class="cm-operator">&gt;();<br><span> &nbsp; &nbsp;<br><span> &nbsp; &nbsp;<span class="cm-keyword">var <span class="cm-def">result <span class="cm-operator">= <span class="cm-variable">service.<span class="cm-variable">CreateUser(<span class="cm-string">"test@example.com");<br><span> &nbsp; &nbsp;<span class="cm-variable">Assert.<span class="cm-variable">IsTrue(<span class="cm-variable">result);<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<div class="md-hr md-end-block"><hr></div>
<h2 class="md-end-block md-heading"><span class="md-plain">九、架构设计建议</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">9.1 分层架构示例</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>src/<br><span>├── Presentation/<br><span>│ &nbsp; └── WebAPI（控制器、DTO）<br><span>├── Application/<br><span>│ &nbsp; └── Services（业务逻辑）<br><span>├── Domain/<br><span>│ &nbsp; └── Core（领域模型）<br><span>└── Infrastructure/<br><span> &nbsp;  ├── Persistence（仓储实现）<br><span> &nbsp;  └── CrossCutting（通用组件）</span></span></span></span></span></span></span></span></span></span></pre>
<h3 class="md-end-block md-heading"><span class="md-plain">9.2 配置原则</span></h3>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong><span class="md-plain">基础设施层</span></strong><span class="md-plain">：注册数据库访问、缓存等实现</span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong><span class="md-plain">应用层</span></strong><span class="md-plain">：注册领域服务、工作单元</span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong><span class="md-plain">表现层</span></strong><span class="md-plain">：注册控制器并启用属性注入</span></span></p>
</li>
</ul>
<div class="md-hr md-end-block"><hr></div>
<h2 class="md-end-block md-heading"><span class="md-plain">结语</span></h2>
<p class="md-end-block md-p"><span class="md-plain">通过本文的全面解析，我们深入掌握了Autofac在.NET Core项目中的高效应用方法。从基础配置到高级AOP，从生命周期管理到性能优化，Autofac展现了其作为企业级DI容器的强大实力。建议在实际项目中：</span></p>
<ol class="ol-list" start="">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">严格遵循模块化设计原则</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">建立统一的生命周期管理规范</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">结合性能分析工具持续优化</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">编写配套的DI配置测试用例</span></p>
</li>
</ol>
<p class="md-end-block md-p"><span class="md-plain">随着.NET生态的持续发展，Autofac仍将是构建高可维护性系统的利器。建议开发者定期查阅<span class="md-meta-i-c  md-link"><a href="https://autofac.org" rel="noopener nofollow"><span class="md-plain">官方文档</span></a><span class="md-plain md-expand">，结合项目实际需求探索更高级的用法，持续提升架构质量。</span></span></span></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0690938167175926" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-27 12:42">2025-02-27 12:41</span>&nbsp;
<a href="https://www.cnblogs.com/forges">努力，努力再努力</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18740749" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18740749);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18740749', targetLink: 'https://www.cnblogs.com/forges/p/18740749', title: '在.NET Core中全面使用Autofac实现高效依赖注入' })">举报</a>
</div>
        