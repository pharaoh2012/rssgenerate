
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/1873cy/p/18844467" title="发布于 2025-04-25 11:00">
    <span role="heading" aria-level="2">从零开始：基于CUDA 12.6的YOLOv5模型训练实战（RTX 2050显卡全流程）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="基于cuda126训练yolov5模型">基于cuda12.6训练yolov5模型</h1>
<p>前面完成了<a href="https://www.cnblogs.com/1873cy/p/18791247" target="_blank">使用CPU调用yolov5s模型进行识别车辆</a>，现在想训练自己的模型进行目标识别，使用CPU效率太低，尝试使用GPU加速的<code>Pytorch</code>，再重新整理了一下完整的流程</p>
<ul>
<li>
<p>注：</p>
<ul>
<li>显卡：RTX 2050</li>
<li>cuda：NVIDIA CUDA 12.7.33</li>
</ul>
</li>
<li>
<p>最后完成了一个识别doro头像的模型：<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424135945499-1004935193.png" alt="" loading="lazy"></p>
</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250425105421664-653968760.gif" alt="" loading="lazy"></p>
<p><strong>GitHub开源地址</strong>：<a href="https://github.com/ChengYull/YOLOv5-CUDA12_6-Training" target="_blank" rel="noopener nofollow">https://github.com/ChengYull/YOLOv5-CUDA12_6-Training</a></p>
<h2 id="环境部署">环境部署</h2>
<h3 id="anaconda环境">Anaconda环境</h3>
<p>Anaconda 是一个用于数据科学和机器学习的开源 Python 发行版本，它简化了包管理和环境管理。可以创建隔离的 Python 环境，避免包冲突。</p>
<ul>
<li>隔离的Python环境非常重要，因为在训练时用到的图片标注工具需要Python3.9版本，而进行训练时用的是Python3.10版本</li>
</ul>
<p>前往官网下载最新版即可：<a href="https://www.anaconda.com/download/" target="_blank" rel="noopener nofollow">https://www.anaconda.com/download/</a></p>
<p>安装完成后使用<code>win+r</code>输入<code>cmd</code>打开命令行，输入<code>conda --version</code>命令</p>
<p>如果成功获取到了版本，说明安装成功<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424141322007-1912821309.png" alt="" loading="lazy"></p>
<p>如果提示找不到<code>conda</code>命令，则需要手动配置下环境变量</p>
<p>找到系统变量中的<code>Path</code>，然后下<code>Anaconda</code>安装目录中的<code>condabin</code>目录添加进去<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424141508796-1931243998.png" alt="" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424141519070-1645354318.png" alt="" loading="lazy"></p>
<p>确定关闭环境变量窗口后，新开命令行重新输入<code>conda --version</code>命令 应当是能获取到对应安装的版本<br>
至此Anaconda环境配置完成</p>
<ul>
<li>常用命令
<ul>
<li>创建环境：<code>conda create -n 环境名 python=版本号</code></li>
<li>激活环境：<code>conda activate 环境名</code></li>
<li>删除环境：<code>conda env remove --name 环境名</code></li>
</ul>
</li>
</ul>
<p>环境配置完成，顺便创建虚拟环境</p>
<p>命令行输入：</p>
<pre><code>conda create -n doro python=3.10
</code></pre>
<p>创建环境<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424142325818-1266602669.png" alt="" loading="lazy"><br>
创建完成，在conda根目录的env文件夹下也会生成对应环境名的文件夹<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424142458857-610772745.png" alt="" loading="lazy"></p>
<p>激活环境</p>
<pre><code>conda activate doro
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424142514206-1137817523.png" alt="" loading="lazy"></p>
<h3 id="pytorch环境">Pytorch环境</h3>
<p>这里已经决定使用GPU，需要查看显卡的cuda版本，安装对应支持的cuda版本，再安装对应的Pytorch版本</p>
<h4 id="cuda安装">cuda安装</h4>
<p>打开英伟达控制面板，电脑任务栏搜索可以直接搜索<code>NVIDIA Contol Panel</code>打开<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424143828294-733580931.png" alt="" loading="lazy"></p>
<p>找到系统信息<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424143906454-1602717749.png" alt="" loading="lazy"><br>
找到cuda版本信息<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424144004061-17695703.png" alt="" loading="lazy"></p>
<p>这里我的版本是<code>12.7.33</code>，也就是安装的cuda版本要小于等于<code>12.7.33</code></p>
<p>打开cuda的下载地址：<a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener nofollow">https://developer.nvidia.com/cuda-toolkit-archive</a></p>
<p>这里我选择了<code>12.6.0</code>版本<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424145440856-639507554.png" alt="" loading="lazy"></p>
<p>这里选择的网络版下载<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424150902928-1498247263.png" alt="" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424151037059-1875588242.png" alt="" loading="lazy"><br>
注意可以选择自定义（精简默认安装C盘）<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424151143078-1063372528.png" alt="" loading="lazy"><br>
第一次安装尽量全选<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424151226165-2105451827.png" alt="" loading="lazy"></p>
<p>等待下载安装<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424151619814-1361588425.png" alt="" loading="lazy"></p>
<p>安装完成后，查看环境变量<code>Path</code>，确定安装完成<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424151840501-317052447.png" alt="" loading="lazy"></p>
<p>打开命令行，运行<code>nvcc --version</code>即可查看版本号<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424151959749-42613604.png" alt="" loading="lazy"><br>
安装成功</p>
<h4 id="cudnn安装">cuDNN安装</h4>
<p>cuDNN（CUDA Deep Neural Network Library）是 NVIDIA 官方推出的 GPU 加速深度学习库，专为深度神经网络（DNN）计算优化，支持 CNN（卷积神经网络）、RNN（循环神经网络）、Transformer 等模型的训练和推理加速。</p>
<p>cuDNN需要登录英伟达账户才能下载，没有直接注册即可</p>
<p>下载地址：<a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="noopener nofollow">https://developer.nvidia.com/rdp/cudnn-download</a><br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424152340209-496213722.png" alt="" loading="lazy"></p>
<p>同上选择自定义 全选<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424152609255-593755049.png" alt="" loading="lazy"></p>
<p>记住安装目录<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424152713600-1863340466.png" alt="" loading="lazy"></p>
<p>安装完成后打开对应目录<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424152805407-619168035.png" alt="" loading="lazy"></p>
<p>将bin、include、lib文件夹拷贝到cuda的安装目录下<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424152910967-745448163.png" alt="" loading="lazy"></p>
<p>查看环境变量中是否配置了这4项（若没有则补上）<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424153254087-708330912.png" alt="" loading="lazy"></p>
<p>cuDNN安装完成</p>
<h4 id="pytorch安装">Pytorch安装</h4>
<p>打开Pytorch官网：<a href="https://pytorch.org/" target="_blank" rel="noopener nofollow">https://pytorch.org/</a></p>
<p>往下滑找到下图模块，选择对应的版本（cuda12.6不支持Conda安装 仅能使用pip安装）复制安装命令<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424154043576-1466216906.png" alt="" loading="lazy"></p>
<p>cuda12.6版本的Pytorch，清华镜像源暂时没更新，使用清华镜像会下载cpu版本，所以只能使用源地址下载，大概要下载两个小时</p>
<p>注意要在激活对应的Conda环境下运行命令<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424154444457-1769767384.png" alt="" loading="lazy"></p>
<p>等待下载完成</p>
<p>完成后可以前往Pycharm中验证是否能够调用到GPU</p>
<p>新建项目，选择基础conda（在自定义环境中conda无法选取我们创建的安装Pytorch的虚拟环境）<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424165806609-708552382.png" alt="" loading="lazy"></p>
<p>创建后，进入设置-项目-Python解释器，修改环境为安装Pytorch的环境<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424170314853-1413688622.png" alt="" loading="lazy"></p>
<p>创建程序 验证<br>
代码：</p>
<pre><code>import torch

flag = torch.cuda.is_available()
print(flag)

ngpu = 1
# Decide which device we want to run on
device = torch.device("cuda:0" if (torch.cuda.is_available() and ngpu &gt; 0) else "cpu")
print(device)
print(torch.cuda.get_device_name(0))
print(torch.rand(3, 3).cuda())
</code></pre>
<p>成功调用到GPU<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424170439749-1393621488.png" alt="" loading="lazy"></p>
<p>至此所有环境配置完成</p>
<h2 id="训练集准备">训练集准备</h2>
<h3 id="labelimg图片标注工具安装">labelImg图片标注工具安装</h3>
<p>给图片标注构造训练集，用于训练模型，由于在Python3.10环境下，labelImg软件存在闪退问题，这里使用Conda为LabelImg创建一个新的Python3.9环境</p>
<pre><code>conda create -n label python=3.9
</code></pre>
<p>注意先激活环境再安装LabelImg</p>
<pre><code>conda activate label
</code></pre>
<p>安装LabelImg</p>
<pre><code>conda install pyqt labelimg
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424161426806-1796891561.png" alt="" loading="lazy"></p>
<p>找到创建的环境目录，找到Scrip文件夹<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424161544409-1959810354.png" alt="" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424163642789-130762297.png" alt="" loading="lazy"></p>
<p>打开界面如下<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424163910913-1273858570.png" alt="" loading="lazy"></p>
<p>可以参考一下我的设置<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424164603461-1965799835.png" alt="" loading="lazy"></p>
<p>注意：save下方一定要选择yolo模型，否则标注保存的文件是xml文件而非txt文件</p>
<h3 id="标注图片">标注图片</h3>
<p>创建一个单独的文件夹，我这里命名train，再在里面创建两个文件夹（images、labels）以及一个yaml文件（doro.yaml）<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424164407325-1125869633.png" alt="" loading="lazy"></p>
<p>yaml文件内容：</p>
<pre><code># train and val data as 1) directory: path/images/, 2) file: path/images.txt, or 3) list: [path1/images/, path2/images/]
train: ../train/images/
val: ../train/images/
# number of classes
nc: 1

# class names
names: ['doro']
</code></pre>
<p>准备好用于训练的图片，我这里是在网上下载的表情包，大概有五十多张，放到刚刚创建的images文件夹中<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424164205881-1972734839.png" alt="" loading="lazy"></p>
<p>打开LabelImg，选择打开文件夹<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424164745309-1242936887.png" alt="" loading="lazy"></p>
<p>选择保存文件夹位置<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424164826767-672047488.png" alt="" loading="lazy"></p>
<p>设置一下label名称，就无需手动输入了<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424164929189-2075500826.png" alt="" loading="lazy"></p>
<p>按键<code>w</code>可以快捷创建选框，按键<code>A</code>和<code>D</code>是切换上下张图片</p>
<p>完成后在labels文件夹下就会出现标注的内容<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424165128892-1466412113.png" alt="" loading="lazy"></p>
<p>至此训练集准备完成</p>
<h2 id="模型训练">模型训练</h2>
<h3 id="yolov5模型源码部署">yolov5模型源码部署</h3>
<p>Github仓库获取yolov5源码：<a href="https://github.com/ultralytics/yolov5" target="_blank" rel="noopener nofollow">https://github.com/ultralytics/yolov5</a></p>
<p>这里我使用的是Pycharm克隆项目<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424171015989-1354189629.png" alt="" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424171153334-507369781.png" alt="" loading="lazy"></p>
<p>将对应地址填入克隆配置中<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424171212004-595545810.png" alt="" loading="lazy"></p>
<p>克隆完成如图<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424171325996-1780762493.png" alt="" loading="lazy"></p>
<p>同上设置Python解释器<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424171440218-1622558971.png" alt="" loading="lazy"></p>
<p>安装依赖</p>
<pre><code>pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424171630907-1701511002.png" alt="" loading="lazy"></p>
<p>安装完成后测试运行（第一次运行会自动下载<code>yolov5s.pt</code>模型）</p>
<pre><code>python detect.py --weights yolov5s.pt --source data/images/bus.jpg

</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424172838300-528038632.png" alt="" loading="lazy"></p>
<p>在runs目录如果可以查看到运行结果，说明运行正常<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250424172949257-2033089991.png" alt="" loading="lazy"></p>
<h3 id="训练">训练</h3>
<p>这里为了方便，将之前创建的train文件夹（存放训练集）移动到项目中<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250425092649501-1350650301.png" alt="" loading="lazy"></p>
<p>在目录中创建<code>src</code>文件夹，用于存放自己的代码<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250425091456854-2003513256.png" alt="" loading="lazy"></p>
<p>配置训练参数（数据集路径需要改为对应的yaml文件路径）</p>
<pre><code>from train import parse_opt, main
import torch
# 在训练前清理GPU缓存
torch.cuda.empty_cache()
def custom_train():
    opt = parse_opt()
    opt.data = "../train/doro.yaml"  # 数据集路径
    opt.weights = "../yolov5s.pt"    # 权重文件
    opt.imgsz = 640                # 图像尺寸
    opt.batch_size = 8             # 批量大小
    opt.epochs = 100               # 训练轮次
    opt.nosave = False             # 允许保存检查点
    opt.save_period = 20           # 每20轮保存一次
    opt.cache = True               # 启用数据缓存
    opt.device = "0"               # 使用GPU 0（若为CPU则设为"cpu"）
    opt.lr0 = 0.01                 # 初始学习率

    # 启动训练
    main(opt)

if __name__ == "__main__":
    custom_train()
</code></pre>
<p>其中图像尺寸<code>imgsz</code>和批量大小<code>batch_size</code>要根据显存配置，如果训练过程中出现<code>torch.OutOfMemoryError: CUDA out of memory</code>，试着将其适当调小<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250425094642594-227456274.png" alt="" loading="lazy"></p>
<p>如果多次修改无果，可以试着重启电脑（亲测有效）</p>
<p>训练正式开始，等待100轮的训练<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250425095848203-368675216.png" alt="" loading="lazy"></p>
<p>训练完成后，在<code>runs</code>文件夹下可以找到训练好的模型文件（如果不想保存中间生成的模型文件，可以在训练参数将<code>opt.nosave = True</code>改为True，删掉<code>opt.save_period = 20</code>配置）<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250425100805487-1220288430.png" alt="" loading="lazy"></p>
<h2 id="测试模型">测试模型</h2>
<p>这里使用<code>openCV</code>来读取视频来识别作为测试</p>
<pre><code>import cv2
import torch


# 读取视频
video_path = "../testVideo/doro3.mp4"
cap = cv2.VideoCapture(video_path)

# 加载训练的模型
model = torch.hub.load('../../test_doro', 'custom', path='../runs/train/exp/weights/best.pt', source='local')

# 检查视频是否成功打开
if not cap.isOpened():
    print("无法打开视频文件")
    exit()

# 播放视频
while True:
    ret, frame = cap.read()
    if not ret:
        break

    # 模型推理
    results = model(frame)
    # 获取预测结果
    for pred in results.pred[0]:
        x1, y1, x2, y2, conf, cls = pred.tolist()
        class_name = model.names[int(cls)]
        # 输出结果
        print(f"检测到：{class_name}, 置信度：{conf:.2f}")
        cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 2)
        cv2.putText(frame, f"{class_name} {conf:.2f}", (int(x1), int(y1) - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)
    # 显示当前帧
    cv2.imshow("Video", frame)
    # 按下 'q' 键退出
    if cv2.waitKey(1) &amp; 0xFF == ord('q'):
        break

# 释放视频捕获对象和关闭所有窗口
cap.release()
cv2.destroyAllWindows()
</code></pre>
<p>这里发现能够成功识别，且效果还行，但是发现控制台有一行警告信息，非常影响观感<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250425101627734-1725409053.png" alt="" loading="lazy"></p>
<p>根据提示，找到<code>models</code>目录下的<code>common.py</code>文件，搜索 <code>with amp.autocast(autocast):</code><br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250425102124501-946125541.png" alt="" loading="lazy"></p>
<p>将其替换为：</p>
<pre><code>with torch.amp.autocast("cuda",enabled=autocast):
</code></pre>
<p>这里有两处：分别在879行和906行<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250425102233411-510927772.png" alt="" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250425102250029-1212185890.png" alt="" loading="lazy"></p>
<p>再次运行测试代码，警告消失<br>
<img src="https://img2024.cnblogs.com/blog/2734270/202504/2734270-20250425102454023-1349774604.png" alt="" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.04404480005902778" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-25 11:16">2025-04-25 11:00</span>&nbsp;
<a href="https://www.cnblogs.com/1873cy">风陵南</a>&nbsp;
阅读(<span id="post_view_count">25</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18844467);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18844467', targetLink: 'https://www.cnblogs.com/1873cy/p/18844467', title: '从零开始：基于CUDA 12.6的YOLOv5模型训练实战（RTX 2050显卡全流程）' })">举报</a>
</div>
        