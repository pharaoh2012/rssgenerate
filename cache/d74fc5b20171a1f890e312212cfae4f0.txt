
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/dennyLee2025/p/18793702" title="发布于 2025-03-28 09:27">
    <span role="heading" aria-level="2">掌握设计模式--备忘录模式</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="备忘录模式memento-pattern">备忘录模式（Memento Pattern）</h2>
<p>备忘录模式（Memento Pattern）是一种行为型设计模式，用于在不暴露对象内部实现细节的情况下，捕获对象的内部状态，并在需要时恢复到先前的状态。该模式通常<strong>用于需要撤销和恢复</strong>操作的场景。</p>
<p><strong>核心思想</strong>：在不破坏对象封装的前提下，捕获并保存对象的内部状态，以便在需要时恢复到之前的状态。</p>
<h3 id="主要组成部分">主要组成部分</h3>
<ol>
<li><strong>Originator（发起人）</strong>：负责创建和保存备忘录对象。它可以恢复到之前的状态。</li>
<li><strong>Memento（备忘录）</strong>：存储发起人对象的内部状态，允许发起人恢复到此状态。它通常是一个简单的封装类，只保存状态信息。</li>
<li><strong>Caretaker（看护者）</strong>：负责管理备忘录对象的生命周期，保存备忘录，但不会修改备忘录的内容。看护者可以随时请求发起人对象创建备忘录，并在需要时提供备忘录。</li>
</ol>
<h2 id="案例实现">案例实现</h2>
<p>Git 是一个典型的版本控制工具，适用备忘录模式来实现简化的版本控制。备忘录模式通过保存每个文件或项目的状态快照，允许我们随时恢复到先前的版本。虽然 Git 的实现更加复杂，并且具有更多的功能（如分支管理、合并等），我们可以通过备忘录模式来实现一个简单的版本控制系统。</p>
<p>下面是一个使用备忘录模式模拟简单版本控制的实现：</p>
<h3 id="案例类图">案例类图</h3>
<p><img src="https://img2024.cnblogs.com/blog/1209017/202503/1209017-20250326142504993-660350346.png" alt="image" loading="lazy"></p>
<h3 id="commit提交">Commit（提交）</h3>
<p>提交类包含着所提交的所有信息，这里仅仅记录提交时的备注信息。</p>
<pre><code class="language-java">public class Commit {
    private final String content;

    public Commit(String content) {
        this.content = content;
    }

    public String getContent() {
        return content;
    }
}
</code></pre>
<h3 id="gitrepository版本库">GitRepository（版本库）</h3>
<pre><code class="language-java">public class GitRepository {
    private String content;

    public GitRepository(String content) {
        this.content = content;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    // 创建提交（备忘录）
    public Commit saveToCommit() {
        return new Commit(content);
    }

    // 从提交恢复
    public void restoreFromCommit(Commit commit) {
        this.content = commit.getContent();
    }
}
</code></pre>
<h3 id="versioncontrol版本控制">VersionControl（版本控制）</h3>
<p>为了简化代码，List的序列号为版本号</p>
<pre><code class="language-java">public class VersionControl {
    private List&lt;Commit&gt; commitHistory = new ArrayList&lt;&gt;();
    private GitRepository repository;

    public VersionControl(GitRepository repository) {
        this.repository = repository;
    }

    // 提交当前状态
    public void commit() {
        commitHistory.add(repository.saveToCommit());
        System.out.println("Committed: " + repository.getContent());
    }

    // 查看历史提交
    public void showHistory() {
        System.out.println("Commit History:");
        for (int i = 0; i &lt; commitHistory.size(); i++) {
            System.out.println("\tCommit " + (i + 1) + ": " + commitHistory.get(i).getContent());
        }
    }

    // 恢复到某个历史提交
    public void restore(int commitIndex) {
        if (commitIndex &gt;= 0 &amp;&amp; commitIndex &lt; commitHistory.size()) {
            repository.restoreFromCommit(commitHistory.get(commitIndex));
            System.out.println("Restored to: " + repository.getContent());
        } else {
            System.out.println("Invalid commit index!");
        }
    }
}
</code></pre>
<h3 id="测试代码">测试代码</h3>
<pre><code class="language-java">public class GitDemo {
    public static void main(String[] args) {
        // 创建一个GitRepository对象，模拟一个文件的内容
        GitRepository repository = new GitRepository("初始化仓库");

        // 创建版本控制系统
        VersionControl versionControl = new VersionControl(repository);

        // 提交当前状态
        versionControl.commit();

        // 修改文件内容并提交
        repository.setContent("新增功能");
        versionControl.commit();

        // 修改文件内容并提交
        repository.setContent("修复bugs");
        versionControl.commit();

        // 查看历史提交
        versionControl.showHistory();

        // 恢复到第二个提交
        versionControl.restore(1);

        // 修改并再次提交
        repository.setContent("功能调整");
        versionControl.commit();

        // 查看历史提交
        versionControl.showHistory();
    }
}
</code></pre>
<h3 id="执行结果">执行结果</h3>
<pre><code>Committed: 初始化仓库
Committed: 新增功能
Committed: 修复bugs
Commit History:
Commit 1: 初始化仓库
 Commit 2: 新增功能
 Commit 3: 修复bugs
Restored to: 新增功能
Committed: 功能调整
Commit History:
 Commit 1: 初始化仓库
 Commit 2: 新增功能
 Commit 3: 修复bugs
 Commit 4: 功能调整
</code></pre>
<h3 id="代码简析">代码简析</h3>
<p><strong>GitRepository</strong> 类模拟一个代码文件的内容，并具有修改内容和创建备忘录（提交）的方法</p>
<p><strong>Commit</strong> 类作为备忘录，保存文件的某个版本（即内容）</p>
<p><strong>VersionControl</strong> 类充当版本控制系统，负责管理所有提交（备忘录），可以查看提交历史、创建新提交以及恢复历史版本</p>
<h2 id="命令模式和备忘录模式对比">命令模式和备忘录模式对比</h2>
<p><strong>备忘录模式</strong>重点在于<strong>保存和恢复状态</strong>，用于保存对象的历史状态并在需要时恢复，不改变对象的外部接口。</p>
<p><strong>命令模式</strong>重点在于<strong>请求的封装和解耦</strong>，用于将请求的发送者和接收者解耦，使得请求者不必知道如何执行操作，增加了操作的灵活性。</p>
<h3 id="举例">举例</h3>
<p><strong>备忘录模式</strong>：<br>
假设你有一个文本编辑器，用户输入了一段文本。你可以使用备忘录模式保存文本的状态，当用户点击撤销按钮时，编辑器恢复到之前保存的文本状态。</p>
<p><strong>命令模式</strong>：<br>
假设你在一个远程控制器中，按下按钮后它发送一个命令来打开电视。电视接收命令并执行打开操作。通过命令模式，可以将按钮点击与电视操作解耦，且可以轻松实现撤销和重做功能，或将操作排队执行。</p>
<h2 id="总结">总结</h2>
<p>备忘录模式的核心关注点是<strong>保存对象的内部状态</strong>，并在需要时<strong>恢复到先前的状态</strong>，而不暴露对象的实现细节。这通常用于实现撤销、回退功能。</p>
<ul>
<li>
<p><strong>状态管理</strong>：备忘录模式允许对象在某一时刻保存状态，并且可以在以后恢复到这个状态。这对于需要撤销或恢复的应用场景非常有用，比如文本编辑器、游戏进度保存等。</p>
</li>
<li>
<p><strong>内部封装</strong>：备忘录对象封装了原对象的状态，但不允许外部直接修改这些状态，保护了原对象的内部数据。通常，备忘录对象是“只读”的，只有原对象可以恢复或修改其内容。</p>
</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/1209017/202503/1209017-20250326142526544-1131002244.gif" alt="image" loading="lazy"></p>
<p>需要查看往期设计模式文章的，可以在个人主页中或者文章开头的集合中查看，可关注我，持续更新中。。。</p>
<hr>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247486066&amp;idx=1&amp;sn=e8c7423105ddd0562f50892010941efc&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">超实用的SpringAOP实战之日志记录</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485873&amp;idx=1&amp;sn=08b58de61c716e5c57ff2fddb947f0d8&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">2023年下半年软考考试重磅消息</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485909&amp;idx=1&amp;sn=e20f3b7b413310ca78f90c13305972ab&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">通过软考后却领取不到实体证书？</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485802&amp;idx=1&amp;sn=863cf239124b98d39ec551b6cb67845c&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">计算机算法设计与分析（第5版）</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485015&amp;idx=1&amp;sn=862bc2b379726b89cdb396ec0d325cc0&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">Java全栈学习路线、学习资源和面试题一条龙</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485956&amp;idx=1&amp;sn=57407d9f7921254ba19ed70fa3bd6a2d&amp;chksm=ec62ca99db15438f13f2cf96d17a3e282028fa7960af56126caec68fb6eafd46d6e04a10ad0c&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">软考证书=职称证书？</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485837&amp;idx=1&amp;sn=b9b17dfd252882468b8eea31012df6fc&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">软考中级--软件设计师毫无保留的备考分享</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.06431770969328704" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-28 09:27">2025-03-28 09:27</span>&nbsp;
<a href="https://www.cnblogs.com/dennyLee2025">渊渟岳</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18793702" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18793702);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18793702', targetLink: 'https://www.cnblogs.com/dennyLee2025/p/18793702', title: '掌握设计模式--备忘录模式' })">举报</a>
</div>
        