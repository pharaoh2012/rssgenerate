
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/qife122/p/18953363" title="发布于 2025-06-28 10:37">
    <span role="heading" aria-level="2">RL Swarm：去中心化强化学习协作训练平台</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        RL Swarm 是一个开源、无需许可的P2P强化学习协作训练系统，支持在消费级笔记本电脑或云端GPU上运行，通过智能合约实现链上身份追踪。项目提供完整的训练框架、Web UI和智能合约集成，支持多阶段多智能体环境定制。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="项目概述">项目概述</h2>
<p>RL Swarm 是由Gensyn团队维护的去中心化强化学习协作训练平台。该系统允许用户加入"蜂群"与其他参与者共同训练模型，利用集体智能提升训练效率。核心特点包括：</p>
<ul>
<li>真正的P2P架构，无需中心化服务器</li>
<li>支持从消费级设备到专业GPU集群的异构硬件</li>
<li>通过Gensyn测试网实现链上身份追踪</li>
<li>基于GenRL-Swarm库的可组合框架</li>
</ul>
<p>当前测试网运行的是<a href="https://github.com/open-thought/reasoning-gym/tree/main" target="_blank" rel="noopener nofollow">reasoning-gym</a>蜂群，专注于训练模型解决多样化推理任务。</p>
<h2 id="功能特性">功能特性</h2>
<h3 id="核心能力">核心能力</h3>
<ul>
<li>🐝 去中心化协作训练：通过DHT网络实现节点间通信</li>
<li>🔗 区块链集成：智能合约记录训练进度和贡献</li>
<li>📊 动态资源分配：根据硬件性能自动分配模型大小</li>
<li>:puzzle_piece: 模块化设计：支持自定义多智能体多阶段环境</li>
<li>🌐 Web监控界面：实时查看训练指标和节点状态</li>
</ul>
<h3 id="支持模型">支持模型</h3>
<p>当前默认模型池包含：</p>
<ul>
<li>Gensyn/Qwen2.5-0.5B-Instruct</li>
<li>Qwen/Qwen3-0.6B</li>
<li>nvidia/AceInstruct-1.5B</li>
<li>dnotitia/Smoothie-Qwen3-1.7B</li>
<li>Gensyn/Qwen2.5-1.5B-Instruct</li>
</ul>
<h2 id="安装指南">安装指南</h2>
<h3 id="硬件要求">硬件要求</h3>
<p><strong>最低配置</strong>：</p>
<ul>
<li>arm64/x86 CPU (32GB RAM)</li>
<li>Python ≥ 3.8</li>
</ul>
<p><strong>推荐配置</strong>：</p>
<ul>
<li>NVIDIA GPU (RTX 3090/4090/5090, A100, H100)</li>
</ul>
<h3 id="安装步骤">安装步骤</h3>
<ol>
<li>克隆仓库：</li>
</ol>
<pre><code class="language-bash">git clone https://github.com/gensyn-ai/rl-swarm.git
cd rl-swarm
</code></pre>
<ol start="2">
<li>安装依赖：</li>
</ol>
<pre><code class="language-bash">pip install -r requirements.txt
</code></pre>
<ol start="3">
<li>配置环境变量：</li>
</ol>
<pre><code class="language-bash">export SWARM_CONTRACT="0xFaD7C5e93f28257429569B854151A1B8DCD404c2"
export CONNECT_TO_TESTNET=true
</code></pre>
<ol start="4">
<li>启动训练节点：</li>
</ol>
<pre><code class="language-bash">./start_swarm.sh
</code></pre>
<h2 id="使用说明">使用说明</h2>
<h3 id="基础使用">基础使用</h3>
<p>加入测试网蜂群：</p>
<pre><code class="language-python">from hivemind_exp import HivemindNode

node = HivemindNode(
    model_name="Gensyn/Qwen2.5-0.5B-Instruct",
    is_coordinator=False
)
node.connect_to_swarm()
</code></pre>
<h3 id="web界面">Web界面</h3>
<p>启动监控服务：</p>
<pre><code class="language-bash">docker-compose build --no-cache
docker-compose up
</code></pre>
<p>访问 <code>http://localhost:8080</code> 查看实时训练数据。</p>
<h2 id="核心代码">核心代码</h2>
<h3 id="dht通信模块">DHT通信模块</h3>
<pre><code class="language-python">class HivemindNode:
    """P2P节点核心类"""
    def __init__(self, model_name: str, key: str = ""):
        self.model_name = model_name
        self.key = key or str(uuid.uuid4())
        self.round_cache = defaultdict(dict)
        
    def get_stage_outputs(self, r, s):
        """获取指定阶段输出"""
        return self.round_cache.get((r, s))
    
    def put_stage_outputs(self, r, s, question, value):
        """存储阶段输出"""
        self.round_cache[(r, s)][question] = value
</code></pre>
<h3 id="智能合约交互">智能合约交互</h3>
<pre><code class="language-python">class SwarmCoordinator:
    """处理链上交互"""
    def __init__(self, web3: Web3, contract_address: str):
        self.web3 = web3
        self.contract = web3.eth.contract(
            address=contract_address,
            abi=json.load(open("contracts/SwarmCoordinator.json"))["abi"]
        )
    
    def register_peer(self, peer_id):
        """注册节点到合约"""
        self.contract.functions.registerPeer(peer_id).transact()
</code></pre>
<h3 id="消息处理">消息处理</h3>
<pre><code class="language-python">def stage3_message(node_key: str, question: str, outputs: dict):
    """生成第三阶段训练消息"""
    try:
        decision = outputs["final_agent_decision"][node_key]
        feedback = _extract_tagged(decision, "summarize_feedback")
        majority = _extract_tagged(decision, "majority")
        return f"{feedback}...Majority: {majority}"
    except Exception:
        return outputs["answer"]
</code></pre>
<h2 id="贡献指南">贡献指南</h2>
<p>我们欢迎社区贡献！请遵循以下规范：</p>
<ol>
<li>使用英文提交PR</li>
<li>每个分支只包含一个功能修改</li>
<li>编写清晰的提交信息</li>
<li>关联相关issue</li>
</ol>
<p>问题报告请包含：</p>
<ul>
<li>重现步骤</li>
<li>预期与实际行为</li>
<li>环境信息</li>
<li>日志文件（非截图）<br>
更多精彩内容 请关注我的个人公众号 公众号（办公AI智能小助手）<br>
公众号二维码<br>
<img alt="" title="办公AI智能小助手" loading="lazy" data-src="https://i.imgs.ovh/2025/06/21/AejG6.png" class="lazyload"></li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-28 10:38">2025-06-28 10:37</span>&nbsp;
<a href="https://www.cnblogs.com/qife122">qife</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18953363);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18953363', targetLink: 'https://www.cnblogs.com/qife122/p/18953363', title: 'RL Swarm：去中心化强化学习协作训练平台' })">举报</a>
</div>
        