
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/charlee44/p/19065130" title="发布于 2025-08-29 20:30">
    <span role="heading" aria-level="2">CMake构建学习笔记22-libxml2库的构建</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        使用封装的CMake通用构建脚本cmake-build.ps1成功构建libxml2库，并通过PowerShell脚本自动化完成解压、配置（启用zlib、iconv等依赖）、构建及安装流程。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在上一篇文章<a href="https://charlee44.com/post.html?id=b968d5152f914d6689c3aebb5facce39" target="_blank" rel="noopener nofollow">《CMake构建学习笔记21-通用的CMake构建脚本》</a>中，笔者封装了一个通用的cmake构建脚本cmake-build.ps1，那么这里笔者就尝试通过这个脚本来构建libxml2库。</p>
<p>libxml2是GNOME项目下的XML库，虽然比不上TinyXML-2轻量，但是胜在功能全面。这里就直接列出构建libxml2的脚本：</p>
<pre><code class="language-powershell">param(    
    [string]$Name = "libxml2-v2.14.4",
    [string]$SourceDir = "../Source",
    [string]$Generator,
    [string]$InstallDir,  
    [string]$SymbolDir 
)

# 根据 $Name 动态构建路径
$zipFilePath = Join-Path -Path $SourceDir -ChildPath "$Name.zip"
$SourcePath = Join-Path -Path $SourceDir -ChildPath $Name
$BuildDir = Join-Path -Path "." -ChildPath $Name

# 解压ZIP文件到指定目录
if (!(Test-Path $SourcePath)) {
    Expand-Archive -LiteralPath $zipFilePath -DestinationPath $SourceDir -Force
}

# 检查目标文件是否存在，以判断是否安装
$DstFilePath = "$InstallDir/bin/libxml2.dll"
if (Test-Path $DstFilePath) {
    Write-Output "The current library has been installed."
    exit 1
} 

# 复制符号库
$PdbFiles = @(
    "$BuildDir/RelWithDebInfo/libxml2.pdb"
) 

# 额外构建参数
$CMakeCacheVariables = @{
    BUILD_SHARED_LIBS = "ON"
    LIBXML2_WITH_ZLIB = "ON"
    LIBXML2_WITH_ICONV = "ON"
    LIBXML2_WITH_HTTP = "ON"
}

# 调用通用构建脚本
. ./cmake-build.ps1 -SourceLocalPath $SourcePath `
    -BuildDir $BuildDir `
    -Generator $Generator `
    -InstallDir $InstallDir `
    -SymbolDir $SymbolDir `
    -PdbFiles $PdbFiles `
    -CMakeCacheVariables $CMakeCacheVariables `
    -MultiConfig $true 
</code></pre>
<p>这段脚本实现了解压源代码文件，判断是否已安装、复制符号库、额外构建参数。最后再执行cmake-build.ps1脚本。有的步骤如何不需要可以省略，不过额外构建参数还是需要关心一下，比如LIBXML2_WITH_ZLIB表示使用依赖库zlib参与构建（参看<a href="https://charlee44.com/post.html?id=22be62bbb76047da9a3489eb470bab8c" target="_blank" rel="noopener nofollow">《CMake构建学习笔记2-zlib库的构建》</a>）；LIBXML2_WITH_ICONV，表示使用依赖库iconv参与构建（参看<a href="https://charlee44.com/post.html?id=79759dac638b4f4c9eaa0642f97af3d7" target="_blank" rel="noopener nofollow">《CMake构建学习笔记20-iconv库的构建》</a>）。</p>
<p>在PowerShell中使用如下指令进行构建：</p>
<pre><code class="language-powershell">./libxml2.ps1 -Generator "Visual Studio 16 2019" `
-InstallDir "$env:eGova3rdParty" `
-SymbolDir "$env:eGova3rdParty/symbols" `
</code></pre>
<p><a href="https://github.com/fafa1899/BuildCppDependency" target="_blank" rel="noopener nofollow">构建代码项目</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-29 20:31">2025-08-29 20:30</span>&nbsp;
<a href="https://www.cnblogs.com/charlee44">charlee44</a>&nbsp;
阅读(<span id="post_view_count">37</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19065130);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19065130', targetLink: 'https://www.cnblogs.com/charlee44/p/19065130', title: 'CMake构建学习笔记22-libxml2库的构建' })">举报</a>
</div>
        