
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Microants/p/19014738" title="发布于 2025-08-07 09:10">
    <span role="heading" aria-level="2">第六章 依赖注入和服务配置</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>6.1 依赖注入基础</p>
<h4 id="什么是依赖注入" class="atx">什么是依赖注入</h4>
<p>依赖注入（Dependency Injection，简称DI）是一种设计模式，它允许对象及其依赖项之间的松散耦合。在依赖注入模式中，对象不直接创建其依赖项，而是从外部接收已创建的依赖项实例。</p>
<p>依赖注入的核心原则：</p>
<ul>
<li><strong>依赖反转原则</strong>：高层模块不应依赖低层模块，两者都应依赖抽象</li>
<li><strong>控制反转</strong>：控制流的反转，对象的创建和生命周期由外部容器管理</li>
<li><strong>显式依赖</strong>：类应明确声明其所有依赖项</li>
</ul>
<h3 id="62-服务生命周期" class="atx">6.2 服务生命周期</h3>
<p>ASP.NET Core DI容器支持三种主要的服务生命周期：</p>
<h4 id="transient（瞬态）" class="atx">Transient（瞬态）</h4>
<ul>
<li><strong>定义</strong>：每次请求服务时创建新实例</li>
<li><strong>注册方式</strong>：<code>services.AddTransient&lt;IService, Service&gt;()</code></li>
<li><strong>适用场景</strong>：轻量级、无状态服务</li>
</ul>
<h4 id="scoped（作用域）" class="atx">Scoped（作用域）</h4>
<ul>
<li><strong>定义</strong>：每个请求（HTTP请求）内共享同一实例</li>
<li><strong>注册方式</strong>：<code>services.AddScoped&lt;IService, Service&gt;()</code></li>
<li><strong>适用场景</strong>：需要保持请求内状态的服务，如数据库上下文</li>
</ul>
<h4 id="singleton（单例）" class="atx">Singleton（单例）</h4>
<ul>
<li><strong>定义</strong>：应用程序生命周期内只创建一个实例</li>
<li><strong>注册方式</strong>：<code>services.AddSingleton&lt;IService, Service&gt;()</code></li>
<li><strong>适用场景</strong>：无状态服务、共享缓存、配置服务</li>
</ul>
<h3 id="63-选项模式-options-pattern" class="atx">6.3 选项模式 (Options Pattern)</h3>
<h4 id="基本用法" class="atx">基本用法</h4>
<p>使用选项模式的基本步骤：</p>
<ol>
<li>创建选项类：</li>
</ol>
<pre class="highlighter-hljs"><code>public class SmtpSettings
{
    public const string SectionName = "Smtp";

    public string Server { get; set; } = string.Empty;
    public int Port { get; set; } = 25;
    public string Username { get; set; } = string.Empty;
    public string Password { get; set; } = string.Empty;
    public bool EnableSsl { get; set; } = true;
    public string FromEmail { get; set; } = string.Empty;
    public string FromName { get; set; } = string.Empty;
}</code></pre>
<ol start="2">
<li>配置选项：</li>
</ol>
<pre class="highlighter-hljs"><code>// 在Program.cs中
builder.Services.Configure&lt;SmtpSettings&gt;(
    builder.Configuration.GetSection(SmtpSettings.SectionName));</code></pre>
<ol start="3">
<li>在appsettings.json中添加配置：</li>
</ol>
<pre class="highlighter-hljs"><code>{
  "Smtp": {
    "Server": "smtp.example.com",
    "Port": 587,
    "Username": "user@example.com",
    "Password": "SecurePassword123",
    "EnableSsl": true,
    "FromEmail": "no-reply@example.com",
    "FromName": "My Application"
  }
}</code></pre>
<ol start="4">
<li>使用选项：</li>
</ol>
<pre class="highlighter-hljs"><code>public class EmailService : IEmailService
{
    private readonly SmtpSettings _smtpSettings;

    public EmailService(IOptions&lt;SmtpSettings&gt; smtpOptions)
    {
        _smtpSettings = smtpOptions.Value;
    }

    // 使用配置进行邮件发送
}</code></pre>
<hr>
<p><img src="https://img2024.cnblogs.com/blog/1687216/202507/1687216-20250731110034029-1084051654.png" alt="wechat_2025-07-31_105805_938"></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-07 09:10">2025-08-07 09:10</span>&nbsp;
<a href="https://www.cnblogs.com/Microants">高宏顺</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19014738);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19014738', targetLink: 'https://www.cnblogs.com/Microants/p/19014738', title: '第六章 依赖注入和服务配置' })">举报</a>
</div>
        