
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/yupi/p/18949623" title="发布于 2025-06-26 11:37">
    <span role="heading" aria-level="2">Spring AI Alibaba 1.0 正式发布！核心特性速览+老项目升级指南</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/2225420/202506/2225420-20250626112001132-1400763439.png" alt="Spring AI Alibaba 1.0 正式发布！核心特性速览+老项目升级指南" class="desc_img">
        不得不感叹技术的更新真的是太太太太快了，但也正是这种快速迭代让我们能够享受到越来越强大的 AI 开发能力。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p class="md-end-block md-heading"><span class="md-plain">随着 Spring AI 首个正式版本 1.0 的发布，国产之光 Spring AI Alibaba 也发布了 1.0 GA 正式版本，更新速度真的很快！</span></p>
<p class="md-end-block md-p"><span class="md-plain">我对框架的更新真的是又爱又恨，爱的是功能更丰富更好用，恨的是又要学习新东西了、老项目又要更新了。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250625203136947.png"><img data-src="https://pic.yupi.icu/1/image-20250625203136947.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">不过下面通过我的分享，相信能帮大家节约很多时间，快速了解：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">什么是 Spring AI Alibaba？</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">新版本有哪些大更新？</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">如何将项目升级到新版本？</span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-plain">该踩的坑都帮大家踩完了，坚持看完这期内容，你一定会有所收获。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">什么是 Spring AI Alibaba？</span></h2>
<p class="md-end-block md-p"><span class="md-plain">Spring AI 是知名 Java 开发框架 Spring 官方维护的 AI 开发框架，能够让你用更少的代码、更快开发各种 AI 应用。而 Spring AI Alibaba 在 Spring AI 的基础上进行扩展，深度集成阿里自家的大模型平台和各种技术组件，并且额外支持工作流、多智能体应用的快速开发。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1750841692806-15032fcf-f2b0-4936-90db-ac2f86697660.png"><img data-src="https://pic.yupi.icu/1/1750841692806-15032fcf-f2b0-4936-90db-ac2f86697660.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">因为它是兼容 Spring AI 的，而且功能更丰富、更新更及时、文档更清晰，更适合国人体质，所以我会更建议大家选择它来开发 AI 应用。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1750840948965-5b7e4365-4eae-40f8-9245-55ab9418a584.png"><img data-src="https://pic.yupi.icu/1/1750840948965-5b7e4365-4eae-40f8-9245-55ab9418a584.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">官方也是很贴心，基于 Spring AI Alibaba 提供了一个现成的 <span class="md-meta-i-c  md-link"><a href="https://github.com/springaialibaba/spring-ai-alibaba-examples/tree/main/spring-ai-alibaba-playground" rel="noopener nofollow"><span class="md-plain">智能体调试广场</span></a><span class="md-plain">，而且代码开源，这不就是一个现成的、可以学习 AI 开发的项目么？</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1750841376205-ea22023f-9fd5-43cc-ae0e-756d796893da.png"><img data-src="https://pic.yupi.icu/1/1750841376205-ea22023f-9fd5-43cc-ae0e-756d796893da.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">直接复制官方提供的 Docker 命令就可以把项目跑起来了：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1750828705130-967848f1-64b9-4855-aa9c-3b3cf2a68a62.png"><img data-src="https://pic.yupi.icu/1/1750828705130-967848f1-64b9-4855-aa9c-3b3cf2a68a62.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">然后就可以在本地体验聊天机器人、多轮对话、图片生成、工具调用、RAG 知识库、MCP 集成等框架的核心能力。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1750828762064-ad730484-683b-42ba-9ef1-2fbbd9d20f68.png"><img data-src="https://pic.yupi.icu/1/1750828762064-ad730484-683b-42ba-9ef1-2fbbd9d20f68.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1750828905146-c40047df-8ba9-455f-a8a0-581010a9d28d.png"><img data-src="https://pic.yupi.icu/1/1750828905146-c40047df-8ba9-455f-a8a0-581010a9d28d.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">新版本有哪些更新？</span></h2>
<p class="md-end-block md-p"><span class="md-plain">结合官方文档和我自己的理解，我觉得 Spring AI Alibaba 1.0 的更新可以用两个字来概括 —— <span class="md-pair-s "><strong>突破</strong><span class="md-plain">。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">为什么这么说？我们先来看看这次值得关注的几点更新：</span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">1、Graph 多智能体框架</span></h3>
<p class="md-end-block md-p"><span class="md-plain">这是本次更新的重头戏。基于 <span class="md-meta-i-c  md-link"><a href="https://java2ai.com/docs/1.0.0.2/tutorials/graph/whats-spring-ai-alibaba-graph" rel="noopener nofollow"><span class="md-plain">Spring AI Alibaba Graph</span></a><span class="md-plain">，开发者可以快速构建复杂的工作流和多智能体应用，完全无需关心底层的流程编排、上下文记忆管理等复杂实现细节。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">举个小例子，比如我们现在想做一个 “自媒体自动发文工具”，可以利用一些可视化 AI 智能体开发平台快速创建工作流：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250625194807767.png"><img data-src="https://pic.yupi.icu/1/image-20250625194807767.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">有时别人的平台可能无法满足我们定制化的开发需求，这时就可以使用 Graph 多智能体框架，利用预置的节点快速定义出一套工作流。上图对应的工作流代码如下：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 创建工作流<br><span><span class="cm-variable">StateGraph&nbsp;<span class="cm-variable">stateGraph&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">StateGraph(<span class="cm-string">"内容生成工作流",&nbsp;<span class="cm-variable">stateFactory)<br><span>&nbsp; &nbsp;<span class="cm-comment">// 添加工作流节点<br><span>&nbsp; .<span class="cm-variable">addNode(<span class="cm-string">"start",&nbsp;<span class="cm-variable">node_async(<span class="cm-keyword">new&nbsp;<span class="cm-variable">StartNode())) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 初始化工作流<br><span>&nbsp; .<span class="cm-variable">addNode(<span class="cm-string">"topic_generation",&nbsp;<span class="cm-variable">node_async(<span class="cm-keyword">new&nbsp;<span class="cm-variable">TopicGenerationNode()))&nbsp;<span class="cm-comment">// 根据输入生成文案<br><span>&nbsp; .<span class="cm-variable">addNode(<span class="cm-string">"content_collection",&nbsp;<span class="cm-variable">node_async(<span class="cm-keyword">new&nbsp;<span class="cm-variable">ContentCollectionNode()))&nbsp;<span class="cm-comment">// 从网络收集相关素材<br><span>&nbsp; .<span class="cm-variable">addNode(<span class="cm-string">"content_integration",&nbsp;<span class="cm-variable">node_async(<span class="cm-keyword">new&nbsp;<span class="cm-variable">ContentIntegrationNode()))&nbsp;<span class="cm-comment">// 组合文案和素材<br><span>&nbsp; .<span class="cm-variable">addNode(<span class="cm-string">"api_publish",&nbsp;<span class="cm-variable">node_async(<span class="cm-keyword">new&nbsp;<span class="cm-variable">ApiPublishNode())) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="cm-comment">// 调用接口发布文章<br><span>&nbsp; .<span class="cm-variable">addNode(<span class="cm-string">"result_output",&nbsp;<span class="cm-variable">node_async(<span class="cm-keyword">new&nbsp;<span class="cm-variable">ResultOutputNode())) &nbsp; &nbsp; &nbsp;&nbsp;<span class="cm-comment">// 输出最终结果<br><span>&nbsp; &nbsp;<span class="cm-comment">// 定义节点间的执行顺序<br><span>&nbsp; .<span class="cm-variable">addEdge(<span class="cm-variable">START,&nbsp;<span class="cm-string">"start") &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 工作流启动 → 开始节点<br><span>&nbsp; .<span class="cm-variable">addEdge(<span class="cm-string">"start",&nbsp;<span class="cm-string">"topic_generation") &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="cm-comment">// 开始节点 → 主题生成<br><span>&nbsp; .<span class="cm-variable">addEdge(<span class="cm-string">"topic_generation",&nbsp;<span class="cm-string">"content_collection") &nbsp;<span class="cm-comment">// 主题生成 → 素材收集<br><span>&nbsp; .<span class="cm-variable">addEdge(<span class="cm-string">"content_collection",&nbsp;<span class="cm-string">"content_integration")&nbsp;<span class="cm-comment">// 素材收集 → 内容整合<br><span>&nbsp; .<span class="cm-variable">addEdge(<span class="cm-string">"content_integration",&nbsp;<span class="cm-string">"api_publish") &nbsp;&nbsp;<span class="cm-comment">// 内容整合 → API 发布<br><span>&nbsp; .<span class="cm-variable">addEdge(<span class="cm-string">"api_publish",&nbsp;<span class="cm-string">"result_output") &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// API 发布 → 结果输出<br><span>&nbsp; .<span class="cm-variable">addEdge(<span class="cm-string">"result_output",&nbsp;<span class="cm-variable">END); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="cm-comment">// 结果输出 → 工作流结束</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">虽然给出的例子并不复杂，但智能体工作流的水还是很深的，涉及到智能体协作、任务分解、路由策略、状态管理等等。后面我会在 <span class="md-meta-i-c  md-link"><a href="https://codefather.cn/" rel="noopener nofollow"><span class="md-plain">编程导航</span></a><span class="md-plain"> 的项目和个人账号中分享更多这方面的实战和技术解析。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250625200031961.png"><img data-src="https://pic.yupi.icu/1/image-20250625200031961.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">2、生态集成</span></h3>
<p class="md-end-block md-p"><span class="md-plain">Spring AI Alibaba 1.0 继续放大自身的优势，将传统后端开发与新兴的 AI 开发进行了融合，通过集成更多技术组件和云服务，帮助传统业务更快地接入 AI、加速 AI 应用的落地。</span></p>
<p class="md-end-block md-p"><span class="md-plain">举几个典型的集成案例：</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">1）集成 Nacos 管理 MCP</span></h4>
<p class="md-end-block md-p"><span class="md-plain">Nacos 是主流的服务注册中心，是微服务架构的实现关键，用于帮助某个服务发现其他服务，从而进行调用。如果 AI 项目需要使用很多 MCP 服务，我们就可以把各种 MCP 服务的信息注册到 Nacos 上；AI 项目需要使用 MCP 时，就可以到 Nacos 上获取到 MCP 服务的信息了。这样就实现了对 MCP 服务的集中管理和动态更新，更加规范化。</span></p>
<p class="md-end-block md-p"><span class="md-plain">官方文档：<span class="md-link md-pair-s"><a href="https://java2ai.com/docs/1.0.0.2/tutorials/basics/spring-ai-alibaba-mcp-nacos-introduce" rel="noopener nofollow">https://java2ai.com/docs/1.0.0.2/tutorials/basics/spring-ai-alibaba-mcp-nacos-introduce</a></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250625175617943.png"><img data-src="https://pic.yupi.icu/1/image-20250625175617943.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">2）集成 Nacos 管理 Prompt</span></h4>
<p class="md-end-block md-p"><span class="md-plain">传统的 AI 应用开发中，Prompt 往往是硬编码在代码里的，这就带来了一个问题：每次想要调整 Prompt，都需要重新发布代码，非常不灵活。而 Spring AI Alibaba 通过集成 Nacos，解决了这个痛点。</span></p>
<p class="md-end-block md-p"><span class="md-plain">开发者可以将 Prompt 模板存储在 Nacos 配置中心，AI 应用启动时会自动从 Nacos 拉取最新的 Prompt 配置。而且当我们在 Nacos 中修改 Prompt 后，应用可以实时感知到变化并自动更新，无需重启服务，让 Prompt 的迭代优化变得更灵活。</span></p>
<p class="md-end-block md-p"><span class="md-plain">参考文档：<span class="md-link md-pair-s"><a href="https://java2ai.com/docs/1.0.0.2/practices/dynamic-prompt/dynamic-prompt" rel="noopener nofollow">https://java2ai.com/docs/1.0.0.2/practices/dynamic-prompt/dynamic-prompt</a></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250625185045305.png"><img data-src="https://pic.yupi.icu/1/image-20250625185045305.png" class="lazyload"></span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">3）集成 AI 模型和云知识库</span></h4>
<p class="md-end-block md-p"><span class="md-plain">虽然这是之前就有的能力，但我觉得还是值得介绍一下。与阿里云百炼平台无缝对接，一键接入通义千问等阿里系大模型；还能直接对接云知识库平台，企业只需要利用可视化界面上传切分文档、制作知识库，然后几行代码就能让 AI 利用知识库回答问题。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250625185412204.png"><img data-src="https://pic.yupi.icu/1/image-20250625185412204.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">4）可观测性支持</span></h4>
<p class="md-end-block md-p"><span class="md-plain">Spring AI 本身提供了 <span class="md-meta-i-c  md-link"><a href="https://java2ai.com/docs/1.0.0.2/practices/observability/observability" rel="noopener nofollow"><span class="md-plain">可观测性</span></a><span class="md-plain"> 能力，可以在项目运行时获取到 AI 的调用情况，比如调用次数、响应时间、Token 消耗等关键指标。这些指标数据可以轻松接入阿里云的应用实时监控服务 ARMS、Zipkin 等监控工具，开发者可以实时监控 AI 模型，快速定位和解决性能瓶颈。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250625190600517.png"><img data-src="https://pic.yupi.icu/1/image-20250625190600517.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">3、前沿案例</span></h3>
<p class="md-end-block md-p"><span class="md-plain">最近 Spring AI Alibaba 连续发布了几个新项目，包括：</span></p>
<p class="md-end-block md-p"><span class="md-plain">1）<span class="md-meta-i-c  md-link"><a href="https://github.com/alibaba/spring-ai-alibaba/tree/main/spring-ai-alibaba-jmanus/" rel="noopener nofollow"><span class="md-plain">JManus 通用智能体平台</span></a><span class="md-plain">：可以说是 Java 版本的 OpenManus 通用智能体平台，用户可以通过自然语言描述需求，让 AI 自动规划并执行规划，直到完成任务。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/453803635-893c7fc1-5e6e-4ec9-8389-182f14d86b18.png"><img alt="官方示例" data-src="https://pic.yupi.icu/1/453803635-893c7fc1-5e6e-4ec9-8389-182f14d86b18.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">2）<span class="md-meta-i-c  md-link"><a href="https://java2ai.com/blog/spring-ai-alibaba-nl2sql" rel="noopener nofollow"><span class="md-plain">NL2SQL 智能体框架</span></a><span class="md-plain">：专为 Java 开发者设计的自然语言转 SQL 工具，用户只需用中文描述查询数据库的需求，AI 就能自动生成对应的 SQL 语句，让数据分析变得更简单。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/demo-20250625204217339.png"><img data-src="https://pic.yupi.icu/1/demo-20250625204217339.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">3）<span class="md-meta-i-c  md-link"><a href="https://github.com/alibaba/spring-ai-alibaba/tree/main/spring-ai-alibaba-deepresearch" rel="noopener nofollow"><span class="md-plain">DeepResearch 深度调研智能体</span></a><span class="md-plain">：基于多智能体架构的调研工具，整合了网络搜索、网页爬取、数据分析等功能，可以自动完成复杂调研报告的撰写工作。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/202506052122988.png"><img alt="官方提供的 DeepResearch 工作流" data-src="https://pic.yupi.icu/1/202506052122988.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">虽然这些并不是框架本身的功能更新，但是很好地展示了 Spring AI Alibaba 在不同场景的应用效果。如果你要开发类似的项目，可以直接参考官方提供的这些案例。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">4、细节优化</span></h3>
<p class="md-end-block md-p"><span class="md-plain">此外，Spring AI Alibaba 1.0 还优化了一些功能和细节，比如我发现 <span class="md-meta-i-c  md-link"><a href="https://java2ai.com/docs/1.0.0.2/get-started/chatbot/#%E5%A2%9E%E5%8A%A0%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BF%86%E8%83%BD%E5%8A%9B" rel="noopener nofollow"><span class="md-plain">会话记忆能力</span></a><span class="md-plain"> 支持了 jdbc、redis、elasticsearch 等多种存储插件，让 AI 对话能够持久化保存。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250625193211770.png"><img data-src="https://pic.yupi.icu/1/image-20250625193211770.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">更多的内容大家可以自己阅读官方文档探索。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<div class="md-hr md-end-block"><hr></div>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">前面提到我认为这次框架的更新是一种突破，因为它完成了 <span class="md-pair-s "><strong>能对话</strong><span class="md-plain"> 的 AI 助手到 <span class="md-pair-s "><strong>能做事</strong><span class="md-plain"> 的 AI 智能体的进化。</span></span></span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">在以前，我们使用 Spring AI 只能开发一些简单的对话型 AI 应用，功能相对单一。而现在，借助 Spring AI Alibaba 1.0 的 Graph 能力和生态集成，我们可以更快速地开发出复杂的智能体应用。</span></p>
<p class="md-end-block md-p"><span class="md-plain">当然，Spring AI Alibaba 并不是唯一的 AI 应用开发框架，像 LangChain4j、LangGraph，以及 Spring 之父最新推出的 <span class="md-meta-i-c  md-link"><a href="https://github.com/embabel/embabel-agent" rel="noopener nofollow"><span class="md-plain">embabel-agent</span></a><span class="md-plain"> 都是不错的选择。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">在框架选择上，我比较看重的因素是 <span class="md-pair-s "><strong>生态</strong><span class="md-plain">。可以思考一下，你的项目是否需要和其他服务进行深度集成？</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">就拿我们团队来说，目前也在用 Spring AI Alibaba 框架，主要是因为我们使用了不少阿里开源的技术中间件和云服务，使用 Spring AI Alibaba 的开发成本更低。毕竟有技术大厂背书，我还是很看好它的发展，但有一说一，现在文档更新的速度有点跟不上框架更新的速度了，智能体框架的学习成本还是有点高的。</span></p>
<p class="md-end-block md-p"><span class="md-plain">官方也提供了 <span class="md-meta-i-c  md-link"><a href="https://java2ai.com/docs/1.0.0.2/faq/#%E6%9C%89%E6%B2%A1%E6%9C%89%E4%B8%BB%E6%B5%81-java-ai-%E6%A1%86%E6%9E%B6%E7%9A%84%E9%80%89%E5%9E%8B%E5%AF%B9%E6%AF%94" rel="noopener nofollow"><span class="md-plain">主流 Java AI 框架的选型对比</span></a><span class="md-plain">，供大家参考：</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1750827719823-b4d87270-a3d0-4f6d-a69b-fc19bef99045.png"><img data-src="https://pic.yupi.icu/1/1750827719823-b4d87270-a3d0-4f6d-a69b-fc19bef99045.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">如何升级框架版本？</span></h2>
<p class="md-end-block md-p"><span class="md-plain">接下来进入实战环节，我会用自己之前开源的 <span class="md-meta-i-c  md-link"><a href="https://github.com/liyupi/yu-ai-agent" rel="noopener nofollow"><span class="md-plain">AI 超级智能体项目</span></a><span class="md-plain"> 来详细演示如何将老版本的 Spring AI Alibaba 项目升级到 1.0 版本。大家一定要认真看，因为有些变动连官方文档都没有明确指出，是我在升级过程中踩坑摸索出来的宝贵经验。</span></span></span></p>
<blockquote>
<p class="md-end-block md-p"><span class="md-plain">项目指路：<span class="md-link md-pair-s"><a href="https://github.com/liyupi/yu-ai-agent" rel="noopener nofollow">https://github.com/liyupi/yu-ai-agent</a></span></span></p>
</blockquote>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250625200732021.png"><img data-src="https://pic.yupi.icu/1/image-20250625200732021.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-pair-s "><strong>友情提醒</strong><span class="md-plain">：这个项目涉及到向量数据库、MCP 服务、API Key 等外部依赖，直接下载项目是跑不起来的，这是正常现象。必须要按照项目说明补充相应的配置，所有需要配置的地方我都已经详细标注出来了。</span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250625201346950.png"><img data-src="https://pic.yupi.icu/1/image-20250625201346950.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">建议大家先新建一个本地配置文件，然后让我们开始将 Spring AI Alibaba 从 <span class="md-pair-s "><strong>1.0.0-M6.1</strong><span class="md-plain"> 版本升级到 <span class="md-pair-s "><strong>1.0.0.2</strong><span class="md-plain"> 版本。</span></span></span></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">第一步：依赖更新</span></h3>
<p class="md-end-block md-p"><span class="md-plain">我们的项目分为主项目和 MCP 服务子项目两部分，需要分别进行更新。</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">主项目依赖更新</span></h4>
<p class="md-end-block md-p"><span class="md-plain">1）更新 Spring AI Alibaba 基础依赖，从官方文档复制依赖管理配置并引入依赖：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependencyManagement<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependencies<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;com.alibaba.cloud.ai<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;spring-ai-alibaba-bom<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;1.0.0.2<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">type<span class="cm-tag cm-bracket">&gt;pom<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">type<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">scope<span class="cm-tag cm-bracket">&gt;import<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">scope<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp;<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependencies<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependencyManagement<span class="cm-tag cm-bracket">&gt;<br><span><span>​<br><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependencies<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;com.alibaba.cloud.ai<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;spring-ai-alibaba-starter-dashscope<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp;<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependencies<span class="cm-tag cm-bracket">&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">2）更新 Spring AI 相关依赖</span></p>
<p class="md-end-block md-p"><span class="md-plain">参考 <span class="md-meta-i-c  md-link"><a href="https://docs.spring.io/spring-ai/reference/getting-started.html" rel="noopener nofollow"><span class="md-plain">官方文档</span></a><span class="md-plain"> 进行升级，首先引入仓库配置，确保能够正确拉取到 Spring AI 相关的依赖：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">repositories<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">repository<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">id<span class="cm-tag cm-bracket">&gt;spring-snapshots<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">id<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">name<span class="cm-tag cm-bracket">&gt;Spring Snapshots<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">name<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">url<span class="cm-tag cm-bracket">&gt;https://repo.spring.io/snapshot<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">url<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">releases<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">enabled<span class="cm-tag cm-bracket">&gt;false<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">enabled<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">releases<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp;<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">repository<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">repository<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">name<span class="cm-tag cm-bracket">&gt;Central Portal Snapshots<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">name<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">id<span class="cm-tag cm-bracket">&gt;central-portal-snapshots<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">id<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">url<span class="cm-tag cm-bracket">&gt;https://central.sonatype.com/repository/maven-snapshots/<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">url<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">releases<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">enabled<span class="cm-tag cm-bracket">&gt;false<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">enabled<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">releases<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">snapshots<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">enabled<span class="cm-tag cm-bracket">&gt;true<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">enabled<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">snapshots<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp;<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">repository<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">repositories<span class="cm-tag cm-bracket">&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">在这个过程中，你可以通过 <span class="md-meta-i-c  md-link"><a href="https://central.sonatype.com/artifact/org.springframework.ai/spring-ai-bom" rel="noopener nofollow"><span class="md-plain">Maven 仓库</span></a><span class="md-plain"> 来查看最新版本信息：</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1750832778369-432b6206-36ee-4fa1-b7a8-0e09a8c5d52e.png"><img data-src="https://pic.yupi.icu/1/1750832778369-432b6206-36ee-4fa1-b7a8-0e09a8c5d52e.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">然后添加依赖管理配置，注意版本号不用添加 SNAPSHOT 后缀，就 <span class="md-pair-s"><code>1.0.0</code><span class="md-plain"> 版本：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependencyManagement<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependencies<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;org.springframework.ai<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;spring-ai-bom<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;1.0.0<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">type<span class="cm-tag cm-bracket">&gt;pom<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">type<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">scope<span class="cm-tag cm-bracket">&gt;import<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">scope<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependencies<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependencyManagement<span class="cm-tag cm-bracket">&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">具体要修改的依赖项如下，修改前的依赖配置：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">&lt;!-- 本地部署大模型 --&gt;<br><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;org.springframework.ai<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;spring-ai-ollama-spring-boot-starter<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;1.0.0-M6<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span><span>​<br><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;org.springframework.ai<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;spring-ai-markdown-document-reader<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;1.0.0-M6<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span><span>​<br><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;org.springframework.ai<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;spring-ai-pgvector-store<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;1.0.0-M6<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span><span>​<br><span><span class="cm-comment">&lt;!-- Spring AI MCP Client --&gt;<br><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;org.springframework.ai<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;spring-ai-mcp-client-spring-boot-starter<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;1.0.0-M6<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">修改后的依赖配置，鱼皮是依次参考官方文档进行确认和更新的：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">Ollama：<span class="md-link md-pair-s"><a href="https://docs.spring.io/spring-ai/reference/api/chat/ollama-chat.html" rel="noopener nofollow">https://docs.spring.io/spring-ai/reference/api/chat/ollama-chat.html</a></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">Markdown Document Reader：<span class="md-link md-pair-s"><a href="https://docs.spring.io/spring-ai/reference/api/etl-pipeline.html#_markdown" rel="noopener nofollow">https://docs.spring.io/spring-ai/reference/api/etl-pipeline.html#_markdown</a></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">PGvector：<span class="md-link md-pair-s"><a href="https://docs.spring.io/spring-ai/reference/api/vectordbs/pgvector.html#_manual_configuration" rel="noopener nofollow">https://docs.spring.io/spring-ai/reference/api/vectordbs/pgvector.html#_manual_configuration</a></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">MCP：<span class="md-link md-pair-s"><a href="https://docs.spring.io/spring-ai/reference/api/mcp/mcp-client-boot-starter-docs.html" rel="noopener nofollow">https://docs.spring.io/spring-ai/reference/api/mcp/mcp-client-boot-starter-docs.html</a></span></span></p>
</li>
</ul>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;org.springframework.ai<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;spring-ai-starter-model-ollama<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span><span>​<br><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;org.springframework.ai<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;spring-ai-markdown-document-reader<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span><span>​<br><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;org.springframework.ai<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;spring-ai-pgvector-store<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span><span>​<br><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;org.springframework.ai<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;spring-ai-starter-mcp-client<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">3）更新完依赖后，建议安装 Maven Helper 插件来检测依赖冲突：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1750833640916-eb7f4e2a-6d52-49d3-9253-d003463a6554.png"><img data-src="https://pic.yupi.icu/1/1750833640916-eb7f4e2a-6d52-49d3-9253-d003463a6554.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">检查结果显示没有 Spring AI 相关冲突，说明依赖配置正确：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1750833683665-6cac77b4-4838-4b7d-8d50-2e9711e382bc.png"><img data-src="https://pic.yupi.icu/1/1750833683665-6cac77b4-4838-4b7d-8d50-2e9711e382bc.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">MCP 服务端项目依赖更新</span></h4>
<p class="md-end-block md-p"><span class="md-plain">MCP 服务端项目的更新相对简单，跟前面一样，引入仓库和依赖管理配置，然后只需要更新 <span class="md-pair-s"><code>spring-ai-starter-mcp-server-webmvc</code><span class="md-plain"> 依赖即可：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependencyManagement<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependencies<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;org.springframework.ai<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;spring-ai-bom<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;1.0.0<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">type<span class="cm-tag cm-bracket">&gt;pom<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">type<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">scope<span class="cm-tag cm-bracket">&gt;import<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">scope<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependencies<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependencyManagement<span class="cm-tag cm-bracket">&gt;<br><span><span>​<br><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">repositories<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">repository<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">id<span class="cm-tag cm-bracket">&gt;spring-snapshots<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">id<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">name<span class="cm-tag cm-bracket">&gt;Spring Snapshots<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">name<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">url<span class="cm-tag cm-bracket">&gt;https://repo.spring.io/snapshot<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">url<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">releases<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">enabled<span class="cm-tag cm-bracket">&gt;false<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">enabled<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">releases<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp;<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">repository<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">repository<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">name<span class="cm-tag cm-bracket">&gt;Central Portal Snapshots<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">name<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">id<span class="cm-tag cm-bracket">&gt;central-portal-snapshots<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">id<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">url<span class="cm-tag cm-bracket">&gt;https://central.sonatype.com/repository/maven-snapshots/<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">url<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">releases<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">enabled<span class="cm-tag cm-bracket">&gt;false<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">enabled<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">releases<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">snapshots<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">enabled<span class="cm-tag cm-bracket">&gt;true<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">enabled<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">snapshots<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp;<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">repository<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">repositories<span class="cm-tag cm-bracket">&gt;<br><span><span>​<br><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;org.springframework.ai<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;spring-ai-starter-mcp-server-webmvc<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">第二步：代码问题修复</span></h3>
<p class="md-end-block md-p"><span class="md-plain">依赖更新完成后，接下来需要修复由于版本变更导致的代码问题。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">1、Advisor 顾问功能修复</span></h4>
<p class="md-end-block md-p"><span class="md-plain">这是一个 <span class="md-pair-s "><strong>破坏性变更</strong><span class="md-plain">，很多 advisor 相关的接口和方法都更新了，但坑爹的是官方文档并未明确说明这个变更！</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1750833715717-5fb89794-aaf1-4db1-b1f3-4bc91989d5ea.png"><img data-src="https://pic.yupi.icu/1/1750833715717-5fb89794-aaf1-4db1-b1f3-4bc91989d5ea.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">遇到这种情况，我们可以参考源码（比如 <span class="md-pair-s"><code>SimpleLoggerAdvisor</code><span class="md-plain">）的实现方式对之前开发的 advisor 进行修改。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">1）修改后的 MyLoggerAdvisor 自定义日志拦截器代码：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Slf4j<br><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">class&nbsp;<span class="cm-def">MyLoggerAdvisor&nbsp;<span class="cm-keyword">implements&nbsp;<span class="cm-variable">CallAdvisor,&nbsp;<span class="cm-variable">StreamAdvisor&nbsp;{<br><span><span>​<br><span><span class="cm-tab"><span class="cm-meta">@Override<br><span><span class="cm-tab"><span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">getName() {<br><span><span class="cm-tab"><span class="cm-tab"><span class="cm-keyword">return&nbsp;<span class="cm-keyword">this.<span class="cm-variable">getClass().<span class="cm-variable">getSimpleName();<br><span><span class="cm-tab">}<br><span><span>​<br><span><span class="cm-tab"><span class="cm-meta">@Override<br><span><span class="cm-tab"><span class="cm-keyword">public&nbsp;<span class="cm-variable-3">int&nbsp;<span class="cm-variable">getOrder() {<br><span><span class="cm-tab"><span class="cm-tab"><span class="cm-keyword">return&nbsp;<span class="cm-number">0;<br><span><span class="cm-tab">}<br><span><span>​<br><span><span class="cm-tab"><span class="cm-keyword">private&nbsp;<span class="cm-variable">ChatClientRequest&nbsp;<span class="cm-variable">before(<span class="cm-variable">ChatClientRequest&nbsp;<span class="cm-variable">request) {<br><span><span class="cm-tab"><span class="cm-tab"><span class="cm-variable">log.<span class="cm-variable">info(<span class="cm-string">"AI Request: {}",&nbsp;<span class="cm-variable">request.<span class="cm-variable">prompt());<br><span><span class="cm-tab"><span class="cm-tab"><span class="cm-keyword">return&nbsp;<span class="cm-variable">request;<br><span><span class="cm-tab">}<br><span><span>​<br><span><span class="cm-tab"><span class="cm-keyword">private&nbsp;<span class="cm-variable-3">void&nbsp;<span class="cm-variable">observeAfter(<span class="cm-variable">ChatClientResponse&nbsp;<span class="cm-variable">chatClientResponse) {<br><span><span class="cm-tab"><span class="cm-tab"><span class="cm-variable">log.<span class="cm-variable">info(<span class="cm-string">"AI Response: {}",&nbsp;<span class="cm-variable">chatClientResponse.<span class="cm-variable">chatResponse().<span class="cm-variable">getResult().<span class="cm-variable">getOutput().<span class="cm-variable">getText());<br><span><span class="cm-tab">}<br><span><span>​<br><span><span class="cm-tab"><span class="cm-meta">@Override<br><span><span class="cm-tab"><span class="cm-keyword">public&nbsp;<span class="cm-variable">ChatClientResponse&nbsp;<span class="cm-variable">adviseCall(<span class="cm-variable">ChatClientRequest&nbsp;<span class="cm-variable">chatClientRequest,&nbsp;<span class="cm-variable">CallAdvisorChain&nbsp;<span class="cm-variable">chain) {<br><span><span class="cm-tab"><span class="cm-tab"><span class="cm-variable">chatClientRequest&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">before(<span class="cm-variable">chatClientRequest);<br><span><span class="cm-tab"><span class="cm-tab"><span class="cm-variable">ChatClientResponse&nbsp;<span class="cm-variable">chatClientResponse&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">chain.<span class="cm-variable">nextCall(<span class="cm-variable">chatClientRequest);<br><span><span class="cm-tab"><span class="cm-tab"><span class="cm-variable">observeAfter(<span class="cm-variable">chatClientResponse);<br><span><span class="cm-tab"><span class="cm-tab"><span class="cm-keyword">return&nbsp;<span class="cm-variable">chatClientResponse;<br><span><span class="cm-tab">}<br><span><span>​<br><span><span class="cm-tab"><span class="cm-meta">@Override<br><span><span class="cm-tab"><span class="cm-keyword">public&nbsp;<span class="cm-variable">Flux<span class="cm-operator">&lt;<span class="cm-variable">ChatClientResponse<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">adviseStream(<span class="cm-variable">ChatClientRequest&nbsp;<span class="cm-variable">chatClientRequest,&nbsp;<span class="cm-variable">StreamAdvisorChain&nbsp;<span class="cm-variable">chain) {<br><span><span class="cm-tab"><span class="cm-tab"><span class="cm-variable">chatClientRequest&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">before(<span class="cm-variable">chatClientRequest);<br><span><span class="cm-tab"><span class="cm-tab"><span class="cm-variable">Flux<span class="cm-operator">&lt;<span class="cm-variable">ChatClientResponse<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">chatClientResponseFlux&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">chain.<span class="cm-variable">nextStream(<span class="cm-variable">chatClientRequest);<br><span><span class="cm-tab"><span class="cm-tab"><span class="cm-keyword">return&nbsp;(<span class="cm-keyword">new&nbsp;<span class="cm-variable">ChatClientMessageAggregator()).<span class="cm-variable">aggregateChatClientResponse(<span class="cm-variable">chatClientResponseFlux,&nbsp;<span class="cm-keyword">this::<span class="cm-variable">observeAfter);<br><span><span class="cm-tab">}<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">2）同样需要修复 ReReadingAdvisor，需要重新编写修改用户提示词的代码：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">/**<br><span><span class="cm-comment">* 自定义 Re2 Advisor<br><span><span class="cm-comment">* 可提高大型语言模型的推理能力<br><span><span class="cm-comment">*/<br><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">class&nbsp;<span class="cm-def">ReReadingAdvisor&nbsp;<span class="cm-keyword">implements&nbsp;<span class="cm-variable">CallAdvisor,&nbsp;<span class="cm-variable">StreamAdvisor&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-comment">/**<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">* 执行请求前，改写 Prompt<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">*<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">* @param chatClientRequest<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">* @return<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">*/<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-variable">ChatClientRequest&nbsp;<span class="cm-variable">before(<span class="cm-variable">ChatClientRequest&nbsp;<span class="cm-variable">chatClientRequest) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">userText&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">chatClientRequest.<span class="cm-variable">prompt().<span class="cm-variable">getUserMessage().<span class="cm-variable">getText();<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 添加上下文参数<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">chatClientRequest.<span class="cm-variable">context().<span class="cm-variable">put(<span class="cm-string">"re2_input_query",&nbsp;<span class="cm-variable">userText);<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 修改用户提示词<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">newUserText&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"""<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-operator">%<span class="cm-variable">s<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Read&nbsp;<span class="cm-variable">the&nbsp;<span class="cm-variable">question&nbsp;<span class="cm-variable">again:&nbsp;<span class="cm-operator">%<span class="cm-variable">s<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">""".formatted(userText, userText);<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Prompt&nbsp;<span class="cm-variable">newPrompt&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">chatClientRequest.<span class="cm-variable">prompt().<span class="cm-variable">augmentUserMessage(<span class="cm-variable">newUserText);<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">ChatClientRequest(<span class="cm-variable">newPrompt,&nbsp;<span class="cm-variable">chatClientRequest.<span class="cm-variable">context());<br><span>&nbsp; }<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Override<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable">ChatClientResponse&nbsp;<span class="cm-variable">adviseCall(<span class="cm-variable">ChatClientRequest&nbsp;<span class="cm-variable">chatClientRequest,&nbsp;<span class="cm-variable">CallAdvisorChain&nbsp;<span class="cm-variable">chain) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">chain.<span class="cm-variable">nextCall(<span class="cm-keyword">this.<span class="cm-variable">before(<span class="cm-variable">chatClientRequest));<br><span>&nbsp; }<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Override<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable">Flux<span class="cm-operator">&lt;<span class="cm-variable">ChatClientResponse<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">adviseStream(<span class="cm-variable">ChatClientRequest&nbsp;<span class="cm-variable">chatClientRequest,&nbsp;<span class="cm-variable">StreamAdvisorChain&nbsp;<span class="cm-variable">chain) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">chain.<span class="cm-variable">nextStream(<span class="cm-keyword">this.<span class="cm-variable">before(<span class="cm-variable">chatClientRequest));<br><span>&nbsp; }<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Override<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable-3">int&nbsp;<span class="cm-variable">getOrder() {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-number">0;<br><span>&nbsp; }<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Override<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">getName() {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-keyword">this.<span class="cm-variable">getClass().<span class="cm-variable">getSimpleName();<br><span>&nbsp; }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">2、工具调用功能修复</span></h4>
<p class="md-end-block md-p"><span class="md-plain">1）ToolRegistration 工具注册类的包名发生了变更，需要修改：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 原来：<br><span><span class="cm-keyword">import&nbsp;<span class="cm-variable">org.<span class="cm-variable">springframework.<span class="cm-variable">ai.<span class="cm-variable">tool.<span class="cm-variable">ToolCallbacks;<br><span><span>​<br><span><span class="cm-comment">// 改为：<br><span><span class="cm-keyword">import&nbsp;<span class="cm-variable">org.<span class="cm-variable">springframework.<span class="cm-variable">ai.<span class="cm-variable">support.<span class="cm-variable">ToolCallbacks;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">2）LoveApp 中的工具调用方法需要修改：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 修改为：<br><span>.<span class="cm-variable">toolCallbacks(<span class="cm-variable">toolCallbackProvider)</span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">3）ToolCallAgent 的配置也需要修改，这是为了禁用 Spring AI 内置的工具调用机制，自己处理工具调用的流程和消息上下文：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-keyword">public&nbsp;<span class="cm-variable">ToolCallAgent(<span class="cm-variable">ToolCallback[]&nbsp;<span class="cm-variable">availableTools) {<br><span>&nbsp; &nbsp;<span class="cm-keyword">super();<br><span>&nbsp; &nbsp;<span class="cm-keyword">this.<span class="cm-variable">availableTools&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">availableTools;<br><span>&nbsp; &nbsp;<span class="cm-keyword">this.<span class="cm-variable">toolCallingManager&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">ToolCallingManager.<span class="cm-variable">builder().<span class="cm-variable">build();<br><span>&nbsp; &nbsp;<span class="cm-comment">// 禁用 Spring AI 内置的工具调用机制，自己维护选项和消息上下文<br><span>&nbsp; &nbsp;<span class="cm-keyword">this.<span class="cm-variable">chatOptions&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">DashScopeChatOptions.<span class="cm-variable">builder()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">withInternalToolExecutionEnabled(<span class="cm-atom">false)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">3、RAG 知识库功能修复</span></h4>
<p class="md-end-block md-p"><span class="md-plain">1）PgVector 配置修改</span></p>
<p class="md-end-block md-p"><span class="md-plain">由于我们原本就是手动引入 PgVector，没有使用 Spring Boot 的自动配置包，所以只需要移除项目启动类的自动配置即可：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1750835676478-ef68236f-9c77-498a-9f50-5218094877bb.png"><img data-src="https://pic.yupi.icu/1/1750835676478-ef68236f-9c77-498a-9f50-5218094877bb.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">代码如下：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@SpringBootApplication(<span class="cm-variable">exclude&nbsp;<span class="cm-operator">=&nbsp;{<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 为了便于大家开发调试和部署，取消数据库自动配置<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 需要使用 PgVector 时把 DataSourceAutoConfiguration.class 删除<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">DataSourceAutoConfiguration.<span class="cm-keyword">class<br><span>})<br><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">class&nbsp;<span class="cm-def">YuAiAgentApplication&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-keyword">static&nbsp;<span class="cm-variable-3">void&nbsp;<span class="cm-variable">main(<span class="cm-variable-3">String[]&nbsp;<span class="cm-variable">args) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">SpringApplication.<span class="cm-variable">run(<span class="cm-variable">YuAiAgentApplication.<span class="cm-keyword">class,&nbsp;<span class="cm-variable">args);<br><span>&nbsp; }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">2）RAG 相关类包名修复</span></p>
<p class="md-end-block md-p"><span class="md-plain">自定义 RAG 知识库相关的 LoveAppRagCloudAdvisorConfig 和 LoveAppRagCustomAdvisorFactory 类，包名发生了变更：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 原来：<br><span><span class="cm-keyword">import&nbsp;<span class="cm-variable">org.<span class="cm-variable">springframework.<span class="cm-variable">ai.<span class="cm-variable">chat.<span class="cm-variable">client.<span class="cm-variable">advisor.<span class="cm-variable">RetrievalAugmentationAdvisor;<br><span><span>​<br><span><span class="cm-comment">// 改为：<br><span><span class="cm-keyword">import&nbsp;<span class="cm-variable">org.<span class="cm-variable">springframework.<span class="cm-variable">ai.<span class="cm-variable">rag.<span class="cm-variable">advisor.<span class="cm-variable">RetrievalAugmentationAdvisor;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">3）DashScopeApi 构建方式修改，之前是 new，改为 builder 模式：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-variable">DashScopeApi&nbsp;<span class="cm-variable">dashScopeApi&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">DashScopeApi.<span class="cm-variable">builder()<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">apiKey(<span class="cm-variable">dashScopeApiKey)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();</span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">4）如果在 LoveApp 中想使用 <span class="md-meta-i-c  md-link"><a href="https://docs.spring.io/spring-ai/reference/api/retrieval-augmented-generation.html" rel="noopener nofollow"><span class="md-plain">QuestionAnswerAdvisor</span></a><span class="md-plain">，需要引入新的依赖，因为包名发生了变更：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;org.springframework.ai<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;spring-ai-advisors-vector-store<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">4、对话记忆功能修复</span></h4>
<p class="md-end-block md-p"><span class="md-plain">对话记忆的写法变更还挺大的，参考 <span class="md-meta-i-c  md-link"><a href="https://docs.spring.io/spring-ai/reference/api/chat-memory.html" rel="noopener nofollow"><span class="md-plain">官方文档</span></a><span class="md-plain">。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">1）修改 LoveApp 类中对话记忆的设置方式，新版本将算法和存储进行了分离，支持了更多的存储方式：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 初始化基于内存的对话记忆<br><span><span class="cm-variable">MessageWindowChatMemory&nbsp;<span class="cm-variable">chatMemory&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">MessageWindowChatMemory.<span class="cm-variable">builder()<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">chatMemoryRepository(<span class="cm-keyword">new&nbsp;<span class="cm-variable">InMemoryChatMemoryRepository())<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">maxMessages(<span class="cm-number">20)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">2）修改对话记忆 Advisor 的创建方式，感觉 Spring AI 要统一用建造者模式创建对象了：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-variable">chatClient&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">ChatClient.<span class="cm-variable">builder(<span class="cm-variable">dashscopeChatModel)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">defaultSystem(<span class="cm-variable">SYSTEM_PROMPT)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">defaultAdvisors(<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">MessageChatMemoryAdvisor.<span class="cm-variable">builder(<span class="cm-variable">chatMemory).<span class="cm-variable">build(),<br><span>&nbsp; &nbsp; &nbsp; )</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">3）会话 ID 键名修改：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>.<span class="cm-variable">advisors(<span class="cm-variable">spec&nbsp;<span class="cm-operator">-&gt;&nbsp;<span class="cm-variable">spec.<span class="cm-variable">param(<span class="cm-variable">ChatMemory.<span class="cm-variable">CONVERSATION_ID,&nbsp;<span class="cm-variable">chatId))</span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">4）修改基于文件持久化的会话记忆 FileBasedChatMemory 类，调整 get 方法，因为 ChatMemory 接口的 get 方法参数发生了变更：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Override<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable">List<span class="cm-operator">&lt;<span class="cm-variable">Message<span class="cm-operator">&gt;&nbsp;<span class="cm-def">get(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">conversationId) {<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">getOrCreateConversation(<span class="cm-variable">conversationId);<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">5、 其他</span></h4>
<p class="md-end-block md-p"><span class="md-plain">还有个小细节，要修改 MyKeywordEnricher 类，因为关键词元信息增强器的包名发生了变更：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 原来：<br><span><span class="cm-keyword">import&nbsp;<span class="cm-variable">org.<span class="cm-variable">springframework.<span class="cm-variable">ai.<span class="cm-variable">transformer.<span class="cm-variable">KeywordMetadataEnricher;<br><span><span>​<br><span><span class="cm-comment">// 改为：<br><span><span class="cm-keyword">import&nbsp;<span class="cm-variable">org.<span class="cm-variable">springframework.<span class="cm-variable">ai.<span class="cm-variable">model.<span class="cm-variable">transformer.<span class="cm-variable">KeywordMetadataEnricher;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">总结</span></h2>
<p class="md-end-block md-p"><span class="md-plain">以上就是 Spring AI Alibaba 框架的升级过程，涉及的修改点还是比较多的、而且还要对所有功能进行测试，很耗时间，这就是为什么在企业中 “项目能运行，就不要动它”。</span></p>
<p class="md-end-block md-p"><span class="md-plain">所有的代码修改我都已经开源到 GitHub 上了，每一次的提交记录都非常清晰，方便大家对照学习。如果有遗漏的地方，也欢迎大家评论区指出，我会继续补充和完善。</span></p>
<p class="md-end-block md-p"><span class="md-plain">不得不感叹技术的更新真的是太太太太快了，但也正是这种快速迭代让我们能够享受到越来越强大的 AI 开发能力。很快我会再带大家用更新的技术做一套全新的 AI 全栈项目，点个关注，敬请期待吧~</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">更多编程学习资源</span></h2>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/course" rel="noopener nofollow"><span class="md-plain">Java前端程序员必做项目实战教程+毕设网站</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/" rel="noopener nofollow"><span class="md-plain">程序员免费编程学习交流社区（自学必备）</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/course/cv" rel="noopener nofollow"><span class="md-plain">程序员保姆级求职写简历指南（找工作必备）</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.mianshiya.com/" rel="noopener nofollow"><span class="md-plain">程序员免费面试刷题网站工具（找工作必备）</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640584449888772098" rel="noopener nofollow"><span class="md-plain">最新Java零基础入门学习路线 + Java教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586673306091521" rel="noopener nofollow"><span class="md-plain">最新Python零基础入门学习路线 + Python教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586014108303362" rel="noopener nofollow"><span class="md-plain">最新前端零基础入门学习路线 + 前端教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586867363954689" rel="noopener nofollow"><span class="md-plain">最新数据结构和算法零基础入门学习路线 + 算法教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1644279832026075138" rel="noopener nofollow"><span class="md-plain">最新C++零基础入门学习路线、C++教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1641797333479903234" rel="noopener nofollow"><span class="md-plain">最新数据库零基础入门学习路线 + 数据库教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640589994284695553" rel="noopener nofollow"><span class="md-plain">最新Redis零基础入门学习路线 + Redis教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1641035880439271426" rel="noopener nofollow"><span class="md-plain">最新计算机基础入门学习路线 + 计算机基础教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1641366118197153793" rel="noopener nofollow"><span class="md-plain">最新小程序入门学习路线 + 小程序开发教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="http://sqlmother.yupi.icu/" rel="noopener nofollow"><span class="md-plain">最新SQL零基础入门学习路线 + SQL教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586295529324545" rel="noopener nofollow"><span class="md-plain">最新Linux零基础入门学习路线 + Linux教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640588753362108417" rel="noopener nofollow"><span class="md-plain">最新Git/GitHub零基础入门学习路线 + Git教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640587909942099969" rel="noopener nofollow"><span class="md-plain">最新操作系统零基础入门学习路线 + 操作系统教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640588119619551233" rel="noopener nofollow"><span class="md-plain">最新计算机网络零基础入门学习路线 + 计算机网络教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640588392073150465" rel="noopener nofollow"><span class="md-plain">最新设计模式零基础入门学习路线 + 设计模式教程</span></a></span></p>
</li>
<li class="md-list-item md-focus-container">
<p class="md-end-block md-p md-focus"><span class="md-meta-i-c md-link md-expand"><a href="https://www.code-nav.cn/post/1640648711119892481" rel="noopener nofollow"><span class="md-plain">最新软件工程零基础入门学习路线 + 软件工程教程</span></a></span></p>
</li>
</ul>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-26 11:37">2025-06-26 11:37</span>&nbsp;
<a href="https://www.cnblogs.com/yupi">程序员鱼皮</a>&nbsp;
阅读(<span id="post_view_count">31</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18949623);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18949623', targetLink: 'https://www.cnblogs.com/yupi/p/18949623', title: 'Spring AI Alibaba 1.0 正式发布！核心特性速览+老项目升级指南' })">举报</a>
</div>
        