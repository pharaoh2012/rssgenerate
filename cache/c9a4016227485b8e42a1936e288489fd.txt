
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/longronglang/p/18787489" title="发布于 2025-03-23 09:04">
    <span role="heading" aria-level="2">一文搞懂MCP协议与Function Call的区别</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h3 id="一前言">一、前言</h3>
<p>大家好，我是六哥！</p>
<p>今天咱们聊聊编程里两个听起来有点复杂的概念——MCP协议和函数调用（function call），其实用大白话来讲，它们就是两种不同的“沟通方式”，就像咱们人与人之间交流也有不同的方式一样。下面我就用生活中的例子和Python代码，给大家好好讲讲它们的区别。</p>
<h3 id="二function-call是啥">二、Function Call是啥</h3>
<h4 id="1生活例子">1、生活例子</h4>
<p>咱先来说说Function Call。Function Call就好比你去餐厅点菜。你走进餐厅，跟服务员说“给我来一份红烧肉”，服务员听到你的话后，就去厨房把你的需求告诉厨师，厨师按照这个需求去做菜，做好了之后服务员再把菜端给你。在这个过程中，你点菜的这个动作就相当于一次Function Call，你是调用者，服务员是传递需求的媒介，厨师是实际执行任务的人。</p>
<h4 id="2python代码例子">2、Python代码例子</h4>
<pre><code class="language-python">def make_red_cooked_pork():
    return "一份香喷喷的红烧肉"

# 调用函数
dish = make_red_cooked_pork()
print(dish)
</code></pre>
<p>在这段代码里，<code>make_red_cooked_pork</code> 就是那个“厨师”，它定义了如何做出红烧肉。而 <code>dish = make_red_cooked_pork()</code> 这行代码就是你“点菜”的动作，也就是一次Function Call。调用之后，函数会返回结果，最后把结果打印出来。</p>
<h4 id="3function-call的特点">3、Function Call的特点</h4>
<p>Function Call有个特点，就是它是同步的。啥意思呢？就是说你调用一个函数之后，程序会一直等着这个函数执行完，把结果返回给你，才会继续执行后面的代码。就像你在餐厅点菜后，得一直等着菜做好端上来，才能接着做别的事。</p>
<h3 id="三mcp协议又是啥">三、MCP协议又是啥</h3>
<h4 id="1生活例子-1">1、生活例子</h4>
<p>MCP协议就像是你在网上购物。你在购物平台上下单买了一件衣服，下单之后，你不用一直等着衣服送到你手上才能去做别的事，你可以该干嘛干嘛，该上班上班，该追剧追剧。购物平台会在衣服准备好之后，安排快递给你发货，等快递到了你家附近，会给你发消息通知你取件。在这个过程中，你下单的动作就相当于通过MCP协议发送了一个请求，购物平台和快递就是处理这个请求的系统，它们会在合适的时间给你反馈结果。</p>
<h4 id="2python代码例子-1">2、Python代码例子</h4>
<pre><code class="language-python">import asyncio

async def prepare_clothes():
    print("开始准备衣服...")
    await asyncio.sleep(3)  # 模拟准备衣服需要3秒
    print("衣服准备好啦，开始发货...")
    return "一件漂亮的衣服"

async def order_clothes():
    task = asyncio.create_task(prepare_clothes())
    print("下单成功，你可以去做别的事啦。")
    result = await task
    print("衣服到啦：", result)

# 运行异步函数
asyncio.run(order_clothes())
</code></pre>
<p>在这段代码里，<code>prepare_clothes</code> 函数就像是购物平台和快递，负责处理你买衣服的请求。<code>order_clothes</code> 函数里，<code>asyncio.create_task(prepare_clothes())</code> 这行代码就相当于你下了单，程序不会等着 <code>prepare_clothes</code> 函数执行完，而是会继续执行后面的代码，打印出“下单成功，你可以去做别的事啦”。等 <code>prepare_clothes</code> 函数执行完后，再通过 <code>await task</code> 获取结果。</p>
<h4 id="3mcp协议的特点">3、MCP协议的特点</h4>
<p>MCP协议是异步的。也就是说，你发送一个请求之后，程序不会停下来等结果，而是会继续执行其他代码。等结果出来了，再回来处理这个结果。就像你网上下单后不用一直等着衣服到，还能去做其他事情。</p>
<h3 id="四mcp协议与function-call的区别总结">四、MCP协议与Function Call的区别总结</h3>
<h4 id="1同步与异步">1、同步与异步</h4>
<p>Function Call是同步的，调用函数后程序会一直等待函数执行完返回结果，才继续执行后续代码；而MCP协议是异步的，发送请求后程序不会等待结果，会继续执行其他代码，等结果出来再处理。</p>
<h4 id="2执行方式">2、执行方式</h4>
<p>Function Call就像你在餐厅点菜，得等菜做好才能接着干别的；MCP协议就像网上购物，下单后可以去做其他事情，等东西到了再处理。</p>
<h4 id="3应用场景">3、应用场景</h4>
<p>Function Call适合那些需要立即得到结果，并且后续代码依赖这个结果的场景；MCP协议适合那些处理时间较长，不需要立即得到结果，并且不想让程序阻塞的场景，比如网络请求、文件读写等。</p>
<h3 id="五结尾">五、结尾</h3>
<p>通过上面的生活例子和Python代码，相信大家对MCP协议和Function Call的区别有了更清晰的认识。其实编程里很多概念都能和生活中的事情联系起来，这样理解起来就会容易很多。希望大家都能在AI的道路上越走越顺！</p>
<p>好了本次就先介绍到这里吧 如果觉得对你有用的话 欢迎星标我啊</p>
<p>你们的点赞、在看、留言、分享是我持续更新的最大动力！（求求了）</p>

</div>
<div id="MySignature" role="contentinfo">
    <p><span style="font-family: 微软雅黑; font-size: 22px; font-weight: normal; font-style: italic; text-decoration: none"><strong>优秀不够，你是否无可替代</strong></span></p>
<p><span style="font-family: 微软雅黑; font-size: 18px; font-weight: normal; font-style: italic; text-decoration: none"><strong>
软件测试交流QQ群：721256703，期待你的加入！！</strong></span></p>
<p><span style="font-family: 微软雅黑; font-size: 18px; font-weight: normal; font-style: italic; text-decoration: none"><strong>欢迎关注我的微信公众号：软件测试君 </strong></span></p>
<img src="https://www.cnblogs.com/images/cnblogs_com/longronglang/1061549/o_QQ%E6%88%AA%E5%9B%BE20190728134401.jpg" height="200" width="450"><br>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.7992040962685185" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-23 09:04">2025-03-23 09:04</span>&nbsp;
<a href="https://www.cnblogs.com/longronglang">久曲健</a>&nbsp;
阅读(<span id="post_view_count">128</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18787489" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18787489);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18787489', targetLink: 'https://www.cnblogs.com/longronglang/p/18787489', title: '一文搞懂MCP协议与Function Call的区别' })">举报</a>
</div>
        