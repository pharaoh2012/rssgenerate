
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xuanyanxuanyv/p/18776252" title="发布于 2025-03-17 10:14">
    <span role="heading" aria-level="2">cpu的虚拟化（上）———— 进程</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">

<ul>
<li><a href="#%E5%89%8D%E8%A8%80" rel="noopener nofollow">前言</a></li>
<li><a href="#%E8%BF%9B%E7%A8%8B%E4%B8%8E%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%85%B3%E7%B3%BB" rel="noopener nofollow">进程与操作系统的关系</a></li>
<li><a href="#%E8%BF%9B%E7%A8%8B%E5%88%9D%E8%AF%86" rel="noopener nofollow">进程初识</a></li>
</ul>

<h4 id="前言">前言</h4>
<p>这是一篇我在学习OSTEP这本书的笔记与总结，这篇笔记的正文部分围绕<strong>进程</strong>赞开，主要讨论“是什么”与“为什么”两个问题，笔记如有错漏，望不吝纠正。</p>
<hr>
<h4 id="进程与操作系统的关系">进程与操作系统的关系</h4>
<p>进程是操作系统里的核心之一，在OSTEP中对进程在操作系统中扮演的角色给出了以下解释：</p>
<blockquote>
<p>进程是操作系统中分配资源最小的单位。</p>
</blockquote>
<p>在这段描述中有一些关键点：<strong>资源</strong>与<strong>最小单位</strong>。在看到这段描述后，我就在想“资源”是什么？比进程大的资源分配单位有哪些？接下来，我来一一进行解释。</p>
<ol>
<li>
<p><strong>为进程分配的资源有什么？</strong></p>
<ol>
<li><strong>内存资源</strong>
<ul>
<li>每个进程都有自己独立的内存空间，这里独立性的主要表现有：每个进程拥有的物理内存是分隔开的，不重叠的。这样设计的目的是为了避免A进程的行为对B进程产生影响。</li>
<li>内存空间被分成主要三个部分：
<ol>
<li><strong>指令段</strong>：用于存放进程拥有的指令序列，该段的访问权限是只读的，这样做是为了避免进程对其进行修改，导致程序出现开发者非预期的行为。</li>
<li><strong>数据段</strong>：数据段分为两个部分:全局数据区、堆区。全局数据区用于存放程序的全局数据。比如：c语言中的全局变量的值就存储在这里。堆区用于提供用户使用如malloc时申请的空间。</li>
<li><strong>栈区</strong>：栈区用于存储在函数调用过程中的局部变量，</li>
</ol>
</li>
</ul>
</li>
<li><strong>内核资源</strong>
<ul>
<li>操作系统为每个进程分配了如PCB，信号量，消息队列等用于管理进程的必要资源。这里我主要介绍PCB。</li>
<li>PCB的中文名称是进程控制块，用于存储描述进程的重要信息。如：进程ID，进程状态，进程的上下文等等。</li>
</ul>
</li>
<li><strong>CPU时间片</strong>
<ul>
<li>CPU时间片是操作系统用来管理进程使用CPU时长的信息，结合进程调度程序来完成对进程的合理调度。</li>
</ul>
</li>
</ol>
</li>
<li>
<p><strong>比进程大的资源分配单位有哪些？</strong></p>
<ul>
<li>在操作系统中比进程大的资源分配单位有：作业、会话等，对于这些概念在此就不详细展开了，感兴趣的可以向DeepSeek提问。</li>
</ul>
</li>
</ol>
<hr>
<h4 id="进程初识">进程初识</h4>
<p>现在让我们回到关于进程的问题中，前文我们聊了进程与操作系统的关系，那么，接下来来聊聊关于进程本身的问题吧！<br>
当我们第一次听到进程这个词时，大概会产生这样的疑惑，进程是什么？为什么要提出进程的概念？进程与我们平时写的程序有什么关系？现在我们来一一解释这些疑问。</p>
<ol>
<li><strong>进程是什么？</strong>
<ul>
<li>对于这个问题我的解释是:进程是程序加载到内存后，在CPU中执行的过程。这里的关键词是<strong>过程</strong>，进程不像程序是一直存储在硬盘中与其他的硬件或程序是没有任何交互的，它在每时每刻都在与其余硬件和进程进行互动，DeepSeek对该问题的回答中使用了<strong>静态</strong>与<strong>动态</strong>这两个词来描述进程与程序的联系。</li>
<li>在聊进程的时候，程序不可避免的引入了进来。因此，在此也谈谈程序的相关问题。
<ol>
<li><strong>程序是什么呢？</strong>
<ul>
<li>程序是存储在磁盘里的一条条机器指令构成的集合。</li>
</ul>
</li>
<li><strong>程序与的进程的联系是怎样的？</strong>
<ul>
<li>程序就好像是一个菜谱，它记录了做某一道菜的每个步骤。而进程则是照着这个菜谱做菜的过程，这个过程中除了有菜谱上描述的步骤，还有与这些步骤交互的厨具，如：装菜的篮子，炒菜的灶台等等。</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li><strong>进程概念的产生在历史上的原因</strong>
<ul>
<li>在1960年之前的计算机，执行程序的方式是串行执行。串行执行就是当一个程序执行完成后，再执行另一个程序。使用这种执行方式的原因主要是因为硬件资源的不足，如：CPU的执行速度过慢、内存空间的太小等等。但随着硬件的发展，CPU的运行速度与内存空间的大小大幅提升。此时，计算机的设计者们就开始思考怎样提高在单位时间上的硬件利用率<sup class="footnote-ref"><a href="#fn1" id="fnref1" rel="noopener nofollow">[1]</a></sup>。其中有一个思路是让多个程序交替在内存中运行，而为了实现这个目标，设计者们要面临一系列的问题，而这些问题都与程序在CPU上的运行过程有关，其中有几个要素是需要格外关注的，如：程序在内存中的指令集、程序在CPU的寄存器中的状态、程序与程序之间在物理空间上的关系等等。而为了方便描述与解决这些问题就需要一个东西，这个东西要将这些关键要素关联为一个整体，这个东西的名称便是进程。</li>
</ul>
</li>
</ol>
<p>最后，谈谈进程的几种基本状态。进程的状态是很重要的，因为对进程进行调度时，需要依赖这些状态信息。</p>
<ol start="3">
<li>
<p><strong>进程的基本状态</strong></p>
<ul>
<li><strong>运行</strong>：运行状态是指当进程正在使用CPU时处于的状态。</li>
<li><strong>阻塞</strong>：阻塞状态是指当进程在等待I/O请求或其他事件时处于的状态。</li>
<li><strong>就绪</strong>：就绪状态指进程除了CPU资源其他的所有所需的都就绪时处于的状态。</li>
</ul>
</li>
<li>
<p><strong>状态转化的触发条件</strong></p>
<ol>
<li><strong>运行-&gt;阻塞</strong>
<ul>
<li>当使用系统调用获取外部存储设备的数据时发生。</li>
<li>示例：使用系统调用read()，在读取磁盘数据时需要停止使用CPU。</li>
</ul>
</li>
<li><strong>阻塞-&gt;就绪</strong>
<ul>
<li>当发出的请求有回应或者读取的数据到达时。</li>
</ul>
</li>
<li><strong>就绪-&gt;运行</strong>
<ul>
<li>当该进程被调度程序选中，便会开始使用CPU。</li>
</ul>
</li>
</ol>
</li>
</ol>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>在串行执行方式下，当一个程序在等待I/O设备的回应时，CPU是处于空闲状态的。因此，硬件的利用率还有提高的空间。 <a href="#fnref1" class="footnote-backref" rel="noopener nofollow">↩︎</a></p>
</li>
</ol>
</section>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="8.140549763247686" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-17 11:12">2025-03-17 10:14</span>&nbsp;
<a href="https://www.cnblogs.com/xuanyanxuanyv">闲言碎语wow</a>&nbsp;
阅读(<span id="post_view_count">55</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18776252" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18776252);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18776252', targetLink: 'https://www.cnblogs.com/xuanyanxuanyv/p/18776252', title: 'cpu的虚拟化（上）———— 进程' })">举报</a>
</div>
        