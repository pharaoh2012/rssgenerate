
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/hzhzh/p/19016615/wow-shellsort" title="发布于 2025-08-01 11:45">
    <span role="heading" aria-level="2">【C++】神秘-希尔排序</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p></p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#插入排序" rel="noopener nofollow">插入排序</a></li><li><a href="#希尔排序" rel="noopener nofollow">希尔排序</a><ul><li><a href="#希尔排序的优点" rel="noopener nofollow">希尔排序的优点</a><ul><li><ul><li><a href="#时间复杂度" rel="noopener nofollow">时间复杂度</a></li></ul></li></ul></li><li><a href="#希尔排序的思想" rel="noopener nofollow">希尔排序的思想</a><ul><li><ul><li><a href="#预排序" rel="noopener nofollow">预排序</a></li><li><a href="#knuth增量序列" rel="noopener nofollow">Knuth增量序列</a></li><li><a href="#代码实现希尔排序" rel="noopener nofollow">代码实现希尔排序</a></li></ul></li></ul></li></ul></li></ul></div><p></p>
<h3 id="插入排序">插入排序</h3>
<p>在待排序的元素中，<strong>假设前k个元素已有序，现将第k+1个元素插入到前面已经排好的序列中，使得前k个元素有序。</strong><br>
按照此法对所有元素进行插入，<strong>直到整个序列有序。</strong><br>
但我们并<strong>不能确定待排元素中究竟哪一部分是有序的。</strong>，<br>
所以我们一开始只能<strong>认为第一个元素是有序的</strong>，<strong>依次将其后面的元素插入到这个有序序列中来，直到整个序列有序为止。</strong><br>
<img src="https://i-blog.csdnimg.cn/direct/9e20b2571a3a429f89af4ab25b5936ed.png" alt="" height="320" loading="lazy"><br>
↑↑↑黑色圈住的数字表示要插入到前面序列的数字</p>
<hr>
<h3 id="希尔排序">希尔排序</h3>
<p>讲完插入排序，就该讲我们的重点了。<br>
<strong>希尔排序是一种改进的插入排序算法，也被称为缩小增量排序。</strong><br>
它通过将待排序序列分割成多个子序列来进行排序，然后逐步缩小子序列的长度，最终使整个序列变为有序。</p>
<p>希尔排序的核心思想是将相距某个增量的元素组成一个子序列，对子序列进行插入排序。<br>
然后逐步减小增量，重复上述过程，直到增量为1时，完成最后一次插入排序，使整个序列成为有序的。</p>
<hr>
<h4 id="希尔排序的优点">希尔排序的优点</h4>
<ol>
<li>
<p><strong>效率较高</strong>：对于大规模数据集，希尔排序通常比简单插入排序更快，特别是在处理近乎有序的数据时，由于跳跃式的比较和交换，效率提升显著。</p>
</li>
<li>
<p><strong>灵活性</strong>：希尔排序通过调整间隔序列来适应不同类型的数据分布，这使得它在某些情况下能获得更好的性能，尽管没有一种固定的间隔序列适合所有场景。</p>
</li>
<li>
<p><strong>稳定性</strong>：虽然希尔排序本质上不是稳定的排序算法，但在某些实现版本中，如果对相等元素进行特殊处理，可以保持相对位置不变，表现为某种形式的稳定性。</p>
</li>
<li>
<p><strong>易于理解</strong>：作为一种改进的插入排序，希尔排序的原理相对直观，容易学习和实现。</p>
</li>
</ol>
<p>然而，希尔排序的主要缺点在于它的时间复杂度依赖于所选的间隔序列，不稳定性和最坏情况下的效率不高可能会限制它在一些高并发环境下的使用。<br>
因此，在实际应用中需要权衡性能和代码实现复杂性。</p>
<hr>
<h6 id="时间复杂度">时间复杂度</h6>
<p>希尔排序的时间复杂度取决于增量序列的选取， <strong>一般最好情况下为O(nlogn)，最坏情况下为O(n^2)。</strong><br>
希尔排序是 <strong>不稳定的排序算法</strong> ，即可能改变相同元素的原始顺序。</p>
<hr>
<h4 id="希尔排序的思想">希尔排序的思想</h4>
<p><strong>希尔排序也被称为缩小增量排序。</strong><br>
其基本思想是将待排序的元素按照一定的间隔分组，对每组使用插入排序算法进行排序，<br>
然后逐步缩小间隔，再进行排序，直至间隔为1时进行最后一次排序。（如图）<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/c26abb0840349ec79c04786a14d4ed0c.gif" alt="" loading="lazy"><br>
<strong>在希尔排序中，我们要引入gap（间隔）：</strong></p>
<p><img src="https://i-blog.csdnimg.cn/direct/b2362ef59bfc47dc808373682012037e.png" alt="" height="300" loading="lazy"><br>
当gap不为1时，我们可以把它看做为一个预排序，先把数组变得比较有序。<br>
然后当 <strong>gap为1时</strong> 就是直接 <strong>插入排序了。</strong><br>
<strong>因为插入排序对比较有序的数组排列效率更高，所以希尔排序就为先预排序，再直接插入排序。</strong></p>
<h6 id="预排序">预排序</h6>
<p>我们先定义一个长度为5的<strong>逆序</strong>数组{5，4，3，2，1}，再来假设gap为3。<br>
<s>知周所众</s> <strong>众所周知插入排序再排逆序的数组时，时间复杂度为最坏的情况。</strong> 所以我们才要<strong>进行预排序</strong>。<br>
<img src="https://i-blog.csdnimg.cn/direct/08ea2778c53645ff89fbd3fc25c8f2ef.png" alt="" height="300" loading="lazy"><img src="https://i-blog.csdnimg.cn/direct/82f4eb4487d14cd3a192fddd4f82056e.png" alt="在这里插入图片描述" height="286" loading="lazy"></p>
<p>经过预排序后数组，已经变得比较有序了，这<strong>对后面的直接插入排序是有好处的</strong>，<strong>提高效率</strong>。</p>
<hr>
<h6 id="knuth增量序列">Knuth增量序列</h6>
<p>Knuth增量序列是希尔排序中使用的一种增量序列，<strong>它可以保证gap最后一定为1，</strong><br>
<strong>它的计算方式为：</strong><br>
gap = 1, 3, 9, 27, ...</p>
<p>其中gap的初始值为1，然后每次计算下一个增量值h时，都乘以3再加1，直到h大于等于数组长度的三分之一</p>
<p><strong>Knuth增量序列的特点是在每次排序中能够更好地减少逆序对的数量，从而提高排序的效率。</strong><br>
该增量序列的选择是经验性的，并没有严格的数学证明，但在实践中已经被广泛接受，并被证实在大多数情况下都能够有效地改善希尔排序的性能</p>
<hr>
<h6 id="代码实现希尔排序">代码实现希尔排序</h6>
<p>下面是使用实现希尔排序的代码：</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
using namespace std;
const int N = 1e6+5;
int n,arr[N];
void shellSort() {
    int gap = 1;// 使用Knuth增量序列，gap = 1, 3, 9, 27, ...
    while (gap &lt; n/3) gap = 3 * gap + 1;// 使用Knuth增量序列，保证gap最后为1
    while (gap &gt;= 1) {// 逐步缩小增量直到1
        // 对每个子序列进行插入排序
        for (int i = gap; i &lt; n; i++)
        for (int j = i; j &gt;= gap &amp;&amp; arr[j] &lt; arr[j-gap]; j -= gap) swap(arr[j], arr[j-gap]);
        gap /= 3;// 缩小增量
    }
}
int main() {
	cin&gt;&gt; n;
	for(int i=0;i&lt;n;i++) cin&gt;&gt; arr[i];
    shellSort();// 排序 
    // 输出 
    for (int i = 0; i &lt; n; i++) cout &lt;&lt; arr[i] &lt;&lt; " ";
    return 0;
}
</code></pre>
<p>该代码使用了<strong>Knuth增量序列</strong>，h的初始值为数组长度的一半，然后逐渐减小h的值。<br>
在每次循环内部，对每个子序列使用插入排序算法进行排序。最后输出排序后的数组。</p>
<hr>
<p><strong>总的来说，希尔排序可以应用于各种排序问题，并且在大规模数据下具有较好的性能。</strong></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0006944444444444445" data-date-updated="2025-08-01 11:46">2025-08-01 11:45</span>&nbsp;
<a href="https://www.cnblogs.com/hzhzh">hzhzh~</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19016615);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19016615', targetLink: 'https://www.cnblogs.com/hzhzh/p/19016615/wow-shellsort', title: '【C++】神秘-希尔排序' })">举报</a>
</div>
        