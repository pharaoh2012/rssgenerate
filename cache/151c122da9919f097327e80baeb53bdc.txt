
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/vipstone/p/19023587" title="发布于 2025-08-05 16:55">
    <span role="heading" aria-level="2">必看！导致事务失效的7大典型场景！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>@Transactional 声明式事务失效的场景是 Java 面试中经常被问到的问题，所以今天咱们就来系统的盘点一下导致 @Transactional 失效的场景有哪些？以及导致的原因和解决方案详解。</p>
<h2 id="1方法访问修饰符不是public">1.方法访问修饰符不是public</h2>
<p>以下代码会导致 @Transactional 失效：</p>
<pre><code class="language-java">@Service
public class OrderService {
    @Transactional
    private void createOrder() { // private方法，事务不生效
        // ...
    }
}
</code></pre>
<h3 id="原因分析">原因分析</h3>
<p>Spring AOP 代理在生成代理类时，只对 public 方法生成事务代理，这是 Java 源码层面设计原因，设计源码如下：</p>
<pre><code class="language-java">protected TransactionAttribute computeTransactionAttribute(Method method, Class&lt;?&gt; targetClass) {
   // Don't allow no-public methods as required.
   // 非 public 方法，设置为 null
   if (allowPublicMethodsOnly() &amp;&amp; !Modifier.isPublic(method.getModifiers())) {
      return null;
   }
   // 后面代码省略....
 }
</code></pre>
<h3 id="解决方案">解决方案</h3>
<p>将方法改为 public。</p>
<h2 id="2自调用问题">2.自调用问题</h2>
<p>以下代码会导致 @Transactional 失效：</p>
<pre><code class="language-java">@Service
public class OrderService {
    public void placeOrder() {
        createOrder(); // 直接调用，绕过代理
    }

    @Transactional
    public void createOrder() {
        // 事务操作
    }
}
</code></pre>
<h3 id="原因分析-1">原因分析</h3>
<p>当一个类中的非事务方法调用本类的事务方法时，调用是通过 this 直接调用，而不是通过 Spring 代理对象调用，因此事务不能生效。</p>
<h3 id="解决方案-1">解决方案</h3>
<ul>
<li>将事务方法移到另一个 Service 类中</li>
<li>使用 ApplicationContext 获取当前 Bean 的代理对象，如下代码所示：</li>
</ul>
<pre><code class="language-java">@Autowired
private ApplicationContext context;

public void placeOrder() {
    OrderService proxy = context.getBean(OrderService.class);
    proxy.createOrder(); // 通过代理调用
}
</code></pre>
<h2 id="3异常被捕获且未重新抛出">3.异常被捕获且未重新抛出</h2>
<p>以下代码会导致 @Transactional 失效：</p>
<pre><code class="language-java">@Transactional
public void transferMoney() {
    deductMoney();
    try {
        addMoney();
    } catch (Exception e) {
        log.error("异常", e);
        // 捕获但未抛出，事务不会回滚
    }
}
</code></pre>
<h3 id="原因分析-2">原因分析</h3>
<p>Spring 事务默认只在抛出未被捕获的 RuntimeException 或 Error 时回滚。如果异常被捕获且未抛出，代理认为方法执行成功，会提交事务。</p>
<h3 id="解决方案-2">解决方案</h3>
<ul>
<li><strong>手动设置回滚</strong>：TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</li>
<li><strong>或重新抛出异常</strong>：</li>
</ul>
<pre><code class="language-java">@Transactional
public void transferMoney() {
    deductMoney();
    try {
        addMoney();
    } catch (Exception e) {
        TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
        throw e; // 或不抛出，仅setRollbackOnly
    }
}
</code></pre>
<h2 id="4事务传播机制配置错误">4.事务传播机制配置错误</h2>
<p>例如：使用了 Propagation.NOT_SUPPORTED 或 Propagation.NEVER，会导致事务被挂起或拒绝。</p>
<blockquote>
<p>特别注意 Propagation.REQUIRES_NEW：会挂起当前事务，开启新事务，需谨慎使用，避免嵌套事务导致性能问题或死锁。</p>
</blockquote>
<h2 id="5数据库引擎不支持事务">5.数据库引擎不支持事务</h2>
<p>例如：MySQL 的 MyISAM 引擎不支持事务，必须使用 InnoDB。</p>
<p>即使代码配置了@Transactional，底层数据库不支持也无法实现事务。</p>
<h2 id="6方法被final或static修饰">6.方法被final或static修饰</h2>
<p>CGLIB 无法代理 final 方法（不能被重写），JDK 代理也无法处理 static 方法，都会导致事务无法生效。因为 Spring/Spring Boot 是使用 CGLIB 或 JDK 代理实现的。</p>
<h2 id="7多线程中调用事务方法">7.多线程中调用事务方法</h2>
<p>以下代码会导致 @Transactional 失效：</p>
<pre><code class="language-java">@Transactional
public void process() {
    new Thread(() -&gt; {
        dao.update(); // 在子线程中，无事务
    }).start();
}
</code></pre>
<h3 id="原因分析-3">原因分析</h3>
<p>事务是基于线程绑定的（通过 ThreadLocal 存储事务上下文），子线程中调用事务方法时，无法继承父线程的事务上下文。</p>
<h3 id="解决方案-3">解决方案</h3>
<p>使用事务同步或手动管理事务。</p>
<h2 id="小结">小结</h2>
<p>@Transactional 声明式事务底层是通过 CGLIB 或 JDK 代理实现的，所以事务失效的场景多半与二者相关，本文总共介绍了 7 种导致事务失效的场景，您至少要记住其中 4 种以上事务失效场景，这样才能在面试中崭露头角。</p>
<blockquote>
<p>本文已收录到我的面试小站 <a href="https://www.javacn.site" target="_blank" rel="noopener nofollow">www.javacn.site</a>，其中包含的内容有：场景题、SpringAI、SpringAIAlibaba、并发编程、MySQL、Redis、Spring、Spring MVC、Spring Boot、Spring Cloud、MyBatis、JVM、设计模式、消息队列、Dify、Coze、AI常见面试题等。</p>
</blockquote>

</div>
<div id="MySignature" role="contentinfo">
    <div style="text-align: center; color: red">
关注下面二维码，订阅更多精彩内容。
<br>
<img style="margin-left: 0px" src="https://images.cnblogs.com/cnblogs_com/vipstone/848916/o_211225130402_gognzhonghao.jpg">
</div>

<div style="display: none">
    <img src="http://icdn.apigo.cn/gitchat/rabbitmq.png?imageView2/0/w/500/h/400">
</div>
<div style="margin-bottom: 50px; display: none">

<img title="微信打赏" src="http://icdn.apigo.cn/myinfo/wchat-pay.png" alt="微信打赏">
<br>

<div style="display: none">
<span style="display: block; position: absolute; height: 40px; top: 50%; margin-top: -20px">关注公众号（加好友）：</span>

<img style="margin-left: 144px" src="http://icdn.apigo.cn/gongzhonghao2.png?imageView2/0/w/120/h/120">
</div>
<p></p>

<div id="AllanboltSignature">
    <p style="border-top: #e0e0e0 1px dashed; border-right: #e0e0e0 1px dashed; border-bottom: #e0e0e0 1px dashed; border-left: #e0e0e0 1px dashed; padding-top: 10px; padding-right: 10px; padding-bottom: 10px; padding-left: 60px; background: url(&quot;https://images.cnblogs.com/cnblogs_com/lloydsheng/239039/o_copyright.gif&quot;) #e5f1f4 no-repeat 1% 50%; font-family: 微软雅黑; font-size: 11px" id="PSignature">
        <br> 作者：
        <a href="http://vipstone.cnblogs.com/" target="_blank">王磊的博客</a>
        <br> 出处：
        <a href="http://vipstone.cnblogs.com/" target="_blank">http://vipstone.cnblogs.com/</a>
        <br>
    </p>
</div></div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-05 16:56">2025-08-05 16:55</span>&nbsp;
<a href="https://www.cnblogs.com/vipstone">磊哥|www.javacn.site</a>&nbsp;
阅读(<span id="post_view_count">29</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19023587);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19023587', targetLink: 'https://www.cnblogs.com/vipstone/p/19023587', title: '必看！导致事务失效的7大典型场景！' })">举报</a>
</div>
        