
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ofnoname/p/18719460" title="发布于 2025-02-17 10:16">
    <span role="heading" aria-level="2">Johnson 全源负权最短路径算法详解</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><strong>Floyd-Warshall算法</strong>可以求解出图内任意两点的最短路径，适用于稠密图，但时间复杂度为 <span class="math inline">\(O(n³)\)</span>；<strong>Dijkstra算法</strong>求解单源最短路径的时间复杂度为 <span class="math inline">\(O(m + n log n)\)</span>，对每个节点都做一次，也可以达成全源最短路径，但是这个方法仅适用于非负权边图。</p>
<p>Johnson 算法被设计来解决此问题，其支持负权边（当然不能有负权环）。综合两个算法的优势，时间复杂度 <span class="math inline">\(O(nm + n² log n)\)</span>，在稀疏图中显著优于 Floyd-Warshall，结合了 Dijkstra 的高效性与 Bellman-Ford 的灵活性。</p>
<h3 id="1-添加虚拟节点">1 添加虚拟节点</h3>
<p>在原始图 <span class="math inline">\(G\)</span> 中添加一个虚拟节点 <span class="math inline">\(s\)</span>，并添加从 <span class="math inline">\(s\)</span> 到所有原节点的边，权重为0。为后续计算势能函数做准备。</p>
<h3 id="2-计算势能函数-">2 计算势能函数 <span class="math inline">\(h(v)\)</span></h3>
<p>使用 <strong>Bellman-Ford / SPFA 算法</strong> 计算从 <span class="math inline">\(s\)</span> 到所有原节点的最短路径，结果记为 <span class="math inline">\(h(v)\)</span>。若检测到负权环，算法终止（此时原图无有效最短路径）。</p>
<h3 id="3-调整边权为非负值">3 调整边权为非负值</h3>
<p>对原图中每条边 <span class="math inline">\((u, v)\)</span>，调整权重为：</p>
<p></p><div class="math display">\[w'(u, v) = w(u, v) + h(u) - h(v)
\]</div><p></p><p>经过这样调整，调整后所有新的边权重 <span class="math inline">\(w'(u, v)\)</span> 均为非负。且满足“原图的最短路同样是新图的最短路”</p>
<h3 id="4-运行dijkstra算法">4 运行Dijkstra算法</h3>
<p>对调整后的图，为每个节点 <span class="math inline">\(u\)</span> 运行一次Dijkstra算法，得到最短路径 <span class="math inline">\(d'(u, v)\)</span>。</p>
<h3 id="5-还原原始最短路径">5 还原原始最短路径</h3>
<p>原始图中 <span class="math inline">\(u\)</span> 到 <span class="math inline">\(v\)</span> 的最短路径为：</p>
<p></p><div class="math display">\[d(u, v) = d'(u, v) - h(u) + h(v)
\]</div><p></p><h2 id="为什么是对的">为什么是对的？</h2>
<h3 id="1-边权调整的非负性">1 边权调整的非负性</h3>
<p><span class="math inline">\(h\)</span> 是虚拟点到节点的距离，根据 Bellman-Ford 的最短路径性质，对任意边 <span class="math inline">\((u, v)\)</span> 有：</p>
<p></p><div class="math display">\[h(v) \leq h(u) + w(u, v)
\]</div><p></p><p>移项得：</p>
<p></p><div class="math display">\[w(u, v) + h(u) - h(v) \geq 0
\]</div><p></p><p>因此，调整后的权重 <span class="math inline">\(w'(u, v)\)</span> 非负，Dijkstra算法可正确运行。</p>
<h3 id="2-最短路径的等价性">2 最短路径的等价性</h3>
<p>设原图中一条路径 <span class="math inline">\(p = v₀ → v₁ → ... → vₖ\)</span> 的权重和为：</p>
<p></p><div class="math display">\[W(p) = \sum_{i=0}^{k-1} w(v_i, v_{i+1})
\]</div><p></p><p>调整后的权重和为：</p>
<p></p><div class="math display">\[W'(p) = \sum_{i=0}^{k-1} [w(v_i, v_{i+1}) + h(v_i) - h(v_{i+1})] = W(p) + h(v₀) - h(v_k)
\]</div><p></p><p>路径上的 <span class="math inline">\(h\)</span> 被抵消，由于 <span class="math inline">\(h(v₀) - h(v_k)\)</span> 是常数，原图与新图上任意对应两个点之间的所有路径都只相差常数，那么原图最短路径仍然是新图最短路径。</p>
<h2 id="时间复杂度分析">时间复杂度分析</h2>
<table>
<thead>
<tr>
<th>步骤</th>
<th>时间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bellman-Ford</td>
<td><span class="math inline">\(O(nm)\)</span></td>
</tr>
<tr>
<td>n 次 Dijkstra</td>
<td><span class="math inline">\(O(n(m + n log n))\)</span></td>
</tr>
<tr>
<td><strong>总时间</strong></td>
<td>$O(nm + n² log n) $</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>适用场景</strong>：稀疏图时，时间接近 <span class="math inline">\(O(n² log n)\)</span>，远优于Floyd-Warshall的 <span class="math inline">\(O(n³)\)</span>。稠密图上差距缩小。</li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.020952629480324073" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-17 10:19">2025-02-17 10:16</span>&nbsp;
<a href="https://www.cnblogs.com/ofnoname">Ofnoname</a>&nbsp;
阅读(<span id="post_view_count">4</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18719460" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18719460);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18719460', targetLink: 'https://www.cnblogs.com/ofnoname/p/18719460', title: 'Johnson 全源负权最短路径算法详解' })">举报</a>
</div>
        