
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/12lisu/p/18939721" title="发布于 2025-06-21 10:30">
    <span role="heading" aria-level="2">这5种规则引擎，真香！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p><strong>核心痛点</strong>：业务规则高频变更与系统稳定性之间的矛盾</p>
<p>想象一个电商促销场景：</p>
<pre><code class="language-java">// 传统硬编码方式（噩梦开始...）
public BigDecimal calculateDiscount(Order order) {
    BigDecimal discount = BigDecimal.ZERO;
    
    if (order.getTotalAmount().compareTo(new BigDecimal("100")) &gt;= 0) {
        discount = discount.add(new BigDecimal("10"));
    }
    
    if (order.getUser().isVip()) {
        discount = discount.add(new BigDecimal("5"));
    }
    
    // 更多if-else嵌套...
    return discount;
}
</code></pre>
<p><strong>当规则变成</strong>："非VIP用户满200减30，VIP用户满150减40，且周二全场额外95折"时，代码将陷入维护地狱！</p>
<p>规则引擎通过<strong>分离规则逻辑</strong>解决这个问题：</p>
<ol>
<li>规则外置存储（数据库/文件）</li>
<li>支持动态加载</li>
<li>声明式规则语法</li>
<li>独立执行环境</li>
</ol>
<p>下面给大家分享5种常用的规则引擎，希望对你会有所帮助。</p>
<h2 id="1五大常用规则引擎">1.五大常用规则引擎</h2>
<h3 id="11-drools企业级规则引擎扛把子">1.1 Drools：企业级规则引擎扛把子</h3>
<p><strong>官网</strong>：<a href="https://www.drools.org/" target="_blank" rel="noopener nofollow">https://www.drools.org/</a></p>
<h4 id="适用场景">适用场景：</h4>
<ul>
<li>金融风控规则（上百条复杂规则）</li>
<li>保险理赔计算</li>
<li>电商促销体系</li>
</ul>
<h4 id="实战折扣规则配置">实战：折扣规则配置</h4>
<pre><code class="language-drl">// 规则文件 discount.drl
rule "VIP用户满100减20"
    when
        $user: User(level == "VIP")
        $order: Order(amount &gt; 100)
    then
        $order.addDiscount(20);
end
</code></pre>
<h4 id="java调用代码">Java调用代码：</h4>
<pre><code class="language-java">KieServices kieServices = KieServices.Factory.get();
KieContainer kContainer = kieServices.getKieClasspathContainer();
KieSession kSession = kContainer.newKieSession("discountSession");

kSession.insert(user);
kSession.insert(order);
kSession.fireAllRules();
</code></pre>
<p><strong>优点</strong>：</p>
<ul>
<li>完整的RETE算法实现</li>
<li>支持复杂的规则网络</li>
<li>完善的监控管理控制台</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>学习曲线陡峭</li>
<li>内存消耗较大</li>
<li>需要依赖Kie容器</li>
</ul>
<blockquote>
<p>适合：不差钱的大厂，规则复杂度高的场景</p>
</blockquote>
<h3 id="12-easy-rules轻量级规则引擎之王">1.2 Easy Rules：轻量级规则引擎之王</h3>
<p><strong>官网</strong>：<a href="https://github.com/j-easy/easy-rules" target="_blank" rel="noopener nofollow">https://github.com/j-easy/easy-rules</a></p>
<h4 id="适用场景-1">适用场景：</h4>
<ul>
<li>参数校验</li>
<li>简单风控规则</li>
<li>审批流引擎</li>
</ul>
<h4 id="注解式开发">注解式开发：</h4>
<pre><code class="language-java">@Rule(name = "雨天打折规则", description = "下雨天全场9折")
public class RainDiscountRule {

    @Condition
    public boolean when(@Fact("weather") String weather) {
        return "rainy".equals(weather);
    }
    
    @Action
    public void then(@Fact("order") Order order) {
        order.setDiscount(0.9);
    }
}
</code></pre>
<h4 id="引擎执行">引擎执行：</h4>
<pre><code class="language-java">RulesEngineParameters params = new RulesEngineParameters()
    .skipOnFirstAppliedRule(true); // 匹配即停止

RulesEngine engine = new DefaultRulesEngine(params);
engine.fire(rules, facts);
</code></pre>
<p><strong>优点</strong>：</p>
<ul>
<li>五分钟上手</li>
<li>零第三方依赖</li>
<li>支持规则组合</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>不支持复杂规则链</li>
<li>缺少可视化界面</li>
</ul>
<blockquote>
<p>适合：中小项目快速落地，开发人员不足时</p>
</blockquote>
<h3 id="13-qlexpress阿里系脚本引擎之光">1.3 QLExpress：阿里系脚本引擎之光</h3>
<p><strong>官网</strong>：<a href="https://github.com/alibaba/QLExpress" target="_blank" rel="noopener nofollow">https://github.com/alibaba/QLExpress</a></p>
<h4 id="适用场景-2">适用场景：</h4>
<ul>
<li>动态配置计算逻辑</li>
<li>财务公式计算</li>
<li>营销规则灵活变更</li>
</ul>
<h4 id="执行动态脚本">执行动态脚本：</h4>
<pre><code class="language-java">ExpressRunner runner = new ExpressRunner();
DefaultContext&lt;String, Object&gt; context = new DefaultContext&lt;&gt;();
context.put("user", user);
context.put("order", order);

String express = "if (user.level == 'VIP') { order.discount = 0.85; }";
runner.execute(express, context, null, true, false);
</code></pre>
<h4 id="高级特性">高级特性：</h4>
<pre><code class="language-java">// 1. 函数扩展
runner.addFunction("计算税费", new Operator() {
    @Override
    public Object execute(Object[] list) {
        return (Double)list[0] * 0.06;
    }
});

// 2. 宏定义
runner.addMacro("是否新用户", "user.regDays &lt; 30");
</code></pre>
<p><strong>优点</strong>：</p>
<ul>
<li>脚本热更新</li>
<li>语法接近Java</li>
<li>完善的沙箱安全</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>调试困难</li>
<li>复杂规则可读性差</li>
</ul>
<blockquote>
<p>适合：需要频繁修改规则的业务（如运营活动）</p>
</blockquote>
<h3 id="14-aviator高性能表达式专家">1.4 Aviator：高性能表达式专家</h3>
<p><strong>官网</strong>：<a href="https://github.com/killme2008/aviatorscript" target="_blank" rel="noopener nofollow">https://github.com/killme2008/aviatorscript</a></p>
<h4 id="适用场景-3">适用场景：</h4>
<ul>
<li>实时定价引擎</li>
<li>风控指标计算</li>
<li>大数据字段加工</li>
</ul>
<h4 id="性能对比执行10万次">性能对比（执行10万次）：</h4>
<pre><code class="language-java">// Aviator 表达式
Expression exp = AviatorEvaluator.compile("user.age &gt; 18 &amp;&amp; order.amount &gt; 100");
exp.execute(map);

// Groovy 脚本
new GroovyShell().evaluate("user.age &gt; 18 &amp;&amp; order.amount &gt; 100"); 
</code></pre>
<table>
<thead>
<tr>
<th>引擎</th>
<th>耗时</th>
</tr>
</thead>
<tbody>
<tr>
<td>Aviator</td>
<td>220ms</td>
</tr>
<tr>
<td>Groovy</td>
<td>1850ms</td>
</tr>
</tbody>
</table>
<h4 id="编译优化">编译优化：</h4>
<pre><code class="language-java">// 开启编译缓存（默认开启）
AviatorEvaluator.getInstance().useLRUExpressionCache(1000);

// 字节码生成模式（JDK8+）
AviatorEvaluator.setOption(Options.ASM, true);
</code></pre>
<p><strong>优点</strong>：</p>
<ul>
<li>性能碾压同类引擎</li>
<li>支持字节码生成</li>
<li>轻量无依赖</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>只支持表达式</li>
<li>不支持流程控制</li>
</ul>
<blockquote>
<p>适合：对性能有极致要求的计算场景</p>
</blockquote>
<h3 id="15-liteflow规则编排新物种">1.5 LiteFlow：规则编排新物种</h3>
<p>官网：<a href="https://liteflow.com/" target="_blank" rel="noopener nofollow">https://liteflow.com/</a></p>
<h4 id="适用场景-4">适用场景：</h4>
<ul>
<li>复杂业务流程</li>
<li>订单状态机</li>
<li>审核工作流</li>
</ul>
<h4 id="编排示例">编排示例：</h4>
<pre><code class="language-xml">&lt;chain name="orderProcess"&gt;
    &lt;then value="checkStock,checkCredit"/&gt; &lt;!-- 并行执行 --&gt;
    &lt;when value="isVipUser"&gt; 
        &lt;then value="vipDiscount"/&gt; 
    &lt;/when&gt;
    &lt;otherwise&gt;
        &lt;then value="normalDiscount"/&gt;
    &lt;/otherwise&gt;
    &lt;then value="saveOrder"/&gt;
&lt;/chain&gt;
</code></pre>
<h4 id="java调用">Java调用：</h4>
<pre><code class="language-java">LiteflowResponse response = FlowExecutor.execute2Resp("orderProcess", order, User.class);
if (response.isSuccess()) {
    System.out.println("流程执行成功");
} else {
    System.out.println("失败原因：" + response.getCause());
}
</code></pre>
<p><strong>优点</strong>：</p>
<ul>
<li>可视化流程编排</li>
<li>支持异步、并行、条件分支</li>
<li>热更新规则</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>新框架文档较少</li>
<li>社区生态待完善</li>
</ul>
<blockquote>
<p>适合：需要灵活编排的复杂业务流</p>
</blockquote>
<h2 id="2-五大规则引擎横向评测">2 五大规则引擎横向评测</h2>
<p><img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2238006/202506/2238006-20250621102942555-1051699645.png" class="lazyload"></p>
<h4 id="性能压测数据单机1万次执行">性能压测数据（单机1万次执行）：</h4>
<table>
<thead>
<tr>
<th>引擎</th>
<th>耗时</th>
<th>内存占用</th>
<th>特点</th>
</tr>
</thead>
<tbody>
<tr>
<td>Drools</td>
<td>420ms</td>
<td>高</td>
<td>功能全面</td>
</tr>
<tr>
<td>Easy Rules</td>
<td>38ms</td>
<td>低</td>
<td>轻量易用</td>
</tr>
<tr>
<td>QLExpress</td>
<td>65ms</td>
<td>中</td>
<td>阿里系脚本引擎</td>
</tr>
<tr>
<td>Aviator</td>
<td>28ms</td>
<td>极低</td>
<td>高性能表达式</td>
</tr>
<tr>
<td>LiteFlow</td>
<td>120ms</td>
<td>中</td>
<td>流程编排专家</td>
</tr>
</tbody>
</table>
<h2 id="3-如何技术选型">3 如何技术选型？</h2>
<p><img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2238006/202506/2238006-20250621102955381-770483942.png" class="lazyload"></p>
<h4 id="黄金法则">黄金法则：</h4>
<ol>
<li><strong>简单场景</strong>：EasyRules + Aviator 组合拳</li>
<li><strong>金融风控</strong>：Drools 稳如老狗</li>
<li><strong>电商运营</strong>：QLExpress 灵活应变</li>
<li><strong>工作流驱动</strong>：LiteFlow 未来可期</li>
</ol>
<h2 id="4-避坑指南">4 避坑指南</h2>
<ol>
<li><strong>Drools内存溢出</strong></li>
</ol>
<pre><code class="language-java">// 设置无状态会话（避免内存积累）
KieSession session = kContainer.newStatelessKieSession();
</code></pre>
<ol start="2">
<li><strong>QLExpress安全漏洞</strong></li>
</ol>
<pre><code class="language-java">// 禁用危险方法
runner.addFunctionOfServiceMethod("exit", System.class, "exit", null, null);
</code></pre>
<ol start="3">
<li><strong>规则冲突检测</strong></li>
</ol>
<pre><code class="language-java">// Drools冲突处理策略
KieSessionConfiguration config = KieServices.Factory.get().newKieSessionConfiguration();
config.setProperty("drools.sequential", "true"); // 按顺序执行
</code></pre>
<h2 id="总结">总结</h2>
<ol>
<li><strong>能用</strong>：替换if/else（新手村）</li>
<li><strong>用好</strong>：规则热更新+可视化（进阶）</li>
<li><strong>用精</strong>：规则编排+性能优化（大师级）</li>
</ol>
<p>曾有人问我：“规则引擎会不会让程序员失业？” 我的回答是：<strong>“工具永远淘汰不了思考者，只会淘汰手工作坊”</strong>。</p>
<p>真正的高手，不是写更多代码，而是用更优雅的方式解决问题。</p>
<blockquote>
<p><strong>技术选型没有最好的，只有最合适的</strong>。</p>
</blockquote>
<h2 id="最后说一句求关注别白嫖我">最后说一句(求关注，别白嫖我)</h2>
<p>如果这篇文章对您有所帮助，或者有所启发的话，帮忙关注一下我的同名公众号：苏三说技术，您的支持是我坚持写作最大的动力。</p>
<p>求一键三连：点赞、转发、在看。</p>
<p>关注公众号：【苏三说技术】，在公众号中回复：进大厂，可以免费获取我最近整理的10万字的面试宝典，好多小伙伴靠这个宝典拿到了多家大厂的offer。</p>
<p>本文收录于我的技术网站：<a href="http://www.susan.net.cn" target="_blank" rel="noopener nofollow">http://www.susan.net.cn</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-21 10:30">2025-06-21 10:30</span>&nbsp;
<a href="https://www.cnblogs.com/12lisu">苏三说技术</a>&nbsp;
阅读(<span id="post_view_count">186</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18939721);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18939721', targetLink: 'https://www.cnblogs.com/12lisu/p/18939721', title: '这5种规则引擎，真香！' })">举报</a>
</div>
        