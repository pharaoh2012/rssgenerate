
	<div class="postTitle">
		<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/dalgleish/p/18946148" title="发布于 2025-06-24 14:36">
    <span role="heading" aria-level="2">03 - LayoutPanels例子 - TextBox</span>
    

</a>

	</div>
	<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>C# Maui暂时还没有TextBox，因为这个可以通过xaml样式实现，但是为了长期使用，自己写一个TextBox。</p>
<p><strong>定义一个TextEventArgs</strong></p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;"> public class TextEventArgs : EventArgs
 {
     public string Text{ get; set; }
     public TextEventArgs(string text)
     {
         Text = text;
     }
 }
</pre>
</div>
<p><strong>PropertyManager和之前的例子一样，这里就不重复了。除非更新了新功能。</strong></p>
<p><strong>我的MauiProgram.cs中添加了自定义字体，这个在第一个MAUI 配置中说了，以后也不再重复了。自己去https://www.iconfont.cn/注册账号，添加自己喜欢的字体icon，然后下载下来覆盖项目中的IconFont.ttf</strong></p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">                    fonts.AddFont("IconFont.ttf", "IconFont");
</pre>
</div>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/702851/202506/702851-20250624143042351-1530895216.png" class="lazyload"></p>
<p><strong>&nbsp;TextBox继承Border，以后所有自定义控件都继承于Border，不要用Frame了，因为这个在将来的未来会被淘汰。现在Border可以实现所有功能。</strong></p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">    public class TextBox : Border
    {
        public static readonly BindableProperty TextProperty = BindableProperty.Create(
            nameof(Text), typeof(string), typeof(TextBox), null,
            BindingMode.TwoWay, propertyChanged: OnTextChanged);
        public static readonly BindableProperty IsPasswordProperty = BindableProperty.Create(
            nameof(IsPassword), typeof(bool), typeof(TextBox), false);
        public static readonly BindableProperty IsMultilineProperty = BindableProperty.Create(
            nameof(IsMultiline), typeof(bool), typeof(TextBox), false);
        public static readonly BindableProperty PlaceholderProperty = BindableProperty.Create(
            nameof(Placeholder), typeof(string), typeof(TextBox), null);
        public static readonly BindableProperty TextColorProperty = BindableProperty.Create(
            nameof(TextColor), typeof(Color), typeof(TextBox), Colors.Black);
        public static readonly BindableProperty TextSizeProperty = BindableProperty.Create(
            nameof(TextSize), typeof(double), typeof(TextBox), 15d);
        public static readonly BindableProperty IsReadOnlyProperty = BindableProperty.Create(
            nameof(IsReadOnly), typeof(bool), typeof(TextBox), false,
            propertyChanged: OnIsReadOnlyChanged);
        public static readonly BindableProperty CharacterSpacingProperty = BindableProperty.Create(
            nameof(CharacterSpacing), typeof(double), typeof(TextBox), 0d);
        public static readonly BindableProperty CornerRadiusProperty =
            BindableProperty.Create(nameof(CornerRadius), typeof(double), typeof(TextBox), 0d,
                propertyChanged: PropertyManager.CornerRadiusProperty);
        public static readonly BindableProperty IconTextProperty =
            BindableProperty.Create(nameof(IconText), typeof(string), typeof(TextBox), null);
        public static readonly BindableProperty IconTextColorProperty =
            BindableProperty.Create(nameof(IconTextColor), typeof(Color), typeof(TextBox), Colors.Gray);
        public static readonly BindableProperty IconTextFontSizeProperty =
                  BindableProperty.Create(nameof(IconTextFontSize), typeof(double), typeof(TextBox), 22d);
        public static readonly BindableProperty IconFontFamilyProperty =
            BindableProperty.Create(nameof(IconFontFamily), typeof(string), typeof(TextBox), "IconFont");

        public event EventHandler&lt;TextEventArgs&gt;? ReturnPressed, EditingFinished;

        public string Text
        {
            get =&gt; (string)GetValue(TextProperty);
            set =&gt; SetValue(TextProperty, value);
        }
        public bool IsPassword
        {
            get =&gt; (bool)GetValue(IsPasswordProperty);
            set =&gt; SetValue(IsPasswordProperty, value);
        }
        public bool IsMultiline
        {
            get =&gt; (bool)GetValue(IsMultilineProperty);
            set =&gt; SetValue(IsMultilineProperty, value);
        }
        public string Placeholder
        {
            get =&gt; (string)GetValue(PlaceholderProperty);
            set =&gt; SetValue(PlaceholderProperty, value);
        }
        public Color TextColor
        {
            get =&gt; (Color)GetValue(TextColorProperty);
            set =&gt; SetValue(TextColorProperty, value);
        }
        public double TextSize
        {
            get =&gt; (double)GetValue(TextSizeProperty);
            set =&gt; SetValue(TextSizeProperty, value);
        }
        public bool IsReadOnly
        {
            get =&gt; (bool)GetValue(IsReadOnlyProperty);
            set =&gt; SetValue(IsReadOnlyProperty, value);
        }
        public double CharacterSpacing
        {
            get =&gt; (double)GetValue(CharacterSpacingProperty);
            set =&gt; SetValue(CharacterSpacingProperty, value);
        }
        public double CornerRadius
        {
            get =&gt; (double)GetValue(CornerRadiusProperty);
            set =&gt; SetValue(CornerRadiusProperty, value);
        }
        public string IconText
        {
            get =&gt; (string)GetValue(IconTextProperty);
            set =&gt; SetValue(IconTextProperty, value);
        }
        public Color IconTextColor
        {
            get =&gt; (Color)GetValue(IconTextColorProperty);
            set =&gt; SetValue(IconTextColorProperty, value);
        }
        public double IconTextFontSize
        {
            get =&gt; (double)GetValue(IconTextFontSizeProperty);
            set =&gt; SetValue(IconTextFontSizeProperty, value);
        }
        public string IconFontFamily
        {
            get =&gt; (string)GetValue(IconFontFamilyProperty);
            set =&gt; SetValue(IconFontFamilyProperty, value);
        }
        private static void OnTextChanged(BindableObject bindable, object oldValue, object newValue)
        {
            var tb = (TextBox)bindable;
            var newText = newValue as string ?? string.Empty;
            var oldText = oldValue as string ?? string.Empty;
            if (newText.Length &gt; oldText.Length &amp;&amp; tb.IsMultiline)
            {
                var addText = newText.Substring(oldText.Length);
                if (addText.Contains('\r') || addText.Contains('\n'))
                {
                    //如果是回车换行，则触发ReturnPressed事件，安全派发到UI线程
                    tb.Dispatcher.Dispatch(() =&gt; tb.ReturnPressed?.Invoke(tb, new TextEventArgs(newText)));
                }
            }
        }
        //动态更新IsReadOnly属性
        private static void OnIsReadOnlyChanged(BindableObject bindable, object oldValue, object newValue)
        {
            var tb = (TextBox)bindable;
            if (tb.grid.Children.Count == 0)
                return;
            if (tb.grid.Children[0] is InputView view)
            {
                view.IsReadOnly = (bool)newValue;
                view.Background = (bool)newValue ? Colors.WhiteSmoke : Colors.Transparent;
            }
        }

        private Grid grid;
        public TextBox()
        {
            grid = new Grid() 
            { 
                ColumnDefinitions = new ColumnDefinitionCollection
                {
                    new ColumnDefinition { Width = GridLength.Star },
                    new ColumnDefinition { Width = GridLength.Auto }
                },
            };
            // 设置布局
            this.Content = grid;
            this.StrokeThickness = 1;
            this.Stroke = Colors.LightGray;
            this.StrokeShape = new RoundRectangle() { CornerRadius = CornerRadius };
            this.Padding = new Thickness(0);
            //重载OnHandlerChanged中也可以初始化，构造函数会先于属性设置执行
            //Dispatcher.Dispatch(Init)也可以初始化
            this.Loaded += Init; 
        }

        private void Init(object? sender, EventArgs e)
        {
            //凡是设置了propertyChanged的属性，都需要在这里手动初始化，因为Dispatcher.Dispatch/Loaded会在propertyChanged之后执行
            InputView edit = IsMultiline ?
                new Editor()
                {
                    Margin = new Thickness(0),
                    AutoSize = EditorAutoSizeOption.TextChanges,
                    VerticalTextAlignment = TextAlignment.Start,
                } :
                new Entry()
                {
                    Margin = new Thickness(0),
                    VerticalTextAlignment = TextAlignment.Start,           
                };
            edit.IsReadOnly = IsReadOnly;
            edit.Background = IsReadOnly ? Colors.WhiteSmoke : Colors.Transparent;
            grid.Children.Add(edit);
            edit.SetBinding(InputView.TextProperty, new Binding(nameof(Text), mode: BindingMode.TwoWay, source: this));
            edit.SetBinding(InputView.PlaceholderProperty, new Binding(nameof(Placeholder), mode: BindingMode.TwoWay, source: this));
            edit.SetBinding(InputView.TextColorProperty, new Binding(nameof(TextColor), mode: BindingMode.TwoWay, source: this));
            edit.SetBinding(InputView.FontSizeProperty, new Binding(nameof(TextSize), mode: BindingMode.TwoWay, source: this));
            edit.SetBinding(InputView.CharacterSpacingProperty, new Binding(nameof(CharacterSpacing), mode: BindingMode.TwoWay, source: this));
            if (edit is Entry entry)
            {
                edit.SetBinding(Entry.IsPasswordProperty, new Binding(nameof(IsPassword), mode: BindingMode.TwoWay, source: this));
                entry.Completed += (s, e) =&gt;
                {
                    ReturnPressed?.Invoke(this, new TextEventArgs(edit.Text));
                    edit.Unfocus();
                };
            }
            edit.Unfocused += (s, e) =&gt;
            {
                EditingFinished?.Invoke(this, new TextEventArgs(edit.Text));
            };
            if (IsPassword)
            {
                Label icon = new Label()
                {
                    Text = IconText,
                    FontFamily = IconFontFamily,
                    FontSize = IconTextFontSize,
                    TextColor = IconTextColor,
                    VerticalTextAlignment = TextAlignment.Center,
                    Margin = new Thickness(10, 0),
                };
                grid.Children.Add(icon);
                Grid.SetColumn(icon, 1);
                icon.SetBinding(Label.TextProperty, new Binding(nameof(IconText), mode: BindingMode.TwoWay, source: this));
                icon.SetBinding(Label.TextColorProperty, new Binding(nameof(IconTextColor), mode: BindingMode.TwoWay, source: this));
                icon.SetBinding(Label.FontSizeProperty, new Binding(nameof(IconTextFontSize), mode: BindingMode.TwoWay, source: this));
                icon.SetBinding(Label.FontFamilyProperty, new Binding(nameof(IconFontFamily), mode: BindingMode.TwoWay, source: this));
                TapGestureRecognizer tapGesture = new TapGestureRecognizer();
                tapGesture.Tapped += OnTapped;
                icon.GestureRecognizers.Add(tapGesture);
            }
        }

        private void OnTapped(object? sender, TappedEventArgs e)
        {
            Grid? grid = (sender as Label)?.Parent as Grid;
            if (grid == null)
                return;
            if (grid.Children[0] is Entry entry)
            {
                entry.IsPassword = !entry.IsPassword;
            }
        }
    }　</pre>
</div>
<p><strong>TextBox.xaml (前面的例子已经说明了如何把自定义控件，加到默认命名空间，以后也不再重复了)</strong></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">&lt;?</span><span style="color: rgba(255, 0, 255, 1)">xml version="1.0" encoding="utf-8" </span><span style="color: rgba(0, 0, 255, 1)">?&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">ContentPage </span><span style="color: rgba(255, 0, 0, 1)">xmlns</span><span style="color: rgba(0, 0, 255, 1)">="http://schemas.microsoft.com/dotnet/2021/maui"</span><span style="color: rgba(255, 0, 0, 1)">
             xmlns:x</span><span style="color: rgba(0, 0, 255, 1)">="http://schemas.microsoft.com/winfx/2009/xaml"</span><span style="color: rgba(255, 0, 0, 1)">
             x:Class</span><span style="color: rgba(0, 0, 255, 1)">="MauiViews.MauiDemos.Book._03.TextBox"</span><span style="color: rgba(255, 0, 0, 1)">
             Title</span><span style="color: rgba(0, 0, 255, 1)">="TextBox"</span><span style="color: rgba(255, 0, 0, 1)"> HeightRequest</span><span style="color: rgba(0, 0, 255, 1)">="400"</span><span style="color: rgba(255, 0, 0, 1)"> WidthRequest</span><span style="color: rgba(0, 0, 255, 1)">="300"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">Grid </span><span style="color: rgba(255, 0, 0, 1)">RowDefinitions</span><span style="color: rgba(0, 0, 255, 1)">="auto,auto,auto, *"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">TextBox </span><span style="color: rgba(255, 0, 0, 1)">Placeholder</span><span style="color: rgba(0, 0, 255, 1)">="单行输入-只读"</span><span style="color: rgba(255, 0, 0, 1)"> CornerRadius</span><span style="color: rgba(0, 0, 255, 1)">="15"</span><span style="color: rgba(255, 0, 0, 1)"> IsReadOnly</span><span style="color: rgba(0, 0, 255, 1)">="True"</span><span style="color: rgba(0, 0, 255, 1)">/&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">TextBox </span><span style="color: rgba(255, 0, 0, 1)">Grid.Row</span><span style="color: rgba(0, 0, 255, 1)">="1"</span><span style="color: rgba(255, 0, 0, 1)"> Placeholder</span><span style="color: rgba(0, 0, 255, 1)">="单行输入"</span><span style="color: rgba(255, 0, 0, 1)"> ReturnPressed</span><span style="color: rgba(0, 0, 255, 1)">="TextBox_ReturnPressed"</span><span style="color: rgba(255, 0, 0, 1)"> CornerRadius</span><span style="color: rgba(0, 0, 255, 1)">="15"</span><span style="color: rgba(0, 0, 255, 1)">/&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">TextBox </span><span style="color: rgba(255, 0, 0, 1)">Grid.Row</span><span style="color: rgba(0, 0, 255, 1)">="2"</span><span style="color: rgba(255, 0, 0, 1)"> Placeholder</span><span style="color: rgba(0, 0, 255, 1)">="密码输入"</span><span style="color: rgba(255, 0, 0, 1)"> IsPassword</span><span style="color: rgba(0, 0, 255, 1)">="True"</span><span style="color: rgba(255, 0, 0, 1)"> ReturnPressed</span><span style="color: rgba(0, 0, 255, 1)">="TextBox_ReturnPressed"</span><span style="color: rgba(255, 0, 0, 1)"> 
                 IconText</span><span style="color: rgba(0, 0, 255, 1)">="&amp;#xe615;"</span><span style="color: rgba(0, 0, 255, 1)">/&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">TextBox </span><span style="color: rgba(255, 0, 0, 1)">Grid.Row</span><span style="color: rgba(0, 0, 255, 1)">="3"</span><span style="color: rgba(255, 0, 0, 1)"> Placeholder</span><span style="color: rgba(0, 0, 255, 1)">="多行输入"</span><span style="color: rgba(255, 0, 0, 1)"> IsMultiline</span><span style="color: rgba(0, 0, 255, 1)">="True"</span><span style="color: rgba(255, 0, 0, 1)"> ReturnPressed</span><span style="color: rgba(0, 0, 255, 1)">="TextBox_ReturnPressed"</span><span style="color: rgba(0, 0, 255, 1)">/&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">Grid</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">ContentPage</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre>
</div>
<p><strong>对应的cs代码</strong></p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">using Shares.Utility;
using System.Diagnostics;

namespace MauiViews.MauiDemos.Book._03;

public partial class TextBox : ContentPage
{
	public TextBox()
	{
		InitializeComponent();
	}

    private void TextBox_ReturnPressed(object? sender, TextEventArgs e)
    {
		Trace.WriteLine($"TextBox_ReturnPressed: {e.Text}");
    }
}
</pre>
</div>
<p><strong>运行效果</strong></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/702851/202506/702851-20250624143528839-1529257620.png" class="lazyload"></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

	<div class="postDesc">posted on 
<span id="post-date" data-last-update-days="0.008333333333333333" data-date-updated="2025-06-24 14:48">2025-06-24 14:36</span>&nbsp;
<a href="https://www.cnblogs.com/dalgleish">dalgleish</a>&nbsp;
阅读(<span id="post_view_count">19</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18946148);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18946148', targetLink: 'https://www.cnblogs.com/dalgleish/p/18946148', title: '03 - LayoutPanels例子 - TextBox' })">举报</a>
</div>
