
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/huangqingshi/p/18929621" title="发布于 2025-06-15 15:30">
    <span role="heading" aria-level="2">基于Spring AI服务，开发MCP服务</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>　　大家好，好久没有写博客了，最近突然想写一些新的东西，如何开发mcp服务，本地如何调试。</p>
<p><strong><span style="font-family: 宋体">一、项目概述</span></strong></p>
<p class="19">　　Spring AI MCP Demo 是一个基于 Spring 生态的多模块应用工程，主要围绕 AI 功能集成与服务通信展开，采用分层架构设计，包含客户端与服务端组件，支持标准 I/O 交互与服务器推送等多种通信模式。项目根目录位于 spring-ai-mcp-demo-master&nbsp;<span style="font-family: Cambria">，整体遵循</span> Maven 项目规范，通过模块化设计实现功能解耦。</p>
<h2><strong><span style="font-family: 宋体">二、模块结构与职责</span></strong></h2>
<h3><strong>　　1. <span style="font-family: 宋体">核心模块划分</span></strong></h3>
<p class="19">　　项目包含三个子模块，各自承担不同角色：</p>
<ul>
<li>spring-ai-mcp-client ：客户端模块，负责与服务端通信，集成 AI 功能调用能力，包含请求封装与响应处理逻辑。</li>
<li>spring-ai-mcp-sse-server ：SSE (Server-Sent Events) 服务端模块，通过 HTTP 长连接实现服务器向客户端的单向实时数据推送，适用于实时通知、数据流传输场景 spring-ai-mcp-sse-server&nbsp;<span style="font-family: Cambria">。</span></li>
<li>spring-ai-mcp-stdio-server ：标准 I/O 服务端模块，处理命令行输入输出交互，支持通过控制台与外部系统进行数据交换 spring-ai-mcp-stdio-server&nbsp;<span style="font-family: Cambria">。</span></li>
</ul>
<h3><strong>　　2. <span style="font-family: 宋体">模块间关系</span></strong></h3>
<p class="19"><span style="font-family: Cambria">　　客户端模块（</span>client）可分别与 SSE 服务端、STDIO 服务端通信，服务端模块间通过 MCP（Module Communication Protocol）协议实现内部交互，形成"多客户端-多服务端"的分布式通信架构。</p>
<h2><strong><span style="font-family: 宋体">三、技术栈详解</span></strong></h2>
<h3><strong>1. <span style="font-family: 宋体">核心框架与语言</span></strong></h3>
<ul>
<li>Java ：主要开发语言，版本兼容 JDK 11/17（历史编译错误显示曾尝试使用 JDK 21 导致不兼容，需根据本地环境调整）。</li>
<li>Spring Boot ：基础框架，提供自动配置、依赖注入、嵌入式服务器等核心能力，简化应用开发与部署。</li>
<li>Spring AI ：AI 功能集成框架，项目命名中包含"spring-ai"，推测用于对接 AI 模型 API（如 OpenAI、本地大模型等），实现自然语言处理、数据分析等 AI 能力。</li>
<li>SSE (Server-Sent Events) ：由 sse-server 模块实现，基于 HTTP 协议的服务器推送技术，支持文本数据的单向流式传输，适用于实时天气更新、通知推送等场景。</li>
<li>MCP 协议 ：项目特有的模块通信协议，用于规范客户端与服务端、服务端之间的消息格式与交互流程，确保跨模块通信的一致性。</li>
<li><span style="font-family: Cambria">响应式编程</span> <span style="font-family: Cambria">：集成</span> Reactor Core 库，通过 Mono/Flux 实现异步非阻塞数据流处理，提升高并发场景下的系统响应性能（历史超时异常涉及 reactor-core 的 Mono 操作）。</li>
<li>Maven ：项目构建与依赖管理工具，通过各模块下的 pom.xml&nbsp;<span style="font-family: Cambria">文件声明依赖关系，支持打包为可执行</span> JAR（如 stdio-server 模块生成的 spring-ai-mcp-stdio-server.jar）。</li>
<li>Windows 环境 ：开发与运行环境为 Windows 系统，需注意文件路径格式（如使用反斜杠""）与环境变量配置（如 JAVA_HOME）。</li>
</ul>
<h3><strong>2. <span style="font-family: 宋体">通信与架构</span></strong></h3>
<h3><strong>3. <span style="font-family: 宋体">构建与部署</span></strong></h3>
<h2><strong><span style="font-family: 宋体">四、</span>JDK <span style="font-family: 宋体">版本配置</span></strong></h2>
<h3><strong>　　1. <span style="font-family: 宋体">版本兼容问题</span></strong></h3>
<p class="19"><span style="font-family: Cambria">项目曾出现</span>"无效的目标发行版: 21"的 Maven 编译错误，原因是 stdio-server 模块的 pom.xml 中指定的 Java 版本与本地环境不匹配。解决方案为：</p>
<ul>
<li><span style="font-family: Cambria">修改</span> pom.xml 中的 Java 版本属性，适配本地已安装的 JDK（推荐 JDK 17 或 21）：</li>
</ul>
<p class="18" style="margin-left: 30px"> &nbsp;&lt;properties&gt;<br>&nbsp;&nbsp;&lt;maven.compiler.source&gt;17&lt;/maven.<br>&nbsp;&nbsp;compiler.source&gt;<br>&nbsp;&nbsp;&lt;maven.compiler.target&gt;17&lt;/maven.<br>&nbsp;&nbsp;compiler.target&gt;<br>&lt;/properties&gt;</p>
<h3><strong>2. <span style="font-family: 宋体">环境验证步骤</span></strong></h3>
<ol>
<li><span style="font-family: Cambria">检查本地</span> JDK 版本：在命令行执行 java -version ，确认输出版本与 pom.xml 配置一致。</li>
<li><span style="font-family: Cambria">验证</span> JAVA_HOME 环境变量：确保指向正确的 JDK 安装路径（如 D:\Program Files\Java\jdk-17.0.1 ）。</li>
<li><span style="font-family: Cambria">清理</span> Maven 缓存：执行 mvn clean install 重新构建，避免旧编译产物干扰。</li>



</ol>
<h2><strong><span style="font-family: 宋体">五、调试与问题排查</span></strong></h2>
<h3><strong>1. 本地调试</strong></h3>
<p>　　1.&nbsp;&nbsp;启动本地的工程：spring-ai-mcp-sse-server,&nbsp;spring-ai-mcp-stdio-server<strong><span style="font-family: 宋体"><br></span></strong></p>
<p>　　2. 在trae或cline的MCP服务添加本地配置文件到mcp.json</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">{
  </span>"mcpServers"<span style="color: rgba(0, 0, 0, 1)">: {
    </span>"addOrMinus-service"<span style="color: rgba(0, 0, 0, 1)">: {
      </span>"disabled": <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">,
      </span>"timeout": 30<span style="color: rgba(0, 0, 0, 1)">,
      </span>"type": "stdio"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"command": "java"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"args"<span style="color: rgba(0, 0, 0, 1)">: [
        </span>"-jar"<span style="color: rgba(0, 0, 0, 1)">,
        </span>"D:/mcp/spring-ai-mcp-demo-master/spring-ai-mcp-stdio-server/target/spring-ai-mcp-stdio-server.jar"<span style="color: rgba(0, 0, 0, 1)">        
      ],
      </span>"cwd": "D:/mcp/spring-ai-mcp-demo-master/spring-ai-mcp-stdio-server/target"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"env"<span style="color: rgba(0, 0, 0, 1)">: {
        </span>"TIMEZONE": "Asia/Shanghai"<span style="color: rgba(0, 0, 0, 1)">,
        </span>"spring.ai.mcp.server.stdio":"true"<span style="color: rgba(0, 0, 0, 1)">,
        </span>"spring.main.web-application-type":"none"<span style="color: rgba(0, 0, 0, 1)">,
        </span>"spring.main.banner-mode":"off"<span style="color: rgba(0, 0, 0, 1)">
      }
    },
    </span>"querweather-sse-mcp"<span style="color: rgba(0, 0, 0, 1)">: {
      </span>"url": "http://localhost:9090/sse"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"transportType": "sse"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"autoApproval": <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">,
      </span>"requireManualConfirmation": <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">
    }
  }
}</span></pre>
</div>
<p>　　</p>
<p><img src="https://img2024.cnblogs.com/blog/1236784/202506/1236784-20250615152901331-1635464628.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1236784/202506/1236784-20250615152911283-2075380833.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>　　3. 然后就可以在trae的对话框问问题了，比如，北京的天气如何</p>
<p><img src="https://img2024.cnblogs.com/blog/1236784/202506/1236784-20250615152924397-1647011254.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><strong><span style="font-family: 宋体">六、总结</span></strong></p>
<p class="19">Spring AI MCP Demo 工程通过 Spring Boot + Spring AI 构建了一套灵活的 AI 服务通信框架，结合 SSE 实时推送与标准 I/O 交互，满足多样化的业务场景需求。开发过程中需重点关注 JDK 版本兼容性、服务通信超时、端口冲突等常见问题，通过日志分析与配置调优保障系统稳定运行。后续可扩展更多 AI 功能模块，或集成服务发现、配置中心等中间件，进一步提升系统的可扩展性与可维护性。</p>
<p>七、源码地址：</p>
<p>　　可以下载：https://gitee.com/luckshi/spring-ai-mcp-demo-master.git</p>
<p>　　　　</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.011111111111111112" data-date-updated="2025-06-15 15:46">2025-06-15 15:30</span>&nbsp;
<a href="https://www.cnblogs.com/huangqingshi">黄青石</a>&nbsp;
阅读(<span id="post_view_count">36</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18929621);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18929621', targetLink: 'https://www.cnblogs.com/huangqingshi/p/18929621', title: '基于Spring AI服务，开发MCP服务' })">举报</a>
</div>
        