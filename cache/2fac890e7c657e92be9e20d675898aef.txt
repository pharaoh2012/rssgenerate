
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/AstralNahida/p/18847804" title="发布于 2025-04-26 15:20">
    <span role="heading" aria-level="2">蒟蒻 AstralNahida 的码风</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        这里是蒟蒻 AstralNahida 在 OI 中的码风。个人认为非常清晰可读，供给大家参考。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>这里是蒟蒻 OIer AstralNahida 在 OI 中的码风的详细介绍。<br>
个人认为码风相当清晰，供给各位参考。</p>
<h2 id="约定">约定</h2>
<p>对于一些表示必要性的关键词，从 <strong>must</strong> 到 <strong>mustn't</strong> 排序如下：</p>
<blockquote>
<p>必须 &gt; 尽量 &gt; 应当 &gt; 建议 &gt; 可以 &gt; 不建议 &gt; 不应当 &gt; 尽量不 &gt; 不得。</p>
</blockquote>
<p>为方便阅读，本文中所有上述关键词都用<strong>粗体字</strong>表示。</p>
<p>另外，若没有<strong>「至少」、「至多」</strong>等词的限定，所有的数字默认为<strong>严格的</strong>。<br>
例如「中间有一个空行」中的「有一个」默认为<strong>「有且仅有一个」</strong>。</p>
<h2 id="第一部--整体">第一部 · 整体</h2>
<p>这里贴一份本人做洛谷 <a href="https://www.luogu.com.cn/problem/P2078" target="_blank" rel="noopener nofollow">P2078</a> 的代码：</p>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;map&gt;

#define upFor(i, a, b) for (int i = a; i &lt;= b; i++)

#define Nahida return 0

std::map&lt;int, int&gt; pa;

int findRt(int x) {
    return x == pa[x] ? x : pa[x] = findRt(pa[x]);
}
void merge(int x, int y) {
    pa[findRt(x)] = findRt(y);
}
bool haveSameRt(int x, int y) {
    return findRt(x) == findRt(y);
}

int main(void) {
    int aVtxNum, bVtxNum, aEdNum, bEdNum;
	std::cin &gt;&gt; aVtxNum &gt;&gt; bVtxNum &gt;&gt; aEdNum &gt;&gt; bEdNum;
	upFor (i, -bVtxNum, aVtxNum) pa[i] = i;
	upFor (i, 1, aEdNum + bEdNum) {
		int u, v;
		std::cin &gt;&gt; u &gt;&gt; v;
		merge(u, v);
	}

	int ansA = 0, ansB = 0;
    upFor (i, 1, aVtxNum)
		if (haveSameRt(pa[i], 1)) ansA++;
	upFor (i, -bVtxNum, -1)
		if (haveSameRt(pa[i], -1)) ansB++;

	std::cout &lt;&lt; std::min(ansA, ansB) &lt;&lt; '\n';

	Nahida;
}
</code></pre>
<p>大概是这样式的。<br>
由此可以看出，我的代码大致分为四个部分：</p>
<ol>
<li><code>#include</code> 部分，用于包含代码所需的头文件；</li>
<li><code>#define</code> 部分，用于进行一些简化代码的宏定义以及自己的一些小癖好（如 Line 6 的 <code>#define Nahida return 0</code>）；</li>
<li>全局变量、常量及函数的声明及定义部分；</li>
<li>主函数部分。</li>
</ol>
<p>这一部只是提供代码的整体观感而已，码风具体规则详见下文。</p>
<h2 id="第二部--头文件包含及宏定义">第二部 · 头文件包含及宏定义</h2>
<h3 id="第一章--头文件">第一章 · 头文件</h3>
<p>对于任意项目，在写代码的时候<strong>不得</strong>使用万能头 <code>&lt;bits/stdc++.h&gt;</code>。除了刷题的时候可以少点时间，其它全是缺点。</p>
<p>对于引用的头文件，C 标准的头文件<strong>应当</strong>使用以 <code>c</code> 为前缀的形式，而非 <code>.h</code> 为后缀的形式。<br>
例如，<code>&lt;string.h&gt;</code> <strong>应当</strong>写成 <code>&lt;cstring&gt;</code>。</p>
<p>对于所有头文件，<strong>建议</strong>将 C 标准的头文件放在一起，后<strong>必须</strong>接一个空行再把 C++ 的头文件包含进来。<br>
另外，也<strong>建议</strong>以头文件的作用将包含的头文件分类，每个类别中间<strong>必须</strong>由一个空行分割。<br>
上述两种分段方式任选其一即可。</p>
<p>另外，<strong>不得</strong>使用 <code>using namespace std;</code>，否则函数名、变量名容易出现冲突。<br>
必要时，<strong>可以</strong>使用 <code>using std::sort;</code> 此类方法，但仍需要确定函数名、变量名不出现冲突。</p>
<hr>
<h3 id="第二章--宏定义">第二章 · 宏定义</h3>
<p>对于任意宏定义，其作用为下列两种的任意一种：1° 简化代码或定义常量；2° 满足自己的小癖好。<br>
如果一份代码中同时出现了这两种宏定义，则需要把两种宏定义分别放在一起，中间<strong>必须</strong>由一个空行分隔。</p>
<h2 id="第三部--缩进及大括号">第三部 · 缩进及大括号</h2>
<h3 id="第一章--缩进">第一章 · 缩进</h3>
<p>缩进<strong>必须</strong>使用 2 空格缩进或者 4 空格缩进，但<strong>不得</strong>混用。<br>
在每一个大括号的内部或者 <code>case</code>、<code>public</code>、<code>private</code> 等的内部，<strong>必须</strong>使用一份缩进。<br>
对于很长的表达式，需要分行来确保可读性、可维护性时，也<strong>必须</strong>使用一份缩进。<br>
任意 <code>#</code> 开头的指令之前<strong>不得</strong>使用缩进，无论它是否在原本需要使用缩进的块内。</p>
<hr>
<h3 id="第二章--大括号">第二章 · 大括号</h3>
<p>大括号的常用风格有以下两种：</p>
<ul>
<li>「通透」风格：</li>
</ul>
<pre><code class="language-cpp">if (1 + 1 == 2)
{
    break;
}
</code></pre>
<ul>
<li>「饱满」风格：</li>
</ul>
<pre><code class="language-cpp">if (1 + 1 == 2) {
    break;
}
</code></pre>
<p><strong>必须</strong>使用这两种中的任意一种，且<strong>不得</strong>混用。<br>
这里更<strong>建议</strong>使用第二种，否则若内部的语句很少，整个代码观感就比较空虚。</p>
<h2 id="第四部--空格及空行">第四部 · 空格及空行</h2>
<h3 id="第一章--空格">第一章 · 空格</h3>
<p><strong>必须</strong>妥善利用空格，否则代码过于紧凑（说难听点，挤成一坨），影响观感和可读性、可维护性。</p>
<p>以下列出的位置<strong>必须</strong>使用一个空格：</p>
<ul>
<li>双目运算符的左右两侧（特殊地，<code>+</code> 和 <code>-</code> 作为正负号时，与后接的表达式之间<strong>不得</strong>使用空格）；</li>
<li>流运算符的左右两侧；</li>
<li><code>if</code> 系列、<code>while</code> 和 <code>do-while</code>、<code>switch</code>、<code>for</code> 和 <code>foreach</code> 等与后接的（或前导的）大括号或小括号之间；</li>
<li>一对大括号在同一行时，左大括号的后面和右大括号的前面；</li>
<li>三目运算符中，<code>?</code> 和 <code>:</code> 的左右两侧；</li>
<li><code>*</code> 表示指针类型时，若后接变量名，与变量名之间；</li>
<li><code>#include</code> 与后接的 <code>&lt;&gt;</code> 之间；</li>
<li>使用「饱满」风格的大括号时，左大括号与前导内容之间；</li>
<li><code>,</code> 或 <code>;</code> 与后接的表达式之间；</li>
<li>其它<strong>必须</strong>使用空格的地方。</li>
</ul>
<p>任何<strong>除了作为缩进以外的</strong>地方，都<strong>不得</strong>出现几个空格连用的情况。</p>
<p>以下列出的位置<strong>不得</strong>使用空格：</p>
<ul>
<li><code>::</code>、<code>-&gt;</code>、<code>.</code> 的左右两侧；</li>
<li><code>*</code> 表示指针所引用的内容时，与后接变量名之间；</li>
<li><code>*</code> 表示指针类型时，与前导的类型名之间；</li>
<li>函数名与后接小括号之间；</li>
<li><code>,</code> 或 <code>;</code> 的左侧；</li>
<li>单目运算符与参与运算的表达式之间；</li>
<li><code>+</code> 和 <code>-</code> 作为正负号时，与后接的表达式之间；</li>
<li>其它<strong>不得</strong>使用空格的地方。</li>
</ul>
<hr>
<h3 id="第二章--空行">第二章 · 空行</h3>
<p><strong>必须</strong>妥善利用空行，否则代码过于紧凑（说难听点，挤成一坨），影响观感和可读性、可维护性。</p>
<p>在第一部中提到，代码大致分成四个部分，其中每个部分之间<strong>必须</strong>使用一个空行。<br>
在其它的任何位置，<strong>应当</strong>根据代码内容合理地使用一个空行进行分隔，确保代码可读性、可维护性。</p>
<h2 id="第五部--变量常量及函数">第五部 · 变量、常量及函数</h2>
<h3 id="第一章--定义">第一章 · 定义</h3>
<p>若非必要，<strong>尽量不</strong>定义全局变量。<br>
定义常量，<strong>必须</strong>使用 <code>#define</code> 或 <code>const</code> 中的任意一种，<strong>不得</strong>混用。<br>
定义函数时，若函数体不长，<strong>建议</strong>在主函数之前声明并定义；若函数体很长，<strong>应当</strong>在主函数之前声明，在主函数之后定义。</p>
<hr>
<h3 id="第二章--命名">第二章 · 命名</h3>
<p>命名<strong>尽量不</strong>过长，否则使用没有自动补全的编辑器时容易累死，表达式也容易过长，影响观感和可读性、可维护性。<br>
同时，命名<strong>不得</strong>使用过于简单、没有意义的名字，<strong>尽量</strong>在命名中体现出该函数的作用。题目所给出的变量名除外。<br>
需要注意的是，<strong>过于简单、没有意义</strong>的核心是没有意义，若单个字母有明显意义的，不算作不规范命名，如 <code>for</code> 中的 <code>i</code>、表示顶点的 <code>u</code>、<code>v</code> 等。<br>
当然，变量较多时，确实<strong>不建议</strong>使用单个字母命名。</p>
<h2 id="后记">后记</h2>
<p>差不多就是这样了。我这里给出的码风规范其实是相对宽松的，有很多自由的空间。<br>
若有需要补充的地方，欢迎大家指出！</p>
<p>有些小萌新可能会问，码风真的有这么重要吗？<br>
当然有的。上面我也提到了不少次，养成好的码风究其根本是为了保证代码的可读性和可维护性，同时保证代码美观。<br>
好的码风对于 OIer 来说无疑是极其重要的，正所谓「码如其人」，如果你是一个有追求的 OIer，那么你应当拥有一个整洁、统一的码风。<br>
当然，如果你决定将来做程序设计工作，你也应当养成好的码风，否则项目迟早被写成屎山。</p>
<p>好啦，就到这里吧，祝各位热爱自己的 OI 生涯。</p>
<h2 id="更新记录">更新记录</h2>
<ul>
<li><strong>2025/4/26 14:09</strong> 本文正式告成，发布。</li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.36783690992939816" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-26 15:28">2025-04-26 15:20</span>&nbsp;
<a href="https://www.cnblogs.com/AstralNahida">AstralNahida</a>&nbsp;
阅读(<span id="post_view_count">80</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18847804);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18847804', targetLink: 'https://www.cnblogs.com/AstralNahida/p/18847804', title: '蒟蒻 AstralNahida 的码风' })">举报</a>
</div>
        