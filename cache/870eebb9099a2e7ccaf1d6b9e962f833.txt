
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/linx/p/18832123" title="发布于 2025-04-18 09:18">
    <span role="heading" aria-level="2">Web前端入门第 37 问：多图细说 CSS grid 网格布局（二）子元素相关属性</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>学习本文之前，建议先学习上一篇了解父元素的相关属性。</p>
<p>前文对 grid 网格布局中父元素容器相关的 CSS 属性做了详细介绍，本篇将继续学习子元素相关的 CSS 属性。</p>
<p>网格布局的一大波样式属性，父元素占据了大半江山，子元素嘛相对就少了一些~~</p>
<p>本文中的中的示例基础代码：</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;div class="item"&gt;A&lt;/div&gt;
  &lt;div class="item"&gt;B&lt;/div&gt;
  &lt;div class="item"&gt;C&lt;/div&gt;
  &lt;div class="item"&gt;D&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  .box {
    margin: 20px 0;
    width: 400px;
    height: 280px;
    border: 2px solid #ff4757;
    display: grid;
  }
  .box .item {
    border: 2px solid rgba(0,255,0,1);
  }
&lt;/style&gt; 
</code></pre>
<h2 id="子元素相关的-css-属性">子元素相关的 CSS 属性</h2>
<p><code>grid-column-start</code> 控制子元素列从哪根线开始。<br>
<code>grid-column-end</code> 控制子元素列在哪条网格线结束。<br>
<code>grid-column</code>  简写属性 grid-column-start 、 grid-column-end。<br>
<code>grid-row-start</code>  控制子元素行从哪根线开始。<br>
<code>grid-row-end</code>  控制子元素行在哪条网格线结束。<br>
<code>grid-row</code>  简写属性 grid-row-start 、 grid-row-end。<br>
<code>grid-area</code>  指定子元素属于哪个命名区域或简写位置。<br>
<code>justify-self</code>  覆盖容器的 justify-items，控制单个子元素的行对齐。<br>
<code>align-self</code>  覆盖容器的 align-items，控制单个子元素的列对齐。<br>
<code>order</code>  调整子元素的显示顺序（类似 Flexbox）。<br>
<code>z-index</code>  控制子元素的层叠顺序。</p>
<h3 id="设置子元素列的开始位置和结束位置">设置子元素列的开始位置和结束位置</h3>
<p><code>grid-column-start</code> 用于设置子元素列的开始位置，从哪条网格线开始<br>
<code>grid-column-end</code> 用于设置子元素列的结束位置，在哪条网格线结束</p>
<p><strong>以 grid-column-start 为例：</strong></p>
<pre><code class="language-css">grid-column-start: auto; /* 默认值，自动分配 */
grid-column-start: 4; /* 从第 4 根线开始 */
grid-column-start: span 2; /* 定义跨两列 */
grid-column-start: some-grid-area; /* 从命名区域 some-grid-area 开始 */
grid-column-start: span some-grid-area; /* 未知的渲染方式 */
grid-column-start: span some-grid-area 3; /* 未知的渲染方式 */
</code></pre>
<p>使用数字和关键字 span 示例：</p>
<pre><code class="language-css">.box {
  /* 设置网格五行五列 */
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(5, 1fr);
}
.box .item:nth-child(1) {
  /* 第一个子元素从第 4 根线开始 */
  grid-column-start: B;
}
.box .item:nth-child(2) {
  /* 第二个子元素跨两列 */
  grid-column-start: span 2;
}
</code></pre>
<p>注意看右侧网格线，由于第二个子元素要占用两列，网格放不下了，所以从第二行开始。显示效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250418091718909-1401000272.png" alt="" loading="lazy"></p>
<p>使用命名区域设置子元素开始位置：</p>
<pre><code class="language-css">.box {
  grid-template-areas: 
    "A1 A1 F2 G3 G3"
    "A1 A1 F2 B4 B4"
    "C5 C5 C5 C5 C5"
    "D6 D6 D6 D6 D6"
    "E7 E7 E7 E7 E7";
}
.box .item:nth-child(1) {
  grid-column-start: F2; /* 从 F2 开始 */
}
.box .item:nth-child(2) {
  grid-column-start: span G3; /* 无效 */
}
.box .item:nth-child(3) {
  grid-column-start: span D6 4; /* 无效 */
}
</code></pre>
<p><strong>重点：</strong>不知道是我姿势不对，还是 MDN 文档有问题， <code>grid-column-start: span G3;</code> 和 <code>grid-column-start: span D6 4;</code> 两种写法浏览器解析了，没报无效值，但是实际没啥效果~~头大....</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250418091728650-1595635585.png" alt="" loading="lazy"></p>
<p>不过 MDN 上找到这么一个例子：</p>
<pre><code class="language-css">.box {
  grid-template-columns: repeat(6, [col1-start] 1fr [col2-start] 3fr);
}
.item:nth-child(1) {
  grid-column: col1-start / col2-start 2;
}
.item:nth-child(2) {
  grid-row: 2;
  grid-column: col1-start 2 / span 2 col1-start;
}
</code></pre>
<p>实际使用是正常可以显示的，那么 <code>grid-column-start: span D6 4;</code> 这种写法应该是用于重复的命名行线，而不是命名区域。</p>
<p><strong>同时设置列起始和结束位置：</strong></p>
<p>grid-column-end 与 grid-column-start 写法一样。</p>
<p>使用数字比较好理解：</p>
<pre><code class="language-css">.box {
  /* 设置网格五行五列 */
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(5, 1fr);
}
.box .item:nth-child(1) {
  /* 从第 2 根线开始，结束在第 4 根线结束 */
  grid-column-start: 2;
  grid-column-end: 4;
}
.box .item:nth-child(2) {
  /* 从第 2 根线开始，横跨四列 */
  grid-column-start: 2;
  grid-column-end: span 4;
}
</code></pre>
<p>显示效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250418091734837-1976089400.png" alt="" loading="lazy"></p>
<p>使用命名区域设置时候又出幺蛾子了，感觉命名区域设置就不能带上 <code>span</code> 关键字~~</p>
<pre><code class="language-css">.box {
  grid-template-areas: 
    "A1 A1 F2 G3 G4"
    "A1 A1 F2 B4 B4"
    "C5 C5 C5 C5 C5"
    "D6 D6 D6 D6 D6"
    "E7 E7 E7 E7 E7";
}
.box .item:nth-child(1) {
  /*  从 F2 开始，在 G3 结束 */
  grid-column-start: F2;
  grid-column-end: G3;
}
.box .item:nth-child(2) {
  /* 嘿~不好意思，无效，span 只能跟数字，其他值都无效，还会导致网格多一列 */
  grid-column-start: F2;
  grid-column-end: span G3;
}
.box .item:nth-child(3) {
  /* 也不是说此方法无效，它在表格后面多绘制了 10 列，无语了.... */
  grid-column-start: F2;
  grid-column-end: span G3 10;
}
</code></pre>
<p>看效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250418091740594-157337213.png" alt="" loading="lazy"></p>
<p><code>grid-column-end: span G3 10;</code> 这种写法你说他无效吧，它在网格后面多绘制了 10 列，你说有效吧，又没办法理解浏览器的绘制方式。</p>
<p>按照 MDN 的说法，还支持 <code>grid-column-end: 10 G3 span;</code> 这种写法，实际效果与上面一样，还是给网格多绘制了 10 列。</p>
<p>但如果使用 <code>grid-template-columns: repeat(5, 1fr);</code> 控制了网格列数，那么就不会多绘制那么多列了，但也无法理解他的绘制方式。</p>
<p><strong>可能跟上面一样，用于重复的命名行线，而不是命名区域。</strong></p>
<h3 id="设置子元素行的开始位置和结束位置">设置子元素行的开始位置和结束位置</h3>
<p><code>grid-row-start</code> 用于设置子元素行的开始位置，从哪条网格线开始<br>
<code>grid-row-end</code> 用于设置子元素行的结束位置，在哪条网格线结束</p>
<p>设置行的两个属性与设置列的属性一样，使用 <code>命名区域</code> 有 span 关键字时设置行起始和结束位置还是会出幺蛾子，就不再一一演示。</p>
<p>看能理解的示例：</p>
<pre><code class="language-css">.box {
  grid-template-areas: 
    "A1 A1 F2 G3 G4"
    "A1 A1 F2 B4 B4"
    "C5 C5 C5 C5 C5"
    "D6 D6 D6 D6 D6"
    "E7 E7 E7 E7 E7";
}
.box .item:nth-child(1) {
  grid-column-start: 1;
  grid-column-end: 3;
  grid-row-start: 1;
  grid-row-end: 3;
}
.box .item:nth-child(2) {
  grid-column-start: 2;
  grid-column-end: span 2;
  grid-row-start: 2;
  grid-row-end: span 2;
}
.box .item:nth-child(3) {
  grid-column-start: F2;
  grid-column-end: G3;
  grid-row-start: G3;
  grid-row-end: B4;
}
</code></pre>
<p>显示效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250418091749748-512133620.png" alt="" loading="lazy"></p>
<h3 id="行列的简写属性">行列的简写属性</h3>
<p>使用 <code>grid-column</code> 和 <code>grid-row</code> 可简写列和行的开始结束位置。毕竟一次写四个属性太麻烦了，只写两个就省了一半。</p>
<pre><code class="language-css">.box {
  grid-template-areas: 
    "A1 A1 F2 G3 G4"
    "A1 A1 F2 B4 B4"
    "C5 C5 C5 C5 C5"
    "D6 D6 D6 D6 D6"
    "E7 E7 E7 E7 E7";
}
.box .item:nth-child(1) {
  grid-column: 1 / 3;
  grid-row: 1 / 3;
}
.box .item:nth-child(2) {
    grid-column: 2 / span 2;
    grid-row: 3 / span 2;
}
.box .item:nth-child(3) {
  grid-column: span 3 / 2; /* 表示此单元格跨 3 列，在第二根网格线结束 */
  grid-row: 3 / span 2; /* 表示此单元格行从第三根网格线开始，跨 2 行 */
}
.box .item:nth-child(4) {
  grid-column: F2 / G3;
  grid-row: G3 / B4;
}
</code></pre>
<p>显示效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250418091757959-1755514838.png" alt="" loading="lazy"></p>
<p>设置位置时，可使用负数，表示倒数，比如：<code>grid-column: -1 / span 2;</code> 表示从倒数第一根网格线开始，跨 2 列。</p>
<h3 id="使用命名行线">使用命名行线</h3>
<p>虽然个人觉得这种用法有点难理解，但浏览器是支持这种写法的，可以不用，但不能不会，对不~</p>
<pre><code class="language-css">.box {
  grid-template:
    [header-left] "head head" 30px [header-right]
    [main-left] "nav  main" 1fr [main-right]
    [footer-left] "nav  foot" 30px [footer-right]
    / 120px 1fr;
}
.box .item:nth-child(1) {
  grid-row: header-left / footer-left;
}
</code></pre>
<p>显示效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250418091803044-1937319188.png" alt="" loading="lazy"></p>
<h3 id="使用-grid-area-插旗">使用 grid-area 插旗</h3>
<p>前文介绍过 <code>grid-template-areas</code> 用于划分地盘，子元素就使用 <code>grid-area</code> 来插旗，指定子元素在哪块地盘。</p>
<p>看看经典的管理系统结构：</p>
<pre><code class="language-css">.box {
  grid-template-areas: 
    "header header header"
    "left main right"
    "footer footer footer";
  grid-template-columns: 10% 1fr 10%;
  grid-template-rows: 30px 1fr 40px;
}
.box .item:nth-child(1) {
  grid-area: header;
}
.box .item:nth-child(2) {
  grid-area: left;
}
.box .item:nth-child(3) {
  grid-area: main;
}
.box .item:nth-child(4) {
  grid-area: right;
}
.box .item:nth-child(5) {
  grid-area: footer;
}
</code></pre>
<p>显示效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250418091808487-1366040830.png" alt="" loading="lazy"></p>
<h3 id="覆盖父元素的对齐方式">覆盖父元素的对齐方式</h3>
<p><code>justify-self</code> 和 <code>align-self</code> 可用于覆盖父元素设置的对齐方式(justify-items / align-items)。某个子元素想要特立独行的时候，就可以派上用场了。</p>
<pre><code class="language-css">.box {
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(4, 1fr);
  align-items: center;
  justify-items: center;
}
.box .item {
  width: 40px;
  height: 40px;
}
.box .item:nth-child(2) {
  align-self: flex-start;
}
.box .item:nth-child(3) {
  justify-self: flex-end;
}
</code></pre>
<p>显示效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250418091813366-1274172173.png" alt="" loading="lazy"></p>
<h3 id="调整子元素顺序">调整子元素顺序</h3>
<p>接上例中的代码，直接添加 <code>order</code> 属性可调整子元素顺序。</p>
<p>排序规则：越小值则越靠前，默认值为 0。</p>
<pre><code class="language-css">.box .item:nth-child(1) {
  order: 3; /* 第一个子元素排第三位 */
}
.box .item:nth-child(2) {
  order: 2; /* 第二个子元素排第二位 */
}
.box .item:nth-child(3) {
  order: 1; /* 第三个子元素排第一位 */
}
.box .item:nth-child(4) {
  order: 4; /* 第四个子元素排第四位 */
}
.box .item:nth-child(5) {
  order: 5; /* 第五个子元素排第五位 */
}
</code></pre>
<p>显示效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250418091818425-1894973084.png" alt="" loading="lazy"></p>
<h3 id="控制子元素的层叠顺序">控制子元素的层叠顺序</h3>
<p>当网格布局中两个子元素叠在一起显示时候，这会可拿出 <code>z-index</code> 属性控制子元素层叠顺序，想谁在上面谁就在上面。</p>
<p>规则：谁的 z-index 值大谁就在上面。</p>
<pre><code class="language-css">.box .item:nth-child(1) {
  grid-column: 1 / span 2;
  grid-row: 1 / span 2;
  background-color: red;
}
.box .item:nth-child(2) {
  grid-column: 2 / span 2;
  grid-row: 1 / span 2;
  background-color: yellow;
}

/* 控制第二个 box 中的第一个子元素在上面 */
.box:nth-child(2) .item:nth-child(1) {
  z-index: 2;
}
</code></pre>
<p>以上代码由于 grid-row 值相同，所以两个子元素会叠在一起，然后使用 z-index 控制了第二个盒子的第一个子元素。</p>
<p>显示效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250418091824490-314267350.png" alt="" loading="lazy"></p>
<h2 id="总结">总结</h2>
<p>网格布局这一壶终于喝完了，它包含的内容太多太广了，要熟练使用还需要多加练习才行，后续文章还会更新弹性盒子与网格布局的对比，以及它俩的应用场景，敬请期待。</p>
<p>2023 版本的 CSS 规范还提出了子网格 <code>Subgrid</code> 概念，如需了解更多请参阅后文中的参考资料链接。</p>
<p>参考资料：<br>
<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid" target="_blank" rel="noopener nofollow">https://developer.mozilla.org/en-US/docs/Web/CSS/grid</a><br>
<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Subgrid" target="_blank" rel="noopener nofollow">https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Subgrid</a></p>

</div>
<div id="MySignature" role="contentinfo">
    <p>&nbsp;</p>
<p style="font-size: 18px;font-weight: bold;"><span style="color:rgb(255, 71, 87)">文章正在持续更新中...</span>，首发微信公众号【<span style="color:rgb(255, 71, 87)">前端路引</span>】，欢迎关注公众号获取最新文章。</p>
<p>
  <img style="max-width: 320px;" src="https://images.cnblogs.com/cnblogs_com/linx/2447020/o_250228035031_%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png">
</p>
<p>本文来自博客园，作者：<a href="https://www.cnblogs.com/linx/" target="_blank">前端路引</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/linx/p/18832123" target="_blank">https://www.cnblogs.com/linx/p/18832123</a></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.3743197444699074" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-18 09:19">2025-04-18 09:18</span>&nbsp;
<a href="https://www.cnblogs.com/linx">前端路引</a>&nbsp;
Views(<span id="post_view_count">11</span>)&nbsp;
Comments(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18832123);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18832123', targetLink: 'https://www.cnblogs.com/linx/p/18832123', title: 'Web前端入门第 37 问：多图细说 CSS grid 网格布局（二）子元素相关属性' })">举报</a>
</div>
	