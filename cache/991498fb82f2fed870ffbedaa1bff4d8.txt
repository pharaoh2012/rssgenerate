
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/liwen01/p/18859913" title="发布于 2025-05-12 08:39">
    <span role="heading" aria-level="2">蓝牙基础(二)：蓝牙核心系统架构</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p data-tool="mdnice编辑器"><strong>liwen01 2025.05.01</strong></p>
<h2 data-tool="mdnice编辑器">前言</h2>
<p data-tool="mdnice编辑器"><strong>Bluetooth core system architecture</strong></p>
<div><strong><img src="https://img2024.cnblogs.com/blog/555985/202505/555985-20250505095247625-308760183.png" style="display: block; margin-left: auto; margin-right: auto"></strong></div>
<p data-tool="mdnice编辑器">查看蓝牙核心规范文档，都会看到一个复杂的核心系统架构图，蓝牙核心系统架构图概括了蓝牙的基本工作原理。</p>
<p data-tool="mdnice编辑器">对于初学者，初看这图，不可避免有点令人望而却步，这未免太过于晦涩？</p>
<p data-tool="mdnice编辑器">本文我们将尝试对它进行拆开分解，以便于能更好地理解蓝牙的基本工作原理。</p>
<h2 data-tool="mdnice编辑器">(一) Host、Controller 与 HCI</h2>
<div><img src="https://img2024.cnblogs.com/blog/555985/202505/555985-20250505101641248-853700731.png" style="display: block; margin-left: auto; margin-right: auto"></div>
<p data-tool="mdnice编辑器">在《<a href="https://mp.weixin.qq.com/s?__biz=Mzg5ODg0MDM5Nw==&amp;mid=2247487935&amp;idx=1&amp;sn=ea0052f89e72592bf812f5bc7702e9df&amp;scene=21#wechat_redirect" rel="noopener nofollow" target="_blank" data-itemshowtype="0" data-linktype="2">蓝牙基础(一)：蓝牙协议栈与硬件架构方案</a>》中我们有介绍单模与双模蓝牙。其实不管是单模还是双模蓝牙，它们的协议栈都是采用了<strong>分层架构</strong>的设计。</p>
<p data-tool="mdnice编辑器"><strong>蓝牙分层架构</strong>涉及的核心结构是：</p>
<ul class="list-paddingleft-1">
<li><strong>Host（主机）</strong></li>
<li><strong>Controller（控制器）</strong></li>
<li><strong>HCI（Host Controller Interface，主机控制器接口）</strong></li>
</ul>
<h3 data-tool="mdnice编辑器">(1) 蓝牙 Host（主机）</h3>
<p data-tool="mdnice编辑器">Host 运行在主处理器上（如 MCU、Linux、Windows 等），主要负责上层协议和应用逻辑。</p>
<h3 data-tool="mdnice编辑器">(2) 蓝牙 Controller（控制器）</h3>
<p data-tool="mdnice编辑器">Controller 通常集成在一个蓝牙芯片中（有时称为 Bluetooth SoC），负责底层无线通信功能。</p>
<h3 data-tool="mdnice编辑器">(3) HCI（Host Controller Interface）</h3>
<p data-tool="mdnice编辑器">HCI 是 Host 和 Controller 之间的&nbsp;<strong>标准接口协议</strong>，它定义了<span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;data-tool&quot;:&quot;mdnice编辑器&quot;,&quot;data-website&quot;:&quot;https://www.mdnice.com&quot;,&quot;style&quot;:&quot;margin-top: 0px;margin-bottom: 0px;margin-left: 0px;margin-right: 0px;padding-top: 0px;padding-bottom: 0px;padding-left: 10px;padding-right: 10px;background-attachment: scroll;background-clip: border-box;background-color: rgba(0, 0, 0, 0);background-image: none;background-origin: padding-box;background-position-x: 0%;background-position-y: 0%;background-repeat: no-repeat;background-size: auto;width: auto;font-family: PingFangSC-regular, sans-serif;font-size: 16px;color: rgb(0, 0, 0);line-height: 1.5em;word-spacing: 0em;letter-spacing: 0em;word-break: break-word;overflow-wrap: break-word;text-align: left;&quot;,&quot;data-pm-slice&quot;:&quot;0 0 []&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;p&quot;,&quot;attributes&quot;:{&quot;data-tool&quot;:&quot;mdnice编辑器&quot;,&quot;style&quot;:&quot;color: rgb(0, 0, 0);font-size: 15px;line-height: 1.8em;letter-spacing: 0em;text-align: left;text-indent: 0em;margin-top: 0px;margin-bottom: 0px;margin-left: 0px;margin-right: 0px;padding-top: 8px;padding-bottom: 8px;padding-left: 0px;padding-right: 0px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">Host 、Controller 两者之间如何交换命令、事件和数据。</span></p>
<p data-tool="mdnice编辑器">常见的通信方式有：UART、USB、SPI、SDIO 等</p>
<h3 data-tool="mdnice编辑器">(4) Host、Controller、HCI 之间的关系</h3>
<div><img src="https://img2024.cnblogs.com/blog/555985/202505/555985-20250505101656786-325710762.png" style="display: block; margin-left: auto; margin-right: auto"></div>
<p data-tool="mdnice编辑器">Host、Controller、HCI 之间的关系、可以简单理解为：</p>
<blockquote>
<p>Host 是&nbsp;<strong>大脑</strong>，Controller 是&nbsp;<strong>身体</strong>，HCI 是它们之间的&nbsp;<strong>通信通道</strong>。</p>
</blockquote>
<p data-tool="mdnice编辑器">在蓝牙鼠标中，插入电脑的那个蓝牙USB适配器是Controller，PC机系统是Host，它们通过USB HCI协议进行通信。</p>
<h2 data-tool="mdnice编辑器">(二) Resource Manager</h2>
<p data-tool="mdnice编辑器">在蓝牙协议栈的层次结构中，HCI 是主机 Host 和控制器 Controller 之间的通信通道。</p>
<p data-tool="mdnice编辑器">这里有语音数据(实时性要求高)，也有数据传输(文件、通知、控制命令等)。</p>
<p data-tool="mdnice编辑器">数据类型主要有：SCO、ACL、C/E 等</p>
<ul class="list-paddingleft-1">
<li><strong>HCI Command Packet</strong>（Host → Controller）</li>
<li><strong>HCI Event Packet</strong>（Controller → Host）</li>
<li><strong>HCI ACL Data Packet</strong>（数据传输）</li>
<li><strong>HCI SCO Packet</strong>（用于语音）</li>
</ul>
<p data-tool="mdnice编辑器">有这么多数据要进行收发控制，那又是谁来做数据收发的<strong>优先级、流量、拥塞</strong>控制呢？</p>
<p data-tool="mdnice编辑器">这就引入了主机的&nbsp;<strong>Resource Manager</strong>（资源管理器）与控制器中的<strong>Baseband Resource Manager</strong>（基带资源管理器）。</p>
<div><img src="https://img2024.cnblogs.com/blog/555985/202505/555985-20250505101716428-1462815823.png" style="display: block; margin-left: auto; margin-right: auto"></div>
<h3 data-tool="mdnice编辑器">(1) &nbsp;Resource Manager （资源管理器）</h3>
<p data-tool="mdnice编辑器">Resource Manager 是蓝牙协议栈中用于整体资源协调与管理的模块，负责在协议栈的不同层之间协调有限的系统资源。</p>
<ul class="list-paddingleft-1">
<li><strong>所在层级</strong>：主机协议栈层（Host）或控制器接口层</li>
<li><strong>管理对象</strong>：高层资源，如连接、内存、协议模块调度</li>
<li><strong>作用范围</strong>：跨模块调度、资源分配、策略控制</li>
<li><strong>典型用途</strong>：多连接管理、Host Controller接口管理、QoS管理</li>
</ul>
<h3 data-tool="mdnice编辑器">(2) &nbsp;Baseband Resource Manager （基带资源管理器）</h3>
<p data-tool="mdnice编辑器">Baseband Resource Manager 是蓝牙控制器中专门用于管理基带层资源的模块。基带是蓝牙协议栈的底层部分，直接控制无线链路的建立与维护。</p>
<ul class="list-paddingleft-1">
<li><strong>所在层级</strong>：控制器内部（Controller）</li>
<li><strong>管理对象</strong>：低层资源，如跳频、时间片、基带硬件</li>
<li><strong>作用范围</strong>：精细控制蓝牙物理层时序与硬件调度</li>
<li><strong>典型用途</strong>：多个基带活动时的时隙调度、链路维持</li>
</ul>
<h3 data-tool="mdnice编辑器">(3) 应用举例</h3>
<p data-tool="mdnice编辑器">假设一个蓝牙设备既要进行语音传输（SCO连接，实时性要求高），又在做数据同步（ACL连接，如文件或通知）。</p>
<p data-tool="mdnice编辑器"><strong>Resource Manager</strong></p>
<ul class="list-paddingleft-1">
<li><strong>从全局角度分配资源</strong>：决定哪些连接可以共存、各自的优先级</li>
<li><strong>管理协议栈内的共享资源</strong>：如内存缓冲区、连接控制块等</li>
<li><strong>做策略级决策</strong>：比如为了语音清晰度，优先保障SCO连接，限制ACL带宽</li>
</ul>
<p data-tool="mdnice编辑器"><strong>Baseband Resource Manager</strong></p>
<ul class="list-paddingleft-1">
<li><strong>负责底层时间调度与频率控制</strong>：在微秒级别分配SCO和ACL的时隙</li>
<li><strong>解决时间冲突</strong>：协调不同连接在物理层的发送/接收时机，避免碰撞</li>
<li><strong>控制基带硬件资源使用</strong>：如跳频、同步窗口、接收缓冲区等</li>
</ul>
<h3 data-tool="mdnice编辑器">(4) C-plane 与 &nbsp;U-plane</h3>
<p data-tool="mdnice编辑器">在蓝牙核心规范中，蓝牙各层次间的数据分为两种：</p>
<ul class="list-paddingleft-1">
<li>C-plane（Control Plane）</li>
<li>U-plane（User Plane）</li>
</ul>
<div><img src="https://img2024.cnblogs.com/blog/555985/202505/555985-20250505101728516-1104477835.png" style="display: block; margin-left: auto; margin-right: auto"></div>
<p data-tool="mdnice编辑器"><strong>C-plane：</strong>&nbsp;主要用于处理蓝牙协议栈中的控制信息，包括设备管理、链路管理、信道控制、流量调度、功率控制、设备发现等。</p>
<p data-tool="mdnice编辑器"><strong>U-plane：</strong>&nbsp;主要用于数据传输，涉及音频、文件传输、串口通信等用户数据流。</p>
<h2 data-tool="mdnice编辑器">(三) L2CAP 、Link Manager 与 Link Manager</h2>
<p data-tool="mdnice编辑器">如果要对数据流进一步细分，就可以看到下图的数据流。白色表示C-plane，红色表示U-plane。</p>
<div><img src="https://img2024.cnblogs.com/blog/555985/202505/555985-20250505101738580-2141872923.png" style="display: block; margin-left: auto; margin-right: auto"></div>
<p data-tool="mdnice编辑器">这就出现了 Link Manager、 Link Controller 与 L2CAP 模块</p>
<h3 data-tool="mdnice编辑器">(1) L2CAP</h3>
<p data-tool="mdnice编辑器">L2CAP（Logical Link Control and Adaptation Protocol,逻辑链路控制与适配协议） 主要起到适配和复用的作用。</p>
<p data-tool="mdnice编辑器">它工作在 Host 层，用于不同高层协议（如 ATT、SDP、RFCOMM）与底层控制器之间的数据传输。</p>
<p data-tool="mdnice编辑器">它的主要功能有：</p>
<p data-tool="mdnice编辑器"><strong>(a) 协议多路复用</strong></p>
<p data-tool="mdnice编辑器">L2CAP 支持多个协议共用一个物理连接（Logical Link Multiplexing）</p>
<p data-tool="mdnice编辑器">比如：ATT 和 SDP 可以在同一连接上传输数据，L2CAP 负责区分这些数据流。</p>
<p data-tool="mdnice编辑器"><strong>(b) 数据分片与重组（Segmentation &amp; Reassembly, SAR）</strong></p>
<p data-tool="mdnice编辑器">蓝牙底层控制器只能处理较小的数据包（如 27字节 MTU）</p>
<p data-tool="mdnice编辑器">L2CAP 允许上层发送大数据（如 512字节），并负责：</p>
<ul class="list-paddingleft-1">
<li><strong>发送端</strong>将其<strong>分片（Segmentation）</strong></li>
<li><strong>接收端</strong>将其<strong>重组（Reassembly）</strong></li>
</ul>
<p data-tool="mdnice编辑器"><strong>(c) 协议适配</strong></p>
<p data-tool="mdnice编辑器">将高层协议的数据适配到底层连接类型，比如：</p>
<ul class="list-paddingleft-1">
<li>基于 ACL（Asynchronous Connection-Less）链路</li>
<li>LE（低功耗蓝牙）使用的是 LE-U（LE-U Logical Link）</li>
</ul>
<p data-tool="mdnice编辑器"><strong>(d) QoS 支持（BR/EDR 模式）</strong></p>
<p data-tool="mdnice编辑器">提供服务质量（Quality of Service）参数（在经典蓝牙中用得多）</p>
<p data-tool="mdnice编辑器">简而言之：L2CAP 就是蓝牙协议栈中的<strong>适配器和路由器</strong>，帮你分发数据、组包、拆包，还能控制多个协议通道共享一条蓝牙连接。</p>
<h3 data-tool="mdnice编辑器">(2) Link Manager（LM，链路管理器）</h3>
<p data-tool="mdnice编辑器">Link Manager 主要负责&nbsp;<strong>蓝牙链路的建立、维护和管理</strong>，它通过&nbsp;<strong>Link Manager Protocol（LMP）</strong>&nbsp;与远程设备的 Link Manager 进行交互，控制链路的状态和特性。</p>
<p data-tool="mdnice编辑器"><strong>LM 主要功能及工作原理</strong>：</p>
<p data-tool="mdnice编辑器">LM 通过&nbsp;<strong>LMP（Link Manager Protocol）</strong>&nbsp;交换控制命令，完成各种蓝牙连接管理任务。</p>
<p data-tool="mdnice编辑器"><strong>（a）连接建立</strong></p>
<ul class="list-paddingleft-1">
<li>设备 A（主机）向设备 B（从机）发送&nbsp;<strong>LMP_connection_request</strong>&nbsp;请求。</li>
<li>设备 B 确认连接，返回&nbsp;<strong>LMP_accepted</strong>，然后进入<strong>Paging（寻呼）过程</strong>完成连接。</li>
<li>如果设备之前配对过，还需要进行<strong>身份认证</strong>（Authentication）。</li>
</ul>
<p data-tool="mdnice编辑器"><strong>（b）身份认证与加密</strong></p>
<ul class="list-paddingleft-1">
<li>设备 A 发送&nbsp;<strong>LMP_authentication_request</strong>&nbsp;进行身份验证。</li>
<li>使用&nbsp;<strong>E1/E3 密钥生成函数</strong>&nbsp;计算认证密钥。</li>
<li>设备 B 返回认证结果（通过或失败）。</li>
<li>如果启用了加密，则使用&nbsp;<strong>E0 加密算法</strong>&nbsp;对数据进行加密。</li>
</ul>
<p data-tool="mdnice编辑器"><strong>（c）角色切换</strong>蓝牙网络支持<strong>主从角色切换</strong>：</p>
<ul class="list-paddingleft-1">
<li>主设备（Master）控制通信时序。</li>
<li>从设备（Slave）按照主设备分配的时隙接收/发送数据。</li>
</ul>
<p data-tool="mdnice编辑器">设备可以通过&nbsp;<strong>LMP_switch_request</strong>&nbsp;请求角色交换。</p>
<p data-tool="mdnice编辑器"><strong>（d）功耗控制</strong>LM 提供了 3 种低功耗模式：</p>
<ul class="list-paddingleft-1">
<li><strong>Hold Mode</strong>：暂停数据传输，但保持连接。</li>
<li><strong>Sniff Mode</strong>：设备在特定时间间隔内监听数据，减少功耗。</li>
<li><strong>Park Mode</strong>：设备释放活动状态，但仍然保持同步。</li>
</ul>
<p data-tool="mdnice编辑器"><strong>（e）SCO/eSCO 链路管理</strong></p>
<p data-tool="mdnice编辑器">LM 负责&nbsp;<strong>SCO（同步连接）</strong>&nbsp;的分配，如蓝牙语音通话（HFP）。 使用&nbsp;<strong>LMP_setup_synchronous_connection</strong>&nbsp;配置 SCO 连接参数</p>
<h3 data-tool="mdnice编辑器">(3) Link Manager（LM，链路管理器）</h3>
<p data-tool="mdnice编辑器">Link Controller（LC）直接与 基带（Baseband） 和 物理层（RF） 交互，负责执行 LM 发送的指令，并处理实际的数据包交换。</p>
<p data-tool="mdnice编辑器"><strong>LC 主要功能及工作原理</strong>：</p>
<p data-tool="mdnice编辑器"><strong>（a）跳频同步</strong></p>
<p data-tool="mdnice编辑器">蓝牙采用&nbsp;<strong>FHSS（跳频扩频）</strong>&nbsp;技术，每 625μs 进行一次跳频，避免干扰。</p>
<p data-tool="mdnice编辑器">LC 负责计算<strong>频率跳变序列</strong>，并确保所有连接设备在相同的频率上进行通信。</p>
<p data-tool="mdnice编辑器"><strong>（b）数据传输</strong></p>
<p data-tool="mdnice编辑器">LC 负责封装数据包，并通过基带层发送到 RF。 支持两种数据链路：</p>
<ul class="list-paddingleft-1">
<li>ACL（异步连接链路）：用于数据传输（如文件传输）。</li>
<li>SCO（同步连接链路）：用于语音数据传输（如蓝牙通话）。</li>
</ul>
<p data-tool="mdnice编辑器"><strong>（c）数据校验</strong></p>
<p data-tool="mdnice编辑器">LC 负责数据包的<strong>错误检测与纠正</strong>，使用：</p>
<ul class="list-paddingleft-1">
<li>CRC（循环冗余校验）：检测数据包是否损坏。</li>
<li>FEC（前向纠错码）：提高数据可靠性。</li>
<li>ARQ（自动重传请求）：如果数据包丢失，则请求重传。</li>
</ul>
<p data-tool="mdnice编辑器"><strong>（d）低功耗模式</strong></p>
<p data-tool="mdnice编辑器">LC 负责执行&nbsp;<strong>LMP</strong>&nbsp;指令，让设备进入&nbsp;<strong>Sniff、Hold 或 Park Mode</strong>，减少能耗.</p>
<h3 data-tool="mdnice编辑器">(4) LM 与 LC 的区别</h3>
<ul class="list-paddingleft-1">
<li><strong>LM 负责高级链路管理</strong>，如身份验证、配对、角色切换。</li>
<li><strong>LC 负责低级数据传输</strong>，如数据封装、跳频、错误校验。</li>
<li>LM 通过&nbsp;<strong>LMP 协议</strong>&nbsp;进行控制，而 LC 依赖&nbsp;<strong>基带协议</strong>&nbsp;完成数据交换。</li>
</ul>
<h2 data-tool="mdnice编辑器">(四) Device Manager 与 GAP</h2>
<div><img src="https://img2024.cnblogs.com/blog/555985/202505/555985-20250505101802094-1542761516.png" style="display: block; margin-left: auto; margin-right: auto"></div>
<h3 data-tool="mdnice编辑器">(1) Device Manager (设备管理)</h3>
<p data-tool="mdnice编辑器">Device Manager 是控制器中的关键控制模块，负责连接控制、配对协助、设备发现等核心操作，是 HCI 与底层链路管理之间的桥梁。</p>
<p data-tool="mdnice编辑器"><strong>Device Manager 的主要功能</strong>（基于 Controller 架构）</p>
<p data-tool="mdnice编辑器"><strong>(a) 管理设备连接（Connection Management）</strong></p>
<ul class="list-paddingleft-1">
<li>处理来自 Host 的连接请求（Connect、Disconnect）</li>
<li>发起连接或接受连接请求</li>
<li>管理多个连接的状态（连接、断开、重新连接）</li>
</ul>
<p data-tool="mdnice编辑器"><strong>(b) 执行蓝牙发现与名称获取流程</strong></p>
<ul class="list-paddingleft-1">
<li>执行&nbsp;<strong>Inquiry（发现）流程</strong>，找到周围的蓝牙设备</li>
<li>执行&nbsp;<strong>Remote Name Request</strong>&nbsp;获取设备名称</li>
<li>把结果通过 HCI 上报给 Host 层（例如 GAP 模块）</li>
</ul>
<p data-tool="mdnice编辑器"><strong>(c) 配对和认证触发控制</strong>虽然安全管理（SMP）主要在 Host 层，但 Controller 层的 Device Manager 负责：</p>
<ul class="list-paddingleft-1">
<li>启动配对流程（Pin Code Request、IO Capability Request）</li>
<li>管理 Link Key（密钥）缓存、保存与恢复</li>
</ul>
<p data-tool="mdnice编辑器">与 Link Manager 协作完成加密启动、身份验证等过程</p>
<p data-tool="mdnice编辑器"><strong>(d) Host 层的接口桥梁（HCI）</strong></p>
<ul class="list-paddingleft-1">
<li>接收 Host 层发来的 HCI 命令（如创建连接、断开连接）</li>
<li>将 Controller 中的事件上报给 Host（如连接完成事件、配对完成事件）</li>
</ul>
<h3 data-tool="mdnice编辑器">(2) GAP（Generic Access Profile 通用访问规范）</h3>
<p data-tool="mdnice编辑器">GAP（Generic Access Profile） 是蓝牙协议栈中的一种<strong>通用访问规范</strong>，它不属于某一个独立的协议，而是定义了蓝牙设备之间如何互相<strong>看到</strong>和<strong>连上</strong>彼此的通用流程和规则。</p>
<p data-tool="mdnice编辑器">GAP 的主要功能有：</p>
<p data-tool="mdnice编辑器"><strong>(a) 设备角色定义</strong></p>
<p data-tool="mdnice编辑器">GAP 定义设备在通信过程中的<strong>4种角色</strong>：</p>
<table>
<thead>
<tr><th>角色</th><th>用途说明</th></tr>
</thead>
<tbody>
<tr>
<td><strong>Broadcaster</strong></td>
<td>主动广播数据，不接受连接（如 iBeacon）</td>
</tr>
<tr>
<td><strong>Observer</strong></td>
<td>被动监听广播，不发起连接</td>
</tr>
<tr>
<td><strong>Peripheral</strong></td>
<td>可被连接设备，广播自身信息</td>
</tr>
<tr>
<td><strong>Central</strong></td>
<td>发起连接的设备（如手机、网关）</td>
</tr>
</tbody>
</table>
<p data-tool="mdnice编辑器">常见工作模式是：Peripheral 与 Central ，比如我们手机与蓝牙耳机。</p>
<p data-tool="mdnice编辑器"><strong>(b) 设备发现（Discovery）</strong></p>
<ul class="list-paddingleft-1">
<li>扫描周围广播（advertising）设备</li>
<li>过滤、解析广播数据（如设备名、UUID、服务）</li>
<li>提供扫描结果给上层应用</li>
</ul>
<p data-tool="mdnice编辑器">GAP 负责调用控制器执行&nbsp;<strong>BLE 扫描命令</strong>，然后通过 HCI 返回扫描结果。</p>
<p data-tool="mdnice编辑器"><strong>(c) 广播与扫描（Advertising &amp; Scanning）</strong></p>
<p data-tool="mdnice编辑器">GAP 控制以下两个重要过程：广播与扫描</p>
<p data-tool="mdnice编辑器">Advertising（广播）</p>
<ul class="list-paddingleft-1">
<li>Peripheral/Broadcaster 发送广播包</li>
<li>GAP 负责配置广播参数，如：广播间隔、内容、类型</li>
</ul>
<p data-tool="mdnice编辑器">Scanning（扫描）</p>
<ul class="list-paddingleft-1">
<li>Central/Observer 接收广播</li>
<li>GAP 负责配置扫描行为，如：扫描窗口、间隔、主动扫描、被动扫描、过滤策略</li>
</ul>
<p data-tool="mdnice编辑器"><strong>(d) 连接管理（Connection Establishment）</strong></p>
<ul class="list-paddingleft-1">
<li>Central 向 Peripheral 发起连接请求（通过 GAP 接口发出连接命令）</li>
<li>GAP 维护连接状态（连接中、已连接、断开）</li>
</ul>
<p data-tool="mdnice编辑器"><strong>GAP 不执行连接过程本身</strong>，而是通过 HCI 让 Controller 中的 Device Manager、Link Manager 去处理。</p>
<p data-tool="mdnice编辑器"><strong>(e) 配对模式与安全级别设置</strong></p>
<ul class="list-paddingleft-1">
<li>决定是否允许配对、是否需要加密</li>
<li>设置 I/O 能力（无输入、数字键盘、显示器等）</li>
<li>选择配对模式（Just Works、Passkey、OOB 等）</li>
<li>GAP 会协同 Security Manager（SMP）工作来完成配对流程</li>
</ul>
<p data-tool="mdnice编辑器"><strong>(f) 本地设备属性管理</strong></p>
<p data-tool="mdnice编辑器">GAP 还提供接口设置和读取本地设备信息：</p>
<ul class="list-paddingleft-1">
<li>本地设备名称（Device Name）</li>
<li>外观（Appearance）</li>
<li>连接参数（Interval、Latency、Timeout）</li>
<li>角色切换、白名单管理等</li>
</ul>
<p data-tool="mdnice编辑器">GAP 是蓝牙通信中的“前台经理”，负责发现设备、建立连接、定义角色、管理广播和扫描行为，是最核心的 Host 层模块之一。</p>
<h2 data-tool="mdnice编辑器">(五) BR/EDR 、BLE 双模架构</h2>
<p data-tool="mdnice编辑器">在上面介绍的蓝牙数据流和蓝牙协议栈模块中，有些属于经典蓝牙模块，有些属于BLE 。</p>
<div><img src="https://img2024.cnblogs.com/blog/555985/202505/555985-20250505101828095-1907772802.png" style="display: block; margin-left: auto; margin-right: auto"></div>
<p data-tool="mdnice编辑器"><strong>(1) 物理层（PHY）</strong></p>
<table>
<thead>
<tr><th>模块</th><th>BR/EDR Controller</th><th>LE Controller</th></tr>
</thead>
<tbody>
<tr>
<td>PHY 类型</td>
<td>BR/EDR Radio（79 个 1MHz 信道）</td>
<td>LE Radio（40 个 2MHz 信道）</td>
</tr>
<tr>
<td>调制方式</td>
<td>GFSK（BR）、π/4-DQPSK（EDR）</td>
<td>GFSK（可选编码，支持远距/低速）</td>
</tr>
</tbody>
</table>
<p data-tool="mdnice编辑器"><strong>(2)Link Controller 与 Link Manager</strong></p>
<table>
<thead>
<tr><th>功能区域</th><th>BR/EDR</th><th>BLE</th></tr>
</thead>
<tbody>
<tr>
<td>Link Controller</td>
<td>处理同步（SCO/eSCO）与异步（ACL）链路</td>
<td>处理 LE 连接和广播/扫描链路</td>
</tr>
<tr>
<td>Link Manager</td>
<td>支持多种链路管理命令（角色切换、加密等）</td>
<td>专为低功耗优化，简化链路管理操作</td>
</tr>
</tbody>
</table>
<p data-tool="mdnice编辑器"><strong>(3) 数据通道的区别</strong></p>
<table>
<thead>
<tr><th>通道类型</th><th>BR/EDR 支持</th><th>BLE 支持</th></tr>
</thead>
<tbody>
<tr>
<td>ACL</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>SCO / eSCO</td>
<td>支持（用于音频）</td>
<td>不支持（用 ISO 替代）</td>
</tr>
<tr>
<td>ISO（ISOC 通道）</td>
<td>不支持（传统协议）</td>
<td>支持（BLE Audio/LE Audio）</td>
</tr>
</tbody>
</table>
<p data-tool="mdnice编辑器"><strong>(4) BLE 中的ISO/AL 模块</strong></p>
<p data-tool="mdnice编辑器">BLE 控制器新增了&nbsp;<strong>ISO/AL（Isochronous Adaptation Layer）</strong>，是&nbsp;<strong>BLE Audio</strong>&nbsp;所必需的：</p>
<ul class="list-paddingleft-1">
<li>提供面向音频的低延迟、可预测传输</li>
<li>支持广播音频（BIS）和连接音频（CIS）</li>
<li>是 5.2 BLE Audio 架构中新引入的专用模块</li>
</ul>
<p data-tool="mdnice编辑器">介绍到这里，再回头看最开头提的&nbsp;<strong>Bluetooth core system architecture</strong>&nbsp;就清晰很多了。</p>
<div><img src="https://img2024.cnblogs.com/blog/555985/202505/555985-20250505101905434-1862800965.png" style="display: block; margin-left: auto; margin-right: auto"></div>
<h2 data-tool="mdnice编辑器">结尾</h2>
<p data-tool="mdnice编辑器">这里主要介绍了蓝牙核心系统架构的各层次结构、数据流、工作原理。下一章将详细介绍蓝牙控制器部分的工作原理。</p>
<p data-tool="mdnice编辑器">&nbsp;</p>
<center data-tool="mdnice编辑器">------------------End------------------</center><center data-tool="mdnice编辑器">如需获取更多内容</center><center data-tool="mdnice编辑器">请关注<span style="color: rgba(0, 0, 255, 1); font-size: large">&nbsp;liwen01&nbsp;</span>公众号</center>
<div>
<div class="appmsg_card_context wx_profile_card wx-root wx_tap_card wx_card_root common-webchat">
<div class="wx_profile_card_inner">
<div class="wx_profile_card_bd">
<div class="wx_profile weui-flex">&nbsp;</div>
</div>
<div id="js_a11y_wx_profile_logo" class="wx_profile_card_ft">&nbsp;</div>
</div>
</div>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.06733027562152778" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-12 14:50">2025-05-12 08:39</span>&nbsp;
<a href="https://www.cnblogs.com/liwen01">liwen01</a>&nbsp;
阅读(<span id="post_view_count">155</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18859913);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18859913', targetLink: 'https://www.cnblogs.com/liwen01/p/18859913', title: '蓝牙基础(二)：蓝牙核心系统架构' })">举报</a>
</div>
        