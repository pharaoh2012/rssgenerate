
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/SkyXZ/p/18636647" title="发布于 2024-12-27 20:15">
    <span role="heading" aria-level="2">2025年了，你还不会配置Jetson Orin NX嘛？</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="2025年了你还不会配置jetson-orin-nx嘛">2025年了，你还不会配置Jetson Orin NX嘛？</h1>
<blockquote>
<p>我的设备为：Jetson Orin NX 16G + JetPack6.1+达妙科技载板</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;帅气的Jetson Orin NX拿到手了，都2025年了你还不会配置嘛？？？让我一篇文章带你不糟蹋这一美丽的艺术品！</p>
<img src="https://img2023.cnblogs.com/blog/3505969/202412/3505969-20241227155714104-1631661409.jpg" alt="bfde984675785deb164ef9e844ccc7e" style="zoom: 10%">
<h3 id="cudacudnntensorrt配置">Cuda、CuDNN、TensorRT配置</h3>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先我们拿出一块刚刚烧录完的崭新板子，具体烧录的教程可以参考我的这一篇博客：<a href="https://www.cnblogs.com/SkyXZ/p/18572123" target="_blank">Jetson Orin NX烧录+设备树更改？看这一篇就够了！ - SkyXZ - 博客园</a>接着我们输入 <kbd>nvcc -V</kbd>会发现终端提示如下：<kbd>bash: nvcc: command not found</kbd>,有些教程会跟你说只要在bashrc中输入环境命令就好了，但是其实你就是没有安装任何的cuda，因为接下来你运行以下的命令会发现根本找不到nvcc！</p>
<pre><code class="language-bash">jetson@ubuntu:/usr/local$ ls -l /usr/local/cuda-12.6/bin/nvcc
ls: cannot access '/usr/local/cuda-12.6/bin/nvcc': No such file or directory
</code></pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了进一步探究我们到底缺少了什么我们可以先安装Jetson-stats来查看我们当前设备的状态，我们输入以下命令</p>
<pre><code class="language-bash">sudo apt install python3-pip
sudo -H pip3 install -U jetson-stats
sudo jtop
</code></pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;等待安装完成之后并输入<kbd>jtop</kbd>之后有以下内容即代表安装完成</p>
<p><img src="https://img2023.cnblogs.com/blog/3505969/202412/3505969-20241227165338268-586644260.png" alt="image-20241227165335611" loading="lazy"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着我们继续输入以下命令便能看到我们当前设备的信息（因为不排除Nvidia的Manager烧录有Bug）</p>
<pre><code class="language-bash">sudo jetson_release   #查看当前的设备的信息
</code></pre>
<p><img src="https://img2023.cnblogs.com/blog/3505969/202412/3505969-20241227161954110-331801551.png" alt="image-20241227161951663" loading="lazy"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;会发现我们的新烧录好的设备里面没有CUDA和TensorRT，那么这时候我们便需要进一步安装JetPack了，JetPack 是 Nvidia为 <a href="https://so.csdn.net/so/search?q=Jetson&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener nofollow">Jetson</a>系列开发板开发的一款软件开发包里面包含了常见的所有工具，并且在安装 JetPack的时候，会自动的帮你匹配所需CUDA、cuDNN、TensorRT等，我们在终端中输入以下命令：</p>
<pre><code class="language-bash">sudo apt update
sudo apt install nvidia-jetpack -y
</code></pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;等个几分钟便能全部安装好，如果下载速度缓慢是网络问题，这个问题自行解决。接着我们继续输入一开始的命令便能发现我们需要的cuda和tensorrt都安装完成了</p>
<pre><code class="language-bash">sudo jetson_release   #查看当前的设备的信息
</code></pre>
<p><img src="https://img2023.cnblogs.com/blog/3505969/202412/3505969-20241227165618303-1628392504.png" alt="image-20241227165615428" loading="lazy"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后我们打开bashrc，把以下内容添加进~/.bashrc即可完成cuda的配置</p>
<pre><code class="language-bash">sudo gedit  ~/.bashrc    #进入bashrc并在最后添加即可
</code></pre>
<pre><code class="language-bash">export CUBA_HOME=/usr/local/cuda
export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
export PATH=/usr/local/cuda/bin:$PATH
</code></pre>
<pre><code class="language-bash">source ~/.bashrc
</code></pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source之后我们再输入nvcc -V会发现CUDA会有输出了</p>
<p><img src="https://img2023.cnblogs.com/blog/3505969/202412/3505969-20241227165904167-1905598352.png" alt="image-20241227165901909" loading="lazy"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着我们需要来处理CuDNN,虽然我们看到我们已经安装了cudNN但是我们还需要将对应的头文件、库文件放到cuda目录，cuDNN的头文件在：/usr/include，库文件位于：/usr/lib/aarch64-linux-gnu，运行以下命令即可：</p>
<pre><code class="language-bash">cd /usr/include &amp;&amp; sudo cp cudnn* /usr/local/cuda/include #复制头文件
cd /usr/lib/aarch64-linux-gnu &amp;&amp; sudo cp libcudnn* /usr/local/cuda/lib64 #复制库文件
# 修改文件权限
sudo chmod 777 /usr/local/cuda/include/cudnn*
sudo chmod 777 /usr/local/cuda/lib64/libcudnn*
</code></pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后我们运行以下命令对cuDNN进行验证</p>
<pre><code class="language-bash">sudo cp -r /usr/src/cudnn_samples_v9/ ~/.
cd ~/cudnn_samples_v9/mnistCUDNN
sudo chmod 777 ~/cudnn_samples_v9
sudo make clean &amp;&amp; sudo make
./mnistCUDNN
</code></pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果出现如下内容即代表安装成功，配置没问题</p>
<p><img src="https://img2023.cnblogs.com/blog/3505969/202412/3505969-20241227171349529-1509808213.png" alt="image-20241227171346500" loading="lazy"></p>
<h3 id="opencv-with-cuda">OpenCV with CUDA</h3>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;还记得我们上面查看板子信息的时候还有一个红色的No嘛，这个代表着我们板子上的OpenCV目前还不支持CUDA 加速，无法充分利用我们Orin NX强大的GPU，接着让我们开始配置这一项</p>
<p><img src="https://img2023.cnblogs.com/blog/3505969/202412/3505969-20241227171557067-777984753.png" alt="image-20241227171554888" loading="lazy"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先我们先卸载默认OpenCV</p>
<pre><code class="language-bash">sudo apt purge libopencv* -y
sudo apt autoremove
sudo apt update
sudo apt upgrade
</code></pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后我们安装我们需要的一些依赖</p>
<ul>
<li>Generic tools</li>
</ul>
<pre><code class="language-bash">sudo apt install build-essential cmake pkg-config unzip yasm git checkinstall 
</code></pre>
<ul>
<li>Image I/O libs</li>
</ul>
<pre><code class="language-bash">sudo apt install libjpeg-dev libpng-dev libtiff-dev 
</code></pre>
<ul>
<li>Video/Audio Libs - FFMPEG, GSTREAMER, x264 and so on</li>
</ul>
<pre><code class="language-bash">sudo apt install libavcodec-dev libavformat-dev libswscale-dev libavresample-dev
sudo apt install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
sudo apt install libxvidcore-dev x264 libx264-dev libfaac-dev libmp3lame-dev libtheora-dev 
sudo apt install libfaac-dev libmp3lame-dev libvorbis-dev
</code></pre>
<ul>
<li>OpenCore - Adaptive Multi Rate Narrow Band(AMRNB) and Wide Band(AMRWB) speech codec</li>
</ul>
<pre><code class="language-bash">sudo apt install libopencore-amrnb-dev libopencore-amrwb-dev
</code></pre>
<ul>
<li>Cameras programming interface libs</li>
</ul>
<pre><code class="language-bash">sudo apt-get install libdc1394-22 libdc1394-22-dev libxine2-dev libv4l-dev v4l-utils
cd /usr/include/linux
sudo ln -s -f ../libv4l1-videodev.h videodev.h
cd ~
</code></pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果系统换源之后提示说<font color="red">E: Unable to locate package libdc1394-25-dev</font>&gt;,那么需要执行以下步骤来启用完整的软件源（包括 <code>universe</code> 和 <code>multiverse</code> 仓库）,完成以下步骤之后即可进行下载了</p>
<pre><code class="language-bash">sudo nano /etc/apt/sources.list
</code></pre>
<pre><code class="language-bash">#将以下内容添加进去之后按 Ctrl + O，然后按 Enter 保存，接着按 Ctrl + X 退出
deb http://ports.ubuntu.com/ubuntu-ports focal main universe multiverse restricted
deb http://ports.ubuntu.com/ubuntu-ports focal-updates main universe multiverse restricted
deb http://ports.ubuntu.com/ubuntu-ports focal-security main universe multiverse restricted
</code></pre>
<pre><code class="language-bash">sudo apt-get update
</code></pre>
<ul>
<li>GTK lib for the graphical user functionalites coming from OpenCV highghui module</li>
</ul>
<pre><code class="language-bash">sudo apt-get install libgtk-3-dev
</code></pre>
<ul>
<li>Python libraries for python3</li>
</ul>
<pre><code class="language-bash">sudo apt-get install python3-dev python3-pip
sudo -H pip3 install -U pip numpy
sudo apt install python3-testresources
</code></pre>
<ul>
<li>Parallelism library C++ for CPU</li>
</ul>
<pre><code class="language-bash">sudo apt-get install libtbb-dev
</code></pre>
<ul>
<li>Optimization libraries for OpenCV</li>
</ul>
<pre><code class="language-bash">sudo apt-get install libatlas-base-dev gfortran
</code></pre>
<ul>
<li>Optional libraries</li>
</ul>
<pre><code class="language-bash">sudo apt-get install libprotobuf-dev protobuf-compiler
sudo apt-get install libgoogle-glog-dev libgflags-dev
sudo apt-get install libgphoto2-dev libeigen3-dev libhdf5-dev doxygen
</code></pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着我们下载OpenCV并解压</p>
<pre><code class="language-bash">cd ~/Downloads  #Cuda12需要较新版本的OpenCV
wget -O opencv.zip https://github.com/opencv/opencv/archive/refs/tags/4.10.0.zip
wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/refs/tags/4.10.0.zip
unzip opencv.zip
unzip opencv_contrib.zip
</code></pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着进行Cmake一下</p>
<pre><code class="language-bash">cd opencv-4.10.0/
mkdir build &amp;&amp; cd build
cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local \
-D BUILD_opencv_python2=1 -D BUILD_opencv_python3=1 -D WITH_FFMPEG=1 \
-D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-12.6 \  #修改为自己的cuda路径
-D WITH_TBB=ON -D ENABLE_FAST_MATH=1 -D CUDA_FAST_MATH=1 -D WITH_CUBLAS=1 \
-D WITH_CUDA=ON -D BUILD_opencv_cudacodec=OFF -D WITH_CUDNN=ON \
-D OPENCV_DNN_CUDA=ON \
-D CUDA_ARCH_BIN=8.7 \
-D WITH_V4L=ON -D WITH_QT=OFF -D WITH_OPENGL=ON -D WITH_GSTREAMER=ON \
-D OPENCV_GENERATE_PKGCONFIG=ON -D OPENCV_PC_FILE_NAME=opencv.pc \
-D OPENCV_ENABLE_NONFREE=ON \
	#修改为自己的opencv_contrib下载路径
-D OPENCV_EXTRA_MODULES_PATH=/home/jetson/Downloads/opencv_contrib-4.10.0/modules \ 
-D INSTALL_PYTHON_EXAMPLES=OFF -D INSTALL_C_EXAMPLES=OFF -D BUILD_EXAMPLES=OFF ..
</code></pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;过程中可能会要下载一些文件，我把这些文件最新的仓库附在下面，便于大家直接下载，然后复制到Downloads/opencv-4.6.0/build/downloads/{对应的文件夹}文件夹没有的可以自己创建</p>
<pre><code class="language-bash">https://github.com/WeChatCV/opencv_3rdparty.git #wechat_qrcode
</code></pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当Cmake完成之后我们往上翻打印输出的Info有如下输出即代表Cmake成功</p>
<p><img src="https://img2023.cnblogs.com/blog/3505969/202412/3505969-20241227183945631-317460149.png" alt="image-20241227183942597" loading="lazy"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着我们开始编译</p>
<pre><code class="language-bash">nproc  #查看设备核心数
make -j$(nproc) #-j4编译时间约为 1~3 小时
sudo make install #安装
</code></pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;编译完成不报错即代表编译完成</p>
<p><img src="https://img2023.cnblogs.com/blog/3505969/202412/3505969-20241227200842295-1852413078.png" alt="image-20241227200839242" loading="lazy"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装过程不报错即为安装完成</p>
<p><img src="https://img2023.cnblogs.com/blog/3505969/202412/3505969-20241227201105919-902005496.png" alt="image-20241227201103187" loading="lazy"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后我们再次执行以下jtop验证以下是否安装完成，出现如下现象则代表成功</p>
<p><img src="https://img2023.cnblogs.com/blog/3505969/202412/3505969-20241227201158230-1417305620.png" alt="image-20241227201155555" loading="lazy"></p>
<p><font color="red">至此我们的安装全部结束啦！！！</font></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.166953585386574" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-27 20:16">2024-12-27 20:15</span>&nbsp;
<a href="https://www.cnblogs.com/SkyXZ">SkyXZ</a>&nbsp;
阅读(<span id="post_view_count">87</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18636647" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18636647);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18636647', targetLink: 'https://www.cnblogs.com/SkyXZ/p/18636647', title: '2025年了，你还不会配置Jetson Orin NX嘛？' })">举报</a>
</div>
        