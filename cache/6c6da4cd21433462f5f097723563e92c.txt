
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/noear/p/18847691" title="发布于 2025-04-26 09:39">
    <span role="heading" aria-level="2">开发 MCP Proxy（代理）也可以用 Solon AI MCP 哟！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        Java AI（智能体） 全场景应用开发框架（LLM，Function Call，RAG，Embedding，Reranking，Flow，MCP Server，Mcp Client，Mcp Proxy）。同时兼容 java8 ~ java24。也是央企信创的优选！
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>MCP 有三种通讯方式：</p>
<table>
<thead>
<tr>
<th>通道</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>stdio</td>
<td>本地进程内通讯</td>
<td>现有</td>
</tr>
<tr>
<td>sse http</td>
<td>远程 http  通讯</td>
<td>现有</td>
</tr>
<tr>
<td>streamable http</td>
<td>远程 http  通讯</td>
<td>（MCP 官方刚通过决定，mcp-java-sdk 还没实现）</td>
</tr>
</tbody>
</table>
<p>也可以按两大类分：</p>
<ul>
<li>本地进程间通讯</li>
<li>远程通讯（比如给前端用，或远程接口用）。</li>
</ul>
<p>目前看，行业内已经积累了大最 stdio mcp-server。而且还有提供代理转换的开源项目，比如：mcpo，mcp-proxy 之类的。如果是 Java，则可以使用 solon-ai-mcp 开发类似的代理。</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.noear&lt;/groupId&gt;
    &lt;artifactId&gt;solon-ai-mcp&lt;/artifactId&gt;
    &lt;version&gt;3.2.1-M3&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>可以借用两种配置方式（也可以手动柜构建）：</p>
<h3 id="1使用经典的-mcpservers-配置格式加载">1、使用经典的 mcpServers 配置格式加载</h3>
<p>这种配置格式，目前 mcp 代理很常用。stdio mcp-server 的各种项目也会提供这种配置。添加示例配置（或者找个 mcp-server 复制下），我们从 gitee 的一个项目上，复制了一份并命名为 <code>mcp/mcpServers.case1.json</code>：</p>
<pre><code class="language-json">{
  "mcpServers": {
    "gitee": {
      "command": "mcp-gitee-ent",
      "env": {
        "GITEE_ENT_API_BASE": "https://api.gitee.com/enterprises",
        "GITEE_ENT_MCP_ACCESS_TOKEN": "&lt;your mcp ent access token&gt;",
      }
    }
  }
}
</code></pre>
<p>solon-ai-mcp 直接提供了解析此配置格式的快捷方法。以下是创建代理服务端示例：</p>
<pre><code class="language-java">@McpServerEndpoint(sseEndpoint = "/mcp/proxy/gitee")
public class McpServerTool implements ToolProvider {
    McpClientToolProvider toolProvider = McpClientToolProvider
                .fromMcpServers("classpath:mcp/mcpServers.case1.json")
                .get("gitee")

    @Override
    public Collection&lt;FunctionTool&gt; getTools() {
        return toolProvider.getTools();
    }
}
</code></pre>
<p>mcpServers 配置是支持多服务配置的，所以解析后会是个Map。在原理上，我们用 McpClientToolProvider 加载了 mcpServers，并作为工具提供给 McpServerEndpoint 输出，形成了代理效果。</p>
<h3 id="2使用-yaml-格式配置加载">2、使用 yaml 格式配置加载</h3>
<p>这个规范需要参考对应 McpClientProperties 实体属性。在 app.yml 配置里添加 mcp-client 配置。</p>
<pre><code class="language-yaml">solon.ai:
  mcp:
    client:
      gitee:  # McpClientProperties 实体属性
        channel: "stdio"
        serverParameters:
          command: "mcp-gitee-ent"
          env: 
            GITEE_ENT_API_BASE: "https://api.gitee.com/enterprises"
            GITEE_ENT_MCP_ACCESS_TOKEN: "&lt;your mcp ent access token&gt;"
      
</code></pre>
<p>创建代理服务端</p>
<pre><code class="language-java">@McpServerEndpoint(sseEndpoint = "/mcp/proxy/gitee")
public class McpServerTool implements ToolProvider {
    @Inject("${solon.ai.mcp.client.gitee}") //通过配置，可直接注入
    McpClientToolProvider toolProvider;  

    @Override
    public Collection&lt;FunctionTool&gt; getTools() {
        return toolProvider.getTools();
    }
}
</code></pre>
<h3 id="3还可以反向代理">3、还可以反向代理</h3>
<p>其实我们还可以把 sse mcp-server 代理成 stdio 的方式输出：</p>
<pre><code class="language-java">@McpServerEndpoint(channel = McpChannel.STDIO)
public class McpServerTool implements ToolProvider {
     McpClientToolProvider sseToolProvider = McpClientToolProvider.builder()
            .apiUrl("http://localhost:8081/mcp/sse")
            .build();

    @Override
    public Collection&lt;FunctionTool&gt; getTools() {
        return toolProvider.getTools();
    }
}
</code></pre>
<p>打包后，就可以通过 mcpServers 配置，被其它工具使用了：</p>
<pre><code class="language-json">{
  "mcpServers": {
    "demo1": {
      "command": "java",
      "args": ["-jar", "/demo-mcp-stdio/target/demo-mcp-stdio.jar"]
    }
  }
}
</code></pre>
<p>如果是 java ，还可以使用 solon-ai-mcp 。示例：</p>
<pre><code class="language-java"> McpClientToolProvider mcpClient = McpClientToolProvider.builder()
                .channel(McpChannel.STDIO) //表示使用 stdio
                .serverParameters(McpServerParameters.builder("java")
                        .args("-jar", "/demo-mcp-stdio/target/demo-mcp-stdio.jar")
                        .build())
                .build();
</code></pre>
<h3 id="4总结">4、总结</h3>
<p>开发 MCP Proxy（代理）也可以用 Solon AI MCP 哟！尤其是 Java 环境，我们同时支持 java8，java11，java17，java21，java24。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.05509111764351852" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-26 09:39">2025-04-26 09:39</span>&nbsp;
<a href="https://www.cnblogs.com/noear">带刺的坐椅</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18847691);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18847691', targetLink: 'https://www.cnblogs.com/noear/p/18847691', title: '开发 MCP Proxy（代理）也可以用 Solon AI MCP 哟！' })">举报</a>
</div>
        