
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Jesuslovesme/p/19045000" title="发布于 2025-08-19 16:26">
    <span role="heading" aria-level="2">通过Canvas在网页中将后端发来的一帧帧图片渲染成“视频”的实现过程</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h2>1.背景</h2>
<p>最近有这样的场景，网页端需要显示现场无人系统（机器人）的摄像头数据（图片）。值得注意的是，一个无人系统（机器人）它身上可能挂载若干个摄像头，这若干个摄像头都需要在前端的若干个小区域内显示；另外不同的用户访问前端网页，每个用户都访问他自己想关注的无人系统（机器人）摄像头数据。而前端直接和现场的无人系统对接是不合适的：因为对于同一个无人系统，可能不同的用户同一时间或相近时间都访问它，导致该无人系统要处理反馈多份资源请求，并且很容易导致超过机器人的处理负荷；另外对于前端来讲，他并不知知道应该和现场的哪一个无人系统进行对接（因为前端并没有现场的无人系统相关身份数据，无法做识别）。</p>
<p>为此，设计了如下方案，现场的无人系统统一和数据中转服务器对接，每个机器人都只给一份实时摄像头数据给数据中转服务器。数据中转服务器建立websocket服务端程序，并处理网页端的请求（请求获取特定机器人的所有摄像头信息），数据中转服务器根据网页端的请求，对请求信息进行解析，并创建特定的websocket服务实例。具体通信示意图如下：</p>
<p><img alt="图片" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1330657/202508/1330657-20250818174931486-515343953.png" class="lazyload"></p>
<p>&nbsp;这里所提到的前端网页，实际是业务中的可视化大屏，他对之前项目的已有功能有些注意点：</p>
<ul>
<li><span style="font-family: 宋体">总控大屏现有对接无人系统的视频使用的是后端发给前端的</span><span style="font-family: Calibri">rtsp</span><span style="font-family: 宋体">流地址，默认使用的是该方式。但后续无人系统（机器人）传输的数据也有可能是一帧帧二进制图片数据</span></li>
<li><span style="font-family: 宋体">原有前端使用的组件适用接收</span><span style="font-family: Calibri">rtsp</span><span style="font-family: 宋体">流方式，不适用新的接收图片帧的方式，前端需要做两套模式区分（区别开发：一套</span><span style="font-family: Calibri">&lt;video&gt;,</span><span style="font-family: 宋体">一套</span><span style="font-family: Calibri">&lt;canvas&gt;</span><span style="font-family: 宋体">）</span></li>
<li><span style="font-family: 宋体">在无人系统（机器人）传输的数据是一帧帧二进制图片数据的情况下，有可能该无人系统有多个摄像头，它会传输多组独立的图片帧数据（前端最多支持</span><span style="font-family: Calibri">4</span><span style="font-family: 宋体">个摄像头数据）</span></li>
</ul>
<h2>2.约定接口</h2>
<p>针对以上内容进行分析，并为了兼容已有实现的功能，约定如下大屏与数据中转器的接口方式：</p>
<p>网页端通过GET请求，调用数据中转服务器接口，请求接口地址为：</p>
<p><span style="font-family: Calibri">http://ip:port/api/usdisplay</span><span style="font-family: Calibri">?usid=2 。其中请求参数<span style="font-family: Calibri">usid</span>代表前端给数据中转服务器(后端)传递的无人系统id.</span></p>
<p>数据中转服务器需要根据<span style="font-family: Calibri">无人系统id，判断该无人系统摄像头数据传递是使用的哪种方式？并根据特定的方式返回前端结果，前端根据不同的模式，执行不同的渲染方式。</span></p>
<p><span style="font-family: Calibri">数据中转服务器（后端）返回前端的结果格式为：</span></p>
<p>&nbsp;</p>
<ul>
<li><span style="font-family: 宋体">以</span><span style="font-family: Calibri">rtsp</span><span style="font-family: 宋体">模式，如果一个无人系统有</span><span style="font-family: Calibri">3</span><span style="font-family: 宋体">个摄像头举例</span></li>
</ul>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 0, 1)">{
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span>     "code": 200<span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)"> 3</span>     "success": <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)"> 4</span>     "data"<span style="color: rgba(0, 0, 0, 1)">: {
</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>         "mode": "rtspurl"<span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span>         "url"<span style="color: rgba(0, 0, 0, 1)">: [
</span><span style="color: rgba(0, 128, 128, 1)"> 7</span>             "rtsp: //127.0.0.1:8081"<span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>             "rtsp: //127.0.0.1:8082"<span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)"> 9</span>             "rtsp: //127.0.0.1:8083"
<span style="color: rgba(0, 128, 128, 1)">10</span> <span style="color: rgba(0, 0, 0, 1)">        ]
</span><span style="color: rgba(0, 128, 128, 1)">11</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">12</span> }</pre>
</div>
<ul>
<li><span style="font-family: 宋体">以</span><span style="font-family: Calibri">websocket</span><span style="font-family: 宋体">模式，如果一个无人系统有</span><span style="font-family: Calibri">3</span><span style="font-family: 宋体">个摄像头举例</span></li>
</ul>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">{
    </span>"code": 200<span style="color: rgba(0, 0, 0, 1)">,
    </span>"success": <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">,
    </span>"data"<span style="color: rgba(0, 0, 0, 1)">: {
        </span>"mode": "websocketurl"<span style="color: rgba(0, 0, 0, 1)">,
        </span>"url"<span style="color: rgba(0, 0, 0, 1)">: [
            </span>"ws://127.0.0.1:8080/api/websocket?usid=2&amp;cam=0"<span style="color: rgba(0, 0, 0, 1)">,
            </span>"ws://127.0.0.1:8080/api/websocket?usid=2&amp;cam=1"<span style="color: rgba(0, 0, 0, 1)">,
            </span>"ws://127.0.0.1:8080/api/websocket?usid=2&amp;cam=2"<span style="color: rgba(0, 0, 0, 1)">,
        ]
    }
}</span></pre>
</div>
<h2>&nbsp;3.前端开发过程</h2>
<h3>3.1 div结构设计</h3>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span>     <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">div </span><span style="color: rgba(255, 0, 0, 1)">class</span><span style="color: rgba(0, 0, 255, 1)">="chartarea"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 2</span>             <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">div </span><span style="color: rgba(255, 0, 0, 1)">class</span><span style="color: rgba(0, 0, 255, 1)">="charttitle"</span><span style="color: rgba(0, 0, 255, 1)">&gt;&lt;</span><span style="color: rgba(128, 0, 0, 1)">span</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>态势总览<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">span</span><span style="color: rgba(0, 0, 255, 1)">&gt;&lt;/</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 3</span>             <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">div </span><span style="color: rgba(255, 0, 0, 1)">class</span><span style="color: rgba(0, 0, 255, 1)">="chartdata"</span><span style="color: rgba(255, 0, 0, 1)"> id</span><span style="color: rgba(0, 0, 255, 1)">="videoGrid"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 4</span>               <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> 四个视频区域 </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 5</span>               <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">div </span><span style="color: rgba(255, 0, 0, 1)">class</span><span style="color: rgba(0, 0, 255, 1)">="video-container"</span><span style="color: rgba(255, 0, 0, 1)"> data-camera</span><span style="color: rgba(0, 0, 255, 1)">="1"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 6</span>                 <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">video </span><span style="color: rgba(255, 0, 0, 1)">class</span><span style="color: rgba(0, 0, 255, 1)">="video-stream"</span><span style="color: rgba(255, 0, 0, 1)"> autoplay muted</span><span style="color: rgba(0, 0, 255, 1)">&gt;&lt;/</span><span style="color: rgba(128, 0, 0, 1)">video</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 7</span>                 <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">div </span><span style="color: rgba(255, 0, 0, 1)">class</span><span style="color: rgba(0, 0, 255, 1)">="camera-label"</span><span style="color: rgba(0, 0, 255, 1)">&gt;&lt;/</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 8</span>               <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 9</span>               <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">div </span><span style="color: rgba(255, 0, 0, 1)">class</span><span style="color: rgba(0, 0, 255, 1)">="video-container"</span><span style="color: rgba(255, 0, 0, 1)"> data-camera</span><span style="color: rgba(0, 0, 255, 1)">="2"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">10</span>                 <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">video </span><span style="color: rgba(255, 0, 0, 1)">class</span><span style="color: rgba(0, 0, 255, 1)">="video-stream"</span><span style="color: rgba(255, 0, 0, 1)"> autoplay muted</span><span style="color: rgba(0, 0, 255, 1)">&gt;&lt;/</span><span style="color: rgba(128, 0, 0, 1)">video</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">11</span>                 <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">div </span><span style="color: rgba(255, 0, 0, 1)">class</span><span style="color: rgba(0, 0, 255, 1)">="camera-label"</span><span style="color: rgba(0, 0, 255, 1)">&gt;&lt;/</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">12</span>               <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">13</span>               <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">div </span><span style="color: rgba(255, 0, 0, 1)">class</span><span style="color: rgba(0, 0, 255, 1)">="video-container"</span><span style="color: rgba(255, 0, 0, 1)"> data-camera</span><span style="color: rgba(0, 0, 255, 1)">="3"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">14</span>                 <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">video </span><span style="color: rgba(255, 0, 0, 1)">class</span><span style="color: rgba(0, 0, 255, 1)">="video-stream"</span><span style="color: rgba(255, 0, 0, 1)"> autoplay muted</span><span style="color: rgba(0, 0, 255, 1)">&gt;&lt;/</span><span style="color: rgba(128, 0, 0, 1)">video</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">15</span>                 <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">div </span><span style="color: rgba(255, 0, 0, 1)">class</span><span style="color: rgba(0, 0, 255, 1)">="camera-label"</span><span style="color: rgba(0, 0, 255, 1)">&gt;&lt;/</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">16</span>               <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">17</span>               <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">div </span><span style="color: rgba(255, 0, 0, 1)">class</span><span style="color: rgba(0, 0, 255, 1)">="video-container"</span><span style="color: rgba(255, 0, 0, 1)"> data-camera</span><span style="color: rgba(0, 0, 255, 1)">="4"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">18</span>                 <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">video </span><span style="color: rgba(255, 0, 0, 1)">class</span><span style="color: rgba(0, 0, 255, 1)">="video-stream"</span><span style="color: rgba(255, 0, 0, 1)"> autoplay muted</span><span style="color: rgba(0, 0, 255, 1)">&gt;&lt;/</span><span style="color: rgba(128, 0, 0, 1)">video</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">19</span>                 <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">div </span><span style="color: rgba(255, 0, 0, 1)">class</span><span style="color: rgba(0, 0, 255, 1)">="camera-label"</span><span style="color: rgba(0, 0, 255, 1)">&gt;&lt;/</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">20</span>               <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">21</span>             <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">22</span>           <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre>
</div>
<p>主要是在一个区域内预先占用4个小区域，每个小区域用于显示同一个无人系统的一个摄像头信息，最多支持显示同一个无人系统的4个摄像头信息（实际显示其中的1-4个小区域是以实际同一个无人系统的摄像头个数而定的）。</p>
<p>以上的html结构最先是为了支持rtsp视频流而设计的，对于当前的图片帧显示使用的Canvas技术不适用，所以如果是在图片帧显示的模式下，后续需要通过js动态的修改html结果，切换为&lt;canvas&gt;相关标签结构。</p>
<p>以上现有的html结构对应的CSS样式如下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(128, 0, 0, 1)">.chartarea </span>{
<span style="color: rgba(0, 128, 128, 1)"> 2</span> <span style="color: rgba(255, 0, 0, 1)">  width</span>:<span style="color: rgba(0, 0, 255, 1)"> 95%</span>;
<span style="color: rgba(0, 128, 128, 1)"> 3</span> <span style="color: rgba(255, 0, 0, 1)">  height</span>:<span style="color: rgba(0, 0, 255, 1)"> 31%</span>;
<span style="color: rgba(0, 128, 128, 1)"> 4</span> <span style="color: rgba(255, 0, 0, 1)">  margin-top</span>:<span style="color: rgba(0, 0, 255, 1)"> 3.5%</span>;
<span style="color: rgba(0, 128, 128, 1)"> 5</span> }
<span style="color: rgba(0, 128, 128, 1)"> 6</span> <span style="color: rgba(128, 0, 0, 1)">.innerright .chartarea </span>{
<span style="color: rgba(0, 128, 128, 1)"> 7</span> <span style="color: rgba(255, 0, 0, 1)">  margin-left</span>:<span style="color: rgba(0, 0, 255, 1)"> 3%</span>;
<span style="color: rgba(0, 128, 128, 1)"> 8</span> <span style="color: rgba(255, 0, 0, 1)">  margin-right</span>:<span style="color: rgba(0, 0, 255, 1)"> 2%</span>;
<span style="color: rgba(0, 128, 128, 1)"> 9</span> }
<span style="color: rgba(0, 128, 128, 1)">10</span> <span style="color: rgba(128, 0, 0, 1)">.charttitle </span>{
<span style="color: rgba(0, 128, 128, 1)">11</span> <span style="color: rgba(255, 0, 0, 1)">  width</span>:<span style="color: rgba(0, 0, 255, 1)"> 100%</span>;
<span style="color: rgba(0, 128, 128, 1)">12</span> <span style="color: rgba(255, 0, 0, 1)">  height</span>:<span style="color: rgba(0, 0, 255, 1)"> 15%</span>;
<span style="color: rgba(0, 128, 128, 1)">13</span> <span style="color: rgba(255, 0, 0, 1)">  background-image</span>:<span style="color: rgba(0, 0, 255, 1)"> url("/img/visualImages/20_chart_title.png")</span>;
<span style="color: rgba(0, 128, 128, 1)">14</span> <span style="color: rgba(255, 0, 0, 1)">  background-size</span>:<span style="color: rgba(0, 0, 255, 1)"> 100% 100%</span>;
<span style="color: rgba(0, 128, 128, 1)">15</span> }
<span style="color: rgba(0, 128, 128, 1)">16</span> <span style="color: rgba(128, 0, 0, 1)">.charttitle&gt;span </span>{
<span style="color: rgba(0, 128, 128, 1)">17</span> <span style="color: rgba(255, 0, 0, 1)">  height</span>:<span style="color: rgba(0, 0, 255, 1)"> 100%</span>;
<span style="color: rgba(0, 128, 128, 1)">18</span> <span style="color: rgba(255, 0, 0, 1)">  margin-left</span>:<span style="color: rgba(0, 0, 255, 1)"> 5%</span>;
<span style="color: rgba(0, 128, 128, 1)">19</span> <span style="color: rgba(255, 0, 0, 1)">  display</span>:<span style="color: rgba(0, 0, 255, 1)"> flex</span>;
<span style="color: rgba(0, 128, 128, 1)">20</span> <span style="color: rgba(255, 0, 0, 1)">  align-items</span>:<span style="color: rgba(0, 0, 255, 1)"> center</span>;
<span style="color: rgba(0, 128, 128, 1)">21</span> <span style="color: rgba(255, 0, 0, 1)">  font-size</span>:<span style="color: rgba(0, 0, 255, 1)"> 0.8vw</span>;
<span style="color: rgba(0, 128, 128, 1)">22</span> <span style="color: rgba(255, 0, 0, 1)">  color</span>:<span style="color: rgba(0, 0, 255, 1)"> #fff</span>;
<span style="color: rgba(0, 128, 128, 1)">23</span> <span style="color: rgba(255, 0, 0, 1)">  font-weight</span>:<span style="color: rgba(0, 0, 255, 1)"> 700</span>;
<span style="color: rgba(0, 128, 128, 1)">24</span> }
<span style="color: rgba(0, 128, 128, 1)">25</span> <span style="color: rgba(128, 0, 0, 1)">.chartdata </span>{
<span style="color: rgba(0, 128, 128, 1)">26</span> <span style="color: rgba(255, 0, 0, 1)">  width</span>:<span style="color: rgba(0, 0, 255, 1)"> 100%</span>;
<span style="color: rgba(0, 128, 128, 1)">27</span> <span style="color: rgba(255, 0, 0, 1)">  height</span>:<span style="color: rgba(0, 0, 255, 1)"> 85%</span>;
<span style="color: rgba(0, 128, 128, 1)">28</span>   <span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> background-image: url("/img/visualImages/21_chart_background.png");
</span><span style="color: rgba(0, 128, 128, 1)">29</span> <span style="color: rgba(0, 128, 0, 1)">    background-size: cover;
</span><span style="color: rgba(0, 128, 128, 1)">30</span> <span style="color: rgba(0, 128, 0, 1)">    background-repeat: no-repeat;
</span><span style="color: rgba(0, 128, 128, 1)">31</span> <span style="color: rgba(0, 128, 0, 1)">    background-position:top left; </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 128, 128, 1)">32</span> 
<span style="color: rgba(0, 128, 128, 1)">33</span>   <span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 当背景图片无法完整铺满整个div,但自己又想即时图片变形不合比例拉伸，也要铺满，这是种好方式！ </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 128, 128, 1)">34</span>   <span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 这种方法会将背景图片拉伸以完全覆盖div的宽度和高度，可能会导致图片变形，特别是如果图片的原始宽高比与div的宽高比不匹配时。 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 128, 128, 1)">35</span> <span style="color: rgba(255, 0, 0, 1)">  background-image</span>:<span style="color: rgba(0, 0, 255, 1)"> url("/img/visualImages/21_chart_background.png")</span>;
<span style="color: rgba(0, 128, 128, 1)">36</span> <span style="color: rgba(255, 0, 0, 1)">  background-size</span>:<span style="color: rgba(0, 0, 255, 1)"> 100% 100%</span>;
<span style="color: rgba(0, 128, 128, 1)">37</span> }
<span style="color: rgba(0, 128, 128, 1)">38</span> <span style="color: rgba(128, 0, 0, 1)">#videoGrid </span>{
<span style="color: rgba(0, 128, 128, 1)">39</span> <span style="color: rgba(255, 0, 0, 1)">  flex</span>:<span style="color: rgba(0, 0, 255, 1)"> 1</span>;
<span style="color: rgba(0, 128, 128, 1)">40</span> <span style="color: rgba(255, 0, 0, 1)">  display</span>:<span style="color: rgba(0, 0, 255, 1)"> grid</span>;
<span style="color: rgba(0, 128, 128, 1)">41</span> <span style="color: rgba(255, 0, 0, 1)">  grid-template-columns</span>:<span style="color: rgba(0, 0, 255, 1)"> 0.48fr 0.48fr</span>;
<span style="color: rgba(0, 128, 128, 1)">42</span> <span style="color: rgba(255, 0, 0, 1)">  grid-template-rows</span>:<span style="color: rgba(0, 0, 255, 1)"> 0.49fr 0.49fr</span>;
<span style="color: rgba(0, 128, 128, 1)">43</span>   <span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> gap: 5px; </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 128, 128, 1)">44</span> <span style="color: rgba(255, 0, 0, 1)">  gap</span>:<span style="color: rgba(0, 0, 255, 1)"> 2%</span>;
<span style="color: rgba(0, 128, 128, 1)">45</span> <span style="color: rgba(255, 0, 0, 1)">  padding</span>:<span style="color: rgba(0, 0, 255, 1)"> 1.5%</span>;
<span style="color: rgba(0, 128, 128, 1)">46</span> }
<span style="color: rgba(0, 128, 128, 1)">47</span> 
<span style="color: rgba(0, 128, 128, 1)">48</span> <span style="color: rgba(128, 0, 0, 1)">.video-container </span>{
<span style="color: rgba(0, 128, 128, 1)">49</span> <span style="color: rgba(255, 0, 0, 1)">  position</span>:<span style="color: rgba(0, 0, 255, 1)"> relative</span>;
<span style="color: rgba(0, 128, 128, 1)">50</span> <span style="color: rgba(255, 0, 0, 1)">  background-color</span>:<span style="color: rgba(0, 0, 255, 1)"> #000</span>;
<span style="color: rgba(0, 128, 128, 1)">51</span> <span style="color: rgba(255, 0, 0, 1)">  border-radius</span>:<span style="color: rgba(0, 0, 255, 1)"> 4px</span>;
<span style="color: rgba(0, 128, 128, 1)">52</span> <span style="color: rgba(255, 0, 0, 1)">  overflow</span>:<span style="color: rgba(0, 0, 255, 1)"> hidden</span>;
<span style="color: rgba(0, 128, 128, 1)">53</span> }
<span style="color: rgba(0, 128, 128, 1)">54</span> <span style="color: rgba(128, 0, 0, 1)">.video-stream
</span><span style="color: rgba(0, 128, 128, 1)">55</span>  {
<span style="color: rgba(0, 128, 128, 1)">56</span> <span style="color: rgba(255, 0, 0, 1)">  width</span>:<span style="color: rgba(0, 0, 255, 1)"> 100%</span>;
<span style="color: rgba(0, 128, 128, 1)">57</span> <span style="color: rgba(255, 0, 0, 1)">  height</span>:<span style="color: rgba(0, 0, 255, 1)"> 100%</span>;
<span style="color: rgba(0, 128, 128, 1)">58</span> <span style="color: rgba(255, 0, 0, 1)">  object-fit</span>:<span style="color: rgba(0, 0, 255, 1)"> cover</span>;
<span style="color: rgba(0, 128, 128, 1)">59</span> }
<span style="color: rgba(0, 128, 128, 1)">60</span> 
<span style="color: rgba(0, 128, 128, 1)">61</span> <span style="color: rgba(128, 0, 0, 1)">.camera-label </span>{
<span style="color: rgba(0, 128, 128, 1)">62</span> <span style="color: rgba(255, 0, 0, 1)">  position</span>:<span style="color: rgba(0, 0, 255, 1)"> absolute</span>;
<span style="color: rgba(0, 128, 128, 1)">63</span> <span style="color: rgba(255, 0, 0, 1)">  bottom</span>:<span style="color: rgba(0, 0, 255, 1)"> 5px</span>;
<span style="color: rgba(0, 128, 128, 1)">64</span> <span style="color: rgba(255, 0, 0, 1)">  left</span>:<span style="color: rgba(0, 0, 255, 1)"> 5px</span>;
<span style="color: rgba(0, 128, 128, 1)">65</span> <span style="color: rgba(255, 0, 0, 1)">  color</span>:<span style="color: rgba(0, 0, 255, 1)"> white</span>;
<span style="color: rgba(0, 128, 128, 1)">66</span> <span style="color: rgba(255, 0, 0, 1)">  background-color</span>:<span style="color: rgba(0, 0, 255, 1)"> rgba(0, 0, 0, 0.5)</span>;
<span style="color: rgba(0, 128, 128, 1)">67</span> <span style="color: rgba(255, 0, 0, 1)">  padding</span>:<span style="color: rgba(0, 0, 255, 1)"> 2px 5px</span>;
<span style="color: rgba(0, 128, 128, 1)">68</span> <span style="color: rgba(255, 0, 0, 1)">  border-radius</span>:<span style="color: rgba(0, 0, 255, 1)"> 3px</span>;
<span style="color: rgba(0, 128, 128, 1)">69</span> <span style="color: rgba(255, 0, 0, 1)">  font-size</span>:<span style="color: rgba(0, 0, 255, 1)"> 12px</span>;
<span style="color: rgba(0, 128, 128, 1)">70</span> }</pre>
</div>
<p>在上面的4个小视频区域，当用户点击其中任意一个有视频的小区域时，会弹出一个视频放大显示的弹出框，其对应的html结构和css如下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">1</span> <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> 视频放大弹出框构建 </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">2</span>           <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">div </span><span style="color: rgba(255, 0, 0, 1)">id</span><span style="color: rgba(0, 0, 255, 1)">="videoModal"</span><span style="color: rgba(255, 0, 0, 1)"> class</span><span style="color: rgba(0, 0, 255, 1)">="modal"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">3</span>             <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">div </span><span style="color: rgba(255, 0, 0, 1)">class</span><span style="color: rgba(0, 0, 255, 1)">="modal-content"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">4</span>               <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">span </span><span style="color: rgba(255, 0, 0, 1)">class</span><span style="color: rgba(0, 0, 255, 1)">="close-btn"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(255, 0, 0, 1)">&amp;times;</span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">span</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">5</span>               <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">video </span><span style="color: rgba(255, 0, 0, 1)">id</span><span style="color: rgba(0, 0, 255, 1)">="modalVideo"</span><span style="color: rgba(255, 0, 0, 1)"> autoplay controls</span><span style="color: rgba(0, 0, 255, 1)">&gt;&lt;/</span><span style="color: rgba(128, 0, 0, 1)">video</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">6</span>               <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">div </span><span style="color: rgba(255, 0, 0, 1)">class</span><span style="color: rgba(0, 0, 255, 1)">="modal-camera-label"</span><span style="color: rgba(0, 0, 255, 1)">&gt;&lt;/</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">7</span>             <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">8</span>           <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre>
</div>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 弹窗样式 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 128, 128, 1)"> 2</span> <span style="color: rgba(128, 0, 0, 1)">.modal </span>{
<span style="color: rgba(0, 128, 128, 1)"> 3</span> <span style="color: rgba(255, 0, 0, 1)">  display</span>:<span style="color: rgba(0, 0, 255, 1)"> none</span>;
<span style="color: rgba(0, 128, 128, 1)"> 4</span> <span style="color: rgba(255, 0, 0, 1)">  position</span>:<span style="color: rgba(0, 0, 255, 1)"> fixed</span>;
<span style="color: rgba(0, 128, 128, 1)"> 5</span> <span style="color: rgba(255, 0, 0, 1)">  z-index</span>:<span style="color: rgba(0, 0, 255, 1)"> 1100</span>;
<span style="color: rgba(0, 128, 128, 1)"> 6</span> <span style="color: rgba(255, 0, 0, 1)">  left</span>:<span style="color: rgba(0, 0, 255, 1)"> 0</span>;
<span style="color: rgba(0, 128, 128, 1)"> 7</span> <span style="color: rgba(255, 0, 0, 1)">  top</span>:<span style="color: rgba(0, 0, 255, 1)"> 0</span>;
<span style="color: rgba(0, 128, 128, 1)"> 8</span> <span style="color: rgba(255, 0, 0, 1)">  width</span>:<span style="color: rgba(0, 0, 255, 1)"> 100%</span>;
<span style="color: rgba(0, 128, 128, 1)"> 9</span> <span style="color: rgba(255, 0, 0, 1)">  height</span>:<span style="color: rgba(0, 0, 255, 1)"> 100%</span>;
<span style="color: rgba(0, 128, 128, 1)">10</span> <span style="color: rgba(255, 0, 0, 1)">  background-color</span>:<span style="color: rgba(0, 0, 255, 1)"> rgba(0, 0, 0, 0.8)</span>;
<span style="color: rgba(0, 128, 128, 1)">11</span> <span style="color: rgba(255, 0, 0, 1)">  justify-content</span>:<span style="color: rgba(0, 0, 255, 1)"> center</span>;
<span style="color: rgba(0, 128, 128, 1)">12</span> <span style="color: rgba(255, 0, 0, 1)">  align-items</span>:<span style="color: rgba(0, 0, 255, 1)"> center</span>;
<span style="color: rgba(0, 128, 128, 1)">13</span> }
<span style="color: rgba(0, 128, 128, 1)">14</span> <span style="color: rgba(128, 0, 0, 1)">.modal-content </span>{
<span style="color: rgba(0, 128, 128, 1)">15</span> <span style="color: rgba(255, 0, 0, 1)">  position</span>:<span style="color: rgba(0, 0, 255, 1)"> relative</span>;
<span style="color: rgba(0, 128, 128, 1)">16</span> <span style="color: rgba(255, 0, 0, 1)">  width</span>:<span style="color: rgba(0, 0, 255, 1)"> 70vw</span>;
<span style="color: rgba(0, 128, 128, 1)">17</span> <span style="color: rgba(255, 0, 0, 1)">  height</span>:<span style="color: rgba(0, 0, 255, 1)"> 75vh</span>;
<span style="color: rgba(0, 128, 128, 1)">18</span> <span style="color: rgba(255, 0, 0, 1)">  background-color</span>:<span style="color: rgba(0, 0, 255, 1)"> #000</span>;
<span style="color: rgba(0, 128, 128, 1)">19</span> <span style="color: rgba(255, 0, 0, 1)">  border-radius</span>:<span style="color: rgba(0, 0, 255, 1)"> 5px</span>;
<span style="color: rgba(0, 128, 128, 1)">20</span> <span style="color: rgba(255, 0, 0, 1)">  overflow</span>:<span style="color: rgba(0, 0, 255, 1)"> hidden</span>;
<span style="color: rgba(0, 128, 128, 1)">21</span> }
<span style="color: rgba(0, 128, 128, 1)">22</span> 
<span style="color: rgba(0, 128, 128, 1)">23</span> <span style="color: rgba(128, 0, 0, 1)">.close-btn </span>{
<span style="color: rgba(0, 128, 128, 1)">24</span> <span style="color: rgba(255, 0, 0, 1)">  position</span>:<span style="color: rgba(0, 0, 255, 1)"> absolute</span>;
<span style="color: rgba(0, 128, 128, 1)">25</span> <span style="color: rgba(255, 0, 0, 1)">  top</span>:<span style="color: rgba(0, 0, 255, 1)"> 10px</span>;
<span style="color: rgba(0, 128, 128, 1)">26</span> <span style="color: rgba(255, 0, 0, 1)">  right</span>:<span style="color: rgba(0, 0, 255, 1)"> 15px</span>;
<span style="color: rgba(0, 128, 128, 1)">27</span> <span style="color: rgba(255, 0, 0, 1)">  color</span>:<span style="color: rgba(0, 0, 255, 1)"> white</span>;
<span style="color: rgba(0, 128, 128, 1)">28</span> <span style="color: rgba(255, 0, 0, 1)">  font-size</span>:<span style="color: rgba(0, 0, 255, 1)"> 28px</span>;
<span style="color: rgba(0, 128, 128, 1)">29</span> <span style="color: rgba(255, 0, 0, 1)">  font-weight</span>:<span style="color: rgba(0, 0, 255, 1)"> bold</span>;
<span style="color: rgba(0, 128, 128, 1)">30</span> <span style="color: rgba(255, 0, 0, 1)">  cursor</span>:<span style="color: rgba(0, 0, 255, 1)"> pointer</span>;
<span style="color: rgba(0, 128, 128, 1)">31</span> <span style="color: rgba(255, 0, 0, 1)">  z-index</span>:<span style="color: rgba(0, 0, 255, 1)"> 1001</span>;
<span style="color: rgba(0, 128, 128, 1)">32</span> }
<span style="color: rgba(0, 128, 128, 1)">33</span> <span style="color: rgba(128, 0, 0, 1)">.close-btn:hover </span>{
<span style="color: rgba(0, 128, 128, 1)">34</span> <span style="color: rgba(255, 0, 0, 1)">  color</span>:<span style="color: rgba(0, 0, 255, 1)"> #ccc</span>;
<span style="color: rgba(0, 128, 128, 1)">35</span> }
<span style="color: rgba(0, 128, 128, 1)">36</span> <span style="color: rgba(128, 0, 0, 1)">.close-btn </span>{
<span style="color: rgba(0, 128, 128, 1)">37</span> <span style="color: rgba(255, 0, 0, 1)">  font-size</span>:<span style="color: rgba(0, 0, 255, 1)"> 24px</span>;
<span style="color: rgba(0, 128, 128, 1)">38</span> <span style="color: rgba(255, 0, 0, 1)">  font-weight</span>:<span style="color: rgba(0, 0, 255, 1)"> bold</span>;
<span style="color: rgba(0, 128, 128, 1)">39</span> <span style="color: rgba(255, 0, 0, 1)">  color</span>:<span style="color: rgba(0, 0, 255, 1)"> #999</span>;
<span style="color: rgba(0, 128, 128, 1)">40</span> <span style="color: rgba(255, 0, 0, 1)">  cursor</span>:<span style="color: rgba(0, 0, 255, 1)"> pointer</span>;
<span style="color: rgba(0, 128, 128, 1)">41</span> }
<span style="color: rgba(0, 128, 128, 1)">42</span> <span style="color: rgba(128, 0, 0, 1)">#modalVideo</span>{
<span style="color: rgba(0, 128, 128, 1)">43</span> <span style="color: rgba(255, 0, 0, 1)">  width</span>:<span style="color: rgba(0, 0, 255, 1)"> 100%</span>;
<span style="color: rgba(0, 128, 128, 1)">44</span> <span style="color: rgba(255, 0, 0, 1)">  height</span>:<span style="color: rgba(0, 0, 255, 1)"> 100%</span>;
<span style="color: rgba(0, 128, 128, 1)">45</span> <span style="color: rgba(255, 0, 0, 1)">  object-fit</span>:<span style="color: rgba(0, 0, 255, 1)"> contain</span>;
<span style="color: rgba(0, 128, 128, 1)">46</span> }
<span style="color: rgba(0, 128, 128, 1)">47</span> <span style="color: rgba(128, 0, 0, 1)">.modal-camera-label </span>{
<span style="color: rgba(0, 128, 128, 1)">48</span> <span style="color: rgba(255, 0, 0, 1)">  position</span>:<span style="color: rgba(0, 0, 255, 1)"> absolute</span>;
<span style="color: rgba(0, 128, 128, 1)">49</span> <span style="color: rgba(255, 0, 0, 1)">  bottom</span>:<span style="color: rgba(0, 0, 255, 1)"> 10px</span>;
<span style="color: rgba(0, 128, 128, 1)">50</span> <span style="color: rgba(255, 0, 0, 1)">  left</span>:<span style="color: rgba(0, 0, 255, 1)"> 10px</span>;
<span style="color: rgba(0, 128, 128, 1)">51</span> <span style="color: rgba(255, 0, 0, 1)">  color</span>:<span style="color: rgba(0, 0, 255, 1)"> white</span>;
<span style="color: rgba(0, 128, 128, 1)">52</span> <span style="color: rgba(255, 0, 0, 1)">  background-color</span>:<span style="color: rgba(0, 0, 255, 1)"> rgba(0, 0, 0, 0.5)</span>;
<span style="color: rgba(0, 128, 128, 1)">53</span> <span style="color: rgba(255, 0, 0, 1)">  padding</span>:<span style="color: rgba(0, 0, 255, 1)"> 5px 10px</span>;
<span style="color: rgba(0, 128, 128, 1)">54</span> <span style="color: rgba(255, 0, 0, 1)">  border-radius</span>:<span style="color: rgba(0, 0, 255, 1)"> 3px</span>;
<span style="color: rgba(0, 128, 128, 1)">55</span> <span style="color: rgba(255, 0, 0, 1)">  font-size</span>:<span style="color: rgba(0, 0, 255, 1)"> 14px</span>;
<span style="color: rgba(0, 128, 128, 1)">56</span> }</pre>
</div>
<h3>3.2 js函数设计</h3>
<h4>3.2.1 设计统一的入口函数</h4>
<p>　　设计统一的入口函数USDisplay()，当用户访问特定的tab页时触发该函数。USDisplay()通过Get请求、以无人系统id作为请求参数，访问数据中转服务器程序，数据中转服务器程序根据请求的无人系统id，分析判断该无人系统视频传输的模式，并执行模式信息反馈。</p>
<p>代码设计如下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> export <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> USDisplay() {
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">1 根据无人系统id,发送请求后端，并解析后端返回的是哪种模式</span>
<span style="color: rgba(0, 128, 128, 1)"> 3</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">Get请求</span>
<span style="color: rgba(0, 128, 128, 1)"> 4</span>   <span style="color: rgba(0, 0, 255, 1)">var</span> result = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 5</span> <span style="color: rgba(0, 0, 0, 1)">  $.ajax({
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span>     type: 'GET'<span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)"> 7</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">url: ipport + '/api/usdisplay',  //！！！！后续由后端确定ip</span>
<span style="color: rgba(0, 128, 128, 1)"> 8</span>     url: 'http://127.0.0.1:8080' + '/api/usdisplay',  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">20250815临时测试用</span>
<span style="color: rgba(0, 128, 128, 1)"> 9</span> <span style="color: rgba(0, 0, 0, 1)">    data: {
</span><span style="color: rgba(0, 128, 128, 1)">10</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">usid: clickedUnmanedDVId  //无人系统id</span>
<span style="color: rgba(0, 128, 128, 1)">11</span>       usid: 3  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">无人系统id //20250815临时测试用</span>
<span style="color: rgba(0, 128, 128, 1)">12</span> <span style="color: rgba(0, 0, 0, 1)">    },
</span><span style="color: rgba(0, 128, 128, 1)">13</span>     dataType: 'json', <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 期望的后端返回数据格式</span>
<span style="color: rgba(0, 128, 128, 1)">14</span>     async: <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)">15</span>     success: <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (res) {
</span><span style="color: rgba(0, 128, 128, 1)">16</span>       result =<span style="color: rgba(0, 0, 0, 1)"> res;
</span><span style="color: rgba(0, 128, 128, 1)">17</span>       console.log('成功拿到数据了----'<span style="color: rgba(0, 0, 0, 1)">,result);
</span><span style="color: rgba(0, 128, 128, 1)">18</span> <span style="color: rgba(0, 0, 0, 1)">    },
</span><span style="color: rgba(0, 128, 128, 1)">19</span>     error: <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (xhr, status, error) {
</span><span style="color: rgba(0, 128, 128, 1)">20</span>       console.log("error result"<span style="color: rgba(0, 0, 0, 1)">,result);
</span><span style="color: rgba(0, 128, 128, 1)">21</span>       console.error('USDisplay API请求失败:'<span style="color: rgba(0, 0, 0, 1)">, status, error);
</span><span style="color: rgba(0, 128, 128, 1)">22</span> 
<span style="color: rgba(0, 128, 128, 1)">23</span>       showConnectionStatus('API连接失败', 'error'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">24</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">25</span> <span style="color: rgba(0, 0, 0, 1)">  });
</span><span style="color: rgba(0, 128, 128, 1)">26</span> 
<span style="color: rgba(0, 128, 128, 1)">27</span>   <span style="color: rgba(0, 0, 255, 1)">var</span> urlarray = [];<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">用于存储rtspurl/websocketurl地址数组</span>
<span style="color: rgba(0, 128, 128, 1)">28</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">解析模式</span>
<span style="color: rgba(0, 128, 128, 1)">29</span>   <span style="color: rgba(0, 0, 255, 1)">if</span> (result.code === 200 &amp;&amp; result.success === <span style="color: rgba(0, 0, 255, 1)">true</span> &amp;&amp; !!result.data &amp;&amp;<span style="color: rgba(0, 0, 0, 1)"> isNotEmptyObject(result.data)) {
</span><span style="color: rgba(0, 128, 128, 1)">30</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">模式一：直接rtsp流（也有弊端，前端直连机器人视频，如果网页访问的用户过多，会导致机器人负荷过大，后期也需要数据中台中转）</span>
<span style="color: rgba(0, 128, 128, 1)">31</span>     <span style="color: rgba(0, 0, 255, 1)">if</span> (result.data.mode === "rtspurl"<span style="color: rgba(0, 0, 0, 1)">) {
</span><span style="color: rgba(0, 128, 128, 1)">32</span>       urlarray =<span style="color: rgba(0, 0, 0, 1)"> result.data.url;
</span><span style="color: rgba(0, 128, 128, 1)">33</span>       <span style="color: rgba(0, 0, 255, 1)">if</span> (urlarray.length &gt;= 1<span style="color: rgba(0, 0, 0, 1)">) {
</span><span style="color: rgba(0, 128, 128, 1)">34</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">-1----清理之前的连接资源</span>
<span style="color: rgba(0, 128, 128, 1)">35</span> <span style="color: rgba(0, 0, 0, 1)">        cleanupPreviousConnections();
</span><span style="color: rgba(0, 128, 128, 1)">36</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">-2----rtsp构建显示逻辑</span>
<span style="color: rgba(0, 128, 128, 1)">37</span> <span style="color: rgba(0, 0, 0, 1)">        usrtspmode(urlarray);
</span><span style="color: rgba(0, 128, 128, 1)">38</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)">39</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">40</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">模式二：数据中台作为websocket服务端，网页端作为websocket客户端</span>
<span style="color: rgba(0, 128, 128, 1)">41</span>     <span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (result.data.mode === "websocketurl"<span style="color: rgba(0, 0, 0, 1)">) {
</span><span style="color: rgba(0, 128, 128, 1)">42</span>       urlarray =<span style="color: rgba(0, 0, 0, 1)"> result.data.url;
</span><span style="color: rgba(0, 128, 128, 1)">43</span>       <span style="color: rgba(0, 0, 255, 1)">if</span> (urlarray.length &gt;= 1<span style="color: rgba(0, 0, 0, 1)">) {
</span><span style="color: rgba(0, 128, 128, 1)">44</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">-1----清理之前的连接资源</span>
<span style="color: rgba(0, 128, 128, 1)">45</span> <span style="color: rgba(0, 0, 0, 1)">        cleanupPreviousConnections();
</span><span style="color: rgba(0, 128, 128, 1)">46</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">-2----websocket构建显示逻辑</span>
<span style="color: rgba(0, 128, 128, 1)">47</span> <span style="color: rgba(0, 0, 0, 1)">        uswebsocketmode(urlarray);
</span><span style="color: rgba(0, 128, 128, 1)">48</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)">49</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">50</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">说明后端没有返回任何模式，不做任何处理</span>
<span style="color: rgba(0, 128, 128, 1)">51</span>     <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">{
</span><span style="color: rgba(0, 128, 128, 1)">52</span>       console.warn('机器人rtsp/图片帧：后端未返回有效的显示模式'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">53</span>       showConnectionStatus('未知显示模式', 'warning'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">54</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">55</span>   }<span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">{
</span><span style="color: rgba(0, 128, 128, 1)">56</span>     console.error('USDisplay API返回数据无效,result:'<span style="color: rgba(0, 0, 0, 1)">,result);
</span><span style="color: rgba(0, 128, 128, 1)">57</span>     showConnectionStatus('数据获取失败', 'error'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">58</span> <span style="color: rgba(0, 0, 0, 1)">  }
</span><span style="color: rgba(0, 128, 128, 1)">59</span> }</pre>
</div>
<h4>3.2.2 模式一：rtspurl模式的处理</h4>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">  1</span> <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> usrtspmode(url) {
</span><span style="color: rgba(0, 128, 128, 1)">  2</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取元素</span>
<span style="color: rgba(0, 128, 128, 1)">  3</span>   const videoContainers = document.querySelectorAll('.video-container');<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">4个视频div容器（各自平等独立）</span>
<span style="color: rgba(0, 128, 128, 1)">  4</span>   const modal = document.getElementById('videoModal');<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">视频弹出框</span>
<span style="color: rgba(0, 128, 128, 1)">  5</span>   const modalVideo = document.getElementById('modalVideo');<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">弹出框显示视频区域</span>
<span style="color: rgba(0, 128, 128, 1)">  6</span>   const closeBtn = document.querySelector('.close-btn');<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">弹出框关闭按钮区域</span>
<span style="color: rgba(0, 128, 128, 1)">  7</span>   const modalCameraLabel = document.querySelector('.modal-camera-label');<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">弹出框底部显示视频名称标识</span>
<span style="color: rgba(0, 128, 128, 1)">  8</span> 
<span style="color: rgba(0, 128, 128, 1)">  9</span>   <span style="color: rgba(0, 0, 255, 1)">var</span> cameraConfigs = [];<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">重新构建rtsp地址，友好前端显示</span>
<span style="color: rgba(0, 128, 128, 1)"> 10</span>   url.forEach((item, index) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)"> 11</span> <span style="color: rgba(0, 0, 0, 1)">    cameraConfigs.push(
</span><span style="color: rgba(0, 128, 128, 1)"> 12</span> <span style="color: rgba(0, 0, 0, 1)">      {
</span><span style="color: rgba(0, 128, 128, 1)"> 13</span> <span style="color: rgba(0, 0, 0, 1)">        id: index,
</span><span style="color: rgba(0, 128, 128, 1)"> 14</span>         name: "camera" + (index + 1<span style="color: rgba(0, 0, 0, 1)">),
</span><span style="color: rgba(0, 128, 128, 1)"> 15</span> <span style="color: rgba(0, 0, 0, 1)">        rtsp: item
</span><span style="color: rgba(0, 128, 128, 1)"> 16</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)"> 17</span> <span style="color: rgba(0, 0, 0, 1)">    );
</span><span style="color: rgba(0, 128, 128, 1)"> 18</span> <span style="color: rgba(0, 0, 0, 1)">  });
</span><span style="color: rgba(0, 128, 128, 1)"> 19</span> 
<span style="color: rgba(0, 128, 128, 1)"> 20</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 用于存储webrtc实例 （几个视频就需要几个实例）</span>
<span style="color: rgba(0, 128, 128, 1)"> 21</span>   const webrtcInstances =<span style="color: rgba(0, 0, 0, 1)"> [];
</span><span style="color: rgba(0, 128, 128, 1)"> 22</span> 
<span style="color: rgba(0, 128, 128, 1)"> 23</span>  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 初始化视频流函数--核心方法</span>
<span style="color: rgba(0, 128, 128, 1)"> 24</span>   <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> setupVideoStreams() {
</span><span style="color: rgba(0, 128, 128, 1)"> 25</span> 
<span style="color: rgba(0, 128, 128, 1)"> 26</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">遍历4个视频div元素操作</span>
<span style="color: rgba(0, 128, 128, 1)"> 27</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">每个视频div结构如下：</span>
<span style="color: rgba(0, 128, 128, 1)"> 28</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> &lt;div class="video-container" data-camera="1"&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 29</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;video class="video-stream" autoplay muted&gt;&lt;/video&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 30</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;div class="camera-label"&gt;&lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 31</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> &lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 32</span> 
<span style="color: rgba(0, 128, 128, 1)"> 33</span>     videoContainers.forEach((container, index) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)"> 34</span>       const videoElement = container.querySelector('.video-stream');<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">小区域视频本身</span>
<span style="color: rgba(0, 128, 128, 1)"> 35</span>       const cameraLabel = container.querySelector('.camera-label');<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">小区域视频标识</span>
<span style="color: rgba(0, 128, 128, 1)"> 36</span> 
<span style="color: rgba(0, 128, 128, 1)"> 37</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> （1）摄像头名称显示（从配置读取）</span>
<span style="color: rgba(0, 128, 128, 1)"> 38</span>       <span style="color: rgba(0, 0, 255, 1)">if</span> (cameraLabel &amp;&amp;<span style="color: rgba(0, 0, 0, 1)"> cameraConfigs[index]) {
</span><span style="color: rgba(0, 128, 128, 1)"> 39</span>         cameraLabel.textContent = cameraConfigs[index].name;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">根据后台的摄像头名称（位置标识）进行标识显示</span>
<span style="color: rgba(0, 128, 128, 1)"> 40</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)"> 41</span> 
<span style="color: rgba(0, 128, 128, 1)"> 42</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> （2）初始化webrtc-streamer</span>
<span style="color: rgba(0, 128, 128, 1)"> 43</span>       <span style="color: rgba(0, 0, 255, 1)">if</span> (videoElement &amp;&amp;<span style="color: rgba(0, 0, 0, 1)"> cameraConfigs[index]) {
</span><span style="color: rgba(0, 128, 128, 1)"> 44</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">----2.1 实例化WebRtcStreamer ---固定写法</span>
<span style="color: rgba(0, 128, 128, 1)"> 45</span>         const webrtc = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> WebRtcStreamer(videoElement, WEBRTC_SERVER);
</span><span style="color: rgba(0, 128, 128, 1)"> 46</span> 
<span style="color: rgba(0, 128, 128, 1)"> 47</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">----2.2 执行webrtc实例连接rtsp流（地址）    ---固定写法</span>
<span style="color: rgba(0, 128, 128, 1)"> 48</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">webrtc.connect(cameraConfigs[index].rtsp);//优化</span>
<span style="color: rgba(0, 128, 128, 1)"> 49</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">webrtc.connect(cameraConfigs[index].rtsp,null,"rtptransport=tcp&amp;timeout=60&amp;width=320&amp;height=240",null);</span>
<span style="color: rgba(0, 128, 128, 1)"> 50</span>         webrtc.connect(cameraConfigs[index].rtsp, <span style="color: rgba(0, 0, 255, 1)">null</span>, "rtptransport=tcp&amp;timeout=60", <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 51</span> 
<span style="color: rgba(0, 128, 128, 1)"> 52</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">----2.3 存储实例以便管理</span>
<span style="color: rgba(0, 128, 128, 1)"> 53</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> webrtcInstances.push({</span>
<span style="color: rgba(0, 128, 128, 1)"> 54</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   id: cameraConfigs[index].id,</span>
<span style="color: rgba(0, 128, 128, 1)"> 55</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   instance: webrtc,</span>
<span style="color: rgba(0, 128, 128, 1)"> 56</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   element: videoElement</span>
<span style="color: rgba(0, 128, 128, 1)"> 57</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> });</span>
<span style="color: rgba(0, 128, 128, 1)"> 58</span> 
<span style="color: rgba(0, 128, 128, 1)"> 59</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">存储到全局数组用于资源管理</span>
<span style="color: rgba(0, 128, 128, 1)"> 60</span> <span style="color: rgba(0, 0, 0, 1)">        globalWebrtcInstances.push({
</span><span style="color: rgba(0, 128, 128, 1)"> 61</span> <span style="color: rgba(0, 0, 0, 1)">          id: cameraConfigs[index].id,
</span><span style="color: rgba(0, 128, 128, 1)"> 62</span> <span style="color: rgba(0, 0, 0, 1)">          instance: webrtc,
</span><span style="color: rgba(0, 128, 128, 1)"> 63</span> <span style="color: rgba(0, 0, 0, 1)">          element: videoElement
</span><span style="color: rgba(0, 128, 128, 1)"> 64</span> <span style="color: rgba(0, 0, 0, 1)">        });
</span><span style="color: rgba(0, 128, 128, 1)"> 65</span> 
<span style="color: rgba(0, 128, 128, 1)"> 66</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 错误处理</span>
<span style="color: rgba(0, 128, 128, 1)"> 67</span>         videoElement.onerror = <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> () {
</span><span style="color: rgba(0, 128, 128, 1)"> 68</span> <span style="color: rgba(0, 0, 0, 1)">          handleStreamError(container);
</span><span style="color: rgba(0, 128, 128, 1)"> 69</span> <span style="color: rgba(0, 0, 0, 1)">        };
</span><span style="color: rgba(0, 128, 128, 1)"> 70</span> 
<span style="color: rgba(0, 128, 128, 1)"> 71</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">补充：连接成功反馈</span>
<span style="color: rgba(0, 128, 128, 1)"> 72</span>         videoElement.onloadstart = <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)">(){
</span><span style="color: rgba(0, 128, 128, 1)"> 73</span>           console.log(`&lt;video&gt;<span style="color: rgba(0, 0, 0, 1)">视频方式${cameraConfigs[index].name}连接成功`);
</span><span style="color: rgba(0, 128, 128, 1)"> 74</span>           showConnectionStatus(`&lt;video&gt;视频方式${cameraConfigs[index].name}连接成功`, 'success'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 75</span> <span style="color: rgba(0, 0, 0, 1)">        };
</span><span style="color: rgba(0, 128, 128, 1)"> 76</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)"> 77</span> <span style="color: rgba(0, 0, 0, 1)">    });
</span><span style="color: rgba(0, 128, 128, 1)"> 78</span> <span style="color: rgba(0, 0, 0, 1)">  }
</span><span style="color: rgba(0, 128, 128, 1)"> 79</span> 
<span style="color: rgba(0, 128, 128, 1)"> 80</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 处理流错误</span>
<span style="color: rgba(0, 128, 128, 1)"> 81</span>   <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> handleStreamError(container) {
</span><span style="color: rgba(0, 128, 128, 1)"> 82</span>     const videoElement = container.querySelector('.video-stream'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 83</span>     const label = container.querySelector('.camera-label'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 84</span> 
<span style="color: rgba(0, 128, 128, 1)"> 85</span>     <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (videoElement) {
</span><span style="color: rgba(0, 128, 128, 1)"> 86</span>       videoElement.style.display = 'none'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 87</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)"> 88</span> 
<span style="color: rgba(0, 128, 128, 1)"> 89</span>     <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (label) {
</span><span style="color: rgba(0, 128, 128, 1)"> 90</span>       label.style.color = '#ff4d4f'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 91</span>       label.textContent = label.textContent + ' (离线)'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 92</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)"> 93</span> 
<span style="color: rgba(0, 128, 128, 1)"> 94</span>     container.style.backgroundColor = '#333'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 95</span>     container.innerHTML +=<span style="color: rgba(0, 0, 0, 1)"> `
</span><span style="color: rgba(0, 128, 128, 1)"> 96</span>     &lt;div style="color:white;display:flex;justify-content:center;align-items:center;height:100%;position:absolute;top:0;left:0;right:0;bottom:0;"&gt;
<span style="color: rgba(0, 128, 128, 1)"> 97</span> <span style="color: rgba(0, 0, 0, 1)">      视频流无法加载
</span><span style="color: rgba(0, 128, 128, 1)"> 98</span>     &lt;/div&gt;
<span style="color: rgba(0, 128, 128, 1)"> 99</span> <span style="color: rgba(0, 0, 0, 1)">  `;
</span><span style="color: rgba(0, 128, 128, 1)">100</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">showConnectionStatus('视频流连接失败', 'error');</span>
<span style="color: rgba(0, 128, 128, 1)">101</span> 
<span style="color: rgba(0, 128, 128, 1)">102</span> <span style="color: rgba(0, 0, 0, 1)">  }
</span><span style="color: rgba(0, 128, 128, 1)">103</span> 
<span style="color: rgba(0, 128, 128, 1)">104</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 监听每个视频区域div的用户点击事件</span>
<span style="color: rgba(0, 128, 128, 1)">105</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">每个视频div结构如下：</span>
<span style="color: rgba(0, 128, 128, 1)">106</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> &lt;div class="video-container" data-camera="1"&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">107</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;video class="video-stream" autoplay muted&gt;&lt;/video&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">108</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;div class="camera-label"&gt;&lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">109</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> &lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">110</span>   videoContainers.forEach(container =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)">111</span>     container.addEventListener('click', <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> () {
</span><span style="color: rgba(0, 128, 128, 1)">112</span>       const videoElement = <span style="color: rgba(0, 0, 255, 1)">this</span>.querySelector('.video-stream'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">113</span>       const cameraId = <span style="color: rgba(0, 0, 255, 1)">this</span>.getAttribute('data-camera'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">114</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">从配置变量中获取到对应视频的完整配置信息</span>
<span style="color: rgba(0, 128, 128, 1)">115</span>       const cameraConfig = cameraConfigs.find(c =&gt; c.id ===<span style="color: rgba(0, 0, 0, 1)"> Number(cameraId));
</span><span style="color: rgba(0, 128, 128, 1)">116</span> 
<span style="color: rgba(0, 128, 128, 1)">117</span>       <span style="color: rgba(0, 0, 255, 1)">if</span> (videoElement &amp;&amp; videoElement.srcObject &amp;&amp;<span style="color: rgba(0, 0, 0, 1)"> cameraConfig) {
</span><span style="color: rgba(0, 128, 128, 1)">118</span>         modalVideo.srcObject =<span style="color: rgba(0, 0, 0, 1)"> videoElement.srcObject;
</span><span style="color: rgba(0, 128, 128, 1)">119</span>         modalCameraLabel.textContent =<span style="color: rgba(0, 0, 0, 1)"> cameraConfig.name;
</span><span style="color: rgba(0, 128, 128, 1)">120</span>         modal.style.display = 'flex'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">121</span> 
<span style="color: rgba(0, 128, 128, 1)">122</span>         modalVideo.play().<span style="color: rgba(0, 0, 255, 1)">catch</span>(e =&gt; console.error('弹窗视频播放失败:'<span style="color: rgba(0, 0, 0, 1)">, e));
</span><span style="color: rgba(0, 128, 128, 1)">123</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)">124</span> <span style="color: rgba(0, 0, 0, 1)">    });
</span><span style="color: rgba(0, 128, 128, 1)">125</span> <span style="color: rgba(0, 0, 0, 1)">  });
</span><span style="color: rgba(0, 128, 128, 1)">126</span> 
<span style="color: rgba(0, 128, 128, 1)">127</span> 
<span style="color: rgba(0, 128, 128, 1)">128</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 关闭弹窗</span>
<span style="color: rgba(0, 128, 128, 1)">129</span>   <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (closeBtn) {
</span><span style="color: rgba(0, 128, 128, 1)">130</span>     closeBtn.addEventListener('click', <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> () {
</span><span style="color: rgba(0, 128, 128, 1)">131</span>       modal.style.display = 'none'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">132</span> <span style="color: rgba(0, 0, 0, 1)">      modalVideo.pause();
</span><span style="color: rgba(0, 128, 128, 1)">133</span>       modalVideo.srcObject = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">134</span> <span style="color: rgba(0, 0, 0, 1)">    });
</span><span style="color: rgba(0, 128, 128, 1)">135</span> <span style="color: rgba(0, 0, 0, 1)">  }
</span><span style="color: rgba(0, 128, 128, 1)">136</span> 
<span style="color: rgba(0, 128, 128, 1)">137</span> 
<span style="color: rgba(0, 128, 128, 1)">138</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 通过webrtc-streamer工具显示视频</span>
<span style="color: rgba(0, 128, 128, 1)">139</span> <span style="color: rgba(0, 0, 0, 1)">  setupVideoStreams();
</span><span style="color: rgba(0, 128, 128, 1)">140</span> 
<span style="color: rgba(0, 128, 128, 1)">141</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 页面卸载时清理资源----通过页面事件监听</span>
<span style="color: rgba(0, 128, 128, 1)">142</span>   window.addEventListener('beforeunload', <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> () {
</span><span style="color: rgba(0, 128, 128, 1)">143</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> webrtcInstances.forEach(instance =&gt; {</span>
<span style="color: rgba(0, 128, 128, 1)">144</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   instance.instance.disconnect();//实例断开连接</span>
<span style="color: rgba(0, 128, 128, 1)">145</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> });</span>
<span style="color: rgba(0, 128, 128, 1)">146</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">------修订完善</span>
<span style="color: rgba(0, 128, 128, 1)">147</span>     globalWebrtcInstances.forEach(instance =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)">148</span>       <span style="color: rgba(0, 0, 255, 1)">if</span> (instance &amp;&amp;<span style="color: rgba(0, 0, 0, 1)"> instance.instance) {
</span><span style="color: rgba(0, 128, 128, 1)">149</span> <span style="color: rgba(0, 0, 0, 1)">        instance.instance.disconnect();
</span><span style="color: rgba(0, 128, 128, 1)">150</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)">151</span> <span style="color: rgba(0, 0, 0, 1)">    });
</span><span style="color: rgba(0, 128, 128, 1)">152</span> 
<span style="color: rgba(0, 128, 128, 1)">153</span> <span style="color: rgba(0, 0, 0, 1)">  });
</span><span style="color: rgba(0, 128, 128, 1)">154</span> 
<span style="color: rgba(0, 128, 128, 1)">155</span> 
<span style="color: rgba(0, 128, 128, 1)">156</span> 
<span style="color: rgba(0, 128, 128, 1)">157</span> }</pre>
</div>
<p>&nbsp;</p>
<h4>3.2.3 模式二：websocketurl模式的处理</h4>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">  1</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">websocket模式显示逻辑</span>
<span style="color: rgba(0, 128, 128, 1)">  2</span> <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> uswebsocketmode(url){
</span><span style="color: rgba(0, 128, 128, 1)">  3</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">websocket canvas div 待切换新结构梳理</span>
<span style="color: rgba(0, 128, 128, 1)">  4</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> &lt;div class="chartdata" id="videoGrid"&gt;//下面包含4个视频区域</span>
<span style="color: rgba(0, 128, 128, 1)">  5</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> &lt;div class="video-container" data-camera="1"&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">  6</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;canvas class="videoCanvas"&gt;&lt;/canvas&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">  7</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;div class="camera-label"&gt;&lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">  8</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> &lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">  9</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> &lt;div class="video-container" data-camera="2"&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 10</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;canvas class="videoCanvas"&gt;&lt;/canvas&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 11</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;div class="camera-label"&gt;&lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 12</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> &lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 13</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> &lt;div class="video-container" data-camera="3"&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 14</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;canvas class="videoCanvas"&gt;&lt;/canvas&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 15</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;div class="camera-label"&gt;&lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 16</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> &lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 17</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> &lt;div class="video-container" data-camera="4"&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 18</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;canvas class="videoCanvas"&gt;&lt;/canvas&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 19</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;div class="camera-label"&gt;&lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 20</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> &lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 21</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> &lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 22</span> 
<span style="color: rgba(0, 128, 128, 1)"> 23</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">原有老结构</span>
<span style="color: rgba(0, 128, 128, 1)"> 24</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> &lt;div class="chartdata" id="videoGrid"&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 25</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;!-- 四个视频区域 --&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 26</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;div class="video-container" data-camera="1"&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 27</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">     &lt;video class="video-stream" autoplay muted&gt;&lt;/video&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 28</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">     &lt;div class="camera-label"&gt;&lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 29</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 30</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;div class="video-container" data-camera="2"&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 31</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">     &lt;video class="video-stream" autoplay muted&gt;&lt;/video&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 32</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">     &lt;div class="camera-label"&gt;&lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 33</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 34</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;div class="video-container" data-camera="3"&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 35</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">     &lt;video class="video-stream" autoplay muted&gt;&lt;/video&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 36</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">     &lt;div class="camera-label"&gt;&lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 37</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 38</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;div class="video-container" data-camera="4"&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 39</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">     &lt;video class="video-stream" autoplay muted&gt;&lt;/video&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 40</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">     &lt;div class="camera-label"&gt;&lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 41</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 42</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> &lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 43</span> 
<span style="color: rgba(0, 128, 128, 1)"> 44</span> 
<span style="color: rgba(0, 128, 128, 1)"> 45</span>   const modal = document.getElementById('videoModal');<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">视频弹出框  //--------公共操作变量</span>
<span style="color: rgba(0, 128, 128, 1)"> 46</span>   const modalCameraLabel = document.querySelector('.modal-camera-label');<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">弹出框底部显示视频名称标识</span>
<span style="color: rgba(0, 128, 128, 1)"> 47</span>   <span style="color: rgba(0, 0, 255, 1)">var</span> modalcanvas = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 48</span>   <span style="color: rgba(0, 0, 255, 1)">var</span> modalctx = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 49</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">var cameraId = null;</span>
<span style="color: rgba(0, 128, 128, 1)"> 50</span>   <span style="color: rgba(0, 0, 255, 1)">var</span> currentModalCameraId = <span style="color: rgba(0, 0, 255, 1)">null</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 当前弹出框显示的摄像头ID</span>
<span style="color: rgba(0, 128, 128, 1)"> 51</span> 
<span style="color: rgba(0, 128, 128, 1)"> 52</span> 
<span style="color: rgba(0, 128, 128, 1)"> 53</span>   const videoContainers = document.querySelectorAll(".video-container");<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">获取4个.video-container视频区域元素</span>
<span style="color: rgba(0, 128, 128, 1)"> 54</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">1- 先清掉原有默认页面的div结构内的元素，构建新的canvas元素 </span>
<span style="color: rgba(0, 128, 128, 1)"> 55</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">依次进行替换</span>
<span style="color: rgba(0, 128, 128, 1)"> 56</span> <span style="color: rgba(0, 0, 0, 1)">  videoContainers.forEach(
</span><span style="color: rgba(0, 128, 128, 1)"> 57</span>     container =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)"> 58</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">查找原有的&lt;video&gt;元素</span>
<span style="color: rgba(0, 128, 128, 1)"> 59</span>       const videoElement = container.querySelector(".video-stream"<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 60</span>       <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (videoElement) {
</span><span style="color: rgba(0, 128, 128, 1)"> 61</span> 
<span style="color: rgba(0, 128, 128, 1)"> 62</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">创建&lt;canvas&gt;元素</span>
<span style="color: rgba(0, 128, 128, 1)"> 63</span>         const canvas = document.createElement("canvas"<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 64</span>         canvas.className = 'videoCanvas'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 65</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> canvas.width = 320; //设置默认尺寸，即图片的分辨率、画布分辨率（和容器大小没有关系，最终都会在指定容器100%显示）</span>
<span style="color: rgba(0, 128, 128, 1)"> 66</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> canvas.height = 240;</span>
<span style="color: rgba(0, 128, 128, 1)"> 67</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">以上配置不能自动充满div区域</span>
<span style="color: rgba(0, 128, 128, 1)"> 68</span> 
<span style="color: rgba(0, 128, 128, 1)"> 69</span> 
<span style="color: rgba(0, 128, 128, 1)"> 70</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> // 根据容器大小动态设置，但保持最小分辨率</span>
<span style="color: rgba(0, 128, 128, 1)"> 71</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> const containerRect = container.getBoundingClientRect();</span>
<span style="color: rgba(0, 128, 128, 1)"> 72</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> canvas.width = Math.max(containerRect.width || 320, 160);</span>
<span style="color: rgba(0, 128, 128, 1)"> 73</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> canvas.height = Math.max(containerRect.height || 240, 120);</span>
<span style="color: rgba(0, 128, 128, 1)"> 74</span> 
<span style="color: rgba(0, 128, 128, 1)"> 75</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 自适应容器尺寸：填满容器</span>
<span style="color: rgba(0, 128, 128, 1)"> 76</span> 
<span style="color: rgba(0, 128, 128, 1)"> 77</span>         const rect =<span style="color: rgba(0, 0, 0, 1)"> container.getBoundingClientRect();
</span><span style="color: rgba(0, 128, 128, 1)"> 78</span>         canvas.width = Math.max(1<span style="color: rgba(0, 0, 0, 1)">, Math.floor(rect.width));
</span><span style="color: rgba(0, 128, 128, 1)"> 79</span>         canvas.height = Math.max(1<span style="color: rgba(0, 0, 0, 1)">, Math.floor(rect.height));
</span><span style="color: rgba(0, 128, 128, 1)"> 80</span> 
<span style="color: rgba(0, 128, 128, 1)"> 81</span> 
<span style="color: rgba(0, 128, 128, 1)"> 82</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">用&lt;canvas&gt;元素替换&lt;video&gt;元素  --- 通过获取&lt;video&gt;元素的父节点，来将&lt;video&gt;替换为&lt;canvas&gt;</span>
<span style="color: rgba(0, 128, 128, 1)"> 83</span> <span style="color: rgba(0, 0, 0, 1)">        videoElement.parentNode.replaceChild(canvas, videoElement);
</span><span style="color: rgba(0, 128, 128, 1)"> 84</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)"> 85</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)"> 86</span> <span style="color: rgba(0, 0, 0, 1)">  );
</span><span style="color: rgba(0, 128, 128, 1)"> 87</span> 
<span style="color: rgba(0, 128, 128, 1)"> 88</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">2- 初始化canvas基础信息</span>
<span style="color: rgba(0, 128, 128, 1)"> 89</span>   <span style="color: rgba(0, 0, 255, 1)">var</span> canvasElementArr =<span style="color: rgba(0, 0, 0, 1)"> [];
</span><span style="color: rgba(0, 128, 128, 1)"> 90</span>   <span style="color: rgba(0, 0, 255, 1)">var</span> ctx =<span style="color: rgba(0, 0, 0, 1)"> [];
</span><span style="color: rgba(0, 128, 128, 1)"> 91</span>   <span style="color: rgba(0, 0, 255, 1)">var</span> canvasElements = document.querySelectorAll(".videoCanvas");<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">获取到所有&lt;canvas&gt;  //注意元素是4个，但是后台返回的不一定是4个</span>
<span style="color: rgba(0, 128, 128, 1)"> 92</span>   canvasElements.forEach((canvas, index) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)"> 93</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">注意元素是4个，但是后台返回的不一定是4个。只需要根据后端返回的图片流地址个数，按需及可 (后台若超过4个，则只操作前4个)</span>
<span style="color: rgba(0, 128, 128, 1)"> 94</span>     <span style="color: rgba(0, 0, 255, 1)">if</span> ( index &lt;<span style="color: rgba(0, 0, 0, 1)"> url.length) {
</span><span style="color: rgba(0, 128, 128, 1)"> 95</span>       canvasElementArr[index] =<span style="color: rgba(0, 0, 0, 1)"> canvas;
</span><span style="color: rgba(0, 128, 128, 1)"> 96</span> 
<span style="color: rgba(0, 128, 128, 1)"> 97</span>       ctx[index] = canvas.getContext('2d'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 98</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">绘制初始状态 ---似乎没什么用</span>
<span style="color: rgba(0, 128, 128, 1)"> 99</span>        ctx[index].fillStyle = '#333'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">100</span>       ctx[index].fillRect(0, 0<span style="color: rgba(0, 0, 0, 1)">, canvas.width, canvas.height);
</span><span style="color: rgba(0, 128, 128, 1)">101</span>       ctx[index].fillStyle = 'white'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">102</span>       ctx[index].font = '24px Arial'
<span style="color: rgba(0, 128, 128, 1)">103</span>       ctx[index].textAlign = 'center'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">104</span>       ctx[index].fillText('正在连接...', canvas.width / 2, canvas.height / 2<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">105</span> 
<span style="color: rgba(0, 128, 128, 1)">106</span>       console.log("ctx["+index+"]"<span style="color: rgba(0, 0, 0, 1)">,ctx[index]);
</span><span style="color: rgba(0, 128, 128, 1)">107</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">108</span> <span style="color: rgba(0, 0, 0, 1)">  })
</span><span style="color: rgba(0, 128, 128, 1)">109</span> 
<span style="color: rgba(0, 128, 128, 1)">110</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">3- 构建帧展示逻辑 ---- 若干个区域同时接收图片帧，要考虑异步和实时性</span>
<span style="color: rgba(0, 128, 128, 1)">111</span>   <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> displayFrame(blob,ctx,canvas){
</span><span style="color: rgba(0, 128, 128, 1)">112</span> 
<span style="color: rgba(0, 128, 128, 1)">113</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">追加：--检查参数有效性</span>
<span style="color: rgba(0, 128, 128, 1)">114</span>     <span style="color: rgba(0, 0, 255, 1)">if</span> (!blob || !ctx || !<span style="color: rgba(0, 0, 0, 1)">canvas) {
</span><span style="color: rgba(0, 128, 128, 1)">115</span>       console.warn('displayFrame: 无效参数'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">116</span>       <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">117</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">118</span> 
<span style="color: rgba(0, 128, 128, 1)">119</span>     const img = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Image();
</span><span style="color: rgba(0, 128, 128, 1)">120</span> 
<span style="color: rgba(0, 128, 128, 1)">121</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">追加：--设置超时机制，防止图片加载卡死</span>
<span style="color: rgba(0, 128, 128, 1)">122</span>     const loadTimeout = setTimeout(() =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)">123</span>       console.warn('图片加载超时'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">124</span>       <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (img.src) {
</span><span style="color: rgba(0, 128, 128, 1)">125</span> <span style="color: rgba(0, 0, 0, 1)">        URL.revokeObjectURL(img.src);
</span><span style="color: rgba(0, 128, 128, 1)">126</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)">127</span>       img.onload = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">128</span>       img.onerror = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">129</span>     }, 2000); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 2秒超时</span>
<span style="color: rgba(0, 128, 128, 1)">130</span> 
<span style="color: rgba(0, 128, 128, 1)">131</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 将超时定时器添加到全局管理数组</span>
<span style="color: rgba(0, 128, 128, 1)">132</span> <span style="color: rgba(0, 0, 0, 1)">    globalTimeouts.push(loadTimeout);
</span><span style="color: rgba(0, 128, 128, 1)">133</span> 
<span style="color: rgba(0, 128, 128, 1)">134</span> 
<span style="color: rgba(0, 128, 128, 1)">135</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> img.onload = function(){//回调函数</span>
<span style="color: rgba(0, 128, 128, 1)">136</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   //1.先清除画布信息</span>
<span style="color: rgba(0, 128, 128, 1)">137</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   ctx.clearRect(0,0,canvas.width,canvas.height);</span>
<span style="color: rgba(0, 128, 128, 1)">138</span> 
<span style="color: rgba(0, 128, 128, 1)">139</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   //2.计算缩放比</span>
<span style="color: rgba(0, 128, 128, 1)">140</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   const scale = Math.min(canvas.width/img.width,canvas.height/img.height);</span>
<span style="color: rgba(0, 128, 128, 1)">141</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   const x = (canvas.width - img.width * scale)/2;</span>
<span style="color: rgba(0, 128, 128, 1)">142</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   const y = (canvas.height - img.height * scale)/2;</span>
<span style="color: rgba(0, 128, 128, 1)">143</span> 
<span style="color: rgba(0, 128, 128, 1)">144</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   //3.绘制图片在画布</span>
<span style="color: rgba(0, 128, 128, 1)">145</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   ctx.drawImage(img,x,y,img.width*scale,img.height*scale);</span>
<span style="color: rgba(0, 128, 128, 1)">146</span> 
<span style="color: rgba(0, 128, 128, 1)">147</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   //4.将图像引用取消</span>
<span style="color: rgba(0, 128, 128, 1)">148</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   URL.revokeObjectURL(img.src);</span>
<span style="color: rgba(0, 128, 128, 1)">149</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> };</span>
<span style="color: rgba(0, 128, 128, 1)">150</span> 
<span style="color: rgba(0, 128, 128, 1)">151</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> //补充图片的加载失败异常事件逻辑</span>
<span style="color: rgba(0, 128, 128, 1)">152</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> img.onerror = function () {</span>
<span style="color: rgba(0, 128, 128, 1)">153</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   console.error('图片帧函数----图片加载失败');</span>
<span style="color: rgba(0, 128, 128, 1)">154</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   ctx.fillStyle = '#ff4d4f';</span>
<span style="color: rgba(0, 128, 128, 1)">155</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   ctx.fillRect(0, 0, canvas.width, canvas.height);</span>
<span style="color: rgba(0, 128, 128, 1)">156</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   ctx.fillStyle = 'white';</span>
<span style="color: rgba(0, 128, 128, 1)">157</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   ctx.font = '14px Arial';</span>
<span style="color: rgba(0, 128, 128, 1)">158</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   ctx.textAlign = 'center';</span>
<span style="color: rgba(0, 128, 128, 1)">159</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   ctx.fillText('图片加载失败', canvas.width / 2, canvas.height / 2);</span>
<span style="color: rgba(0, 128, 128, 1)">160</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> };</span>
<span style="color: rgba(0, 128, 128, 1)">161</span> 
<span style="color: rgba(0, 128, 128, 1)">162</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">修复：内存管理</span>
<span style="color: rgba(0, 128, 128, 1)">163</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">--------------重新定义onload事件和onerror事件</span>
<span style="color: rgba(0, 128, 128, 1)">164</span>     const onLoadHandler = <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)">(){
</span><span style="color: rgba(0, 128, 128, 1)">165</span> 
<span style="color: rgba(0, 128, 128, 1)">166</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">追加： --0. 清理超时定时器</span>
<span style="color: rgba(0, 128, 128, 1)">167</span> <span style="color: rgba(0, 0, 0, 1)">      clearTimeout(loadTimeout);
</span><span style="color: rgba(0, 128, 128, 1)">168</span>       <span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)">169</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">1.先清除画布信息</span>
<span style="color: rgba(0, 128, 128, 1)">170</span>         ctx.clearRect(0, 0<span style="color: rgba(0, 0, 0, 1)">, canvas.width, canvas.height);
</span><span style="color: rgba(0, 128, 128, 1)">171</span> 
<span style="color: rgba(0, 128, 128, 1)">172</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">2.计算缩放比</span>
<span style="color: rgba(0, 128, 128, 1)">173</span>         const scale = Math.min(canvas.width / img.width, canvas.height /<span style="color: rgba(0, 0, 0, 1)"> img.height);
</span><span style="color: rgba(0, 128, 128, 1)">174</span>         const x = (canvas.width - img.width * scale) / 2<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">175</span>         const y = (canvas.height - img.height * scale) / 2<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">176</span> 
<span style="color: rgba(0, 128, 128, 1)">177</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">3.绘制图片在画布</span>
<span style="color: rgba(0, 128, 128, 1)">178</span>         ctx.drawImage(img, x, y, img.width * scale, img.height *<span style="color: rgba(0, 0, 0, 1)"> scale);
</span><span style="color: rgba(0, 128, 128, 1)">179</span> 
<span style="color: rgba(0, 128, 128, 1)">180</span>       } <span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (error) {
</span><span style="color: rgba(0, 128, 128, 1)">181</span>         console.error('绘制图片时出错:'<span style="color: rgba(0, 0, 0, 1)">, error);
</span><span style="color: rgba(0, 128, 128, 1)">182</span>       } <span style="color: rgba(0, 0, 255, 1)">finally</span><span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)">183</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">4.清理资源</span>
<span style="color: rgba(0, 128, 128, 1)">184</span> <span style="color: rgba(0, 0, 0, 1)">        URL.revokeObjectURL(img.src);
</span><span style="color: rgba(0, 128, 128, 1)">185</span>         img.onload = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">186</span>         img.onerror = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">187</span>         img.src = ''; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 清空src引用</span>
<span style="color: rgba(0, 128, 128, 1)">188</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)">189</span> 
<span style="color: rgba(0, 128, 128, 1)">190</span> <span style="color: rgba(0, 0, 0, 1)">    };
</span><span style="color: rgba(0, 128, 128, 1)">191</span> 
<span style="color: rgba(0, 128, 128, 1)">192</span>     const onErrorHandler = <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)">(){
</span><span style="color: rgba(0, 128, 128, 1)">193</span> 
<span style="color: rgba(0, 128, 128, 1)">194</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 清理超时定时器</span>
<span style="color: rgba(0, 128, 128, 1)">195</span> <span style="color: rgba(0, 0, 0, 1)">      clearTimeout(loadTimeout);
</span><span style="color: rgba(0, 128, 128, 1)">196</span> 
<span style="color: rgba(0, 128, 128, 1)">197</span>       console.error('图片帧函数----图片加载失败'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">198</span> 
<span style="color: rgba(0, 128, 128, 1)">199</span>       <span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)">200</span>         ctx.fillStyle = '#ff4d4f'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">201</span>         ctx.fillRect(0, 0<span style="color: rgba(0, 0, 0, 1)">, canvas.width, canvas.height);
</span><span style="color: rgba(0, 128, 128, 1)">202</span>         ctx.fillStyle = 'white'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">203</span>         ctx.font = '14px Arial'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">204</span>         ctx.textAlign = 'center'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">205</span>         ctx.fillText('图片加载失败', canvas.width / 2, canvas.height / 2<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">206</span>       } <span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (error) {
</span><span style="color: rgba(0, 128, 128, 1)">207</span>         console.error('绘制错误状态时出错:'<span style="color: rgba(0, 0, 0, 1)">, error);
</span><span style="color: rgba(0, 128, 128, 1)">208</span>       } <span style="color: rgba(0, 0, 255, 1)">finally</span><span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)">209</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">清理资源</span>
<span style="color: rgba(0, 128, 128, 1)">210</span> <span style="color: rgba(0, 0, 0, 1)">        URL.revokeObjectURL(img.src);
</span><span style="color: rgba(0, 128, 128, 1)">211</span>         img.onload = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">212</span>         img.onerror = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">213</span>         img.src = ''; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 清空src引用</span>
<span style="color: rgba(0, 128, 128, 1)">214</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)">215</span> 
<span style="color: rgba(0, 128, 128, 1)">216</span> <span style="color: rgba(0, 0, 0, 1)">    };
</span><span style="color: rgba(0, 128, 128, 1)">217</span> 
<span style="color: rgba(0, 128, 128, 1)">218</span>     img.onload = onLoadHandler;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">配合内部的资源管理</span>
<span style="color: rgba(0, 128, 128, 1)">219</span>     img.onerror = onErrorHandler;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">配合内部的资源管理</span>
<span style="color: rgba(0, 128, 128, 1)">220</span>     img.src =<span style="color: rgba(0, 0, 0, 1)"> URL.createObjectURL(blob);
</span><span style="color: rgba(0, 128, 128, 1)">221</span> 
<span style="color: rgba(0, 128, 128, 1)">222</span> <span style="color: rgba(0, 0, 0, 1)">  }
</span><span style="color: rgba(0, 128, 128, 1)">223</span> 
<span style="color: rgba(0, 128, 128, 1)">224</span> 
<span style="color: rgba(0, 128, 128, 1)">225</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">4- 构建网页客户端连接WebSocket服务端</span>
<span style="color: rgba(0, 128, 128, 1)">226</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">注意会有多个websocket(每个独立的socket连接一个摄像头数据（一个机器人有1-多个摄像头）)</span>
<span style="color: rgba(0, 128, 128, 1)">227</span> 
<span style="color: rgba(0, 128, 128, 1)">228</span> <span style="color: rgba(0, 0, 255, 1)">var</span> ws=[];<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">用于存储websocket连接实例（网页客户端连接服务端）</span>
<span style="color: rgba(0, 128, 128, 1)">229</span> <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> connectWebSocket(){
</span><span style="color: rgba(0, 128, 128, 1)">230</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 实例化websocket,并配置特有的官方监听事件</span>
<span style="color: rgba(0, 128, 128, 1)">231</span>   url.forEach((urlitem,index)=&gt;<span style="color: rgba(0, 0, 0, 1)">{
</span><span style="color: rgba(0, 128, 128, 1)">232</span> 
<span style="color: rgba(0, 128, 128, 1)">233</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> //0 检查是否已连接</span>
<span style="color: rgba(0, 128, 128, 1)">234</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> if(ws[index] &amp;&amp; ws[index].readyState === WebSocket.OPEN){</span>
<span style="color: rgba(0, 128, 128, 1)">235</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   console.log(`WebSocket[${index}]已经连接，跳过重复连接`);</span>
<span style="color: rgba(0, 128, 128, 1)">236</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   return;</span>
<span style="color: rgba(0, 128, 128, 1)">237</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> }</span>
<span style="color: rgba(0, 128, 128, 1)">238</span> 
<span style="color: rgba(0, 128, 128, 1)">239</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">0 严格检查并清理已存在的连接</span>
<span style="color: rgba(0, 128, 128, 1)">240</span>     <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (ws[index]) {
</span><span style="color: rgba(0, 128, 128, 1)">241</span>       <span style="color: rgba(0, 0, 255, 1)">if</span> (ws[index].readyState === WebSocket.OPEN || ws[index].readyState ===<span style="color: rgba(0, 0, 0, 1)"> WebSocket.CONNECTING) {
</span><span style="color: rgba(0, 128, 128, 1)">242</span> <span style="color: rgba(0, 0, 0, 1)">        console.log(`WebSocket[${index}]已经连接或正在连接，跳过重复连接`);
</span><span style="color: rgba(0, 128, 128, 1)">243</span>         <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">244</span>       } <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)">245</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 清理无效连接</span>
<span style="color: rgba(0, 128, 128, 1)">246</span>         <span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)">247</span> <span style="color: rgba(0, 0, 0, 1)">          ws[index].close();
</span><span style="color: rgba(0, 128, 128, 1)">248</span>           ws[index] = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">249</span>         } <span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (e) {
</span><span style="color: rgba(0, 128, 128, 1)">250</span> <span style="color: rgba(0, 0, 0, 1)">          console.log(`清理无效连接时出错: ${e.message}`);
</span><span style="color: rgba(0, 128, 128, 1)">251</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">252</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)">253</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">254</span> 
<span style="color: rgba(0, 128, 128, 1)">255</span>     <span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)">256</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 1 实例化</span>
<span style="color: rgba(0, 128, 128, 1)">257</span>       ws[index] = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> WebSocket(urlitem);
</span><span style="color: rgba(0, 128, 128, 1)">258</span>       globalWebSocketInstances[index] =<span style="color: rgba(0, 0, 0, 1)"> ws[index];
</span><span style="color: rgba(0, 128, 128, 1)">259</span> 
<span style="color: rgba(0, 128, 128, 1)">260</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 2 配置监听事件</span>
<span style="color: rgba(0, 128, 128, 1)">261</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">-------- 2.1 onopen事件</span>
<span style="color: rgba(0, 128, 128, 1)">262</span>       ws[index].onopen = <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> () {
</span><span style="color: rgba(0, 128, 128, 1)">263</span>         console.log("ws[" + index + "]:" + urlitem + "连接已建立,开始监听服务端WebSocket数据"<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">264</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">showConnectionStatus(`摄像头${index + 1}连接成功`, 'success');//后面换vue框架自带的信息提醒框！</span>
<span style="color: rgba(0, 128, 128, 1)">265</span>         reconnectAttempts[index] = 0; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">重置重连计数</span>
<span style="color: rgba(0, 128, 128, 1)">266</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)">267</span> 
<span style="color: rgba(0, 128, 128, 1)">268</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">-------- 2.2 onmessage事件---核心事件</span>
<span style="color: rgba(0, 128, 128, 1)">269</span>       ws[index].onmessage = <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (event) {
</span><span style="color: rgba(0, 128, 128, 1)">270</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (event.data <span style="color: rgba(0, 0, 255, 1)">instanceof</span><span style="color: rgba(0, 0, 0, 1)"> Blob) {
</span><span style="color: rgba(0, 128, 128, 1)">271</span>           <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">displayFrame(event.data,ctx[index]);//调用帧显示函数----[将帧显示在对应的canvas区域] function displayFrame(blob,ctx) canvasElementArr</span>
<span style="color: rgba(0, 128, 128, 1)">272</span>           displayFrame(event.data, ctx[index], canvasElementArr[index]);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">始终小窗口需要渲染</span>
<span style="color: rgba(0, 128, 128, 1)">273</span> 
<span style="color: rgba(0, 128, 128, 1)">274</span>           <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 如果当前索引与弹出框显示的摄像头索引匹配，且弹出框正在显示，则同时渲染弹出框</span>
<span style="color: rgba(0, 128, 128, 1)">275</span>           <span style="color: rgba(0, 0, 255, 1)">if</span> (currentModalCameraId &amp;&amp; (index === currentModalCameraId - 1) &amp;&amp; modal &amp;&amp; modal.style.display === 'flex' &amp;&amp; modalctx &amp;&amp;<span style="color: rgba(0, 0, 0, 1)"> modalcanvas) {
</span><span style="color: rgba(0, 128, 128, 1)">276</span> <span style="color: rgba(0, 0, 0, 1)">            displayFrame(event.data, modalctx, modalcanvas);
</span><span style="color: rgba(0, 128, 128, 1)">277</span> <span style="color: rgba(0, 0, 0, 1)">          }
</span><span style="color: rgba(0, 128, 128, 1)">278</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">279</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)">280</span> 
<span style="color: rgba(0, 128, 128, 1)">281</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">-------- 2.3 onclose事件</span>
<span style="color: rgba(0, 128, 128, 1)">282</span>       ws[index].onclose = <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (event) {
</span><span style="color: rgba(0, 128, 128, 1)">283</span>         console.log("ws[" + index + "]:" + urlitem + "连接已关闭"<span style="color: rgba(0, 0, 0, 1)">, event.code, event.reason);
</span><span style="color: rgba(0, 128, 128, 1)">284</span> 
<span style="color: rgba(0, 128, 128, 1)">285</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">------------补充：自动重连逻辑</span>
<span style="color: rgba(0, 128, 128, 1)">286</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (!reconnectAttempts[index]) reconnectAttempts[index] = 0<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">287</span> 
<span style="color: rgba(0, 128, 128, 1)">288</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (reconnectAttempts[index] &lt;<span style="color: rgba(0, 0, 0, 1)"> MAX_RECONNECT_ATTEMPTS) {
</span><span style="color: rgba(0, 128, 128, 1)">289</span>           reconnectAttempts[index]++<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">290</span>           showConnectionStatus(`摄像头${index + 1}重连中(${reconnectAttempts[index]}/${MAX_RECONNECT_ATTEMPTS})`, 'warning');/<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">/后续调用vue自身方法</span>
<span style="color: rgba(0, 128, 128, 1)">291</span> 
<span style="color: rgba(0, 128, 128, 1)">292</span>           <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">补充</span>
<span style="color: rgba(0, 128, 128, 1)">293</span>           <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 清理该连接的旧定时器</span>
<span style="color: rgba(0, 128, 128, 1)">294</span>           <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (reconnectTimeouts[index]) {
</span><span style="color: rgba(0, 128, 128, 1)">295</span> <span style="color: rgba(0, 0, 0, 1)">            clearTimeout(reconnectTimeouts[index]);
</span><span style="color: rgba(0, 128, 128, 1)">296</span> <span style="color: rgba(0, 0, 0, 1)">          }
</span><span style="color: rgba(0, 128, 128, 1)">297</span> 
<span style="color: rgba(0, 128, 128, 1)">298</span>           const timeoutid = setTimeout(() =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)">299</span> <span style="color: rgba(0, 0, 0, 1)">            console.log(`尝试重连ws[${index}], 第${reconnectAttempts[index]}次`);
</span><span style="color: rgba(0, 128, 128, 1)">300</span> 
<span style="color: rgba(0, 128, 128, 1)">301</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">补充</span>
<span style="color: rgba(0, 128, 128, 1)">302</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 清理连接状态</span>
<span style="color: rgba(0, 128, 128, 1)">303</span>             <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (ws[index]) {
</span><span style="color: rgba(0, 128, 128, 1)">304</span>               <span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)">305</span> <span style="color: rgba(0, 0, 0, 1)">                ws[index].close();
</span><span style="color: rgba(0, 128, 128, 1)">306</span>               } <span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (e) { }
</span><span style="color: rgba(0, 128, 128, 1)">307</span>               ws[index] = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">308</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)">309</span> <span style="color: rgba(0, 0, 0, 1)">            connectSingleWebSocket(urlitem, index);
</span><span style="color: rgba(0, 128, 128, 1)">310</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">补充</span>
<span style="color: rgba(0, 128, 128, 1)">311</span>             reconnectTimeouts[index] = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">312</span> <span style="color: rgba(0, 0, 0, 1)">          }, RECONNECT_DELAY);
</span><span style="color: rgba(0, 128, 128, 1)">313</span> 
<span style="color: rgba(0, 128, 128, 1)">314</span>           <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">追加内存管理</span>
<span style="color: rgba(0, 128, 128, 1)">315</span> <span style="color: rgba(0, 0, 0, 1)">          globalTimeouts.push(timeoutid);
</span><span style="color: rgba(0, 128, 128, 1)">316</span>           reconnectTimeouts[index] =<span style="color: rgba(0, 0, 0, 1)"> timeoutid;
</span><span style="color: rgba(0, 128, 128, 1)">317</span> 
<span style="color: rgba(0, 128, 128, 1)">318</span>         } <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)">319</span>           showConnectionStatus(`摄像头${index + 1}连接失败`, 'error');<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">//后续调用vue自身方法</span>
<span style="color: rgba(0, 128, 128, 1)">320</span>           <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">显示连接失败状态</span>
<span style="color: rgba(0, 128, 128, 1)">321</span>           <span style="color: rgba(0, 0, 255, 1)">if</span> (ctx[index] &amp;&amp;<span style="color: rgba(0, 0, 0, 1)"> canvasElementArr[index]) {
</span><span style="color: rgba(0, 128, 128, 1)">322</span>             ctx[index].fillStyle = '#ff4d4f'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">323</span>             ctx[index].fillRect(0, 0<span style="color: rgba(0, 0, 0, 1)">, canvasElementArr[index].width, canvasElementArr[index].height);
</span><span style="color: rgba(0, 128, 128, 1)">324</span>             ctx[index].fillStyle = 'white'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">325</span>             ctx[index].font = '14px Arial'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">326</span>             ctx[index].textAlign = 'center'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">327</span>             ctx[index].fillText('ws[index].onclose事件连接失败', canvasElementArr[index].width / 2, canvasElementArr[index].height / 2<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">328</span> <span style="color: rgba(0, 0, 0, 1)">          }
</span><span style="color: rgba(0, 128, 128, 1)">329</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">330</span>       };<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">onclose事件</span>
<span style="color: rgba(0, 128, 128, 1)">331</span> 
<span style="color: rgba(0, 128, 128, 1)">332</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">-------- 2.4 onerror事件</span>
<span style="color: rgba(0, 128, 128, 1)">333</span>       ws[index].onerror = <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (error) {
</span><span style="color: rgba(0, 128, 128, 1)">334</span>         console.log("ws[" + index + "]:" + urlitem + "连接出现错误：" +<span style="color: rgba(0, 0, 0, 1)"> error);
</span><span style="color: rgba(0, 128, 128, 1)">335</span>         showConnectionStatus(`摄像头${index + 1}连接错误`, 'error');<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">后续调用vue自身方法</span>
<span style="color: rgba(0, 128, 128, 1)">336</span>       };<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">onerror事件</span>
<span style="color: rgba(0, 128, 128, 1)">337</span>     } <span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (error) {
</span><span style="color: rgba(0, 128, 128, 1)">338</span> <span style="color: rgba(0, 0, 0, 1)">      console.error(`创建WebSocket[${index}]失败：`, error);
</span><span style="color: rgba(0, 128, 128, 1)">339</span>       showConnectionStatus(`摄像头${index + 1}创建失败`, 'error'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">340</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">341</span> <span style="color: rgba(0, 0, 0, 1)">  });
</span><span style="color: rgba(0, 128, 128, 1)">342</span> <span style="color: rgba(0, 0, 0, 1)">}
</span><span style="color: rgba(0, 128, 128, 1)">343</span> 
<span style="color: rgba(0, 128, 128, 1)">344</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">5- 构建网页客户端断开连接WebSocket服务端</span>
<span style="color: rgba(0, 128, 128, 1)">345</span> <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> disconnectWebSocket(){
</span><span style="color: rgba(0, 128, 128, 1)">346</span>   <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)">(ws){
</span><span style="color: rgba(0, 128, 128, 1)">347</span>     ws.forEach((wsitem,index)=&gt;<span style="color: rgba(0, 0, 0, 1)">{
</span><span style="color: rgba(0, 128, 128, 1)">348</span>       <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)">(wsitem){
</span><span style="color: rgba(0, 128, 128, 1)">349</span> <span style="color: rgba(0, 0, 0, 1)">        wsitem.close();
</span><span style="color: rgba(0, 128, 128, 1)">350</span>         ws[index] = <span style="color: rgba(0, 0, 255, 1)">null</span>;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">恢复初始状态</span>
<span style="color: rgba(0, 128, 128, 1)">351</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)">352</span> <span style="color: rgba(0, 0, 0, 1)">    });
</span><span style="color: rgba(0, 128, 128, 1)">353</span>     ws = [];<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">恢复暂存数组初始状态</span>
<span style="color: rgba(0, 128, 128, 1)">354</span> <span style="color: rgba(0, 0, 0, 1)">  }
</span><span style="color: rgba(0, 128, 128, 1)">355</span> <span style="color: rgba(0, 0, 0, 1)">}
</span><span style="color: rgba(0, 128, 128, 1)">356</span> 
<span style="color: rgba(0, 128, 128, 1)">357</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">6- 执行连接函数调用 （最多内部连4个websocket）</span>
<span style="color: rgba(0, 128, 128, 1)">358</span> <span style="color: rgba(0, 0, 0, 1)">  connectWebSocket();
</span><span style="color: rgba(0, 128, 128, 1)">359</span> 
<span style="color: rgba(0, 128, 128, 1)">360</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">7- 执行调用关闭</span>
<span style="color: rgba(0, 128, 128, 1)">361</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 页面卸载时清理资源----通过页面事件监听</span>
<span style="color: rgba(0, 128, 128, 1)">362</span>   window.addEventListener('beforeunload', <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> () {
</span><span style="color: rgba(0, 128, 128, 1)">363</span> <span style="color: rgba(0, 0, 0, 1)">    disconnectWebSocket();
</span><span style="color: rgba(0, 128, 128, 1)">364</span> <span style="color: rgba(0, 0, 0, 1)">  });
</span><span style="color: rgba(0, 128, 128, 1)">365</span> 
<span style="color: rgba(0, 128, 128, 1)">366</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">8- 视频区域div点击事件 弹出弹出框放大视频显示   ---- 弹出框&lt;video&gt;也需要替换为&lt;canvas&gt;!</span>
<span style="color: rgba(0, 128, 128, 1)">367</span>   videoContainers.forEach(container =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)">368</span>     container.addEventListener('click',<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)">(){
</span><span style="color: rgba(0, 128, 128, 1)">369</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">1 先把原有弹出框&lt;video&gt;修改为&lt;canvas&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">370</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">原有结构参考</span>
<span style="color: rgba(0, 128, 128, 1)">371</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> &lt;div id="videoModal" class="modal"&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">372</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;div class="modal-content"&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">373</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">     &lt;span class="close-btn"&gt;&amp;times;&lt;/span&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">374</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">     &lt;video id="modalVideo" autoplay controls&gt;&lt;/video&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">375</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">     &lt;div class="modal-camera-label"&gt;&lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">376</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   &lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">377</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> &lt;/div&gt;</span>
<span style="color: rgba(0, 128, 128, 1)">378</span> 
<span style="color: rgba(0, 128, 128, 1)">379</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> ---1.1 先查找到要被替换元素本身</span>
<span style="color: rgba(0, 128, 128, 1)">380</span>       const videoelement = document.querySelector('#modalVideo'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">381</span>       <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)">(videoelement){
</span><span style="color: rgba(0, 128, 128, 1)">382</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> ---1.2 再创建一个新的替换元素</span>
<span style="color: rgba(0, 128, 128, 1)">383</span>         const popcanvas = document.createElement("canvas"<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">384</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> ---1.3 新元素沿用原来的id--换个新的吧</span>
<span style="color: rgba(0, 128, 128, 1)">385</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">popcanvas.id = 'modalVideo';</span>
<span style="color: rgba(0, 128, 128, 1)">386</span>         popcanvas.id = 'modalCanvas'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">387</span> 
<span style="color: rgba(0, 128, 128, 1)">388</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> //补充：设置canvas内图片的分辨率</span>
<span style="color: rgba(0, 128, 128, 1)">389</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> popcanvas.width = 800;</span>
<span style="color: rgba(0, 128, 128, 1)">390</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> popcanvas.height = 600;</span>
<span style="color: rgba(0, 128, 128, 1)">391</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">以上匹配会导致画布不能充满div区域；</span>
<span style="color: rgba(0, 128, 128, 1)">392</span> 
<span style="color: rgba(0, 128, 128, 1)">393</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 让弹出框canvas自适应弹窗区域</span>
<span style="color: rgba(0, 128, 128, 1)">394</span>         const modalContent = modal.querySelector('.modal-content') ||<span style="color: rgba(0, 0, 0, 1)"> modal;
</span><span style="color: rgba(0, 128, 128, 1)">395</span>         const mrect =<span style="color: rgba(0, 0, 0, 1)"> modalContent.getBoundingClientRect();
</span><span style="color: rgba(0, 128, 128, 1)">396</span>         popcanvas.width = Math.max(1<span style="color: rgba(0, 0, 0, 1)">, Math.floor(mrect.width));
</span><span style="color: rgba(0, 128, 128, 1)">397</span>         popcanvas.height = Math.max(1<span style="color: rgba(0, 0, 0, 1)">, Math.floor(mrect.height));
</span><span style="color: rgba(0, 128, 128, 1)">398</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> ---1.4 通过被替换元素的直接父元素，将被替换元素替换为新元素</span>
<span style="color: rgba(0, 128, 128, 1)">399</span> <span style="color: rgba(0, 0, 0, 1)">        videoelement.parentNode.replaceChild(popcanvas,videoelement);
</span><span style="color: rgba(0, 128, 128, 1)">400</span> 
<span style="color: rgba(0, 128, 128, 1)">401</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)">402</span> 
<span style="color: rgba(0, 128, 128, 1)">403</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> //2 给弹出框内的新元素&lt;canvas&gt;设置基础配置:canvas、ctx</span>
<span style="color: rgba(0, 128, 128, 1)">404</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> var modalcanvas = document.getElementById('modalCanvas');</span>
<span style="color: rgba(0, 128, 128, 1)">405</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> var modalctx = modalcanvas.getContext('2d');</span>
<span style="color: rgba(0, 128, 128, 1)">406</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> modalctx.fillRect(0,0,modalcanvas.width,modalcanvas.height);</span>
<span style="color: rgba(0, 128, 128, 1)">407</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> modalctx.fillStyle = 'red';</span>
<span style="color: rgba(0, 128, 128, 1)">408</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> modalctx.font = '24px Arial';</span>
<span style="color: rgba(0, 128, 128, 1)">409</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> modalctx.textAlign = 'center';</span>
<span style="color: rgba(0, 128, 128, 1)">410</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> modalctx.fillText('等待连接...',modalcanvas.width/2,modalcanvas.height/2);</span>
<span style="color: rgba(0, 128, 128, 1)">411</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">--------------------------------------------------</span>
<span style="color: rgba(0, 128, 128, 1)">412</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">注意：--------以上这些代码可能后续调试需要放在下方if内部代码：modal.style.display = 'flex'; //视频弹出框整体div显示下方。因为没显示前操作canvas的width和height可能不起作用</span>
<span style="color: rgba(0, 128, 128, 1)">413</span> 
<span style="color: rgba(0, 128, 128, 1)">414</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">3 构建视频配置信息对象</span>
<span style="color: rgba(0, 128, 128, 1)">415</span>       const canvasElement = <span style="color: rgba(0, 0, 255, 1)">this</span>.querySelector('.videoCanvas'); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">被点击的canvas元素</span>
<span style="color: rgba(0, 128, 128, 1)">416</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">cameraId = this.getAttribute('data-camera');//获取被点击的视频div区域编号（注意，从1开始）</span>
<span style="color: rgba(0, 128, 128, 1)">417</span>       const clickedCameraId = <span style="color: rgba(0, 0, 255, 1)">this</span>.getAttribute('data-camera');<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">获取被点击的视频div区域编号（注意，从1开始）</span>
<span style="color: rgba(0, 128, 128, 1)">418</span>       currentModalCameraId = clickedCameraId; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 更新当前弹出框显示的摄像头ID</span>
<span style="color: rgba(0, 128, 128, 1)">419</span> 
<span style="color: rgba(0, 128, 128, 1)">420</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> const modal = document.getElementById('videoModal');//视频弹出框</span>
<span style="color: rgba(0, 128, 128, 1)">421</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> const modalCameraLabel = document.querySelector('.modal-camera-label');//弹出框底部显示视频名称标识</span>
<span style="color: rgba(0, 128, 128, 1)">422</span> 
<span style="color: rgba(0, 128, 128, 1)">423</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">根据点击的下标，获取对应的已有的ws实例，执行图像渲染</span>
<span style="color: rgba(0, 128, 128, 1)">424</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">if (canvasElement &amp;&amp; cameraId &amp;&amp; ws[cameraId - 1] != null) {</span>
<span style="color: rgba(0, 128, 128, 1)">425</span>       <span style="color: rgba(0, 0, 255, 1)">if</span> (canvasElement &amp;&amp; clickedCameraId &amp;&amp; ws[clickedCameraId - 1] != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">) {
</span><span style="color: rgba(0, 128, 128, 1)">426</span> 
<span style="color: rgba(0, 128, 128, 1)">427</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">modalCameraLabel.textContent = 'camera'+ cameraId; //显示视频编号名称</span>
<span style="color: rgba(0, 128, 128, 1)">428</span>         modalCameraLabel.textContent = 'camera'+ clickedCameraId; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">显示视频编号名称</span>
<span style="color: rgba(0, 128, 128, 1)">429</span>         modal.style.display = 'flex'; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">视频弹出框整体div显示</span>
<span style="color: rgba(0, 128, 128, 1)">430</span> 
<span style="color: rgba(0, 128, 128, 1)">431</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">上方外层移到此处</span>
<span style="color: rgba(0, 128, 128, 1)">432</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">给弹出框内的新元素&lt;canvas&gt;设置基础配置:canvas、ctx</span>
<span style="color: rgba(0, 128, 128, 1)">433</span>         modalcanvas = document.getElementById('modalCanvas'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">434</span>         modalctx = modalcanvas.getContext('2d'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">435</span> 
<span style="color: rgba(0, 128, 128, 1)">436</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">补充：画布自适应显示 监听窗口尺寸变化，保持弹窗canvas自适应</span>
<span style="color: rgba(0, 128, 128, 1)">437</span>         const resizeModalCanvas = () =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)">438</span>           const modalContent = modal.querySelector('.modal-content') ||<span style="color: rgba(0, 0, 0, 1)"> modal;
</span><span style="color: rgba(0, 128, 128, 1)">439</span>           const mrect =<span style="color: rgba(0, 0, 0, 1)"> modalContent.getBoundingClientRect();
</span><span style="color: rgba(0, 128, 128, 1)">440</span>           const w = Math.max(1<span style="color: rgba(0, 0, 0, 1)">, Math.floor(mrect.width));
</span><span style="color: rgba(0, 128, 128, 1)">441</span>           const h = Math.max(1<span style="color: rgba(0, 0, 0, 1)">, Math.floor(mrect.height));
</span><span style="color: rgba(0, 128, 128, 1)">442</span>           <span style="color: rgba(0, 0, 255, 1)">if</span> (modalcanvas.width !== w || modalcanvas.height !==<span style="color: rgba(0, 0, 0, 1)"> h) {
</span><span style="color: rgba(0, 128, 128, 1)">443</span>             modalcanvas.width =<span style="color: rgba(0, 0, 0, 1)"> w;
</span><span style="color: rgba(0, 128, 128, 1)">444</span>             modalcanvas.height =<span style="color: rgba(0, 0, 0, 1)"> h;
</span><span style="color: rgba(0, 128, 128, 1)">445</span> <span style="color: rgba(0, 0, 0, 1)">          }
</span><span style="color: rgba(0, 128, 128, 1)">446</span> <span style="color: rgba(0, 0, 0, 1)">        };
</span><span style="color: rgba(0, 128, 128, 1)">447</span> 
<span style="color: rgba(0, 128, 128, 1)">448</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">window.addEventListener('resize', resizeModalCanvas);</span>
<span style="color: rgba(0, 128, 128, 1)">449</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 移除之前的resize监听器，避免重复添加</span>
<span style="color: rgba(0, 128, 128, 1)">450</span>         <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (resizeHandler) {
</span><span style="color: rgba(0, 128, 128, 1)">451</span>           window.removeEventListener('resize'<span style="color: rgba(0, 0, 0, 1)">, resizeHandler);
</span><span style="color: rgba(0, 128, 128, 1)">452</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">453</span>         resizeHandler =<span style="color: rgba(0, 0, 0, 1)"> resizeModalCanvas;
</span><span style="color: rgba(0, 128, 128, 1)">454</span>         window.addEventListener('resize'<span style="color: rgba(0, 0, 0, 1)">, resizeHandler);
</span><span style="color: rgba(0, 128, 128, 1)">455</span>         globalEventListeners.push({element: window, event: 'resize'<span style="color: rgba(0, 0, 0, 1)">, handler: resizeHandler});
</span><span style="color: rgba(0, 128, 128, 1)">456</span> 
<span style="color: rgba(0, 128, 128, 1)">457</span> <span style="color: rgba(0, 0, 0, 1)">        resizeModalCanvas();
</span><span style="color: rgba(0, 128, 128, 1)">458</span>         modalctx.fillStyle = '#333'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">459</span>         modalctx.fillRect(0, 0<span style="color: rgba(0, 0, 0, 1)">, modalcanvas.width, modalcanvas.height);
</span><span style="color: rgba(0, 128, 128, 1)">460</span>         modalctx.fillStyle = 'white'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">461</span>         modalctx.font = '20px Arial'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">462</span>         modalctx.textAlign = 'center'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">463</span>         modalctx.fillText('等待图像...', modalcanvas.width / 2, modalcanvas.height / 2<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">464</span> 
<span style="color: rgba(0, 128, 128, 1)">465</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">canvas 图片帧显示</span>
<span style="color: rgba(0, 128, 128, 1)">466</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">ws[cameraId - 1].onmessage = function (event) {</span>
<span style="color: rgba(0, 128, 128, 1)">467</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">修改为同时渲染小窗口和弹出框</span>
<span style="color: rgba(0, 128, 128, 1)">468</span>         ws[clickedCameraId - 1].onmessage = <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (event) {
</span><span style="color: rgba(0, 128, 128, 1)">469</span>           <span style="color: rgba(0, 0, 255, 1)">if</span> (event.data <span style="color: rgba(0, 0, 255, 1)">instanceof</span><span style="color: rgba(0, 0, 0, 1)"> Blob) {
</span><span style="color: rgba(0, 128, 128, 1)">470</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">displayFrame(event.data, modalctx, modalcanvas);//帧显示</span>
<span style="color: rgba(0, 128, 128, 1)">471</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 始终渲染小窗口</span>
<span style="color: rgba(0, 128, 128, 1)">472</span>             displayFrame(event.data, ctx[clickedCameraId - 1], canvasElementArr[clickedCameraId - 1<span style="color: rgba(0, 0, 0, 1)">]);
</span><span style="color: rgba(0, 128, 128, 1)">473</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 如果弹出框显示且是当前摄像头，也渲染弹出框</span>
<span style="color: rgba(0, 128, 128, 1)">474</span>             <span style="color: rgba(0, 0, 255, 1)">if</span> (modal.style.display === 'flex' &amp;&amp; modalctx &amp;&amp; modalcanvas &amp;&amp; currentModalCameraId ==<span style="color: rgba(0, 0, 0, 1)"> clickedCameraId) {
</span><span style="color: rgba(0, 128, 128, 1)">475</span> <span style="color: rgba(0, 0, 0, 1)">              displayFrame(event.data, modalctx, modalcanvas);
</span><span style="color: rgba(0, 128, 128, 1)">476</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)">477</span> <span style="color: rgba(0, 0, 0, 1)">          }
</span><span style="color: rgba(0, 128, 128, 1)">478</span> <span style="color: rgba(0, 0, 0, 1)">        };
</span><span style="color: rgba(0, 128, 128, 1)">479</span> 
<span style="color: rgba(0, 128, 128, 1)">480</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">console.log("ws["+(cameraId-1)+"]"+"弹出框放大显示已执行！");</span>
<span style="color: rgba(0, 128, 128, 1)">481</span>         console.log("ws["+(clickedCameraId-1)+"]"+"弹出框放大显示已执行！"<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">482</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)">483</span> <span style="color: rgba(0, 0, 0, 1)">    });
</span><span style="color: rgba(0, 128, 128, 1)">484</span> <span style="color: rgba(0, 0, 0, 1)">  }
</span><span style="color: rgba(0, 128, 128, 1)">485</span> <span style="color: rgba(0, 0, 0, 1)">  );
</span><span style="color: rgba(0, 128, 128, 1)">486</span> 
<span style="color: rgba(0, 128, 128, 1)">487</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">9- 弹出框关闭按钮监听事件</span>
<span style="color: rgba(0, 128, 128, 1)">488</span>   const closeBtn = document.querySelector('.close-btn');<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">弹出框关闭按钮区域</span>
<span style="color: rgba(0, 128, 128, 1)">489</span>   <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (closeBtn) {
</span><span style="color: rgba(0, 128, 128, 1)">490</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> closeBtn.addEventListener('click', function () {</span>
<span style="color: rgba(0, 128, 128, 1)">491</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   modal.style.display = 'none';</span>
<span style="color: rgba(0, 128, 128, 1)">492</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   //-------- 9.1 恢复对应视频区域小窗口的图片帧显示</span>
<span style="color: rgba(0, 128, 128, 1)">493</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   if (cameraId != null &amp;&amp; ws[cameraId-1]) {</span>
<span style="color: rgba(0, 128, 128, 1)">494</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">     ws[cameraId - 1].onmessage = function (event) {//重新覆盖onmessage事件，在小窗口上渲染图片帧</span>
<span style="color: rgba(0, 128, 128, 1)">495</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">       if (event.data instanceof Blob) {</span>
<span style="color: rgba(0, 128, 128, 1)">496</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">         displayFrame(event.data, ctx[cameraId - 1], canvasElementArr[cameraId - 1]);</span>
<span style="color: rgba(0, 128, 128, 1)">497</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">       }</span>
<span style="color: rgba(0, 128, 128, 1)">498</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">     };</span>
<span style="color: rgba(0, 128, 128, 1)">499</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   }</span>
<span style="color: rgba(0, 128, 128, 1)">500</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">优化以上内容</span>
<span style="color: rgba(0, 128, 128, 1)">501</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 移除之前的click事件监听器，避免重复添加</span>
<span style="color: rgba(0, 128, 128, 1)">502</span>     const existingListeners = globalEventListeners.filter(item =&gt;
<span style="color: rgba(0, 128, 128, 1)">503</span>       item.element === closeBtn &amp;&amp; item.event === 'click'
<span style="color: rgba(0, 128, 128, 1)">504</span> <span style="color: rgba(0, 0, 0, 1)">    );
</span><span style="color: rgba(0, 128, 128, 1)">505</span>     existingListeners.forEach(item =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)">506</span> <span style="color: rgba(0, 0, 0, 1)">      item.element.removeEventListener(item.event, item.handler);
</span><span style="color: rgba(0, 128, 128, 1)">507</span> <span style="color: rgba(0, 0, 0, 1)">    });
</span><span style="color: rgba(0, 128, 128, 1)">508</span> 
<span style="color: rgba(0, 128, 128, 1)">509</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 定义新的事件处理函数</span>
<span style="color: rgba(0, 128, 128, 1)">510</span>     const closeBtnHandler = <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> () {
</span><span style="color: rgba(0, 128, 128, 1)">511</span>       modal.style.display = 'none'<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">512</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> //-------- 9.1 恢复对应视频区域小窗口的图片帧显示</span>
<span style="color: rgba(0, 128, 128, 1)">513</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> if (cameraId != null &amp;&amp; ws[cameraId - 1]) {</span>
<span style="color: rgba(0, 128, 128, 1)">514</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   ws[cameraId - 1].onmessage = function (event) {//重新覆盖onmessage事件，在小窗口上渲染图片帧</span>
<span style="color: rgba(0, 128, 128, 1)">515</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">     if (event.data instanceof Blob) {</span>
<span style="color: rgba(0, 128, 128, 1)">516</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">       displayFrame(event.data, ctx[cameraId - 1], canvasElementArr[cameraId - 1]);</span>
<span style="color: rgba(0, 128, 128, 1)">517</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">     }</span>
<span style="color: rgba(0, 128, 128, 1)">518</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   };</span>
<span style="color: rgba(0, 128, 128, 1)">519</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> }</span>
<span style="color: rgba(0, 128, 128, 1)">520</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">以上内容不需要特殊恢复了，因为迭代代码后，再弹出弹出框的时候，也是一直保证小窗口也在显示的</span>
<span style="color: rgba(0, 128, 128, 1)">521</span> 
<span style="color: rgba(0, 128, 128, 1)">522</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">-------- 9.2 清除弹出框canvas的图片帧显示</span>
<span style="color: rgba(0, 128, 128, 1)">523</span>       <span style="color: rgba(0, 0, 255, 1)">if</span> (modalctx != <span style="color: rgba(0, 0, 255, 1)">null</span> &amp;&amp; modalcanvas != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">) {
</span><span style="color: rgba(0, 128, 128, 1)">524</span>         modalctx.clearRect(0, 0<span style="color: rgba(0, 0, 0, 1)">, modalcanvas.width, modalcanvas.height);
</span><span style="color: rgba(0, 128, 128, 1)">525</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)">526</span> 
<span style="color: rgba(0, 128, 128, 1)">527</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 重置弹出框相关变量</span>
<span style="color: rgba(0, 128, 128, 1)">528</span>       modalcanvas = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">529</span>       modalctx = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">530</span>       currentModalCameraId = <span style="color: rgba(0, 0, 255, 1)">null</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 清除当前弹出框摄像头ID</span>
<span style="color: rgba(0, 128, 128, 1)">531</span> 
<span style="color: rgba(0, 128, 128, 1)">532</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">});</span>
<span style="color: rgba(0, 128, 128, 1)">533</span> 
<span style="color: rgba(0, 128, 128, 1)">534</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 移除resize事件监听器</span>
<span style="color: rgba(0, 128, 128, 1)">535</span>       <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (resizeHandler) {
</span><span style="color: rgba(0, 128, 128, 1)">536</span>         window.removeEventListener('resize'<span style="color: rgba(0, 0, 0, 1)">, resizeHandler);
</span><span style="color: rgba(0, 128, 128, 1)">537</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 从全局列表中移除</span>
<span style="color: rgba(0, 128, 128, 1)">538</span>         const index = globalEventListeners.findIndex(item =&gt;
<span style="color: rgba(0, 128, 128, 1)">539</span>           item.element === window &amp;&amp; item.event === 'resize' &amp;&amp; item.handler ===<span style="color: rgba(0, 0, 0, 1)"> resizeHandler
</span><span style="color: rgba(0, 128, 128, 1)">540</span> <span style="color: rgba(0, 0, 0, 1)">        );
</span><span style="color: rgba(0, 128, 128, 1)">541</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (index !== -1<span style="color: rgba(0, 0, 0, 1)">) {
</span><span style="color: rgba(0, 128, 128, 1)">542</span>           globalEventListeners.splice(index, 1<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">543</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">544</span>         resizeHandler = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">545</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)">546</span> <span style="color: rgba(0, 0, 0, 1)">    };
</span><span style="color: rgba(0, 128, 128, 1)">547</span> 
<span style="color: rgba(0, 128, 128, 1)">548</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 添加新的事件监听器并记录</span>
<span style="color: rgba(0, 128, 128, 1)">549</span>     closeBtn.addEventListener('click'<span style="color: rgba(0, 0, 0, 1)">, closeBtnHandler);
</span><span style="color: rgba(0, 128, 128, 1)">550</span>     globalEventListeners.push({ element: closeBtn, event: 'click'<span style="color: rgba(0, 0, 0, 1)">, handler: closeBtnHandler });
</span><span style="color: rgba(0, 128, 128, 1)">551</span> <span style="color: rgba(0, 0, 0, 1)">  }
</span><span style="color: rgba(0, 128, 128, 1)">552</span> 
<span style="color: rgba(0, 128, 128, 1)">553</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">}</span>
<span style="color: rgba(0, 128, 128, 1)">554</span> 
<span style="color: rgba(0, 128, 128, 1)">555</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">追加： 10- 内存优化管理 </span>
<span style="color: rgba(0, 128, 128, 1)">556</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> ------------10.1  页面可见性变化时的资源管理</span>
<span style="color: rgba(0, 128, 128, 1)">557</span>   document.addEventListener('visibilitychange', <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> () {
</span><span style="color: rgba(0, 128, 128, 1)">558</span>     <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (document.hidden) {
</span><span style="color: rgba(0, 128, 128, 1)">559</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 页面切换到后台时，清理资源但不断开连接</span>
<span style="color: rgba(0, 128, 128, 1)">560</span>       console.log('页面切换到后台，清理部分资源'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">561</span> 
<span style="color: rgba(0, 128, 128, 1)">562</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 清理定时器</span>
<span style="color: rgba(0, 128, 128, 1)">563</span>       globalTimeouts.forEach(timeoutId =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)">564</span> <span style="color: rgba(0, 0, 0, 1)">        clearTimeout(timeoutId);
</span><span style="color: rgba(0, 128, 128, 1)">565</span> <span style="color: rgba(0, 0, 0, 1)">      });
</span><span style="color: rgba(0, 128, 128, 1)">566</span>       globalTimeouts =<span style="color: rgba(0, 0, 0, 1)"> [];
</span><span style="color: rgba(0, 128, 128, 1)">567</span> 
<span style="color: rgba(0, 128, 128, 1)">568</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 清理状态提示元素</span>
<span style="color: rgba(0, 128, 128, 1)">569</span>       const statusElement = document.getElementById('connection-status'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">570</span>       <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (statusElement) {
</span><span style="color: rgba(0, 128, 128, 1)">571</span> <span style="color: rgba(0, 0, 0, 1)">        statusElement.remove();
</span><span style="color: rgba(0, 128, 128, 1)">572</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)">573</span>     } <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)">574</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 页面重新可见时</span>
<span style="color: rgba(0, 128, 128, 1)">575</span>       console.log('页面重新可见'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">576</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">577</span> <span style="color: rgba(0, 0, 0, 1)">  });
</span><span style="color: rgba(0, 128, 128, 1)">578</span> 
<span style="color: rgba(0, 128, 128, 1)">579</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> ------------10.2  页面失去焦点时的额外清理</span>
<span style="color: rgba(0, 128, 128, 1)">580</span>   window.addEventListener('blur', <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> () {
</span><span style="color: rgba(0, 128, 128, 1)">581</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 清理可能残留的定时器</span>
<span style="color: rgba(0, 128, 128, 1)">582</span>     globalTimeouts.forEach(timeoutId =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)">583</span> <span style="color: rgba(0, 0, 0, 1)">      clearTimeout(timeoutId);
</span><span style="color: rgba(0, 128, 128, 1)">584</span> <span style="color: rgba(0, 0, 0, 1)">    });
</span><span style="color: rgba(0, 128, 128, 1)">585</span>     globalTimeouts =<span style="color: rgba(0, 0, 0, 1)"> [];
</span><span style="color: rgba(0, 128, 128, 1)">586</span> <span style="color: rgba(0, 0, 0, 1)">  });
</span><span style="color: rgba(0, 128, 128, 1)">587</span> 
<span style="color: rgba(0, 128, 128, 1)">588</span> }</pre>
</div>
<p>3.2.4 其他辅助变量及函数</p>
<div style="color: rgba(204, 204, 204, 1); font-family: Consolas, &quot;Courier New&quot;, monospace; font-weight: normal; font-size: 14px; line-height: 19px; white-space: pre">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">  1</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">图片帧兼容方案</span>
<span style="color: rgba(0, 128, 128, 1)">  2</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">全局变量用于资源管理</span>
<span style="color: rgba(0, 128, 128, 1)">  3</span> let globalWebrtcInstances =<span style="color: rgba(0, 0, 0, 1)"> [];
</span><span style="color: rgba(0, 128, 128, 1)">  4</span> let globalWebSocketInstances =<span style="color: rgba(0, 0, 0, 1)"> [];
</span><span style="color: rgba(0, 128, 128, 1)">  5</span> let reconnectAttempts =<span style="color: rgba(0, 0, 0, 1)"> {};
</span><span style="color: rgba(0, 128, 128, 1)">  6</span> const MAX_RECONNECT_ATTEMPTS = 3<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">  7</span> const RECONNECT_DELAY = 2000<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">  8</span> 
<span style="color: rgba(0, 128, 128, 1)">  9</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">新增修复：修复图片帧方式显示浏览器内存持续增长问题 -----全局定时器和事件监听器管理</span>
<span style="color: rgba(0, 128, 128, 1)"> 10</span> <span style="color: rgba(0, 0, 255, 1)">var</span> globalTimeouts =<span style="color: rgba(0, 0, 0, 1)"> [];
</span><span style="color: rgba(0, 128, 128, 1)"> 11</span> <span style="color: rgba(0, 0, 255, 1)">var</span> globalEventListeners =<span style="color: rgba(0, 0, 0, 1)"> [];
</span><span style="color: rgba(0, 128, 128, 1)"> 12</span> <span style="color: rgba(0, 0, 255, 1)">var</span> resizeHandler = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 13</span> <span style="color: rgba(0, 0, 255, 1)">var</span> reconnectTimeouts = []; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 管理重连定时器</span>
<span style="color: rgba(0, 128, 128, 1)"> 14</span> 
<span style="color: rgba(0, 128, 128, 1)"> 15</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">清理之前的连接资源</span>
<span style="color: rgba(0, 128, 128, 1)"> 16</span> <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> cleanupPreviousConnections() {
</span><span style="color: rgba(0, 128, 128, 1)"> 17</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">清理WebRTC连接</span>
<span style="color: rgba(0, 128, 128, 1)"> 18</span>   globalWebrtcInstances.forEach(instance =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)"> 19</span>     <span style="color: rgba(0, 0, 255, 1)">if</span> (instance &amp;&amp;<span style="color: rgba(0, 0, 0, 1)"> instance.instance) {
</span><span style="color: rgba(0, 128, 128, 1)"> 20</span> <span style="color: rgba(0, 0, 0, 1)">      instance.instance.disconnect();
</span><span style="color: rgba(0, 128, 128, 1)"> 21</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)"> 22</span> <span style="color: rgba(0, 0, 0, 1)">  });
</span><span style="color: rgba(0, 128, 128, 1)"> 23</span>   globalWebrtcInstances =<span style="color: rgba(0, 0, 0, 1)"> [];
</span><span style="color: rgba(0, 128, 128, 1)"> 24</span> 
<span style="color: rgba(0, 128, 128, 1)"> 25</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">清理WebSocket连接</span>
<span style="color: rgba(0, 128, 128, 1)"> 26</span>   globalWebSocketInstances.forEach((ws, index) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)"> 27</span>     <span style="color: rgba(0, 0, 255, 1)">if</span> (ws &amp;&amp; ws.readyState ===<span style="color: rgba(0, 0, 0, 1)"> WebSocket.OPEN) {
</span><span style="color: rgba(0, 128, 128, 1)"> 28</span> <span style="color: rgba(0, 0, 0, 1)">      ws.close();
</span><span style="color: rgba(0, 128, 128, 1)"> 29</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)"> 30</span> <span style="color: rgba(0, 0, 0, 1)">  });
</span><span style="color: rgba(0, 128, 128, 1)"> 31</span>   globalWebSocketInstances =<span style="color: rgba(0, 0, 0, 1)"> [];
</span><span style="color: rgba(0, 128, 128, 1)"> 32</span> 
<span style="color: rgba(0, 128, 128, 1)"> 33</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">-------------------------------------------追加补充部分---开始------------------------------------------------</span>
<span style="color: rgba(0, 128, 128, 1)"> 34</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">清理定时器</span>
<span style="color: rgba(0, 128, 128, 1)"> 35</span>   globalTimeouts.forEach(timeoutId =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)"> 36</span> <span style="color: rgba(0, 0, 0, 1)">    clearTimeout(timeoutId);
</span><span style="color: rgba(0, 128, 128, 1)"> 37</span> <span style="color: rgba(0, 0, 0, 1)">  });
</span><span style="color: rgba(0, 128, 128, 1)"> 38</span>   globalTimeouts =<span style="color: rgba(0, 0, 0, 1)"> [];
</span><span style="color: rgba(0, 128, 128, 1)"> 39</span> 
<span style="color: rgba(0, 128, 128, 1)"> 40</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">清理事件监听器</span>
<span style="color: rgba(0, 128, 128, 1)"> 41</span>   globalEventListeners.forEach(({ element, event, handler }) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)"> 42</span> <span style="color: rgba(0, 0, 0, 1)">    element.removeEventListener(event, handler);
</span><span style="color: rgba(0, 128, 128, 1)"> 43</span> <span style="color: rgba(0, 0, 0, 1)">  });
</span><span style="color: rgba(0, 128, 128, 1)"> 44</span>   globalEventListeners =<span style="color: rgba(0, 0, 0, 1)"> [];
</span><span style="color: rgba(0, 128, 128, 1)"> 45</span> 
<span style="color: rgba(0, 128, 128, 1)"> 46</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">清理resize监听器</span>
<span style="color: rgba(0, 128, 128, 1)"> 47</span>   <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (resizeHandler) {
</span><span style="color: rgba(0, 128, 128, 1)"> 48</span>     window.removeEventListener('resize'<span style="color: rgba(0, 0, 0, 1)">, resizeHandler);
</span><span style="color: rgba(0, 128, 128, 1)"> 49</span>     resizeHandler = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 50</span> <span style="color: rgba(0, 0, 0, 1)">  }
</span><span style="color: rgba(0, 128, 128, 1)"> 51</span> 
<span style="color: rgba(0, 128, 128, 1)"> 52</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">清理状态提示元素</span>
<span style="color: rgba(0, 128, 128, 1)"> 53</span>   const statusElement = document.getElementById('connection-status'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 54</span>   <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (statusElement) {
</span><span style="color: rgba(0, 128, 128, 1)"> 55</span> <span style="color: rgba(0, 0, 0, 1)">    statusElement.remove();
</span><span style="color: rgba(0, 128, 128, 1)"> 56</span> <span style="color: rgba(0, 0, 0, 1)">  }
</span><span style="color: rgba(0, 128, 128, 1)"> 57</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">-------------------------------------------追加补充部分---结束------------------------------------------------</span>
<span style="color: rgba(0, 128, 128, 1)"> 58</span>   
<span style="color: rgba(0, 128, 128, 1)"> 59</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">重置重连计数</span>
<span style="color: rgba(0, 128, 128, 1)"> 60</span>   reconnectAttempts =<span style="color: rgba(0, 0, 0, 1)"> {};
</span><span style="color: rgba(0, 128, 128, 1)"> 61</span>   
<span style="color: rgba(0, 128, 128, 1)"> 62</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">console.log('已清理所有之前的连接资源');</span>
<span style="color: rgba(0, 128, 128, 1)"> 63</span>   console.log('已清理所有之前的连接资源、定时器和事件监听器'<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 64</span> <span style="color: rgba(0, 0, 0, 1)">}
</span><span style="color: rgba(0, 128, 128, 1)"> 65</span> 
<span style="color: rgba(0, 128, 128, 1)"> 66</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">单个WebSocket重连函数</span>
<span style="color: rgba(0, 128, 128, 1)"> 67</span> <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> connectSingleWebSocket(urlitem, index) {
</span><span style="color: rgba(0, 128, 128, 1)"> 68</span>   <span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)"> 69</span>     ws[index] = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> WebSocket(urlitem);
</span><span style="color: rgba(0, 128, 128, 1)"> 70</span>     globalWebSocketInstances[index] =<span style="color: rgba(0, 0, 0, 1)"> ws[index];
</span><span style="color: rgba(0, 128, 128, 1)"> 71</span> 
<span style="color: rgba(0, 128, 128, 1)"> 72</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">重新绑定事件（复用上面的逻辑）</span>
<span style="color: rgba(0, 128, 128, 1)"> 73</span>     ws[index].onopen = <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> () {
</span><span style="color: rgba(0, 128, 128, 1)"> 74</span> <span style="color: rgba(0, 0, 0, 1)">      console.log(`ws[${index}]:${urlitem} 重连成功`);
</span><span style="color: rgba(0, 128, 128, 1)"> 75</span>       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">showConnectionStatus(`摄像头${index + 1}重连成功`, 'success');</span>
<span style="color: rgba(0, 128, 128, 1)"> 76</span>       reconnectAttempts[index] = 0<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 77</span> <span style="color: rgba(0, 0, 0, 1)">    };
</span><span style="color: rgba(0, 128, 128, 1)"> 78</span> 
<span style="color: rgba(0, 128, 128, 1)"> 79</span>     ws[index].onmessage = <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (event) {
</span><span style="color: rgba(0, 128, 128, 1)"> 80</span>       <span style="color: rgba(0, 0, 255, 1)">if</span> (event.data <span style="color: rgba(0, 0, 255, 1)">instanceof</span><span style="color: rgba(0, 0, 0, 1)"> Blob) {
</span><span style="color: rgba(0, 128, 128, 1)"> 81</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 始终渲染小窗口</span>
<span style="color: rgba(0, 128, 128, 1)"> 82</span> <span style="color: rgba(0, 0, 0, 1)">        displayFrame(event.data, ctx[index], canvasElementArr[index]);
</span><span style="color: rgba(0, 128, 128, 1)"> 83</span> 
<span style="color: rgba(0, 128, 128, 1)"> 84</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 如果当前索引与弹出框显示的摄像头索引匹配，且弹出框正在显示，则同时渲染弹出框</span>
<span style="color: rgba(0, 128, 128, 1)"> 85</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (currentModalCameraId &amp;&amp; (index === currentModalCameraId - 1) &amp;&amp; modal &amp;&amp; modal.style.display === 'flex' &amp;&amp; modalctx &amp;&amp;<span style="color: rgba(0, 0, 0, 1)"> modalcanvas) {
</span><span style="color: rgba(0, 128, 128, 1)"> 86</span> <span style="color: rgba(0, 0, 0, 1)">          displayFrame(event.data, modalctx, modalcanvas);
</span><span style="color: rgba(0, 128, 128, 1)"> 87</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)"> 88</span> 
<span style="color: rgba(0, 128, 128, 1)"> 89</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)"> 90</span> <span style="color: rgba(0, 0, 0, 1)">    };
</span><span style="color: rgba(0, 128, 128, 1)"> 91</span> 
<span style="color: rgba(0, 128, 128, 1)"> 92</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">重连的onclose和onerror事件处理与初始连接相同</span>
<span style="color: rgba(0, 128, 128, 1)"> 93</span>     ws[index].onclose = <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (event) {
</span><span style="color: rgba(0, 128, 128, 1)"> 94</span> <span style="color: rgba(0, 0, 0, 1)">      console.log(`ws[${index}] 重连后又关闭了`);
</span><span style="color: rgba(0, 128, 128, 1)"> 95</span>       <span style="color: rgba(0, 0, 255, 1)">if</span> (reconnectAttempts[index] &lt;<span style="color: rgba(0, 0, 0, 1)"> MAX_RECONNECT_ATTEMPTS) {
</span><span style="color: rgba(0, 128, 128, 1)"> 96</span>         reconnectAttempts[index]++<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 97</span>         setTimeout(() =&gt;<span style="color: rgba(0, 0, 0, 1)"> connectSingleWebSocket(urlitem, index), RECONNECT_DELAY);
</span><span style="color: rgba(0, 128, 128, 1)"> 98</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)"> 99</span> <span style="color: rgba(0, 0, 0, 1)">    };
</span><span style="color: rgba(0, 128, 128, 1)">100</span> 
<span style="color: rgba(0, 128, 128, 1)">101</span>     ws[index].onerror = <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (error) {
</span><span style="color: rgba(0, 128, 128, 1)">102</span> <span style="color: rgba(0, 0, 0, 1)">      console.error(`ws[${index}] 重连错误:`, error);
</span><span style="color: rgba(0, 128, 128, 1)">103</span> <span style="color: rgba(0, 0, 0, 1)">    };
</span><span style="color: rgba(0, 128, 128, 1)">104</span> 
<span style="color: rgba(0, 128, 128, 1)">105</span>   } <span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (error) {
</span><span style="color: rgba(0, 128, 128, 1)">106</span> <span style="color: rgba(0, 0, 0, 1)">    console.error(`重连WebSocket[${index}]失败:`, error);
</span><span style="color: rgba(0, 128, 128, 1)">107</span> <span style="color: rgba(0, 0, 0, 1)">  }
</span><span style="color: rgba(0, 128, 128, 1)">108</span> }</pre>
</div>
<p>&nbsp;</p>
</div>
<h2>4 模拟数据集构建（视频切割成图片帧 25fps）</h2>
<p>此环节是通过ffmpeg命令，将一个视频按照指定的帧率切割成一张张帧图片，以作为本地模拟服务端程序的模拟图片帧数据源。具体操作步骤命令可参考之前博文：https://www.cnblogs.com/Jesuslovesme/p/18818356</p>
<h2>5 模拟websocket服务端程序编写</h2>
<p>&nbsp;这个可根据个人擅长的开发语言编写，因为我主要是为了验证前端显示方案是否可以落地，所以后端程序只要能按一定频率取本地的帧图片并实时通过websocket发送给前端显示即可。我通过ai生成了一个验证测试的C#后端程序。</p>
<p>基于.NET 6.0的控制台应用程序代码如下：</p>
<div class="cnblogs_code">
<div class="cnblogs_code"><img id="code_img_closed_86dec11e-1700-4e9a-bee1-21d996a34dd5" class="code_img_closed lazyload" data-src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif"><img id="code_img_opened_86dec11e-1700-4e9a-bee1-21d996a34dd5" class="code_img_opened lazyload" style="display: none" data-src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif">
<div id="cnblogs_code_open_86dec11e-1700-4e9a-bee1-21d996a34dd5" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Fleck;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Text.Json;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Collections.Concurrent;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Net;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Net.Http;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Text;

</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> WebSocketServerApp
{
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Program
    {
        </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">readonly</span> ConcurrentDictionary&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, List&lt;IWebSocketConnection&gt;&gt; _connections = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)">();
        </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">readonly</span> ConcurrentDictionary&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, CancellationTokenSource&gt; _cancellationTokens = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)">();
        </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">string</span> _imagePath = <span style="color: rgba(128, 0, 0, 1)">@"</span><span style="color: rgba(128, 0, 0, 1)">D:\XX中心\总控系统项目\测试demo\图片帧demo\dash-video-to-img</span><span style="color: rgba(128, 0, 0, 1)">"</span>;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">图片帧文件夹存放位置</span>
        
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">async</span> Task Main(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">[] args)
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 启动HTTP服务器------路线1 </span>
            <span style="color: rgba(0, 0, 255, 1)">var</span> httpTask = StartHttpServer();<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">用于处理前端的模式请求确认 
            
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 启动WebSocket服务器  ----路线2</span>
            <span style="color: rgba(0, 0, 255, 1)">var</span> wsTask = StartWebSocketServer(); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">对接网页websocket，传输图片帧</span>
<span style="color: rgba(0, 0, 0, 1)">            
            Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">=== WebSocket服务器启动完成 ===</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">HTTP API服务: http://localhost:8080</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">WebSocket服务: ws://localhost:8081</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">);
            Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">测试URL:</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">- RTSP模式: http://localhost:8080/api/usdisplay?usid=2</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">- WebSocket模式: http://localhost:8080/api/usdisplay?usid=3</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">- WebSocket连接: ws://localhost:8081/api/websocket?usid=3&amp;cam=0</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">);
            Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">按 Ctrl+C 停止服务器</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 等待两个服务器</span>
            <span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> Task.WhenAll(httpTask, wsTask);
        }



        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">异步函数  启动HTTP服务器</span>
        <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">async</span><span style="color: rgba(0, 0, 0, 1)"> Task StartHttpServer()
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">1.</span>
            <span style="color: rgba(0, 0, 255, 1)">var</span> listener = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> HttpListener();
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 绑定到localhost与127.0.0.1，避免因Host不匹配导致返回系统400且无CORS头

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">2.</span>
            listener.Prefixes.Add(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://localhost:8080/</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            listener.Prefixes.Add(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://127.0.0.1:8080/</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 如需对外访问，可尝试开启以下通配符（需要管理员权限并配置urlacl）
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> listener.Prefixes.Add("http:</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">+:8080/");

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">3.</span>
<span style="color: rgba(0, 0, 0, 1)">            listener.Start();
            
            Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">HTTP服务器已启动: http://localhost:8080 与 http://127.0.0.1:8080</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">4.持续监控</span>
            <span style="color: rgba(0, 0, 255, 1)">while</span> (<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">
                {
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">5.获取访问请求上下文</span>
                    <span style="color: rgba(0, 0, 255, 1)">var</span> context = <span style="color: rgba(0, 0, 255, 1)">await</span> listener.GetContextAsync(); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">等待一个即将到来的请求操作</span>
                    _ = Task.Run(() =&gt; HandleHttpRequest(context));<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">开启一个线程，处理http请求</span>
<span style="color: rgba(0, 0, 0, 1)">                }
                </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (Exception ex)
                {
                    Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">HTTP服务器错误: {ex.Message}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                }
            }
        }
        
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">处理http请求</span>
        <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">async</span><span style="color: rgba(0, 0, 0, 1)"> Task HandleHttpRequest(HttpListenerContext context)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">
            {
                </span><span style="color: rgba(0, 0, 255, 1)">var</span> request = context.Request;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">请求上下文的客户端request</span>
                <span style="color: rgba(0, 0, 255, 1)">var</span> response = context.Response;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">请求上下文的服务端response

                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置反馈的CORS头</span>
                response.Headers.Add(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Access-Control-Allow-Origin</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">*</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                response.Headers.Add(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Access-Control-Allow-Methods</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">GET, POST, OPTIONS, PUT, DELETE</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                response.Headers.Add(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Access-Control-Allow-Headers</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Content-Type, Authorization, X-Requested-With, Accept, Origin</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                response.Headers.Add(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Access-Control-Allow-Credentials</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                response.Headers.Add(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Access-Control-Max-Age</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">86400</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                
                </span><span style="color: rgba(0, 0, 255, 1)">if</span> (request.HttpMethod == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">OPTIONS</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
                {
                    response.StatusCode </span>= <span style="color: rgba(128, 0, 128, 1)">200</span><span style="color: rgba(0, 0, 0, 1)">;
                    response.Close();
                    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
                }

                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">如果请求url不为空，且绝对地址为"/api/usdisplay"</span>
                <span style="color: rgba(0, 0, 255, 1)">if</span> (request.Url?.AbsolutePath == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/api/usdisplay</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
                {
                    </span><span style="color: rgba(0, 0, 255, 1)">var</span> usid = request.QueryString[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">usid</span><span style="color: rgba(128, 0, 0, 1)">"</span>];<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">获取到查询参数usid的值</span>
                    <span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.IsNullOrEmpty(usid))
                    {
                        response.StatusCode </span>= <span style="color: rgba(128, 0, 128, 1)">400</span><span style="color: rgba(0, 0, 0, 1)">;
                        </span><span style="color: rgba(0, 0, 255, 1)">var</span> errorBytes = Encoding.UTF8.GetBytes(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Missing usid parameter</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                        </span><span style="color: rgba(0, 0, 255, 1)">await</span> response.OutputStream.WriteAsync(errorBytes, <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">, errorBytes.Length);
                    }
                    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
                    {
                        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">构建模式反馈json （两种模式，反馈的json模板不一样）</span>
                        <span style="color: rgba(0, 0, 255, 1)">var</span> configResponse =<span style="color: rgba(0, 0, 0, 1)"> GetDisplayConfig(usid);
                        </span><span style="color: rgba(0, 0, 255, 1)">var</span> jsonResponse =<span style="color: rgba(0, 0, 0, 1)"> JsonSerializer.Serialize(configResponse);
                        </span><span style="color: rgba(0, 0, 255, 1)">var</span> responseBytes =<span style="color: rgba(0, 0, 0, 1)"> Encoding.UTF8.GetBytes(jsonResponse);
                        
                        response.ContentType </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">application/json</span><span style="color: rgba(128, 0, 0, 1)">"</span>;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">设置返回数据类型</span>
                        response.StatusCode = <span style="color: rgba(128, 0, 128, 1)">200</span>;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">设置返回状态码</span>
                        <span style="color: rgba(0, 0, 255, 1)">await</span> response.OutputStream.WriteAsync(responseBytes, <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">, responseBytes.Length);
                    }
                }
                </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
                {
                    response.StatusCode </span>= <span style="color: rgba(128, 0, 128, 1)">404</span><span style="color: rgba(0, 0, 0, 1)">;
                    </span><span style="color: rgba(0, 0, 255, 1)">var</span> notFoundBytes = Encoding.UTF8.GetBytes(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Not Found</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                    </span><span style="color: rgba(0, 0, 255, 1)">await</span> response.OutputStream.WriteAsync(notFoundBytes, <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">, notFoundBytes.Length);
                }
                
                response.Close();
            }
            </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (Exception ex)
            {
                Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">处理HTTP请求错误: {ex.Message}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            }
        }
        
        </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">async</span><span style="color: rgba(0, 0, 0, 1)"> Task StartWebSocketServer()
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">创建websocket服务端</span>
            <span style="color: rgba(0, 0, 255, 1)">var</span> server = <span style="color: rgba(0, 0, 255, 1)">new</span> Fleck.WebSocketServer(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ws://0.0.0.0:8081</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">服务端socket执行事件监听</span>
            server.Start(socket =&gt;<span style="color: rgba(0, 0, 0, 1)">
            {
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">网页端触发socket请求后</span>
                socket.OnOpen = () =&gt;<span style="color: rgba(0, 0, 0, 1)">
                {
                    </span><span style="color: rgba(0, 0, 255, 1)">var</span> query = ParseQuery(socket.ConnectionInfo.Path);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">获取前端连接服务端的websocket地址（网页端websocket请求连接地址）</span>
                    <span style="color: rgba(0, 0, 255, 1)">var</span> usid = query.GetValueOrDefault(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">usid</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">""</span>);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">获取websocket请求连接地址的usid参数值</span>
                    <span style="color: rgba(0, 0, 255, 1)">var</span> cam = query.GetValueOrDefault(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">cam</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">""</span>);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">获取websocket请求连接地址的cam参数值</span>
                    <span style="color: rgba(0, 0, 255, 1)">var</span> connectionKey = $<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{usid}-{cam}</span><span style="color: rgba(128, 0, 0, 1)">"</span>;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">自定义变量，存储连接信息{usid}-{cam}</span>
<span style="color: rgba(0, 0, 0, 1)">
                    Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">WebSocket连接建立: usid={usid}, cam={cam}, IP={socket.ConnectionInfo.ClientIpAddress}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">socket.ConnectionInfo.ClientIpAddress 请求连接的客户端ip

                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 添加连接到管理字典</span>
<span style="color: rgba(0, 0, 0, 1)">                    _connections.AddOrUpdate(connectionKey, 
                        </span><span style="color: rgba(0, 0, 255, 1)">new</span> List&lt;IWebSocketConnection&gt;<span style="color: rgba(0, 0, 0, 1)"> { socket },
                        (key, list) </span>=&gt; { list.Add(socket); <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> list; });
                    
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 开始发送图片帧</span>
<span style="color: rgba(0, 0, 0, 1)">                    StartSendingFrames(socket, usid, cam, connectionKey);
                };
                
                socket.OnClose </span>= () =&gt;<span style="color: rgba(0, 0, 0, 1)">
                {
                    </span><span style="color: rgba(0, 0, 255, 1)">var</span> query =<span style="color: rgba(0, 0, 0, 1)"> ParseQuery(socket.ConnectionInfo.Path);
                    </span><span style="color: rgba(0, 0, 255, 1)">var</span> usid = query.GetValueOrDefault(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">usid</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">);
                    </span><span style="color: rgba(0, 0, 255, 1)">var</span> cam = query.GetValueOrDefault(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">cam</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">);
                    </span><span style="color: rgba(0, 0, 255, 1)">var</span> connectionKey = $<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{usid}-{cam}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
                    
                    Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">WebSocket连接关闭: usid={usid}, cam={cam}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                    
                    </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">
                    {
                        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 从管理字典中移除连接</span>
                        <span style="color: rgba(0, 0, 255, 1)">if</span> (_connections.TryGetValue(connectionKey, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">var</span><span style="color: rgba(0, 0, 0, 1)"> connections))
                        {
                            connections.Remove(socket);
                            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (connections.Count == <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
                            {
                                _connections.TryRemove(connectionKey, </span><span style="color: rgba(0, 0, 255, 1)">out</span><span style="color: rgba(0, 0, 0, 1)"> _);
                                
                                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 停止发送任务并释放资源</span>
                                <span style="color: rgba(0, 0, 255, 1)">if</span> (_cancellationTokens.TryRemove(connectionKey, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">var</span><span style="color: rgba(0, 0, 0, 1)"> cts))
                                {
                                    cts.Cancel();
                                    cts.Dispose();
                                    Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">已清理连接资源: {connectionKey}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                                }
                            }
                        }
                        
                        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 强制垃圾回收释放内存</span>
<span style="color: rgba(0, 0, 0, 1)">                        GC.Collect();
                        GC.WaitForPendingFinalizers();
                    }
                    </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (Exception ex)
                    {
                        Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">连接关闭时清理资源出错: {ex.Message}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                    }
                };
                
                socket.OnError </span>= exception =&gt;<span style="color: rgba(0, 0, 0, 1)">
                {
                    Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">WebSocket错误: {exception.Message}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                };
            });
            
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 保持服务器运行</span>
            <span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> Task.Delay(Timeout.Infinite);
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">await Task.Delay(Timeout.Infinite); 的意思是在一个异步方法里“无限等待”，也就是说这个任务永远不会完成（除非有外部中断或取消）。
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">这通常用于让一个后台任务保持运行状态、占位、或者在某些调试场景下阻止应用退出。</span>
<span style="color: rgba(0, 0, 0, 1)">        }

        </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> Dictionary&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, <span style="color: rgba(0, 0, 255, 1)">string</span>&gt; ParseQuery(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> path)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> result = <span style="color: rgba(0, 0, 255, 1)">new</span> Dictionary&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, <span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)">();
            
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(0, 0, 255, 1)">string</span>.IsNullOrEmpty(path) || !path.Contains(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">?</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))
                </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> result;
            
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> queryString = path.Split(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">?</span><span style="color: rgba(128, 0, 0, 1)">'</span>)[<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">];
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> pairs = queryString.Split(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">&amp;</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">);
            
            </span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> pair <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> pairs)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">var</span> keyValue = pair.Split(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">=</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">);
                </span><span style="color: rgba(0, 0, 255, 1)">if</span> (keyValue.Length == <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">)
                {
                    result[keyValue[</span><span style="color: rgba(128, 0, 128, 1)">0</span>]] = Uri.UnescapeDataString(keyValue[<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">]);
                }
            }
            
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> result;
        }
        
        </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> StartSendingFrames(IWebSocketConnection socket, <span style="color: rgba(0, 0, 255, 1)">string</span> usid, <span style="color: rgba(0, 0, 255, 1)">string</span> cam, <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> connectionKey)
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 检查是否已有任务在运行，如果有则先取消</span>
            <span style="color: rgba(0, 0, 255, 1)">if</span> (_cancellationTokens.TryGetValue(connectionKey, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">var</span><span style="color: rgba(0, 0, 0, 1)"> existingCts))
            {
                </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">
                {
                    existingCts.Cancel();
                    existingCts.Dispose();
                    Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">取消已存在的发送任务: usid={usid}, cam={cam}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                }
                </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (Exception ex)
                {
                    Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">取消已存在任务时出错: {ex.Message}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                }
            }
            
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> cts = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> CancellationTokenSource();
            _cancellationTokens[connectionKey] </span>=<span style="color: rgba(0, 0, 0, 1)"> cts;
            
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 使用ConfigureAwait(false)避免上下文切换开销</span>
            Task.Run(<span style="color: rgba(0, 0, 255, 1)">async</span> () =&gt;<span style="color: rgba(0, 0, 0, 1)">
            {
                </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">
                {
                    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">Directory.Exists(_imagePath))
                    {
                        Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">图片目录不存在: {_imagePath}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                        socket.Close();
                        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
                    }
                    
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 优化：只获取文件路径，不读入内存</span>
                    <span style="color: rgba(0, 0, 255, 1)">var</span> imageFiles = Directory.GetFiles(_imagePath, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">*.jpg</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
                                   .Concat(Directory.GetFiles(_imagePath, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">*.jpeg</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">))
                                   .Concat(Directory.GetFiles(_imagePath, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">*.png</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">))
                                   .OrderBy(f </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> f)
                                   .ToArray();
                    
                    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (imageFiles.Length == <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
                    {
                        Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">图片目录中没有找到图片文件: {_imagePath}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                        socket.Close();
                        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
                    }
                    
                    Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">摄像头{cam}开始发送图片帧，共{imageFiles.Length}个文件</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                    
                    </span><span style="color: rgba(0, 0, 255, 1)">var</span> frameIndex = <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
                    
                    </span><span style="color: rgba(0, 0, 255, 1)">while</span> (!cts.Token.IsCancellationRequested &amp;&amp;<span style="color: rgba(0, 0, 0, 1)"> socket.IsAvailable)
                    {
                        </span><span style="color: rgba(0, 0, 255, 1)">var</span> currentImageFile = imageFiles[frameIndex %<span style="color: rgba(0, 0, 0, 1)"> imageFiles.Length];
                        
                        </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">
                        {
                            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 内存优化：使用using确保资源及时释放</span>
                            <span style="color: rgba(0, 0, 255, 1)">using</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> fileStream = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> FileStream(currentImageFile, FileMode.Open, FileAccess.Read))
                            {
                                </span><span style="color: rgba(0, 0, 255, 1)">var</span> imageBytes = <span style="color: rgba(0, 0, 255, 1)">new</span> <span style="color: rgba(0, 0, 255, 1)">byte</span><span style="color: rgba(0, 0, 0, 1)">[fileStream.Length];
                                </span><span style="color: rgba(0, 0, 255, 1)">await</span> fileStream.ReadAsync(imageBytes, <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">, imageBytes.Length, cts.Token);
                                
                                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 立即发送后释放引用</span>
<span style="color: rgba(0, 0, 0, 1)">                                socket.Send(imageBytes);
                                imageBytes </span>= <span style="color: rgba(0, 0, 255, 1)">null</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 显式释放引用</span>
<span style="color: rgba(0, 0, 0, 1)">                            }
                            
                            Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">发送图片帧: usid={usid}, cam={cam}, frame={frameIndex}, file={Path.GetFileName(currentImageFile)}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                            
                            frameIndex</span>++<span style="color: rgba(0, 0, 0, 1)">;
                            
                            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 降低帧率减少内存压力：改为10fps，即每100ms发送一帧</span>
                            <span style="color: rgba(0, 0, 255, 1)">await</span> Task.Delay(<span style="color: rgba(128, 0, 128, 1)">40</span><span style="color: rgba(0, 0, 0, 1)">, cts.Token);
                            
                            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 每100帧强制垃圾回收一次</span>
                            <span style="color: rgba(0, 0, 255, 1)">if</span> (frameIndex % <span style="color: rgba(128, 0, 128, 1)">100</span> == <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
                            {
                                GC.Collect();
                                GC.WaitForPendingFinalizers();
                                Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">执行垃圾回收: frame={frameIndex}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                            }
                        }
                        </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (OperationCanceledException)
                        {
                            </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
                        }
                        </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (Exception ex)
                        {
                            Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">发送图片帧时出错: {ex.Message}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                            </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
                        }
                    }
                }
                </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (Exception ex)
                {
                    Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">图片发送任务异常: {ex.Message}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                }
                </span><span style="color: rgba(0, 0, 255, 1)">finally</span><span style="color: rgba(0, 0, 0, 1)">
                {
                    Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">停止发送图片帧: usid={usid}, cam={cam}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                }
            }, cts.Token);
        }
        
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">获取模式配置的反馈json</span>
        <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">object</span> GetDisplayConfig(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> usid)
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">模拟数据，模拟两个无人系统，每个1个模式</span>
            <span style="color: rgba(0, 0, 255, 1)">switch</span><span style="color: rgba(0, 0, 0, 1)"> (usid)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">case</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> RTSP模式</span>
                    <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)">
                    {
                        code </span>= <span style="color: rgba(128, 0, 128, 1)">200</span><span style="color: rgba(0, 0, 0, 1)">,
                        success </span>= <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">,
                        data </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)">
                        {
                            mode </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">rtspurl</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                            url </span>= <span style="color: rgba(0, 0, 255, 1)">new</span> <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">[]
                            {
                                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">rtsp://127.0.0.1:8081</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">rtsp://127.0.0.1:8082</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">rtsp://127.0.0.1:8083</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
                            }
                        }
                    };
                    
                </span><span style="color: rgba(0, 0, 255, 1)">case</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">3</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> WebSocket模式</span>
                    <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)">
                    {
                        code </span>= <span style="color: rgba(128, 0, 128, 1)">200</span><span style="color: rgba(0, 0, 0, 1)">,
                        success </span>= <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">,
                        data </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)">
                        {
                            mode </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">websocketurl</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                            url </span>= <span style="color: rgba(0, 0, 255, 1)">new</span> <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">[]
                            {
                                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ws://127.0.0.1:8081/api/websocket?usid=3&amp;cam=0</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ws://127.0.0.1:8081/api/websocket?usid=3&amp;cam=1</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ws://127.0.0.1:8081/api/websocket?usid=3&amp;cam=2</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
                            }
                        }
                    };
                    
                </span><span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)">:
                    </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)">
                    {
                        code </span>= <span style="color: rgba(128, 0, 128, 1)">404</span><span style="color: rgba(0, 0, 0, 1)">,
                        success </span>= <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">,
                        message </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">未找到指定的机器人配置</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
                    };
            }
        }
    }
}</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
</div>
<h2>6 效果展示</h2>
<p>&nbsp;3个小区域的图片帧显示：</p>
<p><img alt="图片" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1330657/202508/1330657-20250819161814840-1158249690.png" class="lazyload"></p>
<p>点击任意一个小区域，弹出图片帧放大显示弹出框：</p>
<p><img alt="图片" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1330657/202508/1330657-20250819162022810-654980018.png" class="lazyload"></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0006944444444444445" data-date-updated="2025-08-19 16:27">2025-08-19 16:26</span>&nbsp;
<a href="https://www.cnblogs.com/Jesuslovesme">上清风</a>&nbsp;
阅读(<span id="post_view_count">232</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19045000);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19045000', targetLink: 'https://www.cnblogs.com/Jesuslovesme/p/19045000', title: '通过Canvas在网页中将后端发来的一帧帧图片渲染成“视频”的实现过程' })">举报</a>
</div>
        