
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lori/p/18882531" title="发布于 2025-05-18 19:42">
    <span role="heading" aria-level="2">wso2~对接外部认证系统keycloak</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在 WSO2 Identity Server 或 WSO2 API Manager 中，<strong>Identity Providers (身份提供者)</strong> 功能允许您将外部身份管理系统（如 Keycloak、Azure AD、Okta 等）集成到 WSO2 平台中，实现联合身份认证（Federation）。以下是使用 WSO2 Identity Providers 功能并与 Keycloak 对接的完整步骤：</p>
<hr>
<h3 id="1-identity-providers-功能概述"><strong>1. Identity Providers 功能概述</strong></h3>
<ul>
<li><strong>作用</strong>：
<ul>
<li>允许用户通过外部身份提供者（如 Keycloak）登录 WSO2 管理的应用或 API。</li>
<li>支持协议：SAML 2.0、OAuth 2.0/OpenID Connect (OIDC)、WS-Federation 等。</li>
</ul>
</li>
<li><strong>典型场景</strong>：
<ul>
<li>企业已有 Keycloak 用户体系，需与 WSO2 平台集成。</li>
<li>需要将 WSO2 作为身份代理（Proxy），集中管理多个外部身份源。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="2-配置-keycloak-作为外部-identity-provider"><strong>2. 配置 Keycloak 作为外部 Identity Provider</strong></h3>
<h4 id="步骤-1在-keycloak-中创建客户端client"><strong>步骤 1：在 Keycloak 中创建客户端（Client）</strong></h4>
<ol>
<li>
<p><strong>登录 Keycloak 管理控制台</strong><br>
访问 <code>https://keycloak-host:port/auth/admin</code>。</p>
</li>
<li>
<p><strong>创建 Realm（如果尚未创建）</strong><br>
进入默认的 <code>master</code> Realm 或新建一个（如 <code>my-realm</code>）。</p>
</li>
<li>
<p><strong>创建客户端（Client）</strong></p>
<ul>
<li>导航到 <strong>Clients</strong> → <strong>Create</strong>。</li>
<li>设置：
<ul>
<li><strong>Client ID</strong>：<code>wso2-client</code>（自定义名称）。</li>
<li><strong>Client Protocol</strong>：<code>openid-connect</code>。</li>
</ul>
</li>
<li>保存后，进入客户端配置：
<ul>
<li><strong>Valid Redirect URIs</strong>：添加 WSO2 的回调地址，如 <code>https://wso2-host:9443/commonauth</code>。</li>
<li><strong>Web Origins</strong>：<code>*</code>（或限制为 WSO2 域名）。</li>
<li>启用 <strong>Client authentication</strong>（生成客户端密钥）。</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>记录关键信息</strong></p>
<ul>
<li><strong>Client ID</strong>：<code>wso2-client</code></li>
<li><strong>Client Secret</strong>：在 <strong>Credentials</strong> 标签页中获取。</li>
<li><strong>Keycloak Realm 的 OpenID Endpoint</strong>：<br>
<code>https://keycloak-host:port/auth/realms/my-realm/.well-known/openid-configuration</code></li>
</ul>
</li>
</ol>
<hr>
<h4 id="步骤-2在-wso2-中配置-keycloak-为外部-identity-provider"><strong>步骤 2：在 WSO2 中配置 Keycloak 为外部 Identity Provider</strong></h4>
<ol>
<li>
<p><strong>登录 WSO2 管理控制台</strong><br>
访问 <code>https://wso2-host:9443/carbon</code>，使用管理员账号登录。</p>
</li>
<li>
<p><strong>创建新的 Identity Provider</strong></p>
<ul>
<li>导航到 <strong>Main</strong> → <strong>Identity</strong> → <strong>Identity Providers</strong> → <strong>Add</strong>。</li>
<li>输入名称（如 <code>Keycloak-IDP</code>）。</li>
</ul>
</li>
<li>
<p><strong>配置 OpenID Connect 连接</strong></p>
<ul>
<li>在 <strong>Federated Authenticators</strong> → <strong>OpenID Connect Configuration</strong> 中：
<ul>
<li><strong>Enable</strong>：勾选。</li>
<li><strong>Client ID</strong>：<code>wso2-client</code>（Keycloak 中创建的客户端 ID）。</li>
<li><strong>Client Secret</strong>：Keycloak 客户端的密钥。</li>
<li><strong>Authorization Endpoint</strong>：Keycloak 的 OIDC 授权端点（如 <code>https://keycloak-host:port/auth/realms/my-realm/protocol/openid-connect/auth</code>）。</li>
<li><strong>Token Endpoint</strong>：Keycloak 的令牌端点（如 <code>https://keycloak-host:port/auth/realms/my-realm/protocol/openid-connect/token</code>）。</li>
<li><strong>UserInfo Endpoint</strong>：用户信息端点（如 <code>https://keycloak-host:port/auth/realms/my-realm/protocol/openid-connect/userinfo</code>）。</li>
<li><strong>JWKS Endpoint</strong>：JWKS 端点（如 <code>https://keycloak-host:port/auth/realms/my-realm/protocol/openid-connect/certs</code>）。</li>
<li><strong>Callback URL</strong>：<code>https://wso2-host:9443/commonauth</code>（与 Keycloak 客户端配置一致）。</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>配置声明映射（Claim Mapping）</strong></p>
<ul>
<li>在 <strong>Claim Configuration</strong> 中，将 Keycloak 返回的用户属性（如 <code>email</code>、<code>given_name</code>）映射到 WSO2 的本地声明。</li>
<li>示例：
<ul>
<li><strong>Remote Claim</strong>：<code>email</code> → <strong>Local Claim</strong>：<code>http://wso2.org/claims/emailaddress</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>保存配置</strong><br>
点击 <strong>Register</strong> 完成 Identity Provider 的创建。</p>
</li>
</ol>
<hr>
<h3 id="3-配置服务提供者service-provider使用-keycloak-认证"><strong>3. 配置服务提供者（Service Provider）使用 Keycloak 认证</strong></h3>
<h4 id="场景-1wso2-作为服务提供者sp"><strong>场景 1：WSO2 作为服务提供者（SP）</strong></h4>
<ol>
<li>
<p><strong>创建服务提供者（Service Provider）</strong></p>
<ul>
<li>导航到 <strong>Main</strong> → <strong>Identity</strong> → <strong>Service Providers</strong> → <strong>Add</strong>。</li>
<li>输入名称（如 <code>My-App</code>）。</li>
</ul>
</li>
<li>
<p><strong>配置联合认证</strong></p>
<ul>
<li>在 <strong>Local &amp; Outbound Authentication Configuration</strong> 中：
<ul>
<li>选择 <strong>Federated Authentication</strong>。</li>
<li>勾选刚创建的 <code>Keycloak-IDP</code>。</li>
</ul>
</li>
<li>可选：设置认证步骤（多因素认证）。</li>
</ul>
</li>
<li>
<p><strong>配置声明映射</strong><br>
确保服务提供者使用的声明与 Identity Provider 的映射一致。</p>
</li>
</ol>
<hr>
<h4 id="场景-2通过-wso2-访问-apiapi-manager-集成"><strong>场景 2：通过 WSO2 访问 API（API Manager 集成）</strong></h4>
<ol>
<li>
<p><strong>在 API Manager 中启用 Keycloak 认证</strong></p>
<ul>
<li>登录 API Publisher（<code>https://wso2-host:9443/publisher</code>）。</li>
<li>创建或编辑 API → <strong>Runtime Configurations</strong> → <strong>Security</strong>。</li>
<li>勾选 <strong>OAuth2</strong> 或 <strong>OpenID Connect</strong>，并关联 <code>Keycloak-IDP</code>。</li>
</ul>
</li>
<li>
<p><strong>订阅 API 并测试</strong></p>
<ul>
<li>用户通过 Keycloak 登录开发者门户，获取令牌后调用 API。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="4-验证集成"><strong>4. 验证集成</strong></h3>
<h4 id="测试登录流程"><strong>测试登录流程</strong></h4>
<ol>
<li>访问 WSO2 服务提供者的应用（如 <code>https://wso2-host:9443/my-app</code>）。</li>
<li>点击 <strong>Login with Keycloak</strong>（或类似按钮）。</li>
<li>重定向到 Keycloak 登录页面，输入 Keycloak 用户凭据。</li>
<li>登录成功后，返回 WSO2 应用并验证用户信息。</li>
</ol>
<hr>
<h3 id="5-常见问题与调试"><strong>5. 常见问题与调试</strong></h3>
<h4 id="问题-1证书验证失败"><strong>问题 1：证书验证失败</strong></h4>
<ul>
<li><strong>现象</strong>：<code>SSLHandshakeException</code> 或 <code>unable to find valid certification path</code>。</li>
<li><strong>解决方案</strong>：
<ul>
<li>将 Keycloak 的 SSL 证书导入 WSO2 的信任库：<pre><code class="language-bash">keytool -importcert -keystore &lt;WSO2_HOME&gt;/repository/resources/security/client-truststore.jks -alias keycloak -file keycloak.crt
</code></pre>
</li>
</ul>
</li>
</ul>
<h4 id="问题-2声明未正确映射"><strong>问题 2：声明未正确映射</strong></h4>
<ul>
<li><strong>现象</strong>：用户属性（如邮箱、角色）未传递到 WSO2。</li>
<li><strong>解决方案</strong>：
<ul>
<li>检查 WSO2 Identity Provider 的 <strong>Claim Configuration</strong>，确保远程声明与 Keycloak 返回的 JSON 键匹配。</li>
<li>在 Keycloak 客户端的 <strong>Mappers</strong> 中配置声明映射规则。</li>
</ul>
</li>
</ul>
<h4 id="问题-3重定向-uri-不匹配"><strong>问题 3：重定向 URI 不匹配</strong></h4>
<ul>
<li><strong>现象</strong>：<code>Invalid redirect_uri</code> 错误。</li>
<li><strong>解决方案</strong>：
<ul>
<li>确保 WSO2 的 <strong>Callback URL</strong> 和 Keycloak 客户端的 <strong>Valid Redirect URIs</strong> 完全一致（包括协议、端口和路径）。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="6-高级配置saml-20-集成"><strong>6. 高级配置（SAML 2.0 集成）</strong></h3>
<p>若需使用 SAML 代替 OIDC：</p>
<ol>
<li><strong>在 Keycloak 中创建 SAML 客户端</strong>：
<ul>
<li>客户端协议选择 <code>SAML</code>。</li>
</ul>
</li>
<li><strong>在 WSO2 中配置 SAML 身份提供者</strong>：
<ul>
<li>提供 Keycloak 的 SAML 元数据（Entity ID、SSO URL、证书等）。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="总结"><strong>总结</strong></h3>
<p>通过 WSO2 的 <strong>Identity Providers</strong> 功能，您可以无缝集成 Keycloak 作为外部身份源，实现以下能力：</p>
<ul>
<li><strong>联合登录</strong>：用户通过 Keycloak 登录 WSO2 管理的应用或 API。</li>
<li><strong>集中管理</strong>：统一审计日志和策略控制。</li>
<li><strong>协议支持</strong>：灵活选择 OIDC、SAML 等标准协议。</li>
</ul>
<p>关键配置点：</p>
<ol>
<li>Keycloak 客户端的正确配置（重定向 URI、协议）。</li>
<li>WSO2 Identity Provider 的端点与声明映射。</li>
<li>服务提供者或 API 的联合认证设置。</li>
</ol>

</div>
<div id="MySignature" role="contentinfo">
    <p></p>
<div class="navgood">
<p>作者：仓储大叔，张占岭，<br>
荣誉：微软MVP<br>QQ：853066980</p>

<p><strong>支付宝扫一扫，为大叔打赏!</strong>
<br><img src="https://images.cnblogs.com/cnblogs_com/lori/237884/o_IMG_7144.JPG"></p>
</div>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.03146044562152778" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-18 19:42">2025-05-18 19:42</span>&nbsp;
<a href="https://www.cnblogs.com/lori">张占岭</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18882531);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18882531', targetLink: 'https://www.cnblogs.com/lori/p/18882531', title: 'wso2~对接外部认证系统keycloak' })">举报</a>
</div>
        