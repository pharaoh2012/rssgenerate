
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fanliang11/p/18766635" title="发布于 2025-03-12 08:37">
    <span role="heading" aria-level="2">线上测试木舟物联网平台之如何通过HTTP网络组件接入设备</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>一、概述&nbsp;</h1>
<p>木舟 (Kayak) 是什么?</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 木舟(Kayak)是基于.NET6.0软件环境下的surging微服务引擎进行开发的, 平台包含了微服务和物联网平台。支持异步和响应式编程开发，功能包含了物模型,设备,产品,网络组件的统一管理和微服务平台下的注册中心，服务路由，模块，中间服务等管理。还有多协议适配(TCP,MQTT,UDP,CoAP,HTTP,Grpc,websocket,rtmp,httpflv,webservice,等),通过灵活多样的配置适配能够接入不同厂家不同协议等设备。并且通过设备告警,消息通知,数据可视化等功能。能够让你能快速建立起微服务物联网平台系统。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp; 那么下面就为大家介绍如何从创建组件、协议、设备网关，设备到设备网关接入，再到设备数据上报，把整个流程通过此篇文章进行阐述。</p>
<p>木舟物联网平台：<a href="http://117.72.121.2:3100" target="_blank" rel="noopener nofollow">http://117.72.121.2:3100</a></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; surging 微服务引擎开源地址：<a href="https://github.com/fanliang11/surging" rel="noopener nofollow" target="_blank">https://github.com/fanliang11/surging</a>（后面surging 会移动到<a href="https://github.com/microsurging/" rel="noopener nofollow" target="_blank">microsurging</a>进行维护）</p>
<h2 class="postTitle">二、木舟物联网平台管理平台界面</h2>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用户名：fanly&nbsp; 密码：123456</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202503/192878-20250311223427646-1224577585.png" alt=""></p>
<h2>&nbsp;三、链路跟踪监控</h2>
<p>地址：<a href="http://117.72.121.2:8080/" target="_blank" rel="noopener nofollow">http://117.72.121.2:8080/</a> （这是社区版，仅支持v6.0 ，企业版本支持v8.0）</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202503/192878-20250311223911730-113104354.png" alt=""></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202503/192878-20250311224019408-239085083.png" alt=""></p>
<p>&nbsp;</p>
<h2>四、网络组件</h2>
<p>1.编辑创建HTTP协议的网络组件，可以选择共享配置和独立配置(独立配置是集群模式)，然后可以选择开启swagger和webservice.</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202503/192878-20250312083818915-2078853030.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;开启成功后，可以看看swagger 是否可以访问</p>
<p>&nbsp;</p>
<p>地址：<a href="http://117.72.121.2:281/swagger/index.html" rel="noopener nofollow" target="_blank">http://117.72.121.2:281/swagger/index.html</a></p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202503/192878-20250311224422214-403074178.png" alt="" class="medium-zoom-image"></p>
<p>&nbsp;开启成功后，可以看看webservice是否可以访问</p>
<p>webservice:<a href="http://117.72.121.2:168/devicedata/devicedata/changedevicestage.asmx?servicekey=WebService" rel="noopener nofollow" target="_blank">http://117.72.121.2:168/devicedata/devicedata/changedevicestage.asmx?servicekey=WebService</a></p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202503/192878-20250311225459977-1719974456.png" alt="" class="medium-zoom-image"></p>
<h2>&nbsp;五、自定义协议</h2>
<ul>
<li>如何创建自定义协议模块</li>
</ul>
<p>如果是网络编程开发，必然会涉及到协议报文的编码解码处理，那么对于平台也是做到了灵活处理，首先是协议模块创建，通过以下代码看出协议模块可以添加协议说明md文档, 身份鉴权处理，HTTP路由,消息编解码，元数据配置。下面一一介绍如何进行编写</p>
<div class="cnblogs_code">
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
<pre>  <span style="color: rgba(0, 0, 255, 1)">public <span style="color: rgba(0, 0, 255, 1)">class<span style="color: rgba(0, 0, 0, 1)"> Demo5ProtocolSupportProvider : ProtocolSupportProvider
    {
        <span style="color: rgba(0, 0, 255, 1)">public <span style="color: rgba(0, 0, 255, 1)">override IObservable&lt;ProtocolSupport&gt;<span style="color: rgba(0, 0, 0, 1)"> Create(ProtocolContext context)
        {<br>&nbsp;&nbsp;&nbsp;　　       var support = new ComplexProtocolSupport();<br>&nbsp;&nbsp;&nbsp;           support.Id = "demo5";<br>&nbsp;&nbsp;&nbsp;           support.Name = "演示协议5";<br>&nbsp;&nbsp;&nbsp;           support.Description = "演示协议5";
              support.AddDocument(MessageTransport.Http, <span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">Document/document-http.md<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">);
       　　　　support.AddAuthenticator(MessageTransport.Http, <span style="color: rgba(0, 0, 255, 1)">new<span style="color: rgba(0, 0, 0, 1)"> Demo5Authenticator()); 
      　　　　 support.AddRoutes(MessageTransport.Http, <span style="color: rgba(0, 0, 255, 1)">new List&lt;BasicMessageCodec&gt;<span style="color: rgba(0, 0, 0, 1)">() {
         　　 BasicMessageCodec.DeviceOnline,
          　　 BasicMessageCodec.ReportProperty,
           　　BasicMessageCodec.WriteProperty,
            　　BasicMessageCodec.ReadProperty,
              BasicMessageCodec.Event
       }.Select(p =&gt;<span style="color: rgba(0, 0, 0, 1)"> HttpDescriptor.Instance(p.Pattern)
           .GroupName(p.Route.GroupName())
           .HttpMethod(p.Route.HttpMethod())
           .Path(p.Pattern)
           .ContentType(MediaType.ToString(MediaType.ApplicationJson))
           .Description(p.Route.Description())
           .Example(p.Route.Example())
           ).ToList());
       support.AddMessageCodecSupport(MessageTransport.Http, () =&gt; Observable.Return(<span style="color: rgba(0, 0, 255, 1)">new<span style="color: rgba(0, 0, 0, 1)"> HttpDeviceMessageCodec()));
       support.AddConfigMetadata(MessageTransport.Http, _httpConfig);
       <span style="color: rgba(0, 0, 255, 1)">return<span style="color: rgba(0, 0, 0, 1)"> Observable.Return(support);
               
        }
     
     }                </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
</div>
<p>1. 添加协议说明文档如代码:<span style="color: rgba(0, 0, 0, 1)"> support.AddDocument(MessageTransport.Http, <span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">Document/document-http.md<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">);，文档仅支持<span class="c-color-gray2"> <span class="content-right_2s-H4">markdown文件，如下所示</span></span></span></span></span></span></span></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: rgba(0, 0, 0, 1)">### 使用HTTP推送设备数据

上报属性例子: 

POST /{productId}/{deviceId}/properties/<span style="color: rgba(0, 0, 0, 1)">report
Authorization:{产品或者设备中配置的Token}
Content-Type: application/<span style="color: rgba(0, 0, 0, 1)">json

{
 <span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">properties<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">:{
   <span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">temp<span style="color: rgba(128, 0, 0, 1)">":<span style="color: rgba(128, 0, 128, 1)">11.5<span style="color: rgba(0, 0, 0, 1)">
 }
}

上报事件例子:

POST /{productId}/{deviceId}/<span style="color: rgba(0, 0, 255, 1)">event/<span style="color: rgba(0, 0, 0, 1)">{eventId}
Authorization:{产品或者设备中配置的Token}
Content-Type: application/<span style="color: rgba(0, 0, 0, 1)">json

{
 <span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">data<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">:{
   <span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">createtime<span style="color: rgba(128, 0, 0, 1)">": <span style="color: rgba(128, 0, 0, 1)">""<span style="color: rgba(0, 0, 0, 1)">
 }
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
</div>
<p>&nbsp;</p>
<p>2. 添加身份鉴权如代码:<span style="color: rgba(0, 0, 0, 1)"> <span style="color: rgba(128, 0, 0, 1)"><span style="color: rgba(128, 0, 0, 1)"><span style="color: rgba(128, 0, 0, 1)"><span style="color: rgba(0, 0, 0, 1)"> support.AddAuthenticator(MessageTransport.Http, new Demo5Authenticator()) ，自定义身份鉴权<span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(128, 0, 0, 1)"><span style="color: rgba(128, 0, 0, 1)"><span style="color: rgba(128, 0, 0, 1)"><span style="color: rgba(0, 0, 0, 1)">Demo5Authenticator 代码如下：<br></span></span></span></span></span></span></span></span></span></span></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
<pre>       <span style="color: rgba(0, 0, 255, 1)">public <span style="color: rgba(0, 0, 255, 1)">class<span style="color: rgba(0, 0, 0, 1)"> Demo5Authenticator : IAuthenticator
       {
           <span style="color: rgba(0, 0, 255, 1)">public IObservable&lt;AuthenticationResult&gt;<span style="color: rgba(0, 0, 0, 1)"> Authenticate(IAuthenticationRequest request, IDeviceOperator deviceOperator)
           {
               <span style="color: rgba(0, 0, 255, 1)">var result = Observable.Return&lt;AuthenticationResult&gt;(<span style="color: rgba(0, 0, 255, 1)">default<span style="color: rgba(0, 0, 0, 1)">);
               <span style="color: rgba(0, 0, 255, 1)">if (request <span style="color: rgba(0, 0, 255, 1)">is<span style="color: rgba(0, 0, 0, 1)"> DefaultAuthRequest)
               {
                   <span style="color: rgba(0, 0, 255, 1)">var authRequest = request <span style="color: rgba(0, 0, 255, 1)">as<span style="color: rgba(0, 0, 0, 1)"> DefaultAuthRequest;
                   deviceOperator.GetConfig(authRequest.GetTransport()==MessageTransport.Http?<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">token<span style="color: rgba(128, 0, 0, 1)">": <span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">key<span style="color: rgba(128, 0, 0, 1)">").Subscribe(  config =&gt;<span style="color: rgba(0, 0, 0, 1)">
                   {
                       <span style="color: rgba(0, 0, 255, 1)">var password = config.Convert&lt;<span style="color: rgba(0, 0, 255, 1)">string&gt;<span style="color: rgba(0, 0, 0, 1)">();
                       <span style="color: rgba(0, 0, 255, 1)">if<span style="color: rgba(0, 0, 0, 1)"> (authRequest.Password.Equals(password))
                       {
                           result=<span style="color: rgba(0, 0, 0, 1)"> result.Publish(AuthenticationResult.Success(authRequest.DeviceId));
                       }
                       <span style="color: rgba(0, 0, 255, 1)">else<span style="color: rgba(0, 0, 0, 1)">
                       {
                           result= result.Publish(AuthenticationResult.Failure(StatusCode.CUSTOM_ERROR, <span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">验证失败,密码错误<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">));
                       }
                   });
               }
               <span style="color: rgba(0, 0, 255, 1)">else<span style="color: rgba(0, 0, 0, 1)">
               result = Observable.Return&lt;AuthenticationResult&gt;(AuthenticationResult.Failure(StatusCode.CUSTOM_ERROR, <span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">不支持请求参数类型<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">));
               <span style="color: rgba(0, 0, 255, 1)">return<span style="color: rgba(0, 0, 0, 1)"> result;
           }

           <span style="color: rgba(0, 0, 255, 1)">public IObservable&lt;AuthenticationResult&gt;<span style="color: rgba(0, 0, 0, 1)"> Authenticate(IAuthenticationRequest request, IDeviceRegistry registry)
           {
               <span style="color: rgba(0, 0, 255, 1)">var result = Observable.Return&lt;AuthenticationResult&gt;(<span style="color: rgba(0, 0, 255, 1)">default<span style="color: rgba(0, 0, 0, 1)">);
               <span style="color: rgba(0, 0, 255, 1)">var authRequest = request <span style="color: rgba(0, 0, 255, 1)">as<span style="color: rgba(0, 0, 0, 1)"> DefaultAuthRequest;
               registry
                 .GetDevice(authRequest.DeviceId)
                 .Subscribe(<span style="color: rgba(0, 0, 255, 1)">async p =&gt;<span style="color: rgba(0, 0, 0, 1)"> {

                    <span style="color: rgba(0, 0, 255, 1)">var config=  <span style="color: rgba(0, 0, 255, 1)">await p.GetConfig(authRequest.GetTransport() == MessageTransport.Http ? <span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">token<span style="color: rgba(128, 0, 0, 1)">" : <span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">key<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">);
                     <span style="color: rgba(0, 0, 255, 1)">var password= config.Convert&lt;<span style="color: rgba(0, 0, 255, 1)">string&gt;<span style="color: rgba(0, 0, 0, 1)">();
                    <span style="color: rgba(0, 0, 255, 1)">if<span style="color: rgba(0, 0, 0, 1)">(authRequest.Password.Equals(password))
                     {
                         result=<span style="color: rgba(0, 0, 0, 1)"> result.Publish(AuthenticationResult.Success(authRequest.DeviceId));
                     }
                     <span style="color: rgba(0, 0, 255, 1)">else<span style="color: rgba(0, 0, 0, 1)">
                     {
                         result= result.Publish(AuthenticationResult.Failure(StatusCode.CUSTOM_ERROR, <span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">验证失败,密码错误<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">));
                     }
                 });
               <span style="color: rgba(0, 0, 255, 1)">return<span style="color: rgba(0, 0, 0, 1)"> result;
           }
       }</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
</div>
<p>&nbsp;</p>
<p>3. 添加Http路由代码<span style="color: rgba(0, 0, 0, 1)">support.AddRoutes，那么如何配置呢，代码如下：</span></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre>    <span style="color: rgba(0, 0, 255, 1)">public <span style="color: rgba(0, 0, 255, 1)">static BasicMessageCodec ReportProperty =&gt;
 <span style="color: rgba(0, 0, 255, 1)">new BasicMessageCodec(<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">/*/properties/report<span style="color: rgba(128, 0, 0, 1)">", <span style="color: rgba(0, 0, 255, 1)">typeof(ReadPropertyMessage), route =&gt; route.GroupName(<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">属性上报<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">)
                     .HttpMethod(<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">Post<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">)
                     .Description(<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">上报物模型属性数据<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">)
                     .Example(<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">{\"properties\":{\"属性ID\":\"属性值\"}}<span style="color: rgba(128, 0, 0, 1)">"));</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<p>&nbsp;</p>
<p>4.添加消息编解码代码<span style="color: rgba(0, 0, 0, 1)"> support.AddMessageCodecSupport(MessageTransport.Http, () =&gt; Observable.Return(<span style="color: rgba(0, 0, 255, 1)">new<span style="color: rgba(0, 0, 0, 1)"> HttpDeviceMessageCodec()))， 可以自定义编解码，<span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(0, 0, 255, 1)"><span style="color: rgba(0, 0, 0, 1)">HttpDeviceMessageCodec代码如下：</span></span></span></span></span></span></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
<pre>  <span style="color: rgba(0, 0, 255, 1)">public <span style="color: rgba(0, 0, 255, 1)">class<span style="color: rgba(0, 0, 0, 1)"> HttpDeviceMessageCodec : DeviceMessageCodec
  {
      <span style="color: rgba(0, 0, 255, 1)">private <span style="color: rgba(0, 0, 255, 1)">readonly<span style="color: rgba(0, 0, 0, 1)"> MessageTransport _transport;

      <span style="color: rgba(0, 0, 255, 1)">public HttpDeviceMessageCodec() : <span style="color: rgba(0, 0, 255, 1)">this<span style="color: rgba(0, 0, 0, 1)">(MessageTransport.Http)
      {
      }

      <span style="color: rgba(0, 0, 255, 1)">private <span style="color: rgba(0, 0, 255, 1)">static<span style="color: rgba(0, 0, 0, 1)"> DefaultHttpResponseMessage Unauthorized(String msg)
      {
          <span style="color: rgba(0, 0, 255, 1)">return <span style="color: rgba(0, 0, 255, 1)">new<span style="color: rgba(0, 0, 0, 1)"> DefaultHttpResponseMessage()
                  .ContentType(MediaType.ApplicationJson)
                  .Body(<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">{\"success\":false,\"code\":\"unauthorized\",\"message\":\"<span style="color: rgba(128, 0, 0, 1)">" + msg + <span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">\"}<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">)
                  .Status(HttpStatus.AuthorizationFailed);
      }

      <span style="color: rgba(0, 0, 255, 1)">private <span style="color: rgba(0, 0, 255, 1)">static<span style="color: rgba(0, 0, 0, 1)"> DefaultHttpResponseMessage BadRequest()
      {
          <span style="color: rgba(0, 0, 255, 1)">return <span style="color: rgba(0, 0, 255, 1)">new<span style="color: rgba(0, 0, 0, 1)"> DefaultHttpResponseMessage()
                  .ContentType(MediaType.ApplicationJson)
                  .Body(<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">{\"success\":false,\"code\":\"bad_request\"}<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">)
                  .Status(HttpStatus.RequestError);
      }

      <span style="color: rgba(0, 0, 255, 1)">public<span style="color: rgba(0, 0, 0, 1)"> HttpDeviceMessageCodec(MessageTransport transport)
      {
          _transport =<span style="color: rgba(0, 0, 0, 1)"> transport;
      }
      <span style="color: rgba(0, 0, 255, 1)">public <span style="color: rgba(0, 0, 255, 1)">override IObservable&lt;IDeviceMessage&gt;<span style="color: rgba(0, 0, 0, 1)"> Decode(MessageDecodeContext context)
      {
          <span style="color: rgba(0, 0, 255, 1)">if (context.GetMessage() <span style="color: rgba(0, 0, 255, 1)">is<span style="color: rgba(0, 0, 0, 1)"> HttpRequestMessage)
          {
              <span style="color: rgba(0, 0, 255, 1)">return<span style="color: rgba(0, 0, 0, 1)"> DecodeHttpRequestMessage(context);
          }
          <span style="color: rgba(0, 0, 255, 1)">return Observable.Return&lt;IDeviceMessage&gt;(<span style="color: rgba(0, 0, 255, 1)">default<span style="color: rgba(0, 0, 0, 1)">);
      }


      <span style="color: rgba(0, 0, 255, 1)">public <span style="color: rgba(0, 0, 255, 1)">override  IObservable&lt;IEncodedMessage&gt;<span style="color: rgba(0, 0, 0, 1)"> Encode(MessageEncodeContext context)
      {
          <span style="color: rgba(0, 0, 255, 1)">return Observable.Return&lt;IEncodedMessage&gt;(<span style="color: rgba(0, 0, 255, 1)">default<span style="color: rgba(0, 0, 0, 1)">);
      }



      <span style="color: rgba(0, 0, 255, 1)">private IObservable&lt;IDeviceMessage&gt;<span style="color: rgba(0, 0, 0, 1)"> DecodeHttpRequestMessage(MessageDecodeContext context)
      {
          <span style="color: rgba(0, 0, 255, 1)">var result = Observable.Return&lt;IDeviceMessage&gt;(<span style="color: rgba(0, 0, 255, 1)">default<span style="color: rgba(0, 0, 0, 1)">);
          <span style="color: rgba(0, 0, 255, 1)">var message =<span style="color: rgba(0, 0, 0, 1)"> (HttpExchangeMessage)context.GetMessage();

          Header? header = message.Request.GetHeader(<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">Authorization<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">);
          <span style="color: rgba(0, 0, 255, 1)">if (header == <span style="color: rgba(0, 0, 255, 1)">null || header.Value == <span style="color: rgba(0, 0, 255, 1)">null || header.Value.Length == <span style="color: rgba(128, 0, 128, 1)">0<span style="color: rgba(0, 0, 0, 1)">)
          {
              message
                   .Response(Unauthorized(<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">Authorization header is required<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">)).ToObservable()
                   .Subscribe(p =&gt; result = result.Publish(<span style="color: rgba(0, 0, 255, 1)">default<span style="color: rgba(0, 0, 0, 1)">));

              <span style="color: rgba(0, 0, 255, 1)">return<span style="color: rgba(0, 0, 0, 1)"> result;
          }
          <span style="color: rgba(0, 0, 255, 1)">var httpToken = header.Value[<span style="color: rgba(128, 0, 128, 1)">0<span style="color: rgba(0, 0, 0, 1)">];

          <span style="color: rgba(0, 0, 255, 1)">var paths = message.Path.Split(<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">/<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">);
          <span style="color: rgba(0, 0, 255, 1)">if (paths.Length == <span style="color: rgba(128, 0, 128, 1)">0<span style="color: rgba(0, 0, 0, 1)">)
          {
              message.Response(BadRequest()).ToObservable()
                 .Subscribe(p =&gt; result = result.Publish(<span style="color: rgba(0, 0, 255, 1)">default<span style="color: rgba(0, 0, 0, 1)">));
              <span style="color: rgba(0, 0, 255, 1)">return<span style="color: rgba(0, 0, 0, 1)"> result;
          }
          String deviceId = paths[<span style="color: rgba(128, 0, 128, 1)">1<span style="color: rgba(0, 0, 0, 1)">];
          context.GetDevice(deviceId).Subscribe(<span style="color: rgba(0, 0, 255, 1)">async deviceOperator =&gt;<span style="color: rgba(0, 0, 0, 1)">
          {
              <span style="color: rgba(0, 0, 255, 1)">var config = deviceOperator==<span style="color: rgba(0, 0, 255, 1)">null?<span style="color: rgba(0, 0, 255, 1)">null: <span style="color: rgba(0, 0, 255, 1)">await deviceOperator.GetConfig(<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">token<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">);
              <span style="color: rgba(0, 0, 255, 1)">var token = config?.Convert&lt;<span style="color: rgba(0, 0, 255, 1)">string&gt;<span style="color: rgba(0, 0, 0, 1)">();
              <span style="color: rgba(0, 0, 255, 1)">if (token == <span style="color: rgba(0, 0, 255, 1)">null || !<span style="color: rgba(0, 0, 0, 1)">httpToken.Equals(token))
              {
                  <span style="color: rgba(0, 0, 255, 1)">await<span style="color: rgba(0, 0, 0, 1)"> message
                       .Response(Unauthorized(<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">Device not registered or authentication failed<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">));
              }
              <span style="color: rgba(0, 0, 255, 1)">else<span style="color: rgba(0, 0, 0, 1)">
              {
                  <span style="color: rgba(0, 0, 255, 1)">var deviceMessage = <span style="color: rgba(0, 0, 255, 1)">await<span style="color: rgba(0, 0, 0, 1)"> DecodeBody(message, deviceId);
                  <span style="color: rgba(0, 0, 255, 1)">if (deviceMessage != <span style="color: rgba(0, 0, 255, 1)">null<span style="color: rgba(0, 0, 0, 1)">)
                  {
                      <span style="color: rgba(0, 0, 255, 1)">await message.Success(<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">{\"success\":true,\"code\":\"success\"}<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">);
                      result =<span style="color: rgba(0, 0, 0, 1)"> result.Publish(deviceMessage);
                  }
                  <span style="color: rgba(0, 0, 255, 1)">else<span style="color: rgba(0, 0, 0, 1)">
                  {
                      <span style="color: rgba(0, 0, 255, 1)">await<span style="color: rgba(0, 0, 0, 1)"> message.Response(BadRequest());
                  }
              }
          });
          <span style="color: rgba(0, 0, 255, 1)">return<span style="color: rgba(0, 0, 0, 1)"> result;
      }

      <span style="color: rgba(0, 0, 255, 1)">private <span style="color: rgba(0, 0, 255, 1)">async Task&lt;IDeviceMessage&gt; DecodeBody(HttpExchangeMessage message,<span style="color: rgba(0, 0, 255, 1)">string<span style="color: rgba(0, 0, 0, 1)"> deviceId)
      {

          <span style="color: rgba(0, 0, 255, 1)">byte[] body = <span style="color: rgba(0, 0, 255, 1)">new <span style="color: rgba(0, 0, 255, 1)">byte<span style="color: rgba(0, 0, 0, 1)">[message.Payload.ReadableBytes];
          message.Payload.ReadBytes(body);
          <span style="color: rgba(0, 0, 255, 1)">var deviceMessage = <span style="color: rgba(0, 0, 255, 1)">await<span style="color: rgba(0, 0, 0, 1)"> TopicMessageCodec.Dodecode(message.Path, body);
          deviceMessage.DeviceId =<span style="color: rgba(0, 0, 0, 1)"> deviceId;
          <span style="color: rgba(0, 0, 255, 1)">return<span style="color: rgba(0, 0, 0, 1)"> deviceMessage;
      }
  }</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
</div>
<p>&nbsp;</p>
<p>5.添加元数据配置代码<span style="color: rgba(0, 0, 0, 1)"> support.AddConfigMetadata(MessageTransport.Http, _httpConfig);&nbsp; <span style="color: rgba(0, 0, 0, 1)">_httpConfig代码如下</span></span></p>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 0, 255, 1)">private <span style="color: rgba(0, 0, 255, 1)">readonly DefaultConfigMetadata _httpConfig = <span style="color: rgba(0, 0, 255, 1)">new<span style="color: rgba(0, 0, 0, 1)"> DefaultConfigMetadata(
        <span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">Http认证配置<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">
        , <span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">token为http认证令牌<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">)
        .Add(<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">token<span style="color: rgba(128, 0, 0, 1)">", <span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">token<span style="color: rgba(128, 0, 0, 1)">", <span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">http令牌<span style="color: rgba(128, 0, 0, 1)">", StringType.Instance);</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<ul>
<li>如何加载协议模块，协议模块包含了协议模块支持添加引用加载和上传热部署加载。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
</ul>
<p>&nbsp;&nbsp; 引用加载模块</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202411/192878-20241105135906593-287298429.png" alt="" class="medium-zoom-image"></p>
<p>&nbsp;上传热部署协议模块</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202411/192878-20241105140335056-839278190.png" alt="" class="medium-zoom-image"></p>
<h2>&nbsp;六、设备网关</h2>
<p>创建设备网关</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202411/192878-20241105140841778-1098901347.png" alt="" class="medium-zoom-image"></p>
<h2>&nbsp;七、产品管理</h2>
<p>以下是添加产品。</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202411/192878-20241105141150543-1368454296.png" alt="" class="medium-zoom-image"></p>
<p>&nbsp;设备接入</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202411/192878-20241105141537398-1725514916.png" alt="" class="medium-zoom-image"></p>
<h2>&nbsp;八、设备管理</h2>
<p>添加设备</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202411/192878-20241105141749275-701161884.png" alt="" class="medium-zoom-image"></p>
<p>&nbsp;HTTP认证配置</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202411/192878-20241105142333711-206766979.png" alt="" class="medium-zoom-image"></p>
<p>&nbsp;创建告警阈值</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202411/192878-20241105142447586-169442309.png" alt="" class="medium-zoom-image"></p>
<h2>&nbsp;九、测试</h2>
<p>&nbsp;利用Postman 进行测试，以调用http://117.72.121.2:168/{productid}/{deviceid}/properties/report 为例，Authorization设置：123456</p>
<p>测试地址：<a href="http://117.72.121.2:168/product-http-23/DJI-Mavic-v231x12/properties/report" target="_blank" rel="noopener nofollow">http://117.72.121.2:168/product-http-23/DJI-Mavic-v231x12/properties/report</a></p>
<p>1.正常数据测试</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202503/192878-20250312083258415-2031360691.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;2. 如果是选用Get方式调用，会因为找不到ServiceRoute而返回错误。</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202503/192878-20250312083401630-648104565.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;3. 把Authorization改成1111，会返回错误<span style="color: rgba(4, 81, 165, 1)">Device&nbsp;not&nbsp;registered&nbsp;or&nbsp;authentication&nbsp;failed，从而上报数据失败</span></p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202503/192878-20250312083456301-623846666.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;以上上传的数据可以在设备信息-》运行状态中查看</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202411/192878-20241105143728937-17007606.png" alt="" class="medium-zoom-image"></p>
<p>&nbsp;告警信息可以在超临界数据中查看</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202411/192878-20241105143827051-1162807238.png" alt="" class="medium-zoom-image"></p>
<h1>四、结尾</h1>
<p>&nbsp; &nbsp; &nbsp; &nbsp; 如果感兴趣可以联系作者开通端口进行测试，后面陆续会把协议接入到木舟物联网平台，到时候可以支持多终端操作可视化管理。</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.01864544067361111" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-12 08:38">2025-03-12 08:37</span>&nbsp;
<a href="https://www.cnblogs.com/fanliang11">fanly11</a>&nbsp;
阅读(<span id="post_view_count">9</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18766635" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18766635);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18766635', targetLink: 'https://www.cnblogs.com/fanliang11/p/18766635', title: '线上测试木舟物联网平台之如何通过HTTP网络组件接入设备' })">举报</a>
</div>
        