
		<div class="posthead">
			<h2>
				<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/dotlineplane/p/18710914" title="发布于 2025-02-12 09:14">
    <span role="heading" aria-level="2">10分钟，创建你的第一个点线面低代码应用</span>
    

</a>

			</h2>
 			Posted on 
<span id="post-date" data-last-update-days="0.06174772131944444" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-12 09:16">2025-02-12 09:14</span>&nbsp;
<a href="https://www.cnblogs.com/dotlineplane">点线面低代码调试助手</a>&nbsp;
阅读(<span id="post_view_count">1</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18710914" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18710914);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18710914', targetLink: 'https://www.cnblogs.com/dotlineplane/p/18710914', title: '10分钟，创建你的第一个点线面低代码应用' })">举报</a>

			
			
		</div>
		<div class="postbody"><div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p data-v-2505e99a="" data-v-5b474d2a=""><strong data-v-2505e99a="">1. 效果预览</strong></p>
<p data-v-2505e99a="" data-v-5b474d2a=""><span data-v-2505e99a="">这个例子包括，串口的打开和发送，包括字符串的发送和hex 的发送。最终效果如图。</span></p>
<p data-v-2505e99a="" data-v-5b474d2a=""><span data-v-2505e99a=""><img src="https://img2024.cnblogs.com/blog/2297542/202502/2297542-20250212085739404-774144978.png" alt=""></span></p>
<p data-v-2505e99a="" data-v-5b474d2a=""><strong data-v-2505e99a=""><br></strong>点线面低代码应用下载</p>
<p data-v-2505e99a="" data-v-5b474d2a="">GitHub 下载地址 <a href="https://github.com/dotLinePlane-com/dotlineplane/releases" target="_blank" rel="noopener nofollow">https://github.com/dotLinePlane-com/dotlineplane/releases</a></p>
<p data-v-2505e99a="" data-v-5b474d2a="">通过百度网盘分享的文件：dotLinePlaneV2.1.0.7z 链接：<a href="https://pan.baidu.com/s/1XUl32fFD3ssZoPMqC4NmQw?pwd=qn0d" target="_blank" rel="noopener nofollow">https://pan.baidu.com/s/1XUl32fFD3ssZoPMqC4NmQw?pwd=qn0d</a> 提取码：qn0d</p>
<p data-v-2505e99a="" data-v-5b474d2a="">&nbsp;</p>
<p data-v-2505e99a="" data-v-5b474d2a=""><strong data-v-2505e99a="">2. 具体步骤</strong></p>
<p data-v-2505e99a="" data-v-5b474d2a=""><span data-v-2505e99a="">创建一个应用主要有四个步骤，包括：拖拽组件、设置组件属性、编写js脚本和设置组件事件与脚本关联。</span></p>
<p data-v-2505e99a="" data-v-5b474d2a=""><span data-v-2505e99a="">2.1 拖拽组件</span></p>
<p data-v-2505e99a="" data-v-5b474d2a=""><span data-v-2505e99a="">界面的右边选择拖拽到画布中。</span></p>
<p data-v-2505e99a="" data-v-5b474d2a=""><span data-v-2505e99a="">使用的组件有 dropdown (端口和波特率）、按钮（打开和发送）、复选框（Hex 发送）、文本输入框（发送区）和 多行文本输入框（接收区和log）</span></p>
<p data-v-2505e99a="" data-v-5b474d2a=""><span data-v-2505e99a="">2.2 设置组件属性</span></p>
<p data-v-2505e99a="" data-v-5b474d2a=""><span data-v-2505e99a="">这里主要设置组件的名称属性，其他的有程序设置。</span></p>
<p data-v-2505e99a="" data-v-5b474d2a=""><span data-v-2505e99a=""><img src="https://img2024.cnblogs.com/blog/2297542/202502/2297542-20250212085833822-1444815556.png" alt=""></span></p>
<p><span data-v-2505e99a="">端口----》dropdownPort</span></p>
<p><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a="">波特率----<span data-v-2505e99a="">》<span data-v-2505e99a="">dropd<span data-v-2505e99a="">ow<span data-v-2505e99a="">nBaud</span></span></span></span></span></span></span></p>
<p><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a="">复选框----<span data-v-2505e99a="">》</span></span></span></span></span></span></span></span></span></span><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a="">HexSendCheckbox</span></span></span></span></span></span></span></span></span></span></p>
<p><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a="">发送区----<span data-v-2505e99a="">》send</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a="">接收区----<span data-v-2505e99a="">》</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a="">recivedData</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a="">l<span data-v-2505e99a="">og----<span data-v-2505e99a="">》log</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>&nbsp;</p>
<p><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a="">2.3 添加 js 脚本</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><span data-v-2505e99a=""><img src="https://img2024.cnblogs.com/blog/2297542/202502/2297542-20250212090835160-2046018523.png" alt=""></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>&nbsp;</p>
<p><span data-v-2505e99a=""><span style="color: rgba(255, 0, 0, 1)">***</span><span data-v-2505e99a="">添加 init 脚本时，注意需要在Settings 中打开 <strong data-v-2505e99a="">在应用程序加载时运行此查询</strong></span></span></p>
<p><span data-v-2505e99a=""><span data-v-2505e99a=""><strong data-v-2505e99a="">init</strong></span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">init 脚本</span><span style="color: rgba(0, 128, 0, 1)">
//</span><span style="color: rgba(0, 128, 0, 1)"> 获取串口列表</span>
const ports =<span style="color: rgba(0, 0, 0, 1)"> await serialAPI.getSerialPorts();
console.log(</span>"v port :"<span style="color: rgba(0, 0, 0, 1)">, ports);

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 格式化串口数据</span>
let formattedPorts = ports.map(port =&gt;<span style="color: rgba(0, 0, 0, 1)"> ({
  disable: </span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">,
  visible: </span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">,
  value: port.path,
  label: port.friendlyName </span>||<span style="color: rgba(0, 0, 0, 1)"> port.path,
}));
console.log(</span>"port:"<span style="color: rgba(0, 0, 0, 1)">, formattedPorts);

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取 defaultPortsValue, portsLabel 和 portsValue</span>
const defaultPortsValue = formattedPorts.length &gt; 0 ? formattedPorts[0].value : <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
const portsLabel </span>= formattedPorts.map(port =&gt;<span style="color: rgba(0, 0, 0, 1)"> port.label);
const portsValue </span>= formattedPorts.map(port =&gt;<span style="color: rgba(0, 0, 0, 1)"> port.value);
const portsSelect </span>=<span style="color: rgba(0, 0, 0, 1)"> {
  defaultPortsValue,
  portsLabel,
  portsValue,
};

const baudsValue </span>= [9600, 115200<span style="color: rgba(0, 0, 0, 1)">];
const baudsLabel </span>= ["9600", "115200"<span style="color: rgba(0, 0, 0, 1)">];
const defaultBaudsValue </span>= baudsValue[0<span style="color: rgba(0, 0, 0, 1)">];
const baudsSelect </span>=<span style="color: rgba(0, 0, 0, 1)"> {
  defaultBaudsValue,
  baudsValue,
  baudsLabel,
};

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 更新 formattedPorts 对象结构</span>
const formattedPortsObject =<span style="color: rgba(0, 0, 0, 1)"> {
  portsSelect,
  baudsSelect,
};

console.log(</span>"formattedPortsObject:"<span style="color: rgba(0, 0, 0, 1)">, formattedPortsObject);

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置页面变量</span>
await actions.setPageVariable('ports'<span style="color: rgba(0, 0, 0, 1)">, formattedPortsObject);
await actions.setPageVariable(</span>'serialRx', ''<span style="color: rgba(0, 0, 0, 1)">);
await actions.setPageVariable(</span>'isOpen', <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 定义处理串口数据的函数</span>
const handleSerialData = async (path, data) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
  </span><span style="color: rgba(0, 0, 255, 1)">if</span> (path ===<span style="color: rgba(0, 0, 0, 1)"> page.variables.usedPort) {
    const receiveTime </span>=<span style="color: rgba(0, 0, 0, 1)"> Date.now();
    console.log(`[${</span><span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Date(receiveTime).toISOString()}] Received data:`, data);
    await actions.setPageVariable(</span>'serialRx'<span style="color: rgba(0, 0, 0, 1)">, data);
  }
};

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 初始化串口连接</span>
const initializeSerialConnection = async () =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
  </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (page.variables.isOpen) {
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置使用的串口</span>
    await actions.setPageVariable('usedPort'<span style="color: rgba(0, 0, 0, 1)">, components.dropdownPort.value);
    serialAPI.onSerialData(components.dropdownPort.value, handleSerialData);
  } </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
    await actions.setPageVariable(</span>'usedPort', ''<span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> serialAPI.offSerialData(portRef.current, handleSerialData);</span>
<span style="color: rgba(0, 0, 0, 1)">  }
};


</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 在页面加载时执行初始化</span>
<span style="color: rgba(0, 0, 0, 1)">await initializeSerialConnection();

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 返回格式化后的串口对象</span>
<span style="color: rgba(0, 0, 255, 1)">return</span> formattedPortsObject;</pre>
</div>
<p>&nbsp;</p>
<p>openPort</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">openPort</span>
<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> mergeUint8Arrays(arrays) {
  console.log(`Received data:`, arrays);

  </span><span style="color: rgba(0, 0, 255, 1)">if</span> (arrays <span style="color: rgba(0, 0, 255, 1)">instanceof</span><span style="color: rgba(0, 0, 0, 1)"> Uint8Array) {
    arrays </span>=<span style="color: rgba(0, 0, 0, 1)"> [arrays];
  }
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">Array.isArray(arrays)) {
        console.error(</span>"Input is not an array."<span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 确保数组中的每个元素都是 Uint8Array</span>
    <span style="color: rgba(0, 0, 255, 1)">for</span> (let i = 0; i &lt; arrays.length; i++<span style="color: rgba(0, 0, 0, 1)">) {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (!(arrays[i] <span style="color: rgba(0, 0, 255, 1)">instanceof</span><span style="color: rgba(0, 0, 0, 1)"> Uint8Array)) {
            console.error(`Element at index ${i} is not a Uint8Array.`);
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
        }
    }

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 计算总长度</span>
    const totalLength = arrays.reduce((sum, arr) =&gt; sum + arr.length, 0<span style="color: rgba(0, 0, 0, 1)">);

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建新的 Uint8Array</span>
    const mergedArray = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Uint8Array(totalLength);

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 复制数据</span>
    let offset = 0<span style="color: rgba(0, 0, 0, 1)">;
    arrays.forEach(arr </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> {
        mergedArray.set(arr, offset);
        offset </span>+=<span style="color: rgba(0, 0, 0, 1)"> arr.length;
    });

    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> mergedArray;
}

const handleSerialData </span>= async (path, data) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
  </span><span style="color: rgba(0, 0, 255, 1)">if</span> (path ===<span style="color: rgba(0, 0, 0, 1)"> page.variables.usedPort) {
    const receiveTime </span>=<span style="color: rgba(0, 0, 0, 1)"> Date.now();
    console.log(`[${</span><span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Date(receiveTime).toISOString()}] Received data:`, data);

    const mergeData </span>=<span style="color: rgba(0, 0, 0, 1)"> mergeUint8Arrays(data);
    const decoder </span>= <span style="color: rgba(0, 0, 255, 1)">new</span> TextDecoder('utf-8'<span style="color: rgba(0, 0, 0, 1)">);
    const stringData </span>=<span style="color: rgba(0, 0, 0, 1)"> decoder.decode(mergeData);
    console.log(</span>"serialRx:"<span style="color: rgba(0, 0, 0, 1)">,stringData);
    await actions.setPageVariable(</span>'serialRx'<span style="color: rgba(0, 0, 0, 1)">, stringData);
  }
};


</span><span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">page.variables.isOpen) {
      </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Open the serial port</span>
      const config =<span style="color: rgba(0, 0, 0, 1)"> {
        path:components.dropdownPort.value,
        baudRate: parseInt(components.dropdownBaud.value, </span>10<span style="color: rgba(0, 0, 0, 1)">),
        dataBits:</span>8<span style="color: rgba(0, 0, 0, 1)">,
        parity:</span>'none'<span style="color: rgba(0, 0, 0, 1)">,
        stopBits:</span>1<span style="color: rgba(0, 0, 0, 1)">,
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> dataBits: parseInt(components.dropdownBits.value, 10),</span>
        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> parity: components.dropdownCrc.value === 'NONE' ? 'none' : components.dropdownCrc.value.toLowerCase(),</span>
        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> stopBits: parseInt(components.dropdownStop.value, 10),</span>
<span style="color: rgba(0, 0, 0, 1)">      };
      </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
        const result </span>=<span style="color: rgba(0, 0, 0, 1)"> await serialAPI.openSerialPort(config);
        console.log(result);

        await actions.setPageVariable(</span>'usedPort'<span style="color: rgba(0, 0, 0, 1)">, components.dropdownPort.value);
        serialAPI.onSerialData(components.dropdownPort.value, handleSerialData);

        await actions.setPageVariable(</span>'isOpen', <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
        components.openButton.setText(</span>"关闭"<span style="color: rgba(0, 0, 0, 1)">);
      } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (error) {
        console.error(</span>'Failed to open serial port:'<span style="color: rgba(0, 0, 0, 1)">, error);
      }
    } </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
      </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Close the serial port</span>
      <span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
        await serialAPI.closeSerialPort(page.variables.usedPort);
        serialAPI.offSerialData(page.variables.usedPort, handleSerialData);

        await actions.setPageVariable(</span>'isOpen', <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
        components.openButton.setText(</span>"打开"<span style="color: rgba(0, 0, 0, 1)">);
      } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (error) {
        console.error(</span>'Failed to close serial port:'<span style="color: rgba(0, 0, 0, 1)">, error);
        await actions.setPageVariable(</span>'isOpen', <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
        components.openButton.setText(</span>"打开"<span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)">(page.variables.usedPort){
          serialAPI.offSerialData(page.variables.usedPort, handleSerialData);
        }

      }
    }
</span><span style="color: rgba(0, 0, 255, 1)">return</span> 0;</pre>
</div>
<p>&nbsp;</p>
<p>sendData</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">sendData</span>
<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> hexStringToUint8Array(hexString) {
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 确保字符串长度为偶数</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span> (hexString.length % 2 !== 0<span style="color: rgba(0, 0, 0, 1)">) {
      </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建一个 Uint8Array，长度为字符串长度的一半</span>
    const length = hexString.length / 2<span style="color: rgba(0, 0, 0, 1)">;
    const uint8Array </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Uint8Array(length);

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 遍历字符串，每两个字符解析为一个字节</span>
    <span style="color: rgba(0, 0, 255, 1)">for</span> (let i = 0; i &lt; length; i++<span style="color: rgba(0, 0, 0, 1)">) {
        const byteHex </span>= hexString.substr(i * 2, 2); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 提取两个字符</span>
        uint8Array[i] = parseInt(byteHex, 16); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 将 16 进制字符串解析为数字</span>
<span style="color: rgba(0, 0, 0, 1)">    }

    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> uint8Array;
}


</span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)">(page.variables.isOpen){
  </span><span style="color: rgba(0, 0, 255, 1)">if</span>(!<span style="color: rgba(0, 0, 0, 1)">components.HexSendCheckbox.value){
    serialAPI.writeSerialPort(page.variables.usedPort,components.sendData.value);
  }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">{
    const hexSend </span>=<span style="color: rgba(0, 0, 0, 1)"> hexStringToUint8Array(components.sendData.value);
    </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)">(hexSend){
      serialAPI.writeSerialPort(page.variables.usedPort,hexSend);
      </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> actions.showAlert("info:"+ "发送成功"); // 使用 ToolJet 的 toast 组件</span>
      actions.setVariable("infoMessage", "发送成功"<span style="color: rgba(0, 0, 0, 1)">);
      </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> queries.log.run()</span>
      await actions.runQuery('log',{message: "发送成功"<span style="color: rgba(0, 0, 0, 1)">});
    }
  }

}</span></pre>
</div>
<p>&nbsp;</p>
<p>log</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">log</span>

<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 更新 log 内容</span>
components.log.setText(components.log.value + variables.infoMessage + "\r\n"<span style="color: rgba(0, 0, 0, 1)">);

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取 TextArea 元素</span><span style="color: rgba(0, 128, 0, 1)">
//</span><span style="color: rgba(0, 128, 0, 1)"> 获取外层 div 元素</span>
const textareaWrapper =<span style="color: rgba(0, 0, 0, 1)"> document.getElementById(components.log.id);

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 从外层 div 中找到 textarea 元素</span>
const textareaElement = textareaWrapper ? textareaWrapper.querySelector("textarea") : <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 检查是否成功获取 textarea</span>
<span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (textareaElement) {
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 滚动到 textarea 的底部</span>
    textareaElement.scrollTop =<span style="color: rgba(0, 0, 0, 1)"> textareaElement.scrollHeight;
}</span></pre>
</div>
<p>&nbsp;</p>
<p>2.4 组件事件与js脚本进行关联</p>
<p><img src="https://img2024.cnblogs.com/blog/2297542/202502/2297542-20250212090649158-282641268.png" alt=""></p>
<p>&nbsp;</p>
<p data-v-2505e99a="" data-v-5b474d2a=""><strong data-v-2505e99a="">3. 结束</strong></p>
<p data-v-2505e99a="" data-v-5b474d2a=""><span data-v-2505e99a="">更多的细节需要你自己的探索，那就开始你的点线面低代码的探索之旅吧！</span></p>
<p data-v-2505e99a="" data-v-5b474d2a=""><span data-v-2505e99a="">有问题可以私信我，也可以在应用程序中找到联系方式，单独交流。</span></p>
<p data-v-2505e99a="" data-v-5b474d2a="">&nbsp;</p>
<p data-v-2505e99a="" data-v-5b474d2a="">&nbsp;</p>
<p>&nbsp;</p>
</div>
<div id="MySignature" role="contentinfo">
    连接精致生活
</div>
<div class="clear"></div>
</div>
	