
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xiao987334176/p/18872195" title="发布于 2025-05-15 15:44">
    <span role="heading" aria-level="2">python开发Streamable HTTP MCP应用</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>一、概述</h1>
<p>使用python开发，最好的框架是fastmcp，github连接：<a href="https://github.com/jlowin/fastmcp" target="_blank" rel="noopener nofollow">https://github.com/jlowin/fastmcp</a></p>
<p>2025 年 5 月 9 日，fastmcp发布v2.3.0版本，正式支持Streamable HTTP</p>
<p>终于等到官方支持了！</p>
<p>&nbsp;</p>
<p>注意：2.3.0版本有bug，目前最新版本已经修复了</p>
<p>升级到最新版本</p>
<div class="cnblogs_code">
<pre>pip <span style="color: rgba(0, 0, 255, 1)">install</span> --upgrade fastmcp</pre>
</div>
<p>&nbsp;</p>
<p>关于Streamable HTTP的介绍，请参考链接：<a href="https://www.cnblogs.com/xiao987334176/p/18845151" target="_blank">https://www.cnblogs.com/xiao987334176/p/18845151</a></p>
<p>这里就不再重复了</p>
<p>&nbsp;</p>
<h1>二、Streamable HTTP MCP应用</h1>
<h2>官方demo</h2>
<p>server.py</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">from fastmcp import FastMCP

mcp </span>= FastMCP(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Demo 🚀</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

@mcp.tool()
def add(a: </span><span style="color: rgba(0, 0, 255, 1)">int</span>, b: <span style="color: rgba(0, 0, 255, 1)">int</span>) -&gt; <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)">:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">Add two numbers</span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    return a </span>+<span style="color: rgba(0, 0, 0, 1)"> b

</span><span style="color: rgba(0, 0, 255, 1)">if</span> __name__ == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">__main__</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
    mcp.run(transport</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">streamable-http</span><span style="color: rgba(128, 0, 0, 1)">"</span>, host=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">0.0.0.0</span><span style="color: rgba(128, 0, 0, 1)">"</span>, port=<span style="color: rgba(128, 0, 128, 1)">8000</span>, path=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/mcp</span><span style="color: rgba(128, 0, 0, 1)">"</span>)</pre>
</div>
<p>通过以上8行代码，就简单实现了Streamable HTTP MCP应用。</p>
<p>&nbsp;</p>
<h2>获取服务器公网ip</h2>
<p>通过一个在实际生产环境中，使用的功能，来演示一个Streamable HTTP MCP应用</p>
<p>server.py</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> json
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> requests
</span><span style="color: rgba(0, 0, 255, 1)">from</span> fastmcp <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> FastMCP
mcp </span>= FastMCP(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Demo 🚀</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)


@mcp.tool()
</span><span style="color: rgba(0, 0, 255, 1)">def</span> get_public_ip_address() -&gt;<span style="color: rgba(0, 0, 0, 1)"> str:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
    获取服务器公网 IP 地址
    返回: 
        str: 当前网络的公网 IP 地址
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span>
    <span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">:
        response </span>= requests.get(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://ip-api.com/json</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        response.raise_for_status()  </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 检查 HTTP 请求是否成功</span>
        content =<span style="color: rgba(0, 0, 0, 1)"> json.loads(response.text)
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> content.get(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">query</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Unknown IP</span><span style="color: rgba(128, 0, 0, 1)">"</span>)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 提供默认值以防字段缺失</span>
    <span style="color: rgba(0, 0, 255, 1)">except</span><span style="color: rgba(0, 0, 0, 1)"> requests.RequestException as e:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">请求错误: {e}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Request Failed</span><span style="color: rgba(128, 0, 0, 1)">"</span>
    <span style="color: rgba(0, 0, 255, 1)">except</span><span style="color: rgba(0, 0, 0, 1)"> json.JSONDecodeError as e:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">JSON 解码错误: {e}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Invalid Response</span><span style="color: rgba(128, 0, 0, 1)">"</span>


<span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(128, 0, 128, 1)">__name__</span> == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">__main__</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> mcp.run()</span>
    mcp.run(transport=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">streamable-http</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
            host</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">0.0.0.0</span><span style="color: rgba(128, 0, 0, 1)">"</span>, port=9000, path=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/mcp</span><span style="color: rgba(128, 0, 0, 1)">"</span>)</pre>
</div>
<p>运行代码</p>
<div class="cnblogs_code">
<pre>python server.py</pre>
</div>
<p>输出：</p>
<div class="cnblogs_code">
<pre>[<span style="color: rgba(128, 0, 128, 1)">05</span>/<span style="color: rgba(128, 0, 128, 1)">12</span>/<span style="color: rgba(128, 0, 128, 1)">25</span> <span style="color: rgba(128, 0, 128, 1)">10</span>:<span style="color: rgba(128, 0, 128, 1)">03</span>:<span style="color: rgba(128, 0, 128, 1)">55</span>] INFO     Starting server <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">public_ip_address</span><span style="color: rgba(128, 0, 0, 1)">"</span>...                                                                                                                                                                                                                         server.py:<span style="color: rgba(128, 0, 128, 1)">202</span><span style="color: rgba(0, 0, 0, 1)">
INFO:     Started server process [</span><span style="color: rgba(128, 0, 128, 1)">43312</span><span style="color: rgba(0, 0, 0, 1)">]
INFO:     Waiting </span><span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http:</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">0.0.0.0:9000 (Press CTRL+C to quit)</span></pre>
</div>
<h3>Cherry Studio测试</h3>
<p>请确保Cherry Studio版本是最新的，因为新版本，增加了Streamable HTTP支持</p>
<p>添加mcp服务器</p>
<p>&nbsp;</p>
<p>名称：public_ip_address_mcp</p>
<p>类型：Streamable HTTP</p>
<p>url：http://localhost:9000/mcp</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250512100757034-1717375166.png" alt="" loading="lazy"></p>
<p>&nbsp;添加成功后，点击工具，可以看到工具方法</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250512100957278-653628197.png" alt="" loading="lazy"></p>
<p>&nbsp;创建</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250512101856001-2027451460.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>添加</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250512101915349-971324970.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>选择助手</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250512101940151-726646954.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>选择</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250512102020632-1045283391.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>提问公网ip，效果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250515140540666-1486994608.png" alt="" loading="lazy"></p>
<p>验证一下公网ip是否正确，打开网页</p>
<div><a href="http://ip-api.com/json" target="_blank" rel="noopener nofollow">http://ip-api.com/json</a></div>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250515140634654-893734690.png" alt="" loading="lazy"></p>
<p>结果是正确的，没问题。</p>
<p>&nbsp;</p>
<h1>三、SSE转换为Streamable HTTP</h1>
<h2>代码改造</h2>
<p>在前面的文章中，写的mysql应用是SSE模式，链接：<a href="https://www.cnblogs.com/xiao987334176/p/18827297" target="_blank">https://www.cnblogs.com/xiao987334176/p/18827297</a></p>
<p>把代码拷贝过来，只需要修改2行代码，就可以无缝转换为Streamable HTTP&nbsp;</p>
<p>&nbsp;</p>
<p>将以下2行</p>
<div class="cnblogs_code">
<pre>mcp = FastMCP(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">operateMysql</span><span style="color: rgba(128, 0, 0, 1)">"</span>, host=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">0.0.0.0</span><span style="color: rgba(128, 0, 0, 1)">"</span>, port=9000<span style="color: rgba(0, 0, 0, 1)">)
mcp.run(transport</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">sse</span><span style="color: rgba(128, 0, 0, 1)">"</span>)</pre>
</div>
<p>修改为：</p>
<div class="cnblogs_code">
<pre>mcp = FastMCP(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">operateMysql</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
mcp.run(transport</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">streamable-http</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
            host</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">0.0.0.0</span><span style="color: rgba(128, 0, 0, 1)">"</span>, port=9000, path=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/mcp</span><span style="color: rgba(128, 0, 0, 1)">"</span>)</pre>
</div>
<p>&nbsp;</p>
<p>mysql_mcp_server_pro应用，完整代码如下：</p>
<p>server.py</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> fastmcp <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> FastMCP
</span><span style="color: rgba(0, 0, 255, 1)">from</span> mysql.connector <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> connect, Error
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> os

mcp </span>= FastMCP(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">operateMysql</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)


</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> get_db_config():
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">从环境变量获取数据库配置信息

    返回:
        dict: 包含数据库连接所需的配置信息
        - host: 数据库主机地址
        - port: 数据库端口
        - user: 数据库用户名
        - password: 数据库密码
        - database: 数据库名称

    异常:
        ValueError: 当必需的配置信息缺失时抛出
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">

    config </span>=<span style="color: rgba(0, 0, 0, 1)"> {
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">host</span><span style="color: rgba(128, 0, 0, 1)">"</span>: os.getenv(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MYSQL_HOST</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">localhost</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">),
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">port</span><span style="color: rgba(128, 0, 0, 1)">"</span>: int(os.getenv(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MYSQL_PORT</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">3306</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)),
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">user</span><span style="color: rgba(128, 0, 0, 1)">"</span>: os.getenv(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MYSQL_USER</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">),
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">password</span><span style="color: rgba(128, 0, 0, 1)">"</span>: os.getenv(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MYSQL_PASSWORD</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">),
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">database</span><span style="color: rgba(128, 0, 0, 1)">"</span>: os.getenv(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MYSQL_DATABASE</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">),
    }
    </span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(config)
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(0, 0, 255, 1)">not</span><span style="color: rgba(0, 0, 0, 1)"> all(
        [
            config[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">host</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">],
            config[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">port</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">],
            config[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">user</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">],
            config[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">password</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">],
            config[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">database</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">],
        ]
    ):
        </span><span style="color: rgba(0, 0, 255, 1)">raise</span> ValueError(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">缺少必需的数据库配置</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> config


@mcp.tool()
</span><span style="color: rgba(0, 0, 255, 1)">def</span> execute_sql(query: str) -&gt;<span style="color: rgba(0, 0, 0, 1)"> list:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">执行SQL查询语句

    参数:
        query (str): 要执行的SQL语句，支持多条语句以分号分隔

    返回:
        list: 包含查询结果的TextContent列表
        - 对于SELECT查询：返回CSV格式的结果，包含列名和数据
        - 对于SHOW TABLES：返回数据库中的所有表名
        - 对于其他查询：返回执行状态和影响行数
        - 多条语句的结果以"---"分隔

    异常:
        Error: 当数据库连接或查询执行失败时抛出
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    config </span>=<span style="color: rgba(0, 0, 0, 1)"> get_db_config()
    </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">:
        with connect(</span>**<span style="color: rgba(0, 0, 0, 1)">config) as conn:
            with conn.cursor() as cursor:
                statements </span>= [stmt.strip() <span style="color: rgba(0, 0, 255, 1)">for</span> stmt <span style="color: rgba(0, 0, 255, 1)">in</span> query.split(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">;</span><span style="color: rgba(128, 0, 0, 1)">"</span>) <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> stmt.strip()]
                results </span>=<span style="color: rgba(0, 0, 0, 1)"> []

                </span><span style="color: rgba(0, 0, 255, 1)">for</span> statement <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> statements:
                    </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">:
                        cursor.execute(statement)

                        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 检查语句是否返回了结果集 (SELECT, SHOW, EXPLAIN, etc.)</span>
                        <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> cursor.description:
                            columns </span>= [desc[0] <span style="color: rgba(0, 0, 255, 1)">for</span> desc <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> cursor.description]
                            rows </span>=<span style="color: rgba(0, 0, 0, 1)"> cursor.fetchall()

                            </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 将每一行的数据转换为字符串，特殊处理None值</span>
                            formatted_rows =<span style="color: rgba(0, 0, 0, 1)"> []
                            </span><span style="color: rgba(0, 0, 255, 1)">for</span> row <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> rows:
                                formatted_row </span>=<span style="color: rgba(0, 0, 0, 1)"> [
                                    </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">NULL</span><span style="color: rgba(128, 0, 0, 1)">"</span> <span style="color: rgba(0, 0, 255, 1)">if</span> value <span style="color: rgba(0, 0, 255, 1)">is</span> None <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> str(value)
                                    </span><span style="color: rgba(0, 0, 255, 1)">for</span> value <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> row
                                ]
                                formatted_rows.append(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">,</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">.join(formatted_row))

                            </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 将列名和数据合并为CSV格式</span>
<span style="color: rgba(0, 0, 0, 1)">                            results.append(
                                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\n</span><span style="color: rgba(128, 0, 0, 1)">"</span>.join([<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">,</span><span style="color: rgba(128, 0, 0, 1)">"</span>.join(columns)] +<span style="color: rgba(0, 0, 0, 1)"> formatted_rows)
                            )

                        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 如果语句没有返回结果集 (INSERT, UPDATE, DELETE, etc.)</span>
                        <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
                            conn.commit()  </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 只有在非查询语句时才提交</span>
                            results.append(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">查询执行成功。影响行数: {cursor.rowcount}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

                    </span><span style="color: rgba(0, 0, 255, 1)">except</span><span style="color: rgba(0, 0, 0, 1)"> Error as stmt_error:
                        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 单条语句执行出错时，记录错误并继续执行</span>
<span style="color: rgba(0, 0, 0, 1)">                        results.append(
                            f</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">执行语句 '{statement}' 出错: {str(stmt_error)}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
                        )
                        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 可以在这里选择是否继续执行后续语句，目前是继续</span>

                <span style="color: rgba(0, 0, 255, 1)">return</span> [<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\n---\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">.join(results)]

    </span><span style="color: rgba(0, 0, 255, 1)">except</span><span style="color: rgba(0, 0, 0, 1)"> Error as e:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">执行SQL '{query}' 时出错: {e}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> [f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">执行查询时出错: {str(e)}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]


@mcp.tool()
</span><span style="color: rgba(0, 0, 255, 1)">def</span> get_table_name(text: str) -&gt;<span style="color: rgba(0, 0, 0, 1)"> list:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">根据表的中文注释搜索数据库中的表名

    参数:
        text (str): 要搜索的表中文注释关键词

    返回:
        list: 包含查询结果的TextContent列表
        - 返回匹配的表名、数据库名和表注释信息
        - 结果以CSV格式返回，包含列名和数据
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    config </span>=<span style="color: rgba(0, 0, 0, 1)"> get_db_config()
    sql </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">SELECT TABLE_SCHEMA, TABLE_NAME, TABLE_COMMENT </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    sql </span>+= f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">FROM information_schema.TABLES WHERE TABLE_SCHEMA = '{config['database']}' AND TABLE_COMMENT LIKE '%{text}%';</span><span style="color: rgba(128, 0, 0, 1)">"</span>
    <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> execute_sql(sql)


@mcp.tool()
</span><span style="color: rgba(0, 0, 255, 1)">def</span> get_table_desc(text: str) -&gt;<span style="color: rgba(0, 0, 0, 1)"> list:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">获取指定表的字段结构信息

    参数:
        text (str): 要查询的表名，多个表名以逗号分隔

    返回:
        list: 包含查询结果的列表
        - 返回表的字段名、字段注释等信息
        - 结果按表名和字段顺序排序
        - 结果以CSV格式返回，包含列名和数据
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    config </span>=<span style="color: rgba(0, 0, 0, 1)"> get_db_config()
    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 将输入的表名按逗号分割成列表</span>
    table_names = [name.strip() <span style="color: rgba(0, 0, 255, 1)">for</span> name <span style="color: rgba(0, 0, 255, 1)">in</span> text.split(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">,</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 构建IN条件</span>
    table_condition = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">','</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">.join(table_names)
    sql </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">SELECT TABLE_NAME, COLUMN_NAME, COLUMN_COMMENT </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    sql </span>+=<span style="color: rgba(0, 0, 0, 1)"> (
        f</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = '{config['database']}' </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    )
    sql </span>+= f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">AND TABLE_NAME IN ('{table_condition}') ORDER BY TABLE_NAME, ORDINAL_POSITION;</span><span style="color: rgba(128, 0, 0, 1)">"</span>
    <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> execute_sql(sql)


@mcp.tool()
</span><span style="color: rgba(0, 0, 255, 1)">def</span> get_lock_tables() -&gt;<span style="color: rgba(0, 0, 0, 1)"> list:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
    获取当前mysql服务器InnoDB 的行级锁

    返回:
        list: 包含查询结果的TextContent列表
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    sql </span>= <span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">SELECT
    p2.`HOST` AS 被阻塞方host,
    p2.`USER` AS 被阻塞方用户,
    r.trx_id AS 被阻塞方事务id,
    r.trx_mysql_thread_id AS 被阻塞方线程号,
    TIMESTAMPDIFF(SECOND, r.trx_wait_started, CURRENT_TIMESTAMP) AS 等待时间,
    r.trx_query AS 被阻塞的查询,
    l.OBJECT_NAME AS 阻塞方锁住的表,
    m.LOCK_MODE AS 被阻塞方的锁模式,
    m.LOCK_TYPE AS '被阻塞方的锁类型(表锁还是行锁)',
    m.INDEX_NAME AS 被阻塞方锁住的索引,
    m.OBJECT_SCHEMA AS 被阻塞方锁对象的数据库名,
    m.OBJECT_NAME AS 被阻塞方锁对象的表名,
    m.LOCK_DATA AS 被阻塞方事务锁定记录的主键值,
    p.`HOST` AS 阻塞方主机,
    p.`USER` AS 阻塞方用户,
    b.trx_id AS 阻塞方事务id,
    b.trx_mysql_thread_id AS 阻塞方线程号,
    b.trx_query AS 阻塞方查询,
    l.LOCK_MODE AS 阻塞方的锁模式,
    l.LOCK_TYPE AS '阻塞方的锁类型(表锁还是行锁)',
    l.INDEX_NAME AS 阻塞方锁住的索引,
    l.OBJECT_SCHEMA AS 阻塞方锁对象的数据库名,
    l.OBJECT_NAME AS 阻塞方锁对象的表名,
    l.LOCK_DATA AS 阻塞方事务锁定记录的主键值,
    IF(p.COMMAND = 'Sleep', CONCAT(p.TIME, ' 秒'), 0) AS 阻塞方事务空闲的时间
    FROM performance_schema.data_lock_waits w
    INNER JOIN performance_schema.data_locks l ON w.BLOCKING_ENGINE_LOCK_ID = l.ENGINE_LOCK_ID
    INNER JOIN performance_schema.data_locks m ON w.REQUESTING_ENGINE_LOCK_ID = m.ENGINE_LOCK_ID
    INNER JOIN information_schema.INNODB_TRX b ON b.trx_id = w.BLOCKING_ENGINE_TRANSACTION_ID
    INNER JOIN information_schema.INNODB_TRX r ON r.trx_id = w.REQUESTING_ENGINE_TRANSACTION_ID
    INNER JOIN information_schema.PROCESSLIST p ON p.ID = b.trx_mysql_thread_id
    INNER JOIN information_schema.PROCESSLIST p2 ON p2.ID = r.trx_mysql_thread_id
    ORDER BY 等待时间 DESC;</span><span style="color: rgba(128, 0, 0, 1)">"""</span>

    <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> execute_sql(sql)


</span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(128, 0, 128, 1)">__name__</span> == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">__main__</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
    mcp.run(transport</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">streamable-http</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
            host</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">0.0.0.0</span><span style="color: rgba(128, 0, 0, 1)">"</span>, port=9000, path=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/mcp</span><span style="color: rgba(128, 0, 0, 1)">"</span>)</pre>
</div>
<h2>编译镜像</h2>
<p>修改Dockerfile，升级fastmcp</p>
<div class="cnblogs_code">
<pre>FROM python:<span style="color: rgba(128, 0, 128, 1)">3.13</span>.<span style="color: rgba(128, 0, 128, 1)">3</span>-alpine3.<span style="color: rgba(128, 0, 128, 1)">21</span><span style="color: rgba(0, 0, 0, 1)">
ADD . </span>/<span style="color: rgba(0, 0, 0, 1)">app
RUN pip3 </span><span style="color: rgba(0, 0, 255, 1)">install</span> --upgrade pip -i https:<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">pypi.tuna.tsinghua.edu.cn/simple &amp;&amp; \</span>
    pip3 <span style="color: rgba(0, 0, 255, 1)">install</span> mysql-connector-python fastmcp -i https:<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">pypi.tuna.tsinghua.edu.cn/simple &amp;&amp; \</span>
    pip3 <span style="color: rgba(0, 0, 255, 1)">install</span> --<span style="color: rgba(0, 0, 0, 1)">upgrade fastmcp
WORKDIR </span>/<span style="color: rgba(0, 0, 0, 1)">app

EXPOSE </span><span style="color: rgba(128, 0, 128, 1)">9000</span><span style="color: rgba(0, 0, 0, 1)">

ENTRYPOINT [</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">python3</span><span style="color: rgba(128, 0, 0, 1)">"</span>,<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/app/server.py</span><span style="color: rgba(128, 0, 0, 1)">"</span>]</pre>
</div>
<p>&nbsp;</p>
<p>编译镜像</p>
<div class="cnblogs_code">
<pre>docker build -t mysql_mcp_server_pro:v1 .</pre>
</div>
<p>&nbsp;</p>
<h2>使用docker-compose启动</h2>
<p>docker-compose.yaml</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">services:
  mysql_mcp_server_pro:
    image: mysql_mcp_server_pro:v1
    container_name: mysql_mcp_server_pro
    ports:
      </span>- <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">9090:9000</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    environment:
      MYSQL_HOST: </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">192.168.20.128</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
      MYSQL_PORT: </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">3306</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
      MYSQL_USER: </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">root</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
      MYSQL_PASSWORD: </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">abcd@1234</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
      MYSQL_DATABASE: </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">test</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
      TZ: Asia</span>/<span style="color: rgba(0, 0, 0, 1)">Shanghai
    restart: always</span></pre>
</div>
<p>注意修改mysql相关环境变量</p>
<p>&nbsp;</p>
<p>运行</p>
<div class="cnblogs_code">
<pre>docker-compose up -d</pre>
</div>
<p>&nbsp;</p>
<h2>Cherry Studio测试</h2>
<p>添加MCP服务器</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250515152553604-1250665337.png" alt="" loading="lazy"></p>
<p>添加智能体mysql8</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250515152648627-700026281.png" alt="" loading="lazy"></p>
<p>&nbsp;提示词和以前一样</p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_a57cd39e-826a-4777-b94a-54da9aa5c81f" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_a57cd39e-826a-4777-b94a-54da9aa5c81f" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_a57cd39e-826a-4777-b94a-54da9aa5c81f" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 0, 0, 1)">使用中文回复。

当用户提问中涉及学生、教师、成绩、班级、课程等实体时，需要使用 MySQL MCP 进行数据查询和操作，表结构说明如下：

# 学生管理系统数据库表结构说明

## </span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">. 教师表 (teachers)

</span>| 字段名 | 类型 | 描述 | 约束 | 示例 |
|--------|------|------|------|------|
| <span style="color: rgba(0, 0, 255, 1)">id</span> | varchar | 教师ID | 主键 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">T001</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| name | varchar | 教师姓名 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">张建国</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| gender | enum | 性别 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">男</span><span style="color: rgba(128, 0, 0, 1)">"</span>或<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">女</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">男</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| subject | varchar | 教授科目 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">数学</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| title | varchar | 职称 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">教授</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| phone | varchar | 联系电话 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">13812345678</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| office | varchar | 办公室位置 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">博学楼301</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| wechat | varchar | 微信(可选) | 可选 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">lily_teacher</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| isHeadTeacher | enum | 是否为班主任，<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">"</span>或<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">"</span> | 可选 |&nbsp;<span style="color: rgba(0, 0, 255, 1)">true</span>&nbsp;|<span style="color: rgba(0, 0, 0, 1)">

## </span><span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">. 班级表 (classes)

</span>| 字段名 | 类型 | 描述 | 约束 | 示例 |
|--------|------|------|------|------|
| <span style="color: rgba(0, 0, 255, 1)">id</span> | varchar | 班级ID | 主键 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">202301</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| className | varchar | 班级名称 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2023级计算机1班</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| grade | <span style="color: rgba(0, 0, 255, 1)">int</span> | 年级 | 必填 | <span style="color: rgba(128, 0, 128, 1)">2023</span> |
| headTeacherId | varchar | 班主任ID | 外键(teachers.<span style="color: rgba(0, 0, 255, 1)">id</span>) |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">T003</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| classroom | varchar | 教室位置 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">1号楼302</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| studentCount | <span style="color: rgba(0, 0, 255, 1)">int</span> | 学生人数 | 必填 | <span style="color: rgba(128, 0, 128, 1)">35</span> |
| remark | varchar | 备注信息 | 可选 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">市级优秀班集体</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|<span style="color: rgba(0, 0, 0, 1)">

## </span><span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">. 课程表 (courses)

</span>| 字段名 | 类型 | 描述 | 约束 | 示例 |
|--------|------|------|------|------|
| <span style="color: rgba(0, 0, 255, 1)">id</span> | varchar | 课程ID | 主键 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">C001</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| courseName | varchar | 课程名称 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">高等数学</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| credit | <span style="color: rgba(0, 0, 255, 1)">int</span> | 学分 | 必填 | <span style="color: rgba(128, 0, 128, 1)">4</span> |
| teacherId | varchar | 授课教师ID | 外键(teachers.<span style="color: rgba(0, 0, 255, 1)">id</span>) |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">T001</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| semester | varchar | 学期 | 格式<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">YYYY-N</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2023-1</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
|&nbsp;type&nbsp;| enum | 课程类型 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">必修</span><span style="color: rgba(128, 0, 0, 1)">"</span>或<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">选修</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">必修</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| prerequisite | varchar | 先修课程ID | 可选,外键(courses.<span style="color: rgba(0, 0, 255, 1)">id</span>) |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">C003</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|<span style="color: rgba(0, 0, 0, 1)">

## </span><span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">. 学生表 (students)

</span>| 字段名 | 类型 | 描述 | 约束 | 示例 |
|--------|------|------|------|------|
| <span style="color: rgba(0, 0, 255, 1)">id</span> | varchar | 学号 | 主键 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">S20230101</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| name | varchar | 学生姓名 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">王强</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| gender | enum | 性别 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">男</span><span style="color: rgba(128, 0, 0, 1)">"</span>或<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">女</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">男</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| birthDate | <span style="color: rgba(0, 0, 255, 1)">date</span> | 出生日期 | 必填 | <span style="color: rgba(0, 0, 255, 1)">date</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2005-01-15</span><span style="color: rgba(128, 0, 0, 1)">"</span>) |
| enrollmentDate | <span style="color: rgba(0, 0, 255, 1)">date</span> | 入学日期 | 必填 | <span style="color: rgba(0, 0, 255, 1)">date</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2023-8-1</span><span style="color: rgba(128, 0, 0, 1)">"</span>) |
| classId | varchar | 班级ID | 外键(classes.<span style="color: rgba(0, 0, 255, 1)">id</span>) |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">202301</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| phone | varchar | 联系电话 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">13812345678</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| email | varchar | 电子邮箱 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">20230101@school.edu.cn</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| emergencyContact | varchar | 紧急联系人电话 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">13876543210</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| address | varchar | 家庭住址 | 必填 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">北京市海淀区中关村大街1栋101室</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| height | <span style="color: rgba(0, 0, 255, 1)">int</span> | 身高(cm) | 必填 | <span style="color: rgba(128, 0, 128, 1)">175</span> |
| weight | <span style="color: rgba(0, 0, 255, 1)">int</span> | 体重(kg) | 必填 | <span style="color: rgba(128, 0, 128, 1)">65</span> |
| healthStatus | enum | 健康状况 | 必填，<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">良好</span><span style="color: rgba(128, 0, 0, 1)">"</span>或<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">一般‌</span><span style="color: rgba(128, 0, 0, 1)">"</span>或<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">较差</span><span style="color: rgba(128, 0, 0, 1)">"</span> |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">良好</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|<span style="color: rgba(0, 0, 0, 1)">

## </span><span style="color: rgba(128, 0, 128, 1)">5</span><span style="color: rgba(0, 0, 0, 1)">. 成绩表 (scores)

</span>| 字段名 | 类型 | 描述 | 约束 | 示例 |
|--------|------|------|------|------|
| <span style="color: rgba(0, 0, 255, 1)">id</span> | varchar | 成绩记录ID | 主键 |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">S20230101C001</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| studentId | varchar | 学生ID | 外键(students.<span style="color: rgba(0, 0, 255, 1)">id</span>) |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">S20230101</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| courseId | varchar | 课程ID | 外键(courses.<span style="color: rgba(0, 0, 255, 1)">id</span>) |&nbsp;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">C001</span><span style="color: rgba(128, 0, 0, 1)">"</span>&nbsp;|
| score | <span style="color: rgba(0, 0, 255, 1)">int</span> | 综合成绩 | <span style="color: rgba(128, 0, 128, 1)">0</span>-<span style="color: rgba(128, 0, 128, 1)">100</span> | <span style="color: rgba(128, 0, 128, 1)">85</span> |
| examDate | <span style="color: rgba(0, 0, 255, 1)">date</span> | 考试日期 | 必填 | <span style="color: rgba(0, 0, 255, 1)">date</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2024-5-20</span><span style="color: rgba(128, 0, 0, 1)">"</span>) |
| usualScore | <span style="color: rgba(0, 0, 255, 1)">int</span> | 平时成绩 | <span style="color: rgba(128, 0, 128, 1)">0</span>-<span style="color: rgba(128, 0, 128, 1)">100</span> | <span style="color: rgba(128, 0, 128, 1)">90</span> |
| finalScore | <span style="color: rgba(0, 0, 255, 1)">int</span> | 期末成绩 | <span style="color: rgba(128, 0, 128, 1)">0</span>-<span style="color: rgba(128, 0, 128, 1)">100</span> | <span style="color: rgba(128, 0, 128, 1)">80</span> |<span style="color: rgba(0, 0, 0, 1)">

### 补考成绩记录说明
补考记录在_id后添加</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">_M</span><span style="color: rgba(128, 0, 0, 1)">"</span>后缀，如<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">S20230101C001_M</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">

## 表关系说明

</span><span style="color: rgba(128, 0, 128, 1)">1</span>. **一对多关系**<span style="color: rgba(0, 0, 0, 1)">:
&nbsp; &nbsp;</span>-<span style="color: rgba(0, 0, 0, 1)"> 一个班级(classes)对应多个学生(students)
&nbsp; &nbsp;</span>-<span style="color: rgba(0, 0, 0, 1)"> 一个教师(teachers)可以教授多门课程(courses)
&nbsp; &nbsp;</span>-<span style="color: rgba(0, 0, 0, 1)"> 一个学生(students)有多条成绩记录(scores)

</span><span style="color: rgba(128, 0, 128, 1)">2</span>. **外键约束**<span style="color: rgba(0, 0, 0, 1)">:
&nbsp; &nbsp;</span>- students.classId → classes.<span style="color: rgba(0, 0, 255, 1)">id</span><span style="color: rgba(0, 0, 0, 1)">
&nbsp; &nbsp;</span>- courses.teacherId → teachers.<span style="color: rgba(0, 0, 255, 1)">id</span><span style="color: rgba(0, 0, 0, 1)">
&nbsp; &nbsp;</span>- scores.studentId → students.<span style="color: rgba(0, 0, 255, 1)">id</span><span style="color: rgba(0, 0, 0, 1)">
&nbsp; &nbsp;</span>- scores.courseId → courses.<span style="color: rgba(0, 0, 255, 1)">id</span><span style="color: rgba(0, 0, 0, 1)">
&nbsp; &nbsp;</span>- classes.headTeacherId → teachers.<span style="color: rgba(0, 0, 255, 1)">id</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>mysql表结构，参考文章：<a href="https://www.cnblogs.com/xiao987334176/p/18826422" target="_blank">https://www.cnblogs.com/xiao987334176/p/18826422</a></p>
<p>&nbsp;</p>
<p>将智能体，添加助手</p>
<p>打开助手，选择MCP</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250515152851437-387806280.png" alt="" loading="lazy"></p>
<p>&nbsp;提一个问题，李华的老师是谁</p>
<p>效果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202505/1341090-20250515152926990-61689416.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.02500926229976852" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-15 15:45">2025-05-15 15:44</span>&nbsp;
<a href="https://www.cnblogs.com/xiao987334176">肖祥</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18872195);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18872195', targetLink: 'https://www.cnblogs.com/xiao987334176/p/18872195', title: 'python开发Streamable HTTP MCP应用' })">举报</a>
</div>
        