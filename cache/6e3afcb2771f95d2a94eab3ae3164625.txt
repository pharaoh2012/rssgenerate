
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18657572" title="发布于 2025-01-07 14:32">
    <span role="heading" aria-level="2">manim边做边学--动画组合</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>动画组合类的作用是将多个动画组合起来，以实现更复杂的动画效果。</p>
<p><code>Manim</code>中有<strong>4个</strong>用于动画组合的类：</p>
<ol>
<li><code>AnimationGroup</code>：将多个动画组合在一起同时播放，能一次性呈现多个对象的不同变化</li>
<li><code>LaggedStart</code>：按照添加顺序依次启动多个动画，每个动画间有延迟，使动画呈现出清晰的先后顺序</li>
<li><code>LaggedStartMap</code>：对一组对象应用相同动画，并按顺序逐个启动且有延迟，快速实现批量相似动画效果</li>
<li><code>Succession</code>：严格按照添加顺序依次播放多个动画，前一个完成后下一个才开始，确保动画按特定流程进行</li>
</ol>
<h1 id="1-动画概述">1. 动画概述</h1>
<h2 id="11-animationgroup">1.1. AnimationGroup</h2>
<p>当需要同时播放多个动画时，<code>AnimationGroup</code>非常有用。</p>
<p>例如，在一个场景中，需要同时移动多个图形、改变它们的颜色或执行其他操作。</p>
<p><code>AnimationGroup</code>中包含的所有动画会同时开始和结束，可以通过设置<code>lag_ratio</code>参数来调整动画之间的延迟比例。</p>
<p>它的参数主要有：</p>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>animations</td>
<td>[Animation]</td>
<td>要播放的动画对象序列</td>
</tr>
<tr>
<td>group</td>
<td>Group</td>
<td>包含多个Mobject的组</td>
</tr>
<tr>
<td>run_time</td>
<td>float</td>
<td>动画持续时间</td>
</tr>
<tr>
<td>rate_func</td>
<td>func</td>
<td>基于相对运行时间定义动画进度的函数</td>
</tr>
<tr>
<td>lag_ratio</td>
<td>float</td>
<td>定义动画应用于子对象的延迟</td>
</tr>
</tbody>
</table>
<p>参数<code>lag_ratio</code>默认为<code>0</code>，表示所有动画同时播放。</p>
<p>若<code>lag_ratio=0.5</code>，表示下一个动画将在前一个动画播放到 50% 时开始。</p>
<h2 id="12-laggedstart">1.2. LaggedStart</h2>
<p>当需要按顺序播放多个动画，但希望它们之间有一定的延迟时，<code>LaggedStart</code>是一个很好的选择。</p>
<p>例如，依次显示一系列的文本内容或逐个移动多个对象。</p>
<p><code>LaggedStart</code>用于创建具有节奏感的动画序列，使观众能够清晰地看到每个动画的发生过程。</p>
<p>动画会按照它们被添加的顺序依次启动，每个动画之间有一定的延迟。</p>
<p>它的参数主要有：</p>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>animations</td>
<td>[Animation]</td>
<td>要播放的动画对象序列</td>
</tr>
<tr>
<td>lag_ratio</td>
<td>float</td>
<td>定义动画应用于子对象的延迟</td>
</tr>
<tr>
<td>run_time</td>
<td>float</td>
<td>动画的持续时间</td>
</tr>
</tbody>
</table>
<h2 id="13-laggedstartmap">1.3. LaggedStartMap</h2>
<p>当需要对一组对象应用相同的动画，但希望它们之间有一定的延迟时，<code>LaggedStartMap</code>非常实用。</p>
<p>例如，逐个显示一组文本对象或逐个移动一组图形。</p>
<p><code>LaggedStartMap</code>适用于处理大量相似对象的动画，通过简洁的方式实现逐个动画的延迟效果。</p>
<p>它的参数主要有：</p>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>AnimationClass</td>
<td>func</td>
<td>要应用于mobject的动画类</td>
</tr>
<tr>
<td>mobject</td>
<td>Mobject</td>
<td>动画要应用到的Mobject</td>
</tr>
<tr>
<td>arg_creator</td>
<td>func</td>
<td>要应用于Mobject的函数</td>
</tr>
<tr>
<td>run_time</td>
<td>float</td>
<td>动画的持续时间</td>
</tr>
<tr>
<td>lag_ratio</td>
<td>float</td>
<td>定义动画应用于子对象的延迟</td>
</tr>
</tbody>
</table>
<h2 id="14-succession">1.4. Succession</h2>
<p>当需要按顺序依次播放多个动画，且每个动画必须在前一个动画完成后才能开始时，<code>Succession</code>是首选。</p>
<p>例如，先移动一个对象，然后再对其进行旋转或缩放等操作。</p>
<p><code>Succession</code>用于创建复杂的动画流程，确保动画按照特定的顺序执行，动画会按照它们被添加的顺序依次播放，前一个动画完成后，下一个动画才会开始。</p>
<p>它的参数主要有：</p>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>animations</td>
<td>[Animation]</td>
<td>要播放的动画对象序列</td>
</tr>
<tr>
<td>lag_ratio</td>
<td>float</td>
<td>定义动画应用于子对象的延迟</td>
</tr>
<tr>
<td>run_time</td>
<td>float</td>
<td>动画的持续时间</td>
</tr>
</tbody>
</table>
<h1 id="2-使用示例">2. 使用示例</h1>
<p>下面通过一些示例演示这4个动画组合类的使用。</p>
<h2 id="21-同时移动和变色多个图形">2.1. 同时移动和变色多个图形</h2>
<p>此示例中，展示了<code>AnimationGroup</code>并行处理多个动画的能力。</p>
<p>示例中同时启动圆形的移动动画和正方形的变色动画，让多个对象的不同动画效果同时呈现，且所有动画在同一时刻开始和结束。</p>
<pre><code class="language-python"># 创建一个圆形和一个正方形
c = Circle().shift(LEFT * 2)
s = Square().shift(RIGHT * 2)

# 定义圆形的移动动画和正方形的变色动画
anim_circle = c.animate.shift(RIGHT * 4)
anim_square = s.animate.set_color(RED)

# 使用AnimationGroup同时播放这两个动画
self.play(AnimationGroup(anim_circle, anim_square))
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202501/83005-20250107143120262-1420434422.gif" alt="" loading="lazy"></p>
<h2 id="22-逐个显示文本内容">2.2. 逐个显示文本内容</h2>
<p>在这个示例中，<code>LaggedStart</code>的特点是按照添加动画的顺序依次启动，每个动画之间根据<code>lag_ratio</code>（这里设置为 <code>0.3</code>）产生延迟。</p>
<p>动画中可以清晰地看到每个文本依次淡入，营造出一种有序的节奏感，适合用于展示一系列相关元素的逐个出现效果。</p>
<pre><code class="language-python"># 创建三个文本对象
text1 = Text("死去元知万事空").shift(UP * 2)
text2 = Text("但悲不见九州同").next_to(
    text1, DOWN, buff=0.5
)
text3 = Text("王师北定中原日").next_to(
    text2, DOWN, buff=0.5
)
text4 = Text("家祭无忘告乃翁").next_to(
    text3, DOWN, buff=0.5
)

# 定义每个文本对象的淡入动画
anim_text1 = FadeIn(text1)
anim_text2 = FadeIn(text2)
anim_text3 = FadeIn(text3)
anim_text4 = FadeIn(text4)

# 使用LaggedStart按顺序逐个启动动画，每个动画之间有一定延迟
self.play(
    LaggedStart(
        anim_text1,
        anim_text2,
        anim_text3,
        anim_text4,
        lag_ratio=0.3,
    ),
    run_time=3,
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202501/83005-20250107143120250-1673644995.gif" alt="" loading="lazy"></p>
<h2 id="23-逐个移动一组点并变色">2.3. 逐个移动一组点并变色</h2>
<p>此例中，<code>LaggedStartMap</code>的优势在于可以方便地对一组对象应用相同的动画操作，并且通过<code>lag_ratio</code>（设置为 <code>0.2</code>）实现逐个对象动画的延迟效果。</p>
<p>这使得一组点能够逐个向下移动并变色，展示了批量处理相似对象动画且控制延迟的能力，适用于处理多个相同类型元素的动画序列。</p>
<pre><code class="language-python"># 创建一组点
dots = VGroup(*[Dot() for _ in range(5)]).arrange_in_grid(
    rows=1, cols=5, buff=1
)
dots.shift(UP)

# 定义一个动画函数，用于移动点并变色
def move_and_color_dot(dot):
    return dot.animate.shift(DOWN * 2).set_color(YELLOW)

# 使用LaggedStartMap对每个点应用动画函数，逐个启动动画且有延迟
self.play(LaggedStartMap(move_and_color_dot, dots, lag_ratio=0.2))
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202501/83005-20250107143120091-687004082.gif" alt="" loading="lazy"></p>
<h2 id="24-先旋转后移动图形">2.4. 先旋转后移动图形</h2>
<p>在该示例中，Succession严格按照顺序依次执行动画。</p>
<p>先旋转五角星图形，然后向上下左右四个方向分别射出不同颜色的点。</p>
<pre><code class="language-python"># 创建一个三角形
star = Star()
dot1 = Dot(color=RED)
dot2 = Dot(color=GREEN)
dot3 = Dot(color=YELLOW)
dot4 = Dot(color=PURPLE)
self.add(star, dot1, dot2, dot3, dot4)

# 定义三角形的移动、旋转和缩放动画
rotate_star = Rotate(star, angle=PI * 2)
send_dot1 = dot1.animate.shift(UP * 2)
send_dot2 = dot2.animate.shift(RIGHT * 2)
send_dot3 = dot3.animate.shift(DOWN * 2)
send_dot4 = dot4.animate.shift(LEFT * 2)

# 使用Succession按顺序依次播放动画，前一个动画完成后下一个才开始
self.play(
    Succession(
        rotate_star,
        send_dot1,
        send_dot2,
        send_dot3,
        send_dot4,
    ),
    run_time=3,
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202501/83005-20250107143120171-264265697.gif" alt="" loading="lazy"></p>
<h1 id="3-附件">3. 附件</h1>
<p>文中的代码只是关键部分的截取，完整的代码共享在网盘中（<code>anim_group.py</code>），</p>
<p>下载地址: <a href="https://url11.ctfile.com/d/45455611-64223578-4fb7ee?p=6872" target="_blank" rel="noopener nofollow">完整代码</a> (访问密码: 6872)</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.2465757991712963" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-07 14:32">2025-01-07 14:32</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18657572" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18657572);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18657572', targetLink: 'https://www.cnblogs.com/wang_yb/p/18657572', title: 'manim边做边学--动画组合' })">举报</a>
</div>
        