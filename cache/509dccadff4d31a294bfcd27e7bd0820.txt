
        <div class="postTitle">
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/hudean/p/18685670" title="发布于 2025-01-22 13:56">
    <span role="heading" aria-level="2">.NET9 AOT部署</span>
    

</a>

        </div>
        <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="概念">概念</h1>
<p>AOT是Ahead-of-Time的缩写，AOT是将C#程序提前编译为机器代码（通常为平台特定的二进制文件），在应用程序启动之前完成编译过程。</p>
<blockquote>
<p>微软官方文档是这样说的</p>
</blockquote>
<pre><code>将应用程序发布为本机 AOT 会生成一个自包含的应用程序，并且已提前 （AOT） 编译为本机代码。原生 AOT 应用程序具有更快的启动时间和更小的内存占用。这些应用可以在未安装 .NET 运行时的计算机上运行。

原生 AOT 的优势对于具有大量已部署实例的工作负载（例如云基础设施和超大规模服务）最为明显。.NET 8 添加了对本机 AOT 的 ASP.NET Core 支持。

本机 AOT 部署模型使用预先编译器在发布时将 IL 编译为本机代码。本机 AOT 应用程序在应用程序运行时不使用实时 （JIT） 编译器。本机 AOT 应用程序可以在不允许 JIT 的受限环境中运行。本机 AOT 应用程序以特定的运行时环境为目标，例如 Linux x64 或 Windows x64，就像发布自包含应用程序一样。
</code></pre>
<h2 id="c-aot部署和jit部署两种不同的编译和部署方式对比">C# AOT部署和JIT部署两种不同的编译和部署方式对比</h2>
<h3 id="aotahead-of-time部署">AOT（Ahead-of-Time）部署：</h3>
<p>AOT是将C#程序提前编译为机器代码（通常为平台特定的二进制文件），在应用程序启动之前完成编译过程。</p>
<h4 id="优点">优点：</h4>
<ol>
<li><strong>启动速度快</strong>：由于已经提前编译成机器代码，应用程序可以直接执行，减少了启动时的编译延迟。</li>
<li><strong>内存占用低</strong>：不需要在运行时为JIT编译分配额外内存，避免了JIT编译过程中可能的内存开销。</li>
<li><strong>跨平台支持</strong>：AOT编译后，可以生成特定平台的本地代码，能够更好地支持跨平台部署。</li>
<li><strong>安全性</strong>：由于所有的代码已经提前编译为机器代码，JIT编译的潜在安全风险（如代码注入等）较少。</li>
<li><strong>性能稳定</strong>：AOT编译会优化代码，尤其适用于性能要求严格的场景，能够提供更稳定的执行性能。</li>
</ol>
<h4 id="缺点">缺点：</h4>
<ol>
<li><strong>编译时间长</strong>：AOT需要在部署前进行编译，可能导致部署的时间较长。</li>
<li><strong>平台依赖</strong>：AOT编译会生成特定平台的机器码，因此跨平台部署需要针对每个平台生成不同版本的代码。</li>
<li><strong>灵活性较低</strong>：JIT可以根据运行时的环境和数据进行动态优化，而AOT在编译时就决定了优化策略，缺乏运行时调整的灵活性。</li>
</ol>
<h3 id="jitjust-in-time部署">JIT（Just-in-Time）部署：</h3>
<p>JIT是在应用程序运行时将中间语言（IL）编译为机器代码，编译过程是动态发生的。</p>
<h4 id="优点-1">优点：</h4>
<ol>
<li><strong>快速开发</strong>：JIT编译能够即时将中间语言编译为本地代码，因此可以更灵活地进行开发和调试。</li>
<li><strong>跨平台支持</strong>：通过运行时环境（如.NET Core或Mono），JIT可以支持多平台的代码编译，而不需要为每个平台单独编译。</li>
<li><strong>运行时优化</strong>：JIT可以根据应用程序的运行环境和具体数据动态生成优化的机器代码，可能会实现更高的性能，尤其是在具有不同负载的应用场景下。</li>
<li><strong>更高的灵活性</strong>：JIT可以在运行时处理平台和硬件特性，为应用程序生成最合适的代码。</li>
</ol>
<h4 id="缺点-1">缺点：</h4>
<ol>
<li><strong>启动时间慢</strong>：JIT编译需要在运行时将代码编译为机器代码，因此启动速度较慢，特别是在初次运行时。</li>
<li><strong>额外内存开销</strong>：JIT编译需要在内存中保存编译生成的机器代码，这可能导致内存占用较高。</li>
<li><strong>性能波动</strong>：由于JIT编译是在运行时进行的，可能导致执行过程中存在性能波动，尤其是在复杂的代码路径上。</li>
</ol>
<h3 id="总结">总结：</h3>
<ul>
<li><strong>AOT部署</strong>适用于需要快速启动、内存占用较低、性能要求稳定的场景，例如嵌入式设备或资源受限的应用。它的主要缺点是编译时间较长以及缺乏运行时优化的灵活性。</li>
<li><strong>JIT部署</strong>适用于需要较高灵活性、支持多平台和快速开发的场景，它能动态优化性能，但启动时间较长，并可能带来额外的内存开销。</li>
</ul>
<p>选择AOT还是JIT部署，需要根据具体的应用场景、性能需求、开发周期和平台要求来权衡。</p>
<h1 id="实操">实操</h1>
<blockquote>
<p>创建一个解决方案，创建两个控制台项目，一个启用AOT，一个不启用</p>
</blockquote>
<blockquote>
<p>未启用AOT的csproj文件内容</p>
</blockquote>
<pre><code>&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
    &lt;Nullable&gt;enable&lt;/Nullable&gt;
  &lt;/PropertyGroup&gt;

&lt;/Project&gt;
</code></pre>
<blockquote>
<p>启用AOT的csproj文件内容</p>
</blockquote>
<pre><code>&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;
    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;
    &lt;Nullable&gt;enable&lt;/Nullable&gt;
    &lt;PublishAot&gt;true&lt;/PublishAot&gt;
    &lt;InvariantGlobalization&gt;true&lt;/InvariantGlobalization&gt;
  &lt;/PropertyGroup&gt;

&lt;/Project&gt;
</code></pre>
<blockquote>
<p>通过对比可以发现就这个配置 <code>&lt;PublishAot&gt;true&lt;/PublishAot&gt;</code>启用AOT</p>
</blockquote>
<p>参考官方文档:</p>
<p><a href="https://learn.microsoft.com/zh-cn/dotnet/core/deploying/native-aot/?tabs=windows%2Cnet8" target="_blank" rel="noopener nofollow">https://learn.microsoft.com/zh-cn/dotnet/core/deploying/native-aot/?tabs=windows%2Cnet8</a></p>
<blockquote>
<p>AOT部署一般要在csproj增加如下配置</p>
</blockquote>
<pre><code> &lt;PublishAot&gt;true&lt;/PublishAot&gt;
 &lt;IsAotCompatible&gt;true&lt;/IsAotCompatible&gt;
 &lt;StripSymbols&gt;false&lt;/StripSymbols&gt;
 &lt;PlatformTarget&gt;x64&lt;/PlatformTarget&gt;
</code></pre>
<ul>
<li><code>&lt;PublishAot&gt;true&lt;/PublishAot&gt;</code> 此属性在发布期间启用本机 AOT 编译</li>
<li><code>&lt;IsAotCompatible&gt;true&lt;/IsAotCompatible&gt;</code>  该属性用于指示库是否与本机 AOT 兼容</li>
<li><code>&lt;StripSymbols&gt;false&lt;/StripSymbols&gt;</code>  调试文件对于在调试器下运行应用程序或检查故障转储是必需的。在类 Unix 平台上，将该属性设置为在本机二进制文件中包含调试信息。包含调试信息会使本机二进制文件更大</li>
<li><code>&lt;PlatformTarget&gt;x64&lt;/PlatformTarget&gt;</code>  目标平台内容是AnyCPU、x86、x64、ARM32、ARM64，一般选择x64/AnyCPU即可，其它平台看场景</li>
</ul>
<h2 id="发布到win系统的aot">发布到Win系统的AOT</h2>
<p>发布命令参考：</p>
<p><a href="https://learn.microsoft.com/zh-cn/dotnet/core/deploying/ready-to-run" target="_blank" rel="noopener nofollow">https://learn.microsoft.com/zh-cn/dotnet/core/deploying/ready-to-run</a></p>
<p><a href="https://learn.microsoft.com/zh-cn/dotnet/core/tools/dotnet-publish" target="_blank" rel="noopener nofollow">https://learn.microsoft.com/zh-cn/dotnet/core/tools/dotnet-publish</a></p>
<h3 id="1直接使用vs进行发布">1.直接使用VS进行发布</h3>
<p><img src="https://img2024.cnblogs.com/blog/1714824/202501/1714824-20250122135420533-300464995.png" alt="image" loading="lazy"></p>
<h3 id="2使用dotnet命令">2.使用dotnet命令</h3>
<blockquote>
<p>使用cmd进入到在csproj文件夹目录，执行dotnet命令</p>
</blockquote>
<blockquote>
<p><code>dotnet publish -c Release -r win-x64 -p:PublishReadyToRun=true</code></p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1714824/202501/1714824-20250122135404552-467987895.png" alt="image" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1714824/202501/1714824-20250122135350736-349649862.png" alt="image" loading="lazy"></p>
<h2 id="发布到liunx系统的aot">发布到Liunx系统的AOT</h2>
<blockquote>
<p>如果直接在VS 2022上发布到Liunx的AOT部署会报下面错误<br>
<span style="display: block; text-align: left; color: rgba(255, 69, 0, 1)">Cross-OS native compilation is not supported.</span></p>
</blockquote>
<h3 id="1在-os-linux-ubuntu-2204-上安装-net-sdk-或-net-运行时">1、在 os-linux-ubuntu-2204 上安装 .NET SDK 或 .NET 运行时</h3>
<h4 id="使用包管理器安装">使用包管理器安装</h4>
<p>参考文档：</p>
<p><a href="https://learn.microsoft.com/zh-cn/dotnet/core/install/linux-ubuntu-install?tabs=dotnet9&amp;pivots=os-linux-ubuntu-2204" target="_blank" rel="noopener nofollow">https://learn.microsoft.com/zh-cn/dotnet/core/install/linux-ubuntu-install?tabs=dotnet9&amp;pivots=os-linux-ubuntu-2204</a></p>
<blockquote>
<p>添加存储库</p>
</blockquote>
<pre><code class="language-Bash">sudo add-apt-repository ppa:dotnet/backports
</code></pre>
<blockquote>
<p>安装SDK</p>
</blockquote>
<pre><code class="language-Bash">sudo apt-get update &amp;&amp; \
  sudo apt-get install -y dotnet-sdk-9.0
</code></pre>
<blockquote>
<p>安装运行时</p>
</blockquote>
<pre><code class="language-Bash">#ASP.NET Core 运行时
sudo apt-get update &amp;&amp; \
  sudo apt-get install -y aspnetcore-runtime-9.0
</code></pre>
<pre><code class="language-Bash">#.NET 运行时
sudo apt-get install -y dotnet-runtime-9.0
</code></pre>
<h4 id="使用脚本安装">使用脚本安装</h4>
<p>参考文档<br>
<a href="https://learn.microsoft.com/zh-cn/dotnet/core/install/linux-scripted-manual#scripted-install" target="_blank" rel="noopener nofollow">https://learn.microsoft.com/zh-cn/dotnet/core/install/linux-scripted-manual#scripted-install</a></p>
<pre><code class="language-Bash"># 通过 wget 下载脚本
wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh
</code></pre>
<pre><code class="language-Bash">#可执行文件运行的权限
chmod +x ./dotnet-install.sh
</code></pre>
<blockquote>
<p>此脚本默认安装最新的长期支持 (LTS) SDK 版本，即 .NET 8。 若要安装最新版本（可能不是 (LTS) 版本），请使用 --version latest 参数。</p>
</blockquote>
<pre><code class="language-Bash">./dotnet-install.sh --version latest
# 若要安装 .NET 运行时而非 SDK，请使用 --runtime 参数。
./dotnet-install.sh --version latest --runtime aspnetcore
# 可以通过 --channel 参数更改特定主要版本来指示特定版本。 以下命令安装 .NET 9.0 SDK。
./dotnet-install.sh --channel 9.0
</code></pre>
<h4 id="手动安装">手动安装</h4>
<p>参考文档：<br>
<a href="https://blog.csdn.net/qq_36437991/article/details/120389823" target="_blank" rel="noopener nofollow">https://blog.csdn.net/qq_36437991/article/details/120389823</a></p>
<p>下载SDK/runtime地址：<a href="https://dotnet.microsoft.com/zh-cn/download/dotnet/9.0" target="_blank" rel="noopener nofollow">https://dotnet.microsoft.com/zh-cn/download/dotnet/9.0</a></p>
<p>这里下载的是<a href="https://dotnet.microsoft.com/zh-cn/download/dotnet/thank-you/sdk-9.0.102-linux-x64-binaries" target="_blank" rel="noopener nofollow">dotnet-sdk-9.0.102-linux-x64.tar.gz</a></p>
<pre><code class="language-Bash"># 创建文件夹
sudo mkdir -p /usr/dotnet/9.0.102
# 解压文件
sudo tar xzf dotnet-sdk-9.0.102-linux-x64.tar.gz -C /usr/dotnet/9.0.102/
# 使用vim修改/etc/profile文件/或者使用SSH更改文件
sudo vim /etc/profile

# 在/etc/profile文件下增加下面内容
export DOTNET_HOME=/usr/dotnet/9.0.102
export PATH=${DOTNET_HOME}:$PATH
# 重新加载系统级别的环境配置文件
source /etc/profile
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1714824/202501/1714824-20250122135324456-1107180526.png" alt="image" loading="lazy"></p>
<h4 id="2检查安装net的版本">2、检查安装.NET的版本</h4>
<p>参考文档：<br>
<a href="https://learn.microsoft.com/zh-cn/dotnet/core/install/how-to-detect-installed-versions?pivots=os-linux" target="_blank" rel="noopener nofollow">https://learn.microsoft.com/zh-cn/dotnet/core/install/how-to-detect-installed-versions?pivots=os-linux</a></p>
<pre><code class="language-Bash"># 查看版本
dotnet --version
# 检查 SDK 版本
dotnet --list-sdks
# 检查运行时版本
dotnet --list-runtimes

</code></pre>
<h4 id="3-安装c编译工具">3、 安装C++编译工具</h4>
<p>参考文档：</p>
<p><a href="https://blog.darkthread.net/blog/publish-native-aot-on-linux/" target="_blank" rel="noopener nofollow">https://blog.darkthread.net/blog/publish-native-aot-on-linux/</a><br>
<a href="https://learn.microsoft.com/zh-cn/dotnet/core/deploying/native-aot/?tabs=linux-ubuntu%2Cnet9plus" target="_blank" rel="noopener nofollow">https://learn.microsoft.com/zh-cn/dotnet/core/deploying/native-aot/?tabs=linux-ubuntu%2Cnet9plus</a></p>
<pre><code class="language-Bash">sudo apt-get install clang zlib1g-dev
</code></pre>
<h4 id="4把解决方案代码上传到linux系统某个文件夹上并转到要发布的项目csproj文件所在目录上">4、把解决方案代码上传到Linux系统某个文件夹上并转到要发布的项目csproj文件所在目录上</h4>
<h4 id="5执行dotnet命令发布">5、执行dotnet命令发布</h4>
<pre><code class="language-Bash">dotnet publish -c Release -r linux-x64 --self-contained /p:PublishAot=true
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1714824/202501/1714824-20250122135235313-1534533472.png" alt="image" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1714824/202501/1714824-20250123104008747-1508633088.png" alt="image" loading="lazy"></p>

</div>
<div class="clear"></div>

        <div class="postDesc">posted on 
<span id="post-date" data-last-update-days="1.1591755770104166" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-23 10:40">2025-01-22 13:56</span>&nbsp;
<a href="https://www.cnblogs.com/hudean">青春似雨后霓虹</a>&nbsp;
阅读(<span id="post_view_count">828</span>)&nbsp;
评论(<span id="post_comment_count">4</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18685670" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18685670);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18685670', targetLink: 'https://www.cnblogs.com/hudean/p/18685670', title: '.NET9 AOT部署' })">举报</a>
</div>
    