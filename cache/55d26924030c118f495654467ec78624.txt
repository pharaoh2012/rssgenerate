
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/noear/p/18845987" title="发布于 2025-04-25 09:45">
    <span role="heading" aria-level="2">Java AI（智能体）编排开发就用 Solon Flow</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        Solon Flow 是一个通用流编排引擎。可用于计算（或任务）的编排场景； 可用于业务规则和决策处理型的编排场景； 可用于办公审批型（有状态、可中断，人员参与）的编排场景； 可用于长时间流程（结合自动前进，等待介入）的编排场景。同时支持：java8，java11，java17，java21，java24。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>本例参考 dify 的 chatFlow 的效果，模拟实现视频内容：</p>
<ul>
<li><a href="https://www.toutiao.com/video/7455114080131482152/" target="_blank" rel="noopener nofollow">https://www.toutiao.com/video/7455114080131482152/</a></li>
</ul>
<p>Solon Flow 是一个通用流编排引擎。可用于计算（或任务）的编排场景； 可用于业务规则和决策处理型的编排场景； 可用于办公审批型（有状态、可中断，人员参与）的编排场景； 可用于长时间流程（结合自动前进，等待介入）的编排场景。同时支持：java8，java11，java17，java21，java24。</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.noear&lt;/groupId&gt;
    &lt;artifactId&gt;solon-flow&lt;/artifactId&gt;
    &lt;version&gt;最新版本&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>主要特点有：</p>
<ul>
<li>使用 yaml 格式做编排</li>
<li>表达式与脚本自由</li>
<li>元信息配置，为扩展提供了无限空间（每个流程，相当于自带了元数据库）</li>
<li>事件广播与回调支持</li>
<li>支持“无状态”、“有状态”两种需求分类</li>
<li>驱动定制（是像 JDBC 有 MySql, PostgreSQL，还可能有 Elasticsearch）</li>
</ul>
<p>下面提供两种处编排风格以可供参考</p>
<h3 id="1使用-元信息--任务组件-风格-更利于可视界面配置">1、使用 “元信息” + 任务组件“ 风格 （更利于可视界面配置）</h3>
<pre><code class="language-yaml">id: demo1
layout:
  - title: "开始"
    type: start
  - title: "文件提取"
    meta.input: "file" # 可视界面的配置（通过元信息表示）
    meta.output: "fileTxt"
    task: @FileLoaderCom
  - title: "LLM"
    meta.model: "Qwen/Qwen2.5-72B-Instruct" # 可视界面的配置（通过元信息表示）
    meta.input: "fileTxt"
    meta.messages:
      - role: system
        content: "#角色\n你是一个数据专家，删除数据的格式整理和转换\n\n#上下文\n${fileTxt}\n\n#任务\n提取csv格式的字符串"
    task: @ChatModelCom
  - title: "参数提取器"
    meta.model: "Qwen/Qwen2.5-72B-Instruct" # 可视界面的配置（通过元信息表示）
    meta.output: "csvData"
    task: @ParamExtractionCom
  - title: "执行代码"
    meta.input: "csvData"
    task: |
      import com.demo.DataUtils;
      
      String json = DataUtils.csvToJson(node.meta().get("meta.input"));  //转为 json 数据
      String echatCode = DataUtils.jsonAsEchatCode(json); //转为 echat 图表代码
      context.result = echatCode; //做为结果返回
  - title: "结束"
    type: end
</code></pre>
<p>这种风格，更适合可视界面的编译。设计是，可以预选设计好很多组件，经过管理配置后，可提供界面选择。</p>
<pre><code class="language-java">@Component("FileLoaderCom")
public class FileLoaderCom implements TaskComponent {
    @Override
    public void run(FlowContext context, Node node) throws Throwable {
        ...
    }
}

@Component("ChatModelCom")
public class ChatModelCom implements TaskComponent {
    @Override
    public void run(FlowContext context, Node node) throws Throwable {
        ...
    }
}

@Component("ParamExtractionCom")
public class ParamExtractionCom implements TaskComponent {
    @Override
    public void run(FlowContext context, Node node) throws Throwable {
        ...
    }
}

@Controller
public class DemoController {
    @Mapping("demo")
    public Object input(UploadedFile attachment, String message) throws Throwable {
        FlowEngine flowEngine = FlowEngine.newInstance();
        flowEngine.load("classpath:flow/demo1.chain.yml");

        FlowContext ctx  = new FlowContext();
        ctx.put("file", attachment);

        flowEngine.eval("demo1");

        return context.result;
    }
}
</code></pre>
<h3 id="2比较原始的风格能表达内在的大概过程">2、比较原始的风格（能表达内在的大概过程）：</h3>
<pre><code class="language-yaml">id: demo1
layout:
  - title: "开始"
    type: start
  - title: "文件提取"
    meta.input: "file" # 可视界面的配置（通过元信息表示）
    meta.output: "fileTxt"
    task: |
      import org.noear.solon.ai.loader.*;
      
      var loader = FileLoader.of(file);
      var fileTxt = loader.load();
      context.put(node.meta().get("meta.output"), fileTxt); //推入上下文（后续节点可用）
  - title: "LLM"
    meta.model: "Qwen/Qwen2.5-72B-Instruct" # 可视界面的配置（通过元信息表示）
    meta.input: "fileTxt"
    meta.messages:
      - role: system
        content: "#角色\n你是一个数据专家，删除数据的格式整理和转换\n\n#上下文\n${fileTxt}\n\n#任务\n提取csv格式的字符串"
    task: |
      import com.demo.ModelUtils; //根据业务封装，可快速获取配置的模型
      import com.demo.MessageUtils; //根据业务封装，可快速构建消息
             
      var chatModel = ModelUtils.get(node.meta().get("model"));
      var chatMessages = MessageUtils.get(node.meta().get("messages"), context);
      var resp = chatModel.prompt(chatMessages).call();
      context.put("resp", resp);
  - title: "参数提取器"
    meta.model: "Qwen/Qwen2.5-72B-Instruct" # 可视界面的配置（通过元信息表示）
    meta.output: "csvData"
    task: |
      context.put(node.meta().get("meta.output"), resp.getMessage().getContent());
  - title: "执行代码"
    meta.input: "csvData"
    task: |
      import com.demo.DataUtils;
      
      String json = DataUtils.csvToJson(node.meta().get("meta.input"));  //转为 json 数据
      String echatCode = DataUtils.jsonAsEchatCode(json); //转为 echat 图表代码
      context.result = echatCode; //做为结果返回
  - title: "结束"
    type: end
</code></pre>
<p>这个风格比较原始，不过不需要 java 组件参与。可以像低代码一样（或可执行程序一样），直接运行配置文件。</p>
<pre><code class="language-java">@Controller
public class DemoController {
    @Mapping("demo")
    public Object input(UploadedFile attachment, String message) throws Throwable {
        FlowEngine flowEngine = FlowEngine.newInstance();
        flowEngine.load("classpath:flow/demo1.chain.yml");

        FlowContext ctx  = new FlowContext();
        ctx.put("file", attachment);

        flowEngine.eval("demo1");

        return context.result;
    }
}
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.05541579817592593" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-25 09:45">2025-04-25 09:45</span>&nbsp;
<a href="https://www.cnblogs.com/noear">带刺的坐椅</a>&nbsp;
阅读(<span id="post_view_count">35</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18845987);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18845987', targetLink: 'https://www.cnblogs.com/noear/p/18845987', title: 'Java AI（智能体）编排开发就用 Solon Flow' })">举报</a>
</div>
        