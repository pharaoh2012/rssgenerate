
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/guoxiaoyu/p/18657750" title="发布于 2025-01-09 09:25">
    <span role="heading" aria-level="2">深入解析 Spring AI 系列：剖析OpenAI接口接入组件</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>今天我们将继续探讨如何在Spring AI中接入大语言模型，以OpenAI为例，详细分析其接入过程。我们将逐步探讨OpenAI是如何与Spring AI系统对接的，具体包括如何配置接口、如何封装接口参数以及如何定义相关的接口。在讲解过程中，我们仍然会以整体架构为主线，逐步深入，详细了解类内部的实现细节和定义。这种渐进式的分析方式有助于更清晰地理解每个模块的功能和它们是如何协同工作的。</p>
<h1 id="整体结构">整体结构</h1>
<p>在这里，我简单地绘制了一张示意图，旨在帮助你更直观、快速地理解整个系统是如何运作的。通过这张图，你可以清晰地看到各个组件之间的关系，以及数据如何在各个模块中流动和交互。如图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202501/1423484-20250107153409934-391090949.png" alt="image" loading="lazy"></p>
<p>接下来，我们将查看它的整体目录文件内容，具体内容如图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202501/1423484-20250107153413924-1235993285.png" alt="image" loading="lazy"></p>
<p>刚才提到的所有目录结构实际上并没有包含具体的业务实现，所有的实现都集中在外层的定义部分。举个例子，我们要了解的核心业务是聊天功能，而这一功能的具体实现则是在 <code>OpenAIChatModel</code> 类中。因此，关于聊天实现的细节我们会稍后深入探讨。</p>
<p>至于其他的细节问题，我们稍后也会一一解析。如果对前面提到的 AOT 协议不太熟悉，可以参考我之前的文章，我已专门对该协议做了详细的讲解。这里不做主要说明了。</p>
<h1 id="聊天对接">聊天对接</h1>
<p>我们目前主要关注的是聊天接口是如何接入的，至于其他功能，如音频或图像处理，我们可以在后续的讨论中再进行详细探讨。不过，为了更好地理解整个系统，我们需要找到一个合适的切入点，从而逐步通过查看各个类的引用关系，深入了解整个架构的运作方式。</p>
<p>在我们以往构建 Agent 的过程中，第一步通常是注入一个 <code>chatClient</code> 类，这个类实际上就是我们最初使用的核心起点。因此，接下来我们就从 <code>chatClient</code> 这个类开始，深入分析其实现细节和作用。</p>
<h2 id="chatclient">ChatClient</h2>
<p>这个部分是由 Spring AI 封装好的，目的是为了能够在进行底层大模型切换时，确保代码能够做到无感知地平滑过渡，依然能够正常调用。为了快速了解 Spring AI 如何实现这个链路的传递，我们可以简要地浏览一下非常简单的用法：</p>
<pre><code class="language-java">@GetMapping("/ai-Entity")
ActorFilms generationByEntity() {
    ActorFilms actorFilms = chatClient.prompt()
            .user("Generate the filmography for a random actor.")
            .call()
            .entity(ActorFilms.class);//只接收string的话，正常写成content()即可
    return actorFilms;
}
</code></pre>
<p>这里的写法实际上说明，无论底层所采用的具体大模型是什么类型，若希望能够顺利将其集成到系统中，必须首先进行与ChatClient的适配。如果没有经过这一层适配，系统将无法正确地处理和调用底层模型。因此，接下来我们将直接分析其如何将请求切换至OpenAiChatModel，并实现通过API进行通信的过程。具体实现方式可以参考下方示意图：</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202501/1423484-20250107153422253-1003146753.png" alt="image" loading="lazy"></p>
<p>关于<code>AdvisedResponse</code>，我们之前已经详细讲解过其定义和作用，因此在此不再赘述。需要强调的是，所有集成到系统中的<code>ChatModel</code>都必须实现一个名为<code>call</code>的方法，stream一样。如图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202501/1423484-20250107153426242-78494696.png" alt="image" loading="lazy"></p>
<h2 id="openaichatmodel">OpenAiChatModel</h2>
<p>虽然这个类包含了众多方法，但从实际应用的角度来看，我们主要关注的实际上只有两个核心方法。第一个是用于生成文本回复的方法，第二个则是支持流式回复的处理方法。其他方法大多数都是私有的辅助性方法，主要作用是为了将主方法的实现进行拆分和优化，从而避免将主方法代码写得过于复杂和臃肿。如图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202501/1423484-20250107153431282-832006699.png" alt="image" loading="lazy"></p>
<p>这几个方法内的代码也基本是固定的写法，具体业务逻辑，我们下一章节再讲。</p>
<h2 id="openaichatoptions">OpenAiChatOptions</h2>
<p>这个类的设计十分直观，理解起来并没有太多复杂的内容。其核心功能主要集中在一些常见的大模型参数配置上，比如选择具体的模型类型、调整生成结果的<code>temperature</code>等。这些配置项是大多数大模型在实际应用中都需要进行设置的参数，对于那些有过大模型使用经验的人来说，应该会非常熟悉这些概念。如图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202501/1423484-20250107153436050-1368583407.png" alt="image" loading="lazy"></p>
<p>由于OpenAI提供的功能极为丰富，其系统中涉及到的参数种类也相应很多。</p>
<h1 id="总结">总结</h1>
<p>通过今天的分析，我们对如何在Spring AI框架中接入OpenAI的大语言模型有了更清晰的了解。从配置接口到封装参数，再到定义相关接口，我们逐步剖析了整个接入过程。通过对<code>ChatClient</code>、<code>OpenAiChatModel</code>和<code>OpenAiChatOptions</code>等核心类的简单解析，我们不仅看到了大语言模型如何与Spring AI系统高效协同工作，也对其背后的设计理念有了更深刻的认识。值得一提的是，我们采取的渐进式分析方法，让每个模块的功能和其相互关系更加明了，帮助我们更好地把握整体架构。</p>
<hr>
<p>我是努力的小雨，一个正经的 Java 东北服务端开发，整天琢磨着 AI 技术这块儿的奥秘。特爱跟人交流技术，喜欢把自己的心得和大家分享。还当上了腾讯云创作之星，阿里云专家博主，华为云云享专家，掘金优秀作者。各种征文、开源比赛的牌子也拿了。</p>
<p>💡 想把我在技术路上走过的弯路和经验全都分享出来，给你们的学习和成长带来点启发，帮一把。</p>
<p>🌟 欢迎关注努力的小雨，咱一块儿进步！🌟</p>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.39147051147337963" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-09 09:25">2025-01-09 09:25</span>&nbsp;
<a href="https://www.cnblogs.com/guoxiaoyu">努力的小雨</a>&nbsp;
阅读(<span id="post_view_count">9</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18657750" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18657750);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18657750', targetLink: 'https://www.cnblogs.com/guoxiaoyu/p/18657750', title: '深入解析 Spring AI 系列：剖析OpenAI接口接入组件' })">举报</a>
</div>
	