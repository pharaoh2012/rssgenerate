
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/linx/p/18843987" title="发布于 2025-04-24 09:21">
    <span role="heading" aria-level="2">Web前端入门第 41 问：神奇的 transform 改变元素形状，matrix3d 矩阵变换算法演示</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>CSS <code>transform</code> 属性中文翻译过来是 <code>变换</code>，始终觉得翻译差那么一点意思。它可以用来改变元素形状，比如旋转、缩放、移动、倾斜等，就是它可以把元素各种拿捏~</p>
<p>transform 特性是在不改变自身尺寸的情况下，对元素进行各种变形，元素自身的文档流位置还是会保留，语言有些空洞，下面看例子。</p>
<h2 id="笛卡尔坐标">笛卡尔坐标</h2>
<p>学习变换之前，先了解一下笛卡尔坐标系，：</p>
<blockquote>
<p>在笛卡尔坐标系中，每个 <code>欧氏空间</code> 里的点都由横坐标和纵坐标这两个值来确定。在 CSS（和大部分的计算机图形学）中，原点 (0, 0) 在元素的左上角。每个点都使用数学上的向量符号 (x,y) 来描述。</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250424091739801-1935063350.png" alt="" loading="lazy"><br>
-- 摘自 MDN</p>
</blockquote>
<p>意思就是 CSS 的坐标系都是从元素左上角开始的，与数学的坐标系稍有不同，Y 轴的箭头是相反的！！</p>
<h2 id="transform-的属性值">transform 的属性值</h2>
<p>截至到文章编写时，CSS3 transform 属性值有如下 21 种：</p>
<p><code>translate()</code> 设置 2D 位移。<br>
<code>translate3d()</code> 设置 3D 位移。<br>
<code>translateX()</code> 设置 X 轴位移。<br>
<code>translateY()</code> 设置 Y 轴位移。<br>
<code>translateZ()</code> 设置 Z 轴位移。</p>
<p><code>skew()</code>  设置 2D 倾斜。<br>
<code>skewX()</code>  设置水平方向倾斜。<br>
<code>skewY()</code>  设置垂直方向倾斜。</p>
<p><code>scale()</code>  设置 2D 缩放。<br>
<code>scale3d()</code> 设置 3D 缩放。<br>
<code>scaleX()</code>  设置 3D X 轴缩放。<br>
<code>scaleY()</code>  设置 3D Y 轴缩放。<br>
<code>scaleZ()</code>  设置 3D Z 轴缩放。</p>
<p><code>rotate()</code> 设置 2D 旋转角度。<br>
<code>rotate3d()</code> 设置 3D 旋转角度。<br>
<code>rotateX()</code> 设置 3D X 轴旋转角度。<br>
<code>rotateY()</code> 设置 3D Y 轴旋转角度。<br>
<code>rotateZ()</code> 设置 3D Z 轴旋转角度。</p>
<p><code>perspective()</code> 设置 3D 透视，值越大会感觉越远。</p>
<hr>
<p><code>matrix()</code> 2D 矩阵变换。<br>
<code>matrix3d()</code> 3D 矩阵变换，最底层的矩阵操作方法。</p>
<p><strong>transform 的所有属性值都不会改变元素的自身的文档流位置！</strong></p>
<p>意思就是给元素施加的 transform 仅仅是元素形态上的变化，而不会改变元素自身的位置和大小！！！</p>
<h3 id="3d-立方体">3D 立方体</h3>
<p>为了看出每种变换的效果，先用 CSS 绘制一个立方体。代码如下：</p>
<p>里面也用到了 transform 属性，可以先不管代码意思，只需要知道我们的目的就是绘制一个立方体出来就行。</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;section class="cube"&gt;
    &lt;div class="face"&gt;1&lt;/div&gt;
    &lt;div class="face"&gt;2&lt;/div&gt;
    &lt;div class="face"&gt;3&lt;/div&gt;
    &lt;div class="face"&gt;4&lt;/div&gt;
    &lt;div class="face"&gt;5&lt;/div&gt;
    &lt;div class="face"&gt;6&lt;/div&gt;
  &lt;/section&gt;
&lt;/div&gt;
&lt;style&gt;
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    padding: 20px;
    width: 100px;
    perspective: 800px; /* 透视点距离 */
  }
  .cube {
    width: 100px;
    height: 100px;
    transform-style: preserve-3d; /* 子元素位于 3D 空间中 */
    position: relative;
  }
  .face {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    position: absolute;
    backface-visibility: visible;
    font-size: 60px;
    color: #fff;
  }
  .face:nth-of-type(1) {
    background: rgba(90, 90, 90, 0.6);
    transform: translateZ(50px);
  }
  .face:nth-of-type(2) {
    background: rgba(0, 161, 210, 0.6);
    transform: rotateY(180deg) translateZ(50px);
  }
  .face:nth-of-type(3) {
    background: rgba(210, 207, 0, 0.6);
    transform: rotateY(90deg) translateZ(50px);
  }
  .face:nth-of-type(4) {
    background: rgba(116, 0, 210, 0.6);
    transform: rotateY(-90deg) translateZ(50px);
  }
  .face:nth-of-type(5) {
    background: rgba(210, 95, 0, 0.6);
    transform: rotateX(90deg) translateZ(50px);
  }
  .face:nth-of-type(6) {
    background: rgba(210, 0, 70, 0.6);
    transform: rotateX(-90deg) translateZ(50px);
  }
&lt;/style&gt;
</code></pre>
<p>呈现效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250424091802854-1086020956.png" alt="" loading="lazy"></p>
<h3 id="translate-位移">translate 位移</h3>
<p><code>translate</code> 位移变换，使用 <code>长度单位</code> 设置移动距离。虽然名称叫位移，但元素的自身占用的位置还是存在的，变换后的位置也不会占用文档流。</p>
<p>语法：</p>
<pre><code class="language-css">transform: translate(tx, ty); /* 设置 2D 位移 */
transform: translate3d(tx, ty, tz); /* 设置 3D 位移 */
transform: translateX(tx); /* 设置 X 轴位移 */
transform: translateY(ty); /* 设置 Y 轴位移 */
transform: translateZ(tz); /* 设置 Z 轴位移 */
</code></pre>
<p>使用方式：</p>
<p>注意了本示例给一个盒子添加了多个 transform，仅为了演示使用方式，实际开发中只会生效一个 transform 属性：</p>
<pre><code class="language-css">.box {
  transform: translate(20px, 20px);
  transform: translate3d(20px, -20px, 200px);
  transform: translateX(20px);
  transform: translateY(20px);
  transform: translateZ(200px);
}
</code></pre>
<p>呈现效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250424091815253-1616154237.png" alt="" loading="lazy"></p>
<p>CSS 的 3D 坐标系 Z 轴都是垂直于屏幕，所以 X 轴上的位移，会呈现近大远小的效果。</p>
<h3 id="skew-倾斜">skew 倾斜</h3>
<p><code>skew</code> 可以让元素扭成一个平行四边形一样，使用 <code>角度值</code> 设置倾斜角度。</p>
<p>语法：</p>
<pre><code class="language-css">transform: skew(ax, ay); /* 设置 2D 倾斜*/
transform: skewX(ax); /* 设置水平方向倾斜*/
transform: skewY(ay); /* 设置垂直方向倾斜*/
</code></pre>
<p>使用方式：</p>
<pre><code class="language-css">.box {
  transform: skew(20deg, -20deg);
  transform: skewX(20deg);
  transform: skewY(-20deg);
  transform: skew(20deg);
}
</code></pre>
<p>呈现效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250424091820749-1674125809.png" alt="" loading="lazy"></p>
<h3 id="scale-缩放">scale 缩放</h3>
<p>元素的默认缩放倍率是 1，就是不进行任何缩放，小于 1 表所缩小倍数，大于 1 表示放大倍数，使用 <code>倍率值</code> 设置缩放倍率。</p>
<p>语法：</p>
<pre><code class="language-css">transform: scale(sx, sy);  /* 设置 2D 缩放 */
transform: scale3d(sx, sy, sz);  /* 设置 3D 缩放 */
transform: scaleX(sx);  /* 设置 3D X 轴缩放 */
transform: scaleY(sy);  /* 设置 3D Y 轴缩放 */
transform: scaleZ(sz);  /* 设置 3D Z 轴缩放 */
</code></pre>
<p>使用方式：</p>
<pre><code class="language-css">.box {
  transform: scale(1.1, 1.1);
  transform: scale3d(1.2, 1.2, 1.2);
  transform: scaleX(0.8);
  transform: scaleY(0.8);
  transform: scaleZ(2);
}
</code></pre>
<p>呈现效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250424091825248-660362130.png" alt="" loading="lazy"></p>
<h3 id="rotate-旋转">rotate 旋转</h3>
<p><code>rotate</code> 可以让元素旋转起来，使用 <code>角度值</code> 设置旋转角度，角度单位支持：</p>
<ul>
<li><code>deg</code> 度数</li>
<li><code>rad</code> 弧度</li>
<li><code>grad</code> 梯度</li>
<li><code>turn</code> 圈数</li>
</ul>
<p>一般就 deg 和 turn 比较常用。</p>
<p>语法：</p>
<pre><code class="language-css">transform: rotate(a);  /* 设置 2D 旋转角度 */
transform: rotate3d(x, y, z, a);  /* 设置 3D 旋转角度 */
transform: rotateX(a);  /* 设置 3D X 轴旋转角度 */
transform: rotateY(a);  /* 设置 3D Y 轴旋转角度 */
transform: rotateZ(a);  /* 设置 3D Z 轴旋转角度 */
</code></pre>
<p>使用方式：</p>
<pre><code class="language-css">.box {
  transform: rotate(45deg);
  transform: rotate3d(1, 1, 1, -45deg);
  transform: rotateX(0.15turn);
  transform: rotateY(0.5rad);
  transform: rotateZ(28grad);
}
</code></pre>
<p>呈现效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250424091831314-121607479.png" alt="" loading="lazy"></p>
<h3 id="perspective-透视距离">perspective 透视距离</h3>
<p><code>perspective</code> 设置 Z 轴的坐标原点（0）离观察者的距离，值越大会感觉越远，使用 <code>距离单位</code>。设置为 0 表示 Z 轴贴在了屏幕上，看起来就像无限大一样！！</p>
<p>语法：</p>
<pre><code class="language-css">transform: perspective(d);  /* 设置 3D 透视，值越大会感觉越远 */
</code></pre>
<p>使用方式：</p>
<pre><code class="language-css">.box {
  transform: perspective(0);
  transform: perspective(1000px);
  transform: perspective(300px);
  transform: perspective(143rem);
  transform: perspective(6.5cm);
}
</code></pre>
<p>呈现效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250424091837238-533504985.png" alt="" loading="lazy"></p>
<h2 id="matrix-矩阵变换">matrix 矩阵变换</h2>
<p>矩阵变换是底层实现，旋转、缩放、移动、倾斜这些效果都是上层封装后的语法糖。</p>
<p>矩阵变换语法：</p>
<pre><code class="language-css">transform: matrix(a, b, c, d, tx, ty);  /* 2D 矩阵变换*/
transform: matrix3d(  /* 3D 矩阵变换，最底层的矩阵操作方法 */
  a1, b1, c1, d1, /* X轴的缩放和倾斜 */
  a2, b2, c2, d2, /* Y轴的缩放和倾斜 */
  a3, b3, c3, d3, /* Z轴的缩放和倾斜 */
  a4, b4, c4, d4  /* X、Y、Z轴位移，d4 常量是 1*/
);

/*
matrix(a, b, c, d, tx, ty)
是
matrix3d(
  a, b, 0, 0,
  c, d, 0, 0,
  0, 0, 1, 0,
  tx, ty, 0, 1
)
的简写。
*/
</code></pre>
<h3 id="2d-矩阵变换">2D 矩阵变换</h3>
<p>矩阵算法梦回大学，具体原理就不详解了，有兴趣可以看看<code>线性代数</code>相关书籍，具体算法：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250424091843974-944306481.png" alt="" loading="lazy"></p>
<p>至于后面的 <code>0 0 1</code> 是什么，这个又跟 <code>齐次坐标系</code> 拉上关系了，有兴趣可参阅维基百科：<a href="https://zh.wikipedia.org/wiki/%E9%BD%90%E6%AC%A1%E5%9D%90%E6%A0%87" target="_blank" rel="noopener nofollow">https://zh.wikipedia.org/wiki/齐次坐标</a></p>
<p>其中的 x,y 表示的元素中的每个像素点的 x,y 坐标，计算的结果则是变化后的 x,y 坐标。</p>
<p>使用方式：</p>
<pre><code class="language-css">.box {
  transform: matrix(1.2, 0, 0, 1.2, 0, 0);
  /* 与 transform: scaleX(1.2) scaleY(1.2); 相同 */
  
  transform: matrix(1, 0, 0.176327, 1, 0, 0);
  /* 与 transform: skewX(10deg); 相同 */
  
  transform: matrix(0.866025, 0.500000, -0.500000, 0.866025, 0, 0);
  /* 与 transform: rotate(30deg); 相同 */
  
  transform: matrix(1, 0, 0, 1, 10, 10);
  /* 与 transform: translateX(10px) translateY(10px); 相同 */
  
}
</code></pre>
<p>呈现效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250424091849705-1816213064.png" alt="" loading="lazy"></p>
<p>语法糖的换算规则：</p>
<table>
<thead>
<tr>
<th>变换类型</th>
<th>变换方法</th>
<th>matrix 写法</th>
</tr>
</thead>
<tbody>
<tr>
<td>平移</td>
<td>translate(translateX, translateY)</td>
<td>matrix(1, 0, 0, 1, translateX, translateY)</td>
</tr>
<tr>
<td>缩放</td>
<td>scale(scaleX, scaleY)</td>
<td>matrix(scaleX, 0, 0, scaleY, 0, 0)</td>
</tr>
<tr>
<td>斜拉</td>
<td>skew(angleX, angleY)</td>
<td>matrix(1, tan(angleY), tan(angleX), 1, 0, 0)</td>
</tr>
<tr>
<td>旋转</td>
<td>rotate(angle)</td>
<td>matrix(cos(angle), sin(angle), -sin(angle), cos(angle), 0, 0)</td>
</tr>
</tbody>
</table>
<h3 id="3d-矩阵变换">3D 矩阵变换</h3>
<p>2D 变换是 <code>3*3</code> 的矩阵，3D 则是 <code>4*4</code> 的矩阵，3D 比 2D 多出一个维度的空间，算法复杂度可不是 1+1 那么简单了。</p>
<p>3D 矩阵变换算法：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250424091854554-209175030.png" alt="" loading="lazy"></p>
<p>最终三维空间坐标：<code>(x'/w', y'/w', z'/w')</code>。</p>
<p><strong>3D 平移使用矩阵表示方法：</strong></p>
<pre><code class="language-css">transform: matrix3d(
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  translateX, translateY, translateZ, 1
);
</code></pre>
<p><strong>3D 缩放使用矩阵表示方法：</strong></p>
<pre><code class="language-css">transform: matrix3d(
  scaleX, 0, 0, 0,
  0, scaleY, 0, 0,
  0, 0, scaleZ, 0,
  0, 0, 0, 1
);
</code></pre>
<p><strong>3D 倾斜使用矩阵表示方法：</strong></p>
<pre><code class="language-css">transform: matrix3d(
  1, tan(θ_yx), tan(θ_zx), 0,
  tan(θ_xy), 1, tan(θ_zy), 0,
  tan(θ_xz), tan(θ_yz), 1, 0,
  0, 0, 0, 1
);
</code></pre>
<p>每个 <code>tanθ</code> 对应不同平面的倾斜角度。</p>
<p><strong>旋转使用矩阵表示方法：</strong></p>
<pre><code class="language-css">/* 绕 Z 轴旋转( */
transform: matrix3d(
  cos(angle), sin(angle), 0, 0,
  −sin(angle), cos(angle), 0, 0,
  0, 0, 1, -1/d,
  0, 0, 0, 1
);
/* 绕 X 轴旋转( */
transform: matrix3d(
  1, 0, 0, 0,
  0, cos(angle), sin(angle), 0,
  0, −sin(angle), cos(angle), 0,
  0, 0, 0, 1
);
/* 绕 Y 轴旋转( */
transform: matrix3d(
  cos(angle), 0, −sin(angle), 0,
  0, 1, 0, 0,
  sin(angle), 0, cos(angle), 0,
  0, 0, 0, 1
);
</code></pre>
<p><strong>透视使用矩阵表示方法：</strong></p>
<pre><code class="language-css">transform: matrix3d(
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, -1/d,
  0, 0, 0, 1
);
</code></pre>
<p>呈现效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250424091902569-54296440.png" alt="" loading="lazy"></p>
<h2 id="与-transform-相关的属性">与 transform 相关的属性</h2>
<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
<th>典型值</th>
</tr>
</thead>
<tbody>
<tr>
<td>transform</td>
<td>应用变换</td>
<td>rotate(45deg) translateX(20px)</td>
</tr>
<tr>
<td>transform-origin</td>
<td>设置变换原点</td>
<td>left top, 50% 100%</td>
</tr>
<tr>
<td>transform-style</td>
<td>保留子元素 3D 空间</td>
<td>preserve-3d</td>
</tr>
<tr>
<td>perspective</td>
<td>定义 3D 观察深度</td>
<td>1000px</td>
</tr>
<tr>
<td>perspective-origin</td>
<td>设置观察者视角位置</td>
<td>20% 80%</td>
</tr>
<tr>
<td>backface-visibility</td>
<td>控制背面可见性</td>
<td>hidden</td>
</tr>
</tbody>
</table>
<p>这些属性用于设置与 transform 相关的效果，比如设置变换原点，是否应用 3D 空间，设置透视视角等，这里就不再一一演示，有兴趣可自行写一下例子看看效果。</p>
<h2 id="总结">总结</h2>
<p>transform 提供的基础变换已足以满足日常需求，一些特殊的变化有可能会用上矩阵，不过这么多年的前端经验来看，能用上矩阵的场景几乎不可见。</p>
<p>由于 transform 不改变文档流的特性，所以在 CSS 动画中，此属性应用非常广泛。</p>
<p>参考资料<br>
<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function/matrix" target="_blank" rel="noopener nofollow">https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function/matrix</a><br>
<a href="https://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-%e7%9f%a9%e9%98%b5/" target="_blank" rel="noopener nofollow">https://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-矩阵/</a><br>
<a href="https://www.cnblogs.com/cjc-0313/p/16472278.html" target="_blank">https://www.cnblogs.com/cjc-0313/p/16472278.html</a></p>

</div>
<div id="MySignature" role="contentinfo">
    <p>&nbsp;</p>
<p style="font-size: 18px;font-weight: bold;"><span style="color:rgb(255, 71, 87)">文章正在持续更新中...</span>，首发微信公众号【<span style="color:rgb(255, 71, 87)">前端路引</span>】，欢迎关注公众号获取最新文章。</p>
<p>
  <img style="max-width: 320px;" src="https://images.cnblogs.com/cnblogs_com/linx/2447020/o_250228035031_%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png">
</p>
<p>本文来自博客园，作者：<a href="https://www.cnblogs.com/linx/" target="_blank">前端路引</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/linx/p/18843987" target="_blank">https://www.cnblogs.com/linx/p/18843987</a></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.07157956722453704" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-24 09:22">2025-04-24 09:21</span>&nbsp;
<a href="https://www.cnblogs.com/linx">前端路引</a>&nbsp;
Views(<span id="post_view_count">13</span>)&nbsp;
Comments(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18843987);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18843987', targetLink: 'https://www.cnblogs.com/linx/p/18843987', title: 'Web前端入门第 41 问：神奇的 transform 改变元素形状，matrix3d 矩阵变换算法演示' })">举报</a>
</div>
	