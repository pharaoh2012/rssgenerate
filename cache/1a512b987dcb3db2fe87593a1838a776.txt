
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xiaohuzaixue/p/18686977" title="发布于 2025-01-25 22:19">
    <span role="heading" aria-level="2">Huawei LiteOS基于Cortex-M4 GD32F4平台移植</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="1huawei-liteos简介">1、Huawei LiteOS简介</h1>
<ul>
<li>
<p>Huawei LiteOS源码获取：<br>
<a href="https://github.com/LiteOS/LiteOS%EF%BC%8C" target="_blank" rel="noopener nofollow">https://github.com/LiteOS/LiteOS，</a><br>
<a href="https://gitee.com/LiteOS/LiteOS" target="_blank" rel="noopener nofollow">https://gitee.com/LiteOS/LiteOS</a><br>
Huawei LiteOS遵循BSD-3开源许可协议。</p>
</li>
<li>
<p>Huawei LiteOS发布于2015年5月的华为网络大会上，Huawei LiteOS内核是华为面向IoT领域，构建的轻量级物联网操作系统，可广泛应用于智能家居、个人穿戴、车联网、城市公共服务、制造业等领域（涵盖抄表、停车、路灯、环保、共享单车、物流等）。<br>
Huawei LiteOS开源项目目前支持 ARM64、ARM Cortex-A、ARM Cortex-M0，Cortex-M3，Cortex-M4，Cortex-M7 等芯片架构。</p>
</li>
<li>
<p>Huawei LiteOS内核集成了任务管理、内存管理、时间管理、通信机制、中断管理、队列管理、事件管理以及定时器等操作系统基础组件，具备高实时性、高稳定性及超小内核等特点。其基础内核体积可裁剪至不到10K，满足低功耗需求，并支持功能静态裁剪，灵活适应不同应用场景。</p>
</li>
<li>
<p>优势<br>
高实时性，高稳定性。<br>
超小内核，基础内核体积可以裁剪至不到10K。<br>
低功耗，配套芯片整体功耗低至uA级。<br>
支持功能静态裁剪。</p>
</li>
</ul>
<p>另外LiteOS不支持KEIL MDK开发工具，主要原因是LiteOS有一套完整的开发工具链，包括GCC编译器和GDB调试器。</p>
<h1 id="2huawei-liteos内核介绍">2、Huawei LiteOS内核介绍</h1>
<h2 id="21内核架构">2.1内核架构</h2>
<p><img src="https://img2024.cnblogs.com/blog/2776504/202501/2776504-20250125205216618-1121411497.png" alt="" loading="lazy"></p>
<h2 id="22源码目录结构">2.2源码目录结构</h2>
<table>
<thead>
<tr>
<th>一级目录</th>
<th>二级目录</th>
<th>三级目录</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>arch</td>
<td>arm</td>
<td>cortex_a_r</td>
<td>A核架构支持</td>
</tr>
<tr>
<td>cortex_m</td>
<td>M核架构支持</td>
<td></td>
<td></td>
</tr>
<tr>
<td>arm64</td>
<td></td>
<td>arm64架构支持</td>
<td></td>
</tr>
<tr>
<td>csky</td>
<td>cskyv2</td>
<td>cskyv2架构支持</td>
<td></td>
</tr>
<tr>
<td>riscv</td>
<td>rvm32</td>
<td>riscv架构支持</td>
<td></td>
</tr>
<tr>
<td>build</td>
<td></td>
<td></td>
<td>LiteOS编译系统需要的配置及脚本</td>
</tr>
<tr>
<td>compat</td>
<td>cmsis</td>
<td></td>
<td>liteos提供的CMSIS-RTOS 1.0和2.0接口</td>
</tr>
<tr>
<td>components</td>
<td>ai</td>
<td></td>
<td>ai(基于mindspore)算子库实现</td>
</tr>
<tr>
<td>connectivity</td>
<td>agent_tiny</td>
<td>agent_tiny端云互通组件，包括公共头文件、示例代码、客户端实现代码、操作系统适配层代码</td>
<td></td>
</tr>
<tr>
<td>lwm2m</td>
<td>lwm2m协议实现</td>
<td></td>
<td></td>
</tr>
<tr>
<td>mqtt</td>
<td>MQTT开源协议实现</td>
<td></td>
<td></td>
</tr>
<tr>
<td>nb_iot</td>
<td>LiteOS NB-IoT API</td>
<td></td>
<td></td>
</tr>
<tr>
<td>fs</td>
<td>devfs</td>
<td>devfs文件系统</td>
<td></td>
</tr>
<tr>
<td>fatfs</td>
<td>fatfs文件系统</td>
<td></td>
<td></td>
</tr>
<tr>
<td>kifs</td>
<td>kifs文件系统</td>
<td></td>
<td></td>
</tr>
<tr>
<td>littlefs</td>
<td>littlefs文件系统</td>
<td></td>
<td></td>
</tr>
<tr>
<td>ramfs</td>
<td>ramfs文件系统</td>
<td></td>
<td></td>
</tr>
<tr>
<td>spiffs</td>
<td>spiffs文件系统</td>
<td></td>
<td></td>
</tr>
<tr>
<td>vfs</td>
<td>虚拟文件系统</td>
<td></td>
<td></td>
</tr>
<tr>
<td>gui</td>
<td></td>
<td>开源LittlevGL图形库</td>
<td></td>
</tr>
<tr>
<td>language</td>
<td></td>
<td>语言相关组件，含lua</td>
<td></td>
</tr>
<tr>
<td>lib</td>
<td>cjson</td>
<td>c语言json库</td>
<td></td>
</tr>
<tr>
<td>log</td>
<td></td>
<td>日志等级控制</td>
<td></td>
</tr>
<tr>
<td>media</td>
<td></td>
<td>媒体相关组件，含libpng、openexif、opus、upup、</td>
<td></td>
</tr>
<tr>
<td>net</td>
<td>at_device</td>
<td>AT设备适配层</td>
<td></td>
</tr>
<tr>
<td>at_frame</td>
<td>LiteOS AT框架API</td>
<td></td>
<td></td>
</tr>
<tr>
<td>ifconfig</td>
<td>ifconfig shell命令实现</td>
<td></td>
<td></td>
</tr>
<tr>
<td>los_iperf</td>
<td>网络带宽测试工具</td>
<td></td>
<td></td>
</tr>
<tr>
<td>lwip/lwip_port</td>
<td>lwip驱动及OS适配代码</td>
<td></td>
<td></td>
</tr>
<tr>
<td>lwip/lwip-2.1.2</td>
<td>lwip协议实现</td>
<td></td>
<td></td>
</tr>
<tr>
<td>lwip/ppp_port</td>
<td>lwip协议ppp端口支持</td>
<td></td>
<td></td>
</tr>
<tr>
<td>pcap</td>
<td>网络抓包工具</td>
<td></td>
<td></td>
</tr>
<tr>
<td>ping</td>
<td>ping shell命令实现</td>
<td></td>
<td></td>
</tr>
<tr>
<td>sal</td>
<td>socket通讯支持</td>
<td></td>
<td></td>
</tr>
<tr>
<td>tftp_server</td>
<td>tftp服务</td>
<td></td>
<td></td>
</tr>
<tr>
<td>ota</td>
<td></td>
<td>固件升级代码</td>
<td></td>
</tr>
<tr>
<td>security</td>
<td>mbedtls/mbedtls_port</td>
<td>mbed TLS的OS适配代码</td>
<td></td>
</tr>
<tr>
<td>mbedtls/mbedtl-2.16.8</td>
<td>mbed TLS协议实现</td>
<td></td>
<td></td>
</tr>
<tr>
<td>openssl</td>
<td>openssl协议</td>
<td></td>
<td></td>
</tr>
<tr>
<td>sensorhub</td>
<td>include</td>
<td>sensor manager头文件</td>
<td></td>
</tr>
<tr>
<td>src</td>
<td>sensor manager的源码实现</td>
<td></td>
<td></td>
</tr>
<tr>
<td>utility</td>
<td></td>
<td>解析工具，含bidireference、curl、fastlz、freetype、harfbuzz、iconv、iniparser、json-c、jsoncpp、libxml2、sqlite、thttpd、tinyxml2</td>
<td></td>
</tr>
<tr>
<td>demos</td>
<td>agenttiny_lwm2m</td>
<td></td>
<td>lwm2m协议 demo</td>
</tr>
<tr>
<td>agenttiny_mqtt</td>
<td></td>
<td>mqtt 协议demo</td>
<td></td>
</tr>
<tr>
<td>ai</td>
<td></td>
<td>ai的demo</td>
<td></td>
</tr>
<tr>
<td>dtls_server</td>
<td></td>
<td>dtls协议demo</td>
<td></td>
</tr>
<tr>
<td>fs</td>
<td></td>
<td>文件系统demo</td>
<td></td>
</tr>
<tr>
<td>gui</td>
<td></td>
<td>gui的demo</td>
<td></td>
</tr>
<tr>
<td>ipv6_client</td>
<td></td>
<td>Ipv6协议demo</td>
<td></td>
</tr>
<tr>
<td>kernel</td>
<td>api</td>
<td>供开发者测试LiteOS内核的demo示例代码</td>
<td></td>
</tr>
<tr>
<td>include</td>
<td>API功能头文件存放目录</td>
<td></td>
<td></td>
</tr>
<tr>
<td>language</td>
<td></td>
<td>语言相关组件的demo</td>
<td></td>
</tr>
<tr>
<td>lms</td>
<td></td>
<td>LMS的demo</td>
<td></td>
</tr>
<tr>
<td>media</td>
<td></td>
<td>媒体相关组件的demo</td>
<td></td>
</tr>
<tr>
<td>nbiot_without_atiny</td>
<td></td>
<td>NB-IoT demo</td>
<td></td>
</tr>
<tr>
<td>sensorhub</td>
<td>gyro</td>
<td>基于sensorhub传感框架定时读取MPU6050陀螺仪原始数据的demo</td>
<td></td>
</tr>
<tr>
<td>trace</td>
<td></td>
<td>Trace的demo</td>
<td></td>
</tr>
<tr>
<td>utility</td>
<td></td>
<td>解析工具的demo</td>
<td></td>
</tr>
<tr>
<td>doc</td>
<td></td>
<td></td>
<td>此目录存放的是LiteOS的使用文档和API说明等文档</td>
</tr>
<tr>
<td>driver</td>
<td>base</td>
<td></td>
<td>LiteOS驱动框架</td>
</tr>
<tr>
<td>interrupt</td>
<td></td>
<td>LiteOS系统中断接口</td>
<td></td>
</tr>
<tr>
<td>timer</td>
<td></td>
<td>LiteOS系统定时器接口</td>
<td></td>
</tr>
<tr>
<td>uart</td>
<td></td>
<td>LiteOS系统串口接口</td>
<td></td>
</tr>
<tr>
<td>include</td>
<td></td>
<td></td>
<td>components各个模块所依赖的头文件</td>
</tr>
<tr>
<td>kernel</td>
<td>base</td>
<td></td>
<td>LiteOS基础内核代码，包括任务、中断、软件定时器、队列、事件、信号量、互斥锁、tick等功能</td>
</tr>
<tr>
<td>debug</td>
<td>LiteOS内核调测代码，包括队列、信号量、互斥锁及任务调度的调测</td>
<td></td>
<td></td>
</tr>
<tr>
<td>include</td>
<td>LiteOS基础内核内部使用的头文件</td>
<td></td>
<td></td>
</tr>
<tr>
<td>mem</td>
<td>LiteOS中的内存管理相关代码</td>
<td></td>
<td></td>
</tr>
<tr>
<td>sched</td>
<td>任务调度支持，包括对多核的调度支持</td>
<td></td>
<td></td>
</tr>
<tr>
<td>shellcmd</td>
<td>LiteOS中与基础内核相关的shell命令，包括memcheck、task、systeminfo、swtmr等</td>
<td></td>
<td></td>
</tr>
<tr>
<td>extended</td>
<td>cppsupport</td>
<td>C++兼容适配层底层接口</td>
<td></td>
</tr>
<tr>
<td>cpup</td>
<td>CPU占用率统计接口</td>
<td></td>
<td></td>
</tr>
<tr>
<td>include</td>
<td>extended目录所需的头文件</td>
<td></td>
<td></td>
</tr>
<tr>
<td>lms</td>
<td>LMS（实时检测内存操作合法性算法）的库文件</td>
<td></td>
<td></td>
</tr>
<tr>
<td>lowpower</td>
<td>低功耗框架相关代码</td>
<td></td>
<td></td>
</tr>
<tr>
<td>trace</td>
<td>trace事件跟踪，用于实时记录系统运行轨迹</td>
<td></td>
<td></td>
</tr>
<tr>
<td>include</td>
<td></td>
<td>LiteOS开源内核头文件</td>
<td></td>
</tr>
<tr>
<td>init</td>
<td></td>
<td>LiteOS内核初始化相关代码</td>
<td></td>
</tr>
<tr>
<td>lib</td>
<td>huawei_libc</td>
<td></td>
<td>LiteOS自研libc库和适配的posix接口</td>
</tr>
<tr>
<td>libc</td>
<td></td>
<td>LiteOS适配的musl libc库</td>
<td></td>
</tr>
<tr>
<td>libsec</td>
<td></td>
<td>华为安全函数库</td>
<td></td>
</tr>
<tr>
<td>zlib</td>
<td></td>
<td>开源zlib库</td>
<td></td>
</tr>
<tr>
<td>osdepends</td>
<td>liteos</td>
<td></td>
<td>LiteOS提供的部分OS适配接口</td>
</tr>
<tr>
<td>shell</td>
<td></td>
<td>src</td>
<td>实现shell命令的代码，支持基本调试功能</td>
</tr>
<tr>
<td>include</td>
<td>shell头文件</td>
<td></td>
<td></td>
</tr>
<tr>
<td>targets</td>
<td></td>
<td></td>
<td>通用板级支持包、开发板的开发工程源码包</td>
</tr>
<tr>
<td>tools</td>
<td>build</td>
<td></td>
<td>LiteOS支持的开发板编译配置文件</td>
</tr>
<tr>
<td>menuconfig</td>
<td></td>
<td>LiteOS编译所需的menuconfig脚本</td>
<td></td>
</tr>
<tr>
<td>Makefile</td>
<td></td>
<td></td>
<td>LiteOS Makefile</td>
</tr>
<tr>
<td>.config</td>
<td></td>
<td></td>
<td>开发板的配置文件，如果用户不重新选择开发板，默认为野火挑战者STM32F429开发板的配置文件</td>
</tr>
</tbody>
</table>
<h2 id="23内核启动流程">2.3内核启动流程</h2>
<p><img src="https://img2024.cnblogs.com/blog/2776504/202501/2776504-20250123004547258-1741306508.png" alt="" loading="lazy"></p>
<h1 id="3liteos在keil-mdk上移植">3、LiteOS在keil MDK上移植</h1>
<h4 id="1准备liteos源码一个gd32f4xx裸机工程">1、准备LiteOS源码、一个GD32F4xx裸机工程。</h4>
<p>版本不同略有差别，组件功能可自行移植。</p>
<p><img src="https://img2024.cnblogs.com/blog/2776504/202501/2776504-20250125213239203-678832942.png" alt="" loading="lazy"></p>
<h4 id="2建立如下目录">2、建立如下目录：</h4>
<p>工程目录：</p>
<p><img src="https://img2024.cnblogs.com/blog/2776504/202501/2776504-20250125212746703-236515004.png" alt="" loading="lazy"></p>
<p>LiteOS目录：<br>
<img src="https://img2024.cnblogs.com/blog/2776504/202501/2776504-20250125212904522-1724674029.png" alt="" loading="lazy"></p>
<h4 id="3mdk工程构建">3、MDK工程构建</h4>
<h5 id="31在keil的ide环境中分别添加以下4个分组">3.1在Keil的IDE环境中，分别添加以下4个分组：</h5>
<pre><code>LiteOS/kernel
LiteOS/arch
LiteOS/cmsis
LiteOS/config
</code></pre>
<h5 id="32添加源码到工程">3.2添加源码到工程</h5>
<ul>
<li>
<p>到源码LiteOS的targets目录下找到GD32工程参考，拷贝MDK汇编启动文件<code>los_startup_keil.s</code>并添加到工程。</p>
</li>
<li>
<p>添加LiteOS汇编文件<code>..\LiteOS\arch\arm\arm-m\cortex-m4\keil</code>。</p>
</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/2776504/202501/2776504-20250125214611540-1363719193.png" alt="" loading="lazy"></p>
<ul>
<li>添加c文件</li>
</ul>
<pre><code>..\LiteOS\arch\arm\arm-m\src
..\LiteOS\kernel，内核下所有源文件都添加
..\LiteOS\config，targets目录下找到OS_CONFIG目录并拷贝至自定义目录..\LiteOS\config
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2776504/202501/2776504-20250125213823577-479083892.png" alt="" loading="lazy"></p>
<ul>
<li>包含分组中所需头文件</li>
</ul>
<pre><code>..\LiteOS\arch\arm\arm-m\include
..\LiteOS\arch\arm\common\cmsis
..\LiteOS\kernel\include
..\LiteOS\kernel\extended\include
..\LiteOS\kernel\base\include
..\LiteOS\cmsis\1.0
..\LiteOS\cmsis\2.0
..\LiteOS\cmsis
..\LiteOS\config
</code></pre>
<h1 id="4最后编译测试">4、最后编译测试</h1>
<ul>
<li>勾选Use MicroLIB。</li>
<li>ARM Comoiler默认选择version5。</li>
<li>ScatterFile分散加载文件适配LiteOS使用如下格式：</li>
</ul>
<pre><code>; *************************************************************
; *** Scatter-Loading Description File generated by uVision ***
; *************************************************************

LR_IROM1 0x08000000 0x00300000  {    ; load region size_region
    ER_IROM1 0x08000000 0x00300000  {    ; load address = execution address
        *.o (RESET, +First)
        *(InRoot$$Sections)
        .ANY (+RO)
        * (LOS_HEAP_INFO)
    }
    VECTOR 0x20000000 0x400  {    ; Vector
        * (.data.vector)
    }
    RW_IRAM1 0x20000400 0x0002F800  {    ; RW data
        ;.ANY (+RW +ZI)
        * (.data, .bss)
        * (LOS_HEAP)
    }
    ARM_LIB_STACKHEAP 0x2002FC00 EMPTY 0x400  {    ;LiteOS MSP

    }
}
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2776504/202501/2776504-20250125220608944-1821552935.png" alt="" loading="lazy"></p>
<p>编译烧录任务运行成功并点亮LED。</p>
<p><img src="https://img2024.cnblogs.com/blog/2776504/202501/2776504-20250125221047037-1427390689.png" alt="" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.9196807024826389" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-25 22:19">2025-01-25 22:19</span>&nbsp;
<a href="https://www.cnblogs.com/xiaohuzaixue">EternalH</a>&nbsp;
阅读(<span id="post_view_count">115</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18686977" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18686977);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18686977', targetLink: 'https://www.cnblogs.com/xiaohuzaixue/p/18686977', title: 'Huawei LiteOS基于Cortex-M4 GD32F4平台移植' })">举报</a>
</div>
        