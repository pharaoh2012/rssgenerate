
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/shanyou/p/18822452" title="发布于 2025-04-12 19:08">
    <span role="heading" aria-level="2">使用 StreamJsonRpc 在 ASP.NET Core 中启用 JSON-RPC</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>StreamJsonRpc 是微软开发的一个开源库，用于在 .NET 平台中实现基于 JSON-RPC 2.0 规范 的远程过程调用（RPC）。它通过流（如管道、网络流等）实现高效的跨进程或跨网络通信，特别适用于需要轻量级、灵活通信的场景。以下是对 StreamJsonRpc 的详细介绍，结合你提供的参考文章中的关键点：</p><hr><h2>1. 核心特性</h2><ol><li><strong>基于流的通信</strong> 支持通过 <code>Stream</code>、<code>Pipe</code> 或 <code>IDuplexPipe</code> 进行数据传输，适用于管道、网络套接字、WebSocket 等多种底层传输机制。 </li></ol><ol start="2"><li><strong>双向通信</strong> 允许客户端和服务端互相调用方法，实现双向交互（如客户端发起请求，服务端主动推送通知）。 </li></ol><ol start="3"><li><strong>强类型支持</strong> 通过接口定义契约，方法调用和参数传递均支持强类型，减少手动序列化/反序列化的工作。 </li></ol><ol start="4"><li><strong>异步模型</strong> 所有方法默认支持异步（<code>async/await</code>），适合高并发和低延迟场景。 </li></ol><ol start="5"><li><strong>跨平台兼容</strong> 兼容 .NET Standard 2.0，可在 .NET Core、.NET Framework 和 Xamarin 等环境中使用。</li></ol><ol start="6"><li><strong>扩展性</strong> 提供自定义消息格式化（如 <code>MessagePack</code> 或自定义 JSON 序列化器）、错误处理、日志记录等扩展点。 </li></ol><hr><h2>2. 在 ASP.NET Core 中的集成</h2><p>参考文章展示了如何将 StreamJsonRpc 集成到 ASP.NET Core 应用中，实现基于 HTTP 或 WebSocket 的 RPC 通信。以下是关键步骤：</p><h3>2.1 配置服务端</h3><ol><li><p><strong>添加 NuGet 包</strong></p><pre><code><p>Install-Package StreamJsonRpc</p></code></pre><p>Plain Text</p></li></ol><ol start="2"><li><p><strong>定义 RPC 接口</strong></p><pre><code><p>public interface IGreeterRpcService</p><p>{</p><p>    Task&lt;string&gt; GreetAsync(string name);</p><p>}</p></code></pre><p>Plain Text</p></li></ol><ol start="3"><li><p><strong>实现服务</strong></p><pre><code><p>public class GreeterRpcService : IGreeterRpcService</p><p>{</p><p>    public Task&lt;string&gt; GreetAsync(string name) =&gt; Task.FromResult($"Hello, {name}!");</p><p>}</p></code></pre><p>Plain Text</p></li></ol><ol start="4"><li><p><strong>配置 ASP.NET Core 中间件</strong> 使用 <code>UseWebSockets()</code> 启用 WebSocket 支持，并处理 RPC 请求： </p><pre><code><p>app.UseWebSockets();</p><p>app.Use(async (context, next) =&gt;</p><p>{</p><p>    if (context.WebSockets.IsWebSocketRequest)</p><p>    {</p><p>        using var webSocket = await context.WebSockets.AcceptWebSocketAsync();</p><p>        var service = new GreeterRpcService();</p><p>        await StreamJsonRpc.Attach(webSocket, service);</p><p>    }</p><p>    else await next();</p><p>});</p></code></pre><p>Plain Text</p></li></ol><h3>2.2 客户端实现</h3><p>客户端通过 WebSocket 或其他流连接到服务端，并调用远程方法：</p><pre><code><p>var webSocket = new ClientWebSocket();</p><p>await webSocket.ConnectAsync(new Uri("ws://localhost:5000"), CancellationToken.None);</p><p>
</p><p>var greeter = StreamJsonRpc.JsonRpc.Attach&lt;IGreeterRpcService&gt;(webSocket);</p><p>string result = await greeter.GreetAsync("World");</p><p>Console.WriteLine(result); // 输出 "Hello, World!"</p></code></pre><p><br></p><hr><h2>3. 高级用法</h2><ol><li><p><strong>双向方法调用</strong> 客户端和服务端均可定义接口，实现双向通信。例如，服务端可以主动通知客户端： </p><pre><code><p>// 定义客户端可调用的接口</p><p>public interface IClientCallback</p><p>{</p><p>    Task NotifyAsync(string message);</p><p>}</p><p>
</p><p>// 服务端方法中调用客户端</p><p>public async Task SendNotificationAsync()</p><p>{</p><p>    var callback = JsonRpc.GetRpcTarget&lt;IClientCallback&gt;();</p><p>    await callback.NotifyAsync("New event!");</p><p>}</p></code></pre><p>Plain Text</p></li></ol><ol start="2"><li><p><strong>自定义序列化</strong> 默认使用 <code>System.Text.Json</code>，但可替换为其他序列化器（如 Newtonsoft.Json）： </p><pre><code><p>var options = new JsonRpcOptions</p><p>{</p><p>    MessageFormatter = new SystemTextJsonFormatter()</p><p>};</p><p>StreamJsonRpc.Attach(stream, service, options);</p></code></pre><p>Plain Text</p></li></ol><ol start="3"><li><p><strong>错误处理</strong> 通过 <code>JsonRpcException</code> 捕获远程调用异常，支持自定义错误码和数据： </p><pre><code><p>try</p><p>{</p><p>    await greeter.GreetAsync("error");</p><p>}</p><p>catch (JsonRpcException ex)</p><p>{</p><p>    Console.WriteLine($"Error Code: {ex.ErrorCode}, Message: {ex.Message}");</p><p>}</p></code></pre><p>Plain Text</p></li></ol><ol start="4"><li><strong>性能优化</strong></li></ol><ul><li>使用 <code>MemoryPool</code> 或 <code>BufferManager</code> 减少内存分配。</li></ul><ul><li><p>启用 <code>MessagePack</code> 二进制协议以降低传输开销：</p><pre><code><p>Install-Package StreamJsonRpc.MessagePack</p><p>var formatter = new MessagePackFormatter();</p></code></pre><p>Plain Text</p></li></ul><hr><h2>4. 适用场景</h2><ul><li><strong>微服务间通信</strong>：轻量级替代 gRPC 或 REST。</li><li>AI应用：ModelContextProtocol(MCP)和Agent2Agent(A2A)协议都是使用JSON-RPC 2.0。</li></ul><ul><li><strong>桌面应用插件系统</strong>：主进程与插件进程通信。</li></ul><ul><li><strong>实时应用</strong>：如聊天、实时数据推送（结合 WebSocket）。</li></ul><ul><li><strong>跨语言集成</strong>：通过标准 JSON-RPC 与其他语言（如 Python、JavaScript）交互。</li></ul><hr><h2>5. 注意事项</h2><ul><li><strong>线程安全</strong>：确保服务实现是线程安全的。</li></ul><ul><li><strong>超时控制</strong>：为长时间运行的方法配置 <code>CancellationToken</code>。</li></ul><ul><li><strong>安全</strong>：启用 TLS 加密网络流，验证调用方身份。</li></ul><hr><h2>6. 参考资源</h2><ul><li>官方文档：https://github.com/microsoft/vs-streamjsonrpc </li></ul><ul><li>JSON-RPC 2.0 规范：jsonrpc.org</li></ul><ul><li>示例项目：<a href="https://github.com/tpeczek/Demo.AspNetCore.StreamJsonRpc" rel="noopener nofollow">https://github.com/tpeczek/Demo.AspNetCore.StreamJsonRpc</a></li></ul><p>通过 StreamJsonRpc，开发者可以快速构建高效、灵活的 RPC 系统，尤其适合需要自定义通信协议或与现有基础设施集成的场景。 </p>
</div>
<div id="MySignature" role="contentinfo">
    <p>欢迎大家扫描下面二维码成为我的客户，扶你上云</p>
<img src="https://images.cnblogs.com/cnblogs_com/shanyou/57459/o_220125090408_%E9%82%80%E8%AF%B7%E4%BA%8C%E7%BB%B4%E7%A0%81-258px.jpeg" width="170">
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.2968551900011574" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-12 19:12">2025-04-12 19:08</span>&nbsp;
<a href="https://www.cnblogs.com/shanyou">张善友</a>&nbsp;
阅读(<span id="post_view_count">45</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18822452);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18822452', targetLink: 'https://www.cnblogs.com/shanyou/p/18822452', title: '使用 StreamJsonRpc 在 ASP.NET Core 中启用 JSON-RPC' })">举报</a>
</div>
        