
        <h2>
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Countrymen/p/18900890" title="发布于 2025-05-28 16:42">
    <span role="heading" aria-level="2">基于 SSE、asp.net core razor 实现比分Live</span>
    

</a>

        </h2>
        <div class="postbody">
            <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>最近在项目中用到了 SSE (Server-Sent Events)，用于服务的单向长连接数据推送。因为都是使用 C# 实现的，所以服务端使用的是 HttpListener ,而客户端更简单，只使用了 HttpClient ，连接了之后就一直读流，一旦流读取错误或超时，则尝试重连接。</p>
<p>有感于这种方式简单便捷，便一直一条路走到黑（中间踩了坑），对它进行不断打磨。最后，设计出了一款主打轻量级、兼顾性能、易扩展、开箱即用的纯 C# 实现的 SSE 工具包—— <a href="https://github.com/ZhiYuanHuang/TinyHttpSSE.DotNet" target="_blank" rel="noopener nofollow">TinyHttpSSE.DotNet</a> ，并已经开源。</p>
<h2 id="简介">简介</h2>
<p><a href="https://github.com/ZhiYuanHuang/TinyHttpSSE.DotNet" target="_blank" rel="noopener nofollow">TinyHttpSSE.DotNet</a> 在 github 有着详细的介绍，在此仅介绍 SSE。</p>
<p>Server-Sent Events（SSE）是一种基于 HTTP 协议的服务器推送技术，它允许服务器以流的方式向客户端实时推送数据。意味着支持SSE 的浏览器有着对应的支持——EventSource，所以实现 SSE 的 服务端都能与浏览器无缝衔接。</p>
<p>以下，我将基于 <a href="https://github.com/ZhiYuanHuang/TinyHttpSSE.DotNet" target="_blank" rel="noopener nofollow">TinyHttpSSE.DotNet</a> 和 asp.net core razor 实现一个比分直播的 Demo。</p>
<h2 id="比赛得分live-demo">比赛得分Live Demo</h2>
<ol>
<li>创建项目 asp.net core razor ，添加 nuget 包—— <a href="https://www.nuget.org/packages/TinyHttpSSE.DotNet.Server/" target="_blank" rel="noopener nofollow">TinyHttpSSE.DotNet.Server</a></li>
</ol>
<p><img src="https://img2024.cnblogs.com/blog/981632/202505/981632-20250528163500602-159198642.png" alt="创建 asp.net core razor" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/981632/202505/981632-20250528163523305-770883865.png" alt="添加nuget包" loading="lazy"></p>
<ol start="2">
<li>修改 Program.cs ,设置 HttpSseServer 单例依赖注入，并添加 SseServerHostdService</li>
</ol>
<p>Program.cs:</p>
<pre><code>var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddSingleton((service) =&gt; {
    var config=service.GetService&lt;IConfiguration&gt;();
    //SseServerUrl:http://+:9111/msg/
    return new HttpSseServer(config.GetValue&lt;string&gt;("SseServerUrl"));
});
builder.Services.AddHostedService&lt;SseServerHostdService&gt;();

builder.Services.AddRazorPages();

var app = builder.Build();
</code></pre>
<p>SseServerHostdService.cs:</p>
<pre><code>public class SseServerHostdService : IHostedService
{
    private readonly HttpSseServer _server;
    public SseServerHostdService(HttpSseServer httpSseServer) { 
        _server = httpSseServer;
    }
    public async Task StartAsync(CancellationToken cancellationToken) {
        await Task.Run(() =&gt; {
            bool result= _server.Start();
        });
    }

    public async Task StopAsync(CancellationToken cancellationToken) {
        await _server.Stopping();
    }
}
</code></pre>
<ol start="3">
<li>修改 Index.cshtml ，实现 EventSource，成为比分直播页面</li>
</ol>
<p>Index.cshtml:</p>
<pre><code>@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
@section Scripts{
    &lt;script&gt;
        const eventSource = new EventSource("http://127.0.0.1:9111/msg/");
        eventSource.onmessage = function (event) { 
            if (event.data) {
                //document.getElementById('content').innerHTML += event.data ;
                const status = JSON.parse(event.data);
                document.getElementById('score1').innerHTML = status.score1;
                document.getElementById('score2').innerHTML = status.score2;
                if (status.lastaction) {
                    document.getElementById('content').innerHTML += status.lastaction;
                }
            }
        }
    &lt;/script&gt;
}

&lt;div class="text-center"&gt;
    &lt;h1 class="display-4"&gt;Welcome&lt;/h1&gt;
    &lt;div style="font-size:40px"&gt;
        &lt;p &gt;
            &lt;span id="score1"&gt;0&lt;/span&gt;
            &lt;span&gt;-&lt;/span&gt;
            &lt;span id="score2"&gt;0&lt;/span&gt;
        &lt;/p&gt;
    &lt;/div&gt;
    &lt;div id="content" style="width:800px;height:600px;overflow:scroll;"&gt;
    &lt;/div&gt;
&lt;/div&gt;

</code></pre>
<p>4.创建 Manage.cshtml 页面，比分输入功能：</p>
<p>Manage.cshtml：</p>
<pre><code>@page
@model CompetitionLive.Pages.ManageModel
@{
    
}

&lt;form  method="post"&gt;
    &lt;p&gt;
        &lt;label for="number" asp-for="Score1"&gt;&lt;/label&gt;
        &lt;input type="number" asp-for="Score1" id="score1" /&gt;
    &lt;/p&gt;
    &lt;p&gt;
        &lt;label for="number" asp-for="Score2"&gt;&lt;/label&gt;
        &lt;input type="number" asp-for="Score2" /&gt;
    &lt;/p&gt;
    &lt;p&gt;
        &lt;label for="text2" asp-for="LastAction"&gt;&lt;/label&gt;
        &lt;input type="text" asp-for="LastAction" /&gt;
    &lt;/p&gt;
    &lt;p&gt;&lt;input type="submit" /&gt;&lt;/p&gt;
&lt;/form&gt;
</code></pre>
<p>Manage.cshtml.cs：</p>
<pre><code>public class ManageModel : PageModel
{
    private readonly HttpSseServer _httpSseServer;
    public ManageModel( HttpSseServer httpSseServer) {
        _httpSseServer = httpSseServer;
    }
    public int Score1 { get; set; } = 0;
    public int Score2 { get; set; } = 0;
    public string LastAction { get; set; }
    public void OnGet()
    {
       
    }

    public void OnPost(int score1,int score2,string lastAction) {
        Dictionary&lt;string, object&gt; dict = new Dictionary&lt;string, object&gt;();
        dict["score1"] = score1;
        dict["score2"] = score2;
        dict["lastaction"] = lastAction+"&lt;br /&gt;";
        
        _httpSseServer.StreamManagement.All.PushSseMsg(Newtonsoft.Json.JsonConvert.SerializeObject(dict));
    }
}
</code></pre>
<p>5.启动运行</p>
<p>效果：<br>
<img src="https://img2024.cnblogs.com/blog/981632/202505/981632-20250528163845992-633760485.gif" alt="效果图" loading="lazy"></p>
<p>附源码地址：<a href="https://github.com/ZhiYuanHuang/TinyHttpSSE.DotNet/tree/main/src/demo/TinyHttpSSE.Dotnet.Demo" target="_blank" rel="noopener nofollow">TinyHttpSSE.Dotnet.Demo\CompetitionLive</a></p>

</div>
<div class="clear"></div>

        </div>
        <p class="postfoot">
            posted on 
<span id="post-date" data-last-update-days="0.4009578700185185" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-28 16:43">2025-05-28 16:42</span>&nbsp;
<a href="https://www.cnblogs.com/Countrymen">ZionH</a>&nbsp;
阅读(<span id="post_view_count">108</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18900890);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18900890', targetLink: 'https://www.cnblogs.com/Countrymen/p/18900890', title: '基于 SSE、asp.net core razor 实现比分Live' })">举报</a>

        </p>
    