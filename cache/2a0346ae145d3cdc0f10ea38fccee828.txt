
	<h1 class="postTitle"><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Stream-Firefly/p/19005810" title="发布于 2025-07-27 12:19">
    <span role="heading" aria-level="2">2025“钉耙编程”中国大学生算法设计暑期联赛（3）</span>
    

</a>
</h1>
	<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h3 id="1-1002-小抹爱锻炼">1. 1002 小抹爱锻炼</h3>
<div class="problem-detail-label">
<p><img alt="image" width="528" height="466" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3086889/202507/3086889-20250726100024233-1717393104.png" class="lazyload"></p>
</div>
<h4>&nbsp;</h4>
<h4 id="知识点注意力">知识点：贪心上下界判断</h4>
<p>计算出训练次数的下限和上限，判断<span class="math inline">M是否在上下限中即可</span></p>
<p>下限：从左到右贪心取最小=max(b[i],last)</p>
<p>上限：从右到左贪心取最大=min(c[i],last)</p>
<div class="cnblogs_code"><img id="code_img_closed_86af43ce-f998-4401-87cf-b6ee1fdf8781" class="code_img_closed lazyload" data-src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif"><img id="code_img_opened_86af43ce-f998-4401-87cf-b6ee1fdf8781" class="code_img_opened lazyload" style="display: none" data-src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif">
<div id="cnblogs_code_open_86af43ce-f998-4401-87cf-b6ee1fdf8781" class="cnblogs_code_hide">
<pre>#include&lt;bits/stdc++.h&gt; 
<span style="color: rgba(0, 0, 255, 1)">#define</span> in inline
<span style="color: rgba(0, 0, 255, 1)">#define</span> re register
<span style="color: rgba(0, 0, 255, 1)">#define</span> ll long long
<span style="color: rgba(0, 0, 255, 1)">#define</span> db double
<span style="color: rgba(0, 0, 255, 1)">#define</span> ls(a) a&lt;&lt;1
<span style="color: rgba(0, 0, 255, 1)">#define</span> rs(a) a&lt;&lt;1|1
<span style="color: rgba(0, 0, 255, 1)">#define</span> sz(a) int(a.size())
<span style="color: rgba(0, 0, 255, 1)">#define</span> inf 0x3f3f3f3f 
<span style="color: rgba(0, 0, 255, 1)">#define</span> me(a,num) memset(a,num,sizeof(a))
<span style="color: rgba(0, 0, 255, 1)">#define</span> mc(a,b) memcpy(a,b,sizeof(a))
<span style="color: rgba(0, 0, 255, 1)">#define</span> For(i,a,n) for(re int (i)(a);(i)&lt;=(n);(i)=-~(i))
<span style="color: rgba(0, 0, 255, 1)">#define</span> Bor(i,n,a) for(re int (i)(n);(i)&gt;=(a);--(i))
<span style="color: rgba(0, 0, 255, 1)">#define</span> debug cout&lt;&lt;"QWQ"&lt;&lt;endl
<span style="color: rgba(0, 0, 255, 1)">#define</span> Time cout&lt;&lt;(db)clock()/CLOCKS_PER_SEC&lt;&lt;endl
<span style="color: rgba(0, 0, 255, 1)">#define</span> int long long
<span style="color: rgba(0, 0, 255, 1)">using</span> <span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> std;
</span><span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">int</span> R=<span style="color: rgba(128, 0, 128, 1)">1</span>&lt;&lt;<span style="color: rgba(128, 0, 128, 1)">21</span>,N=1e6+<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> b[N],c[N];
</span><span style="color: rgba(0, 0, 255, 1)">in</span> <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> qread()
{
    re </span><span style="color: rgba(0, 0, 255, 1)">int</span> s=<span style="color: rgba(128, 0, 128, 1)">0</span>,op=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    re </span><span style="color: rgba(0, 0, 255, 1)">char</span> ch=<span style="color: rgba(0, 0, 0, 1)">getchar();
    </span><span style="color: rgba(0, 0, 255, 1)">while</span>(!isdigit(ch))op|=ch==<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">-</span><span style="color: rgba(128, 0, 0, 1)">'</span>,ch=<span style="color: rgba(0, 0, 0, 1)">getchar();
    </span><span style="color: rgba(0, 0, 255, 1)">while</span>(isdigit(ch)) s=(s&lt;&lt;<span style="color: rgba(128, 0, 128, 1)">3</span>)+(s&lt;&lt;<span style="color: rgba(128, 0, 128, 1)">1</span>)+(ch^<span style="color: rgba(128, 0, 128, 1)">48</span>),ch=<span style="color: rgba(0, 0, 0, 1)">getchar();
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> op?-<span style="color: rgba(0, 0, 0, 1)">s:s;
}
</span><span style="color: rgba(0, 0, 255, 1)">in</span> <span style="color: rgba(0, 0, 255, 1)">void</span> solve(<span style="color: rgba(0, 0, 255, 1)">int</span> n,<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> m)
{
    </span><span style="color: rgba(0, 0, 255, 1)">int</span> mins=<span style="color: rgba(128, 0, 128, 1)">0</span>,maxs=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">int</span> last=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    For(i,</span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">,n)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span>(b[i]&gt;=<span style="color: rgba(0, 0, 0, 1)">last)
        {
            mins</span>+=<span style="color: rgba(0, 0, 0, 1)">b[i];
            last</span>=<span style="color: rgba(0, 0, 0, 1)">b[i];
        }
        </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span>(c[i]&lt;<span style="color: rgba(0, 0, 0, 1)">last)
        {
            cout</span>&lt;&lt;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">NO</span><span style="color: rgba(128, 0, 0, 1)">"</span>&lt;&lt;<span style="color: rgba(0, 0, 0, 1)">endl;
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
        }
        </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
        {
            mins</span>+=<span style="color: rgba(0, 0, 0, 1)">last;
        }
    }
    last</span>=<span style="color: rgba(0, 0, 0, 1)">inf;
    Bor(i,n,</span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span>(c[i]&lt;=<span style="color: rgba(0, 0, 0, 1)">last)
        {
            maxs</span>+=<span style="color: rgba(0, 0, 0, 1)">c[i];
            last</span>=<span style="color: rgba(0, 0, 0, 1)">c[i];
        }
        </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span>(b[i]&gt;<span style="color: rgba(0, 0, 0, 1)">last)
        {
            cout</span>&lt;&lt;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">NO</span><span style="color: rgba(128, 0, 0, 1)">"</span>&lt;&lt;<span style="color: rgba(0, 0, 0, 1)">endl;
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
        }
        </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
        {
            maxs</span>+=<span style="color: rgba(0, 0, 0, 1)">last;
        }
    }
    </span><span style="color: rgba(0, 0, 255, 1)">if</span>(m&gt;maxs||m&lt;<span style="color: rgba(0, 0, 0, 1)">mins)
    {
        cout</span>&lt;&lt;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">NO</span><span style="color: rgba(128, 0, 0, 1)">"</span>&lt;&lt;<span style="color: rgba(0, 0, 0, 1)">endl;
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
    {
        cout</span>&lt;&lt;<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">YES</span><span style="color: rgba(128, 0, 0, 1)">"</span>&lt;&lt;<span style="color: rgba(0, 0, 0, 1)">endl;
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
    }    
}
signed main()
{
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">    freopen(".in","r",stdin);
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">    freopen(".out","w",stdout);</span>
    <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> T;
    T</span>=<span style="color: rgba(0, 0, 0, 1)">qread();
    </span><span style="color: rgba(0, 0, 255, 1)">while</span>(T--<span style="color: rgba(0, 0, 0, 1)">)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> n,m;
        n</span>=qread(),m=<span style="color: rgba(0, 0, 0, 1)">qread();
        For(i,</span><span style="color: rgba(128, 0, 128, 1)">1</span>,n)b[i]=<span style="color: rgba(0, 0, 0, 1)">qread();
        For(i,</span><span style="color: rgba(128, 0, 128, 1)">1</span>,n)c[i]=<span style="color: rgba(0, 0, 0, 1)">qread();
        solve(n,m);
    }
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
} </span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h3 id="1-1002-小抹爱锻炼">2. 1004 三带一</h3>
<p><img alt="image" width="555" height="425" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3086889/202507/3086889-20250726101545271-863777007.png" class="lazyload"></p>
<p>&nbsp;</p>
<h4 id="知识点注意力">知识点：二分</h4>
<p>上界S/4，二分答案，每次对13种牌各确定可用三的上下界，来确实true/false</p>
<div class="cnblogs_code"><img id="code_img_closed_fce3e2be-4f66-407f-babc-8f306c39aade" class="code_img_closed lazyload" data-src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif"><img id="code_img_opened_fce3e2be-4f66-407f-babc-8f306c39aade" class="code_img_opened lazyload" style="display: none" data-src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif">
<div id="cnblogs_code_open_fce3e2be-4f66-407f-babc-8f306c39aade" class="cnblogs_code_hide">
<pre>#include&lt;bits/stdc++.h&gt; 
<span style="color: rgba(0, 0, 255, 1)">#define</span> in inline
<span style="color: rgba(0, 0, 255, 1)">#define</span> re register
<span style="color: rgba(0, 0, 255, 1)">#define</span> ll long long
<span style="color: rgba(0, 0, 255, 1)">#define</span> db double
<span style="color: rgba(0, 0, 255, 1)">#define</span> ls(a) a&lt;&lt;1
<span style="color: rgba(0, 0, 255, 1)">#define</span> rs(a) a&lt;&lt;1|1
<span style="color: rgba(0, 0, 255, 1)">#define</span> sz(a) int(a.size())
<span style="color: rgba(0, 0, 255, 1)">#define</span> inf 0x3f3f3f3f 
<span style="color: rgba(0, 0, 255, 1)">#define</span> me(a,num) memset(a,num,sizeof(a))
<span style="color: rgba(0, 0, 255, 1)">#define</span> mc(a,b) memcpy(a,b,sizeof(a))
<span style="color: rgba(0, 0, 255, 1)">#define</span> For(i,a,n) for(re int (i)(a);(i)&lt;=(n);(i)=-~(i))
<span style="color: rgba(0, 0, 255, 1)">#define</span> Bor(i,n,a) for(re int (i)(n);(i)&gt;=(a);--(i))
<span style="color: rgba(0, 0, 255, 1)">#define</span> debug cout&lt;&lt;"QWQ"&lt;&lt;endl
<span style="color: rgba(0, 0, 255, 1)">#define</span> Time cout&lt;&lt;(db)clock()/CLOCKS_PER_SEC&lt;&lt;endl
<span style="color: rgba(0, 0, 255, 1)">using</span> <span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> std;
</span><span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">int</span> R=<span style="color: rgba(128, 0, 128, 1)">1</span>&lt;&lt;<span style="color: rgba(128, 0, 128, 1)">21</span>,N=1e6+<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> ll qread()
{
    re ll s</span>=<span style="color: rgba(128, 0, 128, 1)">0</span>,op=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    re </span><span style="color: rgba(0, 0, 255, 1)">char</span> ch=<span style="color: rgba(0, 0, 0, 1)">getchar();
    </span><span style="color: rgba(0, 0, 255, 1)">while</span>(!isdigit(ch))op|=ch==<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">-</span><span style="color: rgba(128, 0, 0, 1)">'</span>,ch=<span style="color: rgba(0, 0, 0, 1)">getchar();
    </span><span style="color: rgba(0, 0, 255, 1)">while</span>(isdigit(ch)) s=(s&lt;&lt;<span style="color: rgba(128, 0, 128, 1)">3</span>)+(s&lt;&lt;<span style="color: rgba(128, 0, 128, 1)">1</span>)+(ch^<span style="color: rgba(128, 0, 128, 1)">48</span>),ch=<span style="color: rgba(0, 0, 0, 1)">getchar();
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> op?-<span style="color: rgba(0, 0, 0, 1)">s:s;
}
</span><span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> 
{
    </span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> maxn,lef;
}b[N];
</span><span style="color: rgba(0, 0, 255, 1)">in</span> <span style="color: rgba(0, 0, 255, 1)">bool</span> check(ll x,vector&lt;ll&gt;&amp;<span style="color: rgba(0, 0, 0, 1)"> a,ll S) {
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(128, 0, 128, 1)">4</span>*x&gt;<span style="color: rgba(0, 0, 0, 1)">S) 
    {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    }
    ll totalL</span>=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    ll totalR</span>=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    For(i,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">12</span><span style="color: rgba(0, 0, 0, 1)">) 
    {
        ll maxR</span>=min(x,a[i]/<span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">);
        ll t </span>=<span style="color: rgba(128, 0, 128, 1)">3</span>*x+a[i]-<span style="color: rgba(0, 0, 0, 1)">S;
        ll minl</span>=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (t&gt;<span style="color: rgba(128, 0, 128, 1)">0</span>) {minl=(t+<span style="color: rgba(128, 0, 128, 1)">1</span>)/<span style="color: rgba(128, 0, 128, 1)">2</span>; }<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">(S-mid*3)-(a[i]-3minl)&gt;=minl</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> (minl&gt;maxR) {<span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;}
        totalL</span>+=<span style="color: rgba(0, 0, 0, 1)">minl;
        totalR</span>+=<span style="color: rgba(0, 0, 0, 1)">maxR;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (totalL&lt;=x&amp;&amp;x&lt;=<span style="color: rgba(0, 0, 0, 1)">totalR)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
}
</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> main() 
{
    </span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> T;
    T</span>=<span style="color: rgba(0, 0, 0, 1)">qread();
    </span><span style="color: rgba(0, 0, 255, 1)">while</span>(T--<span style="color: rgba(0, 0, 0, 1)">) 
    {
        vector</span>&lt;ll&gt;a(<span style="color: rgba(128, 0, 128, 1)">13</span><span style="color: rgba(0, 0, 0, 1)">);
        ll S</span>=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
        For(i,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(128, 0, 128, 1)">12</span>)a[i]=qread(),S+=<span style="color: rgba(0, 0, 0, 1)">a[i];

        ll Ri</span>=S/<span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">;
        ll Le</span>=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
        ll ans</span>=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">while</span> (Le&lt;=<span style="color: rgba(0, 0, 0, 1)">Ri) 
        {
            ll mid</span>=(Le+Ri)/<span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">;
            </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (check(mid,a,S)) 
            {
                ans</span>=<span style="color: rgba(0, 0, 0, 1)">mid;
                Le</span>=mid+<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
            } 
            </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> 
            {
                Ri</span>=mid-<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
            }
        }
        printf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%lld\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,ans);
    }
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
}</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h3>3. 1007&nbsp;性质不同的数字</h3>
<p><img alt="image" width="493" height="367" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3086889/202507/3086889-20250726101710466-365189168.png" class="lazyload"></p>
<p>&nbsp;</p>
<h4 id="知识点注意力">知识点：扫描线+哈希</h4>
<p>可以给所有的线段一个随机值，加入(l, rand_vals[i])和(r + 1, rand_vals[i])，排序，从左向右扫，通过异或来加入和删除线段，unordered_set判断扫描过程加入线段和删除线段的变化，产生新变化就count++</p>
<p>&nbsp;</p>
<div class="cnblogs_code"><img id="code_img_closed_faab8ea3-5426-4732-bce9-fa409bf995f9" class="code_img_closed lazyload" data-src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif"><img id="code_img_opened_faab8ea3-5426-4732-bce9-fa409bf995f9" class="code_img_opened lazyload" style="display: none" data-src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif">
<div id="cnblogs_code_open_faab8ea3-5426-4732-bce9-fa409bf995f9" class="cnblogs_code_hide">
<pre>#include&lt;bits/stdc++.h&gt; 
<span style="color: rgba(0, 0, 255, 1)">#define</span> in inline
<span style="color: rgba(0, 0, 255, 1)">#define</span> re register
<span style="color: rgba(0, 0, 255, 1)">#define</span> ll long long
<span style="color: rgba(0, 0, 255, 1)">#define</span> ull unsigned long long
<span style="color: rgba(0, 0, 255, 1)">#define</span> db double
<span style="color: rgba(0, 0, 255, 1)">#define</span> ls(a) a&lt;&lt;1
<span style="color: rgba(0, 0, 255, 1)">#define</span> rs(a) a&lt;&lt;1|1
<span style="color: rgba(0, 0, 255, 1)">#define</span> sz(a) int(a.size())
<span style="color: rgba(0, 0, 255, 1)">#define</span> inf 0x3f3f3f3f 
<span style="color: rgba(0, 0, 255, 1)">#define</span> me(a,num) memset(a,num,sizeof(a))
<span style="color: rgba(0, 0, 255, 1)">#define</span> mc(a,b) memcpy(a,b,sizeof(a))
<span style="color: rgba(0, 0, 255, 1)">#define</span> For(i,a,n) for(re int (i)(a);(i)&lt;=(n);(i)=-~(i))
<span style="color: rgba(0, 0, 255, 1)">#define</span> Bor(i,n,a) for(re int (i)(n);(i)&gt;=(a);--(i))
<span style="color: rgba(0, 0, 255, 1)">#define</span> debug cout&lt;&lt;"QWQ"&lt;&lt;endl
<span style="color: rgba(0, 0, 255, 1)">#define</span> Time cout&lt;&lt;(db)clock()/CLOCKS_PER_SEC&lt;&lt;endl
<span style="color: rgba(0, 0, 255, 1)">using</span> <span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> std;
</span><span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">int</span> R=<span style="color: rgba(128, 0, 128, 1)">1</span>&lt;&lt;<span style="color: rgba(128, 0, 128, 1)">21</span>,N=1e6+<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> ll qread()
{
    re ll s</span>=<span style="color: rgba(128, 0, 128, 1)">0</span>,op=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    re </span><span style="color: rgba(0, 0, 255, 1)">char</span> ch=<span style="color: rgba(0, 0, 0, 1)">getchar();
    </span><span style="color: rgba(0, 0, 255, 1)">while</span>(!isdigit(ch))op|=ch==<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">-</span><span style="color: rgba(128, 0, 0, 1)">'</span>,ch=<span style="color: rgba(0, 0, 0, 1)">getchar();
    </span><span style="color: rgba(0, 0, 255, 1)">while</span>(isdigit(ch)) s=(s&lt;&lt;<span style="color: rgba(128, 0, 128, 1)">3</span>)+(s&lt;&lt;<span style="color: rgba(128, 0, 128, 1)">1</span>)+(ch^<span style="color: rgba(128, 0, 128, 1)">48</span>),ch=<span style="color: rgba(0, 0, 0, 1)">getchar();
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> op?-<span style="color: rgba(0, 0, 0, 1)">s:s;
}
</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> main() 
{
    </span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 0, 1)"> mt19937_64 gen(random_device{}());
    </span><span style="color: rgba(0, 0, 255, 1)">static</span> uniform_int_distribution&lt;unsigned <span style="color: rgba(0, 0, 255, 1)">long</span> <span style="color: rgba(0, 0, 255, 1)">long</span>&gt;<span style="color: rgba(0, 0, 0, 1)"> dis;
    </span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> t;
    t</span>=<span style="color: rgba(0, 0, 0, 1)">qread();
    </span><span style="color: rgba(0, 0, 255, 1)">while</span> (t--<span style="color: rgba(0, 0, 0, 1)">) 
    {
        </span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> n;
          n</span>=<span style="color: rgba(0, 0, 0, 1)">qread();
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (n == <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
        {
            printf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">1\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            </span><span style="color: rgba(0, 0, 255, 1)">continue</span><span style="color: rgba(0, 0, 0, 1)">;
        }
        
        vector</span>&lt;ull&gt;<span style="color: rgba(0, 0, 0, 1)"> rand_vals(n);
        For(i,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,n-<span style="color: rgba(128, 0, 128, 1)">1</span>)rand_vals[i] =<span style="color: rgba(0, 0, 0, 1)"> dis(gen);
        
        vector</span>&lt;pair&lt;ll, ull&gt; &gt;<span style="color: rgba(0, 0, 0, 1)"> events;
        events.reserve(</span><span style="color: rgba(128, 0, 128, 1)">2</span> *<span style="color: rgba(0, 0, 0, 1)"> n);
        
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = <span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt; n; i++<span style="color: rgba(0, 0, 0, 1)">) 
        {
            ll l, r;
            scanf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%lld %lld</span><span style="color: rgba(128, 0, 0, 1)">"</span>, &amp;l, &amp;<span style="color: rgba(0, 0, 0, 1)">r);
            
            events.emplace_back(l, rand_vals[i]);
            events.emplace_back(r </span>+ <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">, rand_vals[i]);
        }
        
        sort(events.begin(), events.end());
        
        ull current </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
        unordered_set</span>&lt;ull&gt;<span style="color: rgba(0, 0, 0, 1)"> seen;
        seen.insert(</span><span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">int</span> count = <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
                
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i=<span style="color: rgba(128, 0, 128, 1)">0</span>;i&lt;<span style="color: rgba(0, 0, 0, 1)">events.size(); ) 
        {
            ll pos</span>=<span style="color: rgba(0, 0, 0, 1)">events[i].first;
            </span><span style="color: rgba(0, 0, 255, 1)">int</span> j=<span style="color: rgba(0, 0, 0, 1)">i;
            </span><span style="color: rgba(0, 0, 255, 1)">while</span> (j&lt;events.size()&amp;&amp;events[j].first==<span style="color: rgba(0, 0, 0, 1)">pos) 
            {
                current</span>^=<span style="color: rgba(0, 0, 0, 1)">events[j].second;
                j</span>++<span style="color: rgba(0, 0, 0, 1)">;
            }
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (seen.find(current)==<span style="color: rgba(0, 0, 0, 1)">seen.end())
            {
                seen.insert(current);
                count</span>++<span style="color: rgba(0, 0, 0, 1)">;
            }
            i</span>=<span style="color: rgba(0, 0, 0, 1)">j;
        }
        printf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%d\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, count);
    }
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
}</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h3>4. 1012核心共振</h3>
<p><img alt="image" width="504" height="574" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3086889/202507/3086889-20250727094623268-1402731081.png" class="lazyload"></p>
<p>&nbsp;</p>
<h4 id="知识点注意力" style="font-size: 14px">知识点：<span style="color: rgba(64, 64, 64, 1); font-family: quote-cjk-patch, Inter, system-ui, -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Noto Sans&quot;, Ubuntu, Cantarell, &quot;Helvetica Neue&quot;, Oxygen, &quot;Open Sans&quot;, sans-serif; font-size: 16.002px">坐标变换</span></h4>
<p><img alt="image" width="642" height="302" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3086889/202507/3086889-20250726103541978-1357552273.png" class="lazyload"></p>
<p>&nbsp;</p>
<div class="cnblogs_code"><img id="code_img_closed_d384330d-ac74-4c5f-9451-89a8d6b7e01b" class="code_img_closed lazyload" data-src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif"><img id="code_img_opened_d384330d-ac74-4c5f-9451-89a8d6b7e01b" class="code_img_opened lazyload" style="display: none" data-src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif">
<div id="cnblogs_code_open_d384330d-ac74-4c5f-9451-89a8d6b7e01b" class="cnblogs_code_hide">
<pre>#include&lt;bits/stdc++.h&gt; 
<span style="color: rgba(0, 0, 255, 1)">#define</span> in inline
<span style="color: rgba(0, 0, 255, 1)">#define</span> re register
<span style="color: rgba(0, 0, 255, 1)">#define</span> ll long long
<span style="color: rgba(0, 0, 255, 1)">#define</span> db double
<span style="color: rgba(0, 0, 255, 1)">#define</span> ls(a) a&lt;&lt;1
<span style="color: rgba(0, 0, 255, 1)">#define</span> rs(a) a&lt;&lt;1|1
<span style="color: rgba(0, 0, 255, 1)">#define</span> sz(a) int(a.size())
<span style="color: rgba(0, 0, 255, 1)">#define</span> inf 0x3f3f3f3f 
<span style="color: rgba(0, 0, 255, 1)">#define</span> me(a,num) memset(a,num,sizeof(a))
<span style="color: rgba(0, 0, 255, 1)">#define</span> mc(a,b) memcpy(a,b,sizeof(a))
<span style="color: rgba(0, 0, 255, 1)">#define</span> For(i,a,n) for(re int (i)(a);(i)&lt;=(n);(i)=-~(i))
<span style="color: rgba(0, 0, 255, 1)">#define</span> Bor(i,n,a) for(re int (i)(n);(i)&gt;=(a);--(i))
<span style="color: rgba(0, 0, 255, 1)">#define</span> debug cout&lt;&lt;"QWQ"&lt;&lt;endl
<span style="color: rgba(0, 0, 255, 1)">#define</span> Time cout&lt;&lt;(db)clock()/CLOCKS_PER_SEC&lt;&lt;endl
<span style="color: rgba(0, 0, 255, 1)">using</span> <span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> std;
</span><span style="color: rgba(0, 0, 255, 1)">const</span> ll R=<span style="color: rgba(128, 0, 128, 1)">1</span>&lt;&lt;<span style="color: rgba(128, 0, 128, 1)">21</span>,N=1e6+<span style="color: rgba(128, 0, 128, 1)">10</span>,mod=1e9+<span style="color: rgba(128, 0, 128, 1)">7</span>,inv2=<span style="color: rgba(128, 0, 128, 1)">500000004</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> ll qread()
{
    re ll s</span>=<span style="color: rgba(128, 0, 128, 1)">0</span>,op=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    re </span><span style="color: rgba(0, 0, 255, 1)">char</span> ch=<span style="color: rgba(0, 0, 0, 1)">getchar();
    </span><span style="color: rgba(0, 0, 255, 1)">while</span>(!isdigit(ch))op|=ch==<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">-</span><span style="color: rgba(128, 0, 0, 1)">'</span>,ch=<span style="color: rgba(0, 0, 0, 1)">getchar();
    </span><span style="color: rgba(0, 0, 255, 1)">while</span>(isdigit(ch)) s=(s&lt;&lt;<span style="color: rgba(128, 0, 128, 1)">3</span>)+(s&lt;&lt;<span style="color: rgba(128, 0, 128, 1)">1</span>)+(ch^<span style="color: rgba(128, 0, 128, 1)">48</span>),ch=<span style="color: rgba(0, 0, 0, 1)">getchar();
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> op?-<span style="color: rgba(0, 0, 0, 1)">s:s;
}
</span><span style="color: rgba(0, 0, 255, 1)">in</span> ll solve(vector&lt;ll&gt;uu,vector&lt;ll&gt;<span style="color: rgba(0, 0, 0, 1)">a,ll n)
{
    vector</span>&lt;ll&gt;anss(n,<span style="color: rgba(128, 0, 128, 1)">0</span>),sum(n,<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">);
    vector</span>&lt;ll&gt;x=<span style="color: rgba(0, 0, 0, 1)">uu;
    sort(x.begin(),x.end());
    sum[</span><span style="color: rgba(128, 0, 128, 1)">0</span>]=x[<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">];
    For(i,</span><span style="color: rgba(128, 0, 128, 1)">1</span>,n-<span style="color: rgba(128, 0, 128, 1)">1</span>)sum[i]=sum[i-<span style="color: rgba(128, 0, 128, 1)">1</span>]+<span style="color: rgba(0, 0, 0, 1)">x[i];
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">    debug;
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">    For(i,0,n-1)cout&lt;&lt;x[i]&lt;&lt;" ";
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">    cout&lt;&lt;endl;</span>
    ll ans=<span style="color: rgba(128, 0, 128, 1)">0</span>,ansl=<span style="color: rgba(128, 0, 128, 1)">0</span>,ansr=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    For(i,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,n-<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        ansl</span>=<span style="color: rgba(128, 0, 128, 1)">0</span>,ansr=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
        ll zb</span>=<span style="color: rgba(0, 0, 0, 1)">uu[i];
        ll l</span>=lower_bound(x.begin(),x.end(),zb)-<span style="color: rgba(0, 0, 0, 1)">x.begin();
        ll r</span>=upper_bound(x.begin(),x.end(),zb)-<span style="color: rgba(0, 0, 0, 1)">x.begin();
        </span><span style="color: rgba(0, 0, 255, 1)">if</span>(l&gt;<span style="color: rgba(128, 0, 128, 1)">0</span>)ansl=l*zb-sum[l-<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">];
        </span><span style="color: rgba(0, 0, 255, 1)">if</span>(r&lt;n)ansr=(sum[n-<span style="color: rgba(128, 0, 128, 1)">1</span>]-sum[r-<span style="color: rgba(128, 0, 128, 1)">1</span>])-(n-r)*<span style="color: rgba(0, 0, 0, 1)">zb;
        anss[i]</span>=ansl+<span style="color: rgba(0, 0, 0, 1)">ansr;
    }
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">    For(i,0,n-1)cout&lt;&lt;anss[i]&lt;&lt;" ";</span>
    For(i,<span style="color: rgba(128, 0, 128, 1)">0</span>,n-<span style="color: rgba(128, 0, 128, 1)">1</span>)ans=(ans+(a[i]%mod)*(anss[i]%mod))%<span style="color: rgba(0, 0, 0, 1)">mod;
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> ans;

}
</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> main()
{
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">    freopen(".in","r",stdin);
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">    freopen(".out","w",stdout);</span>
    ll t=<span style="color: rgba(0, 0, 0, 1)">qread();
    </span><span style="color: rgba(0, 0, 255, 1)">while</span>(t--<span style="color: rgba(0, 0, 0, 1)">)
    {
        ll n</span>=<span style="color: rgba(0, 0, 0, 1)">qread();
        vector</span>&lt;ll&gt;<span style="color: rgba(0, 0, 0, 1)">u(n),v(n),a(n);
        For(i,</span><span style="color: rgba(128, 0, 128, 1)">0</span>,n-<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">)
        {
            ll x,y,val;
            x</span>=qread(),y=qread(),val=<span style="color: rgba(0, 0, 0, 1)">qread();
            u[i]</span>=x+y,v[i]=y-x,a[i]=<span style="color: rgba(0, 0, 0, 1)">val;
        }
        ll ansu</span>=<span style="color: rgba(128, 0, 128, 1)">0</span>,ansv=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
        ansu</span>=<span style="color: rgba(0, 0, 0, 1)">solve(u,a,n);
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">        debug;cout&lt;&lt;ansu&lt;&lt;endl;</span>
        ansv=<span style="color: rgba(0, 0, 0, 1)">solve(v,a,n);
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">        debug;cout&lt;&lt;ansv&lt;&lt;endl;</span>
        ll ans=(ansu+ansv)%mod*inv2%<span style="color: rgba(0, 0, 0, 1)">mod;
        printf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%lld\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,ans);
    }
    
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
} </span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h3>5. 1008 01环</h3>
<p><img alt="image" width="499" height="420" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3086889/202507/3086889-20250727105833537-1807822830.png" class="lazyload"></p>
<p>&nbsp;</p>
<h4 id="知识点注意力">知识点：模拟分析</h4>
<p>存在101010和010101两种合法情况，对两种情况分别判断给出序列的不正确位置，对于连续长L的不正确段要至少操作（L+1）/2次</p>
<div class="cnblogs_code"><img id="code_img_closed_c1034afe-5c28-42eb-87a3-2dd30782e4de" class="code_img_closed lazyload" data-src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif"><img id="code_img_opened_c1034afe-5c28-42eb-87a3-2dd30782e4de" class="code_img_opened lazyload" style="display: none" data-src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif">
<div id="cnblogs_code_open_c1034afe-5c28-42eb-87a3-2dd30782e4de" class="cnblogs_code_hide">
<pre>#include&lt;bits/stdc++.h&gt; 
<span style="color: rgba(0, 0, 255, 1)">#define</span> in inline
<span style="color: rgba(0, 0, 255, 1)">#define</span> re register
<span style="color: rgba(0, 0, 255, 1)">#define</span> ll long long
<span style="color: rgba(0, 0, 255, 1)">#define</span> db double
<span style="color: rgba(0, 0, 255, 1)">#define</span> ls(a) a&lt;&lt;1
<span style="color: rgba(0, 0, 255, 1)">#define</span> rs(a) a&lt;&lt;1|1
<span style="color: rgba(0, 0, 255, 1)">#define</span> sz(a) int(a.size())
<span style="color: rgba(0, 0, 255, 1)">#define</span> inf 0x3f3f3f3f 
<span style="color: rgba(0, 0, 255, 1)">#define</span> me(a,num) memset(a,num,sizeof(a))
<span style="color: rgba(0, 0, 255, 1)">#define</span> mc(a,b) memcpy(a,b,sizeof(a))
<span style="color: rgba(0, 0, 255, 1)">#define</span> For(i,a,n) for(re int (i)(a);(i)&lt;=(n);(i)=-~(i))
<span style="color: rgba(0, 0, 255, 1)">#define</span> Bor(i,n,a) for(re int (i)(n);(i)&gt;=(a);--(i))
<span style="color: rgba(0, 0, 255, 1)">#define</span> debug cout&lt;&lt;"QWQ"&lt;&lt;endl
<span style="color: rgba(0, 0, 255, 1)">#define</span> Time cout&lt;&lt;(db)clock()/CLOCKS_PER_SEC&lt;&lt;endl
<span style="color: rgba(0, 0, 255, 1)">using</span> <span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> std;
</span><span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">int</span> R=<span style="color: rgba(128, 0, 128, 1)">1</span>&lt;&lt;<span style="color: rgba(128, 0, 128, 1)">21</span>,N=1e6+<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 0, 255, 1)">in</span> <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> qread()
{
    re </span><span style="color: rgba(0, 0, 255, 1)">int</span> s=<span style="color: rgba(128, 0, 128, 1)">0</span>,op=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    re </span><span style="color: rgba(0, 0, 255, 1)">char</span> ch=<span style="color: rgba(0, 0, 0, 1)">getchar();
    </span><span style="color: rgba(0, 0, 255, 1)">while</span>(!isdigit(ch))op|=ch==<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">-</span><span style="color: rgba(128, 0, 0, 1)">'</span>,ch=<span style="color: rgba(0, 0, 0, 1)">getchar();
    </span><span style="color: rgba(0, 0, 255, 1)">while</span>(isdigit(ch)) s=(s&lt;&lt;<span style="color: rgba(128, 0, 128, 1)">3</span>)+(s&lt;&lt;<span style="color: rgba(128, 0, 128, 1)">1</span>)+(ch^<span style="color: rgba(128, 0, 128, 1)">48</span>),ch=<span style="color: rgba(0, 0, 0, 1)">getchar();
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> op?-<span style="color: rgba(0, 0, 0, 1)">s:s;
}
</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> n;
</span><span style="color: rgba(0, 0, 255, 1)">char</span><span style="color: rgba(0, 0, 0, 1)"> s[N];
</span><span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)"> ch[N];
</span><span style="color: rgba(0, 0, 255, 1)">in</span> <span style="color: rgba(0, 0, 255, 1)">int</span> nxt(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> u)
{
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> (u==n)?<span style="color: rgba(128, 0, 128, 1)">1</span>:u+<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
}
</span><span style="color: rgba(0, 0, 255, 1)">in</span> <span style="color: rgba(0, 0, 255, 1)">int</span> lst(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> u)
{
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> (u==<span style="color: rgba(128, 0, 128, 1)">1</span>)?n:u-<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
}
</span><span style="color: rgba(0, 0, 255, 1)">in</span> <span style="color: rgba(0, 0, 255, 1)">int</span> op(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> type)
{
    For(i,</span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">,n)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">int</span> u=(i+type)&amp;<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">int</span> val=(s[i]==<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">1</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">);
        ch[i]</span>=u^<span style="color: rgba(0, 0, 0, 1)">val;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">int</span> num=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    For(i,</span><span style="color: rgba(128, 0, 128, 1)">1</span>,n)num+=<span style="color: rgba(0, 0, 0, 1)">ch[i];
    </span><span style="color: rgba(0, 0, 255, 1)">if</span>(num==n)<span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> n;
    num</span>=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    For(i,</span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">,n)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span>(ch[i]&amp;&amp;!<span style="color: rgba(0, 0, 0, 1)">ch[lst(i)])
        {
            </span><span style="color: rgba(0, 0, 255, 1)">int</span> cnt=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
            </span><span style="color: rgba(0, 0, 255, 1)">for</span>(<span style="color: rgba(0, 0, 255, 1)">int</span> j=i;ch[j];j=nxt(j))++<span style="color: rgba(0, 0, 0, 1)">cnt;
            num</span>+=(cnt+<span style="color: rgba(128, 0, 128, 1)">1</span>)/<span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">;
        }
    }
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">    debug;</span>
    <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> num;
}
</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> main()
{
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">    freopen(".in","r",stdin);
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">    freopen(".out","w",stdout);</span>
    <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> t;
    t</span>=<span style="color: rgba(0, 0, 0, 1)">qread();
    </span><span style="color: rgba(0, 0, 255, 1)">while</span>(t--<span style="color: rgba(0, 0, 0, 1)">)
    {
        n</span>=<span style="color: rgba(0, 0, 0, 1)">qread();
        scanf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%s</span><span style="color: rgba(128, 0, 0, 1)">"</span>,s+<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">);
        cout</span>&lt;&lt;min(op(<span style="color: rgba(128, 0, 128, 1)">0</span>),op(<span style="color: rgba(128, 0, 128, 1)">1</span>))&lt;&lt;<span style="color: rgba(0, 0, 0, 1)">endl;
    }
    For(i,</span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">,n)
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
} </span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>&nbsp;</p>
<h3>&nbsp;</h3>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

	<div class="postDesc">posted on 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-27 12:20">2025-07-27 12:19</span>&nbsp;
<a href="https://www.cnblogs.com/Stream-Firefly">hsyhyj</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19005810);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19005810', targetLink: 'https://www.cnblogs.com/Stream-Firefly/p/19005810', title: '2025“钉耙编程”中国大学生算法设计暑期联赛（3）' })">举报</a>
</div>
