
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xiezhr/p/18734902" title="发布于 2025-02-24 21:17">
    <span role="heading" aria-level="2">spring官宣接入deepseek，真的太香了~</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h3 id="写在前面">写在前面</h3>
<p>经常逛<code>Spring</code>官网（<a href="https://docs.spring.io/spring-ai/reference/api/chat/deepseek-chat.html%EF%BC%89%E7%9A%84%E5%B0%8F%E4%BC%99%E4%BC%B4%E4%BC%9A%E5%8F%91%E7%8E%B0%EF%BC%8C" target="_blank" rel="noopener nofollow">https://docs.spring.io/spring-ai/reference/api/chat/deepseek-chat.html）的小伙伴会发现，</a></p>
<p><code>Spring</code> 已经支持接入<code>DeepSeek</code>了。</p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202502/2381533-20250224210941548-1643086892.png" alt="官宣接入deepseek" loading="lazy"></p>
<blockquote>
<p><a href="https://www.deepseek.com/" target="_blank" rel="noopener nofollow">DeepSeek AI</a> provides the open-source DeepSeek V3 model, renowned for its cutting-edge reasoning and problem-solving capabilities.</p>
<p>Spring AI integrates with DeepSeek AI by reusing the existing <a href="https://docs.spring.io/spring-ai/reference/api/chat/openai-chat.html" target="_blank" rel="noopener nofollow">OpenAI</a> client. To get started, you’ll need to obtain a <a href="https://api-docs.deepseek.com/" target="_blank" rel="noopener nofollow">DeepSeek API Key</a>, configure the base URL, and select one of the supported models.</p>
</blockquote>
<p>翻译过来就是</p>
<p><code>DeepSeek AI</code>提供了开源的<code>DeepSeek V3</code>模型，该模型以其先进的推理和解决问题的能力而闻名。</p>
<p><code>Spring AI</code>通过与现有<code>OpenAI</code>客户端复用的方式与<code>DeepSeek AI</code>集成。</p>
<p>要接入<code>DeepSeek</code>，您需要获取一个<code>DeepSeekAPI</code>的<code>API KEY</code>，配置接入地址，并选择一种模型即可</p>
<h3 id="一调用效果">一、调用效果</h3>
<p><a href="https://live.csdn.net/v/465047" target="_blank" rel="noopener nofollow">https://live.csdn.net/v/465047</a></p>
<h3 id="二spring-ai-与-deepseek-的集成背景">二、Spring AI 与 DeepSeek 的集成背景</h3>
<p>不管是<code>Spring</code> 官网还是<code>DeepSeek API</code> 文档（<a href="https://api-docs.deepseek.com/zh-cn/%EF%BC%89%E4%B8%AD%E9%83%BD%E6%8F%90%E5%88%B0" target="_blank" rel="noopener nofollow">https://api-docs.deepseek.com/zh-cn/）中都提到</a> <code>DeepSeek API</code> 使用与 <code>OpenAI</code> 兼容的 <code>API </code>格式。</p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202502/2381533-20250224210941492-2021168437.png" alt="与OpenAPI兼容的API格式" loading="lazy"></p>
<p>所以，我们只需要照抄接入<code>ChatGpt</code>的就可以了~  而与<code>ChatGPT</code> 或者其他大模型对接是通过<code>Spring AI</code> 来完成的。</p>
<p><code>Spring AI</code> 是什么呢？</p>
<p><code>Spring AI</code> 是 <code>Spring </code>生态中的一个新兴项目，旨在为 <code>Java </code>集成各类 <code>AI</code>模型提供统一的抽象层。</p>
<p>它通过隐藏底层模型的实现细节，让开发者能够以最少的代码调用各种 <code>AI</code> 服务。</p>
<p>目前，<code>Spring AI </code>已经支持<code>OpenAI</code>、<code>Azure AI</code>、<code>Hugging Face</code> 等多个 AI 平台，而 <code>DeepSeek</code> 的加入进一步丰富了其功能</p>
<h3 id="三java-接入deepseek步骤">三、Java 接入DeepSeek步骤</h3>
<h4 id="31--获取api-key">3.1  获取API KEY</h4>
<p>首先，我们需要到<code>DeepSeek</code> 开发平台（<a href="https://platform.deepseek.com/api_keys%EF%BC%89%E7%94%B3%E8%AF%B7" target="_blank" rel="noopener nofollow">https://platform.deepseek.com/api_keys）申请</a><code>API KEY</code></p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202502/2381533-20250224210941416-1049530486.png" alt="申请api key" loading="lazy"></p>
<p>这是使用 <code>DeepSeek</code> 服务的关键凭证，必须妥善保管。不要与他人共享你的 API key，或将其暴露在浏览器或其他客户端代码中</p>
<h4 id="32-创建spring-boot-项目">3.2 创建spring boot 项目</h4>
<p>通过 <code>Spring Initializr</code> 创建一个新的项目</p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202502/2381533-20250224210941307-1078543937.png" alt="创建springboot 项目" loading="lazy"></p>
<h4 id="33-添加依赖">3.3 添加依赖</h4>
<p>在 <code>pom.xml</code> 文件中，添加 Spring AI 的依赖。目前，Spring AI 通过 OpenAI 客户端与 DeepSeek 集成，因此需要引入以下依赖：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.ai&lt;/groupId&gt;
    &lt;artifactId&gt;spring-ai-openai-spring-boot-starter&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<h4 id="34-配置-deepseek-api">3.4 配置 DeepSeek API</h4>
<p>在 <code>application.properties</code> 或 <code>application.yml</code> 文件中，配置 <code>DeepSeek</code> 的 <code>API </code>密钥和请求 URL</p>
<ul>
<li>
<p><strong><code>deepseek-chat</code> 模型已全面升级为 DeepSeek-V3，接口不变。</strong> 通过指定 <code>model='deepseek-chat'</code> 即可调用 DeepSeek-V3。</p>
</li>
<li>
<p><strong><code>deepseek-reasoner</code> 是 DeepSeek 最新推出的<a href="https://api-docs.deepseek.com/zh-cn/guides/reasoning_model" target="_blank" rel="noopener nofollow">推理模型</a> DeepSeek-R1</strong>。通过指定 <code>model='deepseek-reasoner'</code>，即可调用 DeepSeek-R1。</p>
</li>
</ul>
<pre><code class="language-yml">spring:
  ai:
    openai:
      api-key: sk-your-deepseek-key-here
      base-url: https://api.deepseek.com
      chat:
        options:
          model: deepseek-reasoner
</code></pre>
<h4 id="35-编写接口">3.5 编写接口</h4>
<pre><code class="language-java">@RestController
@RequestMapping("/ai")
public class DeepSeekController {

    private final ChatClient chatclient;

    // 构造方法，用于构造chatclient 实列
    public DeepSeekController (ChatClient.Builder chatClientBuilder){
        this.chatclient =chatClientBuilder.build();
    }


    @GetMapping("/chat")
    public String chat(@RequestParam(value = "message") String message) {
        return chatclient.prompt(message).call().content();
    }
}
</code></pre>
<h4 id="36-测试一下">3.6 测试一下</h4>
<blockquote>
<p>启动项目，浏览器中 <a href="http://localhost:8080/ai/chat?message=%E5%AF%B9%E8%AF%9D%E5%86%85%E5%AE%B9" target="_blank" rel="noopener nofollow">http://localhost:8080/ai/chat?message=对话内容</a>  按照这个格式即可与deepseek对话</p>
</blockquote>
<p>① 讲一个笑话</p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202502/2381533-20250224210941497-990829230.png" alt="讲一个笑话" loading="lazy"></p>
<p>② 请用Java写一段线程安全的单例模式，并故意埋三个常见错误</p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202502/2381533-20250224210941423-157324628.png" alt="请用Java写一段线程安全的单例模式，并故意埋三个常见错误" loading="lazy"></p>
<p>③ 简单介绍下程序员晓凡是谁？</p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202502/2381533-20250224210941507-852681619.png" alt="程序员晓凡是谁" loading="lazy"></p>
<h3 id="四调用本地部署的deepseek">四、调用本地部署的DeepSeek</h3>
<p>在之前的文章中，已经手把手教小伙伴如何使用<code>ollama</code>将<code>DeepSeek</code> 部署到自己电脑上。</p>
<p>使用该方法部署算是最简单的一种部署方式了，忘记了的小伙伴，可以点击下面链接复习一下~</p>
<h4 id="41-ollama-常用命令">4.1 ollama 常用命令</h4>
<blockquote>
<p>我们需要简单知道下ollama 的常用命令，方便我们启停本地大模型</p>
</blockquote>
<p>① 查看ollama 版本信息</p>
<pre><code class="language-she">ollama -v
</code></pre>
<p>② 启动ollama服务</p>
<pre><code class="language-shell">ollama serve
</code></pre>
<p>③ 查看正在运行的大模型</p>
<pre><code class="language-shell">ollama ps
</code></pre>
<p>④ 查看本地大模型列表</p>
<pre><code class="language-shell">ollama list
</code></pre>
<p>⑤ 运行大模型</p>
<pre><code class="language-shell"># deepseek-r1:8b 为大模型版本号
# 如果本地不存在该模型，会先拉取
ollama run deepseek-r1:8b
</code></pre>
<p>⑥ 删除模型</p>
<pre><code class="language-shell">ollama rm 模型名称
</code></pre>
<p>⑦ 停止运行模型</p>
<pre><code class="language-shell">ollama stop
</code></pre>
<h4 id="42-启动大模型">4.2 启动大模型</h4>
<blockquote>
<p>首先，按照上面的命令启动本地安装的大模型，<code>ollama ps</code> 确认大模型正在运行中</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202502/2381533-20250224210941402-1841028890.png" alt="查看正在运行的大模型列表" loading="lazy"></p>
<p>大模型启动之后会占用11434 端口，开放的接口地址是：<a href="http://localhost:11434/api/chat" target="_blank" rel="noopener nofollow">http://localhost:11434/api/chat</a></p>
<p>我们可以先通过postman 调用试试</p>
<p>入参如下：</p>
<pre><code class="language-json">{
   "model": "deepseek-r1:8b",
   "messages": [
       {"role": "user", "content": "用中文解释量子计算原理"}
   ],
   "stream": false,
   "options": {
       "temperature": 0.7,
       "num_ctx": 4096 
   }
}
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202502/2381533-20250224210941483-799045750.png" alt="postman 调用本地大模型" loading="lazy"></p>
<h4 id="43--java项目中调用本地大模型">4.3  Java项目中调用本地大模型</h4>
<p>① 添加依赖</p>
<blockquote>
<p>我们这里是同过ollama部署的<code>deepseek</code> ,所以要添加如下依赖</p>
</blockquote>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.ai&lt;/groupId&gt;
    &lt;artifactId&gt;spring-ai-ollama-spring-boot-starter&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<p>② 配置 DeepSeek API</p>
<p>在 <code>application.properties</code> 或 <code>application.yml</code> 文件中，配置 <code>DeepSeek</code> 的请求 URL及模型</p>
<pre><code class="language-yaml">spring:
  ai:
    ollama:
      base-url: http://localhost:11434
      chat:
        model: deepseek-r1:8b  # 本地部署的大模型
</code></pre>
<p>③编写接口</p>
<blockquote>
<p>为了模仿官方<code>deepseek</code>对话模型，这里接口书写方式我们采用流式输出方式</p>
</blockquote>
<pre><code class="language-java">@RestController
@RequestMapping("/ai")
@CrossOrigin(origins = "*")
public class DeepSeekController {
    private static final Logger logger = LoggerFactory.getLogger(DeepSeekController.class);

    private final ChatClient chatclient;

    public DeepSeekController(ChatClient.Builder chatClientBuilder) {
        this.chatclient = chatClientBuilder.build();
    }

    @GetMapping(value = "/chat", produces = MediaType.TEXT_EVENT_STREAM_VALUE + ";charset=UTF-8")
    public ResponseEntity&lt;Flux&lt;String&gt;&gt; chat(@RequestParam(value="message") String message) {
        try {
            Flux&lt;String&gt; response = chatclient.prompt(message).stream().content();
            // 打印响应数据
            response.subscribe(data -&gt; logger.info("Response data: {}", data));
            return ResponseEntity.ok()
                    .contentType(MediaType.TEXT_EVENT_STREAM) // 设置内容类型为文本事件流
                    .header(HttpHeaders.CONTENT_ENCODING, "utf-8") // 设置字符编码
                    .body(response);
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
}
</code></pre>
<p>④ 测试</p>
<blockquote>
<p>为了演示流式数据输出调用，晓凡用<code>element-ui</code>+<code>vue</code>仿照微信聊天界面写了一个简单调用页面，效果如下所示</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202502/2381533-20250224210941510-339155083.png" alt="流式输出效果" loading="lazy"></p>
<h3 id="五代码下载">五、代码下载</h3>
<p>以上涉及到的demo 晓凡已经将代码上传到gitee,感兴趣的小伙伴可以</p>
<p>gitee: <a href="https://gitee.com/xiezhr/deepseek-chat-demo.git" target="_blank" rel="noopener nofollow">https://gitee.com/xiezhr/deepseek-chat-demo.git</a></p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202502/2381533-20250224210941557-2107909478.png" alt="gitee地址" loading="lazy"></p>
<p>本期内容到这儿就结束了，希望对您有所帮助！</p>
<p>我们下期再见 ヾ(•ω•`)o  (●'◡'●)</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/xiezhr/" target="_blank">程序员晓凡</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/xiezhr/p/18734902" target="_blank">https://www.cnblogs.com/xiezhr/p/18734902</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.04077202582291667" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-24 21:18">2025-02-24 21:17</span>&nbsp;
<a href="https://www.cnblogs.com/xiezhr">程序员晓凡</a>&nbsp;
阅读(<span id="post_view_count">6</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18734902" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18734902);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18734902', targetLink: 'https://www.cnblogs.com/xiezhr/p/18734902', title: 'spring官宣接入deepseek，真的太香了~' })">举报</a>
</div>
        