
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/FreakEmbedded/p/18836367" title="发布于 2025-04-20 01:17">
    <span role="heading" aria-level="2">一文速通Python并行计算：08 Python多进程编程-multiprocessing模块、进程的创建命名、获取进程ID、创建守护进程和进程的终止</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/2591203/202504/2591203-20250420011658876-918002183.png" alt="一文速通Python并行计算：08 Python多进程编程-multiprocessing模块、进程的创建命名、获取进程ID、创建守护进程和进程的终止" class="desc_img">
        本节介绍 Python 中 multiprocessing 模块的基本用法，包括如何创建和命名子进程、获取进程 ID、设置守护进程（daemon）以及安全地终止进程，帮助实现多进程并发编程以提升程序性能。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="一文速通-python-并行计算08-python-多进程编程-multiprocessing-模块进程的创建命名获取进程-id创建守护进程和进程的终止">一文速通 Python 并行计算：08 Python 多进程编程-multiprocessing 模块、进程的创建命名、获取进程 ID、创建守护进程和进程的终止</h1>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202504/2591203-20250416003327388-1352068275.png" alt="image" loading="lazy"></p>
<h1 id="摘要"><strong>摘要：</strong></h1>
<p>本节介绍 Python 中 multiprocessing 模块的基本用法，包括如何创建和命名子进程、获取进程 ID、设置守护进程（daemon）以及安全地终止进程，帮助实现多进程并发编程以提升程序性能。</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250321010016257-450656136.png" alt="image" loading="lazy"></p>
<blockquote>
<p><strong>关于我们更多介绍可以查看云文档：</strong><a href="https://f1829ryac0m.feishu.cn/docx/SGvHdRW1eoxgGIxwIjacX7SVnVb?from=from_copylink" target="_blank" rel="noopener nofollow">Freak 嵌入式工作室云文档</a><strong>，或者访问我们的 wiki：****<a href="https://github.com/leezisheng/Doc/wik" target="_blank" rel="noopener nofollow">https://github.com/leezisheng/Doc/wik</a></strong></p>
</blockquote>
<h1 id="原文链接"><strong>原文链接：</strong></h1>
<p><a href="https://www.cnblogs.com/FreakEmbedded" target="_blank"><strong>FreakStudio的博客</strong></a></p>
<h1 id="往期推荐"><strong>往期推荐：</strong></h1>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzkwMTYzNTY3Ng==&amp;mid=2247483825&amp;idx=1&amp;sn=149aaf3baa6a96703713e554d4a888db&amp;chksm=c0b08a82f7c70394074a24b722a1caddb0ad598a7303e61133216ae61423df0b5bc57a6b82b2&amp;scene=21#wechat_redirect" title="**学嵌入式的你，还不会面向对象？？！**" target="_blank" rel="noopener nofollow"><strong>学嵌入式的你，还不会面向对象？？！</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/sycnlnMhtFji8q2fYh0MFQ" title="**全网最适合入门的面向对象编程教程：00 面向对象设计方法导论**" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：00 面向对象设计方法导论</strong></a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzkwMTYzNTY3Ng==&amp;mid=2247483853&amp;idx=1&amp;sn=c7685237216b8dd1cadf95f3353fde8e&amp;chksm=c0b08afef7c703e8ce7b76958718ebe381220a199fac9e872710ea1cb4f8fc6f93d36d151279&amp;scene=21#wechat_redirect" title="**全网最适合入门的面向对象编程教程：01 面向对象编程的基本概念**" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：01 面向对象编程的基本概念</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/XKpEAGY9WJ7GRFc98E6dcw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：02 类和对象的 Python 实现-使用 Python 创建类</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/LsNtLbHLNtVBtiQ3eaJnSg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：03 类和对象的 Python 实现-为自定义类添加属性</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/A5rMO3ppTZTUwRPL2NQxdg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：04 类和对象的Python实现-为自定义类添加方法</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/YjM1JPzLakfyWiDkyy4LQw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：05 类和对象的Python实现-PyCharm代码标签</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/z7CmgHJXf0QlAgIIRRTXlw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：06 类和对象的Python实现-自定义类的数据封装</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/7r4hgM3a187si_D5ReEMCA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：07 类和对象的Python实现-类型注解</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/sSO-L_NQHarXh160xiVZVg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：08 类和对象的Python实现-@property装饰器</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/cAZzXr9MSL0nVxVcTgNlQA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：09 类和对象的Python实现-类之间的关系</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/29Lr_nigsMuIJMmWEObk1g" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：10 类和对象的Python实现-类的继承和里氏替换原则</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/HEvQNiVXkjlnbhz8Sdt_4Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：11 类和对象的Python实现-子类调用父类方法</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/QHYLu7Mrs2ErUHvy_k59QA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：12 类和对象的Python实现-Python使用logging模块输出程序运行日志</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/EbJJpqIq8v_eRQZfdWONFA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：13 类和对象的Python实现-可视化阅读代码神器Sourcetrail的安装使用</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/fLSGXknzwY8FHzavunfQXg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：全网最适合入门的面向对象编程教程：14 类和对象的Python实现-类的静态方法和类方法</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/fLSGXknzwY8FHzavunfQXg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：15 类和对象的 Python 实现-__slots__魔法方法</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/VNlMnPhSyglZ9FalqIfw-A" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：16 类和对象的Python实现-多态、方法重写与开闭原则</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/mffQ0sdsI5yt_tJrZRxe-g" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：17 类和对象的Python实现-鸭子类型与“file-like object“</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/JSIKlWJ4pNShBGkfXolkQg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：18 类和对象的Python实现-多重继承与PyQtGraph串口数据绘制曲线图</strong></a></p>
<p><a href="https://www.cnblogs.com/FreakEmbedded/p/18308599" target="_blank"><strong>全网最适合入门的面向对象编程教程：19 类和对象的 Python 实现-使用 PyCharm 自动生成文件注释和函数注释</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/_TuErM5YRBsy2wixYbbbkw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：20 类和对象的Python实现-组合关系的实现与CSV文件保存</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/zqG3vuxVq0pmUqrV-tztng" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：21 类和对象的Python实现-多文件的组织：模块module和包package</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/Wj5ovLUWqKudW5VSiycK5A" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：22 类和对象的Python实现-异常和语法错误</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/o5cgglFtmr9q3lW5gAiYEg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：23 类和对象的Python实现-抛出异常</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/DPC8Drr6iCnC0j-YMGyOfg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：24 类和对象的Python实现-异常的捕获与处理</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/ghhS3fk98LTkh1a-daEg0Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：25 类和对象的Python实现-Python判断输入数据类型</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/LHj-igDSYaL_1z8H7VEj1Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：26 类和对象的Python实现-上下文管理器和with语句</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/tQ2NHEWCMI4e4AG5BBsSpw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：27 类和对象的Python实现-Python中异常层级与自定义异常类的实现</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/rvHzNvuovU-3KY2FtcQK-Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：28 类和对象的Python实现-Python编程原则、哲学和规范大汇总</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/swfA2JsajMFpaOa5PZCEbg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：29 类和对象的Python实现-断言与防御性编程和help函数的使用</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/5NxKSJUxetAkdwYW9n941w" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：30 Python的内置数据类型-object根类</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/Z3AMqnfkmhqzcK3A-J3ylw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：31 Python的内置数据类型-对象Object和类型Type</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/C4pj9ujGsQMMOnLEqI414A" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：32 Python的内置数据类型-类Class和实例Instance</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/V_3QFDJRss_lAJHgJ4oVwg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：33 Python的内置数据类型-对象Object和类型Type的关系</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/crZBcEEBKBfDfWA9ub-d-A" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：34 Python的内置数据类型-Python常用复合数据类型：元组和命名元组</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/_X7sKhro7wJ96KwhbAcopg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：35 Python的内置数据类型-文档字符串和__doc__属性</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/KCvCx7Im35uiBkPpJASTkg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：36 Python的内置数据类型-字典</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/bNSPkIhKgmzLFz5BYdizNQ" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：37 Python常用复合数据类型-列表和列表推导式</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/XgTr4hvBC4Uk2hPmaDRn2Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：38 Python常用复合数据类型-使用列表实现堆栈、队列和双端队列</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/Cx0--RZGrzud_aILXTlEJg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：39 Python常用复合数据类型-集合</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/bCxbepaVypefwEOtKnzb5g" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：40 Python常用复合数据类型-枚举和enum模块的使用</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/Ah-fhWf67Jm7TF-OGooy-g" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：41 Python常用复合数据类型-队列（FIFO、LIFO、优先级队列、双端队列和环形队列）</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/XkIocfNXpie-65voC4W8wA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：42 Python常用复合数据类型-collections容器数据类型</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/ODYRdwzdlcBQkCE3xpYjIA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：43 Python常用复合数据类型-扩展内置数据类型</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/DLylf2L_dpkcXYw6iFnhwA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：44 Python内置函数与魔法方法-重写内置类型的魔法方法</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/AEyP4BfRGZB63akTgGLWZw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：45 Python实现常见数据结构-链表、树、哈希表、图和堆</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/3COyHC1ob9xs_EUQtk7hCA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：46 Python函数方法与接口-函数与事件驱动框架</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/wmc2ZcSC3l5JOLpMpthv6Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：47 Python函数方法与接口-回调函数Callback</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/MEvlZqaItRNwP4zRtMQHhQ" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：48 Python函数方法与接口-位置参数、默认参数、可变参数和关键字参数</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/qDQo9KxfGrTj5-FDo-MBiA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：49 Python函数方法与接口-函数与方法的区别和lamda匿名函数</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/DwKug8eHOYyC2pE77eLw9w" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：50 Python函数方法与接口-接口和抽象基类</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/pDQWfDDh3WeCgjC5b5rP1Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：51 Python函数方法与接口-使用Zope实现接口</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/Wgqc8PbpMMf8pKFHo4H7PA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：52 Python函数方法与接口-Protocol协议与接口</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/jvOLalgkUpxR7LGgQnJ9aQ" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：53 Python字符串与序列化-字符串与字符编码</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/z3JS3dcpPQTD9ygWyxRUDg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：54 Python字符串与序列化-字符串格式化与format方法</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/C0rgRhmC1ydh2PpEwAuMlw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：55 Python字符串与序列化-字节序列类型和可变字节字符串</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/UmXPSAbrLvYyH-45kBHLZQ" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：56 Python字符串与序列化-正则表达式和re模块应用</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/-Y8DX8wo1OAhKkWK7dikzg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：57 Python字符串与序列化-序列化与反序列化</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/BFTYNXXtXarbU70RvOs20Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：58 Python字符串与序列化-序列化Web对象的定义与实现</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/cgs1FP0bRMvqXv00J1AzkA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：59 Python并行与并发-并行与并发和线程与进程</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/plVWoeJY-W4Yhm25jrt9yw" target="_blank" rel="noopener nofollow"><strong>一文速通Python并行计算：00 并行计算的基本概念</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/SJx4UHy_Ql0gnz_PklWaRg" target="_blank" rel="noopener nofollow"><strong>一文速通Python并行计算：01 Python多线程编程-基本概念、切换流程、GIL锁机制和生产者与消费者模型</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/wc3Vu_Ymzuq4cJFz5g5L0A" target="_blank" rel="noopener nofollow"><strong>一文速通Python并行计算：02 Python多线程编程-threading模块、线程的创建和查询与守护线程</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/LBNCaDv-PhNEkpT_hTqtGA" target="_blank" rel="noopener nofollow"><strong>一文速通Python并行计算：03 Python多线程编程-多线程同步（上）—基于互斥锁、递归锁和信号量</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/oaMad4LndD8517WdWwCeng" target="_blank" rel="noopener nofollow"><strong>一文速通Python并行计算：04 Python多线程编程-多线程同步（下）—基于条件变量、事件和屏障</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/Dh4-nFCj6fEYzt0DloNVNA" target="_blank" rel="noopener nofollow"><strong>一文速通Python并行计算：05 Python多线程编程-线程的定时运行</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/vnBkExVk6IPuXP81NxR5HA" target="_blank" rel="noopener nofollow"><strong>一文速通Python并行计算：06 Python多线程编程-基于队列进行通信</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/8QeUDrREakdMTYsxYuHLdA" target="_blank" rel="noopener nofollow"><strong>一文速通Python并行计算：07 Python多线程编程-线程池的使用和多线程的性能评估</strong></a></p>
<h1 id="更多精彩内容可看"><strong>更多精彩内容可看：</strong></h1>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzkwMTYzNTY3Ng==&amp;mid=2247483747&amp;idx=1&amp;sn=0e203586516fd6e925085b9c1244dbee&amp;scene=21#wechat_redirect" title="**给你的 Python 加加速：一文速通 Python 并行计算**" target="_blank" rel="noopener nofollow"><strong>给你的 Python 加加速：一文速通 Python 并行计算</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzkwMTYzNTY3Ng==&amp;mid=2247483719&amp;idx=1&amp;sn=7ece9da65d002fdc3df9539cc43f3a8d&amp;scene=21#wechat_redirect" title="**一文搞懂 CM3 单片机调试原理**" target="_blank" rel="noopener nofollow"><strong>一文搞懂 CM3 单片机调试原理</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzkwMTYzNTY3Ng==&amp;mid=2247483671&amp;idx=1&amp;sn=c267a0c6f4ab93d6b6d934bf803b5919&amp;scene=21#wechat_redirect" title="**肝了半个月，嵌入式技术栈大汇总出炉**" target="_blank" rel="noopener nofollow"><strong>肝了半个月，嵌入式技术栈大汇总出炉</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzkwMTYzNTY3Ng==&amp;mid=2247483774&amp;idx=1&amp;sn=46d57506febe92c1719c8567ebe95269&amp;scene=21#wechat_redirect" title="**电子计算机类比赛的“武林秘籍”**" target="_blank" rel="noopener nofollow"><strong>电子计算机类比赛的“武林秘籍”</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzkwMTYzNTY3Ng==&amp;mid=2247483854&amp;idx=1&amp;sn=fd666dc501a0de850abfbd8793abff00&amp;chksm=c0b08afdf7c703eb494f8e402a5d60eba9a802bfdb02c07a5e1666a8a1b335e38240adc6c1b5&amp;scene=21#wechat_redirect" title="**一个MicroPython的开源项目集锦：awesome-micropython，包含各个方面的Micropython工具库**" target="_blank" rel="noopener nofollow"><strong>一个MicroPython的开源项目集锦：awesome-micropython，包含各个方面的Micropython工具库</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/2-Z6WqekVOuDbEdiE65Wfw" target="_blank" rel="noopener nofollow"><strong>Avnet ZUBoard 1CG开发板—深度学习新选择</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/WrFVqS2-s1g6RYNd_Q5CDA" target="_blank" rel="noopener nofollow"><strong>工程师不要迷信开源代码，还要注重基本功</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/FUzf9kAHABNfo2aZh1jHzA" target="_blank" rel="noopener nofollow"><strong>什么？配色个性化的电机驱动模块？！！</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/TNsGwgi0pdE9v-tY4FZu6w" target="_blank" rel="noopener nofollow"><strong>什么？XIAO主控新出三款扩展板!</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/0jIkDXaGKFOn2o03wUmUmQ" target="_blank" rel="noopener nofollow"><strong>手把手教你实现Arduino发布第三方库</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/7n7tYqg5GVHvRC9TUi50MA" target="_blank" rel="noopener nofollow"><strong>万字长文手把手教你实现MicroPython/Python发布第三方库</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/nxKpy35t-ueg4KSTCu0_TQ" target="_blank" rel="noopener nofollow"><strong>一文速通电子设计大赛，电子人必看的获奖秘籍</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/492GMMgNKbIr1n3G6NX7Xg" target="_blank" rel="noopener nofollow"><strong>一文速通光电设计大赛，电子人必看！</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/9Xxc0lF5aA4rVVcwhdnpHQ" target="_blank" rel="noopener nofollow"><strong>工科比赛“无脑”操作指南：知识学习硬件选购→代码调试→报告撰写的保姆级路线图</strong></a></p>
<h1 id="文档获取"><strong>文档获取：</strong></h1>
<p>可访问如下链接进行对文档下载：</p>
<p><a href="https://github.com/leezisheng/Doc" target="_blank" rel="noopener nofollow">https://github.com/leezisheng/Doc</a></p>
<p>该文档是一份关于 <strong>并行计算</strong> 和 <strong>Python 并发编程</strong> 的学习指南，内容涵盖了并行计算的基本概念、Python 多线程编程、多进程编程以及协程编程的核心知识点：</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250321010038855-257589202.png" alt="image" loading="lazy"></p>
<h1 id="正文"><strong>正文</strong></h1>
<p>Python 中的多线程无法利用多核优势，如果想要充分地使用多核 CPU 的资源，在 python 中大部分情况需要使用多进程。Python 提供了 <code>multiprocessing</code> 模块用来开启子进程，并在子进程中执行我们定制的任务（比如函数），该模块与多线程模块 threading 的编程接口类似。<code>multiprocessing</code> 模块的功能众多：支持子进程、通信和共享数据、执行不同形式的同步，提供了 <code>Process</code>、<code>Queue</code>、<code>Pipe</code>、<code>Lock</code> 等组件。</p>
<h1 id="1进程的创建">1.进程的创建</h1>
<p>首先我们看一下 <code>multiprocessing.Process</code> 对象：</p>
<pre><code class="language-bash">class multiprocessing.Process(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)
</code></pre>
<p>其中：</p>
<pre><code class="language-bash">group ：应该始终是 None ；它仅用于兼容 threading.Thread 。 
target ：是由 run() 方法调用的可调用对象。它默认为 None ，意味着什么都没有被调用。 
name ：是进程名称（有关详细信息，请参阅 name ）。 
args ：是目标调用的参数元组。 args 参数默认值为 ()，可被用来指定要传递给 target 的参数列表或元组。
Kwargs：是目标调用的关键字参数字典。
daemon：将进程 daemon 标志设置为 True 或 False 。如果是 None （默认值），则该标志将从创建的进程继承。
</code></pre>
<h2 id="11-调用-process-类的构造器创建进程">1.1 调用 Process 类的构造器创建进程</h2>
<p><code>Process</code> 类提供了 <code>__init__()</code> 构造器，可以用来创建进程，其常见启动进程的方法包括：</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202504/2591203-20250420011251547-889537054.png" alt="image" loading="lazy"></p>
<p>进程的属性包括：</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202504/2591203-20250420011254445-1988636343.png" alt="image" loading="lazy"></p>
<p>这里，我们进行进程创建和启动的测试，代码如下：</p>
<pre><code>from multiprocessing import  Process

def fun1(name):
    print('测试%s多进程' %name)

if __name__ == '__main__':
    process_list = []
    for i in range(5):  _#开启5个子进程执行fun1函数_
        p = Process(target=fun1,args=('Python',)) _#实例化进程对象_
        p.start()
        process_list.append(p)

    for i in process_list:
        p.join()

    print('结束测试')
</code></pre>
<p>上面的代码开启了 5 个子进程去执行函数，我们可以观察结果，是同时打印的，这里实现了真正的并行操作，就是多个 CPU 同时执行任务。</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202504/2591203-20250420011259525-1805179103.png" alt="image" loading="lazy"></p>
<p>我们知道进程是 python 中最小的资源分配单元，也就是进程中间的数据，内存是不共享的，每启动一个进程，都要独立分配资源和拷贝访问的数据，所以进程的启动和销毁的代价是比较大了。<strong>注意，使用进程对象调用 <strong><strong>join()</strong></strong> 方法。如果没有 <strong><strong>join()</strong></strong> ，主进程退出之后子进程会留在<strong><strong>idle</strong></strong>中，你必须手动杀死它们。</strong></p>
<h2 id="12-继承-process-类创建进程类">1.2 继承 Process 类创建进程类</h2>
<p>如果子类重写构造函数，它必须确保它在对进程执行任何其他操作之前调用基类构造函数 <code>Process.__init__()</code> ，同时，对于 <code>run()</code> 方法，可以查看官方文档：</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202504/2591203-20250420011304736-854602217.png" alt="image" loading="lazy"></p>
<p>这里，测试代码如下：</p>
<pre><code>from multiprocessing import  Process

class MyProcess(Process): _#继承Process类_
    def __init__(self,name):
        super(MyProcess,self).__init__()
        self.name = name
    def run(self):
        print('测试%s多进程' % self.name)

if __name__ == '__main__':
    process_list = []
    for i in range(5):  _#开启5个子进程执行fun1函数_
        p = MyProcess('Python') _#实例化进程对象_
        p.start()
        process_list.append(p)

    for i in process_list:
        p.join()

    print('结束测试')
</code></pre>
<p>结果如下，效果和第一种方式一样：</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202504/2591203-20250420011309128-1706932767.png" alt="image" loading="lazy"></p>
<p><strong>注意：在 windows 中<strong><strong>Process()</strong></strong>必须放到<strong><strong>if name == '<strong>main</strong>':</strong></strong>下</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202504/2591203-20250420011313053-13672688.png" alt="image" loading="lazy"></p>
<p>通过在 <strong>main</strong> 代码块中实例化进程对象，我们可以预防无限递归调用。最佳实践是在不同的脚本文件中定义目标函数，然后导入进来使用。</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202504/2591203-20250420011316355-1582718935.png" alt="image" loading="lazy"></p>
<h1 id="2进程的命名">2.进程的命名</h1>
<p>在上一节的例子中，我们创建了一个进程，并为其分配了目标函数和函数变量。然而如果能给进程分配一个名字，那么 debug 的时候就更方便了。</p>
<p><code>current_process()</code> 可以返回返回与当前进程相对应的 Process 对象。下面的代码在主程序中创建了一个有名字的进程和一个没有名字的进程，目标函数都是 <code>foo()</code> 函数。</p>
<pre><code>import multiprocessing
import time

def foo():
    name = multiprocessing.current_process().name
    print("Starting %s \n" % name)
    time.sleep(3)
    print("Exiting %s \n" % name)

if __name__ == '__main__':
    process_with_name = multiprocessing.Process(name='foo_process', target=foo)
    process_with_default_name = multiprocessing.Process(target=foo)
    process_with_name.start()
    process_with_default_name.start()
</code></pre>
<p>如下为运行结果：</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202504/2591203-20250420011322103-560456340.png" alt="image" loading="lazy"></p>
<h1 id="3获取进程的-pid">3.获取进程的 PID</h1>
<p>进程控制符（PID），英文全称为 Process Identifier。也常被称为进程标识符。顾名思义，它是各进程的身份标识,程序一运行系统就会自动分配给进程一个独一无二的 PID。进程中止后 PID 被系统回收，可能会被继续分配给新运行的程序。</p>
<p>这里可以使用 <code>current_process().pid</code> 获取当前进程的 PID。将如上代码中 <code>current_process().name</code> 改为 <code>current_process().pid</code>，可得：</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202504/2591203-20250420011327390-1563414083.png" alt="image" loading="lazy"></p>
<h1 id="4守护进程">4.守护进程</h1>
<p>守护进程是一种进程驻留内存的后台进程，<strong>它脱离终端控制，不受终端信号影响</strong>，即 Ctrl+C，通常守护进程用于周期性的执行某种任务或持续等待处理某些发生的事件。<strong>当主进程终止时，守护进程随机终止（本质上是在主进程结束之前结束的,主进程需要负责回收资源）。</strong></p>
<p>如果需要处理比较巨大的任务，又不需要人为干预，将其作为后台进程执行是个非常常用的编程模型。此进程又可以和其他进程并发执行。通过 Python 的 <code>multiprocessing</code> 模块的后台进程选项，我们可以让进程在后台运行。</p>
<p>为了在后台运行进程，我们设置 <code>daemon</code> 参数为 <code>True</code>：</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202504/2591203-20250420011331858-1199090442.png" alt="image" loading="lazy"></p>
<p>代码如下：</p>
<pre><code>import multiprocessing
import time

def foo():
    name = multiprocessing.current_process().name
    print("Starting %s " % name)
    time.sleep(3)
    print("Exiting %s " % name)

if __name__ == '__main__':
    background_process = multiprocessing.Process(name='background_process', target=foo)
    background_process.daemon = True
    NO_background_process = multiprocessing.Process(name='NO_background_process', target=foo)
    NO_background_process.daemon = False
    background_process.start()
    NO_background_process.start()
</code></pre>
<p>运行结果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202504/2591203-20250420011338777-2104066877.png" alt="image" loading="lazy"></p>
<p>在非后台运行的进程会看到一个输出，后台运行的没有输出，后台运行进程在主进程结束之后会自动结束。</p>
<h1 id="5进程的终止">5.进程的终止</h1>
<p>我们可以使用 <code>terminate()</code> 方法立即杀死一个进程。另外，我们可以使用 <code>is_alive()</code> 方法来判断一个进程是否还存活：</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202504/2591203-20250420011342732-706448753.png" alt="image" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202504/2591203-20250420011345676-1727256266.png" alt="image" loading="lazy"></p>
<p>在本例中，创建一个目标函数为 <code>foo()</code> 的进程。启动之后，我们通过 <code>terminate()</code> 方法杀死它。</p>
<pre><code>import multiprocessing
import time

def foo():
        print('Starting function')
        time.sleep(0.1)
        print('Finished function')

if __name__ == '__main__':
        p = multiprocessing.Process(target=foo)
        print('Process before execution:', p, p.is_alive())
        p.start()
        print('Process running:', p, p.is_alive())
        p.terminate()
        print('Process terminated:', p, p.is_alive())
        p.join()
        print('Process joined:', p, p.is_alive())
        print('Process exit code:', p.exitcode)
</code></pre>
<p>运行结果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202504/2591203-20250420011349996-315871687.png" alt="image" loading="lazy"></p>
<p>我们创建了一个线程，然后用 <code>is_alive()</code> 方法监控它的生命周期。然后通过调用 <code> terminate()</code> 方法结束进程。最后，我们通过读进程的 ExitCode 状态码（status code）验证进程已经结束。</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202504/2591203-20250420011353484-352533661.png" alt="image" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202504/2591203-20250420011357058-1725642287.png" alt="image" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.04314612544212963" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-20 01:17">2025-04-20 01:17</span>&nbsp;
<a href="https://www.cnblogs.com/FreakEmbedded">FreakStudio</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18836367);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18836367', targetLink: 'https://www.cnblogs.com/FreakEmbedded/p/18836367', title: '一文速通Python并行计算：08 Python多进程编程-multiprocessing模块、进程的创建命名、获取进程ID、创建守护进程和进程的终止' })">举报</a>
</div>
        