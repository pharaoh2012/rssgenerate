
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/makemylife/p/18686809" title="发布于 2025-01-22 21:09">
    <span role="heading" aria-level="2">对象池框架 commons pool2 原理与实践</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>当资源对象的创建/销毁比较耗时的场景下，可以通过"<strong>池化</strong>"技术，达到资源的复用，以此来减少系统的开销、增大系统吞吐量，比如数据库连接池、线程池、Redis 连接池等都是使用的该方式。</p>
<p>Apache Commons Pool 提供了通用对象池的实现，用于管理和复用对象，以提高系统的性能和资源利用率。</p>
<p><img src="https://img2024.cnblogs.com/blog/2487169/202501/2487169-20250122210752617-1945141209.png" alt="" loading="lazy"></p>
<h1 id="1-基础用法">1 基础用法</h1>
<h2 id="11-添加依赖">1.1 添加依赖</h2>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
    &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;
    &lt;version&gt;2.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="12-定义对象工厂">1.2 定义对象工厂</h2>
<p><code>PooledObjectFactory </code>是一个池化对象工厂接口，定义了生成对象、激活对象、钝化对象、销毁对象的方法，如下：</p>
<pre><code class="language-java">public interface PooledObjectFactory&lt;T&gt; {

  /**
   * Creates an instance that can be served by the pool and wrap it in a
   */
  PooledObject&lt;T&gt; makeObject() throws Exception;

  /**
   * Destroys an instance no longer needed by the pool
   */
  void destroyObject(PooledObject&lt;T&gt; p) throws Exception;

  /**
   * Ensures that the instance is safe to be returned by the pool
   */
  boolean validateObject(PooledObject&lt;T&gt; p);

  /**
   * Reinitializes an instance to be returned by the pool
   */
  void activateObject(PooledObject&lt;T&gt; p) throws Exception;
  
  /**
   * Uninitializes an instance to be returned to the idle object pool
   */
  void passivateObject(PooledObject&lt;T&gt; p) throws Exception;
}
</code></pre>
<p>以下是一个简单的示例：</p>
<ol>
<li><strong>定义需要池化的对象 MyObject</strong></li>
</ol>
<pre><code class="language-java">public class MyObject {

    private String uid = UUID.randomUUID().toString();

    private volatile boolean valid = true;

    public void initialize() {
        System.out.println("初始化对象" + uid);
        valid = true;
    }

    public void destroy() {
        System.out.println("销毁对象" + uid);
        valid = false;
    }

    public boolean isValid() {
        return valid;
    }

    public String getUid() {
        return uid;
    }

}
</code></pre>
<ol start="2">
<li><strong>定义对象工厂</strong></li>
</ol>
<pre><code class="language-java">public class MyObjectFactory implements PooledObjectFactory&lt;MyObject&gt; {

    @Override
    public PooledObject&lt;MyObject&gt; makeObject() throws Exception {
        // 创建一个新对象
        MyObject object = new MyObject();
        // 初始化对象
        object.initialize();
        return new DefaultPooledObject&lt;&gt;(object);
    }

    @Override
    public void destroyObject(PooledObject&lt;MyObject&gt; p) throws Exception {
        // 销毁对象
        p.getObject().destroy();
    }

    @Override
    public boolean validateObject(PooledObject&lt;MyObject&gt; p) {
        return p.getObject().isValid();
    }

    @Override
    public void activateObject(PooledObject&lt;MyObject&gt; p) throws Exception {
    }

    @Override
    public void passivateObject(PooledObject&lt;MyObject&gt; p) throws Exception {
    }

}
</code></pre>
<h2 id="13-配置对象池">1.3 配置对象池</h2>
<p>创建 <code>GenericObjectPool</code> 对象，并设置相关参数，如最大对象数量、最小空闲对象数量等。</p>
<pre><code class="language-java">GenericObjectPoolConfig config = new GenericObjectPoolConfig();
config.setMaxTotal(20);
config.setMaxIdle(5);
config.setTestWhileIdle(true);
config.setMinEvictableIdleTimeMillis(60000L);
GenericObjectPool&lt;MyObject&gt; pool = new GenericObjectPool&lt;&gt;(new MyObjectFactory(), config);
</code></pre>
<h2 id="14-借用和归还对象">1.4 借用和归还对象</h2>
<pre><code class="language-java">MyObject myObject = null;
try {
    myObject = pool.borrowObject();
    System.out.println("get对象" + myObject.getUid() +  " thread:" + Thread.*currentThread*().getName());
} catch (Exception e) {
    e.printStackTrace();
} finally {
    try {
        if (myObject != null) {
            pool.returnObject(myObject);
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}
</code></pre>
<h1 id="2-jedis-连接池">2 Jedis 连接池</h1>
<p>Jedis 是一个 Java 语言的 Redis 客户端库。它提供了一组易于使用的 API，可以用来连接和操作 Redis 数据库。</p>
<p>它的内部使用 Commons Pool 来管理 Redis 连接 ，我们使用 jedis 3.3.0 版本写一个简单的示例。</p>
<pre><code class="language-java">public class JedisMain {
    public static void main(String[] args) throws Exception{
        // 创建连接池配置
        JedisPoolConfig config = new JedisPoolConfig();
        config.setMaxTotal(100);
        config.setMaxIdle(20);
        // 创建连接池
        JedisPool pool = new JedisPool(config, "localhost", 6379);
        // 获取连接
        Jedis jedis = pool.getResource();
        jedis.set("hello" , "张勇");
        // 使用连接
        String value = jedis.get("hello");
        System.out.println(value);
        // 归还连接
        jedis.close();
        // 关闭连接池
        // pool.close();
        Thread.sleep(5000);
    }
}
</code></pre>
<p>如下图，JedisFactory 实现了对象工厂，实现了<strong>创建对象</strong>、<strong>销毁对象</strong>、<strong>验证对象</strong>、<strong>激活对象</strong>四个方法。</p>
<p><img src="https://img2024.cnblogs.com/blog/2487169/202501/2487169-20250122210752478-676020016.png" alt="" loading="lazy"></p>
<p>比如验证对象方法，逻辑是调用 Jedis 的 ping 方法，判断该连接是否存活。</p>
<h1 id="3-原理解析">3 原理解析</h1>
<p>我们重点解析 <strong>GenericObjectPool</strong> 类的原理。</p>
<h2 id="31-初始化">3.1 初始化</h2>
<pre><code class="language-java">public GenericObjectPool(
            final PooledObjectFactory&lt;T&gt; factory,
            final GenericObjectPoolConfig&lt;T&gt; config) {
     super(config, ONAME_BASE, config.getJmxNamePrefix());
     if (factory == null) {
          jmxUnregister(); // tidy up
          throw new IllegalArgumentException("factory may not be null");
     }
     this.factory = factory;
     idleObjects = new LinkedBlockingDeque&lt;&gt;(config.getFairness());
     setConfig(config);
 }

 private final Map&lt;IdentityWrapper&lt;T&gt;, PooledObject&lt;T&gt;&gt; allObjects =
        new ConcurrentHashMap&lt;&gt;();
</code></pre>
<p>初始化做三件事情：</p>
<ol>
<li>
<p>初始化 JedisFactory 工厂对象。</p>
</li>
<li>
<p>对象容器 <strong>idleObjects</strong> , 类型是 <strong>LinkedBlockingDeque</strong> 。</p>
<p>因此存储容器有两个，所有的对象 allObjects 和空闲对象 idleObjects （可以直接取出使用）。</p>
</li>
<li>
<p>配置对象池属性 。</p>
</li>
</ol>
<h2 id="32-创建对象">3.2 创建对象</h2>
<p>我们关注 GenericObjectPool 类的 <strong>borrowObject</strong> 方法。</p>
<p><img src="https://img2024.cnblogs.com/blog/2487169/202501/2487169-20250122210753762-694157826.png" alt="" loading="lazy"></p>
<p>逻辑其实很简单 ：</p>
<ol>
<li>
<p>从容器中获取第一个条目对象，若没有获取，则调用工厂对象的创建对象方法，并将该对象加入到全局对象 Map。</p>
</li>
<li>
<p>创建成功后，调用对象的激活方法，接着验证对象的可靠性，最后将对象返回。</p>
</li>
</ol>
<h2 id="33-归还连接">3.3 归还连接</h2>
<p><img src="https://img2024.cnblogs.com/blog/2487169/202501/2487169-20250122210753569-1245949649.png" alt="" loading="lazy"></p>
<p>流程如下：</p>
<ol>
<li>判断返还对象时是否校验，假如校验失败，则销毁该对象，将该对象从存储容器中删除 ；</li>
<li>调用工厂对象的激活对象方法 ；</li>
<li>若空闲对象 Map 元素大小达到最大值，则销毁该对象，将该对象从存储容器中删除 ；</li>
<li>正常将对象放回到空闲对象容器 <strong>idleObjects</strong> 。</li>
</ol>
<hr>
<blockquote>
<p>参考资料：</p>
<p><a href="https://github.com/redis/jedis/wiki/Getting-started" target="_blank" rel="noopener nofollow">https://github.com/redis/jedis/wiki/Getting-started</a></p>
<p><a href="https://github.com/apache/commons-pool" target="_blank" rel="noopener nofollow">https://github.com/apache/commons-pool</a></p>
</blockquote>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.6314747805451388" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-22 21:10">2025-01-22 21:09</span>&nbsp;
<a href="https://www.cnblogs.com/makemylife">勇哥编程游记</a>&nbsp;
阅读(<span id="post_view_count">48</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18686809" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18686809);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18686809', targetLink: 'https://www.cnblogs.com/makemylife/p/18686809', title: '对象池框架 commons pool2 原理与实践' })">举报</a>
</div>
        