
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/12lisu/p/18883200" title="发布于 2025-05-19 09:23">
    <span role="heading" aria-level="2">数据脱敏的这6种方案，真香！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>某次新来的同事，在开发环境执行了这样的代码：</p>
<pre><code class="language-java">// 反例：直接将生产数据同步到测试环境  
public void syncUserToTest(User user) {  
    testDB.insert(user); // 包含手机号、身份证等敏感字段  
}
</code></pre>
<p>直接将生产的数据，比如：手机号、身份证等敏感字段，同步到了测试环境。</p>
<p>结果1天后，受到了公司领导的批评。</p>
<p>这个案例揭示了数据脱敏的极端重要性。</p>
<p>这篇文章给大家分享6种常用的数据脱敏方案，希望对你会有所帮助。</p>
<h2 id="方案1字符串替换青铜级">方案1：字符串替换（青铜级）</h2>
<p><strong>技术原理</strong>：通过正则表达式对敏感数据进行部分字符替换</p>
<p><strong>典型代码实现</strong>：</p>
<pre><code class="language-java">public class StringMasker {  
    // 手机号脱敏：13812345678 → 138****5678  
    public static String maskMobile(String mobile) {  
        return mobile.replaceAll("(\\d{3})\\d{4}(\\d{4})", "$1****$2");  
    }  

    // 身份证脱敏：110101199003077777 → 1101********7777  
    public static String maskIdCard(String idCard) {  
        if (idCard.length() == 18) {  
            return idCard.replaceAll("(\\d{4})\\d{10}(\\w{4})", "$1****$2");  
        }  
        return idCard; // 处理15位旧身份证  
    }  
}
</code></pre>
<p>使用正则表达式将关键字字段替换成了*</p>
<p><strong>适用场景对比</strong>：</p>
<p><img src="https://files.mdnice.com/user/5303/eaf2551d-6045-4dc5-aeb7-3a4a04c642b2.png" alt="" loading="lazy"></p>
<p><strong>优缺点分析</strong>：</p>
<ul>
<li>✅ 优点：实现简单、性能高（时间复杂度O(n)）</li>
<li>❌ 缺点：
<ul>
<li>无法恢复原始数据</li>
<li>正则表达式需考虑多国数据格式差异</li>
<li>存在模式被破解风险（如固定位置替换）</li>
</ul>
</li>
</ul>
<h2 id="方案2加密算法白银级">方案2：加密算法（白银级）</h2>
<p><strong>加密算法选型</strong>：</p>
<table>
<thead>
<tr>
<th>算法类型</th>
<th>代表算法</th>
<th>特点</th>
<th>适用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>对称加密</td>
<td>AES</td>
<td>加解密快，密钥管理复杂</td>
<td>支付信息存储</td>
</tr>
<tr>
<td>非对称加密</td>
<td>RSA</td>
<td>速度慢，安全性高</td>
<td>密钥交换</td>
</tr>
<tr>
<td>国密算法</td>
<td>SM4</td>
<td>符合国家标准</td>
<td>政府/金融系统</td>
</tr>
</tbody>
</table>
<p><strong>完整实现示例</strong>：</p>
<pre><code class="language-java">public class AESEncryptor {  
    private static final String ALGORITHM = "AES/GCM/NoPadding";  
    private static final int TAG_LENGTH = 128; // 认证标签长度  

    public static String encrypt(String plaintext, SecretKey key) {  
        byte[] iv = new byte[12]; // GCM推荐12字节IV  
        SecureRandom random = new SecureRandom();  
        random.nextBytes(iv);  

        Cipher cipher = Cipher.getInstance(ALGORITHM);  
        cipher.init(Cipher.ENCRYPT_MODE, key, new GCMParameterSpec(TAG_LENGTH, iv));  

        byte[] ciphertext = cipher.doFinal(plaintext.getBytes(StandardCharsets.UTF_8));  
        return Base64.getEncoder().encodeToString(iv) + ":" +  
               Base64.getEncoder().encodeToString(ciphertext);  
    }  

    // 解密方法类似...  
}
</code></pre>
<p><strong>密钥管理方案对比</strong>：</p>
<p><img src="https://files.mdnice.com/user/5303/b907b557-bbf6-4406-9d89-3ba9e1c93a0f.png" alt="" loading="lazy"></p>
<h2 id="方案3数据遮蔽黄金级">方案3：数据遮蔽（黄金级）</h2>
<p><strong>数据库层实现数据遮蔽</strong>：</p>
<pre><code class="language-sql">-- 创建脱敏视图  
CREATE VIEW masked_customers AS  
SELECT  
    id,  
    CONCAT(SUBSTR(name,1,1), '***') AS name,  
    CONCAT(SUBSTR(mobile,1,3), '****', SUBSTR(mobile,8,4)) AS mobile  
FROM customers;  

-- 使用列级权限控制  
GRANT SELECT (id, name, mobile) ON masked_customers TO test_user;
</code></pre>
<p>创建数据脱敏视图，在视图中将关键字段做遮蔽。</p>
<p>然后在后面需要用到这些字段的代码，需要统一从视图中查询数据。</p>
<p><strong>代理层实现（ShardingSphere示例）</strong>：</p>
<pre><code class="language-yml">rules:  
- !MASK  
  tables:  
    user:  
      columns:  
        phone:  
          maskAlgorithm: phone_mask  
  maskAlgorithms:  
    phone_mask:  
      type: MD5  
      props:  
        salt: abcdefg123456
</code></pre>
<p><strong>性能影响测试数据</strong>：</p>
<table>
<thead>
<tr>
<th>数据量</th>
<th>原始查询(ms)</th>
<th>遮蔽查询(ms)</th>
<th>性能损耗</th>
</tr>
</thead>
<tbody>
<tr>
<td>10万</td>
<td>120</td>
<td>145</td>
<td>20.8%</td>
</tr>
<tr>
<td>100万</td>
<td>980</td>
<td>1150</td>
<td>17.3%</td>
</tr>
<tr>
<td>1000万</td>
<td>10500</td>
<td>12200</td>
<td>16.2%</td>
</tr>
</tbody>
</table>
<h2 id="方案4数据替换铂金级">方案4：数据替换（铂金级）</h2>
<p>将原始数据和脱敏的数据保存到cache中，方便后面快速的做转换。</p>
<p><strong>映射表设计</strong>：</p>
<pre><code class="language-java">// 使用Guava Cache实现LRU缓存  
LoadingCache&lt;String, String&gt; dataMapping = CacheBuilder.newBuilder()  
    .maximumSize(100000)  
    .expireAfterAccess(30, TimeUnit.MINUTES)  
    .build(new CacheLoader&lt;String, String&gt;() {  
        public String load(String key) {  
            return UUID.randomUUID().toString().replace("-", "");  
        }  
    });  

public String replaceData(String original) {  
    return dataMapping.get(original);  
}
</code></pre>
<p><strong>替换流程</strong>：</p>
<p><img src="https://files.mdnice.com/user/5303/f7553936-87d1-47d8-ac6c-b7e0c46af8de.png" alt="" loading="lazy"></p>
<h2 id="方案5动态脱敏钻石级">方案5：动态脱敏（钻石级）</h2>
<p><strong>应用层实现（Spring AOP示例）</strong>：</p>
<pre><code class="language-java">@Aspect  
@Component  
public class DataMaskAspect {  

    @Around("@annotation(requiresMasking)")  
    public Object maskData(ProceedingJoinPoint joinPoint, RequiresMasking requiresMasking) throws Throwable {  
        Object result = joinPoint.proceed();  
        return mask(result, requiresMasking.type());  
    }  

    private Object mask(Object data, MaskType type) {  
        if (data instanceof User) {  
            User user = (User) data;  
            switch(type) {  
                case MOBILE:  
                    user.setMobile(MaskUtil.maskMobile(user.getMobile()));  
                    break;  
                case ID_CARD:  
                    user.setIdCard(MaskUtil.maskIdCard(user.getIdCard()));  
                    break;  
            }  
        }  
        return data;  
    }  
}
</code></pre>
<p>在需要做数据脱敏的字段上技术RequiresMasking注解，然后在Spring的AOP拦截器中，通过工具类动态实现数据的脱敏。</p>
<p><strong>数据库代理层架构</strong>：</p>
<p><img src="https://files.mdnice.com/user/5303/2ae40c60-167d-44a3-a7f0-f5478f275dd4.png" alt="" loading="lazy"></p>
<h2 id="方案6k匿名化王者级">方案6：K匿名化（王者级）</h2>
<h3 id="1-通俗原理解释">1. 通俗原理解释</h3>
<p>假设医院发布就诊数据：</p>
<table>
<thead>
<tr>
<th>年龄</th>
<th>性别</th>
<th>疾病</th>
</tr>
</thead>
<tbody>
<tr>
<td>25</td>
<td>男</td>
<td>感冒</td>
</tr>
<tr>
<td>25</td>
<td>男</td>
<td>发烧</td>
</tr>
<tr>
<td>25</td>
<td>男</td>
<td>骨折</td>
</tr>
</tbody>
</table>
<p>当K=3时，攻击者无法确定具体某人的疾病，因为3人都具有相同特征（25岁男性）。</p>
<h3 id="2-实现步骤">2. 实现步骤</h3>
<p><img src="https://files.mdnice.com/user/5303/5a643612-65f3-44e2-82ce-ff9f754e0173.png" alt="" loading="lazy"></p>
<p><strong>医疗数据泛化示例</strong>：</p>
<pre><code class="language-java">public class KAnonymity {  

    // 年龄泛化：精确值→范围  
    public static String generalizeAge(int age) {  
        int range = 10; // K=10  
        int lower = (age / range) * range;  
        int upper = lower + range - 1;  
        return lower + "-" + upper;  
    }  
}
</code></pre>
<p>假设range是K值，等于10。</p>
<p>generalizeAge方法中，通过一定的算法，将年龄的精确值，泛化成一个区间范围。</p>
<p>输入年龄28，返回20-29。</p>
<p><strong>K值选择原则</strong>：</p>
<p><img src="https://files.mdnice.com/user/5303/24272300-2940-4f80-8897-4e75c2a70488.png" alt="" loading="lazy"></p>
<h2 id="总结">总结</h2>
<table>
<thead>
<tr>
<th>方案</th>
<th>安全性</th>
<th>性能</th>
<th>可逆性</th>
<th>适用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>字符串替换</td>
<td>★★</td>
<td>★★★★</td>
<td>不可逆</td>
<td>日志/展示</td>
</tr>
<tr>
<td>加密算法</td>
<td>★★★★</td>
<td>★★</td>
<td>可逆</td>
<td>支付信息存储</td>
</tr>
<tr>
<td>数据遮蔽</td>
<td>★★★</td>
<td>★★★</td>
<td>部分可逆</td>
<td>数据库查询</td>
</tr>
<tr>
<td>数据替换</td>
<td>★★★★</td>
<td>★★</td>
<td>可逆</td>
<td>测试数据生成</td>
</tr>
<tr>
<td>动态脱敏</td>
<td>★★★★</td>
<td>★★★</td>
<td>动态可控</td>
<td>生产环境查询</td>
</tr>
<tr>
<td>K匿名化</td>
<td>★★★★★</td>
<td>★</td>
<td>不可逆</td>
<td>医疗/位置数据</td>
</tr>
</tbody>
</table>
<p>下面是某电商平台各方案的使用占比：<br>
<img src="https://files.mdnice.com/user/5303/bf51a958-0455-4fdb-9119-f2e1ce6c8d57.png" alt="" loading="lazy"></p>
<p><strong>苏三的3个核心建议</strong>：</p>
<ol>
<li><strong>数据分类分级</strong>：不同级别数据采用不同脱敏策略</li>
<li><strong>定期审计</strong>：使用自动化工具扫描敏感数据泄露</li>
<li><strong>最小化原则</strong>：能不收集的敏感数据坚决不收集</li>
</ol>
<p><strong>灵魂拷问</strong>：<br>
当黑客攻破你的数据库时，里面的数据是否像诺基亚功能机一样"防摔"？</p>
<p><strong>安全大礼包</strong></p>
<ul>
<li>敏感数据扫描工具</li>
<li>脱敏策略检查表</li>
<li>数据安全架构白皮书</li>
</ul>
<h2 id="最后说一句求关注别白嫖我">最后说一句(求关注，别白嫖我)</h2>
<p>如果这篇文章对您有所帮助，或者有所启发的话，帮忙关注一下我的同名公众号：苏三说技术，我的所有文章都会在公众号上首发，您的支持是我坚持写作最大的动力。</p>
<p>求一键三连：点赞、转发、在看。</p>
<p>关注公众号：【苏三说技术】，在公众号中回复：进大厂，可以免费获取我最近整理的10万字的面试宝典，好多小伙伴靠这个宝典拿到了多家大厂的offer。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0775209174525463" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-19 09:24">2025-05-19 09:23</span>&nbsp;
<a href="https://www.cnblogs.com/12lisu">苏三说技术</a>&nbsp;
阅读(<span id="post_view_count">196</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18883200);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18883200', targetLink: 'https://www.cnblogs.com/12lisu/p/18883200', title: '数据脱敏的这6种方案，真香！' })">举报</a>
</div>
        