
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/helloyaren/p/19051963" title="发布于 2025-08-22 08:39">
    <span role="heading" aria-level="2">Docker Desktop里搭建Redis 8.2.1集群的保姆级教程</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div>
<blockquote>
<div>最近想自己开发一个小系统，而我的电脑里还没有安装任何的开发相关的配套软件和环境，所以想着方便以后开发的原则，就想从头到尾搭建一个redis cluster集群环境。一开始觉得这个搭建应该不难，网上有很多现成的资料而且有AI大模型的加持，所以理论上很快能搞定，可结果是我花了大概半天时间才算基本完成环境搭建，因此记录一下整个过程很有必要。</div>
</blockquote>
</div>
<h2>一、涉及软件及环境</h2>
<div>
<table><colgroup><col><col><col></colgroup>
<tbody>
<tr>
<td data-cell-id="7RH6-1755822259035">
<div class="table-cell-line">序号</div>
</td>
<td data-cell-id="83WL-1755822259038">
<div class="table-cell-line">软件名称</div>
</td>
<td data-cell-id="E42z-1755822259042">
<div class="table-cell-line">版本号</div>
</td>
</tr>
<tr>
<td data-cell-id="4gz2-1755822259046">
<div class="table-cell-line">1</div>
</td>
<td data-cell-id="rEN1-1755822259049">
<div class="table-cell-line">Windows 11 家庭中文版</div>
</td>
<td data-cell-id="D0H3-1755822259052">
<div class="table-cell-line">26100.4652</div>
</td>
</tr>
<tr>
<td data-cell-id="Agpn-1755822259056">
<div class="table-cell-line">2</div>
</td>
<td data-cell-id="1TfP-1755822259059">
<div class="table-cell-line">Docker Desktop</div>
</td>
<td data-cell-id="Di88-1755822259062">
<div class="table-cell-line">4.44.2&nbsp;(202017)</div>
</td>
</tr>
<tr>
<td data-cell-id="RR3m-1755822259066">
<div class="table-cell-line">3</div>
</td>
<td data-cell-id="jDOy-1755822259069">
<div class="table-cell-line">Another Redis Desktop Manager</div>
</td>
<td data-cell-id="e7Ip-1755822259072">
<div class="table-cell-line">1.7.1</div>
</td>
</tr>
<tr>
<td data-cell-id="Oivj-1755822259076">
<div class="table-cell-line">4</div>
</td>
<td data-cell-id="09va-1755822259079">
<div class="table-cell-line">Git Bash</div>
</td>
<td data-cell-id="NjwH-1755822259082">
<div class="table-cell-line">5.2.37</div>
</td>
</tr>
</tbody>
</table>
</div>
<h2 id="OpFo-1755822259086">二、Docker Desktop下载&amp;安装</h2>
<div>这个就省略了，请参考《<a href="https://www.cnblogs.com/helloyaren/p/19050950">Docker Desktop里搭建Mysql 9.4主从复制的保姆级教程</a>》相关内容。</div>
<h2>三、Redis 8.2.1下载&amp;安装</h2>
<div>1、在Docker Desktop终端里输入“docker pull redis:latest”，下载最新的redis镜像，如下：</div>
<div><img alt="0" width="1541" height="426" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083907868-1686755003.png" class="lazyload"></div>
<div>
<blockquote>
<div>由于我已经下载了，所以这里没有出现下载进度界面，如果想跟我一样的话，请将latest替换成“8.2.1”</div>
</blockquote>
</div>
<div>2、安装redis集群前的准备工作</div>
<div>
<ul>
<li>新建docker的挂载目录，我是在D:\Users\Docker</li>
<li>在Docker文件夹下新建挂载目录下按照如下说明创建目录，如下：</li>
</ul>
</div>
<div data-theme="tomorrow" data-language="apex">
<p><img alt="image" width="840" height="140" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822082850772-1675584418.png" class="lazyload"></p>
</div>
<div>
<div>3、新建一个共享的网络，以便整个redis集群公用</div>
<div data-theme="tomorrow" data-language="bash">
<div class="cnblogs_code">
<pre>docker network create --subnet=<span style="color: rgba(128, 0, 128, 1)">172.20</span>.<span style="color: rgba(128, 0, 128, 1)">0.0</span>/<span style="color: rgba(128, 0, 128, 1)">16</span> redis-cluster-net</pre>
</div>
</div>
<div>4、批量生成redis配置的脚本，脚本如下：</div>
<div data-theme="tomorrow" data-language="bash">
<div class="cnblogs_code">
<pre>#!/bin/<span style="color: rgba(0, 0, 0, 1)">bash
</span><span style="color: rgba(0, 0, 255, 1)">for</span> port <span style="color: rgba(0, 0, 255, 1)">in</span> $(<span style="color: rgba(0, 0, 255, 1)">seq</span> <span style="color: rgba(128, 0, 128, 1)">7001</span> <span style="color: rgba(128, 0, 128, 1)">7006</span>); <span style="color: rgba(0, 0, 255, 1)">do</span>
  <span style="color: rgba(0, 0, 255, 1)">mkdir</span> -p ./${port}/<span style="color: rgba(0, 0, 0, 1)">conf
  </span><span style="color: rgba(0, 0, 255, 1)">cat</span> &lt;&lt;EOF &gt; ./${port}/conf/<span style="color: rgba(0, 0, 0, 1)">redis.conf
port ${port}
cluster</span>-<span style="color: rgba(0, 0, 0, 1)">enabled yes
cluster</span>-config-<span style="color: rgba(0, 0, 255, 1)">file</span><span style="color: rgba(0, 0, 0, 1)"> nodes.conf
cluster</span>-node-timeout <span style="color: rgba(128, 0, 128, 1)">5000</span><span style="color: rgba(0, 0, 0, 1)">
appendonly yes
protected</span>-<span style="color: rgba(0, 0, 0, 1)">mode no
bind </span><span style="color: rgba(128, 0, 128, 1)">0.0</span>.<span style="color: rgba(128, 0, 128, 1)">0.0</span><span style="color: rgba(0, 0, 0, 1)">
protected</span>-<span style="color: rgba(0, 0, 0, 1)">mode no
EOF
</span><span style="color: rgba(0, 0, 255, 1)">done</span></pre>
</div>
</div>
<div>将脚本保存为“redis-cnf-gen.sh”，放到“D:\Users\Docker\Volumes\redis-cluster”这个下面。</div>
<div>5、打开“Git Bash”，然后输入bash命令“/d/Users/Docker/Volumes/redis-cluster”，切换到这个目录</div>
<div data-theme="tomorrow" data-language="bash">
<div class="cnblogs_code">
<pre>cd /d/Users/Docker/Volumes/redis-cluster</pre>
</div>
</div>
<div>6、然后在Git Bash终端输入批量生成redis配置的脚本命令，如下</div>
<div data-theme="tomorrow" data-language="bash">
<div class="cnblogs_code">
<pre>bash ./redis-cnf-gen.<span style="color: rgba(0, 0, 255, 1)">sh</span></pre>
</div>
</div>
<div>界面如下：</div>
<div><img alt="0" width="912" height="528" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083907627-609980694.png" class="lazyload"></div>
<div>生成的效果如下：</div>
<div><img alt="0" width="1212" height="774" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083908051-1051165501.png" class="lazyload"></div>
<div>生成的配置目录结构如下：</div>
<div><img alt="0" width="1629" height="623" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083907988-1288998371.png" class="lazyload"></div>
<div>7、容器部署</div>
<div>
<ul>
<li>编写启动6个Redis节点脚本，如下</li>
</ul>
</div>
<div data-theme="tomorrow" data-language="bash">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">for</span> port <span style="color: rgba(0, 0, 255, 1)">in</span> $(<span style="color: rgba(0, 0, 255, 1)">seq</span> <span style="color: rgba(128, 0, 128, 1)">7001</span> <span style="color: rgba(128, 0, 128, 1)">7006</span>); <span style="color: rgba(0, 0, 255, 1)">do</span><span style="color: rgba(0, 0, 0, 1)">
  docker run </span>-d --name redis-<span style="color: rgba(0, 0, 0, 1)">${port} \
    </span>-p ${port}:${port} -p <span style="color: rgba(128, 0, 128, 1)">1</span>${port}:<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">${port} \
    </span>-v $(<span style="color: rgba(0, 0, 255, 1)">pwd</span>)/${port}/conf:/etc/<span style="color: rgba(0, 0, 0, 1)">redis \
    </span>-v $(<span style="color: rgba(0, 0, 255, 1)">pwd</span>)/${port}/data:/<span style="color: rgba(0, 0, 0, 1)">data \
    </span>--network redis-cluster-<span style="color: rgba(0, 0, 0, 1)">net \
    </span>--ip <span style="color: rgba(128, 0, 128, 1)">172.20</span>.<span style="color: rgba(128, 0, 128, 1)">0</span>.$((port-<span style="color: rgba(128, 0, 128, 1)">6999</span><span style="color: rgba(0, 0, 0, 1)">)) \
    redis:latest redis</span>-server /etc/redis/<span style="color: rgba(0, 0, 0, 1)">redis.conf
</span><span style="color: rgba(0, 0, 255, 1)">done</span></pre>
</div>
</div>
<div>
<ul>
<li>将上面的脚本保存为“docker-run-redis.sh”，放到“D:\Users\Docker\Volumes\redis-cluster”下</li>
<li>在Git Bash终端里运行上面脚本，如下：</li>
</ul>
</div>
<div><img alt="0" width="912" height="528" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083907908-2140399268.png" class="lazyload"></div>
<div>打开Docker Desktop主窗口，在Containers能看到刚启动的6个redis实例，不过都没有正常运行</div>
<div><img alt="0" width="1866" height="933" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083908296-1559956728.png" class="lazyload"></div>
<div>点击第一个redis-7001的容器实例，查看日志，如下：</div>
<div><img alt="0" width="1515" height="873" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083908282-430196632.png" class="lazyload"></div>
<div><img alt="0" width="1485" height="657" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083907303-537642284.png" class="lazyload"></div>
<div>
<blockquote>
<div>Starting Redis Server</div>
<div>1:C 21 Aug 2025 12:40:54.899 # Fatal error, can't open config file '/data/D:/Program Files/Git/etc/redis/redis.conf': No such file or directory</div>
</blockquote>
</div>
<div>
<ul>
<li>上面出现的错误是<span style="color: rgba(255, 0, 0, 1)">由于Windows系统和Linux系统混用导致环境变化，造成路径解析错误</span>。在每个节点目录出现混乱的目录如下：</li>
</ul>
</div>
<div><img alt="0" width="1028" height="552" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083907906-1301963677.png" class="lazyload"></div>
<div>
<ul>
<li>后来经过一番搜索实在没法解决这个问题，只能老老实实的一条命令一条命令的执行。方法如下：</li>
<li>删除D:\Users\Docker\Volumes\redis-cluster下7001~7006的目录</li>
<li>手动编写启动6个redis容器实例的脚本，如下：</li>
</ul>
</div>
<div data-theme="tomorrow" data-language="bash">
<div class="cnblogs_code">
<pre>docker run -d --name redis-<span style="color: rgba(128, 0, 128, 1)">7001</span> -p <span style="color: rgba(128, 0, 128, 1)">7001</span>:<span style="color: rgba(128, 0, 128, 1)">7001</span> -p <span style="color: rgba(128, 0, 128, 1)">17001</span>:<span style="color: rgba(128, 0, 128, 1)">17001</span>  -v D:\\Users\\Docker\\Volumes\\redis-cluster\\<span style="color: rgba(128, 0, 128, 1)">7001</span>\\conf\\redis.conf:/etc/redis/conf/redis.conf  -v D:\\Users\\Docker\\Volumes\\redis-cluster\\<span style="color: rgba(128, 0, 128, 1)">7001</span>\\data:/data  --network redis-cluster-net     --ip <span style="color: rgba(128, 0, 128, 1)">172.20</span>.<span style="color: rgba(128, 0, 128, 1)">0.101</span>   redis:latest redis-server /etc/redis/conf/<span style="color: rgba(0, 0, 0, 1)">redis.conf

docker run </span>-d --name redis-<span style="color: rgba(128, 0, 128, 1)">7002</span> -p <span style="color: rgba(128, 0, 128, 1)">7002</span>:<span style="color: rgba(128, 0, 128, 1)">7002</span> -p <span style="color: rgba(128, 0, 128, 1)">17002</span>:<span style="color: rgba(128, 0, 128, 1)">17002</span>  -v D:\\Users\\Docker\\Volumes\\redis-cluster\\<span style="color: rgba(128, 0, 128, 1)">7002</span>\\conf\\redis.conf:/etc/redis/conf/redis.conf  -v D:\\Users\\Docker\\Volumes\\redis-cluster\<span style="color: rgba(128, 0, 128, 1)">7002</span>\\data:/data  --network redis-cluster-net     --ip <span style="color: rgba(128, 0, 128, 1)">172.20</span>.<span style="color: rgba(128, 0, 128, 1)">0.102</span>   redis:latest redis-server /etc/redis/conf/<span style="color: rgba(0, 0, 0, 1)">redis.conf

docker run </span>-d --name redis-<span style="color: rgba(128, 0, 128, 1)">7003</span> -p <span style="color: rgba(128, 0, 128, 1)">7003</span>:<span style="color: rgba(128, 0, 128, 1)">7003</span> -p <span style="color: rgba(128, 0, 128, 1)">17003</span>:<span style="color: rgba(128, 0, 128, 1)">17003</span>  -v D:\\Users\\Docker\\Volumes\\redis-cluster\\<span style="color: rgba(128, 0, 128, 1)">7003</span>\\conf\\redis.conf:/etc/redis/conf/redis.conf  -v D:\\Users\\Docker\\Volumes\\redis-cluster\\<span style="color: rgba(128, 0, 128, 1)">7003</span>\\data:/data  --network redis-cluster-net     --ip <span style="color: rgba(128, 0, 128, 1)">172.20</span>.<span style="color: rgba(128, 0, 128, 1)">0.103</span>   redis:latest redis-server /etc/redis/conf/<span style="color: rgba(0, 0, 0, 1)">redis.conf

docker run </span>-d --name redis-<span style="color: rgba(128, 0, 128, 1)">7004</span> -p <span style="color: rgba(128, 0, 128, 1)">7004</span>:<span style="color: rgba(128, 0, 128, 1)">7004</span> -p <span style="color: rgba(128, 0, 128, 1)">17004</span>:<span style="color: rgba(128, 0, 128, 1)">17004</span>  -v D:\\Users\\Docker\\Volumes\\redis-cluster\\<span style="color: rgba(128, 0, 128, 1)">7004</span>\\conf\\redis.conf:/etc/redis/conf/redis.conf  -v D:\\Users\\Docker\\Volumes\\redis-cluster\<span style="color: rgba(128, 0, 128, 1)">7004</span>\\data:/data  --network redis-cluster-net     --ip <span style="color: rgba(128, 0, 128, 1)">172.20</span>.<span style="color: rgba(128, 0, 128, 1)">0.104</span>   redis:latest redis-server /etc/redis/conf/<span style="color: rgba(0, 0, 0, 1)">redis.conf

docker run </span>-d --name redis-<span style="color: rgba(128, 0, 128, 1)">7005</span> -p <span style="color: rgba(128, 0, 128, 1)">7005</span>:<span style="color: rgba(128, 0, 128, 1)">7005</span> -p <span style="color: rgba(128, 0, 128, 1)">17005</span>:<span style="color: rgba(128, 0, 128, 1)">17005</span>  -v D:\\Users\\Docker\\Volumes\\redis-cluster\\<span style="color: rgba(128, 0, 128, 1)">7005</span>\\conf\\redis.conf:/etc/redis/conf/redis.conf  -v D:\\Users\\Docker\\Volumes\\redis-cluster\\<span style="color: rgba(128, 0, 128, 1)">7005</span>\\data:/data  --network redis-cluster-net     --ip <span style="color: rgba(128, 0, 128, 1)">172.20</span>.<span style="color: rgba(128, 0, 128, 1)">0.105</span>   redis:latest redis-server /etc/redis/conf/<span style="color: rgba(0, 0, 0, 1)">redis.conf

docker run </span>-d --name redis-<span style="color: rgba(128, 0, 128, 1)">7006</span> -p <span style="color: rgba(128, 0, 128, 1)">7006</span>:<span style="color: rgba(128, 0, 128, 1)">7006</span> -p <span style="color: rgba(128, 0, 128, 1)">17006</span>:<span style="color: rgba(128, 0, 128, 1)">17006</span>  -v D:\\Users\\Docker\\Volumes\\redis-cluster\\<span style="color: rgba(128, 0, 128, 1)">7006</span>\\conf\\redis.conf:/etc/redis/conf/redis.conf  -v D:\\Users\\Docker\\Volumes\\redis-cluster\\<span style="color: rgba(128, 0, 128, 1)">7006</span>\\data:/data  --network redis-cluster-net     --ip <span style="color: rgba(128, 0, 128, 1)">172.20</span>.<span style="color: rgba(128, 0, 128, 1)">0.106</span>   redis:latest redis-server /etc/redis/conf/redis.conf</pre>
</div>
</div>
<div>
<p><span style="color: rgba(255, 0, 0, 1)">温馨提示：如果不想夺走弯路，建议一条一条执行，全部复制执行会有问题。</span></p>
<ul>
<li>然后去docker desktop里批量删除刚才的6个容器实例，如下：</li>
</ul>
</div>
<div><img alt="0" width="1503" height="918" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083908277-1843192935.png" class="lazyload"></div>
<div>&nbsp;</div>
<div><img alt="0" width="1446" height="840" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083908246-822384884.png" class="lazyload"></div>
<div><img alt="0" width="1502" height="800" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083907833-2059745157.png" class="lazyload"></div>
<div>
<ul>
<li>打开docker desktop容器终端，拷贝上面的脚本，执行，如下：</li>
</ul>
</div>
<div><img alt="0" width="1242" height="516" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083908062-734512879.png" class="lazyload"></div>
<div>
<ul>
<li>我们可以看到6个redis实例都成功运行了</li>
</ul>
</div>
<div><img alt="0" width="1494" height="813" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083908199-1890283461.png" class="lazyload"></div>
<div>8、集群初始化</div>
<div>
<ul>
<li>‌编写执行集群创建命令，如下：</li>
</ul>
</div>
<div data-theme="tomorrow" data-language="bash">
<div class="cnblogs_code">
<pre>docker exec -it redis-<span style="color: rgba(128, 0, 128, 1)">7001</span> redis-cli --cluster create <span style="color: rgba(128, 0, 128, 1)">172.20</span>.<span style="color: rgba(128, 0, 128, 1)">0.101</span>:<span style="color: rgba(128, 0, 128, 1)">7001</span> <span style="color: rgba(128, 0, 128, 1)">172.20</span>.<span style="color: rgba(128, 0, 128, 1)">0.102</span>:<span style="color: rgba(128, 0, 128, 1)">7002</span> <span style="color: rgba(128, 0, 128, 1)">172.20</span>.<span style="color: rgba(128, 0, 128, 1)">0.103</span>:<span style="color: rgba(128, 0, 128, 1)">7003</span> <span style="color: rgba(128, 0, 128, 1)">172.20</span>.<span style="color: rgba(128, 0, 128, 1)">0.104</span>:<span style="color: rgba(128, 0, 128, 1)">7004</span> <span style="color: rgba(128, 0, 128, 1)">172.20</span>.<span style="color: rgba(128, 0, 128, 1)">0.105</span>:<span style="color: rgba(128, 0, 128, 1)">7005</span> <span style="color: rgba(128, 0, 128, 1)">172.20</span>.<span style="color: rgba(128, 0, 128, 1)">0.106</span>:<span style="color: rgba(128, 0, 128, 1)">7006</span> --cluster-replicas <span style="color: rgba(128, 0, 128, 1)">1</span></pre>
</div>
<p>&nbsp;</p>
</div>
<div>
<ul>
<li>在docker desktop终端运行上面的命令，如下：</li>
</ul>
</div>
<div><img alt="0" width="1515" height="393" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083907934-416687498.png" class="lazyload"></div>
<div>
<blockquote>
<div>Could not connect to Redis at 172.20.0.101:7001: Connection refused</div>
</blockquote>
</div>
<div>出现上面的错误，<span style="color: rgba(255, 0, 0, 1)">是由于上面的挂载命令有问题</span>，我们可以到任意一个redis容器实例里，查看文件，如下：</div>
<div><img alt="0" width="1524" height="903" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083908099-865695939.png" class="lazyload"></div>
<div>看到这个明显是文件夹，而不是文件，我们希望是将配置文件挂载到这里。</div>
<div>
<ul>
<li>按照上面介绍里先批量删除所有的运行的容器实例</li>
<li>再删除D:\Users\Docker\Volumes\redis-cluster下的7001-7006文件夹</li>
<li>在Git Bash运行脚本“redis-cnf-gen.sh”</li>
<li>然后在docker desktop终端里一条一条执行命令：</li>
</ul>
</div>
<div><img alt="0" width="1506" height="930" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083908198-1406928506.png" class="lazyload"></div>
<div>
<ul>
<li>检查redis-7001里的配置文件是否挂载成功，很明显已经是文件而不是文件夹，成功了。</li>
</ul>
</div>
<div><img alt="0" width="1479" height="876" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083908141-2000672723.png" class="lazyload"></div>
<div>
<ul>
<li>依次执行剩下的5条语句，成功运行，如下：</li>
</ul>
</div>
<div><img alt="0" width="1506" height="831" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083908255-1106362899.png" class="lazyload"></div>
<div>
<ul>
<li>继续在docker desktop终端执行创建集群命令：</li>
</ul>
</div>
<div><img alt="0" width="1281" height="522" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083907883-881896534.png" class="lazyload"></div>
<div><img alt="0" width="1281" height="414" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083907907-751276956.png" class="lazyload"></div>
<div>在提示处输入“yes”，就完成整个集群创建了，出现如下信息代表成功了：</div>
<div><img alt="0" width="1271" height="528" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083907956-450509412.png" class="lazyload"></div>
<div><img alt="0" width="1257" height="278" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083907805-1934429409.png" class="lazyload"></div>
<div>9、集群验证与测试</div>
<div>
<ul>
<li>‌集群状态检查，在docker desktop终端运行如下命令：</li>
</ul>
</div>
<div data-theme="tomorrow" data-language="bash">
<div class="cnblogs_code">
<pre>docker exec -it redis-<span style="color: rgba(128, 0, 128, 1)">7001</span> redis-cli -p <span style="color: rgba(128, 0, 128, 1)">7001</span> cluster nodes</pre>
</div>
</div>
<div>可以看到集群成功创建了，3主3从：101、102、103为主节点、104、105、106为从节点；</div>
<div><img alt="0" width="1188" height="342" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083907932-1134370379.png" class="lazyload"></div>
<div>
<ul>
<li>数据读写测试</li>
</ul>
</div>
<div data-theme="tomorrow" data-language="bash">
<div class="cnblogs_code">
<pre>docker exec -it redis-<span style="color: rgba(128, 0, 128, 1)">7001</span> redis-cli -p <span style="color: rgba(128, 0, 128, 1)">7001</span> -c <br>&gt; set foo bar <br>&gt; get foo</pre>
</div>
</div>
<div>执行窗口如下：</div>
<div><img alt="0" width="1107" height="294" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083907557-1450450226.png" class="lazyload"></div>
<div>可以看到已经成功执行了redis的命令，设置foo的值为bar，并且跳转到103这个主节点上了。</div>
<div>
<ul>
<li>打开Another Redis Desktop Manager，配置redis连接，如下：</li>
</ul>
</div>
<div><img alt="0" width="1311" height="701" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083907961-1200266238.png" class="lazyload"></div>
<div>
<ul>
<li>点击展开按钮，如下：</li>
</ul>
</div>
<div><img alt="0" width="1899" height="927" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083908167-788079345.png" class="lazyload"></div>
<div>
<ul>
<li>可以看到已经出现foo这个key值了，点击左侧foo这个值，右侧窗口出现值bar，如下：</li>
</ul>
</div>
<div><img alt="0" width="1893" height="963" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250822083908108-1886873520.png" class="lazyload"></div>
<div>至此，redis cluster集群3主3从已经成功搭建完成了。</div>
<h2>四、总结</h2>
<div>整体搭建过程相对mysql主从复制来说，要简单一些。遇到问题时候只要借助AI大模型搜索，基本上都能得到解决。这里主要的问题就是在WIndows下运行Git Bash命令时，会导致系统路径解析混乱，这个问题搞得我头大。</div>
<div>最后还有一个疑问，就是Another Redis Desktop Manager里如何配置Cluster？我只要把Cluster勾选上，就会出错，按理来说客户端会自动处理重定向到有Key值的节点，但是我一直没搞定，希望有知道的朋友评论里留言，不胜感激。</div>
</div>
</div>
<div id="MySignature" role="contentinfo">
    <br><br>请扫码关注！！！ <br>
<b>您的关注将是您做的最正确的事情！！！</b>
<br>
大龄码农那些事专注分享大龄码农的点滴。
<br>

本文版权归作者helloyaren和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-22 08:39">2025-08-22 08:39</span>&nbsp;
<a href="https://www.cnblogs.com/helloyaren">helloyaren</a>&nbsp;
阅读(<span id="post_view_count">42</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19051963);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19051963', targetLink: 'https://www.cnblogs.com/helloyaren/p/19051963', title: 'Docker Desktop里搭建Redis 8.2.1集群的保姆级教程' })">举报</a>
</div>
        