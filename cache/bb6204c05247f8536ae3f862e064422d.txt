
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zxlh1529/p/18790227" title="发布于 2025-03-24 22:09">
    <span role="heading" aria-level="2">vue实现不同用户权限的方法</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="vue-实现不同用户权限的方法">Vue 实现不同用户权限的方法</h1>
<p>在项目中，实现不同用户的权限控制是常见的需求也是常见的功能模块，例如管理系统中不同角色（管理员、普通用户等）应有不同的访问权限，小程序、App等在不同角色登入的时候显示的首页以及跳转访问不同的页面。本文将以 vue 为主要的代码框架介绍几种常见的权限控制方式。</p>
<h2 id="1-基于路由守卫的权限控制">1. 基于路由守卫的权限控制</h2>
<h3 id="11-方案概述">1.1 方案概述</h3>
<p>基于 Vue Router 的 <code>beforeEach</code> 进行全局路由守卫控制。我们可以在 <code>vuex</code> 或 <code>pinia</code> 中存储用户角色，并在路由的 <code>meta</code> 字段中定义允许访问的角色。</p>
<h3 id="12-实现步骤">1.2 实现步骤</h3>
<ol>
<li>在 <code>router</code> 配置中为每个路由添加 <code>meta</code> 字段，存储允许访问的角色。</li>
<li>在 Vuex/Pinia 中存储用户角色。</li>
<li>使用 <code>router.beforeEach</code> 进行权限校验。</li>
</ol>
<h3 id="13-代码示例">1.3 代码示例</h3>
<pre><code class="language-javascript">// router/index.js
import { createRouter, createWebHistory } from 'vue-router';
import store from '@/store';

// 引入多个组件页面 
import Home from '@/views/Home.vue';
import Admin from '@/views/Admin.vue';
import AddSomeFun from '@/views/AddSomeFun.vue';
import Login from '@/views/Login.vue';

// 定义路由，并且在 meta 中定义可访问的角色
const routes = [
  { path: '/', component: Home },
  { path: '/admin', component: Admin, meta: { roles: ['admin'] } },
  { path: '/addSomeFun', component: AddSomeFun, meta: { roles: ['user'] } },
  { path: '/login', component: Login }
];

// 创建路由
const router = createRouter({
  history: createWebHistory(),
  routes
});

// 路由校验
router.beforeEach((to, from, next) =&gt; {
  const userRole = store.state.userRole; // 假设 Vuex 中存储了用户 user、管理员 admin 角色
  if (to.meta.roles &amp;&amp; !to.meta.roles.includes(userRole)) {
    next('/'); // 无权限跳转到首页
  } else {
    next();
  }
});

export default router;
</code></pre>
<h2 id="2-基于-vue-指令的权限控制">2. 基于 Vue 指令的权限控制</h2>
<h3 id="21-方案概述">2.1 方案概述</h3>
<p>使用 Vue 指令 <code>v-permission</code> 来控制按钮、组件或模块的显示隐藏。</p>
<h3 id="22-实现步骤">2.2 实现步骤</h3>
<ol>
<li>在 Vue 全局创建一个自定义指令 <code>v-permission</code>。</li>
<li>在 main.js 引入注册。</li>
<li>该指令根据用户权限判断是否显示该元素。</li>
</ol>
<h3 id="23-代码示例">2.3 代码示例</h3>
<pre><code class="language-javascript">// directives/permission.js
// 指令封装
import { useStore } from 'vuex';

export default {
  install(app) {
    app.directive('permission', {
      mounted(el, binding) {
        const store = useStore();
        const userRole = store.state.userRole;
        if (!binding.value.includes(userRole)) {
          el.parentNode?.removeChild(el);
        }
      }
    });
  }
};
</code></pre>
<pre><code class="language-javascript">// main.js
import { createApp } from 'vue';
import App from './App.vue';
import store from './store';
import permissionDirective from './directives/permission';

const app = createApp(App);
app.use(store);
app.use(permissionDirective); // 注册自定义指令
app.mount('#app');
</code></pre>
<pre><code class="language-vue">&lt;!-- 使用示例 --&gt;
&lt;button v-permission="['admin']"&gt;仅管理员可见&lt;/button&gt;
</code></pre>
<h2 id="3-基于-vuex或-pinia的权限控制">3. 基于 Vuex（或 Pinia）的权限控制</h2>
<h3 id="31-方案概述">3.1 方案概述</h3>
<p>在 Vuex/Pinia 中存储权限信息，并在组件中通过 <code>computed</code> 计算属性动态控制组件或按钮的显示。</p>
<h3 id="32-代码示例">3.2 代码示例</h3>
<pre><code class="language-javascript">// store/index.js
import { createStore } from 'vuex';

export default createStore({
  state: {
    userRole: 'user' // 假设存储用户角色
  },
  mutations: {
    setUserRole(state, role) {
      state.userRole = role;
    }
  }
});
</code></pre>
<pre><code class="language-vue">&lt;!-- 在组件中使用 Vuex 进行权限判断 --&gt;
&lt;template&gt;
  &lt;button v-if="userRole === 'admin'"&gt;仅管理员可见&lt;/button&gt;
&lt;/template&gt;

&lt;script&gt;
import { computed } from 'vue';
import { useStore } from 'vuex';

export default {
  setup() {
    const store = useStore();
    const userRole = computed(() =&gt; store.state.userRole);
    return { userRole };
  }
};
&lt;/script&gt;
</code></pre>
<h2 id="4-后端返回权限控制">4. 后端返回权限控制</h2>
<h3 id="41-方案概述">4.1 方案概述</h3>
<p>后端返回权限控制的方式有两种：</p>
<ol>
<li><strong>返回用户权限信息</strong>：前端获取角色信息后，使用前述方法进行权限控制。</li>
<li><strong>后端返回可访问路由</strong>：后端返回用户可以访问的路由列表，前端使用 <code>router.addRoute</code> 动态注册。</li>
</ol>
<h3 id="42-代码示例后端返回路由">4.2 代码示例（后端返回路由）</h3>
<pre><code class="language-javascript">// 登录后获取用户权限，并动态添加路由
import router from '@/router';
import store from '@/store';
import axios from 'axios';

async function fetchUserRoutes() {
  const res = await axios.post('/common/getUserRoutes'); // 假设后端返回路由信息
  const routes = res.data
  
  routes.forEach(route =&gt; {
    router.addRoute(route);
  });
}

fetchUserRoutes();
</code></pre>
<h2 id="5-总结">5. 总结</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>适用场景</th>
<th>优势</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>路由守卫</td>
<td>页面级权限控制</td>
<td>适用于完整页面权限</td>
<td>无法控制按钮等细节</td>
</tr>
<tr>
<td>Vue 指令</td>
<td>组件、按钮级权限</td>
<td>适用于 UI 级别权限</td>
<td>需要手动移除元素</td>
</tr>
<tr>
<td>Vuex/Pinia</td>
<td>组件级权限</td>
<td>适用于灵活权限判断</td>
<td>需要在多个组件中维护权限逻辑</td>
</tr>
<tr>
<td>后端返回权限</td>
<td>适用于大规模权限管理</td>
<td>后端统一管理，灵活</td>
<td>需要动态更新前端路由</td>
</tr>
</tbody>
</table>
<p>以上几种方式可以结合使用，根据实际业务需求选择合适的权限控制方式。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.17384767791203704" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-24 22:11">2025-03-24 22:09</span>&nbsp;
<a href="https://www.cnblogs.com/zxlh1529">幼儿园技术家</a>&nbsp;
阅读(<span id="post_view_count">19</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18790227" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18790227);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18790227', targetLink: 'https://www.cnblogs.com/zxlh1529/p/18790227', title: 'vue实现不同用户权限的方法' })">举报</a>
</div>
        