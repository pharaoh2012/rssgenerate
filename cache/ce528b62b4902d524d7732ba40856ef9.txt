
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/2YSP/p/18716104" title="发布于 2025-02-14 20:44">
    <span role="heading" aria-level="2">SpringCloud自定义loadbalancer实现标签路由</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="一背景">一、背景</h1>
<p>&nbsp;&nbsp;最近前端反应开发环境有时候调接口会很慢，原因是有开发图方便将本地服务注册到开发环境，请求路由到开发本地导致，</p>
<p>为了解决该问题想到可以通过标签路由的方式避免该问题，实现前端联调和开发自测互不干扰。</p>
<p>&nbsp;&nbsp;该方案除了用于本地调试，还可以用于用户灰度发布。</p>
<h1 id="二实现方案">二、实现方案</h1>
<p>&nbsp;&nbsp;关于负载均衡，低版本的SpringCloud用的是Spring Cloud Ribbon，高版本用Spring Cloud LoadBalancer替代了，</p>
<p>Ribbon可以通过实现IRlue接口实现，这里只介绍高版本的实现方案。</p>
<p><strong>实现方案：</strong></p>
<ol>
<li>
<p>idea在环境变量中设置tag，本地服务启动时读取环境变量将tag注册到nacos的元数据</p>
</li>
<li>
<p>重写网关的负载均衡算法，从请求头中获取到的request-tag和服务实例的元数据进行匹配，如果匹配到则返回对应的</p>
<p>服务实例，否则提示服务未找到。</p>
</li>
</ol>
<h1 id="三编码实现">三、编码实现</h1>
<h2 id="31-order服务">3.1 order服务</h2>
<p>新建一个SpringCloud服务order-service，注册元数据很简单，只需要排除掉NacosDiscoveryClientConfiguration，再写一个自己的NacosDiscoveryClientConfiguration配置类即可。</p>
<p>创建MyNacosDiscoveryClientConfiguration</p>
<pre><code class="language-java">/**
 * @Author: Ship
 * @Description:
 * @Date: Created in 2025/2/12
 */
@Configuration(
        proxyBeanMethods = false
)
@ConditionalOnDiscoveryEnabled
@ConditionalOnBlockingDiscoveryEnabled
@ConditionalOnNacosDiscoveryEnabled
@AutoConfigureBefore({SimpleDiscoveryClientAutoConfiguration.class, CommonsClientAutoConfiguration.class})
@AutoConfigureAfter({NacosDiscoveryAutoConfiguration.class})
public class MyNacosDiscoveryClientConfiguration {



    @Bean
    public DiscoveryClient nacosDiscoveryClient(NacosServiceDiscovery nacosServiceDiscovery) {
        return new NacosDiscoveryClient(nacosServiceDiscovery);
    }

    @Bean
    @ConditionalOnProperty(
            value = {"spring.cloud.nacos.discovery.watch.enabled"},
            matchIfMissing = true
    )
    public NacosWatch nacosWatch(NacosServiceManager nacosServiceManager, NacosDiscoveryProperties nacosDiscoveryProperties,
                                 ObjectProvider&lt;ThreadPoolTaskScheduler&gt; taskExecutorObjectProvider, Environment environment) {
        // 环境变量读取标签
        String tag = environment.getProperty("tag");
        nacosDiscoveryProperties.getMetadata().put("request-tag", tag);
        return new NacosWatch(nacosServiceManager, nacosDiscoveryProperties, taskExecutorObjectProvider);
    }
}
</code></pre>
<p>这里代码基本与NacosDiscoveryClientConfiguration一致，只是加上了设置元数据的逻辑。</p>
<pre><code class="language-java">@SpringBootApplication(exclude = NacosDiscoveryClientConfiguration.class)
public class OrderApplication {

    public static void main(String[] args) {
        SpringApplication.run(OrderApplication.class, args);
    }

}
</code></pre>
<p>启动类上需要排除默认的NacosDiscoveryClientConfiguration，不然启动会报bean重复注册的错误，或者配置添加<strong>spring.main.allow-bean-definition-overriding=true</strong>允许重复注册也行。</p>
<p>写一个测试接口，方便后面测试</p>
<pre><code class="language-java">/**
 * @Author: Ship
 * @Description:
 * @Date: Created in 2025/2/12
 */
@RequestMapping("test")
@RestController
public class TestController {


    @GetMapping("")
    public String sayHello(){
        return "hello";
    }
}

</code></pre>
<h2 id="32-gateway服务">3.2 gateway服务</h2>
<p>新建一个网关服务，pom文件如下：</p>
<pre><code class="language-xml"> &lt;properties&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
        &lt;spring-cloud.version&gt;2020.0.3&lt;/spring-cloud.version&gt;
        &lt;spring-cloud-alibaba.version&gt;2021.1&lt;/spring-cloud-alibaba.version&gt;
        &lt;spring-boot.version&gt;2.5.1&lt;/spring-boot.version&gt;
        &lt;maven-compiler-plugin.version&gt;3.1&lt;/maven-compiler-plugin.version&gt;
    &lt;/properties&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-loadbalancer&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;version&gt;${spring-boot.version}&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;
            &lt;version&gt;${spring-boot.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;
            &lt;version&gt;${spring-cloud-alibaba.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;
            &lt;version&gt;${spring-cloud-alibaba.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;

            &lt;dependency&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;
                &lt;version&gt;${spring-boot.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;

            &lt;dependency&gt;
                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
                &lt;artifactId&gt;spring-cloud-starter-bootstrap&lt;/artifactId&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;


    &lt;/dependencyManagement&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                &lt;version&gt;${maven-compiler-plugin.version}&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;source&gt;${java.version}&lt;/source&gt;
                    &lt;target&gt;${java.version}&lt;/target&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
</code></pre>
<p>Spring-Cloud-loadBalancer默认使用轮询的算法，即org.springframework.cloud.loadbalancer.core.RoundRobinLoadBalancer类实现，因此可以参考RoundRobinLoadBalancer实现一个TagLoadBalancer，代码如下：</p>
<pre><code class="language-java">/**
 * @Author: Ship
 * @Description:
 * @Date: Created in 2025/2/12
 */
public class TagLoadBalancer implements ReactorServiceInstanceLoadBalancer {

    private static final String TAG_HEADER = "request-tag";

    private static final Log log = LogFactory.getLog(TagLoadBalancer.class);
    final AtomicInteger position;
    final String serviceId;
    ObjectProvider&lt;ServiceInstanceListSupplier&gt; serviceInstanceListSupplierProvider;

    public TagLoadBalancer(ObjectProvider&lt;ServiceInstanceListSupplier&gt; serviceInstanceListSupplierProvider, String serviceId) {
        this(serviceInstanceListSupplierProvider, serviceId, (new Random()).nextInt(1000));
    }

    public TagLoadBalancer(ObjectProvider&lt;ServiceInstanceListSupplier&gt; serviceInstanceListSupplierProvider, String serviceId, int seedPosition) {
        this.serviceId = serviceId;
        this.serviceInstanceListSupplierProvider = serviceInstanceListSupplierProvider;
        this.position = new AtomicInteger(seedPosition);
    }

    @Override
    public Mono&lt;Response&lt;ServiceInstance&gt;&gt; choose(Request request) {
        ServiceInstanceListSupplier supplier = (ServiceInstanceListSupplier) this.serviceInstanceListSupplierProvider.getIfAvailable(NoopServiceInstanceListSupplier::new);
        return supplier.get(request).next().map((serviceInstances) -&gt; {
            return this.processInstanceResponse(supplier, serviceInstances, request);
        });
    }

    private Response&lt;ServiceInstance&gt; processInstanceResponse(ServiceInstanceListSupplier supplier, List&lt;ServiceInstance&gt; serviceInstances, Request request) {
        Response&lt;ServiceInstance&gt; serviceInstanceResponse = this.getInstanceResponse(serviceInstances, request);
        if (supplier instanceof SelectedInstanceCallback &amp;&amp; serviceInstanceResponse.hasServer()) {
            ((SelectedInstanceCallback) supplier).selectedServiceInstance((ServiceInstance) serviceInstanceResponse.getServer());
        }

        return serviceInstanceResponse;
    }

    private Response&lt;ServiceInstance&gt; getInstanceResponse(List&lt;ServiceInstance&gt; instances, Request request) {
        if (instances.isEmpty()) {
            if (log.isWarnEnabled()) {
                log.warn("No servers available for service: " + this.serviceId);
            }
            return new EmptyResponse();
        }
        if (request instanceof DefaultRequest) {
            DefaultRequest&lt;RequestDataContext&gt; defaultRequest = (DefaultRequest) request;
            // 上下文获取请求头
            HttpHeaders headers = defaultRequest.getContext().getClientRequest().getHeaders();
            List&lt;String&gt; list = headers.get(TAG_HEADER);
            if (!CollectionUtils.isEmpty(list)) {
                String requestTag = list.get(0);
                for (ServiceInstance instance : instances) {
                    String str = instance.getMetadata().getOrDefault(TAG_HEADER, "");
                    if (requestTag.equals(str)) {
                        return new DefaultResponse(instance);
                    }
                }
                log.error(String.format("No servers available for service:%s,tag:%s ", this.serviceId, requestTag));
                return new EmptyResponse();
            }
        }

        int pos = Math.abs(this.position.incrementAndGet());
        ServiceInstance instance = instances.get(pos % instances.size());
        return new DefaultResponse(instance);
    }
}

</code></pre>
<p>这里需要实现ReactorServiceInstanceLoadBalancer接口，如果请求头带有标签则根据标签路由，否则使用默认的轮询算法。</p>
<p>还要把TagLoadBalancer用起来，所以需要<strong>定义一个配置类TagLoadBalancerConfig，并通过@LoadBalancerClients注解添加默认配置</strong>，代码如下：</p>
<pre><code class="language-java">/**
 * @Author: Ship
 * @Description:
 * @Date: Created in 2025/2/12
 */
public class TagLoadBalancerConfig {

    @Bean
    public ReactorLoadBalancer reactorTagLoadBalancer(Environment environment, LoadBalancerClientFactory loadBalancerClientFactory) {
        String name = environment.getProperty(LoadBalancerClientFactory.PROPERTY_NAME);
        return new TagLoadBalancer(loadBalancerClientFactory.getLazyProvider(name, ServiceInstanceListSupplier.class), name);
    }
}

@LoadBalancerClients(defaultConfiguration = {TagLoadBalancerConfig.class})
@SpringBootApplication
public class GatewayApplication {

    public static void main(String[] args) {
        SpringApplication.run(GatewayApplication.class, args);
    }

}
</code></pre>
<p>最后在application.yml文件添加网关路由配置</p>
<pre><code class="language-yml">spring:
  application:
    name: gateway
  cloud:
    nacos:
      config:
        server-addr: 127.0.0.1:8848
        namespace: dev
        group: DEFAULT_GROUP
      discovery:
        server-addr: 127.0.0.1:8848
        namespace: dev
    gateway:
      routes:
        - id: order-service
          uri: lb://order-service
          predicates:
            - Path=/order/**
          filters:
            - StripPrefix=1
server:
  port: 9000


</code></pre>
<h2 id="33-代码测试">3.3 代码测试</h2>
<ul>
<li>
<p>本地启动nacos后启动order（注意需要在idea设置环境变量<strong>tag=ship</strong>）和gateway服务，可以看到order服务已经成功注册了元数据</p>
<p><img src="https://img2024.cnblogs.com/blog/1167086/202502/1167086-20250214200126345-92449439.png" alt="image" loading="lazy"></p>
</li>
<li>
<p>然后用Postman请求网关http://localhost:9000/order/test</p>
</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/1167086/202502/1167086-20250214200756094-720647598.png" alt="image" loading="lazy"></p>
<p>可以看到请求成功路由到了order服务，说明根据tag路由成功了。</p>
<ul>
<li>
<p>去掉环境变量tag后重新启动Order服务，再次请求响应报文如下：</p>
<pre><code class="language-json">{
    "timestamp": "2025-02-14T12:10:44.294+00:00",
    "path": "/order/test",
    "status": 503,
    "error": "Service Unavailable",
    "requestId": "41651188-4"
}
</code></pre>
</li>
</ul>
<p>说明根据requst-tag找不到对应的服务实例，代码逻辑生效了。</p>
<h1 id="四总结">四、总结</h1>
<p>&nbsp;&nbsp;聪明的人已经发现了，本文只实现了网关路由到下游服务这部分的标签路由，下游服务A调服务B的标签路由并未实现，其实现方案也不难，只需要通过上下文传递+feign拦截器就可以做到全链路的标签路由，有兴趣的可以自己试试。<br><br>
&nbsp;&nbsp;本文代码已上传<a href="https://github.com/2YSP/custom-load-balancer" target="_blank" rel="noopener nofollow">github</a>，顺便推广下前段时间写的idea插件<a href="https://github.com/2YSP/CodeFaster" target="_blank" rel="noopener nofollow">CodeFaster</a>（快速生成常用流操作的代码，Marketplace搜索下载即可体验）😂。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.06265035528009259" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-14 20:44">2025-02-14 20:44</span>&nbsp;
<a href="https://www.cnblogs.com/2YSP">烟味i</a>&nbsp;
阅读(<span id="post_view_count">1</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18716104" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18716104);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18716104', targetLink: 'https://www.cnblogs.com/2YSP/p/18716104', title: 'SpringCloud自定义loadbalancer实现标签路由' })">举报</a>
</div>
        