
        <h2>
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wuhuacong/p/18663003" title="发布于 2025-01-09 23:00">
    <span role="heading" aria-level="2">一问一答学习PyQT6，对比WxPython和PyQt6的差异</span>
    

</a>

        </h2>
        <div class="postbody">
                <div id="cnblogs_post_description" style="display: none">
        
        在我的基于WxPython的跨平台框架完成后，对WxPython的灵活性以及强大功能有了很深的了解，在跨平台的桌面应用上我突然对PyQt6的开发也感兴趣，于是准备了开发环境学习PyQt 6，并对比下WxPython的差异来进行深入的了解，发现它们很多理念和做法是如此的类似。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>在我的基于WxPython的跨平台框架完成后，对WxPython的灵活性以及强大功能有了很深的了解，在跨平台的桌面应用上我突然对PyQt6的开发也感兴趣，于是准备了开发环境学习PyQt 6，并对比下WxPython的差异来进行深入的了解，发现它们很多理念和做法是如此的类似。</p>
<h3>1、pyqt6都有那些布局控件？</h3>
<p>PyQt6 提供了多种布局控件，帮助开发者轻松地将界面元素排列在窗口中。对比发现它们和WxPython简直是双胞胎一样非常相似，以下是常用的布局控件及其简要介绍：</p>
<h4>1） <strong>QHBoxLayout</strong> (水平布局)</h4>
<p><code>QHBoxLayout</code> 是一个水平布局管理器，它会将窗口中的控件从左到右地排列。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtWidgets <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> QWidget, QHBoxLayout, QPushButton

widget </span>=<span style="color: rgba(0, 0, 0, 1)"> QWidget()
layout </span>=<span style="color: rgba(0, 0, 0, 1)"> QHBoxLayout()

layout.addWidget(QPushButton(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Button 1</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))
layout.addWidget(QPushButton(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Button 2</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))

widget.setLayout(layout)
widget.show()</span></pre>
</div>
<h4>2）<strong>QVBoxLayout</strong> (垂直布局)</h4>
<p><code>QVBoxLayout</code> 是一个垂直布局管理器，它会将控件从上到下地排列。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtWidgets <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> QWidget, QVBoxLayout, QPushButton

widget </span>=<span style="color: rgba(0, 0, 0, 1)"> QWidget()
layout </span>=<span style="color: rgba(0, 0, 0, 1)"> QVBoxLayout()

layout.addWidget(QPushButton(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Button 1</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))
layout.addWidget(QPushButton(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Button 2</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))

widget.setLayout(layout)
widget.show()</span></pre>
</div>
<h4>3）<strong>QGridLayout</strong> (网格布局)</h4>
<p><code>QGridLayout</code> 是一个网格布局管理器，控件被排列在一个网格中，类似于表格。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtWidgets <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> QWidget, QGridLayout, QPushButton

widget </span>=<span style="color: rgba(0, 0, 0, 1)"> QWidget()
layout </span>=<span style="color: rgba(0, 0, 0, 1)"> QGridLayout()

layout.addWidget(QPushButton(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Button 1</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">), 0, 0)
layout.addWidget(QPushButton(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Button 2</span><span style="color: rgba(128, 0, 0, 1)">'</span>), 0, 1<span style="color: rgba(0, 0, 0, 1)">)
layout.addWidget(QPushButton(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Button 3</span><span style="color: rgba(128, 0, 0, 1)">'</span>), 1<span style="color: rgba(0, 0, 0, 1)">, 0)

widget.setLayout(layout)
widget.show()</span></pre>
</div>
<p>在 <strong>PyQt6</strong> 中，类似于 <strong>wxPython</strong> 的 <strong>GridBagSizer</strong>，即可以让控件跨行和跨列的布局功能，通常通过使用 <strong><code>QGridLayout</code></strong> 来实现。<code>QGridLayout</code> 允许你指定控件的位置和它们所占的行列范围，从而实现跨行和跨列的布局。</p>
<p><code>QGridLayout</code> 是 PyQt6 中的网格布局管理器，它允许控件按行列排列，你可以通过指定控件所在的行和列来控制它们的位置。如果需要让控件跨越多个行或列，可以通过设置控件的 <strong><code>rowSpan</code></strong> 和 <strong><code>columnSpan</code></strong> 来实现。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 添加控件，指定位置 (行, 列) 以及跨越的行和列</span>
layout.addWidget(QPushButton(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Button 1</span><span style="color: rgba(128, 0, 0, 1)">'</span>), 0, 0)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 第 1 个按钮</span>
layout.addWidget(QPushButton(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Button 2</span><span style="color: rgba(128, 0, 0, 1)">'</span>), 0, 1)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 第 2 个按钮</span>
layout.addWidget(QPushButton(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Button 3</span><span style="color: rgba(128, 0, 0, 1)">'</span>), 1, 0, 1, 2)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 第 3 个按钮跨越 1 行 2 列</span></pre>
</div>
<p>你还可以根据需求自由配置控件在 <code>QGridLayout</code> 中的位置，包括：</p>
<ul>
<li>控件的对齐方式：<code>Qt.Alignment</code>。</li>
<li>控件之间的间隔：<code>setHorizontalSpacing()</code> 和 <code>setVerticalSpacing()</code>。</li>
<li>设置行和列的固定大小或自适应大小：<code>setRowMinimumHeight()</code>、<code>setColumnMinimumWidth()</code> 等。</li>
</ul>
<h4>4）<strong>QFormLayout</strong> (表单布局)</h4>
<p><code>QFormLayout</code> 用于创建一个表单式的布局，控件和标签按“标签-控件”对的形式排列。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtWidgets <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> QWidget, QFormLayout, QLabel, QLineEdit

widget </span>=<span style="color: rgba(0, 0, 0, 1)"> QWidget()
layout </span>=<span style="color: rgba(0, 0, 0, 1)"> QFormLayout()

layout.addRow(QLabel(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Name:</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">), QLineEdit())
layout.addRow(QLabel(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Age:</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">), QLineEdit())

widget.setLayout(layout)
widget.show()</span></pre>
</div>
<h4>5）<strong>QStackedLayout</strong> (堆叠布局)</h4>
<p><code>QStackedLayout</code> 允许多个控件堆叠在一起，且一次只显示其中一个控件。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtWidgets <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> QWidget, QStackedLayout, QPushButton

widget </span>=<span style="color: rgba(0, 0, 0, 1)"> QWidget()
layout </span>=<span style="color: rgba(0, 0, 0, 1)"> QStackedLayout()

layout.addWidget(QPushButton(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Page 1</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))
layout.addWidget(QPushButton(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Page 2</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))

widget.setLayout(layout)
widget.show()

</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 切换页面</span>
layout.setCurrentIndex(1)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 切换到 Page 2</span></pre>
</div>
<h4>6）<strong>QSplitter</strong> (分割器)</h4>
<p><code>QSplitter</code> 允许用户通过拖动分隔条来调整控件的大小。通常用于布局中需要用户可调整分配空间的控件。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtWidgets <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> QWidget, QSplitter, QVBoxLayout, QPushButton
</span><span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtCore <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> Qt

widget </span>=<span style="color: rgba(0, 0, 0, 1)"> QWidget()
layout </span>=<span style="color: rgba(0, 0, 0, 1)"> QVBoxLayout()

splitter </span>=<span style="color: rgba(0, 0, 0, 1)"> QSplitter(Qt.Orientation.Horizontal)
splitter.addWidget(QPushButton(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Button 1</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))
splitter.addWidget(QPushButton(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Button 2</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))

layout.addWidget(splitter)
widget.setLayout(layout)
widget.show()</span></pre>
</div>
<p>如果对多个窗口放置在Splitter控件里面， 可以得到如下界面。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202501/8867-20250109225814398-1426929050.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h4>7）<strong>QBoxLayout</strong> (基础布局，QHBoxLayout 和 QVBoxLayout 的基类)</h4>
<p><code>QBoxLayout</code> 是 <code>QHBoxLayout</code> 和 <code>QVBoxLayout</code> 的基类，可以选择水平或垂直方向来排列控件。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtWidgets <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> QWidget, QBoxLayout, QPushButton
</span><span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtCore <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> Qt

widget </span>=<span style="color: rgba(0, 0, 0, 1)"> QWidget()
layout </span>=<span style="color: rgba(0, 0, 0, 1)"> QBoxLayout(QBoxLayout.Direction.LeftToRight)

layout.addWidget(QPushButton(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Button 1</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))
layout.addWidget(QPushButton(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Button 2</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))

widget.setLayout(layout)
widget.show()</span></pre>
</div>
<p>PyQt6 提供了多种布局管理器，能够灵活地处理不同控件之间的关系。常见的布局管理器包括 <code>QHBoxLayout</code>、<code>QVBoxLayout</code>、<code>QGridLayout</code>、<code>QFormLayout</code> 等。不同的布局管理器适用于不同的场景，帮助开发者更好地控制控件的排列和显示方式。</p>
<p>我整理了以上的代码，并且整合上面所有布局的案例代码在一个界面上，如下所示效果。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202501/8867-20250109215921158-1569778475.png" alt=""></p>
<p>而且PyQT6可以通过样式设置一些特别的效果，如下所示。</p>
<p>可以通过setStyle或者&nbsp;setStyleSheet 函数方式指定不同的界面效果。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(128, 0, 128, 1)">__name__</span> == <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">__main__</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">:
    app </span>=<span style="color: rgba(0, 0, 0, 1)"> QApplication(sys.argv)

    app.setStyle(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Fusion</span><span style="color: rgba(128, 0, 0, 1)">'</span>)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 设置样式</span>
    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> app.setStyle('Windows')</span>
    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> app.setStyle('WindowsVista')</span>
    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> app.setStyle('Macintosh')</span>
    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> app.setStyle('GTK')</span>
    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> app.setStyle('CleanLooks')</span>
    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> app.setStyle('Plastique')</span>

    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 设置背景颜色</span>
    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> app.setStyleSheet("QWidget { background-color: white; }") </span>
<span style="color: rgba(0, 0, 0, 1)">
    app.setStyleSheet(</span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
        QPushButton {
            background-color: #008CBA;
            color: white;
            font-size: 16px;
            padding: 10px 20px;
            border-radius: 5px;
            border: 2px solid #006F8C;
        }

        QPushButton:hover {
            background-color: #006F8C;
            border: 2px solid #008CBA;
        }

        QPushButton:pressed {
            background-color: #004F68;
            border: 2px solid #006F8C;
        }
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">)</span>

    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 创建窗口对象</span>
    form =<span style="color: rgba(0, 0, 0, 1)"> QWidgetExample()
    form.show()</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 启动应用程序的事件循环</span>
    sys.exit(app.<span style="color: rgba(0, 0, 255, 1)">exec</span>())</pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/8867/202501/8867-20250109220543577-1005917235.png" alt="" width="355" height="498" loading="lazy"></p>
<p>如果我们需要类似一个主窗口界面那样，可以实现如下效果。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202501/8867-20250109230004982-943297365.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h3>2、我对wxpython的控件比较了解，如果学习pyqt6，如何入手，对比介绍一下</h3>
<p>如果你已经对 wxPython 的控件比较熟悉，学习 PyQt6 会变得更加容易，因为这两个框架在很多方面有相似之处，但 PyQt6 提供了更多的功能和灵活性，尤其是在与 Qt 的集成方面。为了帮助你更顺利地过渡，下面我会通过对比两者来介绍 PyQt6 的核心概念和控件。</p>
<h4>1）<strong>应用程序和窗口</strong></h4>
<ul>
<li>
<p><strong>wxPython</strong>：</p>
<ul>
<li>创建应用程序使用 <code>wx.App</code>，创建窗口使用 <code>wx.Frame</code>。</li>
</ul>
</li>
<li>
<p><strong>PyQt6</strong>：</p>
<ul>
<li>创建应用程序使用 <code>QApplication</code>，创建窗口使用 <code>QWidget</code> 或者 <code>QMainWindow</code>。</li>
<li><code>QWidget</code> 是所有控件和窗口的基类，<code>QMainWindow</code> 是带有菜单、工具栏、状态栏的窗口。</li>
</ul>
<p><strong>对比：</strong></p>
<ul>
<li><code>wx.Frame</code> 和 <code>QMainWindow</code> 类似，都是用于创建主窗口，<code>QWidget</code> 则是 PyQt6 中的基本窗口组件。</li>
</ul>
</li>
</ul>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> wxPython</span>
<span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> wx
app </span>=<span style="color: rgba(0, 0, 0, 1)"> wx.App(False)
frame </span>= wx.Frame(None, wx.ID_ANY, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Hello wxPython</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
frame.Show()
app.MainLoop()</span></pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> PyQt6</span>
<span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtWidgets <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> QApplication, QMainWindow
app </span>=<span style="color: rgba(0, 0, 0, 1)"> QApplication([])
window </span>=<span style="color: rgba(0, 0, 0, 1)"> QMainWindow()
window.setWindowTitle(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Hello PyQt6</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
window.show()
app.</span><span style="color: rgba(0, 0, 255, 1)">exec</span>()</pre>
</div>
<h4>2） <strong>布局管理</strong></h4>
<ul>
<li>
<p><strong>wxPython</strong>：</p>
<ul>
<li>常用布局管理器有 <code>BoxSizer</code>、<code>GridBagSizer</code>、<code>GridSizer</code> 等。</li>
</ul>
</li>
<li>
<p><strong>PyQt6</strong>：</p>
<ul>
<li>常用布局管理器有 <code>QVBoxLayout</code>、<code>QHBoxLayout</code>、<code>QGridLayout</code>、<code>QFormLayout</code>、<code>QStackedLayout</code> 等。</li>
</ul>
<p><strong>对比：</strong></p>
<ul>
<li><strong><code>BoxSizer</code></strong> 对应 PyQt6 的 <strong><code>QBoxLayout</code></strong>（<code>QHBoxLayout</code> 和 <code>QVBoxLayout</code> 是它的具体实现），它们都用于水平或垂直排列控件。</li>
<li><strong><code>GridBagSizer</code></strong> 对应 PyQt6 的 <strong><code>QGridLayout</code></strong>，它允许控件跨行和跨列。</li>
</ul>
</li>
</ul>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> wxPython</span>
sizer =<span style="color: rgba(0, 0, 0, 1)"> wx.BoxSizer(wx.HORIZONTAL)
sizer.Add(wx.Button(frame, label</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Button 1</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">))
sizer.Add(wx.Button(frame, label</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Button 2</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">))
frame.SetSizer(sizer)</span></pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> PyQt6</span>
<span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtWidgets <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> QVBoxLayout, QPushButton
layout </span>=<span style="color: rgba(0, 0, 0, 1)"> QVBoxLayout()
layout.addWidget(QPushButton(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Button 1</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">))
layout.addWidget(QPushButton(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Button 2</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">))
window.setLayout(layout)</span></pre>
</div>
<p>上面PyQt6程序截图的案例，我综合了各个PyQT6的各个布局处理，整合在一个窗口里面，代码如下所示。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> sys
</span><span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtWidgets <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> QApplication, QMainWindow, QWidget, QToolBar, QStatusBar, QMenuBar, QDialog, QLabel, QLineEdit, QTextEdit, QPushButton
</span><span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtGui <span style="color: rgba(0, 0, 255, 1)">import</span> QAction, QIcon  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 导入 QIcon 用于设置图标</span>
<span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtCore <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> Qt
</span><span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtWidgets <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> QLayout, QBoxLayout, QHBoxLayout, QVBoxLayout,QGridLayout, QFormLayout, QStackedLayout, QSplitter, QScrollArea, QSizePolicy, QSpacerItem, QSizePolicy, QMessageBox
    
</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> QWidgetExample(QWidget):
    </span><span style="color: rgba(0, 0, 255, 1)">def</span> <span style="color: rgba(128, 0, 128, 1)">__init__</span><span style="color: rgba(0, 0, 0, 1)">(self):
        super().</span><span style="color: rgba(128, 0, 128, 1)">__init__</span><span style="color: rgba(0, 0, 0, 1)">()
        self.setWindowTitle(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">QWidget Example</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)

        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> QBoxLayout</span>
        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> main_layout = QBoxLayout(QBoxLayout.Direction.LefoRight) # 0</span>
        main_layout = QVBoxLayout() <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">1</span>
<span style="color: rgba(0, 0, 0, 1)">
        btn_widget </span>=<span style="color: rgba(0, 0, 0, 1)"> QWidget()
        layout_btn </span>= QHBoxLayout() <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">2</span>
        layout_btn.addWidget(QPushButton(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Button 1</span><span style="color: rgba(128, 0, 0, 1)">'</span>), stretch=1<span style="color: rgba(0, 0, 0, 1)">)
        layout_btn.addWidget(QPushButton(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Button 2</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))
        btn_widget.setLayout(layout_btn)
        main_layout.addWidget(btn_widget)

        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> QGridLayout</span>
        grid_widget =<span style="color: rgba(0, 0, 0, 1)"> QWidget()
        layout_grid </span>= QGridLayout() <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">3</span>
        layout_grid.addWidget(QPushButton(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Button 1</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">), 0, 0)
        layout_grid.addWidget(QPushButton(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Button 2</span><span style="color: rgba(128, 0, 0, 1)">'</span>), 0, 1<span style="color: rgba(0, 0, 0, 1)">)
        layout_grid.addWidget(QPushButton(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Button 3</span><span style="color: rgba(128, 0, 0, 1)">'</span>), 1, 0, 1, 2)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 第 3 个按钮跨越 1 行 2 列</span>
<span style="color: rgba(0, 0, 0, 1)">        grid_widget.setLayout(layout_grid)
        main_layout.addWidget(grid_widget)

        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">form layout</span>
        form_widget =<span style="color: rgba(0, 0, 0, 1)"> QWidget()
        layout_form </span>= QFormLayout() <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">4</span>
        layout_form.addRow(QLabel(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Name:</span><span style="color: rgba(128, 0, 0, 1)">'</span>), QLineEdit(placeholderText=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Enter your name</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))
        layout_form.addRow(QLabel(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Age:</span><span style="color: rgba(128, 0, 0, 1)">'</span>), QLineEdit( text=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">25</span><span style="color: rgba(128, 0, 0, 1)">'</span>, readOnly=<span style="color: rgba(0, 0, 0, 1)">True))
        layout_form.addRow(QLabel(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Note:</span><span style="color: rgba(128, 0, 0, 1)">'</span>), QTextEdit(placeholderText=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Enter your note</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))
        button </span>= QPushButton(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Submit</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
        button.setToolTip(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Click to submit</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
        button.clicked.connect(self.on_button_click)
        layout_form.addRow(button)
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 设置字段增长策略，使输入控件可以拉伸</span>
<span style="color: rgba(0, 0, 0, 1)">        layout_form.setFieldGrowthPolicy(QFormLayout.FieldGrowthPolicy.ExpandingFieldsGrow)
        form_widget.setLayout(layout_form)
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 添加到布局中</span>
<span style="color: rgba(0, 0, 0, 1)">        main_layout.addWidget(form_widget)

        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">stacked layout</span>
        stacked_widget =<span style="color: rgba(0, 0, 0, 1)"> QWidget()
        layout_stacked </span>= QStackedLayout() <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">5</span>
        layout_stacked.addWidget(QPushButton(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Page 1</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))
        layout_stacked.addWidget(QPushButton(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Page 2</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 切换页面</span>
        layout_stacked.setCurrentIndex(1)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 切换到 Page 2</span>
<span style="color: rgba(0, 0, 0, 1)">        stacked_widget.setLayout(layout_stacked)
        main_layout.addWidget(stacked_widget)
            
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">QSplitter</span>
        splitter_widget =<span style="color: rgba(0, 0, 0, 1)"> QWidget()
        layout_splitter </span>=<span style="color: rgba(0, 0, 0, 1)"> QVBoxLayout()
        splitter </span>=<span style="color: rgba(0, 0, 0, 1)"> QSplitter(Qt.Orientation.Horizontal)
        splitter.addWidget(QPushButton(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Left</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))
        splitter.addWidget(QPushButton(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Right</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))
        layout_splitter.addWidget(splitter)
        layout_splitter.setStretchFactor(splitter, </span>1<span style="color: rgba(0, 0, 0, 1)">)
        splitter_widget.setLayout(layout_splitter)
        main_layout.addWidget(splitter_widget)

        self.setLayout(main_layout)
        
    </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> on_button_click(self):
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Button clicked</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)

    </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> closeEvent(self, event):
        reply </span>= QMessageBox.question(self, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Message</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">,
                    </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Are you sure to quit?</span><span style="color: rgba(128, 0, 0, 1)">"</span>, QMessageBox.StandardButton.Yes |<span style="color: rgba(0, 0, 0, 1)">
                    QMessageBox.StandardButton.No, QMessageBox.StandardButton.No)

        </span><span style="color: rgba(0, 0, 255, 1)">if</span> reply ==<span style="color: rgba(0, 0, 0, 1)"> QMessageBox.StandardButton.Yes:
            event.accept()
        </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
            event.ignore()

</span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(128, 0, 128, 1)">__name__</span> == <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">__main__</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">:
    app </span>=<span style="color: rgba(0, 0, 0, 1)"> QApplication(sys.argv)
    app.setStyle(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Fusion</span><span style="color: rgba(128, 0, 0, 1)">'</span>)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 设置样式</span>
    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 创建窗口对象</span>
    form =<span style="color: rgba(0, 0, 0, 1)"> QWidgetExample()
    form.show()</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 启动应用程序的事件循环</span>
    sys.exit(app.<span style="color: rgba(0, 0, 255, 1)">exec</span>())</pre>
</div>
<h4>3) <strong>事件和信号槽机制</strong></h4>
<ul>
<li>
<p><strong>wxPython</strong>：</p>
<ul>
<li>使用事件绑定（<code>Bind</code>）将事件与处理函数连接起来。例如，<code>EVT_BUTTON</code> 处理按钮点击事件。</li>
</ul>
</li>
<li>
<p><strong>PyQt6</strong>：</p>
<ul>
<li>使用信号和槽机制。控件发出信号，其他控件（或类）可以通过槽（方法）连接并响应这些信号。</li>
<li>在 PyQt 中，信号和槽的连接更灵活，可以通过 <code>connect()</code> 方法绑定。</li>
</ul>
<p><strong>对比：</strong></p>
<ul>
<li>在事件处理上，PyQt6 的信号槽机制比 wxPython 的事件机制更加模块化和松耦合。</li>
</ul>
</li>
</ul>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> wxPython</span>
button.Bind(wx.EVT_BUTTON, on_button_click)</pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> PyQt6</span>
button.clicked.connect(on_button_click)</pre>
</div>
<h4>4)&nbsp;<strong>控件和小部件</strong></h4>
<ul>
<li>
<p><strong>wxPython</strong>：</p>
<ul>
<li>提供的常用控件有：<code>wx.Button</code>, <code>wx.TextCtrl</code>, <code>wx.ListCtrl</code>, <code>wx.ComboBox</code> 等。</li>
</ul>
</li>
<li>
<p><strong>PyQt6</strong>：</p>
<ul>
<li>提供的常用控件有：<code>QPushButton</code>, <code>QTextEdit</code>, <code>QListView</code>, <code>QComboBox</code> 等。</li>
<li>PyQt6 的控件通常会比 wxPython 的控件具有更多的功能和更丰富的自定义选项。</li>
</ul>
<p><strong>对比：</strong></p>
<ul>
<li><code>wx.Button</code> 与 <code>QPushButton</code> 类似，<code>wx.TextCtrl</code> 与 <code>QTextEdit</code> 类似，<code>wx.ComboBox</code> 与 <code>QComboBox</code> 类似。</li>
<li>在 PyQt6 中，控件支持更丰富的样式和自定义，可以通过 <code>QStyle</code> 和 <code>QPainter</code> 进行更精细的绘制。&nbsp;</li>
</ul>
</li>
</ul>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> wxPython</span>
text_ctrl = wx.TextCtrl(frame)</pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> PyQt6</span>
text_edit = QTextEdit()</pre>
</div>
<h4>5)&nbsp;<strong>对话框和模态</strong></h4>
<ul>
<li>
<p><strong>wxPython</strong>：</p>
<ul>
<li>使用 <code>wx.Dialog</code> 来创建自定义对话框，使用 <code>ShowModal()</code> 来展示模态对话框。</li>
</ul>
</li>
<li>
<p><strong>PyQt6</strong>：</p>
<ul>
<li>使用 <code>QDialog</code> 来创建对话框，使用 <code>exec()</code> 来展示模态对话框。</li>
</ul>
<p><strong>对比：</strong></p>
<ul>
<li>PyQt6 的对话框和 wxPython 相似，但 <code>exec()</code> 方法在 PyQt6 中表示模态对话框的显示，而在 wxPython 中是 <code>ShowModal()</code>。</li>
</ul>
</li>
</ul>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> wxPython</span>
dialog = wx.MessageDialog(frame, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Hello</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Greeting</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, wx.OK)
dialog.ShowModal()</span></pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> PyQt6</span>
<span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtWidgets <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> QDialog, QVBoxLayout, QPushButton
dialog </span>=<span style="color: rgba(0, 0, 0, 1)"> QDialog()
layout </span>=<span style="color: rgba(0, 0, 0, 1)"> QVBoxLayout()
layout.addWidget(QPushButton(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">OK</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))
dialog.setLayout(layout)
dialog.</span><span style="color: rgba(0, 0, 255, 1)">exec</span>()</pre>
</div>
<h4>6)&nbsp;<strong>样式和主题</strong></h4>
<ul>
<li>
<p><strong>wxPython</strong>：</p>
<ul>
<li>支持系统的原生控件样式，也可以通过 <code>wx.SystemSettings</code> 和 <code>wx.ArtProvider</code> 来进行主题自定义。</li>
</ul>
</li>
<li>
<p><strong>PyQt6</strong>：</p>
<ul>
<li>使用 <strong>QSS (Qt Style Sheets)</strong> 来自定义控件的外观，类似于 CSS。PyQt6 提供了强大的样式定制能力。</li>
</ul>
<p><strong>对比：</strong></p>
<ul>
<li>PyQt6 的样式机制更接近 Web 开发中的 CSS，使用 QSS 使得界面定制更具灵活性和一致性。</li>
</ul>
</li>
</ul>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> wxPython</span>
frame.SetBackgroundColour(wx.Colour(255, 255, 255))</pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> PyQt6</span>
app.setStyleSheet(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">QWidget { background-color: white; }</span><span style="color: rgba(128, 0, 0, 1)">"</span>)</pre>
</div>
<p>&nbsp;</p>
<h3>3、wxpython中的wx.MessageBox消息对话框，以及打开文件对话框、字体对话框、颜色对话框等常用对话框，如何在PyQT6中实现</h3>
<p>在 PyQt6 中，你可以使用 <code>QMessageBox</code> 来替代 wxPython 中的 <code>wx.MessageBox</code>，并使用不同的对话框组件来替代文件选择对话框、字体对话框、颜色对话框等。下面是这些常用对话框在 PyQt6 中的实现示例：</p>
<h4>1） <strong>消息对话框 (<code>QMessageBox</code>)</strong></h4>
<p>在 PyQt6 中，你可以使用 <code>QMessageBox</code> 来创建类似于 <code>wx.MessageBox</code> 的消息框。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtWidgets <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> QApplication, QMessageBox, QPushButton

</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> show_message_box():
    app </span>=<span style="color: rgba(0, 0, 0, 1)"> QApplication([])

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 创建消息对话框</span>
    msg =<span style="color: rgba(0, 0, 0, 1)"> QMessageBox()
    msg.setIcon(QMessageBox.Icon.Information)  </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 设置图标</span>
    msg.setText(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">This is an info message.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    msg.setWindowTitle(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Info</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    msg.setStandardButtons(QMessageBox.StandardButton.Ok </span>|<span style="color: rgba(0, 0, 0, 1)"> QMessageBox.StandardButton.Cancel)

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 显示对话框并获取响应</span>
    response = msg.<span style="color: rgba(0, 0, 255, 1)">exec</span><span style="color: rgba(0, 0, 0, 1)">()
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> response ==<span style="color: rgba(0, 0, 0, 1)"> QMessageBox.StandardButton.Ok:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">OK clicked</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Cancel clicked</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

    app.</span><span style="color: rgba(0, 0, 255, 1)">exec</span><span style="color: rgba(0, 0, 0, 1)">()

show_message_box()</span></pre>
</div>
<h4>2）<strong>打开文件对话框 (<code>QFileDialog</code>)</strong></h4>
<p>在 PyQt6 中，<code>QFileDialog</code> 用于打开和保存文件，类似于 wxPython 中的 <code>wx.FileDialog</code>。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtWidgets <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> QApplication, QFileDialog, QPushButton

</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> open_file_dialog():
    app </span>=<span style="color: rgba(0, 0, 0, 1)"> QApplication([])

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 创建打开文件对话框</span>
    options =<span style="color: rgba(0, 0, 0, 1)"> QFileDialog.Option.ReadOnly
    file_name, _ </span>= QFileDialog.getOpenFileName(None, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Open File</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">""</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">All Files (*)</span><span style="color: rgba(128, 0, 0, 1)">"</span>, options=<span style="color: rgba(0, 0, 0, 1)">options)

    </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> file_name:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">File selected: {file_name}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">No file selected</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

    app.</span><span style="color: rgba(0, 0, 255, 1)">exec</span><span style="color: rgba(0, 0, 0, 1)">()

open_file_dialog()</span></pre>
</div>
<h4>3） <strong>字体对话框 (<code>QFontDialog</code>)</strong></h4>
<p><code>QFontDialog</code> 用于选择字体，在 PyQt6 中的使用方式类似于 wxPython 中的 <code>wx.FontDialog</code>。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtWidgets <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> QApplication, QFontDialog, QPushButton

</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> font_dialog():
    app </span>=<span style="color: rgba(0, 0, 0, 1)"> QApplication([])

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 创建字体对话框</span>
    font, ok =<span style="color: rgba(0, 0, 0, 1)"> QFontDialog.getFont()

    </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> ok:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Selected font: {font.family()}, size: {font.pointSize()}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">No font selected</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

    app.</span><span style="color: rgba(0, 0, 255, 1)">exec</span><span style="color: rgba(0, 0, 0, 1)">()

font_dialog()</span></pre>
</div>
<h4>4）<strong>颜色对话框 (<code>QColorDialog</code>)</strong></h4>
<p><code>QColorDialog</code> 用于选择颜色，类似于 wxPython 中的 <code>wx.ColourDialog</code>。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtWidgets <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> QApplication, QColorDialog, QPushButton

</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> color_dialog():
    app </span>=<span style="color: rgba(0, 0, 0, 1)"> QApplication([])

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 创建颜色对话框</span>
    color =<span style="color: rgba(0, 0, 0, 1)"> QColorDialog.getColor()

    </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> color.isValid():
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Selected color: {color.name()}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">No color selected</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

    app.</span><span style="color: rgba(0, 0, 255, 1)">exec</span><span style="color: rgba(0, 0, 0, 1)">()

color_dialog()</span></pre>
</div>
<h4>5） <strong>文件保存对话框 (<code>QFileDialog</code>)</strong></h4>
<p>保存文件对话框也使用 <code>QFileDialog</code>，通过指定保存选项来实现。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtWidgets <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> QApplication, QFileDialog

</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> save_file_dialog():
    app </span>=<span style="color: rgba(0, 0, 0, 1)"> QApplication([])

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 创建保存文件对话框</span>
    file_name, _ = QFileDialog.getSaveFileName(None, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Save File</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">""</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Text Files (*.txt);;All Files (*)</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

    </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> file_name:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">File will be saved as: {file_name}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">No file selected for saving</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

    app.</span><span style="color: rgba(0, 0, 255, 1)">exec</span><span style="color: rgba(0, 0, 0, 1)">()

save_file_dialog()</span></pre>
</div>
<p>在 wxPython 中，可以使用 <code>wx.DirDialog</code> 来选择目录。在 PyQt6 中，<code>QFileDialog</code> 也支持目录选择，只需要指定 <code>FileMode</code> 为 <code>QFileDialog.Directory</code>。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtWidgets <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> QApplication, QFileDialog, QPushButton

</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> directory_dialog():
    app </span>=<span style="color: rgba(0, 0, 0, 1)"> QApplication([])

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 创建选择目录的对话框</span>
    directory = QFileDialog.getExistingDirectory(None, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Select Directory</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

    </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> directory:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Selected directory: {directory}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">No directory selected</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

    app.</span><span style="color: rgba(0, 0, 255, 1)">exec</span><span style="color: rgba(0, 0, 0, 1)">()

directory_dialog()</span></pre>
</div>
<p>总结</p>
<ul>
<li><code>wx.MessageBox</code> -&gt; <code>QMessageBox</code></li>
<li><code>wx.FileDialog</code> -&gt; <code>QFileDialog</code>（同样用于打开和保存文件）</li>
<li><code>wx.FontDialog</code> -&gt; <code>QFontDialog</code></li>
<li><code>wx.ColourDialog</code> -&gt; <code>QColorDialog</code></li>
</ul>
<p>这些对话框的功能和 PyQt6 中的相应控件类似，基本上可以通过这些标准控件实现与 wxPython 相同的效果。</p>
<p>&nbsp;</p>
<h3>4、wxpython的控件和pyQT的常用控件对比一下</h3>
<p>常用控件包括标签、单行文本、多行文本、日期、数值、单选框、复选框、Combobox下拉列表、树形下拉列表、图片显示等常用控件。</p>
<p>以下是 <strong>wxPython</strong> 和 <strong>PyQt6</strong> 中常用控件的对比，涵盖标签、文本框、日期、数值、单选框、复选框、下拉列表、树形控件、图片显示等控件的对应关系及其使用示例。</p>
<h4>1） <strong>标签（Label）</strong></h4>
<ul>
<li><strong>wxPython</strong>: 使用 <code>wx.StaticText</code></li>
<li><strong>PyQt6</strong>: 使用 <code>QLabel</code></li>
</ul>
<h4>2）<strong>单行文本框（Single-line Text）</strong></h4>
<ul>
<li><strong>wxPython</strong>: 使用 <code>wx.TextCtrl</code>，并设置 <code>style=wx.TE_SINGLELINE</code></li>
<li><strong>PyQt6</strong>: 使用 <code>QLineEdit</code></li>
</ul>
<h4>3）<strong>多行文本框（Multi-line Text）</strong></h4>
<ul>
<li><strong>wxPython</strong>: 使用 <code>wx.TextCtrl</code>，并设置 <code>style=wx.TE_MULTILINE</code></li>
<li><strong>PyQt6</strong>: 使用 <code>QTextEdit</code></li>
</ul>
<h4>4）<strong>日期选择框（Date Picker）</strong></h4>
<ul>
<li><strong>wxPython</strong>: 使用 <code>wx.adv.DatePickerCtrl</code></li>
<li><strong>PyQt6</strong>: 使用 <code>QDateEdit</code></li>
</ul>
<h4>5）<strong>数值输入框（Number Input）</strong></h4>
<ul>
<li><strong>wxPython</strong>: 使用 <code>wx.TextCtrl</code> 或 <code><code>wx.SpinCtrl或者&nbsp;wx.SpinCtrlDouble<br></code></code>（带有上下箭头的数值框）</li>
<li><strong>PyQt6</strong>: 使用 <code>QSpinBox</code> 或 <code>QDoubleSpinBox</code></li>

</ul>
<h4>6）<strong>单选框（Radio Button）</strong></h4>
<ul>
<li><strong>wxPython</strong>: 使用 <code>wx.RadioButton</code></li>
<li><strong>PyQt6</strong>: 使用 <code>QRadioButton</code></li>

</ul>
<p><code>wx.RadioBox</code> 是一个带有多个单选按钮的控件，允许用户在多个选项中选择一个。在 PyQt6 中，可以使用 <code>QRadioButton</code> 与 <code>QButtonGroup</code> 来实现类似的效果。</p>
<h4>7） <strong>复选框（Check Box）</strong></h4>
<ul>
<li><strong>wxPython</strong>: 使用 <code>wx.CheckBox</code></li>
<li><strong>PyQt6</strong>: 使用 <code>QCheckBox</code></li>

</ul>
<p><code>wx.CheckListBox</code> 允许用户在多个选项中选择多个项。PyQt6 中没有直接对应的控件，但可以使用 <code>QCheckBox</code>&nbsp;和布局控件组合来实现类似的效果。</p>
<p>如果要实现类似FieldSet的效果，如下所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202501/8867-20250109225544776-1498429506.png" alt="" loading="lazy"></p>
<p>代码如下所示</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtWidgets <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> QApplication, QWidget, QRadioButton, QCheckBox, QVBoxLayout, QGroupBox, QButtonGroup, QFormLayout
</span><span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtCore <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> Qt

</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> FieldSetExample(QWidget):
    </span><span style="color: rgba(0, 0, 255, 1)">def</span> <span style="color: rgba(128, 0, 128, 1)">__init__</span><span style="color: rgba(0, 0, 0, 1)">(self):
        super().</span><span style="color: rgba(128, 0, 128, 1)">__init__</span><span style="color: rgba(0, 0, 0, 1)">()

        self.setWindowTitle(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">FieldSet Example</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 创建单选按钮</span>
        self.radio1 = QRadioButton(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Option 1</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        self.radio2 </span>= QRadioButton(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Option 2</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 创建复选框</span>
        self.check1 = QCheckBox(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Additional Option 1</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        self.check2 </span>= QCheckBox(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Additional Option 2</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 创建按钮组以保证单选功能</span>
        self.button_group =<span style="color: rgba(0, 0, 0, 1)"> QButtonGroup(self)
        self.button_group.addButton(self.radio1)
        self.button_group.addButton(self.radio2)
        
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 创建 QGroupBox 来实现 FieldSet 效果</span>
        group_box = QGroupBox(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Select Your Options</span><span style="color: rgba(128, 0, 0, 1)">"</span>)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 设置标题</span>
        layout =<span style="color: rgba(0, 0, 0, 1)"> QVBoxLayout()
        layout.addWidget(self.radio1)
        layout.addWidget(self.radio2)
        group_box.setLayout(layout)
        
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 创建另一个 QGroupBox 来显示复选框</span>
        check_box_group = QGroupBox(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Additional Options</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        check_layout </span>=<span style="color: rgba(0, 0, 0, 1)"> QVBoxLayout()
        check_layout.addWidget(self.check1)
        check_layout.addWidget(self.check2)
        check_box_group.setLayout(check_layout)

        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 设置主布局</span>
        main_layout =<span style="color: rgba(0, 0, 0, 1)"> QFormLayout()
        main_layout.addWidget(group_box)
        main_layout.addWidget(check_box_group)
        
        self.setLayout(main_layout)

        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 显示窗口</span>
<span style="color: rgba(0, 0, 0, 1)">        self.show()

app </span>=<span style="color: rgba(0, 0, 0, 1)"> QApplication([])
window </span>=<span style="color: rgba(0, 0, 0, 1)"> FieldSetExample()
app.</span><span style="color: rgba(0, 0, 255, 1)">exec</span>()</pre>
</div>
<p>&nbsp;</p>
<h4>8）<strong>下拉列表（ComboBox）</strong></h4>
<ul>
<li><strong>wxPython</strong>: 使用 <code>wx.ComboBox</code></li>
<li><strong>PyQt6</strong>: 使用 <code>QComboBox</code></li>
</ul>
<p>在 <code>QComboBox</code> 中添加自定义对象，如果对象类是&nbsp;<code>CListItem(Text, Value)</code>，可以通过将对象作为 <code>QComboBox</code> 的项来存储。你可以创建一个自定义的类（例如 <code>CListItem</code>），并使用 <code>addItem()</code> 方法将自定义对象添加到 <code>QComboBox</code> 中。</p>
<p>为了将 <code>CListItem</code> 添加到 <code>QComboBox</code>，你需要确保在添加项时使用自定义的文本显示，而在获取选中项时能够正确地获取到对应的 <code>Value</code>。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtWidgets <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> QApplication, QWidget, QComboBox, QVBoxLayout
</span><span style="color: rgba(0, 0, 255, 1)">from</span> PyQt6.QtCore <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> Qt

</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> CListItem:
    </span><span style="color: rgba(0, 0, 255, 1)">def</span> <span style="color: rgba(128, 0, 128, 1)">__init__</span><span style="color: rgba(0, 0, 0, 1)">(self, text, value):
        self.text </span>=<span style="color: rgba(0, 0, 0, 1)"> text
        self.value </span>=<span style="color: rgba(0, 0, 0, 1)"> value

    </span><span style="color: rgba(0, 0, 255, 1)">def</span> <span style="color: rgba(128, 0, 128, 1)">__repr__</span><span style="color: rgba(0, 0, 0, 1)">(self):
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">CListItem(text={self.text}, value={self.value})</span><span style="color: rgba(128, 0, 0, 1)">"</span>

<span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> MyWindow(QWidget):
    </span><span style="color: rgba(0, 0, 255, 1)">def</span> <span style="color: rgba(128, 0, 128, 1)">__init__</span><span style="color: rgba(0, 0, 0, 1)">(self):
        super().</span><span style="color: rgba(128, 0, 128, 1)">__init__</span><span style="color: rgba(0, 0, 0, 1)">()
        self.initUI()

    </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> initUI(self):
        layout </span>=<span style="color: rgba(0, 0, 0, 1)"> QVBoxLayout(self)

        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 创建 QComboBox</span>
        combo =<span style="color: rgba(0, 0, 0, 1)"> QComboBox(self)
        
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 创建自定义对象 CListItem 并添加到 QComboBox</span>
        item1 = CListItem(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Item 1</span><span style="color: rgba(128, 0, 0, 1)">"</span>, 100<span style="color: rgba(0, 0, 0, 1)">)
        item2 </span>= CListItem(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Item 2</span><span style="color: rgba(128, 0, 0, 1)">"</span>, 200<span style="color: rgba(0, 0, 0, 1)">)
        item3 </span>= CListItem(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Item 3</span><span style="color: rgba(128, 0, 0, 1)">"</span>, 300<span style="color: rgba(0, 0, 0, 1)">)
        
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 使用 addItem 添加文本显示的同时存储 CListItem 对象</span>
        combo.addItem(item1.text, item1)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> item1.text 是显示文本，item1 是存储对象</span>
        combo.addItem(item2.text, item2)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> item2.text 是显示文本，item2 是存储对象</span>
        combo.addItem(item3.text, item3)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> item3.text 是显示文本，item3 是存储对象</span>
        
        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 连接槽函数，获取选中的 CListItem 对象</span>
<span style="color: rgba(0, 0, 0, 1)">        combo.currentIndexChanged.connect(self.on_combobox_changed)
        
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 将 QComboBox 添加到布局中</span>
<span style="color: rgba(0, 0, 0, 1)">        layout.addWidget(combo)
        self.setLayout(layout)

    </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> on_combobox_changed(self, index):
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 获取当前选中的 CListItem 对象</span>
        combo =<span style="color: rgba(0, 0, 0, 1)"> self.sender()
        item </span>=<span style="color: rgba(0, 0, 0, 1)"> combo.itemData(index)
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> item:
            </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Selected item: {item} with value {item.value}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

app </span>=<span style="color: rgba(0, 0, 0, 1)"> QApplication([])
window </span>=<span style="color: rgba(0, 0, 0, 1)"> MyWindow()
window.setWindowTitle(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">QComboBox with Custom Objects</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
window.resize(</span>300, 150<span style="color: rgba(0, 0, 0, 1)">)
window.show()
app.</span><span style="color: rgba(0, 0, 255, 1)">exec</span>()</pre>
</div>
<p>&nbsp;</p>
<h4>9）<strong>树形控件（Tree Control）</strong></h4>
<ul>
<li><strong>wxPython</strong>: 使用 <code>wx.TreeCtrl</code></li>
<li><strong>PyQt6</strong>: 使用 <code>QTreeView</code> 与 <code>QStandardItemModel</code></li>
</ul>
<h4>10）<strong>图片显示（Image Display）</strong></h4>
<ul>
<li><strong>wxPython</strong>: 使用 <code>wx.StaticBitmap</code></li>
<li><strong>PyQt6</strong>: 使用 <code>QLabel</code> 或 <code>QPixmap</code></li>
</ul>
<h4>&nbsp;<strong>总结</strong></h4>
<table style="height: 358px; width: 800px">
<thead>
<tr><th>wxPython 控件</th><th>PyQt6 控件</th><th>说明</th></tr>
</thead>
<tbody>
<tr>
<td><code>wx.StaticText</code></td>
<td><code>QLabel</code></td>
<td>标签</td>
</tr>
<tr>
<td><code>wx.TextCtrl</code></td>
<td><code>QLineEdit</code></td>
<td>单行文本框</td>
</tr>
<tr>
<td><code>wx.TextCtrl</code> (multiline)</td>
<td><code>QTextEdit</code></td>
<td>多行文本框</td>
</tr>
<tr>
<td><code>wx.adv.DatePickerCtrl</code></td>
<td><code>QDateEdit</code></td>
<td>日期选择框</td>
</tr>
<tr>
<td><code>wx.SpinCtrl</code></td>
<td><code>QSpinBox</code>, <code>QDoubleSpinBox</code></td>
<td>数值输入框</td>
</tr>
<tr>
<td><code>wx.RadioButton</code></td>
<td><code>QRadioButton</code></td>
<td>单选框</td>
</tr>
<tr>
<td><code>wx.CheckBox</code></td>
<td><code>QCheckBox</code></td>
<td>复选框</td>
</tr>
<tr>
<td><code>wx.ComboBox</code></td>
<td><code>QComboBox</code></td>
<td>下拉列表</td>
</tr>
<tr>
<td><code>wx.TreeCtrl</code></td>
<td><code>QTreeView</code>, <code>QStandardItemModel</code></td>
<td>树形控件</td>
</tr>
<tr>
<td><code>wx.StaticBitmap</code></td>
<td><code>QLabel</code> with <code>QPixmap</code></td>
<td>图片显示</td>
</tr>
</tbody>
</table>
<p>通过这些对比，你可以更容易地在 PyQt6 中找到对应的控件，并使用相似的方式构建用户界面。</p>
<p>&nbsp;</p>
</div>
<div id="MySignature" role="contentinfo">
    <div style="border-right-color: #cccccc; border-right-width: 1px; border-right-style: solid; padding-right: 5px; border-top-color: #cccccc; border-top-width: 1px; border-top-style: solid; padding-left: 4px; font-size: 13px; padding-bottom: 4px; border-left-color: #cccccc; border-left-width: 1px; border-left-style: solid; width: 98%; padding-top: 4px; border-bottom-color: #cccccc; border-bottom-width: 1px; border-bottom-style: solid; background-color: #eeeeee;">
    <img src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif" align="top" alt="">
    <span style="color: #000000"><span class="Apple-tab-span" style="white-space: pre"></span>
     专注于代码生成工具、.Net/.NetCore 框架架构及软件开发，以及各种Vue.js的前端技术应用。著有Winform开发框架/混合式开发框架、微信开发框架、Bootstrap开发框架、ABP开发框架、SqlSugar开发框架等框架产品。
     <br>&nbsp;&nbsp;转载请注明出处：撰写人：伍华聪&nbsp;&nbsp;<a href="http://www.iqidi.com/" target="_blank">http://www.iqidi.com</a>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span></div>
</div>
<div class="clear"></div>

        </div>
        <p class="postfoot">
            posted on 
<span id="post-date" data-last-update-days="0.051438545377314814" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-09 23:04">2025-01-09 23:00</span>&nbsp;
<a href="https://www.cnblogs.com/wuhuacong">伍华聪</a>&nbsp;
阅读(<span id="post_view_count">8</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18663003" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18663003);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18663003', targetLink: 'https://www.cnblogs.com/wuhuacong/p/18663003', title: '一问一答学习PyQT6，对比WxPython和PyQt6的差异' })">举报</a>

        </p>
    