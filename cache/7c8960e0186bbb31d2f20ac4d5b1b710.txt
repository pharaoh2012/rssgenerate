
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/johnnyzen/p/18849096" title="发布于 2025-05-03 14:05">
    <span role="heading" aria-level="2">[语法分析/编译原理] Antlr : 开源语法分析工具</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="序">序</h1>
<ul>
<li>最近的工作涉及到数据引擎查询 DSL 设计，正好找到 Antlr。</li>
<li>那些繁琐的<strong>词法分析</strong>、<strong>语法分析</strong>工作全部由 <code>Antlr</code> 搞定，即使你不懂<strong>编译原理</strong>，也不能阻碍你使用 Antlr 开发自己的小语言。</li>
</ul>
<h1 id="概述-antlr">概述: Antlr</h1>
<h2 id="简介">简介</h2>
<ul>
<li>Antlr 是由美国旧金山大学教授 Terence Parr 于 1989 年发布，到现在已经 30 年。</li>
<li>Antlr4 非常稳定，生成的代码性能也非常高。你熟悉的Hive SQL，Hibernate SQL等都是使用Antlr来进行分析的。</li>
</ul>
<blockquote>
<ul>
<li>Antlr 当前版本 4.7.2</li>
</ul>
</blockquote>
<ul>
<li><code>ANTLR</code> <code>v4</code>是一款功能强大的<strong>语法分析器生成器</strong>，可以用来读取、处理、执行和转换<strong>结构化文本</strong>或<strong>二进制文件</strong>。</li>
</ul>
<blockquote>
<p>它被广泛应用于学术界和工业界构建各种语言、工具和框架。</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202505/1173617-20250503125657686-1895886893.png" alt="" loading="lazy"></p>
<blockquote>
<p><a href="https://www.antlr.org/" target="_blank" rel="noopener nofollow">https://www.antlr.org/</a></p>
</blockquote>
<ul>
<li>其从称为<strong>文法</strong>的一种<strong>形式化的语言描述</strong>中，<code>ANTLR</code><strong>框架</strong>生成<strong>该语言的语法分析器</strong>。</li>
</ul>
<blockquote>
<ul>
<li><strong>生成的语法分析器</strong>可以<strong>自动构建</strong>【语法分析树】——表示<strong>文法</strong>如何匹配输入的数据结构。</li>
<li><code>ANTLR</code>还可以<strong>自动生成</strong>【树遍历器】，你可以用它来访问那些树的节点，以执行特定的代码。</li>
</ul>
</blockquote>
<ul>
<li><code>ANTLR</code> v4的<strong>语法分析器</strong>使用一种新的称为<code>Adaptive LL(*)</code>或<code>ALL(*)</code>的<strong>语法分析技术</strong>，它可以在生成的<strong>语法分析器</strong>【执行前】在<strong>运行时</strong>【动态地】而不是静态地执行<strong>文法分析</strong>。</li>
</ul>
<blockquote>
<ul>
<li><code>ANTLR</code> v4极大地简化了匹配句法结构（如算术表达式）的文法规则。</li>
<li>对于<strong>传统的自顶向下的语法分析器生成器</strong>来说，识别表达式的最自然的文法是无效的，ANTLR v4则不然，你可以使用像下面这样的规则来匹配表达式：</li>
</ul>
</blockquote>
<pre><code class="language-antlr">expr : expr '*' expr
     | expr '+' expr
     | INT
     ;
</code></pre>
<blockquote>
<p>像<code>expr</code>这样的<strong>自引用规则</strong>是<strong>递归的</strong>且是<strong>左递归</strong>的，因为它的<strong>可选项</strong>中至少有一个立即引用它自身。<br>
<code>ANTLR</code> v4会<strong>自动地将左递归规则</strong>（例如expr）重写为<strong>非左递归等价物</strong>，<strong>唯一的约束</strong>是<strong>左递归</strong>必须是直接的，即那些规则立即引用它们自身。</p>
</blockquote>
<ul>
<li>Slogan</li>
</ul>
<blockquote>
<p>ANTLR (ANother Tool for Language Recognition) is a powerful parser generator for reading, processing, executing, or translating structured text or binary files.<br>
ANTLR（ANother Tool for Language Recognition）是一个强大的解析器生成器，用于读取、处理、执行或翻译结构化文本或二进制文件。</p>
</blockquote>
<ul>
<li>URL</li>
</ul>
<blockquote>
<ul>
<li><a href="https://www.antlr.org" target="_blank" rel="noopener nofollow">https://www.antlr.org</a></li>
<li><a href="https://github.com/antlr" target="_blank" rel="noopener nofollow">https://github.com/antlr</a></li>
</ul>
<blockquote>
<ul>
<li><a href="https://github.com/antlr/antlr4" target="_blank" rel="noopener nofollow">https://github.com/antlr/antlr4</a></li>
</ul>
</blockquote>
</blockquote>
<ul>
<li>开源情况</li>
</ul>
<blockquote>
<ul>
<li>开源协议：BSD-3 License</li>
<li>统计数据</li>
</ul>
</blockquote>
<pre><code class="language-txt">20250427 : 17.9k star / 3.3k fork
</code></pre>
<h2 id="核心概念">核心概念</h2>
<h3 id="编译">编译</h3>
<ul>
<li>从计算机<strong>编译原理</strong>学科的角度来讲，<strong>编译</strong>就是将<strong>高级语言程序</strong>转换成<strong>汇编语言程序</strong>/及其<strong>语言程序</strong>的过程。</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202504/1173617-20250427235146820-305907720.png" alt="" loading="lazy"></p>
<blockquote>
<p><strong>编译</strong>，说白了就是<strong>翻译</strong>，对比精细的人工英译汉的步骤：</p>
</blockquote>
<ul>
<li><strong>词法分析</strong>：分析词性：每个词属于名词？形容词？动词？介词…</li>
<li><strong>语法分析</strong>：分析各种介词短语、名词短语、动词短语…</li>
<li><strong>语义分析</strong>：以上两个步骤的意义就是为<strong>语义分析</strong>做铺垫，通过将<strong>语句</strong>展开成<strong>树的形式</strong>(如下图)，可以最终根据<strong>根节点</strong>分析出<strong>整个句子</strong>的意思是什么。</li>
</ul>
<blockquote>
<p>编译的步骤也和人工翻译是一样的。</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202504/1173617-20250427235322100-1962711015.png" alt="" loading="lazy"></p>
<h3 id="编译器的结构">编译器的结构</h3>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202504/1173617-20250427235345459-185192533.png" alt="" loading="lazy"></p>
<h3 id="词法分析">词法分析</h3>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202504/1173617-20250427235644759-435380653.png" alt="" loading="lazy"></p>
<ul>
<li>词法单元形式：二元组token:<code>&lt;种别码，属性值&gt;</code></li>
<li>对<strong>种别码</strong>的解释</li>
</ul>
<blockquote>
<ul>
<li><strong>一词一码</strong>：就是说，每个不同的词分别使用一个种别码，比如：</li>
</ul>
</blockquote>
<pre><code class="language-shell">if: &lt;IF, &gt;
program: &lt;PROGRAM, &gt;
while: &lt;WHILE, &gt;
</code></pre>
<blockquote>
<ul>
<li><strong>多词一码</strong>：标识符是程序员编程时设置的。</li>
</ul>
<blockquote>
<p>我们为不能枚举所有标识符，因此将所有标识符归为一个<strong>种别码</strong>。<br>
由于多个词对应一个种别码，因此在<strong>同一种别码</strong>间需要另外设置属性值来标识不同的属性：（变量名？数组名？常量？）或者（整型？浮点型？字符型？…）</p>
</blockquote>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202504/1173617-20250428001024270-2051589998.png" alt="" loading="lazy"></p>
<h3 id="语法分析">语法分析</h3>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202504/1173617-20250428002117177-122702690.png" alt="" loading="lazy"></p>
<ul>
<li>解释：<code>&lt;D&gt;</code>是一条声明语句，<code>&lt;T&gt;</code>是数据类型，<code>|</code> 表示“或”的关系，<code>&lt;IDS&gt;</code>是Identify Sequence标识序列。</li>
</ul>
<blockquote>
<p>对比下面的输入语句：</p>
</blockquote>
<ul>
<li>整条语句<code>&lt;D&gt;</code>: int a, b, c;</li>
<li>数据类型<code>&lt;T&gt;</code>: int</li>
<li>标识序列<code>&lt;IDS&gt;</code>:a, b, c;</li>
</ul>
<h3 id="语义分析">语义分析</h3>
<ul>
<li>主要做两件事：收集标识符的属性信息 和 对语义的检查（检查合法性）</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202504/1173617-20250428002329507-244661408.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202504/1173617-20250428002341330-516687791.png" alt="" loading="lazy"></p>
<h2 id="核心功能与特性">核心功能与特性</h2>
<ul>
<li>
<p>词法分析；</p>
</li>
<li>
<p>语法分析；</p>
</li>
<li>
<p>按照指定的语言生成分析器代码；</p>
</li>
<li>
<p>Antlr 支持<strong>上下文无关文法</strong> <code>LL(*)</code>。</p>
</li>
</ul>
<blockquote>
<ul>
<li>第1个L：从左至右分析输入；</li>
<li>第2个L: 使用最左派生分析语法规则；</li>
</ul>
</blockquote>
<ul>
<li>语言支持：</li>
</ul>
<blockquote>
<ul>
<li>Antlr 可以生成Java, C#, Python2, Python3, JavaScript, Go, C++, Swift 等语言对应的分析器代码。</li>
</ul>
</blockquote>
<ul>
<li>Antlr4 现在支持<strong>直接左递归</strong>，但不支持<strong>间接左递归</strong>。</li>
</ul>
<pre><code class="language-txt">直接左递归:
S -&gt; S | Sa

间接左递归：
S -&gt; S | M
M -&gt; S
</code></pre>
<h2 id="应用场景">应用场景</h2>
<h3 id="定制特定领域语言dsl">定制特定领域语言（DSL)</h3>
<ul>
<li>类似hibernate中的HQL，用DSL来定义要执行操作的高层语法，这种语法接近人可理解的语言，由DSL到计算机语言的翻译则通过ANTLR来做，可在ANTLR的结构语言中定义DSL命令具体要执行何种操作。</li>
</ul>
<h3 id="文本解析">文本解析</h3>
<ul>
<li>可利用<code>ANTLR</code>解析JSON，HTML，XML，EDIFACT，或自定义的报文格式。</li>
</ul>
<blockquote>
<p>解析出来的信息需要做什么处理也可以在结构文件中定义。</p>
</blockquote>
<h3 id="数学计算">数学计算</h3>
<ul>
<li>加减乘除，线性方程，几何运算，微积分等等</li>
</ul>
<h1 id="antlr-使用指南">Antlr 使用指南</h1>
<ul>
<li>那些繁琐的<strong>词法分析</strong>、<strong>语法分析</strong>工作全部由 <code>Antlr</code> 搞定，即使你不懂<strong>编译原理</strong>，也不能阻碍你使用 Antlr 开发自己的小语言。</li>
<li>开发一门新的领域语言（Domain Specification Language，简称 <code>DSL</code>），主要的工作变成了使用<strong>可扩展的巴斯科范式</strong>（<code>Extended Backus–Naur Form</code>，简称 <code>EBNF</code>）来描述语法。</li>
</ul>
<h2 id="基础概念">基础概念</h2>
<h3 id="语言模式x4">语言模式x4</h3>
<ul>
<li>
<p>虽然在过去的50年里人们发明了许许多多的<strong>编程语言</strong>，但是，相对而言，基本的语言模式种类并不多。之所以如此，是因为人们在设计编程语言的时候，倾向于将它们设计成与脑海中的自然语言相类似。</p>
<ul>
<li>我们希望符号按照有效的顺序排列，并且符号之间拥有着特定的依赖关系。举个例子，{(}) 就是不符合语法的，因为符号的顺序不对。</li>
</ul>
</li>
<li>
<p><strong>单词之间的顺序</strong>和<strong>依赖性约束</strong>是来自于自然语言的，基本上可以总结成四种抽象的计算机语言模式。</p>
</li>
</ul>
<blockquote>
<ul>
<li><strong>序列</strong>（sequence）：一列元素，比如一行命令</li>
<li><strong>选择</strong>（choice）：在多种可选方案中做选择（备选分支），比如 if else</li>
<li><strong>词法符号依赖</strong>（token dependency）：符号总是成对出现，比如左右括号()</li>
<li><strong>嵌套关系</strong>（nested phrase）：嵌套的词组是一种自相似的语言结构，即它的子词组也遵循相同的结构。即递归调用本身定义的语法规则，这就是递归规则（自引用规则）。<strong>递归规则</strong>包括<strong>直接递归</strong>（directly recursive）和<strong>间接递归</strong>（indirectly recursive）。</li>
</ul>
</blockquote>
<h3 id="通配符">通配符</h3>
<blockquote>
<p>更多见<a href="https://www.runoob.com/regexp/regexp-metachar.html" target="_blank" rel="noopener nofollow">正则表达式</a></p>
</blockquote>
<blockquote>
<p>常用的通配符如下所示：</p>
</blockquote>
<ol>
<li>| 表示或（备选分支）</li>
<li>* 表示出现0次或以上</li>
<li>? 表示出现0次或1次</li>
<li>+ 表示出现1次或以上</li>
<li>~ 表示取反</li>
<li>范围运算符：.. 或者 -，比如小写字母的表示：'a'..'z' 或者 [a-z]</li>
</ol>
<p>下面通过识别一些常见的词法符号来学习下通配符的用法：</p>
<ol>
<li>
<p><strong>关键字、运算符和标点符号</strong>：对于关键字、运算符和标点符号，我们无须声明词法规则，只需在语法规则中直接使用单引号将他们括起来即可，比如 'while'、'+'。</p>
</li>
<li>
<p><strong>标识符</strong>：一个基本的标识符就是一个由大小写字母组成的字符序列。需要注意的是，下面的ID规则也能够匹配关键字（比如‘while’）等，上章中我们查看了Parser代码，知道ANTLR是如何处理这种歧义性的——选择所有匹配的备选分支中的第一条。因此，ID标识符应该放在关键字等定义之后。</p>
</li>
</ol>
<pre><code class="language-shell">// 匹配一个或者多个大小写字母
ID : [a-zA-Z]+;
</code></pre>
<ol start="3">
<li><strong>整数</strong>：整数是包括正数和负数的不以零开头的数字。</li>
</ol>
<pre><code class="language-shell">// 匹配一个整数
INTEGER : '-'?[1-9][0-9]*
        | '0'
        ;
</code></pre>
<ol start="4">
<li><strong>浮点数：</strong>一个浮点数以一列数字为开头，后面跟着一个小数点，然后是可选的小数部分。浮点数的另外一个格式是，以小数点开头，后面是一串数字。基于以上定义，我们可以得到以下词法规则</li>
</ol>
<pre><code class="language-shell">FLOAT : DIGIT+ '.' DIGIT*    // 1.39、3.14159等
      | '.' DIGIT+           // .12 (表示0.12)
      ;
 
fragment DIGIT : [0-9];    // 匹配单个数字
</code></pre>
<blockquote>
<p>这里我们使用了一条<strong>辅助规则DIGIT</strong>，将一条规则声明为fragment可以告诉ANTLR，该规则本身不是一个词法符号，它只会被其他的词法规则使用。</p>
<p>这意味着在<strong>语法规则</strong>中不能引用它。这也是一条片段规则（fragment rule）。</p>
</blockquote>
<ol start="5">
<li><strong>字符串常量</strong>：一个字符串就是两个双引号之间的任意字符序列。</li>
</ol>
<pre><code class="language-shell">// 匹配"……"之间的任意文本
STRING : '"' .*? '"';
</code></pre>
<blockquote>
<p><strong>点号通配符</strong>（<code>.</code>）匹配任意的单个字符，<code>.*</code> 表示匹配零个或多个字符组成的任意字符序列。显然，这是个贪婪匹配，它会一直匹配到文件结束，为解决这个问题，ANTLR通过<strong>标准正则表达式</strong>的标记（?后缀）提供了对<strong>非贪婪匹配子规则</strong>（nongreedy subrule）的支持。</p>
</blockquote>
<blockquote>
<p><strong>非贪婪匹配</strong>的基本含义是：获取一些字符，直到发现匹配后续子规则的字符为止。更准确的描述是，在保证整个父规则完成匹配的前提下，非贪婪的子规则匹配数量最少的字符。</p>
</blockquote>
<blockquote>
<p>回到我们的字符串常量定义中来，这里的定义其实并不完善，因为它不允许其中出现双引号。为了解决这个问题，很多语言都定义了以 \ 开头的转义序列，因此我们可以使用 "<code>\</code> 来对字符串中的双引号进行转义。</p>
</blockquote>
<pre><code class="language-shell">STRING : '"' (ESC|.)*? '"';
// 表示\" 或者 \\
fragment ESC : '\\"' | '\\\\';
</code></pre>
<blockquote>
<p>其中，ANTLR语法本身需要对转义字符 \ 进行转义，因此我们需要 \ 来表示单个反斜杠字符。</p>
</blockquote>
<ol start="6">
<li><strong>注释和空白字符</strong>：对于注释和空白字符，大多数情况下对于<strong>语法分析器</strong>是无用的（Python是一个例外，它的换行符表示一条命令的终止，特定数量的缩进<strong>指明嵌套的层级</strong>），因此我们可以使用ANTLR的<code>skip</code>指令来通知词法分析器将它们丢弃。</li>
</ol>
<pre><code class="language-shell">// 单行注释(以//开头，换行结束)
LINE_COMMENT : '//' .*? '\r'?'\n' -&gt; skip;
// 多行注释(/* */包裹的所有字符)
COMMENT : '/*' .*? '*/' -&gt; skip;
</code></pre>
<p><strong>词法分析器</strong>可以接受许多 -&gt; 操作符之后的指令，<code>skip</code>只是其中之一。</p>
<p>例如，如果我们需要在语法分析器中对注释做一定处理，我们可以使用channel指令将某些词法符号送入一个“隐藏的通道”并输送给语法分析器。</p>
<p>大多数编程语言将<strong>空白符</strong>看成是<strong>词法符号间的分隔符</strong>，并将他们忽略。</p>
<pre><code class="language-shell">// 匹配一个或者多个空白字符并将他们丢弃
WS : [ \t\r\n]+ -&gt; skip;
</code></pre>
<p>至此，我们已经学会了通配符的用法和如何编写常见的词法规则，下面我们将学习如何编写语法规则。</p>
<h3 id="语法">语法</h3>
<ul>
<li><strong>语法</strong>（<code>grammar</code>）包含了一系列描述语言结构的规则。</li>
</ul>
<blockquote>
<p>这些规则不仅包括描述语法结构的规则，也包括描述标识符和整数之类的词汇符号（词法符号Token）的规则，即包含词法规则和语法规则。<br>
注意：<strong>语法分析器的规则</strong>必须以<strong>小写字母</strong>开头，<strong>词法分析器的规则</strong>必须以<strong>大写字母</strong>开头。</p>
</blockquote>
<ol>
<li>语法文件声明</li>
</ol>
<blockquote>
<p>语法由一个为该语法命名的头部定义和一系列可以互相引用的语言规则组成。grammar关键字用于语法文件命名，需要注意的是，命名须与文件名一致。</p>
</blockquote>
<ol start="2">
<li>语法导入</li>
</ol>
<p>前两章的例子中，我们都是将<strong>词法规则</strong>和<strong>语法规则</strong>放在一个<strong>语法文件</strong>中，然而一个优雅的写法是将词法规则和语法规则进行拆分。lexer grammar关键字用于声明一个词法规则文件。如下是一个通用的词法规则文件定义。</p>
<pre><code class="language-shell">// 通用的词法规则，注意是 lexer grammar
lexer grammar CommonLexerRules;
// 匹配标识符(+表示匹配一次或者多次)
ID : [a-zA-Z]+;
// 匹配整数
INT : [0-9]+;
// 匹配换行符(?表示匹配零次或者一次)
NEWLINE : '\r'?'\n';
// 丢弃空白字符
WS : [ \t]+ -&gt; skip;
</code></pre>
<ul>
<li>然后，我们只需要<code>import</code>关键字，就可以轻松的将词法规则进行导入。</li>
</ul>
<blockquote>
<p>如下是一个计算器的语法文件。</p>
</blockquote>
<pre><code class="language-shell">grammar LibExpr;
// 引入 CommonLexerRules.g4 中全部的词法规则
import CommonLexerRules;
 
prog : stat+;
stat : expr NEWLINE             # printExpr
    | ID '=' expr NEWLINE       # assign
    | NEWLINE                   # blank
    ;
expr : expr op=('*' | '/') expr    # MulDiv
    | expr op=('+' | '-') expr     # AddSub
    | INT                       # int
    | ID                        # id
    | '(' expr ')'              # parens
    | 'clear'                   # clear
    ;
 
// 为上诉语法中使用的算术符命名
MUL : '*';
DIV : '/';
ADD : '+';
SUB : '-';
</code></pre>
<ol start="3">
<li>备选分支命名（标签）</li>
</ol>
<ul>
<li>如果<strong>备选分支</strong>上面没有标签，ANTLR就只会为每条规则生成一个方法（监听器和访问器中的方法，用于对不同的输入进行不同的操作）。</li>
<li>为备选分支添加一个标签，我们只需要在备选分支的右侧，以 # 开头，后面跟上任意的标识符即可，如上所示。</li>
<li>需要注意的是，为一个规则的备选分支添加标签，要么全部添加，要么全部不添加。</li>
</ul>
<ol start="4">
<li>优先级</li>
</ol>
<blockquote>
<p>在第二章中我们讲述了ANTLR是如何处理歧义性语句（二义性文法）的：选择所有匹配的备选分支中的第一条。即ANTLR通过优先选择位置靠前的备选分支来解决歧义性问题，这也隐式地允许我们指定运算符优先级。例如，在上诉的例子中，乘除的优先级会比加减高。因此，ANTLR在解决1+2*3的歧义问题时，会优先处理乘法。</p>
</blockquote>
<ol start="5">
<li>结合性<br>
默认情况下，ANTLR是左结合的，即将运算符从左到右地进行结合。但是有些情况下，比如指数运算符是从右向左结合的。1<sup>2</sup>3应该是3<sup>(2</sup>1)而不是(3<sup>2)</sup>1。我们可以使用assoc来手动指定结合性。</li>
</ol>
<pre><code class="language-shell">expr : expr '^' &lt;assoc=right&gt; expr    // ^ 是右结合的
     | INT
     ;
</code></pre>
<blockquote>
<p>注意，在ANTLR4.2之后，<code>&lt;assoc=right&gt;</code>需要放在备选分支的最左侧，否则会收到警告。</p>
</blockquote>
<pre><code class="language-shell">expr : &lt;assoc=right&gt; expr '^' expr    // ^ 是右结合的
     | INT
     ;
</code></pre>
<ol start="6">
<li>词法分析器与语法分析器的界限<br>
由于ANTLR的<strong>词法规则</strong>可以使用<strong>递归</strong>，因此从技术角度上看，词法分析器可以和语法分析器一样强大。<br>
这意味着我们甚至可以在词法分析器中匹配语法结构。或者，在另一个极端，我们可以把字符当作词法符号，然后使用语法分析器去分析整个字符流（这种被称为无扫描的语法分析器scannerless parser）。<br>
因此，我们需要去界定词法分析器和语法分析器具体需要处理的界限。</li>
</ol>
<ul>
<li>在词法分析器中匹配并丢弃任何语法分析器无须知晓的东西。例如，需要在词法分析器中识别和扔掉像空格和注释诸如此类的东西。否则，语法分析器必须经常查看是否有空格或注释在词法符号之间。</li>
<li>在词法分析器中匹配诸如标志符、关键字、字符串和数字这样的常用记号。语法分析器比词法分析器有更多的开销，因此我们不必让语法分析器承受把数字放在一起识别成整数的负担。</li>
<li>将语法分析器不需要区分的词法结构归为同一个词法符号类型。例如，如果我们的应用把整数和浮点数当作同一事物对待，那就把它们合并成词法符号类型NUMBER。</li>
<li>将任何语法分析器可以以相同方式处理的实体归为一类。例如，如果语法分析器不在乎XML标签里的内容，词法分析器可以把尖括号中的所有东西合并成一个单独的名为TAG的词法符号类型。</li>
<li>另一方面，如果语法分析器需要把一种类型的文本拆开处理，那么词法分析器就应该将它的各个组成部分作为独立的词法符号输送给语法分析器。例如，如果语法分析器需要处理IP地址中的元素，那么词法分析器应该将IP的各个组成部分（整数和点）作为独立的词法符号送入语法分析器。</li>
</ul>
<h3 id="小结">小结</h3>
<p>本节我们学习了如何编写语法文件，但是单独的语法并没有用处，而与其相关的语法分析器仅能告诉我们输入的语句是否遵循该语言的规范。<br>
为了构建一个语言类应用程序，这是不够的，我们还需要相应的“动作”去执行语法规则。而这就是下一章的内容——监听器和访问器。</p>
<h2 id="关键原理antlr-的语法分析">关键原理：Antlr 的语法分析</h2>
<h3 id="总体流程">总体流程</h3>
<blockquote>
<p><code>ANTLR</code> 语法分析一般分为2个阶段：</p>
</blockquote>
<ol>
<li><strong>词法分析阶段</strong> （lexical analysis)</li>
</ol>
<blockquote>
<p>对应的分析程序叫做 <code>lexer</code> ，负责将<strong>符号</strong>（<code>token</code>）分组成<strong>符号类</strong>（token class or token type）</p>
</blockquote>
<ol start="2">
<li><strong>解析阶段</strong>（parse）</li>
</ol>
<blockquote>
<p>根据<strong>词法</strong>，构建出一棵<strong>分析树</strong>（parse tree）或叫<strong>语法树</strong>（syntax tree）</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202505/1173617-20250503072830703-1589020690.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202505/1173617-20250503072509485-1651643109.png" alt="" loading="lazy"></p>
<ul>
<li><code>ANTLR</code> 的直观印象————就像是在走迷宫，或者说是电路板更准确，<strong>最终只有一条最优路</strong>可通达开始与结束，中间的各种叉路与开关，就是我们<strong>所编写的规则</strong></li>
</ul>
<blockquote>
<p>下面是一博友编写的一个<strong>SQL查询</strong>的简单实现，截取一部分图示：</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202504/1173617-20250428003018468-1997973982.png" alt="" loading="lazy"></p>
<h2 id="语法定义文件grammer-definition-file--语法定义--antlr-元语言">语法定义文件(Grammer Definition File) | 语法定义 := Antlr 元语言</h2>
<blockquote>
<p>因此，为了让<strong>词法分析</strong>和<strong>语法分析</strong>能够正常工作，在使用 <code>Antlr 4</code> 的时候，需要定义<strong>语法</strong>（<code>grammar</code>），这部分就是 <strong>Antlr</strong> <strong>元语言</strong>。</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202505/1173617-20250503073004400-2014163163.png" alt="" loading="lazy"></p>
<h3 id="总体结构">总体结构</h3>
<pre><code class="language-antlr">/** Optional javadoc style comment */
grammar Name; 
options {...}
import ... ;

tokens {...}
channels {...} // lexer only
@actionName {...}

rule1 // parser and lexer rules, possibly intermingled
...
ruleN
</code></pre>
<h3 id="antlr-语法定义文件--calculatorg4">Antlr 语法定义文件 : <code>Calculator.g4</code></h3>
<ul>
<li>首先，要了解 antlr4 本身的定义 <code>grammar</code> 的语法。相对比较简单。我们以计算器的例子为例，简单讲解其中的概念。</li>
</ul>
<pre><code class="language-antlr">// file: Calculator.g4
grammar Calculator;
 
line : expr EOF ;
expr : '(' expr ')'             # parenExpr
     | expr ('*'|'/') expr      # multOrDiv
     | expr ('+'|'-') expr      # addOrSubstract
     | FLOAT                    # float
     ;
 
WS : [ \t\n\r]+ -&gt; skip;
FLOAT : DIGIT+ '.' DIGIT* EXPONET?
      | '.' DIGIT+ EXPONET?
      | DIGIT+ EXPONET?
      ;
 
fragment DIGIT : '0'..'9' ;
fragment EXPONET : ('e'|'E') ('+'|'-')? DIGIT+ ;
</code></pre>
<blockquote>
<ul>
<li>第1行，定义了 <code>grammar</code> 的名字，名字需要与<strong>文件名</strong>对应</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>接下来的 <code>line</code> 和 <code>expr</code> 就是定义的<strong>语法</strong>，会使用到下方定义的<strong>词法</strong></li>
</ul>
<blockquote>
<p>注意 <code>#</code> 后面的名字，是可以在后续访问和处理的时候使用的。一个语法有多种规则的时候可以使用 | 来进行配置。</p>
</blockquote>
</blockquote>
<blockquote>
<ul>
<li>在 <code>expr</code> 这行，我们注意到<strong>四则运算</strong>分为了两个非常相似的语句，这样做的原因是为了实现<strong>优先级</strong>，乘除是优先级高于加减的。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><code>WS</code> 定义了<strong>空白字符</strong>，后面的 <code>skip</code> 是一个特殊的标记，标记空白字符会<strong>被忽略</strong>。</li>
<li><code>FLOAT</code> 是定义的<strong>浮点数</strong>，包含了整数，与编程语言中的浮点数略有不同，更类似 <code>Number</code> 的定义。</li>
<li>最后的 <code>fragment</code> 定义了两个在词法定义中使用到的符号。</li>
</ul>
</blockquote>
<blockquote>
<p>在<strong>语法定义的文件</strong>中，大部分的地方使用了<strong>正则表达式</strong>。</p>
</blockquote>
<h2 id="生成语法定义文件">生成语法定义文件</h2>
<ul>
<li>配置 antlr4 工具，先从官网下载 Antlr4 的 jar 包，点击下载地址进行下载。</li>
</ul>
<blockquote>
<p>参见本文的<strong>安装章节</strong>（<code>antlr-{version}-complete.jar</code>）</p>
</blockquote>
<pre><code class="language-shell">alias antlr4="java -jar /path/to/antlr-4.7.2-complete.jar"
</code></pre>
<ul>
<li>通过<strong>命令行工具</strong>可以生成 lexer、parser、visitor、listener 等文件。</li>
</ul>
<blockquote>
<ul>
<li><code>visitor</code> 是默认不生成的，需要带上参数 <code>-visitor</code>。</li>
</ul>
</blockquote>
<pre><code class="language-shell">$ antlr4 -visitor Calculator.g4
</code></pre>
<blockquote>
<p>生成的文件如下：</p>
</blockquote>
<pre><code class="language-shell">Calculator.interp
CalculatorBaseListener.java
CalculatorLexer.interp
CalculatorLexer.tokens
CalculatorParser.java
Calculator.tokens
CalculatorBaseVisitor.java
CalculatorLexer.java
CalculatorListener.java
CalculatorVisitor.java
</code></pre>
<h2 id="使用-visitor">使用 Visitor</h2>
<ul>
<li><code>Visitor</code> 的使用是最为简单方便的，继承 <code>CalculatorBaseVisitor</code> 类即可，内部的方法与 g4 文件定义相对应，对照看即可理解。</li>
</ul>
<pre><code class="language-java">public class MyCalculatorVisitor extends CalculatorBaseVisitor&lt;Object&gt; {
    @Override
    public Object visitParenExpr(CalculatorParser.ParenExprContext ctx) {
        return visit(ctx.expr());
    }
 
    @Override
    public Object visitMultOrDiv(CalculatorParser.MultOrDivContext ctx) {
        Object obj0 = ctx.expr(0).accept(this);
        Object obj1 = ctx.expr(1).accept(this);
 
        if ("*".equals(ctx.getChild(1).getText())) {
            return (Float) obj0 * (Float) obj1;
        } else if ("/".equals(ctx.getChild(1).getText())) {
            return (Float) obj0 / (Float) obj1;
        }
        return 0f;
    }
 
    @Override
    public Object visitAddOrSubstract(CalculatorParser.AddOrSubstractContext ctx) {
        Object obj0 = ctx.expr(0).accept(this);
        Object obj1 = ctx.expr(1).accept(this);
 
        if ("+".equals(ctx.getChild(1).getText())) {
            return (Float) obj0 + (Float) obj1;
        } else if ("-".equals(ctx.getChild(1).getText())) {
            return (Float) obj0 - (Float) obj1;
        }
        return 0f;
    }
 
    @Override
    public Object visitFloat(CalculatorParser.FloatContext ctx) {
        return Float.parseFloat(ctx.getText());
    }
}
</code></pre>
<h2 id="calculatorclient">CalculatorClient</h2>
<blockquote>
<p>实现了 visitor 之后，就可以完成一个简单的计算器了。</p>
</blockquote>
<pre><code class="language-java">import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
 
public class CalculatorClient {
    public static void main(String[] args) {
        String query = "3.1 * (6.3 - 4.51) + 5 * 4";
 
        CalculatorLexer lexer = new CalculatorLexer(new ANTLRInputStream(query));
        CalculatorParser parser = new CalculatorParser(new CommonTokenStream(lexer));
        CalculatorVisitor visitor = new MyCalculatorVisitor();
 
        System.out.println(visitor.visit(parser.expr()));  // 25.549
    }
}
</code></pre>
<h2 id="安装">安装</h2>
<ul>
<li><code>ANTLR</code>是由<code>Java</code>写成的。</li>
</ul>
<blockquote>
<p>所以，在安装<code>ANTLR</code>前必须保证已安装有<code>Java 1.6</code>或以上版本。<br>
你可以到这里下载<code>ANTLR</code>的最新版本，或者也可使用<strong>命令行工具</strong>下载：</p>
</blockquote>
<pre><code class="language-shell">$ curl -O https://www.antlr.org/download/antlr-4.7.2-complete.jar
</code></pre>
<ul>
<li><strong>归档文件</strong>包含运行<code>ANTLR</code><strong>工具</strong>的<strong>所有必要依赖</strong>，以及<strong>编译和执行</strong>由<code>ANTLR</code>生成的识别器所需的<strong>运行库</strong>。</li>
</ul>
<blockquote>
<p>简而言之，就是<code>ANTLR</code>工具将<strong>文法</strong>转换成<strong>识别程序</strong>，然后<strong>识别程序</strong>利用<code>ANTLR</code><strong>运行库</strong>中的某些支持类识别由该文法描述的语言的句子。<br>
此外，该<strong>归档文件</strong>还包含2个<strong>支持库</strong>：</p>
<blockquote>
<p><code>TreeLayout</code>（一个复杂的树布局库）<br>
<code>StringTemplate</code>（一个用于生成代码和其它结构化文本的模板引擎）。</p>
</blockquote>
</blockquote>
<ul>
<li>现在来测试下ANTLR工具是否工作正常：</li>
</ul>
<pre><code class="language-shell">$ java -jar antlr-4.7.2-complete.jar  # 启动 org.antlr.v4.Tool
</code></pre>
<blockquote>
<p>如果正常的话会看到以下帮助信息：</p>
</blockquote>
<pre><code class="language-shell">ANTLR Parser Generator  Version 4.7.1
 -o ___              specify output directory where all output is generated
 -lib ___            specify location of grammars, tokens files
 -atn                generate rule augmented transition network diagrams
 -encoding ___       specify grammar file encoding; e.g., euc-jp
 -message-format ___ specify output style for messages in antlr, gnu, vs2005
 -long-messages      show exception details when available for errors and warnings
 -listener           generate parse tree listener (default)
 -no-listener        don't generate parse tree listener
 -visitor            generate parse tree visitor
 -no-visitor         don't generate parse tree visitor (default)
 -package ___        specify a package/namespace for the generated code
 -depend             generate file dependencies
 -D&lt;option&gt;=value    set/override a grammar-level option
 -Werror             treat warnings as errors
 -XdbgST             launch StringTemplate visualizer on generated code
 -XdbgSTWait         wait for STViz to close before continuing
 -Xforce-atn         use the ATN simulator for all predictions
 -Xlog               dump lots of logging info to antlr-timestamp.log
 -Xexact-output-dir  all output goes into -o dir regardless of paths/package
</code></pre>
<blockquote>
<p>每次运行<code>ANTLR</code>工具都要输入这么长的命令是不是有些痛苦？写个脚本来解放我们的手指吧！</p>
</blockquote>
<pre><code class="language-shell">#!/bin/sh
java -cp antlr-4.7.1-complete.jar org.antlr.v4.Tool $*
</code></pre>
<blockquote>
<p>把它保存为<code>antlr</code>，以后就可以使用下列命令来运行<code>ANTLR</code>工具：</p>
</blockquote>
<pre><code class="language-shell">$ ./antlr
</code></pre>
<h1 id="案例实践">案例实践</h1>
<ul>
<li><code>Antlr4</code> 提供了大量的官方 <a href="https://github.com/antlr/grammars-v4/" target="_blank" rel="noopener nofollow">grammar 示例</a>，包含了各种常见语言，非常全面，提供了非常全面的学习教材</li>
</ul>
<blockquote>
<p><a href="https://github.com/antlr/grammars-v4/" target="_blank" rel="noopener nofollow">https://github.com/antlr/grammars-v4/</a></p>
</blockquote>
<h2 id="case-twitter搜索--antlr">CASE Twitter搜索 + ANTLR</h2>
<ul>
<li>Twitter搜索使用<code>ANTLR</code>进行语法分析，每天处理超过20亿次查询</li>
</ul>
<h2 id="case-hadoop生态hivepig--antlr">CASE Hadoop生态(Hive/Pig/...) + ANTLR</h2>
<ul>
<li>Hadoop生态系统中的Hive、Pig、数据仓库和分析系统所使用的语言都用到了<code>ANTLR</code></li>
</ul>
<h2 id="case-antlr--法律文本分析">CASE ANTLR + 法律文本分析</h2>
<ul>
<li><code>Lex Machina</code>将<code>ANTLR</code>用于分析法律文本</li>
</ul>
<h2 id="case-oracle-sql工具--antlr">CASE Oracle SQL工具 + ANTLR</h2>
<ul>
<li>Oracle公司在SQL开发者IDE和迁移工具中使用了ANTLR</li>
</ul>
<h2 id="case-netbeans-ide--antlr--解析-c-源码">CASE NetBeans IDE + ANTLR =&gt; 解析 <code>C++</code> 源码</h2>
<ul>
<li>NetBeans公司的IDE使用ANTLR来解析C++</li>
</ul>
<h2 id="case-hibernate-orm框架--antlr--处理hql语言">CASE Hibernate ORM框架 + ANTLR =&gt; 处理HQL语言</h2>
<ul>
<li>Hibernate对象-关系映射框架（ORM）使用ANTLR来处理HQL语言</li>
</ul>
<h2 id="case-简单的计算器">CASE 简单的计算器</h2>
<h3 id="计算器的语法设计">计算器的语法设计</h3>
<pre><code class="language-shell">grammar Calc;
start: input
input: setvariable NL input         
       | expression NL? EOF       #calculate
       ;
setvariable : ID '=' expression   #setvariable
       ;
expression : expression POW expression         #pow
        | expression (MUL | DIV) expression    #muldiv
        | expression (ADD | SUB) expression    #addsub
        | '(' expression ')'              #expr 
        | ID                              #id           
        | NUMBER                          #num
        ;
POW : '^'
ADD : '+'
SUB: '-'
MUL: '*'
DIV : '/'
NL : '\r' ? '\n'
ID : [a-zA-Z_]+
NUMBER : [0-9]+
</code></pre>
<ul>
<li>写在前面的分支优先级高，因此指数运算优先级高于乘除运算，乘除运算优先级高于加减运算。</li>
<li>乘除写在一个分支，加减写在一个分支，表示它们具有相同的优先级。</li>
</ul>
<blockquote>
<p>比如: 两个表达式</p>
</blockquote>
<pre><code class="language-shell">a * b / c
a / b * c
</code></pre>
<ul>
<li>由于 <code>*</code> 和<code>／</code>具有优先级相同，先出现的先匹配，因此构造的语法树分别如下：</li>
</ul>
<pre><code class="language-txt">a * b / c 对应的语法分析树：
           expr       
    /        |          \
  expr       /           c
  /  |  \      
a    *   b
a / b * c 对应的语法分析树：
            expr       
    /        |          \
   expr      *           c
  /  |  \      
a    /   b
</code></pre>
<ul>
<li>上面的计算器语法可以支持如表达式：</li>
</ul>
<pre><code class="language-shell">a = 2
b = a ^ 2 + a
c = a + b * c / a
a + b * c / (a + c)
</code></pre>
<h3 id="计算器的实现">计算器的实现</h3>
<blockquote>
<p>如果使用 <code>Java</code> 来开发，自然首选 IDEA。</p>
</blockquote>
<ul>
<li>
<p>IDE 搜索安装插件 <code>Antlr v4</code>；（可选步骤）</p>
</li>
<li>
<p>创建一个 Java 项目；</p>
</li>
<li>
<p>创建一个<strong>语法描述文件</strong>：Calc.g4，名字需要跟第1行的gammar Calc对应，用于生成分析器代码类的前缀；</p>
</li>
<li>
<p>在 Calc.g4 文件上右键，点击 Generate ANTLR Recognizer（IDE插件），就会生成Java语言的分析器代码；</p>
</li>
</ul>
<blockquote>
<blockquote>
<p>此插件的本质是调用<code>antlr-{version}-complete.jar</code>包。</p>
</blockquote>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202505/1173617-20250503125219473-326831445.png" alt="" loading="lazy"></p>
<blockquote>
<ul>
<li>默认只生成 <code>Listenner</code> 方式遍历类，可通过 <code>Configuration</code> 配置同时生成 <code>Visitor</code> 方式遍历类；</li>
</ul>
</blockquote>
<ul>
<li>
<p><code>Listenner</code> 方式使用深度优先的遍历方式，针对语法树每一个节点都会有一个进入方法（ enterXXX ），一个退出方法( exitXXX )；</p>
</li>
<li>
<p>Visitor 有更好的灵活性，你可以完全控制整个遍历过程，哪些分支不用遍历，哪些分支需要遍历等；</p>
</li>
<li>
<p>你可以基于生成的<strong>词法分析类</strong> CalcLexer，<strong>语法分析类</strong> CalcPaser，用来测试是否支持你编写的表达式。</p>
</li>
<li>
<p>为了实现计算，你还需要继承 <code>Listenner</code> 或者 <code>Visitor</code> 来实现计算过程。</p>
</li>
</ul>
<blockquote>
<p>这个代码相对比较简单，就不贴出来了。<br>
亦可参见本文上述所指的 <code>MyCalculatorVisitor</code></p>
</blockquote>
<h1 id="y-推荐文献">Y 推荐文献</h1>
<ul>
<li>Antlr</li>
</ul>
<blockquote>
<ul>
<li><a href="https://www.antlr.org" target="_blank" rel="noopener nofollow">https://www.antlr.org</a> 【推荐】</li>
<li><strong>Github</strong></li>
</ul>
<blockquote>
<ul>
<li><a href="https://github.com/antlr" target="_blank" rel="noopener nofollow">https://github.com/antlr</a></li>
</ul>
<blockquote>
<ul>
<li><a href="https://github.com/antlr/antlr4" target="_blank" rel="noopener nofollow">https://github.com/antlr/antlr4</a></li>
<li><a href="https://github.com/antlr/grammars-v4/" target="_blank" rel="noopener nofollow">https://github.com/antlr/grammars-v4/</a></li>
</ul>
</blockquote>
<ul>
<li><a href="https://github.com/antlr/grammars-v4" target="_blank" rel="noopener nofollow">https://github.com/antlr/grammars-v4</a> (大量语法文件例子)</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<ul>
<li><strong>Maven</strong></li>
</ul>
<blockquote>
<ul>
<li><a href="https://central.sonatype.com/artifact/org.antlr/antlr4" target="_blank" rel="noopener nofollow">https://central.sonatype.com/artifact/org.antlr/antlr4</a></li>
</ul>
</blockquote>
</blockquote>
<ul>
<li>The Definitive ANTLR4 Reference</li>
</ul>
<blockquote>
<ul>
<li><a href="http://lms.ui.ac.ir/public/group/90/59/01/15738_ce57.pdf" target="_blank" rel="noopener nofollow">http://lms.ui.ac.ir/public/group/90/59/01/15738_ce57.pdf</a></li>
</ul>
</blockquote>
<ul>
<li><strong>Demo</strong></li>
</ul>
<blockquote>
<ul>
<li><a href="https://github.com/zhugezifang/antlr4-helloworld-demo/blob/master/pom.xml" target="_blank" rel="noopener nofollow">https://github.com/zhugezifang/antlr4-helloworld-demo/blob/master/pom.xml</a></li>
</ul>
</blockquote>
<ul>
<li>
<p><a href="https://wizardforcel.gitbooks.io/antlr4-short-course/content/" target="_blank" rel="noopener nofollow">Antlr4 简明教程 - wizardforcel.gitbooks.io</a> 【推荐】</p>
</li>
<li>
<p><a href="https://blog.csdn.net/cprimesplus/article/details/105724168" target="_blank" rel="noopener nofollow">编译原理【1】概述：词法分析、语法分析、语义分析 - CSDN</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/johnnyzen/p/18848678" target="_blank">设计模式之解释器模式 - 博客园/千千寰宇</a></p>
</li>
<li>
<p><strong>IDEA 插件</strong>: <code>Antlr v4</code></p>
</li>
</ul>
<blockquote>
<ul>
<li><a href="https://plugins.jetbrains.com/plugin/7358-antlr-v4" target="_blank" rel="noopener nofollow">https://plugins.jetbrains.com/plugin/7358-antlr-v4</a></li>
</ul>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202505/1173617-20250503122745056-1800480500.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202505/1173617-20250503122856535-1672246885.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202505/1173617-20250503122848133-1725590409.png" alt="" loading="lazy"></p>
<h1 id="x-参考文献">X 参考文献</h1>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/69294769" target="_blank" rel="noopener nofollow">Antlr - 强大的开源语法分析工具 - Zhihu</a></li>
<li><a href="https://blog.csdn.net/qq_37771475/article/details/106528661" target="_blank" rel="noopener nofollow">Antlr4入门（三）如何编写语法文件 - CSDN</a></li>
<li><a href="https://www.cnblogs.com/clonen/p/9083359.html" target="_blank">Antlr4 入门 - 博客园</a></li>
<li><a href="https://blog.csdn.net/weixin_43291055/article/details/122196938" target="_blank" rel="noopener nofollow">antlr4 简单实用入门——(一) - CSDN</a></li>
</ul>

</div>
<div id="MySignature" role="contentinfo">
    <div class="essaySuffix-box">
    <div class="essaySuffix-box-left" style=" margin: 6px auto; ">
        <img src="https://blog-static.cnblogs.com/files/johnnyzen/cnblogs-qq-group-qrcode.gif?t=1679679148" alt="QQ沟通交流群" onload="changeImg(this,200,100)">
    </div>
<div class="essaySuffix-box-right">
    <span class="essaySuffix-right-title">本文作者</span>：
        <strong><span><a href="https://github.com/Johnny-ZTSD" target="_blank">千千寰宇</a></span></strong>
    <br>
    <span style="font-weight: bold; white-space:nowrap;">本文链接</span>：
        <a href="https://www.cnblogs.com/johnnyzen" target="_blank" id="articleLinkElement"> https://www.cnblogs.com/johnnyzen</a>
    <br>
    <span class="essaySuffix-right-title">关于博文</span>：评论和私信会在第一时间回复，或<a href="https://msg.cnblogs.com/msg/send/johnnyzen" target="_blank">直接私信</a>我。
    <br>
    <span class="essaySuffix-right-title">版权声明</span>：本博客所有文章除特别声明外，均采用 <a title="https://creativecommons.org/licenses/by-nc-nd/4.0/" href="http://blog.sina.com.cn/s/blog_896327b90102y6c6.html" alt="BY-NC-SA" target="_blank">BY-NC-SA</a> 
    许可协议。转载请注明出处！<br>
    <span class="essaySuffix-right-title">日常交流</span>：大数据与软件开发-QQ交流群: 774386015<strong>
        <span style="color: #ff0000; font-size: 12pt;">【<a id="post-up" onclick="votePost(getArticleNumber(),'Digg')" href="javascript:void(0);">入群二维码</a>】</span></strong>参见左下角。您的支持、鼓励<span style="color: #ff0000; font-size: 12pt;"></span>是博主技术写作的重要动力！
    <br>
</div>
<div style="clear: both;">
</div>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.7961240159351852" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-03 14:06">2025-05-03 14:05</span>&nbsp;
<a href="https://www.cnblogs.com/johnnyzen">千千寰宇</a>&nbsp;
阅读(<span id="post_view_count">132</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18849096);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18849096', targetLink: 'https://www.cnblogs.com/johnnyzen/p/18849096', title: '[语法分析/编译原理] Antlr : 开源语法分析工具' })">举报</a>
</div>
        