
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18623731" title="发布于 2024-12-23 12:51">
    <span role="heading" aria-level="2">manim边学边做--移动动画</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在<code>Manim</code>中，其实<strong>直线移动</strong>的动画非常简单，每个<code>Mobject</code>对象都有<code>animate</code>属性，</p>
<p>通过<code>obj.animate.shift()</code>或者<code>obj.animate.move_to()</code>很容易将对象从一个位置移往另一个位置。</p>
<p>不过，如果要更复杂的移动路线，那么<code>animate</code>属性的移动方法就无法满足了。</p>
<p>本篇介绍<code>Manim</code>中的两个处理复杂移动动画的类<code>MoveAlongPath</code>和<code>PhaseFlow</code>。</p>
<p><code>MoveAlongPath</code>能使图形对象沿着指定路径（如贝塞尔曲线等）移动，并且可精细调节运动参数。</p>
<p>而且它易于和其他动画组合，主要用于动画制作、路径演示和物理轨迹模拟等场景的动画类。</p>
<p><code>PhaseFlow</code>是一个基于向量场和微分方程，通过数值计算求解轨迹的移动动画。</p>
<p>它可以展示相空间中系统状态动态演化过程，多用在物理系统模拟、控制系统分析和生物系统建模等领域。</p>
<h1 id="1-动画概述">1. 动画概述</h1>
<h2 id="11-movealongpath">1.1. MoveAlongPath</h2>
<p><code>MoveAlongPath</code> 的<strong>核心特点</strong>是能让一个 Mobject（manim 中的图形对象）沿着指定的路径进行移动。</p>
<p>这个路径可以是通过各种方式定义的，比如使用贝塞尔曲线、折线等。</p>
<p>比如，你可以定义一个复杂的二次贝塞尔曲线作为路径，然后让一个圆形 Mobject 沿着这条曲线运动。</p>
<p>此外，它还允许你对运动的参数进行精细控制，可以设置运动的<strong>速度</strong>，通过改变速度参数来实现匀速运动或者变速运动。</p>
<p>比如，你可以让一个对象开始运动较慢，然后逐渐加速沿着路径前进，还可以指定运动的起始点和结束点在路径上的位置，这样就能灵活地控制对象在路径的哪一段进行运动。</p>
<p>最后，<code>MoveAlongPath</code> 可以很方便地与其他动画效果组合使用。</p>
<p>比如，在对象沿着路径运动的同时，可以结合旋转动画，让对象在移动过程中自身还进行旋转，从而创造出更加复杂和生动的动画效果。</p>
<p>它的参数主要有：</p>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>mobject</td>
<td>Mobject</td>
<td>要移动的<code>Mobject</code>对象</td>
</tr>
<tr>
<td>path</td>
<td>VMobject</td>
<td>指定移动的路径</td>
</tr>
<tr>
<td>suspend_mobject_updating</td>
<td>bool</td>
<td>控制是否暂停<code>mobject</code>的更新</td>
</tr>
</tbody>
</table>
<p><code>suspend_mobject_updating</code>参数如果为<code>True</code>，则在动画插值过程中暂停<code>mobject</code>的更新；</p>
<p>如果为<code>False</code>，则继续更新。</p>
<h2 id="12-phaseflow">1.2. PhaseFlow</h2>
<p><code>PhaseFlow</code> 是和动力系统紧密相关的动画效果类。</p>
<p>它是基于向量场来工作的，这个向量场通常是由一个或多个微分方程定义的。</p>
<p>比如，对于一个简单的二维动力系统，可能有$ \frac{dx}{dt}=f(x,y) <span class="math inline">\(和\)</span> \frac{dy}{dt}=g(x,y) $这样的微分方程组来定义向量场，<code>PhaseFlow</code> 会根据这些方程计算相空间中的轨迹。</p>
<p><code>PhaseFlow</code> 主要用于展示相空间（<code>Phase Space</code>）中系统状态的动态演化过程。</p>
<blockquote>
<p><strong>相空间</strong>是一个抽象的空间，其坐标轴可以代表系统的状态变量（如位置、速度等）。</p>
</blockquote>
<p><code>PhaseFlow</code> 能够以动画的形式展示从不同初始状态出发的轨迹是如何在相空间中随着时间流动的，并且这种展示是连续而平滑的。</p>
<p>它的参数主要有：</p>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>mobject</td>
<td>Mobject</td>
<td>要移动的<code>Mobject</code>对象</td>
</tr>
<tr>
<td>function</td>
<td>func</td>
<td>定义相流的动态行为</td>
</tr>
<tr>
<td>virtual_time</td>
<td>float</td>
<td>虚拟时间，用于在计算相流轨迹时确定时间步长等相关计算</td>
</tr>
<tr>
<td>suspend_mobject_updating</td>
<td>bool</td>
<td>控制是否暂停<code>mobject</code>的更新</td>
</tr>
<tr>
<td>rate_func</td>
<td>func</td>
<td>控制动画的速率</td>
</tr>
</tbody>
</table>
<p><code>function</code>参数通常基于给定的微分方程来计算相空间中的轨迹变化。</p>
<h1 id="2-使用示例">2. 使用示例</h1>
<p>下面通过示例来演示<code>MoveAlongPath</code>和<code>PhaseFlow</code>的应用场景。</p>
<p>示例中的应用场景是简化之后的，目的是演示<code>MoveAlongPath</code>和<code>PhaseFlow</code>的使用方式。</p>
<h2 id="21-模拟行星绕太阳公转">2.1. 模拟行星绕太阳公转</h2>
<p>该示例使用<code>MoveAlongPath</code>创建了一个行星绕太阳公转的动画，通过定义椭圆轨道路径，让行星沿着该路径运动，模拟了天体运动场景。</p>
<pre><code class="language-python"># 创建太阳
sun = Dot(color=YELLOW, radius=0.5)
# 创建椭圆轨道
orbit_path = Ellipse(width=4, height=2)
# 创建行星
planet = Dot(color=BLUE, radius=0.2)
self.add(sun, orbit_path, planet)
# 让行星沿着椭圆轨道运动
self.play(
    MoveAlongPath(planet, orbit_path),
    run_time=5,
    rate_func=linear,
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202412/83005-20241223125038140-511686833.gif" alt="" loading="lazy"></p>
<h2 id="22-展示函数曲线绘制过程">2.2. 展示函数曲线绘制过程</h2>
<p>这个示例利用<code>MoveAlongPath</code>展示了函数曲线的绘制过程，通过沿着定义好的函数曲线路径移动一个点，帮助理解函数的形状。</p>
<pre><code class="language-python"># 定义函数（这里以y = x^2为例）
def f(x):
    return x**2

graph = axes.plot(
    f,
    x_range=[-2.5, 2.6],
    color=GREEN,
    stroke_width=2,
)
self.play(Create(graph))

# 创建一个点沿着曲线运动
moving_dot = Dot(color=YELLOW)
self.play(
    MoveAlongPath(moving_dot, graph),
    run_time=5,
    rate_func=linear,
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202412/83005-20241223125037925-1366248372.gif" alt="" loading="lazy"></p>
<h2 id="23-展示简单谐振子的相空间轨迹">2.3. 展示简单谐振子的相空间轨迹</h2>
<p>这个示例借助<code>PhaseFlow</code>展示了简单谐振子在相空间中的轨迹，根据谐振子的微分方程定义了向量场，动画展示了系统状态在相空间中的变化。</p>
<pre><code class="language-python"># 定义谐振子的微分方程
def harmonic_oscillator_deriv(state):
    # x, v = state
    dxdt = state[1]
    dvdt = -1 * state[0]
    return np.array([dxdt, dvdt, 0])

# 创建相空间中的点（初始位置）
initial_state = np.array([1.0, 0.0])
state_dot = Dot(point=axes.c2p(*initial_state), color=YELLOW)
self.add(state_dot)
# 使用PhaseFlow展示相空间轨迹
self.play(
    PhaseFlow(
        harmonic_oscillator_deriv,
        state_dot,
        virtual_time=5,
        rate_func=linear,
    ),
    run_time=5,
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202412/83005-20241223125038179-1075458863.gif" alt="" loading="lazy"></p>
<h2 id="24-模拟单摆运动在相空间轨迹">2.4. 模拟单摆运动在相空间轨迹</h2>
<p>这个示例使用 <code>PhaseFlow</code> 根据单摆的微分方程来展示其在相空间中的轨迹，以此模拟单摆运动在相空间的动态行为。</p>
<pre><code class="language-python"># 定义单摆的微分方程
def pendulum_deriv(state):
    theta, omega = state[:2]
    g = 9.8  # 重力加速度
    L = 1.0  # 单摆长度
    dtheta_dt = omega
    domega_dt = -g / L * np.sin(theta)
    return np.array([dtheta_dt, domega_dt, 0])

# 创建相空间中的点（初始位置）
# 初始角度为 45 度，初始角速度为 0
initial_state = np.array([np.pi / 4, 0.0]) 
state_dot = Dot(point=axes.c2p(*initial_state), color=YELLOW)
self.add(state_dot)

# 使用 PhaseFlow 展示单摆相空间轨迹
self.play(
    PhaseFlow(
        pendulum_deriv,
        state_dot,
        virtual_time=5,
        rate_func=linear,
    ),
    run_time=5,
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202412/83005-20241223125037943-1644185617.gif" alt="" loading="lazy"></p>
<h1 id="3-附件">3. 附件</h1>
<p>文中的代码只是关键部分的截取，完整的代码共享在网盘中（<code>move.py</code>），</p>
<p>下载地址: <a href="https://url11.ctfile.com/d/45455611-64223578-4fb7ee?p=6872" target="_blank" rel="noopener nofollow">完整代码</a> (访问密码: 6872)</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.08833566099884259" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-23 12:51">2024-12-23 12:51</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18623731" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18623731);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18623731', targetLink: 'https://www.cnblogs.com/wang_yb/p/18623731', title: 'manim边学边做--移动动画' })">举报</a>
</div>
        