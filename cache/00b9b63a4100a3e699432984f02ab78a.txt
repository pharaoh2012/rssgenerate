
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/deali/p/18848662" title="发布于 2025-04-27 00:07">
    <span role="heading" aria-level="2">一次小而美的重构：使用 C# 在 Avalonia 中生成真正好看的词云</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>我之前不是用 Avalonia 开发了 <strong><a href="https://github.com/star-blog/starblog-publisher" target="_blank" rel="noopener nofollow">StarBlogPublisher</a></strong>（一款为 StarBlog 设计的 Markdown 文章发布工具）吗？</p>
<p>当时里面有个分类 <strong>词云（Word Cloud）</strong> 展示功能。<br>
初版的词云虽然 "能用"，但效果极其粗糙——基本只是简单堆叠文字，完全没有体现出词云那种灵动、密集、错落有致的美感。</p>
<p>于是，我决定 <strong>彻底重构</strong> 这一模块，重新寻找合适的词云生成方案。</p>
<h2 id="选型">选型</h2>
<p>在 Avalonia 生态中是没有直接可用的词云组件的。</p>
<p>不过没事，C# 的生态还算丰富，基本要啥有啥，词云自然不在话下。</p>
<p>在调研阶段，我找到了两个比较流行的 C# 词云库：</p>
<ul>
<li><a href="https://github.com/sdcb/Sdcb.WordCloud" target="_blank" rel="noopener nofollow">Sdcb.WordCloud</a></li>
<li><a href="https://github.com/knowledgepicker/word-cloud" target="_blank" rel="noopener nofollow">KnowledgePicker/WordCloud</a></li>
</ul>
<p>简单对比一下：</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>Sdcb.WordCloud</th>
<th>KnowledgePicker.WordCloud</th>
</tr>
</thead>
<tbody>
<tr>
<td>渲染引擎</td>
<td>SkiaSharp（跨平台）</td>
<td>SkiaSharp（跨平台）</td>
</tr>
<tr>
<td>输出格式</td>
<td>图片（PNG）、SVG、JSON</td>
<td>图片（Bitmap）、SVG（需要自绘）</td>
</tr>
<tr>
<td>自定义程度</td>
<td>高（遮罩、字体、多方向、JSON输出等）</td>
<td>中（字体、颜色、布局可定制，但不支持遮罩）</td>
</tr>
<tr>
<td>遮罩功能</td>
<td>✅ 原生支持遮罩图生成特定形状词云</td>
<td>❌ 暂不支持遮罩，生成规则矩形词云</td>
</tr>
<tr>
<td>最近维护状态</td>
<td>活跃（2024年持续更新）</td>
<td>活跃（2024年有提交）</td>
</tr>
<tr>
<td>使用复杂度</td>
<td>中（配置多、自由度高）</td>
<td>中（较简洁，适合快速集成）</td>
</tr>
</tbody>
</table>
<h3 id="共同点">共同点</h3>
<ul>
<li>两者都使用 <code>SkiaSharp</code>，意味着可以在 <strong>Windows、Linux、macOS</strong> 等多平台运行。</li>
<li>都支持灵活配置字体、布局、颜色，并且速度非常快。</li>
</ul>
<h3 id="主要区别">主要区别</h3>
<ul>
<li><strong>Sdcb.WordCloud</strong> 更注重视觉效果（支持复杂遮罩图案），适合追求自定义形状、炫酷效果的场景。</li>
<li><strong>KnowledgePicker.WordCloud</strong> 更注重性能和简洁性，适合标准矩形词云生成，不追求复杂形状。</li>
</ul>
<p>最终，我选择了功能更强大、兼容性更好的 <strong>Sdcb.WordCloud</strong>。</p>
<h2 id="sdcbwordcloud简介">Sdcb.WordCloud简介</h2>
<p><strong>Sdcb.WordCloud</strong> 是一个基于 <code>SkiaSharp</code> 的跨平台词云生成库，具备以下特点：</p>
<ul>
<li><strong>跨平台兼容</strong>：Windows、Linux、macOS 均可使用。</li>
<li><strong>多种输出</strong>：支持生成图片、SVG文件或JSON数据。</li>
<li><strong>高度可定制</strong>：自定义字体、颜色、遮罩图案、文本排列方式等。</li>
<li><strong>无依赖System.Drawing</strong>：在服务器环境也能轻松部署。</li>
<li><strong>开源友好</strong>：MIT License，开发者自由扩展。</li>
</ul>
<h3 id="安装">安装</h3>
<pre><code class="language-bash">dotnet add package Sdcb.WordCloud
</code></pre>
<h2 id="实战在-starblogpublisher-中应用">实战：在 StarBlogPublisher 中应用</h2>
<p>重构后的词云生成逻辑主要分为两步：</p>
<h3 id="获取词频数据">获取词频数据</h3>
<p>首先，从后端API请求分类词频数据，并进行简单扩充（让词云密度更高）。</p>
<pre><code class="language-csharp">private async Task&lt;List&lt;WordScore&gt;?&gt; GetWordScores() {
  var response = await ApiService.Instance.Categories.GetWordCloud();
  if (response.Data == null) throw new Exception("获取词云数据失败");

  var originalScores = response.Data
    .Select(e =&gt; new WordScore(Score: e.Value, Word: e.Name))
    .ToList();

  var extendedScores = new List&lt;WordScore&gt;();
  foreach (var score in originalScores) {
    for (int i = 0; i &lt; 10; i++) {
      extendedScores.Add(score);
    }
  }

  return extendedScores;
}
</code></pre>
<p>这里小技巧：<br>
👉 将原本每个单词的词频<strong>复制多次</strong>，可以有效提升词云的视觉密度和丰富度。</p>
<h3 id="生成词云图像">生成词云图像</h3>
<p>拿到词频数据后，使用 <code>WordCloud.Create()</code> 创建词云对象，并通过遮罩图案和字体定制，生成最终的词云图片。</p>
<pre><code class="language-csharp">private async Task GenerateWordCloudImage() {
  var wordScores = await GetWordScores();
  if (wordScores == null || !wordScores.Any()) {
    ErrorMessage = "没有可用的词云数据";
    return;
  }

  var wc = WordCloud.Create(new WordCloudOptions(900, 900, wordScores) {
    FontManager = new FontManager([
      SKTypeface.FromFamilyName("Times New Roman")
    ]),
    Mask = MaskOptions.CreateWithForegroundColor(
      SKBitmap.Decode(await new HttpClient().GetByteArrayAsync(
        "https://io.starworks.cc:88/cv-public/2024/alice_mask.png"
      )),
      SKColors.White
    )
  });

  using var skImage = wc.ToSKBitmap();
  using var data = skImage.Encode(SKEncodedImageFormat.Png, 100);
  using var stream = new MemoryStream(data.ToArray());
  WordCloudImage = new Bitmap(stream);
}
</code></pre>
<p>这里用了两点增强体验的小技巧：</p>
<ul>
<li>📄 <strong>遮罩图</strong>：使用一张指定形状的透明图，词云可以呈现人物轮廓、LOGO形状等，极大提升美感。</li>
<li>🖋 <strong>自定义字体</strong>：更换字体可以让整体风格更符合网站/应用的设计感。</li>
</ul>
<h2 id="效果展示">效果展示</h2>
<p>话说之前的效果能算词云吗？？</p>
<table>
<thead>
<tr>
<th>修改前</th>
<th>修改后</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://img2024.cnblogs.com/blog/866942/202504/866942-20250427000653494-939438159.png" alt="" loading="lazy"></td>
<td><img src="https://img2024.cnblogs.com/blog/866942/202504/866942-20250427000657883-98599022.png" alt="" loading="lazy"></td>
</tr>
</tbody>
</table>
<h2 id="小结">小结</h2>
<p>通过这次重构，我总结出几点经验：</p>
<ul>
<li>选对库很重要，跨平台、高扩展性是首要考虑。</li>
<li>词云美观与否，关键在于<strong>密度</strong>、<strong>遮罩形状</strong>、<strong>字体风格</strong>的搭配。</li>
<li>尽可能<strong>异步请求</strong>和<strong>局部优化</strong>，避免UI卡顿。</li>
</ul>
<p>如果你也在C#项目中需要集成词云功能，推荐试试<code>Sdcb.WordCloud</code> —— 简单高效，而且效果不错</p>

</div>
<div id="MySignature" role="contentinfo">
    微信公众号：「程序设计实验室」
专注于互联网热门新技术探索与团队敏捷开发实践，包括架构设计、机器学习与数据分析算法、移动端开发、Linux、Web前后端开发等，欢迎一起探讨技术，分享学习实践经验。
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5064700844259259" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-27 00:09">2025-04-27 00:07</span>&nbsp;
<a href="https://www.cnblogs.com/deali">程序设计实验室</a>&nbsp;
阅读(<span id="post_view_count">333</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18848662);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18848662', targetLink: 'https://www.cnblogs.com/deali/p/18848662', title: '一次小而美的重构：使用 C# 在 Avalonia 中生成真正好看的词云' })">举报</a>
</div>
        