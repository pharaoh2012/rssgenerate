
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/yupi/p/18895197" title="发布于 2025-05-25 11:28">
    <span role="heading" aria-level="2">炸裂！Spring AI 1.0 正式发布，让 Java 再次伟大！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/2225420/202505/2225420-20250525112225543-659639456.png" alt="炸裂！Spring AI 1.0 正式发布，让 Java 再次伟大！" class="desc_img">
        Spring AI 框架的第一个正式版本 1.0 终于发布了。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p class="md-end-block md-heading"><span class="md-plain">炸裂，炸裂，炸裂！从第一次提交代码到现在，经过 2 年的沉淀，Spring AI 框架的第一个正式版本 1.0 终于发布了。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1747881171718-91ac3eb5-049b-4510-8012-6736c40c9c95.png"><img src="https://pic.yupi.icu/1/1747881171718-91ac3eb5-049b-4510-8012-6736c40c9c95.png"></span></p>
<p class="md-end-block md-p"><span class="md-plain">有了这玩意，开发 AI 应用就是洒洒水的事，Java 开发者们是不是又爽了，反正我是很兴奋啊，让 Java 再次伟大！</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1747881641460-856dbbed-0d9d-480c-ad16-8e8dfcccbeb5.png"><img src="https://pic.yupi.icu/1/1747881641460-856dbbed-0d9d-480c-ad16-8e8dfcccbeb5.png"></span></p>
<p class="md-end-block md-p"><span class="md-plain">但可能很多同学还不知道 Spring AI 能干什么，凭什么这玩意就让 Java 伟大了？</span></p>
<p class="md-end-block md-p"><span class="md-plain">正好我最近刚带编程导航的同学做完一套 AI 超级智能体实战项目，毫不夸张地说，我已经把 Spring AI 玩得 “手拿把掐” 了。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1747881819511-84f8a2c7-994a-4c1f-b785-584cf3572732.png"><img src="https://pic.yupi.icu/1/1747881819511-84f8a2c7-994a-4c1f-b785-584cf3572732.png"></span></p>
<p class="md-end-block md-p"><span class="md-plain">下面我来给大家快速分享一下 Spring AI 的核心能力和魔法。看完之后，我相信你会点赞收藏三连，并且说一句：“伟的太大了”。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">Spring AI 核心特性</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">1、大模型调用能力</span></h3>
<p class="md-end-block md-p"><span class="md-plain">大模型调用能力是 AI 应用开发的基础，允许应用程序与各种 AI 大模型进行交互，发送提示词并获取模型的响应。Spring AI 提供了统一的接口来支持各种主流大模型，包括 OpenAI GPT 系列、Claude、通义千问等。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1747881987603-4021fe3f-ee20-4330-8586-32e46beba8c8.png"><img src="https://pic.yupi.icu/1/1747881987603-4021fe3f-ee20-4330-8586-32e46beba8c8.png"></span></p>
<p class="md-end-block md-p"><span class="md-plain">Spring AI 通过配置 + 抽象接口简化了大模型的调用过程，我可以直接在配置中声明多个大模型：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-atom">spring<span class="cm-meta">:<br><span><span class="cm-atom">ai<span class="cm-meta">:<br><span>&nbsp; &nbsp;<span class="cm-comment"># 阿里大模型<br><span><span class="cm-atom">&nbsp; dashscope<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; chat<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; options<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; &nbsp; model<span class="cm-meta">:&nbsp;qwen-max<br><span>&nbsp; &nbsp;<span class="cm-comment"># 本地大模型<br><span><span class="cm-atom">&nbsp; ollama<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; base-url<span class="cm-meta">:&nbsp;http<span class="cm-meta">://localhost<span class="cm-meta">:<span class="cm-number">11434<br><span><span class="cm-atom">&nbsp; &nbsp; chat<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; model<span class="cm-meta">:&nbsp;gemma3<span class="cm-meta">:1b<br><span>&nbsp; &nbsp;<span class="cm-comment"># 谷歌大模型<br><span><span class="cm-atom">&nbsp; vertex<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; ai<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; gemini<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; &nbsp; chat<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; options<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; model<span class="cm-meta">:&nbsp;gemini-1.5-pro-001</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">然后使用支持链式调用的 ChatClient 灵活地调用各种不同的大模型：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 使用 Spring AI 调用大模型<br><span><span class="cm-meta">@Bean<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable">ChatClient&nbsp;<span class="cm-def">chatClient(<span class="cm-variable">ChatModel&nbsp;<span class="cm-variable">chatModel) {<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">ChatClient.<span class="cm-variable">builder(<span class="cm-variable">chatModel).<span class="cm-variable">build();<br><span>}<br><span><span>​<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-def">doChat(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">message) {<br><span>&nbsp; &nbsp;<span class="cm-variable">ChatResponse&nbsp;<span class="cm-variable">response&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">chatClient<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">prompt(<span class="cm-variable">message)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">call()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">chatResponse();<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">response.<span class="cm-variable">getResult().<span class="cm-variable">getOutput().<span class="cm-variable">getText();<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">只用一行代码，就能支持 Stream 流式响应，实现打字机效果：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-variable">chatClient<br><span>&nbsp; .<span class="cm-variable">prompt(<span class="cm-variable">message)<br><span>&nbsp; .<span class="cm-variable">stream()</span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">如果不使用 Spring AI，则需要为每个模型分别实现 API 调用，要自己编写请求、解析响应，很麻烦！</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 不使用 Spring AI 调用大模型<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-def">chatWithOpenAI(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">message) {<br><span>&nbsp; &nbsp;<span class="cm-comment">// 配置 OpenAI API<br><span>&nbsp; &nbsp;<span class="cm-variable">OkHttpClient&nbsp;<span class="cm-variable">client&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">OkHttpClient();<br><span>&nbsp; &nbsp;<span class="cm-variable">MediaType&nbsp;<span class="cm-variable">JSON&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">MediaType.<span class="cm-variable">get(<span class="cm-string">"application/json; charset=utf-8");<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 构建请求体<br><span>&nbsp; &nbsp;<span class="cm-variable">JSONObject&nbsp;<span class="cm-variable">requestBody&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">JSONObject();<br><span>&nbsp; &nbsp;<span class="cm-variable">requestBody.<span class="cm-variable">put(<span class="cm-string">"model",&nbsp;<span class="cm-string">"gpt-3.5-turbo");<br><span>&nbsp; &nbsp;<span class="cm-variable">JSONArray&nbsp;<span class="cm-variable">messages&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">JSONArray();<br><span>&nbsp; &nbsp;<span class="cm-variable">JSONObject&nbsp;<span class="cm-variable">userMessage&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">JSONObject();<br><span>&nbsp; &nbsp;<span class="cm-variable">userMessage.<span class="cm-variable">put(<span class="cm-string">"role",&nbsp;<span class="cm-string">"user");<br><span>&nbsp; &nbsp;<span class="cm-variable">userMessage.<span class="cm-variable">put(<span class="cm-string">"content",&nbsp;<span class="cm-variable">message);<br><span>&nbsp; &nbsp;<span class="cm-variable">messages.<span class="cm-variable">put(<span class="cm-variable">userMessage);<br><span>&nbsp; &nbsp;<span class="cm-variable">requestBody.<span class="cm-variable">put(<span class="cm-string">"messages",&nbsp;<span class="cm-variable">messages);<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 发送请求<br><span>&nbsp; &nbsp;<span class="cm-variable">RequestBody&nbsp;<span class="cm-variable">body&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">RequestBody.<span class="cm-variable">create(<span class="cm-variable">requestBody.<span class="cm-variable">toString(),&nbsp;<span class="cm-variable">JSON);<br><span>&nbsp; &nbsp;<span class="cm-variable">Request&nbsp;<span class="cm-variable">request&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">Request.<span class="cm-variable">Builder()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">url(<span class="cm-string">"https://api.openai.com/v1/chat/completions")<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">header(<span class="cm-string">"Authorization",&nbsp;<span class="cm-string">"Bearer "&nbsp;<span class="cm-operator">+&nbsp;<span class="cm-variable">OPENAI_API_KEY)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">post(<span class="cm-variable">body)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-keyword">try&nbsp;(<span class="cm-variable">Response&nbsp;<span class="cm-variable">response&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">client.<span class="cm-variable">newCall(<span class="cm-variable">request).<span class="cm-variable">execute()) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">responseBody&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">response.<span class="cm-variable">body().<span class="cm-variable">string();<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">JSONObject&nbsp;<span class="cm-variable">jsonResponse&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">JSONObject(<span class="cm-variable">responseBody);<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">jsonResponse.<span class="cm-variable">getJSONArray(<span class="cm-string">"choices")<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">getJSONObject(<span class="cm-number">0)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">getJSONObject(<span class="cm-string">"message")<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">getString(<span class="cm-string">"content");<br><span>&nbsp; }&nbsp;<span class="cm-keyword">catch&nbsp;(<span class="cm-variable">Exception&nbsp;<span class="cm-variable">e) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-string">"Error: "&nbsp;<span class="cm-operator">+&nbsp;<span class="cm-variable">e.<span class="cm-variable">getMessage();<br><span>&nbsp; }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">Spring AI 不仅提供了统一接口支持多种大模型，让我们可以轻松切换模型而无需修改业务代码。它还支持多模态大模型调用，使 AI 能够同时处理文本、图像、音频等多种输入类型。</span></p>
<p class="md-end-block md-p"><span class="md-plain">我们只需要将图片等资源添加到消息对象中，一起发送给 AI 就可以了，使用 Spring AI 几行代码就能实现：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 调用多模态模型<br><span><span class="cm-variable-3">String&nbsp;<span class="cm-variable">response&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">ChatClient.<span class="cm-variable">create(<span class="cm-variable">chatModel).<span class="cm-variable">prompt()<br><span>&nbsp; .<span class="cm-variable">user(<span class="cm-variable">u&nbsp;<span class="cm-operator">-&gt;&nbsp;<span class="cm-variable">u.<span class="cm-variable">text(<span class="cm-string">"描述这张图片中的内容")<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">media(<span class="cm-variable">MimeTypeUtils.<span class="cm-variable">IMAGE_PNG,&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">ClassPathResource(<span class="cm-string">"/yupi.png")))<br><span>&nbsp; .<span class="cm-variable">call()<br><span>&nbsp; .<span class="cm-variable">content();</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">如果不使用 Spring AI，多模态处理将变得复杂得多：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 不使用 Spring AI 的多模态实现<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-def">analyzeImage(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">textPrompt,&nbsp;<span class="cm-variable">File&nbsp;<span class="cm-variable">imageFile) {<br><span>&nbsp; &nbsp;<span class="cm-comment">// 读取图像文件并编码为 Base64<br><span>&nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">base64Image&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"";<br><span>&nbsp; &nbsp;<span class="cm-keyword">try&nbsp;{<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">byte[]&nbsp;<span class="cm-variable">fileContent&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">Files.<span class="cm-variable">readAllBytes(<span class="cm-variable">imageFile.<span class="cm-variable">toPath());<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">base64Image&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">Base64.<span class="cm-variable">getEncoder().<span class="cm-variable">encodeToString(<span class="cm-variable">fileContent);<br><span>&nbsp; }&nbsp;<span class="cm-keyword">catch&nbsp;(<span class="cm-variable">IOException&nbsp;<span class="cm-variable">e) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-string">"Error reading image file: "&nbsp;<span class="cm-operator">+&nbsp;<span class="cm-variable">e.<span class="cm-variable">getMessage();<br><span>&nbsp; }<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 构建请求体，不同模型的格式差异很大<br><span>&nbsp; &nbsp;<span class="cm-variable">JSONObject&nbsp;<span class="cm-variable">requestBody&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">JSONObject();<br><span>&nbsp; &nbsp;<span class="cm-variable">requestBody.<span class="cm-variable">put(<span class="cm-string">"model",&nbsp;<span class="cm-string">"gpt-4-vision-preview");<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-variable">JSONArray&nbsp;<span class="cm-variable">messages&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">JSONArray();<br><span>&nbsp; &nbsp;<span class="cm-variable">JSONObject&nbsp;<span class="cm-variable">userMessage&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">JSONObject();<br><span>&nbsp; &nbsp;<span class="cm-variable">userMessage.<span class="cm-variable">put(<span class="cm-string">"role",&nbsp;<span class="cm-string">"user");<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 构建复杂的内容数组<br><span>&nbsp; &nbsp;<span class="cm-variable">JSONArray&nbsp;<span class="cm-variable">contentArray&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">JSONArray();<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 添加文本部分<br><span>&nbsp; &nbsp;<span class="cm-variable">JSONObject&nbsp;<span class="cm-variable">textContent&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">JSONObject();<br><span>&nbsp; &nbsp;<span class="cm-variable">textContent.<span class="cm-variable">put(<span class="cm-string">"type",&nbsp;<span class="cm-string">"text");<br><span>&nbsp; &nbsp;<span class="cm-variable">textContent.<span class="cm-variable">put(<span class="cm-string">"text",&nbsp;<span class="cm-variable">textPrompt);<br><span>&nbsp; &nbsp;<span class="cm-variable">contentArray.<span class="cm-variable">put(<span class="cm-variable">textContent);<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 添加图像部分<br><span>&nbsp; &nbsp;<span class="cm-variable">JSONObject&nbsp;<span class="cm-variable">imageContent&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">JSONObject();<br><span>&nbsp; &nbsp;<span class="cm-variable">imageContent.<span class="cm-variable">put(<span class="cm-string">"type",&nbsp;<span class="cm-string">"image_url");<br><span>&nbsp; &nbsp;<span class="cm-variable">JSONObject&nbsp;<span class="cm-variable">imageUrl&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">JSONObject();<br><span>&nbsp; &nbsp;<span class="cm-variable">imageUrl.<span class="cm-variable">put(<span class="cm-string">"url",&nbsp;<span class="cm-string">"data:image/png;base64,"&nbsp;<span class="cm-operator">+&nbsp;<span class="cm-variable">base64Image);<br><span>&nbsp; &nbsp;<span class="cm-variable">imageContent.<span class="cm-variable">put(<span class="cm-string">"image_url",&nbsp;<span class="cm-variable">imageUrl);<br><span>&nbsp; &nbsp;<span class="cm-variable">contentArray.<span class="cm-variable">put(<span class="cm-variable">imageContent);<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-variable">userMessage.<span class="cm-variable">put(<span class="cm-string">"content",&nbsp;<span class="cm-variable">contentArray);<br><span>&nbsp; &nbsp;<span class="cm-variable">messages.<span class="cm-variable">put(<span class="cm-variable">userMessage);<br><span>&nbsp; &nbsp;<span class="cm-variable">requestBody.<span class="cm-variable">put(<span class="cm-string">"messages",&nbsp;<span class="cm-variable">messages);<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 发送请求并解析响应...<br><span>&nbsp; &nbsp;<span class="cm-comment">// 代码略<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">此外，Spring AI 提供了强大的 Advisors 机制，有点类似面向切面编程，可以在模型调用前后添加额外的逻辑，增强 AI 的能力。</span></p>
<p class="md-end-block md-p"><span class="md-plain">举个例子，使用 Spring AI 内置的日志 Advisor，一行代码就能在调用 AI 前后记录日志：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 使用 Advisors 增强 ChatClient<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-def">doChatWithAdvisors(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">message,&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">chatId) {<br><span>&nbsp; &nbsp;<span class="cm-variable">ChatResponse&nbsp;<span class="cm-variable">response&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">chatClient<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">prompt()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">user(<span class="cm-variable">message)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 添加日志 Advisor<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">advisors(<span class="cm-keyword">new&nbsp;<span class="cm-variable">LoggingAdvisor())<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">call()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">chatResponse();<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">response.<span class="cm-variable">getResult().<span class="cm-variable">getOutput().<span class="cm-variable">getText();<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">Advisor 的应用场景还有很多，比如调用 AI 前检查提示词是否安全、得到 AI 响应后保存到数据库中等等。</span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">2、提示工程</span></h3>
<p class="md-end-block md-p"><span class="md-plain">提示工程（Prompt Engineering）是一门复杂的学问，指通过精心设计提示词，让 AI 更准确地理解用户意图，生成更符合预期的回答，减少幻觉（生成虚假信息）的概率，同时优化 AI 模型的性能表现并节省成本。</span></p>
<p class="md-end-block md-p"><span class="md-plain">Spring AI 通过 Prompt 和 PromptTemplate 类实现提示工程。</span></p>
<p class="md-end-block md-p"><span class="md-plain">Prompt 类可以统一封装多种不同类型的提示词，便于发送给大模型：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 用户提示词<br><span><span class="cm-variable">Message&nbsp;<span class="cm-variable">userMessage&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">UserMessage(<span class="cm-variable">userText);<br><span><span class="cm-comment">// 系统提示词<br><span><span class="cm-variable">Message&nbsp;<span class="cm-variable">systemMessage&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">SystemMessage(<span class="cm-variable">systemText);<br><span><span class="cm-variable">Prompt&nbsp;<span class="cm-variable">prompt&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">Prompt(<span class="cm-variable">List.<span class="cm-variable">of(<span class="cm-variable">userMessage,&nbsp;<span class="cm-variable">systemMessage));</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">利用 PromptTemplate 可以创建支持替换变量的提示词模板，便于提示词的维护和复用：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 使用 Spring AI 的提示模板<br><span><span class="cm-variable">PromptTemplate&nbsp;<span class="cm-variable">promptTemplate&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">PromptTemplate(<span class="cm-string">"你好，我是{name}，我擅长{skill}");<br><span><span class="cm-variable">Prompt&nbsp;<span class="cm-variable">prompt&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">promptTemplate.<span class="cm-variable">create(<span class="cm-variable">Map.<span class="cm-variable">of(<br><span>&nbsp; &nbsp;<span class="cm-string">"name",&nbsp;<span class="cm-string">"鱼皮",&nbsp;<br><span>&nbsp; &nbsp;<span class="cm-string">"skill",&nbsp;<span class="cm-string">"编程"<br><span>));<br><span><span class="cm-variable">ChatResponse&nbsp;<span class="cm-variable">response&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">chatClient.<span class="cm-variable">call(<span class="cm-variable">prompt);</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">如果不使用 Spring AI，你就需要手动 / 或者利用工具类来拼接提示词字符串，会更麻烦：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 不使用 Spring AI 需要手动字符串拼接<br><span><span class="cm-variable-3">String&nbsp;<span class="cm-variable">name&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"AI 恋爱顾问";<br><span><span class="cm-variable-3">String&nbsp;<span class="cm-variable">skill&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"解决恋爱问题";<br><span><span class="cm-variable-3">String&nbsp;<span class="cm-variable">promptText&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"你好，我是"&nbsp;<span class="cm-operator">+&nbsp;<span class="cm-variable">name&nbsp;<span class="cm-operator">+&nbsp;<span class="cm-string">"，我擅长"&nbsp;<span class="cm-operator">+&nbsp;<span class="cm-variable">skill;<br><span><span class="cm-comment">// 还需自行实现条件逻辑、变量转义等<br><span><span class="cm-keyword">if(<span class="cm-variable">hasCondition) {<br><span>&nbsp; &nbsp;<span class="cm-variable">promptText&nbsp;<span class="cm-operator">+=&nbsp;<span class="cm-string">"，我注意到你可能遇到了"&nbsp;<span class="cm-operator">+&nbsp;<span class="cm-variable">conditionType&nbsp;<span class="cm-operator">+&nbsp;<span class="cm-string">"问题";<br><span>}<br><span><span class="cm-comment">// 调用 API 需自行封装请求<br><span><span class="cm-variable">Response&nbsp;<span class="cm-variable">response&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">apiClient.<span class="cm-variable">sendPrompt(<span class="cm-variable">promptText);</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">3、会话记忆</span></h3>
<p class="md-end-block md-p"><span class="md-plain">会话记忆（Chat Memory）使 AI 能够保存多轮对话历史，理解上下文，实现连贯对话体验，防止 AI 断片儿。</span></p>
<p class="md-end-block md-p"><span class="md-plain">利用 Spring AI 的 Advisor 机制，一行代码就能轻松开启对话记忆：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 使用 Spring AI 的会话记忆<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-def">doChatWithMemory(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">message,&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">chatId) {<br><span>&nbsp; &nbsp;<span class="cm-variable">ChatResponse&nbsp;<span class="cm-variable">response&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">chatClient<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">prompt()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">user(<span class="cm-variable">message)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">advisors(<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 将对话记忆保存到内存中<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">MessageChatMemoryAdvisor(<span class="cm-keyword">new&nbsp;<span class="cm-variable">InMemoryChatMemory())<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">call()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">chatResponse();<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">response.<span class="cm-variable">getResult().<span class="cm-variable">getOutput().<span class="cm-variable">getText();<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">还可以设置会话 id 实现隔离、设置上下文大小限制等参数：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 使用 Spring AI 的会话记忆<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-def">doChatWithMemory(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">message,&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">chatId) {<br><span>&nbsp; &nbsp;<span class="cm-variable">ChatResponse&nbsp;<span class="cm-variable">response&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">chatClient<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">prompt()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">user(<span class="cm-variable">message)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">advisors(<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 将对话记忆保存到内存中<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">MessageChatMemoryAdvisor(<span class="cm-keyword">new&nbsp;<span class="cm-variable">InMemoryChatMemory())<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">advisors(<span class="cm-variable">spec&nbsp;<span class="cm-operator">-&gt;&nbsp;<span class="cm-variable">spec.<span class="cm-variable">param(<span class="cm-variable">CHAT_MEMORY_CONVERSATION_ID_KEY,&nbsp;<span class="cm-variable">chatId)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">param(<span class="cm-variable">CHAT_MEMORY_RETRIEVE_SIZE_KEY,&nbsp;<span class="cm-number">10))<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">call()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">chatResponse();<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">response.<span class="cm-variable">getResult().<span class="cm-variable">getOutput().<span class="cm-variable">getText();<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">Spring AI 会自动处理上下文窗口大小限制，避免超出模型最大 token 限制。</span></p>
<p class="md-end-block md-p"><span class="md-plain">如果不使用 Spring AI，需要手动管理对话历史，代码量一下子就上来了：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 不使用 Spring AI 的会话记忆实现<br><span><span class="cm-variable">Map<span class="cm-operator">&lt;<span class="cm-variable-3">String,&nbsp;<span class="cm-variable">List<span class="cm-operator">&lt;<span class="cm-variable">Message<span class="cm-operator">&gt;&gt;&nbsp;<span class="cm-variable">conversationHistory&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">HashMap<span class="cm-operator">&lt;&gt;();<br><span><span>​<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-def">chat(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">message,&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">userId) {<br><span>&nbsp; &nbsp;<span class="cm-comment">// 获取用户历史记录<br><span>&nbsp; &nbsp;<span class="cm-variable">List<span class="cm-operator">&lt;<span class="cm-variable">Message<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">history&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">conversationHistory.<span class="cm-variable">getOrDefault(<span class="cm-variable">userId,&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">ArrayList<span class="cm-operator">&lt;&gt;());<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 添加用户新消息<br><span>&nbsp; &nbsp;<span class="cm-variable">Message&nbsp;<span class="cm-variable">userMessage&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">Message(<span class="cm-string">"user",&nbsp;<span class="cm-variable">message);<br><span>&nbsp; &nbsp;<span class="cm-variable">history.<span class="cm-variable">add(<span class="cm-variable">userMessage);<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 构建完整历史上下文<br><span>&nbsp; &nbsp;<span class="cm-variable-3">StringBuilder&nbsp;<span class="cm-variable">contextBuilder&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable-3">StringBuilder();<br><span>&nbsp; &nbsp;<span class="cm-keyword">for&nbsp;(<span class="cm-variable">Message&nbsp;<span class="cm-variable">msg&nbsp;:&nbsp;<span class="cm-variable">history) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">contextBuilder.<span class="cm-variable">append(<span class="cm-variable">msg.<span class="cm-variable">getRole()).<span class="cm-variable">append(<span class="cm-string">": ").<span class="cm-variable">append(<span class="cm-variable">msg.<span class="cm-variable">getContent()).<span class="cm-variable">append(<span class="cm-string">"\n");<br><span>&nbsp; }<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 调用 AI API<br><span>&nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">response&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">callAiApi(<span class="cm-variable">contextBuilder.<span class="cm-variable">toString());<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 保存 AI 回复到历史<br><span>&nbsp; &nbsp;<span class="cm-variable">Message&nbsp;<span class="cm-variable">aiMessage&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">Message(<span class="cm-string">"assistant",&nbsp;<span class="cm-variable">response);<br><span>&nbsp; &nbsp;<span class="cm-variable">history.<span class="cm-variable">add(<span class="cm-variable">aiMessage);<br><span>&nbsp; &nbsp;<span class="cm-variable">conversationHistory.<span class="cm-variable">put(<span class="cm-variable">userId,&nbsp;<span class="cm-variable">history);<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">response;<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">Spring AI 的实现非常优秀，将会话存储和保存机制分离，我们可以自己定义 ChatMemory，将对话历史保存到数据库等持久存储中。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">4、RAG 检索增强生成</span></h3>
<p class="md-end-block md-p"><span class="md-plain">RAG（Retrieval-Augmented Generation）是指利用外部知识来增强 AI 生成结果的技术。通过从知识库检索相关信息并注入到提示词中，让 AI 能够利用这些信息生成更准确的回答。</span></p>
<p class="md-end-block md-p"><span class="md-plain">比如我带大家做了一个 AI 恋爱大师应用，给 AI 准备了一套专注于恋爱问答的知识库文档：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1747884552579-4d8d5873-cbac-4e30-85b4-dc12bd8edbdd.png"><img src="https://pic.yupi.icu/1/1747884552579-4d8d5873-cbac-4e30-85b4-dc12bd8edbdd.png"></span></p>
<p class="md-end-block md-p"><span class="md-plain">利用 RAG 技术，AI 就能从我自己定义的知识库中获取到特定领域的、最新的信息，不仅能减少大模型的幻觉（防止瞎编内容），还能趁机推荐一波自己的课程，岂不美哉？</span></p>
<p class="md-end-block md-p"><span class="md-plain">所以 AI 的回复也不能完全相信哦~</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1747885198412-cf86e734-d482-490a-925b-896401ce0a3a.png"><img src="https://pic.yupi.icu/1/1747885198412-cf86e734-d482-490a-925b-896401ce0a3a.png"></span></p>
<p class="md-end-block md-p"><span class="md-plain">RAG 的完整工作流程包括文档收集和切割、向量转换和存储、文档过滤和检索、查询增强和关联 4 大步骤。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1747884491944-04de44f3-e024-434a-b79b-de61c8e603cd.png"><img src="https://pic.yupi.icu/1/1747884491944-04de44f3-e024-434a-b79b-de61c8e603cd.png"></span></p>
<p class="md-end-block md-p"><span class="md-plain">Spring AI 给 RAG 全流程的实现都提供了支持：</span></p>
<p class="md-end-block md-p"><span class="md-plain">1）文档读取。直接利用 Spring AI 提供的文档加载器，各种类型的文档都能轻松读取：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-keyword">public&nbsp;<span class="cm-variable">List<span class="cm-operator">&lt;<span class="cm-variable">Document<span class="cm-operator">&gt;&nbsp;<span class="cm-def">loadDocuments() {<br><span>&nbsp; &nbsp;<span class="cm-variable">List<span class="cm-operator">&lt;<span class="cm-variable">Document<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">documents&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">ArrayList<span class="cm-operator">&lt;&gt;();<br><span>&nbsp; &nbsp;<span class="cm-comment">// 加载 Markdown 文档<br><span>&nbsp; &nbsp;<span class="cm-variable">Resource&nbsp;<span class="cm-variable">resource&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">resourceLoader.<span class="cm-variable">getResource(<span class="cm-string">"classpath:documents/knowledge.md");<br><span>&nbsp; &nbsp;<span class="cm-variable">MarkdownDocumentReaderConfig&nbsp;<span class="cm-variable">config&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">MarkdownDocumentReaderConfig.<span class="cm-variable">builder()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">withHorizontalRuleCreateDocument(<span class="cm-atom">true)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">withIncludeCodeBlock(<span class="cm-atom">true)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">withAdditionalMetadata(<span class="cm-string">"source",&nbsp;<span class="cm-string">"knowledge-base")<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();<br><span>&nbsp; &nbsp;<span class="cm-variable">MarkdownDocumentReader&nbsp;<span class="cm-variable">reader&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">MarkdownDocumentReader(<span class="cm-variable">resource,&nbsp;<span class="cm-variable">config);<br><span>&nbsp; &nbsp;<span class="cm-variable">documents.<span class="cm-variable">addAll(<span class="cm-variable">reader.<span class="cm-variable">get());<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">documents;<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">2）向量存储。利用 Spring AI 提供的 VectorStore 轻松将文档转换为向量并保存到向量数据库中：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 创建简单向量存储<br><span><span class="cm-variable">SimpleVectorStore&nbsp;<span class="cm-variable">vectorStore&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">SimpleVectorStore.<span class="cm-variable">builder(<span class="cm-variable">embeddingModel)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();<br><span><span class="cm-comment">// 加载文档并存储<br><span><span class="cm-variable">List<span class="cm-operator">&lt;<span class="cm-variable">Document<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">documents&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">documentLoader.<span class="cm-variable">loadDocuments();<br><span><span class="cm-variable">vectorStore.<span class="cm-variable">add(<span class="cm-variable">documents);</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">3）文档过滤检索 + 查询增强关联。直接使用 QuestionAnswerAdvisor，一行代码就可以让 Spring AI 自动从知识库中检索文档，并将检索到的文档提供给 AI 来增强输出结果。</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-variable">ChatResponse&nbsp;<span class="cm-variable">response&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">chatClient.<span class="cm-variable">prompt()<br><span>&nbsp; .<span class="cm-variable">user(<span class="cm-variable">question)<br><span>&nbsp; .<span class="cm-variable">advisors(<span class="cm-keyword">new&nbsp;<span class="cm-variable">QuestionAnswerAdvisor(<span class="cm-variable">vectorStore))<br><span>&nbsp; .<span class="cm-variable">call()<br><span>&nbsp; .<span class="cm-variable">chatResponse();</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">如果不使用 Spring AI，上述过程的实现可就太复杂了，要自己检索文档、构建提示词等等：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 不使用 Spring AI 的 RAG 实现<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-def">generateAnswerWithKnowledge(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">query) {<br><span>&nbsp; &nbsp;<span class="cm-comment">// 1. 将查询转换为向量<br><span>&nbsp; &nbsp;<span class="cm-keyword">float[]&nbsp;<span class="cm-variable">queryVector&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">embeddingService.<span class="cm-variable">embedText(<span class="cm-variable">query);<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 2. 在向量数据库中搜索相似内容<br><span>&nbsp; &nbsp;<span class="cm-variable">List<span class="cm-operator">&lt;<span class="cm-variable">Document<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">relevantDocs&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">ArrayList<span class="cm-operator">&lt;&gt;();<br><span>&nbsp; &nbsp;<span class="cm-keyword">for&nbsp;(<span class="cm-variable">Document&nbsp;<span class="cm-variable">doc&nbsp;:&nbsp;<span class="cm-variable">vectorDatabase.<span class="cm-variable">getAllDocuments()) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">float&nbsp;<span class="cm-variable">similarity&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">calculateCosineSimilarity(<span class="cm-variable">queryVector,&nbsp;<span class="cm-variable">doc.<span class="cm-variable">getVector());<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">if&nbsp;(<span class="cm-variable">similarity&nbsp;<span class="cm-operator">&gt;&nbsp;<span class="cm-number">0.5) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">relevantDocs.<span class="cm-variable">add(<span class="cm-variable">doc);<br><span>&nbsp; &nbsp; &nbsp; }<br><span>&nbsp; }<br><span>&nbsp; &nbsp;<span class="cm-variable">relevantDocs.<span class="cm-variable">sort((<span class="cm-variable">a,&nbsp;<span class="cm-variable">b)&nbsp;<span class="cm-operator">-&gt;&nbsp;<span class="cm-variable-3">Float.<span class="cm-variable">compare(<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">calculateCosineSimilarity(<span class="cm-variable">queryVector,&nbsp;<span class="cm-variable">b.<span class="cm-variable">getVector()),<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">calculateCosineSimilarity(<span class="cm-variable">queryVector,&nbsp;<span class="cm-variable">a.<span class="cm-variable">getVector())<br><span>&nbsp; ));<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 3. 截取前三个最相关文档<br><span>&nbsp; &nbsp;<span class="cm-variable">relevantDocs&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">relevantDocs.<span class="cm-variable">subList(<span class="cm-number">0,&nbsp;<span class="cm-variable">Math.<span class="cm-variable">min(<span class="cm-number">3,&nbsp;<span class="cm-variable">relevantDocs.<span class="cm-variable">size()));<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 4. 构建提示词，包含检索到的知识<br><span>&nbsp; &nbsp;<span class="cm-variable-3">StringBuilder&nbsp;<span class="cm-variable">prompt&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable-3">StringBuilder();<br><span>&nbsp; &nbsp;<span class="cm-variable">prompt.<span class="cm-variable">append(<span class="cm-string">"使用以下信息回答问题:\n\n");<br><span>&nbsp; &nbsp;<span class="cm-keyword">for&nbsp;(<span class="cm-variable">Document&nbsp;<span class="cm-variable">doc&nbsp;:&nbsp;<span class="cm-variable">relevantDocs) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">prompt.<span class="cm-variable">append(<span class="cm-string">"---\n").<span class="cm-variable">append(<span class="cm-variable">doc.<span class="cm-variable">getContent()).<span class="cm-variable">append(<span class="cm-string">"\n---\n\n");<br><span>&nbsp; }<br><span>&nbsp; &nbsp;<span class="cm-variable">prompt.<span class="cm-variable">append(<span class="cm-string">"问题: ").<span class="cm-variable">append(<span class="cm-variable">query);<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 5. 调用 AI 生成回答<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">aiService.<span class="cm-variable">generateResponse(<span class="cm-variable">prompt.<span class="cm-variable">toString());<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">除了实现基础的 RAG 能力外，Spring AI 还提供了更多高级能力来优化 RAG 的效果。比如提供了完整的 ETL流程的支持，能够快速抽取文档、切分处理文档、并加载到向量存储中。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1747886114680-591a26a3-6674-475b-9eab-e62c52b04b7c.png"><img src="https://pic.yupi.icu/1/1747886114680-591a26a3-6674-475b-9eab-e62c52b04b7c.png"></span></p>
<p class="md-end-block md-p"><span class="md-plain">提供了多查询扩展器，可以为原始提示词生成多个查询变体，提高召回文档的几率：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-variable">MultiQueryExpander&nbsp;<span class="cm-variable">queryExpander&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">MultiQueryExpander.<span class="cm-variable">builder()<br><span>&nbsp; .<span class="cm-variable">chatClientBuilder(<span class="cm-variable">chatClientBuilder)<br><span>&nbsp; .<span class="cm-variable">numberOfQueries(<span class="cm-number">3)<br><span>&nbsp; .<span class="cm-variable">build();<br><span><span class="cm-variable">List<span class="cm-operator">&lt;<span class="cm-variable">Query<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">queries&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">queryExpander.<span class="cm-variable">expand(<span class="cm-keyword">new&nbsp;<span class="cm-variable">Query(<span class="cm-string">"谁是程序员鱼皮？"));</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">提供了查询重写器，可以把原始提示词变得更精确和专业：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-def">doQueryRewrite(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">prompt) {<br><span>&nbsp; &nbsp;<span class="cm-variable">QueryTransformer&nbsp;<span class="cm-variable">queryTransformer&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">RewriteQueryTransformer.<span class="cm-variable">builder()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">chatClientBuilder(<span class="cm-variable">builder)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();<br><span>&nbsp; &nbsp;<span class="cm-variable">Query&nbsp;<span class="cm-variable">query&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">Query(<span class="cm-variable">prompt);<br><span>&nbsp; &nbsp;<span class="cm-comment">// 执行查询重写<br><span>&nbsp; &nbsp;<span class="cm-variable">Query&nbsp;<span class="cm-variable">transformedQuery&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">queryTransformer.<span class="cm-variable">transform(<span class="cm-variable">query);<br><span>&nbsp; &nbsp;<span class="cm-comment">// 输出重写后的查询<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">transformedQuery.<span class="cm-variable">text();<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">效果如图：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1747886020980-0b6e4da9-f59d-4bf5-aabd-fb03d3a3e795.png"><img src="https://pic.yupi.icu/1/1747886020980-0b6e4da9-f59d-4bf5-aabd-fb03d3a3e795.png"></span></p>
<p class="md-end-block md-p"><span class="md-plain">还支持自定义文档检索器，能够更灵活地定义查询规则，比如按照文档的元信息精确查询、只查询相似度最高的 N 条数据等：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-variable">DocumentRetriever&nbsp;<span class="cm-variable">retriever&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">VectorStoreDocumentRetriever.<span class="cm-variable">builder()<br><span>&nbsp; .<span class="cm-variable">vectorStore(<span class="cm-variable">vectorStore)<br><span>&nbsp; .<span class="cm-variable">similarityThreshold(<span class="cm-number">0.73)<br><span>&nbsp; .<span class="cm-variable">topK(<span class="cm-number">5)<br><span>&nbsp; .<span class="cm-variable">filterExpression(<span class="cm-keyword">new&nbsp;<span class="cm-variable">FilterExpressionBuilder()<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">eq(<span class="cm-string">"name",&nbsp;<span class="cm-string">"鱼皮")<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">build())<br><span>&nbsp; .<span class="cm-variable">build();</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">5、工具调用</span></h3>
<p class="md-end-block md-p"><span class="md-plain">工具调用（Tool Calling）允许 AI 借助外部工具完成自身无法直接完成的任务，比如网络搜索、文件操作、数据查询等。它扩展了 AI 的能力范围，使 AI 能够获取实时信息、执行实际操作。</span></p>
<p class="md-end-block md-p"><span class="md-plain">工具调用实现的本质是拼接提示词，让 AI 选择要调用哪些工具，然后由程序调用工具并将返回结果交给 AI 进行后续输出。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1747893550889-cf67c903-5461-43bb-bdf1-d3a497f3e36f.png"><img src="https://pic.yupi.icu/1/1747893550889-cf67c903-5461-43bb-bdf1-d3a497f3e36f.png"></span></p>
<p class="md-end-block md-p"><span class="md-plain">利用 Spring AI，只需要通过注解就能快速定义工具：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 使用 Spring AI 定义工具<br><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">class&nbsp;<span class="cm-def">WebSearchTool&nbsp;{<br><span>&nbsp; &nbsp;<span class="cm-meta">@Tool(<span class="cm-variable">description&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"Search for information from Baidu Search Engine")<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">searchWeb(<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-meta">@ToolParam(<span class="cm-variable">description&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"Search query keyword")&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">query) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 网络搜索实现<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-string">"搜索结果: "&nbsp;<span class="cm-operator">+&nbsp;<span class="cm-variable">query&nbsp;<span class="cm-operator">+&nbsp;<span class="cm-string">" 的相关信息...";<br><span>&nbsp; }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">然后一行代码就能使用工具，Spring AI 会控制程序和大模型进行交互并自动调用工具，非常方便：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-variable">ChatResponse&nbsp;<span class="cm-variable">response&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">chatClient<br><span>&nbsp; .<span class="cm-variable">prompt()<br><span>&nbsp; .<span class="cm-variable">user(<span class="cm-variable">message)<br><span>&nbsp; .<span class="cm-variable">tools(<span class="cm-keyword">new&nbsp;<span class="cm-variable">WebSearchTool())<br><span>&nbsp; .<span class="cm-variable">call()<br><span>&nbsp; .<span class="cm-variable">chatResponse();</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">如果不使用 Spring AI，可就太复杂了！</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 不使用 Spring AI 的工具调用实现<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-def">handleUserRequest(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">userMessage) {<br><span>&nbsp; &nbsp;<span class="cm-comment">// 1. 构建含工具定义的提示词<br><span>&nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">toolDefinition&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"""<br><span>&nbsp; &nbsp; &nbsp; {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"tools": [<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"name":&nbsp;<span class="cm-string">"searchWeb",<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"description":&nbsp;<span class="cm-string">"Search for information from Baidu Search Engine",<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"parameters": {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"type":&nbsp;<span class="cm-string">"object",<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"properties": {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"query": {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"type":&nbsp;<span class="cm-string">"string",<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"description":&nbsp;<span class="cm-string">"Search query keyword"<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"required": [<span class="cm-string">"query"]<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]<br><span>&nbsp; &nbsp; &nbsp; }<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">""";<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 2. 调用 AI 判断是否需要工具<br><span>&nbsp; &nbsp;<span class="cm-variable">JsonObject&nbsp;<span class="cm-variable">aiResponse&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">callAiWithTools(<span class="cm-variable">userMessage,&nbsp;<span class="cm-variable">toolDefinition);<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 3. 解析 AI 响应判断是否需调用工具<br><span>&nbsp; &nbsp;<span class="cm-keyword">if&nbsp;(<span class="cm-variable">aiResponse.<span class="cm-variable">has(<span class="cm-string">"tool_calls")) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">JsonArray&nbsp;<span class="cm-variable">toolCalls&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">aiResponse.<span class="cm-variable">getAsJsonArray(<span class="cm-string">"tool_calls");<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 4. 依次执行每个工具<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">List<span class="cm-operator">&lt;<span class="cm-variable-3">String<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">toolResults&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">ArrayList<span class="cm-operator">&lt;&gt;();<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">for&nbsp;(<span class="cm-variable">JsonElement&nbsp;<span class="cm-variable">toolCall&nbsp;:&nbsp;<span class="cm-variable">toolCalls) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">toolName&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">toolCall.<span class="cm-variable">getAsJsonObject().<span class="cm-variable">get(<span class="cm-string">"name").<span class="cm-variable">getAsString();<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">JsonObject&nbsp;<span class="cm-variable">args&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">toolCall.<span class="cm-variable">getAsJsonObject().<span class="cm-variable">get(<span class="cm-string">"arguments").<span class="cm-variable">getAsJsonObject();<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 5. 根据工具名执行对应工具<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">if&nbsp;(<span class="cm-string">"searchWeb".<span class="cm-variable">equals(<span class="cm-variable">toolName)) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">query&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">args.<span class="cm-variable">get(<span class="cm-string">"query").<span class="cm-variable">getAsString();<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">result&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">searchWeb(<span class="cm-variable">query);&nbsp;<span class="cm-comment">// 实际执行搜索<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">toolResults.<span class="cm-variable">add(<span class="cm-variable">result);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br><span>&nbsp; &nbsp; &nbsp; }<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 6. 将工具结果发回给 AI 生成最终回答<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">callAiWithToolResults(<span class="cm-variable">userMessage,&nbsp;<span class="cm-variable">toolCalls,&nbsp;<span class="cm-variable">toolResults);<br><span>&nbsp; }<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">aiResponse.<span class="cm-variable">get(<span class="cm-string">"content").<span class="cm-variable">getAsString();<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">此外，Spring AI 提供了工具上下文 ToolContext，可以让程序给工具传递额外参数，实现用户身份认证等功能。还支持直接返回模式（returnDirect），可以绕过大模型直接返回工具结果。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">6、MCP 模型上下文协议</span></h3>
<p class="md-end-block md-p"><span class="md-plain">MCP（Model Context Protocol 模型上下文协议）是一种开放标准，目的是增强 AI 与外部系统的交互能力。MCP 为 AI 提供了与外部工具、资源和服务交互的标准化方式，让 AI 能够访问最新数据、执行复杂操作，并与现有系统集成。</span></p>
<p class="md-end-block md-p"><span class="md-plain">可以将 MCP 想象成 AI 应用的 USB 接口，就像 USB 为设备连接各种外设和配件提供了标准化方式一样，MCP 为 AI 模型连接不同的数据源和工具提供了标准化的方法。从而轻松增强 AI 的能力，有效降低开发者的理解成本，并且打造出 MCP 服务生态。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1747893881601-d78714c3-812d-4945-8b3f-c5be3b2b0d46.png"><img src="https://pic.yupi.icu/1/1747893881601-d78714c3-812d-4945-8b3f-c5be3b2b0d46.png"></span></p>
<p class="md-end-block md-p"><span class="md-plain">利用 Spring AI，我们可以快速接入别人的 MCP 服务，只需要定义 MCP 服务配置，然后直接通过 Bean 注入 MCP 服务提供的工具即可：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 使用 Spring AI 的 MCP 客户端<br><span><span class="cm-comment">// 1. 在配置文件中定义 MCP 服务<br><span><span class="cm-comment">// mcp-servers.json<br><span>{<br><span>&nbsp;<span class="cm-string">"mcpServers": {<br><span>&nbsp; &nbsp;<span class="cm-string">"amap-maps": {<br><span>&nbsp; &nbsp; &nbsp;<span class="cm-string">"command":&nbsp;<span class="cm-string">"npx",<br><span>&nbsp; &nbsp; &nbsp;<span class="cm-string">"args": [<span class="cm-string">"-y",&nbsp;<span class="cm-string">"@amap/amap-maps-mcp-server"],<br><span>&nbsp; &nbsp; &nbsp;<span class="cm-string">"env": {<span class="cm-string">"AMAP_MAPS_API_KEY":&nbsp;<span class="cm-string">"你的API密钥"}<br><span>&nbsp; }<br><span>}<br><span>}<br><span><span>​<br><span><span class="cm-comment">// 2. 在应用程序中使用 MCP 服务<br><span><span class="cm-meta">@Resource<br><span><span class="cm-keyword">private&nbsp;<span class="cm-variable">ToolCallbackProvider&nbsp;<span class="cm-variable">toolCallbackProvider;<br><span><span>​<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-def">doChatWithMcp(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">message) {<br><span>&nbsp; &nbsp;<span class="cm-variable">ChatResponse&nbsp;<span class="cm-variable">response&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">chatClient<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">prompt()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">user(<span class="cm-variable">message)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">tools(<span class="cm-variable">toolCallbackProvider)&nbsp;<span class="cm-comment">// MCP 服务提供的所有工具<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">call()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">chatResponse();<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">response.<span class="cm-variable">getResult().<span class="cm-variable">getOutput().<span class="cm-variable">getText();<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">当然，开发 MCP 服务也很简单。先利用注解定义工具，然后将工具注册到 MCP 服务中：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 定义工具<br><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">class&nbsp;<span class="cm-def">ImageSearchTool&nbsp;{<br><span>&nbsp; &nbsp;<span class="cm-meta">@Tool(<span class="cm-variable">description&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"search image from web")<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">searchImage(<span class="cm-meta">@ToolParam(<span class="cm-variable">description&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"Search query keyword")&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">query) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 搜索图片，返回结果<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-string">"https://www.codefather.cn";<br><span>&nbsp; }<br><span>}<br><span><span>​<br><span><span class="cm-comment">// 注册 MCP 服务<br><span><span class="cm-meta">@Bean<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable">ToolCallbackProvider&nbsp;<span class="cm-def">imageSearchTools() {<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">MethodToolCallbackProvider.<span class="cm-variable">builder()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">toolObjects(<span class="cm-keyword">new&nbsp;<span class="cm-variable">ImageSearchTool())<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">如果不使用 Spring AI，你就需要引入 MCP 官方的 SDK 进行开发，或者自主实现，太麻烦了！</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 不使用 Spring AI 的 MCP 实现<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-def">chatWithExternalTools(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">userMessage) {<br><span>&nbsp; &nbsp;<span class="cm-comment">// 1. 启动外部 MCP 服务进程<br><span>&nbsp; &nbsp;<span class="cm-variable">Process&nbsp;<span class="cm-variable">mcpProcess&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">startMcpProcess(<span class="cm-string">"npx",&nbsp;<span class="cm-string">"-y",&nbsp;<span class="cm-string">"@amap/amap-maps-mcp-server");<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 2. 建立与 MCP 服务的通信通道<br><span>&nbsp; &nbsp;<span class="cm-variable">InputStream&nbsp;<span class="cm-variable">inputStream&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">mcpProcess.<span class="cm-variable">getInputStream();<br><span>&nbsp; &nbsp;<span class="cm-variable">OutputStream&nbsp;<span class="cm-variable">outputStream&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">mcpProcess.<span class="cm-variable">getOutputStream();<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 3. 发送初始化握手消息<br><span>&nbsp; &nbsp;<span class="cm-variable">JsonObject&nbsp;<span class="cm-variable">initMessage&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">JsonObject();<br><span>&nbsp; &nbsp;<span class="cm-variable">initMessage.<span class="cm-variable">addProperty(<span class="cm-string">"jsonrpc",&nbsp;<span class="cm-string">"2.0");<br><span>&nbsp; &nbsp;<span class="cm-variable">initMessage.<span class="cm-variable">addProperty(<span class="cm-string">"method",&nbsp;<span class="cm-string">"initialize");<br><span>&nbsp; &nbsp;<span class="cm-comment">// ... 添加更多初始化参数<br><span>&nbsp; &nbsp;<span class="cm-variable">sendMessage(<span class="cm-variable">outputStream,&nbsp;<span class="cm-variable">initMessage);<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 4. 接收并解析服务提供的工具定义<br><span>&nbsp; &nbsp;<span class="cm-variable">JsonObject&nbsp;<span class="cm-variable">response&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">readResponse(<span class="cm-variable">inputStream);<br><span>&nbsp; &nbsp;<span class="cm-variable">JsonArray&nbsp;<span class="cm-variable">toolDefinitions&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">extractToolDefinitions(<span class="cm-variable">response);<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 5. 调用 AI 模型，将工具定义传递给模型<br><span>&nbsp; &nbsp;<span class="cm-variable">JsonObject&nbsp;<span class="cm-variable">aiResponse&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">callAiWithTools(<span class="cm-variable">userMessage,&nbsp;<span class="cm-variable">toolDefinitions);<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 6. 解析 AI 响应，如果需要调用工具则发送给 MCP 服务<br><span>&nbsp; &nbsp;<span class="cm-keyword">if&nbsp;(<span class="cm-variable">aiResponse.<span class="cm-variable">has(<span class="cm-string">"tool_calls")) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">JsonArray&nbsp;<span class="cm-variable">toolCalls&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">aiResponse.<span class="cm-variable">getAsJsonArray(<span class="cm-string">"tool_calls");<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">List<span class="cm-operator">&lt;<span class="cm-variable-3">String<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">toolResults&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">ArrayList<span class="cm-operator">&lt;&gt;();<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">for&nbsp;(<span class="cm-variable">JsonElement&nbsp;<span class="cm-variable">toolCall&nbsp;:&nbsp;<span class="cm-variable">toolCalls) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 7. 将工具调用请求发送给 MCP 服务<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">JsonObject&nbsp;<span class="cm-variable">toolRequest&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">JsonObject();<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">toolRequest.<span class="cm-variable">addProperty(<span class="cm-string">"jsonrpc",&nbsp;<span class="cm-string">"2.0");<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">toolRequest.<span class="cm-variable">addProperty(<span class="cm-string">"method",&nbsp;<span class="cm-string">"executeFunction");<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// ... 添加工具调用参数<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">sendMessage(<span class="cm-variable">outputStream,&nbsp;<span class="cm-variable">toolRequest);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 8. 接收 MCP 服务的执行结果<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">JsonObject&nbsp;<span class="cm-variable">toolResponse&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">readResponse(<span class="cm-variable">inputStream);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">toolResults.<span class="cm-variable">add(<span class="cm-variable">toolResponse.<span class="cm-variable">toString());<br><span>&nbsp; &nbsp; &nbsp; }<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 9. 将工具结果发回给 AI 生成最终回答<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">callAiWithToolResults(<span class="cm-variable">userMessage,&nbsp;<span class="cm-variable">toolCalls,&nbsp;<span class="cm-variable">toolResults);<br><span>&nbsp; }<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 10. 最后关闭 MCP 服务<br><span>&nbsp; &nbsp;<span class="cm-variable">mcpProcess.<span class="cm-variable">destroy();<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">aiResponse.<span class="cm-variable">get(<span class="cm-string">"content").<span class="cm-variable">getAsString();<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">结尾</span></h2>
<p class="md-end-block md-p"><span class="md-plain">以上就是 Spring AI 的核心特性解析，相信大家也感受到使用 Spring AI 开发 AI 应用有多爽了吧！</span></p>
<p class="md-end-block md-p"><span class="md-plain">除了前面提到的之外，Spring AI 还提供了大模型评估测试能力，比如评估 AI 回答与用户输入和上下文的相关性；还提供了全面的可观测性功能，帮助开发者监控 AI 应用的运行状态。</span></p>
<p class="md-end-block md-p"><span class="md-plain">不过目前这些特性还不够成熟，Spring AI 也还有很长一段路要走，后续应该也会推出智能体工作流编排框架吧~</span></p>
<div class="md-hr md-end-block"><hr></div>
<p class="md-end-block md-p"><span class="md-plain">就先分享到这里，我全程直播带大家做的 AI 超级智能体新项目今天就完结了，教程中给大家讲解了 Spring AI 几乎所有的特性和高级用法，甚至带大家阅读开源 Manus 项目的源码并且实现了拥有自主规划能力的 AI 智能体，欢迎大家来 <span class="md-meta-i-c  md-link"><a href="https://www.codefather.cn/" rel="noopener nofollow"><span class="md-plain">编程导航</span></a><span class="md-plain"> 学习。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1747894887694-cd5e7c53-f777-49ad-ae5a-89252a1ac10d.png"><img src="https://pic.yupi.icu/1/1747894887694-cd5e7c53-f777-49ad-ae5a-89252a1ac10d.png"></span></p>
<p class="md-end-block md-p"><span class="md-plain">在我们的 <span class="md-meta-i-c  md-link"><a href="https://www.mianshiya.com/" rel="noopener nofollow"><span class="md-plain">程序员面试刷题神器 - 面试鸭</span></a><span class="md-plain"> 中也新出了 AI 大模型相关的面试题，每道题目都能让你学到很多知识~</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1747894904199-e795908c-638e-4d29-afd5-c8127db010f3.png"><img src="https://pic.yupi.icu/1/1747894904199-e795908c-638e-4d29-afd5-c8127db010f3.png"></span></p>
<p class="md-end-block md-p"><span class="md-plain">还有 <span class="md-meta-i-c  md-link"><a href="https://github.com/liyupi/ai-guide" rel="noopener nofollow"><span class="md-plain">鱼皮开源的 AI 知识库</span></a><span class="md-plain">，里面有很多值得学习的 AI 干货，持续更新~</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">获取知识库：<span class="md-link md-pair-s"><a href="https://github.com/liyupi/ai-guide" rel="noopener nofollow">https://github.com/liyupi/ai-guide</a></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1747796993472-c3d3dd64-2ccd-407e-b427-0a7992fec7d0.png"><img src="https://pic.yupi.icu/1/1747796993472-c3d3dd64-2ccd-407e-b427-0a7992fec7d0.png"></span></p>
<p class="md-end-block md-p"><span class="md-plain">我们下期见咯！</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">更多编程学习资源</span></h2>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/course" rel="noopener nofollow"><span class="md-plain">Java前端程序员必做项目实战教程+毕设网站</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/" rel="noopener nofollow"><span class="md-plain">程序员免费编程学习交流社区（自学必备）</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/course/cv" rel="noopener nofollow"><span class="md-plain">程序员保姆级求职写简历指南（找工作必备）</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.mianshiya.com/" rel="noopener nofollow"><span class="md-plain">程序员免费面试刷题网站工具（找工作必备）</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640584449888772098" rel="noopener nofollow"><span class="md-plain">最新Java零基础入门学习路线 + Java教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586673306091521" rel="noopener nofollow"><span class="md-plain">最新Python零基础入门学习路线 + Python教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586014108303362" rel="noopener nofollow"><span class="md-plain">最新前端零基础入门学习路线 + 前端教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586867363954689" rel="noopener nofollow"><span class="md-plain">最新数据结构和算法零基础入门学习路线 + 算法教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1644279832026075138" rel="noopener nofollow"><span class="md-plain">最新C++零基础入门学习路线、C++教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1641797333479903234" rel="noopener nofollow"><span class="md-plain">最新数据库零基础入门学习路线 + 数据库教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640589994284695553" rel="noopener nofollow"><span class="md-plain">最新Redis零基础入门学习路线 + Redis教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1641035880439271426" rel="noopener nofollow"><span class="md-plain">最新计算机基础入门学习路线 + 计算机基础教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1641366118197153793" rel="noopener nofollow"><span class="md-plain">最新小程序入门学习路线 + 小程序开发教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="http://sqlmother.yupi.icu/" rel="noopener nofollow"><span class="md-plain">最新SQL零基础入门学习路线 + SQL教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586295529324545" rel="noopener nofollow"><span class="md-plain">最新Linux零基础入门学习路线 + Linux教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640588753362108417" rel="noopener nofollow"><span class="md-plain">最新Git/GitHub零基础入门学习路线 + Git教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640587909942099969" rel="noopener nofollow"><span class="md-plain">最新操作系统零基础入门学习路线 + 操作系统教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640588119619551233" rel="noopener nofollow"><span class="md-plain">最新计算机网络零基础入门学习路线 + 计算机网络教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640588392073150465" rel="noopener nofollow"><span class="md-plain">最新设计模式零基础入门学习路线 + 设计模式教程</span></a></span></p>
</li>
<li class="md-list-item md-focus-container">
<p class="md-end-block md-p md-focus"><span class="md-meta-i-c md-link md-expand"><a href="https://www.code-nav.cn/post/1640648711119892481" rel="noopener nofollow"><span class="md-plain">最新软件工程零基础入门学习路线 + 软件工程教程</span></a></span></p>
</li>
</ul>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.44702780622569444" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-25 11:29">2025-05-25 11:28</span>&nbsp;
<a href="https://www.cnblogs.com/yupi">程序员鱼皮</a>&nbsp;
阅读(<span id="post_view_count">109</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18895197);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18895197', targetLink: 'https://www.cnblogs.com/yupi/p/18895197', title: '炸裂！Spring AI 1.0 正式发布，让 Java 再次伟大！' })">举报</a>
</div>
        