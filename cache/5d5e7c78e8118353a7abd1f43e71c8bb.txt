
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18787458" title="发布于 2025-03-23 08:07">
    <span role="heading" aria-level="2">『Plotly实战指南』--柱状图绘制高级篇</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在数据可视化的世界里，柱状图是一种直观且强大的工具，用于展示数据的分布、比较和趋势。</p>
<p>从基础的柱状图出发，我们可以进一步探索更复杂的图表类型，如分组柱状图和堆积柱状图，它们在处理多维数据和复杂关系时具有独特的优势。</p>
<p>本文将深入探讨如何使用<code>Plotly</code>库绘制这些高级柱状图，掌握这些技巧将使你在数据可视化领域更加得心应手。</p>
<h1 id="1-分组柱状图绘制">1. 分组柱状图绘制</h1>
<h2 id="11-柱状图数据结构">1.1. 柱状图数据结构</h2>
<p><strong>分组柱状图</strong>用于比较多个组之间的数据，每个组内又包含多个子组。</p>
<p>这种图表在分析不同类别之间的对比以及同一类别内部的细分对比时非常有用。</p>
<p>例如，比较不同地区的产品销量，同时展示每个地区的不同产品线的销售情况。</p>
<p>在数据结构设计上，需要将数据组织成适合<strong>分组柱状图</strong>的形式。</p>
<p>通常，这涉及到将每个组的数据存储在一个单独的列表或数组中，然后将这些列表组合成一个更大的数据结构，如字典或二维数组。</p>
<p><strong>分组逻辑</strong>的关键在于如何在图表中区分不同组的数据，这通常通过颜色、位置或其他视觉属性来实现。</p>
<h2 id="12-代码示例">1.2. 代码示例</h2>
<p>使用 <code>Plotly</code> 绘制分组柱状图的基本代码如下：</p>
<pre><code class="language-python">import plotly.express as px
import pandas as pd

# 示例数据
data = pd.DataFrame(
    {
        "季度": ["Q1", "Q2", "Q3", "Q4"],
        "产品A": [150, 180, 200, 160],
        "产品B": [120, 140, 170, 130],
        "产品C": [80, 90, 110, 100],
    }
)

# 绘制分组柱状图
fig = px.bar(
    data,
    x="季度",
    y=["产品A", "产品B", "产品C"],
    barmode="group",  # 关键参数：分组模式
    title="各季度产品线销量对比",
)
fig.show()
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250323080620600-874167687.png" alt="" loading="lazy"></p>
<p>在上述代码中，<code>barmode='group'</code> 是实现分组效果的关键参数。</p>
<p>运行代码后，看到两个组的柱状图并排显示在每个类别下，清晰地展示了不同组之间的数据对比。</p>
<h2 id="13-颜色与图例">1.3. 颜色与图例</h2>
<p><strong>颜色</strong>在分组柱状图中起着至关重要的作用，它帮助我们快速区分不同组的数据。</p>
<p>通过自定义颜色方案，可以使图表更加美观和易读。</p>
<p>例如，可以使用不同的颜色代表不同的组，或者根据数据值的大小使用渐变颜色。</p>
<p><strong>图例</strong>则是确保读者能够正确理解图表的关键。</p>
<p>我们需要确保图例清晰地展示每个组的名称和对应的颜色，避免混淆。</p>
<p><code>Plotly</code>中可以通过设置 <code>legend</code> 参数来自定义图例的位置、标题等属性。</p>
<pre><code class="language-python"># 定义颜色
colors = ['rgb(31, 119, 180)', 'rgb(255, 127, 14)']

# 创建分组柱状图
fig = go.Figure()
fig.add_trace(go.Bar(x=categories, y=group1, name='组1', marker_color=colors[0]))
fig.add_trace(go.Bar(x=categories, y=group2, name='组2', marker_color=colors[1]))

# 设置布局
fig.update_layout(
    barmode='group',
    title='分组柱状图示例',
    xaxis_title='类别',
    yaxis_title='值',
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=1.02,
        xanchor="right",
        x=1
    )
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250323080620599-1081211397.png" alt="" loading="lazy"></p>
<p>在上述代码中，我们通过以下方式增加了颜色和图例的变化：</p>
<ol>
<li><strong>颜色</strong>变化：</li>
</ol>
<ul>
<li>定义了一个颜色列表 <code>colors</code>，其中包含了两个自定义颜色。</li>
<li>在添加每个组的柱状图时，使用 <code>marker_color</code> 参数为每个组指定了不同的颜色。</li>
</ul>
<ol start="2">
<li><strong>图例</strong>变化：</li>
</ol>
<ul>
<li>使用 <code>legend</code> 参数来自定义图例的布局。</li>
<li>设置 <code>orientation="h"</code> 将图例的方向改为水平。</li>
<li>调整了图例的位置，使其位于图表的底部右侧。</li>
</ul>
<h2 id="14-其他技巧">1.4. 其他技巧</h2>
<p>为了增强分组柱状图的信息量，还可以添加数据标签，直接在柱状图上显示具体的数值。</p>
<p>这使得无需通过对比柱状图的高度来估算数值，提高了图表的可读性。</p>
<p>此外，自定义<strong>分组间距</strong>与<strong>柱状宽度</strong>可以进一步优化图表的布局，使其更加紧凑或分散，以适应不同的数据量和展示需求。</p>
<p>在处理数据缺失问题时，我们需要考虑如何在图表中优雅地展示缺失值，例如使用特殊的颜色或标记来表示。</p>
<pre><code class="language-python">group1 = [10, 15, 20]
group2 = [25, 30, 35]

# 定义颜色
colors = ['rgb(31, 119, 180)', 'rgb(255, 127, 14)']

# 创建分组柱状图
fig = go.Figure()
fig.add_trace(go.Bar(
    x=categories,
    y=group1,
    name='组1',
    marker_color=colors[0],
    text=group1,  # 添加数据标签
    textposition='auto'  # 设置标签位置为自动
))
fig.add_trace(go.Bar(
    x=categories,
    y=group2,
    name='组2',
    marker_color=colors[1],
    text=group2,  # 添加数据标签
    textposition='auto'  # 设置标签位置为自动
))

# 设置布局
fig.update_layout(
    barmode='group',
    title='分组柱状图示例',
    xaxis_title='类别',
    yaxis_title='值',
    bargap=0.2,  # 修改分组间距
    bargroupgap=0.1  # 修改组内柱状间距
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250323080620609-1625136714.png" alt="" loading="lazy"></p>
<p>在上述代码中，我们进行了以下修改：</p>
<ol>
<li><strong>添加数据标签</strong>：</li>
</ol>
<ul>
<li>在每个 <code>go.Bar</code> 中添加了 <code>text</code> 参数，将其设置为对应的数据值。</li>
<li>使用 <code>textposition='auto'</code> 参数，使数据标签自动显示在柱子上方。</li>
</ul>
<ol start="2">
<li>修改分组间距与柱状宽度：</li>
</ol>
<ul>
<li>使用 <code>bargap=0.2</code> 参数修改了分组间距，值越小，分组之间的间距越小。</li>
<li>使用 <code>bargroupgap=0.1</code> 参数修改了组内柱状间距，值越小，组内柱子越紧凑。</li>
</ul>
<h1 id="2-堆积柱状图绘制">2. 堆积柱状图绘制</h1>
<h2 id="21-数据结构">2.1. 数据结构</h2>
<p><strong>堆积柱状图</strong>将多个数据系列堆叠在同一个柱状图中，用于展示部分与整体的关系。</p>
<p>它适用于分析数据的构成比例和累计效果。</p>
<p>例如，展示不同产品的销售额占总销售额的比例，以及随着时间的推移这些比例的变化情况。</p>
<p>在数据结构设计上，<strong>堆积柱状图</strong>需要将每个数据系列的值按照类别进行累加，以便正确地堆叠在柱状图中。</p>
<p>堆积逻辑的<strong>核心</strong>在于如何计算每个数据系列在堆叠中的位置和高度，这通常通过累加前面所有系列的值来实现。</p>
<h2 id="22-代码示例">2.2. 代码示例</h2>
<p>使用 Plotly 绘制普通堆积柱状图的基本代码如下：</p>
<pre><code class="language-python">import plotly.graph_objects as go

# 示例数据
categories = ["类别A", "类别B", "类别C"]
series1 = [10, 15, 20]
series2 = [25, 30, 35]

# 创建堆积柱状图
fig = go.Figure()
fig.add_trace(go.Bar(x=categories, y=series1, name="系列1"))
fig.add_trace(go.Bar(x=categories, y=series2, name="系列2"))

# 设置布局
fig.update_layout(
    barmode="stack",
    title="普通堆积柱状图示例",
    xaxis_title="类别",
    yaxis_title="值",
)

# 显示图表
fig.show()
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250323080620611-436218218.png" alt="" loading="lazy"></p>
<p>在代码中，<code>barmode='stack'</code> 是实现堆积效果的关键参数。</p>
<p>运行代码后，我们将看到两个数据系列堆叠在每个类别下的柱状图中，直观地展示了数据的累计效果。</p>
<h2 id="23-百分比堆积柱状图">2.3. 百分比堆积柱状图</h2>
<p><strong>百分比堆积柱状图</strong>是<strong>堆积柱状图</strong>的一种变体，它将每个柱状图的高度标准化为100%，用于更清晰地展示数据的构成比例。</p>
<p>通过将绝对值转换为百分比，我们可以更容易地比较不同类别中各数据系列的相对占比。</p>
<pre><code class="language-python"># 百分比堆积柱状图
import plotly.graph_objects as go

# 示例数据
categories = ["类别A", "类别B", "类别C"]
series1 = [10, 15, 20]
series2 = [25, 30, 35]

# 计算每个类别的总值
total = [s1 + s2 for s1, s2 in zip(series1, series2)]

# 将数据转换为百分比
series1_percent = [(s1 / t) for s1, t in zip(series1, total)]
series2_percent = [(s2 / t) for s2, t in zip(series2, total)]

# 创建百分比堆积柱状图
fig = go.Figure()
fig.add_trace(
    go.Bar(
        x=categories,
        y=series1_percent,
        name="系列1",
        text=[f"{p*100:.1f}%" for p in series1_percent],  # 添加百分比标签
        textposition="inside",  # 设置标签位置为柱子内部
    )
)
fig.add_trace(
    go.Bar(
        x=categories,
        y=series2_percent,
        name="系列2",
        text=[f"{p*100:.1f}%" for p in series2_percent],  # 添加百分比标签
        textposition="inside",  # 设置标签位置为柱子内部
    )
)

# 设置布局
fig.update_layout(
    barmode="stack",
    title="百分比堆积柱状图示例",
    xaxis_title="类别",
    yaxis_title="百分比",
    yaxis=dict(tickformat=".0%"),  # 设置y轴刻度格式为百分比
    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
)

# 显示图表
fig.show()
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250323080620603-1545203272.png" alt="" loading="lazy"></p>
<p>代码调整说明：</p>
<ol>
<li><strong>数据预处理</strong>：</li>
</ol>
<ul>
<li>计算了每个类别的总值。</li>
<li>将每个系列的数据转换为占其所在类别总值的百分比。</li>
</ul>
<ol start="2">
<li><strong>添加百分比标签</strong>：</li>
</ol>
<ul>
<li>在每个 <code>go.Bar</code> 中添加了 <code>text</code> 参数，显示每个数据点的百分比。</li>
<li>使用 <code>textposition='inside'</code> 将标签显示在柱子内部。</li>
</ul>
<ol start="3">
<li><strong>布局调整</strong>：</li>
</ol>
<ul>
<li>设置了 <code>yaxis=dict(tickformat='.0%')</code>，使y轴的刻度显示为整数百分比格式。</li>
</ul>
<h1 id="3-分组与堆积柱状图的对比">3. 分组与堆积柱状图的对比</h1>
<p><strong>分组柱状图</strong>和<strong>堆积柱状图</strong>在视觉效果和应用场景上存在显著差异。</p>
<p><strong>分组柱状图</strong>更侧重于比较不同组之间的数据，强调组间的对比关系；</p>
<p>而<strong>堆积柱状图</strong>则更侧重于展示数据的构成和累计效果，强调部分与整体的关系。</p>
<p>在实际应用中，选择哪种图表类型取决于你的分析目标和数据特点。</p>
<p>如果需要比较不同类别之间的差异，<strong>分组柱状图</strong>可能是更好的选择；</p>
<p>如果需要分析数据的构成比例和累计趋势，<strong>堆积柱状图</strong>则更为合适。</p>
<h1 id="4-总结">4. 总结</h1>
<p>本文主要介绍了<strong>分组柱状图</strong>和<strong>堆积柱状图</strong>的绘制技巧，理解它们在复杂数据分析中的应用场景和价值。</p>
<p>此外，在处理大数据量时，性能优化是必不可少的。</p>
<p>可以采用数据采样、简化图表元素等方法来提高绘图效率。</p>
<p>图表美化方面，通过调整布局、颜色和标签等元素，可以使图表更加专业和美观。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.6736449178391204" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-23 08:07">2025-03-23 08:07</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">42</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18787458" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18787458);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18787458', targetLink: 'https://www.cnblogs.com/wang_yb/p/18787458', title: '『Plotly实战指南』--柱状图绘制高级篇' })">举报</a>
</div>
        