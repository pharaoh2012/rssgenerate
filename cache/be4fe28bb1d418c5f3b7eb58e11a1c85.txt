
        <h2>
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kanlon2015/p/18775290" title="发布于 2025-03-16 17:29">
    <span role="heading" aria-level="2">MySQL查询建表规范</span>
    

</a>

        </h2>
        <div class="postbody">
            <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>因为之前一直再查找一些比较好的数据库规范，以方便在开发时连接 MySQL 进行查询/建表的时候，能根据规范来执行，达到提高 查询速度 / 执行 SQL 的性能 和提升 MySQL 的整体性能， 这里主要是存放一些比较好的一些数据库设计规范（主要用了<code>公司某位同事</code>整理的数据库规范，已得到该大佬的授权），我在此基础上增补了部分规则。</p>
<h2 id="1-基本规范">1. 基本规范</h2>
<ol>
<li>使用 innodb 存储引擎 后续使用 TokuDB 存储引擎</li>
<li>表字符集使用 UTF8mb4</li>
<li>所有表和表字段必须添加备注，表备注格式为：<code>创建人，创建时间，表的业务说明</code></li>
<li>所有表必须添加主键和自增 id，自增列无业务意义也需添加</li>
<li>生产 mysql 数据库不允许存储图片和文件等大数据</li>
<li>禁止在线上数据库进行压力测试</li>
<li>数据量较大的表建议建分区表</li>
<li>禁止使用外键 允许逻辑意义上的外键依赖</li>
<li>能用代理账号链接数据库的尽量使用代理账号链接，方便运维那边以后做数据库迁移工作</li>
<li>如果只涉及到查询操作的，使用只查权限的账号建立链接，例如：<a href="https://github.com/apache/incubator-superset" target="_blank" rel="noopener nofollow">Superset</a> 等bi系统建立报表的查询</li>
<li>一般情况下线上业务使用的数据库账号为写的账号，因为线上业务一般不涉及到对字段/表定义更改操作，管理权限权限账号一般只用于自己开发本地连接</li>
<li>申请/创建 数据库的时候一般使用主主配置即可，即一个库作为写主库，一个库作为读主库</li>
<li>修改测试库 ddl 级别的 需要提交脚本至升级文档 升级时一起执行脚本 确保测试库和正式库统一</li>
</ol>
<h2 id="2-命名规范">2. 命名规范</h2>
<ol>
<li>表名建议带上业务英文名的，第一个字母 +"_" 开头，例如:data_service 业务，表名应该都是以 d_开头，控制在 15 个字符以内</li>
<li>表名字符禁止超过 32 个字符</li>
<li>库名、表名、字段名禁止使用 MySQL 保留字</li>
<li>临时库、表名必须以 <code>tmp</code> 为前缀，并以日期为后缀</li>
<li>备份库、表必须以 <code>bak</code> 为前缀，并以日期为后缀</li>
<li>操作日志类型的库、表建议以<code>log</code>为后缀</li>
<li>普通索引命名：<code>idx_开头 + 字段名</code>（单阶字段用全字段名，双阶或者三阶使用前阶首字母加最后阶的全拼，例如：create_time 索引命名为：idx_ctime）</li>
<li>唯一索引命名：<code>uniq_开头 + 字段名</code> 方法参考二级索引命名</li>
</ol>
<h2 id="3-数据表设计规范">3. 数据表设计规范</h2>
<ol>
<li>自增 id 必须添加 unsigned</li>
<li>字段设置 not null 的必须有默认值</li>
<li>少用 text 类型，尽可能改用 varchar，禁止使用 blob 类型，实在避免不了 blob，请拆表</li>
<li>存储非负整数需添加 unsigned</li>
<li>禁止使用 FLOAT 和 DOUBLE 存储浮点数，改用 DECIMAL 存储</li>
<li>尽可能不使用 <code>default null</code>，非必要使用 null，建议改用 <code>default 0</code> 或 <code>default ''</code> (以免使用查询时候null 值情况查询需要另外处理)，同时也不建议使用 <code>default ''</code></li>
<li>所有 type 和 status 等业务字段使用 TINYINT 类型，禁止使用 varchar，避免不了 varchar 的情况下则使用 enum 类型</li>
<li>使用 datetime 存储时间（mysql5.6 以后）</li>
<li>用好数值类型字段，如果数值字段没那么大，就不要用 bigint</li>
<li>禁止在数据库中存储明文密码，把密码加密后存储</li>
<li>能使用分区表尽量使用分区表</li>
<li>表设计前必须评估字段的字长，避免没必要的空间浪费和性能损耗</li>
<li>建议单表字段数控制在 20 个以内，再多建议垂直分表</li>
<li>外键约束一般不在数据库上创建，只表达一个逻辑的概念，由程序控制</li>
<li>所有表必须有 create_time 和 update_time，并添加触发器（CURRENT_TIMESTAMP 和 CURRENT_TIMESTAMP ON UPDATE）</li>
</ol>
<h2 id="四索引规范">四。索引规范</h2>
<ol>
<li>表必须有主键（聚集索引）</li>
<li>不使用 UUID MD5 HASH 这些作为主键 (数值太离散)</li>
<li>默认使非空的唯一键作为主键</li>
<li>一般自增列为主键，分区表的分区键可以与自增列做复合索引</li>
<li>单索引字段数不超过 5 个</li>
<li>优先考虑覆盖索引</li>
<li>避免冗余和重复索引</li>
<li>避免使用基数低的字段做索引，例如：性别、类型、状态</li>
<li>低基数字段建议根据 where 谓词条件建立复合索引</li>
<li>ORDER BY、GROUP BY、DISTINCT、WHERE 后字段需根据实际情况建立索引</li>
<li>索引字段的默认值不能为 NULL</li>
<li>能使用唯一索引就要使用唯一索引，但要求是字长不能超 8 位和不离散的字段，超 8 位的和离散字段，使用前缀索引</li>
</ol>
<h2 id="5-sql-开发规范">5. SQL 开发规范</h2>
<ol>
<li>代码中禁止使用 <code>select *</code></li>
<li>不使用标量子查询，尽可能改外连接</li>
<li>表关联控制在 3 个表内</li>
<li>表关联字段尽可能使用主键</li>
<li>禁止大表做子查询</li>
<li>表关联排序字段必须在驱动表内</li>
<li>表关联字段必须有索引</li>
<li>不使用标量子查询，尽可能改为 left join 或者 right join</li>
<li>不使用 <code>in/not in/exists/not exists</code> 子查询，尽可能改为 inner join</li>
<li>禁止大表与大表做 join</li>
<li>OR 改写为 IN () 或者 UNION</li>
<li>使用 union all 替代 union</li>
<li>分页需改写为如下：<code>select id,text from test limit 10000,10;</code> --&gt; <code>select b.id,b.text from (select id from test a limit 10000,10) left join test b on a.id=b.id</code></li>
<li>不建议使用前缀是 % 的 like（无法使用索引）</li>
<li>不建议 <code>where</code> 条件里 <code>in （子查询）</code>，即使 in 的是索引字段  <a href="https://www.cnblogs.com/xh831213/archive/2012/05/09/2491272.html" target="_blank">参考</a></li>
</ol>
<h2 id="6-建表实例">6. 建表实例</h2>
<p><code>1_ddl_新建 demo 表.sql</code></p>
<pre><code class="language-sql">CREATE TABLE `c_demo` (
  `id` bigint (11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar (50) NOT NULL default '' COMMENT ' 名称 ',
  `creator` varchar (50) NOT NULL  default ''  COMMENT ' 创建者 ',
  `is_deleted` tinyint (2) NOT NULL DEFAULT '0' COMMENT ' 是否逻辑删除 0. 否 1. 是 ',
  `create_time` datetime NOT NULL DEFAULT '2020-01-13 00:00:00' COMMENT ' 创建时间 ', -- 这里是为了兼容MySQL 5.6 之前的版本，5.6 之前的版本不能同时建两个 带有 CURRENT_TIMESTAMP 触发的字段
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT ' 更新时间 ',
  PRIMARY KEY (`id`),
  KEY `idx_name_deleted` (`name`,`is_deleted`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='zhangsan-2020.1.3 - 测试案例  '
</code></pre>
<h2 id="参考">参考</h2>
<ol>
<li><a href="https://www.zhihu.com/question/39967106" target="_blank" rel="noopener nofollow">知乎上关于“数据库设计时的一些细节的东西如何处理?”的问答</a></li>
<li><a href="https://github.com/alibaba/p3c/blob/master/Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E5%B5%A9%E5%B1%B1%E7%89%88%EF%BC%89.pdf" target="_blank" rel="noopener nofollow">阿里的 Java开发手册（嵩山版）.pdf</a></li>
</ol>

</div>
<div class="clear"></div>

        </div>
        <p class="postfoot">
            posted on 
<span id="post-date" data-last-update-days="0.031255541335648146" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-16 17:30">2025-03-16 17:29</span>&nbsp;
<a href="https://www.cnblogs.com/kanlon2015">kanlon</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18775290" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18775290);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18775290', targetLink: 'https://www.cnblogs.com/kanlon2015/p/18775290', title: 'MySQL查询建表规范' })">举报</a>

        </p>
    