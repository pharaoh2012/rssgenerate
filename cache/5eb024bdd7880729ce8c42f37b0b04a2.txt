
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/shuchen007/p/18829409" title="发布于 2025-04-16 19:15">
    <span role="heading" aria-level="2">大模型流式调用规范（SSE）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p data-start="118" data-end="220">随着大语言模型的广泛应用，如何高效地与其进行接口调用成为一个关键问题。传统的请求-响应模式在面对大模型生成大量文本时存在响应延迟高、用户体验差等问题。流式输出（Streaming）是解决该问题的重要手段。</p>
<p data-start="222" data-end="310">本文将介绍基于 <strong data-start="230" data-end="257">Server-Sent Events（SSE）</strong> 协议的大模型流式调用规范，并结合 <strong data-start="275" data-end="290">Spring Boot</strong> 给出一个完整的服务端与客户端调用示例。</p>
<hr data-start="312" data-end="315">
<h2 data-start="317" data-end="331">一、为什么选择SSE？</h2>
<p data-start="333" data-end="433">在与大模型进行对话时，模型通常会逐字逐句生成内容。如果采用传统的HTTP请求，需要等到模型生成完所有内容再响应给客户端，导致延迟较高。而使用SSE协议，可以做到边生成边推送，极大提升交互性和用户体验。</p>
<h3 data-start="435" data-end="446">SSE的优势：</h3>
<ul data-start="448" data-end="511">
<li data-start="448" data-end="471">
<p data-start="450" data-end="471">单向连接：服务端主动推送，客户端自动接收；</p>
</li>
<li data-start="472" data-end="491">
<p data-start="474" data-end="491">使用HTTP协议，浏览器原生支持；</p>
</li>
<li data-start="492" data-end="511">
<p data-start="494" data-end="511">实现简单，适用于流式文本输出场景。</p>
</li>
</ul>
<hr data-start="513" data-end="516">
<h2 data-start="518" data-end="538">二、流式调用接口规范（基于SSE）</h2>
<h3 data-start="540" data-end="548">请求方式</h3>
<ul data-start="550" data-end="636">
<li data-start="550" data-end="565">
<p data-start="552" data-end="565"><strong data-start="552" data-end="558">方法</strong>：POST</p>
</li>
<li data-start="566" data-end="603">
<p data-start="568" data-end="603"><strong data-start="568" data-end="584">Content-Type</strong>：application/json</p>
</li>
<li data-start="604" data-end="636">
<p data-start="606" data-end="636"><strong data-start="606" data-end="616">Accept</strong>：text/event-stream</p>
</li>
</ul>
<h3 data-start="638" data-end="646">请求示例</h3>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary">
<div class="flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between h-9 bg-token-sidebar-surface-primary dark:bg-token-main-surface-secondary select-none rounded-t-[5px]">
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">POST /chat/stream
{
  "prompt": "你好，请介绍一下三国演义。",
  "stream": true
}
</pre>
</div>
<p>　　</p>
</div>
</div>
<h3 data-start="729" data-end="743">响应格式（SSE流）</h3>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary">
<div class="flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between h-9 bg-token-sidebar-surface-primary dark:bg-token-main-surface-secondary select-none rounded-t-[5px]">
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">data: {"id":"msg_001","content":"三国演义是中国古代四大名著之一..."}
data: {"id":"msg_001","content":"它讲述了东汉末年群雄割据的故事..."}
data: [DONE]</pre>
</div>
</div>
</div>
<ul data-start="879" data-end="970">
<li data-start="879" data-end="907">
<p data-start="881" data-end="907">每行以 <code data-start="885" data-end="893">data: </code> 开头，后接JSON字符串；</p>
</li>
<li data-start="908" data-end="937">
<p data-start="910" data-end="937">最后一行以 <code data-start="916" data-end="930">data: [DONE]</code> 表示流结束；</p>
</li>
<li data-start="938" data-end="970">
<p data-start="940" data-end="970">客户端需要实时解析接收到的 <code data-start="954" data-end="963">content</code> 字段并展示。</p>
</li>
</ul>
<hr data-start="972" data-end="975">
<h2 data-start="977" data-end="998">三、Spring Boot服务端示例</h2>
<p data-start="1000" data-end="1031">下面是一个基于Spring Boot的SSE流式接口实现示例。</p>
<h3 data-start="1033" data-end="1051">1. Controller层</h3>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary">
<div class="flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between h-9 bg-token-sidebar-surface-primary dark:bg-token-main-surface-secondary select-none rounded-t-[5px]">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@RestController
@RequestMapping(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/chat</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> ChatController {

    @PostMapping(value </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/stream</span><span style="color: rgba(128, 0, 0, 1)">"</span>, produces =<span style="color: rgba(0, 0, 0, 1)"> MediaType.TEXT_EVENT_STREAM_VALUE)
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> SseEmitter streamChat(@RequestBody ChatRequest request) {
        SseEmitter emitter </span>= <span style="color: rgba(0, 0, 255, 1)">new</span> SseEmitter(<span style="color: rgba(128, 0, 128, 1)">0L</span>); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 不设置超时时间</span>
<span style="color: rgba(0, 0, 0, 1)">
        CompletableFuture.runAsync(() </span>-&gt;<span style="color: rgba(0, 0, 0, 1)"> {
            </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 模拟逐句生成的响应</span>
                List&lt;String&gt; responses =<span style="color: rgba(0, 0, 0, 1)"> mockModelResponse(request.getPrompt());

                </span><span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> (String sentence : responses) {
                    Map</span>&lt;String, String&gt; data = <span style="color: rgba(0, 0, 255, 1)">new</span> HashMap&lt;&gt;<span style="color: rgba(0, 0, 0, 1)">();
                    data.put(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">id</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">msg_001</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                    data.put(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">content</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, sentence);

                    emitter.send(SseEmitter.</span><span style="color: rgba(0, 0, 255, 1)">event</span><span style="color: rgba(0, 0, 0, 1)">()
                            .data(</span><span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ObjectMapper().writeValueAsString(data)));

                    Thread.sleep(</span><span style="color: rgba(128, 0, 128, 1)">500</span>); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 模拟生成延迟</span>
<span style="color: rgba(0, 0, 0, 1)">                }

                emitter.send(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">data: [DONE]\n\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                emitter.complete();
            } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (Exception e) {
                emitter.completeWithError(e);
            }
        });

        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> emitter;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> List&lt;String&gt;<span style="color: rgba(0, 0, 0, 1)"> mockModelResponse(String prompt) {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> List.of(
                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">三国演义是中国古代四大名著之一。</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">它讲述了东汉末年群雄割据的故事。</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">主要人物包括刘备、关羽、张飞、曹操、孙权等。</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
        );
    }
}</span></pre>
</div>
<p>&nbsp;</p>
<span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-title function_"><span class="hljs-params"><span class="hljs-keyword"><span class="hljs-string"><br></span></span></span></span></span></span></div>
</div>
<h3 data-start="2381" data-end="2393">2. 请求类定义</h3>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary">
<div class="flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between h-9 bg-token-sidebar-surface-primary dark:bg-token-main-surface-secondary select-none rounded-t-[5px]">
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">public class ChatRequest {
    private String prompt;
    private boolean stream;

    // getters and setters
}
</pre>
</div>
<p>　　</p>
</div>
</div>
<hr data-start="2520" data-end="2523">
<h2 data-start="2525" data-end="2543">四、客户端调用示例（Java）</h2>
<p data-start="2545" data-end="2571">使用Spring WebFlux进行客户端流式接收：</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">WebClient client = WebClient.create();

client.post()
    .uri("http://localhost:8080/chat/stream")
    .header(HttpHeaders.ACCEPT, MediaType.TEXT_EVENT_STREAM_VALUE)
    .bodyValue(Map.of("prompt", "介绍一下三国演义", "stream", true))
    .retrieve()
    .bodyToFlux(String.class)
    .doOnNext(System.out::println)
    .blockLast();
</pre>
</div>
<p>　　</p>
<p data-start="2545" data-end="2571">&nbsp;</p>
<hr data-start="2913" data-end="2916">
<h2 data-start="2918" data-end="2928">五、总结与建议</h2>
<p data-start="2930" data-end="2968">基于SSE的大模型流式调用，能显著提升响应速度与用户体验。在使用时需要注意：</p>
<ul data-start="2970" data-end="3047">
<li data-start="2970" data-end="3008">
<p data-start="2972" data-end="3008">SSE适合文字类输出，若涉及音频/图片等内容建议使用WebSocket；</p>
</li>
<li data-start="3009" data-end="3028">
<p data-start="3011" data-end="3028">服务端处理时需考虑异常与资源释放；</p>
</li>
<li data-start="3029" data-end="3047">
<p data-start="3031" data-end="3047">客户端需具备实时处理与拼接能力。</p>
</li>
</ul>
</div>
<div id="MySignature" role="contentinfo">
    <b>1、将通过毅力完成的事转化为习惯。<br>
2、清心寡欲、方能高枕无忧。<br>
  3、纸上得来终觉浅，绝知此事要躬行。<br>

<p id="signName">种一棵树最好的时间是 十年前。    其次是， 现在！</p></b>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5789492421724537" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-16 19:15">2025-04-16 19:15</span>&nbsp;
<a href="https://www.cnblogs.com/shuchen007">书晨007</a>&nbsp;
阅读(<span id="post_view_count">48</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18829409);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18829409', targetLink: 'https://www.cnblogs.com/shuchen007/p/18829409', title: '大模型流式调用规范（SSE）' })">举报</a>
</div>
        