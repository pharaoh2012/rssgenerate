
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/somefuture/p/18650620" title="发布于 2025-01-03 17:28">
    <span role="heading" aria-level="2">在jooq的POJO类中使用Lombok的Data注解</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>jooq生成pojo类的配置根据官方给的如下：<br>
<a href="https://www.jooq.org/doc/3.14/manual/getting-started/tutorials/jooq-in-7-steps/jooq-in-7-steps-step3/" target="_blank" rel="noopener nofollow">https://www.jooq.org/doc/3.14/manual/getting-started/tutorials/jooq-in-7-steps/jooq-in-7-steps-step3/</a></p>
<hr>
<p>如果想要使用lombok注解，需要自定义生成器。</p>
<blockquote>
<p>原生的参数并不足够支持这样做。</p>
</blockquote>
<blockquote>
<p>另外一般也不需要这样做，因为更推荐把生成的代码放到 <code>target/generated-sources</code> 下面</p>
</blockquote>
<p>自定义类如下:</p>
<pre><code class="language-java">import org.jooq.codegen.GeneratorStrategy;
import org.jooq.codegen.JavaGenerator;
import org.jooq.codegen.JavaWriter;
import org.jooq.meta.TableDefinition;
import org.jooq.meta.TypedElementDefinition;
import org.jooq.tools.StringUtils;

public class LombokJavaGenerator extends JavaGenerator {
    @Override
    protected void generatePojo(TableDefinition table, JavaWriter out) {
        final String className = getStrategy().getJavaClassName(table, GeneratorStrategy.Mode.POJO);

        printPackage(out, table, GeneratorStrategy.Mode.POJO);

        generatePojoClassJavadoc(table, out);

        out.println("@lombok.Data");
        out.println("public class %s {", className);

        for (TypedElementDefinition&lt;?&gt; column : table.getColumns()) {
            out.println("private %s%s %s;",
                    generateImmutablePojos() ? "final " : "",
                    StringUtils.rightPad(out.ref(getJavaType(column.getType(resolver(out, GeneratorStrategy.Mode.POJO)), out, GeneratorStrategy.Mode.POJO)), 0),
                    getStrategy().getJavaMemberName(column, GeneratorStrategy.Mode.POJO));
        }

        generatePojoClassFooter(table, out);

        out.println("}");
        closeJavaWriter(out);
    }

}
</code></pre>
<p>然后替换这个name就行<br>
<img src="https://img2024.cnblogs.com/blog/2157887/202501/2157887-20250103172446701-1860834446.png" alt="image" loading="lazy"></p>
<hr>
<p>上面的修改使得新的POJO有几处变化：</p>
<ul>
<li>去掉了类序列化接口和号</li>
<li>增加了lombok.Data注解</li>
<li>去掉了构造器和copy构造方法</li>
<li>去掉了equals方法（hashCode）</li>
<li>去掉了所有的getter/setter</li>
<li>去掉了toString方法</li>
<li>去掉了字段的空格对其</li>
</ul>
<hr>
<p>这样一来，经过测试，有9个字段的表会从200多行变成30行不到。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5302886629212963" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-03 17:29">2025-01-03 17:28</span>&nbsp;
<a href="https://www.cnblogs.com/somefuture">大卫小东（Sheldon）</a>&nbsp;
阅读(<span id="post_view_count">86</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18650620" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18650620);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18650620', targetLink: 'https://www.cnblogs.com/somefuture/p/18650620', title: '在jooq的POJO类中使用Lombok的Data注解' })">举报</a>
</div>
        