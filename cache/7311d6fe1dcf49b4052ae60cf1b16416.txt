
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/EricsT/p/18880794" title="发布于 2025-05-20 00:23">
    <span role="heading" aria-level="2">C#表达式与运算符</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			    <div id="cnblogs_post_description" style="display: none">
        
        C#表达式与运算符
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>表达式</h1>
<p>表达式是由运算符和操作数组成的</p>
<p>运算符设置将对操作数进行什么样的运算</p>
<p>操作数包括文本、常量、变量和表达式</p>
<p>在C#中，如果表达式最终的计算结果为所需的类型值，表达式就可以出现在需要值或对象的任意位置</p>
<h1>运算符</h1>
<p>运算符是一些特殊的符号，主要用于数学函数、一些类型的赋值语句和逻辑比较方面</p>
<p>C#中提供了丰富的运算符，例如：算术运算符、赋值运算符、比较运算符等</p>
<h2>算术运算符</h2>
<p><code>+</code><code>-</code><code>*</code><code>/</code><code>%</code>运算符都称为算术运算符，分别用于进行加、减、乘、除和模（取余）运算</p>
<table style="border-collapse: collapse; width: 100.027%" border="1"><caption>C#中的算术运算符的功能及使用方法</caption>
<tbody>
<tr>
<td style="width: 24.0646%">运算符</td>
<td style="width: 24.0646%">说明</td>
<td style="width: 24.0646%">实例</td>
<td style="width: 24.0646%">结果</td>
</tr>
<tr>
<td style="width: 24.0646%">+</td>
<td style="width: 24.0646%">加</td>
<td style="width: 24.0646%">12.45f + 15</td>
<td style="width: 24.0646%">27.45</td>
</tr>
<tr>
<td style="width: 24.0646%">-</td>
<td style="width: 24.0646%">减</td>
<td style="width: 24.0646%">4.56 - 0.16</td>
<td style="width: 24.0646%">4.4</td>
</tr>
<tr>
<td style="width: 24.0646%">*</td>
<td style="width: 24.0646%">乘</td>
<td style="width: 24.0646%">5L * 12.45f</td>
<td style="width: 24.0646%">62.25</td>
</tr>
<tr>
<td style="width: 24.0646%">/</td>
<td style="width: 24.0646%">除</td>
<td style="width: 24.0646%">7 / 2</td>
<td style="width: 24.0646%">3</td>
</tr>
<tr>
<td style="width: 24.0646%">%</td>
<td style="width: 24.0646%">取余</td>
<td style="width: 24.0646%">12 % 10</td>
<td style="width: 24.0646%">2</td>
</tr>
</tbody>
</table>
<p>其中<code>+</code><code>-</code>运算符还可以作为数据的正负符号，例如<code>+5</code><code>-7</code></p>
<p>加法运算符通过两个数相加来执行标准的加法运算</p>
<p>减法运算符通过从一个表达式中减去另一个表达式的值来执行标准的减法运算</p>
<p>乘法运算符将两个表达式进行乘法运算并返回它们的乘积</p>
<p>除法运算符执行算术除运算，它用被除数表达式除以除数表达式除以除数表达式而得到商</p>
<p>在用算术运算符运算<code>+</code><code>-</code><code>*</code><code>/</code>时，产生的结果可能会超出所涉及数值类型的值的范围，这样子就会导致运行结果不正确</p>
<p>取余运算符返回除数与被除数相除之后的余数，通常用这个运算符来创建余数在特定范围内的等式</p>
<h2>赋值运算符</h2>
<p>赋值运算符为变量、属性、事件等元素赋新值</p>
<p>赋值运算符主要有<code>=</code><code>+=</code><code>-=</code><code>*=</code><code>/=</code><code>%=</code><code>&amp;=</code><code>|=</code><code>^=</code><code>&lt;&lt;=</code><code>&gt;&gt;=</code></p>
<p>赋值运算符的左操作数必须是变量、属性访问、索引器访问或事件访问类型的表达式</p>
<p>如果赋值运算符两边的操作数的类型不一致，就需要首先进行类型转换，然后再赋值</p>
<p>在使用赋值运算符时，右操作数表达式所属类型必须可以隐式转换为左操作数所属的类型</p>
<p>运算将右操作数的值赋给左操作数指定的变量、属性或索引器元素</p>
<table style="border-collapse: collapse; width: 100.027%" border="1"><caption>C#中的赋值运算符及其运算规则</caption>
<tbody>
<tr>
<td style="width: 24.0646%">名称</td>
<td style="width: 24.0646%">运算符</td>
<td style="width: 24.0646%">运算规则</td>
<td style="width: 24.0646%">意义</td>
</tr>
<tr>
<td style="width: 24.0646%">赋值</td>
<td style="width: 24.0646%">=</td>
<td style="width: 24.0646%">将表达式赋值给变量</td>
<td style="width: 24.0646%">将右边的值给左边</td>
</tr>
<tr>
<td style="width: 24.0646%">加赋值</td>
<td style="width: 24.0646%">+=</td>
<td style="width: 24.0646%">x += y</td>
<td style="width: 24.0646%">x = x + y</td>
</tr>
<tr>
<td style="width: 24.0646%">减赋值</td>
<td style="width: 24.0646%">-=</td>
<td style="width: 24.0646%">x -= y</td>
<td style="width: 24.0646%">x = x - y</td>
</tr>
<tr>
<td style="width: 24.0646%">除赋值</td>
<td style="width: 24.0646%">/=</td>
<td style="width: 24.0646%">x /= y</td>
<td style="width: 24.0646%">x = x / y</td>
</tr>
<tr>
<td style="width: 24.0646%">乘赋值</td>
<td style="width: 24.0646%">*=</td>
<td style="width: 24.0646%">x *= y</td>
<td style="width: 24.0646%">x = x * y</td>
</tr>
<tr>
<td style="width: 24.0646%">模赋值</td>
<td style="width: 24.0646%">%=</td>
<td style="width: 24.0646%">x %= y</td>
<td style="width: 24.0646%">x = x % y</td>
</tr>
<tr>
<td style="width: 24.0646%">位与赋值</td>
<td style="width: 24.0646%">&amp;=</td>
<td style="width: 24.0646%">x &amp;= y</td>
<td style="width: 24.0646%">x = x &amp; y</td>
</tr>
<tr>
<td style="width: 24.0646%">位或赋值</td>
<td style="width: 24.0646%">|=</td>
<td style="width: 24.0646%">x |= y</td>
<td style="width: 24.0646%">x = x | y</td>
</tr>
<tr>
<td style="width: 24.0646%">右移赋值</td>
<td style="width: 24.0646%">&gt;&gt;=</td>
<td style="width: 24.0646%">x &gt;&gt;= y</td>
<td style="width: 24.0646%">x = x &gt;&gt; y</td>
</tr>
<tr>
<td style="width: 24.0646%">左移赋值</td>
<td style="width: 24.0646%">&lt;&lt;=</td>
<td style="width: 24.0646%">x &lt;&lt;= y</td>
<td style="width: 24.0646%">x = x &lt;&lt; y</td>
</tr>
<tr>
<td style="width: 24.0646%">异或赋值</td>
<td style="width: 24.0646%">^=</td>
<td style="width: 24.0646%">x ^= y</td>
<td style="width: 24.0646%">x = x ^ y</td>
</tr>
</tbody>
</table>
<p>在C#中可以把赋值运算符连在一起使用<code>x = y = z = 5</code>执行完毕后，x、y、z 均为 5</p>
<h2>关系运算符</h2>
<p>关系运算符属于二元运算符，用于程序中的变量之间、变量和自变量之间以及其他类型的信息之间的比较，它返回一个代表运算结果的布尔值</p>
<p>当关系运算符对应的关系成立时，运算结果为<code>true</code>，否则为<code>false</code></p>
<p>所有的关系运算符通常用在条件语句中来作为判断的依据，C#中的关系运算符共有6个</p>
<table style="border-collapse: collapse; width: 100.027%" border="1"><caption>关系运算符</caption>
<tbody>
<tr>
<td style="width: 19.068%">运算符</td>
<td style="width: 19.068%">作用</td>
<td style="width: 19.068%">举例</td>
<td style="width: 19.068%">操作数类型</td>
<td style="width: 19.0713%">结果</td>
</tr>
<tr>
<td style="width: 19.068%">&gt;</td>
<td style="width: 19.068%">比较左边是否大于右边</td>
<td style="width: 19.068%">'a' &gt; 'b'</td>
<td style="width: 19.068%">整型、浮点型、字符型</td>
<td style="width: 19.0713%">false</td>
</tr>
<tr>
<td style="width: 19.068%">&lt;</td>
<td style="width: 19.068%">比较左边是否小于右边</td>
<td style="width: 19.068%">156 &lt; 456</td>
<td style="width: 19.068%">整型、浮点型、字符型</td>
<td style="width: 19.0713%">true</td>
</tr>
<tr>
<td style="width: 19.068%">==</td>
<td style="width: 19.068%">比较左边是否等于右边</td>
<td style="width: 19.068%">'c' == 'c'</td>
<td style="width: 19.068%">基本数据类型、引用型</td>
<td style="width: 19.0713%">true</td>
</tr>
<tr>
<td style="width: 19.068%">&gt;=</td>
<td style="width: 19.068%">比较左边是否大于或等于右边</td>
<td style="width: 19.068%">479 &gt;= 426</td>
<td style="width: 19.068%">整型、浮点型、字符型</td>
<td style="width: 19.0713%">true</td>
</tr>
<tr>
<td style="width: 19.068%">&lt;=</td>
<td style="width: 19.068%">比较左边是否小于或等于右边</td>
<td style="width: 19.068%">12.45 &lt;= 45.5</td>
<td style="width: 19.068%">整型、浮点型、字符型</td>
<td style="width: 19.0713%">true</td>
</tr>
<tr>
<td style="width: 19.068%">!=</td>
<td style="width: 19.068%">比较左边是否不等于右边</td>
<td style="width: 19.068%">'y' != 't'</td>
<td style="width: 19.068%">基本数据类型、引用型</td>
<td style="width: 19.0713%">true</td>
</tr>
</tbody>
</table>
<p>要查看两个表达式是否相等，可以使用相等运算符<code>==</code>，相等运算符对整型、浮点型和枚举类型数据的操作是一样的，它只是简单的比较两个表达式，并返回一个布尔值</p>
<p>不等运算符<code>!=</code>是与相等运算符相反的运算符，有两种格式的不等运算符可以应用到表达式，一种是普通的不等运算符<code>!=</code>；另一种是相等运算符的否定<code>!(a == b)</code>，通常，这两种格式都可以计算出相同的值</p>
<p>如果要比较一个值是否小于另一个值，可以使用小于运算符<code>&lt;</code>，当左边的表达式的值小于右边的表达式的值时，结果为真，否则结果为假</p>
<p>如果要比较一个值是否大于另一个值，可以使用大于运算符<code>&gt;</code>，当左边的表达式的值大于右边的表达式的值时，结果为真，否则结果为假</p>
<p>在使用小于或大于运算符对值进行判断时，如果把判断符左右两边的值进行调换，其判断结果也会随之改变</p>
<p>如果要比较一个值是否小于或等于另一个值，可以使用小于或等于运算符<code>&lt;=</code>，当左边的表达式的值小于或等于右边的表达式的值时，结果为真，否则结果为假</p>
<p>如果要比较一个值是否大于或等于另一个值，可以使用大于或等于运算符<code>&gt;=</code>，当左边的表达式的值大于或等于右边的表达式的值时，结果为真，否则结果为假</p>
<p>关系运算符一般常用于判断或循环语句中</p>
<h2>逻辑运算符</h2>
<p>返回类型为布尔值的表达式，如关系运算符，可以被组合在一起构成一个更复杂的表达式，这是通过逻辑运算符来实现的</p>
<p>在C#中的逻辑运算符主要包括逻辑与<code>&amp;&amp;</code>、逻辑或<code>||</code>、逻辑非<code>!</code></p>
<p>逻辑运算法的操作数必须是布尔型数据</p>
<p>在逻辑运算符中，除了逻辑非<code>!</code>是一元运算符外，其他都是二元运算符</p>
<table style="border-collapse: collapse; width: 100.027%; height: 84px" border="1"><caption>逻辑运算符的用法和含义</caption>
<tbody>
<tr style="height: 21px">
<td style="width: 24.0646%; height: 21px">运算符</td>
<td style="width: 24.0646%; height: 21px">含义</td>
<td style="width: 24.0646%; height: 21px">用法</td>
<td style="width: 24.0646%; height: 21px">结合方向</td>
</tr>
<tr style="height: 21px">
<td style="width: 24.0646%; height: 21px">&amp;&amp;</td>
<td style="width: 24.0646%; height: 21px">逻辑与</td>
<td style="width: 24.0646%; height: 21px">a &amp;&amp; b</td>
<td style="width: 24.0646%; height: 21px">左到右</td>
</tr>
<tr style="height: 21px">
<td style="width: 24.0646%; height: 21px">||</td>
<td style="width: 24.0646%; height: 21px">逻辑或</td>
<td style="width: 24.0646%; height: 21px">a || b</td>
<td style="width: 24.0646%; height: 21px">左到右</td>
</tr>
<tr style="height: 21px">
<td style="width: 24.0646%; height: 21px">！</td>
<td style="width: 24.0646%; height: 21px">逻辑非</td>
<td style="width: 24.0646%; height: 21px">!a</td>
<td style="width: 24.0646%; height: 21px">右到左</td>
</tr>
</tbody>
</table>
<p>结果为布尔型的变量或表达式可以通过逻辑运算符组合为逻辑表达式</p>
<table style="border-collapse: collapse; width: 100.027%" border="1"><caption>使用逻辑运算符进行逻辑运算</caption>
<tbody>
<tr>
<td style="width: 19.068%">表达式1</td>
<td style="width: 19.068%">表达式2</td>
<td style="width: 19.068%">表达式1 &amp;&amp; 表达式2</td>
<td style="width: 19.068%">表达式1 || 表达式2</td>
<td style="width: 19.0713%">!表达式1</td>
</tr>
<tr>
<td style="width: 19.068%">true</td>
<td style="width: 19.068%">true</td>
<td style="width: 19.068%">true</td>
<td style="width: 19.068%">true</td>
<td style="width: 19.0713%">false</td>
</tr>
<tr>
<td style="width: 19.068%">true</td>
<td style="width: 19.068%">false</td>
<td style="width: 19.068%">false</td>
<td style="width: 19.068%">true</td>
<td style="width: 19.0713%">false</td>
</tr>
<tr>
<td style="width: 19.068%">false</td>
<td style="width: 19.068%">true</td>
<td style="width: 19.068%">false</td>
<td style="width: 19.068%">true</td>
<td style="width: 19.0713%">true</td>
</tr>
<tr>
<td style="width: 19.068%">false</td>
<td style="width: 19.068%">false</td>
<td style="width: 19.068%">false</td>
<td style="width: 19.068%">false</td>
<td style="width: 19.0713%">true</td>
</tr>
</tbody>
</table>
<p>在逻辑表达式中从左端的表达式可以推断出整个表达式的值，称为“短路”</p>
<p>始终执行运算符两边的表达式称为“非短路”</p>
<p>逻辑与<code>&amp;&amp;</code>属于“短路”运算符</p>
<h2>位运算符</h2>
<p>位运算符除按位与<code>&amp;</code>、按位或<code>|</code>运算符外，其他只能处理整数的操作数</p>
<p>位运算符是完全针对位方面的操作</p>
<p>整型数据在内存中以二进制的形式表示</p>
<h3>按位与</h3>
<p>“按位与”运算的运算符为<code>&amp;</code></p>
<p>“按位与”运算的运算法则是：如果两个整型数据a、b对应位都是1，则结果位才是1；否则结果位是0</p>
<p>如果两个操作数的精度不同，则结果的精度与高精度的操作数相同</p>
<p><img src="https://img2024.cnblogs.com/blog/3512406/202505/3512406-20250519234824074-855221495.png"></p>
<h3>按位或</h3>
<p>“按位或”运算的运算符为<code>|</code></p>
<p>“按位或”运算的运算法则是：如果两个整型数据a、b对应位都是0，结果位才是0；否则是1</p>
<p>如果两个操作数的精度不同，则结果的精度与精度高的操作数相同</p>
<p><img src="https://img2024.cnblogs.com/blog/3512406/202505/3512406-20250519235028754-1345484259.png"></p>
<h3>按位取反</h3>
<p>“按位取反”运算也称为“按位非”运算，运算符为<code>~</code></p>
<p>“按位取反”就是将操作数二进制中的1改成0，0改成1</p>
<p><img src="https://img2024.cnblogs.com/blog/3512406/202505/3512406-20250519235241208-228491206.png"></p>
<h3>按位异或</h3>
<p>“按位异或”运算的运算符<code>^</code></p>
<p>“按位异或”运算的运算法则是：当两个操作数的二进制表示相同（同时为0或者同时为1）时，结果为0，否则结果为1</p>
<p>若两个操作数的精度不同，则结果数的精度与精度高的操作数相同</p>
<p><img src="https://img2024.cnblogs.com/blog/3512406/202505/3512406-20250519235447998-1733124876.png"></p>
<h3>移位操作</h3>
<p>可以对数据按二进制位进行移位操作</p>
<p>C#中的移位运算符有以下两种：</p>
<p><code>&lt;&lt;</code>左移，<code>&gt;&gt;</code>右移</p>
<p>对于 X &lt;&lt; N 或者 X &gt;&gt; N 形式的运算，含义是将 X 向左或向右移 N 位，得到的结果的类型与 X 相同</p>
<p>在此处 X 的类型只能是 int 、uint 、 long 或 ulong ，N 的类型只能是 int ，或者显示转换为这些类型之一，否则编译程序时会出现错误</p>
<p>左移就是将左边的操作数在内存中的二进制数据左移右边操作数指定的位数，右边移空的部分补0</p>
<p>右移时，如果最高位是0，左移空的位就填入0；如果最高位是1，左移空的位就填入1</p>
<p><img src="https://img2024.cnblogs.com/blog/3512406/202505/3512406-20250520000116076-84756521.png"></p>
<p>移位可以实现整数除以或者乘以2的n次方的效果</p>
<p>一个数左移n位，就是将这个数乘以2的n次方</p>
<p>一个数右移n位，就是将这个数除以2的n次方</p>
<h2>其他特殊运算符</h2>
<p>C#中还有一些运算符不能简单的归到某个类型中</p>
<h3>is 运算符</h3>
<p>is 运算符用于检查变量是否为指定的类型。如果是则返回真，否则，返回假</p>
<p>不能重载 is 运算符</p>
<p>is 运算符值考虑引用转换、装箱转换和取消装箱转换，不考虑其他转换，例如用户定义的转换</p>
<h3>条件运算符</h3>
<p>条件运算符<code>(?:)</code>根据布尔型表达式的值返回两个值中的一个</p>
<p>如果条件为 true，则计算第一个条件表达式并以它的结果为准</p>
<p>如果条件为 false ，则计算第二个表达式并以它的结果为准</p>
<p><code>条件式 ? 值1 : 值2</code></p>
<h3>new运算符</h3>
<p>new 运算符用于创建一个新的类型实例</p>
<ul>
<li>对象创建表达式，用于创建一个类类型或值类型的实例</li>
<li>数组创建表达式，用于创建一个数组类型实例</li>
<li>代表创建表达式，用于创建一个新的代表类型实例</li>
</ul>
<h3>typeof 运算符</h3>
<p>typeof运算符用于获得系统原型对象的类型，也就是Type对象</p>
<p>Type类包含关于值类型和引用类型的信息</p>
<p>typeof运算符可以在C#语言中各种位置使用，以找出关于引用类型和值类型的信息</p>
<h1>运算符优先级</h1>
<p>C#中的表达式是使用运算符连接起来的符合C#规范的式子</p>
<p>运算符的优先级决定了表达式中运算执行的先后顺序</p>
<p>通常优先级由高到低的顺序依次是：</p>
<ol>
<li>增量和减量运算</li>
<li>算术运算</li>
<li>关系运算</li>
<li>逻辑运算</li>
<li>赋值运算</li>
</ol>
<p>如果两个运算符有相同的优先级，那么左边的表达式要比右边的表达式先被处理</p>
<p>在表达式中，可以通过括号来调整运算符的运算顺序，将想要优先运算的运算符放置在括号内</p>
<p>当程序开始执行时，括号内的运算符会被优先执行</p>
<table style="border-collapse: collapse; width: 100.027%" border="1"><caption>运算符从高到低的优先级顺序</caption>
<tbody>
<tr>
<td style="width: 50.0269%">分类</td>
<td style="width: 50.0269%">运算符</td>
</tr>
<tr>
<td style="width: 50.0269%">基本</td>
<td style="width: 50.0269%"><code>x.y</code><code>f(x)</code><code>a[x]</code><code>x++</code><code> x--</code><code>new</code><code>typeof</code><code> checked</code><code> unchecked</code></td>
</tr>
<tr>
<td style="width: 50.0269%">一元</td>
<td style="width: 50.0269%"><code>+</code><code>-</code><code>!</code><code>~</code><code>++x</code><code>--x</code><code>(T)x</code></td>
</tr>
<tr>
<td style="width: 50.0269%">乘除</td>
<td style="width: 50.0269%"><code>*</code><code>/</code><code>%</code></td>
</tr>
<tr>
<td style="width: 50.0269%">加减</td>
<td style="width: 50.0269%"><code>+</code><code>-</code></td>
</tr>
<tr>
<td style="width: 50.0269%">移位</td>
<td style="width: 50.0269%"><code>&lt;&lt;</code><code>&gt;&gt;</code></td>
</tr>
<tr>
<td style="width: 50.0269%">比较</td>
<td style="width: 50.0269%"><code>&lt;</code><code>&gt;</code><code>&lt;=</code><code>&gt;=</code><code>is</code><code>as</code></td>
</tr>
<tr>
<td style="width: 50.0269%">相等</td>
<td style="width: 50.0269%"><code>==</code><code>!=</code></td>
</tr>
<tr>
<td style="width: 50.0269%">位与</td>
<td style="width: 50.0269%"><code>&amp;</code></td>
</tr>
<tr>
<td style="width: 50.0269%">位异或</td>
<td style="width: 50.0269%"><code>^</code></td>
</tr>
<tr>
<td style="width: 50.0269%">位或</td>
<td style="width: 50.0269%"><code>|</code></td>
</tr>
<tr>
<td style="width: 50.0269%">逻辑与</td>
<td style="width: 50.0269%"><code>&amp;&amp;</code></td>
</tr>
<tr>
<td style="width: 50.0269%">逻辑或</td>
<td style="width: 50.0269%"><code>||</code></td>
</tr>
<tr>
<td style="width: 50.0269%">条件</td>
<td style="width: 50.0269%"><code>?:</code></td>
</tr>
<tr>
<td style="width: 50.0269%">赋值</td>
<td style="width: 50.0269%"><code>=</code><code>+=</code><code>-=</code><code>*=</code><code>/=</code><code>%=</code><code>&amp;=</code><code>|=</code><code>^=</code><code>&lt;&lt;=</code><code>&gt;&gt;=</code></td>
</tr>
</tbody>
</table>
<p>在编写程序时，尽量使用括号运算符来限定运算次序，避免产生错误的运算顺序</p>
</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/EricsT/" target="_blank">EricsT</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/EricsT/p/18880794" target="_blank">https://www.cnblogs.com/EricsT/p/18880794</a></p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="3.6650847224872685" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-20 00:24">2025-05-20 00:23</span>&nbsp;
<a href="https://www.cnblogs.com/EricsT">EricsT</a>&nbsp;
阅读(<span id="post_view_count">61</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18880794);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18880794', targetLink: 'https://www.cnblogs.com/EricsT/p/18880794', title: 'C#表达式与运算符' })">举报</a>
</div>
	