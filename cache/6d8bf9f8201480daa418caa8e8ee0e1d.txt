
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18705917" title="发布于 2025-02-09 11:40">
    <span role="heading" aria-level="2">『Python底层原理』--CPython如何运行Python代码</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><code>Python</code>作为一种广泛使用的编程语言，其简洁的语法和强大的功能深受开发者喜爱。</p>
<p>然而，对于许多<code>Python</code>用户来说，<code>CPython</code>（<code>Python</code>的官方实现）的内部工作机制仍然是一个神秘的黑盒。</p>
<p>今天，我们将继续探索<code>CPython</code>的源代码，尝试了解<code>Python</code>从程序启动到字运行的神秘面纱。</p>
<h1 id="1-cpython代码概要">1. CPython代码概要</h1>
<p><code>CPython</code>的代码库规模庞大，包含约35万行<strong>C代码</strong>和近60万行<strong>Python代码</strong>。</p>
<p>这些代码分布在多个目录中，这些目录结构为<code>CPython</code>的开发和维护提供了清晰的组织方式。</p>
<p>主要的目录包括：</p>
<ul>
<li><code>Grammar/</code>：Python语法文件</li>
<li><code>Include/</code>：头文件</li>
<li><code>Lib/</code>：标准库模块（Python实现）</li>
<li><code>Modules/</code>：标准库模块（C实现）</li>
<li><code>Objects/</code>：内置类型实现。</li>
<li><code>Parser/</code>：解析器相关代码</li>
<li><code>Programs/</code>：可执行文件的源码</li>
<li><code>Python/</code>：解释器核心代码</li>
</ul>
<p><code>CPython</code>是开源的，代码托管在<code>gihtub</code>上，感兴趣的话，可以下载了查看。</p>
<p>下载了之后，可以切换到自己感兴趣的分支版本。</p>
<pre><code class="language-bash">git clone https://github.com/python/cpython/ &amp;&amp; cd cpython
git checkout 3.12
</code></pre>
<p>编译源码过程相对简单，只需运行以下命令即可：</p>
<pre><code class="language-bash">./configure
make
make test
sudo make install
</code></pre>
<p>编译完成后，运行  <code>./python.exe</code>  即可启动自己编译的<code>CPython</code>版本。</p>
<h1 id="2-启动python">2. 启动Python</h1>
<p><code>CPython</code>的入口点是  <code>main()</code>  函数，位于  <code>Programs/python.c</code>  文件中。</p>
<pre><code class="language-c">/* Minimal main program -- everything is loaded from the library */

#include "Python.h"

#ifdef MS_WINDOWS
int
wmain(int argc, wchar_t **argv)
{
    return Py_Main(argc, argv);
}
#else
int
main(int argc, char **argv)
{
    return Py_BytesMain(argc, argv);
}
#endif
</code></pre>
<p>这个函数是程序启动的起点，负责初始化<code>CPython</code>并开始执行用户代码。</p>
<p>在<code>Windows</code>平台上，<code>CPython</code>使用  <code>wmain()</code>  作为入口点，以支持<code>UTF-16</code>编码的命令行参数。这种设计使得<code>CPython</code>能够更好地处理不同平台上的字符编码问题。</p>
<p><code>main()</code>函数的主要职责是调用<code>Py_Main()</code>或<code>Py_BytesMain()</code>，这两个函数分别处理宽字符和字节字符串的命令行参数。</p>
<p><code>Py_Main</code>和<code>Py_BytesMain</code>位于 <code>Modules/main.c</code> 文件中。</p>
<p>这两个函数进一步调用<code>pymain_main()</code>，开始<code>CPython</code>的初始化过程。</p>
<p><code>Py_Main</code>，<code>Py_BytesMain</code>以及<code>pymain_main</code>这些函数都在<code>Modules/main.c</code> 文件中。</p>
<h1 id="3-初始化python">3. 初始化Python</h1>
<p><code>CPython</code>的初始化过程分为<strong>三个阶段</strong>：<strong>预初始化</strong>、<strong>核心初始化</strong>和<strong>主初始化</strong>，每个阶段都有其特定的任务和目标。</p>
<ol>
<li>预初始化：</li>
</ol>
<p>预初始化阶段主要负责设置运行时状态、默认内存分配器和基本配置。</p>
<p>这一阶段通过调用  <code>_PyRuntime_Initialize()</code>  和  <code>PyPreConfig_InitPythonConfig() </code> 等函数来完成。</p>
<p>这些函数初始化了<code>CPython</code>的全局运行时状态，并为后续的初始化阶段做好了准备。</p>
<p>其中，<code>_PyRuntime_Initialize</code>函数的实现位于：<code>Python/pylifecycle.c</code></p>
<p><code>PyPreConfig_InitPythonConfig</code>函数的实现位于：<code>Python/preconfig.c</code></p>
<ol start="2">
<li>核心初始化：</li>
</ol>
<p>核心初始化阶段是<code>CPython</code>初始化的关键部分。</p>
<p>这一阶段初始化了主解释器状态、线程状态、内置类型、  builtins  模块、  sys  模块和导入系统。</p>
<p>这些组件构成了<code>Python</code>运行的核心基础，使得<code>CPython</code>能够开始执行<code>Python</code>代码。</p>
<p>核心初始化通过调用  <code>Py_InitializeFromConfig() </code> 函数来完成，该函数进一步调用了  <code>pyinit_core()</code>  等函数，逐步构建了<code>Python</code>运行时的核心环境。</p>
<p>其中，<code>Py_InitializeFromConfig</code>函数的实现位于：<code>Python/pylifecycle.c</code></p>
<ol start="3">
<li>主初始化：</li>
</ol>
<p>主初始化阶段是<code>CPython</code>初始化的最后一步。</p>
<p>这一阶段完成了<code>CPython</code>的全面初始化，包括设置  sys.path  、导入  site  模块等。</p>
<p>这些任务使得<code>CPython</code>能够支持完整的<code>Python</code>功能，包括模块导入和脚本执行。</p>
<p>主初始化通过调用  <code>pyinit_main()</code>  函数来完成，该函数进一步调用了  <code>init_interp_main() </code> 等函数，完成了<code>CPython</code>的最终配置。</p>
<p>其中，<code>pyinit_main</code>和<code>init_interp_main</code>函数的实现位于：<code>Python/pylifecycle.c</code></p>
<h1 id="4-运行python">4. 运行Python</h1>
<p>初始化完成后，<code>CPython</code>进入程序运行阶段。<code>Py_RunMain()</code>  函数（<code>Modules/main.c</code>文件中）是这一阶段的核心，它负责运行<code>Python</code>程序并进行清理。</p>
<p>根据不同的运行模式（如脚本、模块、命令行等），  <code>Py_RunMain()</code> 函数调用不同的函数来执行代码。</p>
<p>例如，  <code>pymain_run_python()</code> 函数处理  sys.path  的设置和模块的导入，确保<code>Python</code>程序能够在正确的环境中运行。</p>
<h1 id="5-编译和执行">5. 编译和执行</h1>
<p><code>Python</code>代码的编译和执行是<code>CPython</code>运行的核心部分。</p>
<p><code>PyRun_FileExFlags()</code>函数（<code>Python/pythonrun.c</code>文件中）是这一过程的入口点，它负责将<code>Python</code>代码编译为字节码，并将其加载到运行时环境中。</p>
<p>编译过程通过调用  <code>_PyAST_Compile()</code>  函数（<code>Python/compile.c</code>文件中）完成，该函数将抽象语法树（<code>AST</code>）编译为代码对象。</p>
<p>最终，<code>PyEval_EvalCode()</code>  函数（<code>Python/pythonrun.c</code>文件中）执行代码对象，进入<strong>字节码执行循环</strong>。</p>
<p><strong>字节码执行循环</strong>是<code>CPython</code>运行的最后阶段。</p>
<p>这一阶段通过调用  <code>_PyEval_EvalFrame()</code>  函数（<code>Include/internal/pycore_ceval.h</code>文件中）来执行字节码指令，<code>_PyEval_EvalFrame()</code>  函数是一个复杂的函数，它负责处理各种<code>Python</code>操作，包括函数调用、变量访问和异常处理等。</p>
<p>如果想更好地理解<code>Python</code>的运行机制，可以深入研究这个函数。</p>
<h1 id="6-总结">6. 总结</h1>
<p>本文主要从<code>CPython</code>源代码的角度来了解<code>Python</code>程序从启动到执行的全过程。</p>
<p>源代码是基于<code>CPyhton 3.12</code> 分支的。</p>
<p>通过阅读和分析<code>CPython</code>的源代码，我们不仅能够更好地理解<code>Python</code>的内部机制，还能够发现优化和改进的机会。</p>
<p>如果对<code>CPython</code>的内部工作机制感兴趣，最好能够亲自探索其源代码。通过阅读和理解源代码，将获得更深入的知识，并能够更好地利用Python的强大功能。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.027891485877314815" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-09 11:40">2025-02-09 11:40</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18705917" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18705917);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18705917', targetLink: 'https://www.cnblogs.com/wang_yb/p/18705917', title: '『Python底层原理』--CPython如何运行Python代码' })">举报</a>
</div>
        