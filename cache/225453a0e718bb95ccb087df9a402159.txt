
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wdracky/p/18910480" title="发布于 2025-06-04 16:18">
    <span role="heading" aria-level="2">通义灵码2.5+qwen3——节假日抢票不用愁，基于12306-MCP实现个人火车票智能查询小助手！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        本项目作为通义灵码2.5的深度实践案例，充分展现了通义灵码2.5编程智能体调用MCP实现大模型智能化工具的强大优势。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><span data-cke-copybin-start="1">​</span></p>
<h2>&nbsp;<img src="https://img2024.cnblogs.com/blog/3650192/202506/3650192-20250604161210506-1749207695.png" alt="" height="828" width="1027"></h2>
<p id="1749024732641"></p>
<h2><span id="cke_bm_29127S"></span></h2>
<p>在日常生活中，12306 是中国铁路售票系统的官方平台。为了提升购票效率、自动化查询余票信息以及获取车站代码等功能，我们希望通过使用智能体编程方式，结合 MCP（Model-as-a-Service）技术实现，能随时随地访问 12306 提供的服务接口，并能够进行智能询问车次车票等信息，提高查询的简便性。</p>
<p>在这个过程中，我使用了阿里巴巴推出的智能编程助手——<strong>通义灵码</strong>，它帮助我快速构建项目结构、编写代码逻辑，并协助调试前后端交互中的常见问题。</p>
<h1>一、项目体验过程</h1>
<p>现在我们来体验一下，通过VSCode插件找到并安装最新版本的通义灵码。</p>
<p><img src="https://img2024.cnblogs.com/blog/3650192/202506/3650192-20250604161225379-1668898953.png" alt="" height="685" width="1026"></p>
<p>安装时需要选择信任发布者并安装（Trust Publisher &amp; Install）。</p>
<p>我们在对话框里面发现可以使用MCP功能，就是点击下面这个MCP工具按钮。</p>
<p><img src="https://img2024.cnblogs.com/blog/3650192/202506/3650192-20250604161311451-1210595.png" alt="" height="238" width="1009"></p>
<p>我们知道modelscope社区的MCP广场有很多优质的MCP资源，通过咱们的通义灵码可以直接访问MCP广场上的服务。</p>
<p>这里我们找到12306-mcp这个MCP并部署。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/3650192/202506/3650192-20250604161324522-597203702.png" alt="" height="508" width="1023"></p>
<p>安装完成后在我的服务中可以找到已安装的MCP。</p>
<p>找到我们的12306-mcp。可以看到它提供的功能如下，非常丰富。</p>
<p>我们在通过与通义灵码智能体对话进行体验。</p>
<p>我直接提问智能体,模型用Qwen3。</p>
<p>我问他：请帮我查询一下今天下午17:30之前武汉到广州的火车票。会话回答结果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/3650192/202506/3650192-20250604161346689-1327403789.png" alt="" height="1366" width="1018"></p>
<p>现在我们发现智能体已经能正常执行MCP,查询到今天下午17:30之前从武汉到广州的火车票信息。在17:30之前有多个车次可供选择。</p>
<h1><img src="https://img2024.cnblogs.com/blog/3650192/202506/3650192-20250604161400792-810624521.png" alt="" height="1146" width="1018"></h1>
<h1>二、项目深度开发过程</h1>
<p>但是，这个刚才这个智能体的对话界面需要打开VSCode才能访问，我还想开发出能通过浏览器直接访问的界面，并且向智能体随时随地提问了解车次信息。</p>
<p>该如何完成呢？</p>
<p>于是，我打算使用通义灵码的智能体开发功能。</p>
<p>本项目作为通义灵码2.5的实践案例，展现了AI辅助开发在复杂业务系统中的革命性突破。通过深度集成12306 MCP服务体系，我们将构建一个融合<strong>智能决策</strong>、<strong>环境感知</strong>和<strong>自主优化</strong>的新一代火车票查询系统。</p>
<p><img src="https://img2024.cnblogs.com/blog/3650192/202506/3650192-20250604161417866-1199849436.png" alt="" height="472" width="1008"></p>
<p id="1749024858971"></p>
<p>开发过程如下：</p>
<p>首先需要了解这个12306-mcp的详细功能参数及特性。</p>
<p><strong>（可选择）</strong>来到modelscope社区，社区界面找到这个mcp,可以看到它的详细功能介绍。</p>
<p><img src="https://img2024.cnblogs.com/blog/3650192/202506/3650192-20250604161433993-287491498.png" alt="" height="568" width="1020"></p>
<p id="1749024875322"></p>
<p>可以看到它的mcp配置信息以及工具测试集。</p>
<p><img src="https://img2024.cnblogs.com/blog/3650192/202506/3650192-20250604161446239-1061770504.png" alt="" height="1035" width="1015"></p>
<p>这里已经介绍得非常清晰，该如何配置和测试使用。</p>
<p>现在，我们回到VSCode的对话框界面中继续提问，要求智能体为我们编程。</p>
<p>先梳理一下开发目标，本项目的主要目标包括：</p>
<ul>
<li>构建一个基于 Node.js 的本地 HTTP 服务器，用于提供前端页面；</li>
<li>创建一个代理服务器以转发请求到 12306-MCP 接口；</li>
<li>实现 JavaScript 客户端对 MCP 接口的调用；</li>
<li>解决 CORS、端口占用、API 转发失败等常见问题；</li>
<li>提供完整的测试流程，确保功能可用性。</li>
</ul>
<p>刚才我们已经深度了解了MCP,现在可以要求通义灵码使用这个MCP服务。</p>
<p>与通义灵码对话演示如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/3650192/202506/3650192-20250604161459526-1144781955.png" alt="" height="1033" width="1024"></p>
<p>后台我们可以启用Ollama启动一个本地qwen的大模型，也可以用远端模型链接。这里作为演示，我们大模型使用本地的qwen2.5:7b模型。</p>
<p><img src="https://img2024.cnblogs.com/blog/3650192/202506/3650192-20250604161517739-608342376.png" alt="" height="460" width="1023"></p>
<p>开发完成后，一步步根据通义灵码2.5的提示完成本地环境的部署：</p>
<h3>✅1.&nbsp;<strong>基础服务搭建</strong></h3>
<ul>
<li>
<p>搭建本地 HTTP 服务器（server.js）：</p>
<ul>
<li>监听地址：<code>http://localhost:3000/</code></li>
<li>提供 HTML 页面和静态资源访问。</li>
</ul>
</li>
<li>
<p>创建代理服务器（proxy-server.js）：</p>
<ul>
<li>监听地址：<code>http://localhost:3001/</code></li>
<li>解决浏览器 CORS 跨域问题；</li>
<li>支持转发以下接口请求：
<ul>
<li><code>GET /api/current-date</code>&nbsp;→ 获取当前日期</li>
<li><code>POST /api/station-code-of-citys</code>&nbsp;→ 查询城市车站代码</li>
<li><code>POST /api/tickets</code>&nbsp;→ 查询余票信息</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3>✅ 2.&nbsp;<strong>前端功能实现</strong></h3>
<ul>
<li>
<p>JavaScript 客户端（12306-mcp-client.js）：</p>
<ul>
<li>封装对 MCP 接口的调用；</li>
<li>实现异步获取当前日期；</li>
<li>根据城市名获取车站代码；</li>
<li>查询指定出发地与目的地之间的余票；</li>
<li>错误处理机制（网络异常、接口失败等）；</li>
<li>控制台日志输出调试信息。</li>
</ul>
</li>
<li>
<p>前端页面（index.html）：</p>
<ul>
<li>展示测试页面；</li>
<li>自动加载 JS 客户端脚本；</li>
<li>显示基本样式与结果区域。</li>
</ul>
</li>
</ul>
<h3>✅ 3.&nbsp;<strong>开发辅助工具</strong></h3>
<ul>
<li>
<p>环境检查脚本（check-environment.js）：</p>
<ul>
<li>验证 Node.js 是否安装；</li>
<li>输出环境信息。</li>
</ul>
</li>
<li>
<p>启动脚本（start-ticket-assistant.js）：</p>
<ul>
<li>并行启动主服务器与代理服务器；</li>
<li>输出清晰运行日志。</li>
</ul>
</li>
<li>
<p>配置文件（config.js）：</p>
<ul>
<li>存储服务地址等配置项。</li>
</ul>
</li>
</ul>
<h3>✅ 4.&nbsp;<strong>API 请求流程</strong></h3>
<ul>
<li>浏览器通过 JS 客户端请求本地代理；</li>
<li>代理服务器将请求转发到 12306-MCP；</li>
<li>返回数据后展示在控制台或页面中。</li>
</ul>
<p>可以看到通义帮我们开发好的程序框架。</p>
<p>项目结构说明如下：</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" tabindex="-1" role="region" contenteditable="false" aria-label="代码段 小部件" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="10" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22code%22%3A%2212306tray%2F%5Cn%E2%94%9C%E2%94%80%E2%94%80%2012306-mcp-client.js%20%20%20%20%20%23%20JS%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%80%BB%E8%BE%91%5Cn%E2%94%9C%E2%94%80%E2%94%80%20index.html%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%89%8D%E7%AB%AF%E6%B5%8B%E8%AF%95%E9%A1%B5%E9%9D%A2%5Cn%E2%94%9C%E2%94%80%E2%94%80%20server.js%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E4%B8%BB%E6%9C%8D%E5%8A%A1%E5%99%A8%5Cn%E2%94%9C%E2%94%80%E2%94%80%20proxy-server.js%20%20%20%20%20%20%20%20%20%23%20%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%5Cn%E2%94%9C%E2%94%80%E2%94%80%20check-environment.js%20%20%20%20%23%20%E7%8E%AF%E5%A2%83%E6%A3%80%E6%B5%8B%5Cn%E2%94%9C%E2%94%80%E2%94%80%20start-ticket-assistant.js%20%23%20%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC%5Cn%E2%94%9C%E2%94%80%E2%94%80%20config.js%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%5Cn%E2%94%9C%E2%94%80%E2%94%80%20package.json%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%5Cn%E2%94%9C%E2%94%80%E2%94%80%20README.md%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E9%A1%B9%E7%9B%AE%E8%AF%B4%E6%98%8E%5Cn%E2%94%94%E2%94%80%E2%94%80%20404.html%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E9%94%99%E8%AF%AF%E9%A1%B5%E9%9D%A2%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>12306tray/
├── 12306-mcp-client.js     # JS客户端逻辑
├── index.html              # 前端测试页面
├── server.js               # 主服务器
├── proxy-server.js         # 代理服务器
├── check-environment.js    # 环境检测
├── start-ticket-assistant.js # 启动脚本
├── config.js               # 配置文件
├── package.json            # 依赖管理
├── README.md             # 项目说明
└── 404.html              # 错误页面</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/3650192/202506/3650192-20250604161137381-1811279541.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<p>API 调用流程设计</p>
<table>
<thead>
<tr>
<th>步骤</th>
<th>组件</th>
<th>动作</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>浏览器页面 (<a>index.html</a>)</td>
<td>加载&nbsp;<a>12306-mcp-client.js</a></td>
</tr>
<tr>
<td>2</td>
<td>JS 客户端 (<a>12306-mcp-client.js</a>)</td>
<td>发起异步请求到本地代理服务器</td>
</tr>
<tr>
<td>3</td>
<td>本地代理 (<a>proxy-server.js</a>)</td>
<td>转发请求到目标 MCP 接口</td>
</tr>
<tr>
<td>4</td>
<td>MCP 服务</td>
<td>返回 JSON 数据</td>
</tr>
<tr>
<td>5</td>
<td>代理服务器</td>
<td>将数据原样返回给前端</td>
</tr>
<tr>
<td>6</td>
<td>前端页面</td>
<td>在控制台或页面上展示结果</td>
</tr>
</tbody>
</table>
<h1>&nbsp;</h1>
<h1>三、常见问题解决方案</h1>
<p>项目有比较复杂的后台配置，但好在我们可以使用通义灵码对话引导完成服务的配置、启动集调试。以下是我实践过程中遇到的几个主要问题。大家也可以跳过不看。</p>
<h2>1.&nbsp;<strong>CORS 跨域问题</strong></h2>
<p>使用代理服务器设置响应头：</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" tabindex="-1" role="region" contenteditable="false" aria-label="代码段 小部件" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="9" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22code%22%3A%22res.setHeader('Access-Control-Allow-Origin'%2C%20'*')%3B%5Cnres.setHeader('Access-Control-Allow-Methods'%2C%20'GET%2C%20POST%2C%20OPTIONS')%3B%5Cnres.setHeader('Access-Control-Allow-Headers'%2C%20'Content-Type')%3B%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>res.setHeader('Access-Control-Allow-Origin', '*');
res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
res.setHeader('Access-Control-Allow-Headers', 'Content-Type');</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/3650192/202506/3650192-20250604161137381-1811279541.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h2>2.&nbsp;<strong>端口冲突问题</strong></h2>
<ul>
<li>若&nbsp;<code>3000</code>&nbsp;或&nbsp;<code>3001</code>&nbsp;端口被占用：</li>
</ul>
<p>使用命令查找占用进程：</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" tabindex="-1" role="region" contenteditable="false" aria-label="代码段 小部件" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="8" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22code%22%3A%22netstat%20-ano%20%7C%20findstr%20%3A3000%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>netstat -ano | findstr :3000</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/3650192/202506/3650192-20250604161137381-1811279541.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<p>使用命令终止进程：</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" tabindex="-1" role="region" contenteditable="false" aria-label="代码段 小部件" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="7" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22code%22%3A%22taskkill%20%2FPID%20%3Cpid%3E%20%2FF%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>taskkill /PID &lt;pid&gt; /F</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/3650192/202506/3650192-20250604161137381-1811279541.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h2>3.&nbsp;<strong>请求体处理不完整问题</strong></h2>
<p>使用异步方式读取完整请求体：</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" tabindex="-1" role="region" contenteditable="false" aria-label="代码段 小部件" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="6" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-hljs" data-cke-widget-data="%7B%22code%22%3A%22async%20function%20readRequestBody(req)%20%7B%5Cn%20%20let%20data%20%3D%20''%3B%5Cn%20%20for%20await%20(const%20chunk%20of%20req)%20data%20%2B%3D%20chunk%3B%5Cn%20%20return%20data%3B%5Cn%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>async function readRequestBody(req) {
  let data = '';
  for await (const chunk of req) data += chunk;
  return data;
}</code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/3650192/202506/3650192-20250604161137381-1811279541.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h1>&nbsp;</h1>
<h1>四、项目部署与结果呈现</h1>
<p>分别打开两个不同的窗口启动服务：</p>
<p><code>node server.js # 启动主服务器 </code></p>
<p><code>node proxy-server.js # 启动代理服务器</code></p>
<p><code>执行命令情况如下：</code></p>
<p><img src="https://img2024.cnblogs.com/blog/3650192/202506/3650192-20250604161606401-368280384.png" alt="" height="115" width="1023"></p>
<p><img src="https://img2024.cnblogs.com/blog/3650192/202506/3650192-20250604161616178-1788637496.png" alt="" height="106" width="1023"></p>
<p>然后，打开浏览器访问6001端口（自己设置的）</p>
<p><code>http://localhost:6001/</code></p>
<p>从浏览器访问测试项目开发好的程序界面如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/3650192/202506/3650192-20250604161626820-311598168.png" alt="" height="1195" width="1014"></p>
<p>可以看到几个主要的MCP功能都已经集成过来，并且本项目已经开发提供了与后台大模型相连接的智能查询功能。依次测试相关功能体验如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/3650192/202506/3650192-20250604161639289-620186153.png" alt="" height="1405" width="1071"></p>
<p id="1749025000665"></p>
<p>最后是智能查询功能，它体现了大模型的智能逻辑，不必再去一条条点选我们的需求，而是自然语言式对话即可帮助我们高效快捷地查询（数据仅供测试）：</p>
<p><img src="https://img2024.cnblogs.com/blog/3650192/202506/3650192-20250604161647537-146944359.png" alt="" height="1143" width="1015"></p>
<p>可以看到模型能准确了解到了我们的需求，并且成功调用了12306-MCP功能，输出了武汉到广州的车次信息。实现了我们预定的开发目标。</p>
<h1>&nbsp;五、未来拓展计划</h1>
<h2>1. 智能余票监控系统</h2>
<p>借助通义灵码2.5帮助实现<strong>四维监控策略，</strong>从此查票抢票不用发愁：</p>
<p><img src="https://img2024.cnblogs.com/blog/3650192/202506/3650192-20250604161659999-1865140671.png" alt="" height="844" width="1042"></p>
<p id="1749025020914"></p>
<h2>2. 全面功能升级</h2>
<table>
<thead>
<tr>
<th>功能</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>页面 UI 升级</td>
<td>添加输入框让用户选择出发地、目的地、日期等</td>
</tr>
<tr>
<td>表单提交支持</td>
<td>用户手动触发查询操作</td>
</tr>
<tr>
<td>余票结果展示</td>
<td>以表格形式显示车次、余票数量等信息</td>
</tr>
<tr>
<td>错误提示优化</td>
<td>当没有查询结果时给出友好提示</td>
</tr>
<tr>
<td>本地缓存机制</td>
<td>减少重复请求，提升性能</td>
</tr>
<tr>
<td>Docker 化部署</td>
<td>构建容器镜像，便于移植与发布</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h1><strong>六、项目体验总结</strong></h1>
<p>本项目作为通义灵码2.5的深度实践案例，充分展现了通义灵码2.5编程智能体调用MCP实现大模型智能化工具的强大优势。</p>
<h2>1. 代码生成维度</h2>
<p>通义灵码2.5展现出远超预期的代码理解能力：</p>
<ul>
<li><strong>精准接口映射</strong>：自动将MCP文档转换为可执行代码</li>
<li><strong>类型安全转换</strong>：智能生成数据验证逻辑</li>
</ul>
<h2><strong>2.上下文感知维度</strong></h2>
<p>通义灵码2.5展现出色的项目理解能力：</p>
<ul>
<li><strong>跨文件关联</strong>：准确追踪数据流经多个模块的路径</li>
<li><strong>模式识别</strong>：自动发现并统一项目中相似的接口调用模式</li>
</ul>
<h2>3.决策优化维度</h2>
<p>在以下关键场景实现突破：一是<strong>缓存策略选择</strong>：根据接口特性推荐最优缓存方案；二是<strong>错误恢复路径</strong>：提供分级 fallback 机制建议；三是<strong>性能瓶颈预判</strong>：标记潜在的性能敏感区域。</p>
<p>&nbsp;</p>
<p>本项目体验了<strong>人机协作范式进化</strong>，我们观察到通义灵码2.5带来的<strong>三种新型工作模式</strong>：</p>
<ol>
<li><strong>领航员模式</strong>：AI主导完成标准模块开发</li>
<li><strong>协作者模式</strong>：人机并行处理复杂逻辑</li>
<li><strong>审核员模式</strong>：AI持续监控代码质量</li>
</ol>
<p>本项目不仅验证了通义灵码2.5在复杂业务场景下的实用性，更预示着软件开发范式即将迎来革命性变革。通过实践可以发现，AI辅助开发在提升<strong>工程效率</strong>、<strong>系统质量</strong>和<strong>创新速度</strong>三个维度的卓越价值。期待在未来继续深化与通义灵码的合作，共同探索智能编程的无限可能。</p>
<p><span data-cke-copybin-end="1">​</span></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0026464866053240743" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-06-04 16:18">2025-06-04 16:18</span>&nbsp;
<a href="https://www.cnblogs.com/wdracky">熊猫钓鱼2025</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18910480);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18910480', targetLink: 'https://www.cnblogs.com/wdracky/p/18910480', title: '通义灵码2.5+qwen3——节假日抢票不用愁，基于12306-MCP实现个人火车票智能查询小助手！' })">举报</a>
</div>
        