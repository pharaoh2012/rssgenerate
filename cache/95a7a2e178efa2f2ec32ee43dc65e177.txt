
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/cwkiller/p/19000543" title="发布于 2025-07-23 12:50">
    <span role="heading" aria-level="2">契约锁pdfverifier远程代码执行漏洞攻防绕过史</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        前言 之前比较懒一直没安装契约锁进行审计最近正好爆出挺多这个产品的漏洞，于是抽空分析一下近期的漏洞为
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="前言">前言</h1>
<p>之前比较懒一直没安装契约锁进行审计最近正好爆出挺多这个产品的漏洞，于是抽空分析一下近期的漏洞为后续挖掘打基础。这篇文章主要写<code>pdfverifier</code>接口的漏洞以及这个地方补丁被多次绕过的分析。</p>
<h1 id="pdfverifier漏洞分析利用">pdfverifier漏洞分析利用</h1>
<p>下面分析使用的版本为Linux下的<code>4.3.4</code>版本，契约锁启动后会开启三个端口分别对应下面三个服务</p>
<ul>
<li>
<p>电子签约签署平台：9180</p>
</li>
<li>
<p>电子签约管理控制台：9181</p>
</li>
<li>
<p>电子签约开放平台：9182</p>
</li>
</ul>
<p>官方建议只对外开放<code>9180</code>端口<code>pdfverifier</code>接口的漏洞便是在这个端口，对应的jar包为<code>privapp.jar</code>。将这个jar包拿出来分析发现无法解压<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124919704-468315737.png" alt="" loading="lazy"><br>
使用<code>010Editor</code>打开<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124920488-1730370859.png" alt="" loading="lazy"><br>
发现前面一大段为<code>bash</code>脚本直接将前面的字符删除即可成功解压。解压以后发现<code>BOOT-INF\lib\</code>下只有少数的<code>jar</code>包，简单查看目录结构确定其他依赖应该在<code>/opt/qiyuesuo/libs</code>目录下于是直接将<code>/opt/qiyuesuo/libs</code>全部复制到<code>BOOT-INF\lib\</code>然后<code>idea</code>打开即可。这里有个需要注意的问题当我们没把<code>spring</code>的依赖放入<code>lib</code>时<code>idea</code>的两下<code>shift</code>查看接口是没有用的，必须存在<code>spring</code>的依赖他才会扫描得到接口。根据classes目录结构很快可以注意到<code>com.qiyuesuo.config.PrivappConfigurer</code>定义了过滤器和白名单接口。<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124921229-968540604.png" alt="" loading="lazy"><br>
<code>pdfverifier</code>接口正好在里面直接两下<code>shift</code>定位到接口的实现方法<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124921836-316146635.png" alt="" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124922602-711188064.png" alt="" loading="lazy"><br>
获取扩展名以后传入<code>com.qiyuesuo.api.PdfVerifierController#doVerify</code><br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124923457-1801407115.png" alt="" loading="lazy"><br>
当扩展名为<code>ofd</code>时进入<code>net.qiyuesuo.common.ofd.verify.GjzwOfdVerifyHandler#verify</code><br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124924800-1842902731.png" alt="" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124925847-1010307638.png" alt="" loading="lazy"><br>
最后对文件进行了解压操作<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124926630-1188452783.png" alt="" loading="lazy"><br>
这里没有判断目录穿越的情况，所以可以解压文件目录穿越写入任意文件到任意目录。但是这个服务是<code>springboot</code>不能给通过写<code>webshell</code>来<code>RCE</code>，可以想到的几种比较通用的办法写模版文件、往<code>JDK</code>的某些的地方写文件然后初始化类、写计划任务。写模板文件的话好像没有配置了视图模板解析，往<code>JDK</code>的某些的地方写文件可能不太通用，写计划任务只针对Linux且没有权限因为他这里是用<code>qiyuesuo</code>账号起的服务。这里如果以前下载过qys的补丁的话就会想到他的补丁是热加载的。<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124927798-1285431277.png" alt="" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124928639-764584258.png" alt="" loading="lazy"><br>
所以我们可以通过覆盖<code>/opt/qiyuesuo/security/private-security-patch.jar</code>文件进行代码执行，虽然知道了可以通过覆盖这个文件来RCE但是我们还需要知道怎么构造这个jar包才会执行到我们的恶意代码。根据补丁安装说明可以知道主要逻辑应该在<code>private-security-loader-1.0.0.jar</code>里点开这个jar第一个类就是<code>com.qiyuesuo.security.patch.loader.SecurityLibManager</code><br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124929436-1454531524.png" alt="" loading="lazy"><br>
这里很明显就是触发热加载的地方，检测到<code>hash</code>值发生变化就会进行<code>reload</code>以及<code>registerQVDLogic</code><br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124934706-816381595.png" alt="" loading="lazy"><br>
这里加载jar包<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124935598-533964811.png" alt="" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124941145-539826519.png" alt="" loading="lazy"><br>
加载class<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124941871-1859194870.png" alt="" loading="lazy"><br>
当全类名前缀为<code>com.qiyuesuo.security.patch.filter.logic</code>时会实例化这个类此时可以执行到类的静态代码块，所以我们只需要往正常的<code>private-security-patch.jar</code>里加入<code>com.qiyuesuo.security.patch.filter.logic.xxx</code> 然后在静态代码块里执行恶意代码即可。于是我使用<code>jmg</code>生成了一个这样的内存马注入器类名为<code>com.qiyuesuo.security.patch.filter.logic.ofdrce</code>进行漏洞利用发现没有成功，经过调试发现我本地的<code>private-security-loader-1.0.0.jar</code>可能和我上传的<code>private-security-patch.jar</code>版本不对应<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124942458-2018064958.png" alt="" loading="lazy"><br>
实例化<code>com.qiyuesuo.security.patch.filter.logic</code>包里某个类调用<code>com.qiyuesuo.security.patch.common.util.SecurityResourceOperator</code>类里的方法时因为其还没有实例化导致空指针异常退出，解决办法是将恶意类命名为<code>com.qiyuesuo.security.patch.filter.logic.AAAA</code>这样的话最开始实例化的就是我们的恶意类。<br>
生成恶意类<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124943215-2100467134.png" alt="" loading="lazy"><br>
将恶意类加入正常的<code>private-security-patch.jar</code>中(注意有的压缩软件直接拉文件进jar包会导致错误)<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124944063-966520639.png" alt="" loading="lazy"><br>
制作恶意压缩文件<code>LINUX</code>也可使用<code>/proc/self/cwd/security/</code>目录更加靠谱，<code>windows</code>可尝试<code>/qiyuesuo/security/</code>目录<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124945064-44075289.png" alt="" loading="lazy"><br>
构造数据包上传<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124945867-1295589065.png" alt="" loading="lazy"><br>
等待几秒钟成功实例化我们的恶意类<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124946903-662704209.png" alt="" loading="lazy"><br>
成功打入内存马<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124947657-382455617.png" alt="" loading="lazy"></p>
<h1 id="132补丁绕过">1.3.2补丁绕过</h1>
<p>这个漏洞最初由<code>1.3.2</code>版本补丁修复,补丁关键代码如下<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124948516-1240561339.png" alt="" loading="lazy"><br>
先获取URL然后判断是否等于<code>PDFVERIFIER_URL_LIST</code>里的某个值<code>ENABLE</code>默认为<code>true</code>且请求方法为<code>POST</code>则使用<code>PdfverifierPreventWrapper</code>包装<code>request</code>我们这里按照补丁绕过顺序来分析所以直接对比1.3.2和1.3.3补丁即可发现绕过点<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124949383-1868997346.png" alt="" loading="lazy"><br>
绕过点位于包装类的<code>getParts</code>方法，当spring解析上传格式时会调用<code>getParts</code>方法此时会调用到<code>com.qiyuesuo.security.patch.filter.wrapper.PdfverifierPreventWrapper#getParts</code>而这个方法里面获取文件名和<code>spring</code>获取文件名存在差异。<code>spring</code>支持将整个文件名URL编码<code>org.springframework.web.multipart.support.StandardMultipartHttpServletRequest#parseRequest</code><br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124950202-480007969.png" alt="" loading="lazy"><br>
这个地方会对整个<code>filename</code>进行<code>URL</code>解码<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124950916-2036760224.png" alt="" loading="lazy"><br>
而<code>1.3.2</code>版本补丁使用的<code>org.apache.catalina.core.ApplicationPart#getSubmittedFileName</code>不支持将整个文件名<code>URL</code>解码<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124951749-254704546.png" alt="" loading="lazy"><br>
从而在<code>filename.toLowerCase().endsWith(REGEX)</code>时判断失败所以可以直接使用<code>URL</code>编码的文件名绕过补丁<br>
直接上传ofd被拦截<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124952462-1622883430.png" alt="" loading="lazy"><br>
使用<code>URL</code>编码绕过补丁<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124953311-177106689.png" alt="" loading="lazy"><br>
其实这个地方也修复了<code>MIME</code>编码加<code>URL</code>编码双重编码的绕过</p>
<h1 id="133-135补丁绕过">1.3.3-1.3.5补丁绕过</h1>
<p>我下载了1.3.3之后的所以补丁，1.3.4-1.3.5补丁和<code>pdfverifier</code>相关的改动感觉不是在修复绕过或者说是其他接口的<code>zip slip</code>漏洞修复。所以这里我们直接对比1.3.5和1.3.6补丁<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124954004-480508490.png" alt="" loading="lazy"><br>
增加了一个<code>removeEndSlash</code>方法用于移除末尾的斜杠，其实这个绕过我感觉比上面的绕过更容易想到。我们先看他是如何获取<code>uri</code>的<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124954717-437641910.png" alt="" loading="lazy"><br>
通过<code>getRequestURI</code>获取<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124955425-1896796989.png" alt="" loading="lazy"><br>
将双斜杆替换为单斜杠<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124956036-1741071040.png" alt="" loading="lazy"><br>
这里使用的等于来判断<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124957822-574178678.png" alt="" loading="lazy"><br>
虽然用了<code>getRequestURI</code>获取<code>uri</code>但是不能使用下面这类绕过</p>
<ul>
<li>
<p>/api/;/pdfverifier</p>
</li>
<li>
<p>/api/./pdfverifier</p>
</li>
<li>
<p>///api/pdfverifier</p>
</li>
</ul>
<p>因为他前面有个补丁<code>com.qiyuesuo.security.patch.filter.logic.DangerUrlPreventLogic#doQvdLogic</code>是专门判断这类<code>uri</code>的，这里就需要使用<code>spring</code>的一个特性在路由后面添加斜杠一样可以访问到，所以使用以下<code>POC</code>成功绕过补丁<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124958897-284419824.png" alt="" loading="lazy"></p>
<h1 id="136补丁绕过">1.3.6补丁绕过</h1>
<p>直接对比1.3.6和1.3.7补丁<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723124959765-1452852175.png" alt="" loading="lazy"><br>
这里修改了<code>removeDuplicateSlash</code>方法移除双斜杆改为了移除所有且将<code>/+</code>都替换为<code>/</code>，所以这里的绕过应该是三斜杠绕过，不过按道理三斜杠会被<code>com.qiyuesuo.security.patch.filter.logic.DangerUrlPreventLogic#doQvdLogic</code>检测到，为什么可以绕过呢，因为正好末尾的<code>///</code>先经过一次<code>removeDuplicateSlash</code>变为<code>//</code>再经过一次<code>removeEndSlash</code>变为了<code>/</code>正好可以过<code>com.qiyuesuo.security.patch.filter.logic.DangerUrlPreventLogic#doQvdLogic</code>检测，所以绕过<code>POC</code>如下<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723125001060-2091524937.png" alt="" loading="lazy"></p>
<h1 id="137补丁绕过">1.3.7补丁绕过</h1>
<p>直接对比1.3.7和1.3.8补丁<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723125001920-514394376.png" alt="" loading="lazy"><br>
这里改动比较大的地方在<code>hasPathTraversal</code>方法里，但是乍一看看不出什么问题。<br>
这里移除了<code>(entry = zis.getNextEntry()) == null</code>的判断，改为了使用和后面<code>pdfverifier</code>接口解压相同的代码，于是猜测有一种办法可以导致<code>zis.getNextEntry()== null</code>，而后面的解压代码依然可以解压。跟入<code>getNextEntry</code>发现会对文件头做判断如果不是zip文件头则返回NULL<br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723125002668-1596948310.png" alt="" loading="lazy"><br>
而后面解压代码没有使用<code>getNextEntry</code>于是直接在压缩文件头部添加<code>\r\n</code>发现此时<code>zis.getNextEntry()== null</code>而解压代码依然可以解压这个压缩文件，所以这个补丁的<code>bypass</code>即为在压缩文件头部添加<code>\r\n</code><br>
<img src="https://img2024.cnblogs.com/blog/858505/202507/858505-20250723125003459-1087822704.png" alt="" loading="lazy"><br>
我这里测试绕过成功但是内存马没打上后面看了下又是之前的原因实例化<code>com.qiyuesuo.security.patch.config.logic.SecurityPropertiesConfigLogic</code>的时候报错了而这个类的顺序是在我们之前内存马顺序之前所以还是建议内存马使用<code>com.qiyuesuo.security.patch.config.logic.AAAAA</code>最为靠谱，替换内存马类名后成功注入内存马。</p>
<h1 id="总结">总结</h1>
<p>这个漏洞本身其实比较简单，覆盖补丁热加载来RCE值得学习，后续的多次补丁绕过也挺有意思。所以说挖洞的话还是需要多分析历史漏洞说不定就绕过了挖个新的RCE呢。</p>
<hr>
<p><em>本文仅供安全研究和学习使用，由于传播、利用此文档提供的信息而造成任何直接或间接的后果及损害，均由使用本人负责，公众号及文章作者不为此承担任何责任。</em></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.001388888888888889" data-date-updated="2025-07-23 12:52">2025-07-23 12:50</span>&nbsp;
<a href="https://www.cnblogs.com/cwkiller">cwkiller</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19000543);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19000543', targetLink: 'https://www.cnblogs.com/cwkiller/p/19000543', title: '契约锁pdfverifier远程代码执行漏洞攻防绕过史' })">举报</a>
</div>
        