
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/du-hong/p/18463767" title="发布于 2025-07-28 11:15">
    <span role="heading" aria-level="2">《刚刚问世》系列初窥篇-Java+Playwright自动化测试-23- 操作鼠标拖拽 - 番外篇（详细教程）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h3>1.简介</h3>
<p>跟随宏哥学习的小伙伴或者童鞋们想必已经在宏哥Python+Playwright系列文章中知道宏哥如何处理前边文章中提到的反爬虫机制。今天跟随宏哥看一下java语言是如何处理的，已经按照之前的处理方式是否可以成功的处理呢？那么接下来就随宏哥一步步来探索这个未知之谜。好了废话不说，直接进入今天的主题。</p>
<h3 id="autoid-0-1-0">2.启动浏览器的模式</h3>
<p>宏哥按照自己的理解将其分为两种启动模式，一种是：无痕模式启动浏览器，另一种是：非无痕模式启动浏览器。</p>
<p>playwright 提供了launchPersistentContext启动浏览器的方法，可以非无痕模式启动浏览器。</p>
<p>无痕模式启动浏览器适合做自动化测试的人员。</p>
<p>非无痕模式启动浏览器适合一些爬虫用户人员。</p>
<h4>2.1launchPersistentContext</h4>
<p>官方API的文档地址：<a href="https://playwright.dev/java/docs/api/class-browsertype#browser-type-launch-persistent-context" rel="noopener nofollow">浏览器类型 |Playwright Java</a><a href="https://playwright.dev/java/docs/api/class-browsertype#browser-type-launch-persistent-context" rel="noopener nofollow"><br></a></p>
<p>返回持久性浏览器上下文实例。</p>
<p>启动使用位于&nbsp;userDataDir&nbsp;的持久性存储的浏览器，并返回唯一的上下文。关闭此上下文将自动关闭浏览器。</p>
<h4 id="autoid-0-2-0">2.2无痕模式启动浏览器</h4>
<p>1.launch()方法是无痕模式启动浏览器。</p>
<p><strong>参考代码如下：</strong></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.bjhg.playwright;

</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Browser;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserContext;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserType;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Page;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Playwright;

</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
 * </span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)"> 北京-宏哥
 * 
 * @公众号:北京宏哥（微信搜索，关注宏哥，提前解锁更多测试干货）
 * 
 * 《刚刚问世》系列初窥篇-Java+Playwright自动化测试-23- 操作鼠标拖拽 - 番外篇（详细教程）
 *
 * 2024年10月18日
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Test_Drag {
    
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {
        </span><span style="color: rgba(0, 0, 255, 1)">try</span> (Playwright playwright =<span style="color: rgba(0, 0, 0, 1)"> Playwright.create()) {
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">使用chromium浏览器，# 浏览器配置，设置以GUI模式启动Chrome浏览器（要查看浏览器UI，在启动浏览器时传递&nbsp;headless=false&nbsp;标志。您还可以使用&nbsp;slowMo&nbsp;来减慢执行速度。</span>
          Browser browser = playwright.chromium().launch(<span style="color: rgba(0, 0, 255, 1)">new</span> BrowserType.LaunchOptions().setHeadless(<span style="color: rgba(0, 0, 255, 1)">false</span>).setSlowMo(3000<span style="color: rgba(0, 0, 0, 1)">));
          BrowserContext context </span>=<span style="color: rgba(0, 0, 0, 1)"> browser.newContext();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">创建page</span>
          Page page =<span style="color: rgba(0, 0, 0, 1)"> context.newPage();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">浏览器打开百度</span>
          page.navigate("https://www.cnblogs.com/du-hong"<span style="color: rgba(0, 0, 0, 1)">);
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭page</span>
<span style="color: rgba(0, 0, 0, 1)">          page.close();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭browser</span>
<span style="color: rgba(0, 0, 0, 1)">          browser.close();
        }
      }
}</span></pre>
</div>
<p>2.无痕模式启动浏览器，会在浏览器右上角出现“无痕模式”，如下图所示：</p>
<p><img src="https://img2023.cnblogs.com/blog/1232840/202309/1232840-20230928131752926-546506640.png" alt="" class="medium-zoom-image" loading="lazy"></p>
<h4 id="autoid-0-2-1">2.3非无痕模式启动浏览器</h4>
<p>1.如果网站被反爬虫机制识别或者被监测无痕模式不能使用，那么可以用launchPersistentContext()方法进行非无痕（有痕迹）模式启动浏览器。</p>
<p>相关参数说明：</p>
<ul>
<li>userDataDir &nbsp;： 用户数据目录，此参数是必须的，可以自定义一个目录</li>
<li>setAcceptDownloads： 接收下载事件</li>
<li>setHeadless： 是否设置无头模式</li>
<li>setChannel： 指定浏览器类型，默认chromium</li>
</ul>
<p><strong>参考代码如下：</strong></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.bjhg.playwright;

</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.io.File;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserContext;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserType;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Page;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Playwright;

</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
 * </span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)"> 北京-宏哥
 * 
 * @公众号:北京宏哥（微信搜索，关注宏哥，提前解锁更多测试干货）
 * 
 * 《刚刚问世》系列初窥篇-Java+Playwright自动化测试-23- 操作鼠标拖拽 - 番外篇（详细教程）
 *
 * 2024年10月18日
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Test_Dialog {
    
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {
        </span><span style="color: rgba(0, 0, 255, 1)">try</span> (Playwright playwright =<span style="color: rgba(0, 0, 0, 1)"> Playwright.create()) {
            
            BrowserType.LaunchPersistentContextOptions launch</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> BrowserType.LaunchPersistentContextOptions(); 
            launch.setViewportSize(</span>1920,1080<span style="color: rgba(0, 0, 0, 1)">);
            launch.setAcceptDownloads(</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
            launch.setChannel(</span>"chrome"<span style="color: rgba(0, 0, 0, 1)">);
            launch.setHeadless(</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
            launch.setSlowMo(</span>3000<span style="color: rgba(0, 0, 0, 1)">); 
            BrowserContext browserContext </span>= playwright.chromium().launchPersistentContext(<span style="color: rgba(0, 0, 255, 1)">new</span> File("C:\\Users\\Administrator\\Desktop\\test"<span style="color: rgba(0, 0, 0, 1)">).toPath(),launch); 
            Page page </span>=<span style="color: rgba(0, 0, 0, 1)"> browserContext.newPage(); 
            
            page.navigate(</span>"https://www.baidu.com"<span style="color: rgba(0, 0, 0, 1)">);
             
            System.out.println(</span>"Test Pass"<span style="color: rgba(0, 0, 0, 1)">);
             
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭page</span>
<span style="color: rgba(0, 0, 0, 1)">            page.close();
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭browser</span>
<span style="color: rgba(0, 0, 0, 1)">            browserContext.close();
        }
    }
}</span></pre>
</div>
<p id="问题1以上代码执行时会发现多一个空白页">2.宏哥发现以上代码运行后，会多出一个空白页。如下图所示：</p>
<p><img src="https://img2023.cnblogs.com/blog/1232840/202309/1232840-20230928132619601-110007590.png" alt="" class="medium-zoom-image" loading="lazy"></p>
<p>3.进入launchPersistentContext()方法，发现是因为使用launchPersistentContext()方法会自动打开一个tab标签页，后面代码browserContext.newPage()重新打开了一个新的page对象。所以才会多一个空白页。</p>
<p>解决办法很简单，去掉browserContext.newPage()代码即可。直接用默认打开发tab标签页对象。</p>
<p><strong>参考代码如下：</strong></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.bjhg.playwright;

</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.io.File;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserContext;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserType;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Page;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Playwright;

</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
 * </span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)"> 北京-宏哥
 * 
 * @公众号:北京宏哥（微信搜索，关注宏哥，提前解锁更多测试干货）
 * 
 * 《刚刚问世》系列初窥篇-Java+Playwright自动化测试-23- 操作鼠标拖拽 - 番外篇（详细教程）
 *
 * 2024年10月18日
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Test_Dialog {
    
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {
        </span><span style="color: rgba(0, 0, 255, 1)">try</span> (Playwright playwright =<span style="color: rgba(0, 0, 0, 1)"> Playwright.create()) {
            
            BrowserType.LaunchPersistentContextOptions launch</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> BrowserType.LaunchPersistentContextOptions(); 
            launch.setViewportSize(</span>1920,1080<span style="color: rgba(0, 0, 0, 1)">);
            launch.setAcceptDownloads(</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
            launch.setChannel(</span>"chrome"<span style="color: rgba(0, 0, 0, 1)">);
            launch.setHeadless(</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
            launch.setSlowMo(</span>3000<span style="color: rgba(0, 0, 0, 1)">); 
            BrowserContext browserContext </span>= playwright.chromium().launchPersistentContext(<span style="color: rgba(0, 0, 255, 1)">new</span> File("C:\\Users\\Administrator\\Desktop\\test"<span style="color: rgba(0, 0, 0, 1)">).toPath(),launch); 
            
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">            Page page = browserContext.newPage(); </span>
            Page page = browserContext.pages().get(0<span style="color: rgba(0, 0, 0, 1)">);
            page.navigate(</span>"https://www.baidu.com"<span style="color: rgba(0, 0, 0, 1)">);
             
            System.out.println(</span>"Test Pass"<span style="color: rgba(0, 0, 0, 1)">);
             
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭page</span>
<span style="color: rgba(0, 0, 0, 1)">            page.close();
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭browser</span>
<span style="color: rgba(0, 0, 0, 1)">            browserContext.close();
        }
    }
}</span></pre>
</div>
<p><strong>运行代码如下（可以清楚地看到没有 新增的空白页面了）：</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241015102318055-1821837498.gif" alt="" loading="lazy"></p>
<h3 id="autoid-0-2-2">3.项目实战</h3>
<p>这里宏哥还用之前的那个实例进行演示，也就是在文章最后提到反爬虫的那篇文章的例子：携程旅行，注册页面的一个滑动，进行项目实战。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241015102442655-1150674421.gif" alt="" loading="lazy"></p>
<h4 id="autoid-0-3-0">3.1代码设计</h4>
<p>参考前边提到的方法进行代码设计如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241015135806717-1461423103.png" alt="" loading="lazy"></p>
<h4>3.2参考代码</h4>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.bjhg.playwright;

</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.io.File;

</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserContext;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserType;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Locator;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Page;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Playwright;

</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
 * </span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)"> 北京-宏哥
 * 
 * @公众号:北京宏哥（微信搜索，关注宏哥，提前解锁更多测试干货）
 * 
 * 《刚刚问世》系列初窥篇-Java+Playwright自动化测试-23- 操作鼠标拖拽 - 番外篇（详细教程）
 *
 * 2024年10月18日
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Test_Dialog {
    
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {
        </span><span style="color: rgba(0, 0, 255, 1)">try</span> (Playwright playwright =<span style="color: rgba(0, 0, 0, 1)"> Playwright.create()) {
            
            BrowserType.LaunchPersistentContextOptions launch</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> BrowserType.LaunchPersistentContextOptions(); 
            launch.setViewportSize(</span>1920,1080<span style="color: rgba(0, 0, 0, 1)">);
            launch.setAcceptDownloads(</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
            launch.setChannel(</span>"chrome"<span style="color: rgba(0, 0, 0, 1)">);
            launch.setHeadless(</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
            launch.setSlowMo(</span>5000<span style="color: rgba(0, 0, 0, 1)">); 
            launch.setBypassCSP(</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
            
            BrowserContext browserContext </span>= playwright.chromium().launchPersistentContext(<span style="color: rgba(0, 0, 255, 1)">new</span> File("C:\\Users\\Administrator\\Desktop\\test"<span style="color: rgba(0, 0, 0, 1)">).toPath(),launch); 
            
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">            Page page = browserContext.newPage(); </span>
            Page page = browserContext.pages().get(0<span style="color: rgba(0, 0, 0, 1)">);
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">3.浏览器访问demo</span>
            page.navigate("https://passport.ctrip.com/user/reg/home"<span style="color: rgba(0, 0, 0, 1)">);
            
            page.locator(</span>"//*[@id='agr_pop']/div[3]/a[2]"<span style="color: rgba(0, 0, 0, 1)">).click();
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">4.开始拖拽
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">获取拖动按钮位置并拖动</span>
            Locator slider = page.locator("//*[@id='slideCode']/div[1]/div[2]"<span style="color: rgba(0, 0, 0, 1)">);
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 使用鼠标滑动滑块</span>
            page.mouse().move(slider.boundingBox().x + slider.boundingBox().width / 2, slider.boundingBox().y + slider.boundingBox().height / 2<span style="color: rgba(0, 0, 0, 1)">);
            page.mouse().down();
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 根据滑动的范围，这里使用滑动最大距离</span>
            page.mouse().move(slider.boundingBox().x + slider.boundingBox().width / 0.5+380, slider.boundingBox().y + slider.boundingBox().height / 2<span style="color: rgba(0, 0, 0, 1)">);
            page.mouse().up();
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">断点调试</span>
<span style="color: rgba(0, 0, 0, 1)">            page.pause();
            System.out.println(</span>"Test Pass"<span style="color: rgba(0, 0, 0, 1)">);
            
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭page</span>
<span style="color: rgba(0, 0, 0, 1)">            page.close();
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭browser</span>
<span style="color: rgba(0, 0, 0, 1)">            browserContext.close();
        }
    }
}</span></pre>
</div>
<h4>3.3运行代码</h4>
<p>1.运行代码，右键Run As-&gt;Java Application，就可以看到控制台输出，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241015102817514-2139940751.png" alt="" loading="lazy"></p>
<p>2.运行代码后电脑端的浏览器的动作（（可以清楚地的看到滑动后，又出现了反爬虫机制，又弹出选字校验））。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241018092117357-990693466.gif" alt="" loading="lazy"></p>
<h3 id="autoid-0-3-3">4.小结</h3>
<p>宏哥在实践的过程中，发现无论手动还是利用上边的代码进行自动化测试都会出现那个反爬虫的机制弹出，因此宏哥怀疑最可能的问题就是由于宏哥近期频繁访问演示，可能被反爬虫的机制判断后，进行了IP锁定，因此会出现这种情况，因为宏哥在第一次进行手动滑动验证的时候，就没有出现。所以宏哥怀疑是被锁定了。一开始宏哥以为是缓冲的问题，宏哥清除浏览器缓冲和历史记录，然后重启电脑最后结果仍然是一样。所以宏哥怀疑被网站的反爬虫锁定IP，最后经过Python和Java的这部分实践，宏哥觉得这种有痕迹的启动模式其实是说白了，就是启动本地安装的浏览器进行自动化测试，而非我们一开始搭建环境时下载的浏览器。因为宏哥在执行代码的过程中报了一个无法找到本地安装chrome的可执行文件的路劲的错误，将其安装文件拷贝到此路径下，代码运行正常没有报错。宏哥也查了各种反爬虫机制的资料，进行验证和实践，折腾了半天还是没有解决这个问题，也不知道python和java语言的有什么区别了，还是因为被锁定，有点懵。但是宏哥回过头来又用Python语言的处理方法试了一下这个注册页面，仍然可以成功处理，看来不是锁定的问题。但是其不是很稳定啊，后边在运行代码也会弹出选字校验。各位有什么好办法可以留言给宏哥，抱歉了没有帮到大家！</p>
<h4>4.1实战过程中遇到的坑及解决办法</h4>
<p>1.坑一：报错&nbsp;message='Chromium distribution 'chrome' is not found at C:\Users\Administrator\AppData\Local\Google\Chrome\Application\chrome.exe ，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241015141830837-1245848880.png" alt="" loading="lazy"></p>
<p>解决办法：找到chrome安装路径，将安装文件全部拷贝到代码中报错的路径下即可，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241015142051452-25187185.png" alt="" loading="lazy"></p>
<p>2.坑二：报错类似这样 navigating to "https://passport.ctrip.com/user/reg/home", waiting until "load"<span class="token string"><span class="token punctuation"><span class="token string">。如下图所示：</span></span></span></p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241017081454611-153013255.png" alt="" loading="lazy"></p>
<p><span class="token string"><span class="token punctuation"><span class="token string">解决办法：将launch.setSlowMo(50);的时间加长即可。</span></span></span></p>
<h4>4.2部分参数详细说明</h4>
<p>1.launchPersistentContext创建的浏览器对象，为什么无法使用browser.newContext()创建上下文？</p>
<p>因为launchPersistentContext字面上意思就已经是一个context上下文对象了，所以无法创建上下文，只能创建page对象。</p>
<p>2.userDataDir路径参数的作用什么？</p>
<p>userDataDir是指定浏览器启动的用户数据缓存目录，当指定一个新的目录时，启动浏览器会发现自动生成缓存文件。打开C:\Users\\DELL\Desktop\Chrome\test目录会看到加载的浏览器缓存文件。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241015143048328-2115859559.png" alt="" loading="lazy"></p>
<p>3.userDataDir能不能记住用户登录的状态？</p>
<p>userDataDir就是你自己定义的打开浏览器保存的用户数据，包含了用户的cookies，所以你只要登录过，就会自动保存。<br>所以你只要代码打开网站，如果不能通过代码自动登录（可能有一些验证码什么的），你可以断点后手工去登录一次，也会记住cookies。下次代码再打开就不需要登录了。</p>
<p>4.为什么按你的教程，我这个网站就无法保持登录？</p>
<p>能不能保持登录状态，主要看你网站的cookies有效期，有些网站关闭浏览器后就失效了，比如一些银行的网站，你只要关闭浏览器窗口，下次就需要再次登录。<br>简单来说一句话：你手工去操作一次，关闭浏览器，再打开还要不要登录，如果关闭浏览器需要再次登录，那代码也没法做到保持登录。<br>有些博客网站，你登录一次，cookies几个月都有效，这种就可以利用缓存的cookies保持登录。</p>
<p>5.为什么网上其他教程userDataDir写chrome的安装目录？</p>
<p>其实没必要非要写chrome的安装目录"C:\Users\{getpass.getuser()}\AppData\Local\Google\Chrome\UserData"。<br>如果你写的是系统默认安装目录的用户数据，那你本地浏览器打开后，执行代码就会报错。所以不推荐！</p>
<p>6.默认启动的是chromium浏览器，能不能换成其他的浏览器?</p>
<p>可以通过"channel"参数指定浏览器，可以支持chromium系列：chromium、chrome、chrome-beta、msedge。</p>
</div>
<div id="MySignature" role="contentinfo">
    <div id="MySignature" style="display: block">
	<div style="font-size: 13px; border: 1px dashed rgb(45, 161, 45); padding: 10px 15px; background-color: rgb(248, 248, 248)">
		<label style="font-weight: bold">
			&nbsp;&nbsp;&nbsp;&nbsp;为了方便大家在移动端也能看到我分享的博文，现已注册个人微信公众号，扫描左下方二维码即可，欢迎大家关注，提前解锁更多测试干货！有时间会及时分享相关技术博文。
		</label>
		<br>
		<label style="font-weight: bold">
			&nbsp;&nbsp;&nbsp;&nbsp;为了方便大家互动讨论相关技术问题，刚刚建立了咱们的专门的微信群交流互动群，群内会分享交流测试领域前沿知识。  请您扫描中间的微信二维码进群 
		</label>
		<br>
		<label style="font-weight: bold">
			&nbsp;&nbsp;&nbsp;&nbsp;为了方便大家互动讨论相关技术问题，现已组建专门的微信群，由于微信群满100，请您扫描右下方宏哥个人微信二维码拉你进群
			<label style="font-weight: bold; color: red; font-size: 15px">
				（请务必备注：已关注公众号进群）平时上班忙（和你一样），所以加好友不及时，请稍安勿躁~
			</label>
			，欢迎大家加入这个大家庭，我们一起畅游知识的海洋。
		</label>
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;感谢您花时间阅读此篇文章,如果您觉得这篇文章你学到了东西也是为了犒劳下博主的码字不易不妨打赏一下吧，让博主能喝上一杯咖啡，在此谢过了！
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;如果您觉得阅读本文对您有帮助，请点一下左下角
		<a id="recommend" style="font-weight: bold; color: red; font-size: 15px; text-decoration: underline">
			“推荐”
		</a>
		按钮，您的
		<label style="font-weight: bold; color: red; font-size: 15px">
			“推荐”
		</label>
		将是我最大的写作动力！另外您也可以选择
		<a id="follow_me_btn" style="cursor: pointer; color: blue; text-decoration: underline">
			【
			<strong>
				关注我
			</strong>
			】
		</a>
		，可以很方便找到我！
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;本文版权归作者和博客园共有，来源网址：
		<a href="https://www.cnblogs.com/du-hong" style="color: red; text-decoration: underline" target="_blank">
			https://www.cnblogs.com/du-hong
		</a>
		欢迎各位转载，但是未经作者本人同意，转载文章之后必须在文章页面明显位置给出作者和原文连接，否则保留追究法律责任的权利！
	</div>
	<div style="text-align: center; margin-top: 10px">
		<p style=" font-weight: bolder; color: red; ">
			公众号(关注宏哥)&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			微信群(扫码进群) &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;客服微信
		</p>
		<img style="width: 200px;padding-right: 50px;" alt="个人微信公众号" src="https://img2018.cnblogs.com/common/1741949/201911/1741949-20191119095948011-608816619.png">
		<img style="width: 200px;padding-right: 65px;" alt="微信群" src="https://img2024.cnblogs.com/blog/1232840/202506/1232840-20250610113707419-637869921.png">
		<img style="width: 200px" alt="个人微信" src="https://img2018.cnblogs.com/common/1741949/201911/1741949-20191106101257091-849954564.png">
	</div>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-28 11:16">2025-07-28 11:15</span>&nbsp;
<a href="https://www.cnblogs.com/du-hong">北京-宏哥</a>&nbsp;
阅读(<span id="post_view_count">18</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18463767);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18463767', targetLink: 'https://www.cnblogs.com/du-hong/p/18463767', title: '《刚刚问世》系列初窥篇-Java+Playwright自动化测试-23- 操作鼠标拖拽 - 番外篇（详细教程）' })">举报</a>
</div>
        