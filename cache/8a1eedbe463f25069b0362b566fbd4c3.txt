
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/beluga/p/18720205" title="发布于 2025-06-10 18:20">
    <span role="heading" aria-level="2">Git 操作进阶</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="1-git基本操作">1. git基本操作</h1>
<h2 id="11--查看文件">1.1  查看文件</h2>
<p><strong>还未被add的更改</strong></p>
<ul>
<li>使用git status命令，它会显示哪些文件已经被修改并添加到暂存区，以及那些还未被添加的修改。</li>
</ul>
<pre><code>git status -uno       //不显示未追踪的文件，推荐使用
git status            //可以显示未被追踪的文件。很慢！！
</code></pre>
<p><strong>查看某一次commit的更改</strong></p>
<pre><code>git show &lt;commit-hash&gt;
</code></pre>
<p><strong>查看某一次commit的某个具体文件的更改</strong></p>
<pre><code>git show &lt;commit-hash&gt; -- &lt;file-path&gt;
git show -p &lt;commit-hash&gt;:&lt;file-path&gt;
</code></pre>
<h2 id="12-查看分支">1.2 查看分支</h2>
<pre><code>git branch -vv
</code></pre>
<p>这将<strong>列出所有本地分支</strong>，并在每个分支旁边显示它们各自<code>追踪的远程分支</code>。当前分支会用星号 (*) 标记。</p>
<h2 id="13-git-stash-命令">1.3 git stash 命令</h2>
<p><code>git stash</code> 命令在 Git 这个广泛使用的版本控制系统中被用来<code>临时搁置</code>（或称之为“贮藏”）工作目录中的更改，使您可以切换到其他任务。这在您需要快速切换上下文并处理别的事情，但<code>还没准备好提交</code>当前更改时非常有用。下面是一些常用的 <code>git stash </code>使用方法和选项的快速概览：</p>
<h3 id="1-临时搁置您的更改">1. 临时搁置您的更改</h3>
<p>这个命令临时搁置更改，以便您可以处理不同的任务。默认情况下，贮藏的更改<strong>包括修改过的<code>跟踪文件</code>和<code>暂存区</code>的更改</strong>，但不包括未跟踪的文件或被忽略的文件。</p>
<pre><code>git stash
</code></pre>
<pre><code>git stash pop
</code></pre>
<p><code>git stash pop</code>可以应用第一个贮藏 相当于是<code>git stash apply stash@{0}  + git stash drop stash@{0}</code></p>
<h3 id="2-列出贮藏">2. 列出贮藏</h3>
<ul>
<li>要查看您贮藏的更改列表，使用：<code>git stash list</code></li>
</ul>
<h3 id="3-应用贮藏">3. 应用贮藏</h3>
<ul>
<li>要重新应用最近创建的贮藏的更改，可以运行：</li>
</ul>
<pre><code>git stash apply
</code></pre>
<ul>
<li>这个命令重新应用更改但<strong>保留</strong>它们在贮藏列表中。如果您想要应用特定贮藏的更改，可以像这样指定：</li>
</ul>
<pre><code>git stash apply stash@{n}
</code></pre>
<h3 id="4-删除贮藏">4. 删除贮藏</h3>
<ul>
<li>如果在应用之后或决定不再需要某个贮藏，您可以用以下命令将其删除：<code>git stash drop stash@{n}</code></li>
</ul>
<h3 id="5-清除所有贮藏">5. 清除所有贮藏</h3>
<ul>
<li>要移除所有存储的贮藏，使用：<code>git stash clear</code></li>
</ul>
<h2 id="14-git-log查看">1.4 git log查看</h2>
<p>下面的命令可以查看每次提交修改的文件</p>
<pre><code>git log --stat 
</code></pre>
<h1 id="2-开发新的模块">2. 开发新的模块</h1>
<p>要拉取远程分支到本地且该分支在本地尚未存在，你可以通过以下步骤来完成：</p>
<ol>
<li>执行<code>git fetch</code>以获取远程仓库的最新信息，这个命令会将远程的所有更改（包含新创建的分支）下载到本地，但不会自动合并到你的工作目录中。</li>
<li>选择你想要拉取的远程分支，并使用以下命令创建一个新的本地分支来跟踪远程分支。在这个例子中，假设要拉取的远程分支名为<code>feature-x</code>。</li>
</ol>
<pre><code>git checkout -b feature-x origin/feature-x
</code></pre>
<p>这个命令实际上做了两件事：创建了一个与远程分支同名的新本地分支，并将其设置为跟踪远程分支。</p>
<h1 id="3-同步main分支的提交">3. 同步main分支的提交</h1>
<p>你从 <code>main</code> 分支签出了 <code>feature-branch</code> 分支。<br>
<code>main</code> 分支有了新的提交，现在你想将这些提交同步到 <code>feature-branch</code>。</p>
<pre><code>git rebase main
</code></pre>
<h1 id="4-git-pull-时遇到冲突">4. git pull 时遇到冲突</h1>
<ul>
<li><strong>使用 git pull --rebase  强制同步</strong></li>
<li><strong>使用 git reset 强制同步</strong></li>
</ul>
<pre><code>git fetch origin
git reset --hard origin/&lt;远程分支名&gt;
</code></pre>
<h1 id="5-撤销文件更改">5. 撤销文件更改</h1>
<h2 id="51-未add的文件工作目录">5.1 未add的文件(工作目录</h2>
<p>使用以下命令将工作目录中的所有更改恢复到上一次提交的状态：</p>
<pre><code># 高本版使用(推荐
git restore .
# 或者针对单个文件：
git restore &lt;filename&gt;
# 低版本使用
git checkout -- .
# 或者针对单个文件：
git checkout -- &lt;filename&gt;
</code></pre>
<h2 id="52-已经add的文件">5.2 已经add的文件</h2>
<pre><code>git restore --staged .    //将已经add的文件变为非add 暂存区-&gt;工作区，保留更改
</code></pre>
<h2 id="53-git-reset">5.3 git reset</h2>
<ul>
<li><strong>更改暂存状态</strong>：<code>git reset &lt;file&gt;</code> 可以用于将文件从暂存区移回工作区，相当于“取消 git add”。</li>
<li><strong>回退提交</strong>：<code>git reset</code> 也可以回退当前分支到某个特定的提交。
<ul>
<li><code>git reset --soft &lt;commit&gt;</code>：回退到某个提交，保留所有更改在暂存区。</li>
<li><code>git reset --mixed &lt;commit&gt;</code>（默认）：回退到某个提交，保留更改在工作区，但不在暂存区。</li>
<li><code>git reset --hard &lt;commit&gt;</code>：回退到某个提交，丢弃所有的工作区和暂存区更改。</li>
</ul>
</li>
</ul>
<h2 id="54-后悔药">5.4 后悔药</h2>
<p>Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令，然后再通过<code>git reset</code>返回该版本</p>
<h1 id="6-修改提交记录">6. 修改提交记录</h1>
<h2 id="61-把文件提交到上一次的提交">6.1 把文件提交到上一次的提交：</h2>
<ol>
<li><strong>添加修改</strong>：使用<code>git add .</code>将修改添加到暂存区</li>
<li><strong>修正上次提交</strong>：使用<code>git commit --amend</code>将这些修改添加到上次提交中</li>
<li>这会打开你的默认文本编辑器，允许你修改提交消息。如果不需要修改提交消息，直接保存并关闭编辑器即可。</li>
</ol>
<h1 id="7-修改追踪的远程分支">7. 修改追踪的远程分支</h1>
<p><strong>修改追踪的远程分支</strong>：如果你想要更改本地分支对应的远程分支，可以使用 <code>git branch</code> 命令的 <code>--set-upstream-to</code> 选项。假设你的本地分支是 <code>my-branch</code>，你想要让它追踪远程的 <code>origin/new-branch</code>：</p>
<pre><code>git branch --set-upstream-to=origin/new-branch my-branch
</code></pre>
<p>验证设置：使用 <code>git branch -vv</code> 来确认你的本地分支是否已经追踪到新的远程分支。</p>
<h1 id="8-cherry-pick-其他目录的提交">8. cherry-pick 其他目录的提交</h1>
<ol>
<li>添加另一个本地仓库为 remote：</li>
</ol>
<pre><code>git remote add otherrepo /path/to/other/repo
</code></pre>
<ol start="2">
<li>Fetch 另一个仓库：</li>
</ol>
<pre><code>git fetch otherrepo       //必须这个名字，不能全局
</code></pre>
<ol start="3">
<li>查看提交：</li>
</ol>
<pre><code>git log otherrepo/main
</code></pre>
<blockquote>
<p>将 main 换成另一个仓库实际的分支名。</p>
</blockquote>
<ol start="4">
<li>Cherry-pick 提交：</li>
</ol>
<pre><code>git cherry-pick abc1234
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-10 18:21">2025-06-10 18:20</span>&nbsp;
<a href="https://www.cnblogs.com/beluga">雨天尊</a>&nbsp;
阅读(<span id="post_view_count">74</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18720205);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18720205', targetLink: 'https://www.cnblogs.com/beluga/p/18720205', title: 'Git 操作进阶' })">举报</a>
</div>
        