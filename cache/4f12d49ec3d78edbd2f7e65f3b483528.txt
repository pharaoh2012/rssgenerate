
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/vipstone/p/18752146" title="发布于 2025-03-05 10:45">
    <span role="heading" aria-level="2">面试官：谈谈你对线程池拒绝策略的理解？</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>线程池的拒绝策略是指，当线程池无法承载更多任务时执行的行为。也就是当线程池的核心线程数、最大线程、任务队列都满的情况下，又来了新的任务时，线程池执行的行为被称之为线程池的拒绝策略。</p>
<p>线程池的执行流程如下：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2025/png/92791/1741141206036-2cb01c95-b16c-47fd-8f4a-6eb946fb54cd.png" alt="" loading="lazy"></p>
<h2 id="1内置拒绝策略">1.内置拒绝策略</h2>
<p>在 Java 中，线程池内置了以下四种拒绝策略（Rejected Execution Policy）。</p>
<h4 id="11-abortpolicy中止策略"><strong>1.1 AbortPolicy（中止策略）</strong></h4>
<ul>
<li><strong>行为</strong>：<strong>默认拒绝策略</strong>，直接抛出 RejectedExecutionException 异常。</li>
<li><strong>特点</strong>：强制调用方处理任务被拒绝的情况。</li>
<li><strong>适用场景</strong>：对任务丢失不敏感的场景。如果对丢失敏感需结合异常捕获机制处理（记录信息并告警）。</li>
</ul>
<p>示例代码：</p>
<pre><code class="language-java">new ThreadPoolExecutor(..., new ThreadPoolExecutor.AbortPolicy());
</code></pre>
<h4 id="12-callerrunspolicy调用者运行策略"><strong>1.2 CallerRunsPolicy（调用者运行策略）</strong></h4>
<ul>
<li><strong>行为</strong>：将任务退回给提交任务的线程（即调用 execute() 的线程），由该线程直接执行任务。</li>
<li><strong>特点</strong>：变相降低任务提交速度，避免线程池过载。</li>
<li><strong>适用场景</strong>：希望任务最终被处理，且能承受一定延迟（如日志记录）。</li>
</ul>
<p>示例效果：</p>
<pre><code class="language-java">// 假设线程池已满，主线程提交任务时会直接执行该任务
executor.execute(task);  // 主线程执行 task
</code></pre>
<h4 id="13-discardpolicy丢弃策略"><strong>1.3 DiscardPolicy（丢弃策略）</strong></h4>
<ul>
<li><strong>行为</strong>：静默丢弃被拒绝的任务，不抛出异常，也不执行任务。</li>
<li><strong>特点</strong>：无感知丢弃，可能导致数据丢失。</li>
<li><strong>适用场景</strong>：允许任务丢失的非关键场景（如实时监控数据采样）。</li>
</ul>
<p>示例代码：</p>
<pre><code class="language-java">new ThreadPoolExecutor(..., new ThreadPoolExecutor.DiscardPolicy());
</code></pre>
<h4 id="14-discardoldestpolicy丢弃最旧任务策略"><strong>1.4 DiscardOldestPolicy（丢弃最旧任务策略）</strong></h4>
<ul>
<li><strong>行为</strong>：丢弃工作队列中等待时间最长的任务（即队列头部的任务），然后重新尝试提交当前任务。</li>
<li><strong>特点</strong>：优先处理新任务，但可能丢失重要旧任务。</li>
<li><strong>适用场景</strong>：适合处理时效性较强的任务（如消息推送，新任务优先级更高）。</li>
</ul>
<p>示例代码：</p>
<pre><code class="language-java">new ThreadPoolExecutor(..., new ThreadPoolExecutor.DiscardOldestPolicy());
</code></pre>
<h2 id="2自定义拒绝策略">2.自定义拒绝策略</h2>
<p>除了以上四种内置拒绝策略之外，程序中还可以通过实现 RejectedExecutionHandler 接口实现自定义策略：</p>
<pre><code class="language-java">public class CustomRejectionPolicy implements RejectedExecutionHandler {
    @Override
    public void rejectedExecution(Runnable task, ThreadPoolExecutor executor) {
        // 自定义逻辑（如记录日志、持久化任务、重试等）
        System.out.println("Task rejected: " + task);
        // 保存任务信息
        // 通知相关负责人
    }
}

// 使用自定义策略
ThreadPoolExecutor executor = new ThreadPoolExecutor(
    corePoolSize, maxPoolSize, keepAliveTime, unit, workQueue, new CustomRejectionPolicy()
);
</code></pre>
<h2 id="小结">小结</h2>
<table>
<thead>
<tr>
<th><strong>策略</strong></th>
<th><strong>优点</strong></th>
<th><strong>缺点</strong></th>
<th><strong>适用场景</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>AbortPolicy</strong></td>
<td>默认拒绝策略，报错提示</td>
<td>需处理异常，增加代码复杂度</td>
<td>任务丢失不敏感的场景</td>
</tr>
<tr>
<td><strong>CallerRunsPolicy</strong></td>
<td>任务一定执行</td>
<td>可能阻塞主线程，影响响应速度</td>
<td>非实时任务，允许延迟处理（如日志）</td>
</tr>
<tr>
<td><strong>DiscardPolicy</strong></td>
<td>简单高效，无额外开销</td>
<td>数据丢失风险高</td>
<td>可容忍数据丢失的场景（如监控采样）</td>
</tr>
<tr>
<td><strong>DiscardOldestPolicy</strong></td>
<td>优先处理新任务</td>
<td>可能丢失重要旧任务</td>
<td>时效性强的任务（如实时消息推送）</td>
</tr>
<tr>
<td><strong>CustomRejectionPolicy</strong></td>
<td>灵活</td>
<td>实现复杂</td>
<td>通常用于生产环境，先保存任务信息，再报警提示负责人</td>
</tr>
</tbody>
</table>
<blockquote>
<p>本文已收录到我的面试小站 <a href="https://www.javacn.site" target="_blank" rel="noopener nofollow">www.javacn.site</a>，其中包含的内容有：场景题、并发编程、MySQL、Redis、Spring、Spring MVC、Spring Boot、Spring Cloud、MyBatis、JVM、设计模式、消息队列等模块。</p>
</blockquote>

</div>
<div id="MySignature" role="contentinfo">
    <div style="text-align: center; color: red">
关注下面二维码，订阅更多精彩内容。
<br>
<img style="margin-left: 0px" src="https://images.cnblogs.com/cnblogs_com/vipstone/848916/o_211225130402_gognzhonghao.jpg">
</div>

<div style="display: none">
    <img src="http://icdn.apigo.cn/gitchat/rabbitmq.png?imageView2/0/w/500/h/400">
</div>
<div style="margin-bottom: 50px; display: none">

<img title="微信打赏" src="http://icdn.apigo.cn/myinfo/wchat-pay.png" alt="微信打赏">
<br>

<div style="display: none">
<span style="display: block; position: absolute; height: 40px; top: 50%; margin-top: -20px">关注公众号（加好友）：</span>

<img style="margin-left: 144px" src="http://icdn.apigo.cn/gongzhonghao2.png?imageView2/0/w/120/h/120">
</div>
<p></p>

<div id="AllanboltSignature">
    <p style="border-top: #e0e0e0 1px dashed; border-right: #e0e0e0 1px dashed; border-bottom: #e0e0e0 1px dashed; border-left: #e0e0e0 1px dashed; padding-top: 10px; padding-right: 10px; padding-bottom: 10px; padding-left: 60px; background: url(&quot;https://images.cnblogs.com/cnblogs_com/lloydsheng/239039/o_copyright.gif&quot;) #e5f1f4 no-repeat 1% 50%; font-family: 微软雅黑; font-size: 11px" id="PSignature">
        <br> 作者：
        <a href="http://vipstone.cnblogs.com/" target="_blank">王磊的博客</a>
        <br> 出处：
        <a href="http://vipstone.cnblogs.com/" target="_blank">http://vipstone.cnblogs.com/</a>
        <br>
    </p>
</div></div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.005737901310185185" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-05 10:46">2025-03-05 10:45</span>&nbsp;
<a href="https://www.cnblogs.com/vipstone">磊哥|www.javacn.site</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18752146" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18752146);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18752146', targetLink: 'https://www.cnblogs.com/vipstone/p/18752146', title: '面试官：谈谈你对线程池拒绝策略的理解？' })">举报</a>
</div>
        