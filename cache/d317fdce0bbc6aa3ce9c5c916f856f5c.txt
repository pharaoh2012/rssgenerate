
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/godmoo/p/18999521" title="发布于 2025-07-24 17:05">
    <span role="heading" aria-level="2">学习笔记/DP：wqs 二分概述</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/vbwzobo0.png" alt="制作不易，多多点赞" loading="lazy"></p>
<h1 id="1-概述">1. 概述</h1>
<h2 id="10-概述">1.0. 概述</h2>
<p>wqs 二分，即王钦石二分，是一种通过<strong>降维</strong>来优化 dp 的处理手段。在 OI 中，wqs 二分最常用于处理一类 2D/1D dp，常搭配斜率优化、决策单调性等其他 dp 优化方式使用，较为套路。</p>
<h2 id="11-适用题型">1.1. 适用题型</h2>
<p><strong>wqs 二分处理的题型:</strong> 选取若干个（组）物品，数量有限制，选取有代价，询问代价极值。</p>
<p><span class="math inline">\(\text{eg.}\)</span> 给定一数列 <span class="math inline">\(a_n\)</span>，要求将其按顺序分割为 <span class="math inline">\(c\)</span> 组，使得每组的代价和最小，其中每组的代价定义为该组内所有数的和的平方。<span class="math inline">\(n,c\le10^5,a_i\ge1\)</span>。</p>
<p>显然有 2D/1D 的 dp：设 <span class="math inline">\(f_{i,j}\)</span> 为前 <span class="math inline">\(i\)</span> 个数分了 <span class="math inline">\(j\)</span> 组的方案，答案即为 <span class="math inline">\(f_{n,c}\)</span>，转移显然，预处理前缀和并滚掉第二维，时间复杂度 <span class="math inline">\(\mathcal{O}(cn^2)\)</span>。斜率优化可做到 <span class="math inline">\(\mathcal{O}(cn)\)</span>，但依旧无法通过。</p>
<p>实际上，这大部分这一类型的题目都有类似的 2D/1D dp 的做法。</p>
<h2 id="12-使用前提与凸性证明">1.2. 使用前提与凸性证明</h2>
<p><strong>能使用 wqs 二分的前提:</strong> 记 <span class="math inline">\(f(i)\)</span> 为选取 <span class="math inline">\(i\)</span> 个物品时的答案，<span class="math inline">\(f\)</span> 是凸函数，且可快速计算极值和极值点。</p>
<p>证明函数的凸性方法很多，可以结合题目感性猜测其凸性，或是打表进行观察。</p>
<p>更多严谨的凸性证明见 <a href="https://oi-wiki.org/dp/opt/wqs-binary-search/" target="_blank" rel="noopener nofollow">OI Wiki</a>，反正我看不懂 qaq。</p>
<h1 id="2-第一种理解">2. 第一种理解</h1>
<h2 id="20-核心思想">2.0. 核心思想</h2>
<p>在讲算法之前，先给出它的核心思想：</p>
<ul>
<li>令我们想求的值为 <span class="math inline">\(f(c)\)</span>，我们通过对 <span class="math inline">\(f\)</span> 的解析式的处理形成一个新的函数 <span class="math inline">\(g\)</span>，使得新的函数 <span class="math inline">\(g\)</span> 仍可快速计算极值和极值点，且其极值点恰为 <span class="math inline">\((c,g(c))\)</span>，再利用 <span class="math inline">\(f\)</span> 和 <span class="math inline">\(g\)</span> 的关系反推 <span class="math inline">\(f(c)\)</span>。</li>
</ul>
<p>听着很神奇，但先记好这个核心思想。</p>
<h2 id="21-算法流程">2.1. 算法流程</h2>
<p>我们开始了，首先画出 <span class="math inline">\(f\)</span> 的图像，显然它是一个离散的凸壳，接下来我们均考虑 <span class="math inline">\(f\)</span> 下凸的情况：</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/579mt68e.png" alt="f" loading="lazy"></p>
<p>此时我们要求可以快速求出其最小值点，记此时的最小值点为 <span class="math inline">\(m\)</span>。如图，画出 <span class="math inline">\(f\)</span> 的导函数图像 <span class="math inline">\(f'\)</span>，<span class="math inline">\((m,f'(m))\)</span> 与 <span class="math inline">\((m+1,f'(m+1))\)</span> 的连线与 <span class="math inline">\(x\)</span> 轴有交）。<span class="math inline">\(f\)</span> 下凸，<span class="math inline">\(f'\)</span> 是增函数。</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/1e2ronzc.png" alt="f &amp; f'" loading="lazy"></p>
<p>依照概述部分的核心思想，我们考虑如何构造这个 <span class="math inline">\(g\)</span>：首先我们希望最小值点落在 <span class="math inline">\(c\)</span>，怎么办呢？我们从 <span class="math inline">\(g'\)</span> 入手。若希望最小值点落在 <span class="math inline">\(c\)</span>，需要 <span class="math inline">\((c,g'(c))\)</span> 与 <span class="math inline">\((c+1,f'(c+1))\)</span> 的连线与 <span class="math inline">\(x\)</span> 轴有交，不妨令 <span class="math inline">\(g'(c)=0\)</span>。我们让 <span class="math inline">\(f'\)</span> 的图像在垂直方向上运动，由于它是增函数，感性理解，我们总能让它的零点落到 <span class="math inline">\(c\)</span> 上，那这就是我们想要的 <span class="math inline">\(g'\)</span>！</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ybt24yfk.png" alt="f' &amp; g'" loading="lazy"></p>
<p>记垂直向上平移了 <span class="math inline">\(k\)</span> 个单位长度，那么有 <span class="math inline">\(g'(i)=f'(i)+k\)</span>，容易想到 <span class="math inline">\(g(i)=f(i)+ki\)</span> 是一个可能的构造。并且由于 <span class="math inline">\(g'\)</span> 有 <span class="math inline">\(f'\)</span> 平移得到，仍为增函数，所以这个 <span class="math inline">\(g\)</span> 仍具有凸性！凸性是非常好的性质，加上 <span class="math inline">\(g(i)=f(i)+ki\)</span> 的形式非常简单，所以一般也可同 <span class="math inline">\(f\)</span> 一样快速计算极值和极值极值点。</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/mtuc2u0y.png" alt="f &amp; g" loading="lazy"></p>
<p>怎么完成平移的操作呢？我们二分 <span class="math inline">\(k\)</span>。对每次二分的 <span class="math inline">\(mid\)</span>，我们求出此时 <span class="math inline">\(g\)</span> 的极值点 <span class="math inline">\(t\)</span>：</p>
<ul>
<li>若 <span class="math inline">\(t\gt c\)</span>，<span class="math inline">\(f'\)</span> 还需向上平移，<span class="math inline">\(k\)</span> 要增大；</li>
<li>若 <span class="math inline">\(t\lt c\)</span>，<span class="math inline">\(f'\)</span> 还需向下平移，<span class="math inline">\(k\)</span> 要减小。</li>
</ul>
<p>自己对着图像理解一下。</p>
<p>回到 DP 部分，当我们 <code>check</code> 的时候，我们需求出当前 <span class="math inline">\(g\)</span> 的最小值和最小值点，不同的是，现在不限制物品个数了！我们无需物品个数的维度，拿概述部分的例子来说：</p>
<blockquote>
<p><span class="math inline">\(\text{eg.}\)</span> 给定一数列 <span class="math inline">\(a_n\)</span>，要求将其按顺序分割为 <span class="math inline">\(c\)</span> 组，使得每组的代价和最小，其中每组的代价定义为该组内所有数的和的平方。<span class="math inline">\(n,c\le10^5,a_i\ge1\)</span>。</p>
<p>显然有 2D/1D 的 dp：设 <span class="math inline">\(f_{i,j}\)</span> 为前 <span class="math inline">\(i\)</span> 个数分了 <span class="math inline">\(j\)</span> 组的方案，答案即为 <span class="math inline">\(f_{n,c}\)</span>，转移显然，预处理前缀和并滚掉第二维，时间复杂度 <span class="math inline">\(\mathcal{O}(cn^2)\)</span>。斜率优化可做到 <span class="math inline">\(\mathcal{O}(cn)\)</span>，但依旧无法通过。</p>
<p>实际上，这大部分这一类型的题目都有类似的 2D/1D dp 的做法。</p>
</blockquote>
<p>容易证明它是凸的，wqs 二分可以去掉第二维，交由二分来实现。于是这个 dp 从 2D/1D 变成 1D/1D 的，我们成功实现了降维！check 里面直接写这个 dp 即可，至于极值点，转移时记录转移次数即可。</p>
<p>另外，这东西本就可以斜优，所以可以做到 <span class="math inline">\(O(n\log V)\)</span>，其中 <span class="math inline">\(V\)</span> 是二分值域。</p>
<blockquote>
<p><strong>补充说明:</strong></p>
<p>凸壳哪来的导数？</p>
<p>类比导数的定义，我们此处导数均指差分，即 <span class="math inline">\(f'(i)=\Delta_{i}=f(i)-f(i-1)\)</span>，那么此时取到最小值的点的差分为正，且它下一个数的差分为正，自己画图理解一下。但不管怎么样，肯定可以通过平移使得 <span class="math inline">\(g'(c)=0\)</span>。二分的时候，由于我们是 dp 求极值和极值点的，所以无关紧要。</p>
</blockquote>
<p>wqs 二分就讲完了……吗?</p>
<h1 id="3-特殊情况三点共线">3. 特殊情况：三点共线</h1>
<p>考虑下图中<strong>三点共线</strong>的情况，那么有 <span class="math inline">\(f'(c)=f'(b)\)</span>，然后你会惊讶的发现，无论如何平移都有 <span class="math inline">\(f'(c)+k=f'(b)+k\)</span>，即 <span class="math inline">\(a,c,b\)</span> 三点始终共线，夹在中间的 <span class="math inline">\(c\)</span> 不可能取到最小值，怎么都二分不到！</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/qlnz0yv4.png" alt="A particular case." loading="lazy"></p>
<p>我们先二分出最小值点为 <span class="math inline">\(a\)</span> 时的 <span class="math inline">\(g(a)\)</span>，解决方案是：<span class="math inline">\(f(c)=g(a)-kc\)</span>，为啥？先展开：</p>
<p></p><div class="math display">\[f(c)=g(a)-kc=f(a)+ka-kc=f(a)+k(a-c)
\]</div><p></p><p>即：</p>
<p></p><div class="math display">\[f(c)-f(a)=-k\cdot(c-a)
\]</div><p></p><p>这是点斜式！我们接下来只需证明 <span class="math inline">\(k_{AC}=-k\)</span> 即可。</p>
<p>其实非常显然，<span class="math inline">\(f'\)</span> 经过平移的到 <span class="math inline">\(g'\)</span>，且 <span class="math inline">\(g'(c)=0\)</span>，那么就向上平移了 <span class="math inline">\(k=-f'(c)=-k_{AC}\)</span> 个单位长度，于是有 <span class="math inline">\(k_{AC}=-k\)</span>。</p>
<p>怎么实现？找不到 <span class="math inline">\(c\)</span> 时，我们二分出 <span class="math inline">\(c\)</span> 右边可以取到的最接近 <span class="math inline">\(c\)</span> 的点即可。</p>
<p>这个问题启发我们：<span class="math inline">\(k\)</span> 貌似和凸壳上线段的斜率有一定联系，而我们知道凸壳上的斜率是单调的，不同斜率的直线在凸壳上的切点也是单调的，能不能利用这种性质来二分 <span class="math inline">\(k\)</span> 呢？</p>
<p>所以不好意思——还没讲完。</p>
<h1 id="4-再谈算法">4. 再谈算法</h1>
<h2 id="41-第二种理解">4.1. 第二种理解</h2>
<p>实际上大家在网上看到的大部分博客都是这个做法，但我觉得这个做法其实比较难抓住它的动机。</p>
<p>依旧讨论下凸壳。</p>
<p>考虑一条与下凸壳相切的斜率为 <span class="math inline">\(k\)</span> 直线 <span class="math inline">\(l_k\)</span>，记其 <span class="math inline">\(y\)</span> 轴截距为 <span class="math inline">\(b(k)\)</span>，过凸壳上一点 <span class="math inline">\((p,f(p))\)</span>，那么有 <span class="math inline">\(f(p)=kp+b(k)\)</span>。由凸壳相切的性质，我们必然可以找到一个 <span class="math inline">\(k\)</span>，使得与凸壳相切的 <span class="math inline">\(l_k\)</span> 切到点 <span class="math inline">\((c,f(c))\)</span>，这时我们只需求出 <span class="math inline">\(b(k)\)</span> 即可求出 <span class="math inline">\(f(c)\)</span>。</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/le2jy2ym.png" alt="" loading="lazy"></p>
<p>由前文所述的凸壳优秀的<strong>切点单调性</strong>（随斜率单调变化），我们直接二分 <span class="math inline">\(k\)</span>，好好利用这个性质来定位 <span class="math inline">\((c,f(c))\)</span>。对于每个二分出的斜率 <span class="math inline">\(mid\)</span>，我们求出切点的横坐标 <span class="math inline">\(p\)</span>，并用其与 <span class="math inline">\(c\)</span> 的关系判断 <span class="math inline">\(k\)</span> 与 <span class="math inline">\(mid\)</span> 的大小关系：</p>
<ul>
<li>若 <span class="math inline">\(p\lt c\)</span>，此时切点偏左，斜率偏小，<span class="math inline">\(k\gt mid\)</span>；</li>
<li>若 <span class="math inline">\(p\gt c\)</span>，此时切点偏右，斜率偏大，<span class="math inline">\(k\lt mid\)</span>。</li>
</ul>
<p>自己对着图像理解一下。</p>
<p>问题转换为求切点横坐标 <span class="math inline">\(p\)</span>。由相切的性质，<span class="math inline">\(l\)</span> 是所有过凸壳顶点且斜率为 <span class="math inline">\(k\)</span> 的直线中，<span class="math inline">\(y\)</span> 轴截距最小的。又 <span class="math inline">\(b=y-kx\)</span>，于是有 <span class="math inline">\(b(k)=\min\limits_{1\le p\le n}f(p)-kp\)</span>，且其对应的 <span class="math inline">\(p\)</span> 即为切点横坐标。</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/g4j43u5w.png" alt="" loading="lazy"><br>
<img src="https://cdn.luogu.com.cn/upload/image_hosting/9hloe5wo.png" alt="" loading="lazy"></p>
<p>哎，这不跟第一种理解方式中的 <span class="math inline">\(g(i)=f(i)+ki\)</span> 一模一样吗！所以我们也可以快速 dp 求解这个式子，并同样通过记录转移次数求出切点横坐标 <span class="math inline">\(p\)</span>。</p>
<p>最后将二分的结果 <span class="math inline">\(k\)</span> 和其对应的切点横坐标 <span class="math inline">\(c\)</span> 和截距 <span class="math inline">\(b(k)\)</span> 代回 <span class="math inline">\(f(p)=kp+b(k)\)</span> 即可求出 <span class="math inline">\(f(c)\)</span>。</p>
<h2 id="42-再论三点共线">4.2. 再论三点共线</h2>
<p>返回来从这个角度考虑三点共线的情况。此时找不到 <span class="math inline">\(c\)</span>，考虑 <span class="math inline">\(c\)</span> 右边可以取到的最接近 <span class="math inline">\(c\)</span> 的点 <span class="math inline">\(a\)</span>。由于 <span class="math inline">\(a\)</span> 在 <span class="math inline">\(c\)</span> 右边，所以我们二分出切点在 <span class="math inline">\(a\)</span> 时的最小斜率，这对应的切线 <span class="math inline">\(l_k\)</span> 即为直线 <span class="math inline">\(AC\)</span>。</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/sav1k90e.png" alt="A particular case." loading="lazy"></p>
<p>由于过 <span class="math inline">\(c\)</span>，此时的 <span class="math inline">\(k\)</span> 和 <span class="math inline">\(b(k)\)</span> 都使用与 <span class="math inline">\(c\)</span>，于是有 <span class="math inline">\(f(c)=kc+b(k)\)</span>。</p>
<h2 id="43-更多细节">4.3. 更多细节</h2>
<p>还没讲完，还有细节。</p>
<p>对三点共线情况的研究同样很有启发性。我们说 “二分出切点在 <span class="math inline">\(c\)</span> 右边可以取到的最接近 <span class="math inline">\(c\)</span> 的点 <span class="math inline">\(a\)</span> 时的最小斜率”，可以发现，当我们二分的 <span class="math inline">\(k\)</span> 恰为凸壳上相邻两个点的连线的斜率时，<strong>切线</strong> <span class="math inline">\(\bm{l_k}\)</span> <strong>同时切到的时凸壳的一条边而非一个点</strong>，问题就来了：它同时切到了两个（及以上，多点共线时）点，那我们应认为它对应的是哪个切点呢？这关系到我们二分调整范围的过程！</p>
<p>这是 wqs 二分最<s>烦</s>容易出错的地方，关键在于要<strong>钦定一个偏序关系</strong>。比如说，前文我们需要 “二分出切点在 <span class="math inline">\(c\)</span> 右边可以取到的最接近 <span class="math inline">\(c\)</span> 的点 <span class="math inline">\(a\)</span> 时的最小斜率”，我们就钦定将这条线的斜率的贡献算到（最）靠右的点内。实现时，在 dp 值相等时取选择物品个数更大的那个（dp 值和结构体实现），写二分的时候想好范围如何更新。</p>
<p>另外，大部分题目的 <span class="math inline">\(f\)</span> 为整数，所以相邻两点连线的斜率/导函数（差分）也为整数，在钦定偏序关系后必然可以二分到整数 <span class="math inline">\(k\)</span>。对于需要实数二分的题目，由于每个点对应的斜率时一个区间，所以设定好精度，谨防 TLE。</p>
<h1 id="5-例题">5. 例题</h1>
<p>由于笔者涉猎不深，仅能给出一些经典例题了。</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1484" target="_blank" rel="noopener nofollow">P1484 种树</a>：前缀 <span class="math inline">\(\max\)</span> 优化，比例题简单。</li>
<li><a href="https://www.luogu.com.cn/problem/P4983" target="_blank" rel="noopener nofollow">P4983 忘情</a>：和例题几乎一样。</li>
<li><a href="https://www.luogu.com.cn/problem/P5308" target="_blank" rel="noopener nofollow">P5308 [COCI 2018/2019 #4] Akvizna</a></li>
<li><a href="https://www.luogu.com.cn/problem/P5896" target="_blank" rel="noopener nofollow">P5896 [IOI 2016] aliens</a></li>
</ul>
<h1 id="6-参考资料">6. 参考资料</h1>
<ul>
<li><a href="https://oi-wiki.org/dp/opt/wqs-binary-search/" target="_blank" rel="noopener nofollow">OI Wiki - wqs 二分</a></li>
<li><a href="https://www.cnblogs.com/alex-wei/p/DP_Involution.html" target="_blank">DP 优化方法大杂烩 I. - by qAlex_Weiq</a></li>
<li><a href="https://www.cnblogs.com/flashhu/p/9480669.html" target="_blank">DP的各种优化（动态规划，决策单调性，斜率优化，带权二分，单调栈，单调队列）- by Flash_Hu</a></li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.18125" data-date-updated="2025-07-24 21:26">2025-07-24 17:05</span>&nbsp;
<a href="https://www.cnblogs.com/godmoo">godmoo</a>&nbsp;
阅读(<span id="post_view_count">97</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18999521);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18999521', targetLink: 'https://www.cnblogs.com/godmoo/p/18999521', title: '学习笔记/DP：wqs 二分概述' })">举报</a>
</div>
        