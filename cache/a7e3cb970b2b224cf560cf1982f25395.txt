
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18801500" title="发布于 2025-03-31 08:51">
    <span role="heading" aria-level="2">『Plotly实战指南』--饼图绘制高级篇</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在数据可视化的世界里，饼图是最直观的展示比例关系的工具之一。</p>
<p>然而，传统的静态饼图已经无法满足现代数据分析的需求。<code>Plotly</code>作为一款强大的可视化库，不仅提供了饼图丰富的基础功能，还支持交互效果和动态更新等高级特性。</p>
<p>本文我们将深入探讨<code>Plotly</code>在饼图绘制上的高级功能，包括交互效果和动态更新等技巧。</p>
<p>这些功能在以下场景中尤为重要：</p>
<ol>
<li><strong>仪表盘交互</strong>：用户需要通过点击、悬停等操作深入了解数据</li>
<li><strong>数据探索工具</strong>：动态更新帮助用户实时分析不同数据集</li>
<li><strong>动态报告展示</strong>：动态交互性让报告更具吸引力和专业性</li>
</ol>
<h1 id="饼图交互效果">饼图交互效果</h1>
<h2 id="点击分离切片">点击分离切片</h2>
<p><code>Plotly</code>允许我们通过点击切片实现分离效果，增强用户与图表的交互体验。</p>
<p>但是，为了实现点击切片分离的效果，需要使用<code>Plotly</code>的事件处理机制，通常结合<code>Dash</code>框架来实现。</p>
<pre><code class="language-python">import dash
from dash import dcc, html, Input, Output, State
import plotly.graph_objects as go

app = dash.Dash(__name__)

# 基础数据
labels = ["A", "B", "C", "D"]
values = [25, 20, 30, 25]
pull = [0, 0, 0, 0]  # 初始状态无偏移

app.layout = html.Div(
    [
        dcc.Graph(
            id="interactive-pie-chart",
            figure={
                "data": [
                    go.Pie(
                        labels=labels,
                        values=values,
                        pull=pull,
                        textinfo="percent+label",
                        insidetextorientation="radial",
                        marker=dict(line=dict(color="#000000", width=2)),
                    )
                ]
            },
            clickData=None,  # 初始点击数据
        ),
        html.Div(id="output-container"),
    ]
)


@app.callback(
    Output("interactive-pie-chart", "figure"),
    Input("interactive-pie-chart", "clickData"),
    State("interactive-pie-chart", "figure"),
)
def update_pull(clickData, figure):
    """更新点击切片的偏移量"""
    if clickData:
        point = clickData["points"][0]
        index = labels.index(point["label"])

        # 更新pull数组
        new_pull = [0.1 if i == index else 0 for i in range(len(values))]

        # 更新图表
        figure["data"][0]["pull"] = new_pull
        figure["data"][0]["marker"]["colors"] = [
            "#ff9999" if i == index else "#636efa" for i in range(len(values))
        ]

    return figure


if __name__ == "__main__":
    app.run(debug=True)

</code></pre>
<p>运行效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250331084734741-334456775.gif" alt="" loading="lazy"></p>
<p>其中，代码主要涉及的内容包括：</p>
<ol>
<li><strong>Dash框架</strong>：使用<code>Dash</code>框架来创建交互式<code>Web</code>应用。</li>
<li><strong>clickData</strong>：用于捕获用户点击事件的数据。它包含点击切片的详细信息</li>
<li><strong>回调函数</strong>：<code>@callback</code>装饰器，监听图表的点击事件。点击切片时，回调函数会被触发</li>
<li><strong>更新pull属性</strong>：在回调函数中，根据点击的切片索引更新<code>pull</code>数组，从而实现切片分离效果</li>
<li><strong>高亮显示</strong>：通过更新<code>marker.colors</code>属性，使被点击的切片高亮显示</li>
</ol>
<h2 id="悬停提示">悬停提示</h2>
<p><strong>悬停效果</strong>是提升用户体验的关键，<code>Plotly</code>提供了强大的自定义能力。</p>
<p>使用<code>%{variable}</code>语法映射数据字段，通过<code>customdata</code>传递额外信息，同时结合<code>hovertemplate</code>实现复杂提示。</p>
<pre><code class="language-python"># 创建饼图
fig = go.Figure(
    data=[
        go.Pie(
            labels=["A", "B", "C"],
            values=[30, 40, 30],
            customdata=["上升", "下降", "上升"],
        ),
    ]
)

fig.update_traces(
    hovertemplate="类别: %{label}&lt;br&gt;"
    + "数值: %{value}&lt;br&gt;"
    + "占比: %{percent}&lt;br&gt;"
    + "趋势: %{customdata}&lt;extra&gt;&lt;/extra&gt;"
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250331084734742-1465296174.gif" alt="" loading="lazy"></p>
<h1 id="动态饼图">动态饼图</h1>
<p><strong>动态更新</strong>是现代数据可视化的核心能力，<code>Plotly</code>结合<code>Dash</code>框架可以轻松实现。</p>
<pre><code class="language-python">import dash
from dash import dcc, html, Input, Output
import plotly.graph_objects as go

app = dash.Dash(__name__)

app.layout = html.Div([
    dcc.Input(id='input-values', type='text', value='25,20,30,25'),
    html.Button('更新图表', id='update-button'),
    dcc.Graph(id='dynamic-pie-chart')
])

@app.callback(
    Output('dynamic-pie-chart', 'figure'),
    Input('update-button', 'n_clicks'),
    Input('input-values', 'value')
)
def update_pie_chart(n_clicks, values_str):
    values = list(map(int, values_str.split(',')))
    fig = go.Figure(go.Pie(labels=labels, values=values))
    return fig

if __name__ == '__main__':
    app.run(debug=True)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250331084734755-1461282720.gif" alt="" loading="lazy"></p>
<p>在这个示例中，用户可以通过输入一个数字来动态更新饼图的数据。</p>
<p>当用户输入新的值时，<code>update_pie</code>函数会被触发，它会根据新的数据重新生成饼图。</p>
<p>我们还可以进一步扩展这个功能，实现多级联动筛选、动态排序和颜色映射更新等，让饼图更加智能化和个性化。</p>
<h1 id="总结">总结</h1>
<p>通过本文的深入探讨，我们掌握了<code>Plotly</code>在饼图绘制上的高级技巧：</p>
<ol>
<li>实现了点击分离、悬停提示等交互效果</li>
<li>开发了基于用户输入的动态更新功能</li>
</ol>
<p>这些高级功能不仅提升了数据可视化的表现力，还增强了用户的交互体验。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.48544998724189814" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-31 08:51">2025-03-31 08:51</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">72</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18801500" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18801500);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18801500', targetLink: 'https://www.cnblogs.com/wang_yb/p/18801500', title: '『Plotly实战指南』--饼图绘制高级篇' })">举报</a>
</div>
        