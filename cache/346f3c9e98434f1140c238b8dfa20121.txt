
    <a name="top"></a>
    <h2><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/jyzhao/p/18791288/oracle-ai-ying-yong-dellm-mo-xing-dian-xing-pei-zh" title="发布于 2025-03-25 14:22">
    <span role="heading" aria-level="2">Oracle AI应用的LLM模型典型配置</span>
    

</a>
</h2>
    <small>
<span id="post-date" data-last-update-days="0.5045106282685186" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-25 14:23">2025-03-25 14:22</span>&nbsp;
<a href="https://www.cnblogs.com/jyzhao">AlfredZhao</a>&nbsp;
阅读(<span id="post_view_count">82</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18791288" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18791288);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18791288', targetLink: 'https://www.cnblogs.com/jyzhao/p/18791288/oracle-ai-ying-yong-dellm-mo-xing-dian-xing-pei-zh', title: 'Oracle AI应用的LLM模型典型配置' })">举报</a>
</small>
    <div class="entry">
        <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>最近在做一些基于Oracle的一些AI应用测试工作，AI肯定离不开配置LLM相关，虽然是简单配置类，但实际还是遇到一些卡点，记录下来供今后参考。</p>
<ul>
<li>1.配置Embedding模型</li>
<li>2.特殊语法传参JSON格式</li>
<li>3.测试Embedding有效</li>
<li>4.修改MAX_STRING_SIZE</li>
<li>5.配置为DeepSeek的LLM</li>
<li>6.测试Chat和Showsql有效</li>
</ul>
<h2 id="1配置embedding模型">1.配置Embedding模型</h2>
<p>在同事Hysun的Text2SQL RAG开源项目中，提供了一些非常实用的配置方法，方便大家使用，本文就以此开源项目为例。</p>
<p>我这里Embedding模型暂时选择的是 SiliconFlow 平台提供的 BAAI/bge-large-zh-v1.5 这个模型：</p>
<pre><code class="language-sql">--使用 SiliconFlow Embedding：
BEGIN
  CUSTOM_SELECT_AI.CREATE_EMBEDDING_CONF(
        p_conf_id     =&gt;    'EMBEDDING',
		p_provider    =&gt;    'OpenAI',
        p_model       =&gt;    'BAAI/bge-large-zh-v1.5',
		p_endpoint    =&gt;    'https://api.siliconflow.cn/v1/embeddings',
		p_credential  =&gt;    'ALFRED_SILICON_FLOW'
	);
END;
/
</code></pre>
<p>起初我直接把API Key写到了p_credential中，发现不行，但是换成自定义的<code>ALFRED_SILICON_FLOW</code>后，通过dbms_vector.create_credential导入时，起初以为直接传JSON格式的参数，结果是不允许的。</p>
<p>另外，注意这里<code>p_conf_id</code>的名字，以后要用到，开始我没意识到，咨询同事后才知晓这个对应关系。后来同事为了大家更好理解，还修改了帮助文档，明确做了提示。</p>
<h2 id="2特殊语法传参json格式">2.特殊语法传参JSON格式</h2>
<p>翻阅官方文档，找到这种特殊的语法，专门用于传入JSON格式。</p>
<pre><code class="language-sql">--特殊的语法，传入JSON格式方法
declare
  jo json_object_t;
begin
  jo := json_object_t();
  jo.put('access_token', 'sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx');
  dbms_vector.create_credential(
    credential_name   =&gt; 'ALFRED_SILICON_FLOW',
    params            =&gt; json(jo.to_string));
end;
/
</code></pre>
<p>API Key已脱敏，按照你的Key实际替换即可。</p>
<p>配置好之后，可以通过这张表查询到：</p>
<pre><code class="language-sql">select * from CUSTOM_SELECT_AI_EMBEDDING_CONF;
</code></pre>
<h2 id="3测试embedding有效">3.测试Embedding有效</h2>
<p>使用提供的测试用例来测试Embedding有效性：</p>
<pre><code class="language-sql">--EMBEDDING接口 - 文本转向量
select CUSTOM_SELECT_AI.EMBEDDING(
    p_text =&gt; '将文本转成向量',
    p_embedding_conf =&gt; 'EMBEDDING'
);
</code></pre>
<p>注意这个<code>p_embedding_conf</code>需要和之前创建时的<code>p_conf_id</code>对应，后面使用都有这个对应关系，需要特别注意下。</p>
<p>测试返回报错：</p>
<pre><code class="language-sql">ORA-06502: PL/SQL：值或转换错误 :  字符串缓冲区太小
ORA-06512: 在 line 1

https://docs.oracle.com/error-help/db/ora-06502/06502. 00000 -  "PL/SQL: value or conversion error%s"
*Cause:    An arithmetic, numeric, string, conversion, or constraint error
           occurred. For example, this error occurs if you attempt to
           assign the value NULL to a variable declared NOT NULL, or if you
           attempt to assign an integer greater than 99 to a variable
           declared NUMBER(2).
*Action:   To resolve the issue, change the data, the way the data is
           manipulated, or the data variable declaration.
*Params:   1) error_info
           occurred.
</code></pre>
<h2 id="4修改max_string_size">4.修改MAX_STRING_SIZE</h2>
<p>上面的报错很明显，文档中也有提到需要设置MAX_STRING_SIZE为EXTENDED才可以。<br>
修改的参考步骤（生产环境请慎重评估可行性）：</p>
<pre><code class="language-sql">--1.查看参数当前值
SHOW PARAMETER MAX_STRING_SIZE;

--2.设置MAX_STRING_SIZE=EXTENDED
ALTER SYSTEM SET MAX_STRING_SIZE=EXTENDED SCOPE=SPFILE;

--3.关闭数据库
SHUTDOWN IMMEDIATE;

--4.启动upgrade模式，执行脚本
STARTUP UPGRADE;
@$ORACLE_HOME/rdbms/admin/utl32k.sql

--5.重启数据库
SHUTDOWN IMMEDIATE;
STARTUP;

--6.查询MAX_STRING_SIZE参数已修改
SHOW PARAMETER MAX_STRING_SIZE;
</code></pre>
<p>再次运行Embedding测试用例，成功返回结果。</p>
<h2 id="5配置为deepseek的llm">5.配置为DeepSeek的LLM</h2>
<p>主要用到两个CUSTOM_SELECT_AI.CREATE_PROVIDER、CUSTOM_SELECT_AI.CREATE_PROFILE。</p>
<pre><code class="language-sql">----- Create service provider，deepseek
BEGIN
  CUSTOM_SELECT_AI.CREATE_PROVIDER(
		p_provider    =&gt;    'OpenAI',
		p_endpoint    =&gt;    'https://api.deepseek.com/chat/completions',
		p_auth        =&gt;    'sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
	);
END;
/

----- Create profile
BEGIN
	CUSTOM_SELECT_AI.CREATE_PROFILE(
      p_profile_name    =&gt;'HKE_DEMO',
      p_description     =&gt; 'SelectAI DEMO for HKE',
      p_attributes      =&gt; '{
          "provider": "OpenAI",
          "model" : "deepseek-chat",
          "object_list": [{"owner": "TPCH", "name": "HKE_PROD_DEFECT"},
                          {"owner": "TPCH", "name": "HKE_PROD_OUT_YIELD_QTY"}
                          ]
      }'
    );
END;
/
</code></pre>
<p>创建好之后可以查询到：</p>
<pre><code class="language-sql">--创建好的PROVIDER和PROFILE可以查询表：
select * from TPCH.CUSTOM_SELECT_AI_PROVIDERS;
select * from TPCH.CUSTOM_SELECT_AI_PROFILES;
</code></pre>
<p>配置错误或不再需要，可以这样删除掉：</p>
<pre><code class="language-sql">--删除不再需要的PROVIDER和PROFILE：
BEGIN
  CUSTOM_SELECT_AI.DROP_PROVIDER(
		p_provider    =&gt;    'OpenAI'
	);
END;
/

BEGIN
  CUSTOM_SELECT_AI.DROP_PROFILE(
		 p_profile_name    =&gt;'HKE_DEMO'
	);
END;
/
</code></pre>
<h2 id="6测试chat和showsql有效">6.测试Chat和Showsql有效</h2>
<p>按照开源项目文档中的说明，测试Chat和Showsql功能：</p>
<pre><code class="language-sql">--CHAT接口 - 直接与 LLM 聊天
select CUSTOM_SELECT_AI.CHAT(
    p_profile_name  =&gt; 'HKE_DEMO',
    p_user_text     =&gt; '你是谁？',
    p_system_text   =&gt; '你是一个积极的、充满正能量的人工智能助手。'
);
</code></pre>
<p>注意：这里Chat配置好LLM应该就可以正常返回，如果报错ORA-29273，如下图所示：</p>
<ul>
<li>4-sys.utl_http.png</li>
</ul>
<p>就需要放开对应数据库用户对具体或所有外部的访问：</p>
<pre><code class="language-sql">BEGIN
    DBMS_NETWORK_ACL_ADMIN.APPEND_HOST_ACE(
        host =&gt; '*',  -- 或者指定具体的域名，如 'api.example.com'
        ace  =&gt; xs$ace_type(privilege_list =&gt; xs$name_list('connect'),
                            principal_name =&gt; 'TPCH', 
                            principal_type =&gt; xs_acl.ptype_db));
END;
/
</code></pre>
<p>继续测试Showsql功能：</p>
<pre><code class="language-sql">--SHOWSQL接口 - 自然语言生成SQL
select CUSTOM_SELECT_AI.SHOWSQL(
  	p_profile_name =&gt; 'HKE_DEMO',
    p_embedding_conf =&gt; 'EMBEDDING',
  	p_user_text =&gt; '查询符合条件的各YIELD小等级占比（即YIELD_QTY之和/OUT_QTY之和），条件为：公司名称为COMPANY1，工厂名称为FACTORYNAME1，产品名称为PRODUCT1。占比用百分比表示并排序，用中文别名返回。'
);
</code></pre>
<p>SHOWSQL需要按Demo要求导入成功表数据并向量化才OK。这里的<code>p_embedding_conf</code>要注意和之前配置的Embedding名字一样。</p>

</div>
<div id="MySignature" role="contentinfo">
    AlfredZhao©版权所有「从Oracle起航，领略精彩的IT技术。」
</div>
<div class="clear"></div>

        <div class="clear"></div>
        
</div>
    <ul class="postmetadata">
        <vc:categories-tags blog-app="jyzhao" blog-id="186567" post-id="18791288"></vc:categories-tags>
    </ul>
