
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/pains/p/18686456" title="发布于 2025-01-22 17:07">
    <span role="heading" aria-level="2">dotnet CultureInfo遇到欧洲如俄文小数点是逗号想转点的解决办法</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>如题，当CultureInfo是俄文（ru-RU）时，浮点数中的点是用逗号表达的，如1.1会显示成1,1，造成很多的麻烦，当然如果全系统中全部采纳逗号作为浮点也没问题，只要用户接受就可以，但有时需要继续用点号，那么解决办法如下。</p>
<h1 id="1-修改defaultthreadcurrentculture">1. 修改DefaultThreadCurrentCulture</h1>
<p>我们知道CultureInfo.CurrentCulture静态变量是跟踪线程的，每个现场都有独立的CultureInfo.CurrentCulture值，它会决定当前线程的文化区域，包括时间、数字等的显示格式，这一步处理就会解决大部分浮点是逗号的问题。</p>
<pre><code class="language-csharp">var cultureInfo = new CultureInfo("ru-RU");
cultureInfo.NumberFormat.NumberDecimalSeparator = ".";
CultureInfo.DefaultThreadCurrentCulture = CultureInfo.ReadOnly(cultureInfo);
CultureInfo.DefaultThreadCurrentUICulture = CultureInfo.ReadOnly(cultureInfo);
</code></pre>
<h1 id="2-aspnetcore中间件修改cultureinfo">2. aspnetcore中间件修改CultureInfo</h1>
<p>这一步是今天想写这个文章的原因，因为找了很长时间才发现是这里导致的问题，虽然经过上面一步的修改，我们大部分业务代码不会再用逗号了，但是当我们在aspnetcore中启用了RequestLocalizationMiddleware，就会导致例如返回json时浮点数tostring或者拼接等还是逗号的问题。<br>
修改的办法也很简单，启动时加如下代码就可以。</p>
<pre><code class="language-csharp">services.Configure&lt;RequestLocalizationOptions&gt;(options=&gt;{
  var cultures = options.SupportedCultures.Where(e =&gt; e.NumberFormat.NumberDecimalSeparator != ".").ToList();
  foreach(var c in cultures)
  {
    c.NumberFormat.NumberDecimalSeparator = ".";
  }
});
</code></pre>
<p>原因是因为aspnetcore中的这个中间件代码导致的，为了说明问题简化了代码（代码来自微软官方github），注意Invoke和SetCurrentThreadCulture方法是关键问题所在。</p>
<pre><code class="language-csharp">// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System.Globalization;
using System.Linq;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Microsoft.Extensions.Primitives;

namespace Microsoft.AspNetCore.Localization;

/// &lt;summary&gt;
/// Enables automatic setting of the culture for &lt;see cref="HttpRequest"/&gt;s based on information
/// sent by the client in headers and logic provided by the application.
/// &lt;/summary&gt;
public class RequestLocalizationMiddleware
{
    private const int MaxCultureFallbackDepth = 5;

    private readonly RequestDelegate _next;
    private readonly RequestLocalizationOptions _options;
    private readonly ILogger _logger;

    /// &lt;summary&gt;
    /// Creates a new &lt;see cref="RequestLocalizationMiddleware"/&gt;.
    /// &lt;/summary&gt;
    /// &lt;param name="next"&gt;The &lt;see cref="RequestDelegate"/&gt; representing the next middleware in the pipeline.&lt;/param&gt;
    /// &lt;param name="options"&gt;The &lt;see cref="RequestLocalizationOptions"/&gt; representing the options for the
    /// &lt;see cref="RequestLocalizationMiddleware"/&gt;.&lt;/param&gt;
    /// &lt;param name="loggerFactory"&gt;The &lt;see cref="ILoggerFactory"/&gt; used for logging.&lt;/param&gt;
    public RequestLocalizationMiddleware(RequestDelegate next, IOptions&lt;RequestLocalizationOptions&gt; options, ILoggerFactory loggerFactory)
    {
        ArgumentNullException.ThrowIfNull(options);

        _next = next ?? throw new ArgumentNullException(nameof(next));
        _logger = loggerFactory?.CreateLogger&lt;RequestLocalizationMiddleware&gt;() ?? throw new ArgumentNullException(nameof(loggerFactory));
        _options = options.Value;
    }

    /// &lt;summary&gt;
    /// Invokes the logic of the middleware.
    /// &lt;/summary&gt;
    /// &lt;param name="context"&gt;The &lt;see cref="HttpContext"/&gt;.&lt;/param&gt;
    /// &lt;returns&gt;A &lt;see cref="Task"/&gt; that completes when the middleware has completed processing.&lt;/returns&gt;
    public async Task Invoke(HttpContext context)
    {
        ArgumentNullException.ThrowIfNull(context);

        var requestCulture = _options.DefaultRequestCulture;
...
        if (_options.RequestCultureProviders != null)
        {
            foreach (var provider in _options.RequestCultureProviders)
            {
...
                CultureInfo? cultureInfo = null;
                CultureInfo? uiCultureInfo = null;
                if (_options.SupportedCultures != null)
                {
                    cultureInfo = GetCultureInfo(
                        cultures,
                        _options.SupportedCultures,
                        _options.FallBackToParentCultures);

                    if (cultureInfo == null)
                    {
                        _logger.UnsupportedCultures(provider.GetType().Name, cultures);
                    }
                }
...
                cultureInfo ??= _options.DefaultRequestCulture.Culture;
                uiCultureInfo ??= _options.DefaultRequestCulture.UICulture;

                var result = new RequestCulture(cultureInfo, uiCultureInfo);
                requestCulture = result;
                winningProvider = provider;
                break;
            }
        }
...
        SetCurrentThreadCulture(requestCulture);
...
        await _next(context);
    }

    private static void SetCurrentThreadCulture(RequestCulture requestCulture)
    {
        CultureInfo.CurrentCulture = requestCulture.Culture;
        CultureInfo.CurrentUICulture = requestCulture.UICulture;
    }
...
}
</code></pre>
<h1 id="完">完</h1>

</div>
<div id="MySignature" role="contentinfo">
    <div id="AllanboltSignature">
<p id="PSignature" style="border-top-color: #e0e0e0; border-top-width: 1px; border-top-style: dashed; border-right-color: #e0e0e0; border-right-width: 1px; border-right-style: dashed; border-bottom-color: #e0e0e0; border-bottom-width: 1px; border-bottom-style: dashed; border-left-color: #e0e0e0; border-left-width: 1px; border-left-style: dashed; padding-top: 10px; padding-right: 10px; padding-bottom: 10px; padding-left: 80px; background-image: url(https://images.cnblogs.com/cnblogs_com/pains/109838/r_copyright.png); background-attachment: initial; background-origin: initial; background-clip: initial; font-family: 微软雅黑; font-size: 11px; background-color: #e5f1f4; background-position: 1% 50%; background-repeat: no-repeat no-repeat; ">
作者：<a href="http://pains.cnblogs.com/" target="_blank">Rick Carter</a>
<br>
出处：<a href="http://pains.cnblogs.com/" target="_blank">http://pains.cnblogs.com/</a>
<br>
本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。
</p>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="7.213074874228009" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-22 17:08">2025-01-22 17:07</span>&nbsp;
<a href="https://www.cnblogs.com/pains">Rick Carter</a>&nbsp;
阅读(<span id="post_view_count">29</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18686456" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18686456);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18686456', targetLink: 'https://www.cnblogs.com/pains/p/18686456', title: 'dotnet CultureInfo遇到欧洲如俄文小数点是逗号想转点的解决办法' })">举报</a>
</div>
        