
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/GuijiH6/p/18655090" title="发布于 2025-01-06 17:10">
    <span role="heading" aria-level="2">DVWA靶场JavaScript Attacks漏洞low(低)，medium(中等)，high(高)，impossible(不可能的)所有级别通关教程</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="javascript-attacks-前端攻击">JavaScript Attacks (前端攻击)</h1>
<p><strong>JavaScript Attacks（前端攻击）</strong>漏洞通常涉及利用Web应用程序中的安全漏洞，特别是在JavaScript代码的使用和实现上，从而对用户或系统造成损害</p>
<h2 id="low">low</h2>
<p>先根据提示输入success，回显说明存在token</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250101151132501.png" alt="" loading="lazy"></p>
<p>抓包看看，可以发现存在token值，经过多次尝试，发现token值不会变化，也就是说每次提交使用的token值都是无效的，通过对源码的审计，发现token的生成基于<strong>generate_token()</strong>函数里的<strong>md5(rot13(’phrase‘)</strong></p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250101151246545.png" alt="" loading="lazy"></p>
<p>生成token</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250101151711570.png" alt="" loading="lazy"></p>
<p>在burp里修改token重新提交success</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250101151646071.png" alt="" loading="lazy"></p>
<h3 id="源码审计">源码审计</h3>
<p>核心代码：</p>
<pre><code class="language-php">  function rot13(inp) {
		return inp.replace(/[a-zA-Z]/g,function(c){return String.fromCharCode((c&lt;="Z"?90:122)&gt;=(c=c.charCodeAt(0)+13)?c:c-26);});
	}

	function generate_token() {
		var phrase = document.getElementById("phrase").value;
		document.getElementById("token").value = md5(rot13(phrase));
	}

	generate_token();
</code></pre>
<p>定义了两个函数，token主要是由输入的值md5(rot13)加密的</p>
<h2 id="medium">medium</h2>
<p>与low级别操作方法基本一致，查看源码发现token基于<strong>do_elsesomething("XX")</strong>函数反转控制</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250101152607455.png" alt="" loading="lazy"></p>
<p>抓包发现token是被反转的，可以手动修改</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250101152703495.png" alt="" loading="lazy"></p>
<p>修改成功</p>
<h3 id="源码审计-1">源码审计</h3>
<p>核心代码：</p>
<pre><code class="language-php">function do_something(e)
{for(var t="",n=e.length-1;n&gt;=0;n--)t+=e[n];return t}
setTimeout(function()
           {do_elsesomething("XX")},300);
function do_elsesomething(e)
{document.getElementById("token").value=do_something(e+document.getElementById("phrase").value+"XX")}
</code></pre>
<p>do_elsesomething利用这个函数进行反编码，将输入结果反序</p>
<h2 id="high">high</h2>
<p>步骤和上面没什么区别，查看源码发现是js混淆，在这个网站还原一下<a href="http://deobfuscatejavascript.com" target="_blank" rel="noopener nofollow">http://deobfuscatejavascript.com/</a>，找出关键部分</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250101153440682.png" alt="" loading="lazy"></p>
<p>由于执行 token_part_2("XX") 有 300 毫秒延时，所以 token_part_1("ABCD", 44) 会被先执行，而 token_part_3() 则是和提交按钮的 click 事件一起执行，控制台执行</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250101153335965.png" alt="" loading="lazy"></p>
<p>然后输入success提交</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250101153316468.png" alt="" loading="lazy"></p>
<h3 id="源码审计-2">源码审计</h3>
<p>看核心代码：</p>
<p>执行 token_part_2("XX") 有 300 毫秒延时，所以 token_part_1("ABCD", 44) 会被先执行，而 token_part_3() 则是和提交按钮的 click 事件一起执行</p>
<pre><code class="language-php">function do_something(e) {
    for (var t = "", n = e.length - 1; n &gt;= 0; n--) t += e[n];
    return t
}
function token_part_3(t, y = "ZZ") {
    document.getElementById("token").value = sha256(document.getElementById("token").value + y)
}
function token_part_2(e = "YY") {
    document.getElementById("token").value = sha256(e + document.getElementById("token").value)
}
function token_part_1(a, b) {
    document.getElementById("token").value = do_something(document.getElementById("phrase").value)
}
document.getElementById("phrase").value = "";
setTimeout(function() {
    token_part_2("XX")
}, 300);
document.getElementById("send").addEventListener("click", token_part_3);
token_part_1("ABCD", 44);
</code></pre>
<h2 id="impossible">impossible</h2>
<p>You can never trust anything that comes from the user or prevent them from messing with it and so there is no impossible level.<br>
你永远不能相信来自用户的任何内容或阻止他们弄乱它，所以没有不可能的水平。</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250101153520248.png" alt="" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.045317406185185184" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-06 17:11">2025-01-06 17:10</span>&nbsp;
<a href="https://www.cnblogs.com/GuijiH6">H轨迹H</a>&nbsp;
阅读(<span id="post_view_count">21</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18655090" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18655090);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18655090', targetLink: 'https://www.cnblogs.com/GuijiH6/p/18655090', title: 'DVWA靶场JavaScript Attacks漏洞low(低)，medium(中等)，high(高)，impossible(不可能的)所有级别通关教程' })">举报</a>
</div>
        