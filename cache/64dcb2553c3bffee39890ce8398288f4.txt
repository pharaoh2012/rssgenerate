
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/minuhy/p/18852826" title="发布于 2025-04-29 11:28">
    <span role="heading" aria-level="2">【Linux】Linux内核模块开发</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="linux内核模块开发">Linux内核模块开发</h1>
<h2 id="零关于">零、关于</h2>
<h3 id="1概述">1、概述</h3>
<p>最近在学习Linux相关的东西，学习了U-Boot的编译，Linux的编译，能够在开发板上运行自己编译的U-Boot和Linux了，那么接下来就是在自己编译的Linux上做应用级或者系统级的开发了。本文以字符设备驱动为例介绍如何开发Linux内核的模块，包括静态编译、动态加载和模块之间的依赖等内容。<br>
若要继续实践下面的内容，需要以你能够自己编译Linux内核为前提。</p>
<h3 id="2内核模块">2、内核模块</h3>
<p>Linux内核模块是用于扩展内核功能的一些代码。本质上是<code>.ko</code>格式的独立目标文件，内核模块通过与内核链接，实现对硬件驱动、文件系统、网络协议等功能的灵活扩展。<br>
内核模块分为设备驱动程序、文件系统模块、网络协议模块、网络服务模块、硬件架构与系统支持模块、内核子系统扩展模块和特殊功能模块等类型，我们可以针对某个部分对内核进行扩展。</p>
<h3 id="3处理方式">3、处理方式</h3>
<p>在Linux中有两种内核模块的处理方式，一种是静态编译，另一种是动态加载。<br>
其中，静态编译是指我们在编译Linux时把我们的模块代码一起编译进系统可执行文件中去，使其成为内核不可分割的一部分。这样做的好处是在Linux启动时我们的代码就被加载到Linux内核系统中运行了，而且不用生成另外的模块文件，方便分发。但是缺点是我们需要对内核模块代码进行改动时需要重新编译Linux，内核运行期间也无法单独卸载或更新我们的内核模块，这样不方便随时修改。<br>
而动态加载则是指我们的内核模块代码不会与Linux内核代码一起编译，而是另外再单独编译。这样会生成一个后缀为<code>.ko</code>（Kernel Object）的内核模块文件。我们需要使用此内核模块时，可以使用加载内核模块命令（<code>insmod</code>/<code>modprobe</code>）把内核模块加载到Linux内核中，不需要使用此模块时，可以使用卸载内核模块命令（<code>rmmod</code>）把内核模块从Linux内核中卸载，加载操作和卸载操作都无需重启内核。</p>
<h2 id="壹代码模板">壹、代码模板</h2>
<p>在介绍如何编译和使用内核模块之前，我们需要对内核模块的代码有一个大致的了解。</p>
<h3 id="1内核模块代码">1、内核模块代码</h3>
<p>下面的代码模板构建了一个简单的Linux内核模块，在模块加载时会输出<code>hello_yu init</code>消息，在模块卸载时会输出<code>hello_yu exit</code>消息。通过<code>printk</code>函数，这些消息会被记录到内核日志中，可使用<code>dmesg</code>命令查看。<br>
一个简单的内核模块代码文件<code>hello.c</code>内容如下：</p>
<pre><code class="language-c">#include &lt;linux/module.h&gt;
#include &lt;linux/kernel.h&gt;

int __init hello_yu_init(void)
{
    printk("hello_yu init\n");
    return 0;
}

void __exit hello_yu_exit(void)
{
    printk("hello_yu exit\n");
}

MODULE_LICENSE("GPL");
module_init(hello_yu_init);
module_exit(hello_yu_exit);
</code></pre>
<p>下面对其做一个更详细的介绍：</p>
<p>1）、头文件包含</p>
<pre><code class="language-c">#include &lt;linux/module.h&gt;
#include &lt;linux/kernel.h&gt;
</code></pre>
<ul>
<li><code>#include &lt;linux/module.h&gt;</code>：这个头文件定义了构建内核模块所需的函数和宏，像<code>module_init</code>、<code>module_exit</code>以及<code>MODULE_LICENSE</code>等。</li>
<li><code>#include &lt;linux/kernel.h&gt;</code>：此头文件包含了内核编程常用的函数和数据结构，例如<code>printk</code>函数等。</li>
</ul>
<p>2）、模块初始化函数</p>
<pre><code class="language-c">int __init hello_yu_init(void)
{
    printk("hello_yu init\n");
    return 0;
}
</code></pre>
<ul>
<li><code>int __init hello_yu_init(void)</code>：这是模块的初始化函数，当模块被加载到内核时会调用此函数。<code>__init</code>是一个宏，其作用是告知编译器该函数仅在模块初始化时使用，之后就可以释放相关内存。</li>
<li><code>printk("hello_yu init\n");</code>：printk 是内核中的打印函数，功能类似于用户空间的<code>printf</code>。它会把消息输出到内核日志缓冲区，可通过<code>dmesg</code>命令查看。</li>
<li><code>return 0;</code>：返回值为<code>0</code>表明模块初始化成功。若返回非零值，则意味着初始化失败，模块将无法加载。</li>
</ul>
<p>3）、模块退出函数</p>
<pre><code class="language-c">void __exit hello_yu_exit(void)
{
    printk("hello_yu exit\n");
}
</code></pre>
<ul>
<li><code>void __exit hello_yu_exit(void)</code>：这是模块的退出函数，当模块从内核卸载时会调用此函数。<code>__exit</code>是一个宏，其作用是告知编译器该函数仅在模块卸载时使用。</li>
<li><code>printk("hello_yu exit\n");</code>：当模块卸载时，会将此消息输出到内核日志缓冲区。</li>
</ul>
<p>4）、模块许可证声明</p>
<pre><code class="language-c">MODULE_LICENSE("GPL");
</code></pre>
<ul>
<li><code>MODULE_LICENSE("GPL");</code>：此宏用于声明模块所采用的许可证。在Linux内核中，使用GPL许可证是较为常见的。若不声明许可证，内核会发出警告。</li>
</ul>
<p>5）、模块初始化和退出函数注册</p>
<pre><code class="language-c">module_init(hello_yu_init);
module_exit(hello_yu_exit);
</code></pre>
<ul>
<li><code>module_init(hello_yu_init);</code>：该宏把<code>hello_yu_init</code>函数注册为模块的初始化函数，当模块被加载时会调用此函数。</li>
<li><code>module_exit(hello_yu_exit);</code>：该宏把<code>hello_yu_exit</code>函数注册为模块的退出函数，当模块被卸载时会调用此函数。</li>
</ul>
<h3 id="2kconfig配置代码">2、Kconfig配置代码</h3>
<p><code>Kconfig</code>文件是Linux内核配置系统的一部分，它定义了内核编译时可配置的选项。用户可以通过<code>make menuconfig</code>来配置这些选项，进而决定哪些功能会被编译进内核。下面的这段<code>Kconfig</code>代码定义了一个名为<code>HELLO_YU</code>的可配置选项，它有三种状态可供选择。选项设置的描述信息是“This is Kernel Object Test by yu.”，帮助信息为 “This is just a kernel object test.”。用户可以通过内核配置工具来选择是否将该选项对应的功能编译进内核或者编译成内核模块。</p>
<pre><code class="language-kconfig">config HELLO_YU
        tristate "This is Kernel Object Test by yu."
        help
          This is just a kernel object test.
</code></pre>
<p>这段内核<code>Kconfig</code>代码用于在内核配置系统中定义一个可配置选项，下面对配置代码做个简单的介绍：</p>
<p>1）、<code>config HELLO_YU</code></p>
<ul>
<li><code>config</code>是<code>Kconfig</code>语法中的关键字，用于定义一个新的配置选项。</li>
<li><code>HELLO_YU</code>是这个配置选项的名称，在内核代码中可以通过这个名称来引用该配置选项。例如，在<code>C</code>代码里可以使用<code>#ifdef HELLO_YU</code>来判断这个选项是否被启用。</li>
</ul>
<p>2）、<code>tristate "This is Kernel Object Test by yu."</code></p>
<ul>
<li><code>tristate</code>表示这个配置选项有三种状态：<code>y</code>：代表 “是”，意味着该选项对应的功能会被直接编译进内核。<code>n</code>：代表 “否”，即该选项对应的功能不会被编译进内核。<code>m</code>：代表 “模块”，表示该选项对应的功能会被编译成一个内核模块，在需要的时候可以动态加载到内核中。</li>
<li><code>"This is Kernel Object Test by yu."</code>是该配置选项的描述信息，在配置界面中会显示这个描述，让用户了解该选项的用途。</li>
</ul>
<p>3）、<code>help</code></p>
<ul>
<li><code>help</code>关键字用于提供该配置选项的详细帮助信息。</li>
<li><code>This is just a kernel object test.</code>是具体的帮助文本，当用户在配置界面中选择该选项并查看帮助信息时，就会显示这段文本，进一步说明该选项的用途。</li>
</ul>
<h3 id="3makefile配置代码">3、Makefile配置代码</h3>
<p><code>Makefile</code>是一种用于自动化编译和构建项目的文件，它定义了一系列的规则来描述如何从源文件生成目标文件和可执行文件。<code>Make</code>工具会根据<code>Makefile</code>中的规则，检查哪些文件需要重新编译，从而提高编译效率。我们的内核模块代码要是手动编译的话就比较麻烦，故使用<code>Make</code>工具帮助我们编译我们的内核模块项目。一个简单的用于编译内核模块的<code>Makefile</code>内容如下：</p>
<pre><code class="language-makefile">ifeq ($(KERNELRELEASE),)

ifeq ($(ARCH),arm)
KERNELDIR ?= /home/yu/kernel/linux-3.14
ROOTFS ?= /home/yu/share/rootfs
else
KERNELDIR ?= /lib/modules/$(shell uname -r)/build
endif
PWD := $(shell pwd)

modules:
	$(MAKE) -C $(KERNELDIR) M=$(PWD) modules

modules_install:
	$(MAKE) -C $(KERNELDIR) M=$(PWD) modules INSTALL_MOD_PATH=$(ROOTFS) modules_install

clean:
	rm -rf  *.o  *.ko  .*.cmd  *.mod.*  modules.order  Module.symvers   .tmp_versions

else
obj-m += hello_yu.o
hello_yu-objs := hello.o

endif
</code></pre>
<p>整个脚本逻辑大致如下：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757185-10771257.png" alt="alt text" loading="lazy"></p>
<p>脚本采用了嵌套编译的方式，主要分为两个部分，通过判断<code>$(KERNELRELEASE)</code>是否为空来区分。<code>$(KERNELRELEASE)</code>是内核<code>Makefile</code>在编译内核模块时会定义的一个变量，当它为空时，表示在顶层<code>Makefile</code>环境中；当它不为空时，表示是在内核<code>Makefile</code>环境中进行子<code>Makefile</code>的编译。</p>
<p>1）、顶层<code>Makefile</code>环境（<code>$(KERNELRELEASE)</code>为空时）</p>
<pre><code class="language-makefile">ifeq ($(ARCH),arm)
KERNELDIR ?= /home/yu/kernel/linux-3.14
ROOTFS ?= /home/yu/share/rootfs
else
KERNELDIR ?= /lib/modules/$(shell uname -r)/build
endif
PWD := $(shell pwd)
</code></pre>
<ul>
<li><code>ifeq ($(ARCH),arm)</code>：判断目标架构是否为ARM。<br>
若为ARM架构，<code>KERNELDIR</code>变量被设置为<code>/home/yu/kernel/linux-3.14</code>，这是<code>ARM</code>内核源码的路径；<code>ROOTFS</code>变量被设置为<code>/home/yu/share/rootfs</code>，这是开发板根文件系统的路径。<br>
若不是ARM架构，<code>KERNELDIR</code>变量被设置为当前系统正在使用的内核源码的构建目录，通过<code>/lib/modules/$(shell uname -r)/build</code>获取。</li>
<li><code>PWD := $(shell pwd)</code>：将当前工作目录的路径赋值给PWD变量。</li>
</ul>
<pre><code class="language-makefile">modules:
	$(MAKE) -C $(KERNELDIR) M=$(PWD) modules
</code></pre>
<ul>
<li><code>modules目标</code>：用于编译内核模块，默认执行此目标。<code>$(MAKE)</code>实际上是<code>make</code>命令，<code>-C $(KERNELDIR)</code>表示切换到内核源码目录<code>$(KERNELDIR)</code>下进行编译，<code>M=$(PWD)</code>表示将当前工作目录<code>$(PWD)</code>下的代码作为外部模块进行编译，<code>modules</code>是内核<code>Makefile</code>中的一个目标，用于编译模块。</li>
</ul>
<pre><code class="language-makefile">modules_install:
	$(MAKE) -C $(KERNELDIR) M=$(PWD) modules INSTALL_MOD_PATH=$(ROOTFS) modules_install
</code></pre>
<ul>
<li><code>modules_install目标</code>：用于安装编译好的内核模块。在编译模块后，通过<code>INSTALL_MOD_PATH=$(ROOTFS)</code>指定将模块安装到<code>$(ROOTFS)</code>所指向的根文件系统目录中。</li>
</ul>
<pre><code class="language-makefile">clean:
	rm -rf  *.o  *.ko  .*.cmd  *.mod.*  modules.order  Module.symvers   .tmp_versions
</code></pre>
<ul>
<li><code>clean</code>目标：用于清理编译生成的文件。它会删除所有的目标文件（<code>.o</code>）、内核模块文件（<code>.ko</code>）、命令文件（<code>.cmd</code>）、模块相关文件（<code>.mod.*</code>）、模块顺序文件（<code>modules.order</code>）、符号表文件（<code>Module.symvers</code>）以及临时版本目录（<code>.tmp_versions</code>）。</li>
</ul>
<p>2）、内核<code>Makefile</code>环境（<code>$(KERNELRELEASE)</code>不为空）</p>
<pre><code class="language-makefile">obj-m += hello_yu.o
hello_yu-objs := hello.o
</code></pre>
<ul>
<li><code>obj-m += hello_yu.o</code>：表示要将<code>hello_yu.o</code>编译成一个可加载的内核模块。</li>
<li><code>hello_yu-objs := hello.o</code>：表示<code>hello_yu.o</code>这个模块是由<code>hello.o</code>这个目标文件组成的。</li>
</ul>
<h2 id="贰静态编译">贰、静态编译</h2>
<p>这种处理方式需要我们把内核模块源码放置到内核源码目录之下，我们要开发的字符设备驱动是存放于目录<code>drivers/char</code>之下的，故我们需要进入此目录。</p>
<h3 id="1文件编写">1、文件编写</h3>
<p>1）、将内核模块代码写入到<code>drivers/char/hello.c</code>，使用如下命令：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ vi drivers/char/hello.c
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111755709-1669977349.png" alt="alt text" loading="lazy"><br>
内核模块代码的代码解释见壹节，写入完之后保存退出~</p>
<p><em><strong>注意：文件名尽量不要和模块名重名！除非你的内核模块代码只由一个<code>.c</code>文件组成。</strong></em></p>
<p>2）、编辑同一目录下的<code>Kconfig</code>文件，在<code>Kconfig</code>中配置新的模块代码，使用如下命令编辑<code>Kconfig</code>文件：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ vi drivers/char/Kconfig
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756599-846506439.png" alt="alt text" loading="lazy"><br>
<code>Kconfig</code>中配置代码的位置是跟以后的设置界面有关的，为了保持分组逻辑，我们在此处加入我们的配置代码是比较合适的。<code>Kconfig</code>的代码解释见壹节。<br>
完成之后保存退出~</p>
<p>3）、为了让我们的代码能够被正确编译，我们还需要编辑同目录下的<code>Makefile</code>文件，使用如下代码编辑同目录下的<code>Makefile</code>文件：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ vi drivers/char/Makefile
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757015-706078637.png" alt="alt text" loading="lazy"><br>
同样，为了保持分组逻辑，我们选择在此处加入相关代码。<code>Makefile</code>的代码解释见壹节。<br>
编辑完成后保存退出~</p>
<h3 id="2配置编译">2、配置编译</h3>
<p>完成上面步骤的文件编写后，我们就可以在<code>make menuconfig</code>中看到我们的内核模块选项了。为了能让我们的模块能被编译进内核中，我们需要在<code>make menuconfig</code>中配置一下。</p>
<p>1）、使用如下命令打开配置界面：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ make menuconfig
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757894-1382877424.png" alt="alt text" loading="lazy"><br>
根据我们模块代码的存放位置，我们在菜单中选择“Device Drivers”，然后再选择“Character devices”，就能在菜单中看到我们的模块配置标题了，我们通过空格把我们的模块设置为“将该功能模块静态编译进内核”，即设置为“*”。然后通过方向键选择“Save”以保存配置。</p>
<p>2）、配置完成后我们重新编译Linux内核，如何编译的本文不做介绍，我们使用如下命令重新编译Linux内核：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ make uImage
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756900-1026450006.png" alt="alt text" loading="lazy"><br>
可以看到我们的代码被编译了。</p>
<h3 id="3运行内核">3、运行内核</h3>
<p>我们把编译好的<code>uImage</code>文件上传到TFTP服务器，让开发板运行我们新编译的Linux内核：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ cp arch/arm/boot/uImage ~/share/tftp/linux
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757257-1364961688.png" alt="alt text" loading="lazy"><br>
可以看到我们的模块代码在内核启动的时候被启动了。</p>
<p>成功~</p>
<h2 id="叁动态加载模块代码与内核代码放在一起">叁、动态加载：模块代码与内核代码放在一起</h2>
<p>有时候为了方便随时修改我们的模块代码，我们可以选择动态加载方式来使用我们的内核模块代码，本小节介绍的是我们的模块代码仍然放在Linux源码目录中，我们通过<code>make menuconfig</code>配置我们的模块代码为“模块编译”，即<code>M</code>，然后再通过<code>make modules</code>命令编译成<code>.ko</code>文件动态加载进内核中去使用。</p>
<h3 id="1配置编译">1、配置编译</h3>
<p>1）、前面的步骤是与静态编译一样的，我们在配置阶段和编译阶段略有不同，我们使用如下命令重新打开<code>make menuconfig</code>界面：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ make menuconfig
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757102-2019601247.png" alt="alt text" loading="lazy"><br>
配置完成后记得使用方向键选择“Save”保存后再退出~</p>
<p>2）、接着我们需要重新编译内核，使用如下命令重新编译内核：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ make uImage
</code></pre>
<p>编译后需要复制到TFTP服务器上，方便开发板使用：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ cp arch/arm/boot/uImage ~/share/tftp/linux
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757111-619213037.png" alt="alt text" loading="lazy"></p>
<p>3）、上一步是没有编译我们的内核模块的，对于设置为<code>M</code>的内核模块，我们还需要手动编译，使用如下命令编译内核模块：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ make modules
</code></pre>
<p>编译后需要复制到NFS服务器上，方便开发板使用：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ cp drivers/char/hello.ko ~/share/rootfs/
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757035-1934296077.png" alt="alt text" loading="lazy"><br>
可以看到我们的模块被编译了~</p>
<p><em><strong>注意：在编译模块前需要编译内核，内核模块所适用的平台与内核一致。</strong></em></p>
<h3 id="2动态加载使用">2、动态加载使用</h3>
<p>重启开发板，使其运行新的内核。<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757117-1810638869.png" alt="alt text" loading="lazy"><br>
可以看到我们刚刚编译生成的内核模块文件<code>hello.ko</code>。</p>
<p>1）、使用<code>insmod</code>命令动态加载内核模块：</p>
<pre><code class="language-bash">[root@yieq4412]#insmod hello.ko
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111755202-2056654431.png" alt="alt text" loading="lazy"><br>
可以看到，我们的内核模块成功被加载，打印出了我们初始化函数中的内容。</p>
<p>2）、使用<code>lsmod</code>命令查看已经动态加载的模块列表：</p>
<pre><code class="language-bash">[root@yieq4412]#lsmod
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111755066-976197094.png" alt="alt text" loading="lazy"><br>
可以看到，目前开发板上的Linux内核只加载了我们这一个模块。</p>
<p>3）、使用<code>rmmod</code>命令卸载我们的内核模块：</p>
<pre><code class="language-bash">[root@yieq4412]#rmmod hello
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111754966-858284736.png" alt="alt text" loading="lazy"><br>
内核模块成功被卸载，执行了退出函数中的内容。</p>
<h2 id="肆动态加载模块代码与内核代码分开存放">肆、动态加载：模块代码与内核代码分开存放</h2>
<p>有时候我们的模块代码太多，并不想有与Linux源码挤在一起从而导致代码结构混乱等问题的发生，因此我们需要更好的代码管理与编译方式。<br>
我们希望Linux源码与自己开发的内核模块代码分开，分开存放、分开管理和分开编译。本小节介绍这种开发方式。</p>
<h3 id="1建立内核模块项目">1、建立内核模块项目</h3>
<p>我们在另外的目录中创建一个文件夹作为内核模块项目的文件夹，使用如下命令来创建项目文件夹：</p>
<pre><code class="language-bash">yu@Yubuntu:~$ mkdir -p project/hello_yu_module
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111755219-1986721470.png" alt="alt text" loading="lazy"><br>
将来关于此内核模块的代码都放到这里。</p>
<p>我们将内核模块代码写入到此文件夹下的<code>hello.c</code>文件中：</p>
<pre><code class="language-bash">yu@Yubuntu:~/project/hello_yu_module$ vi hello.c
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111755851-2136322271.png" alt="alt text" loading="lazy"><br>
大家可以根据自己的需要调整相关代码，内核模块源代码的解释大家可以去看壹节。</p>
<p>我们将动态加载的<code>Makefile</code>代码模板写入到此文件夹下的<code>Makefile</code>文件中：</p>
<pre><code class="language-bash">yu@Yubuntu:~/project/hello_yu_module$ vi Makefile
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756109-1851617498.png" alt="alt text" loading="lazy"><br>
大家需要根据自己的实际情况调整一下<code>Makefile</code>文件中的变量值，<code>Makefile</code>文件代码的解释大家可以去看壹节。</p>
<h3 id="2编译加载内核模块指定cpu架构为arm">2、编译加载内核模块：指定CPU架构为ARM</h3>
<p>因为我们的开发板是ARM架构的CPU，而当前我们的开发环境所用的CPU架构是AMD64，故我们编译适用于ARM架构CPU的内核模块时需要特殊指定一下。</p>
<p>先确保你的Linux内核已经被编译完成，跟我们上次编译内核模块时的先决条件是一样的。</p>
<p>1）、在内核模块项目目录下执行如下代码以编译适用于ARM架构CPU的内核模块代码：</p>
<pre><code class="language-bash">yu@Yubuntu:~/project/hello_yu_module$ make ARCH=arm
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756563-1601282626.png" alt="alt text" loading="lazy"><br>
可以看到已经生成了内核模块文件<code>hello.ko</code>。</p>
<p>2）、我们把生成的<code>hello.ko</code>文件复制到NFS服务器上方便开发板上的Linux使用，使用如下命令把<code>hello.ko</code>复制到NFS服务器上：</p>
<pre><code class="language-bash">yu@Yubuntu:~/project/hello_yu_module$ cp hello.ko ~/share/rootfs/
</code></pre>
<p>3）、在开发板上测试我们编译好的内核模块文件：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756570-1116755216.png" alt="alt text" loading="lazy"><br>
测试成功~</p>
<h3 id="3编译加载内核模块当前cpu架构">3、编译加载内核模块：当前CPU架构</h3>
<p>我们自己当前的开发环境（电脑，Ubuntu22，CPU架构：AMD64）也是用的Linux内核，那么同样能动态加载和卸载我们现在编写的内核模块，本小节介绍如何编译和使用适用于当前开发环境中CPU架构的内核模块。</p>
<p>1）、使用如下命令编译内核模块：</p>
<pre><code class="language-bash">yu@Yubuntu:~/project/hello_yu_module$ make
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756925-93707927.png" alt="alt text" loading="lazy"><br>
可以看到也是成功生成了<code>hello.ko</code>文件。<br>
这两个警告是说在使用函数前没有声明该函数的原型，这样做可能会出现一些问题，你可以选择忽略，也可以选择在函数前声明一下函数原型。</p>
<p>2）、使用如下命令在电脑中动态加载内核模块：</p>
<pre><code class="language-bash">yu@Yubuntu:~/project/hello_yu_module$ sudo insmod hello.ko
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111755207-1905749422.png" alt="alt text" loading="lazy"><br>
但是好像并没有输出我们初始化函数中的内容呢？<br>
这是因为在我们Ubuntu电脑中，内核输出的信息并不直接输出到Bash中，需要通过<code>dmesg</code>命令查看。</p>
<p>3）、使用如下命令查看内核输出信息：</p>
<pre><code class="language-bash">sudo dmesg
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757352-533975808.png" alt="alt text" loading="lazy"><br>
一下流出了好多好多信息呢，下次试验前我们可以使用<code>sudo dmesg -C</code>命令清空一下内核输出信息再做试验。</p>
<p>4）、使用如下命令查看电脑中已动态加载的内核模块：</p>
<pre><code class="language-bash">lsmod
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756998-1630557519.png" alt="alt text" loading="lazy"><br>
也是一大堆信息，不过我们也是能在其中找到了我们刚刚动态加载的内核模块。</p>
<p>5）、使用如下命令卸载内核模块：</p>
<pre><code class="language-bash">sudo rmmod hello_yu
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111755234-72020630.png" alt="alt text" loading="lazy"><br>
可以看到我们的模块被正常卸载了~</p>
<h2 id="伍内核模块的多文件编译">伍、内核模块的多文件编译</h2>
<p>有时候我们的内核模块不止一个源代码文件，比如我们再加两个文件<code>yu.h</code>和<code>yu.c</code>到我们的内核模块中，那么这样的话我们该如何编写<code>Makefile</code>文件呢？<br>
因为是编译相关的问题，所以只是<code>Makefile</code>的编写不一样，那么这样的话问题分成两种情况，一种是内核模块源代码与Linux源码放在一起的情况，另外一种是内核模块源代码单独存放的情况。</p>
<h3 id="1放在一起">1、放在一起</h3>
<p>以之前的例子为基础做修改。</p>
<p>1）、添加两个文件到<code>drivers/char</code>目录下，<code>yu.h</code>和<code>yu.c</code>：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111755740-510961720.png" alt="alt text" loading="lazy"><br>
就简单的写了个头文件和C文件。</p>
<p>2）、另外对我们之前的<code>drivers/char/hello.c</code>进行一下简单修改：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ vi drivers/char/hello.c
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756040-101555718.png" alt="alt text" loading="lazy"><br>
我们在这里调用一下刚刚新加的两个文件。</p>
<p>3）、另外，我们的代码修改后，<code>Makefile</code>文件也需要修改一下：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ vi drivers/char/Makefile
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757114-408610211.png" alt="alt text" loading="lazy"><br>
涉及多个文件的模块，先是要把原来的条目更改一下，可以把<code>文件名.o</code>改为<code>模块名.o</code>，然后再在编译条目下一行加如下代码把需要用到的文件全部添加进来即可：</p>
<pre><code class="language-makefile">&lt;模块名&gt;-objs := 文件名1.o 文件名2.o ...
</code></pre>
<p>修改完成后保存退出~</p>
<p><em><strong>注意：<code>.o</code>不要重名！</strong></em></p>
<p>4）、在<code>make menuconfig</code>中设置为编译进内核中，然后重新编译：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ make menuconfig
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757087-1547330999.png" alt="alt text" loading="lazy"></p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ make uImage
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756878-41274153.png" alt="alt text" loading="lazy"></p>
<p>5）、复制到TFTP服务器上在开发板上运行：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ cp arch/arm/boot/uImage ~/share/tftp/linux
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757263-1100612500.png" alt="alt text" loading="lazy"><br>
成功~</p>
<p>6）、或者设置成模块，然后重新编译，放到开发板上运行：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757873-632492314.png" alt="alt text" loading="lazy"><br>
成功~</p>
<h3 id="2单独存放">2、单独存放</h3>
<p>1）、以之前的项目<code>~/project/hello_yu_module</code>为基础，在其目录下添加两个文件，也是<code>yu.h</code>和<code>yu.c</code>：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111755709-1617736065.png" alt="alt text" loading="lazy"></p>
<p>2）、同样，需要在之前的<code>hello.c</code>中稍微修改一下，调用我们新加的文件：</p>
<pre><code class="language-bash">yu@Yubuntu:~/project/hello_yu_module$ vi hello.c
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756049-1978878581.png" alt="alt text" loading="lazy"><br>
保存退出~</p>
<p>3）、同样，我们的代码文件有改动后需要修改一下<code>Makefile</code>文件：</p>
<pre><code class="language-bash">yu@Yubuntu:~/project/hello_yu_module$ vi Makefile
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756535-1347312185.png" alt="alt text" loading="lazy"><br>
同样的，我们需要把原来的<code>文件名.o</code>修改为<code>模块名.o</code>，然后在下面添加此模块用到的所有文件，代码格式为：</p>
<pre><code class="language-makefile">&lt;模块名&gt;-objs := 文件名1.o 文件名2.o ...
</code></pre>
<p>基本与上一种情况一致。</p>
<p>4）、当前CPU架构的编译和加载运行：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757243-8810385.png" alt="alt text" loading="lazy"><br>
成功~</p>
<p>4）、指定CPU架构为ARM的编译和加载运行：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757234-2092383309.png" alt="alt text" loading="lazy"><br>
成功~</p>
<h2 id="陆内核模块参数传递">陆、内核模块参数传递</h2>
<p>有时候我们希望能像正常的APP那样，传递一些启动参数到主程序中，主程序通过<code>int argc</code>和<code>char* argv[]</code>来读取我们传入的参数，我们在内核模块上如何实现这样的操作呢？</p>
<h3 id="1宏介绍">1、宏介绍</h3>
<p>在开始之前我们介绍两个宏的用法，一个是<code>module_param(name, type, perm);</code>，另一个是<code>module_param_array(name, type, &amp;num, perm);</code>，这两个宏在Linux内核编程里的核心作用就是把指定的全局变量设置成模块参数，以此实现向内核模块传递参数。</p>
<p>1）、其中<code>module_param(name, type, perm);</code>是设置非数组参数的，它的三个参数介绍如下：</p>
<p><strong>①、</strong> 参数<code>name</code>：全局变量名</p>
<p><strong>②、</strong> 参数<code>type</code>：设置参数的类型，因为有的类型中间包含空格，不方便使用，故使用如下表格的符号代替：</p>
<table>
<thead>
<tr>
<th>使用符号</th>
<th>实际类型</th>
<th>传参方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>bool</td>
<td>bool</td>
<td>insmod &lt;文件名&gt;.ko  变量名=0 或 1</td>
</tr>
<tr>
<td>invbool</td>
<td>bool</td>
<td>insmod &lt;文件名&gt;.ko  变量名=0 或 1</td>
</tr>
<tr>
<td>charp</td>
<td>char *</td>
<td>insmod &lt;文件名&gt;.ko  变量名="字符串内容"</td>
</tr>
<tr>
<td>short</td>
<td>short</td>
<td>insmod &lt;文件名&gt;.ko  变量名=数值</td>
</tr>
<tr>
<td>int</td>
<td>int</td>
<td>insmod &lt;文件名&gt;.ko  变量名=数值</td>
</tr>
<tr>
<td>long</td>
<td>long</td>
<td>insmod &lt;文件名&gt;.ko  变量名=数值</td>
</tr>
<tr>
<td>ushort</td>
<td>unsigned short</td>
<td>insmod &lt;文件名&gt;.ko  变量名=数值</td>
</tr>
<tr>
<td>uint</td>
<td>unsigned int</td>
<td>insmod &lt;文件名&gt;.ko  变量名=数值</td>
</tr>
<tr>
<td>ulong</td>
<td>unsigned long</td>
<td>insmod &lt;文件名&gt;.ko  变量名=数值</td>
</tr>
</tbody>
</table>
<p><strong>③、</strong> 参数<code>perm</code>：给对应的文件<code>/sys/module/name/parameters/变量名</code>指定操作权限，可以直接传递数字，也可以传递下表中的宏：</p>
<table>
<thead>
<tr>
<th>宏</th>
<th>建议</th>
</tr>
</thead>
<tbody>
<tr>
<td>#define S_IRWXU 00700</td>
<td></td>
</tr>
<tr>
<td>#define S_IRUSR 00400</td>
<td></td>
</tr>
<tr>
<td>#define S_IWUSR 00200</td>
<td></td>
</tr>
<tr>
<td>#define S_IXUSR 00100</td>
<td></td>
</tr>
<tr>
<td>#define S_IRWXG 00070</td>
<td></td>
</tr>
<tr>
<td>#define S_IRGRP 00040</td>
<td></td>
</tr>
<tr>
<td>#define S_IWGRP 00020</td>
<td></td>
</tr>
<tr>
<td>#define S_IXGRP 00010</td>
<td></td>
</tr>
<tr>
<td>#define S_IRWXO 00007</td>
<td></td>
</tr>
<tr>
<td>#define S_IROTH 00004</td>
<td></td>
</tr>
<tr>
<td>#define S_IWOTH 00002</td>
<td>不要用，编译出错</td>
</tr>
<tr>
<td>#define S_IXOTH 00001</td>
<td></td>
</tr>
</tbody>
</table>
<p>一般设置为<code>0664</code>，即执行权限不需要，用户和组都为可读写，其他用户只读。</p>
<p>2）、另外一个<code>module_param_array(name, type, &amp;num, perm);</code>是设置数组参数的，其中的参数<code>name</code>、<code>type</code>和<code>perm</code>跟<code>module_param(name, type, perm);</code>是一样的，另外一个参数介绍如下：<br>
<strong>①、</strong> 参数<code>&amp;num</code>：传递的参数为数组时，此参数为存放数组大小变量的地址，若不需要，可以填NULL，但是要确保传参个数不越界。传递数组参数的方式：</p>
<pre><code class="language-bash">insmod &lt;文件名&gt;.ko 数组名=元素值0,元素值1,...元素值num-1
</code></pre>
<h3 id="2参数传递编程">2、参数传递编程</h3>
<p>1）、我们对内核模块<code>~/project/hello_yu_module</code>进行修改，使之能够接收一些参数，我们编辑<code>hello.c</code>：</p>
<pre><code class="language-bash">yu@Yubuntu:~/project/hello_yu_module$ vi hello.c
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756674-664644322.png" alt="alt text" loading="lazy"><br>
这里接收了3个参数，一个整型，一个字符串，一个整型数组，修改完成后保存退出~</p>
<p>2）、使用如下命令进行编译：</p>
<pre><code class="language-bash">yu@Yubuntu:~/project/hello_yu_module$ make
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756985-517137383.png" alt="alt text" loading="lazy"></p>
<p>3）、加载测试：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757052-1690546241.png" alt="alt text" loading="lazy"><br>
成功~</p>
<h2 id="柒模块依赖">柒、模块依赖</h2>
<p>内核模块的代码与内核其他代码运行于同一环境中。尽管内核模块在形式上独立存在，但在运行时，它与内核其他部分构成一个统一整体，同属内核程序的有机组成部分。这种运行时的整体性，使得内核模块与内核其他源码能够相互访问彼此的全局变量和函数，共享内核空间的全局资源。<br>
本小节介绍我们自己的内核模块如何导出全局资源和使用其他内核代码的全局资源。</p>
<h3 id="1小知识">1、小知识</h3>
<p>1）、导出符号：一个内核模块中可以被其它内核源代码使用的全局特性的名称（变量名、函数名等）被称为导出符号。</p>
<p>2）、符号表：若把所有导出符号放在一个表中，这个表被称为符号表。</p>
<p>3）、<code>nm</code>命令可以查看elf格式的可执行文件或目标文件中包含的符号表，用法：<code>nm 文件名</code>。符号表中会标明符号的类型，类型说明如下：</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>段类型</th>
<th>数据/代码特征</th>
<th>示例（全局符号）</th>
<th>示例（局部符号）</th>
</tr>
</thead>
<tbody>
<tr>
<td>B/b</td>
<td>BSS 段</td>
<td>未初始化或零初始化的全局变量</td>
<td>int global_var;</td>
<td>static int static_var;</td>
</tr>
<tr>
<td>D/d</td>
<td>已初始化数据段</td>
<td>初始值非零的全局变量</td>
<td>int var = 10;</td>
<td>static int s_var = 20;</td>
</tr>
<tr>
<td>T/t</td>
<td>文本段</td>
<td>可执行代码（函数）</td>
<td>void func();</td>
<td>static void s_func();</td>
</tr>
<tr>
<td>U</td>
<td>未定义符号</td>
<td>在目标文件中被引用，但未在当前文件中定义，需链接其他文件解析</td>
<td>extern int external_var;</td>
<td></td>
</tr>
<tr>
<td>R</td>
<td>只读数据段</td>
<td>字符串常量、const 全局变量等只读数据</td>
<td>const int const_var = 5;</td>
<td></td>
</tr>
<tr>
<td>N</td>
<td>调试符号</td>
<td>用于调试信息的符号</td>
<td></td>
<td></td>
</tr>
<tr>
<td>w</td>
<td>弱符号</td>
<td>多个定义时以强符号为准</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>4）、用于导出内核模块中全局特性的名称的两个宏：<code>EXPORT_SYMBOL(函数名或全局变量名)</code>和<code>EXPORT_SYMBOL_GPL(函数名或全局变量名)</code>，其中后者需要GPL许可证协议验证。<br>
在使用导出符号的地方，需要对这些位于其他内核模块的导出符号使用<code>extern</code>声明后才能使用这些符号。</p>
<p>5）、内核模块B使用了内核模块A的导出符号，我们称内核模块B依赖于内核模块A，对于它们有如下要求：</p>
<ul>
<li>编译次序：先编译内核模块A，再编译内核模块B，当两个模块源码在不同目录时，需要：①. 编译被使用了导出符号的内核模块A；②. 复制内核模块A目录中的<code>Module.symvers</code>文件到内核模块B的目录中；③. 编译使用内核模块A的导出符号的内核模块B，否则编译内核模块B时会有符号未定义的错误。</li>
<li>加载次序：先插入内核模块A，再插入内核模块B，否则内核模块B会插入失败。</li>
<li>卸载次序：先卸载内核模块B，再卸载内核模块A，否则内核模块A会卸载失败。</li>
</ul>
<h3 id="2内核模块依赖同目录">2、内核模块依赖：同目录</h3>
<p>接下来会构建两个具有依赖关系的内核模块来举例说明如何搞定它们的依赖关系。</p>
<p>1）、首先是两个存在依赖关系的内核模块在同一目录的情况，我们在<code>~/project</code>目录下创建一个<code>ii_module</code>文件夹：</p>
<pre><code class="language-bash">yu@Yubuntu:~/project$ mkdir ii_module
</code></pre>
<p>2）、再在里面创建两个内核模块<code>.c</code>源文件：</p>
<pre><code class="language-bash">yu@Yubuntu:~/project/ii_module$ vi yu_a.c
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756520-1264464316.png" alt="alt text" loading="lazy"></p>
<pre><code class="language-bash">yu@Yubuntu:~/project/ii_module$ vi yu_b.c
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756224-1272832876.png" alt="alt text" loading="lazy"></p>
<p>3）、再创建<code>Makefile</code>文件：</p>
<pre><code class="language-bash">yu@Yubuntu:~/project/ii_module$ vi Makefile
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756492-1085904996.png" alt="alt text" loading="lazy"><br>
注意这里的顺序，由于是<code>yu_b</code>使用了<code>yu_a</code>中的导出符号，所以<code>yu_a</code>要在<code>yu_b</code>之前编译。</p>
<p>4）、编译运行：当前CPU架构<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757759-342532455.png" alt="alt text" loading="lazy"><br>
成功~</p>
<p>5）、编译运行：CPU架构为ARM<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757474-386693842.png" alt="alt text" loading="lazy"><br>
成功~</p>
<h3 id="3内核模块依赖不同目录">3、内核模块依赖：不同目录</h3>
<p>1）、其次是两个存在依赖关系的内核模块不在同一目录的情况，我们在<code>~/project</code>目录下创建<code>lukya_module</code>和<code>lukyb_module</code>两个文件夹，并把之前的<code>yu_a.c</code>和<code>yu_b.c</code>分别复制进去，再把<code>Makefile</code>也都复制过去一份：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111755597-363548166.png" alt="alt text" loading="lazy"></p>
<p>2）、分别修改两个目录中的<code>Makefile</code>：</p>
<pre><code class="language-bash">yu@Yubuntu:~/project$ vi lukya_module/Makefile
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756479-1591186919.png" alt="alt text" loading="lazy"></p>
<pre><code class="language-bash">yu@Yubuntu:~/project$ vi lukyb_module/Makefile
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756639-1240003845.png" alt="alt text" loading="lazy"><br>
其中的<code>KBUILD_EXTRA_SYMBOLS := /home/yu/project/lukya_module/Module.symvers</code>为指定内核模块<code>lukya_module</code>的符号表的位置。</p>
<p>3）、尝试先编译<code>lukyb_module</code>：</p>
<pre><code class="language-bash">yu@Yubuntu:~/project/lukyb_module$ make
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757045-514661378.png" alt="alt text" loading="lazy"><br>
是直接报错的~</p>
<p>4）、先编译<code>lukya_module</code>：</p>
<pre><code class="language-bash">yu@Yubuntu:~/project/lukya_module$ make
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757105-1960370992.png" alt="alt text" loading="lazy"><br>
通过！</p>
<p>5）、再编译<code>lukyb_module</code>：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756649-1869555984.png" alt="alt text" loading="lazy"><br>
成功~</p>
<p>6）、测试：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756151-642168577.png" alt="alt text" loading="lazy"><br>
通过~</p>
<h3 id="4linux内核的符号表">4、Linux内核的符号表</h3>
<p>上面的几个部分介绍的是我们自己写的内核模块之间的依赖关系，那么Linux内核提供了哪些导出符号给我们呢？</p>
<p>1）、在Linux运行时，文件<code>/proc/kallsyms</code>中的内容即是当前Linux的符号表，可以使用文本查看相关的命令直接查看里面的内容：</p>
<pre><code class="language-bash">cat /proc/kallsyms
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756785-211992921.png" alt="alt text" loading="lazy"><br>
由于是运行时的符号表，故地址都为<code>0000000000000000</code>。</p>
<p>2）、另外Linux系统还在<code>/boot/System.map-&lt;版本号&gt;</code>中存有符号表，版本号每个人都不太一样的，也是直接用文本查看相关的命令直接查看里面的内容（以下命令使用于我当前的Ubuntu系统）：</p>
<pre><code class="language-bash">yu@Yubuntu:~$ sudo cat /boot/System.map-6.8.0-51-generic
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756789-1619471579.png" alt="alt text" loading="lazy"></p>
<p>3）、另外，我们可以通过<code>nm</code>命令查看我们自己编译出来的elf格式的Linux内核文件<code>vmlinux</code>的符号表：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ nm vmlinux
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756919-1265256739.png" alt="alt text" loading="lazy"></p>
<p>4）、我们自己编译出来的Linux中也有文本类型的符号表，在源码目录下的<code>System.map</code>文件中：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ cat System.map
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111756915-2058182427.png" alt="alt text" loading="lazy"></p>
<h2 id="捌开发小知识">捌、开发小知识</h2>
<h3 id="1gpl许可证协议验证">1、GPL许可证协议验证</h3>
<p>1）、GPL（GNU General Public License，GNU 通用公共许可证）是自由软件基金会（FSF）发布的一种开源许可证，也是开源领域最具影响力的 “强 Copyleft” 许可证之一。它的核心目标是确保软件的自由使用、修改和分发权利，同时要求基于 GPL 许可的软件及其衍生作品必须继续遵循 GPL 条款，从而保障用户的自由不被剥夺。</p>
<p>2）、GPL许可证协议验证是一种确保代码合规性的机制，其核心是通过检查模块的许可证声明，确保导出的符号仅被符合GPL协议的模块使用。</p>
<h3 id="2模块传参中的参数说明">2、模块传参中的参数说明</h3>
<p>1）、可用<code>MODULE_PARAM_DESC</code>宏对每个参数进行作用描述，用法如下：</p>
<pre><code class="language-c">MODULE_PARM_DESC(变量名, 字符串常量);
</code></pre>
<p>2）、重新编译后可以使用<code>modinfo</code>命令查看<code>.ko</code>文件的参数描述。</p>
<p>3）、示例如下：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757577-2056640692.png" alt="alt text" loading="lazy"></p>
<h3 id="3内核模块信息宏">3、内核模块信息宏</h3>
<p>我们可以在内核模块源代码中加入如下一些宏来描述当前内核模块的信息：</p>
<pre><code class="language-c">MODULE_AUTHOR(字符串常量);  // 作者信息
MODULE_DESCRIPTION(字符串常量);  // 模块描述
MODULE_ALIAS(字符串常量);  // 模块别名
</code></pre>
<p>这些宏的本质是定义<code>static</code>字符数组用于存放指定字符串内容，这些字符串内容链接时存放在<code>.modinfo</code>字段，可以用<code>modinfo 内核模块文件名</code>命令来查看这些模块信息。</p>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757625-1604465070.png" alt="alt text" loading="lazy"></p>
<h3 id="4常用命令">4、常用命令</h3>
<p>1）、<code>file</code>命令，用于查看<code>elf</code>格式文件的相关信息，例如我们编译内核模块时指定为ARM或者默认为当前CPU架构时，使用<code>file</code>命令会看到区别：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250429111757126-394532860.png" alt="alt text" loading="lazy"></p>
<p>2）、<code>dmesg</code>命令，用于查看内核输出信息，<code>dmesg -C</code>是清除内核输出信息，我们之前介绍过。</p>
<p>3）、<code>modinfo</code>命令，用于查看内核模块文件的相关信息，之前介绍过。</p>
<p>4）、<code>nm</code>命令，用于查看<code>elf</code>格式文件的导出符号表，之前介绍过。</p>
<h2 id="玖参考资料">玖、参考资料</h2>
<ol>
<li><a href="https://www.doubao.com/thread/w376d871a527cb868" target="_blank" rel="noopener nofollow">https://www.doubao.com/thread/w376d871a527cb868</a></li>
<li><a href="https://www.cnblogs.com/willwuss/p/13696573.html" target="_blank">https://www.cnblogs.com/willwuss/p/13696573.html</a></li>
<li><a href="https://blog.csdn.net/XiaoYuHaoAiMin/article/details/147092721?spm=1011.2415.3001.5331" target="_blank" rel="noopener nofollow">https://blog.csdn.net/XiaoYuHaoAiMin/article/details/147092721?spm=1011.2415.3001.5331</a></li>
<li><a href="https://blog.csdn.net/Lihuihui006/article/details/112199469" target="_blank" rel="noopener nofollow">https://blog.csdn.net/Lihuihui006/article/details/112199469</a></li>
<li><a href="https://www.bilibili.com/video/BV1tyWWeeEpp/?spm_id_from=333.337.search-card.all.click" target="_blank" rel="noopener nofollow">https://www.bilibili.com/video/BV1tyWWeeEpp/?spm_id_from=333.337.search-card.all.click</a></li>
<li><a href="https://www.doubao.com/thread/w5e99f0e281945c2a" target="_blank" rel="noopener nofollow">https://www.doubao.com/thread/w5e99f0e281945c2a</a></li>
<li><a href="https://www.doubao.com/thread/wbdbee496c2ad372c" target="_blank" rel="noopener nofollow">https://www.doubao.com/thread/wbdbee496c2ad372c</a></li>
</ol>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.20436597403935186" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-29 11:29">2025-04-29 11:28</span>&nbsp;
<a href="https://www.cnblogs.com/minuhy">清风来叙</a>&nbsp;
阅读(<span id="post_view_count">80</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18852826);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18852826', targetLink: 'https://www.cnblogs.com/minuhy/p/18852826', title: '【Linux】Linux内核模块开发' })">举报</a>
</div>
        