
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/CheeseFunction/p/18857521" title="发布于 2025-05-02 19:41">
    <span role="heading" aria-level="2">平衡树</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="平衡树何方神圣">平衡树？何方神圣</h2>
<p>平时我们最害怕的是什么！暴力，没错，暴力的的时间复杂度通常会高得可怕，甚至使你一分不得，在“树论”上也是一样的，倘若使用普通的暴力，很难应对极端情况（比如退化成链或者接近于链），那有没有什么方法来优化掉树上暴力呢？设想一下：树上暴力之所以时间复杂度高，还不是因为树长得太奇怪了？既然改变不了自身，那就改变环境！构造一棵较为平衡的树就行了嘛（<s>正所谓错的不是我爱是这棵树啊</s>）。<br>
说的好，但如何构造一棵较为平衡的树呢？这意味着最好我从任意一个叶子节点出发，不超过 <span class="math inline">\(\log n\)</span> 次就能到达根节点，而这又意味着每次向上规模至少 <span class="math inline">\(\times 2\)</span> ，即树的任意一个节点的左右子树（因为是二叉树）大小的绝对值不超过 <span class="math inline">\(1\)</span> 。这样构造出来的树相对比较平衡。</p>
<h2 id="平衡树的插入操作">平衡树的插入操作</h2>
<p>好不容易知道怎么构建一棵平衡树，现在又怎么维护它的平衡性呢？我们知道，如果在现有平衡树的基础上若尝试插入一个节点，大概率会使得这一颗树失去平衡性，久而久之就会退化成一条链（真是太可怕了），因此我们要尝试维护一棵树的平衡性！怎么维护呢？首先，我们令这个插入的破坏了树的平衡性的节点叫做<strong>麻烦节点</strong>（确实麻烦），而被这个麻烦节点破坏了平衡性的节点我们叫做<strong>被破坏节点</strong>（无论如何一定包含根节点）。那么被破坏节点和麻烦节点的关系只有可能是以下四种可能：</p>
<ol>
<li>LL型，当前麻烦节点是距离当前麻烦节点最近的被破坏节点的左儿子的左儿子的子树（或本身），那么需要一次右旋（一会会讲）。</li>
<li>RR型，当前麻烦节点是距离当前麻烦节点最近的被破坏节点的右儿子的右儿子的子树（或本身），那么需要一次左旋（一会也会讲）。</li>
<li>LR型，当前麻烦节点是距离当前麻烦节点最近的被破坏节点的左儿子的右儿子（或本身），那么需要<strong>先一次右旋，接着一次左旋</strong>（顺序很重要！）。</li>
<li>RL型，当前麻烦节点是距离当前麻烦节点最劲的被破坏节点得到右儿子的左儿子（或本身），那么需要<strong>先一次左旋，接着一次右旋</strong>（顺序同样很重要！）。<br>
那什么是左旋/右旋呢？过程很简单，一张GIF动图就懂了！</li>
</ol>
<p>右旋：<br>
<img src="https://img2024.cnblogs.com/blog/3639577/202505/3639577-20250502175801281-1611424978.gif" alt="" loading="lazy"><br>
左旋:<br>
<img src="https://img2024.cnblogs.com/blog/3639577/202505/3639577-20250502175926004-345103734.gif" alt="" loading="lazy"><br>
看懂了吗，以下是对这两种操作的详细讲解：</p>
<h3 id="右旋">右旋</h3>
<p>由上图可知，我们先把旧根节点叫做 <span class="math inline">\(u\)</span> ，新的根节点叫做 <span class="math inline">\(v\)</span> ，注意：<strong>若要右旋，则 <span class="math inline">\(u\)</span> 到 <span class="math inline">\(v\)</span> 之间必有一条连边，且 <span class="math inline">\(v\)</span> 是 <span class="math inline">\(u\)</span> 的左孩子（没有右旋）</strong>。<br>
此时，我们把 <span class="math inline">\(v\)</span> 提上来叫做根节点，<span class="math inline">\(u\)</span> 变成其右儿子。然后把原来 <span class="math inline">\(v\)</span> 的整个右子树（没有就不管），变成 <span class="math inline">\(u\)</span> 的现在的右子树。</p>
<h4 id="举个核桃仅作为示例">举个核桃👀(仅作为示例）：</h4>
<p>右旋前的结构：</p>
<pre><code>      A
     / \
    B   AR
   / \
 BL   BR
</code></pre>
<p>右旋后的结构:</p>
<pre><code>       B
     /   \
    BL    A
         / \
       BR   AR
</code></pre>
<h3 id="左旋">左旋</h3>
<p>由上图页可知，我们先把旧根节点叫做 <span class="math inline">\(u\)</span> ，新的根节点叫做 <span class="math inline">\(v\)</span> ，注意：<strong>若要左旋，则 <span class="math inline">\(u\)</span> 到 <span class="math inline">\(v\)</span> 之间必有一条连边，且 <span class="math inline">\(v\)</span> 是 <span class="math inline">\(u\)</span> 的右孩子（没有左旋）</strong>。<br>
此时，我们把 <span class="math inline">\(v\)</span> 提上来叫做根节点，<span class="math inline">\(u\)</span> 变成其左儿子。然后把原来 <span class="math inline">\(v\)</span> 的整个左子树（没有就不管），变成 <span class="math inline">\(u\)</span> 的现在的左子树。</p>
<h4 id="举个栗子">举个栗子🤣：</h4>
<p>左旋前的结构:</p>
<pre><code>      A
     / \
    AL   B
        / \
      BL   BR
</code></pre>
<p>左旋后的结构:</p>
<pre><code>       B
     /   \
    A     BR
   / \
 AL   BL
</code></pre>
<p>注意，左旋和右旋虽然互为逆操作，但是提取不同的节点做 <span class="math inline">\(v,u\)</span> 两点结果不同。<br>
接下来我们就可以实现这个插入操作了！</p>
<h3 id="code">Code:</h3>
<pre><code class="language-cpp">AVLNode* rightRotate(AVLNode *y) {
    AVLNode *x = y-&gt;left;
    AVLNode *T2 = x-&gt;right;

    x-&gt;right = y;
    y-&gt;left = T2;

    update(y);
    update(x);

    return x;
}
AVLNode* leftRotate(AVLNode *x) {
    AVLNode *y = x-&gt;right;
    AVLNode *T2 = y-&gt;left;

    y-&gt;left = x;
    x-&gt;right = T2;

    update(x);
    update(y);

    return y;
}
AVLNode* insert(AVLNode *node, int key) {
    if (!node) return new AVLNode(key);

    if (key &lt; node-&gt;key) {
        node-&gt;left = insert(node-&gt;left, key);
    } else if (key &gt; node-&gt;key) {
        node-&gt;right = insert(node-&gt;right, key);
    } else {
        return node;  // 重复值不插入
    }

    update(node);  // 更新高度和大小

    // 检查平衡因子
    int balance = getBalance(node);

    // LL型（左左）
    if (balance &gt; 1 &amp;&amp; key &lt; node-&gt;left-&gt;key) {
        return rightRotate(node);
    }

    // RR型（右右）
    if (balance &lt; -1 &amp;&amp; key &gt; node-&gt;right-&gt;key) {
        return leftRotate(node);
    }

    // LR型（左右）
    if (balance &gt; 1 &amp;&amp; key &gt; node-&gt;left-&gt;key) {
        node-&gt;left = leftRotate(node-&gt;left);
        return rightRotate(node);
    }

    // RL型（右左）
    if (balance &lt; -1 &amp;&amp; key &lt; node-&gt;right-&gt;key) {
        node-&gt;right = rightRotate(node-&gt;right);
        return leftRotate(node);
    }

    return node;  // 无需调整
}
</code></pre>
<p>顺带一提，那个所谓的平衡因子，就是当前节点左右两棵子树的大小的差，不会超过 <span class="math inline">\(1\)</span>（用屁股想都知道）。</p>
<h2 id="平衡树的删除操作">平衡树的删除操作：</h2>
<p>学会了插入，是不是觉得平衡树很简单呢，不，它好像确实没有树剖难（呜呜呜）。扯远了，我们现在就来讲讲平衡树的删除操作。删除，可能使得被删除的节点缺失父亲而变成一根无根树，所以我们借鉴一下堆的想法：借东墙补西墙。就是从他的子节点中抽一个节点来代替这个节点，当然不会是乱选，规则如下：</p>
<ol>
<li>目标节点是叶子节点 $\to $ 直接删除</li>
<li>目标节点只有一个子节点 <span class="math inline">\(\to\)</span> 用子节点替代这个节点之后删除这个节点。</li>
<li>目标节点有两个子节点， <span class="math inline">\(\to\)</span> 用右子树最小节点或左子树最大节点代替这个节点，然后删除这个节点。<br>
没完，由于换上来节点必然（不一定）调整了平衡性，我们还要像插入一样找是LL,LR,RL还是RR然后左右旋。</li>
</ol>
<h3 id="举个山楂">举个山楂🎶：</h3>
<pre><code>        30 (0)
       /   \
    20 (0) 40 (1)
    /   \    \
 10 (0) 25 (0) 50 (0)
</code></pre>
<p>（括号里的是平衡因子）<br>
删除 <code>30</code> 节点，步骤如下：</p>
<ul>
<li>找到目标节点，时间复杂度 <span class="math inline">\(O(\log n)\)</span>。</li>
<li>替换节点：
<ul>
<li>因为 <code>30</code> 有两个子节点，因此找右子树最小节点（个人喜好）：
<ul>
<li>因为 <code>40</code> 没有左子节点，所以把 <code>30</code> 换成 <code> 40</code>。<br>
目前如下：</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code>        40 (0)  &lt;-- 原30被替换为40
       /   \
    20 (0)  50 (0)  &lt;-- 原40被50替换
    /   \
 10 (0) 25 (0)
</code></pre>
<p>接下来，由于这个树不平衡，需要从 <code>50</code> 节点向上检查，发现需要右旋，直接右旋。</p>
<pre><code>        40 (1)
       /   \
    20 (0)  50 (0)
    /   \
 10 (0) 25 (0)
</code></pre>
<p>那么我们就愉快的完成删除了，代码如下：</p>
<h3 id="code-1">Code:</h3>
<pre><code class="language-cpp">// 找到子树中的最小节点（用于替换待删除节点）
AVLNode* findMinNode(AVLNode* node) {
    while (node-&gt;left) node = node-&gt;left;
    return node;
}

// 删除操作
AVLNode* remove(AVLNode* node, int key) {
    if (!node) return nullptr;

    // 1. 标准BST删除
    if (key &lt; node-&gt;key) {
        node-&gt;left = remove(node-&gt;left, key);
    } else if (key &gt; node-&gt;key) {
        node-&gt;right = remove(node-&gt;right, key);
    } else {
        // 情况1/2：无子节点或只有一个子节点
        if (!node-&gt;left || !node-&gt;right) {
            AVLNode* temp = node-&gt;left ? node-&gt;left : node-&gt;right;
            if (!temp) {  // 无子节点
                temp = node;
                node = nullptr;
            } else {      // 有一个子节点
                *node = *temp;  // 用子节点覆盖自身
            }
            delete temp;
        } 
        // 情况3：有两个子节点
        else {
            AVLNode* temp = findMinNode(node-&gt;right);  // 找到右子树的最小节点
            node-&gt;key = temp-&gt;key;                    // 用该节点的值替换自身
            node-&gt;right = remove(node-&gt;right, temp-&gt;key); // 递归删除替换节点
        }
    }

    if (!node) return nullptr;  // 树为空则直接返回

    // 2. 更新高度和子树大小
    update(node);

    // 3. 检查平衡并调整
    int balance = getBalance(node);

    // LL型失衡
    if (balance &gt; 1 &amp;&amp; getBalance(node-&gt;left) &gt;= 0) {
        return rightRotate(node);
    }
    // LR型失衡
    if (balance &gt; 1 &amp;&amp; getBalance(node-&gt;left) &lt; 0) {
        node-&gt;left = leftRotate(node-&gt;left);
        return rightRotate(node);
    }
    // RR型失衡
    if (balance &lt; -1 &amp;&amp; getBalance(node-&gt;right) &lt;= 0) {
        return leftRotate(node);
    }
    // RL型失衡
    if (balance &lt; -1 &amp;&amp; getBalance(node-&gt;right) &gt; 0) {
        node-&gt;right = rightRotate(node-&gt;right);
        return leftRotate(node);
    }

    return node;  // 无需调整则直接返回
}
</code></pre>
<h2 id="查询查找值排名第--小前驱后继">查询（查找值/排名/第 <span class="math inline">\(k\)</span> 小/前驱后继）</h2>
<p>是不是抢了权值线段树的活了？</p>
<h3 id="1查找是否存在某个值">1.查找是否存在某个值：</h3>
<p>因为这棵树已经是一棵非常适合暴力的树了，可以直接递归暴力查找:</p>
<pre><code class="language-cpp">bool search(AVLNode* node, int key) {
    if (!node) return false;
    if (key &lt; node-&gt;key) return search(node-&gt;left, key);
    else if (key &gt; node-&gt;key) return search(node-&gt;right, key);
    else return true;  // 找到key
}
</code></pre>
<h3 id="2查找排名">2.查找排名</h3>
<p>排名怎么写呢？有点难搞啊。假设我们要查找的键值叫做 <span class="math inline">\(key\)</span>,那 <span class="math inline">\(key\)</span> 的排名就是<strong>比 <span class="math inline">\(key\)</span> 小的节点数+1</strong>吗 ，所以直接是用子树大小来算：</p>
<pre><code class="language-cpp">int getRank(AVLNode* node, int key) {
    if (!node) return 1;  // 空树时key的排名为1（最小）
    if (key &lt; node-&gt;key) {
        return getRank(node-&gt;left, key);
    } else if (key &gt; node-&gt;key) {
        return getSize(node-&gt;left) + 1 + getRank(node-&gt;right, key);
    } else {
        return getSize(node-&gt;left) + 1;  // 找到key，排名为左子树大小+1
    }
}
</code></pre>
<h4 id="举个花生">举个花生😍：</h4>
<pre><code>      40 (size=4)
     /   \
   20 (2) 50 (1)
  /   \
10 (1) 25 (1)
</code></pre>
<p><code>getRank(root,25)</code> 如下：</p>
<ol>
<li><span class="math inline">\(25&lt;40\)</span> <span class="math inline">\(\to\)</span> 返回左子树 <span class="math inline">\(20\)</span></li>
<li><span class="math inline">\(25&lt;20\)</span> <span class="math inline">\(\to\)</span> 返回<code>左子树大小（1）+ 1 + getRank(25)</code>。</li>
<li><span class="math inline">\(25=25\)</span> <span class="math inline">\(\to\)</span> 返回<code>左子树大小(0)+1</code><br>
最终得到<code>1+1+1=3</code>。</li>
</ol>
<h3 id="3查询k小值">3.查询k小值</h3>
<p>都写出排名了，这 <span class="math inline">\(k\)</span> 小值也是一样的原理，但是要借用一下快速选择算法：</p>
<pre><code class="language-cpp">int getKth(AVLNode* node, int k) {
    int leftSize = getSize(node-&gt;left);
    if (k &lt;= leftSize) {
        return getKth(node-&gt;left, k);  // 第k小在左子树
    } else if (k == leftSize + 1) {
        return node-&gt;key;              // 当前节点就是第k小
    } else {
        return getKth(node-&gt;right, k - leftSize - 1);  // 在右子树中找第(k - leftSize - 1)小
    }
}
</code></pre>
<h4 id="举个苹果">举个苹果🐦：</h4>
<p>（完了要没有东西举了）</p>
<p><code>getKth(root, 3)</code>：<br>
<code>leftSize = 2</code>（左子树有 10, 20, 25，实际大小为2？需要检查定义）。<br>
<span class="math inline">\(3 &gt; 2 + 1\)</span> → 进入右子树，<span class="math inline">\(k = 3 - 2 - 1 = 0\)</span>（应修正逻辑，确保k正确传递）。</p>
<h3 id="4前驱后继查询">4.前驱/后继查询:</h3>
<h4 id="前驱">前驱：</h4>
<p>前驱的定义很容易得到，即为<strong>小于key的最大节点</strong>，可以分类讨论得到：</p>
<ul>
<li>如果key有左子树，前驱是左子树的最大值。</li>
<li>不然，前驱是最近的二祖先节点（且该祖先节点的右子树包含key)。</li>
</ul>
<pre><code class="language-cpp">int getPredecessor(AVLNode* node, int key) {
    if (!node) return INT_MIN;  // 无前驱
    if (key &lt;= node-&gt;key) {
        return getPredecessor(node-&gt;left, key);  // 前驱在左子树
    } else {
        // 当前节点可能是一个候选前驱，继续向右找更大的
        int rightPredecessor = getPredecessor(node-&gt;right, key);
        return max(node-&gt;key, rightPredecessor);
    }
}
</code></pre>
<h4 id="后继">后继：</h4>
<p>后继的定义也和前驱差不多，就是<strong>大于key的最小节点</strong>，也可以分类讨论：</p>
<ul>
<li>如果key有右子树，后继是右子树的最小值。</li>
<li>否则，后继是最近的祖先节点（且该祖先的左子树包含key）。</li>
</ul>
<pre><code class="language-cpp">int getSuccessor(AVLNode* node, int key) {
    if (!node) return INT_MAX;  // 无后继
    if (key &gt;= node-&gt;key) {
        return getSuccessor(node-&gt;right, key);  // 后继在右子树
    } else {
        // 当前节点可能是一个候选后继，继续向左找更小的
        int leftSuccessor = getSuccessor(node-&gt;left, key);
        return min(node-&gt;key, leftSuccessor);
    }
}
</code></pre>
<h4 id="时间复杂度分析">时间复杂度分析：</h4>
<table>
<thead>
<tr>
<th>操作</th>
<th>时间复杂度</th>
<th>原因</th>
</tr>
</thead>
<tbody>
<tr>
<td>是否存在</td>
<td><span class="math inline">\(O(\log n)\)</span></td>
<td>平衡树高度一定是 <span class="math inline">\(O(\log n)\)</span></td>
</tr>
<tr>
<td>排名</td>
<td><span class="math inline">\(O(\log n)\)</span></td>
<td>平衡树高度一定是 <span class="math inline">\(O(\log n)\)</span></td>
</tr>
<tr>
<td>第k小</td>
<td><span class="math inline">\(O(\log n)\)</span></td>
<td>平衡树高度一定是 <span class="math inline">\(O(\log n)\)</span></td>
</tr>
<tr>
<td>前驱后继</td>
<td><span class="math inline">\(O(\log n)\)</span></td>
<td>平衡树高度一定是 <span class="math inline">\(O(\log n)\)</span></td>
</tr>
<tr>
<td>（这原因说了跟没说一样）。</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="常见问题q--a">常见问题Q &amp; A:</h2>
<ul>
<li>
<p>Q: 如果树中有重复值怎么办？<br>
A: 需要在节点中增加计数器（count），修改插入/删除逻辑，查询时统计重复值的数量。</p>
</li>
<li>
<p>Q: 为什么查询排名用size而不用中序遍历？<br>
A: size将查询优化到 <span class="math inline">\(O(\log n)\)</span>，中序遍历需要 <span class="math inline">\(O(n)\)</span> 时间。</p>
</li>
<li>
<p>Q:左子树和右子树中存的值的大小有什么规律吗？<br>
A:对于一个节点，其左子树的值全小于该节点，右子树全大于该节点。</p>
</li>
</ul>
<p>那么恭喜你骚年，你学会了平衡树！</p>
<h2 id="code-for-luogu-p3369">Code For Luogu P3369</h2>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;climits&gt;
using namespace std;

struct AVLNode {
    int key;
    int height;    // 当前节点高度
    int size;      // 当前子树的总节点数（用于排名查询）
    AVLNode *left, *right;
    AVLNode(int val) : key(val), height(1), size(1), left(nullptr), right(nullptr) {}
};

// 获取节点高度（空节点高度为0）
int getHeight(AVLNode* node) {
    return node ? node-&gt;height : 0;
}

// 获取子树大小（空节点大小为0）
int getSize(AVLNode* node) {
    return node ? node-&gt;size : 0;
}

// 更新节点的高度和子树大小
void update(AVLNode* node) {
    node-&gt;height = max(getHeight(node-&gt;left), getHeight(node-&gt;right)) + 1;
    node-&gt;size = getSize(node-&gt;left) + getSize(node-&gt;right) + 1;
}

// 获取平衡因子（左子树高度 - 右子树高度）
int getBalance(AVLNode* node) {
    return node ? getHeight(node-&gt;left) - getHeight(node-&gt;right) : 0;
}

// 右旋（处理LL型失衡）
AVLNode* rightRotate(AVLNode* y) {
    AVLNode* x = y-&gt;left;
    AVLNode* T2 = x-&gt;right;

    // 旋转
    x-&gt;right = y;
    y-&gt;left = T2;

    // 更新高度和大小
    update(y);
    update(x);

    return x;  // 返回新的根节点
}

// 左旋（处理RR型失衡）
AVLNode* leftRotate(AVLNode* x) {
    AVLNode* y = x-&gt;right;
    AVLNode* T2 = y-&gt;left;

    // 旋转
    y-&gt;left = x;
    x-&gt;right = T2;

    // 更新高度和大小
    update(x);
    update(y);

    return y;  // 返回新的根节点
}

// 插入操作
AVLNode* insert(AVLNode* node, int key) {
    // 1. 标准BST插入
    if (!node) return new AVLNode(key);

    if (key &lt; node-&gt;key) {
        node-&gt;left = insert(node-&gt;left, key);
    } else if (key &gt; node-&gt;key) {
        node-&gt;right = insert(node-&gt;right, key);
    } else {
        return node;  // 重复值不插入
    }

    // 2. 更新当前节点高度和大小
    update(node);

    // 3. 检查平衡因子并调整
    int balance = getBalance(node);

    // LL型失衡（左子树更高，且左子树的左子树更高）
    if (balance &gt; 1 &amp;&amp; key &lt; node-&gt;left-&gt;key) {
        return rightRotate(node);
    }

    // RR型失衡（右子树更高，且右子树的右子树更高）
    if (balance &lt; -1 &amp;&amp; key &gt; node-&gt;right-&gt;key) {
        return leftRotate(node);
    }

    // LR型失衡（左子树更高，但左子树的右子树更高）
    if (balance &gt; 1 &amp;&amp; key &gt; node-&gt;left-&gt;key) {
        node-&gt;left = leftRotate(node-&gt;left);
        return rightRotate(node);
    }

    // RL型失衡（右子树更高，但右子树的左子树更高）
    if (balance &lt; -1 &amp;&amp; key &lt; node-&gt;right-&gt;key) {
        node-&gt;right = rightRotate(node-&gt;right);
        return leftRotate(node);
    }

    return node;  // 无需调整
}

// 找到子树中的最小节点（辅助删除操作）
AVLNode* findMinNode(AVLNode* node) {
    while (node-&gt;left) node = node-&gt;left;
    return node;
}

// 删除操作
AVLNode* remove(AVLNode* node, int key) {
    // 1. 标准BST删除
    if (!node) return nullptr;

    if (key &lt; node-&gt;key) {
        node-&gt;left = remove(node-&gt;left, key);
    } else if (key &gt; node-&gt;key) {
        node-&gt;right = remove(node-&gt;right, key);
    } else {
        // 情况1：节点是叶子或只有一个子节点
        if (!node-&gt;left || !node-&gt;right) {
            AVLNode* temp = node-&gt;left ? node-&gt;left : node-&gt;right;
            if (!temp) {  // 无子节点
                temp = node;
                node = nullptr;
            } else {     // 有一个子节点
                *node = *temp;  // 用子节点覆盖自身
            }
            delete temp;
        } 
        // 情况2：节点有两个子节点
        else {
            AVLNode* temp = findMinNode(node-&gt;right);  // 找到右子树的最小节点
            node-&gt;key = temp-&gt;key;                    // 用该节点的值替换自身
            node-&gt;right = remove(node-&gt;right, temp-&gt;key);  // 递归删除替换节点
        }
    }

    if (!node) return nullptr;  // 树为空则直接返回

    // 2. 更新高度和大小
    update(node);

    // 3. 检查平衡并调整
    int balance = getBalance(node);

    // LL型失衡
    if (balance &gt; 1 &amp;&amp; getBalance(node-&gt;left) &gt;= 0) {
        return rightRotate(node);
    }
    // LR型失衡
    if (balance &gt; 1 &amp;&amp; getBalance(node-&gt;left) &lt; 0) {
        node-&gt;left = leftRotate(node-&gt;left);
        return rightRotate(node);
    }
    // RR型失衡
    if (balance &lt; -1 &amp;&amp; getBalance(node-&gt;right) &lt;= 0) {
        return leftRotate(node);
    }
    // RL型失衡
    if (balance &lt; -1 &amp;&amp; getBalance(node-&gt;right) &gt; 0) {
        node-&gt;right = rightRotate(node-&gt;right);
        return leftRotate(node);
    }

    return node;  // 无需调整
}

// 查询值的排名（比key小的数的个数 +1）
int getRank(AVLNode* node, int key) {
    if (!node) return 1;
    if (key &lt; node-&gt;key) {
        return getRank(node-&gt;left, key);
    } else if (key &gt; node-&gt;key) {
        return getSize(node-&gt;left) + 1 + getRank(node-&gt;right, key);
    } else {
        return getSize(node-&gt;left) + 1;
    }
}

// 查询第k小的数
int getKth(AVLNode* node, int k) {
    int leftSize = getSize(node-&gt;left);
    if (k &lt;= leftSize) {
        return getKth(node-&gt;left, k);
    } else if (k == leftSize + 1) {
        return node-&gt;key;
    } else {
        return getKth(node-&gt;right, k - leftSize - 1);
    }
}

// 查询前驱（比key小的最大数）
int getPredecessor(AVLNode* node, int key) {
    if (!node) return INT_MIN;
    if (key &lt;= node-&gt;key) {
        return getPredecessor(node-&gt;left, key);
    } else {
        return max(node-&gt;key, getPredecessor(node-&gt;right, key));
    }
}

// 查询后继（比key大的最小数）
int getSuccessor(AVLNode* node, int key) {
    if (!node) return INT_MAX;
    if (key &gt;= node-&gt;key) {
        return getSuccessor(node-&gt;right, key);
    } else {
        return min(node-&gt;key, getSuccessor(node-&gt;left, key));
    }
}

int main() {
    AVLNode* root = nullptr;
    int Q, op, x;
    cin &gt;&gt; Q;
    while (Q--) {
        cin &gt;&gt; op &gt;&gt; x;
        switch (op) {
            case 1:  // 插入x
                root = insert(root, x);
                break;
            case 2:  // 删除x
                root = remove(root, x);
                break;
            case 3:  // 查询x的排名
                cout &lt;&lt; getRank(root, x) &lt;&lt; endl;
                break;
            case 4:  // 查询第k小的数
                cout &lt;&lt; getKth(root, x) &lt;&lt; endl;
                break;
            case 5:  // 查询x的前驱
                cout &lt;&lt; getPredecessor(root, x) &lt;&lt; endl;
                break;
            case 6:  // 查询x的后继
                cout &lt;&lt; getSuccessor(root, x) &lt;&lt; endl;
                break;
        }
    }
    return 0;
}
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.05907143737847222" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-02 19:41">2025-05-02 19:41</span>&nbsp;
<a href="https://www.cnblogs.com/CheeseFunction">吃奶酪的猫</a>&nbsp;
阅读(<span id="post_view_count">4</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18857521);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18857521', targetLink: 'https://www.cnblogs.com/CheeseFunction/p/18857521', title: '平衡树' })">举报</a>
</div>
        