
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mango0219/p/18671667" title="发布于 2025-03-27 20:37">
    <span role="heading" aria-level="2">Spring AOP 应用</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        AOP可以将一些公用的代码，自然的嵌入到指定方法的指定位置。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="spring-aop-应用">Spring AOP 应用</h1>
<h2 id="1-介绍">1. 介绍</h2>
<p>AOP：面向切面编程，对面向对象编程的一种补充。</p>
<p>AOP可以将一些公用的代码，自然的嵌入到指定方法的指定位置。</p>
<p>比如：</p>
<p><img src="https://image0219.oss-cn-hangzhou.aliyuncs.com/images/image-20240801160803027.png" alt="image-20240801160803027" loading="lazy"></p>
<p>如上图，我们现在有四个方法，我们想在每个方法执行一开始，输出一个日志信息。但是这样做很麻烦，如果有100个、1000个方法，工作量会很大，而且难以维护。这时候就可以通过AOP进行解决。</p>
<p><img src="https://image0219.oss-cn-hangzhou.aliyuncs.com/images/image-20240801161149526.png" alt="image-20240801161149526" loading="lazy"></p>
<hr>
<h2 id="2-案例实战">2. 案例实战</h2>
<h3 id="21-需求分析及环境搭建">2.1 需求分析及环境搭建</h3>
<p>环境：SpringBoot + SpringBoot Web + SpringBoot AOP。</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
    &lt;artifactId&gt;lombok&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<p>目标：控制器业务方法，统一进行日志输出。</p>
<p>新建<code>User</code>类，包含<code>id</code>和<code>name</code>属性。</p>
<p>新建<code>UserController</code></p>
<pre><code class="language-java">@RestController
@RequestMapping("/user")
public class UserController {
    @GetMapping("/list")
    public List&lt;User&gt; list(){
        return Arrays.asList(
                new User(1,"张三"),
                new User(2,"李四"),
                new User(3,"王五")
        );
    }
    @GetMapping("/getById/{id}")
    public User getById(@PathVariable("id") Integer id){
        return new User(id,"张三");
    }
    @GetMapping("/deleteById/{id}")
    public boolean deleteById(@PathVariable("id") Integer id){
        return true;
    }
}
</code></pre>
<p>此时，我们的目标就是使用AOP的方式，给这个<code>list</code>、<code>deleteById</code>和<code>getById</code>方法加上日志。</p>
<p>日志要包括调用方法的名称、返回值以及参数列表。</p>
<h3 id="23-aop实现">2.3 AOP实现</h3>
<p><strong>1. 首先我们要让AOP知道哪些方法需要被AOP处理 -&gt; 通过注解方式进行处理</strong></p>
<pre><code class="language-java">// 定义一个注解，来标记需要添加日志的方法
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface LogAnnotation {
    String value() default "";
}
</code></pre>
<p>定义好注解后，给需要使用日志的方法添加注解，如：</p>
<pre><code class="language-java">@LogAnnotation("查询用户")   // 标记目标方法
@GetMapping("/getById/{id}")
public User getById(@PathVariable("id") Integer id){
    return new User(id,"张三");
}
</code></pre>
<p><strong>2. 实现切面任务</strong></p>
<p>新建<code>LogAspect</code>类，这就是生成切面对象的类。我们需要用<code>@Component</code>注解进行标注，交给IOC容器进行管理。此外，我们要用<code>@Aspect</code>注解标注其为一个切面。</p>
<p>然后，我们要将这个切面与我们刚刚标注的<code>@LogAnnotation</code>注解建立联系，让切面知道从哪个位置进行切入。实现的方法为，新建一个方法，然后给这个方法添加<code>@Pointcut("@annotation(自定义注解的全类名)")</code>。这样就成功建立的联系。</p>
<p>确定切入点后，我们就可以写切面的实际任务了。新建一个方法<code>around</code>。此时，我们要将确定切点的方法与切面实际处理任务的方法进行关联。实现的方法为，给实际处理任务的方法添加<code>@Around("标记切点的方法名()")</code>注解。</p>
<p>此时，我们只有一个<code>around</code>方法，要用这一个方法对<code>list</code>、<code>getById</code>、<code>deleteById</code>三个方法进行处理。那么<code>around</code>方法如何分辨这三个不同的方法呢？这时就需要用到一个连接点对象<code>ProceedingJoinPoint</code>。<code>around</code>的返回值为object类型，其要返回所切入方法的返回值。</p>
<p>然后，就可以实现日志输出功能了。</p>
<pre><code class="language-java">@Aspect
@Component
@Slf4j
public class LogAspect {
    @Pointcut("@annotation(cn.codewei.aopstudy.annotation.LogAnnotation)")
    public void logPointCut() {
    }
    @Around("logPointCut()")
    public Object around(ProceedingJoinPoint point) throws Throwable {
        // 方法名称
        String name = point.getSignature().getName();
        // 通过反射 获取注解中的内容
        MethodSignature signature = (MethodSignature) point.getSignature();
        Method method = signature.getMethod();
        LogAnnotation annotation = method.getAnnotation(LogAnnotation.class);
        String value = annotation.value();
        // 输出日志
        log.info("方法名称：{}, 方法描述: {}, 返回值: {}, 参数列表: {}", name, value, point.proceed(), point.getArgs());
        // 返回切入方法的返回值
        return point.proceed();
    }
}
</code></pre>
<blockquote>
<p>@Around、@Before、@After区别</p>
<ul>
<li>@Before前置通知，是在所拦截方法执行之前执行一段逻辑，返回值类型为void。</li>
<li>@After 后置通知，是在所拦截方法执行之后执行一段逻辑，返回值类型为void。</li>
<li>@Around 环绕通知，是可以同时在所拦截方法的前后执行一段逻辑，用这个注解的方法入参传的是ProceedingJoinPoint，返回结果类型为Object，返回结果为ProceedingJoinPoint对象的.proceed();</li>
</ul>
</blockquote>
<h2 id="3-pointcut">3. @Pointcut</h2>
<ul>
<li><em>使用within表达式匹配</em></li>
</ul>
<p>​	匹配com.leo.controller包下所有的类的方法</p>
<pre><code class="language-java">@Pointcut("within(com.leo.controller..*)")
public void pointcutWithin(){
}
</code></pre>
<ul>
<li><em>this匹配目标指定的方法，此处就是HelloController的方法</em></li>
</ul>
<pre><code class="language-java">@Pointcut("this(com.leo.controller.HelloController)")
public void pointcutThis(){
}
</code></pre>
<ul>
<li><em>target匹配实现UserInfoService接口的目标对象</em></li>
</ul>
<pre><code class="language-java">@Pointcut("target(com.leo.service.UserInfoService)")
public void pointcutTarge(){
}
</code></pre>
<ul>
<li>
<p><em>bean匹配所有以Service结尾的bean里面的方法</em></p>
<p>注意：使用自动注入的时候默认实现类首字母小写为bean的id</p>
</li>
</ul>
<pre><code class="language-java">@Pointcut("bean(*ServiceImpl)")
public void pointcutBean(){
}
</code></pre>
<ul>
<li><em>args匹配第一个入参是String类型的方法</em></li>
</ul>
<pre><code class="language-java">@Pointcut("args(String, ..)")
public void pointcutArgs(){
}
</code></pre>
<ul>
<li><em>@annotation匹配是@Controller类型的方法</em></li>
</ul>
<pre><code class="language-java">@Pointcut("@annotation(org.springframework.stereotype.Controller)")
public void pointcutAnnocation(){
}
</code></pre>
<ul>
<li><em>@within匹配@Controller注解下的方法，要求注解的@Controller级别为@Retention(RetentionPolicy.CLASS)</em></li>
</ul>
<pre><code class="language-java">@Pointcut("@within(org.springframework.stereotype.Controller)")
public void pointcutWithinAnno(){
}
</code></pre>
<ul>
<li><em>@target匹配的是@Controller的类下面的方法，要求注解的@Controller级别为@Retention(RetentionPolicy.RUNTIME)</em></li>
</ul>
<pre><code class="language-java">@Pointcut("@target(org.springframework.stereotype.Controller)")
public void pointcutTargetAnno(){
}
</code></pre>
<ul>
<li><em>@args匹配参数中标注为@Sevice的注解的方法</em></li>
</ul>
<pre><code class="language-java">@Pointcut("@args(org.springframework.stereotype.Service)")
public void pointcutArgsAnno(){
}
</code></pre>
<ul>
<li><em>使用excution表达式</em></li>
</ul>
<pre><code class="language-java">@Pointcut(value = "execution(public * com.leo.controller.HelloController.hello*(..))")
public void pointCut() {
}
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5214895622060185" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-27 20:37">2025-03-27 20:37</span>&nbsp;
<a href="https://www.cnblogs.com/mango0219">mango0219</a>&nbsp;
阅读(<span id="post_view_count">71</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18671667" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18671667);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18671667', targetLink: 'https://www.cnblogs.com/mango0219/p/18671667', title: 'Spring AOP 应用' })">举报</a>
</div>
        