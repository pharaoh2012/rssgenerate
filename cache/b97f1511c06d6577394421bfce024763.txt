
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/707c/p/18994135" title="发布于 2025-07-20 16:41">
    <span role="heading" aria-level="2">k8s1.26安装和组件原理</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="一k8s126环境准备">一、k8s1.26环境准备</h1>
<pre><code class="language-bash">k-master 192.168.50.100
k-node1 192.168.50.101
k-node2 192.168.50.102

</code></pre>
<pre><code class="language-bash">安装docker 默认会安装containerd

config.toml里面需要配置

先要安装k8s才会有crictl命令

安装calico网络插件

v3.25

下载2个文件
修改自定义的文件，改为pod的dir网段才行
</code></pre>
<p>kubeadm init --apiserver-advertise-address=192.168.200.10 --kubernetes-version=v1.23.0 --service-cidr=10.96.0.0/16 --pod-network-cidr=10.244.0.0/16 --image-repository=registry.aliyuncs.com/google_containers</p>
<h2 id="1前置工作">1、前置工作</h2>
<h3 id="1关掉防火墙和selinux">1、关掉防火墙和selinux</h3>
<pre><code class="language-bash">systemctl disable firewalld.service --now
setenforce 0
vim /etc/selinux/config

</code></pre>
<h3 id="2关闭swap交换分区">2、关闭swap交换分区</h3>
<pre><code class="language-bash">swapoff -a
</code></pre>
<h3 id="3打开linux内核工具">3、打开linux内核工具</h3>
<pre><code class="language-bash">vim /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1 
net.bridge.bridge-nf-call-iptables = 1 
net.ipv4.ip_forward = 1 

sysctl -p /etc/sysctl.d/k8s.conf
</code></pre>
<h2 id="2重要工作">2、重要工作</h2>
<h3 id="1配置docker源和kubernetes源">1、配置docker源和kubernetes源</h3>
<pre><code class="language-bash">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo

[kubernetes]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=0
repo_gpgcheck=0
gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg

</code></pre>
<h3 id="2安装docker-ce">2、安装docker-ce</h3>
<pre><code class="language-bash">yum -y install docker-ce
systemctl enable docker --now
</code></pre>
<h3 id="3修改configtoml文件">3、修改config.toml文件</h3>
<pre><code class="language-bash">containerd config default &gt; /etc/containerd/config.toml

vim config.toml

SystemdCgroup = true
sandbox_image = "registry.aliyuncs.com/google_containers/pause:3.9"

# 配置拉取镜像策略
# 因为国内访问不到dockerhub或者其他，就需要使用一些magic
      [plugins."io.containerd.grpc.v1.cri".registry.mirrors]
         [plugins."io.containerd.grpc.v1.cri".registry.mirrors."registry.k8s.io"]  # 拉取registry.k8s.io镜像从下面网站拉取
            endpoint = ["https://registry-k8s-io.mirrors.sjtug.sjtu.edu.cn"]
         [plugins."io.containerd.grpc.v1.cri".registry.mirrors."docker.io"]  # 拉取docker.io镜像也是这样的
            endpoint = ["https://自己网站"]     

systemctl restart containerd
systemctl enable containerd
</code></pre>
<h3 id="4安装kubeletkubeadmkubectl">4、安装kubelet,kubeadm,kubectl</h3>
<pre><code class="language-bash">yum -y install kubelet-1.26.0 kubeadm-1.26.0 kubectl-1.26.0

# 启动kubelet
systemctl enable kubelet --now
</code></pre>
<h3 id="5设置容器运行时">5、设置容器运行时</h3>
<pre><code class="language-bash">crictl config runtime-endpoint unix:///var/run/containerd/containerd.sock

crictl config image-endpoint unix:///var/run/containerd/containerd.sock
</code></pre>
<h2 id="3只在master上面做">3、只在master上面做</h2>
<h3 id="1kubernetes初始化">1、kubernetes初始化</h3>
<pre><code class="language-bash">kubeadm init --apiserver-advertise-address=192.168.50.100 \
 --kubernetes-version=v1.26.0 \
 --pod-network-cidr=10.244.0.0/16 \
 --image-repository=registry.aliyuncs.com/google_containers
</code></pre>
<ul>
<li>
<p>--image-repository 拉取控制平面镜像的仓库，etcd,api-server等等</p>
</li>
<li>
<p>--apiserver-advertise-address master的地址</p>
</li>
<li>
<p>--pod-network-cid pod的网段</p>
</li>
</ul>
<h3 id="2加入node节点">2、加入node节点</h3>
<ul>
<li>node1,node2上面需要执行</li>
</ul>
<pre><code class="language-bash">[root@k-node1 ~]# kubeadm join 192.168.50.100:6443 --token q6tybk.47n9q7zymfpxeufi --discovery-token-ca-cert-hash sha256:d949c3809ba2f36425000119f9e7c7e29f3715aebd568b91eb8af309a86de09a
[preflight] Running pre-flight checks
	[WARNING FileExisting-tc]: tc not found in system path
[preflight] Reading configuration from the cluster...
[preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -o yaml'
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Starting the kubelet
[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...

This node has joined the cluster:
* Certificate signing request was sent to apiserver and a response was received.
* The Kubelet was informed of the new secure connection details.

Run 'kubectl get nodes' on the control-plane to see this node join the cluster.

[root@k-node2 containerd]# kubeadm join 192.168.50.100:6443 --token q6tybk.47n9q7zymfpxeufi --discovery-token-ca-cert-hash sha256:d949c3809ba2f36425000119f9e7c7e29f3715aebd568b91eb8af309a86de09a
</code></pre>
<ul>
<li>因为没有安装网络插件，节点直接的pod不能进行通信，因此是notready状态</li>
</ul>
<h3 id="3安装calico网络插件">3、安装calico网络插件</h3>
<ul>
<li>
<p>下载calico网络插件yaml文件</p>
</li>
<li>
<p>安装的版本是v3.25.2</p>
</li>
<li>
<p><a href="https://archive-os-3-25.netlify.app/calico/3.25/getting-started/kubernetes/quickstart" target="_blank" rel="noopener nofollow">https://archive-os-3-25.netlify.app/calico/3.25/getting-started/kubernetes/quickstart</a></p>
</li>
<li>
<p>下载2个yaml文件</p>
</li>
</ul>
<pre><code class="language-bash"># 直接进行应用
kubectl create -f tigera-operator.yaml

# 修改custom-resources.yaml中ip地址即可，为pod的网段地址即可
kubectl create -f custom-resources.yaml
</code></pre>
<pre><code class="language-bash">[root@k-master ~]# kubectl get pod -A
NAMESPACE          NAME                                       READY   STATUS    RESTARTS   AGE
calico-apiserver   calico-apiserver-5948d966b5-c5x9j          1/1     Running   0          70m
calico-apiserver   calico-apiserver-5948d966b5-q29qv          1/1     Running   0          70m
calico-system      calico-kube-controllers-84dd694985-znfdz   1/1     Running   0          72m
calico-system      calico-node-lf6f5                          1/1     Running   0          72m
calico-system      calico-node-rtbfq                          1/1     Running   0          72m
calico-system      calico-node-tcz85                          1/1     Running   0          72m
calico-system      calico-typha-665f4cfb48-4pzz5              1/1     Running   0          72m
calico-system      calico-typha-665f4cfb48-q8jnw              1/1     Running   0          72m
calico-system      csi-node-driver-b9fps                      2/2     Running   0          72m
calico-system      csi-node-driver-d4mr9                      2/2     Running   0          72m
calico-system      csi-node-driver-qzcwr                      2/2     Running   0          72m
default            centos8-demo                               1/1     Running   0          40m
kube-system        coredns-5bbd96d687-rsnp6                   1/1     Running   0          95m
kube-system        coredns-5bbd96d687-svq2d                   1/1     Running   0          95m
kube-system        etcd-k-master                              1/1     Running   0          95m
kube-system        kube-apiserver-k-master                    1/1     Running   0          95m
kube-system        kube-controller-manager-k-master           1/1     Running   0          95m
kube-system        kube-proxy-fgct4                           1/1     Running   0          93m
kube-system        kube-proxy-lfsvb                           1/1     Running   0          95m
kube-system        kube-proxy-mk56p                           1/1     Running   0          94m
kube-system        kube-scheduler-k-master                    1/1     Running   0          95m
tigera-operator    tigera-operator-66654c8696-gxkmg           1/1     Running   0          75m

</code></pre>
<h2 id="4查看node状态和创建pod测试网络">4、查看node状态和创建pod测试网络</h2>
<pre><code class="language-bash">[root@k-master ~]# kubectl get node
NAME       STATUS   ROLES           AGE   VERSION
k-master   Ready    control-plane   69m   v1.26.0
k-node1    Ready    &lt;none&gt;          68m   v1.26.0
k-node2    Ready    &lt;none&gt;          67m   v1.26.0

[root@k-master ~]# kubectl get pod 
NAME           READY   STATUS    RESTARTS   AGE
centos8-demo   1/1     Running   0          14m

[root@k-master ~]# kubectl exec -ti centos8-demo -- /bin/bash
[root@centos8-demo /]# ping qq.com
PING qq.com (113.108.81.189) 56(84) bytes of data.
64 bytes from 113.108.81.189 (113.108.81.189): icmp_seq=1 ttl=127 time=44.10 ms

</code></pre>
<h2 id="5补全功能">5、补全功能</h2>
<pre><code class="language-bash">echo 'source &lt;(kubectl completion bash)' /root/.bashrc

</code></pre>
<h1 id="二kubernets组件">二、kubernets组件</h1>
<h2 id="1api-server">1、api-server</h2>
<ul>
<li>
<p>接收外部请求的组件</p>
</li>
<li>
<p>集群的唯一入口，都需要通过这个来进行通信</p>
</li>
</ul>
<h2 id="2客户端kubectl">2、客户端kubectl</h2>
<ul>
<li>
<p>命令行工具</p>
</li>
<li>
<p>执行命令后会被api-server捕捉到</p>
</li>
</ul>
<h2 id="3sceduler组件">3、sceduler组件</h2>
<ul>
<li>负责pod调度到哪一个node上面，资源调度</li>
</ul>
<h2 id="4ectd组件">4、ectd组件</h2>
<ul>
<li>
<p>键值对数据库</p>
</li>
<li>
<p>分布式存储数据的</p>
</li>
<li>
<p>存储集群所有状态信息</p>
</li>
</ul>
<h2 id="5controller-manager组件">5、controller-manager组件</h2>
<ul>
<li>管理各种控制器</li>
</ul>
<h2 id="6kubelet组件">6、kubelet组件</h2>
<ul>
<li>
<p>每一个节点上面都有这个组件</p>
</li>
<li>
<p>负责pod的创建，等等操作</p>
</li>
<li>
<p>周期性的获取pod信息，返回给api-server</p>
</li>
<li>
<p>健康检查等等</p>
</li>
</ul>
<h2 id="7kube-proxy组件">7、kube-proxy组件</h2>
<ul>
<li>
<p>网络组件</p>
</li>
<li>
<p>实现pod之间的通信，pod和外部之间的通信</p>
</li>
<li>
<p>通过这个组件创建svc，从而实现了外部访问pod通信</p>
</li>
</ul>
<h1 id="三kubernetes资源">三、kubernetes资源</h1>
<h2 id="1pod">1、pod</h2>
<ul>
<li>一个pod可以有一个容器或者多个容器</li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.005555555555555556" data-date-updated="2025-07-20 16:49">2025-07-20 16:41</span>&nbsp;
<a href="https://www.cnblogs.com/707c">w7nn</a>&nbsp;
阅读(<span id="post_view_count">8</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18994135);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18994135', targetLink: 'https://www.cnblogs.com/707c/p/18994135', title: 'k8s1.26安装和组件原理' })">举报</a>
</div>
        