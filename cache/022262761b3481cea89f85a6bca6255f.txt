
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/feffery/p/18975138" title="发布于 2025-07-09 16:32">
    <span role="heading" aria-level="2">Python全栈应用开发利器Dash 3.x新版本介绍（4）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<center style="font-size: 18px; font-weight: bold; padding-top: 40px">更多Dash应用开发干货知识、案例，欢迎关注“玩转Dash”微信公众号👇</center>
<p><img src="https://img2024.cnblogs.com/blog/1344061/202507/1344061-20250703190053776-1837084116.png" alt="image" loading="lazy"></p>
<p>大家好我是费老师，在前几期文章中，我们针对<code>Python</code>生态中<u>强大</u>且<u>灵活</u>的<em>全栈应用开发</em>框架<code>Dash</code>，介绍了其<code>3.x</code>新版本中众多的新功能及特性：</p>
<ul>
<li><a href="https://www.cnblogs.com/feffery/p/18964220" target="_blank">Python全栈应用开发利器Dash 3.x新版本介绍（1）</a></li>
<li><a href="https://www.cnblogs.com/feffery/p/18965946" target="_blank">Python全栈应用开发利器Dash 3.x新版本介绍（2）</a></li>
<li><a href="https://www.cnblogs.com/feffery/p/18970945" target="_blank">回调函数支持异步写法！Dash 3.x新版本介绍（3）</a></li>
</ul>
<p>而今天的文章中，我们将继续介绍<code>Dash</code>3.x新版本中，针对<em>浏览器端回调</em>等更进阶的应用场景，新增的一些<em>实用方法</em>，从而进一步提升<code>Dash</code>应用开发的灵活性🥳。</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202507/1344061-20250709162725152-2064518186.png" width="50%"></center>
<h2 id="针对浏览器端环境新增dash_component_api模块">针对浏览器端环境新增dash_component_api模块</h2>
<p>新版本<code>Dash</code>，在应用运行的<em>浏览器端环境</em>中，新增了<code>dash_component_api</code>模块，可以通过<code>window.dash_component_api</code>或直接的<code>dash_component_api</code>进行引用，以<em>浏览器开发者工具</em>为例：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202507/1344061-20250709162729001-738713229.png"></center>
<p>对于常规的<code>Dash</code>应用开发者，日常主要可以用到其中的<code>getLayout()</code>和<code>stringifyId()</code>方法：</p>
<h3 id="使用getlayout方法自由获取组件信息">使用getLayout()方法自由获取组件信息</h3>
<p>我们先来学习<code>3.x</code>版本中新增的<code>dash_component_api.getLayout()</code>方法，只需要将目标组件的<code>id</code>作为参数传入，即可获得完整的目标组件信息，以下面的简单应用为例：</p>
<pre><code class="language-python">import dash
from dash import html
import feffery_antd_components as fac
from feffery_dash_utils.style_utils import style

app = dash.Dash(__name__)

app.layout = html.Div(
    [
        fac.AntdSpace(
            [
                fac.AntdButton("测试按钮1", id="test-button1", type="primary"),
                fac.AntdButton("测试按钮2", id="test-button2"),
                fac.AntdAlert(
                    id="test-alert",
                    message="提示信息示例",
                    description="描述信息示例",
                    showIcon=True,
                    action=fac.AntdButton("测试按钮3", type="primary", size="small"),
                ),
            ],
            direction="vertical",
            style=style(width="100%"),
        ),
    ],
    style=style(padding=50),
)

if __name__ == "__main__":
    app.run(debug=True)
</code></pre>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202507/1344061-20250709162731559-2066929204.png"></center>
<p>为了方便演示，下面我们都直接在<em>浏览器开发者工具/控制台</em>中举例演示，首先以<em>测试按钮1</em>为例，直接调用<code>getLayout()</code>方法传入其<code>id</code>属性，即可获得对应组件的全部信息，其中<code>props</code>字段具体记录了组件当前的相关属性值：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202507/1344061-20250709162740575-1922762622.png"></center>
<p>并且任何时候调用<code>getLayout()</code>，所获得的组件信息都是最新的，譬如我们点击<em>测试按钮1</em>几次后再次调用，可以看到<code>props</code>字段中对应的累计点击次数<code>nClicks</code>属性值：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202507/1344061-20250709162742505-823478930.png"></center>
<p>且对于嵌套形式的组件，<code>props</code>属性中对应的字段，也会完整的记录所嵌套组件信息，譬如<em>测试按钮3</em>是通过警告提示组件<code>AntdAlert</code>的组件型参数<code>action</code>传入的，调用<code>getLayout()</code>获取警告提示组件的信息后，可以看到<em>测试按钮3</em>相关的最新完整信息：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202507/1344061-20250709162744555-1481677997.png"></center>
<p>基于新方法<code>getLayout()</code>，我们就可以在<em>浏览器环境</em>中，随时随地随心所欲地获取<em>任何组件</em>的<em>任何信息</em>，对于擅长在<code>Dash</code>应用中编写<em>浏览器端回调函数</em>的朋友，这个新方法大幅提升了在<code>Dash</code>应用中集成<code>javascript</code>实现进阶拓展功能的自由度😎~</p>
<h3 id="使用stringifyid方法正确转换字典型id">使用stringifyId()方法正确转换字典型id</h3>
<p>我们都知道<code>Dash</code>应用中，组件的<code>id</code>除了常规的<em>字符型</em>以外，还支持传入<em>字典型</em>，这在<em>模式匹配回调</em>等进阶场景中非常实用。</p>
<p>但在<code>Dash</code>运行的浏览器端环境中，如果要针对这些字典型<code>id</code>目标元素进行定位，直接将原始的字典型<code>id</code>转字符串是行不通的，譬如下面的简单例子：</p>
<pre><code class="language-python">import dash
from dash import html
import feffery_antd_components as fac
from feffery_dash_utils.style_utils import style

app = dash.Dash(__name__)

app.layout = html.Div(
    [
        fac.AntdSpace(
            [
                fac.AntdButton(
                    "测试按钮1", id={"type": "test-button", "index": 1}, type="primary"
                )
            ],
            direction="vertical",
            style=style(width="100%"),
        ),
    ],
    style=style(padding=50),
)

if __name__ == "__main__":
    app.run(debug=True)
</code></pre>
<p>如果直接将原始的<code>id</code>值<code>{"type": "test-button", "index": 1}</code>转字符串后，执行相关<code>js</code>代码进行定位，是获取不到目标元素的：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202507/1344061-20250709162746745-1585734258.png"></center>
<p>但在新版本<code>Dash</code>中，我们就可以使用<code>stringifyId()</code>方法对字典型<code>id</code>进行有效的转换，从而实现<em>准确</em>的<em>元素定位</em>：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202507/1344061-20250709162748901-1970711872.png"></center>
<p>基于新版本<code>Dash</code>中针对<em>浏览器端运行环境</em>所提供的这些实用新方法，我们就可以更充分地融合<code>javascript</code>生态，通过<code>Dash</code>在<code>Python</code>生态与<code>javascript</code>生态中建立起高效的桥梁，高效实现更多定制化应用功能💪。</p>
<p>篇幅有限，更多新版本<code>Dash</code>更新相关内容，之后的文章中我们继续为大家盘点，敬请期待~</p>
<hr>
<p>以上就是本文的全部内容，对<code>Dash</code>应用开发感兴趣的朋友，欢迎添加微信号<code>CNFeffery</code>，备注“dash学习”加入我们的技术交流群，一起成长一起进步。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-09 16:33">2025-07-09 16:32</span>&nbsp;
<a href="https://www.cnblogs.com/feffery">费弗里</a>&nbsp;
阅读(<span id="post_view_count">89</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18975138);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18975138', targetLink: 'https://www.cnblogs.com/feffery/p/18975138', title: 'Python全栈应用开发利器Dash 3.x新版本介绍（4）' })">举报</a>
</div>
        