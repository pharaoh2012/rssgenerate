
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Firepad-magic/p/18731092" title="发布于 2025-02-22 17:42">
    <span role="heading" aria-level="2">在Unity中玩转表达式树：解锁游戏逻辑的动态魔法</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">

<br>
<div class="typora-export-content">
<div id="write" class=" first-line-indent">
<h1 id="在unity中玩转表达式树解锁游戏逻辑的动态魔法"><span>在Unity中玩转表达式树：解锁游戏逻辑的动态魔法</span></h1>
<blockquote>
<p><span>在Unity 2021 LTS版本中，结合</span><strong><span>Burst Compiler</span></strong><span>可以将表达式树编译后的委托性能提升至接近原生C++代码水平，特别适合高频调用的游戏系统（如物理伤害计算、AI决策等）</span></p>
<p><span>参考：</span><a href="https://www.youtube.com/watch?v=J0yr9bvTj2w" rel="noopener nofollow"><span>git-amend</span></a></p>
<p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.linq.expressions?view=net-9.0" rel="noopener nofollow"><span>Expression</span></a></p>
</blockquote>
<h2 id="一为什么要学习表达式树"><span>一、为什么要学习表达式树？</span></h2>
<p><span>传统Unity开发面临三大痛点：</span></p>
<ol start="">
<li><strong><span>逻辑固化</span></strong><span> - 编译后无法修改行为逻辑</span></li>
<li><strong><span>组件强耦合</span></strong><span> - GameObject之间依赖关系复杂</span></li>
<li><strong><span>动态性不足</span></strong><span> - 难以实现运行时逻辑热替换</span></li>
</ol>
<p><strong><span>表达式树(Expression Trees)</span></strong><span>技术通过将代码转换为可操作的数据结构，完美解决了这些问题。它允许我们：</span></p>
<ul>
<li><span>运行时动态构建逻辑运行时动态构建逻辑</span></li>
<li><span>实现组件间的弱耦合通信实现组件间的弱耦合通信</span></li>
<li><span>支持可视化配置游戏行为支持可视化配置游戏行为</span></li>
</ul>
<h2 id="二核心应用场景"><span>二、核心应用场景</span></h2>
<ol start="">
<li>
<p><span>动态技能系统</span></p>
</li>
<li>
<p><span>数据驱动AI</span></p>
<ul>
<li><span>通过JSON配置行为树</span></li>
<li><span>运行时解析并生成表达式</span></li>
<li><span>实现无需重新编译的AI逻辑更新</span></li>
</ul>
</li>
<li>
<p><span>MOD支持系统</span></p>
<ul>
<li><span>玩家自定义逻辑脚本</span></li>
<li><span>安全沙箱运行表达式</span></li>
<li><span>实时加载玩家创作内容</span></li>
</ul>
</li>
</ol>
<h2 id="三实战演示"><span>三、实战演示</span></h2>
<h3 id="一-属性获取器"><span>一、 属性获取器</span></h3>
<p><strong><span>传统模式缺陷：</span></strong></p>
<div class="CodeMirror cm-s-inner cm-s-null-scroll CodeMirror-wrap" lang="csharp">
<div style="overflow: hidden; position: relative; width: 3px; height: 0; top: 8px; left: 4px">&nbsp;</div>
<div class="CodeMirror-scrollbar-filler">&nbsp;</div>
<div class="CodeMirror-gutter-filler">&nbsp;</div>
<div class="CodeMirror-scroll">
<div class="CodeMirror-sizer" style="margin-left: 0; margin-bottom: 0; border-right-width: 0; padding-right: 0; padding-bottom: 0">
<div style="position: relative; top: 0">
<div class="CodeMirror-lines">
<div style="position: relative; outline: none">
<div class="CodeMirror-measure">
<pre><span>xxxxxxxxxx</span></pre>
</div>
<div class="CodeMirror-measure">&nbsp;</div>
<div style="position: relative; z-index: 1">&nbsp;</div>
<div class="CodeMirror-code">
<div class="CodeMirror-activeline" style="position: relative">
<div class="CodeMirror-activeline-background CodeMirror-linebackground">&nbsp;</div>
<div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0; width: 0">&nbsp;</div>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-keyword">public</span> <span class="cm-variable-3">int</span> <span class="cm-def">GetPlayerStat</span>(<span class="cm-variable">Player</span> <span class="cm-variable">p</span>, <span class="cm-variable-3">string</span> <span class="cm-variable">statName</span>)</span></pre>
</div>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px">{</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-keyword">switch</span>(<span class="cm-variable">statName</span>)</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">case</span> <span class="cm-string">"Health"</span>: <span class="cm-keyword">return</span> <span class="cm-variable">p</span>.<span class="cm-variable">Health</span>;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">case</span> <span class="cm-string">"Mana"</span>: <span class="cm-keyword">return</span> <span class="cm-variable">p</span>.<span class="cm-variable">Mana</span>;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 每新增一个属性需要修改此处</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  }</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px">}</span></pre>
</div>
</div>
</div>
</div>
</div>
<div style="position: absolute; height: 0; width: 1px; border-bottom: 0 solid rgba(0, 0, 0, 0); top: 180px">&nbsp;</div>
<div class="CodeMirror-gutters" style="display: none; height: 180px">&nbsp;</div>
</div>
</div>
<p><strong><span>表达式树：</span></strong></p>
<div class="CodeMirror cm-s-inner cm-s-null-scroll CodeMirror-wrap" lang="c#">
<div style="overflow: hidden; position: relative; width: 3px; height: 0; top: 8px; left: 4px">&nbsp;</div>
<div class="CodeMirror-scrollbar-filler">&nbsp;</div>
<div class="CodeMirror-gutter-filler">&nbsp;</div>
<div class="CodeMirror-scroll">
<div class="CodeMirror-sizer" style="margin-left: 0; margin-bottom: 0; border-right-width: 0; padding-right: 0; padding-bottom: 0">
<div style="position: relative; top: 0">
<div class="CodeMirror-lines">
<div style="position: relative; outline: none">
<div class="CodeMirror-measure">
<pre><span>xxxxxxxxxx</span></pre>
</div>
<div class="CodeMirror-measure">&nbsp;</div>
<div style="position: relative; z-index: 1">&nbsp;</div>
<div class="CodeMirror-code">
<div class="CodeMirror-activeline" style="position: relative">
<div class="CodeMirror-activeline-background CodeMirror-linebackground">&nbsp;</div>
<div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0; width: 0">&nbsp;</div>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-keyword">using</span> <span class="cm-variable">System</span>;</span></pre>
</div>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-keyword">using</span> <span class="cm-variable">System</span>.<span class="cm-variable">Linq</span>.<span class="cm-variable">Expressions</span>;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-keyword">using</span> <span class="cm-variable">UnityEngine</span>;</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">ExpressionTreeDemo</span> : <span class="cm-variable">MonoBehaviour</span> {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-keyword">void</span> <span class="cm-variable">Start</span>() {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Player</span> <span class="cm-variable">player</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> () { <span class="cm-variable">Health</span> <span class="cm-operator">=</span> <span class="cm-number">100</span> };</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">Func</span><span class="cm-operator">&lt;</span><span class="cm-variable">Player</span>, <span class="cm-variable-3">int</span><span class="cm-operator">&gt;</span> <span class="cm-variable">healthProperty</span> <span class="cm-operator">=</span> <span class="cm-variable">CreatePropertyGetter</span><span class="cm-operator">&lt;</span><span class="cm-variable">Player</span>, <span class="cm-variable-3">int</span><span class="cm-operator">&gt;</span>(<span class="cm-string">"Health"</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Debug</span>.<span class="cm-variable">Log</span>(<span class="cm-variable">$</span><span class="cm-string">"Player Health: {healthProperty(player)}"</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  }</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-keyword">public</span> <span class="cm-variable-3">int</span> <span class="cm-variable">GetPlayerStat</span>(<span class="cm-variable">Player</span> <span class="cm-variable">player</span>, <span class="cm-variable-3">string</span> <span class="cm-variable">statName</span>) {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">Func</span><span class="cm-operator">&lt;</span><span class="cm-variable">Player</span>, <span class="cm-variable-3">int</span><span class="cm-operator">&gt;</span> <span class="cm-variable">propertyGetter</span> <span class="cm-operator">=</span> <span class="cm-variable">CreatePropertyGetter</span><span class="cm-operator">&lt;</span><span class="cm-variable">Player</span>, <span class="cm-variable-3">int</span><span class="cm-operator">&gt;</span>(<span class="cm-variable">statName</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return</span> <span class="cm-variable">propertyGetter</span>(<span class="cm-variable">player</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  }</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-keyword">public</span> <span class="cm-variable-3">Func</span><span class="cm-operator">&lt;</span><span class="cm-variable">T</span>, <span class="cm-variable">TProperty</span><span class="cm-operator">&gt;</span> <span class="cm-variable">CreatePropertyGetter</span><span class="cm-operator">&lt;</span><span class="cm-variable">T</span>, <span class="cm-variable">TProperty</span><span class="cm-operator">&gt;</span>(<span class="cm-variable-3">string</span> <span class="cm-variable">propertyName</span>) {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">ParameterExpression</span> <span class="cm-variable">param</span> <span class="cm-operator">=</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">Parameter</span>(<span class="cm-keyword">typeof</span>(<span class="cm-variable">T</span>), <span class="cm-string">"x"</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">MemberExpression</span> <span class="cm-variable">property</span> <span class="cm-operator">=</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">Property</span>(<span class="cm-variable">param</span>, <span class="cm-variable">propertyName</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Expression</span><span class="cm-operator">&lt;</span><span class="cm-variable-3">Func</span><span class="cm-operator">&lt;</span><span class="cm-variable">T</span>, <span class="cm-variable">TProperty</span><span class="cm-operator">&gt;&gt;</span> <span class="cm-variable">lambda</span> <span class="cm-operator">=</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">Lambda</span><span class="cm-operator">&lt;</span><span class="cm-variable-3">Func</span><span class="cm-operator">&lt;</span><span class="cm-variable">T</span>, <span class="cm-variable">TProperty</span><span class="cm-operator">&gt;&gt;</span>(<span class="cm-variable">property</span>, <span class="cm-variable">param</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return</span> <span class="cm-variable">lambda</span>.<span class="cm-variable">Compile</span>();</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  }</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px">}</span></pre>
</div>
</div>
</div>
</div>
</div>
<div style="position: absolute; height: 0; width: 1px; border-bottom: 0 solid rgba(0, 0, 0, 0); top: 560px">&nbsp;</div>
<div class="CodeMirror-gutters" style="display: none; height: 560px">&nbsp;</div>
</div>
</div>
<p><strong><span>应用场景</span></strong><span>：获取对象属性</span> <strong><span>技术要点</span></strong><span>：</span></p>
<ol start="">
<li><span>属性访问表达式属性访问表达式：Expression.Property</span></li>
</ol>
<h3 id="二条件触发系统"><span>二、条件触发系统</span></h3>
<div class="CodeMirror cm-s-inner cm-s-null-scroll CodeMirror-wrap" lang="c#">
<div style="overflow: hidden; position: relative; width: 3px; height: 0; top: 8px; left: 4px">&nbsp;</div>
<div class="CodeMirror-scrollbar-filler">&nbsp;</div>
<div class="CodeMirror-gutter-filler">&nbsp;</div>
<div class="CodeMirror-scroll">
<div class="CodeMirror-sizer" style="margin-left: 0; margin-bottom: 0; border-right-width: 0; padding-right: 0; padding-bottom: 0">
<div style="position: relative; top: 0">
<div class="CodeMirror-lines">
<div style="position: relative; outline: none">
<div class="CodeMirror-measure">
<pre><span>xxxxxxxxxx</span></pre>
</div>
<div class="CodeMirror-measure">&nbsp;</div>
<div style="position: relative; z-index: 1">&nbsp;</div>
<div class="CodeMirror-code">
<div class="CodeMirror-activeline" style="position: relative">
<div class="CodeMirror-activeline-background CodeMirror-linebackground">&nbsp;</div>
<div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0; width: 0">&nbsp;</div>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">ConditionTrigger</span> : <span class="cm-variable">MonoBehaviour</span> </span></pre>
</div>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px">{</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-keyword">public</span> <span class="cm-variable-3">string</span> <span class="cm-variable">ConditionExpression</span> <span class="cm-operator">=</span> <span class="cm-string">"Player.Health.CurrentHP &lt; 0.3"</span>;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-keyword">public</span> <span class="cm-variable">GameObject</span> <span class="cm-variable">ContextObject</span>;</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-keyword">private</span> <span class="cm-variable-3">Func</span><span class="cm-operator">&lt;</span><span class="cm-variable">GameObject</span>, <span class="cm-variable-3">bool</span><span class="cm-operator">&gt;</span> <span class="cm-variable">_compiledCondition</span>;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-keyword">private</span> <span class="cm-keyword">static</span> <span class="cm-variable">Dictionary</span><span class="cm-operator">&lt;</span><span class="cm-variable-3">string</span>, <span class="cm-variable-3">Func</span><span class="cm-operator">&lt;</span><span class="cm-variable">GameObject</span>, <span class="cm-variable-3">bool</span><span class="cm-operator">&gt;&gt;</span> <span class="cm-variable">_cache</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span>();</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-keyword">void</span> <span class="cm-variable">Start</span>()</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">if</span> (<span class="cm-operator">!</span><span class="cm-variable">_cache</span>.<span class="cm-variable">TryGetValue</span>(<span class="cm-variable">ConditionExpression</span>, <span class="cm-keyword">out</span> <span class="cm-variable">_compiledCondition</span>))</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp;  {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">var</span> <span class="cm-def">elements</span> <span class="cm-operator">=</span> <span class="cm-variable">ConditionExpression</span>.<span class="cm-variable">Split</span>(<span class="cm-string">'.'</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">var</span> <span class="cm-def">rootObj</span> <span class="cm-operator">=</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">Parameter</span>(<span class="cm-keyword">typeof</span>(<span class="cm-variable">GameObject</span>), <span class="cm-string">"context"</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Expression</span> <span class="cm-variable">accessChain</span> <span class="cm-operator">=</span> <span class="cm-variable">rootObj</span>;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">foreach</span> (<span class="cm-keyword">var</span> <span class="cm-def">element</span> <span class="cm-keyword">in</span> <span class="cm-variable">elements</span>.<span class="cm-variable">Skip</span>(<span class="cm-number">1</span>))</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">accessChain</span> <span class="cm-operator">=</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">PropertyOrField</span>(<span class="cm-variable">accessChain</span>, <span class="cm-variable">element</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">var</span> <span class="cm-def">conditionExpr</span> <span class="cm-operator">=</span> <span class="cm-variable">BuildComparison</span>(<span class="cm-variable">accessChain</span>, <span class="cm-string">"&lt;"</span>, <span class="cm-variable">Expression</span>.<span class="cm-variable">Constant</span>(<span class="cm-number">0.3f</span>));</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">_compiledCondition</span> <span class="cm-operator">=</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">Lambda</span><span class="cm-operator">&lt;</span><span class="cm-variable-3">Func</span><span class="cm-operator">&lt;</span><span class="cm-variable">GameObject</span>, <span class="cm-variable-3">bool</span><span class="cm-operator">&gt;&gt;</span>(<span class="cm-variable">conditionExpr</span>, <span class="cm-variable">rootObj</span>).<span class="cm-variable">Compile</span>();</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">_cache</span>[<span class="cm-variable">ConditionExpression</span>] <span class="cm-operator">=</span> <span class="cm-variable">_compiledCondition</span>;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp;  }</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  }</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-keyword">void</span> <span class="cm-variable">Update</span>()</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">if</span> (<span class="cm-variable">_compiledCondition</span>(<span class="cm-variable">ContextObject</span>))</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp;  {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Debug</span>.<span class="cm-variable">Log</span>(<span class="cm-string">"触发条件！"</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp;  }</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  }</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-keyword">private</span> <span class="cm-variable">Expression</span> <span class="cm-variable">BuildComparison</span>(<span class="cm-variable">Expression</span> <span class="cm-variable">left</span>, <span class="cm-variable-3">string</span> <span class="cm-variable">operatorStr</span>, <span class="cm-variable">Expression</span> <span class="cm-variable">right</span>)</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return</span> <span class="cm-variable">operatorStr</span> <span class="cm-keyword">switch</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp;  {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"&lt;"</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">LessThan</span>(<span class="cm-variable">left</span>, <span class="cm-variable">right</span>),</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"&gt;"</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">GreaterThan</span>(<span class="cm-variable">left</span>, <span class="cm-variable">right</span>),</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"=="</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">Equal</span>(<span class="cm-variable">left</span>, <span class="cm-variable">right</span>),</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"!="</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">NotEqual</span>(<span class="cm-variable">left</span>, <span class="cm-variable">right</span>),</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"&lt;="</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">LessThanOrEqual</span>(<span class="cm-variable">left</span>, <span class="cm-variable">right</span>),</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"&gt;="</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">GreaterThanOrEqual</span>(<span class="cm-variable">left</span>, <span class="cm-variable">right</span>),</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">_</span> <span class="cm-operator">=&gt;</span> <span class="cm-keyword">throw</span> <span class="cm-keyword">new</span> <span class="cm-variable">NotSupportedException</span>(<span class="cm-variable">$</span><span class="cm-string">"不支持的运算符: {operatorStr}"</span>)</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp;  };</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  }</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px">}</span></pre>
</div>
</div>
</div>
</div>
</div>
<div style="position: absolute; height: 0; width: 1px; border-bottom: 0 solid rgba(0, 0, 0, 0); top: 1120px">&nbsp;</div>
<div class="CodeMirror-gutters" style="display: none; height: 1120px">&nbsp;</div>
</div>
</div>
<p><strong><span>应用场景</span></strong><span>：动态游戏事件触发</span> <strong><span>优势对比</span></strong><span>：</span></p>
<table>
<thead>
<tr><th><span>传统方式</span></th><th><span>表达式树方案</span></th></tr>
</thead>
<tbody>
<tr>
<td><span>硬编码条件判断</span></td>
<td><span>支持运行时修改条件逻辑</span></td>
</tr>
<tr>
<td><span>需要预定义所有情况</span></td>
<td><span>可通过配置文件动态加载</span></td>
</tr>
</tbody>
</table>
<h3 id="三行为链组合"><span>三、行为链组合</span></h3>
<div class="CodeMirror cm-s-inner cm-s-null-scroll CodeMirror-wrap" lang="c#">
<div style="overflow: hidden; position: relative; width: 3px; height: 0; top: 8px; left: 4px">&nbsp;</div>
<div class="CodeMirror-scrollbar-filler">&nbsp;</div>
<div class="CodeMirror-gutter-filler">&nbsp;</div>
<div class="CodeMirror-scroll">
<div class="CodeMirror-sizer" style="margin-left: 0; margin-bottom: 0; border-right-width: 0; padding-right: 0; padding-bottom: 0">
<div style="position: relative; top: 0">
<div class="CodeMirror-lines">
<div style="position: relative; outline: none">
<div class="CodeMirror-measure">
<pre><span>xxxxxxxxxx</span></pre>
</div>
<div class="CodeMirror-measure">&nbsp;</div>
<div style="position: relative; z-index: 1">&nbsp;</div>
<div class="CodeMirror-code">
<div class="CodeMirror-activeline" style="position: relative">
<div class="CodeMirror-activeline-background CodeMirror-linebackground">&nbsp;</div>
<div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0; width: 0">&nbsp;</div>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-keyword">using</span> <span class="cm-variable">System</span>;</span></pre>
</div>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-keyword">using</span> <span class="cm-variable">System</span>.<span class="cm-variable">Collections</span>.<span class="cm-variable">Generic</span>;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-keyword">using</span> <span class="cm-variable">System</span>.<span class="cm-variable">Linq</span>;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-keyword">using</span> <span class="cm-variable">System</span>.<span class="cm-variable">Linq</span>.<span class="cm-variable">Expressions</span>;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-keyword">using</span> <span class="cm-variable">UnityEngine</span>;</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-comment">// 使用示例</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">ComboExample</span> : <span class="cm-variable">MonoBehaviour</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px">{</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-keyword">private</span> <span class="cm-variable">ComboSystem</span> <span class="cm-variable">_comboSystem</span>;</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-keyword">void</span> <span class="cm-variable">Start</span>()</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">_comboSystem</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">ComboSystem</span>();</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 添加连招动作</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">_comboSystem</span>.<span class="cm-variable">ActionExpressions</span>.<span class="cm-variable">Add</span>(<span class="cm-variable">GetComboExpression</span>(<span class="cm-keyword">typeof</span>(<span class="cm-variable">AttackAnimation</span>), <span class="cm-variable">nameof</span>(<span class="cm-variable">AttackAnimation</span>.<span class="cm-variable">Play</span>), <span class="cm-variable">Expression</span>.<span class="cm-variable">Constant</span>(<span class="cm-string">"SwordSwing"</span>)));</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">_comboSystem</span>.<span class="cm-variable">ActionExpressions</span>.<span class="cm-variable">Add</span>(<span class="cm-variable">GetComboExpression</span>(<span class="cm-keyword">typeof</span>(<span class="cm-variable">EffectsManager</span>), <span class="cm-variable">nameof</span>(<span class="cm-variable">EffectsManager</span>.<span class="cm-variable">Spawn</span>), <span class="cm-variable">Expression</span>.<span class="cm-variable">Constant</span>(<span class="cm-string">"SwordHit"</span>)));</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">_comboSystem</span>.<span class="cm-variable">ActionExpressions</span>.<span class="cm-variable">Add</span>(<span class="cm-variable">GetComboExpression</span>(<span class="cm-keyword">typeof</span>(<span class="cm-variable">AttackAnimation</span>), <span class="cm-variable">nameof</span>(<span class="cm-variable">AttackAnimation</span>.<span class="cm-variable">Play</span>), <span class="cm-variable">Expression</span>.<span class="cm-variable">Constant</span>(<span class="cm-string">"SwordSwing2"</span>)));</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">_comboSystem</span>.<span class="cm-variable">ActionExpressions</span>.<span class="cm-variable">Add</span>(<span class="cm-variable">GetComboExpression</span>(<span class="cm-keyword">typeof</span>(<span class="cm-variable">DamageCalculator</span>), <span class="cm-variable">nameof</span>(<span class="cm-variable">DamageCalculator</span>.<span class="cm-variable">Apply</span>), <span class="cm-variable">Expression</span>.<span class="cm-variable">Constant</span>(<span class="cm-keyword">new</span> <span class="cm-variable">Vector3</span>(<span class="cm-number">0</span>, <span class="cm-number">1</span>, <span class="cm-number">0</span>)), <span class="cm-variable">Expression</span>.<span class="cm-variable">Constant</span>(<span class="cm-number">100f</span>)));</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 执行连招</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">_comboSystem</span>.<span class="cm-variable">ExecuteCombo</span>();</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  }</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-variable">Expression</span><span class="cm-operator">&lt;</span><span class="cm-variable-3">Action</span><span class="cm-operator">&gt;</span> <span class="cm-variable">GetComboExpression</span>(<span class="cm-variable">Type</span> <span class="cm-variable">type</span>, <span class="cm-variable-3">string</span> <span class="cm-variable">methodName</span>, <span class="cm-keyword">params</span> <span class="cm-variable">Expression</span>[] <span class="cm-variable">args</span>)</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">Lambda</span><span class="cm-operator">&lt;</span><span class="cm-variable-3">Action</span><span class="cm-operator">&gt;</span>(<span class="cm-variable">Expression</span>.<span class="cm-variable">Call</span>(<span class="cm-variable">type</span>, <span class="cm-variable">methodName</span>, <span class="cm-atom">null</span>, <span class="cm-variable">args</span>));</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  }</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px">}</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">ComboSystem</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px">{</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-comment">// 存储动作表达式的列表</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-keyword">public</span> <span class="cm-variable">List</span><span class="cm-operator">&lt;</span><span class="cm-variable">Expression</span><span class="cm-operator">&lt;</span><span class="cm-variable-3">Action</span><span class="cm-operator">&gt;&gt;</span> <span class="cm-variable">ActionExpressions</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span>();</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-comment">// 执行连招</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-keyword">public</span> <span class="cm-keyword">void</span> <span class="cm-variable">ExecuteCombo</span>()</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 构建复合表达式</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">var</span> <span class="cm-def">comboBlock</span> <span class="cm-operator">=</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">Block</span>(</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">ActionExpressions</span>.<span class="cm-variable">Select</span>(<span class="cm-variable">exp</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">exp</span>.<span class="cm-variable">Body</span>)</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp;  );</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 创建最终的表达式</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">//Compile() 方法将 Lambda 表达式编译为可执行的委托。</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">//Invoke() 方法调用该委托，从而执行块中的所有表达式。</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">var</span> <span class="cm-def">finalExpr</span> <span class="cm-operator">=</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">Lambda</span><span class="cm-operator">&lt;</span><span class="cm-variable-3">Action</span><span class="cm-operator">&gt;</span>(<span class="cm-variable">comboBlock</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">finalExpr</span>.<span class="cm-variable">Compile</span>().<span class="cm-variable">Invoke</span>(); <span class="cm-comment">// 执行连招</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  }</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px">}</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-comment">// 示例动作类</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">AttackAnimation</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px">{</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-keyword">public</span> <span class="cm-keyword">static</span> <span class="cm-keyword">void</span> <span class="cm-variable">Play</span>(<span class="cm-variable-3">string</span> <span class="cm-variable">animationName</span>)</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Debug</span>.<span class="cm-variable">Log</span>(<span class="cm-variable">$</span><span class="cm-string">"播放动画: {animationName}"</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  }</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px">}</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">EffectsManager</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px">{</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-keyword">public</span> <span class="cm-keyword">static</span> <span class="cm-keyword">void</span> <span class="cm-variable">Spawn</span>(<span class="cm-variable-3">string</span> <span class="cm-variable">effectName</span>)</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Debug</span>.<span class="cm-variable">Log</span>(<span class="cm-variable">$</span><span class="cm-string">"生成特效: {effectName}"</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  }</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px">}</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">DamageCalculator</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px">{</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-keyword">public</span> <span class="cm-keyword">static</span> <span class="cm-keyword">void</span> <span class="cm-variable">Apply</span>(<span class="cm-variable">Vector3</span> <span class="cm-variable">position</span>, <span class="cm-variable-3">float</span> <span class="cm-variable">damage</span>)</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Debug</span>.<span class="cm-variable">Log</span>(<span class="cm-variable">$</span><span class="cm-string">"应用伤害: {damage} 到位置: {position}"</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  }</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px">}</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-comment">//生成特效: SwordHit</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-comment">//播放动画: SwordSwing2</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-comment">//应用伤害: 100 到位置: (0.00, 1.00, 0.00)</span></span></pre>
</div>
</div>
</div>
</div>
</div>
<div style="position: absolute; height: 0; width: 1px; border-bottom: 0 solid rgba(0, 0, 0, 0); top: 1820px">&nbsp;</div>
<div class="CodeMirror-gutters" style="display: none; height: 1820px">&nbsp;</div>
</div>
</div>
<blockquote>
<p><strong><span>Expression.Block:</span></strong></p>
<p><code>Expression.Block</code><span> 是一个非常强大的功能，它允许我们将多个表达式组合成一个块（block），并在执行时按顺序执行这些表达式。</span></p>
</blockquote>
<p>&nbsp;</p>
<h3 id="四运行时状态机"><span>四、运行时状态机</span></h3>
<div class="CodeMirror cm-s-inner cm-s-null-scroll CodeMirror-wrap" lang="c#">
<div style="overflow: hidden; position: relative; width: 3px; height: 0; top: 8px; left: 4px">&nbsp;</div>
<div class="CodeMirror-scrollbar-filler">&nbsp;</div>
<div class="CodeMirror-gutter-filler">&nbsp;</div>
<div class="CodeMirror-scroll">
<div class="CodeMirror-sizer" style="margin-left: 0; margin-bottom: 0; border-right-width: 0; padding-right: 0; padding-bottom: 0">
<div style="position: relative; top: 0">
<div class="CodeMirror-lines">
<div style="position: relative; outline: none">
<div class="CodeMirror-measure">
<pre><span>xxxxxxxxxx</span></pre>
</div>
<div class="CodeMirror-measure">&nbsp;</div>
<div style="position: relative; z-index: 1">&nbsp;</div>
<div class="CodeMirror-code">
<div class="CodeMirror-activeline" style="position: relative">
<div class="CodeMirror-activeline-background CodeMirror-linebackground">&nbsp;</div>
<div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0; width: 0">&nbsp;</div>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-keyword">using</span> <span class="cm-variable">System</span>;</span></pre>
</div>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-keyword">using</span> <span class="cm-variable">System</span>.<span class="cm-variable">Linq</span>.<span class="cm-variable">Expressions</span>;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-keyword">using</span> <span class="cm-variable">System</span>.<span class="cm-variable">Reflection</span>;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-keyword">using</span> <span class="cm-variable">UnityEngine</span>;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-keyword">using</span> <span class="cm-variable-3">Object</span> <span class="cm-operator">=</span> <span class="cm-variable">UnityEngine</span>.<span class="cm-variable-3">Object</span>;</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"><span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">EnemyStateMachine</span> : <span class="cm-variable">MonoBehaviour</span> {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-comment">//定义状态机委托，以Enemy和Hero为参数，返回一个以Enemy和Hero为参数的空方法</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-comment">//它会根据英雄的状态（如生命值和距离）返回一个相应的行为函数。</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-variable-3">Func</span><span class="cm-operator">&lt;</span><span class="cm-variable">Enemy</span>, <span class="cm-variable">Hero</span>, <span class="cm-variable-3">Action</span><span class="cm-operator">&lt;</span><span class="cm-variable">Enemy</span>, <span class="cm-variable">Hero</span><span class="cm-operator">&gt;&gt;</span> <span class="cm-variable">stateEvaluator</span>;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-comment">//存储当前行为函数</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-variable-3">Action</span><span class="cm-operator">&lt;</span><span class="cm-variable">Enemy</span>, <span class="cm-variable">Hero</span><span class="cm-operator">&gt;</span> <span class="cm-variable">behavior</span>;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-variable">Enemy</span> <span class="cm-variable">enemy</span>;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-variable">Hero</span> <span class="cm-variable">hero</span>;</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-keyword">void</span> <span class="cm-variable">Start</span>() {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">enemy</span> <span class="cm-operator">=</span> <span class="cm-variable">FindObjectOfType</span><span class="cm-operator">&lt;</span><span class="cm-variable">Enemy</span><span class="cm-operator">&gt;</span>();</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">hero</span> <span class="cm-operator">=</span> <span class="cm-variable">FindObjectOfType</span><span class="cm-operator">&lt;</span><span class="cm-variable">Hero</span><span class="cm-operator">&gt;</span>();</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">stateEvaluator</span> <span class="cm-operator">=</span> <span class="cm-variable">CreateDynamicStateMachine</span>();</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  }</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-keyword">void</span> <span class="cm-variable">Update</span>() {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">//获取当前行为</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">behavior</span> <span class="cm-operator">=</span> <span class="cm-variable">stateEvaluator</span>(<span class="cm-variable">enemy</span>, <span class="cm-variable">hero</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">//执行当前行为</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">behavior</span>(<span class="cm-variable">enemy</span>, <span class="cm-variable">hero</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Debug</span>.<span class="cm-variable">Log</span>(<span class="cm-string">"Enemy Aggression Level:"</span>, <span class="cm-variable">enemy</span>.<span class="cm-variable">AggressionLevel</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  }</span></pre>
<pre class=" CodeMirror-line "></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-keyword">public</span> <span class="cm-variable-3">Func</span><span class="cm-operator">&lt;</span><span class="cm-variable">Enemy</span>, <span class="cm-variable">Hero</span>, <span class="cm-variable-3">Action</span><span class="cm-operator">&lt;</span><span class="cm-variable">Enemy</span>, <span class="cm-variable">Hero</span><span class="cm-operator">&gt;&gt;</span> <span class="cm-variable">CreateDynamicStateMachine</span>() {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">//定义参数表达式</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">ParameterExpression</span> <span class="cm-variable">enemyParam</span> <span class="cm-operator">=</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">Parameter</span>(<span class="cm-keyword">typeof</span>(<span class="cm-variable">Enemy</span>), <span class="cm-string">"enemy"</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">ParameterExpression</span> <span class="cm-variable">heroParam</span> <span class="cm-operator">=</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">Parameter</span>(<span class="cm-keyword">typeof</span>(<span class="cm-variable">Hero</span>), <span class="cm-string">"hero"</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">//定义一个二元表达式</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">BinaryExpression</span> <span class="cm-variable">heroLowHealth</span> <span class="cm-operator">=</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">LessThan</span>(</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Expression</span>.<span class="cm-variable">Property</span>(<span class="cm-variable">heroParam</span>, <span class="cm-string">"Health"</span>),</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Expression</span>.<span class="cm-variable">Constant</span>(<span class="cm-number">30</span>)</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp;  );</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">BinaryExpression</span> <span class="cm-variable">heroNear</span> <span class="cm-operator">=</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">LessThan</span>(</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Expression</span>.<span class="cm-variable">Property</span>(<span class="cm-variable">heroParam</span>, <span class="cm-string">"Distance"</span>),</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Expression</span>.<span class="cm-variable">Constant</span>(<span class="cm-number">10f</span>)</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp;  );</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Debug</span>.<span class="cm-variable">Log</span>(<span class="cm-variable">$</span><span class="cm-string">"HeroLowHealth{heroLowHealth}"</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Debug</span>.<span class="cm-variable">Log</span>(<span class="cm-variable">$</span><span class="cm-string">"HeroNear{heroNear}"</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">var</span> <span class="cm-def">attack</span> <span class="cm-operator">=</span> <span class="cm-variable">CreateActionExpression</span>(<span class="cm-string">"Attack"</span>).<span class="cm-variable">Compile</span>();</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">var</span> <span class="cm-def">taunt</span> <span class="cm-operator">=</span> <span class="cm-variable">CreateActionExpression</span>(<span class="cm-string">"Taunt"</span>).<span class="cm-variable">Compile</span>();</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">var</span> <span class="cm-def">patrol</span> <span class="cm-operator">=</span> <span class="cm-variable">CreateActionExpression</span>(<span class="cm-string">"Patrol"</span>).<span class="cm-variable">Compile</span>();</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">//条件表达式，如果heroNear为真则执行taunt，否则执行patrol</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">ConditionalExpression</span> <span class="cm-variable">tauntOrPatrol</span> <span class="cm-operator">=</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">Condition</span>(<span class="cm-variable">heroNear</span>, <span class="cm-variable">Expression</span>.<span class="cm-variable">Constant</span>(<span class="cm-variable">taunt</span>), <span class="cm-variable">Expression</span>.<span class="cm-variable">Constant</span>(<span class="cm-variable">patrol</span>));</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">ConditionalExpression</span> <span class="cm-variable">finalCondition</span> <span class="cm-operator">=</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">Condition</span>(<span class="cm-variable">heroLowHealth</span>, <span class="cm-variable">Expression</span>.<span class="cm-variable">Constant</span>(<span class="cm-variable">attack</span>), <span class="cm-variable">tauntOrPatrol</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">//</span></span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">var</span> <span class="cm-def">lambda</span> <span class="cm-operator">=</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">Lambda</span><span class="cm-operator">&lt;</span><span class="cm-variable-3">Func</span><span class="cm-operator">&lt;</span><span class="cm-variable">Enemy</span>, <span class="cm-variable">Hero</span>, <span class="cm-variable-3">Action</span><span class="cm-operator">&lt;</span><span class="cm-variable">Enemy</span>, <span class="cm-variable">Hero</span><span class="cm-operator">&gt;&gt;&gt;</span>(<span class="cm-variable">finalCondition</span>, <span class="cm-variable">enemyParam</span>, <span class="cm-variable">heroParam</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return</span> <span class="cm-variable">lambda</span>.<span class="cm-variable">Compile</span>();</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  }</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp;<span class="cm-variable">Expression</span><span class="cm-operator">&lt;</span><span class="cm-variable-3">Action</span><span class="cm-operator">&lt;</span><span class="cm-variable">Enemy</span>, <span class="cm-variable">Hero</span><span class="cm-operator">&gt;&gt;</span> <span class="cm-variable">CreateActionExpression</span>(<span class="cm-variable-3">string</span> <span class="cm-variable">methodName</span>) {</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">ParameterExpression</span> <span class="cm-variable">enemyParam</span> <span class="cm-operator">=</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">Parameter</span>(<span class="cm-keyword">typeof</span>(<span class="cm-variable">Enemy</span>), <span class="cm-string">"enemy"</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">ParameterExpression</span> <span class="cm-variable">heroParam</span> <span class="cm-operator">=</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">Parameter</span>(<span class="cm-keyword">typeof</span>(<span class="cm-variable">Hero</span>), <span class="cm-string">"hero"</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">MethodInfo</span> <span class="cm-variable">method</span> <span class="cm-operator">=</span> <span class="cm-keyword">typeof</span>(<span class="cm-variable">Enemy</span>).<span class="cm-variable">GetMethod</span>(<span class="cm-variable">methodName</span>, <span class="cm-keyword">new</span>[] { <span class="cm-keyword">typeof</span>(<span class="cm-variable">Hero</span>) });</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">MethodCallExpression</span> <span class="cm-variable">call</span> <span class="cm-operator">=</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">Call</span>(<span class="cm-variable">enemyParam</span>, <span class="cm-variable">method</span>, <span class="cm-variable">heroParam</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return</span> <span class="cm-variable">Expression</span>.<span class="cm-variable">Lambda</span><span class="cm-operator">&lt;</span><span class="cm-variable-3">Action</span><span class="cm-operator">&lt;</span><span class="cm-variable">Enemy</span>, <span class="cm-variable">Hero</span><span class="cm-operator">&gt;&gt;</span>(<span class="cm-variable">call</span>, <span class="cm-variable">enemyParam</span>, <span class="cm-variable">heroParam</span>);</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px"> &nbsp;  }</span></pre>
<pre class=" CodeMirror-line "><span style="padding-right: 0.1px">}</span></pre>
</div>
</div>
</div>
</div>
</div>
<div style="position: absolute; height: 0; width: 1px; border-bottom: 0 solid rgba(0, 0, 0, 0); top: 1700px">&nbsp;</div>
<div class="CodeMirror-gutters" style="display: none; height: 1700px">&nbsp;</div>
</div>
</div>
<h4 id="createdynamicstatemachine"><span>CreateDynamicStateMachine</span></h4>
<ul>
<li>
<p><strong><span>参数定义</span></strong><span>：定义了两个参数 </span><code>enemyParam</code><span> 和 </span><code>heroParam</code><span>，用于表示敌人和英雄。</span></p>
</li>
<li>
<p><strong><span>条件表达</span></strong><span>式：</span></p>
</li>
<li>
<p><code>heroLowHealth</code><span>: 检查英雄的生命值是否低于 30。</span></p>
<ul>
<li><code>heroNear</code><span>: 检查英雄与敌人的距离是否小于 10。</span></li>
</ul>
</li>
<li>
<p><strong><span>行为选择</span></strong><span>：</span></p>
</li>
<li>
<p><span>使用 </span><code>CreateActionExpression</code><span> 方法创建 </span><code>Attack</code><span>、</span><code>Taunt</code><span> 和 </span><code>Patrol</code><span> 行为的表达式。</span></p>
<ul>
<li><span>使用 </span><code>Expression.Condition</code><span> 创建条件表达式，根据条件选择行为。</span></li>
</ul>
</li>
<li>
<p><strong><span>返回 Lambda 表达式</span></strong><span>：最终返回一个 Lambda 表达式，接受 </span><code>Enemy</code><span> 和 </span><code>Hero</code><span> 作为参数，并返回相应的行为函数。</span></p>
</li>
</ul>
<h4 id="createactionexpression"><span>CreateActionExpression</span></h4>
<ul>
<li><strong><span>参数定义</span></strong><span>：定义 </span><code>enemyParam</code><span> 和 </span><code>heroParam</code><span>。</span></li>
<li><strong><span>获取方法信息</span></strong><span>：使用反射获取 </span><code>Enemy</code><span> 类中与 </span><code>methodName</code><span> 相对应的方法。</span></li>
<li><strong><span>创建方法调用表达式</span></strong><span>：使用 </span><code>Expression.Call</code><span> 创建方法调用表达式，并返回一个 Lambda 表达式。</span></li>
</ul>
</div>
</div>
</div>
<div id="MySignature" role="contentinfo">
    <div id="aid">
    <a href="https://api.assetstore.unity3d.com/affiliate/embed/list/top-paid/widget-medium?aid=1011l5dHP">Unity最受欢迎的插件，可以让您的游戏如虎添翼，为您节省大量时间可以投入在游戏的创意和细节上</a> 
</div>
<div id="AllanboltSignature" background="linear-gradient(142deg, rgba(255,253,141,1) 0%, rgba(252,183,255,1) 35%, rgba(144,236,255,1) 100%)">
<a>点赞鼓励下，(づ￣3￣)づ╭❤～</a>
<br>
<p id="PSignature" style="background: linear-gradient(142deg, rgba(255,253,141,1) 0%, rgba(252,183,255,1) 35%, rgba(144,236,255,1) 100%);border: #330066 1px solid; padding: 10px 10px;font-family: 微软雅黑; font-size: 11px">
<span style="margin-left: 10px; font-weight: bold; color: white ">作者：<a style="text-decoration: none; color: white" href="https://www.cnblogs.com/Firepad-magic/" target="_blank"></a><b style="color: white">世纪末的魔术师</b></span>
        <br>
        <span style="margin-left: 10px; font-weight: bold; color: white">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;出处：<a style="text-decoration: none; color: blue" href="https://www.cnblogs.com/Firepad-magic/" target="_blank">https://www.cnblogs.com/Firepad-magic/</a></span>
        <br>
        <span style="margin-left: 10px; font-weight: bold; color: white">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Unity最受欢迎插件推荐：<a style="text-decoration: none; color: blue" href="https://assetstore.unity.com/lists/top-paid-packages-13200?aid=1011l5dHP" target="_blank">点击查看</a></span>
        <br>
        <span style="margin-left: 10px; font-weight: bold; color: white">本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。</span>
    </p>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.022677814493055556" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-22 17:42">2025-02-22 17:42</span>&nbsp;
<a href="https://www.cnblogs.com/Firepad-magic">世纪末の魔术师</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18731092" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18731092);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18731092', targetLink: 'https://www.cnblogs.com/Firepad-magic/p/18731092', title: '在Unity中玩转表达式树：解锁游戏逻辑的动态魔法' })">举报</a>
</div>
        