<!----> <meta itemprop="headline" content="前端如何优雅通知用户刷新页面？"> <meta itemprop="keywords" content="前端"> <meta itemprop="datePublished" content="2024-11-22T03:08:16.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="李暖阳啊"> <meta itemprop="url" content="https://juejin.cn/user/310488491889856"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-7cdd11fb="">
            前端如何优雅通知用户刷新页面？
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-7cdd11fb=""><div class="author-info-box" data-v-7cdd11fb=""><div class="author-name" data-v-7cdd11fb=""><a href="/user/310488491889856/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-7cdd11fb=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    李暖阳啊
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-7cdd11fb=""><time datetime="2024-11-22T03:08:16.000Z" title="Fri Nov 22 2024 03:08:16 GMT+0000 (Coordinated Universal Time)" class="time" data-v-7cdd11fb="">
                    2024-11-22
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-7cdd11fb=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-7cdd11fb=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-7cdd11fb=""></circle></svg> <span class="views-count" data-v-7cdd11fb="">
                    23,439
                  </span> <span class="read-time" data-v-7cdd11fb=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-7cdd11fb=""><rect width="16" height="16" fill="none" data-v-7cdd11fb=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-7cdd11fb=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-7cdd11fb=""></path></svg>
                    阅读2分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-7cdd11fb=""></div> <!----> <!----></div> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-7cdd11fb=""><div class="article-viewer markdown-body result"><h2 data-id="heading-0">前言</h2>
<p>老板：新的需求不是上线了嘛，怎么用户看到的还是老的页面呀<br>
窝囊废：让用户刷新一下页面，或者清一下缓存<br>
老板：那我得告诉用户，刷新一下页面，或者清一下缓存，才能看到新的页面呀，感觉用户体验不好啊，不能直接刷新页面嘛？<br>
窝囊废：可以解决（OS：一点改的必要没有，用户全是大聪明）<br></p>
<h2 data-id="heading-1">产品介绍</h2>
<p>c端需要经常进行一些文案调整，一些老版的文字字眼可能会导致一些舆论问题，所以就需要更新之后刷新页面，让用户看到新的页面。</p>
<h2 data-id="heading-2">思考问题为什么产生</h2>
<p>项目是基于vue的spa应用，通过nginx代理静态资源，配置了index.html协商缓存，js、css等静态文件<code>Cache-Control</code>,按正常前端重新部署后，
用户<code>重新</code>访问系统，已经是最新的页面。</p>
<p>但是绝大部份用户都是访问页面之后一直停留在此页面，这时候前端部署后，用户就无法看到新的页面，需要用户刷新页面。</p>
<h2 data-id="heading-3">产生问题</h2>
<ul>
<li>如果后端接口有更新，前端重新部署后，用户访问老的页面，可能会导致接口报错。</li>
<li>如果前端部署后，用户访问老的页面，可能无法看到新的页面，需要用户刷新页面，用户体验不好。</li>
<li>出现线上bug，修复完后，用户依旧访问老的页面，仍会遇到bug。</li>
</ul>
<h2 data-id="heading-4">解决方案</h2>
<ol>
<li>前后端配合解决</li>
</ol>
<ul>
<li>WebSocket</li>
<li>SSE(Server-Send-Event)</li>
</ul>
<ol start="2">
<li>纯前端方案
以下示例均以vite+vue3为例；</li>
</ol>
<ul>
<li>轮询html Etag/Last-Modified</li>
</ul>
<p>在App.vue中添加如下代码</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">const</span> oldHtmlEtag = <span class="hljs-title function_">ref</span>();
<span class="hljs-keyword">const</span> timer = <span class="hljs-title function_">ref</span>();
<span class="hljs-keyword">const</span> <span class="hljs-title function_">getHtmlEtag</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">const</span> { protocol, host } = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>;
  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`<span class="hljs-subst">${protocol}</span>//<span class="hljs-subst">${host}</span>`</span>, {
    <span class="hljs-attr">headers</span>: {
      <span class="hljs-string">"Cache-Control"</span>: <span class="hljs-string">"no-cache"</span>,
    },
  });
  <span class="hljs-keyword">return</span> res.<span class="hljs-property">headers</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">"Etag"</span>);
};

  oldHtmlEtag.<span class="hljs-property">value</span> = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getHtmlEtag</span>();
  <span class="hljs-built_in">clearInterval</span>(timer.<span class="hljs-property">value</span>);
  timer.<span class="hljs-property">value</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">async</span> () =&gt; {
    <span class="hljs-keyword">const</span> newHtmlEtag = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getHtmlEtag</span>();
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"---new---"</span>, newHtmlEtag);
    <span class="hljs-keyword">if</span> (newHtmlEtag !== oldHtmlEtag.<span class="hljs-property">value</span>) {
      <span class="hljs-title class_">Modal</span>.<span class="hljs-title function_">destroyAll</span>();
      <span class="hljs-title class_">Modal</span>.<span class="hljs-title function_">confirm</span>({
        <span class="hljs-attr">title</span>: <span class="hljs-string">"检测到新版本，是否更新？"</span>,
        <span class="hljs-attr">content</span>: <span class="hljs-string">"新版本内容："</span>,
        <span class="hljs-attr">okText</span>: <span class="hljs-string">"更新"</span>,
        <span class="hljs-attr">cancelText</span>: <span class="hljs-string">"取消"</span>,
        <span class="hljs-attr">onOk</span>: <span class="hljs-function">() =&gt;</span> {
          <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-title function_">reload</span>();
        },
      });
    }
  }, <span class="hljs-number">30000</span>);
</code></pre>
<ul>
<li>versionData.json</li>
</ul>
<p>自定义plugin，项目根目录创建/plugins/vitePluginCheckVersion.ts</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">"path"</span>;
<span class="hljs-keyword">import</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">"fs"</span>;
<span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">checkVersion</span>(<span class="hljs-params">version: <span class="hljs-built_in">string</span></span>) {
  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">name</span>: <span class="hljs-string">"vite-plugin-check-version"</span>,
    <span class="hljs-title function_">buildStart</span>(<span class="hljs-params"></span>) {
      <span class="hljs-keyword">const</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();
      <span class="hljs-keyword">const</span> version = {
        <span class="hljs-attr">version</span>: now,
      };
      <span class="hljs-keyword">const</span> versionPath = path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">"../public/versionData.json"</span>);
      fs.<span class="hljs-title function_">writeFileSync</span>(versionPath, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(version), <span class="hljs-string">"utf8"</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {
        <span class="hljs-keyword">if</span> (err) {
          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"写入失败"</span>);
        } <span class="hljs-keyword">else</span> {
          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"写入成功"</span>);
        }
      });
    },
  };
}
</code></pre>
<p>在vite.config.ts中引入插件</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">import</span> { checkVersion } <span class="hljs-keyword">from</span> <span class="hljs-string">"./plugins/vitePluginCheckVersion"</span>;
<span class="hljs-attr">plugins</span>: [
  <span class="hljs-title function_">vue</span>(),
  <span class="hljs-title function_">checkVersion</span>(),
]
</code></pre>
<p>在App.vue中添加如下代码</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">const</span> timer = <span class="hljs-title function_">ref</span>()
<span class="hljs-keyword">const</span> <span class="hljs-title function_">checkUpdate</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">'/versionData.json'</span>, {
    <span class="hljs-attr">headers</span>: {
      <span class="hljs-string">'Cache-Control'</span>: <span class="hljs-string">'no-cache'</span>,
    },
  }).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> r.<span class="hljs-title function_">json</span>())
  <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">'demo_version'</span>)) {
    <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">'demo_version'</span>, res.<span class="hljs-property">version</span>)
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">if</span> (res.<span class="hljs-property">version</span> !== <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">'demo_version'</span>)) {
      <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">'demo_version'</span>, res.<span class="hljs-property">version</span>)
      <span class="hljs-title class_">Modal</span>.<span class="hljs-title function_">confirm</span>({
        <span class="hljs-attr">title</span>: <span class="hljs-string">'检测到新版本，是否更新？'</span>,
        <span class="hljs-attr">content</span>: <span class="hljs-string">'新版本内容：'</span> + res.<span class="hljs-property">content</span>,
        <span class="hljs-attr">okText</span>: <span class="hljs-string">'更新'</span>,
        <span class="hljs-attr">cancelText</span>: <span class="hljs-string">'取消'</span>,
        <span class="hljs-attr">onOk</span>: <span class="hljs-function">() =&gt;</span> {
          <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-title function_">reload</span>()
        },
      })
    }
  }
}

<span class="hljs-title function_">onMounted</span>(<span class="hljs-function">()=&gt;</span>{
  <span class="hljs-built_in">clearInterval</span>(timer.<span class="hljs-property">value</span>)
  timer.<span class="hljs-property">value</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">async</span> () =&gt; {
   <span class="hljs-title function_">checkUpdate</span>()
  }, <span class="hljs-number">30000</span>)
})
</code></pre>
<ul>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FGreatAuk%2Fplugin-web-update-notification" target="_blank" title="https://github.com/GreatAuk/plugin-web-update-notification" ref="nofollow noopener noreferrer">plugin-web-update-notification</a></li>
</ul>
<p>Use</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-comment">// vite.config.ts</span>
<span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">'vite'</span>
<span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">'@vitejs/plugin-vue'</span>
<span class="hljs-keyword">import</span> { webUpdateNotice } <span class="hljs-keyword">from</span> <span class="hljs-string">'@plugin-web-update-notification/vite'</span>

<span class="hljs-comment">// https://vitejs.dev/config/</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({
  <span class="hljs-attr">plugins</span>: [
    <span class="hljs-title function_">vue</span>(),
    <span class="hljs-title function_">webUpdateNotice</span>({
      <span class="hljs-attr">logVersion</span>: <span class="hljs-literal">true</span>,
    }),
  ]
})
</code></pre></div></div>