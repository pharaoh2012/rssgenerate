
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/smileleooo/p/18772389" title="发布于 2025-03-14 21:41">
    <span role="heading" aria-level="2">Apache Tomcat RCE漏洞复现（CVE-2025-24813）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        近日官方披露 Apache Tomcat partial PUT文件上传反序列化漏洞。在 CVE-2025-24813 中tomcat开启文件会话持久化，攻击者可利用PUT上传文件，并构造恶意请求触发session文件反序列化。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="漏洞描述">漏洞描述</h1>
<p>该漏洞的核心在于不完整PUT请求上传时 Tomcat 会使用了一个基于用户提供的文件名和路径生成的临时文件，且路径分隔符被替换为 <code>.</code> 。</p>
<p>若同时满足以下条件，攻击者可执行任意代码：</p>
<ol>
<li>
<p>默认 Servlet 启用了写权限（默认禁用）</p>
</li>
<li>
<p>启用了部分PUT请求支持（默认启用）</p>
</li>
<li>
<p>应用程序使用 Tomcat 的基于文件的会话持久化（默认存储位置）</p>
</li>
<li>
<p>应用程序包含可被利用于反序列化攻击的库</p>
</li>
</ol>
<h1 id="受影响版本">受影响版本</h1>
<ul>
<li>
<p>Apache Tomcat 11.0.0-M1 至 11.0.2</p>
</li>
<li>
<p>Apache Tomcat 10.1.0-M1 至 10.1.34</p>
</li>
<li>
<p>Apache Tomcat 9.0.0-M1 至 9.0.98</p>
</li>
</ul>
<h1 id="漏洞环境搭建">漏洞环境搭建</h1>
<p>尝试使用 Tomcat 9.0.98 版本复现：<a href="https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.98/bin/apache-tomcat-9.0.98.zip" target="_blank" rel="noopener nofollow">https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.98/bin/apache-tomcat-9.0.98.zip</a></p>
<p>根据里利用条件描述：</p>
<ol>
<li>需要在conf/web.xml中，将DefaultServlet的readonly配置为false，启用写入功能</li>
</ol>
<pre><code class="language-xml">&lt;init-param&gt;
    &lt;param-name&gt;readonly&lt;/param-name&gt;
    &lt;param-value&gt;false&lt;/param-value&gt;
&lt;/init-param&gt;
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3222269/202503/3222269-20250314195524448-733187766.png" alt="image" loading="lazy"></p>
<ol start="2">
<li>需要在conf/context.xml中，开启File文件会话存储</li>
</ol>
<pre><code class="language-xml">&lt;Manager className="org.apache.catalina.session.PersistentManager"&gt;
    &lt;Store className="org.apache.catalina.session.FileStore"/&gt;
&lt;/Manager&gt;
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3222269/202503/3222269-20250314195229042-1041249511.png" alt="image" loading="lazy"></p>
<ol start="3">
<li>
<p>PUT方法默认是启用状态</p>
</li>
<li>
<p>在项目包含可被利用于反序列化攻击的库（例如 Commons Collections 3.2.1）</p>
<p>下载 commons-collections-3.2.1.jar（<a href="https://mvnrepository.com/artifact/commons-collections/commons-collections/3.2.1%EF%BC%89" target="_blank" rel="noopener nofollow">https://mvnrepository.com/artifact/commons-collections/commons-collections/3.2.1）</a></p>
<p>将该 jar 包放入<code>\webapps\ROOT\WEB-INF\lib</code>目录下</p>
</li>
</ol>
<p>利用条件准备完毕，启动 Tomcat 应用：<code>.\bin\catalina.bat run</code>（若是在 Liunx/Mac 环境下改用 catalina.sh 启动），浏览器访问本地8080端口查看是否成功启动。</p>
<h1 id="漏洞复现">漏洞复现</h1>
<p>参照@jweny大佬文章：<a href="https://forum.butian.net/article/674" target="_blank" rel="noopener nofollow">https://forum.butian.net/article/674</a></p>
<p>使用 partial PUT 请求将恶意的序列化数据写入到会话文件中，在开启文件会话持久化（默认存储位置），并且在文件上传未完成的情况下，内容会被临时存储在Tomcat的工作目录<code>work/Catalina/localhost/ROOT</code>。</p>
<p>在 HTTP 协议中，<code>Content-Range</code> 字段用于表示客户端通过分段传输的方式上传或下载文件。<code>Content-Range: bytes 0-1000/1200</code> 表示文件总大小是1200字节，本次上传的是前1001字节（0-1000），后续上传剩余部分（1001-1200）。</p>
<p>所以利用这个特点，可以分段上传覆盖或注入敏感文件（如会话文件），尝试下向默认存储位置 work/Catalina/localhost/ROOT 注入文件：</p>
<pre><code>PUT /poc/session HTTP/1.1
Host: localhost:8080
Content-Range: bytes 0-1000/1200

{{(paylaod...)}}
</code></pre>
<p>注意看ROOT目录下成功写入了文件（.poc.session）：Tomcat 对不完整PUT请求上传时的文件名处理机制：文件路径中的分隔符 <code>/</code> 会被转换为 <code>.</code></p>
<p><img src="https://img2024.cnblogs.com/blog/3222269/202503/3222269-20250314205418431-1182118982.png" alt="image" loading="lazy"></p>
<p>生成一个恶意的序列化文件上传，推荐使用 <a href="https://java-chains.vulhub.org/zh/docs/guide" title="Java Chains" target="_blank" rel="noopener nofollow">Java Chains</a> 快速生成一个base64编码的cc链反序列化payload：</p>
<p><img src="https://img2024.cnblogs.com/blog/3222269/202503/3222269-20250314210209922-98260330.png" alt="image" loading="lazy"></p>
<p>准备好PUT请求包，这里需要注意Content-Range的分块值需要与Length保持一致，且大于当前文件的长度。这里用yakit，要先使用base64dec()标签对payload进行解码上传，直接上传raw格式paylaod是不可用的。</p>
<p><img src="https://img2024.cnblogs.com/blog/3222269/202503/3222269-20250314221139220-903650715.png" alt="image" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3222269/202503/3222269-20250314214535909-720204882.png" alt="image" loading="lazy"></p>
<p>当文件被上传成功后，大概30s之内payload会被自动触发，随之文件会被清除。</p>
<p>也可以使用以下poc直接触发：</p>
<pre><code>GET / HTTP/1.1
Host: localhost:8080
Cookie: JSESSIONID=.poc
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3222269/202503/3222269-20250314213024833-1944630460.png" alt="image" loading="lazy"></p>
<blockquote>
<p>参考文章<br>
<a href="https://forum.butian.net/article/674" target="_blank" rel="noopener nofollow">https://forum.butian.net/article/674</a><br>
<a href="https://lists.apache.org/thread/j5fkjv2k477os90nczf2v9l61fb0kkgq" target="_blank" rel="noopener nofollow">https://lists.apache.org/thread/j5fkjv2k477os90nczf2v9l61fb0kkgq</a><br>
<a href="https://www.bilibili.com/video/BV14dQjYcEc5/?spm_id_from=333.1007.top_right_bar_window_default_collection.content.click&amp;vd_source=4558613fd07f85f0f4c56e4f927f88ee" target="_blank" rel="noopener nofollow">https://www.bilibili.com/video/BV14dQjYcEc5/?spm_id_from=333.1007.top_right_bar_window_default_collection.content.click&amp;vd_source=4558613fd07f85f0f4c56e4f927f88ee</a><br>
<a href="https://avd.aliyun.com/detail?id=AVD-2025-24813&amp;timestamp__1384=Wqmx0D2DnDBGQ7KDsKo4Cw4xROjhiHqQkF4D" target="_blank" rel="noopener nofollow">https://avd.aliyun.com/detail?id=AVD-2025-24813&amp;timestamp__1384=Wqmx0D2DnDBGQ7KDsKo4Cw4xROjhiHqQkF4D</a></p>
</blockquote>
<hr>
<p>若有错误，欢迎指正！o(￣▽￣)ブ</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0030011972997685183" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-14 22:12">2025-03-14 21:41</span>&nbsp;
<a href="https://www.cnblogs.com/smileleooo">smileleooo</a>&nbsp;
阅读(<span id="post_view_count">6</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18772389" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18772389);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18772389', targetLink: 'https://www.cnblogs.com/smileleooo/p/18772389', title: 'Apache Tomcat RCE漏洞复现（CVE-2025-24813）' })">举报</a>
</div>
        