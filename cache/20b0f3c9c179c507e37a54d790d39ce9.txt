
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/netcore5/p/18736038" title="发布于 2025-02-25 13:21">
    <span role="heading" aria-level="2">MediaToolkit：.NET 开发者的多媒体处理工具</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在开发过程中处理音频和视频文件是许多应用程序的重要功能。MediaToolkit 是一个强大的库，帮助轻松处理这些多媒体文件。封装了 FFmpeg 的功能，使得复杂的任务变得简单。支持更多功能，如视频裁剪、缩略图提取和转码等。</p>
<h2 id="安装">安装</h2>
<p>第一步，老规矩，先安装</p>
<pre><code class="language-bash">PM&gt; Install-Package MediaToolkit
</code></pre>
<h2 id="主要功能">主要功能</h2>
<h3 id="1-解析媒体元数据">1. 解析媒体元数据</h3>
<p>MediaToolkit 可以解析媒体文件的元数据，视频的时长、分辨率和帧率，以及音频的采样率等。</p>
<pre><code class="language-csharp">var inputFile = new MediaFile { Filename = @"Video.flv" };

using (var engine = new Engine())
{
    engine.GetMetadata(inputFile);
}

// 输出视频的基本信息
Console.WriteLine($"Duration: {file.Metadata.Duration}");
Console.WriteLine($"Video 格式: {file.Metadata.VideoData.ColorModel}");
Console.WriteLine($"Video 颜色模型: {file.Metadata.VideoData.Format}");
//表示帧的尺寸，可能是像素大小，例如 "1920x1080"，通常用于表示视频的分辨率
Console.WriteLine($"Video 帧的尺寸: {file.Metadata.VideoData.FrameSize}");
//表示比特率，单位为 Kbps（千比特每秒）。
//一个可为空的整数（int?），表示可以没有设置该值，适用于某些不强制要求比特率的情况下。
Console.WriteLine($"Video BitRateKbs : {file.Metadata.VideoData.BitRateKbs}");
//表示每秒帧数（Frames Per Second，FPS），通常用于视频流的播放速率，例如 30.0 表示每秒播放 30 帧
Console.WriteLine($"Video FPS : {file.Metadata.VideoData.Fps}");
</code></pre>
<p>输出：Net分享<br>
Duration: 00:00:24.9300000<br>
Video 格式: yuv420p(tv, bt709)<br>
Video 颜色模型: h264 (Main) (avc1 / 0x31637661)<br>
Video 帧的尺寸: 1920x1080<br>
Video BitRateKbs : 5989<br>
Video FPS : 30</p>
<h3 id="2-生成视频缩略图">2. 生成视频缩略图</h3>
<p>从视频中提取缩略图</p>
<pre><code class="language-csharp">var inputFile = new MediaFile { Filename = @"Video.flv" };
var outputFile = new MediaFile { Filename = @"Save_Image.jpg" };

using (var engine = new Engine())
{
    var options = new ConversionOptions { Seek = TimeSpan.FromSeconds(15) };
    engine.GetThumbnail(inputFile, outputFile, options);
}
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1920368/202502/1920368-20250225131855063-320422659.png" alt="Net分享" loading="lazy"></p>
<h3 id="3-音频和视频转码">3. 音频和视频转码</h3>
<p>MediaToolkit 支持将音频和视频文件转换为其他格式，允许设置比特率、帧率、分辨率等参数。</p>
<pre><code class="language-csharp">var inputFile = new MediaFile { Filename = @"VideoVideo.flv" };
var outputFile = new MediaFile { Filename = @"VideoTo_Save_New_Video.mp4" };

var conversionOptions = new ConversionOptions
{
    MaxVideoDuration = TimeSpan.FromSeconds(30),
    VideoAspectRatio = VideoAspectRatio.R16_9,
    VideoSize = VideoSize.Hd1080,
    AudioSampleRate = AudioSampleRate.Hz44100
};

using (var engine = new Engine())
{
    engine.Convert(inputFile, outputFile, conversionOptions);
}
</code></pre>
<h3 id="4-转换为物理格式">4. 转换为物理格式</h3>
<p>MediaToolkit 支持将媒体文件转换为特定的物理格式，如 DVD、DV、VCD 等。</p>
<pre><code class="language-csharp">var inputFile = new MediaFile { Filename = @"Video.flv" };
var outputFile = new MediaFile { Filename = @"Save_New_DVD.vob" };

var conversionOptions = new ConversionOptions
{
    Target = Target.DVD,
    TargetStandard = TargetStandard.PAL
};

using (var engine = new Engine())
{
    engine.Convert(inputFile, outputFile, conversionOptions);
}
</code></pre>
<h3 id="5-视频裁剪和分割">5. 视频裁剪和分割</h3>
<p>允许对视频进行裁剪和分割，提取特定部分。</p>
<pre><code class="language-csharp">var inputFile = new MediaFile { Filename = @"Video.flv" };
var outputFile = new MediaFile { Filename = @"Save_ExtractedVideo.flv" };

using (var engine = new Engine())
{
    var options = new ConversionOptions();
    options.CutMedia(TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(25));
    engine.Convert(inputFile, outputFile, options);
}
</code></pre>
<h3 id="6-自定义-ffmpeg-命令">6. 自定义 FFmpeg 命令</h3>
<p>MediaToolkit 支持执行自定义的 FFmpeg 命令行参数</p>
<h3 id="7-订阅事件">7. 订阅事件</h3>
<p>MediaToolkit 提供了事件订阅机制，可以实时获取转换进度和完成信息。</p>
<pre><code class="language-csharp">public void StartConverting()
{
    var inputFile = new MediaFile { Filename = @"VideoVideo.flv" };
    var outputFile = new MediaFile { Filename = @"To_Save_New_Video.mp4" };

    using (var engine = new Engine())
    {
        engine.ConvertProgressEvent += ConvertProgressEvent;
        engine.ConversionCompleteEvent += ConversionCompleteEvent;
        engine.Convert(inputFile, outputFile);
    }
}

private void ConvertProgressEvent(object sender, ConvertProgressEventArgs e)
{
    Console.WriteLine($"Converting... Frame: {e.Frame}, Duration: {e.ProcessedDuration}");
}

private void ConversionCompleteEvent(object sender, ConversionCompleteEventArgs e)
{
    Console.WriteLine("Conversion complete!");
}
</code></pre>
<h2 id="项目地址">项目地址</h2>
<blockquote>
<p><a href="https://github.com/AydinAdn/MediaToolkit" target="_blank" rel="noopener nofollow">https://github.com/AydinAdn/MediaToolkit</a></p>
</blockquote>
<h2 id="总结">总结</h2>
<p>MediaToolkit 是一个功能强大且易于使用的 .NET 多媒体处理库。封装了 FFmpeg 的功能，简化了复杂的多媒体任务。无论是在桌面、Web 还是移动应用程序中，MediaToolkit 都可以帮助高效处理音频和视频文件。</p>
<p><img src="https://img2024.cnblogs.com/blog/1920368/202502/1920368-20250225132104143-1424084544.png" alt="" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.03431934116666667" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-25 13:32">2025-02-25 13:21</span>&nbsp;
<a href="https://www.cnblogs.com/netcore5">今晚打老虎！</a>&nbsp;
阅读(<span id="post_view_count">44</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18736038" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18736038);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18736038', targetLink: 'https://www.cnblogs.com/netcore5/p/18736038', title: 'MediaToolkit：.NET 开发者的多媒体处理工具' })">举报</a>
</div>
        