
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/densen2014/p/18669229" title="发布于 2025-01-13 19:20">
    <span role="heading" aria-level="2">为你的Blazor程序加入本地化多语言功能</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="本地化">本地化</h2>
<p>本地化是为给定语言和地区定制应用程序的过程. BootstrapBlazor 组件允许您将其 UI 元素转换为所需的语言。这包括按钮、过滤器操作符属性等文本。组件内部默认使用当前请求 UI 文化语言，本文将向您展示如何在应用程序中使用此功能：</p>
<h2 id="bootstrapblazor-组件库">BootstrapBlazor 组件库</h2>
<p>简介<br>
BootstrapBlazor 是一套基于 Bootstrap 和 Blazor 的企业级组件库，可以认为是 Bootstrap 项目的 Blazor 版实现。</p>
<h2 id="小提示">小提示</h2>
<p>阅读以下知识点前请先查看 <a href="https://learn.microsoft.com/zh-cn/aspnet/core/blazor/globalization-localization?view=aspnetcore-9.0" target="_blank" rel="noopener nofollow">微软官方文档</a><br>
由于 wasm 模式无法获取系统语言文化信息，默认文化信息为 en<br>
组件内置本地化资源文件为 en zh 由网友提供的其他本地化资源文件 de es pt zh-TW 放置在项目文件夹 localization 内，可自行下载通过注入服务引入到项目中</p>
<h3 id="本地化在组件中的工作原理">本地化在组件中的工作原理</h3>
<p>BootstrapBlazor 组件额外支持使用 Json 类型的键值信息作为资源文件，将其解析为 UI 中呈现的字符串。BootstrapBlazor 包自带以下资源文件。</p>
<ul>
<li>中文（zh）</li>
<li>英语（en）</li>
</ul>
<p>额外本地化语言 json 文件</p>
<ul>
<li>德语（de）</li>
<li>葡萄牙语（pu）</li>
<li>西班牙语（es）</li>
<li>中國台灣（zh-TW）</li>
</ul>
<h3 id="组件库本地化详细资讯链接">组件库本地化详细资讯链接</h3>
<p><a href="https://www.blazor.zone/localization" target="_blank" rel="noopener nofollow">https://www.blazor.zone/localization</a></p>
<h3 id="开始撸码">开始撸码</h3>
<h4 id="跟往常一样cv福音">跟往常一样,CV福音</h4>
<p><a href="https://github.com/densen2014/Blazor100/tree/master/b23multipleLanguages?wt.mc_id=DT-MVP-5005078" target="_blank" rel="noopener nofollow">源码</a>在此.</p>
<h4 id="bootstrap-blazor-app-模板-快速搭建项目">Bootstrap Blazor App 模板, 快速搭建项目</h4>
<ol>
<li>新建bb模板工程</li>
</ol>
<pre><code>dotnet new install Bootstrap.Blazor.Templates::9.0.4
dotnet new bbapp
</code></pre>
<ol start="2">
<li>加入语言选择功能</li>
</ol>
<p>右键新建blazor组件 CultureChooser.razor</p>
<p><strong>新建组件步骤参考往期文章</strong></p>
<p>加入如下代码</p>
<pre><code>@inherits BootstrapComponentBase
@namespace BootstrapBlazor.Server.Components.Components

&lt;div @attributes="@AdditionalAttributes" class="@ClassString"&gt;
    &lt;span&gt;@Label&lt;/span&gt;
    &lt;Select Value="@SelectedCulture" OnSelectedItemChanged="@SetCulture"&gt;
        &lt;Options&gt;
            @foreach (var kv in BootstrapOptions.CurrentValue.GetSupportedCultures())
            {
                &lt;SelectOption Text="@GetDisplayName(kv)" Value="@kv.Name" /&gt;
            }
        &lt;/Options&gt;
    &lt;/Select&gt;
&lt;/div&gt;

</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1980213/202501/1980213-20250113185139914-1359200510.png" alt="" loading="lazy"></p>
<p>新建代码后置文件 CultureChooser.razor.cs</p>
<p><strong>新建代码后置文件步骤参考往期文章</strong></p>
<pre><code>using BootstrapBlazor.Components;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Localization;
using Microsoft.Extensions.Options;
using Microsoft.JSInterop;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;

namespace BootstrapBlazor.Server.Components.Components;

/// &lt;summary&gt;
/// 
/// &lt;/summary&gt;
public partial class CultureChooser
{
    [Inject]
    [NotNull]
    private IOptionsMonitor&lt;BootstrapBlazorOptions&gt;? BootstrapOptions { get; set; }

    [Inject]
    [NotNull]
    private IStringLocalizer&lt;CultureChooser&gt;? Localizer { get; set; }

    [Inject]
    [NotNull]
    private NavigationManager? NavigationManager { get; set; }

    private string? ClassString =&gt; CssBuilder.Default("culture-selector")
        .AddClassFromAttributes(AdditionalAttributes)
        .Build();

    private string SelectedCulture { get; set; } = CultureInfo.CurrentCulture.Name;

    [NotNull]
    private string? Label { get; set; }

    /// &lt;summary&gt;
    /// OnInitialized 方法
    /// &lt;/summary&gt;
    protected override void OnInitialized()
    {
        base.OnInitialized();

        Label ??= Localizer[nameof(Label)];
    }

    private async Task SetCulture(SelectedItem item)
    {
        if (RendererInfo.Name == "Server")
        {
            // 使用 api 方式 适用于 Server-Side 模式
            if (SelectedCulture != item.Value)
            {
                var culture = item.Value;
                var uri = new Uri(NavigationManager.Uri).GetComponents(UriComponents.PathAndQuery, UriFormat.SafeUnescaped);
                var query = $"?culture={Uri.EscapeDataString(culture)}&amp;redirectUri={Uri.EscapeDataString(uri)}";

                // use a path that matches your culture redirect controller from the previous steps
                NavigationManager.NavigateTo("/Culture/SetCulture" + query, forceLoad: true);
            }
        }
        else
        {
            if (SelectedCulture != item.Value)
            {
                var culture = item.Value;
                await JSRuntime.InvokeVoidAsync("bbCulture.set", culture);

                NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
            }
        }
    }

    private string GetDisplayName(CultureInfo culture)
    {
        string? ret;
        if (RendererInfo.Name == "Server")
        {
            ret = culture.NativeName;
        }
        else
        {
            ret = culture.Name switch
            {
                "zh-CN" =&gt; "中文（中国）",
                "en-US" =&gt; "English (United States)",
                _ =&gt; ""
            };
        }
        return ret;
    }
}
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1980213/202501/1980213-20250113185200399-2079117144.png" alt="" loading="lazy"></p>
<ol start="3">
<li>布局文件添加语言选择</li>
</ol>
<p>编辑 MainLayout.razor 在<code>&lt;Widget&gt;&lt;/Widget&gt;</code>后面加入一行</p>
<pre><code>&lt;BootstrapBlazor.Server.Components.Components.CultureChooser /&gt;
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1980213/202501/1980213-20250113185320030-1435889435.png" alt="" loading="lazy"></p>
<ol start="4">
<li>增加多语言支持配置信息,启用本地化</li>
</ol>
<p>编辑 Program.cs 在<code>builder.Services.AddBootstrapBlazor();</code>后加入这些代码</p>
<pre><code>// 增加多语言支持配置信息
builder.Services.AddRequestLocalization&lt;IOptionsMonitor&lt;BootstrapBlazorOptions&gt;&gt;((localizerOption, blazorOption) =&gt;
{
    blazorOption.OnChange(Invoke);
    Invoke(blazorOption.CurrentValue);
    return;

    void Invoke(BootstrapBlazorOptions option)
    {
        var supportedCultures = option.GetSupportedCultures();
        localizerOption.SupportedCultures = supportedCultures;
        localizerOption.SupportedUICultures = supportedCultures;
    }
});

builder.Services.AddControllers();
</code></pre>
<p>然后在<code>var app = builder.Build();</code>后加入这行代码</p>
<pre><code>// 启用本地化
var option = app.Services.GetService&lt;IOptions&lt;RequestLocalizationOptions&gt;&gt;();
if (option != null)
{
    app.UseRequestLocalization(option.Value);
}
</code></pre>
<p>最后在<code>app.MapStaticAssets();</code>后加入这行代码</p>
<pre><code>app.MapDefaultControllerRoute();
</code></pre>
<ol start="5">
<li>添加控制器</li>
</ol>
<p>新建文件夹Controllers, 新建文件 CultureController.cs</p>
<pre><code>using Microsoft.AspNetCore.Localization;
using Microsoft.AspNetCore.Mvc;
using RouteAttribute = Microsoft.AspNetCore.Mvc.RouteAttribute;

namespace BootstrapBlazor.Controllers;

/// &lt;summary&gt;
/// 文化 Controller
/// &lt;/summary&gt;
[Route("[controller]/[action]")]
public class CultureController : Controller
{
    /// &lt;summary&gt;
    /// 设置文化方法
    /// &lt;/summary&gt;
    /// &lt;param name="culture"&gt;&lt;/param&gt;
    /// &lt;param name="redirectUri"&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public IActionResult SetCulture(string culture, string redirectUri)
    {
        if (string.IsNullOrEmpty(culture))
        {
            HttpContext.Response.Cookies.Delete(CookieRequestCultureProvider.DefaultCookieName);
        }
        else
        {
            HttpContext.Response.Cookies.Append(
                CookieRequestCultureProvider.DefaultCookieName,
                CookieRequestCultureProvider.MakeCookieValue(new RequestCulture(culture, culture)), new CookieOptions()
                {
                    Expires = DateTimeOffset.Now.AddYears(1)
                });
        }

        return LocalRedirect(redirectUri);
    }

    /// &lt;summary&gt;
    /// 重置文化方法
    /// &lt;/summary&gt;
    /// &lt;param name="redirectUri"&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public IActionResult ResetCulture(string redirectUri)
    {
        HttpContext.Response.Cookies.Delete(CookieRequestCultureProvider.DefaultCookieName);

        return LocalRedirect(redirectUri);
    }
}

</code></pre>
<ol start="6">
<li>运行工程</li>
</ol>
<p><img src="https://img2024.cnblogs.com/blog/1980213/202501/1980213-20250113185702167-823268718.png" alt="" loading="lazy"></p>
<p>因为模板工程已经带了部分多语言配置, 我们点击<code>Table</code>或者<code>花名册</code>页面就可以看到效果</p>
<p><img src="https://img2024.cnblogs.com/blog/1980213/202501/1980213-20250113185833126-1263176639.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1980213/202501/1980213-20250113185850361-1558238236.png" alt="" loading="lazy"></p>
<h3 id="实践">实践</h3>
<p>通过主页面改变欢迎词来练习</p>
<p><img src="https://img2024.cnblogs.com/blog/1980213/202501/1980213-20250113190114083-1664217213.png" alt="" loading="lazy"></p>
<p>代码<code>&lt;SurveyPrompt Title="How is Blazor working for you?" /&gt;</code>改为</p>
<pre><code>&lt;SurveyPrompt Title="@Localizer["Wellcome"]" /&gt;
&lt;SurveyPrompt Title="@Localizer["How is Blazor working for you?"]" /&gt;

@code{
    [Inject]
    [NotNull]
    private IStringLocalizer&lt;Index&gt;? Localizer { get; set; }

}
</code></pre>
<p>在这里我们写了两行@Localizer,先买个关子,运行时候看看是什么效果.</p>
<p><img src="https://img2024.cnblogs.com/blog/1980213/202501/1980213-20250113192142380-152482024.png" alt="" loading="lazy"></p>
<p>添加本地化资源</p>
<p>分别在<code>Locales/zh.json</code>和<code>Locales/en.json</code>添加对应的文字</p>
<pre><code>  "BootstrapBlazorApp.Server.Components.Pages.Index": {
    "Wellcome": "Blazor 对你有什么帮助？"
  }
</code></pre>
<pre><code>  "BootstrapBlazorApp.Server.Components.Pages.Index": {
    "Wellcome": "How is Blazor working for you?"
  }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1980213/202501/1980213-20250113190942166-1384274459.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1980213/202501/1980213-20250113191002218-1456952034.png" alt="" loading="lazy"></p>
<p><strong>运行工程</strong><br>
<img src="https://img2024.cnblogs.com/blog/1980213/202501/1980213-20250113192241366-470618855.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1980213/202501/1980213-20250113191918710-2038143039.png" alt="" loading="lazy"></p>
<p>现在可以看到效果了, 找到资源的已经正确显示对应文本, 未找到资源的,会回落显示为key.</p>
<h3 id="tips">TIPS</h3>
<ol>
<li>格式化</li>
</ol>
<p>资源文件</p>
<pre><code>"Foo.Address2": "地球、中国、上海市普陀区金沙江路 {0} 弄 这里是超长单元格示例"
</code></pre>
<p>c#</p>
<pre><code>var i=1274;

localizer["Foo.Address", i]
</code></pre>
<p>效果</p>
<pre><code>上海市普陀区金沙江路 1274 弄
</code></pre>
<ol start="2">
<li>特性相关,例如必填项</li>
</ol>
<p>字段定义</p>
<pre><code>    [Required(ErrorMessage = "{0}不能为空")]
    [AutoGenerateColumn(Order = 10, Filterable = true, Searchable = true)]
    [Display(Name = "姓名")]
    public string? Name { get; set; }
</code></pre>
<p>资源文件</p>
<pre><code>"Name.Required": "{0}是必填项"

"Name.Required": "{0} is required."
</code></pre>
<p>效果</p>
<p><img src="https://img2024.cnblogs.com/blog/1980213/202501/1980213-20250113201016829-947866751.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1980213/202501/1980213-20250113201235530-1852216484.png" alt="" loading="lazy"></p>
<h3 id="组件库本地化详细资讯链接-1">组件库本地化详细资讯链接</h3>
<p><a href="https://www.blazor.zone/localization" target="_blank" rel="noopener nofollow">https://www.blazor.zone/localization</a></p>

</div>
<div id="MySignature" role="contentinfo">
    <h4 id="关联项目">关联项目</h4>
<p><font color="blue">FreeSql QQ群：4336577</font></p>
<p><font color="blue">BA &amp; Blazor QQ群：795206915</font></p>
<p><font color="blue">Maui Blazor 中文社区 QQ群：645660665</font></p>
<h4 id="知识共享许可协议">知识共享许可协议</h4>
<p>本作品采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a> 进行许可。欢迎转载、使用、重新发布，但务必保留文章署名AlexChow（包含链接： <a href="https://github.com/densen2014" target="_blank" rel="noopener">https://github.com/densen2014</a> ），不得用于商业目的，基于本文修改后的作品务必以相同的许可发布。如有任何疑问，请<a href="zhouchuanglin@gmail.com" target="_blank" rel="noopener">与我联系</a> 。</p>
<h4 id="转载声明">转载声明</h4>
<p>本文来自博客园，作者：周创琳 <a href="https://www.cnblogs.com/densen2014/" target="_blank">AlexChow</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/densen2014/p/18669229" target="_blank">https://www.cnblogs.com/densen2014/p/18669229</a></p>
<h4 id="alexchow">AlexChow</h4>
<p><a href="https://www.toutiao.com/c/user/token/MS4wLjABAAAAGMBzlmgJx0rytwH08AEEY8F0wIVXB2soJXXdUP3ohAE/?" target="_blank" rel="noopener">今日头条</a> | <a href="https://www.cnblogs.com/densen2014" target="_blank" rel="noopener">博客园</a> | <a href="https://www.zhihu.com/people/alex-chow-54" target="_blank" rel="noopener">知乎</a> | <a href="https://gitee.com/densen2014" target="_blank" rel="noopener">Gitee</a> | <a href="https://github.com/densen2014?WT.mc_id=DT-MVP-5005078" target="_blank" rel="noopener">GitHub</a></p>

<p><img src="https://img2023.cnblogs.com/blog/1980213/202302/1980213-20230201233143321-1727894703.png" alt="image" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.010551943126157407" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-13 20:13">2025-01-13 19:20</span>&nbsp;
<a href="https://www.cnblogs.com/densen2014">AlexChow</a>&nbsp;
阅读(<span id="post_view_count">12</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18669229" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18669229);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18669229', targetLink: 'https://www.cnblogs.com/densen2014/p/18669229', title: '为你的Blazor程序加入本地化多语言功能' })">举报</a>
</div>
        