
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/moonfdd/p/18637918" title="发布于 2024-12-28 20:36">
    <span role="heading" aria-level="2">2024-12-28：求出出现两次数字的 XOR 值。用go语言，给定一个数组 nums，其中的数字出现的频率要么是一次，要么是两次。 请找出所有出现两次的数字，并计算它们的按位 XOR 值。 如果没</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>2024-12-28：求出出现两次数字的 XOR 值。用go语言，给定一个数组 nums，其中的数字出现的频率要么是一次，要么是两次。</p>
<p>请找出所有出现两次的数字，并计算它们的按位 XOR 值。</p>
<p>如果没有数字出现两次，则返回 0。</p>
<p>1 &lt;= nums.length &lt;= 50。</p>
<p>1 &lt;= nums[i] &lt;= 50。</p>
<p>nums 中每个数字要么出现过一次，要么出现过两次。</p>
<p>输入：nums = [1,2,2,1]。</p>
<p>输出：3。</p>
<p>解释：</p>
<p>数字 1 和 2 出现过两次。1 XOR 2 == 3 。</p>
<p>答案2024-12-28：</p>
<p><a href="https://chatbotsplace.com/?rc=nnNWSCJ7EP" target="_blank" rel="noopener nofollow">chatgpt</a></p>
<p>题目来自leetcode3158。</p>
<h1 id="大体步骤如下">大体步骤如下：</h1>
<p>1.<strong>初始化变量</strong>：</p>
<p>1.1.<code>set</code>: 用于记录在数组中出现的数字的集合，以位掩码的方式表示。</p>
<p>1.2.<code>setXor</code>: 用于存储出现两次的数字的按位异或结果。</p>
<p>1.3.<code>totalXor</code>: 用于存储整个数组所有数字的按位异或结果。</p>
<p>2.<strong>遍历输入数组</strong>：</p>
<p>2.1.对于数组 <code>nums</code> 中的每个数字 <code>num</code>：</p>
<p>2.1.1.通过 <code>totalXor</code> 计算当前 <code>num</code> 的异或值。由于异或操作具有可逆性，相同的数字进行异或会抵消，因此在最后得到的 <code>totalXor</code> 将是所有数字的异或结果。</p>
<p>2.1.2.判断 <code>set</code> 中是否已经存在 <code>num</code>：</p>
<p>2.1.2.1.如果 <code>set</code> 中不包含 <code>num</code>（即 <code>set</code> 的第 <code>num</code> 位是 0），则需要将其加入 <code>set</code>，并在 <code>setXor</code> 中进行异或操作，这样 <code>setXor</code> 会记录下当前 <code>num</code>。</p>
<p>2.1.2.2.更新 <code>set</code>： 将 <code>set</code> 与 <code>1 &lt;&lt; num</code> 进行按位或操作，表示 <code>num</code> 这个数字在集合中已经被记录过。</p>
<p>3.<strong>计算出现两次的数字的 XOR 值</strong>：</p>
<p>3.1.最终将 <code>setXor</code> 和 <code>totalXor</code> 进行异或操作以获取只在 <code>nums</code> 中出现两次的数字的异或值。这是因为 <code>totalXor</code> 中会包含重复的数字，而 <code>setXor</code> 中的数字在此之前已经异或了，最后得到的结果正好是出现两次的数字的异或。</p>
<p>4.<strong>返回结果</strong>：</p>
<p>4.1.如果没有数字出现两次，最后会返回 0。</p>
<p>4.2.返回 <code>setXor ^ totalXor</code> 值，即为所有出现两次数字的按位 XOR 值。</p>
<h3 id="总结">总结</h3>
<ul>
<li>
<p><strong>时间复杂度</strong>：这个程序的时间复杂度是 O(n)，其中 n 是数组 <code>nums</code> 的长度。因为我们只需遍历数组一次，所有的操作（异或、位操作）都是 O(1) 的常数时间复杂度。</p>
</li>
<li>
<p><strong>空间复杂度</strong>：总的额外空间复杂度是 O(1)。虽然我们使用了固定数量的变量（<code>set</code>, <code>setXor</code>, <code>totalXor</code>），但这些变量的空间需求是常量级别，不受输入大小影响。因此空间复杂度可以认为是 O(1)。</p>
</li>
</ul>
<h1 id="go完整代码如下">Go完整代码如下：</h1>
<pre><code class="language-go">package main

import "fmt"

func duplicateNumbersXOR(nums []int) int {
	set:=0
	setXor:=0
	totalXor:=0
	for _, num := range nums {
        totalXor^=num
		if set&amp;(1&lt;&lt;num)==0{
			setXor^=num
		}
		set|=1&lt;&lt;num
    }
	return setXor^totalXor
}

func main() {
    // 示例输入
    nums := []int{1, 2, 2, 1}
    result := duplicateNumbersXOR(nums)
    fmt.Println(result) // 输出: 3
}
</code></pre>
<p><img src="https://i-blog.csdnimg.cn/direct/1c94b724c8ac47a49afadb9a9fd6fcb0.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="rust完整代码如下">Rust完整代码如下：</h1>
<pre><code class="language-rust">fn duplicate_numbers_xor(nums: &amp;[i64]) -&gt; i64 {
    let mut set = 0;
    let mut set_xor = 0;
    let mut total_xor = 0;

    for &amp;num in nums {
        total_xor ^= num;
        if (set &amp; (1 &lt;&lt; num)) == 0 {
            set_xor ^= num;
        }
        set |= 1 &lt;&lt; num;
    }

    set_xor ^ total_xor
}

fn main() {
    // 示例输入
    let nums = vec![1, 2, 2, 1];
    let result = duplicate_numbers_xor(&amp;nums);
    println!("{}", result); // 输出: 3
}
</code></pre>
<p><img src="https://i-blog.csdnimg.cn/direct/d740c38d36a0444bbcf94bd8cd004040.png" alt="在这里插入图片描述" loading="lazy"></p>

</div>
<div id="MySignature" role="contentinfo">
    公众号：福大大架构师每日一题
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0010539871122685184" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-28 20:36">2024-12-28 20:36</span>&nbsp;
<a href="https://www.cnblogs.com/moonfdd">福大大架构师每日一题</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18637918" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18637918);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18637918', targetLink: 'https://www.cnblogs.com/moonfdd/p/18637918', title: '2024-12-28：求出出现两次数字的 XOR 值。用go语言，给定一个数组 nums，其中的数字出现的频率要么是一次，要么是两次。 请找出所有出现两次的数字，并计算它们的按位 XOR 值。 如果没' })">举报</a>
</div>
        