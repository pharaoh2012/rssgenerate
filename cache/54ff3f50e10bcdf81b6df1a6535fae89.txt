
        <h2>
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wuhuacong/p/18738199" title="发布于 2025-02-26 15:29">
    <span role="heading" aria-level="2">使用PySide6/PyQt6实现Python跨平台GUI框架的开发</span>
    

</a>

        </h2>
        <div class="postbody">
                <div id="cnblogs_post_description" style="display: none">
        
        在前面的《Python开发》中主要介绍了FastAPI的后端Python开发，以及基于WxPython的跨平台GUI的开发过程，由于PySide6/PyQt6 在GUI的用途上也有很大的优势，因此把原先完成的WxPython 开发框架改造成使用PySide6/PyQt6实现Python跨平台GUI框架的开发过程，本篇随笔介绍它们之间项目联系和不同，主要针对PySide6/PyQt6 的特性进行不同的分解介绍。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>在前面的《<a href="https://www.cnblogs.com/wuhuacong/tag/Python%E5%BC%80%E5%8F%91/" target="_blank">Python开发</a>》中主要介绍了FastAPI的后端Python开发，以及基于WxPython的跨平台GUI的开发过程，由于PySide6/PyQt6 在GUI的用途上也有很大的优势，因此把原先完成的WxPython 开发框架改造成使用PySide6/PyQt6实现Python跨平台GUI框架的开发过程，本篇随笔介绍它们之间项目联系和不同，主要针对PySide6/PyQt6 的特性进行不同的分解介绍。</p>
<h3>1、技术架构体系--一个中心，多个前端</h3>
<p>基于PySide6/PyQt6实现的 Python跨平台桌面端GUI框架，和WxPython的跨平台桌面端一样，都是是整个架构体现的一部分，一个Web API中心，同时提供多个接入的终端，如下架构图所示。</p>
<p>PySide6 和 PyQt6 开发上基本上已经趋向大同，很多时候只需要替换一下前面的命名空间即可，因此PySide6 和 PyQt6 开发上已没有多少差异，QT的官方已经把PySide作为Python的GUI 标准案例进行文档介绍了。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202502/8867-20250226142311414-2043672306.png" alt="" loading="lazy"></p>
<p>&nbsp;其中的Python + FastAPI项目是一个Web API的项目，为各个前端提供接口的后端项目，其界面自动整合Swagger的文档界面，如下所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202412/8867-20241203105453149-306138980.png" alt="" width="891" height="672" class="medium-zoom-image" loading="lazy"></p>
<p>单个模块包含很多通用的接口，通用的接口能满足90%以上的功能需求，以及一些额外的自定义接口。如下是客户信息模块的接口列表。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202502/8867-20250226123853802-1885285654.png" alt="" width="888" height="960" loading="lazy"></p>
<p>&nbsp;该后端接口采用统一的接口协议，具有统一的协议规范和定义。标准协议如下所示。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">{
  </span>"success": <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">,
  </span>"result"<span style="color: rgba(0, 0, 0, 1)">:  T ,
  </span>"targetUrl": "string"<span style="color: rgba(0, 0, 0, 1)">,
  </span>"UnAuthorizedRequest": <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">,
  </span>"errorInfo"<span style="color: rgba(0, 0, 0, 1)">: {
    </span>"code": 0<span style="color: rgba(0, 0, 0, 1)">,
    </span>"message": "string"<span style="color: rgba(0, 0, 0, 1)">,
    </span>"details": "string"<span style="color: rgba(0, 0, 0, 1)">
  }
}</span></pre>
</div>
<p>结合泛型的方式，这样定义可以很好的抽象不同的业务类接口到基类BaseApi中，这样增删改查等处理的接口都可以抽象到BaseApi里面了。</p>
<p>权限模块我们涉及到的用户管理、机构管理、角色管理、菜单管理、功能管理、操作日志、登录日志等业务类，那么这些类继承BaseApi，就会具有相关的接口了，如下所示继承关系。</p>
<p><img src="https://img2020.cnblogs.com/blog/8867/202007/8867-20200713152737929-890201160.png" alt="" width="911" height="268" class="medium-zoom-image" loading="lazy"></p>
<p>因此在前端、后端都可以广泛的使用基类抽象的方式，实现绝大多数接口的封装处理。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202502/8867-20250226142657289-1243694122.png" alt="" width="911" height="846" loading="lazy"></p>
<p>&nbsp;</p>
<h3>2、PySide6/PyQt6实现Python跨平台的桌面前端的基类设计</h3>
<p>对于桌面前端，由于大多数情况下，界面的表现逻辑可以使用不同的规则进行抽象，如自定义控件、列表界面、弹出对话框界面等，我们把它抽象出来进行不同的处理。子类界面进行一定程度的扩张即可获得更好的使用、更简化的代码。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202502/8867-20250226144241472-1488282641.png" alt="" loading="lazy"></p>
<p>&nbsp;对于自定义控件，我们对其封装，使之能够在开发使用习惯上更一致，下面是我们根据需要对常见的原生控件进行一些自定义控件的封装列表。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202502/8867-20250226145049058-1815324359.png" alt="" loading="lazy"></p>
<p>自定义控件在提供一致的接口上，也可以更有效的提供一些特殊接口，如简化字典数据的绑定处理等。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202502/8867-20250226145206831-228941403.png" alt="" width="742" height="583" loading="lazy"></p>
<p>&nbsp;对于列表和对话框界面的封装，能够简化对泛型模型数据的统一处理，因此可以简化继承子类的代码，提供代码维护开发和维护的效率。&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202502/8867-20250226144827166-1872796228.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h3>3、PySide6/PyQt6实现Python跨平台的桌面前端的界面展示</h3>
<p>完成了基础部分的自定义控件、对话框窗口、列表窗体、API调用封装等方面的处理后，就可以基于这些基础上进行界面的开发了。</p>
<p>登录界面效果如下。</p>
<p>&nbsp;<img src="https://img2024.cnblogs.com/blog/8867/202502/8867-20250226150609254-1339155405.png" alt="" width="515" height="322" loading="lazy"></p>
<p>&nbsp;和WxPython的跨平台界面效果一样，该框架也是一个多文档管理界面，其中用户管理界面如下所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202502/8867-20250226150837369-1973720112.png" alt="" width="962" height="643" loading="lazy"></p>
<p>&nbsp;列表包含有有树形列表、条件查询框、通用条件（查询、新增、编辑、删除、导出）等、列表展示、分页导航等内容。这些都是在基类中进行了统一的抽象处理，子类根据需要调整属性或重写相关函数即可实现个性化的界面定义。</p>
<p>树列表或者表格控件，右键可以弹出相关的右键菜单</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202502/8867-20250226151428450-2123208062.png" alt="" width="603" height="528" loading="lazy"></p>
<p>&nbsp;</p>
<p>在列表界面中，选择新增、编辑，会弹出模态对话框进行数据展示或者编辑处理。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202502/8867-20250226151627721-1485146293.png" alt="" width="979" height="654" loading="lazy"></p>
<p>&nbsp;参数配置界面效果如下所示</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202502/8867-20250226151850402-900526829.png" alt="" width="988" height="660" loading="lazy"></p>
<p>&nbsp;通用字典信息的管理如下所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202502/8867-20250226152110503-718839663.png" alt="" width="989" height="789" loading="lazy"></p>
<p>批量新增字典项目界面如下。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202502/8867-20250226152229961-954427341.png" alt="" width="696" height="518" loading="lazy"></p>
<p>&nbsp;系统中统一展示和选择图标的界面如下所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202502/8867-20250226152353764-310755391.png" alt="" width="988" height="789" loading="lazy"></p>
<p>其他界面就不再一一介绍，有空再继续细化各个模块的开发总结。&nbsp;</p>
<p>&nbsp;</p>
<h3>4、WxPython桌面前端的界面展示</h3>
<p>　　对照上面的PySide6/PyQt6实现Python跨平台GUI框架界面，我们把WxPython相关的界面对比一下，先有一个直观的感受。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202412/8867-20241202211232878-310590617.png" alt="" width="1004" height="638" class="medium-zoom-image"></p>
<p>树列表或者表格数据控件支持右键弹出菜单处理。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202412/8867-20241202221125197-1052662400.png" alt="" width="399" height="272" class="medium-zoom-image"></p>
<p>&nbsp;在列表界面中，选择新增、编辑，会弹出模态对话框进行数据展示或者编辑处理。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202502/8867-20250226124133897-827379760.png" alt="" width="1111" height="828" loading="lazy"></p>
<p>参数配置界面效果如下所示</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202412/8867-20241210105359176-689484429.png" alt="" width="705" height="444" class="medium-zoom-image" loading="lazy"></p>
<p>通用字典信息的管理如下所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202412/8867-20241202211509189-1350315444.png" alt="" class="medium-zoom-image"></p>
<p>系统中统一展示和选择图标的界面如下所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202412/8867-20241231121139181-717198371.png" alt="" width="709" height="535" class="medium-zoom-image" loading="lazy"></p>
</div>
<div id="MySignature" role="contentinfo">
    <div style="border-right-color: #cccccc; border-right-width: 1px; border-right-style: solid; padding-right: 5px; border-top-color: #cccccc; border-top-width: 1px; border-top-style: solid; padding-left: 4px; font-size: 13px; padding-bottom: 4px; border-left-color: #cccccc; border-left-width: 1px; border-left-style: solid; width: 98%; padding-top: 4px; border-bottom-color: #cccccc; border-bottom-width: 1px; border-bottom-style: solid; background-color: #eeeeee;">
    <img src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif" align="top" alt="">
    <span style="color: #000000"><span class="Apple-tab-span" style="white-space: pre"></span>
     专注于代码生成工具、.Net/.NetCore 框架架构及软件开发，以及各种Vue.js的前端技术应用。著有Winform开发框架/混合式开发框架、微信开发框架、Bootstrap开发框架、ABP开发框架、SqlSugar开发框架等框架产品。
     <br>&nbsp;&nbsp;转载请注明出处：撰写人：伍华聪&nbsp;&nbsp;<a href="http://www.iqidi.com/" target="_blank">http://www.iqidi.com</a>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span></div>
</div>
<div class="clear"></div>

        </div>
        <p class="postfoot">
            posted on 
<span id="post-date" data-last-update-days="0.035240536060185186" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-26 15:30">2025-02-26 15:29</span>&nbsp;
<a href="https://www.cnblogs.com/wuhuacong">伍华聪</a>&nbsp;
阅读(<span id="post_view_count">72</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18738199" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18738199);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18738199', targetLink: 'https://www.cnblogs.com/wuhuacong/p/18738199', title: '使用PySide6/PyQt6实现Python跨平台GUI框架的开发' })">举报</a>

        </p>
    