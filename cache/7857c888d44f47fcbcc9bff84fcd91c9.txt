
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mingupupu/p/18710934" title="发布于 2025-02-12 09:26">
    <span role="heading" aria-level="2">浏览器自动化与AI Agent结合项目browser-use初探</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="browser-use介绍">browser-use介绍</h2>
<p>browser-use是将您的 AI 代理连接到浏览器的最简单方式。它通过提供一个强大且简单的接口来实现 AI 代理访问网站的自动化。</p>
<p>GitHub地址：<a href="https://github.com/browser-use/browser-use%E3%80%82%E7%9B%AE%E5%89%8D%E5%B7%B2%E7%BB%8F%E8%8E%B7%E5%BE%97%E4%BA%8627.3k%E9%A2%97stars%EF%BC%8C2.7kforks%EF%BC%8C%E7%9C%8B%E5%BE%97%E5%87%BA%E6%9D%A5%E6%98%AF%E4%B8%80%E4%B8%AA%E6%AF%94%E8%BE%83%E7%83%AD%E9%97%A8%E7%9A%84%E9%A1%B9%E7%9B%AE%E3%80%82%E6%88%91%E5%9C%A8%E4%B8%8A%E6%89%8B%E4%BD%93%E9%AA%8C%E4%BA%86%E4%B9%8B%E5%90%8E%EF%BC%8C%E5%8F%91%E7%8E%B0%E7%A1%AE%E5%AE%9E%E6%98%AF%E4%B8%80%E4%B8%AA%E5%BE%88%E6%9C%89%E8%B6%A3%E7%9A%84%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%9B%A0%E6%AD%A4%E6%8E%A8%E8%8D%90%E7%BB%99%E5%A4%A7%E5%AE%B6%E3%80%82" target="_blank" rel="noopener nofollow">https://github.com/browser-use/browser-use。目前已经获得了27.3k颗stars，2.7kforks，看得出来是一个比较热门的项目。我在上手体验了之后，发现确实是一个很有趣的项目，因此推荐给大家。</a></p>
<h2 id="实践">实践</h2>
<p>上手也非常简单，创建一个python虚拟环境，pip install browser-use，再playwright install即可。</p>
<p>现在需要进行LLM的配置，官方推荐使用gpt-4o，但是为了降低成本，方便让看了教程感兴趣的人能够方便上手，这里我使用的是硅基流动提供的模型。目前硅基流动注册送14元不过期额度，够用一段时间的了，邀请链接：<a href="https://cloud.siliconflow.cn/i/Ia3zOSCU%E3%80%82%E5%A6%82%E6%9E%9C%E4%BD%A0%E7%9A%84%E9%A2%9D%E5%BA%A6%E4%B8%8D%E5%A4%9F%E4%BA%86%EF%BC%8C%E4%BD%86%E6%98%AF%E4%B9%9F%E6%83%B3%E4%BD%93%E9%AA%8C%E4%B8%80%E4%B8%8B%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%A7%81%E8%81%8A%E6%88%91%EF%BC%8C%E6%88%91%E5%8F%AF%E4%BB%A5%E6%8F%90%E4%BE%9B%E4%B8%80%E4%B8%AAapi" target="_blank" rel="noopener nofollow">https://cloud.siliconflow.cn/i/Ia3zOSCU。如果你的额度不够了，但是也想体验一下，可以私聊我，我可以提供一个api</a> key暂时供你快速上手体验，额度用差不多了，我就停止了。</p>
<p>创建一个.env文件，这样写：</p>
<pre><code class="language-python">Silicon_Cloud_API_KEY=xxx
Base_URL=https://api.siliconflow.cn
Model=Qwen/Qwen2.5-72B-Instruct
</code></pre>
<p>创建一个test脚本，这样写：</p>
<pre><code class="language-python">from langchain_openai import ChatOpenAI
from browser_use import Agent
from dotenv import load_dotenv
import os
load_dotenv()

import asyncio

api_key = os.getenv('Silicon_Cloud_API_KEY')
base_url = os.getenv('Base_URL')
model = os.getenv('Model')

llm = ChatOpenAI(model=model, api_key=api_key, base_url=base_url)

async def main():
    agent = Agent(
        task="获取https://github.com/OpenInterpreter/open-interpreter仓库的前五个问题",
        llm=llm,
        use_vision=False,
    )
    result = await agent.run()
    print(result)

asyncio.run(main())
</code></pre>
<p>查看效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250212092611027-2013967865.png" alt="image-20250212085716642" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250212092610854-1510882997.png" alt="image-20250212085758634" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250212092611017-1964119192.png" alt="image-20250212085834372" loading="lazy"></p>
<p>还生成了一个agent_history.gif可以查看流程：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250212092611057-1727615151.gif" alt="" loading="lazy"></p>
<p>将结果与实际对比：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250212092611020-574597018.png" alt="image-20250212090403603" loading="lazy"></p>
<p>可以发现browser-use非常准确的获取了。</p>
<p>再使用一个更普遍的例子，就是获取当前微博前十的热搜。</p>
<pre><code class="language-python">from langchain_openai import ChatOpenAI
from browser_use import Agent
from dotenv import load_dotenv
import os
load_dotenv()

import asyncio

api_key = os.getenv('Silicon_Cloud_API_KEY')
base_url = os.getenv('Base_URL')
model = os.getenv('Model')

llm = ChatOpenAI(model=model, api_key=api_key, base_url=base_url)

async def main():
    agent = Agent(
        task="获取当前微博前十的热搜",
        llm=llm,
        use_vision=False,
    )
    result = await agent.run()
    print(result)

asyncio.run(main())
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250212092611014-312041727.png" alt="image-20250212090822384" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250212092610898-624757536.png" alt="image-20250212090907000" loading="lazy"></p>
<h2 id="最后">最后</h2>
<p>以上就是使用硅基流动中的Qwen/Qwen2.5-72B-Instruct快速体验browser-use的效果。初步体验感觉是一个很有潜力的项目，将AI Agent与浏览器自动化结合确实可以做很多事情。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.054579418831018515" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-12 09:26">2025-02-12 09:26</span>&nbsp;
<a href="https://www.cnblogs.com/mingupupu">mingupupup</a>&nbsp;
阅读(<span id="post_view_count">53</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18710934" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18710934);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18710934', targetLink: 'https://www.cnblogs.com/mingupupu/p/18710934', title: '浏览器自动化与AI Agent结合项目browser-use初探' })">举报</a>
</div>
        