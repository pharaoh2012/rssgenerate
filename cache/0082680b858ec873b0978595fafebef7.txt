
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/qiuzhendezhen/p/18979296" title="发布于 2025-07-11 17:52">
    <span role="heading" aria-level="2">Kamailio 5.8.3与rtpengine双网卡SBC集成要点</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div class="lake-content">
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2500940/202507/2500940-20250711175234164-1263163682.jpg" class="lazyload"></p>
<p>&nbsp;</p>
<p id="ue5273f24" class="ne-p"><span class="ne-text">本文档总结了将Kamailio 5.8.3与rtpengine（配置为双网卡模式）集成以实现SIP+RTP媒体流转发（包括音视频和RTCP）的关键配置要点和最佳实践。用户场景包括：无NAT、公私网双向呼叫、通过dispatcher模块对公私网两侧的多网关进行负载均衡。</span></p>
<h2 id="pvnmA"><span class="ne-text">1. Kamailio rtpengine模块核心配置与使用</span></h2>
<h3 id="yQzRE"><span class="ne-text">1.1. 模块加载与参数</span></h3>
<pre class="ne-codeblock language-plain" data-language="plain"><code>loadmodule "rtpengine.so"

modparam("rtpengine", "rtpengine_sock", "udp:127.0.0.1:22222") # 与rtpengine的NG协议通信地址和端口
# 根据rtpengine mr13.1.1.6的配置，NG监听在127.0.0.1:22222

# 可选参数，根据需要调整：
# modparam("rtpengine", "rtpengine_tout_ms", 1000) # rtpengine请求超时时间 (毫秒)
# modparam("rtpengine", "rtpengine_retr", 5)      # rtpengine请求重试次数
# modparam("rtpengine", "hash_table_size", 2048) # 内部哈希表大小
# modparam("rtpengine", "setid_avp", "$avp(rtpengine_setid)") # 如果使用多个rtpengine set</code></pre>
<h3 id="uB23I"><span class="ne-text">1.2. 核心函数调用</span></h3>
<ul class="ne-ul">
<li id="udc3a7f41" data-lake-index-type="0"><code class="ne-code"><span class="ne-text">rtpengine_offer([flags])</span></code><span class="ne-text">: 在处理初始INVITE时调用，用于协商媒体。</span></li>
<li id="uf80f0c77" data-lake-index-type="0"><code class="ne-code"><span class="ne-text">rtpengine_answer([flags])</span></code><span class="ne-text">: 在处理2xx响应时调用，用于确认媒体协商。</span></li>
<li id="ufd696963" data-lake-index-type="0"><code class="ne-code"><span class="ne-text">rtpengine_delete([flags])</span></code><span class="ne-text">: 在处理BYE或会话结束时调用，用于释放rtpengine资源。</span></li>
<li id="u1299e980" data-lake-index-type="0"><code class="ne-code"><span class="ne-text">rtpengine_manage([flags])</span></code><span class="ne-text">: 一个更通用的函数，可以替代<code class="ne-code"><span class="ne-text">rtpengine_offer</span></code><span class="ne-text">和<code class="ne-code"><span class="ne-text">rtpengine_answer</span></code><span class="ne-text">，并提供更多灵活性。通常建议使用<code class="ne-code"><span class="ne-text">rtpengine_manage</span></code><span class="ne-text">。</span></span></span></span></li>
</ul>
<h3 id="g4K7z"><span class="ne-text">1.3. 关键Flags（用于<code class="ne-code"><span class="ne-text">rtpengine_manage</span></code><span class="ne-text">等函数）</span></span></h3>
<p id="u8cb19547" class="ne-p"><span class="ne-text">rtpengine的强大之处在于通过flags精细控制其行为。对于双网卡场景，核心是告知rtpengine媒体流的“方向”或应使用的接口。</span></p>
<ul class="ne-ul">
<li id="ua372c46b" data-lake-index-type="0"><strong>指定接口/方向</strong><span class="ne-text">：</span></li>
</ul>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="u7208c4d4" data-lake-index-type="0"><span class="ne-text">rtpengine侧配置了逻辑接口名，例如 <code class="ne-code"><span class="ne-text">interface = public/PUBLIC_IP!PUBLIC_IP</span></code><span class="ne-text"> 和 <code class="ne-code"><span class="ne-text">interface = private/PRIVATE_IP!PRIVATE_IP</span></code><span class="ne-text">。</span></span></span></li>
<li id="ucca1e61b" data-lake-index-type="0"><span class="ne-text">Kamailio需要通过flags告诉rtpengine使用哪个逻辑接口。常用的方法是利用<code class="ne-code"><span class="ne-text">direction=public</span></code><span class="ne-text">、<code class="ne-code"><span class="ne-text">direction=private</span></code><span class="ne-text">这样的自定义标记，并在rtpengine的<code class="ne-code"><span class="ne-text">rtpengine_offer</span></code><span class="ne-text">/<code class="ne-code"><span class="ne-text">rtpengine_answer</span></code><span class="ne-text">/<code class="ne-code"><span class="ne-text">rtpengine_manage</span></code><span class="ne-text">的flags参数中传递。例如：</span></span></span></span></span></span></li>
</ul>
</ul>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="u1badd032" data-lake-index-type="0"><span class="ne-text">对于来自公网的呼叫，发往私网的媒体描述，应指示rtpengine使用其“私网”接口：<code class="ne-code"><span class="ne-text">rtpengine_manage("direction=public direction=private ...")</span></code></span></li>
<li id="u43c389b0" data-lake-index-type="0"><span class="ne-text">对于来自私网的呼叫，发往公网的媒体描述，应指示rtpengine使用其“公网”接口：<code class="ne-code"><span class="ne-text">rtpengine_manage("direction=private direction=public ...")</span></code></span></li>
</ul>
</ul>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="u08d938bc" data-lake-index-type="0"><span class="ne-text">另一种方式是直接在flags中指定IP地址，例如 <code class="ne-code"><span class="ne-text">internal-ip=PRIVATE_IP external-ip=PUBLIC_IP</span></code><span class="ne-text">，但这通常不如使用逻辑接口名灵活。</span></span></li>
<li id="u7b6ffa43" data-lake-index-type="0"><strong>重要</strong><span class="ne-text">：Kamailio脚本需要有逻辑来判断呼叫的来源和去向，以便设置正确的<code class="ne-code"><span class="ne-text">direction</span></code><span class="ne-text"> flag。</span></span></li>
</ul>
</ul>
<ul class="ne-ul">
<li id="u9239ba26" data-lake-index-type="0"><strong>媒体类型支持 (音视频)</strong><span class="ne-text">：</span></li>
</ul>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="u9da61713" data-lake-index-type="0"><span class="ne-text">rtpengine默认会尝试处理SDP中描述的所有媒体流（音频和视频）。</span></li>
<li id="uf18bf523" data-lake-index-type="0"><span class="ne-text">确保SDP中正确描述了音视频媒体行 (<code class="ne-code"><span class="ne-text">m=audio ...</span></code><span class="ne-text">, <code class="ne-code"><span class="ne-text">m=video ...</span></code><span class="ne-text">)。</span></span></span></li>
<li id="uba3f4c51" data-lake-index-type="0"><span class="ne-text">Flags示例: <code class="ne-code"><span class="ne-text">RTP/AVP</span></code><span class="ne-text"> (标准RTP), <code class="ne-code"><span class="ne-text">RTP/SAVP</span></code><span class="ne-text"> (SRTP, 如果需要加密)。</span></span></span></li>
</ul>
</ul>
<ul class="ne-ul">
<li id="u285caa28" data-lake-index-type="0"><strong>RTCP支持</strong><span class="ne-text">：</span></li>
</ul>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="u6c4fda95" data-lake-index-type="0"><span class="ne-text">rtpengine会自动处理与RTP流配对的RTCP流。</span></li>
<li id="uc81e013d" data-lake-index-type="0"><code class="ne-code"><span class="ne-text">rtcp-mux-offer</span></code><span class="ne-text">, <code class="ne-code"><span class="ne-text">rtcp-mux-answer</span></code><span class="ne-text">, <code class="ne-code"><span class="ne-text">rtcp-mux-require</span></code><span class="ne-text">: 用于处理RTCP与RTP在同一端口复用的情况 (RFC 5761)。如果终端支持，建议启用以节省端口资源。</span></span></span></li>
</ul>
</ul>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="ub967f3ae" data-lake-index-type="0"><span class="ne-text">例如: <code class="ne-code"><span class="ne-text">rtpengine_manage("rtcp-mux-offer ...")</span></code></span></li>
</ul>
</ul>
<ul class="ne-ul">
<li id="ub66de6c0" data-lake-index-type="0"><strong>NAT处理 (用户场景为无NAT，但相关flags仍需注意)</strong><span class="ne-text">：</span></li>
</ul>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="ua8a2ccbf" data-lake-index-type="0"><code class="ne-code"><span class="ne-text">trust-address</span></code><span class="ne-text">: 信任SDP中的连接地址。</span></li>
<li id="u053a2306" data-lake-index-type="0"><code class="ne-code"><span class="ne-text">replace-origin</span></code><span class="ne-text">: 替换SDP中o=行中的地址。</span></li>
<li id="u0f12f8f8" data-lake-index-type="0"><code class="ne-code"><span class="ne-text">replace-session-connection</span></code><span class="ne-text">: 替换会话级c=行中的地址。</span></li>
<li id="u973261a9" data-lake-index-type="0"><span class="ne-text">在无NAT直连IP场景，这些替换标志通常也需要，以确保SDP中的IP地址是rtpengine的接口地址。</span></li>
</ul>
</ul>
<ul class="ne-ul">
<li id="u38a56891" data-lake-index-type="0"><strong>编解码器协商</strong><span class="ne-text">：</span></li>
</ul>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="u4fc10aae" data-lake-index-type="0"><span class="ne-text">rtpengine可以进行编解码器过滤和转码（如果配置了转码模块）。</span></li>
<li id="u9e210446" data-lake-index-type="0"><span class="ne-text">Flags: <code class="ne-code"><span class="ne-text">codec-strip=all</span></code><span class="ne-text">, <code class="ne-code"><span class="ne-text">codec-mask=all,!PCMA,!PCMU</span></code><span class="ne-text">, <code class="ne-code"><span class="ne-text">codec-transcode=PCMA</span></code><span class="ne-text"> 等。</span></span></span></span></li>
<li id="u38385b22" data-lake-index-type="0"><span class="ne-text">用户场景未明确要求转码，但如果需要，rtpengine具备此能力。</span></li>
</ul>
</ul>
<ul class="ne-ul">
<li id="ubbfb31eb" data-lake-index-type="0"><strong>示例组合Flag</strong><span class="ne-text"> (根据呼叫方向调整):</span></li>
</ul>
<ul class="ne-list-wrap">
<ul class="ne-ul">
<li id="u54aea593" data-lake-index-type="0"><code class="ne-code"><span class="ne-text">rtpengine_manage("trust-address replace-origin replace-session-connection direction=public direction=private RTP/AVP rtcp-mux-offer")</span></code></li>
<li id="uaf681451" data-lake-index-type="0"><code class="ne-code"><span class="ne-text">rtpengine_manage("trust-address replace-origin replace-session-connection direction=private direction=public RTP/AVP rtcp-mux-answer")</span></code></li>
</ul>
</ul>
<h2 id="PNh01"><span class="ne-text">2. Kamailio dispatcher模块配置</span></h2>
<p id="ufd655bd8" class="ne-p"><span class="ne-text">用户需要在公网和私网两侧都通过dispatcher对多个网关进行负载均衡。</span></p>
<h3 id="jloC2"><span class="ne-text">2.1. 定义Dispatcher Set</span></h3>
<p id="ud3a5d305" class="ne-p"><span class="ne-text">需要在<code class="ne-code"><span class="ne-text">kamailio.cfg</span></code><span class="ne-text">的全局部分或<code class="ne-code"><span class="ne-text">dispatcher</span></code><span class="ne-text">模块加载时定义网关组。</span></span></span></p>
<pre class="ne-codeblock language-plain" data-language="plain"><code>loadmodule "dispatcher.so"

# 定义公网网关组 (set id 1)
modparam("dispatcher", "list_file", "/etc/kamailio/dispatcher_public.list")
# 或者直接在配置文件中定义：
# modparam("dispatcher", "set_uri", "1 sip:gw_public1.example.com:5060")
# modparam("dispatcher", "set_uri", "1 sip:gw_public2.example.com:5060")

# 定义私网网关组 (set id 2)
modparam("dispatcher", "list_file", "/etc/kamailio/dispatcher_private.list")
# 或者直接在配置文件中定义：
# modparam("dispatcher", "set_uri", "2 sip:gw_private1.internal:5060")
# modparam("dispatcher", "set_uri", "2 sip:gw_private2.internal:5060")</code></pre>
<p id="ud19c98da" class="ne-p"><code class="ne-code"><span class="ne-text">dispatcher_public.list</span></code><span class="ne-text"> 文件示例:</span></p>
<pre class="ne-codeblock language-plain" data-language="plain"><code>1 sip:public_gw1_ip:5060
1 sip:public_gw2_ip:5060 flags=ap # a for active, p for PINGs</code></pre>
<p id="u2d8dd52e" class="ne-p"><code class="ne-code"><span class="ne-text">dispatcher_private.list</span></code><span class="ne-text"> 文件示例:</span></p>
<pre class="ne-codeblock language-plain" data-language="plain"><code>2 sip:private_gw1_ip:5060
2 sip:private_gw2_ip:5060</code></pre>
<h3 id="VWkiC"><span class="ne-text">2.2. 选择网关</span></h3>
<p id="u359a9c43" class="ne-p"><span class="ne-text">在路由逻辑中，使用<code class="ne-code"><span class="ne-text">ds_select_dst()</span></code><span class="ne-text">或<code class="ne-code"><span class="ne-text">ds_select_domain()</span></code><span class="ne-text">选择目标网关。</span></span></span></p>
<pre class="ne-codeblock language-plain" data-language="plain"><code># 呼叫发往公网
if (is_from_private()) { # 自定义逻辑判断是否来自私网
    ds_select_dst("1", "4"); # 选择公网网关组 (set 1), 算法4 (round-robin)
    if ($rc &lt; 0 || $ru == $null) {
        send_reply("503", "Service Unavailable - No Public Gateway");
        exit;
    }
    # $du 会被设置为选中的网关URI
    t_set_destination_uri($du);
    # ... 后续路由和rtpengine_manage调用 (direction=public)
}

# 呼叫发往私网
if (is_from_public()) { # 自定义逻辑判断是否来自公网
    ds_select_dst("2", "4"); # 选择私网网关组 (set 2), 算法4 (round-robin)
    if ($rc &lt; 0 || $ru == $null) {
        send_reply("503", "Service Unavailable - No Private Gateway");
        exit;
    }
    # $du 会被设置为选中的网关URI
    t_set_destination_uri($du);
    # ... 后续路由和rtpengine_manage调用 (direction=private)
}</code></pre>
<h2 id="aRXAh"><span class="ne-text">3. Kamailio路由逻辑中的双网卡处理</span></h2>
<p id="uf4cc7184" class="ne-p"><span class="ne-text">Kamailio需要能够区分流量的来源（公网/私网）和去向，以便：</span></p>
<ol class="ne-ol">
<li id="u540ea729" data-lake-index-type="0"><span class="ne-text">选择正确的dispatcher网关组。</span></li>
<li id="u6f97004e" data-lake-index-type="0"><span class="ne-text">为<code class="ne-code"><span class="ne-text">rtpengine_manage</span></code><span class="ne-text">设置正确的<code class="ne-code"><span class="ne-text">direction</span></code><span class="ne-text"> flag。</span></span></span></li>
</ol>
<h3 id="XeVor"><span class="ne-text">3.1. 识别接口/网络</span></h3>
<ul class="ne-ul">
<li id="ue9ea7fb4" data-lake-index-type="0"><span class="ne-text">可以使用<code class="ne-code"><span class="ne-text">if ($si == "PUBLIC_KAM_IP" &amp;&amp; $sp == 5060)</span></code><span class="ne-text"> 或 <code class="ne-code"><span class="ne-text">if (src_ip == "PRIVATE_KAM_IP")</span></code><span class="ne-text"> 等条件判断SIP包到达的Kamailio接口。</span></span></span></li>
<li id="ua68739d9" data-lake-index-type="0"><span class="ne-text">或者通过自定义的<code class="ne-code"><span class="ne-text">is_from_public()</span></code><span class="ne-text"> / <code class="ne-code"><span class="ne-text">is_from_private()</span></code><span class="ne-text"> 函数，基于源IP地址或其他头部信息进行判断。</span></span></span></li>
</ul>
<h3 id="SSxpZ"><span class="ne-text">3.2. 示例路由块结构</span></h3>
<pre class="ne-codeblock language-plain" data-language="plain"><code>request_route {
    # ... 初始处理 (max_forwards, sanity checks etc.)

    if (is_from_public()) { # 假设这是来自公网的呼叫
        xlog("L_INFO", "Call from Public to Private Network\n");
        # 目标是私网
        ds_select_dst("2", "4"); # 选择私网网关组
        if ($rc &lt; 0 || $ru == $null) {
            send_reply("503", "No Private Gateway Available");
            exit;
        }
        t_set_destination_uri($du);

        if (has_body("application/sdp")) {
            rtpengine_manage("trust-address replace-origin replace-session-connection direction=private RTP/AVP rtcp-mux-offer");
        }
        route(RELAY_TO_PRIVATE);

    } else if (is_from_private()) { # 假设这是来自私网的呼叫
        xlog("L_INFO", "Call from Private to Public Network\n");
        # 目标是公网
        ds_select_dst("1", "4"); # 选择公网网关组
        if ($rc &lt; 0 || $ru == $null) {
            send_reply("503", "No Public Gateway Available");
            exit;
        }
        t_set_destination_uri($du);

        if (has_body("application/sdp")) {
            rtpengine_manage("trust-address replace-origin replace-session-connection direction=public RTP/AVP rtcp-mux-offer");
        }
        route(RELAY_TO_PUBLIC);
    } else {
        xlog("L_WARN", "Call from unknown source, dropping.\n");
        send_reply("403", "Forbidden - Unknown Source");
        exit;
    }
}

route[RELAY_TO_PRIVATE] {
    # ... 可能的额外处理
    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}

route[RELAY_TO_PUBLIC] {
    # ... 可能的额外处理
    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}

# 对于响应的处理
onreply_route {
    if (status=~"^[12]") {
        if (has_body("application/sdp")) {
            # 需要判断响应的方向来设置正确的direction flag
            # 这通常基于事务状态或自定义的标志
            if (is_reply_to_public_originated_call()) { # 伪代码，需要实现逻辑
                 rtpengine_manage("trust-address replace-origin replace-session-connection direction=private direction=public RTP/AVP rtcp-mux-answer");
            } else if (is_reply_to_private_originated_call()) { # 伪代码
                 rtpengine_manage("trust-address replace-origin replace-session-connection direction=public direction=private RTP/AVP rtcp-mux-answer");
            }
        }
    }
    # ... 其他响应处理
}

branch_route[MANAGE_FAILURE] {
    xlog("L_ERR", "Failed to manage rtpengine for branch\n");
}

failure_route[MANAGE_FAILURE] {
    xlog("L_ERR", "Failed to manage rtpengine for request\n");
}</code></pre>
<h2 id="OS62Z"><span class="ne-text">4. 其他注意事项</span></h2>
<ul class="ne-ul">
<li id="ube353c6b" data-lake-index-type="0"><strong>Kamailio版本</strong><span class="ne-text">：用户指定5.8.3。上述模块和参数在此版本中应可用。建议查阅Kamailio 5.8.x的官方文档确认细节。</span></li>
<li id="u61cfe71a" data-lake-index-type="0"><strong>SDP处理</strong><span class="ne-text">：确保<code class="ne-code"><span class="ne-text">rtpengine_manage</span></code><span class="ne-text">在SDP存在时被调用，并且在请求和响应路径中都被正确处理。</span></span></li>
<li id="u9196bf88" data-lake-index-type="0"><strong>错误处理</strong><span class="ne-text">：<code class="ne-code"><span class="ne-text">rtpengine_manage</span></code><span class="ne-text">调用失败时，应有适当的错误处理逻辑。</span></span></li>
<li id="u6c88f3d1" data-lake-index-type="0"><strong>RTCP</strong><span class="ne-text">：rtpengine会自动处理RTCP。<code class="ne-code"><span class="ne-text">rtcp-mux</span></code><span class="ne-text"> flags是推荐的最佳实践。</span></span></li>
<li id="uc48791e6" data-lake-index-type="0"><strong>安全性</strong><span class="ne-text">：虽然用户未明确要求，但生产环境中应考虑SIP信令的认证和授权，以及可能的TLS加密。</span></li>
<li id="u9fc95ec3" data-lake-index-type="0"><strong>调试</strong><span class="ne-text">：充分利用Kamailio的<code class="ne-code"><span class="ne-text">xlog</span></code><span class="ne-text">和rtpengine的日志进行调试。</span></span></li>
</ul>
<p id="u9405553e" class="ne-p"><span class="ne-text">这份总结将作为起草Kamailio配置文件的基础。</span></p>
<p id="u335fcab3" class="ne-p">&nbsp;</p>
<p id="u5e414085" class="ne-p"><span class="ne-text">空空如常</span></p>
<p id="u3577a95d" class="ne-p"><span class="ne-text">求真得真</span></p>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-11 17:53">2025-07-11 17:52</span>&nbsp;
<a href="https://www.cnblogs.com/qiuzhendezhen">求真得真</a>&nbsp;
阅读(<span id="post_view_count">37</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18979296);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18979296', targetLink: 'https://www.cnblogs.com/qiuzhendezhen/p/18979296', title: 'Kamailio 5.8.3与rtpengine双网卡SBC集成要点' })">举报</a>
</div>
        