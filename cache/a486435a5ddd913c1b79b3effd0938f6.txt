
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lpf2352629/p/18742114" title="发布于 2025-02-27 21:58">
    <span role="heading" aria-level="2">逆向软件开发与设计--超市管理系统</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><strong>一.代码来源</strong><br>
CSDN上面一位人员所编写的超市管理系统。<a href="https://blog.csdn.net/qq_64174887/article/details/131275159?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=C++%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%B6%85%E5%B8%82%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-131275159.142%5Ev101%5Epc_search_result_base8&amp;spm=1018.2226.3001.4187" target="_blank" rel="noopener nofollow">相关网站</a></p>
<details>
<summary>点击查看代码</summary>
<pre><code>#include&lt;iostream&gt;
#include&lt;vector&gt;
#include&lt;string&gt;
#include&lt;fstream&gt;
#include&lt;stdlib.h&gt;
#include&lt;iomanip&gt;
using namespace std;
class Goods {											//货物类（基类）
protected:
	string name;
	int number;
public:
	Goods() {}
	Goods(string Name, int Num) {
		name = Name;
		number = Num;
	}
	virtual void ShowMe() = 0;
	string getname() {								//取商品名称函数
		return name;
	}
	int getnumber() {								//取数量函数
		return number;
	}
	void add(Goods &amp;a) {							//添加货物
		number += a.getnumber();
	}
	void min(Goods &amp;a) {							//售出货物
		number -= a.getnumber();
	}
};
class DailyGoods :public Goods {							//日常用品类
public:
	DailyGoods() {};
	DailyGoods(string Name, int Num) :Goods(Name, Num) {
		name = Name;
		number = Num;
	}
	virtual void ShowMe();
	friend istream&amp; operator &gt;&gt;(istream &amp;cin, DailyGoods &amp;a);
	friend ostream&amp; operator &lt;&lt;(ostream &amp;cout, DailyGoods &amp;a);
	friend ostream&amp; operator &lt;&lt;(ofstream &amp;fout, DailyGoods &amp;a);
};
class Food :public Goods {								//食物类
protected:
	string deadline;
public:
	Food() {};
	Food(string Name, int Num, string Deadline) :Goods(Name, Num) {
		name = Name;
		number = Num;
		deadline = Deadline;
	}
	virtual void ShowMe();
	string getdeadline() {
		return deadline;
	}
	friend istream&amp; operator &gt;&gt;(istream &amp;cin, Food &amp;a);
	friend ostream&amp; operator &lt;&lt;(ostream &amp;cout, Food &amp;a);
	friend ostream&amp; operator &lt;&lt;(ofstream &amp;fout, Food &amp;a);
};
class ElectricalAppliance :public Goods {				//电器类
protected:
	string color;
public:
	ElectricalAppliance() {};
	ElectricalAppliance(string Name, int Num, string Color) :Goods(Name, Num) {
		name = Name;
		number = Num;
		color = Color;
	}
	virtual void ShowMe();
	string getcolor() {
		return color;
	}
	friend istream&amp; operator &gt;&gt;(istream &amp;cin, ElectricalAppliance &amp;a);
	friend ostream&amp; operator &lt;&lt;(ostream &amp;cout, ElectricalAppliance &amp;a);
	friend ostream&amp; operator &lt;&lt;(ofstream &amp;fout, ElectricalAppliance &amp;a);
};
vector&lt;DailyGoods&gt; dailygoods;
vector&lt;Food&gt; food;
vector&lt;ElectricalAppliance&gt; electricalappliance;
istream&amp; operator &gt;&gt;(istream &amp;cin, DailyGoods &amp;a) {				//输入输出符重载
	string Name;												//日用品重载
	int Num;
	cin &gt;&gt; Name &gt;&gt; Num;
	a.name = Name;
	a.number = Num;
	return cin;
}
ostream&amp; operator &lt;&lt;(ostream &amp;cout, DailyGoods &amp;a) {
	cout.fill(' ');
	cout.setf(ios::left);
	cout.width(40);
	cout &lt;&lt; a.name;
	cout.width(40);
	cout &lt;&lt; a.number &lt;&lt; endl;
	return cout;
}
ostream&amp; operator &lt;&lt;(ofstream &amp;fout, DailyGoods &amp;a) {
	fout &lt;&lt; a.name &lt;&lt; " " &lt;&lt; a.number &lt;&lt; endl;
	return fout;
}
istream&amp; operator &gt;&gt;(istream &amp;cin, Food &amp;a) {
	string Name, Deadline;										//食品类重载
	int Num;
	cin &gt;&gt; Name &gt;&gt; Deadline &gt;&gt; Num;
	a.name = Name;
	a.number = Num;
	a.deadline = Deadline;
	return cin;
}
ostream&amp; operator &lt;&lt;(ostream &amp;cout, Food &amp;a) {
	cout.fill(' ');
	cout.setf(ios::left);
	cout.width(40);
	cout &lt;&lt; a.name;
	cout.width(40);
	cout &lt;&lt; a.deadline;
	cout.width(40);
	cout &lt;&lt; a.number;
	return cout;
}
ostream&amp; operator &lt;&lt;(ofstream &amp;fout, Food &amp;a) {
	fout &lt;&lt; a.name &lt;&lt; " " &lt;&lt; a.number &lt;&lt; "	" &lt;&lt; a.deadline &lt;&lt; endl;
	return fout;
}
istream&amp; operator &gt;&gt;(istream &amp;cin, ElectricalAppliance &amp;a) {
	string Name, Color;											//电器类重载
	int Num;
	cin &gt;&gt; Name &gt;&gt; Color &gt;&gt; Num;
	a.name = Name;
	a.number = Num;
	a.color = Color;
	return cin;
}
ostream&amp; operator &lt;&lt;(ostream &amp;cout, ElectricalAppliance &amp;a) {
	cout.fill(' ');
	cout.setf(ios::left);
	cout.width(40);
	cout &lt;&lt; a.name;
	cout.width(40);
	cout &lt;&lt; a.color;
	cout.width(40);
	cout &lt;&lt; a.number;
	return cout;
}
ostream&amp; operator &lt;&lt;(ofstream &amp;fout, ElectricalAppliance &amp;a) {
	fout &lt;&lt; a.name &lt;&lt; " " &lt;&lt; a.number &lt;&lt; "	" &lt;&lt; a.color &lt;&lt; endl;
	return fout;
}
//保存到文件
void saveFood() {												//保存食物
	ofstream fout;
	fout.open("Food.txt", ios::out);
	if (!fout) {
		cout &lt;&lt; "食物类保存失败!" &lt;&lt; endl;
		system("pause");
	}
	else {
		for (vector&lt;Food&gt;::iterator it = food.begin(); it != food.end(); it++) {
			fout &lt;&lt; *it;
		}
		cout &lt;&lt; "食物类已保存" &lt;&lt; endl;
		system("pause");
		fout.close();
	}
}
void saveDailygoods() {											//保存日用品
	ofstream fout;
	fout.open("Dailygoods.txt", ios::out);
	if (!fout) {
		cout &lt;&lt; "日用品保存失败!" &lt;&lt; endl;
		system("pause");
	}
	else {
		for (vector&lt;DailyGoods&gt;::iterator it = dailygoods.begin(); it != dailygoods.end(); it++) {
			fout &lt;&lt; *it;
		}
		cout &lt;&lt; "日用品已保存" &lt;&lt; endl;
		system("pause");
		fout.close();
	}
}
void saveElectrical() {											//保存电器类
	ofstream fout;
	fout.open("Electricalappliance.txt", ios::out);
	if (!fout) {
		cout &lt;&lt; "电器类保存失败!" &lt;&lt; endl;
		system("pause");
	}
	else {
		for (vector&lt;ElectricalAppliance&gt;::iterator it = electricalappliance.begin(); it != electricalappliance.end(); it++) {
			fout &lt;&lt; *it;
		}
		cout &lt;&lt; "电器类已保存" &lt;&lt; endl;
		system("pause");
		fout.close();
	}
}
//读取文件
void readDailygoods() {										//读取并展示日用品函数
	ifstream fin;
	string NAME;
	int NUM;
	fin.open("Dailygoods.txt", ios::in);
	if (!fin) {
		cout &lt;&lt; "日用品类打开失败" &lt;&lt; endl;
		system("pause");
	}
	else if (fin.peek() == EOF) {
		cout &lt;&lt; "内容如下：" &lt;&lt; endl;
		cout &lt;&lt; "空" &lt;&lt; endl;
		cout &lt;&lt; endl &lt;&lt; endl;
		system("pause");
		fin.close();
		return;
	}
	else {
		while (fin &gt;&gt; NAME &gt;&gt; NUM)
		{
			DailyGoods s(NAME, NUM);
			dailygoods.push_back(s);
		}
		cout &lt;&lt; "内容如下：" &lt;&lt; endl;
		for (vector&lt;DailyGoods&gt;::iterator it = dailygoods.begin(); it != dailygoods.end(); it++) {
			cout &lt;&lt; *it;
		}
		cout &lt;&lt; endl &lt;&lt; endl;
		fin.close();
	}
}
void readFood() {										//读取并展示食品函数
	ifstream fin;
	string NAME, DEADLINE;
	int NUM;
	fin.open("Food.txt", ios::in);
	if (!fin) {
		cout &lt;&lt; "食品类打开失败" &lt;&lt; endl;
		system("pause");
	}
	else if (fin.peek() == EOF) {
		cout &lt;&lt; "内容如下：" &lt;&lt; endl;
		cout &lt;&lt; "空" &lt;&lt; endl;
		cout &lt;&lt; endl &lt;&lt; endl;
		system("pause");
		fin.close();
		return;
	}
	else {
		while (fin &gt;&gt; NAME &gt;&gt; NUM &gt;&gt; DEADLINE)
		{
			Food s(NAME, NUM, DEADLINE);
			food.push_back(s);
		}
		cout &lt;&lt; "内容如下：" &lt;&lt; endl;
		for (vector&lt;Food&gt;::iterator it = food.begin(); it != food.end(); it++) {
			cout &lt;&lt; *it;
		}
		cout &lt;&lt; endl &lt;&lt; endl;
		fin.close();
	}
}
void readElectrical() {										//读取并展示电器类函数
	ifstream fin;
	string NAME, COLOR;
	int NUM;
	fin.open("Electricalappliance.txt", ios::in);
	if (!fin) {
		cout &lt;&lt; "电器类打开失败" &lt;&lt; endl;
		system("pause");
	}
	else if (fin.peek() == EOF) {
		cout &lt;&lt; "内容如下：" &lt;&lt; endl;
		cout &lt;&lt; "空" &lt;&lt; endl;
		cout &lt;&lt; endl &lt;&lt; endl;
		system("pause");
		fin.close();
		return;
	}
	else {
		while (fin &gt;&gt; NAME &gt;&gt; NUM &gt;&gt; COLOR)
		{
			ElectricalAppliance s(NAME, NUM, COLOR);
			electricalappliance.push_back(s);
		}
		fin.close();
		cout &lt;&lt; "内容如下：" &lt;&lt; endl;
		for (vector&lt;ElectricalAppliance&gt;::iterator it = electricalappliance.begin(); it != electricalappliance.end(); it++) {
			cout &lt;&lt; *it;
		}
		cout &lt;&lt; endl &lt;&lt; endl;
	}
}
//展示
void DailyGoods::ShowMe() {											//展示日用品
	ifstream fin;//input 读 //output 写    //cin   istream//file
	string NAME;
	int NUM;
	fin.open("Dailygoods.txt", ios::in);//方式    只读
	if (!fin) {
		cout &lt;&lt; "日用品类列表还未建立" &lt;&lt; endl;
		cout &lt;&lt; "日用品类建立中..." &lt;&lt; endl;
		ofstream fint;
		fint.open("Dailygoods.txt", ios::out);
		fint.close();
		cout &lt;&lt; "日用品类已建立文件" &lt;&lt; endl;
		system("pause");
	}
	else {
		while (fin &gt;&gt; NAME &gt;&gt; NUM)
		{
			DailyGoods s(NAME, NUM);
			dailygoods.push_back(s);
		}
		cout &lt;&lt; "商品名称" &lt;&lt; "\t\t\t\t" &lt;&lt; "现有数量" &lt;&lt; endl &lt;&lt; endl;
		for (vector&lt;DailyGoods&gt;::iterator it = dailygoods.begin(); it != dailygoods.end(); it++) {
			cout &lt;&lt; *it;
		}
		system("pause");
		dailygoods.clear();
	}
	fin.close();
}
void Food::ShowMe() {											//展示食品类
	ifstream fin;
	string NAME, DEADLINE;
	int NUM;
	fin.open("Food.txt", ios::in);
	if (!fin) {
		cout &lt;&lt; "食品类列表还未建立" &lt;&lt; endl;
		cout &lt;&lt; "食品类建立中..." &lt;&lt; endl;
		ofstream fint;
		fint.open("Food.txt", ios::out);
		fint.close();
		cout &lt;&lt; "食品类已建立文件" &lt;&lt; endl;
		system("pause");
	}
	else if (fin.peek() == EOF) {
		cout &lt;&lt; "空" &lt;&lt; endl;
		system("pause");
		fin.close();
		return;
	}
	else {
		while (fin &gt;&gt; NAME &gt;&gt; NUM &gt;&gt; DEADLINE)
		{
			Food s(NAME, NUM, DEADLINE);
			food.push_back(s);
		}
		cout &lt;&lt; "商品名称" &lt;&lt; "\t\t\t\t" &lt;&lt; "保质期" &lt;&lt; "\t\t\t\t\t" &lt;&lt; "现有数量" &lt;&lt; endl &lt;&lt; endl;
		for (vector&lt;Food&gt;::iterator it = food.begin(); it != food.end(); it++) {
			cout &lt;&lt; *it;
		}
		system("pause");
		food.clear();
	}
	fin.close();
}
void ElectricalAppliance::ShowMe() {											//展示电器类
	ifstream fin;
	string NAME, COLOR;
	int NUM;
	fin.open("Electricalappliance.txt", ios::in);
	if (!fin) {
		cout &lt;&lt; "电器类列表还未建立" &lt;&lt; endl;
		cout &lt;&lt; "电器类建立中..." &lt;&lt; endl;
		ofstream fint;
		fint.open("Electricalappliance.txt", ios::out);
		fint.close();
		cout &lt;&lt; "电器类已建立文件" &lt;&lt; endl;
		system("pause");
	}
	else if (fin.peek() == EOF) {
		cout &lt;&lt; "空" &lt;&lt; endl;
		system("pause");
		fin.close();
		return;
	}
	else {
		while (fin &gt;&gt; NAME &gt;&gt; NUM &gt;&gt; COLOR)
		{
			ElectricalAppliance s(NAME, NUM, COLOR);
			electricalappliance.push_back(s);
		}
		cout &lt;&lt; "电器名称" &lt;&lt; "\t\t\t\t" &lt;&lt; "颜色" &lt;&lt; "\t\t\t\t\t" &lt;&lt; "现有数量" &lt;&lt; endl &lt;&lt; endl;
		for (vector&lt;ElectricalAppliance&gt;::iterator it = electricalappliance.begin(); it != electricalappliance.end(); it++) {
			cout &lt;&lt; *it;
		}
		system("pause");
		electricalappliance.clear();
	}
	fin.close();
}
//添加商品类别
void addDaily() {												//添加日常用品类
	readDailygoods();
	int open = 0;
	cout &lt;&lt; "请输入货物名称、要添加的数量:" &lt;&lt; endl;
	DailyGoods newdailygoods;
	cin &gt;&gt; newdailygoods;
	for (vector&lt;DailyGoods&gt;::iterator it = dailygoods.begin(); it != dailygoods.end(); it++) {
		if (it-&gt;getname() == newdailygoods.getname()) {
			it-&gt;add(newdailygoods);
			cout &lt;&lt; "仓库已有此商品，已更新数量" &lt;&lt; endl;
			system("pause");
			open = 1;
			break;
		}
	}
	if (open == 0) {
		dailygoods.push_back(newdailygoods);
	}
	saveDailygoods();
	dailygoods.clear();
}
void addFood() {												//添加食品类
	readFood();
	int open = 0;
	cout &lt;&lt; "请输入货物名称、食品保质期、要添加的数量" &lt;&lt; endl;
	Food newfood;
	cin &gt;&gt; newfood;
	for (vector&lt;Food&gt;::iterator it = food.begin(); it != food.end(); it++) {
		if (it-&gt;getname() == newfood.getname() &amp;&amp; it-&gt;getdeadline() == newfood.getdeadline()) {
			it-&gt;add(newfood);
			cout &lt;&lt; "仓库已有此商品，已更新数量" &lt;&lt; endl;
			system("pause");
			open = 1;
			break;
		}
	}
	if (open == 0) {
		food.push_back(newfood);
	}
	saveFood();
	food.clear();
}
void addElectrical() {												//添加电器
	readElectrical();
	int open = 0;
	cout &lt;&lt; "请输入商品名称、电器的颜色、要添加的数量:" &lt;&lt; endl;
	ElectricalAppliance newelectricalappliance;
	cin &gt;&gt; newelectricalappliance;
	for (vector&lt;ElectricalAppliance&gt;::iterator it = electricalappliance.begin(); it != electricalappliance.end(); it++) {
		if (it-&gt;getname() == newelectricalappliance.getname() &amp;&amp; it-&gt;getcolor() == newelectricalappliance.getcolor()) {
			it-&gt;add(newelectricalappliance);
			cout &lt;&lt; "仓库已有此商品，已更新数量" &lt;&lt; endl;
			system("pause");
			open = 1;
			break;
		}
	}
	if (open == 0) {
		electricalappliance.push_back(newelectricalappliance);
	}
	saveElectrical();
	electricalappliance.clear();
}
//上货
void loadDaily() {													//日用品类上货
	DailyGoods appointeddailygoods;
	int result = 0;
	system("cls");
	cout &lt;&lt; "请输入货物名称、要添加的数量:" &lt;&lt; endl;
	readDailygoods();
	cin &gt;&gt; appointeddailygoods;
	for (vector&lt;DailyGoods&gt;::iterator it = dailygoods.begin(); it != dailygoods.end(); it++) {
		if (it-&gt;getname() == appointeddailygoods.getname()) {
			it-&gt;add(appointeddailygoods);
			result = 1;
		}
	}
	if (result == 0) {
		cout &lt;&lt; "未查询到商品" &lt;&lt; endl;
		system("pause");
		system("cls");
	}
	saveDailygoods();
	dailygoods.clear();
}
void loadFood() {													//食品类上货
	string NAME, DEADLINE;
	int result = 0, NUMBER;
	system("pause");
	cout &lt;&lt; "请输入食品名称、保质期、要添加的数量" &lt;&lt; endl;
	readFood();
	cin &gt;&gt; NAME &gt;&gt; DEADLINE &gt;&gt; NUMBER;
	Food appointedfood(NAME, NUMBER, DEADLINE);
	for (vector&lt;Food&gt;::iterator it = food.begin(); it != food.end(); it++) {
		if (it-&gt;getname() == appointedfood.getname() &amp;&amp; it-&gt;getdeadline() == appointedfood.getdeadline()) {
			it-&gt;add(appointedfood);
			result = 1;
		}
	}
	if (result == 0) {
		cout &lt;&lt; "未查询到商品" &lt;&lt; endl;
		system("pause");
		system("cls");
	}
	saveFood();
	food.clear();
}
void loadElectrical() {													//电器类上货
	string NAME, COLOR;
	int NUMBER;
	int result = 0;
	system("pause");
	cout &lt;&lt; "请输入电器名称、电器颜色、要添加的数量" &lt;&lt; endl;
	readElectrical();
	cin &gt;&gt; NAME &gt;&gt; COLOR &gt;&gt; NUMBER;
	ElectricalAppliance appointedelectrical(NAME, NUMBER, COLOR);
	for (vector&lt;ElectricalAppliance&gt;::iterator it = electricalappliance.begin(); it != electricalappliance.end(); it++) {
		if (it-&gt;getname() == appointedelectrical.getname() &amp;&amp; it-&gt;getcolor() == appointedelectrical.getcolor()) {
			it-&gt;add(appointedelectrical);
			result = 1;
		}
	}
	if (result == 0) {
		cout &lt;&lt; "未查询到商品" &lt;&lt; endl;
		system("pause");
		system("cls");
	}
	saveElectrical();
	electricalappliance.clear();
}
//出售
void saleDaily() {									//售出日用品
	DailyGoods appointeddailygoods;
	int result = 0;
	cout &lt;&lt; "请输入货物名称、要卖出的数量:" &lt;&lt; endl;
	readDailygoods();
	cin &gt;&gt; appointeddailygoods;
	for (vector&lt;DailyGoods&gt; ::iterator it = dailygoods.begin(); it != dailygoods.end(); it++) {
		if (it-&gt;getname() == appointeddailygoods.getname()) {
			if (appointeddailygoods.getnumber() &gt; it-&gt;getnumber()) {
				cout &lt;&lt; "没有充足数量的商品！" &lt;&lt; endl;
				result = 1;
				system("pause");
			}
			else {
				it-&gt;min(appointeddailygoods);
				result = 1;
			}
		}
	}
	if (result == 0) {
		cout &lt;&lt; "未查询到商品" &lt;&lt; endl;
		system("pause");
		system("cls");
	}
	saveDailygoods();
	dailygoods.clear();
}
void saleFood() {									//售出食品
	Food appointedfood;
	int result = 0;
	cout &lt;&lt; "请输入食品名称、要卖出的数量、食物保质期:" &lt;&lt; endl;
	readFood();
	cin &gt;&gt; appointedfood;
	for (vector &lt;Food&gt;::iterator it = food.begin(); it != food.end(); it++) {
		if (it-&gt;getname() == appointedfood.getname()) {
			if (appointedfood.getnumber() &gt; it-&gt;getnumber()) {
				cout &lt;&lt; "没有充足数量的商品" &lt;&lt; endl;
				result = 1;
				system("pause");
			}
			else {
				it-&gt;min(appointedfood);
				result = 1;
			}
		}
	}
	if (result == 0) {
		cout &lt;&lt; "未查询到商品" &lt;&lt; endl;
		system("pause");
		system("cls");
	}
	saveFood();
	food.clear();
}
void saleElectrical() {									//售出食品
	ElectricalAppliance appointedelectrical;
	int result = 0;
	cout &lt;&lt; "请输入电器名称、要卖出的数量、电器颜色:" &lt;&lt; endl;
	readElectrical();
	cin &gt;&gt; appointedelectrical;
	for (vector&lt;ElectricalAppliance&gt;::iterator it = electricalappliance.begin(); it != electricalappliance.end(); it++) {
		if (it-&gt;getname() == appointedelectrical.getname()) {
			if (appointedelectrical.getnumber() &gt; it-&gt;getnumber()) {
				cout &lt;&lt; "没有充足数量的商品" &lt;&lt; endl;
				result = 1;
				system("pause");
			}
			else {
				it-&gt;min(appointedelectrical);
				result = 1;
			}
		}
	}
	if (result == 0) {
		cout &lt;&lt; "未查询到商品" &lt;&lt; endl;
		system("pause");
		system("cls");
	}
	saveElectrical();
	electricalappliance.clear();
}
//查询
void searchDaily() {								//搜索日用品
	string appointeddailygoods;
	int result = 0;
	system("cls");
	readDailygoods();
	cout &lt;&lt; "请输入货物名称" &lt;&lt; endl;
	cin &gt;&gt; appointeddailygoods;
	for (vector&lt;DailyGoods&gt;::iterator it = dailygoods.begin(); it != dailygoods.end(); it++) {
		if (it-&gt;getname() == appointeddailygoods) {
			cout &lt;&lt; it-&gt;getname() &lt;&lt; "\t" &lt;&lt; it-&gt;getnumber() &lt;&lt; " 件\t" &lt;&lt; endl;
			result = 1;
		}
	}
	if (result == 0) {
		cout &lt;&lt; "未搜索到商品" &lt;&lt; endl;
		system("pause");
	}
	saveDailygoods();
	dailygoods.clear();
}
void searchFood() {									//搜索食品
	string appointedfood;
	int result = 0;
	system("cls");
	readFood();
	cout &lt;&lt; "请输入食物名称" &lt;&lt; endl;
	cin &gt;&gt; appointedfood;
	for (vector&lt;Food&gt;::iterator it = food.begin(); it != food.end(); it++) {
		if (it-&gt;getname() == appointedfood) {
			cout &lt;&lt; it-&gt;getname() &lt;&lt; "\t" &lt;&lt; it-&gt;getnumber() &lt;&lt; " 件\t" &lt;&lt; it-&gt;getdeadline() &lt;&lt; "前食用" &lt;&lt; endl;
			result = 1;
		}
	}
	if (result == 0) {
		cout &lt;&lt; "未搜索到商品" &lt;&lt; endl;
		system("pause");
	}
	saveFood();
	food.clear();
}
void searchElectrical() {									//搜索电器
	string appointedelectrical;
	int result = 0;
	system("cls");
	readElectrical();
	cout &lt;&lt; "请输入电器名称" &lt;&lt; endl;
	cin &gt;&gt; appointedelectrical;
	for (vector&lt;ElectricalAppliance&gt;::iterator it = electricalappliance.begin(); it != electricalappliance.end(); it++) {
		if (it-&gt;getname() == appointedelectrical) {
			cout &lt;&lt; it-&gt;getname() &lt;&lt; "\t" &lt;&lt; it-&gt;getnumber() &lt;&lt; " 件\t" &lt;&lt; it-&gt;getcolor() &lt;&lt; " 色" &lt;&lt; endl;
			result = 1;
		}
	}
	if (result == 0) {
		cout &lt;&lt; "未搜索到商品" &lt;&lt; endl;
		system("pause");
	}
	saveElectrical();
	electricalappliance.clear();
}
//主菜单界面
void Menu() {
	cout.unsetf(ios::left);
	cout &lt;&lt; endl;
	cout &lt;&lt; setw(65) &lt;&lt; "超市货物管理系统" &lt;&lt; endl;
	cout &lt;&lt; endl &lt;&lt; endl &lt;&lt; endl;
	cout &lt;&lt; setw(50) &lt;&lt; "请选择你要进行的操作:" &lt;&lt; endl;
	cout &lt;&lt; setw(64) &lt;&lt; "1.查看商品情况" &lt;&lt; endl;
	cout &lt;&lt; setw(64) &lt;&lt; "2.更新商品信息" &lt;&lt; endl;
	cout &lt;&lt; setw(64) &lt;&lt; "3.查找商品信息" &lt;&lt; endl;
	cout &lt;&lt; setw(60) &lt;&lt; "0.退出系统" &lt;&lt; endl &lt;&lt; endl;
}
//更新商品界面
void Menu2() {
	cout.unsetf(ios::left);
	cout &lt;&lt; endl;
	cout &lt;&lt; setw(63) &lt;&lt; "更新商品信息" &lt;&lt; endl;
	cout &lt;&lt; endl &lt;&lt; endl &lt;&lt; endl;
	cout &lt;&lt; setw(50) &lt;&lt; "请选择你要进行的操作:" &lt;&lt; endl;
	cout &lt;&lt; setw(63) &lt;&lt; "1.添加商品类" &lt;&lt; endl;
	cout &lt;&lt; setw(65) &lt;&lt; "2.添加商品数量" &lt;&lt; endl;
	cout &lt;&lt; setw(61) &lt;&lt; "3.出售商品" &lt;&lt; endl;
	cout &lt;&lt; setw(57) &lt;&lt; "0.返回" &lt;&lt; endl;
}
//展示商品界面
void Menu3() {
	cout.unsetf(ios::left);
	cout &lt;&lt; endl;
	cout &lt;&lt; setw(67) &lt;&lt; "请输入你要查看的商品类型:" &lt;&lt; endl;
	cout &lt;&lt; endl &lt;&lt; endl;
	cout &lt;&lt; setw(60) &lt;&lt; "1.日用品类" &lt;&lt; endl;
	cout &lt;&lt; setw(58) &lt;&lt; "2.食品类" &lt;&lt; endl;
	cout &lt;&lt; setw(58) &lt;&lt; "3.电器类" &lt;&lt; endl;
	cout &lt;&lt; setw(56) &lt;&lt; "0.返回" &lt;&lt; endl;
}
//查找商品界面
void Menu4() {
	cout.unsetf(ios::left);
	cout &lt;&lt; endl;
	cout &lt;&lt; setw(67) &lt;&lt; "请输入你要查找商品的所属类型:" &lt;&lt; endl;
	cout &lt;&lt; endl &lt;&lt; endl;
	cout &lt;&lt; setw(60) &lt;&lt; "1.日用品类" &lt;&lt; endl;
	cout &lt;&lt; setw(58) &lt;&lt; "2.食品类" &lt;&lt; endl;
	cout &lt;&lt; setw(58) &lt;&lt; "3.电器类" &lt;&lt; endl;
	cout &lt;&lt; setw(56) &lt;&lt; "0.返回" &lt;&lt; endl;
}
//功能类
class Supermarket {									//调用功能函数
public:
	//添加新商品
	void Add() {									//添加商品类函数
		int choice4;
		while (1) {
			cout &lt;&lt; "请输入要添加商品的类别:\n\n1 -&gt;日常用品\n2 -&gt;食品\n3 -&gt;电器类\n0-&gt;返回" &lt;&lt; endl;
			cin &gt;&gt; choice4;
			switch (choice4)
			{
			case 1:
				addDaily();
				cout &lt;&lt; "添加完成" &lt;&lt; endl;
				return;
			case 2:
				addFood();
				cout &lt;&lt; "添加完成" &lt;&lt; endl;
				return;
			case 3:
				addElectrical();
				cout &lt;&lt; "添加完成" &lt;&lt; endl;
				return;
			case 0:
				return;
			default:
				cout &lt;&lt; "输入有误，请选择1、2、3、0输入" &lt;&lt; endl;
				system("pause");
				system("cls");
				break;
			}
		}
	}
	//商品上货
	void Load() {									//商品上货
		int choice5;
		while (1) {
			cout &lt;&lt; "请输入要补充商品的类别: 1 -&gt;日常用品\n2 -&gt;食品\n3 -&gt;电器类\n0-&gt;返回" &lt;&lt; endl;
			cin &gt;&gt; choice5;
			switch (choice5)
			{
			case 1:
				loadDaily();
				cout &lt;&lt; "上货完成" &lt;&lt; endl;
				system("pause");
				return;
			case 2:
				loadFood();
				cout &lt;&lt; "上货完成" &lt;&lt; endl;
				system("pause");
				return;
			case 3:
				loadElectrical();
				cout &lt;&lt; "上货完成" &lt;&lt; endl;
				system("pause");
				return;
			case 0:
				return;
			default:
				cout &lt;&lt; "请选择已有选项！！" &lt;&lt; endl;
				system("pause");
				system("cls");
				break;
			}
		}
	};
	//出售商品
	void Sale() {									//售卖商品函数
		int choice6;
		while (1) {
			cout &lt;&lt; "请输入要售卖商品的类别: \n\n1-&gt;日常用品\n2 -&gt;食品\n3 -&gt;电器类\n0-&gt;返回" &lt;&lt; endl;
			cin &gt;&gt; choice6;
			switch (choice6)
			{
			case 1:
				saleDaily();
				cout &lt;&lt; "出售完成" &lt;&lt; endl;
				return;
			case 2:
				saleFood();
				cout &lt;&lt; "出售完成" &lt;&lt; endl;
				return;
			case 3:
				saleElectrical();
				cout &lt;&lt; "出售完成" &lt;&lt; endl;
				return;
			case 0:
				return;
			default:
				cout &lt;&lt; "请选择已有选项！！" &lt;&lt; endl;
				system("pause");
				system("cls");
				break;
			}
		}
	}
	//查询商品
	void Search() {									//查询商品函数
		while (1) {
			system("cls");
			Menu4();
			string choice6;
			cin &gt;&gt; choice6;
			if (choice6 == "1") {											//搜索日用品
				searchDaily();
			}
			else if (choice6 == "2") {									//搜索食物
				searchFood();
			}
			else if (choice6 == "3") {									//搜索电器
				searchElectrical();
			}
			else if (choice6 == "0") {									//返回主界面
				return;
			}
			else {														//重新选择展示
				cout &lt;&lt; "请输入已有选项！！" &lt;&lt; endl;
				system("pause");
			}
		}
	}
};
int main() {				/*主函数*/
	int first = 0;
	string choice;
	DailyGoods good1;
	Food good2;
	ElectricalAppliance good3;
	Menu();												//主界面
	cin &gt;&gt; choice;
	do
	{
		if (first != 0) {
			system("cls");
			Menu();
			cin &gt;&gt; choice;
		}
		Supermarket supermarket;
		while (choice == "1") {						//展示商品情况
			system("cls");
			Menu3();
			string choice3;
			cin &gt;&gt; choice3;
			if (choice3 == "1") {											//展示日用品
				good1.ShowMe();
			}
			else if (choice3 == "2") {									//展示食物
				good2.ShowMe();
			}
			else if (choice3 == "3") {									//展示电器
				good3.ShowMe();
			}
			else if (choice3 == "0") {									//返回主界面
				break;
			}
			else {														//重新选择展示
				cout &lt;&lt; "请输入已有选项！！" &lt;&lt; endl;
			}
		}
		while (choice == "2") {						//更新商品信息
			system("cls");
			Menu2();
			string choice2;
			cin &gt;&gt; choice2;
			if (choice2 == "1") {											//添加商品类
				system("cls");
				supermarket.Add();
			}
			else if (choice2 == "2") {									//商品上货
				system("cls");
				supermarket.Load();
			}
			else if (choice2 == "3") {									//售出商品
				system("cls");
				supermarket.Sale();
			}
			else if (choice2 == "0") {									//返回主界面
				break;
			}
			else {														//重新选择展示
				cout &lt;&lt; "请输入已有选项！！" &lt;&lt; endl;
				system("pause");
			}
		}
		while (choice == "3") {			//查找商品
			supermarket.Search();
			break;
		}
		first++;
	} while (choice != "0");
	cout &lt;&lt; "退出系统" &lt;&lt; endl;
	return 0;
}
 
</code></pre>
</details>
<p><strong>二.概述</strong><br>
此次逆向设计目标在于理解其设计结构、功能实现，以及指出此次代码中存在不足的地方并提出改正、后续代码运行情况、相关逆向设计实验总结。针对于此次代码，该代码中实现了一个简单的超时货物管理系统，包含商品管理、库存管理、销售管理等诸多功能。</p>
<p><strong>三.设备运行环境</strong><br>
设备名称	小李吃冰淇淋<br>
处理器	AMD Ryzen 9 7945HX with Radeon Graphics           2.50 GHz<br>
机带 RAM	16.0 GB (15.7 GB 可用)<br>
设备 ID	44D49C89-7AF4-4D7B-8227-A9EE94DC32B9<br>
产品 ID	00342-31476-28561-AAOEM<br>
系统类型	64 位操作系统, 基于 x64 的处理器<br>
笔和触控	笔支持</p>
<p><strong>四.项目代码运行和介绍</strong><br>
1.系统主界面显示（查看商品情况、更新商品信息、查找商品信息、退出系统）<br>
<img src="https://img2024.cnblogs.com/blog/3606947/202502/3606947-20250227191326869-1911275909.png" alt="" loading="lazy"></p>
<p>2.查找商品功能显示（用户可以查看不同类型的商品库存情况：日用品类、食品类、电器类）<br>
<img src="https://img2024.cnblogs.com/blog/3606947/202502/3606947-20250227192826862-874220964.png" alt="" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/3606947/202502/3606947-20250227192900784-1479178838.png" alt="" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/3606947/202502/3606947-20250227193041885-1071037321.png" alt="" loading="lazy"></p>
<p>3.更新商品信息（用户通过选择2按钮进行商品信息的更新，包括添加商品类、添加商品数量、出售商品、返回等功能）<br>
<img src="https://img2024.cnblogs.com/blog/3606947/202502/3606947-20250227193234070-722022391.png" alt="" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/3606947/202502/3606947-20250227193334104-868451481.png" alt="" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/3606947/202502/3606947-20250227193402975-63024918.png" alt="" loading="lazy"></p>
<p>4.查找商品信息（用户根据商品名称查找特定商品的信息：日用品类、食品类、电器类）<br>
<img src="https://img2024.cnblogs.com/blog/3606947/202502/3606947-20250227193627617-1280045752.png" alt="" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/3606947/202502/3606947-20250227193653838-1419436987.png" alt="" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/3606947/202502/3606947-20250227193732305-759061665.png" alt="" loading="lazy"></p>
<p>5.代码介绍<br>
（1）类：Goods:基类，表示货物，包含名称和数量属性等。<br>
DailyGoods:继承自Goods，表示日常用品。<br>
Food:继承自Goods，表示食品，包含保质期功能。<br>
ElectricalAppliance：继承自Goods，表示电器，包含颜色。<br>
Supermarket：管理类，负责调用商品管理、库存管理、销售管理等功能。<br>
（2）功能模块：商品管理：包括商品的添加、展示、更新和保存。<br>
库存管理：包括商品的入库、出库和库存查询。<br>
销售管理：包括商品的销售和销售记录。<br>
（3）数据存储：日常用品信息存储在Dailygoods.txt文件。<br>
食品信息存储在Food.txt文件。<br>
电器信息存储在Electricalappliance.txt文件。</p>
<p><strong>五.代码缺陷和不足</strong></p>
<ol>
<li>代码重复：<br>
(1)在DailyGoods、Food、ElectricalAppliance类的构造函数中，name和number的赋值存在重复代码。<br>
（2）在saveFood、saveDailygoods、saveElectrical函数中，文件写入的逻辑存在重复代码。</li>
<li>缺乏异常处理：<br>
(1)文件打开失败时，仅输出错误信息，未进行异常处理或程序终止。<br>
(2) 用户输入时，未对输入的有效性进行检查（如负数、非数字输入等）。</li>
<li>内存管理问题：<br>
在readDailygoods、readFood、readElectrical函数中，动态分配的内存未在程序结束时释放，可能导致内存泄漏。</li>
<li>功能不完善：<br>
(1)订单管理功能缺失，无法记录销售历史和生成销售报表。<br>
(2)商品信息的展示和查询功能较为简单，缺乏排序和筛选功能。</li>
<li>用户界面不友好：<br>
用户界面为简单的命令行界面，缺乏交互性。</li>
<li>文件格式不明确：<br>
Dailygoods.txt、Food.txt、Electricalappliance.txt文件的格式未在代码中明确说明，可能导致文件读取错误。</li>
</ol>
<p>六.代码修改<br>
1.代码重复问题修改</p>
<details>
<summary>点击查看代码</summary>
<pre><code>Goods::Goods(string Name, int Num) : name(Name), number(Num) {}

void saveToFile(const string&amp; filename, const vector&lt;Goods*&gt;&amp; goods) {
    ofstream fout(filename, ios::out);
    if (!fout) {
        cerr &lt;&lt; filename &lt;&lt; " 文件保存失败!" &lt;&lt; endl;
        return;
    }
    for (const auto&amp; item : goods) {
        fout &lt;&lt; *item;
    }
    fout.close();
    cout &lt;&lt; filename &lt;&lt; " 已保存" &lt;&lt; endl;
}
</code></pre>
</details>
2.增加文件打开失败时的异常处理以及提高用户输入的有效性检查，避免非法输入。
<details>
<summary>点击查看代码</summary>
<pre><code>void readFromFile(const string&amp; filename, vector&lt;Goods*&gt;&amp; goods) {
    ifstream fin(filename, ios::in);
    if (!fin) {
        cerr &lt;&lt; filename &lt;&lt; " 文件打开失败，程序终止！" &lt;&lt; endl;
        exit(1);
    }
    // 其他代码...
}
</code></pre>
</details>
3.内存管理改进
<details>
<summary>点击查看代码</summary>
<pre><code>int main() {
    // 其他代码...
    for (auto&amp; item : dailygoods) {
        delete item;
    }
    for (auto&amp; item : food) {
        delete item;
    }
    for (auto&amp; item : electricalappliance) {
        delete item;
    }
    return 0;
}
</code></pre>
</details>
4.增加订单管理功能，记录销售历史和生成销售报表功能，以及商品信息的排序和筛选功能
<details>
<summary>点击查看代码</summary>
<pre><code>struct Order {
    string goodsName;
    int quantity;
    double price;
    string date;
};

vector&lt;Order&gt; orders;

void saveOrder(const Order&amp; order) {
    ofstream fout("orders.txt", ios::app);
    if (!fout) {
        cerr &lt;&lt; "订单文件保存失败!" &lt;&lt; endl;
        return;
    }
    fout &lt;&lt; order.goodsName &lt;&lt; " " &lt;&lt; order.quantity &lt;&lt; " " &lt;&lt; order.price &lt;&lt; " " &lt;&lt; order.date &lt;&lt; endl;
    fout.close();
}
</code></pre>
</details>
5.增加商品删除功能。
<details>
<summary>点击查看代码</summary>
<pre><code>void removeDaily() { // 删除日用品
    string name;
    int num;
    cout &lt;&lt; "请输入要删除的日用品名称和数量: ";
    cin &gt;&gt; name &gt;&gt; num;

    for (auto it = dailygoods.begin(); it != dailygoods.end(); ++it) {
        if (it-&gt;getname() == name) {
            it-&gt;remove(num);
            if (it-&gt;getnumber() == 0) {
                dailygoods.erase(it); // 如果数量为0，删除该商品
            }
            cout &lt;&lt; "日用品删除成功！" &lt;&lt; endl;
            return;
        }
    }
    cout &lt;&lt; "未找到该日用品！" &lt;&lt; endl;
}

void removeFood() { // 删除食品
    string name, deadline;
    int num;
    cout &lt;&lt; "请输入要删除的食品名称、保质期和数量: ";
    cin &gt;&gt; name &gt;&gt; deadline &gt;&gt; num;

    for (auto it = food.begin(); it != food.end(); ++it) {
        if (it-&gt;getname() == name &amp;&amp; it-&gt;getdeadline() == deadline) {
            it-&gt;remove(num);
            if (it-&gt;getnumber() == 0) {
                food.erase(it); // 如果数量为0，删除该商品
            }
            cout &lt;&lt; "食品删除成功！" &lt;&lt; endl;
            return;
        }
    }
    cout &lt;&lt; "未找到该食品！" &lt;&lt; endl;
}

void removeElectrical() { // 删除电器
    string name, color;
    int num;
    cout &lt;&lt; "请输入要删除的电器名称、颜色和数量: ";
    cin &gt;&gt; name &gt;&gt; color &gt;&gt; num;

    for (auto it = electricalappliance.begin(); it != electricalappliance.end(); ++it) {
        if (it-&gt;getname() == name &amp;&amp; it-&gt;getcolor() == color) {
            it-&gt;remove(num);
            if (it-&gt;getnumber() == 0) {
                electricalappliance.erase(it); // 如果数量为0，删除该商品
            }
            cout &lt;&lt; "电器删除成功！" &lt;&lt; endl;
            return;
        }
    }
    cout &lt;&lt; "未找到该电器！" &lt;&lt; endl;
}
</code></pre>
</details>
<details>
<summary>点击查看代码</summary>
<pre><code>class Supermarket {
public:
    // 其他成员函数...

    void Remove() { // 删除商品
        int choice;
        while (1) {
            cout &lt;&lt; "请输入要删除商品的类别: 1 -&gt; 日用品, 2 -&gt; 食品, 3 -&gt; 电器, 0 -&gt; 返回" &lt;&lt; endl;
            cin &gt;&gt; choice;
            switch (choice) {
                case 1:
                    removeDaily();
                    return;
                case 2:
                    removeFood();
                    return;
                case 3:
                    removeElectrical();
                    return;
                case 0:
                    return;
                default:
                    cout &lt;&lt; "输入有误，请重新输入！" &lt;&lt; endl;
                    break;
            }
        }
    }
};
</code></pre>
</details>
<p>七.代码测试结果<br>
删除以及其他功能加入<br>
<img src="https://img2024.cnblogs.com/blog/3606947/202502/3606947-20250227213727840-489974305.png" alt="" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/3606947/202502/3606947-20250227214110544-2086731755.png" alt="" loading="lazy"></p>
<p>八.逆向软件设计总结<br>
1.难点分析<br>
（1）代码重复：在不破坏现有功能的前提下，消除重复代码，提升代码的可维护性。<br>
（2）异常处理不足：保证程序健壮性的同时，避免因异常输入或文件操作失败导致程序崩溃。<br>
（3）内存管理问题：复杂的对象生命周期中，确保内存的正确释放，避免内存泄漏。<br>
（4）订单管理功能不完善：如何在保持系统简洁性的同时，扩展订单管理的功能，使其更加灵活和实用。<br>
（5）用户界面不友好：如何在保持系统功能完整性的同时，提升用户界面的友好性和易用性。<br>
（6）文件格式不明确：如何在代码中明确文件格式，确保文件读写的正确性和一致性。<br>
2.优化代码后优点<br>
（1）代码更加简洁，易于维护和扩展。<br>
（2）程序更加健壮，能够更好地处理异常情况。<br>
（3）程序的内存管理更加规范，避免了潜在的内存泄漏问题。<br>
（4）订单管理功能更加灵活和实用，能够更好地满足用户需求。<br>
（5）用户界面更加友好和美观，提升了用户的操作体验。<br>
（6）文件读写的正确性和一致性得到了保障，减少了文件读取错误的可能性。<br>
3.心得总结<br>
通过对代码的逆向分析和优化，我发现系统在模块化设计和功能实现上具有一定的优点，但也存在代码重复、异常处理不足、内存管理问题等不足之处。通过优化，提升了代码的可维护性、健壮性和用户体验，但仍有一些不足之处需要进一步改进。之后进一步扩展系统的功能，增加销售报表生成、库存预警等高级功能。优化用户界面，增加更多的交互元素和美观的设计。增加对多种文件格式的支持，提升系统的灵活性。通过本次逆向分析和优化，不仅提升了系统的性能和用户体验，还为未来的功能扩展和改进奠定了基础。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.012755406105324074" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-27 21:58">2025-02-27 21:58</span>&nbsp;
<a href="https://www.cnblogs.com/lpf2352629">smiles1</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18742114" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18742114);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18742114', targetLink: 'https://www.cnblogs.com/lpf2352629/p/18742114', title: '逆向软件开发与设计--超市管理系统' })">举报</a>
</div>
        