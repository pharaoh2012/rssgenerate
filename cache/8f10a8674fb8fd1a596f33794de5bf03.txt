
        <h2>
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/graphics/p/18931917" title="发布于 2025-06-16 22:39">
    <span role="heading" aria-level="2">TypeScript实用类型之Omit</span>
    

</a>

        </h2>
        <div class="postbody">
            <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="概述">概述</h1>
<p><code>TypeScript Utility Types</code>（实用工具类）包含一系列预定义的类型，用于简化类型操作，善用这些类型可以让我们的代码更加简洁优雅，今天来学习一下<code>Omit</code>类型。<code>Omit</code>类型可以优雅的解决类型重复问题，避免冗余代码。</p>
<p><code>Omit</code>类型的作用是什么？与以往不同，我们先不介绍晦涩难懂的概念，而是从一个实际的例子出发，进而引出这个类型。</p>
<h1 id="从类型中排除属性">从类型中排除属性</h1>
<p>考虑下面这个常见的场景，你正在开发一个用户管理系统，这个系统的一个重要功能就是管理用户，比如创建用户，更新用户信息，删除用户等。</p>
<p>为了支持以上操作，我们首先要定义一个用户类型<code>User</code>，下面就是这个<code>User</code>类型的定义：其中包括用户id，姓名，手机号和邮箱。</p>
<pre><code class="language-typescript">interface User {
  id: number; // 用户ID
  name: string; // 用户名
  phone: string; // 手机号
  email: string; // 邮箱
}
</code></pre>
<p>首先：我们编写创建用户的函数，这个函数需要接收一个<code>User</code>类型的参数，并调用后端API来创建用户。</p>
<pre><code class="language-typescript">function createUser(user: User) {
  // 调用后端API来创建用户
  api.createUser(user).then(response =&gt; {
    console.log('User created:', response.data);
  }).catch(error =&gt; {
    console.error('Error creating user:', error);
  });
}
</code></pre>
<p>接下来，我们编写更新用户信息的函数，这个函数需要接收一个<code>User</code>类型的参数，并调用后端API来更新用户信息。</p>
<pre><code class="language-typescript">function updateUser(user: User) {
  // 调用后端API来更新用户信息
  api.updateUser(user).then(response =&gt; {
    console.log('User updated:', response.data);
  }).catch(error =&gt; {
    console.error('Error updating user:', error);
  });
}
</code></pre>
<p>删除用户的函数我们就不写了，因为它不影响我们今天的主题。</p>
<p>到现在为止，似乎一切都很顺利，创建用户和更新用户的函数使用同一个<code>User</code>类型，代码也很简洁。<br>
但是，这里有一个小问题，那就是在创建用户的时候，其实我们并不需要提供用户的<code>id</code>，因为只有用户创建成功之后才会生成这个id。虽然说多传一个<code>id</code>属性不会报错，但是从逻辑上来说，这个<code>id</code>属性是多余的。作为一个有追求的程序员，不能容忍这种冗余代码的存在。</p>
<p>于是有的同学说：这还不简单吗？再定一个类型用于创建用户，把<code>id</code>属性去掉不就行了？于是就有了下面的<code>NewUser</code>类型。</p>
<pre><code class="language-typescript">interface NewUser {
  name: string;
  phone: string;
  email: string;
}
</code></pre>
<p>但是，这样做有一个问题, <code>NewUser</code>类型和<code>User</code>类型几乎一模一样，除了<code>id</code>属性外，其他字段都是重复的，这就是典型的冗余代码，对于日后的维护十分不便。</p>
<p>设想一下，假如某一天需要为用户添加一个新的属性，比如<code>address</code>，那么我们就需要在<code>User</code>和<code>NewUser</code>两个类型中都添加这个属性，维护起来非常麻烦，删除某个属性也面临同样的问题。</p>
<p>有没有更好的办法呢？这时候，<code>Omit</code>类型就派上用场了，<code>Omit</code>类型允许我们从一个类型中排除某些属性，从而创建一个新的类型。</p>
<p>下面这段代码表示：创建一个新类型<code>NewUser</code>，它是从<code>User</code>类型中排除掉<code>id</code>属性后的结果。</p>
<pre><code class="language-typescript">type NewUser = Omit&lt;User, 'id'&gt;;
</code></pre>
<p>现在，我们可以使用<code>NewUser</code>类型来创建用户了。</p>
<pre><code class="language-typescript">function createUser(user: NewUser) {
  // 调用后端API来创建用户
  api.createUser(user).then(response =&gt; {
    console.log('User created:', response.data);
  }).catch(error =&gt; {
    console.error('Error creating user:', error);
  });
}
</code></pre>
<p>如果某一天需要为用户添加一个新的属性，比如<code>address</code>，我们只需要在<code>User</code>类型中添加这个属性，而不需要修改<code>NewUser</code>类型，这样就避免了冗余代码的出现。删除某个属性也同样方便。</p>
<p>更方便的是，<code>Omit</code>一次可以排除多个属性，比如我们还想排除<code>email</code>属性，可以这样写：</p>
<pre><code class="language-typescript">type NewUser = Omit&lt;User, 'id' | 'email'&gt;;
</code></pre>
<p>这样，<code>NewUser</code>类型就会同时排除<code>id</code>和<code>email</code>属性。</p>
<p>写到这里，似乎该结束了，但是作为一个有追求的程序员，你以为这就完了吗？当然不行，我们要举一反三，如果反过来该怎么办呢？</p>
<h1 id="向类型中添加属性">向类型中添加属性</h1>
<p>假设你维护的是一个老系统，原来的代码先定义了<code>NewUser</code>类型（只有创建用户的需求），现在添加了一个新需求：要求添加一个函数用于更新用户的信息，更新用户信息就需要提供用户ID，这时候你需要一个新的类型，也就是在<code>NewUser</code>的基础上添加<code>id</code>属性。通俗点说，前面的例子是在一个类型中排除某些属性，而现在我们需要在一个类型中添加某些属性。这相当于<code>Omit</code>的反向操作。</p>
<p>那TypeScript中有没有这样的实用类型呢？非常遗憾，TypeScript的标准库中并没有提供这样的类型，但是我们可以自己实现一个。</p>
<p>下面的代码使用<code>&amp;</code>操作符来创建一个新的类型<code>UpdateUser</code>，它包含了<code>NewUser</code>的所有属性，并添加了一个<code>id</code>属性。</p>
<pre><code class="language-typescript">type UpdateUser = NewUser &amp; { id: number };
</code></pre>
<p>这样，我们就可以使用<code>UpdateUser</code>类型来更新用户信息了。</p>
<pre><code class="language-typescript">function updateUser(user: UpdateUser) {
  // 调用后端API来更新用户信息
  api.updateUser(user).then(response =&gt; {
    console.log('User updated:', response.data);
  }).catch(error =&gt; {
    console.error('Error updating user:', error);
  });
}
</code></pre>
<p>是不是很优雅呢？你学会了吗？学会了就点个关注吧，后续会有更多有趣的<code>TypeScript</code>知识分享。</p>
<h1 id="参考">参考</h1>
<ol>
<li><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys" target="_blank" rel="noopener nofollow">https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys</a></li>
</ol>

</div>
<div id="MySignature" role="contentinfo">
    <div id="ZddSignature">
<div>作者：<a href="http://www.cnblogs.com/graphics/" target="_blank">zdd</a></div>
<div>出处：<a href="http://www.cnblogs.com/graphics/" target="_blank">http://www.cnblogs.com/graphics/</a>
<div>
<div>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利.</div>
</div>
</div>
</div>
</div>
<div class="clear"></div>

        </div>
        <p class="postfoot">
            posted on 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-16 22:40">2025-06-16 22:39</span>&nbsp;
<a href="https://www.cnblogs.com/graphics">前端风云志</a>&nbsp;
阅读(<span id="post_view_count">46</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18931917);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18931917', targetLink: 'https://www.cnblogs.com/graphics/p/18931917', title: 'TypeScript实用类型之Omit' })">举报</a>

        </p>
    