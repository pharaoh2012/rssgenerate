
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bitzhuwei/p/18899755/rules-about-GLSL-preprocessor" title="发布于 2025-05-28 15:10">
    <span role="heading" aria-level="2">GLSL的预处理器都有哪些规定？</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="glsl的预处理器都有哪些规定">GLSL的预处理器都有哪些规定？</h1>
<p>下面的内容，英文版取自GLSLangSpec.4.60.pdf，中文版是我的翻译，只求意译准确易懂，不求直译严格匹配。</p>
<h1 id="33-preprocessor">3.3. Preprocessor</h1>
<p>There is a preprocessor that processes the source strings as part of the compilation process. Except as noted below, it behaves as the C++ standard preprocessor (see “Normative References”).<br>
有一个预处理器preprocessor，它参与GLSL代码的编译过程。除下文所述外，此preprocessor与C++预处理器的规定相同。</p>
<p>The complete list of preprocessor directives is as follows.<br>
preprocessor指令的完整列表如下：</p>
<pre><code class="language-glsl">#
#define
#undef

#if
#ifdef
#ifndef
#else
#elif
#endif

#error
#pragma

#extension
#version

#line
</code></pre>
<p>Each number sign (#) can be preceded in its line only by spaces or horizontal tabs. It may also be followed by spaces and horizontal tabs, preceding the directive. Each directive is terminated by a new-line. Preprocessing does not change the number or relative location of new-lines in a source string. Preprocessing takes places after new-lines have been removed by the line-continuation character.<br>
在一行里，指令前面允许出现的字符只有若干<code>' '</code>或<code>'\t'</code>，不能有其他字符。指令后面也可以跟着若干<code>' '</code>或<code>'\t'</code>字符。每个指令都以换行符(<code>\r\n</code>或<code>\n</code>)标志其结束（也就是说，一个指令只能出现在同一行里）。预处理不改变源代码中各个行的相对位置（也就是说，预处理不会增删源代码中的换行符(<code>\r\n</code>或<code>\n</code>)）。如果有行继续符(line-continuation character)（例如<code>'\'</code>），那么预处理器会先去掉换行符（即先将<code>'\'</code>前后2行合并为1行），再进行预处理。GLSL并没有规定行继续符(line-continuation character)必须是哪个字符，这由宿主环境决定。</p>
<p>The number sign (#) on a line by itself is ignored. Any directive not listed above will cause a compile-time error.<br>
如果1行里只有1个<code>'#'</code>字符，它就会被忽略。如果GLSL源代码中出现了上述列表之外的指令，编译器就会报error。</p>
<p>#define and #undef functionality are defined as is standard for C++ preprocessors for macro definitions both with and without macro parameters.<br>
<code>#define</code>和<code>#undef</code>的功能与C++预处理器完全相同。</p>
<p>The following operators are also available:<br>
除了指令，还有下述操作符/运算符：</p>
<pre><code class="language-glsl">defined
##
</code></pre>
<p>The following predefined macros are available:<br>
除了指令，还有下述由编译器预先定义的宏(macro)：</p>
<pre><code class="language-glsl">__LINE__
__FILE__
__VERSION__
</code></pre>
<p>__LINE__ will substitute a decimal integer constant that is one more than the number of preceding new-lines in the current source string.<br>
<code>__LINE__</code>表示其所在源代码的第几行（从1开始）。</p>
<p>__FILE__ will substitute a decimal integer constant that says which source string number is currently being processed.<br>
<code>__FILE__</code>表示其所在源代码的序号。（我以为它是<code>glShaderSource(GLuint shader, GLsizei count, string[] codes, GLint[] length)</code>里所在<code>codes</code>中的序号，但试验证明不是，所有的<code>__FILE__</code>都是0）</p>
<p>__VERSION__ will substitute a decimal integer reflecting the version number of the OpenGL Shading Language. The version of the shading language described in this document will have __VERSION__ substitute the decimal integer 460.<br>
<code>__VERSION__</code>表示GLSL版本号。本文档（GLSLangSpec.4.60.pdf）描述的GLSL的版本号为十进制整数<code>460</code>。</p>
<p>By convention, all macro names containing two consecutive underscores (__) are reserved for use by underlying software layers. Defining or undefining such a name in a shader does not itself result in an error, but may result in unintended behaviors that stem from having multiple definitions of the same name. All macro names prefixed with “GL_” (“GL” followed by a single underscore) are also reserved, and defining or undefining such a name results in a compile-time error.<br>
按惯例，所有包含<code>__</code>的宏(macro)名称，都是被保留给底层软件用的。在GLSL中定义或取消定义这样的宏(macro)名称，本身不会导致error，但重复定义相同的宏(macro)名称可能导致意料之外的情况。所有以<code>GL_</code>开头的宏(macro)名称也是被保留的，如果在GLSL中定义或取消定义这样的宏(macro)名称，就会导致error。</p>
<p>Implementations must support macro-name lengths of up to 1024 characters. Implementations are allowed to generate an error for a macro name of length greater than 1024 characters, but are also allowed to support lengths greater than 1024.<br>
实现(GLSL编译器)必须支持至少1024个字符的宏(macro)名称。实现(GLSL编译器)可以对超过1024个字符的宏(macro)名称生成error，也可以支持超过1024个字符的宏(macro)名称。</p>
<p>#if, #ifdef, #ifndef, #else, #elif, and #endif are defined to operate as is standard for C++ preprocessors except for the following:<br>
除下述内容外，<code>#if</code>、<code>#ifdef</code>、<code>#ifndef</code>、<code>#else</code>、<code>#elif</code>、<code>#endif</code>与C++预处理器完全相同：</p>
<ul>
<li>
<p>Expressions following #if and #elif are further restricted to expressions operating on literal integer constants, plus identifiers consumed by the defined operator.</p>
</li>
<li>
<p><code>#if</code>、<code>#elif</code>后跟的表达式范围更小：只支持字面整数常量和用于<code>defined</code>操作符的标识符(identifier)。</p>
</li>
<li>
<p>Character constants are not supported.</p>
</li>
<li>
<p>不支持字符常量。</p>
</li>
</ul>
<p>The operators available are as follows.<br>
可用的操作符如下表所示：</p>
<table>
<thead>
<tr>
<th style="text-align: left">Precedence<br>优先级</th>
<th style="text-align: left">Operator class<br>类型</th>
<th style="text-align: left">Operators<br>操作符</th>
<th style="text-align: left">Associativity<br>关联性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left">1 (highest)</td>
<td style="text-align: left">parenthetical grouping</td>
<td style="text-align: left">( )</td>
<td style="text-align: left">NA</td>
</tr>
<tr>
<td style="text-align: left">2</td>
<td style="text-align: left">unary</td>
<td style="text-align: left">defined + - ~ !</td>
<td style="text-align: left">Right to Left</td>
</tr>
<tr>
<td style="text-align: left">3</td>
<td style="text-align: left">multiplicative</td>
<td style="text-align: left">* / %</td>
<td style="text-align: left">Left to Right</td>
</tr>
<tr>
<td style="text-align: left">4</td>
<td style="text-align: left">additive</td>
<td style="text-align: left">+ -</td>
<td style="text-align: left">Left to Right</td>
</tr>
<tr>
<td style="text-align: left">5</td>
<td style="text-align: left">bit-wise shift</td>
<td style="text-align: left">&lt;&lt; &gt;&gt;</td>
<td style="text-align: left">Left to Right</td>
</tr>
<tr>
<td style="text-align: left">6</td>
<td style="text-align: left">relational</td>
<td style="text-align: left">&lt; &gt; &lt;= &gt;=</td>
<td style="text-align: left">Left to Right</td>
</tr>
<tr>
<td style="text-align: left">7</td>
<td style="text-align: left">equality</td>
<td style="text-align: left">== !=</td>
<td style="text-align: left">Left to Right</td>
</tr>
<tr>
<td style="text-align: left">8</td>
<td style="text-align: left">bit-wise and</td>
<td style="text-align: left">&amp;</td>
<td style="text-align: left">Left to Right</td>
</tr>
<tr>
<td style="text-align: left">9</td>
<td style="text-align: left">bit-wise exclusive or</td>
<td style="text-align: left">^</td>
<td style="text-align: left">Left to Right</td>
</tr>
<tr>
<td style="text-align: left">10</td>
<td style="text-align: left">bit-wise inclusive or</td>
<td style="text-align: left">|</td>
<td style="text-align: left">Left to Right</td>
</tr>
<tr>
<td style="text-align: left">11</td>
<td style="text-align: left">logical and</td>
<td style="text-align: left">&amp;&amp;</td>
<td style="text-align: left">Left to Right</td>
</tr>
<tr>
<td style="text-align: left">12 (lowest)</td>
<td style="text-align: left">logical inclusive or</td>
<td style="text-align: left">||</td>
<td style="text-align: left">Left to Right</td>
</tr>
</tbody>
</table>
<p>The <code>defined</code> operator can be used in either of the following ways:<br>
操作符<code>defined</code>可按下述两种方式使用：</p>
<pre><code class="language-glsl">defined identifier
defined ( identifier )
</code></pre>
<p>Two tokens in a macro can be concatenated into one token using the token pasting (##) operator, as is standard for C++ preprocessors. The result must be a valid single token, which will then be subject to macro expansion. That is, macro expansion happens only after token pasting. There are no other number sign based operators (e.g. no # or #@), nor is there a sizeof operator.<br>
如果使用token粘接操作符<code>##</code>，一个宏(macro)里的两个token可以被连接成一个token，这与C++预处理器相同。粘接结果必须是一个有效的token，这就由宏(macro)的展开情况决定了。也就是说，宏(macro)的展开发生于token粘接之后。不存在其他基于<code>#</code>的操作符（例如，没有<code>#</code>，没有<code>#@</code>），也不存在<code>sizeof</code>操作符。</p>
<p>The semantics of applying operators to integer literals in the preprocessor match those standard in the C++ preprocessor, not those in the OpenGL Shading Language.<br>
预处理器中对字面整数的计算结果，与C++预处理器相同，而未必与GLSL相同。</p>
<p>Preprocessor expressions will be evaluated according to the behavior of the host processor, not the processor targeted by the shader.<br>
预处理器中的表达式由CPU计算，而不是由GPU计算。</p>
<p>#error will cause the implementation to put a compile-time diagnostic message into the shader object’s information log (see section 7.12 “Shader, Program and Program Pipeline Queries” of the OpenGL Specification for how to access a shader object’s information log). The message will be the tokens following the #error directive, up to the first new-line. The implementation must treat the presence of a #error directive as a compile-time error.<br>
<code>#error</code>会向shader对象写入一条log（我猜就是用<code>glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei[] length, string infoLog);</code>得到的<code>infoLog</code>）。此log的内容就是<code>#error "xxxxxxx"</code>指令中的<code>xxxxxxx</code>。实现(GLSL编译器)必须将遇到<code>#error</code>指令视为发生了编译时error。</p>
<p>#pragma allows implementation-dependent compiler control. Tokens following #pragma are not subject to preprocessor macro expansion. If an implementation does not recognize the tokens following #pragma, then it will ignore that pragma.<br>
各个实现(GLSL编译器)可以用<code>#pragma</code>搞各自的控制。<code>#pragma</code>后跟的token不参与宏(macro)展开。如果某个实现(GLSL编译器)未能识别<code>#pragma</code>后跟的token，那么这个实现就会无视此<code>#pragma</code>。<br>
The following pragmas are defined as part of the language.<br>
GLSL内置了下列<code>#pragma</code>：</p>
<pre><code class="language-glsl">#pragma STDGL
</code></pre>
<p>The STDGL pragma is used to reserve pragmas for use by future revisions of this language. No implementation may use a pragma whose first token is STDGL.<br>
这个<code>#pragma STDGL</code>被保留下来，是为了用于GLSL的未来版本。任何实现(GLSL编译器)均不得使用第一个token为<code>STDGL</code>的<code>#pragma</code>。</p>
<pre><code class="language-glsl">#pragma optimize(on)
#pragma optimize(off)
</code></pre>
<p>can be used to turn off optimizations as an aid in developing and debugging shaders. It can only be used outside function definitions. By default, optimization is turned on for all shaders.<br>
这个optimize用于开关shader的优化选项。关闭优化，有助于开发和调试shader。它只能写到函数定义的外面。optimize的默认状态是对所有shader都开启(on)的。</p>
<pre><code class="language-glsl">#pragma debug(on)
#pragma debug(off)
</code></pre>
<p>The debug pragma can be used to enable compiling and annotating a shader with debug information, so that it can be used with a debugger. It can only be used outside function definitions. By default, debug is turned off.<br>
这个debug用于开启调试信息。它只能写到函数定义的外面。debug的默认状态是关闭(off)的。</p>
<p>Shaders should declare the version of the language they are written to. The language version a shader is written to is specified by<br>
shader应当声明它们使用的GLSL版本号，方式如下：</p>
<pre><code class="language-glsl">#version number profile_opt
</code></pre>
<p>where number must be a version of the language, following the same convention as __VERSION__ above. The directive “#version 460” is required in any shader that uses version 4.60 of the language. Any number representing a version of the language a compiler does not support will cause a compile-time error to be generated. Version 1.10 of the language does not require shaders to include this directive, and shaders that do not include a #version directive will be treated as  targeting version 1.10. Shaders that specify #version 100 will be treated as targeting version 1.00 of the OpenGL ES Shading Language. Shaders that specify #version 300 will be treated as targeting version 3.00 of the OpenGL ES Shading Language. Shaders that specify #version 310 will be treated as targeting version 3.10 of the OpenGL ES Shading Language.<br>
其中，<code>number</code>必须是GLSL的一个版本号，与<code>__VERSION__</code>遵循同样的规则。使用GLSL 4.60版的shader必须写上<code>#version 460</code>指令。如果编译器发现了不支持的GLSL版本号，就会报error。GLSL 1.10版不要求shader写此指令；没有写此指令的shader会被视为面向GLSL 1.10版。写了<code>#version 100</code>的shader会被视为面向openGL ES着色语言的1.00版。写了<code>#version 300</code>的shader会被视为面向openGL ES着色语言的3.00版。写了<code>#version 310</code>的shader会被视为面向openGL ES着色语言的3.10版。</p>
<p>If the optional profile argument is provided, it must be the name of an OpenGL profile. Currently, there are three choices:<br>
如果要写可选的模式(profile)参数，那只能是一个openGL模式名称。目前，有3个模式可选：</p>
<pre><code class="language-glsl">core
compatibility
es
</code></pre>
<p>A profile argument can only be used with version 150 or greater. If no profile argument is provided and the version is 150 or greater, the default is core. If version 300 or 310 is specified, the profile argument is not optional and must be es, or a compile-time error results. The Language Specification for the es profile is specified in The OpenGL ES Shading Language specification.<br>
模式(profile)参数只能用在<code>150</code>或更高版本。如果没有写模式(profile)参数且版本是<code>150</code>或更高，那就是默认使用<code>core</code>模式。如果指定版本为<code>300</code>或<code>310</code>，那么模式(profile)参数就不能省略，且必须是<code>es</code>，否则就会报编译时error。<code>es</code>模式的语言说明书(Specification)详见OpenGL ES Shading Language specification。</p>
<p>Shaders for the core or compatibility profiles that declare different versions can be linked together. However, es profile shaders cannot be linked with non-es profile shaders or with es profile shaders of a different version, or a link-time error will result. When linking shaders of versions allowed by these rules, remaining link-time errors will be given as per the linking rules in the GLSL version corresponding to the version of the context the shaders are linked under. Shader compile-time errors must still be given strictly based on the version declared (or defaulted to) within each shader.<br>
声明不同版本的<code>core</code>或<code>compatibility</code>模式的shader，可以被链接(link)起来。但是，<code>es</code>模式的shader不能与非<code>es</code>模式的shader链接(link)，也不能与不同版本的<code>es</code>模式的shader链接(link)，否则就会报链接时error。当根据上述规则链接(link)符合版本要求的shader时，其他的链接时error将依据(shader所处上下文版本对应的GLSL版本的链接规则)进行处理。而shader的编译时error仍须严格按照每个shader内部声明的(或默认的)版本进行判定。</p>
<p>Unless otherwise specified, this specification is documenting the core profile, and everything specified for the core profile is also available in the compatibility profile. Features specified as belonging specifically to the compatibility profile are not available in the core profile. Compatibility-profile features are not available when generating SPIR-V.<br>
若无其他声明，那么本文就是在介绍<code>core</code>模式下的情况，<code>core</code>模式下的情况，在<code>compatibility</code>模式下也适用。但只适用于在<code>compatibility</code>模式下的情况，在<code>core</code>模式下就不适用了。如果要生成<code>SPIR-V</code>，那么<code>compatibility</code>模式的特性就不可用了。</p>
<p>There is a built-in macro definition for each profile the implementation supports. All implementations provide the following macro:<br>
每个模式都有一个内置的宏(macro)定义。所有的实现(GLSL编译器)都提供下述宏(macro)：</p>
<pre><code class="language-glsl">#define GL_core_profile 1
</code></pre>
<p>Implementations providing the compatibility profile provide the following macro:<br>
支持<code>compatibility</code>模式的实现(GLSL编译器)，提供下述宏(macro)：</p>
<pre><code class="language-glsl">#define GL_compatibility_profile 1
</code></pre>
<p>Implementations providing the es profile provide the following macro:<br>
支持<code>es</code>模式的实现(GLSL编译器)，提供下述宏(macro)：</p>
<pre><code class="language-glsl">#define GL_es_profile 1
</code></pre>
<p>The #version directive must occur in a shader before anything else, except for comments and white space.<br>
在一个shader里，在<code>#version</code>指令之前不能出现任何内容，除了注释和空白符(<code>' '</code>、<code>'\t'</code>)。</p>
<p>By default, compilers of this language must issue compile-time syntactic, semantic, and grammatical errors for shaders that do not conform to this specification. Any extended behavior must first be enabled. Directives to control the behavior of the compiler with respect to extensions are declared with the #extension directive<br>
默认情况下，GLSL编译器必须对shader中不符合本说明书的情况报编译时的语法/语义/文法error。任何扩展行为必须先被启用(enable)才能用。<code>#extension</code>指令的作用就是，控制编译器在扩展(extension)方面的行为。</p>
<pre><code class="language-glsl">#extension extension_name : behavior
#extension all : behavior
</code></pre>
<p>where extension_name is the name of an extension. Extension names are not documented in this specification. The token all means the behavior applies to all extensions supported by the compiler.<br>
其中，<code>extension_name</code>是扩展的名字，本说明书不介绍扩展的名字的详情。<code>all</code>这个token的意思是，指定的行为(behavior)要作用于编译器支持的全部扩展。<br>
The behavior can be one of the following:<br>
可选的行为(behavior)如下表所示：</p>
<table>
<thead>
<tr>
<th style="text-align: left">Behavior<br>行为</th>
<th style="text-align: left">Effect<br>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left">require</td>
<td style="text-align: left">Behave as specified by the extension extension_name.<br>Give a compile-time error on the #extension if the extension extension_name is not supported, or if all is specified.<br>按照<code>extension_name</code>的规定执行。<br>如果<code>extension_name</code>不被<strong>支持</strong>，或指定了<code>all</code>，则对<code>#extension</code>报error。</td>
</tr>
<tr>
<td style="text-align: left">enable</td>
<td style="text-align: left">Behave as specified by the extension extension_name.<br>Warn on the #extension if the extension extension_name is not supported.<br>Give a compile-time error on the #extension if all is specified.<br>按照<code>extension_name</code>的规定执行。<br>如果<code>extension_name</code>不被支持，则对<code>#extension</code>报<strong>warn</strong>。<br>如果指定了<code>all</code>，则对<code>#extension</code>报error。</td>
</tr>
<tr>
<td style="text-align: left">warn</td>
<td style="text-align: left">Behave as specified by the extension extension_name, except issue warnings on any detectable use of that extension, unless such use is supported by other enabled or required extensions.<br>If all is specified, then warn on all detectable uses of any extension used.<br>Warn on the #extension if the extension extension_name is not supported.<br>按照<code>extension_name</code>的规定执行，但对该扩展的使用报<strong>warn</strong>——除非这个使用被其他<code>enable</code>/<code>require</code>的扩展支持。<br>如果指定了<code>all</code>，则对所有扩展的使用报<strong>warn</strong>。<br>如果<code>extension_name</code>不被支持，则对<code>#extension</code>本身报<strong>warn</strong>。</td>
</tr>
<tr>
<td style="text-align: left">disable</td>
<td style="text-align: left">Behave (including issuing errors and warnings) as if the extension extension_name is not part of the language definition.<br>If all is specified, then behavior must revert back to that of the non-extended core version of the language being compiled to.<br>Warn on the #extension if the extension extension_name is not supported.<br>视同<code>extension_name</code>不存在。<br>如果指定了<code>all</code>，则视同使用不存在任何扩展的<code>core</code>版本。<br>如果<code>extension_name</code>不被支持，则对<code>#extension</code>本身报warn。</td>
</tr>
</tbody>
</table>
<p>The extension directive is a simple, low-level mechanism to set the behavior for each extension. It does not define policies such as which combinations are appropriate, those must be defined elsewhere. Order of directives matters in setting the behavior for each extension: Directives that occur later override those seen earlier. The all variant sets the behavior for all extensions, overriding all previously issued extension directives, but only for the behaviors warn and disable.<br>
<code>#extension</code>指令用于设置每个extension的行为，是一个简单且底层的机制。它不定义“哪个组合是恰当的”等策略（这得在其他地方定义）。各个<code>#extension</code>指令的先后顺序是有意义的：后出现的<code>#extension</code>会覆盖先出现的<code>#extension</code>。<code>#extension all : warn</code>和<code>#extension all : disable</code>会为所有扩展设置行为，覆盖所有先前的<code>#extension</code>指令。</p>
<p>The initial state of the compiler is as if the directive<br>
编译器的初始状态就如同写了如下指令：</p>
<pre><code class="language-glsl">#extension all : disable
</code></pre>
<p>was issued, telling the compiler that all error and warning reporting must be done according to this specification, ignoring any extensions.<br>
即，告诉编译器，要求所有错误和警告的报告必须遵循此说明书，并忽略所有扩展功能。</p>
<p>Each extension can define its allowed granularity of scope. If nothing is said, the granularity is a shader (that is, a single compilation unit), and the extension directives must occur before any nonpreprocessor tokens. If necessary, the linker can enforce granularities larger than a single compilation unit, in which case each involved shader will have to contain the necessary extension directive.<br>
每个extension可以定义其允许的作用域粒度。如果什么都没说，粒度就是单个shader（即单个编译单元），且extension指令必须出现在所有非预处理器tokens之前。必要时，链接器可强制采用比单编译单元更大的粒度，此时每个相关的shader均须包含必要的extension指令。</p>
<p>Macro expansion is not done on lines containing #extension and #version directives.<br>
在包含<code>#extension</code>或<code>#version</code>指令的代码行上，不会执行宏(macro)展开。</p>
<p>#line must have, after macro substitution, one of the following forms:<br>
<code>#line</code>指令，在宏(macro)替换后，必须符合下列形式之一：</p>
<pre><code class="language-glsl">#line line
#line line source-string-number
</code></pre>
<p>where line and source-string-number are constant integer expressions. If these constant expressions are not integer literals then behavior is undefined. After processing this directive (including its new-line), the implementation will behave as if it is compiling at line number line and source string number source-string-number. Subsequent source strings will be numbered sequentially, until another #line directive overrides that numbering.<br>
其中，line和source-string-number是整型常量表达式，否则其行为就是未定义的，后果是不可测的。处理了这一指令（及换行符<code>\r\n</code>）后，实现(GLSL编译器)将视自己在第<code>line</code>行和第<code>source-string-number</code>个源代码字符串上。后序源代码字符串将被依次编号，直到被下一个<code>#line</code>指令覆盖之。</p>
<blockquote>
<p>Note<br>注意<br>
Some implementations have allowed constant expressions in #line directives and some have not. Even where expressions are supported the grammar is ambiguous and so results are implementation dependent. For example, + #line +2 +2 // Line number set to 4, or file to 2 and line to 2<br>
某些实现(GLSL编译器)允许在<code>#line</code>指令中使用常量表达式，而另一些则不允许。即使支持表达式，由于语法规则存在歧义，最终结果仍可能因实现而异。例如：#line +2 +2 // 可能被解析为行号设为4，或文件编号为2且行号为2</p>
</blockquote>
<p>When shaders are compiled for OpenGL SPIR-V, the following predefined macro is available:<br>
当shader为 OpenGL SPIR-V 编译时，以下预定义的宏(macro)可用：</p>
<pre><code class="language-glsl">#define GL_SPIRV 100
</code></pre>
<p>When targeting Vulkan, the following predefined macro is available:<br>
当目标平台为 Vulkan 时，以下预定义的宏(macro)可用：</p>
<pre><code class="language-glsl">#define VULKAN 100
</code></pre>
<h1 id="end">End</h1>

</div>
<div id="MySignature" role="contentinfo">
    <table>
    <tbody><tr>
        <td><img width="50" height="50" src="https://images.cnblogs.com/cnblogs_com/bitzhuwei/609187/o_%E5%BE%AE%E4%BF%A1%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%94%AF%E4%BB%98.png">
        </td>
        <td>微信扫码，自愿捐赠。四海同道，共谱新篇。
            <br>
            微信捐赠不显示捐赠者个人信息，如需要，请注明联系方式。
        </td>
    </tr>

</tbody></table>


</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.2758322113078704" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-28 15:40">2025-05-28 15:10</span>&nbsp;
<a href="https://www.cnblogs.com/bitzhuwei">BIT祝威</a>&nbsp;
阅读(<span id="post_view_count">24</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18899755);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18899755', targetLink: 'https://www.cnblogs.com/bitzhuwei/p/18899755/rules-about-GLSL-preprocessor', title: 'GLSL的预处理器都有哪些规定？' })">举报</a>
</div>
        