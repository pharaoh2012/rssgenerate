
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/tcjiaan/p/18796544" title="发布于 2025-04-04 12:43">
    <span role="heading" aria-level="2">【ESP32】两种模拟 USB 鼠标的方法</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>上一篇水文中，老周给大伙伴们扯了关于 idf 中添加自定义 Arduino 组件的方案。这次咱们做一下 USB 鼠标玩玩。</p>
<p>很遗憾的是，老周无能，在 Arduino-esp32 组件依赖 TinyUSB 组件时无法进行编译，不管怎么配置都会找不到 tusb.h 文件；就算把 tinyUSB 内置到 arduino-esp32 的源码中也报错；调整代码中的 extern C 语句，又会导致找不到 C++ 类……反正，就是搞不下来。不过，在 idf 中使用 esp_tinyusb 组件是可以正常编译的。据说官方的 arduino-lib-builder 项目 clone 下来是可以正常编译（当然，官方只是说在 Ubuntu 和 树莓派 上测试通过，并没说在 Windows 下可以编译。有人说在 WSL 中可以编译，不过老周未测试，不敢下结论）。</p>
<p>思考其原因，大概有三：1、C 和 C++ 代码混合编译经常会这样；2、可能需要定义特殊的宏；3、官方的 builder 项目中是要对代码“打补丁”后再编译的，可能要改什么。</p>
<p>其实，自己编译一般是有计划修改源代码或订制自己的库。如果没这个需求，咱们直接用官方编译好的库，可以少一些折腾。</p>
<p>根据老周实战的结果，给大伙伴推荐两种 esp32 模拟 USB 鼠标的方案（为了让大伙学得没有压力，USB 键盘暂时不弄）。这两种方案老周都是验证过的，能运行，并且电脑能识别出鼠标。接下来，开工！</p>
<h3><strong>方案A：使用 Arduino 库（这种是最简单的）</strong></h3>
<p>因为用到 Arduino IDE，老周简单说一下安装事项。咱们作为一名合格的、有技术含量的、迷倒千万妹子的码农，绝对不能在安装开发工具这个关卡给夹脑袋，否则，说句好唱不好听的，真的太低能了。Arduino 2 是重新开发过的，有那么点 VS Code 的味了。老周建议下载 .zip 版本，这个是最好的，解压出来，想放哪就放哪，不依赖系统目录。</p>
<p>打开Arduino IDE，执行菜音【文件】-【首选项】。在设置窗口中滚动到下方，有个“其他开发板管理地址”，点击输入框右边的按钮。</p>
<p><img src="https://img2024.cnblogs.com/blog/367389/202504/367389-20250402180449706-990727931.png" alt="" width="677" height="323" loading="lazy"></p>
<p>在弹出的对话框中填入以下URL，并点“确定”。</p>
<div class="cnblogs_code">
<pre>https:<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">github.com/espressif/arduino-esp32/releases/download/3.2.0/package_esp32_index.json</span></pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/367389/202504/367389-20250402180648986-1074548074.png" alt="" width="447" height="225" loading="lazy"></p>
<p>设置这个URL后才能获取到乐鑫官方最新的库。</p>
<p>接下来最折腾的是安装 esp32 库，因为不可描述的原因，有时会连不上 github，导致很多压缩包下载不了。</p>
<p>在IDE的开发板管理器窗格中，搜索“esp32”，就能找到乐鑫官方维护的库，现在最新是 3.2.0。</p>
<p>不过，相信各位都知道有文件加速这种网站，你网上搜搜就有了。我们可以从 JSON 文件中获取到各个压缩包的下载链接的，方法如下：</p>
<p>1、找到你的用户目录下的 AppData/local，里面有个 Arduino15 目录；</p>
<p>2、进去 Arduino15 目录，你会看到几个 JSON 文件；</p>
<p>3、如果你只使用发布版本，不使用预览版，那直接找到&nbsp;package_esp32_index.json 文件；</p>
<p>4、打开上面提到的 JSON 文件（用 VS Code 最好），从 platforms 下的 toolsDependencies 节点可以知道依赖的工具。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">{
  </span>"name": "esp32"<span style="color: rgba(0, 0, 0, 1)">,
  </span>"architecture": "esp32"<span style="color: rgba(0, 0, 0, 1)">,
  </span>"version": "3.2.0"<span style="color: rgba(0, 0, 0, 1)">,
  </span>"category": "ESP32"<span style="color: rgba(0, 0, 0, 1)">,
  </span>"url": "https://github.com/espressif/arduino-esp32/releases/download/3.2.0/esp32-3.2.0.zip"<span style="color: rgba(0, 0, 0, 1)">,
  </span>"archiveFileName": "esp32-3.2.0.zip"<span style="color: rgba(0, 0, 0, 1)">,
  </span>"checksum": "SHA-256:d38b16fef6e519fc0d19bc5af0b39cdbed7dfc2ce69214c1971ded0e61ecd911"<span style="color: rgba(0, 0, 0, 1)">,
  </span>"size": "25447136"<span style="color: rgba(0, 0, 0, 1)">,
  </span>"help"<span style="color: rgba(0, 0, 0, 1)">: {
    </span>"online": ""<span style="color: rgba(0, 0, 0, 1)">
  },
  </span>"boards"<span style="color: rgba(0, 0, 0, 1)">: [
    {
      </span>"name": "ESP32 Dev Board"<span style="color: rgba(0, 0, 0, 1)">
    },
    {
      </span>"name": "ESP32-C3 Dev Board"<span style="color: rgba(0, 0, 0, 1)">
    },
    {
      </span>"name": "ESP32-C6 Dev Board"<span style="color: rgba(0, 0, 0, 1)">
    },
    {
      </span>"name": "ESP32-H2 Dev Board"<span style="color: rgba(0, 0, 0, 1)">
    },
    {
      </span>"name": "ESP32-P4 Dev Board"<span style="color: rgba(0, 0, 0, 1)">
    },
    {
      </span>"name": "ESP32-S2 Dev Board"<span style="color: rgba(0, 0, 0, 1)">
    },
    {
      </span>"name": "ESP32-S3 Dev Board"<span style="color: rgba(0, 0, 0, 1)">
    },
    {
      </span>"name": "Arduino Nano ESP32"<span style="color: rgba(0, 0, 0, 1)">
    }
  ],
  </span>"<strong><span style="background-color: rgba(255, 255, 0, 1)">toolsDependencies</span></strong>"<span style="color: rgba(0, 0, 0, 1)">: [
    {
      </span>"packager": "esp32"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"name": "esp32-arduino-libs"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"version": "idf-release_v5.4-2f7dcd86-v1"<span style="color: rgba(0, 0, 0, 1)">
    },
    {
      </span>"packager": "esp32"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"name": "esp-x32"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"version": "2411"<span style="color: rgba(0, 0, 0, 1)">
    },
    {
      </span>"packager": "esp32"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"name": "xtensa-esp-elf-gdb"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"version": "14.2_20240403"<span style="color: rgba(0, 0, 0, 1)">
    },
    {
      </span>"packager": "esp32"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"name": "esp-rv32"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"version": "2411"<span style="color: rgba(0, 0, 0, 1)">
    },
    {
      </span>"packager": "esp32"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"name": "riscv32-esp-elf-gdb"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"version": "14.2_20240403"<span style="color: rgba(0, 0, 0, 1)">
    },
    {
      </span>"packager": "esp32"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"name": "openocd-esp32"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"version": "v0.12.0-esp32-20241016"<span style="color: rgba(0, 0, 0, 1)">
    },
    {
      </span>"packager": "esp32"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"name": "esptool_py"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"version": "4.9.dev3"<span style="color: rgba(0, 0, 0, 1)">
    },
    {
      </span>"packager": "esp32"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"name": "mkspiffs"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"version": "0.2.3"<span style="color: rgba(0, 0, 0, 1)">
    },
    {
      </span>"packager": "esp32"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"name": "mklittlefs"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"version": "3.0.0-gnu12-dc7f933"<span style="color: rgba(0, 0, 0, 1)">
    },
    {
      </span>"packager": "arduino"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"name": "dfu-util"<span style="color: rgba(0, 0, 0, 1)">,
      </span>"version": "0.11.0-arduino5"<span style="color: rgba(0, 0, 0, 1)">
    }
  ]
},</span></pre>
</div>
<p>然后在 Arduino IDE 中看看哪个文件下载挂了。</p>
<p><img src="https://img2024.cnblogs.com/blog/367389/202504/367389-20250402181720165-205964421.png" alt="" width="531" height="236" loading="lazy"></p>
<p>错误信息中已经告诉咱们下载链接了，直接复制到加速工具下载。下载后扔到 Arduino15/stagging/packages 目录下，然后重新打开 Arduino IDE ，再安装一次。直到所有包都正确下载。如果错误信息中没看到URL，可以根据工具名称和版本，在上面提到的&nbsp;package_esp32_index.json 文件中查找下载地址。</p>
<div class="cnblogs_code">
<pre>          "name": "esp-rv32"<span style="color: rgba(0, 0, 0, 1)">,
          </span>"version": "2411"<span style="color: rgba(0, 0, 0, 1)">,
          </span>"systems"<span style="color: rgba(0, 0, 0, 1)">: [
            {
              </span>"host": "x86_64-pc-linux-gnu"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"url": "https://github.com/espressif/crosstool-NG/releases/download/esp-14.2.0_20241119/riscv32-esp-elf-14.2.0_20241119-x86_64-linux-gnu.tar.gz"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"archiveFileName": "riscv32-esp-elf-14.2.0_20241119-x86_64-linux-gnu.tar.gz"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"checksum": "SHA-256:a16942465d33c7f0334c16e83bc6feb62e06eeb79cf19099293480bb8d48c0cd"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"size": "593721156"<span style="color: rgba(0, 0, 0, 1)">
            },
            {
              </span>"host": "aarch64-linux-gnu"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"url": "https://github.com/espressif/crosstool-NG/releases/download/esp-14.2.0_20241119/riscv32-esp-elf-14.2.0_20241119-aarch64-linux-gnu.tar.gz"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"archiveFileName": "riscv32-esp-elf-14.2.0_20241119-aarch64-linux-gnu.tar.gz"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"checksum": "SHA-256:22486233d0e0fd58a54ae453b701f195f1432fc6f2e17085b9d6c8d5d9acefb7"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"size": "587879927"<span style="color: rgba(0, 0, 0, 1)">
            },
            {
              </span>"host": "arm-linux-gnueabihf"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"url": "https://github.com/espressif/crosstool-NG/releases/download/esp-14.2.0_20241119/riscv32-esp-elf-14.2.0_20241119-arm-linux-gnueabi.tar.gz"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"archiveFileName": "riscv32-esp-elf-14.2.0_20241119-arm-linux-gnueabi.tar.gz"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"checksum": "SHA-256:27a72d5d96cdb56dae2a1da5dfde1717c18a8c1f9a1454c8e34a8bd34abe662d"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"size": "586531522"<span style="color: rgba(0, 0, 0, 1)">
            },
            {
              </span>"host": "i686-pc-linux-gnu"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"url": "https://github.com/espressif/crosstool-NG/releases/download/esp-14.2.0_20241119/riscv32-esp-elf-14.2.0_20241119-i586-linux-gnu.tar.gz"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"archiveFileName": "riscv32-esp-elf-14.2.0_20241119-i586-linux-gnu.tar.gz"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"checksum": "SHA-256:b7bd6e4cd53a4c55831d48e96a3d500bfffb091bec84a30bc8c3ad687e3eb3a2"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"size": "597070471"<span style="color: rgba(0, 0, 0, 1)">
            },
            {
              </span>"host": "x86_64-apple-darwin"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"url": "https://github.com/espressif/crosstool-NG/releases/download/esp-14.2.0_20241119/riscv32-esp-elf-14.2.0_20241119-x86_64-apple-darwin_signed.tar.gz"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"archiveFileName": "riscv32-esp-elf-14.2.0_20241119-x86_64-apple-darwin_signed.tar.gz"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"checksum": "SHA-256:5f8b571e1aedbe9f856f3bdeca6600cd5510ccff1ca102c4f001421eda560585"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"size": "602343061"<span style="color: rgba(0, 0, 0, 1)">
            },
            {
              </span>"host": "arm64-apple-darwin"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"url": "https://github.com/espressif/crosstool-NG/releases/download/esp-14.2.0_20241119/riscv32-esp-elf-14.2.0_20241119-aarch64-apple-darwin_signed.tar.gz"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"archiveFileName": "riscv32-esp-elf-14.2.0_20241119-aarch64-apple-darwin_signed.tar.gz"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"checksum": "SHA-256:a7276042a7eb2d33c2dff7167539e445c32c07d43a2c6827e86d035642503e0b"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"size": "578521565"<span style="color: rgba(0, 0, 0, 1)">
            },
            {
              </span>"host": "i686-mingw32"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"url": "https://github.com/espressif/crosstool-NG/releases/download/esp-14.2.0_20241119/riscv32-esp-elf-14.2.0_20241119-i686-w64-mingw32.zip"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"archiveFileName": "riscv32-esp-elf-14.2.0_20241119-i686-w64-mingw32.zip"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"checksum": "SHA-256:54193a97bd75205678ead8d11f00b351cfa3c2a6e5ab5d966341358b9f9422d7"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"size": "672055172"<span style="color: rgba(0, 0, 0, 1)">
            },
            {
              </span>"host": "x86_64-mingw32"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"url": "https://github.com/espressif/crosstool-NG/releases/download/esp-14.2.0_20241119/riscv32-esp-elf-14.2.0_20241119-x86_64-w64-mingw32.zip"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"archiveFileName": "riscv32-esp-elf-14.2.0_20241119-x86_64-w64-mingw32.zip"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"checksum": "SHA-256:24c8407fa467448d394e0639436a5ede31caf1838e35e8435e19df58ebed438c"<span style="color: rgba(0, 0, 0, 1)">,
              </span>"size": "677812937"<span style="color: rgba(0, 0, 0, 1)">
            }
          ]
        },</span></pre>
</div>
<p>根据不同的系统平台选好目标，其中，url 字段就是下载地址了。</p>
<p>&nbsp;</p>
<p>接下来可以干活了。用封装好的 arduino 库模拟 USB 鼠标是很简单的，只用一个 USBHIDMouse 类就搞定。</p>
<p>1、实例化；</p>
<p>2、调用 begin 方法初始化；</p>
<p>3、移动鼠标时调用 move 方法。该方法的声明如下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">void</span> move(int16_t x, int16_t y, int8_t wheel = <span style="color: rgba(128, 0, 128, 1)">0</span>, int8_t pan = <span style="color: rgba(128, 0, 128, 1)">0</span>);</pre>
</div>
<p>x、y 就是水平和垂直方向上移动的量，相对坐标，比如，x = 5，就是鼠标向右移动5个单位（像素）。后面两个参数默认给了0，调用时如不需要可以不传值。wheel 是滚轮的滚动量，pan 表示水平滚动的量（要用到水平滚动时）。</p>
<p>咱们写一段代码，让鼠标在屏幕上画正方形，即向右 -&gt; 向下 -&gt; 向左 -&gt; 向上回到原来的位置。</p>
<div class="cnblogs_code">
<pre>#include <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">USB.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">USBHIDMouse.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">

USBHIDMouse mouse;             </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 实例化</span>
<span style="color: rgba(0, 0, 255, 1)">const</span> int8_t move_d = <span style="color: rgba(128, 0, 128, 1)">3</span>;       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 单次鼠标移动量</span>
<span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">int</span> total_count = <span style="color: rgba(128, 0, 128, 1)">200</span>;   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 一个方向移动总次数</span>
<span style="color: rgba(0, 0, 255, 1)">int</span> count;    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 记录发了多少次坐标</span>
<span style="color: rgba(0, 0, 255, 1)">int</span> step;     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 后面用于做比较，0表示向左，1表示向下……</span>

<span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> setup() {
  count </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
  step </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
  USB.begin();      </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 注意，不要忘了这一行</span>
  mouse.begin();    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 初始化</span>
<span style="color: rgba(0, 0, 0, 1)">}

</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> loop() {
  </span><span style="color: rgba(0, 0, 255, 1)">switch</span><span style="color: rgba(0, 0, 0, 1)"> (step) 
  {
  </span><span style="color: rgba(0, 0, 255, 1)">case</span> <span style="color: rgba(128, 0, 128, 1)">0</span>:        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 向右移动</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span>(count &lt;<span style="color: rgba(0, 0, 0, 1)"> total_count)
    {
      mouse.move(move_d, </span><span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">);
      count</span>++<span style="color: rgba(0, 0, 0, 1)">;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
    {
      </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 换下一个移动方向</span>
      step = <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
      count </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
  </span><span style="color: rgba(0, 0, 255, 1)">case</span> <span style="color: rgba(128, 0, 128, 1)">1</span>:           <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 向下移动</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span>(count &lt;<span style="color: rgba(0, 0, 0, 1)"> total_count)
    {
      mouse.move(</span><span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">, move_d);
      count </span>++<span style="color: rgba(0, 0, 0, 1)">;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
    {
      </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 下一个方向</span>
      step = <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">;
      count </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
  </span><span style="color: rgba(0, 0, 255, 1)">case</span> <span style="color: rgba(128, 0, 128, 1)">2</span>:         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 向左移动</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span>(count &lt;<span style="color: rgba(0, 0, 0, 1)"> total_count)
    {
      mouse.move(</span>-move_d, <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">);
      count</span>++<span style="color: rgba(0, 0, 0, 1)">;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
    {
      step </span>= <span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">;
      count</span>=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
  </span><span style="color: rgba(0, 0, 255, 1)">case</span> <span style="color: rgba(128, 0, 128, 1)">3</span>:         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 向上移动</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span>(count &lt;<span style="color: rgba(0, 0, 0, 1)"> total_count)
    {
      mouse.move(</span><span style="color: rgba(128, 0, 128, 1)">0</span>, -<span style="color: rgba(0, 0, 0, 1)">move_d);
      count</span>++<span style="color: rgba(0, 0, 0, 1)">;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
    {
      step </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
      count </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
  </span><span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)">:
    </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
  }
  delay(</span><span style="color: rgba(128, 0, 128, 1)">10</span>);    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 延时（毫秒级）</span>
}</pre>
</div>
<p>相信大伙伴们能看懂代码的。首先，包含 USB.h 和 USBHIDMouse.h；然后直接可以创建 USBHIDMouse 实例。在初始化时，一定要先初始化 USB，再初始化鼠标，即 USB.begin 方法一定要先调用。在 loop 函数中，用 move 方法移动鼠标就是了，简单吧。</p>
<p>写好程序后，需要配置一下 USB Mode 参数。在 Arduino IDE 窗口中，点击【工具】菜单。在子菜单中执行【USB Mode: XXX】-&gt;【USB OTG(TinyUSB)】。</p>
<p><img src="https://img2024.cnblogs.com/blog/367389/202503/367389-20250328121509185-185281350.png" alt="" width="612" height="325" loading="lazy"></p>
<p>如果不修改 USB Mode，烧录之后电脑可能识别不到，或者要重置几次才能识别。这个就是关闭默认的串口输出，所以你不能通过 USB 口来查看日志了。</p>
<p>编译，上传到 esp32 开发板上，有的板子是手动进入烧录模式的，可能要手动重启一下板子。如果没问题，你会看到鼠标动了。</p>
<p><img src="https://img2024.cnblogs.com/blog/367389/202503/367389-20250328121842334-384711447.gif" alt="" width="326" height="265"></p>
<p>&nbsp;</p>
<h3>方案B：idf 搭配 esp_tinyusb 组件</h3>
<p>每次看到有人鼓吹图形化开发什么的，心里就想嘲笑一番。为啥呢？其实那个是给小朋友玩的，不是咱们成年人用的。能不能快速成形跟用不用图形工具无关，也与用不用低代码无关，而是跟有没有被严重封装好的组件。比如，上面咱们用的 USBHIDMouse 类，人家就是高度封装好的，基本上一行代码初始化就可以读写了，这样写代码甚至比你用鼠标拖控件还快（除非你 C++ 语法学得极烂）。</p>
<p>现在很多工具，真的，营销成分多一些。就算给小朋友玩，好玩是好玩了，但的确培养不了什么编程习惯。以前给小朋友学用的是 BASIC 语言，最起码还是真枪实弹地写代码。代码不见得要写复杂，几行，几段都行。主要是养成好的思维和习惯，才有身临其境的氛围。老周上初中的时候，也是用 QBASIC 入门的，还是 DOS 窗口的，写一些数学算法的东西，还有从奥赛书上抄的算法。也没觉得有多难，还更有乐趣。</p>
<p>扯远了，下面介绍第二种方案。虽然严重封装好的组件好用，但也有很显著的缺点的。如果在初始化时候需要配置详细的参数，比如，电脑识别到鼠标后，显示我自定义的厂商名称，产品ID等。一种方法是把 Arduino 的库的代码自己修改再用；另一种更好的方法是用 idf 实现，控制起来更灵活，尽管要多写点代码。实际开发中经常会这样的，不是你想偷懒就能偷的。</p>
<p>先介绍一下库，这里实际上会用到两个库。到 Esp Component Registry 上搜索“tinyusb”，会搜到两个结果。</p>
<p><img src="https://img2024.cnblogs.com/blog/367389/202504/367389-20250403165542099-1872562566.png" alt="" width="353" height="266" loading="lazy"></p>
<p>第三个已经“过时”，不必管它。tinyusb 就是乐鑫移植的 tinnyUSB 库，而 esp_tinyusb 是做进一步封装，让你用起来更带劲。所以，esp_tinyusb 依赖 tinyusb。</p>
<p>在 idf 中直接使用 tinyusb 库，你有以下方案可选：</p>
<p><span style="color: rgba(0, 0, 128, 1)">1、执行 idf.py add-dependency 命令，让 idf 工具自动替你下载；</span></p>
<p><span style="color: rgba(0, 0, 128, 1)">2、手动下载库，放到项目目录下的 components 子目录中，无需在 CMake 中设置 EXTRA_COMPONENT_DIRS 变量。idf 工具会自动查找 components 目录下的组件；</span></p>
<p><span style="color: rgba(0, 0, 128, 1)">3、手动下载，放到项目以外的目录下，需要通过 EXTRA_COMPONENT_DIRS 变量设置组件所在目录。</span></p>
<p>下面老周将采用第2种方法。手动下载 esp_tinyusb 和 tinyusb 两个库， 然后在项目的根目录下新建一个 components&nbsp;</p>
<p>目录，并把两个库解压到此目录下。</p>
<p>其结构如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/367389/202504/367389-20250403171453833-1557912637.png" alt="" width="152" height="280" loading="lazy"></p>
<p>这次老周用另一台电脑写代码，配置比较高，编译起来快。这台机器装的是 Mint Linux，操作和 Windows 下一样。用乐鑫官方的 VS Code 扩展工具新建一个空项目（和前面介绍自定义 Arduino 组件一样）。</p>
<p>新建项目后，第一时间做好配置。</p>
<p>1、选好开发板型号。</p>
<p><img src="https://img2024.cnblogs.com/blog/367389/202504/367389-20250403171949467-1530404888.png" alt="" width="565" height="440" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/367389/202504/367389-20250403172058082-874975874.png" alt="" width="395" height="73" loading="lazy"></p>
<p>&nbsp;2、打开 main 目录下的 CMakeLists.txt 文件，在注册 main 组件时依赖 esp_tinyusb 库。</p>
<div class="cnblogs_code">
<pre>idf_component_register(SRCS <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">main.c</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
                    INCLUDE_DIRS </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">.</span><span style="color: rgba(128, 0, 0, 1)">"</span>
                    <span style="color: rgba(0, 0, 0, 1)"><strong><span style="background-color: rgba(255, 255, 0, 1)">REQUIRES esp_tinyusb</span></strong>)</span></pre>
</div>
<p>可以点 VS Code 底部状态栏上的“打开 IDF 终端”按钮，打开命令窗口，执行 idf.py reconfigure 命令，如果没报错，就说明没有语法错误了。</p>
<p>3、点击 VS Code 底部状态栏上的“SDK 编辑器”按钮<img src="https://img2024.cnblogs.com/blog/367389/202504/367389-20250403172834233-367852613.png" alt="" width="15" height="14" loading="lazy">，打开配置页面。</p>
<p>4、找到 Tiny USB Stack 节点下的“Human Interface Device Class(HID)” 条目，把“TinyUSB HID interface count”设置为 1。这个值默认是0，不改的话相关代码不会编译。</p>
<p><img src="https://img2024.cnblogs.com/blog/367389/202504/367389-20250403173522850-2076017579.png" alt="" width="241" height="68" loading="lazy"></p>
<p>如果你好奇为什么的话，可以打开 esp_tinyusb 组件下的 include/tusb_config.h 文件，然后看到这两个地方。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">#ifndef CONFIG_TINYUSB_HID_COUNT
#   define CONFIG_TINYUSB_HID_COUNT </span><span style="color: rgba(128, 0, 128, 1)">0</span>
<span style="color: rgba(0, 0, 255, 1)">#endif</span>

<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 此处省略 711 个字

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Enabled device class driver</span>
<span style="color: rgba(0, 0, 255, 1)">#define</span> CFG_TUD_CDC                 CONFIG_TINYUSB_CDC_COUNT
<span style="color: rgba(0, 0, 255, 1)">#define</span> CFG_TUD_MSC                 CONFIG_TINYUSB_MSC_ENABLED
<span style="color: rgba(0, 0, 255, 1)">#define</span> <strong><em><span style="background-color: rgba(255, 255, 0, 1)">CFG_TUD_HID                 CONFIG_TINYUSB_HID_COUNT</span></em></strong>
<span style="color: rgba(0, 0, 255, 1)">#define</span> CFG_TUD_MIDI                CONFIG_TINYUSB_MIDI_COUNT
<span style="color: rgba(0, 0, 255, 1)">#define</span> CFG_TUD_VENDOR              CONFIG_TINYUSB_VENDOR_COUNT
<span style="color: rgba(0, 0, 255, 1)">#define</span> CFG_TUD_ECM_RNDIS           CONFIG_TINYUSB_NET_MODE_ECM_RNDIS
<span style="color: rgba(0, 0, 255, 1)">#define</span> CFG_TUD_NCM                 CONFIG_TINYUSB_NET_MODE_NCM
<span style="color: rgba(0, 0, 255, 1)">#define</span> CFG_TUD_DFU                 CONFIG_TINYUSB_DFU_MODE_DFU
<span style="color: rgba(0, 0, 255, 1)">#define</span> CFG_TUD_DFU_RUNTIME         CONFIG_TINYUSB_DFU_MODE_DFU_RUNTIME
<span style="color: rgba(0, 0, 255, 1)">#define</span> CFG_TUD_BTH                 CONFIG_TINYUSB_BTH_ENABLED</pre>
</div>
<p>记住 CFG_TUD_HID 宏的值是来自 TINYUSB_HID_COUNT。</p>
<p>然后在 tinyusb 库中找到 src/class/hid/hid_device.c 文件。可以看到，如果 CFG_TUD_HID 宏的值不是大于 0 的话，那么代码就不会编译。</p>
<div class="cnblogs_code">
<pre>#include <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">tusb_option.h</span><span style="color: rgba(128, 0, 0, 1)">"</span>

<span style="color: rgba(0, 0, 255, 1)">#if</span> (CFG_TUD_ENABLED &amp;&amp; <span style="background-color: rgba(255, 255, 0, 1)"><em><strong>CFG_TUD_HID</strong></em></span>)

<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">--------------------------------------------------------------------+
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> INCLUDE
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">--------------------------------------------------------------------+</span>
#include <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">device/usbd.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">device/usbd_pvt.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">

#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">hid_device.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">

…………

</span><span style="color: rgba(0, 0, 255, 1)">#endif</span></pre>
</div>
<p>现在你懂了吧，为什么要把那个配置项改为1。</p>
<p>-----------------------------------------------------------------------------------------------------</p>
<p>现在打开 main.c 文件，开始写代码。</p>
<p>USB 描述符是很复杂的东西，有兴趣的话可以去看看 USB 协议定义说明，没兴趣的话，直接从示例代码抄过来就行。这里没啥技巧可言，都是标准化的东东。</p>
<div class="cnblogs_code">
<pre>#include &lt;stdio.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">tinyusb.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">class/hid/hid_device.h</span><span style="color: rgba(128, 0, 0, 1)">"</span>

<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">************ TinyUSB 描述符 ***************</span><span style="color: rgba(0, 128, 0, 1)">*/</span>

<span style="color: rgba(0, 0, 255, 1)">#define</span> TUSB_DESC_TOTAL_LEN      (TUD_CONFIG_DESC_LEN + CFG_TUD_HID * TUD_HID_DESC_LEN)

<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">*
 * @brief HID report descriptor（上报描述符）
 *
 * In this example we implement Keyboard + Mouse HID device,
 * so we must define both report descriptors
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">const</span> uint8_t hid_report_descriptor[] =<span style="color: rgba(0, 0, 0, 1)"> {
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 如果你要模拟键盘，请取消下面的注释
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TUD_HID_REPORT_DESC_KEYBOARD(HID_REPORT_ID(HID_ITF_PROTOCOL_KEYBOARD)),</span>
    <span style="color: rgba(0, 0, 0, 1)"><span style="background-color: rgba(0, 255, 0, 1)"><strong>TUD_HID_REPORT_DESC_MOUSE(HID_REPORT_ID(HID_ITF_PROTOCOL_MOUSE))</strong></span>
};

</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">*
 * @brief String descriptor(字符描述符)
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span>* hid_string_descriptor[<span style="color: rgba(128, 0, 128, 1)">5</span>] =<span style="color: rgba(0, 0, 0, 1)"> {
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> array of pointer to string descriptors</span>
    (<span style="color: rgba(0, 0, 255, 1)">char</span>[]){<span style="color: rgba(128, 0, 128, 1)">0x09</span>, <span style="color: rgba(128, 0, 128, 1)">0x04</span>},     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 0: is supported language is English (0x0409)</span>
    <span style="background-color: rgba(255, 255, 153, 1)"><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">GuangDong-Fish</span><span style="color: rgba(128, 0, 0, 1)">"</span></span>,         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 1: 生产商</span>
    <span style="background-color: rgba(255, 255, 153, 1)"><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Big-Mouse</span><span style="color: rgba(128, 0, 0, 1)">"</span></span>,              <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 2: 产品</span>
    <span style="background-color: rgba(255, 255, 153, 1)"><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">8848</span><span style="color: rgba(128, 0, 0, 1)">"</span></span>,                   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 3: 序列号</span>
    <span style="background-color: rgba(255, 255, 153, 1)"><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">8848 HID Interface</span><span style="color: rgba(128, 0, 0, 1)">"</span></span>,     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 4: HID 接口名称</span>
<span style="color: rgba(0, 0, 0, 1)">};

</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">*
 * @brief Configuration descriptor
 *
 * This is a simple configuration descriptor that defines 1 configuration and 1 HID interface
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">const</span> uint8_t hid_configuration_descriptor[] =<span style="color: rgba(0, 0, 0, 1)"> {
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Configuration number, interface count, string index, total length, attribute, power in mA</span>
    TUD_CONFIG_DESCRIPTOR(<span style="color: rgba(128, 0, 128, 1)">1</span>, <span style="color: rgba(128, 0, 128, 1)">1</span>, <span style="color: rgba(128, 0, 128, 1)">0</span>, TUSB_DESC_TOTAL_LEN, TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP, <span style="color: rgba(128, 0, 128, 1)">100</span><span style="color: rgba(0, 0, 0, 1)">),

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Interface number, string index, boot protocol, report descriptor len, EP In address, size &amp; polling interval</span>
    TUD_HID_DESCRIPTOR(<span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">4</span>, <span style="color: rgba(0, 0, 255, 1)">false</span>, <span style="color: rgba(0, 0, 255, 1)">sizeof</span>(hid_report_descriptor), <span style="color: rgba(128, 0, 128, 1)">0x81</span>, <span style="color: rgba(128, 0, 128, 1)">16</span>, <span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">),
};

</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">******** TinyUSB HID 回调函数 **************</span><span style="color: rgba(0, 128, 0, 1)">*/</span>

<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Invoked when received GET HID REPORT DESCRIPTOR request
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Application return pointer to descriptor, whose contents must exist long enough for transfer to complete</span>
uint8_t <span style="color: rgba(0, 0, 255, 1)">const</span> *<span style="color: rgba(0, 0, 0, 1)">tud_hid_descriptor_report_cb(uint8_t instance)
{
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> We use only one interface and one HID report descriptor, so we can ignore parameter 'instance'</span>
    <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> hid_report_descriptor;
}

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Invoked when received GET_REPORT control request
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Application must fill buffer report's content and return its length.
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Return zero will cause the stack to STALL request</span>
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t*<span style="color: rgba(0, 0, 0, 1)"> buffer, uint16_t reqlen)
{
    (</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">) instance;
    (</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">) report_id;
    (</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">) report_type;
    (</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">) buffer;
    (</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">) reqlen;

    </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
}

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Invoked when received SET_REPORT control request or
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> received data on OUT endpoint ( Report ID = 0, Type = 0 )</span>
<span style="color: rgba(0, 0, 255, 1)">void</span> tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t <span style="color: rgba(0, 0, 255, 1)">const</span>*<span style="color: rgba(0, 0, 0, 1)"> buffer, uint16_t bufsize)
{
}</span></pre>
</div>
<p>字符描述符那里，可以根据实际情况改一下产商、产品、序列号等信息，其他代码不用改。注意，这几个回调函数一定要留着，就算你用不上，也要留个空函数在那里：</p>
<div><span style="color: rgba(0, 0, 255, 1)">tud_hid_descriptor_report_cb</span></div>
<div>
<div><span style="color: rgba(0, 0, 255, 1)">tud_hid_get_report_cb</span></div>
<div>
<div><span style="color: rgba(0, 0, 255, 1)">tud_hid_set_report_cb</span></div>
<div>&nbsp;</div>
</div>
</div>
<p>好了，接下来 app_main 函数中的代码就要咱们自己写了。</p>
<p>先用&nbsp;tinyusb_config_t 结构体进行配置。</p>
<div class="cnblogs_code">
<pre>    <span style="color: rgba(0, 0, 255, 1)">const</span> tinyusb_config_t tucfg =<span style="color: rgba(0, 0, 0, 1)">
        {
            .device_descriptor </span>= NULL, <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 不需要</span>
            .external_phy = <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">,
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 下面配置字符描述符</span>
            .<span style="background-color: rgba(0, 255, 0, 1)">string_descriptor =</span><span style="color: rgba(0, 0, 0, 1)"><span style="background-color: rgba(0, 255, 0, 1)"> hid_string_descriptor</span>,
            .<span style="background-color: rgba(0, 255, 0, 1)">string_descriptor_count </span></span><span style="background-color: rgba(0, 255, 0, 1)">= <span style="color: rgba(128, 0, 128, 1)">5</span></span>, <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 数组中元素个数</span>
<span style="color: rgba(0, 0, 255, 1)">#if</span> (TUD_OPT_HIGH_SPEED)<span style="color: rgba(0, 0, 0, 1)">
            .fs_configuration_descriptor </span>= hid_configuration_descriptor, <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> HID configuration descriptor for full-speed and high-speed are the same</span>
            .hs_configuration_descriptor =<span style="color: rgba(0, 0, 0, 1)"> hid_configuration_descriptor,
            .qualifier_descriptor </span>=<span style="color: rgba(0, 0, 0, 1)"> NULL,
</span><span style="color: rgba(0, 0, 255, 1)">#else</span><span style="color: rgba(0, 0, 0, 1)">
            .<span style="background-color: rgba(0, 255, 0, 1)">configuration_descriptor </span></span><span style="background-color: rgba(0, 255, 0, 1)">=</span><span style="color: rgba(0, 0, 0, 1)"><span style="background-color: rgba(0, 255, 0, 1)"> hid_configuration_descriptor</span>,
</span><span style="color: rgba(0, 0, 255, 1)">#endif</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TUD_OPT_HIGH_SPEED</span><span style="color: rgba(0, 0, 0, 1)">
        };</span></pre>
</div>
<p>然后调用&nbsp;tinyusb_driver_install 函数，完成初始化。</p>
<div class="cnblogs_code">
<pre>    esp_err_t result =<span style="color: rgba(0, 0, 0, 1)"> ESP_OK;
    result </span>= tinyusb_driver_install(&amp;<span style="color: rgba(0, 0, 0, 1)">tucfg);
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 检查一下是否初始化成功</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span> (result !=<span style="color: rgba(0, 0, 0, 1)"> ESP_OK)
    {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> ESP_LOGE("tusb", "tusb 初始化失败，主任务退出");
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> return;</span>
        esp_restart();     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 重启</span>
    }</pre>
</div>
<p>初始化已经完成，现在可以向主机发送鼠标操作了。发送鼠标信号用的是以下函数：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">bool</span> tud_hid_mouse_report(uint8_t report_id, uint8_t buttons, int8_t x, int8_t y, int8_t vertical, int8_t horizontal)</pre>
</div>
<p>各参数含义如下：</p>
<p><strong><span style="color: rgba(0, 0, 255, 1)">report_id：</span></strong>报数据的ID，这个ID由前面的 retport 描述符指定，请回看上面的代码，即&nbsp;hid_report_descriptor 变量。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">const</span> uint8_t hid_report_descriptor[] =<span style="color: rgba(0, 0, 0, 1)"> {
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 如果你要模拟键盘，请取消下面的注释
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TUD_HID_REPORT_DESC_KEYBOARD(HID_REPORT_ID(<span style="background-color: rgba(0, 255, 0, 1)"><strong>HID_ITF_PROTOCOL_KEYBOARD</strong></span>)),</span>
    TUD_HID_REPORT_DESC_MOUSE(HID_REPORT_ID(<strong><span style="background-color: rgba(0, 255, 0, 1)">HID_ITF_PROTOCOL_MOUSE</span></strong>))};</pre>
</div>
<p>这里已经指定了鼠标的 report ID 是 HID_ITF_PROTOCOL_MOUSE，键盘的 report ID 是 HID_ITF_PROTOCOL_KEYBOARD。因此，在调用 tud_hid_mouse_report 函数时，report_id 参数的值就是 HID_ITF_PROTOCOL_MOUSE。</p>
<p><strong><span style="color: rgba(0, 0, 255, 1)">buttons：</span></strong>鼠标是否按下特定的键，参数值来自以下枚举类型：</p>
<div class="cnblogs_code">
<pre>typedef <span style="color: rgba(0, 0, 255, 1)">enum</span><span style="color: rgba(0, 0, 0, 1)">
{
  MOUSE_BUTTON_LEFT     </span>= TU_BIT(<span style="color: rgba(128, 0, 128, 1)">0</span>), <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt; Left button
</span><span style="color: rgba(0, 128, 0, 1)">  MOUSE_BUTTON_RIGHT    = TU_BIT(1), </span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt; Right button
</span><span style="color: rgba(0, 128, 0, 1)">  MOUSE_BUTTON_MIDDLE   = TU_BIT(2), </span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt; Middle button
</span><span style="color: rgba(0, 128, 0, 1)">  MOUSE_BUTTON_BACKWARD = TU_BIT(3), </span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt; Backward button,
</span><span style="color: rgba(0, 128, 0, 1)">  MOUSE_BUTTON_FORWARD  = TU_BIT(4), </span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt; Forward button,
</span><span style="color: rgba(0, 128, 0, 1)">}hid_mouse_button_bm_t;</span></pre>
</div>
<p><strong><span style="color: rgba(0, 0, 255, 1)">x、y：</span></strong>鼠标移动的坐标量（相对），正值表示向右/向下移动，负值表示鼠标向左/上移动。</p>
<div><strong><span style="color: rgba(0, 0, 255, 1)">vertical：</span></strong>垂直滚动量，一般就是鼠标滚轮的滚动量。</div>
<div>
<div><strong><span style="color: rgba(0, 0, 255, 1)">horizontal：</span></strong>水平滚动的量（有时候会用到）。</div>
</div>
<p>为了让示例简单好懂，咱们在一个循环中先让鼠标向右下角移动，随后向左上角移动相同的次数。</p>
<div class="cnblogs_code">
<pre>    int8_t move_dis = <span style="color: rgba(128, 0, 128, 1)">5</span>;        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 每次移动的量</span>
    <span style="color: rgba(0, 0, 255, 1)">const</span> uint16_t steps = <span style="color: rgba(128, 0, 128, 1)">300</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 移动多少步</span>
    <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">int</span> step_delay = <span style="color: rgba(128, 0, 128, 1)">20</span>;  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 每一次移动后的延时</span>
<span style="color: rgba(0, 0, 0, 1)">    uint16_t n;
    </span><span style="color: rgba(0, 0, 255, 1)">while</span> (<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (<strong><em><span style="background-color: rgba(0, 255, 0, 1)">tud_mounted()</span></em></strong>)
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 正向移动</span>
            <span style="color: rgba(0, 0, 255, 1)">for</span> (n = <span style="color: rgba(128, 0, 128, 1)">0</span>; n &lt; steps; n++<span style="color: rgba(0, 0, 0, 1)">)
            {
                tud_hid_mouse_report(
                    HID_ITF_PROTOCOL_MOUSE, </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 报告ID</span>
                    <span style="color: rgba(128, 0, 128, 1)">0</span>,                      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 无任何键按下</span>
                    move_dis,               <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> X坐标上的移动量</span>
                    move_dis,               <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Y坐标上的移动量</span>
                    <span style="color: rgba(128, 0, 128, 1)">0</span>,                      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 无垂直滚动</span>
                    <span style="color: rgba(128, 0, 128, 1)">0</span>                       <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 无水平滚动</span>
<span style="color: rgba(0, 0, 0, 1)">                );
                vTaskDelay(pdMS_TO_TICKS(step_delay));
            }
            vTaskDelay(pdMS_TO_TICKS(</span><span style="color: rgba(128, 0, 128, 1)">800</span><span style="color: rgba(0, 0, 0, 1)">));
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 反向移动</span>
            <span style="color: rgba(0, 0, 255, 1)">for</span> (n = <span style="color: rgba(128, 0, 128, 1)">0</span>; n &lt; steps; n++<span style="color: rgba(0, 0, 0, 1)">)
            {
                tud_hid_mouse_report(
                    HID_ITF_PROTOCOL_MOUSE,
                    </span><span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">,
                    </span>-<span style="color: rgba(0, 0, 0, 1)">move_dis,
                    </span>-<span style="color: rgba(0, 0, 0, 1)">move_dis,
                    </span><span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">,
                    </span><span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">);
                vTaskDelay(pdMS_TO_TICKS(step_delay));
            }
        }
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 等待一段时间</span>
        vTaskDelay(pdMS_TO_TICKS(<span style="color: rgba(128, 0, 128, 1)">2500</span><span style="color: rgba(0, 0, 0, 1)">));
    }</span></pre>
</div>
<p>有一点很重要：每轮循环在移动鼠标前，一定要访问一下 tud_mounted 函数，确保它返回 true 才能发送 report 数据，否则会导致电脑识别不到鼠标。</p>
<p>使用 Linux 的话，在烧录时会有个 50 米大天坑。不填这个坑你是无法用 UART 或 USB JTag 来烧录的。就算你把当前用户添加到 dialout 分组也解决不了。系统因缺少 openOCD 的 udev rule 文件，openOCD 将无法连接。</p>
<p>解决：先找到你随 esp idf 一同安装的 openOCD 目录（在你指定的 IDF_TOOLS_PATH 下面），找到&nbsp;tools/openocd-esp32/v0.12.0-esp32-&lt;版本号&gt;/openocd-esp32/share/openocd/contrib 目录，里面有个&nbsp;60-openocd.rules 文件。把它复制到 /etc/udev/rules.d 目录下。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">sudo</span> <span style="color: rgba(0, 0, 255, 1)">cp</span> &lt;<span style="color: rgba(128, 0, 128, 1)">60</span>-openocd.rules文件路径&gt; /etc/udev/rules.d/</pre>
</div>
<p>重启系统后，就能烧录了。</p>
<p>&nbsp;</p>
<p>使用 USB 模拟键鼠后，你的 ESP32 板子就不能再使用 USB 口来查看日志了，而且这个玩法似乎用处不大，毕竟你不太可能真拿它来当鼠标用。不过，如果你的开发板带陀螺仪的话，那倒可以做成姿态鼠标，通过在空中旋转来移动鼠标。对，就是所谓的“空中飞鼠”。可能，也许，或者用蓝牙来模拟键鼠会好一些，不占用 USB 口，电池供电时不需要数据线。</p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.3961541528136574" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-04 12:43">2025-04-04 12:43</span>&nbsp;
<a href="https://www.cnblogs.com/tcjiaan">东邪独孤</a>&nbsp;
阅读(<span id="post_view_count">124</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18796544" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18796544);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18796544', targetLink: 'https://www.cnblogs.com/tcjiaan/p/18796544', title: '【ESP32】两种模拟 USB 鼠标的方法' })">举报</a>
</div>
        