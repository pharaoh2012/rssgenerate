
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18832119" title="发布于 2025-04-18 09:28">
    <span role="heading" aria-level="2">『Plotly实战指南』--布局基础篇</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在数据分析与可视化领域，一张优秀的图表不仅需要准确呈现数据，更应通过<strong>合理的布局</strong>提升信息传达效率，增强专业性和可读性。</p>
<p><code>Plotly</code>作为一款强大的Python可视化库，提供了丰富的布局定制功能，帮助我们实现这一目标。</p>
<p>本文将从基础元素设置到坐标轴深度定制，结合代码与场景案例，来介绍标签与坐标轴的核心布局方法，从而打造出专业且易读的图表。</p>
<h1 id="1-基本布局设置">1. 基本布局设置</h1>
<h2 id="11-标题设置与样式">1.1. 标题设置与样式</h2>
<p><strong>标题</strong>是图表的重要组成部分，它能够快速传达图表的核心内容。</p>
<p>在<code>Plotly</code>中，我们可以通过<code>title</code>属性设置图表的标题，同时利用<code>title.text</code>属性添加副标题，实现多行文本显示。</p>
<pre><code class="language-python">import plotly.graph_objects as go

fig = go.Figure(data=[go.Scatter(x=[1, 2, 3], y=[1, 3, 1])])
fig.update_layout(
    title="主标题&lt;br&gt;&lt;span style='font-size:0.8em;color:gray'&gt;副标题&lt;/span&gt;"
)
fig.show()
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202504/83005-20250418091745161-695529804.png" alt="" loading="lazy"></p>
<p>在样式调整方面，<code>Plotly</code>提供了多种参数供我们定制标题的字体、字号、颜色以及位置。</p>
<ul>
<li><code>font_family</code>参数用于指定字体类型</li>
<li><code>font_size</code>控制字号大小</li>
<li><code>font_color</code>设置字体颜色</li>
<li><code>x</code>和<code>xanchor</code>参数可以调整标题的水平位置，例如居中、居右等</li>
</ul>
<pre><code class="language-python">fig.update_layout(
    title={
        "text": "主标题&lt;br&gt;&lt;span style='font-size:0.8em;color:gray'&gt;副标题&lt;/span&gt;",
        "font": {"family": "Arial", "size": 24, "color": "black"},
        "x": 0.5,
        "xanchor": "center",
    }
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202504/83005-20250418091745161-723134640.png" alt="" loading="lazy"></p>
<h2 id="12-坐标轴标签与格式">1.2. 坐标轴标签与格式</h2>
<p><strong>坐标轴标签</strong>是图表中不可或缺的元素，它帮助我们理解数据的含义。</p>
<p>在<code>Plotly</code>中，通过<code>xaxis_title</code>和  <code>yaxis_title</code>  属性，我们可以轻松添加<strong>X轴</strong>和<strong>Y轴</strong>的标签。</p>
<pre><code class="language-python">fig.update_layout(
    xaxis_title="X轴标签",
    yaxis_title="Y轴标签"
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202504/83005-20250418091745188-1904468553.png" alt="" loading="lazy"></p>
<p>为了优化标签的显示效果，<code>Plotly</code>提供了多种格式设置选项。</p>
<p><code>tickangle</code>参数用于控制标签的字体旋转角度，避免标签之间相互重叠。</p>
<p>通过在标签文本中添加换行符<code>\n</code>，我们可以实现多行文本显示。</p>
<p>此外，<code>title_standoff</code>参数可以调整标签与轴线之间的距离，使布局更加美观。</p>
<pre><code class="language-python">fig.update_layout(
    xaxis={
        "title": "X轴标签",
        "tickangle": 45,
        "title_standoff": 25
    },
    yaxis={
        "title": "Y轴标签",
        "tickangle": -45,
        "title_standoff": 25
    }
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202504/83005-20250418091745197-686270048.png" alt="" loading="lazy"></p>
<h1 id="2-坐标轴设置">2. 坐标轴设置</h1>
<h2 id="21-坐标轴范围">2.1. 坐标轴范围</h2>
<p>在某些情况下，<strong>自动缩放</strong>的坐标轴范围可能无法满足我们的需求。</p>
<p><code>Plotly</code>允许我们通过<code>range</code>参数手动设置坐标轴的显示区间。</p>
<p>例如，将<strong>Y轴</strong>范围固定在<code>[0, 100]</code>，可以更清晰地展示数据的变化趋势。</p>
<pre><code class="language-python">fig.update_layout(
    yaxis_range=[0, 100]
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202504/83005-20250418091745186-1702970120.png" alt="" loading="lazy"></p>
<p>为了关闭自动缩放，可以将<code>autorange</code>参数设置为<code>False</code>，避免数据被截断。</p>
<p>在<strong>双Y轴</strong>场景下，我们还可以为次坐标轴（<code>yaxis2</code>）独立设置范围，满足不同数据的展示需求。</p>
<pre><code class="language-python">import plotly.graph_objects as go

# 创建第一个 Y 轴的折线图
fig = go.Figure()
fig.add_trace(go.Scatter(
    x=[1, 2,3],
    y=[1,3,1],
    name='Y1 数据',
    yaxis='y1'
))

# 创建第二个 Y 轴的折线图
fig.add_trace(go.Scatter(
    x=[1,2,3],
    y=[4,3,10],
    name='Y2 数据',
    yaxis='y2'
))
fig.update_layout(
    yaxis={
        "range": [0, 100],
        "autorange": False
    },
    yaxis2={
        "range": [0, 50],
        "autorange": False,
        "overlaying": "y",
        "side": "right"
    }
)

fig.show()
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202504/83005-20250418091745201-920841315.png" alt="" loading="lazy"></p>
<h2 id="22-坐标轴刻度与标签">2.2. 坐标轴刻度与标签</h2>
<p><strong>刻度</strong>是坐标轴的重要组成部分，合理的刻度间隔和标签格式能够帮助我们更好地理解数据。</p>
<p>通过<code>dtick</code>参数，我们可以强制设置主刻度的间隔，</p>
<p>例如<strong>X轴</strong>改成每<strong>1单位</strong>一个刻度，<strong>Y轴</strong>改成每<strong>10单位</strong>一个刻度。</p>
<pre><code class="language-python">fig.update_layout(
    xaxis={
        "dtick": 1
    },
    yaxis={
        "dtick": 10
    }
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202504/83005-20250418091745384-2041927736.png" alt="" loading="lazy"></p>
<p>此外，刻度的调整Plotly还提供了很多参数：</p>
<ul>
<li><code>tick0</code>参数用于设置起始刻度的位置，可以根据需要对齐特定数值。</li>
<li><code>tickformat</code>参数可以将日期刻度转换为<code>YYYY-MM</code>的格式，比如<code>"%Y-%m"</code></li>
<li><code>tickformat</code>参数设置小数位数，比如，<code>".2f"</code>保留数值的两位小数</li>
<li><code>showticklabels</code>参数控制是否隐藏刻度标签</li>
<li><code>ticktext</code>参数替换特定的刻度标签文本</li>
</ul>
<p>在实际应用中，根据不同的场景，我们可以灵活定制刻度间隔和标签格式。</p>
<p>例如，在<strong>股价图</strong>中，固定Y轴范围可以突出价格波动，同时将X轴刻度按交易日期间隔显示，使图表更加直观易读。</p>
<p>在<strong>地图图表</strong>中，调整经纬度刻度间隔可以适配地理坐标，提高地图的可读性。</p>
<h1 id="3-总结">3. 总结</h1>
<p>本文主要介绍了布局优化对图表效果的关键影响，合理的布局能够使信息层级清晰，提升图表的样式美观度和交互友好性。</p>
<p>在实际操作中，对于数据密集型图表，我们应优先保证刻度的可读性，避免过度设计。</p>
<p>同时，建议采用<code>fig.update_layout()</code>方法统一调整多个布局参数，提高代码的可维护性。</p>
<p>最后，结合<code>fig.show()</code>方法预览图表效果，并根据实际需求迭代调整布局参数，以达到最佳的可视化效果。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.8654914322974537" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-18 09:29">2025-04-18 09:28</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">105</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18832119);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18832119', targetLink: 'https://www.cnblogs.com/wang_yb/p/18832119', title: '『Plotly实战指南』--布局基础篇' })">举报</a>
</div>
        