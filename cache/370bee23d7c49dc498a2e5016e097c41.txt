
<table cellspacing="0" cellpadding="0"><tbody><tr><td class="t_f" id="postmessage_52299962">
首先安装好python安装包<br>
能勾选功能就勾选<br>
模块包可以不用全需求（你未必全用的着）<br>
<br>
算了还是直接上链接<br>
【【Python最新教程】怎么正确下载安装Python+Pycharm？如何配置环境？（新手一条龙教程！）附安装包+激活码，python安装、pycharm安装-哔哩哔哩】 https://b23.tv/cgS2klv<br>
<br>
使用嘛<br>
<br>
0基础<br>
print(输出使用)<br>
直接打印输出<br>
<br>
a=(哈哈哈哈)<br>
print(a)<br>
<br>
#这里就可以直接打印输出显示 哈哈哈<br>
<br>
<div align="center"></div>基础门槛级别<br>
调用模块使用（没有的需要直接PiP下载）（或者在清华源下载）<br>
<div style="padding:15px 0;"><div style="font-size:12px;">[Python] <em class="viewsource" style="cursor:pointer;font-size:12px;color:#369 !important;">纯文本查看</em> <em class="copycode" style="cursor:pointer;font-size:12px;color:#369 !important;">复制代码</em></div><pre class="brush: python; gutter: true">import math#导入数学模块

a=float(input("请输入一个数")#a的定值
print("计算过程")#输出计算过程
x=1.0#x的定值
while abs(x*x-a)&gt;a*1E-6:#|x^2-2|&gt;a*10^-6
     x=(x+a/x)/2
     print(x,"与",a/x,"之间")#输出结果
print("我们算出来的平方根",x)#最后一次结果
print("系统算出来在平方根",math.sqrt(a))#系统的结果
</pre></div><br>
<br>
再是使用循环语句<br>
在没有使用循环程序情况下（只有一次运行结果）<br>
<div style="padding:15px 0;"><div style="font-size:12px;">[Python] <em class="viewsource" style="cursor:pointer;font-size:12px;color:#369 !important;">纯文本查看</em> <em class="copycode" style="cursor:pointer;font-size:12px;color:#369 !important;">复制代码</em></div><pre class="brush: python; gutter: true">try:
    a=int(input("亲输入数字为整数："))
    print(100//a)
except ValueError:
    print("输入数字计算结果错误")
except Exception as err:
    print(err)
finally:
    print('end')
</pre></div><br>
<br>
if（定义满足唯一条件，只有是否（是否满足），当满足唯一条件，才能显示正确（是）的答案，其他都会显示（否）<br>
<br>
<br>
for（定义循环几次，运行几次）<br>
<div style="padding:15px 0;"><div style="font-size:12px;">[Python] <em class="viewsource" style="cursor:pointer;font-size:12px;color:#369 !important;">纯文本查看</em> <em class="copycode" style="cursor:pointer;font-size:12px;color:#369 !important;">复制代码</em></div><pre class="brush: python; gutter: true">for i in range(6):
  try:
    a=int(input("亲输入数字为整数："))
    print(100//a)
  except ValueError:
    print("输入数字计算结果错误")
  except Exception as err:
    print(err)
  finally:
    print('end')
</pre></div><br>
<br>
well（定义循环几次条件，我参考是无限循环条件）<br>
<div style="padding:15px 0;"><div style="font-size:12px;">[Python] <em class="viewsource" style="cursor:pointer;font-size:12px;color:#369 !important;">纯文本查看</em> <em class="copycode" style="cursor:pointer;font-size:12px;color:#369 !important;">复制代码</em></div><pre class="brush: python; gutter: true">while True:
  try:
    a=int(input("亲输入数字为整数："))
    print(100//a)
  except ValueError:
    print("输入数字计算结果错误")
  except Exception as err:
    print(err)
  finally:
    print('end')
</pre></div><br>
<br>
在这里是不是已经会了，基础的使用（其实剩余部分也是一样的）<br>
大体框架<br>
1.导入模块<br>
2.看需求定义函数<br>
3.输出结果运行<br>
（不是每一个都需要print）<br>
<br>
<br>
再上传几个代码，基础篇章结束<br>
爱心<br>
<div style="padding:15px 0;"><div style="font-size:12px;">[Python] <em class="viewsource" style="cursor:pointer;font-size:12px;color:#369 !important;">纯文本查看</em> <em class="copycode" style="cursor:pointer;font-size:12px;color:#369 !important;">复制代码</em></div><pre class="brush: python; gutter: true">import tkinter as tk
import random
from math import sin, cos, pi, log
from tkinter.constants import*

width = 888
height = 500
heartx = width / 2
hearty = height / 2
side = 11
heartcolor = "pink"  # 爱心颜色，可修改

class Heart:
    def __init__(self, generate_frame=20):
        self._points = set()  # 原始爱心坐标集合
        self._edge_diffusion_points = set()  # 边缘扩散效果点坐标集合
        self._center_diffusion_points = set()  # 中心扩散效果点坐标集合
        self.all_points = {}  # 每帧动态点坐标
        self.build(2000)
        self.random_halo = 1000
        self.generate_frame = generate_frame
        for frame in range(generate_frame):
            self.calc(frame)

    def build(self, number):
        for _ in range(number):
            t = random.uniform(0, 2 * pi)
            x, y = self.heart_function(t)  # 使用 self.heart_function 调用静态方法  # 修复点1
            self._points.add((x, y))
        for _x, _y in list(self._points):
            for _ in range(3):
                x, y = self.scatter_inside(_x, _y, 0.05)  # 使用 self.scatter_inside 调用静态方法  # 修复点2
                self._edge_diffusion_points.add((x, y))
        point_list = list(self._points)
        for _ in range(4000):
            x, y = random.choice(point_list)
            x, y = self.scatter_inside(x, y, 0.17)  # 使用 self.scatter_inside 调用静态方法  # 修复点3
            self._center_diffusion_points.add((x, y))

    @staticmethod
    def calc_position(x, y, ratio):
        force = 1 / (((x - heartx) ** 2 + (y - hearty) ** 2) ** 0.520)  # 魔法参数
        dx = ratio * force * (x - heartx) + random.randint(-1, 1)
        dy = ratio * force * (y - hearty) + random.randint(-1, 1)
        return x - dx, y - dy

    def calc(self, generate_frame):
        ratio = 10 * self.curve(generate_frame / 10 * pi)  # 使用 self.curve 调用静态方法  # 修复点4
        halo_radius = int(4 + 6 * (1 + self.curve(generate_frame / 10 * pi)))  # 使用 self.curve 调用静态方法  # 修复点5
        halo_number = int(3000 + 4000 * abs(self.curve(generate_frame / 10 * pi) ** 2))  # 使用 self.curve 调用静态方法  # 修复点6
        all_points = []
        heart_halo_point = set()
        for _ in range(halo_number):
            t = random.uniform(0, 2 * pi)
            x, y = self.heart_function(t, shrink_ratio=11.6)  # 使用 self.heart_function 调用静态方法  # 修复点7
            x, y = self.shrink(x, y, halo_radius)  # 使用 self.shrink 调用静态方法  # 修复点8
            if (x, y) not in heart_halo_point:
                heart_halo_point.add((x, y))
                x += random.randint(-14, 14)
                y += random.randint(-14, 14)
                size = random.choice((1, 2, 2))
                all_points.append((x, y, size))
        for x, y in self._points:
            x, y = self.calc_position(x, y, ratio)
            size = random.randint(1, 3)
            all_points.append((x, y, size))
        for x, y in self._edge_diffusion_points:
            x, y = self.calc_position(x, y, ratio)
            size = random.randint(1, 2)
            all_points.append((x, y, size))
        for x, y in self._center_diffusion_points:
            x, y = self.calc_position(x, y, ratio)
            size = random.randint(1, 2)
            all_points.append((x, y, size))
        self.all_points[generate_frame] = all_points

    def render(self, render_canvas, render_frame):
        for x, y, size in self.all_points[render_frame % self.generate_frame]:
            render_canvas.create_rectangle(x, y, x + size, y + size, width=0, fill=heartcolor)

    @staticmethod
    def heart_function(t, shrink_ratio: float = side):
        x = 16 * (sin(t) ** 3)
        y = -(13 * cos(t) - 5 * cos(2 * t) - 2 * cos(3 * t) - cos(4 * t))
        x *= shrink_ratio
        y *= shrink_ratio
        x += heartx
        y += hearty
        return int(x), int(y)

    @staticmethod
    def scatter_inside(x, y, beta=0.15):
        ratio_x = - beta * log(random.random())
        ratio_y = - beta * log(random.random())
        dx = ratio_x * (x - heartx)
        dy = ratio_y * (y - hearty)
        return x - dx, y - dy

    @staticmethod
    def shrink(x, y, ratio):
        force = -1 / (((x - heartx) ** 2 + (y - hearty) ** 2) ** 0.6)
        dx = ratio * force * (x - heartx)
        dy = ratio * force * (y - hearty)
        return x - dx, y - dy

    @staticmethod
    def curve(p):
        return 2 * (2 * sin(4 * p)) / (2 * pi)

def draw(main: tk.Tk, render_canvas: tk.Canvas, render_heart: Heart, render_frame=0):
    render_canvas.delete('all')
    render_heart.render(render_canvas, render_frame)
    main.after(160, draw, main, render_canvas, render_heart, render_frame + 1)

def love():
    root = tk.Tk()
    screenwidth = root.winfo_screenwidth()
    screenheight = root.winfo_screenheight()
    x = (screenwidth - width) // 2
    y = (screenheight - height) // 2 - 66
    root.geometry("%dx%d+%d+%d" % (width, height, x, y))
    root.title("标题名字")
    canvas = tk.Canvas(root, bg='black', height=height, width=width)
    canvas.pack()
    heart = Heart()
    draw(root, canvas, heart)
    tk.Label(root, text="I Love YOU!", bg="black", fg="pink", font="Helvetic 25 bold").place(relx=.5, rely=.5, anchor=CENTER)
    root.mainloop()

if __name__ == '__main__':
    love()
# 错误点1：
# 原代码：x, y = heart_function(t)
# 修改后：x, y = self.heart_function(t)
# 原因：heart_function 是一个静态方法，需要通过类实例来调用。
# 错误点2：
# 原代码：x, y = scatter_inside(_x, _y, 0.05)
# 修改后：x, y = self.scatter_inside(_x, _y, 0.05)
# 原因：scatter_inside 是一个静态方法，需要通过类实例来调用。
# 错误点3：
# 原代码：x, y = scatter_inside(x, y, 0.17)
# 修改后：x, y = self.scatter_inside(x, y, 0.17)
# 原因：scatter_inside 是一个静态方法，需要通过类实例来调用。
# 错误点4：
# 原代码：ratio = 10 * curve(generate_frame / 10 * pi)
# 修改后：ratio = 10 * self.curve(generate_frame / 10 * pi)
# 原因：curve 是一个静态方法，需要通过类实例来调用。
# 错误点5：
# 原代码：halo_radius = int(4 + 6 * (1 + curve(generate_frame / 10 * pi)))
# 修改后：halo_radius = int(4 + 6 * (1 + self.curve(generate_frame / 10 * pi)))
# 原因：curve 是一个静态方法，需要通过类实例来调用。
# 错误点6：
# 原代码：halo_number = int(3000 + 4000 * abs(curve(generate_frame / 10 * pi) ** 2))
# 修改后：halo_number = int(3000 + 4000 * abs(self.curve(generate_frame / 10 * pi) ** 2))
# 原因：curve 是一个静态方法，需要通过类实例来调用。
# 错误点7：
# 原代码：x, y = heart_function(t, shrink_ratio=11.6)
# 修改后：x, y = self.heart_function(t, shrink_ratio=11.6)
# 原因：heart_function 是一个静态方法，需要通过类实例来调用。
# 错误点8：
# 原代码：x, y = shrink(x, y, halo_radius)
# 修改后：x, y = self.shrink(x, y, halo_radius)
# 原因：shrink 是一个静态方法，需要通过类实例来调用。
# 错误点9
# 代码缩进修正：
# 将 for frame in range(generate_frame):
# 的缩进调整为与 self.generate_frame = generate_frame 一致</pre></div><br>
<br>
九九乘法表<br>
<div style="padding:15px 0;"><div style="font-size:12px;">[Python] <em class="viewsource" style="cursor:pointer;font-size:12px;color:#369 !important;">纯文本查看</em> <em class="copycode" style="cursor:pointer;font-size:12px;color:#369 !important;">复制代码</em></div><pre class="brush: python; gutter: true">def print_multiplication_table():
    for i in range(1, 10):
        for j in range(1, i + 1):
            print(f"{i} * {j} = {i * j}", end="\t")
        print()  # 换行

def main():
    print("九九乘法表：")
    print_multiplication_table()

if __name__ == "__main__":
    main()
</pre></div><br>
<br>
等空了再讲解一下进阶版的<br>
以上只是个人经验，欢迎各位大佬点评点评，学习Python纯属爱好<br>
</td></tr></tbody></table>


