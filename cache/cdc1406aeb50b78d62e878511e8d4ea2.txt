
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/linx/p/18827996" title="发布于 2025-04-16 09:15">
    <span role="heading" aria-level="2">Web前端入门第 35 问：CSS 细说 flex 弹性盒子布局（多图）</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>flex 作为现代布局方案中最常用的手段，有必要拉出来细说。</p>
<h2 id="flex-相关的-css-属性">flex 相关的 CSS 属性</h2>
<h3 id="容器父元素相关的-css-属性">容器（父元素）相关的 CSS 属性</h3>
<p>以下的 CSS 属性，在 flex 布局中需喂给父元素，设置 flex 布局中的盒子相关样式。</p>
<p><code>display</code> 启用 flex 布局<br>
<code>flex-direction</code> 主轴方向<br>
<code>flex-wrap</code> 控制子元素是否换行<br>
<code>flex-flow</code> 简写属性（flex-direction + flex-wrap）<br>
<code>justify-content</code> 主轴对齐方式<br>
<code>align-items</code> 交叉轴对齐方式（单行）<br>
<code>align-content</code> 交叉轴对齐方式（多行）<br>
<code>gap</code> 子元素间距</p>
<h3 id="子元素相关的-css-属性">子元素相关的 CSS 属性</h3>
<p>以下 CSS 属性，在 flex 布局中喂给子元素，用于设置单个子元素的特殊样式。</p>
<p><code>order</code> 排列顺序<br>
<code>flex-grow</code> 放大比例<br>
<code>flex-shrink</code> 缩小比例<br>
<code>flex-basis</code> 初始大小<br>
<code>flex</code> 简写属性（flex-grow + flex-shrink + flex-basis）<br>
<code>align-self</code> 覆盖容器的 align-items</p>
<h2 id="开篇">开篇</h2>
<p>flex 多用于一维布局，即横向或纵向排列，二维布局是 flex 短板，也不是说不能用，只是没那么灵活。</p>
<p>flex 布局第一步，必须设置容器的 display 属性为 flex 或 inline-flex，这样子元素才会按照弹性盒子的方式进行排列。</p>
<h2 id="容器">容器</h2>
<h3 id="flex-与-inline-flex-的区别">flex 与 inline-flex 的区别</h3>
<p><code>display: flex</code> 是让容器显示为块级弹性盒子独占一行，而 <code>display: inline-flex</code> 是让容器显示为内联块弹性盒子，可以与其他元素并排显示。</p>
<p>它们与 <code>display: block</code> 和 <code>display: inline-block</code> 类似，都是块级元素与内联块元素区别。</p>
<p><strong><code>display: flex</code></strong></p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250416091221504-189799017.png" alt="" loading="lazy"></p>
<p><strong><code>display: inline-flex</code></strong></p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250416091227548-576302711.png" alt="" loading="lazy"></p>
<h3 id="flex-direction-控制子元素排列方向">flex-direction 控制子元素排列方向</h3>
<p>默认情况下，flex 布局是横向排列的，即子元素从左到右排列（需特别注意，如果设置了 <code>direction: ltr;</code> ，则显示方向相反）。</p>
<p>可通过 <code>flex-direction</code> 控制子元素排列方向。不同值的效果区别如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250416091234909-760342900.png" alt="" loading="lazy"></p>
<p><code>reverse</code> 都表示反向排列。</p>
<h3 id="flex-wrap-控制子元素换行">flex-wrap 控制子元素换行</h3>
<p>默认情况 flex 子元素在超出容器时，会被挤压到同一行里面显示，如果需要元素换行，可派 <code>flex-wrap</code> 上场。不同值区别：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250416091240314-1197406462.png" alt="" loading="lazy"></p>
<p><code>wrap-reverse</code> 是 <code>wrap</code> 的反向版本，会将行的顺序反向显示。</p>
<h3 id="flex-flow">flex-flow</h3>
<p>简写属性，可单独设置某一个值，也可同时设置 <code>flex-direction</code> 和 <code>flex-wrap</code>，值的顺序无影响，<code>flex-direction</code> 和 <code>flex-wrap</code> 都能放在第一位。</p>
<p>使用 <code>flex-flow</code> 设置 <code>flex-direction</code>：</p>
<pre><code class="language-css">.box {
  flex-flow: row;
  flex-flow: column;
}
</code></pre>
<p>使用 <code>flex-flow</code> 设置 <code>flex-wrap</code>：</p>
<pre><code class="language-css">.box {
  flex-flow: nowrap;
  flex-flow: wrap;
}
</code></pre>
<p>使用 <code>flex-flow</code> 同时设置 <code>flex-direction</code> 和 <code>flex-wrap</code>：</p>
<pre><code class="language-css">.box {
  flex-flow: row nowrap;
  flex-flow: wrap column; /* 顺序不影响渲染 */
  flex-flow: column-reverse wrap-reverse;
}
</code></pre>
<h3 id="justify-content-主轴对齐方式">justify-content 主轴对齐方式</h3>
<p>3 组看起来没啥区别的值 [<code>start</code>, <code>end</code>] 、 [<code>flex-start</code>, <code>flex-end</code>] 、 [<code>left</code>, <code>right</code>]</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250416091248267-2063844746.png" alt="" loading="lazy"></p>
<p>添加 <code>direction: rtl;</code> 之后，可以看出 left 、 right 区别：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250416091253061-1286845145.png" alt="" loading="lazy"></p>
<p>[<code>start</code>, <code>end</code>] 和 [<code>flex-start</code>, <code>flex-end</code>] 没找到有啥区别，可能唯一不同 [<code>start</code>, <code>end</code>] 是后来新增的 CSS 规则，由于规范较新，Chrome 2021年之后才支持。</p>
<p><strong>其他值区别：</strong></p>
<pre><code class="language-css">justify-content: center; /* 居中对齐 */
justify-content: space-between; /* 两边留白 */
justify-content: space-around; /* 每个子元素左右间距都相同 */
justify-content: space-evenly; /* 每个留白的空间等分相同 */
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250416091259696-501079019.png" alt="" loading="lazy"></p>
<p><code>stretch</code> 也是看起来跟默认值没啥区别~~</p>
<p><strong>safe 与 unsafe</strong></p>
<p>按照 MDN 说法：</p>
<p><code>safe</code> 如果元素溢出对齐容器，则元素将按照对齐模式为 start 进行对齐。所期望的对齐将不会被实现。<br>
<code>unsafe</code> 即使元素溢出对齐容器，也会实现所需的对齐方式。与 safe 不同，safe 会忽略所要求的对齐方式以防止溢出。</p>
<p>使用方法：</p>
<pre><code class="language-css">justify-content: safe center;
justify-content: unsafe center;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250416091307180-781713453.png" alt="" loading="lazy"></p>
<h3 id="align-items-交叉轴对齐方式单行">align-items 交叉轴对齐方式（单行）</h3>
<p>定位对齐几种方式：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250416091312773-560581772.png" alt="" loading="lazy"></p>
<p>跟 justify-content 一样，几个 start 和 end 没找到有啥区别~~</p>
<p>其他几个值：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250416091319653-1864949601.png" alt="" loading="lazy"></p>
<p>设置 <code>stretch</code> 会把未设置高度的元素拉伸撑满容器。 <code>safe</code> 和 <code>unsafe</code> 与 <code>justify-content</code> 一样</p>
<h3 id="align-content-交叉轴对齐方式多行">align-content 交叉轴对齐方式（多行）</h3>
<p>与 justify-content 属性一样，只是对齐方式换成了垂直方向。</p>
<p>就不再一一列举了，直接看几个常用的属性：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250416091325285-1380588222.png" alt="" loading="lazy"></p>
<h3 id="gap-子元素间距">gap 子元素间距</h3>
<p><code>gap</code> 用于设置子元素水平间距和垂直间距，可将任何 CSS 支持的单位值喂给它，比如：<code>10px</code>、<code>10%</code>、<code>10em</code>、<code>10rem</code>、<code>10vw</code>、<code>10vh</code>。</p>
<pre><code class="language-css">gap: 20px; /* 等价于 gap: 20px 20px; */
gap: 50%; /* 等价于 gap: 50% 50%; 表示相对于容器大小的宽度50% 高度50% */
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250416091330972-1574084117.png" alt="" loading="lazy"></p>
<h2 id="子元素">子元素</h2>
<h3 id="order-排列顺序">order 排列顺序</h3>
<p>可使用 <code>order</code> 控制元素顺序：</p>
<p>值越小，越靠前，默认值是 0，可为负数。</p>
<pre><code class="language-css">.box .item:nth-child(1) {
  order: 3;
}
.box .item:nth-child(2) {
  order: 1;
}
.box .item:nth-child(3) {
  order: -1;
}
</code></pre>
<p>显示效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250416091338376-1542219398.png" alt="" loading="lazy"></p>
<h3 id="flex-grow-控制元素放大比例">flex-grow 控制元素放大比例</h3>
<p>默认值为 <code>0</code> 元素不会放大，可通过设置 <code>flex-grow</code> 控制放大系数，不可为负数。</p>
<p>其放大比例是所有子元素 <code>flex-grow</code> 值相加平分剩余空间，比如：</p>
<p>所有子元素都是 1，那就是所有子元素平分。<br>
第一个子元素是 1，那就是第一个元素占剩余空间的 100%。<br>
第一个子元素是 1，第二个子元素是 2，那么第一个子元素占 1 等份，第二个子元素占 2 等份。</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250416091342840-178453035.png" alt="" loading="lazy"></p>
<h3 id="flex-shrink-控制元素缩小比例">flex-shrink 控制元素缩小比例</h3>
<p>默认值为 <code>1</code>，在元素溢出容器时，所有子元素都等比例缩小，可通过设置 <code>flex-shrink</code> 控制缩小系数，不可为负数，设置为 <code>0</code> 表示禁止元素缩放。</p>
<p>计算方式与 <code>flex-grow</code> 一致。</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250416091347534-18339112.png" alt="" loading="lazy"></p>
<h3 id="flex-basis-控制元素大小">flex-basis 控制元素大小</h3>
<p>默认 <code>flex-basis</code> 控制元素宽度，<code>flex-direction: column</code> 则控制元素高度。</p>
<p><code>flex-basis</code> 默认值 <code>auto</code>，表示元素大小由 <code>width</code> 或 <code>height</code> 控制，可食用所有 CSS 支持的单位值。</p>
<p>如果同时设置了 <code>width</code> 和 <code>flex-basis</code> ，flex-basis 优先级更高。</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250416091352782-1012714244.png" alt="" loading="lazy"></p>
<p><code>content</code> 根据弹性项的内容自动调整大小。<br>
<code>max-content</code> 元素内容"自然舒展"时的理想宽度。<br>
<code>min-content</code> 元素内容"紧巴巴"排列时的最小宽度。<br>
<code>fit-content</code> 设定包含块内容区域的最大可能尺寸，该尺寸受最小内容（min-content）和最大内容（max-content）值的约束，并根据当前元素的实际内容动态计算得出。</p>
<h3 id="flex">flex</h3>
<p>简写属性，可同时包含 <code>flex-grow</code> 、 <code>flex-shrink</code> 、 <code>flex-basis</code>，用法：</p>
<p>完整写法顺序为 <code>flex: grow shrink basis;</code> 分别表示：放大比例，缩小比例，元素大小。</p>
<pre><code class="language-css">flex: 2; /* 等价于 flex: 2 1 0; */
flex: 1; /* 等价于 flex: 1 1 0; */
flex: 10px; /* 等价于 flex: 1 1 10px; */
flex: 1 30px; /* 等价于 flex: 1 1 30px; */
flex: 2 2; /* 等价于 flex: 2 2 0; */
flex: 2 2 10%; /* 写全属性 */
</code></pre>
<h3 id="align-self-控制单个元素的对齐方式">align-self 控制单个元素的对齐方式</h3>
<p><code>align-self</code> 可覆盖容器的 <code>align-items</code> 属性，其属性值与 align-items 相同：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250416091357944-873541929.png" alt="" loading="lazy"></p>
<h2 id="总结">总结</h2>
<p>就目前来看 flex 布局比 grid 布局应用得更多，虽然 grid 是终极手段，但由于兼容性问题，反而是 flex 应用更广泛。</p>
<p>虽然 flex 规范出现的时间较早，但由于 CSS 版本不停迭代，目前也有一些较新的 <code>属性值</code>，如果要求兼容低版本浏览器，建议使用前先查阅相关兼容性文档。</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>&nbsp;</p>
<p style="font-size: 18px;font-weight: bold;"><span style="color:rgb(255, 71, 87)">文章正在持续更新中...</span>，首发微信公众号【<span style="color:rgb(255, 71, 87)">前端路引</span>】，欢迎关注公众号获取最新文章。</p>
<p>
  <img style="max-width: 320px;" src="https://images.cnblogs.com/cnblogs_com/linx/2447020/o_250228035031_%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png">
</p>
<p>本文来自博客园，作者：<a href="https://www.cnblogs.com/linx/" target="_blank">前端路引</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/linx/p/18827996" target="_blank">https://www.cnblogs.com/linx/p/18827996</a></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.07574673053472222" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-16 09:15">2025-04-16 09:15</span>&nbsp;
<a href="https://www.cnblogs.com/linx">前端路引</a>&nbsp;
Views(<span id="post_view_count">82</span>)&nbsp;
Comments(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18827996);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18827996', targetLink: 'https://www.cnblogs.com/linx/p/18827996', title: 'Web前端入门第 35 问：CSS 细说 flex 弹性盒子布局（多图）' })">举报</a>
</div>
	