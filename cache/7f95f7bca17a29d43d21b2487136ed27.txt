
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/noear/p/18893165" title="发布于 2025-05-23 15:34">
    <span role="heading" aria-level="2">Solon AI 正试发布（支持 java8+，RAG，MCP）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        Solon AI 是一个 Java AI（智能体） 全场景应用开发框架，提供有丰富的接口能力。主要支持的的智能体开发场景有：Chat；RAG；MCP；AiFlow。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>Solon AI 正试发布了（版号，随 Solon v3.3.1）。历时小半年。</p>
<h3 id="1简介">1、简介</h3>
<p>Solon AI  是一个 Java AI（智能体） 全场景应用开发框架，提供有丰富的接口能力。主要支持的的智能体开发场景有：Chat；RAG；MCP；AiFlow。</p>
<p>其中 ChatModel 是 Solon AI 的核心模型接口（其它暂略），通过方言的方式（ChatDialect）可适配各种环境（或平台）提供的大语言模型。</p>
<h3 id="2历时回顾">2、历时回顾</h3>
<table>
<thead>
<tr>
<th>时间</th>
<th>回顾</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>2025-01 中</td>
<td>Solon Flow 项目启动</td>
<td>将为 Solon AI 编排提供支持</td>
</tr>
<tr>
<td>2025-01 底</td>
<td>Solon AI 项目启动</td>
<td></td>
</tr>
<tr>
<td>2025-02 中</td>
<td></td>
<td>设计 Solon AI 开放接口，和适配机制</td>
</tr>
<tr>
<td>2025-03 中</td>
<td>Solon Expression 项目启动</td>
<td>为 Solon AI RAG 知识库，提供统一的过滤表达式支持</td>
</tr>
<tr>
<td>2025-04 初</td>
<td>Solon AI MCP 项目启动</td>
<td></td>
</tr>
<tr>
<td>2025-05 初</td>
<td>Solon Flow Designer 项目启动</td>
<td>（由 广东越洋科技有限公司 供献代码）</td>
</tr>
<tr>
<td>2025-05 中</td>
<td>Solon AI Flow 项目启动</td>
<td>使用 Solon Flow 编排 Solon AI 定制的任务组件</td>
</tr>
</tbody>
</table>
<h3 id="3体验展示">3、体验展示</h3>
<ul>
<li>ChatModel</li>
</ul>
<pre><code class="language-java">public void call(ChatModel chatModel) throws IOException {
    chatModel.prompt("hello").call();
}

public void stream(ChatModel chatModel) throws IOException {
    chatModel.prompt("hello").stream();
}

public void toolCall(ChatModel chatModel) throws IOException {
    chatModel.prompt("今天杭州的天气情况？")
        .options(o -&gt; o.toolsAdd(new WeatherTools())
        .call();
}

public void session(ChatModel chatModel) throws IOException {
    ChatSession chatSession = new ChatSessionDefault("session-1"); 
    
    chatSession.addMessage(ChatMessage.ofUser("今天杭州的天气情况？")); 
    
    chatModel.prompt(chatSession)
        .options(o -&gt; o.toolsAdd(new WeatherTools())
        .stream();
}
</code></pre>
<ul>
<li>RAG</li>
</ul>
<pre><code class="language-java">public void init(ChatModel chatModel, RepositoryStorable repository) throws IOException {
    PdfLoader loader = new PdfLoader(new File("lzsite.pdf")).additionalMetadata("file", "lzsite.pdf");

    List&lt;Document&gt; documents = new SplitterPipeline() 
                    .next(new RegexTextSplitter("\n\n"))
                    .next(new TokenSizeTextSplitter(500))
                    .split(loader.load());

    repository.insert(documents);
}

public void search(ChatModel chatModel, RepositoryStorable repository) throws IOException {
    String query = "良渚遗址公司有哪些景点？"
    
    //知识库检索
    List&lt;Document&gt; context = repository.search(message);
    
    //消息增强
    ChatMessage message = ChatMessage.augment(query, context)
    
    chatModel.prompt(message).call();
}
</code></pre>
<ul>
<li>MCP-server</li>
</ul>
<pre><code class="language-java">@McpServerEndpoint(sseEndpoint = "/mcp/sse")
public class McpServerTool {
    @ToolMapping(description = "查询天气预报")
    public String getWeather(@Param(description = "城市位置") String location) {
        return "晴，14度";
    }

    @ResourceMapping(uri = "config://app-version", description = "获取应用版本号", mimeType = "text/config")
    public String getAppVersion() {
        return "v3.2.0";
    }
    
    @ResourceMapping(uri = "db://users/{user_id}/email", description = "根据用户ID查询邮箱")
    public String getEmail(@Param(description = "用户Id") String user_id) {
        return user_id + "@example.com";
    }

    @PromptMapping(description = "生成关于某个主题的提问")
    public Collection&lt;ChatMessage&gt; askQuestion(@Param(description = "主题") String topic) {
        return Arrays.asList(ChatMessage.ofUser("请解释一下'" + topic + "'的概念？"));
    }
}
</code></pre>
<ul>
<li>MCP-client</li>
</ul>
<pre><code class="language-java">public void client(ChatModel chatModel){
    McpClientProvider clientProvider = McpClientProvider.builder()
                .apiUrl("http://localhost:8080/mcp/sse")
                .build();
                
    String rst = clientProvider.callToolAsText("getWeather", Map.of("location", "杭州"))
                               .getContent();
                               
                               
    chatModel.prompt("杭州今天的天气怎么样？")
                .options(options -&gt; { options.toolsAdd(clientProvider))
                .call();
}
</code></pre>
<ul>
<li>AiFlow</li>
</ul>
<pre><code class="language-yaml">id: helloworld
layout:
  - task: "@VarInput"
    meta:
      message: "你好"
  - task: "@ChatModel"
    meta:
      chatConfig: # "@type": "org.noear.solon.ai.chat.ChatConfig"
        provider: "ollama"
        model: "qwen2.5:1.5b"
        apiUrl: "http://127.0.0.1:11434/api/chat"
  - task: "@ConsoleOutput"

# flowEngine.eval("helloworld");
</code></pre>
<h3 id="4最近更新日志">4、最近更新日志</h3>
<ul>
<li>新增 solon-ai-flow 插件</li>
<li>新增 solon-ai-load-ddl 插件</li>
<li>添加 solon-ai-core ChatMessage:ofUser(media) 方法</li>
<li>添加 solon-ai-core ChatSession:addMessage(ChatPrompt) 方法</li>
<li>添加 solon-ai-core ChatSession:addMessage(Collection) 方法</li>
<li>添加 solon-ai-core RerankingConfig,RerankingModel toString 方法</li>
<li>添加 solon-ai-core 模型的网络代理支持（支持简单配置，和复杂构建）</li>
<li>添加 solon-ai-mcp 客户端的网络代理简单配置支持</li>
<li>添加 solon-ai-mcp messageEndpoint 端点配置支持（应对特殊需求，一般自动更好）</li>
<li>添加 solon-ai-mcp ToolMapping,ResourceMapping 注解方法对 Produces 注解的支持（用它可指定结果转换处理）</li>
<li>添加 solon-ai-mcp ToolCallResultConverter:matched 方法</li>
<li>添加 solon-ai-mcp 资源模板的响应适配</li>
<li>添加 solon-ai-mcp McpClientProvider:getResourceTemplates 方法</li>
<li>添加 solon-ai-mcp 检查原语是否存在的方法（hasTool, hasPrompt, hasResource）</li>
<li>添加 solon-ai-mcp 提示语支持 UserMessage 拆解成多条 mcp 内容（如果，同时有媒体和文本的话）</li>
<li>优化 solon-ai-core tool 空参数时的不同大模型兼容性</li>
<li>优化 solon-ai-core ChatSession 的作用，为限数提供支持</li>
<li>优化 solon-ai-core MethodFunctionTool 移除对 Mapping 注解的支持（语意更清楚，之前 MethodToolProvider 已经移除，这个落了）</li>
<li>优化 solon-ai-core EmbeddingRequest，ImageRequest，RerankingRequest 当 resp.getError() 非 null 时，直接出抛异常</li>
<li>优化 solon-ai-mcp 取消 MethodFunctionResource 对反回类型的限制（增加了 resultConverter 转换处理）</li>
<li>优化 solon-ai-mcp McpServerEndpointProvider 支持零添加原语，postStart 后，可添加原语</li>
<li>修复 solon-ai ChatRequestDefault:stream 请求 r1 时，可能会产生两次 tink 消息发射</li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.7310933944178241" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-23 15:35">2025-05-23 15:34</span>&nbsp;
<a href="https://www.cnblogs.com/noear">带刺的坐椅</a>&nbsp;
阅读(<span id="post_view_count">108</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18893165);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18893165', targetLink: 'https://www.cnblogs.com/noear/p/18893165', title: 'Solon AI 正试发布（支持 java8+，RAG，MCP）' })">举报</a>
</div>
        