
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/funnyzpc/p/18932812" title="发布于 2025-07-12 15:13">
    <span role="heading" aria-level="2">好用的浏览器自动化扩展-automa</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="好用的浏览器自动化扩展-automa">好用的浏览器自动化扩展-automa</h2>
<blockquote>
<p>转载请注明出处: <a href="https://www.cnblogs.com/funnyzpc/p/18932812" target="_blank">https://www.cnblogs.com/funnyzpc/p/18932812</a></p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<code>automa</code>是一款基于浏览器的任务流编排工具，就是处理一些浏览器网页相关的自动化任务<br>
当然也是轻量级的，浏览器扩展所能处理的毕竟有限，如果有比较重量级任务建议使用类似 <code>RPA</code><br>
或者 <code>DolphinScheduler</code> 这一类的调度/任务编排工具，我说的比较笼统 他们都有各自的侧重点儿~<br>
本次呢，仅就我最近接到的一活儿说起：</p>
<p>我最近接到的一个任务是将后台（管理端）查询出来的音频文件(<code>wav</code>) 查询出来后并下载，同时要支持翻页，最好是能支持并发下载。</p>
<p>一开始我们经过调试想直接拿到页面<code>session</code>（登录信息）后直接调用查询分页接口获取数据 =&gt; 再解析数据中的文件链接直接用程序下载，想必这样便捷高效，但是呢，问题就出现了~</p>
<p>一是由于内容涉及到隐私，所以后台查询出来的数据都是 <code>RSA</code> 加密的的 <code>json</code> 字符串，字符串需要经过前端 加载的 <code>RSA</code> 私钥解密后才可给到页面渲染，同时解密方法似乎也经过个性化处理 这...很麻烦；还有就是音频文件地址似乎也是经过了些许处理并经过用户点击过出现弹框播放时才会有音频播放（才有地址），还有一个现实情况是时间紧迫 需要一天左右的时间给出解决方案~</p>
<p>任务一开始，同事有研究过用纯程序去做，但是迫于现实原因 纯程序调接口的方式直接pass掉了😪</p>
<p>那么落到我手里了，一开始本想到的是 <code>RPA</code> 😁，东西花了半拉天写好了（主要是好久没用过<code>RPA</code>了电脑也没预装） ,最终只作为备选方案搁置一边了 哈哈哈</p>
<p>第二天我换了种方式，就是<code>automa</code> (用程序去点击去下载);那么，我就粗糙的讲一下这东西怎么用哈~ 🥰</p>
<h3 id="ⅰ-如何使用">Ⅰ 如何使用</h3>
<ul>
<li>
<p>01.先从 <code>chrome应用商店</code>(需要梯子)或者第三方插件网站(不需要梯子)下载并安装 <code>automa</code> 插件 ,以及安装这里略去哈😅</p>
</li>
<li>
<p>02.安装后第一件事儿就是先将 <code>automa</code> 插件的语言改为 <code>中文</code>（”文盲“必备哈）( •̀ ω •́ )✧</p>
<p><img alt="img" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1161789/202507/1161789-20250710112916896-2029714907.png" class="lazyload"></p>
</li>
<li>
<p>03.然后必然是新建一个工作流程（工程）；一定要注意，这个工程一定要含有这必要的三要素，分别是： <code>触发器</code>、<code>新建活动页</code>或<code>新建标签页</code>（二选一）、<code>工作流状态</code></p>
<p><img alt="img_1" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1161789/202507/1161789-20250710112938667-1700073338.png" class="lazyload"></p>
</li>
<li>
<p>04.然后所有具体的逻辑节点均在 <code>触发器</code> 及 <code>工作流状态</code> 之间，这里给一个例子</p>
<p><img alt="img_2" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1161789/202507/1161789-20250710113032429-195871654.png" class="lazyload"></p>
<p>注意：编排好的工作流一定要用 <em>连接线</em> 连起来，如果没有触发器是<strong>无法用执行的</strong>！</p>
</li>
<li>
<p>05.工作流执行</p>
<p>编辑节点可点右上角 <code>调试模式</code>执行 或 <code>执行</code> 即可~</p>
<p><img alt="img_5" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1161789/202507/1161789-20250710113049129-977899495.png" class="lazyload"></p>
<p>如果开发完毕需要执行，可按图所示<code>执行</code>即可</p>
<p><img alt="img_4" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1161789/202507/1161789-20250710113154852-1884315283.png" class="lazyload"></p>
<p>执行完毕 <code>automa</code> 会给出<code>成功</code>或<code>失败</code>的通知,这是我执行失败后的日志,<em>浏览器通知</em> 点进去：</p>
<p><img alt="img_3" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1161789/202507/1161789-20250710113210669-1076962145.png" class="lazyload"></p>
</li>
</ul>
<h3 id="ⅱ-关于官方文档">Ⅱ 关于官方文档</h3>
<p>为什么这个要单独拎出来说呢，因为这很重要！！！<br>
我就因为一个问题始终找不到答案(网上能给到的直接资料也很少)而耽误了不少时间，希望后来者不要因此踏坑~ 😌</p>
<p>我们通常能找到的文档一般是这个网站:<a href="https://automa.wiki/workflow/variables" target="_blank" rel="noopener nofollow">https://automa.wiki/workflow/variables</a>，<br>
这里需要说的是：这个中文网站写的十分笼统，而且也不是最新的，我就踩过坑。。。。</p>
<p>所以我强烈建议使用官方文档<a href="https://docs.extension.automa.site/guide/quick-start.html#recording-actions" target="_blank" rel="noopener nofollow">https://docs.extension.automa.site/guide/quick-start.html#recording-actions</a><br>
，建议将这个官方文档的网站放入收藏夹~</p>
<h3 id="ⅲ-如何调试独立模块">Ⅲ 如何调试独立模块</h3>
<p>如果独立模块独立执行 一般无需连接到整个流程中，如果调试单个模块只需要点击模块上的 “<code>运行</code>” 按钮即可</p>
<p><img alt="img_6" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1161789/202507/1161789-20250710113238364-1959823308.png" class="lazyload"></p>
<h3 id="ⅳ-如何定义-automa-运行时变量以及获取变量">Ⅳ 如何定义 <code>automa</code> 运行时变量以及获取变量</h3>
<p>针对于预设全局参数我就不说了，官方文档有实例，这里我先告诉你如何在 “<code>JavaScript 代码</code>” 模块中如何设置一个及获取一个变量</p>
<p><img alt="img_7" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1161789/202507/1161789-20250710113249297-586394391.png" class="lazyload"></p>
<p>如图，定义的 <code>_first_key</code> 这个变量是能够在其他模块中获取到 且 可以修改的！</p>
<p>这个也很重要，这种变量在大多数工作流中都会用到！！！🤓</p>
<h3 id="ⅴ-组件配置参数引用">Ⅴ 组件配置参数引用</h3>
<p><img alt="img_8" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1161789/202507/1161789-20250710113354034-1082021831.png" class="lazyload"></p>
<p>这个也是常用的，尤其是在<code>循环</code>及<code>组件配置</code>中，这也很重要，<code>automa变量</code> 可以上图这种方式被引用，如果是在 <code>JavaScript 模块</code>中则是:</p>
<pre><code class="language-javascript">  // 获取定义的变量
let _first_key = automaRefData('variables', '_first_key') ;
</code></pre>
<p>组件引用的参数 中的 <code>variables@</code> 前缀是固定的，<code>javascript</code> 中获取也是固定的：<code>variables</code> !</p>
<h3 id="ⅵ-插件常见问题">Ⅵ 插件常见问题</h3>
<blockquote>
<blockquote>
<p><strong>一是 浏览器对插件的兼容问题</strong></p>
</blockquote>
</blockquote>
<p>尤其是对于<code>chrome浏览器</code>，如果您碰到了，尤其是安装不了时，建议使用 <code>edge</code> ，这货<br>
似乎对<code>chrome插件</code>兼容性更更好一些，比如你用低版本的 <code>automa</code> 的插件，<code>edge</code> 似乎都能安装及使用!</p>
<blockquote>
<blockquote>
<p><strong>二是 出现的兼容问题可能是权限</strong></p>
</blockquote>
</blockquote>
<p>此类问题 建议在插件配置时将所有权限全部勾上</p>
<p><img alt="img_9" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1161789/202507/1161789-20250710113443540-1934532253.png" class="lazyload"></p>
<p><img alt="img_10" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1161789/202507/1161789-20250710113454920-568245773.png" class="lazyload"></p>
<h3 id="最后">最后</h3>
<p>以上仅对 Automa 插件使用的浅见，只是对目前碰到的问题做一些排障，如有好的建议及使用技巧请留言~❤</p>

</div>
<div id="MySignature" role="contentinfo">
    funnyzpc@gmail.com
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-12 15:13">2025-07-12 15:13</span>&nbsp;
<a href="https://www.cnblogs.com/funnyzpc">funnyZpC</a>&nbsp;
阅读(<span id="post_view_count">86</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18932812);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18932812', targetLink: 'https://www.cnblogs.com/funnyzpc/p/18932812', title: '好用的浏览器自动化扩展-automa' })">举报</a>
</div>
        