
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/IwishIcould/p/18625158" title="发布于 2024-12-31 19:54">
    <span role="heading" aria-level="2">Object.freeze冻结属性和v-if结合requestAnimationFrame分帧渲染解决白屏</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h4 id="计算100w条数据的长度造成2s延迟">计算100W条数据的长度造成2s延迟</h4>
<pre><code>&lt;template&gt;
  &lt;div&gt;
    &lt;h1&gt;数据总长度{{ arrList.length }}&lt;/h1&gt;
  &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
  export default {
    data(){
      return {
        arrList: []
      }
    },
    created(){
      console.time('赋值代码耗时')
      // 我们发现这里赋值耗时1.8s
      this.arrList= this.getNewListApi()
      console.timeEnd('赋值代码耗时')
    },
    methods: {
      getNewListApi(){
        let arr = []
        // 100w次循环需要78ms
        console.time('100w次循环耗时')
        for(let i=0;i&lt;1000000;i++){
          arr.push({
            name: '张三' + i,
            age: i+10,
            add:'xxx',
            info:'喜欢上班'
          })
        }
        console.timeEnd('100w次循环耗时')
        return arr
      }
    }
  }
&lt;/script&gt;
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1425695/202412/1425695-20241223215526252-1934679585.gif" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1425695/202412/1425695-20241223215526176-99273397.png" alt="" loading="lazy"></p>
<h4 id="使用-objectfreeze-提升效率">使用 Object.freeze 提升效率</h4>
<pre><code>created(){
  console.time('赋值代码耗时')
  this.arrList= Object.freeze(this.getNewListApi())
  console.timeEnd('赋值代码耗时')
},
</code></pre>
<p>由原来的1.7s变为现在93ms<br>
<img src="https://img2024.cnblogs.com/blog/1425695/202412/1425695-20241223215629748-50287035.png" alt="" loading="lazy"></p>
<h4 id="什么使用-objectfreeze会提升效率呢">什么使用 Object.freeze会提升效率呢？</h4>
<p>我们都知道vue2中<br>
会把放在data中的数据变成响应式数据。<br>
this.arrList= this.getNewListApi()<br>
这一行代码会把arrList中的100w条数据变成响应式数据。<br>
这样就造成消耗。<br>
实际上我们只需要进行展示，不会做修改操作。<br>
因此我们可以使用 Object.freeze 来冻结数据。<br>
不让它变成响应式数据。从而提升效率。<br>
在我们实际开发中像纯列表(不会做修改，删除，添加，按条件搜索)<br>
我们都可以使用 Object.freeze 来冻结数据。</p>
<h4 id="学习-objectfreeze">学习 Object.freeze</h4>
<p>Object.freeze() 可以让一个对象被冻结<br>
这个被冻结的对象:<br>
1.不能添加属性,不能删除属性,不能修改属性的值<br>
2.不能更改它们的可枚举性<br>
3.对象的原型也不能被重新指定<br>
freeze()返回与传入的对象相同的对象。</p>
<pre><code>let obj={
  name:'张三',
  age: 70
}
let newObj = Object.freeze(obj)
newObj.newAddRess = '王者峡谷' // 不能新增属性
delete newObj.name // 不能删除属性
newObj.age = 50 // 不能修改属性
console.log(newObj)
//输出 {"name": "张三","age": 70}
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1425695/202412/1425695-20241223220100510-781275875.png" alt="" loading="lazy"></p>
<h4 id="5w条数据渲染出现白屏">5w条数据渲染出现白屏</h4>
<pre><code>&lt;template&gt;
  &lt;div&gt;
    &lt;div v-for="(item,index) in 50000" :key="index" :data-aIndex="index"&gt;
        &lt;h4&gt;姓名&lt;/h4&gt;
        &lt;h4&gt;年龄&lt;/h4&gt;
        &lt;h4&gt;地址&lt;/h4&gt;
        &lt;h4&gt;爱好&lt;/h4&gt;
        &lt;h4&gt;序号{{ index }}&lt;/h4&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1425695/202412/1425695-20241223220107027-218626040.gif" alt="" loading="lazy"></p>
<h4 id="使用v-if结合requestanimationframe让它延迟渲染">使用v-if结合requestAnimationFrame让它延迟渲染</h4>
<pre><code>// 自定义hook
import { onMounted, onUnmounted, ref } from "vue"
import { onUnmounted, ref } from "vue"
export function useDeferRender(allEleNumber=100){
  const frameCount = ref(0);
  let requestId;
  // 刷新帧的函数
  function updateFrameCount(){
    requestId = requestAnimationFrame(()=&gt;{
      frameCount.value++;
      // 当前渲染的帧数大于最大帧数的时候就停止渲染 (说明元素已经渲染完了)
      if(frameCount.value &gt;= allEleNumber){
        return
      }
      updateFrameCount()
    })
    console.log(' frameCount.value',  frameCount.value)
  };
  // 一开始进入就执行这个函数
  updateFrameCount();
  // 卸载的时候取消掉
  onUnmounted(()=&gt;{
    cancelAnimationFrame(requestId)
  })
  // 会返回一个true或者false.来控制是否渲染,让它逐帧渲染
  return function deferBool(n){
    // 目前渲染了多少帧 &gt;= 这个元素是在第几帧渲染
    return frameCount.value &gt;=n
  };
}
</code></pre>
<pre><code>&lt;template&gt;
  &lt;div&gt;
    &lt;div v-for="(item,index) in 50000" :key="index" :data-aIndex="index"&gt;
      &lt;template v-if="deferBool(index)"&gt;
        &lt;h4&gt;姓名&lt;/h4&gt;
        &lt;h4&gt;年龄&lt;/h4&gt;
        &lt;h4&gt;地址&lt;/h4&gt;
        &lt;h4&gt;爱好&lt;/h4&gt;
        &lt;h4&gt;序号{{ index }}&lt;/h4&gt;
      &lt;/template&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;
&lt;script setup&gt;
import {useDeferRender} from '../hooks/useDeferRender.js'
let deferBool = useDeferRender(50000)
&lt;/script&gt;
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1425695/202412/1425695-20241223220115296-1457240577.gif" alt="" loading="lazy"></p>
<h4 id="requestanimationframe的简单介绍">requestAnimationFrame的简单介绍</h4>
<p>window.requestAnimationFrame()方法告诉浏览器你希望执行一个动画(一段代码)。<br>
它要求浏览器在下一次重绘之前调用指定的回调函数。<br>
对回调函数的调用频率通常与显示器的刷新率相匹配。<br>
有60hz、75hz、120hz、144hz 。<br>
但是最常见的刷新率还是 60hz(每秒 60 帧)。<br>
它的返回值是一个long 类型整数值。<br>
是在回调列表里的唯一标识符。<br>
你可以将此值传递给 window.cancelAnimationFrame() 函数以取消该刷新回调请求</p>

</div>
<div id="MySignature" role="contentinfo">
    <div style="width:818px;background:#f5f5f5; padding: 10px 10px 10px 10px; border: 1px dashed rgb(224, 224, 224); font-family: 微软雅黑; font-size: 13px;">
            <h1 style="font-size: 24px;"> 遇见问题，这是你成长的机会，如果你能够解决，这就是收获。 </h1>
		    <div style="padding:10px">
		        作者：<a href="https://www.cnblogs.com/IwishIcould/" target="_blank">晚来南风晚相识</a> <br>
		        出处：<a href="https://www.cnblogs.com/IwishIcould/">https://www.cnblogs.com/IwishIcould/</a> <br>
                        <p> 想问问题，打赏了卑微的博主，求求你备注一下的扣扣或者微信；这样我好联系你；(っ•̀ω•́)っ✎⁾⁾！</p>
		        <p>如果觉得这篇文章对你有小小的帮助的话，记得在右下角点个“推荐”哦，或者关注博主，在此感谢！</p>
		        <p> 万水千山总是情，打赏5毛买辣条行不行，所以如果你心情还比较高兴，也是可以扫码打赏博主(っ•̀ω•́)っ✎⁾⁾！</p>
                        <p> 想问问题，打赏了卑微的博主，求求你备注一下的扣扣或者微信；这样我好联系你；(っ•̀ω•́)っ✎⁾⁾！</p>
				<div style="display: flex;">
					<div style="margin-right: 100px;text-align: center;">
						<img src="//images.cnblogs.com/cnblogs_com/IwishIcould/1900124/t_201214043958支付宝收款码.jpg?a=1607924145179">
						<div>
							支付宝
						</div>
					</div>
					<div style="text-align: center;">
						<img src="//images.cnblogs.com/cnblogs_com/IwishIcould/1900124/t_20121604194271E6E296CCB71A007F4E22073D5EB64A.jpg">
						<div>微信</div>
					</div>
				</div>
		        本文版权归作者所有，欢迎转载，未经作者同意须保留此段声明，在文章页面明显位置给出原文连接 <br>
		        如果文中有什么错误，欢迎指出。以免更多的人被误导。 <br>
               
		    </div>
           
            
		</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.02159499821990741" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-31 19:55">2024-12-31 19:54</span>&nbsp;
<a href="https://www.cnblogs.com/IwishIcould">南风晚来晚相识</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18625158" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18625158);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18625158', targetLink: 'https://www.cnblogs.com/IwishIcould/p/18625158', title: 'Object.freeze冻结属性和v-if结合requestAnimationFrame分帧渲染解决白屏' })">举报</a>
</div>
        