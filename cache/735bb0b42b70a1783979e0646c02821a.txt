
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/AntToolStuido/p/18683124" title="发布于 2025-01-21 10:52">
    <span role="heading" aria-level="2">.Net类型 值类型</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>预定义类型值类型 数据类型C#关键字(如 int、short 和 string) 从编译器映射到.NET数据类型。例如，在C#中声明一个int类型的数据时声明的实际是.Net System.Int32的一个实例。 这似乎很深奥，但其意义深远；这表示在语法上，可以把所有基本类型看成支持某些方法的类。例如，要把int i转换为string类型，可以编写为下面代码；</p>
<pre class="language-csharp highlighter-hljs"><code>string s = i.ToString();</code></pre>
<p>应该强调的是，这种语法的背后，类型实际上仍存储为基本类型。基本类型在概念上用C#结构表示，所以肯定没有性能丢失。</p>
<p><strong>1.整形</strong></p>
<p>C#支持8种预定义的整数类型</p>
<table style="border-collapse: collapse; width: 100%; height: 210px" border="1">
<tbody>
<tr style="height: 21px">
<td style="width: 25.0156%; height: 21px; text-align: center"><strong>名称</strong></td>
<td style="width: 25.0156%; height: 21px; text-align: center"><strong>.Net 类型</strong></td>
<td style="width: 25.0156%; height: 21px; text-align: center"><strong>说明</strong></td>
<td style="width: 24.8911%; height: 21px; text-align: center"><strong>范围(最小~最大)</strong></td>
</tr>
<tr style="height: 21px">
<td style="width: 25.0156%; height: 21px; text-align: center">sByte</td>
<td style="width: 25.0156%; height: 21px; text-align: center">System.SByte</td>
<td style="width: 25.0156%; height: 21px; text-align: center">8位有符号的整数</td>
<td style="width: 24.8911%; height: 21px; text-align: center" valign="top" width="207" data-colwidth="207">
<section>-128~127</section>
</td>
</tr>
<tr style="height: 21px">
<td style="width: 25.0156%; height: 21px; text-align: center">short</td>
<td style="width: 25.0156%; height: 21px; text-align: center">System.Int16</td>
<td style="width: 25.0156%; height: 21px; text-align: center">16位有符号的整数</td>
<td style="width: 24.8911%; height: 21px; text-align: center">-32768~32767</td>
</tr>
<tr style="height: 21px">
<td style="width: 25.0156%; height: 21px; text-align: center">int</td>
<td style="width: 25.0156%; height: 21px; text-align: center">System.Int32</td>
<td style="width: 25.0156%; height: 21px; text-align: center">32位有符号的整数</td>
<td style="width: 24.8911%; height: 21px; text-align: center">-2147483648~2147483647</td>
</tr>
<tr style="height: 21px">
<td style="width: 25.0156%; height: 21px; text-align: center">long</td>
<td style="width: 25.0156%; height: 21px; text-align: center">System.Int64</td>
<td style="width: 25.0156%; height: 21px; text-align: center">64位有符号的整数</td>
<td style="width: 24.8911%; height: 21px; text-align: center" valign="top" width="207" data-colwidth="207">
<section>-9223372036854775808~9223372036854775807</section>
</td>
</tr>
<tr style="height: 21px">
<td style="width: 25.0156%; height: 21px; text-align: center">byte</td>
<td style="width: 25.0156%; height: 21px; text-align: center">System.Byte</td>
<td style="width: 25.0156%; height: 21px; text-align: center">8位有符号的整数</td>
<td style="width: 24.8911%; height: 21px; text-align: center">0~255</td>
</tr>
<tr style="height: 21px">
<td style="width: 25.0156%; height: 21px; text-align: center">ushort</td>
<td style="width: 25.0156%; height: 21px; text-align: center" valign="top" width="159" data-colwidth="159">
<section>System.UInt16</section>
</td>
<td style="width: 25.0156%; height: 21px; text-align: center">16位有符号的整数</td>
<td style="width: 24.8911%; height: 21px; text-align: center">0~65535</td>
</tr>
<tr style="height: 21px">
<td style="width: 25.0156%; height: 21px; text-align: center">uint</td>
<td style="width: 25.0156%; height: 21px; text-align: center">System.UInt32</td>
<td style="width: 25.0156%; height: 21px; text-align: center" valign="top" width="171" data-colwidth="171">
<section>32位有符号的整数</section>
</td>
<td style="width: 24.8911%; height: 21px; text-align: center">0~4294967295</td>
</tr>
<tr style="height: 21px">
<td style="width: 25.0156%; height: 21px; text-align: center">ulong</td>
<td style="width: 25.0156%; height: 21px; text-align: center" valign="top" width="159" data-colwidth="159">
<section>System.UInt64</section>
</td>
<td style="width: 25.0156%; height: 21px; text-align: center">64位有符号的整数</td>
<td style="width: 24.8911%; height: 21px; text-align: center">0~18446744073709551615</td>
</tr>
</tbody>
</table>
<p><strong>2.浮点类型</strong></p>
<p>C#提供支持许多整型数据类型,也支持浮点类型</p>
<table style="border-collapse: collapse; width: 100%; height: 63px" border="1">
<tbody>
<tr style="height: 21px">
<td style="width: 19.9751%; height: 21px; text-align: center"><strong>名称</strong></td>
<td style="width: 19.9129%; height: 21px; text-align: center"><strong>.Net 类型</strong></td>
<td style="width: 20.0373%; height: 21px; text-align: center"><strong>说明</strong></td>
<td style="width: 19.9751%; height: 21px; text-align: center" valign="top" width="78" data-colwidth="78">
<section><strong>位数</strong></section>
</td>
<td style="width: 20.0373%; height: 21px; text-align: center"><strong>范围(最小~最大)</strong></td>
</tr>
<tr style="height: 21px">
<td style="width: 19.9751%; height: 21px; text-align: center">float</td>
<td style="width: 19.9129%; height: 21px; text-align: center" align="center" valign="top" width="159" data-colwidth="159">
<section><span data-pm-slice="1 1 [&quot;table&quot;,{&quot;interlaced&quot;:&quot;enabled&quot;,&quot;align&quot;:null,&quot;class&quot;:null,&quot;style&quot;:&quot;width:623px;&quot;},&quot;table_body&quot;,null,&quot;table_row&quot;,{&quot;class&quot;:&quot;ue-table-interlace-color-single&quot;,&quot;style&quot;:null},&quot;table_cell&quot;,{&quot;colspan&quot;:1,&quot;rowspan&quot;:1,&quot;colwidth&quot;:[159],&quot;width&quot;:&quot;159&quot;,&quot;valign&quot;:&quot;top&quot;,&quot;align&quot;:null,&quot;style&quot;:null},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">System.Single</span></section>
</td>
<td style="width: 20.0373%; height: 21px; text-align: center" align="center" valign="top" width="171" data-colwidth="171">&nbsp;32位单精度浮点数</td>
<td style="width: 19.9751%; height: 21px; text-align: center">7</td>
<td style="width: 20.0373%; height: 21px; text-align: center">-3.40282347E+38F~3.40282347E+38F</td>
</tr>
<tr style="height: 21px">
<td style="width: 19.9751%; height: 21px; text-align: center">double</td>
<td style="width: 19.9129%; height: 21px; text-align: center" valign="top" width="159" data-colwidth="159">
<section>System.Double</section>
</td>
<td style="width: 20.0373%; height: 21px; text-align: center">64位双精度浮点数</td>
<td style="width: 19.9751%; height: 21px; text-align: center">15/16</td>
<td style="width: 20.0373%; height: 21px; text-align: center">-1.7976931348623157E+308~1.7976931348623157E+308</td>
</tr>
</tbody>
</table>
<section></section>
<section></section>
<section>float数据类型用于较小的浮点值，因为它要求的精度较低。double数据类型比float数据类型大，提供的精度也大一倍(15位)。</section>
<section></section>
<section><strong>如果在代码中对某个非整数值编码，则编译器一般假定该变量是double。如果想指定该值为float，可以在其后加上字符F或f。</strong></section>
<pre class="language-csharp highlighter-hljs"><code>float f = 12.3F;</code></pre>
<p><strong>3.Decimal类型</strong></p>
<p>decimal类型表示精度更高的浮点数。</p>
<table style="border-collapse: collapse; width: 100%; height: 63px" border="1">
<tbody>
<tr style="height: 21px">
<td style="width: 19.1299%; height: 21px; text-align: center"><strong>名称</strong></td>
<td style="width: 19.1299%; height: 21px; text-align: center"><strong>.Net 类型</strong></td>
<td style="width: 19.1299%; height: 21px; text-align: center"><strong>说明</strong></td>
<td style="width: 19.1299%; height: 21px; text-align: center"><strong>位数</strong></td>
<td style="width: 19.1328%; height: 21px; text-align: center"><strong>范围(最小~最大)</strong></td>
</tr>
<tr style="height: 21px">
<td style="width: 19.1299%; height: 21px; text-align: center">decimal</td>
<td style="width: 19.1299%; height: 21px; text-align: center">System.Decimal</td>
<td style="width: 19.1299%; height: 21px; text-align: center">128位高精度十进制数表示法</td>
<td style="width: 19.1299%; height: 21px; text-align: center">28</td>
<td style="width: 19.1328%; height: 21px; text-align: center">-79228162514264337593543950335M~79228162514264337593543950335M</td>
</tr>
</tbody>
</table>
<p>.Net和C#数据类型的一个重要优点是提供了一种专用类型进行财务计算,这就是decimal类型提供28位的方式取决于用户。换言之，可以用较大的精确度(带有美分)来表示较小的美元值，也可以在小数部分用更多的舍入来表示较大的美元值。但应注意，decimal类型不是基本类型，所以在计算时使用该类型会有性能丢失。</p>
<p><strong>&nbsp; 要把数字指定为decimal类型而不是double，float或整数类型，可以在数字的后边加上字符M或m 如：</strong></p>
<pre class="language-csharp highlighter-hljs"><code>decimal d = 12.3M;</code></pre>
<p><strong>&nbsp;4.布尔类型</strong></p>
<p>&nbsp;C#的bool类型用于包含布尔值true或false</p>
<p>&nbsp;</p>
<table style="border-collapse: collapse; width: 100%; height: 42px" border="1">
<tbody>
<tr style="height: 21px">
<td style="width: 19.1299%; height: 21px; text-align: center"><strong>名称</strong></td>
<td style="width: 19.1299%; height: 21px; text-align: center"><strong>.Net 类型</strong></td>
<td style="width: 19.1299%; height: 21px; text-align: center"><strong>说明</strong></td>
<td style="width: 19.1299%; height: 21px; text-align: center"><strong>位数</strong></td>
<td style="width: 19.1328%; height: 21px; text-align: center"><strong>范围(最小~最大)</strong></td>
</tr>
<tr style="height: 21px">
<td style="width: 19.1299%; height: 21px; text-align: center">bool</td>
<td style="width: 19.1299%; height: 21px; text-align: center">System.Boolean</td>
<td style="width: 19.1299%; height: 21px; text-align: center">表示true或false</td>
<td style="width: 19.1299%; height: 21px; text-align: center">NA</td>
<td style="width: 19.1328%; height: 21px; text-align: center">true或false</td>
</tr>
</tbody>
</table>
<p>&nbsp;bool值和整数数值不能相互转换。如果变量(或函数的返回类型)声明为bool类型，就只能使用true或false。如果试图使用0表示false，非0值表示true，就会出错。</p>
<pre class="language-csharp highlighter-hljs"><code>bool a = false;
bool b = 1&gt;0;</code></pre>
<p><strong>&nbsp;5.字符类型</strong></p>
<p>&nbsp;为了保存单个字符的值，C#支持char数据类型</p>
<table style="border-collapse: collapse; width: 100%" border="1">
<tbody>
<tr>
<td style="width: 32.4549%; text-align: center"><strong>名称</strong></td>
<td style="width: 32.4549%; text-align: center"><strong>.Net 类型</strong></td>
<td style="width: 32.4568%; text-align: center"><strong>值</strong></td>
</tr>
<tr>
<td style="width: 32.4549%; text-align: center">char</td>
<td style="width: 32.4549%; text-align: center">System.Char</td>
<td style="width: 32.4568%; text-align: center">表示一个16位的(Unicode)字符</td>
</tr>
</tbody>
</table>
<section>char类型的字面量是用单引号括起来，如'A'。如果把字符放在双引号中，编译器会把它看成字符串，从而产生错误。</section>
<section>除了把char表示为字符字面量之外，还可以用4位十六位进制的Unicode值、带有强制类型转换的整数值或十六进制数表示它们。</section>
<section>它们还可以用转移序列表示如下。</section>
<table style="border-collapse: collapse; width: 100%; height: 252px" border="1">
<tbody>
<tr style="height: 21px">
<td style="width: 50.0311%; text-align: center; height: 21px"><strong>转义序列</strong></td>
<td style="width: 49.9689%; text-align: center; height: 21px"><strong>字符</strong></td>
</tr>
<tr style="height: 21px">
<td style="width: 50.0311%; height: 21px">\'</td>
<td style="width: 49.9689%; height: 21px">单引号</td>
</tr>
<tr style="height: 21px">
<td style="width: 50.0311%; height: 21px">\"</td>
<td style="width: 49.9689%; height: 21px">双引号</td>
</tr>
<tr style="height: 21px">
<td style="width: 50.0311%; height: 21px">\\</td>
<td style="width: 49.9689%; height: 21px">反斜杠</td>
</tr>
<tr style="height: 21px">
<td style="width: 50.0311%; height: 21px">\0</td>
<td style="width: 49.9689%; height: 21px">空</td>
</tr>
<tr style="height: 21px">
<td style="width: 50.0311%; height: 21px">\a</td>
<td style="width: 49.9689%" valign="top" width="287" data-colwidth="287">
<section>警告</section>
</td>
</tr>
<tr style="height: 21px">
<td style="width: 50.0311%; height: 21px">\b</td>
<td style="width: 49.9689%; height: 21px">退格</td>
</tr>
<tr style="height: 21px">
<td style="width: 50.0311%; height: 21px">\f</td>
<td style="width: 49.9689%; height: 21px">换页</td>
</tr>
<tr style="height: 21px">
<td style="width: 50.0311%; height: 21px">\n</td>
<td style="width: 49.9689%; height: 21px">换行</td>
</tr>
<tr style="height: 21px">
<td style="width: 50.0311%; height: 21px">\r</td>
<td style="width: 49.9689%; height: 21px">回车</td>
</tr>
<tr style="height: 21px">
<td style="width: 50.0311%; height: 21px">\t</td>
<td style="width: 49.9689%" valign="top" width="287" data-colwidth="287">
<section>水平制表符</section>
</td>
</tr>
<tr style="height: 21px">
<td style="width: 50.0311%; height: 21px">\v</td>
<td style="width: 49.9689%; height: 21px">垂直制表符</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.08830164847800925" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-21 14:17">2025-01-21 10:52</span>&nbsp;
<a href="https://www.cnblogs.com/AntToolStuido">DotNet进阶分享</a>&nbsp;
阅读(<span id="post_view_count">124</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18683124" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18683124);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18683124', targetLink: 'https://www.cnblogs.com/AntToolStuido/p/18683124', title: '.Net类型 值类型' })">举报</a>
</div>
        