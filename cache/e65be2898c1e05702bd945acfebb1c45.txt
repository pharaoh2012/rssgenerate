
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/deali/p/18678315" title="发布于 2025-01-18 11:55">
    <span role="heading" aria-level="2">SSH 跳板机原理与配置：实现无缝跳板连接，一步直达目标主机</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>在日常运维或开发工作中，我们常常需要访问部署在内网的服务器。然而出于安全策略或网络拓扑的限制，内网服务器并不会直接向外部暴露端口，导致我们无法“直连”它们。此时，<strong>跳板机</strong>（Jump Host/Bastion Host）就成了必不可少的中转：</p>
<ul>
<li>先通过 SSH 登录跳板机；</li>
<li>再从跳板机登录到目标服务器。</li>
</ul>
<p>虽然这样的流程能保证安全隔离，但也带来了一定程度上的不便：我们每次都要进行“两次登录”，甚至手动输入多次密码或在多个终端窗口间切换，非常繁琐。有时还需要在跳板机和目标主机之间频繁复制粘贴命令，效率难免受影响。</p>
<p>那么有没有办法在<strong>保持安全</strong>的前提下，简化连接流程，实现“一步直达”目标主机？答案是<strong>有的</strong>。本文将介绍如何通过 SSH 的配置——主要是 <code>ProxyJump</code>（<code>-J</code> 参数）或 <code>ProxyCommand</code>，来自动完成“跳板机”这一步骤，让我们在本地一条命令就能直连内网服务器。</p>
<h2 id="背景信息">背景信息</h2>
<ul>
<li><strong>跳板机（Bastion Host/Jump Host）</strong><br>
跳板机通常位于受控网络的边缘，是唯一对外开放 SSH/端口访问的安全中转站。外部用户只能通过跳板机登录内网的其他主机，起到了一道安全防护的作用。</li>
<li>二次登录的痛点
<ol>
<li>操作繁琐：每次需要 <code>ssh jump-host</code> 登录，再 <code>ssh target-server</code>。</li>
<li>多次输入凭据：如果没有做密钥共享或 SSH Agent 转发，常常要重复输入密码。</li>
<li>易出错：在多台服务器之间频繁切换，会不小心在错误的终端窗口执行命令。</li>
</ol>
</li>
<li>SSH 配置转发的作用
<ul>
<li>使用 SSH 内置的代理功能，可以让本地 SSH 客户端在连接目标主机时，<strong>自动</strong>通过跳板机建立隧道，无需手动二次登录。</li>
<li>对用户来说就像直接登录了目标服务器；对网络来说，数据仍会经由跳板机转发，从安全和合规角度依旧满足策略要求。</li>
</ul>
</li>
<li>兼容性与版本要求
<ul>
<li><strong>ProxyJump</strong>（<code>-J</code>）需要 OpenSSH 7.3+。</li>
<li><strong>ProxyCommand</strong> 适用于更早版本的 SSH，兼容性更好，但配置稍微复杂一些。</li>
</ul>
</li>
</ul>
<p>通过这些方法，我们能在“一步到位”登录目标服务器的同时，保持网络和安全策略的完整性。接下来，将结合示例具体说明如何配置和使用。</p>
<h2 id="传统-ssh-二次登录的方式">传统 SSH 二次登录的方式</h2>
<p>在传统的 SSH 登录过程中，尤其是在涉及到跳板机的场景下，我们通常需要执行以下两步操作：</p>
<ol>
<li>
<p><strong>第一步：登录到跳板机</strong><br>
假设我们已经知道跳板机的地址 <code>jump-server.dealiaxy.com</code> 和开放的端口（如 <code>10023</code>），我们首先通过 SSH 连接到这台跳板机：</p>
<pre><code class="language-bash">ssh -p 10023 user@jump-server.dealiaxy.com
</code></pre>
<p>这时，SSH 客户端会要求我们提供登录凭据（如密码或密钥）。如果我们没有将公钥配置到跳板机上，则需要手动输入密码，或配置 SSH Key 来实现免密登录。</p>
</li>
<li>
<p><strong>第二步：从跳板机登录到目标主机</strong><br>
登录到跳板机后，我们还需要执行第二次 SSH 登录，才能进入目标服务器 <code>target.dealiaxy.com</code>：</p>
<pre><code class="language-bash">ssh user@target.dealiaxy.com
</code></pre>
<p>这时，我们再次需要提供目标主机的登录凭据，或者配置 SSH 密钥进行免密登录。如果目标主机和跳板机不在同一网络段，还可能会碰到网络策略或防火墙的问题，导致连接失败。</p>
</li>
</ol>
<h4 id="缺点与痛点">缺点与痛点</h4>
<ol>
<li><strong>繁琐的操作步骤</strong>：每次都需要输入多次命令，导致操作复杂和耗时。
<ul>
<li>如果目标服务器在不同的网络环境中，这一操作的步骤可能还会增加，效率更低。</li>
</ul>
</li>
<li><strong>多次输入凭据</strong>：每次都要手动输入密码或 SSH 密钥，容易出错，尤其在密钥管理不当时。</li>
<li><strong>切换窗口或多任务操作</strong>：需要分别打开多个 SSH 会话来管理跳板机和目标服务器，这样会造成界面混乱，尤其在操作复杂时难以管理。</li>
</ol>
<h2 id="原理简介ssh-跳板配置">原理简介：SSH 跳板配置</h2>
<p>在传统的 SSH 登录过程中，我们需要手动执行两次 SSH 登录操作。这不仅增加了工作量，也可能导致连接的延迟和不必要的重复步骤。那么，如何才能在保证安全性的同时，简化这一流程呢？</p>
<p>答案是通过 SSH 的 <strong>跳板机（Jump Host）配置</strong>，实现自动化的连接过程。SSH 本身提供了两种主要的方式来处理这种跳板机场景：<strong>ProxyJump</strong> 和 <strong>ProxyCommand</strong>。这两种方式都能让我们在一条命令中完成从本地到目标服务器的连接，而不需要手动登录到跳板机。</p>
<h4 id="1-proxyjump推荐方式">1. <strong>ProxyJump</strong>（推荐方式）</h4>
<p>从 OpenSSH 7.3 版本开始，SSH 引入了一个新的参数 <code>-J</code>，该参数可以让我们直接指定跳板机。通过使用 <code>-J</code> 参数，我们可以让 SSH 客户端自动先连接到跳板机，再通过跳板机将流量转发到目标主机，完成目标主机的访问。此方法简洁且直接，推荐使用。</p>
<p><strong>示例命令：</strong></p>
<pre><code class="language-bash">ssh -J user@jump-server.dealiaxy.com:10023 user@target.dealiaxy.com
</code></pre>
<p>在这条命令中，<code>-J</code> 后面指定了跳板机的地址（<code>user@jump-server.dealiaxy.com</code>）和端口（<code>10023</code>）。SSH 会先与跳板机建立连接，然后通过跳板机转发流量到目标服务器 <code>target.dealiaxy.com</code>。整个过程只需要一次登录操作，极大简化了访问流程。</p>
<h4 id="2-proxycommand兼容性更好">2. <strong>ProxyCommand</strong>（兼容性更好）</h4>
<p>对于老版本的 SSH 客户端，或者在一些特殊场景下（比如要使用其他协议或更复杂的转发配置），可以使用 <code>ProxyCommand</code> 来实现跳板机配置。<code>ProxyCommand</code> 是 SSH 客户端允许我们定义自定义的命令来建立连接的机制，通过它我们可以指定跳板机的命令。</p>
<p><strong>示例命令：</strong></p>
<pre><code class="language-bash">ssh -o "ProxyCommand ssh -W %h:%p user@jump-server.dealiaxy.com -p 10023" user@target.dealiaxy.com
</code></pre>
<p>在这个命令中，<code>-o "ProxyCommand"</code> 选项指定了一个自定义的命令来通过跳板机进行连接。具体地，<code>ssh -W %h:%p</code> 会将目标主机（<code>%h</code>）和端口（<code>%p</code>）转发给跳板机，然后通过跳板机建立与目标主机的连接。</p>
<p>虽然这种方式配置更复杂，但它具有更强的灵活性，支持更多定制化的需求。</p>
<p>通过配置跳板机，我们可以避免每次都手动登录到跳板机再去登录目标主机。无论是 <code>ProxyJump</code> 还是 <code>ProxyCommand</code>，都可以大大简化我们的操作流程，提高效率。<strong>ProxyJump</strong> 是推荐的方式，因为它更加简洁和易于使用，且适用于大多数现代的 OpenSSH 客户端版本。</p>
<p>在下一节中，我们将详细介绍如何配置这些选项，快速实现无缝的 SSH 跳板连接。</p>
<h2 id="跳板配置方法">跳板配置方法</h2>
<h3 id="方法一使用--jproxyjump参数">方法一：使用 <code>-J</code>（ProxyJump）参数</h3>
<p>如前所述，<code>-J</code> 参数是 OpenSSH 7.3 及以上版本提供的一个功能，它允许我们在一条命令中指定跳板机，从而简化了访问内网服务器的过程。相比传统的二次登录方式，使用 <code>-J</code> 参数能够让我们直接通过跳板机登录到目标主机，避免了繁琐的两次 SSH 登录操作。</p>
<h4 id="1-基本语法">1. <strong>基本语法</strong></h4>
<p><code>-J</code> 参数的基本语法格式如下：</p>
<pre><code class="language-bash">ssh -J &lt;jump-user&gt;@&lt;jump-host&gt;:&lt;port&gt; &lt;target-user&gt;@&lt;target-host&gt;
</code></pre>
<ul>
<li><code>&lt;jump-user&gt;</code>：跳板机的用户名</li>
<li><code>&lt;jump-host&gt;</code>：跳板机的地址（可以是域名或 IP）</li>
<li><code>&lt;port&gt;</code>：跳板机的端口（默认是 22，可以根据实际情况修改）</li>
<li><code>&lt;target-user&gt;</code>：目标服务器的用户名</li>
<li><code>&lt;target-host&gt;</code>：目标服务器的地址（可以是域名或 IP）</li>
</ul>
<h4 id="2-示例命令">2. <strong>示例命令</strong></h4>
<p>假设你已经有了如下的连接信息：</p>
<ul>
<li>跳板机：<code>jump-server.dealiaxy.com</code>，端口：<code>10023</code></li>
<li>目标服务器：<code>target.dealiaxy.com</code></li>
<li>用户名：<code>user</code></li>
</ul>
<p>你可以使用如下命令直接通过跳板机连接到目标服务器：</p>
<pre><code class="language-bash">ssh -J user@jump-server.dealiaxy.com:10023 user@target.dealiaxy.com
</code></pre>
<p>当你执行这个命令时，SSH 客户端会先与跳板机 <code>jump-server.dealiaxy.com</code> 通过指定的端口（<code>10023</code>）建立连接，然后从跳板机自动转发到目标服务器 <code>target.dealiaxy.com</code>，就像直接登录目标服务器一样。这一过程对用户来说完全透明，你只需提供一次凭据（用户名和密码或 SSH 密钥），即可完成连接。</p>
<h4 id="3-免密登录">3. <strong>免密登录</strong></h4>
<p>如果你已经配置了 SSH 密钥对并将公钥添加到跳板机和目标主机的授权文件中，使用 <code>-J</code> 参数时，SSH 会自动使用密钥进行身份验证，而无需手动输入密码。例如：</p>
<pre><code class="language-bash">ssh -J user@jump-server.dealiaxy.com:10023 -i /path/to/private_key user@target.dealiaxy.com
</code></pre>
<p>这样，你就可以实现完全免密的连接，进一步提高了登录效率。</p>
<h4 id="4-配置文件中使用-proxyjump">4. <strong>配置文件中使用 <code>ProxyJump</code></strong></h4>
<p>如果你不想每次都在命令行中手动输入跳板机的地址和端口，可以将 <code>-J</code> 配置写入 SSH 配置文件 <code>~/.ssh/config</code>。这样，你就能为不同的服务器设置简便的别名和配置，避免重复输入。</p>
<p>在 <code>~/.ssh/config</code> 文件中，你可以这样配置：</p>
<pre><code class="language-bash">Host target-server
  HostName target.dealiaxy.com
  User user
  ProxyJump user@jump-server.dealiaxy.com:10023
</code></pre>
<p>配置完成后，你只需要执行如下命令即可：</p>
<pre><code class="language-bash">ssh target-server
</code></pre>
<p>SSH 会自动根据配置文件中的 <code>ProxyJump</code> 参数，先连接到跳板机 <code>jump-server.dealiaxy.com</code>，再转发到目标服务器 <code>target.dealiaxy.com</code>。</p>
<h4 id="5-优点">5. <strong>优点</strong></h4>
<ul>
<li><strong>简洁高效</strong>：通过 <code>-J</code> 参数，SSH 客户端会自动处理跳板机的连接和转发，避免了手动输入两次命令。</li>
<li><strong>支持免密登录</strong>：通过配置 SSH 密钥对，可以实现免密登录，进一步提高效率。</li>
<li><strong>配置灵活</strong>：可以通过 <code>~/.ssh/config</code> 文件对多个目标主机设置跳板机配置，简化管理。</li>
</ul>
<hr>
<p>这就是使用 <code>-J</code> 参数（ProxyJump）来简化 SSH 跳板机连接的基本方法。它不仅提升了工作效率，还避免了手动输入多次密码或命令的繁琐。如果你的 SSH 版本支持 <code>-J</code> 参数，这无疑是最简单、最直接的解决方案。</p>
<h3 id="方法二使用-proxycommand">方法二：使用 <code>ProxyCommand</code></h3>
<p>在 OpenSSH 7.3 之前，<code>-J</code> 参数尚未出现，SSH 客户端并没有直接支持跳板机的简洁方式。然而，我们可以通过 <code>ProxyCommand</code> 来实现类似的功能，这种方法与 <code>-J</code> 相比，兼容性更好，适用于较旧版本的 SSH 客户端或那些不支持 <code>-J</code> 参数的情况。</p>
<p><code>ProxyCommand</code> 允许我们指定一个命令来作为跳板机的连接方式，通常我们可以利用 <code>nc</code>（netcat）命令来实现跳板机的连接。通过这种方式，SSH 客户端会在连接目标主机时，先与跳板机建立一个代理连接，然后通过代理连接转发数据流。</p>
<h4 id="1-基本语法-1">1. <strong>基本语法</strong></h4>
<p>在 SSH 配置文件中使用 <code>ProxyCommand</code> 的基本语法如下：</p>
<pre><code class="language-bash">Host &lt;target-host&gt;
  ProxyCommand ssh -q -W %h:%p &lt;jump-user&gt;@&lt;jump-host&gt; -p &lt;port&gt;
</code></pre>
<ul>
<li><code>&lt;target-host&gt;</code>：目标主机的地址，可以是域名或 IP。</li>
<li><code>&lt;jump-user&gt;</code>：跳板机的用户名。</li>
<li><code>&lt;jump-host&gt;</code>：跳板机的地址（可以是域名或 IP）。</li>
<li><code>&lt;port&gt;</code>：跳板机的端口（默认为 22，若有特殊端口需要指定）。</li>
<li><code>%h</code> 和 <code>%p</code>：表示目标主机的主机名和端口，SSH 会在连接时自动替换。</li>
</ul>
<h4 id="2-配置示例">2. <strong>配置示例</strong></h4>
<p>为了实现通过跳板机访问目标主机的功能，我们可以将以下配置添加到 SSH 客户端的配置文件中（<code>~/.ssh/config</code>）：</p>
<pre><code class="language-bash">Host target.dealiaxy.com
  ProxyCommand ssh -q -W %h:%p user@jump-server.dealiaxy.com -p 10023
</code></pre>
<p>这段配置意味着，每次我们尝试连接 <code>target.dealiaxy.com</code> 时，SSH 客户端都会首先通过跳板机 <code>jump-server.dealiaxy.com</code>（端口 <code>10023</code>）建立连接，然后通过跳板机将流量转发到目标服务器。</p>
<h4 id="3-使用配置后的简化命令">3. <strong>使用配置后的简化命令</strong></h4>
<p>配置好 <code>ProxyCommand</code> 后，我们就不再需要在命令行中指定跳板机和端口。只需要执行如下命令：</p>
<pre><code class="language-bash">ssh user@target.dealiaxy.com
</code></pre>
<p>SSH 客户端会自动通过 <code>ProxyCommand</code> 配置连接到跳板机，并将连接转发到目标主机 <code>target.dealiaxy.com</code>，整个过程无需手动指定任何跳板机的参数。</p>
<h4 id="4-配置文件的灵活性">4. <strong>配置文件的灵活性</strong></h4>
<p>在使用 <code>ProxyCommand</code> 时，配置文件的灵活性使得我们可以为不同的目标主机配置不同的跳板机。假设你有多个内网目标主机，可以为每个目标主机添加不同的配置：</p>
<pre><code class="language-bash">Host target1.dealiaxy.com
  ProxyCommand ssh -q -W %h:%p user@jump-server.dealiaxy.com -p 10023

Host target2.dealiaxy.com
  ProxyCommand ssh -q -W %h:%p user@jump-server.dealiaxy.com -p 10023
</code></pre>
<p>这样，在访问不同的目标时，你只需输入相应的主机名（如 <code>ssh user@target1.dealiaxy.com</code>），SSH 客户端会根据配置自动选择跳板机进行连接。</p>
<h4 id="5-小结">5. <strong>小结</strong></h4>
<p><code>ProxyCommand</code> 提供了一种灵活且兼容性较强的方式，帮助我们在不支持 <code>-J</code> 参数的 SSH 客户端中实现通过跳板机连接目标服务器的功能。尽管这种方法稍显复杂，但它仍然是一种非常有效的解决方案，尤其适合需要在多个环境中使用的用户。</p>
<hr>
<p>通过这种方式，你可以轻松实现从本地机器通过跳板机连接目标服务器，无需手动登录两次，从而节省了时间并提高了效率。如果你使用的是较老版本的 OpenSSH 客户端，<code>ProxyCommand</code> 无疑是一个很好的替代方案。</p>
<h2 id="进阶ssh-密钥管理--多跳板机">进阶：SSH 密钥管理 / 多跳板机</h2>
<p>在使用 SSH 连接时，通常推荐使用 SSH 密钥对进行身份验证，而不是使用密码。这不仅能够提高安全性，还能免去每次登录时手动输入密码的麻烦。此外，当涉及到多个跳板机或需要更加复杂的 SSH 配置时，我们还可以通过一些进阶的设置来进一步简化连接过程。</p>
<h3 id="1-ssh-密钥管理">1. <strong>SSH 密钥管理</strong></h3>
<p>SSH 密钥认证是一种更加安全且方便的身份验证方式。相比密码认证，密钥认证在以下方面具有明显优势：</p>
<ul>
<li><strong>安全性更高</strong>：密码容易被猜测或暴力破解，而 SSH 密钥通过加密算法生成，破解难度更大。</li>
<li><strong>免密登录</strong>：配置好公私钥对后，用户可以在不输入密码的情况下自动完成登录。</li>
</ul>
<h5 id="步骤-1生成-ssh-密钥对">步骤 1：生成 SSH 密钥对</h5>
<p>如果还没有 SSH 密钥对，可以通过以下命令生成：</p>
<pre><code class="language-bash">ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
</code></pre>
<p>这会在 <code>~/.ssh/</code> 目录下生成一对公钥（<code>id_rsa.pub</code>）和私钥（<code>id_rsa</code>）。在生成过程中，可以设置密钥的文件名和密码（可选）。</p>
<h5 id="步骤-2将公钥复制到跳板机和目标主机">步骤 2：将公钥复制到跳板机和目标主机</h5>
<p>为了使密钥认证生效，我们需要将公钥复制到目标主机和跳板机的 <code>~/.ssh/authorized_keys</code> 文件中。可以使用 <code>ssh-copy-id</code> 命令来自动完成这一操作：</p>
<pre><code class="language-bash">ssh-copy-id -i ~/.ssh/id_rsa.pub user@jump-server.dealiaxy.com
ssh-copy-id -i ~/.ssh/id_rsa.pub user@target.dealiaxy.com
</code></pre>
<p>执行完这两条命令后，你就可以通过 SSH 密钥对完成无密码登录。</p>
<h3 id="2-多跳板机的配置">2. <strong>多跳板机的配置</strong></h3>
<p>有时候，我们需要通过多个跳板机（Multi-hop）才能访问目标服务器。在这种情况下，我们可以继续利用 <code>ProxyCommand</code> 或 <code>-J</code> 参数来实现多跳板机的配置。</p>
<h5 id="21-使用--j-参数配置多跳板机">2.1 使用 <code>-J</code> 参数配置多跳板机</h5>
<p>假设我们需要通过两个跳板机才能访问目标服务器，第一台跳板机 <code>jump1.dealiaxy.com</code> 和第二台跳板机 <code>jump2.dealiaxy.com</code>。可以使用如下命令：</p>
<pre><code class="language-bash">ssh -J user@jump1.dealiaxy.com:10023 -J user@jump2.dealiaxy.com:10023 user@target.dealiaxy.com
</code></pre>
<p>在这个命令中，SSH 客户端会先连接到 <code>jump1.dealiaxy.com</code>，再从 <code>jump1</code> 转发连接到 <code>jump2.dealiaxy.com</code>，最后通过 <code>jump2</code> 转发到目标服务器 <code>target.dealiaxy.com</code>。</p>
<h5 id="22-使用-proxycommand-配置多跳板机">2.2 使用 <code>ProxyCommand</code> 配置多跳板机</h5>
<p>如果我们使用较老版本的 SSH 客户端，或者更喜欢手动配置 SSH 客户端的设置，可以在 SSH 配置文件（<code>~/.ssh/config</code>）中为多跳板机设置 <code>ProxyCommand</code>。示例如下：</p>
<pre><code class="language-bash">Host target.dealiaxy.com
  ProxyCommand ssh -q -W %h:%p user@jump1.dealiaxy.com -p 10023
  ProxyCommand ssh -q -W %h:%p user@jump2.dealiaxy.com -p 10023
</code></pre>
<p>在此配置中，SSH 客户端首先会通过 <code>jump1.dealiaxy.com</code> 建立连接，再通过 <code>jump2.dealiaxy.com</code> 将流量转发到目标主机 <code>target.dealiaxy.com</code>。</p>
<h3 id="3-配置多个目标主机的密钥">3. <strong>配置多个目标主机的密钥</strong></h3>
<p>如果你有多个目标主机，并且每个目标主机使用不同的 SSH 密钥进行认证，你可以为不同的主机配置不同的密钥。可以通过 <code>IdentityFile</code> 参数来指定不同的私钥文件。例如，在 SSH 配置文件中，可以为每个主机设置不同的 SSH 密钥：</p>
<pre><code class="language-bash">Host target1.dealiaxy.com
  IdentityFile ~/.ssh/id_rsa_target1

Host target2.dealiaxy.com
  IdentityFile ~/.ssh/id_rsa_target2
</code></pre>
<p>这样，当你连接到 <code>target1.dealiaxy.com</code> 或 <code>target2.dealiaxy.com</code> 时，SSH 客户端会自动使用对应的私钥进行认证。</p>
<h3 id="4-优化连接速度使用-controlmaster">4. <strong>优化连接速度：使用 ControlMaster</strong></h3>
<p>在连接过程中，每次与跳板机和目标主机的连接都会涉及到建立新的 SSH 会话。为了提高效率，减少连接延迟，我们可以利用 SSH 的 <strong>ControlMaster</strong> 功能，通过复用现有的 SSH 会话来加速后续的连接。可以在 SSH 配置文件中添加如下配置：</p>
<pre><code class="language-bash">Host jump-server.dealiaxy.com
  ControlMaster auto
  ControlPath ~/.ssh/cm_socket/%r@%h:%p
  ControlPersist 10m

Host target.dealiaxy.com
  ControlMaster auto
  ControlPath ~/.ssh/cm_socket/%r@%h:%p
  ControlPersist 10m
</code></pre>
<p>在这个配置中，SSH 会将跳板机和目标主机的连接保持在后台（最多 10 分钟），如果在此时间内重新连接，SSH 会直接复用现有连接，显著减少连接建立的时间。</p>

</div>
<div id="MySignature" role="contentinfo">
    微信公众号：「程序设计实验室」
专注于互联网热门新技术探索与团队敏捷开发实践，包括架构设计、机器学习与数据分析算法、移动端开发、Linux、Web前后端开发等，欢迎一起探讨技术，分享学习实践经验。
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.014286763006944444" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-18 11:56">2025-01-18 11:55</span>&nbsp;
<a href="https://www.cnblogs.com/deali">程序设计实验室</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18678315" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18678315);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18678315', targetLink: 'https://www.cnblogs.com/deali/p/18678315', title: 'SSH 跳板机原理与配置：实现无缝跳板连接，一步直达目标主机' })">举报</a>
</div>
        