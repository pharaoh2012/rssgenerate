
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chaoguo1234/p/18778101" title="发布于 2025-03-18 02:25">
    <span role="heading" aria-level="2">WebKit Inside: CSS 的匹配原理</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        WebKit Inside: CSS 的匹配原理
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>相关文章</p>
</blockquote>
<p><a href="https://www.cnblogs.com/chaoguo1234/p/15921356.html" target="_blank">WebKit Inside: CSS 样式表的解析</a></p>
<p><a href="https://www.cnblogs.com/chaoguo1234/p/17743557.html" target="_blank">WebKit Inside: CSS 样式表的匹配时机</a></p>
<p><a href="https://www.cnblogs.com/chaoguo1234/p/17744843.html" target="_blank">WebKit Inside: Acitvie 样式表</a></p>
<p>当<code>WebView</code>解析完所有外部与内联样式表，就要进入到<code>CSS</code>样式表的匹配阶段。</p>
<h1 id="1-相关类图">1 相关类图</h1>
<p><code>WebKit</code>中参与<code>CSS</code>样式表匹配的主要类如下图所示:</p>
<p><img src="https://img2024.cnblogs.com/blog/489427/202503/489427-20250318021342375-1557968022.png" alt="image" loading="lazy"></p>
<h2 id="11-document">1.1 Document</h2>
<p><code>Document</code>代表将<code>HTML</code>文件解析后的<code>DOM</code>文档。</p>
<h2 id="12-stylescope">1.2 Style::Scope</h2>
<p><code>Style::Scope</code>代表整个文档里面的所有样式表。</p>
<p><code>Style::SCope</code>里面的<code>2</code>个属性:</p>
<p><code>m_styleSheetsForStyleSheetList</code>数组，存储文档里面所有的样式表。</p>
<p><code>m_activeStyleSheets</code>数组，存储文档里所有生效的<code>Active</code>样式表。</p>
<p>有关<code>Active</code>样式表，可以参看<a href="https://www.cnblogs.com/chaoguo1234/p/17744843.html" target="_blank">《WebKit Iniside: Active 样式表》</a>。</p>
<h2 id="13-styleresolver">1.3 Style::Resolver</h2>
<p><code>Style::Resolver</code>用来对一个<code>DOM</code>元素<code>Element</code>匹配其相关样式。</p>
<p><code>ScopeRuleSets</code>管理<code>RuleSet</code>。</p>
<p><code>ScopeRuleSets</code>里面的<code>2</code>个属性:</p>
<p><code>m_authorStyle</code>存储着所有「作者样式表」的<code>StyleRule</code>。</p>
<p><code>m_userStyle</code>存着所有「用户样式表」的<code>StyleRule</code>。</p>
<h2 id="14-样式表的分类">1.4 样式表的分类</h2>
<p>在这里介绍一下:</p>
<ul>
<li>
<p><code>UserAgent</code>样式表</p>
</li>
<li>
<p>作者(<code>Author</code>)样式表</p>
</li>
<li>
<p>用户(<code>User</code>)样式表</p>
</li>
<li>
<p><code>Active</code>样式表</p>
</li>
</ul>
<p>之间的关系。</p>
<p><code>UserAgent</code>样式表就是浏览器内置的样式表。</p>
<p>平时我们即使在<code>HTML</code>页面里面不提供任何样式表，但是显示出来的元素仍具有一些默认样式，就是<code>UserAgent</code>样式表的功劳。</p>
<p>作者样式表就是编写<code>HTML</code>页面的作者提供的样式表，由页面内<code>&lt;link&gt;</code> <code>&lt;style&gt;</code>标签提供。</p>
<p>用户样式表指浏览器通常允许网页浏览者自己编写样式表给页面使用，这样的样式表叫用户样式表。</p>
<p><code>Active</code>样式表是那些在<code>HTML</code>里面真正起作用，生效的样式表。</p>
<p><code>Active</code>样式表可能来源于作者样式表，也可能来源于用户样式表。</p>
<p><img src="https://img2024.cnblogs.com/blog/489427/202503/489427-20250318021419281-392737325.png" alt="image" loading="lazy"></p>
<h2 id="15-ruleset">1.5 RuleSet</h2>
<p><code>RuleSet</code>内部分门别类存储各类<code>StyleRule</code>数据。</p>
<p><code>RuleSet</code>里有许多<code>Map</code>。</p>
<p><code>Map</code>的<code>key</code>就是<code>StyleRule</code>中的<code>selector</code>名。</p>
<p><code>Map</code>的<code>value</code>是一个<code>StyleData</code>数组，因为一个<code>selector</code>可能对应多条<code>StyleRule</code>。</p>
<p>从图中可以看到，<code>StyleData</code>持有<code>StyleRule</code>。</p>
<h2 id="16-stylerule">1.6 StyleRule</h2>
<p><code>StyleRule</code>就是将<code>HTML</code>页面里样式表解析之后的数据结构。</p>
<p><code>StyleRule</code>的组成如下图所示:</p>
<p><img src="https://img2024.cnblogs.com/blog/489427/202503/489427-20250318021514986-1506189605.jpg" alt="image" loading="lazy"></p>
<h2 id="17-elementrulecollector">1.7 ElementRuleCollector</h2>
<p><code>ElementRuleCollector</code>针对某一个元素<code>Element</code>，收集所有与这个<code>Element</code>相匹配的样式。</p>
<p>最终，所有与这个<code>Element</code>匹配的样式，存储在<code>MatchResult</code>中。</p>
<h2 id="18-matchresult">1.8 MatchResult</h2>
<p><code>MatchResult</code>存储与某个<code>Element</code>匹配的所有样式，实际上存储的是匹配样式的属性名和属性值。</p>
<p><code>MatchResult</code>分<code>3</code>个属性分别存储:</p>
<p><code>m_userAgentDeclarations</code>存储<code>userAgent</code>样式表的值。</p>
<p><code>m_authorDeclarations</code>存储作者样式表的值。</p>
<p><code>m_userDeclarations</code>存储用户样式表的值。</p>
<h2 id="19-element">1.9 Element</h2>
<p><code>Element</code>就是要进行样式匹配的元素。</p>
<p><code>Style::TreeResolver</code>会依次遍历整个<code>DOM</code>树，对<code>DOM</code>树上的每个<code>Element</code>元素进行匹配。</p>
<h2 id="110-styletreeresolver">1.10 Style::TreeResolver</h2>
<p><code>Style::TreeResolver</code>用来遍历<code>DOM</code>树上的<code>Element</code>元素。</p>
<p>被遍历的<code>Element</code>元素，会进行样式匹配。</p>
<h2 id="111-styleable">1.11 Styleable</h2>
<p><code>Styleable</code>在匹配中用处不大，主要是封装了<code>Element</code>，作为函数参数传递。</p>
<h2 id="112-styleupdate">1.12 Style::Update</h2>
<p><code>Style::Update</code>将整个<code>DOM</code>树上，所有<code>Element</code>匹配的样式存储在一个<code>Map</code>中。</p>
<p><code>Map</code>的<code>key</code>就是<code>Element</code>。</p>
<p><code>Map</code>的<code>value</code>是<code>ElementUpdate</code>。</p>
<h2 id="113-elementupdate">1.13 ElementUpdate</h2>
<p><code>ElementUpdate</code>封装了最后的匹配结果<code>RenderStyle</code>。</p>
<h2 id="114-resolvedstyle">1.14 ResolvedStyle</h2>
<p><code>ResolvedStyle</code>主要是作为函数返回值，封装了最后的匹配结果<code>RenderStyle</code>。</p>
<h2 id="115-resolverstate">1.15 Resolver::State</h2>
<p>一个<code>Element</code>最终的匹配结果<code>RenderStyle</code>对象，由<code>Resolver::State</code>创建出来。</p>
<h2 id="116-renderstyle">1.16 RenderStyle</h2>
<p><code>RenderStyle</code>存储最终的匹配结果。</p>
<p>为什么是最终的匹配结果？</p>
<p>它和<code>MatchResult</code>有什么区别？</p>
<p><code>MatchResult</code>存储的都是样式表里面原始的值。</p>
<p>比如，如果一个样式表里面有一条关于字号的属性被匹配上:</p>
<pre><code class="language-css">font-size: 20pt;
</code></pre>
<p>那么，<code>MatchResult</code>里面存储的属性名是<code>font-size</code>，属性值是<code>20pt</code>。</p>
<p>而在<code>RenderStyle</code>中，存储的属性值会被计算成对应的<code>px</code>值。</p>
<p>也就是<code>pt</code>值被转换成了对应的<code>px</code>值。</p>
<h2 id="117-stylebuilder">1.17 Style::Builder</h2>
<p><code>RenderStyle</code>中最终的属性值，就是由<code>Style::Builder</code>进行转换。</p>
<h2 id="118-propertycascade">1.18 PropertyCascade</h2>
<p><code>PropertyCascade</code>封装了<code>MatchResult</code>，用于计算<code>RenderStyle</code>。</p>
<h2 id="119-builderstate">1.19 BuilderState</h2>
<p><code>BuilderState</code>封装了<code>RenderStyle</code>，用于<code>Style::Builder</code>对<code>RenderStyle</code>的计算。</p>
<h2 id="120-stylebuildergenerated">1.20 Style::BuilderGenerated</h2>
<p><code>Style::Builder</code>把最终对<code>RenderStyle</code>的计算，转交给<code>Style::BuilderGenerated</code>来完成。</p>
<p><code>CSS</code>样式表的匹配涉及的类比较多。</p>
<p>清楚了这些主要类的作用，<code>CSS</code>匹配的大致过程基本上也就比较清楚了。</p>
<h1 id="2-css-匹配入口">2 CSS 匹配入口</h1>
<p><code>CSS</code>匹配入口调用栈如下:</p>
<p><img src="https://img2024.cnblogs.com/blog/489427/202503/489427-20250318021611777-1000316742.png" alt="image" loading="lazy"></p>
<p>上图可以看到，<code>CSS</code>匹配入口的函数为:</p>
<pre><code class="language-c++">void Document::resolveStyle(ResolveStyleType type)
</code></pre>
<p>这个函数内部创建<code>Style::TreeResolver</code>对象，开始样式的匹配:</p>
<pre><code class="language-c++">Style::TreeResolver resolver(*this, WTFMove(m_pendingRenderTreeUpdate));
auto styleUpdate = resolver.resolve();
</code></pre>
<h1 id="3-dom-树的遍历">3 DOM 树的遍历</h1>
<p><code>DOM</code>树的遍历涉及很多栈的操作。</p>
<p>在遍历之前，下面函数:</p>
<pre><code class="language-c++">std::unique_ptr&lt;Update&gt; TreeResolver::resolve()
</code></pre>
<p>会设置<code>2</code>个栈:</p>
<pre><code class="language-c++">m_scopeStack.append(adoptRef(*new Scope(m_document, *m_update)));
m_parentStack.append(Parent(m_document));

resolveComposedTree();
</code></pre>
<p><code>m_scopeStack</code>存储的是<code>Style::TreeResolver::Scope</code>对象。</p>
<p><code>Style::TreeResolver::Scope</code>代表当前的样式匹配，适用的范围。</p>
<p>通常情况下，在整个匹配过程中，<code>m_scopeStack</code>栈里面会只有一个元素，也就是:</p>
<pre><code class="language-c++">adoptRef(*new Scope(m_document, *m_update))
</code></pre>
<p>除非在匹配过程中遇到 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components/Using_shadow_DOM" title="什么是 Shadow DOM" target="_blank" rel="noopener nofollow">Shadow DOM</a>。</p>
<p>因为<code>Shadow DOM</code>和当前文档的样式表是隔离的，互不影响的。</p>
<p><code>m_parentStack</code>存储的是<code>Style::TreeResolver::Parent</code>对象。</p>
<p><code>Style::TreeResolver::Parent</code>代表当前正在匹配元素<code>Element</code>的父元素，以及这个父元素的<code>RenderStyle</code>对象。</p>
<p>在遍历之前，<code>m_scopeStack</code>和<code>m_parentStack</code>的存储值如下:</p>
<p><img src="https://img2024.cnblogs.com/blog/489427/202503/489427-20250318021705354-969334854.jpg" alt="image" loading="lazy"></p>
<p>遍历<code>DOM</code>在下面函数中完成:</p>
<pre><code class="language-c++">void TreeResolver::resolveComposedTree()
</code></pre>
<p>我们先忽略匹配过程，专门看下遍历的逻辑，关注下遍历的顺序。</p>
<p>首先看下与遍历相关的迭代器的类图:</p>
<p><img src="https://img2024.cnblogs.com/blog/489427/202503/489427-20250318021720838-1924095053.png" alt="image" loading="lazy"></p>
<p>类图中又引入了<code>2</code>个栈结构:</p>
<p><code>m_contextStack</code>栈顶存储当前真正的迭代器实现，这个迭代器引用当前正在遍历的节点。</p>
<p><code>m_ancestorSiblingStack</code>栈顶存储当前正在遍历节点的父节点的相邻兄弟节点。</p>
<p>遍历的代码如下:</p>
<pre><code class="language-c++">void TreeResolver::resolveComposedTree()
{
    ASSERT(m_parentStack.size() == 1);
    ASSERT(m_scopeStack.size() == 1);

    auto descendants = composedTreeDescendants(m_document);
    auto it = descendants.begin();
    auto end = descendants.end();

    // 1. it 是开始迭代器，类型为 ComposedTreeIterator
    //    end 是结束迭代器，类型也为 ComposedTreeIterator，它内部的状态都是 null
    while (it != end) {
        // 2. pop m_parentStack，直到 m_parentStack 的 size 等于当前节点的深度
        //    一开始遍历的时候，HTML 节点的深度为 1
        popParentsToDepth(it.depth());

        // 3. 获取正在遍历的节点
        auto&amp; node = *it;
        // 4. 获取 m_parentStack 的栈顶元素，它是当前遍历节点的父节点
        auto&amp; parent = this-&gt;parent();
        
        ...

        // 5. Element 类继承自 Node 类，这里进行强转
        auto&amp; element = downcast&lt;Element&gt;(node);

        if (it.depth() &gt; Settings::defaultMaximumRenderTreeDepth) {
            resetStyleForNonRenderedDescendants(element);
            it.traverseNextSkippingChildren();
            continue;
        }

        auto* style = existingStyle(element);
        auto change = Change::None;
        auto descendantsToResolve = DescendantsToResolve::None;
        auto resolutionType = determineResolutionType(element, style, parent.descendantsToResolve, parent.change);

        if (resolutionType) {
            element.resetComputedStyle();

            ...

            // 6. 给当前 Element 节点进行样式匹配
            auto [elementUpdate, elementDescendantsToResolve] = resolveElement(element, style, *resolutionType);

            ...
        }

        ...

        // 7. 如果当前遍历的节点没有匹配到任何样式，说明这个节点是不能渲染出来，比如 HEAD 节点
        if (!shouldIterateChildren) {
            // 8. 跳转到当前遍历节点相邻的兄弟节点，比如从 HEAD 节点跳转到 BODY 节点
            it.traverseNextSkippingChildren();
            continue;
        }

        ...

        // 9. 如果当前节点匹配样式成功，将当前节点压入 m_parentStack
        pushParent(element, *style, change, descendantsToResolve, isInDisplayNoneTree ? IsInDisplayNoneTree::Yes : IsInDisplayNoneTree::No);

        // 10. 遍历移动到当前节点的第一个子节点
        it.traverseNext();
    }

    // 11. 整个 DOM 树遍历结束，pop m_parentStack 到 size = 1
    popParentsToDepth(1);
}
</code></pre>
<p>代码注释<code>1</code>创建了<code>2</code>个<code>ComposedTreeIterator</code>对象:<code>it</code>和<code>end</code>。</p>
<p><code>it</code>是开始迭代器，与之相关的栈结构为:</p>
<p><img src="https://img2024.cnblogs.com/blog/489427/202503/489427-20250318021743725-69970895.jpg" alt="image" loading="lazy"></p>
<p><code>end</code>是结束迭代器，其内部结构都是<code>null</code>。</p>
<p>代码注释<code>2``pop``m_parentStack</code>，使其<code>size</code>等于当前遍历节点的深度。</p>
<p>由于开始遍历的节点是<code>HTML</code>节点，其深度等于<code>1</code>，因此这里对<code>m_parentStack</code>没有影响。</p>
<p>代码注释<code>3</code>从迭代器获取当前正在遍历的节点。</p>
<p>代码注释<code>4</code>从<code>m_ParentStack</code>获取栈顶元素。</p>
<p>代码注释<code>5</code>将当前遍历的<code>Node</code>节点，强转为<code>Element</code>，因为<code>Element</code>继承自<code>Node</code>。</p>
<p>代码注释<code>6</code>对当前遍历的<code>Element</code>匹配相关的样式。</p>
<p>代码注释<code>7</code>判断，如果当前遍历的节点，没有匹配到任何样式，那么，说明这个节点是不可以渲染的，比如<code>HEAD</code>节点。</p>
<p>如果出现了这种情况，就需要将当前遍历的节点移动到它的相邻兄弟节点上。</p>
<p>代码注释<code>8</code>正是做了这个操作。</p>
<p>代码注释<code>9</code>，如果当前遍历的节点正确匹配到了样式，那么，将其压入<code>m_parentStack</code>栈中。</p>
<p>代码注释<code>10</code>，将当前遍历的节点移动到其第一个子节点。</p>
<p>代码注释<code>11</code>，整个<code>DOM</code>树遍历结束，<code>pop``m_parentStack</code>，使其<code>size</code>等于<code>1</code>。</p>
<p>下图给出了一个完整<code>DOM</code>树完整遍历的流程:</p>
<p><img src="https://img2024.cnblogs.com/blog/489427/202503/489427-20250318021759372-344601324.png" alt="image" loading="lazy"></p>
<h1 id="4-匹配过程">4 匹配过程</h1>
<p><code>CSS</code>样式表匹配最终是为了获得<code>MatchResult</code>对象。</p>
<p>在上面遍历每一个<code>DOM</code>节点时，会经历下面的调用栈:</p>
<pre><code class="language-c++">auto TreeResolver::resolveElement(Element&amp; element, const RenderStyle* existingStyle, ResolutionType resolutionType) -&gt; std::pair&lt;ElementUpdate, DescendantsToResolve&gt;
  ResolvedStyle TreeResolver::styleForStyleable(const Styleable&amp; styleable, ResolutionType resolutionType, const ResolutionContext&amp; resolutionContext, const RenderStyle* existingStyle)
    ResolvedStyle Resolver::styleForElement(Element&amp; element, const ResolutionContext&amp; context, RuleMatchingBehavior matchingBehavior)
</code></pre>
<p>上面调用栈最后一个函数的关键实现如下:</p>
<pre><code class="language-c++">ResolvedStyle Resolver::styleForElement(Element&amp; element, const ResolutionContext&amp; context, RuleMatchingBehavior matchingBehavior)
{
    // 1. 创建 Resolver::State 对象，以及 Resolver::State 内部持有的 RenderStyle 对象
    auto state = initializeStateAndStyle(element, context);

    ...

    // 2. 创建 ElementRuleCollector 对象，准备收集 Element 匹配的样式
    //    m_ruleSets 包含了页面里面所有的 StyleRule
    ElementRuleCollector collector(element, m_ruleSets, context.selectorMatchingState);

    ...

    if (matchingBehavior == RuleMatchingBehavior::MatchOnlyUserAgentRules)
        collector.matchUARules();
    else
        // 3. 收集匹配的样式
        collector.matchAllRules(m_matchAuthorAndUserStyles, matchingBehavior != RuleMatchingBehavior::MatchAllRulesExcludingSMIL);
    
    ...
}
</code></pre>
<p>代码注释<code>1</code>，创建 Resolver::State 对象，以及 Resolver::State 内部持有的 RenderStyle 对象。</p>
<p>在这个函数中，还会继承父元素中可继承的<code>CSS</code>样式:</p>
<pre><code class="language-c++"> state.style()-&gt;inheritFrom(*state.parentStyle());
</code></pre>
<p>代码注释<code>2</code>，创建<code>ElementRuleCollector</code>对象，准备收集<code>Element</code>匹配的样式。</p>
<p>其中，<code>Resolver</code>对象的属性<code>m_ruleSets</code>正是<code>ScopeRuleSets</code>，包含了页面所有的<code>StyleRule</code>。</p>
<p>代码注释<code>3</code>，收集匹配的样式。</p>
<p>代码注释<code>3</code>的函数，主要实现如下:</p>
<pre><code class="language-c++">void ElementRuleCollector::matchAllRules(bool matchAuthorAndUserStyles, bool includeSMILProperties)
{
    // 1. 匹配 UserAgent 样式
    matchUARules();

    // Now we check user sheet rules.
    if (matchAuthorAndUserStyles)
        // 2. 匹配 UserStyle 样式
        matchUserRules();

    ...

    if (matchAuthorAndUserStyles) {
        ...
        // 3. 匹配 Author 样式
        collectMatchingRules(CascadeLevel::Author);
        // 4. 对匹配的样式根据优先级排序
        sortMatchedRules();

        ....

        // Inline style behaves as if it has higher specificity than any rule.
        // 5. 添加标签里面的 style 属性
        addElementInlineStyleProperties(includeSMILProperties);

        // Rules from the host scopes override inline style.
        // 6. 从匹配的 StyleRule 生成 MatchResult
        transferMatchedRules(DeclarationOrigin::Author);
    }
}
</code></pre>
<p>代码注释<code>1</code>，匹配<code>UserAgent</code>样式，也就是默认样式。</p>
<p>代码注释<code>2</code>，匹配<code>UserStyle</code>样式。</p>
<p>代码注释<code>3</code>，匹配<code>Author</code>样式。</p>
<p>代码注释<code>4</code>，根据匹配成功样式的优先级，进行排序。</p>
<p>代码注释<code>5</code>，添加行样式，也就是添加标签的<code>style</code>属性。</p>
<p>代码注释<code>6</code>，将匹配成功的<code>StyleRule</code>对象，转换成<code>MatchResult</code>对象。</p>
<h2 id="41-收集匹配的样式">4.1 收集匹配的样式</h2>
<p>无论匹配<code>UserAgent</code>样式、<code>UserStyle</code>样式、<code>Author</code>样式，最终代码都会调用到上面注释<code>3</code>的函数:</p>
<pre><code class="language-c++">void ElementRuleCollector::collectMatchingRules(CascadeLevel level)
</code></pre>
<p>匹配的总体流程大致是相似的，下面以匹配<code>Author</code>样式为例介绍。</p>
<p><code>ElementRuleCollector::collectMatchingRules</code>函数的实现如下:</p>
<pre><code class="language-c++">void ElementRuleCollector::collectMatchingRules(CascadeLevel level)
{
    switch (level) {
    case CascadeLevel::Author: {
        // 1. 封装所有 Author 样式表的 StyleRule 到 MatchRequest
        MatchRequest matchRequest(m_authorStyle);
        // 2. 开始收集工作
        collectMatchingRules(matchRequest);
        if (isFirstMatchModeAndHasMatchedAnyRules())
            return;
        break;
    }
    ...
    }
}
</code></pre>
<p>代码注释<code>1</code>，<code>m_authorStyle</code>是一个<code>RuleSet</code>对象，里面包含了所有<code>Active</code>样式表中的<code>StyleRule</code>。</p>
<p>这里将<code>m_authorStyle</code>再次封装到<code>MatchRequest</code>对象中。</p>
<p>代码注释<code>2</code>，调用了<code>collectMatchingRules</code>的一个重载函数，收集<code>MatchRequest</code>对象中匹配的样式。</p>
<p>重载的<code>collectMatchingRules</code>主要是根据不同的<code>CSS</code>选择器，进行匹配样式表的收集:</p>
<pre><code class="language-c++">void ElementRuleCollector::collectMatchingRules(const MatchRequest&amp; matchRequest)
{

    ....
    // 1. 获取要匹配的元素节点
    auto&amp; element = this-&gt;element();
    ....

    // We need to collect the rules for id, class, tag, and everything else into a buffer and
    // then sort the buffer.
    // 2. 获取这个元素节点上的 id 选择器
    auto&amp; id = element.idForStyleResolution();
    if (!id.isNull())
        // 3. 收集这个 id 下，所有匹配的 StyleRule
        collectMatchingRulesForList(matchRequest.ruleSet.idRules(id), matchRequest);
    if (element.hasClass()) {
        for (auto&amp; className : element.classNames())
            // 4. 遍历这个元素节点上的所有 class 选择器，收集每一个 class 上匹配的 StyleRule
            collectMatchingRulesForList(matchRequest.ruleSet.classRules(className), matchRequest);
    }
    if (element.hasAttributesWithoutUpdate() &amp;&amp; matchRequest.ruleSet.hasAttributeRules()) {
        Vector&lt;const RuleSet::RuleDataVector*, 4&gt; ruleVectors;
        for (auto&amp; attribute : element.attributes()) {
            // 5. 遍历这个元素节点上的所有属性选择器，将对应的 StyleRule 收集到 ruleVectors 数组
            if (auto* rules = matchRequest.ruleSet.attributeRules(attribute.localName(), isHTML))
                ruleVectors.append(rules);
        }
        for (auto* rules : ruleVectors)
            // 6. 收集 ruleVectors 中匹配的 StyleRule
            collectMatchingRulesForList(rules, matchRequest);
    }
    ...
    // 7. 收集 tag 标签选择器下，所有匹配的 StyleRule
    collectMatchingRulesForList(matchRequest.ruleSet.tagRules(element.localName(), isHTML), matchRequest);
    // 8. 收集 * 通用选择器下，所有匹配的 StyleRule
    collectMatchingRulesForList(matchRequest.ruleSet.universalRules(), matchRequest);
}
</code></pre>
<p>代码注释<code>1</code>，获取要匹配的元素节点。</p>
<p>代码注释<code>2</code>，获取这个元素节点上的<code>id</code>选择器。</p>
<p>代码注释<code>3</code>，获取这个<code>id</code>选择器下，所有匹配的<code>StyleRule</code>。</p>
<p>从上面的类图可以知道，<code>RuleSet</code>内部，已经根据不同类型的选择器，构建了对应<code>Map</code>，这里:</p>
<pre><code class="language-c++">matchRequest.ruleSet.idRules(id)
</code></pre>
<p>就是获取了这个<code>id</code>关联下的所有<code>StyleRule</code>。</p>
<p>下面的各个选择器也是类似的操作。</p>
<p>代码注释<code>4</code>，遍历这个元素节点上的所有<code>class</code>选择器，收集匹配的<code>StyleRule</code>。</p>
<p>代码注释<code>5</code> <code>6</code>，遍历这个元素节点上所有的属性选择器，收集匹配的<code>StyleRule</code>。</p>
<p>代码注释<code>7</code>，收集这个元素<code>tag</code>标签选择器下，所有匹配的<code>StyleRule</code>。</p>
<p>代码注释<code>8</code>，收集<code>*</code>通用选择器下，所有匹配的<code>StyleRule</code>。</p>
<p>所有的匹配操作都调用<code>collectMatchingRulesForList</code>，下面看下这个函数的主要实现:</p>
<pre><code class="language-c++">void ElementRuleCollector::collectMatchingRulesForList(const RuleSet::RuleDataVector* rules, const MatchRequest&amp; matchRequest)
{
    ...

    // 1. 遍历上一步函数中，传递下来的所有`StyleRule`，用来匹配
    for (auto&amp; ruleData : *rules) {
        ...

        auto addRuleIfMatches = [&amp;] (const ScopingRootWithDistance&amp; scopingRootWithDistance = { }) {
            unsigned specificity;
            if (ruleMatches(ruleData, specificity, matchRequest.styleScopeOrdinal, scopingRootWithDistance.scopingRoot.get()))
                // 3. 如果当前 StyleRule 匹配成功，就将这条 StyleRule 存储下来
                addMatchedRule(ruleData, specificity, scopingRootWithDistance.distance, matchRequest);
        };

        ...
        
        // 2. 调用 addRuleIfMatches 闭包
        addRuleIfMatches();
        ...
    }
}
</code></pre>
<p>代码注释<code>1</code>，遍历上一步函数中，传递下来的<code>StyleRule</code>数组。</p>
<p>从前面类图知道，<code>RuleData</code>内部封装了<code>StyleRule</code>。</p>
<p>代码注释<code>2</code>，调用定义在函数内部的<code>addRuleIfMatches</code>闭包。</p>
<p>代码注释<code>3</code>，如果当前<code>StyleRule</code>匹配成功，就将这条<code>StyleRule</code>存储下来。</p>
<p>存储的函数实现如下:</p>
<pre><code class="language-c++">inline void ElementRuleCollector::addMatchedRule(const RuleData&amp; ruleData, unsigned specificity, unsigned scopingRootDistance, const MatchRequest&amp; matchRequest)
{
    auto cascadeLayerPriority = matchRequest.ruleSet.cascadeLayerPriorityFor(ruleData);
    // 将结果存储在 ElementCollector 对象中的 m_matchedRules 属性中
    m_matchedRules.append({ &amp;ruleData, specificity, scopingRootDistance, matchRequest.styleScopeOrdinal, cascadeLayerPriority });
}
</code></pre>
<p>上面函数，将匹配的一条<code>StyleRule</code>存储在<code>ElementCollector</code>对象的<code>m_matchedRules</code>数组中。</p>
<p>注意存储的时候，除了存储<code>StyleRule</code>数据，还存储了<code>specificity</code>等其他参数，这些都与样式的优先级有关。</p>
<p>总结一匹配过程，每一个<code>Element</code>，都会创建一个全新的<code>ElementRuleCollector</code>对象来进行匹配过程，匹配的所有<code>StyleRule</code>会存储在<code>m_matchedRules</code>数组中。</p>
<p><img src="https://img2024.cnblogs.com/blog/489427/202503/489427-20250318021855017-1746519097.jpg" alt="image" loading="lazy"></p>
<h2 id="42-排序">4.2 排序</h2>
<p>获取到匹配成功的<code>StyleRule</code>之后，上面说过，存储在<code>m_matchedRules</code>的数据还有其他优先级相关的数据，为接下来的排序做准备。</p>
<p>排序函数的调用在上面函数:</p>
<pre><code class="language-c++">void ElementRuleCollector::matchAllRules(bool matchAuthorAndUserStyles, bool includeSMILProperties)
</code></pre>
<p>介绍时的注释<code>4</code>处。</p>
<p>排序函数的实现很简单，就是调用了<code>std</code>的排序函数:</p>
<pre><code class="language-c++">void ElementRuleCollector::sortMatchedRules()
{
    std::sort(m_matchedRules.begin(), m_matchedRules.end(), compareRules);
}
</code></pre>
<p><code>std::sort</code>函数使用一个比较函数<code>compareRules</code>进行降序排序，优先级越高，排序越靠前:</p>
<pre><code class="language-c++">static inline bool compareRules(MatchedRule r1, MatchedRule r2)
{
    // For normal properties the earlier scope wins. This may be reversed by !important which is handled when resolving cascade.
    if (r1.styleScopeOrdinal != r2.styleScopeOrdinal)
        return r1.styleScopeOrdinal &gt; r2.styleScopeOrdinal;

    if (r1.cascadeLayerPriority != r2.cascadeLayerPriority)
        return r1.cascadeLayerPriority &lt; r2.cascadeLayerPriority;

    if (r1.specificity != r2.specificity)
        return r1.specificity &lt; r2.specificity;

    // Rule with the smallest distance has priority.
    if (r1.scopingRootDistance != r2.scopingRootDistance)
        return r2.scopingRootDistance &lt; r1.scopingRootDistance;

    return r1.ruleData-&gt;position() &lt; r2.ruleData-&gt;position();
}
</code></pre>
<h2 id="43-最终的匹配结果">4.3 最终的匹配结果</h2>
<p>前面说过，最终的匹配结果是存储在<code>MatchResult</code>对象中的属性。</p>
<p>而到目前为止，得到的还是存储在<code>m_machedRules</code>数组中的<code>StyleRule</code>。</p>
<p>在上面介绍的函数:</p>
<pre><code class="language-c++">void ElementRuleCollector::matchAllRules(bool matchAuthorAndUserStyles, bool includeSMILProperties)
</code></pre>
<p>的注释<code>6</code>处，会将最终的匹配结果转换成<code>MatchResult</code>。</p>
<p>转换函数主要实现如下:</p>
<pre><code class="language-c++">void ElementRuleCollector::transferMatchedRules(DeclarationOrigin declarationOrigin, std::optional&lt;ScopeOrdinal&gt; fromScope)
{
    ...
    for (; m_matchedRuleTransferIndex &lt; m_matchedRules.size(); ++m_matchedRuleTransferIndex) {
        // 1. 遍历存储在 m_matchedRules 当中匹配的 StyleRule
        auto&amp; matchedRule = m_matchedRules[m_matchedRuleTransferIndex];
        ...
        // 2. 将每一条匹配的 StyleRule 添加到 MatchResult 对象中。
        addMatchedProperties({
            matchedRule.ruleData-&gt;styleRule().properties(),
            static_cast&lt;uint8_t&gt;(matchedRule.ruleData-&gt;linkMatchType()),
            matchedRule.ruleData-&gt;propertyAllowlist(),
            matchedRule.styleScopeOrdinal,
            FromStyleAttribute::No,
            matchedRule.cascadeLayerPriority,
            matchedRule.ruleData-&gt;isStartingStyle()
        }, declarationOrigin);
    }
}
</code></pre>
<p>代码注释<code>1</code>，遍历存储在<code>m_matchedRules</code>当中匹配的<code>StyleRule</code>。</p>
<p>代码注释<code>2</code>，将每一条匹配的<code>StyleRule</code>添加到<code>MatchResult</code>对象中。</p>
<p>添加到<code>MatchResult</code>的函数相关代码如下:</p>
<pre><code class="language-c++">void ElementRuleCollector::addMatchedProperties(MatchedProperties&amp;&amp; matchedProperties, DeclarationOrigin declarationOrigin)
{
    // 1. 获取 MatchResult 对象中对应的属性声明数组
    auto&amp; declarations = declarationsForOrigin(declarationOrigin);
    ...

    // 2. 将匹配的 StyleRule 中的属性添加到 MatchResult 对象
    declarations.append(WTFMove(matchedProperties));
}
</code></pre>
<p>代码注释<code>1</code>，获取<code>MatchResult</code>对象中对应的属性生命数组。</p>
<p>从前面类图知道，<code>MatchResult</code>对象中有<code>3</code>个实例变量数组，分别用来存储<code>UserAgent</code>样式表属性、用户样式表属性、和作者样式表属性。</p>
<p>这里就是根据<code>declarationOrigin</code>的值，来获取对应的数组，相关代码如下:</p>
<pre><code class="language-c++">Vector&lt;MatchedProperties&gt;&amp; ElementRuleCollector::declarationsForOrigin(DeclarationOrigin declarationOrigin)
{
    switch (declarationOrigin) {
    case DeclarationOrigin::UserAgent: return m_result-&gt;userAgentDeclarations;
    case DeclarationOrigin::User: return m_result-&gt;userDeclarations;
    case DeclarationOrigin::Author: return m_result-&gt;authorDeclarations;
    }
    ASSERT_NOT_REACHED();
    return m_result-&gt;authorDeclarations;
}
</code></pre>
<p>上面代码中的<code>m_result</code>变量就是<code>MatchResult</code>类型。</p>
<p>代码注释<code>2</code>，将匹配的<code>StyleRule</code> 中的属性添加到<code>MathResult</code>对象。</p>
<p>到这里，一个元素节点的匹配过程结束了。</p>
<h1 id="5-renderstyle">5 RenderStyle</h1>
<p>前面介绍类图时说过，<code>MatchResult</code>存储的都是匹配的<code>StyleRule</code>的原始值，而<code>RenderStyle</code>里面才是存储的最终计算出来的值。</p>
<p>比如，<code>MatchResult</code>中可能存储的字号是<code>20pt</code>，而<code>RenderStyle</code>会将<code>pt</code>转换成最终的<code>px</code>值。</p>
<p>存储到<code>RenderStyle</code>中的过程，就在收集完匹配的<code>StyleRule</code>之后:</p>
<pre><code class="language-c++">ResolvedStyle Resolver::styleForElement(Element&amp; element, const ResolutionContext&amp; context, RuleMatchingBehavior matchingBehavior)
{
    auto state = initializeStateAndStyle(element, context);
    auto&amp; style = *state.style();

    ....
    ElementRuleCollector collector(element, m_ruleSets, context.selectorMatchingState);

    ...

    if (matchingBehavior == RuleMatchingBehavior::MatchOnlyUserAgentRules)
        collector.matchUARules();
    else
        // 1. 收集匹配的 StyleRule，结果存储在 MatchResult 对象中
        collector.matchAllRules(m_matchAuthorAndUserStyles, matchingBehavior != RuleMatchingBehavior::MatchAllRulesExcludingSMIL);

    ...

    // 2. 将最终的结果存储到 RenderStyle 中
    applyMatchedProperties(state, collector.matchResult());

    ...

    return { state.takeStyle(), WTFMove(elementStyleRelations), collector.releaseMatchResult() };
}
</code></pre>
<p>代码注释<code>1</code>，使用<code>ElementRuleCollector</code>收集匹配的<code>StyleRule</code>，存储到<code>MatchResult</code>。</p>
<p>代码注释<code>2</code>，将最终结果存储到<code>RenderStyle</code>。</p>
<p>存储到<code>RenderStyle</code>的调用栈如下图所示:</p>
<p><img src="https://img2024.cnblogs.com/blog/489427/202503/489427-20250318022021363-1084786475.png" alt="image" loading="lazy"></p>
<p>上图右边红框，<code>BuilderState</code>中<code>m_style</code>属性就是<code>RenderStyle</code>类型。</p>
<h1 id="6-scoperulesets">6 ScopeRuleSets</h1>
<p>虽然上面讲完了<code>CSS</code>样式的匹配过程，但是，还有一个重要的类没有涉及，就是<code>ScopeRuleSets</code>。</p>
<p>从前面的类图可知，<code>ScopeRuleSets</code>内部有<code>2</code>个实例变量<code>m_auhtorStyle</code>和<code>m_userStyle</code>。</p>
<p>这<code>2</code>个实例变量使用<code>Map</code>，根据不同的选择器分门别类的存储了所有样式表的<code>StyleRule</code>，匹配过程使用的<code>StyleRule</code>就是来自这里。</p>
<p>接下来，我们就来看下，<code>ScopeRuleSets</code>是如何被设置的。</p>
<p>对于我们来说，最重要的是作者样式表，下面就来看下，作者样式表是怎么设置到<code>ScopeRuleSets</code>的。</p>
<p>首先看一下相关的调用栈:</p>
<p><img src="https://img2024.cnblogs.com/blog/489427/202503/489427-20250318022048206-1051071408.png" alt="image" loading="lazy"></p>
<p>调用栈最上面的函数就是将作者样式表添加到<code>ScopeRuleSets</code>的地方，其主要实现为:</p>
<pre><code class="language-c++">void ScopeRuleSets::appendAuthorStyleSheets(const Vector&lt;RefPtr&lt;CSSStyleSheet&gt;&gt;&amp; styleSheets, MQ::MediaQueryEvaluator* mediaQueryEvaluator, InspectorCSSOMWrappers&amp; inspectorCSSOMWrappers)
{
    // 1. 使用 ScopeRuleSets 的实例变量 m_authorStyle 创建一个 RuleSetBuilder
    RuleSetBuilder builder(*m_authorStyle, *mediaQueryEvaluator, &amp;m_styleResolver, RuleSetBuilder::ShrinkToFit::Enable, RuleSetBuilder::ShouldResolveNesting::Yes);

    ...
    for (auto&amp; cssSheet : styleSheets) {
        // 2. 遍历所有的作者样式表

        ...

        // 3. 将每一个张样式表中的 StyleRule 分门别类，存储到 m_authorStyle 中
        builder.addRulesFromSheet(cssSheet-&gt;contents(), cssSheet-&gt;mediaQueries());
       ...
    }

    ...
}
</code></pre>
<p>代码注释<code>1</code>，使用<code>ScopeRuleSets</code>的实例变量<code>m_authorStyle</code>创建一个<code>RuleSetBuilder</code>对象。</p>
<p>代码注释<code>2</code>，遍历所有的作者样式表。</p>
<p>代码注释<code>3</code>，将每一张作者样式表中的<code>StyleRule</code> 分门别类，存储到<code>m_authorStyle</code>中。</p>
<p>那上面调用栈调用的时机是什么时候呢？</p>
<p>从调用栈底部调用的函数可知，当页面里面所有用户样式表下载完成解析之后，就会调用上面的函数栈。</p>
<p>那上面调用栈和<code>CSS</code>匹配过程，又有怎样的关系呢？</p>
<p>上面函数调用栈截图左边有一个红框，这个红框里的函数首先设置<code>ScopeRuleSets</code>，设置完成之后，就会调用<code>Document::resolveStyle</code>函数，它正是匹配<code>CSS</code>样式的入口:</p>
<pre><code class="language-c++">bool Document::updateStyleIfNeeded()
{
    ...
    {
        ...

        // 1. 设置 ScopeRuleSets
        styleScope().flushPendingUpdate();

        ...
    }

    ...
    
    // 2. 匹配 CSS 样式表的入口
    resolveStyle();
    return true;
}
</code></pre>
<p>代码注释<code>1</code>，设置<code>ScopeRuleSets</code>。</p>
<p>代码注释<code>2</code>，匹配<code>CSS</code>样式表的入口。</p>
<h1 id="7-总结">7 总结</h1>
<p>从<code>HTML</code>解析成<code>DOM</code>树；</p>
<p>到<code>CSS</code>样式表的解析；</p>
<p>再到<code>CSS</code>样式表的匹配时机；</p>
<p>最后到<code>CSS</code>样式表的匹配过程。</p>
<p><code>WebKit</code>渲染前的处理过程已经结束。</p>
<p><code>WebKit</code>渲染树的构建正等着我们。</p>
<p>写到这里，总算告一小段落。</p>
<p>✿✿ヽ(°▽°)ノ✿</p>
<p>完一小结，撒花!</p>
<p>✿✿ヽ(°▽°)ノ✿</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0775882452037037" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-18 02:25">2025-03-18 02:25</span>&nbsp;
<a href="https://www.cnblogs.com/chaoguo1234">chaoguo1234</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18778101" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18778101);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18778101', targetLink: 'https://www.cnblogs.com/chaoguo1234/p/18778101', title: 'WebKit Inside: CSS 的匹配原理' })">举报</a>
</div>
        