
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/qq21497936/p/18866354" title="发布于 2025-05-08 15:00">
    <span role="heading" aria-level="2">GStreamer开发笔记（三）：测试gstreamer/v4l2+sdl2/v4l2+QtOpengl打摄像头延迟和内存</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div class="cl-preview-section">
<h1>前言</h1>
</div>
<div class="cl-preview-section">
<p>  前面测试了多种技术路线，本篇补全剩下的2种主流技术，v4l2+sdl2（偏底层），v4l2+QtOpengl（应用），v4l2+ffmpeg+QtQImage（Image的方式转图低于1ms，但是从yuv格式转到rgb格式需要ffmpeg进行转码耗时）。</p>
</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="Demo_5"></a>Demo</h1>
</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/24143620ecad4afd8537f2bb363c6380.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="_11"></a>注意</h1>
</div>
<div class="cl-preview-section">
<p>  存在色彩空间不准确，不进行细究。</p>
</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="_16"></a>延迟和内存对比</h1>
</div>
<div class="cl-preview-section">
<h2><a id="v4l2_17"></a>步骤一：v4l2代码测试延迟和内存</h2>
</div>
<div class="cl-preview-section">
<p>  没有找到命令行，只找到了v4l2-ctl可以查看和控制摄像头的参数。<br>  看gsteamer的源头就是v4l2src，随手写个代码使用v4l2打开摄像头查看延迟，其中v4l2是个框架负责操作和捕获，无法直接进行渲染显示，本次使用了SDL进行显示。<br>  注意：这里不对v4l2介绍，会有专门的专栏去讲解v4l2的多媒体开发，但是这里使用v4l2的代码写个简单的程序来打开。</p>

</div>
<div class="cl-preview-section">
<pre><code class="prism language-shell"><span class="token function">sudo <span class="token function">apt-get <span class="token function">install libsdl2-dev libsdl2-2.0-0
</span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  然后写代码，代码贴在Demo里面<br>  <img src="https://i-blog.csdnimg.cn/direct/1887feba1cf841079215febb2fa184d6.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/f039c9f6eb2d4d1294afbe4accf032b2.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">
<h2><a id="v4l2QtOpenGLmemcpy_28"></a>步骤二：v4l2+QtOpenGL+memcpy复制一次</h2>

</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/24143620ecad4afd8537f2bb363c6380.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">
<p>  查看内存：<br>  <img src="https://i-blog.csdnimg.cn/direct/5f2e8db8f5c041029cedf27064da4156.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">
<h2><a id="v4l2QtOpenGL_34"></a>步骤三：v4l2+QtOpenGL+共享内存</h2>

</div>
<div class="cl-preview-section">
<p>  <img src="https://i-blog.csdnimg.cn/direct/2faa14054fe14cda95cdfeff04126033.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="_40"></a>最终总结</h1>

</div>
<div class="cl-preview-section">
<p>  到这里，我们得出结论，gstreamer基本是最优秀的框架之一了，初步测试不是特别严谨，但是基本能反应情况（比如ffmpeg得fmplay本轮测试是最差，但是ffmpeg写代码可以进行ffmpeg源码和编程代码的优化，达到150ms左右，诸如这类情况不考虑）。<br>  V4l2+SDL优于gstreamer优于ffmplayer优于v4l2+QtOpenGL优于cheese优于ffmpeg。<br>  其中v4l2+SDL、gstreamer、fmplayer在内存占用上有点区别，延迟差不多130ms左右。Cheese和v4l2+QtOpenGL延迟差不多<br>到170ms。Ffmpeg的播放器延迟到500ms左右。</p>

</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="_48"></a>扩展</h1>

</div>
<div class="cl-preview-section">
<p>  这里要注意，大部分低延迟内窥镜笔者接触的都是buffer叠显存的方式，少数厂家使用v4l2+QtOpenGL的方式，经过测试慢了一帧左右。</p>

</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="DemoV4l2SDL_53"></a>Demo：V4l2+SDL</h1>

</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;stdio.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;stdlib.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;string.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;fcntl.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;unistd.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;sys/ioctl.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;sys/mman.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;linux/videodev2.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;errno.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;SDL2/SDL.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;SDL2/SDL_pixels.h&gt;

<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">define <span class="token macro-name">WIDTH <span class="token expression"><span class="token number">640
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">define <span class="token macro-name">HEIGHT <span class="token expression"><span class="token number">480

<span class="token keyword">int <span class="token function">main<span class="token punctuation">(<span class="token punctuation">) <span class="token punctuation">{

    <span class="token function">setbuf<span class="token punctuation">(<span class="token constant">stdout<span class="token punctuation">, <span class="token constant">NULL<span class="token punctuation">)<span class="token punctuation">;

    <span class="token keyword">int fd<span class="token punctuation">;
    <span class="token keyword">struct <span class="token class-name">v4l2_format fmt<span class="token punctuation">;
    <span class="token keyword">struct <span class="token class-name">v4l2_requestbuffers req<span class="token punctuation">;
    <span class="token keyword">struct <span class="token class-name">v4l2_buffer buf<span class="token punctuation">;
    <span class="token keyword">void <span class="token operator">*buffer_start<span class="token punctuation">;
    <span class="token keyword">unsigned <span class="token keyword">int buffer_length<span class="token punctuation">;

    <span class="token comment">// 打开摄像头设备
    fd <span class="token operator">= <span class="token function">open<span class="token punctuation">(<span class="token string">"/dev/video0"<span class="token punctuation">, O_RDWR<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">if <span class="token punctuation">(fd <span class="token operator">== <span class="token operator">-<span class="token number">1<span class="token punctuation">) <span class="token punctuation">{
        <span class="token function">perror<span class="token punctuation">(<span class="token string">"打开摄像头设备失败"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return EXIT_FAILURE<span class="token punctuation">;
    <span class="token punctuation">}

    <span class="token comment">// 设置视频格式
    <span class="token function">memset<span class="token punctuation">(<span class="token operator">&amp;fmt<span class="token punctuation">, <span class="token number">0<span class="token punctuation">, <span class="token keyword">sizeof<span class="token punctuation">(fmt<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    fmt<span class="token punctuation">.type <span class="token operator">= V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;
    fmt<span class="token punctuation">.fmt<span class="token punctuation">.pix<span class="token punctuation">.width <span class="token operator">= WIDTH<span class="token punctuation">;
    fmt<span class="token punctuation">.fmt<span class="token punctuation">.pix<span class="token punctuation">.height <span class="token operator">= HEIGHT<span class="token punctuation">;
    fmt<span class="token punctuation">.fmt<span class="token punctuation">.pix<span class="token punctuation">.pixelformat <span class="token operator">= V4L2_PIX_FMT_YUYV<span class="token punctuation">;
    fmt<span class="token punctuation">.fmt<span class="token punctuation">.pix<span class="token punctuation">.field <span class="token operator">= V4L2_FIELD_INTERLACED<span class="token punctuation">;

    <span class="token keyword">if <span class="token punctuation">(<span class="token function">ioctl<span class="token punctuation">(fd<span class="token punctuation">, VIDIOC_S_FMT<span class="token punctuation">, <span class="token operator">&amp;fmt<span class="token punctuation">) <span class="token operator">== <span class="token operator">-<span class="token number">1<span class="token punctuation">) <span class="token punctuation">{
        <span class="token function">perror<span class="token punctuation">(<span class="token string">"设置视频格式失败"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">close<span class="token punctuation">(fd<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return EXIT_FAILURE<span class="token punctuation">;
    <span class="token punctuation">}

    <span class="token comment">// 请求缓冲区
    <span class="token function">memset<span class="token punctuation">(<span class="token operator">&amp;req<span class="token punctuation">, <span class="token number">0<span class="token punctuation">, <span class="token keyword">sizeof<span class="token punctuation">(req<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    req<span class="token punctuation">.count <span class="token operator">= <span class="token number">1<span class="token punctuation">;
    req<span class="token punctuation">.type <span class="token operator">= V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;
    req<span class="token punctuation">.memory <span class="token operator">= V4L2_MEMORY_MMAP<span class="token punctuation">;

    <span class="token keyword">if <span class="token punctuation">(<span class="token function">ioctl<span class="token punctuation">(fd<span class="token punctuation">, VIDIOC_REQBUFS<span class="token punctuation">, <span class="token operator">&amp;req<span class="token punctuation">) <span class="token operator">== <span class="token operator">-<span class="token number">1<span class="token punctuation">) <span class="token punctuation">{
        <span class="token function">perror<span class="token punctuation">(<span class="token string">"请求缓冲区失败"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">close<span class="token punctuation">(fd<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return EXIT_FAILURE<span class="token punctuation">;
    <span class="token punctuation">}

    <span class="token comment">// 映射缓冲区
    <span class="token function">memset<span class="token punctuation">(<span class="token operator">&amp;buf<span class="token punctuation">, <span class="token number">0<span class="token punctuation">, <span class="token keyword">sizeof<span class="token punctuation">(buf<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    buf<span class="token punctuation">.type <span class="token operator">= V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;
    buf<span class="token punctuation">.memory <span class="token operator">= V4L2_MEMORY_MMAP<span class="token punctuation">;
    buf<span class="token punctuation">.index <span class="token operator">= <span class="token number">0<span class="token punctuation">;

    <span class="token keyword">if <span class="token punctuation">(<span class="token function">ioctl<span class="token punctuation">(fd<span class="token punctuation">, VIDIOC_QUERYBUF<span class="token punctuation">, <span class="token operator">&amp;buf<span class="token punctuation">) <span class="token operator">== <span class="token operator">-<span class="token number">1<span class="token punctuation">) <span class="token punctuation">{
        <span class="token function">perror<span class="token punctuation">(<span class="token string">"查询缓冲区失败"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">close<span class="token punctuation">(fd<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return EXIT_FAILURE<span class="token punctuation">;
    <span class="token punctuation">}

    buffer_length <span class="token operator">= buf<span class="token punctuation">.length<span class="token punctuation">;
    buffer_start <span class="token operator">= <span class="token function">mmap<span class="token punctuation">(<span class="token constant">NULL<span class="token punctuation">, buffer_length<span class="token punctuation">, PROT_READ <span class="token operator">| PROT_WRITE<span class="token punctuation">, MAP_SHARED<span class="token punctuation">, fd<span class="token punctuation">, buf<span class="token punctuation">.m<span class="token punctuation">.offset<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">if <span class="token punctuation">(buffer_start <span class="token operator">== MAP_FAILED<span class="token punctuation">) <span class="token punctuation">{
        <span class="token function">perror<span class="token punctuation">(<span class="token string">"映射缓冲区失败"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">close<span class="token punctuation">(fd<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return EXIT_FAILURE<span class="token punctuation">;
    <span class="token punctuation">}

    <span class="token comment">// 将缓冲区放入队列
    <span class="token keyword">if <span class="token punctuation">(<span class="token function">ioctl<span class="token punctuation">(fd<span class="token punctuation">, VIDIOC_QBUF<span class="token punctuation">, <span class="token operator">&amp;buf<span class="token punctuation">) <span class="token operator">== <span class="token operator">-<span class="token number">1<span class="token punctuation">) <span class="token punctuation">{
        <span class="token function">perror<span class="token punctuation">(<span class="token string">"缓冲区入队失败"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">munmap<span class="token punctuation">(buffer_start<span class="token punctuation">, buffer_length<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">close<span class="token punctuation">(fd<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return EXIT_FAILURE<span class="token punctuation">;
    <span class="token punctuation">}

    <span class="token comment">// 开始视频捕获
    <span class="token keyword">enum <span class="token class-name">v4l2_buf_type type <span class="token operator">= V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;
    <span class="token keyword">if <span class="token punctuation">(<span class="token function">ioctl<span class="token punctuation">(fd<span class="token punctuation">, VIDIOC_STREAMON<span class="token punctuation">, <span class="token operator">&amp;type<span class="token punctuation">) <span class="token operator">== <span class="token operator">-<span class="token number">1<span class="token punctuation">) <span class="token punctuation">{
        <span class="token function">perror<span class="token punctuation">(<span class="token string">"开始视频捕获失败"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">munmap<span class="token punctuation">(buffer_start<span class="token punctuation">, buffer_length<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">close<span class="token punctuation">(fd<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return EXIT_FAILURE<span class="token punctuation">;
    <span class="token punctuation">}

    <span class="token comment">// 初始化 SDL
    <span class="token keyword">if <span class="token punctuation">(<span class="token function">SDL_Init<span class="token punctuation">(SDL_INIT_VIDEO<span class="token punctuation">) <span class="token operator">&lt; <span class="token number">0<span class="token punctuation">) <span class="token punctuation">{
        <span class="token function">fprintf<span class="token punctuation">(<span class="token constant">stderr<span class="token punctuation">, <span class="token string">"SDL 初始化失败: %s\n"<span class="token punctuation">, <span class="token function">SDL_GetError<span class="token punctuation">(<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">munmap<span class="token punctuation">(buffer_start<span class="token punctuation">, buffer_length<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">close<span class="token punctuation">(fd<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return EXIT_FAILURE<span class="token punctuation">;
    <span class="token punctuation">}

    SDL_Window <span class="token operator">*window <span class="token operator">= <span class="token function">SDL_CreateWindow<span class="token punctuation">(<span class="token string">"V4L2 Camera"<span class="token punctuation">, SDL_WINDOWPOS_UNDEFINED<span class="token punctuation">, SDL_WINDOWPOS_UNDEFINED<span class="token punctuation">, WIDTH<span class="token punctuation">, HEIGHT<span class="token punctuation">, <span class="token number">0<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">if <span class="token punctuation">(<span class="token operator">!window<span class="token punctuation">) <span class="token punctuation">{
        <span class="token function">fprintf<span class="token punctuation">(<span class="token constant">stderr<span class="token punctuation">, <span class="token string">"创建 SDL 窗口失败: %s\n"<span class="token punctuation">, <span class="token function">SDL_GetError<span class="token punctuation">(<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">SDL_Quit<span class="token punctuation">(<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">munmap<span class="token punctuation">(buffer_start<span class="token punctuation">, buffer_length<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">close<span class="token punctuation">(fd<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return EXIT_FAILURE<span class="token punctuation">;
    <span class="token punctuation">}

    SDL_Renderer <span class="token operator">*renderer <span class="token operator">= <span class="token function">SDL_CreateRenderer<span class="token punctuation">(window<span class="token punctuation">, <span class="token operator">-<span class="token number">1<span class="token punctuation">, <span class="token number">0<span class="token punctuation">)<span class="token punctuation">;

    <span class="token comment">// SDL_PIXELFORMAT_YV12 =      /**&lt; Planar mode: Y + V + U  (3 planes) */
    <span class="token comment">// SDL_PIXELFORMAT_IYUV =      /**&lt; Planar mode: Y + U + V  (3 planes) */
    <span class="token comment">// SDL_PIXELFORMAT_YUY2 =      /**&lt; Packed mode: Y0+U0+Y1+V0 (1 plane) */
    <span class="token comment">// SDL_PIXELFORMAT_UYVY =      /**&lt; Packed mode: U0+Y0+V0+Y1 (1 plane) */
    <span class="token comment">// SDL_PIXELFORMAT_YVYU =      /**&lt; Packed mode: Y0+V0+Y1+U0 (1 plane) */

<span class="token comment">//    SDL_Texture *texture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_YV12, SDL_TEXTUREACCESS_STREAMING, WIDTH, HEIGHT);
<span class="token comment">//    SDL_Texture *texture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_IYUV, SDL_TEXTUREACCESS_STREAMING, WIDTH, HEIGHT);
    SDL_Texture <span class="token operator">*texture <span class="token operator">= <span class="token function">SDL_CreateTexture<span class="token punctuation">(renderer<span class="token punctuation">, SDL_PIXELFORMAT_YUY2<span class="token punctuation">, SDL_TEXTUREACCESS_STREAMING<span class="token punctuation">, WIDTH<span class="token punctuation">, HEIGHT<span class="token punctuation">)<span class="token punctuation">;
<span class="token comment">//    SDL_Texture *texture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_UYVY, SDL_TEXTUREACCESS_STREAMING, WIDTH, HEIGHT);
<span class="token comment">//    SDL_Texture *texture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_YVYU, SDL_TEXTUREACCESS_STREAMING, WIDTH, HEIGHT);

    <span class="token keyword">int running <span class="token operator">= <span class="token number">1<span class="token punctuation">;
    SDL_Event event<span class="token punctuation">;
    <span class="token keyword">while <span class="token punctuation">(running<span class="token punctuation">) <span class="token punctuation">{

        <span class="token comment">// 处理事件
        <span class="token keyword">while <span class="token punctuation">(<span class="token function">SDL_PollEvent<span class="token punctuation">(<span class="token operator">&amp;event<span class="token punctuation">)<span class="token punctuation">) <span class="token punctuation">{
            <span class="token keyword">if <span class="token punctuation">(event<span class="token punctuation">.type <span class="token operator">== SDL_QUIT<span class="token punctuation">) <span class="token punctuation">{
                running <span class="token operator">= <span class="token number">0<span class="token punctuation">;
            <span class="token punctuation">}
        <span class="token punctuation">}

        <span class="token comment">// 捕获帧
        <span class="token function">memset<span class="token punctuation">(<span class="token operator">&amp;buf<span class="token punctuation">, <span class="token number">0<span class="token punctuation">, <span class="token keyword">sizeof<span class="token punctuation">(buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;
        buf</span><span class="token punctuation">.type </span><span class="token operator">= V4L2_BUF_TYPE_VIDEO_CAPTURE</span><span class="token punctuation">;
        buf</span><span class="token punctuation">.memory </span><span class="token operator">= V4L2_MEMORY_MMAP</span><span class="token punctuation">;

        </span><span class="token keyword">if </span><span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(fd</span><span class="token punctuation">, VIDIOC_DQBUF</span><span class="token punctuation">, </span><span class="token operator">&amp;buf</span><span class="token punctuation">) </span><span class="token operator">== </span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">) </span><span class="token punctuation">{
            </span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"出队缓冲区失败"</span><span class="token punctuation">)</span><span class="token punctuation">;
            </span><span class="token keyword">break</span><span class="token punctuation">;
        </span><span class="token punctuation">}

        </span><span class="token comment">// 更新 SDL 纹理
        </span><span class="token function">SDL_UpdateTexture</span><span class="token punctuation">(texture</span><span class="token punctuation">, </span><span class="token constant">NULL</span><span class="token punctuation">, buffer_start</span><span class="token punctuation">, WIDTH</span><span class="token punctuation">)</span><span class="token punctuation">;

        </span><span class="token comment">// 渲染纹理
        </span><span class="token function">SDL_RenderClear</span><span class="token punctuation">(renderer</span><span class="token punctuation">)</span><span class="token punctuation">;
        </span><span class="token function">SDL_RenderCopy</span><span class="token punctuation">(renderer</span><span class="token punctuation">, texture</span><span class="token punctuation">, </span><span class="token constant">NULL</span><span class="token punctuation">, </span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;
        </span><span class="token function">SDL_RenderPresent</span><span class="token punctuation">(renderer</span><span class="token punctuation">)</span><span class="token punctuation">;

        </span><span class="token comment">// 将缓冲区重新入队
        </span><span class="token keyword">if </span><span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(fd</span><span class="token punctuation">, VIDIOC_QBUF</span><span class="token punctuation">, </span><span class="token operator">&amp;buf</span><span class="token punctuation">) </span><span class="token operator">== </span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">) </span><span class="token punctuation">{
            </span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"缓冲区入队失败"</span><span class="token punctuation">)</span><span class="token punctuation">;
            </span><span class="token keyword">break</span><span class="token punctuation">;
        </span><span class="token punctuation">}
    </span><span class="token punctuation">}

    </span><span class="token comment">// 清理资源
    </span><span class="token function">SDL_DestroyTexture</span><span class="token punctuation">(texture</span><span class="token punctuation">)</span><span class="token punctuation">;
    </span><span class="token function">SDL_DestroyRenderer</span><span class="token punctuation">(renderer</span><span class="token punctuation">)</span><span class="token punctuation">;
    </span><span class="token function">SDL_DestroyWindow</span><span class="token punctuation">(window</span><span class="token punctuation">)</span><span class="token punctuation">;
    </span><span class="token function">SDL_Quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;
    </span><span class="token function">munmap</span><span class="token punctuation">(buffer_start</span><span class="token punctuation">, buffer_length</span><span class="token punctuation">)</span><span class="token punctuation">;
    </span><span class="token function">close</span><span class="token punctuation">(fd</span><span class="token punctuation">)</span><span class="token punctuation">;

    </span><span class="token keyword">return EXIT_SUCCESS</span><span class="token punctuation">;
</span><span class="token punctuation">}
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="DemoV4l2QtOpenGL_232"></a>Demo：V4l2+QtOpenGL+共享内存</h1>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;stdio.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;stdlib.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;string.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;fcntl.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;unistd.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;sys/ioctl.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;sys/mman.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;linux/videodev2.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;errno.h&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">"DisplayOpenGLWidget.h"
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;QApplication&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;QElapsedTimer&gt;

<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">define <span class="token macro-name">WIDTH <span class="token expression"><span class="token number">640
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">define <span class="token macro-name">HEIGHT <span class="token expression"><span class="token number">480

<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;QDebug&gt;
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;QDateTime&gt;
<span class="token comment">//#define LOG qDebug()&lt;&lt;__FILE__&lt;&lt;__LINE__
<span class="token comment">//#define LOG qDebug()&lt;&lt;__FILE__&lt;&lt;__LINE__&lt;&lt;__FUNCTION__
<span class="token comment">//#define LOG qDebug()&lt;&lt;__FILE__&lt;&lt;__LINE__&lt;&lt;QThread()::currentThread()
<span class="token comment">//#define LOG qDebug()&lt;&lt;__FILE__&lt;&lt;__LINE__&lt;&lt;QDateTime::currentDateTime().toString("yyyy-MM-dd")
<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">define <span class="token macro-name">LOG <span class="token expression"><span class="token function">qDebug<span class="token punctuation">(<span class="token punctuation">)<span class="token operator">&lt;&lt;<span class="token constant">__FILE__<span class="token operator">&lt;&lt;<span class="token constant">__LINE__<span class="token operator">&lt;&lt;<span class="token class-name">QDateTime<span class="token operator">::<span class="token function">currentDateTime<span class="token punctuation">(<span class="token punctuation">)<span class="token punctuation">.<span class="token function">toString<span class="token punctuation">(<span class="token string">"yyyy-MM-dd hh:mm:ss:zzz"<span class="token expression"><span class="token punctuation">)


<span class="token keyword">int <span class="token function">main<span class="token punctuation">(<span class="token keyword">int argc<span class="token punctuation">, <span class="token keyword">char <span class="token operator">*argv<span class="token punctuation">[<span class="token punctuation">]<span class="token punctuation">)
<span class="token punctuation">{
    QApplication <span class="token function">a<span class="token punctuation">(argc<span class="token punctuation">, argv<span class="token punctuation">)<span class="token punctuation">;

    DisplayOpenGLWidget displayOpenGLWidget<span class="token punctuation">;
    displayOpenGLWidget<span class="token punctuation">.<span class="token function">show<span class="token punctuation">(<span class="token punctuation">)<span class="token punctuation">;
    <span class="token function">setbuf<span class="token punctuation">(<span class="token constant">stdout<span class="token punctuation">, <span class="token constant">NULL<span class="token punctuation">)<span class="token punctuation">;

    <span class="token keyword">int fd<span class="token punctuation">;
    <span class="token keyword">struct <span class="token class-name">v4l2_format fmt<span class="token punctuation">;
    <span class="token keyword">struct <span class="token class-name">v4l2_requestbuffers req<span class="token punctuation">;
    <span class="token keyword">struct <span class="token class-name">v4l2_buffer buf<span class="token punctuation">;
    <span class="token keyword">void <span class="token operator">*buffer_start<span class="token punctuation">;
    <span class="token keyword">unsigned <span class="token keyword">int buffer_length<span class="token punctuation">;

    <span class="token comment">// 打开摄像头设备
    fd <span class="token operator">= <span class="token function">open<span class="token punctuation">(<span class="token string">"/dev/video0"<span class="token punctuation">, O_RDWR<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">if <span class="token punctuation">(fd <span class="token operator">== <span class="token operator">-<span class="token number">1<span class="token punctuation">) <span class="token punctuation">{
        <span class="token function">perror<span class="token punctuation">(<span class="token string">"打开摄像头设备失败"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return EXIT_FAILURE<span class="token punctuation">;
    <span class="token punctuation">}

    <span class="token comment">// 设置视频格式
    <span class="token function">memset<span class="token punctuation">(<span class="token operator">&amp;fmt<span class="token punctuation">, <span class="token number">0<span class="token punctuation">, <span class="token keyword">sizeof<span class="token punctuation">(fmt<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    fmt<span class="token punctuation">.type <span class="token operator">= V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;
    fmt<span class="token punctuation">.fmt<span class="token punctuation">.pix<span class="token punctuation">.width <span class="token operator">= WIDTH<span class="token punctuation">;
    fmt<span class="token punctuation">.fmt<span class="token punctuation">.pix<span class="token punctuation">.height <span class="token operator">= HEIGHT<span class="token punctuation">;
    fmt<span class="token punctuation">.fmt<span class="token punctuation">.pix<span class="token punctuation">.pixelformat <span class="token operator">= V4L2_PIX_FMT_YUYV<span class="token punctuation">;
    fmt<span class="token punctuation">.fmt<span class="token punctuation">.pix<span class="token punctuation">.field <span class="token operator">= V4L2_FIELD_INTERLACED<span class="token punctuation">;

    <span class="token keyword">if <span class="token punctuation">(<span class="token function">ioctl<span class="token punctuation">(fd<span class="token punctuation">, VIDIOC_S_FMT<span class="token punctuation">, <span class="token operator">&amp;fmt<span class="token punctuation">) <span class="token operator">== <span class="token operator">-<span class="token number">1<span class="token punctuation">) <span class="token punctuation">{
        <span class="token function">perror<span class="token punctuation">(<span class="token string">"设置视频格式失败"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">close<span class="token punctuation">(fd<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return EXIT_FAILURE<span class="token punctuation">;
    <span class="token punctuation">}

    <span class="token comment">// 请求缓冲区
    <span class="token function">memset<span class="token punctuation">(<span class="token operator">&amp;req<span class="token punctuation">, <span class="token number">0<span class="token punctuation">, <span class="token keyword">sizeof<span class="token punctuation">(req<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    req<span class="token punctuation">.count <span class="token operator">= <span class="token number">1<span class="token punctuation">;
    req<span class="token punctuation">.type <span class="token operator">= V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;
    req<span class="token punctuation">.memory <span class="token operator">= V4L2_MEMORY_MMAP<span class="token punctuation">;

    <span class="token keyword">if <span class="token punctuation">(<span class="token function">ioctl<span class="token punctuation">(fd<span class="token punctuation">, VIDIOC_REQBUFS<span class="token punctuation">, <span class="token operator">&amp;req<span class="token punctuation">) <span class="token operator">== <span class="token operator">-<span class="token number">1<span class="token punctuation">) <span class="token punctuation">{
        <span class="token function">perror<span class="token punctuation">(<span class="token string">"请求缓冲区失败"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">close<span class="token punctuation">(fd<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return EXIT_FAILURE<span class="token punctuation">;
    <span class="token punctuation">}

    <span class="token comment">// 映射缓冲区
    <span class="token function">memset<span class="token punctuation">(<span class="token operator">&amp;buf<span class="token punctuation">, <span class="token number">0<span class="token punctuation">, <span class="token keyword">sizeof<span class="token punctuation">(buf<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
    buf<span class="token punctuation">.type <span class="token operator">= V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;
    buf<span class="token punctuation">.memory <span class="token operator">= V4L2_MEMORY_MMAP<span class="token punctuation">;
    buf<span class="token punctuation">.index <span class="token operator">= <span class="token number">0<span class="token punctuation">;

    <span class="token keyword">if <span class="token punctuation">(<span class="token function">ioctl<span class="token punctuation">(fd<span class="token punctuation">, VIDIOC_QUERYBUF<span class="token punctuation">, <span class="token operator">&amp;buf<span class="token punctuation">) <span class="token operator">== <span class="token operator">-<span class="token number">1<span class="token punctuation">) <span class="token punctuation">{
        <span class="token function">perror<span class="token punctuation">(<span class="token string">"查询缓冲区失败"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">close<span class="token punctuation">(fd<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return EXIT_FAILURE<span class="token punctuation">;
    <span class="token punctuation">}

    buffer_length <span class="token operator">= buf<span class="token punctuation">.length<span class="token punctuation">;
    buffer_start <span class="token operator">= <span class="token function">mmap<span class="token punctuation">(<span class="token constant">NULL<span class="token punctuation">, buffer_length<span class="token punctuation">, PROT_READ <span class="token operator">| PROT_WRITE<span class="token punctuation">, MAP_SHARED<span class="token punctuation">, fd<span class="token punctuation">, buf<span class="token punctuation">.m<span class="token punctuation">.offset<span class="token punctuation">)<span class="token punctuation">;
    <span class="token keyword">if <span class="token punctuation">(buffer_start <span class="token operator">== MAP_FAILED<span class="token punctuation">) <span class="token punctuation">{
        <span class="token function">perror<span class="token punctuation">(<span class="token string">"映射缓冲区失败"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">close<span class="token punctuation">(fd<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return EXIT_FAILURE<span class="token punctuation">;
    <span class="token punctuation">}
    displayOpenGLWidget<span class="token punctuation">.<span class="token function">initDrawBuffer<span class="token punctuation">(WIDTH<span class="token punctuation">, HEIGHT<span class="token punctuation">, <span class="token boolean">true<span class="token punctuation">, <span class="token punctuation">(<span class="token keyword">char <span class="token operator">*<span class="token punctuation">)buffer_start<span class="token punctuation">)<span class="token punctuation">;

    <span class="token comment">// 将缓冲区放入队列
    <span class="token keyword">if <span class="token punctuation">(<span class="token function">ioctl<span class="token punctuation">(fd<span class="token punctuation">, VIDIOC_QBUF<span class="token punctuation">, <span class="token operator">&amp;buf<span class="token punctuation">) <span class="token operator">== <span class="token operator">-<span class="token number">1<span class="token punctuation">) <span class="token punctuation">{
        <span class="token function">perror<span class="token punctuation">(<span class="token string">"缓冲区入队失败"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">munmap<span class="token punctuation">(buffer_start<span class="token punctuation">, buffer_length<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">close<span class="token punctuation">(fd<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return EXIT_FAILURE<span class="token punctuation">;
    <span class="token punctuation">}

    <span class="token comment">// 开始视频捕获
    <span class="token keyword">enum <span class="token class-name">v4l2_buf_type type <span class="token operator">= V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;
    <span class="token keyword">if <span class="token punctuation">(<span class="token function">ioctl<span class="token punctuation">(fd<span class="token punctuation">, VIDIOC_STREAMON<span class="token punctuation">, <span class="token operator">&amp;type<span class="token punctuation">) <span class="token operator">== <span class="token operator">-<span class="token number">1<span class="token punctuation">) <span class="token punctuation">{
        <span class="token function">perror<span class="token punctuation">(<span class="token string">"开始视频捕获失败"<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">munmap<span class="token punctuation">(buffer_start<span class="token punctuation">, buffer_length<span class="token punctuation">)<span class="token punctuation">;
        <span class="token function">close<span class="token punctuation">(fd<span class="token punctuation">)<span class="token punctuation">;
        <span class="token keyword">return EXIT_FAILURE<span class="token punctuation">;
    <span class="token punctuation">}

    <span class="token keyword">int running <span class="token operator">= <span class="token number">1<span class="token punctuation">;
    <span class="token keyword">while <span class="token punctuation">(running<span class="token punctuation">) <span class="token punctuation">{
        <span class="token comment">// 捕获帧
        <span class="token function">memset<span class="token punctuation">(<span class="token operator">&amp;buf<span class="token punctuation">, <span class="token number">0<span class="token punctuation">, <span class="token keyword">sizeof<span class="token punctuation">(buf<span class="token punctuation">)<span class="token punctuation">)<span class="token punctuation">;
        buf<span class="token punctuation">.type <span class="token operator">= V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;
        buf<span class="token punctuation">.memory <span class="token operator">= V4L2_MEMORY_MMAP<span class="token punctuation">;

        <span class="token keyword">if <span class="token punctuation">(<span class="token function">ioctl<span class="token punctuation">(fd<span class="token punctuation">, VIDIOC_DQBUF<span class="token punctuation">, <span class="token operator">&amp;buf<span class="token punctuation">) <span class="token operator">== <span class="token operator">-<span class="token number">1<span class="token punctuation">) <span class="token punctuation">{
            <span class="token function">perror<span class="token punctuation">(<span class="token string">"出队缓冲区失败"<span class="token punctuation">)<span class="token punctuation">;
            <span class="token keyword">break<span class="token punctuation">;
        <span class="token punctuation">}
        <span class="token comment">// 渲染
<span class="token comment">//        memcpy(drawBuffer, buffer_start, buffer_length);

        displayOpenGLWidget<span class="token punctuation">.<span class="token function">displayVideoFrame<span class="token punctuation">(<span class="token punctuation">)<span class="token punctuation">;
        <span class="token class-name">QApplication<span class="token operator">::<span class="token function">processEvents<span class="token punctuation">(<span class="token punctuation">)<span class="token punctuation">;
        <span class="token class-name">QApplication<span class="token operator">::<span class="token function">processEvents<span class="token punctuation">(<span class="token punctuation">)<span class="token punctuation">;
        <span class="token class-name">QApplication<span class="token operator">::<span class="token function">processEvents<span class="token punctuation">(<span class="token punctuation">)<span class="token punctuation">;

        <span class="token comment">// 将缓冲区重新入队
        <span class="token keyword">if <span class="token punctuation">(<span class="token function">ioctl<span class="token punctuation">(fd</span><span class="token punctuation">, VIDIOC_QBUF</span><span class="token punctuation">, </span><span class="token operator">&amp;buf</span><span class="token punctuation">) </span><span class="token operator">== </span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">) </span><span class="token punctuation">{
            </span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"缓冲区入队失败"</span><span class="token punctuation">)</span><span class="token punctuation">;
            </span><span class="token keyword">break</span><span class="token punctuation">;
        </span><span class="token punctuation">}

    </span><span class="token punctuation">}

    </span><span class="token comment">// 清理资源
    </span><span class="token function">munmap</span><span class="token punctuation">(buffer_start</span><span class="token punctuation">, buffer_length</span><span class="token punctuation">)</span><span class="token punctuation">;
    </span><span class="token function">close</span><span class="token punctuation">(fd</span><span class="token punctuation">)</span><span class="token punctuation">;

    </span><span class="token keyword">return EXIT_SUCCESS</span><span class="token punctuation">;
</span><span class="token punctuation">}
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="_382"></a>入坑</h1>
</div>
<div class="cl-preview-section">
<h2><a id="v4l2_383"></a>入坑一：v4l2打开视频代码不对</h2>
</div>
<div class="cl-preview-section">
<h3><a id="_384"></a>问题</h3>
</div>
<div class="cl-preview-section">
<p>  V4l2打开视频代码数据错位<br>  <img src="https://i-blog.csdnimg.cn/direct/01c7db46d22744eebf7dccb23ca19e93.png" alt="在这里插入图片描述"></p>

</div>
<div class="cl-preview-section">
<h3><a id="_388"></a>原因</h3>

</div>
<div class="cl-preview-section">
<p>  纹理格式不同，但是笔者测试了SDL所有支持的，都不行，不钻了，是需要进行色彩空间转换下才可以（会额外消耗一定延迟，预估10ms以内），我们选个可以的，测试延迟内存即可。</p>

</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp"><span class="token comment">// SDL_PIXELFORMAT_YV12 =      /**&lt; Planar mode: Y + V + U  (3 planes) */
<span class="token comment">// SDL_PIXELFORMAT_IYUV =      /**&lt; Planar mode: Y + U + V  (3 planes) */
<span class="token comment">// SDL_PIXELFORMAT_YUY2 =      /**&lt; Packed mode: Y0+U0+Y1+V0 (1 plane) */
<span class="token comment">// SDL_PIXELFORMAT_UYVY =      /**&lt; Packed mode: U0+Y0+V0+Y1 (1 plane) */
<span class="token comment">// SDL_PIXELFORMAT_YVYU =      /**&lt; Packed mode: Y0+V0+Y1+U0 (1 plane) */

<span class="token comment">//    SDL_Texture *texture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_YV12, SDL_TEXTUREACCESS_STREAMING, WIDTH, HEIGHT);
<span class="token comment">//    SDL_Texture *texture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_IYUV, SDL_TEXTUREACCESS_STREAMING, WIDTH, HEIGHT);
SDL_Texture <span class="token operator">*texture <span class="token operator">= <span class="token function">SDL_CreateTexture<span class="token punctuation">(renderer<span class="token punctuation">, SDL_PIXELFORMAT_YUY2<span class="token punctuation">, SDL_TEXTUREACCESS_STREAMING<span class="token punctuation">, WIDTH<span class="token punctuation">, HEIGHT<span class="token punctuation">)<span class="token punctuation">;
<span class="token comment">//    SDL_Texture *texture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_UYVY, SDL_TEXTUREACCESS_STREAMING, WIDTH, HEIGHT);
<span class="token comment">//    SDL_Texture *texture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_YVYU, SDL_TEXTUREACCESS_STREAMING, WIDTH, HEIGHT);
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<h3><a id="_403"></a>解决</h3>
</div>
<div class="cl-preview-section">
<p>  不解决，选择能看清楚的就好了。</p>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.05602708003240741" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-08 15:01">2025-05-08 15:00</span>&nbsp;
<a href="https://www.cnblogs.com/qq21497936">长沙红胖子Qt创微智科</a>&nbsp;
阅读(<span id="post_view_count">41</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18866354);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18866354', targetLink: 'https://www.cnblogs.com/qq21497936/p/18866354', title: 'GStreamer开发笔记（三）：测试gstreamer/v4l2+sdl2/v4l2+QtOpengl打摄像头延迟和内存' })">举报</a>
</div>
        