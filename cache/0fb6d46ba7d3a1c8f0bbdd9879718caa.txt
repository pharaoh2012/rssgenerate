
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/edisonchou/p/-/introduction-to-microsoft-extensions-ai" title="发布于 2025-02-18 18:30">
    <span role="heading" aria-level="2">.NET程序员AI开发基座：Microsoft.Extensions.AI</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/381412/202502/381412-20250216184934901-1054472016.png" alt=".NET程序员AI开发基座：Microsoft.Extensions.AI" class="desc_img">
        本文介绍了Microsoft.Extensions.AI的基本概念 和 基本使用，如果你也是.NET程序员希望参与AI应用的开发，那就快快了解和使用起来吧。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>大家好，我是Edison。</p>
<p>微软在2024年11月就发布了新的AI核心库Microsoft.Extensions.AI，虽然目前还是一个预览版，但其可以大大简化我们的AI集成和开发工作。</p>
<h1><strong>Microsoft.Extensions.AI介绍</strong></h1>
<p><span><span>Microsoft.Extensions.AI<span><span>&nbsp;是一组<strong>核心 .NET 库</strong>，是在与整个 .NET 生态系统（包括语义内核）的开发人员协作中创建的。 这些库提供<span>统一的 <strong>C# 抽象层</strong><span>，用于与 AI 服务交互，例如小型和大型语言模型（SLA 和 LLM）、嵌入和中间件。</span></span></span></span></span></span></p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202502/381412-20250216185051162-411525913.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>Microsoft.Extensions.AI&nbsp;提供可由各种服务实现的<strong>抽象</strong>，所有这些概念都遵循相同的核心概念。 此库不旨在提供针对任何特定提供商服务定制的 API。&nbsp;</p>
<p>Microsoft.Extensions.AI&nbsp;目标是在 .NET 生态系统中充当一个<strong>统一层</strong>，使开发人员能够选择他们的首选框架和库，同时<strong>确保整个生态系统之间的无缝集成和协作</strong>。</p>
<p><span style="color: rgba(255, 102, 0, 1)"><em>画外音&gt;开发者可以节省时间下来专注自己的应用程序的业务逻辑实现，从而不必花过多时间去做AI服务的集成调试，点个大大的赞！</em></span></p>
<h1><span><span><span><span><span><span><strong>我能使用哪些服务实现？</strong></span></span></span></span></span></span></h1>
<p>Microsoft.Extensions.AI 通过 NuGet 包提供了以下服务的实现：</p>
<ul class="list-paddingleft-1">
<li><strong><span><span>OpenAI</span></span></strong></li>
<li><strong><span><span>Azure OpenAI</span></span></strong></li>
<li><strong><span><span>Azure AI Inference</span></span></strong></li>
<li><strong><span><span>Ollama</span></span></strong></li>
</ul>
<p><span><span><span><span><span><span> 将来，这些抽象的服务实现都将会是客户端库的一部分。</span></span></span></span></span></span></p>
<h1><span><span><span><span><span><span><strong>基本使用</strong></span></span></span></span></span></span></h1>
<p><span><span><span><span><span><span>安装NuGet包：</span></span></span></span></span></span></p>
<div class="cnblogs_code">
<pre>Microsoft.Extensions.AI (<span style="color: rgba(128, 0, 128, 1)">9.1</span>.<span style="color: rgba(128, 0, 128, 1)">0</span>-<span style="color: rgba(0, 0, 0, 1)">preview)
Microsoft.Extensions.AI.OpenAI (</span><span style="color: rgba(128, 0, 128, 1)">9.1</span>.<span style="color: rgba(128, 0, 128, 1)">0</span>-preivew)</pre>
</div>
<p><span><span><span><span><span><span><span>这里我们使用SiliconCloud提供的 DeepSeek-R1-Distill-Llama-8B 模型，这是一个使用DeepSeek-R1开发的基于<span>Llama-3.1-8B的蒸<span>馏模型，免费好用。</span></span></span></span></span></span></span></span></span></p>
<p><span><span><span><span><span><span><span><span><span>注册SiliconCloud：<a href="https://cloud.siliconflow.cn/i/DomqCefW" target="_blank" rel="noopener nofollow"><span><span><span>https://cloud.siliconflow.cn/i/DomqCefW</span></span></span></a></span></span></span></span></span></span></span></span></span></p>
<p><span><span><span><span><span><span><span>简单对话：</span></span></span></span></span></span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> openAIClientOptions = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> OpenAIClientOptions();
 openAIClientOptions.Endpoint </span>= <span style="color: rgba(0, 0, 255, 1)">new</span> Uri(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://api.siliconflow.cn/v1</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);

 </span><span style="color: rgba(0, 0, 255, 1)">var</span> client = <span style="color: rgba(0, 0, 255, 1)">new</span> OpenAIClient(<span style="color: rgba(0, 0, 255, 1)">new</span> ApiKeyCredential(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">sk-xxxxxxxxxx</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">),  openAIClientOptions);
 </span><span style="color: rgba(0, 0, 255, 1)">var</span> chatClient = client.AsChatClient(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">deepseek-ai/DeepSeek-R1-Distill-Llama-8B</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
 </span><span style="color: rgba(0, 0, 255, 1)">var</span> response = <span style="color: rgba(0, 0, 255, 1)">await</span> chatClient.CompleteAsync(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Who are you?</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
 Console.WriteLine(response.Message);</span></pre>
</div>
<p>封装的IChatClient对象可以十分方便地屏蔽差异，用起来十分方便。</p>
<h1><strong>函数调用</strong></h1>
<p>要想实现函数调用（Function Calling），则需要调整一下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> openAIClientOptions = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> OpenAIClientOptions();
 openAIClientOptions.Endpoint </span>= <span style="color: rgba(0, 0, 255, 1)">new</span> Uri(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://api.siliconflow.cn/v1</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);

[Description(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Get the current time</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
</span><span style="color: rgba(0, 0, 255, 1)">string</span> GetCurrentTime() =&gt;<span style="color: rgba(0, 0, 0, 1)"> DateTime.Now.ToLocalTime().ToString();

</span><span style="color: rgba(0, 0, 255, 1)">var</span> client = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatClientBuilder()
      .UseFunctionInvocation()
      .Use(</span><span style="color: rgba(0, 0, 255, 1)">new</span> OpenAIClient(<span style="color: rgba(0, 0, 255, 1)">new</span> ApiKeyCredential(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">sk-xxxxxxxxx</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">), openAIClientOptions)
      .AsChatClient(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">deepseek-ai/DeepSeek-R1-Distill-Llama-8B</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">));
</span><span style="color: rgba(0, 0, 255, 1)">var</span> response = <span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> client.CompleteAsync(
      </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">What's the time now?</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
      </span><span style="color: rgba(0, 0, 255, 1)">new</span>() { Tools =<span style="color: rgba(0, 0, 0, 1)"> [AIFunctionFactory.Create(GetCurrentTime)] });
Console.Write(response);</span></pre>
</div>
<p>可以看到，需要主动使用 UseFunctionInvocation 方法 及 提供 Tools 注册列表，就能使用我们封装的 Tools 了。</p>
<h1><strong>多模型使用</strong></h1>
<p>很多时候，我们希望Chat入口用一个模型，业务处理则用另一个模型，我们完全可以对其进行独立配置。</p>
<p>例如，这里参考mingupupu大佬的PaperAssistant，我也实现了一个。</p>
<p>在配置文件中，配置多AI模型：</p>
<div class="cnblogs_code">
<pre>{
  // For Paper Smmary
  "PaperSummaryModel": {
    "ModelId": "deepseek-ai/DeepSeek-R1-Distill-Llama-8B",
    "ApiKey": "sk-xxxxxxxxxx",
    "EndPoint": "https://api.siliconflow.cn"
  },
  // For Main Chat
  "MainChatModel": {
    "ModelId": "Qwen/Qwen2.5-7B-Instruct",
    "ApiKey": "sk-xxxxxxxxxx",
    "EndPoint": "https://api.siliconflow.cn"
  }
}</pre>
</div>
<p>对于某个业务处理，将其封装为Plugin，并使用 DeepSeek-R1-Distill-Llama-8B 模型：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">sealed</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> PaperAssistantPlugins
{
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> PaperAssistantPlugins(IConfiguration config)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">var</span> apiKeyCredential = <span style="color: rgba(0, 0, 255, 1)">new</span> ApiKeyCredential(config[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">PaperSummaryModel:ApiKey</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]);
        </span><span style="color: rgba(0, 0, 255, 1)">var</span> aiClientOptions = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> OpenAIClientOptions();
        aiClientOptions.Endpoint </span>= <span style="color: rgba(0, 0, 255, 1)">new</span> Uri(config[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">PaperSummaryModel:EndPoint</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]);
        </span><span style="color: rgba(0, 0, 255, 1)">var</span> aiClient = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> OpenAIClient(apiKeyCredential, aiClientOptions)
            .AsChatClient(config[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">PaperSummaryModel:ModelId</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]);
        ChatClient </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatClientBuilder(aiClient)
            .UseFunctionInvocation()
            .Build();
    }
    
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> IChatClient ChatClient { <span style="color: rgba(0, 0, 255, 1)">get</span><span style="color: rgba(0, 0, 0, 1)">; }
    
    [Description(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Read the PDF content from the file path</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
    [</span><span style="color: rgba(0, 0, 255, 1)">return</span>: Description(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">PDF content</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span> ExtractPdfContent(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> filePath)
    {
        Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[Tool] Now executing {nameof(ExtractPdfContent)}, params: {filePath}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">var</span> pdfContentBuilder = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> StringBuilder();
        </span><span style="color: rgba(0, 0, 255, 1)">using</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> document =<span style="color: rgba(0, 0, 0, 1)"> PdfDocument.Open(filePath))
        {
            </span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> page <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> document.GetPages())
                pdfContentBuilder.Append(page.Text);
        }
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> pdfContentBuilder.ToString();
    }
    
    [Description(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Create a markdown note file by file path</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span> SaveMarkDownFile([Description(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">The file path to save</span><span style="color: rgba(128, 0, 0, 1)">"</span>)] <span style="color: rgba(0, 0, 255, 1)">string</span> filePath, [Description(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">The content of markdown note</span><span style="color: rgba(128, 0, 0, 1)">"</span>)] <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> content)
    {
        Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[Tool] Now executing {nameof(SaveMarkDownFile)}, params: {filePath}, {content}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">
        {
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">File.Exists(filePath))
                File.WriteAllText(filePath, content);
            </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
                File.WriteAllText(filePath, content);
        }
        </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (Exception ex)
        {
            Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[Error] An error occurred: {ex.Message}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        }
    }
    
    [Description(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Generate one summary of one paper and save the summary to a local file by file path</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">async</span> Task GeneratePaperSummary(<span style="color: rgba(0, 0, 255, 1)">string</span> sourceFilePath, <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> destFilePath)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">var</span> pdfContent = <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.ExtractPdfContent(sourceFilePath);
        </span><span style="color: rgba(0, 0, 255, 1)">var</span> prompt = <span style="color: rgba(128, 0, 0, 1)">"""
</span>                     You<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">re one smart agent for reading the content of a PDF paper and summarizing it into a markdown note.</span>
<span style="color: rgba(0, 0, 0, 1)">                     User will provide the path of the paper and the path to create the note.
                     Please make sure the file path </span><span style="color: rgba(0, 0, 255, 1)">is</span> <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> the following format:
                     </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">D:\Documents\xxx.pdf</span><span style="color: rgba(128, 0, 0, 1)">"</span>
                     <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">D:\Documents\xxx.md</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
                     Please summarize the </span><span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 0, 1)">, introduction, literature review, main points, research methods, results, and conclusion of the paper.
                     The tile should be 《[Title]》, Authour should be [Author] and published </span><span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> [Year].
                     Please make sure the summary should include the following:
                     (</span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">) Abstrat
                     (</span><span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">) Introduction
                     (</span><span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">) Literature Review
                     (</span><span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">) Main Research Questions and Background
                     (</span><span style="color: rgba(128, 0, 128, 1)">5</span><span style="color: rgba(0, 0, 0, 1)">) Research Methods and Techniques Used
                     (</span><span style="color: rgba(128, 0, 128, 1)">6</span><span style="color: rgba(0, 0, 0, 1)">) Main Results and Findings
                     (</span><span style="color: rgba(128, 0, 128, 1)">7</span><span style="color: rgba(0, 0, 0, 1)">) Conclusion and Future Research Directions
                     </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">;</span>
        <span style="color: rgba(0, 0, 255, 1)">var</span> history = <span style="color: rgba(0, 0, 255, 1)">new</span> List&lt;ChatMessage&gt;<span style="color: rgba(0, 0, 0, 1)">
        {
            </span><span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatMessage(ChatRole.System, prompt),
            </span><span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatMessage(ChatRole.User, pdfContent)
        };
        </span><span style="color: rgba(0, 0, 255, 1)">var</span> result = <span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> ChatClient.CompleteAsync(history);
        </span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.SaveMarkDownFile(destFilePath, result.ToString());
    }
}</span></pre>
</div>
<p>对于对话主入口，则使用 Qwen2.5-7B-Instruct 模型即可：</p>
<div class="cnblogs_code">
<pre>Console.WriteLine(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Now loading the configuration...</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> config = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ConfigurationBuilder()
    .AddJsonFile($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">appsettings.json</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    .Build();
Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Now loading the chat client...</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> apiKeyCredential = <span style="color: rgba(0, 0, 255, 1)">new</span> ApiKeyCredential(config[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MainChatModel:ApiKey</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> aiClientOptions = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> OpenAIClientOptions();
aiClientOptions.Endpoint </span>= <span style="color: rgba(0, 0, 255, 1)">new</span> Uri(config[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MainChatModel:EndPoint</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> aiClient = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> OpenAIClient(apiKeyCredential, aiClientOptions)
    .AsChatClient(config[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MainChatModel:ModelId</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> chatClient = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatClientBuilder(aiClient)
    .UseFunctionInvocation()
    .Build();
Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Now loading the plugins...</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> plugins = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> PaperAssistantPlugins(config);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> chatOptions = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatOptions()
{
    Tools </span>=<span style="color: rgba(0, 0, 0, 1)"> 
    [
      AIFunctionFactory.Create(plugins.ExtractPdfContent),
      AIFunctionFactory.Create(plugins.SaveMarkDownFile),
      AIFunctionFactory.Create(plugins.GeneratePaperSummary)
    ]
};
Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Now starting chatting...</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> prompt = <span style="color: rgba(128, 0, 0, 1)">"""
</span>             You<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">re one smart agent for reading the content of a PDF paper and summarizing it into a markdown note.</span>
<span style="color: rgba(0, 0, 0, 1)">             User will provide the path of the paper and the path to create the note.
             Please make sure the file path </span><span style="color: rgba(0, 0, 255, 1)">is</span> <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> the following format:
             </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">D:\Documents\xxx.pdf</span><span style="color: rgba(128, 0, 0, 1)">"</span>
             <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">D:\Documents\xxx.md</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
             Please summarize the </span><span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 0, 1)">, introduction, literature review, main points, research methods, results, and conclusion of the paper.
             The tile should be 《[Title]》, Authour should be [Author] and published </span><span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> [Year].
             Please make sure the summary should include the following:
             (</span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">) Abstrat
             (</span><span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">) Introduction
             (</span><span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">) Literature Review
             (</span><span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">) Main Research Questions and Background
             (</span><span style="color: rgba(128, 0, 128, 1)">5</span><span style="color: rgba(0, 0, 0, 1)">) Research Methods and Techniques Used
             (</span><span style="color: rgba(128, 0, 128, 1)">6</span><span style="color: rgba(0, 0, 0, 1)">) Main Results and Findings
             (</span><span style="color: rgba(128, 0, 128, 1)">7</span><span style="color: rgba(0, 0, 0, 1)">) Conclusion and Future Research Directions
             </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">;</span>
<span style="color: rgba(0, 0, 255, 1)">var</span> history = <span style="color: rgba(0, 0, 255, 1)">new</span> List&lt;ChatMessage&gt;<span style="color: rgba(0, 0, 0, 1)">
{
    </span><span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatMessage(ChatRole.System, prompt)
};
</span><span style="color: rgba(0, 0, 255, 1)">bool</span> isComplete = <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">AI&gt; I'm Ready! What can I do for you?</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">do</span><span style="color: rgba(0, 0, 0, 1)">
{
    Console.Write(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">You&gt; </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 0, 255, 1)">string</span>? input =<span style="color: rgba(0, 0, 0, 1)"> Console.ReadLine();
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.IsNullOrWhiteSpace(input))
        </span><span style="color: rgba(0, 0, 255, 1)">continue</span><span style="color: rgba(0, 0, 0, 1)">;
        
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (input.Trim().Equals(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">EXIT</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, StringComparison.OrdinalIgnoreCase))
    {
        isComplete </span>= <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
    }
    
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (input.Trim().Equals(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Clear</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, StringComparison.OrdinalIgnoreCase))
    {
        history.Clear();
        Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Cleared our chatting history successfully!</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">continue</span><span style="color: rgba(0, 0, 0, 1)">;
    }
    
    history.Add(</span><span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatMessage(ChatRole.User, input));
    Console.WriteLine();
    </span><span style="color: rgba(0, 0, 255, 1)">var</span> result = <span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> chatClient.CompleteAsync(input, chatOptions);
    Console.WriteLine(result.ToString());
    history.Add(</span><span style="color: rgba(0, 0, 255, 1)">new</span> ChatMessage(ChatRole.Assistant, result.ToString() ?? <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.Empty));
} </span><span style="color: rgba(0, 0, 255, 1)">while</span> (!isComplete);</pre>
</div>
<p><span><span>这里测试一下，我让它帮我总结一个pdf并将总结内容生成到一个md文件中输出到我指定的目录下保存。</span></span></p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202502/381412-20250217203237526-995219210.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p><span><span>可以看出，它成功地调用了Plugin完成了PDF读取、内容提取总结 和 生成Markdown文件。</span></span></p>
<h1><span><span><span><span>eShopSupport</span></span><br></span></span></h1>
<p><span><span>eShopSupport 是一个开源的AI示例应用程序，客户可以使用它来与AI客户对话查询产品，实现网站系统的“智能客服”的场景。</span></span></p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202502/381412-20250217203304405-2018575062.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202502/381412-20250217203310833-1072123733.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>&nbsp;</p>
<p><span><span>这个开源项目就使用了 Microsoft.Extensions.AI 作为和AI服务集成的抽象层，值得我们参考学习。</span></span></p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202502/381412-20250217203323448-1350207543.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p><span><span>值得一提的是，它并没有说全部统一.NET技术栈，而是保留了Python作为机器学习模型训练和推理的，展示了技术异构在这个场景下的融合。</span></span></p>
<p><span><span>此外，基于Aspire来生成可观察和可靠的云原生应用也是这个项目带来的一个亮点，可以学习下。</span></span></p>
<h1><span><span>小结</span></span></h1>
<p>本文介绍了Microsoft.Extensions.AI的基本概念 和 基本使用，如果你也是.NET程序员希望参与AI应用的开发，那就快快了解和使用起来吧。</p>
<h1><strong><span>示例源码</span></strong></h1>
<p><span>GitHub：<a href="https://github.com/Coder-EdisonZhou/EDT.Agent.Demos" target="_blank" rel="noopener nofollow"><span>https://github.com/Coder-EdisonZhou/EDT.Agent.Demos</span></a></span></p>
<h1><span><span><strong><span>参考内容</span></strong></span></span></h1>
<p><span><span><strong><span>mingupupu</span></strong><span>的文章：<a href="https://www.cnblogs.com/mingupupu/p/18651932" target="_blank"><span>https://www.cnblogs.com/mingupupu/p/18651932</span></a></span></span></span></p>
<h1><span><span>更多</span></span></h1>
<p><span><span>Microsoft Learn:&nbsp;<a href="https://learn.microsoft.com/zh-cn/dotnet/ai/ai-extensions" target="_blank" rel="noopener nofollow"><span>https://learn.microsoft.com/zh-cn/dotnet/ai/ai-extensions</span></a></span></span></p>
<p><span><span><span><span><span>eShopSupport: &nbsp;<a href="https://github.com/dotnet/eShopSupport" target="_blank" rel="noopener nofollow"><span>https://github.com/dotnet/eShopSupport</span></a></span></span></span></span></span></p>
<p><span><span><span><span><span>devblogs:&nbsp;<a href="https://devblogs.microsoft.com/dotnet/e-shop-infused-with-ai-comprehensive-intelligent-dotnet-app-sample" target="_blank" rel="noopener nofollow"><span>https://devblogs.microsoft.com/dotnet/e-shop-infused-with-ai-comprehensive-intelligent-dotnet-app-sample</span></a></span></span></span></span></span></p>
<p>&nbsp;</p>
<p style="text-align: center"><img src="https://images.cnblogs.com/cnblogs_com/edisonchou/1647700/o_200902144330EdisonTalk-Footer.jpg" alt="" style="width: 65%; border: 1px solid rgba(221, 221, 221, 1); border-radius: 3px; box-shadow: 0 4px 8px rgba(3, 27, 78, 0.12)"></p>
<div id="Copyright">
<p>作者：<a title="author" href="https://edisonchou.cnblogs.com" target="_blank">周旭龙</a></p>
<p>出处：<a title="from" href="https://edisonchou.cnblogs.com" target="_blank">https://edisonchou.cnblogs.com</a></p>
<p>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。</p>



</div>
</div>
<div id="MySignature" role="contentinfo">
    <div align="center"><a href="https://weibo.com/u/2068032061?s=6uyXnP" target="_blank"><img border="0" src="http://service.t.sina.com.cn/widget/qmd/2068032061/d643d182/10.png"></a></div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0761736713449074" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-19 10:29">2025-02-18 18:30</span>&nbsp;
<a href="https://www.cnblogs.com/edisonchou">EdisonZhou</a>&nbsp;
阅读(<span id="post_view_count">340</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18718555" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18718555);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18718555', targetLink: 'https://www.cnblogs.com/edisonchou/p/-/introduction-to-microsoft-extensions-ai', title: '.NET程序员AI开发基座：Microsoft.Extensions.AI' })">举报</a>
</div>
        