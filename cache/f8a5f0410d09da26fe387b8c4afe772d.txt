
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xwz1024/p/18997086" title="发布于 2025-07-22 08:55">
    <span role="heading" aria-level="2">Django集成Swagger全指南：两种实现方案详解</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250722085445627-864871600.png" alt="Django集成Swagger全指南：两种实现方案详解" class="desc_img">
        本文介绍了在 Django 项目中集成 Swagger 的两种主流方案 —— drf-yasg 和 drf-spectacular，涵盖安装配置、效果展示及高级用法，助力开发者高效构建交互式 API 文档系统，提升前后端协作效率。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="一前言">一、前言</h2>
<h3 id="概述">概述</h3>
<p>在前后端分离开发中，API 文档的重要性不言而喻。Swagger（现更名为 OpenAPI）作为主流的 API 文档生成工具，能自动生成交互式文档，极大提升开发效率。本文将介绍两种在 Django 项目中集成 Swagger 的实用方案，帮助开发者快速搭建完善的 API 文档系统。</p>
<h3 id="什么是-swaggeropenapi">什么是 Swagger/OpenAPI？</h3>
<p>Swagger 是一套用于描述、生成、消费和可视化 RESTful API 的规范和工具集，目前已演进为 OpenAPI 规范：</p>
<ul>
<li><strong>Swagger 2.0</strong>：支持 WebSockets、OAuth2、文件上传等功能，提升了 API 描述的精确度</li>
<li><strong>OpenAPI 3.0</strong>：下一代规范，提供更严格的模式验证、更多数据类型支持和更好的扩展性</li>
</ul>
<p>通过集成 Swagger，开发者可以获得：</p>
<ul>
<li>自动生成的交互式 API 文档</li>
<li>在线接口调试功能</li>
<li>标准化的 API 描述格式（JSON/YAML）</li>
<li>便于前后端协作和 API 版本管理</li>
</ul>
<h3 id="两种方案对比">两种方案对比</h3>
<table>
<thead>
<tr>
<th>特性</th>
<th>drf-yasg</th>
<th>drf-spectacular</th>
</tr>
</thead>
<tbody>
<tr>
<td>规范支持</td>
<td>Swagger 2.0</td>
<td>OpenAPI 3.0</td>
</tr>
<tr>
<td>功能丰富度</td>
<td>基础功能完善</td>
<td>高级功能更丰富</td>
</tr>
<tr>
<td>可定制性</td>
<td>中等</td>
<td>高</td>
</tr>
<tr>
<td>学习曲线</td>
<td>平缓</td>
<td>稍陡</td>
</tr>
<tr>
<td>推荐场景</td>
<td>简单项目快速集成</td>
<td>复杂项目、需要高级定制</td>
</tr>
</tbody>
</table>
<h2 id="二方案一使用-drf-yasg支持-swagger-20">二、方案一：使用 drf-yasg（支持 Swagger 2.0）</h2>
<h3 id="工具介绍">工具介绍</h3>
<p>drf-yasg 是基于 Django REST Framework (DRF) 的 API 文档生成工具，专注于 Swagger 2.0 规范，具有以下特点：</p>
<ul>
<li>动态生成 Swagger UI，支持多种主题</li>
<li>可自定义文档样式和内容</li>
<li>支持隐藏指定字段、添加额外参数等高级功能</li>
</ul>
<h3 id="安装步骤">安装步骤</h3>
<p>安装</p>
<pre><code class="language-sh">pip install -U drf-yasg
</code></pre>
<p>配置settings.py：在 <code>INSTALLED_APPS</code> 中添加相关应用</p>
<pre><code class="language-python">INSTALLED_APPS = [
   # ...
   'django.contrib.staticfiles',  # 用于提供 Swagger UI 的静态文件
   'drf_yasg',
   # ...
]
</code></pre>
<p>配置urls.py：添加 Swagger 相关路由</p>
<pre><code class="language-python">from django.urls import re_path
from rest_framework import permissions
from drf_yasg.views import get_schema_view
from drf_yasg import openapi

# 配置 API 文档基本信息
schema_view = get_schema_view(
   openapi.Info(
      title="项目 API",
      default_version='v1',
      description="API 接口文档描述",
      terms_of_service="https://www.example.com/terms/",
      contact=openapi.Contact(email="contact@example.com"),
      license=openapi.License(name="MIT License"),
   ),
   public=True,
   permission_classes=(permissions.AllowAny,),  # 允许任何人访问文档
)

# 添加 URL 路由
urlpatterns = [
   # ...
   # 文档 JSON/YAML 下载
   path('swagger&lt;format&gt;/', schema_view.without_ui(cache_timeout=0), name='schema-json'),
   # Swagger UI 页面
   path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
   # ReDoc 页面
   path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
   # ...
]
</code></pre>
<h3 id="查看效果">查看效果</h3>
<p>启动 Django 项目后，通过以下地址访问文档：</p>
<ul>
<li>Swagger UI 界面：<code>http://localhost:8000/swagger/</code></li>
</ul>
<p><img alt="image-20241009183315554" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250722085338970-596052852.png" class="lazyload"></p>
<ul>
<li>ReDoc 界面：<code>http://localhost:8000/redoc/</code></li>
<li>下载 JSON 格式文档：<code>http://localhost:8000/swagger.json</code></li>
<li>下载 YAML 格式文档：<code>http://localhost:8000/swagger.yaml</code></li>
</ul>
<h2 id="三方案二使用-drf-spectacular支持-openapi-30">三、方案二：使用 drf-spectacular（支持 OpenAPI 3.0）</h2>
<h3 id="工具介绍-1">工具介绍</h3>
<p>drf-spectacular 是新一代 API 文档生成工具，支持 OpenAPI 3.0 规范，具有以下优势：</p>
<ul>
<li>更强的可扩展性和可定制性</li>
<li>支持客户端代码生成</li>
<li>兼容多种 DRF 插件</li>
<li>提供更丰富的文档装饰器</li>
</ul>
<p>参考资料： <a href="https://drf-spectacular.readthedocs.io/en/latest/" target="_blank" rel="noopener nofollow">drf-spectacular 官方文档</a></p>
<h3 id="安装步骤-1">安装步骤</h3>
<p>安装</p>
<pre><code class="language-sh">pip install drf-spectacular
pip install drf-spectacular[sidecar] # 安装内置 UI 资源（推荐）
</code></pre>
<p>配置 settings.py：<a href="https://gitee.com/zhulj993/mars-mgn/blob/master/mysite/mysite/settings.py" target="_blank" rel="noopener nofollow">点击查看完整代码</a></p>
<pre><code class="language-python">INSTALLED_APPS = [
	# ...
    'drf_spectacular',
    'drf_spectacular_sidecar',  # 内置 UI 资源
    # ...
]

# 配置 DRF
REST_FRAMEWORK = {
    # OpenAPI 文档
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

### drf-spectacular OpenAPI 文档配置
SPECTACULAR_SETTINGS = {
    "SWAGGER_UI_DIST": "SIDECAR",  # 使用内置 UI
    "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
    "TITLE": "MarsMgn API",
    "DESCRIPTION": "火星信息平台接口文档",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,  # 不在文档中包含 schema 本身
}
</code></pre>
<p>配置 urls.py：<a href="https://gitee.com/zhulj993/mars-mgn/blob/master/mysite/mysite/urls.py" target="_blank" rel="noopener nofollow">点击查看完整代码</a></p>
<pre><code class="language-python">from drf_spectacular.views import SpectacularAPIView, SpectacularRedocView, SpectacularSwaggerView

urlpatterns = [
    #...
    # API schema 生成端点
    path('api/schema/', SpectacularAPIView.as_view(), name='schema'),
    # Swagger UI 界面
    path('api/schema/swagger-ui/', SpectacularSwaggerView.as_view(url_name='schema'), name='swagger-ui'),
    # ReDoc 界面
    path('api/schema/redoc/', SpectacularRedocView.as_view(url_name='schema'), name='redoc'),
    #...
]
</code></pre>
<h3 id="查看效果-1">查看效果</h3>
<p>启动 Django 项目后，通过以下地址访问 Swagger UI 界面：<code>http://127.0.0.1:8000/api/schema/swagger-ui</code></p>
<p><img alt="image-20250722082135270" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250722085405545-1710397661.png" class="lazyload"></p>
<h2 id="四drf-spectacular-高级使用技巧">四、drf-spectacular 高级使用技巧</h2>
<h3 id="字段注释">字段注释</h3>
<p>文档描述优先从序列化器 / 模型的 <code>help_text</code> 提取：</p>
<pre><code class="language-python">class SystemPost(models.Model):
    id = models.BigAutoField(primary_key=True, help_text="岗位ID")
    code = models.CharField(
        max_length=64,
        help_text="岗位编码",  # 会显示在文档中
    )
</code></pre>
<h3 id="接口说明">接口说明</h3>
<p>使用 <code>@extend_schema</code> 装饰器自定义接口描述：</p>
<pre><code class="language-python">from drf_spectacular.utils import extend_schema

@extend_schema(summary="创建岗位", description="自定义接口详细说明")
@action(methods=["post"], detail=False, url_path="create")
def create_post(self, request, *args, **kwargs):
    return self.custom_create(request, *args, **kwargs)
</code></pre>
<h3 id="接口分组">接口分组</h3>
<p>通过 <code>tags</code> 参数对接口进行分组：</p>
<pre><code class="language-python">@extend_schema(tags=["管理后台-system-岗位"])
class PostViewSet(CustomViewSet):
    queryset = SystemPost.objects.all()
    filterset_class = SystemPostFilter
</code></pre>
<h3 id="请求与响应参数定义">请求与响应参数定义</h3>
<p>定义响应参数示例</p>
<pre><code class="language-python">from drf_spectacular.utils import extend_schema, OpenApiResponse
from drf_spectacular.types import OpenApiTypes

@extend_schema(
    responses={
        200: OpenApiResponse(
            description="操作成功",
            response={
                "type": "object",
                "properties": {
                    "code": {"type": "integer", "example": 0},
                    "data": {"type": "boolean", "example": True},
                    "msg": {"type": "string", "example": ""}
                }
            }
        )
    }
)
def delete_post(self, request, *args, ​**kwargs):
    """删除岗位"""
    return Response({"code": 0, "data": True, "msg": ""}, status=200)
</code></pre>
<hr>
<p>您正在阅读的是《<strong>Django从入门到实战</strong>》专栏！关注不迷路~</p>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-22 08:55">2025-07-22 08:55</span>&nbsp;
<a href="https://www.cnblogs.com/xwz1024">小王子1024</a>&nbsp;
阅读(<span id="post_view_count">4</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18997086);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18997086', targetLink: 'https://www.cnblogs.com/xwz1024/p/18997086', title: 'Django集成Swagger全指南：两种实现方案详解' })">举报</a>
</div>
	