
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/w9095/p/18979884" title="发布于 2025-07-11 23:03">
    <span role="heading" aria-level="2">【7】卡特兰数学习笔记</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h3 id="前言">前言</h3>
<p>感觉卡特兰数是非常实用的小技巧，一般在题目中以经典模型或发现递推式相同从而运用。就是典型的会的人秒掉，不会的人死都想不出来。</p>
<h3 id="卡特兰数">卡特兰数</h3>
<h4 id="定义">定义</h4>
<p>对于一个由 <span class="math inline">\(n\)</span> 个 <span class="math inline">\(+1\)</span> 和 <span class="math inline">\(n\)</span> 个 <span class="math inline">\(-1\)</span> 组成的序列，满足每个位置的前缀和 <span class="math inline">\(\ge 0\)</span> 的不同的序列数称为 <span class="math inline">\(\text{Cat}_{n}\)</span>，表示卡特兰数的第 <span class="math inline">\(n\)</span> 项。</p>
<p>务必熟知这个概念，这个概念可以转化为以下三个经典问题。</p>
<p><span class="math inline">\(1\)</span>：由 <span class="math inline">\(n\)</span> 对括号组成的不同的括号序列的数量为 <span class="math inline">\(\text{Cat}_{n}\)</span>。</p>
<p><span class="math inline">\(2\)</span>：一个栈进栈序列 <span class="math inline">\(1,2,3\dots,n\)</span> 的有 <span class="math inline">\(\text{Cat}_{n}\)</span> 种不同的出栈序列。</p>
<p><span class="math inline">\(3\)</span>：大小为 <span class="math inline">\(n\times n\)</span> 的方格图，起点为 <span class="math inline">\((0,0)\)</span>，终点为 <span class="math inline">\((n,n)\)</span>。每次只能向右或向上走一步，不能经过直线 <span class="math inline">\(y=x+1\)</span> 上的点，合法路径数为 <span class="math inline">\(\text{Cat}_{n}\)</span>。</p>
<h4 id="递推式">递推式</h4>
<p>边界情况为 <span class="math inline">\(\text{Cat}_{0}=1\)</span>。</p>
<p>卡特兰数的递推式 <span class="math inline">\(1\)</span> 为 <span class="math inline">\(\text{Cat}_{n}=\sum_{i=1}^n\text{Cat}_{i-1}\times \text{Cat}_{n-i}\)</span>。</p>
<hr>
<p>考虑问题 <span class="math inline">\(2\)</span> 的另一种解法，设 <span class="math inline">\(f[n]\)</span> 表示前 <span class="math inline">\(n\)</span> 个元素不同的出栈序列的数量。转移的话考虑枚举 <span class="math inline">\(n\)</span> 是第 <span class="math inline">\(i\)</span> 个出栈的元素，则前 <span class="math inline">\(i\)</span> 个元素和后 <span class="math inline">\(i\)</span> 个元素出栈顺序独立，由乘法原理得这种情况的方案数为 <span class="math inline">\(f[i-1]\times f[n-i]\)</span>。最后由加法原理把不同的 <span class="math inline">\(i\)</span> 的方案数加起来。</p>
<p>因此，有 <span class="math inline">\(\text{Cat}_{n}=\sum_{i=1}^n\text{Cat}_{i-1}\times \text{Cat}_{n-i}\)</span>。</p>
<hr>
<p>卡特兰数的递推式 <span class="math inline">\(2\)</span> 为 <span class="math inline">\(\text{Cat}_{n}=\text{Cat}_{n-1}\times\frac{4n-2}{n+1}\)</span>。</p>
<hr>
<p>我们利用卡特兰数的通项公式(见下一板块)，直接带入通项公式就可以证明。</p>
<p></p><div class="math display">\[\begin{aligned}
  \text{Cat}_n &amp;= C_{2n}^n-C_{2n}^{n+1} \\
               &amp;= \frac{(2n)!}{(2n-n)!(n)!}-\frac{(2n)!}{(2n-n-1)!(n+1)!}\\
               &amp;= \frac{(2n)!}{(n)!^2}-\frac{(2n)!}{(n)!^2\frac{n+1}{n}}\\
               &amp;= \frac{(2n)!}{n!^2(n+1)}\\
\end{aligned}\]</div><p></p><p>将 <span class="math inline">\(n\)</span> 用 <span class="math inline">\(n-1\)</span> 代换后相除得到递推系数。</p>
<p></p><div class="math display">\[\text{Cat}_{n-1}=\frac{(2n-2)!}{(n-1)!^2n}
\]</div><p></p><p></p><div class="math display">\[\begin{aligned}
\frac{\text{Cat}_n}{\text{Cat}_{n-1}}&amp;=\frac{\frac{(2n)!}{(n)!^2(n+1)}}{\frac{(2n-2)!}{(n-1)!^2n}}\\
   &amp;=\frac{(n-1)!^2n(2n)!}{n!^2(n+1)(2n-2)!}\\
   &amp;=\frac{n\times 2n(2n-1)}{n^2(n+1)}\\
   &amp;=\frac{4n-2}{n+1}
\end{aligned}\]</div><p></p><p>因此，有 <span class="math inline">\(\text{Cat}_{n}=\text{Cat}_{n-1}\times\frac{4n-2}{n+1}\)</span>。</p>
<hr>
<p>由递推式相同，我们还可以推出卡特兰数可以转化为这三个经典问题。</p>
<p><span class="math inline">\(4\)</span>：由 <span class="math inline">\(n\)</span> 个节点可以构成 <span class="math inline">\(\text{Cat}_{n}\)</span> 棵不同的二叉树。</p>
<p><span class="math inline">\(5\)</span>：在圆中选择 <span class="math inline">\(n\)</span> 个点对，使这些点对连成的 <span class="math inline">\(n\)</span> 条线段互不相交的方案数为 <span class="math inline">\(\text{Cat}_{n}\)</span>。</p>
<p><span class="math inline">\(6\)</span>：对角线不相交的情况下，将一个凸多边形区域分成三角形区域的方法数为 <span class="math inline">\(\text{Cat}_{n}\)</span>。</p>
<h4 id="通项公式">通项公式</h4>
<p>卡特兰数的通项公式为 <span class="math inline">\(\text{Cat}_{n}=C_{2n}^n-C_{2n}^{n+1}\)</span>，其中 <span class="math inline">\(C\)</span> 为组合数。</p>
<hr>
<p>考虑问题 <span class="math inline">\(3\)</span> 的另一种解法，显然，考虑分配向上和向右的一步的位置，从 <span class="math inline">\((x,y)\)</span> 走到 <span class="math inline">\((n,n)\)</span> 只能向右或向上的路径数为 <span class="math inline">\(C_{n-x}^{n-y}\)</span>。</p>
<p>使用反射容斥，不合法的路径的方案数等价于从 <span class="math inline">\((-1,1)\)</span> 到 <span class="math inline">\((n,n)\)</span> 的方案数。因为如果碰到直线 <span class="math inline">\(y=x+1\)</span> 上的点，就把从起点到这个碰到的点的路径沿 <span class="math inline">\(y=x+1\)</span> 翻折。显然不合法路径和从 <span class="math inline">\((-1,1)\)</span> 到 <span class="math inline">\((n,n)\)</span> 的路径一一对应，形成双射。不合法路径的数量即为 <span class="math inline">\(C_{2n}^{n+1}\)</span>。</p>
<p>因此，有 <span class="math inline">\(\text{Cat}_{n}=C_{2n}^n-C_{2n}^{n+1}\)</span>。</p>
<hr>
<h3 id="例题">例题</h3>
<p>例题 <span class="math inline">\(1\)</span> ：</p>
<p><a href="https://www.luogu.com.cn/problem/P2532" target="_blank" rel="noopener nofollow">P2532 [AHOI2012] 树屋阶梯</a></p>
<p>首先每一列最上面的那些木块任意两个不能被包含在同一个长方形中，而这样的木块有 <span class="math inline">\(n\)</span> 个，长方形也只有 <span class="math inline">\(n\)</span> 个，因此每个长方形右上角必然为某一列最上面的木块。</p>
<p>直接求做不了，考虑递推。设 <span class="math inline">\(f[n]\)</span> 为 <span class="math inline">\(n\)</span> 级阶梯的方案数，枚举最后一个长方形的右上角，把图分成了左上角的阶梯和右下角的阶梯。这两个阶梯是完全相同且独立的子问题，可以直接乘法原理合并得出转移式。</p>
<p></p><div class="math display">\[f[n]=\sum_{i=1}^n f[n-i]f[i-1]
\]</div><p></p><p>发现这就是卡特兰数的递推式 <span class="math inline">\(1\)</span>，使用卡特兰数的递推式 <span class="math inline">\(2\)</span> 加上高精度就做完了。</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
int n,ans[600000];
void mul(int x)
{
	int flag=0;
	for(int i=1;i&lt;=50000;i++)ans[i]=ans[i]*x+flag,flag=ans[i]/10,ans[i]%=10;
}

void div(int x)
{
	int flag=0;
	for(int i=50000;i&gt;=1;i--)ans[i]+=flag*10,flag=ans[i]%x,ans[i]=ans[i]/x;
}

int main()
{
	scanf("%d",&amp;n);
	ans[1]=1;
	for(int i=2;i&lt;=n;i++)mul(4*i-2),div(i+1);
	bool flag=0;
	for(int i=50000;i&gt;=1;i--)
	    if(flag||ans[i])printf("%d",ans[i]),flag=1;
	return 0;
}
</code></pre>
<p>小技巧：熟记卡特兰数前几项 <span class="math inline">\(1,1,2,5,14,42,132\dots\)</span>，看到第 <span class="math inline">\(3\)</span> 项为 <span class="math inline">\(5\)</span> 直接猜卡特兰数，写一发过了，证明确实是卡特兰数。</p>
<p>例题 <span class="math inline">\(2\)</span> ：</p>
<p><a href="https://www.luogu.com.cn/problem/P3200" target="_blank" rel="noopener nofollow">P3200 [HNOI2009] 有趣的数列</a></p>
<p>由于奇数项和偶数项又分开的限制，所以我们从小到大考虑每个数是填在奇数项的第一个可用的位置还是偶数项的第一个可用的位置。</p>
<p>如果已经填入的偶数项的数大于奇数项的数，假设奇数项填到了 <span class="math inline">\(2k-1\)</span>，因为至少多一项，那偶数项至少填到了 <span class="math inline">\(2k+2\)</span>。由于从小到大填，则下一个奇数项 <span class="math inline">\(2k+1\)</span> 必然大于 <span class="math inline">\(2k+2\)</span> 的数，与条件 <span class="math inline">\(3\)</span> 奇数项小于偶数项矛盾。</p>
<p>因此，我们可以把填在奇数项看作左括号，填在偶数项看作右括号，就转化为了合法括号序列计数问题，答案就是卡特兰数。</p>
<p>由于模数不一定是质数，逆元不一定存在，所以我们选用递推式 <span class="math inline">\(2\)</span> 加分解质因数求最终答案。</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
int n,mod,ans=1,pr[500000],dm[5000000],cnt=0;
bool b[5000000];
map&lt;int,int&gt;p;
int power(int a,int p)
{
	int x=a,ans=1;
	while(p)
	   {
	   	if(p&amp;1)ans=1ll*ans*x%mod;
	   	p&gt;&gt;=1;
	   	x=1ll*x*x%mod;
	   }
	return ans;
}

void init(int mx)
{
	b[1]=1;
	for(int i=2;i&lt;=mx;i++)
	    {
	    if(!b[i])pr[++cnt]=i,dm[i]=i;
       	for(int j=1;j&lt;=cnt&amp;&amp;i*pr[j]&lt;=mx;j++)
       	    {
		    b[i*pr[j]]=1,dm[i*pr[j]]=pr[j];
		    if(i%pr[j]==0)break;
       	    } 
       	}
}

void insert(int x)
{
	while(x!=1)p[dm[x]]++,x/=dm[x];
}

void outsert(int x)
{
	while(x!=1)p[dm[x]]--,x/=dm[x];
}

int main()
{
	init(4000000);
	scanf("%d%d",&amp;n,&amp;mod);
	for(int i=1;i&lt;=n;i++)insert(i*4-2),outsert(i+1);
	auto it=p.begin();
	while(it!=p.end())
	   {
	   if((*it).second)ans=1ll*ans*power((*it).first,(*it).second)%mod;
	   it++;
       }
	printf("%d\n",ans);
	return 0;
}
</code></pre>
<p>例题 <span class="math inline">\(3\)</span> ：</p>
<p><a href="https://www.luogu.com.cn/problem/CF2063F2" target="_blank" rel="noopener nofollow">CF2063F2 Counting Is Not Fun (Hard Version)</a></p>
<p>看到括号问题，直接想到卡特兰数。如果没有已经固定的括号，那答案就是 <span class="math inline">\(\text{Cat}_n\)</span>。</p>
<p>我们进一步观察，即使括号序列中已经存在若干个连续的位置构成合法括号序列，只要剩余的位置数为 <span class="math inline">\(2n\)</span>，答案一定就是 <span class="math inline">\(\text{Cat}_n\)</span>。因为合法的括号序列不会对接下来的填法造成任何影响，所以可以忽略。</p>
<p>现在我们考虑转化出没有已经固定的括号的情况。考虑离线，对最终确定的括号序列建出一棵括号树。由括号树的性质，想计算某个节点的空余位置大小只需要减去其直接子节点的位置大小。这样一定可以计算到所有的空余区域，且由于不同节点之间的空余区域独立，直接乘法原理合并答案。</p>
<p>因此，我们每个节点维护其对应的区间大小与子节点区间大小的和。更新一个节点时，就先撤销它对总方案的贡献，修改后再加回来。</p>
<p>但正着加可能会导致加入一个节点后大量节点父节点改变很难计算，所以考虑倒着删边。这样我们就可以使用并查集维护一个结点的父亲，删除时只需要撤销贡献，然后合并自己和父节点即可。注意合并的方向有影响，必须是儿子合并到父亲。</p>
<p>代码中在 <span class="math inline">\(0\)</span> 和 <span class="math inline">\(n+1\)</span> 处添加了一对虚拟括号来保证括号树不是森林，同时避免一些边界情况。</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
long long t,n,cat[800000],inv[800000],p[800000],v[800000],l[800000],r[800000],f[800000],fa[800000],ans[800000],st[800000],top=0,now=1;
char a[800000];
const long long mod=998244353;
long long power(long long a,long long p)
{
	long long x=a,ans=1;
	while(p)
	   {
	   	if(p&amp;1)ans=ans*x%mod;
	   	p&gt;&gt;=1;
	   	x=x*x%mod;
	   }
	return ans;
}

long long getf(long long x)
{
	if(fa[x]==x)return x;
	else return fa[x]=getf(fa[x]);
}

void merge(long long x,long long y)
{
	long long p=getf(x),q=getf(y);
	if(p!=q)v[p]+=v[q],fa[q]=p;
}

int main()
{
	cat[0]=cat[1]=inv[0]=inv[1]=1;
	for(int i=2;i&lt;=300000;i++)cat[i]=cat[i-1]*(4*i-2)%mod*power(i+1,mod-2)%mod;
	for(int i=2;i&lt;=300000;i++)inv[i]=power(cat[i],mod-2);
	scanf("%lld",&amp;t);
	while(t--)
	   {
	   	scanf("%lld",&amp;n);
	   	for(int i=0;i&lt;=n;i++)p[i]=v[i]=0,fa[i]=i,now=1;
	   	a[0]='(',l[0]=0,r[0]=2*n+1;
	   	for(int i=1;i&lt;=n;i++)scanf("%lld%lld",&amp;l[i],&amp;r[i]),a[l[i]]='(',a[r[i]]=')',p[l[i]]=i;
	   	for(int i=0;i&lt;=2*n;i++)
	   	    if(a[i]=='(')st[++top]=p[i];
	   	    else v[st[top-1]]+=(r[st[top]]-l[st[top]]+1),f[st[top]]=st[top-1],top--;
	   	for(int i=0;i&lt;=n;i++)now=now*cat[(r[i]-l[i]-1-v[i])&gt;&gt;1]%mod;
	   	ans[n+1]=now;
	   	for(int i=n;i&gt;=1;i--)
	   	    {
	   	    	now=now*inv[(r[i]-l[i]-1-v[i])&gt;&gt;1]%mod;
	   	    	now=now*inv[(r[getf(f[i])]-l[getf(f[i])]-1-v[getf(f[i])])&gt;&gt;1]%mod;
	   	    	v[getf(f[i])]-=(r[i]-l[i]+1),merge(f[i],i);
	   	    	now=now*cat[(r[getf(f[i])]-l[getf(f[i])]-1-v[getf(f[i])])&gt;&gt;1]%mod;
	   	    	ans[i]=now;
			}
		for(int i=1;i&lt;=n+1;i++)printf("%lld ",ans[i]);
		printf("\n");
	   }
	return 0;
}
</code></pre>
<h3 id="后记">后记</h3>
<p>卡特兰数就很像卡牌游戏中的过牌，是润滑必备组件。如果熟练掌握卡特兰数，遇到题目的时候注意力是很丝滑的，很难注意不到。</p>
<blockquote>
<p>怅卧新春白袷衣 白门寥落意多违</p>
<p>红楼隔雨相望冷 珠箔飘灯独自归</p>
<p>远路应悲春晼晚 残宵犹得梦依稀</p>
<p>玉珰缄札何由达 万里云罗一雁飞</p>
</blockquote>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-11 23:03">2025-07-11 23:03</span>&nbsp;
<a href="https://www.cnblogs.com/w9095">w9095</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18979884);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18979884', targetLink: 'https://www.cnblogs.com/w9095/p/18979884', title: '【7】卡特兰数学习笔记' })">举报</a>
</div>
        