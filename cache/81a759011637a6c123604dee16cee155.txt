
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/yanshajiuzhou/p/18723119" title="发布于 2025-02-18 23:17">
    <span role="heading" aria-level="2">观察者模式</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        观察者模式是一种一对多的通知机制，让发送通知的一方（被观察者）和接收通知的一方（观察者）能彼此分离，互不影响。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><span id="cke_bm_875S">观察者（Observer、Publish-Subscribe：Pub/Sub）模式属于行为型模式的一种。</span></p>
<p>观察者模式是一种一对多的<strong>通知</strong>机制，让发送通知的一方（被观察者）和接收通知的一方（观察者）能彼此分离，互不影响。观察者模式的目的是要分离被观察者和观察者之间的耦合关系。</p>
<p>观察者模式的核心在于建立一种机制，使得当一个对象的状态变化时，所有依赖于它的对象（观察者）都能得到通知并作出相应的更新。</p>
<p>广义的观察者模式包括所有消息系统。消息系统，就是把观察者和被观察者完全分离，通过消息系统本身来进行通知。</p>
<p>在真实世界中，出版社是发布者，我们这些订阅了报纸或杂志的民众，是订阅者。出版社会在刊物出版后直接将最新一期寄送给我们，我们不用跑去出版社拿了。</p>
<p>Java标准库中的&nbsp;<strong>java.util.Observer&nbsp;</strong>类和&nbsp;<strong>java.util.Observable&nbsp;</strong>类，本来可以用来帮助我们实现观察者模式的。但是，这两个类在Java 9中已经被<strong>弃用</strong>了，弃用原因我就不描述了，大家可以搜一下。我们可以使用自定义的观察者模式，来满足更灵活的需求。</p>
<p>观察者模式通常有以下组成部分：&nbsp;</p>
<ul>
<li>观察者接口：包含一个更新方法，用于接收主题的通知。</li>
<li>具体观察者：实现观察者接口，定义接收到通知时的行为。</li>
<li>主题接口：包含添加、删除和通知观察者的方法。</li>
<li>具体主题：实现主题接口，管理观察者列表，并在状态改变时通知它们。</li>
</ul>
<p>我们模拟一个简单的观察者模式。</p>
<p>1、观察者接口</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="4" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20%E8%A7%82%E5%AF%9F%E8%80%85%E6%8E%A5%E5%8F%A3%5Cnpublic%20interface%20Observer%20%7B%5Cn%20%20%20%20void%20update(String%20message)%3B%5Cn%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="language-java hljs"><span class="hljs-comment">// 观察者接口
<span class="hljs-keyword">public <span class="hljs-keyword">interface <span class="hljs-title class_">Observer {
    <span class="hljs-keyword">void <span class="hljs-title function_">update<span class="hljs-params">(String message);
}</span></span></span></span></span></span></span></code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1171560/202502/1171560-20250218231709279-537647433.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"></span></div>
<p>2、具体观察者</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="3" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20%E5%85%B7%E4%BD%93%E8%A7%82%E5%AF%9F%E8%80%85%5Cnpublic%20class%20ConcreteObserver%20implements%20Observer%20%7B%5Cn%20%20%20%20private%20String%20name%3B%5Cn%5Cn%20%20%20%20public%20ConcreteObserver(String%20name)%20%7B%5Cn%20%20%20%20%20%20%20%20this.name%20%3D%20name%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20update(String%20message)%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(name%20%2B%20%5C%22%20received%20message%3A%20%5C%22%20%2B%20message)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="language-java hljs"><span class="hljs-comment">// 具体观察者
<span class="hljs-keyword">public <span class="hljs-keyword">class <span class="hljs-title class_">ConcreteObserver <span class="hljs-keyword">implements <span class="hljs-title class_">Observer {
    <span class="hljs-keyword">private String name;

    <span class="hljs-keyword">public <span class="hljs-title function_">ConcreteObserver<span class="hljs-params">(String name) {
        <span class="hljs-built_in">this.name = name;
    }

    <span class="hljs-meta">@Override
    <span class="hljs-keyword">public <span class="hljs-keyword">void <span class="hljs-title function_">update<span class="hljs-params">(String message) {
        System.out.println(name + <span class="hljs-string">" received message: " + message);
    }
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1171560/202502/1171560-20250218231709279-537647433.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"></span></div>
<p>3、主题接口</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="2" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20%E4%B8%BB%E9%A2%98%E6%8E%A5%E5%8F%A3%5Cnpublic%20interface%20Subject%20%7B%5Cn%20%20%20%20void%20addObserver(Observer%20observer)%3B%5Cn%20%20%20%20void%20removeObserver(Observer%20observer)%3B%5Cn%20%20%20%20void%20notifyObservers(String%20message)%3B%5Cn%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="language-java hljs"><span class="hljs-comment">// 主题接口
<span class="hljs-keyword">public <span class="hljs-keyword">interface <span class="hljs-title class_">Subject {
    <span class="hljs-keyword">void <span class="hljs-title function_">addObserver<span class="hljs-params">(Observer observer);
    <span class="hljs-keyword">void <span class="hljs-title function_">removeObserver<span class="hljs-params">(Observer observer);
    <span class="hljs-keyword">void <span class="hljs-title function_">notifyObservers<span class="hljs-params">(String message);
}</span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1171560/202502/1171560-20250218231709279-537647433.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"></span></div>
<p>4、具体主题</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="1" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20%E5%85%B7%E4%BD%93%E4%B8%BB%E9%A2%98%5Cnpublic%20class%20ConcreteSubject%20implements%20Subject%20%7B%5Cn%20%20%20%20private%20List%3CObserver%3E%20observers%20%3D%20new%20ArrayList%3C%3E()%3B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20addObserver(Observer%20observer)%20%7B%5Cn%20%20%20%20%20%20%20%20observers.add(observer)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20removeObserver(Observer%20observer)%20%7B%5Cn%20%20%20%20%20%20%20%20observers.remove(observer)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20notifyObservers(String%20message)%20%7B%5Cn%20%20%20%20%20%20%20%20for%20(Observer%20observer%20%3A%20observers)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20observer.update(message)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="language-java hljs"><span class="hljs-comment">// 具体主题
<span class="hljs-keyword">public <span class="hljs-keyword">class <span class="hljs-title class_">ConcreteSubject <span class="hljs-keyword">implements <span class="hljs-title class_">Subject {
    <span class="hljs-keyword">private List&lt;Observer&gt; observers = <span class="hljs-keyword">new <span class="hljs-title class_">ArrayList&lt;&gt;();

    <span class="hljs-meta">@Override
    <span class="hljs-keyword">public <span class="hljs-keyword">void <span class="hljs-title function_">addObserver<span class="hljs-params">(Observer observer) {
        observers.add(observer);
    }

    <span class="hljs-meta">@Override
    <span class="hljs-keyword">public <span class="hljs-keyword">void <span class="hljs-title function_">removeObserver<span class="hljs-params">(Observer observer) {
        observers.remove(observer);
    }

    <span class="hljs-meta">@Override
    <span class="hljs-keyword">public <span class="hljs-keyword">void <span class="hljs-title function_">notifyObservers<span class="hljs-params">(String message) {
        <span class="hljs-keyword">for (Observer observer : observers) {
            observer.update(message);
        }
    }
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1171560/202502/1171560-20250218231709279-537647433.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"></span></div>
<p>5、客户端</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="0" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%A3%E7%A0%81%5Cnpublic%20class%20ObserverPatternDemo%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20ConcreteSubject%20subject%20%3D%20new%20ConcreteSubject()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20Observer%20observer1%20%3D%20new%20ConcreteObserver(%5C%22Observer%201%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20Observer%20observer2%20%3D%20new%20ConcreteObserver(%5C%22Observer%202%5C%22)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20subject.addObserver(observer1)%3B%5Cn%20%20%20%20%20%20%20%20subject.addObserver(observer2)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20subject.notifyObservers(%5C%22Hello%20Observers!%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="language-java hljs"><span class="hljs-comment">// 客户端代码
<span class="hljs-keyword">public <span class="hljs-keyword">class <span class="hljs-title class_">ObserverPatternDemo {
    <span class="hljs-keyword">public <span class="hljs-keyword">static <span class="hljs-keyword">void <span class="hljs-title function_">main<span class="hljs-params">(String[] args) {
        <span class="hljs-type">ConcreteSubject <span class="hljs-variable">subject <span class="hljs-operator">= <span class="hljs-keyword">new <span class="hljs-title class_">ConcreteSubject();

        <span class="hljs-type">Observer <span class="hljs-variable">observer1 <span class="hljs-operator">= <span class="hljs-keyword">new <span class="hljs-title class_">ConcreteObserver(<span class="hljs-string">"Observer 1");
        <span class="hljs-type">Observer <span class="hljs-variable">observer2 <span class="hljs-operator">= <span class="hljs-keyword">new <span class="hljs-title class_">ConcreteObserver(<span class="hljs-string">"Observer 2");

        subject.addObserver(observer1);
        subject.addObserver(observer2);

        subject.notifyObservers(<span class="hljs-string">"Hello Observers!");
    }
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1171560/202502/1171560-20250218231709279-537647433.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"></span></div>
<p>观察者模式的<strong>优缺点</strong>。</p>
<p>优点：</p>
<ul>
<li>降低耦合度：主题和观察者之间是抽象耦合的，彼此独立，易于维护和扩展。</li>
<li>动态添加和删除观察者：可以在运行时动态地添加或删除观察者，灵活性高。</li>
</ul>
<p>缺点：</p>
<ul>
<li>性能问题：如果观察者数量众多，通知过程可能耗时，影响性能。</li>
<li>可能导致循环依赖：不当的设计可能导致观察者和主题之间的循环依赖，造成内存泄漏。</li>
</ul>
<p>观察者模式是一种强大的设计模式，能够有效地解耦对象之间的关系，适用于需要在对象状态变化时通知多个依赖对象的场景。</p>
<p style="text-align: right"><span style="color: rgba(0, 204, 255, 1)">怨天者无志，怨人者心穷。-- 烟沙九洲</span></p>
<span data-cke-copybin-start="1"><span data-cke-copybin-end="1">​</span></span>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.04613436825925926" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-18 23:17">2025-02-18 23:17</span>&nbsp;
<a href="https://www.cnblogs.com/yanshajiuzhou">烟沙九洲</a>&nbsp;
阅读(<span id="post_view_count">3</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18723119" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18723119);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18723119', targetLink: 'https://www.cnblogs.com/yanshajiuzhou/p/18723119', title: '观察者模式' })">举报</a>
</div>
        