
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18736072" title="发布于 2025-02-25 13:46">
    <span role="heading" aria-level="2">manim边学边做--标准相机</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在<code>Manim</code>动画制作库中，<code>Camera</code>类是负责管理屏幕显示内容的核心类，其功能涵盖场景设置、对象渲染、坐标转换等多个关键方面。</p>
<p><code>Camera</code>类作为<code>Manim</code>中渲染流程的核心，在动画制作中主要作用包括：</p>
<ol>
<li><strong>初始化场景</strong>：设置背景、分辨率等基本参数</li>
<li><strong>渲染对象</strong>：通过捕获和渲染<code>Mobject</code>，生成每一帧的像素数组</li>
<li><strong>调整渲染细节</strong>：通过调整像素数组、背景颜色等，优化渲染效果</li>
<li><strong>生成输出</strong>：将像素数组转换为图像或视频帧</li>
</ol>
<p><code>Camera</code>类是<code>Manim</code>中实现渲染功能的基础类，它通过管理像素数组和渲染逻辑，将复杂的数学对象转换为可视化的图像或动画。</p>
<p>通过灵活配置参数和使用方法，开发者可以实现高质量的动画渲染效果。</p>
<h1 id="1-camera概要">1. Camera概要</h1>
<p><code>Camera</code>类是<code>Manim</code>中的基类，用于管理场景的渲染过程。</p>
<p>它负责将场景中的对象（如<code>Mobject</code>、<code>VMobject</code>、<code>ImageMobject</code>等）转换为像素数组，并最终生成图像或视频帧。</p>
<p><code>Camera</code>类的核心功能是控制场景的渲染细节，包括背景设置、对象的捕获、以及渲染过程中的各种调整。</p>
<h2 id="11-主要参数">1.1. 主要参数</h2>
<p><code>Camera</code>类作为<code>Manim</code>中各种相机的基类，参数很多，主要分为以下几类。</p>
<ol>
<li>背景相关参数：</li>
</ol>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>background_image</td>
<td>str</td>
<td>背景图片的路径</td>
</tr>
<tr>
<td>background</td>
<td>np.ndarray</td>
<td>背景内容</td>
</tr>
<tr>
<td>background_color</td>
<td>ParsableManimColor</td>
<td>设置背景颜色</td>
</tr>
<tr>
<td>background_opacity</td>
<td>float</td>
<td>控制背景的透明度</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>尺寸相关参数：</li>
</ol>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>pixel_height</td>
<td>int</td>
<td>场景的像素高度</td>
</tr>
<tr>
<td>pixel_width</td>
<td>int</td>
<td>场景的像素宽度</td>
</tr>
<tr>
<td>frame_height</td>
<td>float</td>
<td>场景的实际高度</td>
</tr>
<tr>
<td>frame_width</td>
<td>float</td>
<td>场景的实际宽度</td>
</tr>
</tbody>
</table>
<ol start="3">
<li>其他参数：</li>
</ol>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>frame_rate</td>
<td>float</td>
<td>设置帧率</td>
</tr>
<tr>
<td>image_mode</td>
<td>str</td>
<td>指定图像模式</td>
</tr>
<tr>
<td>n_channels</td>
<td>int</td>
<td>颜色通道数</td>
</tr>
<tr>
<td>pixel_array_dtype</td>
<td>str</td>
<td>规定像素数组的数据类型</td>
</tr>
<tr>
<td>cairo_line_width_multiple</td>
<td>float</td>
<td>Cairo 渲染时线条宽度的缩放因子</td>
</tr>
<tr>
<td>use_z_index</td>
<td>bool</td>
<td>决定是否使用 Z 轴索引，用于控制对象的渲染顺序</td>
</tr>
</tbody>
</table>
<h2 id="12-主要方法">1.2. 主要方法</h2>
<p><code>Camera</code>类的方法也不少，主要有以下几类：</p>
<ol>
<li>渲染相关：</li>
</ol>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>capture_mobject(mobject)</td>
<td>捕获单个<code>Mobject</code>并将其渲染到像素数组中</td>
</tr>
<tr>
<td>capture_mobjects(mobjects)</td>
<td>捕获多个<code>Mobject</code>并将它们渲染到像素数组中</td>
</tr>
<tr>
<td>display_image_mobject(image_mobject, pixel_array)</td>
<td>渲染<code>ImageMobject</code>，通过修改像素数组实现</td>
</tr>
<tr>
<td>display_vectorized(vmobject, ctx)</td>
<td>在<code>Cairo</code>上下文中渲染矢量化的<code>VMobject</code></td>
</tr>
<tr>
<td>display_point_cloud(pmobject, ...)</td>
<td>渲染点云对象，通过修改像素数组实现</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>背景设置：</li>
</ol>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>set_background(pixel_array)</td>
<td>设置背景为指定的像素数组</td>
</tr>
<tr>
<td>make_background_from_func(coords_to_colors_func)</td>
<td>使用函数生成背景像素数组，函数输入为<code>(x, y)</code>坐标，输出为<code>RGBA</code>值</td>
</tr>
<tr>
<td>reset()</td>
<td>将像素数组重置为背景</td>
</tr>
</tbody>
</table>
<ol start="3">
<li>帧与像素操作：</li>
</ol>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>resize_frame_shape(fixed_dimension)</td>
<td>调整帧的形状以匹配像素的宽高比，<code>fixed_dimension</code>决定固定高度还是宽度</td>
</tr>
<tr>
<td>reset_pixel_shape(new_height, new_width)</td>
<td>重新设置像素的高度和宽度</td>
</tr>
<tr>
<td>convert_pixel_array(pixel_array)</td>
<td>将浮点像素数组转换为有效的 <code>RGB</code> 值</td>
</tr>
<tr>
<td>overlay_rgba_array(pixel_array, new_array)</td>
<td>将 <code>RGBA</code> 数组叠加到现有像素数组上</td>
</tr>
</tbody>
</table>
<ol start="4">
<li>辅助功能：</li>
</ol>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>is_in_frame(mobject)</td>
<td>检查对象是否在当前帧内</td>
</tr>
<tr>
<td>points_to_pixel_coords(points)</td>
<td>将点坐标转换为像素坐标</td>
</tr>
<tr>
<td>thickened_coordinates(pixel_coords, thickness)</td>
<td>生成加粗的像素坐标</td>
</tr>
<tr>
<td>get_mobjects_to_display(mobjects)</td>
<td>获取需要渲染的对象列表</td>
</tr>
</tbody>
</table>
<h1 id="2-使用示例">2. 使用示例</h1>
<p>下面通过示例来演示相机<code>Camera</code>在动画中常用的方式。</p>
<h2 id="21-使用相机缩放场景">2.1. 使用相机缩放场景</h2>
<p>这个示例展示了如何使用 <code>Camera</code> 改变视角来缩放场景，通过改变<code>frame</code>的<code>height</code>和<code>width</code>属性，让场景进行缩放。</p>
<p><strong>注意</strong>，下面的示例中物体本身<strong>并没有缩放</strong>，是通过调整相机来使物体看起来被缩放。</p>
<p>这和之前介绍的物体的缩放动画是不一样的。</p>
<pre><code class="language-python"># 创建一个简单的圆
c = Circle(radius=0.5, color=BLUE)
t = Triangle(color=RED)
self.play(Create(c), Create(t))

# 获取当前相机的 frame
camera_frame = self.camera.frame

# 缩放相机视角
self.play(camera_frame.animate.set(height=4, width=4))
self.wait()

# 恢复相机视角
self.play(
    camera_frame.animate.set(
        height=config.frame_height,
        width=config.frame_width,
    )
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202502/83005-20250225134614931-1245930393.gif" alt="" loading="lazy"></p>
<h2 id="22-移动相机位置">2.2. 移动相机位置</h2>
<p>此示例展示了如何移动相机位置，通过改变相机的 <code>shift</code> 方法，让相机在场景中移动。</p>
<p><strong>注意</strong>，下面的示例中物体本身其实<strong>没有移动</strong>，只是通过移动相机的位置从不同的视角观察物体。</p>
<p>这和之前介绍的物体的移动动画是不一样的。</p>
<pre><code class="language-python"># 创建一个正方形
s = Square(side_length=2, color=RED)
self.play(Create(s))

# 获取当前相机的 frame
camera_frame = self.camera.frame

# 移动相机位置
self.play(
    camera_frame.animate.shift(
        RIGHT * 4 + UP * 2,
    )
)
self.wait()

# 移回相机位置
self.play(
    camera_frame.animate.shift(
        LEFT * 4 + DOWN * 4,
    )
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202502/83005-20250225134614813-578967901.gif" alt="" loading="lazy"></p>
<h2 id="23-改变相机背景颜色">2.3. 改变相机背景颜色</h2>
<p>该示例演示了如何改变相机的背景颜色，通过修改相机的 <code>background_color</code> 属性，实现背景颜色的动态变化。</p>
<pre><code class="language-python"># 创建一个三角形
triangle = Triangle(color=YELLOW)
self.play(Create(triangle))

# 改变相机背景颜色
self.camera.background_color = GREEN
self.wait(0.5)
self.camera.background_color = RED
self.wait(0.5)

# 恢复相机背景颜色
self.camera.background_color = config.background_color
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202502/83005-20250225134614841-1383784641.gif" alt="" loading="lazy"></p>
<h2 id="24-相机跟随物体移动">2.4. 相机跟随物体移动</h2>
<p>这个示例展示了相机如何跟随一个移动的物体，通过在每一帧更新相机的位置，使其与物体保持相对位置</p>
<pre><code class="language-python"># 定义曲线函数
def curve_function(t):
    return np.array([t, t**2 - 2, 0])

# 创建曲线
curve = ParametricFunction(
    curve_function,
    t_range=[-2, 2],
    color=BLUE,
)
self.add(curve)

# 创建一个点
dot = Dot(color=RED)
dot.move_to(curve_function(-2))
self.add(dot)

# 获取相机的 frame
camera_frame = self.camera.frame

def update_camera(camera_frame):
    # 让相机跟随点移动
    camera_frame.move_to(dot.get_center())

# 添加相机更新函数
self.play(
    camera_frame.animate.scale(0.5).move_to(
        dot.get_center(),
    ),
)
camera_frame.add_updater(update_camera)

# 定义点在曲线上运动的动画
def move_dot_along_curve(mobject, alpha):
    t = -2 + alpha * 4
    mobject.move_to(curve_function(t))

# 播放点在曲线上运动的动画
self.play(
    UpdateFromAlphaFunc(
        dot,
        move_dot_along_curve,
    ),
    run_time=3,
)

# 移除相机更新函数
camera_frame.remove_updater(update_camera)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202502/83005-20250225134614930-1216312011.gif" alt="" loading="lazy"></p>
<h1 id="3-附件">3. 附件</h1>
<p>文中的代码只是关键部分的截取，完整的代码共享在网盘中（<code>camera.py</code>），</p>
<p>下载地址: <a href="https://url11.ctfile.com/d/45455611-65211223-3de3e2?p=6872" target="_blank" rel="noopener nofollow">完整代码</a> (访问密码: 6872)</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5233083434074074" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-25 13:47">2025-02-25 13:46</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">88</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18736072" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18736072);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18736072', targetLink: 'https://www.cnblogs.com/wang_yb/p/18736072', title: 'manim边学边做--标准相机' })">举报</a>
</div>
        