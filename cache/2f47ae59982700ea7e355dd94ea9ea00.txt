
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mingupupu/p/18838910" title="发布于 2025-04-21 17:01">
    <span role="heading" aria-level="2">在Avalonia/C#中使用依赖注入过程记录</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>使用依赖注入可以让我们的程序变得更加好维护与测试。</p>
<p>今天分享的是在Avalonia/C#中使用依赖注入。</p>
<p>我准备了一个简单的不使用依赖注入与使用依赖注入的demo。</p>
<p>该demo已上传至GitHub，地址：<a href="https://github.com/Ming-jiayou/Avalonia_With_Dependency_Injection_Example" target="_blank" rel="noopener nofollow">https://github.com/Ming-jiayou/Avalonia_With_Dependency_Injection_Example</a></p>
<p>因此本文中不会包含全部代码，有需要可以从GitHub获取全部代码。</p>
<h2 id="实践">实践</h2>
<p>先运行一下AvaloniaWithoutDependencyInjection这个例子。</p>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202504/3288240-20250421170113609-349666110.gif" alt="" loading="lazy"></p>
<p>虽然我们实现了导航的功能，但是当重新点击的时候又会创建一个新的实例，并不会保留之前的状态，很多时候这不是我们想要的效果。</p>
<p>现在再来运行一下AvaloniaWithDependencyInjection这个例子。</p>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202504/3288240-20250421170113550-1571340097.gif" alt="" loading="lazy"></p>
<p>由于我们以单例的形式将View与ViewModel注入了依赖注入容器中了，因此你可以看到现在再重新点击是会保留之前的状态了。</p>
<p>现在让我们一起看看如何将上面的那个例子改造成下面的那个例子吧！！</p>
<p>要实现依赖注入首先需要有一个依赖注入容器，我这里使用的是Microsoft.Extensions.DependencyInjection。</p>
<p>为了方便实现导航，我们创建一个INavigationService接口与NavigationService类。</p>
<p>INavigationService：</p>
<pre><code class="language-csharp">public interface INavigationService
{
    ViewModelBase CurrentViewModel { get; }
    void NavigateTo&lt;T&gt;() where T : ViewModelBase;
} 
</code></pre>
<p>NavigationService：</p>
<pre><code class="language-csharp">public partial class NavigationService : ObservableObject, INavigationService
{
    [ObservableProperty]
    private ViewModelBase _currentViewModel;

    private readonly IServiceProvider _serviceProvider;

    public NavigationService(IServiceProvider serviceProvider)
    {
        _serviceProvider = serviceProvider;

        // 设置初始页面
        NavigateTo&lt;Page1ViewModel&gt;();
    }

    public void NavigateTo&lt;T&gt;() where T : ViewModelBase
    {
        var viewModel = _serviceProvider.GetRequiredService&lt;T&gt;();
        CurrentViewModel = viewModel;
    }
} 
</code></pre>
<p>为了方便添加服务，创建一个ServiceCollectionExtensions类。</p>
<pre><code class="language-csharp">public static class ServiceCollectionExtensions
{
    public static IServiceCollection AddViews(this IServiceCollection services)
    {
        // Register all views as singletons
        services.AddSingleton&lt;MainWindow&gt;();
        services.AddSingleton&lt;Page1View&gt;();
        services.AddSingleton&lt;Page2View&gt;();
        
        return services;
    }
    
    public static IServiceCollection AddViewModels(this IServiceCollection services)
    {
        // Register all view models as singletons
        services.AddSingleton&lt;MainWindowViewModel&gt;();
        services.AddSingleton&lt;Page1ViewModel&gt;();
        services.AddSingleton&lt;Page2ViewModel&gt;();
        
        return services;
    }

    public static IServiceCollection AddServices(this IServiceCollection services)
    {
        services.AddSingleton&lt;INavigationService, NavigationService&gt;();
        return services;
    }
} 
</code></pre>
<p>在Program中注册服务：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202504/3288240-20250421170113588-449634368.png" alt="image-20250421161136598" loading="lazy"></p>
<p>在App.axaml.cs中从容器中取出MainWindow与MainWindowViewModel：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202504/3288240-20250421170113609-631284919.png" alt="image-20250421161251620" loading="lazy"></p>
<p>在ViewLocator中从容器中取出View的实例：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202504/3288240-20250421170113538-1724707259.png" alt="image-20250421161440244" loading="lazy"></p>
<p>MainWindowViewModel：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202504/3288240-20250421170113517-578211680.png" alt="image-20250421161628346" loading="lazy"></p>
<p>经过以上步骤就成功在Avalonia中实现依赖注入了，现在来看看流程是怎么样的。</p>
<h2 id="流程">流程</h2>
<p>程序启动在Program中注册了服务。</p>
<p>App.axaml.cs中取出了MainWindow与MainWindowViewModel。</p>
<p>在MainWindowViewModel中注入了INavigationService。</p>
<p>但是在这里你可能会有疑问：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202504/3288240-20250421170113506-1975378511.png" alt="image-20250421161943776" loading="lazy"></p>
<p>为什么这里可以直接使用<code>serviceProvider</code>呢？</p>
<p>看起来我们直接使用了<code> serviceProvider</code>，但实际上这里涉及到了依赖注入容器的生命周期和服务解析顺序。</p>
<p>当我们调用 <code>services.BuildServiceProvider()</code> 时，依赖注入容器会：</p>
<ul>
<li>
<p>创建一个服务提供者（<code>ServiceProvider</code>）实例</p>
</li>
<li>
<p>这个 <code>ServiceProvider </code>包含了所有注册的服务的信息和创建规则</p>
</li>
</ul>
<p>当需要 <code>NavigationService </code>时，依赖注入容器会：</p>
<ul>
<li>发现需要创建 <code>NavigationService</code></li>
<li>看到 <code>NavigationService </code>的构造函数需要一个 <code>IServiceProvider</code></li>
<li>将自己（<code>serviceProvider</code>）作为参数传入</li>
<li>创建 <code>NavigationService</code> 实例</li>
</ul>
<p>在某处第一次请求<code>INavigationService</code>时发生的：</p>
<pre><code class="language-csharp">var navigationService = serviceProvider.GetService&lt;INavigationService&gt;();
</code></pre>
<p>此时：</p>
<ul>
<li>
<p><code>serviceProvider </code>已经是完全初始化好的实例</p>
</li>
<li>
<p>所有的 <code>ViewModel </code>都已经注册完成</p>
</li>
<li>
<p>当调用<code> NavigateTo&lt;Page1ViewModel&gt;</code>() 时，可以成功从容器中解析出 <code>Page1ViewModel</code></p>
</li>
</ul>
<p>然后初始导航到<code>Page1ViewModel</code>。</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202504/3288240-20250421170113537-526665099.png" alt="image-20250421162952745" loading="lazy"></p>
<p>从容器中取出Page1ViewModel并赋值给CurrentViewModel。</p>
<p>当CurrentViewModel改变的时候，会触发MainWindowViewModel订阅的这个属性变更事件：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202504/3288240-20250421170113552-608990625.png" alt="image-20250421163436887" loading="lazy"></p>
<p>如果是CurrentViewModel属性发生变化，就将MainWindowViewModel中的CurrentPage属性赋值为CurrentViewModel。</p>
<p>CurrentPage类型为ViewModelBase，它的变化会触发ViewLocator中的Build方法：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202504/3288240-20250421170113548-147523995.png" alt="image-20250421163718003" loading="lazy"></p>
<p>该方法会根据CurrentPage的类型从容器中取出对应的View，从而实现了导航的功能，并且能够保留之前的状态。</p>
<h2 id="最后">最后</h2>
<p>以上就是在Avalonia/C#中使用依赖注入的过程，希望对你有所帮助。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.3887581081875" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-21 17:01">2025-04-21 17:01</span>&nbsp;
<a href="https://www.cnblogs.com/mingupupu">mingupupup</a>&nbsp;
阅读(<span id="post_view_count">114</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18838910);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18838910', targetLink: 'https://www.cnblogs.com/mingupupu/p/18838910', title: '在Avalonia/C#中使用依赖注入过程记录' })">举报</a>
</div>
        