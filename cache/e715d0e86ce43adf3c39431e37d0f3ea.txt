
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xiao987334176/p/18829295" title="发布于 2025-04-17 00:07">
    <span role="heading" aria-level="2">MCP数据脱敏应用开发</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>一、概述</h1>
<p>数据脱敏(Data Masking),又称数据漂白、数据去隐私化或数据变形。&nbsp;</p>
<h2>定义</h2>
<p>指对某些敏感信息通过脱敏规则进行数据的变形，实现敏感隐私数据的可靠保护。在涉及客户安全数据或者一些商业性敏感数据的情况下，在不违反系统规则条件下，对真实数据进行改造并提供测试使用，如身份证号、手机号、卡号、客户号等个人信息都需要进行数据脱敏。</p>
<h2>脱敏规则</h2>
<p>可以包括但不限于：</p>
<p>替换：例如将身份证号的部分数字替换为“*”或随机数。</p>
<p>随机化：例如生成与真实数据格式相符但与原始数据无关的新数据。</p>
<p>固定模式脱敏：例如保留电话号码的区号和最后几位，其余部分替换。</p>
<p>加密：对数据进行不可逆或可逆加密，仅在必要时解密。</p>
<p>假名化：用虚构的名字替换真实姓名。<br><br></p>
<h1>二、数据脱敏开发</h1>
<p>这里直接使用python代码开发，使用fastmcp框架。</p>
<p>server.py</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> fastmcp <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> FastMCP
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> re

mcp </span>= FastMCP(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">desensitize</span><span style="color: rgba(128, 0, 0, 1)">"</span>, port=9000<span style="color: rgba(0, 0, 0, 1)">)


</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> DataMasker:
    </span><span style="color: rgba(0, 0, 255, 1)">def</span> <span style="color: rgba(128, 0, 128, 1)">__init__</span><span style="color: rgba(0, 0, 0, 1)">(self):
        </span><span style="color: rgba(0, 0, 255, 1)">pass</span>

    <span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> mask_phone_number(self, phone_number):
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
        对手机号码进行脱敏处理，将中间四位替换为 *
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> len(phone_number) == 11<span style="color: rgba(0, 0, 0, 1)">:
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> phone_number[:3] + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">****</span><span style="color: rgba(128, 0, 0, 1)">"</span> + phone_number[7<span style="color: rgba(0, 0, 0, 1)">:]
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> phone_number

    </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> mask_email(self, email):
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
        对邮箱地址进行脱敏处理，只显示邮箱名前两位和域名
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">@</span><span style="color: rgba(128, 0, 0, 1)">"</span> <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> email:
            username, domain </span>= email.split(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">@</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> username[:2] + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">****@</span><span style="color: rgba(128, 0, 0, 1)">"</span> +<span style="color: rgba(0, 0, 0, 1)"> domain
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> email

    </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> mask_id_card(self, id_card):
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
        对身份证号码进行脱敏处理，只显示前四位和后四位
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> len(id_card) == 18<span style="color: rgba(0, 0, 0, 1)">:
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> id_card[:4] + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">**********</span><span style="color: rgba(128, 0, 0, 1)">"</span> + id_card[14<span style="color: rgba(0, 0, 0, 1)">:]
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> id_card

    </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> mask_address(self, address):
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
        对地址进行脱敏处理，模糊化门牌号和房间号
        例如，将 "1栋" 替换为 "**栋"，"101室" 替换为 "***室"
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span>
        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 使用正则表达式</span>
        desensitized_address = re.sub(r<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">(\d+)栋</span><span style="color: rgba(128, 0, 0, 1)">"</span>, r<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">**栋</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, address)
        desensitized_address </span>= re.sub(r<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">(\d+)室</span><span style="color: rgba(128, 0, 0, 1)">"</span>, r<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">***室</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, desensitized_address)
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> desensitized_address


@mcp.tool()
</span><span style="color: rgba(0, 0, 255, 1)">def</span> desensitize_text(text: str) -&gt;<span style="color: rgba(0, 0, 0, 1)"> str:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
    脱敏文本信息
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    masker </span>=<span style="color: rgba(0, 0, 0, 1)"> DataMasker()
    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 匹配手机号</span>
    phone_pattern = r<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\d{11}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    phones </span>=<span style="color: rgba(0, 0, 0, 1)"> re.findall(phone_pattern, text)
    </span><span style="color: rgba(0, 0, 255, 1)">for</span> phone <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> phones:
        masked_phone </span>=<span style="color: rgba(0, 0, 0, 1)"> masker.mask_phone_number(phone)
        text </span>=<span style="color: rgba(0, 0, 0, 1)"> text.replace(phone, masked_phone)

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 匹配邮箱</span>
    email_pattern = r<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    emails </span>=<span style="color: rgba(0, 0, 0, 1)"> re.findall(email_pattern, text)
    </span><span style="color: rgba(0, 0, 255, 1)">for</span> email <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> emails:
        masked_email </span>=<span style="color: rgba(0, 0, 0, 1)"> masker.mask_email(email)
        text </span>=<span style="color: rgba(0, 0, 0, 1)"> text.replace(email, masked_email)

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 匹配身份证号</span>
    id_card_pattern = r<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\d{18}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    id_cards </span>=<span style="color: rgba(0, 0, 0, 1)"> re.findall(id_card_pattern, text)
    </span><span style="color: rgba(0, 0, 255, 1)">for</span> id_card <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> id_cards:
        masked_id_card </span>=<span style="color: rgba(0, 0, 0, 1)"> masker.mask_id_card(id_card)
        text </span>=<span style="color: rgba(0, 0, 0, 1)"> text.replace(id_card, masked_id_card)

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 匹配地址</span>
    address_pattern = r<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">([\u4e00-\u9fa5]+省)?([\u4e00-\u9fa5]+市)?([\u4e00-\u9fa5]+区)?([\u4e00-\u9fa5]+街道)?(\d+[\u4e00-\u9fa5]+)?(\d+[\u4e00-\u9fa5]+)?</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    addresss </span>=<span style="color: rgba(0, 0, 0, 1)"> re.findall(address_pattern, text)

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 如果没有找到地址，返回原始文本</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(0, 0, 255, 1)">not</span><span style="color: rgba(0, 0, 0, 1)"> addresss:
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> text

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 对每个匹配的地址进行脱敏处理</span>
    <span style="color: rgba(0, 0, 255, 1)">for</span> address_parts <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> addresss:
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 将匹配的地址部分组合成完整的地址</span>
        address = <span style="color: rgba(128, 0, 0, 1)">""</span>.join([part <span style="color: rgba(0, 0, 255, 1)">for</span> part <span style="color: rgba(0, 0, 255, 1)">in</span> address_parts <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> part])
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> address:
            </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> print("address",address)</span>
            masked_address =<span style="color: rgba(0, 0, 0, 1)"> masker.mask_address(address)
            text </span>=<span style="color: rgba(0, 0, 0, 1)"> text.replace(address, masked_address)

    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> text


</span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(128, 0, 128, 1)">__name__</span> == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">__main__</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
    mcp.run(transport</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">sse</span><span style="color: rgba(128, 0, 0, 1)">"</span>)</pre>
</div>
<p>&nbsp;</p>
<p>运行代码</p>
<div class="cnblogs_code">
<pre>python3 server.py</pre>
</div>
<p>&nbsp;</p>
<h1>三、数据脱敏测试</h1>
<p>&nbsp;打开Cherry Studio客户端，添加MCP服务器</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202504/1341090-20250416183101892-1035525165.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>添加智能体</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202504/1341090-20250416183317187-1764494529.png" alt="" loading="lazy"></p>
<p>&nbsp;将智能体添加到助手</p>
<p>开启MCP</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202504/1341090-20250416183437164-128331396.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>聊天窗口，输入用户信息：</p>
<p>我的手机号是13812345678，我的邮箱是test@example.com，我的身份证号是123456789012345678，我的地址是北京市海淀区中关村大街1栋101室</p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202504/1341090-20250416183457404-680529655.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>可以看到返回的json，已经做了脱敏处理。</p>
<p>&nbsp;</p>
<p>但是客户端返回的信息，有点不全。这是因为AI模型做了处理。因为AI模型认为这些敏感信息返回不安全，做了2次加工。</p>
<p>不过不影响，最终结果还是做了数据脱敏处理即可。</p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.017836783568287037" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-17 00:08">2025-04-17 00:07</span>&nbsp;
<a href="https://www.cnblogs.com/xiao987334176">肖祥</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18829295);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18829295', targetLink: 'https://www.cnblogs.com/xiao987334176/p/18829295', title: 'MCP数据脱敏应用开发' })">举报</a>
</div>
        