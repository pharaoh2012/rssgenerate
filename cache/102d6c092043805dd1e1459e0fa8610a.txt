
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18800300" title="发布于 2025-03-30 09:25">
    <span role="heading" aria-level="2">『Plotly实战指南』--饼图绘制基础篇</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在数据可视化的世界里，<strong>饼图</strong>是一种直观且广泛使用的图表类型。</p>
<p>它能够将数据各个部分占整体的比例关系清晰地展现出来，适用于诸如市场占有率分析、调查结果分布、预算分配等多个领域。</p>
<p><strong>饼图</strong>以扇形面积比例直观展示数据分布，适合用于：</p>
<ol>
<li>分类数据的占比分析（如市场份额、用户画像）</li>
<li>少量数据的对比呈现（≤6 个分类最佳）</li>
<li>快速传达核心结论（如 "最大 / 最小占比项"）</li>
</ol>
<p>本文的主要内容包括饼图的基本绘制步骤、标签与百分比显示设置以及样式基础优化等方面。</p>
<h1 id="1-基本饼图绘制">1. 基本饼图绘制</h1>
<h2 id="11-数据准备">1.1. 数据准备</h2>
<p>使用 <code>Plotly</code> 绘制饼图时，数据主要通过两个参数进行传递：<code>labels</code> 和 <code>values</code>。</p>
<ul>
<li><code>labels</code>： 用于指定每个数据切片的<strong>名称</strong>或<strong>类别</strong>，它接受一个字符串列表</li>
<li><code>values</code>：对应各个类别的<strong>数值</strong>大小，接受一个数值列表或数组</li>
</ul>
<p>这种数据格式要求使得数据组织清晰明了，便于后续的图表生成。</p>
<p>比如：</p>
<pre><code class="language-python">import plotly.graph_objects as go

# 数据准备
labels = ['类别A', '类别B', '类别C', '类别D']  # 类别标签
values = [45, 25, 15, 15]  # 对应数值
</code></pre>
<p>我们首先导入了 <code>Plotly</code> 的 <code>graph_objects</code> 模块，然后分别定义了类别标签和对应的数值列表，为后续的饼图绘制提供了数据基础。</p>
<p>然后绘制饼图：</p>
<pre><code class="language-python"># 创建饼图对象
fig = go.Figure(data=[go.Pie(labels=labels, values=values)])
fig.show()
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250330092438453-461450483.png" alt="" loading="lazy"></p>
<p>通过 <code>go.Pie()</code> 函数，将准备好的数据传递进去，创建了一个基本的饼图对象。</p>
<p>这个对象包含了<strong>饼图</strong>的核心数据结构，后续可以通过对 <code>fig</code> 对象的进一步配置来定制图表的显示效果。</p>
<h2 id="12-标签设置">1.2. 标签设置</h2>
<p>通过 <code>text</code> 参数，可以指定在饼图切片上显示的文本内容。</p>
<p>下面的示例中，我们将 <code>text</code> 设置为与 <code>labels</code> 相同的值，这样每个切片上就会显示对应的类别名称，方便快速识别各个切片所代表的类别。</p>
<pre><code class="language-python"># 文本标签配置
fig = go.Figure(data=[go.Pie(labels=labels, values=values, text=labels)])
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250330092438457-1812091263.png" alt="" loading="lazy"></p>
<p>还可以通过<code>textposition='outside'</code>参数将文本标签的位置设置在切片外部，避免文本在切片内部显示可能造成的拥挤和可读性问题。</p>
<pre><code class="language-python"># 文本位置调整
fig = go.Figure(data=[go.Pie(labels=labels, values=values, textposition='outside')])
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250330092438459-587929453.png" alt="" loading="lazy"></p>
<h1 id="2-饼图样式优化">2. 饼图样式优化</h1>
<h2 id="21-切片颜色">2.1. 切片颜色</h2>
<p>通过 <code>marker=dict(colors=...)</code> 的方式，我们可以直接为每个切片指定颜色，替换 <code>Plotly</code> 的默认颜色方案。</p>
<p>合理选择颜色可以使图表更加美观，并且能够突出重点数据。</p>
<pre><code class="language-python"># 默认颜色方案调整
fig = go.Figure(
    data=[
        go.Pie(
            labels=labels,
            values=values,
            marker=dict(
                colors=[
                    "gold",
                    "mediumturquoise",
                    "darkorange",
                    "lightgreen",
                ]
            ),
        )
    ],
)
fig.show()
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250330092438451-920327252.png" alt="" loading="lazy"></p>
<p>除了通过颜色来突出某些切片以外，还可以使用 <code>pull</code> 参数可以将指定的切片从饼图中心拉出，实现高亮显示的效果。</p>
<p>这种显示方式常用于强调重点数据或异常值。</p>
<pre><code class="language-python"># 特定切片高亮
fig = go.Figure(data=[go.Pie(labels=labels, values=values, pull=[0, 0.2, 0, 0])])
fig.show()
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250330092438460-119016864.png" alt="" loading="lazy"></p>
<h2 id="22-边框和背景">2.2. 边框和背景</h2>
<p>通过 <code>marker=dict(...)</code> 的方式，不仅可以指定切片的颜色，也可以指定边框的颜色和宽度。</p>
<pre><code class="language-python"># 切片边框调整
fig = go.Figure(
    data=[
        go.Pie(
            labels=labels,
            values=values,
            marker=dict(line=dict(color="white", width=5)),
        )
    ],
)
fig.show()
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250330092438459-1912917735.png" alt="" loading="lazy"></p>
<p>通过 <code>marker=dict(line=dict(...))</code> 设置，使切片之间更加分明，提升图表的整洁度和美观度。</p>
<p><code>paper_bgcolor</code> 参数用于设置整个图表的背景颜色，选择合适的背景色可以使图表在不同的展示环境中具有更好的视觉效果和可读性。</p>
<pre><code class="language-python"># 图表背景色配置
fig.update_layout(paper_bgcolor='lightgray')
fig.show()
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250330092438700-223597364.png" alt="" loading="lazy"></p>
<p>还有<code>plot_bgcolor</code> 参数专门用于设置绘图区域的背景颜色，将其与图表背景色区分开来，增强图表的层次感和专业性。</p>
<pre><code class="language-python"># 绘图区域背景设置
fig.update_layout(plot_bgcolor='')
</code></pre>
<p>还有 <code>opacity</code> 参数，可以调整切片的透明度，使其在与其他图表元素叠加或在不同背景色下展示时更加协调和美观。</p>
<pre><code class="language-python"># 透明度调节
fig = go.Figure(data=[go.Pie(labels=labels, values=values, opacity=0.8)])
</code></pre>
<h1 id="3-总结">3. 总结</h1>
<p>本文介绍了使用 <code>Plotly</code> 绘制基础饼图的方法和步骤，包括数据准备、基本绘制、标签设置以及样式基础优化等方面。</p>
<p>重点介绍了如何通过 <code>labels</code> 和 <code>values</code> 参数传递数据，</p>
<p>利用 <code>textinfo</code>、<code>textposition</code> 等参数控制文本显示，以及通过颜色调整、边框设置、背景配置和透明度调节等手段优化饼图的样式，使图表更加美观和专业。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.07117906933101852" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-30 09:26">2025-03-30 09:25</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">6</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18800300" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18800300);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18800300', targetLink: 'https://www.cnblogs.com/wang_yb/p/18800300', title: '『Plotly实战指南』--饼图绘制基础篇' })">举报</a>
</div>
        