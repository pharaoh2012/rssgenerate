
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/shanyou/p/18717918" title="发布于 2025-02-16 12:07">
    <span role="heading" aria-level="2">Drasi Sources SDK</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>什么是Drasi数据源（Source）？</h1><p>Source提供了与系统的连接，Drasi 可以将这些系统视为变化源。source 在 Drasi 中执行三个重要功能：</p><ul><li>处理源系统生成的更改日志/源，并将这些更改推送到使用该源作为输入的每个<a href="https://drasi.io/concepts/continuous-queries" rel="noopener nofollow">连续查询</a>。
</li><li>将源更改数据转换为一致的属性图数据模型，以便订阅的 Continuous Queries 可以使用该数据，就像使用 Nodes 和 Relations 的图形一样。对于图形源（如 Gremlin），无需转换。但对于非图形源，例如 PostgreSQL 和 Kubernetes，Source 会转换数据（更多详细信息在各个 Sources 部分中提供）。
</li><li>为 Continuous Queries 提供一种方法，以便在启动时查询源系统以初始化 Continuous Query 结果的状态。</li></ul><img alt="端到端" src="https://drasi.io/concepts/sources/simple-end-to-end.png"><p>Drasi Sources SDK 是一个用于实现 Drasi 数据源的多语言开发工具包，目前支持 Java、.NET、Rust 等编程语言。这个 SDK 的主要目的是帮助开发者创建和管理 Drasi 平台的数据源。扩展Drasi Sources的文档参见 <a title="https://github.com/drasi-project/docs/blob/main/docs/content/how-to-guides/extend-drasi/implement-a-source.md" href="https://github.com/drasi-project/docs/blob/main/docs/content/how-to-guides/extend-drasi/implement-a-source.md" rel="noopener nofollow">https://github.com/drasi-project/docs/blob/main/docs/content/how-to-guides/extend-drasi/implement-a-source.md</a></p><p>每个数据源由两个核心部分组成：</p><ol><li><p>两个主要组件：</p><p>a) <strong>Source Reactivator</strong>（数据源响应器）：负责监控和处理数据变化</p><ul><li>监听源数据存储的变更流 </li><li>将数据转换为图结构 </li><li>将变更推送到持续查询系统 </li><li>支持状态存储，用于保存游标等信息</li></ul><p>b) <strong>Source Proxy</strong>（数据源代理）：负责初始数据的获取和加载 ：</p><ul><li>处理新的持续查询的初始化 </li><li>通过查询数据存储获取初始状态 </li><li>将数据转换为图结构</li></ul></li><li><p>支持的数据操作：</p><ul><li>节点（Node）的创建和管理 </li><li>关系（Relation）的创建和管理 </li><li>属性（Properties）的管理 </li><li>变更事件的处理 </li><li>控制事件的处理</li></ul></li><li> 特点和优势</li></ol><ul>
<li>多语言支持：提供 Java、.NET、Rust 等多种语言的实现 
</li><li>异步处理：支持异步流式处理数据变更 
</li><li>状态管理：提供状态存储功能，支持游标管理 
</li><li>配置灵活：支持自定义配置属性 
</li><li>容器化部署：支持容器化部署和管理 
</li><li>事件驱动：基于事件驱动架构处理数据变更</li></ul><p>SDK 的设计理念是提供一个统一的接口来实现各种数据源的接入，同时保持足够的灵活性以适应不同的使用场景。无论是简单的数据源还是复杂的数据处理系统，都可以通过这个 SDK 来实现与 Drasi 平台的集成。</p><h1>实现自定义数据源的步骤</h1><h2>第一步：实现Source Proxy（数据源代理）</h2><p>Source Proxy主要负责在查询部署时获取初始数据。它需要提供一个HTTP服务器，并实现<code>/acquire</code>接口来处理初始数据的加载。</p><p>using System.Runtime.CompilerServices;<br>
using System.Text.Json.Nodes;<br>
using Drasi.Source.SDK;<br>
using Drasi.Source.SDK.Models;<br>
using Microsoft.Extensions.Configuration;</p>
<p>var proxy = new SourceProxyBuilder()<br>&nbsp;&nbsp;&nbsp;&nbsp; .UseBootstrapHandler&lt;BootstrapHandler&gt;()<br>&nbsp;&nbsp;&nbsp;&nbsp; .Build();</p>
<p>await proxy.StartAsync();</p>
<p><br>
class BootstrapHandler : IBootstrapHandler<br>
{<br>&nbsp;&nbsp;&nbsp;&nbsp; public BootstrapHandler(IConfiguration configuration)<br>&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine($"Connection string: {configuration["connectionString"]}");<br>&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp; public async IAsyncEnumerable&lt;SourceElement&gt; Bootstrap(BootstrapRequest request, [EnumeratorCancellation]CancellationToken cancellationToken = default)<br>&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (request.NodeLabels.Contains("Person"))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yield return new SourceElement("person-1", ["Person"], new JsonObject<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { "name", "Alice" },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { "age", 30 }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yield return new SourceElement("person-2", ["Person"], new JsonObject<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { "name", "Bob" },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { "age", 40 }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (request.RelationLabels.Contains("Knows")) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yield return new SourceElement("1-2", ["Knows"], new JsonObject<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { "since", 2010 }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }, "person-1", "person-2");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp; }<br>
}</p><p><br></p><h1>数据模型</h1><ol><li><p><strong>SourceElement 类</strong></p></li><ul><li>支持节点和关系数据
</li><li>JSON 属性支持
</li><li>标签系统</li></ul></ol><h2>第二步：实现Source Reactivator（数据源响应器）</h2><p>Source Reactivator负责监控数据变化并通过Dapr的pub/sub（发布/订阅）功能将变化事件发送给其他组件。</p><h3>数据变化事件格式</h3><p>所有的数据变化事件都需要包含三个必须字段：</p><ul><li><code>op</code>：操作类型
</li><li><code>payload</code>：数据负载
</li><li><code>ts_ms</code>：时间戳（毫秒）</li></ul><h3><font size="2">1. 新增数据事件格式</font></h3><pre><code>{
    "op": "i",  // i 表示 insert（插入）
    "payload": {
        "after": {
            "id": "001",
            "labels": ["用户", "VIP"],
            "properties": {
                "name": "张三",
                "age": 30
            }
        },
        "before": {},  // 新增时before为空
        "source": {
            "table": "node",  // node表示节点，relation表示关系
            "ts_ms": "1676908799000"
        }
    },
    "ts_ms": 1676908799000
}
</code></pre><h3><font size="2">2. 更新数据事件格式</font></h3><pre><code>{
    "op": "u",  // u 表示 update（更新）
    "payload": {
        "after": {
            "id": "001",
            "labels": ["用户", "VIP"],
            "properties": {
                "name": "张三",
                "age": 31
            }
        },
        "before": {
            "id": "001",
            "labels": ["用户", "VIP"],
            "properties": {
                "name": "张三",
                "age": 30
            }
        },
        "source": {
            "table": "node",
            "ts_ms": "1676908799000"
        }
    },
    "ts_ms": 1676908799000
}
</code></pre><h3><font size="2">3. 删除数据事件格式</font></h3><pre><code>{
    "op": "d",  // d 表示 delete（删除）
    "payload": {
        "after": {},  // 删除时after为空
        "before": {
            "id": "001",
            "labels": ["用户", "VIP"],
            "properties": {
                "name": "张三",
                "age": 31
            }
        },
        "source": {
            "table": "node",
            "ts_ms": "1676908799000"
        }
    },
    "ts_ms": 1676908799000
}</code><code><br></code></pre><h1>注册你的数据源</h1><h2>创建SourceProvider配置</h2><p>要注册新的数据源类型，你需要创建一个SourceProvider配置文件。这个配置描述了数据源的组件和配置选项。</p><p>apiVersion: v1<br>
kind: SourceProvider<br>
name: MySource<br>
spec:<br>&nbsp;&nbsp; services:<br>&nbsp;&nbsp;&nbsp;&nbsp; proxy:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image: my-proxy<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; externalImage: true<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dapr:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; app-port: "80"<br>&nbsp;&nbsp;&nbsp;&nbsp; reactivator: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image: my-reactivator<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; externalImage: true<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; deprovisionHandler: true<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dapr:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; app-port: "80"<br>&nbsp;&nbsp; config_schema:<br>&nbsp;&nbsp;&nbsp;&nbsp; type: object<br>&nbsp;&nbsp;&nbsp;&nbsp; properties:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connectionString:&nbsp; # sample config property<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type: string</p><h4>使用数据源</h4><p>创建Source配置文件来使用已注册的数据源：</p><p>apiVersion: v1<br>
kind: Source<br>
name: test-source<br>
spec:<br>&nbsp;&nbsp; kind: MySource<br>&nbsp;&nbsp; properties:<br>&nbsp;&nbsp;&nbsp;&nbsp; connectionString: "my-connection-string"</p><h4>部署和管理命令</h4><pre><code># 注册数据源提供者
drasi apply -f source-provider.yaml

# 查看所有可用的数据源类型
drasi list sourceprovider

# 部署具体的数据源实例
drasi apply -f source.yaml
</code></pre><h3>调试和验证</h3><ol><li><p><strong>配置文件验证</strong>：</p><ul><li>使用Drasi CLI：<code>drasi apply --dry-run -f your-source.yaml</code></li><li>使用VSCode插件：安装Drasi VSCode扩展，可以自动验证配置文件</li></ul></li><li><p><strong>常见问题排查</strong>：</p><ul><li>确保Docker镜像已正确推送到镜像仓库
</li><li>检查服务端口配置是否正确
</li><li>验证数据库连接信息
</li><li>查看容器日志排查问题</li></ul></li><li><p><strong>最佳实践</strong>：</p><ul><li>在开发环境中充分测试
</li><li>使用环境变量管理敏感信息
</li><li>实现健康检查接口
</li><li>添加详细的日志记录</li></ul></li></ol><h3>常见问题</h3><ol><li><p>Q: 如何确保数据源的安全性？ A: 使用环境变量存储敏感信息，启用SSL连接，实施适当的访问控制。</p></li><li><p>Q: 数据源支持哪些类型的数据变化监控？ A: 支持新增(insert)、更新(update)和删除(delete)三种基本操作的监控。</p></li><li><p>Q: 如何处理大量数据的初始加载？ A: 考虑使用分页加载，实现断点续传，或者使用批量处理机制。</p></li></ol>
</div>
<div id="MySignature" role="contentinfo">
    <p>欢迎大家扫描下面二维码成为我的客户，扶你上云</p>
<img src="https://images.cnblogs.com/cnblogs_com/shanyou/57459/o_220125090408_%E9%82%80%E8%AF%B7%E4%BA%8C%E7%BB%B4%E7%A0%81-258px.jpeg" width="170">
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.006174329042824074" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-16 12:08">2025-02-16 12:07</span>&nbsp;
<a href="https://www.cnblogs.com/shanyou">张善友</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18717918" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18717918);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18717918', targetLink: 'https://www.cnblogs.com/shanyou/p/18717918', title: 'Drasi Sources SDK' })">举报</a>
</div>
        