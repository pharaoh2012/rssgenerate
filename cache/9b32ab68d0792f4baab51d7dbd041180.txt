
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/greyzeng/p/18781401" title="发布于 2025-03-19 17:25">
    <span role="heading" aria-level="2">Java SE 24 新增特性</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="java-se-24-新增特性">Java SE 24 新增特性</h1>
<p>作者：<a href="https://www.cnblogs.com/greyzeng/" target="_blank">Grey</a></p>
<p>原文地址：</p>
<p><a href="https://www.cnblogs.com/greyzeng/p/18781401" target="_blank">博客园：Java SE 24 新增特性</a></p>
<p><a href="https://blog.csdn.net/hotonyhui/article/details/146375973" target="_blank" rel="noopener nofollow">CSDN：Java SE 24 新增特性</a></p>
<h2 id="源码">源码</h2>
<p>源仓库: <a href="https://github.com/GreyZeng/java_new_features.git" target="_blank" rel="noopener nofollow">Github：java_new_features</a></p>
<h2 id="patternsinstanceof-和-switch-可以匹配更多类型第二次预览"><strong>Patterns、instanceof 和 switch 可以匹配更多类型（第二次预览）</strong></h2>
<p>通过允许在所有模式上下文中使用原始类型来增强模式匹配，Java 16 中引入了与 <em>instanceof</em> 的模式匹配，在 Java 21 中引入了与 <em>switch</em> 的模式匹配。</p>
<pre><code class="language-java">public class PrimitiveTypesTest {
    void main() {
        test1("hello world");
        test2("hello world");
        test1(56);
        test2(56);
        test1(java.time.LocalDate.now());
        test2(java.time.LocalDate.now());
    }

    private static void test1(Object obj) {
        if (obj instanceof String s &amp;&amp; s.length() &gt;= 5) {
            System.out.println(s.toUpperCase());
        } else if (obj instanceof Integer i) {
            System.out.println(i * i);
        } else {
            System.out.println(obj);
        }
    }

    private static void test2(Object obj) {
        switch (obj) {
            case String s when s.length() &gt;= 5 -&gt; System.out.println(s.toUpperCase());
            case Integer i -&gt; System.out.println(i * i);
            case null, default -&gt; System.out.println(obj);
        }
    }
}
</code></pre>
<p><a href="https://openjdk.org/jeps/455" target="_blank" rel="noopener nofollow">JEP 455</a> 在 Java 23 中引入了两项变更：</p>
<ul>
<li>
<p>可以在 switch 表达式和语句中使用所有基元类型，包括 long、float、double 和 boolean。</p>
</li>
<li>
<p>其次，我们还可以在模式匹配中使用所有基元类型，包括 instanceof 和 switch。</p>
</li>
</ul>
<p>在这两种情况下，即通过 long、float、double 和布尔类型进行 switch 以及使用基元变量进行模式匹配时，与所有新的 switch 功能一样，switch 必须要涵盖所有可能的情况。</p>
<pre><code class="language-java">private static void test3(int x) {
    switch (x) {
        case 1, 2, 3 -&gt; System.out.println("Low");
        case 4, 5, 6 -&gt; System.out.println("Medium");
        case 7, 8, 9 -&gt; System.out.println("High");
    }
}
</code></pre>
<h2 id="模块导入声明第二次预览"><strong>模块导入声明（第二次预览）</strong></h2>
<p>这个功能在JDK 23 上是第一次预览，主要功能是通过简洁地导入模块导出的所有包的功能来增简化了模块库的重复使用，但不要求导入代码本身必须在模块中。</p>
<p>自 Java 1.0 起，<code>java.lang</code> 包中的所有类都会自动导入到每个 .java 文件中。这就是为什么我们无需导入语句就能使用 <code>Object</code>、<code>String</code>、<code>Integer</code>、<code>Exception</code>、<code>Thread</code> 等类的原因。</p>
<p>我们还可以导入完整的包。例如，导入 <code>java.util.*</code> 意味着我们不必单独导入 <code>List</code>、<code>Set</code>、<code>Map</code>、<code>ArrayList</code>、<code>HashSet</code> 和 <code>HashMap</code> 等类。</p>
<p><a href="https://openjdk.org/jeps/476" target="_blank" rel="noopener nofollow">JEP 467</a>现在允许我们导入完整的模块，更准确地说，是导入模块导出的包中的所有类。</p>
<p>例如，我们可以按如下方式导入完整的 <code>java.base</code> 模块，然后使用该模块中的类（例如 <code>List</code>、<code>Map</code>、<code>Collectors</code>、<code>Stream</code>），而无需进一步导入：</p>
<pre><code class="language-java">package git.snippets.jdk23;

import module java.base;

public class ModuleImportDeclarationsTest {
    void main() {
        System.out.println(groupByFirstLetter("a", "abc", "bcd", "ddd", "dddc", "dfc", "bc"));
    }

    public static Map&lt;Character, List&lt;String&gt;&gt; groupByFirstLetter(String... values) {
        return Stream.of(values).collect(Collectors.groupingBy(s -&gt; Character.toUpperCase(s.charAt(0))));
    }
}
</code></pre>
<p>如果有两个同名的导入类，例如下面示例中的 Date，编译器就会出错：</p>
<pre><code class="language-java">import module java.base;
import module java.sql;
</code></pre>
<p>如果一个导入模块临时导入了另一个模块，那么我们也可以使用临时导入模块导出包中的所有类，而无需显式导入。</p>
<p>例如，java.sql 模块转义导入了 java.xml 模块：</p>
<pre><code class="language-java">module java.sql {
  . . .
  requires transitive java.xml;
  . . .
}
</code></pre>
<p>因此，在下面的示例中，我们不需要显式导入 SAXParserFactory 和 SAXParser，也不需要显式导入 java.xml 模块：</p>
<pre><code class="language-java">SAXParserFactory factory = SAXParserFactory.newInstance();
SAXParser saxParser = factory.newSAXParser();
</code></pre>
<h2 id="灵活的构造函数主体第三次预览"><strong>灵活的构造函数主体（第三次预览）</strong></h2>
<p>这个功能在 JDK 23 上是第二次预览，现在是第三次预览，下述代码中，Child1的构造函数，只能先通过super构造父类，然后才能初始化子类的 b 这个变量。</p>
<pre><code class="language-java">public class FlexibleConstructorBodies {
    void main() {
        new Child1(1, 2);
    }
}


class Parent {
    private final int a;

    public Parent(int a) {
        this.a = a;
        printMe();
    }

    void printMe() {
        System.out.println("a = " + a);
    }
}

// JDK 23 之前
class Child1 extends Parent {
    private final int b;

    public Child1(int a, int b) {
        super(verifyParamsAndReturnA(a, b));
        this.b = b;
    }

    @Override
    void printMe() {
        super.printMe();
        System.out.println("b = " + b);
    }

    private static int verifyParamsAndReturnA(int a, int b) {
        if (a &lt; 0 || b &lt; 0) throw new IllegalArgumentException();
        return a;
    }
}
</code></pre>
<p>当我们执行</p>
<pre><code class="language-java">new Child1(1,2);
</code></pre>
<p>这段代码的时候，本来我们期待返回的是</p>
<pre><code class="language-text">a = 1
b = 2
</code></pre>
<p>但是由于父类在构造时候调用了<code>printMe()</code>，且这个调用是在 b 变量初始化之前调用的，所以导致程序执行的结果是</p>
<pre><code class="language-text">a = 1
b = 0
</code></pre>
<p>今后，在使用 super(...) 调用父类构造函数之前，以及在使用 this(...) 调用本类的构造函数之前，我们可以执行任何不访问当前构造实例（即不访问其字段）的代码，</p>
<p>此外，我们还可以初始化正在构造的实例的字段。详见<a href="https://openjdk.org/jeps/482" target="_blank" rel="noopener nofollow">JEP 482</a></p>
<p>在 JDK 24 上，上述代码可以调整为:</p>
<pre><code class="language-java">class Child2 extends Parent {
    private final int b;

    public Child2(int a, int b) {
        if (a &lt; 0 || b &lt; 0) throw new IllegalArgumentException(); 
        this.b = b;                                                
        super(a);
    }

    @Override
    void printMe() {
        super.printMe();
        System.out.println("b = " + b);
    }
}
</code></pre>
<p>其中构造函数中，a和b的初始化和判断，都可以在super(...)函数调用之前，<br>
执行</p>
<pre><code class="language-java">new Child2(1,2);
</code></pre>
<p>打印结果为预期结果</p>
<pre><code class="language-text">a = 1
b = 2
</code></pre>
<h2 id="main方法的精简写法第四次预览"><strong>main方法的精简写法（第四次预览）</strong></h2>
<p>最早出现在 JDK 21 中，见<a href="https://www.cnblogs.com/greyzeng/p/17727833.html" target="_blank">Java SE 21 新增特性</a></p>
<p>原来我们写一个main方法，需要</p>
<pre><code class="language-java">public class UnnamedClassesAndInstanceMainMethodsTest {

    public static void main(String[] args) {
        System.out.println("Hello World!");
    }

}

</code></pre>
<p>而且Java文件的名称需要和UnnamedClassesAndInstanceMainMethodsTest保持一致，到了JDK 24，上述代码可以简化成</p>
<pre><code class="language-java">void main() {
    System.out.println("hello world");
}
</code></pre>
<p>甚至连 public class ... 这段也不需要写，在JDK 24版本中，这个功能是第四次预览。</p>
<h2 id="结构化并发第四次预览"><strong>结构化并发（第四次预览）</strong></h2>
<p>JEP 499 引入了<strong>结构化并发</strong>（Structured Concurrency），它确保相关的任务<strong>一起启动、一起管理</strong>，使并发编程更<strong>安全</strong>、更<strong>易于理解</strong>。</p>
<p>让我们通过一个简单的示例来理解它：<strong>并行获取用户数据和订单数据</strong>，并比较<strong>传统方式</strong>和<strong>结构化并发</strong>的实现方式。</p>
<p>传统方式（没有结构化并发）</p>
<p>在传统方法中，我们使用 <code>ExecutorService</code> 并手动管理任务执行和取消：</p>
<pre><code class="language-java">import java.util.concurrent.*;

public class TraditionalConcurrencyExample {
    private static final ExecutorService executor = Executors.newFixedThreadPool(2);

    public static void main(String[] args) throws ExecutionException, InterruptedException {
        Future&lt;String&gt; userFuture = executor.submit(() -&gt; fetchUserData());
        Future&lt;String&gt; orderFuture = executor.submit(() -&gt; fetchOrderData());

        try {
            String userData = userFuture.get(); // 阻塞直到用户数据返回
            String orderData = orderFuture.get(); // 阻塞直到订单数据返回
            System.out.println("用户: " + userData + ", 订单: " + orderData);
        } finally {
            executor.shutdown();
        }
    }

    static String fetchUserData() {
        try { Thread.sleep(1000); } catch (InterruptedException e) { Thread.currentThread().interrupt(); }
        return "用户数据";
    }

    static String fetchOrderData() {
        try { Thread.sleep(1000); } catch (InterruptedException e) { Thread.currentThread().interrupt(); }
        return "订单数据";
    }
}
</code></pre>
<p><strong>存在的问题：</strong><br>
<strong>子任务管理复杂</strong>——没有清晰的父子关系，难以控制任务的生命周期。</p>
<p><strong>手动异常处理</strong>——需要自行管理任务失败时的行为。</p>
<p><strong>资源泄漏风险</strong>——如果一个任务失败，另一个任务可能仍在运行，可能导致不一致的状态。</p>
<p>使用结构化并发</p>
<p>现在，我们使用 <strong><code>StructuredTaskScope</code></strong> 让任务在<strong>相同的作用域</strong>中执行，并确保它们<strong>要么一起完成，要么一起失败</strong>：</p>
<pre><code class="language-java">import java.util.concurrent.*;
import jdk.incubator.concurrent.StructuredTaskScope;

public class StructuredConcurrencyExample {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        try (var scope = new StructuredTaskScope.ShutdownOnFailure()) {
            StructuredTaskScope.Subtask&lt;String&gt; userTask = scope.fork(() -&gt; fetchUserData());
            StructuredTaskScope.Subtask&lt;String&gt; orderTask = scope.fork(() -&gt; fetchOrderData());

            scope.join();  // 等待所有任务完成
            scope.throwIfFailed();  // 如果有任务失败，取消所有任务并抛出异常

            String userData = userTask.get();
            String orderData = orderTask.get();
            System.out.println("用户: " + userData + ", 订单: " + orderData);
        }
    }

    static String fetchUserData() {
        try { Thread.sleep(1000); } catch (InterruptedException e) { Thread.currentThread().interrupt(); }
        return "用户数据";
    }

    static String fetchOrderData() {
        try { Thread.sleep(1000); } catch (InterruptedException e) { Thread.currentThread().interrupt(); }
        return "订单数据";
    }
}
</code></pre>
<p>结构化并发的优势如下：</p>
<p><strong>任务管理更清晰</strong>——所有任务都在 <code>StructuredTaskScope</code> 作用域内，代码更加<strong>易读</strong>。<br>
<strong>自动清理</strong>——如果<strong>任何一个任务失败，所有任务都会被取消</strong>，不会出现部分完成的情况。<br>
<strong>更好的错误处理</strong>——异常可以在 <code>scope.throwIfFailed()</code> 统一管理，避免手动 try-catch。<br>
<strong>更容易调试</strong>——所有任务都有<strong>明确的父作用域</strong>，方便排查问题。</p>
<p>结构化并发（Structured Concurrency）让并行任务的执行<strong>更安全、更易维护</strong>。它确保任务要么<strong>一起成功完成</strong>，要么<strong>一起失败取消</strong>，避免了传统并发编程中的各种问题，如<strong>任务泄漏、异常传播困难</strong>等。</p>
<h2 id="更多">更多</h2>
<p><a href="https://blog.csdn.net/hotonyhui/category_1262363.html" target="_blank" rel="noopener nofollow">Java SE 7及以后各版本新增特性，持续更新中...</a></p>
<h2 id="参考资料">参考资料</h2>
<p><a href="https://docs.oracle.com/en/java/javase/24/language/java-language-changes-release.html" target="_blank" rel="noopener nofollow">Java Language Changes for Java SE 24</a></p>
<p><a href="https://www.oracle.com/java/technologies/javase/24-relnote-issues.html#NewFeature" target="_blank" rel="noopener nofollow">JDK 24 Release Notes</a></p>
<p><a href="https://www.happycoders.eu/java/java-24-features/" target="_blank" rel="noopener nofollow">JAVA 24 FEATURES(WITH EXAMPLES</a></p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/greyzeng/" target="_blank">Grey Zeng</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/greyzeng/p/18781401" target="_blank">https://www.cnblogs.com/greyzeng/p/18781401</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.2033477483923611" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-19 17:28">2025-03-19 17:25</span>&nbsp;
<a href="https://www.cnblogs.com/greyzeng">Grey Zeng</a>&nbsp;
阅读(<span id="post_view_count">26</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18781401" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18781401);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18781401', targetLink: 'https://www.cnblogs.com/greyzeng/p/18781401', title: 'Java SE 24 新增特性' })">举报</a>
</div>
        