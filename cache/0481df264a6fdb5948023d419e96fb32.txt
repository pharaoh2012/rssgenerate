
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zhaloe/p/18769665" title="发布于 2025-03-13 20:38">
    <span role="heading" aria-level="2">鸿蒙用户首选项数据持久化</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>用户首选项为应用提供Key-Value键值型的数据处理能力，支持应用持久化轻量级数据，并对其修改和查询。当用户希望有一个全局唯一存储的地方，可以采用用户首选项来进行存储。Preferences会将该数据缓存在内存中，当用户读取的时候，能够快速从内存中获取数据，当需要持久化时可以使用flush接口将内存中的数据写入持久化文件中。Preferences会随着存放的数据量越多而导致应用占用的内存越大，因此，Preferences不适合存放过多的数据，也不支持通过配置加密，适用的场景一般为应用保存用户的个性化设置（字体大小，是否开启夜间模式）等。</p>
<h2 id="动作机制">动作机制</h2>
<p>如图所示，用户程序通过ArkTS接口调用用户首选项读写对应的数据文件。开发者可以将用户首选项持久化文件的内容加载到Preferences实例，每个文件唯一对应到一个Preferences实例，系统会通过静态容器将该实例存储在内存中，直到主动从内存中移除该实例或者删除该文件。<br>
<img src="https://img2024.cnblogs.com/blog/682407/202503/682407-20250313122456079-668553003.png" alt="" loading="lazy"></p>
<h2 id="约束限制">约束限制</h2>
<ul>
<li>首选项无法保证进程并发安全，会有文件损坏和数据丢失的风险，不支持在多进程场景下使用。</li>
<li>Key键为string类型，要求非空且长度不超过1024个字节。</li>
<li>如果Value值为string类型，请使用UTF-8编码格式，可以为空，不为空时长度不超过16MB。</li>
<li>当存储的数据中包含非UTF-8格式的字符串时，请使用Uint8Array类型存储，否则会造成持久化文件出现格式错误造成文件损坏。</li>
<li>当调用removePreferencesFromCache或者deletePreferences后，订阅的数据变更会主动取消订阅，重新getPreferences后需要重新订阅数据变更。</li>
<li>不允许deletePreferences与其他接口多线程、多进程并发调用，否则会发生不可预期行为。</li>
<li>内存会随着存储数据量的增大而增大，所以存储的数据量应该是轻量级的，建议存储的数据不超过50MB，当存储的数据较大时，在使用同步接口创建Preferences对象和持久化数据时会变成耗时操作，不建议在主线程中使用，否则可能出现appfreeze问题。</li>
</ul>
<h2 id="开发步骤">开发步骤</h2>
<ol>
<li>导入@kit.ArkData模块</li>
</ol>
<pre><code class="language-typescript">import { preferences } from '@kit.ArkData';
</code></pre>
<ol start="2">
<li>获取Preferences实例</li>
</ol>
<pre><code class="language-typescript">import { UIAbility } from '@kit.AbilityKit';
import { BusinessError } from '@kit.BasicServicesKit';
import { window } from '@kit.ArkUI';

let dataPreferences: preferences.Preferences | null = null;

class EntryAbility extends UIAbility {
  onWindowStageCreate(windowStage: window.WindowStage) {
    let options: preferences.Options = { name: 'myStore' };
    dataPreferences = preferences.getPreferencesSync(this.context, options);
  }
}
</code></pre>
<ol start="3">
<li>写入数据</li>
</ol>
<p>使用putSync()方法保存数据到缓存的Preferences实例中。在写入数据后，如有需要，可使用flush()方法将Preferences实例的数据存储到持久化文件。</p>
<pre><code class="language-typescript">import { util } from '@kit.ArkTS';
if (dataPreferences.hasSync('startup')) {
  console.info("The key 'startup' is contained.");
} else {
  console.info("The key 'startup' does not contain.");
  // 此处以此键值对不存在时写入数据为例
  dataPreferences.putSync('startup', 'auto');
  // 当字符串有特殊字符时，需要将字符串转为Uint8Array类型再存储
  let uInt8Array1 = new util.TextEncoder().encodeInto("~！@#￥%……&amp;*（）——+？");
  dataPreferences.putSync('uInt8', uInt8Array1);
}
</code></pre>
<ol start="4">
<li>读取数据</li>
</ol>
<p>使用getSync()方法获取数据，即指定键对应的值。如果值为null或者非默认值类型，则返回默认数据。</p>
<pre><code class="language-typescript">let val = dataPreferences.getSync('startup', 'default');
console.info("The 'startup' value is " + val);
// 当获取的值为带有特殊字符的字符串时，需要将获取到的Uint8Array转换为字符串
let uInt8Array2 : preferences.ValueType = dataPreferences.getSync('uInt8', new Uint8Array(0));
let textDecoder = util.TextDecoder.create('utf-8');
val = textDecoder.decodeToString(uInt8Array2 as Uint8Array);
console.info("The 'uInt8' value is " + val);
</code></pre>
<ol start="5">
<li>删除数据</li>
</ol>
<p>使用deleteSync()方法删除指定键值对。</p>
<pre><code class="language-typescript">dataPreferences.deleteSync('startup');
</code></pre>
<ol start="6">
<li>数据持久化</li>
</ol>
<p>应用存入数据到Preferences实例后，可以使用flush()方法实现数据持久化。</p>
<pre><code class="language-typescript">dataPreferences.flush((err: BusinessError) =&gt; {
  if (err) {
    console.error(`Failed to flush. Code:${err.code}, message:${err.message}`);
    return;
  }
  console.info('Succeeded in flushing.');
})
</code></pre>
<ol start="7">
<li>删除指定文件</li>
</ol>
<p>使用deletePreferences()方法从内存中移除指定文件对应的Preferences实例，包括内存中的数据。若该Preference存在对应的持久化文件，则同时删除该持久化文件，包括指定文件及其备份文件、损坏文件。</p>
<pre><code class="language-typescript">preferences.deletePreferences(this.context, options, (err: BusinessError) =&gt; {
  if (err) {
    console.error(`Failed to delete preferences. Code:${err.code}, message:${err.message}`);
      return;
  }
  console.info('Succeeded in deleting preferences.');
})
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.6549537300474537" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-13 20:39">2025-03-13 20:38</span>&nbsp;
<a href="https://www.cnblogs.com/zhaloe">龙儿筝</a>&nbsp;
阅读(<span id="post_view_count">29</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18769665" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18769665);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18769665', targetLink: 'https://www.cnblogs.com/zhaloe/p/18769665', title: '鸿蒙用户首选项数据持久化' })">举报</a>
</div>
        