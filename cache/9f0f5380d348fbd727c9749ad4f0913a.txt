
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/sharpeye/p/18749012" title="发布于 2025-03-03 23:03">
    <span role="heading" aria-level="2">浅谈processing-java.exe应用程序的使用（与PowerShell的联合）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>简单总结一下processing-java.exe的使用，以及和PowerShell结合，如何互相调用和传参。</p>
<h1>Processing-java</h1>
<p>这是 <strong>processing-java.exe</strong> 的官方说明:</p>
<pre class="language-ruby highlighter-hljs"><code>
Command line edition for Processing 1295 (Java Mode)

--help               Show this help text. Congratulations.

--sketch=&lt;name&gt;      Specify the sketch folder (required)
--output=&lt;name&gt;      Specify the output folder (optional and
                     cannot be the same as the sketch folder.)

--force              The sketch will not build if the output
                     folder already exists, because the contents
                     will be replaced. This option erases the
                     folder first. Use with extreme caution!

--build              Preprocess and compile a sketch into .class files.
--run                Preprocess, compile, and run a sketch.
--present            Preprocess, compile, and run a sketch in presentation mode.

--export             Export an application.
--variant            Specify the platform and architecture (Export only).
--no-java            Do not embed Java.

Starting with 4.0, the --platform option has been removed
because of the variety of platforms and architectures now available.
Use the --variant option instead, for instance:

variant        platform
-------------  ---------------------------
macos-x86_64   macOS (Intel 64-bit)
macos-aarch64  macOS (Apple Silicon)
windows-amd64  Windows (Intel 64-bit)
linux-amd64    Linux (Intel 64-bit)
linux-arm      Linux (Raspberry Pi 32-bit)
linux-aarch64  Linux (Raspberry Pi 64-bit)

The --build, --run, --present, or --export must be the final parameter
passed to Processing. Arguments passed following one of those four will
be passed through to the sketch itself, and therefore available to the
sketch via the 'args' field. To pass options understood by PApplet.main(),
write a custom main() method so that the preprocessor does not add one.
        
https://github.com/processing/processing/wiki/Command-Line</code></pre>
<p>把它<strong>翻译</strong>出来看一下</p>
<div class="message-box-content-wrapper-fgNGpz">
<div class="message-content message-box-content-xoCEoU receive-message-box-content-bNaFpa samantha-message-box-content-gWlptz" data-testid="message_content">
<div class="container-ZYIsnH flow-markdown-body theme-samantha-Nbr9UN" dir="ltr" data-testid="message_text_content" data-show-indicator="false">
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space"><strong>Processing 1295 命令行版本（Java 模式）</strong></div>
<br class="container-utlnW2 wrapper-d0Cc1k undefined">
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space" style="padding-left: 40px"><span style="color: rgba(230, 126, 35, 1)"><strong>--help            </strong></span>显示此帮助文本。恭喜你。</div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space" style="padding-left: 40px"><span style="color: rgba(230, 126, 35, 1)"><strong>--sketch=&lt;文件夹名称&gt;   </strong></span>指定草图文件夹（必填项）</div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space" style="padding-left: 40px"><span style="color: rgba(230, 126, 35, 1)"><strong>--output=&lt;文件夹名称&gt;   </strong></span>指定输出文件夹（可选，且不能与草图文件夹相同）。</div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space" style="padding-left: 40px"><span style="color: rgba(230, 126, 35, 1)"><strong>--force           </strong></span>如果输出文件夹已存在，草图将不会进行构建，因为其中的内容会被替换。此选项会先删除该文件夹。使用时请务必谨慎！</div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space" style="padding-left: 40px"><span style="color: rgba(230, 126, 35, 1)"><strong>--build           </strong></span>对草图进行预处理并将其编译成.class 文件。</div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space" style="padding-left: 40px"><span style="color: rgba(230, 126, 35, 1)"><strong>--run            </strong></span>对草图进行预处理、编译并运行。</div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space" style="padding-left: 40px"><strong><span style="color: rgba(230, 126, 35, 1)">--present          </span></strong>对草图进行预处理、编译，并以演示模式运行。</div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space" style="padding-left: 40px"><span style="color: rgba(230, 126, 35, 1)"><strong>--export          &nbsp; </strong></span>导出一个应用程序。</div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space" style="padding-left: 40px"><strong><span style="color: rgba(230, 126, 35, 1)">--variant           </span></strong>指定平台和架构（仅用于导出操作）。</div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space" style="padding-left: 40px"><strong><span style="color: rgba(230, 126, 35, 1)">--no-java          </span></strong>不嵌入 Java。</div>
<br class="container-utlnW2 wrapper-d0Cc1k undefined">
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space">从 4.0 版本开始，<code>--<strong>platform</strong></code>选项已被移除， 因为现在可用的平台和架构种类繁多。 请改用 <code>--<strong>variant</strong></code> 选项，例如：</div>
<br class="container-utlnW2 wrapper-d0Cc1k undefined">
<div class="auto-hide-last-sibling-br table-container-GhL7Lo">
<table>
<thead>
<tr>
<th>变体名称</th>
<th>平台</th>
</tr>
</thead>
<tbody>
<tr>
<td>macos-x86_64</td>
<td>macOS（英特尔 64 位）</td>
</tr>
<tr>
<td>macos-aarch64</td>
<td>macOS（苹果芯片）</td>
</tr>
<tr>
<td>windows-amd64</td>
<td>Windows（英特尔 64 位）</td>
</tr>
<tr>
<td>linux-amd64</td>
<td>Linux（英特尔 64 位）</td>
</tr>
<tr>
<td>linux-arm</td>
<td>Linux（树莓派 32 位）</td>
</tr>
<tr>
<td>linux-aarch64</td>
<td>Linux（树莓派 64 位）</td>
</tr>
</tbody>
</table>
</div>
<br class="container-utlnW2 wrapper-d0Cc1k undefined">
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space">&nbsp;</div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space"><code><strong>--build</strong>、<strong>--run</strong>、<strong>--present</strong> 或 <strong>--export</strong></code> 必须是传递给 <strong>Processing </strong>的最后一个参数。<br class="container-utlnW2 wrapper-d0Cc1k undefined">在这四个参数之一后面传递的参数将被传递给草图本身，<br class="container-utlnW2 wrapper-d0Cc1k undefined">因此草图可以通过 “<strong>args</strong>” 字段获取这些参数。<br class="container-utlnW2 wrapper-d0Cc1k undefined">要传递 <code><strong>PApplet.main ()</strong></code> 所理解的选项，<br class="container-utlnW2 wrapper-d0Cc1k undefined">请编写一个自定义的 <strong>main ()</strong> 方法，这样预处理器就不会添加默认的 <strong>main ()</strong> 方法了。</div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space">&nbsp;</div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space"><hr><br class="container-utlnW2 wrapper-d0Cc1k undefined"><a class="link-ZNPgAX" href="https://github.com/processing/processing/wiki/Command-Line" target="_blank" rel="noopener nofollow">https://github.com/processing/processing/wiki/Command-Line</a></div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space">上面这个网页是<strong>Github</strong>上的相关说明：</div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space">&nbsp;</div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space"><span style="text-decoration: underline; font-size: 16px">在 Processing IDE 中运行草图固然有趣，但在命令行中运行则更加有趣！通过命令行运行意味着你可以自动化执行草图，无需打开 IDE 就能运行草图，在嵌入式设备上运行草图，甚至可以让草图在启动时运行……这些功能都非常实用！</span></div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space">&nbsp;</div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space">
<div class="paragraph">安装 <strong>processing-java</strong> 命令</div>
<div class="paragraph">Windows/Linux：使用下载文件中的 <strong><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">processing-java</code></strong> 程序</div>
<div class="paragraph">Mac：在 Processing 应用程序中，进入“工具”&gt;“安装 ‘processing-java’”</div>
</div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space">&nbsp;</div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space">
<div class="segment-content-box" data-v-01446464="">
<div class="markdown-container" data-v-dbe669ce="" data-v-01446464="">
<div class="markdown" data-v-53cd9be5="" data-v-dbe669ce="">
<div class="table-container">
<table>
<thead>
<tr>
<th>命令 (COMMAND)</th>
<th class="">说明 (INFO)</th>
</tr>
</thead>
<tbody>
<tr>
<td class=""><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">--help</code></td>
<td class="">显示此帮助文本 :)</td>
</tr>
<tr>
<td class=""><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">--sketch=&lt;path&gt;</code></td>
<td class="">指定草图文件夹（必需）</td>
</tr>
<tr>
<td class=""><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">--output=&lt;path&gt;</code></td>
<td class="">指定输出文件夹（可选，且不能与草图文件夹相同）</td>
</tr>
<tr>
<td class=""><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">--force</code></td>
<td class="">如果输出文件夹已存在，草图将不会构建，因为内容会被替换；此选项会先删除文件夹：使用时需极度谨慎！</td>
</tr>
<tr>
<td class=""><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">--build</code></td>
<td class="">预处理并将草图编译为&nbsp;<code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">.class</code>&nbsp;文件</td>
</tr>
<tr>
<td class=""><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">--run</code></td>
<td class="">预处理、编译并运行草图</td>
</tr>
<tr>
<td class=""><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">--present</code></td>
<td class="">预处理、编译并以演示模式运行草图</td>
</tr>
<tr>
<td class=""><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">--export</code></td>
<td class="">导出应用程序</td>
</tr>
<tr>
<td class=""><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">--no-java</code></td>
<td class="">不嵌入 Java：使用时需自担风险！</td>
</tr>
<tr>
<td class=""><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">--variant</code></td>
<td class="">指定变体（仅用于导出应用程序），应为以下之一：<code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">macos-x86_64</code>、<code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">macos-aarch64</code>、<code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">windows-amd64</code>、<code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">linux-amd64</code>、<code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">linux-arm</code>&nbsp;或&nbsp;<code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">linux-aarch64</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="segment-assistant-actions" data-v-ca4618a9="">
<div class="segment-assistant-actions-content" data-v-ca4618a9="">
<div class="segment-actions-content-btn" data-v-3bbf81ab="" data-v-ca4618a9="">&nbsp;</div>
</div>
</div>
</div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space">
<div class="segment-content-box" data-v-01446464="">
<div class="markdown-container" data-v-dbe669ce="" data-v-01446464="">
<div class="markdown" data-v-53cd9be5="" data-v-dbe669ce="">
<div class="paragraph">需要注意的几点：</div>
<div class="paragraph"><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce=""><strong>--build</strong></code><strong>、</strong><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce=""><strong>--run</strong></code><strong>、<code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">--present</code></strong> 或 <code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce=""><strong>--export</strong></code> 命令必须是传递给 <code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce=""><strong>processing-java</strong></code> 的最后一个参数。 上述命令之后的参数将被传递给草图本身，因此可以通过草图中的 <strong><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">args</code></strong> 字段获取！（请参阅下面的示例） 要传递 <code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce=""><strong>PApplet.main()</strong></code> 能理解的选项，请编写一个自定义的 <strong><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">main()</code></strong> 方法，这样预处理器就不会添加一个。</div>
<div class="paragraph">以下是一些使用 <strong><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">processing-java</code></strong> 的示例...</div>
<div class="paragraph">&nbsp;</div>
<div class="paragraph"><strong>运行草图而不使用任何特殊选项： </strong></div>
<div class="paragraph"><strong><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">processing-java --sketch=yoursketchfolder --run</code></strong> 注意：<strong><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">--sketch</code></strong> 命令是必需的，应该是你草图文件夹的路径</div>
<div class="paragraph"><strong>将文件保存到草图所在位置以外的文件夹：</strong></div>
<div class="paragraph"><strong><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">processing-java --sketch=yoursketchfolder &nbsp;--output=youroutputfolder --run</code></strong></div>
<div class="paragraph"><strong>包含可选的 <code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">--force</code> 命令，这将覆盖输出目录，即使其中已有内容（使用时需谨慎！）：</strong></div>
<div class="paragraph"><strong><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">processing-java --sketch=/full/path/to/your/sketch/dir --output=/path/to/output/folder --force --run</code></strong></div>
<div class="paragraph"><strong>以演示模式运行草图：</strong></div>
<div class="paragraph"><strong><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">processing-java --sketch=/full/path/to/your/sketch/folder --present</code></strong></div>
<div class="paragraph">&nbsp;</div>
<div class="paragraph"><strong>传递命令行参数：</strong></div>
<div class="paragraph">如果你想将命令行传递的参数包含到你的草图中，可以在 <strong><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">--run</code>、<code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">--present</code></strong> 等命令之后添加它们。例如，这里我们将宽度和高度传递给一个草图：</div>
</div>
</div>
</div>
<div class="segment-assistant-actions" data-v-ca4618a9="">
<div class="segment-assistant-actions-content" data-v-ca4618a9="">
<div class="segment-actions-content-btn" data-v-3bbf81ab="" data-v-ca4618a9="">
<div class="paragraph"><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce=""><strong>processing-java --sketch=/full/path/to/your/sketch/folder --present 600 600</strong></code></div>
<div class="paragraph">在你的草图中，可以通过以下方式访问这些参数：</div>
<div class="segment-code" data-v-a57c44a4="" data-v-01446464="">
<div class="syntax-highlighter light segment-code-content" data-v-b760b6bb="" data-v-a57c44a4="">
<pre class="language-java highlighter-hljs"><code>void settings() {
    // 如果存在参数，则更改草图的大小
    if (args != null) {
        int w = Integer.parseInt(args[0]); // 将第一个参数解析为宽度
        int h = Integer.parseInt(args[1]); // 将第二个参数解析为高度
        size(w, h); // 根据参数设置草图的大小
    }
    // 如果没有参数或者参数不完整，这里可以提供一个选择 —— 此处我们手动设置尺寸 :)
    else {
        size(400, 400); // 设置默认大小为 400x400
    }
}</code></pre>
</div>
</div>
<div class="paragraph">常见问题 以下是一些可能会出错的常见情况：</div>
<div class="paragraph" style="padding-left: 40px">错误：Sketchname 不存在 这可能是因为没有使用 <strong><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">--sketch</code></strong> 参数指定草图的完整路径，或者包含草图的文件夹名称与草图的名称不同。</div>
<div class="paragraph" style="padding-left: 40px">之前安装的 processing-java 现在无法正常工作 在 Mac OSX 上，下载新版本的 Processing 后，可能需要重新安装命令行工具 :(</div>
<div class="paragraph" style="padding-left: 40px">无头模式运行 以“无头模式”运行你的草图（即没有显示设备）可能需要额外的操作，更多信息请参考“无显示运行”（Running Without a Display）。</div>
<div class="paragraph" style="padding-left: 40px">即使在启用了“无头模式”的情况下，<strong><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">--build</code> </strong>和 <strong><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">--export</code></strong> 选项也应该可以正常工作。</div>
<div class="paragraph">&nbsp;</div>
<div class="paragraph"><hr></div>
<h1 class="paragraph">补充</h1>
<div class="paragraph">可以看到官方给我们预留了很多开关/参数。不过相关使用的示例还是不全面。接下来笔者补充一些有关processing-java和命令行程序的相互调用、传参等使用示例。</div>
<div class="paragraph">&nbsp;</div>
<h2>一&nbsp; Processing 调用 PowerShell 脚本</h2>
<div class="paragraph">在 Processing 草图中，可以通过 <strong><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">Runtime。getRuntime().exec</code></strong> 或 <strong><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">ProcessBuilder</code></strong> 调用 PowerShell 命令。例如：</div>
<h4 class="paragraph">运行一个dir命令来获取C盘目录信息：</h4>
<div class="paragraph">
<pre class="language-java highlighter-hljs"><code>void setup() {
  size(400, 400);
  try {
    // 执行 PowerShell 命令（例如列出目录）
    Process p = Runtime.getRuntime().exec("powershell.exe dir C:\\");
    BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
    String line;
    while ((line = input.readLine()) != null) {
      println(line); // 在 Processing 控制台输出结果
    }
    input.close();
  } catch (Exception e) {
    e.printStackTrace();
  }
}</code></pre>
</div>
<h4 class="segment-code">&nbsp;</h4>
<h4 class="segment-code">也可以在 Processing 中动态构造 PowerShell 命令：</h4>
<div class="paragraph">
<pre class="language-java highlighter-hljs"><code>void setup() {
  String folderPath = "C:\\Users\\YourName\\Documents";
  try {
    Process p = Runtime.getRuntime().exec("powershell.exe dir " + folderPath);
    // 读取输出...
  } catch (Exception e) {
    // 处理异常
  }
}</code></pre>
<h4 class="">&nbsp;</h4>
<h4 class="">还可以传递参数给PowerShell脚本：</h4>
<div class="paragraph">假设你有一个 PowerShell 脚本 <code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce=""><strong>script</strong>.<strong>ps1</strong></code>，它接受参数并执行一些复杂的任务。你可以在 Processing 草图中调用该脚本并传递参数：</div>
<div class="segment-code" data-v-a57c44a4="" data-v-01446464="">
<div class="syntax-highlighter light segment-code-content" data-v-b760b6bb="" data-v-a57c44a4="">
<pre class="language-java highlighter-hljs" data-v-b760b6bb=""><code>void setup() {
    String scriptPath = "C:\\path\\to\\script.ps1"; // PowerShell 脚本路径
    String param1 = "value1";
    String param2 = "value2";

    try {
        // 构造命令
        String command = "powershell.exe -File " + scriptPath + " -param1 " + param1 + " -param2 " + param2;
        Process process = Runtime.getRuntime().exec(command);
        // 读取输出
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        String line;
        while ((line = reader.readLine()) != null) {
            println(line); // 打印输出到 Processing 控制台
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}</code></pre>
<p>注意：代码中使用了<strong>InputStreamReader</strong>来读取<strong>PowerShell</strong>脚本反馈的信息。</p>
<p>&nbsp;</p>
<h2>二&nbsp; PowerShell 脚本调用 Processing-java</h2>
<h4 class="header-vfC6AV auto-hide-last-sibling-br">直接运行 Processing 脚本</h4>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space">在 PowerShell 中执行&nbsp;<strong><code>Processing-java.exe</code></strong>，并指定&nbsp;<code>.<strong>pde</strong></code> 文件所在的文件夹路径：</div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space">
<pre class="language-powershell highlighter-hljs"><code># 示例：运行指定路径的 Processing 脚本
"C:\Processing\processing-java.exe" --sketch="C:\path\to\yoursketchfolder" --run</code></pre>
</div>
<p>&nbsp;如果频繁调用Processing-java程序，可以设置一下系统变量，将 其目录地址添加入Path中。</p>
<p>&nbsp;</p>
<h4 class="header-vfC6AV auto-hide-last-sibling-br">传递命令行参数</h4>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space">在 PowerShell 中传递参数给 Processing 程序，并在 Processing 代码中读取：</div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space">
<pre class="language-powershell highlighter-hljs"><code># PowerShell 命令
"C:\Processing\processing-java.exe" --sketch="C:\path\to\yoursketchfolder" --run --args "参数1" "参数2"</code></pre>
</div>
<p>&nbsp;然后在 Processing 代码中通过&nbsp;<strong><code>args</code></strong>&nbsp;数组接收参数：</p>
<pre class="language-java highlighter-hljs"><code>void setup() {
  size(400, 400);
  background(255);

  // 检查是否有参数传入
  if (null == args) {
  } else {

    if (args.length &gt; 0) {
      for (int i = 0; i &lt; args.length; i++) {
        println("接收到的参数 " + (i + 1) + ": " + args[i]);
      }
    } else {
      println("没有接收到任何参数。");
    }
  }
}

void draw() {
  // 这里可以添加其他绘图代码
}</code></pre>
&nbsp;有待传入参数可以单独放在一个字符串数组中，方便定义和管理，如：
<pre class="language-powershell light-scrollbar-WEp2KJ highlighter-hljs"><code># 定义要传递的参数
$parameters = "参数1", "参数2", "参数3"

# 构建完整的命令
$command = "$processingJavaPath --sketch=$sketchPath --run --args $($parameters -join ' ')"</code></pre>
<h4 class="header-vfC6AV auto-hide-last-sibling-br">&nbsp;</h4>
<h4 class="header-vfC6AV auto-hide-last-sibling-br">捕获 Processing 输出</h4>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space">将 Processing 的控制台输出重定向到 PowerShell 变量，并做保存：</div>
<div class="auto-hide-last-sibling-br paragraph-JOTKXA paragraph-element br-paragraph-space">
<pre class="language-java highlighter-hljs"><code>$output = "C:\Processing\processing-java.exe" --sketch="C:\path\to\yoursketchfolder" --run 2&gt;&amp;1
$output | Out-File -FilePath "output.log"</code></pre>
<ul>
<li>
<div class="paragraph"><strong class="">捕获输出</strong>：<code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">2&gt;&amp;1</code> 确保捕获命令运行时的所有输出，包括标准输出和错误信息，并存放进$output变量中。</div>
</li>
<li>
<div class="paragraph"><strong class="">保存日志</strong>：将输出的信息，也就是$output变量数据保存到日志文件 <code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce=""><strong>output</strong>.<strong>log</strong></code> 中，方便查看命令运行的结果和潜在的错误信息。</div>
</li>
</ul>
<p>如果情景简单，可以删除<code>2&gt;&amp;1</code>命令。</p>
<h4 class="">&nbsp;</h4>
<h4 class=""><strong>复杂情景 · 运行多个草图并导出应用</strong></h4>
<div class="paragraph">假设你需要自动化运行多个 Processing 草图，并将结果导出 .exe 应用到不同的文件夹。编写 PowerShell 脚本来实现：</div>
<div class="segment-code" data-v-a57c44a4="" data-v-01446464="">
<pre class="language-powershell highlighter-hljs"><code># 定义草图列表和输出路径
$sketches = @(
    "D:\sketch\sk1",
    "D:\sketch\sk2",
    "D:\sketch\sk3"
)
$outputFolder = "D:\outputaa"

# 遍历每个草图并运行
foreach ($sketch in $sketches) {
    $outputPath = Join-Path $outputFolder (Split-Path $sketch -Leaf)
    New-Item -ItemType Directory -Path $outputPath -Force | Out-Null

    # 运行草图并导出
    processing-java --sketch=$sketch --output=$outputPath --force --export
}</code></pre>
<p>&nbsp;Processing-java 中的 <strong><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">--output</code></strong> 参数允许你指定一个输出目录，用于存放草图的编译文件或导出文件。需要将构建或导出的文件组织到特定的文件夹结构中时非常有用。</p>
<div class="paragraph">要使用 <code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce=""><strong>--output</strong></code> 参数，你需要将其放在触发编译或导出的命令之前（如 <strong><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">--run</code>、<code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">--export</code> </strong>或 <strong><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce="">--build</code></strong>）。以下是一个简单的示例：</div>
<div class="segment-code" data-v-a57c44a4="" data-v-01446464="">
<pre class="language-java highlighter-hljs"><code>processing-java --sketch="C:\path\to\yoursketchfolder" --output="C:\desired\output\folder" --run</code></pre>
</div>
<span style="font-size: 16px"><strong>注意事项</strong></span>
<ul>
<li>
<div class="paragraph"><code class="segment-code-inline" data-v-a57c44a4="" data-v-dbe669ce=""><strong>--output</strong></code> 指定的目录不能与草图目录相同。如果尝试使用相同的目录，Processing-java 会抛出错误。</div>
</li>
<li>
<div class="paragraph">如果输出目录不存在，Processing-java 会在可能的情况下创建它。而在上述例子中，我手动创建了待输出目录，因此，需要加上--force让其忽略已存在的文件夹，强制输出文件，--force参数必须放在--export之前。</div>
</li>
<li>
<div class="paragraph">可以使用相对路径作为输出目录。</div>
</li>
</ul>
<p>&nbsp;</p>
<h2>总结</h2>
<p>通过结合使用 <strong>Processing</strong>-<strong>java </strong>和 <strong>PowerShell</strong>，可以实现更强大的自动化部署和跨平台管理功能。当然，如果是针对数字媒体艺术的创作和展演，这种结合也必定会为创作和研发注入新的思路，也能更高效得创建项目和管理项目。</p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.7184041182708333" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-03 23:04">2025-03-03 23:03</span>&nbsp;
<a href="https://www.cnblogs.com/sharpeye">SHARP-EYE</a>&nbsp;
阅读(<span id="post_view_count">49</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18749012" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18749012);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18749012', targetLink: 'https://www.cnblogs.com/sharpeye/p/18749012', title: '浅谈processing-java.exe应用程序的使用（与PowerShell的联合）' })">举报</a>
</div>
        