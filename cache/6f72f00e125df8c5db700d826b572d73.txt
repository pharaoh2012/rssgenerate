<!----> <meta itemprop="headline" content="🗣️面试官：有一个比较经典的 case 也想探讨一下 「页面白屏如何排查？」"> <meta itemprop="keywords" content="前端,面试,开源"> <meta itemprop="datePublished" content="2025-04-18T02:05:01.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="Luckyfif"> <meta itemprop="url" content="https://juejin.cn/user/3186806055252135"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-61fb5e44="">
            🗣️面试官：有一个比较经典的 case 也想探讨一下 「页面白屏如何排查？」
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-61fb5e44=""><div class="author-info-box" data-v-61fb5e44=""><div class="author-name" data-v-61fb5e44=""><a href="/user/3186806055252135/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-292f6e48="" data-v-61fb5e44=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-292f6e48="">
    Luckyfif
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-61fb5e44=""><time datetime="2025-04-18T02:05:01.000Z" title="Fri Apr 18 2025 02:05:01 GMT+0000 (Coordinated Universal Time)" class="time" data-v-61fb5e44="">
                    2025-04-18
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-61fb5e44=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-61fb5e44=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-61fb5e44=""></circle></svg> <span class="views-count" data-v-61fb5e44="">
                    3,272
                  </span> <span class="read-time" data-v-61fb5e44=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-61fb5e44=""><rect width="16" height="16" fill="none" data-v-61fb5e44=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-61fb5e44=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-61fb5e44=""></path></svg>
                    阅读8分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-61fb5e44=""></div> <!----> <!----></div> <!----> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-61fb5e44=""><div class="article-viewer markdown-body result"><blockquote>
<p>前段时间面试字节，面试官对我的埋点项目比较感兴趣，聊着聊着突然来了一个问题（原话）：<strong>既然说到了这样一个叫做监控，其实有一个比较经典的 case 也想探讨一下，就是比如说你有在开发过程中，假如你的页面被反馈说白屏了，对吧？正常情况下你要去排查问题、解决问题，那我想让你就是简单的描述一下你会去怎么去做，就是把你要准备处理的过程也描述一下。</strong></p>
</blockquote>
<p>我的<strong>回答</strong>：有提到检查<code> DOM 挂载</code> / <code>网络请求状态</code> /<code> JS 执行错误</code>，但未覆盖<code>资源加载失败</code>、<code>CDN 异常</code> 等场景。虽然有简单了解过页面白屏相关的内容，不过还没在实习工作中遇到过这类问题，还是缺少了些系统性排查的思维，这篇文章就来总结学习一下。（先了解页面白屏原因 -&gt; 梳理一下排查思路 -&gt; 学习下如何在SDK中实现白屏检测）</p>
<h2 data-id="heading-0">一、先来总览一下，什么是页面白屏？</h2>
<ul>
<li>前端白屏是指用户打开网页时，页面未能正常加载或渲染，导致浏览器显示一片空白。</li>
<li>一般情况下 是由 JS执行错误 / 资源加载失败 / 网络问题 / 渲染逻辑错误 引起的。</li>
<li>在单页面应用中（SPA），前端白屏问题会变得更加复杂，可能导致用户无法看到任何有效内容。</li>
<li>而解决白屏问题的关键是：快速定位并修复错误，确保资源正确加载和渲染。</li>
</ul>
<blockquote>
<p>白屏问题本质上是浏览器渲染流水线的断裂，从 DNS 解析 -&gt; 资源加载 -&gt; JS 执行 -&gt; DOM 构建 -&gt; 渲染树生成 -&gt; 页面绘制的完整链路中，任一环节的异常都可能导致最终呈现的空白。</p>
</blockquote>
<h2 data-id="heading-1">二、再来系统性梳理一下排查思路</h2>
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/5ef1ef63fec04e8e9c5e2aa7fdbc3a0b~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTHVja3lmaWY=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1752329903&amp;x-signature=smfHBD6Dp6XZuMV%2FTC%2BXdOCVcHM%3D" alt="Luckyfif原创" width="100%" loading="lazy">
<p align="center">图为原创, 若需转载 可以备注出处✨</p>
<blockquote>
<p>看完这么复杂的排查流程, 来思考下一个页面白屏 真的值得如此认真对待吗? (问问那些大厂c端的大佬们就知道了)</p>
<p>用户体量越大, 页面白屏时间能带来的负面影响就越能呈现指数级增长, 比如说:</p>
<ul>
<li><strong>业务层面</strong>：电商场景下每增加1秒白屏时间转化率下降7%</li>
<li><strong>技术层面</strong>：可能引发雪崩效应（如 CDN 故障导致全站不可用）</li>
<li><strong>体验层面</strong>：用户留存率下降40%+</li>
</ul>
</blockquote>
<h3 data-id="heading-2">1. 第一阶段：快速定位问题层级</h3>
<h4 data-id="heading-3">浏览器控制台四步诊断法</h4>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// Step 1 - 检测文档加载阶段</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'DOMContentLoaded:'</span>, performance.<span class="hljs-property">timing</span>.<span class="hljs-property">domContentLoadedEventEnd</span> - performance.<span class="hljs-property">timing</span>.<span class="hljs-property">navigationStart</span>);
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'Load Event:'</span>, performance.<span class="hljs-property">timing</span>.<span class="hljs-property">loadEventEnd</span> - performance.<span class="hljs-property">timing</span>.<span class="hljs-property">navigationStart</span>);

<span class="hljs-comment">// Step 2 - 检查关键错误</span>
<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'error'</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'Global Error:'</span>, e.<span class="hljs-property">message</span>, e.<span class="hljs-property">filename</span>, e.<span class="hljs-property">lineno</span>);
}, <span class="hljs-literal">true</span>);

<span class="hljs-comment">// Step 3 - 验证 DOM 挂载点（React/Vue 重点）</span>
<span class="hljs-keyword">const</span> rootNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'root'</span>);
<span class="hljs-keyword">if</span> (!rootNode || rootNode.<span class="hljs-property">childNodes</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'挂载节点异常:'</span>, rootNode);
}

<span class="hljs-comment">// Step 4 - 网络状态检测</span>
<span class="hljs-title function_">fetch</span>(<span class="hljs-string">'/health-check'</span>).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'网络连通性异常:'</span>, e);
});
</code></pre>
<p><strong>典型问题场景</strong>：</p>
<ul>
<li>Vue/React 未捕获的初始化错误导致 root 节点为空</li>
<li>浏览器插件注入的脚本引发全局错误</li>
</ul>
<h3 data-id="heading-4">2. 第二阶段：网络层深度检测</h3>
<h4 data-id="heading-5">（1）关键资源瀑布流分析</h4>
<p>使用 Chrome DevTools 的&nbsp;<strong>Network 面板</strong>：</p>
<ol>
<li>
<p>过滤&nbsp;<code>JS|CSS|IMG</code>&nbsp;类型资源</p>
</li>
<li>
<p>检查关键资源的：</p>
<ul>
<li><strong>HTTP 状态码</strong>（重点 404/403/500）</li>
<li><strong>Timing 明细</strong>（TTFB 是否异常）</li>
</ul>
</li>
<li>
<p>右键资源 →&nbsp;<code>Copy as cURL</code>&nbsp;验证 CDN 可用性</p>
</li>
</ol>
<h4 data-id="heading-6">（2）CDN 故障专项排查</h4>
<pre><code class="hljs language-base" lang="base"># 多节点探测（需安装 httpie）
http https://cdn.example.com/main.js --verify=no \
  --headers \ 
  --proxy=http:http://1.1.1.1:8080 \  # 切换不同代理节点
  --download &gt; /dev/null

# DNS 污染检测
nslookup cdn.example.com 8.8.8.8   # 对比不同 DNS 结果
nslookup cdn.example.com 114.114.114.114
</code></pre>
<p><strong>经典案例</strong>：<br>
某站点因 CDN 节点未同步最新证书，导致部分用户浏览器拦截 HTTPS 请求引发白屏</p>
<h4 data-id="heading-7">（3）资源完整性校验（SRI 实战）</h4>
<pre><code class="hljs language-html" lang="html"><span class="hljs-comment">&lt;!-- 带 SRI 校验的资源加载 --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.example.com/react.production.min.js"</span> 
        <span class="hljs-attr">integrity</span>=<span class="hljs-string">"sha384-xxxx"</span>
        <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">"anonymous"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<p><strong>排查要点</strong>：</p>
<ul>
<li>控制台出现&nbsp;<code>Integrity checksum failed</code>&nbsp;错误</li>
<li>比对服务器资源 hash 值：</li>
</ul>
<pre><code class="hljs language-base" lang="base">openssl dgst -sha384 -binary react.production.min.js | openssl base64 -A
</code></pre>
<h3 data-id="heading-8">3. 第三阶段：渲染层故障定位</h3>
<h4 data-id="heading-9">（1）SPA 框架特有陷阱</h4>
<p><strong>Vue 场景</strong>：</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>({
  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)
}).$mount(<span class="hljs-string">'#app'</span>)  <span class="hljs-comment">// 若 #app 节点不存在，静默失败！</span>
</code></pre>
<p><strong>解决方案</strong>：</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> root = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'app'</span>);
<span class="hljs-keyword">if</span> (!root) {
  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">'容器丢失，降级显示基础内容'</span>); 
} <span class="hljs-keyword">else</span> {
  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>({ <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>) }).$mount(root);
}
</code></pre>
<p><strong>React 场景</strong>：</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 错误边界组件（捕获渲染层错误）</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">ErrorBoundary</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> {
  <span class="hljs-title function_">componentDidCatch</span>(<span class="hljs-params">error</span>) {
    <span class="hljs-title class_">Sentry</span>.<span class="hljs-title function_">captureException</span>(error);
    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-title function_">reload</span>();  <span class="hljs-comment">// 降级策略</span>
  }
  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) { <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">children</span>; }
}

<span class="hljs-comment">// 使用方式</span>
&lt;<span class="hljs-title class_">ErrorBoundary</span>&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>
&lt;/<span class="hljs-title class_">ErrorBoundary</span>&gt;
</code></pre>
<h4 data-id="heading-10">（2）CSS 渲染阻塞</h4>
<p><strong>检测方法</strong>：</p>
<ol>
<li>浏览器地址栏输入&nbsp;<code>about:blank</code>&nbsp;清空页面</li>
<li>逐步加载 CSS 文件，观察布局变化</li>
<li>检查&nbsp;<code>z-index</code>&nbsp;异常导致元素不可见</li>
</ol>
<p><strong>典型案例</strong>：<br>
某页面因&nbsp;<code>body { display: none !important; }</code>&nbsp;内联样式导致白屏</p>
<h3 data-id="heading-11">4. 第四阶段：性能维度深度分析</h3>
<h4 data-id="heading-12">（1）主线程阻塞检测</h4>
<p><strong>Long Tasks API</strong>：</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PerformanceObserver</span>(<span class="hljs-function"><span class="hljs-params">list</span> =&gt;</span> {
  list.<span class="hljs-title function_">getEntries</span>().<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">entry</span> =&gt;</span> {
    <span class="hljs-keyword">if</span> (entry.<span class="hljs-property">duration</span> &gt; <span class="hljs-number">50</span>) {
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">'主线程阻塞:'</span>, entry);
    }
  });
});
observer.<span class="hljs-title function_">observe</span>({ <span class="hljs-attr">entryTypes</span>: [<span class="hljs-string">'longtask'</span>] });
</code></pre>
<h4 data-id="heading-13">（2）内存泄漏追踪</h4>
<p><strong>Chrome Memory 面板操作</strong>：</p>
<ol>
<li>生成堆快照（Heap Snapshot）</li>
<li>筛选&nbsp;<code>Detached DOM tree</code>&nbsp;检查未释放节点</li>
<li>对比多次快照，查找持续增长的对象</li>
</ol>
<p><strong>典型案例</strong>：<br>
未销毁的 WebSocket 监听器持续累积导致内存溢出</p>
<h4 data-id="heading-14">（3）关键指标阈值</h4>





























<table><thead><tr><th>指标</th><th>警告阈值</th><th>严重阈值</th><th>测量工具</th></tr></thead><tbody><tr><td>FCP</td><td>&gt;2s</td><td>&gt;4s</td><td>Lighthouse</td></tr><tr><td>JS 总执行时间</td><td>&gt;3s</td><td>&gt;5s</td><td>Chrome Performance 面板</td></tr><tr><td>未压缩资源占比</td><td>&gt;30%</td><td>&gt;50%</td><td>Webpack Bundle Analyzer</td></tr></tbody></table>
<hr>
<h3 data-id="heading-15">5. 第五阶段：环境特异性问题</h3>
<h4 data-id="heading-16">（1）浏览器兼容性</h4>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 使用 Feature Detection 代替 UA 检测</span>
<span class="hljs-keyword">if</span> (!(<span class="hljs-string">'IntersectionObserver'</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>)) {
  <span class="hljs-title function_">loadPolyfill</span>(<span class="hljs-string">'intersection-observer'</span>).<span class="hljs-title function_">then</span>(initApp);
}
</code></pre>
<h4 data-id="heading-17">（2）运营商劫持检测</h4>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 检查页面是否被注入第三方脚本</span>
<span class="hljs-keyword">const</span> thirdPartyScripts = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">scripts</span>).<span class="hljs-title function_">filter</span>(
  <span class="hljs-function"><span class="hljs-params">s</span> =&gt;</span> !s.<span class="hljs-property">src</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">hostname</span>)
);
<span class="hljs-keyword">if</span> (thirdPartyScripts.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) {
  <span class="hljs-title function_">reportException</span>(<span class="hljs-string">'运营商劫持'</span>, thirdPartyScripts);
}
</code></pre>
<h4 data-id="heading-18">（3）本地环境干扰</h4>
<ul>
<li>禁用所有浏览器插件（尤其是广告拦截器）</li>
<li>清除&nbsp;<code>Service Worker</code>&nbsp;缓存：</li>
</ul>
<pre><code class="hljs language-js" lang="js">navigator.<span class="hljs-property">serviceWorker</span>.<span class="hljs-title function_">getRegistrations</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">regs</span> =&gt;</span> {
  regs.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">reg</span> =&gt;</span> reg.<span class="hljs-title function_">unregister</span>())
})
</code></pre>
<h4 data-id="heading-19">（4）兜底策略</h4>
<ul>
<li>用户操作视频录制（接入rrweb等工具, 大公司监控体系下一般都有用到, 没有用上的建议也可以加上）</li>
<li>特定设备远程调试（使用Chrome Remote Debugging）</li>
</ul>
<h2 data-id="heading-20">三、白屏检测 SDK  要怎么写?</h2>
<blockquote>
<p>这里就给大家放部分最近写的代码, 主要用的是<code>动态检测根节点</code>+<code>黄金比例采样算法</code>+<code>采样点检测</code>三种方法来检测白屏情况, 感兴趣的也可以去我的代码仓库看下完整的代码 - <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FMzz2022%2FByteTop" target="_blank" title="https://github.com/Mzz2022/ByteTop" ref="nofollow noopener noreferrer">ByteTop - 轻量级Web端埋点监控平台</a></p>
</blockquote>
<h3 data-id="heading-21">核心代码</h3>
<h4 data-id="heading-22">1. 智能根节点检测</h4>
<pre><code class="hljs language-typescript" lang="typescript"><span class="hljs-keyword">const</span> rootSelectors = [<span class="hljs-string">"#root"</span>, <span class="hljs-string">"#app"</span>, <span class="hljs-string">"#main"</span>, <span class="hljs-string">"#container"</span>];
<span class="hljs-keyword">const</span> rootNode = rootSelectors.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">selector</span> =&gt;</span> 
  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(selector)
) || <span class="hljs-string">"body"</span>;
<span class="hljs-keyword">const</span> wrapperSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">"html"</span>, <span class="hljs-string">"body"</span>, rootNode.<span class="hljs-title function_">toLowerCase</span>()]);
</code></pre>
<ul>
<li><strong>策略</strong>：优先级遍历常见框架挂载点选择器（#root → #app → #main → ...）</li>
<li><strong>降级</strong>：未匹配时自动降级到 body 元素</li>
<li><strong>优化</strong>：使用 Set 数据结构实现 O(1) 复杂度查询</li>
</ul>
<h4 data-id="heading-23">2. 黄金比例采样算法</h4>
<pre><code class="hljs language-typescript" lang="typescript"><span class="hljs-keyword">const</span> goldenRatio = <span class="hljs-number">0.618</span>;
<span class="hljs-keyword">const</span> points = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>({ <span class="hljs-attr">length</span>: config.<span class="hljs-property">sampleCount</span> }, <span class="hljs-function">(<span class="hljs-params">_, i</span>) =&gt;</span> ({
  <span class="hljs-attr">x</span>: i % <span class="hljs-number">2</span> === <span class="hljs-number">0</span> 
    ? <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> * goldenRatio * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()
    : <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> - <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> * goldenRatio * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(),
  <span class="hljs-attr">y</span>: <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span> * goldenRatio * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()
}));
</code></pre>
<ul>
<li><strong>视觉聚焦</strong>：61.8% 区域密集采样，符合人类视觉焦点分布规律</li>
<li><strong>抗对称干扰</strong>：通过奇偶索引实现左右镜像分布，破解居中布局误判</li>
<li><strong>随机扰动</strong>：在黄金比例区域内引入随机坐标，避免固定路径采样</li>
</ul>
<h4 data-id="heading-24">3. 复合特征检测</h4>
<pre><code class="hljs language-typescript" lang="typescript"><span class="hljs-keyword">const</span> identifiers = [
  element.<span class="hljs-property">tagName</span>.<span class="hljs-title function_">toLowerCase</span>(),          <span class="hljs-comment">// 标签特征</span>
  element.<span class="hljs-property">id</span> ? <span class="hljs-string">`#<span class="hljs-subst">${element.id}</span>`</span> : <span class="hljs-string">""</span>,    <span class="hljs-comment">// ID 特征</span>
  ...<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(element.<span class="hljs-property">classList</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">c</span> =&gt;</span> <span class="hljs-string">`.<span class="hljs-subst">${c}</span>`</span>) <span class="hljs-comment">// 类名特征</span>
];

<span class="hljs-keyword">if</span> (identifiers.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">id</span> =&gt;</span> wrapperSet.<span class="hljs-title function_">has</span>(id))) {
  emptyCount++;
}
</code></pre>
<ul>
<li><strong>三级特征提取</strong>：标签名、ID、类名全方位标识元素</li>
<li><strong>动态类名支持</strong>：兼容 CSS Modules 等哈希类名场景</li>
<li><strong>高效匹配</strong>：Set 数据结构实现快速特征比对</li>
</ul>
<h4 data-id="heading-25">4. 动态阈值策略</h4>
<pre><code class="hljs language-typescript" lang="typescript"><span class="hljs-keyword">return</span> emptyCount / config.<span class="hljs-property">sampleCount</span> &gt;= config.<span class="hljs-property">threshold</span>;
</code></pre>
<ul>
<li><strong>比例控制</strong>：通过阈值参数控制误报率与漏报率的平衡</li>
<li><strong>场景适配</strong>：移动端推荐 0.7-0.8，PC 端推荐 0.8-0.9</li>
<li><strong>动态感知</strong>：根据设备类型自动调节阈值（需扩展实现）</li>
</ul>
<h3 data-id="heading-26">完整代码</h3>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">CheckWhiteScreenOptions</span> {
&nbsp; <span class="hljs-comment">/** 采样点数量 (默认: 20) */</span>
&nbsp; sampleCount?: <span class="hljs-built_in">number</span>;
&nbsp; <span class="hljs-comment">/** 空白点判定阈值 (0-1, 默认 0.8) */</span>
&nbsp; threshold?: <span class="hljs-built_in">number</span>;
&nbsp; <span class="hljs-comment">/** 排除的骨架屏类名 (默认: 'skeleton') */</span>
&nbsp; skeletonClass?: <span class="hljs-built_in">string</span>;
}
<span class="hljs-keyword">const</span> checkWhiteScreen = (options?: <span class="hljs-title class_">CheckWhiteScreenOptions</span>): <span class="hljs-function"><span class="hljs-params">boolean</span> =&gt;</span> {
&nbsp; <span class="hljs-keyword">const</span> config = {
&nbsp; &nbsp; <span class="hljs-attr">sampleCount</span>: <span class="hljs-number">20</span>,
&nbsp; &nbsp; <span class="hljs-attr">threshold</span>: <span class="hljs-number">0.8</span>,
&nbsp; &nbsp; <span class="hljs-attr">skeletonClass</span>: <span class="hljs-string">"skeleton"</span>,
&nbsp; &nbsp; ...options,
&nbsp; };
&nbsp; <span class="hljs-keyword">try</span> {
&nbsp; &nbsp; <span class="hljs-comment">// 1. 排除骨架屏场景</span>
&nbsp; &nbsp; <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(config.<span class="hljs-property">skeletonClass</span>).<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) {
&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
&nbsp; &nbsp; }  

&nbsp; &nbsp; <span class="hljs-comment">// 2. 动态检测根节点</span>
&nbsp; &nbsp; <span class="hljs-keyword">const</span> rootSelectors = [<span class="hljs-string">"#root"</span>, <span class="hljs-string">"#app"</span>, <span class="hljs-string">"#main"</span>, <span class="hljs-string">"#container"</span>];
&nbsp; &nbsp; <span class="hljs-keyword">const</span> rootNode =
&nbsp; &nbsp; &nbsp; rootSelectors.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">selector</span>) =&gt;</span> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(selector)) ||
&nbsp; &nbsp; &nbsp; <span class="hljs-string">"body"</span>;
&nbsp; &nbsp; <span class="hljs-keyword">const</span> wrapperSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">"html"</span>, <span class="hljs-string">"body"</span>, rootNode.<span class="hljs-title function_">toLowerCase</span>()]);
    
&nbsp; &nbsp; <span class="hljs-comment">// 3. 黄金比例采样算法</span>
&nbsp; &nbsp; <span class="hljs-keyword">const</span> goldenRatio = <span class="hljs-number">0.618</span>;
&nbsp; &nbsp; <span class="hljs-keyword">const</span> points = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>({ <span class="hljs-attr">length</span>: config.<span class="hljs-property">sampleCount</span> }, <span class="hljs-function">(<span class="hljs-params">_, i</span>) =&gt;</span> ({
&nbsp; &nbsp; &nbsp; <span class="hljs-attr">x</span>:
&nbsp; &nbsp; &nbsp; &nbsp; i % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ? <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> * goldenRatio * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> - <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> * goldenRatio * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(),
&nbsp; &nbsp; &nbsp; <span class="hljs-attr">y</span>: <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span> * goldenRatio * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(),
&nbsp; &nbsp; }));  

&nbsp; &nbsp; <span class="hljs-comment">// 4. 采样点检测</span>
&nbsp; &nbsp; <span class="hljs-keyword">let</span> emptyCount = <span class="hljs-number">0</span>;
&nbsp; &nbsp; points.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">point</span>) =&gt;</span> {
&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">const</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">elementFromPoint</span>(point.<span class="hljs-property">x</span>, point.<span class="hljs-property">y</span>);
&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (!element) {
&nbsp; &nbsp; &nbsp; &nbsp; emptyCount++;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">return</span>;
&nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">const</span> identifiers = [
&nbsp; &nbsp; &nbsp; &nbsp; element.<span class="hljs-property">tagName</span>.<span class="hljs-title function_">toLowerCase</span>(),
&nbsp; &nbsp; &nbsp; &nbsp; element.<span class="hljs-property">id</span> ? <span class="hljs-string">`#<span class="hljs-subst">${element.id}</span>`</span> : <span class="hljs-string">""</span>,
&nbsp; &nbsp; &nbsp; &nbsp; ...<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(element.<span class="hljs-property">classList</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> <span class="hljs-string">`.<span class="hljs-subst">${c}</span>`</span>),
&nbsp; &nbsp; &nbsp; ];
&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (identifiers.<span class="hljs-title function_">some</span>(<span class="hljs-function">(<span class="hljs-params">id</span>) =&gt;</span> wrapperSet.<span class="hljs-title function_">has</span>(id))) {
&nbsp; &nbsp; &nbsp; &nbsp; emptyCount++;
&nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; });
&nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"emptyCount"</span>, emptyCount, <span class="hljs-string">" config:"</span>, config);
    
&nbsp; &nbsp; <span class="hljs-comment">// 5. 阈值判断</span>
&nbsp; &nbsp; <span class="hljs-keyword">return</span> emptyCount / config.<span class="hljs-property">sampleCount</span> &gt;= config.<span class="hljs-property">threshold</span>;
&nbsp; } <span class="hljs-keyword">catch</span> (e) {
&nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">"[白屏检测异常]"</span>, e);
&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
&nbsp; }
};

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> checkWhiteScreen;
<span class="hljs-comment">// // 自定义配置</span>
<span class="hljs-comment">// const isWhite = checkWhiteScreen({</span>
<span class="hljs-comment">// &nbsp; sampleCount: 30,</span>
<span class="hljs-comment">// &nbsp; threshold: 0.75,</span>
<span class="hljs-comment">// &nbsp; skeletonClass: 'loading-skeleton'</span>
<span class="hljs-comment">// });</span>

<span class="hljs-comment">// // 移动端适配配置</span>

<span class="hljs-comment">// checkWhiteScreen({</span>
<span class="hljs-comment">// &nbsp; sampleCount: 15, &nbsp;// 减少采样点</span>
<span class="hljs-comment">// &nbsp; threshold: 0.7 &nbsp; &nbsp;// 降低阈值</span>
<span class="hljs-comment">// });</span>

<span class="hljs-comment">// // 后台管理系统</span>
<span class="hljs-comment">// checkWhiteScreen({</span>
<span class="hljs-comment">// &nbsp; skeletonClass: 'ant-skeleton' // 匹配UI框架</span>
<span class="hljs-comment">// });</span>

<span class="hljs-comment">// // 高精度检测</span>
<span class="hljs-comment">// checkWhiteScreen({</span>
<span class="hljs-comment">// &nbsp; sampleCount: 50, &nbsp;// 增加采样密度</span>
<span class="hljs-comment">// &nbsp; threshold: 0.9 &nbsp; &nbsp;// 严格判定</span>
<span class="hljs-comment">// });</span>
</code></pre>
<hr>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f1c8c390352d43d1a973914ab6d42b36~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTHVja3lmaWY=:q75.awebp?rk3s=f64ab15b&amp;x-expires=1752329903&amp;x-signature=EhVIG5OKiVcNivkG2yNgIp8cXE8%3D" alt="图片.png" loading="lazy"></p>
<p align="center">这里的上报功能是其他代码实现的, 都放在<a title="" ref="nofollow noopener noreferrer" href="https://link.juejin.cn?target="> github</a> 里面了😊</p>
<h2 data-id="heading-27">总结</h2>
<blockquote>
<p>终于写完了, 最后的最后, 我这里想说: 从一月份开始做埋点监控相关的项目, 很难但也很有意思, 边实习边抽空做自己的项目, 好在面试过程中这个项目也为我加了很多分, 大家感兴趣的话可以去点个star(<del>虽然目前是开源的, 但不确定后续会不会短暂闭源, 点了star就可以获得永久保存下来</del>), 后续还会利用空闲时间继续完善( 自建服务端+可视化分析平台+SDK ) <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FMzz2022%2FByteTop" target="_blank" title="https://github.com/Mzz2022/ByteTop" ref="nofollow noopener noreferrer">ByteTop - 轻量级Web端埋点监控平台</a> <del>名字瞎起的, 还请大佬们勿喷😭</del></p>
</blockquote></div></div>