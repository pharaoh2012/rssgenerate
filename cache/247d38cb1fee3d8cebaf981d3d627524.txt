
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/tjyoung/p/18853887" title="发布于 2025-04-29 15:57">
    <span role="heading" aria-level="2">【大前端攻城狮之路】用 Typewriter-SSE 实现打字机效果</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>在现代 Web 开发中，实现动态文本渲染的需求日益增多。无论是聊天应用、实时通知，还是交互式界面，打字机风格的文本渲染都能显著提升用户体验。最近新写了一个开源的 NPM 包——Typewriter-SSE，它通过 Server-Sent Events (SSE) 技术实现了流式文本传输和打字机效果渲染。项目代码已开源，可在 <a href="https://github.com/TJ666/typewriter-sse" rel="noopener nofollow" target="_blank" data-v-16354e31="">GitHub</a> 查看。效果见：</p>
<p><img src="https://img2024.cnblogs.com/blog/908144/202504/908144-20250429155644256-1145531194.gif" alt=""></p>
<h2>一、SSE 技术简介</h2>
<div class="paragraph">Server-Sent Events (SSE) 是一种允许服务器向浏览器单向推送数据的技术。与传统的轮询或 WebSocket 不同，SSE 基于 HTTP 协议，仅支持文本数据传输，且服务器到客户端的连接保持开启状态，直到服务器关闭连接。SSE 的主要特点包括：</div>
<ol start="1">
<li>
<div class="paragraph"><span>单向通信：仅支持服务器向客户端推送数据，适合不需要双向通信的场景。</span></div>
</li>
<li>
<div class="paragraph"><span>轻量级：基于 HTTP 协议，无需额外的 WebSocket 协议支持。</span></div>
</li>
<li>
<div class="paragraph"><span>自动重连：浏览器会自动处理连接中断后的重连逻辑。</span></div>
</li>
<li>
<div class="paragraph"><span>简单易用：通过 <code class="segment-code-inline" data-v-30467974="" data-v-16354e31="">EventSource</code> 接口即可在客户端实现 SSE 的接收。</span></div>
</li>
</ol>
<div class="paragraph">SSE 的典型应用场景包括实时通知、动态数据更新等，尤其适合需要服务器主动推送数据的场景。</div>
<div class="paragraph">&nbsp;</div>
<div class="paragraph">
<h2>Typewriter-SSE 的实现原理</h2>
<div class="paragraph">Typewriter-SSE 结合了 SSE 技术和前端动画，实现了流式文本的打字机效果渲染。其核心逻辑包括：</div>
<ol start="1">
<li>
<div class="paragraph"><span>SSE 数据接收：通过 <code class="segment-code-inline" data-v-30467974="" data-v-16354e31="">EventSource</code> 接口连接到服务器端的 SSE 端点，接收服务器推送的文本数据。</span></div>
</li>
<li>
<div class="paragraph"><span>逐字渲染：将接收到的文本数据逐字渲染到指定的容器中，通过定时器控制每个字符的渲染速度，模拟打字机效果。</span></div>
</li>
<li>
<div class="paragraph"><span>光标动画：通过 CSS 动画实现光标的闪烁效果，增强视觉体验。</span></div>
</li>
<li>
<div class="paragraph"><span>交互控制：提供暂停、恢复、跳过和清空等控制方法，允许用户在渲染过程中进行操作</span></div>
</li>
</ol></div>
<h2>二、如何安装和使用 Typewriter-SSE？</h2>
<div class="paragraph">安装 Typewriter-SSE 非常简单，只需要通过 npm 命令即可完成：</div>
<div class="paragraph">
<div class="cnblogs_Highlighter">
<pre class="brush:javascript;gutter:true;">npm install typewriter-sse　
</pre>
</div>
<p>&nbsp;</p>
<p>在项目中使用</p>
<div class="cnblogs_Highlighter">
<pre class="brush:javascript;gutter:true;">import TypewriterSSE from 'typewriter-sse';

const writer = new TypewriterSSE({
  container: '#output', // 指定文本渲染的容器
  endpoint: '/sse?q=hello world', // SSE 服务端的 URL
  cursor: {
    blink: true, // 是否让光标闪烁
    color: '#0f0', // 光标颜色
    char: '|' // 光标字符
  },
  onComplete: () =&gt; console.log('Finished typing!') // 文本渲染完成后的回调函数
});

writer.start();
</pre>
</div>
<p>　　</p>
<h2>三、主要功能和配置选项</h2>
<h3>1.&nbsp;<span>打字机效果</span></h3>
<div class="paragraph">Typewriter-SSE 的核心功能是将文本逐字渲染到指定的容器中，模拟打字机的效果。你可以通过 <code class="segment-code-inline" data-v-30467974="" data-v-16354e31="">typingSpeed</code> 选项来控制每个字符的延迟时间，从而调整打字的速度。</div>
<h3>2.&nbsp;<span>SSE 支持</span></h3>
<div class="paragraph">通过 SSE 技术，Typewriter-SSE 能够动态接收来自服务器的文本数据。这意味着你可以将文本分段发送到客户端，而客户端会逐字渲染这些文本。这种技术特别适合实现聊天机器人、实时通知等场景。</div>
<h3>3.&nbsp;<span>光标自定义</span></h3>
<div class="paragraph">你可以通过 <code class="segment-code-inline" data-v-30467974="" data-v-16354e31="">cursor</code> 选项来自定义光标的样式，包括是否闪烁、颜色和字符。这让你可以根据项目的整体风格来调整光标的视觉效果。</div>
<h3>4.&nbsp;<span>事件回调</span></h3>
<div class="paragraph">Typewriter-SSE 提供了多种事件回调函数，例如 <code class="segment-code-inline" data-v-30467974="" data-v-16354e31="">onChar</code>（每个字符渲染时触发）和 <code class="segment-code-inline" data-v-30467974="" data-v-16354e31="">onComplete</code>（文本渲染完成时触发）。这些回调函数可以帮助你更好地控制文本渲染过程，并在合适的时候执行其他逻辑。</div>
<h3>5.&nbsp;<span>暂停、恢复、跳过和清空</span></h3>
<div class="paragraph">Typewriter-SSE 提供了暂停、恢复、跳过和清空文本的控制方法。你可以通过这些方法来实现更复杂的交互逻辑，例如让用户暂停文本渲染、跳过未渲染的文本或清空已渲染的文本。</div>
<div class="paragraph">&nbsp;</div>
<div class="paragraph">&nbsp;</div>
<div class="paragraph">
<h2>四、一个完整的示例</h2>
<div class="paragraph">为了让大家更好地理解 Typewriter-SSE 的使用方法，我将展示一个完整的示例。这个示例包括一个简单的服务器端代码和一个客户端页面，用于演示 Typewriter-SSE 的效果。</div>
<h3>1.&nbsp;<span>服务器端代码</span></h3>
<div class="paragraph">这是一个基于 Node.js 的简单服务器代码，它通过 SSE 技术向客户端发送分段的文本数据。</div>
<div class="paragraph">
<div class="cnblogs_Highlighter">
<pre class="brush:javascript;gutter:true;">const express = require('express');
const path = require('path');
const app = express();
const PORT = 3000;

app.use(express.static(path.join(__dirname, 'public')));

app.get('/sse', (req, res) =&gt; {
    res.setHeader('Content-Type', 'text/event-stream');
    res.setHeader('Cache-Control', 'no-cache');
    res.setHeader('Connection', 'keep-alive');

    const query = req.query.q || "你没有输入任何内容哦～";

    const paragraphs = [
        `你输入的是「${query}」`,
        `这是段模拟的第一个回复 🌟`,
        `接下来是第二段回复 🚀`,
        `最后一段啦，演示完毕 🏁`
    ];

    let pIndex = 0;
    let charIndex = 0;

    const interval = setInterval(() =&gt; {
        if (pIndex &lt; paragraphs.length) {
            if (charIndex &lt; paragraphs[pIndex].length) {
                res.write(`data: ${paragraphs[pIndex][charIndex++]}\n\n`);
            } else {
                res.write(`data: \n\n`); // 空行分段
                pIndex++;
                charIndex = 0;
            }
        } else {
            clearInterval(interval);
            res.write('event: done\n');
            res.write('data: end\n\n');
            res.end();
        }
    }, 50);
});

app.listen(PORT, () =&gt; {
    console.log(`Server running at http://localhost:${PORT}`);
});
</pre>
</div>
<p>　　</p>
<h3>2.&nbsp;<span>客户端页面</span></h3>
<div class="paragraph">这是一个简单的 HTML 页面，它使用 Typewriter-SSE 来渲染来自服务器的文本数据。</div>
<div class="paragraph">
<div class="cnblogs_Highlighter">
<pre class="brush:javascript;gutter:true;">&lt;!DOCTYPE html&gt;
&lt;html lang="zh"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;打字机 + SSE + 控制面板&lt;/title&gt;
    &lt;style&gt;
        body {
            background: #111;
            color: #0f0;
            font-family: monospace;
            padding: 20px;
        }
        #output {
            white-space: pre-wrap;
            font-size: 1.2em;
            min-height: 100px;
            margin-top: 1em;
        }
        input[type="text"], button {
            padding: 8px;
            font-size: 1em;
            margin: 5px 5px 5px 0;
            background: #222;
            color: #0f0;
            border: 1px solid #0f0;
        }
        .controls {
            margin-top: 10px;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;

    &lt;h2&gt;打字机效果演示&lt;/h2&gt;
    &lt;input type="text" id="prompt" placeholder="请输入..." /&gt;
    &lt;div class="controls"&gt;
        &lt;button id="send"&gt;发送&lt;/button&gt;
        &lt;button id="pause"&gt;暂停&lt;/button&gt;
        &lt;button id="resume"&gt;继续&lt;/button&gt;
        &lt;button id="skip"&gt;跳过&lt;/button&gt;
        &lt;button id="delete"&gt;清空输出&lt;/button&gt;
    &lt;/div&gt;
    &lt;div id="output"&gt;&lt;/div&gt;

    &lt;script type="module"&gt;
        import TypewriterSSE from './typewriter-sse.js';

        let writer = null;

        document.getElementById('send').addEventListener('click', () =&gt; {
            const query = document.getElementById('prompt').value.trim();
            if (!query) return alert('请输入内容');
            if (writer) writer.stop();

            const output = document.getElementById('output');
            output.textContent = "";

            writer = new TypewriterSSE({
                container: output,
                endpoint: '/sse?q=' + encodeURIComponent(query),
                cursor: { blink: true, color: '#0f0', char: '|' },
                onComplete: () =&gt; console.log('输入完成')
            });
            writer.start();
        });

        document.getElementById('pause').addEventListener('click', () =&gt; {
            if (writer) writer.pause();
        });

        document.getElementById('resume').addEventListener('click', () =&gt; {
            if (writer) writer.resume();
        });

        document.getElementById('skip').addEventListener('click', () =&gt; {
            if (writer) writer.skip();
        });

        document.getElementById('delete').addEventListener('click', () =&gt; {
            if (writer) writer.deleteAll();
        });
    &lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</pre>
</div>
<p>　　</p>
<h2>总结</h2>
<div class="paragraph">Typewriter-SSE 是一个基于 SSE 技术实现的流式文本渲染库，能够为 Web 应用带来动态的打字机效果。它不仅支持流式文本传输，还提供了丰富的交互控制功能。如果你对 Typewriter-SSE 感兴趣，或者希望了解更多实现细节，欢迎访问 <a href="https://github.com/TJ666/typewriter-sse" rel="noopener nofollow" target="_blank" data-v-16354e31="">GitHub 仓库</a>。</div>
</div>
</div>
</div>
<p>&nbsp;</p>
</div>
</div>
<div id="MySignature" role="contentinfo">
    少壮不努力，长大像毛利~
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.01744865705439815" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-29 15:58">2025-04-29 15:57</span>&nbsp;
<a href="https://www.cnblogs.com/tjyoung">TJYoung</a>&nbsp;
阅读(<span id="post_view_count">18</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18853887);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18853887', targetLink: 'https://www.cnblogs.com/tjyoung/p/18853887', title: '【大前端攻城狮之路】用 Typewriter-SSE 实现打字机效果' })">举报</a>
</div>
        