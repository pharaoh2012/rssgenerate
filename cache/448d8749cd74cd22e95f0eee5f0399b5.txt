
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/eventhorizon/p/18994830" title="发布于 2025-07-20 23:16">
    <span role="heading" aria-level="2">在 .NET 中使用内存映射文件构建高性能的进程间通信队列</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p></p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#前言" rel="noopener nofollow">前言</a></li><li><a href="#什么是内存映射文件memory-mapped-file" rel="noopener nofollow">什么是内存映射文件（Memory-Mapped File）</a></li><li><a href="#如何在-net-中使用-mmf" rel="noopener nofollow">如何在 .NET 中使用 MMF</a><ul><li><a href="#创建内存映射文件" rel="noopener nofollow">创建内存映射文件</a></li><li><a href="#使用-memorymappedviewaccessor-来直接读写结构体数据" rel="noopener nofollow">使用 MemoryMappedViewAccessor 来直接读写结构体数据</a></li><li><a href="#使用-memorymappedviewstream-来读写数据" rel="noopener nofollow">使用 MemoryMappedViewStream 来读写数据</a></li></ul></li><li><a href="#使用-mmf-构建高性能的进程间通信队列" rel="noopener nofollow">使用 MMF 构建高性能的进程间通信队列</a><ul><li><a href="#仅支持结构体序列化反序列化的内存映射文件队列" rel="noopener nofollow">仅支持结构体序列化反序列化的内存映射文件队列</a><ul><li><a href="#设计概述" rel="noopener nofollow">设计概述</a></li><li><a href="#存储目录" rel="noopener nofollow">存储目录</a></li><li><a href="#使用示例" rel="noopener nofollow">使用示例</a><ul><li><a href="#配置选项mappedfilequeueoptions" rel="noopener nofollow">配置选项（MappedFileQueueOptions）</a></li><li><a href="#生产和消费数据" rel="noopener nofollow">生产和消费数据</a></li></ul></li></ul></li><li><a href="#支持任意类型序列化反序列化的内存映射文件队列" rel="noopener nofollow">支持任意类型序列化反序列化的内存映射文件队列</a><ul><li><a href="#设计概述-1" rel="noopener nofollow">设计概述</a></li><li><a href="#使用示例-1" rel="noopener nofollow">使用示例</a><ul><li><a href="#配置选项mappedfilequeueoptions-1" rel="noopener nofollow">配置选项（MappedFileQueueOptions）</a></li><li><a href="#生产和消费数据-1" rel="noopener nofollow">生产和消费数据</a></li></ul></li></ul></li></ul></li><li><a href="#benchmark" rel="noopener nofollow">Benchmark</a></li><li><a href="#总结" rel="noopener nofollow">总结</a></li></ul></div><p></p>
<h1 id="前言">前言</h1>
<p>本文会先介绍内存映射文件（Memory-Mapped File）的基本概念，如何在 .NET 中使用，然后再介绍如何使用这两种实现来构建高性能的进程间通信队列。</p>
<p>文中的示例代码为了简化，是在单进程中进行的，但实际使用时可以在多个进程间共享内存映射文件。</p>
<p>笔者按使用场景的不同写了两套不一样的开源实现：</p>
<p><strong>1. 只支持结构体序列化反序列化的内存映射文件队列：</strong></p>
<p>Github：<a href="https://github.com/eventhorizon-cli/MappedFileQueues" target="_blank" rel="noopener nofollow">https://github.com/eventhorizon-cli/MappedFileQueues</a></p>
<p>nuget：<a href="https://www.nuget.org/packages/MappedFileQueues" target="_blank" rel="noopener nofollow">https://www.nuget.org/packages/MappedFileQueues</a></p>
<p>该实现会直接将结构体的内存数据复制到 MMF 中，适用于需要高性能的场景，但因此不支持不定长的数据结构。</p>
<p>如果有和其他语言（如 C/C++）的交互需求，建议手动指定结构体的内存布局（使用 <code>StructLayout</code> 特性），以确保跨语言的兼容性。</p>
<p>可以参考我的这篇文章《<a href="https://www.cnblogs.com/eventhorizon/p/18913041" target="_blank">理解 .NET 结构体字段的内存布局</a>》来了解如何指定结构体的内存布局。</p>
<p><strong>2. 支持任意类型序列化的内存映射文件队列：</strong></p>
<p>Github：<a href="https://github.com/eventhorizon-cli/MappedFileQueues.Stream" target="_blank" rel="noopener nofollow">https://github.com/eventhorizon-cli/MappedFileQueues.Stream</a></p>
<p>nuget：<a href="https://www.nuget.org/packages/MappedFileQueues.Stream" target="_blank" rel="noopener nofollow">https://www.nuget.org/packages/MappedFileQueues.Stream</a></p>
<p>该实现支持自定义类型的序列化，需要自己实现序列化和反序列化逻辑，性能上略低于第一种实现，但支持更复杂的数据结构。</p>
<h1 id="什么是内存映射文件memory-mapped-file">什么是内存映射文件（Memory-Mapped File）</h1>
<p>内存映射文件（Memory-Mapped File），下文简称 MMF，是一种将文件映射到进程的虚拟地址空间的技术。通过它可以实现高效的文件读写，且可以在多个进程间共享内存数据。</p>
<p><img src="https://img2024.cnblogs.com/blog/1201123/202507/1201123-20250720231433730-1666797546.png" alt="" loading="lazy"></p>
<p>通过内存映射（例如 UNIX/Linux 的 mmap 系统调用），进程可以直接访问映射的内存区域，像操作普通内存一样操作文件内容。这种方式显著减少了内核与用户空间之间的数据拷贝，属于零拷贝（Zero-Copy）技术的一种。</p>
<p><strong>在内存映射时，即使映射了一个文件，操作系统也不会立即将整个文件加载到内存中，而是根据需要按页（通常为 4KB）加载。这种按需加载的方式使得 MMF 在处理大文件时非常高效。</strong></p>
<p>在一些消息队列的实现中，例如 Kafka、Rocket MQ 等，都使用了 MMF 来实现数据的高吞吐量传输。</p>
<h1 id="如何在-net-中使用-mmf">如何在 .NET 中使用 MMF</h1>
<h2 id="创建内存映射文件">创建内存映射文件</h2>
<p>在 .NET 中，可以使用 <code>System.IO.MemoryMappedFiles</code> 命名空间提供的 <code>MemoryMappedFile</code> 类来创建和操作内存映射文件。</p>
<p><code>MemoryMappedFile</code> 类提供了多种方法来创建内存映射文件，包括：</p>
<ul>
<li><code>CreateNew</code>：创建一个新的内存映射文件。</li>
<li><code>CreateOrOpen</code>：创建一个新的内存映射文件或打开一个已存在的内存映射文件。</li>
<li><code>OpenExisting</code>：打开一个已存在的内存映射文件。</li>
<li><code>CreateFromFile</code>：从一个文件创建内存映射文件。</li>
</ul>
<p>其中 <code>CreateFromFile</code> 方法能够自定义的参数最多且各平台兼容性最好。本文将使用 <code>CreateFromFile</code> 方法来创建内存映射文件。</p>
<p>其方法签名如下：</p>
<pre><code class="language-csharp">public static MemoryMappedFile CreateFromFile(
    FileStream fileStream,
    string? mapName,
    long capacity,
    MemoryMappedFileAccess access,
    HandleInheritability inheritability,
    bool leaveOpen)
</code></pre>
<p>各参数的含义如下：</p>
<ul>
<li><code>fileStream</code>：要映射的文件流。</li>
<li><code>mapName</code>：映射的名称，可以为 <code>null</code>。在多个进程间共享内存映射文件时，可以指定一个名称来标识该映射。但在某些平台上可能不支持命名映射，例如 macOS。</li>
<li><code>capacity</code>：内存映射文件的最大容量，单位为字节。如果设置为 0，则表示取决于 <code>fileStream</code> 所指向的文件大小。</li>
<li><code>access</code>：映射的访问权限，使用 <code>MemoryMappedFileAccess</code> 枚举来指定。</li>
<li><code>inheritability</code>：句柄的继承性，使用 <code>HandleInheritability</code> 枚举来指定。</li>
<li><code>leaveOpen</code>：是否在创建后保持文件流打开。</li>
</ul>
<p>我们使用下面这个构造函数来创建 <code>FileStream</code>：</p>
<pre><code class="language-csharp">public FileStream(string path, FileMode mode, FileAccess access, FileShare share)
</code></pre>
<p>各参数的含义如下：</p>
<ul>
<li><code>path</code>：要映射的文件路径。</li>
<li><code>mode</code>：文件的打开模式，使用 <code>FileMode</code> 枚举来指定。如果文件不存在，可以使用 <code>FileMode.OpenOrCreate</code> 来创建新文件。</li>
<li><code>access</code>：文件的访问权限，使用 <code>FileAccess</code> 枚举来指定。例如 <code>FileAccess.ReadWrite</code> 表示允许读写该文件。</li>
<li><code>share</code>：文件的共享模式，使用 <code>FileShare</code> 枚举来指定。例如 <code>FileShare.ReadWrite</code> 表示允许其他进程同时读写该文件。</li>
</ul>
<pre><code class="language-csharp">using System.IO.MemoryMappedFiles;

// 创建内存映射文件
var fileName = "example.mmf";

var fileStream = new FileStream(fileName, FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite);


var mmf = MemoryMappedFile.CreateFromFile(
    fileStream,
    mapName: null,
    capacity: 1024 * 1024, // 1 MB
    access: MemoryMappedFileAccess.ReadWrite,
    inheritability: HandleInheritability.None,
    leaveOpen: true);
</code></pre>
<p>这边我们并不需要担心文件如果太大了会导致内存不足的问题，因为 MMF 是按需加载的，只有在实际访问时才会将数据加载到内存中。</p>
<p>下面我们有两种方式来读写 MMF 中的数据：</p>
<ol>
<li>使用 <code>MemoryMappedViewAccessor</code> 来直接读写结构体数据。</li>
<li>使用 <code>MemoryMappedViewStream</code> 来读写数据。</li>
</ol>
<h2 id="使用-memorymappedviewaccessor-来直接读写结构体数据">使用 MemoryMappedViewAccessor 来直接读写结构体数据</h2>
<p><code>MemoryMappedFile</code> 类提供了 <code>CreateViewAccessor</code> 方法，可以创建一个视图访问器（<code>MemoryMappedViewAccessor</code>），用于直接读写内存映射文件中的数据。</p>
<pre><code class="language-csharp">public class MemoryMappedFile : IDisposable
{
    public MemoryMappedViewAccessor CreateViewAccessor(
        long offset,
        long size,
        MemoryMappedFileAccess access);
}
</code></pre>
<p><code>CreateViewAccessor</code> 方法的参数含义如下：</p>
<ul>
<li><code>offset</code>：视图的起始偏移量，单位为字节。</li>
<li><code>size</code>：视图的大小，单位为字节。如果设置为 0, 则表示视图会覆盖整个内存映射文件。</li>
<li><code>access</code>：视图的访问权限，使用 <code>MemoryMappedFileAccess</code> 枚举来指定。</li>
</ul>
<p><code>MemoryMappedViewAccessor</code> 类继承自 <code>UnmanagedMemoryAccessor</code>，提供了多种方法来读写值类型（BCL 中基础值类型和自定义结构体）的数据。</p>
<p><code>position</code> 参数表示数据在内存映射文件中的偏移量，单位为字节。</p>
<pre><code class="language-csharp">public class UnmanagedMemoryAccessor
{
    public bool ReadBoolean(long position);
    public byte ReadByte(long position);
    public char ReadChar(long position);
    public void Read&lt;T&gt;(long position, out T structure) where T : struct;
    public int ReadArray&lt;T&gt;(long position, T[] array, int offset, int count) where T : struct;
    // 读取其他类型的方法...

    public void Write(long position, bool value);
    public void Write(long position, byte value);
    public void Write(long position, char value);
    public void Write&lt;T&gt;(long position, ref T structure) where T : struct;
    public void WriteArray&lt;T&gt;(long position, T[] array, int offset, int count) where T : struct;
    // 写入其他类型的方法...
}

public sealed class MemoryMappedViewAccessor : UnmanagedMemoryAccessor
{
    // 继承自 UnmanagedMemoryAccessor 的方法
}
</code></pre>
<p>下面是一个示例，展示如何使用 <code>MemoryMappedViewAccessor</code> 来读写结构体数据：</p>
<p>自定义一个结构体来存储数据：</p>
<pre><code class="language-csharp">public struct MyData
{
    public int Id;
    // 如果需要存储字符串，可以使用固定长度的字符数组
    // 注意：固定长度的字符数组需要使用 unsafe 代码块来定义
    public unsafe fixed char Value[20];
}
</code></pre>
<pre><code class="language-csharp">using System.IO.MemoryMappedFiles;
using System.Runtime.CompilerServices;

// 创建内存映射文件
var fileName = "example.mmf";
var fileStream = new FileStream(fileName, FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite);

var mmf = MemoryMappedFile.CreateFromFile(
    fileStream,
    mapName: null,
    capacity: 1024 * 1024, // 1 MB
    access: MemoryMappedFileAccess.ReadWrite,
    inheritability: HandleInheritability.None,
    leaveOpen: true);

var sizeOfItem = Unsafe.SizeOf&lt;MyData&gt;();

// 创建视图访问器
using var accessor = mmf.CreateViewAccessor(0, 1024 * 1024, MemoryMappedFileAccess.ReadWrite);
// 写入数据
for (int i = 0; i &lt; 10; i++)
{
    var data = new MyData { Id = i  };
    var managedString = "Value " + i;
    // 需要通过下面的方式将字符串复制到固定长度的字符数组中
    unsafe
    {
        fixed (char* fixedChar = managedString)
        {
            Unsafe.CopyBlock(data.Value, fixedChar, sizeof(char) * (uint)managedString.Length);
        }
    }
    accessor.Write(i * sizeOfItem, ref data);
}

// 读取数据
for (int i = 0; i &lt; 10; i++)
{
    accessor.Read(i * sizeOfItem, out MyData data);
    var id = data.Id;
    unsafe
    {
        string? managedString = ToManagedString(data.Value, 20);
        Console.WriteLine($"Id: {id}, Value: {managedString}");
    }
}

// 将固定长度的字符数组转换为托管字符串
unsafe string? ToManagedString(char* source, int maxLength)
{
    if (source == null)
    {
        return null;
    }

    int length = 0;
    while (length &lt; maxLength &amp;&amp; source[length] != '\0')
    {
        length++;
    }

    return new string(source, 0, length);
}
</code></pre>
<h2 id="使用-memorymappedviewstream-来读写数据">使用 MemoryMappedViewStream 来读写数据</h2>
<p><code>MemoryMappedFile</code> 类还提供了 <code>CreateViewStream</code> 方法，可以创建一个视图流（<code>MemoryMappedViewStream</code>），用于读写内存映射文件中的数据。</p>
<p><code>MemoryMappedViewStream</code> 类继承自 <code>UnmanagedMemoryStream</code>， <code>UnmanagedMemoryStream</code> 由继承自 <code>Stream</code> 类，提供了多种方法来读写字节数据。</p>
<p>下面列举了本文会用到的的方法：</p>
<pre><code class="language-csharp">public abstract class Stream
{
    public void ReadExactly(Span&lt;byte&gt; buffer);
}

public class UnmanagedMemoryStream : Stream
{
    public override unsafe void WriteByte(byte value);
    public override void Write(ReadOnlySpan&lt;byte&gt; buffer);

    public override long Seek(long offset, SeekOrigin loc);
}

public sealed class MemoryMappedViewStream : UnmanagedMemoryStream
{
    // 继承自 UnmanagedMemoryStream 的方法
}
</code></pre>
<p><strong>与 <code>MemoryMappedViewAccessor</code> 最大一个不同点在于，在写入和读取数据时，<code>MemoryMappedViewStream</code> 不支持指定数据的偏移量，而是通过流的当前位置来进行读写操作。且在读取写入完成后，Stream 的位置会自动更新。如果我们需要重新读取或写入数据，需要手动调用 <code>Seek</code> 方法来调整流的位置。</strong></p>
<p>下面是一个示例，展示如何使用 <code>MemoryMappedViewStream</code> 来读写数据：</p>
<p>自定义一个 class 来存储数据：</p>
<pre><code class="language-csharp">public class MyData
{
    public int Id { get; set; }
    public string Value { get; set; }
}
</code></pre>
<p>创建内存映射文件，并使用 <code>MemoryMappedViewStream</code> 来读写数据：</p>
<pre><code class="language-csharp">using System.Buffers;
using System.IO.MemoryMappedFiles;
using System.Text.Json;

// 创建内存映射文件
var fileName = "example.mmf";
var fileStream = new FileStream(fileName, FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite);

var mmf = MemoryMappedFile.CreateFromFile(
    fileStream,
    mapName: null,
    capacity: 1024 * 1024, // 1 MB
    access: MemoryMappedFileAccess.ReadWrite,
    inheritability: HandleInheritability.None,
    leaveOpen: true);

// 创建视图流
using var stream = mmf.CreateViewStream(0, 1024 * 1024, MemoryMappedFileAccess.ReadWrite);

// 写入数据
for (int i = 0; i &lt; 10; i++)
{
    var data = new MyData { Id = i, Value = "Value " + i };
    // 使用 System.Text.Json 序列化数据为字节数组
    var payload = JsonSerializer.SerializeToUtf8Bytes(data);
    // 我们可以先写入数据的长度，然后再写入数据内容
    var header = BitConverter.GetBytes(payload.Length);
    stream.Write(header);
    stream.Write(payload);
}

// 读取数据
stream.Seek(0, SeekOrigin.Begin); // 重置流的位置

// 使用 stackalloc 分配一个小的缓冲区来读取数据长度
Span&lt;byte&gt; headerBuffer = stackalloc byte[sizeof(int)];

for (int i = 0; i &lt; 10; i++)
{
    // 读取数据的长度
    stream.ReadExactly(headerBuffer);
    var length = BitConverter.ToInt32(headerBuffer);

    if (length &lt;= 0)
    {
        Console.WriteLine("No more data to read.");
        break;
    }

    // 读取数据内容，可以通过 ArrayPool&lt;byte&gt; 来优化内存使用
    var rentedBuffer = ArrayPool&lt;byte&gt;.Shared.Rent(length);

    // 使用 ReadExactly 方法读取数据内容需明确指定 Span&lt;byte&gt; 的长度
    var payloadBuffer = rentedBuffer.AsSpan(0, length);

    stream.ReadExactly(payloadBuffer);
    var data = JsonSerializer.Deserialize&lt;MyData&gt;(payloadBuffer);
    Console.WriteLine($"Id: {data.Id}, Value: {data.Value}");
    
    // 归还租用的缓冲区
    ArrayPool&lt;byte&gt;.Shared.Return(rentedBuffer);
}
</code></pre>
<h1 id="使用-mmf-构建高性能的进程间通信队列">使用 MMF 构建高性能的进程间通信队列</h1>
<p>下面我们将基于上述两种方式来实现高性能的进程间通信队列，出于篇幅考虑，本文将只介绍整体的设计思路，具体的代码实现可以参考前面提到的开源项目。</p>
<h2 id="仅支持结构体序列化反序列化的内存映射文件队列">仅支持结构体序列化反序列化的内存映射文件队列</h2>
<p>Github：<a href="https://github.com/eventhorizon-cli/MappedFileQueues" target="_blank" rel="noopener nofollow">https://github.com/eventhorizon-cli/MappedFileQueues</a></p>
<p>nuget：<a href="https://www.nuget.org/packages/MappedFileQueues" target="_blank" rel="noopener nofollow">https://www.nuget.org/packages/MappedFileQueues</a></p>
<h3 id="设计概述">设计概述</h3>
<p>MappedFileQueues 通过内存映射文件来持久存储数据，整体结构分为若干个 Segment，每个 Segment 内又包含多个 Message。用户可以按需清理不需要的 Segment。</p>
<ul>
<li><strong>Message</strong>：每个消息由 Payload 和 EndMarker（结束标记）组成。</li>
<li><strong>Segment</strong>：Segment 的大小可配置。系统会自动调整 Segment 的实际大小，使其不超过配置的 SegmentSize，并且能够容纳整数倍数量的 Message。</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/1201123/202507/1201123-20250720231433444-660758743.png" alt="Segment 结构图" loading="lazy"></p>
<p>每个 Segment 的文件名为该段中第一个 Message 的 offset，并以 0 补足到 20 位。例如，<code>0000000000536870912</code> 表示该 Segment 从 offset 为 536870912 的位置开始。</p>
<ul>
<li>Message 的写入以 byte 为单位计数，每写入 1 byte，offset 加 1。</li>
<li>例如，offset 为 1024 时，表示之前已写入了 1024 字节的数据。</li>
</ul>
<p>offset 使用 long 类型存储，支持的最大值为 2^63-1。</p>
<p>为简化设计，MappedFileQueues 并没有处理 offset 的溢出问题。理论允许写入的最大数据量为 2^63-1 字节（约 8 EB）。在实际应用中，通常不会达到这个极限。</p>
<p>如果确实需要处理比这个极限更大的数据量，可以考虑定期修改 StorePath（存储路径）或使用多个 MappedFileQueues 实例来分散数据。</p>
<p>为保证性能，当没有可消费数据时，Consumer 会先自旋等待，单次自旋等待的最长时间可通过配置项 ConsumerSpinWaitDuration 设置，默认值为 100 毫秒。若超时仍无数据，消费者将进入休眠状态，休眠时长由 ConsumerRetryInterval 控制，默认值为 1 秒。</p>
<h3 id="存储目录">存储目录</h3>
<p>通过 <code>StorePath</code> 配置项指定的存储路径下，MappedFileQueues 会创建以下目录结构：</p>
<pre><code class="language-bash">├── commitlog
│   ├── 000000000000000000000
│   ├── 000000000000000001024
│   └── ...
├── offset
│   ├── producer.offset
│   └── consumer.offset
</code></pre>
<p>其中：</p>
<ul>
<li>
<p><code>commitlog</code> 目录存储实际的 Segment 文件。</p>
</li>
<li>
<p><code>offset</code> 目录存储生产者和消费者的偏移量文件，同样使用 MMF 存储。</p>
<ul>
<li><code>producer.offset</code>：记录生产者的下一个可写入偏移量。</li>
<li><code>consumer.offset</code>：记录消费者的下一个需要消费的偏移量。</li>
</ul>
</li>
</ul>
<h3 id="使用示例">使用示例</h3>
<h4 id="配置选项mappedfilequeueoptions">配置选项（MappedFileQueueOptions）</h4>
<ul>
<li>
<p><strong>StorePath</strong>：存储路径，必须是一个有效的文件夹路径。</p>
</li>
<li>
<p><strong>SegmentSize</strong>：每个 Segment 的大小，系统会自动调整 Segment 的实际大小，使其不超过配置的 SegmentSize，并且能够容纳整数倍数量的 Message。</p>
</li>
<li>
<p><strong>ConsumerRetryInterval</strong>：消费者在没有数据可消费时的重试间隔，默认为 1 秒。</p>
</li>
<li>
<p><strong>ConsumerSpinWaitDuration</strong>：消费者单次自旋等待数据时的最大等待时间，默认为 100 毫秒。</p>
</li>
</ul>
<h4 id="生产和消费数据">生产和消费数据</h4>
<p>MappedFileQueues 中的生产者和消费者接口如下所示：</p>
<pre><code class="language-csharp">public interface IMappedFileProducer&lt;T&gt; where T : struct
{
    // 用于观察当前生产者的下一个可写入的偏移量
    public long Offset { get; }

    public void Produce(ref T message);
}

public interface IMappedFileConsumer&lt;T&gt; where T : struct
{
    // 用于观察当前消费者的下一个需要消费的偏移量
    public long Offset { get; }

    // 调整当前消费者的偏移量
    public void AdjustOffset(long offset);

    public void Consume(out T message);

    public void Commit();
}
</code></pre>
<p>以下是一个简单的使用示例：</p>
<p>定义结构体：</p>
<pre><code class="language-csharp">public unsafe struct TestStruct
{
    public int IntValue;
    public long LongValue;
    public double DoubleValue;
    public fixed char StringValue[20]; // 最大支持20个字符
}
</code></pre>
<p>创建 MappedFileQueues 实例获取单例的生产者和消费者，并进行数据的生产和消费：</p>
<pre><code class="language-csharp">var storePath = "test";

// 如果之前运行过测试，先删除之前的数据
if (Directory.Exists(storePath))
{
    Directory.Delete(storePath, true);
}

var queue = MappedFileQueue.Create&lt;TestStruct&gt;(new MappedFileQueueOptions
{
    StorePath = storePath, SegmentSize = 512 * 1024 * 1024 // 512 MB
});

var producer = queue.Producer;

var consumer = queue.Consumer;

var produceTask = Task.Run(() =&gt;
{
    for (var i = 1; i &lt;= 100; i++)
    {
        var testStruct = new TestStruct { IntValue = i, LongValue = i * 10, DoubleValue = i / 2.0 };

        // 如果你想在结构体中使用字符串，可以用下面的方法复制到固定数组
        var testString = "TestString_" + i;
        unsafe
        {
            fixed (char* fixedChar = testString)
            {
                Unsafe.CopyBlock(testStruct.StringValue, fixedChar, sizeof(char) * (uint)testString.Length);
            }
        }

        producer.Produce(ref testStruct);
    }

    Console.WriteLine("Produced 100 items.");
});

var consumeTask = Task.Run(() =&gt;
{
    for (var i = 1; i &lt;= 100; i++)
    {
        consumer.Consume(out var testStruct);
        Console.WriteLine(
            $"Consumed: IntValue={testStruct.IntValue}, LongValue={testStruct.LongValue}, DoubleValue={testStruct.DoubleValue}");

        // 如果你想在结构体中使用字符串，可以像下面这样把固定数组转换回托管字符串
        unsafe
        {
            string? managedString = ToManagedString(testStruct.StringValue, 20);
            Console.WriteLine($"StringValue: {managedString}");
        }

        consumer.Commit();
    }

    Console.WriteLine("Consumed 100 items.");
});

await Task.WhenAll(produceTask, consumeTask);

// 如果你想在结构体中使用字符串，可以像下面这样把固定数组转换回托管字符串
unsafe string? ToManagedString(char* source, int maxLength)
{
    if (source == null)
    {
        return null;
    }

    int length = 0;
    while (length &lt; maxLength &amp;&amp; source[length] != '\0')
    {
        length++;
    }

    return new string(source, 0, length);
}
</code></pre>
<h2 id="支持任意类型序列化反序列化的内存映射文件队列">支持任意类型序列化反序列化的内存映射文件队列</h2>
<p>Github：<a href="https://github.com/eventhorizon-cli/MappedFileQueues.Stream" target="_blank" rel="noopener nofollow">https://github.com/eventhorizon-cli/MappedFileQueues.Stream</a></p>
<p>nuget：<a href="https://www.nuget.org/packages/MappedFileQueues.Stream" target="_blank" rel="noopener nofollow">https://www.nuget.org/packages/MappedFileQueues.Stream</a></p>
<h3 id="设计概述-1">设计概述</h3>
<p>MappedFileQueues.Stream 的整体设计与 MappedFileQueues 类似，但它支持任意类型的序列化和反序列化。用户需要实现自己的序列化和反序列化逻辑。且因为其数据是不定长的，所以每个 Message 都需要包含一个长度字段来标识数据的长度。</p>
<p>Message 由三部分组成：</p>
<ul>
<li><strong>Header</strong>：记录了 Payload 的长度，其本身大小为 4 字节。</li>
<li><strong>Payload</strong>：实际存储的数据内容。</li>
<li><strong>EndMarker</strong>：用于标识 Message 的结束，大小为 1 字节，内容为 0xFF。</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/1201123/202507/1201123-20250720231432746-1082233670.png" alt="Segment 结构图" loading="lazy"></p>
<p>Segment 的设计如下：</p>
<ul>
<li>每个 Segment 的文件名为该段中第一个 Message 的 offset，并以 0 补足到 20 位。例如，<code>0000000000536870912</code> 表示该 Segment 从 offset 为 536870912 的位置开始。</li>
<li>每个 Segment 的大小由配置项 <code>SegmentSize</code> 决定，写入数据时如果末尾剩余的空间不足以容纳一个完整的 Message，会写入一个 Segment 的结束标记，并创建新的 Segment。</li>
<li>Segment 结束标记的大小为 1 字节，内容为 0xEE，表示该 Segment 已经结束。此结束标志以及剩余的不被利用的空间不会纳入到 offset 的计算中。</li>
<li>Message 的写入以 byte 为单位计数，每写入 1 byte，offset 加 1。</li>
<li>例如，offset 为 1024 时，表示之前已写入了 1024 字节的数据。</li>
</ul>
<p>其余设计与 MappedFileQueues 一致，不再赘述。</p>
<h3 id="使用示例-1">使用示例</h3>
<h4 id="配置选项mappedfilequeueoptions-1">配置选项（MappedFileQueueOptions）</h4>
<ul>
<li>
<p><strong>StorePath</strong>：存储路径，必须是一个有效的文件夹路径。</p>
</li>
<li>
<p><strong>SegmentSize</strong>：每个 Segment 的大小。</p>
</li>
<li>
<p><strong>ConsumerRetryInterval</strong>：消费者在没有数据可消费时的重试间隔，默认为 1 秒。</p>
</li>
<li>
<p><strong>ConsumerSpinWaitDuration</strong>：消费者单次自旋等待数据时的最大等待时间，默认为 100 毫秒。</p>
</li>
</ul>
<h4 id="生产和消费数据-1">生产和消费数据</h4>
<p>MappedFileQueues 中的生产者和消费者接口如下所示：</p>
<pre><code class="language-csharp">public interface IMappedFileProducer
{
    /// &lt;summary&gt;
    /// 下一个消息将被写入的偏移量。
    /// &lt;/summary&gt;
    public long Offset { get; }

    /// &lt;summary&gt;
    /// 将消息写入到内存映射文件队列。
    /// &lt;/summary&gt;
    /// &lt;param name="buffer"&gt;包含要写入的消息的字节缓冲区。&lt;/param&gt;
    public void Produce(ReadOnlySpan&lt;byte&gt; buffer);

    /// &lt;summary&gt;
    /// Produces a message to the mapped file queue using the specified serializer.
    /// 使用指定的序列化器将消息写入到内存映射文件队列。
    /// &lt;/summary&gt;
    /// &lt;/summary&gt;
    /// &lt;param name="message"&gt;待写入的消息。&lt;/param&gt;
    /// &lt;param name="serializer"&gt;用于序列化消息的序列化器。&lt;/param&gt;
    /// &lt;typeparam name="T"&gt;消息的类型。&lt;/typeparam&gt;
    public void Produce&lt;T&gt;(T message, IMessageSerializer&lt;T&gt; serializer);
}

public interface IMappedFileConsumer
{
    /// &lt;summary&gt;
    /// 下一个将被消费的消息的偏移量。
    /// &lt;/summary&gt;
    public long Offset { get; }

    /// &lt;summary&gt;
    /// 调整当前消费者的偏移量。
    /// &lt;/summary&gt;
    public void AdjustOffset(long offset);

    /// &lt;summary&gt;
    /// 从内存映射文件队列中消费一条消息。
    /// &lt;/summary&gt;
    /// &lt;remarks&gt;请注意，在调用 Commit 后不要使用返回的 span。&lt;/remarks&gt;
    /// &lt;returns&gt;包含了消费的消息的 span。&lt;/returns&gt;
    public ReadOnlySpan&lt;byte&gt; Consume();

    /// &lt;summary&gt;
    /// 使用提供的反序列化器从内存映射文件队列中消费一条消息并进行反序列化。
    /// &lt;/summary&gt;
    /// &lt;param name="deserializer"&gt;用于反序列化消息的反序列化器。&lt;/param&gt;
    /// &lt;typeparam name="T"&gt;消息的类型。&lt;/typeparam&gt;
    /// &lt;returns&gt;反序列化后的消息对象。&lt;/returns&gt;
    public T Consume&lt;T&gt;(IMessageDeserializer&lt;T&gt; deserializer);

    /// &lt;summary&gt;
    /// 提交当前消费的 offset。
    /// &lt;remarks&gt;在调用此方法之前，请确保已经消费了消息。&lt;/remarks&gt;
    /// &lt;/summary&gt;
    void Commit();
}
</code></pre>
<p>需要注意的是，在 Consumer 的实现中，为了优化性能，使用了 ArrayPool 来复用内存缓冲区。每次消费消息时，都会从 ArrayPool 中获取一个缓冲区，并在 Commit 后将其归还。这样可以减少内存分配的开销，提高性能。但这也意味必须在调用 Commit 之前处理掉返回的 span。如果使用的是 <code>T Consume&lt;T&gt;(IMessageDeserializer&lt;T&gt; deserializer)</code> 方法，则不需要考虑这点。</p>
<p>以下是一个简单的使用示例：</p>
<p>定义数据类型：</p>
<pre><code class="language-csharp">public class TestClass
{
    public int IntValue { get; set; }
    public long LongValue { get; set; }
    public double DoubleValue { get; set; }
    public string StringValue { get; set; }
}
</code></pre>
<p>使用 <code>System.Text.Json</code> 定义序列化器和反序列化器：</p>
<pre><code class="language-csharp">public class TestMessageSerializer : IMessageSerializer&lt;TestClass&gt;
{
    public ReadOnlySpan&lt;byte&gt; Serialize(TestClass message) =&gt; JsonSerializer.SerializeToUtf8Bytes(message);
}

public class TestMessageDeserializer : IMessageDeserializer&lt;TestClass?&gt;
{
    public TestClass? Deserialize(ReadOnlySpan&lt;byte&gt; buffer) =&gt; JsonSerializer.Deserialize&lt;TestClass&gt;(buffer);
}
</code></pre>
<p>创建 MappedFileQueues 实例获取单例的生产者和消费者，并进行数据的生产和消费：</p>
<pre><code class="language-csharp">var storePath = "test";

// 如果之前运行过测试，先删除之前的数据
if (Directory.Exists(storePath))
{
    Directory.Delete(storePath, true);
}

var serializer = new TestMessageSerializer();
var deserializer = new TestMessageDeserializer();

var queue = MappedFileQueue.Create(new MappedFileQueueOptions
{
    StorePath = storePath, SegmentSize = 512 * 1024 * 1024 // 512 MB
});

var producer = queue.Producer;

var consumer = queue.Consumer;

var produceTask = Task.Run(() =&gt;
{
    for (var i = 1; i &lt;= 100; i++)
    {
        var testData = new TestClass
        {
            IntValue = i, LongValue = i * 10, DoubleValue = i / 2.0, StringValue = "TestString_" + i
        };
        producer.Produce(testData, serializer);
    }

    Console.WriteLine("Produced 100 items.");
});

var consumeTask = Task.Run(() =&gt;
{
    for (var i = 1; i &lt;= 100; i++)
    {
        var testData = consumer.Consume&lt;TestClass&gt;(deserializer);
        Console.WriteLine(
            $"Consumed: IntValue={testData.IntValue}, LongValue={testData.LongValue}, DoubleValue={testData.DoubleValue}, StringValue={testData.StringValue}");
        consumer.Commit();
    }

    Console.WriteLine("Consumed 100 items.");

});

await Task.WhenAll(produceTask, consumeTask);
</code></pre>
<h1 id="benchmark">Benchmark</h1>
<p>最后我们使用 BenchmarkDotNet 来对两种实现进行性能测试。</p>
<p>笔者选择了 macOS 和 Windows 11 两个平台进行测试，至于 Linux 平台，由于笔者没有直接安装在物理上的 Linux 系统，且使用 WSL2 或者 Docker 进行测试的结果并不具有参考价值，故没有列出，欢迎读者自行尝试。</p>
<ul>
<li>macOS：
<ul>
<li>CPU：Apple M2 Max</li>
<li>硬盘：SSD</li>
</ul>
</li>
<li>Windows 11
<ul>
<li>CPU：AMD Ryzen 5 9600X</li>
<li>硬盘：西数 SN850X 2TB NVMe SSD 以及 西数 WD40EZAZX 4TB HDD（带有 256MB 缓存）</li>
</ul>
</li>
</ul>
<p>测试代码的运行环境为 .NET 8.0。</p>
<p>测试读写的数量为 1000 万条数据。</p>
<p><code>MappedFileQueues.Stream</code> 的序列化和反序列化除了使用 <code>System.Text.Json</code> 之外，同时也测试了 <code>MessagePack</code>，读者有兴趣也可以尝试其他的序列化库。</p>
<p>首先需要安装下面的 NuGet 包：</p>
<pre><code class="language-bash">dotnet add package BenchmarkDotNet
dotnet add package MappedFileQueues
dotnet add package MappedFileQueues.Stream
dotnet add package MessagePack
</code></pre>
<p><code>MappedFileQueues</code> 测试用的结构体为：</p>
<pre><code class="language-csharp">public struct TestStruct
{
    public int IntValue;
    public long LongValue;
    public double DoubleValue;
    public fixed char StringValue[20]; // 最大支持20个字符
}
</code></pre>
<p><code>MappedFileQueues.Stream</code> 测试用的类为：</p>
<pre><code class="language-csharp">[MessagePackObject]
public class TestClass
{
    [Key(0)]
    public int IntValue { get; set; }
    [Key(1)]
    public long LongValue { get; set; }
    [Key(2)]
    public double DoubleValue { get; set; }
    [Key(3)]
    public string StringValue { get; set; }
}
</code></pre>
<p>序列化和反序列化的实现如下：</p>
<pre><code class="language-csharp">public class JsonMessageSerializer : IMessageSerializer&lt;TestClass&gt;
{
    public ReadOnlySpan&lt;byte&gt; Serialize(TestClass message) =&gt; JsonSerializer.SerializeToUtf8Bytes(message);
}

public class JsonMessageDeserializer : IMessageDeserializer&lt;TestClass?&gt;
{
    public TestClass? Deserialize(ReadOnlySpan&lt;byte&gt; buffer) =&gt; JsonSerializer.Deserialize&lt;TestClass&gt;(buffer);
}

public class MessagePackMessageSerializer: IMessageSerializer&lt;TestClass&gt;
{
    public ReadOnlySpan&lt;byte&gt; Serialize(TestClass message) =&gt; MessagePackSerializer.Serialize(message);
}

public class MessagePackMessageDeserializer: IMessageDeserializer&lt;TestClass?&gt;
{
    public TestClass Deserialize(ReadOnlySpan&lt;byte&gt; buffer)
    {
        // MessagePackSerializer 暂时不支持 ReadOnlySpan&lt;byte&gt;
        // 需要转换为 byte[]，再隐式转换为 ReadOnlyMemory&lt;byte&gt;
        return MessagePackSerializer.Deserialize&lt;TestClass&gt;(buffer.ToArray());
    }
}
</code></pre>
<p>测试写入的Benchmark代码如下：</p>
<pre><code class="language-csharp">[IterationCount(3)]
public class WriteBenchmark
{
    private const int ItemsCount = 1000_0000;
    private const int SegmentSize = 512 * 1024 * 1024; // 512MB
    private const string StorePath1 = "write_test1";
    private const string StorePath2 = "write_test2";
    private const string StorePath3 = "write_test3";

    private MappedFileQueues.MappedFileQueue&lt;TestStruct&gt; _queue1;

    // 使用 System.Text.Json
    private MappedFileQueues.Stream.MappedFileQueue _queue2;

    // 使用 MessagePack
    private MappedFileQueues.Stream.MappedFileQueue _queue3;

    private readonly JsonMessageSerializer _jsonSerializer = new();
    private readonly MessagePackMessageSerializer _messagePackSerializer = new();

    [GlobalSetup]
    public void GlobalSetup()
    {
        // 清理旧数据
        if (Directory.Exists(StorePath1))
        {
            Directory.Delete(StorePath1, true);
        }

        if (Directory.Exists(StorePath2))
        {
            Directory.Delete(StorePath2, true);
        }

        if (Directory.Exists(StorePath3))
        {
            Directory.Delete(StorePath3, true);
        }

        // 创建队列
        _queue1 = new MappedFileQueues.MappedFileQueue&lt;TestStruct&gt;(
            new MappedFileQueues.MappedFileQueueOptions
            {
                StorePath = StorePath1,
                SegmentSize = SegmentSize
            });

        _queue2 = MappedFileQueues.Stream.MappedFileQueue.Create(
            new MappedFileQueues.Stream.MappedFileQueueOptions
            {
                StorePath = StorePath2,
                SegmentSize = SegmentSize
            });

        _queue3 = MappedFileQueues.Stream.MappedFileQueue.Create(
            new MappedFileQueues.Stream.MappedFileQueueOptions
            {
                StorePath = StorePath3,
                SegmentSize = SegmentSize
            });
    }
    
    [GlobalCleanup]
    public void GlobalCleanup()
    {
        _queue1.Dispose();
        _queue2.Dispose();
        _queue3.Dispose();

        // 清理目录
        if (Directory.Exists(StorePath1))
        {
            Directory.Delete(StorePath1, true);
        }

        if (Directory.Exists(StorePath2))
        {
            Directory.Delete(StorePath2, true);
        }

        if (Directory.Exists(StorePath3))
        {
            Directory.Delete(StorePath3, true);
        }
    }

    [Benchmark]
    public void WriteStruct()
    {
        var producer = _queue1.Producer;
        for (var i = 0; i &lt; ItemsCount; i++)
        {
            var testStruct = new TestStruct
            {
                IntValue = i,
                LongValue = i * 10,
                DoubleValue = i / 2.0
            };
            producer.Produce(ref testStruct);
        }
    }

    [Benchmark]
    public void WriteJson()
    {
        var producer = _queue2.Producer;
        for (var i = 0; i &lt; ItemsCount; i++)
        {
            var testStruct = new TestClass
            {
                IntValue = i,
                LongValue = i * 10,
                DoubleValue = i / 2.0
            };
            producer.Produce(testStruct, _jsonSerializer);
        }
    }

    [Benchmark]
    public void WriteMessagePack()
    {
        var producer = _queue3.Producer;
        for (var i = 0; i &lt; ItemsCount; i++)
        {
            var testStruct = new TestClass
            {
                IntValue = i,
                LongValue = i * 10,
                DoubleValue = i / 2.0,
                StringValue = "TestString_" + i
            };
            producer.Produce(testStruct, _messagePackSerializer);
        }
    }
}
</code></pre>
<p>测试读取的Benchmark代码如下：</p>
<pre><code class="language-csharp">[IterationCount(3)]
public class ReadBenchmark
{
    private const int ItemsCount = 1000_0000;
    private const int SegmentSize = 512 * 1024 * 1024; // 512MB

    private const string StorePath1 = "read_test1";
    private const string StorePath2 = "read_test2";
    private const string StorePath3 = "read_test3";

    private MappedFileQueues.MappedFileQueue&lt;TestStruct&gt; _queue1;

    // 使用 System.Text.Json
    private MappedFileQueues.Stream.MappedFileQueue _queue2;

    // 使用 MessagePack
    private MappedFileQueues.Stream.MappedFileQueue _queue3;

    private readonly JsonMessageSerializer _jsonSerializer = new();
    private readonly JsonMessageDeserializer _jsonDeserializer = new();

    private readonly MessagePackMessageSerializer _messagePackSerializer = new();
    private readonly MessagePackMessageDeserializer _messagePackDeserializer = new();

    [GlobalSetup]
    public void GlobalSetup()
    {
        CleanupStorePath();
        InitializeQueues();

        // 生产数据
        for (var i = 0; i &lt; ItemsCount; i++)
        {
            var testStruct = new TestStruct
            {
                IntValue = i,
                LongValue = i * 10,
                DoubleValue = i / 2.0
            };

            // 使用固定数组存储字符串
            // testString 最大 19 个字符，20 个字符的固定数组足够存储
            var testString = "TestString_" + i;
            unsafe
            {
                fixed (char* fixedChar = testString)
                {
                    Unsafe.CopyBlock(testStruct.StringValue, fixedChar, sizeof(char) * (uint)testString.Length);
                }
            }

            _queue1.Producer.Produce(ref testStruct);
        }

        for (var i = 0; i &lt; ItemsCount; i++)
        {
            var testData = new TestClass
            {
                IntValue = i,
                LongValue = i * 10,
                DoubleValue = i / 2.0,
                StringValue = "TestString_" + i
            };

            _queue2.Producer.Produce(testData, _jsonSerializer);

            _queue3.Producer.Produce(testData, _messagePackSerializer);
        }
    }

    [GlobalCleanup]
    public void GlobalCleanup()
    {
        // 清理队列和数据
        _queue1.Dispose();
        _queue2.Dispose();
        _queue3.Dispose();

        CleanupStorePath();
    }

    [IterationSetup]
    public void IterationSetup()
    {
        // 每次迭代前重置消费者
        RestQueues();

        _queue1.Consumer.AdjustOffset(0);
        _queue2.Consumer.AdjustOffset(0);
        _queue3.Consumer.AdjustOffset(0);
    }

    [Benchmark]
    public void ReadStruct()
    {
        var consumer = _queue1.Consumer;

        for (var i = 0; i &lt; ItemsCount; i++)
        {
            consumer.Consume(out var testStruct);
            unsafe
            {
                // 为了尽量贴合实际，测试也加入字符串的从固定数组转换为托管字符串的代码
                var managedString = ToManagedString(testStruct.StringValue, 20);
                // Console.WriteLine($"StringValue: {managedString}");
            }

            consumer.Commit();
        }
    }

    [Benchmark]
    public void ReadJson()
    {
        var consumer = _queue2.Consumer;

        for (var i = 0; i &lt; ItemsCount; i++)
        {
            var testData = consumer.Consume&lt;TestClass&gt;(_jsonDeserializer);
            // Console.WriteLine($"Consumed: IntValue={testData.IntValue}, LongValue={testData.LongValue}, DoubleValue={testData.DoubleValue}, StringValue={testData.StringValue}");
            consumer.Commit();
        }
    }

    [Benchmark]
    public void ReadMessagePack()
    {
        var consumer = _queue3.Consumer;

        for (var i = 0; i &lt; ItemsCount; i++)
        {
            var testData = consumer.Consume&lt;TestClass&gt;(_messagePackDeserializer);
            // Console.WriteLine($"Consumed: IntValue={testData.IntValue}, LongValue={testData.LongValue}, DoubleValue={testData.DoubleValue}, StringValue={testData.StringValue}");
            consumer.Commit();
        }
    }
    
    private void CleanupStorePath()
    {
        if (Directory.Exists(StorePath1))
        {
            Directory.Delete(StorePath1, true);
        }

        if (Directory.Exists(StorePath2))
        {
            Directory.Delete(StorePath2, true);
        }

        if (Directory.Exists(StorePath3))
        {
            Directory.Delete(StorePath3, true);
        }
    }

    private void RestQueues()
    {
        // 重置队列
        _queue1.Dispose();
        _queue2.Dispose();
        _queue3.Dispose();

        InitializeQueues();
    }
    
    private void InitializeQueues()
    {
        _queue1 = MappedFileQueues.MappedFileQueue.Create&lt;TestStruct&gt;(new MappedFileQueues.MappedFileQueueOptions
        {
            StorePath = StorePath1,
            SegmentSize = SegmentSize
        });

        _queue2 = MappedFileQueues.Stream.MappedFileQueue.Create(
            new MappedFileQueues.Stream.MappedFileQueueOptions
            {
                StorePath = StorePath2,
                SegmentSize = SegmentSize
            });

        _queue3 = MappedFileQueues.Stream.MappedFileQueue.Create(
            new MappedFileQueues.Stream.MappedFileQueueOptions
            {
                StorePath = StorePath3,
                SegmentSize = SegmentSize
            });
    }

    private static unsafe string? ToManagedString(char* source, int maxLength)
    {
        if (source == null)
        {
            return null;
        }

        int length = 0;
        while (length &lt; maxLength &amp;&amp; source[length] != '\0')
        {
            length++;
        }

        return new string(source, 0, length);
    }
}
</code></pre>
<pre><code class="language-csharp">var config = ManualConfig
    .Create(DefaultConfig.Instance)
    .AddDiagnoser(MemoryDiagnoser.Default);

new BenchmarkSwitcher(
[
    typeof(WriteBenchmark),
    typeof(ReadBenchmark)
]).Run(args, config);
</code></pre>
<p>各平台的测试结果如下：</p>
<p>macOS（SSD）：</p>
<pre><code class="language-bash">| Method           | Mean       | Error      | StdDev   | Gen0        | Allocated     |
|----------------- |-----------:|-----------:|---------:|------------:|--------------:|
| WriteStruct      |   714.9 ms | 1,239.1 ms | 67.92 ms |           - |       2.65 KB |
| WriteJson        | 2,721.9 ms | 1,383.1 ms | 75.81 ms | 190000.0000 | 1557820.17 KB |
| WriteMessagePack | 1,291.4 ms |   105.1 ms |  5.76 ms | 257000.0000 | 2100720.03 KB |
</code></pre>
<pre><code class="language-bash">| Method          | Mean    | Error    | StdDev   | Gen0        | Allocated  |
|---------------- |--------:|---------:|---------:|------------:|-----------:|
| ReadStruct      | 1.716 s | 0.2851 s | 0.0156 s |  75000.0000 |  602.73 MB |
| ReadJson        | 5.637 s | 0.3307 s | 0.0181 s | 132000.0000 | 1060.49 MB |
| ReadMessagePack | 2.396 s | 0.2737 s | 0.0150 s | 209000.0000 | 1670.79 MB |
</code></pre>
<p>Windows 11（SSD）：</p>
<pre><code class="language-bash">| Method           | Mean       | Error      | StdDev    | Gen0        | Allocated     |
|----------------- |-----------:|-----------:|----------:|------------:|--------------:|
| WriteStruct      |   663.8 ms | 1,422.2 ms |  77.96 ms |           - |       2.09 KB |
| WriteJson        | 2,445.3 ms | 1,929.8 ms | 105.78 ms |  95000.0000 | 1557803.16 KB |
| WriteMessagePack | 1,298.8 ms |   381.4 ms |  20.90 ms | 128000.0000 | 2100719.89 KB |
</code></pre>
<pre><code class="language-bash">| Method          | Mean       | Error    | StdDev   | Gen0        | Gen1      | Allocated  |
|---------------- |-----------:|---------:|---------:|------------:|----------:|-----------:|
| ReadStruct      |   992.0 ms | 262.3 ms | 14.38 ms |  37000.0000 |         - |  603.58 MB |
| ReadJson        | 4,020.5 ms | 202.8 ms | 11.12 ms |  78000.0000 | 3000.0000 | 1249.09 MB |
| ReadMessagePack | 1,920.9 ms | 247.3 ms | 13.55 ms | 106000.0000 |         - | 1705.85 MB |
</code></pre>
<p>Windows 11（HDD）：</p>
<pre><code class="language-bash">| Method           | Mean     | Error     | StdDev   | Median   | Gen0        | Allocated     |
|----------------- |---------:|----------:|---------:|---------:|------------:|--------------:|
| WriteStruct      |  7.112 s | 54.1588 s | 2.9686 s |  5.481 s |           - |       2.01 KB |
| WriteJson        | 10.392 s | 52.4542 s | 2.8752 s | 12.029 s |  95000.0000 | 1557803.05 KB |
| WriteMessagePack |  5.949 s |  0.3359 s | 0.0184 s |  5.945 s | 128000.0000 | 2100719.89 KB |
</code></pre>
<pre><code class="language-bash">| Method          | Mean       | Error     | StdDev   | Gen0        | Allocated  |
|---------------- |-----------:|----------:|---------:|------------:|-----------:|
| ReadStruct      |   847.2 ms |  53.59 ms |  2.94 ms |  37000.0000 |  602.73 MB |
| ReadJson        | 3,562.7 ms |  61.95 ms |  3.40 ms |  66000.0000 | 1060.49 MB |
| ReadMessagePack | 1,720.4 ms | 273.43 ms | 14.99 ms | 104000.0000 | 1670.79 MB |
</code></pre>
<p>从上面的测试结果可以看出：</p>
<p><code>MappedFileQueues</code> 的读写性能和内存消耗都明显优于 <code>MappedFileQueues.Stream</code>。尤其是内存消耗这一块，因为是直接将结构体的内存数据拷贝到 MMF 中，尽可能地减少了序列化和反序列化的开销。</p>
<p><code>MappedFileQueues.Stream</code> 性能很大程度上取决于所使用的序列化库。</p>
<p>对比 HDD 和 SSD 的测试结果可以看出，SSD 的写入性能明显优于 HDD，读取性能差异不大，甚至 HDD 还略好于 SSD。但就算使用了 HDD，这两种实现的性能也都足以满足大多数应用场景。</p>
<h1 id="总结">总结</h1>
<p>本文介绍了如何使用内存映射文件（MMF）来实现高性能的进程间通信队列。我们实现了两种不同的队列实现：一种仅支持结构体序列化反序列化的 <code>MappedFileQueues</code>，另一种支持任意类型序列化反序列化的 <code>MappedFileQueues.Stream</code>。前者性能更高，后者适用场景更广。</p>
<p>欢迎关注个人技术公众号<br>
<img src="https://img2023.cnblogs.com/blog/1201123/202303/1201123-20230302194546214-138980196.png" alt="" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.4083333333333333" data-date-updated="2025-07-21 09:04">2025-07-20 23:16</span>&nbsp;
<a href="https://www.cnblogs.com/eventhorizon">黑洞视界</a>&nbsp;
阅读(<span id="post_view_count">201</span>)&nbsp;
评论(<span id="post_comment_count">3</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18994830);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18994830', targetLink: 'https://www.cnblogs.com/eventhorizon/p/18994830', title: '在 .NET 中使用内存映射文件构建高性能的进程间通信队列' })">举报</a>
</div>
        