
		<h2>
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Iflyinsky/p/19062445" title="发布于 2025-08-28 13:11">
    <span role="heading" aria-level="2">-fno-rtti导致的惨案（object has invalid vptr）</span>
    

</a>

		</h2>
		<div class="postText"><div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">

<p><font color="red" size="7">PS：要转载请注明出处，本人版权所有。</font><br><br>
<font color="red" size="7">PS: 这个只是基于《我自己》的理解，</font><br><br>
<font color="red" size="7">如果和你的原则及想法相冲突，请谅解，勿喷。</font><br></p>

<h6 id="环境说明">环境说明</h6>
<ul>
<li>Ubuntu 24.04.2 LTS \n \l</li>
<li>gcc version 13.3.0 (Ubuntu 13.3.0-6ubuntu2~24.04)</li>
</ul>
<h3 id="前言">前言</h3>
<hr>
<p>  对于C++程序开发来说，MemoryLeek/UndefinedBehavior 等问题，简直就是大型开发过程必定会出现的问题。那么我们怎么尝试减少这些问题，在我的日常开发中，大概有以下方案：</p>
<ul>
<li>对于开发过程中来说，在c++11以后，标准库引入了智能指针，然后增强开发者内存所有权意识等，可以有效减少MemoryLeek问题。</li>
<li>对于测试发布流程来说，我们常常引入了valgrind/sanitizer减少MemoryLeek/UndefinedBehavior 等问题。</li>
</ul>
<p>  尤其是对于新的编译器来说，sanitizer还是比较好用的。最近遇到了一个不是那么常见的sanitizer ub错误，我觉得非常有趣，可以分享一下。</p>
<br>
<br>
<br>
<br>
<h3 id="-fno-rtti导致的惨案">-fno-rtti导致的惨案</h3>
<hr>
<p>  下面的图片是出现的问题现场截图：</p>
<div style="text-align: center">
    <div style="margin: 0 auto">
        <center><img alt="rep_img" data-src="https://flyinskyin2013.github.io/ImageBed0/blogs/blog_idx_140/invalid_ptr.png" class="lazyload"></center>
    </div>
</div>    
<p>  上图一看就是ub错误，具体是什么原因，还要分析一番。</p>
<br>
<br>
<h5 id="问题最小用例复现">问题最小用例复现</h5>
<p>  下面是最小的复现用例：</p>
<pre><code class="language-c++">//l.cpp
#include &lt;memory&gt;

#include "A.hpp"


        void B::p(){printf("p(): class B\n");}
        void B::p1(){printf("p1(): class B\n");}

        void A::p(){printf("p(): class A\n");}
        void A::p1(){printf("p1(): class A\n");}


std::shared_ptr&lt;A&gt; my_A(new A());

void i(){

        my_A-&gt;p1();
}
</code></pre>
<pre><code class="language-c++">//l.hpp
void i();
</code></pre>
<pre><code class="language-c++">//l.hpp
void i();
</code></pre>
<pre><code class="language-c++">//A.hpp
#include &lt;cstdio&gt;
class B{
        public:
        virtual void p();
        virtual void p1();

};
class A:public B{
        public:
                void p();
                void p1();
};
</code></pre>
<pre><code class="language-c++">//t.cpp
#include &lt;memory&gt;
#include &lt;cstdio&gt;

#include "A.hpp"
#include "l.hpp"

std::shared_ptr&lt;A&gt; my_AA(new A());

int main(int argc, const char* argv[])
{
        my_AA-&gt;p();
        i();
        return 0;
}
</code></pre>
<pre><code class="language-shell">g++ -c l.cpp -O3 -fPIC -fsanitize=undefined

g++ -shared -o libA.so l.o -O3

g++ t.cpp -o t -O3 -I. -L . -l A -fno-rtti -fsanitize=undefined -Wl,-rpath=. 

# ./t 运行就会得到如上的错误
</code></pre>
<p>注意上述例子用到了多态类，这和我原始工程中类似，但是实际情况中，一个普通的类也会有同样的问题，具体原因，见如下分析。</p>
<br>
<br>
<h5 id="问题分析">问题分析</h5>
<p>  首先我们看看出现的_Sp_counted_base/_Sp_counted_ptr是什么，这个通过报错，看起来像shared_ptr引用计数相关，我们看看其实际的代码大致关系如下：</p>
<pre><code class="language-c++">    template&lt;typename _Tp&gt;
    class shared_ptr : public __shared_ptr&lt;_Tp&gt;
    {
        //...
    }


    class __shared_ptr
    : public __shared_ptr_access&lt;_Tp, _Lp&gt;
    {
        //...
        __shared_count&lt;_Lp&gt;  _M_refcount;    // Reference counter.
    }


    template&lt;_Lock_policy _Lp&gt;
    class __shared_count
    {
        template&lt;typename _Ptr&gt;
        explicit
        __shared_count(_Ptr __p) : _M_pi(0)
        {
        __try
            {
                _M_pi = new _Sp_counted_ptr&lt;_Ptr, _Lp&gt;(__p);
            }
        __catch(...)
            {
                delete __p;
                __throw_exception_again;
            }
        }
        //...
        _Sp_counted_base&lt;_Lp&gt;*  _M_pi;
    }


    template&lt;typename _Ptr, _Lock_policy _Lp&gt;
    class _Sp_counted_ptr final : public _Sp_counted_base&lt;_Lp&gt;
    {
        //...
    }

    template&lt;_Lock_policy _Lp = __default_lock_policy&gt;
    class _Sp_counted_base
    : public _Mutex_base&lt;_Lp&gt;
    {
        //...
    }
</code></pre>
<p>  我们使用如下命令，看一下t和libA.so的_Sp_counted_ptr符号，我们发现对于相同的符号来说，其大小不一样。</p>
<pre><code class="language-bash"># readelf -sW libA.so |grep counted_ptr
    24: 0000000000005160    54 OBJECT  WEAK   DEFAULT   16 _ZTSSt15_Sp_counted_ptrIP1ALN9__gnu_cxx12_Lock_policyE2EE
    25: 0000000000003970   338 FUNC    WEAK   DEFAULT   14 _ZNSt15_Sp_counted_ptrIP1ALN9__gnu_cxx12_Lock_policyE2EED1Ev
    27: 0000000000003970   338 FUNC    WEAK   DEFAULT   14 _ZNSt15_Sp_counted_ptrIP1ALN9__gnu_cxx12_Lock_policyE2EED2Ev
    30: 0000000000003790     7 FUNC    WEAK   DEFAULT   14 _ZNSt15_Sp_counted_ptrIP1ALN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info
    33: 0000000000006d80    56 OBJECT  WEAK   DEFAULT   22 _ZTVSt15_Sp_counted_ptrIP1ALN9__gnu_cxx12_Lock_policyE2EE
    40: 0000000000006cf0    24 OBJECT  WEAK   DEFAULT   22 _ZTISt15_Sp_counted_ptrIP1ALN9__gnu_cxx12_Lock_policyE2EE
    44: 0000000000003c30   489 FUNC    WEAK   DEFAULT   14 _ZNSt15_Sp_counted_ptrIP1ALN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv
    48: 0000000000003880   225 FUNC    WEAK   DEFAULT   14 _ZNSt15_Sp_counted_ptrIP1ALN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv
    53: 0000000000003ad0   350 FUNC    WEAK   DEFAULT   14 _ZNSt15_Sp_counted_ptrIP1ALN9__gnu_cxx12_Lock_policyE2EED0Ev
</code></pre>
<pre><code class="language-bash"># readelf -sW t |grep counted_ptr
    20: 0000000000002700   172 FUNC    WEAK   DEFAULT   16 _ZNSt15_Sp_counted_ptrIP1ALN9__gnu_cxx12_Lock_policyE2EED2Ev
    22: 0000000000002700   172 FUNC    WEAK   DEFAULT   16 _ZNSt15_Sp_counted_ptrIP1ALN9__gnu_cxx12_Lock_policyE2EED1Ev
    23: 0000000000002870   233 FUNC    WEAK   DEFAULT   16 _ZNSt15_Sp_counted_ptrIP1ALN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv
    24: 00000000000027b0   188 FUNC    WEAK   DEFAULT   16 _ZNSt15_Sp_counted_ptrIP1ALN9__gnu_cxx12_Lock_policyE2EED0Ev
    26: 00000000000026a0    92 FUNC    WEAK   DEFAULT   16 _ZNSt15_Sp_counted_ptrIP1ALN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv
    30: 0000000000002610     7 FUNC    WEAK   DEFAULT   16 _ZNSt15_Sp_counted_ptrIP1ALN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info
    32: 0000000000005ca0    56 OBJECT  WEAK   DEFAULT   24 _ZTVSt15_Sp_counted_ptrIP1ALN9__gnu_cxx12_Lock_policyE2EE
</code></pre>
<p>  这个时候我们想一下-fno-rtti的作用，其作用是禁用typeinfo+dynamic_cast，某些情况下可以提升执行性能。然后根据错误中的提示（object has invalid vptr），必定和其虚表有关系，那就意味着_Sp_counted_base/_Sp_counted_ptr的虚表存在异常。</p>
<p>  用ida查看t和libA.so中std::_Sp_counted_base的虚表内容，他们如下图：</p>
<div style="text-align: center">
    <div style="margin: 0 auto">
        <center><img alt="rep_img" data-src="https://flyinskyin2013.github.io/ImageBed0/blogs/blog_idx_140/sp_counted_base_vtable.png" class="lazyload"></center>
    </div>
</div>    
<div style="text-align: center">
    <div style="margin: 0 auto">
        <center><img alt="rep_img" data-src="https://flyinskyin2013.github.io/ImageBed0/blogs/blog_idx_140/sp_counted_base_vtable_with_typeinfo.png" class="lazyload"></center>
    </div>
</div>    
<p>  注意，一般的虚表结构如下：</p>
<pre><code class="language-txt">+-------------------+
|  Offset-to-Top    | (通常为负数，用于多重继承)
+-------------------+
|  type_info 指针    | (用于 RTTI)
+-------------------+
|  虚函数1 的地址    |
+-------------------+
|  虚函数2 的地址    |
+-------------------+
|      ...          |
</code></pre>
<p>  从上面的图和虚表结构可知，就是两个同名的vtable内容不一样，导致了此问题。解决方法也很简单，大家使用同样的编译参数即可。</p>
<br>
<br>
<br>
<br>
<h3 id="后记">后记</h3>
<hr>
<p>  c++的一些错误是非常有趣的，值得细看。</p>
<h3 id="参考文献">参考文献</h3>
<ul>
<li>无</li>
</ul>
<br>
<br>
<div style="margin: 50px auto">
</div>
<div style="text-align: center">
    <div style="margin: 0 auto">
        <hr>
        <center><font color="#91e0b0" size="5">打赏、订阅、收藏、丢香蕉、硬币，请关注公众号（攻城狮的搬砖之路）</font></center>
    </div>
</div>
<div style="text-align: center">
    <div style="margin: 0 auto">
        <center><img alt="qrc_img" data-src="https://flyinskyin2013.github.io/ImageBed0/blogs/qrcode_for_wx_official_account.jpg" class="lazyload"></center>
    </div>
</div>

<p><font color="red" size="7">PS: 请尊重原创，不喜勿喷。</font><br><br>
<font color="red" size="7">PS: 要转载请注明出处，本人版权所有。</font><br><br>
<font color="red" size="7">PS: 有问题请留言，看到后我会第一时间回复。</font><br></p>

</div>
<div class="clear"></div>
</div>
		<p class="postfoot">
			posted on 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-28 13:11">2025-08-28 13:11</span>&nbsp;
<a href="https://www.cnblogs.com/Iflyinsky">SkyOnSky</a>&nbsp;
阅读(<span id="post_view_count">73</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19062445);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19062445', targetLink: 'https://www.cnblogs.com/Iflyinsky/p/19062445', title: '-fno-rtti导致的惨案（object has invalid vptr）' })">举报</a>

		</p>
	