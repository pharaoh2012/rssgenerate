
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/linx/p/18853553" title="发布于 2025-04-29 13:50">
    <span role="heading" aria-level="2">Web前端入门第 44 问：CSS 循环动画 animation 效果演示</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="相关属性">相关属性</h2>
<p><code>@keyframes</code> 定义动画的关键帧序列</p>
<p><code>animation-name</code> 指定 @keyframes 动画的名称<br>
<code>animation-duration</code> 动画单次循环的持续时间（必需属性，否则动画不会生效）<br>
<code>animation-timing-function</code> 动画速度曲线<br>
<code>animation-iteration-count</code> 动画播放次数，数字或者 <code>infinite</code> 无限循环<br>
<code>animation-delay</code> 动画开始前的等待时间（延迟）<br>
<code>animation-direction</code> 动画播放方向<br>
<code>animation-fill-mode</code> 控制动画执行前后的样式状态<br>
<code>animation-play-state</code> 控制动画播放状态，暂停/播放</p>
<p><code>animation</code> 简写属性，包含 duration | timing-function | delay | iteration-count | direction | fill-mode | play-state | name。</p>
<p><strong>2023 新增属性：</strong></p>
<p><code>animation-composition</code> 指定了当多个动画同时影响同一属性时应使用的复合操作。</p>
<h3 id="keyframes">@keyframes</h3>
<p><code>@keyframes</code> 用于定义动画关键帧，还是必须的那种，没有 @keyframes 的关键帧，CSS 动画就没法玩！！</p>
<p>在使用 CSS 动画前，必须优先定义动画关键帧，写法：</p>
<pre><code class="language-css">@keyframes ani1 {
  0% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(605px);
  }
}
</code></pre>
<p>以上代码定义了一个名为 ani1 的动画关键帧序列，其中 0% 表示动画开始时没有位移，100% 表示动画结束时位移了 605px。</p>
<p><strong>关键帧名称定义规范：</strong></p>
<p>必须以字母（a-z, A-Z）、下划线（_） 或 连字符（-） 开头，后面可以是字母、数字（0-9）、下划线或连字符，建议不要使用 CSS 关键字，虽然不一定报错。</p>
<p>除了使用百分比定义关键帧序列，还可以使用关键字 from（0%） 和 to（100%）定义，比如：</p>
<pre><code class="language-css">@keyframes ani1 {
  from {
    transform: translateX(0);
  }
  to {
    transform: translateX(605px);
  }
}
</code></pre>
<p>还可以多个帧用同一条规则：</p>
<pre><code class="language-css">@keyframes ani1 {
  0% {
    transform: translateX(0);
  }
  40%,
  60% { /* 40% 和 60% 的关键帧都是同一个位置，表示元素不动 */
    transform: translateX(305px);
  }
  100% {
    transform: translateX(605px);
  }
}
</code></pre>
<p>需注意关键帧的 CSS 属性不支持 <code>!important</code>，有此写法浏览器会判定属性值无效！！</p>
<h3 id="animation-name">animation-name</h3>
<p>用于指定动画使用的关键帧序列名称，比如：</p>
<pre><code class="language-css">.child {
  animation-name: ani1;
  animation-name: ani1, ani2; /* 同时使用 ani1 和 ani2 两个关键帧序列 */
}
</code></pre>
<p>此时，给 .child 指定了一个 ani1 的关键帧序列，但动画还无法执行，原因是缺少动画持续时间。</p>
<h3 id="animation-duration">animation-duration</h3>
<p>指定执行一次动画的运行时长，与前文说过的 <code>transition-duration</code> 一致，以秒（s）或毫秒（ms）为单位，默认是 0s。</p>
<p>语法：</p>
<pre><code class="language-css">``` css
.child {
  animation-duration: 2s;
}
</code></pre>
<p>看例子，同时应用多个关键帧序列：</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;div class="child"&gt;1s&lt;/div&gt;
  &lt;div class="child"&gt;2s&lt;/div&gt;
  &lt;div class="child"&gt;3s&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  @keyframes ani1 {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(605px);
    }
  }
  @keyframes ani2 {
    0% {
      background-color: #fff;
    }
    100% {
      background-color: rgba(255, 71, 87,1);
    }
  }
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    width: calc(235px * 3);
  }
  .child {
    border: 2px solid rgba(255, 71, 87,1);
    border-radius: 40px;
    width: 100px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    animation-name: ani1, ani2;
  }
  .child:nth-child(1) {
    animation-duration: 1s; /* 两个关键帧序列都使用一样的时长 */
  }
  .child:nth-child(2) {
    animation-duration: 2s, 1s; /* 第一个关键帧序列的时长是 2s，第二个关键帧序列的时长是 1s */
  }
  .child:nth-child(3) {
    animation-duration: 500ms, 3s; /* 第一个关键帧序列的时长是 500ms，第二个关键帧序列的时长是 3s */
  }
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250429134806603-1941290415.gif" alt="" width="500" loading="lazy"></p>
<h3 id="animation-timing-function">animation-timing-function</h3>
<p>用于设置速度曲线，控制动画速度变化，与前文的 <code>transition-timing-function</code> 一致，默认是 ease。</p>
<p><strong>关于 <code>贝塞尔曲线</code> 可阅读前一篇文章！</strong></p>
<p>示例：</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;div class="child"&gt;ease&lt;/div&gt;
  &lt;div class="child"&gt;ease-in-out&lt;/div&gt;
  &lt;div class="child"&gt;cubic-bezier&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  @keyframes ani1 {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(605px);
    }
  }
  @keyframes ani2 {
    0% {
      background-color: #fff;
    }
    100% {
      background-color: rgba(255, 71, 87,1);
    }
  }
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    width: calc(235px * 3);
  }
  .child {
    border: 2px solid rgba(255, 71, 87,1);
    border-radius: 40px;
    width: 100px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    animation-name: ani1, ani2;
    animation-duration: 2s;
  }
  .child:nth-child(1) {
    animation-timing-function: ease;
  }
  .child:nth-child(2) {
    animation-timing-function: ease-in-out;
  }
  .child:nth-child(3) {
    animation-timing-function: cubic-bezier(0.18, 0.89, 0.32, 1.28); /* 使用贝塞尔曲线 */
  }
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250429134819457-1643895403.gif" alt="" width="500" loading="lazy"></p>
<h3 id="animation-iteration-count">animation-iteration-count</h3>
<p>动画默认只执行 1 此，上面效果看起来是循环执行，原因是 <strong>gif 图片会重复播放</strong>！！</p>
<p>示例：</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;div class="child"&gt;ease&lt;/div&gt;
  &lt;div class="child"&gt;ease-in-out&lt;/div&gt;
  &lt;div class="child"&gt;cubic-bezier&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  @keyframes ani1 {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(605px);
    }
  }
  @keyframes ani2 {
    0% {
      background-color: #fff;
    }
    100% {
      background-color: rgba(255, 71, 87,1);
    }
  }
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    width: calc(235px * 3);
  }
  .child {
    border: 2px solid rgba(255, 71, 87,1);
    border-radius: 40px;
    width: 100px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    animation-duration: 2s;
    animation-timing-function: cubic-bezier(0.18, 0.89, 0.32, 1.28);
  }
  .box:hover .child { /* 鼠标放上时候，才开始执行动画 */
    animation-name: ani1, ani2;
  }
  .child:nth-child(1) {
    animation-iteration-count: 1; /* 动画执行1次 */
  }
  .child:nth-child(2) {
    animation-iteration-count: 0; /* 动画不执行 */
  }
  .child:nth-child(3) {
    animation-iteration-count: infinite; /* 动画执行无限次 */
  }
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250429134828194-713267890.gif" alt="" width="500" loading="lazy"></p>
<h3 id="animation-delay">animation-delay</h3>
<p>设置动画开始时的等待时长，默认是 0s。</p>
<p>示例：</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;div class="child"&gt;ease&lt;/div&gt;
  &lt;div class="child"&gt;ease-in-out&lt;/div&gt;
  &lt;div class="child"&gt;cubic-bezier&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  @keyframes ani1 {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(605px);
    }
  }
  @keyframes ani2 {
    0% {
      background-color: #fff;
    }
    100% {
      background-color: rgba(255, 71, 87,1);
    }
  }
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    width: calc(235px * 3);
  }
  .child {
    border: 2px solid rgba(255, 71, 87,1);
    border-radius: 40px;
    width: 100px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    animation-duration: 2s;
    animation-timing-function: cubic-bezier(0.18, 0.89, 0.32, 1.28);
    animation-iteration-count: 1; /* 动画执行1次 */
  }
  .box:hover .child { /* 鼠标放上时候，才开始执行动画 */
    animation-name: ani1, ani2;
  }
  .child:nth-child(1) {
    animation-delay: 500ms;
  }
  .child:nth-child(2) {
    animation-delay: 1s
  }
  .child:nth-child(3) {
    animation-delay: 2s;
  }
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250429134835512-1558782035.gif" alt="" width="500" loading="lazy"></p>
<h3 id="animation-direction">animation-direction</h3>
<p>设置动画方向，默认是 <code>normal</code>，即从开始到结束。</p>
<p>有效值：</p>
<p><code>normal</code> 动画在每个循环中正向播放。<br>
<code>reverse</code> 动画在每个循环中反向播放。动画将从结束状态往开始状态运动，速度曲线也将反转。<br>
<code>alternate</code> 动画在每个循环中正反交替播放，第一次迭代是正向播放。<br>
<code>alternate-reverse</code> 动画在每个循环中正反交替播放，第一次迭代是反向播放。</p>
<p>alternate 的两个值会让动画往返来回执行，reverse 两个值会让动画倒着执行。</p>
<p>示例：</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;div class="child"&gt;normal&lt;/div&gt;
  &lt;div class="child"&gt;reverse&lt;/div&gt;
  &lt;div class="child"&gt;alternate&lt;/div&gt;
  &lt;div class="child"&gt;alternate-reverse&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  @keyframes ani1 {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(605px);
    }
  }
  @keyframes ani2 {
    0% {
      background-color: #fff;
    }
    100% {
      background-color: rgba(255, 71, 87,1);
    }
  }
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    width: calc(235px * 3);
  }
  .child {
    border: 2px solid rgba(255, 71, 87,1);
    border-radius: 40px;
    width: 100px;
    height: 40px;
    margin: 10px 0;
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    animation-duration: 2s;
    animation-timing-function: ease;
    animation-iteration-count: 2; /* 动画执行1次 */
  }
  .box:hover .child { /* 鼠标放上时候，才开始执行动画 */
    animation-name: ani1, ani2;
  }
  .child:nth-child(1) {
    animation-direction: normal;
  }
  .child:nth-child(2) {
    animation-direction: reverse;
  }
  .child:nth-child(3) {
    animation-direction: alternate;
  }
  .child:nth-child(4) {
    animation-direction: alternate-reverse;
  }
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250429134843640-1022961330.gif" alt="" width="500" loading="lazy"></p>
<h3 id="animation-fill-mode">animation-fill-mode</h3>
<p>设置元素动画开始时和结束时的状态，可以理解为动画开始和结束时，是用关键帧序列的 0% 还是 100% 的状态，这与运动方向和运动次数有关。</p>
<p>有效值：</p>
<p><code>none</code> 默认值，不设置状态。<br>
<code>forwards</code> 设置为动画结束状态。<br>
<code>backwards</code> 设置为动画开始状态。<br>
<code>both</code> 动画将遵循 forwards 和 backwards 的规则，从而在两个方向上扩展动画属性。</p>
<p>示例：</p>
<pre><code class="language-html">
&lt;div class="box"&gt;
  &lt;div class="child"&gt;none&lt;/div&gt;
  &lt;div class="child"&gt;forwards&lt;/div&gt;
  &lt;div class="child"&gt;backwards&lt;/div&gt;
  &lt;div class="child"&gt;both&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  @keyframes ani1 {
    0% {
      transform: translateX(100px);
    }
    100% {
      transform: translateX(605px);
    }
  }
  @keyframes ani2 {
    0% {
      background-color: #fff;
    }
    100% {
      background-color: rgba(255, 71, 87,1);
    }
  }
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    width: calc(235px * 3);
  }
  .child {
    border: 2px solid rgba(255, 71, 87,1);
    border-radius: 40px;
    width: 100px;
    height: 40px;
    margin: 10px;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    animation-duration: 1s;
    animation-timing-function: ease;
    animation-iteration-count: 1; /* 动画执行1次 */
    animation-direction: alternate; /* 往返运动 */
    animation-delay: 500ms; /* 延迟 500ms 看 fill-mode 效果 */
  }
  .box:hover .child { /* 鼠标放上时候，才开始执行动画 */
    animation-name: ani1, ani2;
  }
  .child:nth-child(1) {
    animation-fill-mode: none;
  }
  .child:nth-child(2) {
    animation-fill-mode: forwards;
  }
  .child:nth-child(3) {
    animation-fill-mode: backwards;
  }
  .child:nth-child(4) {
    animation-fill-mode: both;
  }
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250429134849910-1074074948.gif" alt="" width="500" loading="lazy"></p>
<p>可以看到，在动画开始时，<code>backwards</code> 和 <code>both</code> 会应用 <code>0%</code> 的状态，在动画结束时，<code>forwards</code> 和 <code>both</code> 会应用 <code>100%</code> 的状态。</p>
<h3 id="animation-play-state">animation-play-state</h3>
<p>用于控制动画暂停、播放状态。</p>
<p>比如最常见的音乐播放，有个转圈圈的音符，在音乐暂停时候，音符需要暂停。如果使用移除属性的方式，就会回到元素默认状态，而没办法做到暂停。</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;div class="child"&gt;音符&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  @keyframes ani1 {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    width: 100px;
  }
  .child {
    border: 2px solid rgba(255, 71, 87,1);
    border-radius: 80px;
    width: 80px;
    height: 80px;
    margin: 10px;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    animation-name: ani1;
    animation-duration: 3s;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
  }
  .box .child:hover { /* 鼠标放上时候，暂停动画 */
    animation-play-state: paused;
  }
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250429134859869-1273979034.gif" alt="" width="80" loading="lazy"></p>
<h3 id="animation">animation</h3>
<p>使用简写 <code>animation</code>，可以同时设置多个动画属性，毕竟要实现一个动画需要多个属性配合，只写一个属性就要省事多了。</p>
<p>语法：</p>
<pre><code class="language-css">/* @keyframes duration | timing-function | delay |
iteration-count | direction | fill-mode | play-state | name */
animation: 3s ease-in 1s 2 reverse both paused ani1;

/* 多个动画 */
animation:
  3s linear ani1,
  3s ease-out 5s ani2;
</code></pre>
<p>虽然属性值浏览器没有强制要求先后顺序，就算先后顺序错乱浏览器也会自动修正，但推荐按照语法要求来：duration | timing-function | delay | iteration-count | direction | fill-mode | play-state | name 。</p>
<h3 id="animation-composition">animation-composition</h3>
<p>使用此属性时，需注意浏览器兼容性，基本上都是2023年后的浏览器版本才开始支持！！</p>
<p>有效值：</p>
<p><code>replace</code> 默认值，替换已有属性。<br>
<code>add</code> 累加效果。<br>
<code>accumulate</code> 组合效果。</p>
<p>看示例：</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;div class="child"&gt;replace&lt;/div&gt;
  &lt;div class="child"&gt;add&lt;/div&gt;
  &lt;div class="child"&gt;accumulate&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  @keyframes ani1 {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(605px);
    }
  }
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    width: calc(235px * 3);
  }
  .child {
    border: 2px solid rgba(255, 71, 87,1);
    border-radius: 40px;
    width: 100px;
    height: 40px;
    margin: 10px 0;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    animation: 2s ease infinite ani1;
    transform: rotate(-5deg);
  }
  .child:nth-child(1) {
    animation-composition: replace;
  }
  .child:nth-child(2) {
    animation-composition: add;
  }
  .child:nth-child(3) {
    animation-composition: accumulate;
  }
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250429134921133-1709678659.gif" alt="" width="500" loading="lazy"></p>
<p>以上示例，元素自身携带有 <code>transform: rotate(-5deg);</code>，动画属性也进行了 <code>transform: translateX(605px);</code> 变换，三个值区别就显示出来了：</p>
<ul>
<li>replace 覆盖了元素自身的 <code>transform</code> 变换。</li>
<li>add 将元素自身的属性值放在了动画属性前面，变成了 transform: rotate(-5deg) translateX(605px);</li>
<li>accumulate 将两个属性组合成了一个 3D 矩阵 transform: matrix3d(0.996195, -0.0871557, 0, 0, 0.0871557, 0.996195, 0, 0, 0, 0, 1, 0, 605px, 0, 0, 1);</li>
</ul>
<p>如果使用 width 属性动画，add 和 accumulate 则看起来没有任何区别。</p>
<h3 id="四个实验性属性">四个实验性属性</h3>
<p>实验性属性规范还未定稿，小范围浏览器支持，未来有可能还会发生变化。</p>
<p><code>animation-timeline</code> 指定了用于控制 CSS 动画进度的时间线。<br>
<code>animation-range-start</code> 设置 timeline 的开始位置。<br>
<code>animation-range-end</code> 设置 timeline 的结束位置。<br>
<code>animation-range</code> 简写属性，包含 animation-range-start, animation-range-end。</p>
<p>使用 animation-timeline 做一个跟滚动条有关的动画效果，示例：</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;div class="content"&gt;&lt;/div&gt;
  &lt;div class="child"&gt;timeline&lt;/div&gt;
  &lt;div class="content"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  @keyframes ani1 {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
  .box {
    border: 2px solid rgba(255, 71, 87,0.3);
    margin: 20px 0;
    width: calc(235px * 3);
    height: calc(100px * 3);
    overflow: auto;
  }
  .content {
    height: 400px;
  }
  .child {
    border: 2px solid rgba(255, 71, 87,1);
    border-radius: 40px;
    width: 100px;
    height: 40px;
    margin: 10px 0;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    view-timeline: --subjectReveal block;
    animation-timeline: --subjectReveal;

    animation-name: ani1;
    animation-range: entry 10% contain 200%;
    animation-fill-mode: both;
    animation-duration: 1ms; /* Firefox requires this to apply the animation */
  }
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250429134926675-972040801.gif" alt="" width="500" loading="lazy"></p>
<h2 id="写在最后">写在最后</h2>
<p>其他与动画相关的属性：</p>
<ul>
<li>scroll-timeline 滚动条触发动画</li>
<li>offset-path 让元素沿复杂路径运动</li>
</ul>
<p>CSS 动画在书写上比 JS 简单很多，也让前端的动画实现变得更容易，但一些涉及到用户交互的动画，还是必须让 JS 登场才行。</p>
<p>CSS animation 与 transition 都能实现动画效果，transition 胜在单次属性过渡，而 animation 胜在可以指定关键帧实现更加复杂的动画场景。</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>&nbsp;</p>
<p style="font-size: 18px;font-weight: bold;"><span style="color:rgb(255, 71, 87)">文章正在持续更新中...</span>，首发微信公众号【<span style="color:rgb(255, 71, 87)">前端路引</span>】，欢迎关注公众号获取最新文章。</p>
<p>
  <img style="max-width: 320px;" src="https://images.cnblogs.com/cnblogs_com/linx/2447020/o_250228035031_%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png">
</p>
<p>本文来自博客园，作者：<a href="https://www.cnblogs.com/linx/" target="_blank">前端路引</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/linx/p/18853553" target="_blank">https://www.cnblogs.com/linx/p/18853553</a></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.686319682386574" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-29 13:51">2025-04-29 13:50</span>&nbsp;
<a href="https://www.cnblogs.com/linx">前端路引</a>&nbsp;
Views(<span id="post_view_count">91</span>)&nbsp;
Comments(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18853553);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18853553', targetLink: 'https://www.cnblogs.com/linx/p/18853553', title: 'Web前端入门第 44 问：CSS 循环动画 animation 效果演示' })">举报</a>
</div>
	