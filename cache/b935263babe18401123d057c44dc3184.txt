
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/deali/p/18992863" title="发布于 2025-07-19 14:33">
    <span role="heading" aria-level="2">使用django-crispy-forms美化表单UI</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>欧克，继续来写这个中台项目衍生出来的系列文章</p>
<p>今天介绍一个可以美化界面的库</p>
<p>Django 开发讲究个快，天下武功，唯快不破</p>
<p>forms 功能自然是要用的，自带表单 UI 生成和验证，实现 demo 时非常方便</p>
<p>之前我在 DjangoStarter 框架里已经封装了一套 forms 行为和样式了，在 <code>src/django_starter/contrib/forms</code> 里</p>
<p>这套已经不错了，也是用 TailwindCSS 来实现样式，挺好看的</p>
<p>不过在开发中台项目的时候，我发现了 django-crispy-forms 这个库，提供了更多美化表单 UI 的灵活性。</p>
<h2 id="djangostarter里的实现">DjangoStarter里的实现</h2>
<p>先来看看 DjangoStarter 框架的实现</p>
<pre><code class="language-php"> forms
 ├─ widgets
 │  ├─ __init__.py
 │  ├─ multiple_file.py
 │  └─ flowbite_date_picker.py
 ├─ templates
 │  └─ django_starter
 │     └─ forms
 │        ├─ widgets
 │        └─ form_template.html
 ├─ __init__.py
 ├─ widget_classes.py
 ├─ mixins.py
 └─ base.py
</code></pre>
<h3 id="template">template</h3>
<p>src/django_starter/contrib/forms/templates/django_starter/forms/form_template.html</p>
<pre><code class="language-django">{% for field in form %}
    &lt;div&gt;
        &lt;label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
               for="{{ field.id_for_label }}"&gt;{{ field.label }}&lt;/label&gt;
        {{ field }}
        &lt;div class="mt-2 text-sm text-gray-500 dark:text-gray-200"&gt;
            {{ field.help_text }}
        &lt;/div&gt;
        &lt;div class="mt-2 text-sm text-red-600 dark:text-red-500"&gt;
            {{ field.errors }}
        &lt;/div&gt;
    &lt;/div&gt;
{% endfor %}
</code></pre>
<h3 id="widgets">widgets</h3>
<p>src/django_starter/contrib/forms/widgets/flowbite_date_picker.py</p>
<pre><code class="language-python">from django import forms

class FlowbiteDatePickerWidget(forms.DateInput):
    template_name = 'django_starter/forms/widgets/flowbite_date_picker.html'

    def __init__(self, attrs=None, custom_class=''):
        final_attrs = {'class': custom_class}
        if attrs:
            final_attrs.update(attrs)
        super(FlowbiteDatePickerWidget, self).__init__(attrs=final_attrs)
</code></pre>
<p>src/django_starter/contrib/forms/widgets/multiple_file.py</p>
<pre><code class="language-python">from django import forms


class MultipleFileInput(forms.ClearableFileInput):
    allow_multiple_selected = True


class MultipleFileField(forms.FileField):
    def __init__(self, *args, **kwargs):
        kwargs.setdefault("widget", MultipleFileInput())
        super().__init__(*args, **kwargs)

    def clean(self, data, initial=None):
        single_file_clean = super().clean
        if isinstance(data, (list, tuple)):
            result = [single_file_clean(d, initial) for d in data]
        else:
            result = [single_file_clean(data, initial)]
        return result
</code></pre>
<h3 id="forms-代码">forms 代码</h3>
<p>src/django_starter/contrib/forms/mixins.py</p>
<pre><code class="language-python">from django import forms
from .widget_classes import *


class BaseFormMixin:
    """提供表单样式的通用混入类"""

    widget_classes = {
        forms.TextInput: TEXT_INPUT_CLASS,
        forms.Textarea: TEXT_AREA_CLASS,
        forms.EmailInput: TEXT_INPUT_CLASS,
        forms.PasswordInput: PASSWORD_INPUT_CLASS,
        forms.Select: SELECT_CLASS,
        forms.DateInput: DATE_INPUT_CLASS,
        forms.NumberInput: NUMBER_INPUT_CLASS,
    }

    def apply_widget_classes(self):
        """根据widget类型为表单字段应用样式"""
        for field_name, field in self.fields.items():
            widget_class = self.widget_classes.get(type(field.widget))
            if widget_class:
                field.widget.attrs.update({'class': widget_class})

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.apply_widget_classes()
</code></pre>
<p>widget_classes.py 的代码就不贴了</p>
<p>就是 Tailwind CSS 的样式</p>
<h2 id="crispy-forms-是咋实现的">crispy-forms 是咋实现的</h2>
<p>安装后，简单配置下就能用了</p>
<p>使用起来类似下面这样</p>
<pre><code class="language-django">{% load crispy_forms_tags %}

&lt;div class="sm:col-span-6"&gt;
    {{ form.name|as_crispy_field }}
&lt;/div&gt;

&lt;div class="sm:col-span-3"&gt;
    {{ form.dvr_brand|as_crispy_field }}
&lt;/div&gt;

&lt;div class="sm:col-span-3"&gt;
    {{ form.dvr_model|as_crispy_field }}
&lt;/div&gt;

&lt;div class="sm:col-span-3"&gt;
    {{ form.dvr_ip|as_crispy_field }}
&lt;/div&gt;

&lt;div class="sm:col-span-3"&gt;
    {{ form.status|as_crispy_field }}
&lt;/div&gt;
</code></pre>
<h2 id="安装">安装</h2>
<p>安装依赖</p>
<pre><code class="language-bash">pdm install django-crispy-forms
</code></pre>
<p>然后添加到</p>
<pre><code class="language-python">INSTALLED_APPS = (
    ...
    'crispy_forms',
)
</code></pre>
<h3 id="template-packs">Template packs</h3>
<p>然后还得安装 Template packs</p>
<p>不然只是个空壳</p>
<p>官方支持的只有 Bootstrap 系列，有点 out 了</p>
<p>好在社区也提供了不少，这里我只关注 Tailwind CSS 的库，名字是  <a href="https://github.com/django-crispy-forms/crispy-tailwind" target="_blank" rel="noopener nofollow">crispy-tailwind</a></p>
<pre><code class="language-bash">pdm add crispy-tailwind
</code></pre>
<p>其他 UI 库还有很多，感兴趣的同学可以在官网看到: <a href="https://django-crispy-forms.readthedocs.io/en/latest/install.html#template-packs" target="_blank" rel="noopener nofollow">https://django-crispy-forms.readthedocs.io/en/latest/install.html#template-packs</a></p>
<p>这个同样也得添加进去</p>
<pre><code class="language-python">INSTALLED_APPS = (
    ...
    'crispy_forms',
    'crispy_tailwind',
)
</code></pre>
<h3 id="配置">配置</h3>
<p>在配置文件里修改默认的 Template Packs</p>
<p>src/config/settings/components/crispy_forms.py</p>
<pre><code class="language-python">CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"
</code></pre>
<h2 id="使用">使用</h2>
<p>最简单的用法是只修改模板文件</p>
<pre><code class="language-django">{% load crispy_forms_tags %}

&lt;form method="post" class="my-class"&gt;
    {{ my_formset|crispy }}
&lt;/form&gt;
</code></pre>
<p>目前中台项目也只用到了这个</p>
<p>搭配 <code>django-select2</code> 可以实现下拉搜索框</p>
<p>不过样式不好改，我折腾了一段时间也没改好，索性先不理了，反正就是一个快速实现的 DEMO</p>
<p>后续有需求再用 React 重写页面就行了</p>
<h2 id="小结">小结</h2>
<p>我发现 Django 相关的技术还算是比较小众的</p>
<p>一般写这种文章就没什么人看</p>
<p>我做 Django 也好几年的时间了，框架源码看了，脚手架也搞了，用得非常顺手</p>
<p>虽然现在 python 的 web 框架有很多，不过所有项目最终都会成为 Django 的样子🤣</p>
<p>就这样吧，python 项目这一块，我还是会继续坚持 Django ，毕竟是真的方便好用</p>
<p>当然也不排斥尝试新的玩意，比如最近有个 <a href="https://docs.litestar.dev/2/" target="_blank" rel="noopener nofollow">Litestar</a> 号称要干掉 FastAPI 的，感觉挺有意思的，有时间可以试试看</p>

</div>
<div id="MySignature" role="contentinfo">
    微信公众号：「程序设计实验室」
专注于互联网热门新技术探索与团队敏捷开发实践，包括架构设计、机器学习与数据分析算法、移动端开发、Linux、Web前后端开发等，欢迎一起探讨技术，分享学习实践经验。
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-19 14:33">2025-07-19 14:33</span>&nbsp;
<a href="https://www.cnblogs.com/deali">程序设计实验室</a>&nbsp;
阅读(<span id="post_view_count">147</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18992863);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18992863', targetLink: 'https://www.cnblogs.com/deali/p/18992863', title: '使用django-crispy-forms美化表单UI' })">举报</a>
</div>
        