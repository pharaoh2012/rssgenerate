
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Rong-/p/18695984" title="发布于 2025-01-31 21:36">
    <span role="heading" aria-level="2">回顾我的软件开发经历：开发DAB</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        本文介绍了 DAB协议实现的开发过程。由于设备认证需要，团队面临了开发 DAB 软件的紧迫任务。
项目初期，团队深入学习了 DAB 协议，整理出 28 个核心接口，并提出了改进建议，成功推动了协议的优化。随后，团队设计了两套实现方案，最终选择复用设备内部的 MQTT 服务，尽管带来了安全风险，但通过云端授权和超时关闭机制有效缓解了问题。
在技术选型上，团队选择了 Node.js 以缩短开发周期并复用现有功能。尽管 Node.js 版本成功支撑了多个设备的认证，但仍存在部分设备不支持 Node.js 以及跨部门协调复杂的问题。为此，团队开发了第二版 DAB，采用 C++ 实现，解决了 Node.js 的局限性，并通过适配层实现了多平台支持。
开发过程中，团队通过单元测试、灵活的部署策略和适配层设计，显著提升了开发效率和质量。尽管项目取得了成功，但仍存在一些遗憾，如嵌入进程的部署方式增加了安全依赖，以及与实践结合的时机较晚。
最终，DAB 的开发不仅解决了技术难题，还优化了团队协作和项目管理流程，为未来的设备自动化测试奠定了坚实基础。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h2 id="DiWa-1738329183167" class="heading h2" data-pm-slice="1 1 []">背景介绍</h2>
<p class="paragraph">DAB（Device Automation Bus）是一种基于 MQTT 通信的轻量级协议，主要用于连接客厅中的消费电子产品（如智能电视和游戏机），并实现自动化测试。由于设备认证需要支持 DAB 功能，我们面临了开发 DAB 软件的紧迫任务。时间紧、任务重，挑战巨大。</p>
<hr class="hr">
<h2 id="D4jo-1738329183167" class="heading h2">第一阶段：学习与调研</h2>
<h3 id="2BM8-1738329183167" class="heading h3">1. 学习 DAB 协议</h3>
<p class="paragraph">在项目初期，我深入学习了 DAB 协议，并将其整理成文档与团队分享。通过快速学习，我对 DAB 的整体架构和功能有了全面的理解，并整理出了 28 个核心接口。在此过程中，我发现了第一版协议中缺少对通信设备的标识。第二版协议中，增加了设备标识功能。</p>
<h3 id="uIu3-1738329183167" class="heading h3">2. 调研设备现状</h3>
<p class="paragraph">根据 DAB 协议，我对当前设备的基本情况进行了详细调研，重点分析了以下问题：</p>
<ul class="bullet-list" data-spread="false">
<li class="list-item" data-label="•" data-list-type="bullet" data-spread="false">
<div class="list-item_label"><span style="font-style: italic">实现 DAB 需要哪些组件和功能？</span></div>
</li>
<li class="list-item" data-label="•" data-list-type="bullet" data-spread="false">
<div class="list-item_label"><span style="font-style: italic">现有设备中是否有可复用的组件或功能？</span></div>
</li>
<li class="list-item" data-label="•" data-list-type="bullet" data-spread="false">
<div class="list-item_label"><span style="font-style: italic">如何最大化复用现有资源？</span></div>
</li>
</ul>
<p class="paragraph">通过调研，我明确了设备现状，并制定了两种实现方案。</p>
<hr class="hr">
<h2 id="u7kk-1738329183167" class="heading h2">第二阶段：方案设计与技术选型</h2>
<h3 id="PT6s-1738329183167" class="heading h3">1. 两套实现方案</h3>
<p class="paragraph">我设计了两套 DAB 实现方案：</p>
<ul class="bullet-list" data-spread="false">
<li class="list-item" data-label="•" data-list-type="bullet" data-spread="false">
<div class="list-item_label"><strong class="strong">方案一</strong>：在电视外部部署 MQTT 服务。</div>
</li>
<li class="list-item" data-label="•" data-list-type="bullet" data-spread="false">
<div class="list-item_label"><strong class="strong" style="font-style: italic">方案二</strong><span style="font-style: italic">：复用电视内部的 MQTT 服务。</span></div>
</li>
</ul>
<p class="paragraph">经过评估，方案二在认证场景中更具优势，因为它减少了外部依赖，简化了部署流程。然而，复用设备内部的 MQTT 服务也带来了潜在的安全风险。为此，我们采取了以下安全措施：</p>
<ul class="bullet-list" data-spread="false">
<li class="list-item" data-label="•" data-list-type="bullet" data-spread="false">
<div class="list-item_label">云端授权机制。</div>
</li>
<li class="list-item" data-label="•" data-list-type="bullet" data-spread="false">
<div class="list-item_label"><span style="font-style: italic">超时自动关闭功能。</span></div>
</li>
</ul>
<h3 id="4MWz-1738329183167" class="heading h3">2. 开发语言选择</h3>
<p class="paragraph">在开发语言的选择上，我们综合考虑了以下因素：</p>
<ul class="bullet-list" data-spread="false">
<li class="list-item" data-label="•" data-list-type="bullet" data-spread="false">
<div class="list-item_label">DAB 开源 Demo 的语言支持。</div>
</li>
<li class="list-item" data-label="•" data-list-type="bullet" data-spread="false">
<div class="list-item_label">认证设备的语言兼容性。</div>
</li>
</ul>
<p class="paragraph">尽管团队更熟悉 C++，但为了缩短开发周期并赶上设备认证时间点，我们最终选择了 Node.js。此外，我们将 DAB 服务集成到现有进程中，减少了服务数量并复用了设备功能。</p>
<hr class="hr">
<h2 id="UaWM-1738329183167" class="heading h2">第三阶段：Node.js 版本的开发与挑战</h2>
<h3 id="4v3T-1738329183167" class="heading h3">1. 开发过程</h3>
<p class="paragraph">使用 Node.js 开发 DAB 的过程中，我们充分利用了其单元测试功能，显著提升了开发效率和质量。然而，我们也遇到了一些挑战：</p>
<ul class="bullet-list" data-spread="false">
<li class="list-item" data-label="•" data-list-type="bullet" data-spread="false">
<div class="list-item_label"><strong class="strong">内存泄漏问题</strong>：由于进程内存增加导致异常，通过调整参数解决了这一问题。</div>
</li>
<li class="list-item" data-label="•" data-list-type="bullet" data-spread="false">
<div class="list-item_label"><strong class="strong">接口与设备功能的适配</strong>：DAB 接口需要与多个设备功能模块对接，涉及多个项目组的协作，沟通成本较高。</div>
</li>
</ul>
<h3 id="RrRN-1738329183167" class="heading h3">2. Node.js 版本的局限性</h3>
<p class="paragraph">尽管 Node.js 版本成功支撑了多个设备的 DAB 认证，但仍存在以下问题：</p>
<ol class="ordered-list" data-spread="false">
<li class="list-item" data-label="1." data-list-type="ordered" data-spread="false">
<div class="list-item_label">1.<span style="font-style: italic">部分设备不支持 Node.js。</span></div>
</li>
<li class="list-item" data-label="2." data-list-type="ordered" data-spread="false">
<div class="list-item_label">2.<span style="font-style: italic">安全相关处理与业务逻辑分布在不同的进程中，由不同部门负责，协调成本较高。</span></div>
</li>
</ol><hr class="hr">
<h2 id="5cii-1738329183167" class="heading h2">第四阶段：C++ 版本的重构与优化</h2>
<h3 id="safI-1738329183167" class="heading h3">1. 开发背景</h3>
<p class="paragraph">为了解决 Node.js 版本的局限性，我们开发了第二版 DAB，采用 C++ 实现。这一版本不仅避免了部分设备不支持 Node.js 的问题，还将安全处理逻辑集成到 DAB 内部，减少了跨部门沟通的复杂性。</p>
<h3 id="6Ebi-1738329183167" class="heading h3">2. 多平台支持与灵活性</h3>
<p class="paragraph">在第二版设计中，我们特别注重灵活性和多平台支持：</p>
<ul class="bullet-list" data-spread="false">
<li class="list-item" data-label="•" data-list-type="bullet" data-spread="false">
<div class="list-item_label">支持在 Windows、公司开发平台以及设备上运行。</div>
</li>
<li class="list-item" data-label="•" data-list-type="bullet" data-spread="false">
<div class="list-item_label">既可以独立运行，也可以嵌入到其他进程中。</div>
</li>
</ul>
<p class="paragraph">为了实现这一目标，我添加了一个适配层，用于屏蔽不同平台的差异。适配层提供了多种实现策略，根据运行场景动态选择，从而加快了开发和调试速度。</p>
<hr class="hr">
<h2 id="5MdK-1738329183167" class="heading h2">第五阶段：开发中的经验与反思</h2>
<h3 id="5vkJ-1738329183167" class="heading h3">1. 项目管理与沟通</h3>
<p class="paragraph">由于时间紧迫，我采取了以下措施确保项目顺利推进：</p>
<ul class="bullet-list" data-spread="false">
<li class="list-item" data-label="•" data-list-type="bullet" data-spread="false">
<div class="list-item_label">提前与参与者沟通，明确目标、时间要求和注意事项。</div>
</li>
<li class="list-item" data-label="•" data-list-type="bullet" data-spread="false">
<div class="list-item_label">使用 Jira 工具进行任务分解和进度跟踪。</div>
</li>
<li class="list-item" data-label="•" data-list-type="bullet" data-spread="false">
<div class="list-item_label"><span style="font-style: italic">在开发过程中及时纠偏，确保项目按计划进行。</span></div>
</li>
</ul>
<h3 id="yDpS-1738329183167" class="heading h3">2. 技术设计与优化</h3>
<p class="paragraph">在技术实现上，我遵循了正交性原则，尽量减少模块之间的耦合。例如：</p>
<ul class="bullet-list" data-spread="false">
<li class="list-item" data-label="•" data-list-type="bullet" data-spread="false">
<div class="list-item_label">使用函数对象代替接口，使每个模块独立且无依赖。</div>
</li>
<li class="list-item" data-label="•" data-list-type="bullet" data-spread="false">
<div class="list-item_label">为每个模块编写单元测试，提升开发质量和速度。</div>
</li>
</ul>
<p class="paragraph">然而，在适配层设计中，我一度犯了过度设计的错误，尝试将 Netflix 的 C 语言面向对象实现引入项目中。经过反思，我及时调整了设计，简化了代码结构。</p>
<h4 id="B3mp-1738329183167" class="heading h4">调整前的代码：</h4>
<p class="paragraph">&nbsp;</p>
<div class="code-fence-container"><select>
<option value="">--</option>
<option value="javascript">javascript</option>
<option value="typescript">typescript</option>
<option value="shell">shell</option>
<option value="bash">bash</option>
<option value="sql">sql</option>
<option value="json">json</option>
<option value="html">html</option>
<option value="css">css</option>
<option value="c">c</option>
<option value="cpp">cpp</option>
<option value="java">java</option>
<option value="ruby">ruby</option>
<option value="python">python</option>
<option value="go">go</option>
<option value="rust">rust</option>
<option value="markdown">markdown</option>
</select>
<pre class="code-fence" data-language="cpp"><code>#include &lt;string&gt;
#include &lt;vector&gt;
#include "dab/dab_api.h"

extern "C" {
struct DAB_API_IO {
    DAB_Interface iface;
    bool (*getKeyList)(std::vector&lt;std::string&gt;&amp; list);
    bool (*pressKey)(const char* key, int durationMs);
    bool (*catpureImage2png)(const char* file);
};
const DAB_API_IO&amp; getDABAPIIO();
}</code></pre>
</div>
<h4 id="zpPG-1738329183167" class="heading h4">调整后的代码：</h4>
<p class="paragraph">&nbsp;</p>
<div class="code-fence-container"><select>
<option value="">--</option>
<option value="javascript">javascript</option>
<option value="typescript">typescript</option>
<option value="shell">shell</option>
<option value="bash">bash</option>
<option value="sql">sql</option>
<option value="json">json</option>
<option value="html">html</option>
<option value="css">css</option>
<option value="c">c</option>
<option value="cpp">cpp</option>
<option value="java">java</option>
<option value="ruby">ruby</option>
<option value="python">python</option>
<option value="go">go</option>
<option value="rust">rust</option>
<option value="markdown">markdown</option>
</select>
<pre class="code-fence" data-language="cpp"><code>#pragma once
#include &lt;string&gt;
#include &lt;vector&gt;

extern "C" {
    bool dab_api_getKeyList(std::vector&lt;std::string&gt;&amp; list);
    bool dab_api_pressKey(const char* key, int durationMs);
    bool dab_api_catpureImage2png(const char* file);
}</code></pre>
</div>
<hr class="hr">
<h2 id="TDy8-1738329183168" class="heading h2">第二版的亮点与遗憾</h2>
<h3 id="2Xc2-1738329183168" class="heading h3">亮点</h3>
<ol class="ordered-list" data-spread="false">
<li class="list-item" data-label="1." data-list-type="ordered" data-spread="false">
<div class="list-item_label">1.<strong class="strong" style="font-style: italic">单元测试</strong><span style="font-style: italic">：摆脱环境依赖，在开发云平台、设备等环境中快速执行测试，提高开发效率。</span></div>
</li>
<li class="list-item" data-label="2." data-list-type="ordered" data-spread="false">
<div class="list-item_label">2.<strong class="strong" style="font-style: italic">灵活的部署</strong><span style="font-style: italic">：支持在 Windows、开发云平台和设备上单独运行，也可以嵌入到其他进程中运行，极大提升了灵活性。</span></div>
</li>
<li class="list-item" data-label="3." data-list-type="ordered" data-spread="false">
<div class="list-item_label">3.<strong class="strong" style="font-style: italic">适配层</strong><span style="font-style: italic">：隔离变化，使代码逻辑快速稳定。</span></div>
</li>
<li class="list-item" data-label="4." data-list-type="ordered" data-spread="false">
<div class="list-item_label">4.<strong class="strong" style="font-style: italic">灵活的接入策略</strong><span style="font-style: italic">：为各平台切换提供便利，即使在依赖项不具备的情况下也能顺利开展工作。</span></div>
</li>
<li class="list-item" data-label="5." data-list-type="ordered" data-spread="false">
<div class="list-item_label">5.<strong class="strong" style="font-style: italic">与实践结合</strong><span style="font-style: italic">：提出了许多对测试有用的应用场景和扩展。</span></div>
</li>
<li class="list-item" data-label="6." data-list-type="ordered" data-spread="false">
<div class="list-item_label">6.<strong class="strong" style="font-style: italic">高效的开发速度</strong><span style="font-style: italic">：通过合适的模式和策略，极大加快了开发速度。</span></div>
</li>
<li class="list-item" data-label="7." data-list-type="ordered" data-spread="false">
<div class="list-item_label">7.<strong class="strong" style="font-style: italic">文档生成代码</strong><span style="font-style: italic">：实践了由文档生成代码的方式，加快了开发速度并保证了准确性。</span></div>
</li>
</ol>
<h3 id="AkAr-1738329183168" class="heading h3">遗憾</h3>
<ol class="ordered-list" data-spread="false">
<li class="list-item" data-label="1." data-list-type="ordered" data-spread="false">
<div class="list-item_label">1.<strong class="strong" style="font-style: italic">嵌入进程的部署方式</strong><span style="font-style: italic">：增加了对安全性的依赖，特别是对安全性的要求更高。</span></div>
</li>
<li class="list-item" data-label="2." data-list-type="ordered" data-spread="false">
<div class="list-item_label">2.<strong class="strong" style="font-style: italic">与实践结合的时机</strong><span style="font-style: italic">：最初主要围绕认证需求开发，未能更早与实践和用户结合，导致成熟速度较慢。</span></div>
</li>
</ol><hr class="hr">
<h2 id="lHoo-1738329183168" class="heading h2">总结</h2>
<p class="paragraph">通过 DAB 的开发，我深刻体会到在紧迫时间内完成复杂项目的挑战与成就感。从协议学习到多平台实现，我们不仅解决了技术难题，还优化了团队协作和项目管理流程。</p>
<p class="paragraph">DAB github地址：<a href="https://github.com/xumingxsh/dab" rel="noopener nofollow">xumingxsh/dab</a></p>
<p class="paragraph">DAB标准：https://github.com/device-automation-bus/dab-specification-2.0</p>
<hr class="hr">
<p class="paragraph"><strong class="strong">关键词</strong>：DAB、MQTT、Node.js、C++、多平台支持、正交性原则、单元测试、项目管理</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="2.5185614985555556" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-31 22:17">2025-01-31 21:36</span>&nbsp;
<a href="https://www.cnblogs.com/Rong-">荣--</a>&nbsp;
阅读(<span id="post_view_count">183</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18695984" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18695984);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18695984', targetLink: 'https://www.cnblogs.com/Rong-/p/18695984', title: '回顾我的软件开发经历：开发DAB' })">举报</a>
</div>
        