
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/yanshajiuzhou/p/18710634" title="发布于 2025-02-11 22:50">
    <span role="heading" aria-level="2">备忘录模式</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        备忘录模式的核心思想是将对象的状态保存在一个独立的对象中，这样既能保持对象的封装性，又能方便地恢复对象到之前的状态。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><span id="cke_bm_1490S">备忘录（Memento、Snapshot）模式属于行为型模式的一种。</span></p>
<p>备忘录模式主要用于捕获一个对象的内部状态，以便在将来的某个时候<strong>恢复</strong>此状态。</p>
<p>备忘录模式的核心思想是将对象的状态保存在一个独立的对象中，这样既能保持对象的封装性，又能方便地恢复对象到之前的状态。</p>
<p>我们使用的几乎所有软件都用到了备忘录模式。大多数软件提供的保存、打开，以及编辑过程中的Undo、Redo都是备忘录模式的应用。Java的序列化也可以看作是备忘录模式。</p>
<p>备忘录模式适合在有撤销操作、恢复状态、对象状态追踪等场景下使用。</p>
<p>备忘录模式通常有以下组成部分：</p>
<ul>
<li>Memento（备忘录）：存储对象的内部状态。备忘录通常是一个不可变的对象，即在创建之后不允许更改它的内容。</li>
<li>Originator（发起人）：发起人是需要保存其状态的对象。它创建一个备忘录，保存当前的状态，并可以通过备忘录恢复到之前的状态。发起人负责生成和恢复备忘录，但它对备忘录的内部状态一无所知。</li>
<li>Caretaker（看护者）：看护者负责保存备忘录，但它不能修改备忘录的内容。看护者是一个管理者，通常用于保存多个备忘录的状态，供需要时进行恢复。</li>
</ul>
<p>如果我们使用的编程语言支持<strong>嵌套类</strong>（如Java、C++、&nbsp;C# 等），则可将备忘录嵌套在Originator类中； 如果不支持（如PHP等）， 那么我们可以从备忘录类中抽取一个空接口，然后让其他所有对象通过接口来引用备忘录。 我们还可以在该接口中添加一些元数据操作，但不能暴露Originator类的状态。</p>
<p>我们用备忘录模式实现一个简单的文本编辑器中的撤销功能。当用户输入文本时，编辑器会保存当前文本状态，这样当用户点击“撤销”按钮时，编辑器能够恢复到上一个状态。</p>
<p>1、Memento: 备忘录类</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="3" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20Memento%3A%20%E5%A4%87%E5%BF%98%E5%BD%95%E7%B1%BB%5Cnclass%20Memento%20%7B%5Cn%20%20%20%20private%20String%20state%3B%5Cn%5Cn%20%20%20%20public%20Memento(String%20state)%20%7B%5Cn%20%20%20%20%20%20%20%20this.state%20%3D%20state%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20String%20getState()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20state%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="language-java hljs"><span class="hljs-comment">// Memento: 备忘录类
<span class="hljs-keyword">class <span class="hljs-title class_">Memento {
    <span class="hljs-keyword">private String state;

    <span class="hljs-keyword">public <span class="hljs-title function_">Memento<span class="hljs-params">(String state) {
        <span class="hljs-built_in">this.state = state;
    }

    <span class="hljs-keyword">public String <span class="hljs-title function_">getState<span class="hljs-params">() {
        <span class="hljs-keyword">return state;
    }
}</span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1171560/202502/1171560-20250211225040065-228103236.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"></span></div>
<p>2、Originator: 发起人类</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="2" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20Originator%3A%20%E5%8F%91%E8%B5%B7%E4%BA%BA%E7%B1%BB%5Cnclass%20TextEditor%20%7B%5Cn%20%20%20%20private%20String%20text%3B%5Cn%5Cn%20%20%20%20public%20void%20setText(String%20text)%20%7B%5Cn%20%20%20%20%20%20%20%20this.text%20%3D%20text%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20String%20getText()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20text%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BA%E5%A4%87%E5%BF%98%E5%BD%95%5Cn%20%20%20%20public%20Memento%20saveToMemento()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Memento(text)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E6%81%A2%E5%A4%8D%E7%8A%B6%E6%80%81%5Cn%20%20%20%20public%20void%20restoreFromMemento(Memento%20memento)%20%7B%5Cn%20%20%20%20%20%20%20%20this.text%20%3D%20memento.getState()%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="language-java hljs"><span class="hljs-comment">// Originator: 发起人类
<span class="hljs-keyword">class <span class="hljs-title class_">TextEditor {
    <span class="hljs-keyword">private String text;

    <span class="hljs-keyword">public <span class="hljs-keyword">void <span class="hljs-title function_">setText<span class="hljs-params">(String text) {
        <span class="hljs-built_in">this.text = text;
    }

    <span class="hljs-keyword">public String <span class="hljs-title function_">getText<span class="hljs-params">() {
        <span class="hljs-keyword">return text;
    }

    <span class="hljs-comment">// 创建备忘录
    <span class="hljs-keyword">public Memento <span class="hljs-title function_">saveToMemento<span class="hljs-params">() {
        <span class="hljs-keyword">return <span class="hljs-keyword">new <span class="hljs-title class_">Memento(text);
    }

    <span class="hljs-comment">// 恢复状态
    <span class="hljs-keyword">public <span class="hljs-keyword">void <span class="hljs-title function_">restoreFromMemento<span class="hljs-params">(Memento memento) {
        <span class="hljs-built_in">this.text = memento.getState();
    }
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1171560/202502/1171560-20250211225040065-228103236.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"></span></div>
<p>3、Caretaker: 看护者类</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="1" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20Caretaker%3A%20%E7%9C%8B%E6%8A%A4%E8%80%85%E7%B1%BB%5Cnclass%20TextEditorHistory%20%7B%5Cn%20%20%20%20private%20List%3CMemento%3E%20mementoList%20%3D%20new%20ArrayList%3C%3E()%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E4%BF%9D%E5%AD%98%E5%A4%87%E5%BF%98%E5%BD%95%5Cn%20%20%20%20public%20void%20addMemento(Memento%20memento)%20%7B%5Cn%20%20%20%20%20%20%20%20mementoList.add(memento)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E7%89%B9%E5%AE%9A%E7%B4%A2%E5%BC%95%E7%9A%84%E5%A4%87%E5%BF%98%E5%BD%95%5Cn%20%20%20%20public%20Memento%20getMemento(int%20index)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20mementoList.get(index)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="language-java hljs"><span class="hljs-comment">// Caretaker: 看护者类
<span class="hljs-keyword">class <span class="hljs-title class_">TextEditorHistory {
    <span class="hljs-keyword">private List&lt;Memento&gt; mementoList = <span class="hljs-keyword">new <span class="hljs-title class_">ArrayList&lt;&gt;();

    <span class="hljs-comment">// 保存备忘录
    <span class="hljs-keyword">public <span class="hljs-keyword">void <span class="hljs-title function_">addMemento<span class="hljs-params">(Memento memento) {
        mementoList.add(memento);
    }

    <span class="hljs-comment">// 获取特定索引的备忘录
    <span class="hljs-keyword">public Memento <span class="hljs-title function_">getMemento<span class="hljs-params">(<span class="hljs-type">int index) {
        <span class="hljs-keyword">return mementoList.get(index);
    }
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1171560/202502/1171560-20250211225040065-228103236.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"></span></div>
<p>4、客户端</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="0" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%A3%E7%A0%81%5Cnpublic%20class%20MementoPatternDemo%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20TextEditor%20editor%20%3D%20new%20TextEditor()%3B%5Cn%20%20%20%20%20%20%20%20TextEditorHistory%20history%20%3D%20new%20TextEditorHistory()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20editor.setText(%5C%22Hello%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20history.addMemento(editor.saveToMemento())%3B%20%2F%2F%20%E4%BF%9D%E5%AD%98%E5%BD%93%E5%89%8D%E7%8A%B6%E6%80%81%5Cn%5Cn%20%20%20%20%20%20%20%20editor.setText(%5C%22Hello%2C%20World!%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20history.addMemento(editor.saveToMemento())%3B%20%2F%2F%20%E4%BF%9D%E5%AD%98%E5%BD%93%E5%89%8D%E7%8A%B6%E6%80%81%5Cn%5Cn%20%20%20%20%20%20%20%20editor.setText(%5C%22Hello%2C%20World!%20How%20are%20you%3F%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22Current%20Text%3A%20%5C%22%20%2B%20editor.getText())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%81%A2%E5%A4%8D%E5%88%B0%E4%B8%8A%E4%B8%80%E4%B8%AA%E7%8A%B6%E6%80%81%5Cn%20%20%20%20%20%20%20%20editor.restoreFromMemento(history.getMemento(1))%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22After%20undo%3A%20%5C%22%20%2B%20editor.getText())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%81%A2%E5%A4%8D%E5%88%B0%E6%9C%80%E5%88%9D%E7%8A%B6%E6%80%81%5Cn%20%20%20%20%20%20%20%20editor.restoreFromMemento(history.getMemento(0))%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22After%20undo%20again%3A%20%5C%22%20%2B%20editor.getText())%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="language-java hljs"><span class="hljs-comment">// 客户端代码
<span class="hljs-keyword">public <span class="hljs-keyword">class <span class="hljs-title class_">MementoPatternDemo {
    <span class="hljs-keyword">public <span class="hljs-keyword">static <span class="hljs-keyword">void <span class="hljs-title function_">main<span class="hljs-params">(String[] args) {
        <span class="hljs-type">TextEditor <span class="hljs-variable">editor <span class="hljs-operator">= <span class="hljs-keyword">new <span class="hljs-title class_">TextEditor();
        <span class="hljs-type">TextEditorHistory <span class="hljs-variable">history <span class="hljs-operator">= <span class="hljs-keyword">new <span class="hljs-title class_">TextEditorHistory();

        editor.setText(<span class="hljs-string">"Hello");
        history.addMemento(editor.saveToMemento()); <span class="hljs-comment">// 保存当前状态

        editor.setText(<span class="hljs-string">"Hello, World!");
        history.addMemento(editor.saveToMemento()); <span class="hljs-comment">// 保存当前状态

        editor.setText(<span class="hljs-string">"Hello, World! How are you?");
        System.out.println(<span class="hljs-string">"Current Text: " + editor.getText());

        <span class="hljs-comment">// 恢复到上一个状态
        editor.restoreFromMemento(history.getMemento(<span class="hljs-number">1));
        System.out.println(<span class="hljs-string">"After undo: " + editor.getText());

        <span class="hljs-comment">// 恢复到最初状态
        editor.restoreFromMemento(history.getMemento(<span class="hljs-number">0));
        System.out.println(<span class="hljs-string">"After undo again: " + editor.getText());
    }
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1171560/202502/1171560-20250211225040065-228103236.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"></span></div>
<p>备忘录模式的<strong>优缺点</strong>。</p>
<p>优点：</p>
<ul>
<li>保持封装性：备忘录模式允许将对象的状态保存在外部，但不暴露对象的内部实现。发起人对象可以将状态保存在备忘录中，而无需让其他对象直接访问内部状态。</li>
<li>简化恢复操作：通过备忘录，系统可以轻松地将对象恢复到之前的状态，而无需手动追踪每个状态的变更。</li>
<li>支持多次恢复：可以创建多个备忘录对象，用于在不同的时刻恢复到不同的状态。</li>
</ul>
<p>缺点：</p>
<ul>
<li>增加了系统的复杂性：备忘录模式涉及多个对象的协作，可能会导致系统设计更加复杂。</li>
<li>内存消耗大：每次状态变更都会创建一个新的备忘录，这可能导致内存消耗较大，尤其是状态变化频繁时。</li>
<li>备忘录管理问题：如果管理不当，备忘录可能会堆积成大量的无用对象，需要额外的清理策略。</li>
</ul>
<p>我们可以同时使用<strong>命令模式</strong>和<strong>备忘录模式</strong>来实现 “撤销”功能。命令用于对目标对象执行各种不同的操作，备忘录用来保存一条命令执行前该对象的状态。</p>
<p style="text-align: right"><span style="color: rgba(0, 204, 255, 1)">人生的确充满艰难险阻，但回荡不息的主旋律，是不期而遇的温暖和生生不息的希望。-- 烟沙九洲</span></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.06107232381712963" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-11 22:51">2025-02-11 22:50</span>&nbsp;
<a href="https://www.cnblogs.com/yanshajiuzhou">烟沙九洲</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18710634" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18710634);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18710634', targetLink: 'https://www.cnblogs.com/yanshajiuzhou/p/18710634', title: '备忘录模式' })">举报</a>
</div>
        