<!----> <meta itemprop="headline" content="nginx（前端必会-项目部署-精简通用篇）"> <meta itemprop="keywords" content="前端,Nginx"> <meta itemprop="datePublished" content="2024-10-11T06:11:39.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="zykk"> <meta itemprop="url" content="https://juejin.cn/user/2740441517398525"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-7cdd11fb="">
            nginx（前端必会-项目部署-精简通用篇）
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-7cdd11fb=""><div class="author-info-box" data-v-7cdd11fb=""><div class="author-name" data-v-7cdd11fb=""><a href="/user/2740441517398525/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-7cdd11fb=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    zykk
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-7cdd11fb=""><time datetime="2024-10-11T06:11:39.000Z" title="Fri Oct 11 2024 06:11:39 GMT+0000 (Coordinated Universal Time)" class="time" data-v-7cdd11fb="">
                    2024-10-11
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-7cdd11fb=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-7cdd11fb=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-7cdd11fb=""></circle></svg> <span class="views-count" data-v-7cdd11fb="">
                    9,244
                  </span> <span class="read-time" data-v-7cdd11fb=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-7cdd11fb=""><rect width="16" height="16" fill="none" data-v-7cdd11fb=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-7cdd11fb=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-7cdd11fb=""></path></svg>
                    阅读7分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-7cdd11fb=""></div> <!----> <!----></div> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-7cdd11fb=""><div class="article-viewer markdown-body result"><h2 data-id="heading-0">前言</h2>
<p>最近在公司部署项目时遇上了一点关于nginx的问题，于是就想着写一篇关于nginx的文章...</p>
<p>主要给小白朋友分享，nginx是什么，nginx有什么用，最后到nginx的实际应用，项目部署。</p>
<h2 data-id="heading-1">nginx</h2>
<p>公司项目刚刚上线，用户量少访问量不大，并发量低，一个jar包启动应用就能够解决问题了。但是随着项目的不断扩大，用户体量大增加，一台服务器可能就无法满足我们的需求了（当初是一个人用一个服务器，现在是多人用一个服务器，时间长了服务器都要红温）。</p>
<p>于是乎，我们就会想着增加服务器，那么我们多个项目就启动在多个服务器上面，用户需要访问，就需要做一个代理服务器，通过代理请求服务器来做前后端之间的转发和请求包括跨域等等问题。</p>
<p>那么到这就不得不说一下nginx的<code>反向代理</code>了，正向代理指的其实就是比如我们通过VPN去请求xxx，这里就是因为用到了其他地方的代理服务器，这是一个从客户端到服务端的过程，然而反向代理其实就是，因为我们有多个服务器，最后都映射到了代理服务器身上，客户端最终访问的都是例如：baidu.com，但是事实上他底下是有多台服务器的。</p>
<p>既然他有多台服务器，每台服务器的性能，各种条件都是不同的，这里就要说到nginx的另一个能力---<code>负载均衡</code>，可以给不同的服务器增加不同的权重，能力更强的服务器可以增大他的负荷，减轻其他服务器的负荷</p>
<p>这就是大家常说的nginx:<code>Nginx</code> 是一个高性能的 <code>HTTP</code> 和<code>反向代理</code>服务器，它还支持 IMAP/POP3/SMTP 代理服务器。</p>
<p><code>nginx的特点：</code></p>
<ol>
<li>
<p><strong>高性能</strong>：</p>
<ul>
<li>高并发连接处理能力：Nginx 使用异步事件驱动模型（如 epoll, kqueue 等），能够高效地处理大量并发连接。</li>
<li>低资源消耗：与 Apache 相比，Nginx 在相同硬件环境下通常消耗更少的内存和其他系统资源。</li>
</ul>
</li>
<li>
<p><strong>稳定性</strong>：</p>
<ul>
<li>运行稳定：在高负载情况下依然保持稳定运行，崩溃或错误的发生率较低。</li>
<li>平滑升级：可以在不停止服务的情况下进行升级或配置更改。</li>
</ul>
</li>
<li>
<p><strong>丰富的功能集</strong>：</p>
<ul>
<li>反向代理：可以作为反向代理服务器，将请求转发到后端服务器。</li>
<li>URL 重写：通过简单的配置即可实现复杂的 URL 重写规则。</li>
<li>动态内容与静态内容分离：可以配置为只处理静态文件请求，而动态请求则交给后端应用服务器处理。</li>
</ul>
</li>
<li>
<p><strong>高度可配置性</strong>：</p>
<ul>
<li>灵活的配置选项：可以根据需要定制各种配置选项，以适应不同的应用场景。</li>
<li>容易管理：配置文件结构清晰，易于理解和修改。</li>
</ul>
</li>
<li>
<p><strong>负载均衡</strong>：</p>
<ul>
<li>支持多种负载均衡算法，例如轮询、加权轮询、最少连接数等，可以帮助分散到多个后端服务器的流量。</li>
</ul>
</li>
<li>
<p><strong>缓存功能</strong>：</p>
<ul>
<li>可用作HTTP缓存服务器，减少对后端数据库或应用服务器的压力。</li>
</ul>
</li>
<li>
<p><strong>安全性</strong>：</p>
<ul>
<li>提供 SSL/TLS 加密支持，保障数据传输安全。</li>
<li>可以设置访问控制、防火墙规则等来增强安全性。</li>
</ul>
</li>
<li>
<p><strong>模块化架构</strong>：</p>
<ul>
<li>支持第三方模块扩展功能，比如 Nginx+Lua 使得开发者可以在 Nginx 中直接使用 Lua 脚本语言编写插件或处理逻辑。</li>
</ul>
</li>
<li>
<p><strong>日志与监控</strong>：</p>
<ul>
<li>详细的访问和错误日志记录，便于故障排查和性能分析。</li>
<li>支持实时监控和统计，方便管理员了解当前系统的状态。</li>
</ul>
</li>
</ol>
<h2 data-id="heading-2">nginx下载</h2>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fnginx.org%2F" target="_blank" title="https://nginx.org/" ref="nofollow noopener noreferrer">nginx.org/</a> 大家自行下载，我下载的是一个稳定版本，以防万一。下载完毕之后大家自行解压即可（默认大家是windows系统），解压完毕之后，可以看到nginx.exe就是我们的启动文件，conf就是配置文件，nginx.config中可以看到server的listen监听端口为80，这意味着当我们访问了80端口就会被nginx拦截，首先启动nginx，可以直接双击nginx.exe也可以通过cmd命令行直接输入nginx.exe运行（推荐，因为这样不会关闭窗口，双击的话就是一闪而过了）</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/6370de17dd6e4648881612dc437e4723~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenlraw==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736490008&amp;x-signature=MmsdKi4nSOky0WKZD42Unjd752I%3D" alt="image.png" loading="lazy"></p>
<p>接下来我们浏览器访问localhost:80</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/b9011f3324b746a39258f94373b27d30~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenlraw==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736490008&amp;x-signature=9oMOFdeKlp7DrEg%2BcRMdOItQmj0%3D" alt="image.png" loading="lazy"></p>
<p>启动成功。</p>
<h2 data-id="heading-3">nginx常用命令</h2>
<p>停止：nginx.exe -s stop
安全退出：nginx.exe -s quit
重新加载配置文件：nginx.exe -s reload（常用）例如我们更改了端口
查看nginx进程：ps aux|grep nginx</p>
<h2 data-id="heading-4">实际应用</h2>
<p>下载完毕后打开可以看到：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ae29312ef50d412780798e71252281d7~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenlraw==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736490008&amp;x-signature=UQoacUMyv66AYNcSSLUVzjuIrPc%3D" alt="image.png" loading="lazy"></p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/3d1c0bc02487424ba8e487778932f15d~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenlraw==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736490008&amp;x-signature=lyTF5Bm3tMF%2FdG0mnOVw7VhJpRo%3D" alt="image.png" loading="lazy"></p>
<p>于是我们建立aa、bb两个文件夹，我们将index.html 分别放入aa和bb，这两个页面都打上自己的标记aa/bb</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/5a8674887ae84f919cb8780646291803~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenlraw==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736490008&amp;x-signature=qdmW2dYTyq1eaSXEZ48Ui6h1%2FXw%3D" alt="image.png" loading="lazy"></p>
<p>然后我们对nginx进行配置 nginx.conf</p>
<pre><code class="hljs language-conf" lang="conf">server {
       listen       8001;
       server_name  localhost;

       location / {
           root   html/aa;
           index  index.html index.htm;
       }
    }

    server {
       listen       8002;
       server_name  localhost;

       location / {
           root   html/bb;
           index  index.html index.htm;
       }
    }
</code></pre>
<p>如果没结束，记得reload</p>
<pre><code class="hljs language-js" lang="js">nginx.<span class="hljs-property">exe</span> -s reload
</code></pre>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/1a4538b53b1d4c439ed3758696ae5b0f~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenlraw==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736490008&amp;x-signature=T4Y9fAHjDMYuIPJc3%2BVrTin7PQc%3D" alt="image.png" loading="lazy"></p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/eee46fc3758d42f28aa4feaedcae59cb~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenlraw==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736490008&amp;x-signature=V32wmfwVjC5wTQFuWGQ8NmmREwc%3D" alt="image.png" loading="lazy"></p>
<p>接下来我们放一个项目进去，打包后放入html中</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ef79748c3ce9427f8b1dcbefade58ee9~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenlraw==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736490008&amp;x-signature=YboV%2BuMLbNqt78qId8BHndpUcww%3D" alt="image.png" loading="lazy"></p>
<p>修改配置文件，然后reload</p>
<pre><code class="hljs language-js" lang="js"> server {
        listen       <span class="hljs-number">80</span>;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.<span class="hljs-property">access</span>.<span class="hljs-property">log</span>  main;

        location / {
            root   html/dist;
            index  index.<span class="hljs-property">html</span> index.<span class="hljs-property">htm</span>;
        }

</code></pre>
<p>然后我们访问localhost，端口默认是80所以不用写，如果失败，可能是reload失败，再次reload就可</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/8e96f6bdddbd422eb0d222e9615a3e57~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenlraw==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736490008&amp;x-signature=GxaOWepvsK%2BcEGrqOXPSVFq9twI%3D" alt="image.png" loading="lazy"></p>
<h2 data-id="heading-5">其他配置问题</h2>
<p>Nginx的主配置文件(<code>conf/nginx.conf</code>)按以下结构组织：</p>
<ul>
<li>全局块 与Nginx运行相关的全局设置</li>
<li>events 与网络连接有关的设置</li>
<li>http 代理、缓存、日志、虚拟主机等的配置</li>
<li>server 虚拟主机的参数设置（一个http块可包含多个server块）</li>
<li>location 定义请求路由及页面处理方式</li>
</ul>
<p>前端开发中经常会遇到跨域问题，nginx可以做代理轻松解决，事实上原理和cors一样，设置请求头</p>
<pre><code class="hljs language-js" lang="js">server {
 &nbsp; &nbsp;location /api {
 &nbsp; &nbsp; &nbsp; &nbsp;proxy_pass <span class="hljs-attr">http</span>:<span class="hljs-comment">//backend_server;</span>
 &nbsp; &nbsp; &nbsp; &nbsp;add_header <span class="hljs-title class_">Access</span>-<span class="hljs-title class_">Control</span>-<span class="hljs-title class_">Allow</span>-<span class="hljs-title class_">Origin</span> *;
 &nbsp; &nbsp; &nbsp; &nbsp;add_header <span class="hljs-title class_">Access</span>-<span class="hljs-title class_">Control</span>-<span class="hljs-title class_">Allow</span>-<span class="hljs-title class_">Methods</span> <span class="hljs-string">'GET, POST, OPTIONS'</span>;
 &nbsp; &nbsp; &nbsp; &nbsp;add_header <span class="hljs-title class_">Access</span>-<span class="hljs-title class_">Control</span>-<span class="hljs-title class_">Allow</span>-<span class="hljs-title class_">Headers</span> <span class="hljs-string">'Origin, Content-Type, Accept'</span>;
 &nbsp;  }
}

</code></pre>
<p>缓存问题：</p>
<pre><code class="hljs language-js" lang="js">proxy_cache_path /data/nginx/cache levels=<span class="hljs-number">1</span>:<span class="hljs-number">2</span> keys_zone=<span class="hljs-attr">my_cache</span>:10m max_size=1g inactive=60m use_temp_path=off;

server {
 &nbsp; &nbsp;location / {
 &nbsp; &nbsp; &nbsp; &nbsp;proxy_cache my_cache;
 &nbsp; &nbsp; &nbsp; &nbsp;proxy_pass <span class="hljs-attr">http</span>:<span class="hljs-comment">//backend;</span>
 &nbsp; &nbsp; &nbsp; &nbsp;add_header X-<span class="hljs-title class_">Cache</span>-<span class="hljs-title class_">Status</span> $upstream_cache_status;
 &nbsp;  }
}

</code></pre>
<p>https提升安全性</p>
<pre><code class="hljs language-js" lang="js">server {
 &nbsp; &nbsp;listen <span class="hljs-number">443</span> ssl;
 &nbsp; &nbsp;server_name example.<span class="hljs-property">com</span>;

 &nbsp; &nbsp;ssl_certificate /etc/nginx/ssl/example.<span class="hljs-property">com</span>.<span class="hljs-property">crt</span>;
 &nbsp; &nbsp;ssl_certificate_key /etc/nginx/ssl/example.<span class="hljs-property">com</span>.<span class="hljs-property">key</span>;

 &nbsp; &nbsp;location / {
 &nbsp; &nbsp; &nbsp; &nbsp;proxy_pass <span class="hljs-attr">http</span>:<span class="hljs-comment">//backend_server;</span>
 &nbsp;  }
}

</code></pre>
<p>一个比较全面的配置</p>
<pre><code class="hljs language-js" lang="js"># 全局段配置
# ------------------------------

# 指定运行nginx的用户或用户组，默认为nobody。
#user administrator administrators;

# 设置工作进程数，通常设置为等于<span class="hljs-variable constant_">CPU</span>核心数。
#worker_processes <span class="hljs-number">2</span>;

# 指定nginx进程的<span class="hljs-variable constant_">PID</span>文件存放位置。
#pid /nginx/pid/nginx.<span class="hljs-property">pid</span>;

# 指定错误日志的存放路径和日志级别。
error_log log/error.<span class="hljs-property">log</span> debug;

# events段配置信息
# ------------------------------
events {
    # 设置网络连接序列化，用于防止多个进程同时接受到新连接的情况，这种情况称为<span class="hljs-string">"惊群"</span>。
    accept_mutex on;

    # 设置一个进程是否可以同时接受多个新连接。
    multi_accept on;

    # 设置工作进程的最大连接数。
    worker_connections  <span class="hljs-number">1024</span>;
}

# http配置段，用于配置<span class="hljs-variable constant_">HTTP</span>服务器的参数。
# ------------------------------
http {
    # 包含文件扩展名与<span class="hljs-variable constant_">MIME</span>类型的映射。
    include       mime.<span class="hljs-property">types</span>;

    # 设置默认的<span class="hljs-variable constant_">MIME</span>类型。
    default_type  application/octet-stream;

    # 定义日志格式。
    log_format myFormat <span class="hljs-string">'$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for'</span>;

    # 指定访问日志的存放路径和使用的格式。
    access_log log/access.<span class="hljs-property">log</span> myFormat;

    # 允许使用sendfile方式传输文件。
    sendfile on;

    # 限制每次调用sendfile传输的数据量。
    sendfile_max_chunk 100k;

    # 设置连接的保持时间。
    keepalive_timeout <span class="hljs-number">65</span>;

    # 定义一个上游服务器组。
    upstream mysvr {   
      server <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">7878</span>;
      server <span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.121</span>:<span class="hljs-number">3333</span> backup;  #此服务器为备份服务器。
    }

    # 定义错误页面的重定向地址。
    error_page <span class="hljs-number">404</span> <span class="hljs-attr">https</span>:<span class="hljs-comment">//www.baidu.com;</span>

    # 定义一个虚拟主机。
    server {
        # 设置单个连接上的最大请求次数。
        keepalive_requests <span class="hljs-number">120</span>;

        # 设置监听的端口和地址。
        listen       <span class="hljs-number">4545</span>;
        server_name  <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>;

        # 定义location块，用于匹配特定的请求<span class="hljs-variable constant_">URI</span>。
        location  ~*^.+$ {
           # 设置请求的根目录。
           #root path;

           # 设置默认页面。
           #index vv.<span class="hljs-property">txt</span>;

           # 将请求转发到上游服务器组。
           proxy_pass  <span class="hljs-attr">http</span>:<span class="hljs-comment">//mysvr;</span>

           # 定义访问控制规则。
           deny <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>;
           allow <span class="hljs-number">172.18</span><span class="hljs-number">.5</span><span class="hljs-number">.54</span>;          
        } 
    }
}

</code></pre>
<p>如果有不明白的地方，遇到问题可以通过ai去迅速了解，在ai时代，我们的学习成本也大大下降了。</p>
<h2 data-id="heading-6">小结</h2>
<p>本次主要带小白朋友学习nginx是什么、用于做什么，nginx的常用命令，nginx如何进行配置，最后实际操作一次简单的nginx。</p></div></div>