
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ZhaoYork/p/18679425" title="发布于 2025-01-19 11:21">
    <span role="heading" aria-level="2">比特c语言-分支与循环</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<div class="memorize_new_word_loading">&nbsp;</div>
<div class="bv-shadow-dom bv-shadow-dom-fade_out">&nbsp;</div>
# 分支与循环
<h2 id="if语句">if语句</h2>
<p></p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#if语句" rel="noopener nofollow">if语句</a><ul><li><a href="#if" rel="noopener nofollow">if</a><ul><li><a href="#eg输入一个整数判断是否为奇数" rel="noopener nofollow">eg：输入一个整数，判断是否为奇数</a></li></ul></li><li><a href="#else" rel="noopener nofollow">else</a><ul><li><a href="#eg输入一个整数判断是否为奇数如果是奇数打印是奇数否则打印偶数" rel="noopener nofollow">eg：输入一个整数，判断是否为奇数，如果是奇数打印是奇数，否则打印偶数</a></li></ul></li><li><a href="#嵌套if" rel="noopener nofollow">嵌套if</a><ul><li><a href="#eg输入一个人的年龄" rel="noopener nofollow">eg：输入一个人的年龄</a></li></ul></li></ul></li><li><a href="#关系操作符" rel="noopener nofollow">关系操作符</a></li><li><a href="#条件操作符" rel="noopener nofollow">条件操作符</a><ul><li><ul><li><a href="#eg使用条件操作符表示代码逻辑" rel="noopener nofollow">eg：使用条件操作符表示代码逻辑</a></li><li><a href="#eg使用条件表达式找两个数中较大值" rel="noopener nofollow">eg：使用条件表达式找两个数中较大值</a></li></ul></li></ul></li><li><a href="#逻辑操作符" rel="noopener nofollow">逻辑操作符：&amp;&amp;,||,!</a><ul><li><ul><li><a href="#eg闰年的判断" rel="noopener nofollow">eg：闰年的判断</a></li><li><a href="#短路" rel="noopener nofollow">短路</a></li><li><a href="#eg阅读代码计算代码输出结果" rel="noopener nofollow">eg：阅读代码，计算代码输出结果</a></li></ul></li></ul></li><li><a href="#switch语句" rel="noopener nofollow">switch语句</a><ul><li><ul><li><a href="#if语句和switch语句对比" rel="noopener nofollow">if语句和switch语句对比</a></li><li><a href="#练习" rel="noopener nofollow">练习：</a></li><li><a href="#default" rel="noopener nofollow">default</a></li></ul></li></ul></li><li><a href="#while循环" rel="noopener nofollow">while循环</a><ul><li><ul><li><a href="#执行流程" rel="noopener nofollow">执行流程</a></li><li><a href="#eg在屏幕上打印1-10的值" rel="noopener nofollow">eg：在屏幕上打印1-10的值</a></li><li><a href="#练习-1" rel="noopener nofollow">练习：</a></li></ul></li></ul></li><li><a href="#for循环" rel="noopener nofollow">for循环</a><ul><li><ul><li><a href="#执行流程-1" rel="noopener nofollow">执行流程</a></li><li><a href="#eg在屏幕上打印1-10的值-1" rel="noopener nofollow">eg：在屏幕上打印1-10的值</a></li><li><a href="#练习-2" rel="noopener nofollow">练习：</a></li></ul></li></ul></li><li><a href="#do-while循环" rel="noopener nofollow">do-while循环</a><ul><li><ul><li><a href="#执行流程-2" rel="noopener nofollow">执行流程</a></li><li><a href="#eg在屏幕上打印1-10的值-2" rel="noopener nofollow">eg：在屏幕上打印1-10的值</a></li><li><a href="#练习-3" rel="noopener nofollow">练习：</a></li></ul></li></ul></li><li><a href="#break和continue语句" rel="noopener nofollow">break和continue语句</a></li><li><a href="#循环的嵌套" rel="noopener nofollow">循环的嵌套</a><ul><li><ul><li><a href="#练习-4" rel="noopener nofollow">练习：</a></li></ul></li></ul></li><li><a href="#goto语句" rel="noopener nofollow">goto语句</a></li><li><a href="#随机数生成" rel="noopener nofollow">随机数生成</a><ul><li><a href="#rand" rel="noopener nofollow">rand</a></li><li><a href="#srand" rel="noopener nofollow">srand</a></li><li><a href="#time" rel="noopener nofollow">time</a></li><li><a href="#设置随机数范围" rel="noopener nofollow">设置随机数范围</a></li></ul></li><li><a href="#猜数字游戏" rel="noopener nofollow">猜数字游戏</a></li></ul></div><p></p>
<h3 id="if">if</h3>
<p>语法</p>
<pre><code class="language-c">if ( 表达式 )
	语句
</code></pre>
<p>表达式成⽴（为真），则语句执⾏，表达式不成⽴（为假），则语句不执⾏<br>
在C语⾔中，0为假，⾮0表⽰真，也就是表达式的结果如果是0，则语句不执⾏，表达式的结果如果不是0，则语句执⾏。</p>
<h4 id="eg输入一个整数判断是否为奇数">eg：输入一个整数，判断是否为奇数</h4>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main(){
    int num=0;
    scanf("%d",&amp;num);
    if(num%2==1){
        printf("%d是奇数\n",num);
    }
    return 0;
}
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2305095/202501/2305095-20250119111844661-250487365.png" alt="image" loading="lazy"></p>
<h3 id="else">else</h3>
<p>语法</p>
<pre><code class="language-c">if ( 表达式 )
	语句1
else
	语句2
</code></pre>
<h4 id="eg输入一个整数判断是否为奇数如果是奇数打印是奇数否则打印偶数">eg：输入一个整数，判断是否为奇数，如果是奇数打印是奇数，否则打印偶数</h4>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main(){
    int num=0;
    scanf("%d",&amp;num);
    if(num%2==1){
        printf("%d是奇数\n",num);
    }else{
        printf("%d是偶数\n",num);
    }
    return 0;
}
</code></pre>
<p>eg：输入一个年龄，&gt;=18就输出成年，否则就输出未成年</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main(){
    int age=0;
    scanf("%d",&amp;age);
    if(age&gt;=18){
        printf("成年\n");
    }else{
        printf("未成年\n");
    }
    return 0;
}
</code></pre>
<p>分支中可以包含多条语句</p>
<h3 id="嵌套if">嵌套if</h3>
<p><img src="https://img2024.cnblogs.com/blog/2305095/202501/2305095-20250119111859919-1674913077.png" alt="image" loading="lazy"></p>
<pre><code class="language-c">if(条件)
	语句
else if(条件)
	语句
else
	语句	
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2305095/202501/2305095-20250119111906920-150625844.png" alt="image" loading="lazy"></p>
<pre><code class="language-c">if(条件){
	if(条件)
		语句
	else
		语句
}else{
	语句
}
</code></pre>
<h4 id="eg输入一个人的年龄">eg：输入一个人的年龄</h4>
<blockquote>
<p>如果年龄&lt;18岁，打印"少年"<br>
如果年龄在18岁⾄44岁打印"⻘年"<br>
如果年龄在45岁⾄59岁打印"中⽼年"<br>
如果年龄在60岁⾄89岁打印"⽼年"<br>
如果90岁及以上打印"⽼寿星"</p>
</blockquote>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main(){
    int age=0;
    scanf("%d",&amp;age);
    if(age&lt;18){
        printf("少年\n");
    }else if(age&lt;=44){
        printf("青年\n");
    }else if(age&lt;=59){
        printf("中老年\n");
    }else if(age&lt;=89){
        printf("老年\n");
    }else{
        printf("老寿星\n");
    }
    return 0;
}
</code></pre>
<p>如果有多个 if 和 else ，可以记住这样⼀条规则， else 总是跟最接近的 if 匹配。</p>
<h2 id="关系操作符">关系操作符</h2>
<ul>
<li><code>&gt;</code>大于运算符</li>
<li><code>&lt;</code>小于运算符</li>
<li><code>&gt;=</code>大于等于运算符</li>
<li><code>&lt;=</code>小于等于运算符</li>
<li><code>==</code>相等运算符(=为赋值==判断像相等)</li>
<li><code>!=</code>不相等运算符</li>
</ul>
<p>关系表达式中返回1或0表示真假</p>
<p>另⼀个需要避免的错误是：多个关系运算符不宜连用</p>
<h2 id="条件操作符">条件操作符</h2>
<p>三目操作符</p>
<pre><code class="language-c">exp1?exp2:exp3
</code></pre>
<p>条件操作符计算逻辑，如果exp1为真，exp2计算，计算的结果是整个表达式的结果，如果exp1为假，exp3计算，计算的结果是整个表达式的结果</p>
<h4 id="eg使用条件操作符表示代码逻辑">eg：使用条件操作符表示代码逻辑</h4>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main(){
    int a=0;
    int b=0;
    scanf("%d",&amp;a);
    if(a&gt;5)
        b=3;
    else
        b=-3;
    printf("%d\n",b);
    return 0;
}
改造后
#include &lt;stdio.h&gt;
int main(){
    int a=0;
    int b=0;
    scanf("%d",&amp;a);
    b=a&gt;5?3:-3;
    printf("%d\n",b);
    return 0;
}
</code></pre>
<h4 id="eg使用条件表达式找两个数中较大值">eg：使用条件表达式找两个数中较大值</h4>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main()
{
	int a = 0;
	int b = 0;
	scanf("%d %d", &amp;a, &amp;b);
	int m = a&gt;b ? a : b;
	printf("%d\n", m);
	return 0;
}
</code></pre>
<h2 id="逻辑操作符">逻辑操作符：&amp;&amp;,||,!</h2>
<ul>
<li><code>!</code>逻辑取反运算符（改变单个表达式的真假）</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/2305095/202501/2305095-20250119111920417-1683871070.png" alt="image" loading="lazy"></p>
<ul>
<li><code>&amp;&amp;</code>逻辑与运算符，就是并且的意思（两侧的表达式都为真，则为真，否则为假）</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/2305095/202501/2305095-20250119111925991-234902587.png" alt="image" loading="lazy"></p>
<ul>
<li><code>||</code>逻辑或运算符，就是或者的意思（两侧⾄少有⼀个表达式为真，则为真，否则为假）</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/2305095/202501/2305095-20250119111931551-629697561.png" alt="image" loading="lazy"></p>
<h4 id="eg闰年的判断">eg：闰年的判断</h4>
<p>输⼊⼀个年份year，判断year是否是闰年<br>
闰年判断的规则：</p>
<ol>
<li>能被4整除并且不能被100整除是闰年</li>
<li>能被400整除是闰年</li>
</ol>
<pre><code class="language-c">#include &lt;stdio.h&gt;
//代码1
int main()
{
	int year = 0;
	scanf("%d", &amp;year);
	if(year%4==0 &amp;&amp; year%100!=0)
		printf("是闰年\n");
	else if(year%400==0)
		printf("是闰年\n");
	return 0;
}
//代码2
int main()
{
	int year = 0;
	scanf("%d", &amp;year);
	if((year%4==0 &amp;&amp; year%100!=0) || (year%400==0))
		printf("是闰年\n");
	return 0;
}
</code></pre>
<h4 id="短路">短路</h4>
<p>这种仅仅根据左操作数的结果就能知道整个表达式的结果，不再对右操作数进⾏计算的运算称为短路求值</p>
<h4 id="eg阅读代码计算代码输出结果">eg：阅读代码，计算代码输出结果</h4>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main()
{
	int i = 0,a=0,b=2,c =3,d=4;
	i = a++ &amp;&amp; ++b &amp;&amp; d++;
	//i = a++||++b||d++;
	printf("a = %d\n b = %d\n c = %d\nd = %d\n", a, b, c, d);
	return 0;
}
</code></pre>
<blockquote>
<p>a=1 b=2 c=3 d=4</p>
<p>a=1 b=3 c=3 d=4</p>
</blockquote>
<h2 id="switch语句">switch语句</h2>
<p>语法</p>
<pre><code class="language-c">switch (expression) {
	case value1: statement
	case value2: statement
	...
	default: statement
}
</code></pre>
<ul>
<li>switch后的expression 必须是整型表达式</li>
<li>case后的值，必须是整形常量表达式</li>
</ul>
<h4 id="if语句和switch语句对比">if语句和switch语句对比</h4>
<p>输入任意一个整数值，计算除3之后的余数</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main()
{
	int n = 0;
	scanf("%d", &amp;n);
	if(n%3 == 0)
		printf("整除，余数为0\n");
	else if(n%3 == 1)
		printf("余数是1\n");
	else
		printf("余数是2\n");
	return 0;
}

#include &lt;stdio.h&gt;
int main()
{
	int n = 0;
	scanf("%d", &amp;n);
	switch(n%3)
	{
		case 0:
		printf("整除，余数为0\n");
		break;
		case 1:
		printf("余数是1\n");
		break;
		case 2:
		printf("余数是2\n");
		break;
	}
	return 0;
}
</code></pre>
<p>上述的代码中，我们要注意的点有：<br>
case和后边的数字之间必须有空格</p>
<p>每⼀个 case 语句中的代码执⾏完成后，需要加上 break才能跳出这个switch语句</p>
<h4 id="练习">练习：</h4>
<blockquote>
<p>输⼊⼀个1~7的数字，打印对应的星期⼏?<br>
例如：<br>
输⼊：1 输出：星期⼀<br>
输⼊：2 输出：星期⼆<br>
输⼊：3 输出：星期三<br>
输⼊：4 输出：星期四<br>
输⼊：5 输出：星期五<br>
输⼊：6 输出：星期六<br>
输⼊：7 输出：星期天</p>
</blockquote>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main(){
    int day=0;
    scanf("%d",&amp;day);
    switch(day)
    {
        case 1:
            printf("星期一\n");
            break;
        case 2:
            printf("星期二\n");
            break;
        case 3:
            printf("星期三\n");
            break;
        case 4:
            printf("星期四\n");
            break;
        case 5:
            printf("星期五\n");
            break;
        case 6:
            printf("星期六\n");
            break;
        case 7:
            printf("星期天\n");
            break;          
    }
    return 0;
}
</code></pre>
<blockquote>
<p>如果需求发⽣变化，变为：</p>
<ol>
<li>输⼊1~5，输出的是“⼯作⽇”</li>
<li>输⼊6~7，输出“休息⽇”</li>
</ol>
</blockquote>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main(){
	int day = 0;
	scanf("%d", &amp;day);
	switch(day)
	{
		case 1：
		case 2:
		case 3:
		case 4:
		case 5:
			printf("⼯作⽇\n");
			break;
		case 6:
		case 7:
			printf("休息⽇\n");
			break;
	}
	return 0;
}
</code></pre>
<h4 id="default">default</h4>
<p>在使⽤ switch 语句的时候，我们经常可能遇到⼀种情况，⽐如switch后的表达式中的值⽆法匹配代码中的case语句的时候，这时候要不就不做处理，要不就得在switch 语句中加⼊default ⼦句</p>
<pre><code class="language-c">switch (expression) {
	case value1: statement
	case value2: statement
	default: statement
}
</code></pre>
<p>switch语句中的case和default的顺序问题<br>
在 switch 语句中 case ⼦句和 default ⼦句有要求顺序吗？ default 只能放在最后吗？<br>
其实，在 switch 语句中 case 语句和 default 语句是没有顺序要求的，只要你的顺序是满⾜实际需求的就可以。不过我们通常是把 default ⼦句放在最后处理的。</p>
<h2 id="while循环">while循环</h2>
<p>语法</p>
<pre><code class="language-c">if(表达式)
	语句;
while(表达式)
语句;//如果循环体想包含更多的语句，可以加上⼤括号

</code></pre>
<h4 id="执行流程">执行流程</h4>
<p><img src="https://img2024.cnblogs.com/blog/2305095/202501/2305095-20250119111954292-72489279.png" alt="image" loading="lazy"></p>
<p>⾸先上来就是执⾏判断表达式，表达式的值为0，循环直接结束；表达式的值不为0，则执⾏循环语句，语句执⾏完后再继续判断，是否进⾏下⼀次判断。</p>
<h4 id="eg在屏幕上打印1-10的值">eg：在屏幕上打印1-10的值</h4>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main()
{
	int i = 1;
	while(i&lt;=10)
	{
		printf("%d ", i);
		i = i+1;
	}
	return 0;
}
</code></pre>
<h4 id="练习-1">练习：</h4>
<blockquote>
<p>输⼊⼀个正的整数，逆序打印这个整数的每⼀位<br>
例如：<br>
输⼊：1234，输出：4 3 2 1<br>
输⼊：521，输出：1 2 5</p>
</blockquote>
<p>题⽬解析</p>
<ol>
<li>要想得到n的最低位，可以使⽤n%10的运算，得到的余数就是最低位，如：1234%10得到4</li>
<li>要想去掉n的最低位，找出倒数第⼆位，则使⽤ n=n/10 操作就可以去掉最低位的，如：n=1234/10得到123，123相较于1234就去掉了最低位，123%10就得到倒数第⼆位3。</li>
<li>循环1和2两个步骤，在n变成0之前，就能到所有的位。</li>
</ol>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main(){
    int n=0;
    scanf("%d",&amp;n);
    while(n){
        printf("%d ",n%10);
        n=n/10;
    }
    return 0;
}
</code></pre>
<h2 id="for循环">for循环</h2>
<p>语法</p>
<pre><code class="language-c">for(表达式1; 表达式2; 表达式3)
	语句；//如果循环体想包含更多的语句，可以加上⼤括号

</code></pre>
<p>表达式1 ⽤于循环变量的初始化<br>
表达式2 ⽤于循环结束条件的判断<br>
表达式3 ⽤于循环变量的调整</p>
<h4 id="执行流程-1">执行流程</h4>
<p><img src="https://img2024.cnblogs.com/blog/2305095/202501/2305095-20250119112005418-1050766503.png" alt="image" loading="lazy"></p>
<p>⾸先执⾏ 表达式1 初始化循环变量，接下来就是执⾏ 表达式2 的判断部分， 表达式2 的结果如果==0，则循环结束； 表达式2 的结果如果!=0则执⾏循环语句，循环语句执⾏完后，再去执⾏表 达式3 ,调整循环变量，然后再去 表达式2 的地⽅执⾏判断， 表达式2 的结果是否为0，决定循环是否继续。</p>
<p>整个循环的过程中，表达式1初始化部分只被执⾏1次，剩下的就是表达式2、循环语句、表达式3在循环。</p>
<h4 id="eg在屏幕上打印1-10的值-1">eg：在屏幕上打印1-10的值</h4>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main()
{
	int i = 0;
	for(i=1; i&lt;=10; i++)
	{
		printf("%d ", i);
	}
	return 0;
}
</code></pre>
<h4 id="练习-2">练习：</h4>
<blockquote>
<p>计算1-100之间3的倍速的数字之和</p>
</blockquote>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main(){
    int i=0;
    int sum=0;
    for(i=0;i&lt;100;i++){
        if(i%3==0)
            sum+=i;
    }
    printf("%d",sum);
    return 0;
}

#include &lt;stdio.h&gt;
int main()
{
	int i = 0;
	int sum = 0;
	for(i=3; i&lt;=100; i+=3)
	{
		sum += i;
	}
		printf("%d\n", sum);
		return 0;
}
</code></pre>
<h2 id="do-while循环">do-while循环</h2>
<p>语法</p>
<pre><code class="language-c">do
	语句;
while(表达式);
</code></pre>
<p>while和for两种循环都是先判断，条件如果满足就进入循环，执行循环语句，如果不满足就跳出循环</p>
<p>而do while循环则是先直接进入循环体，执行循环语句，然后再执行while后的判断表达式，表达式为真，就会进行下一次，表达式为假，则不再继续循环</p>
<h4 id="执行流程-2">执行流程</h4>
<p><img src="https://img2024.cnblogs.com/blog/2305095/202501/2305095-20250119112015015-1617525218.png" alt="image" loading="lazy"></p>
<p>在 do while 循环中先执⾏图上的“语句”，执⾏完语句，在去执⾏“判断表达式”，判断表达式的结果是!=0，则继续循环，执⾏循环语句；判断表达式的结果==0，则循环结束。<br>
所以在 do while 语句中循环体是⾄少执⾏⼀次的，这是 do while 循环⽐较特殊的地⽅。</p>
<h4 id="eg在屏幕上打印1-10的值-2">eg：在屏幕上打印1-10的值</h4>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main()
{
	int i = 1;
	do
	{
		printf("%d ", i);
		i = i + 1;
	}while(i&lt;=10);
	return 0;
}
</code></pre>
<h4 id="练习-3">练习：</h4>
<blockquote>
<p>输⼊⼀个正整数，计算这个整数是⼏位数？<br>
例如：<br>
输⼊：1234   输出：4<br>
输⼊：12      输出：2</p>
</blockquote>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main(){
    int n=0;
    scanf("%d",&amp;n);
    int cnt=0;
    do
    {
        cnt++;
        n=n/10;
    }while(n)
    printf("%d\n",cnt);
}
</code></pre>
<h2 id="break和continue语句">break和continue语句</h2>
<p>在循环执⾏的过程中，如果某些状况发⽣的时候，需要提前终⽌循环，这是⾮常常⻅的现象。C语⾔中提供了 break 和 continue 两个关键字，就是应⽤到循环中的。</p>
<ul>
<li>break 的作⽤是⽤于永久的终⽌循环，只要 break 被执⾏，直接就会跳出循环，继续往后执⾏。</li>
<li>continue 的作⽤是跳过本次循环中 continue 后边的代码，在 for 循环和 while 循环中有所差异的。</li>
</ul>
<h2 id="循环的嵌套">循环的嵌套</h2>
<p>前⾯学习了三种循环 while ， do while ， for ，这三种循环往往会嵌套在⼀起才能更好的解决问题，就是我们所说的：循环嵌套</p>
<h4 id="练习-4">练习：</h4>
<blockquote>
<p>找出100~200之间的素数，并打印在屏幕上。<br>
注：素数⼜称质数，只能被1和本身整除的数字。</p>
<p>要从100<sub>200之间找出素数，⾸先得有100</sub>200之间的数，这⾥可以使⽤循环解决。</p>
<ol start="2">
<li>假设要判断i是否为素数，需要拿2<sub>i-1之间的数字去试除i，需要产⽣2</sub>i-1之间的数字，也可以使⽤<br>
循环解决。</li>
<li>如果2~i-1之间有数字能整除i，则i不是素数，如果都不能整除，则i是素数。</li>
</ol>
</blockquote>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main(){
    int i=0;
    //产生100-200的数字
    for(i=100;i&lt;=200;i++){
        //判断i是否为素数
        //循环判断产生2~i-1之间的数字
        int j=0;
        int flag=1;//假设i是素数
        for(j=2;j&lt;i;j++){
            if(i%j==0){
                flag=0;
                break;
            }
        }
        if(flag==1)
            printf("%d",i);
    }
    return 0;
}
//优化
#include &lt;stdio.h&gt;
int main(){
    for(i=101;i&lt;=200;i+=2){
        int j=0;
        int flag=1;
        for(j=2;j&lt;=i-1;j++){
            if(i%j==0){
                flag=0;
            	break;
            }
        }
        if(flag==1)
        printf("%d ",i);
    }
    return 0;
}
//优化
//sqrt是一个库函数，用来开平方
sqrt(16)----&gt;4
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
int main(){
    for(i=101;i&lt;=200;i+=2){
        int j=0;
        int flag=1;
        for(j=2;j&lt;=sqrt(i);j++){
            if(i%j==0){
                flag=0;
            	break;
            }
        }
        if(flag==1)
        printf("%d ",i);
    }
    return 0;
}
</code></pre>
<h2 id="goto语句">goto语句</h2>
<p>C语⾔提供了⼀种⾮常特别的语法，就是 goto 语句和跳转标号， goto 语句可以实现在同⼀个函数内跳转到设置好的标号处。</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main()
{
	printf("hehe\n");
	goto next;
	printf("haha\n");
next:
	printf("跳过了haha的打印\n");
	return 0;
}
</code></pre>
<p>goto ?语句如果使⽤的不当，就会导致在函数内部随意乱跳转，打乱程序的执⾏流程，所以我们的建议是能不⽤尽量不去使⽤；但是 goto 语句也不是⼀⽆是处，在多层循环的代码中，如果想快速跳出，使⽤ goto 就⾮常的⽅便了。</p>
<pre><code class="language-c">for(...)
{
	for(...)
	{
 		for(...)
		{
			if(disaster)
			goto error;
		}
	}
}
error:
	//...
</code></pre>
<p>本来 for 循环想提前退出得使⽤ break ，⼀个 break 只能跳出⼀层 for 循环，如果3层循环嵌套就得使⽤3个 break 才能跳出循环，所以在这种情况下我们使⽤ goto 语句就会更加的快捷。</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
int main(){
    char input[20];
    system("shutdown -s -t 60");
    again:
    printf("请注意，你的电脑在一分钟内关机，如果输入"我是猪"，就取消关机\n");
    scanf("%s",input);
    if(strcmp(input,"我是猪")==0){
        system("shutdown -a");
    }else{
        goto again;
    }
    return 0;
}
</code></pre>
<h2 id="随机数生成">随机数生成</h2>
<h3 id="rand">rand</h3>
<pre><code class="language-c">int rand (void);
</code></pre>
<p>rand函数会返回⼀个伪随机数，这个随机数的范围是在0~RAND_MAX之间，这个RAND_MAX的⼤⼩是依赖编译器上实现的，但是⼤部分编译器上是32767<br>
rand函数的使⽤需要包含⼀个头⽂件是：stdlib.h</p>
<p>随机生成五个随机数</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int main()
{
	printf("%d\n", rand());
	printf("%d\n", rand());
	printf("%d\n", rand());
	printf("%d\n", rand());
	printf("%d\n", rand());
	return 0;
}
</code></pre>
<p>rand函数是对⼀个叫“种⼦”的基准值进⾏运算⽣成的随机数</p>
<p>之所以前⾯每次运⾏程序产⽣的随机数序列是⼀样的，那是因为rand函数⽣成随机数的默认种⼦是1。如果要⽣成不同的随机数，就要让种⼦是变化的。</p>
<h3 id="srand">srand</h3>
<pre><code class="language-c">void srand (unsigned int seed);
</code></pre>
<p>程序中在调⽤rand函数之前先调⽤?srand?函数，通过srand函数的参数seed来设置rand函数⽣成随机数的时候的种⼦，只要种⼦在变化，每次⽣成的随机数序列也就变化起来了。<br>
那也就是说给srand的种⼦是如果是随机的，rand就能⽣成随机数；在⽣成随机数的时候⼜需要⼀个随机数，这就⽭盾了</p>
<h3 id="time">time</h3>
<p>使⽤程序运⾏的时间作为种⼦的，因为时间时刻在发⽣变化的。在C语⾔中有⼀个函数叫time，就可以获得这个时间</p>
<pre><code class="language-c">time_t time (time_t* timer);
</code></pre>
<p>time函数会返回当前的⽇历时间，其实返回的是1970年1⽉1⽇0时0分0秒到现在程序运行时间之间的差值，单位是秒。返回的类型是time_t类型的，time_t类型本质上其实就是32位或者64位的整型类型。<br>
time函数的参数timer如果是⾮NULL的指针的话，函数也会将这个返回的差值放在timer指向的内存中带回去。<br>
如果timer是NULL，就只返回这个时间的差值。time函数返回的这个时间差也被叫做：时间戳。time函数的时候需要包含头⽂件：time.h</p>
<pre><code class="language-c">//VS2022 上time_t类型的说明
#ifndef _CRT_NO_TIME_T
	#ifdef _USE_32BIT_TIME_T
		typedef __time32_t time_t;
	#else
		typedef __time64_t time_t;
	#endif
#endif

typedef long        __time32_t;
typedef __int64     __time64_t;
</code></pre>
<p>time函数返回时间戳</p>
<pre><code class="language-c">time(NULL);//调⽤time函数返回时间戳，这⾥没有接收返回值
</code></pre>
<p>生成随机数代码</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;
int main()
{
	//使⽤time函数的返回值设置种⼦
	//因为srand的参数是unsigned int类型，我们将time函数的返回值强制类型转换
	srand((unsigned int)time(NULL));
	printf("%d\n", rand());
	printf("%d\n", rand());
	printf("%d\n", rand());
	printf("%d\n", rand());
	printf("%d\n", rand());
	return 0;
}
</code></pre>
<h3 id="设置随机数范围">设置随机数范围</h3>
<p>0-99</p>
<pre><code class="language-c">rand() % 100;//余数的范围是0~99
</code></pre>
<p>1-100</p>
<pre><code class="language-c">rand()%100+1;//%100的余数是0~99,0~99的数字+1,范围是1~100
</code></pre>
<p>100-200</p>
<pre><code class="language-c">100 + rand()%(200-100+1)
//余数的范围是0~100，加100后就是100~200
</code></pre>
<p>a-b</p>
<pre><code class="language-c">a + rand()%(b-a+1)
</code></pre>
<h2 id="猜数字游戏">猜数字游戏</h2>
<blockquote>
<p>电脑生成一个1-100的随机数</p>
<p>玩家猜数字，猜数字的过程中，根据猜测数据的⼤⼩给出⼤了或⼩了的反馈，直到猜对，游戏结束</p>
<p>可以玩一把后继续玩，不退出程序</p>
</blockquote>
<pre><code class="language-c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;
void game()
{
    //srand((unsigned int)time(NULL));
	int r = rand()%100+1;
	int guess= 0;
	//system("cls");
    int count= 5;
	while(count)
	{
        printf("\n你还有%d次机会\n",count);
		printf("请猜数字&gt;:");
		scanf("%d", &amp;guess);
		if(guess &lt; r)
		{
			printf("猜⼩了\n");
		}
		else if(guess &gt; r)
		{
			printf("猜⼤了\n");
		}
		else
		{
			printf("恭喜你，猜对了,数字是%d\n",r);
			break;
		}
        count--;
	}
    if(count==0){
        printf("你失败了，正确值是：%d\n",r);
    }
}
void menu()
{
	printf("***********************\n");
	printf("****** 1. play ******\n");
	printf("****** 0. exit ******\n");
	printf("***********************\n");
}
int main()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do
	{
		menu();
		printf("请选择:&gt;");
		scanf("%d", &amp;input);
		switch(input)
		{
			case 1:
				game();
				break;
			case 0:
				printf("游戏结束\n");
				break;
			default:
				printf("选择错误，重新选择\n");
			break;
		}
	}while(input);
	return 0;
}
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.03807208797337963" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-19 11:22">2025-01-19 11:21</span>&nbsp;
<a href="https://www.cnblogs.com/ZhaoYork">小赵同学吖</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18679425" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18679425);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18679425', targetLink: 'https://www.cnblogs.com/ZhaoYork/p/18679425', title: '比特c语言-分支与循环' })">举报</a>
</div>
        