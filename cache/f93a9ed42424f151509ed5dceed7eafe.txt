
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/TheMagicalRainbowSea/p/18730551" title="发布于 2025-02-22 09:10">
    <span role="heading" aria-level="2">4. MySQL 逻辑架构说明</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="4-mysql-逻辑架构说明">4. MySQL 逻辑架构说明</h1>
<p>@</p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#4-mysql-逻辑架构说明" rel="noopener nofollow">4. MySQL 逻辑架构说明</a></li><li><a href="#1-逻辑架构剖析" rel="noopener nofollow">1. 逻辑架构剖析</a><ul><li><a href="#11-服务器处理客户端请求" rel="noopener nofollow">1.1 服务器处理客户端请求</a></li><li><a href="#12-connectors连接器" rel="noopener nofollow">1.2 Connectors(连接器)</a></li><li><a href="#13-第1层连接层" rel="noopener nofollow">1.3 第1层：连接层</a></li><li><a href="#14-第2层服务层" rel="noopener nofollow">1.4 第2层：服务层</a></li><li><a href="#15-第3层引擎层" rel="noopener nofollow">1.5 第3层：引擎层</a></li><li><a href="#16-存储层" rel="noopener nofollow">1.6 存储层</a></li></ul></li><li><a href="#2-sql执行流程" rel="noopener nofollow">2. SQL执行流程</a><ul><li><a href="#21-mysql-中的-sql-执行流程" rel="noopener nofollow">2.1 MySQL 中的 SQL 执行流程</a></li></ul></li><li><a href="#22--mysql8中sql执行原理" rel="noopener nofollow">2.2  MySQL8中SQL执行原理</a></li><li><a href="#最后" rel="noopener nofollow">最后：</a></li></ul></div><p></p>
<hr>
<h1 id="1-逻辑架构剖析">1. 逻辑架构剖析</h1>
<h2 id="11-服务器处理客户端请求">1.1 服务器处理客户端请求</h2>
<p>那服务器进程对客户端进程发送的请求做了什么处理，才能产生最后的处理结果呢？这里以查询请求为 例展示：</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250222090122492-2105905720.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>下面具体展开看一下：</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250222090122662-191527316.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250222090122669-2003612696.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250222090122588-17888402.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="12-connectors连接器">1.2 Connectors(连接器)</h2>
<h2 id="13-第1层连接层">1.3 第1层：连接层</h2>
<p>系统（客户端）访问 MySQL 服务器前，做的第一件事就是建立<code> TCP</code>连接。</p>
<p>经过三次握手建立连接成功后， MySQL 服务器对<code> TCP</code> 传输过来的账号密码做身份认证、权限获取。</p>
<ul>
<li>用户名或密码不对，会收到一个Access denied for user错误，客户端程序结束执行</li>
<li>用户名密码认证通过，会从权限表查出账号拥有的权限与连接关联，之后的权限判断逻辑，都将依 赖于此时读到的权限</li>
</ul>
<p><code>TCP </code> 连接收到请求后，必须要分配给一个线程专门与这个客户端的交互。所以还会有个线程池，去走后 面的流程。每一个连接从线程池中获取线程，省去了创建和销毁线程的开销。</p>
<h2 id="14-第2层服务层">1.4 第2层：服务层</h2>
<ul>
<li><strong>SQL Interface: SQL接口</strong></li>
</ul>
<blockquote>
<ul>
<li>接收用户的SQL命令，并且返回用户需要查询的结果。比如SELECT ... FROM就是调用SQL Interface</li>
<li>MySQL支持DML（数据操作语言）、DDL（数据定义语言）、存储过程、视图、触发器、自定 义函数等多种SQL语言接口</li>
</ul>
</blockquote>
<ul>
<li><strong>Parser: 解析器：</strong></li>
</ul>
<blockquote>
<ul>
<li>在解析器中对 SQL 语句进行语法分析、语义分析。将SQL语句分解成数据结构，并将这个结构 传递到后续步骤，以后SQL语句的传递和处理就是基于这个结构的。如果在分解构成中遇到错 误，那么就说明这个SQL语句是不合理的。</li>
<li>在SQL命令传递到解析器的时候会被解析器验证和解析，并为其创建 <code>语法树</code> ，并根据数据字 典丰富查询语法树，会 <code>验证该客户端是否具有执行该查询的权限</code> 。创建好语法树后，MySQL还 会对SQl查询进行语法上的优化，进行查询重写。</li>
</ul>
</blockquote>
<ul>
<li><strong>Optimizer: 查询优化器</strong></li>
</ul>
<blockquote>
<ul>
<li>SQL语句在语法解析之后、查询之前会使用查询优化器确定 SQL 语句的执行路径，生成一个 <code>执行计划</code> 。</li>
<li>这个执行计划表明应该 <code>使用哪些索引</code> 进行查询（全表检索还是使用索引检索），表之间的连 接顺序如何，最后会按照执行计划中的步骤调用存储引擎提供的方法来真正的执行查询，并将 查询结果返回给用户。</li>
<li>它使用“ 选取-投影-连接 ”策略进行查询。例如：</li>
</ul>
<pre><code class="language-mysql">SELECT id,name FROM student WHERE gender = '女';
</code></pre>
<p>这个SELECT查询先根据WHERE语句进行 <code>选取</code> ，而不是将表全部查询出来以后再进行gender过 滤。 这个SELECT查询先根据id和name进行属性 <code>投影</code> ，而不是将属性全部取出以后再进行过 滤，将这两个查询条件 <code>连接</code> 起来生成最终查询结果。</p>
</blockquote>
<ul>
<li><strong>Caches &amp; Buffers： 查询缓存组件</strong></li>
</ul>
<blockquote>
<ul>
<li>MySQL内部维持着一些Cache和Buffer，比如Query Cache用来缓存一条SELECT语句的执行结 果，如果能够在其中找到对应的查询结果，那么就不必再进行查询解析、优化和执行的整个过 程了，直接将结果反馈给客户端。</li>
<li>这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等 。</li>
<li>这个查询缓存可以在 不同客户端之间共享 。</li>
<li>从MySQL 5.7.20开始，不推荐使用查询缓存，并在 MySQL 8.0中删除 。</li>
</ul>
</blockquote>
<p><strong>缓存故事：</strong></p>
<blockquote>
<p>如果我问你9+8×16-3×2×17的值是多少，你可能会用计算器去算一下，最终结果35。如果再问你一遍9+8×16- 3×2×17的值是多少，你还用再傻呵呵的再算一遍吗？我们刚刚已经算过了，直接说答案就好了。</p>
</blockquote>
<h2 id="15-第3层引擎层">1.5 第3层：引擎层</h2>
<p>插件式存储引擎层（ Storage Engines）， <strong>真正的负责了MySQL中数据的存储和提取，对物理服务器级别 维护的底层数据执行操作</strong> ，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样 我们可以根据自己的实际需要进行选取。</p>
<p>MySQL 8.0.25 默认支持的存储引擎如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250222090122468-227681398.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="16-存储层">1.6 存储层</h2>
<p>所有的数据，数据库、表的定义，表的每一行的内容，索引，都是存在 <code>文件系统</code> 上，以 <code>文件</code> 的方式存 在的，并完成与存储引擎的交互。当然有些存储引擎比如InnoDB，也支持不使用文件系统直接管理裸设 备，但现代文件系统的实现使得这样做没有必要了。在文件系统之下，可以使用本地磁盘，可以使用 DAS、NAS、SAN等各种存储系统。</p>
<p><strong>小结：</strong></p>
<p>MySQL架构图本节开篇所示。下面为了熟悉SQL执行流程方便，我们可以简化如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250222090122571-564700735.png" alt="在这里插入图片描述" loading="lazy"></p>
<blockquote>
<p>简化为三层结构：</p>
<ol>
<li>连接层：客户端和服务器端建立连接，客户端发送 SQL 至服务器端；</li>
<li>SQL 层（服务层）：对 SQL 语句进行查询处理；与数据库文件的存储方式无关；</li>
<li>存储引擎层：与数据库文件打交道，负责数据的存储和读取。</li>
</ol>
</blockquote>
<h1 id="2-sql执行流程">2. SQL执行流程</h1>
<h2 id="21-mysql-中的-sql-执行流程">2.1 MySQL 中的 SQL 执行流程</h2>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250222090122614-1721672009.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>MySQL的查询流程：</strong></p>
<ol>
<li><strong>查询缓存 ：</strong> Server 如果在查询缓存中发现了这条 SQL 语句，就会直接将结果返回给客户端；如果没 有，就进入到解析器阶段。需要说明的是，因为查询缓存往往效率不高，所以在 MySQL8.0 之后就抛弃 了这个功能。</li>
</ol>
<p><strong>大多数情况查询缓存就是个鸡肋，为什么呢 ？</strong></p>
<pre><code class="language-mysql">SELECT employee_id,last_name FROM employees WHERE employee_id = 101;
</code></pre>
<p>查询缓存是提前把查询结果缓存起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在 MySQL 中的查询缓存，不是缓存查询计划，而是查询对应的结果。这就意味着查询匹配的 <code>鲁棒性大大降低</code> ，只有 <code>相同的查询操作才会命中查询缓存</code> 。两个查询请求在任何字符上的不同（例如：空格、注释、 大小写），都会导致缓存不会命中。因此 MySQL 的 <code>查询缓存命中率不高</code> 。</p>
<p>同时，如果查询请求中包含某些系统函数、用户自定义变量和函数、一些系统表，如 mysql 、 information_schema、 performance_schema 数据库中的表，那这个请求就不会被缓存。以某些系统函数 举例，可能同样的函数的两次调用会产生不一样的结果，比如函数 <code>NOW</code> ，每次调用都会产生最新的当前 时间，如果在一个查询请求中调用了这个函数，那即使查询请求的文本信息都一样，那不同时间的两次 查询也应该得到不同的结果，如果在第一次查询时就缓存了，那第二次查询的时候直接使用第一次查询 的结果就是错误的！</p>
<p>此外，既然是缓存，那就有它 <code>缓存失效的时候 </code>。MySQL的缓存系统会监测涉及到的每张表，只要该表的 结构或者数据被修改，如对该表使用了 <code>INSERT 、  UPDATE 、 DELETE 、 TRUNCATE TABLE 、 ALTER TABLE 、 DROP TABLE</code> 或  <code>DROP DATABASE</code> 语句，那使用该表的所有高速缓存查询都将变为无效并从高 速缓存中删除！对于<code>更新压力大的数据库</code>来说，查询缓存的命中率会非常低。</p>
<p><strong>解析器 ：</strong>在解析器中对 SQL 语句进行语法分析、语义分析。<br>
<img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250222090122576-1242326439.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>分析器先做 <code>“ 词法分析 ”</code>。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面 的字符串分别是什么，代表什么。 MySQL 从你输入的"select"这个关键字识别出来，这是一个查询语 句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。</p>
<p>接着，要做 <code>“ 语法分析 ”</code>。根据词法分析的结果，语法分析器（比如：Bison）会根据语法规则，判断你输 入的这个 SQL 语句是否 <code>满足  MySQL 语法</code> 。<br>
select department_id,job_id,avg(salary) from employees group by department_id; 如果SQL语句正确，则会生成一个这样的语法树：</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250222090122527-205126572.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>优化器 ：</strong>在优化器中会确定 SQL 语句的执行路径，比如是根据 <code>全表检索 </code>，还是根据 <code>索引检索</code> 等。</p>
<p>举例：如下语句是执行两个表的 join：</p>
<pre><code class="language-mysql">select * from test1 join test2 using(ID)
where test1.name='zhangwei' and test2.name='mysql高级课程';
</code></pre>
<pre><code class="language-tex">方案1：可以先从表  test1 里面取出  name='zhangwei'的记录的  ID 值，再根据  ID 值关联到表  test2，再判 断  test2 里面  name的值是否等于  'mysql高级课程'。
方案2：可以先从表  test2 里面取出  name='mysql高级课程' 的记录的  ID 值，再根据  ID 值关联到  test1， 再判断  test1 里面  name的值是否等于  zhangwei。
这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案。优化 器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段。
如果你还有一些疑问，比如优化器是怎么选择索引的，有没有可能选择错等。后面讲到索引我们再谈。
</code></pre>
<p>在查询优化器中，可以分为 <code>逻辑查询</code> 优化阶段和 <code>物理查询</code> 优化阶段。</p>
<p><strong>执行器 ：</strong> 截止到现在，还没有真正去读写真实的表，仅仅只是产出了一个执行计划。于是就进入了 <code>执行器阶段</code> 。</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250222090122619-1672993565.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>在执行之前需要判断该用户是否 <code>具备权限</code> 。如果没有，就会返回权限错误。如果具备权限，就执行 SQL 查询并返回结果。在 MySQL8.0 以下的版本，如果设置了查询缓存，这时会将查询结果进行缓存。</p>
<pre><code class="language-mysql">select * from test where id=1;
</code></pre>
<p>比如：表 test 中，ID 字段没有索引，那么执行器的执行流程是这样的：</p>
<pre><code class="language-tex">调用  InnoDB 引擎接口取这个表的第一行，判断  ID 值是不是1，如果不是则跳过，如果是则将这行存在结果集中； 调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。
执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。
</code></pre>
<p>至此，这个语句就执行完成了。对于有索引的表，执行的逻辑也差不多。</p>
<p><strong>SQL 语句在 MySQL 中的流程是： <code>SQL语句→查询缓存→解析器→优化器→执行器 。</code></strong><br>
<img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250222090122599-1966444505.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="22--mysql8中sql执行原理">2.2  MySQL8中SQL执行原理</h1>
<h1 id="最后">最后：</h1>
<blockquote>
<p>“在这个最后的篇章中，我要表达我对每一位读者的感激之情。你们的关注和回复是我创作的动力源泉，我从你们身上吸取了无尽的灵感与勇气。我会将你们的鼓励留在心底，继续在其他的领域奋斗。感谢你们，我们总会在某个时刻再次相遇。”</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250222090122698-780240747.gif" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.06491379198958333" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-22 09:10">2025-02-22 09:10</span>&nbsp;
<a href="https://www.cnblogs.com/TheMagicalRainbowSea">Rainbow-Sea</a>&nbsp;
阅读(<span id="post_view_count">8</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18730551" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18730551);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18730551', targetLink: 'https://www.cnblogs.com/TheMagicalRainbowSea/p/18730551', title: '4. MySQL 逻辑架构说明' })">举报</a>
</div>
	