
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/qiuzhendezhen/p/18688286" title="发布于 2025-01-23 17:55">
    <span role="heading" aria-level="2">spandsp_start_dtmf的bug及修复</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><img src="https://img2024.cnblogs.com/blog/2500940/202501/2500940-20250123175410609-1202690519.jpg" alt="" loading="lazy"></p>
<div class="lake-content">
<h1 id="eMYA2"><span class="ne-text">概述</span></h1>
<p id="uf3505837" class="ne-p"><span class="ne-text">freeswitch是一款简单好用的VOIP开源软交换平台。</span></p>
<p id="u111dd4bc" class="ne-p"><span class="ne-text">之前的文章中介绍过DTMF从2833到inband的转换，其中inband到2833的转换使用了“spandsp_start_dtmf”，这个函数在转换的过程中有缺陷。</span></p>
<h1 id="RZhOf"><span class="ne-text">环境</span></h1>
<p id="u772b5a9f" class="ne-p"><span class="ne-text">CentOS 7.9</span></p>
<p id="u711eec0c" class="ne-p"><span class="ne-text">freeswitch 1.10.7</span></p>
<h1 id="YiQHE"><span class="ne-text">问题描述</span></h1>
<p id="u6fb89368" class="ne-p"><span class="ne-text">在fs桥接的呼叫，经过“spandsp_start_dtmf”处理inband中的dtmf按键，转换到otherleg的时候，2833的dtmf可以正常产生，但是inband中的波形删除的不够干净，如果后续的语音节点会检测inband的话，就会产生重码的问题。</span></p>
<p><img src="https://img2024.cnblogs.com/blog/2500940/202501/2500940-20250123175438686-2026924127.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h1 id="CEDgv"><span class="ne-text">解决方案</span></h1>
<p id="u061cca59" class="ne-p"><span class="ne-text">修改思路，在spandsp对dtmf波形的处理过程中，缓存2个媒体包，当检测到DTMF时，将缓存的媒体包清空。</span></p>
<p id="ub2a725df" class="ne-p"><span class="ne-text">修改mod_dtptools.c</span></p>
<pre class="ne-codeblock language-c" data-language="c"><code>case SWITCH_DTMF_RTP:
    switch_channel_set_variable(switch_core_session_get_channel(session), "deduplicate_dtmf_seen_rtp", "true");
    /* change state to only allow RTP events */
    filter-&gt;only_rtp = 1;

    //modify by zr, 20241021, for DTMF inband to 2833
    /* stop inband detector */
    // switch_ivr_broadcast(switch_core_session_get_uuid(session), "spandsp_stop_dtmf::", SMF_ECHO_ALEG);
    break;</code></pre>
<p id="u02d184b1" class="ne-p"><span class="ne-text">修改mod_spandsp_dsp.c</span></p>
<pre class="ne-codeblock language-c" data-language="c"><code>//modify by zr, 20241021, for DTMF inband to 2833
#define INBAND_DTMF_BUF_SIZE (2)
#define INBAND_DTMF_BUF_LEN (512)

typedef struct {
	switch_core_session_t *session;
	dtmf_rx_state_t *dtmf_detect;
	int verbose;
	char last_digit;
	uint32_t samples;
	uint32_t last_digit_end;
	uint32_t digit_begin;
	uint32_t min_dup_digit_spacing;
	int twist;
	int reverse_twist;
	int filter_dialtone;
	int threshold;
	switch_audio_resampler_t *resampler;
//modify by zr, 20241021, for DTMF inband to 2833
	char data_buf[INBAND_DTMF_BUF_SIZE][INBAND_DTMF_BUF_LEN];
	int buf_index;
} switch_inband_dtmf_t;

...

			dtmf_rx(pvt-&gt;dtmf_detect, dp, samples);

			//modify by zr, 20241021, for DTMF inband to 2833
			// switch_log_printf(SWITCH_CHANNEL_LOG, SWITCH_LOG_NOTICE, "dtmf_rx return, last_hit=%d, in_digit=%d, current_sample=%d,"
			// 														"duration=%d, lost_digits=%d, current_digits=%d\n", 
			// 														pvt-&gt;dtmf_detect-&gt;last_hit, pvt-&gt;dtmf_detect-&gt;in_digit, pvt-&gt;dtmf_detect-&gt;current_sample, 
			// 														pvt-&gt;dtmf_detect-&gt;duration, pvt-&gt;dtmf_detect-&gt;lost_digits, pvt-&gt;dtmf_detect-&gt;current_digits);
			
			if(pvt-&gt;dtmf_detect-&gt;filter_dialtone)
			{	
				// double buffer mode
				if(pvt-&gt;dtmf_detect-&gt;last_hit &gt; 0 || pvt-&gt;dtmf_detect-&gt;in_digit &gt; 0) 
				{
					switch_log_printf(SWITCH_CHANNEL_SESSION_LOG(pvt-&gt;session), SWITCH_LOG_DEBUG, 
						"inband_dtmf_callback, memset frame to 0x00, pvt-&gt;dtmf_detect-&gt;last_hit=%d, pvt-&gt;dtmf_detect-&gt;in_digit=%d\n", 
						pvt-&gt;dtmf_detect-&gt;last_hit, pvt-&gt;dtmf_detect-&gt;in_digit);
					memset(pvt-&gt;data_buf, 0x00, INBAND_DTMF_BUF_LEN*INBAND_DTMF_BUF_SIZE);
					memset(frame-&gt;data, 0x00, frame-&gt;datalen);
				}
				else
				{
					char data_tmp[INBAND_DTMF_BUF_LEN] = {0};
					memcpy(data_tmp, frame-&gt;data, INBAND_DTMF_BUF_LEN);
					memcpy(frame-&gt;data, pvt-&gt;data_buf[pvt-&gt;buf_index], frame-&gt;datalen);
					memcpy(pvt-&gt;data_buf[pvt-&gt;buf_index], data_tmp, datalen);
				}
				pvt-&gt;buf_index = (1 - pvt-&gt;buf_index);
			}
			
			switch_core_media_bug_set_read_replace_frame(bug, frame);

...

	pvt-&gt;session = session;
	//modify by zr, 20241021, for DTMF inband to 2833
	pvt-&gt;buf_index = 0;</code></pre>
<p id="ud055ce0f" class="ne-p"><span class="ne-text">修改switch_core_media.c</span></p>
<pre class="ne-codeblock language-c" data-language="c"><code>				switch_log_printf(SWITCH_CHANNEL_SESSION_LOG(session), SWITCH_LOG_DEBUG, "%s Set 2833 dtmf send payload to %u recv payload to %u\n",
								  switch_channel_get_name(session-&gt;channel), smh-&gt;mparams-&gt;te, smh-&gt;mparams-&gt;recv_te);

				//add by zr 20241018, for 2833 to inband, update method
				//如果在183的协商中已经设置了inband模式，后续的update协商中需要取消inband模式的函数设置
				if (switch_true(switch_channel_get_variable(session-&gt;channel, "inband_flag"))) 
				{
					switch_log_printf(SWITCH_CHANNEL_SESSION_LOG(session), SWITCH_LOG_DEBUG, "reset inband_flag and channel variables.\n");
					//B路
					switch_channel_set_variable(session-&gt;channel, "inband_flag", NULL);
					switch_channel_set_variable(session-&gt;channel, "spandsp_dtmf_rx_filter_dialtone", NULL);
					switch_channel_set_variable(session-&gt;channel, "execute_on_answer_101", NULL);
					switch_channel_set_variable(session-&gt;channel, "execute_on_answer_102", NULL);

					//A路，2833 to inband
					if( switch_core_session_get_partner(session, &amp;other_session) == SWITCH_STATUS_SUCCESS )
					{
						switch_channel_set_variable(other_session-&gt;channel, "execute_on_answer_101", NULL);
						switch_core_session_rwunlock(other_session);
					}
				}

			} else {
				/* by default, use SIP INFO if 2833 is not in the SDP */
				if (!switch_false(switch_channel_get_variable(channel, "rtp_info_when_no_2833"))) {
					switch_log_printf(SWITCH_CHANNEL_SESSION_LOG(session), SWITCH_LOG_DEBUG, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");
					switch_channel_set_variable(session-&gt;channel, "dtmf_type", "info");
					smh-&gt;mparams-&gt;dtmf_type = DTMF_INFO;
					smh-&gt;mparams-&gt;recv_te = smh-&gt;mparams-&gt;te = 0;
				} else {
					// switch_channel_set_variable(session-&gt;channel, "dtmf_type", "none");
					// smh-&gt;mparams-&gt;dtmf_type = DTMF_NONE;
					// smh-&gt;mparams-&gt;recv_te = smh-&gt;mparams-&gt;te = 0;
					//add by zr 20241018, for 2833 to inband, update method
					switch_channel_set_variable(session-&gt;channel, "dtmf_type", "inband");
					smh-&gt;mparams-&gt;dtmf_type = DTMF_AUTO;
					smh-&gt;mparams-&gt;recv_te = smh-&gt;mparams-&gt;te = 0;
					switch_log_printf(SWITCH_CHANNEL_SESSION_LOG(session), SWITCH_LOG_DEBUG, "set inband_flag, No 2833 in SDP. Disable 2833 dtmf and switch to INBAND.\n");
					
					//TODO: add inband dtmf
					//A路，2833 to inband
					if( switch_core_session_get_partner(session, &amp;other_session) == SWITCH_STATUS_SUCCESS )
					{
						switch_channel_set_variable(other_session-&gt;channel, "execute_on_answer_101", "start_dtmf_generate");
						switch_core_session_rwunlock(other_session);
					}

					//B路，inband to 2833
					switch_channel_set_variable(session-&gt;channel, "inband_flag", "true");
					switch_channel_set_variable(session-&gt;channel, "spandsp_dtmf_rx_filter_dialtone", "true");
					switch_channel_set_variable(session-&gt;channel, "execute_on_answer_101", "deduplicate_dtmf");
					switch_channel_set_variable(session-&gt;channel, "execute_on_answer_102", "spandsp_start_dtmf");
				}
			}
</code></pre>
<h1 id="yPN7U"><span class="ne-text">测试</span></h1>
<p id="u87b42806" class="ne-p"><span class="ne-text">新的fs桥接的呼叫，经过“spandsp_start_dtmf”处理inband中的dtmf按键，在A路的波形中没有遗留。</span></p>
<p><img src="https://img2024.cnblogs.com/blog/2500940/202501/2500940-20250123175452573-1369837923.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h1 id="jMPFU"><span class="ne-text">总结</span></h1>
<p id="u2bb1543b" class="ne-p"><span class="ne-text">因为需要对inband的媒体流做缓存，所以该处理会产生40ms左右的语音时延。</span></p>
<p id="uf2464c1b" class="ne-p">&nbsp;</p>
<p id="u79e0eda0" class="ne-p"><span class="ne-text">空空如常</span></p>
<p id="uc6e3328c" class="ne-p"><span class="ne-text">求真得真</span></p>
</div>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.014930488280092592" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-23 17:55">2025-01-23 17:55</span>&nbsp;
<a href="https://www.cnblogs.com/qiuzhendezhen">求真得真</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18688286" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18688286);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18688286', targetLink: 'https://www.cnblogs.com/qiuzhendezhen/p/18688286', title: 'spandsp_start_dtmf的bug及修复' })">举报</a>
</div>
        