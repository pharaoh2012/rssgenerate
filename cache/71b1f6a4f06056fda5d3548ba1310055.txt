
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/seamount3/p/18717551" title="发布于 2025-02-15 22:59">
    <span role="heading" aria-level="2">MYSQL数据空洞解析</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>## 背景引入</p>
<p>MYSQL中数据表A,在删除了一半的数据后,发现表空间的大小并没有减少,这是什么原因导致的呢?</p>
<h3 id="定义">定义</h3>
<p>当对一定量数据执行delete操作时，MySQL将数据删除后进而导致页合并或者页删除,生成空闲空间，并未将空闲空间返还给操作系统，而是将当前空间标记为"可复用"，当有新的数据插入时，则不会重新申请空间，而是插入到"可复用"空间中，这种"可复用"空间，称之为数据空洞。</p>
<h2 id="复现背景">复现背景</h2>
<h4 id="前提">前提</h4>
<blockquote>
<ul>
<li>使用innodb</li>
<li>MYSQL版本&gt;=5.6</li>
</ul>
<p>解释:从 MySQL 5.6 开始，InnoDB默认采用独立表空间</p>
</blockquote>
<p>我使用的版本是:</p>
<p><img src="https://img2023.cnblogs.com/blog/3112489/202502/3112489-20250215225434216-16798573.png" alt="image-20250214210613519" loading="lazy"></p>
<h4 id="步骤">步骤</h4>
<ol>
<li>
<p>获取MYSQL存放目录(连接MYSQL后使用)</p>
<pre><code>SHOW VARIABLES LIKE 'datadir';
</code></pre>
<p>结果例如:<img src="https://img2023.cnblogs.com/blog/3112489/202502/3112489-20250215225433874-1340706937.png" alt="image-20250214204652639" loading="lazy"></p>
</li>
<li>
<p>拼接目录找出文件</p>
<p>例如dora库中的emp表即为D:\MySQL\datas\Data\dora\emp.ibt</p>
</li>
</ol>
<h3 id="未删除所有数据前的情况">未删除所有数据前的情况</h3>
<h4 id="文件大小">文件大小</h4>
<p><img src="https://img2023.cnblogs.com/blog/3112489/202502/3112489-20250215225433550-204426154.png" alt="image-20250214205111721" loading="lazy"></p>
<h4 id="记录数">记录数</h4>
<p><img src="https://img2023.cnblogs.com/blog/3112489/202502/3112489-20250215225432880-510442179.png" alt="image-20250214205217877" loading="lazy"></p>
<h3 id="删除所有记录后的情况">删除所有记录后的情况</h3>
<img alt="image-20250214205320527" style="zoom: 100%">
<h4 id="文件大小-1">文件大小</h4>
<p><img src="https://img2023.cnblogs.com/blog/3112489/202502/3112489-20250215225432481-744108315.png" alt="image-20250214205411936" loading="lazy"></p>
<h4 id="记录数-1">记录数</h4>
<p><img src="https://img2023.cnblogs.com/blog/3112489/202502/3112489-20250215225431777-51178800.png" alt="image-20250214205437534" loading="lazy"></p>
<h2 id="底层原理delete执行的逻辑">底层原理(delete执行的逻辑)</h2>
<blockquote>
<p>没有提server层的过多逻辑</p>
</blockquote>
<ol>
<li><strong>确定要删除的记录或数据页</strong>
<ul>
<li>当执行 <code>DELETE</code> 语句时，MySQL 会根据 <code>WHERE</code> 条件确定需要删除的具体记录。</li>
<li>如果没有索引支持，可能会进行全表扫描，效率较低。</li>
<li>如果有合适的索引，MySQL 会通过索引快速定位到需要删除的记录。</li>
</ul>
</li>
<li><strong>删除数据和相关索引</strong>
<ul>
<li>删除操作不仅仅是删除数据行，还需要更新与这些数据相关的索引。</li>
<li>索引中的对应条目会被删除，以保持索引的准确性和一致性。</li>
</ul>
</li>
<li><strong>触发页合并</strong>
<ul>
<li>当删除操作导致数据页或索引页的空间利用率低于一定阈值时，InnoDB 会触发页合并操作。</li>
<li>页合并会将相邻的空闲页合并成更大的连续空闲页，减少碎片化，提高存储效率。</li>
<li>页合并通常在后台线程中进行，以尽量减少对当前事务的影响。</li>
</ul>
</li>
<li><strong>标记释放的空间为可复用</strong>
<ul>
<li><strong>删除后释放的空闲空间不会立即返还给操作系统，而是标记为可复用</strong>。</li>
<li>这些空闲空间会被优先用于后续的插入操作，减少磁盘 I/O，提高性能。</li>
</ul>
</li>
</ol>
<h3 id="原因">原因</h3>
<p>原因正是删除后释放的空闲空间不会立即返回给操作系统</p>
<h3 id="数据空洞的好坏">数据空洞的好坏</h3>
<blockquote>
<p>首先必须说明,需要辩证看待问题,这么设计是存在好处的:</p>
<ol>
<li>减少了跟操作系统申请空间的次数(小幅度提高性能)</li>
<li>也减少了归还空间给操作系统(加快了像delete或者update的执行速度)</li>
</ol>
<p>归根到底减少了磁盘IO</p>
</blockquote>
<p>坏处则是:</p>
<ol>
<li>
<p><strong>磁盘空间浪费</strong>:</p>
<ol>
<li>在软件与软件之间,由于MYSQL数据空洞会占用一定的磁盘空间,会导致其他软件出现空间不足等等问题</li>
<li>(<strong>最最重要</strong>),在MYSQL内部也会出现问题:innoDB在MYSQL5.6后是独立表,数据空洞会导致占用掉一定的磁盘空间,而由于是独立表空间,这部分空间只能我们自己这张表使用,其他表无法利用也就会出现问题啦</li>
</ol>
</li>
<li>
<p><strong>查询性能下降</strong>:</p>
<ol>
<li>数据空洞会影响查询性能，特别是在使用索引时。因为：</li>
<li>空洞使得数据页分布不连续，查询时磁盘 I/O 操作会更耗时(空洞导致IO更偏向随机IO了,IO成本相比于顺序IO来说耗时更长)来加载相关页。</li>
</ol>
</li>
</ol>
<h2 id="如何规避掉数据空洞问题">如何规避掉数据空洞问题?</h2>
<p>我们的思路是先分析数据空洞产生的方式,再进一步尝试降低对应的频率:</p>
<p>数据空洞产生的方式:</p>
<ol>
<li>删除操作</li>
<li>更新索引字段
<ul>
<li>更新索引字段时，实际上会执行删除旧值和插入新值的操作，容易产生数据空洞。对于需要频繁更新的字段，尽量避免为其创建索引。</li>
</ul>
</li>
</ol>
<h4 id="如何规避">如何规避</h4>
<ul>
<li>对于删除操作:其实大多数数据库表设计的逻辑删除is_del已经帮我们解决掉了,只要场景适合即可</li>
<li>对于索引更新:自然是减少频率了</li>
</ul>
<h2 id="参考资料">参考资料</h2>
<p><a href="https://blog.csdn.net/alfiy/article/details/131739960" target="_blank" rel="noopener nofollow">MySQL数据空洞：原因、影响与解决方法-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/wtopps/article/details/115425862" target="_blank" rel="noopener nofollow">什么是MySQL数据空洞？-CSDN博客</a></p>
<h2 id="如何解决掉数据空洞问题">如何解决掉数据空洞问题?</h2>
<p>下集见分晓</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.052304495364583335" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-15 23:00">2025-02-15 22:59</span>&nbsp;
<a href="https://www.cnblogs.com/seamount3">海山了-</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18717551" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18717551);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18717551', targetLink: 'https://www.cnblogs.com/seamount3/p/18717551', title: 'MYSQL数据空洞解析' })">举报</a>
</div>
        