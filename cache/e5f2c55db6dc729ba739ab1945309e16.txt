
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zlt2000/p/18801665" title="发布于 2025-03-31 10:21">
    <span role="heading" aria-level="2">Spring AI与DeepSeek实战三：打造企业知识库</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><img src="https://img2024.cnblogs.com/blog/1769816/202503/1769816-20250331102035208-91339829.png" alt="" loading="lazy"></p>
<h2 id="一概述">一、概述</h2>
<p>企业应用集成大语言模型（LLM）落地的两大痛点：</p>
<ul>
<li><strong>知识局限性</strong>：LLM依赖静态训练数据，无法覆盖实时更新或垂直领域的知识；</li>
<li><strong>幻觉</strong>：当LLM遇到训练数据外的提问时，可能生成看似合理但错误的内容。</li>
</ul>
<p>用最低的成本解决以上问题，需要使用 <code>RAG</code> 技术，它是一种结合信息检索技术与 LLM 的框架，通过从外部 <code>知识库</code> 动态检索相关上下文信息，并将其作为 <code>Prompt</code> 融入生成过程，从而提升模型回答的准确性;</p>
<p>本文将以AI智能搜索为场景，基于 Spring AI 与 RAG 技术结合，通过构建实时知识库增强大语言模型能力，实现企业级智能搜索场景与个性化推荐，攻克 LLM 知识滞后与生成幻觉两大核心痛点。</p>
<blockquote>
<p>关于 Spring AI 与 DeepSeek 的集成，以及 API-KEY 的申请等内容，可参考文章《<a href="https://mp.weixin.qq.com/s/Y4hRX5gmmGcSxc_YK0TAgw" target="_blank" rel="noopener nofollow">Spring AI与DeepSeek实战一：快速打造智能对话应用</a>》</p>
</blockquote>
<p>&nbsp;</p>
<h2 id="二rag数据库选择">二、RAG数据库选择</h2>
<p>构建知识库的数据库一般有以下有两种选择：</p>
<table>
<thead>
<tr>
<th>维度</th>
<th>向量数据库</th>
<th>知识图谱</th>
</tr>
</thead>
<tbody>
<tr>
<td>数据结构</td>
<td>非结构化数据（文本/图像向量）</td>
<td>结构化关系网络（实体-关系-实体）</td>
</tr>
<tr>
<td>查询类型</td>
<td>语义相似度检索</td>
<td>多跳关系推理</td>
</tr>
<tr>
<td>典型场景</td>
<td>文档模糊匹配、图像检索</td>
<td>供应链追溯、金融风控</td>
</tr>
<tr>
<td>性能指标</td>
<td>QPS&gt;5000</td>
<td>复杂查询响应时间&gt;2s</td>
</tr>
<tr>
<td>开发成本</td>
<td>低（API即用）</td>
<td>高（需构建本体模型）</td>
</tr>
</tbody>
</table>
<blockquote>
<p>搜索推荐场景更适合选择 向量数据库</p>
</blockquote>
<p>&nbsp;</p>
<h2 id="三向量模型">三、向量模型</h2>
<p>向量模型是实现 RAG 的核心组件之一，用于将非结构化数据（如文本、图像、音频）转换为 <code>高维向量</code>（Embedding）的机器学习模型。这些向量能够捕捉数据的语义或结构信息，使计算机能通过数学运算处理复杂关系。</p>
<blockquote>
<p>向量数据库是专门存储、索引和检索高维向量的数据库系统</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1769816/202503/1769816-20250331102053453-1562813276.png" alt="" loading="lazy"></p>
<p><code>spring-ai-alibaba-starter</code> 默认的向量模型为 <code>text-embedding-v1</code></p>
<p>可以通过 <code>spring.ai.dashscope.embedding.options.model</code> 进行修改。</p>
<p>&nbsp;</p>
<h2 id="四核心代码">四、核心代码</h2>
<h3 id="41-构建向量数据">4.1. 构建向量数据</h3>
<p>创建 <code>resources/rag/data-resources.txt</code> 文件，内容如下：</p>
<pre><code class="language-json">1. {"type":"api","name":"测试api服务01","topic":"综合政务","industry":"采矿业","remark":"获取采矿明细的API服务"}
2. {"type":"api","name":"新能源车类型","topic":"能源","industry":"制造业","remark":"获取新能源车类型的服务"}
3. {"type":"api","name":"罚款报告","topic":"交通","industry":"制造业","remark":"获取罚款报告的接口"}
4. {"type":"api","name":"光伏发电","topic":"能源","industry":"电力、热力、燃气及水生产和供应业","remark":"获取光伏发电的年度报告"}
5. {"type":"api","name":"收益明细2025","topic":"综合政务","industry":"信息传输、软件和信息技术服务业","remark":"2025年的收益明细信息表"}
</code></pre>
<p>创建向量数据库的 <code>Bean</code></p>
<pre><code class="language-java">@Bean
public VectorStore vectorStore(EmbeddingModel embeddingModel
        , @Value("classpath:rag/data-resources.txt") Resource docs) {
    VectorStore vectorStore = SimpleVectorStore.builder(embeddingModel).build();
    vectorStore.write(new TokenTextSplitter().transform(new TextReader(docs).read()));
    return vectorStore;
}
</code></pre>
<ul>
<li><code>SimpleVectorStore</code> 是 <code>Spring AI</code> 提供的一个基于内存的向量数据库；</li>
<li>使用 <code>TokenTextSplitter</code> 来切分文档。</li>
</ul>
<h3 id="42-创建chatclient">4.2. 创建ChatClient</h3>
<pre><code class="language-java">private final ChatClient chatClient;

public RagController(ChatClient.Builder builder, VectorStore vectorStore) {
    String sysPrompt = """
            您是一个数据产品的智能搜索引擎，负责根据用户输入的内容进行精准匹配、模糊匹配和近义词匹配，以搜索相关的数据记录。
            您只能搜索指定的内容，不能回复其他内容或添加解释。
            您可以通过[search_content]标识符来表示需要搜索的具体内容。要求您返回匹配内容的完整记录，以JSON数组格式呈现。
            如果搜索不到内容，请返回[no_data]。
            """;
    this.chatClient = builder
            .defaultSystem(sysPrompt)
            .defaultAdvisors(
                    new QuestionAnswerAdvisor(vectorStore, new SearchRequest())
            )
            .defaultOptions(
                    DashScopeChatOptions.builder()
                            .withModel("deepseek-r1")
                            .build()
            )
            .build();
}
</code></pre>
<ul>
<li>通过系统 <code>Prompt</code> 来指定智能体的能力；</li>
<li>通过 <code>QuestionAnswerAdvisor</code> 绑定向量数据库。</li>
</ul>
<h3 id="43-搜索接口">4.3. 搜索接口</h3>
<pre><code class="language-java">@GetMapping(value = "/search")
public List&lt;SearchVo&gt; search(@RequestParam String search, HttpServletResponse response) {
    response.setCharacterEncoding("UTF-8");
    PromptTemplate promptTemplate = new PromptTemplate("[search_content]: {search}");
    Prompt prompt = promptTemplate.create(Map.of("search", search));

    return chatClient.prompt(prompt)
            .call()
            .entity(new ParameterizedTypeReference&lt;List&lt;SearchVo&gt;&gt;() {});
}
</code></pre>
<p>这里通过 <code>entity</code> 方法来实现搜索结果以结构化的方式返回。</p>
<h3 id="44-测试接口">4.4. 测试接口</h3>
<h4 id="441-搜索新能源">4.4.1. 搜索新能源</h4>
<p><img src="https://img2024.cnblogs.com/blog/1769816/202503/1769816-20250331102103900-1172532190.png" alt="" loading="lazy"></p>
<blockquote>
<p>除了模糊匹配了新能源车之外，还匹配了和新能源相关的光伏数据。</p>
</blockquote>
<h4 id="4421-搜索收入">4.4.21. 搜索收入</h4>
<p><img src="https://img2024.cnblogs.com/blog/1769816/202503/1769816-20250331102111669-897982274.png" alt="" loading="lazy"></p>
<blockquote>
<p>匹配同义词的收益数据。</p>
</blockquote>
<p>&nbsp;</p>
<h2 id="五总结">五、总结</h2>
<p>本文以智能搜索引擎场景，通过 <code>RAG</code> 技术，实现了全文搜索、模糊搜索、同义词推荐等功能，并以结构化的方式返回搜索结果。需要注意的是，在企业应用中，要把 <code>SimpleVectorStore</code> 改为成熟的第三方向量数据库，例如 <code>milvus</code>、<code>elasticsearch</code>、<code>redis</code> 等。</p>
<p>&nbsp;</p>
<h2 id="六完整代码">六、完整代码</h2>
<ul>
<li>Gitee地址：</li>
</ul>
<p><a href="https://gitee.com/zlt2000/zlt-spring-ai-app" target="_blank" rel="noopener nofollow">https://gitee.com/zlt2000/zlt-spring-ai-app</a></p>
<ul>
<li>Github地址：</li>
</ul>
<p><a href="https://github.com/zlt2000/zlt-spring-ai-app" target="_blank" rel="noopener nofollow">https://github.com/zlt2000/zlt-spring-ai-app</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.6662589020810186" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-31 10:22">2025-03-31 10:21</span>&nbsp;
<a href="https://www.cnblogs.com/zlt2000">zlt2000</a>&nbsp;
阅读(<span id="post_view_count">367</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18801665" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18801665);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18801665', targetLink: 'https://www.cnblogs.com/zlt2000/p/18801665', title: 'Spring AI与DeepSeek实战三：打造企业知识库' })">举报</a>
</div>
        