
        <div class="postTitle">
            <h1><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenyishi/p/18629271" title="发布于 2024-12-25 09:21">
    <span role="heading" aria-level="2">.NET 9 增强 OpenAPI 规范，不再内置swagger</span>
    

</a>
</h1>
        </div>
        <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><span style="font-size: 14px">在 .NET 9 的更新中，微软增强了原生 OpenAPI。这一变化表明 .NET 正在更加拥抱开放标准，同时让开发者体验更加轻松高效。本文将探讨为何进行这一更改、OpenAPI 的优势，以及如何在 .NET 9 中使用 OpenAPI。</span></p>
<hr>
<h4>为什么不再内置 Swagger？</h4>
<h5>1. <strong>标准化的需求</strong></h5>
<p>Swagger 是 OpenAPI 规范的早期实现，虽然功能强大，但它逐渐被视为工具集的一部分，而非行业标准。转向原生 OpenAPI 支持意味着 .NET 正式采用更具广泛认可的标准，从而提升与其他生态工具的兼容性。</p>
<h5>2. <strong>简化依赖关系</strong></h5>
<p>移除对 Swagger-specific 组件的依赖，使框架更简洁并降低复杂性。开发者可以直接依赖 OpenAPI 规范，而不是被局限在 Swagger 工具集内。</p>
<h5>3. <strong>灵活性与互操作性</strong></h5>
<p>OpenAPI 作为开放标准，被广泛支持于各类工具和平台（如 Postman、API 网关、自动化测试工具等）。这使得 .NET 应用程序更容易集成到多样化的技术栈中。</p>
<hr>
<h4>如何在 .NET 9 中使用 OpenAPI？</h4>
<p>.NET 9 提供了对 OpenAPI 的原生支持，通过简单的配置即可生成 OpenAPI 文档并集成可视化工具，如 Swagger UI 和 Scalar API Reference。</p>
<p>以下是配置步骤：</p>
<h5>1. <strong>添加必要的服务</strong></h5>
<p>在 <code>Program.cs</code> 文件中，调用 <code>AddOpenApi</code> 方法注册 OpenAPI 支持。</p>
<h5>2. <strong>映射 OpenAPI 文档</strong></h5>
<p>使用 <code>MapOpenApi</code> 映射 OpenAPI 文档路径，便于开发和测试。</p>
<h5>3. <strong>集成可视化工具</strong></h5>
<p>通过 <code>UseSwaggerUI</code> 或 <code>MapScalarApiReference</code> 添加交互式文档界面。</p>
<ul>
<li><code>UseSwaggerUI</code>&nbsp;需要安装&nbsp;<code>Swashbuckle.AspNetCore.SwaggerUi</code>&nbsp;包。
<pre><code class="language-bash">dotnet add package Swashbuckle.AspNetCore.SwaggerUi</code></pre>
</li>
</ul>
<ul>
<li><code>MapScalarApiReference</code>&nbsp;需要安装&nbsp;<code>Scalar.AspNetCore</code>&nbsp;包。
<pre><code class="language-bash">dotnet add package Scalar.AspNetCore</code></pre>
</li>
</ul>
<hr>
<h4>示例代码</h4>
<p>以下代码展示了如何在 .NET 9 中配置和使用 OpenAPI：</p>
<pre><code class="language-csharp">using Scalar.AspNetCore;

namespace WebApplication2
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // 注册控制器和 OpenAPI 服务
            builder.Services.AddControllers();
            builder.Services.AddOpenApi();

            var app = builder.Build();

            // 开发环境中启用 OpenAPI 文档和可视化工具
            if (app.Environment.IsDevelopment())
            {
                app.MapOpenApi(); // 映射 OpenAPI 文档路径
                app.UseSwaggerUI(options =&gt;
                {
                    options.SwaggerEndpoint("/openapi/v1.json", "v1"); // 设置文档路径
                });
                app.MapScalarApiReference(); // 映射其他参考路径
            }

            app.UseAuthorization();

            // 映射控制器
            app.MapControllers();

            app.Run();
        }
    }
}
</code></pre>
<hr>
<h4>示例解析</h4>
<ol>
<li>
<p><strong>服务注册</strong></p>
<pre><code class="language-csharp">builder.Services.AddOpenApi();
</code></pre>
<p>此行代码启用了 OpenAPI 支持。</p>
</li>
<li>
<p><strong>映射文档</strong></p>
<pre><code class="language-csharp">app.MapOpenApi();
</code></pre>
<p>这将 OpenAPI 文档映射到默认路径 <code>/openapi/v1.json</code>。</p>
</li>
<li>
<p><strong>增加文档可视化</strong></p>
<pre><code class="language-csharp">app.UseSwaggerUI(options =&gt;
{
   options.SwaggerEndpoint("/openapi/v1.json", "v1");
});
app.MapScalarApiReference();  
</code></pre>
<p>这将增加swagger和scalar两种可视化工具。</p>
</li>
<li>
<p><strong>访问可视化工具</strong></p>
<ul>
<li><code>SwaggerUI</code> 需要访问/swagger。
<p><img src="https://img2024.cnblogs.com/blog/1033233/202412/1033233-20241225091042710-1322996420.png" alt="" width="972" height="394" loading="lazy"></p>
</li>
<li><code><code><code>Scalar</code>&nbsp;需要访问/scalar/v1。</code></code>
<p><img src="https://img2024.cnblogs.com/blog/1033233/202412/1033233-20241225091108694-25073882.png" alt="" width="950" height="456" loading="lazy"></p>
</li>
</ul>
<p>这两个工具都可以用于可视化 OpenAPI 文档，提供交互式界面以测试 API。</p>
</li>
</ol><hr>
<h4>总结</h4>
<p>.NET 9 中移除内置 Swagger，增加 OpenAPI 支持，是一个符合行业趋势的重要改进。这一变化不仅提升了开发体验，也使得 .NET 应用能够更高效地与其他工具和平台协作。</p>
<p>通过 OpenAPI 的原生支持和灵活的可视化工具选择，开发者可以更轻松地生成文档、测试接口和集成服务。使用示例代码，立即开始在 .NET 9 中体验 OpenAPI 的强大功能吧！</p>
</div>
<div class="clear"></div>

        <div class="postDesc">posted on 
<span id="post-date" data-last-update-days="1.2873932804733796" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-25 09:25">2024-12-25 09:21</span>&nbsp;
<a href="https://www.cnblogs.com/chenyishi">chester·chen</a>&nbsp;
阅读(<span id="post_view_count">775</span>)&nbsp;
评论(<span id="post_comment_count">8</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18629271" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18629271);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18629271', targetLink: 'https://www.cnblogs.com/chenyishi/p/18629271', title: '.NET 9 增强 OpenAPI 规范，不再内置swagger' })">举报</a>
</div>
    