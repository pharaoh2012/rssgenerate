
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kybs0/p/18664127" title="发布于 2025-01-10 16:51">
    <span role="heading" aria-level="2">.NET 跨进程设置父子窗口SetParent</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>跨进程设置父子窗口除了owner方案 <a href="https://www.cnblogs.com/kybs0/p/9234601.html">C# 跨进程 设置窗口owner - 唐宋元明清2188 - 博客园</a>，还有Win32-SetParent&nbsp;<a href="https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-setparent" rel="noopener nofollow">SetParent 函数 (winuser.h) - Win32 apps | Microsoft Learn</a></p>
<p>SetParent可以实现将子窗口嵌入另一个窗口中</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">1</span>     [DllImport(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">user32.dll</span><span style="color: rgba(128, 0, 0, 1)">"</span>, SetLastError = <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">)]
</span><span style="color: rgba(0, 128, 128, 1)">2</span>     <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">extern</span> <span style="color: rgba(0, 0, 255, 1)">int</span> SetParent(IntPtr hWndChild, IntPtr hWndNewParent);</pre>
</div>
<p>hWndChild是子窗口，hWndNewParent是新父窗口句柄，返回参数为子窗口的上一次父窗口句柄</p>
<p>我们建个demo试试，</p>
<p>可以使用syp++-查找窗口句柄。这里为了效率高，直接显示窗口句柄方便获取：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">1</span>     CurrentHandleTextBox.Text = <span style="color: rgba(0, 0, 255, 1)">new</span> WindowInteropHelper(<span style="color: rgba(0, 0, 255, 1)">this</span>).Handle.ToString(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">X</span><span style="color: rgba(128, 0, 0, 1)">"</span>);</pre>
</div>
<p>启动2个demo窗口，根据另一个窗口句柄和当前窗口句柄，设置SetParent</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">1</span>     <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> AddChildWindow_OnClick(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, RoutedEventArgs e)
</span><span style="color: rgba(0, 128, 128, 1)">2</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">3</span>         <span style="color: rgba(0, 0, 255, 1)">var</span> inputInt32 = Convert.ToInt32(InputTextBox.Text, <span style="color: rgba(128, 0, 128, 1)">16</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">4</span>         IntPtr inputPtr =<span style="color: rgba(0, 0, 0, 1)"> (IntPtr)inputInt32;
</span><span style="color: rgba(0, 128, 128, 1)">5</span>         <span style="color: rgba(0, 0, 255, 1)">var</span> currentInPtr = <span style="color: rgba(0, 0, 255, 1)">new</span> WindowInteropHelper(<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">).Handle;
</span><span style="color: rgba(0, 128, 128, 1)">6</span> 
<span style="color: rgba(0, 128, 128, 1)">7</span>         <span style="color: rgba(0, 0, 255, 1)">var</span> result =<span style="color: rgba(0, 0, 0, 1)"> SetParent(inputPtr, currentInPtr);
</span><span style="color: rgba(0, 128, 128, 1)">8</span>         MessageBox.Show($<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">SetParent Result:{result}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">9</span>     }</pre>
</div>
<p>显示效果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/685541/202501/685541-20250110151613848-729457603.gif" alt="" width="547" height="350" loading="lazy"></p>
<p>设置成功时，结果：</p>
<p><img src="https://img2024.cnblogs.com/blog/685541/202501/685541-20250110162651340-1172710906.jpg" alt="" loading="lazy"></p>
<p>65552是上一个父窗口句柄，这是哪个窗口呢？</p>
<p>我们把65552换成16进制，通过syp++，能看到是这是桌面窗口，即默认父窗口句柄是桌面的</p>
<p><img src="https://img2024.cnblogs.com/blog/685541/202501/685541-20250110163207521-1357200350.jpg" alt="" width="902" height="454" loading="lazy"></p>
<p>上面Demo详见&nbsp;<a href="https://github.com/kybs00/SetParentDemo" rel="noopener nofollow">kybs00/SetParentDemo</a></p>
<p>SetParent函数非常强大，适合那些需要设置子窗口只在父窗口区域内显示，比如分屏软件，可以把父窗口完全当作一个显示器来使用。</p>
<p><strong>根据小伙伴反馈，应用设置了uiAccess后，在此进程打开其它软件，其它软件内部调用SetParent实现相关功能时会失败。</strong></p>
<div class="cnblogs_code">
<pre>时间: <span style="color: rgba(128, 0, 128, 1)">2025</span>-<span style="color: rgba(128, 0, 128, 1)">01</span>-<span style="color: rgba(128, 0, 128, 1)">08</span> <span style="color: rgba(128, 0, 128, 1)">18</span>:<span style="color: rgba(128, 0, 128, 1)">03</span>:<span style="color: rgba(128, 0, 128, 1)">44</span>,<span style="color: rgba(128, 0, 128, 1)">034</span><span style="color: rgba(0, 0, 0, 1)">
线程ID: [</span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">]
错误描述: 寄宿的 HWND 必须是指定父级的子窗口。
异常: System.InvalidOperationException: 寄宿的 HWND 必须是指定父级的子窗口。
   在 System.Windows.Interop.HwndHost.BuildWindow(HandleRef hwndParent)
   在 System.Windows.Interop.HwndHost.BuildOrReparentWindow()
   在 System.Windows.Interop.HwndHost.OnSourceChanged(Object sender, SourceChangedEventArgs e)
   在 System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)
   在 System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)
   在 System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)
   在 System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)
   在 System.Windows.PresentationSource.UpdateSourceOfElement(DependencyObject doTarget, DependencyObject doAncestor, DependencyObject doOldParent)
   在 System.Windows.PresentationSource.OnVisualAncestorChanged(DependencyObject uie, AncestorChangedEventArgs e)
   在 System.Windows.UIElement.OnVisualAncestorChanged(Object sender, AncestorChangedEventArgs e)
   在 System.Windows.Media.Visual.ProcessAncestorChangedNotificationRecursive(DependencyObject e, AncestorChangedEventArgs args)
   在 System.Windows.Media.Visual.ProcessAncestorChangedNotificationRecursive(DependencyObject e, AncestorChangedEventArgs args)
   在 System.Windows.Media.Visual.ProcessAncestorChangedNotificationRecursive(DependencyObject e, AncestorChangedEventArgs args)
   在 System.Windows.Media.Visual.AddVisualChild(Visual child)
   在 System.Windows.FrameworkElement.set_TemplateChild(UIElement value)
   在 System.Windows.Controls.ContentPresenter.UseContentTemplate.BuildVisualTree(FrameworkElement container)
   在 System.Windows.StyleHelper.ApplyTemplateContent(UncommonField`</span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)"> dataField, DependencyObject container, FrameworkElementFactory templateRoot, Int32 lastChildIndex, HybridDictionary childIndexFromChildID, FrameworkTemplate frameworkTemplate)
   在 System.Windows.FrameworkTemplate.ApplyTemplateContent(UncommonField`</span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)"> templateDataField, FrameworkElement container)
   在 System.Windows.FrameworkElement.ApplyTemplate()
   在 System.Windows.FrameworkElement.MeasureCore(Size availableSize)
   在 System.Windows.UIElement.Measure(Size availableSize)
   在 System.Windows.Controls.Border.MeasureOverride(Size constraint)
   在 System.Windows.FrameworkElement.MeasureCore(Size availableSize)
   在 System.Windows.UIElement.Measure(Size availableSize)
   在 System.Windows.Controls.Control.MeasureOverride(Size constraint)
   在 System.Windows.FrameworkElement.MeasureCore(Size availableSize)
   在 System.Windows.UIElement.Measure(Size availableSize)
   在 System.Windows.Controls.Grid.MeasureCell(Int32 cell, Boolean forceInfinityV)
   在 System.Windows.Controls.Grid.MeasureCellsGroup(Int32 cellsHead, Size referenceSize, Boolean ignoreDesiredSizeU, Boolean forceInfinityV, Boolean</span>&amp;<span style="color: rgba(0, 0, 0, 1)"> hasDesiredSizeUChanged)
   在 System.Windows.Controls.Grid.MeasureOverride(Size constraint)
   在 System.Windows.FrameworkElement.MeasureCore(Size availableSize)
   在 System.Windows.UIElement.Measure(Size availableSize)
   在 System.Windows.ContextLayoutManager.UpdateLayout()
   在 MagicWindowSplit.SplitService.</span>&lt;SplitWindow&gt;<span style="color: rgba(0, 0, 0, 1)">d__25.MoveNext()
</span>--- 引发异常的上一位置中堆栈跟踪的末尾 ---<span style="color: rgba(0, 0, 0, 1)">
   在 System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   在 MagicWindowSplit.SplitService.</span>&lt;SelectControlSplit&gt;<span style="color: rgba(0, 0, 0, 1)">d__16.MoveNext()
</span>--- 引发异常的上一位置中堆栈跟踪的末尾 ---<span style="color: rgba(0, 0, 0, 1)">
   在 System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   在 System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)
   在 System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)</span></pre>
</div>
<p>uiAccess进程启动软件，会默认添加管理员权限。为了简化后续描述，我们称“uiAccess权限进程启动其它软件”，有uiAccess影响。</p>
<p>下面我们启动俩个相同demo.exe，使用俩个不同进程的窗口，来验证SetParent情况</p>
<p>1.俩个均有uiAccess影响的窗口&nbsp;-&nbsp;&nbsp;<span style="color: rgba(0, 128, 0, 1)">正常</span></p>
<p>2.有uiAccess影响的窗口A、非uiAccess影响窗口B，在A内设置A为B的子窗口 - <span style="color: rgba(0, 128, 0, 1)">正常</span></p>
<p>3.有uiAccess影响的窗口A、非uiAccess影响窗口B，在B内设置A为B的子窗口 - <span style="color: rgba(255, 0, 0, 1)">错误，返回值0</span></p>
<p>原因是管理员权限问题，非管理员权限无法设置管理员权限窗口为其子窗口，仅用管理员权限验证也是一样的结果。</p>
<p>4.&nbsp;有uiAccess影响的窗口A、非uiAccess影响窗口B，在A内设置B为A的子窗口 - <span style="color: rgba(0, 128, 0, 1)">正常</span></p>
<p>5.&nbsp;有uiAccess影响的窗口A、非uiAccess影响窗口B，在B内设置B为A的子窗口 - <span style="color: rgba(255, 0, 0, 1)">错误</span></p>
<p>原因是管理员权限问题，非管理员权限无法设置管理员权限窗口为其父窗口，仅用管理员权限验证也是一样的结果。</p>
<div>所以设置SetParent失败与uiAccess影响无关，仅仅是管理员权限不足。</div>
<div>而上面小伙伴反馈的分屏软件调用SetParent异常是业务逻辑问题，毅仔有相关介绍&nbsp;<a href="https://blog.walterlv.com/post/hosted-hwnd-must-be-a-child-window-of-the-specified-parent.html" rel="noopener nofollow">System.InvalidOperationException:“寄宿的 HWND 必须是指定父级的子窗口。” - walterlv</a>&nbsp;可以参照解决</div>
<div>&nbsp;</div>
<div>SetParent其它问题可以参考：</div>
<div><a href="https://blog.csdn.net/qq_59075481/article/details/133581281" rel="noopener nofollow">SetParent 函数修改父窗口的误区-CSDN博客</a></div>
<div><a href="https://blog.walterlv.com/post/win32-child-window-style.html" rel="noopener nofollow">使用 SetParent 制作父子窗口的时候，如何设置子窗口的窗口样式以避免抢走父窗口的焦点 - walterlv</a></div>
<div><a href="https://blog.walterlv.com/post/all-processes-freezes-if-their-windows-are-connected-via-setparent.html" rel="noopener nofollow">使用 SetParent 跨进程设置父子窗口时的一些问题（小心卡死） - walterlv</a></div>
</div>
<div id="MySignature" role="contentinfo">
    <div>作者：<a href="http://www.cnblogs.com/kybs0/" target="_blank">唐宋元明清2188</a></div>
<div>出处：<a href="http://www.cnblogs.com/kybs0/" target="_blank">http://www.cnblogs.com/kybs0/</a></div>
<div>让学习成为习惯，假设明天就有重大机遇等着你，你准备好了么</div>
<div>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须在文章页面给出原文连接，否则保留追究法律责任的权利。 </div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="2.5181305198229165" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-10 22:29">2025-01-10 16:51</span>&nbsp;
<a href="https://www.cnblogs.com/kybs0">唐宋元明清2188</a>&nbsp;
阅读(<span id="post_view_count">25</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18664127" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18664127);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18664127', targetLink: 'https://www.cnblogs.com/kybs0/p/18664127', title: '.NET 跨进程设置父子窗口SetParent' })">举报</a>
</div>
        