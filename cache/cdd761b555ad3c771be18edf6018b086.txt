
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ofnoname/p/18792549" title="发布于 2025-03-26 00:26">
    <span role="heading" aria-level="2">字符串问题的歪门奇宝：进制哈希</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>江湖中，剑客以快制胜，而算法竞赛里，<strong>字符串哈希（String Hashing）</strong>便是那柄出招如电的快剑。</p>
<p>各种字符串问题纷乱复杂，各种字符串算法招式繁复，需苦练内功心法。但字符串哈希算法却只凭一招：<strong>将字符串化作数字，以数论为刃，至简之道斩尽来犯之敌</strong>。</p>
<p>但此招并非无懈可击。若遇精心构造的数据，它可能一剑刺空，露出破绽。然而，在绝大多数情况，它仍是侠客们最趁手的兵器——<strong>七分准，三分险，却快得让人无从招架</strong>。</p>
<h2 id="何为进制哈希">何为进制哈希？</h2>
<p>哈希是复杂对象到较小整数的映射，而进制版本的字符串哈希是一种很有趣的哈希方式。他把字符串转化为一个<strong>b进制的数值</strong>。</p>
<p>例如，字符串 <code>"ab"</code>：</p>
<ul>
<li>若设 <code>u=1</code>, <code>v=2</code>，取 <code>base=131</code>（进制基数），则其哈希值为：<p></p><div class="math display">\[H('uv') = 1 \times 131^1 + 2 \times 131^0 = 133
\]</div><p></p></li>
</ul>
<p>既然是将字符视为数，那每个字符需要一个值，同时还需要一个进制大小。</p>
<p>考虑<strong>字符集（Character Set）</strong>，一般就使用字符的编码即可（如 ascii 或 unicode），简单起见本文只考虑小写字母集：<code>a-z</code>（26个字符），对应<code>1-26</code></p>
<p>注：为什么不使用<code>0-25</code>？因为把 0 放入编码，会导致出现"a"和"aa"相等，"aaabcd"和"aaaaabcd"相等的情况，太容易构造冲突。为了应对构造数据，不如直接使用 ascii 本身，或者至少让<code>a-z</code>（26个字符），对应<code>1-26</code>。</p>
<p>考虑<strong>基数（Base）的选择</strong>，基数显然至少大于字符集大小。若用<code>a-z</code>，26字符去除 0，需要 27进制，实际上也可以更大，常用质数基数：131、13331 等。</p>
<p>随着字符串长度增加，这个数迅速就变得非常大，所以要再对某个大质数取模，便得到最终的编码。</p>
<h2 id="查询子串哈希">查询子串哈希</h2>
<p>字符串哈希之所以是"快剑"，因为它有一个奇妙的性质：它能通过<strong>前缀哈希（Prefix Hash）</strong>，在 O(1) 时间内斩出任意子串的哈希值。</p>
<p>选定编码和基数后，我们处理出<strong><code>a[i]</code></strong>：存储前i个字符的哈希值，显然有秦九韶算法：<code>a[i] = a[i-1] * base + d;</code></p>
<p>现在我们要计算子串<code>s[l..r]</code>的哈希，其原理如同在进制数中取数：</p>
<ol>
<li>将前缀哈希<code>a[r]</code>视为大数。</li>
<li>减去<code>a[l-1]</code>向左位移<code>(r-l+1)</code>位的干扰（通过乘<code>p[r-l+1]</code>实现，<code>p</code>为基数的幂次）</li>
</ol>
<p><img src="https://img2024.cnblogs.com/blog/1545207/202503/1545207-20250325231123303-703599689.png" alt="image" loading="lazy"></p>
<pre><code class="language-cpp">// 为了简单和效率，直接选用 unsigned long long，模数等价于2^64，称为自然溢出。
class hashstr {
    using u64 = unsigned long long;

    int n;
    u64 mod;
    vector&lt;u64&gt; a, p;

    const static int base = 131;
public:
    hashstr(const string &amp;s, u64 mod = 0): n(s.size()), a(n), p(n+1) {
        u64 x = 0;
        for (int i = 0; i &lt; n; ++i) {
            int d = s[i]; // ASCII
            a[i] = x * base + d;
        }

        p[0] = 1;
        for (int i = 1; i &lt;= n; ++i) p[i] = p[i-1] * base;
    }

    u64 hash(int l, int r) {
        return a[r] - (l ? a[l-1]*p[r-l+1] : 0);
    }
};
</code></pre>
<pre><code class="language-cpp">// 示例：计算"bcd"的哈希（假设base=233）
hash(1,3) = a[3] - a[0]*p[3] 
           = (a*B^3 + b*B^2 + c*B^1 + d*B^0) - a*B^3
           = b*B^2 + c*B^1 + d*B^0 = hash(1,3)
</code></pre>
<table>
<thead>
<tr>
<th>操作</th>
<th>时间复杂度</th>
<th>空间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>预处理</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>子串查询</td>
<td>O(1)</td>
<td>-</td>
</tr>
</tbody>
</table>
<p>这就意味着，给定一个或多个字符串，我们可以瞬间判断出一个字符串的某子串和另一字符串的某子串是否相等，无需任何比较！</p>
<h2 id="赖皮之道四两拨千斤的解题哲学">「赖皮」之道：四两拨千斤的解题哲学</h2>
<p>在算法江湖中，字符串哈希被戏称为「赖皮算法」——它不似正统数据结构那般严谨，却总能用巧劲化解难题。其精髓在于：<strong>将字符串问题暴力转化为数字问题</strong>。</p>
<h3 id="1-回文判定palindrome-detection"><strong>1 回文判定（Palindrome Detection）</strong></h3>
<p><strong>正统解法</strong>：Manacher算法（O(n)）</p>
<p><strong>哈希赖皮法</strong>：</p>
<ol>
<li>准备原字符串和原字符串的反转的前缀进制哈希。正向计算前缀哈希，反向计算后缀哈希</li>
<li>比较子串<code>[l,r]</code>的正向哈希与反向哈希</li>
</ol>
<h3 id="2-字符串匹配pattern-matching"><strong>2 字符串匹配（Pattern Matching）</strong></h3>
<p><strong>正统解法</strong>：KMP（O(n+m)）</p>
<p><strong>哈希赖皮法</strong>：</p>
<ol>
<li>预处理模式串哈希<code>H(pattern)</code></li>
<li>滑动窗口直接计算文本串所有长度为m的子串哈希</li>
</ol>
<h3 id="3-最长重复子串longest-repeated-substring"><strong>3 最长重复子串（Longest Repeated Substring）</strong></h3>
<p><strong>正统解法</strong>：后缀数组（O(nlogn)）</p>
<p><strong>哈希赖皮法</strong>：</p>
<ol>
<li>二分可能的最大长度L</li>
<li>用哈希存储所有长度为L的子串，检查碰撞</li>
</ol>
<h3 id="4-最长公共子串longest-common-substring"><strong>4 最长公共子串（Longest Common Substring）</strong></h3>
<p><strong>正统解法</strong>：后缀自动机（O(n)）</p>
<p><strong>哈希赖皮法</strong>：</p>
<ol>
<li>二分可能的最大长度L</li>
<li>分别计算两个字符串所有长度为L的子串哈希集</li>
<li>求哈希集合的交集</li>
</ol>
<h3 id="5-循环同构判定cyclic-isomorphism"><strong>5 循环同构判定（Cyclic Isomorphism）</strong></h3>
<p><strong>正统解法</strong>：最小表示法（O(n)）</p>
<p><strong>哈希赖皮法</strong>：</p>
<ol>
<li>构造原字符串的哈希环<code>S = S + S</code></li>
<li>比较所有可能旋转位置的子串哈希</li>
</ol>
<blockquote>
<p><strong>江湖箴言</strong>：<br>
"哈希算法七分险，快剑无影胜有影。<br>
若遇生死决赛场，双哈希出保太平。"</p>
</blockquote>
<h2 id="处理哈希碰撞问题">处理哈希碰撞问题</h2>
<h3 id="选择模数">选择模数</h3>
<p><strong>飞刀轻快但易折，重剑无锋却难精，双剑合璧则近乎无敌</strong>。不同的场景需用不同的方法。</p>
<ol>
<li>
<p>小质数模数（如 1e9+7）需显式取模，常数较大，且碰撞风险高：若数据量超过 <span class="math inline">\(\sqrt{p}\)</span>（约3e4），生日悖论导致碰撞概率显著上升</p>
<ul>
<li>例如：用<code>p=1e9+7</code>处理1e5个字符串时，碰撞概率约5%</li>
<li><strong>适用场景</strong>：
<ul>
<li>小规模数据（n≤1e4）</li>
<li>需严格控制哈希值范围的场景</li>
</ul>
</li>
</ul>
</li>
<li>
<p>大质数模数（如 1e18+3）的碰撞概率极低：值域巨大，可安全处理 1e6 级数据。不过计算的代价增加。自己选取大质数，更拥有<strong>抗构造性</strong>，难以针对随机大质数构造碰撞数据。</p>
</li>
<li>
<p>自然溢出（<span class="math inline">\(2^{64}\)</span>）飞刀迅捷，却怕预判。利用 CPU 和无符号整数自动溢出，无显式取模操作，非常高效。但模数固定为<span class="math inline">\(2^{64}\)</span>，数字虽大，但已经确定。攻击者可构造<strong>全冲突数据</strong>。如 Thue-Morse 序列可导致大规模碰撞</p>
<ul>
<li><strong>适用场景</strong>：
<ul>
<li>非对抗性环境（如企业内部数据处理）</li>
<li>时间极其敏感的竞赛场景</li>
</ul>
</li>
</ul>
</li>
<li>
<p>双哈希（Dual Hash）子母鸳鸯，万无一失。同时使用两个不同基数和模数的哈希系统，例如：<code>(base1=131, mod1=1e9+7)</code> + <code>(base2=13331, mod2=1e18+3)</code></p>
<ul>
<li><strong>优势</strong>：
<ul>
<li>需两个哈希值同时碰撞才算冲突，概率非常非常非常低</li>
<li>即使攻击者破解一组参数，另一组仍可保障安全</li>
</ul>
</li>
<li><strong>代价</strong>：
<ul>
<li>空间和时间翻倍</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>对于 <span class="math inline">\(n\)</span> 个字符串和模数 <span class="math inline">\(p\)</span>，生日悖论给出的冲突概率：</p>
<p></p><div class="math display">\[P \approx 1 - e^{-\frac{n(n-1)}{2p}}
\]</div><p></p><table>
<thead>
<tr>
<th>场景</th>
<th>推荐策略</th>
<th>理由</th>
</tr>
</thead>
<tbody>
<tr>
<td>竞赛常规题</td>
<td>自然溢出</td>
<td>代码简洁，跑得快</td>
</tr>
<tr>
<td>对抗性构造数据</td>
<td>双哈希</td>
<td>绝对安全</td>
</tr>
<tr>
<td>超大字符集（如Unicode）</td>
<td>大质数+双哈希</td>
<td>避免基数不足导致冲突</td>
</tr>
<tr>
<td>内存敏感环境</td>
<td>单大质数</td>
<td>平衡安全与空间</td>
</tr>
</tbody>
</table>
<h3 id="选择基数">选择基数</h3>
<p>基数选择也对碰撞概率有影响。首先基数应该至少和字符集一样大，其次优质基数应满足三大特征：</p>
<ol>
<li>
<p><strong>与模数互质</strong>：若模数为质数，则基数只需非其倍数。互质可以避免出现周期性重复，最大化利用值域空间（如<code>base=2</code>时哈希值奇偶性固定）</p>
</li>
<li>
<p><strong>远离模数的二次剩余</strong>：防止出现 <span class="math inline">\(base^k \equiv 1 \ (\text{mod} \ p)\)</span> 的短周期。例如<code>base=10</code>与<code>p=1e9+7</code>的组合周期仅为<span class="math inline">\(p-1\)</span>，实际效果差</p>
</li>
<li>
<p><strong>高熵分布</strong>：推荐使用<strong>不规则大质数</strong></p>
</li>
</ol>
<p><strong>优质基数可将冲突率再降一个数量级</strong>：</p>
<table>
<thead>
<tr>
<th>基数类型</th>
<th>实际冲突率（n=1e5, p=1e9+7）</th>
</tr>
</thead>
<tbody>
<tr>
<td>小质数（131）</td>
<td>~0.5%</td>
</tr>
<tr>
<td>规律数（10007）</td>
<td>~1.2%</td>
</tr>
<tr>
<td>大随机质数</td>
<td>&lt;0.01%</td>
</tr>
</tbody>
</table>
<pre><code>class hashstr {
    // ...
    bool use_mod;

    const static int default_base = 131;
    int base;
public:
    // 构造函数：可指定模数（0表示自然溢出）、基数
    hashstr(const string &amp;s, u64 mod = 0, int base = default_base) 
        : n(s.size()), use_mod(mod != 0), mod(mod), a(n), p(n+1), base(base) {
        
        u64 x = 0;
        for (int i = 0; i &lt; n; ++i) {
            int d = s[i];  // 直接使用ASCII码，支持更广的字符集
            if (use_mod) {
                a[i] = (x * base + d) % mod;
            } else {
                a[i] = x * base + d;
            }
            x = a[i];
        }
        
        p[0] = 1;
        for (int i = 1; i &lt;= n; ++i) {
            if (use_mod) {
                p[i] = (p[i-1] * base) % mod;
            } else {
                p[i] = p[i-1] * base;
            }
        }
    }

    // 获取子串哈希 [l, r]
    u64 hash(int l, int r) {
        if (use_mod) {
            u64 result = (a[r] - (l ? (a[l-1] * p[r-l+1]) % mod : 0) + mod) % mod;
            return result;
        } else {
            return a[r] - (l ? a[l-1] * p[r-l+1] : 0);
        }
    }
};
</code></pre>
<blockquote>
<p>（醒木一拍）</p>
<p><strong>《哈希江湖志》</strong></p>
<p>进制为基化剑芒，<br>
子串快剑破风霜。<br>
小质易折如薄柳，<br>
大模稳坐似山冈。</p>
<p>自然溢出飞刀迅，<br>
双哈希出鬼神慌。<br>
莫道此招多取巧，<br>
九成胜算即称王！</p>
</blockquote>
<blockquote>
<p>（醒木再拍）</p>
</blockquote>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.12717757229166668" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-26 23:18">2025-03-26 00:26</span>&nbsp;
<a href="https://www.cnblogs.com/ofnoname">Ofnoname</a>&nbsp;
阅读(<span id="post_view_count">214</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18792549" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18792549);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18792549', targetLink: 'https://www.cnblogs.com/ofnoname/p/18792549', title: '字符串问题的歪门奇宝：进制哈希' })">举报</a>
</div>
        