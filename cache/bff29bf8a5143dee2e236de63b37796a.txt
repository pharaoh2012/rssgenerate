
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/jiajialove/p/18801537" title="发布于 2025-03-31 09:10">
    <span role="heading" aria-level="2">useDeferredValue的作用</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div>
<div>
<h2 data-id="heading-0">前言</h2>
<p>useDeferredValue是react18新增的一个用于优化性能的一个hook，它的作用是延迟获取一个值，实际开发中的常规用法与我们之前所用的防抖和节流很相似，但是也有一定的区别。本篇文章我们就逐步分析它的设计原理和用法，并且讨论它与防抖节流的区别和它自身的优势。在讨论useDeferredValue之前，我们要先了解react的两个知识点，<strong>嵌套组件的渲染过程和记忆组件memo原理作用。</strong> <a title="" name="user-content-kPIaV" href="https://link.juejin.cn?target=" rel="noopener nofollow"></a></p>
<h2 data-id="heading-1">嵌套组件的渲染过程</h2>
<p><a title="" name="user-content-vp3zn" href="https://link.juejin.cn?target=" rel="noopener nofollow"></a></p>
<h3 data-id="heading-2">子组件正常渲染</h3>
<p>提到组件嵌套我们非常熟悉，因为整个react页面都是只有一个根组件，所有组件都是这个跟组件的子组件，那我们就分析一下有子组件的时候，父组件重现渲染会发生什么。<br>其实当我们的父组件重新渲染的时候，我们的所有子组件也会全部重新渲染一遍，这样设计主要是为了保持组件树的一致性和子组件数据更新的及时性。<br>例如一些子组件与父组件存在数据传递的情况，如果子组件不重新渲染，那么就无法得到最新的父组件传递过去的数据，也就无法及时更新页面。下面我们使用一个小案例测试这一场景：</p>
<div class="code-block-extension-header">
<div class="code-block-extension-headerLeft">
<div class="code-block-extension-foldBtn">&nbsp;</div>

<span class="code-block-extension-lang">tsx</span></div>
<div class="code-block-extension-headerRight">
<div class="render" data-v-159ebe90=""> <span class="txt" data-v-159ebe90="">代码解读</span></div>
<div class="code-block-extension-copyCodeBtn">复制代码</div>

</div>

</div>
<pre><code class="hljs language-tsx code-block-extension-codeShowNum" lang="tsx"><span class="code-block-extension-codeLine" data-line-num="1"><span class="hljs-keyword">import <span class="hljs-title class_">React <span class="hljs-keyword">from <span class="hljs-string">'react'
<span class="code-block-extension-codeLine" data-line-num="2">
<span class="code-block-extension-codeLine" data-line-num="3"><span class="hljs-keyword">function <span class="hljs-title function_">Test01(<span class="hljs-params">props: {count: <span class="hljs-built_in">number}) {
<span class="code-block-extension-codeLine" data-line-num="4">    <span class="hljs-keyword">const { count } = props
<span class="code-block-extension-codeLine" data-line-num="5">
<span class="code-block-extension-codeLine" data-line-num="6">    <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'Test01 render')
<span class="code-block-extension-codeLine" data-line-num="7">
<span class="code-block-extension-codeLine" data-line-num="8">    <span class="hljs-keyword">return (
<span class="code-block-extension-codeLine" data-line-num="9">        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="10">            <span class="hljs-tag">&lt;<span class="hljs-name">p&gt;This is Test01 Page {count}<span class="hljs-tag">&lt;/<span class="hljs-name">p&gt;
<span class="code-block-extension-codeLine" data-line-num="11">        <span class="hljs-tag">&lt;/<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="12">    )
<span class="code-block-extension-codeLine" data-line-num="13">}
<span class="code-block-extension-codeLine" data-line-num="14">
<span class="code-block-extension-codeLine" data-line-num="15"><span class="hljs-keyword">function <span class="hljs-title function_">Test02(<span class="hljs-params">) {
<span class="code-block-extension-codeLine" data-line-num="16">
<span class="code-block-extension-codeLine" data-line-num="17">    <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'Test02 render')
<span class="code-block-extension-codeLine" data-line-num="18">
<span class="code-block-extension-codeLine" data-line-num="19">    <span class="hljs-keyword">return (
<span class="code-block-extension-codeLine" data-line-num="20">        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="21">            <span class="hljs-tag">&lt;<span class="hljs-name">p&gt;This is Test02 Page<span class="hljs-tag">&lt;/<span class="hljs-name">p&gt;
<span class="code-block-extension-codeLine" data-line-num="22">        <span class="hljs-tag">&lt;/<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="23">    )
<span class="code-block-extension-codeLine" data-line-num="24">}
<span class="code-block-extension-codeLine" data-line-num="25">
<span class="code-block-extension-codeLine" data-line-num="26"><span class="hljs-keyword">function <span class="hljs-title function_">Demo01(<span class="hljs-params">) {
<span class="code-block-extension-codeLine" data-line-num="27">
<span class="code-block-extension-codeLine" data-line-num="28">    <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'Demo01 render')
<span class="code-block-extension-codeLine" data-line-num="29">
<span class="code-block-extension-codeLine" data-line-num="30">    <span class="hljs-keyword">const [count, setCount] = <span class="hljs-title class_">React.<span class="hljs-title function_">useState(<span class="hljs-number">0)
<span class="code-block-extension-codeLine" data-line-num="31">
<span class="code-block-extension-codeLine" data-line-num="32">    <span class="hljs-keyword">return (
<span class="code-block-extension-codeLine" data-line-num="33">        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="34">            <span class="hljs-tag">&lt;<span class="hljs-name">p&gt;This is Demo01 Page<span class="hljs-tag">&lt;/<span class="hljs-name">p&gt;
<span class="code-block-extension-codeLine" data-line-num="35">            <span class="hljs-tag">&lt;<span class="hljs-name">button <span class="hljs-attr">onClick=<span class="hljs-string">{() =&gt; { setCount(count + 1) }}&gt;AddButton<span class="hljs-tag">&lt;/<span class="hljs-name">button&gt;
<span class="code-block-extension-codeLine" data-line-num="36">            <span class="hljs-tag">&lt;<span class="hljs-name">Test01 <span class="hljs-attr">count=<span class="hljs-string">{count} /&gt;
<span class="code-block-extension-codeLine" data-line-num="37">            <span class="hljs-tag">&lt;<span class="hljs-name">Test02 /&gt;
<span class="code-block-extension-codeLine" data-line-num="38">        <span class="hljs-tag">&lt;/<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="39">    )
<span class="code-block-extension-codeLine" data-line-num="40">}
<span class="code-block-extension-codeLine" data-line-num="41">
<span class="code-block-extension-codeLine" data-line-num="42"><span class="hljs-keyword">export <span class="hljs-keyword">default <span class="hljs-title class_">Demo01
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<p>根据测试，我们发现当我们点击AddButton时，Test01组件的count值在持续增加，并且控制台也会依次打印出如下内容，说明我们的子组件也根据使用顺序依次渲染，并且子组件得到了父组件传入的最新值。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/32f0224516dd409889829b7eccdb1cca~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.image" alt="image.png" class="medium-zoom-image" loading="lazy">
<a title="" name="user-content-gWQUZ" href="https://link.juejin.cn?target=" rel="noopener nofollow"></a></p>
<h3 data-id="heading-3">子组件渲染缓慢</h3>
<p>在上面这种场景下，假如我们的其中一个子组件渲染遇到了大量计算，渲染很慢，会发生什么呢，我们稍微修改一下代码，我们把Test01组件中加入一个两亿次的循环，模拟大量计算导致的渲染变慢，同时我们在Demo01组件中加入另一个状态number并将其传入Test02组件，当分别点击AddButton和AddNumber时，测试页面和控制台打印情况：</p>
<div class="code-block-extension-header">
<div class="code-block-extension-headerLeft">
<div class="code-block-extension-foldBtn">&nbsp;</div>

<span class="code-block-extension-lang">tsx</span></div>
<div class="code-block-extension-headerRight">
<div class="render" data-v-159ebe90=""> <span class="txt" data-v-159ebe90="">代码解读</span></div>
<div class="code-block-extension-copyCodeBtn">复制代码</div>

</div>

</div>
<pre><code class="hljs language-tsx code-block-extension-codeShowNum" lang="tsx"><span class="code-block-extension-codeLine" data-line-num="1"><span class="hljs-keyword">import <span class="hljs-title class_">React <span class="hljs-keyword">from <span class="hljs-string">'react'
<span class="code-block-extension-codeLine" data-line-num="2">
<span class="code-block-extension-codeLine" data-line-num="3"><span class="hljs-keyword">function <span class="hljs-title function_">Test01(<span class="hljs-params">props: {count: <span class="hljs-built_in">number}) {
<span class="code-block-extension-codeLine" data-line-num="4">    <span class="hljs-keyword">const { count } = props
<span class="code-block-extension-codeLine" data-line-num="5">
<span class="code-block-extension-codeLine" data-line-num="6">    <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'Test01 render')
<span class="code-block-extension-codeLine" data-line-num="7">
<span class="code-block-extension-codeLine" data-line-num="8">    <span class="hljs-keyword">let k = <span class="hljs-number">0
<span class="code-block-extension-codeLine" data-line-num="9">    <span class="hljs-keyword">for (<span class="hljs-keyword">let i = <span class="hljs-number">0; i &lt;= <span class="hljs-number">200000000; i += <span class="hljs-number">1) {
<span class="code-block-extension-codeLine" data-line-num="10">        k = i
<span class="code-block-extension-codeLine" data-line-num="11">    }
<span class="code-block-extension-codeLine" data-line-num="12">
<span class="code-block-extension-codeLine" data-line-num="13">    <span class="hljs-keyword">return (
<span class="code-block-extension-codeLine" data-line-num="14">        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="15">            <span class="hljs-tag">&lt;<span class="hljs-name">p&gt;{k}This is Test01 Page Count {count}<span class="hljs-tag">&lt;/<span class="hljs-name">p&gt;
<span class="code-block-extension-codeLine" data-line-num="16">        <span class="hljs-tag">&lt;/<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="17">    )
<span class="code-block-extension-codeLine" data-line-num="18">}
<span class="code-block-extension-codeLine" data-line-num="19">
<span class="code-block-extension-codeLine" data-line-num="20"><span class="hljs-keyword">function <span class="hljs-title function_">Test02(<span class="hljs-params">props: {<span class="hljs-built_in">number: <span class="hljs-built_in">number}) {
<span class="code-block-extension-codeLine" data-line-num="21">    <span class="hljs-keyword">const { <span class="hljs-built_in">number } = props
<span class="code-block-extension-codeLine" data-line-num="22">
<span class="code-block-extension-codeLine" data-line-num="23">    <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'Test02 render')
<span class="code-block-extension-codeLine" data-line-num="24">
<span class="code-block-extension-codeLine" data-line-num="25">    <span class="hljs-keyword">return (
<span class="code-block-extension-codeLine" data-line-num="26">        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="27">            <span class="hljs-tag">&lt;<span class="hljs-name">p&gt;This is Test02 Page Number {number}<span class="hljs-tag">&lt;/<span class="hljs-name">p&gt;
<span class="code-block-extension-codeLine" data-line-num="28">        <span class="hljs-tag">&lt;/<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="29">    )
<span class="code-block-extension-codeLine" data-line-num="30">}
<span class="code-block-extension-codeLine" data-line-num="31">
<span class="code-block-extension-codeLine" data-line-num="32"><span class="hljs-keyword">function <span class="hljs-title function_">Demo01(<span class="hljs-params">) {
<span class="code-block-extension-codeLine" data-line-num="33">
<span class="code-block-extension-codeLine" data-line-num="34">    <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'Demo01 render')
<span class="code-block-extension-codeLine" data-line-num="35">
<span class="code-block-extension-codeLine" data-line-num="36">    <span class="hljs-keyword">const [count, setCount] = <span class="hljs-title class_">React.<span class="hljs-title function_">useState(<span class="hljs-number">0)
<span class="code-block-extension-codeLine" data-line-num="37">    <span class="hljs-keyword">const [<span class="hljs-built_in">number, setNumber] = <span class="hljs-title class_">React.<span class="hljs-title function_">useState(<span class="hljs-number">0)
<span class="code-block-extension-codeLine" data-line-num="38">
<span class="code-block-extension-codeLine" data-line-num="39">    <span class="hljs-keyword">const <span class="hljs-title function_">handleAddCount = (<span class="hljs-params">) =&gt; {
<span class="code-block-extension-codeLine" data-line-num="40">        <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'handleAddCount')
<span class="code-block-extension-codeLine" data-line-num="41">        <span class="hljs-title function_">setCount(count + <span class="hljs-number">1)
<span class="code-block-extension-codeLine" data-line-num="42">    }
<span class="code-block-extension-codeLine" data-line-num="43">
<span class="code-block-extension-codeLine" data-line-num="44">    <span class="hljs-keyword">const <span class="hljs-title function_">handleAddNumber = (<span class="hljs-params">) =&gt; {
<span class="code-block-extension-codeLine" data-line-num="45">        <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'handleAddNumber')
<span class="code-block-extension-codeLine" data-line-num="46">        <span class="hljs-title function_">setNumber(<span class="hljs-built_in">number + <span class="hljs-number">1)
<span class="code-block-extension-codeLine" data-line-num="47">    }
<span class="code-block-extension-codeLine" data-line-num="48">
<span class="code-block-extension-codeLine" data-line-num="49">    <span class="hljs-keyword">return (
<span class="code-block-extension-codeLine" data-line-num="50">        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="51">            <span class="hljs-tag">&lt;<span class="hljs-name">p&gt;This is Demo01 Page<span class="hljs-tag">&lt;/<span class="hljs-name">p&gt;
<span class="code-block-extension-codeLine" data-line-num="52">            <span class="hljs-tag">&lt;<span class="hljs-name">button <span class="hljs-attr">onClick=<span class="hljs-string">{handleAddCount}&gt;AddButton<span class="hljs-tag">&lt;/<span class="hljs-name">button&gt;
<span class="code-block-extension-codeLine" data-line-num="53">            <span class="hljs-tag">&lt;<span class="hljs-name">button <span class="hljs-attr">onClick=<span class="hljs-string">{handleAddNumber}&gt;AddNumber<span class="hljs-tag">&lt;/<span class="hljs-name">button&gt;
<span class="code-block-extension-codeLine" data-line-num="54">            <span class="hljs-tag">&lt;<span class="hljs-name">Test01 <span class="hljs-attr">count=<span class="hljs-string">{count} /&gt;
<span class="code-block-extension-codeLine" data-line-num="55">            <span class="hljs-tag">&lt;<span class="hljs-name">Test02 <span class="hljs-attr">number=<span class="hljs-string">{number} /&gt;
<span class="code-block-extension-codeLine" data-line-num="56">        <span class="hljs-tag">&lt;/<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="57">    )
<span class="code-block-extension-codeLine" data-line-num="58">}
<span class="code-block-extension-codeLine" data-line-num="59">
<span class="code-block-extension-codeLine" data-line-num="60"><span class="hljs-keyword">export <span class="hljs-keyword">default <span class="hljs-title class_">Demo01
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<p>根据我们测试会发现，不管我们点击的是哪个按钮，页面数字显示都会卡顿，没有及时显示出来，同时控制台都会打印出来下图结果，<strong>根据结果我们可以看出，当我们修改父组件的状态时，不管修改的是哪一个，子组件都会全部渲染，而且当遇到一个渲染缓慢的子组件时，父组件和其他子组件都会等待它渲染完成才会启动下次渲染，这就导致了无论我们修改了哪个状态，我们组件都会渲染的很缓慢。</strong><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7715850b2c384be294709fef3a7d752b~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.image" alt="image.png" class="medium-zoom-image" loading="lazy"><br>不过我们发现当我们点击AddNumber时，count的值一直保持不变，Test01的渲染结果也是一直保持不变，这个是我们react组件要求必须是纯函数的一个特性，当输入的props不发生改变的时候，返回结果永远都是一样的。既然如此那当我们点击AddNumber时，Test01组件完全没有重新渲染的必要，所以react官方为了解决这一问题，引入可记忆组件的概念，下面我们就详细分析记忆组件的作用。
<a title="" name="user-content-tUKAd" href="https://link.juejin.cn?target=" rel="noopener nofollow"></a></p>
<h2 data-id="heading-4"><strong>记忆组件memo原理作用</strong></h2>
<p>react引入记忆组件，就是为了避免不必要的渲染，也就是说当我们向子组件传入的props不发生改变的时候，子组件不需要重新渲染。想要组件变成记忆组件，我们只需要把组件包裹在memo函数中就可以了，我们把上述案例使用memo进行改造，此时我们把Test01，Test02使用memo函数返回，那么这两个组件就变成了记忆组件，那么以后只有该组件的props发生改变，才会重新渲染此组件。</p>
<div class="code-block-extension-header">
<div class="code-block-extension-headerLeft">
<div class="code-block-extension-foldBtn">&nbsp;</div>

<span class="code-block-extension-lang">tsx</span></div>
<div class="code-block-extension-headerRight">
<div class="render" data-v-159ebe90=""> <span class="txt" data-v-159ebe90="">代码解读</span></div>
<div class="code-block-extension-copyCodeBtn">复制代码</div>

</div>

</div>
<pre><code class="hljs language-tsx code-block-extension-codeShowNum" lang="tsx"><span class="code-block-extension-codeLine" data-line-num="1"><span class="hljs-keyword">import <span class="hljs-title class_">React, { memo } <span class="hljs-keyword">from <span class="hljs-string">'react'
<span class="code-block-extension-codeLine" data-line-num="2">
<span class="code-block-extension-codeLine" data-line-num="3"><span class="hljs-keyword">const <span class="hljs-title class_">Test01 = <span class="hljs-title function_">memo(<span class="hljs-function">(<span class="hljs-params">props: {count: <span class="hljs-built_in">number}) =&gt; {
<span class="code-block-extension-codeLine" data-line-num="4">    <span class="hljs-keyword">const { count } = props
<span class="code-block-extension-codeLine" data-line-num="5">
<span class="code-block-extension-codeLine" data-line-num="6">    <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'Test01 render')
<span class="code-block-extension-codeLine" data-line-num="7">
<span class="code-block-extension-codeLine" data-line-num="8">    <span class="hljs-keyword">let k = <span class="hljs-number">0
<span class="code-block-extension-codeLine" data-line-num="9">    <span class="hljs-keyword">for (<span class="hljs-keyword">let i = <span class="hljs-number">0; i &lt;= <span class="hljs-number">200000000; i += <span class="hljs-number">1) {
<span class="code-block-extension-codeLine" data-line-num="10">        k = i
<span class="code-block-extension-codeLine" data-line-num="11">    }
<span class="code-block-extension-codeLine" data-line-num="12">
<span class="code-block-extension-codeLine" data-line-num="13">    <span class="hljs-keyword">return (
<span class="code-block-extension-codeLine" data-line-num="14">        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="15">            <span class="hljs-tag">&lt;<span class="hljs-name">p&gt;{k}This is Test01 Page Count {count}<span class="hljs-tag">&lt;/<span class="hljs-name">p&gt;
<span class="code-block-extension-codeLine" data-line-num="16">        <span class="hljs-tag">&lt;/<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="17">    )
<span class="code-block-extension-codeLine" data-line-num="18">})
<span class="code-block-extension-codeLine" data-line-num="19">
<span class="code-block-extension-codeLine" data-line-num="20"><span class="hljs-title class_">Test01.<span class="hljs-property">displayName = <span class="hljs-string">'Test01'
<span class="code-block-extension-codeLine" data-line-num="21">
<span class="code-block-extension-codeLine" data-line-num="22"><span class="hljs-keyword">const <span class="hljs-title class_">Test02 = <span class="hljs-title function_">memo(<span class="hljs-function">(<span class="hljs-params">props: {<span class="hljs-built_in">number: <span class="hljs-built_in">number}) =&gt; {
<span class="code-block-extension-codeLine" data-line-num="23">    <span class="hljs-keyword">const { <span class="hljs-built_in">number } = props
<span class="code-block-extension-codeLine" data-line-num="24">
<span class="code-block-extension-codeLine" data-line-num="25">    <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'Test02 render')
<span class="code-block-extension-codeLine" data-line-num="26">
<span class="code-block-extension-codeLine" data-line-num="27">    <span class="hljs-keyword">return (
<span class="code-block-extension-codeLine" data-line-num="28">        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="29">            <span class="hljs-tag">&lt;<span class="hljs-name">p&gt;This is Test02 Page Number {number}<span class="hljs-tag">&lt;/<span class="hljs-name">p&gt;
<span class="code-block-extension-codeLine" data-line-num="30">        <span class="hljs-tag">&lt;/<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="31">    )
<span class="code-block-extension-codeLine" data-line-num="32">})
<span class="code-block-extension-codeLine" data-line-num="33">
<span class="code-block-extension-codeLine" data-line-num="34"><span class="hljs-title class_">Test02.<span class="hljs-property">displayName = <span class="hljs-string">'Test02'
<span class="code-block-extension-codeLine" data-line-num="35">
<span class="code-block-extension-codeLine" data-line-num="36"><span class="hljs-keyword">function <span class="hljs-title function_">Demo01(<span class="hljs-params">) {
<span class="code-block-extension-codeLine" data-line-num="37">
<span class="code-block-extension-codeLine" data-line-num="38">    <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'Demo01 render')
<span class="code-block-extension-codeLine" data-line-num="39">
<span class="code-block-extension-codeLine" data-line-num="40">    <span class="hljs-keyword">const [count, setCount] = <span class="hljs-title class_">React.<span class="hljs-title function_">useState(<span class="hljs-number">0)
<span class="code-block-extension-codeLine" data-line-num="41">    <span class="hljs-keyword">const [<span class="hljs-built_in">number, setNumber] = <span class="hljs-title class_">React.<span class="hljs-title function_">useState(<span class="hljs-number">0)
<span class="code-block-extension-codeLine" data-line-num="42">
<span class="code-block-extension-codeLine" data-line-num="43">    <span class="hljs-keyword">const <span class="hljs-title function_">handleAddCount = (<span class="hljs-params">) =&gt; {
<span class="code-block-extension-codeLine" data-line-num="44">        <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'handleAddCount')
<span class="code-block-extension-codeLine" data-line-num="45">        <span class="hljs-title function_">setCount(count + <span class="hljs-number">1)
<span class="code-block-extension-codeLine" data-line-num="46">    }
<span class="code-block-extension-codeLine" data-line-num="47">
<span class="code-block-extension-codeLine" data-line-num="48">    <span class="hljs-keyword">const <span class="hljs-title function_">handleAddNumber = (<span class="hljs-params">) =&gt; {
<span class="code-block-extension-codeLine" data-line-num="49">        <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'handleAddNumber')
<span class="code-block-extension-codeLine" data-line-num="50">        <span class="hljs-title function_">setNumber(<span class="hljs-built_in">number + <span class="hljs-number">1)
<span class="code-block-extension-codeLine" data-line-num="51">    }
<span class="code-block-extension-codeLine" data-line-num="52">
<span class="code-block-extension-codeLine" data-line-num="53">    <span class="hljs-keyword">return (
<span class="code-block-extension-codeLine" data-line-num="54">        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="55">            <span class="hljs-tag">&lt;<span class="hljs-name">p&gt;This is Demo01 Page<span class="hljs-tag">&lt;/<span class="hljs-name">p&gt;
<span class="code-block-extension-codeLine" data-line-num="56">            <span class="hljs-tag">&lt;<span class="hljs-name">button <span class="hljs-attr">onClick=<span class="hljs-string">{handleAddCount}&gt;AddButton<span class="hljs-tag">&lt;/<span class="hljs-name">button&gt;
<span class="code-block-extension-codeLine" data-line-num="57">            <span class="hljs-tag">&lt;<span class="hljs-name">button <span class="hljs-attr">onClick=<span class="hljs-string">{handleAddNumber}&gt;AddNumber<span class="hljs-tag">&lt;/<span class="hljs-name">button&gt;
<span class="code-block-extension-codeLine" data-line-num="58">            <span class="hljs-tag">&lt;<span class="hljs-name">Test01 <span class="hljs-attr">count=<span class="hljs-string">{count} /&gt;
<span class="code-block-extension-codeLine" data-line-num="59">            <span class="hljs-tag">&lt;<span class="hljs-name">Test02 <span class="hljs-attr">number=<span class="hljs-string">{number} /&gt;
<span class="code-block-extension-codeLine" data-line-num="60">        <span class="hljs-tag">&lt;/<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="61">    )
<span class="code-block-extension-codeLine" data-line-num="62">}
<span class="code-block-extension-codeLine" data-line-num="63">
<span class="code-block-extension-codeLine" data-line-num="64"><span class="hljs-keyword">export <span class="hljs-keyword">default <span class="hljs-title class_">Demo01
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<p>我们使用改造后的代码进行测试，此时我们快速点击AddNumber按钮，我们发现当我们快速点击AddNumber时，并不会像之前那样有卡顿的现象变得非常丝滑，并且我们会在控制台看到如下结果，这也说明当我们点击AddNumber时，count没有发生改变，Test01组件也没有重新渲染，这样就起到了避免渲染无关组件带来的额外开销，也不会因为一个组件的渲染缓慢导致整个渲染的缓慢，对项目性能可以有个很好的优化。不过当我们点击AddButton时依然会有卡顿，这是不可避免的，所以代码中一定避免这样的大量循环。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c1ad983a6bf49c8a0a6e30c2d85e6b8~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.image" alt="image.png" class="medium-zoom-image" loading="lazy">
<a title="" name="user-content-yJi2Y" href="https://link.juejin.cn?target=" rel="noopener nofollow"></a></p>
<h2 data-id="heading-5">useDeferredValue详解</h2>
<p>我们搞懂上面两个概念之后，我们下面就正式开始逐步分析useDeferredValue的原理和使用方法，首先我们需要对useDeferredValue进行一个简单的介绍。
<a title="" name="user-content-ThUXe" href="https://link.juejin.cn?target=" rel="noopener nofollow"></a></p>
<h3 data-id="heading-6">了解useDeferredValue</h3>
<p>useDeferredValue是react18引入的一个用于性能优化的hooks，它用于延迟获取某个值，并且在延迟获取之间将会返回旧的值。<br>单从官方定义我们难以理解它的实际含义和作用，这里我来翻译一下，官方表达的意思就是使用useDeferredValue传入一个参数，这个参数是一个任意类型的值，例如我们就传入一个使用useState定义的变量value，value的初始值是字符串'abc'，当我们修改value时，他就会延迟返回一个最新的value值，例如下面代码</p>
<div class="code-block-extension-header">
<div class="code-block-extension-headerLeft">
<div class="code-block-extension-foldBtn">&nbsp;</div>

<span class="code-block-extension-lang">tsx</span></div>
<div class="code-block-extension-headerRight">
<div class="render" data-v-159ebe90=""> <span class="txt" data-v-159ebe90="">代码解读</span></div>
<div class="code-block-extension-copyCodeBtn">复制代码</div>

</div>

</div>
<pre><code class="hljs language-tsx code-block-extension-codeShowNum" lang="tsx"><span class="code-block-extension-codeLine" data-line-num="1"><span class="hljs-keyword">const [value, setValue] = <span class="hljs-title function_">useState(<span class="hljs-string">'abc')
<span class="code-block-extension-codeLine" data-line-num="2">
<span class="code-block-extension-codeLine" data-line-num="3"><span class="hljs-keyword">const deferredValue = <span class="hljs-title function_">useDeferredValue(value)
</span></span></span></span></span></span></span></span></code></pre>
<p>此时我们修改value值为'abcd'那么接下来会发生什么呢，首先由于value的改变，当前组件会被重新渲染，而这次渲染useDeferredValue(value)会返回之前的值，也就是'abc'，然后后台会安排一次重新渲染，此时useDeferredValue(value)会返回最新值'abcd'。<br>我们直接在代码中测试，在如下代码中，我们将count值传入useDeferredValue并返回一个延迟的count，我们测试当我们点击一次AddButton时查看打印情况。</p>
<div class="code-block-extension-header">
<div class="code-block-extension-headerLeft">
<div class="code-block-extension-foldBtn">&nbsp;</div>

<span class="code-block-extension-lang">tsx</span></div>
<div class="code-block-extension-headerRight">
<div class="render" data-v-159ebe90=""> <span class="txt" data-v-159ebe90="">代码解读</span></div>
<div class="code-block-extension-copyCodeBtn">复制代码</div>

</div>

</div>
<pre><code class="hljs language-tsx code-block-extension-codeShowNum" lang="tsx"><span class="code-block-extension-codeLine" data-line-num="1"><span class="hljs-keyword">import <span class="hljs-title class_">React, { useDeferredValue } <span class="hljs-keyword">from <span class="hljs-string">'react'
<span class="code-block-extension-codeLine" data-line-num="2">
<span class="code-block-extension-codeLine" data-line-num="3"><span class="hljs-keyword">function <span class="hljs-title function_">Demo01(<span class="hljs-params">) {
<span class="code-block-extension-codeLine" data-line-num="4">
<span class="code-block-extension-codeLine" data-line-num="5">    <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'Demo01 Render')
<span class="code-block-extension-codeLine" data-line-num="6">
<span class="code-block-extension-codeLine" data-line-num="7">    <span class="hljs-keyword">const [count, setCount] = <span class="hljs-title class_">React.<span class="hljs-title function_">useState(<span class="hljs-number">0)
<span class="code-block-extension-codeLine" data-line-num="8">
<span class="code-block-extension-codeLine" data-line-num="9">    <span class="hljs-keyword">const <span class="hljs-title function_">handleAddCount = (<span class="hljs-params">) =&gt; {
<span class="code-block-extension-codeLine" data-line-num="10">        <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'handleAddCount')
<span class="code-block-extension-codeLine" data-line-num="11">        <span class="hljs-title function_">setCount(count + <span class="hljs-number">1)
<span class="code-block-extension-codeLine" data-line-num="12">    }
<span class="code-block-extension-codeLine" data-line-num="13">
<span class="code-block-extension-codeLine" data-line-num="14">    <span class="hljs-keyword">const deferredCount = <span class="hljs-title function_">useDeferredValue(count)
<span class="code-block-extension-codeLine" data-line-num="15">
<span class="code-block-extension-codeLine" data-line-num="16">    <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'count: ', count)
<span class="code-block-extension-codeLine" data-line-num="17">    <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'deferredCount: ', deferredCount)
<span class="code-block-extension-codeLine" data-line-num="18">
<span class="code-block-extension-codeLine" data-line-num="19">    <span class="hljs-keyword">return (
<span class="code-block-extension-codeLine" data-line-num="20">        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="21">            <span class="hljs-tag">&lt;<span class="hljs-name">p&gt;This is Demo01 Page<span class="hljs-tag">&lt;/<span class="hljs-name">p&gt;
<span class="code-block-extension-codeLine" data-line-num="22">            <span class="hljs-tag">&lt;<span class="hljs-name">button <span class="hljs-attr">onClick=<span class="hljs-string">{handleAddCount}&gt;AddButton<span class="hljs-tag">&lt;/<span class="hljs-name">button&gt;
<span class="code-block-extension-codeLine" data-line-num="23">        <span class="hljs-tag">&lt;/<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="24">    )
<span class="code-block-extension-codeLine" data-line-num="25">}
<span class="code-block-extension-codeLine" data-line-num="26">
<span class="code-block-extension-codeLine" data-line-num="27"><span class="hljs-keyword">export <span class="hljs-keyword">default <span class="hljs-title class_">Demo01
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<p>当我们点击一次AddButton时，控制台会有如下打印，首先我们点击了AddButton给count设置了新的值，组件由于状态的改变进行第一次渲染，而此时deferredCount返回值是0，也就是初始传入的值，这就对应了官方所说的，首次渲染不会返回最新值，而是返回之前的旧值，也就是初始值。<br>紧接着有出现了一次渲染，不过这次渲染并不是我们操作的原因，而是官方所说的会在后台会安排一次重新渲染，然后在这次重新渲染中，useDeferredValue将返回上次渲染传入的最新值，而我们上次渲染传给useDeferredValue的值是增加后的数字1，因此在后台的二次渲染中就返回了最新值1.<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/124872832cca4a86947fc4310ed35703~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.image" alt="image.png" class="medium-zoom-image" loading="lazy"><br>通过上面的基本解释，我们大概了解了useDeferredValue的运行机制，然而这样的机制有什么作用呢，单独看的话甚至还额外多了一次渲染，又有什么必要呢，我们下面用一个官方的案例解释它的作用。
<a title="" name="user-content-R5kBM" href="https://link.juejin.cn?target=" rel="noopener nofollow"></a></p>
<h3 data-id="heading-7">实现输入框内容实时更新到列表功能</h3>
<p>我们实现一个功能，当我们在输入框中内容时，将内容实时显示在下面的列表中，我们在列表中故意加入了一个大量的循环，来模拟列表存在大量计算，渲染缓慢的场景。
<a title="" name="user-content-Q9axm" href="https://link.juejin.cn?target=" rel="noopener nofollow"></a></p>
<h4 data-id="heading-8">不使用useDeferredValue实现</h4>
<p><strong>Test组件</strong></p>
<div class="code-block-extension-header">
<div class="code-block-extension-headerLeft">
<div class="code-block-extension-foldBtn">&nbsp;</div>

<span class="code-block-extension-lang">tsx</span></div>
<div class="code-block-extension-headerRight">
<div class="render" data-v-159ebe90=""> <span class="txt" data-v-159ebe90="">代码解读</span></div>
<div class="code-block-extension-copyCodeBtn">复制代码</div>

</div>

</div>
<pre><code class="hljs language-tsx code-block-extension-codeShowNum" lang="tsx"><span class="code-block-extension-codeLine" data-line-num="1"><span class="hljs-keyword">import <span class="hljs-title class_">React, { useState } <span class="hljs-keyword">from <span class="hljs-string">'react'
<span class="code-block-extension-codeLine" data-line-num="2"><span class="hljs-keyword">import <span class="hljs-title class_">List <span class="hljs-keyword">from <span class="hljs-string">'./list'
<span class="code-block-extension-codeLine" data-line-num="3">
<span class="code-block-extension-codeLine" data-line-num="4"><span class="hljs-keyword">function <span class="hljs-title function_">Test(<span class="hljs-params">) {
<span class="code-block-extension-codeLine" data-line-num="5">    <span class="hljs-keyword">const [inputValue, setInputValue] = <span class="hljs-title function_">useState(<span class="hljs-string">'')
<span class="code-block-extension-codeLine" data-line-num="6">
<span class="code-block-extension-codeLine" data-line-num="7">    <span class="hljs-keyword">const <span class="hljs-title function_">handleChange = (<span class="hljs-params">e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {
<span class="code-block-extension-codeLine" data-line-num="8">        <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'handleChange')
<span class="code-block-extension-codeLine" data-line-num="9">        <span class="hljs-title function_">setInputValue(e.<span class="hljs-property">target.<span class="hljs-property">value)
<span class="code-block-extension-codeLine" data-line-num="10">    }
<span class="code-block-extension-codeLine" data-line-num="11">
<span class="code-block-extension-codeLine" data-line-num="12">    <span class="hljs-keyword">return (
<span class="code-block-extension-codeLine" data-line-num="13">        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="14">            <span class="hljs-tag">&lt;<span class="hljs-name">input
<span class="code-block-extension-codeLine" data-line-num="15">                <span class="hljs-attr">type=<span class="hljs-string">"text"
<span class="code-block-extension-codeLine" data-line-num="16">                <span class="hljs-attr">value=<span class="hljs-string">{inputValue}
<span class="code-block-extension-codeLine" data-line-num="17">                <span class="hljs-attr">onChange=<span class="hljs-string">{handleChange}
<span class="code-block-extension-codeLine" data-line-num="18">                <span class="hljs-attr">placeholder=<span class="hljs-string">"Search..."
<span class="code-block-extension-codeLine" data-line-num="19">            /&gt;
<span class="code-block-extension-codeLine" data-line-num="20">            <span class="hljs-tag">&lt;<span class="hljs-name">List <span class="hljs-attr">inputValue=<span class="hljs-string">{inputValue} /&gt;
<span class="code-block-extension-codeLine" data-line-num="21">        <span class="hljs-tag">&lt;/<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="22">    )
<span class="code-block-extension-codeLine" data-line-num="23">}
<span class="code-block-extension-codeLine" data-line-num="24">
<span class="code-block-extension-codeLine" data-line-num="25"><span class="hljs-keyword">export <span class="hljs-keyword">default <span class="hljs-title class_">Test
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<p><strong>List组件</strong></p>
<div class="code-block-extension-header">
<div class="code-block-extension-headerLeft">
<div class="code-block-extension-foldBtn">&nbsp;</div>
<span class="code-block-extension-lang">tsx</span></div>
<div class="code-block-extension-headerRight">
<div class="render" data-v-159ebe90=""><span class="txt" data-v-159ebe90="">代码解读</span></div>
<div class="code-block-extension-copyCodeBtn">复制代码</div>
</div>
</div>
<pre><code class="hljs language-tsx code-block-extension-codeShowNum" lang="tsx"><span class="code-block-extension-codeLine" data-line-num="1"><span class="hljs-keyword">import <span class="hljs-title class_">React, { memo } <span class="hljs-keyword">from <span class="hljs-string">'react'
<span class="code-block-extension-codeLine" data-line-num="2">
<span class="code-block-extension-codeLine" data-line-num="3"><span class="hljs-comment">// 定义一个列表组件List
<span class="code-block-extension-codeLine" data-line-num="4"><span class="hljs-keyword">function <span class="hljs-title function_">List(<span class="hljs-params">props: { inputValue: <span class="hljs-built_in">string }) {
<span class="code-block-extension-codeLine" data-line-num="5">    <span class="hljs-keyword">const { inputValue } = props
<span class="code-block-extension-codeLine" data-line-num="6">
<span class="code-block-extension-codeLine" data-line-num="7">    <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'List render')
<span class="code-block-extension-codeLine" data-line-num="8">
<span class="code-block-extension-codeLine" data-line-num="9">    <span class="hljs-keyword">let k = <span class="hljs-number">0
<span class="code-block-extension-codeLine" data-line-num="10">    <span class="hljs-keyword">for (<span class="hljs-keyword">let i = <span class="hljs-number">0; i &lt;= <span class="hljs-number">200000000; i += <span class="hljs-number">1) {
<span class="code-block-extension-codeLine" data-line-num="11">        k = i
<span class="code-block-extension-codeLine" data-line-num="12">    }
<span class="code-block-extension-codeLine" data-line-num="13">
<span class="code-block-extension-codeLine" data-line-num="14">    <span class="hljs-keyword">return (
<span class="code-block-extension-codeLine" data-line-num="15">        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul&gt;
<span class="code-block-extension-codeLine" data-line-num="16">            <span class="hljs-tag">&lt;<span class="hljs-name">li&gt;Cycle Times {k}Text: {inputValue}<span class="hljs-tag">&lt;/<span class="hljs-name">li&gt;
<span class="code-block-extension-codeLine" data-line-num="17">            <span class="hljs-tag">&lt;<span class="hljs-name">li&gt;Cycle Times {k}Text: {inputValue}<span class="hljs-tag">&lt;/<span class="hljs-name">li&gt;
<span class="code-block-extension-codeLine" data-line-num="18">            <span class="hljs-tag">&lt;<span class="hljs-name">li&gt;Cycle Times {k}Text: {inputValue}<span class="hljs-tag">&lt;/<span class="hljs-name">li&gt;
<span class="code-block-extension-codeLine" data-line-num="19">            <span class="hljs-tag">&lt;<span class="hljs-name">li&gt;Cycle Times {k}Text: {inputValue}<span class="hljs-tag">&lt;/<span class="hljs-name">li&gt;
<span class="code-block-extension-codeLine" data-line-num="20">            <span class="hljs-tag">&lt;<span class="hljs-name">li&gt;Cycle Times {k}Text: {inputValue}<span class="hljs-tag">&lt;/<span class="hljs-name">li&gt;
<span class="code-block-extension-codeLine" data-line-num="21">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul&gt;
<span class="code-block-extension-codeLine" data-line-num="22">    )
<span class="code-block-extension-codeLine" data-line-num="23">}
<span class="code-block-extension-codeLine" data-line-num="24">
<span class="code-block-extension-codeLine" data-line-num="25"><span class="hljs-keyword">export <span class="hljs-keyword">default <span class="hljs-title function_">memo(<span class="hljs-title class_">List)
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<p>我们这里就是很简单的，输入框输入内容，我们修改inputValue为最新值，并把inputValue传入list组件内进行显示，只不过list组件有个模拟渲染缓慢的循环。我们把list组件使用memo返回，使其变成一个记忆组件，只是现在每次props都会改变，暂时起不到作用。我们根据上述代码开始测试，我们在输入框快速输入字符，查看页面表现和控制台打印情况<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a46eb205ac03408eba028e6dfbe0bf99~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.image" alt="wcce1-m4ua3.gif" class="medium-zoom-image" loading="lazy"><br>根据页面表现我们可以看出，当我们快速输入时，页面有着明显卡顿，这是因为list组件的渲染非常缓慢，然而我们每次输入都会修改list组件的props值，也就意味着每次输入都会使list重新渲染，而react的渲染机制又是不可中断的，所以就会出现排队渲染的情况，只有等list组件上次渲染结束，test组件才能开始下次渲染，才能将最新的值显示在输入框内，这样会给用户很不好的操作体验。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28a847993e754a4582a1708b764332cb~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.image" alt="image.png" class="medium-zoom-image" loading="lazy"><br><strong>根据控制台打印结果我们可以看出，每次渲染大概需要0.2秒的时间，记住这个时间，后续还会用到。</strong><br>接下来我们使用useDeferredValue优化代码，再进行测试。
<a title="" name="user-content-XJvgu" href="https://link.juejin.cn?target=" rel="noopener nofollow"></a></p>
<h4 data-id="heading-9">使用useDeferredValue实现</h4>
<p>我们将Test组件做以下改造，将inputValue传入useDeferredValue，并返回一个deferredValue，然后我们将deferredValue传入List组件，并在List组件中打印出deferredValue的值<br><strong>Test组件</strong></p>
<div class="code-block-extension-header">
<div class="code-block-extension-headerLeft">
<div class="code-block-extension-foldBtn">&nbsp;</div>

<span class="code-block-extension-lang">tsx</span></div>
<div class="code-block-extension-headerRight">
<div class="render" data-v-159ebe90=""> <span class="txt" data-v-159ebe90="">代码解读</span></div>
<div class="code-block-extension-copyCodeBtn">复制代码</div>

</div>

</div>
<pre><code class="hljs language-tsx code-block-extension-codeShowNum" lang="tsx"><span class="code-block-extension-codeLine" data-line-num="1"><span class="hljs-keyword">import <span class="hljs-title class_">React, { useState, useDeferredValue } <span class="hljs-keyword">from <span class="hljs-string">'react'
<span class="code-block-extension-codeLine" data-line-num="2"><span class="hljs-keyword">import <span class="hljs-title class_">List <span class="hljs-keyword">from <span class="hljs-string">'./list'
<span class="code-block-extension-codeLine" data-line-num="3">
<span class="code-block-extension-codeLine" data-line-num="4"><span class="hljs-keyword">function <span class="hljs-title function_">Test(<span class="hljs-params">) {
<span class="code-block-extension-codeLine" data-line-num="5">    <span class="hljs-keyword">const [inputValue, setInputValue] = <span class="hljs-title function_">useState(<span class="hljs-string">'')
<span class="code-block-extension-codeLine" data-line-num="6">
<span class="code-block-extension-codeLine" data-line-num="7">    <span class="hljs-keyword">const deferredValue = <span class="hljs-title function_">useDeferredValue(inputValue)
<span class="code-block-extension-codeLine" data-line-num="8">
<span class="code-block-extension-codeLine" data-line-num="9">    <span class="hljs-keyword">const <span class="hljs-title function_">handleChange = (<span class="hljs-params">e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {
<span class="code-block-extension-codeLine" data-line-num="10">        <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'handleChange')
<span class="code-block-extension-codeLine" data-line-num="11">        <span class="hljs-title function_">setInputValue(e.<span class="hljs-property">target.<span class="hljs-property">value)
<span class="code-block-extension-codeLine" data-line-num="12">    }
<span class="code-block-extension-codeLine" data-line-num="13">
<span class="code-block-extension-codeLine" data-line-num="14">    <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'inputValue:', inputValue)
<span class="code-block-extension-codeLine" data-line-num="15">    <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'deferredValue:', deferredValue)
<span class="code-block-extension-codeLine" data-line-num="16">
<span class="code-block-extension-codeLine" data-line-num="17">    <span class="hljs-keyword">return (
<span class="code-block-extension-codeLine" data-line-num="18">        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="19">            <span class="hljs-tag">&lt;<span class="hljs-name">input
<span class="code-block-extension-codeLine" data-line-num="20">                <span class="hljs-attr">type=<span class="hljs-string">"text"
<span class="code-block-extension-codeLine" data-line-num="21">                <span class="hljs-attr">value=<span class="hljs-string">{inputValue}
<span class="code-block-extension-codeLine" data-line-num="22">                <span class="hljs-attr">onChange=<span class="hljs-string">{handleChange}
<span class="code-block-extension-codeLine" data-line-num="23">                <span class="hljs-attr">placeholder=<span class="hljs-string">"Search..."
<span class="code-block-extension-codeLine" data-line-num="24">            /&gt;
<span class="code-block-extension-codeLine" data-line-num="25">            <span class="hljs-tag">&lt;<span class="hljs-name">List <span class="hljs-attr">inputValue=<span class="hljs-string">{deferredValue} /&gt;
<span class="code-block-extension-codeLine" data-line-num="26">        <span class="hljs-tag">&lt;/<span class="hljs-name">div&gt;
<span class="code-block-extension-codeLine" data-line-num="27">    )
<span class="code-block-extension-codeLine" data-line-num="28">}
<span class="code-block-extension-codeLine" data-line-num="29">
<span class="code-block-extension-codeLine" data-line-num="30"><span class="hljs-keyword">export <span class="hljs-keyword">default <span class="hljs-title class_">Test
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<p><strong>List组件</strong></p>
<div class="code-block-extension-header">
<div class="code-block-extension-headerLeft">
<div class="code-block-extension-foldBtn">&nbsp;</div>
<span class="code-block-extension-lang">tsx</span></div>
<div class="code-block-extension-headerRight">
<div class="render" data-v-159ebe90=""><span class="txt" data-v-159ebe90="">代码解读</span></div>
<div class="code-block-extension-copyCodeBtn">复制代码</div>
</div>
</div>
<pre><code class="hljs language-tsx code-block-extension-codeShowNum" lang="tsx"><span class="code-block-extension-codeLine" data-line-num="1"><span class="hljs-keyword">import <span class="hljs-title class_">React, { memo } <span class="hljs-keyword">from <span class="hljs-string">'react'
<span class="code-block-extension-codeLine" data-line-num="2">
<span class="code-block-extension-codeLine" data-line-num="3"><span class="hljs-comment">// 定义一个列表组件List
<span class="code-block-extension-codeLine" data-line-num="4"><span class="hljs-keyword">function <span class="hljs-title function_">List(<span class="hljs-params">props: { inputValue: <span class="hljs-built_in">string }) {
<span class="code-block-extension-codeLine" data-line-num="5">    <span class="hljs-keyword">const { inputValue } = props
<span class="code-block-extension-codeLine" data-line-num="6">
<span class="code-block-extension-codeLine" data-line-num="7">    <span class="hljs-variable language_">console.<span class="hljs-title function_">log(<span class="hljs-string">'List render: ', inputValue)
<span class="code-block-extension-codeLine" data-line-num="8">
<span class="code-block-extension-codeLine" data-line-num="9">    <span class="hljs-keyword">let k = <span class="hljs-number">0
<span class="code-block-extension-codeLine" data-line-num="10">    <span class="hljs-keyword">for (<span class="hljs-keyword">let i = <span class="hljs-number">0; i &lt;= <span class="hljs-number">300000000; i += <span class="hljs-number">1) {
<span class="code-block-extension-codeLine" data-line-num="11">        k = i
<span class="code-block-extension-codeLine" data-line-num="12">    }
<span class="code-block-extension-codeLine" data-line-num="13">
<span class="code-block-extension-codeLine" data-line-num="14">    <span class="hljs-keyword">return (
<span class="code-block-extension-codeLine" data-line-num="15">        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul&gt;
<span class="code-block-extension-codeLine" data-line-num="16">            <span class="hljs-tag">&lt;<span class="hljs-name">li&gt;Cycle Times {k}Text: {inputValue}<span class="hljs-tag">&lt;/<span class="hljs-name">li&gt;
<span class="code-block-extension-codeLine" data-line-num="17">            <span class="hljs-tag">&lt;<span class="hljs-name">li&gt;Cycle Times {k}Text: {inputValue}<span class="hljs-tag">&lt;/<span class="hljs-name">li&gt;
<span class="code-block-extension-codeLine" data-line-num="18">            <span class="hljs-tag">&lt;<span class="hljs-name">li&gt;Cycle Times {k}Text: {inputValue}<span class="hljs-tag">&lt;/<span class="hljs-name">li&gt;
<span class="code-block-extension-codeLine" data-line-num="19">            <span class="hljs-tag">&lt;<span class="hljs-name">li&gt;Cycle Times {k}Text: {inputValue}<span class="hljs-tag">&lt;/<span class="hljs-name">li&gt;
<span class="code-block-extension-codeLine" data-line-num="20">            <span class="hljs-tag">&lt;<span class="hljs-name">li&gt;Cycle Times {k}Text: {inputValue}<span class="hljs-tag">&lt;/<span class="hljs-name">li&gt;
<span class="code-block-extension-codeLine" data-line-num="21">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul&gt;
<span class="code-block-extension-codeLine" data-line-num="22">    )
<span class="code-block-extension-codeLine" data-line-num="23">}
<span class="code-block-extension-codeLine" data-line-num="24">
<span class="code-block-extension-codeLine" data-line-num="25"><span class="hljs-keyword">export <span class="hljs-keyword">default <span class="hljs-title function_">memo(<span class="hljs-title class_">List)
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<p>然后我们直接在输入框快速输入字符进行测试，观察页面表现<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/541a8c821a134ea7baef8e953bbf595a~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.image" alt="5m999-r5tlb.gif" class="medium-zoom-image" loading="lazy"><br>从页面表现我们可以看出，输入框显示最新输入内容变得很丝滑，不会那么卡顿，这是什么原因呢，我们通过过滤控制台数据逐个分析<br><strong>过滤deferredValue</strong><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/127efca078c940c6952a9c4013bcef3a~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.image" alt="image.png" class="medium-zoom-image" loading="lazy"><br><strong>过滤List render</strong><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac291e810e96488f984175e2279e1ce4~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.image" alt="image.png" class="medium-zoom-image" loading="lazy"><br><strong>分析打印结果：</strong><br>我们从打印结果可以看出，并不是每次输入新的内容时，deferredValue都会返回新的值，而是会隔一段时间返回一次，而list组件的渲染次数也刚好是deferredValue返回新的值的次数。这就充分解释了useDeferredValue作用就是不会立刻返回新的结果，会等到上一次返回的新结果处理完才会继续返回，我们还记得上面测试的按照List组件的渲染时间大概就是0.2秒，也就是说List组件所依赖的这个延迟返回的值，会等到list组件渲染完成后才会再返回新的结果。<br>而在useDeferredValue两次返回新结果之间，并不会影响父组件也就是Test组件的渲染，这样就避免了输入框内容不能快速展现的问题，也避免了多次重复渲染List组件产生的额外消耗。
<a title="" name="user-content-b8o5z" href="https://link.juejin.cn?target=" rel="noopener nofollow"></a></p>
<h2 data-id="heading-10">useDeferredValue与防抖节流对比</h2>
<p>我们从上面的结果和表现可以看出，useDeferredValue hook的作用非常类似我们之前做的防抖节流函数，那他们之前的区别，官方解释的很好，我这里就直接照搬过来。<br><strong>防抖：是指在用户停止输入一段时间（例如一秒钟）之后再更新列表。</strong><br><strong>节流：是指每隔一段时间（例如最多每秒一次）更新列表。</strong><br>虽然这些技术在某些情况下是有用的，但 useDeferredValue 更适合优化渲染，因为它与 React 自身深度集成，并且能够适应用户的设备。<br>与防抖或节流不同，useDeferredValue 不需要选择任何固定延迟时间。如果用户的设备很快（比如性能强劲的笔记本电脑），延迟的重渲染几乎会立即发生并且不会被察觉。如果用户的设备较慢，那么列表会相应地“滞后”于输入，滞后的程度与设备的速度有关。<br>此外，与防抖或节流不同，useDeferredValue 执行的延迟重新渲染默认是可中断的。这意味着，如果 React 正在重新渲染一个大型列表，但用户进行了另一次键盘输入，React 会放弃该重新渲染，先处理键盘输入，然后再次开始在后台渲染。相比之下，防抖和节流仍会产生不顺畅的体验，因为它们是阻*的：它们仅仅是将渲染阻塞键盘输入的时刻推迟了。<br>如果你要优化的工作不是在渲染期间发生的，那么防抖和节流仍然非常有用。例如，它们可以让你减少网络请求的次数。你也可以同时使用这些技术。</p>

</div>

<br>
<div>作者：Harbour<br>链接：https://juejin.cn/post/7260326520336760893<br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</div>

</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0007609432986111111" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-31 09:10">2025-03-31 09:10</span>&nbsp;
<a href="https://www.cnblogs.com/jiajialove">小提莫~</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18801537" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18801537);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18801537', targetLink: 'https://www.cnblogs.com/jiajialove/p/18801537', title: 'useDeferredValue的作用' })">举报</a>
</div>
        