
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Can-daydayup/p/18957617" title="发布于 2025-06-30 13:08">
    <span role="heading" aria-level="2">.NET应用中的高效分布式同步解决方案</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h2 data-tool="mdnice编辑器"><span>前言</span></h2>
<p data-tool="mdnice编辑器"><span>在分布式系统中，多个线程、进程或服务之间常常需要并发访问共享资源，这就带来了数据同步与一致性的挑战。今天大姚给大家分享一个.NET应用中的高效分布式同步解决方案：DistributedLock。</span></p>
<h2 data-tool="mdnice编辑器"><span>项目介绍</span></h2>
<p data-tool="mdnice编辑器"><span>DistributedLock 是一个 .NET 开源的库，它基于多种底层技术提供了强大且易于使用的分布式互斥锁、读写锁和信号量。确保多个线程、进程或服务能够安全、协调地访问共享资源，防止竞态条件，维护数据一致性。</span></p>
<h2 data-tool="mdnice编辑器"><span>多种技术的实现方案</span></h2>
<p data-tool="mdnice编辑器"><span>DistributedLock 提供了基于多种技术的实现方案，你可以单独安装所需的实现包，也可以直接安装 DistributedLock NuGet 包使用。</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1336199/202506/1336199-20250630130643360-539113517.png" alt="" loading="lazy"></p>
<h2 data-tool="mdnice编辑器"><span>项目源代码</span></h2>
<p><img src="https://img2024.cnblogs.com/blog/1336199/202506/1336199-20250630130655500-1467682905.png" alt="" loading="lazy"></p>
<h2 data-tool="mdnice编辑器"><span>DistributedLock 包安装</span></h2>
<p data-tool="mdnice编辑器"><span>在 NuGet 包管理器中搜索：<code>DistributedLock</code><span>&nbsp;安装。</span></span></p>
<div>
<p><img src="https://img2024.cnblogs.com/blog/1336199/202506/1336199-20250630130707756-1348969676.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h2 data-tool="mdnice编辑器"><span>在 ASP.NET Core 应用中使用</span></h2>
<p data-tool="mdnice编辑器"><span>对于使用依赖注入的应用程序，DistributedLock 的提供程序可以轻松地将锁（或其他原语）名称的规范与其其他设置（如数据库连接字符串）分离开来。例如，在一个 ASP.NET Core 应用程序中，你可以这样做：</span></p>
<h3 data-tool="mdnice编辑器"><span>Program.cs 中注册</span></h3>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31VDoI96jicJjUvZibviauVuPpMFgzkreBEcReOqCU2jeSzfiaIOnRQciaxYn71Y5WsLKTPlXibibW8rymaJ/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>&nbsp; &nbsp; &nbsp; &nbsp; var builder = WebApplication.CreateBuilder(args);<span><br><span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; // Add services to the container.<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; builder.Services.AddRazorPages();<span><br><span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; // 注册一个单例的 IDistributedLockProvider，使用 Postgres 作为底层实现<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; builder.Services.AddSingleton&lt;IDistributedLockProvider&gt;(_ =&gt; new PostgresDistributedSynchronizationProvider(myConnectionString));<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; builder.Services.AddTransient&lt;UserAccountService&gt;();<span><br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></span></pre>
<h3 data-tool="mdnice编辑器"><span>对账户进行同步的初始化操作</span></h3>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31VDoI96jicJjUvZibviauVuPpMFgzkreBEcReOqCU2jeSzfiaIOnRQciaxYn71Y5WsLKTPlXibibW8rymaJ/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>&nbsp; &nbsp; public class UserAccountService<span><br><span>&nbsp; &nbsp; {<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; private&nbsp;readonly<span>&nbsp;IDistributedLockProvider _synchronizationProvider;<span><br><span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; /// &lt;summary&gt;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; /// 构造函数，接受 IDistributedLockProvider 的注入<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; /// &lt;/summary&gt;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; /// &lt;param name="synchronizationProvider"<span>&gt;synchronizationProvider&lt;/param&gt;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; public UserAccountService(IDistributedLockProvider synchronizationProvider)<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; {<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this._synchronizationProvider = synchronizationProvider; // 将注入的 IDistributedLockProvider 赋值给私有字段<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; }<span><br><span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; public void InitializeUserAccount(int id)<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; {<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 使用提供者来构造一个锁<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var currentLock = this._synchronizationProvider.CreateLock($"UserAccount{id}"<span>); // 根据用户账户ID创建一个锁<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; using (currentLock.Acquire()) // 获取锁，并在 using 块结束时自动释放<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 执行操作（在锁保护下）<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<span><br><span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 或者，对于常见用例，扩展方法允许通过单个调用来完成此操作<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; using (this._synchronizationProvider.AcquireLock($"UserAccount{id}"<span>)) // 直接使用提供者的扩展方法来获取并释放锁<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 执行操作（在锁保护下）<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; }<span><br><span>&nbsp; &nbsp; }<span><br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></span></pre>
<h2 data-tool="mdnice编辑器"><span>基于 Redis 实现的分布式锁</span></h2>
<p data-tool="mdnice编辑器"><span>DistributedLock.Redis 包提供了基于 Redis 实现的分布式锁功能，如下所示：</span></p>
<ul class="list-paddingleft-1">
<li><span>实现说明：https://redis.io/docs/latest/develop/use/patterns/distributed-locks</span></li>
</ul>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31VDoI96jicJjUvZibviauVuPpMFgzkreBEcReOqCU2jeSzfiaIOnRQciaxYn71Y5WsLKTPlXibibW8rymaJ/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var connectionString =&nbsp;"redis链接"<span>;<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var connection = await ConnectionMultiplexer.ConnectAsync(connectionString); // uses StackExchange.Redis<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var currentLock = new RedisDistributedLock("MyLockName"<span>, connection.GetDatabase());<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; await using (var handle = await currentLock.TryAcquireAsync())<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;if<span>&nbsp;(handle != null)<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //我已经获取了锁<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<span><br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></span></pre>
<h2 data-tool="mdnice编辑器"><span>基于 ZooKeeper 实现的分布式锁</span></h2>
<p data-tool="mdnice编辑器"><span>DistributedLock.ZooKeeper 包提供过了基于 Apache ZooKeeper 提供的分布式锁功能，如下所示：</span></p>
<ul class="list-paddingleft-1">
<li><span>实现说明：https://zookeeper.apache.org/doc/r3.1.2/recipes.html</span></li>
</ul>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31VDoI96jicJjUvZibviauVuPpMFgzkreBEcReOqCU2jeSzfiaIOnRQciaxYn71Y5WsLKTPlXibibW8rymaJ/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var currentLock = new ZooKeeperDistributedLock("MyLockName"<span>, connectionString);<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; await using (await currentLock.AcquireAsync())<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 我已经获取了锁<span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<span><br></span></span></span></span></span></span></span></span></span></span></span></code></span></pre>
<h2 data-tool="mdnice编辑器"><span>项目源码地址</span></h2>
<p data-tool="mdnice编辑器"><span>更多项目实用功能和特性欢迎前往项目开源地址查看👀，别忘了给项目一个Star支持💖。</span></p>
<ul class="list-paddingleft-1">
<li><strong>GitHub开源地址：</strong><span style="color: rgba(0, 0, 255, 1)"><a href="https://github.com/madelson/DistributedLock" target="_blank" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">https://github.com/madelson/DistributedLock</span></a></span></li>
</ul>
<h2 data-tool="mdnice编辑器"><span>优秀项目和框架精选</span></h2>
<p data-tool="mdnice编辑器"><span>该项目已收录到C#/.NET/.NET Core优秀项目和框架精选中，关注优秀项目和框架精选能让你及时了解C#、.NET和.NET Core领域的最新动态和最佳实践，提高开发工作效率和质量。坑已挖，欢迎大家踊跃提交PR推荐或自荐（让优秀的项目和框架不被埋没🤞）。</span></p>
<ul class="list-paddingleft-1">
<li><strong>GitHub开源地址：</strong><span style="color: rgba(0, 0, 255, 1)"><a href="https://github.com/YSGStudyHards/DotNetGuide/blob/main/docs/DotNet/DotNetProjectPicks.md" target="_blank" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">https://github.com/YSGStudyHards/DotNetGuide/blob/main/docs/DotNet/DotNetProjectPicks.md</span></a></span></li>
<li><strong>Gitee开源地址：</strong><span style="color: rgba(0, 0, 255, 1)"><a href="https://gitee.com/ysgdaydayup/DotNetGuide/blob/main/docs/DotNet/DotNetProjectPicks.md" target="_blank" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">https://gitee.com/ysgdaydayup/DotNetGuide/blob/main/docs/DotNet/DotNetProjectPicks.md</span></a></span></li>
</ul>
</div>
</div>
<div id="MySignature" role="contentinfo">
    <blockquote>
<p style="font-family:YouYuan;font-size: 16px;margin: 0 auto 0.01em auto;"><span style="font-size: 17px; ">作者名称：</span><a href="https://www.cnblogs.com/Can-daydayup/" target="_blank">追逐时光者</a></p>
<p style="font-family:YouYuan;font-size: 16px;margin: 0 auto 0.01em auto;"><span style="font-size: 17px; ">作者简介：</span>一个热爱编程、善于分享、喜欢学习、探索、尝试新事物和新技术的全栈软件工程师。</p>
<p style="font-family:YouYuan;font-size: 16px;margin: 0 auto 0.01em auto;">
本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接，否则保留追究法律责任的权利。如果该篇文章对您有帮助的话，可以点一下右下角的<a onclick="votePost(cb_entryId,'Digg')" href="javascript:void(0)" style="color:red;">【♥推荐♥】</a>，希望能够持续的为大家带来好的技术文章，文中可能存在描述不正确的地方，欢迎指正或补充，不胜感激。
</p>
</blockquote>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-30 13:09">2025-06-30 13:08</span>&nbsp;
<a href="https://www.cnblogs.com/Can-daydayup">追逐时光者</a>&nbsp;
阅读(<span id="post_view_count">340</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18957617);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18957617', targetLink: 'https://www.cnblogs.com/Can-daydayup/p/18957617', title: '.NET应用中的高效分布式同步解决方案' })">举报</a>
</div>
        