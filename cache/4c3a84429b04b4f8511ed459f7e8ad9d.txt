
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lyhabc/p/18683813/linux-pacemaker-deploy-alwayson-cluster" title="发布于 2025-02-06 08:00">
    <span role="heading" aria-level="2">从DNS配置到Pacemaker部署：一步步教你在Linux平台上实现AlwaysOn集群</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1 style="text-align: center;" data-tool="mdnice编辑器">从DNS配置到Pacemaker部署：一步步教你在Linux平台上实现AlwaysOn集群</h1>
<p>&nbsp;</p>
<p><br>AlwaysOn集群是SQL Server里唯一推荐的高可用性架构，</p>
<p>在AlwaysOn高可用性架构中，有非常多的高级功能，</p>
<ol style="list-style-type: lower-alpha;">
<li>可读辅助副本上的快照隔离级别会自动开启，这一机制旨在避免在数据库重做日志处理过程中发生阻塞，通过确保用户在辅助副本上能够执行数据的读取操作，从而避免因阻塞redo线程而影响数据的恢复效率。</li>
<li>AlwaysOn技术还支持自动修复损坏的数据页，不论是主要副本还是任何辅助副本，一旦发现数据页损坏，系统会自动进行修复，确保数据的完整性和可用性。</li>
<li>跨平台仅读取缩放可用性组，支持Windows和Linux平台混合部署</li>
<li>要提交的所需已同步辅助副本，指定多少个辅助副本回应主要副本才能提交事务。</li>

</ol>
<p>本篇文章带你如何在Linux平台搭建AlwaysOn集群，在Linux平台上增加了仅配置可用性模式等诸多功能，体验更加强大的AlwaysOn集群功能。</p>
<p>&nbsp;</p>
<p data-tool="mdnice编辑器">下面介绍基于Pacemaker集群的AlwaysOn可用性组部署的详细步骤， 集群各个节点的部署信息和域名信息如表1和表2所示， 为了方便起见，在集群搭建的过程中所有节点的防火墙服务都已经关闭，</p>
<p data-tool="mdnice编辑器">表1：集群各个节点的信息如下：</p>
<table>
<thead>
<tr><th>节点名称</th><th>IP</th><th>用途</th><th>操作系统</th><th>数据库版本</th>
</tr>

</thead>
<tbody>
<tr>
<td>DNS</td>
<td>192.168.22.112</td>
<td>DNS服务</td>
<td>CentOS 9.2</td>
<td>&nbsp;</td>

</tr>
<tr>
<td>wwwmssql122</td>
<td>192.168.22.122</td>
<td>主要副本（同步提交）</td>
<td>CentOS 9.2</td>
<td>SQL Server 2019</td>

</tr>
<tr>
<td>wwwmssql124</td>
<td>192.168.22.124</td>
<td>辅助副本（同步提交）</td>
<td>CentOS 9.2</td>
<td>SQL Server 2019</td>

</tr>
<tr>
<td>wwwmssql128</td>
<td>192.168.22.128</td>
<td>辅助副本（同步提交）</td>
<td>CentOS 9.2</td>
<td>SQL Server 2019</td>

</tr>
<tr>
<td>yahaha_listener</td>
<td>192.168.22.160</td>
<td>AlwaysOn侦听器</td>
<td>&nbsp;</td>
<td>&nbsp;</td>

</tr>

</tbody>

</table>
<p>&nbsp;</p>
<p data-tool="mdnice编辑器">表2：各个节点的域名信息和可用性组信息如下：</p>
<table>
<thead>
<tr><th>节点名称</th><th>域名信息</th><th>IP</th>
</tr>

</thead>
<tbody>
<tr>
<td>wwwmssql122</td>
<td>wwwmssql122.mssqlag.com</td>
<td>192.168.22.122</td>

</tr>
<tr>
<td>wwwmssql124</td>
<td>wwwmssql124.mssqlag.com</td>
<td>192.168.22.124</td>

</tr>
<tr>
<td>wwwmssql128</td>
<td>wwwmssql128.mssqlag.com</td>
<td>192.168.22.128</td>

</tr>
<tr>
<td>yahaha_listener</td>
<td>yahaha_listener.mssqlag.com</td>
<td>192.168.22.160</td>

</tr>
<tr>
<td>yahaha_ag</td>
<td>AlwaysOn可用性组名称</td>
<td>&nbsp;</td>

</tr>

</tbody>

</table>
<p>&nbsp;</p>
<p data-tool="mdnice编辑器">在Linux服务器上搭建AlwaysOn集群之前需要安装好所有需要用到的软件包，然后开启数据库实例的AlwaysOn功能，下面的代码会启用AlwaysOn可用性组功能并安装SQL Server高可用性支持包，然后安装Pacemaker相关的软件包，安装完Pacemaker软件包之后会自动创建一个系统账号hacluster，在每个数据库节点上执行以下命令：</p>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>yum&nbsp;clean&nbsp;all
yum&nbsp;makecache
yum&nbsp;config-manager&nbsp;--set-enabled&nbsp;highavailability
yum&nbsp;install&nbsp;-y&nbsp;pacemaker&nbsp;pcs&nbsp;fence-agents-all&nbsp;resource-agents&nbsp;corosync
yum&nbsp;install&nbsp;-y&nbsp;mssql-server-ha&nbsp;

#打开AlwaysOn可用性组功能
/opt/mssql/bin/mssql-conf&nbsp;set&nbsp;hadr.hadrenabled&nbsp;1
systemctl&nbsp;restart&nbsp;mssql-server</code></pre>
<p>&nbsp;</p>
<p data-tool="mdnice编辑器">安装好上面的软件包之后，我们正式进入集群部署流程，下面开始部署DNS服务。</p>
<h4 data-tool="mdnice编辑器"><span class="content">部署DNS服务</span></h4>
<p data-tool="mdnice编辑器">实际上可以不用搭建DNS服务，在每台机器节点上通过修改/etc/hosts文件添加机器名和IP地址的映射也能实现，但是实际生产环境还是建议搭建DNS服务，这样做更加正规。 部署DNS服务器实际上是注册节点wwwmssql122、wwwmssql124、wwwmssql128以及侦听器yahaha_listener到DNS服务，为AlwaysOn集群提供域名解析服务。</p>
<p data-tool="mdnice编辑器">我们使用下面步骤进行搭建DNS服务，下面的所有操作都在192.168.22.112这台机器上执行：</p>
<ol data-tool="mdnice编辑器">
<li>安装BIND软件包和相关工具，执行下面命令：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>yum&nbsp;install&nbsp;-y&nbsp;bind&nbsp;
yum&nbsp;install&nbsp;-y&nbsp;bind-utils</code></pre>
<ol start="2" data-tool="mdnice编辑器">
<li>修改 /etc/named.conf文件，执行下面命令：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>sed&nbsp;-i.bak&nbsp;\
-e&nbsp;'s/listen-on&nbsp;port&nbsp;53&nbsp;{&nbsp;127.0.0.1;&nbsp;}/listen-on&nbsp;port&nbsp;53&nbsp;{&nbsp;192.168.22.112;&nbsp;}/'&nbsp;\
-e&nbsp;'s/allow-query&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;localhost;&nbsp;}/allow-query&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;any;&nbsp;}/'&nbsp;\
-e&nbsp;'/include&nbsp;"\/etc\/crypto-policies\/back-ends\/bind.config";/a\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;check-names&nbsp;master&nbsp;warn;'&nbsp;/etc/named.conf</code></pre>
<ol start="3" data-tool="mdnice编辑器">
<li>在/etc/named.rfc1912.zones文件的末尾追加文本，执行下面的命令：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>cat&nbsp;&lt;&lt;EOF&nbsp;&gt;&gt;&nbsp;/etc/named.rfc1912.zones

#正向查找区域
zone&nbsp;"mssqlag.com"&nbsp;IN&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;master;
&nbsp;&nbsp;&nbsp;&nbsp;file&nbsp;"mssqlag.com.zone";
&nbsp;&nbsp;&nbsp;&nbsp;allow-update&nbsp;{&nbsp;none;&nbsp;};
};

#反向查找区域
zone&nbsp;"22.168.192.in-addr.arpa"&nbsp;IN&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;master;
&nbsp;&nbsp;&nbsp;&nbsp;file&nbsp;"22.168.192.zone";
&nbsp;&nbsp;&nbsp;&nbsp;allow-update&nbsp;{&nbsp;none;&nbsp;};
};
EOF</code></pre>
<ol start="4" data-tool="mdnice编辑器">
<li>配置正向解析配置文件和反向解析配置文件，复制一份正向解析配置文件模板，复制出来的模版文件的文件名和第三步添加的【正向查找区域】名称一样。同理，对于反向向解析配置文件也是做同样的操作，执行下面的命令：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>cp&nbsp;-p&nbsp;/var/named/named.localhost&nbsp;&nbsp;/var/named/mssqlag.com.zone
cp&nbsp;-p&nbsp;&nbsp;/var/named/named.loopback&nbsp;&nbsp;&nbsp;/var/named/22.168.192.zone
#配置正向解析
cat&nbsp;&lt;&lt;EOF&nbsp;&gt;&nbsp;/var/named/mssqlag.com.zone
$TTL&nbsp;1D
@&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IN&nbsp;SOA&nbsp;&nbsp;mssqlag.com.&nbsp;admin.mssqlag.com.&nbsp;(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2025011301&nbsp;;&nbsp;serial&nbsp;(日期+版本号)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;&nbsp;refresh
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;&nbsp;retry
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1W&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;&nbsp;expire
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3H&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;&nbsp;minimum
;
@&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IN&nbsp;NS&nbsp;&nbsp;&nbsp;&nbsp;dns.mssqlag.com.&nbsp;;&nbsp;指定&nbsp;DNS&nbsp;服务器名称
;
dns&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IN&nbsp;A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;192.168.22.112&nbsp;&nbsp;&nbsp;;&nbsp;DNS&nbsp;服务器&nbsp;IP
wwwmssql122&nbsp;IN&nbsp;A&nbsp;192.168.22.122&nbsp;&nbsp;&nbsp;;&nbsp;数据库节点&nbsp;IP
wwwmssql124&nbsp;IN&nbsp;A&nbsp;192.168.22.124&nbsp;&nbsp;&nbsp;;&nbsp;数据库节点&nbsp;IP
wwwmssql128&nbsp;IN&nbsp;A&nbsp;192.168.22.128&nbsp;&nbsp;&nbsp;;&nbsp;数据库节点&nbsp;IP
yahaha_listener&nbsp;IN&nbsp;A&nbsp;192.168.22.160&nbsp;;&nbsp;AlwaysOn&nbsp;侦听器&nbsp;IP
EOF

#配置反向解析
cat&nbsp;&lt;&lt;EOF&nbsp;&gt;&nbsp;&nbsp;/var/named/22.168.192.zone
$TTL&nbsp;1D
@&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IN&nbsp;SOA&nbsp;&nbsp;mssqlag.com.&nbsp;admin.mssqlag.com.&nbsp;(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2025011301&nbsp;;&nbsp;serial
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;&nbsp;refresh
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;&nbsp;retry
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1W&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;&nbsp;expire
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3H&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;&nbsp;minimum
;
@&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IN&nbsp;NS&nbsp;&nbsp;&nbsp;&nbsp;dns.mssqlag.com.&nbsp;;&nbsp;指定&nbsp;DNS&nbsp;服务器名称
;
112&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IN&nbsp;PTR&nbsp;&nbsp;&nbsp;dns.mssqlag.com.&nbsp;;&nbsp;反向解析记录
122&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IN&nbsp;PTR&nbsp;&nbsp;&nbsp;wwwmssql122.mssqlag.com.&nbsp;;&nbsp;数据库节点反向解析
124&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IN&nbsp;PTR&nbsp;&nbsp;&nbsp;wwwmssql124.mssqlag.com.&nbsp;;&nbsp;数据库节点反向解析
128&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IN&nbsp;PTR&nbsp;&nbsp;&nbsp;wwwmssql128.mssqlag.com.&nbsp;;&nbsp;数据库节点反向解析
160&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IN&nbsp;PTR&nbsp;&nbsp;&nbsp;yahaha_listener.mssqlag.com.&nbsp;;&nbsp;AlwaysOn&nbsp;侦听器反向解析
EOF</code></pre>
<ol start="5" data-tool="mdnice编辑器">
<li>对各个配置文件进行语法检查，执行下面的命令：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>#检查配置文件语法
named-checkconf&nbsp;/etc/named.conf&nbsp;&nbsp;&nbsp;&nbsp;
named-checkconf&nbsp;/etc/named.rfc1912.zones
#检查正向解析文件语法
named-checkzone&nbsp;mssqlag.com&nbsp;/var/named/mssqlag.com.zone
#检查反向解析文件语法
named-checkzone&nbsp;22.168.192.in-addr.arpa&nbsp;/var/named/22.168.192.zone</code></pre>
<ol start="6" data-tool="mdnice编辑器">
<li>重启BIND服务，如果配置文件语法有问题，那么BIND服务会启动失败，执行下面的命令：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>systemctl&nbsp;enable&nbsp;named
systemctl&nbsp;restart&nbsp;named</code></pre>
<ol start="7" data-tool="mdnice编辑器">
<li>修改所有集群节点的网卡配置文件，把DNS解析指向DNS服务器，所有集群节点都要把网卡配置文件里的DNS1改为指向DNS服务器192.168.22.112然后重启机器，执行下面的命令：</li>
</ol>
<p data-tool="mdnice编辑器">DNS服务器节点修改如下</p>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>cat&nbsp;&lt;&lt;EOF&nbsp;&gt;&nbsp;/etc/sysconfig/network-scripts/ifcfg-ens160
TYPE=Ethernet
BOOTPROTO=static
NAME=ens160
DEVICE=ens160
ONBOOT=yes
IPADDR=192.168.22.112
PREFIX=24
GATEWAY=192.168.22.2
DNS1=192.168.22.112&nbsp;&nbsp;&nbsp;#每台机器都改为DNS机器的ip
DNS2=114.114.114.114
DOMAIN=mssqlag.com&nbsp;&nbsp;&nbsp;#搜索域名后缀
EOF</code></pre>
<p data-tool="mdnice编辑器">所有数据库节点修改如下</p>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>cat&nbsp;&lt;&lt;EOF&nbsp;&gt;&nbsp;/etc/sysconfig/network-scripts/ifcfg-ens160
TYPE=Ethernet
BOOTPROTO=static
NAME=ens160
DEVICE=ens160
ONBOOT=yes
IPADDR=192.168.22.128
PREFIX=24
GATEWAY=192.168.22.2
DNS1=192.168.22.112&nbsp;&nbsp;&nbsp;#每台机器都改为DNS机器的ip
DNS2=114.114.114.114
DOMAIN=mssqlag.com&nbsp;&nbsp;&nbsp;##搜索域名后缀
EOF</code></pre>
<p data-tool="mdnice编辑器">重启完机器之后，每个机器都要检查/etc/resolv.conf配置文件，如果看到search mssqlag.com和nameserver 192.168.22.112那么表示网卡配置文件无问题，执行下面的命令：</p>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>cat&nbsp;&nbsp;/etc/resolv.conf
#&nbsp;Generated&nbsp;by&nbsp;NetworkManager
search&nbsp;mssqlag.com
nameserver&nbsp;192.168.22.112
nameserver&nbsp;114.114.114.114</code></pre>
<ol start="8" data-tool="mdnice编辑器">
<li>测试DNS解析情况，在192.168.22.122机器上测试DNS解析，使用dig命令和ping命令测试正向解析和反向解析。解析结果里要重点关注ANSWER SECTION和SERVER这两个字段，SERVER的返回结果一定要是192.168.22.112#53(192.168.22.112) ，执行下面的命令：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>#测试正向解析，测试FQDN
dig&nbsp;wwwmssql128.mssqlag.com
#测试正向解析，测试短主机名
dig&nbsp;wwwmssql128

#测试反向解析
dig&nbsp;-x&nbsp;192.168.22.128

#测试ping
ping&nbsp;wwwmssql128
ping&nbsp;wwwmssql128.mssqlag.com</code></pre>
<p data-tool="mdnice编辑器">至此，DNS服务就部署完毕，一定要确保第八步的测试都没有问题，否则会影响后续的集群搭建过程，下面正式开始部署AlwaysOn集群。</p>
<h4 data-tool="mdnice编辑器"><span class="content">正式搭建AlwaysOn集群</span></h4>
<p data-tool="mdnice编辑器">创建AlwaysOn可用性组的步骤与Windows平台上的AlwaysOn可用性组创建方式基本一致。整个集群搭建过程实际上分为四大步骤，分别是：创建AlwaysOn集群、Pacemaker集群配置、Pacemaker资源配置和Pacemaker约束配置，下面是详细的搭建步骤：</p>
<ul data-tool="mdnice编辑器">
<li><strong>创建AlwaysOn集群</strong></li>
</ul>
<ol data-tool="mdnice编辑器">
<li>创建数据库主密钥和创建证书 ，根据提示在各个副本上执行，SQL代码如下：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>--主要副本wwwmssql122上执行
USE&nbsp;master;
CREATE&nbsp;MASTER&nbsp;KEY&nbsp;ENCRYPTION&nbsp;BY&nbsp;PASSWORD&nbsp;=&nbsp;'master@22222key123';
CREATE&nbsp;CERTIFICATE&nbsp;HOST_22_122_cert&nbsp;&nbsp;WITH&nbsp;SUBJECT&nbsp;=&nbsp;'HOST_22_122_certificate',START_DATE&nbsp;=&nbsp;'09/20/2010',EXPIRY_DATE&nbsp;=&nbsp;'01/01/2099';
--辅助副本wwwmssql124上执行
USE&nbsp;master;
CREATE&nbsp;MASTER&nbsp;KEY&nbsp;ENCRYPTION&nbsp;BY&nbsp;PASSWORD&nbsp;=&nbsp;'master@22222key123';
CREATE&nbsp;CERTIFICATE&nbsp;HOST_22_124_cert&nbsp;&nbsp;WITH&nbsp;SUBJECT&nbsp;=&nbsp;'HOST_22_124_certificate',START_DATE&nbsp;=&nbsp;'09/20/2010',EXPIRY_DATE&nbsp;=&nbsp;'01/01/2099';
--辅助副本wwwmssql128上执行
USE&nbsp;master;
CREATE&nbsp;MASTER&nbsp;KEY&nbsp;ENCRYPTION&nbsp;BY&nbsp;PASSWORD&nbsp;=&nbsp;'master@22222key123';
CREATE&nbsp;CERTIFICATE&nbsp;HOST_22_128_cert&nbsp;&nbsp;WITH&nbsp;SUBJECT&nbsp;=&nbsp;'HOST_22_128_certificate',START_DATE&nbsp;=&nbsp;'09/20/2010',EXPIRY_DATE&nbsp;=&nbsp;'01/01/2099';</code></pre>
<ol start="2" data-tool="mdnice编辑器">
<li>创建镜像端点并添加证书，根据提示在各个副本上执行，SQL代码如下：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>--主要副本wwwmssql122上执行
CREATE&nbsp;ENDPOINT&nbsp;Endpoint_Mirroring&nbsp;
STATE&nbsp;=&nbsp;STARTED&nbsp;
AS&nbsp;
TCP&nbsp;(&nbsp;LISTENER_PORT=5022&nbsp;,&nbsp;LISTENER_IP&nbsp;=&nbsp;ALL&nbsp;)&nbsp;
FOR&nbsp;
DATABASE_MIRRORING&nbsp;
(&nbsp;AUTHENTICATION&nbsp;=&nbsp;CERTIFICATE&nbsp;HOST_22_122_cert&nbsp;&nbsp;,&nbsp;ENCRYPTION&nbsp;=&nbsp;REQUIRED&nbsp;ALGORITHM&nbsp;AES&nbsp;,&nbsp;ROLE&nbsp;=&nbsp;ALL&nbsp;);
--辅助副本wwwmssql124上执行
CREATE&nbsp;ENDPOINT&nbsp;Endpoint_Mirroring&nbsp;
STATE&nbsp;=&nbsp;STARTED&nbsp;
AS&nbsp;
TCP&nbsp;(&nbsp;LISTENER_PORT=5022&nbsp;,&nbsp;LISTENER_IP&nbsp;=&nbsp;ALL&nbsp;)&nbsp;
FOR&nbsp;
DATABASE_MIRRORING&nbsp;
(&nbsp;AUTHENTICATION&nbsp;=&nbsp;CERTIFICATE&nbsp;HOST_22_124_cert&nbsp;&nbsp;,&nbsp;ENCRYPTION&nbsp;=&nbsp;REQUIRED&nbsp;ALGORITHM&nbsp;AES&nbsp;,&nbsp;ROLE&nbsp;=&nbsp;ALL&nbsp;);
--辅助副本wwwmssql128上执行
CREATE&nbsp;ENDPOINT&nbsp;Endpoint_Mirroring
STATE&nbsp;=&nbsp;STARTED
AS
TCP&nbsp;(&nbsp;LISTENER_PORT=5022&nbsp;,&nbsp;LISTENER_IP&nbsp;=&nbsp;ALL&nbsp;)
FOR
DATABASE_MIRRORING
(&nbsp;AUTHENTICATION&nbsp;=&nbsp;CERTIFICATE&nbsp;HOST_22_128_cert&nbsp;&nbsp;,&nbsp;ENCRYPTION&nbsp;=&nbsp;REQUIRED&nbsp;ALGORITHM&nbsp;AES&nbsp;,&nbsp;ROLE&nbsp;=&nbsp;ALL&nbsp;);</code></pre>
<ol start="3" data-tool="mdnice编辑器">
<li>每个数据库节点都备份证书然后互换，根据提示在各个副本上执行，SQL代码如下：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>--主要副本wwwmssql122上执行
BACKUP&nbsp;CERTIFICATE&nbsp;HOST_22_122_cert&nbsp;TO&nbsp;FILE&nbsp;=&nbsp;'/data/mssql/1433/dbbackup/HOST_22_122_cert.cer';
--辅助副本wwwmssql124上执行
BACKUP&nbsp;CERTIFICATE&nbsp;HOST_22_124_cert&nbsp;TO&nbsp;FILE&nbsp;=&nbsp;'/data/mssql/1433/dbbackup/HOST_22_124_cert.cer';
--辅助副本wwwmssql128上执行
BACKUP&nbsp;CERTIFICATE&nbsp;HOST_22_128_cert&nbsp;TO&nbsp;FILE&nbsp;=&nbsp;'/data/mssql/1433/dbbackup/HOST_22_128_cert.cer';</code></pre>
<ol start="4" data-tool="mdnice编辑器">
<li>证书互换并授权，将每个数据库节点上创建的证书传输（使用scp命令）给其他数据库节点，然后授予mssql操作系统帐户对其他节点证书的访问权限，根据提示在各个副本上执行，执行的命令如下：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>#主要副本wwwmssql122上执行
scp&nbsp;/data/mssql/1433/dbbackup/HOST_22_122_cert.cer&nbsp;&nbsp;root@192.168.22.124:/data/mssql/1433/dbbackup/
scp&nbsp;/data/mssql/1433/dbbackup/HOST_22_122_cert.cer&nbsp;&nbsp;root@192.168.22.128:/data/mssql/1433/dbbackup/
chown&nbsp;-R&nbsp;mssql:mssql&nbsp;&nbsp;/data/mssql/1433/*
#辅助副本wwwmssql124上执行
scp&nbsp;/data/mssql/1433/dbbackup/HOST_22_124_cert.cer&nbsp;&nbsp;root@192.168.22.128:/data/mssql/1433/dbbackup/
scp&nbsp;/data/mssql/1433/dbbackup/HOST_22_124_cert.cer&nbsp;&nbsp;root@192.168.22.122:/data/mssql/1433/dbbackup/
chown&nbsp;-R&nbsp;mssql:mssql&nbsp;&nbsp;/data/mssql/1433/*
#辅助副本wwwmssql128上执行
scp&nbsp;/data/mssql/1433/dbbackup/HOST_22_128_cert.cer&nbsp;&nbsp;root@192.168.22.124:/data/mssql/1433/dbbackup/
scp&nbsp;/data/mssql/1433/dbbackup/HOST_22_128_cert.cer&nbsp;&nbsp;root@192.168.22.122:/data/mssql/1433/dbbackup/
chown&nbsp;-R&nbsp;mssql:mssql&nbsp;&nbsp;/data/mssql/1433/*</code></pre>
<ol start="5" data-tool="mdnice编辑器">
<li>创建登录账号（供辅助副本使用），然后为登录账号创建数据库用户，再还原来自其他数据库节点的证书，最后授予登录账号对端点的CONNECT权限，根据提示在各个副本上执行，SQL代码如下：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>--主要副本wwwmssql122上执行
CREATE&nbsp;LOGIN&nbsp;[wwwmssql124LoginUser]&nbsp;WITH&nbsp;PASSWORD&nbsp;=&nbsp;'User_Pass@22222key123';&nbsp;
CREATE&nbsp;USER&nbsp;[wwwmssql124User]&nbsp;FOR&nbsp;LOGIN&nbsp;[wwwmssql124LoginUser];&nbsp;
CREATE&nbsp;CERTIFICATE&nbsp;HOST_22_124_cert&nbsp;AUTHORIZATION&nbsp;[wwwmssql124User]&nbsp;FROM&nbsp;FILE&nbsp;='/data/mssql/1433/dbbackup/HOST_22_124_cert.cer';
GRANT&nbsp;CONNECT&nbsp;ON&nbsp;ENDPOINT::Endpoint_Mirroring&nbsp;TO&nbsp;[wwwmssql124LoginUser];
CREATE&nbsp;LOGIN&nbsp;[wwwmssql128LoginUser]&nbsp;WITH&nbsp;PASSWORD&nbsp;=&nbsp;'User_Pass@22222key123';&nbsp;
CREATE&nbsp;USER&nbsp;[wwwmssql128User]&nbsp;FOR&nbsp;LOGIN&nbsp;[wwwmssql128LoginUser];&nbsp;
CREATE&nbsp;CERTIFICATE&nbsp;HOST_22_128_cert&nbsp;AUTHORIZATION&nbsp;[wwwmssql128User]&nbsp;FROM&nbsp;FILE&nbsp;='/data/mssql/1433/dbbackup/HOST_22_128_cert.cer';
GRANT&nbsp;CONNECT&nbsp;ON&nbsp;ENDPOINT::Endpoint_Mirroring&nbsp;TO&nbsp;[wwwmssql128LoginUser];
--辅助副本wwwmssql124上执行
CREATE&nbsp;LOGIN&nbsp;[wwwmssql122LoginUser]&nbsp;WITH&nbsp;PASSWORD&nbsp;=&nbsp;'User_Pass@22222key123';&nbsp;
CREATE&nbsp;USER&nbsp;[wwwmssql122User]&nbsp;FOR&nbsp;LOGIN&nbsp;[wwwmssql122LoginUser];&nbsp;
CREATE&nbsp;CERTIFICATE&nbsp;HOST_22_122_cert&nbsp;AUTHORIZATION&nbsp;[wwwmssql122User]&nbsp;FROM&nbsp;FILE&nbsp;='/data/mssql/1433/dbbackup/HOST_22_122_cert.cer';
GRANT&nbsp;CONNECT&nbsp;ON&nbsp;ENDPOINT::Endpoint_Mirroring&nbsp;TO&nbsp;[wwwmssql122LoginUser];
CREATE&nbsp;LOGIN&nbsp;[wwwmssql128LoginUser]&nbsp;WITH&nbsp;PASSWORD&nbsp;=&nbsp;'User_Pass@22222key123';&nbsp;
CREATE&nbsp;USER&nbsp;[wwwmssql128User]&nbsp;FOR&nbsp;LOGIN&nbsp;[wwwmssql128LoginUser];&nbsp;
CREATE&nbsp;CERTIFICATE&nbsp;HOST_22_128_cert&nbsp;AUTHORIZATION&nbsp;[wwwmssql128User]&nbsp;FROM&nbsp;FILE&nbsp;='/data/mssql/1433/dbbackup/HOST_22_128_cert.cer';
GRANT&nbsp;CONNECT&nbsp;ON&nbsp;ENDPOINT::Endpoint_Mirroring&nbsp;TO&nbsp;[wwwmssql128LoginUser];
--辅助副本wwwmssql128上执行
CREATE&nbsp;LOGIN&nbsp;[wwwmssql122LoginUser]&nbsp;WITH&nbsp;PASSWORD&nbsp;=&nbsp;'User_Pass@22222key123';&nbsp;
CREATE&nbsp;USER&nbsp;[wwwmssql122User]&nbsp;FOR&nbsp;LOGIN&nbsp;[wwwmssql122LoginUser];&nbsp;
CREATE&nbsp;CERTIFICATE&nbsp;HOST_22_122_cert&nbsp;AUTHORIZATION&nbsp;[wwwmssql122User]&nbsp;FROM&nbsp;FILE&nbsp;='/data/mssql/1433/dbbackup/HOST_22_122_cert.cer';
GRANT&nbsp;CONNECT&nbsp;ON&nbsp;ENDPOINT::Endpoint_Mirroring&nbsp;TO&nbsp;[wwwmssql122LoginUser];
CREATE&nbsp;LOGIN&nbsp;[wwwmssql124LoginUser]&nbsp;WITH&nbsp;PASSWORD&nbsp;=&nbsp;'User_Pass@22222key123';&nbsp;
CREATE&nbsp;USER&nbsp;[wwwmssql124User]&nbsp;FOR&nbsp;LOGIN&nbsp;[wwwmssql124LoginUser];&nbsp;
CREATE&nbsp;CERTIFICATE&nbsp;HOST_22_124_cert&nbsp;AUTHORIZATION&nbsp;[wwwmssql124User]&nbsp;FROM&nbsp;FILE&nbsp;='/data/mssql/1433/dbbackup/HOST_22_124_cert.cer';
GRANT&nbsp;CONNECT&nbsp;ON&nbsp;ENDPOINT::Endpoint_Mirroring&nbsp;TO&nbsp;[wwwmssql124LoginUser];</code></pre>
<ol start="6" data-tool="mdnice编辑器">
<li>启动镜像端点和创建AlwaysOn集群健康检测相关的扩展事件，根据提示在各个副本上执行，SQL代码如下：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>--启动镜像端点和创建AlwaysOn集群健康检测的扩展事件
--主要副本wwwmssql122（192.168.22.122）上执行&nbsp;
USE&nbsp;master&nbsp;&nbsp;
GO
IF&nbsp;(SELECT&nbsp;state&nbsp;FROM&nbsp;sys.endpoints&nbsp;WHERE&nbsp;name&nbsp;=&nbsp;N'Endpoint_Mirroring')&nbsp;&lt;&gt;&nbsp;0
BEGIN
&nbsp;ALTER&nbsp;ENDPOINT&nbsp;[Endpoint_Mirroring]&nbsp;STATE&nbsp;=&nbsp;STARTED
END
GO
IF&nbsp;EXISTS(SELECT&nbsp;*&nbsp;FROM&nbsp;sys.server_event_sessions&nbsp;WHERE&nbsp;name='AlwaysOn_health')
BEGIN
&nbsp;&nbsp;ALTER&nbsp;EVENT&nbsp;SESSION&nbsp;[AlwaysOn_health]&nbsp;ON&nbsp;SERVER&nbsp;WITH&nbsp;(STARTUP_STATE=ON);
END
IF&nbsp;NOT&nbsp;EXISTS(SELECT&nbsp;*&nbsp;FROM&nbsp;sys.dm_xe_sessions&nbsp;WHERE&nbsp;name='AlwaysOn_health')
BEGIN
&nbsp;&nbsp;ALTER&nbsp;EVENT&nbsp;SESSION&nbsp;[AlwaysOn_health]&nbsp;ON&nbsp;SERVER&nbsp;STATE=START;
END
GO
--辅助副本wwwmssql124上执行（192.168.22.124）上执行&nbsp;
USE&nbsp;master&nbsp;&nbsp;
GO
IF&nbsp;(SELECT&nbsp;state&nbsp;FROM&nbsp;sys.endpoints&nbsp;WHERE&nbsp;name&nbsp;=&nbsp;N'Endpoint_Mirroring')&nbsp;&lt;&gt;&nbsp;0
BEGIN
&nbsp;ALTER&nbsp;ENDPOINT&nbsp;[Endpoint_Mirroring]&nbsp;STATE&nbsp;=&nbsp;STARTED
END
GO
IF&nbsp;EXISTS(SELECT&nbsp;*&nbsp;FROM&nbsp;sys.server_event_sessions&nbsp;WHERE&nbsp;name='AlwaysOn_health')
BEGIN
&nbsp;&nbsp;ALTER&nbsp;EVENT&nbsp;SESSION&nbsp;[AlwaysOn_health]&nbsp;ON&nbsp;SERVER&nbsp;WITH&nbsp;(STARTUP_STATE=ON);
END
IF&nbsp;NOT&nbsp;EXISTS(SELECT&nbsp;*&nbsp;FROM&nbsp;sys.dm_xe_sessions&nbsp;WHERE&nbsp;name='AlwaysOn_health')
BEGIN
&nbsp;&nbsp;ALTER&nbsp;EVENT&nbsp;SESSION&nbsp;[AlwaysOn_health]&nbsp;ON&nbsp;SERVER&nbsp;STATE=START;
END
GO
--辅助副本wwwmssql128上执行（192.168.22.128）上执行
USE&nbsp;master&nbsp;&nbsp;
GO
IF&nbsp;(SELECT&nbsp;state&nbsp;FROM&nbsp;sys.endpoints&nbsp;WHERE&nbsp;name&nbsp;=&nbsp;N'Endpoint_Mirroring')&nbsp;&lt;&gt;&nbsp;0
BEGIN
&nbsp;ALTER&nbsp;ENDPOINT&nbsp;[Endpoint_Mirroring]&nbsp;STATE&nbsp;=&nbsp;STARTED
END
GO
IF&nbsp;EXISTS(SELECT&nbsp;*&nbsp;FROM&nbsp;sys.server_event_sessions&nbsp;WHERE&nbsp;name='AlwaysOn_health')
BEGIN
&nbsp;&nbsp;ALTER&nbsp;EVENT&nbsp;SESSION&nbsp;[AlwaysOn_health]&nbsp;ON&nbsp;SERVER&nbsp;WITH&nbsp;(STARTUP_STATE=ON);
END
IF&nbsp;NOT&nbsp;EXISTS(SELECT&nbsp;*&nbsp;FROM&nbsp;sys.dm_xe_sessions&nbsp;WHERE&nbsp;name='AlwaysOn_health')
BEGIN
&nbsp;&nbsp;ALTER&nbsp;EVENT&nbsp;SESSION&nbsp;[AlwaysOn_health]&nbsp;ON&nbsp;SERVER&nbsp;STATE=START;
END
GO</code></pre>
<ol start="7" data-tool="mdnice编辑器">
<li>正式创建AlwaysOn可用性组和侦听器，把【TestDB】这个用户数据库加入到可用性组，一定要确保【TestDB】数据库已经做过完整备份以满足先决条件，端点URL在这里需要手动填写，如果想自动填写只能使用SSMS管理器自带的AlwaysOn可用性组创建向导界面，它会自动填写端点URL，由于使用的是【自动种子】这种数据初始化方式，非常方便的不需要备份还原到其他辅助副本，EXTERNAL群集类型是可用性组托管在外部群集技术（例如Pacemaker）管理的数据库实例上时使用以实现高可用性和灾难恢复。数据库级别运行状况检测（DB_FAILOVER）将为可用性组启用数据库级别运行状况检测，通俗的讲，此选项会让可用性组的运行状况检测不只在数据库实例层面进行，而转为针对数据库进行检测，当检测到数据库不再处于联机状态以及其它问题时将触发可用性组的自动故障转移，下面代码只需要在数据库节点wwwmssql122上执行，SQL代码如下：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>--正式创建AlwaysOn可用性组和侦听器
--主要副本wwwmssql122（192.168.22.122）上执行&nbsp;
USE&nbsp;[master]
GO
CREATE&nbsp;AVAILABILITY&nbsp;GROUP&nbsp;[yahaha_ag]
WITH&nbsp;(AUTOMATED_BACKUP_PREFERENCE&nbsp;=&nbsp;SECONDARY,
DB_FAILOVER&nbsp;=&nbsp;ON,
DTC_SUPPORT&nbsp;=&nbsp;NONE,
CLUSTER_TYPE&nbsp;=&nbsp;EXTERNAL,
REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT&nbsp;=&nbsp;0)
FOR&nbsp;DATABASE&nbsp;[TestDB]
REPLICA&nbsp;ON&nbsp;N'wwwmssql122'&nbsp;WITH&nbsp;(ENDPOINT_URL&nbsp;=&nbsp;N'TCP://wwwmssql122.mssqlag.com:5022',&nbsp;FAILOVER_MODE&nbsp;=&nbsp;EXTERNAL,&nbsp;AVAILABILITY_MODE&nbsp;=&nbsp;SYNCHRONOUS_COMMIT,&nbsp;BACKUP_PRIORITY&nbsp;=&nbsp;50,&nbsp;SEEDING_MODE&nbsp;=&nbsp;AUTOMATIC,&nbsp;PRIMARY_ROLE(READ_ONLY_ROUTING_LIST&nbsp;=&nbsp;(N'wwwmssql124',N'wwwmssql128')),&nbsp;SECONDARY_ROLE(READ_ONLY_ROUTING_URL&nbsp;=&nbsp;N'TCP://wwwmssql122.mssqlag.com:1433',&nbsp;ALLOW_CONNECTIONS&nbsp;=&nbsp;ALL)),
&nbsp;N'wwwmssql124'&nbsp;WITH&nbsp;(ENDPOINT_URL&nbsp;=&nbsp;N'TCP://wwwmssql124.mssqlag.com:5022',&nbsp;FAILOVER_MODE&nbsp;=&nbsp;EXTERNAL,&nbsp;AVAILABILITY_MODE&nbsp;=&nbsp;SYNCHRONOUS_COMMIT,&nbsp;BACKUP_PRIORITY&nbsp;=&nbsp;50,&nbsp;SEEDING_MODE&nbsp;=&nbsp;AUTOMATIC,&nbsp;PRIMARY_ROLE(READ_ONLY_ROUTING_LIST&nbsp;=&nbsp;(N'wwwmssql122',N'wwwmssql128')),&nbsp;SECONDARY_ROLE(READ_ONLY_ROUTING_URL&nbsp;=&nbsp;N'TCP://wwwmssql124.mssqlag.com:1433',&nbsp;ALLOW_CONNECTIONS&nbsp;=&nbsp;ALL)),
&nbsp;N'wwwmssql128'&nbsp;WITH&nbsp;(ENDPOINT_URL&nbsp;=&nbsp;N'TCP://wwwmssql128.mssqlag.com:5022',&nbsp;FAILOVER_MODE&nbsp;=&nbsp;EXTERNAL,&nbsp;AVAILABILITY_MODE&nbsp;=&nbsp;SYNCHRONOUS_COMMIT,&nbsp;BACKUP_PRIORITY&nbsp;=&nbsp;50,&nbsp;SEEDING_MODE&nbsp;=&nbsp;AUTOMATIC,&nbsp;PRIMARY_ROLE(READ_ONLY_ROUTING_LIST&nbsp;=&nbsp;(N'wwwmssql122',N'wwwmssql124')),&nbsp;SECONDARY_ROLE(READ_ONLY_ROUTING_URL&nbsp;=&nbsp;N'TCP://wwwmssql128.mssqlag.com:1433',&nbsp;ALLOW_CONNECTIONS&nbsp;=&nbsp;ALL));
GO
--创建AlwaysOn侦听器
ALTER&nbsp;AVAILABILITY&nbsp;GROUP&nbsp;[yahaha_ag]
ADD&nbsp;LISTENER&nbsp;N'yahaha_listener'&nbsp;(
WITH&nbsp;IP
((N'192.168.22.160',&nbsp;N'255.255.255.0')
)
,&nbsp;PORT=1433);
GO</code></pre>
<ol start="8" data-tool="mdnice编辑器">
<li>联接另外两个辅助副本，根据提示在另外两个辅助副本上执行，SQL代码如下：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>--联接各个辅助副本
--辅助副本wwwmssql124上执行（192.168.22.124）上执行&nbsp;
USE&nbsp;master&nbsp;&nbsp;
GO
ALTER&nbsp;AVAILABILITY&nbsp;GROUP&nbsp;[yahaha_ag]&nbsp;JOIN&nbsp;WITH&nbsp;(CLUSTER_TYPE&nbsp;=&nbsp;EXTERNAL);
GO
ALTER&nbsp;AVAILABILITY&nbsp;GROUP&nbsp;[yahaha_ag]&nbsp;GRANT&nbsp;CREATE&nbsp;ANY&nbsp;DATABASE;
GO
--辅助副本wwwmssql128上执行（192.168.22.128）上执行
USE&nbsp;master&nbsp;&nbsp;
GO
ALTER&nbsp;AVAILABILITY&nbsp;GROUP&nbsp;[yahaha_ag]&nbsp;JOIN&nbsp;WITH&nbsp;(CLUSTER_TYPE&nbsp;=&nbsp;EXTERNAL);
GO
ALTER&nbsp;AVAILABILITY&nbsp;GROUP&nbsp;[yahaha_ag]&nbsp;GRANT&nbsp;CREATE&nbsp;ANY&nbsp;DATABASE;
GO</code></pre>
<ol start="9" data-tool="mdnice编辑器">
<li>为Pacemaker创建数据库登录名，这里设置密码为Qwezxc123!，实际生产环境需要设置更为复杂的密码， Pacemaker将通过该【数据库登录名】连接到数据库实例以执行自动故障转移，所以需要对该登录名授予足够的管理权限，在所有副本上执行，SQL代码如下：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>USE&nbsp;master&nbsp;&nbsp;
GO
--为pacemaker创建登录名
CREATE&nbsp;LOGIN&nbsp;PacemakerLogin&nbsp;WITH&nbsp;PASSWORD&nbsp;=&nbsp;'QweUUU123!';&nbsp;&nbsp;
--对登录名给予sysadmin服务器角色权限
ALTER&nbsp;SERVER&nbsp;ROLE&nbsp;sysadmin&nbsp;ADD&nbsp;MEMBER&nbsp;[PacemakerLogin]
GO</code></pre>
<p>&nbsp;</p>
<p data-tool="mdnice编辑器">从图看到AlwaysOn集群已经搭建出来，各个数据库节点、侦听器和数据库都已经开始同步。&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/257159/202501/257159-20250121164216307-1217710015.png" alt="" width="359" height="406"></p>
<p id="1737448936598">&nbsp;</p>
<p><br data-tool="mdnice编辑器"><br data-tool="mdnice编辑器"></p>
<ul data-tool="mdnice编辑器">
<li><strong>Pacemaker集群配置</strong></li>

</ul>
<ol start="10" data-tool="mdnice编辑器">
<li>配置Pacemaker、Corosync和pcs开机自动启动，然后动pcs服务，在所有数据库节点上执行以下命令：</li>

</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>systemctl&nbsp;enable&nbsp;pacemaker
systemctl&nbsp;enable&nbsp;corosync&nbsp;&nbsp;
systemctl&nbsp;enable&nbsp;pcsd
systemctl&nbsp;start&nbsp;pcsd</code></pre>
<ol start="11" data-tool="mdnice编辑器">
<li>为了方便起见，笔者在集群搭建的过程中所有节点的防火墙服务都已经关闭，但是在生产环境中需要设置防火墙服务，开放防火墙规则以允许Pacemaker通信，需要确保以下端口允许通信：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>TCP端口2224用于PCS和节点间通信
TCP端口3121和21064用于Pacemaker&nbsp;Remote和不同的组件通信。
UDP端口5405用于各个节点之间Corosync的通信</code></pre>
<ol start="12" data-tool="mdnice编辑器">
<li>设置Pacemaker集群的账号密码，给Pacemaker附带的系统账号hacluster设置密码（密码为QweUUU123!，仅供示例），hacluster账号作为每个节点的集群账号，在所有数据库节点上执行以下命令：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>passwd&nbsp;hacluster</code></pre>
<ol start="13" data-tool="mdnice编辑器">
<li>配置集群节点认证，使用刚才的集群帐户来配置集群节点之间的身份验证，pcs host auth命令的作用是通过指定的用户名和密码（在这里是hacluster用户）配置集群节点之间的信任关系。这里输入上一步的用户名（hacluster）和密码（QweUUU123!），在任意一个数据库节点执行以下命令：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>pcs&nbsp;host&nbsp;auth&nbsp;&nbsp;wwwmssql122&nbsp;&nbsp;wwwmssql124&nbsp;&nbsp;wwwmssql128&nbsp;&nbsp;-u&nbsp;hacluster&nbsp;-p&nbsp;'QweUUU123!'</code></pre>
<ol start="14" data-tool="mdnice编辑器">
<li>创建Pacemaker集群并启动，最后设置集群开机自启动，pcs cluster setup命令的作用是初始化一个新的Pacemaker集群，其中yahahacluster是新集群的名称，该集群包含三个节点wwmssql122、wwwmssql124和wwwmssql128。在任意一个数据库节点执行以下命令：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>pcs&nbsp;cluster&nbsp;setup&nbsp;yahahacluster&nbsp;&nbsp;wwwmssql122&nbsp;&nbsp;wwwmssql124&nbsp;&nbsp;wwwmssql128&nbsp;
pcs&nbsp;cluster&nbsp;start&nbsp;--all
pcs&nbsp;cluster&nbsp;enable&nbsp;–all</code></pre>
<ol start="15" data-tool="mdnice编辑器">
<li>在/var/opt/mssql/secrets/目录下创建名为passwd的文件，并将数据库Pacemaker登录用户的凭据写入passwd文件，以便Pacemaker能连接数据库执行自动故障转移，在所有数据库节点上执行以下命令：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>cat&nbsp;&gt;&nbsp;/var/opt/mssql/secrets/passwd&nbsp;&lt;&lt;&nbsp;EOF
PacemakerLogin
QweUUU123!
EOF</code></pre>
<ol start="16" data-tool="mdnice编辑器">
<li>设置对passwd文件只允许文件所有者读取，其他用户无法读取和修改，在所有数据库节点上执行以下命令：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>chmod&nbsp;400&nbsp;/var/opt/mssql/secrets/passwd</code></pre>
<ol start="17" data-tool="mdnice编辑器">
<li>禁用配置隔离 在任意一个数据库节点执行以下命令：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>pcs&nbsp;property&nbsp;set&nbsp;stonith-enabled=false</code></pre>
<ol start="18" data-tool="mdnice编辑器">
<li>启用集群故障恢复机制 在任意一个数据库节点执行以下命令：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>pcs&nbsp;property&nbsp;set&nbsp;start-failure-is-fatal=false</code></pre>
<p>&nbsp;</p>
<ul data-tool="mdnice编辑器">
<li><strong>Pacemaker资源配置</strong></li>
</ul>
<ol start="19" data-tool="mdnice编辑器">
<li>在Pacemaker中创建AlwaysOn可用性组资源 yahaha_ag_linux是资源名称用于标识一个AlwaysOn可用性组资源。ocf:mssql:ag的意思是使用OCF（Open Cluster Framework）标准里的【mssql】资源代理集合里的【ag】资源代理来管理AlwaysOn可用性组。在任意一个数据库节点执行以下命令：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>pcs&nbsp;resource&nbsp;create&nbsp;yahaha_ag_linux&nbsp;ocf:mssql:ag&nbsp;ag_name=yahaha_ag&nbsp;meta&nbsp;failure-timeout=60s&nbsp;promotable&nbsp;notify=true</code></pre>
<ol start="20" data-tool="mdnice编辑器">
<li>在Pacemaker中创建侦听器资源 agvip是资源名称用于标识AlwaysOn侦听器的虚拟IP资源。ocf:heartbeat:IPaddr2的意思是使用【heartbeat】资源代理集合里的【IPaddr2】资源代理用于管理虚拟IP地址。在任意一个数据库节点执行以下命令：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>pcs&nbsp;resource&nbsp;create&nbsp;ag_vip_linux&nbsp;&nbsp;ocf:heartbeat:IPaddr2&nbsp;ip=192.168.22.160</code></pre>
<p>&nbsp;</p>
<ul data-tool="mdnice编辑器">
<li><strong>Pacemaker约束配置</strong></li>
</ul>
<ol start="21" data-tool="mdnice编辑器">
<li>添加协同位置约束（Colocation Constraint） 资源的协同位置约束确保虚拟IP资源（ag_vip_linux）与AlwaysOn可用性组资源的主节点（Promoted Master）运行在同一节点上。在任意一个数据库节点执行以下命令：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>pcs&nbsp;constraint&nbsp;colocation&nbsp;add&nbsp;ag_vip_linux&nbsp;with&nbsp;Promoted&nbsp;yahaha_ag_linux-clone&nbsp;INFINITY&nbsp;with-rsc-role=Master</code></pre>
<ol start="22" data-tool="mdnice编辑器">
<li>添加排序约束（Ordering Constraint） 协同位置约束有一个隐式排序约束，在对故障节点进行故障转移之后也需要转移虚拟IP资源。在任意一个数据库节点执行以下命令：</li>
</ol>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>pcs&nbsp;constraint&nbsp;order&nbsp;promote&nbsp;yahaha_ag_linux-clone&nbsp;then&nbsp;start&nbsp;ag_vip_linux</code></pre>
<p data-tool="mdnice编辑器">至此，整个集群已经搭建完毕，现在需要检查Pacemaker集群和AlwaysOn集群的状态，在任意一个数据库节点执行以下命令：</p>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>#检查集群的状态
pcs&nbsp;status&nbsp;--full&nbsp;
#检查集群资源的情况
pcs&nbsp;resource</code></pre>
<p data-tool="mdnice编辑器">从pcs resource命令结果和pcs status --full命令结果可以看到，当前Pacemaker集群的仲裁状态正常，当前集群主角色在wwwmssql122机器上运行，侦听器资源绑定在wwwmssql122机器上并且是启动状态。 pcs status --full命令的结果如下：</p>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>Cluster&nbsp;name:&nbsp;yahahacluster
Cluster&nbsp;Summary:
&nbsp;&nbsp;*&nbsp;Stack:&nbsp;corosync&nbsp;(Pacemaker&nbsp;is&nbsp;running)
&nbsp;&nbsp;*&nbsp;Current&nbsp;DC:&nbsp;wwwmssql122&nbsp;(1)&nbsp;(version&nbsp;2.1.9-1.el9-49aab9983)&nbsp;-&nbsp;partition&nbsp;with&nbsp;quorum
&nbsp;&nbsp;*&nbsp;Last&nbsp;updated:&nbsp;Fri&nbsp;Jan&nbsp;17&nbsp;18:48:38&nbsp;2025&nbsp;on&nbsp;wwwmssql122
&nbsp;&nbsp;*&nbsp;Last&nbsp;change:&nbsp;&nbsp;Thu&nbsp;Jan&nbsp;16&nbsp;22:57:32&nbsp;2025&nbsp;by&nbsp;root&nbsp;via&nbsp;root&nbsp;on&nbsp;wwwmssql122
&nbsp;&nbsp;*&nbsp;3&nbsp;nodes&nbsp;configured
&nbsp;&nbsp;*&nbsp;4&nbsp;resource&nbsp;instances&nbsp;configured
Node&nbsp;List:
&nbsp;&nbsp;*&nbsp;Node&nbsp;wwwmssql122&nbsp;(1):&nbsp;online,&nbsp;feature&nbsp;set&nbsp;3.19.6
&nbsp;&nbsp;*&nbsp;Node&nbsp;wwwmssql124&nbsp;(2):&nbsp;online,&nbsp;feature&nbsp;set&nbsp;3.19.6
&nbsp;&nbsp;*&nbsp;Node&nbsp;wwwmssql128&nbsp;(3):&nbsp;online,&nbsp;feature&nbsp;set&nbsp;3.19.6
Full&nbsp;List&nbsp;of&nbsp;Resources:
&nbsp;&nbsp;*&nbsp;Clone&nbsp;Set:&nbsp;yahaha_ag_linux-clone&nbsp;[yahaha_ag_linux]&nbsp;(promotable):
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;yahaha_ag_linux&nbsp;(ocf:mssql:ag):&nbsp;&nbsp;Promoted&nbsp;wwwmssql122
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;yahaha_ag_linux&nbsp;(ocf:mssql:ag):&nbsp;&nbsp;Unpromoted&nbsp;wwwmssql124
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;yahaha_ag_linux&nbsp;(ocf:mssql:ag):&nbsp;&nbsp;Unpromoted&nbsp;wwwmssql128
&nbsp;&nbsp;*&nbsp;ag_vip_linux&nbsp;(ocf:heartbeat:IPaddr2):&nbsp;&nbsp;Started&nbsp;wwwmssql122
Node&nbsp;Attributes:
&nbsp;&nbsp;*&nbsp;Node:&nbsp;wwwmssql122&nbsp;(1):
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;master-yahaha_ag_linux&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#节点拥有的分数
&nbsp;&nbsp;*&nbsp;Node:&nbsp;wwwmssql124&nbsp;(2):
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;master-yahaha_ag_linux&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#节点拥有的分数
&nbsp;&nbsp;*&nbsp;Node:&nbsp;wwwmssql128&nbsp;(3):
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;master-yahaha_ag_linux&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#节点拥有的分数
Migration&nbsp;Summary:
Tickets:
PCSD&nbsp;Status:
&nbsp;&nbsp;wwwmssql122:&nbsp;Online
&nbsp;&nbsp;wwwmssql124:&nbsp;Online
&nbsp;&nbsp;wwwmssql128:&nbsp;Online
Daemon&nbsp;Status:
&nbsp;&nbsp;corosync:&nbsp;active/enabled
&nbsp;&nbsp;pacemaker:&nbsp;active/enabled
&nbsp;&nbsp;pcsd:&nbsp;active/enabled</code></pre>
<p data-tool="mdnice编辑器">pcs resource命令的结果如下：</p>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>&nbsp;&nbsp;*&nbsp;Clone&nbsp;Set:&nbsp;yahaha_ag_linux-clone&nbsp;[yahaha_ag_linux]&nbsp;(promotable):
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Promoted:&nbsp;[&nbsp;wwwmssql122&nbsp;]
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Unpromoted:&nbsp;[&nbsp;wwwmssql124&nbsp;wwwmssql128&nbsp;]
&nbsp;&nbsp;*&nbsp;ag_vip_linux&nbsp;(ocf:heartbeat:IPaddr2):&nbsp;&nbsp;Started&nbsp;wwwmssql122</code></pre>
<p data-tool="mdnice编辑器">在SSMS中打开AlwaysOn集群控制面板，从图看到查看当前AlwaysOn集群的状态是【正常运行】，并且主要副本是在wwwmssql122机器上运行，说明集群搭建没有任何问题。</p>
<p data-tool="mdnice编辑器">&nbsp;</p>
<p><img src="https://files.mdnice.com/user/75777/3096b1e1-9f30-4a46-9c2a-4e5ab7ce3174.png" alt=""></p>
<p data-tool="mdnice编辑器">从图看到，我们使用侦听器IP【192.168.22.160】连接数据库然后查询和更新数据是完全没有问题的， 从【select SERVERPROPERTY('ServerName')】语句的执行结果看到当前连接的是主要副本【wwwmssql122】， 使用侦听器IP连接数据库的速度也非常快。</p>
<p data-tool="mdnice编辑器"><img src="https://img2024.cnblogs.com/blog/257159/202501/257159-20250121164321439-67569290.png" alt="" width="905" height="487"></p>
<p id="1737449002001">&nbsp;</p>
<p>&nbsp;</p>
<p id="1737448969623">&nbsp;</p>
<h4 data-tool="mdnice编辑器"><span class="content">集群故障转移测试</span></h4>
<p data-tool="mdnice编辑器">使用Pacemaker的AlwaysOn集群无法使用TSQL语句或者SSMS界面菜单对可用性组资源进行数据库故障转移。 AlwaysOn集群的一部分管理操作只能使用pcs命令来完成，下面演示使用pcs命令手动对数据库进行故障转移：</p>
<ul data-tool="mdnice编辑器">
<li><strong>数据库手动故障转移测试</strong></li>
</ul>
<p data-tool="mdnice编辑器">接下来演示手动将资源yahaha_ag_linux从当前运行的节点（wwwmssql122）转移到wwwmssql124节点，使用pcs命令进行手动故障切换要比SSMS的界面菜单先进，因为使用SSMS的界面菜单进行手动故障切换无法选择切换目标，但是pcs命令可以选择切换目标，这里选择的切换目标是wwwmssql124节点，只需要在任意一个数据库节点执行以下命令：</p>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>pcs&nbsp;resource&nbsp;move&nbsp;yahaha_ag_linux-clone&nbsp;wwwmssql124</code></pre>
<p data-tool="mdnice编辑器">从图看到，主要副本已经自动转移到wwwmssql124节点，使用侦听器IP也能自动连接到新的主要副本，从【select SERVERPROPERTY('ServerName')】语句的执行结果看到当前的主要副本已经是wwwmssql124节点。</p>
<p data-tool="mdnice编辑器">集群的控制台面板如下</p>
<p data-tool="mdnice编辑器"><img src="https://img2024.cnblogs.com/blog/257159/202501/257159-20250121164339009-203066941.png" alt="" width="554" height="451"></p>
<p id="1737449019313">&nbsp;</p>
<p data-tool="mdnice编辑器">&nbsp;</p>
<p data-tool="mdnice编辑器">侦听器连接到最新的主要副本如下</p>
<p data-tool="mdnice编辑器"><img src="https://img2024.cnblogs.com/blog/257159/202501/257159-20250121164348654-1176059505.png" alt="" width="489" height="433"></p>
<p id="1737449029392">&nbsp;</p>
<p data-tool="mdnice编辑器">&nbsp;</p>
<p data-tool="mdnice编辑器">执行pcs resource命令查看当前的资源情况，pcs resource命令的结果如下：</p>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>pcs&nbsp;resource
&nbsp;&nbsp;*&nbsp;Clone&nbsp;Set:&nbsp;yahaha_ag_linux-clone&nbsp;[yahaha_ag_linux]&nbsp;(promotable):
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Promoted:&nbsp;[&nbsp;wwwmssql124&nbsp;]
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Unpromoted:&nbsp;[&nbsp;wwwmssql122&nbsp;wwwmssql128&nbsp;]
&nbsp;&nbsp;*&nbsp;ag_vip_linux&nbsp;(ocf:heartbeat:IPaddr2):&nbsp;&nbsp;Started&nbsp;wwwmssql124</code></pre>
<p data-tool="mdnice编辑器">从命令的结果看到主角色已经转移到wwwmssql124节点，AlwaysOn侦听器资源也已经绑定到wwwmssql124节点。</p>
<ul data-tool="mdnice编辑器">
<li><strong>数据库自动故障转移测试</strong></li>
</ul>
<p data-tool="mdnice编辑器">接下来演示强制将wwwmssql124节点关机，以便查看自动故障转移的情况，这里需要注意的是，自动故障转移也是只能转移到【同步提交模式的辅助副本】，在【wwwmssql124】节点上执行以下命令：</p>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>poweroff</code></pre>
<p data-tool="mdnice编辑器">从图看到，主要副本已经自动转移到wwwmssql122节点，使用侦听器IP也能自动连接到新的主要副本，从【select SERVERPROPERTY('ServerName')】语句的执行结果看到当前的主要副本已经是wwwmssql122节点，自动故障转移是非常成功的。</p>
<p data-tool="mdnice编辑器">集群的控制台面板如下</p>
<p data-tool="mdnice编辑器"><img src="https://img2024.cnblogs.com/blog/257159/202501/257159-20250121164358905-704720305.png" alt="" width="710" height="567"></p>
<p id="1737449039699">&nbsp;</p>
<p data-tool="mdnice编辑器">&nbsp;</p>
<p data-tool="mdnice编辑器">侦听器连接到最新的主要副本如下&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/257159/202501/257159-20250121164406365-778245306.png" alt="" width="717" height="669"></p>
<p id="1737449046832">&nbsp;</p>
<p>&nbsp;</p>
<p data-tool="mdnice编辑器">执行pcs resource命令查看当前的资源情况，pcs resource命令的结果如下：</p>
<pre class="custom highlighter-hljs" data-tool="mdnice编辑器"><code>pcs&nbsp;resource
&nbsp;&nbsp;*&nbsp;Clone&nbsp;Set:&nbsp;yahaha_ag_linux-clone&nbsp;[yahaha_ag_linux]&nbsp;(promotable):
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Promoted:&nbsp;[&nbsp;wwwmssql122&nbsp;]
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Unpromoted:&nbsp;[&nbsp;wwwmssql128&nbsp;]
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Stopped:&nbsp;[&nbsp;wwwmssql124&nbsp;]
&nbsp;&nbsp;*&nbsp;ag_vip_linux&nbsp;(ocf:heartbeat:IPaddr2):&nbsp;&nbsp;Started&nbsp;wwwmssql122</code></pre>
<p data-tool="mdnice编辑器">从命令的结果看到主角色已经转移到wwwmssql122节点，AlwaysOn侦听器资源也已经绑定到wwwmssql122节点，wwwmssql124节点已经不可用。从当前的测试结果来看，无论是【手动故障转移】还是【自动故障转移】都非常顺利和丝滑，跟在Windows平台上的数据库故障转移体验是完全一样的。</p>
<p data-tool="mdnice编辑器">&nbsp;</p>
<h3>总结</h3>
<p>本文介绍了在Linux环境下为SQL Server数据库的AlwaysOn集群的搭建，借助Pacemaker集群的强大能力为数据库高可用保驾护航。另外，Linux环境下的AlwaysOn集群除了Pacemaker之外还可以使用其他的集群技术，</p>
<p>底层的故障转移原理都是一样的。</p>
<p>&nbsp;</p>
<p>&nbsp;<img src="https://img2024.cnblogs.com/blog/257159/202408/257159-20240818100857719-1129157724.png" alt="" class="medium-zoom-image"></p>
<p>&nbsp;</p>
<p><strong>本文版权归作者所有，未经作者同意不得转载。</strong></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.1717907217685185" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-06 08:01">2025-02-06 08:00</span>&nbsp;
<a href="https://www.cnblogs.com/lyhabc">桦仔</a>&nbsp;
阅读(<span id="post_view_count">70</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18683813" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18683813);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18683813', targetLink: 'https://www.cnblogs.com/lyhabc/p/18683813/linux-pacemaker-deploy-alwayson-cluster', title: '从DNS配置到Pacemaker部署：一步步教你在Linux平台上实现AlwaysOn集群' })">举报</a>
</div>
        