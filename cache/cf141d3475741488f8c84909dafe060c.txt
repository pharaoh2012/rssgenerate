
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zjdxr-up/p/18822618" title="发布于 2025-04-13 10:28">
    <span role="heading" aria-level="2">使用java代码获取JVM信息</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>转载请注明出处：</p>
<p>　　最近在环境中定位服务问题，由于服务使用的docker部署的，且使用的docker镜像，在启动之后，容器内没有jdk相关的工具【jstat、jmap等等】；于是采用 在项目中使用java类获取jvm相关信息，以下是测试的示例：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.lang.management.ManagementFactory;  
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.lang.management.MemoryMXBean;  
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.lang.management.MemoryUsage;  
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.lang.management.GarbageCollectorMXBean;  
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.lang.management.MemoryPoolMXBean;  
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.lang.management.ThreadMXBean;  

</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.util.List;  

</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> GCInfoDemo {  
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {  
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取内存管理 bean  </span>
        MemoryMXBean memoryMXBean =<span style="color: rgba(0, 0, 0, 1)"> ManagementFactory.getMemoryMXBean();  
        MemoryUsage heapMemoryUsage </span>=<span style="color: rgba(0, 0, 0, 1)"> memoryMXBean.getHeapMemoryUsage();  
        MemoryUsage nonHeapMemoryUsage </span>=<span style="color: rgba(0, 0, 0, 1)"> memoryMXBean.getNonHeapMemoryUsage();  

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 打印内存信息  </span>
        System.out.println("Heap Memory Usage:"<span style="color: rgba(0, 0, 0, 1)">);  
        System.out.println(</span>"  Init: " + heapMemoryUsage.getInit() / (1024 * 1024) + " MB"<span style="color: rgba(0, 0, 0, 1)">);  
        System.out.println(</span>"  Used: " + heapMemoryUsage.getUsed() / (1024 * 1024) + " MB"<span style="color: rgba(0, 0, 0, 1)">);  
        System.out.println(</span>"  Committed: " + heapMemoryUsage.getCommitted() / (1024 * 1024) + " MB"<span style="color: rgba(0, 0, 0, 1)">);  
        System.out.println(</span>"  Max: " + heapMemoryUsage.getMax() / (1024 * 1024) + " MB"<span style="color: rgba(0, 0, 0, 1)">);  
        
        System.out.println(</span>"\nNon-Heap Memory Usage:"<span style="color: rgba(0, 0, 0, 1)">);  
        System.out.println(</span>"  Init: " + nonHeapMemoryUsage.getInit() / (1024 * 1024) + " MB"<span style="color: rgba(0, 0, 0, 1)">);  
        System.out.println(</span>"  Used: " + nonHeapMemoryUsage.getUsed() / (1024 * 1024) + " MB"<span style="color: rgba(0, 0, 0, 1)">);  
        System.out.println(</span>"  Committed: " + nonHeapMemoryUsage.getCommitted() / (1024 * 1024) + " MB"<span style="color: rgba(0, 0, 0, 1)">);  
        System.out.println(</span>"  Max: " + nonHeapMemoryUsage.getMax() / (1024 * 1024) + " MB"<span style="color: rgba(0, 0, 0, 1)">);  

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取垃圾回收回收器 bean 的列表  </span>
        List&lt;GarbageCollectorMXBean&gt; gcBeans =<span style="color: rgba(0, 0, 0, 1)"> ManagementFactory.getGarbageCollectorMXBeans();  
        System.out.println(</span>"\nGarbage Collectors:"<span style="color: rgba(0, 0, 0, 1)">);  
        </span><span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> (GarbageCollectorMXBean gcBean : gcBeans) {  
            System.out.println(</span>"  Name: " +<span style="color: rgba(0, 0, 0, 1)"> gcBean.getName());  
            System.out.println(</span>"  Number of collections: " +<span style="color: rgba(0, 0, 0, 1)"> gcBean.getCollectionCount());  
            System.out.println(</span>"  Total time spent in collections: " + gcBean.getCollectionTime() + " ms"<span style="color: rgba(0, 0, 0, 1)">);  
        }  

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 打印内存池信息  </span>
        System.out.println("\nMemory Pools:"<span style="color: rgba(0, 0, 0, 1)">);  
        </span><span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> (MemoryPoolMXBean memoryPool : ManagementFactory.getMemoryPoolMXBeans()) {  
            System.out.println(</span>"  Name: " +<span style="color: rgba(0, 0, 0, 1)"> memoryPool.getName());  
            System.out.println(</span>"  Usage: " +<span style="color: rgba(0, 0, 0, 1)"> memoryPool.getUsage());  
        }  

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取线程管理 bean  </span>
        ThreadMXBean threadMXBean =<span style="color: rgba(0, 0, 0, 1)"> ManagementFactory.getThreadMXBean();  
        
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取所有线程 ID  </span>
        <span style="color: rgba(0, 0, 255, 1)">long</span>[] threadIds =<span style="color: rgba(0, 0, 0, 1)"> threadMXBean.getAllThreadIds();  
        System.out.println(</span>"\nThreads Information:"<span style="color: rgba(0, 0, 0, 1)">);  
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">long</span><span style="color: rgba(0, 0, 0, 1)"> threadId : threadIds) {  
            System.out.println(</span>"  Thread ID: " +<span style="color: rgba(0, 0, 0, 1)"> threadId);  
            System.out.println(</span>"  Thread Name: " +<span style="color: rgba(0, 0, 0, 1)"> threadMXBean.getThreadInfo(threadId).getThreadName());  
            System.out.println(</span>"  Thread State: " +<span style="color: rgba(0, 0, 0, 1)"> threadMXBean.getThreadInfo(threadId).getThreadState());  
        }  

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 检查死锁线程  </span>
        <span style="color: rgba(0, 0, 255, 1)">long</span>[] deadlockedThreads =<span style="color: rgba(0, 0, 0, 1)"> threadMXBean.findDeadlockedThreads();  
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (deadlockedThreads != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">) {  
            System.out.println(</span>"\nDeadlocked Threads:"<span style="color: rgba(0, 0, 0, 1)">);  
            </span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">long</span><span style="color: rgba(0, 0, 0, 1)"> deadlockedThreadId : deadlockedThreads) {  
                System.out.println(</span>"  Deadlocked Thread ID: " +<span style="color: rgba(0, 0, 0, 1)"> deadlockedThreadId);  
                System.out.println(</span>"  Thread Name: " +<span style="color: rgba(0, 0, 0, 1)"> threadMXBean.getThreadInfo(deadlockedThreadId).getThreadName());  
            }  
        } </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {  
            System.out.println(</span>"\nNo deadlocked threads found."<span style="color: rgba(0, 0, 0, 1)">);  
        }  
    }  
}  </span></pre>
</div>
<ol start="1">
<li>
<p><strong>获取GC信息</strong></p>
<ul>
<li>
<p>通过<code>ManagementFactory.getGarbageCollectorMXBeans()</code>获取所有垃圾回收器的监控Bean。</p>
</li>
<li>
<p>每个<code>GarbageCollectorMXBean</code>提供：</p>
<ul>
<li>
<p><code>getName()</code>：GC算法名称（如<code>G1 Young Generation</code>）</p>
</li>
<li>
<p><code>getCollectionCount()</code>：回收次数</p>
</li>
<li>
<p><code>getCollectionTime()</code>：累计耗时（毫秒）</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>　　&nbsp;<strong> 2.打印当前线程信息：</strong></p>
<ol>
<li style="list-style-type: none">
<ul>
<li>使用&nbsp;<code>ThreadMXBean</code>&nbsp;获取当前线程的所有 ID，并通过&nbsp;<code>getThreadInfo</code>&nbsp;方法获取每个线程的信息，包括线程名字和状态。</li>
</ul>
</li>
</ol>
<p><strong>　　&nbsp; 3.检查死锁线程：</strong></p>
<ol>
<li style="list-style-type: none">
<ul>
<li>使用&nbsp;<code>findDeadlockedThreads</code>&nbsp;方法检查 JVM 中的死锁情况。如果有死锁线程，则输出这些线程的 ID 和名称。如果没有，则输出相应的消息。</li>
</ul>
</li>
</ol>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">Heap Memory Usage:
  Init: </span>508<span style="color: rgba(0, 0, 0, 1)"> MB
  Used: </span>10<span style="color: rgba(0, 0, 0, 1)"> MB
  Committed: </span>487<span style="color: rgba(0, 0, 0, 1)"> MB
  Max: </span>7205<span style="color: rgba(0, 0, 0, 1)"> MB

Non</span>-<span style="color: rgba(0, 0, 0, 1)">Heap Memory Usage:
  Init: </span>2<span style="color: rgba(0, 0, 0, 1)"> MB
  Used: </span>4<span style="color: rgba(0, 0, 0, 1)"> MB
  Committed: </span>7<span style="color: rgba(0, 0, 0, 1)"> MB
  Max: </span>0<span style="color: rgba(0, 0, 0, 1)"> MB

Garbage Collectors:
  Name: PS Scavenge
  Number of collections: </span>0<span style="color: rgba(0, 0, 0, 1)">
  Total time spent in collections: </span>0<span style="color: rgba(0, 0, 0, 1)"> ms
  Name: PS MarkSweep
  Number of collections: </span>0<span style="color: rgba(0, 0, 0, 1)">
  Total time spent in collections: </span>0<span style="color: rgba(0, 0, 0, 1)"> ms

Memory Pools:
  Name: Code Cache
  Usage: init </span>= 2555904(2496K) used = 1235968(1207K) committed = 2555904(2496K) max = 251658240<span style="color: rgba(0, 0, 0, 1)">(245760K)
  Name: Metaspace
  Usage: init </span>= 0(0K) used = 3597432(3513K) committed = 4980736(4864K) max = -1(-<span style="color: rgba(0, 0, 0, 1)">1K)
  Name: Compressed Class Space
  Usage: init </span>= 0(0K) used = 392584(383K) committed = 524288(512K) max = 1073741824<span style="color: rgba(0, 0, 0, 1)">(1048576K)
  Name: PS Eden Space
  Usage: init </span>= 133169152(130048K) used = 10914704(10658K) committed = 133169152(130048K) max = 2789212160<span style="color: rgba(0, 0, 0, 1)">(2723840K)
  Name: PS Survivor Space
  Usage: init </span>= 22020096(21504K) used = 0(0K) committed = 22020096(21504K) max = 22020096<span style="color: rgba(0, 0, 0, 1)">(21504K)
  Name: PS Old Gen
  Usage: init </span>= 355467264(347136K) used = 0(0K) committed = 355467264(347136K) max = 5666504704<span style="color: rgba(0, 0, 0, 1)">(5533696K)

Threads Information:
  Thread ID: </span>6<span style="color: rgba(0, 0, 0, 1)">
  Thread Name: Monitor Ctrl</span>-<span style="color: rgba(0, 0, 0, 1)">Break
  Thread State: RUNNABLE
  Thread ID: </span>5<span style="color: rgba(0, 0, 0, 1)">
  Thread Name: Attach Listener
  Thread State: RUNNABLE
  Thread ID: </span>4<span style="color: rgba(0, 0, 0, 1)">
  Thread Name: Signal Dispatcher
  Thread State: RUNNABLE
  Thread ID: </span>3<span style="color: rgba(0, 0, 0, 1)">
  Thread Name: Finalizer
  Thread State: WAITING
  Thread ID: </span>2<span style="color: rgba(0, 0, 0, 1)">
  Thread Name: Reference Handler
  Thread State: WAITING
  Thread ID: </span>1<span style="color: rgba(0, 0, 0, 1)">
  Thread Name: main
  Thread State: RUNNABLE

No deadlocked threads found.

Process finished with exit code </span>0</pre>
</div>
<p>&nbsp;</p>
<p><strong>&nbsp;</strong></p>
<p>&nbsp;</p>
<p>　　</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.4149530004560185" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-13 10:29">2025-04-13 10:28</span>&nbsp;
<a href="https://www.cnblogs.com/zjdxr-up">香吧香</a>&nbsp;
阅读(<span id="post_view_count">25</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18822618);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18822618', targetLink: 'https://www.cnblogs.com/zjdxr-up/p/18822618', title: '使用java代码获取JVM信息' })">举报</a>
</div>
        