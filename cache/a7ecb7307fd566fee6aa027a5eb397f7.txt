
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/henjay724/p/18868368" title="发布于 2025-05-09 16:07">
    <span role="heading" aria-level="2">痞子衡嵌入式：不处理i.MXRT1064片内Flash的RESET#引脚可能会导致无法启动或程序跑飞</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<hr>
<p>　　大家好，我是痞子衡，是正经搞技术的痞子。今天痞子衡给大家介绍的是<strong>i.MXRT1064片内Flash的RESET#引脚对程序启动和运行的影响</strong>。</p>
<p>　　上一篇文章 <a href="https://www.cnblogs.com/henjay724/p/18860608" target="_blank">《i.MXRT1024/1064片内4MB Flash的SFDP表易丢失导致的烧录异常》</a> 痞子衡带大家初步了解了 i.MXRT 上片内合封的 4MB Flash，合封 Flash 方式一般来说比外挂方式要省事省心，但前提是你充分了解了它的合封方式、信号连接等细节。如果对这些细节没有完全掌握，合封就像是一个黑盒子，还真不一定就比外挂可靠。</p>
<p>　　近期另有一个 RT1064 客户反馈，产品在运行过程中会发生极小概率的宕机，分析发现宕机时（不断电情况下）内部 Flash 读回的程序数据竟然全是 0x00，看起来 Flash 内容被篡改了，但是重新上电又能正常工作，这是怎么回事？今天痞子衡就和大家聊聊这个话题：</p>
<blockquote>
<ul>
<li>Note：本文所述问题仅在 RT1064 上发生，不存在于 RT1024 上。</li>
</ul>
</blockquote>
<h3 id="一rt10241064片内flash连接差异">一、RT1024/1064片内Flash连接差异</h3>
<h4 id="11-w25q32jv不同封装">1.1 W25Q32JV不同封装</h4>
<p>　　我们知道 RT1024/RT1064 内部合封得是 Winbond W25Q32JV 裸 Die，而 W25Q32JV 作为单独产品售卖时实际上提供了非常多的封装形式，这其中我们最熟悉得是经典的 8 个引脚的 SOIC-8 208-mil 封装。</p>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/cnblogs/i.MXRT1064_SIP_Flash_RESET_pin_W25Q32_pkgs.png" alt="" loading="lazy"></p>
<p>　　从 W25Q32JV 裸 Die 本身角度来说，其一共有 9 个信号线，在 SOIC-8 上将本该单独引出的 RESET# 信号复用到了 IO3 上（虽然这个脚本身还有一个 HOLD# 复用），而在 SOIC-16 或者 TFBGA-24 上我们就能看到这个单独的 RESET# 信号了：</p>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/cnblogs/i.MXRT1064_SIP_Flash_RESET_pin_W25Q32_soic16.png" alt="" loading="lazy"></p>
<h4 id="12-rt1024片内reset连接">1.2 RT1024片内RESET#连接</h4>
<p>　　在 RT1024 上，内部 Flash 的 RESET# 信号保留悬空（或其它处理），并没有和 RT1020 之间有信号连接，这里 GPIO_AD_B1_13 被着重强调，是因为 RT1024 BootROM 会根据 efuse 配置情况控制这个 I/O 来复位 Flash（显然这里是无效的）。</p>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/cnblogs/i.MXRT1064_SIP_Flash_RESET_pin_RT1024.png" alt="" loading="lazy"></p>
<h4 id="13-rt1064片内reset连接">1.3 RT1064片内RESET#连接</h4>
<p>　　在 RT1064 上，内部 Flash 的 RESET# 信号被连接到了 RT1060 内部信号 GPIO_SPI_B0_13 上，当然 RT1064 BootROM 也会根据 efuse 配置情况控制这个 I/O 来复位 Flash（这时就会产生一定作用）。</p>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/cnblogs/i.MXRT1064_SIP_Flash_RESET_pin_RT1064.png" alt="" loading="lazy"></p>
<h3 id="二不处理片内flash-reset信号带来的风险">二、不处理片内Flash RESET#信号带来的风险</h3>
<p>　　在痞子衡旧文 <a href="https://www.cnblogs.com/henjay724/p/14086265.html" target="_blank">《深入i.MXRT系列ROM中串行NOR Flash启动初始化流程》</a> 一文 <strong>2.1 复位Flash芯片</strong> 小节里，我们知道如果 efuse 里 RESET# 相关 bit 被烧写使能后，RT1064 BootROM 才会初始化 GPIO_SPI_B0_13 引脚为 GPIO 输出模式，并且拉低拉高一次来复位 Flash，等复位结束 GPIO_SPI_B0_13 会保持高电平输出。</p>
<pre><code class="language-text">// RT1064 上 RESET# 相关的 fuse
fuse 0x6e0[7]  - FLEXSPI_RESET_PIN_EN
        0 - Disable
        1 - Enable

fuse 0x6e0[31] - FLEXSPI_RESET_PIN_SEL
        0 - GPIO_SPI_B0_00
        1 - GPIO_SPI_B0_13
</code></pre>
<p>　　但是默认情况下，RT1064 芯片出厂以及客户都不会去烧写跟这个 RESET# 相关的 efuse，这意味着 GPIO_SPI_B0_13 内部引脚会一直保持上电默认状态，那么默认是什么状态呢？这从 IOMUXC_SW_PAD_CTL_PAD_GPIO_SPI_B0_13 寄存器默认值 0x10B0 可以得知其为输入 Keeper 状态。</p>
<p>　　我们知道 RESET# 信号对 Flash 来说也是输入（从 Winbond 技术人员处得知，该信号内部有 280K 欧姆上拉），两个引脚相连，各自都是输入状态，显然有点不太可靠。说一种极端情况，芯片上电过程中，在 Flash 端弱上拉对 RESET# 作用让电压爬升到有效高电平 VCC x 0.7 之前，RT1060 的 GPIO_SPI_B0_13 端输入 Keeper 状态先产生作用，这时就会产生一个弱下拉，由于不同芯片的器件特性差异，这里的弱上拉/下拉都存在一定的误差范围，最终极有可能导致 RESET# 电平处于中间不定态。此外哪怕芯片上电过程中没问题，实际运行中，由于片内温度电磁环境等各方面因素，导致 RESET# 信号发生翻转，对 XIP 程序运行稳定性也是毁灭性打击。</p>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/cnblogs/i.MXRT1064_SIP_Flash_RESET_pin_SPI_B0_13_cfg.png" alt="" loading="lazy"></p>
<h3 id="三解决reset信号稳定性的方案">三、解决RESET#信号稳定性的方案</h3>
<p>　　为了验证 GPIO_SPI_B0_13 信号状态对于 RT1064 影响，痞子衡在测试 SFDP 工程里加上了这个信号的控制，当 GPIO_SPI_B0_13 输出为低时，即 Flash RESET# 处于有效状态，此时 Flash SFDP 都不能正常读出，更别提内存数据读取操作了。</p>
<blockquote>
<ul>
<li>烧录SFDP工程：<a href="https://github.com/JayHeng/func-imxrt-sip-flash-sfdp-check" target="_blank" rel="noopener nofollow">https://github.com/JayHeng/func-imxrt-sip-flash-sfdp-check</a></li>
</ul>
</blockquote>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/cnblogs/i.MXRT1064_SIP_Flash_RESET_pin_RT1064_test.png" alt="" loading="lazy"></p>
<p>　　那么该如何解决这个问题呢？上述原理知道后，其实方法就特别简单了：</p>
<blockquote>
<ul>
<li>解决启动问题：烧写 fuse 0x6e0[31,7] 两个位，让 BootROM 去初始化 GPIO_SPI_B0_13 引脚。（大约增加 750us 启动时间）</li>
<li>解决跑飞问题：假如芯片没有启动问题，但你不想额外烧写 fuse，那么 XIP App 运行起来后第一件事就是初始化 GPIO_SPI_B0_13 为 GPIO 输出模式，并且设为高电平。（为了可靠性，这部分代码可以 RAMFUNC 运行）</li>
</ul>
</blockquote>
<p>　　至此，不处理i.MXRT1064片内Flash的RESET#引脚可能会导致无法启动或程序跑飞痞子衡便介绍完毕了，掌声在哪里~~~</p>
<h3 id="欢迎订阅">欢迎订阅</h3>
<p>文章会同时发布到我的 <a href="https://www.cnblogs.com/henjay724/" target="_blank">博客园</a>、<a href="https://blog.csdn.net/henjay724" target="_blank" rel="noopener nofollow">CSDN</a>、<a href="http://weixin.sogou.com/weixin?type=1&amp;query=%E7%97%9E%E5%AD%90%E8%A1%A1%E5%B5%8C%E5%85%A5%E5%BC%8F" target="_blank" rel="noopener nofollow">微信公众号</a>、<a href="https://www.zhihu.com/people/henjay724" target="_blank" rel="noopener nofollow">知乎</a>、<a href="https://www.eefocus.com/user/3876937/article/" target="_blank" rel="noopener nofollow">与非网</a>、<a href="https://blog.chinaaet.com/henjay724" target="_blank" rel="noopener nofollow">电子技术应用AET</a>、<a href="https://www.dianyuan.com/people/912268" target="_blank" rel="noopener nofollow">电子星球</a>、<a href="https://blog.51cto.com/henjay724" target="_blank" rel="noopener nofollow">51CTO</a> 平台上。</p>
<p>微信搜索"<strong>痞子衡嵌入式</strong>"或者扫描下面二维码，就可以在手机上第一时间看了哦。</p>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/github/pzhMcu_qrcode_258x258.jpg" alt="" loading="lazy"></p>

</div>
<div id="MySignature" role="contentinfo">
    <div class="autograph"> 
  <p style="font-family: 楷体; font-size: 15px">&nbsp;&nbsp;最后欢迎关注痞子衡个人微信公众号【痞子衡嵌入式】，一个专注嵌入式技术的公众号，跟着痞子衡一起玩转嵌入式。</p>

  <img style="float: left" src="https://img2022.cnblogs.com/blog/623659/202211/623659-20221116165755872-427238307.jpg" alt="痞子衡嵌入式-微信二维码" class="img_avatar">

  <img style="float: right" src="http://henjay724.com/image/cnblogs/baogeMcu_payment_wechat_150x150.png" alt="痞子衡嵌入式-微信收款二维码" class="img_avatar">

  <img style="float: right" src="http://henjay724.com/image/cnblogs/baogeMcu_payment_alipay_150x150.jpg" alt="痞子衡嵌入式-支付宝收款二维码" class="img_avatar">

<br>
  <p>&nbsp;&nbsp;衡杰(痞子衡)，目前就职于某全球顶级半导体原厂MCU系统部门，担任高级嵌入式系统应用工程师。</p>

  <p>&nbsp;&nbsp;专栏内所有文章的转载请注明出处：<a href="http://www.cnblogs.com/henjay724/" target="_blank">http://www.cnblogs.com/henjay724/</a></p>

  <p>&nbsp;&nbsp;与痞子衡进一步交流或咨询业务合作请发邮件至 <a href="hengjie1989@foxmail.com" target="_blank">hengjie1989@foxmail.com</a></p>

  <p>&nbsp;&nbsp;可以关注痞子衡的Github主页 <a href="https://github.com/JayHeng" target="_blank">https://github.com/JayHeng</a>，有很多好玩的嵌入式项目。</p>

  <p><font color="yellow">&nbsp;&nbsp;关于专栏文章有任何疑问请直接在博客下面留言，痞子衡会及时回复免费(划重点)答疑。</font></p>

  <p><font color="red">&nbsp;&nbsp;痞子衡邮箱已被私信挤爆，技术问题不推荐私信，坚持私信请先扫码付款(5元起步)再发。</font></p>
<br>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.3428648242708333" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-09 16:07">2025-05-09 16:07</span>&nbsp;
<a href="https://www.cnblogs.com/henjay724">痞子衡</a>&nbsp;
阅读(<span id="post_view_count">26</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18868368);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18868368', targetLink: 'https://www.cnblogs.com/henjay724/p/18868368', title: '痞子衡嵌入式：不处理i.MXRT1064片内Flash的RESET#引脚可能会导致无法启动或程序跑飞' })">举报</a>
</div>
        