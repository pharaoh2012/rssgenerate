
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/TonyCode/p/18881341" title="发布于 2025-05-17 16:49">
    <span role="heading" aria-level="2">重构：  面对类结构相似的，重复创造类脚本的解决方法之一</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>面对类结构相似的，重复创造类脚本的解决方法。</p>
<p>实战：</p>
<p>笔者在开发一款农场类游戏，在做种植相关的挑战系统时，随着植物种类的增多，与植物相关的挑战成本增多，若对每个挑战都创建一个脚本未尝觉得有些麻烦，我想能否像给一个数组赋值那样子，来统一配置挑战内容和编写挑战相关的逻辑的方法呢？</p>
<p>答案自然是肯定的！</p>
<p>我们可以把挑战脚本看作数组的元素，一种数据结构，我们只要在数组声明时候进行逐个赋值即可</p>
<p>对于Challenge.cs脚本内容，我们可以知道，成员变量可以直接赋值，可是函数体中的函数逻辑该如何在外部赋值呢？当然可以使用委托来进行！</p>
<p>好，下面看两个挑战脚本内容，然后尝试来实现最初的想法：像数组赋值那样，在外部直接新建挑战类型对象，以方便快速开发！</p>
<p><img src="https://img2024.cnblogs.com/blog/3292471/202505/3292471-20250517164525429-1939332944.png" alt="image" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3292471/202505/3292471-20250517164540745-1560963526.png" alt="image" loading="lazy"></p>
<p>来看一下他们的父类：</p>
<p><img src="https://img2024.cnblogs.com/blog/3292471/202505/3292471-20250517164553643-957980633.png" alt="image" loading="lazy"></p>
<p>挑战脚本的内容比较简单，为此我们可以使用几个委托来分别完成对不同函数的“等效赋值”操作；</p>
<p>从下面代码内容可以看到，在外部逻辑调用判断挑战是否开始、结束、达标的函数时候，便会执行</p>
<p>委托，此时在外部赋值的委托中的函数便会执行. 使用委托来解决函数逻辑的脚本外部赋值问题。</p>
<p><img src="https://img2024.cnblogs.com/blog/3292471/202505/3292471-20250517164605971-880969934.png" alt="image" loading="lazy"></p>
<p>先看成员变量：</p>
<p>这里主要使用委托来对函数进行“赋值”，实现在外界直接给新创建的类对象赋值。</p>
<p><img src="https://img2024.cnblogs.com/blog/3292471/202505/3292471-20250517164624832-1225549339.png" alt="image" loading="lazy"></p>
<p>再看下给外部链式赋值的赋值方法：</p>
<p><img src="https://img2024.cnblogs.com/blog/3292471/202505/3292471-20250517164659298-955558965.png" alt="image" loading="lazy"></p>
<p>这样在外部可以直链式的配置Challenge内容：</p>
<p><img src="https://img2024.cnblogs.com/blog/3292471/202505/3292471-20250517164715283-718579303.png" alt="image" loading="lazy"></p>
<p>对比之前的逐个挑战脚本的开发，降低了重复代码脚本内容，适合快速开发！</p>
<p>之前每新增一个挑战都需要新建一个对应的脚本，比较繁琐。</p>
<p><img src="https://img2024.cnblogs.com/blog/3292471/202505/3292471-20250517164724210-1324425201.png" alt="image" loading="lazy"></p>
<p>ok，至此通过解决一个函数逻辑外部赋值的问题（使用委托），来完成对多重复的逻辑挑战内容快速开发！当然，在这里也使用链式赋值的方法，保持代码的简洁性，帮助我们快速初始化挑战内容。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.39551938448726853" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-17 16:49">2025-05-17 16:49</span>&nbsp;
<a href="https://www.cnblogs.com/TonyCode">畅知</a>&nbsp;
阅读(<span id="post_view_count">10</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18881341);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18881341', targetLink: 'https://www.cnblogs.com/TonyCode/p/18881341', title: '重构：  面对类结构相似的，重复创造类脚本的解决方法之一' })">举报</a>
</div>
        