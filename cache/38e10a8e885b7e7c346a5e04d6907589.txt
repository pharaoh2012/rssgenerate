<!----> <meta itemprop="headline" content="用了三年 Vue，我终于理解为什么“组件设计”才是重灾区"> <meta itemprop="keywords" content="JavaScript,前端,Vue.js"> <meta itemprop="datePublished" content="2025-06-13T02:17:24.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="ErpanOmer"> <meta itemprop="url" content="https://juejin.cn/user/3878732754331096"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-61fb5e44="">
            用了三年 Vue，我终于理解为什么“组件设计”才是重灾区
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-61fb5e44=""><div class="author-info-box" data-v-61fb5e44=""><div class="author-name" data-v-61fb5e44=""><a href="/user/3878732754331096/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-292f6e48="" data-v-61fb5e44=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-292f6e48="">
    ErpanOmer
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-61fb5e44=""><time datetime="2025-06-13T02:17:24.000Z" title="Fri Jun 13 2025 02:17:24 GMT+0000 (Coordinated Universal Time)" class="time" data-v-61fb5e44="">
                    2025-06-13
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-61fb5e44=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-61fb5e44=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-61fb5e44=""></circle></svg> <span class="views-count" data-v-61fb5e44="">
                    17,442
                  </span> <span class="read-time" data-v-61fb5e44=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-61fb5e44=""><rect width="16" height="16" fill="none" data-v-61fb5e44=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-61fb5e44=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-61fb5e44=""></path></svg>
                    阅读3分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-61fb5e44=""></div> <!----> <!----></div> <!----> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-61fb5e44=""><div class="article-viewer markdown-body result"><blockquote>
<p>一开始写 Vue 的时候，谁不是觉得：“哇，组件好优雅！”三年后再回头一看，组件目录像垃圾堆，维护一处改三处，props 乱飞、事件满天飞，复用全靠 copy paste。于是我终于明白 —— <strong>组件设计，才是 Vue 项目的重灾区</strong>。</p>
</blockquote>
<hr>
<h2 data-id="heading-0">1. 抽组件 ≠ 拆文件夹</h2>
<p>很多初学 Vue 的人对“组件化”的理解就是：“页面上出现重复的 UI？好，抽个组件。”</p>
<p>于是你会看到这样的组件：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-comment">&lt;!-- TextInput.vue --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"value"</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">"$emit('update:value', $event.target.value)"</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
</code></pre>
<p>接着你又遇到需要加图标的输入框，于是复制一份：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-comment">&lt;!-- IconTextInput.vue --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-text-input"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"icon"</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"value"</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">"$emit('update:value', $event.target.value)"</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
</code></pre>
<p>再后来你需要加验证、loading、tooltip……结果就变成了：</p>
<ul>
<li><code>TextInput.vue</code></li>
<li><code>IconTextInput.vue</code></li>
<li><code>ValidatableInput.vue</code></li>
<li><code>LoadingInput.vue</code></li>
<li><code>FormInput.vue</code></li>
</ul>
<p>组件爆炸式增长，但每一个都只是“刚好凑合”，共用不了。</p>
<hr>
<h2 data-id="heading-1">2. 抽象失控：为了复用而复用，结果没人敢用</h2>
<p>比如下面这个场景：</p>
<p>你封装了一个超级复杂的表格组件：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">CustomTable</span>
  <span class="hljs-attr">:columns</span>=<span class="hljs-string">"columns"</span>
  <span class="hljs-attr">:data</span>=<span class="hljs-string">"tableData"</span>
  <span class="hljs-attr">:show-expand</span>=<span class="hljs-string">"true"</span>
  <span class="hljs-attr">:enable-pagination</span>=<span class="hljs-string">"true"</span>
  <span class="hljs-attr">:custom-actions</span>=<span class="hljs-string">"['edit', 'delete']"</span>
/&gt;</span>
</code></pre>
<p>你美其名曰“通用组件”，但别人拿去一用就发现：</p>
<ul>
<li>某个页面只要展示，不要操作按钮，配置了也没法删；</li>
<li>有个页面需要自定义排序逻辑，你这边死写死；</li>
<li>另一个页面用 element-plus 的样式，这边你自绘一套 UI；</li>
<li>报错时控制台输出一大堆 warning，根本不知道哪来的。</li>
</ul>
<p>最后大家的做法就是 —— <strong>不用你这套“通用组件”，自己抄一份改改</strong>。</p>
<hr>
<h2 data-id="heading-2">3. 数据向下流、事件向上传：你真的理解 props 和 emit 吗？</h2>
<p>Vue 的单向数据流原则说得很清楚：</p>
<blockquote>
<p>父组件通过 props 向下传数据，子组件通过 emit 通知父组件。</p>
</blockquote>
<p>但现实是：</p>
<ul>
<li>props 传了 7 层，页面逻辑根本看不懂数据哪来的；</li>
<li>子组件 emit 了两个 event，父组件又传回了回调函数；</li>
<li>有时候干脆直接用 <code>inject/provide</code>、<code>ref</code>、<code>eventBus</code> 偷偷打通通信。</li>
</ul>
<p>举个例子：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-comment">&lt;!-- 祖父组件 --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">PageWrapper</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">ChildComponent</span> <span class="hljs-attr">:formData</span>=<span class="hljs-string">"form"</span> @<span class="hljs-attr">submit</span>=<span class="hljs-string">"handleSubmit"</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">PageWrapper</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-comment">&lt;!-- 子组件 --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">Form</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">"formData"</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"$emit('submit', formData)"</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
</code></pre>
<p>看上去还好？但当 <code>ChildComponent</code> 再包一层 <code>FormWrapper</code>、再嵌套 <code>InputList</code>，你就发现：</p>
<ul>
<li><code>formData</code> 根本不知道是哪个组件控制的</li>
<li><code>submit</code> 被多层包装、debounce、防抖、节流、劫持</li>
<li>你改一个按钮逻辑，要翻 4 个文件</li>
</ul>
<hr>
<h2 data-id="heading-3">4. 技术债爆炸的罪魁祸首：不敢删、不敢动</h2>
<p>组件目录看似整齐，但大部分组件都有如下特征：</p>
<ul>
<li>有 10 个 props，3 个事件，但没人知道谁在用；</li>
<li>注释写着“用于 A 页面”，实际上 B、C、D 页面也在引用；</li>
<li>一个小改动能引发“蝴蝶效应”，整个系统发疯。</li>
</ul>
<p>于是你只能选择 —— 拷贝再新建一个组件，给它加个 <code>V2</code> 后缀，然后老的你也不敢删。</p>
<p>项目后期的结构大概就是：</p>
<pre><code class="hljs language-css" lang="css">components/
├── <span class="hljs-selector-tag">Input</span><span class="hljs-selector-class">.vue</span>
├── InputV2<span class="hljs-selector-class">.vue</span>
├── InputWithTooltip<span class="hljs-selector-class">.vue</span>
├── InputWithValidation<span class="hljs-selector-class">.vue</span>
├── InputWithValidationV2<span class="hljs-selector-class">.vue</span>
└── ...
</code></pre>
<p><strong>“为了让别人能维护我的代码，我决定不动它。”</strong></p>
<hr>
<h2 data-id="heading-4">5. 组件设计的核心，其实是<strong>抽象能力</strong></h2>
<p>我用三年才悟到一个道理：</p>
<blockquote>
<p>Vue 组件设计的难点，不是语法、也不是封装，而是你有没有<strong>抽象问题的能力</strong>。</p>
</blockquote>
<h3 data-id="heading-5">举个例子：</h3>
<p>你需要设计一个“搜索区域”组件，包含输入框 + 日期范围 + 搜索按钮。</p>
<p>新手写法：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">SearchHeader</span>
  <span class="hljs-attr">:keyword</span>=<span class="hljs-string">"keyword"</span>
  <span class="hljs-attr">:startDate</span>=<span class="hljs-string">"start"</span>
  <span class="hljs-attr">:endDate</span>=<span class="hljs-string">"end"</span>
  @<span class="hljs-attr">search</span>=<span class="hljs-string">"handleSearch"</span>
/&gt;</span>
</code></pre>
<p>页面需求一改，换成了下拉框 + 单选框怎么办？又封一个组件？</p>
<p>更好的设计是 —— 提供<strong>slots 插槽</strong> + <strong>作用域插槽</strong>：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-comment">&lt;!-- SearchHeader.vue --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"search-header"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"form"</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"$emit('search')"</span>&gt;</span>搜索<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-comment">&lt;!-- 使用 --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">SearchHeader</span> @<span class="hljs-attr">search</span>=<span class="hljs-string">"search"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">form</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"keyword"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入关键词"</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">el-date-picker</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"range"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"daterange"</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">SearchHeader</span>&gt;</span>
</code></pre>
<p><strong>把结构交给组件，把行为交给页面。组件不掌控一切，而是协作。</strong></p>
<hr>
<h2 data-id="heading-6">6. 那么组件怎么设计才对？</h2>
<p>我总结出 3 条简单但有效的建议：</p>
<h3 data-id="heading-7">✅ 1. 明确组件职责：UI？交互？逻辑？</h3>
<ul>
<li>UI 组件只关心展示，比如按钮、标签、卡片；</li>
<li>交互组件只封装用户操作，比如输入框、选择器；</li>
<li>逻辑组件封装业务规则，比如筛选区、分页器。</li>
</ul>
<p>别让一个组件又画 UI 又写逻辑还请求接口。</p>
<hr>
<h3 data-id="heading-8">✅ 2. 精简 props 和 emit，只暴露“必需”的接口</h3>
<ul>
<li>一个组件 props 超过 6 个，要小心；</li>
<li>如果事件名不具备业务语义（比如 <code>click</code>），考虑抽象；</li>
<li>不要用 <code>ref</code> 操作子组件的内部逻辑，那是反模式。</li>
</ul>
<hr>
<h3 data-id="heading-9">✅ 3. 使用 slots 替代“高度定制的 props 方案”</h3>
<p>如果你发现你组件 props 变成这样：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">SuperButton</span>
  <span class="hljs-attr">:label</span>=<span class="hljs-string">"'提交'"</span>
  <span class="hljs-attr">:icon</span>=<span class="hljs-string">"'plus'"</span>
  <span class="hljs-attr">:iconPosition</span>=<span class="hljs-string">"'left'"</span>
  <span class="hljs-attr">:styleType</span>=<span class="hljs-string">"'primary'"</span>
  <span class="hljs-attr">:loading</span>=<span class="hljs-string">"true"</span>
/&gt;</span>
</code></pre>
<p>那它该用 slot 了：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">SuperButton</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">icon</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">PlusIcon</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
  提交
<span class="hljs-tag">&lt;/<span class="hljs-name">SuperButton</span>&gt;</span>
</code></pre>
<hr>
<h2 data-id="heading-10">🙂</h2>
<p>三年前我以为组件化是 Vue 最简单的部分，三年后我才意识到，它是最深、最难、最容易出坑的部分。</p>
<p>如果你也踩过以下这些坑：</p>
<ul>
<li>组件复用越写越复杂，别人都不敢用；</li>
<li>props 和事件像迷宫一样，维护成本极高；</li>
<li>UI 和逻辑耦合，改一点动全身；</li>
<li>项目后期组件膨胀、技术债堆积如山；</li>
</ul>
<p>别再让组件成为项目的“技术债”。你们也有遇到吗？</p>
<h3 data-id="heading-11">📌 你可以继续看我的系列文章</h3>
<ul>
<li><a href="https://juejin.cn/post/7513863217271406601" target="_blank" title="https://juejin.cn/post/7513863217271406601">《我为什么觉得 React 正在逐渐失去吸引力？》</a></li>
<li><a href="https://juejin.cn/post/7514611888991387667" target="_blank" title="https://juejin.cn/post/7514611888991387667">《低代码是“未来”还是“骗局”？作为前端我被内耗到了》</a></li>
<li><a href="https://juejin.cn/post/7512392168783659071" target="_blank" title="https://juejin.cn/post/7512392168783659071">《为什么越来越多 Vue 项目用起了 UnoCSS？》</a></li>
<li><a href="https://juejin.cn/post/7513117108114473001" target="_blank" title="https://juejin.cn/post/7513117108114473001">《用好了 defineProps 才叫会用 Vue3，90% 的写法都错了》</a></li>
<li><a href="https://juejin.cn/post/7511983823258468391" target="_blank" title="https://juejin.cn/post/7511983823258468391">《为什么我放弃使用 Pinia？》</a></li>
<li><a href="https://juejin.cn/post/7511602231508664361" target="_blank" title="https://juejin.cn/post/7511602231508664361">《为什么我不再相信 Tailwind？三个月重构项目教会我的事》</a></li>
</ul></div></div>