<!----> <meta itemprop="headline" content="做Docx预览，一定要做这个神库！！"> <meta itemprop="keywords" content="前端,JavaScript,面试"> <meta itemprop="datePublished" content="2025-04-17T00:57:54.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="独立开阀者_FwtCoder"> <meta itemprop="url" content="https://juejin.cn/user/2832797716981848"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-61fb5e44="">
            做Docx预览，一定要做这个神库！！
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-61fb5e44=""><div class="author-info-box" data-v-61fb5e44=""><div class="author-name" data-v-61fb5e44=""><a href="/user/2832797716981848/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-292f6e48="" data-v-61fb5e44=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-292f6e48="">
    独立开阀者_FwtCoder
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-61fb5e44=""><time datetime="2025-04-17T00:57:54.000Z" title="Thu Apr 17 2025 00:57:54 GMT+0000 (Coordinated Universal Time)" class="time" data-v-61fb5e44="">
                    2025-04-17
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-61fb5e44=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-61fb5e44=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-61fb5e44=""></circle></svg> <span class="views-count" data-v-61fb5e44="">
                    6,205
                  </span> <span class="read-time" data-v-61fb5e44=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-61fb5e44=""><rect width="16" height="16" fill="none" data-v-61fb5e44=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-61fb5e44=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-61fb5e44=""></path></svg>
                    阅读4分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-61fb5e44=""></div> <!----> <!----></div> <!----> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-61fb5e44=""><div class="article-viewer markdown-body result"><p>来源：沉浸式趣谈</p>
<p>只需几行代码，你就能在浏览器中完美预览 Word 文档，甚至连表格样式、页眉页脚都原汁原味地呈现出来。</p>
<p>接下来，给大家分享两个 Docx 预览的库：</p>
<h2 data-id="heading-0">docx-preview VS mammoth</h2>
<p><code>docx-preview</code>和<code>mammoth</code>是目前最流行的两个 Word 文档预览库，它们各有特色且适用于不同场景。</p>
<h3 data-id="heading-1">docx-preview：还原度爆表的选择</h3>
<p>安装简单：</p>
<pre><code class="hljs">npm install docx-preview
</code></pre>
<p>基础用法：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span>&nbsp;{ renderAsync }&nbsp;<span class="hljs-keyword">from</span>&nbsp;<span class="hljs-string">'docx-preview'</span>;

<span class="hljs-comment">// 获取到docx文件的blob或ArrayBuffer后</span>
<span class="hljs-title function_">renderAsync</span>(docData,&nbsp;<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'container'</span>)).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span>&nbsp;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'文档渲染完成！'</span>));
</code></pre>
<p>试了试后，这个库渲染出来的效果简直和 Office 打开的一模一样！连段落格式、表格样式、甚至是分页效果，都完美呈现。</p>
<h3 data-id="heading-2">mammoth：简洁至上的转换器</h3>
<p>mammoth 的思路完全不同，它把 Word 文档转成干净的 HTML：</p>
<pre><code class="hljs">npm install mammoth
</code></pre>
<p>使用也很简单：</p>
<pre><code class="hljs language-ini" lang="ini">import&nbsp;mammoth&nbsp;from&nbsp;'mammoth'<span class="hljs-comment">;</span>

mammoth.convertToHtml({&nbsp;arrayBuffer: docxBuffer }).then(<span class="hljs-attr">result</span>&nbsp;=&gt;&nbsp;{
&nbsp; &nbsp;&nbsp;document.getElementById('container').<span class="hljs-attr">innerHTML</span>&nbsp;= result.value<span class="hljs-comment">;</span>
&nbsp; &nbsp;&nbsp;console.log('转换成功，但有些警告：', result.messages)<span class="hljs-comment">;</span>
})<span class="hljs-comment">;</span>
</code></pre>
<p>转换出来的 HTML 非常干净，只保留了文档的语义结构。</p>
<p>比如，Word 中的"标题 1"样式会变成 HTML 中的<code>&lt;h1&gt;</code>标签。</p>
<h2 data-id="heading-3">哪个更适合你？</h2>
<h3 data-id="heading-4">场景一：做了个简易 Word 预览器</h3>
<p>要实现在线预览 Word 文档，且跟 "Word" 长得一模一样。</p>
<p>首选<code>docx-preview</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span>&nbsp;{ renderAsync }&nbsp;<span class="hljs-keyword">from</span><span class="hljs-string">'docx-preview'</span>;

<span class="hljs-keyword">async</span> <span class="hljs-title function_">functionpreviewDocx</span>(fileUrl) {
&nbsp; &nbsp;&nbsp;<span class="hljs-keyword">try</span>&nbsp;{
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-comment">// 获取文件</span>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-keyword">const</span>&nbsp;response =&nbsp;<span class="hljs-title function_">awaitfetch</span>(fileUrl);
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-keyword">const</span>&nbsp;docxBlob =&nbsp;<span class="hljs-keyword">await</span>&nbsp;response.<span class="hljs-title function_">blob</span>();

&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-comment">// 渲染到页面上</span>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-keyword">const</span>&nbsp;container =&nbsp;<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'docx-container'</span>);
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-title function_">awaitrenderAsync</span>(docxBlob, container,&nbsp;<span class="hljs-literal">null</span>, {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-attr">className</span>:&nbsp;<span class="hljs-string">'docx-viewer'</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-attr">inWrapper</span>:&nbsp;<span class="hljs-literal">true</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-attr">breakPages</span>:&nbsp;<span class="hljs-literal">true</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-attr">renderHeaders</span>:&nbsp;<span class="hljs-literal">true</span>,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-attr">renderFooters</span>:&nbsp;<span class="hljs-literal">true</span>,
&nbsp; &nbsp; &nbsp; &nbsp; });

&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'文档渲染成功！'</span>);
&nbsp; &nbsp; }&nbsp;<span class="hljs-keyword">catch</span>&nbsp;(error) {
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'渲染文档时出错:'</span>, error);
&nbsp; &nbsp; }
}
</code></pre>
<p>效果很赞！文档分页显示，目录、页眉页脚、表格边框样式都完美呈现。</p>
<p>不过也有些小坑：</p>
<ol>
<li>
<ol>
<li>文档特别大时，渲染速度会变慢</li>
</ol>
</li>
<li>
<ol start="2">
<li>一些复杂的 Word 功能可能显示不完美</li>
</ol>
</li>
</ol>
<h3 data-id="heading-5">场景二：做内容编辑系统</h3>
<p>需要让用户上传 Word 文档，然后提取内容进行编辑。</p>
<p>选择<code>mammoth</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span>&nbsp;mammoth&nbsp;<span class="hljs-keyword">from</span><span class="hljs-string">'mammoth'</span>;

<span class="hljs-keyword">async</span> <span class="hljs-title function_">functionextractContent</span>(file) {
&nbsp; &nbsp;&nbsp;<span class="hljs-keyword">try</span>&nbsp;{
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-comment">// 读取文件</span>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-keyword">const</span>&nbsp;arrayBuffer =&nbsp;<span class="hljs-keyword">await</span>&nbsp;file.<span class="hljs-title function_">arrayBuffer</span>();

&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-comment">// 自定义样式映射</span>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-keyword">const</span>&nbsp;options = {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-attr">styleMap</span>: [<span class="hljs-string">"p[style-name='注意事项'] =&gt; div.alert-warning"</span>,&nbsp;<span class="hljs-string">"p[style-name='重要提示'] =&gt; div.alert-danger"</span>],
&nbsp; &nbsp; &nbsp; &nbsp; };

&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-keyword">const</span>&nbsp;result =&nbsp;<span class="hljs-keyword">await</span>&nbsp;mammoth.<span class="hljs-title function_">convertToHtml</span>({ arrayBuffer }, options);
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'content'</span>).<span class="hljs-property">innerHTML</span>&nbsp;= result.<span class="hljs-property">value</span>;

&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-keyword">if</span>&nbsp;(result.<span class="hljs-property">messages</span>.<span class="hljs-property">length</span>&nbsp;&gt;&nbsp;<span class="hljs-number">0</span>) {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">'转换有些小问题:'</span>, result.<span class="hljs-property">messages</span>);
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; }&nbsp;<span class="hljs-keyword">catch</span>&nbsp;(error) {
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'转换文档失败:'</span>, error);
&nbsp; &nbsp; }
}
</code></pre>
<p>mammoth 的优点在这个场景下完全发挥出来：</p>
<ol>
<li>1.&nbsp;<strong>语义化 HTML</strong>：生成干净的 HTML 结构</li>
<li>2.&nbsp;<strong>样式映射</strong>：可以自定义 Word 样式到 HTML 元素的映射规则</li>
<li>3.&nbsp;<strong>轻量转换</strong>：处理速度非常快</li>
</ol>
<h2 data-id="heading-6">进阶技巧</h2>
<h3 data-id="heading-7">docx-preview 的进阶配置</h3>
<pre><code class="hljs language-arduino" lang="arduino"><span class="hljs-built_in">renderAsync</span>(docxBlob, container, styleContainer, {
&nbsp; &nbsp;&nbsp;className:&nbsp;<span class="hljs-string">'custom-docx'</span>,&nbsp;<span class="hljs-comment">// 自定义CSS类名前缀</span>
&nbsp; &nbsp;&nbsp;inWrapper:&nbsp;<span class="hljs-literal">true</span>,&nbsp;<span class="hljs-comment">// 是否使用包装容器</span>
&nbsp; &nbsp;&nbsp;ignoreWidth:&nbsp;<span class="hljs-literal">false</span>,&nbsp;<span class="hljs-comment">// 是否忽略页面宽度</span>
&nbsp; &nbsp;&nbsp;ignoreHeight:&nbsp;<span class="hljs-literal">false</span>,&nbsp;<span class="hljs-comment">// 是否忽略页面高度</span>
&nbsp; &nbsp;&nbsp;breakPages:&nbsp;<span class="hljs-literal">true</span>,&nbsp;<span class="hljs-comment">// 是否分页显示</span>
&nbsp; &nbsp;&nbsp;renderHeaders:&nbsp;<span class="hljs-literal">true</span>,&nbsp;<span class="hljs-comment">// 是否显示页眉</span>
&nbsp; &nbsp;&nbsp;renderFooters:&nbsp;<span class="hljs-literal">true</span>,&nbsp;<span class="hljs-comment">// 是否显示页脚</span>
&nbsp; &nbsp;&nbsp;renderFootnotes:&nbsp;<span class="hljs-literal">true</span>,&nbsp;<span class="hljs-comment">// 是否显示脚注</span>
&nbsp; &nbsp;&nbsp;renderEndnotes:&nbsp;<span class="hljs-literal">true</span>,&nbsp;<span class="hljs-comment">// 是否显示尾注</span>
&nbsp; &nbsp;&nbsp;renderComments:&nbsp;<span class="hljs-literal">true</span>,&nbsp;<span class="hljs-comment">// 是否显示评论</span>
&nbsp; &nbsp;&nbsp;useBase64URL:&nbsp;<span class="hljs-literal">false</span>,&nbsp;<span class="hljs-comment">// 使用Base64还是ObjectURL处理资源</span>
});
</code></pre>
<p>超实用技巧：如果只想把文档渲染成一整页（不分页），只需设置<code>breakPages: false</code>！</p>
<h3 data-id="heading-8">mammoth 的自定义图片处理</h3>
<p>默认情况下，mammoth 会把图片转成 base64 嵌入 HTML。</p>
<p>在大型文档中，这会导致 HTML 特别大。</p>
<p>更好的方案：</p>
<pre><code class="hljs language-ini" lang="ini">const&nbsp;<span class="hljs-attr">options</span> = {
&nbsp; &nbsp;&nbsp;convertImage: mammoth.images.imgElement(function&nbsp;(image) {
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;return&nbsp;image.readAsArrayBuffer().then(function&nbsp;(imageBuffer) {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;// 创建blob URL而不是base64
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;const&nbsp;<span class="hljs-attr">blob</span> =&nbsp;newBlob([imageBuffer], {&nbsp;type: image.contentType&nbsp;})<span class="hljs-comment">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;const&nbsp;<span class="hljs-attr">url</span> =&nbsp;URL.createObjectURL(blob)<span class="hljs-comment">;</span>

&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;return&nbsp;{
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;src: url,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;alt:&nbsp;'文档图片',
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<span class="hljs-comment">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; })<span class="hljs-comment">;</span>
&nbsp; &nbsp; }),
}<span class="hljs-comment">;</span>

mammoth.convertToHtml({&nbsp;arrayBuffer: docxBuffer }, options).then(/* ... */)<span class="hljs-comment">;</span>
</code></pre>
<p>这样一来，图片以 Blob URL 形式加载，页面性能显著提升！</p>
<h2 data-id="heading-9">其他方案对比</h2>
<p>说实话，在选择这两个库之前，也有其他解决方案：</p>
<h3 data-id="heading-10">微软 Office Online 在线预览</h3>
<p>利用微软官方提供的 Office Online&nbsp;Server&nbsp;或 Microsoft 365 的在线服务，通过嵌入&nbsp;<code>WebView</code>&nbsp;或&nbsp;<code>&lt;iframe&gt;</code>&nbsp;实现 DOCX 的在线渲染。</p>
<p>示例代码：</p>
<pre><code class="hljs language-ini" lang="ini">&lt;iframe&nbsp;<span class="hljs-attr">src</span>=<span class="hljs-string">"https://view.officeapps.live.com/op/embed.aspx?src=文档URL"</span>&gt;&lt;/iframe&gt;
</code></pre>
<h4 data-id="heading-11">优点</h4>
<ul>
<li>•&nbsp;<strong>格式高度还原</strong>：支持复杂排版、图表、公式等。</li>
<li>•&nbsp;<strong>无需本地依赖</strong>：纯浏览器端实现。</li>
<li>•&nbsp;<strong>官方维护</strong>：兼容性最好。</li>
</ul>
<p>折腾一圈，还是<code>docx-preview</code>和<code>mammoth</code>这俩兄弟最实用。</p>
<p>它们提供了轻量级的解决方案，仅需几十 KB 就能搞定 Word 预览问题，而且不需要依赖外部服务，完全可以在前端实现。</p>
<h2 data-id="heading-12"></h2></div></div>