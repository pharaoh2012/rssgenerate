
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Can-daydayup/p/18819868" title="发布于 2025-04-11 08:00">
    <span role="heading" aria-level="2">C# LINQ 快速入门实战指南，建议收藏学习！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h2 data-tool="mdnice编辑器"><span>前言</span></h2>
<p data-tool="mdnice编辑器"><span>因为咱们的<span>.NET EF Core快速入门实战教程<span>经常会用到 LINQ 去查询和操作 MySQL 中的数据，因此我觉得很有必要对 LINQ 的一些使用技巧、常用方法、特性做一个详细的介绍，让大家在后续的课程中不迷茫。</span></span></span></p>
<ul class="list-paddingleft-1">
<li><strong>.NET EF Core快速入门实战教程：<span style="color: rgba(0, 0, 255, 1)"><a href="https://articles.zsxq.com/id_2nljwhkdlird.html" target="_blank" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">https://articles.zsxq.com/id_2nljwhkdlird.html</span></a></span></strong></li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/1336199/202504/1336199-20250411032618154-682379271.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h2 data-tool="mdnice编辑器"><span>LINQ介绍</span></h2>
<p data-tool="mdnice编辑器"><span>LINQ语言集成查询是一系列直接将查询功能集成到 C# 语言的技术统称。数据查询历来都表示为简单的字符串，没有编译时类型检查或 IntelliSense 支持。此外，需要针对每种类型的数据源了解不同的查询语言：SQL 数据库、XML 文档、各种 Web 服务等。然而，LINQ的出现改变了这一现状，它使查询成为了与类、方法和事件同等重要的高级语言构造。通过LINQ，开发者能够以声明性的方式查询和操作数据，极大地提高了开发效率和代码的可维护性。</span></p>
<h2 data-tool="mdnice编辑器"><span>LINQ具有以下特性</span></h2>
<ul class="list-paddingleft-1">
<li><span>强类型：编译时验证查询逻辑，减少运行时错误。</span></li>
<li><span>延迟执行：LINQ查询通常是延迟执行的，即查询表达式本身不会立即执行，直到实际遍历结果时才触发查询。使用&nbsp;<code><span>ToList()</span></code><span>、<code><span>ToArray()</span></code><span>、<code><span>ToDictionary()</span></code><span>、<code><span>FirstOrDefault()</span></code><span>等方法可立即执行。</span></span></span></span></span></li>
<li><span>支持多种数据源：LINQ可以用于查询多种数据源，如<code><span>LINQ to Objects、LINQ to XML、LINQ to SQL、LINQ to Entities（Entity Framework）</span></code><span>等。</span></span></li>
</ul>
<h2 data-tool="mdnice编辑器"><span>LINQ中常用方法</span></h2>
<h3 data-tool="mdnice编辑器"><span>操作示例数据</span></h3>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31URA4ghJrLaMcdb6sUykXRkpqz7J5mkB7KSMNFhOJFEzxyoHpdXxgtChLrPRyB7oWnUaSAqbNWQc/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>&nbsp; &nbsp; &nbsp; &nbsp; public class StudentInfo<br><span>&nbsp; &nbsp; &nbsp; &nbsp; {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public int StudentID { get;&nbsp;set<span>; }<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public string StudentName { get;&nbsp;set<span>; }<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public DateTime Birthday { get;&nbsp;set<span>; }<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public int ClassID { get;&nbsp;set<span>; }<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public string Address { get;&nbsp;set<span>; }<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public List&lt;Course&gt; Courses { get;&nbsp;set<span>; } = new List&lt;Course&gt;();<br><span>&nbsp; &nbsp; &nbsp; &nbsp; }<br><br><span>&nbsp; &nbsp; &nbsp; &nbsp; public class Course<br><span>&nbsp; &nbsp; &nbsp; &nbsp; {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public int CourseID { get;&nbsp;set<span>; }<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public string CourseName { get;&nbsp;set<span>; }<br><span>&nbsp; &nbsp; &nbsp; &nbsp; }<br><br><span>&nbsp; &nbsp; &nbsp; &nbsp; static List&lt;StudentInfo&gt; students = new List&lt;StudentInfo&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new StudentInfo<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StudentID=1,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StudentName="大姚"<span>,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Birthday=Convert.ToDateTime("1997-10-25"<span>),<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ClassID=101,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Courses = new List&lt;Course&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new Course { CourseID = 101, CourseName =&nbsp;"语文"<span>&nbsp;},<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new Course { CourseID = 102, CourseName =&nbsp;"数学"<span>&nbsp;}<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new StudentInfo<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StudentID=2,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StudentName="李四"<span>,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Birthday=Convert.ToDateTime("1998-10-25"<span>),<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ClassID=101,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Courses = new List&lt;Course&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new Course { CourseID = 101, CourseName =&nbsp;"语文"<span>&nbsp;},<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new Course { CourseID = 102, CourseName =&nbsp;"数学"<span>&nbsp;}<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new StudentInfo<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StudentID=3,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StudentName="王五"<span>,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Birthday=Convert.ToDateTime("1999-10-25"<span>),<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ClassID=102,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Address="广州"<span>,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Courses = new List&lt;Course&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new Course { CourseID = 101, CourseName =&nbsp;"语文"<span>&nbsp;},<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new Course { CourseID = 102, CourseName =&nbsp;"数学"<span>&nbsp;}<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new StudentInfo<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StudentID=4,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StudentName="时光者"<span>,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Birthday=Convert.ToDateTime("1999-11-25"<span>),<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ClassID=102,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Address="深圳"<span>&nbsp;,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Courses = new List&lt;Course&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new Course { CourseID = 104, CourseName =&nbsp;"历史"<span>&nbsp;},<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new Course { CourseID = 103, CourseName =&nbsp;"地理"<span>&nbsp;}<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br><span>&nbsp; &nbsp; &nbsp; &nbsp; };<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></span></pre>
<h3 data-tool="mdnice编辑器"><span>基本查询方法</span></h3>
<ul class="list-paddingleft-1">
<li><strong>Where</strong><span>：用于过滤集合中的元素。</span></li>
<li><strong>Select</strong><span>：用于将集合中的每个元素投影（转换）为新形式。</span></li>
<li><strong>SelectMany</strong><span>：用于将多个集合<code><span>展平</span></code><span>为一个集合。</span></span></li>
</ul>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31URA4ghJrLaMcdb6sUykXRkpqz7J5mkB7KSMNFhOJFEzxyoHpdXxgtChLrPRyB7oWnUaSAqbNWQc/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var femaleStudents = students.Where(s =&gt; s.StudentName ==&nbsp;"时光者"<span>);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var studentNames = students.Select(s =&gt; s.StudentName);<br><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 使用SelectMany展平所有学生的课程列表<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var allCourses = students.SelectMany(student =&gt; student.Courses).ToList();<br><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 输出所有课程的名称<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; foreach (var course&nbsp;in<span>&nbsp;allCourses)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console.WriteLine(course.CourseName);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br></span></span></span></span></span></span></span></span></span></span></span></code></span></pre>
<h3 data-tool="mdnice编辑器"><span>转换方法</span></h3>
<ul class="list-paddingleft-1">
<li><strong>ToList</strong><span>：将实现了<code><span>IEnumerable&lt;T&gt;</span></code><span>接口的集合转换为一个<code><span>List&lt;T&gt;</span></code><span>类型的对象，属于将集合转换为特定类型列表的方法。</span></span></span></li>
<li><strong>ToArray</strong><span>：将一个实现了<code><span>IEnumerable&lt;T&gt;</span></code><span>接口的集合转换为一个数组，属于将集合转换为数组类型的方法。</span></span></li>
<li><strong>ToDictionary</strong><span>：将一个集合转换为一个字典（<code><span>Dictionary&lt;TKey, TValue&gt;</span></code><span>），其中集合的元素作为字典的键或值（通过提供的键选择器和值选择器函数）。属于将集合转换为键值对集合（字典）的方法。</span></span></li>
<li><strong>ToLookup</strong><span>：将一个序列分组并返回一个<code><span>ILookup&lt;TKey, TElement&gt;</span></code><span>对象，这是一个<code><span>one-to-many</span></code><span>集合，即一个键可以对应多个值。属于将集合转换为分组集合（查找表）的方法。</span></span></span></li>
</ul>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31URA4ghJrLaMcdb6sUykXRkpqz7J5mkB7KSMNFhOJFEzxyoHpdXxgtChLrPRyB7oWnUaSAqbNWQc/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var studentList = students.ToList();<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var studentArray = students.ToArray();<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var studentDictionary = students.ToDictionary(s =&gt; s.StudentID, s =&gt; s.StudentName);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var studentLookup = students.ToLookup(s =&gt; s.ClassID, s =&gt; s.StudentName);<br></span></span></span></span></code></span></pre>
<h3 data-tool="mdnice编辑器"><span>元素操作方法</span></h3>
<ul class="list-paddingleft-1">
<li><strong>First</strong><span>：返回集合中的第一个元素。</span></li>
<li><strong>FirstOrDefault</strong><span>：返回集合中的第一个元素，如果集合为空则返回默认值。</span></li>
<li><strong>Single</strong><span>：返回集合中的单个元素，如果集合为空或包含多个元素则抛出异常。</span></li>
<li><strong>SingleOrDefault</strong><span>：返回集合中的单个元素，如果集合为空或包含多个元素则返回默认值。</span></li>
<li><strong>Last</strong><span>：返回集合中的最后一个元素。</span></li>
<li><strong>LastOrDefault</strong><span>：返回集合中的最后一个元素，如果集合为空则返回默认值。</span></li>
<li><strong>ElementAt</strong><span>：返回集合中指定索引处的元素。</span></li>
<li><strong>ElementAtOrDefault</strong><span>：返回集合中指定索引处的元素，如果索引超出范围则返回默认值。</span></li>
<li><strong>DefaultIfEmpty</strong><span>：如果集合为空，则返回一个包含默认值的集合。</span></li>
</ul>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31URA4ghJrLaMcdb6sUykXRkpqz7J5mkB7KSMNFhOJFEzxyoHpdXxgtChLrPRyB7oWnUaSAqbNWQc/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var firstStudent = students.First();<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var firstAdult = students.FirstOrDefault(s =&gt; s.Birthday &lt;= DateTime.Now.AddYears(-18));<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var onlyWangWu = students.Single(s =&gt; s.StudentName ==&nbsp;"王五"<span>);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var wangWuOrDefault = students.SingleOrDefault(s =&gt; s.StudentName ==&nbsp;"王六"<span>);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var lastStudent = students.Last();<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var lastAdult = students.LastOrDefault(s =&gt; s.Birthday &lt;= DateTime.Now.AddYears(-18));<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var secondStudent = students.ElementAt(1);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var tenthStudentOrDefault = students.ElementAtOrDefault(9);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var nonEmptyStudents = students.DefaultIfEmpty(new StudentInfo { StudentID = 0, StudentName =&nbsp;"默认Student"<span>, Address =&nbsp;"默认"<span>&nbsp;});<br></span></span></span></span></span></span></span></span></span></span></span></span></span></code></span></pre>
<h3 data-tool="mdnice编辑器"><span>排序方法</span></h3>
<ul class="list-paddingleft-1">
<li><strong>OrderBy</strong><span>：用于对集合进行升序排序。</span></li>
<li><strong>OrderByDescending</strong><span>：用于对集合进行降序排序。</span></li>
<li><strong>ThenBy</strong><span>：用于在已排序的集合上应用次要排序。</span></li>
<li><strong>ThenByDescending</strong><span>：用于在已排序的集合上应用次要降序排序。</span></li>
</ul>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31URA4ghJrLaMcdb6sUykXRkpqz7J5mkB7KSMNFhOJFEzxyoHpdXxgtChLrPRyB7oWnUaSAqbNWQc/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var sortedByBirthdayAsc = students.OrderBy(s =&gt; s.Birthday);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var sortedByClassIDDesc = students.OrderByDescending(s =&gt; s.ClassID);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var sortedByNameThenClassID = students.OrderBy(s =&gt; s.StudentName).ThenBy(s =&gt; s.ClassID);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var sortedThenByDescending = students.OrderBy(s =&gt; s.StudentName).ThenBy(s =&gt; s.ClassID).ThenByDescending(x =&gt; x.Birthday);<br></span></span></span></span></code></span></pre>
<h3 data-tool="mdnice编辑器"><span>聚合方法</span></h3>
<ul class="list-paddingleft-1">
<li><strong>Count</strong><span>：返回集合中的元素数量。</span></li>
<li><strong>Sum</strong><span>：返回集合中数值类型元素的和。</span></li>
<li><strong>Average</strong><span>：返回集合中数值类型元素的平均值。</span></li>
<li><strong>Min</strong><span>：返回集合中的最小值。</span></li>
<li><strong>Max</strong><span>：返回集合中的最大值。</span></li>
<li><strong>Aggregate</strong><span>：对集合进行自定义聚合操作。</span></li>
</ul>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31URA4ghJrLaMcdb6sUykXRkpqz7J5mkB7KSMNFhOJFEzxyoHpdXxgtChLrPRyB7oWnUaSAqbNWQc/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int studentCount = students.Count();<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int totalClassID = students.Sum(s =&gt; s.ClassID);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; double averageAge = students.Average(s =&gt; DateTime.Now.Year - s.Birthday.Year);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int minClassID = students.Min(s =&gt; s.ClassID);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int maxClassID = students.Max(s =&gt; s.ClassID);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; string concatenatedNames = students.Aggregate(""<span>, (acc, s) =&gt; acc ==&nbsp;""<span>&nbsp;? s.StudentName : acc +&nbsp;", "<span>&nbsp;+ s.StudentName);<br></span></span></span></span></span></span></span></span></span></code></span></pre>
<h3 data-tool="mdnice编辑器"><span>集合操作方法</span></h3>
<ul class="list-paddingleft-1">
<li><strong>Distinct</strong><span>：返回集合中的唯一元素。</span></li>
<li><strong>Union</strong><span>：返回两个集合的并集。</span></li>
<li><strong>Intersect</strong><span>：返回两个集合的交集。</span></li>
<li><strong>Except</strong><span>：返回在第一个集合中存在但不在第二个集合中存在的元素。</span></li>
<li><strong>Concat</strong><span>：连接两个或多个集合，并返回一个新的序列。</span></li>
</ul>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31URA4ghJrLaMcdb6sUykXRkpqz7J5mkB7KSMNFhOJFEzxyoHpdXxgtChLrPRyB7oWnUaSAqbNWQc/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var uniqueClassIDs = students.Select(s =&gt; s.ClassID).Distinct();<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var unionClassIDs = uniqueClassIDs.Union(new[] { 103, 104 });<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var intersectClassIDs = uniqueClassIDs.Intersect(new[] { 101, 103 });<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var exceptClassIDs = uniqueClassIDs.Except(new[] { 101 });<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var concatClassIDs = uniqueClassIDs.Concat(new[] { 103, 104 });<br></span></span></span></span></span></code></span></pre>
<h3 data-tool="mdnice编辑器"><span>分组与连接方法</span></h3>
<ul class="list-paddingleft-1">
<li><strong>GroupBy</strong><span>：根据键对集合进行多级分组。</span></li>
<li><strong>Join</strong><span>：根据匹配键连接两个集合。</span></li>
</ul>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31URA4ghJrLaMcdb6sUykXRkpqz7J5mkB7KSMNFhOJFEzxyoHpdXxgtChLrPRyB7oWnUaSAqbNWQc/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>&nbsp; var groupedByClassID = students.GroupBy(s =&gt; s.ClassID);<br><span>&nbsp; var otherStudent = new List&lt;StudentInfo&gt;<br><span>&nbsp; {<br><span>&nbsp; &nbsp; &nbsp;new StudentInfo<br><span>&nbsp; &nbsp; &nbsp;{<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;StudentID=4,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;StudentName="摇一摇"<span>,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Birthday=Convert.ToDateTime("2997-10-25"<span>),<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ClassID=101,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Courses = new List&lt;Course&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Course { CourseID = 101, CourseName =&nbsp;"语文"<span>&nbsp;},<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Course { CourseID = 102, CourseName =&nbsp;"数学"<span>&nbsp;}<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br><span>&nbsp; &nbsp; &nbsp;}<br><span>&nbsp; };<br><span>&nbsp; var listJoin = students.Join(<br><span>&nbsp; &nbsp; &nbsp; otherStudent, // 要连接的第二个序列<br><span>&nbsp; &nbsp; &nbsp; s1 =&gt; s1.StudentID, // 从第一个序列中提取键<br><span>&nbsp; &nbsp; &nbsp; s2 =&gt; s2.StudentID, // 从第二个序列中提取键<br><span>&nbsp; &nbsp; &nbsp; (s1, s2) =&gt; new // 结果选择器，指定如何从两个匹配元素创建结果<br><span>&nbsp; &nbsp; &nbsp; {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StudentID = s1.StudentID,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StudentName = s1.StudentName,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Birthday = s1.Birthday,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ClassID = s1.ClassID,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Address = s1.Address,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Courses = s1.Courses,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; OtherStudentName = s2.StudentName //假设我们想要包含第二个序列中学生的名称<br><span>&nbsp; &nbsp; &nbsp; });<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></span></pre>
<h3 data-tool="mdnice编辑器"><span>跳过与获取指定数量的元素（常用作分页）</span></h3>
<ul class="list-paddingleft-1">
<li><strong>Skip</strong><span>：用于跳过集合中指定数量的元素，并返回剩余的元素序列。</span></li>
<li><strong>Take</strong><span>：用于从集合的开头获取指定数量的元素，并返回一个新的序列。</span></li>
</ul>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31URA4ghJrLaMcdb6sUykXRkpqz7J5mkB7KSMNFhOJFEzxyoHpdXxgtChLrPRyB7oWnUaSAqbNWQc/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var skippedStudents = students.Skip(1);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var takenStudents = students.Take(2);<br><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //数据分页查询（Skip + Take）<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int pageNumber = 2;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int pageSize = 10;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var pagedUsers = skippedStudents<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .OrderBy(u =&gt; u.ClassID) // 必须排序<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .Skip((pageNumber - 1) * pageSize)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .Take(pageSize)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .ToList();<br></span></span></span></span></span></span></span></span></span></span></code></span></pre>
<h3 data-tool="mdnice编辑器"><span>条件判断方法</span></h3>
<ul class="list-paddingleft-1">
<li><strong>All</strong><span>：用于判断集合中的所有元素是否都满足指定条件。</span></li>
<li><strong>Any</strong><span>：检查集合是否包含任何元素，或用于判断集合中是否存在至少一个满足指定条件的元素。</span></li>
<li><strong>Contains</strong><span>：用于判断集合中是否包含指定的元素。</span></li>
</ul>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31URA4ghJrLaMcdb6sUykXRkpqz7J5mkB7KSMNFhOJFEzxyoHpdXxgtChLrPRyB7oWnUaSAqbNWQc/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bool allAdults = students.All(s =&gt; s.Birthday &lt;= DateTime.Now.AddYears(-18));<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bool anyAdults = students.Any(s =&gt; s.Birthday &lt;= DateTime.Now.AddYears(-18));<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bool containsWangWu = students.Contains(students.First(s =&gt; s.StudentName ==&nbsp;"王五"<span>));<br></span></span></span></span></code></span></pre>
<h3 data-tool="mdnice编辑器"><span>更多方法查询</span></h3>
<ul class="list-paddingleft-1">
<li><span style="color: rgba(0, 0, 255, 1)"><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/linq/get-started/introduction-to-linq-queries#classification-table" target="_blank" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">https://learn.microsoft.com/zh-cn/dotnet/csharp/linq/get-started/introduction-to-linq-queries#classification-table</span></a></span></li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/1336199/202504/1336199-20250411032654848-1788198381.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h2 data-tool="mdnice编辑器"><span>查询语法</span></h2>
<p data-tool="mdnice编辑器"><span>LINQ提供了类似于SQL的查询语法，允许开发者以几乎相同的方式对不同类型的数据源进行查询。查询语法使用from、where、select、orderby等关键字。</span></p>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31URA4ghJrLaMcdb6sUykXRkpqz7J5mkB7KSMNFhOJFEzxyoHpdXxgtChLrPRyB7oWnUaSAqbNWQc/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var querySyntaxResult = from student&nbsp;in<span>&nbsp;students<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;where<span>&nbsp;student.ClassID == 101<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; orderby student.StudentName ascending<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; select student;<br><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console.WriteLine("查询语法结果:"<span>);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; foreach (var student&nbsp;in<span>&nbsp;querySyntaxResult)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console.WriteLine($"{student.StudentName}, ClassID: {student.ClassID}"<span>);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></span></pre>
<p data-tool="mdnice编辑器"><strong>查询关键字：</strong></p>
<ul class="list-paddingleft-1">
<li><strong>from：</strong><span>&nbsp;指定数据源和范围变量（类似于迭代变量）。</span></li>
<li><strong>where：</strong><span>&nbsp;基于由逻辑 AND 和 OR 运算符（&amp;&amp; 或 ||）分隔的一个或多个布尔表达式筛选源元素。</span></li>
<li><strong>select：</strong><span>&nbsp;指定执行查询时，所返回序列中元素的类型和形状。</span></li>
<li><strong>group：</strong><span>&nbsp;根据指定的密钥值对查询结果分组。</span></li>
<li><strong>into：</strong><span>&nbsp;提供可作为对 join、group 或 select 子句结果引用的标识符（简单理解用于将配对的结果收集到一个临时序列）。</span></li>
<li><strong>orderby：</strong><span>&nbsp;根据元素类型的默认比较器对查询结果进行升序或降序排序。</span></li>
<li><strong>join：</strong><span>&nbsp;基于两个指定匹配条件间的相等比较而联接两个数据源（简单理解根据指定的键将两个序列中的元素配对）。</span></li>
<li><strong>let：</strong><span>&nbsp;引入范围变量，在查询表达式中存储子表达式结果。</span></li>
<li><strong>in：</strong><span>&nbsp;join子句中的上下文关键字。</span></li>
<li><strong>on：</strong><span>&nbsp;join子句中的上下文关键字。</span></li>
<li><strong>equals：</strong><span>&nbsp;join子句中的上下文关键字。</span></li>
<li><strong>by：</strong><span>&nbsp;group 子句中的上下文关键字。</span></li>
<li><strong>ascending：</strong><span>&nbsp;orderby子句中的上下文关键字。</span></li>
<li><strong>descending：</strong><span>&nbsp;orderby子句中的上下文关键字。</span></li>
</ul>
<h2 data-tool="mdnice编辑器"><span>方法语法</span></h2>
<p data-tool="mdnice编辑器"><span>方法语法也称为扩展方法语法，使用点号“.”和一系列扩展方法来构建查询。</span></p>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31URA4ghJrLaMcdb6sUykXRkpqz7J5mkB7KSMNFhOJFEzxyoHpdXxgtChLrPRyB7oWnUaSAqbNWQc/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var methodSyntaxResult = students<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .Where(student =&gt; student.ClassID == 101)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .OrderBy(student =&gt; student.StudentName)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .ToList();<br><br><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console.WriteLine("方法语法结果:"<span>);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; foreach (var student&nbsp;in<span>&nbsp;methodSyntaxResult)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console.WriteLine($"{student.StudentName}, ClassID: {student.ClassID}"<span>);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br></span></span></span></span></span></span></span></span></span></span></span></span></code></span></pre>
<h2 data-tool="mdnice编辑器"><span>混合查询和方法语法</span></h2>
<pre data-tool="mdnice编辑器"><span data-cacheurl="" data-remoteid="" data-lazy-bgimg="https://mmbiz.qpic.cn/mmbiz_svg/9M0PhLTmTIfzNFlBn3E31URA4ghJrLaMcdb6sUykXRkpqz7J5mkB7KSMNFhOJFEzxyoHpdXxgtChLrPRyB7oWnUaSAqbNWQc/640?wx_fmt=svg&amp;from=appmsg" data-fail="0"><code><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var mixedResult = (from student&nbsp;in<span>&nbsp;students<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;where<span>&nbsp;student.ClassID == 101<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;where<span>&nbsp;student.Courses.Any(course =&gt; course.CourseName ==&nbsp;"数学"<span>)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;orderby student.StudentName ascending<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;select student)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.Take(2)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.ToList();<br><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 输出结果<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console.WriteLine("混合查询结果:"<span>);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; foreach (var student&nbsp;in<span>&nbsp;mixedResult)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console.WriteLine($"{student.StudentName}, ClassID: {student.ClassID}"<span>);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></span></pre>
<h2 data-tool="mdnice编辑器"><span>参考文章</span></h2>
<ul class="list-paddingleft-1">
<li><span style="color: rgba(0, 0, 255, 1)"><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/linq" target="_blank" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">https://learn.microsoft.com/zh-cn/dotnet/csharp/linq</span></a></span></li>
<li><span style="color: rgba(0, 0, 255, 1)"><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/query-keywords" target="_blank" rel="noopener nofollow"><span style="color: rgba(0, 0, 255, 1)">https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/query-keywords</span></a></span></li>
</ul>
</div>
<div id="MySignature" role="contentinfo">
    <blockquote>
<p style="font-family:YouYuan;font-size: 16px;margin: 0 auto 0.01em auto;"><span style="font-size: 17px; ">作者名称：</span><a href="https://www.cnblogs.com/Can-daydayup/" target="_blank">追逐时光者</a></p>
<p style="font-family:YouYuan;font-size: 16px;margin: 0 auto 0.01em auto;"><span style="font-size: 17px; ">作者简介：</span>一个热爱编程、善于分享、喜欢学习、探索、尝试新事物和新技术的全栈软件工程师。</p>
<p style="font-family:YouYuan;font-size: 16px;margin: 0 auto 0.01em auto;">
本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接，否则保留追究法律责任的权利。如果该篇文章对您有帮助的话，可以点一下右下角的<a onclick="votePost(cb_entryId,'Digg')" href="javascript:void(0)" style="color:red;">【♥推荐♥】</a>，希望能够持续的为大家带来好的技术文章，文中可能存在描述不正确的地方，欢迎指正或补充，不胜感激。
</p>
</blockquote>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.04624444412962963" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-11 08:01">2025-04-11 08:00</span>&nbsp;
<a href="https://www.cnblogs.com/Can-daydayup">追逐时光者</a>&nbsp;
阅读(<span id="post_view_count">78</span>)&nbsp;
评论(<span id="post_comment_count">3</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18819868" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18819868);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18819868', targetLink: 'https://www.cnblogs.com/Can-daydayup/p/18819868', title: 'C# LINQ 快速入门实战指南，建议收藏学习！' })">举报</a>
</div>
        