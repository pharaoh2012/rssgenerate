
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/yangtb/p/18878728" title="发布于 2025-05-15 17:45">
    <span role="heading" aria-level="2">使用Roslyn运行C#脚本时如何引用程序集</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>使用Roslyn的CSharpScript类运行C#脚本时，会默认包含一部分程序集，默认包含的程序集引用可以直接使用，而其他程序集则需要额外提供引用。本文简单描述了使用Roslyn的CSharpScript类实运行C#脚本时，如何引用程序集。</p>
<h1 id="情景再现">情景再现</h1>
<p>首先创建一个C#类库，代码很简单，提供一个静态公共方法，打印一个字符串</p>
<pre><code>namespace ClassLibrary1
{
    public class Class1
    {
        public static void TestMethod()
        {
            Console.WriteLine("Class1:TestMethod");
        }
    }
}
</code></pre>
<p>然后在创建一个C#控制台，引用类库，然后分别通过普通方式和脚本化的方式调用TestMethod</p>
<pre><code>using ClassLibrary1;
using Microsoft.CodeAnalysis.CSharp.Scripting;

namespace ConsoleApp1
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Class1.TestMethod();
            var code2 = @"Class1.TestMethod();";
            try
            {
                CSharpScript.Create(code2).RunAsync().GetAwaiter().GetResult();
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }
    }
}
</code></pre>
<p>结果如下</p>
<pre><code>Class1::TestMethod.Call directly
Microsoft.CodeAnalysis.Scripting.CompilationErrorException: (1,1): error CS0103: 当前上下文中不存在名称“Class1”
   在 Microsoft.CodeAnalysis.Scripting.ScriptBuilder.ThrowIfAnyCompilationErrors(DiagnosticBag diagnostics, DiagnosticFormatter formatter) 位置 /_/src/Scripting/Core/ScriptBuilder.cs:行号 105
   在 Microsoft.CodeAnalysis.Scripting.ScriptBuilder.CreateExecutor[T](ScriptCompiler compiler, Compilation compilation, Boolean emitDebugInformation, CancellationToken cancellationToken) 位置 /_/src/Scripting/Core/ScriptBuilder.cs:行号 93
   在 Microsoft.CodeAnalysis.Scripting.Script`1.GetExecutor(CancellationToken cancellationToken) 位置 /_/src/Scripting/Core/Script.cs:行号 392
   在 Microsoft.CodeAnalysis.Scripting.Script`1.RunAsync(Object globals, Func`2 catchException, CancellationToken cancellationToken) 位置 /_/src/Scripting/Core/Script.cs:行号 492
   在 ConsoleApp1.Program.Main(String[] args) 位置 D:\Projects\CSharp Projects\WpfApp1\ConsoleApp1\Program.cs:行号 15
</code></pre>
<p>可以看到，CSharpScript找不到Class1,即使我们加上<code>using ClassLibrary1;</code>结果也是一样。</p>
<h1 id="问题解决">问题解决</h1>
<p>要让CSharpScript能够找到我们的程序集，需要使用CSharpScript.Create方法的options参数传入一个ScriptOptions类型的对象，并且利用ScriptOptions的WithRefrences方法添加程序集引用。</p>
<p>修改后的代码如下：</p>
<pre><code>using System.Reflection;
using ClassLibrary1;
using Microsoft.CodeAnalysis.CSharp.Scripting;
using Microsoft.CodeAnalysis.Scripting;

namespace ConsoleApp1
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Class1.TestMethod("Call directly");
            var code2 = @"
using ClassLibrary1;
Class1.TestMethod(""Call with scripting"");
";
            var assembly = Assembly.Load("ClassLibrary1");
            //如果当前的AppDomain中没有加载过该程序集，则需要使用Assembly.LoadFrom来加载
            //确保程序集的路径正确，以及相关的依赖项也在正确的位置
            //var assembly = Assembly.LoadFrom("ClassLibrary1.dll");
            var options = ScriptOptions.Default.WithReferences(assembly);
            CSharpScript.Create(code2, options).RunAsync().GetAwaiter().GetResult();
        }
    }
}
</code></pre>
<p>WithReference方法也接受string类型和MetadataReference类型的参数，例如，上述代码对WithReference方法的调用也可以使用下面两种方式（两种方式都需要使用绝对路径）</p>
<pre><code>var options = ScriptOptions.Default.WithReferences(@"C:\ClassLibrary1");
</code></pre>
<p>或</p>
<pre><code>var metaRef = MetadataReference.CreateFromFile(@"C:\ClassLibrary1");
var options = ScriptOptions.Default.WithReferences(metaRef);
</code></pre>
<p>运行后的结果如下：</p>
<pre><code>Class1::TestMethod.Call directly
Class1::TestMethod.Call with scripting
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.4524490568113426" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-19 11:25">2025-05-15 17:45</span>&nbsp;
<a href="https://www.cnblogs.com/yangtb">昏睡红猹</a>&nbsp;
阅读(<span id="post_view_count">27</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18878728);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18878728', targetLink: 'https://www.cnblogs.com/yangtb/p/18878728', title: '使用Roslyn运行C#脚本时如何引用程序集' })">举报</a>
</div>
        