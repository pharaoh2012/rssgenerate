
		<h2>
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/i2u9/p/18869863/docker-invalid-tar" title="发布于 2025-05-10 18:04">
    <span role="heading" aria-level="2">ARM终端 KylinOS 容器镜像导入排障</span>
    

</a>

		</h2>
		    <div id="cnblogs_post_description" style="display: none">
        
        docker load 报 archive/tar: invalid tar header 错误
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><strong>背景信息</strong></p>
<blockquote>
<p>电脑：华为擎云L420</p>
<p>CPU：ARM架构，HUAWEI Kirin 9006C</p>
<p>OS：Kylin桌面操作系统V10（SP1）</p>
<p>Kernel：5.4.96</p>
<p>Docker： 27.5.1</p>
</blockquote>
<p>已准备容器文件<code>openjdk:8u342</code>的离线镜像文件压缩包<code>jdk8.arm.tar.gz</code>, 对应镜像ID：<code>sha256:53ff4b6f85a89d88a34a0e8a00f1df940d15aee8cc1c717f919cc368ece0218e</code></p>
<p>参考：<code>https://hub.docker.com/layers/library/openjdk/8u342-jdk/images/sha256-53ff4b6f85a89d88a34a0e8a00f1df940d15aee8cc1c717f919cc368ece0218e</code></p>
<h2 id="1-故障现象">1 故障现象</h2>
<p>执行<code>docker load -i jdk8.arm.tar.gz</code> 显示如下错误：</p>
<pre><code>bd245ec49ee5: Loading layer [================================&gt;                  ]  34.54MB/53.68MB
archive/tar: invalid tar header
</code></pre>
<h2 id="2-排障">2 排障</h2>
<h3 id="检查离线文件是否存在压缩问题">检查离线文件是否存在压缩问题</h3>
<pre><code>mkdir repo
cd repo
tar xvf ../jdk8.arm.tar.gz
cd 1f248b96d7f6b52b6e6693ba3d60679c1d01fd4369419797cdcf8e83f110fb2c
tar tvf layer.tar 
</code></pre>
<p>解压均正常，文件没有问题</p>
<h3 id="使用在线镜像进一步排除离线文件原因">使用在线镜像，进一步排除离线文件原因</h3>
<p>直接使用在线镜像地址下载，导入，依然报错</p>
<pre><code>root@xwhw:~# docker -D pull registry.openanolis.cn/openanolis/anolisos:8.10
time="2025-05-10T14:01:52+08:00" level=debug msg="otel error" error="1 errors occurred detecting resource:\n\t* conflicting Schema URL: https://opentelemetry.io/schemas/1.21.0 and https://opentelemetry.io/schemas/1.26.0"
8.10: Pulling from openanolis/anolisos
643ade85e06c: Extracting [==================================================&gt;]  81.99MB/81.99MB
ffe32c2f64f9: Download complete
failed to register layer: archive/tar: invalid tar header
</code></pre>
<h3 id="网络搜索该错误没有有效信息">网络搜索该错误，没有有效信息</h3>
<h3 id="查看docker-cli源码没有从代码文件中直接检索到invalid-tar-header">查看docker cli源码，没有从代码文件中直接检索到<code>invalid tar header</code></h3>
<h3 id="启动docker-debug获取详细日志信息">启动docker debug，获取详细日志信息</h3>
<p>修改<code>docker daemon</code>配置文件<code>/etc/docker/daemon.json</code>，启动<code>debug</code>模式，查看详细日志信息</p>
<pre><code>{
        "debug": true
}
</code></pre>
<p>执行<code>journalctl -u docker</code>, 显示如下日志</p>
<pre><code>5月 10 14:01:53 xwhw dockerd[46749]: time="2025-05-10T14:01:53.187527932+08:00" level=debug msg="Downloaded ffe32c2f64f9 to tempfile /var/lib/docker/tmp/GetImageBlob361179273"
5月 10 14:01:54 xwhw dockerd[46749]: time="2025-05-10T14:01:54.717283867+08:00" level=debug msg="Downloaded 643ade85e06c to tempfile /var/lib/docker/tmp/GetImageBlob3202669198"
5月 10 14:01:54 xwhw dockerd[46749]: time="2025-05-10T14:01:54.718119809+08:00" level=debug msg="Using /usr/bin/unpigz to decompress"
5月 10 14:01:54 xwhw dockerd[46749]: time="2025-05-10T14:01:54.721354719+08:00" level=debug msg="Start untar layer" id=5894aadd924d12292f694b380d2eadf7463cc1641c61e5d81573cf02b483610b
5月 10 14:01:54 xwhw dockerd[46749]: time="2025-05-10T14:01:54.732879772+08:00" level=debug msg="Cleaning up layer 5894aadd924d12292f694b380d2eadf7463cc1641c61e5d81573cf02b483610b: archive/tar: inv&gt;5月 10 14:01:54 xwhw dockerd[46749]: time="2025-05-10T14:01:54.734877698+08:00" level=info msg="Attempting next endpoint for pull after error: failed to register layer: archive/tar: invalid tar hea&gt;5月 10 14:07:49 xwhw dockerd[46749]: time="2025-05-10T14:07:49.687158999+08:00" level=debug msg="Calling HEAD /_ping"
</code></pre>
<p>根据日志显示，docker daemon调用了<code>unpigz</code>命令来解压缩镜像文件</p>
<h3 id="手工调用unpigz命令显示如下错误">手工调用<code>unpigz</code>命令，显示如下错误</h3>
<pre><code>root@xwhw:~/repo/1f248b96d7f6b52b6e6693ba3d60679c1d01fd4369419797cdcf8e83f110fb2c# unpigz -d -c layer.tar &gt; /dev/null
unpigz: skipping: layer.tar: corrupted -- crc32 mismatch
unpigz: abort: internal threads error
</code></pre>
<h3 id="对比在intel-x86主机上-同一个文件执行结果">对比在<code>intel x86</code>主机上, 同一个文件执行结果</h3>
<pre><code>[root@dev6 1f248b96d7f6b52b6e6693ba3d60679c1d01fd4369419797cdcf8e83f110fb2c]# unpigz -d -c layer.tar | sha256sum -
bd245ec49ee5cd979b20c0a4efd32385afca92f5afa84faa6769c6a56543350a  -
</code></pre>
<p>确认文件一致</p>
<p>arm主机上</p>
<pre><code>root@xwhw:~/repo/1f248b96d7f6b52b6e6693ba3d60679c1d01fd4369419797cdcf8e83f110fb2c# sha256sum layer.tar
114ba63dd73a866ac1bb59fe594dfd218f44ac9b4fa4b2c68499da5584fcfa9d  layer.tar
</code></pre>
<p>intel主机上</p>
<pre><code>[root@dev6 1f248b96d7f6b52b6e6693ba3d60679c1d01fd4369419797cdcf8e83f110fb2c]# sha256sum layer.tar
114ba63dd73a866ac1bb59fe594dfd218f44ac9b4fa4b2c68499da5584fcfa9d  layer.tar
</code></pre>
<h3 id="问题已定位为unpigz命令问题">问题已定位为<code>unpigz</code>命令问题</h3>
<h2 id="3-修复">3 修复</h2>
<p>搜索网络信息：<code>unpigz: skipping: : corrupted -- crc32 mismatch</code>, 得到2个"有效"网页：<a href="https://blog.csdn.net/weixin_42768584/article/details/132583562" target="_blank" rel="noopener nofollow">解决Docker拉取镜像时pigz版本问题：升级与bug修复-CSDN博客</a></p>
<p><a href="https://github.com/madler/pigz/issues/123" target="_blank" rel="noopener nofollow">corrupted -- crc32 mismatch · Issue #123 · madler/pigz · GitHub</a></p>
<p>看起来是<code>pigz</code>的版本文件，升级版本</p>
<h3 id="升级版本">升级版本</h3>
<p>当前版本是2.4，升级到最新版2.8</p>
<pre><code>apt update
apt list --upgradable
</code></pre>
<p>已是<code>KylinOS</code>apt源的最新版，参考上述网页，手动下载源码安装更新</p>
<p>代码从zlib网站下载：<a href="https://www.zlib.net/pigz/" target="_blank" rel="noopener nofollow">pigz - Parallel gzip</a></p>
<pre><code>wget https://www.zlib.net/pigz/pigz.tar.gz

mkdir pigz
cd pigz
tar xvf ../pigz.tar.gz
cd pigz-2.8
make
which pigz
cd /usr/bin
mv pigz pigz-2.4
mv unpigz unpigz-2.4
cd -
cp pigz /usr/bin
cp unpigz /usr/bin
</code></pre>
<p>升级后，问题依然存在，版本升级失败</p>
<p>根据网页2， 可能是zlib的版本问题，升级zlib</p>
<p>同pigz，kylin源无法升级，手工下载zlib源码，编译升级</p>
<pre><code>wget https://www.zlib.net/zlib-1.3.1.tar.gz
tar xvf zlib-1.3.1.tar.gz
cd zlib-1.3.1
./configure
make
make install
</code></pre>
<p>根据make install 的结果，发现<code>zlib.so</code>放在了<code>/usr/local/lib</code>，与<code>dpkg -L zlib1g-dev</code>显示的文件路径不一致</p>
<p>再次编译<code>pigz</code>前，修改<code>Makefile</code>文件，在gcc 的 libs上加上<code>-L/usr/local/lib -I/usr/local/include</code></p>
<p>然而，处理后，问题依旧，未解决</p>
<h3 id="临时解决方案">临时解决方案</h3>
<p>考虑<code>unpigz</code>解决镜像文件压缩问题，而且是gzip格式，是不是可以用<code>gzip</code>命令替代<code>unpigz</code>命令， 查看<code>gzip</code>命令的参数,解压参数一致</p>
<p>测试验证，没有报错，证明<code>gzip</code>可用</p>
<pre><code>root@xwhw:~/repo/1f248b96d7f6b52b6e6693ba3d60679c1d01fd4369419797cdcf8e83f110fb2c# gzip -d -c layer.tar &gt; /dev/null
root@xwhw:~/repo/1f248b96d7f6b52b6e6693ba3d60679c1d01fd4369419797cdcf8e83f110fb2c# gzip -d -c layer.tar | sha256sum -
bd245ec49ee5cd979b20c0a4efd32385afca92f5afa84faa6769c6a56543350a  -
</code></pre>
<p>进行替代</p>
<pre><code>cd /usr/bin
rm pigz unpigz
ln -s /usr/bin/gzip pigz
ln -s /usr/bin/gzip unpigz
</code></pre>
<p>替代后验证</p>
<pre><code>cd ~
root@xwhw:~# docker load -i jdk8.arm.tar.gz 
bd245ec49ee5: Loading layer [==================================================&gt;]  53.68MB/53.68MB
595a656dd8ef: Loading layer [==================================================&gt;]  5.149MB/5.149MB
8874c5d5df1a: Loading layer [==================================================&gt;]  10.66MB/10.66MB
b7b6064a28a9: Loading layer [==================================================&gt;]  54.68MB/54.68MB
ee9872ea8036: Loading layer [==================================================&gt;]  5.421MB/5.421MB
89273ea6b11f: Loading layer [==================================================&gt;]     212B/212B
df0ca509f290: Loading layer [==================================================&gt;]  104.9MB/104.9MB
invalid reference format
</code></pre>
<p>报错，但tar文件没有解压错误, 查看image是否加载成功</p>
<pre><code>root@xwhw:~# docker images
REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
&lt;none&gt;       &lt;none&gt;    6fbf41d7a679   2 years ago   520MB
</code></pre>
<p>发现image，加载成功</p>
<p>运行容器，检查是否正常</p>
<pre><code>docker run -it --rm 6fbf /bin/bash
# 进入容器执行
which java
java -version
</code></pre>
<p>容器运行正常</p>
<p>tag名称不对，手工处理</p>
<pre><code>root@xwhw:~# docker tag 6fb openjdk:8u342
root@xwhw:~# docker images
REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
openjdk      8u342     6fbf41d7a679   2 years ago   520MB
</code></pre>
<p>通过<code>docker pull</code>测试在线镜像，直接加载</p>
<pre><code>root@xwhw:~# docker pull registry.openanolis.cn/openanolis/anolisos:8.10
8.10: Pulling from openanolis/anolisos
643ade85e06c: Pull complete 
ffe32c2f64f9: Pull complete 
Digest: sha256:27ab3c0286b3130814a8c9fb62b285ef25e9a971b24e692dc2b09bccc27e8785
Status: Downloaded newer image for registry.openanolis.cn/openanolis/anolisos:8.10
registry.openanolis.cn/openanolis/anolisos:8.10
root@xwhw:~# docker images
REPOSITORY                                   TAG       IMAGE ID       CREATED       SIZE
registry.openanolis.cn/openanolis/anolisos   8.10      3a1bd5b2e8a2   3 weeks ago   242MB
openjdk                                      8u342     6fbf41d7a679   2 years ago   520MB
</code></pre>
<p>至此，问题临时修复，整体用时：4个多小时</p>
<h2 id="4-附">4 附</h2>
<p>中间还换了一个<code>alpine:3</code>镜像来测试，报另外一个错误，如下:</p>
<pre><code>root@xwhw:~/docker_static# docker load -i alpine.arm.tar.gz 
a16e98724c05: Loading layer [==================================================&gt;]  3.993MB/3.993MB
invalid diffID for layer 0: expected "sha256:a16e98724c05975ee8c40d8fe389c3481373d34ab20a1cf52ea2accc43f71f4c", got "sha256:1ddcd170685e705ca533815243deb76a74c0bc63c98e0ac1bf7aa5a45cf16051"
</code></pre>
<p>使用<code>jq</code>命令查看json文件，得到diffID</p>
<p><code>jq . 8d591b0b7dea080ea3be9e12ae563eebf9869168ffced1cb25b2470a3d9fe15e.json</code></p>
<pre><code>  "rootfs": {
    "type": "layers",
    "diff_ids": [
      "sha256:a16e98724c05975ee8c40d8fe389c3481373d34ab20a1cf52ea2accc43f71f4c"
    ]
  },
</code></pre>
<p>若没有<code>jq</code>命令，可以采用如下命令替代</p>
<pre><code>python -m json.tool 8d591b0b7dea080ea3be9e12ae563eebf9869168ffced1cb25b2470a3d9fe15e.json
</code></pre>
<p>可以看到<code>alpine:3</code>镜像确实有一层镜像文件的<code>sha256</code>值是错误信息的<code>expected</code></p>
<pre><code>gzip -d -c layer.tar | sha256sum -
a16e98724c05975ee8c40d8fe389c3481373d34ab20a1cf52ea2accc43f71f4c  -
</code></pre>
<p>使用2.4版本的<code>unpigz</code>测试得到错误的sha256值</p>
<pre><code>unpigz.2.4 -d -c layer.tar | sha256sum -
unpigz.2.4: skipping: layer.tar: corrupted -- crc32 mismatch
unpigz.2.4: abort: internal threads error
1ddcd170685e705ca533815243deb76a74c0bc63c98e0ac1bf7aa5a45cf16051  -
</code></pre>
<p>可以手动执行看到输出的错误与<code>docker load</code>错误日志对上， 进一步验证是 <code>unpigz</code>命令在该环境的问题</p>
<h2 id="5-遗留2个问题后续处理">5 遗留2个问题，后续处理</h2>
<ol>
<li>
<p>unpigz的彻底修复</p>
</li>
<li>
<p>临时方案docker load 报<code>invalid reference format</code>错误</p>
</li>
</ol>

</div>
<div class="clear"></div>

		<p class="postfoot">
			posted on 
<span id="post-date" data-last-update-days="0.3356982849722222" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-10 18:16">2025-05-10 18:04</span>&nbsp;
<a href="https://www.cnblogs.com/i2u9">Simple Love</a>&nbsp;
阅读(<span id="post_view_count">3</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18869863);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18869863', targetLink: 'https://www.cnblogs.com/i2u9/p/18869863/docker-invalid-tar', title: 'ARM终端 KylinOS 容器镜像导入排障' })">举报</a>

		</p>
	