
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/aser1989/p/18891962" title="发布于 2025-06-02 15:59">
    <span role="heading" aria-level="2">Web性能优化：从 2 秒到200毫秒</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>前不久发布了个人笔记软件 <strong><code>Nebula Note</code></strong> 的Web预览版(<a href="https://note.aser1989.cn" target="_blank" rel="noopener nofollow">传送门</a>)，整体开发体验和使用效果都很满意。但作为Web工程师的我习惯性的打开了浏览器开发者工具的Network面板，主要想观察首次加载时间。2 秒+！显然，这个加载速度无法接受。于是便开始了一轮深入优化，目标是：将首页加载时间控制在 1 秒内，真正的实现秒开。</p>
<br>
<h2 id="性能瓶颈分析">性能瓶颈分析</h2>
<p>从浏览器开发者工具的Network面板上可以很明显的观察到是首屏资源体积过大所致。项目技术栈为：</p>
<ul>
<li>前端框架：<code>React</code></li>
<li>服务端框架：<code>NodeJs</code>、<code>Koa</code></li>
<li>构建工具：<code>Vite</code></li>
<li>UI 组件：自研的 <a href="https://ui.aser1989.cn/" target="_blank" rel="noopener nofollow">Nebula UI</a>，由于功能过于简单，所以没有用主流的UI库。</li>
</ul>
<p>排除自研代码后，问题可能出在集成的第三方组件上。使用打包分析工具检查产物体积，结果如下：</p>
<ul>
<li><code>react-codemirror</code>在线代码编辑器：体积最大</li>
<li><code>toast-ui</code> Markdown 编辑器：第二大</li>
<li>自研逻辑：占比极小</li>
</ul>
<p>使用<code>source-map-explorer</code>对构架结果进行分析，截图如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/362034/202505/362034-20250527214938038-1170890326.jpg" alt="打包分析图" loading="lazy"></p>
<br>
<h2 id="基础优化开启-brotli-压缩">基础优化：开启 Brotli 压缩</h2>
<p>当前服务部署在 <a href="https://www.cnblogs.com/aser1989/p/18797001" target="_blank">99 元云服务器</a> 上的 Kubernetes 环境中，所有服务通过自定义模板的 Deployment 文件部署（<a href="https://note.aser1989.cn/K8s%20Deployment%20Config" target="_blank" rel="noopener nofollow">配置传送门</a>），IngressRoute 中默认启用了Gzip 压缩。Gzip还是有点温柔，考虑进一步压榨传输体积，于是启用了Brotli压缩。构建结果对比测试效果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/362034/202505/362034-20250527222736199-1426732304.jpg" alt="压缩对比图" loading="lazy"></p>
<p>Brotli的实力毋庸置疑，比Gzip多压缩了近200KB。而且这次是在打包的时候就对资源进行了压缩，理论上应该能有效缩减服务器的响应时间。但即便如此页面加载时间仍未突破 1 秒。</p>
<br>
<h2 id="深度优化移除冗余语言包ast静态裁剪">深度优化：移除冗余语言包（AST静态裁剪）</h2>
<p>根据打包分析结果，<code>react-codemirror</code> 是最大“重量级选手”。主要原因是其默认引入了大量编程语言的语法高亮支持，而目前 <code>Nebula Note</code> 实际仅使用少数几种。因此，静态分析源码后，通过自定义 Vite 插件在构建阶段识别未使用的语言包，然后再利用 AST（抽象语法树）移除无关代码，最后打包体积减少1MB+。效果是相当的炸裂。优化后打包体积对比图如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/362034/202505/362034-20250527225507881-1378504552.jpg" alt="优化后图1" loading="lazy"></p>
<p>构建分析结果：</p>
<p><img src="https://img2024.cnblogs.com/blog/362034/202505/362034-20250527225709090-1640855760.jpg" alt="优化后图2" loading="lazy"></p>
<p>此轮优化后<code>react-codemirror</code> 从第一名降至第二，首屏加载时间也成功挤进 1 秒以内。最终成果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/362034/202505/362034-20250527230325154-1183933952.png" alt="秒开效果" loading="lazy"></p>
<br>
<h2 id="更近一步延迟加载非首屏组件">更近一步：延迟加载非首屏组件</h2>
<p>虽然“秒开”目标已实现，但从打包占比来看 <code>react-codemirror</code> 与 <code>toast-ui</code> 两大组件仍占据 <strong>近 80%</strong> 体积，并且这两个包在第一屏中是非必需的，或只需其一。于是采用 <code>React</code> 的 <code>Suspense</code> + <code>lazy</code> 机制，针对这两个组件实现延迟加载：</p>
<pre><code class="language-tsx">import React, { Suspense, lazy } from 'react';
import SuspenseLoading from '@client/components/suspenseLoading';
import type { Props as IProps } from './codeMirror';

const Editor = lazy(() =&gt; import('./codeMirror'));

export type Props = IProps;
const CodeEditor = (props: IProps) =&gt; {
    return (
        &lt;Suspense fallback={&lt;SuspenseLoading /&gt;}&gt;
            &lt;Editor {...props} /&gt;
        &lt;/Suspense&gt;
    );
};
export default CodeEditor;

</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/362034/202505/362034-20250529214122281-1121527515.png" alt="" loading="lazy"></p>
<p>使用<code>Suspense</code>后，懒加载的模块在构建的时候会被拆成独立的包，这对于首屏的加载非常的友好。通过对比可以看到不仅是<code>JS</code>文件从262KB降到了93KB，首次加载的<code>CSS</code>文件更是从83.5KB降到了2.1KB。</p>
<br>
<h2 id="最后">最后</h2>
<p>有一个很奇怪的现象，<code>CSS</code>的TTFB很不稳定，在约40ms和100ms间反复横跳。其他资源，尤其是Http请求相关的资源表现很稳定。有知道原因的朋友，还请在评论区分享一下。最后附上博客所述内容资源，欢迎点赞支持～✌️。</p>
<p>Nebula Note预览版：<a href="https://note.aser1989.cn" target="_blank" rel="noopener nofollow">https://note.aser1989.cn/</a><br>
Nebula Note源代码: <a href="https://github.com/ASER1989/nebula-note" target="_blank" rel="noopener nofollow">https://github.com/ASER1989/nebula-note</a></p>

</div>
<div id="MySignature" role="contentinfo">
    <br><br> <hr> <p><br>本文来自博客园<br>作者：<a href="https://www.cnblogs.com/aser1989/" target="_blank">ASER_1989</a><br>转载请注明原文链接：<a href="https://www.cnblogs.com/aser1989/p/18891962" target="_blank">https://www.cnblogs.com/aser1989/p/18891962</a></p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.29612572271527776" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-06-02 19:15">2025-06-02 15:59</span>&nbsp;
<a href="https://www.cnblogs.com/aser1989">ASER_1989</a>&nbsp;
阅读(<span id="post_view_count">96</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18891962);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18891962', targetLink: 'https://www.cnblogs.com/aser1989/p/18891962', title: 'Web性能优化：从 2 秒到200毫秒' })">举报</a>
</div>
	