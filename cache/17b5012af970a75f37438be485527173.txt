
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/uoky/p/19045004" title="发布于 2025-08-19 14:01">
    <span role="heading" aria-level="2">tcpdump linux 抓包 - 三次握手 四次挥手</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>前提：</p>
<ul>
<li>1. linux环境</li>
<li>2. 可正常使用tcpdump</li>
<li>使用（node）serve -p 10005 启动一个前端</li>
<li>前端存放一个静态1.txt文件，内容为test</li>
</ul>
<p>模拟：在linux环境中启动一个应用，端口10005（目前是使用node 的 serve，创建1.txt文件，serve -p 10005 发布出来，通过 curl http://ip:10005/1.txt访问）</p>
<p>tcpdump测试命令：</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">tcpdump -i any host **.***.**.** and port 10005 -S</pre>
</div>
<p>解释：使用tcptump时，默认在第三次握手时，会使用相对序列号，加上<span style="color: rgba(255, 0, 0, 1)"> -S</span>，即可<span style="color: rgba(255, 0, 0, 1)"><strong>禁用相对序列号</strong></span></p>
<p>新开窗口，执行</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">curl http://**.***.**.***:10005/1.txt</pre>
</div>
<p>命令返回结果：</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">dropped privs to tcpdump
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on any, link-type LINUX_SLL (Linux cooked v1), capture size 262144 bytes
15:26:32.268914 IP 主机名.34206 &gt; 主机名.目标服务名: Flags [S], seq 4218104573, win 65495, options [mss 65495,sackOK,TS val 1712344938 ecr 0,nop,wscale 7], length 0
15:26:32.268924 IP 主机名.目标服务名 &gt; 主机名.34206: Flags [S.], seq 3712382854, ack 4218104574, win 65483, options [mss 65495,sackOK,TS val 1712344938 ecr 1712344938,nop,wscale 7], length 0
15:26:32.268930 IP 主机名.34206 &gt; 主机名.目标服务名: Flags [.], ack 3712382855, win 512, options [nop,nop,TS val 1712344938 ecr 1712344938], length 0
15:26:32.268954 IP 主机名.34206 &gt; 主机名.目标服务名: Flags [P.], seq 4218104574:4218104662, ack 3712382855, win 512, options [nop,nop,TS val 1712344938 ecr 1712344938], length 88
15:26:32.270232 IP 主机名.目标服务名 &gt; 主机名.34206: Flags [P.], seq 3712382855:3712383164, ack 4218104662, win 512, options [nop,nop,TS val 1712344939 ecr 1712344938], length 309
15:26:32.270239 IP 主机名.34206 &gt; 主机名.目标服务名: Flags [.], ack 3712383164, win 510, options [nop,nop,TS val 1712344939 ecr 1712344939], length 0
15:26:32.270284 IP 主机名.34206 &gt; 主机名.目标服务名: Flags [F.], seq 4218104662, ack 3712383164, win 512, options [nop,nop,TS val 1712344939 ecr 1712344939], length 0
15:26:32.270504 IP 主机名.目标服务名 &gt; 主机名.34206: Flags [F.], seq 3712383164, ack 4218104663, win 512, options [nop,nop,TS val 1712344939 ecr 1712344939], length 0
15:26:32.270512 IP 主机名.34206 &gt; 主机名.目标服务名: Flags [.], ack 3712383165, win 512, options [nop,nop,TS val 1712344939 ecr 1712344939], length 0
</pre>
</div>
<p>前三行可忽略</p>
<pre class="brush:csharp;gutter:true;">dropped privs to tcpdump：权限降级（从 root 权限降级到<code>tcpdump</code>&nbsp;用户权限，减少安全风险，即使 tcpdump 被攻击，攻击者也只能获得有限权限）</pre>
<pre class="brush:csharp;gutter:true;">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode：提示当前 tcpdump 只显示基本信息以提高性能，并未输出详细信息，使用-v，-vv可输出完整信息</pre>
<pre class="brush:csharp;gutter:true;">listening on any, link-type LINUX_SLL (Linux cooked v1), capture size 262144 bytes：监听所有网络接口，链路类型为 Linux cooked v1 格式，每个数据包捕获的最大字节数（256KB）(262144/1024 = 256)&nbsp;</pre>
<p>第四行开始，三次握手开始：</p>
<table style="height: 145px; width: 831px" border="0">
<tbody>
<tr>
<td>Client端</td>
<td>&nbsp;</td>
<td>Server端</td>
</tr>
<tr>
<td>SYN标志位，seq=4218104573</td>
<td>-&gt;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&lt;-</td>
<td>SYN标志位，ACK标志位，seq=3712382854, ack =Client.seq+1=4218104574&nbsp;</td>
</tr>
<tr>
<td>ACK标志位，ack=Server.seq+1=3712382855</td>
<td>-&gt;</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>中间是发送数据</p>
<table border="0">
<tbody>
<tr>
<td>Client端</td>
<td>&nbsp;</td>
<td>Server端&nbsp;</td>
</tr>
<tr>
<td>&nbsp;PUSH标志位，ACK标志位，seq:4218104574:4218104662，88字节<br>（请求信息）</td>
<td>-&gt;&nbsp;</td>
<td>&nbsp;</td>



</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;&lt;-</td>
<td>&nbsp;PUSH标志位，ACK标志位，seq:3712382855:3712383164，309字节<br>（回复信息）</td>



</tr>
<tr>
<td>ACK标志位，ack=3712383164<br>（确认信息，已收到服务器发送的所有数据）</td>
<td>-&gt;</td>
<td>&nbsp;</td>



</tr>



</tbody>



</table>
<p>Client端向Server端发送数据，TCP载荷部分（88字节）：</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">GET /1.txt HTTP/1.1\r\n     (21 bytes)
Host: **.***.**.***:10005\r\n (29 bytes)
User-Agent: curl/7.61.1\r\n   (25 bytes)
Accept: */*\r\n              (13 bytes)
</pre>
</div>
<p>Server端回复数据，TCP载荷部分（309字节）：</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">HTTP/1.1 200 OK\r\n										(17 bytes)
Content-Length: 4\r\n									(19 bytes)
Content-Disposition: inline; filename="1.txt"\r\n		(47 bytes)
Accept-Ranges: bytes\r\n								(22 bytes)
ETag: "efd2d032d82a6f34d448f5124fbe835d598f3b5b"\r\n	(50 bytes)
Content-Type: text/plain; charset=utf-8\r\n				(41 bytes)
Vary: Accept-Encoding\r\n								(23 bytes)
Date: Tue, 19 Aug 2025 02:42:03 GMT\r\n					(37 bytes)
Connection: keep-alive\r\n								(24 bytes)
Keep-Alive: timeout=5\r\n								(23 bytes)
\r\n                         							(2 bytes)
test													(4 bytes)
</pre>
</div>
<p>第10行开始，四次挥手开始（TCP协议的优化机制，合并挥手）</p>
<table style="height: 222px; width: 962px" border="0">
<tbody>
<tr>
<td>Client端</td>
<td>&nbsp;</td>
<td>Server端</td>
</tr>
<tr>
<td>&nbsp;FIN标志位，ACK标志位，seq=4218104662, ack=3712383164<br><strong>（<strong>第一次挥手</strong>&nbsp;- 客户端主动发起关闭连接请求<br>【TCP FIN包通常会包含ACK标志来确认对方的数据】）</strong></td>
<td>-&gt;</td>
<td>&nbsp;</td>



</tr>
<tr>
<td>&nbsp;</td>
<td>&lt;-</td>
<td>&nbsp;FIN标志位，ACK标志位，seq=3712383164,ack=Client.seq +1=4218104663<br><strong>（<strong>第二次和第三次挥手的合并</strong>&nbsp;- 服务器确认客户端的关闭请求，同时发起自己的关闭请求）</strong></td>



</tr>
<tr>
<td>&nbsp;ACK标志位，ack=3712383165<br><strong><strong>（</strong>第四次挥手</strong>&nbsp;- 客户端确认服务器的关闭请求<strong>）</strong></td>
<td>&lt;-</td>
<td>&nbsp;</td>



</tr>



</tbody>



</table>
<p>详细说明示例如下：</p>
<div>
<div>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">15:26:32.268914 IP 主机名.34206 &gt; 主机名.目标服务名: Flags [S], seq 4218104573, win 65495, options [mss 65495,sackOK,TS val 1712344938 ecr 0,nop,wscale 7], length 0
</pre>
</div>
<p>数据包捕获的时间（小时:分钟:秒.微秒） 网络协议类型（IPv4） 源主机和端口 从源到目标 目标主机和端口 SYN 标志位（TCP 连接请求【三次握手的第一步】） TCP 序列号（标识数据包在数据流中的位置【0-4294967295（32位）】） 接收窗口大小 65495字节 TCP选项 [Maximum Segment Size（最大段大小）65495 字节 Selective Acknowledgment OK（选择性确认允许）【支持选择性确认机制，提高重传效率】 Timestamp Value（时间戳值） Echo Reply（回显应答）0【因为此时是第一次client-&gt;server，所以没有server回复的时间戳值，此时为默认值0】 No Operation（无操作）【填充字段，用于对齐选项，无意义】 Window Scale（窗口缩放因子）7（表示窗口大小乘以 2^7 = 128）【扩展窗口大小，支持更大的接收窗口】 ]</p>
<p>&nbsp;</p>
</div>
<br>
<table>
<thead>
<tr><th>标志</th><th>全称</th><th>含义</th><th>十六进制值</th><th>作用</th></tr>







</thead>
<tbody>
<tr>
<td><strong>S</strong></td>
<td>SYN</td>
<td>Synchronize</td>
<td>0x02</td>
<td>建立连接（三次握手开始）</td>







</tr>
<tr>
<td><strong>F</strong></td>
<td>FIN</td>
<td>Finish</td>
<td>0x01</td>
<td>释放连接（正常关闭）</td>







</tr>
<tr>
<td><strong>R</strong></td>
<td>RST</td>
<td>Reset</td>
<td>0x04</td>
<td>强制断开连接（异常关闭）</td>







</tr>
<tr>
<td><strong>P</strong></td>
<td>PSH</td>
<td>Push</td>
<td>0x08</td>
<td>推送数据（立即传送）</td>







</tr>
<tr>
<td><strong>.</strong></td>
<td>ACK</td>
<td>Acknowledge</td>
<td>0x10</td>
<td>确认收到数据</td>







</tr>
<tr>
<td><strong>U</strong></td>
<td>URG</td>
<td>Urgent</td>
<td>0x20</td>
<td>紧急指针有效</td>







</tr>







</tbody>







</table>







<br>　　　　　　　　　　　　　　　　　　　　　　　
<table>
<thead>
<tr><th>标志组合</th><th>含义</th><th>典型场景</th></tr>







</thead>
<tbody>
<tr>
<td><code>[S]</code></td>
<td>SYN</td>
<td>连接请求（第一次握手）</td>







</tr>
<tr>
<td><code>[S.]</code></td>
<td>SYN-ACK</td>
<td>连接确认（第二次握手）</td>







</tr>
<tr>
<td><code>[.]</code></td>
<td>ACK</td>
<td>确认包（第三次握手完成）</td>







</tr>
<tr>
<td><code>[P.]</code></td>
<td>PSH-ACK</td>
<td>推送数据包</td>







</tr>
<tr>
<td><code>[F.]</code></td>
<td>FIN-ACK</td>
<td>连接终止请求</td>







</tr>
<tr>
<td><code>[R]</code></td>
<td>RST</td>
<td>连接重置</td>







</tr>
<tr>
<td><code>[R.]</code></td>
<td>RST-ACK</td>
<td>带确认的连接重置</td>







</tr>







</tbody>







</table>







</div>
<div>注意：<br>1. 第三次握手时，与网上一些博客不一样（第一次是seq=x，第二次seq=y，第三次是seq=x+1）原因是因为，在第三次握手时，客户端发送的是一个纯 ACK 包，不携带任何数据，因此它的序列号不会递增&nbsp;<br>2. 第一次挥手时，与网上一些博客不一样（第一次挥手发送FIN），当发送FIN包时，<strong>必须同时确认</strong>之前接收到的数据，（TCP协议的规范要求），确保连接状态的一致性。即使之前已经发送过ACK，FIN包中仍需要包含最新的确认信息</div>
<div>3. 目标服务名：使用10005端口启动的应用，在tcpdump中默认显示的不是端口，是服务名，比如其为***，那么如何根据***找到其对应的端口？</div>
<div>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">getent services ***
</pre>
</div>
<p>4. 34206端口：临时端口（<span style="font-style: italic">Linux系统通常将&nbsp;</span><code style="font-style: italic">32768-60999</code><span style="font-style: italic">&nbsp;或&nbsp;</span><code style="font-style: italic">32768-65535</code><span style="font-style: italic">&nbsp;范围内的端口作为临时端口），</span>当客户端发起TCP连接时，操作系统会<strong style="font-style: italic">自动分配</strong>一个未被使用的临时端口，标识客户端的特定连接。每个新的TCP连接都会分配不同的临时端口</p>
<p>&nbsp;</p>
</div>
<div>&nbsp;</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.009722222222222222" data-date-updated="2025-08-19 14:15">2025-08-19 14:01</span>&nbsp;
<a href="https://www.cnblogs.com/uoky">人间春风意</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19045004);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19045004', targetLink: 'https://www.cnblogs.com/uoky/p/19045004', title: 'tcpdump linux 抓包 - 三次握手 四次挥手' })">举报</a>
</div>
        