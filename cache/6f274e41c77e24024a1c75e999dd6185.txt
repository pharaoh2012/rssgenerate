
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bianyibushu/p/18896046" title="发布于 2025-05-25 22:34">
    <span role="heading" aria-level="2">Serial-Studio 上位机编译全过程深度讲解，解决串口数据可视化工具</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/3644596/202505/3644596-20250525223354210-662595619.png" alt="Serial-Studio 上位机编译全过程深度讲解，解决串口数据可视化工具" class="desc_img">
        Serial-Studio是一个开源的串口数据可视化工具，广泛应用于物联网、嵌入式系统调试和数据分析等领域。从源代码编译Serial-Studio可以让您获取最新功能、进行自定义修改，或在特定环境下部署。本文将提供在Windows操作系统下从零开始编译Serial-Studio的详细步骤，并对每一个命令的含义和作用进行深入剖析。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="windows环境下编译serial-studio">Windows环境下编译Serial-Studio</h1>
<p>Serial-Studio是一个开源的串口数据可视化工具，广泛应用于物联网、嵌入式系统调试和数据分析等领域。从源代码编译Serial-Studio可以让您获取最新功能、进行自定义修改，或在特定环境下部署。本指南将提供在Windows操作系统下从零开始编译Serial-Studio的详细步骤，并对每一个命令的含义和作用进行深入剖析。</p>
<h2 id="1-编译环境准备">1. 编译环境准备</h2>
<p>在开始编译之前，我们需要确保系统中安装了所有必需的软件和工具。</p>
<h3 id="11-安装-chocolatey-windows-包管理器">1.1 安装 Chocolatey (Windows 包管理器)</h3>
<p>Chocolatey 是一个强大的Windows命令行包管理器，它能极大地简化软件的安装、更新和卸载过程。我们使用它来安装 Git 和其他可能的依赖。</p>
<ol>
<li>
<p><strong>打开 PowerShell (管理员权限)</strong>:</p>
<ul>
<li>在Windows搜索栏中输入 "PowerShell"，然后右键点击 "Windows PowerShell" 或 "终端"，选择 "以管理员身份运行"。这是因为安装系统级的包管理器需要提升权限。</li>
</ul>
</li>
<li>
<p><strong>设置执行策略</strong>:</p>
<p>PowerShell</p>
<pre><code class="language-bash">Set-ExecutionPolicy Bypass -Scope Process -Force
</code></pre>
<ul>
<li>命令含义
<ul>
<li><code>Set-ExecutionPolicy</code>: 这是 PowerShell 的一个核心 cmdlet（命令），用于设置脚本的执行策略。Windows 默认的安全设置可能不允许直接运行从互联网下载的脚本，以防止恶意软件。</li>
<li><code>Bypass</code>: 这是一种执行策略，它会绕过所有安全检查，允许脚本执行，而不会有任何警告或提示。</li>
<li><code>-Scope Process</code>: 指定该策略只在当前 PowerShell 进程中生效。这意味着当您关闭当前的 PowerShell 窗口后，系统会恢复到之前的执行策略，不会对系统范围造成永久性改变。</li>
<li><code>-Force</code>: 强制应用此策略，即使有警告或确认提示也会自动接受。</li>
</ul>
</li>
<li><strong>必要性</strong>: Chocolatey 的安装脚本是从互联网下载的，需要这个命令来暂时允许 PowerShell 执行这个脚本，否则安装会失败。</li>
</ul>
</li>
<li>
<p><strong>安装 Chocolatey</strong>:</p>
<p>PowerShell</p>
<pre><code class="language-bash">irm https://community.chocolatey.org/install.ps1 | iex
</code></pre>
<ul>
<li>
<p>命令含义</p>
<ul>
<li><code>irm</code> (Invoke-RestMethod): 这是一个 PowerShell cmdlet，用于向 Web 服务发送 HTTP 请求并获取响应。在这里，它用于从 <code>https://community.chocolatey.org/install.ps1</code> 下载 Chocolatey 的安装脚本内容。</li>
<li><code>|</code>: 这是 PowerShell 的管道操作符。它将 <code>irm</code> 命令的输出（即安装脚本的内容）传递给下一个命令。</li>
<li><code>iex</code> (Invoke-Expression): 这是一个 PowerShell cmdlet，它会将一个字符串作为命令或表达式来执行。在这里，它接收管道传递过来的安装脚本内容，并将其作为 PowerShell 脚本执行。</li>
</ul>
</li>
<li>
<p><strong>必要性</strong>: 这是 Chocolatey 官方推荐的安装方法，通过下载并执行其安装脚本来完成安装。</p>
<p><img src="https://www.bianyibushu.com/images/serialstudio/%E5%AE%89%E8%A3%85choco.png" alt="安装choco" loading="lazy"></p>
</li>
</ul>
</li>
<li>
<p><strong>验证安装</strong>:</p>
<p>PowerShell</p>
<pre><code class="language-bash">choco -v
</code></pre>
<ul>
<li>命令含义
<ul>
<li><code>choco</code>: 这是 Chocolatey 的主命令。</li>
<li><code>-v</code>: 这是 <code>choco</code> 命令的一个选项，用于显示 Chocolatey 的当前版本号。</li>
</ul>
</li>
<li><strong>必要性</strong>: 运行此命令可以确认 Chocolatey 是否成功安装，并检查其版本。如果显示版本号，则说明 Chocolatey 已准备就绪。</li>
</ul>
</li>
</ol>
<h3 id="12-安装-git-版本控制工具">1.2 安装 Git (版本控制工具)</h3>
<p>Git 是一个分布式版本控制系统，Serial-Studio 的源代码托管在 GitHub 上，我们需要使用 Git 将其克隆（下载）到本地。</p>
<ol>
<li>
<p>使用 Chocolatey 安装 Git</p>
<pre><code class="language-bash">choco install git -y
</code></pre>
<ul>
<li>
<p>命令含义</p>
<ul>
<li><code>choco install</code>: 这是 Chocolatey 的子命令，用于安装指定的软件包。</li>
<li><code>git</code>: 这是要安装的软件包的名称，对应于 Git 版本控制系统。</li>
<li><code>-y</code>: 这个选项表示“是”（Yes），它会自动确认所有安装提示，无需手动输入 <code>y</code>。这在自动化脚本中非常有用。</li>
</ul>
</li>
<li>
<p><strong>必要性</strong>: Git 是下载项目源代码的唯一途径，Chocolatey 提供了一种简便的安装方式。</p>
<p><img src="https://www.bianyibushu.com/images/serialstudio/%E5%AE%89%E8%A3%85git.png" alt="安装git" loading="lazy"></p>
</li>
</ul>
</li>
</ol>
<h3 id="13-下载项目源代码">1.3 下载项目源代码</h3>
<p>现在，我们可以使用 Git 将 Serial-Studio 的最新源代码下载到您的本地机器。</p>
<ol>
<li>
<p><strong>切换驱动器</strong>:</p>
<p>Bash</p>
<pre><code class="language-bash">cd f:
</code></pre>
<ul>
<li>命令含义
<ul>
<li><code>cd</code>: 这是“change directory”（改变目录）的缩写。</li>
<li><code>f:</code>: 指定要切换到的目标驱动器。这里选择 <code>F:</code> 盘，您可以根据自己的实际情况选择其他驱动器。</li>
</ul>
</li>
<li><strong>必要性</strong>: 将项目源代码存放在非系统盘（如 <code>C:</code> 盘）是一个良好的习惯，可以避免权限问题，并且通常不会影响系统性能。</li>
</ul>
</li>
<li>
<p><strong>创建项目目录</strong>:</p>
<pre><code class="language-bash">mkdir project 
</code></pre>
<ul>
<li>命令含义
<ul>
<li><code>mkdir</code>: 这是“make directory”（创建目录）的缩写。</li>
<li><code>project</code>: 这是您要创建的新目录的名称。</li>
</ul>
</li>
<li><strong>必要性</strong>: 创建一个专门的目录来存放所有开发项目，可以保持文件系统的整洁和组织性。</li>
</ul>
</li>
<li>
<p><strong>进入项目目录</strong>:</p>
<pre><code class="language-bash">cd project
</code></pre>
<ul>
<li>命令含义
<ul>
<li><code>cd project</code>: 切换到刚刚创建的 <code>project</code> 目录中。</li>
</ul>
</li>
<li><strong>必要性</strong>: <code>git clone</code> 命令会将仓库克隆到当前目录下，因此需要先进入目标目录。</li>
</ul>
</li>
<li>
<p><strong>克隆源代码</strong>:</p>
<pre><code class="language-bash">git clone https://github.com/Serial-Studio/Serial-Studio.git
</code></pre>
<ul>
<li>
<p>命令含义</p>
<ul>
<li><code>git clone</code>: 这是 Git 的一个核心命令，用于从远程仓库（GitHub）复制一个完整的版本库到本地。它会下载所有文件和项目的完整历史记录。</li>
<li><code>https://github.com/Serial-Studio/Serial-Studio.git</code>: 这是 Serial-Studio 项目在 GitHub 上的 HTTPS 仓库地址。</li>
</ul>
</li>
<li>
<p><strong>必要性</strong>: 这是获取 Serial-Studio 源代码的直接方式。执行此命令后，源代码将被下载到 <code>F:\project\Serial-Studio</code> 目录中。</p>
</li>
</ul>
</li>
</ol>
<h3 id="14-安装-qt-跨平台开发框架">1.4 安装 Qt (跨平台开发框架)</h3>
<p>Qt 是一个流行的跨平台C++图形用户界面（GUI）应用程序开发框架，Serial-Studio 是基于 Qt 开发的。因此，编译 Serial-Studio 必须安装 Qt。</p>
<ol>
<li>
<p><strong>下载 Qt 安装程序</strong>:</p>
<ul>
<li>
<p>访问 Qt 官方下载地址：</p>
<pre><code class="language-web-idl">https://www.qt.io/download-qt-installer
</code></pre>
</li>
<li>
<p><strong>必要性</strong>: Qt 官方安装程序是获取 Qt 框架的推荐方式。</p>
</li>
</ul>
</li>
<li>
<p><strong>运行安装程序并选择组件</strong>:</p>
<ul>
<li>
<p>下载后运行安装程序。</p>
</li>
<li>
<dl>
<dt>重要提示和必要性</dt>
<dd>在安装过程中，会看到一个组件选择界面。务必选择以下关键组件：</dd>
</dl>
<pre><code>Qt 6.8.3
MinGW
MSVC
CMake
Ninja
</code></pre>
<p><img src="https://www.bianyibushu.com/images/serialstudio/QT%E5%AE%89%E8%A3%851.png" alt="QT安装1" loading="lazy"></p>
<p><img src="https://www.bianyibushu.com/images/serialstudio/QT%E5%AE%89%E8%A3%852.png" alt="QT安装2" loading="lazy"></p>
<p><img src="https://www.bianyibushu.com/images/serialstudio/QT%E5%AE%89%E8%A3%853.png" alt="QT安装3" loading="lazy"></p>
<p><img src="https://www.bianyibushu.com/images/serialstudio/QT%E5%AE%89%E8%A3%854.png" alt="QT安装4" loading="lazy"></p>
<p><img src="https://www.bianyibushu.com/images/serialstudio/QT%E5%AE%89%E8%A3%855.png" alt="QT安装5" loading="lazy"></p>
<p><img src="https://www.bianyibushu.com/images/serialstudio/QT%E5%AE%89%E8%A3%856.png" alt="QT安装6" loading="lazy"></p>
<p><img src="https://www.bianyibushu.com/images/serialstudio/QT%E5%AE%89%E8%A3%857.png" alt="QT安装7" loading="lazy"></p>
<p><img src="https://www.bianyibushu.com/images/serialstudio/QT%E5%AE%89%E8%A3%858.png" alt="QT安装8" loading="lazy"></p>
<p><img src="https://www.bianyibushu.com/images/serialstudio/QT%E5%AE%89%E8%A3%859.png" alt="QT安装9" loading="lazy"></p>
</li>
</ul>
</li>
</ol>
<h3 id="15-安装-visual-studio-c-开发环境">1.5 安装 Visual Studio (C++ 开发环境)</h3>
<p>尽管我们使用 MinGW 编译器，但 Visual Studio 提供了一些必要的 C++ 构建工具和库，这些可能在编译过程中被 CMake 发现和使用。</p>
<ol>
<li>
<p><strong>下载 Visual Studio 安装程序</strong>:</p>
<ul>
<li>访问 Visual Studio 官方网站（例如 Visual Studio 2022 Community）。</li>
<li><strong>必要性</strong>: 某些 C++ 项目可能依赖于 Visual Studio 提供的特定头文件或库，即使最终使用的是 MinGW 编译器。</li>
</ul>
</li>
<li>
<p><strong>运行安装程序并选择工作负载</strong>:</p>
<ul>
<li>
<p>在安装过程中，务必选择并安装</p>
<p>"使用 C++ 的桌面开发 (Desktop development with C++)"</p>
</li>
<li>
<p><strong>必要性</strong>: 这个工作负载包含了编译 C++ 应用程序所需的核心编译器工具链、库文件、调试器和构建工具。它是确保 C++ 项目顺利编译的关键。</p>
<p><img src="https://www.bianyibushu.com/images/serialstudio/%E5%AE%89%E8%A3%85C++%E7%8E%AF%E5%A2%83.png" alt="安装C++环境" loading="lazy"></p>
</li>
</ul>
</li>
</ol>
<h2 id="2-配置环境变量">2. 配置环境变量</h2>
<p>环境变量是操作系统中用来指定系统运行环境的一些参数。正确配置 PATH 环境变量，可以让系统在执行命令时自动找到对应的可执行文件，而无需输入完整的路径。</p>
<p>根据您的实际安装路径，将以下路径添加到系统环境变量 <code>Path</code> 中。在“系统属性”-&gt;“环境变量”中完成。</p>
<ul>
<li>
<pre><code>F:\Qt\6.8.3\mingw_64\bin
</code></pre>
<p>: 这是 Qt 6.8.3 版本下 MinGW 64 位编译器的可执行文件目录。其中包含 qmake等 Qt 工具以及 MinGW 的 bin目录。</p>
</li>
<li>
<pre><code>F:\Qt\6.8.3\msvc2022_64\bin
</code></pre>
<p>: 这是 Qt 6.8.3 版本下 MSVC 2022 64 位编译器的可执行文件目录。如果使用 MSVC 编译器，则此路径很重要。</p>
</li>
<li>
<pre><code>F:\Qt\6.8.3\android_x86_64\bin
</code></pre>
<p>: 这是 Qt 6.8.3 版本下 Android x86_64 架构的可执行文件目录。虽然对于桌面应用编译并非必需，但如果进行 Android 开发，添加此路径会很方便。</p>
</li>
<li>
<pre><code>F:\Qt\Tools\mingw1310_64\bin
</code></pre>
<p>: 这是 MinGW 13.1.0 64 位编译器的独立安装目录（如果 Qt 安装器单独提供了这个工具）。这个路径包含 gcc.exe和g++.exe 等编译器核心可执行文件。</p>
</li>
<li>
<pre><code>F:\Qt\Tools\CMake_64\bin
</code></pre>
<p>: 这是 CMake 工具的安装目录。添加此路径后，可以在任何命令行位置直接运行 cmake命令。</p>
</li>
<li>
<pre><code>F:\Qt\Tools\Ninja
</code></pre>
<p>: 这是 Ninja 构建工具的安装目录。添加此路径后，可以直接运行 ninja命令。</p>
</li>
<li>
<pre><code>F:\Qt\Tools\QtInstallerFramework\4.9\bin
</code></pre>
<p>: 这是 Qt 安装框架工具的目录，可能包含一些用于打包或部署的工具。</p>
</li>
<li>
<pre><code>C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\bin\HostX64\x64
</code></pre>
<p>: 这是 Visual Studio 2022 Community 版中 MSVC C++ 编译器和相关工具链的路径。路径中的版本号（如 14.29.30133）可能因 Visual Studio 更新而有所不同，请务必根据实际的安装路径进行调整。</p>
</li>
</ul>
<p><img src="https://www.bianyibushu.com/images/serialstudio/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="配置环境变量" loading="lazy"></p>
<p><strong>重要提示</strong>:</p>
<ul>
<li>添加或修改环境变量后，请<strong>关闭所有已打开的命令行或 PowerShell 窗口</strong>，然后重新打开。这是因为环境变量是在进程启动时加载的，现有进程不会自动感知到新的环境变量。</li>
</ul>
<h2 id="3-执行编译">3. 执行编译</h2>
<p>所有必要的工具和环境都已准备就绪，现在可以开始编译 Serial-Studio。</p>
<ol>
<li>
<p><strong>进入编译目录</strong>:</p>
<p>Bash</p>
<pre><code class="language-bash">cd F:\project\Serial-Studio-master\Serial-Studio-master\build
</code></pre>
<ul>
<li>
<p>命令含义</p>
<ul>
<li><code>cd</code>: 切换目录。</li>
<li><code>F:\project\Serial-Studio-master\Serial-Studio-master\build</code>: 这是 Serial-Studio 项目中用于存放构建文件和执行编译命令的目录。通常，一个项目会将源代码放在根目录，而将编译过程中产生的中间文件和最终的可执行文件放在一个独立的 <code>build</code> 目录中，以保持源代码的干净。</li>
</ul>
</li>
<li>
<p><strong>必要性</strong>: CMake 和 Ninja 都会在当前目录下生成或查找构建文件，因此必须先进入正确的 <code>build</code> 目录。</p>
</li>
</ul>
</li>
<li>
<p><strong>执行 CMake 配置</strong>:</p>
<pre><code class="language-bash">cmake -G "Ninja" -DCMAKE_MAKE_PROGRAM=F:\Qt\Tools\Ninja\ninja.exe -DCMAKE_C_COMPILER=F:\Qt\Tools\mingw1310_64\bin\gcc.exe -DCMAKE_CXX_COMPILER=F:\Qt\Tools\mingw1310_64\bin\g++.exe -DCMAKE_PREFIX_PATH=F:\Qt\6.8.3\mingw_64 ..
</code></pre>
<p><strong>命令含义</strong> 如下：</p>
<ul>
<li>
<p><code>cmake</code>: 这是一个跨平台的构建系统生成器。它不直接编译代码，而是读取项目根目录下的 <code>CMakeLists.txt</code> 文件（项目构建规则），然后根据您指定的生成器来生成特定构建系统（如 Ninja、Visual Studio 解决方案、Makefile 等）所需的文件。</p>
</li>
<li>
<p><code>-G "Ninja"</code>: 指定 CMake 使用 "Ninja" 作为构建系统生成器。这意味着 CMake 会生成 <code>build.ninja</code> 文件以及其他 Ninja 所需的配置。Ninja 是一个轻量级、专注于速度的构建系统。</p>
</li>
<li>
<p><code>-DCMAKE_MAKE_PROGRAM=F:\Qt\Tools\Ninja\ninja.exe</code>: 这是一个 CMake 变量设置。它明确告诉 CMake <code>ninja</code> 可执行文件的完整路径。这在 <code>ninja</code> 没有添加到系统 PATH 或系统中有多个 <code>ninja</code> 版本时尤其重要，确保 CMake 找到正确的构建工具。</p>
</li>
<li>
<p><code>-DCMAKE_C_COMPILER=F:\Qt\Tools\mingw1310_64\bin\gcc.exe</code>: 这是一个 CMake 变量设置。它明确指定用于编译 C 语言源代码的编译器路径。这里指向的是 MinGW 的 <code>gcc.exe</code>。这确保 CMake 在配置项目时，使用您指定的 MinGW C 编译器。</p>
</li>
<li>
<p><code>-DCMAKE_CXX_COMPILER=F:\Qt\Tools\mingw1310_64\bin\g++.exe</code>: 这是一个 CMake 变量设置。它明确指定用于编译 C++ 语言源代码的编译器路径。这里指向的是 MinGW 的 <code>g++.exe</code>。这确保 CMake 在配置项目时，使用您指定的 MinGW C++ 编译器。</p>
</li>
<li>
<p><code>-DCMAKE_PREFIX_PATH=F:\Qt\6.8.3\mingw_64</code>: 这是一个 CMake 变量设置。它告诉 CMake 在哪里查找外部库和包。在这里，它指向 Qt 库的安装路径（特别是 MinGW 编译器的 Qt 版本）。CMake 会在此路径下搜索 Qt 的配置信息（如 <code>Qt6Config.cmake</code>），从而找到所有必需的 Qt 模块、头文件和库文件，以便正确地链接 Serial-Studio 对 Qt 的依赖。</p>
</li>
<li>
<p><code>..</code>: 这表示当前目录的父目录。在 <code>build</code> 目录中执行 <code>cmake ..</code> 意味着 CMake 会在 <code>build</code> 目录的上一级目录（即 <code>F:\project\Serial-Studio-master\Serial-Studio-master</code>，也就是 Serial-Studio 的源代码根目录）中查找 <code>CMakeLists.txt</code> 文件，这个文件定义了整个项目的构建规则。</p>
</li>
<li>
<p><strong>必要性</strong>: CMake 配置是编译的第一步。它分析项目的依赖关系、目标平台和编译器，并生成后续构建工具（Ninja）所需的指令，确保所有源文件都能被正确地编译和链接。</p>
</li>
</ul>
</li>
<li>
<p><strong>执行 Ninja 编译</strong>:</p>
<p>Bash</p>
<pre><code>ninja
</code></pre>
<ul>
<li>
<p>命令含义</p>
<ul>
<li><code>ninja</code>: 这是 Ninja 构建工具的主命令。在 CMake 成功生成 <code>build.ninja</code> 文件后，<code>ninja</code> 命令会读取这些文件，并根据其中的指令执行实际的编译操作。它会调用 <code>gcc</code>/<code>g++</code> 来编译各个源文件，然后调用链接器将编译后的对象文件合并成最终的可执行程序。</li>
</ul>
</li>
<li>
<p><strong>必要性</strong>: <code>ninja</code> 是执行实际编译过程的命令。它负责并行化编译任务、管理文件依赖关系，并最终生成 Serial-Studio 的可执行文件。</p>
<p><img src="https://www.bianyibushu.com/images/serialstudio/%E7%BC%96%E8%AF%91%E6%88%90%E5%8A%9F.png" alt="编译成功" loading="lazy"></p>
</li>
</ul>
</li>
</ol>
<h2 id="4-编译成功">4. 编译成功</h2>
<p>当 <code>ninja</code> 命令执行完毕，并且命令行中没有显示任何致命错误信息，那么恭喜，Serial-Studio 已经成功编译完成！</p>
<p>编译生成的可执行文件通常位于您 <code>build</code> 目录的某个子目录中，我的在F:\project\Serial-Studio-master\Serial-Studio-master\build\app中。可以在这个目录中找到 <code>Serial-Studio.exe</code>并运行它。</p>
<p><img src="https://www.bianyibushu.com/images/serialstudio/%E7%BC%96%E8%AF%91%E5%AE%8C%E6%88%90%E6%96%87%E4%BB%B6.png" alt="编译完成文件" loading="lazy"></p>
<p>双击 <code>Serial-Studio.exe</code>并运行结果</p>
<p><img src="https://www.bianyibushu.com/images/serialstudio/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="运行结果" loading="lazy"></p>
<p>通过本指南的详细步骤和命令解析，希望能帮助您顺利完成 Serial-Studio 的编译过程，并更深入地理解其背后的构建机制。</p>
<h2 id="5异常处理">5.异常处理</h2>
<h3 id="51-缺少qt组件">5.1 缺少QT组件</h3>
<p>在安装QT时有些组件未安装,导致编译时失败报错</p>
<p><img src="https://www.bianyibushu.com/images/serialstudio/e-%E7%BC%96%E8%AF%91%E6%8A%A5%E9%94%99-%E7%BC%BA%E5%B0%91%E7%BB%84%E4%BB%B6.png" alt="e-编译报错-缺少组件" loading="lazy"></p>
<p><strong>解决方法:</strong> 在开始菜单下找到Qt Maintenance Tool这个工具打开后即可添加需要则组件</p>
<p><img src="https://www.bianyibushu.com/images/serialstudio/e-%E7%BC%96%E8%AF%91%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B31.png" alt="e-编译报错解决1" loading="lazy"></p>
<p>在Qt维护工具中选择添加或移除组件的选项</p>
<p><img src="https://www.bianyibushu.com/images/serialstudio/e-%E7%BC%96%E8%AF%91%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B32.png" alt="e-编译报错解决2" loading="lazy"></p>
<p>搜索缺失的组件名称,勾选所对应版本需要安装的组件,点击下一步进行安装</p>
<p><img src="https://www.bianyibushu.com/images/serialstudio/e-%E7%BC%96%E8%AF%91%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B33.png" alt="e-编译报错解决3" loading="lazy"></p>
<h3 id="52-运行时缺失dll文件">5.2 运行时缺失dll文件</h3>
<p>编译完成后在运行时缺失文件,大部分的情况时环境变量的配置问题,添加环境变量即可解决,如果无法解决可以采用方式二,便用windeployqt.exe部署工具将运行所需的文件复制到项目文件夹下,此两种方式能解决大多数的运行失败问题</p>
<p><img src="https://www.bianyibushu.com/images/serialstudio/e-%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99-%E7%BC%BA%E5%B0%91%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97.png" alt="" loading="lazy"></p>
<p><strong>解决方案一</strong>: 添加环境变量</p>
<p><img src="https://www.bianyibushu.com/images/serialstudio/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="" loading="lazy"></p>
<p><strong>解决方案二:</strong> 使用windeployqt.exe部等工具复制文件</p>
<ul>
<li>windeployqt.exe;这是 Qt提供的部署工具。它会分析您指定的 Qt应用程序的可执行文件(Serlal-studio.exe)，找出它所依赖的所有 QtDLLs、插件、翻译<br>
文件等。</li>
<li>windeploygt 会自动将所有必要的 Qt DLLs(包括 Qt6Core.dl, Qt6Gui.dl, Qt6widgets.dl, Qt6Bluetooth.d 等)、所需的插件目录(如 platforms,sqldrivers, bearer 等)和翻译文件复制到 Serial-studio.exe 所在的目录(F:projectiSerial-Studio\build\app).</li>
</ul>
<pre><code class="language-bash">   cd F:\Qt16.8.3\mingw_64\bin
   windeployqt.exe F:\project\serial-studio\build\appiserial-studio.exe
</code></pre>
<p><img src="https://www.bianyibushu.com/images/serialstudio/e-%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B31.png" alt="e-运行报错解决1" loading="lazy"></p>
<p><strong>全文完</strong>，请大家专注我们的B站视频号和微信公众号，如果对编译过程有疑问或者想与大家一起讨论开源软件的定制化，请大家加入我们的QQ群畅所欲言。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.23732445214814815" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-25 22:34">2025-05-25 22:34</span>&nbsp;
<a href="https://www.cnblogs.com/bianyibushu">编译部署小技巧</a>&nbsp;
阅读(<span id="post_view_count">36</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18896046);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18896046', targetLink: 'https://www.cnblogs.com/bianyibushu/p/18896046', title: 'Serial-Studio 上位机编译全过程深度讲解，解决串口数据可视化工具' })">举报</a>
</div>
        