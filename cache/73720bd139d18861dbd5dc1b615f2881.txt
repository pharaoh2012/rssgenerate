
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ibigboy/p/18803885" title="发布于 2025-04-01 12:48">
    <span role="heading" aria-level="2">探秘 MySQL 索引底层原理，解锁数据库优化的关键密码(下)</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>上两篇文章<a href="https://mp.weixin.qq.com/s?__biz=MzUxNTQyOTIxNA==&amp;mid=2247486414&amp;idx=1&amp;sn=d94fe94b1386980dfcb5cb5554a1ed63&amp;scene=21#wechat_redirect" target="_blank" data-itemshowtype="0" data-linktype="2" rel="noopener nofollow">《探秘MySQL索引底层原理，解锁数据库优化的关键密码(上)》</a>和<a href="https://mp.weixin.qq.com/s?__biz=MzUxNTQyOTIxNA==&amp;mid=2247486432&amp;idx=1&amp;sn=eface41cc7f4002b58b5835a34b539a5&amp;scene=21#wechat_redirect" target="_blank" data-itemshowtype="0" data-linktype="2" rel="noopener nofollow">《探秘 MySQL 索引底层原理，解锁数据库优化的关键密码(中)》</a>主要讲了<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>MySQL</span></code><span>索引的底层原理，且对比了<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>B+Tree</span></code><span>作为索引底层数据结构相对于其他数据结构（二叉树、红黑树、B树）的优势，最后还通过图示的方式描述了索引的存储结构。</span></span></span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>但之前都是基于单值索引，由于文章篇幅原因也只是在文末略提了一下<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>联合索引</span></code><span>，并没有大篇幅的展开讨论，所以这篇文章就单独去讲一下联合索引在B+树上的存储结构。</span></span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>本文主要讲解的内容有：</span></p>
<ul class="list-paddingleft-1" data-darkreader-inline-color="" data-darkreader-inline-border="">
<li><span data-darkreader-inline-color="" data-darkreader-inline-border="">联合索引在B+树上的存储结构</span></li>
<li><span data-darkreader-inline-color="" data-darkreader-inline-border="">联合索引的查找方式</span></li>
<li><span data-darkreader-inline-color="" data-darkreader-inline-border="">为什么会有最左前缀匹配原则？</span></li>
<li><span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;box-sizing: border-box; border-width: 0px; border-style: solid; border-color: hsl(var(--border)); color: rgb(10, 10, 10); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; text-align: left; line-height: 1.75; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \&quot;PingFang SC\&quot;, Cambria, Cochin, Georgia, Times, \&quot;Times New Roman\&quot;, serif; font-size: 15px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;list&quot;,{&quot;type&quot;:&quot;ul&quot;,&quot;style&quot;:&quot;box-sizing: border-box; border-width: 0px; border-style: solid; border-color: hsl(var(--border)); list-style: none; margin: 0px; padding: 0px 0px 0px 1.5em; text-align: left; line-height: 1.75; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \&quot;PingFang SC\&quot;, Cambria, Cochin, Georgia, Times, \&quot;Times New Roman\&quot;, serif; font-size: 15px; color: rgb(63, 63, 63);&quot;,&quot;class&quot;:&quot;list-paddingleft-1&quot;},&quot;listitem&quot;,{&quot;style&quot;:&quot;box-sizing: border-box; border-width: 0px; border-style: solid; border-color: hsl(var(--border)); text-align: left; line-height: 1.75; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \&quot;PingFang SC\&quot;, Cambria, Cochin, Georgia, Times, \&quot;Times New Roman\&quot;, serif; font-size: 15px; text-indent: -1em; display: block; margin: 0.5em 8px; color: rgb(63, 63, 63);&quot;},&quot;para&quot;,null]" data-darkreader-inline-color="" data-darkreader-inline-border="">实战</span></li>
</ul>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>在分享这篇文章之前，我在网上查了关于MySQL联合索引在B+树上的存储结构这个问题，翻阅了很多博客和技术文章，其中有几篇讲述的与事实相悖。庆幸的是看到搜索引擎列出的有一条是来自思否社区的问答，有答主回答了这个问题，贴出一篇文章和一张图以及一句简单的描述。PS：贴出的文章链接已经打不开了。</span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>所以在这样的条件下这篇文章就诞生了。</span></p>
<h2 data-heading="true" data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-boxshadow="" data-darkreader-inline-border=""><span>联合索引的存储结构</span></h2>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>下面就引用思否社区的这个问答来展开我们今天要讨论的联合索引的存储结构的问题。</span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>来自思否的提问，联合索引的存储结构(https://segmentfault.com/q/1010000017579884)有码友回答如下：</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1205690/202504/1205690-20250401124650573-1730406452.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<blockquote data-darkreader-inline-color="" data-darkreader-inline-border-left="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-boxshadow=""><span>联合索引 bcd , 在索引树中的样子如图 ， 在比较的过程中 ，先判断 b 再判断 c 然后是 d</span></blockquote>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>由于回答只有一张图一句话，可能会让你有点看不懂，所以我们就借助前人的肩膀用这个例子来更加细致的讲探寻一下联合索引在B+树上的存储结构吧。</span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>首先，表T1有字段<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>a,b,c,d,e</span></code><span>，其中a是主键，除e为<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>varchar</span></code><span>其余为<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>int</span></code><span>类型，并创建了一个联合索引<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>idx_t1_bcd(b,c,d)</span></code><span>。上图树高只有两层不容易理解，下面是假设的表数据以及我对其联合索引在B+树上的结构图的改进。PS：基于<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>InnoDB</span></code><span>存储引擎。</span></span></span></span></span></span></p>
<p><span data-darkreader-inline-color=""><span data-darkreader-inline-color="">假设T1表有如下数据：<span data-darkreader-inline-color=""><br></span></span></span></p>
<p><img src="https://img2024.cnblogs.com/blog/1205690/202504/1205690-20250401124610407-588624242.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p style="text-align: center"><em><span data-darkreader-inline-color=""><span data-darkreader-inline-color=""><span data-darkreader-inline-color="">T1表</span></span></span></em></p>
<p><span data-darkreader-inline-color=""><span data-darkreader-inline-color=""><span data-darkreader-inline-color=""><span data-darkreader-inline-color="">那么基于联合索引<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>(b、c、d)</span></code><span data-darkreader-inline-color="">构建的B+树大致如下图所示（拿根节点的第一个来说，1 1 4即是b=1,c=1,d=4）<span data-darkreader-inline-color=""><br></span></span></span></span></span></span></p>
<p><img src="https://img2024.cnblogs.com/blog/1205690/202504/1205690-20250401124555770-161589973.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p style="text-align: center"><em><span data-darkreader-inline-color=""><span data-darkreader-inline-color=""><span data-darkreader-inline-color=""><span data-darkreader-inline-color=""><span data-darkreader-inline-color=""><span data-darkreader-inline-color="">bcd联合索引在B+树上的结构图</span></span></span></span></span></span></em></p>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>通过这两张图我们脑海里对联合索引在B+树上的存储结构应该就有了个大概的认识。</span></p>
<p data-darkreader-inline-border=""><span data-darkreader-inline-color="">我们先看T1表，它的主键a我们暂且将它设为<strong data-darkreader-inline-color="" data-darkreader-inline-border=""><span>整型自增</span></strong><span><span data-darkreader-inline-color="">的（<span data-darkreader-inline-color="">PS：至于为什么是整型自增上两篇文章有详细介绍这里不再赘述<span data-darkreader-inline-color="">），<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>InnoDB</span></code><span data-darkreader-inline-color="">会使用主键索引在B+树维护索引和数据文件，然后我们创建了一个联合索引<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>（b，c，d）</span></code><span data-darkreader-inline-color="">也会生成一个索引树，同样也是B+树的结构，只不过它的叶子节点data部分存储的是联合索引所在行的主键值（<span data-darkreader-inline-color="">上图叶子节点紫色背景部分<span data-darkreader-inline-color="">），至于<strong data-darkreader-inline-color="" data-darkreader-inline-border=""><span>为什么辅助索引data部分存储主键值</span></strong><span data-darkreader-inline-color="">上篇文章也有介绍，感兴趣或还没看的可以去看一下。</span></span></span></span></span></span></span></span></span></span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>好了大致情况都介绍完了，下面我们结合这两张图来解释一下。</span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>与单列索引相比，联合索引只不过比其多了几列，而且这些索引列全部都出现在索引树上。对于联合索引，存储引擎首先会根据第一个索引列排序，如上图我们可以看B+树的最后一层，单看第一个索引列，即叶子节点的第一行<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>1、1、5、12、13、13、13</span></code><span>显然是趋势递增的。即：<strong data-darkreader-inline-color="" data-darkreader-inline-border=""><span>如果第一列相等则再根据第二列排序</span></strong><span>，依此类推就构成了上图的索引树。<span><br><span>另外，我们看，第二行和第三行，即联合索引的c列和d列，分别是<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>1、5、3、14、12、16、16</span></code><span>和<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>4、4、6、3、4、1、5</span></code><span>，这里就又没有了<strong data-darkreader-inline-color="" data-darkreader-inline-border=""><span>趋势递增</span></strong><span>。而在b列相同时，c列才会趋势递增，如b=1时的<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>1、5</span></code><span>，b=13时的<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>12、16、16</span></code><span>，同理c列相同时，d列才会趋势递增。这也就是为什么要遵循最左前缀原则。</span></span></span></span></span></span></span></span></span></span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-border="">&nbsp;</p>
<h3 data-heading="true" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-color="">小结</h3>
<h4 data-heading="true" data-darkreader-inline-color="" data-darkreader-inline-border="">基于B+树的多列键值组织</h4>
<p data-darkreader-inline-color="" data-darkreader-inline-border="">联合索引将多个字段组合成一个键值，按照字段定义的顺序构建B+树。例如，联合索引<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border="">(b, c, d)</code>的每个节点中，键值按b→c→d的顺序排列：</p>
<ul data-darkreader-inline-color="" data-darkreader-inline-border="">
<li data-darkreader-inline-border=""><strong data-darkreader-inline-color="" data-darkreader-inline-border="">非叶子节点</strong>：存储所有字段的键值（如b, c, d的组合）及指向子节点的指针。</li>
<li data-darkreader-inline-border=""><strong data-darkreader-inline-color="" data-darkreader-inline-border="">叶子节点</strong>：存储完整的联合索引键值（b, c, d）和对应的主键值（用于回表查询）。</li>




</ul>
<h4 data-heading="true" data-darkreader-inline-color="" data-darkreader-inline-border="">排序规则</h4>
<ul data-darkreader-inline-color="" data-darkreader-inline-border="">
<li data-darkreader-inline-border=""><strong data-darkreader-inline-color="" data-darkreader-inline-border="">全局有序性</strong>：所有节点按第一列（最左列）排序，若第一列值相同，则按第二列排序，依此类推。例如，(b=1, c=2)会排在(b=1, c=3)之前</li>
<li data-darkreader-inline-border=""><strong data-darkreader-inline-color="" data-darkreader-inline-border="">局部有序性</strong>：同一层级内，每个节点存储的键值按顺序排列，支持快速范围查询。</li>




</ul>
<h4 data-heading="true" data-darkreader-inline-color="" data-darkreader-inline-border="">物理存储优化</h4>
<ul data-darkreader-inline-color="" data-darkreader-inline-border="">
<li data-darkreader-inline-border="">B+树的非叶子节点不存储实际数据，仅存储键值和指针，单个磁盘页（如16KB）可容纳更多键值，减少树的高度（通常3-4层即可支持千万级数据）。</li>
<li data-darkreader-inline-border="">叶子节点通过双向链表连接，便于范围遍历。</li>




</ul>
<p data-darkreader-inline-color="" data-darkreader-inline-border="">&nbsp;</p>
<h2 data-heading="true" data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-boxshadow="" data-darkreader-inline-border=""><span>联合索引的查找方式</span></h2>
<h3 data-heading="true" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-color="">精确匹配查询</h3>
<ul data-darkreader-inline-color="" data-darkreader-inline-border="">
<li data-darkreader-inline-border=""><strong data-darkreader-inline-color="" data-darkreader-inline-border="">最左前缀匹配原则</strong>：查询条件必须从联合索引的最左列开始。例如，索引&nbsp;<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border="">(b, c, d)&nbsp;</code>的查询：</li>
<ul data-darkreader-inline-border="">
<li data-darkreader-inline-border=""><strong data-darkreader-inline-color="" data-darkreader-inline-border="">有效条件</strong>：&nbsp;<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border="">WHERE b=1</code>、&nbsp;<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border="">WHERE b=1 AND c=2</code>&nbsp;、&nbsp;<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border="">WHERE b=1 AND c=2 AND d=3</code>。</li>
<li data-darkreader-inline-border=""><strong data-darkreader-inline-color="" data-darkreader-inline-border="">失效条件</strong>：&nbsp;<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border="">WHERE c=2</code>&nbsp;、&nbsp;<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border="">WHERE d=3</code>&nbsp;（因无法利用全局有序性。</li>




</ul>
<li data-darkreader-inline-border=""><strong data-darkreader-inline-color="" data-darkreader-inline-border="">查询优化器调整</strong>：即使条件顺序与索引不同（如&nbsp;<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border="">WHERE c=2 AND b=1</code>&nbsp;），优化器会自动调整为&nbsp;<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border="">b=1 AND c=2</code>&nbsp;以匹配索引 。</li>




</ul>
<h3 data-heading="true" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-color="">范围查询</h3>
<ul data-darkreader-inline-color="" data-darkreader-inline-border="">
<li data-darkreader-inline-border="">范围查询（如 b&gt;10 ）会利用索引，但后续字段无法继续匹配。例如，&nbsp;<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border="">WHERE b&gt;10 AND c=2</code>&nbsp;中，只有 b&gt;10 走索引， c=2 需在结果集中过滤 。</li>
<li data-darkreader-inline-border="">范围查询后的字段索引失效（如&nbsp;<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border="">WHERE b=1 AND c&gt;2 AND d=3</code>&nbsp;， d 无法使用索引）。</li>




</ul>
<h3 data-heading="true" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-color="">覆盖索引与回表</h3>
<ul data-darkreader-inline-color="" data-darkreader-inline-border="">
<li data-darkreader-inline-border=""><strong data-darkreader-inline-color="" data-darkreader-inline-border="">覆盖索引</strong>：若查询字段全部在联合索引中（如&nbsp;<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border="">SELECT a, b FROM T1</code>&nbsp;），无需回表，直接从叶子节点获取数据。</li>
<li data-darkreader-inline-border=""><strong data-darkreader-inline-color="" data-darkreader-inline-border="">回表查询</strong>：若需获取非索引字段（如&nbsp;<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border="">SELECT *&nbsp;</code>），需通过叶子节点的主键值回聚簇索引获取完整数据</li>




</ul>
<hr data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="">
<p data-darkreader-inline-color="" data-darkreader-inline-border="">&nbsp;</p>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>下面咱们一起来详细看一下精确匹配查询过程。</span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>当我们的SQL可以应用到索引的时候，比如&nbsp;<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>select * from T1 where b = 12 and c = 14 and d = 3</span></code><span>&nbsp;也就是T1表中a列为4的这条记录。</span></span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>存储引擎首先从根节点（一般常驻内存）开始查找，第一个索引的第一个索引列为1，由于12大于1，第二个索引的第一个索引列为56，又因12小于56，所以从这俩索引的中间读到下一个节点的磁盘文件地址，从磁盘上加载这个节点，通常伴随一次磁盘IO，然后在内存里去查找。当加载叶子节点的第二个节点时又是一次磁盘IO，从该节点的第一个元素开始匹配，<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>b=12,c=14,d=3</span></code><span>完全符合。由于咱们Select *，所以还需要拿到该索引下的data元素即ID值，再从主键索引树上找到最终数据（回表）。</span></span></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1205690/202504/1205690-20250401124429243-207315957.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p data-heading="true">而如果Select后只有a，那么要查询的列就都存在于这颗联合索引的B+树上，此时无需回表，这即是覆盖索引。</p>
<p data-heading="true">&nbsp;</p>
<h2 data-heading="true" data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-boxshadow="" data-darkreader-inline-border=""><span>最左前缀匹配原则</span></h2>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>之所以会有最左前缀匹配原则，其实和联合索引的索引构建方式及存储结构是密不可分的。</span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>首先我们创建的<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>idx_t1_bcd(b,c,d)</span></code><span>索引，相当于创建了<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>(b)</span></code><span>、<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>（b、c）</span></code><span>、<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>（b、c、d）</span></code><span>三个索引，下面将会详细解析。</span></span></span></span></span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>联合索引将多个字段组合成一个键值，按照字段定义的顺序构建B+树。</span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-border="">上面<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border="">idx_t1_bcd(b,c,d)</code>的例子就是优先使用b列构建，当b列值相等时再以c列排序，若c列的值也相等则以d列排序。我们可以取出索引树的叶子节点看一下。</p>
<p><img src="https://img2024.cnblogs.com/blog/1205690/202504/1205690-20250401124311777-371762785.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>&nbsp;</p>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>索引的第一列也就是b列是从左到右趋势递增的，但我们看第二行c列和第三行d列并没有这个特性。仔细观察发现c列只能在b列值相等的情况下小范围内递增，如第一叶子节点的第1、2个元素和第二个叶子节点的后三个元素。d列亦是如此，它只能在c列值相等时递增。</span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>由于联合索引是上述那样的索引构建方式及存储结构，所以联合索引只能从多列索引的第一列开始查找。所以如果你的查找条件不包含b列如<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>（c,d）</span></code><span>、<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>(c）</span></code><span>、<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>(d)</span></code><span>是无法应用索引的，以及跨列也是无法完全用到索引，如(b,d)，只会用到b列索引。</span></span></span></span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>这就像我们的电话本一样，有<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>名</span></code><span>和<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>姓</span></code><span>以及<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>电话</span></code><span>，名和姓就是联合索引。首先以姓的首字母排序，姓的首字母相同的情况下，再以名的首字母排序。<span><br><span>如：</span></span></span></span></span></span></p>
<pre data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-boxshadow="" data-darkreader-inline-border=""><span data-darkreader-inline-border=""><code data-darkreader-inline-border=""><span>M<span><br><span>&nbsp; &nbsp; 毛 不易 &nbsp; 178********<span><br><span>&nbsp; &nbsp; 马 化腾 &nbsp; 183********<span><br><span>&nbsp; &nbsp; 马 云 &nbsp; &nbsp; 188********<span><br><span>Z<span><br><span>&nbsp; &nbsp; 张 杰 &nbsp; &nbsp; 189********<span><br><span>&nbsp; &nbsp; 张 靓颖 &nbsp; 138********<span><br><span>&nbsp; &nbsp; 张 艺兴 &nbsp; 176******** &nbsp;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></span></pre>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>我们知道<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>名</span></code><span>和<code data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span>姓</span></code><span>是很快就能够从姓的首字母索引定位到姓，然后定位到名，进而找到电话号码，因为所有的姓从上到下按照既定的规则（首字母排序）是有序的，而名是在姓的首字母一定的条件下也是按照名的首字母排序的，但是整体来看，所有的名放在一起是无序的，所以如果只知道名查找起来就比较慢，因为无法用已排好的结构快速查找。</span></span></span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>到这里大家是否明白了为啥会有最左前缀匹配原则了吧。</span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-border="">&nbsp;</p>
<hr data-darkreader-inline-color="" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="">
<h3 data-heading="true" data-darkreader-inline-color="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="">设计优化建议</h3>
<ul data-darkreader-inline-border="">
<li data-darkreader-inline-color="" data-darkreader-inline-border=""><strong data-darkreader-inline-color="" data-darkreader-inline-border="">列顺序选择</strong>
<ul>
<li data-darkreader-inline-color="" data-darkreader-inline-border="">高频查询条件列放在最左，区分度高的列优先 。例如，若 WHERE a=1 AND b=2 更常见，则索引应为 (a, b) 而非 (b, a) 。</li>
</ul>
</li>
<li data-darkreader-inline-color="" data-darkreader-inline-border=""><strong data-darkreader-inline-color="" data-darkreader-inline-border="">避免冗余列</strong>
<ul>
<li data-darkreader-inline-color="" data-darkreader-inline-border=""><em id="__mceDel">联合索引的字段应精简，避免包含低区分度或重复功能的列&nbsp;。</em></li>
</ul>
</li>
<li data-darkreader-inline-color="" data-darkreader-inline-border=""><strong data-darkreader-inline-color="" data-darkreader-inline-border="">索引下推（Index Condition Pushdown）</strong>
<ul>
<li data-darkreader-inline-color="" data-darkreader-inline-border="">MySQL 5.6+支持将WHERE条件中可通过索引过滤的部分下推到存储引擎层，减少回表次数。</li>
</ul>
</li>
</ul>
<p>　<em id="__mceDel">关于索引设计优化之前的文章有更详细的介绍，请看文末文章链接。</em></p>
<p data-darkreader-inline-color="" data-darkreader-inline-border="">&nbsp;</p>
<h2 data-heading="true" data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-boxshadow="" data-darkreader-inline-border=""><span>实践</span></h2>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span>如下列举一些SQL的索引使用情况</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">select</span> <span style="color: rgba(128, 128, 128, 1)">*</span> <span style="color: rgba(0, 0, 255, 1)">from</span> T1 <span style="color: rgba(0, 0, 255, 1)">where</span> b <span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(128, 0, 0, 1); font-weight: bold">12</span> <span style="color: rgba(128, 128, 128, 1)">and</span> c <span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(128, 0, 0, 1); font-weight: bold">14</span> <span style="color: rgba(128, 128, 128, 1)">and</span> d <span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(128, 0, 0, 1); font-weight: bold">3</span>;<span style="color: rgba(0, 128, 128, 1)">--</span><span style="color: rgba(0, 128, 128, 1)"> 全值索引匹配 三列都用到</span>
<span style="color: rgba(0, 0, 255, 1)">select</span> <span style="color: rgba(128, 128, 128, 1)">*</span> <span style="color: rgba(0, 0, 255, 1)">from</span> T1 <span style="color: rgba(0, 0, 255, 1)">where</span> b <span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(128, 0, 0, 1); font-weight: bold">12</span> <span style="color: rgba(128, 128, 128, 1)">and</span> c <span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(128, 0, 0, 1); font-weight: bold">14</span> <span style="color: rgba(128, 128, 128, 1)">and</span> e <span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">xml</span><span style="color: rgba(255, 0, 0, 1)">'</span>;<span style="color: rgba(0, 128, 128, 1)">--</span><span style="color: rgba(0, 128, 128, 1)"> 应用到两列索引</span>
<span style="color: rgba(0, 0, 255, 1)">select</span> <span style="color: rgba(128, 128, 128, 1)">*</span> <span style="color: rgba(0, 0, 255, 1)">from</span> T1 <span style="color: rgba(0, 0, 255, 1)">where</span> b <span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(128, 0, 0, 1); font-weight: bold">12</span> <span style="color: rgba(128, 128, 128, 1)">and</span> e <span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">xml</span><span style="color: rgba(255, 0, 0, 1)">'</span>;<span style="color: rgba(0, 128, 128, 1)">--</span><span style="color: rgba(0, 128, 128, 1)"> 应用到一列索引</span>
<span style="color: rgba(0, 0, 255, 1)">select</span> <span style="color: rgba(128, 128, 128, 1)">*</span> <span style="color: rgba(0, 0, 255, 1)">from</span> T1 <span style="color: rgba(0, 0, 255, 1)">where</span> b <span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(128, 0, 0, 1); font-weight: bold">12</span> <span style="color: rgba(128, 128, 128, 1)">and</span> c <span style="color: rgba(128, 128, 128, 1)">&gt;=</span><span style="color: rgba(128, 0, 0, 1); font-weight: bold">14</span> <span style="color: rgba(128, 128, 128, 1)">and</span> e <span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">xml</span><span style="color: rgba(255, 0, 0, 1)">'</span>;<span style="color: rgba(0, 128, 128, 1)">--</span><span style="color: rgba(0, 128, 128, 1)"> 应用到一列索引及索引条件下推优化</span>
<span style="color: rgba(0, 0, 255, 1)">select</span> <span style="color: rgba(128, 128, 128, 1)">*</span> <span style="color: rgba(0, 0, 255, 1)">from</span> T1 <span style="color: rgba(0, 0, 255, 1)">where</span> b <span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(128, 0, 0, 1); font-weight: bold">12</span> <span style="color: rgba(128, 128, 128, 1)">and</span> d <span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(128, 0, 0, 1); font-weight: bold">3</span>;<span style="color: rgba(0, 128, 128, 1)">--</span><span style="color: rgba(0, 128, 128, 1)"> 应用到一列索引  因为不能跨列使用索引 没有c列 连不上</span>
<span style="color: rgba(0, 0, 255, 1)">select</span> <span style="color: rgba(128, 128, 128, 1)">*</span> <span style="color: rgba(0, 0, 255, 1)">from</span> T1 <span style="color: rgba(0, 0, 255, 1)">where</span> c <span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(128, 0, 0, 1); font-weight: bold">14</span> <span style="color: rgba(128, 128, 128, 1)">and</span> d <span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(128, 0, 0, 1); font-weight: bold">3</span>;<span style="color: rgba(0, 128, 128, 1)">--</span><span style="color: rgba(0, 128, 128, 1)"> 无法应用索引，违背最左匹配原则</span></pre>
</div>
<p>&nbsp;</p>
<h2 data-heading="true" data-darkreader-inline-color="" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="" data-darkreader-inline-boxshadow="" data-darkreader-inline-border=""><span>后记</span></h2>
<p>经过对MySQL联合索引存储结构与查询机制的系统梳理，相信大家对B+Tree索引的工作原理有了更深入的理解。限于篇幅，本文暂未涉及排序优化（ORDER BY）、覆盖索引（Covering Index）以及哈希/全文索引等内容，后续将推出相关系列文章展开探讨。</p>
<p>需要说明的是：数据库优化是理论与实践深度结合的领域，本文侧重于索引机制的底层解析，实际业务中的调优策略还需结合具体场景进行验证。</p>
<p>如果本文对您理解索引原理有所帮助，请点赞支持鼓励！您的每一次反馈都是我持续创作优质技术内容的动力。</p>
<p data-darkreader-inline-color="" data-darkreader-inline-border="">-----</p>
<h2>系列文章：</h2>
<p data-darkreader-inline-color="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span><a class="wx_tap_link js_wx_tap_highlight" href="https://mp.weixin.qq.com/s?__biz=MzUxNTQyOTIxNA==&amp;mid=2247485995&amp;idx=1&amp;sn=c1917194333fdfe142265ca2ce4fa1f7&amp;scene=21#wechat_redirect" target="_blank" data-linktype="2" rel="noopener nofollow">1.MySQL笔记 | 一条查询语句是怎么执行的？</a></span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span><a class="wx_tap_link js_wx_tap_highlight" href="https://mp.weixin.qq.com/s?__biz=MzUxNTQyOTIxNA==&amp;mid=2247486000&amp;idx=1&amp;sn=884c94f738afb7a24fd5212b7bca8c01&amp;scene=21#wechat_redirect" target="_blank" data-linktype="2" rel="noopener nofollow">2.MySQL笔记 | 一条更新语句是如何执行的？</a></span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span><a href="https://mp.weixin.qq.com/s?__biz=MzUxNTQyOTIxNA==&amp;mid=2247486005&amp;idx=1&amp;sn=4f9550ef60616e628515a675fda7019d&amp;scene=21#wechat_redirect" target="_blank" data-linktype="2" rel="noopener nofollow">3.MySQL笔记 | 事务与隔离级别：从“转账”到“数据安全”的奇幻之旅</a></span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span><a class="wx_tap_link js_wx_tap_highlight" href="https://mp.weixin.qq.com/s?__biz=MzUxNTQyOTIxNA==&amp;mid=2247486059&amp;idx=2&amp;sn=78095a17ea55aeb0ec075b9f3c67e100&amp;scene=21#wechat_redirect" target="_blank" data-linktype="2" rel="noopener nofollow">4.深入理解 MySQL 事务隔离级别：从“读未提交”到“串行化”的全面解析</a></span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span><a class="wx_tap_link js_wx_tap_highlight" href="https://mp.weixin.qq.com/s?__biz=MzUxNTQyOTIxNA==&amp;mid=2247486073&amp;idx=1&amp;sn=aac20a083d04545d203c921a7458f698&amp;scene=21#wechat_redirect" target="_blank" data-linktype="2" rel="noopener nofollow">5.MySQL索引：就像给数据库开了导航，但这些坑你得避开</a></span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span><a class="wx_tap_link js_wx_tap_highlight" href="https://mp.weixin.qq.com/s?__biz=MzUxNTQyOTIxNA==&amp;mid=2247486113&amp;idx=1&amp;sn=e866c19031385a25c2020831f1194e6f&amp;scene=21#wechat_redirect" target="_blank" data-linktype="2" rel="noopener nofollow">6.MySQL 索引底层数据结构：从 B+ 树到数据存储的奥秘</a></span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span><a href="https://mp.weixin.qq.com/s?__biz=MzUxNTQyOTIxNA==&amp;mid=2247486158&amp;idx=1&amp;sn=142a1826c80f32a4d73c999e5d533f89&amp;scene=21#wechat_redirect" target="_blank" data-linktype="2" rel="noopener nofollow">7.MySQL锁机制详解：从原理到实战，Java开发者必知的高并发基石</a><span><br></span></span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span><a class="wx_tap_link js_wx_tap_highlight" href="https://mp.weixin.qq.com/s?__biz=MzUxNTQyOTIxNA==&amp;mid=2247486209&amp;idx=1&amp;sn=25b39863f08fed954a7ed4275db7cadd&amp;scene=21#wechat_redirect" target="_blank" data-linktype="2" rel="noopener nofollow">8.Java开发者必备：深度剖析MySQL锁机制与实战避坑指南</a><span><br></span></span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span><a href="https://mp.weixin.qq.com/s?__biz=MzUxNTQyOTIxNA==&amp;mid=2247486289&amp;idx=1&amp;sn=952145dbfb3e6fd6d6c21164e0704434&amp;scene=21#wechat_redirect" target="_blank" data-linktype="2" rel="noopener nofollow">9.阿里P8面试官连环逼问MySQL索引：从原理到死锁，答完我后背全湿了</a><a href="https://mp.weixin.qq.com/s?__biz=MzUxNTQyOTIxNA==&amp;mid=2247486414&amp;idx=1&amp;sn=d94fe94b1386980dfcb5cb5554a1ed63&amp;scene=21#wechat_redirect" target="_blank" data-itemshowtype="0" data-linktype="2" rel="noopener nofollow">探秘</a></span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span><a href="https://mp.weixin.qq.com/s?__biz=MzUxNTQyOTIxNA==&amp;mid=2247486414&amp;idx=1&amp;sn=d94fe94b1386980dfcb5cb5554a1ed63&amp;scene=21#wechat_redirect" target="_blank" data-itemshowtype="0" data-linktype="2" rel="noopener nofollow">10.MySQL索引底层原理，解锁数据库优化的关键密码(上)</a></span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span><a href="https://mp.weixin.qq.com/s?__biz=MzUxNTQyOTIxNA==&amp;mid=2247486432&amp;idx=1&amp;sn=eface41cc7f4002b58b5835a34b539a5&amp;scene=21#wechat_redirect" target="_blank" data-linktype="2" rel="noopener nofollow">11.探秘 MySQL 索引底层原理，解锁数据库优化的关键密码(中)</a><br></span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span><a href="https://mp.weixin.qq.com/s?__biz=MzUxNTQyOTIxNA==&amp;mid=2247486502&amp;idx=1&amp;sn=347e517f07085a277a46aee6bfbd6c4f&amp;scene=21#wechat_redirect" target="_blank" data-linktype="2" rel="noopener nofollow">12.MySQL插入与删除语句是如何执行的？</a><br></span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-bgcolor="" data-darkreader-inline-border=""><span><a href="https://mp.weixin.qq.com/s?__biz=MzUxNTQyOTIxNA==&amp;mid=2247486528&amp;idx=1&amp;sn=5216a8a194625867b7f89283952caf82&amp;scene=21#wechat_redirect" target="_blank" data-linktype="2" rel="noopener nofollow">13.MySQL是如何选择索引的？为什么有时候索引会失效？</a></span></p>
<p data-darkreader-inline-color="" data-darkreader-inline-border=""><span><a href="https://mp.weixin.qq.com/s?__biz=MzUxNTQyOTIxNA==&amp;mid=2247486544&amp;idx=1&amp;sn=5d8bef75408a80bf218387bfc5a7e8a5&amp;scene=21#wechat_redirect" target="_blank" data-linktype="2" rel="noopener nofollow">14.MySQL三星索引及核心索引设计原则详解</a></span></p>
</div>
<div id="MySignature" role="contentinfo">
    说的再好，不如行动。不怕慢，就怕站。
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.06235687652546296" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-01 12:53">2025-04-01 12:48</span>&nbsp;
<a href="https://www.cnblogs.com/ibigboy">问北</a>&nbsp;
阅读(<span id="post_view_count">23</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18803885" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18803885);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18803885', targetLink: 'https://www.cnblogs.com/ibigboy/p/18803885', title: '探秘 MySQL 索引底层原理，解锁数据库优化的关键密码(下)' })">举报</a>
</div>
        