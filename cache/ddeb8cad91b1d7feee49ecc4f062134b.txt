
	<div class="postTitle">
		<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/dnboy/p/18684787" title="发布于 2025-01-22 00:19">
    <span role="heading" aria-level="2">分布式系统学习9：分布式锁</span>
    

</a>

	</div>
	<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>这是小卷对分布式系统架构学习的第12篇文章，今天学习面试中高频问题：分布式锁，为什么要做分布式锁，有哪些实现方式，各适用于什么场景等等问题</p>
</blockquote>
<h2 id="1-为什么要用分布式锁">1. 为什么要用分布式锁？</h2>
<p>分布式系统下，不同的服务/客户端通常运行在独立的 JVM 进程上。如果多个 JVM 进程共享同一份资源的话，使用本地锁就没办法实现资源的互斥访问了。于是，<strong>分布式锁</strong> 就诞生了</p>
<p>分布式锁的特点：</p>
<ul>
<li><strong>互斥</strong>：任意时刻，锁只能被一个线程持有</li>
<li><strong>高可用</strong>：锁服务本身是高可用的，一个节点出问题，能自动切换到另一个节点</li>
<li><strong>可重入</strong>：获取过锁的节点，可再次获取锁；</li>
<li><strong>超时机制</strong>：为了防止锁无法被释放的异常情况，需要设置超时时间，过了超时时间，锁自动释放；</li>
<li><strong>自动续期</strong>：如果任务处理时间超过超时时间，会出现任务未处理完成而锁释放的情况。因此可开启一个监听线程，监听任务还未完成就延长锁的超时时间；</li>
</ul>
<h2 id="2-乐观锁和悲观锁">2. 乐观锁和悲观锁</h2>
<ul>
<li>悲观锁：认为多线程环境下，每次访问共享资源一定会出现冲突，所以<strong>访问资源前就加锁</strong>；</li>
<li>乐观锁：认为冲突是偶然情况，没有竞争才是普遍情况。一开始就不加锁，在出现冲突时采取补救措施，简单概述：<strong>先修改共享资源，再验证有没有发生冲突，如没有，则操作完成。如果有其他线程已经修改过这个资源，就放弃本次操作</strong>。</li>
</ul>
<p>使用场景：</p>
<ul>
<li>乐观锁去除了加锁解锁的操作，但是一旦冲突后的重试成本非常高，只有再冲突概率非常低，且加锁成本比较高的场景，才考虑使用乐观锁</li>
</ul>
<h2 id="3分布式锁的实现方式">3.分布式锁的实现方式</h2>
<p>常见分布式锁实现方案如下：</p>
<ul>
<li>基于关系型数据库比如 MySQL 实现分布式锁。</li>
<li>基于分布式协调服务 ZooKeeper 实现分布式锁。</li>
<li>基于分布式键值存储系统比如 Redis 、Etcd 实现分布式锁。</li>
</ul>
<h3 id="31基于redis的实现">3.1基于Redis的实现</h3>
<h4 id="setnx--expire组合命令">setnx + expire组合命令</h4>
<p>在redis中，<code>SETNX</code>命令可以实现互斥，即Set if not exist的意思，如果key不存在，才可设置key的值，如果key已存在，<code>SETNX</code>命令啥也做不了</p>
<p>setnx命令不能设置key的超时时间，因此需要通过expire命令来设置key的超时时间</p>
<p><strong>加锁</strong></p>
<pre><code class="language-shell">&gt; SETNX lockKey uniqueValue
(integer) 1
&gt; SETNX lockKey uniqueValue
(integer) 0
# 设置过期时间
&gt; expire lockKey seconds
</code></pre>
<p>这里常见的问题就是加锁和设置过期时间是两个操作，不是原子操作，可能出现加锁成功，设置超时时间失败，出现锁永远不会释放的问题。为了解决这个问题，Redis从<code>2.6.12</code>之后支持set命令增加过期时间参数：</p>
<pre><code class="language-bash">127.0.0.1:6379&gt; SET lockKey uniqueValue EX 30 NX
OK
127.0.0.1:6379&gt; SET lockKey uniqueValue EX 30 NX
(nil)
</code></pre>
<p>关于Redis <code>SET</code>命令的详细说明可以查看Redis官方文档：<a href="https://redis.io/docs/latest/commands/set/" target="_blank" rel="noopener nofollow">https://redis.io/docs/latest/commands/set/</a></p>
<pre><code class="language-shell">SET key value [NX | XX] [GET] [EX seconds | PX milliseconds |
  EXAT unix-time-seconds | PXAT unix-time-milliseconds | KEEPTTL]
</code></pre>
<p>参数说明：</p>
<ul>
<li><strong>EX 秒数</strong>：设置指定的过期时间，以秒为单位（正整数）。</li>
<li>PX 毫秒数：设置指定的过期时间，以毫秒为单位（正整数）。</li>
<li>EXAT 时间戳（秒）：设置键将在指定的Unix时间戳（以秒为单位）过期（正整数）。</li>
<li>PXAT 时间戳（毫秒）：设置键将在指定的Unix时间戳（以毫秒为单位）过期（正整数）。</li>
<li><strong>NX：仅在键不存在时设置键。</strong></li>
<li>XX：仅在键已存在时设置键。</li>
<li>KEEPTTL：保留键的生存时间。</li>
<li>GET：返回键存储的旧字符串，如果键不存在则返回nil。如果键存储的值不是字符串，则返回错误并终止SET操作。</li>
</ul>
<p><strong>释放锁</strong></p>
<p>释放锁时通过<code>DEL</code>命令删除key即可，但不能乱删，要保证执行操作的客户端就是加锁的客户端。为了防止误删了其他锁，这里建议使用lua脚本通过key对应的value来判断，使用Lua脚本保证解锁操作的原子性</p>
<pre><code class="language-bash">// 释放锁时，先比较锁对应的 value 值是否相等，避免锁的误释放
if redis.call("get",KEYS[1]) == ARGV[1] then
    return redis.call("del",KEYS[1])
else
    return 0
end
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2784584/202501/2784584-20250122001816546-2012406150.png" alt="" loading="lazy"></p>
<h4 id="面试题如何实现锁的优雅续期">面试题：如何实现锁的优雅续期？</h4>
<p>如果任务还没执行完成，锁就过期了，这样就出现锁提前过期的问题了。为了解决这个问题，Java语言已经有了解决方案：<strong>Redisson</strong></p>
<p>其他语言的解决方案，可以在Redis官方文档中找到：<a href="https://redis.io/docs/latest/develop/use/patterns/distributed-locks/" target="_blank" rel="noopener nofollow">https://redis.io/docs/latest/develop/use/patterns/distributed-locks/</a></p>
<p><img src="https://img2024.cnblogs.com/blog/2784584/202501/2784584-20250122001831147-590294673.png" alt="" loading="lazy"></p>
<p>官方提供了<code>Redlock</code>的算法，用于实现分布式锁管理器。</p>
<p>下面讲讲Redisson的自动续期机制，原理很简单：<strong>提供了一个专门用来监控和续期锁的Watch Dog（看门狗）机制，如果操作共享资源的线程还未执行完成的话，Watch Dog会不断延长锁的过期时间</strong>。</p>
<p><img src="https://img2024.cnblogs.com/blog/2784584/202501/2784584-20250122001842555-1729883227.png" alt="" loading="lazy"></p>
<p>看门狗核心逻辑如下：</p>
<ul>
<li>从<code>EXPIRATION_RENEWAL_MAP</code>中获取锁的状态。如果锁已经被释放，则不再续期。</li>
<li>如果锁仍然存在且当前线程持有锁，则异步调用<code>renewExpirationAsync</code>方法来更新锁的过期时间。</li>
<li>如果续期成功，会递归调用<code>renewExpiration</code>方法，重新启动定时任务，继续进行下一次续期；</li>
</ul>
<h4 id="如何实现可重入锁">如何实现可重入锁？</h4>
<p>可重入锁指的是一个线程可以多次获取同一把锁，如Java中的<code>synchronized</code>和<code>ReentrantLock</code>都是可重入锁</p>
<p><strong>实现可重入锁的核心思路</strong>：线程在获取锁的时候判断是否为自己的锁，如果是的话，就不用再重新获取了。需要为每个锁关联一个可重入计数器和一个占有它的线程，计数器大于0时，锁被占用，需判断请求获取锁的线程和当前持有锁的线程是否为一个。</p>
<p>Redisson本身已经支持了多种锁：可重入锁（Reentrant Lock）、自旋锁（Spin Lock）、公平锁（Fair Lock）、多重锁（MultiLock）、 红锁（RedLock）、 读写锁（ReadWriteLock）</p>
<h3 id="32基于zookeeper的实现">3.2基于Zookeeper的实现</h3>
<blockquote>
<p>当前面试比较卷啊，面试官可能会问除了用Redis做分布式锁外，还有没有其他方法，所以还是要多了解一种方法的</p>
</blockquote>
<p>前面分布式理论基础时已经了解到Zookeeper是CP模式，提供数据一致性，因此适合作为分布式锁的选型。</p>
<p>ZooKeeper 分布式锁是基于 <strong>临时顺序节点</strong> 和 <strong>Watcher（事件监听器）</strong> 实现的。</p>
<p>分布式锁的实现步骤为：</p>
<p><strong>（1）创建锁节点</strong></p>
<ul>
<li>在Zookeeper中创建一个父节点（如<code>/lock</code>），作为锁的根节点</li>
<li>每个客户端尝试获取锁时，会在<code>/lock</code>下创建一个临时顺序节点（如<code>/lock/lock-0000000001</code>）</li>
</ul>
<p><strong>（2）获取锁</strong></p>
<ul>
<li>客户端创建完临时顺序节点后，会获取<code>/lock</code>下所有子节点的列表。</li>
<li>客户端检查自己创建的节点是否是当前所有子节点中序号最小的节点：
<ul>
<li>如果是，则认为获取了锁。</li>
<li>如果不是，客户端会监听比自己序号小的<strong>紧邻前一个节点</strong>的删除事件（即<code>/lock/lock-0000000001</code>会监听<code>/lock/lock-0000000000</code>的删除事件）</li>
</ul>
</li>
</ul>
<p><strong>（3）释放锁</strong></p>
<ul>
<li>当持有锁的客户端完成任务后，它会主动删除自己创建的临时顺序节点</li>
<li>由于Zookeeper的监听机制，下一个等待锁的客户端会收到通知，再次检查自己是否是当前序号最小的节点</li>
<li>如果是，则获取锁并继续执行</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/2784584/202501/2784584-20250122001857995-1212109225.png" alt="" loading="lazy"></p>
<p>实际开发过程中，通常使用Curator来实现Zookeeper的分布式锁，该框架封装了各种API可直接使用，可实现：</p>
<ul>
<li><code>InterProcessMutex</code>：分布式可重入排它锁</li>
<li><code>InterProcessSemaphoreMutex</code>：分布式不可重入排它锁</li>
<li><code>InterProcessReadWriteLock</code>：分布式读写锁</li>
<li><code>InterProcessMultiLock</code>：将多个锁作为单个实体管理的容器，获取锁的时候获取所有锁，释放锁也会释放所有锁资源（忽略释放失败的锁）。</li>
</ul>
<h3 id="33-基于数据库的实现">3.3 基于数据库的实现</h3>
<p>这里只简单说下基于MySQL数据库实现的分布式锁，实际开发中应该没人用MySQL做分布式锁吧</p>
<p><strong>基于悲观锁的方式</strong></p>
<ol>
<li>在对任意记录进行修改前，先尝试为该记录加上排他锁（exclusive locking）</li>
<li>如果加锁失败，说明该记录正在被修改，那么当前查询可能要等待或者抛出异常。 具体响应方式由开发者根据实际需要决定。</li>
<li>如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁了。</li>
</ol>
<p>示例：</p>
<pre><code class="language-sql">//0.开始事务
begin;/begin work;/start transaction; (三者选一就可以)
//1.查询出商品信息
select status from t_goods where id=1 for update;
//2.根据商品信息生成订单
insert into t_orders (id,goods_id) values (null,1);
//3.修改商品status为2
update t_goods set status=2;
//4.提交事务
commit;/commit work;
</code></pre>
<p>我们使用了<code>select…for update</code>的方式，<code>for update</code>是一种<code>行级锁</code>，也叫<code>排它锁</code>。如果一条<code>select</code>语句后面加上<code>for update</code>,其他事务可以读取，但不能进进行更新操作。这样就通过开启排他锁的方式实现了悲观锁</p>
<p><strong>基于乐观锁的方式</strong></p>
<p>使用版本号，可以在数据初始化时指定一个版本号，每次对数据的更新操作都对版本号执行+1操作。并判断当前版本号是不是该数据的最新的版本号</p>
<p>示例：</p>
<pre><code class="language-sql">1.查询出商品信息
select (status,status,version) from t_goods where id=#{id}
2.根据商品信息生成订单
3.修改商品status为2
update t_goods 
set status=2,version=version+1
where id=#{id} and version=#{version};
</code></pre>
<h2 id="使用场景选择">使用场景选择</h2>
<p>这里还是使用Redis和Zookeeper的两种方式，MySQL的方式性能较低</p>
<ul>
<li>如果对性能要求比较高的话，建议使用 Redis 实现分布式锁。推荐优先选择 <strong>Redisson</strong> 提供的现成分布式锁，而不是自己实现。实际项目中不建议使用 Redlock 算法，成本和收益不成正比，可以考虑基于 Redis 主从复制+哨兵模式实现分布式锁。</li>
<li>如果对一致性要求比较高，建议使用 ZooKeeper 实现分布式锁，推荐基于 <strong>Curator</strong> 框架来实现。不过，现在很多项目都不会用到 ZooKeeper，如果单纯是因为分布式锁而引入 ZooKeeper 的话，那是不太可取的，不建议这样做，为了一个小小的功能增加了系统的复杂度。</li>
</ul>

</div>
<div class="clear"></div>

	<div class="postDesc">posted on 
<span id="post-date" data-last-update-days="0.08389537478356482" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-22 00:19">2025-01-22 00:19</span>&nbsp;
<a href="https://www.cnblogs.com/dnboy">卷福同学</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18684787" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18684787);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18684787', targetLink: 'https://www.cnblogs.com/dnboy/p/18684787', title: '分布式系统学习9：分布式锁' })">举报</a>
</div>
