
        <h2>
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/shengzhang/p/18787747" title="发布于 2025-03-23 12:24">
    <span role="heading" aria-level="2">Sa-Token v1.41.0 发布 🚀，来看看有没有令你心动的功能！</span>
    

</a>

        </h2>
        <div class="postbody">
            <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>Sa-Token 是一个轻量级 Java 权限认证框架，主要解决：<strong>登录认证</strong>、<strong>权限认证</strong>、<strong>单点登录</strong>、<strong>OAuth2.0</strong>、<strong>微服务网关鉴权</strong> 等一系列权限相关问题。🔐</p>
<p><strong>目前最新版本 <code>v1.41.0</code> 已推送至 <code>Maven</code> 中央仓库</strong> 🎉，大家可以通过如下方式引入：</p>
<pre><code class="language-xml">&lt;!-- Sa-Token 权限认证 --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;cn.dev33&lt;/groupId&gt;
    &lt;artifactId&gt;sa-token-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;1.41.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>该版本包含大量 ⛏️️️新增特性、⛏️底层重构、⛏️️️代码优化 等，下面容我列举几条比较重要的更新内容供大家参阅：</p>
<h3 id="️-更新点1防火墙模块新增-hooks-扩展机制">🛡️ 更新点1：防火墙模块新增 hooks 扩展机制</h3>
<p>本次更新针对防火墙新增了多条校验规则，之前的规则为：</p>
<ul>
<li>path 白名单放行。</li>
<li>path 黑名单拦截。</li>
<li>path 危险字符校验。</li>
</ul>
<p>本次新增规则为：</p>
<ul>
<li>path 禁止字符校验。</li>
<li>path 目录遍历符检测（优化了检测算法）。</li>
<li>请求 host 检测。</li>
<li>请求 Method 检测。</li>
<li>请求 Header 头检测。</li>
<li>请求参数检测。</li>
</ul>
<p>并且本次更新开放了 hooks 机制，允许开发者注册自定义的校验规则 🛠️，参考如下：</p>
<pre><code class="language-java">@PostConstruct
public void saTokenPostConstruct() {
    // 注册新 hook 演示，拦截所有带有 pwd 参数的请求，拒绝响应 
    SaFirewallStrategy.instance.registerHook((req, res, extArg)-&gt;{
        if(req.getParam("pwd") != null) {
            throw new FirewallCheckException("请求中不可包含 pwd 参数");
        }
    });
}
</code></pre>
<p>文档直达地址：<a href="https://sa-token.cc/doc.html#/fun/firewall" target="_blank" rel="noopener nofollow">Sa-Token 防火墙</a> 🔗</p>
<h3 id="-更新点2新增基于-spi-机制的插件体系">💡 更新点2：新增基于 SPI 机制的插件体系</h3>
<p>之前在 Sa-Token 中也有插件体系，不过都是利用 SpringBoot 的 SPI 机制完成组件注册的。</p>
<p>这种注册机制有一个问题，就是插件只能在 SpringBoot 环境下正常工作，在其它环境，比如 Solon 项目中，就只能手动注册插件才行 😫。</p>
<p>也就是说，严格来讲，这些插件只能算是 SpringBoot 的插件，而非 Sa-Token 框架的插件 🌐。</p>
<p>为了提高插件的通用性，Sa-Token 设计了自己的 SPI 机制，使得这些插件可以在更多的项目环境下正常工作 🚀。</p>
<p>第一步：实现插件注册类，此类需要 <code>implements SaTokenPlugin</code> 接口 👨💻：</p>
<pre><code class="language-java">/**
 * SaToken 插件安装：插件作用描述
 */
public class SaTokenPluginForXxx implements SaTokenPlugin {
    @Override
    public void install() {
        // 书写需要在项目启动时执行的代码，例如：
        // SaManager.setXxx(new SaXxxForXxx());
    }
}
</code></pre>
<p>第二步：在项目的 <code>resources\META-INF\satoken\</code> 文件夹下 📂 创建 <code>cn.dev33.satoken.plugin.SaTokenPlugin</code> 文件，内容为该插件注册类的完全限定名：</p>
<pre><code class="language-txt">cn.dev33.satoken.plugin.SaTokenPluginForXxx
</code></pre>
<p>这样便可以在项目启动时，被 Sa-Token 插件管理器加载到此插件，执行插件注册类的 install 方法，完成插件安装 ✅。</p>
<p>文档直达地址：<a href="https://sa-token.cc/doc.html#/fun/plugin-dev" target="_blank" rel="noopener nofollow">Sa-Token 插件开发指南</a> 🔗</p>
<h3 id="️-更新点3重构缓存体系将数据读写与序列化操作分离">🎛️ 更新点3：重构缓存体系，将数据读写与序列化操作分离</h3>
<p>在之前的版本中，Redis 集成通常和具体的序列化方式耦合在一起，这不仅让 Redis 相关插件产生大量的重复冗余代码，也让大家在选择 Redis 插件时严重受限。⚠️</p>
<p>本次版本更新彻底重构了此模块，将数据读写与序列化操作分离，使其每一块都可以单独自定义实现类，做到灵活扩展 ✨，例如：</p>
<ul>
<li>1️⃣ SaTokenDao 数据读写可以选择：RedisTemplate、Redisson、ConcurrentHashMap、Hutool-Timed-Cache 等不同实现类。</li>
<li>2️⃣ SaSerializerTemplate 序列化器可以选择：Base64编码、Hex编码、ISO-8859-1编码、JSON序列化等不同方式。</li>
<li>3️⃣ JSON 序列化可以选择：Jackson、Fastjson、Snack3 等组件。</li>
</ul>
<p>所有实现类均可以按需选择，自由搭配，大大提高灵活性🏗️。</p>
<h3 id="️️-更新点4saloginparameter-登录参数类新增大量配置项">⚙️️ 更新点4：SaLoginParameter 登录参数类新增大量配置项</h3>
<p>SaLoginParameter (前SaLoginModel) 用于控制登录操作中的部分细节行为，本次新增的配置项有：</p>
<ul>
<li>isConcurrent：决定是否允许同一账号多地同时登录（为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）。🌍</li>
<li>isShare：在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）。🔄</li>
<li>maxLoginCount：同一账号最大登录数量，超出此数量的客户端将被自动注销，-1代表不限制数量。🚫</li>
<li>maxTryTimes：在创建 token 时的最高循环次数，用于保证 token 唯一性（-1=不循环尝试，直接使用。⏳</li>
<li>deviceId：此次登录的客户端设备id，用于判断后续某次登录是否为可信任设备。📱</li>
<li>terminalExtraData：本次登录挂载到 SaTerminalInfo 的自定义扩展数据。📦</li>
</ul>
<p>以上大部分配置项在之前的版本中也有支持，不过它们都被定义在了全局配置类 SaTokenConfig 之上，本次更新支持在 SaLoginParameter 中定义这些配置项，<br>
这将让登录策略的控制变得更加灵活。✨</p>
<h3 id="-更新点5新增-salogoutparameter-注销参数类">🚪 更新点5：新增 SaLogoutParameter 注销参数类</h3>
<p>SaLogoutParameter 用于控制注销操作中的部分细节行为️，例如：</p>
<p>通过 <code>Range</code> 参数决定注销范围 🎯：</p>
<pre><code class="language-java">// 注销范围： TOKEN=只注销当前 token 的会话，ACCOUNT=注销当前 token 指向的 loginId 其所有客户端会话
StpUtil.logout(new SaLogoutParameter().setRange(SaLogoutRange.TOKEN));
</code></pre>
<p>通过 <code>DeviceType</code> 参数决定哪些登录设备类型参与注销 💻：</p>
<pre><code class="language-java">// 指定 10001 账号，所有 PC 端注销下线，其它端如 APP 端不受影响 
StpUtil.logout(10001, new SaLogoutParameter().setDeviceType("PC"));
</code></pre>
<p>还有其它参数此处暂不逐一列举，文档直达地址：<a href="https://sa-token.cc/doc.html#/up/login-parameter" target="_blank" rel="noopener nofollow">Sa-Token 登录参数 &amp; 注销参数</a> 🔗</p>
<h3 id="-更新点6修复-stputilsettokenvaluexxxloginparametergetiswriteheader-空指针的问题">🐞 更新点6：修复 <code>StpUtil.setTokenValue("xxx")</code>、<code>loginParameter.getIsWriteHeader()</code> 空指针的问题。</h3>
<p>这个没啥好说的，有 bug 🐛 必须修复。</p>
<p>fix issue：<a href="https://gitee.com/dromara/sa-token/issues/IBKSM0" target="_blank" rel="noopener nofollow">#IBKSM0</a> 🔗</p>
<h3 id="-更新点7api-参数签名模块升级">✨ 更新点7：API 参数签名模块升级</h3>
<ul>
<li>1、新增了 @SaCheckSign 注解，现在 API 参数签名模块也支持注解鉴权了。🆕</li>
<li>2、新增自定义签名的摘要算法，现在不仅可以 md5 算法计算签名，也支持 sha1、sha256 等算法了。🔐</li>
<li>3、新增多应用模式：</li>
</ul>
<p>多应用模式就是指，允许在对接多个系统时分别使用不同的秘钥等配置项，配置示例如下 📝：</p>
<pre><code class="language-yml">sa-token: 
    # API 签名配置 多应用模式
    sign-many:
        # 应用1
        xm-shop:
            secret-key: 0123456789abcdefg
            digest-algo: md5
        # 应用2
        xm-forum:
            secret-key: 0123456789hijklmnopq
            digest-algo: sha256
        # 应用3
        xm-video:
            secret-key: 12341234aaaaccccdddd
            digest-algo: sha512
</code></pre>
<p>然后在签名时通过指定 appid 的方式获取对应的 SignTemplate 进行操作 👨💻：</p>
<pre><code class="language-java">// 创建签名示例
String paramStr = SaSignMany.getSignTemplate("xm-shop").addSignParamsAndJoin(paramMap);

// 校验签名示例
SaSignMany.getSignTemplate("xm-shop").checkRequest(SaHolder.getRequest());
</code></pre>
<h3 id="-更新点8新增-sa-token-caffeine-插件用于整合-caffeine">⚡ 更新点8：新增 sa-token-caffeine 插件，用于整合 Caffeine</h3>
<p>Caffeine 是一个基于 Java 的高性能本地缓存库，本次新增 sa-token-caffeine 插件用于将 Caffeine 作为 Sa-Token 的缓存层，存储会话鉴权数据。🚀<br>
这进一步丰富了 Sa-Token 的缓存层插件生态。🌱</p>
<pre><code class="language-xml">&lt;!-- Sa-Token 整合 Caffeine --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;cn.dev33&lt;/groupId&gt;
    &lt;artifactId&gt;sa-token-caffeine&lt;/artifactId&gt;
    &lt;version&gt;1.41.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h3 id="-更新点9新增-sa-token-serializer-features-序列化扩展包">🎪 更新点9：新增 sa-token-serializer-features 序列化扩展包</h3>
<p>引入此插件可以为 Sa-Token 提供一些有意思的序列化方案。（娱乐向，不建议上生产 🎭）</p>
<p>例如：以base64 编码，采用：元素周期表 🧪、特殊符号 🔣、或 emoji 😊 作为元字符集存储数据 ：</p>
<p><img src="https://oss.dev33.cn/sa-token/blog/2025-3/sa-custom-serializer-yszqb.png" alt="sa-custom-serializer-yszqb.png" loading="lazy"></p>
<p><img src="https://oss.dev33.cn/sa-token/blog/2025-3/sa-custom-serializer-tsfh.png" alt="sa-custom-serializer-tsfh.png" loading="lazy"></p>
<p><img src="https://oss.dev33.cn/sa-token/blog/2025-3/sa-custom-serializer-emoji.png" alt="sa-custom-serializer-emoji.png" loading="lazy"></p>
<p><img src="https://oss.dev33.cn/sa-token/blog/2025-3/sa-custom-serializer-emoji2.png" alt="sa-custom-serializer-emoji2.png" loading="lazy"></p>
<h3 id="-完整更新日志">📜 完整更新日志</h3>
<p>除了以上提到的几点以外，还有更多更新点无法逐一详细介绍，下面是 v1.41.0 版本的完整更新日志：</p>
<ul>
<li>core:
<ul>
<li>修复：修复 <code>StpUtil.setTokenValue("xxx")</code>、<code>loginParameter.getIsWriteHeader()</code> 空指针的问题。 fix: <a href="https://gitee.com/dromara/sa-token/issues/IBKSM0" target="_blank" rel="noopener nofollow">#IBKSM0</a></li>
<li>修复：将 <code>SaDisableWrapperInfo.createNotDisabled()</code> 默认返回值封禁等级改为 -2，以保证向之前版本兼容。</li>
<li>新增：新增基于 SPI 的插件体系。   <strong>[重要]</strong></li>
<li>重构：JSON 转换器模块。   <strong>[重要]</strong></li>
<li>新增：新增 serializer 序列化模块，控制 <code>Object</code> 与 <code>String</code> 的序列化方式。   <strong>[重要]</strong></li>
<li>重构：重构防火墙模块，增加 hooks 机制。   <strong>[重要]</strong></li>
<li>新增：防火墙新增：请求 path 禁止字符校验、Host 检测、请求 Method 检测、请求头检测、请求参数检测。重构目录遍历符检测算法。</li>
<li>重构：重构 <code>SaTokenDao</code> 模块，将序列化与存储操作分离。   <strong>[重要]</strong></li>
<li>重构：重构 <code>SaTokenDao</code> 默认实现类，优化底层设计。</li>
<li>新增：<code>isLastingCookie</code> 配置项支持在全局配置中定义了。</li>
<li>重构：<code>SaLoginModel</code> -&gt; <code>SaLoginParameter</code>。    <strong>[不向下兼容]</strong></li>
<li>重构：<code>TokenSign</code> -&gt; <code>SaTerminalInfo</code>。    <strong>[不向下兼容]</strong></li>
<li>新增：<code>SaTerminalInfo</code> 新增 <code>extraData</code> 自定义扩展数据设置。</li>
<li>新增：<code>SaLoginParameter</code> 支持配置 <code>isConcurrent</code>、<code>isShare</code>、<code>maxLoginCount</code>、<code>maxTryTimes</code>。</li>
<li>新增：新增 <code>SaLogoutParameter</code>，用于控制注销会话时的各种细节。  <strong>[重要]</strong></li>
<li>新增：新增 <code>StpLogic#isTrustDeviceId</code> 方法，用于判断指定设备是否为可信任设备。</li>
<li>新增：新增 <code>StpUtil.getTerminalListByLoginId(loginId)</code>、<code>StpUtil.forEachTerminalList(loginId)</code> 方法，以更方便的实现单账号会话管理。</li>
<li>升级：API 参数签名配置支持自定义摘要算法。</li>
<li>新增：新增 <code>@SaCheckSign</code> 注解鉴权，用于 API 签名参数校验。</li>
<li>新增：API 参数签名模块新增多应用模式。 fix: <a href="https://gitee.com/dromara/sa-token/issues/IAK2BI" target="_blank" rel="noopener nofollow">#IAK2BI</a>, <a href="https://gitee.com/dromara/sa-token/issues/I9SPI1" target="_blank" rel="noopener nofollow">#I9SPI1</a>, <a href="https://gitee.com/dromara/sa-token/issues/IAC0P9" target="_blank" rel="noopener nofollow">#IAC0P9</a>   <strong>[重要]</strong></li>
<li>重构：全局配置 <code>is-share</code> 默认值改为 false。    <strong>[不向下兼容]</strong></li>
<li>重构：踢人下线、顶人下线默认将删除对应的 token-session 对象。</li>
<li>优化：优化注销会话相关 API。</li>
<li>重构：登录默认设备类型值改为 DEF。   <strong>[不向下兼容]</strong></li>
<li>重构：<code>BCrypt</code> 标注为 <code>@Deprecated</code>。</li>
<li>新增：<code>sa-token-quick-login</code> 支持 <code>SpringBoot3</code> 项目。 fix: <a href="https://gitee.com/dromara/sa-token/issues/IAFQNE" target="_blank" rel="noopener nofollow">#IAFQNE</a>、<a href="https://github.com/dromara/Sa-Token/issues/673" target="_blank" rel="noopener nofollow">#673</a></li>
<li>新增：<code>SaTokenConfig</code> 新增 <code>replacedRange</code>、<code>overflowLogoutMode</code>、<code>logoutRange</code>、<code>isLogoutKeepFreezeOps</code>、<code>isLogoutKeepTokenSession</code> 配置项。</li>
</ul>
</li>
<li>OAuth2：
<ul>
<li>重构：重构 sa-token-oauth2 插件，使注解鉴权处理器的注册过程改为 SPI 插件加载。</li>
</ul>
</li>
<li>插件：
<ul>
<li>新增：<code>sa-token-serializer-features</code> 插件，用于实现各种形式的自定义字符集序列化方案。</li>
<li>新增：<code>sa-token-fastjson</code> 插件。</li>
<li>新增：<code>sa-token-fastjson2</code> 插件。</li>
<li>新增：<code>sa-token-snack3</code> 插件。</li>
<li>新增：<code>sa-token-caffeine</code> 插件。</li>
</ul>
</li>
<li>单元测试：
<ul>
<li>新增：<code>sa-token-json-test</code> json 模块单元测试。</li>
<li>新增：<code>sa-token-serializer-test</code> 序列化模块单元测试。</li>
</ul>
</li>
<li>文档：
<ul>
<li>新增：QA “多个项目共用同一个 redis，怎么防止冲突？”</li>
<li>优化：补全 OAuth2 模块遗漏的相关配置项。</li>
<li>优化：优化 OAuth2 简述章节描述文档。</li>
<li>优化：完善 “SSO 用户数据同步 / 迁移” 章节文档。</li>
<li>修正：补全项目目录结构介绍文档。</li>
<li>新增：文档新增 “登录参数 &amp; 注销参数” 章节。</li>
<li>优化：优化“技术求助”按钮的提示文字。</li>
<li>新增：新增 <code>preview-doc.bat</code> 文件，一键启动文档预览。</li>
<li>完善：完善 Redis 集成文档。</li>
<li>新增：新增单账号会话查询的操作示例。</li>
<li>新增：新增顶人下线 API 介绍。</li>
<li>新增：新增 自定义序列化插件 章节。</li>
</ul>
</li>
<li>其它：
<ul>
<li>新增：新增 <code>sa-token-demo/pom.xml</code> 以便在 idea 中一键导入所有 demo 项目。</li>
<li>删除：删除不必要的 <code>.gitignore</code> 文件</li>
<li>重构：重构 <code>sa-token-solon-plugin</code> 插件。</li>
<li>新增：新增设备锁登录示例。</li>
</ul>
</li>
</ul>
<p>更新日志在线文档直达链接：<a href="https://sa-token.cc/doc.html#/more/update-log" target="_blank" rel="noopener nofollow">https://sa-token.cc/doc.html#/more/update-log</a></p>
<h3 id="-其它">🌟 其它</h3>
<p>代码仓库地址：<a href="https://gitee.com/dromara/sa-token" target="_blank" rel="noopener nofollow">https://gitee.com/dromara/sa-token</a></p>
<p>框架功能结构图：</p>
<p><img src="https://oss.dev33.cn/sa-token/art/sa-token-js4.png" alt="js" loading="lazy"></p>

</div>
<div class="clear"></div>

        </div>
        <p class="postfoot">
            posted on 
<span id="post-date" data-last-update-days="0.7440173188576389" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-23 12:24">2025-03-23 12:24</span>&nbsp;
<a href="https://www.cnblogs.com/shengzhang">孔明click33</a>&nbsp;
阅读(<span id="post_view_count">72</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18787747" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18787747);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18787747', targetLink: 'https://www.cnblogs.com/shengzhang/p/18787747', title: 'Sa-Token v1.41.0 发布 &amp;#128640;，来看看有没有令你心动的功能！' })">举报</a>

        </p>
    