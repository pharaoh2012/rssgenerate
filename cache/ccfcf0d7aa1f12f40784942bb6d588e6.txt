<!----> <meta itemprop="headline" content="为什么组件库打包用 Rollup 而不是 Webpack?"> <meta itemprop="keywords" content="前端,JavaScript,Webpack"> <meta itemprop="datePublished" content="2024-11-17T03:31:05.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="zxg_神说要有光"> <meta itemprop="url" content="https://juejin.cn/user/2788017216685118"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-7cdd11fb="">
            为什么组件库打包用 Rollup 而不是 Webpack?
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-7cdd11fb=""><div class="author-info-box" data-v-7cdd11fb=""><div class="author-name" data-v-7cdd11fb=""><a href="/user/2788017216685118/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-7cdd11fb=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    zxg_神说要有光
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-7cdd11fb=""><time datetime="2024-11-17T03:31:05.000Z" title="Sun Nov 17 2024 03:31:05 GMT+0000 (Coordinated Universal Time)" class="time" data-v-7cdd11fb="">
                    2024-11-17
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-7cdd11fb=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-7cdd11fb=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-7cdd11fb=""></circle></svg> <span class="views-count" data-v-7cdd11fb="">
                    11,636
                  </span> <span class="read-time" data-v-7cdd11fb=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-7cdd11fb=""><rect width="16" height="16" fill="none" data-v-7cdd11fb=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-7cdd11fb=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-7cdd11fb=""></path></svg>
                    阅读7分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-7cdd11fb=""></div> <!----> <!----></div> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-7cdd11fb=""><div class="article-viewer markdown-body result"><p>Rolup 是一个打包工具，类似 Webpack。</p>
<p>组件库打包基本都是用 Rollup。</p>
<p>那 Webpack 和 Rollup 有什么区别呢？为什么组件库打包都用 Rollup 呢？</p>
<p>我们来试一下：</p>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-built_in">mkdir</span> rollup-test
<span class="hljs-built_in">cd</span> rollup-test
npm init -y
</code></pre>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4fdd213621e04e648bf67e0f7a3a4623~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=816&amp;h=674&amp;s=127704&amp;e=png&amp;b=000000" alt="image.png" loading="lazy"></p>
<p>我们创建两个模块：</p>
<p>src/index.js</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> { add } <span class="hljs-keyword">from</span> <span class="hljs-string">'./utils'</span>;

<span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> main;
</code></pre>
<p>src/utils.js</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>) {
    <span class="hljs-keyword">return</span> a + b;
}

<span class="hljs-keyword">export</span> {
    add
}
</code></pre>
<p>很简单的两个模块，我们分别用 rollup 和 webpack 来打包下：</p>
<p>安装 rollup：</p>
<pre><code class="hljs language-css" lang="css">npm install <span class="hljs-attr">--save-dev</span> rollup
</code></pre>
<p>创建 rollup.config.js</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">/** <span class="hljs-doctag">@type</span> {<span class="hljs-type">import("rollup").RollupOptions</span>} */</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
    <span class="hljs-attr">input</span>: <span class="hljs-string">'src/index.js'</span>,
    <span class="hljs-attr">output</span>: [
        {
            <span class="hljs-attr">file</span>: <span class="hljs-string">'dist/esm.js'</span>,
            <span class="hljs-attr">format</span>: <span class="hljs-string">'esm'</span>
        },
        {
            <span class="hljs-attr">file</span>: <span class="hljs-string">'dist/cjs.js'</span>,
            <span class="hljs-attr">format</span>: <span class="hljs-string">"cjs"</span>
        },
        {
            <span class="hljs-attr">file</span>: <span class="hljs-string">'dist/umd.js'</span>,
            <span class="hljs-attr">name</span>: <span class="hljs-string">'Guang'</span>,
            <span class="hljs-attr">format</span>: <span class="hljs-string">"umd"</span>
        }
    ]
};
</code></pre>
<p>配置入口模块，打包产物的位置、模块规范。</p>
<p>在 webpack 里叫做 entry、output，而在 rollup 里叫做 input、output。</p>
<p>我们指定产物的模块规范有 es module、commonjs、umd 三种。</p>
<p>umd 是挂在全局变量上，还要指定一个全局变量的 name。</p>
<p>上面的 @type 是 jsdoc 的语法，也就是 ts 支持的在 js 里声明类型的方式。</p>
<p>效果就是写配置时会有类型提示：</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/02c1d9f3708e4c92863308439e872e88~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1072&amp;h=622&amp;s=98796&amp;e=png&amp;b=1f1f1f" alt="image.png" loading="lazy"></p>
<p>不引入的话，啥提示都没有：</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a61d5ec36a56485489e7521300792893~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1028&amp;h=674&amp;s=86054&amp;e=png&amp;b=1f1f1f" alt="image.png" loading="lazy"></p>
<p>这里我们用了 export，把 rollup.config.js 改名为 rollup.config.mjs，告诉 node 这个模块是 es module 的。</p>
<p>配置好后，我们打包下：</p>
<pre><code class="hljs language-arduino" lang="arduino">npx rollup -c rollup.config.mjs
</code></pre>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f3437dd655043daad8892a571f1c8be~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=994&amp;h=210&amp;s=42882&amp;e=png&amp;b=181818" alt="image.png" loading="lazy"></p>
<p>看下产物：</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b784d586e224e92918fab031d85d788~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1188&amp;h=568&amp;s=98687&amp;e=png&amp;b=1d1d1d" alt="image.png" loading="lazy"></p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/231502204a4d4558a346e3429819a9e9~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1182&amp;h=490&amp;s=86544&amp;e=png&amp;b=1d1d1d" alt="image.png" loading="lazy"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46081a2a46894708813368829ca1f223~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2418&amp;h=902&amp;s=231173&amp;e=png&amp;b=1e1e1e" alt="image.png" loading="lazy"></p>
<p>三种模块规范的产物都没问题。</p>
<p>那用 webpack 打包，产物是什么样呢？</p>
<p>我们试一下：</p>
<pre><code class="hljs language-css" lang="css">npm install <span class="hljs-attr">--save-dev</span> webpack-cli webpack
</code></pre>
<p>创建 webpack.config.mjs</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">'node:path'</span>;

<span class="hljs-comment">/** <span class="hljs-doctag">@type</span> {<span class="hljs-type">import("webpack").Configuration</span>} */</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
    <span class="hljs-attr">entry</span>: <span class="hljs-string">'./src/index.js'</span>,
    <span class="hljs-attr">mode</span>: <span class="hljs-string">'development'</span>,
    <span class="hljs-attr">devtool</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-attr">output</span>: {
        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">dirname</span>, <span class="hljs-string">'dist2'</span>),
        <span class="hljs-attr">filename</span>: <span class="hljs-string">'bundle.js'</span>,
        <span class="hljs-attr">libraryTarget</span>: <span class="hljs-string">'commonjs2'</span>
    }
};
</code></pre>
<p>指定 libraryTarget 为 commonjs2</p>
<p>打包下：</p>
<pre><code class="hljs language-arduino" lang="arduino">npx webpack-cli -c webpack.config.mjs
</code></pre>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f0cff1a499b45de8f2ff59149746d65~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1002&amp;h=272&amp;s=73293&amp;e=png&amp;b=191919" alt="image.png" loading="lazy"></p>
<p>可以看到，webpack 的打包产物有 100 行代码：</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/3a984cf04f1043e7af5cf8f232956630~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenhnX-elnuivtOimgeacieWFiQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739248678&amp;x-signature=%2Fm3A1aj2JkugRkUaOZdE9PHu%2BLs%3D" alt="image.png" loading="lazy"></p>
<p>再来试试 umd 的：</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/af5be1a365de4ea1ab3c4541cb5ba26c~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenhnX-elnuivtOimgeacieWFiQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739248678&amp;x-signature=ME834ZhpwR4%2BRvNEFlzCd4AJ5GA%3D" alt="image.png" loading="lazy"></p>
<p>umd 要指定全局变量的名字。</p>
<p>打包下：</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/6e2b8ef6efc2475b95f8818000209bd3~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenhnX-elnuivtOimgeacieWFiQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739248678&amp;x-signature=vVJPokUwROWzmYfSq7b4vfG1x6Y%3D" alt="image.png" loading="lazy"></p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c53b941587a748be96e6a74380ee4bf9~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenhnX-elnuivtOimgeacieWFiQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739248678&amp;x-signature=70rbgohhyW7Sa4Yn0uzjybBVH0w%3D" alt="image.png" loading="lazy"></p>
<p>也是 100 多行。</p>
<p>最后再试下 es module 的：</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/b953147e654044cc93db4271ab62f598~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenhnX-elnuivtOimgeacieWFiQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739248678&amp;x-signature=7T4M3ZQpu4MBi%2FOZT%2FUzzcUaPg8%3D" alt="image.png" loading="lazy"></p>
<p>libraryTarget 为 module 的时候，还要指定 experiments.outputModule 为 true。</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">'node:path'</span>;

<span class="hljs-comment">/** <span class="hljs-doctag">@type</span> {<span class="hljs-type">import("webpack").Configuration</span>} */</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
    <span class="hljs-attr">entry</span>: <span class="hljs-string">'./src/index.js'</span>,
    <span class="hljs-attr">mode</span>: <span class="hljs-string">'development'</span>,
    <span class="hljs-attr">devtool</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-attr">experiments</span>: {
        <span class="hljs-attr">outputModule</span>: <span class="hljs-literal">true</span>
    },
    <span class="hljs-attr">output</span>: {
        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">dirname</span>, <span class="hljs-string">'dist2'</span>),
        <span class="hljs-attr">filename</span>: <span class="hljs-string">'bundle.js'</span>,
        <span class="hljs-attr">libraryTarget</span>: <span class="hljs-string">'module'</span>
    }
};
</code></pre>
<p>打包下：</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a97027036ec44d9ebd788e13b1a2219b~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenhnX-elnuivtOimgeacieWFiQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739248678&amp;x-signature=TgY1bOtLXY2rdGgJkT9yfEw9v4U%3D" alt="image.png" loading="lazy"></p>
<p>产物也同样是 100 多行。</p>
<p>相比之下，rollup 的产物就非常干净，没任何 runtime 代码：</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/201eb817154445fea1f461f6a11c0135~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1168&amp;h=582&amp;s=97273&amp;e=png&amp;b=1d1d1d" alt="image.png" loading="lazy"></p>
<p>更重要的是 <strong>webpack 目前打包出 es module 产物还是实验性的，并不稳定</strong>。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/b953147e654044cc93db4271ab62f598~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgenhnX-elnuivtOimgeacieWFiQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739248678&amp;x-signature=7T4M3ZQpu4MBi%2FOZT%2FUzzcUaPg8%3D" alt="image.png" loading="lazy"></p>
<p>webpack 打 cjs 和 umd 的 library 还行。</p>
<p>但 js 库一般不都要提供 es module 版本么，支持的不好怎么行？</p>
<p>所以<strong>我们一般用 rollup 来做 js 库的打包，用 webpack 做浏览器环境的打包。</strong></p>
<p>前面说组件库打包一般都用 rollup，我们来看下各大组件库的打包需求。</p>
<p>安装 antd:</p>
<pre><code class="hljs language-css" lang="css">npm install <span class="hljs-attr">--no-save</span> antd
</code></pre>
<p>在 node_modules 下可以看到它分了 dist、es、lib 三个目录：</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b9d31fa31d0148ff8d2598bb3c14d5a8~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=414&amp;h=360&amp;s=25952&amp;e=png&amp;b=191919" alt="" loading="lazy"></p>
<p>分别看下这三个目录的组件代码：</p>
<p>lib 下的组件是 commonjs 的：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f56b42587074655afebf0a555b33981~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1764&amp;h=910&amp;s=415186&amp;e=png&amp;b=1d1d1d" alt="" loading="lazy"></p>
<p>es 下的组件是 es module 的：</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9131c1971860413a8780a8f4f125a348~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1612&amp;h=834&amp;s=313225&amp;e=png&amp;b=1d1d1d" alt="" loading="lazy"></p>
<p>dist 下的组件是 umd 的：</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d1c9f6af12d4d0fb72ea940c1a2fca3~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1780&amp;h=578&amp;s=252241&amp;e=png&amp;b=1e1e1e" alt="" loading="lazy"></p>
<p>然后在 package.json 里分别声明了 commonjs、esm、umd 还有类型的入口：</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dd5451ec3cec426abe12b886d54f2072~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=728&amp;h=250&amp;s=45287&amp;e=png&amp;b=1f1f1f" alt="" loading="lazy"></p>
<p>这样，当你用 require 引入的就是 lib 下的组件，用 import 引入的就是 es 下的组件。</p>
<p>而直接 script 标签引入的就是 unpkg 下的组件。</p>
<p>再来看一下 semi design 的：</p>
<pre><code class="hljs language-css" lang="css">npm install <span class="hljs-attr">--no-save</span> <span class="hljs-keyword">@douyinfe</span>/semi-ui
</code></pre>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/157ebd3a769d4f72a33047fbd695ae1a~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=494&amp;h=638&amp;s=50362&amp;e=png&amp;b=1b1b1b" alt="" loading="lazy"></p>
<p>也是一样：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7715e7c48a944cf4a845ad77010ba470~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=882&amp;h=472&amp;s=84118&amp;e=png&amp;b=1f1f1f" alt="" loading="lazy"></p>
<p>只不过多了个 css 目录。</p>
<p>所以说，<strong>组件库的打包需求就是组件分别提供 esm、commonjs、umd 三种模块规范的代码，并且还有单独打包出的 css。</strong></p>
<p>那 rollup 如何打包 css 呢？</p>
<p>我们试一下：</p>
<p>创建 src/index.css</p>
<pre><code class="hljs language-css" lang="css"><span class="hljs-selector-class">.aaa</span> {
    <span class="hljs-attribute">background</span>: blue;
}
</code></pre>
<p>创建 src/utils.css</p>
<pre><code class="hljs language-css" lang="css"><span class="hljs-selector-class">.bbb</span> {
    <span class="hljs-attribute">background</span>: red;
}
</code></pre>
<p>然后分别在 index.js 和 utils.js 里引入下：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb247b10d94a40009ad49a79e12ccf9c~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1366&amp;h=512&amp;s=99356&amp;e=png&amp;b=1d1d1d" alt="image.png" loading="lazy"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b040aeabbacd465685b3e7e4e6d22a14~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1298&amp;h=502&amp;s=80755&amp;e=png&amp;b=1c1c1c" alt="image.png" loading="lazy"></p>
<p>安装 rollup 处理 css 的插件：</p>
<pre><code class="hljs language-css" lang="css">npm install <span class="hljs-attr">--save-dev</span> rollup-plugin-postcss
</code></pre>
<p>引入下：</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/be5b759c43b7450aaacfe82e988a8f0b~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1096&amp;h=1128&amp;s=153020&amp;e=png&amp;b=1f1f1f" alt="image.png" loading="lazy"></p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> postcss <span class="hljs-keyword">from</span> <span class="hljs-string">'rollup-plugin-postcss'</span>;

<span class="hljs-comment">/** <span class="hljs-doctag">@type</span> {<span class="hljs-type">import("rollup").RollupOptions</span>} */</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
    <span class="hljs-attr">input</span>: <span class="hljs-string">'src/index.js'</span>,
    <span class="hljs-attr">output</span>: [
        {
            <span class="hljs-attr">file</span>: <span class="hljs-string">'dist/esm.js'</span>,
            <span class="hljs-attr">format</span>: <span class="hljs-string">'esm'</span>
        },
        {
            <span class="hljs-attr">file</span>: <span class="hljs-string">'dist/cjs.js'</span>,
            <span class="hljs-attr">format</span>: <span class="hljs-string">"cjs"</span>
        },
        {
            <span class="hljs-attr">file</span>: <span class="hljs-string">'dist/umd.js'</span>,
            <span class="hljs-attr">name</span>: <span class="hljs-string">'Guang'</span>,
            <span class="hljs-attr">format</span>: <span class="hljs-string">"umd"</span>
        }
    ],
    <span class="hljs-attr">plugins</span>: [
        <span class="hljs-title function_">postcss</span>({
            <span class="hljs-attr">extract</span>: <span class="hljs-literal">true</span>,
            <span class="hljs-attr">extract</span>: <span class="hljs-string">'index.css'</span>
        }),
    ]
};
</code></pre>
<p>然后跑一下：</p>
<pre><code class="hljs language-arduino" lang="arduino">npx rollup -c rollup.config.mjs
</code></pre>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ca4dc36e19c4f11a6e47c0600c24cac~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1000&amp;h=164&amp;s=29262&amp;e=png&amp;b=181818" alt="image.png" loading="lazy"></p>
<p>可以看到，产物多了 index.css</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2cc1c30fced54a9e9dcd3cd7b242c69f~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1252&amp;h=394&amp;s=65372&amp;e=png&amp;b=1c1c1c" alt="image.png" loading="lazy"></p>
<p>而 js 中没有引入 css 了：</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7889a622c0e4a8bb2134b70ab67736c~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1324&amp;h=548&amp;s=98826&amp;e=png&amp;b=1c1c1c" alt="image.png" loading="lazy"></p>
<p>被 tree shaking 掉了，rollup 默认开启 tree shaking。</p>
<p>这样我们就可以单独打包组件库的 js 和 css。</p>
<p>删掉 dist，我们试下不抽离是什么样的：</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89ec284fa28e4d5aa35c977385cc123b~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=800&amp;h=532&amp;s=58170&amp;e=png&amp;b=1f1f1f" alt="image.png" loading="lazy"></p>
<pre><code class="hljs language-arduino" lang="arduino">npx rollup -c rollup.config.mjs
</code></pre>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec9eae9552c24ee3acc8e02a8e27dce1~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=976&amp;h=154&amp;s=30583&amp;e=png&amp;b=181818" alt="image.png" loading="lazy"></p>
<p>可以看到，代码里多了 styleInject 的方法：</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/80d08fdfb322454c9bf32e1abadf32aa~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1968&amp;h=1222&amp;s=318315&amp;e=png&amp;b=1d1d1d" alt="image.png" loading="lazy"></p>
<p>用于往 head 里注入 style</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88533542fa16400da547884a37532b22~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1640&amp;h=830&amp;s=214061&amp;e=png&amp;b=1d1d1d" alt="image.png" loading="lazy"></p>
<p>一般打包组件库产物，我们都会分离出来。</p>
<p>然后我们再用 webpack 打包试试：</p>
<p>安装用到的 loader：</p>
<pre><code class="hljs language-css" lang="css">npm install <span class="hljs-attr">--save-dev</span> css-loader style-loader
</code></pre>
<p>css-loader 是读取 css 内容为 js</p>
<p>style-loader 是往页面 head 下添加 style 标签，填入 css</p>
<p>这俩结合起来和 rollup 那个插件功能一样。</p>
<p>配置 loader：</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/096469a075e84593aed347a0d4862fc2~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1162&amp;h=828&amp;s=137620&amp;e=png&amp;b=1f1f1f" alt="image.png" loading="lazy"></p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-attr">module</span>: {
    <span class="hljs-attr">rules</span>: [{
        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/i</span>,
        <span class="hljs-attr">use</span>: [<span class="hljs-string">"style-loader"</span>, <span class="hljs-string">"css-loader"</span>],
    }],
}
</code></pre>
<p>用 webpack 打包下：</p>
<pre><code class="hljs language-arduino" lang="arduino">npx webpack-cli -c webpack.config.mjs
</code></pre>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae242ad4267f4327affc6fba29c07905~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1626&amp;h=598&amp;s=181957&amp;e=png&amp;b=191919" alt="image.png" loading="lazy"></p>
<p>可以看到 css 变成 js 模块引入了：</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/044c92d8b7d5417b9a0a41ce355a20c8~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1898&amp;h=596&amp;s=193335&amp;e=png&amp;b=1d1d1d" alt="image.png" loading="lazy"></p>
<p>这是 css-loader 做的。</p>
<p>而插入到 style 标签的 injectStylesIntoStyleTag 方法则是 style-loader 做的：</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a49b8cb85624d2fa4dbcff6470cda43~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2432&amp;h=564&amp;s=232054&amp;e=png&amp;b=1e1e1e" alt="image.png" loading="lazy"></p>
<p>然后再试下分离 css，这用到一个单独的插件：</p>
<pre><code class="hljs language-css" lang="css">npm install <span class="hljs-attr">--save-dev</span> mini-css-extract-plugin
</code></pre>
<p>配一下：</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/206470bf17b64eb18687f48d11bc8d69~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1226&amp;h=1022&amp;s=192027&amp;e=png&amp;b=1f1f1f" alt="image.png" loading="lazy"></p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">'node:path'</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">MiniCssExtractPlugin</span> <span class="hljs-keyword">from</span> <span class="hljs-string">"mini-css-extract-plugin"</span>;

<span class="hljs-comment">/** <span class="hljs-doctag">@type</span> {<span class="hljs-type">import("webpack").Configuration</span>} */</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
    <span class="hljs-attr">entry</span>: <span class="hljs-string">'./src/index.js'</span>,
    <span class="hljs-attr">mode</span>: <span class="hljs-string">'development'</span>,
    <span class="hljs-attr">devtool</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-attr">output</span>: {
        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">dirname</span>, <span class="hljs-string">'dist2'</span>),
        <span class="hljs-attr">filename</span>: <span class="hljs-string">'bundle.js'</span>,
    },
    <span class="hljs-attr">module</span>: {
        <span class="hljs-attr">rules</span>: [{
            <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/i</span>,
            <span class="hljs-attr">use</span>: [<span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>, <span class="hljs-string">"css-loader"</span>],
        }],
    },
    <span class="hljs-attr">plugins</span>: [
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniCssExtractPlugin</span>({
            <span class="hljs-attr">filename</span>: <span class="hljs-string">'index.css'</span>
        })
    ]
};

</code></pre>
<p>指定抽离的 filename 为 index.css</p>
<p>抽离用的 loader 要紧放在 css-loader 之前。</p>
<p>样式抽离到了 css 中，这时候 style-loader 也就不需要了。</p>
<p>打包下：</p>
<pre><code class="hljs language-arduino" lang="arduino">npx webpack-cli -c webpack.config.mjs
</code></pre>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69f93ee9bfd9483ab6eb20dfcc9435a7~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1460&amp;h=524&amp;s=149259&amp;e=png&amp;b=191919" alt="image.png" loading="lazy"></p>
<p>样式抽离到了 css 中：</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1010213d837448d2b44990f5760a8add~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1840&amp;h=560&amp;s=131448&amp;e=png&amp;b=1d1d1d" alt="image.png" loading="lazy"></p>
<p>而 js 里的这个模块变为了空实现：</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e68a78f4d454d3ca55440b8d80cdc5f~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1880&amp;h=574&amp;s=159887&amp;e=png&amp;b=1d1d1d" alt="image.png" loading="lazy"></p>
<p>所以 webpack 的 style-loader + css-loader + mini-css-extract-plugin 就相当于 rollup 的 rollup-plugin-postcss 插件。</p>
<p>为什么 rollup 没有 loader 呢？</p>
<p>因为 rollup 的 plugin 有 transform 方法，也就相当于 loader 的功能了。</p>
<p>我们自己写一下抽离 css 的 rollup 插件：</p>
<p>创建 my-extract-css-rollup-plugin.mjs（注意这里用 es module 需要指定后缀为 .mjs）：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">const</span> extractArr = [];

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">myExtractCssRollupPlugin</span> (opts) {
    <span class="hljs-keyword">return</span> {
      <span class="hljs-attr">name</span>: <span class="hljs-string">'my-extract-css-rollup-plugin'</span>,
      <span class="hljs-title function_">transform</span>(<span class="hljs-params">code, id</span>) {
        <span class="hljs-keyword">if</span>(!id.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">'.css'</span>)) {
          <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
        }

        extractArr.<span class="hljs-title function_">push</span>(code);

        <span class="hljs-keyword">return</span> {
          <span class="hljs-attr">code</span>: <span class="hljs-string">'export default undefined'</span>,
          <span class="hljs-attr">map</span>: { <span class="hljs-attr">mappings</span>: <span class="hljs-string">''</span> }
        }
      },
      <span class="hljs-title function_">generateBundle</span>(<span class="hljs-params">options, bundle</span>) {

        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">emitFile</span>({
          <span class="hljs-attr">fileName</span>: opts.<span class="hljs-property">filename</span> || <span class="hljs-string">'guang.css'</span>,
          <span class="hljs-attr">type</span>: <span class="hljs-string">'asset'</span>,
          <span class="hljs-attr">source</span>: extractArr.<span class="hljs-title function_">join</span>(<span class="hljs-string">'\n/*光光666*/\n'</span>)
        })
      }
    };
  }

</code></pre>
<p>在 transform 里对代码做转换，这就相当于 webpack 的 loader 了。</p>
<p>我们在 transform 里只处理 css 文件，保存 css 代码，返回一个空的 js 文件。</p>
<p>然后 generateBundle 里调用 emitFile 生成一个合并后的 css 文件。</p>
<p>用一下：</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/beb2a640b9c0425bbde8e79d0744746d~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1436&amp;h=688&amp;s=137767&amp;e=png&amp;b=1f1f1f" alt="image.png" loading="lazy"></p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> myExtractCssRollupPlugin <span class="hljs-keyword">from</span> <span class="hljs-string">'./my-extract-css-rollup-plugin.mjs'</span>;
</code></pre>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-title function_">myExtractCssRollupPlugin</span>({
    <span class="hljs-attr">filename</span>: <span class="hljs-string">'666.css'</span>
})
</code></pre>
<p>删掉之前的 dist 目录，重新打包：</p>
<pre><code class="hljs language-arduino" lang="arduino">npx rollup -c rollup.config.mjs
</code></pre>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8025dbab4e7745b0b8b4ef163697e541~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1022&amp;h=164&amp;s=32586&amp;e=png&amp;b=181818" alt="image.png" loading="lazy"></p>
<p>看下产物：
<img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/347bab3b07354c4798c96861180109ca~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1164&amp;h=476&amp;s=79795&amp;e=png&amp;b=1c1c1c" alt="image.png" loading="lazy"></p>
<p>可以看到，抽离出了 css，内容是合并后的所有 css。</p>
<p>而 cjs 也没有 css 的引入：</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b66d89bac8a44cc9bb5b49cd5af9a2ca~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1232&amp;h=618&amp;s=104212&amp;e=png&amp;b=1d1d1d" alt="image.png" loading="lazy"></p>
<p>也是被 tree shaking 掉了。</p>
<p>我们把 tree shaking 关掉试试：</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6676d20a8ff5456bb0980ff3a10def7f~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=922&amp;h=512&amp;s=97514&amp;e=png&amp;b=1f1f1f" alt="image.png" loading="lazy"></p>
<p>再次打包：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14c2614fc10549e08afb42b9a47e9f72~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=974&amp;h=170&amp;s=32293&amp;e=png&amp;b=181818" alt="image.png" loading="lazy"></p>
<p>可以看到，两个 css 模块转换后的 js 模块依然被引入了：</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d566200441fd4e33956e398fd7c86b6e~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1220&amp;h=746&amp;s=136670&amp;e=png&amp;b=1d1d1d" alt="image.png" loading="lazy"></p>
<p>我们改下插件 transform 的内容：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9decd6b3fd24df3acb61099e96bf211~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1168&amp;h=560&amp;s=99917&amp;e=png&amp;b=1f1f1f" alt="image.png" loading="lazy"></p>
<p>再次打包：</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ecb305ed80b843538375f1380fda1bb3~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=964&amp;h=148&amp;s=27459&amp;e=png&amp;b=181818" alt="image.png" loading="lazy"></p>
<p>可以看到引入的也是我们转后后的 css 模块的内容：</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/47a9732649494188b851a7225e1095fe~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1306&amp;h=662&amp;s=124656&amp;e=png&amp;b=1c1c1c" alt="image.png" loading="lazy"></p>
<p>因为没用到，同样会被 tree shaking 掉。</p>
<p>所以说 <strong>rollup 的插件的 transform 就相当于 webpack loader 的功能。</strong></p>
<p>前面说 webpack 用来做浏览器的打包，而 rollup 一般做 js 库的打包。</p>
<p>这也不全对，vite 就是用 rollup 来做的生产环境的打包。</p>
<p>因为它开发环境下不打包，而是跑了一个开发服务器，对代码做了下转换，不需要 webpack 那些 dev server 的功能。</p>
<p>而生产环境又需要打包，所以 rollup 就很合适。</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de47edf9b51941328d3cf55ddca77fd9~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1660&amp;h=992&amp;s=188777&amp;e=png&amp;b=fefcfc" alt="image.png" loading="lazy"></p>
<p>开发环境下，浏览器里用 type 为 module 的 script 引入，会请求 vite 的开发服务器。</p>
<p>vite 开发服务器会调用 rollup 插件的 transform 方法来做转换。</p>
<p>而生产环境下，用 rollup 打包，也是用同样的 rollup 插件。</p>
<p>当然，vite 还会用 esbuild 来做下依赖的与构建，比如把 cjs 转换成 esm、把小模块打包成一个大的模块。</p>
<p>用 esbuild 是因为它更快。</p>
<p>所以说，vite 是基于 rollup 来实现的，包括开发服务器的 transform，以及生产环境的打包。</p>
<p>但是为了性能考虑，又用了 esbuild 做依赖预构建。</p>
<p>现在 vite 团队在开发 rust 版 rollup 也就是 rolldown 了，有了它之后，就可以完全替代掉 rollup + esbuild 了。</p>
<p>综上，除了 webpack、vite 外，rollup 也是非常常用的一个打包工具。</p>
<blockquote>
<p>案例代码上传了<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FQuarkGluonPlasma%2Fnodejs-course-code%2Ftree%2Fmain%2Frollup-test" target="_blank" title="https://github.com/QuarkGluonPlasma/nodejs-course-code/tree/main/rollup-test" ref="nofollow noopener noreferrer">github</a></p>
</blockquote>
<h2 data-id="heading-0">总结</h2>
<p>这节我们学习了 rollup，虽然它不如 webpack、vite 提到的多，但也是一个常用的打包工具。</p>
<p>它打包产物没有 runtime 代码，更简洁纯粹，能打包出 esm、cjs、umd 的产物，常用来做 js 库、组件库的打包。相比之下，webpack 目前对 esm 产物的支持还是实验性的，不稳定。</p>
<p>rollup 只有 plugin，没有 loader，因为它的 transform 方法就相当于 webpack 插件的 loader。</p>
<p>vite 就是基于 rollup 来实现的，开发环境用 rollup 插件的 transform 来做代码转换，生产环境用 rollup 打包。</p>
<p>不管你是想做组件库、js 库的打包，还是想深入学习 vite，都离不开 rollup。</p>
<blockquote>
<p>更多内容可以看我的小册<a href="https://juejin.cn/book/7408937821752262665" target="_blank" title="https://juejin.cn/book/7408937821752262665">《Node.js CLI 通关秘籍》</a></p>
</blockquote></div></div>