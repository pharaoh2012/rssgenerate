
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/feffery/p/19023501" title="发布于 2025-08-05 16:20">
    <span role="heading" aria-level="2">Python全栈应用开发利器Dash 3.x新版本介绍（5）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<center style="font-size: 18px; font-weight: bold; padding-top: 40px">更多Dash应用开发干货知识、案例，欢迎关注“玩转Dash”微信公众号👇</center>
<p><img src="https://img2024.cnblogs.com/blog/1344061/202507/1344061-20250703190053776-1837084116.png" alt="image" loading="lazy"></p>
<p>大家好我是费老师，在之前的几篇文章中，我们针对<code>Python</code>生态中<u>强大</u>且<u>灵活</u>的<em>全栈应用开发</em>框架<code>Dash</code>，分别介绍了其<code>3.x</code>新版本中众多的新功能及特性：</p>
<ul>
<li><a href="https://www.cnblogs.com/feffery/p/18964220" target="_blank">Python全栈应用开发利器Dash 3.x新版本介绍（1）</a></li>
<li><a href="https://www.cnblogs.com/feffery/p/18965946" target="_blank">Python全栈应用开发利器Dash 3.x新版本介绍（2）</a></li>
<li><a href="https://www.cnblogs.com/feffery/p/18970945" target="_blank">回调函数支持异步写法！Dash 3.x新版本介绍（3）</a></li>
<li><a href="https://www.cnblogs.com/feffery/p/18975138" target="_blank">Python全栈应用开发利器Dash 3.x新版本介绍（4）</a></li>
</ul>
<p>而今天的文章中，我将为大家介绍<code>Dash</code>从<code>3.0</code>版本开始，全新引入的<em>插件机制</em>，使得我们可以在<code>Dash</code>应用中<em>一行代码灵活启用</em>各种丰富的辅助拓展功能~</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202508/1344061-20250805161721362-671285257.png" width="50%"></center>
<h2 id="dash中全新引入的插件机制">Dash中全新引入的插件机制</h2>
<p>从<code>3.0.0</code>版本开始，<code>Dash</code>中新增了<code>hooks</code>机制，其本质是在当前<code>Dash</code>应用项目基础上，以低耦合的方式，为应用的不同部分（页面内容、回调逻辑、错误处理等）<em>额外</em>添加自定义功能。</p>
<p>对于广大<code>Dash</code>应用开发者，其实不需要了解这套机制背后的原理，直接通过<code>pip</code>安装使用各种现成的，基于<code>hooks</code>机制构建的成品插件即可，下面我们来介绍一些开箱即用的实用<code>Dash</code>插件，增强日常<code>Dash</code>应用开发、部署体验，你也可以在下面的仓库中找到完整的可用插件列表，以及如何自己开发<code>Dash</code>插件：</p>
<ul>
<li><code>Github</code>仓库：<a href="https://github.com/CNFeffery/awesome-dash-hooks" target="_blank" rel="noopener nofollow">https://github.com/CNFeffery/awesome-dash-hooks</a></li>
<li><code>Gitee</code>镜像同步仓库：<a href="https://gitee.com/cnfeffery/awesome-dash-hooks" target="_blank" rel="noopener nofollow">https://gitee.com/cnfeffery/awesome-dash-hooks</a></li>
</ul>
<h3 id="dash-change-cdn-plugin">dash-change-cdn-plugin</h3>
<p>首先我们要介绍的<code>Dash</code>插件<code>dash-change-cdn-plugin</code>，对于需要通过互联网部署<code>Dash</code>应用的朋友非常的有用，终端执行下列命令完成插件的安装，跟常规的<code>Python</code>包安装没有区别：</p>
<pre><code class="language-bash">pip install dash-change-cdn-plugin -U
</code></pre>
<p>举一个非常简单的<code>Dash</code>应用示例：</p>
<pre><code class="language-python">import dash
from dash import html
import feffery_antd_components as fac
from feffery_dash_utils.style_utils import style

# 导入dash-change-cdn-plugin插件
from dash_change_cdn_plugin import setup_change_cdn_plugin

# 启用插件功能
setup_change_cdn_plugin()

# 这里注意要设置serve_locally=False配合启用外部CDN资源
app = dash.Dash(__name__, serve_locally=False)

app.layout = html.Div(
    [
        fac.AntdAlert(
            message="测试信息内容",
            description="测试描述内容",
            showIcon=True,
            type="success",
        )
    ],
    style=style(padding=50),
)

if __name__ == "__main__":
    app.run()
</code></pre>
<p>其中最关键的代码只有下面这行：</p>
<pre><code class="language-python"># 启用插件功能
setup_change_cdn_plugin()
</code></pre>
<p>在此基础上，原本在<code>dash.Dash()</code>中设置<code>serve_locally=False</code>后，非<code>debug</code>模式下默认自动切换的指向<code>unpkg</code>的各静态资源<code>CDN</code>地址，会受<code>dash-change-cdn-plugin</code>插件作用，自动切换到访问速度更快更稳定的<code>npmmirror</code>，特别是对于国内通过互联网部署<code>Dash</code>应用的朋友，这一点非常有用，可以大幅度加速你的应用访问速度⚡：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202508/1344061-20250805161723528-1693040014.png"></center>
<p>除此之外，如果你不想使用<code>npmmirror</code>的<code>CDN</code>源，还可以通过参数快捷设置为<code>jsdelivr</code>、<code>fastly-jsdelivr</code>等其他流行的公共<code>CDN</code>，具体见<code>dash-change-cdn-plugin</code>文档说明：</p>
<ul>
<li><code>Github</code>仓库：<a href="https://github.com/CNFeffery/dash-change-cdn-plugin" target="_blank" rel="noopener nofollow">https://github.com/CNFeffery/dash-change-cdn-plugin</a></li>
<li><code>Gitee</code>镜像同步仓库：<a href="https://gitee.com/cnfeffery/dash-change-cdn-plugin" target="_blank" rel="noopener nofollow">https://gitee.com/cnfeffery/dash-change-cdn-plugin</a></li>
</ul>
<h3 id="dash-console-filter-plugin">dash-console-filter-plugin</h3>
<p>接下来我们要介绍的<code>Dash</code>插件<code>dash-console-filter-plugin</code>也非常实用，通过它，我们可以屏蔽指定单个或多个关键词对应的错误信息，令它们不在浏览器控制台中被打印出来，适合屏蔽一些对实际应用功能没有负面影响的冗余提示信息。终端执行下列命令完成安装：</p>
<pre><code class="language-bash">pip install dash-console-filter-plugin -U
</code></pre>
<p>举一个常见的简单例子：</p>
<pre><code class="language-python">import dash
from dash import html
import feffery_antd_components as fac
from feffery_dash_utils.style_utils import style

app = dash.Dash(__name__)

app.layout = html.Div(
    fac.AntdSelect(
        placeholder="请选择", options=list("abcedf"), style=style(width=100)
    ),
    style=style(padding=50),
)

if __name__ == "__main__":
    app.run(debug=True)
</code></pre>
<p>默认情况下，由于<code>Dash</code>底层的<code>React</code>相关参数规范检查机制，上面的示例应用，在浏览器控制台中会显示下图所示的警告信息：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202508/1344061-20250805161726013-755982997.png"></center>
<p>而这类以<code>Warning:</code>开头的底层<code>React</code>相关提示信息，对我们的<code>Dash</code>应用本身并没有什么负面影响，因此可以为<code>Dash</code>应用启用<code>dash-console-filter-plugin</code>插件，来过滤一些碍眼的多余错误信息输出：</p>
<pre><code class="language-python">from dash_console_filter_plugin import setup_console_filter_plugin

# 通过keywords参数设置过滤关键字
setup_console_filter_plugin(keywords=["Warning: Each child"])
</code></pre>
<p>插件生效后，控制台里就变得清爽多了（建议仅用作屏蔽类似上面例子的无关错误信息）：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202508/1344061-20250805161727865-344865103.png"></center>
<p>更多资料具体见<code>dash-console-filter-plugin</code>文档说明：</p>
<ul>
<li><code>Github</code>仓库：<a href="https://github.com/CNFeffery/dash-console-filter-plugin" target="_blank" rel="noopener nofollow">https://github.com/CNFeffery/dash-console-filter-plugin</a></li>
<li><code>Gitee</code>镜像同步仓库：<a href="https://gitee.com/cnfeffery/dash-console-filter-plugin" target="_blank" rel="noopener nofollow">https://gitee.com/cnfeffery/dash-console-filter-plugin</a></li>
</ul>
<h3 id="dash-performance-monitor-plugin">dash-performance-monitor-plugin</h3>
<p>接下来要介绍的<code>Dash</code>插件<code>dash-performance-monitor-plugin</code>，适合在<code>Dash</code>应用的开发调试阶段使用，终端执行下列命令完成安装：</p>
<pre><code class="language-bash">pip install dash-performance-monitor-plugin -U
</code></pre>
<p>对于你的任何<code>Dash</code>应用，额外添加下列代码：</p>
<pre><code class="language-python"># 导入dash-performance-monitor-plugin插件
from dash_performance_monitor_plugin import setup_performance_monitor_plugin

# 启用插件功能
setup_performance_monitor_plugin()
</code></pre>
<p>便可以在应用中额外渲染应用性能监控功能，可实时查看当前应用的<em>FPS</em>、<em>内存占用</em>等性能指标变化情况，适合针对复杂功能应用的调优过程使用：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202508/1344061-20250805161729821-1865577259.gif"></center>
<p>更多使用说明具体见<code>dash-performance-monitor-plugin</code>文档说明：</p>
<ul>
<li><code>Github</code>仓库：<a href="https://github.com/CNFeffery/dash-performance-monitor-plugin" target="_blank" rel="noopener nofollow">https://github.com/CNFeffery/dash-performance-monitor-plugin</a></li>
<li><code>Gitee</code>镜像同步仓库：<a href="https://gitee.com/cnfeffery/dash-performance-monitor-plugin" target="_blank" rel="noopener nofollow">https://gitee.com/cnfeffery/dash-performance-monitor-plugin</a></li>
</ul>
<h3 id="dash-react-scan-plugin">dash-react-scan-plugin</h3>
<p>接下来要介绍的<code>Dash</code>插件<code>dash-react-scan-plugin</code>同样适用于应用开发阶段的性能调优场景，不同的是其监控的目标不是页面整体性能，而是对页面内全部组件的渲染绘制过程进行监控，适合细粒度的应用调优，以发现局部组件渲染性能问题，终端执行下列命令完成安装：</p>
<pre><code class="language-bash">pip install dash-react-scan-plugin -U
</code></pre>
<p>对于你的任何<code>Dash</code>应用，额外添加下列代码：</p>
<pre><code class="language-python"># 导入dash-react-scan-plugin插件
from dash_react_scan_plugin import setup_react_scan_plugin

# 启用插件功能
setup_react_scan_plugin()
</code></pre>
<p>便可以在应用中额外实现对各种组件渲染绘制性能的监控：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202508/1344061-20250805161735577-357167510.gif"></center>
<p>更多使用说明具体见<code>dash-react-scan-plugin</code>文档说明：</p>
<ul>
<li><code>Github</code>仓库：<a href="https://github.com/CNFeffery/dash-react-scan-plugin" target="_blank" rel="noopener nofollow">https://github.com/CNFeffery/dash-react-scan-plugin</a></li>
<li><code>Gitee</code>镜像同步仓库：<a href="https://gitee.com/cnfeffery/dash-react-scan-plugin" target="_blank" rel="noopener nofollow">https://gitee.com/cnfeffery/dash-react-scan-plugin</a></li>
</ul>
<h3 id="dash-disable-devtool-plugin">dash-disable-devtool-plugin</h3>
<p>当你不希望自己发布的<code>Dash</code>应用被访问者通过浏览器开发者工具进行调试和逆向时，就可以使用<code>dash-disable-devtool-plugin</code>插件，终端执行下列命令完成安装：</p>
<pre><code class="language-bash">pip install dash-disable-devtool-plugin -U
</code></pre>
<p>对于你的任何<code>Dash</code>应用，额外添加下列代码：</p>
<pre><code class="language-python"># 导入dash-disable-devtool-plugin插件
from dash_disable_devtool_plugin import setup_disable_devtool_plugin

# 启用插件功能
setup_disable_devtool_plugin()
</code></pre>
<p>便可以为应用快捷开启防调试保护：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202508/1344061-20250805161738727-1687362447.gif"></center>
<p>除此之外，<code>dash-disable-devtool-plugin</code>还支持为当前应用快捷开启<em>禁用选择</em>、<em>禁用复制</em>等常见安全防护功能，更多使用说明具体见<code>dash-disable-devtool-plugin</code>文档说明：</p>
<ul>
<li><code>Github</code>仓库：<a href="https://github.com/CNFeffery/dash-disable-devtool-plugin" target="_blank" rel="noopener nofollow">https://github.com/CNFeffery/dash-disable-devtool-plugin</a></li>
<li><code>Gitee</code>镜像同步仓库：<a href="https://gitee.com/cnfeffery/dash-disable-devtool-plugin" target="_blank" rel="noopener nofollow">https://gitee.com/cnfeffery/dash-disable-devtool-plugin</a></li>
</ul>
<h3 id="dash-offline-detect-plugin">dash-offline-detect-plugin</h3>
<p>当你希望自己的<code>Dash</code>应用可以在后端服务临时出现问题时，可以为正在访问应用的用户提供更清晰直观的通知，就可以使用<code>dash-offline-detect-plugin</code>插件，终端执行下列命令完成安装：</p>
<pre><code class="language-bash">pip install dash-offline-detect-plugin -U
</code></pre>
<p>对于你的任何<code>Dash</code>应用，额外添加下列代码：</p>
<pre><code class="language-python"># 导入dash-offline-detect-plugin插件
from dash_offline_detect_plugin import setup_offline_detect_plugin

# 启用插件功能
setup_offline_detect_plugin()
</code></pre>
<p>便可以为正在访问中的应用提供服务宕机通知提示功能：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202508/1344061-20250805161740997-1663740245.gif"></center>
<p><code>dash-offline-detect-plugin</code>支持自定义通知提示内容，更多使用说明具体见<code>dash-offline-detect-plugin</code>文档说明：</p>
<ul>
<li><code>Github</code>仓库：<a href="https://github.com/CNFeffery/dash-offline-detect-plugin" target="_blank" rel="noopener nofollow">https://github.com/CNFeffery/dash-offline-detect-plugin</a></li>
<li><code>Gitee</code>镜像同步仓库：<a href="https://gitee.com/cnfeffery/dash-offline-detect-plugin" target="_blank" rel="noopener nofollow">https://gitee.com/cnfeffery/dash-offline-detect-plugin</a></li>
</ul>
<hr>
<p>以上就是本文的全部内容，更多有关<code>Dash</code>应用实用插件功能的内容，我将会在之后的文章中持续为大家分享介绍~</p>
<hr>
<p>以上就是本文的全部内容，对<code>Dash</code>应用开发感兴趣的朋友，欢迎添加微信号<code>CNFeffery</code>，备注“dash学习”加入我们的技术交流群，一起成长一起进步。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-05 16:20">2025-08-05 16:20</span>&nbsp;
<a href="https://www.cnblogs.com/feffery">费弗里</a>&nbsp;
阅读(<span id="post_view_count">5</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19023501);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19023501', targetLink: 'https://www.cnblogs.com/feffery/p/19023501', title: 'Python全栈应用开发利器Dash 3.x新版本介绍（5）' })">举报</a>
</div>
        