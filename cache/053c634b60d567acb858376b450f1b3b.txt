
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/DarylJi/p/18701834" title="发布于 2025-02-06 22:59">
    <span role="heading" aria-level="2">Nacos 从入门到精通-手把手教会你</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="nacos-使用教程">Nacos 使用教程</h1>
<p>Nacos 是阿里巴巴开源的动态服务发现、配置管理和服务管理平台，旨在帮助您更容易地构建、交付和管理微服务平台。它集成了服务注册与发现、动态配置管理、动态 DNS 服务和服务及元数据管理等功能。</p>
<h2 id="1-nacos-简介">1. Nacos 简介</h2>
<p>Nacos（Dynamic Naming and Configuration Service）是一个更易于构建原生应用的动态服务发现、配置管理和服务管理平台。它提供了以下主要功能：</p>
<ul>
<li><strong>服务发现与服务健康检查</strong>：使服务更容易注册，并通过 DNS 或 HTTP 接口发现其他服务，提供实时健康检查，防止向不健康的主机或服务实例发送请求。</li>
<li><strong>动态配置管理</strong>：允许您在所有环境中以集中和动态的方式管理所有服务的配置，消除在更新配置时重新部署应用程序的需求，使配置更改更加高效和灵活。</li>
<li><strong>动态 DNS 服务</strong>：提供基于 DNS 协议的服务发现能力，支持异构语言的服务发现，方便三方应用查阅和发现。</li>
<li><strong>服务和元数据管理</strong>：从微服务平台建设的视角管理数据中心的所有服务及元数据，包括服务描述、生命周期、静态依赖分析、健康状态、流量管理、路由和安全策略。</li>
</ul>
<h2 id="2-nacos-部署">2. Nacos 部署</h2>
<h3 id="21-下载并启动-nacos">2.1 下载并启动 Nacos</h3>
<ol>
<li>
<p><strong>下载 Nacos</strong>：从 Nacos 的 GitHub Releases 页面下载最新版本的 Nacos。</p>
</li>
<li>
<p><strong>解压安装包</strong>：将下载的压缩包解压到指定目录。</p>
</li>
<li>
<p><strong>启动 Nacos</strong>：进入解压后的 <code>bin</code> 目录，执行以下命令启动 Nacos：</p>
<ul>
<li>
<p><strong>Windows 系统</strong>：</p>
<pre><code class="language-bash">startup.cmd -m standalone
</code></pre>
</li>
<li>
<p><strong>Linux/Mac 系统</strong>：</p>
<pre><code class="language-bash">sh startup.sh -m standalone
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong>访问 Nacos 控制台</strong>：启动成功后，打开浏览器，访问 <code>http://localhost:8848/nacos</code>，默认用户名和密码均为 <code>nacos</code>。</p>
</li>
</ol>
<h3 id="22-配置-nacos">2.2 配置 Nacos</h3>
<ol>
<li>
<p><strong>修改端口号</strong>：如果默认端口 <code>8848</code> 被占用，可以修改 <code>conf/application.properties</code> 文件中的 <code>server.port</code> 配置项。</p>
</li>
<li>
<p><strong>配置数据库</strong>：默认情况下，Nacos 使用嵌入式数据库 Derby。</p>
<ul>
<li><strong>切换到 MySQL</strong>：
<ul>
<li>在 MySQL 中创建数据库 <code>nacos_config</code>。</li>
<li>执行 <code>conf/nacos-mysql.sql</code> 脚本，初始化数据库结构。</li>
<li>修改 <code>conf/application.properties</code> 文件，配置数据库连接信息：<pre><code class="language-properties">spring.datasource.platform=mysql
db.num=1
db.url.0=jdbc:mysql://localhost:3306/nacos_config?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false
db.user=root
db.password=
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>启用鉴权功能</strong>：</p>
<ul>
<li>
<p>修改 <code>conf/application.properties</code> 文件，设置以下配置：</p>
<pre><code class="language-properties">nacos.core.auth.enabled=true
nacos.core.auth.server.identity.key=your_identity_key
nacos.core.auth.server.identity.value=your_identity_value
nacos.core.auth.plugin.nacos.token.secret.key=your_secret_key
</code></pre>
</li>
<li>
<p>重启 Nacos 服务以使配置生效。</p>
</li>
</ul>
</li>
</ol>
<h2 id="3-nacos-作为服务注册中心">3. Nacos 作为服务注册中心</h2>
<h3 id="31-引入依赖">3.1 引入依赖</h3>
<p>在 Spring Boot 项目的 <code>pom.xml</code> 中添加 Nacos 服务发现的依赖：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<h3 id="32-配置-nacos">3.2 配置 Nacos</h3>
<p>在 <code>application.properties</code> 或 <code>application.yml</code> 中添加以下配置：</p>
<pre><code class="language-properties">spring.application.name=your-service-name
spring.cloud.nacos.discovery.server-addr=localhost:8848
</code></pre>
<h3 id="33-启用服务发现">3.3 启用服务发现</h3>
<p>在主启动类上添加 <code>@EnableDiscoveryClient</code> 注解：</p>
<pre><code class="language-java">@SpringBootApplication
@EnableDiscoveryClient
public class YourApplication {
    public static void main(String[] args) {
        SpringApplication.run(YourApplication.class, args);
    }
}
</code></pre>
<h3 id="34-服务提供者">3.4 服务提供者</h3>
<p>创建一个 REST 控制器，提供服务接口：</p>
<pre><code class="language-java">@RestController
@RequestMapping("/service")
public class YourServiceController {
    @GetMapping("/hello")
    public String sayHello() {
        return "Hello from Nacos Service!";
    }
}
</code></pre>
<h3 id="35-服务消费者">3.5 服务消费者</h3>
<p>在服务消费者项目中，添加 Nacos 服务发现的依赖，并配置 Nacos 地址：</p>
<pre><code class="language-properties">spring.application.name=your-consumer-service
spring.cloud.nacos.discovery.server-addr=localhost:8848
</code></pre>
<p>使用 <code>@LoadBalanced</code> 注解的 <code>RestTemplate</code> 进行服务调用：</p>
<pre><code class="language-java">@Configuration
public class AppConfig {
    @Bean
    @LoadBalanced
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}
</code></pre>
<p>在控制器中调用服务：</p>
<pre><code class="language-java">@RestController
@RequestMapping("/consumer")
public class YourConsumerController {
    @Autowired
    private RestTemplate restTemplate;

    @GetMapping("/hello")
    public String sayHello() {
        return restTemplate.getForObject("http://your-service-name/service/hello", String.class);
    }
}
</code></pre>
<h2 id="4-nacos-作为配置中心">4. Nacos 作为配置中心</h2>
<h3 id="41-引入依赖">4.1 引入依赖</h3>
<p>在 <code>pom.xml</code> 中添加 Nacos 配置的依赖：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<h3 id="42-配置-nacos">4.2 配置 Nacos</h3>
<p>在 <code>bootstrap.properties</code> 或 <code>bootstrap.yml</code> 中添加以下配置：</p>
<pre><code class="language-properties">spring.application.name=your-application-name
spring.cloud.nacos.config.server-addr=localhost:8848
spring.cloud.nacos.config.file-extension=properties
</code></pre>
<h3 id="43-创建配置文件">4.3 创建配置文件</h3>
<p>在 Nacos 控制台中，创建一个配置文件：</p>
<ul>
<li><strong>Data ID</strong>：<code>your-application-name.properties</code></li>
<li><strong>Group</strong>：<code>DEFAULT_GROUP</code></li>
<li><strong>Content</strong>：<pre><code class="language-properties">your.config 
</code></pre>
</li>
</ul>
<p><strong>4.4 配置动态刷新</strong></p>
<p>实现配置的动态刷新，需要在需要动态刷新的类上添加 <code>@RefreshScope</code> 注解。 Nacos 中的配置发生变化时，标注了该注解的类会自动刷新其配置。</p>
<pre><code class="language-java">import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.cloud.context.config.annotation.RefreshScope;

@RestController
@RequestMapping("/config")
@RefreshScope
public class ConfigController {

    @Value("${your.config.key}")
    private String configValue;

    @GetMapping("/value")
    public String getConfigValue() {
        return configValue;
    }
}
</code></pre>
<p>上述示例中，<code>ConfigController</code> 类上的 <code>@RefreshScope</code> 注解确保了当 Nacos 中的配置发生变化时，<code>configValue</code> 会自动更新。<br>
<strong>4.5 配置共享与环境隔离</strong></p>
<p>acos 支持通过命名空间（Namespace）和分组（Group）来实现配置的共享和环境隔离。名空间用于区分不同的环境，如开发、测试和生产环境；分组用于将配置划分到不同的业务模块。</p>
<ul>
<li><strong>命名空间（Namespace）</strong>：于环境隔离，例如开发环境、测试环境和生产环境。</li>
<li><strong>分组（Group）</strong>：于业务隔离，将不同业务模块的配置划分到不同的组。<br>
Nacos 控制台中，您可以创建不同的命名空间和分组，并在配置管理中指定相应的命名空间和分组，以实现配置的共享和环境隔离。<br>
<strong>4.6 配置加密与解密</strong></li>
</ul>
<p>acos 支持对敏感配置项进行加密存储和解密读取。可以在 Nacos 控制台中对配置项进行加密，客户端在读取时会自动解密。<br>
启用配置加密功能，需要在 Nacos 的配置文件中设置加密密钥。体配置方法请参考 Nacos 官方文档。<br>
<strong>5. Nacos 集群部署</strong></p>
<p>生产环境中，建议将 Nacos 部署为集群，以提高系统的高可用性和扩展性。acos 支持多种集群部署方式，包括：</p>
<ul>
<li><strong>单机模式</strong>：用于开发和测试环境。</li>
<li><strong>集群模式</strong>：用于生产环境，提供高可用性和负载均衡。<br>
集群模式下，您需要配置多个 Nacos 实例，并通过负载均衡器进行流量分发。体的集群部署步骤和配置方法，请参考 Nacos 官方文档。<br>
<strong>6. Nacos 与 Spring Cloud 集成</strong></li>
</ul>
<p>acos 可以与 Spring Cloud 进行深度集成，作为服务注册与发现和配置中心。过引入相应的依赖和配置，您可以在 Spring Cloud 项目中使用 Nacos 的服务发现和配置管理功能。<br>
体的集成步骤和配置方法，请参考 Nacos 官方文档。<br>
<strong>7. Nacos 与 Spring Boot 集成</strong></p>
<p>acos 也可以与 Spring Boot 进行集成，作为服务注册与发现和配置中心。过引入相应的依赖和配置，您可以在 Spring Boot 项目中使用 Nacos 的服务发现和配置管理功能。<br>
体的集成步骤和配置方法，请参考 Nacos 官方文档。<br>
<strong>8. Nacos 与 Dubbo 集成</strong></p>
<p>acos 可以与 Dubbo 进行集成，作为服务注册与发现中心。过引入相应的依赖和配置，您可以在 Dubbo 项目中使用 Nacos 的服务发现功能。<br>
体的集成步骤和配置方法，请参考 Nacos 官方文档。<br>
<strong>9. Nacos 与 Kubernetes 集成</strong></p>
<p>acos 可以与 Kubernetes 进行集成，作为服务注册与发现中心。过配置 Nacos 与 Kubernetes 的集成，您可以在 Kubernetes 环境中使用 Nacos 的服务发现功能。<br>
体的集成步骤和配置方法，请参考 Nacos 官方文档。<br>
<strong>10. Nacos 的监控与告警</strong></p>
<p>acos 提供了丰富的监控和告警功能，您可以通过 Nacos 控制台查看服务的健康状态、配置的变更历史等信息。时，Nacos 也支持与 Prometheus 等监控系统集成，实现对 Nacos 服务的监控。<br>
体的监控和告警配置方法，请参考 Nacos 官方文档。<br>
<strong>11. Nacos 的安全性</strong></p>
<p>acos 提供了多种安全机制，包括鉴权、加密等，确保您的服务和配置的安全性。可以在 Nacos 控制台中配置鉴权策略，控制对服务和配置的访问权限。<br>
体的安全配置方法，请参考 Nacos 官方文档。<br>
<strong>12. Nacos 的扩展性</strong></p>
<p>acos 提供了丰富的扩展点，您可以根据业务需求进行二次开发和扩展。例如，您可以通过 Nacos 的插件机制，开发自定义的服务发现和配置管理功能。<br>
体的扩展方法，请参考 Nacos 官方文档。<br>
<strong>13. Nacos 的社区与支持</strong></p>
<p>acos 拥有活跃的社区，您可以在社区中获取最新的技术动态、参与讨论和贡献代码。时，Nacos 也提供了丰富的文档和教程，帮助您更好地使用 Nacos。<br>
多信息，请访问 Nacos 官方网站。<br>
<strong>14. 总结</strong></p>
<p>Nacos 是一个功能强大的服务发现和配置管理平台，集成了服务注册与发现、动态配置管理、动态 DNS 服务和服务及元数据管理等功能。通过本教程，您可以了解如何部署 Nacos、使用其作为服务注册中心和配置中心，以及与 Spring Cloud 的集成。希望本教程能帮助您更好地理解和使用 Nacos，提升微服务架构的效率和可靠性。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.05255525254398148" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-06 23:00">2025-02-06 22:59</span>&nbsp;
<a href="https://www.cnblogs.com/DarylJi">等风来う</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18701834" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18701834);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18701834', targetLink: 'https://www.cnblogs.com/DarylJi/p/18701834', title: 'Nacos 从入门到精通-手把手教会你' })">举报</a>
</div>
        