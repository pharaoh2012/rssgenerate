
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/huangSir-devops/p/18836093" title="发布于 2025-04-20 14:46">
    <span role="heading" aria-level="2">docker镜像仓库</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="docker镜像仓库的概念">Docker镜像仓库的概念</h2>
<p>在Docker生态系统中，Docker镜像仓库（或称为Docker Registry）是一个存储和分发Docker镜像的服务。它类似于其他编程语言中的包管理系统，允许开发者上传、下载和管理Docker镜像。Docker官方提供了一个公共的镜像仓库服务，称为<code>Docker Hub</code>，但你也可以在自己的服务器上运行私有镜像仓库。</p>
<h3 id="docker仓库的特点">Docker仓库的特点</h3>
<ul>
<li>
<p>存储镜像：Docker镜像仓库用来存储Docker镜像。这些镜像可以是官方提供的，也可以是用户自己创建的。</p>
</li>
<li>
<p>版本控制：每个镜像可以有多个版本（tags），这使得用户可以轻松地回溯到之前的版本或者使用特定的版本。</p>
</li>
<li>
<p>分发：通过镜像仓库，用户可以轻松地共享和分发他们的Docker镜像给其他用户或团队。</p>
</li>
<li>
<p>认证和安全：许多镜像仓库支持基于角色的访问控制（RBAC），允许管理员控制谁可以访问哪些镜像。</p>
</li>
</ul>
<h3 id="docker镜像仓库分类">Docker镜像仓库分类</h3>
<p>Docker镜像仓库主要分为公共镜像仓库和私有镜像仓库。</p>
<h4 id="公共镜像仓库">公共镜像仓库</h4>
<p>公共镜像仓库为Docker官方提供，称为<code>Docker Hub</code>，地址：<a href="https://hub.docker.com" target="_blank" rel="noopener nofollow">https://hub.docker.com</a><br>
当然，现在目前各厂商也相继推出了公共的镜像仓库。<br>
目前<code>Docker hub</code>在国内访问不了，需要配置一些代理才能够访问，可以参考下列：</p>
<pre><code>sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json &lt;&lt;EOF
{
  "registry-mirrors": [
    "https://docker.1ms.run",
    "https://docker.mybacc.com",
    "https://dytt.online",
    "https://lispy.org",
    "https://docker.xiaogenban1993.com",
    "https://docker.yomansunter.com",
    "https://aicarbon.xyz",
    "https://666860.xyz",
    "https://docker.zhai.cm",
    "https://a.ussh.net",
    "https://hub.littlediary.cn",
    "https://hub.rat.dev",
    "https://docker.m.daocloud.io"
  ]
}
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker
</code></pre>
<h4 id="私有镜像仓库">私有镜像仓库</h4>
<p>对于需要更高安全性和控制的企业或组织，可以在自己的服务器上设置私有镜像仓库。这可以通过以下几种方式实现：</p>
<ul>
<li>
<p>Docker Registry：Docker官方提供了一个轻量级的、开源的镜像仓库服务，称为Docker Registry。它可以很容易地部署在自己的服务器上，并提供基本的镜像存储和分发功能。</p>
</li>
<li>
<p>harbor镜像仓库：Harbor 是一个开源的镜像仓库服务，用于容器镜像、Helm Chart 等符合 OCI 标准的 Artifact 的安全托管及高效分发，能够帮助您跨云原生计算平台（如 Kubernetes 和 Docker）一致且安全地管理 Artifact。</p>
</li>
<li>
<p>使用云服务：许多云服务提供商（如AWS、Azure、Google Cloud）提供托管Docker镜像仓库的服务，如Amazon Elastic Container Registry (ECR)、Azure Container Registry (ACR)、Google Container Registry (GCR)等。</p>
</li>
</ul>
<h2 id="私有镜像仓库之docker-registry搭建">私有镜像仓库之Docker Registry搭建</h2>
<h3 id="下载镜像">下载镜像</h3>
<pre><code>[root@lb ~]# docker pull registry
Using default tag: latest
latest: Pulling from library/registry
f18232174bc9: Pull complete
e5a9c19e7b9d: Pull complete
e8a894506e86: Pull complete
e1822bac1992: Pull complete
b5da7f963a9e: Pull complete
Digest: sha256:1fc7de654f2ac1247f0b67e8a459e273b0993be7d2beda1f3f56fbf1001ed3e7
Status: Downloaded newer image for registry:latest
docker.io/library/registry:latest
[root@lb ~]# docker images | grep registry
registry               latest    3dec7d02aaea   2 weeks ago     57.7MB
</code></pre>
<h3 id="运行容器">运行容器</h3>
<pre><code># 查看需要挂载的存储卷
[root@lb ~]# docker inspect registry | jq .[].Config.Volumes
{
  "/var/lib/registry": {}
}
# 查看需要映射的端口
[root@lb ~]# docker inspect registry | jq .[].Config.ExposedPorts
{
  "5000/tcp": {}
}

# 运行容器
[root@lb ~]# docker run -d --name registry -p 5000:5000 --restart always -v /data/docker/registry:/var/lib/registry registry
2e0087e93d0d5070d4d232fdf081bf6be9b6a71f2f72d83ccf01e1a2fb9acfa3
[root@lb ~]# docker ps -a | grep registry
2e0087e93d0d   registry       "/entrypoint.sh /etc…"   8 seconds ago   Up 8 seconds            0.0.0.0:5000-&gt;5000/tcp, [::]:5000-&gt;5000/tcp              registry
</code></pre>
<h3 id="测试访问">测试访问</h3>
<p><a href="http://10.0.0.10:5000/v2/_catalog" target="_blank" rel="noopener nofollow">http://10.0.0.10:5000/v2/_catalog</a><br>
<img src="https://img2024.cnblogs.com/blog/3468887/202504/3468887-20250420125700229-567207934.png" alt="image" loading="lazy"></p>
<h3 id="配置docker准许http访问">配置docker准许http访问</h3>
<p>docker默认是使用https进行通信的，我们这里配置一下docker使用http访问仓库</p>
<p>示例：如果不配置http访问，推送镜像时会报错</p>
<pre><code># 给镜像打一个tag
[root@lb ~]# docker tag mysql:5.7 10.0.0.10:5000/huangsir/mysql:5.7

# 推送镜像
[root@lb ~]# docker push 10.0.0.10:5000/huangsir/mysql:5.7
The push refers to repository [10.0.0.10:5000/huangsir/mysql]
Get "https://10.0.0.10:5000/v2/": http: server gave HTTP response to HTTPS client

</code></pre>
<h4 id="给docker配置http">给docker配置http</h4>
<p>需要在<code>/etc/docker/daemon.json</code>文件中添加<code>{   "insecure-registries": ["10.0.0.10:5000"] }</code>这行配置，让 Docker 认为该地址是安全的，当然这里的IP也可以换成域名</p>
<pre><code>[root@lb ~]# cat /etc/docker/daemon.json
{
  "registry-mirrors": [
    ...
  ],
  "insecure-registries": [
    "10.0.0.10:5000"
  ]
}
[root@lb ~]# systemctl daemon-reload
[root@lb ~]# systemctl restart docker

</code></pre>
<p>再次推送镜像查看：</p>
<pre><code>[root@lb ~]# docker push 10.0.0.10:5000/huangsir/mysql:5.7
The push refers to repository [10.0.0.10:5000/huangsir/mysql]
441e16cac4fe: Pushed
73cb62467b8f: Pushed
337ec6bae222: Pushed
532b66f4569d: Pushed
0d9e9a9ce9e4: Pushed
4555572a6bb2: Pushed
8527ccd6bd85: Pushed
d76a5f910f6b: Pushed
8b2952eb02aa: Pushed
7ff7abf4911b: Pushed
cff044e18624: Pushed
5.7: digest: sha256:4b6c4935195233bc10b617df3cc725a9ddd5a7f10351a7bf573bea0b5ded7649 size: 2618

[root@lb ~]# curl http://10.0.0.10:5000/v2/_catalog
{"repositories":["huangsir/mysql"]}

</code></pre>
<h3 id="如何查看仓库中有哪些镜像的版本">如何查看仓库中有哪些镜像的版本</h3>
<p><code>curl http://&lt;your-server-ip&gt;:5000/v2/&lt;your-image-name&gt;/tags/list</code></p>
<pre><code>[root@lb ~]# curl http://10.0.0.10:5000/v2/huangsir/mysql/tags/list
{"name":"huangsir/mysql","tags":["5.7"]}
</code></pre>
<h3 id="registry配置用户名密码进行访问">registry配置用户名密码进行访问</h3>
<p>创建一个目录用于存放认证信息，并使用htpasswd命令创建用户名和密码。例如：</p>
<pre><code>[root@lb ~]# mkdir -p /data/docker/auth
[root@lb ~]# htpasswd -Bbn admin 123456 &gt; /data/docker/auth/htpasswd
[root@lb ~]# cat /data/docker/auth/htpasswd
admin:$2y$05$mAp6m7bU5RlQvG808YmRDu6.vgg3q4cMOcCCDZYWkquBqaJrGQtLO

</code></pre>
<p>这会创建一个名为admin的用户，密码为123456。</p>
<h4 id="创建容器">创建容器</h4>
<pre><code>[root@lb ~]# docker run -d --name registry -p 5000:5000 --restart always \
-v /data/docker/registry:/var/lib/registry \
-v /data/docker/auth:/auth \
-e "REGISTRY_AUTH=htpasswd" \
-e "REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm" \
-e "REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd" \
registry
b355fdcdb98093ca05d66dd0ddd9246af2e8e81653d8975ed6bcbb7a3fd9b234


[root@lb ~]# docker ps -a
CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS                        PORTS                                                    NAMES
b355fdcdb980   registry       "/entrypoint.sh /etc…"   4 seconds ago   Up 4 seconds                  0.0.0.0:5000-&gt;5000/tcp, [::]:5000-&gt;5000/tcp              registry

</code></pre>
<h4 id="测试拉取镜像">测试拉取镜像</h4>
<pre><code># 拉取镜像时提示需要进行验证
[root@lb ~]# docker pull 10.0.0.10:5000/huangsir/mysql:5.7
Error response from daemon: Head "http://10.0.0.10:5000/v2/huangsir/mysql/manifests/5.7": no basic auth credentials
</code></pre>
<h4 id="登录docker镜像">登录docker镜像</h4>
<pre><code>docker login -u admin -p 123456 10.0.0.10:5000
</code></pre>
<p>最后返回登录成功的信息即可</p>
<h2 id="私有镜像仓库之harbor搭建使用">私有镜像仓库之harbor搭建使用</h2>
<p>docker搭建harbor仓库需要Docker compose！！！，需要安装教程的同学可以参考这篇文章：<a href="https://www.cnblogs.com/huangSir-devops/p/18835671" title="一文搞懂Docker Compose" target="_blank">一文搞懂Docker Compose</a></p>
<p>harbor仓库地址：<a href="https://github.com/goharbor/harbor" target="_blank" rel="noopener nofollow">https://github.com/goharbor/harbor</a></p>
<h3 id="部署harbor">部署harbor</h3>
<pre><code># 下载harbor
[root@lb ~]# wget https://github.com/goharbor/harbor/releases/download/v2.13.0/harbor-offline-installer-v2.13.0.tgz
[root@lb ~]# ll harbor-offline-installer-v2.13.0.tgz
-rw-r--r-- 1 root root 657690441 Apr 20 13:47 harbor-offline-installer-v2.13.0.tgz

# 解压
[root@lb ~]# tar -xvf harbor-offline-installer-v2.13.0.tgz
harbor/harbor.v2.13.0.tar.gz
harbor/prepare
harbor/LICENSE
harbor/install.sh
harbor/common.sh
harbor/harbor.yml.tmpl

</code></pre>
<h4 id="修改harbor的配置文件">修改harbor的配置文件</h4>
<pre><code>[root@lb ~/harbor]# cd harbor
[root@lb ~/harbor]# mv harbor.yml.tmpl harbor.yml

# 只需修改下面的即可
[root@lb ~/harbor]# vim harbor.yml
# 访问域名。这里先随便填写一个域名即可
hostname: reg.huangsir.com

##### 将https相关的内容注释掉
#https:
  # https port for harbor, default is 443
  #port: 443
  # The path of cert and key files for nginx
  #certificate: /your/certificate/path
  #private_key: /your/private/key/path
  # enable strong ssl ciphers (default: false)
  # strong_ssl_ciphers: false

## 修改用户密码
harbor_admin_password: 123456

## 修改挂载的存储卷
data_volume: /data/harbor/regsitry
</code></pre>
<h4 id="安装harbor">安装harbor</h4>
<p>harbor仓库默认使用80端口，需要确保宿主机的80端口没有被占用，或者修改<code>docker-compose.yaml</code>文件，将80端口进行修改</p>
<pre><code># 先创建存储卷
[root@lb ~/harbor]# mkdir -p /data/harbor/regsitry
# 执行安装前置校验脚本，最后输出Successfully即可
[root@lb ~/harbor]# ./prepare
......#省略万字内容
Successfully called func: create_root_cert
Generated configuration file: /compose_location/docker-compose.yml
Clean up the input dir

# 执行安装，最后输出successfully即可
[root@lb ~/harbor]# ./install.sh
.....#省略万字内容
[+] Running 10/10
 ✔ Network harbor_harbor        Created                                                                                                                                                                   0.0s
 ✔ Container harbor-log         Started                                                                                                                                                                   0.3s
 ✔ Container harbor-portal      Started                                                                                                                                                                   1.4s
 ✔ Container registryctl        Started                                                                                                                                                                   1.2s
 ✔ Container registry           Started                                                                                                                                                                   1.4s
 ✔ Container harbor-db          Started                                                                                                                                                                   1.3s
 ✔ Container redis              Started                                                                                                                                                                   1.2s
 ✔ Container harbor-core        Started                                                                                                                                                                   1.7s
 ✔ Container harbor-jobservice  Started                                                                                                                                                                   2.5s
 ✔ Container nginx              Started                                                                                                                                                                   2.6s
✔ ----Harbor has been installed and started successfully.----


# 查看镜像运行状况
[root@lb ~/harbor]# docker-compose ps
NAME                IMAGE                                 COMMAND                  SERVICE       CREATED          STATUS                    PORTS
harbor-core         goharbor/harbor-core:v2.13.0          "/harbor/entrypoint.…"   core          55 seconds ago   Up 53 seconds (healthy)
harbor-db           goharbor/harbor-db:v2.13.0            "/docker-entrypoint.…"   postgresql    55 seconds ago   Up 54 seconds (healthy)
harbor-jobservice   goharbor/harbor-jobservice:v2.13.0    "/harbor/entrypoint.…"   jobservice    55 seconds ago   Up 46 seconds (healthy)
harbor-log          goharbor/harbor-log:v2.13.0           "/bin/sh -c /usr/loc…"   log           55 seconds ago   Up 54 seconds (healthy)   127.0.0.1:1514-&gt;10514/tcp
harbor-portal       goharbor/harbor-portal:v2.13.0        "nginx -g 'daemon of…"   portal        55 seconds ago   Up 54 seconds (healthy)
nginx               goharbor/nginx-photon:v2.13.0         "nginx -g 'daemon of…"   proxy         55 seconds ago   Up 53 seconds (healthy)   0.0.0.0:80-&gt;8080/tcp, [::]:80-&gt;8080/tcp
redis               goharbor/redis-photon:v2.13.0         "redis-server /etc/r…"   redis         55 seconds ago   Up 54 seconds (healthy)
registry            goharbor/registry-photon:v2.13.0      "/home/harbor/entryp…"   registry      55 seconds ago   Up 54 seconds (healthy)
registryctl         goharbor/harbor-registryctl:v2.13.0   "/home/harbor/start.…"   registryctl   55 seconds ago   Up 54 seconds (healthy)
</code></pre>
<h3 id="浏览器访问harbor">浏览器访问harbor</h3>
<p><a href="http://10.0.0.10:80/" target="_blank" rel="noopener nofollow">http://10.0.0.10:80/</a><br>
或者使用你配置好的域名访问也可以<br>
<img src="https://img2024.cnblogs.com/blog/3468887/202504/3468887-20250420140637834-909257433.png" alt="image" loading="lazy"></p>
<h4 id="登录harbor">登录harbor：</h4>
<p>用户名：admin<br>
密码：前面我们配置的，123456<br>
<img src="https://img2024.cnblogs.com/blog/3468887/202504/3468887-20250420140730735-933037065.png" alt="image" loading="lazy"></p>
<h3 id="使用harbor仓库">使用harbor仓库</h3>
<h4 id="docker配置准许harbor仓库进行http访问">docker配置准许harbor仓库进行http访问</h4>
<p>需要在<code>/etc/docker/daemon.json</code>文件中添加<code>{   "insecure-registries": ["reg.huangsir.com"] }</code>这行配置，让 Docker 认为该地址是安全的，当然这里的IP也可以换成域名</p>
<pre><code>[root@lb ~]# cat /etc/docker/daemon.json
{
  "registry-mirrors": [
    ...
  ],
  "insecure-registries": [
    "10.0.0.10:5000",
    "reg.huangsir.com"
  ]
}
[root@lb ~]# systemctl daemon-reload
[root@lb ~]# systemctl restart docker

</code></pre>
<h4 id="登录harbor仓库">登录harbor仓库</h4>
<pre><code># 本地做一些hosts解析
[root@lb ~/harbor]# echo '10.0.0.10 reg.huangsir.com' &gt;&gt; /etc/hosts
# 登录
[root@lb ~/harbor]# docker login -u admin -p 123456 reg.huangsir.com
WARNING! Using --password via the CLI is insecure. Use --password-stdin.

WARNING! Your credentials are stored unencrypted in '/root/.docker/config.json'.
Configure a credential helper to remove this warning. See
https://docs.docker.com/go/credential-store/

Login Succeeded

</code></pre>
<h4 id="推送镜像至harbor仓库">推送镜像至harbor仓库</h4>
<p>在harbor仓库新建一个项目<br>
<img src="https://img2024.cnblogs.com/blog/3468887/202504/3468887-20250420141745564-1070987367.png" alt="image" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/3468887/202504/3468887-20250420141811503-61231796.png" alt="image" loading="lazy"></p>
<p>推送镜像</p>
<pre><code># 打标签
[root@lb ~/harbor]# docker tag mysql:5.7 reg.huangsir.com/private/mysql:5.7

# 推送镜像
[root@lb ~/harbor]# docker push reg.huangsir.com/private/mysql:5.7
The push refers to repository [reg.huangsir.com/private/mysql]
441e16cac4fe: Mounted from library/mysql
73cb62467b8f: Mounted from library/mysql
337ec6bae222: Pushed
532b66f4569d: Mounted from library/mysql
0d9e9a9ce9e4: Pushed
4555572a6bb2: Pushed
8527ccd6bd85: Pushed
d76a5f910f6b: Pushed
8b2952eb02aa: Pushed
7ff7abf4911b: Pushed
cff044e18624: Pushed
5.7: digest: sha256:4b6c4935195233bc10b617df3cc725a9ddd5a7f10351a7bf573bea0b5ded7649 size: 2618
</code></pre>
<p>通过浏览器查看，发现我们的镜像已经推送成功了<br>
<img src="https://img2024.cnblogs.com/blog/3468887/202504/3468887-20250420142456967-1547316909.png" alt="image" loading="lazy"></p>
<h3 id="harbor仓库配置https访问">harbor仓库配置https访问</h3>
<p>修改harbor.yml文件，将https部分放开即可</p>
<pre><code>[root@lb ~/harbor]# vim harbor.yml
https:
  # https的端口
  port: 443
  # 公钥
  certificate: /your/certificate/path
  # 私钥
  private_key: /your/private/key/path

# 修改完成之后重启即可
[root@lb ~/harbor]# docker-compose restart
</code></pre>
<h2 id="私有镜像仓库之阿里云镜像仓库acr使用">私有镜像仓库之阿里云镜像仓库（ACR）使用</h2>
<p>阿里云镜像仓库地址：<a href="https://cr.console.aliyun.com/cn-hangzhou/instance/dashboard" target="_blank" rel="noopener nofollow">https://cr.console.aliyun.com/cn-hangzhou/instance/dashboard</a><br>
阿里云镜像仓库个人版可以面试试用，但是有限制，只有三个命名空间，三百个仓库<br>
<img src="https://img2024.cnblogs.com/blog/3468887/202504/3468887-20250420143131752-532261395.png" alt="image" loading="lazy"></p>
<h3 id="登录到阿里云镜像仓库">登录到阿里云镜像仓库</h3>
<p>点击访问凭证即可，我们可以设置固定密码，后续登录就使用改密码进行登录<br>
<img src="https://img2024.cnblogs.com/blog/3468887/202504/3468887-20250420143530209-1440306269.png" alt="image" loading="lazy"></p>
<pre><code>[root@lb ~/harbor]# docker login --username=灬halo丨少年 crpi-jzkigw8wlyp1a5sg.cn-hangzhou.personal.cr.aliyuncs.com

i Info → A Personal Access Token (PAT) can be used instead.
         To create a PAT, visit https://app.docker.com/settings


Password:

WARNING! Your credentials are stored unencrypted in '/root/.docker/config.json'.
Configure a credential helper to remove this warning. See
https://docs.docker.com/go/credential-store/

Login Succeeded

</code></pre>
<h3 id="新建命名空间和镜像仓库">新建命名空间和镜像仓库</h3>
<h4 id="新建命名空间">新建命名空间</h4>
<p><img src="https://img2024.cnblogs.com/blog/3468887/202504/3468887-20250420143334296-2051413263.png" alt="image" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/3468887/202504/3468887-20250420143344961-317970434.png" alt="image" loading="lazy"></p>
<h4 id="新建镜像仓库">新建镜像仓库</h4>
<p><img src="https://img2024.cnblogs.com/blog/3468887/202504/3468887-20250420144235728-516770295.png" alt="image" loading="lazy"><br>
选择本地仓库<br>
<img src="https://img2024.cnblogs.com/blog/3468887/202504/3468887-20250420143925813-624980933.png" alt="image" loading="lazy"><br>
duang，我们的镜像仓库就建好了<br>
<img src="https://img2024.cnblogs.com/blog/3468887/202504/3468887-20250420144244804-1011600125.png" alt="image" loading="lazy"></p>
<h3 id="测试上传镜像">测试上传镜像</h3>
<pre><code>[root@lb ~/harbor]# docker tag mysql:5.7 crpi-jzkigw8wlyp1a5sg.cn-hangzhou.personal.cr.aliyuncs.com/huangxin/mysql:5.7
[root@lb ~/harbor]# docker push crpi-jzkigw8wlyp1a5sg.cn-hangzhou.personal.cr.aliyuncs.com/huangxin/mysql:5.7
The push refers to repository [crpi-jzkigw8wlyp1a5sg.cn-hangzhou.personal.cr.aliyuncs.com/huangxin/mysql]
441e16cac4fe: Pushed
73cb62467b8f: Pushed
337ec6bae222: Pushed
532b66f4569d: Pushed
0d9e9a9ce9e4: Pushed
4555572a6bb2: Pushed
8527ccd6bd85: Pushed
d76a5f910f6b: Pushed
8b2952eb02aa: Pushed
7ff7abf4911b: Pushed
cff044e18624: Pushed
5.7: digest: sha256:4b6c4935195233bc10b617df3cc725a9ddd5a7f10351a7bf573bea0b5ded7649 size: 2618
</code></pre>
<p>查看阿里云镜像仓库<br>
<img src="https://img2024.cnblogs.com/blog/3468887/202504/3468887-20250420144548285-2081564096.png" alt="image" loading="lazy"></p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/huangSir-devops/" target="_blank">huangSir-devops</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/huangSir-devops/p/18836093" target="_blank">https://www.cnblogs.com/huangSir-devops/p/18836093</a>，微信Vac666666，欢迎交流</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0632868549525463" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-20 14:47">2025-04-20 14:46</span>&nbsp;
<a href="https://www.cnblogs.com/huangSir-devops">huangSir-devops</a>&nbsp;
阅读(<span id="post_view_count">10</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18836093);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18836093', targetLink: 'https://www.cnblogs.com/huangSir-devops/p/18836093', title: 'docker镜像仓库' })">举报</a>
</div>
        