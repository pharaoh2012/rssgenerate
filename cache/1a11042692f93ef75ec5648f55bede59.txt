
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/helloyaren/p/19050950" title="发布于 2025-08-21 15:43">
    <span role="heading" aria-level="2">Docker Desktop里搭建Mysql 9.4主从复制的保姆级教程</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div>
<blockquote>
<div>最近想自己开发一个小系统，而我的电脑里还没有安装任何的开发相关的配套软件和环境，所以想着方便以后开发的原则，就想从头到尾搭建一个mysql主从复制的数据库环境。一开始觉得这个搭建应该不难，网上有很多现成的资料而且有AI大模型的加持，所以理论上很快能搞定，可结果是我花了大概一天半的时间才算基本完成环境搭建，因此记录一下整个过程很有必要。</div>
</blockquote>
</div>
<h2>一、<strong>涉及软件及环境</strong></h2>
<div>
<table><colgroup><col><col><col></colgroup>
<tbody>
<tr>
<td data-cell-id="DaTA-1755761257891">
<div class="table-cell-line">序号</div>
</td>
<td data-cell-id="JM8r-1755761257894">
<div class="table-cell-line">软件名称</div>
</td>
<td data-cell-id="yCeI-1755761257897">
<div class="table-cell-line">版本号</div>
</td>
</tr>
<tr>
<td data-cell-id="Luju-1755761257901">
<div class="table-cell-line">1</div>
</td>
<td data-cell-id="mC5K-1755761257904">
<div class="table-cell-line">Windows 11 家庭中文版</div>
</td>
<td data-cell-id="kMrR-1755761257907">
<div class="table-cell-line">26100.4652</div>
</td>
</tr>
<tr>
<td data-cell-id="lYUp-1755761257911">
<div class="table-cell-line">2</div>
</td>
<td data-cell-id="5zqK-1755761257915">
<div class="table-cell-line">Docker Desktop</div>
</td>
<td data-cell-id="4aDC-1755761257918">
<div class="table-cell-line">4.44.2&nbsp;(202017)</div>
</td>
</tr>
<tr>
<td data-cell-id="Julp-1755761257922">
<div class="table-cell-line">3</div>
</td>
<td data-cell-id="BiWM-1755761257925">
<div class="table-cell-line">MySql</div>
</td>
<td data-cell-id="rnX4-1755761257928">
<div class="table-cell-line">9.4.0</div>
</td>
</tr>
<tr>
<td data-cell-id="8Mbn-1755761257932">
<div class="table-cell-line">4</div>
</td>
<td data-cell-id="CU1J-1755761257935">
<div class="table-cell-line">DBeaver</div>
</td>
<td data-cell-id="5G4f-1755761257938">
<div class="table-cell-line">25.1.0</div>
</td>
</tr>
</tbody>
</table>
</div>
<h2 id="sIyZ-1755761257942">二、Docker Desktop下载&amp;安装</h2>
<div>Docker Desktop下载地址：<a href="https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe?utm_source=docker&amp;utm_medium=webreferral&amp;utm_campaign=dd-smartbutton&amp;utm_location=module" rel="noopener nofollow">https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe?utm_source=docker&amp;utm_medium=webreferral&amp;utm_campaign=dd-smartbutton&amp;utm_location=module</a></div>
<div>下载之后直接双击“Docker Desktop Installer.exe”安装即可</div>
<div>安装Docker Desktop后，需要配置一下国内镜像，否则无法下载Docker镜像文件；</div>
<div>1、以管理员身份运行Docker Desktop之后，点击上面的配置图标，如下：</div>
<div><img alt="0" width="1899" height="102" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250821154320560-62857504.png" class="lazyload"></div>
<div>2、然后点击左侧“Docker Engine”菜单，在右侧配置国内镜像，如下：</div>
<div><img alt="0" width="1869" height="783" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250821154320625-1714751795.png" class="lazyload"></div>
<div>
<div>温馨提示：国内镜像可能随时会无法正常提供服务，还请及时更新这个源。</div>
</div>
<div>3、配置完成之后，点击右上角“X”关闭，然后来到主窗口，点击左侧“Images”，如下：</div>
<div><img alt="0" width="1884" height="1047" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250821154320656-549030372.png" class="lazyload"></div>
<div>然后点击右下角的终端窗口，如下：</div>
<div><img alt="0" width="1467" height="591" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250821154320429-2046699657.png" class="lazyload"></div>
<div>将会出现终端窗口，如下：</div>
<div><img alt="0" width="1569" height="879" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250821154320552-459340895.png" class="lazyload"></div>
<div>至此，我们的准备工作基本上完成了，现在就可以愉快的在光标出执行docker的各种操作了。</div>
<div>三、MySql 9.4.0下载&amp;安装</div>
<div>1、在终端里输入命令“docker pull mysql:latest”，下载mysql</div>
<div><img alt="0" width="1526" height="333" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250821154320505-239109389.png" class="lazyload"></div>
<div>
<blockquote>
<div>温馨提示：如果想跟我一样的话，请将latest替换成“9.4.0”</div>
</blockquote>
</div>
<div>2、mysql安装准备工作</div>
<div><ol>
<li>新建docker的挂载目录，我是在D:\Users\Docker</li>
<li>在Docker文件夹下新建挂载目录下按照如下说明创建目录，如下：</li>
</ol></div>
<div data-theme="tomorrow" data-language="apex">
<p><img alt="image" width="612" height="379" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250821152829058-708515240.png" class="lazyload"></p>
</div>
<div>其中WSL是Docker Desktop设置window Linux 子系统的位置，如下：</div>
<div><img alt="0" width="1887" height="999" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250821154320631-792571935.png" class="lazyload"></div>
<div>&nbsp;</div>
<div>3、mysql安装</div>
<div><ol>
<li>配置主数据库my.cnf</li>
</ol></div>
<div data-theme="tomorrow" data-language="">
<div class="cnblogs_code">
<pre>[mysqld]
## 设置server_id，同一局域网中需要唯一
server_id=101
## 指定不需要同步的数据库名称
binlog-ignore-db=sys
## 开启二进制日志功能
log-bin=mysql-bin
## 设置二进制日志使用内存大小（事务）
binlog_cache_size=1M

## 设置使用的二进制日志格式（mixed,statement,row）
binlog_format=row
## 二进制日志过期清理时间。默认值为0，表示不自动清理。
binlog_expire_logs_seconds = 604800  ##7天对应的秒数
## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。
## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致
slave_skip_errors=1062

##设置ssl证书
require_secure_transport=ON
ssl-ca=/etc/mysql/ssl/ca-cert.pem
ssl-cert=/etc/mysql/ssl/server-cert.pem
ssl-key=/etc/mysql/ssl/server-key.pem</pre>
</div>
<p>&nbsp;</p>
</div>
<div><ol start="2">
<li>配置从数据库my.cnf</li>
</ol></div>
<div data-theme="tomorrow" data-language="">
<div class="cnblogs_code">
<pre>[mysqld]
## 设置server_id，同一局域网中需要唯一
server_id=102
## 指定不需要同步的数据库名称
binlog-ignore-db=sys
## 开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用
log-bin=mysql-slave1-bin  
## 设置二进制日志使用内存大小（事务）
binlog_cache_size=1M  
## 设置使用的二进制日志格式（mixed,statement,row）
binlog_format=row  
## 二进制日志过期清理时间。默认值为0，表示不自动清理。
binlog_expire_logs_seconds = 604800 ##7天对应的秒数
## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。
## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致
slave_skip_errors=1062  
## relay_log配置中继日志
relay-log=mysql-relay-bin  # 固定日志文件名前缀
relay-log-index=mysql-relay-bin.index
##relay-log-info-repository=TABLE  # 8.0+推荐使用表存储
relay-log-recovery=ON  # 崩溃后自动恢复
## log_slave_updates表示slave将复制事件写进自己的二进制日志
log_slave_updates=1  
## slave设置为只读（具有super权限的用户除外）
read_only=1
slave_net_timeout=60          # 网络超时时间(秒)
master_retry_count=86400      # 最大重试次数(24小时*3600秒)
##master_connect_retry=10       # 重试间隔(秒)
replica_parallel_workers=4    # 并行复制线程数

##设置ssl证书
require_secure_transport=ON
ssl-ca=/etc/mysql/ssl/ca-cert.pem
ssl-cert=/etc/mysql/ssl/server-cert.pem
ssl-key=/etc/mysql/ssl/server-key.pem</pre>
</div>
<p>&nbsp;</p>
</div>
<div><ol start="3">
<li>新建一个共享的网络</li>
</ol></div>
<div data-theme="tomorrow" data-language="bash">
<div class="cnblogs_code">
<pre>docker network create mysql-replication</pre>
</div>
</div>
<div>
<blockquote>
<div>这个主要是为了主从复制的时候处于同一个网络中，便于网络访问</div>
</blockquote>
</div>
<div><ol start="4">
<li>启动mysql 主库的 docker命令</li>
</ol></div>
<div data-theme="tomorrow" data-language="bash">
<div class="cnblogs_code">
<pre>docker run -p <span style="color: rgba(128, 0, 128, 1)">3306</span>:<span style="color: rgba(128, 0, 128, 1)">3306</span> --name mysql_master --network mysql-replication -v D:\\Users\\Docker\\Volumes\\mysql-master\\log:/var/log/mysql -v D:\\Users\\Docker\\Volumes\\mysql-master\\data:/var/lib/mysql -v D:\\Users\\Docker\\Volumes\\mysql-master\\conf\\my.cnf:/etc/my.cnf -v D:\\Users\\Docker\\Volumes\\shared\\ssl:/etc/mysql/ssl -e MYSQL_ROOT_PASSWORD=sasa989 -e MYSQL_ALLOW_PUBLIC_KEY_RETRIEVAL=<span style="color: rgba(0, 0, 255, 1)">true</span> -d mysql:latest</pre>
</div>
</div>
<div><ol start="5">
<li>在主库容器实例的终端重新生成有效证书（需进入MySQL容器）</li>
</ol></div>
<div>
<ul>
<li>首先，切换到mysql的SSL证书目录来存储证书和密钥文件。</li>
</ul>
</div>
<div data-theme="tomorrow" data-language="bash">
<div class="cnblogs_code">
<pre>cd /etc/mysql/ssl</pre>
</div>
</div>
<div>
<ul>
<li>然后，生成自签名的CA证书和私钥。</li>
</ul>
</div>
<div data-theme="tomorrow" data-language="bash">
<div class="cnblogs_code">
<pre>openssl genrsa -out ca-key.pem <span style="color: rgba(128, 0, 128, 1)">4096</span> openssl req -new -x509 -nodes -days <span style="color: rgba(128, 0, 128, 1)">3650</span> -key ca-key.pem -out ca-cert.pem</pre>
</div>
</div>
<div>
<blockquote>
<div>在此处，4096位的ca-key.pem使用OpenSSL生成了一个RSA私钥，并使用该密钥签署了一个自签名X.509证书，并保存为ca-cert.pem。在输入提供关于组织和公钥的一些基本信息后，将生成ca-cert.pem文件。</div>
</blockquote>
</div>
<div>
<ul>
<li>接下来，生成服务器证书和私钥。</li>
</ul>
</div>
<div data-theme="tomorrow" data-language="bash">
<div class="cnblogs_code">
<pre>openssl req -newkey rsa:<span style="color: rgba(128, 0, 128, 1)">4096</span> -days <span style="color: rgba(128, 0, 128, 1)">3650</span> -nodes -keyout server-key.pem -out server-req.pem openssl x509 -req -<span style="color: rgba(0, 0, 255, 1)">in</span> server-req.pem -days <span style="color: rgba(128, 0, 128, 1)">3650</span> -CA ca-cert.pem -CAkey ca-key.pem -set_serial <span style="color: rgba(128, 0, 128, 1)">01</span> -out server-cert.pem -subj <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/CN=mysql-master</span><span style="color: rgba(128, 0, 0, 1)">"</span></pre>
</div>
<p>&nbsp;</p>
</div>
<div>
<blockquote>
<div>这里OpenSSL生成一个4096位的RSA私钥，并使用该密钥创建服务器证书签名请求server-req.pem。然后，服务器证书从签名请求生成，使用先前创建的CA证书ca-cert.pem和私钥ca-key.pem进行签名，使用序列号01，并保存为server-cert.pem。</div>
<div>最后，如果不是按照本文提供的mysql配置挂载目录的方式还需要将证书和密钥文件复制到MySQL从服务器和客户端所在的目录上。</div>
</blockquote>
</div>
<div>
<ul>
<li>最后确保mysql有读取证书的权限，参见第10操作</li>
</ul>
</div>
<div><ol start="6">
<li>启动mysql 从库的 docker命令</li>
</ol></div>
<div data-theme="tomorrow" data-language="bash">
<div class="cnblogs_code">
<pre>docker run -p <span style="color: rgba(128, 0, 128, 1)">3307</span>:<span style="color: rgba(128, 0, 128, 1)">3306</span> --name mysql_slave --network mysql-replication -v D:\\Users\\Docker\\Volumes\\mysql-slave\\log:/var/log/mysql -v D:\\Users\\Docker\\Volumes\\mysql-slave\\data:/var/lib/mysql -v D:\\Users\\Docker\\Volumes\\mysql-slave\\conf\\my.cnf:/etc/my.cnf -v D:\\Users\\Docker\\Volumes\\shared\\ssl:/etc/mysql/ssl -e MYSQL_ROOT_PASSWORD=sasa989 -e MYSQL_ALLOW_PUBLIC_KEY_RETRIEVAL=<span style="color: rgba(0, 0, 255, 1)">true</span> -d mysql:latest</pre>
</div>
</div>
<div><ol start="7">
<li>在主库容器实例内创建数据同步用户</li>
</ol></div>
<div>
<ul>
<li>在主库创建同步账户 Slave：</li>
</ul>
</div>
<div data-theme="tomorrow" data-language="sql">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">CREATE</span> <span style="color: rgba(255, 0, 255, 1)">USER</span> <span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">slave</span><span style="color: rgba(255, 0, 0, 1)">'</span>@<span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">%</span><span style="color: rgba(255, 0, 0, 1)">'</span> IDENTIFIED <span style="color: rgba(0, 0, 255, 1)">BY</span> <span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">abc@123</span><span style="color: rgba(255, 0, 0, 1)">'</span>;<span style="color: rgba(0, 128, 128, 1)">--</span><span style="color: rgba(0, 128, 128, 1)">密码自己设置</span></pre>
</div>
<p>&nbsp;</p>
</div>
<div>
<ul>
<li>添加账户权限：</li>
</ul>
</div>
<div data-theme="tomorrow" data-language="sql">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">GRANT</span> <span style="color: rgba(0, 0, 255, 1)">REPLICATION</span> SLAVE, <span style="color: rgba(0, 0, 255, 1)">REPLICATION</span> CLIENT <span style="color: rgba(0, 0, 255, 1)">ON</span> <span style="color: rgba(128, 128, 128, 1)">*</span>.<span style="color: rgba(128, 128, 128, 1)">*</span> <span style="color: rgba(0, 0, 255, 1)">TO</span> <span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">slave</span><span style="color: rgba(255, 0, 0, 1)">'</span>@<span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">%</span><span style="color: rgba(255, 0, 0, 1)">'</span>; FLUSH <span style="color: rgba(0, 0, 255, 1)">PRIVILEGES</span>;</pre>
</div>
</div>
<div><ol start="8">
<li>在主库容器实例内主数据库中查看主从同步状态</li>
</ol></div>
<div data-theme="tomorrow" data-language="sql">
<div class="cnblogs_code">
<pre>SHOW <span style="color: rgba(0, 0, 255, 1)">BINARY</span> <span style="color: rgba(255, 0, 255, 1)">LOG</span> STATUS;</pre>
</div>
</div>
<div><ol start="9">
<li>在从库容器实例内从数据库中配置主从复制</li>
</ol></div>
<div>
<ul>
<li>进入容器终端，在Docker Desktop主窗口里，点击左侧的“Containers”，然后出现正在运行的容器实例，如下：</li>
</ul>
</div>
<div><img alt="0" width="1898" height="744" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250821154320660-1597886382.png" class="lazyload"></div>
<div>
<ul>
<li>然后点击上图的箭头位置，在弹出的菜单里点击“Open in terminal”即可进入容器实例终端，如下</li>
</ul>
</div>
<div><img alt="0" width="1887" height="990" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250821154320653-751354476.png" class="lazyload"></div>
<div>
<ul>
<li>在容器终端里输入mysql的命令进入mysql命令执行终端，如下：</li>
</ul>
</div>
<div data-theme="tomorrow" data-language="sql">
<div class="cnblogs_code">
<pre>mysql -uroot -p</pre>
</div>
</div>
<div>
<ul>
<li>在终端里配置主从复制</li>
</ul>
</div>
<div data-theme="tomorrow" data-language="sql">
<div class="cnblogs_code">
<pre>STOP REPLICA; <span style="color: rgba(0, 128, 128, 1)">--</span><span style="color: rgba(0, 128, 128, 1)"> 停止现有复制 <br>CHANGE REPLICATION SOURCE TO SOURCE_HOST='mysql_master', # 使用主库容器名 <br>SOURCE_SSL=1, <br>SOURCE_SSL_CA='/etc/mysql/ssl/ca-cert.pem', <br>SOURCE_SSL_CERT='/etc/mysql/ssl/server-cert.pem',<br> SOURCE_SSL_KEY='/etc/mysql/ssl/server-key.pem', <br>SOURCE_LOG_FILE='mysql-bin.000006', # 主库SHOW BINARY LOG STATUS结果 <br>SOURCE_LOG_POS=688; <br>START REPLICA USER='slave' PASSWORD='abc@123';</span></pre>
</div>
<p>&nbsp;</p>
</div>
<div><ol start="10">
<li>确保私钥文件权限正确</li>
</ol></div>
<div>
<ul>
<li>在主库和从库的终端执行如下命令，确保mysql有权限读取server-key.pem</li>
</ul>
</div>
<div data-theme="tomorrow" data-language="bash">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">chmod</span> <span style="color: rgba(128, 0, 128, 1)">600</span> /etc/mysql/ssl/server-key.pem <span style="color: rgba(0, 0, 255, 1)">chown</span> mysql:mysql /etc/mysql/ssl/server-key.pem</pre>
</div>
</div>
<div><ol start="11">
<li>测试主从复制</li>
</ol></div>
<div>
<ul>
<li>在DBeaver里，新建数据库连接</li>
</ul>
</div>
<div><img alt="0" width="1892" height="999" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250821154320591-917636370.png" class="lazyload"></div>
<div>
<ul>
<li>在DBeaver里，点击“驱动属性”，将红色的属性设置为“TRUE”</li>
</ul>
</div>
<div><img alt="0" width="1883" height="867" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250821154320618-93638034.png" class="lazyload"></div>
<div>
<ul>
<li>在DBeaver里，点击“SSL”，勾选使用SSL，并设置红框里的高级参数</li>
</ul>
</div>
<div><img alt="0" width="1893" height="975" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250821154320601-794231357.png" class="lazyload"></div>
<div>
<ul>
<li>点击确定之后就可以连接数据库。</li>
<li>在主数据库里新建数据库“product”（等一会再创建表，要不从数据库无法及时同步数据库创建会出现其它的错误）</li>
</ul>
</div>
<div data-theme="tomorrow" data-language="sql">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">CREATE</span> <span style="color: rgba(0, 0, 255, 1)">DATABASE</span> `product` <span style="color: rgba(0, 128, 128, 1)">/*</span><span style="color: rgba(0, 128, 128, 1)">!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci </span><span style="color: rgba(0, 128, 128, 1)">*/</span> <span style="color: rgba(0, 128, 128, 1)">/*</span><span style="color: rgba(0, 128, 128, 1)">!80016 DEFAULT ENCRYPTION='N' </span><span style="color: rgba(0, 128, 128, 1)">*/</span>;</pre>
</div>
</div>
<div>
<div>类似的错误如下：</div>
</div>
<div>
<blockquote>
<div>[ERROR] [MY-010584] [Repl] Replica SQL for channel '': Worker 1 failed executing transaction 'ANONYMOUS' at source log mysql-bin.000005, end_log_pos 1867; Error 'Unknown database 'test'' on query. Default database: ''. Query: '/* ApplicationName=DBeaver 25.1.0 - Main */ CREATE TABLE test.t (</div>
<div>id int PRIMARY key,</div>
<div>name varchar(20)</div>
<div>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci', Error_code: MY-001049</div>
</blockquote>
</div>
<div>
<blockquote>
<div>2025-08-21T02:55:01.228876Z 17 [Warning] [MY-010584] [Repl] Replica SQL for channel '': ... The replica coordinator and worker threads are stopped, possibly leaving data in inconsistent state. A restart should restore consistency automatically, although using non-transactional storage for data or info tables or DDL queries could lead to problems. In such cases you have to examine your data (see documentation for details). Error_code: MY-001756</div>
</blockquote>
</div>
<div>
<ul>
<li>连接从数据库，如果从数据库已经同步了主数据库product，则在主数据库客户端新建表order</li>
</ul>
</div>
<div data-theme="tomorrow" data-language="sql">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">CREATE</span> <span style="color: rgba(0, 0, 255, 1)">TABLE</span> `<span style="color: rgba(0, 0, 255, 1)">order</span>` ( `id` <span style="color: rgba(0, 0, 255, 1)">int</span> <span style="color: rgba(128, 128, 128, 1)">NOT</span> <span style="color: rgba(0, 0, 255, 1)">NULL</span> AUTO_INCREMENT, `product_id` <span style="color: rgba(0, 0, 255, 1)">int</span> <span style="color: rgba(0, 0, 255, 1)">DEFAULT</span> <span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">0</span><span style="color: rgba(255, 0, 0, 1)">'</span>, `order_no` <span style="color: rgba(0, 0, 255, 1)">varchar</span>(<span style="color: rgba(128, 0, 0, 1); font-weight: bold">20</span>) <span style="color: rgba(0, 0, 255, 1)">DEFAULT</span> <span style="color: rgba(0, 0, 255, 1)">NULL</span>, <span style="color: rgba(0, 0, 255, 1)">PRIMARY</span> <span style="color: rgba(0, 0, 255, 1)">KEY</span> (`id`) ) ENGINE<span style="color: rgba(128, 128, 128, 1)">=</span>InnoDB AUTO_INCREMENT<span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(128, 0, 0, 1); font-weight: bold">2</span> <span style="color: rgba(0, 0, 255, 1)">DEFAULT</span> CHARSET<span style="color: rgba(128, 128, 128, 1)">=</span>utf8mb4 COLLATE<span style="color: rgba(128, 128, 128, 1)">=</span>utf8mb4_0900_ai_ci;</pre>
</div>
</div>
<div>
<ul>
<li>连接从数据库，如果从数据库已经同步了主数据库product里的表order，则在表order新建数据</li>
</ul>
</div>
<div><img alt="0" width="240" height="443" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250821154320528-972467078.png" class="lazyload"></div>
<div>在主数据库新增一条记录，</div>
<div><img alt="0" width="568" height="373" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250821154320538-1543230764.png" class="lazyload"></div>
<div>在从数据库里查看同步记录</div>
<div><img alt="0" width="1419" height="447" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250821154320495-797426854.png" class="lazyload"></div>
<div>至此，整个mysql 9的主从复制就算搭建完成了。</div>
<h2>四、总结</h2>
<div><strong>1、MySql 9主从复制的时候出现认证插件需要安全连接错误</strong></div>
<div>这个错误信息表明，在尝试连接到MySQL服务器时，由于认证插件caching_sha2_password要求使用安全连接，而当前的连接没有满足这一要求，因此认证失败。</div>
<div>caching_sha2_password是MySQL 8.0.4及以上版本引入的一个新的身份验证插件，它对密码安全性要求更高，要求在网络传输过程中密码是加密的。</div>
<div>类似的错误信息如下：</div>
<div>
<blockquote>
<div>Error connecting to source 'slave@mysql_master:3306'. This was attempt 2/10, with a delay of 60 seconds between attempts. Message: Authentication plugin 'caching_sha2_password' reported error: Authentication requires secure connection. Error_code: MY-002061</div>
</blockquote>
</div>
<div><strong>解决方法：按照文中的要求进入容器终端生成证书</strong></div>
<div><strong>2、SSL证书生成的误区</strong></div>
<div>我一开始SSL证书生成，误以为在我window11机器上生成，然后直接放到挂载的目录里D:\Users\Docker\Volumes\shared\ss即可，这个错误导致一直报错，类似错误如下：</div>
<div>
<blockquote>
<div>[Repl] Replica I/O for channel '': Error connecting to source 'slave@mysql_master:3306'. This was attempt 10/10, with a delay of 60 seconds between attempts. Message: SSL connection error: Unable to get private key, Error_code: MY-002026</div>
</blockquote>
</div>
<div><strong>解决方法：按照文中的要求进入容器终端生成证书并且给证书读取权限</strong></div>
<div><strong>3、确保主库Host配置正确</strong></div>
<div>我一开始配置Host为mysql-master，这个只是我挂载目录的名称，我们需要配置的是容器运行时的name属性或者是DNSNames里的字符串，在Docker里可以查看容器的Inspect看到，如下：</div>
<div><img alt="0" width="1890" height="972" data-media-type="image" data-src="https://img2024.cnblogs.com/blog/1644550/202508/1644550-20250821154320620-1697805006.png" class="lazyload"></div>
<div>否则会出现如下类似的错误：</div>
<div>
<blockquote>
<div>Error connecting to source 'slave@mysql-master:3306'. This was attempt 7/10, with a delay of 60 seconds between attempts. Message: Unknown MySQL server host 'mysql-master' (-2)</div>
</blockquote>
</div>
<div><strong>4、主从复制配置的时候，不要配置账号密码，确保安全</strong></div>
<div>我一开始将同步的账号密码配置在同步语句里，如下：</div>
<div data-theme="tomorrow" data-language="sql">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">--</span><span style="color: rgba(0, 128, 128, 1)"> 在从库容器内执行</span>
STOP REPLICA;  <span style="color: rgba(0, 128, 128, 1)">--</span><span style="color: rgba(0, 128, 128, 1)"> 停止现有复制</span>
CHANGE <span style="color: rgba(0, 0, 255, 1)">REPLICATION</span> SOURCE <span style="color: rgba(0, 0, 255, 1)">TO</span><span style="color: rgba(0, 0, 0, 1)">
  SOURCE_HOST</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">"mysql_master</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">,  # 使用主库容器名mysql_master
  SOURCE_USER</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">slave</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">,
  SOURCE_PASSWORD</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">abc@123</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">,
  SOURCE_SSL</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(128, 0, 0, 1); font-weight: bold">1</span><span style="color: rgba(0, 0, 0, 1)">,
  SOURCE_SSL_CA</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">/etc/mysql/ssl/ca-cert.pem</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">,
  SOURCE_SSL_CERT</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">/etc/mysql/ssl/server-cert.pem</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">,
  SOURCE_SSL_KEY</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">/etc/mysql/ssl/server-key.pem</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">,
  SOURCE_LOG_FILE</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">binlog.000010</span><span style="color: rgba(255, 0, 0, 1)">'</span>,  # 主库SHOW <span style="color: rgba(0, 0, 255, 1)">BINARY</span> <span style="color: rgba(255, 0, 255, 1)">LOG</span><span style="color: rgba(0, 0, 0, 1)"> STATUS结果
  SOURCE_LOG_POS</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(128, 0, 0, 1); font-weight: bold">462</span><span style="color: rgba(0, 0, 0, 1)">;
START REPLICA </span><span style="color: rgba(255, 0, 255, 1)">USER</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">slave</span><span style="color: rgba(255, 0, 0, 1)">'</span> PASSWORD<span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">abc@123</span><span style="color: rgba(255, 0, 0, 1)">'</span>;</pre>
</div>
<p>&nbsp;</p>
</div>
<div>然后看到mysql从数据库执行时输出如下错误：</div>
<div>
<blockquote>
<div>Storing MySQL user name or password information in the connection metadata repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START REPLICA; see the 'START REPLICA Syntax' in the MySQL Manual for more information.</div>
</blockquote>
</div>
<div>后来改成如下语句：</div>
<div data-theme="tomorrow" data-language="sql">
<div class="cnblogs_code">
<pre>STOP REPLICA;  <span style="color: rgba(0, 128, 128, 1)">--</span><span style="color: rgba(0, 128, 128, 1)"> 停止现有复制</span>
CHANGE <span style="color: rgba(0, 0, 255, 1)">REPLICATION</span> SOURCE <span style="color: rgba(0, 0, 255, 1)">TO</span><span style="color: rgba(0, 0, 0, 1)">
  SOURCE_HOST</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">mysql_master</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">,  # 使用主库容器名
  SOURCE_SSL</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(128, 0, 0, 1); font-weight: bold">1</span><span style="color: rgba(0, 0, 0, 1)">,
  SOURCE_SSL_CA</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">/etc/mysql/ssl/ca-cert.pem</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">,
  SOURCE_SSL_CERT</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">/etc/mysql/ssl/server-cert.pem</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">,
  SOURCE_SSL_KEY</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">/etc/mysql/ssl/server-key.pem</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">,
  SOURCE_LOG_FILE</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">mysql-bin.000006</span><span style="color: rgba(255, 0, 0, 1)">'</span>,  # 主库SHOW <span style="color: rgba(0, 0, 255, 1)">BINARY</span> <span style="color: rgba(255, 0, 255, 1)">LOG</span><span style="color: rgba(0, 0, 0, 1)"> STATUS结果
  SOURCE_LOG_POS</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(128, 0, 0, 1); font-weight: bold">688</span><span style="color: rgba(0, 0, 0, 1)">;
START REPLICA </span><span style="color: rgba(255, 0, 255, 1)">USER</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">slave</span><span style="color: rgba(255, 0, 0, 1)">'</span> PASSWORD<span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">abc@123</span><span style="color: rgba(255, 0, 0, 1)">'</span>;</pre>
</div>
</div>
<div>5、当从库同步时输出元数据结构相关的问题，重置复制配置以及重新配置即可</div>
<div>当出现如下类似错误的时候：</div>
<div>
<blockquote>
<div>Replica failed to initialize applier metadata structure from the repository</div>
</blockquote>
</div>
<div>
<blockquote>
<div>2025-08-21T02:24:12.162382Z 22 [System] [MY-014001] [Repl] Replica receiver thread for channel '': connected to source 'slave@mysql_master:3306' with server_uuid=d55239e3-7db5-11f0-8543-2e1613da1bf7, server_id=101. Starting replication from file 'binlog.000010', position '462'.</div>
</blockquote>
</div>
<blockquote>
<div>
<div>2025-08-21T02:24:12.163621Z 22 [ERROR] [MY-010557] [Repl] Error reading packet from server for channel '': Could not find first log file name in binary log index file (server_errno=1236)</div>
</div>
</blockquote>
<div>
<blockquote>
<div>2025-08-21T02:24:12.163662Z 22 [ERROR] [MY-013114] [Repl] Replica I/O for channel '': Got fatal error 1236 from source when reading data from binary log: 'Could not find first log file name in binary log index file', Error_code: MY-013114</div>
</blockquote>
</div>
<div>重置从库复制元数据：</div>
<div data-theme="tomorrow" data-language="sql">
<div class="cnblogs_code">
<pre>STOP REPLICA; RESET REPLICA <span style="color: rgba(128, 128, 128, 1)">ALL</span>; <span style="color: rgba(0, 128, 128, 1)">--</span><span style="color: rgba(0, 128, 128, 1)"> MySQL 8.0+专用语法</span></pre>
</div>
</div>
<div>需要去主库容器实例终端，在mysql命令里执行：</div>
<div data-theme="tomorrow" data-language="sql">
<div class="cnblogs_code">
<pre>SHOW <span style="color: rgba(0, 0, 255, 1)">BINARY</span> <span style="color: rgba(255, 0, 255, 1)">LOG</span> STATUS;</pre>
</div>
</div>
<div>然后去从库容器实例终端，在mysql命令里执行：</div>
<div data-theme="tomorrow" data-language="sql">
<div class="cnblogs_code">
<pre>STOP REPLICA;  <span style="color: rgba(0, 128, 128, 1)">--</span><span style="color: rgba(0, 128, 128, 1)"> 停止现有复制</span>
CHANGE <span style="color: rgba(0, 0, 255, 1)">REPLICATION</span> SOURCE <span style="color: rgba(0, 0, 255, 1)">TO</span><span style="color: rgba(0, 0, 0, 1)">
  SOURCE_HOST</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">mysql_master</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">,  # 使用主库容器名
  SOURCE_SSL</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(128, 0, 0, 1); font-weight: bold">1</span><span style="color: rgba(0, 0, 0, 1)">,
  SOURCE_SSL_CA</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">/etc/mysql/ssl/ca-cert.pem</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">,
  SOURCE_SSL_CERT</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">/etc/mysql/ssl/server-cert.pem</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">,
  SOURCE_SSL_KEY</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">/etc/mysql/ssl/server-key.pem</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">,
  SOURCE_LOG_FILE</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">mysql-bin.00000x</span><span style="color: rgba(255, 0, 0, 1)">'</span>,  # 主库SHOW <span style="color: rgba(0, 0, 255, 1)">BINARY</span> <span style="color: rgba(255, 0, 255, 1)">LOG</span><span style="color: rgba(0, 0, 0, 1)"> STATUS新的结果
  SOURCE_LOG_POS</span><span style="color: rgba(128, 128, 128, 1)">=</span>xxx;# 主库SHOW <span style="color: rgba(0, 0, 255, 1)">BINARY</span> <span style="color: rgba(255, 0, 255, 1)">LOG</span><span style="color: rgba(0, 0, 0, 1)"> STATUS新的结果
START REPLICA </span><span style="color: rgba(255, 0, 255, 1)">USER</span><span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">slave</span><span style="color: rgba(255, 0, 0, 1)">'</span> PASSWORD<span style="color: rgba(128, 128, 128, 1)">=</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">abc@123</span><span style="color: rgba(255, 0, 0, 1)">'</span>;</pre>
</div>
</div>
<div>综上，本文是原创文章，转载请注明出处，谢谢。</div>
</div>
<div id="MySignature" role="contentinfo">
    <br><br>请扫码关注！！！ <br>
<b>您的关注将是您做的最正确的事情！！！</b>
<br>
大龄码农那些事专注分享大龄码农的点滴。
<br>

本文版权归作者helloyaren和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-21 15:43">2025-08-21 15:43</span>&nbsp;
<a href="https://www.cnblogs.com/helloyaren">helloyaren</a>&nbsp;
阅读(<span id="post_view_count">179</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19050950);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19050950', targetLink: 'https://www.cnblogs.com/helloyaren/p/19050950', title: 'Docker Desktop里搭建Mysql 9.4主从复制的保姆级教程' })">举报</a>
</div>
        