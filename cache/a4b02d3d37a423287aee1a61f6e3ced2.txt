
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lovejielive/p/18643655" title="发布于 2024-12-31 11:47">
    <span role="heading" aria-level="2">uniapp请求封装-token无感刷新</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p class="md-end-block md-p"><span class="md-pair-s"><strong>当前是vue3+ts版本的封装</strong></span></p>
<p class="md-end-block md-p"><span class="md-plain">vue3+js版本请求封装可参考 <span class="md-link md-pair-s"><a href="https://www.cnblogs.com/lovejielive/p/14343619.html">https://www.cnblogs.com/lovejielive/p/14343619.html</a></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">token无感刷新，可自行删除 requset.ts 中 ts 相关数据恢复vue2版本</span></p>
<p class="md-end-block md-p md-focus md-expand"><span class="md-pair-s md-expand"><strong>先在目录下创建 utils 和 common 这2个文件夹</strong></span></p>
<p class="md-end-block md-p md-focus md-expand"><img src="https://img2020.cnblogs.com/blog/2237618/202101/2237618-20210129103201760-1156242959.png" alt="img"></p>
<p class="md-end-block md-p md-focus"><span class="md-plain">utils 是存放工具类的，common 用来放置常用方法的</span></p>
<p class="md-end-block md-p"><span class="md-plain">之后在utils 中创建 requset.ts 用来放置 uni.request 的请求方法，无感刷新。</span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">1.common 文件创建 operate.ts + api.ts</span></h3>
<p class="md-end-block md-p"><span class="md-tab"> <span class="md-plain">主要用来放置 ，请求接口地址，一些全局请求数据，判断是否登录。</span></span></p>
<p class="md-end-block md-p"><span class="md-tab"> <span class="md-plain">配置全局消息提示框，模拟对话框方法，方便调用</span></span></p>
<p class="md-end-block md-p"><span class="md-tab"><span class="md-plain">operate.ts 代码如下：</span></span></p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_6fa2a103-edfa-4cc0-8f36-5159c70c0d18" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_6fa2a103-edfa-4cc0-8f36-5159c70c0d18" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_6fa2a103-edfa-4cc0-8f36-5159c70c0d18" class="cnblogs_code_hide">
<pre>import store from '@/store/index'<span style="color: rgba(0, 0, 0, 1)">

export </span><span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)"> {
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">接口</span>
    api: <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> () {
        let url </span>= ''
        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> #ifdef MP-WEIXIN || MP-ALIPAY</span>
        let version =<span style="color: rgba(0, 0, 0, 1)"> uni.getAccountInfoSync().miniProgram.envVersion;
        </span><span style="color: rgba(0, 0, 255, 1)">switch</span><span style="color: rgba(0, 0, 0, 1)"> (version) {
            </span><span style="color: rgba(0, 0, 255, 1)">case</span> "develop": <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">开发预览版</span>
                url = ''
                <span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
            </span><span style="color: rgba(0, 0, 255, 1)">case</span> 'trial': <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">体验版</span>
                url = ''
                <span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
            </span><span style="color: rgba(0, 0, 255, 1)">case</span> 'release': <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">正式版</span>
                url = ''
                <span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
            </span><span style="color: rgba(0, 0, 255, 1)">default</span>: <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">未知,默认调用正式版</span>
                url = ''
                <span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
        }
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> #endif</span>
        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> #ifdef H5 || APP-PLUS</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> (process.env.NODE_ENV === 'development'<span style="color: rgba(0, 0, 0, 1)">) {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> console.log('开发环境')</span>
            url = ''<span style="color: rgba(0, 0, 0, 1)">
        } </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> console.log('生产环境')</span>
            url = ''<span style="color: rgba(0, 0, 0, 1)">
        }
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> #endif</span>

        <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> url
    },

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">共同请求参数</span>
    commonBeg: <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> () {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> {
            Authorization: </span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.isToken(),
        }
    },

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">是否已注册（登录状态）</span>
    isLogin: <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> () {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> store.state.user.hasLodin;
    },

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">获取用户token</span>
    isToken: <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> () {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (store.state.user.accessToken != ''<span style="color: rgba(0, 0, 0, 1)">) {
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> 'Bearer ' +<span style="color: rgba(0, 0, 0, 1)"> store.state.user.accessToken;
        }
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> ''<span style="color: rgba(0, 0, 0, 1)">;
    },

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">消息提示框</span>
    toast: <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (options : any) {
        uni.showToast({
            title: options.title,
            duration: options.duration </span>|| 2000<span style="color: rgba(0, 0, 0, 1)">,
            icon: options.icon </span>|| "none"<span style="color: rgba(0, 0, 0, 1)">
        });
    },

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 模拟对话框</span>
    showModal: <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (matter : any) {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> Promise((resolve, _reject) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
            uni.showModal({
                title: matter.title </span>|| ''<span style="color: rgba(0, 0, 0, 1)">,
                content: matter.content </span>|| ''<span style="color: rgba(0, 0, 0, 1)">,
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 是否显示取消按钮，默认为 true</span>
<span style="color: rgba(0, 0, 0, 1)">                showCancel: matter.showCancel,
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 取消按钮的文字，默认为"取消"</span>
                cancelText: matter.cancelText || "取消"<span style="color: rgba(0, 0, 0, 1)">,
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 取消按钮的文字颜色，默认为"#000000"</span>
                cancelColor: matter.cancelColor || "#000000"<span style="color: rgba(0, 0, 0, 1)">,
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 确定按钮的文字，默认为"确定"</span>
                confirmText: matter.confirmText || "确定"<span style="color: rgba(0, 0, 0, 1)">,
                </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">
                确定按钮的文字颜色，H5平台默认为"#007aff"，
                    微信小程序平台默认为"#576B95"，
                    百度小程序平台默认为 "#3c76ff"
                </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
                <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> confirmColor: matter.confirmColor || '#576B95',</span>
                success: (res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
                    </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (res.confirm) {
                        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> console.log('用户点击确定');</span>
<span style="color: rgba(0, 0, 0, 1)">                        resolve(res)
                    }
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> if (res.cancel) {</span>
                    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> console.log('用户点击取消');</span>
                    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> reject(res.cancel)</span>
                    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> }</span>
<span style="color: rgba(0, 0, 0, 1)">                }
            })
        })
    }
}</span></pre>
</div>
<span class="cnblogs_code_collapse">operate.ts</span></div>
<p>api.ts 代码如下</p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_9151582e-b591-42bd-85fd-9aa2ab300081" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_9151582e-b591-42bd-85fd-9aa2ab300081" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_9151582e-b591-42bd-85fd-9aa2ab300081" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 0, 0, 1)">import {
    request
} from </span>'@/utils/requset'

<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 手机密码登录</span>
export const text = <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (data : any) {
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> request({
        url: </span>"/pai/api/pai"<span style="color: rgba(0, 0, 0, 1)">,
        method: </span>"POST"<span style="color: rgba(0, 0, 0, 1)">,
        hideLoading: </span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">,
        data: data,
    })
}

</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">
使用方法: 在请求页面中调用

    1.先导入本页面
        import {text} from '@/common/api'
        
    2.在methods 中 调用：
        text().then((res) =&gt; {
            console.log(res);
        })

</span><span style="color: rgba(0, 128, 0, 1)">*/</span></pre>
</div>
<span class="cnblogs_code_collapse">api.ts</span></div>
<h3 class="md-end-block md-heading md-focus"><span class="md-plain md-expand">2.utils 中创建 requset.ts </span></h3>
<p class="md-end-block md-p"><span class="md-plain">配置 <span class="md-pair-s "><strong>uni.request</strong><span class="md-plain"> 统一请求, <span class="md-pair-s "><strong>uni.getNetworkType</strong><span class="md-plain"> 判断当前网络状态</span></span></span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">通过 <span class="md-pair-s "><strong>uni.addInterceptor</strong><span class="md-plain"> 拦截器，实现请求前后的数据监听（该方法只写了监听，具体逻辑项目没用到）</span></span></span></p>
<p class="md-end-block md-p"><span class="md-pair-s "><strong>import route from '@/utils/routeBlocker'&nbsp;<span class="md-plain md-expand"> <span class="md-meta-i-c md-link md-expand"><a href="https://www.cnblogs.com/lovejielive/p/15938794.html"><span class="md-plain">路由封装-方法链接</span></a></span></span></strong><span class="md-plain"><span class="md-meta-i-c  md-link"><a href="https://www.cnblogs.com/lovejielive/p/15938794.html"><span class="md-plain"><br></span></a></span></span></span></p>
<p class="md-end-block md-p md-focus"><span class="md-plain md-expand">无感刷新 token 配置，具体代码如下</span></p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_5a74c26f-c816-44ab-8da5-e03110898699" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_5a74c26f-c816-44ab-8da5-e03110898699" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_5a74c26f-c816-44ab-8da5-e03110898699" class="cnblogs_code_hide">
<pre>import operate from "@/common/operate"<span style="color: rgba(0, 0, 0, 1)">
import store from </span>'@/store-ts/index'<span style="color: rgba(0, 0, 0, 1)">
import route from </span>'@/utils/routeBlocker'

<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">
 解决: 类型“string | AnyObject | ArrayBuffer”上不存在属性“code”。
        类型“string”上不存在属性“code”。
  </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
interface Codeable {
    data : Object </span>| String |<span style="color: rgba(0, 0, 0, 1)"> ArrayBuffer,
    code : Number,
}

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">请求对列 / 请求状态</span>
let requestQueue =<span style="color: rgba(0, 0, 0, 1)"> [],
    isRefreshing </span>= <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;

export const request </span>= <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (param : any) {
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">请求参数</span>
    let url =<span style="color: rgba(0, 0, 0, 1)"> param.url,
        method </span>=<span style="color: rgba(0, 0, 0, 1)"> param.method,
        header </span>=<span style="color: rgba(0, 0, 0, 1)"> {},
        data </span>= param.data ||<span style="color: rgba(0, 0, 0, 1)"> {},
        hideLoading </span>= param.hideLoading || <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">拼接完整请求地址</span>
    let requestUrl = operate.api() +<span style="color: rgba(0, 0, 0, 1)"> url;

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">跨域解决</span>
    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> let requestUrl =  url;</span>
    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> console.log(requestUrl)</span>

    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">请求方式:GET或POST</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (method) {
        method </span>= method.toUpperCase(); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">小写改为大写</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> (method == "POST"<span style="color: rgba(0, 0, 0, 1)">) {
            header </span>=<span style="color: rgba(0, 0, 0, 1)"> {
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 'content-type': 'application/x-www-form-urlencoded',</span>
                'content-type': "application/json"<span style="color: rgba(0, 0, 0, 1)">,
            };
        } </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
            header </span>=<span style="color: rgba(0, 0, 0, 1)"> {
                </span>'content-type': "application/json"<span style="color: rgba(0, 0, 0, 1)">,
            };
        }
    }
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 拼接header 登录参数</span>
    let jointHeader =<span style="color: rgba(0, 0, 0, 1)"> Object.assign({}, header, operate.commonBeg());

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">用户交互:加载圈</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">hideLoading) {
        uni.showLoading({
            title: </span>'加载中...'<span style="color: rgba(0, 0, 0, 1)">,
            mask: </span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">
        });
    }

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 请求-拦截器</span>
    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> requestBlocker()</span>

    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">开始请求</span>
    <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> Promise((resolve, reject) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 判断有无网络验证</span>
        noneNetwork().then(() =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">请求放到promise队列，等待更新token后重新调用。</span>
<span style="color: rgba(0, 0, 0, 1)">            addRequestQueue(url, method, param.data, jointHeader)

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">更新 token</span>
            flushToken().then(() =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 执行等待的请求</span>
                onRefreshed().then(resolve).<span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)">(reject);
            })
        }).</span><span style="color: rgba(0, 0, 255, 1)">catch</span>(() =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">隐藏加载</span>
            <span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">hideLoading) {
                uni.hideLoading();
            }
        })

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">开始请求</span>
<span style="color: rgba(0, 0, 0, 1)">        uni.request({
            url: requestUrl,
            data: data,
            method: method,
            header: jointHeader,
            success(res) {
                let data </span>=<span style="color: rgba(0, 0, 0, 1)"> res.data as Codeable

                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> code判断: 刷新令牌</span>
                <span style="color: rgba(0, 0, 255, 1)">if</span> (data.code == 401<span style="color: rgba(0, 0, 0, 1)">) {
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 处理token刷新</span>
                    <span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">isRefreshing) {
                        isRefreshing </span>= <span style="color: rgba(0, 0, 255, 1)">true</span>
                        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">请求放到promise队列，等待更新token后重新调用。</span>
<span style="color: rgba(0, 0, 0, 1)">                        addRequestQueue(url, method, param.data, jointHeader)

                        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">更新 token</span>
                        flushToken().then(() =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
                            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 执行等待的请求</span>
                            onRefreshed().then(resolve).<span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)">(reject);
                        })
                    }
                    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
                }

                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> code判断: 重新登录</span>
                <span style="color: rgba(0, 0, 255, 1)">if</span> (data.code == 403<span style="color: rgba(0, 0, 0, 1)">) {
                    restartLogin()
                    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
                }

                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 将结果抛出</span>
<span style="color: rgba(0, 0, 0, 1)">                resolve(data)
            },
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">请求失败</span>
            fail: (err) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
                operate.toast({
                    title: </span>'网络连接错误'<span style="color: rgba(0, 0, 0, 1)">,
                    icon: </span>'loading'<span style="color: rgba(0, 0, 0, 1)">
                })
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 将结果抛出</span>
<span style="color: rgba(0, 0, 0, 1)">                reject(err)
                </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">
                .catch(err=&gt;{
                          console.log(err)
                      })
                </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
            },
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">请求完成</span>
<span style="color: rgba(0, 0, 0, 1)">            complete() {
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">隐藏加载</span>
                <span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">hideLoading) {
                    uni.hideLoading();
                }
            }
        })
    })
}

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 执行等待的请求</span>
const onRefreshed = () =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> Promise((resolve, reject) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
        let item </span>=<span style="color: rgba(0, 0, 0, 1)"> requestQueue.shift();
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> console.warn('执行等待的请求', item);</span>
<span style="color: rgba(0, 0, 0, 1)">        request({
            url: item.url,
            method: item.method,
            hideLoading: </span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">,
            data: item.data,
        }).then(resolve).</span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)">(reject)
    });
}

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 添加请求到队列</span>
const addRequestQueue = (url : string, method : object, data : object, header : object) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
    requestQueue.push({
        url,
        method,
        data,
        header
    })
}

</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">*
 * @description:  登录刷新 token 请求接口
 * @return
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
export const flushToken </span>= <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> () {
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> Promise((resolve, errs) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
        uni.request({
            url: operate.api() </span>+ '/app-api/refresh-token-刷新接口地址'<span style="color: rgba(0, 0, 0, 1)">,
            method: </span>'POST'<span style="color: rgba(0, 0, 0, 1)">,
            header: {
                </span>'Content-Type': 'application/json'<span style="color: rgba(0, 0, 0, 1)">
            },
            data: {
                refreshToken: store.getters[</span>'flushToken'<span style="color: rgba(0, 0, 0, 1)">],
            },
            success(res) {
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> console.warn('刷新令牌', res.data);</span>
                let data =<span style="color: rgba(0, 0, 0, 1)"> res.data as any

                </span><span style="color: rgba(0, 0, 255, 1)">if</span> (data.code == 0<span style="color: rgba(0, 0, 0, 1)">) {
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">登录刷新</span>
                    store.commit("user/REFRESH_TOKEN"<span style="color: rgba(0, 0, 0, 1)">, {
                        accessToken: data.data.accessToken,
                        refreshToken: data.data.refreshToken
                    });

                    resolve(</span>'刷新令牌成功'<span style="color: rgba(0, 0, 0, 1)">)
                    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">
                }

                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">登录 失效</span>
                <span style="color: rgba(0, 0, 255, 1)">if</span> (data.code == 401<span style="color: rgba(0, 0, 0, 1)">) {
                    operate.showModal({
                        title: </span>'您的登陆已过期'<span style="color: rgba(0, 0, 0, 1)">,
                        confirmText: </span>'重新登录'<span style="color: rgba(0, 0, 0, 1)">,
                        showCancel: </span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">,
                    }).then((_res) </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> {
                        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">清除登录信息</span>
                        store.commit('user/LOG_OUT'<span style="color: rgba(0, 0, 0, 1)">);
                        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">去登录页</span>
                        restartLogin(<span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">)
                    })
                }
            },
            fail: (err) </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> {
                console.error(</span>'刷新令牌失败'<span style="color: rgba(0, 0, 0, 1)">, err);
                errs(err)
            },
            complete() {
                isRefreshing </span>= <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">
            }
        })
    })
}

</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">*
 * @description: 请求-拦截器
 * @return
 * 通过拦截器，实现请求前后的数据监听
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> const requestBlocker = function () {</span><span style="color: rgba(0, 128, 0, 1)">
//</span><span style="color: rgba(0, 128, 0, 1)">     uni.addInterceptor('request', {</span><span style="color: rgba(0, 128, 0, 1)">
//</span><span style="color: rgba(0, 128, 0, 1)">         invoke(args) {</span><span style="color: rgba(0, 128, 0, 1)">
//</span><span style="color: rgba(0, 128, 0, 1)">             console.log("求前后的数据监听",args);</span><span style="color: rgba(0, 128, 0, 1)">
//</span><span style="color: rgba(0, 128, 0, 1)">         }</span><span style="color: rgba(0, 128, 0, 1)">
//</span><span style="color: rgba(0, 128, 0, 1)">     })</span><span style="color: rgba(0, 128, 0, 1)">
//</span><span style="color: rgba(0, 128, 0, 1)"> }</span>


<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">*
 * @description: 判断有无网络验证
 * @return
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
const noneNetwork </span>= <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> () {
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> Promise((resolve, reject) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
        uni.getNetworkType({
            success(res) {
                </span><span style="color: rgba(0, 0, 255, 1)">if</span> (res.networkType == 'none'<span style="color: rgba(0, 0, 0, 1)">) {
                    uni.showModal({
                        title: </span>'没有网络'<span style="color: rgba(0, 0, 0, 1)">,
                        content: </span>'请检查您的网络'<span style="color: rgba(0, 0, 0, 1)">,
                        showCancel: </span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">,
                        success: (_res) </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> {
                            resolve(</span>"无网络确定-返回"<span style="color: rgba(0, 0, 0, 1)">)
                        }
                    });
                }
            },
            complete() {
                reject(</span>'取消-加载圈'<span style="color: rgba(0, 0, 0, 1)">)
            }
        })
    })
}

</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">*
 * @description: 重新登录（统一方法）
 * @return
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
const restartLogin </span>= <span style="color: rgba(0, 0, 255, 1)">function</span> (toastShow = <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">) {
    </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (toastShow) {
        operate.toast({
            title: </span>"登录超时!请重新登录"<span style="color: rgba(0, 0, 0, 1)">
        })
    }
    setTimeout(() </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> {
        route({
            url: </span>'/pages/logIn/logIn'<span style="color: rgba(0, 0, 0, 1)">,
            type: </span>"navigateTo"<span style="color: rgba(0, 0, 0, 1)">,
            login: </span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">,
        })
    }, </span>500<span style="color: rgba(0, 0, 0, 1)">)
}</span></pre>
</div>
<span class="cnblogs_code_collapse">requset.ts </span></div>
<p>&nbsp;</p>
<p class="md-end-block md-p md-focus"><span class="md-plain">缺点：在多个请求同时进行，会出现多次调用（刷新token）的情况。</span></p>
<p class="md-end-block md-p"><span class="md-tab"> <span class="md-plain">当前使用 <span class="md-pair-s "><strong>isRefreshing</strong><span class="md-plain"> 判断请求刷新转态，没结束不能在调用刷新接口，对于复数请求，还是会多次请求刷新。</span></span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">下图测试为，同时请求4个接口</span></p>
<p class="md-end-block md-p"><span class="md-plain"><img src="https://img2024.cnblogs.com/blog/2237618/202412/2237618-20241231114212173-329051253.png" alt=""></span></p>
<p><span class="md-plain md-expand">项目地址：<span class="md-link md-pair-s md-expand"><a href="https://gitee.com/jielov/uni-app-tabbar" rel="noopener nofollow">https://gitee.com/jielov/uni-app-tabbar</a></span></span></p>
</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/lovejielive/" target="_blank">虚乄</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/lovejielive/p/18643655" target="_blank">https://www.cnblogs.com/lovejielive/p/18643655</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.02141459193402778" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-31 11:47">2024-12-31 11:47</span>&nbsp;
<a href="https://www.cnblogs.com/lovejielive">虚乄</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18643655" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18643655);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18643655', targetLink: 'https://www.cnblogs.com/lovejielive/p/18643655', title: 'uniapp请求封装-token无感刷新' })">举报</a>
</div>
        