
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/town-master-da/p/18800754" title="发布于 2025-03-30 16:16">
    <span role="heading" aria-level="2">进程间通讯代码实例以及相关函数释义</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="进程间通讯代码实例以及相关函数释义">进程间通讯代码实例以及相关函数释义</h1>
<p>练习：用户设计两个程序，要求进程A中自定义信号SIGUSR1的相应借口，要求进程B每隔一段时间向进程A发送SIGUSR1信号，测试进程A是否可以执行关联的相应接口。</p>
<h2 id="一processa中设置信号处理handler">一、processA中设置信号处理handler</h2>
<pre><code class="language-c">#include &lt;signal.h&gt;
#include &lt;stdio.h&gt;

// 信号处理函数
void handler(int sig)
{
    switch (sig)
    {
        case SIGUSR1:
            printf("收到user1信号\n");
            break;
        default:
            break;
    }
}

int main(int argc, char const *argv[])
{
    signal(SIGUSR1, handler); // 设置信号处理函数
    while (1);
    return 0;
}
</code></pre>
<p>linux手册第七章的signal词条，用户可以自定义信号行为的有两个，<strong>SIGUSR1</strong>和<strong>SIGUSR2</strong>，这里自定义<strong>SIGUSR1</strong>：</p>
<blockquote>
<pre><code>   Signal      Standard   Action   Comment
   ────────────────────────────────────────────────────────────────────────
   SIGABRT      P1990      Core    Abort signal from abort(3)
   SIGALRM      P1990      Term    Timer signal from alarm(2)
   SIGBUS       P2001      Core    Bus error (bad memory access)
   SIGCHLD      P1990      Ign     Child stopped or terminated
   SIGCLD         -        Ign     A synonym for SIGCHLD
   SIGCONT      P1990      Cont    Continue if stopped
   SIGEMT         -        Term    Emulator trap
   SIGFPE       P1990      Core    Floating-point exception
   SIGHUP       P1990      Term    Hangup detected on controlling terminal
                                   or death of controlling process
   SIGILL       P1990      Core    Illegal Instruction
   SIGINFO        -                A synonym for SIGPWR
   SIGINT       P1990      Term    Interrupt from keyboard
   SIGIO          -        Term    I/O now possible (4.2BSD)
   SIGIOT         -        Core    IOT trap. A synonym for SIGABRT
   SIGKILL      P1990      Term    Kill signal
   SIGLOST        -        Term    File lock lost (unused)
   SIGPIPE      P1990      Term    Broken pipe: write to pipe with no
                                   readers; see pipe(7)
   SIGPOLL      P2001      Term    Pollable event (Sys V);
                                   synonym for SIGIO
   SIGPROF      P2001      Term    Profiling timer expired
   SIGPWR         -        Term    Power failure (System V)
   SIGQUIT      P1990      Core    Quit from keyboard
   SIGSEGV      P1990      Core    Invalid memory reference

   SIGSTKFLT      -        Term    Stack fault on coprocessor (unused)
   SIGSTOP      P1990      Stop    Stop process
   SIGTSTP      P1990      Stop    Stop typed at terminal
   SIGSYS       P2001      Core    Bad system call (SVr4);
                                   see also seccomp(2)
   SIGTERM      P1990      Term    Termination signal
   SIGTRAP      P2001      Core    Trace/breakpoint trap
   SIGTTIN      P1990      Stop    Terminal input for background process
   SIGTTOU      P1990      Stop    Terminal output for background process
   SIGUNUSED      -        Core    Synonymous with SIGSYS
   SIGURG       P2001      Ign     Urgent condition on socket (4.2BSD)
   SIGUSR1      P1990      Term    User-defined signal 1
   SIGUSR2      P1990      Term    User-defined signal 2
   SIGVTALRM    P2001      Term    Virtual alarm clock (4.2BSD)
   SIGXCPU      P2001      Core    CPU time limit exceeded (4.2BSD);
                                   see setrlimit(2)
   SIGXFSZ      P2001      Core    File size limit exceeded (4.2BSD);
                                   see setrlimit(2)
   SIGWINCH       -        Ign     Window resize signal (4.3BSD, Sun)
</code></pre>
</blockquote>
<p>linux第2章说明了signal函数的使用：</p>
<blockquote>
<p>SIGNAL(2)                                                  Linux Programmer's Manual                                                 SIGNAL(2)</p>
<p>NAME<br>
signal - ANSI C signal handling</p>
<p>SYNOPSIS</p>
<pre><code class="language-c">    #include &lt;signal.h&gt;   
	typedef void (*sighandler_t)(int);

    sighandler_t signal(int signum, sighandler_t handler);
</code></pre>
<p>DESCRIPTION</p>
<p>signal() sets the disposition of the signal signum to handler, which is either SIG_IGN, SIG_DFL, or the address of a programmer-defined function (a "signal handler").</p>
</blockquote>
<p>sighandler _t 规定了传入的信号处理函数的类型，内部为信号传参，返回值为void。当程序收到<strong>SIGUSR1</strong>信号时handler就会被触发。</p>
<h2 id="二processb中发送信号">二、processB中发送信号</h2>
<pre><code class="language-c">#include &lt;sys/types.h&gt;
#include &lt;signal.h&gt;
#include &lt;unistd.h&gt;

int main(int argc, char const *argv[])
{

    while (1)
    {
        kill(4778, SIGUSR1);  // 提前查询A进程的进程pid
        sleep(1);
    }
    return 0;
}
</code></pre>
<p>man 2 kill：</p>
<blockquote>
<p>KILL(2)                                                    Linux Programmer's Manual                                                   KILL(2)</p>
<p>NAME<br>
kill - send signal to a process</p>
<p>SYNOPSIS<br>
#include &lt;sys/types.h&gt;<br>
#include &lt;signal.h&gt;</p>
<p>​       int kill(pid_t pid, int sig);</p>
<p>​       Feature Test Macro Requirements for glibc (see feature_test_macros(7)):</p>
<p>​       kill(): _POSIX_C_SOURCE</p>
<p>DESCRIPTION<br>
The kill() system call can be used to send any signal to any process group or process.</p>
</blockquote>
<p>测试程序</p>
<blockquote>
<p>dada@dada-virtual-machine:~/test$ ./processA<br>
收到user1信号<br>
收到user1信号<br>
收到user1信号<br>
收到user1信号<br>
收到user1信号<br>
收到user1信号</p>
<p>...</p>
</blockquote>
<p>测试成功</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.00158928596875" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-30 16:16">2025-03-30 16:16</span>&nbsp;
<a href="https://www.cnblogs.com/town-master-da">小镇青年达师傅</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18800754" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18800754);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18800754', targetLink: 'https://www.cnblogs.com/town-master-da/p/18800754', title: '进程间通讯代码实例以及相关函数释义' })">举报</a>
</div>
        