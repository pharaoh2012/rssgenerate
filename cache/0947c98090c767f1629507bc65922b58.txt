
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/flamesky/p/18666060" title="发布于 2025-01-11 17:57">
    <span role="heading" aria-level="2">unity assetbundle 加载图集的所有sprite图片</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div class="fa81">
<div class="fbb737a4">&nbsp;</div>
</div>
<div class="f9bf7997 d7dc56a8 c05b5566">
<div class="ds-markdown ds-markdown--block">
<p>在 Unity 中，使用 AssetBundle 加载图集（Atlas）并获取其中的所有 Sprite 图片，通常需要以下步骤：</p>
<hr>
<h3><strong>1. 打包图集到 AssetBundle</strong></h3>
<p>首先，确保你的图集（Atlas）已经被打包到 AssetBundle 中。图集通常是一个包含多个 Sprite 的纹理（Texture），并且每个 Sprite 都有对应的元数据（如 UV 坐标、Pivot 等）。</p>
<hr>
<h3><strong>2. 加载 AssetBundle</strong></h3>
<p>使用&nbsp;<code>AssetBundle.LoadFromFile</code>&nbsp;或&nbsp;<code>AssetBundle.LoadFromMemoryAsync</code>&nbsp;等方法加载 AssetBundle。</p>
<div class="md-code-block">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> UnityEngine;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Collections;

</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> LoadSpriteFromAssetBundle : MonoBehaviour
{
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> AssetBundle assetBundle;

    IEnumerator Start()
    {
        </span><span style="color: rgba(0, 0, 255, 1)">string</span> path = Application.streamingAssetsPath + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/your_assetbundle_name</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">var</span> request =<span style="color: rgba(0, 0, 0, 1)"> AssetBundle.LoadFromFileAsync(path);
        </span><span style="color: rgba(0, 0, 255, 1)">yield</span> <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> request;

        assetBundle </span>=<span style="color: rgba(0, 0, 0, 1)"> request.assetBundle;
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (assetBundle == <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
        {
            Debug.LogError(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Failed to load AssetBundle</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            </span><span style="color: rgba(0, 0, 255, 1)">yield</span> <span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 加载图集中的所有 Sprite</span>
<span style="color: rgba(0, 0, 0, 1)">        LoadSpritesFromAtlas();
    }
}</span></pre>
</div>
</div>
<hr>
<h3><strong>3. 加载图集中的所有 Sprite</strong></h3>
<p>图集通常是一个包含多个 Sprite 的纹理（Texture）。你可以通过以下方式加载图集中的所有 Sprite：</p>
<h4><strong>方法 1：使用&nbsp;<code>LoadAllAssets&lt;Sprite&gt;</code></strong></h4>
<p>如果图集中的 Sprite 被打包为独立的资源，可以使用&nbsp;<code>LoadAllAssets&lt;Sprite&gt;</code>&nbsp;方法加载所有 Sprite。</p>
<div class="md-code-block">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> LoadSpritesFromAtlas()
{
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 加载图集中的所有 Sprite</span>
    Sprite[] sprites = assetBundle.LoadAllAssets&lt;Sprite&gt;<span style="color: rgba(0, 0, 0, 1)">();

    </span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (Sprite sprite <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> sprites)
    {
        Debug.Log(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Loaded Sprite: </span><span style="color: rgba(128, 0, 0, 1)">"</span> +<span style="color: rgba(0, 0, 0, 1)"> sprite.name);
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 可以将 Sprite 赋值给 UI Image 或其他用途</span>
<span style="color: rgba(0, 0, 0, 1)">    }
}</span></pre>
</div>
</div>
<h4><strong>方法 2：加载图集纹理并手动分割</strong></h4>
<p>如果图集是一个单独的纹理，并且 Sprite 的元数据没有被打包到 AssetBundle 中，你需要手动加载纹理并根据 UV 坐标分割 Sprite。</p>
<div class="md-code-block">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> LoadSpritesFromAtlas()
{
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 加载图集纹理</span>
    Texture2D atlasTexture = assetBundle.LoadAsset&lt;Texture2D&gt;(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">atlas_texture_name</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 假设你知道图集中每个 Sprite 的 UV 坐标和大小</span>
    Rect[] spriteRects = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Rect[]
    {
        </span><span style="color: rgba(0, 0, 255, 1)">new</span> Rect(<span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">64</span>, <span style="color: rgba(128, 0, 128, 1)">64</span>), <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Sprite 1 的 UV 坐标和大小</span>
        <span style="color: rgba(0, 0, 255, 1)">new</span> Rect(<span style="color: rgba(128, 0, 128, 1)">64</span>, <span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">64</span>, <span style="color: rgba(128, 0, 128, 1)">64</span>), <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Sprite 2 的 UV 坐标和大小
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 添加更多 Sprite 的 UV 坐标</span>
<span style="color: rgba(0, 0, 0, 1)">    };

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建 Sprite</span>
    <span style="color: rgba(0, 0, 255, 1)">foreach</span> (Rect rect <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> spriteRects)
    {
        Sprite sprite </span>= Sprite.Create(atlasTexture, rect, <span style="color: rgba(0, 0, 255, 1)">new</span> Vector2(<span style="color: rgba(128, 0, 128, 1)">0.5f</span>, <span style="color: rgba(128, 0, 128, 1)">0.5f</span><span style="color: rgba(0, 0, 0, 1)">));
        Debug.Log(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Created Sprite: </span><span style="color: rgba(128, 0, 0, 1)">"</span> +<span style="color: rgba(0, 0, 0, 1)"> sprite.name);
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 可以将 Sprite 赋值给 UI Image 或其他用途</span>
<span style="color: rgba(0, 0, 0, 1)">    }
}</span></pre>
</div>
</div>
<hr>
<h3><strong>4. 卸载 AssetBundle</strong></h3>
<div class="md-code-block">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> OnDestroy()
{
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (assetBundle != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        assetBundle.Unload(</span><span style="color: rgba(0, 0, 255, 1)">false</span>); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> false 表示不卸载从 AssetBundle 加载的资源</span>
<span style="color: rgba(0, 0, 0, 1)">    }
}</span></pre>
</div>
</div>
<hr>
<h3><strong>注意事项</strong></h3>
<ol>
<li>
<p><strong>图集打包方式</strong>：</p>
<ul>
<li>
<p>如果图集中的 Sprite 被打包为独立的资源，可以直接使用&nbsp;<code>LoadAllAssets&lt;Sprite&gt;</code>。</p>
</li>
<li>
<p>如果图集是一个单独的纹理，需要手动分割 Sprite。</p>
</li>
</ul>
</li>
<li>
<p><strong>AssetBundle 依赖</strong>：</p>
<ul>
<li>
<p>如果图集依赖于其他资源（如材质、Shader 等），确保这些依赖资源也被正确加载。</p>
</li>
</ul>
</li>
<li>
<p><strong>内存管理</strong>：</p>
<ul>
<li>
<p>加载 AssetBundle 后，及时卸载不再需要的资源，避免内存泄漏。</p>
</li>
</ul>
</li>
<li>
<p><strong>异步加载</strong>：</p>
<ul>
<li>
<p>如果 AssetBundle 较大，建议使用异步加载（如&nbsp;<code>LoadFromFileAsync</code>）以避免卡顿。</p>
</li>
</ul>
</li>
</ol><hr>
<h3><strong>完整示例</strong></h3>
<p>以下是一个完整的示例代码：</p>
<div class="md-code-block">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> UnityEngine;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Collections;

</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> LoadSpriteFromAssetBundle : MonoBehaviour
{
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> AssetBundle assetBundle;

    IEnumerator Start()
    {
        </span><span style="color: rgba(0, 0, 255, 1)">string</span> path = Application.streamingAssetsPath + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/your_assetbundle_name</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">var</span> request =<span style="color: rgba(0, 0, 0, 1)"> AssetBundle.LoadFromFileAsync(path);
        </span><span style="color: rgba(0, 0, 255, 1)">yield</span> <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> request;

        assetBundle </span>=<span style="color: rgba(0, 0, 0, 1)"> request.assetBundle;
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (assetBundle == <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
        {
            Debug.LogError(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Failed to load AssetBundle</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            </span><span style="color: rgba(0, 0, 255, 1)">yield</span> <span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 加载图集中的所有 Sprite</span>
<span style="color: rgba(0, 0, 0, 1)">        LoadSpritesFromAtlas();
    }

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> LoadSpritesFromAtlas()
    {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 加载图集中的所有 Sprite</span>
        Sprite[] sprites = assetBundle.LoadAllAssets&lt;Sprite&gt;<span style="color: rgba(0, 0, 0, 1)">();

        </span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (Sprite sprite <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> sprites)
        {
            Debug.Log(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Loaded Sprite: </span><span style="color: rgba(128, 0, 0, 1)">"</span> +<span style="color: rgba(0, 0, 0, 1)"> sprite.name);
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 可以将 Sprite 赋值给 UI Image 或其他用途</span>
<span style="color: rgba(0, 0, 0, 1)">        }
    }

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> OnDestroy()
    {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (assetBundle != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
        {
            assetBundle.Unload(</span><span style="color: rgba(0, 0, 255, 1)">false</span>); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> false 表示不卸载从 AssetBundle 加载的资源</span>
<span style="color: rgba(0, 0, 0, 1)">        }
    }
}</span></pre>
</div>
<p>&nbsp;</p>
</div>
<p>通过以上方法，你可以从 AssetBundle 中加载图集并获取其中的所有 Sprite 图片。</p>
</div>
</div>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5102978074259259" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-11 17:58">2025-01-11 17:57</span>&nbsp;
<a href="https://www.cnblogs.com/flamesky">Flamesky</a>&nbsp;
阅读(<span id="post_view_count">41</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18666060" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18666060);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18666060', targetLink: 'https://www.cnblogs.com/flamesky/p/18666060', title: 'unity assetbundle 加载图集的所有sprite图片' })">举报</a>
</div>
	