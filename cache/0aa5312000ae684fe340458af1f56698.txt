
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/yuzhihui/p/18657004" title="发布于 2025-01-07 10:37">
    <span role="heading" aria-level="2">JavaScript 实现支持过期时间的数据缓存功能</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2023.cnblogs.com/blog/642487/202501/642487-20250107103524850-995108640.jpg" alt="JavaScript 实现支持过期时间的数据缓存功能" class="desc_img">
        JavaScript 实现支持过期时间的数据缓存功能
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="javascript-实现支持过期时间的数据缓存功能">JavaScript 实现支持过期时间的数据缓存功能</h1>
<p>要在 JavaScript 中实现数据缓存功能并支持设置过期时间，可以使用 <code>localStorage</code>、<code>sessionStorage</code> 或内存对象（如 <code>Map</code> 或普通对象）来存储数据，并为每个缓存项设置一个过期时间。以下是一个简单的实现示例：</p>
<hr>
<h2 id="javascript-实现支持过期时间的数据缓存功能-1"><strong>JavaScript 实现支持过期时间的数据缓存功能</strong></h2>
<h3 id="1-使用-localstorage-实现持久缓存"><strong>1. 使用 <code>localStorage</code> 实现持久缓存</strong></h3>
<pre><code class="language-javascript">const Cache = {
  /**
   * 设置缓存
   * @param {string} key - 缓存键
   * @param {*} value - 缓存值
   * @param {number} ttl - 缓存时间（毫秒）
   */
  set(key, value, ttl) {
    const data = {
      value,
      expiry: ttl ? Date.now() + ttl : null, // 计算过期时间
    };
    localStorage.setItem(key, JSON.stringify(data));
  },

  /**
   * 获取缓存
   * @param {string} key - 缓存键
   * @returns {*} 缓存值或 null（如果过期或不存在）
   */
  get(key) {
    const data = localStorage.getItem(key);
    if (!data) return null;

    try {
      const { value, expiry } = JSON.parse(data);
      if (expiry &amp;&amp; Date.now() &gt; expiry) {
        localStorage.removeItem(key); // 过期删除缓存
        return null;
      }
      return value;
    } catch (e) {
      console.warn("缓存数据解析失败", e);
      return null;
    }
  },

  /**
   * 删除缓存
   * @param {string} key - 缓存键
   */
  remove(key) {
    localStorage.removeItem(key);
  },

  /**
   * 清空所有缓存
   */
  clear() {
    localStorage.clear();
  },
};

// 使用示例
Cache.set("username", "Alice", 5000); // 设置缓存5秒后过期
console.log(Cache.get("username")); // 5秒内返回 'Alice'
setTimeout(() =&gt; console.log(Cache.get("username")), 6000); // 6秒后返回 null
</code></pre>
<h4 id="注意事项"><strong>注意事项</strong></h4>
<ul>
<li><code>localStorage</code> 只能存储字符串，因此要使用 <code>JSON.stringify</code> 和 <code>JSON.parse</code> 进行序列化和反序列化。</li>
<li><code>localStorage</code> 的存储空间一般有限（大约 5MB）。</li>
<li>如果是跨页面使用，请确保在相同的域名下。</li>
</ul>
<hr>
<h3 id="2-使用-sessionstorage-实现数据缓存适合页面级临时存储"><strong>2. 使用 <code>sessionStorage</code> 实现数据缓存（适合页面级临时存储）</strong></h3>
<p><code>sessionStorage</code> 是一种浏览器存储机制，它的特点是数据仅在<strong>页面会话（session）</strong> 期间有效，页面关闭后数据会被清除。</p>
<pre><code class="language-javascript">const SessionCache = {
  /**
   * 设置缓存
   * @param {string} key - 缓存键
   * @param {*} value - 缓存值
   * @param {number} ttl - 缓存时间（毫秒）
   */
  set(key, value, ttl) {
    const data = {
      value,
      expiry: ttl ? Date.now() + ttl : null, // 计算过期时间
    };
    sessionStorage.setItem(key, JSON.stringify(data));
  },

  /**
   * 获取缓存
   * @param {string} key - 缓存键
   * @returns {*} 缓存值或 null（如果过期或不存在）
   */
  get(key) {
    const data = sessionStorage.getItem(key);
    if (!data) return null;

    try {
      const { value, expiry } = JSON.parse(data);
      if (expiry &amp;&amp; Date.now() &gt; expiry) {
        sessionStorage.removeItem(key); // 缓存已过期，删除
        return null;
      }
      return value;
    } catch (e) {
      console.warn("缓存数据解析失败:", e);
      return null;
    }
  },

  /**
   * 删除缓存
   * @param {string} key - 缓存键
   */
  remove(key) {
    sessionStorage.removeItem(key);
  },

  /**
   * 清空所有缓存
   */
  clear() {
    sessionStorage.clear();
  },
};

// **使用示例**
// 设置缓存，5秒后过期
SessionCache.set("userToken", "abc123", 5000);

// 获取缓存
console.log(SessionCache.get("userToken")); // 5秒内返回 'abc123'

// 5秒后尝试获取缓存
setTimeout(() =&gt; {
  console.log(SessionCache.get("userToken")); // 返回 null
}, 6000);
</code></pre>
<h4 id="注意事项-1"><strong>注意事项</strong></h4>
<ul>
<li><code>sessionStorage</code> 数据在<strong>页面关闭或会话结束</strong>时自动清除。</li>
<li>在不同的标签页中，<code>sessionStorage</code> 是<strong>独立的</strong>（不会共享）。</li>
<li><code>sessionStorage</code> 的存储空间一般为<strong>5MB</strong>左右。</li>
<li>数据存储在 <code>sessionStorage</code> 时必须经过 <code>JSON.stringify</code> 和 <code>JSON.parse</code> 处理。</li>
</ul>
<hr>
<h3 id="3-使用内存对象实现轻量缓存适合短期缓存"><strong>3. 使用内存对象实现轻量缓存（适合短期缓存）</strong></h3>
<pre><code class="language-javascript">class MemoryCache {
  constructor() {
    this.cache = new Map();
  }

  /**
   * 设置缓存
   * @param {string} key - 缓存键
   * @param {*} value - 缓存值
   * @param {number} ttl - 缓存时间（毫秒）
   */
  set(key, value, ttl) {
    const expiry = ttl ? Date.now() + ttl : null;
    this.cache.set(key, { value, expiry });
  }

  /**
   * 获取缓存
   * @param {string} key - 缓存键
   * @returns {*} 缓存值或 null（如果过期或不存在）
   */
  get(key) {
    const item = this.cache.get(key);
    if (!item) return null;

    if (item.expiry &amp;&amp; Date.now() &gt; item.expiry) {
      this.cache.delete(key); // 缓存过期，删除
      return null;
    }
    return item.value;
  }

  /**
   * 删除缓存
   * @param {string} key - 缓存键
   */
  remove(key) {
    this.cache.delete(key);
  }

  /**
   * 清空所有缓存
   */
  clear() {
    this.cache.clear();
  }
}

// 使用示例
const memCache = new MemoryCache();
memCache.set("token", "abc123", 3000); // 设置缓存3秒后过期
console.log(memCache.get("token")); // 3秒内返回 'abc123'
setTimeout(() =&gt; console.log(memCache.get("token")), 4000); // 4秒后返回 null
</code></pre>
<h2 id="三种方式对比"><strong>三种方式对比</strong></h2>
<table>
<thead>
<tr>
<th>特性</th>
<th><code>localStorage</code></th>
<th><code>sessionStorage</code></th>
<th>内存缓存 (Map)</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>持久性</strong></td>
<td>持久存储，页面刷新或关闭后仍保留</td>
<td>页面会话结束（即关闭页面）时丢失</td>
<td>页面刷新后丢失</td>
</tr>
<tr>
<td><strong>共享性</strong></td>
<td>同一域名下所有页面共享</td>
<td>仅当前标签页可用</td>
<td>仅当前标签页可用</td>
</tr>
<tr>
<td><strong>性能</strong></td>
<td>读取稍慢（I/O 操作）</td>
<td>读取稍慢（I/O 操作）</td>
<td>更快（内存存取）</td>
</tr>
<tr>
<td><strong>适用场景</strong></td>
<td>长期存储、页面级数据</td>
<td>临时存储页面状态、会话数据</td>
<td>短期存储、临时数据</td>
</tr>
<tr>
<td><strong>存储大小限制</strong></td>
<td>约 5MB</td>
<td>约 5MB</td>
<td>取决于可用内存</td>
</tr>
</tbody>
</table>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.07105323081944444" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-09 14:38">2025-01-07 10:37</span>&nbsp;
<a href="https://www.cnblogs.com/yuzhihui">飞仔FeiZai</a>&nbsp;
阅读(<span id="post_view_count">25</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18657004" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18657004);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18657004', targetLink: 'https://www.cnblogs.com/yuzhihui/p/18657004', title: 'JavaScript 实现支持过期时间的数据缓存功能' })">举报</a>
</div>
        