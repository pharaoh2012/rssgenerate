
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/jsnoah/p/-/guide_typescript-preface" title="发布于 2025-03-27 14:03">
    <span role="heading" aria-level="2">前言 - TypeScript 入门指南</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>本系列博文的<strong>目标</strong>是帮助 JavaScript 开发者<strong>快速</strong>学会 TypeScript，促进 JavaScript 在中文社区良好发展。编写过程中我们<strong>严肃</strong>参考了下面链接的资料，感谢这些文档，特别是它们的中文版。</p>
<ul>
<li><a href="https://www.typescriptlang.org/docs" target="_blank" rel="noopener nofollow">https://www.typescriptlang.org/docs</a></li>
<li><a href="https://www.tslang.cn/docs/home.html" target="_blank" rel="noopener nofollow">https://www.tslang.cn/docs/home.html</a></li>
</ul>
<p>本系列博文并不会涉及 JavaScript 的讲解，对 TypeScript 定义是 JavaScript 的<strong>静态类型检查器</strong>。期待本系列博文能对你有所助用。</p>
<h3 id="类型">类型</h3>
<p>我们认为首先需要澄清的是，TypeScript 的意义不是为 JavaScript 引入了类型，或者说规范了类型的使用。</p>
<p>JavaScript 从来就有一套完整的类型体系。如果给到你 JavaScript 没有类型或者类型无所谓的幻觉，那很有可能是因为你不掌握 JavaScript 的动态类型转换。</p>
<p>比如，下面就是一个经常用来诟病 JavaScript 类型的例子：</p>
<pre><code class="language-javascript">let width = 42, depth = "42";

console.log(width == depth); // true
</code></pre>
<p>站在<strong>静态</strong>类型的角度，这里的运行结果让人感到错愕。两个类型完全不同的值怎么可以相等，这难道是要挂羊头卖狗肉吗。</p>
<p>但如果你了解到这里的处理方式和<strong>强制类型转换</strong>的规则，就不会对它有什么神奇的感觉。相反，它在代码表达上简洁明了。</p>
<h3 id="意义">意义</h3>
<p>我们认为 TypeScript 的意义在于它为 JavaScript <strong>编码时</strong>提供了类型信息的回馈。</p>
<p>举例来说，现在给你一个 API <code>MyFun</code>，但并没有对它的进一步信息，又或你不想费力了解它的使用方法。</p>
<p>传统 JavaScript 的做法是具体用用它。根据用例的反馈，来倒推对它的使用方式。糟糕但没办法的选择。</p>
<p>TypeScript 改善了这种窘迫情形，它通过<strong>强制类型</strong>可以给到你 <code>MyFun</code> 的使用信息——由 API 创建者定义。</p>
<p>比如，假定 <code>MyFun</code> 的定义是携有一个参数的函数。那么编码时，TypeScript 可以告知你这个参数是什么类型。如果它是一个对象，还会为你进一步描述这个对象的结构——都有哪些属性。</p>
<h3 id="学习">学习</h3>
<p>我们不认为 TypeScript 是一门编程语言。它作为一款 JavaScript <strong>开发工具</strong>，为改进 JavaScript 开发体验而生，旨在提高 JavaScript 开发效率。</p>
<p>诚如它的名字所暗示的那般，TypeScript 的功能是为 JavaScript 引入了类型安全。这种类型安全具体到代码层面，就是它那引入的所谓类型注解。</p>
<p>换句话说，我们认为对 TypeScript 的学习除了掌握它的类型注解语法外，更重要的是项目开发过程中的类型思维的培育。</p>
<p>祝您学习愉快！</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.8785018735474537" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-09 13:56">2025-03-27 14:03</span>&nbsp;
<a href="https://www.cnblogs.com/jsnoah">jsnoah</a>&nbsp;
阅读(<span id="post_view_count">39</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18795890" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18795890);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18795890', targetLink: 'https://www.cnblogs.com/jsnoah/p/-/guide_typescript-preface', title: '前言 - TypeScript 入门指南' })">举报</a>
</div>
        