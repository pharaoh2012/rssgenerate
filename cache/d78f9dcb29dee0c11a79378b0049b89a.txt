<!----> <meta itemprop="headline" content="从0到1构建 UniApp + Vue3 + TypeScript 移动端跨平台开源脚手架"> <meta itemprop="keywords" content="uni-app,Vue.js,TypeScript"> <meta itemprop="datePublished" content="2024-12-16T16:34:53.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="有来技术"> <meta itemprop="url" content="https://juejin.cn/user/4187394044331261"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-7cdd11fb="">
            从0到1构建 UniApp + Vue3 + TypeScript 移动端跨平台开源脚手架
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-7cdd11fb=""><div class="author-info-box" data-v-7cdd11fb=""><div class="author-name" data-v-7cdd11fb=""><a href="/user/4187394044331261/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-7cdd11fb=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    有来技术
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-7cdd11fb=""><time datetime="2024-12-16T16:34:53.000Z" title="Mon Dec 16 2024 16:34:53 GMT+0000 (Coordinated Universal Time)" class="time" data-v-7cdd11fb="">
                    2024-12-16
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-7cdd11fb=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-7cdd11fb=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-7cdd11fb=""></circle></svg> <span class="views-count" data-v-7cdd11fb="">
                    4,330
                  </span> <span class="read-time" data-v-7cdd11fb=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-7cdd11fb=""><rect width="16" height="16" fill="none" data-v-7cdd11fb=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-7cdd11fb=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-7cdd11fb=""></path></svg>
                    阅读20分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-7cdd11fb=""></div> <!----> <!----></div> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-7cdd11fb=""><div class="article-viewer markdown-body result"><p>项目源码地址：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgitee.com%2Fyoulaiorg%2Fvue-uniapp-template" target="_blank" title="https://gitee.com/youlaiorg/vue-uniapp-template" ref="nofollow noopener noreferrer">vue-uniapp-template</a></p>
<p>开局两张图，先看一下初期登录的效果图，内容和UI正在升级中...
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ce2befecbadb432b9c28ed6d3974d21d~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=xlBuZiJ%2BAShK1BNwnqJs8KOOcRQ%3D" alt="vue-uniapp-template.jpg" loading="lazy"></p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/1da6c0dd68e345149a7f0255fd5cc2a5~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=h3HLFHTcmKiJK4NY%2F6eZ8EiG5Ds%3D" alt="login" loading="lazy"></p>
<h2 data-id="heading-0">前言</h2>
<p>本文旨在从零开始，通过 vue-cli 构建一个基于 Vue3 和 TypeScript 的 UniApp 跨移动端开源脚手架模板。通过详实的步骤讲解，从环境配置到项目部署，全面涵盖开发中的各个重要环节，致力于打造高效的开发工具，提升项目质量和开发效率。</p>
<h2 data-id="heading-1">环境准备</h2>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgitee.com%2Fyoulaiorg%2Fvue-uniapp-template" target="_blank" title="https://gitee.com/youlaiorg/vue-uniapp-template" ref="nofollow noopener noreferrer">vue-uniapp-template</a>  是一个通过 <code>vue-cli </code> 构建的跨移动端脚手架模板，结合了 <code>uniapp</code>、<code>vue3 </code>和 <code>typescript</code> 主流技术栈。在开始之前，需要准备以下环境。如果环境准备OK，请忽略本节。</p>
<h3 data-id="heading-2">安装 Node</h3>
<blockquote>
<p><code>Node.js</code> 是运行 JavaScript 代码的环境，也是 <code>npm</code> 包管理器的依赖。</p>
</blockquote>
<p>打开 <a href="https://link.juejin.cn?target=https%3A%2F%2Fnodejs.org%2Fzh-cn%2Fdownload%2Fprebuilt-installer" target="_blank" title="https://nodejs.org/zh-cn/download/prebuilt-installer" ref="nofollow noopener noreferrer">Node.js 官方下载页面</a>，根据你的操作系统选择合适的版本进行下载，<strong>推荐安装 LTS 版本</strong>，这是长期支持版本，适合开发环境，比如这里选择 <code>v20.18.0(LTS) </code> 版本。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ab04888cbb0e4d47bced8e294ee5b2d4~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=P00s7EUOUv6Ye7SZ1EMDjksxWkU%3D" alt="image.png" loading="lazy"></p>
<p>下载之后，双击安装包根据提示安装，通过以下命令检查是否成功安装：</p>
<pre><code class="hljs language-bash" lang="bash">node -v
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/61bf9b0681414673b2a7789aefc46426~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=mWWKI0kH7augikR8jURkiz0uOLI%3D" alt="image.png" loading="lazy"></p>
<h3 data-id="heading-3">安装 VSCode</h3>
<blockquote>
<p><code>VSCode</code> 是一款非常流行的代码编辑器，特别适合前端开发。</p>
</blockquote>
<p>访问 <a href="https://link.juejin.cn?target=https%3A%2F%2Fcode.visualstudio.com%2F" target="_blank" title="https://code.visualstudio.com/" ref="nofollow noopener noreferrer">Visual Studio Code 官方网站</a> ,根据你的操作系统下载相应版本的 <code>VSCode</code> ,下载完成后，双击安装程序并按照提示完成安装。</p>
<h3 data-id="heading-4">安装 vue-cli</h3>
<blockquote>
<p><code>Vue CLI</code> 是 Vue.js 的命令行工具，能够快速创建、开发、构建 Vue.js 项目。</p>
</blockquote>
<p>打开终端或命令提示符, 使用 <code>npm</code> 全局安装 <code>Vue CLI</code>：</p>
<pre><code class="hljs language-bash" lang="bash">npm install -g @vue/cli
</code></pre>
<p>安装完成后，检查 <code>Vue CLI</code> 是否安装成功：</p>
<pre><code class="hljs language-bash" lang="bash">vue --version
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ccc40d61d3ed4a29a298bc4b2232f04e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=GU6hmOoqhr1ND06ptKgwZM0V7bM%3D" alt="image.png" loading="lazy"></p>
<h2 data-id="heading-5">创建项目</h2>
<h3 data-id="heading-6">初始化项目</h3>
<p>按照 <a href="https://link.juejin.cn?target=https%3A%2F%2Funiapp.dcloud.net.cn%2Fquickstart-cli.html%23%25E5%2588%259B%25E5%25BB%25BAuni-app" target="_blank" title="https://uniapp.dcloud.net.cn/quickstart-cli.html#%E5%88%9B%E5%BB%BAuni-app" ref="nofollow noopener noreferrer">uni-app 官方文档</a> 的步骤，通过 <code>vue-cli</code> 创建 <code>uni-app</code> + <code>vue</code> + <code>typescript</code> 脚手架：</p>
<pre><code class="hljs language-bash" lang="bash">npx degit dcloudio/uni-preset-vue<span class="hljs-comment">#vite-ts vue-uniapp-template</span>
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/eff2045c0aca4b2fa2ef9c8c547fd126~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=PUyzwaI8esjtbbhdwuoCfP15%2B8I%3D" alt="image.png" loading="lazy"></p>
<p>如果使用命令创建失败，可以通过 Gitee 下载 ZIP 包：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgitee.com%2Fdcloud%2Funi-preset-vue%2Ftree%2Fvite-ts" target="_blank" title="https://gitee.com/dcloud/uni-preset-vue/tree/vite-ts" ref="nofollow noopener noreferrer">vite-ts 分支</a>。</p>
<h3 data-id="heading-7">配置编译器</h3>
<p>默认生成的 <code>TypeScript </code> 编译器配置文件 <code>tsconfig.json</code> 中继承的 <code>@vue/tsconfig/tsconfig.json</code> 文件不存在。因此，你需要移除此继承配置并添加相应的编译设置。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/cdb0ed12958c44f3a073507e528c6502~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=trJX3ZObYdZ8Ud7Ew%2BZztlP7nfU%3D" alt="image.png" loading="lazy"></p>
<p>根据 <a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.typescriptlang.org%2Ftsconfig%2F" target="_blank" title="https://www.typescriptlang.org/tsconfig/" ref="nofollow noopener noreferrer">TypeScript 官方配置文档</a>，调整后的完整配置如下：</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"compilerOptions"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"module"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"esnext"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"moduleResolution"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"node"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"target"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"esnext"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"allowJs"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"skipLibCheck"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"strict"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>

    <span class="hljs-attr">"sourceMap"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"baseUrl"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"."</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"paths"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"@/*"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"./src/*"</span><span class="hljs-punctuation">]</span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"lib"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"esnext"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"dom"</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"types"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"@dcloudio/types"</span><span class="hljs-punctuation">]</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"include"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"src/**/*.ts"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"src/**/*.d.ts"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"src/**/*.tsx"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"src/**/*.vue"</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"exclude"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"node_modules"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"dist"</span><span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<ul>
<li><code>"module": "esnext"</code>: 指定模块系统为 <code>ESNext</code>，即最新的 ECMAScript 模块系统，支持 <code>import.meta</code> 和其他最新的特性。</li>
<li><code>"moduleResolution": "node"</code>: 模块解析策略，通常设置为 <code>Node</code> 以支持 Node.js 风格的模块解析。</li>
<li><code>"target": "esnext"</code>: 将目标 JavaScript 版本设置为 <code>ESNext</code>，编译输出现代浏览器能够支持的最新特性代码。</li>
<li><code>"allowJs": true</code>: 允许 TypeScript 编译器处理 <code>.js</code> 文件，混合使用 TypeScript 和 JavaScript 文件。</li>
<li><code>"skipLibCheck": true</code>: 跳过库文件的类型检查，提升编译速度。</li>
<li><code>"strict": true</code> : 启用所有严格类型检查选项。</li>
</ul>
<h3 data-id="heading-8">启动项目</h3>
<p>创建完成后，使用 <code>VSCode</code> 打开项目并启动：</p>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># 安装依赖</span>
pnpm install
<span class="hljs-comment"># 启动项目</span>
pnpm run dev:h5
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/64edef25433244d9bb9d8afa1b1f6f73~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=2nBfLAzrjaE2rO7AIJOL2g0bIOA%3D" alt="image.png" loading="lazy">
项目启动后，访问 <a href="https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A5173" target="_blank" title="http://localhost:5173" ref="nofollow noopener noreferrer">http://localhost:5173</a> 预览效果：</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/323c55fe0e4e40b3b9f64dad8c427aa1~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=lHOROglprH4VSkHTsC0bxVBJFAo%3D" alt="image.png" loading="lazy"></p>
<h2 data-id="heading-9">代码规范配置</h2>
<p>为了保证项目代码的规范性和一致性，可以为项目配置 <code>ESLint</code>、<code>Stylelint</code>、<code>Prettier</code> 以及 <code>Husky</code>，从而确保代码质量和开发流程的一致性。</p>
<h3 data-id="heading-10">集成 ESLint</h3>
<p><code>ESLint</code> 是一款 JavaScript 和 TypeScript 的代码规范工具，能够帮助开发团队保持代码风格一致并减少常见错误。</p>
<p><strong>ESLint 中文网</strong>：<a href="https://link.juejin.cn?target=https%3A%2F%2Feslint.nodejs.cn%2F" target="_blank" title="https://eslint.nodejs.cn/" ref="nofollow noopener noreferrer">eslint.nodejs.cn/</a></p>
<h4 data-id="heading-11">安装插件</h4>
<p>VSCode 插件市场搜索 ESLint 插件并安装</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/1c29b06d07b24bd89ac2c70f2817ad6a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=6lDPkA5iTvJTYQU1PNdhADIHDqA%3D" alt="image.png" loading="lazy"></p>
<h4 data-id="heading-12">配置 ESLint</h4>
<p>通过以下命令快速生成 ESLint 配置文件：</p>
<pre><code class="hljs language-bash" lang="bash">npx eslint --init
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ed5848763f864a748b63c064e66dbb81~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=n%2BTukgwiplNo2hEMLYuW%2Bfz1qBI%3D" alt="image.png" loading="lazy"></p>
<p>执行该命令后，ESLint 会通过交互式问题的方式，帮助生成配置文件。针对 9.x 版本，默认会生成基于 Flat Config 格式的 <code>eslint.config.mjs</code> 文件，与之前的 <code>.eslintrc</code> 格式有所不同。</p>
<p>默认生成的 <code>eslint.config.mjs</code> 文件如下所示：</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/7cb02be212004539b61260fa57a4f652~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=xkcJUYqfGEpZzv1UPFusurXvgBo%3D" alt="image.png" loading="lazy"></p>
<p>在此基础上，可以根据项目的需求进行一些定制化配置，例如添加忽略规则或自定义的特殊规则。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">import</span> globals <span class="hljs-keyword">from</span> <span class="hljs-string">"globals"</span>; <span class="hljs-comment">// 全局变量配置</span>
<span class="hljs-keyword">import</span> pluginJs <span class="hljs-keyword">from</span> <span class="hljs-string">"@eslint/js"</span>; <span class="hljs-comment">// JavaScript 的推荐配置</span>
<span class="hljs-keyword">import</span> tseslint <span class="hljs-keyword">from</span> <span class="hljs-string">"typescript-eslint"</span>; <span class="hljs-comment">// TypeScript 配置</span>
<span class="hljs-keyword">import</span> pluginVue <span class="hljs-keyword">from</span> <span class="hljs-string">"eslint-plugin-vue"</span>; <span class="hljs-comment">// Vue 配置</span>

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [
  {<span class="hljs-attr">files</span>: [<span class="hljs-string">"**/*.{js,mjs,cjs,ts,vue}"</span>]}, <span class="hljs-comment">// 校验的文件类型</span>
  {<span class="hljs-attr">languageOptions</span>: { <span class="hljs-attr">globals</span>: {...globals.<span class="hljs-property">browser</span> , ...globals.<span class="hljs-property">node</span>} }}, <span class="hljs-comment">// 浏览器/Node环境全局变量</span>
  pluginJs.<span class="hljs-property">configs</span>.<span class="hljs-property">recommended</span>, <span class="hljs-comment">// JavaScript 推荐配置</span>
  ...tseslint.<span class="hljs-property">configs</span>.<span class="hljs-property">recommended</span>, <span class="hljs-comment">// TypeScript 推荐配置</span>
  ...pluginVue.<span class="hljs-property">configs</span>[<span class="hljs-string">"flat/essential"</span>], <span class="hljs-comment">// Vue 推荐配置</span>
  { <span class="hljs-attr">files</span>: [<span class="hljs-string">"**/*.vue"</span>], <span class="hljs-attr">languageOptions</span>: { <span class="hljs-attr">parserOptions</span>: { <span class="hljs-attr">parser</span>: tseslint.<span class="hljs-property">parser</span> } } }, <span class="hljs-comment">// 对 .vue 文件使用 TypeScript 解析器</span>
  
  <span class="hljs-comment">// 添加忽略的文件或目录</span>
  {
    <span class="hljs-attr">ignores</span>: [
      <span class="hljs-string">"/dist"</span>,
      <span class="hljs-string">"/public"</span>,
      <span class="hljs-string">"/node_modules"</span>,
      <span class="hljs-string">"**/*.min.js"</span>,
      <span class="hljs-string">"**/*.config.mjs"</span>,
      <span class="hljs-string">"**/*.tsbuildinfo"</span>,
      <span class="hljs-string">"/src/manifest.json"</span>,
    ]
  },

  <span class="hljs-comment">// 自定义规则</span>
  {
    <span class="hljs-attr">rules</span>: {
      <span class="hljs-attr">quotes</span>: [<span class="hljs-string">"error"</span>, <span class="hljs-string">"double"</span>], <span class="hljs-comment">// 强制使用双引号</span>
      <span class="hljs-string">"quote-props"</span>: [<span class="hljs-string">"error"</span>, <span class="hljs-string">"always"</span>], <span class="hljs-comment">// 强制对象的属性名使用引号</span>
      <span class="hljs-attr">semi</span>: [<span class="hljs-string">"error"</span>, <span class="hljs-string">"always"</span>], <span class="hljs-comment">// 要求使用分号</span>
      <span class="hljs-attr">indent</span>: [<span class="hljs-string">"error"</span>, <span class="hljs-number">2</span>], <span class="hljs-comment">// 使用两个空格进行缩进</span>
      <span class="hljs-string">"no-multiple-empty-lines"</span>: [<span class="hljs-string">"error"</span>, { <span class="hljs-attr">max</span>: <span class="hljs-number">1</span> }], <span class="hljs-comment">// 不允许多个空行</span>
      <span class="hljs-string">"no-trailing-spaces"</span>: <span class="hljs-string">"error"</span>, <span class="hljs-comment">// 不允许行尾有空格</span>

      <span class="hljs-comment">// TypeScript 规则</span>
      <span class="hljs-string">"@typescript-eslint/no-explicit-any"</span>: <span class="hljs-string">"off"</span>, <span class="hljs-comment">// 禁用 no-explicit-any 规则，允许使用 any 类型</span>
      <span class="hljs-string">"@typescript-eslint/explicit-function-return-type"</span>: <span class="hljs-string">"off"</span>, <span class="hljs-comment">// 不强制要求函数必须明确返回类型</span>
      <span class="hljs-string">"@typescript-eslint/no-empty-interface"</span>: <span class="hljs-string">"off"</span>, <span class="hljs-comment">// 禁用 no-empty-interface 规则，允许空接口声明</span>
      <span class="hljs-string">"@typescript-eslint/no-empty-object-type"</span>: <span class="hljs-string">"off"</span>, <span class="hljs-comment">// 允许空对象类型</span>

      <span class="hljs-comment">// Vue 规则</span>
      <span class="hljs-string">"vue/multi-word-component-names"</span>: <span class="hljs-string">"off"</span>, <span class="hljs-comment">// 关闭多单词组件名称的限制</span>
      <span class="hljs-string">"vue/html-indent"</span>: [<span class="hljs-string">"error"</span>, <span class="hljs-number">2</span>], <span class="hljs-comment">// Vue 模板中的 HTML 缩进使用两个空格</span>
      <span class="hljs-string">"vue/no-v-html"</span>: <span class="hljs-string">"off"</span>, <span class="hljs-comment">// 允许使用 v-html (根据实际项目需要)</span>
    },
  },
];
</code></pre>
<h4 data-id="heading-13">添加 ESLint 脚本</h4>
<p>为了方便使用 ESLint，可以在 <code>package.json</code> 中添加 <code>lint</code> 脚本命令：</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"scripts"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"lint:eslint"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"eslint --fix ./src"</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>此脚本会自动修复符合 ESLint 规则的代码问题，并输出检查结果。</p>
<h4 data-id="heading-14">测试效果</h4>
<p>在 <code>App.vue</code> 文件中声明一个未使用的变量，并运行 <code>pnpm run lint:eslint</code>，可以看到 ESLint 提示该变量未使用。如下图所示：</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/326d9e03905545469b62ca822626a84c~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=abIBlkVpHix5niDbl8ywzt%2FDpvQ%3D" alt="image.png" loading="lazy"></p>
<h4 data-id="heading-15">推荐配置</h4>
<p>安装 Vue 文件解析器 <code>vue-eslint-parser</code>：</p>
<pre><code class="hljs language-bash" lang="bash">pnpm add -D vue-eslint-parser
</code></pre>
<p>针对不同文件配置插件和解析器：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// eslint.config.mjs</span>
<span class="hljs-keyword">import</span> globals <span class="hljs-keyword">from</span> <span class="hljs-string">"globals"</span>;
<span class="hljs-keyword">import</span> js <span class="hljs-keyword">from</span> <span class="hljs-string">"@eslint/js"</span>;

<span class="hljs-comment">// ESLint 核心插件</span>
<span class="hljs-keyword">import</span> pluginVue <span class="hljs-keyword">from</span> <span class="hljs-string">"eslint-plugin-vue"</span>;
<span class="hljs-keyword">import</span> pluginTypeScript <span class="hljs-keyword">from</span> <span class="hljs-string">"@typescript-eslint/eslint-plugin"</span>;

<span class="hljs-comment">// Prettier 插件及配置</span>
<span class="hljs-keyword">import</span> configPrettier <span class="hljs-keyword">from</span> <span class="hljs-string">"eslint-config-prettier"</span>;
<span class="hljs-keyword">import</span> pluginPrettier <span class="hljs-keyword">from</span> <span class="hljs-string">"eslint-plugin-prettier"</span>;

<span class="hljs-comment">// 解析器</span>
<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> parserVue <span class="hljs-keyword">from</span> <span class="hljs-string">"vue-eslint-parser"</span>;
<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> parserTypeScript <span class="hljs-keyword">from</span> <span class="hljs-string">"@typescript-eslint/parser"</span>;

<span class="hljs-comment">// 定义 ESLint 配置</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [
  <span class="hljs-comment">// 通用 JavaScript/TypeScript 配置</span>
  {
    ...js.<span class="hljs-property">configs</span>.<span class="hljs-property">recommended</span>,
    <span class="hljs-attr">ignores</span>: [
      <span class="hljs-string">"/dist"</span>,
      <span class="hljs-string">"/public"</span>,
      <span class="hljs-string">"/node_modules"</span>,
      <span class="hljs-string">"**/*.min.js"</span>,
      <span class="hljs-string">"**/*.config.mjs"</span>,
      <span class="hljs-string">"**/*.tsbuildinfo"</span>,
      <span class="hljs-string">"/src/manifest.json"</span>,
    ],
    <span class="hljs-attr">languageOptions</span>: {
      <span class="hljs-attr">globals</span>: {
        ...globals.<span class="hljs-property">browser</span>, <span class="hljs-comment">// 浏览器变量 (window, document 等)</span>
        ...globals.<span class="hljs-property">node</span>, <span class="hljs-comment">// Node.js 变量 (process, require 等)</span>
      },
    },
    <span class="hljs-attr">plugins</span>: {
      <span class="hljs-attr">prettier</span>: pluginPrettier,
    },
    <span class="hljs-attr">rules</span>: {
      ...configPrettier.<span class="hljs-property">rules</span>,
      ...pluginPrettier.<span class="hljs-property">configs</span>.<span class="hljs-property">recommended</span>.<span class="hljs-property">rules</span>,
      <span class="hljs-string">"no-debug"</span>: <span class="hljs-string">"off"</span>, <span class="hljs-comment">// 允许使用 debugger</span>
      <span class="hljs-string">"prettier/prettier"</span>: [
        <span class="hljs-string">"error"</span>,
        {
          <span class="hljs-attr">endOfLine</span>: <span class="hljs-string">"auto"</span>, <span class="hljs-comment">// 解决换行符冲突</span>
        },
      ],
    },
  },

  <span class="hljs-comment">// TypeScript 配置</span>
  {
    <span class="hljs-attr">files</span>: [<span class="hljs-string">"**/*.?([cm])ts"</span>],
    <span class="hljs-attr">languageOptions</span>: {
      <span class="hljs-attr">parser</span>: parserTypeScript,
      <span class="hljs-attr">parserOptions</span>: {
        <span class="hljs-attr">sourceType</span>: <span class="hljs-string">"module"</span>,
      },
    },
    <span class="hljs-attr">plugins</span>: {
      <span class="hljs-string">"@typescript-eslint"</span>: pluginTypeScript,
    },
    <span class="hljs-attr">rules</span>: {
      ...pluginTypeScript.<span class="hljs-property">configs</span>.<span class="hljs-property">recommended</span>.<span class="hljs-property">rules</span>,
      <span class="hljs-string">"@typescript-eslint/no-explicit-any"</span>: <span class="hljs-string">"off"</span>, <span class="hljs-comment">// 允许使用 any</span>
      <span class="hljs-string">"@typescript-eslint/no-empty-function"</span>: <span class="hljs-string">"off"</span>, <span class="hljs-comment">// 允许空函数</span>
      <span class="hljs-string">"@typescript-eslint/no-empty-object-type"</span>: <span class="hljs-string">"off"</span>, <span class="hljs-comment">// 允许空对象类型</span>
      <span class="hljs-string">"@typescript-eslint/consistent-type-imports"</span>: [
        <span class="hljs-string">"error"</span>,
        { <span class="hljs-attr">disallowTypeAnnotations</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">fixStyle</span>: <span class="hljs-string">"inline-type-imports"</span> },
      ], <span class="hljs-comment">// 统一类型导入风格</span>
    },
  },

  <span class="hljs-comment">// TypeScript 声明文件的特殊配置</span>
  {
    <span class="hljs-attr">files</span>: [<span class="hljs-string">"**/*.d.ts"</span>],
    <span class="hljs-attr">rules</span>: {
      <span class="hljs-string">"eslint-comments/no-unlimited-disable"</span>: <span class="hljs-string">"off"</span>, <span class="hljs-comment">// 关闭 eslint 注释相关规则</span>
      <span class="hljs-string">"unused-imports/no-unused-vars"</span>: <span class="hljs-string">"off"</span>, <span class="hljs-comment">// 忽略未使用的导入</span>
    },
  },

  <span class="hljs-comment">// JavaScript (commonjs) 配置</span>
  {
    <span class="hljs-attr">files</span>: [<span class="hljs-string">"**/*.?([cm])js"</span>],
    <span class="hljs-attr">rules</span>: {
      <span class="hljs-string">"@typescript-eslint/no-var-requires"</span>: <span class="hljs-string">"off"</span>, <span class="hljs-comment">// 允许 require</span>
    },
  },

  <span class="hljs-comment">// Vue 文件配置</span>
  {
    <span class="hljs-attr">files</span>: [<span class="hljs-string">"**/*.vue"</span>],
    <span class="hljs-attr">languageOptions</span>: {
      <span class="hljs-attr">parser</span>: parserVue,
      <span class="hljs-attr">parserOptions</span>: {
        <span class="hljs-attr">parser</span>: <span class="hljs-string">"@typescript-eslint/parser"</span>,
        <span class="hljs-attr">sourceType</span>: <span class="hljs-string">"module"</span>,
      },
    },
    <span class="hljs-attr">plugins</span>: {
      <span class="hljs-attr">vue</span>: pluginVue,
    },
    <span class="hljs-attr">processor</span>: pluginVue.<span class="hljs-property">processors</span>[<span class="hljs-string">".vue"</span>],
    <span class="hljs-attr">rules</span>: {
      ...pluginVue.<span class="hljs-property">configs</span>[<span class="hljs-string">"vue3-recommended"</span>].<span class="hljs-property">rules</span>,
      <span class="hljs-string">"vue/no-v-html"</span>: <span class="hljs-string">"off"</span>, <span class="hljs-comment">// 允许 v-html</span>
      <span class="hljs-string">"vue/require-default-prop"</span>: <span class="hljs-string">"off"</span>, <span class="hljs-comment">// 允许没有默认值的 prop</span>
      <span class="hljs-string">"vue/multi-word-component-names"</span>: <span class="hljs-string">"off"</span>, <span class="hljs-comment">// 关闭组件名称多词要求</span>
      <span class="hljs-string">"vue/html-self-closing"</span>: [
        <span class="hljs-string">"error"</span>,
        {
          <span class="hljs-attr">html</span>: { <span class="hljs-attr">void</span>: <span class="hljs-string">"always"</span>, <span class="hljs-attr">normal</span>: <span class="hljs-string">"always"</span>, <span class="hljs-attr">component</span>: <span class="hljs-string">"always"</span> },
          <span class="hljs-attr">svg</span>: <span class="hljs-string">"always"</span>,
          <span class="hljs-attr">math</span>: <span class="hljs-string">"always"</span>,
        },
      ], <span class="hljs-comment">// 自闭合标签</span>
    },
  },
];
</code></pre>
<h3 data-id="heading-16">集成 Prettier</h3>
<p>Prettier 是一个代码格式化工具，能够和 ESLint 配合使用，确保代码风格统一。</p>
<p><strong>prettier 中文网</strong>：<a href="https://link.juejin.cn?target=https%3A%2F%2Fprettier.nodejs.cn%2F" target="_blank" title="https://prettier.nodejs.cn/" ref="nofollow noopener noreferrer">prettier.nodejs.cn/</a></p>
<h4 data-id="heading-17">安装插件</h4>
<p>VSCode 插件市场搜索 <code>Prettier - Code formatter</code> 插件安装</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/d516e47381d6464789f4b766cc9458ad~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=wMGbGhD3RBG%2BhNHomQvwcV03Xb4%3D" alt="image.png" loading="lazy"></p>
<h4 data-id="heading-18">安装依赖</h4>
<pre><code class="hljs language-bash" lang="bash">pnpm install -D prettier eslint-config-prettier eslint-plugin-prettier 
</code></pre>
<ul>
<li>
<p><strong>prettier</strong>：主要的 Prettier 格式化库。</p>
</li>
<li>
<p><strong>eslint-plugin-prettier</strong>：将 Prettier 的规则作为 ESLint 的规则来运行。</p>
</li>
<li>
<p><strong>eslint-config-prettier</strong>：禁用所有与格式相关的 ESLint 规则，以避免和 Prettier 的冲突。</p>
</li>
</ul>
<h4 data-id="heading-19">配置 Prettier</h4>
<p>项目根目录下新建配置文件 <code>prettier.config.mjs</code>，添加常用规则：</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
  <span class="hljs-attr">printWidth</span>: <span class="hljs-number">100</span>, <span class="hljs-comment">// 每行最多字符数量，超出换行(默认80)</span>
  <span class="hljs-attr">tabWidth</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">// 缩进空格数，默认2个空格</span>
  <span class="hljs-attr">useTabs</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 指定缩进方式，空格或tab，默认false，即使用空格</span>
  <span class="hljs-attr">semi</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 使用分号</span>
  <span class="hljs-attr">singleQuote</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 使用单引号 (true:单引号;false:双引号)</span>
  <span class="hljs-attr">trailingComma</span>: <span class="hljs-string">'all'</span>, <span class="hljs-comment">// 末尾使用逗号</span>
};
</code></pre>
<h4 data-id="heading-20">配置忽略文件</h4>
<p>项目根目录新建 <code>.prettierignore</code> 文件指定 Prettier 不需要格式化的文件和文件夹</p>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># .prettierignore</span>
node_modules
dist
public
*.min.js
</code></pre>
<h4 data-id="heading-21">添加格式化脚本</h4>
<p>在 <code>package.json</code> 文件中添加：</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"scripts"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"format"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"prettier --write ./src"</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h4 data-id="heading-22">保存自动格式化</h4>
<p>打开 VSCode 的 <code>File</code> → <code>Preferences</code> → <code>Settings</code>，然后选择 <code>Open Settings (JSON)</code>，添加以下配置</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"editor.formatOnSave"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 保存格式化文件</span>
  <span class="hljs-attr">"editor.defaultFormatter"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"esbenp.prettier-vscode"</span> <span class="hljs-comment">// 指定 prettier 为所有文件默认格式化器</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h4 data-id="heading-23">测试</h4>
<p>下图演示了保存时的自动格式化效果，展示了代码中引号和换行的自动调整：</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/1b483a87d995439c96f9d5243c4baac0~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=KMo1FQh2mM%2B7JoR1fh9ZVBexH2g%3D" alt="在这里插入图片描述" loading="lazy"></p>
<h3 data-id="heading-24">集成 Stylelint</h3>
<p>Stylelint 一个强大的 CSS linter(检查器)，可帮助您避免错误并强制执行约定。</p>
<p><strong>Stylelint 官网</strong>：<a href="https://link.juejin.cn?target=https%3A%2F%2Fstylelint.io%2F" target="_blank" title="https://stylelint.io/" ref="nofollow noopener noreferrer">stylelint.io/</a></p>
<h4 data-id="heading-25">安装插件</h4>
<p>VSCode 插件搜索 <code>Stylelint</code> 并安装</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/78949c274b8543eba02597f683b57d10~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=SeUwu3%2BzIK06qdanB%2ByJLPvk6jE%3D" alt="image.png" loading="lazy"></p>
<h4 data-id="heading-26">安装依赖</h4>
<pre><code class="hljs language-bash" lang="bash">pnpm install -D postcss postcss-html postcss-scss stylelint stylelint-config-recommended stylelint-config-recommended-scss stylelint-config-recommended-vue stylelint-config-recess-order stylelint-config-html stylelint-prettier
</code></pre>




























































<table><thead><tr><th>依赖</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>postcss</td><td>CSS 解析工具，允许使用现代 CSS 语法并将其转换为兼容的旧语法</td><td>-</td></tr><tr><td>postcss-html</td><td>解析 HTML (类似 HTML) 的 PostCSS 语法</td><td>参见 <a href="https://link.juejin.cn?target=%25E9%2593%25BE%25E6%258E%25A5" target="_blank" title="%E9%93%BE%E6%8E%A5" ref="nofollow noopener noreferrer">postcss-html 文档</a></td></tr><tr><td>postcss-scss</td><td>PostCSS 的 SCSS 解析器</td><td>参见 <a href="https://link.juejin.cn?target=%25E9%2593%25BE%25E6%258E%25A5" target="_blank" title="%E9%93%BE%E6%8E%A5" ref="nofollow noopener noreferrer">postcss-scss 文档</a>，支持 CSS 行类注释</td></tr><tr><td>stylelint</td><td>stylelint 核心库</td><td>参见 <a href="https://link.juejin.cn?target=%25E9%2593%25BE%25E6%258E%25A5" target="_blank" title="%E9%93%BE%E6%8E%A5" ref="nofollow noopener noreferrer">stylelint</a></td></tr><tr><td>stylelint-config-recommended</td><td>提供了基础的 Stylelint 配置，适用于大多数项目，允许自定义规则集</td><td>与 stylelint-config-standard 相比，此配置提供了更多的灵活性</td></tr><tr><td>stylelint-config-recommended-scss</td><td>扩展基础配置，为 SCSS 特定规则提供支持</td><td>参见 <a href="https://link.juejin.cn?target=%25E9%2593%25BE%25E6%258E%25A5" target="_blank" title="%E9%93%BE%E6%8E%A5" ref="nofollow noopener noreferrer">stylelint-config-recommended-scss 文档</a></td></tr><tr><td>stylelint-config-recommended-vue</td><td>扩展基础配置，为 Vue 文件中的样式提供支持</td><td>参见 <a href="https://link.juejin.cn?target=%25E9%2593%25BE%25E6%258E%25A5" target="_blank" title="%E9%93%BE%E6%8E%A5" ref="nofollow noopener noreferrer">stylelint-config-recommended-vue 文档</a></td></tr><tr><td>stylelint-config-recess-order</td><td>提供优化样式顺序的配置</td><td>参见 CSS 书写顺序规范</td></tr><tr><td>stylelint-config-html</td><td>为 HTML (类似 HTML) 文件提供共享配置</td><td>参见 <a href="https://link.juejin.cn?target=%25E9%2593%25BE%25E6%258E%25A5" target="_blank" title="%E9%93%BE%E6%8E%A5" ref="nofollow noopener noreferrer">stylelint-config-html 文档</a></td></tr><tr><td>stylelint-prettier</td><td>集成 stylelint 和 prettier，确保样式同时满足两个工具的规范</td><td>-</td></tr></tbody></table>
<p>其中选择 stylelint-config-recommended 替代 stylelint-config-standard 的原因在于它不仅提供了灵活性，还更加轻量。stylelint-config-recommended 默认包含的规则较少，避免了 stylelint-config-standard 中可能不需要的规则，这样可以减少配置的复杂度，提高项目的启动速度，同时让开发者能够集中关注对项目真正重要的风格指南。轻量配置有助于简化工作流程，特别是在大型或复杂的项目中。</p>
<h4 data-id="heading-27">配置 Stylelint</h4>
<p>根目录新建 <code>.stylelintrc.cjs</code> 文件，配置如下：</p>
<pre><code class="hljs language-javascript" lang="javascript">{
  <span class="hljs-string">"extends"</span>: [
    <span class="hljs-string">"stylelint-config-recommended"</span>,
    <span class="hljs-string">"stylelint-config-recommended-scss"</span>,
    <span class="hljs-string">"stylelint-config-recommended-vue/scss"</span>,
    <span class="hljs-string">"stylelint-config-html/vue"</span>,
    <span class="hljs-string">"stylelint-config-recess-order"</span>
  ],
  <span class="hljs-string">"plugins"</span>: [<span class="hljs-string">"stylelint-prettier"</span>],
  <span class="hljs-string">"overrides"</span>: [
    {
      <span class="hljs-string">"files"</span>: [<span class="hljs-string">"**/*.{vue,html}"</span>],
      <span class="hljs-string">"customSyntax"</span>: <span class="hljs-string">"postcss-html"</span>
    },
    {
      <span class="hljs-string">"files"</span>: [<span class="hljs-string">"**/*.{css,scss}"</span>],
      <span class="hljs-string">"customSyntax"</span>: <span class="hljs-string">"postcss-scss"</span>
    }
  ],

  <span class="hljs-string">"rules"</span>: {
    <span class="hljs-string">"import-notation"</span>: <span class="hljs-string">"string"</span>,
    <span class="hljs-string">"selector-class-pattern"</span>: <span class="hljs-literal">null</span>,
    <span class="hljs-string">"custom-property-pattern"</span>: <span class="hljs-literal">null</span>,
    <span class="hljs-string">"keyframes-name-pattern"</span>: <span class="hljs-literal">null</span>,
    <span class="hljs-string">"no-descending-specificity"</span>: <span class="hljs-literal">null</span>,
    <span class="hljs-string">"no-empty-source"</span>: <span class="hljs-literal">null</span>,
    <span class="hljs-string">"selector-pseudo-class-no-unknown"</span>: [
      <span class="hljs-literal">true</span>,
      {
        <span class="hljs-string">"ignorePseudoClasses"</span>: [<span class="hljs-string">"global"</span>, <span class="hljs-string">"export"</span>, <span class="hljs-string">"deep"</span>]
      }
    ],
       <span class="hljs-string">"unit-no-unknown"</span>: [<span class="hljs-literal">true</span>, {
      <span class="hljs-string">"ignoreUnits"</span>: [<span class="hljs-string">"rpx"</span>]
    }]   
    <span class="hljs-string">"property-no-unknown"</span>: [
      <span class="hljs-literal">true</span>,
      {
        <span class="hljs-string">"ignoreProperties"</span>: []
      }
    ],
    <span class="hljs-string">"at-rule-no-unknown"</span>: [
      <span class="hljs-literal">true</span>,
      {
        <span class="hljs-string">"ignoreAtRules"</span>: [<span class="hljs-string">"apply"</span>, <span class="hljs-string">"use"</span>, <span class="hljs-string">"forward"</span>]
      }
    ]
  }
}
</code></pre>
<h4 data-id="heading-28">配置忽略文件</h4>
<p>根目录创建 .stylelintignore 文件，配置忽略文件如下：</p>
<pre><code class="hljs language-basic" lang="basic">*.min.js
dist
public
node_modules
</code></pre>
<h4 data-id="heading-29">添加 Stylelint 脚本</h4>
<p>package.json 添加 Stylelint 检测指令：</p>
<pre><code class="hljs language-json" lang="json">  <span class="hljs-attr">"scripts"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"lint:stylelint"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"stylelint  \"**/*.{css,scss,vue,html}\" --fix"</span>
  <span class="hljs-punctuation">}</span>
</code></pre>
<h4 data-id="heading-30">保存自动修复</h4>
<p>项目根目录下<code>.vscode/settings.json</code> 文件添加配置：</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"editor.codeActionsOnSave"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"source.fixAll.stylelint"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> 
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"stylelint.validate"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"css"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"scss"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"vue"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"html"</span><span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>为了验证把尺寸属性 width 放置在定位属性 position 前面，根据 <a href="https://link.juejin.cn?target=https%3A%2F%2Fjingyan.baidu.com%2Farticle%2F647f0115cf48957f2148a8a3.html" target="_blank" title="https://jingyan.baidu.com/article/647f0115cf48957f2148a8a3.html" ref="nofollow noopener noreferrer">CSS 书写顺序规范</a> 推断是不符合规范的，在保存时 Stylelint 自动将属性重新排序，达到预期。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/d004a30f6cd345a891d1ac639e1ec1ce~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=XXOxoCUSZiD6zsS25ZIM%2FBAcwg0%3D" alt="在这里插入图片描述" loading="lazy"></p>
<h4 data-id="heading-31">测试</h4>
<p>执行以下命令进行检测</p>
<pre><code class="hljs language-bash" lang="bash">npm run lint:stylelint
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/e83d311398ab45c2818289c7dbc84fd4~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=ETnLkxkK%2F0sPzr4E%2FhBZ2uriHns%3D" alt="image.png" loading="lazy"></p>
<h2 data-id="heading-32">Git提交规范配置</h2>
<p>配置 Husky 的 <code>pre-commit</code> 和 <code>commit-msg</code> 钩子，实现代码提交的自动化检查和规范化。</p>
<ul>
<li><strong>pre-commit</strong>: 使用 Husky + Lint-staged，在提交前进行代码规范检测和格式化。确保项目已配置 ESLint、Prettier 和 Stylelint。</li>
<li><strong>commit-msg</strong>: 结合 Husky、Commitlint、Commitizen 和 cz-git，生成规范化且自定义的 Git commit 信息。</li>
</ul>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/00d27c7738c24ed08aa67e71c2c7bab6~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=h2MX3BhhfGVe%2F5NYcEjtkok9ecg%3D" alt="image.png" loading="lazy"></p>
<h3 data-id="heading-33">集成 Husky</h3>
<p>Husky 是 Git 钩子工具，可以设置在 git 各个阶段（<code>pre-commit</code>、<code>commit-msg</code> 等）触发。</p>
<p><strong>Husky官网</strong>：<a href="https://link.juejin.cn?target=https%3A%2F%2Ftypicode.github.io%2Fhusky%2Fzh%2Fget-started.html" target="_blank" title="https://typicode.github.io/husky/zh/get-started.html" ref="nofollow noopener noreferrer">typicode.github.io</a></p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/7950a21cd1a943ac9f444bb3f9143803~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=Kd%2B%2BVA2ldM5oxpvlsCwi0pJB1YE%3D" alt="image.png" loading="lazy"></p>
<h4 data-id="heading-34">安装依赖</h4>
<pre><code class="hljs language-bash" lang="bash">pnpm add -D husky
</code></pre>
<h4 data-id="heading-35">初始化</h4>
<p><code>init</code> 命令简化了项目中的 husky 设置。它会在 <code>.husky/</code> 中创建 <code>pre-commit</code> 脚本，并更新 <code>package.json</code> 中的 <code>prepare</code> 脚本。</p>
<pre><code class="hljs language-bash" lang="bash">pnpm <span class="hljs-built_in">exec</span> husky init
</code></pre>
<h4 data-id="heading-36">测试</h4>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/6e98dd62709d442fb83f4bb6d3ebd39d~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=ZLInYOm5LC9cZtush24fG5Y%2B7V4%3D" alt="image.png" loading="lazy"></p>
<p>通过 <code>pre-commit</code> 钩子，可以自动运行各种代码检查工具，在提交代码前强制执行代码质量和样式检查。常见的工具包括：</p>
<ul>
<li><strong><code>eslint</code></strong>：用于检查和修复 JavaScript/TypeScript 代码中的问题。</li>
<li><strong><code>stylelint</code></strong>：用于检测和修复 CSS/SCSS 样式问题。</li>
</ul>
<p>接下来，集成 <strong><code>lint-staged</code></strong> 和 <strong><code>commitlint</code></strong> 来进一步完善开发体验。</p>
<h3 data-id="heading-37">集成 lint-staged</h3>
<p><code>lint-staged</code> 是一个工具，专门用于只对 Git 暂存区的文件运行 lint 或其他任务，确保只检查和修复被修改或新增的代码部分，而不会影响整个代码库。这样可以显著提升效率，尤其是对于大型项目。</p>
<h4 data-id="heading-38">安装依赖</h4>
<p>使用以下命令安装 <code>lint-staged</code>：</p>
<pre><code class="hljs language-json" lang="json">pnpm add -D lint-staged
</code></pre>
<h4 data-id="heading-39">配置 lint-staged</h4>
<p>在 <code>package.json</code> 中添加 <code>lint-staged</code> 配置，确保在 <code>pre-commit</code> 阶段自动检测暂存的文件：</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"vue-uniapp-template"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"version"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0.0.0"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"lint-staged"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"*.{js,ts}"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
      <span class="hljs-string">"eslint --fix"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-string">"prettier --write"</span>
    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"*.{cjs,json}"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
      <span class="hljs-string">"prettier --write"</span>
    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"*.{vue,html}"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
      <span class="hljs-string">"eslint --fix"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-string">"prettier --write"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-string">"stylelint --fix"</span>
    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"*.{scss,css}"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
      <span class="hljs-string">"stylelint --fix"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-string">"prettier --write"</span>
    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"*.md"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
      <span class="hljs-string">"prettier --write"</span>
    <span class="hljs-punctuation">]</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>在 <code>package.json</code> 的 <code>scripts</code> 部分中，添加用于运行 <code>lint-staged</code> 的命令：</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-attr">"scripts"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
   <span class="hljs-attr">"lint:lint-staged"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"lint-staged"</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h4 data-id="heading-40">添加 Husky 钩子</h4>
<p>在项目根目录的 <code>.husky/pre-commit</code> 中添加以下命令，确保在提交代码前执行 <code>lint-staged</code>：</p>
<pre><code class="hljs language-bash" lang="bash">pnpm run lint:lint-staged
</code></pre>
<h4 data-id="heading-41">测试</h4>
<p>提交代码时，<code>lint-staged</code> 会自动对暂存的文件运行相应的 lint 任务。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/4b36f87d586943d3a784f1b0b65e5d38~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=IsVvETvWgV0it1h4Kf4e%2FsIjz2A%3D" alt="image.png" loading="lazy"></p>
<p>通过这种集成方式，确保代码在提交前经过自动格式化和校验，提高代码质量和一致性。</p>
<h3 data-id="heading-42">集成 Commitlint</h3>
<p><code>commitlint</code> 用于检查 Git 提交信息是否符合特定规范（如 Angular 提交规范），从而保证提交信息的一致性。</p>
<p><strong>Commitlint官网</strong>：<a href="https://link.juejin.cn?target=https%3A%2F%2Fcommitlint.js.org%2F" target="_blank" title="https://commitlint.js.org/" ref="nofollow noopener noreferrer">commitlint.js.org/</a></p>
<h4 data-id="heading-43">安装依赖</h4>
<pre><code class="hljs language-bash" lang="bash">pnpm add -D  @commitlint/cli @commitlint/config-conventional
</code></pre>
<h4 data-id="heading-44">配置 Commitlint</h4>
<p>在项目根目录下创建 <code>commitlint.config.cjs</code> 文件，添加以下内容来启用 Angular 规范：</p>
<pre><code class="hljs language-json" lang="json">module.exports = <span class="hljs-punctuation">{</span>
  <span class="hljs-comment">// 继承的规则</span>
  extends<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"@commitlint/config-conventional"</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
  <span class="hljs-comment">// 自定义规则</span>
  rules<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-comment">// 提交类型枚举，git提交type必须是以下类型 @see https://commitlint.js.org/#/reference-rules</span>
    <span class="hljs-attr">"type-enum"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
      <span class="hljs-number">2</span><span class="hljs-punctuation">,</span>
      <span class="hljs-string">"always"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-punctuation">[</span>
        <span class="hljs-string">"feat"</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 新增功能</span>
        <span class="hljs-string">"fix"</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 修复缺陷</span>
        <span class="hljs-string">"docs"</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 文档变更</span>
        <span class="hljs-string">"style"</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 代码格式（不影响功能，例如空格、分号等格式修正）</span>
        <span class="hljs-string">"refactor"</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 代码重构（不包括 bug 修复、功能新增）</span>
        <span class="hljs-string">"perf"</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 性能优化</span>
        <span class="hljs-string">"test"</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 添加疏漏测试或已有测试改动</span>
        <span class="hljs-string">"build"</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 构建流程、外部依赖变更（如升级 npm 包、修改 webpack 配置等）</span>
        <span class="hljs-string">"ci"</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 修改 CI 配置、脚本</span>
        <span class="hljs-string">"revert"</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 回滚 commit</span>
        <span class="hljs-string">"chore"</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 对构建过程或辅助工具和库的更改（不影响源文件、测试用例）</span>
      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"subject-case"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// subject大小写不做校验</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
<span class="hljs-punctuation">}</span>;
</code></pre>
<h4 data-id="heading-45">添加 Husky 钩子</h4>
<p>将 <code>commitlint</code> 与 Husky 集成，在 <code>.husky/commit-msg</code> 文件中添加以下内容，确保提交信息符合规范：</p>
<pre><code class="hljs language-bash" lang="bash">npx --no-install commitlint --edit <span class="hljs-variable">$1</span>
</code></pre>
<h4 data-id="heading-46">测试</h4>
<p>根据 Angular 的提交规范，提交信息由以下部分组成：</p>
<ol>
<li><strong>类型</strong>：表示本次提交的类型，例如 <code>feat</code> (新功能)、<code>fix</code> (修复 bug)、<code>docs</code> (文档更新)。</li>
<li><strong>作用域</strong>（可选）：说明本次提交影响的模块，例如 <code>auth</code>、<code>ui</code>。</li>
<li><strong>简短描述</strong>：简洁明了的提交描述，限定在 50 字符以内。</li>
</ol>
<p>当你尝试提交不符合规范的提交信息时，提交会被阻止，并显示相关错误提示。如下图所示：</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/03aa99787a2a40ff9ba770d0ee3b209a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=62cPxFVsnYnko%2FKG0lctp%2FCHmB0%3D" alt="image.png" loading="lazy"></p>
<h3 data-id="heading-47">集成 Commitizen  和  cz-git</h3>
<ul>
<li>
<p><strong>commitizen</strong>:  是一个帮助开发者以标准化格式生成提交信息的工具。--<a href="https://link.juejin.cn?target=https%3A%2F%2Fcommitizen.github.io%2Fcz-cli%2F" target="_blank" title="https://commitizen.github.io/cz-cli/" ref="nofollow noopener noreferrer">Commitizen 官方文档</a></p>
</li>
<li>
<p><strong>cz-git</strong>: <code>cz-git</code> 是 <code>Commitizen</code> 的适配器之一，它基于 <code>Commitizen</code>，提供了更多自定义功能和增强的交互体验。--<a href="https://link.juejin.cn?target=https%3A%2F%2Fcz-git.qbb.sh%2Fzh%2F" target="_blank" title="https://cz-git.qbb.sh/zh/" ref="nofollow noopener noreferrer">cz-git 官方文档</a></p>
</li>
</ul>
<h4 data-id="heading-48">安装依赖</h4>
<pre><code class="hljs language-bash" lang="bash">pnpm add -D commitizen cz-git
</code></pre>
<h4 data-id="heading-49">配置 cz-git</h4>
<p>在项目中初始化 <code>Commitizen</code>，并配置使用 <code>cz-git</code> 作为适配器。在 <code>package.json</code> 中添加以下配置：</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-attr">"config"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"commitizen"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">"path"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"node_modules/cz-git"</span>
    <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>在<code>commitlint</code> 的配置文件 <code>commitlint.config.cjs</code> 中添加配置，commitlint 配置模板：<a href="https://link.juejin.cn?target=https%3A%2F%2Fcz-git.qbb.sh%2Fzh%2Fconfig%2F" target="_blank" title="https://cz-git.qbb.sh/zh/config/" ref="nofollow noopener noreferrer">cz-git.qbb.sh/zh/config/</a></p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
  <span class="hljs-comment">// 继承的规则</span>
  <span class="hljs-attr">extends</span>: [<span class="hljs-string">"@commitlint/config-conventional"</span>],
  <span class="hljs-comment">// 自定义规则</span>
  <span class="hljs-attr">rules</span>: {
    <span class="hljs-comment">// ...</span>
  },
  <span class="hljs-comment">// cz-git 配置</span>
  <span class="hljs-attr">prompt</span>: {
    <span class="hljs-attr">messages</span>: {
      <span class="hljs-attr">type</span>: <span class="hljs-string">"选择你要提交的类型 :"</span>,
      <span class="hljs-attr">scope</span>: <span class="hljs-string">"选择一个提交范围（可选）:"</span>,
      <span class="hljs-attr">customScope</span>: <span class="hljs-string">"请输入自定义的提交范围 :"</span>,
      <span class="hljs-attr">subject</span>: <span class="hljs-string">"填写简短精炼的变更描述 :\n"</span>,
      <span class="hljs-attr">body</span>: <span class="hljs-string">'填写更加详细的变更描述（可选）。使用 "|" 换行 :\n'</span>,
      <span class="hljs-attr">breaking</span>: <span class="hljs-string">'列举非兼容性重大的变更（可选）。使用 "|" 换行 :\n'</span>,
      <span class="hljs-attr">footerPrefixesSelect</span>: <span class="hljs-string">"选择关联issue前缀（可选）:"</span>,
      <span class="hljs-attr">customFooterPrefix</span>: <span class="hljs-string">"输入自定义issue前缀 :"</span>,
      <span class="hljs-attr">footer</span>: <span class="hljs-string">"列举关联issue (可选) 例如: #31, #I3244 :\n"</span>,
      <span class="hljs-attr">generatingByAI</span>: <span class="hljs-string">"正在通过 AI 生成你的提交简短描述..."</span>,
      <span class="hljs-attr">generatedSelectByAI</span>: <span class="hljs-string">"选择一个 AI 生成的简短描述:"</span>,
      <span class="hljs-attr">confirmCommit</span>: <span class="hljs-string">"是否提交或修改commit ?"</span>,
    },
    <span class="hljs-comment">// prettier-ignore</span>
    <span class="hljs-attr">types</span>: [
        { <span class="hljs-attr">value</span>: <span class="hljs-string">"feat"</span>,     <span class="hljs-attr">name</span>: <span class="hljs-string">"特性:     ✨  新增功能"</span>, <span class="hljs-attr">emoji</span>: <span class="hljs-string">":sparkles:"</span> },
        { <span class="hljs-attr">value</span>: <span class="hljs-string">"fix"</span>,      <span class="hljs-attr">name</span>: <span class="hljs-string">"修复:     🐛  修复缺陷"</span>, <span class="hljs-attr">emoji</span>: <span class="hljs-string">":bug:"</span> },
        { <span class="hljs-attr">value</span>: <span class="hljs-string">"docs"</span>,     <span class="hljs-attr">name</span>: <span class="hljs-string">"文档:     📝  文档变更"</span>, <span class="hljs-attr">emoji</span>: <span class="hljs-string">":memo:"</span> },
        { <span class="hljs-attr">value</span>: <span class="hljs-string">"style"</span>,    <span class="hljs-attr">name</span>: <span class="hljs-string">"格式:     💄  代码格式（不影响功能，例如空格、分号等格式修正）"</span>, <span class="hljs-attr">emoji</span>: <span class="hljs-string">":lipstick:"</span> },
        { <span class="hljs-attr">value</span>: <span class="hljs-string">"refactor"</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">"重构:     ♻️  代码重构（不包括 bug 修复、功能新增）"</span>, <span class="hljs-attr">emoji</span>: <span class="hljs-string">":recycle:"</span> },
        { <span class="hljs-attr">value</span>: <span class="hljs-string">"perf"</span>,     <span class="hljs-attr">name</span>: <span class="hljs-string">"性能:     ⚡️  性能优化"</span>, <span class="hljs-attr">emoji</span>: <span class="hljs-string">":zap:"</span> },
        { <span class="hljs-attr">value</span>: <span class="hljs-string">"test"</span>,     <span class="hljs-attr">name</span>: <span class="hljs-string">"测试:     ✅  添加疏漏测试或已有测试改动"</span>, <span class="hljs-attr">emoji</span>: <span class="hljs-string">":white_check_mark:"</span>},
        { <span class="hljs-attr">value</span>: <span class="hljs-string">"build"</span>,    <span class="hljs-attr">name</span>: <span class="hljs-string">"构建:     📦️  构建流程、外部依赖变更（如升级 npm 包、修改 vite 配置等）"</span>, <span class="hljs-attr">emoji</span>: <span class="hljs-string">":package:"</span>},
        { <span class="hljs-attr">value</span>: <span class="hljs-string">"ci"</span>,       <span class="hljs-attr">name</span>: <span class="hljs-string">"集成:     🎡  修改 CI 配置、脚本"</span>,  <span class="hljs-attr">emoji</span>: <span class="hljs-string">":ferris_wheel:"</span>},
        { <span class="hljs-attr">value</span>: <span class="hljs-string">"revert"</span>,   <span class="hljs-attr">name</span>: <span class="hljs-string">"回退:     ⏪️  回滚 commit"</span>,<span class="hljs-attr">emoji</span>: <span class="hljs-string">":rewind:"</span>},
        { <span class="hljs-attr">value</span>: <span class="hljs-string">"chore"</span>,    <span class="hljs-attr">name</span>: <span class="hljs-string">"其他:     🔨  对构建过程或辅助工具和库的更改（不影响源文件、测试用例）"</span>, <span class="hljs-attr">emoji</span>: <span class="hljs-string">":hammer:"</span>},
      ],
    <span class="hljs-attr">useEmoji</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">emojiAlign</span>: <span class="hljs-string">"center"</span>,
    <span class="hljs-attr">useAI</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-attr">aiNumber</span>: <span class="hljs-number">1</span>,
    <span class="hljs-attr">themeColorCode</span>: <span class="hljs-string">""</span>,
    <span class="hljs-attr">scopes</span>: [],
    <span class="hljs-attr">allowCustomScopes</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">allowEmptyScopes</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">customScopesAlign</span>: <span class="hljs-string">"bottom"</span>,
    <span class="hljs-attr">customScopesAlias</span>: <span class="hljs-string">"custom"</span>,
    <span class="hljs-attr">emptyScopesAlias</span>: <span class="hljs-string">"empty"</span>,
    <span class="hljs-attr">upperCaseSubject</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-attr">markBreakingChangeMode</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-attr">allowBreakingChanges</span>: [<span class="hljs-string">"feat"</span>, <span class="hljs-string">"fix"</span>],
    <span class="hljs-attr">breaklineNumber</span>: <span class="hljs-number">100</span>,
    <span class="hljs-attr">breaklineChar</span>: <span class="hljs-string">"|"</span>,
    <span class="hljs-attr">skipQuestions</span>: [],
    <span class="hljs-attr">issuePrefixes</span>: [{ <span class="hljs-attr">value</span>: <span class="hljs-string">"closed"</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">"closed:   ISSUES has been processed"</span> }],
    <span class="hljs-attr">customIssuePrefixAlign</span>: <span class="hljs-string">"top"</span>,
    <span class="hljs-attr">emptyIssuePrefixAlias</span>: <span class="hljs-string">"skip"</span>,
    <span class="hljs-attr">customIssuePrefixAlias</span>: <span class="hljs-string">"custom"</span>,
    <span class="hljs-attr">allowCustomIssuePrefix</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">allowEmptyIssuePrefix</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">confirmColorize</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">maxHeaderLength</span>: <span class="hljs-title class_">Infinity</span>,
    <span class="hljs-attr">maxSubjectLength</span>: <span class="hljs-title class_">Infinity</span>,
    <span class="hljs-attr">minSubjectLength</span>: <span class="hljs-number">0</span>,
    <span class="hljs-attr">scopeOverrides</span>: <span class="hljs-literal">undefined</span>,
    <span class="hljs-attr">defaultBody</span>: <span class="hljs-string">""</span>,
    <span class="hljs-attr">defaultIssues</span>: <span class="hljs-string">""</span>,
    <span class="hljs-attr">defaultScope</span>: <span class="hljs-string">""</span>,
    <span class="hljs-attr">defaultSubject</span>: <span class="hljs-string">""</span>,
  },
};

</code></pre>
<h4 data-id="heading-50">添加 cz-git 脚本</h4>
<p>在<code>package.json</code> 文件中添加 <code>commit</code> 脚本命令</p>
<pre><code class="hljs language-json" lang="json"> <span class="hljs-attr">"scripts"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
     <span class="hljs-attr">"commit"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"git-cz"</span>
 <span class="hljs-punctuation">}</span>
</code></pre>
<h4 data-id="heading-51">测试</h4>
<p>执行 <code>pnpm run commit</code> 命令后，按照提示输入相关信息，最终生成符合规范的提交信息。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/23442d3f36a843598c4cb6b73dcd1dfc~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=ReEUORISi1fV6pLSff5f%2FpXVaag%3D" alt="image.png" loading="lazy"></p>
<h2 data-id="heading-52">整合 Sass</h2>
<p><strong>Sass</strong>是帮助开发者编写、管理和维护样式的强大工具，通过 <code>&lt;style lang="scss"&gt;</code> 使用。它提供变量、嵌套、混合等功能，提升了样式的可维护性和开发效率，尤其在复杂项目中减少重复代码、提高复用性。</p>
<pre><code class="hljs language-csharp" lang="csharp">pnpm <span class="hljs-keyword">add</span> -D sass sass-loader
</code></pre>
<h2 data-id="heading-53">整合 UnoCSS</h2>
<p>UnoCSS 是一个高性能、灵活且按需生成的原子化 CSS 引擎。</p>
<p><strong>官方网站</strong>：<a href="https://link.juejin.cn?target=https%3A%2F%2Funocss.net%2F" target="_blank" title="https://unocss.net/" ref="nofollow noopener noreferrer">unocss.net/</a></p>
<p>先比较下</p>













<table><thead><tr><th>内部样式</th><th>UnoCSS原子样式</th></tr></thead><tbody><tr><td><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/d68702929270412c9b4c4ff1591c2d4f~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=jcNshHcC%2FLrUZafJJk7hHXSuqRY%3D" alt="image.png" loading="lazy"></td><td><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/5d8897bcd7c44c85bbecd2f7a64dd410~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=YWJrCUzgYHqJiYZQ5bWL0Ya%2F%2BU0%3D" alt="image.png" loading="lazy"></td></tr></tbody></table>
<h3 data-id="heading-54">安装插件</h3>
<p><code>VSCode</code> 安装 <code>UnoCSS</code> 插件</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/aac6a91770164c34b14abecbd37e7512~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=QX2t1DJB9HQOY07g3Gi0TyEB9%2Fw%3D" alt="image.png" loading="lazy"></p>
<h3 data-id="heading-55">安装依赖</h3>
<p>本次整合基于官网提供的社区预设 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FMellowCo%2Funocss-preset-weapp" target="_blank" title="https://github.com/MellowCo/unocss-preset-weapp" ref="nofollow noopener noreferrer">unocss-preset-weapp</a>。该预设内置了 <code>transformer</code>，用于解决小程序的兼容性问题。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/aa408c53a8084a81889784df80ae81c6~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=2DyUpNftrY4Vmm3USdsC8QQWY%2FA%3D" alt="image.png" loading="lazy"></p>
<p>进一步参考 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FMellowCo%2Funocss-preset-weapp%2Fblob%2Fmain%2Fexamples%2Funiapp_vue3%2FREADME.md" target="_blank" title="https://github.com/MellowCo/unocss-preset-weapp/blob/main/examples/uniapp_vue3/README.md" ref="nofollow noopener noreferrer">unocss-preset-weapp 的 uniapp_vue3 使用与配置指南</a>，使用以下命令安装 UnoCSS 和 <code>unocss-preset-weapp</code>：</p>
<pre><code class="hljs language-bash" lang="bash">pnpm add -D unocss unocss-preset-weapp
</code></pre>
<h3 data-id="heading-56">配置 UnoCSS</h3>
<p>参考 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FMellowCo%2Funocss-preset-weapp%2Fblob%2Fmain%2Fexamples%2Funiapp_vue3%2FREADME.md" target="_blank" title="https://github.com/MellowCo/unocss-preset-weapp/blob/main/examples/uniapp_vue3/README.md" ref="nofollow noopener noreferrer">unocss-preset-weapp 的 uniapp_vue3 使用与配置指南</a>，配置如下：</p>
<ul>
<li>
<p><strong>vite.config.ts</strong></p>
<blockquote>
<p>在 <code>vite.config.ts</code> 中添加如下配置，整合 UnoCSS 到 UniApp 项目：</p>
</blockquote>
<pre><code class="hljs language-bash" lang="bash">import { defineConfig } from <span class="hljs-string">'vite'</span>
import uni from <span class="hljs-string">'@dcloudio/vite-plugin-uni'</span>

<span class="hljs-built_in">export</span> default defineConfig(async () =&gt; {
  const UnoCss = await import(<span class="hljs-string">'unocss/vite'</span>).<span class="hljs-keyword">then</span>(i =&gt; i.default)

  <span class="hljs-built_in">return</span> {
    plugins: [
      uni(),
      // 配置 UnoCSS
      UnoCss(),
    ],
  }
})
</code></pre>
</li>
<li>
<p><strong>unocss.config.ts</strong></p>
<blockquote>
<p>添加unocss.config.ts文件，搭配 <a href="https://link.juejin.cn?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dantfu.unocss" target="_blank" title="https://marketplace.visualstudio.com/items?itemName=antfu.unocss" ref="nofollow noopener noreferrer">unocss vscode</a> 插件，智能提示</p>
</blockquote>
<pre><code class="hljs language-typescript" lang="typescript"><span class="hljs-keyword">import</span> presetWeapp <span class="hljs-keyword">from</span> <span class="hljs-string">"unocss-preset-weapp"</span>;
<span class="hljs-keyword">import</span> { extractorAttributify, transformerClass } <span class="hljs-keyword">from</span> <span class="hljs-string">"unocss-preset-weapp/transformer"</span>;

<span class="hljs-keyword">const</span> { presetWeappAttributify, transformerAttributify } = <span class="hljs-title function_">extractorAttributify</span>();

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
  <span class="hljs-attr">presets</span>: [
    <span class="hljs-comment">// https://github.com/MellowCo/unocss-preset-weapp</span>
    <span class="hljs-title function_">presetWeapp</span>(),
    <span class="hljs-comment">// attributify autocomplete</span>
    <span class="hljs-title function_">presetWeappAttributify</span>(),
  ],
  <span class="hljs-attr">shortcuts</span>: [
    {
      <span class="hljs-string">"flex-center"</span>: <span class="hljs-string">"flex justify-center items-center"</span>,
      <span class="hljs-string">"flex-col"</span>: <span class="hljs-string">"flex flex-col"</span>,
    },
  ],

  <span class="hljs-attr">transformers</span>: [
    <span class="hljs-comment">// https://github.com/MellowCo/unocss-preset-weapp/tree/main/src/transformer/transformerAttributify</span>
    <span class="hljs-title function_">transformerAttributify</span>(),

    <span class="hljs-comment">// https://github.com/MellowCo/unocss-preset-weapp/tree/main/src/transformer/transformerClass</span>
    <span class="hljs-title function_">transformerClass</span>(),
  ],
};

</code></pre>
</li>
</ul>
<p>​		<strong><code>shortcuts</code> 自定义样式组合</strong>：可以在 <code>shortcuts</code> 中定义常用的样式组合，以便简化项目中的样式使用和维护，避免冗余和重复的样式。</p>
<ul>
<li>
<p><strong>main.ts</strong></p>
<pre><code class="hljs language-arduino" lang="arduino"><span class="hljs-keyword">import</span> <span class="hljs-string">'uno.css'</span>
</code></pre>
</li>
</ul>
<h3 data-id="heading-57">测试</h3>
<p>下图展示了在 VSCode 中测试 UnoCSS 时，智能提示和样式设置功能已经正常生效。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c02fba41c2654131adbe9154d200c4d2~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=qtiZJPFYwhEVQd%2BwfZzIwdLAa%2Fg%3D" alt="image.png" loading="lazy"></p>
<p>此外，在 <code>unocss.config.ts</code> 文件中预设的 <code>shortcuts</code> 组合样式也得到了正确应用。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/fbef924601bb4fdb87f8a296baa9e67b~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=EGTM8DSABPS1rc2m%2F9eMenz42po%3D" alt="image.png" loading="lazy"></p>
<h2 data-id="heading-58">添加 TabBar</h2>
<p>在 APP 开发中，底部导航栏（TabBar）是移动端应用的重要部分，方便用户在不同页面间进行切换。</p>
<h3 data-id="heading-59">添加页面</h3>
<p>在初始化的模板项目中，<code>src/pages</code> 目录下默认有一个 <code>index/index.vue</code> 页面。为了更好地演示 <code>TabBar</code> 的切换效果，我们在 <code>pages</code> 目录下再新增两个页面：</p>
<ul>
<li>
<p><strong>工作台页面</strong>（<code>src/pages/work/index.vue</code>）：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"flex-center flex-col"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-cyan font-bold text-lg"</span>&gt;</span>工作台<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
</code></pre>
</li>
<li>
<p><strong>我的页面</strong>（<code>src/pages/my/index.vue</code>）：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"flex-center flex-col"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-blue font-bold text-lg"</span>&gt;</span>我的<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
</code></pre>
</li>
</ul>
<h3 data-id="heading-60">添加图标</h3>
<p>在 <code>src/static</code> 目录下创建一个 <code>tabbar</code> 文件夹，存放从 iconfont 获取的图标。每个图标都需要有未激活和激活两种状态的样式。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f44a6d751bf544279d4fadb25fc10b6e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=P0L61jzmXQqW8UkZRWJ397OZDMM%3D" alt="image.png" loading="lazy"></p>
<h3 data-id="heading-61">配置 TabBar</h3>
<p>在 UniApp 项目中，底部导航栏（TabBar）通过配置 <code>pages.json</code> 文件来实现。首先，找到并打开项目根目录下的 <code>src/pages.json</code> 文件。在该文件中，可以为每个页面配置导航栏，同时定义 TabBar。</p>
<p>下面是完整的配置示例，注意 <code>tabBar</code> 中的 <code>pagePath</code> 必须对应 <code>pages</code> 目录下的实际页面路径。</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"pages"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"path"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"pages/index/index"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"style"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">"navigationBarTitleText"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"首页"</span>
      <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
    <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"path"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"pages/work/index"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"style"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">"navigationBarTitleText"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"工作台"</span>
      <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
    <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"path"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"pages/mine/index"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"style"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">"navigationBarTitleText"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"我的"</span>
      <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"tabBar"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"color"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"#474747"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"selectedColor"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"#3B8DFF"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"backgroundColor"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"#F8F8F8"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"list"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
      <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">"pagePath"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"pages/index/index"</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"text"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"首页"</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"iconPath"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"static/tabbar/home.png"</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"selectedIconPath"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"static/tabbar/home-active.png"</span>
      <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
      <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">"pagePath"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"pages/work/index"</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"text"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"工作台"</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"iconPath"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"static/tabbar/work.png"</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"selectedIconPath"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"static/tabbar/work-active.png"</span>
      <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
      <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">"pagePath"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"pages/mine/index"</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"text"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"我的"</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"iconPath"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"static/tabbar/mine.png"</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"selectedIconPath"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"static/tabbar/mine-active.png"</span>
      <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">]</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h3 data-id="heading-62">测试</h3>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c003f932b94342558a28133b7e393767~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=qcoDrxh%2Bo7ZUHFuxTcs0IVBkn%2Fs%3D" alt="在这里插入图片描述" loading="lazy"></p>
<h2 data-id="heading-63">按需自动导入</h2>
<p>在传统的 Vue 开发中，我们通常需要在每个页面手动导入 Vue 组合式 API（如 <code>ref</code>, <code>reactive</code>, <code>onMounted</code> 等）。随着项目的增大，手动导入会增加代码的冗余度，降低开发体验。</p>
<p>通过对比，来看一下手动导入与按需自动导入的区别：</p>













<table><thead><tr><th>手动导入</th><th>按需自动导入</th></tr></thead><tbody><tr><td><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c23c44b82b4b4a1e8173907817d9bcf0~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=GWu2auFZdP0SV%2BGlL3y%2BcMT4Y1k%3D" alt="image.png" loading="lazy"></td><td><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/01b843e27e804f92ab21d55f95b41d96~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=AfFL009wg4HccQx0qknmIAWad5U%3D" alt="image.png" loading="lazy"></td></tr></tbody></table>
<p><strong>手动导入：</strong> 每个页面都需要显式地引入 <code>ref</code>, <code>reactive</code>, <code>onMounted</code> 等组合式 API。
<strong>按需自动导入：</strong> 配置了自动导入插件后，这些 API 无需显式导入即可直接使用，减少了重复代码，提高了开发效率。</p>
<p>由于当前还未整合按需自动导入插件，所以右图的代码仍然报错，提示未找到 <code>ref</code> 和 <code>reactive</code> 的定义。这展示了按需自动导入的重要性：一旦整合插件，这类错误将被消除，代码更加简洁易维护。</p>
<h3 data-id="heading-64">安装依赖</h3>
<p>首先使用以下命令安装 <code>unplugin-auto-import</code> 插件：</p>
<pre><code class="hljs language-bash" lang="bash">pnpm add -D unplugin-auto-import
</code></pre>
<h3 data-id="heading-65">配置自动导入</h3>
<p>接着，在 <code>vite.config.ts</code> 中配置 <code>unplugin-auto-import</code> 插件，确保 Vue 和 UniApp 的 API 能够自动按需导入。</p>
<pre><code class="hljs language-typescript" lang="typescript"><span class="hljs-comment">// vite.config.ts</span>
<span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">"vite"</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">AutoImport</span> <span class="hljs-keyword">from</span> <span class="hljs-string">"unplugin-auto-import/vite"</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(<span class="hljs-keyword">async</span> () =&gt; {
  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">plugins</span>: [
      <span class="hljs-title function_">uni</span>(), <span class="hljs-comment">// 这里是你的 uni-app 插件</span>
      <span class="hljs-title class_">AutoImport</span>({
        <span class="hljs-attr">imports</span>: [<span class="hljs-string">"vue"</span>, <span class="hljs-string">"uni-app"</span>], <span class="hljs-comment">// 自动导入 Vue 和 UniApp 的 API</span>
        <span class="hljs-attr">dts</span>: <span class="hljs-string">"src/types/auto-imports.d.ts"</span>, <span class="hljs-comment">// 自动生成类型声明文件</span>
        <span class="hljs-attr">eslintrc</span>: {
          <span class="hljs-attr">enabled</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 生成 ESLint 配置文件</span>
          <span class="hljs-attr">filepath</span>: <span class="hljs-string">'./.eslintrc-auto-import.json'</span>, <span class="hljs-comment">// ESLint 配置文件路径</span>
        },
      }),
    ],
  };
});
</code></pre>
<h3 data-id="heading-66">配置 ESLint 规则</h3>
<p>为了让 ESLint 能识别这些通过 <code>unplugin-auto-import</code> 自动导入的 API，需要在 ESLint 的配置中引入 <code>unplugin-auto-import</code> 生成的 <code>.eslintrc-auto-import.json</code> 文件。</p>
<p>在 ESLint 9.x 版本中，使用 Flat Config 时不再支持 <code>extends</code> 关键字。因此，<strong>不能</strong>使用以下配置：</p>
<pre><code class="hljs language-typescript" lang="typescript"><span class="hljs-comment">// 错误示例</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [
  {
    <span class="hljs-attr">extends</span>: [<span class="hljs-string">"./.eslintrc-auto-import.json"</span>], <span class="hljs-comment">// 这种扩展方式在 Flat Config 中不再支持</span>
  },
];
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/cd21199f13514a95ae0aa2963ea98ccc~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=xoRRxdQ%2BNqMlLqtt3hCEXmWkp20%3D" alt="image.png" loading="lazy"></p>
<p>取而代之的是直接引入 <code>.eslintrc-auto-import.json</code> 文件内容，通过解析文件的方式将自动导入的全局变量配置整合进 ESLint 配置。</p>
<p>在 <code>eslint.config.mjs</code> 中添加如下配置：</p>
<pre><code class="hljs language-typescript" lang="typescript"><span class="hljs-comment">// eslint.config.mjs 正确的配置</span>
<span class="hljs-keyword">import</span> { readFileSync } <span class="hljs-keyword">from</span> <span class="hljs-string">"fs"</span>;
<span class="hljs-keyword">import</span> { fileURLToPath } <span class="hljs-keyword">from</span> <span class="hljs-string">"url"</span>;
<span class="hljs-keyword">import</span> { dirname, resolve } <span class="hljs-keyword">from</span> <span class="hljs-string">"path"</span>;

<span class="hljs-comment">// 动态读取 .eslintrc-auto-import.json 文件内容</span>
<span class="hljs-keyword">const</span> autoImportConfig = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(
  <span class="hljs-title function_">readFileSync</span>(
    <span class="hljs-title function_">resolve</span>(<span class="hljs-title function_">dirname</span>(<span class="hljs-title function_">fileURLToPath</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>)), <span class="hljs-string">".eslintrc-auto-import.json"</span>),
    <span class="hljs-string">"utf-8"</span>,
  ),
);
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [
  {
   <span class="hljs-comment">// 语言选项配置，定义全局变量</span>
    <span class="hljs-attr">languageOptions</span>: {
      <span class="hljs-attr">globals</span>: {
      	<span class="hljs-comment">// ...</span>
        ...autoImportConfig.<span class="hljs-property">globals</span>, <span class="hljs-comment">// 自动导入的全局变量</span>
      },
    },
  },
];
</code></pre>
<p>这样配置后，ESLint 将能够识别通过自动导入的 API，避免例如 <code>'ref' is not defined</code> 这样的错误，从而使项目的开发更加顺畅。</p>
<h3 data-id="heading-67">测试</h3>
<p>通过上述步骤配置后，原先在未手动导入情况下报错的页面，现在可以正常使用 <code>ref</code>, <code>reactive</code> 等 API，而无需显式导入。</p>
<p>以下是最终的效果：</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c652923013f648de98e13d533d60894f~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=cvarLqI14brpAz6hXSre2kCoZBw%3D" alt="image.png" loading="lazy"></p>
<p>整合按需自动导入后，你将不再需要在每个页面显式导入 Vue 或 UniApp 的组合式 API，大幅度减少了重复的代码，提升了开发体验。</p>
<h2 data-id="heading-68">环境变量</h2>
<blockquote>
<p>Vite 环境变量主要是为了区分开发、测试、生产等环境的变量</p>
</blockquote>
<p>下面的整合过程参考 <a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fguide%2Fenv-and-mode.html" target="_blank" title="https://cn.vitejs.dev/guide/env-and-mode.html" ref="nofollow noopener noreferrer">Vite 环境变量配置官方文档 </a></p>
<h3 data-id="heading-69">配置环境变量</h3>
<p>项目根目录新建 <code>.env.development</code> 、<code>.env.production</code></p>
<ul>
<li>
<p>开发环境变量配置：.env.development</p>
<pre><code class="hljs language-properties" lang="properties"># 变量必须以 VITE_ 为前缀才能暴露给外部读取

# 项目运行的端口号
VITE_APP_PORT = 5173

# API 基础路径，开发环境下的请求前缀
VITE_APP_BASE_API = '/dev-api'

# API 服务器的 URL
VITE_APP_API_URL = https://api.youlai.tech
</code></pre>
</li>
<li>
<p>生产环境变量配置：.env.production</p>
<pre><code class="hljs language-properties" lang="properties"># API 基础路径，生产环境下的请求前缀
VITE_APP_BASE_API = '/prod-api'

# API 服务器的 URL
VITE_APP_API_URL = https://api.youlai.tech
</code></pre>
</li>
</ul>
<h3 data-id="heading-70">智能提示</h3>
<p>首先，在 <code>src/types/env.d.ts</code> 文件中添加环境变量的类型声明：</p>
<pre><code class="hljs language-typescript" lang="typescript"><span class="hljs-comment">// src/types/env.d.ts</span>
<span class="hljs-keyword">interface</span> <span class="hljs-title class_">ImportMetaEnv</span> {
  <span class="hljs-comment">/**
   * 应用端口
   */</span>
  <span class="hljs-attr">VITE_APP_PORT</span>: <span class="hljs-built_in">number</span>;
  <span class="hljs-comment">/**
   * API 基础路径
   */</span>
  <span class="hljs-attr">VITE_APP_BASE_API</span>: <span class="hljs-built_in">string</span>;
  <span class="hljs-comment">/**
   * API 服务器的 URL
   */</span>
  <span class="hljs-attr">VITE_APP_API_URL</span>: <span class="hljs-built_in">string</span>;
}

<span class="hljs-keyword">interface</span> <span class="hljs-title class_">ImportMeta</span> {
  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">env</span>: <span class="hljs-title class_">ImportMetaEnv</span>;
}
</code></pre>
<p>确保 TypeScript 编译器使用的模块系统支持 <code>import.meta</code>。在 <code>tsconfig.json</code> 文件中，你可以指定 <code>es2020</code>、<code>es2022</code> 或 <code>esnext</code> 等模块系统。例如：</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-comment">// tsconfig.json</span>
<span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"compilerOptions"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"module"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"esnext"</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 支持 import.meta</span>
    <span class="hljs-comment">// ...</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>在任意页面中测试 <code>import.meta</code> 是否能够智能提示环境变量：</p>
<pre><code class="hljs language-typescript" lang="typescript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">VITE_APP_PORT</span>);
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/52afa65740f84939a7deacf06edeb147~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=bnHCIItWmU%2Fi8MWgobh%2FrUf7B40%3D" alt="image.png" loading="lazy"></p>
<h2 data-id="heading-71">整合 HTTP 请求</h2>
<p>通过一个登录案例演示如何在Uniapp中整合HTTP请求。这里未使用<strong>axios</strong>和<strong>alova</strong>请求库的原因在于，Uniapp自身提供了跨平台的<strong>uni.request</strong>方法，该方法在不同平台（如小程序、App和H5）下表现一致，且无需额外安装第三方库，从而减少了项目的依赖复杂性和体积。</p>
<h3 data-id="heading-72">封装请求工具</h3>
<p>在 <code>global.d.ts</code> 中定义全局响应数据类型 <code>ResponseData</code>：</p>
<pre><code class="hljs language-typescript" lang="typescript"><span class="hljs-comment">// src/types/global.d.ts</span>
<span class="hljs-keyword">declare</span> <span class="hljs-variable language_">global</span> {
  <span class="hljs-comment">/**
   * 响应数据结构
   */</span>
  <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ResponseData</span>&lt;T = <span class="hljs-built_in">any</span>&gt; {
    <span class="hljs-attr">code</span>: <span class="hljs-built_in">string</span>;  <span class="hljs-comment">// 业务状态码</span>
    <span class="hljs-attr">data</span>: T;       <span class="hljs-comment">// 返回数据</span>
    <span class="hljs-attr">msg</span>: <span class="hljs-built_in">string</span>;   <span class="hljs-comment">// 消息</span>
  }
}
<span class="hljs-keyword">export</span> {};
</code></pre>
<p>在 <code>src/utils/request.ts</code> 下创建一个 HTTP 请求工具，用于与 API 服务器进行通信：</p>
<pre><code class="hljs language-typescript" lang="typescript"><span class="hljs-comment">// src/utils/request.ts</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> request&lt;T&gt;(<span class="hljs-attr">options</span>: <span class="hljs-title class_">UniApp</span>.<span class="hljs-property">RequestOptions</span>): <span class="hljs-title class_">Promise</span>&lt;T&gt; {
  <span class="hljs-keyword">const</span> token = uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">"token"</span>); <span class="hljs-comment">// 从本地缓存获取 token</span>

  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {
    uni.<span class="hljs-title function_">request</span>({
      ...options,
      <span class="hljs-comment">// VITE_APP_API_URL 是在 Vite 项目的 .env.development 文件中配置的环境变量，表示 API 的路径</span>
      <span class="hljs-attr">url</span>: <span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-keyword">import</span>.meta.env.VITE_APP_API_URL}</span><span class="hljs-subst">${options.url}</span>`</span>,
      <span class="hljs-attr">header</span>: {
        ...options.<span class="hljs-property">header</span>,
        <span class="hljs-title class_">Authorization</span>: token,
      },
      <span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
        <span class="hljs-keyword">const</span> resData = response.<span class="hljs-property">data</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">ResponseData</span>&lt;T&gt;;
        <span class="hljs-comment">// 业务状态码 00000 表示成功</span>
        <span class="hljs-keyword">if</span> (resData.<span class="hljs-property">code</span> === <span class="hljs-string">"00000"</span>) {
          <span class="hljs-title function_">resolve</span>(resData.<span class="hljs-property">data</span>);
        } <span class="hljs-keyword">else</span> {
          uni.<span class="hljs-title function_">showToast</span>({
            <span class="hljs-attr">title</span>: resData.<span class="hljs-property">msg</span> || <span class="hljs-string">"业务处理失败"</span>,
            <span class="hljs-attr">icon</span>: <span class="hljs-string">"none"</span>,
            <span class="hljs-attr">duration</span>: <span class="hljs-number">2000</span>,
          });
          <span class="hljs-title function_">reject</span>({
            <span class="hljs-attr">message</span>: resData.<span class="hljs-property">msg</span> || <span class="hljs-string">"业务处理失败"</span>,
            <span class="hljs-attr">code</span>: resData.<span class="hljs-property">code</span>,
          });
        }
      },
      <span class="hljs-attr">fail</span>: <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> {
        uni.<span class="hljs-title function_">showToast</span>({
          <span class="hljs-attr">title</span>: <span class="hljs-string">"网络请求失败"</span>,
          <span class="hljs-attr">icon</span>: <span class="hljs-string">"none"</span>,
          <span class="hljs-attr">duration</span>: <span class="hljs-number">2000</span>,
        });
        <span class="hljs-title function_">reject</span>({
          <span class="hljs-attr">message</span>: <span class="hljs-string">"网络请求失败"</span>,
          error,
        });
      },
    });
  });
}
</code></pre>
<p><strong>注意事项</strong></p>
<p>当首次使用该请求工具类时，可能会出现 <code>'uni' is not defined</code> 的 ESLint 错误，如下图所示：</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/38fa8cd335064318bfbd090fe4c94f13~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=Vq0CgxaY721Mp1Kbnsg%2Fj9ROTns%3D" alt="image.png" loading="lazy"></p>
<p>为解决此问题，需要在 ESLint 配置文件中定义 <code>uni</code> 为全局变量：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// eslint.config.mjs</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [
  {
   <span class="hljs-comment">// 语言选项配置，定义全局变量</span>
    <span class="hljs-attr">languageOptions</span>: {
      <span class="hljs-attr">globals</span>: {
        <span class="hljs-comment">// ...</span>
        ...{
          <span class="hljs-attr">uni</span>: <span class="hljs-string">"readonly"</span>, <span class="hljs-comment">// uni-app 全局对象</span>
        },
      },
    },
  },
];
</code></pre>
<h3 data-id="heading-73">登录接口定义</h3>
<p><strong>请求URL</strong>: <a href="https://link.juejin.cn?target=https%3A%2F%2Fapi.youlai.tech%2Fapi%2Fv1%2Fauth%2Flogin" target="_blank" title="https://api.youlai.tech/api/v1/auth/login" ref="nofollow noopener noreferrer">api.youlai.tech/api/v1/auth…</a></p>
<p><strong>请求参数：</strong></p>

















<table><thead><tr><th>参数名</th><th>参数值</th></tr></thead><tbody><tr><td>username</td><td>admin</td></tr><tr><td>password</td><td>123456</td></tr></tbody></table>
<p><strong>返回响应：</strong></p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"code"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"00000"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"data"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">"accessToken"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIxxx.xxxxxxx"</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"tokenType"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Bearer"</span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"msg"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"一切ok"</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>根据上述登录接口信息，创建 <code>AuthAPI</code> 类用于处理登录请求：</p>
<pre><code class="hljs language-typescript" lang="typescript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">"@/utils/request"</span>;

<span class="hljs-keyword">const</span> <span class="hljs-title class_">AuthAPI</span> = {
  <span class="hljs-comment">/**
   * 登录接口
   *
   * <span class="hljs-doctag">@param</span> username 用户名
   * <span class="hljs-doctag">@param</span> password 密码
   * <span class="hljs-doctag">@returns</span> 返回 token
   */</span>
  <span class="hljs-title function_">login</span>(<span class="hljs-attr">username</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">password</span>: <span class="hljs-built_in">string</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">LoginResult</span>&gt; {
    <span class="hljs-keyword">return</span> request&lt;<span class="hljs-title class_">LoginResult</span>&gt;({
      <span class="hljs-attr">url</span>: <span class="hljs-string">"/api/v1/auth/login"</span>,
      <span class="hljs-attr">method</span>: <span class="hljs-string">"POST"</span>,
      <span class="hljs-attr">data</span>: {
        username,
        password,
      },
      <span class="hljs-attr">header</span>: {
        <span class="hljs-string">"Content-Type"</span>: <span class="hljs-string">"application/x-www-form-urlencoded"</span>,
      },
    });
  },

  <span class="hljs-comment">/**
   * 登出接口
   */</span>
  <span class="hljs-title function_">logout</span>(): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt; {
    <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>({
      <span class="hljs-attr">url</span>: <span class="hljs-string">"/api/v1/auth/logout"</span>,
      <span class="hljs-attr">method</span>: <span class="hljs-string">"DELETE"</span>,
    });
  },
};

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">AuthAPI</span>;

<span class="hljs-comment">/** 登录响应 */</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">LoginResult</span> {
  <span class="hljs-comment">/** 访问token */</span>
  accessToken?: <span class="hljs-built_in">string</span>;
  <span class="hljs-comment">/** token 类型 */</span>
  tokenType?: <span class="hljs-built_in">string</span>;
}

</code></pre>
<h3 data-id="heading-74">登录页面</h3>
<p>新建 <code>src/pages/login/index.vue</code> 文件，编写登录页面及逻辑：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"flex-col"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入用户名"</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入密码"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"handleLogin"</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> <span class="hljs-title class_">AuthAPI</span>, { <span class="hljs-title class_">LoginResult</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'@/api/auth'</span>;

<span class="hljs-keyword">const</span> username = <span class="hljs-title function_">ref</span>(<span class="hljs-string">''</span>);
<span class="hljs-keyword">const</span> password = <span class="hljs-title function_">ref</span>(<span class="hljs-string">''</span>);
<span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>();

<span class="hljs-keyword">const</span> <span class="hljs-title function_">handleLogin</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">try</span> {
    <span class="hljs-keyword">const</span> <span class="hljs-attr">response</span>: <span class="hljs-title class_">LoginResult</span> = <span class="hljs-keyword">await</span> <span class="hljs-title class_">AuthAPI</span>.<span class="hljs-title function_">login</span>(username.<span class="hljs-property">value</span>, password.<span class="hljs-property">value</span>);
    <span class="hljs-keyword">if</span> (response.<span class="hljs-property">accessToken</span>) {
      uni.<span class="hljs-title function_">setStorageSync</span>(<span class="hljs-string">'token'</span>, response.<span class="hljs-property">accessToken</span>);
      uni.<span class="hljs-title function_">showToast</span>({ <span class="hljs-attr">title</span>: <span class="hljs-string">'登录成功'</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">'success'</span> });
    } <span class="hljs-keyword">else</span> {
      uni.<span class="hljs-title function_">showToast</span>({ <span class="hljs-attr">title</span>: <span class="hljs-string">'登录失败'</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">'none'</span> });
    }
  } <span class="hljs-keyword">catch</span> (err) {
    uni.<span class="hljs-title function_">showToast</span>({ <span class="hljs-attr">title</span>: <span class="hljs-string">'登录失败'</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">'none'</span> });
  }
};
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
</code></pre>
<p>在 <code>pages.json</code> 文件中，声明登录页面的路由：</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-comment">// src/pages.json</span>
<span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"pages"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"path"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"pages/login/index"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"style"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">"navigationBarTitleText"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"登录"</span>
      <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h3 data-id="heading-75">登录测试</h3>
<p>访问登录页面：<a href="https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A5173%2F%23%2Fpages%2Flogin%2Findex%25EF%25BC%258C%25E8%25BE%2593%25E5%2585%25A5%25E7%2594%25A8%25E6%2588%25B7%25E5%2590%258D%25E5%2592%258C%25E5%25AF%2586%25E7%25A0%2581" target="_blank" title="http://localhost:5173/#/pages/login/index%EF%BC%8C%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81" ref="nofollow noopener noreferrer">http://localhost:5173/#/pages/login/index，输入用户名和密码</a> (<code>admin</code>/<code>123456</code>) 测试登录接口，登录成功后可以看到返回的访问令牌。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/eea09b645a584737ad75f6921206777e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=RqOpUKwrKs37e6j9QapcHO95V0E%3D" alt="在这里插入图片描述" loading="lazy"></p>
<h3 data-id="heading-76">整合源码</h3>
<p>整合<code>HTTP请求</code>代码版本：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgitee.com%2Fyoulaiorg%2Fvue-uniapp-template%2Ftree%2F737f6a3ee5217dcad006fa06b6fae63374d9826b" target="_blank" title="https://gitee.com/youlaiorg/vue-uniapp-template/tree/737f6a3ee5217dcad006fa06b6fae63374d9826b" ref="nofollow noopener noreferrer">vue-uniapp-template#737f6a3</a>。</p>
<h2 data-id="heading-77">整合 Pinia</h2>
<blockquote>
<p>Pinia 是 Vue 的状态管理库，专为跨组件或页面共享状态设计。</p>
</blockquote>
<ul>
<li><strong>Pinia 官方文档</strong>: <a href="https://link.juejin.cn?target=https%3A%2F%2Fpinia.vuejs.org%2Fzh%2Fgetting-started.html" target="_blank" title="https://pinia.vuejs.org/zh/getting-started.html" ref="nofollow noopener noreferrer">pinia.vuejs.org/zh/getting-…</a></li>
</ul>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/b33250467a9347e494372f077989ad72~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=KZWMBg4M5g%2By9WvMESKOns%2BVzCM%3D" alt="image.png" loading="lazy"></p>
<h3 data-id="heading-78">安装依赖</h3>
<p>首先，安装 <code>pinia</code> 依赖：</p>
<pre><code class="hljs language-bash" lang="bash">pnpm add pinia
</code></pre>
<h3 data-id="heading-79">全局注册</h3>
<p>在项目的 <code>src</code> 目录下创建 <code>store</code> 文件夹，并新建 <code>index.ts</code> 文件，初始化并注册 Pinia 实例。</p>
<pre><code class="hljs language-typescript" lang="typescript"><span class="hljs-comment">// src/store/index.ts</span>
<span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">App</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"vue"</span>;
<span class="hljs-keyword">import</span> { createPinia } <span class="hljs-keyword">from</span> <span class="hljs-string">"pinia"</span>;

<span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createPinia</span>();
<span class="hljs-comment">// 注册 Pinia</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">setupStore</span>(<span class="hljs-params">app: App&lt;Element&gt;</span>) {
  app.<span class="hljs-title function_">use</span>(store); <span class="hljs-comment">// 全局注册 Pinia</span>
}
</code></pre>
<p>接着，将 <code>store</code> 在项目入口文件 <code>main.ts</code> 中引入，并将其作为全局插件传递给应用：</p>
<pre><code class="hljs language-typescript" lang="typescript"><span class="hljs-comment">// src/main.ts</span>
<span class="hljs-keyword">import</span> { createSSRApp } <span class="hljs-keyword">from</span> <span class="hljs-string">"vue"</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">"./App.vue"</span>;

<span class="hljs-keyword">import</span> { setupStore } <span class="hljs-keyword">from</span> <span class="hljs-string">"@/store"</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createApp</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createSSRApp</span>(<span class="hljs-title class_">App</span>);
  <span class="hljs-comment">// 全局注册 store</span>
  <span class="hljs-title function_">setupStore</span>(app);

  <span class="hljs-keyword">return</span> {
    app,
  };
}

</code></pre>
<p>接下来，我们通过 Pinia 管理登录状态和用户信息，并在多个页面共享状态。</p>
<h3 data-id="heading-80">用户信息接口</h3>
<p>编写一个 API 来获取当前登录用户的信息：</p>
<pre><code class="hljs language-typescript" lang="typescript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">"@/utils/request"</span>;

<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">USER_BASE_URL</span> = <span class="hljs-string">"/api/v1/users"</span>;

<span class="hljs-keyword">const</span> <span class="hljs-title class_">UserAPI</span> = {
  <span class="hljs-comment">/**
   * 获取当前登录用户信息
   *
   * <span class="hljs-doctag">@returns</span> 登录用户昵称、头像信息，包括角色和权限
   */</span>
  <span class="hljs-title function_">getUserInfo</span>(): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">UserInfo</span>&gt; {
    <span class="hljs-keyword">return</span> request&lt;<span class="hljs-title class_">UserInfo</span>&gt;({
      <span class="hljs-attr">url</span>: <span class="hljs-string">`<span class="hljs-subst">${USER_BASE_URL}</span>/me`</span>,
      <span class="hljs-attr">method</span>: <span class="hljs-string">"GET"</span>,
    });
  },
};
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">UserAPI</span>;

<span class="hljs-comment">/** 登录用户信息 */</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserInfo</span> {
  <span class="hljs-comment">/** 用户ID */</span>
  userId?: <span class="hljs-built_in">number</span>;

  <span class="hljs-comment">/** 用户名 */</span>
  username?: <span class="hljs-built_in">string</span>;

  <span class="hljs-comment">/** 昵称 */</span>
  nickname?: <span class="hljs-built_in">string</span>;

  <span class="hljs-comment">/** 头像URL */</span>
  avatar?: <span class="hljs-built_in">string</span>;

  <span class="hljs-comment">/** 角色 */</span>
  <span class="hljs-attr">roles</span>: <span class="hljs-built_in">string</span>[];

  <span class="hljs-comment">/** 权限 */</span>
  <span class="hljs-attr">perms</span>: <span class="hljs-built_in">string</span>[];
}
</code></pre>
<h3 data-id="heading-81">用户状态管理</h3>
<p>通过 Pinia 定义 <code>user</code> 模块，管理登录状态、用户信息等。</p>
<pre><code class="hljs language-typescript" lang="typescript"><span class="hljs-comment">//  src/store/module/user.ts</span>
<span class="hljs-keyword">import</span> { defineStore } <span class="hljs-keyword">from</span> <span class="hljs-string">"pinia"</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">AuthAPI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">"@/api/auth"</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">UserAPI</span>, { <span class="hljs-title class_">UserInfo</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"@/api/user"</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useUserStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">"user"</span>, <span class="hljs-function">() =&gt;</span> {
  <span class="hljs-comment">// 确保 token 是响应式的</span>
  <span class="hljs-keyword">const</span> token = ref&lt;<span class="hljs-built_in">string</span>&gt;(uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">"token"</span>) || <span class="hljs-string">""</span>);
  <span class="hljs-keyword">const</span> userInfo = ref&lt;<span class="hljs-title class_">UserInfo</span> | <span class="hljs-literal">null</span>&gt;(<span class="hljs-literal">null</span>);

  <span class="hljs-comment">// 登录</span>
  <span class="hljs-keyword">const</span> <span class="hljs-title function_">login</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">username: <span class="hljs-built_in">string</span>, password: <span class="hljs-built_in">string</span></span>) =&gt; {
    <span class="hljs-keyword">const</span> { tokenType, accessToken } = <span class="hljs-keyword">await</span> <span class="hljs-title class_">AuthAPI</span>.<span class="hljs-title function_">login</span>(username, password);
    token.<span class="hljs-property">value</span> = <span class="hljs-string">`<span class="hljs-subst">${tokenType}</span> <span class="hljs-subst">${accessToken}</span>`</span>; <span class="hljs-comment">// Bearer token</span>
    uni.<span class="hljs-title function_">setStorageSync</span>(<span class="hljs-string">"token"</span>, token.<span class="hljs-property">value</span>);
  };

  <span class="hljs-comment">// 获取用户信息</span>
  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getUserInfo</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; {
    <span class="hljs-keyword">const</span> info = <span class="hljs-keyword">await</span> <span class="hljs-title class_">UserAPI</span>.<span class="hljs-title function_">getUserInfo</span>();
    userInfo.<span class="hljs-property">value</span> = info;
  };

  <span class="hljs-comment">// 登出</span>
  <span class="hljs-keyword">const</span> <span class="hljs-title function_">logout</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; {
    <span class="hljs-keyword">await</span> <span class="hljs-title class_">AuthAPI</span>.<span class="hljs-title function_">logout</span>();
    userInfo.<span class="hljs-property">value</span> = <span class="hljs-literal">null</span>;
    token.<span class="hljs-property">value</span> = <span class="hljs-string">""</span>; <span class="hljs-comment">// 清空 token</span>
    uni.<span class="hljs-title function_">removeStorageSync</span>(<span class="hljs-string">"token"</span>); <span class="hljs-comment">// 从本地缓存移除 token</span>
  };

  <span class="hljs-keyword">return</span> {
    token,
    userInfo,
    login,
    logout,
    getUserInfo,
  };
});
</code></pre>
<h3 data-id="heading-82">个人中心页面</h3>
<p>个人中心页面展示用户的头像和昵称，未登录时引导用户去登录。</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"flex-center flex-col"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-blue font-bold text-lg"</span>&gt;</span>我的<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span>

    <span class="hljs-comment">&lt;!-- 判断是否已登录 --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"isLoggedIn"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"userInfo?.avatar"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"w100 h100 mb-5 rounded-full"</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-lg font-bold"</span>&gt;</span>{{ userInfo?.nickname }}<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"handleLogout"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-5"</span>&gt;</span>退出登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

    <span class="hljs-comment">&lt;!-- 未登录时显示去登录按钮 --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-else</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>您还未登录，请先登录<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"goToLoginPage"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-5"</span>&gt;</span>去登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { useUserStore } <span class="hljs-keyword">from</span> <span class="hljs-string">"@/store/modules/user"</span>;

<span class="hljs-comment">// 使用 pinia</span>
<span class="hljs-keyword">const</span> userStore = <span class="hljs-title function_">useUserStore</span>();

<span class="hljs-keyword">const</span> isLoggedIn = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> userStore.<span class="hljs-property">token</span>);
<span class="hljs-keyword">const</span> userInfo = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> userStore.<span class="hljs-property">userInfo</span>);

<span class="hljs-comment">// 跳转到登录页面</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">goToLoginPage</span> = (<span class="hljs-params"></span>) =&gt; {
  uni.<span class="hljs-title function_">navigateTo</span>({ <span class="hljs-attr">url</span>: <span class="hljs-string">"/pages/login/index"</span> });
};

<span class="hljs-comment">// 退出登录处理</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">handleLogout</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">await</span> userStore.<span class="hljs-title function_">logout</span>();
  uni.<span class="hljs-title function_">showToast</span>({ <span class="hljs-attr">title</span>: <span class="hljs-string">"已退出登录"</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">"success"</span> });
};
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<p>登录页通过 <code>Pinia</code> 实现用户信息的全局状态管理，并在登录成功后跳转到个人中心页面。</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"flex-col items-center"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入用户名"</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入密码"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-5"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"handleLogin"</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { useUserStore } <span class="hljs-keyword">from</span> <span class="hljs-string">"@/store/modules/user"</span>;

<span class="hljs-comment">// 登录表单</span>
<span class="hljs-keyword">const</span> username = <span class="hljs-title function_">ref</span>(<span class="hljs-string">"admin"</span>);
<span class="hljs-keyword">const</span> password = <span class="hljs-title function_">ref</span>(<span class="hljs-string">"123456"</span>);

<span class="hljs-comment">// 使用 pinia</span>
<span class="hljs-keyword">const</span> userStore = <span class="hljs-title function_">useUserStore</span>();

<span class="hljs-comment">// 登录处理</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">handleLogin</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">await</span> userStore.<span class="hljs-title function_">login</span>(username.<span class="hljs-property">value</span>, password.<span class="hljs-property">value</span>);

  <span class="hljs-keyword">if</span> (!!userStore.<span class="hljs-property">token</span>) {
    <span class="hljs-keyword">await</span> userStore.<span class="hljs-title function_">getUserInfo</span>(); <span class="hljs-comment">// 登录成功后获取用户信息</span>
    uni.<span class="hljs-title function_">showToast</span>({ <span class="hljs-attr">title</span>: <span class="hljs-string">"登录成功"</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">"success"</span> });
    uni.<span class="hljs-title function_">navigateBack</span>(); <span class="hljs-comment">// 登录成功后返回上一页</span>
  } <span class="hljs-keyword">else</span> {
    uni.<span class="hljs-title function_">showToast</span>({ <span class="hljs-attr">title</span>: <span class="hljs-string">"登录失败"</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">"none"</span> });
  }
};
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css">
<span class="hljs-selector-tag">input</span> {
  <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;
  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;
  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">16px</span>;
  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
</code></pre>
<h3 data-id="heading-83">测试效果</h3>
<p>登录后，个人中心会显示用户的头像和昵称。通过 Pinia 实现了登录状态的共享和跨页面传递。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/27ade3b841814fd48ada3611b9f39813~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=jOZOWepVm9yXyevsi10ebn%2BZdYE%3D" alt="在这里插入图片描述" loading="lazy"></p>
<h3 data-id="heading-84">整合源码</h3>
<p>整合<code>Pinia</code>代码版本：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgitee.com%2Fyoulaiorg%2Fvue-uniapp-template%2Ftree%2F737f6a3ee5217dcad006fa06b6fae63374d9826b" target="_blank" title="https://gitee.com/youlaiorg/vue-uniapp-template/tree/737f6a3ee5217dcad006fa06b6fae63374d9826b" ref="nofollow noopener noreferrer">vue-uniapp-template#737f6a3</a>。</p>
<h2 data-id="heading-85">反向代理</h2>
<p>在开发中，若服务端没有启用 CORS（跨域资源共享），浏览器会基于安全策略拦截跨域请求，导致无法访问接口。为了绕过这个问题，我们可以通过 Vite 的反向代理功能，将开发阶段的请求代理到真实的 API 服务器上，伪装成同源请求。</p>
<p>本节将介绍如何配置 Vite 的反向代理来处理跨域请求。</p>
<hr>
<h3 data-id="heading-86">环境变量配置</h3>
<p>我们将通过环境变量来管理项目端口和 API 请求地址，以下是 <code>.env.development</code> 中的相关配置：</p>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-comment"># .env.development</span>

<span class="hljs-comment"># 项目运行的端口号</span>
VITE_APP_PORT=5173

<span class="hljs-comment"># API 请求的基础路径（开发环境）</span>
VITE_APP_BASE_API=/dev-api

<span class="hljs-comment"># 真实 API 服务器的 URL</span>
VITE_APP_API_URL=https://api.youlai.tech
</code></pre>
<h3 data-id="heading-87">请求工具的调整</h3>
<p>为了让请求走代理，我们需要在请求工具中将 <code>VITE_APP_API_URL</code> 替换为 <code>VITE_APP_BASE_API</code>。这样，所有对 <code>API</code> 的请求都会通过代理标识 <code>/dev-api</code> 进行转发。</p>
<pre><code class="hljs language-typescript" lang="typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> request&lt;T&gt;(<span class="hljs-attr">options</span>: <span class="hljs-title class_">UniApp</span>.<span class="hljs-property">RequestOptions</span>): <span class="hljs-title class_">Promise</span>&lt;T&gt; {
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {
    uni.<span class="hljs-title function_">request</span>({
      ...options,
      <span class="hljs-comment">// 原请求方式: 使用真实 API URL</span>
      <span class="hljs-comment">// url: `${import.meta.env.VITE_APP_API_URL}${options.url}`, // 示例: https://api.youlai.tech/login</span>
      
      <span class="hljs-comment">// 修改后：使用代理标识，实际转发到真实 API</span>
      <span class="hljs-attr">url</span>: <span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-keyword">import</span>.meta.env.VITE_APP_BASE_API}</span><span class="hljs-subst">${options.url}</span>`</span>, <span class="hljs-comment">// 示例: http://localhost:5173/dev-api/login</span>
    });
  });
}
</code></pre>
<h3 data-id="heading-88">Vite 反向代理配置</h3>
<p>接下来，在 <code>vite.config.ts</code> 中添加反向代理配置，将 <code>/dev-api</code> 的请求代理到 <code>VITE_APP_API_URL</code>，通过 <code>http-proxy</code> 实现请求的转发。</p>
<pre><code class="hljs language-typescript" lang="typescript"><span class="hljs-comment">// vite.config.ts</span>
<span class="hljs-keyword">import</span> { defineConfig, <span class="hljs-title class_">UserConfig</span>, <span class="hljs-title class_">ConfigEnv</span>, loadEnv } <span class="hljs-keyword">from</span> <span class="hljs-string">"vite"</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(<span class="hljs-keyword">async</span> ({ mode }: <span class="hljs-title class_">ConfigEnv</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">UserConfig</span>&gt; =&gt; {
  <span class="hljs-keyword">const</span> env = <span class="hljs-title function_">loadEnv</span>(mode, process.<span class="hljs-title function_">cwd</span>());

  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">server</span>: {
      <span class="hljs-attr">host</span>: <span class="hljs-string">"0.0.0.0"</span>,
      <span class="hljs-attr">port</span>: +env.<span class="hljs-property">VITE_APP_PORT</span>,
      <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,
      <span class="hljs-comment">// 反向代理配置</span>
      <span class="hljs-attr">proxy</span>: {
        [env.<span class="hljs-property">VITE_APP_BASE_API</span>]: {
          <span class="hljs-attr">target</span>: env.<span class="hljs-property">VITE_APP_API_URL</span>, <span class="hljs-comment">// 目标服务器</span>
          <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,           <span class="hljs-comment">// 支持跨域</span>
          <span class="hljs-attr">rewrite</span>: <span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span> path.<span class="hljs-title function_">replace</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">"^"</span> + env.<span class="hljs-property">VITE_APP_BASE_API</span>), <span class="hljs-string">""</span>), <span class="hljs-comment">// 去掉前缀</span>
        },
      },
    },
    <span class="hljs-attr">plugins</span>: [
      <span class="hljs-comment">// 插件配置...</span>
    ],
  };
});
</code></pre>
<h3 data-id="heading-89">测试与验证</h3>
<p>在配置好反向代理后，浏览器发出的请求将被 Vite 的代理服务器拦截并转发至真实的 API 地址。例如，浏览器请求 <code>http://localhost:5173/dev-api/api/v1/auth/login</code> 时，Vite 会将该请求代理到 <code>https://api.youlai.tech/api/v1/auth/login</code>。</p>
<p>下图展示了这一过程，浏览器认为请求的 URL 与应用的主机地址一致，因此不会阻止该请求，即便真实请求已通过代理转发到外部服务器。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/84ae4696f41048d291d1086cb39db12d~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=y80WXKUGoW51PHqCs4xD5HLTFM0%3D" alt="在这里插入图片描述" loading="lazy"></p>
<p>需要注意，反向代理的目标是伪装请求来源，虽然它绕过了浏览器的同源策略，但有时也会让开发者误以为请求地址错误。实际上，这是由于代理转发过程造成的表面请求地址与真实请求地址的差异。</p>
<h3 data-id="heading-90">整合源码</h3>
<p>整合<code>反向代理</code>和<code>环境变量</code>代码版本：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgitee.com%2Fyoulaiorg%2Fvue-uniapp-template%2Ftree%2F272d643744b3b009a90a54e9344a0fc827f8b9fc" target="_blank" title="https://gitee.com/youlaiorg/vue-uniapp-template/tree/272d643744b3b009a90a54e9344a0fc827f8b9fc" ref="nofollow noopener noreferrer">vue-uniapp-template#272d643</a>。</p>
<h2 data-id="heading-91">整合 wot-design-uni</h2>
<p><code>wot-design-uni</code> 是基于 <code>Vue 3</code> 和 <code>TypeScript</code> 构建的高质量组件库。组件库遵循 <code>Wot Design</code> 的设计规范，提供 70 多个组件，支持暗黑模式、国际化和自定义主题，旨在为开发者提供一致的 UI 交互，同时提高开发效率。</p>
<blockquote>
<p><strong>说明：</strong> 本文档整合步骤基于 <code>wot-design-uni</code> 官方文档编写，建议开发者参考 <a href="https://link.juejin.cn?target=https%3A%2F%2Fwot-design-uni.pages.dev%2Fguide%2Fquick-use.html%23npm-%25E5%25AE%2589%25E8%25A3%2585" target="_blank" title="https://wot-design-uni.pages.dev/guide/quick-use.html#npm-%E5%AE%89%E8%A3%85" ref="nofollow noopener noreferrer">官方文档</a> 进行安装和配置，以确保组件库的正确使用。</p>
</blockquote>
<hr>
<h3 data-id="heading-92">安装依赖</h3>
<p>根据官方文档，使用 <code>pnpm</code> 安装组件库的依赖：</p>
<pre><code class="hljs language-bash" lang="bash">pnpm add wot-design-uni
</code></pre>
<h3 data-id="heading-93">配置自动引入组件</h3>
<p>在传统的 <code>Vue</code> 项目中，使用组件需要手动安装、引用、注册。而使用 <code>easycom</code> 可以简化这些操作。只要组件路径符合规范，就可以直接在页面中使用，无需手动导入和注册。</p>
<p>在 <code>pages.json</code> 文件中配置 <code>easycom</code> 自动引入：</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-comment">// pages.json</span>
<span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"easycom"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"autoscan"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"custom"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"^wd-(.*)"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"wot-design-uni/components/wd-$1/wd-$1.vue"</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"pages"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-comment">// 这里是项目已有的内容</span>
  <span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p><strong>关于 <code>easycom</code>：</strong><br>
<code>easycom</code> 是 <code>uni-app</code> 提供的自动化引入功能，更多细节请参考 <a href="https://link.juejin.cn?target=https%3A%2F%2Funiapp.dcloud.net.cn%2Fcollocation%2Fpages.html%23easycom" target="_blank" title="https://uniapp.dcloud.net.cn/collocation/pages.html#easycom" ref="nofollow noopener noreferrer">easycom 官方文档</a>。</p>
<h3 data-id="heading-94">Volar 支持</h3>
<p>为了让 <code>Volar</code> 正确识别和提示全局组件，你需要在项目的 <code>tsconfig.json</code> 文件中配置全局组件类型支持：</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-comment">// tsconfig.json</span>
<span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"compilerOptions"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"types"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"wot-design-uni/global"</span><span class="hljs-punctuation">]</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>这将确保你在 <code>TypeScript</code> 项目中编写代码时，Volar 能提供完整的类型支持和代码提示。</p>
<h3 data-id="heading-95">测试组件</h3>
<p>安装和配置完成后，你可以开始使用 <code>wot-design-uni</code> 的组件。在页面中，直接写组件标签即可，无需手动导入和注册：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">wd-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span>&gt;</span>主要按钮<span class="hljs-tag">&lt;/<span class="hljs-name">wd-button</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">wd-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"success"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span>&gt;</span>成功按钮<span class="hljs-tag">&lt;/<span class="hljs-name">wd-button</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">wd-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"info"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span>&gt;</span>信息按钮<span class="hljs-tag">&lt;/<span class="hljs-name">wd-button</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">wd-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"warning"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span>&gt;</span>警告按钮<span class="hljs-tag">&lt;/<span class="hljs-name">wd-button</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">wd-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"error"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span>&gt;</span>危险按钮<span class="hljs-tag">&lt;/<span class="hljs-name">wd-button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
</code></pre>
<p>你将看到如下按钮效果：</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/83985b6879a143f6b2eb6921f05183d6~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=5J4JgEzRmfcmaRJB0AOTWI1Q%2BTA%3D" alt="image.png" loading="lazy"></p>
<h3 data-id="heading-96">整合源码</h3>
<p>整合<code>wot-design-uni</code> 代码版本：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgitee.com%2Fyoulaiorg%2Fvue-uniapp-template%2Ftree%2Fa7757213f282a6414a3cf2cc13aa2c54a9479ae4" target="_blank" title="https://gitee.com/youlaiorg/vue-uniapp-template/tree/a7757213f282a6414a3cf2cc13aa2c54a9479ae4" ref="nofollow noopener noreferrer">vue-uniapp-template#a775721</a>。</p>
<h2 data-id="heading-97">项目部署</h2>
<h3 data-id="heading-98">H5 部署</h3>
<p>执行 <code>pnpm run build:h5</code> 命令来完成项目的打包：</p>
<pre><code class="hljs language-bash" lang="bash">pnpm run build:h5
</code></pre>
<p>打包后生成的静态文件位于 <code>dist/build/h5</code> 目录下。将该目录下的文件复制到服务器的 <code>/usr/share/nginx/html/vue-uniapp-template</code> 目录。</p>
<p>接下来，配置 nginx：</p>
<pre><code class="hljs language-nginx" lang="nginx"># nginx.conf
server {
    listen 80;
    server_name localhost;
    location / {
        root /usr/share/nginx/html/vue-uniapp-template;
        index index.html index.htm;
    }
    # 反向代理配置
    location /prod-api/ {
        # 将 api.youlai.tech 替换为后端 API 地址，注意保留后面的斜杠 /
        proxy_pass http://api.youlai.tech/; 
    }
}
</code></pre>
<p>这样配置完成后，就可以通过 <code>nginx </code>服务器来访问你的项目了。</p>
<h3 data-id="heading-99">小程序发布</h3>
<h4 data-id="heading-100">下载工具</h4>
<p>下载 <a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.dcloud.io%2Fhbuilderx.html" target="_blank" title="https://www.dcloud.io/hbuilderx.html" ref="nofollow noopener noreferrer"> HBuilder X </a> 编辑器</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/4ce262d678f1459fba5ed52e56c18fc4~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=TF5lY49C8w6qzSHBm3z4E2AncUs%3D" alt="image-20241024232438606.png" loading="lazy"></p>
<p>下载 <a href="https://link.juejin.cn?target=https%3A%2F%2Fdevelopers.weixin.qq.com%2Fminiprogram%2Fdev%2Fdevtools%2Fstable.html" target="_blank" title="https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html" ref="nofollow noopener noreferrer">微信开发者工具</a></p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f8a00af1bddc4cd7a5a6c1cb9b85c571~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=qL34BjF9smXd3tQkDwrkx9f5brE%3D" alt="image.png" loading="lazy"></p>
<h4 data-id="heading-101">获取小程序 AppID</h4>
<p>访问 <a href="https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2F" target="_blank" title="https://mp.weixin.qq.com/" ref="nofollow noopener noreferrer">微信公众平台</a>申请小程序，获取 <code>AppID</code>。如果已申请，可在 <code>首页</code> → <code>小程序信息</code> → <code>查看详情</code> 查看 AppID</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c412bd7ad8c842a59c893eff6261f41c~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=cobjpnbbaTgpOk2zsSI5hdcHOV4%3D" alt="image.png" loading="lazy"></p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/495a703f36804784bdf5d3ac29819e40~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=nXpNPvcFy46Dtq420N0lCTqtFo0%3D" alt="image.png" loading="lazy"></p>
<h4 data-id="heading-102">配置项目</h4>
<p>使用 HBuilder X 打开项目，修改 <code>manifest.json</code> 文件中的小程序配置，并填写获取的 AppID。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/39c4d484703a4089a6601bb991faff43~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=WdTipdORaEH%2FgZJyBQ1kWtpx%2FW4%3D" alt="image.png" loading="lazy"></p>
<h4 data-id="heading-103">设置微信开发者工具</h4>
<p>使用微信扫码登录微信开发者工具，开启服务端口：点击工具栏<code>设置</code>→<code>安全设置</code>→<code>安全</code>→<code>服务端口</code>，选择打开。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/34e7be896f4142dfb4a203a4c72a6571~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=o8yHV6zwZeRk%2FJwrJ5vKOFdgQQE%3D" alt="image.png" loading="lazy"></p>
<h4 data-id="heading-104">运行项目</h4>
<p>在 HBuilder X 中，点击 <code>运行</code>→<code>运行到小程序模拟器</code>→<code>微信开发者工具</code>。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/83362003392841378bc88caef996eda0~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=I94YOs%2Fxy0I%2Bizem6yxjUbd5%2BoA%3D" alt="image.png" loading="lazy"></p>
<p>项目编译完成后，微信开发者工具会自动启动并呈现页面。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/5946839d88e04752b93d709d2221488e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=u23hneBv3oqhiy2Dka56TTI1QRA%3D" alt="image.png" loading="lazy"></p>
<h4 data-id="heading-105">上传发布</h4>
<p>在微信开发者工具中，点击 <code>上传</code> 将应用发布到小程序平台。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/00abd258e75d482b973d9404c7c44af1~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=jx%2BAWis2e6rfj03EA5anEel3oVw%3D" alt="image.png" loading="lazy"></p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/b401aac9eff245eeae83d7869608db1b~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=aIeRH%2BvQ%2FVrSkDuo%2BnRHmmBxuyU%3D" alt="image.png" loading="lazy"></p>
<h4 data-id="heading-106">查看效果</h4>
<p>最后，使用手机打开小程序查看效果：</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/6d4170b722a24488b7b0d2fd51721ecc~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pyJ5p2l5oqA5pyv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739328635&amp;x-signature=w0kBK0UDqAwKnJLVZIN68RnExLY%3D" alt="image.png" loading="lazy"></p>
<h2 data-id="heading-107">结语</h2>
<p>通过本文的详细讲解，相信你已经掌握了如何从零搭建一个高效的、基于 Vue3 和 TypeScript 的 UniApp 跨移动端解决方案脚手架模板——vue-uniapp-template。无论是代码规范、状态管理、样式配置，还是 Git 提交规范与项目部署，都能帮助你在实际项目中提高开发效率和代码质量。</p>
<p>希望本文能为你的项目开发提供全面的指导与支持，助你快速搭建出一个高效的跨移动端解决方案。Happy 1024 &amp; Happy Coding!</p>
<h2 data-id="heading-108">附：项目源码</h2>
<p>本篇文章涉及的源码已开源，项目地址：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgitee.com%2Fyoulaiorg%2Fvue-uniapp-template" target="_blank" title="https://gitee.com/youlaiorg/vue-uniapp-template" ref="nofollow noopener noreferrer">gitee.com/youlaiorg/v…</a>  ，项目正在努力建设中，希望有兴趣参与开源的小伙伴们联系我(haoxianrui)。</p></div></div>