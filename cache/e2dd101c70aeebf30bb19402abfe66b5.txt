<!----> <meta itemprop="headline" content="Next.js + tRPC + Auth.js +  Drizzle ORM： 打造极致全栈开发体验"> <meta itemprop="keywords" content="Next.js,前端,后端"> <meta itemprop="datePublished" content="2025-02-22T04:42:43.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="工程师_Yan"> <meta itemprop="url" content="https://juejin.cn/user/4266553197470408"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-38a6c62f="">
            Next.js + tRPC + Auth.js +  Drizzle ORM： 打造极致全栈开发体验
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-38a6c62f=""><div class="author-info-box" data-v-38a6c62f=""><div class="author-name" data-v-38a6c62f=""><a href="/user/4266553197470408/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-38a6c62f=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    工程师_Yan
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-38a6c62f=""><time datetime="2025-02-22T04:42:43.000Z" title="Sat Feb 22 2025 04:42:43 GMT+0000 (Coordinated Universal Time)" class="time" data-v-38a6c62f="">
                    2025-02-22
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-38a6c62f=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-38a6c62f=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-38a6c62f=""></circle></svg> <span class="views-count" data-v-38a6c62f="">
                    3,931
                  </span> <span class="read-time" data-v-38a6c62f=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-38a6c62f=""><rect width="16" height="16" fill="none" data-v-38a6c62f=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-38a6c62f=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-38a6c62f=""></path></svg>
                    阅读11分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-38a6c62f=""></div> <!----> <!----></div> <!----> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-38a6c62f=""><div class="article-viewer markdown-body result"><h2 data-id="heading-0">前言</h2>
<p>最近在使用 <code>next.js</code> 开发项目，发现开发起来还不错，所以在这里总结出来一个项目启动模版给大家分享一下，所使用到的技术栈有 <code>next.js</code>、<code>trpc</code>、<code>auth.js</code>、<code>tailwind</code>、<code>drizzle ORM</code> 等，覆盖了目前前端的主流技术。</p>
<p>在使用过程当中，我感觉使用这一套技术栈进行 web 开发，真的能够大大的提高我们整体的开发效率，像登录、注册、包括第三方的登录注册的这种，只需要几行代码就能成功实现。</p>
<p>并且在我的开发过程中发现，使用这一套技术栈完全能够胜任小型应用的后端开发。</p>
<p>接下来，我将通过整篇文章带大家上手使用这一套技术栈进行开发。</p>
<h2 data-id="heading-1">介绍</h2>
<p>在实际动手开发之前，我先对整个技术栈做一个简单的介绍。</p>
<h3 data-id="heading-2"><code>Next.js</code></h3>
<p>官网地址：<a href="https://link.juejin.cn?target=https%3A%2F%2Fnextjs.org%2F" target="_blank" title="https://nextjs.org/" ref="nofollow noopener noreferrer">nextjs.org/</a></p>
<p>Next.js 是基于 React 的全栈框架，支持多种渲染策略（SSR/SSG/ISR）和现代 Web 开发需求，简单来说就是有部分代码在 <code>node.js</code> 的服务器里运行，有部分代码是在浏览器里运行的。</p>
<h3 data-id="heading-3"><code>tRPC</code></h3>
<p>官网地址：<a href="https://link.juejin.cn?target=https%3A%2F%2Ftrpc.io%2F" target="_blank" title="https://trpc.io/" ref="nofollow noopener noreferrer">trpc.io/</a></p>
<p>tRPC 是一个基于 TypeScript 的远程过程调用框架，能够简化客户端和服务端之间的通信，在实际开发过程当中的体验就是不需要再去定义各种 HTTP 接口的路由地址，而是直接采用函数调用的形式，并且因为它是基于 TypeScript 的原因，有非常强大的类型提示，开发起来非常方便。</p>
<h3 data-id="heading-4"><code>TanStack Query</code></h3>
<p>官网地址：<a href="https://link.juejin.cn?target=https%3A%2F%2Ftanstack.com%2Fquery" target="_blank" title="https://tanstack.com/query" ref="nofollow noopener noreferrer">tanstack.com/query</a></p>
<p>就是之前的 React Query，使用这个能够帮助开发者优雅的管理数据，开发者不用再重复的去写一堆处理前端请求过程当中的状态、报错等等问题，并且能够缓存数据，减少不必要的接口调用。</p>
<h3 data-id="heading-5"><code>Auth.js</code></h3>
<p>官网地址：<a href="https://link.juejin.cn?target=https%3A%2F%2Fauthjs.dev%2F" target="_blank" title="https://authjs.dev/" ref="nofollow noopener noreferrer">authjs.dev/</a></p>
<p>auth.js 是 next-auth 的 v5 版本，使用它能够非常方便的在我们的 next.js 项目当中集成用户认证、授权等等功能。</p>
<h3 data-id="heading-6"><code>drizzle ORM</code></h3>
<p>官网地址：<a href="https://link.juejin.cn?target=https%3A%2F%2Form.drizzle.team%2F" target="_blank" title="https://orm.drizzle.team/" ref="nofollow noopener noreferrer">orm.drizzle.team/</a></p>
<p>一个 node.js 的 ORM 框架，能够让开发者使用面向对象的方式来操作数据库当中的数据，并且它使用起来非常直观方便，如果你会写 SQL 的话，使用它会非常得心应手。</p>
<h2 data-id="heading-7">实战</h2>
<p>下面的步骤展示的是具体的文件创建步骤，如果你直接需要源码的话，可以直接使用访问这个 GitHub 仓库来获取源码。</p>
<pre><code class="hljs language-bash" lang="bash">https://github.com/DimplesY/next-full-stack-demo
</code></pre>
<h3 data-id="heading-8">创建项目</h3>
<p>使用下面的命令创建项目，设置项按图中所示即可。</p>
<pre><code class="hljs language-bash" lang="bash">pnpx create-next-app@latest next-full-stack
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/4fde900fe3bc491fa94f5138ced6e9a5~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bel56iL5biIX1lhbg==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745025517&amp;x-signature=NQ0BbWA3O%2FBkDIZAlzyrtZOOqk0%3D" alt="1739721522406-M1DVq3" loading="lazy"></p>
<h3 data-id="heading-9">集成 tRPC</h3>
<p>然后我再安装一下 <code>tRPC</code> + <code>TanStack Query</code> 整合的相关依赖，直接复制下面的命令到项目的目录下安装即可。</p>
<pre><code class="hljs language-bash" lang="bash">pnpm add @trpc/server@next @trpc/client@next @trpc/react-query@next @trpc/next@next @tanstack/react-query@latest server-only
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/2626f74def194349bd17019989ab2079~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bel56iL5biIX1lhbg==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745025517&amp;x-signature=4S4Rk%2FY2fvULVB82cjkiC%2BagmyY%3D" alt="1740185600379-CKvgjx" loading="lazy"></p>
<p>为了能够更好地处理 tRPC 的类型校验和数据转换，我们还需要使用到 <code>superjson</code> 和 <code>zod</code> 这两个依赖，使用下面的命令安装即可。</p>
<pre><code class="hljs language-bash" lang="bash">pnpm add zod superjson
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/cf5de2947c5449f0ac04cc4ff089e06e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bel56iL5biIX1lhbg==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745025517&amp;x-signature=Rsy1kezhy17cJRsMdK9S%2F69tdUo%3D" alt="1740185858166-m4td8I" loading="lazy"></p>
<p>使用你喜欢的开发工具打开项目，按照下面的三个步骤创建文件。</p>
<ol>
<li>然后在 <code>app</code> 目录里创建 <code>api/trpc/[trpc]</code> 目录，然后在 <code>[trpc]</code> 当中创建 <code>route.ts</code> 文件。</li>
<li>在项目的根目录下创建 <code>server</code> 目录，这部分作为我们服务器端的代码，然后在其中的 <code>api</code> 目录下创建 <code>root.ts</code> 和 <code>trpc.ts</code> 文件。</li>
<li>在项目的根目录下创建 <code>trpc</code> 目录，并且在其中创建 <code>query-client.ts</code>、<code>react.tsx</code>、<code>server.ts</code> 三个文件。</li>
</ol>
<p>整个创建之后的文件目录结构如下图所示：</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/5ac646d1f14a496f985c8c5c680009ad~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bel56iL5biIX1lhbg==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745025517&amp;x-signature=g9pb0ux9dakZo8gYNfASbva3GRQ%3D" alt="1740186743835-vioty1" loading="lazy"></p>
<h3 data-id="heading-10">集成 drizzle ORM</h3>
<p>文件创建完毕之后，我们再来集成数据库 ORM 框架 -&gt; <code>drizzle ORM</code> 。</p>
<p>我们先安装一下 <code>drizzle ORM</code> 需要的依赖, 这里我使用 <code>PostgreSQL</code> 作为数据库来存储数据 ，直接执行下面的命令进行安装即可。</p>
<pre><code class="hljs language-bash" lang="bash">pnpm add postgres drizzle-orm
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/224ebce817b34e849678f0bea8f90784~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bel56iL5biIX1lhbg==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745025517&amp;x-signature=bfJuTH%2BwFl2r7TyHdcC1f8DMmqs%3D" alt="1740187297407-J9XmRp" loading="lazy"></p>
<p>为了方便进行数据库迁移操作，还需要使用到 <code>drizzle ORM</code> 提供的 <code>drizzle-kit</code> 包。</p>
<pre><code class="hljs language-bash" lang="bash">pnpm add drizzle-kit -D
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/4ed3eed6eb224bd7b7a9dbbadb354fe3~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bel56iL5biIX1lhbg==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745025517&amp;x-signature=ARvNOl720Fu3jOD1XN1QN9KokRs%3D" alt="1740187730959-vhgSCZ" loading="lazy"></p>
<p>在项目根目录下的 server 文件夹当中创建如图所示的 <code>db/index.ts</code> 文件和 <code>db/schema.ts</code> 文件。</p>
<p>为了能够让 <code>drizzle ORM</code> 能够链接到我们的数据库，我们还需要创建一个环境变量以及 <code>drizzle.config.ts</code> 配置文件。</p>
<pre><code class="hljs language-env" lang="env"># .env
DATABASE_URL="postgresql://postgres:123456@localhost:5432/fullstack"
</code></pre>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">import</span> { <span class="hljs-keyword">type</span> <span class="hljs-title class_">Config</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"drizzle-kit"</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
  <span class="hljs-attr">schema</span>: <span class="hljs-string">"./server/db/schema.ts"</span>,
  <span class="hljs-attr">dialect</span>: <span class="hljs-string">"postgresql"</span>,
  <span class="hljs-attr">dbCredentials</span>: {
    <span class="hljs-attr">url</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">DATABASE_URL</span>,
  },
  <span class="hljs-attr">tablesFilter</span>: [<span class="hljs-string">"fullstack_*"</span>],
} satisfies <span class="hljs-title class_">Config</span>;
</code></pre>
<p>为了更好的 <code>typescript</code> 体验，我们创建一个全局的 <code>process.env.DATABASE_URL</code> 类型。</p>
<p>在项目根目录下创建 <code>types/global.d.ts</code> 文件。</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">namespace</span> <span class="hljs-title class_">NodeJS</span> {
  <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProcessEnv</span> {
    <span class="hljs-keyword">readonly</span> <span class="hljs-attr">DATABASE_URL</span>: <span class="hljs-built_in">string</span>;
  }
}
</code></pre>
<h3 data-id="heading-11">集成 <code>Auth.js</code></h3>
<p>上面的数据库 ORM 我们已经成功的集成进来了，接下来我们来安装授权相关的东西，直接使用 <code>auth.js</code> (<code>next-auth</code> 的下一个版本) , 使用下面的命令进行安装。</p>
<pre><code class="hljs language-bash" lang="bash">pnpm add next-auth@beta @auth/drizzle-adapter
</code></pre>
<p>再在 .env 文件当中添加一个 <code>next-auth</code> 需要的密钥</p>
<pre><code class="hljs language-env" lang="env">AUTH_SECRET="xxx"
</code></pre>
<p>然后创建如下图所示的文件：</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/29e241ce60c349e5842bd36a91591bee~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bel56iL5biIX1lhbg==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745025517&amp;x-signature=EgyUPq%2Fh18EHim3wfJXDV96a%2Fkc%3D" alt="1740188475134-NiLlib" loading="lazy"></p>
<p>到这里我们已经将项目所需的文件都创建完毕了，接下来我把每个文件所需要的代码都贴到下面，并且将一些比较难以理解的地方做一些简单的介绍。</p>
<h3 data-id="heading-12">源码部分</h3>
<p>定义 <code>trpc</code> 的服务器接口地址，并且将所有请求转换成 trpc 的函数调用。</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-comment">// app/api/trpc/[trpc]/route.ts</span>

<span class="hljs-keyword">import</span> { fetchRequestHandler } <span class="hljs-keyword">from</span> <span class="hljs-string">"@trpc/server/adapters/fetch"</span>;
<span class="hljs-keyword">import</span> { <span class="hljs-keyword">type</span> <span class="hljs-title class_">NextRequest</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"next/server"</span>;

<span class="hljs-keyword">import</span> { appRouter } <span class="hljs-keyword">from</span> <span class="hljs-string">"@/server/api/root"</span>;
<span class="hljs-keyword">import</span> { createTRPCContext } <span class="hljs-keyword">from</span> <span class="hljs-string">"@/server/api/trpc"</span>;

<span class="hljs-keyword">const</span> <span class="hljs-title function_">createContext</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">req: NextRequest</span>) =&gt; {
  <span class="hljs-keyword">return</span> <span class="hljs-title function_">createTRPCContext</span>({
    <span class="hljs-attr">headers</span>: req.<span class="hljs-property">headers</span>,
  });
};

<span class="hljs-keyword">const</span> <span class="hljs-title function_">handler</span> = (<span class="hljs-params">req: NextRequest</span>) =&gt;
  <span class="hljs-title function_">fetchRequestHandler</span>({
    <span class="hljs-attr">endpoint</span>: <span class="hljs-string">"/api/trpc"</span>,
    req,
    <span class="hljs-attr">router</span>: appRouter,
    <span class="hljs-attr">createContext</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">createContext</span>(req),
    <span class="hljs-attr">onError</span>:
      process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">"development"</span>
        ? <span class="hljs-function">(<span class="hljs-params">{ path, error }</span>) =&gt;</span> {
            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(
              <span class="hljs-string">`❌ tRPC failed on <span class="hljs-subst">${path ?? <span class="hljs-string">"&lt;no-path&gt;"</span>}</span>: <span class="hljs-subst">${error.message}</span>`</span>
            );
          }
        : <span class="hljs-literal">undefined</span>,
  });

<span class="hljs-keyword">export</span> { handler <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">GET</span>, handler <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">POST</span> };


</code></pre>
<p>创建 <code>trpc</code> 的服务端程序，并且定一个 <code>test</code> 的子路由，其中包括了一个 <code>foo</code> 函数将用户的调用返回。</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-comment">// server/api/root.ts</span>

<span class="hljs-keyword">import</span> { createCallerFactory, createTRPCRouter, publicProcedure } <span class="hljs-keyword">from</span> <span class="hljs-string">"@/server/api/trpc"</span>;
<span class="hljs-keyword">import</span> { z } <span class="hljs-keyword">from</span> <span class="hljs-string">'zod'</span>

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> appRouter = <span class="hljs-title function_">createTRPCRouter</span>({
  <span class="hljs-attr">test</span>: <span class="hljs-title function_">createTRPCRouter</span>({
    <span class="hljs-attr">foo</span>:publicProcedure.<span class="hljs-title function_">input</span>(z.<span class="hljs-title function_">object</span>({ <span class="hljs-attr">test</span>: z.<span class="hljs-title function_">string</span>() })).<span class="hljs-title function_">query</span>(<span class="hljs-function">(<span class="hljs-params">{ input }</span>) =&gt;</span> {
      <span class="hljs-keyword">return</span> {
        input
      }
    })
  })
});

<span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">AppRouter</span> = <span class="hljs-keyword">typeof</span> appRouter;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> createCaller = <span class="hljs-title function_">createCallerFactory</span>(appRouter);

</code></pre>
<p>创建 <code>tRPC</code> 的上下对象，并且集成 <code>next-auth</code> ，如果用户登录成功，那么 <code>tRPC</code>  的上下文当中就会包含用的回话信息。</p>
<p>定义了一个 <code>publicProcedure</code> 用于无需登录验证的 <code>trpc</code> 路由定义，<code>protectedProcedure</code> 用于需要登录验证码的 <code>trpc</code> 路由定义。</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-comment">// server/api/trpc.ts</span>

<span class="hljs-keyword">import</span> { initTRPC, <span class="hljs-title class_">TRPCError</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"@trpc/server"</span>;
<span class="hljs-keyword">import</span> superjson <span class="hljs-keyword">from</span> <span class="hljs-string">"superjson"</span>;
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">ZodError</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"zod"</span>;

<span class="hljs-keyword">import</span> { auth } <span class="hljs-keyword">from</span> <span class="hljs-string">"@/server/auth"</span>;
<span class="hljs-keyword">import</span> { db } <span class="hljs-keyword">from</span> <span class="hljs-string">"@/server/db"</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">createTRPCContext</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">opts: { headers: Headers }</span>) =&gt; {
  <span class="hljs-keyword">const</span> session = <span class="hljs-keyword">await</span> <span class="hljs-title function_">auth</span>();

  <span class="hljs-keyword">return</span> {
    db,
    session,
    ...opts,
  };
};

<span class="hljs-keyword">const</span> t = initTRPC.<span class="hljs-property">context</span>&lt;<span class="hljs-keyword">typeof</span> createTRPCContext&gt;().<span class="hljs-title function_">create</span>({
  <span class="hljs-attr">transformer</span>: superjson,
  <span class="hljs-title function_">errorFormatter</span>(<span class="hljs-params">{ shape, error }</span>) {
    <span class="hljs-keyword">return</span> {
      ...shape,
      <span class="hljs-attr">data</span>: {
        ...shape.<span class="hljs-property">data</span>,
        <span class="hljs-attr">zodError</span>:
          error.<span class="hljs-property">cause</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">ZodError</span> ? error.<span class="hljs-property">cause</span>.<span class="hljs-title function_">flatten</span>() : <span class="hljs-literal">null</span>,
      },
    };
  },
});

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> createCallerFactory = t.<span class="hljs-property">createCallerFactory</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> createTRPCRouter = t.<span class="hljs-property">router</span>;

<span class="hljs-keyword">const</span> timingMiddleware = t.<span class="hljs-title function_">middleware</span>(<span class="hljs-keyword">async</span> ({ next, path }) =&gt; {
  <span class="hljs-keyword">const</span> start = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();

  <span class="hljs-keyword">if</span> (t.<span class="hljs-property">_config</span>.<span class="hljs-property">isDev</span>) {
    <span class="hljs-keyword">const</span> waitMs = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">400</span>) + <span class="hljs-number">100</span>;
    <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, waitMs));
  }

  <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();

  <span class="hljs-keyword">const</span> end = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`[TRPC] <span class="hljs-subst">${path}</span> took <span class="hljs-subst">${end - start}</span>ms to execute`</span>);

  <span class="hljs-keyword">return</span> result;
});


<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> publicProcedure = t.<span class="hljs-property">procedure</span>.<span class="hljs-title function_">use</span>(timingMiddleware);

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> protectedProcedure = t.<span class="hljs-property">procedure</span>
  .<span class="hljs-title function_">use</span>(timingMiddleware)
  .<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">{ ctx, next }</span>) =&gt;</span> {
    <span class="hljs-keyword">if</span> (!ctx.<span class="hljs-property">session</span> || !ctx.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>) {
      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TRPCError</span>({ <span class="hljs-attr">code</span>: <span class="hljs-string">"UNAUTHORIZED"</span> });
    }
    <span class="hljs-keyword">return</span> <span class="hljs-title function_">next</span>({
      <span class="hljs-attr">ctx</span>: {
        <span class="hljs-attr">session</span>: { ...ctx.<span class="hljs-property">session</span>, <span class="hljs-attr">user</span>: ctx.<span class="hljs-property">session</span>.<span class="hljs-property">user</span> },
      },
    });
  });
  
</code></pre>
<p>定义了一个 <code>tRPC</code> 客户端，当我们在客户端组件当中调用 <code>tRPC</code> 路由函数时，需要使用到该函数创建客户端。</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-comment">// trpc/query-client.ts</span>

<span class="hljs-keyword">import</span> {
  defaultShouldDehydrateQuery,
  <span class="hljs-title class_">QueryClient</span>,
} <span class="hljs-keyword">from</span> <span class="hljs-string">"@tanstack/react-query"</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">SuperJSON</span> <span class="hljs-keyword">from</span> <span class="hljs-string">"superjson"</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">createQueryClient</span> = (<span class="hljs-params"></span>) =&gt;
  <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryClient</span>({
    <span class="hljs-attr">defaultOptions</span>: {
      <span class="hljs-attr">queries</span>: {
        <span class="hljs-attr">staleTime</span>: <span class="hljs-number">30</span> * <span class="hljs-number">1000</span>,
      },
      <span class="hljs-attr">dehydrate</span>: {
        <span class="hljs-attr">serializeData</span>: <span class="hljs-title class_">SuperJSON</span>.<span class="hljs-property">serialize</span>,
        <span class="hljs-attr">shouldDehydrateQuery</span>: <span class="hljs-function">(<span class="hljs-params">query</span>) =&gt;</span>
          <span class="hljs-title function_">defaultShouldDehydrateQuery</span>(query) ||
          query.<span class="hljs-property">state</span>.<span class="hljs-property">status</span> === <span class="hljs-string">"pending"</span>,
      },
      <span class="hljs-attr">hydrate</span>: {
        <span class="hljs-attr">deserializeData</span>: <span class="hljs-title class_">SuperJSON</span>.<span class="hljs-property">deserialize</span>,
      },
    },
  });

</code></pre>
<p>使用上面的 <code>createQueryClient</code> 创建出来一个全局的客户端，并且提供一个上下文对象供后代组件使用。</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-comment">// trpc/react.tsx</span>

<span class="hljs-string">"use client"</span>;

<span class="hljs-keyword">import</span> { <span class="hljs-title class_">QueryClientProvider</span>, <span class="hljs-keyword">type</span> <span class="hljs-title class_">QueryClient</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"@tanstack/react-query"</span>;
<span class="hljs-keyword">import</span> { loggerLink, unstable_httpBatchStreamLink } <span class="hljs-keyword">from</span> <span class="hljs-string">"@trpc/client"</span>;
<span class="hljs-keyword">import</span> { createTRPCReact } <span class="hljs-keyword">from</span> <span class="hljs-string">"@trpc/react-query"</span>;
<span class="hljs-keyword">import</span> { <span class="hljs-keyword">type</span> inferRouterInputs, <span class="hljs-keyword">type</span> inferRouterOutputs } <span class="hljs-keyword">from</span> <span class="hljs-string">"@trpc/server"</span>;
<span class="hljs-keyword">import</span> { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">SuperJSON</span> <span class="hljs-keyword">from</span> <span class="hljs-string">"superjson"</span>;

<span class="hljs-keyword">import</span> { <span class="hljs-keyword">type</span> <span class="hljs-title class_">AppRouter</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"@/server/api/root"</span>;
<span class="hljs-keyword">import</span> { createQueryClient } <span class="hljs-keyword">from</span> <span class="hljs-string">"./query-client"</span>;

<span class="hljs-keyword">let</span> <span class="hljs-attr">clientQueryClientSingleton</span>: <span class="hljs-title class_">QueryClient</span> | <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span>;
<span class="hljs-keyword">const</span> <span class="hljs-title function_">getQueryClient</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">window</span> === <span class="hljs-string">"undefined"</span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-title function_">createQueryClient</span>();
  }
  <span class="hljs-keyword">return</span> (clientQueryClientSingleton ??= <span class="hljs-title function_">createQueryClient</span>());
};

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> api = createTRPCReact&lt;<span class="hljs-title class_">AppRouter</span>&gt;();


<span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">RouterInputs</span> = inferRouterInputs&lt;<span class="hljs-title class_">AppRouter</span>&gt;;


<span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">RouterOutputs</span> = inferRouterOutputs&lt;<span class="hljs-title class_">AppRouter</span>&gt;;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TRPCReactProvider</span>(<span class="hljs-params">props: { children: React.ReactNode }</span>) {
  <span class="hljs-keyword">const</span> queryClient = <span class="hljs-title function_">getQueryClient</span>();

  <span class="hljs-keyword">const</span> [trpcClient] = <span class="hljs-title function_">useState</span>(<span class="hljs-function">() =&gt;</span>
    api.<span class="hljs-title function_">createClient</span>({
      <span class="hljs-attr">links</span>: [
        <span class="hljs-title function_">loggerLink</span>({
          <span class="hljs-attr">enabled</span>: <span class="hljs-function">(<span class="hljs-params">op</span>) =&gt;</span>
            process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">"development"</span> ||
            (op.<span class="hljs-property">direction</span> === <span class="hljs-string">"down"</span> &amp;&amp; op.<span class="hljs-property">result</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Error</span>),
        }),
        <span class="hljs-title function_">unstable_httpBatchStreamLink</span>({
          <span class="hljs-attr">transformer</span>: <span class="hljs-title class_">SuperJSON</span>,
          <span class="hljs-attr">url</span>: <span class="hljs-title function_">getBaseUrl</span>() + <span class="hljs-string">"/api/trpc"</span>,
          <span class="hljs-attr">headers</span>: <span class="hljs-function">() =&gt;</span> {
            <span class="hljs-keyword">const</span> headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>();
            headers.<span class="hljs-title function_">set</span>(<span class="hljs-string">"x-trpc-source"</span>, <span class="hljs-string">"nextjs-react"</span>);
            <span class="hljs-keyword">return</span> headers;
          },
        }),
      ],
    })
  );

  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">QueryClientProvider</span> <span class="hljs-attr">client</span>=<span class="hljs-string">{queryClient}</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">api.Provider</span> <span class="hljs-attr">client</span>=<span class="hljs-string">{trpcClient}</span> <span class="hljs-attr">queryClient</span>=<span class="hljs-string">{queryClient}</span>&gt;</span>
        {props.children}
      <span class="hljs-tag">&lt;/<span class="hljs-name">api.Provider</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">QueryClientProvider</span>&gt;</span></span>
  );
}

<span class="hljs-keyword">function</span> <span class="hljs-title function_">getBaseUrl</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">window</span> !== <span class="hljs-string">"undefined"</span>) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">origin</span>;
  <span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">VERCEL_URL</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">`https://<span class="hljs-subst">${process.env.VERCEL_URL}</span>`</span>;
  <span class="hljs-keyword">return</span> <span class="hljs-string">`http://localhost:<span class="hljs-subst">${process.env.PORT ?? <span class="hljs-number">3000</span>}</span>`</span>;
}
</code></pre>
<p>定义了一个服务端 <code>tRPC</code> 调用者，方便我们在 RSC (React Server Component / React 服务端组件) 之间相互调用。</p>
<pre><code class="hljs language-tsx" lang="tsx"><span class="hljs-comment">// trpc/server.ts</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">"server-only"</span>;

<span class="hljs-keyword">import</span> { createHydrationHelpers } <span class="hljs-keyword">from</span> <span class="hljs-string">"@trpc/react-query/rsc"</span>;
<span class="hljs-keyword">import</span> { headers } <span class="hljs-keyword">from</span> <span class="hljs-string">"next/headers"</span>;
<span class="hljs-keyword">import</span> { cache } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;

<span class="hljs-keyword">import</span> { createCaller, <span class="hljs-keyword">type</span> <span class="hljs-title class_">AppRouter</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"@/server/api/root"</span>;
<span class="hljs-keyword">import</span> { createTRPCContext } <span class="hljs-keyword">from</span> <span class="hljs-string">"@/server/api/trpc"</span>;
<span class="hljs-keyword">import</span> { createQueryClient } <span class="hljs-keyword">from</span> <span class="hljs-string">"./query-client"</span>;

<span class="hljs-keyword">const</span> createContext = <span class="hljs-title function_">cache</span>(<span class="hljs-keyword">async</span> () =&gt; {
  <span class="hljs-keyword">const</span> heads = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(<span class="hljs-keyword">await</span> <span class="hljs-title function_">headers</span>());
  heads.<span class="hljs-title function_">set</span>(<span class="hljs-string">"x-trpc-source"</span>, <span class="hljs-string">"rsc"</span>);

  <span class="hljs-keyword">return</span> <span class="hljs-title function_">createTRPCContext</span>({
    <span class="hljs-attr">headers</span>: heads,
  });
});

<span class="hljs-keyword">const</span> getQueryClient = <span class="hljs-title function_">cache</span>(createQueryClient);
<span class="hljs-keyword">const</span> caller = <span class="hljs-title function_">createCaller</span>(createContext);

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> { <span class="hljs-attr">trpc</span>: api, <span class="hljs-title class_">HydrateClient</span> } = createHydrationHelpers&lt;<span class="hljs-title class_">AppRouter</span>&gt;(
  caller,
  getQueryClient
);
</code></pre>
<p>定义 <code>next-auth</code> 的配置文件，可以在当中添加自己应用的登录授权逻辑。</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-comment">// server/auth/config.ts</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">DrizzleAdapter</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"@auth/drizzle-adapter"</span>;
<span class="hljs-keyword">import</span> { <span class="hljs-keyword">type</span> <span class="hljs-title class_">DefaultSession</span>, <span class="hljs-keyword">type</span> <span class="hljs-title class_">NextAuthConfig</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"next-auth"</span>;

<span class="hljs-keyword">import</span> { db } <span class="hljs-keyword">from</span> <span class="hljs-string">"@/server/db"</span>;
<span class="hljs-keyword">import</span> {
  accounts,
  sessions,
  users,
  verificationTokens,
} <span class="hljs-keyword">from</span> <span class="hljs-string">"@/server/db/schema"</span>;


<span class="hljs-keyword">declare</span> <span class="hljs-variable language_">module</span> <span class="hljs-string">"next-auth"</span> {
  <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Session</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DefaultSession</span> {
    <span class="hljs-attr">user</span>: {
      <span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span>;
    } &amp; <span class="hljs-title class_">DefaultSession</span>[<span class="hljs-string">"user"</span>];
  }
}


<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> authConfig = {
  <span class="hljs-attr">providers</span>: [],
  <span class="hljs-attr">adapter</span>: <span class="hljs-title class_">DrizzleAdapter</span>(db, {
    <span class="hljs-attr">usersTable</span>: users,
    <span class="hljs-attr">accountsTable</span>: accounts,
    <span class="hljs-attr">sessionsTable</span>: sessions,
    <span class="hljs-attr">verificationTokensTable</span>: verificationTokens,
  }),
  <span class="hljs-attr">callbacks</span>: {
    <span class="hljs-attr">session</span>: <span class="hljs-function">(<span class="hljs-params">{ session, user }</span>) =&gt;</span> ({
      ...session,
      <span class="hljs-attr">user</span>: {
        ...session.<span class="hljs-property">user</span>,
        <span class="hljs-attr">id</span>: user.<span class="hljs-property">id</span>,
      },
    }),
  },
} satisfies <span class="hljs-title class_">NextAuthConfig</span>;

</code></pre>
<p>创建 <code>next-auth</code> 的处理程序，供 API 处理接口使用。</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-comment">// server/auth/index.ts</span>

<span class="hljs-keyword">import</span> <span class="hljs-title class_">NextAuth</span> <span class="hljs-keyword">from</span> <span class="hljs-string">"next-auth"</span>;
<span class="hljs-keyword">import</span> { cache } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;

<span class="hljs-keyword">import</span> { authConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">"./config"</span>;

<span class="hljs-keyword">const</span> { <span class="hljs-attr">auth</span>: uncachedAuth, handlers, signIn, signOut } = <span class="hljs-title class_">NextAuth</span>(authConfig);

<span class="hljs-keyword">const</span> auth = <span class="hljs-title function_">cache</span>(uncachedAuth);

<span class="hljs-keyword">export</span> { auth, handlers, signIn, signOut };
</code></pre>
<p>使用 <code>next-auth</code> 创建出来的路由器来处理授权相关的请求。</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-comment">// app/api/auth/[...nextauth]/route.ts</span>

<span class="hljs-keyword">import</span> { handlers } <span class="hljs-keyword">from</span> <span class="hljs-string">"@/server/auth"</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> { <span class="hljs-variable constant_">GET</span>, <span class="hljs-variable constant_">POST</span> } = handlers;
</code></pre>
<p>创建全局的数据库连接。</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-comment">// server/db/index.ts</span>

<span class="hljs-keyword">import</span> { drizzle } <span class="hljs-keyword">from</span> <span class="hljs-string">"drizzle-orm/postgres-js"</span>;
<span class="hljs-keyword">import</span> postgres <span class="hljs-keyword">from</span> <span class="hljs-string">"postgres"</span>;

<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> schema <span class="hljs-keyword">from</span> <span class="hljs-string">"./schema"</span>;

<span class="hljs-keyword">const</span> globalForDb = globalThis <span class="hljs-keyword">as</span> <span class="hljs-built_in">unknown</span> <span class="hljs-keyword">as</span> {
  <span class="hljs-attr">conn</span>: postgres.<span class="hljs-property">Sql</span> | <span class="hljs-literal">undefined</span>;
};

<span class="hljs-keyword">const</span> conn = globalForDb.<span class="hljs-property">conn</span> ?? <span class="hljs-title function_">postgres</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">DATABASE_URL</span>);
<span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> !== <span class="hljs-string">"production"</span>) globalForDb.<span class="hljs-property">conn</span> = conn;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> db = <span class="hljs-title function_">drizzle</span>(conn, { schema });
</code></pre>
<p>定义 <code>drizzle-orm</code> 与 <code>next-auth</code> 集成所需要数据库表文件。</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-comment">// server/db/schema.ts</span>

<span class="hljs-keyword">import</span> { relations, sql } <span class="hljs-keyword">from</span> <span class="hljs-string">"drizzle-orm"</span>;
<span class="hljs-keyword">import</span> {
  index,
  integer,
  pgTableCreator,
  primaryKey,
  text,
  timestamp,
  varchar,
} <span class="hljs-keyword">from</span> <span class="hljs-string">"drizzle-orm/pg-core"</span>;
<span class="hljs-keyword">import</span> { <span class="hljs-keyword">type</span> <span class="hljs-title class_">AdapterAccount</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"next-auth/adapters"</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> createTable = <span class="hljs-title function_">pgTableCreator</span>(<span class="hljs-function">(<span class="hljs-params">name</span>) =&gt;</span> <span class="hljs-string">`fullstack_<span class="hljs-subst">${name}</span>`</span>);

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> users = <span class="hljs-title function_">createTable</span>(<span class="hljs-string">"user"</span>, {
  <span class="hljs-attr">id</span>: <span class="hljs-title function_">varchar</span>(<span class="hljs-string">"id"</span>, { <span class="hljs-attr">length</span>: <span class="hljs-number">255</span> })
    .<span class="hljs-title function_">notNull</span>()
    .<span class="hljs-title function_">primaryKey</span>()
    .$defaultFn(<span class="hljs-function">() =&gt;</span> crypto.<span class="hljs-title function_">randomUUID</span>()),
  <span class="hljs-attr">name</span>: <span class="hljs-title function_">varchar</span>(<span class="hljs-string">"name"</span>, { <span class="hljs-attr">length</span>: <span class="hljs-number">255</span> }),
  <span class="hljs-attr">email</span>: <span class="hljs-title function_">varchar</span>(<span class="hljs-string">"email"</span>, { <span class="hljs-attr">length</span>: <span class="hljs-number">255</span> }).<span class="hljs-title function_">notNull</span>(),
  <span class="hljs-attr">emailVerified</span>: <span class="hljs-title function_">timestamp</span>(<span class="hljs-string">"email_verified"</span>, {
    <span class="hljs-attr">mode</span>: <span class="hljs-string">"date"</span>,
    <span class="hljs-attr">withTimezone</span>: <span class="hljs-literal">true</span>,
  }).<span class="hljs-title function_">default</span>(sql<span class="hljs-string">`CURRENT_TIMESTAMP`</span>),
  <span class="hljs-attr">image</span>: <span class="hljs-title function_">varchar</span>(<span class="hljs-string">"image"</span>, { <span class="hljs-attr">length</span>: <span class="hljs-number">255</span> }),
});

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> usersRelations = <span class="hljs-title function_">relations</span>(users, <span class="hljs-function">(<span class="hljs-params">{ many }</span>) =&gt;</span> ({
  <span class="hljs-attr">accounts</span>: <span class="hljs-title function_">many</span>(accounts),
}));

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> accounts = <span class="hljs-title function_">createTable</span>(
  <span class="hljs-string">"account"</span>,
  {
    <span class="hljs-attr">userId</span>: <span class="hljs-title function_">varchar</span>(<span class="hljs-string">"user_id"</span>, { <span class="hljs-attr">length</span>: <span class="hljs-number">255</span> })
      .<span class="hljs-title function_">notNull</span>()
      .<span class="hljs-title function_">references</span>(<span class="hljs-function">() =&gt;</span> users.<span class="hljs-property">id</span>),
    <span class="hljs-attr">type</span>: <span class="hljs-title function_">varchar</span>(<span class="hljs-string">"type"</span>, { <span class="hljs-attr">length</span>: <span class="hljs-number">255</span> })
      .<span class="hljs-property">$type</span>&lt;<span class="hljs-title class_">AdapterAccount</span>[<span class="hljs-string">"type"</span>]&gt;()
      .<span class="hljs-title function_">notNull</span>(),
    <span class="hljs-attr">provider</span>: <span class="hljs-title function_">varchar</span>(<span class="hljs-string">"provider"</span>, { <span class="hljs-attr">length</span>: <span class="hljs-number">255</span> }).<span class="hljs-title function_">notNull</span>(),
    <span class="hljs-attr">providerAccountId</span>: <span class="hljs-title function_">varchar</span>(<span class="hljs-string">"provider_account_id"</span>, {
      <span class="hljs-attr">length</span>: <span class="hljs-number">255</span>,
    }).<span class="hljs-title function_">notNull</span>(),
    <span class="hljs-attr">refresh_token</span>: <span class="hljs-title function_">text</span>(<span class="hljs-string">"refresh_token"</span>),
    <span class="hljs-attr">access_token</span>: <span class="hljs-title function_">text</span>(<span class="hljs-string">"access_token"</span>),
    <span class="hljs-attr">expires_at</span>: <span class="hljs-title function_">integer</span>(<span class="hljs-string">"expires_at"</span>),
    <span class="hljs-attr">token_type</span>: <span class="hljs-title function_">varchar</span>(<span class="hljs-string">"token_type"</span>, { <span class="hljs-attr">length</span>: <span class="hljs-number">255</span> }),
    <span class="hljs-attr">scope</span>: <span class="hljs-title function_">varchar</span>(<span class="hljs-string">"scope"</span>, { <span class="hljs-attr">length</span>: <span class="hljs-number">255</span> }),
    <span class="hljs-attr">id_token</span>: <span class="hljs-title function_">text</span>(<span class="hljs-string">"id_token"</span>),
    <span class="hljs-attr">session_state</span>: <span class="hljs-title function_">varchar</span>(<span class="hljs-string">"session_state"</span>, { <span class="hljs-attr">length</span>: <span class="hljs-number">255</span> }),
  },
  <span class="hljs-function">(<span class="hljs-params">account</span>) =&gt;</span> ({
    <span class="hljs-attr">compoundKey</span>: <span class="hljs-title function_">primaryKey</span>({
      <span class="hljs-attr">columns</span>: [account.<span class="hljs-property">provider</span>, account.<span class="hljs-property">providerAccountId</span>],
    }),
    <span class="hljs-attr">userIdIdx</span>: <span class="hljs-title function_">index</span>(<span class="hljs-string">"account_user_id_idx"</span>).<span class="hljs-title function_">on</span>(account.<span class="hljs-property">userId</span>),
  })
);

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> accountsRelations = <span class="hljs-title function_">relations</span>(accounts, <span class="hljs-function">(<span class="hljs-params">{ one }</span>) =&gt;</span> ({
  <span class="hljs-attr">user</span>: <span class="hljs-title function_">one</span>(users, { <span class="hljs-attr">fields</span>: [accounts.<span class="hljs-property">userId</span>], <span class="hljs-attr">references</span>: [users.<span class="hljs-property">id</span>] }),
}));

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> sessions = <span class="hljs-title function_">createTable</span>(
  <span class="hljs-string">"session"</span>,
  {
    <span class="hljs-attr">sessionToken</span>: <span class="hljs-title function_">varchar</span>(<span class="hljs-string">"session_token"</span>, { <span class="hljs-attr">length</span>: <span class="hljs-number">255</span> })
      .<span class="hljs-title function_">notNull</span>()
      .<span class="hljs-title function_">primaryKey</span>(),
    <span class="hljs-attr">userId</span>: <span class="hljs-title function_">varchar</span>(<span class="hljs-string">"user_id"</span>, { <span class="hljs-attr">length</span>: <span class="hljs-number">255</span> })
      .<span class="hljs-title function_">notNull</span>()
      .<span class="hljs-title function_">references</span>(<span class="hljs-function">() =&gt;</span> users.<span class="hljs-property">id</span>),
    <span class="hljs-attr">expires</span>: <span class="hljs-title function_">timestamp</span>(<span class="hljs-string">"expires"</span>, {
      <span class="hljs-attr">mode</span>: <span class="hljs-string">"date"</span>,
      <span class="hljs-attr">withTimezone</span>: <span class="hljs-literal">true</span>,
    }).<span class="hljs-title function_">notNull</span>(),
  },
  <span class="hljs-function">(<span class="hljs-params">session</span>) =&gt;</span> ({
    <span class="hljs-attr">userIdIdx</span>: <span class="hljs-title function_">index</span>(<span class="hljs-string">"session_user_id_idx"</span>).<span class="hljs-title function_">on</span>(session.<span class="hljs-property">userId</span>),
  })
);

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> sessionsRelations = <span class="hljs-title function_">relations</span>(sessions, <span class="hljs-function">(<span class="hljs-params">{ one }</span>) =&gt;</span> ({
  <span class="hljs-attr">user</span>: <span class="hljs-title function_">one</span>(users, { <span class="hljs-attr">fields</span>: [sessions.<span class="hljs-property">userId</span>], <span class="hljs-attr">references</span>: [users.<span class="hljs-property">id</span>] }),
}));

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> verificationTokens = <span class="hljs-title function_">createTable</span>(
  <span class="hljs-string">"verification_token"</span>,
  {
    <span class="hljs-attr">identifier</span>: <span class="hljs-title function_">varchar</span>(<span class="hljs-string">"identifier"</span>, { <span class="hljs-attr">length</span>: <span class="hljs-number">255</span> }).<span class="hljs-title function_">notNull</span>(),
    <span class="hljs-attr">token</span>: <span class="hljs-title function_">varchar</span>(<span class="hljs-string">"token"</span>, { <span class="hljs-attr">length</span>: <span class="hljs-number">255</span> }).<span class="hljs-title function_">notNull</span>(),
    <span class="hljs-attr">expires</span>: <span class="hljs-title function_">timestamp</span>(<span class="hljs-string">"expires"</span>, {
      <span class="hljs-attr">mode</span>: <span class="hljs-string">"date"</span>,
      <span class="hljs-attr">withTimezone</span>: <span class="hljs-literal">true</span>,
    }).<span class="hljs-title function_">notNull</span>(),
  },
  <span class="hljs-function">(<span class="hljs-params">vt</span>) =&gt;</span> ({
    <span class="hljs-attr">compoundKey</span>: <span class="hljs-title function_">primaryKey</span>({ <span class="hljs-attr">columns</span>: [vt.<span class="hljs-property">identifier</span>, vt.<span class="hljs-property">token</span>] }),
  })
);

</code></pre>
<p>有了上面的文件，接下来我们将数据表同步到我们的数据库当中去，注意将 <code>.env</code> 文件当中的 <code>DATABASE_URL</code> 改成你自己的数据库连接配置。</p>
<p>使用下面的命令，同步表到数据库当中。</p>
<pre><code class="hljs language-bash" lang="bash">pnpm drizzle-kit push
</code></pre>
<p>如下所示，即可将我们定义的 <code>schema</code> 同步到数据当中。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/affbef1091df48c1a96214411c8a3bd6~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bel56iL5biIX1lhbg==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745025517&amp;x-signature=E54aS2yD3jOvSSJIu46jkOWKlMo%3D" alt="1740191369976-XVmyP6" loading="lazy"></p>
<p>数据库当中，同步创建出来 4 张表，如下图所示：</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/d145837de58040f99402ebe946be9636~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bel56iL5biIX1lhbg==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745025517&amp;x-signature=dYRBrbWJnFden2LbDH3Ao357fQ8%3D" alt="1740191468555-965Bh9" loading="lazy"></p>
<h3 data-id="heading-13">测试 tRPC 接口调用</h3>
<p>修改 <code>RootLayout</code> 将我们的应用包在 <code>TRPCReactProvider</code> 当中。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/0659a65438674e88af92b98faf7a6114~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bel56iL5biIX1lhbg==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745025517&amp;x-signature=%2BKw3Ppnheg9fWMs1L6K5xgITa0k%3D" alt="1740192288275-e4cRiN" loading="lazy"></p>
<h4 data-id="heading-14">服务端组件调用</h4>
<p>修改 <code>app</code> 目录下的 <code>page.tsx</code> 添加下面的内容，注意导入的是 <code>@/trpc/server</code> 当中的 <code>api</code>.</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/20e55017a1dc489ebff2ed8b85af3aae~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bel56iL5biIX1lhbg==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745025517&amp;x-signature=%2BG3C%2B51diEcYoIOL0Tpk4kZUQZI%3D" alt="1740192353012-TEEDSz" loading="lazy"></p>
<p>访问页面，可以看到我们已经能够的使用服务端组件调用了我们的 <code>tTRPC</code> 接口，并且渲染出来了内容。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c3f8f132941047a9853d27b27e59c0ae~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bel56iL5biIX1lhbg==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745025517&amp;x-signature=cc7kukosIBNHpe%2B5xOMXrDHBBKc%3D" alt="1740192374084-8HNuvg" loading="lazy"></p>
<h4 data-id="heading-15">客户端组件调用</h4>
<p>创建客户端组件，如下图所示，注意是使用 <code>@/trpc/react</code> 当中的 <code>api</code> 。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f47bd6b30671459c92ec801849bfe3a0~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bel56iL5biIX1lhbg==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745025517&amp;x-signature=Jc5%2F0iHhQq5SH10Ui%2BqbKs1VEhk%3D" alt="1740192548412-roPo3u" loading="lazy"></p>
<p>修改 <code>page.tsx</code> 将客户端组件导入到其中，如下图所示:</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c0800741adae412ab0ba5f49b714a413~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bel56iL5biIX1lhbg==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745025517&amp;x-signature=2EHYAlHH8axjO0ARlkzDxDXv1IE%3D" alt="1740192538322-aTZrmf" loading="lazy"></p>
<p>访问页面，可以看到应该的将数据展示到了页面上，非常完美。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/0fb110967edd41d1813eed00e4e02765~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bel56iL5biIX1lhbg==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745025517&amp;x-signature=Tttw0izmj7ZaVOO%2F8NtWnbTFzZQ%3D" alt="1740192641446-zxLgYt" loading="lazy"></p>
<h3 data-id="heading-16">测试 GitHub 登录</h3>
<p>测试过了上面的接口调用, 接下来我们给我们的应用接入 <code>Github</code> 登录的功能，需要提前在 github 上申请好 <code>Client ID</code> 和 <code>Client secrets</code> , 如下图所示：</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/5473ca206dff466bbfa0ab6c7fd37e53~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bel56iL5biIX1lhbg==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745025517&amp;x-signature=GDi3dTm4OmGGIEAU4vzR1od%2Ff6Q%3D" alt="1740192832760-jcrGae" loading="lazy"></p>
<p>将 <code>Client ID</code> 和 <code>Client secrets</code> 分别设置到 <code>.env</code> 文件的 <code>AUTH_GITHUB_ID</code> 和 <code>AUTH_GITHUB_SECRET</code> 当中。</p>
<pre><code class="hljs language-.env" lang=".env">AUTH_GITHUB_ID="xxx"
AUTH_GITHUB_SECRET="xxx"
</code></pre>
<p>还需要将下面的 <code>Authorization callback URL</code> 设置成 <code>http://localhost:3000/api/auth/callback/github</code> 。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f05aef79bda44d0cab833d5da2cd532c~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bel56iL5biIX1lhbg==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745025517&amp;x-signature=JhYaOEvCYv7JMb97HjbzbZfPBnc%3D" alt="1740193854798-d9t9jN" loading="lazy"></p>
<p>将 <code>GitHub</code> 填入 <code>server/auth/config.ts</code> 的 <code>Providers</code> 当中，如下图所示：</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/e9597d38ec5f41d18637a91323381b55~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bel56iL5biIX1lhbg==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745025517&amp;x-signature=opCbwNXqVk%2FYc086jLi2REO%2BMSQ%3D" alt="1740193315809-MSc0V6" loading="lazy"></p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/9017c9816b264552bb3bbe4700aba780~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bel56iL5biIX1lhbg==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745025517&amp;x-signature=q3nehnrIlYJpyOLbuWIm9tsJzdc%3D" alt="1740193823925-w4ht10" loading="lazy"></p>
<p>然后运行项目，访问 <code>http://localhost:3000/api/auth/signin</code>, 可以看到如下的界面，点击按钮跳转到 <code>Github</code> 授权界面 。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/d29cd7da0a7b480799a8ce4a46e1ad71~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bel56iL5biIX1lhbg==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745025517&amp;x-signature=7%2B6qjQFud6o2s08tg17BlhP760s%3D" alt="1740193710416-XFT6IL" loading="lazy"></p>
<p>授权完成之后，可以看到，我们已经成功登录了，页面上显示出来我们的 <code>Github</code> 账号信息，如下图所示：</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/685a7d4e5abc4928be4ff2aeebfe078b~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bel56iL5biIX1lhbg==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745025517&amp;x-signature=hGBwrciyBn0rFiVaXBxTPOKJEUg%3D" alt="1740194083207-LxSPzG" loading="lazy"></p>
<p>并且数据当中也成功的创建了用户的 Github 账户信息。
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/191e96b339ac4f0faa9755d729af6d56~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5bel56iL5biIX1lhbg==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1745025517&amp;x-signature=h7L9wULQCEDFmPinuDbbXTP2PXQ%3D" alt="1740194835301-iTC07J" loading="lazy"></p>
<p>恭喜你！通过这篇教程的学习，你已经成功创建了一套全栈开发的基础模板，掌握了从前端到后端的核心技能。现在，无论是构建用户界面、处理业务逻辑，还是管理数据库，你都能游刃有余地应对。可以说已经迈出了成为全栈工程师的重要一步！</p></div></div>