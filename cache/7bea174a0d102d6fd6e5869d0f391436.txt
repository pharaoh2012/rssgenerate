
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/dennyLee2025/p/18793575" title="发布于 2025-03-27 15:38">
    <span role="heading" aria-level="2">掌握设计模式--命令模式</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="命令模式command-pattern">命令模式（Command Pattern）</h2>
<p>命令模式（Command Pattern）是一种行为型设计模式，它将请求（命令）封装成对象，从而使您能够参数化客户端（调用者）使用不同的请求、队列请求或者日志请求，甚至支持可撤销的操作。</p>
<p><strong>核心思想</strong>是 <strong>将请求封装成对象</strong>，从而使得调用者与接收者解耦，同时支持请求的存储、撤销、重做和排队执行。</p>
<h3 id="主要组成部分">主要组成部分</h3>
<ol>
<li><strong>Command（命令接口）</strong>：通常是一个接口，定义一个执行命令的 <code>execute()</code> 方法。</li>
<li><strong>ConcreteCommand（具体命令）</strong>：实现命令接口，并定义执行该命令的具体操作，通常将请求的接收者（Receiver）和操作绑定在一起。</li>
<li><strong>Client（客户端）</strong>：创建一个具体命令对象并设置其接收者（Receiver）。</li>
<li><strong>Invoker（调用者）</strong>：请求命令的执行。通常在用户操作时，会调用 <code>execute()</code> 方法。</li>
<li><strong>Receiver（接收者）</strong>：知道如何实施与执行一个请求相关的操作，实际的业务逻辑通常由此类执行。</li>
</ol>
<h2 id="案例实现">案例实现</h2>
<p>一个 <strong>图形编辑器</strong>，用户可以执行对图形的操作（如绘制、擦除等），并能够撤销这些操作。</p>
<h3 id="案例类图">案例类图</h3>
<p><img src="https://img2024.cnblogs.com/blog/1209017/202503/1209017-20250326131720258-1573483511.png" alt="image" loading="lazy"></p>
<p><code>命令调用者类</code>依赖于命令接口，命令接口下的<code>具体命令类</code>操作<code>实际的业务逻辑</code>。</p>
<h3 id="command接口">Command接口</h3>
<pre><code class="language-java">public interface Command {
    void execute();
    void undo();
}
</code></pre>
<h3 id="绘制图形命令">绘制图形命令</h3>
<pre><code class="language-java">// ConcreteCommand - 绘制图形命令
public class DrawShapeCommand implements Command {
    private Shape shape;

    public DrawShapeCommand(Shape shape) {
        this.shape = shape;
    }

    @Override
    public void execute() {
        shape.draw();
    }

    @Override
    public void undo() {
        shape.erase();
    }
}

// ConcreteCommand - 删除图形命令
class EraseShapeCommand implements Command {
    private Shape shape;

    public EraseShapeCommand(Shape shape) {
        this.shape = shape;
    }

    @Override
    public void execute() {
        shape.erase();
    }

    @Override
    public void undo() {
        shape.draw();
    }
}
</code></pre>
<h3 id="接受者--抽象图形类">接受者--抽象图形类</h3>
<pre><code class="language-java">public abstract class Shape {
    protected String name;

    public abstract void draw();
    public abstract void erase();
}
</code></pre>
<h3 id="接受者--具体图形类">接受者--具体图形类</h3>
<pre><code class="language-java">public class Circle extends Shape {
    public Circle() {
        this.name = "Circle";
    }

    @Override
    public void draw() {
        System.out.println("绘制图形 " + name);
    }

    @Override
    public void erase() {
        System.out.println("擦除图形 " + name);
    }
}

class Rectangle extends Shape {
    public Rectangle() {
        this.name = "Rectangle";
    }

    @Override
    public void draw() {
        System.out.println("绘制图形 " + name);
    }

    @Override
    public void erase() {
        System.out.println("擦除图形 " + name);
    }
}
</code></pre>
<h3 id="命令调用者">命令调用者</h3>
<pre><code class="language-java">public class CommandInvoker {
    private Stack&lt;Command&gt; commandHistory = new Stack&lt;&gt;();

    public void executeCommand(Command command) {
        command.execute();
        commandHistory.push(command);
    }

    public void undo() {
        if (!commandHistory.isEmpty()) {
            Command lastCommand = commandHistory.pop();
            lastCommand.undo();
        } else {
            System.out.println("No commands to undo.");
        }
    }
}
</code></pre>
<h3 id="测试代码">测试代码</h3>
<pre><code class="language-java">public class CommandDemo {
    public static void main(String[] args) {
        // 创建图形
        Shape circle = new Circle();
        Shape rectangle = new Rectangle();

        // 创建命令
        Command drawCircleCommand = new DrawShapeCommand(circle);
        Command drawRectangleCommand = new DrawShapeCommand(rectangle);
        Command eraseCircleCommand = new EraseShapeCommand(circle);
        Command eraseRectangleCommand = new EraseShapeCommand(rectangle);

        // 创建命令调用者
        CommandInvoker invoker = new CommandInvoker();

        // 执行命令
        invoker.executeCommand(drawCircleCommand);  // 绘制圆形
        invoker.executeCommand(drawRectangleCommand);  // 绘制矩形
        invoker.executeCommand(eraseCircleCommand);  // 删除圆形
        invoker.executeCommand(eraseRectangleCommand);  // 删除矩形

        // 撤销操作
        invoker.undo();  // 撤销删除矩形
        invoker.undo();  // 撤销删除圆形
        invoker.undo();  // 撤销绘制矩形
        invoker.undo();  // 撤销绘制圆形
        invoker.undo();
    }
}
</code></pre>
<h3 id="测试结果">测试结果</h3>
<blockquote>
<p>绘制图形 Circle</p>
<p>绘制图形 Rectangle</p>
<p>擦除图形 Circle</p>
<p>擦除图形 Rectangle</p>
<p>绘制图形 Rectangle</p>
<p>绘制图形 Circle</p>
<p>擦除图形 Rectangle</p>
<p>擦除图形 Circle</p>
<p>No commands to undo.</p>
</blockquote>
<h2 id="优缺点和适用场景">优缺点和适用场景</h2>
<h3 id="优点">优点：</h3>
<ol>
<li><strong>解耦请求者和接收者</strong>：请求者（客户端）不需要知道接收者的具体实现，只需要知道命令接口。</li>
<li><strong>支持撤销操作</strong>：可以将命令对象设计为支持撤销的操作，使得某些操作能够撤回。</li>
<li><strong>可以将命令参数化</strong>：命令可以作为参数传递，或被存储起来，支持批量操作。</li>
<li><strong>扩展性好</strong>：增加新的命令时，不需要改变现有代码，只需要新增具体命令类。</li>
</ol>
<h3 id="缺点">缺点：</h3>
<ol>
<li><strong>增加类的数量</strong>：每个具体命令类都需要创建一个类，可能导致类的数量增多。</li>
<li><strong>实现复杂度</strong>：如果系统中的命令非常多，可能导致命令类实现过于复杂。</li>
</ol>
<p>命令模式在 GUI 程序、事务管理、队列任务等场景中非常常见。</p>
<h3 id="适用场景">适用场景</h3>
<ul>
<li>需要解耦请求者和接收者。</li>
<li>需要撤销、重做操作。</li>
<li>需要存储请求、支持队列、日志功能。</li>
<li>需要动态选择操作或扩展操作。</li>
<li>需要将多个操作封装为一个命令。</li>
<li>需要管理跨平台或多设备的操作。</li>
</ul>
<h2 id="总结">总结</h2>
<p>命令模式的核心关注点是<strong>将请求封装成对象</strong>，从而使得请求的发送者（调用者）和接收者（执行者）解耦。命令模式通过把请求封装成命令对象，使得你可以在不改变请求者的情况下改变请求的执行方式、顺序或者操作对象。</p>
<ul>
<li>
<p><strong>行为封装</strong>：命令模式将请求、操作或事务封装为命令对象，这些对象可以被请求者调用。请求者不关心具体操作的执行方式，只需要调用命令对象的执行方法即可。</p>
</li>
<li>
<p><strong>请求者和执行者解耦</strong>：通过引入命令对象，调用者和被调用者的关系被解耦，调用者不需要知道如何执行操作，也不需要知道具体的操作是什么，只需要发出命令请求。</p>
</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/1209017/202503/1209017-20250326131740489-1599373132.gif" alt="image" loading="lazy"></p>
<p>需要查看往期设计模式文章的，可以在个人主页中或者文章开头的集合中查看，可关注我，持续更新中。。。</p>
<hr>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247486066&amp;idx=1&amp;sn=e8c7423105ddd0562f50892010941efc&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">超实用的SpringAOP实战之日志记录</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485873&amp;idx=1&amp;sn=08b58de61c716e5c57ff2fddb947f0d8&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">2023年下半年软考考试重磅消息</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485909&amp;idx=1&amp;sn=e20f3b7b413310ca78f90c13305972ab&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">通过软考后却领取不到实体证书？</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485802&amp;idx=1&amp;sn=863cf239124b98d39ec551b6cb67845c&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">计算机算法设计与分析（第5版）</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485015&amp;idx=1&amp;sn=862bc2b379726b89cdb396ec0d325cc0&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">Java全栈学习路线、学习资源和面试题一条龙</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485956&amp;idx=1&amp;sn=57407d9f7921254ba19ed70fa3bd6a2d&amp;chksm=ec62ca99db15438f13f2cf96d17a3e282028fa7960af56126caec68fb6eafd46d6e04a10ad0c&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">软考证书=职称证书？</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485837&amp;idx=1&amp;sn=b9b17dfd252882468b8eea31012df6fc&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">软考中级--软件设计师毫无保留的备考分享</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.36251478312847224" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-27 15:38">2025-03-27 15:38</span>&nbsp;
<a href="https://www.cnblogs.com/dennyLee2025">渊渟岳</a>&nbsp;
阅读(<span id="post_view_count">107</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18793575" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18793575);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18793575', targetLink: 'https://www.cnblogs.com/dennyLee2025/p/18793575', title: '掌握设计模式--命令模式' })">举报</a>
</div>
        