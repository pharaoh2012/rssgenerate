
        <h2>
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wuhuacong/p/18844209" title="发布于 2025-04-24 11:22">
    <span role="heading" aria-level="2">在Python后端项目FastApi中使用MongoDB进行数据处理</span>
    

</a>

        </h2>
        <div class="postbody">
                <div id="cnblogs_post_description" style="display: none">
        
        我在前面随笔《在SqlSugar的开发框架中增加对低代码EAV模型（实体-属性-值）的WebAPI实现支持》中介绍了对于EAV数据存储的时候，我们把变化字段的数据记录存储在MongoDB数据库里面，这样除了支持动态化字段变化外，也更好的支持对字段不同类型的查询处理，之前随笔介绍的是基于C#操作MongoDB数据库的处理，由于Python后端FastApi项目的设计初衷是可以平滑更换 SqlSugar项目的Web API的，因此会涉及到在Python项目中对MongoDB的相关操作。本篇随笔先对Python环境中操作MongoDB数据库进行相关的介绍。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>我在前面随笔《<a class="postTitle2 vertical-middle pinned-post" href="https://www.cnblogs.com/wuhuacong/p/18842471">在SqlSugar的开发框架中增加对低代码EAV模型（实体-属性-值）的WebAPI实现支持</a>》中介绍了对于EAV数据存储的时候，我们把变化字段的数据记录存储在MongoDB数据库里面，这样除了支持动态化字段变化外，也更好的支持对字段不同类型的查询处理，之前随笔介绍的是基于C#操作MongoDB数据库的处理，由于Python后端FastApi项目的设计初衷是可以平滑更换 SqlSugar项目的Web API的，因此会涉及到在Python项目中对MongoDB的相关操作。本篇随笔先对Python环境中操作MongoDB数据库进行相关的介绍。</p>
<h3>1、Python环境中操作MongoDB数据库的准备</h3>
<p>如果需要了解相关MongoDB数据库的相关信息和C#开发MongoDB的内容，可以参考我的随笔《<a href="https://www.cnblogs.com/wuhuacong/tag/MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93/" target="_blank">MongoDB数据库内容</a>》，里面包含我对这个主题的相关介绍。</p>
<p>具体可以进一步参考官网里面的介绍。</p>
<p>https://www.mongodb.com/zh-cn/docs/</p>
<p>https://www.mongodb.com/zh-cn/docs/drivers/csharp/current/</p>
<p>https://www.mongodb.com/zh-cn/docs/languages/python/</p>
<p>https://www.mongodb.com/zh-cn/docs/drivers/motor/</p>
<p>如果我们需要下载安装，可以根据不同的操作系统下载对应的社区版本安装文件即可。</p>
<p><a href="https://www.mongodb.com/zh-cn/products/self-managed/community-edition" target="_blank" rel="noopener nofollow">https://www.mongodb.com/zh-cn/products/self-managed/community-edition</a></p>
<p>安装完成后，可以使用管理工具进行MongoDB数据库的连接和创建，如下所示可以根据不同的需要创建不同的集合。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202504/8867-20250423120008137-409181928.png" alt="" width="673" height="476" class="medium-zoom-image" loading="lazy"></p>
<p>关系型数据库和MongoDB的数据库，它们的相关概念，对比关系图如下所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202504/8867-20250424114349853-1877805995.png" alt="" width="381" height="222"></p>
<p>我们安装MongoDB数据库后，它是驻留在Window的服务里面，创建服务并顺利启动成功后，然后就可以在系统的服务列表里查看到了，我们确认把它设置为自动启动的Windows服务即可。</p>
<p><img src="https://images2015.cnblogs.com/blog/8867/201601/8867-20160105091401918-1338954749.png" alt="" width="744" height="262" class="medium-zoom-image"></p>
<p>由于我们希望使用异步来操作MongoDB数据库，推荐使用motor驱动来操作它。Motor是一个异步mongodb driver，支持异步读写mongodb。</p>
<p>具体使用我们可以参考官网的介绍：<a href="https://www.mongodb.com/zh-cn/docs/drivers/motor/" target="_blank" rel="noopener nofollow">https://www.mongodb.com/zh-cn/docs/drivers/motor/</a></p>
<p>使用前，我们需要再我们FastAPI项目中安装MongoDB和Motor的依赖模块。就是pymonogo和motor</p>
<p>我的requirement.txt文件中包含下面两个</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202504/8867-20250424102241185-396148523.png" alt="" width="457" height="191" loading="lazy"></p>
<p>&nbsp;我们如果没有初始化安装，通过pip进行安装即可。</p>
<div class="cnblogs_code">
<pre>pip <span style="color: rgba(0, 0, 255, 1)">install</span> pymongo motor</pre>
</div>
<p>使用它的基础代码如下所示。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> motor.motor_asyncio

client </span>=<span style="color: rgba(0, 0, 0, 1)"> motor.motor_asyncio.AsyncIOMotorClient()
或者
client </span>= motor.motor_asyncio.AsyncIOMotorClient(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">mongodb://localhost:27017</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
或者
client </span>= motor.motor_asyncio.AsyncIOMotorClient(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">mongodb://username:password@localhost:27017/dbname</span><span style="color: rgba(128, 0, 0, 1)">'</span>)</pre>
</div>
<p>根据MongoDB官网的说明，<strong>MongoDB的适用场景如下</strong>:</p>
<p>1）网站实时数据:MongoDB非常适合实时的插入，更新与查询，并具备网站实时数据存储所需的复制及高度伸缩性。</p>
<p>2）数据缓存:由于性能很高，MongoDB也适合作为信息基础设施的缓存层。在系统重启之后，由MongoDB搭建的持久化缓存层可以避免下层的数据源过载。</p>
<p>3）大尺寸、低价值数据存储:使用传统的关系型数据库存储一些数据时可能会比较昂贵，在此之前，很多时候程序员往往会选择传统的文件进行存储。</p>
<p>4）高伸缩性场景:MongoDB非常适合由数十或数百台服务器组成的数据库。MongoDB的路线图中已经包含对MapReduce引擎的内置支持。</p>
<p>5）对象或JSON数据存储:MongoDB的BSON数据格式非常适合文档化格式的存储及查询。</p>
<p>MongoDB数据库支持常规的增删改查等操作，其中它的 find方法很强大，可以组合很多条件查询的方式，如下所示：</p>
<div class="cnblogs_code">
<pre>db.collection.<span style="color: rgba(0, 0, 255, 1)">find</span>({ <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">key</span><span style="color: rgba(128, 0, 0, 1)">"</span> : value })    查找key=<span style="color: rgba(0, 0, 0, 1)">value的数据
db.collection.</span><span style="color: rgba(0, 0, 255, 1)">find</span>({ <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">key</span><span style="color: rgba(128, 0, 0, 1)">"</span> : { $gt: value } })    key &gt;<span style="color: rgba(0, 0, 0, 1)"> value
db.collection.</span><span style="color: rgba(0, 0, 255, 1)">find</span>({ <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">key</span><span style="color: rgba(128, 0, 0, 1)">"</span> : { $lt: value } })    key &lt;<span style="color: rgba(0, 0, 0, 1)"> value
db.collection.</span><span style="color: rgba(0, 0, 255, 1)">find</span>({ <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">key</span><span style="color: rgba(128, 0, 0, 1)">"</span> : { $gte: value } })    key &gt;=<span style="color: rgba(0, 0, 0, 1)"> value
db.collection.</span><span style="color: rgba(0, 0, 255, 1)">find</span>({ <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">key</span><span style="color: rgba(128, 0, 0, 1)">"</span> : { $lte: value } })    key &lt;=<span style="color: rgba(0, 0, 0, 1)"> value
db.collection.</span><span style="color: rgba(0, 0, 255, 1)">find</span>({ <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">key</span><span style="color: rgba(128, 0, 0, 1)">"</span> : { $gt: value1 , $lt: value2 } })    value1 &lt; key &lt;<span style="color: rgba(0, 0, 0, 1)">value2
db.collection.</span><span style="color: rgba(0, 0, 255, 1)">find</span>({ <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">key</span><span style="color: rgba(128, 0, 0, 1)">"</span> : { $ne: value } })    key &lt;&gt;<span style="color: rgba(0, 0, 0, 1)"> value
db.collection.</span><span style="color: rgba(0, 0, 255, 1)">find</span>({ <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">key</span><span style="color: rgba(128, 0, 0, 1)">"</span> : { $mod : [ <span style="color: rgba(128, 0, 128, 1)">10</span> , <span style="color: rgba(128, 0, 128, 1)">1</span> ] } })    取模运算，条件相当于key % <span style="color: rgba(128, 0, 128, 1)">10</span> == <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)"> 即key除以10余数为1的
db.collection.</span><span style="color: rgba(0, 0, 255, 1)">find</span>({ <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">key</span><span style="color: rgba(128, 0, 0, 1)">"</span> : { $nin: [ <span style="color: rgba(128, 0, 128, 1)">1</span>, <span style="color: rgba(128, 0, 128, 1)">2</span>, <span style="color: rgba(128, 0, 128, 1)">3</span> ] } })    不属于，条件相当于key的值不属于[ <span style="color: rgba(128, 0, 128, 1)">1</span>, <span style="color: rgba(128, 0, 128, 1)">2</span>, <span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)"> ]中任何一个
db.collection.</span><span style="color: rgba(0, 0, 255, 1)">find</span>({ <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">key</span><span style="color: rgba(128, 0, 0, 1)">"</span> : { $<span style="color: rgba(0, 0, 255, 1)">in</span>: [ <span style="color: rgba(128, 0, 128, 1)">1</span>, <span style="color: rgba(128, 0, 128, 1)">2</span>, <span style="color: rgba(128, 0, 128, 1)">3</span> ] } })    属于，条件相当于key等于[ <span style="color: rgba(128, 0, 128, 1)">1</span>, <span style="color: rgba(128, 0, 128, 1)">2</span>, <span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)"> ]中任何一个
db.collection.</span><span style="color: rgba(0, 0, 255, 1)">find</span>({ <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">key</span><span style="color: rgba(128, 0, 0, 1)">"</span> : { $size: <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)"> } })    $size 数量、尺寸，条件相当于key的值的数量是1（key必须是数组，一个值的情况不能算是数量为1的数组）
db.collection.</span><span style="color: rgba(0, 0, 255, 1)">find</span>({ <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">key</span><span style="color: rgba(128, 0, 0, 1)">"</span> : { $exists : <span style="color: rgba(0, 0, 255, 1)">true</span>|<span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)"> } })    $exists 字段存在，true返回存在字段key的数据，false返回不存在字度key的数据
db.collection.</span><span style="color: rgba(0, 0, 255, 1)">find</span>({ <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">key</span><span style="color: rgba(128, 0, 0, 1)">"</span>: /^val.*val$/<span style="color: rgba(0, 0, 0, 1)">i })    正则，类似like；“i”忽略大小写，“m”支持多行
db.collection.</span><span style="color: rgba(0, 0, 255, 1)">find</span>({ $or : [{a : <span style="color: rgba(128, 0, 128, 1)">1</span>}, {b : <span style="color: rgba(128, 0, 128, 1)">2</span>} ] })    $or或 （注意：MongoDB <span style="color: rgba(128, 0, 128, 1)">1.5</span>.3后版本可用），符合条件a=1的或者符合条件b=<span style="color: rgba(0, 0, 0, 1)">2的数据都会查询出来
db.collection.</span><span style="color: rgba(0, 0, 255, 1)">find</span>({ <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">key</span><span style="color: rgba(128, 0, 0, 1)">"</span>: value , $or : [{ a : <span style="color: rgba(128, 0, 128, 1)">1</span> } , { b : <span style="color: rgba(128, 0, 128, 1)">2</span> }] })    符合条件key=<span style="color: rgba(0, 0, 0, 1)">value ，同时符合其他两个条件中任意一个的数据
db.collection.</span><span style="color: rgba(0, 0, 255, 1)">find</span>({ <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">key.subkey</span><span style="color: rgba(128, 0, 0, 1)">"</span> :value })    内嵌对象中的值匹配，注意：<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">key.subkey</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">必须加引号
db.collection.</span><span style="color: rgba(0, 0, 255, 1)">find</span>({ <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">key</span><span style="color: rgba(128, 0, 0, 1)">"</span>: { $not : /^val.*val$/i } })    这是一个与其他查询条件组合使用的操作符，不会单独使用。上述查询条件得到的结果集加上$not之后就能获得相反的集合。</pre>
</div>
<p>比较符号说明如下：</p>
<div class="table-wrapper">
<table style="height: 264px; width: 879px">
<thead>
<tr><th>符　　号</th><th>含　　义</th><th>示　　例</th></tr>
</thead>
<tbody>
<tr>
<td><code>$lt</code></td>
<td>小于</td>
<td><code>{'age': {'$lt': 20}}</code></td>
</tr>
<tr>
<td><code>$gt</code></td>
<td>大于</td>
<td><code>{'age': {'$gt': 20}}</code></td>
</tr>
<tr>
<td><code>$lte</code></td>
<td>小于等于</td>
<td><code>{'age': {'$lte': 20}}</code></td>
</tr>
<tr>
<td><code>$gte</code></td>
<td>大于等于</td>
<td><code>{'age': {'$gte': 20}}</code></td>
</tr>
<tr>
<td><code>$ne</code></td>
<td>不等于</td>
<td><code>{'age': {'$ne': 20}}</code></td>
</tr>
<tr>
<td><code>$in</code></td>
<td>在范围内</td>
<td><code>{'age': {'$in': [20, 23]}}</code></td>
</tr>
<tr>
<td><code>$nin</code></td>
<td>不在范围内</td>
<td><code>{'age': {'$nin': [20, 23]}}</code></td>
</tr>
</tbody>
</table>
</div>
<p>另外，还可以进行正则匹配查询。例如，查询名字以 M 开头的学生数据，示例如下：</p>
<div class="cnblogs_code">
<pre>results = collection.<span style="color: rgba(0, 0, 255, 1)">find</span>({<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">name</span><span style="color: rgba(128, 0, 0, 1)">'</span>: {<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">$regex</span><span style="color: rgba(128, 0, 0, 1)">'</span>: <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">^M.*</span><span style="color: rgba(128, 0, 0, 1)">'</span>}})</pre>
</div>
<p>这里使用&nbsp;<code>$regex</code>&nbsp;来指定正则匹配，<code>^M.*</code>&nbsp;代表以 M 开头的正则表达式。</p>
<p><strong>多条件查询&nbsp;&nbsp;<code>$and&nbsp;</code><code>$or</code></strong></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># and查询
db.collection.</span><span style="color: rgba(0, 0, 255, 1)">find</span><span style="color: rgba(0, 0, 0, 1)">({
         $and :  [
                { </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">age</span><span style="color: rgba(128, 0, 0, 1)">"</span> :  {$gt : <span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)"> }} ,
                { </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">gender</span><span style="color: rgba(128, 0, 0, 1)">"</span> :  <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">man</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> }
          ]
})

＃or查询
db.collection.</span><span style="color: rgba(0, 0, 255, 1)">find</span><span style="color: rgba(0, 0, 0, 1)">({
          $or : [
                    {</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">age</span><span style="color: rgba(128, 0, 0, 1)">"</span> :  {$gt : <span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)"> }},
                    { </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">gender</span><span style="color: rgba(128, 0, 0, 1)">"</span> :  <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">man</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">}
         ]
})

#and查询　和　or查询
db.inventory.</span><span style="color: rgba(0, 0, 255, 1)">find</span><span style="color: rgba(0, 0, 0, 1)">( {
    $and : [
        { $or : [ { price : </span><span style="color: rgba(128, 0, 128, 1)">0.99</span> }, { price : <span style="color: rgba(128, 0, 128, 1)">1.99</span><span style="color: rgba(0, 0, 0, 1)"> } ] },
        { $or : [ { sale : </span><span style="color: rgba(0, 0, 255, 1)">true</span> }, { qty : { $lt : <span style="color: rgba(128, 0, 128, 1)">20</span><span style="color: rgba(0, 0, 0, 1)"> } } ] }
    ]
} )</span></pre>
</div>
<p>关于这些操作的更详细用法，可以在 MongoDB 官方文档找到：&nbsp;<a href="https://docs.mongodb.com/manual/reference/operator/query/" rel="noopener nofollow" target="_blank">https://docs.mongodb.com/manual/reference/operator/query/</a>。</p>
<p>当然还有插入更新的处理语句也是很特别的。</p>
<div class="cnblogs_code">
<pre>db.student.insert({name:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">student1</span><span style="color: rgba(128, 0, 0, 1)">'</span>,subject:[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">arts</span><span style="color: rgba(128, 0, 0, 1)">'</span>,<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">music</span><span style="color: rgba(128, 0, 0, 1)">'</span>]})</pre>
</div>
<p>特别是更新操作需要说明一下，支持常规的$set方法（修改）、$unset方法（移除指定的键），还有原子级的$inc方法（数值增减），$rename方法（重命名字段名称）等等，</p>
<div class="cnblogs_code">
<pre>db.users.update({<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">_id</span><span style="color: rgba(128, 0, 0, 1)">"</span> : ObjectId(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">51826852c75fdd1d8b805801</span><span style="color: rgba(128, 0, 0, 1)">"</span>)},  {<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">$set</span><span style="color: rgba(128, 0, 0, 1)">"</span> : {<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">hobby</span><span style="color: rgba(128, 0, 0, 1)">"</span> :[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">swimming</span><span style="color: rgba(128, 0, 0, 1)">"</span>,<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">basketball</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]}} )
db.users.update({</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">_id</span><span style="color: rgba(128, 0, 0, 1)">"</span> : ObjectId(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">51826852c75fdd1d8b805801</span><span style="color: rgba(128, 0, 0, 1)">"</span>)},{<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">$unset</span><span style="color: rgba(128, 0, 0, 1)">"</span> : {<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">hobby</span><span style="color: rgba(128, 0, 0, 1)">"</span> :<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)"> }} )
db.posts.update({</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">_id</span><span style="color: rgba(128, 0, 0, 1)">"</span> : ObjectId(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">5180f1a991c22a72028238e4</span><span style="color: rgba(128, 0, 0, 1)">"</span>)}, {<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">$inc</span><span style="color: rgba(128, 0, 0, 1)">"</span>:{<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">pageviews</span><span style="color: rgba(128, 0, 0, 1)">"</span>:<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">}})
db.students.update( { _id: </span><span style="color: rgba(128, 0, 128, 1)">1</span> }, { $rename: { <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">nickname</span><span style="color: rgba(128, 0, 0, 1)">'</span>: <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">alias</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">cell</span><span style="color: rgba(128, 0, 0, 1)">'</span>: <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">mobile</span><span style="color: rgba(128, 0, 0, 1)">'</span> } } </pre>
</div>
<p>upsert是一种特殊的更新操作，不是一个操作符。（upsert&nbsp;=&nbsp;up[date]+[in]sert），也就是如果存在则更新，否则就写入一条新的记录操作。这个参数是个布尔类型，默认是false。</p>
<div class="cnblogs_code">
<pre>db.users.update({age :<span style="color: rgba(128, 0, 128, 1)">25</span>}, {$inc :{<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">age</span><span style="color: rgba(128, 0, 0, 1)">"</span> :<span style="color: rgba(128, 0, 128, 1)">3</span>}}, <span style="color: rgba(0, 0, 255, 1)">true</span>)</pre>
</div>
<p>另外，Update可以对Json的集合进行处理，如果对于subject对象是一个集合的话，插入或更新其中的字段使用下面的语句</p>
<div class="cnblogs_code">
<pre>db.student.update({name:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">student5</span><span style="color: rgba(128, 0, 0, 1)">'</span>},{$set:{subject:[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">music</span><span style="color: rgba(128, 0, 0, 1)">'</span>]}},{upsert:<span style="color: rgba(0, 0, 255, 1)">true</span>});</pre>
</div>
<p>如果是记录已经存在，我们可以使用索引数值进行更新其中集合里面的数据，如下所示。</p>
<div class="cnblogs_code">
<pre>db.student.update({name:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">student3</span><span style="color: rgba(128, 0, 0, 1)">'</span>},{$set:{<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">subject.0</span><span style="color: rgba(128, 0, 0, 1)">'</span>:<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">arts</span><span style="color: rgba(128, 0, 0, 1)">'</span>}});</pre>
</div>
<p>&nbsp;</p>
<h3>2、在FastAPI项目中使用pymongo 和motor 操作MongoDB</h3>
<p>上面我们大致介绍了一些基础的MongoDB数据库信息。</p>
<p>之前随笔《<span style="font-size: 14px"><a id="cb_post_title_url" class="postTitle2 vertical-middle" title="发布于 2024-08-12 16:09" href="https://www.cnblogs.com/wuhuacong/p/18355162">Python 开发环境的准备以及一些常用类库模块的安装</a></span>》介绍过我们的FastAPI配置信息，存储在.env文件中的，在FastAPI项目启动的时候，根据需要进行读取加载到对象里面。</p>
<p>如对于配置信息的处理，我们还可以引入&nbsp;python-dotenv 和&nbsp;&nbsp;pydantic_settings 来统一管理配置参数。我们的项目.env文件部分配置如下。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202504/8867-20250424104330362-1165800867.png" alt="" width="775" height="415" loading="lazy"></p>
<p>&nbsp;最后我们通过pydantic_settings的配置处理，获得相关的配置对象信息，如下。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202504/8867-20250424104452388-1615975198.png" alt="" width="613" height="186" loading="lazy"></p>
<p>其中的MONGO_URL 就是我们具体使用的MogoDB数据库连接信息了。</p>
<p>为了和数据库连接一样方便使用MongoDB的连接，我们可以通过在一个独立的文件中声明获得MongoDB的数据库和集合对象，并且通过缓存的方式提高使用效率。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> motor.motor_asyncio <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> AsyncIOMotorClient
</span><span style="color: rgba(0, 0, 255, 1)">from</span> motor.motor_asyncio <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> AsyncIOMotorCollection
</span><span style="color: rgba(0, 0, 255, 1)">from</span> functools <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> lru_cache
</span><span style="color: rgba(0, 0, 255, 1)">from</span> core.config <span style="color: rgba(0, 0, 255, 1)">import</span><strong><span style="color: rgba(0, 0, 0, 1)"> settings

</span></strong><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> MongoClientManager:
    </span><span style="color: rgba(0, 0, 255, 1)">def</span> <span style="color: rgba(128, 0, 128, 1)">__init__</span>(self, uri: str =<span style="color: rgba(0, 0, 0, 1)"> settings.MONGO_URL):
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">初始化 MongoDB 客户端管理器
        Args:
            uri = mongodb://{MONGO_HOST}:{MONGO_PORT}/{MONGO_DB_NAME}</span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">

        self._client </span>=<span style="color: rgba(0, 0, 0, 1)"> AsyncIOMotorClient(uri)
        self._db </span>= self._client.get_default_database()  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 使用 URI 中指定的 dbname</span>
<span style="color: rgba(0, 0, 0, 1)">
    @property
    </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> db(self):
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> self._db

    </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> close(self):
        self._client.close()

</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 创建全局 Mongo 管理器实例</span>
<span style="color: rgba(0, 0, 0, 1)">@lru_cache()
</span><span style="color: rgba(0, 0, 255, 1)">def</span> <span style="color: rgba(255, 0, 0, 1)"><strong>get_mongo_client</strong></span>() -&gt;<span style="color: rgba(0, 0, 0, 1)"> MongoClientManager:
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> MongoClientManager()

@lru_cache()
</span><span style="color: rgba(0, 0, 255, 1)">def</span> <span style="color: rgba(255, 0, 0, 1)"><strong>get_collection</strong></span>(entity_model: str) -&gt;<span style="color: rgba(0, 0, 0, 1)"> AsyncIOMotorCollection:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
    获取指定名称的集合（collection），类型是 BsonDocument（等价于 Python dict）

    MongoDB 的集合通常在首次写入数据时自动创建，因此你只需要获取对应集合即可，不需要手动“创建”
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    db </span>=<span style="color: rgba(0, 0, 0, 1)"> get_mongo_client().db
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> db[entity_model]</pre>
</div>
<p>这样，我们项目启动的时候，自动加载配置文件，并在这里初始化MongoDBClient的异步对象和集合缓存对象。</p>
<p>有了这些，我们为了方便，还需要对MongoDB数据库的操作进行一些的封装处理，以提高我们对接口的使用遍历，毕竟我们前面介绍到了MongoDB支持非常复杂的查询和处理，我们往往只需要一些特殊的接口即可，因此封装接口有利于我们对接口的使用便利性。</p>
<p>我们在项目的utils目录中增加一个辅助类mongo_helper.py，用来封装MongoDB的相关操作的。</p>
<p>我们截取部分代码，如下所示。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)"><strong> MongoAsyncHelper</strong></span>:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">基于 motor 实现MongoDb异步操作，支持：
    insert_one / insert_many
    find_one / find_many
    update_one / update_many
    delete_one / delete_many
    复杂条件、分页、排序、模糊查询等</span><span style="color: rgba(128, 0, 0, 1)">"""</span>

    <span style="color: rgba(0, 0, 255, 1)">def</span> <span style="color: rgba(128, 0, 128, 1)">__init__</span><span style="color: rgba(0, 0, 0, 1)">(self, collection: AsyncIOMotorCollection):
        self.collection </span>=<span style="color: rgba(0, 0, 0, 1)"> collection

    async </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)"><strong> insert_one</strong></span>(self, data: Dict[str, Any]):
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">插入单条数据

        examples:
            helper = MongoAsyncHelper(collection)
            await helper.insert_one({
                "name": "John",
                "age": 25,
                "created_at": datetime.utcnow()}
            )

        args:
            data: 待插入的数据
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span>
        <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> await self.collection.insert_one(data)

    async </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)"><strong> insert_many</strong></span>(self, data_list: List[Dict[str, Any]]):
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">插入多条数据

        examples:
            helper = MongoAsyncHelper(collection)
            await helper.insert_many([
                {"name": "John", "age": 25, "created_at": datetime.utcnow()},
                {"name": "Mary", "age": 30, "created_at": datetime.utcnow()}
            ])

        args:
            data_list: 待插入的数据列表
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span>
        <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> await self.collection.insert_many(data_list)

    async </span><span style="color: rgba(0, 0, 255, 1)">def</span> <span style="color: rgba(255, 0, 0, 1)"><strong>find_by_id</strong></span>(self, id: str) -&gt;<span style="color: rgba(0, 0, 0, 1)"> Optional[Dict[str, Any]]:
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">根据 _id 查询单条数据</span><span style="color: rgba(128, 0, 0, 1)">"""</span>
        <span style="color: rgba(0, 0, 255, 1)">return</span> await self.find_one({<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">_id</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: id})

    async </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)"><strong> update_by_id</strong></span>(self, id: str, update_data: Dict[str, Any]):
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">根据 _id 更新单条数据</span><span style="color: rgba(128, 0, 0, 1)">"""</span>
        <span style="color: rgba(0, 0, 255, 1)">return</span> await self.update_one({<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">_id</span><span style="color: rgba(128, 0, 0, 1)">"</span>: id}, {<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">$set</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: update_data})

    async </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)"><strong> delete_by_id</strong></span>(self, id: str):
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">根据 _id 删除单条数据</span><span style="color: rgba(128, 0, 0, 1)">"""</span>
        <span style="color: rgba(0, 0, 255, 1)">return</span> await self.delete_one({<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">_id</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: id})

      ...............</span></pre>
</div>
<p>例如，我们在前面介绍的EAV处理中，获取MongoDB数据库的指定实体类型（对应表）的所有集合处理，在Python的数据处理层代码中如下所示。</p>
<div class="cnblogs_code">
<pre>    async <span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)"><strong> mongo_get_all</strong></span>(
        self,
        db: AsyncSession,
        entitytype_id: str,
        parentid: str </span>=<span style="color: rgba(0, 0, 0, 1)"> None,
        sorting: str </span>=<span style="color: rgba(0, 0, 0, 1)"> None,
    ) </span>-&gt;<span style="color: rgba(0, 0, 0, 1)"> List[dict]:
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">获取实体类型的所有记录

        :param db: 数据库会话
        :param entitytype_id: 实体类型ID
        :param parentid: 父ID
        :param sorting: 排序条件,格式：name asc 或 name asc,age desc
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">

        items </span>=<span style="color: rgba(0, 0, 0, 1)"> []

        </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">:
            entityType: EntityType </span>= await self.<span style="color: rgba(128, 0, 128, 1)">__get_entity_type</span><span style="color: rgba(0, 0, 0, 1)">(db, entitytype_id)
            self.logger.info(f</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">获取实体类型：{entitytype_id}, {entityType.name}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

            </span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(0, 0, 255, 1)">not</span><span style="color: rgba(0, 0, 0, 1)"> entityType:
                </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> items

            </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 连接 MongoDB</span>
            collection =<span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)"><strong> get_collection</strong></span>(entityType.entitymodel)
            mongo_helper </span>=<span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)"><strong> MongoAsyncHelper</strong></span>(collection)

            </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 构建查询条件</span>
            filter =<span style="color: rgba(0, 0, 0, 1)"> {}
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> parentid <span style="color: rgba(0, 0, 255, 1)">is</span> <span style="color: rgba(0, 0, 255, 1)">not</span><span style="color: rgba(0, 0, 0, 1)"> None:
                filter[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ParentId</span><span style="color: rgba(128, 0, 0, 1)">"</span>] =<span style="color: rgba(0, 0, 0, 1)"> parentid

            sort_by </span>=<span style="color: rgba(0, 0, 0, 1)"> parse_sort_string(sorting)
            </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> print(sort_by)</span>
            <strong><span style="color: rgba(255, 0, 0, 1)">items = await mongo_helper.find_all(filter, sort_by)
            </span></strong><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> items
        </span><span style="color: rgba(0, 0, 255, 1)">except</span><span style="color: rgba(0, 0, 0, 1)"> Exception as e:
            self.logger.error(f</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">处理失败：{str(e)}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> items</pre>
</div>
<p>首先通过缓存接口<strong><span style="color: rgba(255, 0, 0, 1)">get_collection</span></strong>获得对应实体类型的集合，然后传递集合到辅助类&nbsp;<span style="color: rgba(255, 0, 0, 1)"><strong>MongoAsyncHelper</strong></span>后构建MongoDB辅助类，就可以利用其接口进行相关的MongoDB数据库操作处理了。</p>
<p>最后通过类似的处理，结合数据库操作和MongoDB数据库操作，我们把EAV的接口服务迁移到了Python中FastAPI项目中了。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202504/8867-20250424110403415-101478173.png" alt="" width="429" height="680" loading="lazy"></p>
<p>最后完成的FastAPI项目的EAV相关接口如下所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202504/8867-20250424111840106-1154344206.png" alt="" width="800" height="736" loading="lazy"></p>
<p>折叠相关模块显示如下所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202504/8867-20250424111953194-1177241522.png" alt="" width="491" height="385" loading="lazy"></p>
<p>&nbsp;最后切换到Winform项目上，调整接入的Web API数据源，同样获得一样的界面效果即可。</p>
<p>产品数据表。</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202407/8867-20240709102328480-1583314549.png" alt="" width="885" height="361" class="medium-zoom-image" loading="lazy"></p>
<p>订单数据表</p>
<p><img src="https://img2024.cnblogs.com/blog/8867/202407/8867-20240709103704508-1569686556.png" alt="" width="963" height="621" class="medium-zoom-image" loading="lazy"></p>
<p>&nbsp;</p>
</div>
<div id="MySignature" role="contentinfo">
    <div style="border-right-color: #cccccc; border-right-width: 1px; border-right-style: solid; padding-right: 5px; border-top-color: #cccccc; border-top-width: 1px; border-top-style: solid; padding-left: 4px; font-size: 13px; padding-bottom: 4px; border-left-color: #cccccc; border-left-width: 1px; border-left-style: solid; width: 98%; padding-top: 4px; border-bottom-color: #cccccc; border-bottom-width: 1px; border-bottom-style: solid; background-color: #eeeeee;">
    <img src="http://www.cnblogs.com/Images/OutliningIndicators/None.gif" align="top" alt="">
    <span style="color: #000000"><span class="Apple-tab-span" style="white-space: pre"></span>
     专注于代码生成工具、.Net/Python 框架架构及软件开发，以及各种Vue.js的前端技术应用。著有Winform开发框架/混合式开发框架、微信开发框架、Bootstrap开发框架、ABP开发框架、SqlSugar开发框架、Python开发框架等框架产品。
     <br>&nbsp;&nbsp;转载请注明出处：撰写人：伍华聪&nbsp;&nbsp;<a href="http://www.iqidi.com/" target="_blank">http://www.iqidi.com</a>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span></div>
</div>
<div class="clear"></div>

        </div>
        <p class="postfoot">
            posted on 
<span id="post-date" data-last-update-days="0.1934441242013889" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-24 11:44">2025-04-24 11:22</span>&nbsp;
<a href="https://www.cnblogs.com/wuhuacong">伍华聪</a>&nbsp;
阅读(<span id="post_view_count">47</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18844209);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18844209', targetLink: 'https://www.cnblogs.com/wuhuacong/p/18844209', title: '在Python后端项目FastApi中使用MongoDB进行数据处理' })">举报</a>

        </p>
    