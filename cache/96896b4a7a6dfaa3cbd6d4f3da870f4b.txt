
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/YangJieCheng/p/18767428" title="发布于 2025-03-12 13:58">
    <span role="heading" aria-level="2">Laravel11 从0开发 Swoole-Reverb 扩展包（三） - reverb广播驱动使用流程</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="前情提要">前情提要</h1>
<p>我们第一节的时候，已经大致介绍reverb，他 是 Laravel 应用程序的第一方 WebSocket 服务器，可将客户端和服务器之间的实时通信直接带到您的指尖。开源且只需一个 Artisan 命令即可 - 尽在 Laravel 团队的精心打造。<br>
<img src="https://img2024.cnblogs.com/blog/990003/202503/990003-20250312134421928-1538382286.png" alt="image" loading="lazy"></p>
<p>这一节开始，我们来介绍它具体使用方法。</p>
<hr>
<h1 id="如何使用">如何使用</h1>
<h2 id="安装">安装</h2>
<h3 id="第一步通过安装广播安装">第一步、通过安装广播安装</h3>
<h4 id="方式一">方式一</h4>
<p>在执行之前，需要把nodejs版本切换到22.0.0以上哦</p>
<pre><code class="language-shell">php artisan install:broadcasting
</code></pre>
<p>执行后，提示：您想安装并构建广播所需的节点依赖关系吗？<br>
<img src="https://img2024.cnblogs.com/blog/990003/202503/990003-20250312115113082-1799352144.png" alt="image" loading="lazy"></p>
<h4 id="方式二">方式二</h4>
<pre><code>composer require laravel/reverb
</code></pre>
<p>安装完成后，我们查看：<code>config/broadcasting.php</code> 文件：</p>
<pre><code class="language-php">&lt;?php

return [

/*
|--------------------------------------------------------------------------
| 默认广播器
|---------------------------------------------------------------------------
|
| 此选项控制当需要广播事件时框架将使用的默认广播器。您可以将其设置为
| 下面“connections”数组中定义的任何连接。
|
| 支持：“reverb”、“pusher”、“ably”、“redis”、“log”、“null”
|
*/

'default' =&gt; env('BROADCAST_CONNECTION', 'null'),

/*
|---------------------------------------------------------------------------------------
| 广播连接
|---------------------------------------------------------------------------------------
|
| 您可以在此处定义将用于
| 将事件广播到其他系统或通过 WebSocket 广播的所有广播连接。此数组中提供了
| 每种可用连接类型的示例。
| */

'connections' =&gt; [

'reverb' =&gt; [
'driver' =&gt; 'reverb',
'key' =&gt; env('REVERB_APP_KEY'),
'secret' =&gt; env('REVERB_APP_SECRET'),
'app_id' =&gt; env('REVERB_APP_ID'),
'options' =&gt; [
'host' =&gt; env('REVERB_HOST'),
'port' =&gt; env('REVERB_PORT', 443),
'scheme' =&gt; env('REVERB_SCHEME', 'https'),
'useTLS' =&gt; env('REVERB_SCHEME', 'https') === 'https',
],
'client_options' =&gt; [
// Guzzle 客户端选项： https://docs.guzzlephp.org/en/stable/request-options.html
],
],

'pusher' =&gt; [
'driver' =&gt; 'pusher',
'key' =&gt; env('PUSHER_APP_KEY'),
'secret' =&gt; env('PUSHER_APP_SECRET'),
'app_id' =&gt; env('PUSHER_APP_ID'),
'options' =&gt; [
'cluster' =&gt; env('PUSHER_APP_CLUSTER'),
'host' =&gt; env('PUSHER_HOST') ?: 'api-'.env('PUSHER_APP_CLUSTER', 'mt1').'.pusher.com',
'port' =&gt; env('PUSHER_PORT', 443),
'scheme' =&gt; env('PUSHER_SCHEME', 'https'),
'encrypted' =&gt; true,
'useTLS' =&gt; env('PUSHER_SCHEME', 'https') === 'https',
],
'client_options' =&gt; [
// Guzzle 客户端选项：https://docs.guzzlephp.org/en/stable/request-options.html
],
],

'ably' =&gt; [
'driver' =&gt; 'ably',
'key' =&gt; env('ABLY_KEY'),
],

'log' =&gt; [
'driver' =&gt; 'log',
],

'null' =&gt; [
'driver' =&gt; 'null',
],

],

];
</code></pre>
<p>接着我们修改<code>.env</code>文件中：</p>
<pre><code>BROADCAST_CONNECTION=reverb
</code></pre>
<h2 id="配置">配置</h2>
<p>在后台，install:broadcasting Artisan 命令将运行 reverb:install 命令，该命令将使用一组合理的默认配置选项安装 Reverb。如果您想进行任何配置更改，可以通过更新 Reverb 的环境变量或更新 config/reverb.php 配置文件来进行。</p>
<h3 id="应用程序凭据">应用程序凭据</h3>
<p>为了建立与 Reverb 的连接，必须在客户端和服务器之间交换一组 Reverb“应用程序”凭据。这些凭据在服务器上配置，用于验证来自客户端的请求。您可以使用以下环境变量定义这些凭据：</p>
<pre><code>REVERB_APP_ID=my-app-id
REVERB_APP_KEY=my-app-key
REVERB_APP_SECRET=my-app-secret
</code></pre>
<h3 id="允许的来源">允许的来源</h3>
<p>您还可以通过更新 config/reverb.php 配置文件 apps 部分中的 allowed_origins 配置值来定义客户端请求可能来自的来源。任何来自您允许的来源中未列出的来源的请求都将被拒绝。您可以使用 * 允许所有来源：</p>
<pre><code class="language-php">'apps' =&gt; [
    [
        'app_id' =&gt; 'my-app-id',
        'allowed_origins' =&gt; ['laravel.com'],
        // ...
    ]
]
</code></pre>
<h3 id="其他应用程序">其他应用程序</h3>
<p>通常，Reverb 会为安装该应用程序的应用程序提供 WebSocket 服务器。但是，可以使用单个 Reverb 安装为多个应用程序提供服务。</p>
<p>例如，您可能希望维护一个 Laravel 应用程序，该应用程序通过 Reverb 为多个应用程序提供 WebSocket 连接。这可以通过在应用程序的 config/reverb.php 配置文件中定义多个应用程序来实现：</p>
<pre><code class="language-php">'apps' =&gt; [
    [
        'app_id' =&gt; 'my-app-one',
        // ...
    ],
    [
        'app_id' =&gt; 'my-app-two',
        // ...
    ],
],
</code></pre>
<h3 id="ssl">SSL</h3>
<p>在大多数情况下，安全的 WebSocket 连接由上游 Web 服务器（Nginx 等）处理，然后再将请求代理到您的 Reverb 服务器。</p>
<p>但是，有时，例如在本地开发期间，让 Reverb 服务器直接处理安全连接会很有用。如果您正在使用 Laravel Herd 的安全站点功能，或者您正在使用 Laravel Valet 并已针对您的应用程序运行安全命令，则可以使用为您的站点生成的 Herd / Valet 证书来保护您的 Reverb 连接。为此，请将 REVERB_HOST 环境变量设置为您站点的主机名，或在启动 Reverb 服务器时明确传递主机名选项：</p>
<pre><code>php artisan reverb:start --host="0.0.0.0" --port=8080 --hostname="laravel.test"
</code></pre>
<p>由于 Herd 和 Valet 域解析为 localhost，运行上述命令将导致您的 Reverb 服务器可通过安全 WebSocket 协议 (wss) 在 wss://laravel.test:8080 访问。</p>
<p>您也可以通过在应用程序的 config/reverb.php 配置文件中定义 tls 选项来手动选择证书。在 tls 选项数组中，您可以提供 PHP 的 SSL 上下文选项支持的任何选项：</p>
<pre><code>'options' =&gt; [
    'tls' =&gt; [
        'local_cert' =&gt; '/path/to/cert.pem'
    ],
],
</code></pre>
<h3 id="herd-laravel开发-完善-一键式-php-开发环境">Herd (Laravel开发 完善 一键式 PHP 开发环境。)</h3>
<p><img src="https://img2024.cnblogs.com/blog/990003/202503/990003-20250312134319894-693836726.png" alt="image" loading="lazy"></p>
<p>heard是laravel全新的一键式 PHP 开发环境。 零依赖。零烦恼。我在b站上也看到一些up主在使用了。这个工具支持mac 和windows，大家也可以尝试下：<a href="https://herd.laravel.com/" target="_blank" rel="noopener nofollow">官网</a></p>
<h2 id="命令行">命令行</h2>
<pre><code>reverb
  reverb:install            Install the Reverb dependencies
  reverb:restart            Restart the Reverb server
  reverb:start              Start the Reverb server
</code></pre>
<h3 id="相关命令">相关命令</h3>
<pre><code># 运行
php artisan reverb:start
php artisan reverb:start --host=127.0.0.1 --port=9000
php artisan reverb:start --debug
php artisan reverb:restart
# 
</code></pre>
<p>对于host port 等配置，也可以通过在应用程序的 .env 配置文件中定义 REVERB_SERVER_HOST 和 REVERB_SERVER_PORT 环境变量。</p>
<p>REVERB_SERVER_HOST 和 REVERB_SERVER_PORT 环境变量不应与 REVERB_HOST 和 REVERB_PORT 混淆。前者指定运行 Reverb 服务器本身的主机和端口，而后者指示 Laravel 将广播消息发送到何处。例如，在生产环境中，您可以将来自端口 443 上的公共 Reverb 主机名的请求路由到在 0.0.0.0:8080 上运行的 Reverb 服务器。在这种情况下，您的环境变量将定义如下：</p>
<pre><code>REVERB_SERVER_HOST=0.0.0.0
REVERB_SERVER_PORT=8080

REVERB_HOST=ws.laravel.com
REVERB_PORT=443
</code></pre>
<h2 id="生产环境使用">生产环境使用</h2>
<h3 id="通过nginx反向代理">通过nginx反向代理</h3>
<pre><code>server {
    ...

    location / {
        proxy_http_version 1.1;
        proxy_set_header Host $http_host;
        proxy_set_header Scheme $scheme;
        proxy_set_header SERVER_PORT $server_port;
        proxy_set_header REMOTE_ADDR $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";

        proxy_pass http://0.0.0.0:8080;
    }

    ...
}
</code></pre>
<h3 id="优化">优化</h3>
<h4 id="文件描述符">文件描述符</h4>
<p><img src="https://img2024.cnblogs.com/blog/990003/202503/990003-20250312135105853-1348400772.png" alt="image" loading="lazy"></p>
<h4 id="event-loop">event loop</h4>
<p>在底层，Reverb 使用 ReactPHP 事件循环来管理服务器上的 WebSocket 连接。默认情况下，此事件循环由 stream_select 提供支持，不需要任何额外的扩展。但是，stream_select 通常限制为 1,024 个打开文件。因此，如果您计划处理超过 1,000 个并发连接，则需要使用不受相同限制的替代事件循环。</p>
<p>Reverb 将在可用时自动切换到 ext-uv 支持的循环。此 PHP 扩展可通过 PECL 安装：</p>
<pre><code>pecl install uv
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/990003/202503/990003-20250312135351003-2780632.png" alt="image" loading="lazy"></p>
<h4 id="supervisor-守护进程管理">Supervisor 守护进程管理</h4>
<p>使用宝塔的可以图形化操作，命令行就自行AI，关注一个优化参数：</p>
<pre><code>[supervisord]
...
minfds=10000
</code></pre>
<h1 id="参考文献">参考文献</h1>
<ul>
<li><a href="https://segmentfault.com/a/1190000022830770" target="_blank" rel="noopener nofollow">https://segmentfault.com/a/1190000022830770</a></li>
<li><a href="https://laravel.com/docs/12.x/reverb" target="_blank" rel="noopener nofollow">https://laravel.com/docs/12.x/reverb</a></li>
</ul>

</div>
<div id="MySignature" role="contentinfo">
    有耕耘、有搬运、共学习
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5957490565613426" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-12 13:58">2025-03-12 13:58</span>&nbsp;
<a href="https://www.cnblogs.com/YangJieCheng">wanzij</a>&nbsp;
阅读(<span id="post_view_count">45</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18767428" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18767428);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18767428', targetLink: 'https://www.cnblogs.com/YangJieCheng/p/18767428', title: 'Laravel11 从0开发 Swoole-Reverb 扩展包（三） - reverb广播驱动使用流程' })">举报</a>
</div>
        