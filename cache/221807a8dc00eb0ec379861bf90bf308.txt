
        <div class="postTitle">
            <h1><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenyishi/p/18658890" title="发布于 2025-01-08 08:46">
    <span role="heading" aria-level="2">在 .NET 中使用 Tesseract 识别图片文字</span>
    

</a>
</h1>
        </div>
        <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h5>1. 什么是 Tesseract</h5>
<p>Tesseract 是一个强大的字符识别 (OCR) 工具。它最初由 HP 发布，现在由 Google 和学术社区共同维护和开发。 Tesseract 支持多种语言和格式，能够高效地识别图片中的文字。</p>
<h5>2. 如何安装 Tesseract</h5>
<p>要在 .NET 项目中使用 Tesseract，需要安装相关的 NuGet 包和基础依赖。步骤如下：</p>
<ol>
<li>
<p>在项目中通过 NuGet 安装 Tesseract 包：</p>
<pre><code class="language-bash">dotnet add package Tesseract
</code></pre>
</li>
<li>
<p>安装 SkiaSharp 来处理图片：</p>
<pre><code class="language-bash">dotnet add package SkiaSharp
</code></pre>
</li>
</ol>
<h5>3. 训练数据从哪里下载</h5>
<p>Tesseract 需要训练数据文件来识别图片中的文字。这些训练数据文件可以从 <a href="https://github.com/tesseract-ocr/tessdata" rel="noopener nofollow">Tesseract OCR GitHub</a>&nbsp; https://github.com/tesseract-ocr/tessdata下载。选择您需要的语言文件，并放置在项目相关目录中。</p>
<h5>4. 如何使用 Tesseract</h5>
<p>使用 Tesseract 识别图片中的文字，可以通过以下步骤完成：</p>
<ol>
<li>创建一个 HttpClient 和 Logger ，用于下载图片和记录日志。</li>
<li>使用 SkiaSharp 来处理图片。</li>
<li>使用 Tesseract 完成 OCR 识别。</li>
</ol>
<p>例子如下：</p>
<pre><code class="language-csharp">using SkiaSharp;
using Tesseract;

namespace AutoGetOrder.WebAPI.Services.TesseractService
{
    public class TesseractOCRService
    {
        private readonly HttpClient _httpClient;
        private readonly ILogger&lt;TesseractOCRService&gt; _logger;

        public TesseractOCRService(HttpClient httpClient, ILogger&lt;TesseractOCRService&gt; logger)
        {
            _httpClient = httpClient;
            _logger = logger;
        }

        public async Task&lt;string&gt; Do(string imageUrl)
        {
            try
            {
                byte[] imageBytes = await DownloadImageAsync(imageUrl);
                using (var skBitmap = SKBitmap.Decode(imageBytes))
                {
                    var processedBitmap = PreprocessImage(skBitmap);
                    using (var pix = ConvertSKBitmapToPix(processedBitmap))
                    {
                        string captchaText = RecognizeText(pix);
                        return captchaText;
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.ToString());
                return string.Empty;
            }
        }

        private async Task&lt;byte[]&gt; DownloadImageAsync(string url)
        {
            return await _httpClient.GetByteArrayAsync(url);
        }

        private SKBitmap PreprocessImage(SKBitmap bitmap)
        {
            return bitmap;
        }

        private Pix ConvertSKBitmapToPix(SKBitmap skBitmap)
        {
            using (var image = SKImage.FromBitmap(skBitmap))
            using (var data = image.Encode(SKEncodedImageFormat.Png, 100))
            {
                return Pix.LoadFromMemory(data.ToArray());
            }
        }

        private string RecognizeText(Pix pix)
        {
            using (var engine = new TesseractEngine(@"./Services/TesseractService", "eng", EngineMode.Default))
            {
                using (var page = engine.Process(pix))
                {
                    return page.GetText();
                }
            }
        }
    }
}
</code></pre>
<h5>5. Docker 环境中安装依赖</h5>
<p>如果您在 Docker 环境中使用 Tesseract，需要确保基础依赖已经安装。参考PR https://github.com/charlesw/tesseract/issues/675 可以参考下面的 Dockerfile：</p>
<pre><code class="language-dockerfile">RUN apt-get update &amp;&amp; apt-get install -y \
    libfontconfig1 \
    libfreetype6 \
    libpng16-16 \
    libjpeg62-turbo \
    libx11-6 \
    libxext6 \
    libxrender1 \
    tesseract-ocr \
    libtesseract-dev \
    libleptonica-dev

RUN ln -s /usr/lib/x86_64-linux-gnu/libdl.so.2 /usr/lib/x86_64-linux-gnu/libdl.so
WORKDIR /app/x64
RUN ln -s /usr/lib/x86_64-linux-gnu/liblept.so.5 /app/x64/libleptonica-1.82.0.so
RUN ln -s /usr/lib/x86_64-linux-gnu/libtesseract.so.5 /app/x64/libtesseract50.so
</code></pre>
<p>这些依赖确保 Tesseract 和其依赖库在 Docker 中正常运行。</p>
<h5>6.一个例子</h5>
<p><img src="https://img2024.cnblogs.com/blog/1033233/202501/1033233-20250108084453021-540179860.png" alt="" width="431" height="234" loading="lazy"></p>
<p>&nbsp;</p>
<p>识别结果</p>
<p><img src="https://img2024.cnblogs.com/blog/1033233/202501/1033233-20250108084433799-1421500950.png" alt="" width="563" height="104" loading="lazy"></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

        <div class="postDesc">posted on 
<span id="post-date" data-last-update-days="3.313247447019676" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-08 08:46">2025-01-08 08:46</span>&nbsp;
<a href="https://www.cnblogs.com/chenyishi">chester·chen</a>&nbsp;
阅读(<span id="post_view_count">1382</span>)&nbsp;
评论(<span id="post_comment_count">6</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18658890" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18658890);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18658890', targetLink: 'https://www.cnblogs.com/chenyishi/p/18658890', title: '在 .NET 中使用 Tesseract 识别图片文字' })">举报</a>
</div>
    