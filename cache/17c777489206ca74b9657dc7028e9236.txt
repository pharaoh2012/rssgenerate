
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/noear/p/18848757" title="发布于 2025-04-27 08:16">
    <span role="heading" aria-level="2">把 Java WebApi 快速转为 Mcp-Server（使用 Solon AI MCP）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        solon-ai-mcp，提供了各种 mcp 相关能力，支持 java8, java11, java17, java21, java24 。是 solon-ai 项目的重要组成部分，可以快速把 api 转为 mcp-server
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>solon-ai-mcp，提供了各种 mcp 相关能力，支持 java8, java11, java17, java21, java24 。是 solon-ai 项目的重要组成部分，也可以嵌入到 springboot2, springboot3, jfinal, vert.x 等项目中使用。</p>
<p>依赖包：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.noear&lt;/groupId&gt;
    &lt;artifactId&gt;solon-ai-mcp&lt;/artifactId&gt;
    &lt;version&gt;最新版&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h3 id="1看一个简单的-web-控制器">1、看一个简单的 web 控制器</h3>
<p>此控制器有两个方法：get_weather，获取天气；get_rainfall，获取降雨量。后面基于它进行快速改造演示。</p>
<pre><code class="language-java">@Mapping("/web/api")
@Controller
public class McpServerTool {
    @Mapping("get_weather")
    public String get_weather(String location) {
        return "晴，14度";
    }
    
    @Mapping("get_rainfall")
    public String get_rainfall(String location) {
        return "555毫米";
    }
}
</code></pre>
<h3 id="2改造方案1复用-mvc-注解并添加-mcpserverendpoint-注解">2、改造方案1：复用 mvc 注解，并添加 <code>@McpServerEndpoint</code> 注解</h3>
<p>在 mvc 注解基础上，给方法和参数添加描述信息 <code>description</code> 信息（只适合 solon-web 项目，它的注解带有 <code>description</code> 属性）。再添加  <code>@McpServerEndpoint</code> 注解</p>
<pre><code class="language-java">@McpServerEndpoint(sseEndpoint = "/mcp/sse")
@Mapping("/web/api")
@Controller
public class McpServerTool {
    @Mapping(path="get_weather", description = "查询天气预报")
    public String get_weather(@Param(description = "城市位置") String location) {
        return "晴，14度";
    }
    
    @Mapping(path="get_rainfall", description = "查询城市降雨量")
    public String get_rainfall(@Param(description = "城市位置") String location) {
        return "555毫米";
    }
}
</code></pre>
<p>这个方案的提醒说明：</p>
<ul>
<li><code>@Mapping</code> （通用注解）相当于 ai 的 <code>@ToolMapping</code>（专用注解）</li>
<li><code>@Param</code> （通用注解）相当于 ai 的 <code>@ToolParam</code>（专用注解）</li>
<li>必须申明 <code>description</code> 属性（否则会异常提示）</li>
</ul>
<h3 id="3改造方案2在控制器上添加完整的-mcp-相关注解">3、改造方案2：在控制器上，添加完整的 Mcp 相关注解</h3>
<p>这个方案也适合 springboot2-web、sprngboot3-web、spring-mvc 或 jfinal 等项目，原控制器的代码不用动（原来有没有注解，不影响）。就像添加 swagger 注解那样，添加 mcp 相关注解即可。</p>
<p>注解简单说明（<code>?</code> 表示可选属性）：</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@ToolMapping(name?, description, returnDirect?, resultConverter?) </code></td>
<td>工具映射</td>
</tr>
<tr>
<td><code>@ToolParam(name?, description, required?)</code></td>
<td>工具的参数申明</td>
</tr>
</tbody>
</table>
<p>改造后的代码：</p>
<pre><code class="language-java">@McpServerEndpoint(sseEndpoint = "/mcp/sse")
@Mapping("/web/api")
@RestController
public class McpServerTool {
    @ToolMapping(description = "查询天气预报")
    @GetMapping("get_weather")
    public String get_weather(@ToolParam(description = "城市位置") String location) {
        return "晴，14度";
    }
    
    @ToolMapping(description = "查询城市降雨量")
    @GetMapping("get_rainfall")
    public String get_rainfall(@ToolParam(description = "城市位置") String location) {
        return "555毫米";
    }
}
</code></pre>
<h3 id="4也可以转为本地的大模型工具提供者使用toolprovider">4、也可以转为本地的大模型工具提供者使用（ToolProvider）</h3>
<p>上两个方案去掉 <code>@McpServerEndpoint</code> 注解，就不会发布为 MCP 服务端点。使用 MethodToolProvider 加载它，就能成为本地的工具提供者。</p>
<pre><code class="language-java">MethodToolProvider toolProvider = new MethodToolProvider(new McpServerTool());

var chatModel = ChatModel.of(...)
                .defaultToolsAdd(toolProvider) //添加默认工具
                .build();

chatModel.prompt("杭州今天的天气怎么样？")
              .call();
</code></pre>
<h3 id="5附代码仓库">5、附代码仓库</h3>
<p>solon-ai（源码）</p>
<ul>
<li><a href="https://gitee.com/opensolon/solon-ai" target="_blank" rel="noopener nofollow">https://gitee.com/opensolon/solon-ai</a></li>
<li><a href="https://gitcode.com/opensolon/solon-ai" target="_blank" rel="noopener nofollow">https://gitcode.com/opensolon/solon-ai</a></li>
<li><a href="https://github.com/opensolon/solon-ai" target="_blank" rel="noopener nofollow">https://github.com/opensolon/solon-ai</a></li>
</ul>
<p>solon-ai-mcp-embedded-examples（嵌入示例）</p>
<ul>
<li><a href="https://gitee.com/opensolon/solon-ai-mcp-embedded-examples" target="_blank" rel="noopener nofollow">https://gitee.com/opensolon/solon-ai-mcp-embedded-examples</a></li>
<li><a href="https://gitcode.com/opensolon/solon-ai-mcp-embedded-examples" target="_blank" rel="noopener nofollow">https://gitcode.com/opensolon/solon-ai-mcp-embedded-examples</a></li>
<li><a href="https://github.com/opensolon/solon-ai-mcp-embedded-examples" target="_blank" rel="noopener nofollow">https://github.com/opensolon/solon-ai-mcp-embedded-examples</a></li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.13353334036342593" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-27 09:06">2025-04-27 08:16</span>&nbsp;
<a href="https://www.cnblogs.com/noear">带刺的坐椅</a>&nbsp;
阅读(<span id="post_view_count">56</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18848757);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18848757', targetLink: 'https://www.cnblogs.com/noear/p/18848757', title: '把 Java WebApi 快速转为 Mcp-Server（使用 Solon AI MCP）' })">举报</a>
</div>
        