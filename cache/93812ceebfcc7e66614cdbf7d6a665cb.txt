
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/edisontalk/p/-/quick-start-agent-orchestration-handoff" title="发布于 2025-08-01 08:00">
    <span role="heading" aria-level="2">多Agent协作入门：移交编排模式</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250727154213255-594398176.png" alt="多Agent协作入门：移交编排模式" class="desc_img">
        在移交（也可以叫做交接）编排模式中，允许各个Agent根据上下文或用户请求相互转移控制权，每个Agent都可以通过适当的专业知识将对话“移交”给另一个Agent，确保每个Agent处理任务的某个指定部分。这种模式非常适合于客户支持（客服）、专家系统或需要动态委派类型的任务场景。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>大家好，我是Edison。</p>
<p><span><a class="normal_text_link" href="https://www.cnblogs.com/edisontalk/p/-/quick-start-agent-orchestration-groupchat" target="_blank" data-itemshowtype="0" data-linktype="2">上一篇</a>我们学习了Semantic Kernel中的群聊编排模式，它<span>非常适合集思广益、协作解决问题等类型任务场景。今天，我们学习新的模式：移交编排。</span></span></p>
<h1><strong>移交编排模式简介</strong></h1>
<p>在移交（也可以叫做交接）编排模式中，允许各个Agent根据上下文或用户请求相互转移控制权，每个Agent都可以通过适当的专业知识将对话“移交”给另一个Agent，确保每个Agent处理任务的某个指定部分。这种模式非常适合于客户支持（客服）、专家系统或需要动态委派类型的任务场景。</p>
<p>下图展示了一个客户支持的用例场景，当用户提交售后请求，先由某个前台代理（这里是General Support）进行请求分析，并将具体请求转移给某个后台专家（如Technical Expert）或 计费人员（如Billing）。</p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250727153055637-1904714231.png" alt="image" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<h1><strong><span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 8px;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin-top: 8px;margin-bottom: 8px;outline: 0px;visibility: visible;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;strong&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">实现移交编排模式</span></strong></h1>
<p>这里我们来实现一个客户支持的DEMO，假设我们是一个电商的后台客服中心，我们找了一群AI Agent来帮我们进行一些订单查询、退款、退货等通用类请求的客户服务支持。</p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250727153125105-328275453.png" alt="image" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>我们定义4个Agent：</p>
<p>（1）<strong>分流客服Agent</strong>：负责初步分流客户问题；</p>
<p>（2）<strong>订单状态查询Agent</strong>：负责处理客户的订单状态查询问题；</p>
<p>（3）<strong>订单退货处理Agent</strong>：负责处理客户申请的退货请求；</p>
<p>（4）<strong>订单退款处理Agent</strong>：负责处理客户申请的退款请求；</p>
<p><span><span>为了简单地实现这个功能，我们还是创建一个.NET控制台项目，然后安装以下包：</span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">Microsoft.SemanticKernel.Agents.Core
Microsoft.SemanticKernel.Agents.OpenAI (Preview版本）
Microsoft.SemanticKernel.Agents.Orchestration (Preview版本）
Microsoft.SemanticKernel.Agents.Runtime.InProcess (Preview版本）</span></pre>
</div>
<p>需要注意的是，由于Semantic Kernel的较多功能目前还处于实验预览阶段，所以建议在该项目的csproj文件中加入以下配置，统一取消警告：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">PropertyGroup</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">NoWarn</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>$(NoWarn);CA2007;IDE1006;SKEXP0001;SKEXP0110;OPENAI001<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">NoWarn</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">PropertyGroup</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre>
</div>
<p>创建一个appsettings.json配置文件，填入以下关于LLM API的配置，其中API_KEY请输入你自己的：</p>
<div class="cnblogs_code">
<pre>{
  "LLM": {
    "BASE_URL": "https://api.siliconflow.cn",
    "API_KEY": "******************************",
    "MODEL_ID": "Qwen/Qwen2.5-32B-Instruct"
  }
}</pre>
</div>
<p data-pm-slice="0 0 []">这里我们使用SiliconCloud提供的&nbsp;<span class="code-snippet__string">Qwen2.5-32B-Instruct&nbsp;模型，你可以通过这个URL注册账号：<a href="https://cloud.siliconflow.cn/i/DomqCefW" rel="noopener nofollow" target="_blank">https://cloud.siliconflow.cn/i/DomqCefW</a>&nbsp;获取大量免费的Token来进行本次实验。</span></p>
<p data-pm-slice="0 0 []">有了LLM API，我们可以创建一个Kernel供后续使用，这也是老面孔了：</p>
<div class="cnblogs_code">
<pre>Console.WriteLine(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Now loading the configuration...</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> config = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ConfigurationBuilder()
    .AddJsonFile($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">appsettings.json</span><span style="color: rgba(128, 0, 0, 1)">"</span>, optional: <span style="color: rgba(0, 0, 255, 1)">false</span>, reloadOnChange: <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">)
    .Build();
Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Now loading the chat client...</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> chattingApiConfiguration = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> OpenAiConfiguration(
    config.GetSection(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">LLM:MODEL_ID</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">).Value,
    config.GetSection(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">LLM:BASE_URL</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">).Value,
    config.GetSection(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">LLM:API_KEY</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">).Value);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> openAiChattingClient = <span style="color: rgba(0, 0, 255, 1)">new</span> HttpClient(<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> OpenAiHttpHandler(chattingApiConfiguration.EndPoint));
</span><span style="color: rgba(0, 0, 255, 1)">var</span> kernel =<span style="color: rgba(0, 0, 0, 1)"> Kernel.CreateBuilder()
    .AddOpenAIChatCompletion(chattingApiConfiguration.ModelId, chattingApiConfiguration.ApiKey, httpClient: openAiChattingClient)
    .Build();</span></pre>
</div>
<p><span><span>接下来，我们就一步一步地来看看核心的代码。</span></span></p>
<h1><span>定义4个Agent</span></h1>
<p><span><span>这里我们来定义4个Agent：</span></span></p>
<p><span><span>（1）<strong><span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 8px;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;outline: 0px;visibility: visible;line-height: 1.75em;margin-bottom: 8px;margin-top: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;color: rgb(0, 179, 139);font-family: \&quot;PingFang SC\&quot;, \&quot;Lantinghei SC\&quot;, \&quot;Microsoft Yahei\&quot;, \&quot;Hiragino Sans GB\&quot;, \&quot;Microsoft Sans Serif\&quot;, \&quot;WenQuanYi Micro Hei\&quot;, Helvetica, sans-serif;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.544px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;strong&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span>分流客服Agent<span>：</span></span></span></strong><span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 8px;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;outline: 0px;visibility: visible;line-height: 1.75em;margin-bottom: 8px;margin-top: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;color: rgb(0, 179, 139);font-family: \&quot;PingFang SC\&quot;, \&quot;Lantinghei SC\&quot;, \&quot;Microsoft Yahei\&quot;, \&quot;Hiragino Sans GB\&quot;, \&quot;Microsoft Sans Serif\&quot;, \&quot;WenQuanYi Micro Hei\&quot;, Helvetica, sans-serif;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.544px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;strong&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">负责初步分流客户问题；</span></span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> triageAgent = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatCompletionAgent()
{
    Name </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">TriageAgent</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Description </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">处理客户请求</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Instructions </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">一个负责分流客户问题的客服智能体</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Kernel </span>=<span style="color: rgba(0, 0, 0, 1)"> kernel.Clone()
};</span></pre>
</div>
<p><span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 8px;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;background-color: rgb(255, 255, 255);outline: 0px;visibility: visible;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span>（2）<strong><span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 8px;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;outline: 0px;visibility: visible;line-height: 1.75em;margin-bottom: 8px;margin-top: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;color: rgb(0, 179, 139);font-family: \&quot;PingFang SC\&quot;, \&quot;Lantinghei SC\&quot;, \&quot;Microsoft Yahei\&quot;, \&quot;Hiragino Sans GB\&quot;, \&quot;Microsoft Sans Serif\&quot;, \&quot;WenQuanYi Micro Hei\&quot;, Helvetica, sans-serif;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.544px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;strong&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span>订单状态查询Agent<span>：</span></span></span></strong><span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 8px;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;outline: 0px;visibility: visible;line-height: 1.75em;margin-bottom: 8px;margin-top: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;color: rgb(0, 179, 139);font-family: \&quot;PingFang SC\&quot;, \&quot;Lantinghei SC\&quot;, \&quot;Microsoft Yahei\&quot;, \&quot;Hiragino Sans GB\&quot;, \&quot;Microsoft Sans Serif\&quot;, \&quot;WenQuanYi Micro Hei\&quot;, Helvetica, sans-serif;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.544px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;strong&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">负责处理客户的订单状态查询问题；</span></span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> statusAgent = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatCompletionAgent()
{
    Name </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">OrderStatusAgent</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Description </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">一个负责查询订单状态的客服智能体</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Instructions </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">处理订单状态请求</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Kernel </span>=<span style="color: rgba(0, 0, 0, 1)"> kernel.Clone()
};
statusAgent.Kernel.Plugins.Add(KernelPluginFactory.CreateFromObject(</span><span style="color: rgba(0, 0, 255, 1)">new</span> OrderStatusPlugin()));</pre>
</div>
<p><span>（3）<strong>订单退货处理Agent</strong><span>：负责处理客户申请的退货请求；</span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> returnAgent = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatCompletionAgent()
{
    Name </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">OrderReturnAgent</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Description </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">一个负责处理订单退货的客服智能体</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Instructions </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">处理订单退货并记录退货原因（用户需确认原因：不想要了 或 7天无理由退换 或 没有时间消费）</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Kernel </span>=<span style="color: rgba(0, 0, 0, 1)"> kernel.Clone()
};
returnAgent.Kernel.Plugins.Add(KernelPluginFactory.CreateFromObject(</span><span style="color: rgba(0, 0, 255, 1)">new</span> OrderReturnPlugin()));</pre>
</div>
<p><span><span>（4）<strong><span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 8px;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;outline: 0px;visibility: visible;line-height: 1.75em;margin-bottom: 8px;margin-top: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;color: rgb(0, 179, 139);font-family: \&quot;PingFang SC\&quot;, \&quot;Lantinghei SC\&quot;, \&quot;Microsoft Yahei\&quot;, \&quot;Hiragino Sans GB\&quot;, \&quot;Microsoft Sans Serif\&quot;, \&quot;WenQuanYi Micro Hei\&quot;, Helvetica, sans-serif;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.544px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;strong&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span>订单退款处理Agent<span>：</span></span></span></strong><span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 8px;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;outline: 0px;visibility: visible;line-height: 1.75em;margin-bottom: 8px;margin-top: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;color: rgb(0, 179, 139);font-family: \&quot;PingFang SC\&quot;, \&quot;Lantinghei SC\&quot;, \&quot;Microsoft Yahei\&quot;, \&quot;Hiragino Sans GB\&quot;, \&quot;Microsoft Sans Serif\&quot;, \&quot;WenQuanYi Micro Hei\&quot;, Helvetica, sans-serif;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.544px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;strong&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">负责处理客户申请的退款请求；</span></span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> refundAgent = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatCompletionAgent()
{
    Name </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">OrderRefundAgent</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Description </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">一个负责处理订单退款的客服智能体</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Instructions </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">处理订单退款请求并记录退款原因（用户需确认原因：不想要了 或 7天无理由退换 或 没有时间消费）</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Kernel </span>=<span style="color: rgba(0, 0, 0, 1)"> kernel.Clone()
};
refundAgent.Kernel.Plugins.Add(KernelPluginFactory.CreateFromObject(</span><span style="color: rgba(0, 0, 255, 1)">new</span> OrderRefundPlugin()));</pre>
</div>
<p><span><span>需要注意的是：这里多个Agent都有使用Function Calling调用外部方法实现一些功能，所以在Kernel的设置处通过Clone方法实现隔离。</span></span></p>
<p><span><span>下面是这几个订单帮助的Plugin的定义：</span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">sealed</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> OrderRefundPlugin
{
    [KernelFunction]
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span> ProcessReturn(<span style="color: rgba(0, 0, 255, 1)">string</span> orderId, <span style="color: rgba(0, 0, 255, 1)">string</span> reason) =&gt; $<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">订单 {orderId} 的退款申请已通过！退款理由：{reason}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
}
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">sealed</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> OrderReturnPlugin
{
    [KernelFunction]
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span> ProcessReturn(<span style="color: rgba(0, 0, 255, 1)">string</span> orderId, <span style="color: rgba(0, 0, 255, 1)">string</span> reason) =&gt; $<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">订单 {orderId} 的退货申请已通过！退货理由：{reason} </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
}
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">sealed</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> OrderStatusPlugin
{
    [KernelFunction]
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span> CheckOrderStatus(<span style="color: rgba(0, 0, 255, 1)">string</span> orderId) =&gt; $<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">订单 {orderId} 已发货 并将于 2-3日内送达！</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
}</span></pre>
</div>
<h1><span>选择编排模式</span></h1>
<p><span><span>这里我们选择的是群聊编排模式：Handoff<span><span>Orchestration，除了将需要编排的4个Agent作为参数传递给它之外，我们还需要定义一个移交流程，让Agent知道他们应该如何实现交接。</span></span></span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> handoffs =<span style="color: rgba(0, 0, 0, 1)"> OrchestrationHandoffs
        .StartWith(triageAgent)
        .Add(source: triageAgent, targets: [statusAgent, returnAgent, refundAgent]) </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 分流客服可交接给状态、退货、退款智能体</span>
        .Add(source: statusAgent, target: triageAgent, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">如非订单状态相关问题则交回分流客服</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        .Add(source: returnAgent, target: triageAgent, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">如非退货相关问题则交回分流客服</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        .Add(source: refundAgent, target: triageAgent, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">如非退款相关问题则交回分流客服</span><span style="color: rgba(128, 0, 0, 1)">"</span>);</pre>
</div>
<p>同时，为了实现聊天记录的存储和监控，自定义一个Monitor类：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">sealed</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> OrchestrationMonitor
{
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> ChatHistory History { <span style="color: rgba(0, 0, 255, 1)">get</span>; } = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatHistory();
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> ValueTask ResponseCallback(ChatMessageContent response)
    {
        History.Add(response);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> ValueTask.CompletedTask;
    }
}</span></pre>
</div>
<p>最后，初始化移交编排：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> -- Create the HandoffOrchestration</span>
<span style="color: rgba(0, 0, 255, 1)">var</span> orchestration = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> HandoffOrchestration(
  handoffs, 
  members: [triageAgent, statusAgent, returnAgent, refundAgent])
{
    Name </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">CustomerSupportOrchestration</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    Description </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">处理客户请求并根据问题类型交接给对应的智能体</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    InteractiveCallback </span>= () =&gt;<span style="color: rgba(0, 0, 0, 1)">
    {
        </span><span style="color: rgba(0, 0, 255, 1)">var</span> lastMessage =<span style="color: rgba(0, 0, 0, 1)"> monitor.History.LastOrDefault();
        Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)"># Agent: \n{lastMessage?.Content}\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)"># User:</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">var</span> userInput =<span style="color: rgba(0, 0, 0, 1)"> Console.ReadLine();
        Console.WriteLine();
        </span><span style="color: rgba(0, 0, 255, 1)">var</span> message = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatMessageContent(AuthorRole.User, userInput);
        monitor.History.Add(message);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> ValueTask.FromResult(message);
    },
    ResponseCallback </span>=<span style="color: rgba(0, 0, 0, 1)"> monitor.ResponseCallback
};</span></pre>
</div>
<h1><span data-pm-slice="3 3 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;p&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;line-height: 1.75em; margin: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,null,&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;style&quot;:null},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;letter-spacing: 0.578px;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 8px;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;span&quot;,&quot;attributes&quot;:{&quot;data-pm-slice&quot;:&quot;3 3 [\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;section\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;letter-spacing: 0.578px;text-align: left;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,{\&quot;tagName\&quot;:\&quot;p\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:\&quot;line-height: 1.75em; margin: 8px;\&quot;},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;},\&quot;para\&quot;,null,\&quot;node\&quot;,{\&quot;tagName\&quot;:\&quot;span\&quot;,\&quot;attributes\&quot;:{\&quot;style\&quot;:null},\&quot;namespaceURI\&quot;:\&quot;http://www.w3.org/1999/xhtml\&quot;}]&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;text-transform: none;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;text-align: left;margin-top: 8px;margin-bottom: 8px;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">启动运行时</span></span></h1>
<p><span><span>在Semantic Kernel中，需要运行时（Runtime）才能管理Agent的执行，因此这里我们需要在正式开始前使用InProcessRuntime并启动起来。</span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Start the Runtime</span>
<span style="color: rgba(0, 0, 255, 1)">var</span> runtime = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> InProcessRuntime();
</span><span style="color: rgba(0, 0, 255, 1)">await</span> runtime.StartAsync();</pre>
</div>
<h1><span>调用编排 并 收集结果</span></h1>
<p><span><span>准备工作差不多了，现在我们可以开始调用编排了。</span></span><span><span>这也是老面孔代码了，不过多解释。</span></span></p>
<p><span><span>唯一需要注意的是：这里设置TimeSpan.FromSeconds(100*3)是为了给足对话时间。</span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Start the Chat</span>
Console.WriteLine($<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Welcome to use CustomerSupport!\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> task = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">你好，我需要订单上的帮助</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)"># User: \n{task}\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">
{
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Invoke the Orchestration</span>
    <span style="color: rgba(0, 0, 255, 1)">var</span> result = <span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> orchestration.InvokeAsync(task, runtime);
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Collect Results from multi Agents</span>
    <span style="color: rgba(0, 0, 255, 1)">var</span> output = <span style="color: rgba(0, 0, 255, 1)">await</span> result.GetValueAsync(TimeSpan.FromSeconds(<span style="color: rgba(128, 0, 128, 1)">100</span> * <span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">));
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Print the Results</span>
    Console.WriteLine($<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)"># 处理结果总结: \n{output}\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
}
</span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (HttpOperationException ex)
{
    Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Exception: {ex.Message}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
}
</span><span style="color: rgba(0, 0, 255, 1)">finally</span><span style="color: rgba(0, 0, 0, 1)">
{
    </span><span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> runtime.RunUntilIdleAsync();
    Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"\n</span><span style="color: rgba(128, 0, 0, 1)">----------See you next time!----------</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    Console.ReadKey();
}</span></pre>
</div>
<p>上面的代码示例中我们给出的第一句话是：“<strong><span style="text-decoration: underline">你好，我需要订单上的帮助</span></strong>”来进入客服场景。</p>
<h1><span>效果展示</span></h1>
<p>假设我是客户，我有3个订单，想要查询一个订单的状态，以及对另外两个订单进行退款和退货，对话过程如下图所示。</p>
<h3><strong>请求1：查询订单状态</strong></h3>
<p><img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250727154111235-328623799.png" alt="image" loading="lazy" style="border: 1px solid rgba(221, 221, 221, 1); border-radius: 3px; box-shadow: 0 4px 8px rgba(3, 27, 78, 0.12); display: block; margin-left: auto; margin-right: auto"></p>
<h3><strong><span><span>请求2&amp;3：申请退款 和 退货</span></span></strong></h3>
<p><img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250727154119092-1480171424.png" alt="image" loading="lazy" style="border: 1px solid rgba(221, 221, 221, 1); border-radius: 3px; box-shadow: 0 4px 8px rgba(3, 27, 78, 0.12); display: block; margin-left: auto; margin-right: auto"></p>
<h1>示例源码</h1>
<p>GitHub:&nbsp;<a href="https://github.com/EdisonTalk/MultiAgentOrchestration" rel="noopener nofollow" target="_blank">https://github.com/EdisonTalk/MultiAgentOrchestration</a></p>
<h1><strong><span><span><strong><span>小结</span></strong></span></span></strong></h1>
<p>本文介绍了移交编排模式的基本概念，然后通过一个案例介绍了如何实现一个移交编排的经典场景：客户支持，相信通过这个案例你能够有个感性的认识。</p>
<p>下一篇，我们将学习磁性编排模式。</p>
<h1>参考资料</h1>
<p><span><span>Microsoft Learn:&nbsp;</span></span><a href="https://learn.microsoft.com/zh-cn/semantic-kernel/frameworks/agent/agent-orchestration?wt.mc_id=MVP_397012" target="_blank" rel="noopener nofollow">https://learn.microsoft.com/zh-cn/semantic-kernel/frameworks/agent/agent-orchestration</a></p>
<h1>推荐学习</h1>
<p><span><span><span><span><span><span><span><span>圣杰：<span>《<a href="https://www.cnblogs.com/sheng-jie/p/18840383" target="_blank">.NET+AI | Semantic Kernel入门到精通</a>》</span></span></span></span></span></span></span></span></span></p>
<p>&nbsp;</p>
<p style="text-align: center"><img src="https://images.cnblogs.com/cnblogs_com/edisonchou/1647700/o_200902144330EdisonTalk-Footer.jpg" alt="" style="width: 65%; border: 1px solid rgba(221, 221, 221, 1); border-radius: 3px; box-shadow: 0 4px 8px rgba(3, 27, 78, 0.12)"></p>
<div id="Copyright">
<p>作者：<span style="text-decoration: underline">爱迪生</span></p>
<p>出处：<a title="from" href="https://edisontalk.cnblogs.com" target="_blank">https://edisontalk.cnblogs.com</a></p>
<p>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。</p>
</div>
</div>
<div id="MySignature" role="contentinfo">
    <div align="center"><a href="https://weibo.com/u/2068032061?s=6uyXnP" target="_blank"><img border="0" src="http://service.t.sina.com.cn/widget/qmd/2068032061/d643d182/10.png"></a></div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-01 08:00">2025-08-01 08:00</span>&nbsp;
<a href="https://www.cnblogs.com/edisontalk">EdisonZhou</a>&nbsp;
阅读(<span id="post_view_count">123</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19007402);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19007402', targetLink: 'https://www.cnblogs.com/edisontalk/p/-/quick-start-agent-orchestration-handoff', title: '多Agent协作入门：移交编排模式' })">举报</a>
</div>
        