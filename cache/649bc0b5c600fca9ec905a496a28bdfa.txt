
        <h2>
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/BigTall/p/18882325" title="发布于 2025-05-18 16:19">
    <span role="heading" aria-level="2">AI模型的回调能力的理解和实现</span>
    

</a>

        </h2>
        <div class="postbody">
            <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h2 id="前言">前言</h2>
<p>BigTall最近把<code class="language-plaintext highlighter-rouge">RAG</code>和<code class="language-plaintext highlighter-rouge">Agent</code>的原理想通了，对于“一切都是提示词”的理解又更多了一些。本文把我的理解大致整理了一下，给出BigTall自己的一个实验。希望能够对大家有用。</p>
<h2 id="关于大模型">关于大模型</h2>
<p>现在大模型很热，尤其是春节时候<code class="language-plaintext highlighter-rouge">DeepSeek</code>的出圈，直接让大模型跳出了<code class="language-plaintext highlighter-rouge">IT</code>圈，跟普通人产生了联系。最近的豆包相关的“我要去世了”文章，让大模型加上了一层人性与情感的光环。北京的机器人马拉松则让人看到了大模型真正落地进入人们生活的一个可能，让更多的人明白了“未来已来，只是尚未流行”。</p>
<p>我们每一分每一秒，都在踏步进入科幻时代。</p>
<p>但是大模型依然神秘。</p>
<p>大模型的出现提供了什么以前缺乏的能力？我思考的答案是：真正处理“模糊”的能力！以往用代码编写出来的“模糊”都是用基于精确匹配的改良：要么用偏移量多匹配几次，要么转化为数学相似度做一个范围取值。但是真正能够基于“语义”上的模糊匹配能力，而且可以直接使用的，大模型是唯一。</p>
<p>对于传统软件开发者来说，大模型更多是一种<code class="language-plaintext highlighter-rouge">DSL</code>（<code class="language-plaintext highlighter-rouge">Domain Specific Language</code>）领域驱动语言，是一种“功能的粘合剂”。本质上跟你嵌入一个<code class="language-plaintext highlighter-rouge">JavaScript</code>引擎没多大区别，只不过大模型可以支持自然语言和模糊处理而已，但对于程序来说，都是提供功能调用入口，让<code class="language-plaintext highlighter-rouge">DSL</code>进行调用而已。</p>
<p>作为一个语言模型，文字是大模型唯一的输入和输出形式。我们是怎么做到让大模型去控制外部的设备的？我们是怎么做到大模型可以自主在网络上搜寻信息并向我们展示的？它又是如何读懂我给他的文档，帮我进行内容解释的？</p>
<p>提示词就是一切！</p>
<p>有了提示词的魔法，我们可以简单一句“请帮我规划到丽江的旅游”，驱动大模型帮我们去分解任务，寻找景点、规划线路、寻找住宿、寻找合适的交通工具、询价甚至直接订票。</p>
<p>魔法一样的技术背后，是多轮的提示词往来。</p>
<h3 id="rag应用">RAG应用</h3>
<p>RAG应用的基本原理是把文档放向量数据库里，用户询问的问题会也向量化，跟向量数据库的内容做相似度查找，找到的前10条结果会组合成提示词以文字形式送给背后的AI渲染。背后的提示词类似：【问题xxx找到abcd等几个相似文档，文档该要和匹配片段分别是xyz，请分析并给出答案】。</p>
<h3 id="智能体">智能体</h3>
<p><code class="language-plaintext highlighter-rouge">Agent</code>就是智能体，所谓的智能体就是一段特定任务相关的提示词，智能体背后可以是同一个<code class="language-plaintext highlighter-rouge">AI</code>，也可以是不同的<code class="language-plaintext highlighter-rouge">AI</code>。你可以认为智能体就是对应一组提示词的化身，通过把某个能力相关（例如订票）的一组提示词放在一个“智能体”中，实现任务的专有性。也符合软件开发领域【高内聚低耦合】的原理。</p>
<p>多个智能体之间的合作，就等价于多个提示词之间的合作，有任务分解的、有对结果监督的、有驱动过程的不同的提示词对应的<code class="language-plaintext highlighter-rouge">Agent</code>。</p>
<p>例如【我要去桂林旅行】，就可以分解为几个智能体：</p>
<ol>
<li>将文字整理成任务片段的：理解文字内容，并将文字分解成步骤和动作，负责总控和协调其他专有<code class="language-plaintext highlighter-rouge">Agent</code>的执行。</li>
<li>查机票火车票的：通过<code class="language-plaintext highlighter-rouge">RAG</code>的方式，大模型生成参数，调用外部的查询接口查到各种交通工具的信息，提供其他<code class="language-plaintext highlighter-rouge">Agent</code>使用。</li>
<li>整理行程的：负责从知识库或者网络查询检索获得一组行程，并根据用户的需求挑选出最合适的行程。</li>
<li>查桂林景点的：负责从知识库或者网络查询获得桂林的景点，并根据用户需求挑选出最合适的景点。</li>
<li>整理旅游计划的：将以上的信息综合，组合成旅游计划。</li>
</ol>
<p>这个只是简单的说明，实际上智能体之间的关系是一个网状关系，非常复杂。所以智能体组合的运行速度其实很慢。</p>
<h3 id="大模型回调">大模型回调</h3>
<p>所谓的大模型和本地程序的回调，等价于提示词：【我现在有什么任务，这些是可以调用的本地接口定义如下123，请回复问题位置中插入适当的本地接口调用】。然后，你问ai，今天早上我要穿什么衣服？然后<code class="language-plaintext highlighter-rouge">AI</code>就会返回一个带占位符的文字【今天温度是<code class="language-plaintext highlighter-rouge">${weather(2025-5-17)}</code>，请告诉我要穿什么衣服】，你的程序会把${}中的函数计算并嵌入结果，结果<code class="language-plaintext highlighter-rouge">AI</code>收到【今天温度25度，请告诉我要穿什么衣服】，然后ai再返回结果【穿短袖】。</p>
<p>大致原理就是这样，只不过支持回调的大模型都经过专门训练，可以使用<code class="language-plaintext highlighter-rouge">json</code>结构来定义回调函数，并且他们的回调准确率也更高。</p>
<h3 id="mcp和a2a协议">MCP和A2A协议</h3>
<p>说到这里，大家应该明白了，大模型离不开和外部的协作。所以需要一个大模型控制外部设施的协议。另外，刚才讲智能体协作的时候，很明显智能体之间存在通讯关系，因此也需要一个通讯协议。</p>
<p><code class="language-plaintext highlighter-rouge">MCP</code>（<code class="language-plaintext highlighter-rouge">Model Context Protocol</code>）模型上下文协议由<code class="language-plaintext highlighter-rouge">Anthropic</code>（<code class="language-plaintext highlighter-rouge">Claude</code>&nbsp;模型的开发公司）提出，<code class="language-plaintext highlighter-rouge">OpenAI</code>后续跟随采用让它成为事实上的标准。该协议就是让大模型和外部协作的。有人可能会说，大模型那么智能，我们让大模型学会各个系统的交互，就可以不要什么<code class="language-plaintext highlighter-rouge">MCP</code>了。有道理，但是大模型要记住这些的话，需要记忆，花这么多代价去训练怎么跟外部交互是不是很浪费？！未来还会有更多的新系统出现，难道不间断去训练吗？所以合理的方式就是让每个想和大模型协作的外部程序都学会“普通话”，能够和大模型对话，接受大模型的指令。</p>
<p><code class="language-plaintext highlighter-rouge">A2A</code>（<code class="language-plaintext highlighter-rouge">Agent to Agent</code>）由<code class="language-plaintext highlighter-rouge">Google</code>主导开发，定位为跨平台、跨厂商的<code class="language-plaintext highlighter-rouge">AI</code>&nbsp;智能体之间的通讯协议。等于让智能体都加入了一个群，智能体们可以在群里互相<code class="language-plaintext highlighter-rouge">@</code>进行交流。大家看刚才旅游订票的例子就可以看到，智能体之间的交互其实并不比智能体和大模型之间的交互要来的少多少。</p>
<h2 id="qwen3-06b的回调实验"><code class="language-plaintext highlighter-rouge">QWen3 0.6B</code>的回调实验</h2>
<p>无论是<code class="language-plaintext highlighter-rouge">MCP</code>还是<code class="language-plaintext highlighter-rouge">A2A</code>，还是普通的大模型功能调用，本质都是一回事：提示词输入通过大模型变成答案输出，答案又变成下一次的输入。来来回回，就把事情办完了。</p>
<p>这次我们的实验，就是把不支持回调的本地小模型改造成可以支持回调。让小模型也可以和代码进行交互。</p>
<h3 id="实验环境">实验环境</h3>
<p>实验环境首先需要安装<code class="language-plaintext highlighter-rouge">Ollama</code>，一个决心要像使用<code class="language-plaintext highlighter-rouge">docker</code>一样使用大模型的环境。大家去官网 https://ollama.com/ 下载安装，并且启动运行（确保任务栏里有白色羊驼的图标）。</p>
<div class="language-bash highlighter-rouge">
<div class="highlight">
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">ollama pull qwen3:0.6b
</pre>
</div>
<p>　　</p>
</div>
</div>
<p>另外，需要安装<code class="language-plaintext highlighter-rouge">python3</code>。我机器是<code class="language-plaintext highlighter-rouge">MacBook Pro</code>，所以用<code class="language-plaintext highlighter-rouge">brew</code>安装，其他操作系统请自己安装环境。</p>
<div class="language-bash highlighter-rouge">
<div class="highlight">
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">brew install python
mkdir ~/qwen3-callback
cd ~/qwen3-callback
python3 -m venv .
source ./bin/activate
python3 -m pip install requests
</pre>
</div>
<p>　　</p>
</div>
</div>
<h3 id="代码">代码</h3>
<p>把以下的源代码放到文件<code class="language-plaintext highlighter-rouge">callback.py</code>中。</p>
<div class="language-python highlighter-rouge">
<div class="highlight">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">  1</span> <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> requests
</span><span style="color: rgba(0, 128, 128, 1)">  2</span> <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> re
</span><span style="color: rgba(0, 128, 128, 1)">  3</span> <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> json
</span><span style="color: rgba(0, 128, 128, 1)">  4</span> 
<span style="color: rgba(0, 128, 128, 1)">  5</span> <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Ollama API 配置</span>
<span style="color: rgba(0, 128, 128, 1)">  6</span> OLLAMA_API_URL = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://localhost:11434/api/generate</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 128, 128, 1)">  7</span> MODEL_NAME = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">qwen3:0.6b</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 128, 128, 1)">  8</span> 
<span style="color: rgba(0, 128, 128, 1)">  9</span> <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 模拟的天气函数</span>
<span style="color: rgba(0, 128, 128, 1)"> 10</span> <span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> weather(date):
</span><span style="color: rgba(0, 128, 128, 1)"> 11</span>     <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 实际场景可调用天气 API，这里模拟返回 25 度</span>
<span style="color: rgba(0, 128, 128, 1)"> 12</span>     <span style="color: rgba(0, 0, 255, 1)">return</span> 35
<span style="color: rgba(0, 128, 128, 1)"> 13</span> 
<span style="color: rgba(0, 128, 128, 1)"> 14</span> <span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> find_goods(item):
</span><span style="color: rgba(0, 128, 128, 1)"> 15</span>     <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 模拟返回商品信息</span>
<span style="color: rgba(0, 128, 128, 1)"> 16</span>     <span style="color: rgba(0, 0, 255, 1)">return</span> f<span style="color: rgba(128, 0, 0, 1)">"""</span>
<span style="color: rgba(0, 128, 128, 1)"> 17</span> <span style="color: rgba(128, 0, 0, 1)">List {item} brand: 
</span><span style="color: rgba(0, 128, 128, 1)"> 18</span> <span style="color: rgba(128, 0, 0, 1)">- Apple: MacBook Pro, MacBook Air
</span><span style="color: rgba(0, 128, 128, 1)"> 19</span> <span style="color: rgba(128, 0, 0, 1)">- Dell: XPS, Inspiron
</span><span style="color: rgba(0, 128, 128, 1)"> 20</span> <span style="color: rgba(128, 0, 0, 1)">- HP: Spectre, Envy
</span><span style="color: rgba(0, 128, 128, 1)"> 21</span> <span style="color: rgba(128, 0, 0, 1)">- Lenovo: ThinkPad, IdeaPad
</span><span style="color: rgba(0, 128, 128, 1)"> 22</span> <span style="color: rgba(128, 0, 0, 1)">- Microsoft: Surface
</span><span style="color: rgba(0, 128, 128, 1)"> 23</span> <span style="color: rgba(128, 0, 0, 1)">- Razer: Blade
</span><span style="color: rgba(0, 128, 128, 1)"> 24</span> <span style="color: rgba(128, 0, 0, 1)">- Samsung: Galaxy Book
</span><span style="color: rgba(0, 128, 128, 1)"> 25</span> <span style="color: rgba(128, 0, 0, 1)">- Sony: VAIO
</span><span style="color: rgba(0, 128, 128, 1)"> 26</span> <span style="color: rgba(128, 0, 0, 1)">"""</span>
<span style="color: rgba(0, 128, 128, 1)"> 27</span> 
<span style="color: rgba(0, 128, 128, 1)"> 28</span> <span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> find_goods_prices(item):
</span><span style="color: rgba(0, 128, 128, 1)"> 29</span>     <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 模拟返回商品价格</span>
<span style="color: rgba(0, 128, 128, 1)"> 30</span>     <span style="color: rgba(0, 0, 255, 1)">return</span> f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{item} 5999.00元</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 128, 128, 1)"> 31</span> 
<span style="color: rgba(0, 128, 128, 1)"> 32</span> 
<span style="color: rgba(0, 128, 128, 1)"> 33</span> <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 调用 Ollama API 的函数</span>
<span style="color: rgba(0, 128, 128, 1)"> 34</span> <span style="color: rgba(0, 0, 255, 1)">def</span> call_ollama(prompt, model=<span style="color: rgba(0, 0, 0, 1)">MODEL_NAME):
</span><span style="color: rgba(0, 128, 128, 1)"> 35</span>     payload =<span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 128, 128, 1)"> 36</span>         <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">model</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: model,
</span><span style="color: rgba(0, 128, 128, 1)"> 37</span>         <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">prompt</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: prompt,
</span><span style="color: rgba(0, 128, 128, 1)"> 38</span>         <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">stream</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: False,
</span><span style="color: rgba(0, 128, 128, 1)"> 39</span>         <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">temperature</span><span style="color: rgba(128, 0, 0, 1)">"</span>: 1 
<span style="color: rgba(0, 128, 128, 1)"> 40</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)"> 41</span>     response = requests.post(OLLAMA_API_URL, json=<span style="color: rgba(0, 0, 0, 1)">payload)
</span><span style="color: rgba(0, 128, 128, 1)"> 42</span>     <span style="color: rgba(0, 0, 255, 1)">if</span> response.status_code == 200<span style="color: rgba(0, 0, 0, 1)">:
</span><span style="color: rgba(0, 128, 128, 1)"> 43</span>         <span style="color: rgba(0, 0, 255, 1)">return</span> json.loads(response.text)[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">response</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]
</span><span style="color: rgba(0, 128, 128, 1)"> 44</span>     <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
</span><span style="color: rgba(0, 128, 128, 1)"> 45</span>         <span style="color: rgba(0, 0, 255, 1)">raise</span> Exception(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Ollama API error: {response.text}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)"> 46</span> 
<span style="color: rgba(0, 128, 128, 1)"> 47</span> <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 提取 &lt;/think&gt; 之后的文本</span>
<span style="color: rgba(0, 128, 128, 1)"> 48</span> <span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> extract_post_think_text(text):
</span><span style="color: rgba(0, 128, 128, 1)"> 49</span>     markers = [<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">&lt;/think&gt;</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">提示词</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">提示词**</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">输出：</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">输出:</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]
</span><span style="color: rgba(0, 128, 128, 1)"> 50</span>     last_pos = -1
<span style="color: rgba(0, 128, 128, 1)"> 51</span>     last_marker =<span style="color: rgba(0, 0, 0, 1)"> None
</span><span style="color: rgba(0, 128, 128, 1)"> 52</span>     
<span style="color: rgba(0, 128, 128, 1)"> 53</span>     <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Find the last occurrence of any marker</span>
<span style="color: rgba(0, 128, 128, 1)"> 54</span>     <span style="color: rgba(0, 0, 255, 1)">for</span> marker <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> markers:
</span><span style="color: rgba(0, 128, 128, 1)"> 55</span>         <span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">:
</span><span style="color: rgba(0, 128, 128, 1)"> 56</span>             pos = text.rindex(marker)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Get the last index of the marker</span>
<span style="color: rgba(0, 128, 128, 1)"> 57</span>             <span style="color: rgba(0, 0, 255, 1)">if</span> pos &gt;<span style="color: rgba(0, 0, 0, 1)"> last_pos:
</span><span style="color: rgba(0, 128, 128, 1)"> 58</span>                 last_pos =<span style="color: rgba(0, 0, 0, 1)"> pos
</span><span style="color: rgba(0, 128, 128, 1)"> 59</span>                 last_marker =<span style="color: rgba(0, 0, 0, 1)"> marker
</span><span style="color: rgba(0, 128, 128, 1)"> 60</span>         <span style="color: rgba(0, 0, 255, 1)">except</span><span style="color: rgba(0, 0, 0, 1)"> ValueError:
</span><span style="color: rgba(0, 128, 128, 1)"> 61</span>             <span style="color: rgba(0, 0, 255, 1)">continue</span>  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Marker not found, skip</span>
<span style="color: rgba(0, 128, 128, 1)"> 62</span>     
<span style="color: rgba(0, 128, 128, 1)"> 63</span>     <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> If a marker was found, return text after it</span>
<span style="color: rgba(0, 128, 128, 1)"> 64</span>     <span style="color: rgba(0, 0, 255, 1)">if</span> last_pos != -1<span style="color: rgba(0, 0, 0, 1)">:
</span><span style="color: rgba(0, 128, 128, 1)"> 65</span>         <span style="color: rgba(0, 0, 255, 1)">return</span> text[last_pos +<span style="color: rgba(0, 0, 0, 1)"> len(last_marker):].strip()
</span><span style="color: rgba(0, 128, 128, 1)"> 66</span>     
<span style="color: rgba(0, 128, 128, 1)"> 67</span>     <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> If no markers found, return original text</span>
<span style="color: rgba(0, 128, 128, 1)"> 68</span>     <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> text.strip()
</span><span style="color: rgba(0, 128, 128, 1)"> 69</span> 
<span style="color: rgba(0, 128, 128, 1)"> 70</span> 
<span style="color: rgba(0, 128, 128, 1)"> 71</span> <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 解析占位符并执行函数调用</span>
<span style="color: rgba(0, 128, 128, 1)"> 72</span> <span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> process_placeholder(text):
</span><span style="color: rgba(0, 128, 128, 1)"> 73</span>     <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 查找 ${function(args)} 模式的占位符</span>
<span style="color: rgba(0, 128, 128, 1)"> 74</span>     placeholder_pattern = r<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">\${([^}]+)\}</span><span style="color: rgba(128, 0, 0, 1)">'</span>
<span style="color: rgba(0, 128, 128, 1)"> 75</span>     matches =<span style="color: rgba(0, 0, 0, 1)"> re.findall(placeholder_pattern, text)
</span><span style="color: rgba(0, 128, 128, 1)"> 76</span>     
<span style="color: rgba(0, 128, 128, 1)"> 77</span>     <span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(0, 0, 255, 1)">not</span><span style="color: rgba(0, 0, 0, 1)"> matches:
</span><span style="color: rgba(0, 128, 128, 1)"> 78</span>         <span style="color: rgba(0, 0, 255, 1)">return</span> text  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 没有占位符，直接返回原文</span>
<span style="color: rgba(0, 128, 128, 1)"> 79</span>     
<span style="color: rgba(0, 128, 128, 1)"> 80</span>     <span style="color: rgba(0, 0, 255, 1)">for</span> match <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> matches:
</span><span style="color: rgba(0, 128, 128, 1)"> 81</span>         <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 处理函数调用格式：${function(arg)}</span>
<span style="color: rgba(0, 128, 128, 1)"> 82</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">(</span><span style="color: rgba(128, 0, 0, 1)">'</span> <span style="color: rgba(0, 0, 255, 1)">in</span> match <span style="color: rgba(0, 0, 255, 1)">and</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">)</span><span style="color: rgba(128, 0, 0, 1)">'</span> <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> match:
</span><span style="color: rgba(0, 128, 128, 1)"> 83</span>             func_name = match.split(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)[0].strip()
</span><span style="color: rgba(0, 128, 128, 1)"> 84</span>             func_arg = match.split(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">(</span><span style="color: rgba(128, 0, 0, 1)">'</span>)[1].rstrip(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">)</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">).strip()
</span><span style="color: rgba(0, 128, 128, 1)"> 85</span> 
<span style="color: rgba(0, 128, 128, 1)"> 86</span>             <span style="color: rgba(0, 0, 255, 1)">if</span> func_name == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">weather</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
</span><span style="color: rgba(0, 128, 128, 1)"> 87</span>                 result =<span style="color: rgba(0, 0, 0, 1)"> weather(func_arg)
</span><span style="color: rgba(0, 128, 128, 1)"> 88</span>                 text = text.replace(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">${{{match}}}</span><span style="color: rgba(128, 0, 0, 1)">"</span>, f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{result}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)"> 89</span>             <span style="color: rgba(0, 0, 255, 1)">elif</span> func_name == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">find_goods</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
</span><span style="color: rgba(0, 128, 128, 1)"> 90</span>                 result =<span style="color: rgba(0, 0, 0, 1)"> find_goods(func_arg)
</span><span style="color: rgba(0, 128, 128, 1)"> 91</span>                 text = text.replace(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">${{{match}}}</span><span style="color: rgba(128, 0, 0, 1)">"</span>, f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{result}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)"> 92</span>             <span style="color: rgba(0, 0, 255, 1)">elif</span> func_name == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">find_goods_prices</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
</span><span style="color: rgba(0, 128, 128, 1)"> 93</span>                 result =<span style="color: rgba(0, 0, 0, 1)"> find_goods_prices(func_arg)
</span><span style="color: rgba(0, 128, 128, 1)"> 94</span>                 text = text.replace(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">${{{match}}}</span><span style="color: rgba(128, 0, 0, 1)">"</span>, f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">${result}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)"> 95</span>             <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
</span><span style="color: rgba(0, 128, 128, 1)"> 96</span>                 text = text.replace(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">${{{match}}}</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[Unknown function]</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)"> 97</span>         <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
</span><span style="color: rgba(0, 128, 128, 1)"> 98</span>             text = text.replace(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">${{{match}}}</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[Invalid placeholder]</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)"> 99</span>     
<span style="color: rgba(0, 128, 128, 1)">100</span>     <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> text
</span><span style="color: rgba(0, 128, 128, 1)">101</span> 
<span style="color: rgba(0, 128, 128, 1)">102</span> <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 主逻辑</span>
<span style="color: rgba(0, 128, 128, 1)">103</span> <span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> main():
</span><span style="color: rgba(0, 128, 128, 1)">104</span>     <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 用户输入</span>
<span style="color: rgba(0, 128, 128, 1)">105</span>     <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> user_input = "今天我要穿什么衣服？"</span>
<span style="color: rgba(0, 128, 128, 1)">106</span>     <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> user_input = "请给我推荐一台性价比高的电脑"</span>
<span style="color: rgba(0, 128, 128, 1)">107</span>     <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> user_input = "我想买一个苹果笔记本电脑，需要准备多少预算？"</span>
<span style="color: rgba(0, 128, 128, 1)">108</span>     user_input = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">列出中国历朝历代的名称</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 128, 128, 1)">109</span>     <span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">用户输入: {user_input}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">110</span>     <span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">======================</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">111</span>     
<span style="color: rgba(0, 128, 128, 1)">112</span>     <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 第一次调用模型，生成带占位符的提示词</span>
<span style="color: rgba(0, 128, 128, 1)">113</span>     initial_prompt = f<span style="color: rgba(128, 0, 0, 1)">"""</span>
<span style="color: rgba(0, 128, 128, 1)">114</span> <span style="color: rgba(128, 0, 0, 1)">今天是2025年5月17日。
</span><span style="color: rgba(0, 128, 128, 1)">115</span> <span style="color: rgba(128, 0, 0, 1)">用户问题：{user_input}
</span><span style="color: rgba(0, 128, 128, 1)">116</span> <span style="color: rgba(128, 0, 0, 1)">可用函数：
</span><span style="color: rgba(0, 128, 128, 1)">117</span> <span style="color: rgba(128, 0, 0, 1)">- weather('2025-5-17'): 返回当天的摄氏温度。
</span><span style="color: rgba(0, 128, 128, 1)">118</span> <span style="color: rgba(128, 0, 0, 1)">- find_goods(item): 返回商品信息（item可以是商品类别、产品名、型号等，如“mobile”或“Samsung”货“Galaxy S”，基于用户问题的主关键词）。
</span><span style="color: rgba(0, 128, 128, 1)">119</span> <span style="color: rgba(128, 0, 0, 1)">- find_goods_prices(item): 返回指定商品的价格（item同上）
</span><span style="color: rgba(0, 128, 128, 1)">120</span> <span style="color: rgba(128, 0, 0, 1)">推理：回答需要什么信息？选择一个函数。若问题未指定具体item，从问题中提取主关键词（如“电脑”）作为item。
</span><span style="color: rgba(0, 128, 128, 1)">121</span> <span style="color: rgba(128, 0, 0, 1)">     生成提示词，仅输出：${{function(arg)}}提供的信息，请回答：{{用户问题}}。禁止附加任何说明或逻辑。
</span><span style="color: rgba(0, 128, 128, 1)">122</span> <span style="color: rgba(128, 0, 0, 1)">例如：
</span><span style="color: rgba(0, 128, 128, 1)">123</span> <span style="color: rgba(128, 0, 0, 1)">- 输入：“今天热不热？”，输出：“${{weather('2025-5-17')}}提供的信息，请回答：今天热不热？”
</span><span style="color: rgba(0, 128, 128, 1)">124</span> <span style="color: rgba(128, 0, 0, 1)">- 输入：“推荐一台笔记本电脑？”，输出：“${{find_goods('laptop')}}提供的信息，请回答：推荐一台笔记本电脑？”
</span><span style="color: rgba(0, 128, 128, 1)">125</span> <span style="color: rgba(128, 0, 0, 1)">- 输入：“衬衫多少钱？”，输出：“${{find_goods_prices('shirt')}}提供的信息，请回答：衬衫多少钱？
</span><span style="color: rgba(0, 128, 128, 1)">126</span> <span style="color: rgba(128, 0, 0, 1)">- 输入：“爱因斯坦的生平”，输出：“请回答：爱因斯坦的生平
</span><span style="color: rgba(0, 128, 128, 1)">127</span>     <span style="color: rgba(128, 0, 0, 1)">"""</span>
<span style="color: rgba(0, 128, 128, 1)">128</span>     <span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">初始提示词: {initial_prompt}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">129</span>     
<span style="color: rgba(0, 128, 128, 1)">130</span>     response =<span style="color: rgba(0, 0, 0, 1)"> call_ollama(initial_prompt)
</span><span style="color: rgba(0, 128, 128, 1)">131</span>     <span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">======================</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">132</span>     <span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">模型第一次响应: {response}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">133</span>         
<span style="color: rgba(0, 128, 128, 1)">134</span>     <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 提取 &lt;/think&gt; 之后的文本</span>
<span style="color: rgba(0, 128, 128, 1)">135</span>     post_think_text =<span style="color: rgba(0, 0, 0, 1)"> extract_post_think_text(response)
</span><span style="color: rgba(0, 128, 128, 1)">136</span>     <span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">======================</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">137</span>     <span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">&lt;/think&gt; 后的文本: {post_think_text}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">138</span>     
<span style="color: rgba(0, 128, 128, 1)">139</span>     <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 处理占位符，调用外部函数</span>
<span style="color: rgba(0, 128, 128, 1)">140</span>     processed_response =<span style="color: rgba(0, 0, 0, 1)"> process_placeholder(post_think_text)
</span><span style="color: rgba(0, 128, 128, 1)">141</span>     <span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">======================</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">142</span>     <span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">处理占位符后的文本: {processed_response}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">143</span>     
<span style="color: rgba(0, 128, 128, 1)">144</span>     <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 第二次调用模型，使用回填后的提示词</span>
<span style="color: rgba(0, 128, 128, 1)">145</span>     final_prompt = f<span style="color: rgba(128, 0, 0, 1)">"""</span>
<span style="color: rgba(0, 128, 128, 1)">146</span> <span style="color: rgba(128, 0, 0, 1)">    根据以下信息回答用户的问题：
</span><span style="color: rgba(0, 128, 128, 1)">147</span> <span style="color: rgba(128, 0, 0, 1)">    {processed_response}
</span><span style="color: rgba(0, 128, 128, 1)">148</span>     <span style="color: rgba(128, 0, 0, 1)">"""</span>
<span style="color: rgba(0, 128, 128, 1)">149</span>     <span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">======================</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">150</span>     <span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">最终提示词: {final_prompt}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">151</span>     
<span style="color: rgba(0, 128, 128, 1)">152</span>     final_response =<span style="color: rgba(0, 0, 0, 1)"> call_ollama(final_prompt)
</span><span style="color: rgba(0, 128, 128, 1)">153</span>     <span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">======================</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">154</span>     <span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">最终回答: {final_response}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">155</span> 
<span style="color: rgba(0, 128, 128, 1)">156</span> <span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(128, 0, 128, 1)">__name__</span> == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">__main__</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
</span><span style="color: rgba(0, 128, 128, 1)">157</span>     main()</pre>
</div>
<p>&nbsp;</p>
</div>
</div>
<h3 id="运行结果">运行结果</h3>
<p>整个程序运行完成之后是这样的输出内容：</p>
<div class="language-text highlighter-rouge">
<div class="highlight">
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">$ python3 ./callback.py
用户输入: 今天天气适合穿什么衣服？
======================
初始提示词:
今天是2025年5月17日。
用户问题：今天天气适合穿什么衣服？
可用函数：
- weather('2025-5-17'): 返回当天的摄氏温度。
- find_goods(item): 返回商品信息（item可以是商品类别、产品名、型号等，如“mobile”或“Samsung”货“Galaxy S”，基于用户问题的主关键词）。
- find_goods_prices(item): 返回指定商品的价格（item同上）
推理：回答需要什么信息？选择一个函数。若问题未指定具体item，从问题中提取主关键词（如“电脑”）作为item。
     生成提示词，仅输出：${function(arg)}提供的信息，请回答：{用户问题}。禁止附加任何说明或逻辑。
例如：
- 输入：“今天热不热？”，输出：“${weather('2025-5-17')}提供的信息，请回答：今天热不热？”
- 输入：“推荐一台笔记本电脑？”，输出：“${find_goods('laptop')}提供的信息，请回答：推荐一台笔记本电脑？”
- 输入：“衬衫多少钱？”，输出：“${find_goods_prices('shirt')}提供的信息，请回答：衬衫多少钱？
- 输入：“爱因斯坦的生平”，输出：“请回答：爱因斯坦的生平

======================
模型第一次响应: &lt;think&gt;
好的，用户的问题是今天天气适合穿什么衣服，需要回答。首先，我需要确定可用的函数。用户的问题中提到了天气，所以应该使用weather函数来获取温度信息。然后，根据问题中的主关键词“天气”，可能需要提取这个关键词作为item，但问题中并没有具体商品类别，所以可能直接使用天气数据。接下来，生成提示词，只输出函数调用的结果，不需要其他说明。例如，用户的问题中没有指定商品，所以主关键词是“天气”，所以调用weather函数，然后给出回答。确保不添加任何其他说明，只输出指定的格式。
&lt;/think&gt;

${weather('2025-5-17')}提供的信息，请回答：今天天气适合穿什么衣服？
======================
&lt;/think&gt; 后的文本: ${weather('2025-5-17')}提供的信息，请回答：今天天气适合穿什么衣服？
======================
处理占位符后的文本: '2025-5-17' 的天气是 35°C提供的信息，请回答：今天天气适合穿什么衣服？
======================
最终提示词:
    根据以下信息回答用户的问题：
    '2025-5-17' 的天气是 35°C提供的信息，请回答：今天天气适合穿什么衣服？

======================
最终回答: &lt;think&gt;
好的，用户的问题是根据“2025-5-17”当天的天气35°C，回答今天适合穿什么衣服。首先，我需要确认用户提供的天气信息是否正确，然后根据温度来判断合适的服装。

首先，用户给出的信息是35°C，这通常意味着白天的温度在35度左右，可能还有傍晚的温度稍低。不过，具体天气情况可能还需要参考其他数据，比如是否有风、湿度等。但用户只提供了温度，所以需要假设白天是35度，可能在下午或晚上有降温。

接下来，考虑适合穿什么衣服。通常，白天的温度较高，所以可能会穿短袖、T恤、短裤和长袖衬衫。同时，考虑到天气可能比较热，建议选择透气、吸汗的面料，比如棉质或透气面料。另外，可能还需要考虑防晒，所以帽子和太阳镜也很重要。

不过，用户的问题可能只需要根据给出的信息直接回答，不需要考虑其他因素。所以综合来看，最合适的回答应该是推荐短袖、T恤、短裤和长袖衬衫，同时考虑防晒措施。

需要检查是否有其他可能的因素，比如是否有雨天，但用户只提到了温度，所以可能不需要考虑其他天气情况。因此，最终回答应基于温度和常见天气模式，给出具体的穿衣建议。
&lt;/think&gt;

根据今天的天气情况，35°C的高温天气适合穿短袖、T恤、短裤和长袖衬衫。建议搭配防晒用品（如帽子和太阳镜）以保持舒适和安全。
</pre>
</div>
<p>　　</p>
</div>
</div>
<h2 id="总结">总结</h2>
<p>不知道有多少人会看到这里。</p>
<p>操控<code class="language-plaintext highlighter-rouge">AI</code>模型其实没什么难度，最大的难度还是在“提示词的调试”，你需要不停的试错，不停地和模型的理解能力和幻觉做斗争。模型参数量越小，这个调试的难度就越大，因为小模型本来就很笨。</p>
<p>这次调试多亏了<code class="language-plaintext highlighter-rouge">Grok</code>，否则要拿捏住<code class="language-plaintext highlighter-rouge">0.6B</code>的小模型不被它蠢哭，还真不容易。至于Big Tall是怎么跟<code class="language-plaintext highlighter-rouge">Grok</code>对话最终降伏小模型的?</p>
<p>不告诉你！</p>
<p>提示词才是<code class="language-plaintext highlighter-rouge">AI</code>时代最大的秘密！</p>
</div>
<div id="MySignature" role="contentinfo">
    <div>
<img src="https://images.cnblogs.com/cnblogs_com/BigTall/46728/o_qrcode-bigtall.png" title="老翅寒暑"><br>
公众号：老翅寒暑
</div>
</div>
<div class="clear"></div>

        </div>
        <p class="postfoot">
            posted on 
<span id="post-date" data-last-update-days="0.41646412102083336" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-18 16:19">2025-05-18 16:19</span>&nbsp;
<a href="https://www.cnblogs.com/BigTall">老翅寒暑</a>&nbsp;
阅读(<span id="post_view_count">4</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18882325);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18882325', targetLink: 'https://www.cnblogs.com/BigTall/p/18882325', title: 'AI模型的回调能力的理解和实现' })">举报</a>

        </p>
    