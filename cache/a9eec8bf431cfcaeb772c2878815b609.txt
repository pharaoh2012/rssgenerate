
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/huangSir-devops/p/18860057" title="发布于 2025-05-05 13:15">
    <span role="heading" aria-level="2">K8s新手系列之初始Deployment资源</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="概述">概述</h2>
<p>官网：<a href="https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/deployment/" target="_blank" rel="noopener nofollow">https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/deployment/</a></p>
<p><code>Deployment</code>简称<code>deploy</code>，Deployment 用于管理运行一个应用负载的一组 Pod，通常适用于无状态的应用。</p>
<p>为了更好的解决服务编排的问题，kubernetes在V1.2版本开始，引入了Deployment控制器。值得一提的是，这种控制器并不直接管理pod，而是通过管理ReplicaSet来间接管理Pod，</p>
<p>即：Deployment管理ReplicaSet，ReplicaSet管理Pod。所以Deployment比ReplicaSet功能更加强大。要学习ReplicaSet请查看这篇文章：<a href="https://www.cnblogs.com/huangSir-devops/p/18859229" title="K8s新手系列之ReplicaSet资源" target="_blank">K8s新手系列之ReplicaSet资源</a></p>
<p>Deployment资源不会直接创建Pod，其作用在rs资源上，基于rs管理Pod副本。<br>
<img src="https://img2024.cnblogs.com/blog/3468887/202505/3468887-20250505121635337-282085408.png" alt="image" loading="lazy"></p>
<h2 id="deployment的作用">Deployment的作用</h2>
<h3 id="管理-pod-的副本">管理 Pod 的副本</h3>
<ul>
<li>
<p>创建和管理 Pod 副本：Deployment 可以创建指定数量的 Pod 副本，并确保这些副本始终运行。例如，你可以通过设置 replicas 字段来指定需要运行的 Pod 数量。</p>
</li>
<li>
<p>自动恢复：如果某个 Pod 出现故障或被意外删除，Deployment 会自动创建一个新的 Pod 来替代它，从而保证应用的高可用性。</p>
</li>
</ul>
<h3 id="声明式更新">声明式更新</h3>
<ul>
<li>
<p>定义期望状态：用户只需要在 Deployment 的配置文件中描述期望的状态，例如 Pod 的数量、镜像版本等，Deployment 控制器会自动将实际状态调整为期望状态。</p>
</li>
<li>
<p>更新 Pod 模板：通过更新 Deployment 的 PodTemplateSpec，可以声明 Pod 的新状态，Deployment 会自动创建新的 ReplicaSet，并以受控速率将 Pod 从旧 ReplicaSet 迁移到新 ReplicaSet。</p>
</li>
</ul>
<h3 id="滚动更新和回滚">滚动更新和回滚</h3>
<ul>
<li>
<p>滚动更新：Deployment 支持滚动更新，即在更新应用时，不会一次性替换所有 Pod，而是逐步替换，从而保证服务的连续性。你可以通过设置 maxSurge 和 maxUnavailable 参数来控制更新的节奏。</p>
</li>
<li>
<p>回滚：如果更新后的应用出现问题，Deployment 可以方便地回滚到之前的版本。每次更新都会生成一个新的修订版本，你可以通过 kubectl rollout undo 命令回滚到指定的版本。</p>
</li>
</ul>
<h3 id="扩容和缩容">扩容和缩容</h3>
<ul>
<li>
<p>手动扩展：你可以通过修改 Deployment 的 replicas 字段，手动增加或减少 Pod 的副本数量，以应对不同的负载需求。</p>
</li>
<li>
<p>自动扩展：结合 Kubernetes 的水平自动扩展器（Horizontal Pod Autoscaler），Deployment 可以根据 CPU 使用率或其他自定义指标自动调整 Pod 的数量</p>
</li>
</ul>
<h3 id="版本管理">版本管理</h3>
<ul>
<li>修订版本：Deployment 会记录每次更新的修订版本，你可以通过 kubectl rollout history 查看历史版本，并通过 --revision 参数查看特定版本的详细信息</li>
</ul>
<h3 id="暂停和恢复">暂停和恢复</h3>
<ul>
<li>暂停更新：在更新过程中，如果需要对 PodTemplateSpec 进行多次修改，可以暂停 Deployment 的更新，待修改完成后恢复，从而避免频繁更新导致的问题</li>
</ul>
<h3 id="清理旧的-replicaset">清理旧的 ReplicaSet</h3>
<ul>
<li>自动清理：Deployment 会自动清理不再需要的旧 ReplicaSet，以节省资源。</li>
</ul>
<h3 id="支持多种更新策略">支持多种更新策略</h3>
<ul>
<li>
<p>滚动更新（RollingUpdate）：这是默认的更新策略，通过逐步替换 Pod 来更新应用。</p>
</li>
<li>
<p>重建更新（Recreate）：在这种策略下，Deployment 会先删除所有旧的 Pod，然后创建新的 Pod。</p>
</li>
</ul>
<h3 id="比例缩放">比例缩放</h3>
<ul>
<li>支持比例缩放：在滚动更新过程中，如果 Deployment 的副本数量发生变化，Deployment 控制器会按照比例在新旧 ReplicaSet 中分配额外的副本，以降低更新风险。</li>
</ul>
<h3 id="负载均衡与服务发现">负载均衡与服务发现</h3>
<ul>
<li>与 Service 集成：Deployment 通常会和 Service 配合使用。Service 为 Deployment 中的 Pod 提供了一个稳定的网络端点，将请求分发到不同的 Pod 上，实现负载均衡。</li>
</ul>
<h2 id="deployment资源配置文件详解">Deployment资源配置文件详解</h2>
<p>Deployment的资源配置文件和ReplicaSet资源配置文件类似，可以通过<code>kubectl explain deploy</code>来查看创建Deployment的字段</p>
<p>示例：</p>
<pre><code>[root@master01 ~]# kubectl explain deploy
KIND:     Deployment
VERSION:  apps/v1

DESCRIPTION:
     Deployment enables declarative updates for Pods and ReplicaSets.

# FIELDS字段中的内容已进行截取
FIELDS:
   apiVersion   &lt;string&gt;

   kind &lt;string&gt;

   metadata     &lt;Object&gt;

   spec &lt;Object&gt;

   status       &lt;Object&gt;
</code></pre>
<p>通过上述可以发现定义Deployment的资源文件和定义Pod一样，也需要apiVersion、kind、metadata、spec等字段。</p>
<p>但是spec字段中有三个字段，需要注意，分别是replicas、selector、template。如下：</p>
<pre><code>[root@master01 ~]# kubectl explain deploy.spec
KIND:     Deployment
VERSION:  apps/v1

RESOURCE: spec &lt;Object&gt;

DESCRIPTION:
     Specification of the desired behavior of the Deployment.

     DeploymentSpec is the specification of the desired behavior of the
     Deployment.

FIELDS:
   minReadySeconds      &lt;integer&gt;
   #可选字段
   #用于设定一个新创建的 Pod 在其所有容器都正常运行且处于就绪状态，并且没有任何容器崩溃的最短持续时间。
   #默认值为0
   
   paused       &lt;boolean&gt;
   #可选字段
   #用于指示 Deployment 是否处于暂停状态。
   #当将其设置为 true 时，Deployment 会停止创建或删除 Pod 的操作，不会再进行滚动更新等操作。
   #默认值为false

   progressDeadlineSeconds      &lt;integer&gt;
     # 可选字段
     #用于设定 Deployment 在被视为失败之前可以花费的最长时间。
     #如果在这个时间内 Deployment 没有取得预期的进展，Deployment 控制器会继续处理该 Deployment，但会在 Deployment 的状态中显示一个 ProgressDeadlineExceeded 原因的条件。
     #默认值600秒

   replicas     &lt;integer&gt;
     # 必选字段
     #用于设置Pod的副本数量

   revisionHistoryLimit &lt;integer&gt;
     #可选字段
     #用于指定要保留的旧 ReplicaSet 的数量，以便在需要时进行回滚操作。
	 #默认值为10

   selector     &lt;Object&gt; -required-
     #用于定义一个标签选择器，用于选择 Pod

   strategy     &lt;Object&gt;
     #用于指定 Deployment 在替换现有 Pod 为新 Pod 时所采用的策略
     #默认值为RollingUpdate 

   template     &lt;Object&gt; -required-
    #用于描述 Deployment 将会创建的 Pod 的模板。它包含了 Pod 的元数据（如标签）和规格（如容器配置）。
</code></pre>
<h2 id="创建deployment">创建Deployment</h2>
<p>这里我们创建三个Pod副本</p>
<p>示例：</p>
<pre><code># 定义资源文件
[root@master01 ~/deploy]# cat deploy-nginx.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-nginx
  namespace: default
spec:
  # 设置Pod的副本数量
  replicas: 3
  selector:
    # 标签匹配规则
    matchLabels:
      app: nginx
  template:
    metadata:
      name: pod-nginx
      labels:
        app: nginx
    spec:
      containers:
      - name: container-nginx
        image: nginx:1.14.1
      restartPolicy: Always
	  [root@master01 ~/deploy]# cat deploy-nginx.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-nginx
  namespace: default
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      name: pod-nginx
      labels:
        app: nginx
    spec:
      containers:
      - name: container-nginx
        image: nginx:1.14.1
      restartPolicy: Always

# 创建deploy
[root@master01 ~/deploy]# kubectl apply -f deploy-nginx.yaml
deployment.apps/deployment-nginx created

[root@master01 ~/deploy]# kubectl get deploy
NAME               READY   UP-TO-DATE   AVAILABLE   AGE
deployment-nginx   0/3     3            0           8s
[root@master01 ~/deploy]# kubectl get rs
NAME                          DESIRED   CURRENT   READY   AGE
deployment-nginx-6d84458cd8   3         3         0       11s
rs-nginx-1                    1         1         1       95m
[root@master01 ~/deploy]# kubectl get po | grep pod-nginx
[root@master01 ~/deploy]# kubectl get po | grep deploy
deployment-nginx-6d84458cd8-8kbmf   1/1     Running            0                     41s
deployment-nginx-6d84458cd8-cmsl2   1/1     Running            0                     41s
deployment-nginx-6d84458cd8-qmk9m   1/1     Running            0                     41s

[root@master01 ~/deploy]# kubectl apply -f deploy-nginx.yaml
deployment.apps/deployment-nginx created
</code></pre>
<h3 id="查看创建成功之后对应的资源">查看创建成功之后对应的资源</h3>
<p>查看deploy</p>
<pre><code>[root@master01 ~/deploy]# kubectl get deploy
NAME               READY   UP-TO-DATE   AVAILABLE   AGE
deployment-nginx   0/3     3            0           8s
</code></pre>
<p>查看ReplicaSet</p>
<pre><code>[root@master01 ~/deploy]# kubectl get rs
NAME                          DESIRED   CURRENT   READY   AGE
deployment-nginx-6d84458cd8   3         3         0       11s
</code></pre>
<p>查看Pod</p>
<pre><code>[root@master01 ~/deploy]# kubectl get po | grep deploy
deployment-nginx-6d84458cd8-8kbmf   1/1     Running            0                     41s
deployment-nginx-6d84458cd8-cmsl2   1/1     Running            0                     41s
deployment-nginx-6d84458cd8-qmk9m   1/1     Running            0                     41s
</code></pre>
<h2 id="验证deployment的副本管理">验证Deployment的副本管理</h2>
<p>如果某个 Pod 出现故障或被意外删除，Deployment 会自动创建一个新的 Pod 来替代它，从而保证应用的高可用性。</p>
<p>我们将新创建的三个Pod都哦进行删除，查看一下会发生什么：</p>
<pre><code># 删除所有的Pod
[root@master01 ~/deploy]# kubectl delete po deployment-nginx-6d84458cd8-8kbmf deployment-nginx-6d84458cd8-cmsl2 deployment-nginx-6d84458cd8-qmk9m
pod "deployment-nginx-6d84458cd8-8kbmf" deleted
pod "deployment-nginx-6d84458cd8-cmsl2" deleted
pod "deployment-nginx-6d84458cd8-qmk9m" deleted

#查看deploy
[root@master01 ~/deploy]# kubectl get deploy
NAME               READY   UP-TO-DATE   AVAILABLE   AGE
deployment-nginx   3/3     3            3           7m

# 查看rs
[root@master01 ~/deploy]# kubectl get rs
NAME                          DESIRED   CURRENT   READY   AGE
deployment-nginx-6d84458cd8   3         3         3       6m28s

# 查看Pod，发现对应的数量还是3个
[root@master01 ~/deploy]# kubectl get po | grep deloy
[root@master01 ~/deploy]# kubectl get po | grep dep
deployment-nginx-6d84458cd8-4tds2   1/1     Running            0                     20s
deployment-nginx-6d84458cd8-4tzzs   1/1     Running            0                     20s
deployment-nginx-6d84458cd8-l9vqv   1/1     Running            0                     20s
</code></pre>
<p>如果将Replicaset资源删除会发生什么呢？</p>
<pre><code># 删除rs
[root@master01 ~/deploy]# kubectl delete rs deployment-nginx-6d84458cd8
replicaset.apps "deployment-nginx-6d84458cd8" deleted

# 查看rs，发现数量没有变化，只不过查看AGE字段发现重启了
[root@master01 ~/deploy]# kubectl get rs
NAME                          DESIRED   CURRENT   READY   AGE
deployment-nginx-6d84458cd8   3         3         3       3s

# 查看Pod，发现对应的Pod重新创建了三个
[root@master01 ~/deploy]# kubectl get po | grep deploy
deployment-nginx-6d84458cd8-69zg9   1/1     Running            0                 20s
deployment-nginx-6d84458cd8-ljdxw   1/1     Running            0                 20s
deployment-nginx-6d84458cd8-qqc48   1/1     Running            0                 20s
</code></pre>
<h2 id="验证deployment的声明式更新和扩缩容">验证Deployment的声明式更新和扩缩容</h2>
<p>声明式更新表示用户只需要在 Deployment 的配置文件中描述期望的状态，例如 Pod 的数量、镜像版本等，Deployment 控制器会自动将实际状态调整为期望状态。</p>
<h3 id="验证声明式更新和扩容">验证声明式更新和扩容</h3>
<p>我们来将Pod的副本数量更改成10个，发现会发生什么呢？</p>
<pre><code>[root@master01 ~/deploy]# cat deploy-nginx.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-nginx
  namespace: default
spec:
  # 将Pod的副本数量调整成10
  replicas: 10
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      name: pod-nginx
      labels:
        app: nginx
    spec:
      containers:
      - name: container-nginx
        image: nginx:1.14.1
      restartPolicy: Always
# 重新应用资源文件
[root@master01 ~/deploy]# kubectl apply -f deploy-nginx.yaml
deployment.apps/deployment-nginx configured
</code></pre>
<p>查看一下对应的资源变化发生了什么？</p>
<pre><code># 查看deploy
[root@master01 ~/deploy]# kubectl get deploy
NAME               READY   UP-TO-DATE   AVAILABLE   AGE
deployment-nginx   10/10   10           10          15h
# 查看rs
[root@master01 ~/deploy]# kubectl get rs
NAME                          DESIRED   CURRENT   READY   AGE
deployment-nginx-6d84458cd8   10        10        10      5m1s
# 查看po
[root@master01 ~/deploy]# kubectl get po | grep deploy
deployment-nginx-6d84458cd8-69zg9   1/1     Running            0                 5m33s
deployment-nginx-6d84458cd8-6vvzt   1/1     Running            0                 40s
deployment-nginx-6d84458cd8-ljdxw   1/1     Running            0                 5m33s
deployment-nginx-6d84458cd8-mkhlw   1/1     Running            0                 40s
deployment-nginx-6d84458cd8-pnv9x   1/1     Running            0                 40s
deployment-nginx-6d84458cd8-qqc48   1/1     Running            0                 5m33s
deployment-nginx-6d84458cd8-rgngt   1/1     Running            0                 40s
deployment-nginx-6d84458cd8-t7nms   1/1     Running            0                 40s
deployment-nginx-6d84458cd8-wllqb   1/1     Running            0                 40s
deployment-nginx-6d84458cd8-wrdmc   1/1     Running            0                 40s
</code></pre>
<p>通过上述发现，通过deploy扩容，deploy和rs两个资源都不会产生变化，只不过将Pod的数量达到我们定义的副本数量</p>
<h3 id="验证声明式更新和缩容">验证声明式更新和缩容</h3>
<p>同理，我们将Pod的副本数量调整成1</p>
<pre><code>[root@master01 ~/deploy]# cat deploy-nginx.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-nginx
  namespace: default
spec:
  # 将副本数量调整成1
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      name: pod-nginx
      labels:
        app: nginx
    spec:
      containers:
      - name: container-nginx
        image: nginx:1.14.1
      restartPolicy: Always
# 重新应用它
[root@master01 ~/deploy]# kubectl apply -f deploy-nginx.yaml
deployment.apps/deployment-nginx configured
</code></pre>
<p>查看一下对应的资源变化</p>
<pre><code># 查看deploy
[root@master01 ~/deploy]# kubectl get deploy
NAME               READY   UP-TO-DATE   AVAILABLE   AGE
deployment-nginx   1/1     1            1           15h
# 查看rs
[root@master01 ~/deploy]# kubectl get rs
NAME                          DESIRED   CURRENT   READY   AGE
deployment-nginx-6d84458cd8   1         1         1       10m
# 查看Pod
[root@master01 ~/deploy]# kubectl get po | grep deploy
deployment-nginx-6d84458cd8-qqc48   1/1     Running            0                 10m
</code></pre>
<h2 id="deployment的标签选择器">Deployment的标签选择器</h2>
<p>Deployment的标签选择器和Replicaset一样，分为两类，一类是等式选择器，另一类是集合选择器</p>
<h3 id="等式选择器">等式选择器</h3>
<p>等式选择器通过 <code>=</code>、<code>==</code>（两者含义相同）或者 <code>!=</code> 来筛选标签。其通过<code>spec.selector.matchLabels</code>来实现。</p>
<p>示例：</p>
<pre><code>apiVersion: apps/v1
kind: Deployment
metadata:
  name: deploy-nginx
  namespace: default
  labels:
    app: deploy-nginx
spec:
  replicas: 1
  selector:
  # 等式选择器
    matchLabels:
      app: nginx
  template:
    metadata:
      name: pod-nginx
      labels:
        app: nginx
    spec:
      restartPolicy: Always
      containers:
      - name: nginx
        image: nginx:latest
</code></pre>
<h3 id="集合选择器">集合选择器</h3>
<p>集合选择器借助 in、notin、exists、DoesNotExist 这些操作符来筛选标签。</p>
<ul>
<li>in：用于选取标签值在指定集合内的 Pod。</li>
<li>notin：用于选取标签值不在指定集合内的 Pod。</li>
<li>exists：用于选取具有指定标签的 Pod，不考虑标签的值。</li>
<li>DoesNotExist：用于选取不具有指定标签的 Pod，不考虑标签的值。</li>
</ul>
<p>其通过<code>spec.selector.matchExpressions</code>来实现</p>
<p>示例：</p>
<pre><code>apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-Deployment-set
spec:
  replicas: 3
  selector:
   # 集合选择器
    matchExpressions:
        # key：指定Label的key，operator：表示操作符，value：表示Label的value
      - {key: app, operator: In, values: [nginx]}
      - {key: env, operator: NotIn, values: [development, testing]}
  template:
    metadata:
      labels:
        app: nginx
        env: production
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80
</code></pre>
<h2 id="管理deployment">管理Deployment</h2>
<h3 id="查看deployment">查看Deployment</h3>
<p>语法：</p>
<pre><code>kubectl get deploy &lt;deploy-name&gt; -n &lt;namespace-name&gt;
</code></pre>
<p>示例：</p>
<pre><code>[root@master01 ~/deploy]# kubectl get deploy
NAME               READY   UP-TO-DATE   AVAILABLE   AGE
deployment-nginx   1/1     1            1           15h
</code></pre>
<h3 id="修改deployment">修改Deployment</h3>
<p>由两种方式，一种是通过<code>kubectl edit rc &lt;rc-name&gt;</code>来进行修改，会打开一个类似vim的界面，修改其对应的值即可，最后wq保存即可应用你的配置.<br>
另一种方式则是修改对应的资源文件，最后使用<code>kubectl apply -f &lt;file&gt;</code>即可。</p>
<h3 id="删除deployment">删除Deployment</h3>
<p>删除Deployment时会删除对应的ReplicaSet和Pod，删除时请谨慎！！！</p>
<p>语法：</p>
<pre><code>kubectl delete rc &lt;rc-name&gt; -n &lt;namespace-name&gt;
</code></pre>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/huangSir-devops/" target="_blank">huangSir-devops</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/huangSir-devops/p/18860057" target="_blank">https://www.cnblogs.com/huangSir-devops/p/18860057</a>，微信Vac666666，欢迎交流</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.04757098103587963" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-05 13:15">2025-05-05 13:15</span>&nbsp;
<a href="https://www.cnblogs.com/huangSir-devops">huangSir-devops</a>&nbsp;
阅读(<span id="post_view_count">14</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18860057);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18860057', targetLink: 'https://www.cnblogs.com/huangSir-devops/p/18860057', title: 'K8s新手系列之初始Deployment资源' })">举报</a>
</div>
        