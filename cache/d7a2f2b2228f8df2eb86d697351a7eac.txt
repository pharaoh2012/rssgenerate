
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/vipwan/p/18815596" title="发布于 2025-04-08 22:33">
    <span role="heading" aria-level="2">经过几天的努力Biwen.AutoClassGen终于实现了DTO复杂属性的生成</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>距写上一篇 <a href="https://www.cnblogs.com/vipwan/p/18535459" target="_blank">https://www.cnblogs.com/vipwan/p/18535459</a> 生成DTO已经有一段时间了,</p>
<p>最初<s>没有考虑</s>复杂二级属性嵌套的实现,而是直接使用排除使用自定义的方式解决这个问题,</p>
<p>但是这个有些违背简约到底的初衷,并且也有好几个网友提出希望支持复杂嵌套属性DTO的功能,最近自己凑了几天时间打磨了一下,算是大致实现了这个功能</p>
<h3 id="使用方式">使用方式</h3>
<h4 id="支持特性继承">支持特性继承</h4>
<p>比如我们的DTO对象也需要<code>[Require]</code>,<code>[Range(1,10)]</code>等校验型特征,我们只需要目标类的属性标注即可,生成的DTO也将传递这些重要的特性,对于<code>OpenApi</code>文档以及一些验证场景会相当有帮助:<br>
<img src="https://img2024.cnblogs.com/blog/127598/202504/127598-20250408224147691-1124397674.png" alt="image" loading="lazy"></p>
<pre><code class="language-csharp">public class Person
{
    [Required]
    public string Name { get; set; } = string.Empty;
    [Required, Range(0, 200)]
    public int Age { get; set; }
}
</code></pre>
<p>生成的DTO:</p>
<pre><code class="language-csharp">/// &lt;inheritdoc cref = "Person.Name"/&gt;
[Required]
public string Name { get; set; }
/// &lt;inheritdoc cref = "Person.Age"/&gt;
[Required]
[Range(0, 200)]
public int Age { get; set; }
</code></pre>
<h4 id="支持复杂属性嵌套生成">支持复杂属性嵌套生成</h4>
<blockquote>
<p>实体定义示例:</p>
</blockquote>
<pre><code class="language-csharp">// 主实体
public class Person
{
    [Required]
    public string Name { get; set; } = string.Empty;
    [Required, Range(0, 200)]
    public int Age { get; set; }
    // 嵌套对象
    public Address Address { get; set; } = new();
    // 集合属性
    public List&lt;Hobby&gt; Hobbies { get; set; } = [];
    // 使用特性标记忽略的属性
    [AutoDtoIgroned]
    public string Igrone2 { get; set; } = null!;
}

// 嵌套实体
public class Address
{
    [Required]
    public string Street { get; set; } = string.Empty;
    [Required]
    public string City { get; set; } = string.Empty;
    [Required]
    public string State { get; set; } = string.Empty;
    [Required]
    public string ZipCode { get; set; } = string.Empty;
}

// 集合项实体
public class Hobby
{
    [Required]
    public string Name { get; set; } = string.Empty;
    [Required]
    public string Description { get; set; } = string.Empty;
    // 多层嵌套
    public HobbyExtend Extend { get; set; } = new();
}

public class HobbyExtend
{
    public string Extend1 { get; set; } = string.Empty;
    public string Extend2 { get; set; } = string.Empty;
    public InnerExtend Extend3 { get; set; } = new();
}

public class InnerExtend
{
    public string InnerExtendMsg { get; set; } = string.Empty;
}
</code></pre>
<blockquote>
<ol>
<li>普通 DTO（单层映射）</li>
</ol>
</blockquote>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// 没有复杂属性嵌套的 DTO
/// &lt;/summary&gt;
[AutoDto&lt;Person&gt;(nameof(Person.Igrone))]//忽略掉Igrone属性
public partial record PersonDto;
</code></pre>
<blockquote>
<ol start="2">
<li>复杂 DTO（多层嵌套）</li>
</ol>
</blockquote>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// 模拟的复杂 DTO
/// &lt;/summary&gt;
[AutoDto&lt;Person&gt;(nameof(Person.Igrone))]
[AutoDtoComplex(5)]//≥2即表示多层嵌套生成
public partial record PersonComplexDto;
</code></pre>
<h3 id="生成的代码样例">生成的代码样例:</h3>
<p>生成DTO,并对象生成映射扩展:<code>MapperToXXX</code>,以及IQuerylable扩展<code>ProjectToXXX</code>:<br>
并且生成了预留<code>partial</code>扩展,如果存在<code>FirstName + LastName -&gt; FullName</code>这种情况,你可以自己实现partial部分!</p>
<pre><code class="language-csharp">
// &lt;auto-generated /&gt;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

#pragma warning disable

//generate Person-PersonComplexDto
namespace Biwen.AutoClassGen.TestConsole.Dtos
{
    using Biwen.AutoClassGen.TestConsole.Dtos;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;

    public partial record class PersonComplexDto
    {
        /// &lt;inheritdoc cref = "Person.Name"/&gt;
        [Required]
        public string Name { get; set; }

        /// &lt;inheritdoc cref = "Person.Age"/&gt;
        [Required]
        [Range(0, 200)]
        public int Age { get; set; }
        /// &lt;inheritdoc cref = "Person.Address"/&gt;
        public AddressDto Address { get; set; }
        /// &lt;inheritdoc cref = "Person.Hobbies"/&gt;
        public System.Collections.Generic.List&lt;HobbyDto&gt; Hobbies { get; set; }
    }
}

namespace Biwen.AutoClassGen.TestConsole.Dtos
{
    using Biwen.AutoClassGen.TestConsole.Dtos;
    using System.Linq;

    public static partial class PersonToPersonComplexDtoExtentions
    {
        /// &lt;summary&gt;
        /// custom mapper
        /// &lt;/summary&gt;
        static partial void MapperToPartial(Person from, PersonComplexDto to);
        /// &lt;summary&gt;
        /// mapper to PersonComplexDto
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static PersonComplexDto MapperToPersonComplexDto(this Person model)
        {
            if (model == null)
                return null;
            var retn = new PersonComplexDto()
            {
                Name = model.Name,
                Age = model.Age,
                Address = model.Address?.MapperToAddressDto(),
                Hobbies = model.Hobbies != null ? model.Hobbies.Select(x =&gt; x?.MapperToHobbyDto()).ToList() : null,
            };
            MapperToPartial(model, retn);
            return retn;
        }

        /// &lt;summary&gt;
        /// ProjectTo PersonComplexDto
        /// &lt;/summary&gt;
        public static IQueryable&lt;PersonComplexDto&gt; ProjectToPersonComplexDto(this IQueryable&lt;Person&gt; query)
        {
            return query.Select(model =&gt; model.MapperToPersonComplexDto());
        }
    }

    public static partial class PersonComplexDtoToPersonExtentions
    {
        /// &lt;summary&gt;
        /// custom mapper
        /// &lt;/summary&gt;
        static partial void MapperToPartial(PersonComplexDto from, Person to);
        /// &lt;summary&gt;
        /// mapper to Person
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static Person MapperToPerson(this PersonComplexDto model)
        {
            if (model == null)
                return null;
            var retn = new Person()
            {
                Name = model.Name,
                Age = model.Age,
                Address = model.Address?.MapperToAddress(),
                Hobbies = model.Hobbies != null ? model.Hobbies.Select(x =&gt; x?.MapperToHobby()).ToList() : null,
            };
            MapperToPartial(model, retn);
            return retn;
        }
    }
}

//generate Person-PersonDto
namespace Biwen.AutoClassGen.TestConsole.Dtos
{
    using Biwen.AutoClassGen.TestConsole.Dtos;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;

    public partial record class PersonDto
    {
        /// &lt;inheritdoc cref = "Person.Name"/&gt;
        [Required]
        public string Name { get; set; }

        /// &lt;inheritdoc cref = "Person.Age"/&gt;
        [Required]
        [Range(0, 200)]
        public int Age { get; set; }
        /// &lt;inheritdoc cref = "Person.Address"/&gt;
        public Biwen.AutoClassGen.TestConsole.Dtos.Address Address { get; set; }
        /// &lt;inheritdoc cref = "Person.Hobbies"/&gt;
        public System.Collections.Generic.List&lt;Biwen.AutoClassGen.TestConsole.Dtos.Hobby&gt; Hobbies { get; set; }
    }
}

namespace Biwen.AutoClassGen.TestConsole.Dtos
{
    using Biwen.AutoClassGen.TestConsole.Dtos;
    using System.Linq;

    public static partial class PersonToPersonDtoExtentions
    {
        /// &lt;summary&gt;
        /// custom mapper
        /// &lt;/summary&gt;
        static partial void MapperToPartial(Person from, PersonDto to);
        /// &lt;summary&gt;
        /// mapper to PersonDto
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static PersonDto MapperToPersonDto(this Person model)
        {
            if (model == null)
                return null;
            var retn = new PersonDto()
            {
                Name = model.Name,
                Age = model.Age,
                Address = model.Address,
                Hobbies = model.Hobbies,
            };
            MapperToPartial(model, retn);
            return retn;
        }

        /// &lt;summary&gt;
        /// ProjectTo PersonDto
        /// &lt;/summary&gt;
        public static IQueryable&lt;PersonDto&gt; ProjectToPersonDto(this IQueryable&lt;Person&gt; query)
        {
            return query.Select(model =&gt; model.MapperToPersonDto());
        }
    }

    public static partial class PersonDtoToPersonExtentions
    {
        /// &lt;summary&gt;
        /// custom mapper
        /// &lt;/summary&gt;
        static partial void MapperToPartial(PersonDto from, Person to);
        /// &lt;summary&gt;
        /// mapper to Person
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static Person MapperToPerson(this PersonDto model)
        {
            if (model == null)
                return null;
            var retn = new Person()
            {
                Name = model.Name,
                Age = model.Age,
                Address = model.Address,
                Hobbies = model.Hobbies,
            };
            MapperToPartial(model, retn);
            return retn;
        }
    }
}

//generate Address-AddressDto
namespace Biwen.AutoClassGen.TestConsole.Dtos
{
    using Biwen.AutoClassGen.TestConsole.Dtos;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;

    public partial class AddressDto
    {
        /// &lt;inheritdoc cref = "Address.Street"/&gt;
        [Required]
        public string Street { get; set; }

        /// &lt;inheritdoc cref = "Address.City"/&gt;
        [Required]
        public string City { get; set; }

        /// &lt;inheritdoc cref = "Address.State"/&gt;
        [Required]
        public string State { get; set; }

        /// &lt;inheritdoc cref = "Address.ZipCode"/&gt;
        [Required]
        public string ZipCode { get; set; }
    }
}

namespace Biwen.AutoClassGen.TestConsole.Dtos
{
    using Biwen.AutoClassGen.TestConsole.Dtos;
    using System.Linq;
    using System.Net;

    public static partial class AddressToAddressDtoExtentions
    {
        /// &lt;summary&gt;
        /// custom mapper
        /// &lt;/summary&gt;
        static partial void MapperToPartial(Address from, AddressDto to);
        /// &lt;summary&gt;
        /// mapper to AddressDto
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static AddressDto MapperToAddressDto(this Address model)
        {
            if (model == null)
                return null;
            var retn = new AddressDto()
            {
                Street = model.Street,
                City = model.City,
                State = model.State,
                ZipCode = model.ZipCode,
            };
            MapperToPartial(model, retn);
            return retn;
        }

        /// &lt;summary&gt;
        /// ProjectTo AddressDto
        /// &lt;/summary&gt;
        public static IQueryable&lt;AddressDto&gt; ProjectToAddressDto(this IQueryable&lt;Address&gt; query)
        {
            return query.Select(model =&gt; model.MapperToAddressDto());
        }
    }

    public static partial class AddressDtoToAddressExtentions
    {
        /// &lt;summary&gt;
        /// custom mapper
        /// &lt;/summary&gt;
        static partial void MapperToPartial(AddressDto from, Address to);
        /// &lt;summary&gt;
        /// mapper to Address
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static Address MapperToAddress(this AddressDto model)
        {
            if (model == null)
                return null;
            var retn = new Address()
            {
                Street = model.Street,
                City = model.City,
                State = model.State,
                ZipCode = model.ZipCode,
            };
            MapperToPartial(model, retn);
            return retn;
        }
    }
}

//generate Hobby-HobbyDto
namespace Biwen.AutoClassGen.TestConsole.Dtos
{
    using Biwen.AutoClassGen.TestConsole.Dtos;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;

    public partial class HobbyDto
    {
        /// &lt;inheritdoc cref = "Hobby.Name"/&gt;
        [Required]
        public string Name { get; set; }

        /// &lt;inheritdoc cref = "Hobby.Description"/&gt;
        [Required]
        public string Description { get; set; }
        /// &lt;inheritdoc cref = "Hobby.Extend"/&gt;
        public HobbyExtendDto Extend { get; set; }
    }
}

namespace Biwen.AutoClassGen.TestConsole.Dtos
{
    using Biwen.AutoClassGen.TestConsole.Dtos;
    using System.Linq;

    public static partial class HobbyToHobbyDtoExtentions
    {
        /// &lt;summary&gt;
        /// custom mapper
        /// &lt;/summary&gt;
        static partial void MapperToPartial(Hobby from, HobbyDto to);
        /// &lt;summary&gt;
        /// mapper to HobbyDto
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static HobbyDto MapperToHobbyDto(this Hobby model)
        {
            if (model == null)
                return null;
            var retn = new HobbyDto()
            {
                Name = model.Name,
                Description = model.Description,
                Extend = model.Extend?.MapperToHobbyExtendDto(),
            };
            MapperToPartial(model, retn);
            return retn;
        }

        /// &lt;summary&gt;
        /// ProjectTo HobbyDto
        /// &lt;/summary&gt;
        public static IQueryable&lt;HobbyDto&gt; ProjectToHobbyDto(this IQueryable&lt;Hobby&gt; query)
        {
            return query.Select(model =&gt; model.MapperToHobbyDto());
        }
    }

    public static partial class HobbyDtoToHobbyExtentions
    {
        /// &lt;summary&gt;
        /// custom mapper
        /// &lt;/summary&gt;
        static partial void MapperToPartial(HobbyDto from, Hobby to);
        /// &lt;summary&gt;
        /// mapper to Hobby
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static Hobby MapperToHobby(this HobbyDto model)
        {
            if (model == null)
                return null;
            var retn = new Hobby()
            {
                Name = model.Name,
                Description = model.Description,
                Extend = model.Extend?.MapperToHobbyExtend(),
            };
            MapperToPartial(model, retn);
            return retn;
        }
    }
}

//generate HobbyExtend-HobbyExtendDto
namespace Biwen.AutoClassGen.TestConsole.Dtos
{
    using Biwen.AutoClassGen.TestConsole.Dtos;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;

    public partial class HobbyExtendDto
    {
        /// &lt;inheritdoc cref = "HobbyExtend.Extend1"/&gt;
        public string Extend1 { get; set; }
        /// &lt;inheritdoc cref = "HobbyExtend.Extend2"/&gt;
        public string Extend2 { get; set; }
        /// &lt;inheritdoc cref = "HobbyExtend.Extend3"/&gt;
        public InnerExtendDto Extend3 { get; set; }
    }
}

namespace Biwen.AutoClassGen.TestConsole.Dtos
{
    using Biwen.AutoClassGen.TestConsole.Dtos;
    using System.Linq;

    public static partial class HobbyExtendToHobbyExtendDtoExtentions
    {
        /// &lt;summary&gt;
        /// custom mapper
        /// &lt;/summary&gt;
        static partial void MapperToPartial(HobbyExtend from, HobbyExtendDto to);
        /// &lt;summary&gt;
        /// mapper to HobbyExtendDto
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static HobbyExtendDto MapperToHobbyExtendDto(this HobbyExtend model)
        {
            if (model == null)
                return null;
            var retn = new HobbyExtendDto()
            {
                Extend1 = model.Extend1,
                Extend2 = model.Extend2,
                Extend3 = model.Extend3?.MapperToInnerExtendDto(),
            };
            MapperToPartial(model, retn);
            return retn;
        }

        /// &lt;summary&gt;
        /// ProjectTo HobbyExtendDto
        /// &lt;/summary&gt;
        public static IQueryable&lt;HobbyExtendDto&gt; ProjectToHobbyExtendDto(this IQueryable&lt;HobbyExtend&gt; query)
        {
            return query.Select(model =&gt; model.MapperToHobbyExtendDto());
        }
    }

    public static partial class HobbyExtendDtoToHobbyExtendExtentions
    {
        /// &lt;summary&gt;
        /// custom mapper
        /// &lt;/summary&gt;
        static partial void MapperToPartial(HobbyExtendDto from, HobbyExtend to);
        /// &lt;summary&gt;
        /// mapper to HobbyExtend
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static HobbyExtend MapperToHobbyExtend(this HobbyExtendDto model)
        {
            if (model == null)
                return null;
            var retn = new HobbyExtend()
            {
                Extend1 = model.Extend1,
                Extend2 = model.Extend2,
                Extend3 = model.Extend3?.MapperToInnerExtend(),
            };
            MapperToPartial(model, retn);
            return retn;
        }
    }
}

//generate InnerExtend-InnerExtendDto
namespace Biwen.AutoClassGen.TestConsole.Dtos
{
    using Biwen.AutoClassGen.TestConsole.Dtos;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;

    public partial class InnerExtendDto
    {
        /// &lt;inheritdoc cref = "InnerExtend.InnerExtendMsg"/&gt;
        public string InnerExtendMsg { get; set; }
    }
}

namespace Biwen.AutoClassGen.TestConsole.Dtos
{
    using Biwen.AutoClassGen.TestConsole.Dtos;
    using System.Linq;

    public static partial class InnerExtendToInnerExtendDtoExtentions
    {
        /// &lt;summary&gt;
        /// custom mapper
        /// &lt;/summary&gt;
        static partial void MapperToPartial(InnerExtend from, InnerExtendDto to);
        /// &lt;summary&gt;
        /// mapper to InnerExtendDto
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static InnerExtendDto MapperToInnerExtendDto(this InnerExtend model)
        {
            if (model == null)
                return null;
            var retn = new InnerExtendDto()
            {
                InnerExtendMsg = model.InnerExtendMsg,
            };
            MapperToPartial(model, retn);
            return retn;
        }

        /// &lt;summary&gt;
        /// ProjectTo InnerExtendDto
        /// &lt;/summary&gt;
        public static IQueryable&lt;InnerExtendDto&gt; ProjectToInnerExtendDto(this IQueryable&lt;InnerExtend&gt; query)
        {
            return query.Select(model =&gt; model.MapperToInnerExtendDto());
        }
    }

    public static partial class InnerExtendDtoToInnerExtendExtentions
    {
        /// &lt;summary&gt;
        /// custom mapper
        /// &lt;/summary&gt;
        static partial void MapperToPartial(InnerExtendDto from, InnerExtend to);
        /// &lt;summary&gt;
        /// mapper to InnerExtend
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static InnerExtend MapperToInnerExtend(this InnerExtendDto model)
        {
            if (model == null)
                return null;
            var retn = new InnerExtend()
            {
                InnerExtendMsg = model.InnerExtendMsg,
            };
            MapperToPartial(model, retn);
            return retn;
        }
    }
}
#pragma warning restore

</code></pre>
<h4 id="最后">最后</h4>
<p>以上代码完整的介绍了最近实现的功能,最后你可以使用我最新发布的nuget包体验:</p>
<pre><code class="language-xml">&lt;ItemGroup&gt;
   &lt;PackageReference Include="Biwen.AutoClassGen.Attributes" Version="1.7.0" /&gt;
   &lt;PackageReference Include="Biwen.AutoClassGen" Version="1.7.0" PrivateAssets="all" /&gt;
&lt;/ItemGroup&gt;
</code></pre>
<p>如果你对完整的实现感兴趣可以移步我的GitHub仓储,欢迎star <a href="https://github.com/vipwan/Biwen.AutoClassGen" target="_blank" rel="noopener nofollow">https://github.com/vipwan/Biwen.AutoClassGen</a></p>
<p>本文版权归作者所有,转载请注明出处!</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="2.546853058957176" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-08 23:13">2025-04-08 22:33</span>&nbsp;
<a href="https://www.cnblogs.com/vipwan">万雅虎</a>&nbsp;
阅读(<span id="post_view_count">281</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18815596" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18815596);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18815596', targetLink: 'https://www.cnblogs.com/vipwan/p/18815596', title: '经过几天的努力Biwen.AutoClassGen终于实现了DTO复杂属性的生成' })">举报</a>
</div>
        