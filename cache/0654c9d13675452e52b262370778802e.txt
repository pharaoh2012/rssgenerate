
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/teark/p/18767765" title="发布于 2025-03-12 15:51">
    <span role="heading" aria-level="2">大模型评测之幻觉检测hallucination_evaluation_model</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h3><span style="font-size: 16px">大背景：</span></h3>
<ol>
<li><span style="font-size: 16px">2025开年deepseek铺天盖地的新闻</span></li>
<li><span style="font-size: 16px">参会代表已经表明，年度主线就是以AI为基础</span></li>
<li><span style="font-size: 16px">Manus于3月初横空出世</span></li>
<li><span style="font-size: 16px">国内各种模型竞赛的现状，只要是和科技沾边的公司不可能没有大模型，哪怕是里三层外三层套壳也得上</span></li>
<li><span style="font-size: 16px">东升西降，宏观使然，竞争中必然有科技竞争</span></li>
</ol>
<h3><span style="font-size: 16px">小背景　</span></h3>
<ol>
<li><span style="font-size: 16px">本公司自研大模型rd，在模型排名中必有一席之地</span></li>
<li><span style="font-size: 16px">除了加大力度研发，还需各种评测</span></li>
<li><span style="font-size: 16px">正好，吾就是一名专业的模型评测员</span></li>
<li><span style="font-size: 16px">随着各种假信息的泛滥，模型越来越不清楚安全的边界、真实的边界，只是于铺天盖地的网页中查找然后总结，算不上一个优秀的大模型</span></li>
</ol>
<h3><span style="font-size: 16px">幻觉检测</span></h3>
<p><span style="font-size: 16px">　　什么是幻觉检测？</span></p>
<p><span style="font-size: 16px">　　官网中介绍到：“HHEM模型系列旨在检测 LLM 中的幻觉。它们在构建检索增强生成 (RAG) 应用程序的背景下特别有用，其中 LLM 总结了一组事实，并且 HHEM 可用于衡量该总结与事实在事实上的一致程度。”</span></p>
<p><span style="font-size: 16px">　　说人话，就是检测一下大模型对事实的认知能力如何。</span></p>
<p><span style="font-size: 16px">　　大模型地址：<a href="https://huggingface.co/vectara/hallucination_evaluation_model" rel="noopener nofollow" target="_blank">https://huggingface.co/vectara/hallucination_evaluation_model</a></span></p>
<h3><span style="font-size: 16px">如何做幻觉检测</span></h3>
<ol>
<li><span style="font-size: 16px">仔细阅读中大模型地址的Model Card部分，这对你理解 “事实但是幻觉” 很重要。　<img src="https://img2024.cnblogs.com/blog/1937933/202503/1937933-20250312151056354-2049739459.png" alt="" loading="lazy"></span></li>
<li><span style="font-size: 16px">把项目克隆下来，待会儿要用到里面的模型进行计算</span></li>
<li><span style="font-size: 16px">下载官方数据集，https://huggingface.co/datasets/vectara/leaderboard_results/tree/main ，数据集是一个很大的csv文件，里面是用于测试幻觉的各种问题，用于模型的输入</span></li>
<li><span style="font-size: 16px">使用提示语，提示语要和问题进行拼接</span>
<p><span style="font-size: 16px"><img src="https://img2024.cnblogs.com/blog/1937933/202503/1937933-20250312152814742-520218034.png" alt="" loading="lazy"></span></p>
</li>
<li>
<p><span style="font-size: 16px">编写一个脚本，从csv中读取问题，请求大模型，再将大模型的答案追加到后一列。参考如下：&nbsp;</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px"><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> huan_jue():
    df </span>= pd.read_csv(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">leaderboard_summaries.csv</span><span style="color: rgba(128, 0, 0, 1)">'</span>, encoding=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">utf-8</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
    df </span>= df[df[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">model</span><span style="color: rgba(128, 0, 0, 1)">'</span>] == <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">deepseek/deepseek-v3</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]

    data </span>= {<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">source</span><span style="color: rgba(128, 0, 0, 1)">"</span>: [], <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">ori_summary</span><span style="color: rgba(128, 0, 0, 1)">'</span>: [], <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">rendu_summary</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: []}
    </span><span style="color: rgba(0, 0, 255, 1)">for</span> index, row <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> df.iterrows():
        source </span>=<span style="color: rgba(0, 0, 0, 1)"> row[0]
        ori_summary </span>= row[1<span style="color: rgba(0, 0, 0, 1)">]
        msg </span>= f<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Provide a concise summary of the following passage, covering the core pieces of information described in english. {source}</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">
        con </span>=<span style="color: rgba(0, 0, 0, 1)"> rendu(msg)
        </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">:
            con </span>= con[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">choices</span><span style="color: rgba(128, 0, 0, 1)">'</span>][0][<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">message</span><span style="color: rgba(128, 0, 0, 1)">'</span>][<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">content</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]
        </span><span style="color: rgba(0, 0, 255, 1)">except</span><span style="color: rgba(0, 0, 0, 1)"> IndexError:
            con </span>= <span style="color: rgba(128, 0, 0, 1)">''</span>
        <span style="color: rgba(0, 0, 255, 1)">print</span>(index, con[:100<span style="color: rgba(0, 0, 0, 1)">])
        data[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">source</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">].append(source)
        data[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ori_summary</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">].append(ori_summary)
        data[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">rendu_summary</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">].append(con)

    df2 </span>=<span style="color: rgba(0, 0, 0, 1)"> pd.DataFrame(data)
    df2.to_csv(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">output.csv</span><span style="color: rgba(128, 0, 0, 1)">'</span>, index=False)</span></pre>
</div>
</li>
<li>
<p><span style="font-size: 16px">上面的过程可能很漫长，建议放到服务器后台进行，后台命令参考，如果不打算用服务器跑，这一步忽略。</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">nohup python hallucination_test.py &gt; nohup.out 2&gt;&amp;1 &amp;</span></pre>
</div>
</li>
<li>
<p><span style="font-size: 16px">下载依赖的模型，参考代码如下（如果已配置梯子，这一步可以忽略）</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px"><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> os
os.environ[</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">HF_ENDPOINT</span><span style="color: rgba(128, 0, 0, 1)">'</span>] = <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">https://hf-mirror.com</span><span style="color: rgba(128, 0, 0, 1)">'</span>
<span style="color: rgba(0, 0, 255, 1)">from</span> huggingface_hub <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> snapshot_download

snapshot_download(
  repo_id</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">microsoft/OmniParser-v2.0</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
  </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> repo_type="dataset",  # 下载数据集时才需要</span>
  local_dir=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">../hallucination_evaluation_model/google/flan-t5-base</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
  </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> proxies={"https": "http://localhost:7890"},</span>
  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> max_workers=8,</span>
  etag_timeout=180<span style="color: rgba(0, 0, 0, 1)">
)</span></span></pre>
</div>
</li>
<li><span style="font-size: 16px">使用大模型地址的Model Card部分提到的计算方式进行计算，这也是为什么第一步让大家熟读Model Card。我用的是Pipline方式计算的。计算也很耗时，建议放在服务器进行。</span>
<p><span style="font-size: 16px"><img src="https://img2024.cnblogs.com/blog/1937933/202503/1937933-20250312154150262-1033536977.png" alt="" loading="lazy"></span></p>
</li>
<li>
<p>&nbsp;分数转化为排行榜支持的形式，首先我们看一下排行榜 https://huggingface.co/spaces/vectara/leaderboard ，首列分数越低代表该大模型致幻程度越小，说明模型越好。那四列的意思分别为：</p>
<span style="font-size: 16px">转换分数脚本参考</span>
<ul>
<li>
<p>幻觉率：幻觉评分低于0.5的摘要百分比</p>
</li>
<li>事实一致率：幻觉率的补充，以百分比表示。</li>
<li>回答率：非空摘要的百分比。这要么是模型拒绝生成响应，要么是由于各种原因抛出错误。（例如，模型认为文档包含不恰当的内容）</li>
<li>平均摘要长度：生成的摘要的平均字数</li>
</ul>
</li>
<li>
<div class="cnblogs_code">
<pre><span style="font-size: 16px"><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> pandas as pd
result </span>=<span style="color: rgba(0, 0, 0, 1)"> {
    </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Hallucination Rate</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">: 0,
    </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Factual Consistency Rate</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">: 0,
    </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Answer Rate</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">: 0,
    </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Average Summary Length</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">: 0
}
with open(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">result.json</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">r</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">) as f:
    con </span>=<span style="color: rgba(0, 0, 0, 1)"> eval(f.read())
hr </span>= fcr = ar =<span style="color: rgba(0, 0, 0, 1)"> 0
df </span>= pd.read_csv(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">hallu_rendu/rendu_summary.csv</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)

asl </span>=<span style="color: rgba(0, 0, 0, 1)"> []
</span><span style="color: rgba(0, 0, 255, 1)">for</span> i <span style="color: rgba(0, 0, 255, 1)">in</span> df[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">rendu_summary</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">].tolist():
    j </span>= i.split(<span style="color: rgba(128, 0, 0, 1)">'</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
    sm </span>=<span style="color: rgba(0, 0, 0, 1)"> 0
    sm </span>+=<span style="color: rgba(0, 0, 0, 1)"> len(j)
    asl.append(sm)

</span><span style="color: rgba(0, 0, 255, 1)">for</span> i <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> con:
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> i &lt; 0.5<span style="color: rgba(0, 0, 0, 1)">:
        hr </span>+= 1
    <span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(0, 0, 255, 1)">not</span><span style="color: rgba(0, 0, 0, 1)"> i:
        ar </span>+= 1<span style="color: rgba(0, 0, 0, 1)">

hr </span>= round(hr/len(con), 2<span style="color: rgba(0, 0, 0, 1)">)
fcr </span>= 1-<span style="color: rgba(0, 0, 0, 1)">hr
hr </span>= str(hr * 100) + <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">%</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">
fcr </span>= str(fcr * 100) + <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">%</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">
ar </span>= str((len(con) - ar) / len(con) * 100) + <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">%</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">
asl </span>= str(sum(asl)/<span style="color: rgba(0, 0, 0, 1)">len(asl))
result[</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Hallucination Rate</span><span style="color: rgba(128, 0, 0, 1)">'</span>] =<span style="color: rgba(0, 0, 0, 1)"> hr
result[</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Factual Consistency Rate</span><span style="color: rgba(128, 0, 0, 1)">'</span>] =<span style="color: rgba(0, 0, 0, 1)"> fcr
result[</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Answer Rate</span><span style="color: rgba(128, 0, 0, 1)">'</span>] =<span style="color: rgba(0, 0, 0, 1)"> ar
result[</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Average Summary Length</span><span style="color: rgba(128, 0, 0, 1)">'</span>] =<span style="color: rgba(0, 0, 0, 1)"> asl
</span><span style="color: rgba(0, 0, 255, 1)">print</span>(result)</span></pre>
</div>
</li>
</ol>
<h3><span style="font-size: 16px">聊一聊我们的模型评测结果</span></h3>
<p><span style="font-size: 16px">　　我们的rd模型在评测中各项评分如下：{'Hallucination Rate': '16.0%', 'Factual Consistency Rate': '84.0%', 'Answer Rate': '100.0%', 'Average Summary Length': '102.68190854870775'}</span></p>
<p><span style="font-size: 16px">　　这个结果算不上好，但至少上榜了。</span></p>
<p><span style="font-size: 16px">　　你们的呢，评论区聊一聊</span></p>
</div>
<div id="MySignature" role="contentinfo">
    <div>作者：<a target="_blank">Teark</a></div>
<div>出处：<a href="https://www.cnblogs.com/teark" target="_blank">https://www.cnblogs.com/teark</a></div>
<div>本文版权归作者-博客园测神 独有，欢迎转载，但未经作者同意必须在文章页面给出原文链接，否则保留追究法律责任的权利。 </div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.7940339002199074" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-12 15:53">2025-03-12 15:51</span>&nbsp;
<a href="https://www.cnblogs.com/teark">测神</a>&nbsp;
阅读(<span id="post_view_count">107</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18767765" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18767765);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18767765', targetLink: 'https://www.cnblogs.com/teark/p/18767765', title: '大模型评测之幻觉检测hallucination_evaluation_model' })">举报</a>
</div>
        