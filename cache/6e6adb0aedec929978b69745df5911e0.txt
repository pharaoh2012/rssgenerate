
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/samhou/p/18929792/coding-with-grandma-flexbox" title="发布于 2025-06-15 17:47">
    <span role="heading" aria-level="2">手把手 Flexbox——从零开始的奶奶级 Web 开发教程3</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/2014033/202506/2014033-20250615174538414-2071950207.png" alt="手把手 Flexbox——从零开始的奶奶级 Web 开发教程3" class="desc_img">
        本篇教程深入讲解Flexbox布局的核心概念，重点介绍弹性容器的三大关键属性：flex-grow（控制伸展比例）、flex-shrink（控制收缩比例）和flex-basis（设置基准尺寸）。通过生动示例演示了主轴与交叉轴的方向控制（flex-direction）、元素对齐方式（justify-content/align-items）以及自动换行（flex-wrap）的实现原理。教程采用"奶奶级"易懂方式，配合动态图示展示不同属性值的效果差异，为后续JavaScript学习打下CSS基础。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><a href="https://blog.samhou.top/coding-with-grandma-box-model/" target="_blank" rel="noopener nofollow">上一篇</a>讲了盒子模型，今天我们要涉及的主题是 Flexbox。</p>
<p>先来点顾名思义，Flex，折叠；box，盒子。可以折叠的盒子，也称作弹性盒子，就是可以根据可用的空间进行缩放的网页元素。</p>
<p>既然是盒子，那么肯定有容器，又有容器内部的元素。</p>
<p>那么具体怎么缩放呢？我们通过几个例子来看看 Flex 的基本用法……</p>
<h2 id="伸展收缩和基准">伸展、收缩和基准</h2>
<p>Flex 的缩放，影响的是容器内部的元素。</p>
<p>要用 Flex，首先得把容器设置为 Flex。</p>
<p>可以通过设置容器 <code>display: flex;</code> 轻易做到这一点。</p>
<p>好了，现在容器变成弹性盒子了，里面的元素会如何布局呢？</p>
<p>让我们看看下面的示例：</p>
<pre><code class="language-html">&lt;div class="container"&gt;
  &lt;div class="content"&gt;This is an item&lt;/div&gt;
  &lt;div class="content"&gt;This is an item&lt;/div&gt;
  &lt;div class="content"&gt;This is an item&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>我们还没有增加任何 CSS，这时候，网页元素按照上一篇里面说的正常布局流显示，也就是从上到下。</p>
<p><img src="https://img2024.cnblogs.com/blog/2014033/202506/2014033-20250615174400031-308772362.png" alt="正常布局" loading="lazy"></p>
<p>那么我们先把它变成弹性盒子试试：</p>
<pre><code class="language-css">.container{
  display: flex;
}
.content{
  border: 1px solid red;
}
</code></pre>
<p>是的，现在它们变成了横向堆叠。（方向的问题之后再解释）</p>
<p><img src="https://img2024.cnblogs.com/blog/2014033/202506/2014033-20250615174401282-1782235205.png" alt="横向堆叠" loading="lazy"></p>
<p>现在，我们尝试把可视范围压缩下，当横向没有空间时，会发生什么？</p>
<p><img src="https://img2024.cnblogs.com/blog/2014033/202506/2014033-20250615174401443-938536209.gif" alt="让我们折叠！" loading="lazy"></p>
<p>可以看到，当横向空间不足，整个元素自动横向收缩。由于字必须显示，因此换行到了第二行。只有一行只有一个单词的时候，才会溢出（因为不能截断单词）</p>
<p>这种行为由 <code>flex</code> 属性控制，它是以下三个属性的缩写：</p>
<ul>
<li>flex-grow（控制放大）</li>
<li>flex-shrink（控制收缩）</li>
<li>flex-basis（控制元素的基础大小）</li>
</ul>
<p>默认情况下，设置为 <code>flex: 0 1 auto</code></p>
<p>也就是说，上面的代码，与下面都是等效的。</p>
<pre><code class="language-css">.content{
  border: 1px solid red;
  flex: 0 1 auto;
}
/* 或者，和下面也是等效的 */
.content{
  border: 1px solid red;
  flex-grow: 0;
  flex-shrink: 1;
  flex-basis: auto;
}
</code></pre>
<p>我知道你很急，但你先别急。接下来我们就来看看这三个属性。</p>
<h3 id="flex-growshrink">flex-grow/shrink</h3>
<p>这个元素控制了元素是否伸展，以及不同元素之间的伸展比例。</p>
<p>试一试，把上面值从 0 改成 1。</p>
<p><img src="https://img2024.cnblogs.com/blog/2014033/202506/2014033-20250615174401280-1089202481.gif" alt="伸展的元素" loading="lazy"></p>
<p>发现了吗？现在，元素自动占满了整个空间。也就是说，设定为 0，就是不伸展，非 0，就是允许伸展。</p>
<p>为什么说<em>非 0</em> 呢？</p>
<p>因为这个数字表示比例。</p>
<p>也就是说，如果你给不同元素设定不同数字，那么它们就会按照不同的<strong>比例</strong>进行缩放。</p>
<p>比如……</p>
<pre><code class="language-css">.content1{
  flex-grow: 1;
}
.content2{
  flex-grow: 2;
}
.content3{
  flex-grow: 3;
}
</code></pre>
<p>自己试一试，你会发现它们按照 1：2：3 进行放大。</p>
<p>也就是说，设定为 100：100 和 1：1 的效果是<strong>完全一致</strong>的。</p>
<p>收缩也同理啦。0 不允许收缩。其它数字就是收缩比例。</p>
<h3 id="flex-basis">flex-basis</h3>
<p>你有没有发现，我们上面都在讨论<strong>缩放</strong>。</p>
<p>当我们谈到缩放时，是对原先就有的东西，进行缩小和放大。</p>
<p>而 flex-basis，就是定义这个“缩放基准”。默认情况下，会根据你的文字长度自动决定，也就是 auto。</p>
<p>现在我们先把放大关掉，然后尝试改变窗口大小：</p>
<pre><code class="language-css">.content{
  border: 1px solid red;
  flex: 0 1 200px;
}
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2014033/202506/2014033-20250615174401760-707683431.gif" alt="定义缩放基准" loading="lazy"></p>
<p>看到了吗？当达到 200px 的时候，不再放大，因为不允许放大。200px 为一个基准。</p>
<p><em>实际上，使用 width 也可以达到同样的效果。但是，flex-basis 的优先级更高，并且方向会随着 flex 方向改变。</em></p>
<p>下面，我们就来聊聊 flex 的方向。</p>
<h2 id="flex-的轴">flex 的轴</h2>
<p>看完了放缩，是时候看看 flex 布局元素的方向了！</p>
<p>flex 有两根轴，分别称作<em>主轴</em>和<em>交叉轴</em>。</p>
<p>在默认情况下，它们如下排列：</p>
<p><img src="https://img2024.cnblogs.com/blog/2014033/202506/2014033-20250615174401378-190709945.png" alt="水平堆叠示意图" loading="lazy"></p>
<p>元素沿着主轴堆叠。</p>
<p>但是，你也可以手动更改。</p>
<p>用到的属性是 <code>flex-direction</code>。写在容器里面。上面的默认值为 <code>row</code>。现在我们改成 <code>column</code> 试试。</p>
<pre><code class="language-css">.container{
  display: flex;
  flex-direction: column;
}
.content{
  border: 1px solid red;
}
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2014033/202506/2014033-20250615174401292-1034190885.png" alt="垂直堆叠" loading="lazy"></p>
<p>是的，它变成了垂直堆叠。</p>
<p>现在，变成这样：</p>
<p><img src="https://img2024.cnblogs.com/blog/2014033/202506/2014033-20250615174400290-1415422641.png" alt="垂直堆叠示意图" loading="lazy"></p>
<p>还记得上面我们提到的 flex-basis 吗？</p>
<p>它表示元素在主轴上面的基准，也就是说，如果再次加上上面的基准……</p>
<pre><code class="language-css">.content{
  border: 1px solid red;
  flex: 0 1 200px;
}
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2014033/202506/2014033-20250615174401097-943213051.png" alt="设置基准" loading="lazy"></p>
<p>没错，基准的方向是主轴！</p>
<p><strong>注意了，在设置为 column 时，即使 flex-grow 为 1，也不会自动放大占满屏幕哦。这是因为，你并没有指定容器的高度，因此不会自动拉长。</strong></p>
<p>你也许注意到了，上面的例子里面，水平方向是占满的。没错，水平方向是会自动占满屏幕的。这和 html 有关，元素默认就有宽度。</p>
<h2 id="调整元素布局">调整元素布局</h2>
<p>要想调整元素的布局，有 3 个重要属性，一定要记住。</p>
<h3 id="justify-content">justify-content</h3>
<p>这个属性，指定了容器该如何在主轴上面排列元素。</p>
<p>可选的常用值有：</p>
<ul>
<li>space-between，容器内子元素间均分空隙，但是元素和两边没有空隙</li>
<li>space-around，上面的+元素两边也有空隙</li>
<li>center，元素居中紧密排列</li>
<li>flex-start，元素排列在主轴开头</li>
<li>flex-end，元素排列在主轴末尾<br>
速通一下：</li>
</ul>
<pre><code class="language-css">.container1,.container2,.container3{
  display: flex;
  margin: 20px 0px;
}
.content{
  border: 1px solid red;
  flex: 0 1 100px;
}
.container1{
  justify-content: flex-end;
}
.container2{
  justify-content: space-between;
}
.container3{
  justify-content: space-around;
}
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2014033/202506/2014033-20250615174401474-1019841039.png" alt="示例" loading="lazy"></p>
<p>其它的几个，请自行探索~</p>
<p>另外注意，可以设置 gap 属性，控制元素间的距离哦。请自行尝试~</p>
<h3 id="align-item">align-item</h3>
<p>控制子元素在交叉轴上面的排列。</p>
<p>可选值：</p>
<ul>
<li>flex-start/end 同上</li>
<li>center 同上</li>
<li>stretch 拉伸占满空间</li>
</ul>
<p>再来个速通例子：</p>
<pre><code class="language-css">.container1,.container2,.container3{
  display: flex;
  margin: 20px 0px;
  justify-content: center;
}
.content{
  border: 1px solid red;
  flex: 0 1 100px;
}
.container1{
  align-items: flex-start;
}
.container2{
  align-items: center;
}
.container3{
  align-items: flex-end;
}
</code></pre>
<p>html 部分有所改动：</p>
<pre><code class="language-html">  &lt;div class="content" style="height: 50px;"&gt;This is an item&lt;/div&gt;
  &lt;div class="content" style="height: 30px;"&gt;This is an item&lt;/div&gt;
  &lt;div class="content" style="height: 20px;"&gt;This is an item&lt;/div&gt;
</code></pre>
<p>给加上了高度限定。</p>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/2014033/202506/2014033-20250615174401653-85951479.png" alt="align-items" loading="lazy"></p>
<p>很好理解，这里不再赘述。</p>
<p>最重要的是，这个 stretch。</p>
<p>去掉每个元素的死高度限制，改下代码：</p>
<pre><code class="language-css">.container1{
  display: flex;
  margin: 20px 0px;
  justify-content: center;
  align-items: stretch;
  height: 100px;
}
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2014033/202506/2014033-20250615174401682-997520572.png" alt="示例拉伸" loading="lazy"></p>
<p>看到了吗，它拉伸了。</p>
<p>另外，你也可以对于单个元素设置 align-self，改变它在交叉轴上的排列方式。这里不再演示，自己试试就好啦。</p>
<h3 id="自动换行">自动换行</h3>
<p>如果主轴上显示不下，你可以设置自动换行。自动换行会根据 flex-basis 进行计算。</p>
<p>设定 flex-warp 即可换行。</p>
<pre><code class="language-css">.container1{
  display: flex;
  margin: 20px 0px;
  justify-content: center;
  flex-wrap: wrap;
}
.content{
  border: 1px solid red;
  flex: 1 1 200px;
}
</code></pre>
<p>当元素达到 200px 时，换行标准满足，此时不再收缩，而是直接换行。直到换行仍然无法显示，再进行收缩。也就是说，flex-basis 像是一种建议，浏览器会尽力满足这种建议：</p>
<p><img src="https://img2024.cnblogs.com/blog/2014033/202506/2014033-20250615174401954-1050069008.gif" alt="自动换行" loading="lazy"></p>
<p>注意了，换行后，我们就存在了多根主轴。</p>
<p>既然 align-items 在交叉轴上对齐元素，那么主轴的对齐怎么办？</p>
<p>此时就有了新的属性。</p>
<h3 id="align-content">align-content</h3>
<p><s>排列组合</s></p>
<p>改下代码，指定一个容器高度：</p>
<pre><code class="language-css">.container1{
  display: flex;
  margin: 20px 0px;
  justify-content: center;
  align-items: center;
  flex-wrap: wrap;
  align-content: center;/* 把多个主轴在交叉轴上居中在容器内 */
  height: 200px;
}
</code></pre>
<p>换行后，效果是这样的（注意这个截图不完整，实际上是布局在 200px 正中间的）：</p>
<p><img src="https://img2024.cnblogs.com/blog/2014033/202506/2014033-20250615174401569-2135284611.png" alt="center" loading="lazy"></p>
<p>但是，如果我们改成 space-between。</p>
<p><img src="https://img2024.cnblogs.com/blog/2014033/202506/2014033-20250615174401527-1155200696.png" alt="space-between" loading="lazy"></p>
<p>是的，和前面两个的逻辑完全一样，只不过是改变了对象，涉及主轴的排列罢了。</p>
<p><img src="https://img2024.cnblogs.com/blog/2014033/202506/2014033-20250615174401578-1171641169.png" alt="直接上示意图！" loading="lazy"></p>
<h2 id="结语">结语</h2>
<p>flexbox 为我们的网页布局提供了非常多的可能性，允许我们创建可缩放的网页。搞清楚这些属性之后，flex 也就不难了。</p>
<p>基础 css 讲完了，下一篇我们将涉及 javascript，同样是简明易懂的奶奶级教程，敬请期待哦。</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文作者：<a href="https://www.cnblogs.com/samhou/" target="_blank">SamHou0</a>。原文链接：<a href="https://www.cnblogs.com/samhou/p/18929792/coding-with-grandma-flexbox" target="_blank">https://www.cnblogs.com/samhou/p/18929792/coding-with-grandma-flexbox</a></p>
<p>本文的所有发布平台：<a href="https://blog.samhou.top/about">About</a></p>
<p>本博客所有文章除特别声明外，均采用 CC BY-NC-ND 4.0 许可协议。转载请注明来源 SamHou's blog！</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-15 17:47">2025-06-15 17:47</span>&nbsp;
<a href="https://www.cnblogs.com/samhou">SamHou0</a>&nbsp;
阅读(<span id="post_view_count">3</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18929792);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18929792', targetLink: 'https://www.cnblogs.com/samhou/p/18929792/coding-with-grandma-flexbox', title: '手把手 Flexbox——从零开始的奶奶级 Web 开发教程3' })">举报</a>
</div>
        