
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/IwishIcould/p/18911585" title="发布于 2025-06-13 09:10">
    <span role="heading" aria-level="2">ResizeObserver和IntersectionObserver的详细讲解</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h4 id="resizeobserver-的介绍">ResizeObserver 的介绍</h4>
<p>ResizeObserver 用于异步观察元素的尺寸变化。<br>
如：SVG 元素或文本节点的大小变化、调整浏览器窗口大小、动态改变某个元素的大小时<br>
可以触发相应的回调处理逻辑。<br>
当这些目标的大小变化时，ResizeObserver 将会触发一个回调函数<br>
特别提醒：ResizeObserver 在初始观察元素时就会触发回调<br>
Resize 读音：/ˌriːˈsaɪ z/<br>
Observer 读音：/əbˈzɜː və(r)/</p>
<h4 id="resizeobserver的基本语法">ResizeObserver的基本语法</h4>
<pre><code>const target = document.getElementById('xx')
ResizeObserver.observe(target,{box: "content-box"})
</code></pre>
<p>target 表示需要观察的元素，必须填写<br>
box属性：指定监听的盒模型类型，可选值。包括有下面的值<br>
"content-box"（默认值）：监听内容区域尺寸变化<br>
"border-box"：监听包含边框和内边距的尺寸变化<br>
"device-pixel-content-box"：监听设备像素相关的尺寸变化（适用于高精度场景）</p>
<h4 id="resizeobserver的基本使用">ResizeObserver的基本使用</h4>
<p>1，首先获取需要被观察的元素<br>
2，创建实例对象，对象发生变化后需要处理的业务逻辑</p>
<pre><code>const ResizeObserver = new ResizeObserver((entriesArr)=&gt;{
    entriesArr.forEach(entry =&gt; {
      console.log('变化元素尺寸需要处理的业务逻辑:', entry.contentRect);
    });
   })
</code></pre>
<p>3，最后通过resizeObserver.observe(target) 进行进行观察</p>
<p>下面请看如何具体的使用</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Document&lt;/title&gt;
  &lt;style&gt;
    *{
      padding: 0;
      margin: 0;
    }
    #divElement{
      width: 100%;
      height: 40px;
      line-height: 40px;
      text-align: center;
      background-color: pink;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="divElement"&gt;我是一个元素&lt;/div&gt;
&lt;/body&gt;
&lt;script&gt;
// 获取需要被观察的元素(被观察的对象)
const divElement = document.getElementById('divElement')
// 创建一个观察器实例并传入回调函数
const resizeObserver = new ResizeObserver(entriesArr =&gt; {
  for (let entry of entriesArr) {
    console.log('Element:', entry.target);
    // 输出元素的宽度和高度
    console.log('New size:',entry.contentRect.width, 'x', entry.contentRect.height);
  }
});
// 观察一个指定的元素
resizeObserver.observe(divElement);
&lt;/script&gt;
&lt;/html&gt;
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1425695/202506/1425695-20250605093521519-1368258940.png" alt="" loading="lazy"></p>
<h4 id="resizeobserver-在初始观察元素时就会触发回调">ResizeObserver 在初始观察元素时就会触发回调？</h4>
<p>是的，在初始观察元素时。<br>
ResizeObserver 会立即执行一次回调，以提供元素的初始尺寸。<br>
这样设计的好处是:我们可以立即获取到元素的尺寸。</p>
<h4 id="resizeobserver如何一次性监听多个目标">ResizeObserver如何一次性监听多个目标</h4>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Document&lt;/title&gt;
  &lt;style&gt;
    *{
      padding: 0;
      margin: 0;
    }
    .box{
      display: flex;
    }
    .ele{
      width: 100%;
      height: 40px;
      line-height: 40px;
      text-align: center;
      background-color: pink;
      margin-left: 5px;
      margin-right: 5px;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div class="box"&gt;
    &lt;div class="ele"&gt;我是第1个元素&lt;/div&gt;
    &lt;div class="ele"&gt;我是第2个元素&lt;/div&gt;
    &lt;div class="ele"&gt;我是第3个元素&lt;/div&gt;
  &lt;/div&gt;
  &lt;button id="btn"&gt;停止观察&lt;/button&gt;
&lt;/body&gt;
&lt;script&gt;
const observer = new ResizeObserver(entriesArr =&gt; {
  // entriesArr 是一个数组，表示的是每一个被观察的元素
  console.log("entriesArr", entriesArr)
  entriesArr.forEach(item =&gt; {
    console.log(`元素尺寸：${item.contentRect.width} x ${item.contentRect.height}`);
  });
});
  // 监听多个元素
document.querySelectorAll('.ele').forEach(elem =&gt; {
  observer.observe(elem);
});

// 点击按钮后，会停止观察所有的元素
const btn=document.getElementById('btn')
btn.addEventListener('click',()=&gt;{
  observer.disconnect()
})
&lt;/script&gt;
&lt;/html&gt;
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1425695/202506/1425695-20250605111639380-1858958040.png" alt="" loading="lazy"></p>
<h4 id="停止观察特定的目标元素">停止观察特定的目标元素</h4>
<p>有些时候我们不需要在观察某个特定的目标<br>
此时，可以停止观察这个特定的目标，它对于性能优化有非常大的作用。<br>
语法：resizeObserver.unobserve("停止观察的元素");<br>
当我们缩放屏幕的时候，我们可以发现在控制台会有输出元素的宽高。<br>
<img src="https://img2024.cnblogs.com/blog/1425695/202506/1425695-20250605095208359-1952904178.png" alt="" loading="lazy"></p>
<p>当我们点击停止观察后，控制台不会在有输出，因为我们停止观察这个元素了。<br>
<img src="https://img2024.cnblogs.com/blog/1425695/202506/1425695-20250605095240401-722270720.png" alt="" loading="lazy"></p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Document&lt;/title&gt;
  &lt;style&gt;
    *{
      padding: 0;
      margin: 0;
    }
    #divElement{
      width: 100%;
      height: 40px;
      line-height: 40px;
      text-align: center;
      background-color: pink;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="divElement"&gt;我是一个元素&lt;/div&gt;
  &lt;button id="btn"&gt;停止观察&lt;/button&gt;
&lt;/body&gt;
&lt;script&gt;
// 获取需要被观察的元素(被观察的对象)
const divElement = document.getElementById('divElement')
// 创建一个观察器实例并传入回调函数
const resizeObserver = new ResizeObserver(entries =&gt; {
  for (let entry of entries) {
    console.log('Element:', entry.target);
    console.log('New size:',entry.contentRect.width, 'x', entry.contentRect.height);
  }
});
// 观察一个指定的元素
resizeObserver.observe(divElement);

// 点击按钮后，会停止观察这个元素
const btn=document.getElementById('btn')
btn.addEventListener('click',()=&gt;{
  resizeObserver.unobserve(divElement)
})
&lt;/script&gt;
&lt;/html&gt;
</code></pre>
<h4 id="disconnect-停止观察所有目标元素">disconnect 停止观察所有目标元素</h4>
<p>disconnect可以停止观察所有目标元素。<br>
效果与unobserve相同<br>
他们之间的区别是：disconnect 是停止所有的。<br>
unobserve是停止特定的某个元素</p>
<pre><code>...其他代码保持不变
// 点击按钮后，停止观察所有目标元素
const btn=document.getElementById('btn')
btn.addEventListener('click',()=&gt;{
  resizeObserver.disconnect()
})
</code></pre>
<h4 id="contentrect-的含义">contentRect 的含义</h4>
<p>细心的小伙伴发现了，我们在获取宽高的使用使用了 xxx.contentRect.width来获取。<br>
这个contentRect 是啥东西？<br>
其实：contentRect 是一个 DOMRectReadOnly 对象，包含以下只读属性<br>
width：元素内容区域的宽度（不含 padding/border）<br>
height：元素内容区域的高度<br>
x/y：内容区域相对于根元素（或视口）的坐标<br>
top/left/right/bottom：内容区域的边界位置</p>
<h4 id="低版本浏览器如何处理">低版本浏览器如何处理</h4>
<p>如果担心ResizeObserver的兼容性可使用resize-observer-polyfill这个插件<br>
首先： npm install resize-observer-polyfill --save-dev<br>
使用如下</p>
<pre><code>import ResizeObserver from 'resize-observer-polyfill';

const plugInObserver = new ResizeObserver((entriesArr, observer) =&gt; {
    for (const entry of entriesArr) {
      const { contentRect } = entry; // 这里使用了结构的哈
      console.log('Element resized:', contentRect);
    }
});
 
// 获取需要监听的DOM元素
const element = document.getElementById('yourElement');
plugInObserver.observe(element);
</code></pre>
<h4 id="用节流提升性能">用节流提升性能</h4>
<p>如果触发的很频繁的话，我们可以使用节流的方式来降低触发频率</p>
<pre><code>function throttle(func, delay) {
    let begin = 0;
    return function () {
        var cur = new Date().getTime();
        if (cur - begin &gt; delay) {
            func.apply(this, arguments)
            begin = cur
        }
    }
}

const myObserver = new ResizeObserver(throttle(entriesArr=&gt; {
  entriesArr.forEach(entry =&gt; {
    console.log('大小位置 contentRect', entry.contentRect)
    console.log('监听的DOM target', entry.target)
  })
}), 200)
</code></pre>
<h4 id="intersectionobserver的简单介绍">IntersectionObserver的简单介绍</h4>
<p>IntersectionObserver API是用来观察元素是否可见,通常被我们叫做：“交叉观察器”。<br>
和 ResizeObserver 一样，在初始观察元素时就会触发回调函数<br>
Intersection 读音：/ɪn tə ˈse k ʃn/ 十字路口，交叉，交点</p>
<h4 id="resizeobserver-的观察配置">ResizeObserver 的观察配置</h4>
<p>ResizeObserver 有3个非常重要的配置项。</p>
<pre><code>let options = {
  root: null, // 观察目标的上层元素。如：父级元素。爷爷元素。默认为视口。
  rootMargin: '0px', // 视口向外扩展的距离
  threshold: 0.1  // 观察对象与视口交叉的范围，取值[0,1]。0表示碰上。1表示要完全看见。
  // 0.1表示:目标元素与视口可见比例达到 10% 时触发回调
};
 
let watchObject = new IntersectionObserver(()=&gt;{
  console.log('触发时执行的回调函数')
}, options);
</code></pre>
<h4 id="rootmargin视口向外扩展的距离">rootMargin视口向外扩展的距离</h4>
<p><img src="https://img2024.cnblogs.com/blog/1425695/202506/1425695-20250611193227853-1290058379.png" alt="" loading="lazy"></p>
<h4 id="intersectionobserver的使用场景">IntersectionObserver的使用场景</h4>
<p>1，懒加载图片<br>
2，无限滚动加载<br>
3，展示加载动画<br>
下面我们就使用IntersectionObserver实现懒加载。<br>
让大伙更加熟悉这个api的实验</p>
<h4 id="停止观察">停止观察</h4>
<p>disconnect() 停止监视所有目标元素的可见性变化并销毁观察者。<br>
unobserve(targetElement) 停止观察指定的目标元素</p>
<h4 id="静态布局">静态布局</h4>
<p>静态页面，先写一下图片的布局。<br>
图片的src设置为空，真实的地址在自定义属性data-rsc中。</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Document&lt;/title&gt;
   &lt;style&gt;
    *{
      padding: 0;
      margin: 0;
    }
    .img-max-box{
      display: flex;
      flex-wrap: wrap;
      margin-top: 20px;
    }
    .img-container{
      width: 484px;
      margin-left: 20px;
      height: 300px;
      margin-bottom: 20px;
    }
    img{
     width: 100%;
     height: 100%;
    }
   &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div class="img-max-box"&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;script&gt;
&lt;/script&gt;
&lt;/html&gt;
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1425695/202506/1425695-20250611191217225-207939507.png" alt="" loading="lazy"></p>
<h4 id="使用intersectionobserver实现懒加载">使用IntersectionObserver实现懒加载</h4>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Document&lt;/title&gt;
   &lt;style&gt;
    *{
      padding: 0;
      margin: 0;
    }
    .img-max-box{
      display: flex;
      flex-wrap: wrap;
      margin-top: 20px;
    }
    .img-container{
      width: 484px;
      margin-left: 20px;
      height: 300px;
      margin-bottom: 20px;
    }
    img{
     width: 100%;
     height: 100%;
    }
   &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div class="img-max-box"&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://plus.unsplash.com/premium_photo-1666278379770-440439b08656?w=600&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.1.0&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8MXx8YW5pbWFsc3xlbnwwfHwwfHx8MA%3D%3D"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.unsplash.com/photo-1529778873920-4da4926a72c2?w=600&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.1.0&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8YW5pbWFsc3xlbnwwfHwwfHx8MA%3D%3D"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
    &lt;div class="img-container"&gt;
      &lt;img src="" data-src="https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg"/&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;script&gt;
  const watchObject = new IntersectionObserver((entriesArr)=&gt;{
    console.log('触发了这个函数', entriesArr);
    // entriesArr 是一个数组。里面是被观察的元素。目前我有20个图片。因此数组的长度为20
    entriesArr.forEach((entryItem)=&gt;{
      // entryItem 是一个对象。里面有isIntersecting属性。
      // 表示是否与视口交叉。true表示交叉了。 false表示没有交叉。
      if(entryItem.isIntersecting){
        console.log('交叉了');
        entryItem.target.src = entryItem.target.dataset.src;
        // 停止观察这个元素，因为这个元素已经获取到图片了
        watchObject.unobserve(entryItem.target);
      }
    })
  },{
    threshold: 0 // 观察对象与视口交叉的范围。取值[0,1],0表示碰上就会执行回调。1表示要完全看见。
  })

  const imgArr = document.querySelectorAll('img');
  imgArr.forEach((imgItem)=&gt;{
    // 开始进行观察
    watchObject.observe(imgItem);
  })
&lt;/script&gt;
&lt;/html&gt;
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1425695/202506/1425695-20250612134258181-1362565736.png" alt="" loading="lazy"></p>
<h4 id="intersectionratioisintersectingtargettime属性的详细讲解">intersectionRatio,isIntersecting,target，time属性的详细讲解</h4>
<p>intersectionRatio:number<br>
表示目标元素与根元素的交叉区域的比例，即交叉区域面积与目标元素总面积的比值。<br>
当目标元素完全可见时，值为1；完全不可见时，值为0。返回的是一个类型的值<br>
如果元素部分可见，则是一个介于0和1之间的值。</p>
<p>isIntersecting:boolean<br>
表示目标元素是否与根元素相交(交叉)。如果相交（即使交叉区域为零）则为true；否则为false。<br>
true: 当元素开始进入或仍在交叉区域<br>
false: 当元素完全离开交叉区域</p>
<p>target:Element<br>
表示：被观察的目标元素。<br>
用途: 在多个观察目标中识别当前触发的元素</p>
<p>time: number<br>
描述: 交叉状态变化的时间戳（从页面加载开始计算，单位：毫秒）<br>
用途：1,计算交叉事件的精确时间。2,性能分析（如计算元素进入视口的耗时）<br>
<img src="https://img2024.cnblogs.com/blog/1425695/202506/1425695-20250612152428786-360520073.png" alt="" loading="lazy"></p>
<h4 id="尾声">尾声</h4>
<p>今天周五啦，开心</p>

</div>
<div id="MySignature" role="contentinfo">
    <div style="width:818px;background:#f5f5f5; padding: 10px 10px 10px 10px; border: 1px dashed rgb(224, 224, 224); font-family: 微软雅黑; font-size: 13px;">
            <h1 style="font-size: 24px;"> 遇见问题，这是你成长的机会，如果你能够解决，这就是收获。 </h1>
		    <div style="padding:10px">
		        作者：<a href="https://www.cnblogs.com/IwishIcould/" target="_blank">晚来南风晚相识</a> <br>
		        出处：<a href="https://www.cnblogs.com/IwishIcould/">https://www.cnblogs.com/IwishIcould/</a> <br>
                        <p> 想问问题，打赏了卑微的博主，求求你备注一下的扣扣或者微信；这样我好联系你；(っ•̀ω•́)っ✎⁾⁾！</p>
		        <p>如果觉得这篇文章对你有小小的帮助的话，记得在右下角点个“推荐”哦，或者关注博主，在此感谢！</p>
		        <p> 万水千山总是情，打赏5毛买辣条行不行，所以如果你心情还比较高兴，也是可以扫码打赏博主(っ•̀ω•́)っ✎⁾⁾！</p>
                        <p> 想问问题，打赏了卑微的博主，求求你备注一下的扣扣或者微信；这样我好联系你；(っ•̀ω•́)っ✎⁾⁾！</p>
				<div style="display: flex;">
					<div style="margin-right: 100px;text-align: center;">
						<img src="//images.cnblogs.com/cnblogs_com/IwishIcould/1900124/t_201214043958支付宝收款码.jpg?a=1607924145179">
						<div>
							支付宝
						</div>
					</div>
					<div style="text-align: center;">
						<img src="//images.cnblogs.com/cnblogs_com/IwishIcould/1900124/t_20121604194271E6E296CCB71A007F4E22073D5EB64A.jpg">
						<div>微信</div>
					</div>
				</div>
		        本文版权归作者所有，欢迎转载，未经作者同意须保留此段声明，在文章页面明显位置给出原文连接 <br>
		        如果文中有什么错误，欢迎指出。以免更多的人被误导。 <br>
               
		    </div>
           
            
		</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-13 09:10">2025-06-13 09:10</span>&nbsp;
<a href="https://www.cnblogs.com/IwishIcould">南风晚来晚相识</a>&nbsp;
阅读(<span id="post_view_count">49</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18911585);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18911585', targetLink: 'https://www.cnblogs.com/IwishIcould/p/18911585', title: 'ResizeObserver和IntersectionObserver的详细讲解' })">举报</a>
</div>
        