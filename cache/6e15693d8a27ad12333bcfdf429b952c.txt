
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/samhou/p/18922690/coding-with-grandma-box-model" title="发布于 2025-06-10 20:11">
    <span role="heading" aria-level="2">手把手 CSS 盒子模型——从零开始的奶奶级 Web 开发教程2</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        这篇教程详细讲解了CSS盒子模型的基础知识，包括外边距、内边距和边框的概念，以及外边距重叠的规则。还介绍了两种盒子类型（content-box和border-box）的区别，以及行内元素、块元素和inline-block元素的布局特性。适合零基础学习者掌握CSS排版基础。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><a href="https://blog.samhou.top/coding-with-grandma-css-basic/" target="_blank" rel="noopener nofollow">上一篇</a>我们讨论了 CSS 基础，把基础 CSS 概念搞清楚了。这篇我们开始学习 CSS 排版。从最基本的盒子模型开始。</p>
<h2 id="盒式模型">盒式模型</h2>
<p>什么是盒式模型？</p>
<p>顾名思义，就是把元素看作盒子。</p>
<p>先来直观感受下，比如说这是我的博客网站，我们打开开发者工具，然后用 CSS 给每个元素加上 2px 的边框……</p>
<p><img src="https://img.samhou.top/1749528877390.png" alt="加点边框试试……" loading="lazy"></p>
<p>注意到了吗？开发者工具右下角出现了盒子模型。</p>
<p>从内到外，有三条……</p>
<ol>
<li><code>padding</code>，内边距，即元素内容和它的边框之间的距离</li>
<li><code>border</code>，边框，包裹在元素外部的框</li>
<li><code>margin</code>，外边距，即元素与它的母容器间的距离<br>
现在，我们来搞点简单示例代码看看。</li>
</ol>
<pre><code class="language-html">&lt;div class="container"&gt;
  &lt;p class="para"&gt;Readme&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-css">.container {
  background-color: red;
  margin: 50px;
  padding: 30px;
  border: 50px solid blue;
}
.para {
  background-color: white;
  color: green;
  margin: 50px;
}
</code></pre>
<p>结果是这样的：</p>
<p><img src="https://img.samhou.top/1749529648587.png" alt="Result" loading="lazy"></p>
<p>我们从外面到内部依次解释：</p>
<ul>
<li>由于设定了外边距大小，因此整个界面没有被填满，而是存在留白。可以看到，margin 50px，左右两边存在白色空白。</li>
<li>蓝色的部分是容器边框。容器边框设置为了 50px，蓝色。</li>
<li>红色部分，可以分成两部分。
<ol>
<li>外部容器的内边距。内边距设定为了 30px，因此将内容物向内推动 30px</li>
<li>内部 p 的外边距。由于内部设定了50px 的外边距，所以和外部容器内边距叠加</li>
</ol>
</li>
<li>白色部分，包括 p 元素的文本和边框（因为没有设定，所以看不见边框，为 0px）</li>
<li>绿色部分，即文本，是 p 的内容</li>
</ul>
<p>这部分可以自己搞点代码尝试一下，相信你很快明白了。</p>
<h2 id="外边距重叠问题">外边距重叠问题</h2>
<p>我们看看另外一个例子，如果我把上面的 html 复制一下，变成这样：</p>
<pre><code class="language-html">&lt;div class="container"&gt;
  &lt;p class="para"&gt;Readme&lt;/p&gt;
&lt;/div&gt;
&lt;div class="container"&gt;
  &lt;p class="para"&gt;Readme&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<p>那么，会是什么效果呢？</p>
<blockquote>
<p>这不简单~不就是两个东西复制一遍嘛，有什么问题吗？</p>
</blockquote>
<p>看起来确实如此：</p>
<p><img src="https://img.samhou.top/1749552947845.png" alt="效果图" loading="lazy"></p>
<p>但如果你观察比较仔细，你会发现，两个蓝色框之间的距离不太对劲。</p>
<p>回看下上面的 CSS：</p>
<pre><code class="language-css">margin: 50px;
</code></pre>
<p>我们确实对两个容器都设定了外边距对吧！？那么，实际应该是 50+50=100px 的间距，现在为什么间距和左右侧相同？</p>
<p>这里就涉及到一个重要的知识：<strong>外边距折叠 (Collapse)</strong></p>
<blockquote>
<p>区块的上下外边距有时会合并（折叠）为单个边距，其大小为两个边距中的最大值（或如果它们相等，则仅为其中一个），这种行为称为<strong>外边距折叠</strong>。</p>
</blockquote>
<p>说人话就是两个外边距撞了取更大的那一个。</p>
<p>但是还有个问题，如果边距为负，比如改一下两个容器的 CSS：</p>
<pre><code class="language-css">.container1 {
  background-color: red;
  margin: 50px;
  padding: 30px;
  border: 50px solid blue;
}
.container2{
  background-color: red;
  margin: -40px;
  padding: 30px;
  border: 50px solid blue;
}
</code></pre>
<p>这种情况下，<strong>负边距</strong>出现了，此时我们看看这条缝隙：</p>
<p><img src="https://img.samhou.top/1749553408630.png" alt="负边距" loading="lazy"></p>
<p>是的，它收缩了。当出现正负边距时，取值为<strong>正负相加</strong>，而非较大的那一个。</p>
<p>还有种更加特殊的情况，当出现<strong>双负边距</strong>时，取值为最小的负边距的值。</p>
<p>总结一下：</p>
<p><strong>符号相同时，取绝对值最大的一方。符号不同时，两个带着符号相加。</strong></p>
<h2 id="不同类型的盒子">不同类型的盒子</h2>
<p>接下来介绍两种不同的盒子。相信我，简单到不行。</p>
<p>盒子类型由 <code>box-sizing</code> 决定。顾名思义，盒子大小的计算方式。</p>
<p>默认的盒子模型叫 <code>content-box</code>，在这种情况下，宽高的设定应用于内容物。</p>
<p>而设定为 <code>border-box</code> 后，宽高的设定应用于边框。也就是说，宽度=内容物+两边内边距+两边边框宽度，高度同理。</p>
<p>我们看一个例子：</p>
<pre><code class="language-html">&lt;div class="default"&gt;This is a box with default sizing&lt;/div&gt;
&lt;div class="border"&gt;This is a box with border box.&lt;/div&gt;
</code></pre>
<pre><code class="language-css">div{
  background-color: blue;
  padding: 30px;
  margin: 20px;
  color: white;
  border: 10px solid red;
  width: 200px;
  height: 100px;
}
.default{
}
.border{
  box-sizing: border-box;
}
</code></pre>
<p>直接看图，一目了然。</p>
<p><img src="https://img.samhou.top/1749556126905.png" alt="看个图就一目了然了" loading="lazy"></p>
<h2 id="元素的布局">元素的布局</h2>
<p>好了，现在你已经知道盒子模型了，是时候来点不一样的了。</p>
<p>通常情况下，我们的元素都是按照 html 来布局的，遵循从上到下的原则。</p>
<p>但是有些时候可能打破这一规则。</p>
<p>display 就是其中一种。</p>
<h3 id="行内元素和块元素">行内元素和块元素</h3>
<p><em>注意：这两个概念有英语翻译过来，分别是  <code>inline</code> 和 <code>block</code>。是笔者自己翻译的，因为 MDN 的文档也没找到有相关翻译，你可能看到其它译名。</em></p>
<p>display 可以拥有两个属性 <code>inline</code> 和 <code>block</code>。</p>
<p>顾名思义，inline 元素就是在同一行里面的，block 则是一块，自动换行。</p>
<p>还是来点例子吧：</p>
<pre><code class="language-css">&lt;p&gt;This is an &lt;span style="display:block;border: 1px solid red;"&gt;apple with block&lt;/span&gt;. I don't like it.&lt;/p&gt;

&lt;p&gt;This is an &lt;span style="border: 1px solid red;"&gt;apple in the line&lt;/span&gt;. I like it.&lt;/p&gt;
</code></pre>
<p>提示：span 元素默认是行内元素。p 默认块元素。</p>
<p><img src="https://img.samhou.top/1749554424335.png" alt="Block/Inline" loading="lazy"></p>
<p>可以看到，块元素占满了整个行。</p>
<p>你可以自行上网查找那些元素默认行内。</p>
<h3 id="折中方案">折中方案？</h3>
<p>还有一种折中的方案，叫做 block-inline。话不多说直接上代码：</p>
<pre><code class="language-css">&lt;p&gt;This is an &lt;span style="display:block;border: 1px solid red;"&gt;apple with block&lt;/span&gt;. I don't like it.&lt;/p&gt;

&lt;p&gt;This is an &lt;span style="border: 1px solid red;padding:30px;"&gt;apple in the line&lt;/span&gt;. I like it. Wooooosh~~~ More characters here... NOOOOO it's overflowing!!!&lt;/p&gt;

&lt;p&gt;This is an &lt;span style="display:inline-block;border: 1px solid red;padding:30px;"&gt;apple with inline-block&lt;/span&gt;. I like it. Wooooosh~~~ More characters here... this time it's protected&lt;/p&gt;
</code></pre>
<p>这次特地缩小窗口且增加了字符数量，让我们看看效果：</p>
<p><img src="https://img.samhou.top/1749554942468.png" alt="inline-block" loading="lazy"></p>
<p>可以看到，当整个元素过大时，设定为行内会使元素溢出到其它行。如果设置成 <code>inline-block</code>，就可以自动推动其他行，<strong>确保该元素不会与其他行重叠</strong>。</p>
<h2 id="结语">结语</h2>
<p>盒子模型是基础排版的工具。这篇依旧是奶奶风格，手把手划重点，让我们再来梳理一下吧。</p>
<ul>
<li>盒子模型包括外边距、内边距和边框</li>
<li>外边距重叠时，符号相同取绝对值最大一个，否则直接加起来</li>
<li>box-sizing:border-box 允许你直接从边框设置盒子的大小</li>
<li>块元素相比于行内元素会换行，用行内元素时可以通过折中方案避免溢出</li>
</ul>
<p>下一篇是弹性盒子！同样是奶奶级哦！</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文作者：<a href="https://www.cnblogs.com/samhou/" target="_blank">SamHou0</a>。原文链接：<a href="https://www.cnblogs.com/samhou/p/18922690/coding-with-grandma-box-model" target="_blank">https://www.cnblogs.com/samhou/p/18922690/coding-with-grandma-box-model</a></p>
<p>本文的所有发布平台：<a href="https://blog.samhou.top/about">About</a></p>
<p>本博客所有文章除特别声明外，均采用 CC BY-NC-ND 4.0 许可协议。转载请注明来源 SamHou's blog！</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-10 20:12">2025-06-10 20:11</span>&nbsp;
<a href="https://www.cnblogs.com/samhou">SamHou0</a>&nbsp;
阅读(<span id="post_view_count">5</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18922690);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18922690', targetLink: 'https://www.cnblogs.com/samhou/p/18922690/coding-with-grandma-box-model', title: '手把手 CSS 盒子模型——从零开始的奶奶级 Web 开发教程2' })">举报</a>
</div>
        