
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zhaloe/p/18945155" title="发布于 2025-06-23 21:32">
    <span role="heading" aria-level="2">ArkUI-X案例解析</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>目前，已经有按照方案完成整体改造的4个Sample作为完整案例。</p>
<table>
<thead>
<tr>
<th style="text-align: left">应用描述</th>
<th style="text-align: left">链接</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left">鸿蒙世界</td>
<td style="text-align: left">HMOSWorld</td>
</tr>
<tr>
<td style="text-align: left">溪村小镇</td>
<td style="text-align: left">OxHornCampus</td>
</tr>
<tr>
<td style="text-align: left">音乐专辑</td>
<td style="text-align: left">MusicHome</td>
</tr>
<tr>
<td style="text-align: left">购物应用</td>
<td style="text-align: left">MultiShopping</td>
</tr>
</tbody>
</table>
<p>下面以实际改造过程中遇到的经典问题进行案例详解。</p>
<h2 id="products共性拆分products共性拆分">Products共性拆分Products共性拆分</h2>
<p>在拆分原工程products模块为两个hap时，将可以复用的代码进行抽象，存于features层main，被hap依赖使用。</p>
<p>首先识别可以复用的代码逻辑部分，以溪村小镇为例，应用启动页会轮播三张图片，而图片源的数据结构作为可复用部分，将其存放于features层main中。</p>
<p><img alt="" loading="lazy" data-src="https://raw.gitcode.com/arkui-x/docs/files/master/zh-cn/application-dev/tutorial/figures/ApplicationRetrofit_image_002.png" class="lazyload"></p>
<p>模块main 对外暴露 数据结构</p>
<pre><code class="language-typescript">// OxHornCampus\features\main\Index.ets

// 对外暴露数据源
export { splashImages } from './src/main/ets/viewmodel/SplashModel';
</code></pre>
<p>arkuix和harmonyos使用时添加对模块main的依赖，即可访问数据。</p>
<pre><code class="language-json5">// OxHornCampus\products\phone\arkuix\oh-package.json5
// harmonyos同理

{
  "name": "arkuix",
  "version": "1.0.0",
  "description": "Please describe the basic information.",
  "main": "",
  "author": "",
  "license": "",
  "dependencies": {
    "@ohos/utils": "file:../../../commons/utils",
    "@ohos/map": "file:../../../features/map",
    "@ohos/zones": "file:../../../features/zones",
    "@ohos/train": "file:../../../features/train",
    //添加模块依赖
    "@ohos/main": "file:../../../features/main", 
  }
}
</code></pre>
<h2 id="products差异性性拆分">Products差异性性拆分</h2>
<p>以鸿蒙世界为例，HarmonyOS Next设备上应用持有5个tab页，其中 tabs“溪村挑战赛” 使用了harmonyos的独有能力进行UI设计。由于无法通过Bridge实现跨平台改造，因此需要在Android/iOS平台部署时删除该tab页相关元素，同时相关数据结构等根据平台独立设计，分别存放于harmonyos.hap 和 arkuix.hap。</p>
<p>arkuix侧不存在“CHALLENGE”数据项。harmonyos侧存在“CHALLENGE”数据项。</p>
<p><img alt="" loading="lazy" data-src="https://raw.gitcode.com/arkui-x/docs/files/master/zh-cn/application-dev/tutorial/figures/ApplicationRetrofit_image_003.png" class="lazyload"></p>
<p>最终实现效果</p>
<p>harmonyos包展示效果，存在tab页“溪村挑战赛”<br>
<img alt="" loading="lazy" data-src="https://raw.gitcode.com/arkui-x/docs/files/master/zh-cn/application-dev/tutorial/figures/ApplicationRetrofit_image_004.jpg" class="lazyload"></p>
<p>arkuix包展示效果，没有tab页“溪村挑战赛”<br>
<img alt="" loading="lazy" data-src="https://raw.gitcode.com/arkui-x/docs/files/master/zh-cn/application-dev/tutorial/figures/ApplicationRetrofit_image_005.jpg" class="lazyload"></p>
<h2 id="使用支持跨平台的ui控件属性方法进行跨平台开发">使用支持跨平台的UI控件、属性、方法进行跨平台开发</h2>
<p>在音乐专辑中，当音乐播放时，播放控制栏的音乐图标会执行旋转动画，实际上HarmonyOS Next与Android/iOS使用了两套逻辑实现。</p>
<p>在HarmonyOS Next上。使用@ohos.graphics.displaySync (可变帧率)实现动画效果。</p>
<pre><code class="language-typescript">// DisplaySyncLocal.ets

import { displaySync } from '@kit.ArkGraphics2D';
import { DisplaySyncInterface } from '../Interface/DisplaySyncInterface';

export class DisplaySyncLocal implements DisplaySyncInterface {
  private static instance: DisplaySyncLocal;
  private backDisplaySyncSlow: displaySync.DisplaySync | undefined = undefined;

  public static getInstance(): DisplaySyncInterface {
    if (!DisplaySyncLocal.instance) {
      DisplaySyncLocal.instance = new DisplaySyncLocal();
    }
    return DisplaySyncLocal.instance;
  }

  public createAnimate(range: ExpectedFrameRateRange, frame: () =&gt; void): void {
    this.backDisplaySyncSlow = undefined;
    this.backDisplaySyncSlow = displaySync.create();
    this.backDisplaySyncSlow.setExpectedFrameRateRange(range);
    this.backDisplaySyncSlow.on('frame', frame);
  }

  public deleteAnimate(frame: () =&gt; void): void {
    if (this.backDisplaySyncSlow != undefined) {
      this.backDisplaySyncSlow?.off('frame', frame);
      this.backDisplaySyncSlow = undefined;
    }
  }

  public startAnimate(): void {
    if (this.backDisplaySyncSlow != undefined) {
      this.backDisplaySyncSlow?.start();
    }
  }

  public stopAnimate(): void {
    if (this.backDisplaySyncSlow != undefined) {
      this.backDisplaySyncSlow?.stop();
    }
  }
}
</code></pre>
<p>由于当前ArkUI-X框架未适配这套方法，在arkui-x侧实际上使用了@ohos.animator (动画)实现动画效果。</p>
<pre><code class="language-typescript">// DisplaySyncArkUIX.ets

import { Animator, AnimatorResult } from '@kit.ArkUI';
import { DisplaySyncInterface } from '../Interface/DisplaySyncInterface';

export class DisplaySyncArkUIX implements DisplaySyncInterface {
  private static instance: DisplaySyncArkUIX;
  private backAnimator: AnimatorResult | undefined = undefined;

  public static getInstance(): DisplaySyncInterface {
    if (!DisplaySyncArkUIX.instance) {
      DisplaySyncArkUIX.instance = new DisplaySyncArkUIX();
    }
    return DisplaySyncArkUIX.instance;
  }

  public createAnimate(range: ExpectedFrameRateRange, frame: () =&gt; void): void {
    this.backAnimator = undefined;
    this.backAnimator = Animator.create({
      duration: 5000,
      easing: "linear",
      delay: 0,
      fill: "forwards",
      direction: "normal",
      iterations: -1,
      begin: 0,
      end: 1
    })
    this.backAnimator.setExpectedFrameRateRange(range);
    this.backAnimator.onFrame = frame;
  }

  public deleteAnimate(frame: () =&gt; void): void {
    if (this.backAnimator != undefined) {
      this.backAnimator.cancel();
      this.backAnimator = undefined;
    }
  }

  public startAnimate(): void {
    if (this.backAnimator != undefined) {
      this.backAnimator.play();
    }
  }

  public stopAnimate(): void {
    if (this.backAnimator != undefined) {
      this.backAnimator.pause();
    }
  }
}
</code></pre>
<h2 id="关于deveco-studio编译时报错问题解决">关于DevEco Studio编译时报错问题解决</h2>
<p>问题现象：DevEco Studio编译hap时报错：“ xxx can't support crossplatform application. ”<br>
<img alt="" loading="lazy" data-src="https://raw.gitcode.com/arkui-x/docs/files/master/zh-cn/application-dev/tutorial/figures/ApplicationRetrofit_image_008.png" class="lazyload"></p>
<p>问题解析：由于使用了跨平台工程模版，DevEco Studio在进行静态编译检查时会检查跨平台标签“@crossplatform”。而在工程中会使用一些当前不支持跨平台的HarmonyOS 接口导致静态编译检查失败。</p>
<p>解决方法：</p>
<p>1.找到 IDE 里配套 OH-SDK；如果是HarmonyOS Next开发，则是HarmonyOS 里带的oh-sdk。</p>
<p>简便方法：前提需保证工程使用SDK为正确的。使用DevEco Studio打卡任一工程，在工程中打开并查看任一d.ts文件，于文件名右键点击--&gt;选择 打开范围--&gt;选择 Explorer 点击，打开的文件窗口即为当前工程所使用的SDK路径，于文件窗口回到SDK根目录执行第2步。<br>
<img alt="" loading="lazy" data-src="https://raw.gitcode.com/arkui-x/docs/files/master/zh-cn/application-dev/tutorial/figures/ApplicationRetrofit_image_009.png" class="lazyload"></p>
<p>2.找到文件：" api_check_util.js "。文件在SDK中的相对路径为：</p>
<pre><code class="language-plaintext">sdk\HarmonyOS-NEXT-DB1\openharmony\ets\build-tools\ets-loader\lib\fast_build\system_api\api_check_utils.js
</code></pre>
<p>3.在文件" api_check_util.js "中搜索关键字：CROSSPLATFORM_TAG_CHECK_ERROER，将其后边的 DiagnosticCategory.Error 修改为 DiagnosticCategory.Warning。</p>
<p>4.回到DevEco Studio 如果当前工程已编译过，先执行clean操作；之后执行操作： 点击文件--&gt;选择 清理缓存 点击--&gt; 勾选选项 --&gt; 点击清除并重新启动。<br>
<img alt="" loading="lazy" data-src="https://raw.gitcode.com/arkui-x/docs/files/master/zh-cn/application-dev/tutorial/figures/ApplicationRetrofit_image_010.png" class="lazyload"><br>
<img alt="" loading="lazy" data-src="https://raw.gitcode.com/arkui-x/docs/files/master/zh-cn/application-dev/tutorial/figures/ApplicationRetrofit_image_011.png" class="lazyload"></p>
<h2 id="约束与建议">约束与建议</h2>
<p>本方案是依据ArkUI-X框架来实现的，应首先符合ArkUI-X框架的规格要求.<br>
在应用UI方面存在的差异，是无法借助Bridge能力来弥补的。在此建议使用ArkUI-X框架中已经适配完毕的组件，这些组件功能相对稳定且较为全面。<br>
应用改造过程中可能涉及通过Bridge框架使用平台原生接口方法，使用时需满足相应的原生系统版本要求。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-23 21:33">2025-06-23 21:32</span>&nbsp;
<a href="https://www.cnblogs.com/zhaloe">龙儿筝</a>&nbsp;
阅读(<span id="post_view_count">11</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18945155);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18945155', targetLink: 'https://www.cnblogs.com/zhaloe/p/18945155', title: 'ArkUI-X案例解析' })">举报</a>
</div>
        