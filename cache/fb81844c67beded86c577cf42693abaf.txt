
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/51888888bond/p/18806944" title="发布于 2025-04-02 23:09">
    <span role="heading" aria-level="2">[T.4] 团队项目：团队代码管理准备</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<table>
<thead>
<tr>
<th>项目</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>这个作业属于哪个课程</td>
<td><a href="https://edu.cnblogs.com/campus/buaa/BUAA_SE_2025_LR" target="_blank">2025年春季软件工程（罗杰、任健）</a></td>
</tr>
<tr>
<td>这个作业的要求在哪里</td>
<td>[<a href="https://edu.cnblogs.com/campus/buaa/BUAA_SE_2025_LR/homework/13397" target="_blank">T.4] 团队项目：团队代码管理准备</a></td>
</tr>
<tr>
<td>我在这个课程的目标是</td>
<td>学习软件工程的方法论，强化成员团队合作能力，并通过实际开发产品进行实践</td>
</tr>
<tr>
<td>这个作业在哪个具体方面帮助我实现目标</td>
<td>团队熟悉git，为后续协作开发打好基础</td>
</tr>
</tbody>
</table>
<h2 id="团队的代码仓库地址">团队的代码仓库地址</h2>
<p><a href="https://github.com/Meng-XuanYu/JayJay-TeamVersionControl" target="_blank" rel="noopener nofollow">https://github.com/Meng-XuanYu/JayJay-TeamVersionControl</a></p>
<h2 id="团队完成-task-hotfix-后新建的代码仓库地址">团队完成 <strong>Task. HotFix!</strong> 后新建的代码仓库地址</h2>
<p><a href="https://github.com/Meng-XuanYu/final-cleaned" target="_blank" rel="noopener nofollow">GitHub - Meng-XuanYu/final-cleaned</a></p>
<h2 id="代码仓库的分支图示">代码仓库的分支图示</h2>
<p><img src="https://kcndrjeyd269.feishu.cn/space/api/box/stream/download/asynccode/?code=M2NhMWJjMWZiNDU5YjA3NTgzMTc0Nzc0NWFhMWI3OWVfaHFSbm5peTRUd3QwdG9iOHlmNmpoRGtqQ2ZNVk1OaFNfVG9rZW46SzI4V2J4VWZvb2I2UXJ4ZnlhZWN3cHA3bm1kXzE3NDM2MDY3NTQ6MTc0MzYxMDM1NF9WNA" alt="img" loading="lazy"><img src="https://kcndrjeyd269.feishu.cn/space/api/box/stream/download/asynccode/?code=MmNlNDE0MDhhZTIxZDNlYzc1OTM0ZGIwNmI2OWYwZGNfdjBTVEhEaDdORVZ0cFUxeHJSOTZ5cmR3VTMzNkZOVzNfVG9rZW46SmlUZ2JFYjFqb2xWT1d4Y0lmbmNzZWJsblViXzE3NDM2MDY3NTQ6MTc0MzYxMDM1NF9WNA" alt="img" loading="lazy"></p>
<h2 id="情况说明">情况说明</h2>
<p><strong>操作失误</strong></p>
<p>在进行Task.2的一次pr的时候，@孟烜宇 提出pr的时候误将dev分支合并到feature/emoji-2分支，虽然及时发现并且关闭了pr，但是@王怀阳 眼疾手快解决了冲突并允许了这次的pr，导致后续操作出现了一些问题。</p>
<p>发现问题之后，利用reset指令退回并完成了正确合并。</p>
<p><strong>message未规范</strong></p>
<p>一开始有些同学未阅读Commit Message的提交规范，后续均规范。</p>
<h2 id="团队安排">团队安排</h2>
<h3 id="devops-技术选型">DevOps 技术选型</h3>
<p>本团队基于初期开发测试及用户量较少的情况，选择腾讯云北京六区单台服务器（2核CPU/4GB内存/3Mbps带宽），搭配220GB SSD存储及包年计费，兼顾性能、成本与扩展性；团队通过飞书实现高效沟通（消息状态追踪、云端文档协作）和GitHub分支管理推进代码开发，并配置了GitHub Actions自动化CI/CD流程（main分支推送触发依赖安装与Django测试），确保低成本、高协同的技术架构支撑项目初期运行与迭代优化。</p>
<h3 id="团队代码管理">团队代码管理</h3>
<h4 id="代码审查与工作安排">代码审查与工作安排</h4>
<p>总的代码仓库管理由 PM @孟烜宇 负责，拟采用前后端分仓库进行管理开发的模式，同时部署到同一台服务器上，进行持续的部署与开发。 在代码审查方面，团队安排专人进行 Pull Request 的审查，解决潜在的代码冲突问题，具体安排为：</p>
<ul>
<li>前端 Pull Request 审查：@孟烜宇</li>
<li>后端 Pull Request 审查：@曹玮琳</li>
</ul>
<h4 id="分支规范">分支规范</h4>
<ol>
<li>main 分支 <code>线上在跑的版本</code>
<ol>
<li>提供给用户使用的<strong>正式版本</strong>和<strong>稳定版本</strong>；</li>
<li>🏷️ 所有<strong>版本发布</strong>和 <strong>Tag</strong> 操作都在这里进行；</li>
<li>❌ <strong>不允许</strong>开发者日常 push，只允许从 release 合并。</li>
</ol>
</li>
<li>release 分支 <code>将要上线的版本</code>
<ol>
<li>从 develop 分支检出，只用于发布前的确认；</li>
<li>允许从中分出 fix 分支，修复的 commit 需要 push 回 dev；</li>
<li>❌ <strong>不允许</strong>开发者日常 push，只允许从 dev 合并。</li>
</ol>
</li>
<li>dev 分支 <code>日常开发汇总</code>
<ol>
<li>开发者可以检出 feature 和 fix 分支，开发完成后 push 回 dev；</li>
<li>保证领先于 main；</li>
<li>❌ <strong>不允许</strong>开发者日常 push，只允许完成功能开发或 bug 修复后通过 pull request 进行合并。</li>
</ol>
</li>
<li>feature 分支
<ol>
<li>从 dev 分支检出，用于新功能开发；</li>
<li>命名为 <code>feature/name</code>，如 <code>feature/resume_generation</code>；</li>
<li>开发完毕，经过测试后合并到 dev 分支；</li>
<li>✅ 允许开发者日常 push.</li>
</ol>
</li>
<li>fix 分支
<ol>
<li>从 dev 或 release 分支检出，用于 bug 修复（feature 过程中的 bug 直接就地解决）；</li>
<li><strong>特殊情况下</strong>允许直接从 main 直接开 fix 分支进行修复；</li>
<li>命名为 <code>fix/issue_id</code>，如 <code>fix/2</code> ;</li>
<li>修复完毕，经过测试后合并到原来的分支（dev/release/main），<strong>并且保证同时合并到 dev</strong>;</li>
<li>✅ 允许开发者日常 push.</li>
</ol>
</li>
<li>chore 分支
<ol>
<li>从 dev 分支检出，用于各项修正，如重构、风格优化等；</li>
<li>命名为 <code>chore/name</code>，如 <code>chore/resume_generation</code>；</li>
<li>开发完毕，经过测试后合并到 dev 分支；</li>
<li>✅ 允许开发者日常 push.</li>
</ol>
</li>
</ol>
<h4 id="潜在风险与应对措施">潜在风险与应对措施</h4>
<h5 id="一代码冲突">（一）代码冲突</h5>
<p>提到风险，首当其冲的肯定是令人头疼的 conflict。在这次作业 Task 2 的合并任务中，同学们修改了同一文件的同一代码段，导致了 pr 时的冲突。解决方法是借助 git 的冲突解决功能，手动对比冲突部分代码，选择合适的代码保留。为减少这类问题的发生，我们制定了<strong>更加明确的开发规范</strong>，即：</p>
<ol>
<li>开发新的 feature 前，先 pull 下来最新代码，确保本地代码是最新状态，再检出相应的 feature 分支</li>
<li>分工合作时尽量避免同时修改同一文件的相同区域。如果实在不可避免，那么任务重合的同学们要做好沟通。</li>
<li>在完成自己的代码准备发起 pr时，及时 rebase 准备合并新的分支，方便审查的同学进行整合和 review 。</li>
</ol>
<h5 id="二敏感数据">（二）敏感数据</h5>
<p>打到这行已经很困很困的时候，将 API 密钥，个人信息等敏感内容误推送到仓库也是有可能的。在此情况下，采用这次作业中介绍的 git-filter-repo 这样的工具也只能作为最终手段，亡羊补牢。</p>
<p>要从根源上防控此类风险，关键还是在于在搭建仓库伊始将可能含有敏感信息的配置文件都写入 .gitignore ，开发的同学时刻保持细心以及审查的同学在 review 时仔细审核、及时止损。</p>
<h5 id="三数据丢失">（三）数据丢失</h5>
<p>虽然是小概率事件，但是不当的删除、故障的硬件、手滑的删库以及坏蛋的攻击都能导致数据丢失。因此，我们有必要对仓库做好<strong>备份</strong>，以及对 git history 进行适当的<strong>审计</strong>（此时，<strong>规范清晰的 commit message</strong> 就显得尤为重要），有备无患。</p>
<h5 id="四依赖管理">（四）依赖管理</h5>
<p>项目往往依赖大量的外部库、框架和工具，这些依赖项的版本问题、兼容性问题还有其他神奇的小 bug 都可能影响项目的正常运行。对于我们这一意向展开跨平台开发的组而言，更需要关注处理好依赖管理问题。为此需要我们记录好依赖项版本与其他信息；同时，也要做好充分的软件测试，模拟不同的运行场景；最后在引入新的包时进行适当的讨论，不要写到哪加到哪，保障好项目的稳定。</p>
<h2 id="心得体会">心得体会</h2>
<p>这次任务大家线下一起完成的，效率还算比较高。下面让我们来一起看看大家有什么心得吧。</p>
<p>这次Git任务也是教训满满，收获颇丰。</p>
<p>之前习惯用merge同步主分支更新，结果commit历史里全是类似"Merge branch 'main' into feature"的记录。这次尝试了rebase之后，才知道本地分支落后时还可以优雅的嫁接到主干上。</p>
<p>深切体会到分支命名规范不只是形式主义，不仅区分用处，还有关CI。</p>
<p>还有下次提PR不能手快了，一次推到熊助教的仓库（还好及时close），一次推反了（被小王同学秒pass对后续任务造成很大影响😭）</p>
<p>—— 超人强（孟烜宇）</p>
<p><code>git merge</code>能将一个分支的修改合并到当前分支。它可以简单直接地合并两个分支，同时也保留完整的开发历史。但缺点是可能会产生较多的合并提交，使提交历史变得复杂。</p>
<p><code>git rebase</code>也能用于整合分支，但它的原理是将当前分支的修改“移动”到目标分支的最新提交之后，重新构建提交历史。值得注意的是，<code>git rebase</code> 会改变提交的哈希值，导致代码出现冲突。所以在使用<code>git rebase</code>时，我们应尽量在自己的本地分支上操作，并在 push 到远程仓库之前进行。我们小组也定下了在 pr 前尽量用在自己本地分支上 git rebase 同步目标分支的约定。</p>
<p>但在上下游分支较为复杂的情况下，我还是会乖乖的<code>git clone</code>一个新的仓库进行手动的合并 😭</p>
<p>此外，对于情况说明中的春秋笔法，我实在不敢苟同。比之美其名曰“操作失误”，我更愿称之为“一次尝试”，或者“precious lesson”。我向来不惮以最大的恶意冷视予取予求的话语者。沉默啊，沉默呵！沉默由心意自雄，懒将嗔语付清风。意自雄兮思静逸，神守静兮懒得喷。</p>
<p>—— 菲菲公主（王怀阳）</p>
<p>我之前使用Git bash进行操作，导致分支变动等信息无法可视化，有些git操作理解起来略微困难，再加上我总找到种种借口不去系统学习Git，因此我对许多git操作都不理解。当遇到问题时，我只能删除本地仓库后重新克隆。但这次实践中，我在队友的帮助下使用VScode进行git操作，发现分支变动等信息都被可视化了，理解起来很方便，我也因此对git更熟悉了。</p>
<p>此外，关于团队如何使用版本管理系统进行协作，我有了更深的理解。每个分支都有其特定的功能和操作规范，每次commit信息要遵循特定的格式，每次分支合并要提出申请后由专门的审核人员进行操作......可以说，“如何协作”本身就是一门学问。</p>
<p>——小呆呆（卢裕轩）</p>
<p>最初接触Git是学习面向对象的时候，只需要add,commit,push和pull。后来是数据库的组队，虽然也是团队合作，但是没有使用到分支，而是两个人都向同一个分支做修改。这次的Git任务让我对于Git有了更新的认识，之前远远没有挖掘到Git的强大之处--分支。”Git 鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次“。我通过这次任务，将会深刻地改变以后的开发方式。以往我会比较抗拒使用分支，感觉一不小心就会把所有事情弄乱。而当我真正开始尝试使用分支，发现一开始的磕磕绊绊都是值得的。这会让团队开发更加高效。</p>
<p>除此之外，各种规范也让我感受很深。在一个严肃的开发任务中，bug的提交，commit message的格式，分支的命名都是有一个格式的。可能一开始大家不喜欢这种条条框框，但是随着项目的推进，这是让一切变得有条不紊的保障。这次任务真的可以说是收获满满。</p>
<p>——迷糊老师（周佳琪）</p>
<p>这次任务中主要是学习了与git分支相关的知识，涉及到git branch, git checkout, git pull, git merge, git rebase等指令。</p>
<p>我之前使用github管理项目时，虽然能暂存，提交，并push到时候仓库里去，但一涉及到多人协作（比如自己从仓库里直接动一下文件），就进入到知识盲区。</p>
<p>但通过这次任务，我意识到git真正的强大之处其实恰恰在于多人协作的方便。首先是git pull，其实相当于一次刷新操作，将当前分支中别人的改动更新过来。git rebase是换基操作，只要理解了rebase就可以理解这条指令，也就是将当前分支原本基于的“底座”换成新的“底座”，主要用于在上传自己的分支前同步别人对底座的更改，这对于同步并行开发来说非常重要。git branch可以查看分支，git checkout可以切换分支，-b则也可以创建分支。merge则用于在提出pr后真正将两个分支内容合并。这一套指令大致形成了一套同步并行开发的方案。</p>
<p>在实际任务中，我认真读了git rebase指令的介绍，并在团队做task2时，遇到了分支合并问题的时刻提出了自己的解决方案，也就是将每个人新创建的分支先rebase到dev分支，手动修改后保留他人信息后上传，并提出pr请求，由管理员审核后合并分支，与大家商讨后解决了问题。</p>
<p>——猪猪侠（曹玮琳）</p>
<p>在本次任务中学习了很多关于分支管理和冲突处理的知识，以前学习git由于是个人项目的管理，也没有涉及pull request方面的知识。在这次项目中，感谢同学们帮助了我让我了解到了对比git bash更方便的，对分支和commit更加可视化的VSCode工具，此外，附录中的分支规范和commit message规范也给我留下了深刻的印象，该在哪个分支开发，又该在哪个分支debug，哪个分支是只用来发布产品，还有commit message用的规范比起以往我随意的命名可以让队友简单直观的了解这次commit的功能。</p>
<p>此外，团队协作也包括了安全性的保障，比如说每次pr都需要团队的管理员进行审核，在分支合并时候解决冲突，或者是出了问题之后回退到哪个版本，这些都需要管理员来协调。总体而言，本次任务学到了很多关于分支的知识，收获很大。</p>
<p>——阿托士（尹祺霖）</p>
<p>分支管理和合并冲突：在多名成员同时修改同一文件时，产生了合并冲突。我们通过团队讨论和实际操作，学会了如何解决冲突，使用 git merge 和 git rebase 确保代码合并的正确性，尽量避免在主分支上直接操作。 协作流程和规范：除了使用 Git，我们还需要明确团队的协作流程和规范。每个成员需要遵守提交信息规范（如使用 feat、fix 等标签），并按照分支规范（如 feature、dev、release）进行操作。每个任务完成后都需要提交 Pull Request（PR）并进行代码审查。 软件操作理解：我们通过实践深入理解了 git merge 和 git rebase 的差异。git merge 会将两个分支的历史保留并合并，而 git rebase 会将分支的提交“重写”到目标分支的顶端，使历史更清晰，适合保持主分支整洁。 任务分配与责任：每个成员都需负责自己的任务，并且协同完成合并和修复工作。出现问题时需要及时沟通，避免错误影响整体进度。</p>
<p>——波比（王寅）</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.04589563876967592" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-02 23:14">2025-04-02 23:09</span>&nbsp;
<a href="https://www.cnblogs.com/51888888bond">杰杰Bond</a>&nbsp;
阅读(<span id="post_view_count">4</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18806944" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18806944);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18806944', targetLink: 'https://www.cnblogs.com/51888888bond/p/18806944', title: '[T.4] 团队项目：团队代码管理准备' })">举报</a>
</div>
        