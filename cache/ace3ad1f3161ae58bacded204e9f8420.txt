
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/timothy020/p/19042169" title="发布于 2025-08-16 15:17">
    <span role="heading" aria-level="2">Ubunutu终端配置</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="最终成果">最终成果</h2>
<p><img src="https://my-pic.miaops.sbs/2025/08/20250816004446.png" alt="image.png" loading="lazy"></p>
<p><img src="https://my-pic.miaops.sbs/2025/08/20250816002031.png" alt="image.png" loading="lazy"></p>
<h2 id="zshell">zshell</h2>
<h3 id="安装-zshell">安装 zshell</h3>
<pre><code class="language-shell">sudo apt update &amp;&amp; sudo apt install -y zsh git curl
zsh --version
which zsh
</code></pre>
<p>若命令输出如<code> /usr/bin/zsh</code>，说明安装成功并且可执行路径已就绪。</p>
<h3 id="设为默认终端">设为默认终端</h3>
<p>将 zsh 设为当前用户的默认登录 Shell，推荐用 chsh 并指向 zsh 的绝对路径。</p>
<pre><code class="language-shell">chsh -s $(which zsh)
</code></pre>
<p>注销后重新登录，或新开一个终端，确认默认 Shell：</p>
<pre><code class="language-shell">echo $SHELL
</code></pre>
<p>正常应看到 <code>/usr/bin/zsh</code> 或 <code>/bin/zsh</code>；若 chsh 报错或无效，检查 <code>/etc/shells</code> 是否包含 zsh 路径，必要时追加并重试。</p>
<h3 id="安装-oh-my-zsh">安装 oh-my-zsh</h3>
<p>Oh My Zsh 是 zsh 的配置框架，推荐使用官方安装脚本（可用 curl 或 wget），国内网络环境可用 install.ohmyz.sh 镜像地址<br>
使用 GitHub Raw：</p>
<pre><code class="language-shell">sh -c "$(curl -fsSL&nbsp;[https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"]
</code></pre>
<p>或使用镜像：</p>
<pre><code class="language-shell">sh -c "$(curl -fsSL&nbsp;[https://install.ohmyz.sh/)"
</code></pre>
<p>安装过程中脚本会建议切换默认 Shell 为 zsh，若之前已切换可直接确认继续；安装后会生成新的 <code>~/.zshrc</code>，并将旧文件备份为 <code>~/.zshrc.pre-oh-my-zsh</code>。<a href="https://github.com/ohmyzsh/ohmyzsh" target="_blank" rel="noopener nofollow"></a></p>
<h3 id="dracula-主题"><a href="https://draculatheme.com/zsh" target="_blank" rel="noopener nofollow">Dracula 主题</a></h3>
<pre><code class="language-shell"># 下载主题包
git clone https://github.com/dracula/zsh.git
# 进入下载的文件夹
cd zsh
# 设置主题
mv dracula.zsh-theme ~/.oh-my-zsh/themes
mv lib ~/.oh-my-zsh/themes/
# 使配置生效
source ~/.zshrc
</code></pre>
<blockquote>
<p>如果要完全统一，不仅要把 zshell 设置为 dracula 主题，最好也把终端模拟器（如 Windows Terminal，item 2，kitty 等）的主题也设置为 Dracula</p>
</blockquote>
<h2 id="安装-zsh-插件">安装 zsh 插件</h2>
<h3 id="autosuggestions"><a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="noopener nofollow">autosuggestions</a></h3>
<p>当我们输入命令过程中，可以预览历史命令，按 → 便可输出这些命令。</p>
<ol>
<li>克隆项目到本地&nbsp;<code>$ZSH_CUSTOM/plugins</code>&nbsp;&nbsp;路径下</li>
</ol>
<pre><code class="language-shell">git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
</code></pre>
<ol start="2">
<li>编辑 <code>~/.zshrc</code> 配置文件，添加到plugins列表中</li>
</ol>
<pre><code class="language-shell">plugins=(zsh-autosuggestion)
</code></pre>
<h3 id="autojump"><a href="https://github.com/wting/autojump" target="_blank" rel="noopener nofollow">autojump</a></h3>
<p>用 <code>j &lt;目录名&gt;</code> 的方式快速跳转到以前访问过的目录。</p>
<ol>
<li>克隆代码</li>
</ol>
<pre><code class="language-shell">git clone https://github.com/wting/autojump.git
</code></pre>
<ol start="2">
<li>安装</li>
</ol>
<pre><code class="language-shell">cd autojump
./install.py or ./uninstall.py
</code></pre>
<ol start="3">
<li>配置：编辑 <code>~/.zshrc</code> 配置文件，添加到plugins列表中</li>
</ol>
<pre><code class="language-shell">plugins=(autojump)
</code></pre>
<h3 id="-zsh-syntax-highlighting"><a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="noopener nofollow"> zsh-syntax-highlighting</a></h3>
<p>在 shell 中高亮语法。</p>
<ol>
<li>克隆代码</li>
</ol>
<pre><code class="language-shell">git clone https://github.com/zsh-users/zsh-syntax-highlighting ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
</code></pre>
<ol start="2">
<li>配置：编辑 <code>~/.zshrc</code> 配置文件，添加到plugins列表中</li>
</ol>
<pre><code class="language-shell">plugins=(zsh-syntax-highlighting)
</code></pre>
<h2 id="安装-nerdfront-字体">安装 NerdFront 字体</h2>
<p>访问 <a href="https://www.nerdfonts.com/font-downloads" target="_blank" rel="noopener nofollow">Nerd Fonts 网站</a>下载一个自己喜欢的字体。解压，然后点击安装每一个字形。<br>
<img src="https://my-pic.miaops.sbs/2025/08/3.png" alt="3.png" loading="lazy"></p>
<p>设置 Ubununtu 终端字体（其他终端软件同理）：</p>
<ul>
<li>点击右上角选项，打开<strong>Preference</strong></li>
<li>选择刚刚下载的字体，注意需要是<strong>Mono 后缀</strong>的（保证等宽，代码才能对齐）<br>
<img src="https://my-pic.miaops.sbs/2025/08/1.png" alt="1.png" loading="lazy"><br>
<img src="https://my-pic.miaops.sbs/2025/08/2.png" alt="2.png" loading="lazy"></li>
</ul>
<h2 id="安装--lsd">安装 <a href="https://github.com/lsd-rs/lsd" target="_blank" rel="noopener nofollow"> lsd</a></h2>
<p><code>lsd</code> 可以为 ls 命令中的不同类型文件或文件夹添加不同颜色, 并且使用对应的图标进行标识, 简洁直观。<br>
<img src="https://my-pic.miaops.sbs/2025/08/20250814003012.png" alt="image.png" loading="lazy"></p>
<ul>
<li>使用 apt 安装：如果找不到包，说明 ubuntu 版本不够，采用 cargo 安装。</li>
</ul>
<pre><code class="language-shell">sudo apt update &amp;&amp; sudo apt install -y lsd
</code></pre>
<ul>
<li>Cargo 安装</li>
</ul>
<pre><code class="language-shell"># 安装Cargo
[https://sh.rustup.rs](https://sh.rustup.rs/)&nbsp;-sSf | sh
# 添加环境变量
echo 'export PATH="$HOME/.cargo/bin:$PATH"' &gt;&gt; ~/.zshrc
source ~/.zshrc
# 安装lsd
cargo install lsd
</code></pre>
<p><code>lsd</code> 命令举例：</p>
<ul>
<li><code>lsd</code>: 最基础命令, 显示当前目录结构</li>
<li><code>lsd -l</code>: 以竖向列表显示当前目录结构</li>
<li><code>lsd -la</code>: 以竖向列表显示当前目录结构(含隐藏文件)</li>
<li><code>lsd --tree</code>: 以目录树格式显示当前目录结构</li>
</ul>
<blockquote>
<p>如果图标显示不出来，是因为没有安装 NerdFront 字体</p>
</blockquote>
<p>可以在 <code>.zshrc</code> 中添加别名：</p>
<pre><code class="language-shell">alias ls='lsd'
alias ll='lsd -al'
alias lt='lsd --tree'
</code></pre>
<h2 id="安装-homebrew">安装 homebrew</h2>
<p>很多时候用 apt 找不到的包，都可以用 homebrew 安装。</p>
<pre><code class="language-shell">sudo apt-get update
sudo apt-get install build-essential curl file git

/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' &gt;&gt; ~/.zshrc
source ~/.zshrc

brew --version
</code></pre>
<h2 id="安装-fzf">安装 <a href="https://github.com/junegunn/fzf" target="_blank" rel="noopener nofollow">fzf</a></h2>
<p>它是一个用于任何类型列表的交互式过滤程序；无论是文件、命令历史、进程、主机名、书签还是 Git 提交等。它实现了一种“模糊”匹配算法，因此您可以快速输入省略字符的模式，仍然获得想要的结果。</p>
<pre><code class="language-shell"># 下载源码
git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
# 安装
~/.fzf/install
</code></pre>
<p>然后重启 shell，就可以开始使用了，如果每次打开终端都要开启 fzf 的 shell 集成，还需要在 <code>~/.zshrc</code> 中添加下面一行代码。</p>
<pre><code class="language-shel">source &lt;(fzf --zsh)
</code></pre>
<p><strong>默认快捷键：</strong></p>
<ul>
<li><code>ctrl t</code> ：搜索当前目录</li>
<li><code>ctrl r</code> ：搜索历史</li>
<li><code>[搜索界面中]ctrl j</code> ：，下一个选项</li>
<li><code>[搜索界面中]ctrl k</code> ：上一个选项</li>
<li><code>[搜索界面中]tab</code> ：多选<br>
<strong>Shell 集成：</strong> 连续输入 <code>**</code> 后按下 tab 即可触发搜索。</li>
</ul>
<pre><code class="language-shell"># 搜索文件或目录
cd **&lt;TAB&gt;
vim **&lt;TAB&gt;
# 搜索进程
kill -9 **&lt;TAB&gt;
# 搜索主机名
ssh **&lt;TAB&gt;
telnet **&lt;TAB&gt;
# 搜索环境变量，别名
unset **&lt;TAB&gt;
export **&lt;TAB&gt;
unalias **&lt;TAB&gt;
</code></pre>
<p><strong>预览功能</strong>：fzf 提供了一些预览脚本，比如 <code>fzf --preview 'fzf-preview.sh {}</code> 可以实现预览当前目录的文件。<br>
<img src="https://my-pic.miaops.sbs/2025/08/20250815224305.png" alt="image.png" loading="lazy"></p>
<blockquote>
<p>如果要预览图片，需要安装终端图片预览工具。</p>
</blockquote>
<p><strong>添加预览命令的别名</strong>：在 <code>~/.zshrc</code> 中添加如下命令，之后执行 <code>source ~/.zshrc</code> 即可生效。</p>
<pre><code class="language-shell">alias fsfp="fzf --style full --preview 'fzf-preview.sh {}' --bind 'focus:transform-header:file --brief {}'"
</code></pre>
<h2 id="安装图片预览工具">安装图片预览工具</h2>
<p>你的 <code>fzf-preview.sh</code> 脚本需要调用这些工具来生成图片预览。你至少需要安装其中一个。</p>
<ul>
<li><strong><code>viu</code></strong>：一个比较通用的工具，兼容多种终端，但在不支持的终端上会用字符块（block characters）来近似显示。</li>
<li><strong><code>chafa</code></strong>：功能强大，支持多种协议，也可以用字符块显示，效果通常比&nbsp;<code>viu</code>&nbsp;好。</li>
<li><strong><code>icat</code></strong>：专门为&nbsp;<strong>Kitty</strong>&nbsp;终端设计，效果最好。</li>
<li><strong><code>imgcat</code></strong>：专门为&nbsp;<strong>iTerm2</strong>&nbsp;终端设计。</li>
</ul>
<pre><code class="language-shell"># 使用homebrew安装
brew install viu chafa
# 找一张图片测试
viu /path/to/your/image.jpg
# 或者
chafa /path/to/your/image.png
</code></pre>
<p><img src="https://my-pic.miaops.sbs/2025/08/20250815224737.png" alt="image.png" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.013888888888888888" data-date-updated="2025-08-16 15:37">2025-08-16 15:17</span>&nbsp;
<a href="https://www.cnblogs.com/timothy020">Miaops</a>&nbsp;
阅读(<span id="post_view_count">3</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19042169);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19042169', targetLink: 'https://www.cnblogs.com/timothy020/p/19042169', title: 'Ubunutu终端配置' })">举报</a>
</div>
        