
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18721879" title="发布于 2025-02-18 14:11">
    <span role="heading" aria-level="2">用 just 简化项目命令管理</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在软件开发过程中，高效管理项目命令是提升开发效率的关键，</p>
<p>它们可以帮助我们自动化重复的任务，简化项目管理流程，提高效率。</p>
<p>今天，我们来介绍一个名为 <code>just</code> 的任务运行器。</p>
<p>它由 Casey 发起，用 Rust 编写，旨在提供一个简单、高效且用户友好的任务管理解决方案。</p>
<p><code>just</code> 的设计理念是让任务运行变得轻量级且易于上手，同时避免了传统工具如 <code>Make</code> 的复杂性。</p>
<h1 id="1-安装">1. 安装</h1>
<p><code>just</code> 提供了多种安装方式，几乎涵盖了所有主流操作系统。</p>
<p>以下是几种常见的安装方法：</p>
<h2 id="11-使用-cargo-安装">1.1. 使用 Cargo 安装</h2>
<p>如果你已经安装了 <code>Rust</code>，可以通过 <code>Cargo</code> 安装 <code>just</code>:</p>
<pre><code class="language-bash">cargo install just
</code></pre>
<h2 id="12-使用-homebrew">1.2. 使用 Homebrew</h2>
<p>在 <code>macOS</code> 上，可以通过 <code>Homebrew</code> 安装 <code>just</code>：</p>
<pre><code class="language-bash">brew install just
</code></pre>
<h2 id="13-使用-scoop">1.3. 使用 Scoop</h2>
<p>对于 <code>Windows</code> 用户，<code>Scoop</code> 是一个方便的包管理器，可以通过以下命令安装 <code>just</code>：</p>
<pre><code class="language-bash">scoop install just
</code></pre>
<h2 id="14-使用预制二进制文件">1.4. 使用预制二进制文件</h2>
<p>如果你不想使用包管理器，也可以直接下载 <code>just</code> 的预制二进制文件。</p>
<p>访问 just 的 <a href="https://github.com/casey/just/releases" target="_blank" rel="noopener nofollow">GitHub Releases</a> 页面，选择适合你操作系统的版本并下载。</p>
<p>安装完成后，运行以下命令以确保 <code>just</code> 已正确安装：</p>
<pre><code class="language-bash">just --version
</code></pre>
<p>如果一切正常，你将看到 <code>just</code> 的版本信息。</p>
<h1 id="2-核心语法">2. 核心语法</h1>
<p><code>just</code>的核心是<code>justfile</code>文件，它类似于 <code>Make</code> 的 <code>Makefile</code>，用于定义任务和任务之间的依赖关系。</p>
<p><code>just</code>的语法简洁明了，易于上手。</p>
<p>下面总结了其语法中常用的部分，如果熟悉make工具的话，看着会觉得很熟悉。</p>
<h2 id="21-定义任务">2.1. 定义任务</h2>
<p>在<code>justfile</code>中，任务以名称开头，后跟冒号和任务的具体命令。</p>
<pre><code class="language-makefile">hello:
    echo "hello JUST"
</code></pre>
<p>运行任务时，只需在终端中输入   <code>just hello</code>，<code>just</code> 就会执行 <code>hello</code> 这个任务。</p>
<p><img src="https://img2024.cnblogs.com/blog/83005/202502/83005-20250218140952912-378215374.png" alt="" loading="lazy"></p>
<h2 id="22-任务依赖">2.2. 任务依赖</h2>
<p><code>just</code> 支持任务之间的依赖关系，可以通过在任务名称后添加依赖任务来实现。</p>
<pre><code class="language-makefile">build:
    echo "this is BUILD command"

release: build
    echo "start to RELEASE... ..."
</code></pre>
<p><code>release</code>任务依赖<code>build</code>任务，所以执行<code>release</code>任务是会自动先执行<code>build</code>任务。</p>
<p><img src="https://img2024.cnblogs.com/blog/83005/202502/83005-20250218140952911-1626634287.png" alt="" loading="lazy"></p>
<h2 id="23-参数和变量">2.3. 参数和变量</h2>
<p><code>just</code>支持任务参数和变量，这使得任务更加灵活。</p>
<pre><code class="language-makefile">build version:
    echo "BUILD for version: {{version}}"
</code></pre>
<p>给<code>build</code>任务添加一个参数<code>version</code>，这样可以指定要编译的版本。</p>
<p><img src="https://img2024.cnblogs.com/blog/83005/202502/83005-20250218140952912-334028678.png" alt="" loading="lazy"></p>
<h2 id="24-条件表达式">2.4. 条件表达式</h2>
<p><code>just</code>支持条件表达式，可以根据条件动态执行任务。</p>
<pre><code class="language-makefile">build version:
  echo {{ if version == "latest" { "使用【最新】的编译方式" } else { "使用【旧】的编译方式" } }}
</code></pre>
<p>根据<code>version</code>参数，选择不同的编译方式。</p>
<p><img src="https://img2024.cnblogs.com/blog/83005/202502/83005-20250218140952898-1573931846.png" alt="" loading="lazy"></p>
<h2 id="25-静默模式">2.5. 静默模式</h2>
<p>默认情况下，<code>just</code>会在执行命令前打印命令内容。</p>
<p>如果希望隐藏这些输出，可以在命令前加上<code>@</code>符号，比如上面的示例中，每个<code>echo</code>命令本身都被输出了出来。</p>
<p>比如在第一个示例中，我们在<code>echo</code>前面加一个<code>@</code>符号。</p>
<pre><code class="language-makefile">hello:
  @echo "hello JUST"
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202502/83005-20250218140952899-1783713841.png" alt="" loading="lazy"></p>
<p>这样就只输出内容，不会将命令本身输出出来了。</p>
<h2 id="26-错误处理">2.6. 错误处理</h2>
<p><code>just</code>会在命令失败时停止执行任务，这有助于避免错误的传播。</p>
<pre><code class="language-makefile">hello:
  echo "命令1"
  echo1 "错误的命令"
  echo "命令2"
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202502/83005-20250218140952908-1377322818.png" alt="" loading="lazy"></p>
<p><code>echo1</code> 这个命令是不存在的，执行到这一步的时候出现了错误，直接退出，不会执行下面的 **命令2 **了。</p>
<h1 id="3-与make的比较">3. 与make的比较</h1>
<p>与<code>just</code>最接近的工具就是<code>make</code>，但它们在设计理念和实现上有显著的区别。</p>
<table>
<thead>
<tr>
<th></th>
<th>just</th>
<th>make</th>
</tr>
</thead>
<tbody>
<tr>
<td>语法简洁性</td>
<td>简洁明了，易于理解和使用</td>
<td>较为复杂，尤其是对于新手来说，可能会感到困惑</td>
</tr>
<tr>
<td>跨平台支持</td>
<td>用 <code>Rust</code> 编写的，具有良好的跨平台支持</td>
<td>主要用于 <code>Unix-like</code> 系统，虽然也有 <code>Windows</code> 版本（如 <code>MinGW</code>），但使用起来可能会有一些兼容性问题</td>
</tr>
<tr>
<td>任务依赖管理</td>
<td>直观和灵活。它允许任务依赖于其他任务，并且可以动态地传递参数</td>
<td>基于文件的时间戳，对于复杂的任务依赖关系，可能需要更多的配置</td>
</tr>
<tr>
<td>错误处理</td>
<td>自动处理错误，如果某个命令失败，任务会立即停止执行</td>
<td>默认会继续执行后续任务，除非显式地指定<code>stop</code></td>
</tr>
<tr>
<td>输出友好性</td>
<td>输出友好，支持颜色化输出，并且在错误处理上更加用户友好</td>
<td>输出较为简单，可能需要额外的工具来美化输出</td>
</tr>
</tbody>
</table>
<h1 id="4-总结">4. 总结</h1>
<p><code>just</code> 是一个现代的任务运行器，它以简洁的语法、强大的功能和良好的跨平台支持，为开发者提供了一个高效的项目管理工具。</p>
<p>它不仅适用于构建和测试任务，还可以用于初始化开发环境、创建快捷命令等多种场景。</p>
<p>如果你正在寻找一个替代 <code>make</code> 的工具，<code>just</code> 绝对值得一试。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5059997416550925" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-18 14:11">2025-02-18 14:11</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">108</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18721879" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18721879);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18721879', targetLink: 'https://www.cnblogs.com/wang_yb/p/18721879', title: '用 just 简化项目命令管理' })">举报</a>
</div>
        