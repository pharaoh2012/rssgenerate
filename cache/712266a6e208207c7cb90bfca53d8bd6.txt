
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zhuweisky/p/19046370" title="发布于 2025-08-19 14:57">
    <span role="heading" aria-level="2">C#实现屏幕墙：同时监控多个电脑桌面（支持Windows、信创Linux、银河麒麟、统信UOS）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        最近有不少的客户提到了安防监控等场景，需要满足跨平台、高实时监控多个屏幕的需求，即类似于屏幕墙。于是，我用C#实现了一个屏幕墙Demo分享给大家。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p style="margin-top: 5px; margin-bottom: 5px; font-family: 微软雅黑; line-height: 1.5"><span style="line-height: 21px; font-family: &quot;Microsoft YaHei&quot;">　　最近有不少的客户提到了安防监控等场景，需要满足跨平台、高实时性的多个屏幕的监控需求，用户可在监控端实时查看多个被监控电脑屏幕的内容，即类似屏幕墙的需求。于是，我用C#实现了一个屏幕墙Demo分享给大家。</span></p>
<p style="margin-top: 5px; margin-bottom: 5px; font-family: 微软雅黑; line-height: 1.5"><span style="line-height: 21px; font-family: &quot;Microsoft YaHei&quot;">&nbsp; &nbsp; &nbsp; &nbsp;该Demo解决方案一共包括2个项目：服务端、PC客户端，</span><span style="font-family: &quot;Microsoft YaHei&quot;">都是基于.NET Core 3.1 。</span>&nbsp;</p>
<p>　　监控端运行时主界面如下所示：&nbsp;</p>
<p>　　<img src="https://img2024.cnblogs.com/blog/20404/202508/20404-20250815163421137-1889847721.png" alt="image" width="787" height="556" loading="lazy"></p>
<p style="margin-top: 5px; margin-bottom: 5px; font-family: 微软雅黑; line-height: 1.5">&nbsp;</p>
<p style="margin-top: 5px; margin-bottom: 5px; font-family: 微软雅黑; line-height: 1.5"><span style="font-family: &quot;Microsoft YaHei&quot;">　　Demo的主要功能如下：</span></p>
<p style="margin-top: 5px; margin-bottom: 5px; font-family: 微软雅黑; line-height: 1.5"><span style="font-family: &quot;Microsoft YaHei&quot;">（1）客户端登录时，可以选择登录身份：监控端、被监控端。</span></p>
<p style="margin-top: 5px; margin-bottom: 5px; font-family: 微软雅黑; line-height: 1.5"><span style="font-family: &quot;Microsoft YaHei&quot;">（2）服务端和客户端都可以运行在Windows、Linux 和 国产OS（如银河麒麟、统信UOS）上。</span></p>
<p style="margin-top: 5px; margin-bottom: 5px; font-family: 微软雅黑; line-height: 1.5"><span style="font-family: &quot;Microsoft YaHei&quot;">（3）被监控端以托管服务的方式运行。</span></p>
<p style="margin-top: 5px; margin-bottom: 5px; font-family: 微软雅黑; line-height: 1.5"><span style="font-family: &quot;Microsoft YaHei&quot;">（4）在监控端可以看到所有在线的被监控端的屏幕，并可选择每行显示的屏幕个数。</span></p>
<p style="margin-top: 5px; margin-bottom: 5px; font-family: 微软雅黑; line-height: 1.5"><span style="font-family: &quot;Microsoft YaHei&quot;">（5）在监控端，双击每个屏幕视图宫格，将浮出大窗口来显示目标屏幕图像。</span></p>
<p style="margin-top: 5px; margin-bottom: 5px; font-family: 微软雅黑; line-height: 1.5"><span style="line-height: 21px; font-family: &quot;Microsoft YaHei&quot;">&nbsp; &nbsp; &nbsp; &nbsp;接下来，我将给大家介绍整个功能的实现原理和代码逻辑，大家可以从文末下载源码后，对照源码再来看下面的介绍就会更清晰些。</span></p>
<h2>一.服务端实现　　<strong><br></strong></h2>
<p>&nbsp; &nbsp; &nbsp;首先，我们需要在一个公共的类库 VideoWall.Core 中，来定义客户端与服务端之间交互的消息类型：&nbsp;</p>
<div class="cnblogs_code">
<pre>    <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 自定义消息类型 InformationTypes
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> InformationType
    { 
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 获取所有被控端列表
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">int</span> GetAllTargetID = <span style="color: rgba(128, 0, 128, 1)">1001</span><span style="color: rgba(0, 0, 0, 1)">;

        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 被控端上线通知
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">int</span> TargetOnline = <span style="color: rgba(128, 0, 128, 1)">1002</span><span style="color: rgba(0, 0, 0, 1)">;

        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 被控端下线通知
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">int</span> TargetOffline = <span style="color: rgba(128, 0, 128, 1)">1003</span><span style="color: rgba(0, 0, 0, 1)">; 
    }</span></pre>
</div>
<p>&nbsp;　　然后，我们来编写服务端 VideoWall.Server 的代码，其主要是将被监控端的上下线通知给监控端，实现起来很简单，这里不做过多的介绍，其关键核心代码只有几句，就是创建&nbsp;OMCS&nbsp;多媒体服务器实例，预定用户上下线事件。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">创建多媒体服务器实例</span>
Program.MultimediaServer = <span style="color: rgba(0, 128, 128, 1)">MultimediaServerFactory</span>.CreateMultimediaServer(<span style="color: rgba(0, 0, 255, 1)">int</span>.Parse(<span style="color: rgba(0, 128, 128, 1)">ConfigurationManager</span>.AppSettings[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Port</span><span style="color: rgba(128, 0, 0, 1)">"</span>]), <span style="color: rgba(0, 0, 255, 1)">new</span> <span style="color: rgba(0, 128, 128, 1)">DefaultUserVerifier</span>(), <span style="color: rgba(0, 0, 255, 1)">bool</span>.Parse(<span style="color: rgba(0, 128, 128, 1)">ConfigurationManager</span>.AppSettings[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">SecurityLogEnabled</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]));
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">客户端上线通知</span>
MultimediaServer.UserConnected += <span style="color: rgba(0, 0, 255, 1)">new</span> ESBasic.<span style="color: rgba(0, 128, 128, 1)">CbGeneric</span>&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)">(multimediaServer_UserConnected);
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">客户端掉线通知</span>
MultimediaServer.UserDisconnected += <span style="color: rgba(0, 0, 255, 1)">new</span> ESBasic.<span style="color: rgba(0, 128, 128, 1)">CbGeneric</span>&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)">(multimediaServer_UserDisconnected);
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">收到来自客户端的自定义消息</span>
MultimediaServer.CustomizedMessageReceived += MultimediaServer_CustomizedMessageReceived</pre>
</div>
<p>　　服务端要处理的来自客户端的自定义消息，主要就是监控端上线时，请求所有在线的被控端列表：</p>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> MultimediaServer_CustomizedMessageReceived(<span style="color: rgba(0, 0, 255, 1)">string</span> userID, <span style="color: rgba(0, 0, 255, 1)">int</span> informationType, <span style="color: rgba(0, 0, 255, 1)">byte</span>[] bytes, <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> tag)
        { 
            </span><span style="color: rgba(0, 0, 255, 1)">if</span>(informationType ==<span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(0, 128, 128, 1)"> InformationType</span>.GetAllTargetID)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">byte</span>[] data =<span style="color: rgba(0, 0, 0, 1)"> Encoding.<span style="color: rgba(0, 128, 128, 1)">UTF8</span>.GetBytes(<span style="color: rgba(0, 128, 128, 1)">JsonConvert</span>.SerializeObject(TargetList));
                MultimediaServer.SendCustomizedMessage(userID, <span style="color: rgba(0, 128, 128, 1)">InformationType</span>.GetAllTargetID, data, </span><span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">);
            }
        }</span></pre>
</div>
<p>　　服务端运行界面如下所示：</p>
<p>　　<img src="https://img2024.cnblogs.com/blog/20404/202508/20404-20250815142600989-1935516798.png" alt="image" width="576" height="110" loading="lazy">　&nbsp;</p>
<h2>二.PC客户端实现</h2>
<p>　　客户端中我们也分为了2种身份：监控端、被监控端（本文使用监控端身份登录）。</p>
<p>　　<img src="https://img2024.cnblogs.com/blog/20404/202508/20404-20250815142830626-904518309.png" alt="image" width="311" height="156" loading="lazy"></p>
<p>&nbsp;　　我们在登录时，需要初始化 OMCS 的多媒体管理器 来连接服务端进行通信，其实也很简单，我们也只需要调用几句话就OK。&nbsp;</p>
<div class="cnblogs_code">
<pre> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">是否监控端账号</span>
 isMonitor =<span style="color: rgba(0, 0, 0, 1)"> monitor;
 </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">计算机名称</span>
 <span style="color: rgba(0, 0, 255, 1)">string</span> computerName =<span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(0, 128, 128, 1)"> Environment</span>.MachineName;
 </span><span style="color: rgba(0, 0, 255, 1)">string</span> token = isMonitor ?<span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(0, 128, 128, 1)"> GlobalConsts</span>.MonitorToken : <span style="color: rgba(0, 128, 128, 1)">GlobalConsts</span>.TargetToken;
 </span><span style="color: rgba(0, 0, 255, 1)">string</span> id = token +<span style="color: rgba(0, 0, 0, 1)"> computerName;
 </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">登录到OMCS服务器</span>
 <span style="color: rgba(0, 128, 128, 1)">IMultimediaManager</span> multimediaManager =<span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(0, 128, 128, 1)"> MultimediaManagerFactory</span>.GetSingleton();
 multimediaManager.Initialize(id, </span><span style="color: rgba(128, 0, 0, 1)">""</span>, <span style="color: rgba(0, 128, 128, 1)">ConfigurationManager</span>.AppSettings[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ServerIP</span><span style="color: rgba(128, 0, 0, 1)">"</span>], <span style="color: rgba(128, 0, 128, 1)">9900</span>);</pre>
</div>
<p>　　 为了简单起见，Demo中我们通过登录账号的前缀来区分监控端和被监控端：　　</p>
<div class="cnblogs_code">
<pre>   <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
   <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 全局常量
   </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
   <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> GlobalConsts
   {
       </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
       <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 监控方账号前缀
       </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
       <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">string</span> MonitorToken = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">#</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;

       </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
       <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 被监控方账号前缀
       </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
       <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">string</span> TargetToken = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">:</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
   }</span></pre>
</div>
<p>　　&nbsp;登录成功后，先获取所有被控端列表，然后通过CustomizedMessageReceived处理被监控端的上下线逻辑。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
<span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 获取所有被控端列表
</span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> GetAllTargetID()
{
    </span><span style="color: rgba(0, 0, 255, 1)">this</span>.multimediaManager.SendCustomizedMessage(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">_0</span><span style="color: rgba(128, 0, 0, 1)">"</span>, InformationType.GetAllTargetID, <span style="color: rgba(0, 0, 255, 1)">null</span>, <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">);
}</span></pre>
</div>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;服务端收到该请求后，会从内存拿到所有在线的被监控端的列表，然后也是通过InformationType.GetAllTargetID消息类型，将回复内容发送给请求端。这个过程已经在上面的服务端实现代码中介绍过了。</p>
<p>　　&nbsp; 接下来是客户端收到来自服务端的请求回复以及其它被监控端上下线的通知的处理过程。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
<span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 收到来自服务器或其它客户端的自定义消息
</span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span> 
<span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> MultimediaManager_CustomizedMessageReceived(<span style="color: rgba(0, 0, 255, 1)">string</span> userID, <span style="color: rgba(0, 0, 255, 1)">int</span> informationType, <span style="color: rgba(0, 0, 255, 1)">byte</span>[] bytes, <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> tag)
{
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (informationType ==<span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(0, 128, 128, 1)"> InformationType</span>.GetAllTargetID)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">string</span> str =<span style="color: rgba(0, 0, 0, 1)"> Encoding.UTF8.GetString(bytes);
        List</span>&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt; targetList = JsonConvert.DeserializeObject&lt;List&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;&gt;<span style="color: rgba(0, 0, 0, 1)">(str);
        </span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">string</span> targetID <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> targetList)
        {
            UserStatusChange(targetID, </span><span style="color: rgba(0, 0, 255, 1)">true</span>, <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
        }
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (informationType ==<span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(0, 128, 128, 1)"> InformationType</span>.TargetOnline)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">string</span> targetID =<span style="color: rgba(0, 0, 0, 1)"> Encoding.UTF8.GetString(bytes);
        UserStatusChange(targetID, </span><span style="color: rgba(0, 0, 255, 1)">true</span>, <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (informationType ==<span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(0, 128, 128, 1)"> InformationType</span>.TargetOffline)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">string</span> targetID =<span style="color: rgba(0, 0, 0, 1)"> Encoding.UTF8.GetString(bytes);
        UserStatusChange(targetID, online: </span><span style="color: rgba(0, 0, 255, 1)">false</span>,<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
    }
}</span></pre>
</div>
<p>　　UserStatusChange 方法的实现是关键，它控制着监控页面的宫格布局显示。</p>
<p>　　比如，当有被监控端上线时，监控端就会new一个桌面连接器DynamicDesktopConnector&nbsp;，来连接对方的桌面，这样就可以看到对方的屏幕图像了，具体代码如下所示：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">internal</span> <span style="color: rgba(0, 128, 128, 1)">DynamicDesktopConnector</span> AddConnector(<span style="color: rgba(0, 0, 255, 1)">string</span> destID,<span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)"> delayConnection)
{
    <span style="color: rgba(0, 128, 128, 1)">DynamicDesktopConnector</span> connector </span>=<span style="color: rgba(0, 0, 0, 1)"> desktopConnectorManager.Get(destID);
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (connector == <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        connector </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(0, 128, 128, 1)"> DynamicDesktopConnector</span>();
        connector.VideoDrawMode </span>=<span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(0, 128, 128, 1)"> VideoDrawMode</span>.Fill;       </span>
        connector.ConnectEnded +=<span style="color: rgba(0, 0, 0, 1)"> Connector_ConnectEnded;
        connector.Disconnected </span>+=<span style="color: rgba(0, 0, 0, 1)"> Connector_Disconnected;
        connector.NewFrameReceived </span>+=<span style="color: rgba(0, 0, 0, 1)"> Connector_NewFrameReceived;
        </span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.desktopConnectorManager.Add(destID, connector);
        Task.<span style="color: rgba(0, 128, 128, 1)">Factory</span>.StartNew(() </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> {
            </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (delayConnection)
            {
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">延时连接，避免对方设备管理器还未完成初始化</span>
                <span style="color: rgba(0, 128, 128, 1)">Thread</span>.Sleep(<span style="color: rgba(128, 0, 128, 1)">1000</span><span style="color: rgba(0, 0, 0, 1)">);
            }
            connector.<strong>BeginConnect</strong>(destID);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">开始连接目标桌面</span>
<span style="color: rgba(0, 0, 0, 1)">        });
    }
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> connector;
}</span></pre>
</div>
<p>　　同样的道理，当某个被监控端下线时，就会断开其对应的桌面连接器DynamicDesktopConnector，并且在UI上将其从容器中移除。具体代码请参见源码，这里就不赘述了。&nbsp;</p>
<p><strong style="font-size: 2em">三. 源码下载</strong></p>
<p>　　上面只是讲了几个重点，并不全面，大家下载下面的源码可以更深入的研究。</p>
<p>　&nbsp;&nbsp;&nbsp; 服务端与PC端源码：<a href="https://dl.oraycn.com/DownLoadFiles/OMCS/VideoWall.rar" target="_blank" rel="noopener nofollow">VideoWall.rar</a>　　</p>
<p>　　最后说明一下与性能相关的疑问：如果同时监控了很多台电脑的屏幕，那么运行监控端的电脑的CPU、内存、GPU，以及带宽能扛得住吗？</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;嗯，这是个很好的问题，<a href="https://www.oraycn.com/OMCS.aspx" target="_blank" rel="noopener nofollow">OMCS</a> 有个按需自动调整屏幕的输出分辨率的功能就可以完美地解决这一问题，即OMCS的Owner端可以根据观看方的窗口大小来自动调整输出的屏幕图像的分辨率，这将极大地节省CPU/GPU、内存和带宽资源。比如某个被监控端的显示器的分辨率是4K高清的（3840*2160），但是，其图像在监控端观看时，仅仅显示在一个640*360的宫格中，那么，被监控端会将4K图像等比缩放为640*360后，再编码压缩发送给监控端。</p>
<p>　　所有，有了这个功能作为基础，同时监控十数台电脑的屏幕都是可以的。如果被监控端的数目更多，我们还可以加上分页观看的功能。</p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-19 14:58">2025-08-19 14:57</span>&nbsp;
<a href="https://www.cnblogs.com/zhuweisky">zhuweisky</a>&nbsp;
阅读(<span id="post_view_count">951</span>)&nbsp;
评论(<span id="post_comment_count">8</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19046370);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19046370', targetLink: 'https://www.cnblogs.com/zhuweisky/p/19046370', title: 'C#实现屏幕墙：同时监控多个电脑桌面（支持Windows、信创Linux、银河麒麟、统信UOS）' })">举报</a>
</div>
        