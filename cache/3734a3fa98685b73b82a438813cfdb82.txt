
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/GuijiH6/p/18653215" title="发布于 2025-01-05 11:19">
    <span role="heading" aria-level="2">DVWA靶场Open HTTP Redirect (重定向) 漏洞所有级别通关教程及源码审计</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="open-http-redirect">Open HTTP Redirect</h1>
<p>HTTP 重定向（HTTP Redirect Attack）是一种网络，利用 HTTP 协议中的重定向机制，将用户引导至恶意网站或非法页面，进而进行钓鱼、恶意软件传播等恶意行为。攻击者通常通过操控重定向响应头或 URL 参数实现这种</p>
<p><strong>HTTP 重定向基本原理</strong></p>
<p>HTTP 重定向是一种用于通知客户端（如浏览器）请求的资源已被移动到另一个位置的机制，通常由服务器发送 3xx 系列状态码响应。常见的重定向状态码包括：</p>
<ul>
<li>
<p><strong>301 Moved Permanently</strong>：永久重定向，表示请求的资源已被永久移动到新的 URL。</p>
</li>
<li>
<p><strong>302 Found</strong>：临时重定向，表示请求的资源临时在另一个 URL 上。</p>
</li>
<li>
<p><strong>303 See Other</strong>：建议客户端使用 GET 方法获取资源。</p>
</li>
<li>
<p><strong>307 Temporary Redirect</strong>：临时重定向，保持请求方法不变。</p>
</li>
<li>
<p><strong>308 Permanent Redirect</strong>：永久重定向，保持请求方法不变。</p>
</li>
</ul>
<p><strong>HTTP 重定向方式</strong></p>
<p>HTTP 重定向主要利用了合法的重定向机制，通过各种方式将用户重定向到恶意网站。常见的方式包括：</p>
<ol>
<li><strong>开放重定向（Open Redirect）</strong>：</li>
</ol>
<ul>
<li>通过操控网站的 URL 参数，实现对重定向目标的控制。例如，合法网站的 URL 参数 <code>redirect=http://example.com</code> 被替换为 <code>redirect=http://malicious.com</code>，导致用户被重定向到恶意网站。</li>
</ul>
<ol>
<li><strong>钓鱼（Phishing）</strong>：</li>
</ol>
<ul>
<li>利用重定向将用户引导到伪装成合法网站的恶意网站，诱骗用户输入敏感信息（如登录凭证、银行账号）。</li>
</ul>
<ol>
<li><strong>恶意软件传播（Malware Distribution）</strong>：</li>
</ol>
<ul>
<li>通过重定向将用户引导到托管恶意软件的网站，诱骗用户下载和安装恶意软件。</li>
</ul>
<h2 id="low">low</h2>
<p>随便点击一个链接，发现url栏有传参点</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250101144208112.png" alt="" loading="lazy"></p>
<p>定位源码查看，发现重定向点</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250101144349298.png" alt="" loading="lazy"></p>
<p>修改为<strong>source/low.php?redirect=http://www.baidu.com</strong></p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250101144537481.png" alt="" loading="lazy"></p>
<p>成功跳转</p>
<h3 id="源码审计">源码审计</h3>
<p>没有存在过滤，不安全</p>
<pre><code class="language-php">&lt;?php
// 检查URL中是否存在'redirect'参数，并且该参数不为空。
if (array_key_exists("redirect", $_GET) &amp;&amp; $_GET['redirect'] != "") {
    // 如果存在'redirect'参数且不为空，则进行重定向到指定的路径。
    header("location: " . $_GET['redirect']);
    exit; // 终止脚本执行
}
// 如果'redirect'参数不存在或为空，则返回HTTP 500状态码并显示缺少重定向目标的错误信息。
http_response_code(500);
?&gt;
&lt;p&gt;Missing redirect target.&lt;/p&gt;
&lt;?php
exit; // 终止脚本执行
?&gt;
</code></pre>
<h2 id="medium">medium</h2>
<p>与<strong>low</strong>级别的方法没什么区别，查看源码可以发现不同的地方在于禁用了<strong>http://，https://</strong> 字段</p>
<p>构造url绕过 <strong>source/low.php?redirect=www.baidu.com</strong>，如果没有明确指定协议，直接以 <code>//</code> 开头，则表示使用和当前页面相同的协议，便可以绕过了</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250101144949520.png" alt="" loading="lazy"></p>
<h3 id="源码审计-1">源码审计</h3>
<p>利用正则表达式检查是否含有<strong>http:// https://</strong> 字段。如果有则过滤</p>
<pre><code class="language-php">&lt;?php
// 检查URL中是否存在'redirect'参数，并且该参数不为空。
if (array_key_exists("redirect", $_GET) &amp;&amp; $_GET['redirect'] != "") {
    // 使用正则表达式检查'redirect'参数是否包含不安全的绝对URL。
    if (preg_match("/http:\/\/|https:\/\//i", $_GET['redirect'])) {
        // 如果是绝对URL，则返回HTTP 500状态码，并显示错误信息。
        http_response_code(500);
        ?&gt;
        &lt;p&gt;Absolute URLs not allowed.&lt;/p&gt;
        &lt;?php
        exit; // 终止脚本执行
    } else {
        // 如果是相对路径，则进行重定向到指定的路径。
        header("location: " . $_GET['redirect']);
        exit; // 终止脚本执行
    }
}
// 如果'redirect'参数不存在，则返回HTTP 500状态码并显示缺少重定向目标的错误信息。
http_response_code(500);
?&gt;
&lt;p&gt;Missing redirect target.&lt;/p&gt;
&lt;?php
exit; // 终止脚本执行
?&gt;
</code></pre>
<h2 id="high">high</h2>
<p>查看源码可以发现与上面两个级别不同的是检查是否有<strong>info.php</strong>字段，如果没有，则不能进行重定向</p>
<p>构造代码绕过：source/low.php?redirect=http://www.baidu.com?id=info.php</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250101145317979.png" alt="" loading="lazy"></p>
<p>成功绕过</p>
<h3 id="源码审计-2">源码审计</h3>
<p>检查了url种是否含有<strong>info.php</strong>字段，如果没有则会过滤</p>
<pre><code class="language-php">&lt;?php
// 检查URL中是否存在'redirect'参数，并且该参数不为空。
if (array_key_exists("redirect", $_GET) &amp;&amp; $_GET['redirect'] != "") {
    // 检查'redirect'参数中是否包含"info.php"。
    if (strpos($_GET['redirect'], "info.php") !== false) {
        // 如果包含"info.php"，则进行重定向。
        header("location: " . $_GET['redirect']);
        exit; // 终止脚本执行
    } else {
        // 如果不包含"info.php"，返回HTTP 500状态码和错误信息。
        http_response_code(500);
        ?&gt;
        &lt;p&gt;You can only redirect to the info page.&lt;/p&gt;
        &lt;?php
        exit; // 终止脚本执行
    }
}
// 如果'redirect'参数不存在或为空，则返回HTTP 500状态码并显示缺少重定向目标的错误信息。
http_response_code(500);
?&gt;
&lt;p&gt;Missing redirect target.&lt;/p&gt;
&lt;?php
exit; // 终止脚本执行
?&gt;
</code></pre>
<h2 id="impossible">impossible</h2>
<h3 id="源码审计-3">源码审计</h3>
<p>采用了更加符合现实情况的方法，较为安全</p>
<pre><code class="language-php">&lt;?php
// 初始化目标URL为空字符串
$target = "";
// 检查URL中是否存在'redirect'参数，并且该参数是一个数字。
if (array_key_exists("redirect", $_GET) &amp;&amp; is_numeric($_GET['redirect'])) {
    // 根据'redirect'参数的整数值选择不同的重定向目标。
    switch (intval($_GET['redirect'])) {
        case 1:
            // 如果参数值为1，设置目标为"info.php?id=1"
            $target = "info.php?id=1";
            break;
        case 2:
            // 如果参数值为2，设置目标为"info.php?id=2"
            $target = "info.php?id=2";
            break;
        case 99:
            // 如果参数值为99，设置目标为"https://digi.ninja"
            $target = "https://digi.ninja";
            break;
    }
    // 如果目标URL已被设置，执行重定向。
    if ($target != "") {
        header("location: " . $target);
        exit; // 结束脚本执行
    } else {
        ?&gt;
        Unknown redirect target. &lt;!-- 输出未知重定向目标的错误信息 --&gt;
        &lt;?php
        exit; // 结束脚本执行
    }
}
?&gt;
Missing redirect target. &lt;!-- 输出缺少重定向目标的信息 --&gt;
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.04071564059143518" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-05 11:19">2025-01-05 11:19</span>&nbsp;
<a href="https://www.cnblogs.com/GuijiH6">H轨迹H</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18653215" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18653215);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18653215', targetLink: 'https://www.cnblogs.com/GuijiH6/p/18653215', title: 'DVWA靶场Open HTTP Redirect (重定向) 漏洞所有级别通关教程及源码审计' })">举报</a>
</div>
        