<!----> <meta itemprop="headline" content="纯前端也能实现 OCR？"> <meta itemprop="keywords" content="前端,后端,JavaScript"> <meta itemprop="datePublished" content="2025-01-15T06:01:10.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="子洋"> <meta itemprop="url" content="https://juejin.cn/user/1099167359835015"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-0faec0bc="">
            纯前端也能实现 OCR？
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-0faec0bc=""><div class="author-info-box" data-v-0faec0bc=""><div class="author-name" data-v-0faec0bc=""><a href="/user/1099167359835015/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-0faec0bc=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    子洋
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-0faec0bc=""><time datetime="2025-01-15T06:01:10.000Z" title="Wed Jan 15 2025 06:01:10 GMT+0000 (Coordinated Universal Time)" class="time" data-v-0faec0bc="">
                    2025-01-15
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-0faec0bc=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-0faec0bc=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-0faec0bc=""></circle></svg> <span class="views-count" data-v-0faec0bc="">
                    9,128
                  </span> <span class="read-time" data-v-0faec0bc=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-0faec0bc=""><rect width="16" height="16" fill="none" data-v-0faec0bc=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-0faec0bc=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-0faec0bc=""></path></svg>
                    阅读5分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-0faec0bc=""></div> <!----> <!----></div> <!----> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-0faec0bc=""><div class="article-viewer markdown-body cache result"><h2 data-id="heading-0">前言</h2>
<p>前端时间有一个 OCR 的需求，原本考虑调用现成的 OCR 接口，但由于只是做一个我个人使用的工具，花钱购买 OCR 接口显得有些奢侈。于是就想着找找是否有现成的库可以自己部署或直接使用，结果发现了一个可以在纯前端实现 OCR 的库——<strong>Tesseract.js</strong>。</p>
<h2 data-id="heading-1">Tesseract.js</h2>
<p><strong>Tesseract.js</strong> 是一个基于 Google Tesseract OCR 引擎的 JavaScript 库，利用 WebAssembly 技术将的 OCR 引擎带到了浏览器中。它完全运行在客户端，无需依赖服务器，适合处理中小型图片的文字识别。</p>
<h3 data-id="heading-2">主要特点</h3>
<ul>
<li><strong>多语言支持</strong>：支持多种语言文字识别，包括中文、英文、日文等。</li>
<li><strong>跨平台</strong>：支持浏览器和 Node.js 环境，灵活应用于不同场景。</li>
<li><strong>开箱即用</strong>：无需额外依赖后端服务，直接在前端实现 OCR 功能。</li>
<li><strong>自定义训练数据</strong>：支持加载自定义训练数据，提升特定场景下的识别准确率。</li>
</ul>
<h3 data-id="heading-3">安装</h3>
<h4 data-id="heading-4">通过 npm 安装</h4>
<pre><code class="hljs language-bash" lang="bash">npm install tesseract.js
</code></pre>
<h4 data-id="heading-5">通过 CDN 引入</h4>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://unpkg.com/tesseract.js@latest/dist/tesseract.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<h3 data-id="heading-6">基本使用</h3>
<p>以下示例展示了如何使用 Tesseract.js 从图片中提取文字：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Tesseract</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'tesseract.js'</span>;

<span class="hljs-title class_">Tesseract</span>.<span class="hljs-title function_">recognize</span>(
  <span class="hljs-string">'image.png'</span>, <span class="hljs-comment">// 图片路径</span>
  <span class="hljs-string">'chi_sim'</span>,   <span class="hljs-comment">// 识别语言（简体中文）</span>
  {
    <span class="hljs-attr">logger</span>: <span class="hljs-function"><span class="hljs-params">info</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(info), <span class="hljs-comment">// 实时输出进度日志</span>
  }
).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">{ data: { text } }</span>) =&gt;</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'识别结果:'</span>, text);
});
</code></pre>
<h4 data-id="heading-7">示例图片</h4>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/286a43814bb7467e9c5337691d5ec74a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5a2Q5rSL:q75.awebp?rk3s=f64ab15b&amp;x-expires=1743472452&amp;x-signature=lb2YEp8iL3OhpTzfEEiyUpEY6bI%3D" alt="" loading="lazy"></p>
<h4 data-id="heading-8">运行结果</h4>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/e5cd919b5d184d59aa65f7ba95871fbf~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5a2Q5rSL:q75.awebp?rk3s=f64ab15b&amp;x-expires=1743472452&amp;x-signature=0GyLB3P%2FW0g7GsvTZ6TeLo4E6Bg%3D" alt="" loading="lazy"></p>
<p>可以看到，虽然识别结果不完全准确，但整体准确率较高，能够满足大部分需求。</p>
<h3 data-id="heading-9">更多用法</h3>
<h4 data-id="heading-10">1. 多语言识别</h4>
<p>Tesseract.js 支持多语言识别，可以通过字符串或数组指定语言代码：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// 通过字符串的方式指定多语言</span>
<span class="hljs-title class_">Tesseract</span>.<span class="hljs-title function_">recognize</span>(<span class="hljs-string">'image.png'</span>, <span class="hljs-string">'eng+chi_sim'</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">{ data: { text } }</span>) =&gt;</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'识别结果:'</span>, text);
});

<span class="hljs-comment">// 通过数组的方式指定多语言</span>
<span class="hljs-title class_">Tesseract</span>.<span class="hljs-title function_">recognize</span>(<span class="hljs-string">'image.png'</span>, [<span class="hljs-string">'eng'</span>,<span class="hljs-string">'chi_sim'</span>]).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">{ data: { text } }</span>) =&gt;</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'识别结果:'</span>, text);
});
</code></pre>
<p><code>eng+chi_sim</code> 表示同时识别英文和简体中文。Tesseract.js 内部会将字符串通过 <code>split</code> 方法分割成数组：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">const</span> currentLangs = <span class="hljs-keyword">typeof</span> langs === <span class="hljs-string">'string'</span> ? langs.<span class="hljs-title function_">split</span>(<span class="hljs-string">'+'</span>) : langs;
</code></pre>
<h4 data-id="heading-11">2. 处理进度日志</h4>
<p>可以通过 <code>logger</code> 回调函数查看任务进度：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-title class_">Tesseract</span>.<span class="hljs-title function_">recognize</span>(<span class="hljs-string">'image.png'</span>, <span class="hljs-string">'eng'</span>, {
  <span class="hljs-attr">logger</span>: <span class="hljs-function"><span class="hljs-params">info</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(info.<span class="hljs-property">status</span>, info.<span class="hljs-property">progress</span>),
});
</code></pre>
<p>输出示例：</p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/37acd2040e3b4fa58cc60749666521cb~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5a2Q5rSL:q75.awebp?rk3s=f64ab15b&amp;x-expires=1743472452&amp;x-signature=TMdxCuGfUBoPB2oOFsyK4LjO6FQ%3D" alt="" loading="lazy"></p>
<h4 data-id="heading-12">3. 自定义训练数据</h4>
<p>如果需要识别特殊字符，可以加载自定义训练数据：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">const</span> worker = <span class="hljs-keyword">await</span> <span class="hljs-title function_">createWorker</span>(<span class="hljs-string">'语言文件名'</span>, <span class="hljs-variable constant_">OEM</span>.<span class="hljs-property">DEFAULT</span>, {
  <span class="hljs-attr">logger</span>: <span class="hljs-function"><span class="hljs-params">info</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(info.<span class="hljs-property">status</span>, info.<span class="hljs-property">progress</span>),
  <span class="hljs-attr">gzip</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 是否对来自远程的训练数据进行 gzip 压缩</span>
  <span class="hljs-attr">langPath</span>: <span class="hljs-string">'/path/to/lang-data'</span> <span class="hljs-comment">// 自定义训练数据路径</span>
});
</code></pre>
<blockquote>
<p>[!warning] 注意：</p>
<ol>
<li>第一个参数为加载自定义训练数据的文件名，不带后缀。</li>
<li>加载自定义训练数据的文件后缀名必须为 <code>.traineddata</code>。</li>
<li>如果文件名不是 <code>.traineddata.gzip</code>，则需要设置 <code>gzip</code> 为 <code>false</code>。</li>
</ol>
</blockquote>
<p><strong>举例</strong>：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">const</span> worker = <span class="hljs-keyword">await</span> <span class="hljs-title function_">createWorker</span>(<span class="hljs-string">'my-data'</span>, <span class="hljs-variable constant_">OEM</span>.<span class="hljs-property">DEFAULT</span>, {
  <span class="hljs-attr">logger</span>: <span class="hljs-function"><span class="hljs-params">info</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(info.<span class="hljs-property">status</span>, info.<span class="hljs-property">progress</span>),
  <span class="hljs-attr">gzip</span>: <span class="hljs-literal">false</span>,
  <span class="hljs-attr">langPath</span>: <span class="hljs-string">'http://localhost:5173/lang'</span>,
});
</code></pre>
<p><strong>加载效果</strong>：</p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/308179cf33b64106a935fa7cc10a7a3c~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5a2Q5rSL:q75.awebp?rk3s=f64ab15b&amp;x-expires=1743472452&amp;x-signature=HtLRINoK4TYHKMEaKvhu8aJ887Y%3D" alt="" loading="lazy"></p>
<h4 data-id="heading-13">4. 通过前端上传图片</h4>
<p>通常，图片是通过前端让用户上传后进行解析的。以下是一个简单的 Vue 3 示例：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { createWorker } <span class="hljs-keyword">from</span> <span class="hljs-string">'tesseract.js'</span>;

<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleUpload</span>(<span class="hljs-params">evt</span>) {
  <span class="hljs-keyword">const</span> files = evt.<span class="hljs-property">target</span>.<span class="hljs-property">files</span>;
  <span class="hljs-keyword">const</span> worker = <span class="hljs-keyword">await</span> <span class="hljs-title function_">createWorker</span>(<span class="hljs-string">"chi_sim"</span>);
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; files.<span class="hljs-property">length</span>; i++) {
    <span class="hljs-keyword">const</span> ret = <span class="hljs-keyword">await</span> worker.<span class="hljs-title function_">recognize</span>(files[i]);
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret.<span class="hljs-property">data</span>.<span class="hljs-property">text</span>);
  } 
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">"handleUpload"</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
</code></pre>
<h2 data-id="heading-14">完整示例</h2>
<p>下面提供一个简单的 OCR 示例，展示了如何在前端实现图片上传、文字识别以及图像处理。</p>
<h4 data-id="heading-15">代码</h4>
<pre><code class="hljs language-html" lang="html"><span class="hljs-comment">&lt;!--
 * @Author: zi.yang
 * @Date: 2024-12-10 09:15:22
 * @LastEditors: zi.yang
 * @LastEditTime: 2025-01-14 08:06:25
 * @Description: 使用 tesseract.js 实现 OCR
 * @FilePath: /vue-app/src/components/HelloWorld.vue
--&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;
<span class="hljs-keyword">import</span> { createWorker, <span class="hljs-variable constant_">OEM</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'tesseract.js'</span>;

<span class="hljs-keyword">const</span> uploadFileName = ref&lt;string&gt;(<span class="hljs-string">""</span>);
<span class="hljs-keyword">const</span> imgText = ref&lt;string&gt;(<span class="hljs-string">""</span>);

<span class="hljs-keyword">const</span> imgInput = ref&lt;string&gt;(<span class="hljs-string">""</span>);
<span class="hljs-keyword">const</span> imgOriginal = ref&lt;string&gt;(<span class="hljs-string">""</span>);
<span class="hljs-keyword">const</span> imgGrey = ref&lt;string&gt;(<span class="hljs-string">""</span>);
<span class="hljs-keyword">const</span> imgBinary = ref&lt;string&gt;(<span class="hljs-string">""</span>);

<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleUpload</span>(<span class="hljs-params">evt: any</span>) {
  <span class="hljs-keyword">const</span> file = evt.<span class="hljs-property">target</span>.<span class="hljs-property">files</span>?.[<span class="hljs-number">0</span>];
  <span class="hljs-keyword">if</span> (!file) <span class="hljs-keyword">return</span>;
  uploadFileName.<span class="hljs-property">value</span> = file.<span class="hljs-property">name</span>;
  imgInput.<span class="hljs-property">value</span> = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(file);
  <span class="hljs-keyword">const</span> worker = <span class="hljs-keyword">await</span> <span class="hljs-title function_">createWorker</span>(<span class="hljs-string">"chi_sim"</span>, <span class="hljs-variable constant_">OEM</span>.<span class="hljs-property">DEFAULT</span>, {
    <span class="hljs-attr">logger</span>: <span class="hljs-function"><span class="hljs-params">info</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(info.<span class="hljs-property">status</span>, info.<span class="hljs-property">progress</span>),
  });
  <span class="hljs-keyword">const</span> ret = <span class="hljs-keyword">await</span> worker.<span class="hljs-title function_">recognize</span>(file, { <span class="hljs-attr">rotateAuto</span>: <span class="hljs-literal">true</span> }, { <span class="hljs-attr">imageColor</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">imageGrey</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">imageBinary</span>: <span class="hljs-literal">true</span> });
  imgText.<span class="hljs-property">value</span> = ret.<span class="hljs-property">data</span>.<span class="hljs-property">text</span> || <span class="hljs-string">''</span>;
  imgOriginal.<span class="hljs-property">value</span> = ret.<span class="hljs-property">data</span>.<span class="hljs-property">imageColor</span> || <span class="hljs-string">''</span>;
  imgGrey.<span class="hljs-property">value</span> = ret.<span class="hljs-property">data</span>.<span class="hljs-property">imageGrey</span> || <span class="hljs-string">''</span>;
  imgBinary.<span class="hljs-property">value</span> = ret.<span class="hljs-property">data</span>.<span class="hljs-property">imageBinary</span> || <span class="hljs-string">''</span>;
}

<span class="hljs-comment">// 占位符 svg</span>
<span class="hljs-keyword">const</span> svgIcon = <span class="hljs-built_in">encodeURIComponent</span>(<span class="hljs-string">'&lt;svg t="1736901745913" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="4323" width="140" height="140"&gt;&lt;path d="M804.9 243.4c8.1 0 17.1 10.5 17.1 24.5v390.9c0 14-9.1 24.5-17.3 24.5H219.3c-8 0-17.3-10.7-17.3-24.5V267.9c0-14 9.1-24.5 17.3-24.5h585.6m0-80H219.3c-53.5 0-97.3 47-97.3 104.5v390.9c0 57.3 43.8 104.5 97.3 104.5h585.4c53.5 0 97.3-47 97.3-104.5V267.9c0-57.5-43.7-104.5-97.1-104.5z" fill="#5E9EFC" p-id="4324"&gt;&lt;/path&gt;&lt;path d="M678.9 294.5c28 0 50.6 22.7 50.6 50.6 0 28-22.7 50.6-50.6 50.6s-50.6-22.7-50.6-50.6c0-28 22.7-50.6 50.6-50.6z m-376 317.6l101.4-215.7c6-12.8 24.2-12.8 30.2 0l101.4 215.7c5.2 11-2.8 23.8-15.1 23.8H318c-12.2 0-20.3-12.7-15.1-23.8z" fill="#5E9EFC" p-id="4325"&gt;&lt;/path&gt;&lt;path d="M492.4 617L573 445.7c4.8-10.1 19.2-10.1 24 0L677.6 617c4.1 8.8-2.3 18.9-12 18.9H504.4c-9.7 0-16.1-10.1-12-18.9z" fill="#5E9EFC" opacity=".5" p-id="4326"&gt;&lt;/path&gt;&lt;/svg&gt;'</span>);
<span class="hljs-keyword">const</span> placeholder = <span class="hljs-string">'data:image/svg+xml,'</span> + svgIcon;
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"custom-file-upload"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"file-upload"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"custom-label"</span>&gt;</span>选择文件<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"file-name"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"file-name"</span>&gt;</span>{{ uploadFileName || '未选择文件' }}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"file-upload"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">"handleUpload"</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"column"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>输入图像<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"原图"</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"imgInput || placeholder"</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"column"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>旋转，原色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"原色"</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"imgOriginal || placeholder"</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"column"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>旋转，灰度化<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"灰度化"</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"imgGrey || placeholder"</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"column"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>旋转，二值化<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"二进制"</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"imgBinary || placeholder"</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"result"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>识别结果<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{ imgText || '暂无结果' }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css">
<span class="hljs-comment">/* 隐藏原生文件上传按钮 */</span>
<span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">"file"</span>]</span> {
  <span class="hljs-attribute">display</span>: none;
}

<span class="hljs-comment">/* 自定义样式 */</span>
<span class="hljs-selector-class">.custom-file-upload</span> {
  <span class="hljs-attribute">display</span>: inline-block;
  <span class="hljs-attribute">cursor</span>: pointer;
  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">30px</span>;
}

<span class="hljs-selector-class">.custom-label</span> {
  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span>;
  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;
  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#007bff</span>;
  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;
  <span class="hljs-attribute">display</span>: inline-block;
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;
  <span class="hljs-attribute">cursor</span>: pointer;
}

<span class="hljs-selector-class">.custom-label</span><span class="hljs-selector-pseudo">:hover</span> {
  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0056b3</span>;
}

<span class="hljs-selector-class">.file-name</span> {
  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">10px</span>;
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;
  <span class="hljs-attribute">color</span>: <span class="hljs-number">#555</span>;
}

<span class="hljs-selector-class">.row</span> {
  <span class="hljs-attribute">display</span>: flex;
  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;
  <span class="hljs-attribute">justify-content</span>: space-around;
}

<span class="hljs-selector-class">.column</span> {
  <span class="hljs-attribute">width</span>: <span class="hljs-number">24%</span>;
  <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;
  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;
  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;
  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f9f9f9</span>;
  <span class="hljs-attribute">text-align</span>: center;
  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100px</span>;
}

<span class="hljs-selector-class">.column</span> &gt; <span class="hljs-selector-tag">p</span> {
  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;
  <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;
  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;
  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;
}

<span class="hljs-selector-class">.column</span> &gt; <span class="hljs-selector-tag">img</span> {
  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;
}

<span class="hljs-selector-class">.result</span> {
  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;
  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;
  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;
  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;
  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f9f9f9</span>;
}

<span class="hljs-selector-class">.result</span> &gt; <span class="hljs-selector-tag">h2</span> {
  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;
}

<span class="hljs-selector-class">.result</span> &gt; <span class="hljs-selector-tag">p</span> {
  <span class="hljs-attribute">white-space</span>: pre-wrap;
  <span class="hljs-attribute">word-wrap</span>: break-word;
  <span class="hljs-attribute">word-break</span>: break-all;
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;
  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.5</span>;
  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;
  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
</code></pre>
<h4 data-id="heading-16">实现效果</h4>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/bfa49e5b56a846afa21801dcc4c5f877~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5a2Q5rSL:q75.awebp?rk3s=f64ab15b&amp;x-expires=1743472452&amp;x-signature=j%2BJYJ0oPaE9X0h%2FmyZOT7%2FPWzmE%3D" alt="" loading="lazy"></p>
<h4 data-id="heading-17">资源加载失败</h4>
<p>Tesseract.js 在运行时需要动态加载三个关键文件：<code>Web Worker</code>、<code>wasm</code> 和 <code>训练数据</code>。由于默认使用的是 jsDelivr CDN，国内用户可能会遇到网络加载问题。为了解决这个问题，可以通过指定 unpkg CDN 来加速资源加载：</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> worker = <span class="hljs-keyword">await</span> <span class="hljs-title function_">createWorker</span>(<span class="hljs-string">'chi_sim'</span>, <span class="hljs-variable constant_">OEM</span>.<span class="hljs-property">DEFAULT</span>, {
  <span class="hljs-attr">langPath</span>: <span class="hljs-string">'https://unpkg.com/@tesseract.js-data/chi_sim/4.0.0_best_int'</span>,
  <span class="hljs-attr">workerPath</span>: <span class="hljs-string">'https://unpkg.com/tesseract.js/dist/worker.min.js'</span>,
  <span class="hljs-attr">corePath</span>: <span class="hljs-string">'https://unpkg.com/tesseract.js-core/tesseract-core-simd-lstm.wasm.js'</span>,
});
</code></pre>
<p>如果需要离线使用，可以将这些资源下载到本地，并将路径指向本地文件即可。</p>
<h2 data-id="heading-18">结语</h2>
<p><strong>Tesseract.js</strong> 是目前前端领域较为成熟的 OCR 库，适合在无需后端支持的场景下快速实现文字识别功能。通过合理的图片预处理和优化，可以满足大部分中小型应用的需求。</p>
<h2 data-id="heading-19">相关链接</h2>
<ul>
<li><strong>Tesseract.js 文档</strong>： <a href="https://link.juejin.cn?target=https%3A%2F%2Ftesseract-ocr.github.io%2F" target="_blank" title="https://tesseract-ocr.github.io/" ref="nofollow noopener noreferrer">tesseract-ocr.github.io/</a></li>
<li><strong>Tesseract.js Demo</strong>： <a href="https://link.juejin.cn?target=https%3A%2F%2Ftesseract.projectnaptha.com%2F" target="_blank" title="https://tesseract.projectnaptha.com/" ref="nofollow noopener noreferrer">tesseract.projectnaptha.com/</a></li>
</ul></div></div>