
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/cyfj/p/18955415" title="发布于 2025-06-29 00:29">
    <span role="heading" aria-level="2">GlobalService类</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<pre><code>public class GlobalService
{
    private static IServiceScope? _currentScope;
    private static readonly Lazy&lt;string&gt; _serverAddress = new Lazy&lt;string&gt;(GetServerAddress, true);
    private static readonly Lazy&lt;string&gt; _serverPort = new Lazy&lt;string&gt;(GetServerPort, true);
    private static DateTime? _serviceStartTime;

    // 核心服务
    public static ILogger? Logger { get; private set; }
    public static IWebHostEnvironment? WebHostEnvironment { get; private set; }
    public static IServiceProvider? ServiceProvider { get; private set; }
    public static IConfiguration? Configuration { get; private set; }
    public static IHttpContextAccessor? HttpContextAccessor { get; private set; }
    public static IHostApplicationLifetime? ApplicationLifetime { get; private set; }

    // 使用Lazy&lt;T&gt;实现线程安全的延迟初始化
    private static readonly Lazy&lt;IServiceScope&gt; _lazyScope = new Lazy&lt;IServiceScope&gt;(
        () =&gt; ServiceProvider!.CreateScope(),
        LazyThreadSafetyMode.ExecutionAndPublication
    );

    #region 便捷访问属性 - 环境与应用信息
    /// &lt;summary&gt;当前应用程序名称&lt;/summary&gt;
    public static string ApplicationName =&gt; WebHostEnvironment?.ApplicationName ?? "UnknownApp";

    /// &lt;summary&gt;当前环境名称（Development/Production等）&lt;/summary&gt;
    public static string EnvironmentName =&gt; WebHostEnvironment?.EnvironmentName ?? "Unknown";

    /// &lt;summary&gt;应用程序根路径&lt;/summary&gt;
    public static string ContentRootPath =&gt; WebHostEnvironment?.ContentRootPath ?? "";

    /// &lt;summary&gt;Web静态文件根路径&lt;/summary&gt;
    public static string WebRootPath =&gt; WebHostEnvironment?.WebRootPath ?? "";

    /// &lt;summary&gt;服务启动时间&lt;/summary&gt;
    public static DateTime ServiceStartTime =&gt; _serviceStartTime ??= DateTime.Now;

    /// &lt;summary&gt;服务已运行时间&lt;/summary&gt;
    public static TimeSpan ServiceUptime =&gt; DateTime.Now - ServiceStartTime;

    /// &lt;summary&gt;检查应用是否处于开发环境&lt;/summary&gt;
    public static bool IsDevelopment =&gt; WebHostEnvironment?.IsDevelopment() ?? false;

    /// &lt;summary&gt;检查应用是否处于生产环境&lt;/summary&gt;
    public static bool IsProduction =&gt; WebHostEnvironment?.IsProduction() ?? false;
    #endregion
    #region 便捷访问属性 - 系统信息
    /// &lt;summary&gt;获取操作系统信息&lt;/summary&gt;
    public static string OSInformation =&gt; Environment.OSVersion.ToString();

    /// &lt;summary&gt;获取.NET运行时版本&lt;/summary&gt;
    public static string RuntimeVersion =&gt; Environment.Version.ToString();

    /// &lt;summary&gt;获取应用进程ID&lt;/summary&gt;
    public static int ProcessId =&gt; Process.GetCurrentProcess().Id;
    #endregion

    #region 便捷访问属性 - 客户端信息
    /// &lt;summary&gt;获取当前请求的客户端IPv4地址（支持代理服务器场景）&lt;/summary&gt;
    public static string ClientIPv4Address
    {
        get
        {
            try
            {
                var context = HttpContextAccessor?.HttpContext;
                if (context == null) return "Unknown";

                // 优先从请求头获取代理IP（如Nginx/X-Forwarded-For）
                var ip = context.Request.Headers["X-Forwarded-For"].FirstOrDefault();
                if (string.IsNullOrEmpty(ip))
                {
                    ip = context.Connection.RemoteIpAddress?.ToString();
                }

                // 提取IPv4地址（处理可能的端口或IPv6格式）
                if (ip != null)
                {
                    var parts = ip.Split(',', ':', ']').FirstOrDefault(p =&gt; !string.IsNullOrEmpty(p.Trim()));
                    if (IPAddress.TryParse(parts, out var address) &amp;&amp; address.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        return address.ToString();
                    }
                }
                return "Unknown";
            }
            catch
            {
                return "Unknown";
            }
        }
    }

    /// &lt;summary&gt;获取当前请求的客户端端口号&lt;/summary&gt;
    public static int? ClientPort
    {
        get
        {
            try
            {
                return HttpContextAccessor?.HttpContext?.Connection?.RemotePort;
            }
            catch
            {
                return null;
            }
        }
    }

    /// &lt;summary&gt;获取当前请求的完整URL&lt;/summary&gt;
    public static string? CurrentRequestUrl
    {
        get
        {
            try
            {
                var context = HttpContextAccessor?.HttpContext;
                if (context == null) return null;

                return $"{context.Request.Scheme}://{context.Request.Host}{context.Request.Path}{context.Request.QueryString}";
            }
            catch
            {
                return null;
            }
        }
    }

    /// &lt;summary&gt;获取当前认证用户的ID（如果有）&lt;/summary&gt;
    public static string? CurrentUserId
    {
        get
        {
            try
            {
                var context = HttpContextAccessor?.HttpContext;
                return context?.User?.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value;
            }
            catch
            {
                return null;
            }
        }
    }

    /// &lt;summary&gt;获取当前认证用户的名称（如果有）&lt;/summary&gt;
    public static string? CurrentUserName
    {
        get
        {
            try
            {
                var context = HttpContextAccessor?.HttpContext;
                return context?.User?.Identity?.Name;
            }
            catch
            {
                return null;
            }
        }
    }
    #endregion

    #region 便捷访问属性 - 服务地址信息
    /// &lt;summary&gt;获取当前服务侦听的IPv4地址&lt;/summary&gt;
    public static string ServerAddress =&gt; _serverAddress.Value;

    /// &lt;summary&gt;获取当前服务侦听的端口号&lt;/summary&gt;
    public static string ServerPort =&gt; _serverPort.Value;

    /// &lt;summary&gt;获取服务正在监听的完整地址（包含协议和端口）&lt;/summary&gt;
    public static string ServiceListeningAddress
    {
        get
        {
            try
            {
                if (ServiceProvider == null) return "Unknown";
                var server = ServiceProvider.GetRequiredService&lt;IServer&gt;();
                var addressesFeature = server.Features.Get&lt;IServerAddressesFeature&gt;();
                if (addressesFeature?.Addresses == null || !addressesFeature.Addresses.Any())
                {
                    return "Unknown";
                }

                return addressesFeature.Addresses.First();
            }
            catch
            {
                return "Unknown";
            }
        }
    }

    /// &lt;summary&gt;获取当前服务实例的IPv4地址（不包含端口）&lt;/summary&gt;
    public static string ServiceIPv4Address
    {
        get
        {
            try
            {
                var host = Dns.GetHostEntry(Dns.GetHostName());
                foreach (var ip in host.AddressList)
                {
                    if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        return ip.ToString();
                    }
                }
                return "127.0.0.1";
            }
            catch
            {
                return "127.0.0.1";
            }
        }
    }

    /// &lt;summary&gt;获取当前服务实例的端口号&lt;/summary&gt;
    public static int ServicePort
    {
        get
        {
            try
            {
                var address = ServiceListeningAddress;
                if (string.IsNullOrEmpty(address)) return 0;

                if (Uri.TryCreate(address, UriKind.Absolute, out var uri))
                {
                    return uri.Port;
                }
                else if (address.Contains(":"))
                {
                    var parts = address.Split(':').LastOrDefault();
                    if (int.TryParse(parts, out var port))
                    {
                        return port;
                    }
                }
                return 0;
            }
            catch
            {
                return 0;
            }
        }
    }
    #endregion

    #region 便捷访问属性 - 请求信息
    /// &lt;summary&gt;获取当前请求路径&lt;/summary&gt;
    public static string? RequestPath =&gt; HttpContextAccessor?.HttpContext?.Request?.Path;

    /// &lt;summary&gt;获取当前请求方法（GET/POST等）&lt;/summary&gt;
    public static string? RequestMethod =&gt; HttpContextAccessor?.HttpContext?.Request?.Method;
    #endregion

    /// &lt;summary&gt;创建临时服务作用域（使用后需手动释放）&lt;/summary&gt;
    public static IServiceScope CreateScope() =&gt; ServiceProvider!.CreateScope();

    /// &lt;summary&gt;获取当前活动的作用域（单例模式）&lt;/summary&gt;
    public static IServiceScope CurrentScope =&gt; _lazyScope.Value;

    /// &lt;summary&gt;初始化全局服务（在应用启动时调用）&lt;/summary&gt;
    public static void Initialize(IServiceProvider serviceProvider)
    {
        ServiceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));

        // 从服务容器中获取核心服务
        WebHostEnvironment = serviceProvider.GetRequiredService&lt;IWebHostEnvironment&gt;();
        Configuration = serviceProvider.GetRequiredService&lt;IConfiguration&gt;();
        HttpContextAccessor = serviceProvider.GetRequiredService&lt;IHttpContextAccessor&gt;();
        ApplicationLifetime = serviceProvider.GetRequiredService&lt;IHostApplicationLifetime&gt;();

        // 创建全局日志记录器
        Logger = serviceProvider.GetRequiredService&lt;ILoggerFactory&gt;()
                               .CreateLogger("GlobalService");
    }

    /// &lt;summary&gt;释放全局资源&lt;/summary&gt;
    public static void Dispose()
    {
        if (_lazyScope.IsValueCreated)
        {
            _lazyScope.Value.Dispose();
        }
        _currentScope = null;
    }

    /// &lt;summary&gt;从当前作用域获取服务&lt;/summary&gt;
    public static T GetService&lt;T&gt;() where T : notnull
        =&gt; CurrentScope.ServiceProvider.GetRequiredService&lt;T&gt;();

    /// &lt;summary&gt;从临时作用域获取服务（使用后需释放作用域）&lt;/summary&gt;
    public static T GetScopedService&lt;T&gt;() where T : notnull
        =&gt; CreateScope().ServiceProvider.GetRequiredService&lt;T&gt;();

    /// &lt;summary&gt;从配置中获取强类型配置对象&lt;/summary&gt;
    public static T GetConfig&lt;T&gt;(string sectionName) where T : new()
    {
        var config = new T();
        Configuration?.GetSection(sectionName).Bind(config);
        return config;
    }

    /// &lt;summary&gt;从配置中获取值&lt;/summary&gt;
    public static string? GetConfigValue(string key) =&gt; Configuration?[key];

    /// &lt;summary&gt;优雅地停止应用程序&lt;/summary&gt;
    public static void StopApplication() =&gt; ApplicationLifetime?.StopApplication();

    // Fix for CS1061: Replace the incorrect usage of `ServerFeatures` with the correct way to access `IServerAddressesFeature` from the service provider.

    private static string GetServerAddress()
    {
        try
        {
            if (ServiceProvider == null) return "Unknown";
            var server = ServiceProvider.GetRequiredService&lt;IServer&gt;();
            var addresses = server.Features.Get&lt;IServerAddressesFeature&gt;()?.Addresses;

            return addresses?
                .Select(a =&gt; new Uri(a))
                .FirstOrDefault(uri =&gt;
                    uri.Host == "localhost" ||
                    uri.Host == "127.0.0.1" ||
                    uri.Host.Contains('.')
                )?.Host ?? "Unknown";
        }
        catch
        {
            return "Unknown";
        }
    }

    private static string GetServerPort()
    {
        try
        {
            if (ServiceProvider == null) return "Unknown";
            var server = ServiceProvider.GetRequiredService&lt;IServer&gt;();
            var addresses = server.Features.Get&lt;IServerAddressesFeature&gt;()?.Addresses;

            return addresses?
                .Select(a =&gt; new Uri(a))
                .FirstOrDefault()?
                .Port.ToString() ?? "Unknown";
        }
        catch
        {
            return "Unknown";
        }
    }


    #region 便捷访问属性 - 内存使用
    /// &lt;summary&gt;获取当前应用的内存使用情况&lt;/summary&gt;
    public static MemoryInfo GetMemoryInfo()
    {
        try
        {
            var process = Process.GetCurrentProcess();
            return new MemoryInfo
            {
                WorkingSet = process.WorkingSet64 / (1024 * 1024), // MB
                PrivateMemorySize = process.PrivateMemorySize64 / (1024 * 1024), // MB
                VirtualMemorySize = process.VirtualMemorySize64 / (1024 * 1024), // MB
                PeakWorkingSet = process.PeakWorkingSet64 / (1024 * 1024), // MB
                PeakPrivateMemorySize = process.PrivateMemorySize64 / (1024 * 1024),
                PeakVirtualMemorySize = process.PeakVirtualMemorySize64 / (1024 * 1024) // MB
            };
        }
        catch (Exception ex)
        {
            LogException(ex, nameof(GetMemoryInfo));
            return new MemoryInfo();
        }
    }

    // 在GlobalService类中添加以下方法
    private static void LogException(Exception ex, string methodName)
    {
        Logger?.LogError(ex, $"GlobalService方法[{methodName}]发生异常: {ex.Message}");
    }

    /// &lt;summary&gt;内存使用信息类&lt;/summary&gt;
    public class MemoryInfo
    {
        public long WorkingSet { get; set; }       // 工作集(MB)
        public long PrivateMemorySize { get; set; } // 私有内存(MB)
        public long VirtualMemorySize { get; set; } // 虚拟内存(MB)
        public long PeakWorkingSet { get; set; }    // 峰值工作集(MB)
        public long PeakPrivateMemorySize { get; set; } // 峰值私有内存(MB)
        public long PeakVirtualMemorySize { get; set; } // 峰值虚拟内存(MB)
    }
    #endregion

    /// &lt;summary&gt;
    /// 获取GlobalService中所有可展示的信息
    /// &lt;/summary&gt;
    /// &lt;param name="useChinese"&gt;是否使用中文显示，默认使用英文&lt;/param&gt;
    /// &lt;returns&gt;包含所有信息的字典，键为显示名称，值为对应值&lt;/returns&gt;
    public static Dictionary&lt;string, object&gt; GetAllDisplayInfo(bool useChinese = false)
    {
        // 中英文显示名称映射
        var displayNames = new Dictionary&lt;string, string&gt;
    {
        // 环境与应用信息
        { "ApplicationName", useChinese ? "应用程序名称" : "Application Name" },
        { "EnvironmentName", useChinese ? "环境名称" : "Environment Name" },
        { "ContentRootPath", useChinese ? "应用程序根路径" : "Content Root Path" },
        { "WebRootPath", useChinese ? "Web静态文件根路径" : "Web Root Path" },
        { "ServiceStartTime", useChinese ? "服务启动时间" : "Service Start Time" },
        { "ServiceUptime", useChinese ? "服务已运行时间" : "Service Uptime" },
        { "IsDevelopment", useChinese ? "是否开发环境" : "Is Development" },
        { "IsProduction", useChinese ? "是否生产环境" : "Is Production" },
        
        // 客户端信息
        { "ClientIPv4Address", useChinese ? "客户端IPv4地址" : "Client IPv4 Address" },
        { "ClientPort", useChinese ? "客户端端口号" : "Client Port" },
        { "CurrentRequestUrl", useChinese ? "当前请求URL" : "Current Request URL" },
        { "CurrentUserId", useChinese ? "当前用户ID" : "Current User ID" },
        { "CurrentUserName", useChinese ? "当前用户名称" : "Current User Name" },
        
        // 服务地址信息
        { "ServerAddress", useChinese ? "服务侦听地址" : "Server Address" },
        { "ServerPort", useChinese ? "服务侦听端口" : "Server Port" },
        { "ServiceListeningAddress", useChinese ? "服务监听地址" : "Service Listening Address" },
        { "ServiceIPv4Address", useChinese ? "服务实例IP地址" : "Service IPv4 Address" },
        { "ServicePort", useChinese ? "服务实例端口" : "Service Port" },
        
        // 请求信息
        { "RequestPath", useChinese ? "当前请求路径" : "Request Path" },
        { "RequestMethod", useChinese ? "当前请求方法" : "Request Method" },

            { "OSInformation", useChinese ? "操作系统信息" : "OS Information" },
{ "RuntimeVersion", useChinese ? ".NET运行时版本" : "Runtime Version" },
{ "ProcessId", useChinese ? "进程ID" : "Process ID" },

    { "MemoryInfo.WorkingSet", useChinese ? "工作集(MB)" : "Working Set (MB)" },
        { "MemoryInfo.PrivateMemorySize", useChinese ? "私有内存(MB)" : "Private Memory Size (MB)" },
        { "MemoryInfo.VirtualMemorySize", useChinese ? "虚拟内存(MB)" : "Virtual Memory Size (MB)" },
        { "MemoryInfo.PeakWorkingSet", useChinese ? "峰值工作集(MB)" : "Peak Working Set (MB)" },
        { "MemoryInfo.PeakPrivateMemorySize", useChinese ? "峰值私有内存(MB)" : "Peak Private Memory Size (MB)" },
        { "MemoryInfo.PeakVirtualMemorySize", useChinese ? "峰值虚拟内存(MB)" : "Peak Virtual Memory Size (MB)" },
    };

        // 初始化结果字典
        var result = new Dictionary&lt;string, object&gt;();

        // 添加环境与应用信息
        result.Add("ApplicationName", ApplicationName);
        result.Add("EnvironmentName", EnvironmentName);
        result.Add("ContentRootPath", ContentRootPath);
        result.Add("WebRootPath", WebRootPath);
        result.Add("ServiceStartTime", ServiceStartTime);
        result.Add("ServiceUptime", ServiceUptime);
        result.Add("IsDevelopment", IsDevelopment);
        result.Add("IsProduction", IsProduction);

        // 添加客户端信息
        result.Add("ClientIPv4Address", ClientIPv4Address);
        result.Add("ClientPort", ClientPort);
        result.Add("CurrentRequestUrl", CurrentRequestUrl);
        result.Add("CurrentUserId", CurrentUserId);
        result.Add("CurrentUserName", CurrentUserName);

        // 添加服务地址信息
        result.Add("ServerAddress", ServerAddress);
        result.Add("ServerPort", ServerPort);
        result.Add("ServiceListeningAddress", ServiceListeningAddress);
        result.Add("ServiceIPv4Address", ServiceIPv4Address);
        result.Add("ServicePort", ServicePort);

        // 添加请求信息
        result.Add("RequestPath", RequestPath);
        result.Add("RequestMethod", RequestMethod);


        result.Add("OSInformation", OSInformation);
        result.Add("RuntimeVersion", RuntimeVersion);
        result.Add("ProcessId", ProcessId);

        // 内存信息添加逻辑
        var memoryInfo = GetMemoryInfo();
        result.Add("MemoryInfo.WorkingSet", memoryInfo.WorkingSet);
        result.Add("MemoryInfo.PrivateMemorySize", memoryInfo.PrivateMemorySize);
        result.Add("MemoryInfo.VirtualMemorySize", memoryInfo.VirtualMemorySize);
        result.Add("MemoryInfo.PeakWorkingSet", memoryInfo.PeakWorkingSet);
        result.Add("MemoryInfo.PeakPrivateMemorySize", memoryInfo.PeakPrivateMemorySize);
        result.Add("MemoryInfo.PeakVirtualMemorySize", memoryInfo.PeakVirtualMemorySize);

        // 转换为显示名称并返回
        return result.ToDictionary(
            kvp =&gt; displayNames[kvp.Key],
            kvp =&gt; kvp.Value
        );
    }
}
</code></pre>
<pre><code>var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

builder.Services.AddHttpContextAccessor();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}
//初始化服务
GlobalService.Initialize(app.Services);
app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

app.Run();
</code></pre>
<pre><code>[HttpGet]
public IActionResult GetAllDisplayInfoApi()
{
	var serverAddress = GlobalService.GetAllDisplayInfo(true);
	return Ok(serverAddress);
}
</code></pre>
<p><img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2917458/202506/2917458-20250629002833270-730364732.png" class="lazyload"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-29 00:29">2025-06-29 00:29</span>&nbsp;
<a href="https://www.cnblogs.com/cyfj">柴油飞机</a>&nbsp;
阅读(<span id="post_view_count">42</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18955415);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18955415', targetLink: 'https://www.cnblogs.com/cyfj/p/18955415', title: 'GlobalService类' })">举报</a>
</div>
        