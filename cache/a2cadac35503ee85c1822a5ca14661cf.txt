
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Amd794/p/18847385" title="发布于 2025-04-25 22:09">
    <span role="heading" aria-level="2">使用Tortoise-ORM和FastAPI构建评论系统</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<hr>
<p>title: 使用Tortoise-ORM和FastAPI构建评论系统<br>
date: 2025/04/25 21:37:36<br>
updated: 2025/04/25 21:37:36<br>
author: cmdragon</p>
<p>excerpt:<br>
在models.py中定义了Comment模型，包含id、content、created_at、updated_at字段，并与User和Article模型建立外键关系。schemas.py中定义了CommentBase、CommentCreate、CommentUpdate和CommentResponse等Pydantic模型，用于数据验证和响应。路由层实现了创建、获取和删除评论的API，使用get_or_none处理不存在的评论，并捕获异常。测试接口通过requests进行创建和异常测试。常见报错包括外键约束失败、验证错误和事件循环未关闭，需检查外键值、请求体匹配和正确关闭事件循环。</p>
<p>categories:</p>
<ul>
<li>后端开发</li>
<li>FastAPI</li>
</ul>
<p>tags:</p>
<ul>
<li>Tortoise-ORM</li>
<li>Pydantic</li>
<li>FastAPI</li>
<li>评论系统</li>
<li>数据库模型</li>
<li>数据验证</li>
<li>接口测试</li>
</ul>
<hr>
<img src="https://static.shutu.cn/shutu/jpeg/open3e/2025/04/25/e11adf11d682fc56231da7e699af1296.jpeg" title="cmdragon_cn.png" alt="cmdragon_cn.png">
<img src="https://api2.cmdragon.cn/upload/cmder/20250304_012821924.jpg" title="cmdragon_cn.png" alt="cmdragon_cn.png">
<p>扫描<a href="https://static.amd794.com/blog/images/cmdragon_cn.png" target="_blank" rel="noopener nofollow">二维码</a>关注或者微信搜一搜：<code>编程智域 前端至全栈交流与成长</code></p>
<p><a href="https://tools.cmdragon.cn/zh/apps?category=ai_chat" target="_blank" rel="noopener nofollow">探索数千个预构建的 AI 应用，开启你的下一个伟大创意</a>：<a href="https://tools.cmdragon.cn/" target="_blank" rel="noopener nofollow">https://tools.cmdragon.cn/</a></p>
<h1 id="一tortoise-orm模型定义">一、Tortoise-ORM模型定义</h1>
<p>我们首先在models.py中定义评论模型：</p>
<pre><code class="language-python">from tortoise.models import Model
from tortoise import fields


class Comment(Model):
    id = fields.IntField(pk=True)
    content = fields.TextField()
    created_at = fields.DatetimeField(auto_now_add=True)
    updated_at = fields.DatetimeField(auto_now=True)

    # 外键关系
    user = fields.ForeignKeyField('models.User', related_name='comments')
    article = fields.ForeignKeyField('models.Article', related_name='comments')

    class Meta:
        table = "comments"
        indexes = ("created_at", "user_id", "article_id")

    def __str__(self):
        return f"Comment {self.id} by {self.user.username}"
</code></pre>
<p>代码解析：</p>
<ol>
<li><code>auto_now_add</code>会在创建时自动记录时间</li>
<li>通过<code>related_name</code>建立双向关联查询路径</li>
<li>复合索引提升常用查询条件的效率</li>
<li>继承Model基类获得ORM能力</li>
</ol>
<h1 id="二pydantic模型定义">二、Pydantic模型定义</h1>
<p>在schemas.py中定义数据验证模型：</p>
<pre><code class="language-python">from pydantic import BaseModel
from datetime import datetime


class CommentBase(BaseModel):
    content: str
    user_id: int
    article_id: int


class CommentCreate(CommentBase):
    pass


class CommentUpdate(BaseModel):
    content: str


class CommentResponse(CommentBase):
    id: int
    created_at: datetime
    updated_at: datetime

    class Config:
        orm_mode = True
</code></pre>
<p>验证要点：</p>
<ol>
<li>创建模型继承自基础模型</li>
<li>更新模型仅允许修改内容字段</li>
<li>响应模型启用orm_mode以兼容ORM对象</li>
<li>时间字段自动转换时间格式</li>
</ol>
<h1 id="三路由层实现">三、路由层实现</h1>
<p>核心路由实现在comments.py中：</p>
<pre><code class="language-python">from fastapi import APIRouter, Depends, HTTPException
from .models import Comment
from .schemas import CommentCreate, CommentResponse

router = APIRouter(prefix="/comments", tags=["comments"])


@router.post("/", response_model=CommentResponse)
async def create_comment(comment: CommentCreate):
    try:
        comment_obj = await Comment.create(**comment.dict())
        return await CommentResponse.from_tortoise_orm(comment_obj)
    except Exception as e:
        raise HTTPException(
            status_code=400,
            detail=f"创建评论失败: {str(e)}"
        )


@router.get("/{comment_id}", response_model=CommentResponse)
async def get_comment(comment_id: int):
    comment = await Comment.get_or_none(id=comment_id)
    if not comment:
        raise HTTPException(status_code=404, detail="评论不存在")
    return comment


@router.delete("/{comment_id}")
async def delete_comment(comment_id: int):
    deleted_count = await Comment.filter(id=comment_id).delete()
    if not deleted_count:
        raise HTTPException(status_code=404, detail="评论不存在")
    return {"message": "评论删除成功"}
</code></pre>
<p>技术要点：</p>
<ol>
<li>使用<code>get_or_none</code>替代<code>get</code>避免直接抛出异常</li>
<li>批量删除返回影响行数作为判断依据</li>
<li>异常处理覆盖数据库操作的各种失败场景</li>
</ol>
<h1 id="四测试接口">四、测试接口</h1>
<p>使用requests测试接口：</p>
<pre><code class="language-python">import requests

BASE_URL = "http://localhost:8000/comments"


# 创建测试
def test_create_comment():
    data = {
        "content": "优质技术文章！",
        "user_id": 1,
        "article_id": 1
    }
    response = requests.post(BASE_URL, json=data)
    assert response.status_code == 200
    print(response.json())


# 异常测试
def test_invalid_user():
    data = {
        "content": "错误测试",
        "user_id": 999,
        "article_id": 1
    }
    response = requests.post(BASE_URL, json=data)
    assert response.status_code == 400
    print(response.json())
</code></pre>
<h1 id="五课后quiz">五、课后Quiz</h1>
<ol>
<li>当查询不存在的评论ID时，应该返回什么HTTP状态码？<br>
A) 200<br>
B) 404<br>
C) 500<br>
D) 400</li>
</ol>
<p>答案：B) 404。<code>get_or_none</code>方法会返回None，触发自定义的404异常</p>
<ol start="2">
<li>如何实现评论的软删除功能？<br>
A) 直接删除数据库记录<br>
B) 添加is_deleted字段<br>
C) 使用数据库回收站功能<br>
D) 修改内容为"已删除"</li>
</ol>
<p>答案：B) 添加布尔型is_deleted字段，查询时过滤已删除的记录</p>
<h1 id="六常见报错处理">六、常见报错处理</h1>
<ol>
<li>
<p>报错：<code>tortoise.exceptions.IntegrityError: FOREIGN KEY constraint failed</code><br>
原因：尝试关联不存在的用户或文章ID<br>
解决：检查外键值是否存在，添加数据库约束</p>
</li>
<li>
<p>报错：<code>pydantic.error_wrappers.ValidationError</code><br>
原因：请求体缺少必填字段或字段类型错误<br>
解决：检查请求体是否匹配schema定义，使用try-except捕获验证错误</p>
</li>
<li>
<p>报错：<code>RuntimeError: Event loop is closed</code><br>
原因：异步操作未正确关闭<br>
解决：在main.py中添加关闭事件循环的hook：</p>
</li>
</ol>
<pre><code class="language-python">from fastapi import FastAPI
from tortoise.contrib.fastapi import register_tortoise

app = FastAPI()

register_tortoise(
    app,
    db_url="sqlite://db.sqlite3",
    modules={"models": ["app.models"]},
    generate_schemas=True,
    add_exception_handlers=True,
)
</code></pre>
<p>余下文章内容请点击跳转至 个人博客页面 或者 扫码关注或者微信搜一搜：<code>编程智域 前端至全栈交流与成长</code>，阅读完整的文章：<a href="https://blog.cmdragon.cn/posts/d7fcb94d965b/" target="_blank" rel="noopener nofollow">使用Tortoise-ORM和FastAPI构建评论系统 | cmdragon's Blog</a></p>
<h2 id="往期文章归档">往期文章归档：</h2>
<ul>
<li><a href="https://blog.cmdragon.cn/posts/a344f0dfbdbf/" target="_blank" rel="noopener nofollow">分层架构在博客评论功能中的应用与实现 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/823cb13844de/" target="_blank" rel="noopener nofollow">深入解析事务基础与原子操作原理 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/0df919d7ff39/" target="_blank" rel="noopener nofollow">掌握Tortoise-ORM高级异步查询技巧 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/2c8d6d6e8c53/" target="_blank" rel="noopener nofollow">FastAPI与Tortoise-ORM实现关系型数据库关联 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/4b40fac9a431/" target="_blank" rel="noopener nofollow">Tortoise-ORM与FastAPI集成：异步模型定义与实践 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/ec70904aad68/" target="_blank" rel="noopener nofollow">异步编程与Tortoise-ORM框架 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/7112d376156d/" target="_blank" rel="noopener nofollow">FastAPI数据库集成与事务管理 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/ac94f11d8558/" target="_blank" rel="noopener nofollow">FastAPI与SQLAlchemy数据库集成 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/b64fbd2d819d/" target="_blank" rel="noopener nofollow">FastAPI与SQLAlchemy数据库集成与CRUD操作 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/05564696277e/" target="_blank" rel="noopener nofollow">FastAPI与SQLAlchemy同步数据库集成 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/dc3f1adccf0a/" target="_blank" rel="noopener nofollow">SQLAlchemy 核心概念与同步引擎配置详解 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/5c3e3f847f09/" target="_blank" rel="noopener nofollow">FastAPI依赖注入性能优化策略 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/d1b6b80e8665/" target="_blank" rel="noopener nofollow">FastAPI安全认证中的依赖组合 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/f5d382bc5354/" target="_blank" rel="noopener nofollow">FastAPI依赖注入系统及调试技巧 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/88761b137b82/" target="_blank" rel="noopener nofollow">FastAPI依赖覆盖与测试环境模拟 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/ef1282d9c9b8/" target="_blank" rel="noopener nofollow">FastAPI中的依赖注入与数据库事务管理 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/8b8658ec8dab/" target="_blank" rel="noopener nofollow">FastAPI依赖注入实践：工厂模式与实例复用的优化策略 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/0b359086bd7d/" target="_blank" rel="noopener nofollow">FastAPI依赖注入：链式调用与多级参数传递 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/ef71d1b7ddfb/" target="_blank" rel="noopener nofollow">FastAPI依赖注入：从基础概念到应用 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/1b01bf90607f/" target="_blank" rel="noopener nofollow">FastAPI中实现动态条件必填字段的实践 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/cda2eb13bf31/" target="_blank" rel="noopener nofollow">FastAPI中Pydantic异步分布式唯一性校验 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/18ef84c3b234/" target="_blank" rel="noopener nofollow">掌握FastAPI与Pydantic的跨字段验证技巧 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/9b9eb7489096/" target="_blank" rel="noopener nofollow">FastAPI中的Pydantic密码验证机制与实现 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/6e2a1c070e32/" target="_blank" rel="noopener nofollow">深入掌握FastAPI与OpenAPI规范的高级适配技巧 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/11d2c39a300b/" target="_blank" rel="noopener nofollow">Pydantic字段元数据指南：从基础到企业级文档增强 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/3bd5ffd5fdcb/" target="_blank" rel="noopener nofollow">Pydantic Schema生成指南：自定义JSON Schema | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/614488cbbf44/" target="_blank" rel="noopener nofollow">Pydantic递归模型深度校验36计：从无限嵌套到亿级数据的优化法则 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/6ed5f943c599/" target="_blank" rel="noopener nofollow">Pydantic异步校验器深：构建高并发验证系统 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/60d359baeb6c/" target="_blank" rel="noopener nofollow">Pydantic根校验器：构建跨字段验证系统 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/fa86615d7d3a/" target="_blank" rel="noopener nofollow">Pydantic配置继承抽象基类模式 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/4ab129859b04/" target="_blank" rel="noopener nofollow">Pydantic多态模型：用鉴别器构建类型安全的API接口 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/a281359d556b/" target="_blank" rel="noopener nofollow">FastAPI性能优化指南：参数解析与惰性加载 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/3b96477f5460/" target="_blank" rel="noopener nofollow">FastAPI依赖注入：参数共享与逻辑复用 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/1d6d61c6ff85/" target="_blank" rel="noopener nofollow">FastAPI安全防护指南：构建坚不可摧的参数处理体系 | cmdragon's Blog</a></li>
<li></li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.004315083827546296" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-25 22:10">2025-04-25 22:09</span>&nbsp;
<a href="https://www.cnblogs.com/Amd794">Amd794</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18847385);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18847385', targetLink: 'https://www.cnblogs.com/Amd794/p/18847385', title: '使用Tortoise-ORM和FastAPI构建评论系统' })">举报</a>
</div>
        