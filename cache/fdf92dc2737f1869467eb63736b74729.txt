
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/airlongdianblog/p/18657418" title="发布于 2025-01-07 12:38">
    <span role="heading" aria-level="2">Jetbrains fleet 配置 C++开发环境（基于CMAKE和MinGW）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="jetbrains-fleet-配置-c开发环境">Jetbrains fleet 配置 C++开发环境</h1>
<h2 id="1-安装-jetbrains-fleet">1. 安装 Jetbrains Fleet</h2>
<p>到Fleet下载页面下载Toolbox并安装<br>
<a href="https://www.jetbrains.com/fleet/download/#section=windows" target="_blank" rel="noopener nofollow">Jetbrains-Fleet下载页</a><br>
安装完成后在任务栏打开 Toolbox ，在列表中选择安装 fleet。</p>
<h2 id="2-为-fleet-准备-workspace">2. 为 Fleet 准备 Workspace</h2>
<p>在适当的地方建立文件夹作为 fleet 的工作空间，并在 fleet 中打开。</p>
<h2 id="3-配置-runjson-编译脚本">3. 配置 run.json 编译脚本</h2>
<p>点击运行按钮，选择 <code>Create Run Configuration</code><br>
将其中内容配置如下</p>
<pre><code class="language-json">{
    "configurations": [
        {
            "type": "command",
            "name": "CMake Build",
            "program": "cmake",
            "args": ["-DCMAKE_BUILD_TYPE=Debug","-G","MinGW Makefiles","-S", "$FILE_DIR$", "-B", "$FILE_DIR$\\cmake-build-debug"],
        },
        {
            "type": "command",
            "name": "Make",
            "program": "mingw32-make",
            "args": ["-C","$FILE_DIR$\\cmake-build-debug"],

        },
        {
            "type": "command",
            "name": "Run",
            "program": "$FILE_DIR$\\cmake-build-debug\\$FILE_NAME_NO_EXT$.exe",
        },
        {
            "type": "command",
            "name": "Build And Run",
            "program": "$FILE_DIR$\\cmake-build-debug\\$FILE_NAME_NO_EXT$.exe",
            "dependsOn": ["CMake Build", "Make"],
        },
        {
            "type": "command",
            "name": "Example Build",
            "program": "g++",
            "args": ["$FILE$","-o","$FILE_DIR$\\$FILE_NAME_NO_EXT$.exe"]
        },
        {
            "type": "command",
            "name": "Example Run",
            "program": "$FILE_DIR$\\$FILE_NAME_NO_EXT$.exe",
        },
        {
            "type": "command",
            "name": "Example Build And Run",
            "program": "$FILE_DIR$\\$FILE_NAME_NO_EXT$.exe",
            "dependsOn": ["Example Build"],
        },
    ]
}

</code></pre>
<h2 id="4-安装-cmake-与mingw-w64">4. 安装 CMAKE 与MinGW-w64</h2>
<p><a href="https://cmake.org/download/" target="_blank" rel="noopener nofollow">CMAKE下载页面</a><br>
<a href="https://github.com/niXman/mingw-builds-binaries/releases" target="_blank" rel="noopener nofollow">MinGW-w64预编译二进制文件下载页面</a></p>
<p>CMAKE 直接安装即可，MinGW-w64 找个地方解压出来即可。<br>
之后将 CMAKE 和 MinGW 的 bin 文件夹添加进系统 path 变量。</p>
<h2 id="5-运行配置如何使用">5. 运行配置如何使用</h2>
<h3 id="51-单个文件的编译运行">5.1 单个文件的编译运行</h3>
<p>在工作空间下新建项目文件夹，在内部建立单个 cpp 文件并编写程序。<br>
点击运行按钮，其中带 Example 前缀的是用于单个文件运行的配置：</p>
<ul>
<li>Example Build —— 编译该文件</li>
<li>Example Run —— 不重新编译，运行上次编译的结果</li>
<li>Example Build And Run —— 编译并运行当前文件</li>
</ul>
<h3 id="52-以-cmake-管理的项目的编译运行">5.2 以 CMAKE 管理的项目的编译运行</h3>
<p>在工作空间下新建项目文件夹，内部项目以 CMAKE 管理。</p>
<ul>
<li><strong>CMakeLists.txt 中的项目名需要与作为 main 文件的文件名一致，例如主文件为<code>helloworld.cpp</code>,则 CMAKE 中的项目名应为<code>helloworld</code>。</strong></li>
<li><strong>如果要使用 fleet 的 Smart Mode，CMakeLists.txt 中需要添加<code>set(CMAKE_EXPORT_COMPILE_COMMANDS ON)</code>生成编译数据库</strong></li>
</ul>
<p>点击运行按钮，其中<strong>不带</strong> Example 前缀的是用于项目运行的配置：</p>
<ul>
<li>CMake Build —— 执行 CMAKE 项目构建，生成项目 Makefile 文件与编译数据库</li>
<li>Make —— 编译项目</li>
<li>Run —— 不重新编译，运行上次编译的结果</li>
<li>Build And Run —— 编译项目并运行</li>
</ul>

</div>
<div id="MySignature" role="contentinfo">
    QQ:269672173 
博客地址：https://www.cnblogs.com/airlongdianblog/（博客园）  https://airlongdian.github.io/（个人笔记）
bilibili：万能的小奇喵
转载请注明出处
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.009913512112268518" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-07 12:39">2025-01-07 12:38</span>&nbsp;
<a href="https://www.cnblogs.com/airlongdianblog">AirLongDian</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18657418" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18657418);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18657418', targetLink: 'https://www.cnblogs.com/airlongdianblog/p/18657418', title: 'Jetbrains fleet 配置 C++开发环境（基于CMAKE和MinGW）' })">举报</a>
</div>
        