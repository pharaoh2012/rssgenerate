
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kybs0/p/18669035" title="发布于 2025-01-14 23:48">
    <span role="heading" aria-level="2">.NET 数据拷贝方案选择</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>&nbsp;应用中我们经常使用到数据的复制，在.NET中有多种方式可以实现复制数据或对象。选择哪种方式、是浅拷贝还是深拷贝，具体需求场景可以取决于对象的复杂性、数据量等，本文我们介绍主要的拷贝方式以及相对高性能的方案。</p>
<h3>&nbsp;1. MemberwiseClone拷贝</h3>
<p><strong>浅拷贝</strong>&nbsp;<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.object.memberwiseclone?view=net-6.0" rel="noopener nofollow">Object.MemberwiseClone 方法 (System) | Microsoft Learn</a>，指针对对象执行非静态字段的浅复制操作</p>
<ul>
<li>字段是基础类型如string、int，会全部复制过来，是全新的值</li>
<li>字段是引用类型，则会则复制对象的引用，而不复制对象，二者对象是一个内存地址</li>
</ul>
<p>深拷贝，则不管是字段还是引用类型，均完全实现全新的复现。</p>
<p>一般深拷贝可以手动实现，对象类内部添加Clone方法(也可以实现内置的统一接口ICloneable)，将所有字段重新赋值一遍、返回一个新对象。那也可以基于MemberwiseClone方案之上，对引用类型重新赋值一个新对象，实现<strong>深拷贝</strong></p>
<p>深拷贝，内部克隆的对象字段可以修改，不会影响原来对象的值。</p>
<p>参考如下代码：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> MemberwiseCloneModel
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)"> 3</span>         <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">int</span> Age { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
</span><span style="color: rgba(0, 128, 128, 1)"> 4</span>         <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span> Name { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>         <span style="color: rgba(0, 0, 255, 1)">public</span> TestMode Mode { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span>         <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> MemberwiseCloneModel ShallowClone()
</span><span style="color: rgba(0, 128, 128, 1)"> 7</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>             <span style="color: rgba(0, 0, 255, 1)">return</span> (MemberwiseCloneModel)<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.MemberwiseClone();
</span><span style="color: rgba(0, 128, 128, 1)"> 9</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">10</span>         <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> MemberwiseCloneModel <strong>DeepCopy</strong>()
</span><span style="color: rgba(0, 128, 128, 1)">11</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">12</span>             <span style="color: rgba(0, 0, 255, 1)">var</span> clone = (MemberwiseCloneModel)<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.MemberwiseClone();
</span><span style="color: rgba(0, 128, 128, 1)">13</span>             clone.Mode = <span style="color: rgba(0, 0, 255, 1)">new</span> TestMode() { Data = <span style="color: rgba(0, 0, 255, 1)">this</span>.Mode?.Data ?? <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.Empty };
</span><span style="color: rgba(0, 128, 128, 1)">14</span>             <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> clone;
</span><span style="color: rgba(0, 128, 128, 1)">15</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">16</span>     }</pre>
</div>
<h3>2.Record的with数据拷贝</h3>
<p>这是针对Record数据类的一类拷贝方式，只在C#9以上支持，详见<a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/builtin-types/record" rel="noopener nofollow">Record - C# reference | Microsoft Learn</a></p>
<p>record因为是标记数据类，可以只有属性，所以RecordModel可以简写为RecordModel1结构：</p>
<div class="cnblogs_code">
<pre>1     public record class<span> RecordModel
2 <span>    {
3         public string Name { get; set<span>; }
4         public int Age { get; set<span>; }
5         public TestMode Mode { get; set<span>; }
6 <span>    }
7     public record RecordModel1(string Name, int Age, TestMode Mode);</span></span></span></span></span></span></pre>
</div>
<p><strong>with相当于MemberwiseClone浅拷贝</strong>，对值类型字段可以全新复制，但引用类型操作后还是同一对象&nbsp;<a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/with-expression" rel="noopener nofollow">with 表达式 - 创建新对象，这些对象是现有对象的修改副本 - C# reference | Microsoft Learn</a></p>
<p>写个demo：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> TestRecordWith()
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)"> 3</span>         <span style="color: rgba(0, 0, 255, 1)">var</span> original = <span style="color: rgba(0, 0, 255, 1)">new</span> RecordModel() { Name = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Test</span><span style="color: rgba(128, 0, 0, 1)">"</span>, Age = <span style="color: rgba(128, 0, 128, 1)">20</span>, Mode = <span style="color: rgba(0, 0, 255, 1)">new</span> TestMode() { Data = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">data</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> } };
</span><span style="color: rgba(0, 128, 128, 1)"> 4</span>         <span style="color: rgba(0, 0, 255, 1)">var</span> clone =<span style="color: rgba(0, 0, 0, 1)"> original with { };
</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>         Debug.WriteLine($<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">referenceEquals:{ReferenceEquals(original, clone)}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span>         Debug.WriteLine($<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">clone:{clone.Name},{clone.Age},{clone.Mode.Data}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 7</span>         clone.Name = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Test1</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>         clone.Age = <span style="color: rgba(128, 0, 128, 1)">21</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 9</span>         clone.Mode.Data = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">data1</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">10</span>         Debug.WriteLine($<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">original after modified clone:{original.Name},{original.Age},{original.Mode.Data}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">11</span>     }</pre>
</div>
<p>上面demo输出结果，基础类型不会被修改：</p>
<p><img src="https://img2024.cnblogs.com/blog/685541/202501/685541-20250114193439698-297947469.png" alt="" loading="lazy"></p>
<p>另外，with也可以同时给属性赋新值，var clone = original with { Name = "Test0" };</p>
<h3>3. 序列化实现数据拷贝</h3>
<div data-zone-id="0" data-line-index="0" data-line="true">可以通过将对象序列化为二进制、XML 或 JSON 等格式，然后再反序列化为新对象来实现深拷贝。此方法对内部引用对象字段，也适用</div>
<div data-zone-id="0" data-line-index="0" data-line="true">1）二进制格式实现比例简单，直接粘贴代码，如下：</div>
<div data-zone-id="0" data-line-index="0" data-line="true">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> T DeepCopy&lt;T&gt;<span style="color: rgba(0, 0, 0, 1)">(T obj)
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)"> 3</span>         <span style="color: rgba(0, 0, 255, 1)">using</span> (MemoryStream memoryStream = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> MemoryStream())
</span><span style="color: rgba(0, 128, 128, 1)"> 4</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>             IFormatter formatter = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> BinaryFormatter();
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span> <span style="color: rgba(0, 0, 0, 1)">            formatter.Serialize(memoryStream, obj);
</span><span style="color: rgba(0, 128, 128, 1)"> 7</span>             memoryStream.Seek(<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">, SeekOrigin.Begin);
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>             <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> (T)formatter.Deserialize(memoryStream);
</span><span style="color: rgba(0, 128, 128, 1)"> 9</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">10</span>     }</pre>
</div>
<p>但BinaryFormatter在.NET5之后标记废弃了，原因是安全漏洞：<a href="https://learn.microsoft.com/zh-cn/dotnet/standard/serialization/binaryformatter-security-guide" rel="noopener nofollow">使用 BinaryFormatter 和相关类型时的反序列化风险 - .NET | Microsoft Learn</a>。官方推荐使用XML以及Json序列化等</p>
<p>2）XML序列化需要添加属性标记DataContract、DataMember（推荐Json序列化也添加此标记）</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 0, 1)">    [DataContract]
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> SerializerModel
</span><span style="color: rgba(0, 128, 128, 1)"> 3</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)"> 4</span> <span style="color: rgba(0, 0, 0, 1)">        [DataMember]
</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>         <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span> Name { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span> <span style="color: rgba(0, 0, 0, 1)">        [DataMember]
</span><span style="color: rgba(0, 128, 128, 1)"> 7</span>         <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">int</span> Age { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span> <span style="color: rgba(0, 0, 0, 1)">        [DataMember]
</span><span style="color: rgba(0, 128, 128, 1)"> 9</span>         <span style="color: rgba(0, 0, 255, 1)">public</span> TestMode Mode { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
</span><span style="color: rgba(0, 128, 128, 1)">10</span>     }</pre>
</div>
<p>DataContractSerializer<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.datacontractserializer?view=net-8.0" rel="noopener nofollow">DataContractSerializer 类 (System.Runtime.Serialization) | Microsoft Learn</a>实现XML序列化：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">1</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> T DeepCopyBySerializer&lt;T&gt;<span style="color: rgba(0, 0, 0, 1)">(T obj)
</span><span style="color: rgba(0, 128, 128, 1)">2</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">3</span>         <span style="color: rgba(0, 0, 255, 1)">using</span> <span style="color: rgba(0, 0, 255, 1)">var</span> stream = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> MemoryStream();
</span><span style="color: rgba(0, 128, 128, 1)">4</span>         <span style="color: rgba(0, 0, 255, 1)">var</span> serializer = <span style="color: rgba(0, 0, 255, 1)">new</span> DataContractSerializer(<span style="color: rgba(0, 0, 255, 1)">typeof</span><span style="color: rgba(0, 0, 0, 1)">(T));
</span><span style="color: rgba(0, 128, 128, 1)">5</span> <span style="color: rgba(0, 0, 0, 1)">        serializer.WriteObject(stream, obj);
</span><span style="color: rgba(0, 128, 128, 1)">6</span>         stream.Position = <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">7</span>         <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> (T)serializer.ReadObject(stream);
</span><span style="color: rgba(0, 128, 128, 1)">8</span>     }</pre>
</div>
<p>XML序列化还有一个XmlSerializer，就不介绍了。</p>
<p>DataContractSerializer使用的是一种流式序列化方式，复杂对象、数据量较大时，DataContractSerializer比 XmlSerializer基于反射的序列化更快。如果是需要可视化可读性强的XML、数据量小、性能要求不高，可以使用XmlSerializer</p>
<p>3）再说说Json序列化</p>
</div>
<div data-zone-id="0" data-line-index="0" data-line="true">已知最强的2个Json序列化器：微软的System.Text.Json和第三方成熟Newtonsoft.Json</div>
<div data-zone-id="0" data-line-index="0" data-line="true">如果是.NET版本推荐System.Text.Json，Framework版本使用Newtonsoft.Json。之前有统计过俩个方案的性能&nbsp;<a href="https://www.cnblogs.com/kybs0/p/17987512">.NET Json序列化方案选择 - 唐宋元明清2188 - 博客园</a></div>
<div data-zone-id="0" data-line-index="0" data-line="true">后面关注.NET8+，所以看System.Text.Json就好：</div>
<div data-zone-id="0" data-line-index="0" data-line="true">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">1</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> T DeepCopyByJson&lt;T&gt;<span style="color: rgba(0, 0, 0, 1)">(T obj)
</span><span style="color: rgba(0, 128, 128, 1)">2</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">3</span>         <span style="color: rgba(0, 0, 255, 1)">var</span> data =<span style="color: rgba(0, 0, 0, 1)"> System.Text.Json.JsonSerializer.Serialize(obj);
</span><span style="color: rgba(0, 128, 128, 1)">4</span>         <span style="color: rgba(0, 0, 255, 1)">return</span> System.Text.Json.JsonSerializer.Deserialize&lt;T&gt;<span style="color: rgba(0, 0, 0, 1)">(data);
</span><span style="color: rgba(0, 128, 128, 1)">5</span>     }</pre>
</div>
<h3><strong>4. 第三方库&nbsp;AutoMapper、DeepCloner等</strong></h3>
<p>补充下第三方库的使用</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> T DeepCopyByAutoMapper&lt;T&gt;<span style="color: rgba(0, 0, 0, 1)">(T obj)
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)"> 3</span>         <span style="color: rgba(0, 0, 255, 1)">var</span> config = <span style="color: rgba(0, 0, 255, 1)">new</span> MapperConfiguration(cfg =&gt;
<span style="color: rgba(0, 128, 128, 1)"> 4</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>             cfg.CreateMap&lt;T, T&gt;<span style="color: rgba(0, 0, 0, 1)">();
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span> <span style="color: rgba(0, 0, 0, 1)">        });
</span><span style="color: rgba(0, 128, 128, 1)"> 7</span>         <span style="color: rgba(0, 0, 255, 1)">var</span> mapper =<span style="color: rgba(0, 0, 0, 1)"> config.CreateMapper();
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>         T clone = mapper.Map&lt;T, T&gt;<span style="color: rgba(0, 0, 0, 1)">(obj);
</span><span style="color: rgba(0, 128, 128, 1)"> 9</span>         <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> clone;
</span><span style="color: rgba(0, 128, 128, 1)">10</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">11</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> T DeepCopyByDeepCloner&lt;T&gt;<span style="color: rgba(0, 0, 0, 1)">(T obj)
</span><span style="color: rgba(0, 128, 128, 1)">12</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">13</span>         <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> obj.DeepClone();
</span><span style="color: rgba(0, 128, 128, 1)">14</span>     }</pre>
</div>
<h3>性能测试Benchmark</h3>
<p>准备同样一个大小数据，Benchmark代码如下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">  1</span> <span style="color: rgba(0, 0, 0, 1)">    [MemoryDiagnoser]
</span><span style="color: rgba(0, 128, 128, 1)">  2</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> BenchmarkTest
</span><span style="color: rgba(0, 128, 128, 1)">  3</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">  4</span>         <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">readonly</span><span style="color: rgba(0, 0, 0, 1)"> BenchmarkTestMode _data;
</span><span style="color: rgba(0, 128, 128, 1)">  5</span> 
<span style="color: rgba(0, 128, 128, 1)">  6</span>         <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> BenchmarkTest()
</span><span style="color: rgba(0, 128, 128, 1)">  7</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">  8</span>             _data =<span style="color: rgba(0, 0, 0, 1)"> GetData();
</span><span style="color: rgba(0, 128, 128, 1)">  9</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)"> 10</span> <span style="color: rgba(0, 0, 0, 1)">        [Benchmark]
</span><span style="color: rgba(0, 128, 128, 1)"> 11</span>         <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> ShallowCloneByMemberwiseClone()
</span><span style="color: rgba(0, 128, 128, 1)"> 12</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)"> 13</span>             <span style="color: rgba(0, 0, 255, 1)">var</span> original =<span style="color: rgba(0, 0, 0, 1)"> _data;
</span><span style="color: rgba(0, 128, 128, 1)"> 14</span>             <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = <span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt; <span style="color: rgba(128, 0, 128, 1)">1000</span>; i++<span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)"> 15</span> <span style="color: rgba(0, 0, 0, 1)">            {
</span><span style="color: rgba(0, 128, 128, 1)"> 16</span>                 <span style="color: rgba(0, 0, 255, 1)">var</span> clone =<span style="color: rgba(0, 0, 0, 1)"> original.InnerShallowClone();
</span><span style="color: rgba(0, 128, 128, 1)"> 17</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)"> 18</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)"> 19</span> <span style="color: rgba(0, 0, 0, 1)">        [Benchmark]
</span><span style="color: rgba(0, 128, 128, 1)"> 20</span>         <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> ShallowCloneByRecordWith()
</span><span style="color: rgba(0, 128, 128, 1)"> 21</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)"> 22</span>             <span style="color: rgba(0, 0, 255, 1)">var</span> original =<span style="color: rgba(0, 0, 0, 1)"> _data;
</span><span style="color: rgba(0, 128, 128, 1)"> 23</span>             <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = <span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt; <span style="color: rgba(128, 0, 128, 1)">1000</span>; i++<span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)"> 24</span> <span style="color: rgba(0, 0, 0, 1)">            {
</span><span style="color: rgba(0, 128, 128, 1)"> 25</span>                 <span style="color: rgba(0, 0, 255, 1)">var</span> clone =<span style="color: rgba(0, 0, 0, 1)"> original with { };
</span><span style="color: rgba(0, 128, 128, 1)"> 26</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)"> 27</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)"> 28</span> <span style="color: rgba(0, 0, 0, 1)">        [Benchmark]
</span><span style="color: rgba(0, 128, 128, 1)"> 29</span>         <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> DeepCloneByManual()
</span><span style="color: rgba(0, 128, 128, 1)"> 30</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)"> 31</span>             <span style="color: rgba(0, 0, 255, 1)">var</span> original =<span style="color: rgba(0, 0, 0, 1)"> _data;
</span><span style="color: rgba(0, 128, 128, 1)"> 32</span>             <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = <span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt; <span style="color: rgba(128, 0, 128, 1)">1000</span>; i++<span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)"> 33</span> <span style="color: rgba(0, 0, 0, 1)">            {
</span><span style="color: rgba(0, 128, 128, 1)"> 34</span>                 <span style="color: rgba(0, 0, 255, 1)">var</span> benchmarkTestMode = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> BenchmarkTestMode()
</span><span style="color: rgba(0, 128, 128, 1)"> 35</span> <span style="color: rgba(0, 0, 0, 1)">                {
</span><span style="color: rgba(0, 128, 128, 1)"> 36</span>                     Angle =<span style="color: rgba(0, 0, 0, 1)"> original.Angle,
</span><span style="color: rgba(0, 128, 128, 1)"> 37</span>                     Name =<span style="color: rgba(0, 0, 0, 1)"> original.Name,
</span><span style="color: rgba(0, 128, 128, 1)"> 38</span>                     Points = original.Points.Select(i =&gt; <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Point(i.X, i.Y)).ToList()
</span><span style="color: rgba(0, 128, 128, 1)"> 39</span> <span style="color: rgba(0, 0, 0, 1)">                };
</span><span style="color: rgba(0, 128, 128, 1)"> 40</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)"> 41</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)"> 42</span> <span style="color: rgba(0, 0, 0, 1)">        [Benchmark]
</span><span style="color: rgba(0, 128, 128, 1)"> 43</span>         <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> DeepCloneByMemberwiseCloneManual()
</span><span style="color: rgba(0, 128, 128, 1)"> 44</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)"> 45</span>             <span style="color: rgba(0, 0, 255, 1)">var</span> original =<span style="color: rgba(0, 0, 0, 1)"> _data;
</span><span style="color: rgba(0, 128, 128, 1)"> 46</span>             <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = <span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt; <span style="color: rgba(128, 0, 128, 1)">1000</span>; i++<span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)"> 47</span> <span style="color: rgba(0, 0, 0, 1)">            {
</span><span style="color: rgba(0, 128, 128, 1)"> 48</span>                 <span style="color: rgba(0, 0, 255, 1)">var</span> clone =<span style="color: rgba(0, 0, 0, 1)"> original.InnerDeepClone();
</span><span style="color: rgba(0, 128, 128, 1)"> 49</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)"> 50</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)"> 51</span> <span style="color: rgba(0, 0, 0, 1)">        [Benchmark]
</span><span style="color: rgba(0, 128, 128, 1)"> 52</span>         <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> DeepCloneByDataContractSerializer()
</span><span style="color: rgba(0, 128, 128, 1)"> 53</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)"> 54</span>             <span style="color: rgba(0, 0, 255, 1)">var</span> original =<span style="color: rgba(0, 0, 0, 1)"> _data;
</span><span style="color: rgba(0, 128, 128, 1)"> 55</span>             <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = <span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt; <span style="color: rgba(128, 0, 128, 1)">1000</span>; i++<span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)"> 56</span> <span style="color: rgba(0, 0, 0, 1)">            {
</span><span style="color: rgba(0, 128, 128, 1)"> 57</span>                 <span style="color: rgba(0, 0, 255, 1)">using</span> <span style="color: rgba(0, 0, 255, 1)">var</span> stream = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> MemoryStream();
</span><span style="color: rgba(0, 128, 128, 1)"> 58</span>                 <span style="color: rgba(0, 0, 255, 1)">var</span> serializer = <span style="color: rgba(0, 0, 255, 1)">new</span> DataContractSerializer(<span style="color: rgba(0, 0, 255, 1)">typeof</span><span style="color: rgba(0, 0, 0, 1)">(BenchmarkTestMode));
</span><span style="color: rgba(0, 128, 128, 1)"> 59</span> <span style="color: rgba(0, 0, 0, 1)">                serializer.WriteObject(stream, original);
</span><span style="color: rgba(0, 128, 128, 1)"> 60</span>                 stream.Position = <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 61</span>                 <span style="color: rgba(0, 0, 255, 1)">var</span> clone =<span style="color: rgba(0, 0, 0, 1)"> (BenchmarkTestMode)serializer.ReadObject(stream);
</span><span style="color: rgba(0, 128, 128, 1)"> 62</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)"> 63</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)"> 64</span> <span style="color: rgba(0, 0, 0, 1)">        [Benchmark]
</span><span style="color: rgba(0, 128, 128, 1)"> 65</span>         <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> DeepCloneBySystemTextJson()
</span><span style="color: rgba(0, 128, 128, 1)"> 66</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)"> 67</span>             <span style="color: rgba(0, 0, 255, 1)">var</span> original =<span style="color: rgba(0, 0, 0, 1)"> _data;
</span><span style="color: rgba(0, 128, 128, 1)"> 68</span>             <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = <span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt; <span style="color: rgba(128, 0, 128, 1)">1000</span>; i++<span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)"> 69</span> <span style="color: rgba(0, 0, 0, 1)">            {
</span><span style="color: rgba(0, 128, 128, 1)"> 70</span>                 <span style="color: rgba(0, 0, 255, 1)">var</span> data =<span style="color: rgba(0, 0, 0, 1)"> System.Text.Json.JsonSerializer.Serialize(original);
</span><span style="color: rgba(0, 128, 128, 1)"> 71</span>                 <span style="color: rgba(0, 0, 255, 1)">var</span> clone = System.Text.Json.JsonSerializer.Deserialize&lt;BenchmarkTestMode&gt;<span style="color: rgba(0, 0, 0, 1)">(data);
</span><span style="color: rgba(0, 128, 128, 1)"> 72</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)"> 73</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)"> 74</span> <span style="color: rgba(0, 0, 0, 1)">        [Benchmark]
</span><span style="color: rgba(0, 128, 128, 1)"> 75</span>         <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> DeepCopyByAutoMapper()
</span><span style="color: rgba(0, 128, 128, 1)"> 76</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)"> 77</span>             <span style="color: rgba(0, 0, 255, 1)">var</span> original =<span style="color: rgba(0, 0, 0, 1)"> _data;
</span><span style="color: rgba(0, 128, 128, 1)"> 78</span>             <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = <span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt; <span style="color: rgba(128, 0, 128, 1)">1000</span>; i++<span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)"> 79</span> <span style="color: rgba(0, 0, 0, 1)">            {
</span><span style="color: rgba(0, 128, 128, 1)"> 80</span>                 <span style="color: rgba(0, 0, 255, 1)">var</span> clone =<span style="color: rgba(0, 0, 0, 1)"> DeepCopyByAutoMapper(original);
</span><span style="color: rgba(0, 128, 128, 1)"> 81</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)"> 82</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)"> 83</span> <span style="color: rgba(0, 0, 0, 1)">        [Benchmark]
</span><span style="color: rgba(0, 128, 128, 1)"> 84</span>         <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> DeepCopyByDeepCloner()
</span><span style="color: rgba(0, 128, 128, 1)"> 85</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)"> 86</span>             <span style="color: rgba(0, 0, 255, 1)">var</span> original =<span style="color: rgba(0, 0, 0, 1)"> _data;
</span><span style="color: rgba(0, 128, 128, 1)"> 87</span>             <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = <span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt; <span style="color: rgba(128, 0, 128, 1)">1000</span>; i++<span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)"> 88</span> <span style="color: rgba(0, 0, 0, 1)">            {
</span><span style="color: rgba(0, 128, 128, 1)"> 89</span>                 <span style="color: rgba(0, 0, 255, 1)">var</span> clone =<span style="color: rgba(0, 0, 0, 1)"> original.DeepClone();
</span><span style="color: rgba(0, 128, 128, 1)"> 90</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)"> 91</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)"> 92</span>         <span style="color: rgba(0, 0, 255, 1)">private</span> T DeepCopyByAutoMapper&lt;T&gt;<span style="color: rgba(0, 0, 0, 1)">(T original)
</span><span style="color: rgba(0, 128, 128, 1)"> 93</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)"> 94</span>             <span style="color: rgba(0, 0, 255, 1)">var</span> config = <span style="color: rgba(0, 0, 255, 1)">new</span> MapperConfiguration(cfg =&gt;
<span style="color: rgba(0, 128, 128, 1)"> 95</span> <span style="color: rgba(0, 0, 0, 1)">            {
</span><span style="color: rgba(0, 128, 128, 1)"> 96</span>                 cfg.CreateMap&lt;T, T&gt;<span style="color: rgba(0, 0, 0, 1)">();
</span><span style="color: rgba(0, 128, 128, 1)"> 97</span> <span style="color: rgba(0, 0, 0, 1)">            });
</span><span style="color: rgba(0, 128, 128, 1)"> 98</span>             <span style="color: rgba(0, 0, 255, 1)">var</span> mapper =<span style="color: rgba(0, 0, 0, 1)"> config.CreateMapper();
</span><span style="color: rgba(0, 128, 128, 1)"> 99</span>             T clone = mapper.Map&lt;T, T&gt;<span style="color: rgba(0, 0, 0, 1)">(original);
</span><span style="color: rgba(0, 128, 128, 1)">100</span>             <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> clone;
</span><span style="color: rgba(0, 128, 128, 1)">101</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">102</span>         <span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> BenchmarkTestMode GetData()
</span><span style="color: rgba(0, 128, 128, 1)">103</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">104</span>             <span style="color: rgba(0, 0, 255, 1)">var</span> original = <span style="color: rgba(0, 0, 255, 1)">new</span> BenchmarkTestMode() { Name = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Test</span><span style="color: rgba(128, 0, 0, 1)">"</span>, Angle = <span style="color: rgba(128, 0, 128, 1)">20</span><span style="color: rgba(0, 0, 0, 1)"> };
</span><span style="color: rgba(0, 128, 128, 1)">105</span>             original.Points = <span style="color: rgba(0, 0, 255, 1)">new</span> List&lt;Point&gt;<span style="color: rgba(0, 0, 0, 1)">();
</span><span style="color: rgba(0, 128, 128, 1)">106</span>             <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = <span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt; <span style="color: rgba(128, 0, 128, 1)">1000</span>; i++<span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">107</span> <span style="color: rgba(0, 0, 0, 1)">            {
</span><span style="color: rgba(0, 128, 128, 1)">108</span>                 original.Points.Add(<span style="color: rgba(0, 0, 255, 1)">new</span> Point(i, <span style="color: rgba(128, 0, 128, 1)">1000</span> -<span style="color: rgba(0, 0, 0, 1)"> i));
</span><span style="color: rgba(0, 128, 128, 1)">109</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)">110</span>             <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> original;
</span><span style="color: rgba(0, 128, 128, 1)">111</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">112</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">113</span> <span style="color: rgba(0, 0, 0, 1)">    [DataContract]
</span><span style="color: rgba(0, 128, 128, 1)">114</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> record <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> BenchmarkTestMode
</span><span style="color: rgba(0, 128, 128, 1)">115</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">116</span> <span style="color: rgba(0, 0, 0, 1)">        [DataMember]
</span><span style="color: rgba(0, 128, 128, 1)">117</span>         <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span> Name { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
</span><span style="color: rgba(0, 128, 128, 1)">118</span> <span style="color: rgba(0, 0, 0, 1)">        [DataMember]
</span><span style="color: rgba(0, 128, 128, 1)">119</span>         <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">int</span> Angle { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
</span><span style="color: rgba(0, 128, 128, 1)">120</span> <span style="color: rgba(0, 0, 0, 1)">        [DataMember]
</span><span style="color: rgba(0, 128, 128, 1)">121</span>         <span style="color: rgba(0, 0, 255, 1)">public</span> List&lt;Point&gt; Points { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
</span><span style="color: rgba(0, 128, 128, 1)">122</span>         <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> BenchmarkTestMode InnerShallowClone()
</span><span style="color: rgba(0, 128, 128, 1)">123</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">124</span>             <span style="color: rgba(0, 0, 255, 1)">return</span> (BenchmarkTestMode)<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.MemberwiseClone();
</span><span style="color: rgba(0, 128, 128, 1)">125</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">126</span>         <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> BenchmarkTestMode InnerDeepClone()
</span><span style="color: rgba(0, 128, 128, 1)">127</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">128</span>             <span style="color: rgba(0, 0, 255, 1)">var</span> clone = (BenchmarkTestMode)<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.MemberwiseClone();
</span><span style="color: rgba(0, 128, 128, 1)">129</span>             clone.Points = Points.Select(i =&gt; <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Point(i.X, i.Y)).ToList();
</span><span style="color: rgba(0, 128, 128, 1)">130</span>             <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> clone;
</span><span style="color: rgba(0, 128, 128, 1)">131</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">132</span>     }</pre>
</div>
<p>然后我们使用release把test跑起来</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">1</span>     <span style="color: rgba(0, 0, 255, 1)">var</span> summary = BenchmarkRunner.Run&lt;BenchmarkTest&gt;<span style="color: rgba(0, 0, 0, 1)">();
</span><span style="color: rgba(0, 128, 128, 1)">2</span>     Console.WriteLine(summary);</pre>
</div>
<p>1. 浅拷贝，我们对比MemberwiseClone 、Record数据类With</p>
<p>看下面测试结果，Record-with性能强的不是一丁点：</p>
<p><img src="https://img2024.cnblogs.com/blog/685541/202501/685541-20250114231729551-1034914081.png" alt="" loading="lazy"></p>
<p><strong>浅拷贝推荐Record数据类With操作</strong>，所以我们可以把record使用起来，record不只是简化以及可读性好。如果追求极致性能的话可以使用record struct结构体，record struct也是支持with操作。</p>
<p>2.&nbsp;深拷贝，主要有MemberwiseClone结合手动复制、手动复制、XML序列化、JSON序列化，第三方库AutoMapper、DeepCloner</p>
<p>执行行Benchmark测试，结果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/685541/202501/685541-20250115112204995-534958907.png" alt="" loading="lazy"></p>
<p>XML/JSON序列化 性能远远小于 手动复制、DeepCloner。另外，序列化操作我们可以看到内存总量增加超级多，运行期间会带来一定的内存暴涨问题。</p>
<p>所以大量复杂类似数据场景，<strong>深拷贝推荐使用第三方库DeepCloner</strong>，有精力的团队可以把DeepClone放在本地管理、研究。比如上面的大量数组数据，这方面相对手动复制优化了较多性能。以下是DeepCloner <a href="https://github.com/force-net/DeepCloner" rel="noopener nofollow">force-net/DeepCloner：适用于 .NET 的快速对象克隆器</a>优化的一些点，我翻译了下：</p>
<p><img src="https://img2024.cnblogs.com/blog/685541/202501/685541-20250115235401270-2017503306.png" alt="" loading="lazy"></p>
<p><strong>一般情况下推荐手动复制</strong>（或者结合MemberwiseClone），简单类型的属性对象，使用手动复制性能是最高的，可以在组件库自定义一套解析、反解析接口，在团队内统一使用。</p>
<p>如果只是快速实现功能、性能要求不高，可以使用XML/JSON序列化</p>
</div>
</div>
<div id="MySignature" role="contentinfo">
    <div>作者：<a href="http://www.cnblogs.com/kybs0/" target="_blank">唐宋元明清2188</a></div>
<div>出处：<a href="http://www.cnblogs.com/kybs0/" target="_blank">http://www.cnblogs.com/kybs0/</a></div>
<div>让学习成为习惯，假设明天就有重大机遇等着你，你准备好了么</div>
<div>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须在文章页面给出原文连接，否则保留追究法律责任的权利。 </div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="2.2316700840949073" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-16 08:45">2025-01-14 23:48</span>&nbsp;
<a href="https://www.cnblogs.com/kybs0">唐宋元明清2188</a>&nbsp;
阅读(<span id="post_view_count">870</span>)&nbsp;
评论(<span id="post_comment_count">13</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18669035" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18669035);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18669035', targetLink: 'https://www.cnblogs.com/kybs0/p/18669035', title: '.NET 数据拷贝方案选择' })">举报</a>
</div>
        