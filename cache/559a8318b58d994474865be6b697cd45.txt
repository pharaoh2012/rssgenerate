
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lyhabc/p/18660810/linux-sql-server-database-mirroring-configuration-guide" title="发布于 2025-01-22 08:00">
    <span role="heading" aria-level="2">低成本高可用方案！Linux系统下SQL Server数据库镜像配置全流程详解</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1 style="text-align: center;">低成本高可用方案！Linux系统下SQL Server数据库镜像配置全流程详解</h1>
<p>&nbsp;</p>
<h3>背景</h3>
<p>最近遇到一个客户需求，客户的生产环境有大量的SQL Server数据库（<span style="text-decoration: underline;"><span style="font-size: 18px;"><strong>大概180套</strong></span></span>），客户的诉求是需要把生产环境的Windows系统转为Linux系统，转为Linux系统之后需要沿用原来的数据库高可用方案。把数据库转到Linux系统比较容易，因为从SQL Server 2017开始就支持Linux系统，但是要沿用原来的数据库高可用方案就有点难度。了解到客户之前的生产环境所用的数据库高可用方案是数据库镜像，因为客户的生产环境高可用性要求不算太高，数据库镜像技术已经可以完全满足要求。</p>
<p>于是本人建议客户把SQL Server迁移到Linux系统之后，依然使用之前的数据库镜像这种数据库高可用方案。数据库镜像这种技术本身搭建非常简单，不需要借助任何第三方组件，搭建步骤跟Windows系统上的一模一样，而且从SQL Server 2005版本开始就已经引入数据库镜像，历经9个大版本迭代，稳定性久经考验。</p>
<p>在SQL Server 2016版本引入了多线程并行redo，它可以</p>
<p>（1）显著减少镜像集群和AlwaysOn可用性组集群的数据同步延迟。</p>
<p>（2）数据库的启动速度显著加快，数据库启动需要经历redo阶段。</p>
<p>（3）加快故障转移的速度</p>
<p><img src="https://img2024.cnblogs.com/blog/257159/202501/257159-20250109065937572-1289165343.png" alt=""></p>
<p>&nbsp;</p>
<p>很多用户会嫌弃Linux系统上的AlwaysOn可用性组搭建麻烦，因为需要借助Pacemaker与Corosync等第三方组件，搭建过程有一定的难度。对于生产环境上的数据库高可用性和性能要求不是很高的情况下，完全可以使用数据库镜像来替代AlwaysOn可用性组。</p>
<p><img src="https://img2024.cnblogs.com/blog/257159/202501/257159-20250108235146468-721622365.png" alt="" width="487" height="728"></p>
<h3>搭建步骤</h3>
<p>下面进行演示如何在Linux系统上搭建SQL Server数据库镜像，因为需要数据库自动故障转移能力，所以需要准备三台机器，第三台机器作为见证服务器，这个要求跟Windows系统上的部署方式是一模一样的。前提假设用户已经在Linux系统上安装好SQL Server数据库镜像。</p>
<p><strong>环境要求</strong></p>
<p>适用的数据库版本：<strong>SQL Server 2017 到 SQL Server 2022</strong></p>
<p>适用的操作系统版本：<strong>CentOS 7.X 到 CentOS 9.X（其他Linux发行版也可以，Ubuntu或者SUSE）</strong></p>
<p><strong>Linux系统下的数据库目录结构如下</strong>：</p>
<pre class="highlighter-hljs"><code>/data/mssql/1433/database &nbsp;
/data/mssql/1433/dbbackup
/data/mssql/1433/dump
/data/mssql/1433/tempdb</code></pre>
<table>
<thead>
<tr><th valign="top">&nbsp;</th><th valign="top">IP</th><th valign="top">主机名</th></tr>
</thead>
<tbody>
<tr>
<td valign="top">主库</td>
<td valign="top">192.168.22.122</td>
<td valign="top">wwwmssql122</td>
</tr>
<tr>
<td valign="top">镜像库</td>
<td valign="top">192.168.22.124</td>
<td valign="top">wwwmssql124</td>
</tr>
<tr>
<td valign="top">见证</td>
<td valign="top">192.168.22.128</td>
<td valign="top">wwwmssql128</td>
</tr>
</tbody>
</table>
<p><strong>正式开始搭建</strong></p>
<ol class="list-paddingleft-1">
<li>修改hosts配置文件，三台机器都要同时修改</li>
</ol>
<pre class="highlighter-hljs"><code>cat &lt;&lt;EOF &gt;&gt; /etc/hosts
192.168.22.122 &nbsp; wwwmssql122
192.168.22.124 &nbsp; wwwmssql124
192.168.22.128 &nbsp; wwwmssql128
EOF</code></pre>
<p>2. 首先确定要做镜像数据库的恢复模式为完整模式，用以下sql语句来查看</p>
<pre class="highlighter-hljs"><code>--主机192.168.22.122上执行
SELECT [name], [recovery_model_desc] FROM sys.[databases]</code></pre>
<p id="1736351507601">&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/257159/202501/257159-20250108235225385-1081423434.png" alt="" width="711" height="368"></p>
<p id="1736351546369">&nbsp;</p>
<p>3. 在主服务器和镜像服务器上和见证服务器上创建Master Key 、创建证书 ，根据提示在各自的服务器上执行</p>
<pre class="highlighter-hljs"><code>
--主机192.168.22.122上执行
USE master;
CREATE MASTER KEY ENCRYPTION BY PASSWORD =&nbsp;'master@2015key123';CREATE CERTIFICATE HOST_22_122_cert &nbsp;WITH SUBJECT =&nbsp;'HOST_22_122_certificate',
START_DATE =&nbsp;'09/20/2010',EXPIRY_DATE =&nbsp;'01/01/2099';

--备机192.168.22.124上执行
USE master;
CREATE MASTER KEY ENCRYPTION BY PASSWORD =&nbsp;'master@2015key123';CREATE CERTIFICATE HOST_22_124_cert &nbsp;WITH SUBJECT =&nbsp;'HOST_22_124_certificate',
START_DATE =&nbsp;'09/20/2010',EXPIRY_DATE =&nbsp;'01/01/2099';

--见证192.168.22.128上执行
USE master;
CREATE MASTER KEY ENCRYPTION BY PASSWORD =&nbsp;'master@2015key123';CREATE CERTIFICATE HOST_22_128_cert &nbsp;WITH SUBJECT =&nbsp;'HOST_22_128_certificate',
START_DATE =&nbsp;'09/20/2010',EXPIRY_DATE =&nbsp;'01/01/2099';</code></pre>
<p>4. 创建镜像端点，同一个实例上只能存在一个镜像端点 ，根据提示在各自的服务器上执行</p>
<pre class="highlighter-hljs"><code>

--主机192.168.22.122上执行
CREATE ENDPOINT Endpoint_Mirroring&nbsp;
STATE = STARTED&nbsp;
AS&nbsp;
TCP ( LISTENER_PORT=5022 , LISTENER_IP = ALL )&nbsp;
FOR&nbsp;
DATABASE_MIRRORING&nbsp;
( AUTHENTICATION = CERTIFICATE HOST_22_122_cert &nbsp;, ENCRYPTION = REQUIRED ALGORITHM AES , ROLE = ALL );

--备机192.168.22.124上执行
CREATE ENDPOINT Endpoint_Mirroring&nbsp;
STATE = STARTED&nbsp;
AS&nbsp;
TCP ( LISTENER_PORT=5022 , LISTENER_IP = ALL )&nbsp;
FOR&nbsp;
DATABASE_MIRRORING&nbsp;
( AUTHENTICATION = CERTIFICATE HOST_22_124_cert &nbsp;, ENCRYPTION = REQUIRED ALGORITHM AES , ROLE = ALL );

--见证192.168.22.128上执行
CREATE ENDPOINT Endpoint_Mirroring
STATE = STARTED
AS
TCP ( LISTENER_PORT=5022 , LISTENER_IP = ALL )
FOR
DATABASE_MIRRORING
( AUTHENTICATION = CERTIFICATE HOST_22_128_cert &nbsp;, ENCRYPTION = REQUIRED ALGORITHM AES , ROLE = ALL );</code></pre>
<p>5. &nbsp;每台机器都备份证书，然后互换，把证书scp到其他机器并且设置好权限 ，根据提示在各自的服务器上执行</p>
<pre class="highlighter-hljs"><code>--主机192.168.22.122上执行
BACKUP CERTIFICATE HOST_22_122_cert TO FILE =&nbsp;'/data/mssql/1433/dbbackup/HOST_22_122_cert.cer';
scp /data/mssql/1433/dbbackup/HOST_22_122_cert.cer &nbsp;root@192.168.22.124:/data/mssql/1433/dbbackup/
scp /data/mssql/1433/dbbackup/HOST_22_122_cert.cer &nbsp;root@192.168.22.128:/data/mssql/1433/dbbackup/
chown -R mssql:mssql &nbsp;/data/mssql/1433/*

--备机192.168.22.124上执行
BACKUP CERTIFICATE HOST_22_124_cert TO FILE =&nbsp;'/data/mssql/1433/dbbackup/HOST_22_124_cert.cer';
scp /data/mssql/1433/dbbackup/HOST_22_124_cert.cer &nbsp;root@192.168.22.128:/data/mssql/1433/dbbackup/
scp /data/mssql/1433/dbbackup/HOST_22_124_cert.cer &nbsp;root@192.168.22.122:/data/mssql/1433/dbbackup/
chown -R mssql:mssql &nbsp;/data/mssql/1433/*


--见证192.168.22.128上执行
BACKUP CERTIFICATE HOST_22_128_cert TO FILE =&nbsp;'/data/mssql/1433/dbbackup/HOST_22_128_cert.cer';
scp /data/mssql/1433/dbbackup/HOST_22_128_cert.cer &nbsp;root@192.168.22.124:/data/mssql/1433/dbbackup/
scp /data/mssql/1433/dbbackup/HOST_22_128_cert.cer &nbsp;root@192.168.22.122:/data/mssql/1433/dbbackup/
chown -R mssql:mssql &nbsp;/data/mssql/1433/*</code></pre>
<p>6. 新增主备机登陆用户 ，根据提示在各自的服务器上执行</p>
<pre class="highlighter-hljs"><code>--主机192.168.22.122上执行
CREATE LOGIN [wwwmssql124LoginUser] WITH PASSWORD =&nbsp;'User_Pass@2015key123';&nbsp;
CREATE USER [wwwmssql124User] FOR LOGIN [wwwmssql124LoginUser];&nbsp;
CREATE CERTIFICATE HOST_22_124_cert AUTHORIZATION [wwwmssql124User] FROM FILE ='/data/mssql/1433/dbbackup/HOST_22_124_cert.cer';
GRANT CONNECT ON ENDPOINT::Endpoint_Mirroring TO [wwwmssql124LoginUser];

CREATE LOGIN [wwwmssql128LoginUser] WITH PASSWORD =&nbsp;'User_Pass@2015key123';&nbsp;
CREATE USER [wwwmssql128User] FOR LOGIN [wwwmssql128LoginUser];&nbsp;
CREATE CERTIFICATE HOST_22_128_cert AUTHORIZATION [wwwmssql128User] FROM FILE ='/data/mssql/1433/dbbackup/HOST_22_128_cert.cer';
GRANT CONNECT ON ENDPOINT::Endpoint_Mirroring TO [wwwmssql128LoginUser];

--备机192.168.22.124上执行
CREATE LOGIN [wwwmssql122LoginUser] WITH PASSWORD =&nbsp;'User_Pass@2015key123';&nbsp;
CREATE USER [wwwmssql122User] FOR LOGIN [wwwmssql122LoginUser];&nbsp;
CREATE CERTIFICATE HOST_22_122_cert AUTHORIZATION [wwwmssql122User] FROM FILE ='/data/mssql/1433/dbbackup/HOST_22_122_cert.cer';
GRANT CONNECT ON ENDPOINT::Endpoint_Mirroring TO [wwwmssql122LoginUser];

CREATE LOGIN [wwwmssql128LoginUser] WITH PASSWORD =&nbsp;'User_Pass@2015key123';&nbsp;
CREATE USER [wwwmssql128User] FOR LOGIN [wwwmssql128LoginUser];&nbsp;
CREATE CERTIFICATE HOST_22_128_cert AUTHORIZATION [wwwmssql128User] FROM FILE ='/data/mssql/1433/dbbackup/HOST_22_128_cert.cer';
GRANT CONNECT ON ENDPOINT::Endpoint_Mirroring TO [wwwmssql128LoginUser];

--见证192.168.22.128上执行
CREATE LOGIN [wwwmssql122LoginUser] WITH PASSWORD =&nbsp;'User_Pass@2015key123';&nbsp;
CREATE USER [wwwmssql122User] FOR LOGIN [wwwmssql122LoginUser];&nbsp;
CREATE CERTIFICATE HOST_22_122_cert AUTHORIZATION [wwwmssql122User] FROM FILE ='/data/mssql/1433/dbbackup/HOST_22_122_cert.cer';
GRANT CONNECT ON ENDPOINT::Endpoint_Mirroring TO [wwwmssql122LoginUser];

CREATE LOGIN [wwwmssql124LoginUser] WITH PASSWORD =&nbsp;'User_Pass@2015key123';&nbsp;
CREATE USER [wwwmssql124User] FOR LOGIN [wwwmssql124LoginUser];&nbsp;
CREATE CERTIFICATE HOST_22_124_cert AUTHORIZATION [wwwmssql124User] FROM FILE ='/data/mssql/1433/dbbackup/HOST_22_124_cert.cer';
GRANT CONNECT ON ENDPOINT::Endpoint_Mirroring TO [wwwmssql124LoginUser];</code></pre>
<p>7. &nbsp;确保各个机器都放开了5022端口，数据库镜像数据同步需要使用5022端口，使用telnet命令和ss命令测试，根据提示在各自的服务器上执行</p>
<pre class="highlighter-hljs"><code>##主机192.168.22.122上执行
telnet 192.168.22.124 5022
telnet 192.168.22.128 5022

##备机192.168.22.124上执行
telnet 192.168.22.122 5022
telnet 192.168.22.128 5022

##见证192.168.22.128上执行
telnet 192.168.22.122 5022
telnet 192.168.22.124 5022

##通过ss命令可以看到数据库在侦听5022端口
ss -lntup
Netid &nbsp; &nbsp; State &nbsp; &nbsp; &nbsp; Recv-Q &nbsp; &nbsp; &nbsp;Send-Q &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Local Address:Port &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Peer Address:Port &nbsp; &nbsp; Process &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;
tcp &nbsp; &nbsp; &nbsp; LISTEN &nbsp; &nbsp; &nbsp;0 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 128 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0.0.0.0:1433 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0.0.0.0:* &nbsp; &nbsp; &nbsp; &nbsp; users:(("sqlservr",pid=1190,fd=114)) &nbsp; &nbsp;&nbsp;
tcp &nbsp; &nbsp; &nbsp; LISTEN &nbsp; &nbsp; &nbsp;0 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 128 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;127.0.0.1:1431 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0.0.0.0:* &nbsp; &nbsp; &nbsp; &nbsp; users:(("sqlservr",pid=1190,fd=120)) &nbsp; &nbsp;&nbsp;
tcp &nbsp; &nbsp; &nbsp; LISTEN &nbsp; &nbsp; &nbsp;0 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 128 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;127.0.0.1:1434 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0.0.0.0:* &nbsp; &nbsp; &nbsp; &nbsp; users:(("sqlservr",pid=1190,fd=117)) &nbsp; &nbsp;&nbsp;
tcp &nbsp; &nbsp; &nbsp; LISTEN &nbsp; &nbsp; &nbsp;0 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 128 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0.0.0.0:5022 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0.0.0.0:* &nbsp; &nbsp; &nbsp; &nbsp; users:(("sqlservr",pid=1190,fd=142)) &nbsp; &nbsp;&nbsp;</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/257159/202501/257159-20250108235303668-496306385.png" alt="" width="678" height="145"></p>
<p>8. 备份数据库(完整备份+事务日志备份)在主机执行</p>
<pre class="highlighter-hljs"><code>--主机192.168.22.122上执行
DECLARE @FileName NVARCHAR(MAX)
--(TestDB数据库完整备份)
SET @FileName =&nbsp;'/data/mssql/1433/dbbackup/TestDBBACKUP_FullBackup_1.bak'
BACKUP DATABASE [TestDB]
TO DISK=@FileName WITH FORMAT ,COMPRESSION

--(TestDB数据库日志备份)
SET @FileName =&nbsp;'/data/mssql/1433/dbbackup/TestDBBACKUP_logBackup_2.bak'
BACKUP LOG [TestDB]
TO DISK=@FileName WITH FORMAT ,COMPRESSION</code></pre>
<p>用scp命令拷贝备份文件到备机192.168.22.124</p>
<pre class="highlighter-hljs"><code>scp /data/mssql/1433/dbbackup/TestDBBACKUP_* &nbsp;root@192.168.22.124:/data/mssql/1433/dbbackup/</code></pre>
<p>9. &nbsp;还原数据库(指定norecovery方式还原)在备机执行</p>
<p>设置一下权限</p>
<pre class="highlighter-hljs"><code>#备机192.168.22.124上执行
chown -R mssql:mssql &nbsp;/data/mssql/1433/*</code></pre>
<p>在SSMS管理工具上执行</p>
<pre class="highlighter-hljs"><code>--备机192.168.22.124上执行
USE [master]
RESTORE DATABASE TestDB FROM &nbsp;DISK = N'/data/mssql/1433/dbbackup/TestDBBACKUP_FullBackup_1.bak'&nbsp;WITH &nbsp;FILE = 1,
NOUNLOAD,NORECOVERY, &nbsp;REPLACE, &nbsp;STATS = 5
GO

USE [master]
RESTORE LOG TestDB FROM &nbsp;DISK = N'/data/mssql/1433/dbbackup/TestDBBACKUP_logBackup_2.bak'&nbsp;WITH &nbsp;FILE = 1,
NOUNLOAD,NORECOVERY, &nbsp;REPLACE, &nbsp;STATS = 5
GO</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/257159/202501/257159-20250108235341885-1750341506.png" alt="" width="668" height="264"></p>
<p id="1736351622300">&nbsp;</p>
<p>上图中实例旁边有企鹅图标，说明这三个SQL Server实例跑在Linux系统上</p>
<p>&nbsp;</p>
<p id="1736351584454">&nbsp;</p>
<p>10. &nbsp;增加镜像伙伴，需要先在备机上执行，再在主机上执行，镜像弄好之后 ，根据提示在各自的服务器上执行</p>
<pre class="highlighter-hljs"><code>--备机192.168.22.124上执行
USE [master]
GO
ALTER DATABASE [TestDB] SET PARTNER =&nbsp;'TCP://192.168.22.122:5022'; &nbsp;--主机服务器的ip

--主机192.168.22.122上执行
USE [master]
GO
ALTER DATABASE [TestDB] SET PARTNER =&nbsp;'TCP://192.168.22.124:5022'; &nbsp;--镜像服务器的ip
ALTER DATABASE [TestDB] SET WITNESS =&nbsp;'TCP://192.168.22.128:5022'; &nbsp;--见证服务器的ip</code></pre>
<p>11. &nbsp;把数据库镜像的模式修改为高安全模式</p>
<pre class="highlighter-hljs"><code>--主机192.168.22.122上执行
--修改为高安全模式
USE [master]
GO
ALTER DATABASE [TestDB] SET PARTNER SAFETY FULL
GO</code></pre>
<h3>测试自动故障转移和手动故障转移</h3>
<ul class="list-paddingleft-1">
<li>手动故障转移</li>
</ul>
<pre class="highlighter-hljs"><code>--主机192.168.22.122上执行
--手动故障转移
USE [master]
GO
ALTER DATABASE [TestDB] SET PARTNER FAILOVER
GO</code></pre>
<ul class="list-paddingleft-1">
<li>自动故障转移</li>
</ul>
<pre class="highlighter-hljs"><code>使用poweroff命令直接关机或者killall sqlservr命令来直接停止SQL Server实例进程</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/257159/202501/257159-20250108235440067-383177724.png" alt="" width="697" height="296"></p>
<p id="1736351681045">&nbsp;</p>
<p><strong>测试结果</strong></p>
<p><strong><img src="https://img2024.cnblogs.com/blog/257159/202501/257159-20250108235447980-928876756.png" alt="" width="525" height="513"></strong></p>
<p id="1736351688801">&nbsp;</p>
<p>无论是<strong>手动故障转移</strong>还是<strong>自动故障转移</strong>（poweroff命令直接关机还是killall sqlservr 命令直接停止SQL Server实例进程）都能完全没有任何问题。</p>
<p>&nbsp;</p>
<h3>总结</h3>
<p>本文介绍了在Linux环境下为SQL Server数据库设置高可用性方案，数据库镜像自SQL Server 2005起开始稳定支持且无需借助第三方组件。数据库镜像作为一种简便且成本低廉的高可用性解决方案，不仅可以在Linux系统上顺利运行还具备自动和手动故障转移能力。通过简单的步骤配置，用户可以确保数据库在主服务器故障时快速切换完全满足生产环境的高可用性的需求。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>参考文章</strong></p>
<p>https://ithelp.ithome.com.tw/articles/10031291</p>
<p>https://www.tatvasoft.com/blog/how-to-configure-database-mirroring-for-sql-server/</p>
<p>https://www.sqlshack.com/sql-server-database-mirroring/</p>
<p>https://codingsight.medium.com/configure-database-mirroring-in-sql-server-c819f3ef3648</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;<img src="https://img2024.cnblogs.com/blog/257159/202409/257159-20240908204310924-1005667056.png" alt="" class="medium-zoom-image"></p>
<p><strong>本文版权归作者所有，未经作者同意不得转载。</strong></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.3465190589513889" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-22 08:01">2025-01-22 08:00</span>&nbsp;
<a href="https://www.cnblogs.com/lyhabc">桦仔</a>&nbsp;
阅读(<span id="post_view_count">274</span>)&nbsp;
评论(<span id="post_comment_count">3</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18660810" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18660810);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18660810', targetLink: 'https://www.cnblogs.com/lyhabc/p/18660810/linux-sql-server-database-mirroring-configuration-guide', title: '低成本高可用方案！Linux系统下SQL Server数据库镜像配置全流程详解' })">举报</a>
</div>
        