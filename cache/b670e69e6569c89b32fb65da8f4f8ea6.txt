
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18697995" title="发布于 2025-02-04 10:13">
    <span role="heading" aria-level="2">manim边学边做--局部变换</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>本次介绍的两个用于变换的动画类：<code>TransformMatchingShapes</code>和<code>TransformMatchingTex</code>。</p>
<p>它们的主要特点是对一组对象或一段文本进行局部变换，适用于复杂的图形或者文本的变换场景。</p>
<p>其中：</p>
<ol>
<li><code>TransformMatchingShapes</code>：用于不同形状的 VMobject 间转换，能自动匹配相似形状并创建平滑过渡动画，也支持手动指定匹配方式，适用于图形拼接、拆分等场景</li>
<li><code>TransformMatchingTex</code>：专门处理 LaTeX 文本对象转换，可自动匹配相同文本片段进行动画过渡，支持分组匹配，且保留文本样式，常用于数学公式推导、文本替换场景</li>
</ol>
<h1 id="1-动画概述">1. 动画概述</h1>
<h2 id="11-transformmatchingshapes">1.1. TransformMatchingShapes</h2>
<p><code>TransformMatchingShapes</code> 主要用于在两个包含多个不同形状（如圆形、正方形、三角形等）的 <code>VMobject</code> 之间进行动画转换。</p>
<p>当你想要将一组形状变换为另一组形状，并且希望相似的形状之间能够自然地过渡时，这个类就非常有用。</p>
<p>例如，在数学动画中，将一个由几个三角形组成的图案变换为一个由几个正方形组成的图案；</p>
<p>或者在展示图形的拼接和拆分过程中，将一个复杂图形拆分成多个简单图形，再重新组合成另一个复杂图形。</p>
<p>它的参数主要有：</p>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>mobject</td>
<td>Mobject</td>
<td>动画起始的对象，也就是需要进行形状转换的初始对象</td>
</tr>
<tr>
<td>target_mobject</td>
<td>Mobject</td>
<td>动画结束的目标对象</td>
</tr>
<tr>
<td>transform_mismatches</td>
<td>bool</td>
<td>是否对不匹配的子对象进行转换</td>
</tr>
<tr>
<td>fade_transform_mismatches</td>
<td>bool</td>
<td>是否淡化不匹配子对象的转换效果</td>
</tr>
<tr>
<td>key_map</td>
<td>dict</td>
<td>自定义子对象的匹配规则</td>
</tr>
</tbody>
</table>
<p><code>TransformMatchingShapes</code> 会自动识别两个 <code>VMobject</code> 中相似的形状，并在这些相似形状之间创建动画过渡。</p>
<p>相似性通常基于形状的类型（如圆形、正方形）和相对大小。</p>
<p><code>transform_mismatches</code>参数是控制是否对于没有自动匹配的对象也进行转换。</p>
<p>除了自动匹配，也可以通过<code>key_map</code>参数指定形状的匹配方式，这在自动匹配无法满足需求时非常有用。</p>
<p>例如，你可能希望将一个圆形匹配到一个椭圆形，或者将一个不规则形状匹配到另一个特定的不规则形状。</p>
<p>它的主要方法有：</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>get_mobject_key</td>
<td>用于获取与对象相关的关键信息</td>
</tr>
<tr>
<td>get_mobject_parts</td>
<td>用于获取对象的各个组成部分</td>
</tr>
</tbody>
</table>
<h2 id="12-transformmatchingtex">1.2. TransformMatchingTex</h2>
<p><code>TransformMatchingTex</code> 专门用于处理 <code>LaTeX</code> 文本对象之间的动画转换。</p>
<p>在数学公式推导、文本替换等场景中非常有用。</p>
<p>例如，在讲解数学公式的推导过程时，将一个公式逐步变换为另一个公式；</p>
<p>或者在展示文本的替换过程中，将一个单词或短语替换为另一个单词或短语。</p>
<p>在转换过程中，<code>TransformMatchingTex</code> 会保留文本的样式（如字体、颜色、大小等），使得转换后的文本与原始文本具有一致的外观。</p>
<p><code>TransformMatchingTex</code> 参数和方法和<code>TransformMatchingShapes</code>是一样的。</p>
<h1 id="2-使用示例">2. 使用示例</h1>
<p>下面通过示例来演示如何使用这两个局部变换的动画类。</p>
<h2 id="21-自动形状转换">2.1. 自动形状转换</h2>
<p>这个示例中，我们创建了一个包含圆形，正方形，星形和正八边形的 <code>VGroup</code> 作为起始形状，</p>
<p>另一个包含正八边形，星形，三角形和菱形的 <code>VGroup</code> 作为目标形状。</p>
<p><code>TransformMatchingShapes</code> 会自动尝试匹配相似的形状并进行转换，这里由于形状类型不同，会进行相应的变形动画。</p>
<pre><code class="language-python"># 创建起始形状
start_shapes = VGroup(
    Circle(color=BLUE),
    Square(color=RED),
    Star(color=GREEN),
    RegularPolygon(n=8, color=YELLOW),
)
# 创建目标形状
end_shapes = VGroup(
    RegularPolygon(n=8, color=YELLOW),
    Star(color=GREEN),
    Triangle(color=BLUE),
    RegularPolygon(n=4, color=RED),
)

self.add(start_shapes)
self.wait()
# 使用 TransformMatchingShapes 进行转换
self.play(
    TransformMatchingShapes(
        start_shapes,
        end_shapes,
        transform_mismatches=True,
    ),
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202502/83005-20250204101237629-88432316.gif" alt="" loading="lazy"></p>
<p>从动画可以看出，各种原始图形自动变换为跟自己最为接近的图形：</p>
<ol>
<li>蓝色圆形自动匹配转换为黄色正八边形</li>
<li>红色正方形转换为红色的菱形</li>
<li>黄色正八边形转换为蓝色三角形</li>
<li>绿色的星形没变</li>
</ol>
<h2 id="22-自定义形状转换">2.2. 自定义形状转换</h2>
<p>在这个示例中，我们除了创建起始和目标形状外，还定义了一个 <code>key_map</code> 字典来指定自定义的形状匹配规则。</p>
<p>这样，<code>TransformMatchingShapes</code> 会按照我们指定的规则进行形状转换。</p>
<pre><code class="language-python"># 创建起始形状
start_shapes = VGroup(
    Circle(color=BLUE),
    Square(color=RED),
    Star(color=GREEN),
    RegularPolygon(n=8, color=YELLOW),
)
# 创建目标形状
end_shapes = VGroup(
    RegularPolygon(n=8, color=YELLOW),
    Star(color=GREEN),
    Triangle(color=BLUE),
    Square(color=RED),
)

self.add(start_shapes)
self.wait()

# 自定义匹配规则
key_map = {
    Circle: Triangle,
}

# 使用 TransformMatchingShapes 并指定自定义匹配规则
self.play(
    TransformMatchingShapes(
        start_shapes,
        end_shapes,
        key_map=key_map,
        transform_mismatches=True,
    ),
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202502/83005-20250204101237607-705111107.gif" alt="" loading="lazy"></p>
<p>从动画可以看出，根据<code>key_map</code>参数，蓝色圆形被转换为蓝色的三角形，</p>
<p>而上一节自动匹配时，蓝色圆形是自动匹配转换为黄色正八边形的。</p>
<h2 id="23-公式转换示例">2.3. 公式转换示例</h2>
<p>这个示例中，我们使用<code>MathTex</code>创建一些公式，公式中用<code>{{ }}</code>对需要转换的对象进行分组。</p>
<p><code>TransformMatchingTex</code> 会将分组的部分作为一个整体进行匹配和转换。</p>
<pre><code class="language-python"># 创建起始公式
f1 = (
    VGroup(
        MathTex("a", color=RED),
        MathTex("b", color=GREEN),
        MathTex("c", color=YELLOW),
    )
    .arrange(RIGHT, buff=1)
)
# 创建目标公式
f2 = MathTex("{{x}}^2", "+", "{{y}}^2", "=", "{{z}}^2")
f3 = MathTex("{{a}}^2", "+", "{{b}}^2", "=", "{{c}}^2")

self.add(f1, f2)
self.wait()
# 使用 TransformMatchingTex 进行转换
self.play(TransformMatchingTex(VGroup(f1, f2), f3))

f4 = MathTex("{{a}}^2", "=", "{{c}}^2", "-", "{{b}}^2")
self.play(TransformMatchingTex(f3, f4))

f5 = MathTex("{{b}}^2", "=", "{{c}}^2", "-", "{{a}}^2")
self.play(TransformMatchingTex(f4, f5))
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202502/83005-20250204101237574-12260406.gif" alt="" loading="lazy"></p>
<h1 id="3-总结">3. 总结</h1>
<p>文中的代码只是关键部分的截取，完整的代码共享在网盘中（<code>matching.py</code>），</p>
<p>下载地址: <a href="https://url11.ctfile.com/d/45455611-64751047-a5be65?p=6872" target="_blank" rel="noopener nofollow">完整代码</a> (访问密码: 6872)</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.171403564267361" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-04 10:13">2025-02-04 10:13</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">79</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18697995" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18697995);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18697995', targetLink: 'https://www.cnblogs.com/wang_yb/p/18697995', title: 'manim边学边做--局部变换' })">举报</a>
</div>
        