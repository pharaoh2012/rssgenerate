
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/johnnyzen/p/18901093" title="发布于 2025-05-28 20:44">
    <span role="heading" aria-level="2">[Java/模板渲染引擎/技术选型] 模板引擎-技术调研</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="概述-模板渲染引擎--模板引擎">概述： 模板渲染引擎 := 模板引擎</h1>
<h2 id="为什么要使用模板渲染引擎模板渲染引擎的作用">为什么要使用【模板(渲染)引擎】？模板(渲染)引擎的作用?</h2>
<ul>
<li>模板引擎可以让（网站）程序实现界面与数据分离，业务代码与逻辑代码的分离，大大提升了开发效率，良好的设计也使得代码重用变得更加容易。</li>
</ul>
<blockquote>
<ul>
<li>我们司空见惯的模板安装卸载等概念，基本上都和模板引擎有着千丝万缕的联系。</li>
</ul>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202505/1173617-20250528184740275-1988624120.png" alt="" loading="lazy"></p>
<ul>
<li><strong>模板引擎</strong>不只是可以让你实现<strong>代码分离</strong>（业务逻辑代码和用户界面代码），也可以实现<strong>数据分离</strong>（动态数据与静态数据），还可以实现<strong>代码单元共享</strong>（代码重用），甚至是多语言、动态页面与静态页面自动均衡（SDE）等等与用户界面可能没有关系的功能。</li>
</ul>
<h1 id="thymeleaf-apache-20---推荐指数9010">Thymeleaf (Apache 2.0)  : 推荐指数=9.0/10</h1>
<h2 id="简介">简介</h2>
<ul>
<li>项目URL</li>
</ul>
<blockquote>
<ul>
<li><a href="http://www.thymeleaf.org" target="_blank" rel="noopener nofollow">http://www.thymeleaf.org</a></li>
<li><a href="https://github.com/thymeleaf/thymeleaf" target="_blank" rel="noopener nofollow">https://github.com/thymeleaf/thymeleaf</a></li>
</ul>
<blockquote>
<p>github star / fork</p>
</blockquote>
</blockquote>
<pre><code class="language-txt">20250528 : 2.9k star / 510 fork
</code></pre>
<ul>
<li>开源许可协议: Apache 2.0</li>
</ul>
<h2 id="特点">特点</h2>
<ul>
<li>Thymeleaf 支持在<strong>有网络</strong>和<strong>无网络</strong>的环境下皆可运行。</li>
</ul>
<blockquote>
<p>即 它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。<br>
这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。<br>
浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；<br>
当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</p>
</blockquote>
<ul>
<li>Thymeleaf <strong>开箱即用</strong>的特性。</li>
</ul>
<blockquote>
<p>它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。<br>
同时开发人员也可以扩展和创建自定义的方言。</p>
</blockquote>
<ul>
<li>Thymeleaf 提供<code>spring</code><strong>标准方言</strong>和一个与 <code>Spring MVC</code> <strong>集成</strong>的可选模块————可以快速的实现表单绑定、属性编辑器、国际化等功能。</li>
</ul>
<blockquote>
<p>目前主流的模板引擎之一，Spring Boot推荐<br>
优点：语法简洁，功能强大。<br>
缺点：性能差。</p>
</blockquote>
<h2 id="语法">语法</h2>
<ul>
<li>
<p>获取变量的值 <code>${...}</code></p>
</li>
<li>
<p>链接 <code>@{...}</code></p>
</li>
<li>
<p>文本替换 <code>th:text=${...}</code></p>
</li>
</ul>
<blockquote>
<blockquote>
<p>这里可以替换id值，class值以及内容等</p>
</blockquote>
</blockquote>
<ul>
<li>判断语句</li>
</ul>
<pre><code class="language-txt">th:if
th:unless
th:switch
等
</code></pre>
<ul>
<li>遍历 <code>th:each</code></li>
</ul>
<blockquote>
<p>...<br>
可参考下图，如果需要了解更多可以查看对应的API文档</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202505/1173617-20250528183502694-1505261815.png" alt="" loading="lazy"></p>
<h2 id="依赖安装">依赖安装</h2>
<pre><code class="language-xml">&lt;!-- 方式1 https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-thymeleaf --&gt;
&lt;!--
&lt;dependency&gt;
	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
	&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;
	&lt;version&gt;${spring-boot.version}&lt;/version&gt;
&lt;/dependency&gt;
--&gt;

&lt;!-- 方式2 https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf --&gt;
&lt;dependency&gt;
	&lt;groupId&gt;org.thymeleaf&lt;/groupId&gt;
	&lt;artifactId&gt;thymeleaf&lt;/artifactId&gt;
	&lt;version&gt;${thymeleaf.version}&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<blockquote>
<ul>
<li><code>spring-boot.version</code> : 3.3.5</li>
<li><code>thymeleaf.version</code> : 3.1.2.RELEASE</li>
</ul>
</blockquote>
<h2 id="普通java程序中的基本使用">普通Java程序中的基本使用</h2>
<pre><code class="language-java">import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Test;
import org.thymeleaf.ITemplateEngine;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;
import org.thymeleaf.context.WebContext;
import org.thymeleaf.templatemode.TemplateMode;
import org.thymeleaf.templateresolver.ITemplateResolver;
import org.thymeleaf.templateresolver.StringTemplateResolver;
import org.thymeleaf.web.IWebExchange;

import java.util.Calendar;

@Slf4j
public class ThymeleafTemplateEngineUtils {
    //ITemplateEngine templateEngine
    private static TemplateEngine templateEngine = null;

    //ITemplateResolver templateResolver
    private static StringTemplateResolver templateResolver = null;

    //IContext
    //IWebExchange webExchange;
    //WebContext context = new WebContext(webExchange, webExchange.getLocale());
    private static Context context = new Context();//实际场景中，不建议此属性为静态属性

    static {
        init();
    }

    private static void init(){
        templateResolver = new StringTemplateResolver();

        templateEngine = new TemplateEngine();
        templateEngine.setTemplateResolver(templateResolver);

        context = new Context();
    }

    /**
     * TEXT 渲染模式
     */
    @Test
    public void textRenderTest() {
        templateResolver.setTemplateMode(TemplateMode.TEXT);

        context.setVariable("today", "2011-11-11");
        String text = templateEngine.process("Today is: [(${today})]", context);
        log.info("{}", text);//Today is: 2011-11-11
    }

    /**
     * HTML 渲染模式
     */
    @Test
    public void htmlRenderTest() {
        templateResolver.setTemplateMode(TemplateMode.HTML);

        context.setVariable("today", "2011-11-11");
        String text = templateEngine.process("&lt;p&gt;Today is: &lt;span th:text=\"${today}\"&gt;13 february 2011&lt;/span&gt;.&lt;/p&gt;", context);
        log.info("{}", text);//&lt;p&gt;Today is: &lt;span&gt;2011-11-11&lt;/span&gt;.&lt;/p&gt;
    }
}
</code></pre>
<h2 id="spring-mvc-应用程序中的基本使用">Spring MVC 应用程序中的基本使用</h2>
<ul>
<li>配置 TemplateResolver</li>
</ul>
<pre><code class="language-java">import org.thymeleaf.templateresolver.ITemplateResolver;
import org.thymeleaf.templateresolver.StringTemplateResolver;

@Configuration
public class TemplateResolverConfiguration {
	@Bean
	public StringTemplateResolver defaultTemplateResolver() {
		StringTemplateResolver resolver = new StringTemplateResolver();
        templateResolver.setTemplateMode(TemplateMode.HTML);
		return resolver;
	}
}
</code></pre>
<ul>
<li>对 HTTP 接口请求内容的动态渲染</li>
</ul>
<pre><code class="language-java">import org.thymeleaf.ITemplateEngine;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;
import org.thymeleaf.context.WebContext;

@Autowired
private SpringTemplateEngine templateEngine;

@RequestMapping("test")
public String test(){
	Context ctx = new Context();
	ctx.setVariable("today", "2011-11-11");
	String str = templateEngine.process("&lt;p&gt;Today is: &lt;span th:text=\"${today}\"&gt;13 february 2011&lt;/span&gt;.&lt;/p&gt;", ctx);
	return str;
}
</code></pre>
<h2 id="springboot-应用程序中的基本使用">SpringBoot 应用程序中的基本使用</h2>
<ul>
<li>SpringBoot 应用中 : 直接在pom文件中引入依赖</li>
</ul>
<pre><code class="language-xml">&lt;dependency&gt;
　　&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
　　&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202505/1173617-20250528183058517-432506123.png" alt="" loading="lazy"></p>
<ul>
<li>然后，只要将<code>html</code>文件放入<code>classpath:templates</code>文件下，<code>thymeleaf</code>就能自动完成渲染</li>
</ul>
<blockquote>
<p>例如， Controller 中返回的字符串会直接到该文件夹中找到对应的页面。</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202505/1173617-20250528183251738-1692031517.png" alt="" loading="lazy"></p>
<ul>
<li>导入<code>Thymeleaf</code>命名空间：在<code>html</code>文件中添加代码:</li>
</ul>
<pre><code class="language-xml">&lt;html lang="en" xmlns:th="http://www.thymeleaf.org"&gt;
</code></pre>
<h1 id="freemarkerlgpl--apache20--mit-不推荐">FreeMarker(LGPL =&gt; Apache2.0 =&gt; MIT) 【不推荐】</h1>
<h2 id="简介-1">简介</h2>
<ul>
<li><code>FreeMarker</code> 是一款 <strong>模板引擎</strong>： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个<strong>Java类库</strong>，是一款程序员可以嵌入他们所开发产品的组件。</li>
</ul>
<blockquote>
<p>模板编写为 <code>FreeMarker Template Language</code> (<code>FTL</code>)。它是简单的，专用的语言， 不是 像PHP那样成熟的编程语言。<br>
那就意味着要准备数据在真实编程语言中来显示，比如数据库查询和业务运算， 之后模板显示已经准备好的数据。<br>
在模板中，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据。</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202505/1173617-20250528184740275-1988624120.png" alt="" loading="lazy"></p>
<blockquote>
<p><a href="http://freemarker.foofun.cn/" target="_blank" rel="noopener nofollow">http://freemarker.foofun.cn/</a><br>
这种方式通常被称为 <code>MVC</code> (<strong>模型-视图-控制器</strong>) 模式，对于<strong>动态网页</strong>来说，是一种<strong>特别流行的模式</strong>。<br>
它帮助从开发人员(Java 程序员)中分离出网页设计师(HTML设计师)。<br>
设计师无需面对模板中的复杂逻辑， 在没有程序员来修改或重新编译代码时，也可以修改页面的样式。</p>
</blockquote>
<ul>
<li>
<p>而<code>FreeMarker</code>最初的设计，是被用来在MVC模式的Web开发框架中生成HTML页面的，它没有被绑定到 Servlet或HTML或任意Web相关的东西上。它也可以用于非Web应用环境中。</p>
</li>
<li>
<p>URL</p>
</li>
</ul>
<blockquote>
<ul>
<li><a href="http://freemarker.foofun.cn" target="_blank" rel="noopener nofollow">http://freemarker.foofun.cn</a></li>
<li><a href="https://github.com/freemarker" target="_blank" rel="noopener nofollow">https://github.com/freemarker</a></li>
</ul>
<blockquote>
<p><a href="https://github.com/freemarker/freemarker-old" target="_blank" rel="noopener nofollow">https://github.com/freemarker/freemarker-old</a><br>
<a href="https://github.com/freemarker/freemarker3" target="_blank" rel="noopener nofollow">https://github.com/freemarker/freemarker3</a><br>
github star / fork</p>
</blockquote>
</blockquote>
<pre><code class="language-txt">[freemarker-old]
20250528 : 360 star / 126 fork

[freemarker3]
20250528 : 11 star / 3 fork
</code></pre>
<blockquote>
<blockquote>
<p>PS :<span style="color: rgba(255, 0, 0, 1)"> 从 star 数可大致猜测，这个项目因为盲目废弃了老项目、并新创建了一个不能向下兼容的新项目，导致了这个项目逐渐走向灭亡。</span></p>
</blockquote>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202505/1173617-20250528184306915-473713174.png" alt="" loading="lazy"></p>
<ul>
<li>开源许可协议:</li>
</ul>
<blockquote>
<ul>
<li><a href="https://github.com/freemarker/freemarker3?tab=License-1-ov-file#readme" target="_blank" rel="noopener nofollow">https://github.com/freemarker/freemarker3?tab=License-1-ov-file#readme</a> : 基于 MIT 协议</li>
<li></li>
</ul>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202505/1173617-20250528185221504-355205863.png" alt="" loading="lazy"></p>
<blockquote>
<p>图: freemarker3</p>
</blockquote>
<blockquote>
<ul>
<li><a href="https://github.com/freemarker/freemarker-old?tab=License-1-ov-file#readme" target="_blank" rel="noopener nofollow">https://github.com/freemarker/freemarker-old?tab=License-1-ov-file#readme</a></li>
</ul>
<blockquote>
<p>FreeMarker 1.x : LGPL<br>
FreeMarker 2.x(2.3.21 +) : Apache 2.0</p>
</blockquote>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1173617/202505/1173617-20250528185447289-1998235090.png" alt="" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/1173617/202505/1173617-20250528185500685-2071960379.png" alt="" loading="lazy"></p>
<blockquote>
<p>图: freemarker-old</p>
</blockquote>
<h2 id="特点-1">特点</h2>
<ul>
<li>在所有采用网页静态化手段的网站中，<code>FreeMarker</code>使用的比例大大的超过了其他的一些技术。</li>
<li>HTML静态化也是某些<strong>缓存策略</strong>使用的手段，对于系统中频繁使用数据库查询但是内容更新很小的应用，可以使用FreeMarker将HTML静态化。</li>
</ul>
<blockquote>
<p>比如，一些网站的公用设置信息，这些信息基本都是可以通过后台来管理并存储在数据库中，这些信息其实会大量的被前台程序调用，每一次调用都会去查询一次数据库，但是这些信息的更新频率又会很小。<br>
因此，也可以考虑将这部分内容进行后台更新的时候进行静态化，这样就避免了大量的数据库访问请求，提高了网站的性能。</p>
</blockquote>
<ul>
<li>优点</li>
</ul>
<blockquote>
<ul>
<li>不能轻易突破模板语言开始编写Java代码，因此降低了领域逻辑漏进视图层的危险几率，也提高了网站的性能。</li>
</ul>
</blockquote>
<ul>
<li>缺点</li>
</ul>
<blockquote>
<ul>
<li>需要一点附加配置来将其平稳地集成到应用程序中，一些IDE可能并不完全支持它，当然还有开发者或设计者也许需要学习一门陌生的模板语言。</li>
</ul>
</blockquote>
<h2 id="springboot应用程序中的基本使用">SpringBoot应用程序中的基本使用</h2>
<ul>
<li>引入依赖</li>
</ul>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<ul>
<li>在配置文件中添加FreeMaker的配置如下后就可以使用了</li>
</ul>
<pre><code class="language-properties">#       设定ftl文件路径
spring.freemarker.tempalte-loader-path=classpath:/templates
#        关闭缓存，及时刷新
spring.freemarker.cache=false
spring.freemarker.charset=UTF-8
spring.freemarker.check-template-location=true
spring.freemarker.content-type=text/html
spring.freemarker.expose-request-attributes=true
spring.freemarker.expose-session-attributes=true
spring.freemarker.request-context-attribute=request#设置FreeMaker文件的后缀
spring.freemarker.suffix=.ftl
</code></pre>
<h2 id="语法-1">语法</h2>
<blockquote>
<p>语法：可以参考API文档</p>
</blockquote>
<h1 id="apache-velocityapache-20--推荐指8010">Apache Velocity(Apache 2.0) : 推荐指=8.0/10</h1>
<h2 id="简介-2">简介</h2>
<ul>
<li>项目URL</li>
</ul>
<blockquote>
<ul>
<li><a href="https://velocity.apache.org" target="_blank" rel="noopener nofollow">https://velocity.apache.org</a></li>
<li><a href="https://velocity.apache.org/engine/2.4.1/" target="_blank" rel="noopener nofollow">https://velocity.apache.org/engine/2.4.1/</a></li>
<li><a href="https://github.com/apache/velocity-engine" target="_blank" rel="noopener nofollow">https://github.com/apache/velocity-engine</a></li>
</ul>
<blockquote>
<p>github star / fork</p>
</blockquote>
</blockquote>
<pre><code class="language-txt">20240528 : 386 star / 134 fork
</code></pre>
<ul>
<li>
<p>开源许可协议 : Apache 2.0</p>
</li>
<li>
<p>Velocity 是一个基于 Java 的模板引擎。它允许任何人使用简单而强大的模板语言来引用 Java 代码中定义的对象。</p>
</li>
<li>
<p>当 Velocity 用于 Web 开发时，Web 设计人员可以与 Java 程序员并行工作，根据模型-视图-控制器 （MVC） 模型开发网站，这意味着网页设计人员可以只专注于创建看起来不错的网站，而程序员可以只专注于编写一流的代码。Velocity 将 Java 代码与 Web 页面分开，使 Web 站点在其生命周期内更易于维护，并为 Java Server Pages （JSP） 或 PHP 提供了可行的替代方案。</p>
</li>
<li>
<p>Velocity 的功能远远超出了 Web 的领域;例如，它可用于从模板生成 SQL、PostScript 和 XML。它既可以用作生成源代码和报告的独立实用程序，也可以用作其他系统的集成组件。例如，Velocity 为各种 Web 框架提供模板服务，使它们能够使用视图引擎，从而根据真正的 MVC 模型促进 Web 应用程序的开发。</p>
</li>
<li>
<p><code>Velocity</code> 是 <code>Apache Software Foundation</code> 的一个项目，负责创建和维护与 Apache Velocity 引擎相关的开源软件。<br>
在 Velocity 项目中创建的所有软件都可以在 Apache 软件许可下免费向公众开放。</p>
</li>
</ul>
<h2 id="特点-2">特点</h2>
<ul>
<li>
<p>Velocity是一个基于Java的模板引擎。它允许任何人使用简单但功能强大的模板语言来引用Java代码中定义的对象。</p>
</li>
<li>
<p>优点：</p>
</li>
</ul>
<blockquote>
<ul>
<li>使用了<strong>模板缓冲</strong>。</li>
</ul>
<blockquote>
<p>在<strong>模板缓冲机制</strong>的作用下，模板不再是每次出现请求的时候从<strong>磁盘</strong>读取，而是以<strong>最理想的方式</strong>在内存中保存和解析。<br>
在开发期间，<strong>模板缓冲</strong>通常处于<strong>禁用状态</strong>，因为这时请求数量较少，而且要求对页面的修改立即产生效果。<br>
开发完毕之后，模板一般不再改变，此时就可以启用<strong>模板缓冲功能</strong>。因此，Velocity<strong>执行速度</strong>明显优于<code>JSP</code>。</p>
</blockquote>
</blockquote>
<ul>
<li>缺点：</li>
</ul>
<blockquote>
<ul>
<li>不是<strong>官方标准</strong></li>
<li><strong>用户群体</strong>和<strong>第三方标签库</strong>较少，且对<code>JSP</code><strong>标签</strong>支持不够好。</li>
</ul>
</blockquote>
<h1 id="jsp-不推荐">JSP 【不推荐】</h1>
<blockquote>
<p>不推荐的理由：太老了、页面与业务代码的耦合度太高、性能差。</p>
</blockquote>
<h2 id="简介-3">简介</h2>
<ul>
<li>虽然是一款<strong>功能比较强大的模板引擎</strong>，并被广大开发者熟悉，但它<strong>前后端耦合</strong>比较高。</li>
</ul>
<blockquote>
<p>比如，前端的html页面还要手动修改成jsp页面，大大加重了工作量，而且动态和静态资源也是耦合性太高。</p>
</blockquote>
<ul>
<li>
<p>其次，JSP页面的效率没有HTML高，因为JSP是<strong>同步加载</strong>，而且JSP需要<code>Tomcat</code>，但又不支持<code>nginx</code>等，已经<strong>跟不上时代的潮流</strong>。</p>
</li>
<li>
<p>综上：目前开发中已经很少用JSP了，只是我们很多时候会在碰到一些以前的框架里有用到JSP技术，实在感兴趣的朋友可以试一试、体验下。</p>
</li>
</ul>
<h1 id="jinja2apache-20--推荐指数7010">Jinja2(Apache 2.0) : 推荐指数=7.0/10</h1>
<h2 id="简介-4">简介</h2>
<ul>
<li>项目URL</li>
</ul>
<blockquote>
<ul>
<li><a href="https://github.com/HubSpot/jinjava/" target="_blank" rel="noopener nofollow">https://github.com/HubSpot/jinjava/</a></li>
</ul>
<blockquote>
<p>git star / fork</p>
</blockquote>
</blockquote>
<pre><code class="language-txt">20250528 : 731 star / 170 fork
</code></pre>
<blockquote>
<ul>
<li><a href="https://www.javadoc.io/doc/com.hubspot.jinjava/jinjava" target="_blank" rel="noopener nofollow">https://www.javadoc.io/doc/com.hubspot.jinjava/jinjava</a></li>
<li><a href="https://jinja.palletsprojects.com/en/3.1.x/" target="_blank" rel="noopener nofollow">https://jinja.palletsprojects.com/en/3.1.x/</a> [推荐]</li>
<li><a href="http://docs.jinkan.org/docs/jinja2/templates.html" target="_blank" rel="noopener nofollow">http://docs.jinkan.org/docs/jinja2/templates.html</a> [推荐]</li>
<li><a href="http://docs.jinkan.org/docs/jinja2/templates.html#for" target="_blank" rel="noopener nofollow">http://docs.jinkan.org/docs/jinja2/templates.html#for</a> [推荐]</li>
<li><a href="https://product.hubspot.com/blog/jinjava-a-jinja-for-your-java" target="_blank" rel="noopener nofollow">https://product.hubspot.com/blog/jinjava-a-jinja-for-your-java</a></li>
</ul>
</blockquote>
<ul>
<li>
<p>开源许可协议: Apache 2.0</p>
</li>
<li>
<p>基于 Java 的模板引擎，基于 django 模板语法，适用于渲染 jinja 模板（至少是 HubSpot 内容中使用的 jinja 子集）。目前用于生产，在 <a href="http://www.hubspot.com/products/sites" target="_blank" rel="noopener nofollow">HubSpot CMS</a> 上呈现数千个网站，每月页面浏览量达数亿次。</p>
</li>
</ul>
<blockquote>
<p>注意：需要 Java &gt;= 8。最初从 <a href="https://code.google.com/p/jangod/" target="_blank" rel="noopener nofollow">jangod</a> 分叉而来。</p>
</blockquote>
<h2 id="依赖安装-1">依赖安装</h2>
<pre><code class="language-xml">&lt;dependency&gt;
	&lt;groupId&gt;com.hubspot.jinjava&lt;/groupId&gt;
	&lt;artifactId&gt;jinjava&lt;/artifactId&gt;
	&lt;version&gt;{ LATEST_VERSION }&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="适用场景">适用场景</h2>
<ul>
<li>适合原来以 Python 语言为主开发语言的工程师/团队</li>
</ul>
<blockquote>
<ul>
<li>Jinja2 在 Python 领域是最火的模板引擎之一。</li>
</ul>
</blockquote>
<ul>
<li>不适合需要与 Spring 框架集成，以实现动态网页渲染功能的情况。</li>
</ul>
<h1 id="y-推荐文献">Y 推荐文献</h1>
<ul>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/337729633" target="_blank" rel="noopener nofollow">Java后端模板引擎对比 - Zhihu</a></p>
</li>
<li>
<p><a href="https://www.jianshu.com/p/65cb345d3fe6" target="_blank" rel="noopener nofollow">Java中使用FreeMaker实现模板渲染 - jianshu</a></p>
</li>
<li>
<p><a href="https://www.jianshu.com/p/bcba20eeab48" target="_blank" rel="noopener nofollow">Java中使用velocity实现模板渲染 - jianshu</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/stormjun/article/details/133413070" target="_blank" rel="noopener nofollow">使用 Velocity 模板引擎的 Spring Boot 应用 - CSDN</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/qq_40990306/article/details/130131685" target="_blank" rel="noopener nofollow">Velocity入门到精通(上篇) - CSDN</a></p>
</li>
<li>
<p><a href="https://www.kaifaxueyuan.com/frontend/thymeleaf3/thymeleaf3-textual-template-modes1.html" target="_blank" rel="noopener nofollow">Thymeleaf 3.0教程：13 文本模板模式(一) - 开发学院</a></p>
</li>
</ul>
<h1 id="x-参考文献">X 参考文献</h1>
<ul>
<li><a href="https://www.cnblogs.com/ywb-articles/p/10627398.html" target="_blank">模板引擎总结(Thymeleaf，FreeMarker，Enjoy，Velocity，JSP等)  - 博客园</a></li>
</ul>

</div>
<div id="MySignature" role="contentinfo">
    <div class="essaySuffix-box">
    <div class="essaySuffix-box-left" style=" margin: 6px auto; ">
        <img src="https://blog-static.cnblogs.com/files/johnnyzen/cnblogs-qq-group-qrcode.gif?t=1679679148" alt="QQ沟通交流群" onload="changeImg(this,200,100)">
    </div>
<div class="essaySuffix-box-right">
    <span class="essaySuffix-right-title">本文作者</span>：
        <strong><span><a href="https://github.com/Johnny-ZTSD" target="_blank">千千寰宇</a></span></strong>
    <br>
    <span style="font-weight: bold; white-space:nowrap;">本文链接</span>：
        <a href="https://www.cnblogs.com/johnnyzen" target="_blank" id="articleLinkElement"> https://www.cnblogs.com/johnnyzen</a>
    <br>
    <span class="essaySuffix-right-title">关于博文</span>：评论和私信会在第一时间回复，或<a href="https://msg.cnblogs.com/msg/send/johnnyzen" target="_blank">直接私信</a>我。
    <br>
    <span class="essaySuffix-right-title">版权声明</span>：本博客所有文章除特别声明外，均采用 <a title="https://creativecommons.org/licenses/by-nc-nd/4.0/" href="http://blog.sina.com.cn/s/blog_896327b90102y6c6.html" alt="BY-NC-SA" target="_blank">BY-NC-SA</a> 
    许可协议。转载请注明出处！<br>
    <span class="essaySuffix-right-title">日常交流</span>：大数据与软件开发-QQ交流群: 774386015<strong>
        <span style="color: #ff0000; font-size: 12pt;">【<a id="post-up" onclick="votePost(getArticleNumber(),'Digg')" href="javascript:void(0);">入群二维码</a>】</span></strong>参见左下角。您的支持、鼓励<span style="color: #ff0000; font-size: 12pt;"></span>是博主技术写作的重要动力！
    <br>
</div>
<div style="clear: both;">
</div>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5994319087372685" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-28 21:58">2025-05-28 20:44</span>&nbsp;
<a href="https://www.cnblogs.com/johnnyzen">千千寰宇</a>&nbsp;
阅读(<span id="post_view_count">56</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18901093);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18901093', targetLink: 'https://www.cnblogs.com/johnnyzen/p/18901093', title: '[Java/模板渲染引擎/技术选型] 模板引擎-技术调研' })">举报</a>
</div>
        