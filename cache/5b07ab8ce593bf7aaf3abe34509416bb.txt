
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/makemylife/p/19013883" title="发布于 2025-07-30 20:50">
    <span role="heading" aria-level="2">基于 RuoYi-Vue-Pro 定制了一个后台管理系统 ， 开源出来！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2487169/202507/2487169-20250730204947347-128222552.png" class="lazyload"></p>
<blockquote>
<p>项目地址：<a href="https://github.com/makemyownlife/magic-admin" target="_blank" rel="noopener nofollow">https://github.com/makemyownlife/magic-admin</a></p>
</blockquote>
<h1 id="1-项目背景">1 项目背景</h1>
<p>从职业生涯伊始，我一直是微服务架构的坚定拥趸，这很大程度上源于长期深耕互联网行业，习惯了高并发、分布式架构下的开发模式。</p>
<p>然而，去年在优化某航空公司核心用户中心系统时，我的技术认知受到了不小的冲击。</p>
<p>因为航空公司用户中心是一个典型的单体应用——尽管业务量不小，但稳定的业务模型和有限的扩展需求，使得单体架构反而比微服务更高效、更经济。</p>
<p>事实上，单体应用在 IT 领域始终占据着不可替代的生态位。甚至可以说，在大多数业务场景下，单体架构不仅完全够用，甚至可能是更优解。</p>
<p>它的价值主要体现在：<strong>开发效率高、运维复杂度低</strong>，尤其适合业务边界清晰、迭代节奏可控的中小型系统。</p>
<p>因此，我想自己写一个单体开发框架，但考虑到从零开始，会花费较长的时间，最终决定在成熟的单体开发框架上定制开发。</p>
<p>在知乎、Github 上搜索【快速开发框架】 ，很多的话题都绕不开若依 RuoYi 。开源世界 RuoYi 单体框架有三个不同的项目，分别是：<strong>ruoyi-vue</strong> 、<strong>ruoyi-vue-plus</strong> 、<strong>ruoyi-vue-pro</strong> 。</p>
<p>这三个项目源码，我都仔细研读过了，功能对比细节如下表 ：</p>
<table>
<thead>
<tr>
<th><strong>评估维度</strong></th>
<th><strong>RuoYi-Vue</strong></th>
<th><strong>RuoYi-Vue-Plus</strong></th>
<th><strong>RuoYi-Vue-Pro</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>核心优势</strong></td>
<td>极简开箱即用</td>
<td>多租户/功能增强</td>
<td>全生态功能预制</td>
</tr>
<tr>
<td><strong>二次开发</strong></td>
<td>⭐⭐⭐⭐⭐（源码简洁）</td>
<td>⭐⭐⭐☆（需理解模块化）</td>
<td>⭐⭐（需深度裁剪）</td>
</tr>
<tr>
<td><strong>成本效益</strong></td>
<td>人力/时间成本最低</td>
<td>中等投入高回报</td>
<td>(中等偏上)需评估功能利用率</td>
</tr>
</tbody>
</table>
<blockquote>
<p>有兴趣的同学可以参看对比文章 ，<a href="https://mp.weixin.qq.com/s/J_FUQHB3Ji35Uk1e40yHWg" target="_blank" rel="noopener nofollow">https://mp.weixin.qq.com/s/J_FUQHB3Ji35Uk1e40yHWg</a></p>
</blockquote>
<p>最终，我选择基于 RuoYi-Vue-Pro 进行定制开发 ，原因很简单：基础功能丰富，且 UI 界面也符合我的口味。</p>
<p>项目的名称：magic-admin   ,  保留了 RuoYi-Vue-Pro 的基础功能 ，同时在<strong>客户端管理</strong>、<strong>代码组织结构</strong>、 <strong>多租户管理</strong>这三个层面做了定制。</p>
<h1 id="2-设计概览">2 设计概览</h1>
<p>后端单体开发平台基于开源项目 ruoyi-vue-pro 重构 。</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2487169/202507/2487169-20250730204947347-1592469554.png" class="lazyload"></p>
<ul>
<li>后端采用 Spring Boot、MySQL + MyBatis Plus、Redis + Redisson</li>
<li>消息队列可使用 Event、Redis、RabbitMQ、Kafka、RocketMQ 等</li>
<li>权限认证使用 Spring Security &amp; Token &amp; Redis，支持多终端、多种用户的认证系统</li>
<li>支持加载动态权限菜单，按钮级别权限控制，Redis 缓存提升性能</li>
</ul>
<p>模块设计图如下：</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2487169/202507/2487169-20250730204947384-245597590.png" class="lazyload"></p>
<p><strong>1、基础模块</strong></p>
<table>
<thead>
<tr>
<th>功能</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>用户管理</td>
<td>用户是系统操作者，该功能主要完成系统用户配置</td>
</tr>
<tr>
<td>角色管理</td>
<td>角色菜单权限分配、设置角色按机构进行数据范围权限划分</td>
</tr>
<tr>
<td>菜单管理</td>
<td>配置系统菜单、操作权限、按钮权限标识等，本地缓存提供性能</td>
</tr>
<tr>
<td>部门管理</td>
<td>配置系统组织机构（公司、部门、小组），树结构展现支持数据权限</td>
</tr>
<tr>
<td>岗位管理</td>
<td>配置系统用户所属担任职务</td>
</tr>
<tr>
<td>客户端管理</td>
<td>配置系统客户端信息</td>
</tr>
<tr>
<td>字典管理</td>
<td>对系统中经常使用的一些较为固定的数据进行维护</td>
</tr>
<tr>
<td>操作日志</td>
<td>系统正常操作日志记录和查询</td>
</tr>
<tr>
<td>登录日志</td>
<td>系统登录日志记录查询，包含登录异常</td>
</tr>
<tr>
<td>通知公告</td>
<td>系统通知公告信息发布维护</td>
</tr>
<tr>
<td>地区管理</td>
<td>展示省份、城市、区镇等城市信息，支持 IP 对应城市</td>
</tr>
</tbody>
</table>
<p><strong>2、基础设施</strong></p>
<table>
<thead>
<tr>
<th>描述</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>代码生成</td>
<td>前后端代码的生成（Java、Vue、SQL、单元测试），支持 CRUD 下载</td>
</tr>
<tr>
<td>系统接口</td>
<td>基于 Swagger 自动生成相关的 RESTful API 接口文档</td>
</tr>
<tr>
<td>表单构建</td>
<td>拖动表单元素生成相应的 HTML 代码，支持导出 JSON、Vue 文件</td>
</tr>
<tr>
<td>配置管理</td>
<td>对系统动态配置常用参数，支持 SpringBoot 加载</td>
</tr>
<tr>
<td>定时任务</td>
<td>在线（添加、修改、删除)任务调度包含执行结果日志</td>
</tr>
<tr>
<td>文件服务</td>
<td>支持将文件存储到 S3（MinIO、阿里云、腾讯云、七牛云）、本地、FTP、数据库等</td>
</tr>
<tr>
<td>消息队列</td>
<td>基于 Redis 实现消息队列，Stream 提供集群消费，Pub/Sub 提供广播消费</td>
</tr>
<tr>
<td>服务保障</td>
<td>基于 Redis 实现分布式锁、幂等、限流功能，满足高并发场景</td>
</tr>
</tbody>
</table>
<p>界面截图见下图：</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2487169/202507/2487169-20250730204948301-1525405169.gif" class="lazyload"></p>
<h1 id="3-定制功能">3 定制功能</h1>
<p><strong>1、删除多租户功能</strong></p>
<p>多租户功能是指<strong>一套系统可以同时服务多个不同的租户（客户或组织），并且每个租户的数据和配置相互隔离</strong>，彼此不可见。</p>
<table>
<thead>
<tr>
<th>方式</th>
<th>说明</th>
<th>优缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>独立数据库</strong></td>
<td>每个租户使用单独的数据库</td>
<td>✅ 隔离性好，安全性高<br>❌ 运维成本高</td>
</tr>
<tr>
<td><strong>共享数据库，独立Schema</strong></td>
<td>同一数据库，不同租户使用不同表结构（Schema）</td>
<td>✅ 资源利用率高<br>❌ 需数据库支持</td>
</tr>
<tr>
<td><strong>共享数据库，共享表（租户ID字段）</strong></td>
<td>所有租户数据存同一表，用 <code>tenant_id</code> 区分</td>
<td>✅ 成本最低<br>❌ 需严格代码控制</td>
</tr>
</tbody>
</table>
<p>ruoyi-vue-pro 是采用了第三种方式来实现的，每张表需要添加 tenant_id 字段 ，我认为不同的业务形态对于多租户功能的需求是不一样，采用一刀切的使用 <code>tenant_id</code> 区分可能会导致系统的复杂度更高 ,  出现 BUG 的风险系数高，所以我删除了多租户功能，保持和 ruoyi-vue (若依版本) 一致。</p>
<p><strong>2、客户端管理</strong></p>
<p>后台系统不仅仅可以支持后台登录，也应该可以支持 APP 或者 小程序等其他终端登录。</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2487169/202507/2487169-20250730204947378-1657036256.png" class="lazyload"></p>
<p>不同终端在发送请求时，都需要再请求头中传输客户端 Key , 不同终端可配置独立的 <strong>Token 有效期、权限策略</strong>。</p>
<p><strong>3、Token 管理</strong></p>
<p>下图是 ruoyi-vue-pro 的 Token 记录表 即：数据库是 Token 的存储容器 。</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2487169/202507/2487169-20250730204947794-1423073454.png" class="lazyload"></p>
<p>虽然每次查询 accessToken 都会先从 Redis 先查询一次 ，但假如在同一时刻有大量 Token 失效，那么数据库就会成为瓶颈，可能会有缓存雪崩的风险。</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2487169/202507/2487169-20250730204947872-2064440586.png" class="lazyload"></p>
<p>而且 Token 的生命周期通过数据库管理，需要考虑很多的细节，我不确定从功能角度形成闭环。</p>
<p>我的做法是所有的 Token 都通过 Redis 来存储，同时每个客户端都有独立的 namespace ，见下图：</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2487169/202507/2487169-20250730204947347-123881240.png" class="lazyload"></p>
<p><strong>4、包层级结构</strong></p>
<p>相比  ruoyi-vue-pro ， 我更加倾向于相对简洁的包层级结构。</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2487169/202507/2487169-20250730204947376-1517128394.png" class="lazyload"></p>
<p>如图，包结构分为 controller 、domain、mapper 、 service 四个核心包，同时 domain 根据领域分为五个子包：</p>
<ul>
<li>dataobject :  数据实体对象 ，可以简单的理解，一个对象映射一张表</li>
<li>enums：枚举对象，比如错误码</li>
<li>vo:  前端请求/响应对象</li>
<li>convert ：通过 service 将 dataobject 对象转换成 VO 对象</li>
<li>dto：内置服务调用对象</li>
</ul>
<p>同时，我也修改了代码生成逻辑，生成的目录也完全按照上面的标准。</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2487169/202507/2487169-20250730204947318-881806408.png" class="lazyload"></p>
<h1 id="4-启动服务端">4 启动服务端</h1>
<p>本地电脑上项目运行环境依赖组件以及版本信息如下：</p>
<ul>
<li>IntelliJ IDEA  版本 2019 +</li>
<li>Git 代码版本管理工具</li>
<li>JDK 8 +</li>
<li>Maven（如果 IntelliJ IDEA 2021 版本及以上，内置了 Maven 组件）</li>
</ul>
<h2 id="01-克隆项目">01 克隆项目</h2>
<p>打开 Github 项目地址， 复制对应的 SSH 或 HTTP 克隆地址。</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2487169/202507/2487169-20250730204947282-583127098.png" class="lazyload"></p>
<p>打开 IntelliJ IDEA，菜单栏顶部找到 Git -&gt; Clone 选项。</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2487169/202507/2487169-20250730204948922-897838524.png" class="lazyload"></p>
<p>点击 Clone 后，URL 文本框填写项目的 HTTP 或 SSH 地址，比如 HTTP 的地址：<code>git@github.com:makemyownlife/magic-admin.git</code>，Directory 填写项目存储在本地的目录地址。</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2487169/202507/2487169-20250730204947421-800220801.png" class="lazyload"></p>
<p>等待克隆及 Maven 初始化即可。</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2487169/202507/2487169-20250730204947325-1214323101.png" class="lazyload"></p>
<p>拉下来后，可在项目根目录执行 <code>mvn clean install</code> 测试是否具备运行环境。</p>
<h2 id="02-初始化-mysql">02 初始化 MySQL</h2>
<p>项目当前支持 MySQL 5.7 +  ，首先需要创建一个名字为 <code>magic-admin</code> 数据库 。</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2487169/202507/2487169-20250730204947414-447438486.png" class="lazyload"></p>
<p>然后分别导入 magic_admin.sql ，quartz.sql 这两个文件。</p>
<ul>
<li>
<p><strong>magic_admin.sql</strong>：用于创建或初始化 MagicAdmin 后台管理系统所需的数据库结构和初始数据 。</p>
</li>
<li>
<p><strong>quartz.sql</strong> : Quartz 调度框架的数据库脚本，用于在数据库中创建 Quartz 所需的表结构，以便支持持久化任务调度 。</p>
</li>
</ul>
<h2 id="03-项目启动">03 项目启动</h2>
<p>项目依赖 JDK 1.8 + ，因此理论上兼容性非常强。</p>
<p>配置文件分为 生产 prod 、本地开发 local 两个环境文件，在本地运行，需要修改本地环境文件。</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2487169/202507/2487169-20250730204947807-218611433.png" class="lazyload"></p>
<p><strong>1、修改 MySQL 数据库信息：</strong></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2487169/202507/2487169-20250730204947581-413223002.png" class="lazyload"></p>
<p><strong>2、修改 Redis 数据库信息：</strong></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2487169/202507/2487169-20250730204947355-1426351216.png" class="lazyload"></p>
<p><strong>个人本地环境，一般笔者并不会开启密码，建议生产环境开启。</strong></p>
<p>启动 MagicAdminApplication.java 即可。</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2487169/202507/2487169-20250730204947379-1255136258.png" class="lazyload"></p>
<h1 id="5-启动-admin-ui">5 启动 admin UI</h1>
<p>前端 UI 需要在本机安装 NodeJs ，可参考：</p>
<blockquote>
<p><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener nofollow">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></p>
<p><a href="https://blog.csdn.net/weixin_45565886/article/details/141828707" target="_blank" rel="noopener nofollow">https://blog.csdn.net/weixin_45565886/article/details/141828707</a></p>
</blockquote>
<hr>
<p>打开 Githu 项目地址：<a href="https://github.com/makemyownlife/magic-admin-ui" target="_blank" rel="noopener nofollow">https://github.com/makemyownlife/magic-admin-ui</a>  复制对应的 SSH 或 HTTP 克隆地址。</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2487169/202507/2487169-20250730204947410-1032545198.png" class="lazyload"></p>
<p>通过 git clone 命令克隆到本地自定义目录，然后执行如下命令：</p>
<pre><code class="language-bash"># 安装 pnpm，提升依赖的安装速度
npm config set registry https://registry.npmjs.org
npm install -g pnpm
# 安装依赖
pnpm install

# 启动服务
npm run dev
</code></pre>
<p>启动完成后，浏览器会自动打开 <a href="http://localhost:80" target="_blank" rel="noopener nofollow">http://localhost:80</a> ，可以看到前端界面。</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2487169/202507/2487169-20250730204948679-2016155087.png" class="lazyload"></p>
<blockquote>
<p>默认账号密码：admin/magic123456</p>
</blockquote>
<h1 id="6-未来规划">6 未来规划</h1>
<p>框架设计的原则还是要简洁和易于维护，未来会在如下两个层面持续优化：</p>
<p>1、客户端管理优化（加密签名增强）</p>
<p>2、添加流程引擎模块（企业级工作流支持）</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-30 20:50">2025-07-30 20:50</span>&nbsp;
<a href="https://www.cnblogs.com/makemylife">勇哥编程游记</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19013883);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19013883', targetLink: 'https://www.cnblogs.com/makemylife/p/19013883', title: '基于 RuoYi-Vue-Pro 定制了一个后台管理系统 ， 开源出来！' })">举报</a>
</div>
        