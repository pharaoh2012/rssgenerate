
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/edisontalk/p/18960534/quick-start-on-polyglot-notebook" title="发布于 2025-07-02 08:30">
    <span role="heading" aria-level="2">.NET程序员的多语言笔记本：Polyglot Notebook</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        之前在学习机器学习的时候，使用了Jupyter Notebook这个笔记本工具，感觉十分好用。于是我就在想.NET这边有没有类似的，今天就跟你介绍下Polyglot Notebook这个多语言笔记本工具。Polyglot Notebook是一个由Microsoft开发的交互式编程环境，它允许用户在同一个笔记本中混合使用多种编程语言，旨在提高开发者在处理复杂数据分析和机器学习任务时的效率和灵活性。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>大家好，我是Edison。</p>
<p>之前在学习机器学习的时候，使用了Jupyter Notebook这个笔记本工具，我就在想.NET这边有没有类似的，今天就跟你介绍下Polyglot Notebook这个工具。</p>
<h1><strong>Notebook是什么鬼？</strong></h1>
Notebook是一种混合格式化文本和可执行代码，创建具有可运行示例的特殊文档程序。Notebook由多个单元格组成，它们是不同的文本区域，通常有三种区域：
<ul class="list-paddingleft-1">
<li>代码单元：包含可执行的代码示例</li>
<li>输出单元格：包含上次执行关联代码单元格的结果</li>
<li>Markdown单元格：用于编辑和显示文本内容，包含符合markdown格式的文本、图像、图表等</li>
</ul>
<p>Jupyter是Notebook技术的经典代表，基本我们学习Python相关的内容如数据科学都会用到它，非常好用。</p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250701220906891-1910461215.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<h1><strong>Polyglot Notebook</strong></h1>
<p>Polyglot Notebook是一个由Microsoft开发的交互式编程环境，它允许用户在同一个笔记本中混合使用多种编程语言，旨在提高开发者在处理复杂数据分析和机器学习任务时的效率和灵活性。</p>
<p>一句话总结：<strong>Polyglot Notebook = 交互式编程笔记本 + Markdown + Coding</strong></p>
<p>目前，它支持混合使用以下编程语言：</p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250701220934364-459249638.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>我们目前可以在Visual Studio Code中通过安装这个扩展来进行安装它：</p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250701220943167-1538762462.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<h1><strong>快速开始</strong></h1>
<h3><strong><span><span>（1）准备工作</span></span></strong></h3>
<ul>
<li>安装.NET SDK 以及 VS Code</li>
<li>安装Polyglot Notebook扩展插件</li>
</ul>
<p><em>注意：目前Polyglot插件要求安装.NET 9 SDK才可以运行。</em></p>
<h3><strong><span><span>（2）Hello World</span></span></strong></h3>
<p>创建一个hello-world.dib文件（jupyter是.ipynb文件），选择C# Script内核，开始写出第一句代码，点击下图中的1号红色区域按钮即可实现代码执行输出。</p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250701221030346-1568426957.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>你可以通过点击上图中2号红色区域，从C# 切换到另一种 编程语言，比如切换到 JavaScript：</p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250701221043413-1810226255.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p><span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;data-content&quot;:&quot;[{\&quot;type\&quot;:\&quot;block\&quot;,\&quot;id\&quot;:\&quot;dk8c-1652876793035\&quot;,\&quot;name\&quot;:\&quot;paragraph\&quot;,\&quot;data\&quot;:{\&quot;version\&quot;:1},\&quot;nodes\&quot;:[{\&quot;type\&quot;:\&quot;text\&quot;,\&quot;id\&quot;:\&quot;CmYV-1652876793036\&quot;,\&quot;leaves\&quot;:[{\&quot;text\&quot;:\&quot;Apache Kafka是一款\&quot;,\&quot;marks\&quot;:[]},{\&quot;text\&quot;:\&quot;开源的消息引擎系统\&quot;,\&quot;marks\&quot;:[{\&quot;type\&quot;:\&quot;bold\&quot;}]},{\&quot;text\&quot;:\&quot;。\&quot;,\&quot;marks\&quot;:[]}]}],\&quot;state\&quot;:{}},{\&quot;type\&quot;:\&quot;block\&quot;,\&quot;id\&quot;:\&quot;LkWc-1652879629260\&quot;,\&quot;name\&quot;:\&quot;image\&quot;,\&quot;data\&quot;:{\&quot;version\&quot;:1,\&quot;url\&quot;:\&quot;//note.youdao.com/yws/res/0/WEBRESOURCE57da98f333a501d9dc29bfb5680b9d80\&quot;,\&quot;width\&quot;:281,\&quot;height\&quot;:150,\&quot;style\&quot;:{\&quot;textAlign\&quot;:\&quot;center\&quot;}},\&quot;nodes\&quot;:[],\&quot;state\&quot;:{\&quot;renderSource\&quot;:\&quot;//note.youdao.com/yws/res/0/WEBRESOURCE57da98f333a501d9dc29bfb5680b9d80\&quot;,\&quot;initialSize\&quot;:{\&quot;width\&quot;:281,\&quot;height\&quot;:148},\&quot;loading\&quot;:false}},{\&quot;type\&quot;:\&quot;block\&quot;,\&quot;id\&quot;:\&quot;xh4n-1652876897909\&quot;,\&quot;name\&quot;:\&quot;paragraph\&quot;,\&quot;data\&quot;:{\&quot;version\&quot;:1},\&quot;nodes\&quot;:[{\&quot;type\&quot;:\&quot;text\&quot;,\&quot;id\&quot;:\&quot;3hx7-1652876897893\&quot;,\&quot;leaves\&quot;:[{\&quot;text\&quot;:\&quot;根据维基百科的定义，消息引擎系统是一组规范。企业利用这组规范在不同系统之间传递语义准确的消息，实现松耦合的异步式数据传递。通俗来讲，就是系统 A 发送消息给消息引擎系统，系统 B 从消息引擎系统中读取 A 发送的消息。\&quot;,\&quot;marks\&quot;:[]}]}],\&quot;state\&quot;:{}}]&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;text-transform: none;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; text-align: left; margin: 10px 8px; background-color: rgb(255, 255, 255); outline: 0px; visibility: visible; line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span>除了添加代码示例，我们还可以添加文本内容，例如下图中的1号和2号红色区域所示。此外，点击下图中的3号红色按钮即可实现预览。</span></span></p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250701221057317-649236468.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p><span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;data-content&quot;:&quot;[{\&quot;type\&quot;:\&quot;block\&quot;,\&quot;id\&quot;:\&quot;dk8c-1652876793035\&quot;,\&quot;name\&quot;:\&quot;paragraph\&quot;,\&quot;data\&quot;:{\&quot;version\&quot;:1},\&quot;nodes\&quot;:[{\&quot;type\&quot;:\&quot;text\&quot;,\&quot;id\&quot;:\&quot;CmYV-1652876793036\&quot;,\&quot;leaves\&quot;:[{\&quot;text\&quot;:\&quot;Apache Kafka是一款\&quot;,\&quot;marks\&quot;:[]},{\&quot;text\&quot;:\&quot;开源的消息引擎系统\&quot;,\&quot;marks\&quot;:[{\&quot;type\&quot;:\&quot;bold\&quot;}]},{\&quot;text\&quot;:\&quot;。\&quot;,\&quot;marks\&quot;:[]}]}],\&quot;state\&quot;:{}},{\&quot;type\&quot;:\&quot;block\&quot;,\&quot;id\&quot;:\&quot;LkWc-1652879629260\&quot;,\&quot;name\&quot;:\&quot;image\&quot;,\&quot;data\&quot;:{\&quot;version\&quot;:1,\&quot;url\&quot;:\&quot;//note.youdao.com/yws/res/0/WEBRESOURCE57da98f333a501d9dc29bfb5680b9d80\&quot;,\&quot;width\&quot;:281,\&quot;height\&quot;:150,\&quot;style\&quot;:{\&quot;textAlign\&quot;:\&quot;center\&quot;}},\&quot;nodes\&quot;:[],\&quot;state\&quot;:{\&quot;renderSource\&quot;:\&quot;//note.youdao.com/yws/res/0/WEBRESOURCE57da98f333a501d9dc29bfb5680b9d80\&quot;,\&quot;initialSize\&quot;:{\&quot;width\&quot;:281,\&quot;height\&quot;:148},\&quot;loading\&quot;:false}},{\&quot;type\&quot;:\&quot;block\&quot;,\&quot;id\&quot;:\&quot;xh4n-1652876897909\&quot;,\&quot;name\&quot;:\&quot;paragraph\&quot;,\&quot;data\&quot;:{\&quot;version\&quot;:1},\&quot;nodes\&quot;:[{\&quot;type\&quot;:\&quot;text\&quot;,\&quot;id\&quot;:\&quot;3hx7-1652876897893\&quot;,\&quot;leaves\&quot;:[{\&quot;text\&quot;:\&quot;根据维基百科的定义，消息引擎系统是一组规范。企业利用这组规范在不同系统之间传递语义准确的消息，实现松耦合的异步式数据传递。通俗来讲，就是系统 A 发送消息给消息引擎系统，系统 B 从消息引擎系统中读取 A 发送的消息。\&quot;,\&quot;marks\&quot;:[]}]}],\&quot;state\&quot;:{}}]&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;text-transform: none;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; text-align: left; margin: 10px 8px; background-color: rgb(255, 255, 255); outline: 0px; visibility: visible; line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span>再来一个复杂一点的代码：</span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> displayRef =  <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">initial value</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">.Display(); 
System.Threading.Thread.Sleep(</span><span style="color: rgba(128, 0, 128, 1)">5000</span><span style="color: rgba(0, 0, 0, 1)">); 
displayRef.Update(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">different value</span><span style="color: rgba(128, 0, 0, 1)">"</span>);</pre>
</div>
<p>点击执行效果演示，在阻塞两秒后发生value改变：</p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250701221139559-1437675723.gif" alt="" style="display: block; margin-left: auto; margin-right: auto"></p>
<h3><strong><span><span>（3）变量共享</span></span></strong></h3>
<p>有时候我们在编写多语言代码时，想要从上一个A语言的上下文中传递某个变量到下一个B语言的上下文中。这时候，我们就可以使用 set 命令来实现。</p>
<p>例如，我们在C<a class="wx_topic_link" data-topic="1">#语言中写了如下代码</a>：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> cars = <span style="color: rgba(0, 0, 255, 1)">new</span> []{<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Saab</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Volvo</span><span style="color: rgba(128, 0, 0, 1)">"</span>,<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">BMW</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> };
Console.WriteLine(cars[</span><span style="color: rgba(128, 0, 128, 1)">0</span>]);</pre>
</div>
<p>然后，我们添加一个JavaScript的代码块，通过set命令来获取到共享的变量cars：</p>
<div class="cnblogs_code">
<pre>#!<span style="color: rgba(0, 0, 255, 1)">set</span> --value @csharp:cars --<span style="color: rgba(0, 0, 0, 1)">name carsFromCSharp
console.log(carsFromCSharp)</span></pre>
</div>
<p><span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;data-content&quot;:&quot;[{\&quot;type\&quot;:\&quot;block\&quot;,\&quot;id\&quot;:\&quot;dk8c-1652876793035\&quot;,\&quot;name\&quot;:\&quot;paragraph\&quot;,\&quot;data\&quot;:{\&quot;version\&quot;:1},\&quot;nodes\&quot;:[{\&quot;type\&quot;:\&quot;text\&quot;,\&quot;id\&quot;:\&quot;CmYV-1652876793036\&quot;,\&quot;leaves\&quot;:[{\&quot;text\&quot;:\&quot;Apache Kafka是一款\&quot;,\&quot;marks\&quot;:[]},{\&quot;text\&quot;:\&quot;开源的消息引擎系统\&quot;,\&quot;marks\&quot;:[{\&quot;type\&quot;:\&quot;bold\&quot;}]},{\&quot;text\&quot;:\&quot;。\&quot;,\&quot;marks\&quot;:[]}]}],\&quot;state\&quot;:{}},{\&quot;type\&quot;:\&quot;block\&quot;,\&quot;id\&quot;:\&quot;LkWc-1652879629260\&quot;,\&quot;name\&quot;:\&quot;image\&quot;,\&quot;data\&quot;:{\&quot;version\&quot;:1,\&quot;url\&quot;:\&quot;//note.youdao.com/yws/res/0/WEBRESOURCE57da98f333a501d9dc29bfb5680b9d80\&quot;,\&quot;width\&quot;:281,\&quot;height\&quot;:150,\&quot;style\&quot;:{\&quot;textAlign\&quot;:\&quot;center\&quot;}},\&quot;nodes\&quot;:[],\&quot;state\&quot;:{\&quot;renderSource\&quot;:\&quot;//note.youdao.com/yws/res/0/WEBRESOURCE57da98f333a501d9dc29bfb5680b9d80\&quot;,\&quot;initialSize\&quot;:{\&quot;width\&quot;:281,\&quot;height\&quot;:148},\&quot;loading\&quot;:false}},{\&quot;type\&quot;:\&quot;block\&quot;,\&quot;id\&quot;:\&quot;xh4n-1652876897909\&quot;,\&quot;name\&quot;:\&quot;paragraph\&quot;,\&quot;data\&quot;:{\&quot;version\&quot;:1},\&quot;nodes\&quot;:[{\&quot;type\&quot;:\&quot;text\&quot;,\&quot;id\&quot;:\&quot;3hx7-1652876897893\&quot;,\&quot;leaves\&quot;:[{\&quot;text\&quot;:\&quot;根据维基百科的定义，消息引擎系统是一组规范。企业利用这组规范在不同系统之间传递语义准确的消息，实现松耦合的异步式数据传递。通俗来讲，就是系统 A 发送消息给消息引擎系统，系统 B 从消息引擎系统中读取 A 发送的消息。\&quot;,\&quot;marks\&quot;:[]}]}],\&quot;state\&quot;:{}}]&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;text-transform: none;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 10px 8px;background-color: rgb(255, 255, 255);outline: 0px;visibility: visible;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;node&quot;,{&quot;tagName&quot;:&quot;strong&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">效果如下图所示：</span></p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250701221239274-1137498178.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>&nbsp;Polyglot还提供了一个变量视图，你可以通过点击下面的按钮进行查看：</p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250701221255743-1001257466.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<h3>&nbsp;<strong><span><span>（4）用户输入</span></span></strong></h3>
<p>有时候我们想要让代码更加灵活，往往会依赖于用户输入的值，如输入密码，Key等信息。Polyglot提供了@input前缀来实现。例如，弹出一个框让用户输入一个url，并将用户输入存储到变量url中。</p>
<div class="cnblogs_code">
<pre>#!<span style="color: rgba(0, 0, 255, 1)">set</span> --name url --value @input:<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Please enter a URL</span><span style="color: rgba(128, 0, 0, 1)">"</span></pre>
</div>
<p>效果如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250701221348378-228233350.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>此外，.NET交互内核也提供了一些预置的交互式输入方法供直接使用：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span> PolyglotKernel =<span style="color: rgba(0, 0, 0, 1)"> Microsoft.DotNet.Interactive.Kernel;
# Number Input
</span><span style="color: rgba(0, 0, 255, 1)">var</span> input1 = <span style="color: rgba(0, 0, 255, 1)">await</span> PolyglotKernel.GetInputAsync(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Pick a number</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
input1.Display();
# Password Input
</span><span style="color: rgba(0, 0, 255, 1)">var</span> input2 = <span style="color: rgba(0, 0, 255, 1)">await</span> PolyglotKernel.GetPasswordAsync(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Pick a password</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
input2.Display();</span></pre>
</div>
<h3><strong data-pm-slice="2 5 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;data-content&quot;:&quot;[{\&quot;type\&quot;:\&quot;block\&quot;,\&quot;id\&quot;:\&quot;dk8c-1652876793035\&quot;,\&quot;name\&quot;:\&quot;paragraph\&quot;,\&quot;data\&quot;:{\&quot;version\&quot;:1},\&quot;nodes\&quot;:[{\&quot;type\&quot;:\&quot;text\&quot;,\&quot;id\&quot;:\&quot;CmYV-1652876793036\&quot;,\&quot;leaves\&quot;:[{\&quot;text\&quot;:\&quot;Apache Kafka是一款\&quot;,\&quot;marks\&quot;:[]},{\&quot;text\&quot;:\&quot;开源的消息引擎系统\&quot;,\&quot;marks\&quot;:[{\&quot;type\&quot;:\&quot;bold\&quot;}]},{\&quot;text\&quot;:\&quot;。\&quot;,\&quot;marks\&quot;:[]}]}],\&quot;state\&quot;:{}},{\&quot;type\&quot;:\&quot;block\&quot;,\&quot;id\&quot;:\&quot;LkWc-1652879629260\&quot;,\&quot;name\&quot;:\&quot;image\&quot;,\&quot;data\&quot;:{\&quot;version\&quot;:1,\&quot;url\&quot;:\&quot;//note.youdao.com/yws/res/0/WEBRESOURCE57da98f333a501d9dc29bfb5680b9d80\&quot;,\&quot;width\&quot;:281,\&quot;height\&quot;:150,\&quot;style\&quot;:{\&quot;textAlign\&quot;:\&quot;center\&quot;}},\&quot;nodes\&quot;:[],\&quot;state\&quot;:{\&quot;renderSource\&quot;:\&quot;//note.youdao.com/yws/res/0/WEBRESOURCE57da98f333a501d9dc29bfb5680b9d80\&quot;,\&quot;initialSize\&quot;:{\&quot;width\&quot;:281,\&quot;height\&quot;:148},\&quot;loading\&quot;:false}},{\&quot;type\&quot;:\&quot;block\&quot;,\&quot;id\&quot;:\&quot;xh4n-1652876897909\&quot;,\&quot;name\&quot;:\&quot;paragraph\&quot;,\&quot;data\&quot;:{\&quot;version\&quot;:1},\&quot;nodes\&quot;:[{\&quot;type\&quot;:\&quot;text\&quot;,\&quot;id\&quot;:\&quot;3hx7-1652876897893\&quot;,\&quot;leaves\&quot;:[{\&quot;text\&quot;:\&quot;根据维基百科的定义，消息引擎系统是一组规范。企业利用这组规范在不同系统之间传递语义准确的消息，实现松耦合的异步式数据传递。通俗来讲，就是系统 A 发送消息给消息引擎系统，系统 B 从消息引擎系统中读取 A 发送的消息。\&quot;,\&quot;marks\&quot;:[]}]}],\&quot;state\&quot;:{}}]&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;text-transform: none;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 10px 8px;background-color: rgb(255, 255, 255);outline: 0px;visibility: visible;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span><span>（5）安装NuGet包</span></span></strong></h3>
<p>我们的C<a class="wx_topic_link" data-topic="1">#代码会使用很多组件</a>，就会需要安装一些NuGet包，可以通过Polyglot提供的下列命令来实现：</p>
<div class="cnblogs_code">
<pre>#r <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">nuget:&lt;package_name&gt;[,&lt;package_version&gt;]</span><span style="color: rgba(128, 0, 0, 1)">"</span></pre>
</div>
<p>例如，我们安装SemanticKernel 1.11.1这个包：</p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250701221438177-118566906.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>如果不指定版本号，就是安装最新版本。</p>
<p>此外，如果你想添加自定义的NuGet源，则可以使用以下命令：</p>
<div class="cnblogs_code">
<pre>#i <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">nuget:https://your-nuget-source/v3/index.json</span></pre>
</div>
<h3><strong><span><span>（6）引入外部文件</span></span></strong></h3>
<p>我们想要一个代码示例块中引用某个类文件定义的帮助类，实现某个功能的演示，可以使用Polyglot提供的import命令来实现。</p>
<p>例如，我们在某个类文件中定义了一个GetDescription的方法，我们可以这样使用：</p>
<div class="cnblogs_code">
<pre>#!import Utils/<span style="color: rgba(0, 0, 0, 1)">EnumHelper.cs
</span><span style="color: rgba(0, 0, 255, 1)">enum</span><span style="color: rgba(0, 0, 0, 1)"> DayOfWeek
{
    [Description(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Monday</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
    Monday </span>= <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">,
    [Description(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Tuesday</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
    Tuesday </span>= <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">,
    [Description(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Wednesday</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
    Wednesday </span>= <span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">,
    [Description(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Thursday</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
    Thursday </span>= <span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">,
    [Description(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Friday</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
    Friday </span>= <span style="color: rgba(128, 0, 128, 1)">5</span><span style="color: rgba(0, 0, 0, 1)">,
    [Description(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Saturday</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
    Saturday </span>= <span style="color: rgba(128, 0, 128, 1)">6</span><span style="color: rgba(0, 0, 0, 1)">,
    [Description(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Sunday</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
    Sunday </span>= <span style="color: rgba(128, 0, 128, 1)">7</span><span style="color: rgba(0, 0, 0, 1)">
}
</span><span style="color: rgba(0, 0, 255, 1)">var</span> desc =<span style="color: rgba(0, 0, 0, 1)"> EnumHelper.GetDescription(DayOfWeek.Friday);
desc.Display();</span></pre>
</div>
<h3><strong data-pm-slice="2 5 [&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;data-content&quot;:&quot;[{\&quot;type\&quot;:\&quot;block\&quot;,\&quot;id\&quot;:\&quot;dk8c-1652876793035\&quot;,\&quot;name\&quot;:\&quot;paragraph\&quot;,\&quot;data\&quot;:{\&quot;version\&quot;:1},\&quot;nodes\&quot;:[{\&quot;type\&quot;:\&quot;text\&quot;,\&quot;id\&quot;:\&quot;CmYV-1652876793036\&quot;,\&quot;leaves\&quot;:[{\&quot;text\&quot;:\&quot;Apache Kafka是一款\&quot;,\&quot;marks\&quot;:[]},{\&quot;text\&quot;:\&quot;开源的消息引擎系统\&quot;,\&quot;marks\&quot;:[{\&quot;type\&quot;:\&quot;bold\&quot;}]},{\&quot;text\&quot;:\&quot;。\&quot;,\&quot;marks\&quot;:[]}]}],\&quot;state\&quot;:{}},{\&quot;type\&quot;:\&quot;block\&quot;,\&quot;id\&quot;:\&quot;LkWc-1652879629260\&quot;,\&quot;name\&quot;:\&quot;image\&quot;,\&quot;data\&quot;:{\&quot;version\&quot;:1,\&quot;url\&quot;:\&quot;//note.youdao.com/yws/res/0/WEBRESOURCE57da98f333a501d9dc29bfb5680b9d80\&quot;,\&quot;width\&quot;:281,\&quot;height\&quot;:150,\&quot;style\&quot;:{\&quot;textAlign\&quot;:\&quot;center\&quot;}},\&quot;nodes\&quot;:[],\&quot;state\&quot;:{\&quot;renderSource\&quot;:\&quot;//note.youdao.com/yws/res/0/WEBRESOURCE57da98f333a501d9dc29bfb5680b9d80\&quot;,\&quot;initialSize\&quot;:{\&quot;width\&quot;:281,\&quot;height\&quot;:148},\&quot;loading\&quot;:false}},{\&quot;type\&quot;:\&quot;block\&quot;,\&quot;id\&quot;:\&quot;xh4n-1652876897909\&quot;,\&quot;name\&quot;:\&quot;paragraph\&quot;,\&quot;data\&quot;:{\&quot;version\&quot;:1},\&quot;nodes\&quot;:[{\&quot;type\&quot;:\&quot;text\&quot;,\&quot;id\&quot;:\&quot;3hx7-1652876897893\&quot;,\&quot;leaves\&quot;:[{\&quot;text\&quot;:\&quot;根据维基百科的定义，消息引擎系统是一组规范。企业利用这组规范在不同系统之间传递语义准确的消息，实现松耦合的异步式数据传递。通俗来讲，就是系统 A 发送消息给消息引擎系统，系统 B 从消息引擎系统中读取 A 发送的消息。\&quot;,\&quot;marks\&quot;:[]}]}],\&quot;state\&quot;:{}}]&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;text-transform: none;word-spacing: 0px;-webkit-text-stroke-width: 0px;white-space: normal;text-align: left;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;},&quot;para&quot;,{&quot;tagName&quot;:&quot;section&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;margin: 10px 8px;background-color: rgb(255, 255, 255);outline: 0px;visibility: visible;line-height: 1.75em;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span><span>（7）呈现Mermaid图</span></span></strong></h3>
<p>除了写代码块之外，我们还可以使用Mermaid记录代码流来呈现流程图，切换到Mermaid内核即可：</p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250701221544888-1657094578.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>例如，我们有三个class：CheckoutService, CardService 和 ShippingService 共同完成了一个电商系统结账的功能。我们可以通过切换到Mermaid代码环境，通过下面的Mermaid代码完成一个流程图/时序图的绘制，十分方便：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">sequenceDiagram
    CheckoutService </span>-&gt;&gt;<span style="color: rgba(0, 0, 0, 1)"> CardService: Charge(card)
    CardService </span>--&gt;&gt;<span style="color: rgba(0, 0, 0, 1)"> CheckoutService: OK, payment cleared
    CheckoutService </span>-<span style="color: rgba(0, 0, 0, 1)">) ShippingService: Ship(cart)
    ShippingService </span>--&gt;&gt; CheckoutService: OK, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">shipping cart content</span><span style="color: rgba(128, 0, 0, 1)">"</span></pre>
</div>
<p>绘制出来的流程图如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202507/381412-20250701221623047-2055971483.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<h1><span><span>推荐内容</span></span></h1>
<p><span><span>Microsoft Learn学习社区: 《<a href="https://learn.microsoft.com/zh-cn/training/modules/polyglot-notebooks?wt.mc_id=MVP_397012" target="_blank" rel="noopener nofollow">多语言笔记本 Polyglot Notebook</a>》</span></span></p>
<p><span><span>VS Code官方文档：《<a href="https://code.visualstudio.com/docs/languages/polyglot" target="_blank" rel="noopener nofollow">Polyglot Notebooks in VS Code</a>》</span></span></p>
<p><span><span>圣杰：<span>《<a href="https://time.geekbang.org/course/intro/101031701" target="_blank" rel="noopener nofollow">.NET+AI | Semantic Kernel入门到精通</a>》（课程）</span></span></span></p>
<p>&nbsp;</p>
<p style="text-align: center"><img src="https://images.cnblogs.com/cnblogs_com/edisonchou/1647700/o_200902144330EdisonTalk-Footer.jpg" alt="" style="width: 65%; border: 1px solid rgba(221, 221, 221, 1); border-radius: 3px; box-shadow: 0 4px 8px rgba(3, 27, 78, 0.12)"></p>
<div id="Copyright">
<p>作者：<a title="author" href="https://edisonchou.cnblogs.com" target="_blank">周旭龙</a></p>
<p>出处：<a title="from" href="https://edisonchou.cnblogs.com" target="_blank">https://edisonchou.cnblogs.com</a></p>
<p>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。</p>
</div>
</div>
<div id="MySignature" role="contentinfo">
    <div align="center"><a href="https://weibo.com/u/2068032061?s=6uyXnP" target="_blank"><img border="0" src="http://service.t.sina.com.cn/widget/qmd/2068032061/d643d182/10.png"></a></div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-02 08:30">2025-07-02 08:30</span>&nbsp;
<a href="https://www.cnblogs.com/edisontalk">EdisonZhou</a>&nbsp;
阅读(<span id="post_view_count">582</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18960534);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18960534', targetLink: 'https://www.cnblogs.com/edisontalk/p/18960534/quick-start-on-polyglot-notebook', title: '.NET程序员的多语言笔记本：Polyglot Notebook' })">举报</a>
</div>
        