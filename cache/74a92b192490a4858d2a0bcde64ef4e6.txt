
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lunoctis/p/18993040" title="发布于 2025-07-19 16:35">
    <span role="heading" aria-level="2">Unity微信小游戏小窗口模式点击适配</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="1-问题描述">1. 问题描述</h2>
<p>项目使用UGUI方案，以点击交互为主。</p>
<p>微信unity方案本身只能调PixelRatio，不能直接调整Unity的分辨率，（还没有测试过“自适应屏幕尺寸”会怎么样），不过看前段时间热门的unity小游戏项目《无尽冬日》也没有对分辨率进行适配，采用了分辨率拉伸的模式。</p>
<p>简单以我自己的手机举例，如果正常打开微信，再打开小游戏，分辨率是<code>1080x2461</code>，如果把小游戏的窗口单独拖到小窗口模式，<code>WeChatWASM.WX.OnWindowResize()</code>的回调给的分辨率是<code>1080x1729</code>，但因为不能调整Unity的分辨率，所以整个画面是拉伸的。反过来，如果先打开微信，把微信拉成小窗口，再打开小游戏，之后再把小游戏全屏，效果会反过来。</p>
<p>画面拉伸问题不算太大，但点击响应的问题比较严重，经过测试，以从左到右为x轴，从下到上为y轴，全屏启动小游戏再拉到小窗口模式后<code>(1080x1729)</code>，左上角的输入坐标还是正确的<code>(0,2461)</code>, 但左下角的坐标就是错误的<code>(0,732)</code>(2461-1729)，导致的现象是越靠近上方的按钮越有可能点对，靠近下方的就点不到了。正确的坐标和输入坐标的关系是</p>
<pre><code class="language-csharp">Vector2 GetMousePosition()
{
    var pos = Input.mousePosition;

    int originalHeight = 2461; // 初始化时存储
    int modifiedHeight = 1729; // OnWindowResize() 回调获取
    if (originalHeight == modifiedHeight)
    {
        return pos;
    }

    float resolutionScale = 1; // 分辨率缩放
    float y = pos.y;
    pos.y = (y + (modifiedHeight - originalHeight) * resolutionScale) / modifedHeight * originalHeight;
    return pos;
}
</code></pre>
<p>旧的输入系统（InputManager)也能达成效果，需要继承<code>GraphicRaycaster</code>类，修改UI的点击检测逻辑</p>
<p>另外业务逻辑中获取Input.mousePositon的地方也需要覆盖一下</p>
<pre><code class="language-csharp">public class CustomGraphicRaycaster : GraphicRaycaster
{
    public override void Raycast(PointerEventData eventData, List&lt;RaycastResult&gt; resultAppendLit)
    {
        var pos = eventData.position;
        // 修改位置
        event.position = pos;
        base.Raycast(eventData, resultAppendList);
    }
}
</code></pre>
<p>那其实直接改UGUI源码就行....</p>
<p>换用了新的输入系统<code>InputSystem</code>，是因为当时没试出来😂</p>
<h2 id="2-从unityengineinput升级到unityengineinputsystem">2. 从UnityEngine.Input升级到UnityEngine.InputSystem</h2>
<ol>
<li>首先要更新UGUI源码(如果使用embbed模式), 虽然版本号一直是1.0.0, 但还是有多次修改的</li>
<li>Window &gt; PackageManager 安装 Input System (本文使用的是1.7.0版本)</li>
<li>Editor &gt; Project Settings &gt; OtherSettings &gt; Active Input Handling, 改为"Input System Package" (关闭旧的输入系统)</li>
<li>UGUI的事件接入: 找到场景中的EventSystem, 把原本的StandaloneUIInputModule删掉, 挂一个InputSystemUIInputModule上去</li>
</ol>
<h2 id="3-常用api的直接近似替换">3. 常用API的直接近似替换</h2>
<p>需要注意判空</p>
<p>鼠标：</p>
<ul>
<li>Input.mousePosition -&gt; Mouse.current.position.ReadValue()</li>
<li>Input.GetMouseButton(index) -&gt; Mouse.current.leftButton.isPressed | Mouse.current.rightButton.isPressed (下面省略)</li>
<li>Input.GetMouseButtonDown(index) -&gt; Mouse.current.leftButton.wasPressedThisFrame</li>
<li>Input.GetMouseButtonUp(index) -&gt; Mouse.current.leftButton.wasReleasedThisFrame</li>
<li>Input.GetAxis("Mouse ScrollWheel") -&gt; Mouse.current.scroll.ReadValue().y / 120f</li>
</ul>
<p>键盘（实际只有编辑器在用）：</p>
<ul>
<li>Input.GetKey(KeyCode.W) -&gt; Keyboard.current.wKey.isPressed</li>
<li>Input.GetKey(keyCode) -&gt; switch case</li>
<li>键盘的Down\Up也是wasPressedThisFrame\wasReleasedThisFrame</li>
</ul>
<p>另外鼠标的逻辑替换需要注意判断触屏，以<code>Input.mousePosition</code>为例</p>
<pre><code class="language-csharp">
public static class Input
{
    public static Vector2 mousePosition
    {
        get {
#if !UNITY_EDITOR &amp;&amp; UNITY_WEBGL
            var pos = TouchScreen.current?.primaryTouch.position.ReadValue() ?? Vector2.zero;
#else
            var pos = Mouse.current?.position.ReadValue() ?? Vector2.zero;
#endif
            return pos;
        }
    }
}

</code></pre>
<h2 id="4-添加作用到ugui的坐标转换">4. 添加作用到UGUI的坐标转换</h2>
<p>为了方便修改，直接把InputSystem包改成embbed模式（包文件夹从<code>Library/PackageCache</code>移动到<code>Packages</code>文件夹）</p>
<p>新建<code>Packages/com.unity.inputsystem@xxx/InputSystem/Controls/Processors/ResolutionVector2Processor.cs</code></p>
<pre><code class="language-csharp">
namespace UnityEngine.InputSystem.Processors
{
    public class ResolutionVector2Processor : InputProcessor&lt;Vector2&gt;
    {
        // 这些参数自行找时机传递过来即可
        private static int s_OriginalHeight = 0;
        private static int s_ModifiedHeight = 0;
        private static float s_ResolutionScale = 1.0f;

        public override Vector2 Process(Vector2 value, InputControl control)
        {
            // 和第一节的逻辑相同
            if (s_OriginalHeight == s_ModifiedHeight) return value;

            float y = value.y;
            value.y = (y + (s_ModifiedHeight - s_OriginalHeight) * s_ResolutionScale) / s_ModifiedHeight * s_OriginalHeight;
            return value;
        }

        public override string ToString()
        {
            return $"ResolutionVector2()";
        }
    }
}

</code></pre>
<p>到<code>Packages/com.unity.inputsystem@xxx/InputSystem/InputManager.cs</code>里面注册一下</p>
<pre><code class="language-csharp">internal void InitializeData()
{
    // ...
    processors.AddTypeRegistration("ResolutionVector2", typeof());
    // ...
}
</code></pre>
<p>然后在unity中Project窗口选中<code>Packages/com.unity.inputsystem@xxx/InputSystem/Plugins/PlayerInput/DefaultInputActions.inputactions</code></p>
<p>点击Inspector窗口的<code>Edit asset</code></p>
<p>ActionMaps选择UI</p>
<p>Actions选择 Point &gt; touch*/position [Touchscreen]</p>
<p>在Processors中添加刚才新建的<code>ResolutionVector2</code>，保存即可</p>
<h2 id="5-inputmouseposition的替换">5. Input.mousePosition的替换</h2>
<p>回到第3节的代码，把转换逻辑加进去即可</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.03194444444444444" data-date-updated="2025-07-19 17:21">2025-07-19 16:35</span>&nbsp;
<a href="https://www.cnblogs.com/lunoctis">lunoctis</a>&nbsp;
阅读(<span id="post_view_count">96</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18993040);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18993040', targetLink: 'https://www.cnblogs.com/lunoctis/p/18993040', title: 'Unity微信小游戏小窗口模式点击适配' })">举报</a>
</div>
        