<!----> <meta itemprop="headline" content="老板花一万大洋让我写的艺术工作室官网？！ HeroSection 再度来袭！(Three.js)"> <meta itemprop="keywords" content="前端,开源,three.js"> <meta itemprop="datePublished" content="2025-03-06T01:33:27.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="何贤"> <meta itemprop="url" content="https://juejin.cn/user/277499952247869"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-38a6c62f="">
            老板花一万大洋让我写的艺术工作室官网？！ HeroSection 再度来袭！(Three.js)
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-38a6c62f=""><div class="author-info-box" data-v-38a6c62f=""><div class="author-name" data-v-38a6c62f=""><a href="/user/277499952247869/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-38a6c62f=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    何贤
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-38a6c62f=""><time datetime="2025-03-06T01:33:27.000Z" title="Thu Mar 06 2025 01:33:27 GMT+0000 (Coordinated Universal Time)" class="time" data-v-38a6c62f="">
                    2025-03-06
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-38a6c62f=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-38a6c62f=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-38a6c62f=""></circle></svg> <span class="views-count" data-v-38a6c62f="">
                    9,024
                  </span> <span class="read-time" data-v-38a6c62f=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-38a6c62f=""><rect width="16" height="16" fill="none" data-v-38a6c62f=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-38a6c62f=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-38a6c62f=""></path></svg>
                    阅读10分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-38a6c62f=""></div> <!----> <!----></div> <!----> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-38a6c62f=""><div class="article-viewer markdown-body result"><h2 data-id="heading-0">引言.我不是鸽子大王！！</h2>
<p>哈喽大家好！距离我上次发文已经过去半个月了，差点又变回了那只熟悉的“老鸽子”。不行，我不能堕落！我还没有将 <code>Web3D</code> 推广到普罗大众，还没有让更多人感受到三维图形的魅力 (其实是还没有捞着米)。怀着这样的心情，我决定重新振作，继续为大家带来更多关于 <code>Three.js</code> 和 <code>Shader</code> 的进阶内容。</p>
<h2 data-id="heading-1">0.前置条件</h2>
<p>欢迎阅读本篇文章！在深入探讨 <code>Three.js</code> 和 <code>Shader (GLSL)</code> 的进阶内容之前，确保您已经具备以下基础知识：</p>
<ol>
<li><strong>Three.js 基础</strong>：您需要熟悉 <code>Three.js</code> 的基本概念和使用方法，包括场景（<code>Scene</code>）、相机（<code>Camera</code>）、渲染器（<code>Renderer</code>）、几何体（<code>Geometry</code>）、材质（<code>Material</code>）和网格（<code>Mesh</code>）等核心组件。如果您还不熟悉这些内容，建议先学习 <code>Three.js</code> 的入门教程。</li>
<li><strong>Shader 语法</strong>：本文涉及 <code>GLSL</code>（OpenGL Shading Language）的编写，因此您需要了解 <code>GLSL</code> 的基本语法，包括顶点着色器（Vertex Shader）和片元着色器（Fragment Shader）的编写，以及如何在 <code>Three.js</code> 中使用自定义着色器。</li>
</ol>
<h2 data-id="heading-2">1. Hero Section 概览</h2>
<blockquote>
<p>Hero Section 是网页设计中的一个术语，通常指页面顶部的一个大型横幅区域。但对于开发人员而言，这个概念可以更直观地理解为<strong>用户在访问网站的瞬间所感受到的视觉冲击，或者促使用户停留在该网站的关键原因因素</strong>。</p>
</blockquote>
<p>话说这天老何接到了一个私活</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a6fa6ec26c0d454ba505c5f126db261b~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1744844613&amp;x-signature=AD3BD781%2BUvYfIGHuYhVfOLxsQo%3D" alt="chat.png" loading="lazy"></p>
<p>起始钱不钱的无所谓！主要是想挑战一下自己(不是)。最后的成品如图所示 （互动方式为<code>鼠标滑动</code> + <code>鼠标点击</code> GIF 压缩太多了内容了，实际要好看很多）。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/518b5964621d45d0aa2c07d49b5788fa~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1744844613&amp;x-signature=B6U4yAsWtXb2IZgqPJVLMKhpcCo%3D" alt="01.gif" loading="lazy"></p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Ffluid-light.vercel.app%2F" target="_blank" title="https://fluid-light.vercel.app/" ref="nofollow noopener noreferrer">PC端在线预览地址</a>: <a href="https://link.juejin.cn?target=https%3A%2F%2Ffluid-light.vercel.app" target="_blank" title="https://fluid-light.vercel.app" ref="nofollow noopener noreferrer">fluid-light.vercel.app</a></p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Ffluid-light.vercel.app%2F%23debug" target="_blank" title="https://fluid-light.vercel.app/#debug" ref="nofollow noopener noreferrer">Debug调试界面</a>: <a href="https://link.juejin.cn?target=https%3A%2F%2Ffluid-light.vercel.app%2F%23debug" target="_blank" title="https://fluid-light.vercel.app/#debug" ref="nofollow noopener noreferrer">fluid-light.vercel.app/#debug</a></p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FhexianWeb%2Ffluid-light" target="_blank" title="https://github.com/hexianWeb/fluid-light" ref="nofollow noopener noreferrer">源码地址</a>: <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FhexianWeb%2Ffluid-light" target="_blank" title="https://github.com/hexianWeb/fluid-light" ref="nofollow noopener noreferrer">github.com/hexianWeb/f…</a></p>
<h2 data-id="heading-3">2.基础场景搭建</h2>
<p>首先我来为你解读一下这个场景里面有什么，他非常简单。只有一个<strong>可以接受光照影响的平面几何体</strong>以及<strong>数个点光源</strong>构成，仅此而已。</p>
<p>让我去掉后处理以及一些页面文本元素展示给你看</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/dbb4a363874142d2971fa2f504ef0825~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1744844613&amp;x-signature=fmWIEiJXv%2BA%2FjmEWK4WFWILlGiQ%3D" alt="fluidLight04.gif" loading="lazy"></p>
<p>构建这样的一个基础场景不难。</p>
<h3 data-id="heading-4">2.1 构建平面几何体</h3>
<p>让我们先来解决平面几何体</p>
<p>值得注意的是，为了让显示效果更好，我使用了正交相机并让平面覆盖整个视窗大小</p>
<pre><code class="hljs language-js" lang="js">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">geometry</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">PlaneGeometry</span>(<span class="hljs-number">2</span> * 屏幕宽高比, <span class="hljs-number">2</span>);
</code></pre>
<p>然后构建相应的物理材质，可以去 <a href="https://link.juejin.cn?target=https%3A%2F%2Fpolyhaven.com%2Ftextures" target="_blank" title="https://polyhaven.com/textures" ref="nofollow noopener noreferrer">polyhaven</a> 下载一些自己喜欢的<code>texture</code> 并下载下来。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/e31d08e4fcab45e2a85665456521cf36~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1744844613&amp;x-signature=b4EsAgslmsShplWg7K7QWULvplc%3D" alt="Snipaste_2025-03-05_14-26-01.png" loading="lazy">
根据右边的分类选择纹理大类细分，随后选择想要下载的纹理点击下载。</p>
<p>因为我们本质是需要 <code>Displacement Texture</code>置换贴图 &amp; <code>Normal Texture</code> 法线贴图</p>
<p>所以不需要太在意这个纹理是作用在什么物件上面的</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/b20ac768d3024cdf862cee309a5507c2~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1744844613&amp;x-signature=jKswq%2BUjG98nJ5nH5d3CzDG56IM%3D" alt="Snipaste_2025-03-05_14-30-09.png" loading="lazy"></p>
<p>随后将纹理导入后赋予材质相应的属性，并对部分参数进行调整。通常直接赋予<code>displacementMap</code>  后 <code>Threejs</code> 中显示平面的凹凸会特别明显。所以记得通过</p>
<p><code>displacementScale</code>来调整相应的大小。</p>
<pre><code class="hljs language-js" lang="js">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">material</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshPhysicalMaterial</span>({
      <span class="hljs-attr">color</span>: <span class="hljs-string">'#121423'</span>,
      <span class="hljs-attr">metalness</span>: <span class="hljs-number">0.59</span>,
      <span class="hljs-attr">roughness</span>: <span class="hljs-number">0.41</span>,
      <span class="hljs-attr">displacementMap</span>: 下载的纹理贴图,
      <span class="hljs-attr">displacementScale</span>: <span class="hljs-number">0.1</span>,
      <span class="hljs-attr">normalMap</span>: 下载的法线贴图,
      <span class="hljs-attr">normalScale</span>: <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector2</span>(<span class="hljs-number">0.68</span>, <span class="hljs-number">0.75</span>),
      <span class="hljs-attr">side</span>: <span class="hljs-variable constant_">THREE</span>.<span class="hljs-property">FrontSide</span>
    });
</code></pre>
<p>最后将物体加入场景即可</p>
<pre><code class="hljs language-js" lang="js">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">mesh</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Mesh</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">geometry</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">material</span>);
    scene.<span class="hljs-title function_">add</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">mesh</span>);
</code></pre>
<p>(tips:<strong>MeshStandardMaterial</strong> 和 <strong>MeshPhysicalMaterial</strong> 适合需要真实感光照和复杂物理特性的场景，但性能消耗较高。如果您的电脑出现卡顿可以选择消耗较少性能的物理材质)</p>
<h3 data-id="heading-5">2.2 灯光加入战场</h3>
<p>在本案例中，高级感的来源之一就是灯光的变换。如果您足够细心，可能会注意到一些更微妙的细节：场景中的灯光并不是简单地从 <code>A Color</code> 切换到 <code>B Color</code>，而是同时存在多个光源，并且它们的强度也在动态变化。这种设计使得场景的光影效果更加丰富和立体。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c23bf47104e142999317b24b63df25f9~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1744844613&amp;x-signature=f8GznOBq4UtBvBfXYF62%2BLCu7GA%3D" alt="03.gif" loading="lazy"></p>
<p>如果场景中只有一个光源，效果可能会显得单调。而本案例中，灯光的变化呈现出一种层次感：<strong>中间是白色，周围还有一层类似年轮的光圈，最后逐渐扩散为纯色背景</strong>。这种效果的关键在于<strong>同一时间场景中存在多个点光源</strong>。虽然多个光源会显著增加性能消耗，但为了实现唯美的视觉效果，这是值得的。</p>
<p>让我们逐步分析灯光是如何实现的。</p>
<h4 data-id="heading-6">1. 封装创建点光源的函数</h4>
<p>为了简化代码并提高复用性，我们可以先封装一个创建点光源的函数。这个函数会返回一个包含光源对象和目标颜色的对象。</p>
<pre><code class="hljs language-js" lang="js">  <span class="hljs-title function_">createPointLight</span>(<span class="hljs-params">intensity</span>) {
    <span class="hljs-keyword">const</span> light = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">PointLight</span>(
      <span class="hljs-number">0xff_ff_ff</span>,
      intensity,
      <span class="hljs-number">100</span>,
      <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">10</span>
    );
    light.<span class="hljs-property">position</span>.<span class="hljs-title function_">copy</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">lightPosition</span>); <span class="hljs-comment">//所有的光源都同步在一个位置</span>
    <span class="hljs-keyword">return</span> {
      <span class="hljs-attr">object</span>: light,
      <span class="hljs-attr">targetColor</span>: <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Color</span>()
    };
  }
</code></pre>
<h4 data-id="heading-7">2. 生成多个点光源</h4>
<p>接下来，我们可以调用这个函数生成多个点光源，并将它们添加到场景中。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [
      <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Color</span>(<span class="hljs-string">'orange'</span>),
      <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Color</span>(<span class="hljs-string">'red'</span>),
      <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Color</span>(<span class="hljs-string">'red'</span>),
      <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Color</span>(<span class="hljs-string">'orange'</span>),
      <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Color</span>(<span class="hljs-string">'lightblue'</span>),
      <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Color</span>(<span class="hljs-string">'green'</span>),
      <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Color</span>(<span class="hljs-string">'blue'</span>),
      <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Color</span>(<span class="hljs-string">'blue'</span>)
];    
<span class="hljs-variable language_">this</span>.<span class="hljs-property">lights</span> = [
      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createPointLight</span>(<span class="hljs-number">2</span>),
      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createPointLight</span>(<span class="hljs-number">3</span>),
      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createPointLight</span>(<span class="hljs-number">2.5</span>),
      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createPointLight</span>(<span class="hljs-number">10</span>),
      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createPointLight</span>(<span class="hljs-number">2</span>),
      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createPointLight</span>(<span class="hljs-number">3</span>),
];

<span class="hljs-comment">// 初始化灯光颜色</span>
<span class="hljs-keyword">const</span> numberLights = <span class="hljs-variable language_">this</span>.<span class="hljs-property">lights</span>.<span class="hljs-property">length</span>;
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; numberLights; index++) {
      <span class="hljs-keyword">const</span> colorIndex = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(index, <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>);
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">lights</span>[index].<span class="hljs-property">object</span>.<span class="hljs-property">color</span>.<span class="hljs-title function_">copy</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span>[colorIndex]);
}

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> light <span class="hljs-keyword">of</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">lights</span>) <span class="hljs-variable language_">this</span>.<span class="hljs-property">scene</span>.<span class="hljs-title function_">add</span>(light.<span class="hljs-property">object</span>);
</code></pre>
<h4 data-id="heading-8">3. 动态调整光源强度</h4>
<p>在场景中，所有光源同时存在，但它们的强度会有所不同。<strong>每次由光照强度为 10 的光源担任场景的主色</strong>。当用户点击场景时，灯光会像上楼梯或者传送带一样逐步切换，即由新的点光源担任场景主色。</p>
<pre><code class="hljs language-bash" lang="bash">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
8                           8<span class="hljs-string">"b,    "</span>Ya
8                           8  <span class="hljs-string">"b,    "</span>Ya
8                    aa=D光源=a8,   <span class="hljs-string">"b,  "</span>Ya
8                    8<span class="hljs-string">"b,    "</span>Ya   <span class="hljs-string">"8"</span><span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">"8
8                    8  "</span>b,    <span class="hljs-string">"Ya  8      8
8             a=C光源=8,   "</span>b,    <span class="hljs-string">"Ya8      8
8             8"</span>b,    <span class="hljs-string">"Ya   "</span>8<span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">"      8
8             8  "</span>b,    <span class="hljs-string">"Ya  8             8
8      a=B光源=8,   "</span>b,    <span class="hljs-string">"Ya8             8
8      8"</span>b,    <span class="hljs-string">"Ya   "</span>8<span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">"             8
8      8  "</span>b,    <span class="hljs-string">"Ya  8                    8
8=A光源=,   "</span>b,    <span class="hljs-string">"Ya8                    8
8"</span>b,    <span class="hljs-string">"Ya   "</span>8<span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">"                    8
8  "</span>b,    <span class="hljs-string">"Ya  8                           8
8,   "</span>b,    <span class="hljs-string">"Ya8                           8
 "</span>Ya   <span class="hljs-string">"8"</span><span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">""</span>                           8
   <span class="hljs-string">"Ya  8                                  8
     "</span>Ya8                                  8
       <span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">""</span><span class="hljs-string">"
</span></code></pre>
<p>让我们看看代码是如何实现的吧</p>
<pre><code class="hljs language-js" lang="js">    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'click'</span>, <span class="hljs-function">() =&gt;</span> {
      <span class="hljs-comment">// 打乱颜色数组（看个人喜好)</span>
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span>.<span class="hljs-title function_">sort</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() - <span class="hljs-number">0.5</span>)];
       <span class="hljs-comment">// 标记开始颜色过渡</span>
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">colorTransition</span> = <span class="hljs-literal">true</span>;

        <span class="hljs-comment">// 为每个灯光设置目标颜色</span>
        <span class="hljs-keyword">const</span> numberLights = <span class="hljs-variable language_">this</span>.<span class="hljs-property">lights</span>.<span class="hljs-property">length</span>;
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; numberLights; index++) {
          <span class="hljs-keyword">const</span> colorIndex = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(index, <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>);
          <span class="hljs-variable language_">this</span>.<span class="hljs-property">lights</span>[index].<span class="hljs-property">targetColor</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span>[colorIndex].<span class="hljs-title function_">clone</span>();
        }
    });
</code></pre>
<p>然后再Render函数中以<code>easeing</code>方式更新颜色</p>
<pre><code class="hljs language-js" lang="js">  <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) {
    <span class="hljs-comment">// 只在需要时更新颜色</span>
    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">colorTransition</span>) {
        <span class="hljs-keyword">const</span> numberLights = <span class="hljs-variable language_">this</span>.<span class="hljs-property">lights</span>.<span class="hljs-property">length</span>;
        <span class="hljs-keyword">const</span> baseSmooth = <span class="hljs-number">0.25</span>;
        <span class="hljs-keyword">const</span> smoothIncrement = <span class="hljs-number">0.05</span>;

        <span class="hljs-keyword">let</span> allTransitioned = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 检查所有颜色是否已完成过渡</span>

        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; numberLights; index++) {
          <span class="hljs-keyword">const</span> smoothTime = baseSmooth + index * smoothIncrement;

          <span class="hljs-comment">// 使用目标颜色进行平滑过渡</span>
          <span class="hljs-keyword">const</span> currentColor = <span class="hljs-variable language_">this</span>.<span class="hljs-property">lights</span>[index].<span class="hljs-property">object</span>.<span class="hljs-property">color</span>;
          <span class="hljs-keyword">const</span> targetColor = <span class="hljs-variable language_">this</span>.<span class="hljs-property">lights</span>[index].<span class="hljs-property">targetColor</span>;

          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">dampC</span>(currentColor, targetColor, smoothTime, delta);

          <span class="hljs-comment">// 检查是否还在过渡</span>
          <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">isColorClose</span>(currentColor, targetColor)) {
            allTransitioned = <span class="hljs-literal">false</span>;
          }
        }

        <span class="hljs-comment">// 如果所有颜色都已完成过渡，停止更新</span>
        <span class="hljs-keyword">if</span> (allTransitioned) {
          <span class="hljs-variable language_">this</span>.<span class="hljs-property">colorTransition</span> = <span class="hljs-literal">false</span>;
        }
    }
  }
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c23bf47104e142999317b24b63df25f9~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1744844613&amp;x-signature=f8GznOBq4UtBvBfXYF62%2BLCu7GA%3D" alt="03.gif" loading="lazy"></p>
<h2 data-id="heading-9">3.后处理完善场景</h2>
<p>在完成了场景的基本构建之后，我们已经实现了大约 80% 的内容。即使现在加上 UI，效果也不会太差。不过，为了让场景更具视觉冲击力和艺术感，我们可以通过后处理（Post Processing）技术来进一步提升质感。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/caa47471c1d94cd6be6a9b35bc420782~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1744844613&amp;x-signature=JL3Vy96tqXhDHIgDIxP%2Fcv00Zo4%3D" alt="04.gif" loading="lazy"></p>
<h3 data-id="heading-10">使用 <code>UnrealBloomPass</code> 和 <code>FilmPass</code></h3>
<p>在本文中，我们将使用 <code>UnrealBloomPass</code>（辉光效果）和 <code>FilmPass</code>（电影滤镜）来增强场景的视觉效果。以下是具体的实现步骤：</p>
<ol>
<li><strong>引入后处理库</strong>：首先，我们需要引入 <code>Three.js</code> 的后处理库 <code>EffectComposer</code> 以及相关的 <code>Pass</code> 类。</li>
<li><strong>创建 <code>EffectComposer</code></strong>：<code>EffectComposer</code> 是后处理的核心类，用于管理和执行各种后处理效果。</li>
<li><strong>添加 <code>RenderPass</code></strong>：<code>RenderPass</code> 用于将场景渲染到后处理管道中。</li>
<li><strong>添加 <code>UnrealBloomPass</code></strong>：<code>UnrealBloomPass</code> 用于实现辉光效果，可以使场景中的亮部区域产生光晕。</li>
<li><strong>添加 <code>FilmPass</code></strong>：<code>FilmPass</code> 用于模拟电影胶片的效果，增加颗粒感和复古风格。</li>
</ol>
<p>这里的具体参数需要看个人品味进行调试。同款参数可以从这里看我的<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FhexianWeb%2Ffluid-light" target="_blank" title="https://github.com/hexianWeb/fluid-light" ref="nofollow noopener noreferrer">源码</a>。具体路径位于<code>src\js\world\effect.js</code></p>
<pre><code class="hljs language-js" lang="js">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">composer</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EffectComposer</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">renderer</span>);
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">composer</span>.<span class="hljs-title function_">addPass</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">renderPass</span>);
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">composer</span>.<span class="hljs-title function_">addPass</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">bloomPass</span>);
	<span class="hljs-variable language_">this</span>.<span class="hljs-property">composer</span>.<span class="hljs-title function_">addPass</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">filmPass</span>);
</code></pre>
<p>此时页面的质感是不是一下就上来了呢？</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/3abbe11976384213bb9bd6d52f2d8368~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1744844613&amp;x-signature=VoiVH8hUl52wlSE74FBE7XLWM8Y%3D" alt="05.gif" loading="lazy"></p>
<p>最后我们需要添加最关键的一部，就是画面扭曲。</p>
<p>这里我们需要用到 <code>Threejs</code> 的 <code>ShaderPass</code>,让我们来创建一个初始的<code>ShaderPass</code>,仅将 EffectComposer 的读取缓冲区的图像内容复制到其写入缓冲区，而不应用任何效果。</p>
<p>具体内容你可以从 <a href="https://link.juejin.cn?target=https%3A%2F%2Fthreejs.org%2Fdocs%2F%23manual%2Fen%2Fintroduction%2FHow-to-use-post-processing" target="_blank" title="https://threejs.org/docs/#manual/en/introduction/How-to-use-post-processing" ref="nofollow noopener noreferrer">Threejs 后处理</a>中了解到更多</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">ShaderPass</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'three/addons/postprocessing/ShaderPass.js'</span>;

<span class="hljs-keyword">const</span> <span class="hljs-title class_">BaseShader</span> = {

	<span class="hljs-attr">name</span>: <span class="hljs-string">'BaseShader'</span>,

	<span class="hljs-attr">uniforms</span>: {

		<span class="hljs-string">'tDiffuse'</span>: { <span class="hljs-attr">value</span>: <span class="hljs-literal">null</span> },
		<span class="hljs-string">'opacity'</span>: { <span class="hljs-attr">value</span>: <span class="hljs-number">1.0</span> }

	},

	<span class="hljs-attr">vertexShader</span>: <span class="hljs-comment">/* glsl */</span><span class="hljs-string">`

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`</span>,

	<span class="hljs-attr">fragmentShader</span>: <span class="hljs-comment">/* glsl */</span><span class="hljs-string">`

		uniform float opacity;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );
			gl_FragColor = opacity * texel;


		}`</span>

};

<span class="hljs-keyword">const</span> <span class="hljs-title class_">BasePass</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShaderPass</span>( <span class="hljs-title class_">BaseShader</span> );
</code></pre>
<p>此时画面不会有任何变化</p>
<p>让我们对<code>uv</code>进行简单操纵,让其读取<code>tDiffuse</code>时可以发生扭曲</p>
<pre><code class="hljs language-glsl" lang="glsl">      vec2 uv = vUv;
      uv.y += sin(uv.x * frequency + offset) * amplitude;
      gl_FragColor = texture2D(tDiffuse, uv);
</code></pre>
<p>最后得到效果</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/54b833e67a984f52891d057c5855fe71~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1744844613&amp;x-signature=gNgyO0gi27uh1KQ5Stv1a5Eabrw%3D" alt="06.gif" loading="lazy"></p>
<h2 data-id="heading-11">4.最后一些话</h2>
<h3 data-id="heading-12">技术的未来与前端迁移</h3>
<p>随着 AI 技术的快速发展，各类技术的门槛正在大幅降低，以往被视为高门槛的 <code>3D</code> 技术也不例外。与此同时，过去困扰开发者的数字资产构建成本问题，也正在被最新的 <code>3D generation</code> 技术所攻克。这意味着，在不久的将来，前端开发将迎来一次技术迁移，开发者需要掌握更新颖的交互方式和更出色的视觉效果。</p>
<h3 data-id="heading-13">为什么选择 <code>Three.js</code>？</h3>
<p><code>Three.js</code> 作为最流行的 <code>WebGL</code> 库之一，不仅简化了三维图形的开发流程，还提供了丰富的功能和强大的扩展性。无论是创建复杂的 3D 场景，还是实现炫酷的视觉效果，<code>Three.js</code> 都能帮助开发者快速实现目标。</p>
<h3 data-id="heading-14">本专栏的愿景</h3>
<p>本专栏的愿景是通过分享 <code>Three.js</code> 的中高级应用和实战技巧，帮助开发者更好地将 <code>3D</code> 技术应用到实际项目中，打造令人印象深刻的 <code>Hero Section</code>。我们希望通过本专栏的内容，能够激发开发者的创造力，推动 <code>Web3D</code> 技术的普及和应用。</p>
<h3 data-id="heading-15">加入社区，共同成长</h3>
<p>如果您对 <code>Threejs</code> 这个 <code>3D</code> 图像框架很感兴趣，或者您也深信未来国内会涌现越来越多 <code>3D</code> 设计风格的网站，欢迎加入 <strong><a href="https://link.juejin.cn?target=https%3A%2F%2Fopensource.icegl.cn" target="_blank" title="https://opensource.icegl.cn" ref="nofollow noopener noreferrer">ice 图形学社区</a></strong>。这里是国内 Web 图形学最全的知识库，致力于打造一个全新的图形学生态体系！您可以在认证达人里找到我这个 <code>Threejs</code> 爱好者和其他大佬。</p>
<p>此外，如果您很喜欢 <code>Threejs </code>又在烦恼其原生开发的繁琐，那么我诚邀您尝试  <strong><a href="https://link.juejin.cn?target=https%3A%2F%2Ftresjs.org%2F" target="_blank" title="https://link.juejin.cn?target=https%3A%2F%2Ftresjs.org%2F">Tresjs</a></strong> 和 <strong><a href="https://link.juejin.cn?target=https%3A%2F%2Fopensource.icegl.cn%2F" target="_blank" title="https://opensource.icegl.cn/" ref="nofollow noopener noreferrer">TvTjs</a></strong>, 他们都是基于 <code>Vue</code> 的 <code>Threejs</code> 框架。 <strong><a href="https://link.juejin.cn?target=https%3A%2F%2Fopensource.icegl.cn%2F" target="_blank" title="https://opensource.icegl.cn/" ref="nofollow noopener noreferrer">TvTjs</a></strong> 也为您提供了大量的可使用案例，并且拥有较为活跃的开发社区，在这里你能碰到志同道合的朋友一起做开源！</p>
<h2 data-id="heading-16">5.下期预告</h2>
<p><strong>未来科技？机器人概念官网来袭 ！！！</strong></p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/0f399473a9aa472f951cae2d6912dc8f~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1744844613&amp;x-signature=WwqFfu0w%2FY%2BADLI9xy7NZQip8aA%3D" alt="08.gif" loading="lazy"></p>
<h2 data-id="heading-17">6. 往期回顾</h2>
<p><a href="https://juejin.cn/post/7472650702340046886" target="_blank" title="https://juejin.cn/post/7472650702340046886">2025 年了，我不允许有前端不会用 Trae 让页面 Hero Section 变得高级！！！(Threejs)</a></p>
<p><a href="https://juejin.cn/post/7415504438922592294" target="_blank" title="https://juejin.cn/post/7415504438922592294">2024年了，前端人是时候给予页面一点 Hero Section 魔法了！！！ (Three.js)</a></p>
<p><a href="https://juejin.cn/post/7212597327579037756" target="_blank" title="https://juejin.cn/post/7212597327579037756">2023 年了，还有前端人不知道 commit 规范 ？</a></p></div></div>