
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/iRuriCatt/p/18636389" title="发布于 2024-12-30 17:02">
    <span role="heading" aria-level="2">Ajax入门以及Axios的详细使用（含Promise）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="1-概述">1. 概述</h2>
<h3 id="11-是什么">1.1 是什么</h3>
<ul>
<li>
<p>Ajax = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）</p>
</li>
<li>
<p>Ajax 不是新的编程语言，而是一种用于创建快速动态网页的技术</p>
</li>
<li>
<p>Ajax 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容，使网页实现异步更新</p>
</li>
<li>
<p>传统的网页（不使用 Ajax）如果需要更新内容，必需重载整个网页</p>
</li>
<li>
<p>Ajax 不需要任何浏览器插件，但需要用户允许 JavaScript 在浏览器上执行</p>
</li>
<li>
<p><code>XMLHttpRequest</code>只是实现 Ajax 的一种方式</p>
</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/3096011/202412/3096011-20241230165120117-1194109519.png" alt="" loading="lazy"></p>
<h3 id="12-为什么">1.2 为什么</h3>
<ul>
<li>
<p>以前数据都是写在代码里固定的, 无法随时变化</p>
</li>
<li>
<p>现在数据可以从服务器上进行获取，让数据变活</p>
</li>
</ul>
<h3 id="13-入门程序">1.3 入门程序</h3>
<ul>
<li>
<p>需求：从服务器获取省份列表数据，展示到页面上</p>
</li>
<li>
<p>步骤：</p>
<ul>
<li>引入 axios</li>
</ul>
<pre><code class="language-html">&lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
</code></pre>
<ul>
<li>基本语法</li>
</ul>
<pre><code class="language-js">axios({
	url: "目标资源地址",
}).then(result =&gt; {
	// 对服务器返回的数据做后续处理
});
</code></pre>
</li>
<li>
<p>示例</p>
</li>
</ul>
<pre><code class="language-html">&lt;div id="root"&gt;&lt;/div&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
	axios({
		url: "http://hmajax.itheima.net/api/province",
	}).then(result =&gt; {
		document.querySelector("#root").innerHTML = result.data.list.join("&lt;br&gt;");
	});
&lt;/script&gt;
</code></pre>
<h2 id="2-axios">2. axios</h2>
<h3 id="21-url">2.1 URL</h3>
<ul>
<li>
<p><strong>URL：</strong>统一资源定位符，简称网址，用于定位网络中的资源（网页，图片，数据，视频，音频等）</p>
</li>
<li>
<p><strong>组成：</strong>协议，域名，资源路径（比较重要的三部分）</p>
</li>
<li>
<p><strong>http 协议：</strong>超文本传输协议，规定了浏览器和服务器传递数据的格式</p>
</li>
<li>
<p><strong>域名：</strong>标记服务器在互联网当中的方位，网络中有很多服务器，你想访问哪一台，需要知道它的域名</p>
</li>
<li>
<p><strong>资源路径：</strong>一个服务器内有多个资源，用于标识你要访问的资源具体的位置</p>
</li>
</ul>
<img src="https://img2024.cnblogs.com/blog/3096011/202412/3096011-20241230165225749-1795207028.png" style="zoom: 67%">
<ul>
<li>
<p><strong>查询参数：</strong>携带给服务器额外信息，让服务器返回想要的某一部分数据而不是全部数据</p>
<ul>
<li>
<p>格式：<code>http://xxxx.com/xxx/xxx?参数名1=值1&amp;参数名2=值2</code></p>
</li>
<li>
<p>参数名一般是后端规定的，值前端看情况传递即可</p>
</li>
</ul>
</li>
<li>
<p>axios 如何携带查询参数？</p>
</li>
</ul>
<pre><code class="language-js">axios({
	url: "目标资源地址",
	params: {
		参数名: 值,
	},
}).then(result =&gt; {
	// 对服务器返回的数据做后续处理
});
</code></pre>
<ul>
<li>示例 1：获取“河北省”下属的城市列表</li>
</ul>
<pre><code class="language-html">&lt;div id="root"&gt;&lt;/div&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
	axios({
		url: "http://hmajax.itheima.net/api/city",
		params: {
			pname: "河北省",
		},
	}).then(result =&gt; {
		document.querySelector("#root").innerHTML = result.data.list.join("&lt;br&gt;");
	});
&lt;/script&gt;
</code></pre>
<ul>
<li>示例 2：根据输入的省份名字和城市名字，查询下属地区列表</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/3096011/202412/3096011-20241230165253784-1061360737.png" alt="" loading="lazy"></p>
<pre><code class="language-html">&lt;!-- 样式 --&gt;
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" /&gt;
&lt;style&gt;
	#root {
		font-size: 15px;
	}

	body {
		padding-top: 15px;
	}
&lt;/style&gt;

&lt;div class="container"&gt;
	&lt;form id="editForm" class="row"&gt;
		&lt;!-- 输入省份名字 --&gt;
		&lt;div class="mb-3 col"&gt;
			&lt;label class="form-label"&gt;省份名字&lt;/label&gt;
			&lt;input type="text" value="北京" name="province" class="form-control province" placeholder="请输入省份名称" /&gt;
		&lt;/div&gt;
		&lt;!-- 输入城市名字 --&gt;
		&lt;div class="mb-3 col"&gt;
			&lt;label class="form-label"&gt;城市名字&lt;/label&gt;
			&lt;input type="text" value="北京市" name="city" class="form-control city" placeholder="请输入城市名称" /&gt;
		&lt;/div&gt;
	&lt;/form&gt;
	&lt;button type="button" class="btn btn-primary sel-btn"&gt;查询&lt;/button&gt;
	&lt;br /&gt;
	&lt;br /&gt;
	&lt;p&gt;地区列表:&lt;/p&gt;
	&lt;ul class="list-group"&gt;
		&lt;!-- 示例地区 --&gt;
		&lt;!-- &lt;li class="list-group-item"&gt;东城区&lt;/li&gt; --&gt;
	&lt;/ul&gt;
&lt;/div&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
	/*
      获取地区列表: http://hmajax.itheima.net/api/area
      查询参数:
        pname: 省份或直辖市名字
        cname: 城市名字
    */
	// 绑定点击事件
	document.querySelector(".sel-btn").addEventListener("click", () =&gt; {
		// 获取输入框的值
		let pName = document.querySelector(".province").value;
		let cName = document.querySelector(".city").value;

		// 利用axios获取数据
		axios({
			url: "http://hmajax.itheima.net/api/area",
			params: {
				pname: pName,
				cname: cName,
			},
		}).then(result =&gt; {
			document.querySelector(".list-group").innerHTML = result.data.list
				.map(item =&gt; `&lt;li class="list-group-item"&gt;${item}&lt;/li&gt;`)
				.join("");
		});
	});
&lt;/script&gt;
</code></pre>
<h3 id="22-数据提交">2.2 数据提交</h3>
<ul>
<li>常用请求方法</li>
</ul>
<table>
<thead>
<tr>
<th>请求方法</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>获取数据（默认请求方式）</td>
</tr>
<tr>
<td>POST</td>
<td>提交数据</td>
</tr>
<tr>
<td>PUT</td>
<td>修改数据（全部）</td>
</tr>
<tr>
<td>DELETE</td>
<td>删除数据</td>
</tr>
<tr>
<td>PATCH</td>
<td>修改数据（部分）</td>
</tr>
</tbody>
</table>
<ul>
<li>axios 如何提交数据到服务器</li>
</ul>
<pre><code class="language-js">axios({
	url: "目标资源地址",
	method: "请求方法",
	data: {
		参数名: 值,
	},
}).then(result =&gt; {
	// 对服务器返回的数据做后续处理
});
</code></pre>
<ul>
<li>示例：注册账号，提交用户名和密码到服务器保存</li>
</ul>
<pre><code class="language-html">&lt;button&gt;点击注册&lt;/button&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
	document.querySelector("button").addEventListener("click", () =&gt; {
		axios({
			url: "http://hmajax.itheima.net/api/register",
			method: "post",
			data: {
				username: "itheima666",
				password: "12345678",
			},
		}).then(result =&gt; {
			console.log(result);
		});
	});
&lt;/script&gt;
</code></pre>
<img src="https://img2024.cnblogs.com/blog/3096011/202412/3096011-20241230165323904-994007089.png" style="zoom: 80%">
<h3 id="23-axios-错误处理">2.3 axios 错误处理</h3>
<pre><code class="language-js">axios({
	// ...请求选项
})
	.then(result =&gt; {
		// 处理成功数据
	})
	.catch(error =&gt; {
		// 处理失败错误
	});
</code></pre>
<ul>
<li>示例：</li>
</ul>
<pre><code class="language-html">&lt;button&gt;点击注册&lt;/button&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
	document.querySelector("button").addEventListener("click", () =&gt; {
		axios({
			url: "http://hmajax.itheima.net/api/register",
			method: "post",
			data: {
				username: "itheima666",
				password: "12345678",
			},
		})
			.then(result =&gt; {
				console.log(result);
			})
			.catch(error =&gt; {
				alert(error.response.data.message);
			});
	});
&lt;/script&gt;
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3096011/202412/3096011-20241230165349067-361141553.png" alt="" loading="lazy"></p>
<h3 id="24-案例-用户登录">2.4 案例-用户登录</h3>
<ul>
<li>样式</li>
</ul>
<pre><code class="language-html">&lt;!-- 引入bootstrap.css --&gt;
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" /&gt;
&lt;!-- 公共 --&gt;
&lt;style&gt;
	html,
	body {
		background-color: #edf0f5;
		width: 100%;
		height: 100%;
		display: flex;
		justify-content: center;
		align-items: center;
	}

	.container {
		width: 520px;
		height: 540px;
		background-color: #fff;
		padding: 60px;
		box-sizing: border-box;
	}

	.container h3 {
		font-weight: 900;
	}
&lt;/style&gt;
&lt;!-- 表单容器和内容 --&gt;
&lt;style&gt;
	.form_wrap {
		color: #8b929d !important;
	}

	.form-text {
		color: #8b929d !important;
	}
&lt;/style&gt;
&lt;!-- 提示框样式 --&gt;
&lt;style&gt;
	.alert {
		transition: 0.5s;
		opacity: 0;
	}

	.alert.show {
		opacity: 1;
	}
&lt;/style&gt;
</code></pre>
<ul>
<li>框架</li>
</ul>
<pre><code class="language-html">&lt;div class="container"&gt;
	&lt;h3&gt;欢迎-登录&lt;/h3&gt;
	&lt;!-- 登录结果-提示框 --&gt;
	&lt;div class="alert alert-success" role="alert"&gt;
		&lt;!-- 提示消息 --&gt;
	&lt;/div&gt;
	&lt;!-- 表单 --&gt;
	&lt;div class="form_wrap"&gt;
		&lt;form&gt;
			&lt;div class="mb-3"&gt;
				&lt;label for="username" class="form-label"&gt;账号名&lt;/label&gt;
				&lt;input type="text" class="form-control username" /&gt;
			&lt;/div&gt;
			&lt;div class="mb-3"&gt;
				&lt;label for="password" class="form-label"&gt;密码&lt;/label&gt;
				&lt;input type="password" class="form-control password" /&gt;
			&lt;/div&gt;
			&lt;button type="button" class="btn btn-primary btn-login"&gt;登 录&lt;/button&gt;
		&lt;/form&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
	// 目标1：点击登录时，用户名和密码长度判断，并提交数据和服务器通信
	function alertFn(msg, isSuccess) {
		// 显示提示框
		let myAlert = document.querySelector(".alert");
		myAlert.classList.add("show");
		// 更换样式
		let bgc = isSuccess ? "alert-success" : "alert-danger";
		myAlert.classList.add(bgc);
		// 打印信息
		myAlert.innerText = msg;
		// 2s后自动消失
		setTimeout(() =&gt; {
			myAlert.classList.remove("show");
			// 重置背景色，避免类名冲突
			myAlert.classList.remove(bgc);
		}, 2000);
	}
	document.querySelector(".btn-login").addEventListener("click", () =&gt; {
		let username = document.querySelector(".username").value;
		let password = document.querySelector(".password").value;

		if (username.length &lt; 8) {
			// console.log('用户名不能少于8个字符')
			alertFn("用户名不能少于8个字符", false);
			return;
		}
		if (password &lt; 6) {
			// console.log('密码不能少于6个字符')
			alertFn("密码不能少于6个字符", false);
			return;
		}

		axios({
			url: "http://hmajax.itheima.net/api/login",
			method: "post",
			data: {
				username,
				password,
			},
		})
			.then(result =&gt; {
				// alert(result.data.message)
				alertFn(result.data.message, true);
			})
			.catch(error =&gt; {
				// alert(error.response.data.message)
				alertFn(error.response.data.message, false);
			});
	});
&lt;/script&gt;
</code></pre>
<h3 id="25-form-serialize-插件">2.5 form-serialize 插件</h3>
<blockquote>
<p>快速收集目标表单范围内表单元素的值</p>
</blockquote>
<ul>
<li>
<p>引入 form-serialize 插件</p>
</li>
<li>
<p>使用 serialize 函数</p>
<ul>
<li>
<p>参数 1：要获取的 form 表单标签对象（要求表单元素有 name 属性，用来作为收集的数据中属性名）</p>
</li>
<li>
<p>参数 2：配置对象</p>
<ul>
<li>
<p>hash：</p>
<ul>
<li>
<p>true - 收集出来的是一个 JS 对象</p>
</li>
<li>
<p>false - 收集出来的是一个查询字符串</p>
</li>
</ul>
</li>
<li>
<p>empty：</p>
<ul>
<li>
<p>true - 收集空值</p>
</li>
<li>
<p>false - 不收集空值</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>示例：收集登录表单里用户名和密码</p>
</li>
</ul>
<pre><code class="language-html">&lt;form action="javascript:;" class="example-form"&gt;
	&lt;input type="text" name="uname" /&gt;
	&lt;br /&gt;
	&lt;input type="text" name="pwd" /&gt;
	&lt;br /&gt;
	&lt;input type="button" class="btn" value="提交" /&gt;
&lt;/form&gt;
&lt;!-- 
目标：在点击提交时，使用form-serialize插件，快速收集表单元素值
--&gt;
&lt;script src="./form-serialize.js"&gt;&lt;/script&gt;
&lt;script&gt;
	document.querySelector(".btn").addEventListener("click", () =&gt; {
		const form = document.querySelector(".example-form");
		const data = serialize(form, { hash: true, empty: true });
		console.log(data);
	});
&lt;/script&gt;
</code></pre>
<h3 id="26-bootstrap-弹框">2.6 Bootstrap 弹框</h3>
<h4 id="261-属性控制">2.6.1 属性控制</h4>
<ul>
<li>
<p>引入 bootstrap.css 和 bootstrap.js</p>
</li>
<li>
<p>准备弹框标签，确认结构（可以从 Bootstrap 官方文档的 Modal 里复制基础例子）- 运行到网页后，逐一对应标签和弹框每个部分对应关系</p>
</li>
<li>
<p>通过自定义属性，通知弹框的显示和隐藏，语法如下：</p>
</li>
</ul>
<pre><code class="language-html">&lt;button data-bs-toggle="modal" data-bs-target="css选择器"&gt;显示弹框&lt;/button&gt;

&lt;button data-bs-dismiss="modal"&gt;Close&lt;/button&gt;
</code></pre>
<ul>
<li>代码实现</li>
</ul>
<pre><code class="language-html">&lt;!-- 
目标：使用Bootstrap弹框
1. 引入bootstrap.css和bootstrap.js
2. 准备弹框标签，确认结构
3. 通过自定义属性，控制弹框的显示和隐藏
--&gt;
&lt;button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target=".mybox"&gt;显示弹框&lt;/button&gt;

&lt;div class="modal mybox" tabindex="-1"&gt;
	&lt;div class="modal-dialog"&gt;
		&lt;div class="modal-content"&gt;
			&lt;div class="modal-header"&gt;
				&lt;h5 class="modal-title"&gt;Modal title&lt;/h5&gt;
				&lt;button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"&gt;&lt;/button&gt;
			&lt;/div&gt;
			&lt;div class="modal-body"&gt;
				&lt;p&gt;Modal body text goes here.&lt;/p&gt;
			&lt;/div&gt;
			&lt;div class="modal-footer"&gt;
				&lt;button type="button" class="btn btn-secondary" data-bs-dismiss="modal"&gt;Close&lt;/button&gt;
				&lt;button type="button" class="btn btn-primary"&gt;Save changes&lt;/button&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h4 id="262-js-控制">2.6.2 js 控制</h4>
<ul>
<li>
<p>为什么需要 js 方式控制？</p>
<ul>
<li>当显示/隐藏之前，需要执行一些 JS 逻辑代码，就需要引入 JS 控制弹框显示/隐藏的方式</li>
</ul>
</li>
<li>
<p>例如：</p>
<ul>
<li>
<p>点击编辑姓名按钮，在弹框显示之前，在输入框填入默认姓名</p>
</li>
<li>
<p>点击保存按钮，在弹框隐藏之前，获取用户填入的名字并打印</p>
</li>
</ul>
</li>
</ul>
<img src="https://img2024.cnblogs.com/blog/3096011/202412/3096011-20241230165417151-561606923.png" style="zoom: 67%">
<ul>
<li>语法</li>
</ul>
<pre><code class="language-js">// 创建弹框对象
const modalDom = document.querySelector("css选择器");
const modal = new bootstrap.Modal(modelDom);

// 显示弹框
modal.show();
// 隐藏弹框
modal.hide();
</code></pre>
<ul>
<li>示例</li>
</ul>
<pre><code class="language-html">&lt;!-- 
目标：使用JS控制弹框，显示和隐藏
1. 创建弹框对象
2. 调用弹框对象内置方法
.show() 显示
.hide() 隐藏
--&gt;
&lt;button type="button" class="btn btn-primary edit-btn"&gt;编辑姓名&lt;/button&gt;

&lt;div class="modal name-box" tabindex="-1"&gt;
	&lt;div class="modal-dialog"&gt;
		&lt;div class="modal-content"&gt;
			&lt;div class="modal-header"&gt;
				&lt;h5 class="modal-title"&gt;请输入姓名&lt;/h5&gt;
				&lt;button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"&gt;&lt;/button&gt;
			&lt;/div&gt;
			&lt;div class="modal-body"&gt;
				&lt;form action=""&gt;
					&lt;span&gt;姓名：&lt;/span&gt;
					&lt;input type="text" class="username" /&gt;
				&lt;/form&gt;
			&lt;/div&gt;
			&lt;div class="modal-footer"&gt;
				&lt;button type="button" class="btn btn-secondary" data-bs-dismiss="modal"&gt;取消&lt;/button&gt;
				&lt;button type="button" class="btn btn-primary save-btn"&gt;保存&lt;/button&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;!-- 引入bootstrap.js --&gt;
&lt;script src="./bootstrap.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
	const modalBox = document.querySelector(".name-box");
	const modal = new bootstrap.Modal(modalBox);

	document.querySelector(".edit-btn").addEventListener("click", () =&gt; {
		document.querySelector(".username").value = "默认姓名";
		modal.show();
	});

	document.querySelector(".save-btn").addEventListener("click", () =&gt; {
		const username = document.querySelector(".username").value;
		console.log("将数据提交到服务器", username);
		modal.hide();
	});
&lt;/script&gt;
</code></pre>
<h3 id="27-案例-图书管理">2.7 案例-图书管理</h3>
<ul>
<li>
<p><a href="https://apifox.com/apidoc/shared-1b0dd84f-faa8-435d-b355-5a8a329e34a8" target="_blank" rel="noopener nofollow">黑马接口文档</a></p>
</li>
<li>
<p>结构</p>
</li>
</ul>
<pre><code class="language-html">&lt;!-- 主体区域 --&gt;
&lt;div class="container"&gt;
	&lt;!-- 头部标题和添加按钮 --&gt;
	&lt;div class="top"&gt;
		&lt;h3&gt;图书管理&lt;/h3&gt;
		&lt;button type="button" class="btn btn-primary plus-btn" data-bs-toggle="modal" data-bs-target=".add-modal"&gt;
			+ 添加
		&lt;/button&gt;
	&lt;/div&gt;
	&lt;!-- 数据列表 --&gt;
	&lt;table class="table"&gt;
		&lt;thead class="table-light"&gt;
			&lt;tr&gt;
				&lt;th style="width: 150px;"&gt;序号&lt;/th&gt;
				&lt;th&gt;书名&lt;/th&gt;
				&lt;th&gt;作者&lt;/th&gt;
				&lt;th&gt;出版社&lt;/th&gt;
				&lt;th style="width: 180px;"&gt;操作&lt;/th&gt;
			&lt;/tr&gt;
		&lt;/thead&gt;
		&lt;tbody class="list"&gt;
			&lt;!-- &lt;tr&gt;
					&lt;td&gt;1&lt;/td&gt;
					&lt;td&gt;JavaScript程序设计&lt;/td&gt;
					&lt;td&gt;马特·弗里斯比&lt;/td&gt;
					&lt;td&gt;人民邮电出版社&lt;/td&gt;
					&lt;td&gt;
						&lt;span class="del"&gt;删除&lt;/span&gt;
						&lt;span class="edit"&gt;编辑&lt;/span&gt;
					&lt;/td&gt;
			&lt;/tr&gt; --&gt;
		&lt;/tbody&gt;
	&lt;/table&gt;
&lt;/div&gt;
&lt;!-- 新增-弹出框 --&gt;
&lt;div class="modal fade add-modal"&gt;
	&lt;!-- 中间白色区域 --&gt;
	&lt;div class="modal-dialog"&gt;
		&lt;div class="modal-content"&gt;
			&lt;div class="modal-header top"&gt;
				&lt;span&gt;添加图书&lt;/span&gt;
				&lt;button type="button" class="btn-close" aria-label="Close" data-bs-dismiss="modal"&gt;&lt;/button&gt;
			&lt;/div&gt;
			&lt;div class="modal-body form-wrap"&gt;
				&lt;!-- 新增表单 --&gt;
				&lt;form class="add-form"&gt;
					&lt;div class="mb-3"&gt;
						&lt;label for="bookname" class="form-label"&gt;书名&lt;/label&gt;
						&lt;input type="text" class="form-control bookname" placeholder="请输入书籍名称" name="bookname" /&gt;
					&lt;/div&gt;
					&lt;div class="mb-3"&gt;
						&lt;label for="author" class="form-label"&gt;作者&lt;/label&gt;
						&lt;input type="text" class="form-control author" placeholder="请输入作者名称" name="author" /&gt;
					&lt;/div&gt;
					&lt;div class="mb-3"&gt;
						&lt;label for="publisher" class="form-label"&gt;出版社&lt;/label&gt;
						&lt;input type="text" class="form-control publisher" placeholder="请输入出版社名称" name="publisher" /&gt;
					&lt;/div&gt;
				&lt;/form&gt;
			&lt;/div&gt;
			&lt;div class="modal-footer btn-group"&gt;
				&lt;button type="button" class="btn btn-primary" data-bs-dismiss="modal"&gt;取消&lt;/button&gt;
				&lt;button type="button" class="btn btn-primary add-btn"&gt;保存&lt;/button&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;!-- 编辑-弹出框 --&gt;
&lt;div class="modal fade edit-modal"&gt;
	&lt;!-- 中间白色区域 --&gt;
	&lt;div class="modal-dialog"&gt;
		&lt;div class="modal-content"&gt;
			&lt;div class="modal-header top"&gt;
				&lt;span&gt;编辑图书&lt;/span&gt;
				&lt;button type="button" class="btn-close" aria-label="Close" data-bs-dismiss="modal"&gt;&lt;/button&gt;
			&lt;/div&gt;
			&lt;div class="modal-body form-wrap"&gt;
				&lt;!-- 编辑表单 --&gt;
				&lt;form class="edit-form"&gt;
					&lt;!-- 保存正在编辑的图书id,隐藏起来：无需让用户修改 --&gt;
					&lt;input type="hidden" class="id" name="id" /&gt;
					&lt;div class="mb-3"&gt;
						&lt;label for="bookname" class="form-label"&gt;书名&lt;/label&gt;
						&lt;input type="text" class="form-control bookname" placeholder="请输入书籍名称" name="bookname" /&gt;
					&lt;/div&gt;
					&lt;div class="mb-3"&gt;
						&lt;label for="author" class="form-label"&gt;作者&lt;/label&gt;
						&lt;input type="text" class="form-control author" placeholder="请输入作者名称" name="author" /&gt;
					&lt;/div&gt;
					&lt;div class="mb-3"&gt;
						&lt;label for="publisher" class="form-label"&gt;出版社&lt;/label&gt;
						&lt;input type="text" class="form-control publisher" placeholder="请输入出版社名称" name="publisher" /&gt;
					&lt;/div&gt;
				&lt;/form&gt;
			&lt;/div&gt;
			&lt;div class="modal-footer btn-group"&gt;
				&lt;button type="button" class="btn btn-primary" data-bs-dismiss="modal"&gt;取消&lt;/button&gt;
				&lt;button type="button" class="btn btn-primary edit-btn"&gt;修改&lt;/button&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;script src="https://cdn.bootcdn.net/ajax/libs/axios/1.2.0/axios.min.js"&gt;&lt;/script&gt;
&lt;script src="./lib/form-serialize.js"&gt;&lt;/script&gt;
&lt;script src="./lib/bootstrap.min.js"&gt;&lt;/script&gt;
&lt;!-- 核心逻辑 --&gt;
&lt;script src="./js/index.js"&gt;&lt;/script&gt;
</code></pre>
<ul>
<li>
<p>index.js</p>
</li>
<li>
<p>渲染图书列表</p>
</li>
</ul>
<pre><code class="language-js">/**
 * 目标1：渲染图书列表
 *  1.1 获取数据
 *  1.2 渲染数据
 */

const creator = "老李";

function getBooksList() {
	// 1.1 获取数据
	axios({
		url: "http://hmajax.itheima.net/api/books",
		params: {
			creator,
		},
	}).then(result =&gt; {
		// console.log(result.data.data)
		// 1.2 渲染数据
		const list = result.data.data
			.map((item, index) =&gt; {
				return `
                &lt;tr&gt;
                    &lt;td&gt;${index + 1}&lt;/td&gt;
                    &lt;td&gt;${item.bookname}&lt;/td&gt;
                    &lt;td&gt;${item.author}&lt;/td&gt;
                    &lt;td&gt;${item.publisher}&lt;/td&gt;
                    &lt;td data-id=${item.id}&gt;
                        &lt;span class="del"&gt;删除&lt;/span&gt;
                        &lt;span class="edit"&gt;编辑&lt;/span&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            `;
			})
			.join("");
		document.querySelector(".list").innerHTML = list;
	});
}

getBooksList();
</code></pre>
<ul>
<li>新增图书</li>
</ul>
<pre><code class="language-js">/**
 * 目标2：新增图书
 *  2.1新增弹框-&gt;显示和隐藏
 *  2.2收集表单数据，并提交到服务器保存
 *  2.3刷新图书列表
 */
const addModalDom = document.querySelector(".add-modal");
const addModal = new bootstrap.Modal(addModalDom);

// 2.1 新增弹框-&gt;显示和隐藏
document.querySelector(".add-btn").addEventListener("click", () =&gt; {
	// 2.2 获取输入框的数据
	const addForm = document.querySelector(".add-form");
	const formData = serialize(addForm, { hash: true, empty: true });
	console.log(formData);

	// 2.3 提交到服务器保存
	axios({
		url: "http://hmajax.itheima.net/api/books",
		method: "post",
		data: {
			...formData,
			creator,
		},
	}).then(result =&gt; {
		console.log(result);
		// 2.4 重新渲染页面
		getBooksList();
		// 重置表单
		addForm.reset();
		// 点击保存，隐藏模态框
		addModal.hide();
	});
});
</code></pre>
<ul>
<li>删除图书</li>
</ul>
<pre><code class="language-js">/**
 * 目标3：删除图书
 *  3.1删除元素绑定点击事件-&gt;获取图书id
 *  3.2调用删除接口
 *  3.3刷新图书列表
 */
// 3.1 删除元素绑定点击事件（事件委托）-&gt;获取图书id
document.querySelector(".list").addEventListener("click", e =&gt; {
	if (e.target.classList.contains("del")) {
		const theId = e.target.parentNode.dataset.id;

		// 3.2 调用删除接口
		axios({
			url: `http://hmajax.itheima.net/api/books/${theId}`,
			method: "delete",
		}).then(() =&gt; {
			// 3.3 刷新图书列表
			getBooksList();
		});
	}
});
</code></pre>
<ul>
<li>编辑图书</li>
</ul>
<pre><code class="language-js">/**
 * 目标4：编辑图书
 *  4.1编辑弹框-&gt;显示和隐藏
 *  4.2获取当前编辑图书数据-&gt;回显到编辑表单中
 *  4.3提交保存修改，并刷新列表
 */
const editModalDom = document.querySelector(".edit-modal");
const editModal = new bootstrap.Modal(editModalDom);

document.querySelector(".list").addEventListener("click", e =&gt; {
	if (e.target.classList.contains("edit")) {
		const theId = e.target.parentNode.dataset.id;
		// 4.2 获取当前编辑图书数据-&gt;回显到编辑表单中
		axios({
			url: `http://hmajax.itheima.net/api/books/${theId}`,
			method: "get",
		}).then(result =&gt; {
			// 数据对象"属性"和标签"类名"一致
			// 遍历数据对象，使用属性去获取对应的标签，快速赋值
			const bookObj = result.data.data;
			// console.log(bookObj)
			const keys = Object.keys(bookObj);
			keys.forEach(key =&gt; {
				document.querySelector(`.edit-form .${key}`).value = bookObj[key];
			});
		});
		// 4.1 编辑弹框-&gt;显示和隐藏
		editModal.show();
	}
});

document.querySelector(".edit-btn").addEventListener("click", () =&gt; {
	const editForm = document.querySelector(".edit-form");
	const editData = serialize(editForm, { hash: true, empty: true });

	// 4.3 提交保存修改，并刷新列表
	axios({
		url: `http://hmajax.itheima.net/api/books/${editData.id}`,
		method: "put",
		data: {
			...editData,
			creator,
		},
	}).then(() =&gt; {
		getBooksList();
	});
	editModal.hide();
});
</code></pre>
<ul>
<li>
<p>总结</p>
<ul>
<li>
<p>渲染列表（查）</p>
<ul>
<li>
<p>获取数据</p>
</li>
<li>
<p>渲染数据</p>
</li>
</ul>
</li>
<li>
<p>新增图书（增）</p>
<ul>
<li>
<p>弹框（显示/隐藏）</p>
</li>
<li>
<p>收集数据&amp;提交保存</p>
</li>
<li>
<p>刷新页面列表</p>
</li>
</ul>
</li>
<li>
<p>删除图书（删）</p>
<ul>
<li>
<p>绑定点击事件（获取要删除的图书 id）</p>
</li>
<li>
<p>调用删除接口（让服务器删除此数据）</p>
</li>
<li>
<p>成功后重新获取并刷新列表</p>
</li>
</ul>
</li>
<li>
<p>编辑图书（改）</p>
<ul>
<li>
<p>弹框（显示/隐藏）</p>
</li>
<li>
<p>表单（数据回显）</p>
</li>
<li>
<p>点击修改收集数据，提交到服务器保存</p>
</li>
<li>
<p>重新获取并刷新列表</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="28-图片上传">2.8 图片上传</h3>
<blockquote>
<p>把本地的图片上传到网页上显示</p>
</blockquote>
<ul>
<li>
<p>实现步骤</p>
<ul>
<li>
<p>获取图片文件对象：<code>e.target.files[0]</code></p>
</li>
<li>
<p>使用 FormData 表单数据对象装入</p>
<pre><code class="language-js">const fd = new FormData();
fd.append(参数名, 值);
</code></pre>
</li>
<li>
<p>提交表单数据对象，使用服务器返回图片 url 网址</p>
</li>
</ul>
</li>
</ul>
<pre><code class="language-html">&lt;!-- 文件选择元素 --&gt;
&lt;input type="file" class="upload" /&gt;
&lt;img src="" alt="" /&gt;

&lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
	document.querySelector(".upload").addEventListener("change", e =&gt; {
		// 1. 获取图片文件
		// console.log(e.target.files[0])

		// 2. 使用 FormData 携带图片文件
		const fd = new FormData();
		fd.append("img", e.target.files[0]);

		// 3. 提交到服务器，获取图片url网址使用
		axios({
			url: "http://hmajax.itheima.net/api/uploadimg",
			method: "post",
			data: fd,
		}).then(result =&gt; {
			// console.log(result)
			document.querySelector("img").src = result.data.data.url;
		});
	});
&lt;/script&gt;
</code></pre>
<ul>
<li>示例：更换背景图片</li>
</ul>
<pre><code class="language-html">&lt;div class="container"&gt;
	&lt;div class="nav"&gt;
		&lt;div class="left"&gt;
			&lt;ul&gt;
				&lt;li&gt;&lt;a href="http://yun.itheima.com/?webzly" target="_blank" rel="nofollow"&gt;免费教程&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a href="http://resource.ityxb.com/booklist/?webzly" target="_blank" rel="nofollow"&gt;原创书籍&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;
					&lt;a href="http://www.itheima.com/teacher.html?webzly#ajavaee" target="_blank" rel="nofollow"&gt;教研团队&lt;/a&gt;
				&lt;/li&gt;
				&lt;li&gt;
					&lt;a href="http://www.itheima.com/special/hmschool/index.shtml?webzly" target="_blank" rel="nofollow"&gt;
						校区汇总
					&lt;/a&gt;
				&lt;/li&gt;
				&lt;li&gt;&lt;a href="http://www.itheima.com/flow/flow.html?webzly" target="_blank" rel="nofollow"&gt;报名流程&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a href="https://pip.itcast.cn?hmgw$webzly" target="_blank" rel="nofollow"&gt;项目信息站&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a href="http://bbs.itheima.com/forum.php?webzly" target="_blank" rel="nofollow"&gt;技术社区&lt;/a&gt;&lt;/li&gt;
			&lt;/ul&gt;
		&lt;/div&gt;
		&lt;div class="right"&gt;
			&lt;label for="bg"&gt;更换背景&lt;/label&gt;
			&lt;input class="bg-ipt" type="file" id="bg" /&gt;
		&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class="search-container"&gt;
		&lt;img src="https://www.itheima.com/images/logo.png" alt="" /&gt;
		&lt;div class="search-box"&gt;
			&lt;input type="text" /&gt;
			&lt;button&gt;搜索一下&lt;/button&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
&lt;!-- 核心代码 --&gt;
&lt;script src="./js/index.js"&gt;&lt;/script&gt;
</code></pre>
<ul>
<li>index.js</li>
</ul>
<pre><code class="language-js">document.querySelector(".bg-ipt").addEventListener("change", e =&gt; {
	// 1. 选择图片上传，设置body背景
	const fd = new FormData();
	fd.append("img", e.target.files[0]);

	axios({
		url: "http://hmajax.itheima.net/api/uploadimg",
		method: "post",
		data: fd,
	}).then(result =&gt; {
		// console.log(result)
		const imgUrl = result.data.data.url;
		document.body.style.backgroundImage = `url(${imgUrl})`;

		// 2. 上传成功时，"保存"图片url网址
		localStorage.setItem("bgImg", imgUrl);
	});
});

// 3. 网页运行后，获取url网址使用
const imgUrl = localStorage.getItem("bgImg");
document.body.style.backgroundImage = `url(${imgUrl})`;
</code></pre>
<h3 id="29-案例-个人信息设置">2.9 案例-个人信息设置</h3>
<ul>
<li>结构</li>
</ul>
<pre><code class="language-html">&lt;!-- toast 提示框 --&gt;
&lt;div class="toast my-toast" data-bs-delay="1500"&gt;
    &lt;div class="toast-body"&gt;
        &lt;div class="alert alert-success info-box"&gt;
            操作成功
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- 核心内容区域 --&gt;
&lt;div class="container"&gt;
    &lt;ul class="my-nav"&gt;
        &lt;li class="active"&gt;基本设置&lt;/li&gt;
        &lt;li&gt;安全设置&lt;/li&gt;
        &lt;li&gt;账号绑定&lt;/li&gt;
        &lt;li&gt;新消息通知&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div class="content"&gt;
        &lt;div class="info-wrap"&gt;
            &lt;h3 class="title"&gt;基本设置&lt;/h3&gt;
            &lt;form class="user-form" action="javascript:;"&gt;
                &lt;div class="form-item"&gt;
                    &lt;label for="email"&gt;邮箱&lt;/label&gt;
                    &lt;input id="email" name="email" class="email" type="text" placeholder="请输入邮箱" autocomplete="off"&gt;
                &lt;/div&gt;
                &lt;div class="form-item"&gt;
                    &lt;label for="nickname"&gt;昵称&lt;/label&gt;
                    &lt;input id="nickname" name="nickname" class="nickname" type="text" placeholder="请输入昵称" autocomplete="off"&gt;
                &lt;/div&gt;
                &lt;div class="form-item"&gt;
                    &lt;label&gt;性别&lt;/label&gt;
                    &lt;label class="male-label"&gt;&lt;input type="radio" name="gender" class="gender" value="0"&gt;男&lt;/label&gt;
                    &lt;label class="male-label"&gt;&lt;input type="radio" name="gender" class="gender" value="1"&gt;女&lt;/label&gt;
                &lt;/div&gt;
                &lt;div class="form-item"&gt;
                    &lt;label for="desc"&gt;个人简介&lt;/label&gt;
                    &lt;textarea id="desc" name="desc" class="desc" placeholder="请输入个人简介" cols="20" rows="10" autocomplete="off"&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;button class="submit"&gt;提交&lt;/button&gt;
            &lt;/form&gt;
        &lt;/div&gt;
        &lt;div class="avatar-box"&gt;
            &lt;h4 class="avatar-title"&gt;头像&lt;/h3&gt;
            &lt;img class="prew" src="./img/头像.png" alt=""&gt;
            &lt;label for="upload"&gt;更换头像&lt;/label&gt;
            &lt;input id="upload" type="file" class="upload"&gt;
        &lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js"&gt;&lt;/script&gt;
&lt;script src="./lib/form-serialize.js"&gt;&lt;/script&gt;
&lt;!-- 核心逻辑 --&gt;
&lt;script src="./js/index.js"&gt;&lt;/script&gt;
</code></pre>
<ul>
<li>
<p>index.js</p>
</li>
<li>
<p>信息渲染</p>
</li>
</ul>
<pre><code class="language-js">/**
 * 目标1：信息渲染
 *  1.1 获取用户的数据
 *  1.2 回显数据到标签上
 * */

const creator = "小明";
axios({
	url: "http://hmajax.itheima.net/api/settings",
	params: {
		creator,
	},
}).then(result =&gt; {
	// console.log(result.data.data)
	const userObj = result.data.data;

	const keys = Object.keys(userObj);
	keys.forEach(key =&gt; {
		// 头像和性别比较特殊，需要单独处理
		if (key === "avatar") {
			document.querySelector(".prew").src = userObj[key];
		} else if (key === "gender") {
			const gRadioList = document.querySelectorAll(".gender");
			// 0男，1女，刚好与数组下标对应
			const gNum = userObj[key];
			gRadioList[gNum].checked = true;
		} else {
			document.querySelector(`.${key}`).value = userObj[key];
		}
	});
});
</code></pre>
<ul>
<li>修改头像</li>
</ul>
<pre><code class="language-js">/**
 * 目标2：修改头像
 *  2.1 获取头像文件
 *  2.2 提交服务器并更新头像
 */

document.querySelector(".upload").addEventListener("change", e =&gt; {
	const fd = new FormData();
	fd.append("img", e.target.files[0]);
	fd.append("creator", creator);

	axios({
		url: "http://hmajax.itheima.net/api/avatar",
		method: "put",
		data: fd,
	}).then(result =&gt; {
		document.querySelector(".prew").src = result.data.data.avatar;
	});
});
</code></pre>
<ul>
<li>修改数据，并提示</li>
</ul>
<pre><code class="language-js">/**
 * 目标3：提交表单
 *  3.1 收集表单信息
 *  3.2 交到服务器保存
 */

/**
 * 目标4：结果提示
 *  4.1 创建toast对象
 *  4.2 调用show方法-&gt;显示提示框
 */

document.querySelector(".submit").addEventListener("click", () =&gt; {
	// 3.1 收集表单信息
	const form = document.querySelector(".user-form");
	const formData = serialize(form, { hash: true, empty: true });
	formData.creator = creator;
	formData.gender = +formData.gender;

	// 3.2 提交到服务器保存
	axios({
		url: "http://hmajax.itheima.net/api/settings",
		method: "put",
		data: formData,
	}).then(result =&gt; {
		// 4.1 创建toast对象
		const toastDom = document.querySelector(".my-toast");
		const toast = new bootstrap.Toast(toastDom);

		// 4.2 调用show方法-&gt;显示提示框
		toast.show();
	});
});
</code></pre>
<h3 id="210-请求方式别名">2.10 请求方式别名</h3>
<ul>
<li>为了方便起见，已经为所有支持的请求方法提供了别名</li>
</ul>
<pre><code class="language-js">axios.request(config)
axios.get(url[, config])
axios.delete(url[, config])
axios.head(url[, config])
axios.options(url[, config])
axios.post(url[, data[, config]])
axios.put(url[, data[, config]])
</code></pre>
<ul>
<li>注：在使用别名方法时， <code>url</code>、<code>method</code>、<code>data</code> 这些属性都不必在配置中指定</li>
</ul>
<h3 id="211-axios-api">2.11 Axios API</h3>
<h4 id="2111-axios-实例">2.11.1 axios 实例</h4>
<blockquote>
<p>可以使用自定义配置新建一个实例</p>
</blockquote>
<pre><code class="language-js">const instance = axios.create({
	baseURL: "https://some-domain.com/api/",
	timeout: 1000,
	headers: { "X-Custom-Header": "foobar" },
});
</code></pre>
<ul>
<li>
<p>一些实例方法</p>
<ul>
<li>
<p><code>axios#request(config)</code></p>
</li>
<li>
<p><code>axios#get(url[, config])</code></p>
</li>
<li>
<p><code>axios#delete(url[, config])</code></p>
</li>
<li>
<p><code>axios#head(url[, config])</code></p>
</li>
<li>
<p><code>axios#options(url[, config])</code></p>
</li>
<li>
<p><code>axios#post(url[, data[, config]])</code></p>
</li>
<li>
<p><code>axios#put(url[, data[, config]])</code></p>
</li>
<li>
<p><code>axios#patch(url[, data[, config]])</code></p>
</li>
<li>
<p><code>axios#getUri([config])</code></p>
</li>
</ul>
</li>
</ul>
<h4 id="2112-请求配置">2.11.2 请求配置</h4>
<ul>
<li>
<p>这些是创建请求时可以用的配置选项，只有<code>url</code>是必需的</p>
</li>
<li>
<p>若没指定<code>method</code>，请求默认使用<code>GET</code></p>
</li>
</ul>
<pre><code class="language-js">{
  // url：用于请求的服务器URL
  url: '/user',

  // method：创建请求时使用的方法，默认为get
  method: 'get',

  // baseURL：自动加在url前面，通过它可以传递相对地址
  baseURL: 'https://some-domain.com/api/',

  // transformRequest：允许在向服务器发送前，修改请求数据
  // 它只能用于'PUT', 'POST'和'PATCH'这几个请求方法
  // 数组中最后一个函数必须返回一个字符串， 一个Buffer实例，ArrayBuffer，FormData或Stream
  // 可以修改请求头
  transformRequest: [function (data, headers) {
    // 对发送的 data 进行任意转换处理

    return data;
  }],

  // transformResponse：在传递给then/catch前，允许修改响应数据
  transformResponse: [function (data) {
    // 对接收的 data 进行任意转换处理

    return data;
  }],

  // 自定义请求头
  headers: {'X-Requested-With': 'XMLHttpRequest'},

  // params：与请求一起发送的URL参数
  // 必须是一个简单对象或URLSearchParams对象
  params: {
    ID: 12345
  },

  // data：作为请求体被发送的数据
  // 仅适用'PUT', 'POST', 'DELETE'和'PATCH'请求方法
  // 在没有设置`transformRequest`时，则必须是以下类型之一:
  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams
  // - 浏览器专属: FormData, File, Blob
  // - Node 专属: Stream, Buffer
  data: {
    firstName: 'Fred'
  },

  // 发送请求体数据的可选语法
  // 请求方式 post
  // 只有 value 会被发送，key 则不会
  data: 'Country=Brasil&amp;City=Belo Horizonte',

  // timeout：指定请求超时的毫秒数
  // 如果请求时间超过`timeout`的值，则请求会被中断，默认为0，表示永不超时
  timeout: 1000,

  // withCredentials：表示跨域请求时是否需要使用凭证，默认false
  withCredentials: false,

  // adapter：允许自定义处理请求，这使测试更加容易
  // 返回一个`promise`并提供一个有效的响应（参见 lib/adapters/README.md）
  adapter: function (config) {
    /* ... */
  },

  // auth：HTTP Basic Auth
  auth: {
    username: 'janedoe',
    password: 's00pers3cret'
  },

  // responseType：浏览器将要响应的数据类型
  // 选项包括: 'arraybuffer', 'document', 'json', 'text', 'stream'
  // 浏览器专属：'blob'
  responseType: 'json', // 默认值

  // responseEncoding：用于解码响应的编码 (Node.js专属)
  // 注意：忽略`responseType`的值为 'stream'，或者是客户端请求
  responseEncoding: 'utf8', // 默认值

  // `xsrfCookieName`是`xsrf token`的值，被用作`cookie`的名称
  xsrfCookieName: 'XSRF-TOKEN', // 默认值

  // `xsrfHeaderName`是带有`xsrf token`值的http请求头名称
  xsrfHeaderName: 'X-XSRF-TOKEN', // 默认值

  // `onUploadProgress`允许为上传处理进度事件（浏览器专属）
  onUploadProgress: function (progressEvent) {
    // 处理原生进度事件
  },

  // `onDownloadProgress`允许为下载处理进度事件（浏览器专属）
  onDownloadProgress: function (progressEvent) {
    // 处理原生进度事件
  },

  // `maxContentLength`定义了node.js中允许的HTTP响应内容的最大字节数
  maxContentLength: 2000,

  // `maxBodyLength`（仅Node）定义允许的http请求内容的最大字节数
  maxBodyLength: 2000,

  // `validateStatus`定义了对于给定的HTTP状态码是 resolve 还是 reject promise
  // 返回`true`(或者设置为`null`或`undefined`)，则promise将会resolved，否则是rejected
  validateStatus: function (status) {
    return status &gt;= 200 &amp;&amp; status &lt; 300; // 默认值
  },

  // maxRedirects：定义了在node.js中要遵循的最大重定向数，设置为0，则不会进行重定向
  maxRedirects: 5, // 默认值

  // `socketPath` 定义了在node.js中使用的UNIX套接字
  // e.g. '/var/run/docker.sock' 发送请求到 docker 守护进程
  // 只能指定 `socketPath` 或 `proxy`
  // 若都指定，则使用 `socketPath`
  socketPath: null, // default

  // `httpAgent`和`httpsAgent`分别定义了在 node.js 中执行 http 和 https 请求时使用的自定义代理
  // 这样就可以添加默认情况下未启用的选项，如`keepAlive`
  httpAgent: new http.Agent({ keepAlive: true }),
  httpsAgent: new https.Agent({ keepAlive: true }),

  // `proxy` 定义了代理服务器的主机名，端口和协议
  // 可以使用常规的`http_proxy`和`https_proxy` 环境变量
  // 使用`false`可以禁用代理功能，同时环境变量也会被忽略
  // `auth`表示应使用HTTP Basic auth连接到代理，并且提供凭据
  // 这将设置一个`Proxy-Authorization`请求头，它会覆盖`headers`中已存在的自定义`Proxy-Authorization`请求头
  // 如果代理服务器使用 HTTPS，则必须设置 protocol 为`https`
  proxy: {
    protocol: 'https',
    host: '127.0.0.1',
    port: 9000,
    auth: {
      username: 'mikeymike',
      password: 'rapunz3l'
    }
  },

  // 详见https://axios-http.com/zh/docs/cancellation
  cancelToken: new CancelToken(function (cancel) {
  }),

  // `decompress`：表示是否要自动解压缩响应正文
  // 将其设置为"false"，它不会解压缩响应，并会保留原始的"Content-Encoding"标头
  // 如果设置为“true”，将从所有解压缩响应的响应对象中移除"Content-Encoding"标头
  // - 仅适用于Node (XHR 无法关闭解压缩功能)
  decompress: true // 默认值
}
</code></pre>
<h4 id="2113-响应结构">2.11.3 响应结构</h4>
<ul>
<li>一个请求的响应包含以下信息</li>
</ul>
<pre><code class="language-js">{
  // data：由服务器提供的响应
  data: {},

  // status：来自服务器响应的 HTTP 状态码
  status: 200,

  // statusText：来自服务器响应的 HTTP 状态信息
  statusText: 'OK',

  // headers：服务器响应头
  // 所有 header 名称都是小写，且可以使用方括号语法访问
  // 例如: `response.headers['content-type']`
  headers: {},

  // config：是`axios`请求的配置信息
  config: {},

  // request：是生成此响应的请求
  // 在node.js中它是最后一个ClientRequest实例 (in redirects)，
  // 在浏览器中则是 XMLHttpRequest 实例
  request: {}
}
</code></pre>
<h4 id="2114-默认配置">2.11.4 默认配置</h4>
<h5 id="️-全局-axios-默认值">🛠️ 全局 axios 默认值</h5>
<pre><code class="language-js">axios.defaults.baseURL = "https://api.example.com";
axios.defaults.headers.common["Authorization"] = AUTH_TOKEN;
axios.defaults.headers.post["Content-Type"] = "application/x-www-form-urlencoded";
</code></pre>
<h5 id="️-自定义实例默认值">🛠️ 自定义实例默认值</h5>
<pre><code class="language-js">// 创建实例时配置默认值
const instance = axios.create({
	baseURL: "https://api.example.com",
});

// 创建实例后修改默认值
instance.defaults.headers.common["Authorization"] = AUTH_TOKEN;
</code></pre>
<h5 id="️-配置的优先级">🛠️ 配置的优先级</h5>
<ul>
<li>
<p>配置将会按优先级进行合并</p>
</li>
<li>
<p>它的顺序是：在<a href="https://github.com/axios/axios/blob/master/lib/defaults.js#L28" target="_blank" rel="noopener nofollow">lib/defaults.js</a>中找到的库默认值，然后是实例的 <code>defaults</code> 属性，最后是请求的<code>config</code>参数，后面的优先级要高于前面的</p>
</li>
</ul>
<pre><code class="language-js">// 使用库提供的默认配置创建实例
// 此时超时配置的默认值是 `0`
const instance = axios.create();

// 重写库的超时默认值
// 现在，所有使用此实例的请求都将等待2.5秒，然后才会超时
instance.defaults.timeout = 2500;

// 重写此请求的超时时间，因为该请求需要很长时间
instance.get("/longRequest", {
	timeout: 5000,
});
</code></pre>
<h4 id="2115-拦截器">2.11.5 拦截器</h4>
<ul>
<li>在请求或响应被 then 或 catch 处理前拦截它们</li>
</ul>
<pre><code class="language-js">// 添加请求拦截器
axios.interceptors.request.use(
	function (config) {
		// 在发送请求之前做些什么
		return config;
	},
	function (error) {
		// 对请求错误做些什么
		return Promise.reject(error);
	}
);

// 添加响应拦截器
axios.interceptors.response.use(
	function (response) {
		// 2xx 范围内的状态码都会触发该函数
		// 对响应数据做点什么
		return response;
	},
	function (error) {
		// 超出 2xx 范围的状态码都会触发该函数
		// 对响应错误做点什么
		return Promise.reject(error);
	}
);
</code></pre>
<ul>
<li>移除拦截器</li>
</ul>
<pre><code class="language-js">const myInterceptor = axios.interceptors.request.use(function () {
	/*...*/
});
axios.interceptors.request.eject(myInterceptor);
</code></pre>
<ul>
<li>可以给自定义的 axios 实例添加拦截器</li>
</ul>
<pre><code class="language-js">const instance = axios.create();
instance.interceptors.request.use(function () {
	/*...*/
});
</code></pre>
<h4 id="2116-错误处理">2.11.6 错误处理</h4>
<pre><code class="language-js">axios.get("/user/12345").catch(function (error) {
	if (error.response) {
		// 请求成功发出且服务器也响应了状态码，但状态代码超出了 2xx 的范围
		console.log(error.response.data);
		console.log(error.response.status);
		console.log(error.response.headers);
	} else if (error.request) {
		// 请求已经成功发起，但没有收到响应
		// `error.request` 在浏览器中是 XMLHttpRequest 的实例，
		// 而在node.js中是 http.ClientRequest 的实例
		console.log(error.request);
	} else {
		// 发送请求时出了点问题
		console.log("Error", error.message);
	}
	console.log(error.config);
});
</code></pre>
<ul>
<li>使用 <code>validateStatus</code> 配置选项，可以自定义抛出错误的 HTTP code</li>
</ul>
<pre><code class="language-js">axios.get("/user/12345", {
	validateStatus: function (status) {
		return status &lt; 500; // 处理状态码小于500的情况
	},
});
</code></pre>
<ul>
<li>使用 <code>toJSON</code> 可以获取更多关于 HTTP 错误的信息</li>
</ul>
<pre><code class="language-js">axios.get("/user/12345").catch(function (error) {
	console.log(error.toJSON());
});
</code></pre>
<h4 id="2117-取消请求">2.11.7 取消请求</h4>
<h5 id="️-abortcontroller">🛠️ AbortController</h5>
<pre><code class="language-js">const controller = new AbortController();

axios
	.get("/foo/bar", {
		signal: controller.signal,
	})
	.then(function (response) {
		//...
	});
// 取消请求
controller.abort();
</code></pre>
<h4 id="2118-请求体编码">2.11.8 请求体编码</h4>
<ul>
<li>默认情况下，axios 将 JavaScript 对象序列化为<code>JSON</code>。 要以<code>application/x-www-form-urlencoded</code>格式发送数据</li>
</ul>
<h5 id="️-浏览器">🛠️ 浏览器</h5>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams" target="_blank" rel="noopener nofollow"><code>URLSearchParams</code></a></li>
</ul>
<pre><code class="language-js">const params = new URLSearchParams();
params.append("param1", "value1");
params.append("param2", "value2");
axios.post("/foo", params);
</code></pre>
<ul>
<li>
<p>注：不是所有的浏览器都支持 <code>URLSearchParams</code> ，但是可以使用<a href="https://github.com/WebReflection/url-search-params" target="_blank" rel="noopener nofollow">polyfill</a> (确保 polyfill 全局环境)</p>
</li>
<li>
<p>可以使用<a href="https://github.com/ljharb/qs" target="_blank" rel="noopener nofollow"><code>qs</code></a> 库编码数据</p>
</li>
</ul>
<pre><code class="language-js">import qs from "qs";
const data = { bar: 123 };
const options = {
	method: "POST",
	headers: { "content-type": "application/x-www-form-urlencoded" },
	data: qs.stringify(data),
	url,
};
axios(options);
</code></pre>
<h5 id="️-nodejs">🛠️ Node.js</h5>
<ul>
<li>在 node.js 中， 可以使用<a href="https://nodejs.org/api/querystring.html" target="_blank" rel="noopener nofollow"><code>querystring</code></a> 模块</li>
</ul>
<pre><code class="language-js">const querystring = require("querystring");
axios.post("http://something.com/", querystring.stringify({ foo: "bar" }));
</code></pre>
<ul>
<li>或者从<a href="https://nodejs.org/api/url.html" target="_blank" rel="noopener nofollow">'url module'</a>中使用<a href="https://nodejs.org/api/url.html#url_class_urlsearchparams" target="_blank" rel="noopener nofollow">'URLSearchParams'</a></li>
</ul>
<pre><code class="language-js">const url = require("url");
const params = new url.URLSearchParams({ foo: "bar" });
axios.post("http://something.com/", params.toString());
</code></pre>
<ul>
<li>
<p>也可以使用 qs 库</p>
</li>
<li>
<p><strong>Form data</strong></p>
</li>
</ul>
<pre><code class="language-js">const FormData = require("form-data");

const form = new FormData();
form.append("my_field", "my value");
form.append("my_buffer", new Buffer(10));
form.append("my_file", fs.createReadStream("/foo/bar.jpg"));

axios.post("https://example.com", form, { headers: form.getHeaders() });
</code></pre>
<ul>
<li>或者, 使用一个拦截器</li>
</ul>
<pre><code class="language-js">axios.interceptors.request.use(config =&gt; {
	if (config.data instanceof FormData) {
		Object.assign(config.headers, config.data.getHeaders());
	}
	return config;
});
</code></pre>
<h4 id="2119-axios-二次封装">2.11.9 axios 二次封装</h4>
<ul>
<li>
<p>为什么</p>
<ul>
<li>
<p>方便管理和维护</p>
</li>
<li>
<p>请求的 url 地址统一管理</p>
</li>
<li>
<p>某些接口需要传递 headers</p>
</li>
</ul>
</li>
<li>
<p>request.js</p>
</li>
</ul>
<pre><code class="language-js">// 1. 引入axios
import axios from 'axios';
// 2. 创建axios对象
const service = axios.create();
// 3. 请求拦截器（前端给后端发送数据，没有到后端）
// 做的事：headers给后端传递token
service.interceptors.request.use(
    config =&gt; {
    	return config;
	}, error =&gt; {
        Promise.reject(error);
	}
});
// 4.响应拦截器（后端给前端返回数据，前端到后端了）
service.interceptors.response.use(
    (response) =&gt; {
        // 这里是对响应的简化 data = response.data
        const { data, meta } = response.data
        if (meta.status === 200 || meta.status === 201){
            //回传的数据
            return data
        } else {
            ElMessage.error(meta.msg)
            return Promise.reject(new Error(meta.msg))
        }
    },
    error =&gt; {
        error.response &amp;&amp; ElMessage.error(error.response.data)
        return Promise.reject(new Error(error.response.data))
    }
)
export default service
</code></pre>
<h4 id="21110-api-解耦">2.11.10 API 解耦</h4>
<ul>
<li>封装</li>
</ul>
<pre><code class="language-js">import request from "@/utils/request";
export function getsliders() {
	return request({
		url: "/api/slider/getsliders",
	});
}
</code></pre>
<ul>
<li>使用</li>
</ul>
<pre><code class="language-html">&lt;script type="text/javascript"&gt;
	import {getSliders} from '@/utils/api/course'
	export default{
	    data (){
	        return {
	            list:[]
	        }
	    },
	    created() {
	        getsliders().then (res=&gt;{
	            console.log(res)
	        })
	    }
&lt;/script&gt;
</code></pre>
<h2 id="3-ajax-原理">3. Ajax 原理</h2>
<h3 id="31-xmlhttprequest">3.1 XMLHttpRequest</h3>
<ul>
<li>
<p>Ajax 是浏览器与服务器通信的技术，采用 XMLHttpRequest 对象相关代码</p>
</li>
<li>
<p>axios 是对 XHR 相关代码进行了封装，让我们只关心传递的接口参数</p>
</li>
<li>
<p>学习 XHR 也是了解 axios 内部与服务器交互过程的真正原理</p>
</li>
<li>
<p>语法：</p>
</li>
</ul>
<pre><code class="language-js">const xhr = new XMLHttpRequest();
xhr.open("请求方法", "请求url网址");
xhr.addEventListener("loadend", () =&gt; {
	// 响应结果
	console.log(xhr.response);
});
xhr.send();
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3096011/202412/3096011-20241230165500128-947243202.png" alt="" loading="lazy"></p>
<ul>
<li>示例 1：获取所有省份列表并展示到页面上</li>
</ul>
<pre><code class="language-html">&lt;p class="my-p"&gt;&lt;/p&gt;
&lt;script&gt;
	/**
	 * 目标：使用XMLHttpRequest对象与服务器通信
	 *  1. 创建 XMLHttpRequest 对象
	 *  2. 配置请求方法和请求 url 地址
	 *  3. 监听 loadend 事件，接收响应结果
	 *  4. 发起请求
	 */
	const xhr = new XMLHttpRequest();

	xhr.open("get", "http://hmajax.itheima.net/api/province");
	// 携带查询参数
	// xhr.open('get', 'http://hmajax.itheima.net/api/city?pname=辽宁省')

	xhr.addEventListener("loadend", () =&gt; {
		// console.log(xhr.response)
		const data = JSON.parse(xhr.response);
		document.querySelector(".my-p").innerHTML = data.list.join("&lt;br&gt;");
	});

	xhr.send();
&lt;/script&gt;
</code></pre>
<ul>
<li>示例 2：地区查询</li>
</ul>
<pre><code class="language-html">&lt;div class="container"&gt;
	&lt;form id="editForm" class="row"&gt;
		&lt;!-- 输入省份名字 --&gt;
		&lt;div class="mb-3 col"&gt;
			&lt;label class="form-label"&gt;省份名字&lt;/label&gt;
			&lt;input type="text" value="北京" name="province" class="form-control province" placeholder="请输入省份名称" /&gt;
		&lt;/div&gt;
		&lt;!-- 输入城市名字 --&gt;
		&lt;div class="mb-3 col"&gt;
			&lt;label class="form-label"&gt;城市名字&lt;/label&gt;
			&lt;input type="text" value="北京市" name="city" class="form-control city" placeholder="请输入城市名称" /&gt;
		&lt;/div&gt;
	&lt;/form&gt;
	&lt;button type="button" class="btn btn-primary sel-btn"&gt;查询&lt;/button&gt;
	&lt;br /&gt;
	&lt;br /&gt;
	&lt;p&gt;地区列表:&lt;/p&gt;
	&lt;ul class="list-group"&gt;
		&lt;!-- 示例地区 --&gt;
		&lt;!-- &lt;li class="list-group-item"&gt;东城区&lt;/li&gt; --&gt;
	&lt;/ul&gt;
&lt;/div&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
	/**
	 * 目标: 根据省份和城市名字, 查询对应的地区列表
	 */
	document.querySelector(".sel-btn").addEventListener("click", () =&gt; {
		const pname = document.querySelector(".province").value;
		const cname = document.querySelector(".city").value;

		paramsObj = new URLSearchParams({
			pname,
			cname,
		});

		const xhr = new XMLHttpRequest();
		xhr.open("get", `http://hmajax.itheima.net/api/area?${paramsObj}`);
		xhr.addEventListener("loadend", () =&gt; {
			const data = JSON.parse(xhr.response);
			document.querySelector(".list-group").innerHTML = data.list
				.map(areaName =&gt; {
					return `&lt;li class="list-group-item"&gt;${areaName}&lt;/li&gt;`;
				})
				.join("");
		});
		xhr.send();
	});
&lt;/script&gt;
</code></pre>
<ul>
<li>示例 3：数据提交</li>
</ul>
<pre><code class="language-html">&lt;button class="reg-btn"&gt;注册用户&lt;/button&gt;
&lt;script&gt;
	/**
	 * 目标：使用xhr进行数据提交-完成注册功能
	 */
	document.querySelector(".reg-btn").addEventListener("click", () =&gt; {
		const xhr = new XMLHttpRequest();

		xhr.open("post", "http://hmajax.itheima.net/api/register");

		xhr.addEventListener("loadend", () =&gt; {
			console.log(xhr.response);
		});
		// 设置请求头
		xhr.setRequestHeader("content-type", "application/json");

		// 准备提交的数据
		const userObj = {
			username: "itheima667",
			password: "123456",
		};

		const userStr = JSON.stringify(userObj);
		xhr.send(userStr);
	});
&lt;/script&gt;
</code></pre>
<h3 id="32-promise">3.2 Promise</h3>
<h4 id="321-对于异步的理解">3.2.1 对于异步的理解</h4>
<ul>
<li>示例</li>
</ul>
<pre><code class="language-js">console.log("开始"); // 立即执行，输出 "开始"

setTimeout(() =&gt; {
	// 设置一个异步任务，延迟 1000 毫秒后执行
	console.log("异步任务完成"); // 这个代码在 1 秒后执行
}, 1000);

console.log("结束"); // 立即执行，输出 "结束"
</code></pre>
<ul>
<li>
<p>输出顺序</p>
<ul>
<li>
<p><strong>开始</strong>：第一个<code>console.log</code>立即执行，输出<code>"开始"</code></p>
</li>
<li>
<p><strong>结束</strong>：第二个<code>console.log</code>立即执行，输出<code>"结束"</code></p>
</li>
<li>
<p><strong>异步任务完成</strong>：在设置的 1 秒之后，<code>setTimeout</code>中的回调函数才被调用，输出<code>"异步任务完成"</code></p>
</li>
</ul>
</li>
<li>
<p>异步体现</p>
<ul>
<li>
<p><strong>非阻塞</strong>：在<code>setTimeout</code>调用后，代码并没有等待 1 秒，而是继续执行后面的<code>console.log('结束')</code>。这说明<code>setTimeout</code>是非阻塞的</p>
</li>
<li>
<p><strong>执行顺序</strong>：即使<code>setTimeout</code>设置了一个 1 秒的延迟，它的回调函数并不会立即执行，而是被放入事件队列中，等待主线程空闲时再执行。这导致<code>"结束"</code>会在<code>"异步任务完成"</code>之前输出</p>
</li>
</ul>
</li>
<li>
<p>总结</p>
<ul>
<li>异步允许代码在等待某个操作（如定时器）时继续执行其他代码，而不会阻塞整个程序的执行</li>
</ul>
</li>
</ul>
<h4 id="322-概述">3.2.2 概述</h4>
<ul>
<li>
<p>是什么</p>
<ul>
<li>表示（管理）一个异步操作最终状态和结果值的对象</li>
</ul>
</li>
<li>
<p>Promise 的好处是什么？</p>
<ul>
<li>
<p>逻辑更清晰（成功或失败会关联后续的处理函数）</p>
</li>
<li>
<p>了解 axios 函数内部运作的机制</p>
</li>
<li>
<p>解决回调函数地狱问题</p>
</li>
</ul>
</li>
<li>
<p>Promise 管理异步任务的语法</p>
</li>
</ul>
<pre><code class="language-js">// 1. 创建 Promise 对象
const p = new Promise((resolve, reject) =&gt; {
	// 2. 执行异步任务-并传递结果
	// 成功调用: resolve(值) 触发 then() 执行
	// 失败调用: reject(值) 触发 catch() 执行
});
// 3. 接收结果
p.then(result =&gt; {
	// 成功
}).catch(error =&gt; {
	// 失败
});
</code></pre>
<ul>
<li>示例</li>
</ul>
<pre><code class="language-js">/**
 * 目标：使用Promise管理异步任务
 */
const p = new Promise((resolve, reject) =&gt; {
	setTimeout(() =&gt; {
		// resolve('模拟AJAX请求-成功结果')
		reject(new Error("模拟AJAX请求-失败结果"));
	}, 2000);
});

p.then(result =&gt; {
	console.log(result);
}).catch(error =&gt; {
	console.log(error);
});
</code></pre>
<h4 id="323-三种状态">3.2.3 三种状态</h4>
<ul>
<li>
<p>待定（pending）：初始状态，既没有被兑现，也没有被拒绝</p>
</li>
<li>
<p>已兑现（fulfilled）：操作成功完成</p>
</li>
<li>
<p>已拒绝（rejected）：操作失败</p>
</li>
<li>
<p>改变 Promise 对象状态后，内部触发对应回调函数传参并执行</p>
</li>
</ul>
<img src="https://img2024.cnblogs.com/blog/3096011/202412/3096011-20241230165522253-606564125.png" style="zoom: 50%">
<ul>
<li>注：每个 Promise 对象一旦被兑现/拒绝，那么状态无法再被改变</li>
</ul>
<h4 id="324-案例-获取省份列表">3.2.4 案例-获取省份列表</h4>
<pre><code class="language-html">&lt;p class="my-p"&gt;&lt;/p&gt;
&lt;script&gt;
	const p = new Promise((resolve, reject) =&gt; {
		const xhr = new XMLHttpRequest();

		xhr.open("get", "http://hmajax.itheima.net/api/province");

		xhr.addEventListener("loadend", () =&gt; {
			// 判断请求成功与否
			if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) {
				resolve(JSON.parse(xhr.response));
			} else {
				reject(new Error(xhr.response));
			}
		});

		xhr.send();
	});

	p.then(reslut =&gt; {
		document.querySelector(".my-p").innerHTML = reslut.list.join("&lt;br&gt;");
	}).catch(error =&gt; {
		// 打印详细信息
		// console.dir(error)
		document.querySelector(".my-p").innerHTML = error.message;
	});
&lt;/script&gt;
</code></pre>
<h4 id="325-封装简易-axios">3.2.5 封装简易 axios</h4>
<ul>
<li>
<p>步骤</p>
<ul>
<li>
<p>定义 myAxios 函数，接收配置对象，返回 Promise 对象</p>
</li>
<li>
<p>发起 XHR 请求，默认请求方法为 GET</p>
</li>
<li>
<p>调用成功/失败的处理程序</p>
</li>
<li>
<p>使用 myAxios 函数，获取省份列表展示</p>
</li>
</ul>
</li>
<li>
<p>核心语法</p>
</li>
</ul>
<pre><code class="language-js">function myAxios(config) {
	return new Promise((resolve, reject) =&gt; {
		// XHR 请求
		// 调用成功/失败的处理程序
	});
}

myAxios({
	url: "目标资源地址",
})
	.then(result =&gt; {})
	.catch(error =&gt; {});
</code></pre>
<ul>
<li>示例：获取省份列表</li>
</ul>
<pre><code class="language-html">&lt;p class="my-p"&gt;&lt;/p&gt;
&lt;script&gt;
	function myAxios(config) {
		return new Promise((resolve, reject) =&gt; {
			const xhr = new XMLHttpRequest();

			xhr.open(config.method || "get", config.url);

			xhr.addEventListener("loadend", () =&gt; {
				if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) {
					resolve(JSON.parse(xhr.response));
				} else {
					reject(new Error(xhr.response));
				}
			});

			xhr.send();
		});
	}

	myAxios({
		url: "http://hmajax.itheima.net/api/province",
	})
		.then(result =&gt; {
			document.querySelector(".my-p").innerHTML = result.list.join("&lt;br&gt;");
		})
		.catch(error =&gt; {
			document.querySelector(".my-p").innerHTML = error.message;
		});
&lt;/script&gt;
</code></pre>
<ul>
<li>示例：获取地区列表</li>
</ul>
<pre><code class="language-html">&lt;p class="my-p"&gt;&lt;/p&gt;
&lt;script&gt;
	function myAxios(config) {
		return new Promise((resolve, reject) =&gt; {
			const xhr = new XMLHttpRequest();
			// 查询参数
			if (config.params) {
				const paramsObj = new URLSearchParams(config.params);
				const paramsStr = paramsObj.toString();
				config.url += `?${paramsStr}`;
			}

			xhr.open(config.method || "get", config.url);

			xhr.addEventListener("loadend", () =&gt; {
				if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) {
					resolve(JSON.parse(xhr.response));
				} else {
					reject(new Error(xhr.response));
				}
			});

			xhr.send();
		});
	}

	myAxios({
		url: "http://hmajax.itheima.net/api/area",
		params: {
			pname: "辽宁省",
			cname: "大连市",
		},
	})
		.then(result =&gt; {
			document.querySelector(".my-p").innerHTML = result.list.join("&lt;br&gt;");
		})
		.catch(error =&gt; {
			document.querySelector(".my-p").innerHTML = error.message;
		});
&lt;/script&gt;
</code></pre>
<ul>
<li>示例：注册用户</li>
</ul>
<pre><code class="language-html">&lt;p class="my-p"&gt;&lt;/p&gt;
&lt;script&gt;
	function myAxios(config) {
		return new Promise((resolve, reject) =&gt; {
			const xhr = new XMLHttpRequest();
			// 查询参数
			if (config.params) {
				const paramsObj = new URLSearchParams(config.params);
				const paramsStr = paramsObj.toString();
				config.url += `?${paramsStr}`;
			}

			xhr.open(config.method || "get", config.url);

			xhr.addEventListener("loadend", () =&gt; {
				if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) {
					resolve(JSON.parse(xhr.response));
				} else {
					reject(new Error(xhr.response));
				}
			});

			if (config.data) {
				xhr.setRequestHeader("content-type", "application/json");
				const jsonStr = JSON.stringify(config.data);
				xhr.send(jsonStr);
			} else {
				xhr.send();
			}
		});
	}

	myAxios({
		url: "http://hmajax.itheima.net/api/register",
		method: "post",
		data: {
			username: "itheima776",
			password: "66688879",
		},
	})
		.then(result =&gt; {
			document.querySelector(".my-p").innerHTML = result.message;
		})
		.catch(error =&gt; {
			document.querySelector(".my-p").innerHTML = error.message;
		});
&lt;/script&gt;
</code></pre>
<h4 id="326-回调函数地狱">3.2.6 回调函数地狱</h4>
<ul>
<li>
<p>概念：在回调函数中嵌套回调函数，一直嵌套下去就形成了回调函数地狱</p>
</li>
<li>
<p>缺点：可读性差，异常无法捕获，耦合性严重，牵一发动全身</p>
</li>
</ul>
<pre><code class="language-html">&lt;form&gt;
	&lt;span&gt;省份：&lt;/span&gt;
	&lt;select&gt;
		&lt;option class="province"&gt;&lt;/option&gt;
	&lt;/select&gt;
	&lt;span&gt;城市：&lt;/span&gt;
	&lt;select&gt;
		&lt;option class="city"&gt;&lt;/option&gt;
	&lt;/select&gt;
	&lt;span&gt;地区：&lt;/span&gt;
	&lt;select&gt;
		&lt;option class="area"&gt;&lt;/option&gt;
	&lt;/select&gt;
&lt;/form&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
	/**
	 * 目标：演示回调函数地狱
	 * 需求：获取默认第一个省，第一个市，第一个地区并展示在下拉菜单中
	 */
	axios({ url: "http://hmajax.itheima.net/api/province" })
		.then(result =&gt; {
			const pname = result.data.list[0];
			document.querySelector(".province").innerHTML = pname;
			axios({ url: "http://hmajax.itheima.net/api/city", params: { pname } }).then(result =&gt; {
				const cname = result.data.list[0];
				document.querySelector(".city").innerHTML = cname;
				axios({ url: "http://hmajax.itheima.net/api/area", params: { pname, cname } }).then(result =&gt; {
					const aname = result.data.list[0];
					document.querySelector(".area").innerHTML = aname;
				});
			});
		})
		.catch(error =&gt; {
			console.log(error);
		});
&lt;/script&gt;
</code></pre>
<h4 id="327-promise-链式调用">3.2.7 Promise 链式调用</h4>
<ul>
<li>
<p>概念：依靠 then() 方法会返回一个新生成的 Promise 对象特性，继续串联下一环任务，直到结束</p>
</li>
<li>
<p>细节：then() 回调函数中的返回值，会影响新生成的 Promise 对象最终状态和结果</p>
</li>
<li>
<p>好处：通过链式调用，解决回调函数嵌套问题</p>
</li>
</ul>
<pre><code class="language-js">const p = new Promise((resolve, reject) =&gt; {
	setTimeout(() =&gt; {
		resolve("北京市");
	}, 1000);
});

const p2 = p.then(result =&gt; {
	console.log(result);
	return new Promise((resolve, reject) =&gt; {
		setTimeout(() =&gt; {
			resolve(`${result} --- 北京`);
		}, 1000);
	});
});

p2.then(result =&gt; {
	console.log(result);
});
</code></pre>
<ul>
<li>解决回调函数地狱</li>
</ul>
<pre><code class="language-html">&lt;form&gt;
	&lt;span&gt;省份：&lt;/span&gt;
	&lt;select&gt;
		&lt;option class="province"&gt;&lt;/option&gt;
	&lt;/select&gt;
	&lt;span&gt;城市：&lt;/span&gt;
	&lt;select&gt;
		&lt;option class="city"&gt;&lt;/option&gt;
	&lt;/select&gt;
	&lt;span&gt;地区：&lt;/span&gt;
	&lt;select&gt;
		&lt;option class="area"&gt;&lt;/option&gt;
	&lt;/select&gt;
&lt;/form&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
	let pname = "";
	axios({ url: "http://hmajax.itheima.net/api/province" })
		.then(result =&gt; {
			pname = result.data.list[0];
			document.querySelector(".province").innerHTML = pname;
			return axios({ url: "http://hmajax.itheima.net/api/city", params: { pname } });
		})
		.then(result =&gt; {
			const cname = result.data.list[0];
			document.querySelector(".city").innerHTML = cname;
			return axios({ url: "http://hmajax.itheima.net/api/area", params: { pname, cname } });
		})
		.then(result =&gt; {
			const aname = result.data.list[0];
			document.querySelector(".area").innerHTML = aname;
		});
&lt;/script&gt;
</code></pre>
<h4 id="328-async-函数和-await">3.2.8 async 函数和 await</h4>
<blockquote>
<p>在 async 函数内，使用 await 关键字取代 then 函数，等待获取 Promise 对象成功状态的结果值</p>
</blockquote>
<pre><code class="language-html">&lt;form&gt;
	&lt;span&gt;省份：&lt;/span&gt;
	&lt;select&gt;
		&lt;option class="province"&gt;&lt;/option&gt;
	&lt;/select&gt;
	&lt;span&gt;城市：&lt;/span&gt;
	&lt;select&gt;
		&lt;option class="city"&gt;&lt;/option&gt;
	&lt;/select&gt;
	&lt;span&gt;地区：&lt;/span&gt;
	&lt;select&gt;
		&lt;option class="area"&gt;&lt;/option&gt;
	&lt;/select&gt;
&lt;/form&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
	async function getData() {
		const pObj = await axios({ url: "http://hmajax.itheima.net/api/province" });
		const pname = pObj.data.list[0];
		const cObj = await axios({ url: "http://hmajax.itheima.net/api/city", params: { pname } });
		const cname = cObj.data.list[0];
		const aObj = await axios({ url: "http://hmajax.itheima.net/api/area", params: { pname, cname } });
		const aname = aObj.data.list[0];

		document.querySelector(".province").innerHTML = pname;
		document.querySelector(".city").innerHTML = cname;
		document.querySelector(".area").innerHTML = aname;
	}
	getData();
&lt;/script&gt;
</code></pre>
<ul>
<li>捕获错误</li>
</ul>
<pre><code class="language-js">try {
	// 要执行的代码
	// 如果try里某行代码报错后，try中剩余的代码不会执行了
} catch (error) {
	// error 接收的是
	错误消息;
	// try 里代码，如果有错误，直接进入这里执行
}
</code></pre>
<ul>
<li>示例</li>
</ul>
<pre><code class="language-html">&lt;form&gt;
	&lt;span&gt;省份：&lt;/span&gt;
	&lt;select&gt;
		&lt;option class="province"&gt;&lt;/option&gt;
	&lt;/select&gt;
	&lt;span&gt;城市：&lt;/span&gt;
	&lt;select&gt;
		&lt;option class="city"&gt;&lt;/option&gt;
	&lt;/select&gt;
	&lt;span&gt;地区：&lt;/span&gt;
	&lt;select&gt;
		&lt;option class="area"&gt;&lt;/option&gt;
	&lt;/select&gt;
&lt;/form&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
	async function getData() {
		try {
			const pObj = await axios({ url: "http://hmajax.itheima.net/api/province" });
			const pname = pObj.data.list[0];
			const cObj = await axios({ url: "http://hmajax.itheima.net/api/city", params: { pname } });
			const cname = cObj.data.list[0];
			const aObj = await axios({ url: "http://hmajax.itheima.net/api/area", params: { pname, cname } });
			const aname = aObj.data.list[0];

			document.querySelector(".province").innerHTML = pname;
			document.querySelector(".city").innerHTML = cname;
			document.querySelector(".area").innerHTML = aname;
		} catch (error) {
			console.dir(error);
		}
	}
	getData();
&lt;/script&gt;
</code></pre>
<h3 id="33-事件循环eventloop">3.3 事件循环（EventLoop）</h3>
<ul>
<li>
<p>作用：事件循环负责执行代码，收集和处理事件以及执行队列中的子任务</p>
</li>
<li>
<p>原因：JavaScript 单线程（某一刻只能执行一行代码），为了让耗时代码不阻塞其他代码运行，设计了事件循环模型</p>
</li>
<li>
<p>概念：执行代码和收集异步任务的模型，在调用栈空闲时，反复调用任务队列里回调函数的执行机制</p>
</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/3096011/202412/3096011-20241230165600986-1863158275.png" alt="" loading="lazy"></p>
<ul>
<li>
<p>JavaScript 内代码如何执行？</p>
<ul>
<li>执行同步代码，遇到异步代码交给宿主浏览器环境执行，异步有了结果后，把回调函数放入任务队列排队当调用栈空闲后，反复调用任务队列里的回调函数</li>
</ul>
</li>
<li>
<p>练习</p>
</li>
</ul>
<pre><code class="language-js">/**
 * 目标：阅读并回答执行的顺序结果
 */
console.log(1);
setTimeout(() =&gt; {
	console.log(2);
}, 0);
function myFn() {
	console.log(3);
}
function ajaxFn() {
	const xhr = new XMLHttpRequest();
	xhr.open("GET", "http://hmajax.itheima.net/api/province");
	xhr.addEventListener("loadend", () =&gt; {
		console.log(4);
	});
	xhr.send();
}
for (let i = 0; i &lt; 1; i++) {
	console.log(5);
}
ajaxFn();
document.addEventListener("click", () =&gt; {
	console.log(6);
});
myFn();
</code></pre>
<blockquote>
<p>结果：1 5 3 2 4 点击一次 document 就会执行一次打印 6</p>
</blockquote>
<h3 id="34-宏任务与微任务">3.4 宏任务与微任务</h3>
<ul>
<li>
<p>异步任务分为</p>
<ul>
<li>
<p>宏任务：由浏览器环境执行的异步代码</p>
</li>
<li>
<p>微任务：由 JS 引擎环境执行的异步代码</p>
</li>
</ul>
</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/3096011/202412/3096011-20241230165617084-609154399.png" alt="" loading="lazy"></p>
<ul>
<li>事件循环模型</li>
</ul>
<pre><code class="language-js">console.log(1);
setTimeout(() =&gt; {
	console.log(2);
}, 0);
const p = new Promise((resolve, reject) =&gt; {
	resolve(3);
});
p.then(res =&gt; {
	console.log(res);
});
console.log(4);
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3096011/202412/3096011-20241230170048532-882243106.png" alt="" loading="lazy"></p>
<ul>
<li>
<p>注：宏任务每次在执行同步代码时，产生微任务队列，清空微任务队列任务后，微任务队列空间释放！下一次宏任务执行时，遇到微任务代码，才会再次申请微任务队列空间放入回调函数消息排队</p>
</li>
<li>
<p>总结：一个宏任务包含微任务队列，他们之间是包含关系，不是并列关系</p>
</li>
<li>
<p>经典面试题</p>
</li>
</ul>
<pre><code class="language-js">// 目标：回答代码执行顺序
console.log(1);
setTimeout(() =&gt; {
	console.log(2);
	const p = new Promise(resolve =&gt; resolve(3));
	p.then(result =&gt; console.log(result));
}, 0);
const p = new Promise(resolve =&gt; {
	setTimeout(() =&gt; {
		console.log(4);
	}, 0);
	resolve(5);
});
p.then(result =&gt; console.log(result));
const p2 = new Promise(resolve =&gt; resolve(6));
p2.then(result =&gt; console.log(result));
console.log(7);
</code></pre>
<blockquote>
<p>结果：1 7 5 6 2 3 4</p>
</blockquote>
<h3 id="35-promiseall-静态方法">3.5 Promise.all 静态方法</h3>
<ul>
<li>作用：合并多个 Promise 对象，等待所有同时成功完成（或某一个失败），做后续逻辑</li>
</ul>
<img src="https://img2024.cnblogs.com/blog/3096011/202412/3096011-20241230170111097-253991772.png" style="zoom: 70%">
<ul>
<li>语法：</li>
</ul>
<pre><code class="language-js">const p = Promise.all([Promise对象, Promise对象, ...])	// 需要传入一个可迭代的数据
p.then(result =&gt; {
  // result 结果: [Promise对象成功结果, Promise对象成功结果, ...]
}).catch(error =&gt; {
  // 第一个失败的 Promise 对象，抛出的异常对象
})
</code></pre>
<ul>
<li>示例：同时请求“北京”，“上海”，“广州”，“深圳”的天气并在网页尽可能同时显示</li>
</ul>
<pre><code class="language-html">&lt;ul class="my-ul"&gt;&lt;/ul&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
	/**
	 * 业务：当我需要同一时间显示多个请求的结果时，就要把多请求合并
	 * 例如：默认显示"北京", "上海", "广州", "深圳"的天气在首页查看
	 * code：
	 * 北京-110100
	 * 上海-310100
	 * 广州-440100
	 * 深圳-440300
	 */
	// 1. 请求城市天气，得到Promise对象（此处可以使用数组遍历）
	const bjPromise = axios({ url: "http://hmajax.itheima.net/api/weather", params: { city: "110100" } });
	const shPromise = axios({ url: "http://hmajax.itheima.net/api/weather", params: { city: "310100" } });
	const gzPromise = axios({ url: "http://hmajax.itheima.net/api/weather", params: { city: "440100" } });
	const szPromise = axios({ url: "http://hmajax.itheima.net/api/weather", params: { city: "440300" } });

	// 2. 使用Promise.all，合并多个Promise对象
	const p = Promise.all([bjPromise, shPromise, gzPromise, szPromise]);
	p.then(result =&gt; {
		// 注意：结果数组顺序和合并时顺序是一致
		console.log(result);
		const htmlStr = result
			.map(item =&gt; {
				return `&lt;li&gt;${item.data.data.area} --- ${item.data.data.weather}&lt;/li&gt;`;
			})
			.join("");
		document.querySelector(".my-ul").innerHTML = htmlStr;
	}).catch(error =&gt; {
		console.dir(error);
	});
&lt;/script&gt;
</code></pre>
<ul>
<li>
<p>案例：商品分类</p>
<ul>
<li>
<p>目标：把所有商品分类“同时”渲染到页面上</p>
</li>
<li>
<p>获取所有一级分类数据</p>
</li>
<li>
<p>遍历 id，创建获取二级分类请求</p>
</li>
<li>
<p>合并所有二级分类 Promise 对象</p>
</li>
<li>
<p>等待同时成功后，渲染页面</p>
</li>
</ul>
</li>
</ul>
<pre><code class="language-html">&lt;!-- 大容器 --&gt;
&lt;div class="container"&gt;
	&lt;div class="sub-list"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
	// 1. 获取所有一级分类数据
	axios({
		url: "http://hmajax.itheima.net/api/category/top",
	}).then(result =&gt; {
		// console.log(result)
		const secPromiseList = result.data.data.map(item =&gt; {
			// 2. 遍历id，创建获取二级分类请求
			return axios({
				url: "http://hmajax.itheima.net/api/category/sub",
				params: {
					id: item.id,
				},
			});
		});
		const p = Promise.all(secPromiseList);
		p.then(result =&gt; {
			// console.log(result)
			document.querySelector(".sub-list").innerHTML = result
				.map(item =&gt; {
					const dataObj = item.data.data;
					return `
          &lt;div class="item"&gt;
            &lt;h3&gt;${dataObj.name}&lt;/h3&gt;
            &lt;ul&gt;
              ${dataObj.children
								.map(item =&gt; {
									return `
                    &lt;li&gt;
                      &lt;a href="javascript:;"&gt;
                        &lt;img src="${item.picture}" /&gt;
                        &lt;p&gt;${item.name}&lt;/p&gt;
    				  &lt;/a&gt;
 				   &lt;/li&gt;
                    `;
								})
								.join("")}
    		&lt;/ul&gt;
    	   &lt;/div&gt;
          `;
				})
				.join("");
		});
	});
&lt;/script&gt;
</code></pre>
<ul>
<li>
<p>案例：学习反馈</p>
</li>
<li>
<p>框架</p>
</li>
</ul>
<pre><code class="language-html">&lt;div class="container"&gt;
	&lt;h4 class="stu-title"&gt;学习反馈&lt;/h4&gt;
	&lt;img class="bg" src="./img/head.png" alt="" /&gt;
	&lt;div class="item-wrap"&gt;
		&lt;div class="hot-area"&gt;
			&lt;span class="hot"&gt;热门校区&lt;/span&gt;
			&lt;ul class="nav"&gt;
				&lt;li&gt;&lt;a target="_blank" href="http://bjcp.itheima.com/"&gt;北京&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a target="_blank" href="http://sh.itheima.com/"&gt;上海&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a target="_blank" href="http://gz.itheima.com/"&gt;广州&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a target="_blank" href="http://sz.itheima.com/"&gt;深圳&lt;/a&gt;&lt;/li&gt;
			&lt;/ul&gt;
		&lt;/div&gt;
		&lt;form class="info-form"&gt;
			&lt;div class="area-box"&gt;
				&lt;span class="title"&gt;地区选择&lt;/span&gt;
				&lt;select name="province" class="province"&gt;
					&lt;option value=""&gt;省份&lt;/option&gt;
				&lt;/select&gt;
				&lt;select name="city" class="city"&gt;
					&lt;option value=""&gt;城市&lt;/option&gt;
				&lt;/select&gt;
				&lt;select name="area" class="area"&gt;
					&lt;option value=""&gt;地区&lt;/option&gt;
				&lt;/select&gt;
			&lt;/div&gt;
			&lt;div class="area-box"&gt;
				&lt;span class="title"&gt;您的称呼&lt;/span&gt;
				&lt;input type="text" name="nickname" class="nickname" value="播仔" /&gt;
			&lt;/div&gt;
			&lt;div class="area-box"&gt;
				&lt;span class="title"&gt;宝贵建议&lt;/span&gt;
				&lt;textarea type="text" name="feedback" class="feedback" placeholder="您对AJAX阶段课程宝贵的建议"&gt;&lt;/textarea&gt;
			&lt;/div&gt;
			&lt;div class="area-box"&gt;
				&lt;button type="button" class="btn btn-secondary submit"&gt;确定提交&lt;/button&gt;
			&lt;/div&gt;
		&lt;/form&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;script src="https://cdn.bootcdn.net/ajax/libs/axios/1.2.0/axios.min.js"&gt;&lt;/script&gt;
&lt;script src="./js/form-serialize.js"&gt;&lt;/script&gt;
&lt;!-- 核心代码 --&gt;
&lt;script src="./js/index.js"&gt;&lt;/script&gt;
</code></pre>
<ul>
<li>index.js</li>
</ul>
<pre><code class="language-js">/**
 * 目标1：完成省市区下拉列表切换
 *  1.1 设置省份下拉菜单数据
 *  1.2 切换省份，设置城市下拉菜单数据，清空地区下拉菜单
 *  1.3 切换城市，设置地区下拉菜单数据
 */
// 1.1 设置省份下拉菜单数据
axios({
	url: "http://hmajax.itheima.net/api/province",
}).then(result =&gt; {
	const str = result.data.list.map(pname =&gt; `&lt;option value="${pname}"&gt;${pname}&lt;/option&gt;`).join("");
	document.querySelector(".province").innerHTML = `&lt;option value=""&gt;省份&lt;/option&gt;` + str;
});

// 1.2 切换省份，设置城市下拉菜单数据，清空地区下拉菜单
document.querySelector(".province").addEventListener("change", async e =&gt; {
	const result = await axios({
		url: "http://hmajax.itheima.net/api/city",
		params: {
			pname: e.target.value,
		},
	});
	// console.log(result)
	const str = result.data.list
		.map(cname =&gt; {
			return `&lt;option value="${cname}"&gt;${cname}&lt;/option&gt;`;
		})
		.join("");

	document.querySelector(".city").innerHTML = `&lt;option value=""&gt;城市&lt;/option&gt;` + str;

	// 清空地区下拉菜单
	document.querySelector(".area").innerHTML = `&lt;option value=""&gt;地区&lt;/option&gt;`;
});

// 1.3 切换城市，设置地区下拉菜单数据
document.querySelector(".city").addEventListener("change", async e =&gt; {
	const result = await axios({
		url: "http://hmajax.itheima.net/api/area",
		params: {
			pname: document.querySelector(".province").value,
			cname: e.target.value,
		},
	});
	const str = result.data.list.map(aname =&gt; `&lt;option value="${aname}"&gt;${aname}&lt;/option&gt;`);
	document.querySelector(".area").innerHTML = `&lt;option value=""&gt;地区&lt;/option&gt;` + str;
});
/**
 * 目标2：收集数据提交保存
 *  2.1监听提交的点击事件
 *  2.2依靠插件收集表单数据
 *  2.3基于axios提交保存，显示结果
 */

document.querySelector(".submit").addEventListener("click", async () =&gt; {
	try {
		const form = document.querySelector(".info-form");
		const data = serialize(form, { hash: true, empty: true });
		const result = await axios({
			url: "http://hmajax.itheima.net/api/feedback",
			method: "post",
			data,
		});
		alert(result.data.message);
	} catch (error) {
		// console.dir(error)
		alert(error.response.data.message);
	}
});
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="18.33252741632523" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-30 17:08">2024-12-30 17:02</span>&nbsp;
<a href="https://www.cnblogs.com/iRuriCatt">iRuriCatt</a>&nbsp;
阅读(<span id="post_view_count">163</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18636389" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18636389);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18636389', targetLink: 'https://www.cnblogs.com/iRuriCatt/p/18636389', title: 'Ajax入门以及Axios的详细使用（含Promise）' })">举报</a>
</div>
        