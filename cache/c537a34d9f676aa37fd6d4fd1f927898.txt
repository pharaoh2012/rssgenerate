
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/linx/p/18837993" title="发布于 2025-04-21 09:35">
    <span role="heading" aria-level="2">Web前端入门第 38 问：CSS flex 弹性盒子与 grid 网格布局区别及应用场景</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>弹性盒子又称为 <code>Flexbox</code>，然而我更喜欢 <code>flex</code> 的叫法。</p>
<p><code>flex</code> 弹性盒子和 <code>grid</code> 网格布局作为前端开发中两把利器，它们的分界线没那么明显，虽然按照 MDN 的说法 flex 多用于一维布局(行/列)，grid 多用于二维布局(行列网格)，但实际开发中用多个一维布局也能拼凑出一个完整的二维布局。</p>
<p>grid 主要用来简化 html 结构，在一些二维布局的场景下，使用 flex 时需要更复杂的 html 结构支撑，而使用 grid 则可以尽可能的简化 html 结构。</p>
<p>我的理解 flex 擅长细节上的雕琢，而 grid 更擅长宏观上的调控。</p>
<h2 id="flex-的应用场景">flex 的应用场景</h2>
<p>下面细说 flex 的应用场景，及同时使用 grid 会怎样实现。</p>
<h3 id="网页导航">网页导航</h3>
<p>随处可见的网页导航布局，看图：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250421093333167-476478616.png" alt="" width="400" loading="lazy"></p>
<p><strong>使用 flex 实现可以是这样的代码结构：</strong></p>
<pre><code class="language-html">&lt;div class="nav"&gt;
  &lt;div class="item"&gt;首页&lt;/div&gt;
  &lt;div class="item"&gt;新闻&lt;/div&gt;
  &lt;div class="item"&gt;产品&lt;/div&gt;
  &lt;div class="item"&gt;联系我们&lt;/div&gt;
  &lt;div class="item"&gt;公司简介&lt;/div&gt;
  &lt;div class="item"&gt;关于我们&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  .nav {  
    width: 100%;
    display: flex;
  }
  .nav .item {
    margin-right: 40px;
  }
&lt;/style&gt;
</code></pre>
<p><strong>使用 grid 实现的代码结构：</strong></p>
<pre><code class="language-html">&lt;div class="nav"&gt;
  &lt;div class="item"&gt;首页&lt;/div&gt;
  &lt;div class="item"&gt;新闻&lt;/div&gt;
  &lt;div class="item"&gt;产品&lt;/div&gt;
  &lt;div class="item"&gt;联系我们&lt;/div&gt;
  &lt;div class="item"&gt;公司简介&lt;/div&gt;
  &lt;div class="item"&gt;关于我们&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  .nav {  
    width: 100%;
    display: grid;
    grid-auto-flow: column; /* 按列排列 */
    grid-auto-columns: max-content; /* 新增列的宽度由内容决定 */
  }
  .nav .item {
    margin-right: 40px;
  }
&lt;/style&gt;
</code></pre>
<p>可以看到，在处理一维布局时候，flex 可以说是得心应手，grid 则需要多写一些代码。</p>
<p>flex 的代码长得小清新一样，而 grid 总感觉有点长歪了~</p>
<h3 id="常见的左右布局">常见的左右布局</h3>
<p>再看这种常见的栏目标题布局：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250421093345337-1049491089.png" alt="" width="240" loading="lazy"></p>
<p><strong>使用 flex 实现：</strong></p>
<pre><code class="language-html">&lt;div class="modules"&gt;
  &lt;div class="title"&gt;
    &lt;h3 class="name"&gt;栏目标题&lt;/h3&gt;
    &lt;a href="javascript" class="more"&gt;更多 &gt;&lt;/a&gt;
  &lt;/div&gt;
  &lt;code class="code"&gt;
  &lt;/code&gt;
&lt;/div&gt;
&lt;style&gt;
  .modules {  
    border: 2px solid rgba(255, 71, 87,0.3);
    border-radius: 8px;
    width: 300px;
    height: 300px;
  }
  .modules .title {
    padding: 0 12px;
    display: flex;
    justify-content: space-between; /* 左右两端对齐 */
    align-items: center; /* 上下垂直居中 */
  }
&lt;/style&gt;
</code></pre>
<p><strong>使用 grid 实现：</strong></p>
<pre><code class="language-html">&lt;div class="modules"&gt;
  &lt;div class="title"&gt;
    &lt;h3 class="name"&gt;栏目标题&lt;/h3&gt;
    &lt;a href="javascript" class="more"&gt;更多 &gt;&lt;/a&gt;
  &lt;/div&gt;
  &lt;code class="code"&gt;
  &lt;/code&gt;
&lt;/div&gt;
&lt;style&gt;
  .modules {  
    border: 2px solid rgba(255, 71, 87,0.3);
    border-radius: 8px;
    width: 300px;
    height: 300px;
  }
  .modules .title {
    padding: 0 12px;
    display: grid;
    grid-auto-flow: column; /* 按列排列 */
    justify-content: space-between; /* 左右两端对齐 */
    align-items: center; /* 上下垂直居中 */
  }
&lt;/style&gt;
</code></pre>
<p>对比下来，使用 grid 的代码还是多了一行 <code>grid-auto-flow: column;</code>，小清新的 flex 还是要苗条一点~</p>
<h3 id="常见的左左右布局">常见的左左右布局</h3>
<p>以百度首页的热搜导航为例：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250421093351050-1656828986.png" alt="" width="500" loading="lazy"></p>
<p><strong>使用 flex 实现：</strong></p>
<p>以下示例代码巧用了 <code>margin-left: auto;</code> 让元素跑到右侧位置。</p>
<pre><code class="language-html">&lt;div class="nav"&gt;
  &lt;div class="item"&gt;我的关注&lt;/div&gt;
  &lt;div class="item"&gt;百度热搜&lt;/div&gt;
  &lt;div class="change"&gt;换一换&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  .nav {
    width: 650px;
    display: flex;
  }
  .nav .item {
    margin-right: 24px;
  }
  .nav .change {
    margin-left: auto; /* 巧用 auto */
  }
&lt;/style&gt;
</code></pre>
<p><strong>使用 grid 实现：</strong></p>
<pre><code class="language-html">&lt;div class="nav"&gt;
  &lt;div class="item"&gt;我的关注&lt;/div&gt;
  &lt;div class="item"&gt;百度热搜&lt;/div&gt;
  &lt;div class="change"&gt;换一换&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  .nav {
    width: 650px;
    display: grid;
    grid-template-columns: max-content max-content 1fr; /* 三列网格，最后一列占用剩余空间 */
  }
  .nav .item {
    margin-right: 24px;
  }
  .nav .change {
    justify-self: flex-end;
  }
&lt;/style&gt;
</code></pre>
<p>对比下来，还是 <code>flex</code> 布局更显得小清新一点。</p>
<h3 id="一维布局-flex-与-grid-对比">一维布局 flex 与 grid 对比</h3>
<p>对比了几种常见的一维列布局，使用 flex 比使用 grid 代码要简洁一点，虽然都能达到想要的效果，当然是代码越少越好了。</p>
<h2 id="gird-应用场景">gird 应用场景</h2>
<p>看完了一维布局的几个应用场景，再看看 grid 的应用场景。</p>
<h3 id="经典的网页分区">经典的网页分区</h3>
<p>页面的整体框架结构无外乎那几种，我们看一种最常见的管理平台的页面分区：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250421093357817-1652043099.png" alt="" width="690" loading="lazy"></p>
<p><strong>使用 grid 实现：</strong></p>
<pre><code class="language-html">&lt;div class="layout"&gt;
  &lt;div class="header"&gt;Header&lt;/div&gt;
  &lt;div class="aside"&gt;Aside&lt;/div&gt;
  &lt;div class="main"&gt;Main&lt;/div&gt;
  &lt;div class="footer"&gt;Footer&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  .layout {
    width: 900px;
    height: 270px;
    display: grid;
    grid-template-areas: 
      "aside header"
      "aside main"
      "aside footer";
    grid-template-columns: 200px 1fr;
    grid-template-rows: 60px 1fr 60px;
  }
  .header {
    grid-area: header;
    background-color: rgb(198, 226, 255);
  }
  .aside {
    grid-area: aside;
    background-color: rgb(217, 236, 255);
  }
  .main {
    grid-area: main;
    background-color: rgb(236, 245, 255);
  }
  .footer {
    grid-area: footer;
    background-color: rgb(198, 226, 255);
  }
&lt;/style&gt;
</code></pre>
<p><strong>使用 flex 实现：</strong></p>
<pre><code class="language-html">&lt;div class="layout"&gt;
  &lt;div class="header"&gt;Header&lt;/div&gt;
  &lt;div class="right-container"&gt;
    &lt;div class="aside"&gt;Aside&lt;/div&gt;
    &lt;div class="main"&gt;Main&lt;/div&gt;
    &lt;div class="footer"&gt;Footer&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  .layout {
    width: 900px;
    height: 270px;
    display: flex;
  }
  .header {
    flex: 0 0 200px;
    background-color: rgb(198, 226, 255);
  }
  .right-container {
    flex: 1;
    display: flex;
    flex-direction: column;
  }
  .aside {
    flex: 0 0 60px;
    background-color: rgb(217, 236, 255);
  }
  .main {
    flex: 1;
    background-color: rgb(236, 245, 255);
  }
  .footer {
    flex: 0 0 60px;
    background-color: rgb(198, 226, 255);
  }
&lt;/style&gt;
</code></pre>
<p>可以看到虽然 flex 也实现了一样的页面分区效果，但 HTML 的结构确要比 grid 更加复杂，需要嵌套更多的 HTML 结构用来实现复杂的二维布局。</p>
<h3 id="卡片列表">卡片列表</h3>
<p>看一种最常见的卡片列表布局：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250421093403957-367765371.png" alt="" width="460" loading="lazy"></p>
<p><strong>使用 grid 实现：</strong></p>
<pre><code class="language-html">&lt;div class="list"&gt;
  &lt;div class="item"&gt;1&lt;/div&gt;
  &lt;div class="item"&gt;2&lt;/div&gt;
  &lt;div class="item"&gt;3&lt;/div&gt;
  &lt;div class="item"&gt;4&lt;/div&gt;
  &lt;div class="item"&gt;5&lt;/div&gt;
  &lt;div class="item"&gt;6&lt;/div&gt;
  &lt;div class="item"&gt;7&lt;/div&gt;
  &lt;div class="item"&gt;8&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  .list {
    width: 600px;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 10px;
  }
  .item {
    height: 200px;
    background-color: rgba(255, 71, 87,0.3);
  }
&lt;/style&gt;
</code></pre>
<p><strong>使用 flex 实现：</strong></p>
<pre><code class="language-html">&lt;div class="list"&gt;
  &lt;div class="item"&gt;1&lt;/div&gt;
  &lt;div class="item"&gt;2&lt;/div&gt;
  &lt;div class="item"&gt;3&lt;/div&gt;
  &lt;div class="item"&gt;4&lt;/div&gt;
  &lt;div class="item"&gt;5&lt;/div&gt;
  &lt;div class="item"&gt;6&lt;/div&gt;
  &lt;div class="item"&gt;7&lt;/div&gt;
  &lt;div class="item"&gt;8&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  .list {
    width: 600px;
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
  }
  .item {
    flex: 0 0 193px; /* 这儿必须明确指定宽度 (600px - 10px * 2) / 3 = 193px */
    height: 200px;
    background-color: rgba(255, 71, 87,0.3);
  }
&lt;/style&gt;
</code></pre>
<p>flex 实现的卡片列表必须明确指定一个宽度，这个宽度值需要减去列间距得出；而 grid 实现的这种卡片列表则无需考虑这种计算问题，直接会自动适应。</p>
<h3 id="二维布局-flex-与-grid-对比">二维布局 flex 与 grid 对比</h3>
<p>在二维布局领域，grid 当之无愧的强大，虽然 flex 也可以实现一毛一样的效果，当不可避免的是代码冗余。</p>
<h2 id="总结">总结</h2>
<p>flex 在一维布局中更能发挥优势，grid 在宏观布局或二维布局中优势更加明显。</p>
<p>在不考虑代码冗余的情况下，flex 和 grid 都能在对方领域抢饭碗。</p>
<p>实际开发中，grid 标准浏览器都是在 2017 年之后才实现的，flex 标准则是在 2012 年就开始支持，项目但凡需要兼容老古董浏览器，grid就别想了，赖克宝吃不到小天鹅~~</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>&nbsp;</p>
<p style="font-size: 18px;font-weight: bold;"><span style="color:rgb(255, 71, 87)">文章正在持续更新中...</span>，首发微信公众号【<span style="color:rgb(255, 71, 87)">前端路引</span>】，欢迎关注公众号获取最新文章。</p>
<p>
  <img style="max-width: 320px;" src="https://images.cnblogs.com/cnblogs_com/linx/2447020/o_250228035031_%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png">
</p>
<p>本文来自博客园，作者：<a href="https://www.cnblogs.com/linx/" target="_blank">前端路引</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/linx/p/18837993" target="_blank">https://www.cnblogs.com/linx/p/18837993</a></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.1998553504386574" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-21 09:36">2025-04-21 09:35</span>&nbsp;
<a href="https://www.cnblogs.com/linx">前端路引</a>&nbsp;
Views(<span id="post_view_count">34</span>)&nbsp;
Comments(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18837993);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18837993', targetLink: 'https://www.cnblogs.com/linx/p/18837993', title: 'Web前端入门第 38 问：CSS flex 弹性盒子与 grid 网格布局区别及应用场景' })">举报</a>
</div>
	