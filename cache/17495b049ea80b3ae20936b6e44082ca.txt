
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/youlanjihua/p/18913493" title="发布于 2025-06-06 09:15">
    <span role="heading" aria-level="2">鸿蒙仓颉语言开发教程：仓颉语言中的状态存储</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p data-id="p124945a-rQO4Ygyt">大家好，今天来分享一下仓颉开发语言中的状态存储。主要介绍AppStorage和PersistentStorage两部分内容。</p>
<p data-id="p124945a-jVjKRKpG"><strong>AppStorage</strong></p>
<p data-id="p124945a-2hDJ8S4S">AppStorage是应用全局级的状态存储，可以在应用的任何地方随时使用。先介绍一下AppStorage的存储方法，有set和setOrCreate两种方式，区别是set只能设置已经创建了的字段的值，相当于修改值，而setOrCreate方法的作用是如果没有字段时会自动创建，所以我推荐大家使用setOrCreate方法。</p>
<div>
<pre class="language-plain highlighter-hljs"><code>let store1 = AppStorage.set('name', 'youlan');
let store2 =  AppStorage.setOrCreate('name', 'youlan');</code></pre>
</div>
<p data-id="p124945a-RFy8fYTD">取值时，建议大家先判断本地存储是否有该字段，使用has方法：</p>
<div>
<pre class="language-plain highlighter-hljs"><code>let hasValue:Bool = AppStorage.has('name')</code></pre>
</div>
<p data-id="p124945a-mc2Xnl6j">当判断有值，就可以使用get方法取值，注意取值时要标明类型：</p>
<div>
<pre class="language-plain highlighter-hljs"><code>if(hasValue){  
	let name = AppStorage.get&lt;String&gt;('name')
  }</code></pre>
</div>
<p data-id="p124945a-2OAXMM6E">你还可以在取值代码后加上getOrThrow()，意思是取值或者抛出一个异常：</p>
<div>
<pre class="language-plain highlighter-hljs"><code>let name = AppStorage.get&lt;String&gt;('name').getOrThrow()</code></pre>
</div>
<p data-id="p124945a-m3J04xuI">除了基础的存入和读取操作，你还可以使用link来双向绑定AppStorage中的数据,给大家演示一下：</p>
<div>
<pre class="language-plain highlighter-hljs"><code>let name1 = AppStorage.link&lt;String&gt;("name").getOrThrow()
let name2 = AppStorage.link&lt;String&gt;("name").getOrThrow()
name1.set('newname')</code></pre>
</div>
<p data-id="p124945a-sPLdfJWn">代码中name1和name2都双向绑定了AppStorage中的name字段，当name1的值修改时，name2也会同步修改为新的值newname。</p>
<p data-id="p124945a-HE0ZEIMK">最后介绍Appstorage删除数据的方法，可以使用delete删除某一个字段的数据，也可以使用clear方法清除所有数据：</p>
<div>
<pre class="language-plaintext highlighter-hljs"><code>AppStorage.delete('name')
AppStorage.clear()</code></pre>
</div>
<p data-id="p124945a-u7Hy10cZ"><strong>PersistentStorage</strong></p>
<p data-id="p124945a-jdkFiRPE">PersistentStorage是在AppStorage的基础上，将数据保留在磁盘上来完成持久化。目前PersistentStorage支持的数据类型有Int64, Float64, String, Bool。另外，不建议大家使用PersistentStorage存储大量的数据，超过2kb的数据建议使用数据库。</p>
<p data-id="p124945a-sTDB6kxz">PersistentStorage的存储方法有两种，persistProp可以存储单个数据，persistProps可以同时存储多个数据，比如以下代码：</p>
<div>
<pre class="language-plain highlighter-hljs"><code>PersistentStorage.persistProp("name", "fugui")
PersistentStorage.persistProp("age", "20")</code></pre>
</div>
<div>
<pre class="language-plain highlighter-hljs"><code>PersistentStorage.persistProps([("name", "fugui"),("age", "20")])</code></pre>
</div>
<p data-id="p124945a-QVyXbEsm">既然PersistentStorage是在AppStorage的基础上持久化数据，所以PersistentStorage存储的内容是可以通过AppStorage来读取的，取值方法和上面一样。</p>
<p data-id="p124945a-DeWaoUDb">最后再介绍一下PersistentStorage的删除方法：</p>
<div>
<pre class="language-plain highlighter-hljs"><code>PersistentStorage.deleteProp('name')</code></pre>
</div>
<p data-id="p124945a-AR4g8yzL">以上就是今天的分享内容，感谢阅读。#HarmonyOS语言##仓颉##购物#</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.08255821590972222" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-06-06 09:16">2025-06-06 09:15</span>&nbsp;
<a href="https://www.cnblogs.com/youlanjihua">幽蓝计划</a>&nbsp;
阅读(<span id="post_view_count">11</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18913493);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18913493', targetLink: 'https://www.cnblogs.com/youlanjihua/p/18913493', title: '鸿蒙仓颉语言开发教程：仓颉语言中的状态存储' })">举报</a>
</div>
        