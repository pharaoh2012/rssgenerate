
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18681770" title="发布于 2025-01-20 16:28">
    <span role="heading" aria-level="2">manim边做边学--交替变换</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>今天，我们将介绍 <code>Manim</code> 中两个用于交替变换的动画类：<code>CyclicReplace</code> 和 <code>Swap</code>。</p>
<p>无论是在展示数学概念的动态变化，还是在图形设计中呈现元素的巧妙交互，这两个动画类都扮演着重要角色。</p>
<p>它们以各自独特的方式，为我们提供了丰富的创意表达空间。</p>
<ol>
<li><code>CyclicReplace</code>：循环替换一组对象的位置</li>
<li><code>Swap</code>：交换两个特定对象的位置</li>
</ol>
<h1 id="1-动画概述">1. 动画概述</h1>
<h2 id="11-cyclicreplace">1.1. CyclicReplace</h2>
<p>当你需要循环替换一组对象的位置时，<code>CyclicReplace</code> 是一个非常有用的动画类。</p>
<p>例如，有一组按顺序排列的元素，并且想要给人一种元素依次循环移动位置的视觉效果，类似于一个循环队列的元素循环操作，那么使用 <code>CyclicReplace</code> 可以很好地实现这一效果。</p>
<p>它可以用于展示元素之间的循环依赖关系，或者周期性的位置调整，给人一种周期性变化的直观感受。</p>
<p><code>CyclicReplace</code> 的特点是将一组 <code>Mobject</code>按照某种循环顺序进行位置交换。</p>
<p>比如，对于一组元素 <code>[A, B, C, D]</code>，它可能会将 <code>A</code> 的位置替换为 <code>B</code> 的位置，<code>B </code>的位置替换为 <code>C </code>的位置，以此类推，最后将 <code>D</code> 的位置替换为 <code>A</code> 的位置。</p>
<p>它的参数主要有：</p>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>mobjects</td>
<td>[Mobject]</td>
<td>要进行变换的 mobject 列表</td>
</tr>
<tr>
<td>path_arc</td>
<td>float</td>
<td>mobjects 到达目标位置所遵循的弧的角度</td>
</tr>
</tbody>
</table>
<h2 id="12-swap">1.2. Swap</h2>
<p><code>Swap</code> 动画类适用于需要交换两个特定对象位置的场景。</p>
<p>当你有两个对象，你想清晰地展示它们位置的互换时，使用 <code>Swap</code> 动画可以实现直接交换位置的效果。</p>
<p>常见的应用场景包括交换等式中的两个元素，交换图表中的两个数据点或交换布局中的两个元素，以强调它们的等价性或某种关联关系。</p>
<p>也可以用于对比前后两个对象位置不同但功能或属性相同的情况，通过交换位置来突出它们的互换性。</p>
<p>与 <code>CyclicReplace</code> 不同，<code>Swap</code> 主要针对两个对象进行操作。</p>
<p>它将精确地交换这两个对象的位置，使它们在动画结束时位置互换。</p>
<p>它的参数主要有：</p>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>mobjects</td>
<td>[Mobject]</td>
<td>参与交换的 Mobject</td>
</tr>
<tr>
<td>path_arc</td>
<td>float</td>
<td>象在交换过程中所遵循的弧的角度</td>
</tr>
</tbody>
</table>
<h1 id="2-使用示例">2. 使用示例</h1>
<p>下面通过示例来演示在哪些场景下可以使用上面的两个动画类。</p>
<h2 id="21-元素的循环移动">2.1. 元素的循环移动</h2>
<p>这个示例展示了三个不同形状（<strong>圆形</strong>、<strong>正方形</strong>和<strong>三角形</strong>）的循环位置替换，直观地体现了 <code>CyclicReplace</code> 如何循环移动一组对象。</p>
<pre><code class="language-python">circle = Circle()
square = Square()
triangle = Triangle()

shapes = VGroup(circle, square, triangle)
shapes.arrange(RIGHT)

self.add(shapes)
self.play(CyclicReplace(*shapes))
self.play(CyclicReplace(*shapes))
self.play(CyclicReplace(*shapes))
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202501/83005-20250120162743854-361713332.gif" alt="" loading="lazy"></p>
<h2 id="22-模拟循环队列的元素移动">2.2. 模拟循环队列的元素移动</h2>
<p>这个示例模拟了一个简单的循环队列，数字 <code>1</code> 到 <code>5</code> 按顺序排列，通过 <code>CyclicReplace</code> 动画展示了它们像在循环队列中一样循环移动位置。</p>
<pre><code class="language-python">numbers = [Text(str(i)) for i in range(1, 6)]
number_group = VGroup(*numbers).arrange(RIGHT)

self.add(number_group)
self.play(CyclicReplace(*number_group))
self.play(CyclicReplace(*number_group))
self.play(CyclicReplace(*number_group))
self.play(CyclicReplace(*number_group))
self.play(CyclicReplace(*number_group))
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202501/83005-20250120162743479-445186894.gif" alt="" loading="lazy"></p>
<h2 id="23-交换等式两边的元素">2.3. 交换等式两边的元素</h2>
<p>在数学等式的场景中，先展示一个简单的等式 <code>x + 5 = 10</code>，然后使用 <code>Swap</code> 交换等式中的元素。</p>
<pre><code class="language-python">eq = MathTex(r"x + 5 = \quad 10")
eq[0][0].set_color(GREEN)
eq[0][2].set_color(BLUE)
eq[0][4:6].set_color(RED)

self.add(eq)
self.play(Swap(eq[0][0], eq[0][2]))
self.wait()
self.play(Swap(eq[0][0:3], eq[0][4:6]))
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202501/83005-20250120162743468-1763399853.gif" alt="" loading="lazy"></p>
<h2 id="24-对称交换两个图形的位置">2.4. 对称交换两个图形的位置</h2>
<p>这个示例通过交换左右两个不同图形（<strong>圆形</strong>和<strong>正方形</strong>）的位置，展示了 <code>Swap</code> 在图形布局中用于突出<strong>对称关系</strong>或<strong>位置交换</strong>的效果。</p>
<pre><code class="language-python">left_circle = Circle().shift(LEFT)
right_square = Square().shift(RIGHT)

self.add(left_circle, right_square)
self.wait(0.5)
self.play(Swap(left_circle, right_square))
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202501/83005-20250120162743900-583758593.gif" alt="" loading="lazy"></p>
<h1 id="3-附件">3. 附件</h1>
<p>文中的代码只是关键部分的截取，完整的代码共享在网盘中（<code>swap.py</code>），</p>
<p>下载地址: <a href="https://url11.ctfile.com/d/45455611-64751047-a5be65?p=6872" target="_blank" rel="noopener nofollow">完整代码</a> (访问密码: 6872)</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.07476211184143519" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-20 16:28">2025-01-20 16:28</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18681770" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18681770);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18681770', targetLink: 'https://www.cnblogs.com/wang_yb/p/18681770', title: 'manim边做边学--交替变换' })">举报</a>
</div>
        