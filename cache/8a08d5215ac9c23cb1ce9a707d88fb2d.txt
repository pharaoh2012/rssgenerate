
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/FreakEmbedded/p/18774455" title="发布于 2025-03-16 00:49">
    <span role="heading" aria-level="2">三分钟教学：手把手教你实现Arduino发布第三方库</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316004910900-1368990298.png" alt="三分钟教学：手把手教你实现Arduino发布第三方库" class="desc_img">
        Arduino 发布第三方库的流程包括：构建库的基本框架后将其打包并上传至 GitHub，在 GitHub 上创建 Tag 和 Release 后，提交到 Arduino 库管理器，最后在Arduino IDE进行验证。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="三分钟教学手把手教你实现arduino发布第三方库">三分钟教学：手把手教你实现Arduino发布第三方库</h1>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250315235416097-850182539.png" alt="image" loading="lazy"></p>
<h2 id="原文链接">原文链接：</h2>
<p><a href="https://mp.weixin.qq.com/s/0jIkDXaGKFOn2o03wUmUmQ" target="_blank" rel="noopener nofollow"><strong>手把手教你实现Arduino发布第三方库</strong></a></p>
<h1 id="摘要">摘要</h1>
<p>Arduino 发布第三方库的流程包括：构建库的基本框架后将其打包并上传至 GitHub，在 GitHub 上创建 Tag 和 Release 后，提交到 Arduino 库管理器，最后在 Arduino IDE 进行验证。</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202411/2591203-20241121002659547-1525516382.png" alt="image" loading="lazy"></p>
<p><strong>关于我们更多介绍可以查看云文档：<a href="https://f1829ryac0m.feishu.cn/docx/SGvHdRW1eoxgGIxwIjacX7SVnVb?from=from_copylink" target="_blank" rel="noopener nofollow">https://f1829ryac0m.feishu.cn/docx/SGvHdRW1eoxgGIxwIjacX7SVnVb?from=from_copylink</a><br>
或者访问我们的wiki：<a href="https://github.com/leezisheng/Doc/wiki" target="_blank" rel="noopener nofollow">https://github.com/leezisheng/Doc/wiki</a></strong></p>
<h2 id="往期推荐">往期推荐：</h2>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzkwMTYzNTY3Ng==&amp;mid=2247483825&amp;idx=1&amp;sn=149aaf3baa6a96703713e554d4a888db&amp;chksm=c0b08a82f7c70394074a24b722a1caddb0ad598a7303e61133216ae61423df0b5bc57a6b82b2&amp;scene=21#wechat_redirect" title="**学嵌入式的你，还不会面向对象？？！**" target="_blank" rel="noopener nofollow"><strong>学嵌入式的你，还不会面向对象？？！</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/sycnlnMhtFji8q2fYh0MFQ" title="**全网最适合入门的面向对象编程教程：00 面向对象设计方法导论**" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：00 面向对象设计方法导论</strong></a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzkwMTYzNTY3Ng==&amp;mid=2247483853&amp;idx=1&amp;sn=c7685237216b8dd1cadf95f3353fde8e&amp;chksm=c0b08afef7c703e8ce7b76958718ebe381220a199fac9e872710ea1cb4f8fc6f93d36d151279&amp;scene=21#wechat_redirect" title="**全网最适合入门的面向对象编程教程：01 面向对象编程的基本概念**" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：01 面向对象编程的基本概念</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/XKpEAGY9WJ7GRFc98E6dcw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：02 类和对象的 Python 实现-使用 Python 创建类</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/LsNtLbHLNtVBtiQ3eaJnSg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：03 类和对象的 Python 实现-为自定义类添加属性</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/A5rMO3ppTZTUwRPL2NQxdg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：04 类和对象的Python实现-为自定义类添加方法</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/YjM1JPzLakfyWiDkyy4LQw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：05 类和对象的Python实现-PyCharm代码标签</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/z7CmgHJXf0QlAgIIRRTXlw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：06 类和对象的Python实现-自定义类的数据封装</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/7r4hgM3a187si_D5ReEMCA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：07 类和对象的Python实现-类型注解</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/sSO-L_NQHarXh160xiVZVg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：08 类和对象的Python实现-@property装饰器</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/cAZzXr9MSL0nVxVcTgNlQA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：09 类和对象的Python实现-类之间的关系</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/29Lr_nigsMuIJMmWEObk1g" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：10 类和对象的Python实现-类的继承和里氏替换原则</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/HEvQNiVXkjlnbhz8Sdt_4Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：11 类和对象的Python实现-子类调用父类方法</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/QHYLu7Mrs2ErUHvy_k59QA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：12 类和对象的Python实现-Python使用logging模块输出程序运行日志</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/EbJJpqIq8v_eRQZfdWONFA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：13 类和对象的Python实现-可视化阅读代码神器Sourcetrail的安装使用</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/fLSGXknzwY8FHzavunfQXg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：全网最适合入门的面向对象编程教程：14 类和对象的Python实现-类的静态方法和类方法</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/fLSGXknzwY8FHzavunfQXg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：15 类和对象的 Python 实现-__slots__魔法方法</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/VNlMnPhSyglZ9FalqIfw-A" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：16 类和对象的Python实现-多态、方法重写与开闭原则</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/mffQ0sdsI5yt_tJrZRxe-g" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：17 类和对象的Python实现-鸭子类型与“file-like object“</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/JSIKlWJ4pNShBGkfXolkQg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：18 类和对象的Python实现-多重继承与PyQtGraph串口数据绘制曲线图</strong></a></p>
<p><a href="https://www.cnblogs.com/FreakEmbedded/p/18308599" target="_blank"><strong>全网最适合入门的面向对象编程教程：19 类和对象的 Python 实现-使用 PyCharm 自动生成文件注释和函数注释</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/_TuErM5YRBsy2wixYbbbkw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：20 类和对象的Python实现-组合关系的实现与CSV文件保存</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/zqG3vuxVq0pmUqrV-tztng" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：21 类和对象的Python实现-多文件的组织：模块module和包package</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/Wj5ovLUWqKudW5VSiycK5A" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：22 类和对象的Python实现-异常和语法错误</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/o5cgglFtmr9q3lW5gAiYEg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：23 类和对象的Python实现-抛出异常</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/DPC8Drr6iCnC0j-YMGyOfg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：24 类和对象的Python实现-异常的捕获与处理</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/ghhS3fk98LTkh1a-daEg0Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：25 类和对象的Python实现-Python判断输入数据类型</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/LHj-igDSYaL_1z8H7VEj1Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：26 类和对象的Python实现-上下文管理器和with语句</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/tQ2NHEWCMI4e4AG5BBsSpw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：27 类和对象的Python实现-Python中异常层级与自定义异常类的实现</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/rvHzNvuovU-3KY2FtcQK-Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：28 类和对象的Python实现-Python编程原则、哲学和规范大汇总</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/swfA2JsajMFpaOa5PZCEbg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：29 类和对象的Python实现-断言与防御性编程和help函数的使用</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/5NxKSJUxetAkdwYW9n941w" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：30 Python的内置数据类型-object根类</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/Z3AMqnfkmhqzcK3A-J3ylw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：31 Python的内置数据类型-对象Object和类型Type</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/C4pj9ujGsQMMOnLEqI414A" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：32 Python的内置数据类型-类Class和实例Instance</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/V_3QFDJRss_lAJHgJ4oVwg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：33 Python的内置数据类型-对象Object和类型Type的关系</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/crZBcEEBKBfDfWA9ub-d-A" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：34 Python的内置数据类型-Python常用复合数据类型：元组和命名元组</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/_X7sKhro7wJ96KwhbAcopg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：35 Python的内置数据类型-文档字符串和__doc__属性</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/KCvCx7Im35uiBkPpJASTkg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：36 Python的内置数据类型-字典</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/bNSPkIhKgmzLFz5BYdizNQ" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：37 Python常用复合数据类型-列表和列表推导式</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/XgTr4hvBC4Uk2hPmaDRn2Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：38 Python常用复合数据类型-使用列表实现堆栈、队列和双端队列</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/Cx0--RZGrzud_aILXTlEJg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：39 Python常用复合数据类型-集合</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/bCxbepaVypefwEOtKnzb5g" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：40 Python常用复合数据类型-枚举和enum模块的使用</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/Ah-fhWf67Jm7TF-OGooy-g" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：41 Python常用复合数据类型-队列（FIFO、LIFO、优先级队列、双端队列和环形队列）</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/XkIocfNXpie-65voC4W8wA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：42 Python常用复合数据类型-collections容器数据类型</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/ODYRdwzdlcBQkCE3xpYjIA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：43 Python常用复合数据类型-扩展内置数据类型</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/DLylf2L_dpkcXYw6iFnhwA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：44 Python内置函数与魔法方法-重写内置类型的魔法方法</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/AEyP4BfRGZB63akTgGLWZw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：45 Python实现常见数据结构-链表、树、哈希表、图和堆</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/3COyHC1ob9xs_EUQtk7hCA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：46 Python函数方法与接口-函数与事件驱动框架</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/wmc2ZcSC3l5JOLpMpthv6Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：47 Python函数方法与接口-回调函数Callback</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/MEvlZqaItRNwP4zRtMQHhQ" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：48 Python函数方法与接口-位置参数、默认参数、可变参数和关键字参数</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/qDQo9KxfGrTj5-FDo-MBiA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：49 Python函数方法与接口-函数与方法的区别和lamda匿名函数</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/DwKug8eHOYyC2pE77eLw9w" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：50 Python函数方法与接口-接口和抽象基类</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/pDQWfDDh3WeCgjC5b5rP1Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：51 Python函数方法与接口-使用Zope实现接口</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/Wgqc8PbpMMf8pKFHo4H7PA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：52 Python函数方法与接口-Protocol协议与接口</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/jvOLalgkUpxR7LGgQnJ9aQ" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：53 Python字符串与序列化-字符串与字符编码</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/z3JS3dcpPQTD9ygWyxRUDg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：54 Python字符串与序列化-字符串格式化与format方法</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/C0rgRhmC1ydh2PpEwAuMlw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：55 Python字符串与序列化-字节序列类型和可变字节字符串</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/UmXPSAbrLvYyH-45kBHLZQ" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：56 Python字符串与序列化-正则表达式和re模块应用</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/-Y8DX8wo1OAhKkWK7dikzg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：57 Python字符串与序列化-序列化与反序列化</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/BFTYNXXtXarbU70RvOs20Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：58 Python字符串与序列化-序列化Web对象的定义与实现</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/cgs1FP0bRMvqXv00J1AzkA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：59 Python并行与并发-并行与并发和线程与进程</strong></a></p>
<h2 id="更多精彩内容可看">更多精彩内容可看：</h2>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzkwMTYzNTY3Ng==&amp;mid=2247483747&amp;idx=1&amp;sn=0e203586516fd6e925085b9c1244dbee&amp;scene=21#wechat_redirect" title="**给你的 Python 加加速：一文速通 Python 并行计算**" target="_blank" rel="noopener nofollow"><strong>给你的 Python 加加速：一文速通 Python 并行计算</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzkwMTYzNTY3Ng==&amp;mid=2247483719&amp;idx=1&amp;sn=7ece9da65d002fdc3df9539cc43f3a8d&amp;scene=21#wechat_redirect" title="**一文搞懂 CM3 单片机调试原理**" target="_blank" rel="noopener nofollow"><strong>一文搞懂 CM3 单片机调试原理</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzkwMTYzNTY3Ng==&amp;mid=2247483671&amp;idx=1&amp;sn=c267a0c6f4ab93d6b6d934bf803b5919&amp;scene=21#wechat_redirect" title="**肝了半个月，嵌入式技术栈大汇总出炉**" target="_blank" rel="noopener nofollow"><strong>肝了半个月，嵌入式技术栈大汇总出炉</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzkwMTYzNTY3Ng==&amp;mid=2247483774&amp;idx=1&amp;sn=46d57506febe92c1719c8567ebe95269&amp;scene=21#wechat_redirect" title="**电子计算机类比赛的“武林秘籍”**" target="_blank" rel="noopener nofollow"><strong>电子计算机类比赛的“武林秘籍”</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzkwMTYzNTY3Ng==&amp;mid=2247483854&amp;idx=1&amp;sn=fd666dc501a0de850abfbd8793abff00&amp;chksm=c0b08afdf7c703eb494f8e402a5d60eba9a802bfdb02c07a5e1666a8a1b335e38240adc6c1b5&amp;scene=21#wechat_redirect" title="**一个MicroPython的开源项目集锦：awesome-micropython，包含各个方面的Micropython工具库**" target="_blank" rel="noopener nofollow"><strong>一个MicroPython的开源项目集锦：awesome-micropython，包含各个方面的Micropython工具库</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/2-Z6WqekVOuDbEdiE65Wfw" target="_blank" rel="noopener nofollow"><strong>Avnet ZUBoard 1CG开发板—深度学习新选择</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/WrFVqS2-s1g6RYNd_Q5CDA" target="_blank" rel="noopener nofollow"><strong>工程师不要迷信开源代码，还要注重基本功</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/FUzf9kAHABNfo2aZh1jHzA" target="_blank" rel="noopener nofollow"><strong>什么？配色个性化的电机驱动模块？！！</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/TNsGwgi0pdE9v-tY4FZu6w" target="_blank" rel="noopener nofollow"><strong>什么？XIAO主控新出三款扩展板!</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/0jIkDXaGKFOn2o03wUmUmQ" target="_blank" rel="noopener nofollow"><strong>手把手教你实现Arduino发布第三方库</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/7n7tYqg5GVHvRC9TUi50MA" target="_blank" rel="noopener nofollow"><strong>万字长文手把手教你实现MicroPython/Python发布第三方库</strong></a></p>
<h1 id="0引言">0.引言</h1>
<p>上期教程我们讲到如何发布 <code>Python/Micropython</code> 的库函数，那么 <code>Arduino</code> 第三方库应该如何发布呢？我们想要通过 <code>Arduino IDE</code> 中的库管理工具找到自己编写的库，又该如何操作呢？<br>
本期教程以 <code>Arduino</code> 版本的串口舵机库为例，给大家进行展示，相关操作视频可以查看：</p>
<p><a href="https://www.bilibili.com/video/BV1wWQUYVE8V/?spm_id_from=333.1387.homepage.video_card.click&amp;vd_source=696723cd18d516916a1d480d0a2fce46" title="让你的代码被全世界使用！手把手教你发布Arduino 第三方库" target="_blank" rel="noopener nofollow"><strong>让你的代码被全世界使用！手把手教你发布Arduino 第三方库</strong></a><br>
<img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316001457102-1294913467.png" alt="image" loading="lazy"></p>
<h1 id="1库文件基本框架">1.库文件基本框架</h1>
<p>一个典型的 <code>Arduino</code> 库目录结构有以下几个关键部分：</p>
<pre><code class="language-bash">YourLibraryName/
  ├── src/                         // 源代码目录（必须）
  │    ├── YourLibraryName.h       // 头文件
  │    └── YourLibraryName.cpp     // 源文件
  ├── examples/                    // 示例代码目录（可选但推荐）
  │    └── one/                    // 第一个示例代码文件夹
  │        └── one.ino             // 示例代码1
  │    └── two/                    // 第二个示例代码文件夹
  │        └── two.ino             // 示例代码2
  │    └── three/                  // 第三个示例代码文件夹
  │        └── three.ino           // 示例代码3
  ├── library.properties           // 库的元数据文件（必须）
  ├── keywords.txt                 // 语法高亮关键字（可选）
  ├── README.md                    // 文档
  └── LICENSE                      // 许可证
</code></pre>
<h2 id="11-src---源代码目录必须">1.1 <strong>src/</strong><code> -</code> <strong>源代码目录（必须）</strong></h2>
<p>在这个目录下，存放的是库的核心代码，主要包含。</p>
<ul>
<li><code>YourLibraryName.h</code>：头文件，声明你的库的类、函数以及其他需要公开的接口。</li>
<li><code>YourLibraryName.cpp</code>：源文件，定义你在头文件中声明的函数和类的具体实现。</li>
</ul>
<h2 id="12-examples---示例代码目录可选但推荐">1.2 <strong>examples/ - 示例代码目录（可选但推荐）</strong></h2>
<p><code>examples</code> 文件夹是用来存放例程的，帮助用户快速理解并使用你的库函数。</p>
<p>例程文件就是一个 <code>.ino</code> 文件，而且每一个例程放在一个文件夹中，文件夹和例程的名字需要把保持一样。</p>
<p>例如有三个例程，名字分别叫 <code>one</code>, <code>two</code>, <code>three</code>。</p>
<p>那么在这三个例程的文件结构应为：</p>
<pre><code class="language-bash">── examples
    ├── one
    │   └── one.ino
    ├── two
    │   └── two.ino
    └── three
        └── three.ino
</code></pre>
<h2 id="13-libraryproperties---库的元数据文件必须">1.3 <strong>library.properties</strong> - <strong>库的元数据文件</strong>（必须）</h2>
<p>这是库的核心文件，包含关键信息，如库的名称、版本、作者、依赖关系等。</p>
<p>它是 <code>Arduino IDE</code> 正确识别和加载库所必须的，<code>Arduino IDE</code> 会根据它来识别库的相关信息。一个简单的 <code>library.properties</code> 文件如下：</p>
<pre><code class="language-bash">name=MyLibrary
version=1.0.0
author=Your Name
maintainer=Your Email
sentence=MyLibrary is a simple library for controlling sensors.
paragraph=MyLibrary allows you to easily control sensors and devices.
category=Sensor
url=https://github.com/yourusername/MyLibrary
architectures=*
</code></pre>
<p>这个文件采用 <strong>INI<strong><strong>文件格式（注意使用</strong></strong>UTF-8****编码），</strong>该文件通常以<strong>键值对</strong> 的形式存储信息，一行一个属性，以下是它的常见字段说明：</p>
<table>
<thead>
<tr>
<th><strong>字段</strong></th>
<th><strong>作用</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>name</strong></td>
<td>库的名称</td>
<td><code>name=MyLibrary</code></td>
</tr>
<tr>
<td><strong>version</strong></td>
<td>版本号</td>
<td><code>version=1.2.0</code></td>
</tr>
<tr>
<td><strong>author</strong></td>
<td>作者</td>
<td><code>author=Someone</code></td>
</tr>
<tr>
<td><strong>maintainer</strong></td>
<td>维护者</td>
<td><code>maintainer=SomeoneElse</code></td>
</tr>
<tr>
<td><strong>architectures</strong></td>
<td>支持的架构</td>
<td><code>architectures=esp32</code></td>
</tr>
<tr>
<td><strong>sentence</strong></td>
<td>库的简要描述</td>
<td><code>sentence=A lightweight servo control library.</code></td>
</tr>
<tr>
<td><strong>category</strong></td>
<td>库的分类</td>
<td><code>category=Communication</code></td>
</tr>
<tr>
<td><strong>url</strong></td>
<td>项目地址</td>
<td><code>url=``https://github.com/leezisheng/serial-servo</code></td>
</tr>
<tr>
<td><strong>license</strong></td>
<td>许可证</td>
<td><code>license=MIT</code></td>
</tr>
</tbody>
</table>
<p>关于这部分的详细编写规范可以参考<a href="https://docs.arduino.cc/arduino-cli/library-specification/?utm_source=chatgpt.com" target="_blank" rel="noopener nofollow">官方文档</a></p>
<h2 id="14-keywordstxt---语法高亮关键字可选">1.4 <strong>keywords.txt</strong> - <strong>语法高亮关键字</strong>（可选）</h2>
<p><code>keywords.txt</code> 文件用于定义库中的关键字（如函数、类等），以便在 Arduino IDE 中提供语法高亮显示，提升代码可读性。</p>
<p>该文件的语法为：</p>
<pre><code>keyword[tab]KEYWORD_TOKENTYPE
</code></pre>
<p>每行包含一个关键字及其对应的关键字类型，二者之间使用制表符（Tab）分隔。</p>
<p>关键字类型决定了关键字在 Arduino IDE 中的高亮显示方式，常用的关键字类型包括：</p>
<ul>
<li><strong>KEYWORD1</strong>：通常用于库的类名。</li>
<li><strong>KEYWORD2</strong>：通常用于库的函数名。</li>
<li><strong>KEYWORD3</strong>：通常用于常量（如宏定义）。</li>
<li><strong>LITERAL1</strong> 和 <strong>LITERAL2</strong>：用于字面值常量。</li>
</ul>
<table>
<thead>
<tr>
<th><strong>KEYWORD_TOKENTYPE</strong></th>
<th><strong>Use for</strong></th>
<th><strong>Theme property</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>KEYWORD1</code></td>
<td>datatypes</td>
<td><code>editor.data_type.style</code></td>
</tr>
<tr>
<td><code>KEYWORD2</code></td>
<td>functions</td>
<td><code>editor.function.style</code></td>
</tr>
<tr>
<td><code>KEYWORD3</code></td>
<td>structures</td>
<td><code>editor.function.style</code></td>
</tr>
<tr>
<td><code>LITERAL1</code></td>
<td>constants</td>
<td><code>editor.reserved_word_2.style</code></td>
</tr>
<tr>
<td><code>LITERAL2</code></td>
<td>?</td>
<td><code>editor.function.style</code></td>
</tr>
</tbody>
</table>
<h2 id="15-readmemd---说明文档可参考上期">1.5 <strong>README.md</strong> - 说明<strong>文档</strong>（可参考上期）</h2>
<p><code>README.md</code> 是你库的介绍文件，通常包含：</p>
<ul>
<li>如何安装和使用库</li>
<li>库的功能说明</li>
<li>可能的配置选项</li>
<li>示例代码</li>
<li>常见问题解答等</li>
</ul>
<h2 id="16-license---许可证可参考上期">1.6 <strong>LICENSE</strong> - <strong>许可证（可参考上期）</strong></h2>
<p><code>LICENSE</code> 文件用于明确库的使用许可条款，告知用户在使用、修改和分发您的代码时的权利和限制。</p>
<h2 id="17-extras---补充资源目录">1.7 <code>extras/</code> - 补充资源目录</h2>
<p><code>extras</code> 文件夹用于存放与库相关的文档或其他附加项目。Arduino IDE 不会处理 <code>extras</code> 文件夹中的内容，因此您可以根据需要在此文件夹中添加任何文件。</p>
<p><strong>我们 README.md 文件中的图片可以放到该文件夹中</strong></p>
<h1 id="2-将库打包">2. 将库打包</h1>
<p>把以上文件放到一个文件夹中，确保文件夹名称与你的库名称一致。</p>
<p>例如，如果你的库叫 <code>YourLibraryName</code>，那么文件夹的名称应该是 <code>YourLibraryName</code>，里面包含以下文件：</p>
<pre><code class="language-bash">YourLibraryName/
  ├── src/                         // 源代码目录（必须）
  │    ├── YourLibraryName.h       // 头文件
  │    └── YourLibraryName.cpp     // 源文件
  ├── examples/                    // 示例代码目录（可选但推荐）
  │    └── one/                    // 第一个示例代码文件夹
  │        └── one.ino             // 示例代码1
  │    └── two/                    // 第二个示例代码文件夹
  │        └── two.ino             // 示例代码2
  │    └── three/                  // 第三个示例代码文件夹
  │        └── three.ino           // 示例代码3
  ├── library.properties           // 库的元数据文件（必须）
  ├── keywords.txt                 // 语法高亮关键字（可选）
  ├── README.md                    // 文档
  └── LICENSE                      // 许可证
</code></pre>
<p><code>Arduino</code> 库的根文件夹名称必须以基本字母（A-Z 或 a-z）或数字（0-9）开头，可以使用基本字母、数字、下划线（_）、点（.）和破折号（-）。文件夹名最大长度为 63 个字符。</p>
<h1 id="3上传到-github">3.上传到 <code>GitHub</code></h1>
<p>将你的库上传到 <code>GitHub</code>，或者你可以选择其他的代码托管平台。</p>
<p>发布完成之后，就可以填写 <code>url</code>.</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316001820767-1791550680.png" alt="image" loading="lazy"></p>
<h1 id="4创建发布-release-和-标签-tag">4.创建发布 <code>Release</code> 和 标签 <code>Tag</code></h1>
<h2 id="41-在-github-上创建-tag">4.1 在 <code>GitHub</code> 上创建 <code>Tag</code></h2>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316001824647-1552775767.png" alt="image" loading="lazy"></p>
<p>点击 <code>Tag</code> 图标，可以看到不同版本的 Tag 记录：</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316001828115-883464629.png" alt="image" loading="lazy"></p>
<h3 id="411-什么是-tag">4.1.1 什么是 <code>Tag</code></h3>
<p><code>Tag</code> 是 <code>Git</code> 中的一种标记，用于指向某个特定的提交 <code>commit</code>，它通常用于标记重要的版本点（如 <code>v1.0.0</code>）：</p>
<ul>
<li>
<p><strong>类型</strong>：</p>
<ul>
<li><strong>轻量标签Lightweight Tag</strong>：只是一个指向某个提交的指针。</li>
<li><strong>附注标签Annotated Tag</strong>：包含额外的元数据，如标签名称、作者、日期和描述信息。</li>
</ul>
</li>
<li>
<p><strong>用途</strong>：用于标记版本号、里程碑或重要的代码状态。</p>
</li>
</ul>
<h3 id="412-创建步骤">4.1.2 创建步骤</h3>
<p>首先打开 <code>Git Bash</code>，创建带注释的 <code>Tag</code>（通常用于版本发布）：</p>
<pre><code class="language-bash">git tag -a v1.0.0 -m "First stable release"
</code></pre>
<ul>
<li><code>-a v1.0.0</code>：指定标签名称（例如 <code>v1.0.0</code>）。</li>
<li><code>-m "First stable release"</code>：为标签添加描述信息。</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316001839506-2123353426.png" alt="image" loading="lazy"></p>
<p><strong>查看所有Tags</strong>：</p>
<pre><code class="language-bash">git tag
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316001843063-1783116972.png" alt="image" loading="lazy"></p>
<p>创建 <code>Tag</code> 后，必须将其推送到 <code>GitHub</code> 才能让其他人看到。</p>
<p>推送单个 <code>Tag</code>：</p>
<pre><code class="language-bash">git push origin v1.0.0
</code></pre>
<p>推送所有本地的 <code>Tags</code>：</p>
<pre><code class="language-bash">git push origin --tags
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316001955762-1590643341.png" alt="image" loading="lazy"></p>
<p>然后就可以在 <code>Github</code> 仓库中，就可以看到提交的 <code>Tag</code> 了：</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316001958892-90794788.png" alt="image" loading="lazy"></p>
<h2 id="42-创建发布-release">4.2 创建发布 <code>release</code></h2>
<h3 id="421-什么是-release">4.2.1 什么是 <code>release</code></h3>
<p><code>Release</code> 是 <code>GitHub</code> 提供的一个功能，基于 <code>Tag</code> 创建，用于发布软件的特定版本。</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316002006975-1976325935.png" alt="image" loading="lazy"></p>
<p>它可以包含一个 <code>Tag</code>、版本描述（如新特性、修复的 Bug）、附加的文件（如编译好的二进制文件、安装包）等，<strong>主要</strong>用于正式发布软件的版本，方便用户下载和使用。</p>
<p><strong>注意：Release 必须基于一个 Tag。没有 Tag，就无法创建 Release。可以理解为Release 是对 Tag 的扩展，提供了更丰富的功能（如版本描述、附加文件）。</strong></p>
<p>在使用场景上，<strong>Tag</strong> 适合标记内部开发中的版本或里程碑，而 <strong>Release</strong> 适合正式发布版本，供用户下载和使用。</p>
<h3 id="422-发布步骤">4.2.2 发布步骤</h3>
<p><strong>访问你的 <strong><strong>GitHub</strong></strong> 仓库</strong>，在仓库的页面中，点击上方的 <strong>"<strong><strong>Releases</strong></strong>"</strong> 标签。</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316002017187-1513367478.png" alt="image" loading="lazy"></p>
<p>在 <code>Releases</code> 页面上，点击 <strong>"<strong><strong>Draft a new release</strong></strong>"</strong> 按钮。</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316002021217-244395017.png" alt="image" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316002024869-98526609.png" alt="image" loading="lazy"></p>
<p><strong>选择 Tag</strong>：</p>
<ul>
<li>在 <strong>"<strong><strong>Tag version</strong></strong>"</strong> 字段中，选择之前创建的 <code>Tag</code>（例如，<code>v1.0.0</code>）。如果你还没有创建 <code>Tag</code>，可以在这里创建新的 <code>Tag</code>。</li>
<li>如果需要，可以点击 <strong>"<strong><strong>Create new tag</strong></strong>"</strong> 并为其指定版本号（例如 <code>v1.0.1</code>）。</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316002250709-1530123908.png" alt="image" loading="lazy"></p>
<p><strong>填写 Release 信息</strong>：</p>
<ul>
<li><strong>Release title</strong>：为发布版本提供一个标题（例如 <code>Version 1.0.0 - First Stable Release</code>）。</li>
<li><strong>Description</strong>：在描述框中添加该版本的详细说明，包括新特性、已修复的 bug 或任何变更。</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316002302115-1782533308.png" alt="image" loading="lazy"></p>
<p><strong>附加文件（可选）</strong>：</p>
<ul>
<li>你可以上传附加的二进制文件、构建文件或源代码的压缩包。</li>
<li>点击 <strong>"<strong><strong>Attach binaries by dropping them here or selecting them</strong></strong>"</strong>，选择文件进行上传。</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316002305471-1060817539.png" alt="image" loading="lazy"></p>
<p><strong>发布Release</strong>：</p>
<ul>
<li>选择发布方式：
<ul>
<li><strong>Pre-release</strong>：如果这个版本还不稳定，可以选择勾选 "<code>This is a pre-release</code>" 选项，表示它是一个预发布版本。</li>
<li>如果版本已经稳定，直接点击 <strong>"<strong><strong>Publish release</strong></strong>"</strong> 按钮。</li>
</ul>
</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316002310266-789090102.png" alt="image" loading="lazy"></p>
<h1 id="5提交到-arduino-库管理器">5.提交到 <code>Arduino</code> 库管理器</h1>
<h2 id="51fork-arduino-library-registry">5.1<strong>Fork Arduino Library Registry</strong></h2>
<p><strong>访问 Arduino 库注册页面</strong><br>
打开 <a href="https://github.com/arduino/library-registry/fork" target="_blank" rel="noopener nofollow">Arduino Library Registry GitHub 页面</a>。</p>
<p><strong>Fork仓库</strong><br>
在页面上，你会看到 <strong>"Create a new fork"</strong> 按钮。点击该按钮，<code>GitHub</code> 会开始创建一个库的副本，这样你可以对其进行修改。</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316002539680-1721805833.png" alt="image" loading="lazy"></p>
<p><strong>等待Fork完成</strong><br>
在 "<code>Forking arduino/library-registry</code>" 页面上，<code>GitHub</code> 会显示一个进度条，表示正在进行 <code>Fork</code> 操作。等到 <code>Fork</code> 完成后，<code>GitHub</code> 会自动跳转到你自己的仓库主页：</p>
<p><a href="https://github.com/leezisheng/library-registry" target="_blank" rel="noopener nofollow">https://github.com/leezisheng/library-registry</a></p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316002545284-1968144425.png" alt="image" loading="lazy"></p>
<h2 id="52-编辑repositoriestxt">5.2 <strong>编辑repositories.txt</strong></h2>
<p><strong>访问 repositories.txt 文件</strong><br>
在你的 <code>Fork</code> 仓库主页中，找到 <strong>repositories.txt</strong> 文件。这个文件记录了所有已提交到 <code>Library Manager</code> 的库的仓库地址。点击这个文件名进入文件内容页面。</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316002621146-747897819.png" alt="image" loading="lazy"></p>
<p><strong>编辑 repositories.txt 文件</strong><br>
在 <strong>repositories.txt</strong> 文件页面中，点击右上角的铅笔图标（<strong>"<strong><strong>Edit this file</strong></strong>"</strong>）进入编辑模式。</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316002627084-643892981.png" alt="image" loading="lazy"></p>
<p><strong>添加你的库的 URL</strong><br>
在编辑器中，将你的库的 <code>GitHub</code> 仓库 <code>URL</code> 添加到列表中。你可以将 <code>URL</code> 添加到列表的任何位置。示例 <code>URL</code> 格式如下：</p>
<p><a href="https://github.com/yourusername/your-library" target="_blank" rel="noopener nofollow">https://github.com/yourusername/your-library</a></p>
<p>确保这个 <code>URL</code> 是你库的 <code>GitHub</code> 仓库首页链接。</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316002640323-2009996223.png" alt="image" loading="lazy"></p>
<p><strong>提交修改</strong><br>
编辑完成后，点击页面顶部的 <strong>Commit changes...</strong> 按钮。提交框会打开，你可以在这里为你的提交输入描述信息。输入描述后，点击 <strong>Commit changes</strong> 完成提交。</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316002645494-312504375.png" alt="image" loading="lazy"></p>
<h2 id="53-提交pull-request">5.3 <strong>提交Pull Request</strong></h2>
<p><strong>返回你的 Fork 仓库首页</strong></p>
<p>提交更改后，你会回到 <strong>repositories.txt</strong> 文件页面。此时你会看到一个提醒，表示你在这个分支上做了修改：“<code>This branch is 1 commit ahead of arduino:main</code>”。<br>
<img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316002654031-237984408.png" alt="image" loading="lazy"></p>
<p><strong>打开 Pull Request</strong></p>
<p>点击页面顶部的 <strong>Contribute</strong> 按钮，然后选择 <strong>Open pull request</strong>。这会打开创建 <code>Pull Request</code> 的页面。</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316002659002-112285474.png" alt="image" loading="lazy"></p>
<p><strong>填写 Pull Request 信息</strong></p>
<p>在 <code>Pull Request</code> 页面中，填写适当的标题和描述，说明你所做的更改。</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316002703792-1923761912.png" alt="image" loading="lazy"></p>
<p><strong>创建 Pull Request</strong></p>
<p>点击 <strong>Create pull request</strong> 按钮提交。这样，<code>Arduino</code> 的库管理系统将自动检查你提交的库是否符合要求。如果没有问题，<code>Pull Request</code> 会被合并，并且你的库将在一天内可通过 <code>Library Manager</code> 安装。</p>
<h2 id="54-处理检查结果和错误">5.4 <strong>处理检查结果和错误</strong></h2>
<p><strong>自动检查</strong></p>
<p>一旦你提交了 <code>Pull Request</code>，<code>Arduino</code> 的自动检查系统将开始检查你库的合规性。检查会包括库的结构、<code>library.properties</code> 文件的格式、版本号、文档等。</p>
<p><strong>检查失败或有问题的情况</strong></p>
<p><strong>如果 Pull Request 本身有问题</strong>，机器人会在 <code>Pull Request</code> 中留言，告知你需要修改的地方。你可以通过编辑你 Fork 仓库中的文件并提交更新来解决问题。</p>
<p><strong>如果库本身有问题</strong>，你需要在你库的 GitHub 仓库中进行修复，更新 <code>library.properties</code> 文件中的版本号，并确保该库有一个有效的 <strong>Release</strong> 或 <strong>Tag</strong>（具体要求见下文）。修复后，重新创建一个 <code>Release</code> 或 <code>Tag</code>，并通知 <code>ArduinoBot</code> 来触发自动检查。</p>
<p><strong>解决问题后重新提交</strong></p>
<p><strong>如果是 Pull Request 的问题</strong>，修改完毕后，提交新的修改，自动检查会重新运行。</p>
<p><strong>如果是库本身的问题</strong>，完成修复并更新版本后，创建新的 <code>Release</code> 或 <code>Tag</code>，并通知 <code>ArduinoBot</code>，这样检查将重新进行。</p>
<p><strong>重新提交并通过审核</strong></p>
<p>只要检查通过，<code>Pull Request</code> 会被合并，你的库将在一天内通过 <code>Library Manager</code> 提供给全体用户。</p>
<p><a href="https://github.com/arduino/library-registry/pull/5863" target="_blank" rel="noopener nofollow">https://github.com/arduino/library-registry/pull/5863</a></p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316002716351-1629727551.png" alt="image" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316002720849-1415683819.png" alt="image" loading="lazy"></p>
<p>我们也可以在库管理器索引器查看库的日志：</p>
<p><a href="http://downloads.arduino.cc/libraries/logs/github.com/leezisheng/SerialServo/" target="_blank" rel="noopener nofollow">http://downloads.arduino.cc/libraries/logs/github.com/leezisheng/SerialServo/</a></p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316002726408-28232172.png" alt="image" loading="lazy"></p>
<h2 id="55-在-arduino-中进行验证">5.5 在 <code>Arduino</code> 中进行验证</h2>
<p><strong>然后就是在库版本管理器中搜索：</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316002729913-784789939.png" alt="image" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250316002733380-2100462706.png" alt="image" loading="lazy"></p>
<h1 id="参考">参考</h1>
<p><a href="https://zhuanlan.zhihu.com/p/389718578" target="_blank" rel="noopener nofollow">https://zhuanlan.zhihu.com/p/389718578</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.0616929415636573" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-16 00:50">2025-03-16 00:49</span>&nbsp;
<a href="https://www.cnblogs.com/FreakEmbedded">FreakStudio</a>&nbsp;
阅读(<span id="post_view_count">59</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18774455" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18774455);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18774455', targetLink: 'https://www.cnblogs.com/FreakEmbedded/p/18774455', title: '三分钟教学：手把手教你实现Arduino发布第三方库' })">举报</a>
</div>
        