
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/noear/p/18990912" title="发布于 2025-07-18 09:23">
    <span role="heading" aria-level="2">Solon Flow v3.4.0 轻量级流程编排框架</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        Solon Flow是一个轻量级流程编排框架，支持YAML/JSON扁平式编排格式，提供无状态和有状态两种流程模式。无状态流程适用于计算任务、业务规则处理；有状态流程支持审批型、长时流程场景。框架提供可视化设计器，兼容Java8-24及主流框架集成。最新版本优化了状态管理概念，拆分StateType和Operation类型，调整了服务接口命名。特色功能包括简洁的扁平配置、灵活的表达式、元数据扩展支持、事件广播回调机制，以及可定制的流程驱动引擎。示例展示了如何通过配置实现流程编排、条件判断和任务处理，体现了框
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>Solon Flow 是一个轻量级流程编排框架（采用 yaml 或 json 偏平式编排格式）</p>
<ul>
<li>支持无状态流程
<ul>
<li>可用于计算（或任务）的编排场景</li>
<li>可用于业务规则和决策处理型的编排场景</li>
</ul>
</li>
<li>支持有状态流程
<ul>
<li>可用于办公审批型（有状态、可中断，人员参与）的编排场景</li>
<li>可用于长时间流程（结合自动前进，等待介入）的编排场景</li>
</ul>
</li>
</ul>
<p>有可视化的设计器：</p>
<ul>
<li><a href="https://solon.noear.org/flow/designer/" target="_blank" rel="noopener nofollow">https://solon.noear.org/flow/designer/</a></li>
</ul>
<p>嵌入第三方框架的示例：</p>
<ul>
<li><a href="https://gitee.com/solonlab/solon-flow-embedded-examples" target="_blank" rel="noopener nofollow">https://gitee.com/solonlab/solon-flow-embedded-examples</a></li>
<li><a href="https://gitcode.com/solonlab/solon-flow-embedded-examples" target="_blank" rel="noopener nofollow">https://gitcode.com/solonlab/solon-flow-embedded-examples</a></li>
<li><a href="https://github.com/solonlab/solon-flow-embedded-examples" target="_blank" rel="noopener nofollow">https://github.com/solonlab/solon-flow-embedded-examples</a></li>
</ul>
<p>同时兼容 java8 ~ java24。也可嵌入到 SpringBoot、jFinal、Vert.x 等框架中使用。</p>
<h2 id="一最近更新了什么">一、最近更新了什么？</h2>
<ul>
<li>调整 solon-flow stateful 相关概念（提交活动状态，改为提交操作）</li>
<li>调整 solon-flow StateType 拆分为：StateType 和 Operation</li>
<li>调整 solon-flow StatefulFlowEngine:postActivityState 更名为 postOperation</li>
<li>调整 solon-flow StatefulFlowEngine:postActivityStateIfWaiting 更名为 postOperationIfWaiting</li>
<li>调整 solon-flow StatefulFlowEngine:getActivity 更名为 getTask</li>
<li>调整 solon-flow StatefulFlowEngine:getActivitys 更名为 getTasks</li>
<li>调整 solon-flow StatefulFlowEngine 更名为 FlowStatefulService（确保引擎的单一性）</li>
<li>添加 solon-flow FlowStatefulService 接口，替换 StatefulFlowEngine（确保引擎的单一性）</li>
<li>添加 solon-flow <code>FlowEngine:statefulService()</code> 方法</li>
<li>添加 solon-flow <code>FlowEngine:getDriverAs()</code> 方法</li>
</ul>
<p>方法名称调整：</p>
<table>
<thead>
<tr>
<th>旧方法</th>
<th>新方法</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>getActivityNodes</code></td>
<td><code>getTasks</code></td>
<td></td>
</tr>
<tr>
<td><code>getActivityNode</code></td>
<td><code>getTask</code></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>postActivityStateIfWaiting</code></td>
<td><code>postOperationIfWaiting</code></td>
<td></td>
</tr>
<tr>
<td><code>postActivityState</code></td>
<td><code>postOperation</code></td>
<td></td>
</tr>
</tbody>
</table>
<p>状态类型拆解后的对应关系（之前状态与操作混一起，不合理）</p>
<table>
<thead>
<tr>
<th>StateType(旧)</th>
<th>StateType(新)</th>
<th>Operation(新)</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>UNKNOWN(0)</code></td>
<td><code>UNKNOWN(0)</code></td>
<td><code>UNKNOWN(0)</code></td>
</tr>
<tr>
<td><code>WAITING(1001)</code></td>
<td><code>WAITING(1001)</code></td>
<td><code>BACK(1001)</code></td>
</tr>
<tr>
<td><code>COMPLETED(1002)</code></td>
<td><code>COMPLETED(1002)</code></td>
<td><code>FORWARD(1002)</code></td>
</tr>
<tr>
<td><code>TERMINATED(1003)</code></td>
<td><code>TERMINATED(1003)</code></td>
<td><code>TERMINATED(1003)</code></td>
</tr>
<tr>
<td><code>RETURNED(1004)</code></td>
<td></td>
<td><code>BACK(1001)</code></td>
</tr>
<tr>
<td><code>RESTART(1005)</code></td>
<td></td>
<td><code>RESTART(1004)</code></td>
</tr>
</tbody>
</table>
<h2 id="二特色展示">二、特色展示</h2>
<h3 id="1采用-yaml-或-json-偏平式编排格式">1、采用 yaml 或 json 偏平式编排格式</h3>
<p>偏平式编排，没有深度结构（所有节点平铺，使用 link 描述连接关系）。配置简洁，关系清晰</p>
<pre><code class="language-yaml"># c1.yml
id: "c1"
layout: 
  - { id: "n1", type: "start", link: "n2"}
  - { id: "n2", type: "activity", link: "n3"}
  - { id: "n3", type: "end"}
</code></pre>
<p>还支持简化模式（能自动推断的，都会自动处理），具体参考相关说明</p>
<pre><code class="language-yaml"># c1.yml
id: "c1"
layout: 
  - { type: "start"}
  - { task: ""}
  - { type: "end"}
</code></pre>
<h3 id="2表达式与脚本自由">2、表达式与脚本自由</h3>
<pre><code class="language-yaml"># c2.yml
id: "c2"
layout: 
  - { type: "start"}
  - { when: "order.getAmount() &gt;= 100", task: "order.setScore(0);"}
  - { when: "order.getAmount() &gt; 100 &amp;&amp; order.getAmount() &lt;= 500", task: "order.setScore(100);"}
  - { when: "order.getAmount() &gt; 500 &amp;&amp; order.getAmount() &lt;= 1000", task: "order.setScore(500);"}
  - { type: "end"}
</code></pre>
<h3 id="3元数据配置为扩展提供了无限空间">3、元数据配置，为扩展提供了无限空间</h3>
<p>元数据主要有两个作用：（1）为任务运行提供配置支持（2）为视图编辑提供配置支持</p>
<pre><code class="language-yaml"># c3.yml
id: "c3"
layout: 
  - { id: "n1", type: "start", link: "n2"}
  - { id: "n2", type: "activity", link: "n3", meta: {cc: "demo@noear.org"}, task: "@MetaProcessCom"}
  - { id: "n3", type: "end"}
</code></pre>
<p>通过组件方式，实现元数据的抄送配置效果</p>
<pre><code class="language-java">@Component("MetaProcessCom")
public class MetaProcessCom implements TaskComponent {
    @Override
    public void run(FlowContext context, Node node) throws Throwable {
       String cc = node.getMeta("cc");
       if(Utils.isNotEmpty(cc)){
           //发送邮件...
       }
    }
}
</code></pre>
<h3 id="4事件广播与回调支持">4、事件广播与回调支持</h3>
<p>广播（即只需要发送），回调（即发送后要求给答复）</p>
<pre><code class="language-yaml">id: f4
layout:
  - task: |
      //只发送
      context.&lt;String,String&gt;eventBus().send("demo.topic", "hello");  //支持泛型（类型按需指定，不指定时为 object）
  - task: |
      //发送并要求响应（就是要给答复）
      String rst = context.&lt;String,String&gt;eventBus().sendAndRequest("demo.topic.get", "hello");
      System.out.println(rst);
</code></pre>
<h3 id="5支持无状态有状态两种应用">5、支持无状态、有状态两种应用</h3>
<p>支持丰富的应用场景：</p>
<ul>
<li>无状态流程
<ul>
<li>可用于计算（或任务）的编排场景</li>
<li>可用于业务规则和决策处理型的编排场景</li>
</ul>
</li>
<li>有状态流程
<ul>
<li>可用于办公审批型（有状态、可中断，人员参与）的编排场景</li>
<li>可用于长时间流程（结合自动前进，等待介入）的编排场景</li>
</ul>
</li>
</ul>
<p>自身也相当于一个低代码的运行引擎（单个配置文件，也可满足所有的执行需求）。</p>
<h3 id="6驱动定制是像-jdbc-有-mysql-postgresql还可能有-elasticsearch">6、驱动定制（是像 JDBC 有 MySql, PostgreSQL，还可能有 Elasticsearch）</h3>
<p>这是一个定制后的，支持基于有状态驱动的流程引擎效果（比如支持行政审批）。</p>
<pre><code class="language-java">FlowEngine flowEngine = FlowEngine.newInstance(StatefulSimpleFlowDriver.builder()
                .stateOperator(new MetaStateOperator("actor"))
                .stateRepository(new InMemoryStateRepository())
                .build());
FlowStatefulService statefulService =  flowEngine.statefulService();
                
var context = new FlowContext("i1").put("actor", "陈鑫");

//获取上下文用户的任务
var task = statefulService.getTask("f1", context);

assert "step2".equals(task.getNode().getId());
assert StateType.UNKNOWN == task.getState(); //没有权限启动任务（因为没有配置操作员）

//提交操作
statefulService.postOperation(context, task.getNode(), Operation.COMPLETED);
</code></pre>
<p>流程配置样例：</p>
<pre><code class="language-yaml">id: f1
layout:
  - {id: step1, title: "发起审批", type: "start"}
  - {id: step2, title: "抄送", meta: {cc: "吕方"}, task: "@OaMetaProcessCom"}
  - {id: step3, title: "审批", meta: {actor: "陈鑫", cc: "吕方"}, task: "@OaMetaProcessCom"}
  - {id: step4, title: "审批", type: "parallel", link: [step4_1, step4_2]}
  - {id: step4_1, meta: {actor: "陈宇"}, link: step4_end}
  - {id: step4_2, meta: {actor: "吕方"}, link: step4_end}
  - {id: step4_end, type: "parallel"}
  - {id: step5, title: "抄送", meta: {cc: "吕方"}, task: "@OaMetaProcessCom"}
  - {id: step6, title: "结束", type: "end"}
</code></pre>
<p>对于驱动器的定制，我们还可以：定制（或选择）不同的脚本执行器、组件容器实现等。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-18 09:23">2025-07-18 09:23</span>&nbsp;
<a href="https://www.cnblogs.com/noear">带刺的坐椅</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18990912);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18990912', targetLink: 'https://www.cnblogs.com/noear/p/18990912', title: 'Solon Flow v3.4.0 轻量级流程编排框架' })">举报</a>
</div>
        