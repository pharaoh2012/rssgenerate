
    <a name="top"></a>
    <h2><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/jyzhao/p/18751798/shi-fou-you-bi-yao-shi-yong-oracle-xiang-liang-shu" title="发布于 2025-03-05 00:04">
    <span role="heading" aria-level="2">是否有必要使用 Oracle 向量数据库？</span>
    

</a>
</h2>
    <small>
<span id="post-date" data-last-update-days="0.3753024662280093" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-05 00:05">2025-03-05 00:04</span>&nbsp;
<a href="https://www.cnblogs.com/jyzhao">AlfredZhao</a>&nbsp;
阅读(<span id="post_view_count">10</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18751798" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18751798);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18751798', targetLink: 'https://www.cnblogs.com/jyzhao/p/18751798/shi-fou-you-bi-yao-shi-yong-oracle-xiang-liang-shu', title: '是否有必要使用 Oracle 向量数据库？' })">举报</a>
</small>
    <div class="entry">
        <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>向量数据库最主要的特点是让传统的只能基于具体值/关键字的数据检索，进化到了可以直接基于语义的数据检索。这在AI时代至关重要！</p>
</blockquote>
<p>回到标题问题：是否有必要使用 Oracle 向量数据库？</p>
<p>这实际还要取决于你的具体应用需求。<br>
<img src="https://img2023.cnblogs.com/blog/635610/202503/635610-20250305000444733-2005723306.png" alt="diy-logo-vector" loading="lazy"></p>
<p>客观来讲，Oracle 23ai 及其向量数据库功能在企业级应用中有一定优势，特别是在与现有 Oracle 生态整合时。以下是几个考虑点：</p>
<p>✅ 适用 Oracle 向量数据库的场景：</p>
<ul>
<li>已有 Oracle 生态：如果你的数据已经存储在 Oracle Database，直接使用 Oracle 的向量功能（如 AI Vector Search）可以减少系统复杂度，避免额外的数据 ETL 操作。</li>
<li>混合查询（向量 + 关系型数据）：Oracle 支持 向量搜索 + 传统 SQL 查询 的混合模式，适合 企业级 BI、数据分析、AI 赋能的业务应用。</li>
<li>高可用性 &amp; 安全性：Oracle 具备企业级的 数据安全、事务处理、可扩展性，相比一些开源向量数据库更可靠。</li>
<li>Exadata / ExaCC 加持：如果你的数据库运行在 Exadata 或 ExaCC，Oracle 的向量查询性能更优。</li>
</ul>
<p>后面笔者工作需要，将测试下Oracle数据库的Vector能力，也会不定期分享。</p>
<p>在此之前，肯定会有不太熟悉Oracle发展的小伙伴会困惑，怎么感觉Oracle是老牌的关系型数据库，咋啥时候成了向量数据库？</p>
<p>答案是，Oracle是多模（Multi-model）数据库，主流模型都支持，早已不单是传统的关系型。</p>
<p>如果你去业界公认的 db-engines 查数据库排名，那么Complete ranking一直都是Oracle没疑问，但是在细分领域，Oracle也OK吗？</p>
<ul>
<li><a href="https://db-engines.com/en/ranking" target="_blank" rel="noopener nofollow">https://db-engines.com/en/ranking</a></li>
</ul>
<p>从下图可以看到，DB综合排名Oracle一直还是第一位：<br>
<img src="https://img2023.cnblogs.com/blog/635610/202503/635610-20250305000439471-1891915879.png" alt="DB-Engines Ranking of Vector DBMS-complete-top15" loading="lazy"></p>
<p>那么继续查询下 Vector DBMS的排名：</p>
<ul>
<li><a href="https://db-engines.com/en/ranking/vector+dbms" target="_blank" rel="noopener nofollow">https://db-engines.com/en/ranking/vector+dbms</a></li>
</ul>
<p>向量数据库排名：DB-Engines Ranking of Vector DBMS<br>
<img src="https://img2023.cnblogs.com/blog/635610/202503/635610-20250305000439784-1586974711.png" alt="DB-Engines Ranking of Vector DBMS" loading="lazy"></p>
<p>咦？默认老大是ES（Elasticsearch）？貌似没有看到Oracle的身影？<br>
别着急，这是因为默认未考虑到多模态，勾选上 <code>include secondary database models</code>，你会发现ES直接下滑到第五位，Oracle又出现在了榜首：<br>
<img src="https://img2023.cnblogs.com/blog/635610/202503/635610-20250305000439483-1192837785.png" alt="DB-Engines Ranking of Vector DBMS-2" loading="lazy"></p>
<p>其实Oracle早已是多模（Multi-model）数据库，除了最近AI时代很火的向量数据库之外，其他相对常见的比如文档数据库、图数据库、空间数据库，甚至不算常见的RDF全部都支持。</p>
<p>如果去细分领域默认查询，提到 Document stores 你可能首先想到的是 MongoDB；提到 Graph DBMS 你可能首先想到的是图数据库 Neo4j，提到Spatial DBMS，你首先想到的是空间数据 PostGIS。但是你只要把这个 <code>include secondary database models</code> 勾选上，就会发现Oracle已经全部支持这些类型的DB，并处于领先地位。</p>
<p>所以，如果是企业级应用，比如 AI 赋能业务、BI 分析、数据库增强搜索，且你本身就有用到 Oracle 数据库，站在纯技术角度考量，在 Oracle 基础上继续扩展更多的可能场景，是个比较省心省力的选择。</p>
<p>但这也要求企业中的Oracle DBA能够不断扩展自己的技能，拥抱新技术，勇于承担新时代下的挑战。</p>
<p>不可停留在固有的认知上，那个曾经连大对象（LOB）都不允许存到库中的宝贵经验，在这个AI新时代的背景下，恐怕早已经过时了。</p>
<p>此外，在AI时代下，我们不得不面临的一个惨痛现状是，传统意义上的纯运维管理DBA，即便是资深级别，路也会越来越窄了。</p>
<p>但路在脚下，未来也还长，主动拥抱变化，允许一切发生，一起加油突破自己吧！共勉~</p>

</div>
<div id="MySignature" role="contentinfo">
    AlfredZhao©版权所有「从Oracle起航，领略精彩的IT技术。」
</div>
<div class="clear"></div>

        <div class="clear"></div>
        
</div>
    <ul class="postmetadata">
        <vc:categories-tags blog-app="jyzhao" blog-id="186567" post-id="18751798"></vc:categories-tags>
    </ul>
