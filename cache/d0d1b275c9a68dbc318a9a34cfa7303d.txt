
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/sun-10387834/p/18914335" title="发布于 2025-06-06 16:49">
    <span role="heading" aria-level="2">【非对称加密】详解及Java实现</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="非对称加密详解及java实现">非对称加密详解及Java实现</h1>
<h2 id="一非对称加密概述">一、非对称加密概述</h2>
<p>非对称加密（Asymmetric Cryptography），也称为公钥加密，是一种使用一对密钥（公钥和私钥）进行加密和解密的加密方法。它与对称加密的主要区别在于使用了不同的密钥进行加密和解密操作。</p>
<h3 id="核心特点">核心特点：</h3>
<ol>
<li><strong>密钥成对出现</strong>：公钥(Public Key)和私钥(Private Key)</li>
<li><strong>公钥可公开</strong>，私钥必须严格保密</li>
<li><strong>加密解密方向性</strong>：
<ul>
<li>公钥加密 → 私钥解密（用于加密通信）</li>
<li>私钥加密 → 公钥解密（用于数字签名）</li>
</ul>
</li>
<li><strong>计算复杂度高</strong>，速度比对称加密慢很多</li>
</ol>
<h3 id="常见算法">常见算法：</h3>
<ul>
<li>RSA（最常用）</li>
<li>DSA（主要用于数字签名）</li>
<li>ECC（椭圆曲线加密）</li>
<li>ElGamal</li>
<li>Diffie-Hellman（密钥交换）</li>
</ul>
<h2 id="二rsa算法原理">二、RSA算法原理</h2>
<p>RSA是最经典的非对称加密算法，由Ron Rivest、Adi Shamir和Leonard Adleman于1977年提出。</p>
<h3 id="密钥生成步骤">密钥生成步骤：</h3>
<ol>
<li>选择两个大素数p和q</li>
<li>计算n = p × q</li>
<li>计算欧拉函数φ(n) = (p-1)(q-1)</li>
<li>选择整数e，使得1 &lt; e &lt; φ(n)且e与φ(n)互质</li>
<li>计算d，使得d × e ≡ 1 mod φ(n)</li>
<li>公钥：(e, n)，私钥：(d, n)</li>
</ol>
<h3 id="加密解密过程">加密解密过程：</h3>
<ul>
<li>加密：c ≡ m^e mod n</li>
<li>解密：m ≡ c^d mod n</li>
</ul>
<h2 id="三java实现rsa加密">三、Java实现RSA加密</h2>
<h3 id="1-密钥对生成">1. 密钥对生成</h3>
<pre><code class="language-java">import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;

public class RSAKeyGenerator {
    public static void main(String[] args) {
        try {
            // 1. 创建KeyPairGenerator实例，指定算法为RSA
            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
            
            // 2. 初始化密钥长度，通常为1024、2048或4096位
            // 密钥越长越安全，但计算速度越慢
            keyPairGenerator.initialize(2048);
            
            // 3. 生成密钥对
            KeyPair keyPair = keyPairGenerator.generateKeyPair();
            
            // 4. 获取公钥和私钥
            System.out.println("Public Key: " + keyPair.getPublic());
            System.out.println("Private Key: " + keyPair.getPrivate());
            
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
}
</code></pre>
<p><strong>代码解释</strong>：</p>
<ul>
<li><code>KeyPairGenerator</code> 是Java中用于生成非对称密钥对的类</li>
<li><code>initialize(2048)</code> 指定密钥长度为2048位（目前推荐的最小安全长度）</li>
<li>生成的<code>KeyPair</code>包含公钥和私钥</li>
</ul>
<h3 id="2-rsa加密解密实现">2. RSA加密解密实现</h3>
<pre><code class="language-java">import javax.crypto.Cipher;
import java.security.*;
import java.util.Base64;

public class RSAEncryptionExample {
    public static void main(String[] args) throws Exception {
        // 1. 生成RSA密钥对
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        keyPairGenerator.initialize(2048);
        KeyPair keyPair = keyPairGenerator.generateKeyPair();
        
        // 获取公钥和私钥
        PublicKey publicKey = keyPair.getPublic();
        PrivateKey privateKey = keyPair.getPrivate();
        
        // 原始消息
        String originalMessage = "这是一条需要加密的敏感信息";
        System.out.println("原始消息: " + originalMessage);
        
        // 2. 使用公钥加密
        Cipher encryptCipher = Cipher.getInstance("RSA");
        encryptCipher.init(Cipher.ENCRYPT_MODE, publicKey);
        
        byte[] encryptedBytes = encryptCipher.doFinal(originalMessage.getBytes());
        String encryptedMessage = Base64.getEncoder().encodeToString(encryptedBytes);
        System.out.println("加密后的消息: " + encryptedMessage);
        
        // 3. 使用私钥解密
        Cipher decryptCipher = Cipher.getInstance("RSA");
        decryptCipher.init(Cipher.DECRYPT_MODE, privateKey);
        
        byte[] decryptedBytes = decryptCipher.doFinal(Base64.getDecoder().decode(encryptedMessage));
        String decryptedMessage = new String(decryptedBytes);
        System.out.println("解密后的消息: " + decryptedMessage);
    }
}
</code></pre>
<p><strong>代码解释</strong>：</p>
<ol>
<li>使用<code>Cipher</code>类进行加密解密操作</li>
<li><code>ENCRYPT_MODE</code>表示加密模式，使用公钥初始化</li>
<li><code>DECRYPT_MODE</code>表示解密模式，使用私钥初始化</li>
<li>由于加密后的字节数组不易显示，使用Base64编码转换为字符串</li>
<li>RSA加密有长度限制，加密的数据长度不能超过密钥长度减去一定的padding长度</li>
</ol>
<h3 id="3-处理长文本加密">3. 处理长文本加密</h3>
<p>由于RSA加密有长度限制，对于长文本需要分段加密：</p>
<pre><code class="language-java">import javax.crypto.Cipher;
import java.security.*;
import java.util.Base64;

public class RSALongTextEncryption {
    private static final int KEY_SIZE = 2048;
    private static final int MAX_ENCRYPT_BLOCK = KEY_SIZE / 8 - 11; // 加密块最大长度
    
    public static void main(String[] args) throws Exception {
        // 生成密钥对
        KeyPair keyPair = generateKeyPair();
        PublicKey publicKey = keyPair.getPublic();
        PrivateKey privateKey = keyPair.getPrivate();
        
        // 长文本
        StringBuilder longText = new StringBuilder();
        for (int i = 0; i &lt; 100; i++) {
            longText.append("这是一段非常长的文本，需要进行分段加密处理。");
        }
        
        // 加密
        byte[] encryptedData = encryptLongText(longText.toString(), publicKey);
        String encryptedBase64 = Base64.getEncoder().encodeToString(encryptedData);
        System.out.println("加密后长度: " + encryptedBase64.length());
        
        // 解密
        String decryptedText = decryptLongText(Base64.getDecoder().decode(encryptedBase64), privateKey);
        System.out.println("解密是否成功: " + longText.toString().equals(decryptedText));
    }
    
    public static KeyPair generateKeyPair() throws NoSuchAlgorithmException {
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        keyPairGenerator.initialize(KEY_SIZE);
        return keyPairGenerator.generateKeyPair();
    }
    
    public static byte[] encryptLongText(String data, PublicKey publicKey) throws Exception {
        Cipher cipher = Cipher.getInstance("RSA");
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        
        byte[] dataBytes = data.getBytes();
        int inputLen = dataBytes.length;
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        int offSet = 0;
        byte[] cache;
        int i = 0;
        
        // 对数据分段加密
        while (inputLen - offSet &gt; 0) {
            if (inputLen - offSet &gt; MAX_ENCRYPT_BLOCK) {
                cache = cipher.doFinal(dataBytes, offSet, MAX_ENCRYPT_BLOCK);
            } else {
                cache = cipher.doFinal(dataBytes, offSet, inputLen - offSet);
            }
            out.write(cache, 0, cache.length);
            i++;
            offSet = i * MAX_ENCRYPT_BLOCK;
        }
        return out.toByteArray();
    }
    
    public static String decryptLongText(byte[] encryptedData, PrivateKey privateKey) throws Exception {
        Cipher cipher = Cipher.getInstance("RSA");
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        
        int inputLen = encryptedData.length;
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        int offSet = 0;
        byte[] cache;
        int i = 0;
        int blockSize = KEY_SIZE / 8; // 解密块大小
        
        // 对数据分段解密
        while (inputLen - offSet &gt; 0) {
            if (inputLen - offSet &gt; blockSize) {
                cache = cipher.doFinal(encryptedData, offSet, blockSize);
            } else {
                cache = cipher.doFinal(encryptedData, offSet, inputLen - offSet);
            }
            out.write(cache, 0, cache.length);
            i++;
            offSet = i * blockSize;
        }
        return out.toString();
    }
}
</code></pre>
<p><strong>关键点</strong>：</p>
<ol>
<li>2048位RSA密钥最大加密块为245字节（2048/8-11）</li>
<li>解密块大小为256字节（2048/8）</li>
<li>使用<code>ByteArrayOutputStream</code>收集所有加密/解密后的分段数据</li>
</ol>
<h2 id="四数字签名">四、数字签名</h2>
<p>非对称加密还可用于数字签名，验证数据完整性和身份认证。</p>
<h3 id="java实现数字签名">Java实现数字签名</h3>
<pre><code class="language-java">import java.security.*;
import java.util.Base64;

public class DigitalSignatureExample {
    public static void main(String[] args) throws Exception {
        // 1. 生成密钥对
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        keyPairGenerator.initialize(2048);
        KeyPair keyPair = keyPairGenerator.generateKeyPair();
        
        // 待签名的数据
        String data = "这是一份重要合同内容";
        byte[] dataBytes = data.getBytes();
        
        // 2. 创建签名实例并初始化
        Signature signature = Signature.getInstance("SHA256withRSA");
        signature.initSign(keyPair.getPrivate()); // 用私钥签名
        
        // 3. 更新要签名的数据
        signature.update(dataBytes);
        
        // 4. 生成签名
        byte[] digitalSignature = signature.sign();
        String signatureBase64 = Base64.getEncoder().encodeToString(digitalSignature);
        System.out.println("数字签名: " + signatureBase64);
        
        // 5. 验证签名
        Signature verifySignature = Signature.getInstance("SHA256withRSA");
        verifySignature.initVerify(keyPair.getPublic()); // 用公钥验证
        verifySignature.update(dataBytes);
        
        boolean isVerified = verifySignature.verify(digitalSignature);
        System.out.println("签名验证结果: " + isVerified);
    }
}
</code></pre>
<p><strong>代码解释</strong>：</p>
<ol>
<li>使用<code>Signature</code>类进行数字签名操作</li>
<li><code>SHA256withRSA</code>表示使用SHA-256哈希算法和RSA签名算法</li>
<li>私钥用于生成签名，公钥用于验证签名</li>
<li>如果数据或签名被篡改，验证将失败</li>
</ol>
<h2 id="五非对称加密的应用场景">五、非对称加密的应用场景</h2>
<ol>
<li>
<p><strong>安全通信</strong>（如HTTPS、SSL/TLS）</p>
<ul>
<li>客户端使用服务器公钥加密对称密钥</li>
<li>服务器用私钥解密获取对称密钥</li>
<li>后续通信使用对称加密</li>
</ul>
</li>
<li>
<p><strong>数字签名</strong></p>
<ul>
<li>验证数据完整性和来源真实性</li>
<li>用于软件发布、合同签署等场景</li>
</ul>
</li>
<li>
<p><strong>密钥交换</strong></p>
<ul>
<li>如Diffie-Hellman密钥交换协议</li>
<li>在不安全通道上安全地协商对称密钥</li>
</ul>
</li>
<li>
<p><strong>数字证书</strong></p>
<ul>
<li>证书颁发机构(CA)使用私钥签名证书</li>
<li>用户使用CA公钥验证证书真实性</li>
</ul>
</li>
</ol>
<h2 id="六安全注意事项">六、安全注意事项</h2>
<ol>
<li><strong>密钥长度</strong>：目前推荐至少2048位RSA密钥，3072或4096位更安全</li>
<li><strong>密钥管理</strong>：私钥必须严格保护，建议使用HSM(硬件安全模块)存储</li>
<li><strong>加密模式</strong>：使用适当的padding模式（如OAEP），避免使用PKCS1v1.5</li>
<li><strong>性能考虑</strong>：非对称加密计算量大，通常仅用于加密小数据或密钥交换</li>
<li><strong>算法选择</strong>：考虑使用ECC（椭圆曲线加密）替代RSA，在相同安全强度下密钥更短</li>
</ol>
<h2 id="七与其他加密方式比较">七、与其他加密方式比较</h2>
<table>
<thead>
<tr>
<th>特性</th>
<th>对称加密</th>
<th>非对称加密</th>
</tr>
</thead>
<tbody>
<tr>
<td>密钥</td>
<td>单一密钥</td>
<td>公钥/私钥对</td>
</tr>
<tr>
<td>速度</td>
<td>快</td>
<td>慢</td>
</tr>
<tr>
<td>密钥分发</td>
<td>困难</td>
<td>容易（公钥可公开）</td>
</tr>
<tr>
<td>用途</td>
<td>大数据加密</td>
<td>密钥交换、数字签名、小数据加密</td>
</tr>
<tr>
<td>常见算法</td>
<td>AES, DES, 3DES</td>
<td>RSA, ECC, DSA</td>
</tr>
<tr>
<td>密钥长度</td>
<td>128/256位</td>
<td>2048/4096位（RSA）</td>
</tr>
</tbody>
</table>
<h2 id="八总结">八、总结</h2>
<p>非对称加密是现代密码学的基石，解决了密钥分发和数字签名等关键安全问题。Java通过<code>java.security</code>和<code>javax.crypto</code>包提供了完整的非对称加密支持。在实际应用中，通常将对称加密和非对称加密结合使用，发挥各自优势：使用非对称加密安全地交换对称密钥，然后使用对称加密加密实际通信数据。</p>
<p>理解非对称加密的原理和正确使用方式，对于构建安全系统至关重要。开发者应当根据具体场景选择适当的算法、密钥长度和加密模式，并遵循最佳实践来管理密钥。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.6821271307488426" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-06-06 16:49">2025-06-06 16:49</span>&nbsp;
<a href="https://www.cnblogs.com/sun-10387834">佛祖让我来巡山</a>&nbsp;
阅读(<span id="post_view_count">102</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18914335);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18914335', targetLink: 'https://www.cnblogs.com/sun-10387834/p/18914335', title: '【非对称加密】详解及Java实现' })">举报</a>
</div>
        