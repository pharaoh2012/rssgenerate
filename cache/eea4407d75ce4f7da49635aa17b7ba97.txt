
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wavky/p/18764850" title="发布于 2025-03-11 13:40">
    <span role="heading" aria-level="2">2025年我用 Compose 写了一个 Todo App</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>标题党嫌疑犯实锤</p>
<h2 id="序言">序言</h2>
<p>从2月12日到3月4日这整整三周时间里，我从零开始又学习了一次 Compose。</p>
<p>为什么说又，是因为这已经是我第二次学习这套课程了。</p>
<p>故事从 4 年前说起，2021 年在意外获悉扔物线朱凯老师准备发布一套名为 Compose 的新课程，意识到这是 Android 未来的方向，花重金从扔物线朱凯老师手里购买了这一套新鲜出炉的课程并为此沾沾自喜。</p>
<p>当时正值 Compose 正式版公布前后的时间点，朱老师作为推广 Compose 的亲善大使，在技术仍未稳定之时录制了第一期 Compose 课程，当时跟着朱老师系统地学习了一次。曾经也许计划过等待朱老师更新正式版课程后，再与朱老师重走长征路，但不出所料被我如期爽约。</p>
<p>之后 4 年里，完全没有再接触过 Compose 技术，所学知识一滴不漏地全部漏光。</p>
<p>在迎来 35 岁又数个月的今天，中年危机意识汹涌袭来，因而再次挑灯夜读，孤独地在每个月上柳梢头的饭后良宵，以及春意盎然睡意绵绵的周末，驻守在电脑面前，默默打开了朱老师的这个课程网站：<a href="https://edu.rengwuxian.com/p/t_pc/goods_pc_detail/goods_detail/course_2Dpw6101YdL7bHFs5LFpYyzSUS6" target="_blank" rel="noopener nofollow">https://edu.rengwuxian.com/p/t_pc/goods_pc_detail/goods_detail/course_2Dpw6101YdL7bHFs5LFpYyzSUS6</a></p>
<p>3422 分钟，70 节课程，似懂非懂一知半解不求甚解地再次游历一遍 Compose 的海洋，终于又再次站在了公司里 Compose 技术的顶点，登高望极，一览山下低头耕耘那片屎山的同事们。（同事里只有另一个人专职做安卓开发，而他估计还没学过我们朱老师的这套课程，所以此时山下只有一人）</p>
<p><img src="https://img2024.cnblogs.com/blog/539308/202503/539308-20250311132435415-1569827369.jpg" alt="" loading="lazy"></p>
<h2 id="2025年的第一个-compose-app">2025年的第一个 Compose App</h2>
<p>趁热打铁，赶在知识仍未漏光之前，着手编写了这个极简 Todo 应用。以功能极简，设计极简之名，将其命名为 Simple Todo。</p>
<h3 id="原型设计">原型设计</h3>
<p>※ 出于嫌麻烦等不可控原因，实装中省略了时间部分的实现。<br>
<img src="https://img2024.cnblogs.com/blog/539308/202503/539308-20250311132447985-535854578.png" alt="" loading="lazy"></p>
<p><strong>效果图：</strong><br>
<img src="https://img2024.cnblogs.com/blog/539308/202503/539308-20250311132459089-1399192123.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/539308/202503/539308-20250311132502914-724566620.png" alt="" loading="lazy"></p>
<p>项目源码：<a href="https://github.com/wavky/SimpleTodo-Compose-" target="_blank" rel="noopener nofollow">https://github.com/wavky/SimpleTodo-Compose-</a></p>
<p>技术框架：</p>
<ul>
<li>Jetpack Compose</li>
<li>MVVM</li>
<li>Room</li>
<li>Koin</li>
</ul>
<hr>
<h3 id="项目结构">项目结构</h3>
<p>项目整体采用 MVVM 结构：</p>
<ul>
<li>UI 层使用 Compose</li>
<li>ViewModel 层提供数据与 UI 的耦合</li>
<li>UseCase 层提供数据增删改查等单点功能的业务逻辑封装</li>
<li>Domain 层定义底层数据仓库接口与数据源（文件、DB、API 等）</li>
<li>最后通过 Koin 进行依赖注入，串连 Domain -&gt; UseCase -&gt; ViewModel -&gt; UI 的数据单向流转</li>
</ul>
<hr>
<h3 id="从-room-到-viewmodel">从 Room 到 ViewModel</h3>
<p>Room 作为 DB 访问库，主要工作在 Domain 层。<br>
在 domain \ infra \ db 目录中，放置所有 Room 定义的数据库文件。</p>
<h4 id="domain-层结构">Domain 层结构</h4>
<ul>
<li>infra 目录下的文件不对上层公开（UI 等上层类无法直接访问），只提供底层数据服务到 Repository。</li>
<li>model 目录定义对上层公开的数据层标准数据模型（data class）。</li>
<li>repository 目录向上层公开并提供数据服务，在 Repository 中将 Entity 类型转换成对等 Model 类型后传递到上层（UseCase 层）。</li>
</ul>
<pre><code>domain
├── infra
│   └── db
│       ├── AppDatabase.kt
│       ├── dao
│       │   └── TodoDao.kt
│       └── entity
│           └── TodoEntity.kt
├── model
│   └── Todo.kt
└── repository
    ├── TodoRepository.kt
    └── TodoRepositoryImpl.kt
</code></pre>
<h4 id="与-compose-集成">与 Compose 集成</h4>
<p>Compose 中的第一方数据类型是 State 和 StateFlow，因此在 UI 需要订阅响应数据变化的时候，直接让 Room 返回 Flow 类型的查询结果，通过 ViewModel 传递到 UI 进行订阅绑定，这样在之后数据表发生数据变化时，Room 会自动重新执行一次查询并将结果通知到 UI 进行刷新。</p>
<ol>
<li>在 Dao 中声明查询函数返回 Flow 类型，Room 在执行此类查询时会自动分发到线程池中执行。如果是只需单次执行的增删改查，则声明为 suspend 函数并直接返回普通结果类型。</li>
</ol>
<pre><code class="language-kotlin">@Dao
internal interface TodoDao {
  @Query("SELECT * FROM todo")
  fun getAll(): Flow&lt;List&lt;TodoEntity&gt;&gt;

  @Insert
  suspend fun add(item: TodoEntity): Long
}
</code></pre>
<ol start="2">
<li>在 Repository 中将 Flow 中的 Entity 转换为标准 Model 类型。对于增删改函数，将参数中的 Model 类型转换成 Entity 类型。</li>
</ol>
<pre><code class="language-kotlin">internal class TodoRepositoryImpl(private val dao: TodoDao) : TodoRepository {

  override fun getAll(): Flow&lt;List&lt;Todo&gt;&gt; = dao.getAll().map { list -&gt;
    list.map { it.convertToModel() }
  }

  override suspend fun add(todo: Todo): Long =
    dao.add(todo.convertToEntity())
}
</code></pre>
<ol start="3">
<li>在 UseCase 中根据需要整合业务逻辑（例如指派到 IO 线程执行），将查询结果 Flow 返回到上层（ViewModel）。</li>
</ol>
<pre><code class="language-kotlin">interface GetTodoListUseCase {
  fun execute(): Flow&lt;List&lt;Todo&gt;&gt;
}
</code></pre>
<ol start="4">
<li>在 ViewModel 中将冷流 Flow 转换为热流 StateFlow。StateFlow 相当于 LiveData，可缓存最后数据，并避免每次订阅时都重新执行数据库查询。<br>
对于 Flow 类型的查询，直接将结果保存在 val 变量；对于单次执行的增删改查，则通过 viewModelScope 启动协程来执行。</li>
</ol>
<pre><code class="language-kotlin">class MainViewModel(
  getTodoListUseCase: GetTodoListUseCase,
  private val addTodoUseCase: AddTodoUseCase,
) : ViewModel() {

  val todoList: StateFlow&lt;List&lt;Todo&gt;&gt; = getTodoListUseCase.execute().stateIn(
    viewModelScope,
    started = SharingStarted.WhileSubscribed(),
    initialValue = emptyList()
  )

  fun addTodo(title: String, description: String) {
    viewModelScope.launch {
      addTodoUseCase.execute(title, description)
    }
  }
}
</code></pre>
<ol start="5">
<li>在 UI 层的 Composable 函数中，订阅 ViewModel 的 StateFlow 并转换成 State 类型，提供给 Composable 进行绑定。</li>
</ol>
<pre><code class="language-kotlin">val todoList by viewModel.todoList.collectAsState()

LazyColumn(verticalArrangement = Arrangement.spacedBy(8.dp)) {
  items(todoList, key = { item -&gt; item.id }) { item -&gt;
    TodoItem(item.title, item.isDone) { isChecked -&gt;
      viewModel.updateTodo(item.copy(isDone = isChecked))
    }
  }
}
</code></pre>
<p>至此，完成了数据从 DB -&gt; Repository -&gt; UseCase -&gt; ViewModel -&gt; UI 的单向传输。在增删改动作发生时，数据表中数据发生变化都会触发 Flow 类型查询的执行，并将最新结果通知到 UI 进行渲染输出，实现数据订阅刷新。</p>
<hr>
<h3 id="集成-koin">集成 Koin</h3>
<p>Koin 用于提供依赖注入，在项目中连接 Repository -&gt; UseCase -&gt; ViewModel -&gt; UI(Composable)。</p>
<p>这一节内容用于引流，有兴趣的同学请移步至小站：<a href="https://wavky.top/SimpleTodo/" target="_blank" rel="noopener nofollow">https://wavky.top/SimpleTodo/</a></p>
<p><img src="https://wavky.top/img/profile.png" alt="" loading="lazy"><br>
（我看看是谁在白嫖）</p>
<hr>
<h3 id="解决-viewmodel-与预览功能的冲突">解决 ViewModel 与预览功能的冲突</h3>
<p>在 Android Studio 中，如果 Composable 函数依赖 ViewModel，IDE 的预览功能会无法正常工作。<br>
因为 ViewModel 是属于 Android 环境中的对象，并且我们是通过依赖注入方式动态获取的，IDE 的预览功能无法对此类对象进行有效的实例化工作。</p>
<p>破局方法是，将 ViewModel 的功能接口化，将 ViewModel 中所有公开的函数抽离到上层接口中，将 Composable 中对 ViewModel 的依赖转变成对一个普通的回调接口类型的依赖。</p>
<h4 id="以-mainviewmodel-为例">以 MainViewModel 为例</h4>
<p><strong>在 MainViewModel 的实现中，添加声明实现一个同名接口 MainViewModelFunc：</strong></p>
<pre><code class="language-kotlin">class MainViewModel(
  getTodoListUseCase: GetTodoListUseCase,
  private val addTodoUseCase: AddTodoUseCase,
  ...
  // 添加实现接口声明 MainViewModelFunc
) : ViewModel(), MainViewModelFunc {

  val todoList: StateFlow&lt;List&lt;Todo&gt;&gt; = getTodoListUseCase.execute().stateIn(emptyList())

  override fun addTodo(title: String, description: String) {
    ...
  }

  override fun updateTodo(todo: Todo) {
    ...
  }
}
</code></pre>
<p><strong>将 MainViewModel 中的公开函数抽离到接口 MainViewModelFunc 中：</strong></p>
<pre><code class="language-kotlin">interface MainViewModelFunc {
  fun addTodo(title: String, description: String)
  fun updateTodo(todo: Todo)
}
</code></pre>
<p><strong>在 UI 的 Composable 中分离对 ViewModel 与 MainViewModelFunc 的依赖：</strong></p>
<pre><code class="language-kotlin">// MainScreen 依赖 ViewModel，但不能被直接预览，实际预览的是内容函数 MainScreenContent
@Composable
fun MainScreen(
  modifier: Modifier = Modifier, 
  viewModel: MainViewModel = koinViewModel(),
) {

  // 提取出需要直接访问的 ViewModel 中的变量对象（StateFlow）
  val todoList by viewModel.todoList.collectAsState()

  // 将 Composable 的所有 UI 内容封装成子 Composable
  MainScreenContent(modifier, todoList, viewModel)
}



// MainScreenContent 中依赖 ViewModel 的功能接口
@Composable
fun MainScreenContent(
  modifier: Modifier = Modifier,
  todoList: List&lt;Todo&gt;,

  // 对 ViewModel 的依赖改为对接口的依赖
  viewModel: MainViewModelFunc
) {
  Scaffold(...) {...}
}



// 实现 Composable 内容的预览
@Preview(showBackground = true)
@Composable
private fun PreviewMainScreen() {
  MainScreenContent(
    todoList = (1..10).map { Todo(...) },

    // 实现一个 ViewModel 功能接口的空实现对象
    viewModel = object : MainViewModelFunc {
      override fun addTodo(title: String, description: String) {}
      override fun updateTodo(todo: Todo) {}
      override fun deleteTodo(todo: Todo) {}
    }
  )
}
</code></pre>
<p>至此完成对 MainScreen 的预览。<br>
<img src="https://img2024.cnblogs.com/blog/539308/202503/539308-20250311132459089-1399192123.png" alt="" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.02835267767013889" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-11 13:41">2025-03-11 13:40</span>&nbsp;
<a href="https://www.cnblogs.com/wavky">wavky</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18764850" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18764850);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18764850', targetLink: 'https://www.cnblogs.com/wavky/p/18764850', title: '2025年我用 Compose 写了一个 Todo App' })">举报</a>
</div>
        