
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lanfengqi/p/18928766" title="发布于 2025-06-14 20:19">
    <span role="heading" aria-level="2">使用apache amoro + trino+minio搭建iceberg数据湖架构</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="使用apache-amoro--trinominio搭建iceberg数据湖架构">使用apache amoro + trino+minio搭建iceberg数据湖架构</h1>
<p>以下是基于 Apache Amoro + Trino + MinIO 搭建 Iceberg 数据湖架构的核心步骤和关键配置：</p>
<h2 id="架构组件角色"><strong>架构组件角色</strong>‌</h2>
<ol>
<li>‌<strong>MinIO</strong>‌：提供兼容 S3 API 的云原生对象存储，作为 Iceberg 表的底层存储系统。官方文档：</li>
<li>‌<strong>Apache Iceberg</strong>‌：表格式层，负责数据文件管理、ACID 事务支持及元数据版本控制。</li>
<li>‌<strong>Apache Amoro</strong>‌：湖仓管理系统，提供表管理、自动优化（如小文件合并）及多引擎协调（Trino/Flink/Spark）。官方文档：<a href="https://amoro.apache.org/quick-start/" target="_blank" rel="noopener nofollow">https://amoro.apache.org/quick-start/</a></li>
<li>‌<strong>Trino</strong>‌：分布式 SQL 查询引擎，用于高性能分析查询。官方文档：<a href="https://trino.io/docs/current/connector/iceberg.html" target="_blank" rel="noopener nofollow">https://trino.io/docs/current/connector/iceberg.html</a></li>
</ol>
<p>‌另外，此文章不包括ETL数据写入到apache iceberg，这一章需要应用 apache flink + DolphinScheduler（调度系统），请自行研究。</p>
<h2 id="部署流程"><strong>部署流程</strong></h2>
<p>以下是使用docker-compose搭建Apache Amoro、MinIO和Trino的集成环境方案，可用于日常开发环境。</p>
<p>确保已安装Docker 27.0.3 和Docker Compose。</p>
<p>把下面的yaml保存到docker-compose.yml的文件中：</p>
<pre><code>version: "3"

services:
  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=minio
    networks:
      amoro_network:
        aliases:
          - warehouse.minio
    ports:
      - 9001:9001
      - 9000:9000
    command: [ "server", "/data", "--console-address", ":9001" ]
  amoro:
    image: apache/amoro
    container_name: amoro
    ports:
      - 8081:8081
      - 1630:1630
      - 1260:1260
    environment:
      - JVM_XMS=1024
    networks:
      amoro_network:
    volumes:
      - ./amoro:/tmp/warehouse
    command: ["/entrypoint.sh", "ams"]
    tty: true
    stdin_open: true
  trino:
    image: trinodb/trino:419
    container_name: trino
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    volumes:
      - ./example.properties:/etc/trino/catalog/example.properties
    networks:
      amoro_network:
        aliases:
          - warehouse.trino
    ports:
      - 8080:8080

networks:
  amoro_network:
    driver: bridge
</code></pre>
<p>接下来，在docker-compose.yml所在的目录下创建example.properties文件:</p>
<pre><code>connector.name=iceberg
iceberg.catalog.type=rest
iceberg.rest-catalog.uri=http://&lt;IP地址&gt;:1630/api/iceberg/rest
iceberg.rest-catalog.warehouse=&lt;amoro 创建的 iceberg catalog name&gt;
fs.native-s3.enabled=true
s3.endpoint=http://&lt;IP地址&gt;:9000
s3.region=us-east-1
s3.aws-access-key=admin
s3.aws-secret-key=password
</code></pre>
<p>最后一步骤：使用以下命令启动docker容器：</p>
<pre><code>docker-compose up -d
</code></pre>
<p>启动之后，trino容器可能会出现启动失败。不要着急，接下来将amoro配置完，重启容器即可。</p>
<h2 id="配置">配置</h2>
<h3 id="minio-创建-bucket">minio 创建 bucket</h3>
<p>打开http://localhost:9000在浏览器中，输入admin/password登录minio界面。</p>
<p><img src="https://img2024.cnblogs.com/blog/2686276/202506/2686276-20250614202349196-1195334.png" alt="" loading="lazy"></p>
<h3 id="amoro-配置">amoro 配置</h3>
<h4 id="create-optimizer-group">Create optimizer group</h4>
<p>Open&nbsp;<a href="http://localhost:1630/" target="_blank" rel="noopener nofollow">http://localhost:1630</a>&nbsp;in a browser, enter&nbsp;<code>admin/admin</code>&nbsp;to log in to the dashboard.</p>
<p>Click on&nbsp;<code>Optimizing</code>&nbsp;in the sidebar, choose&nbsp;<code>Optimizer Groups</code>&nbsp;and click&nbsp;<code>Add Group</code>&nbsp;button to create a new group befre creating catalog</p>
<p><img src="https://img2024.cnblogs.com/blog/2686276/202506/2686276-20250614202249202-1278226947.png" alt="" loading="lazy"></p>
<h3 id="create-catalog">Create catalog</h3>
<p>Click on&nbsp;<code>Catalogs</code>&nbsp;in the sidebar, click on the&nbsp;<code>+</code>&nbsp;button under Catalog List to create a test catalog, and name it to&nbsp;<code>demo_catalog</code>:</p>
<p>o use the Iceberg Format, select&nbsp;<code>Type</code>&nbsp;as&nbsp;<code>Internal Catalog</code>, and choose&nbsp;<code>Iceberg</code>&nbsp;as&nbsp;<code>Table Format</code>.</p>
<p><img src="https://img2024.cnblogs.com/blog/2686276/202506/2686276-20250614202259552-1401340207.png" alt="" loading="lazy"></p>
<p>按照上面配置的，修改example.properties文件。然后执行以下命令：</p>
<pre><code>docker stop tirno
docker rm trino
docker-compose up trino
</code></pre>
<h2 id="demo-steps">Demo steps</h2>
<h3 id="initialize-tables">Initialize tables</h3>
<p>Click on amoro system&nbsp;<code>Terminal</code>&nbsp;in the sidebar, you can create the test tables here using SQL. Terminal supports executing Spark SQL statements for now.</p>
<pre><code>CREATE DATABASE IF NOT EXISTS db;
CREATE TABLE IF NOT EXISTS db.tb_users (
    id INT,
    name string,
    ts TIMESTAMP
) USING iceberg 
PARTITIONED BY (days(ts));

INSERT OVERWRITE db.tb_users VALUES 
(1, "eric", timestamp("2022-07-01 12:32:00")),
(2, "frank", timestamp("2022-07-02 09:11:00")),
(3, "lee", timestamp("2022-07-02 10:11:00"));

SELECT * FROM db.user;
</code></pre>
<p>Click on the&nbsp;<code>RUN</code>&nbsp;button uppon the SQL editor, and wait for the SQL query to finish executing. You can then see the query results under the SQL editor.</p>
<h3 id="initialize-tables-1">Initialize tables</h3>
<p>start up the docker containers with this command:</p>
<pre><code>docker exec -it tirno trino
</code></pre>
<pre><code>trino&gt; show catalogs;
 Catalog 
---------
 example 
 jmx     
 memory  
 system  
 tpcds   
 tpch    
(6 rows)

trino&gt; show schemas in example;
       Schema       
--------------------
 db                 
 information_schema 
(2 rows)

trino&gt; show tables in example.db;
 Table 
-------
 tb_users
(1 row)


trino&gt; select * from example.db.tb_users;
 id | name  |               ts               
----+-------+--------------------------------
  1 | eric  | 2022-07-01 12:32:00.000000 UTC  
  2 | frank | 2022-07-02 09:11:00.000000 UTC 
  3 | lee   | 2022-07-02 10:11:00.000000 UTC  
(3 rows)
</code></pre>
<p>到此为止，我们的架构就搭建完成。</p>
<p>关键注意事项</p>
<ul>
<li>首次启动需在Amoro中创建MinIO存储配置</li>
<li>Trino查询前需在Amoro中创建表并同步元数据</li>
<li>生产环境建议配置持久化卷和网络隔离</li>
</ul>
<h3 id="dbeaver-访问-trino">DBeaver 访问 trino</h3>
<p><img src="https://img2024.cnblogs.com/blog/2686276/202506/2686276-20250615063248629-703287073.png" alt="" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.4263888888888889" data-date-updated="2025-06-15 06:33">2025-06-14 20:19</span>&nbsp;
<a href="https://www.cnblogs.com/lanfengqi">兰丰岐</a>&nbsp;
阅读(<span id="post_view_count">33</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18928766);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18928766', targetLink: 'https://www.cnblogs.com/lanfengqi/p/18928766', title: '使用apache amoro + trino+minio搭建iceberg数据湖架构' })">举报</a>
</div>
        