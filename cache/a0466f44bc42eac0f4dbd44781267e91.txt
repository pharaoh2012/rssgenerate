
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ggtop/p/18881543" title="发布于 2025-05-17 20:23">
    <span role="heading" aria-level="2">golang+gin实现api接口开发</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><img src="https://img2024.cnblogs.com/blog/2250775/202505/2250775-20250517201941223-2092229944.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h3>一、简介：</h3>
<p data-pid="Ckvu8Z7J">Gin是<a class="RichContent-EntityWord css-b7erz1" href="https://zhida.zhihu.com/search?content_id=257202422&amp;content_type=Article&amp;match_order=1&amp;q=Go%E8%AF%AD%E8%A8%80&amp;zhida_source=entity" target="_blank" data-za-not-track-link="true" data-paste-text="true" rel="noopener nofollow">Go语言</a>的一个微框架，也是是一个用 Go (Golang) 编写的 HTTP Web 框架，封装比较优雅，API相对友好。Gin具有性能优异和灵活快速等优点。它具有类似&nbsp;<a class="RichContent-EntityWord css-b7erz1" href="https://zhida.zhihu.com/search?content_id=257202422&amp;content_type=Article&amp;match_order=1&amp;q=Martini&amp;zhida_source=entity" target="_blank" data-za-not-track-link="true" data-paste-text="true" rel="noopener nofollow">Martini</a>&nbsp;的 API，但性能比 Martini 快 40 倍。并且支持<a class="RichContent-EntityWord css-b7erz1" href="https://zhida.zhihu.com/search?content_id=257202422&amp;content_type=Article&amp;match_order=1&amp;q=%E4%B8%AD%E9%97%B4%E4%BB%B6&amp;zhida_source=entity" target="_blank" data-za-not-track-link="true" data-paste-text="true" rel="noopener nofollow">中间件</a>、Crash 处理、JSON 验证、<a class="RichContent-EntityWord css-b7erz1" href="https://zhida.zhihu.com/search?content_id=257202422&amp;content_type=Article&amp;match_order=1&amp;q=%E8%B7%AF%E7%94%B1%E7%BB%84&amp;zhida_source=entity" target="_blank" data-za-not-track-link="true" data-paste-text="true" rel="noopener nofollow">路由组</a>、<a class="RichContent-EntityWord css-b7erz1" href="https://zhida.zhihu.com/search?content_id=257202422&amp;content_type=Article&amp;match_order=1&amp;q=%E9%94%99%E8%AF%AF%E7%AE%A1%E7%90%86&amp;zhida_source=entity" target="_blank" data-za-not-track-link="true" data-paste-text="true" rel="noopener nofollow">错误管理</a>、<a class="RichContent-EntityWord css-b7erz1" href="https://zhida.zhihu.com/search?content_id=257202422&amp;content_type=Article&amp;match_order=1&amp;q=%E5%86%85%E7%BD%AE%E6%B8%B2%E6%9F%93&amp;zhida_source=entity" target="_blank" data-za-not-track-link="true" data-paste-text="true" rel="noopener nofollow">内置渲染</a>、<a class="RichContent-EntityWord css-b7erz1" href="https://zhida.zhihu.com/search?content_id=257202422&amp;content_type=Article&amp;match_order=1&amp;q=%E5%8F%AF%E6%89%A9%E5%B1%95%E6%80%A7&amp;zhida_source=entity" target="_blank" data-za-not-track-link="true" data-paste-text="true" rel="noopener nofollow">可扩展性</a>等....</p>
<h3>二、Gin安装</h3>
<div class="highlight">
<div class="cnblogs_code">
<pre>$ <span style="color: rgba(0, 0, 255, 1)">go</span> get -u github.com/gin-gonic/gin</pre>
</div>
<p>&nbsp;</p>
</div>
<p data-pid="xo2TmHUf">引用方式：</p>
<div class="highlight">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">github.com/gin-gonic/gin</span><span style="color: rgba(128, 0, 0, 1)">"</span></pre>
</div>
<p>&nbsp;</p>
</div>
<h3>三、使用Gin实现http服务器</h3>
<div class="highlight">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> main

</span><span style="color: rgba(0, 0, 255, 1)">import</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">github.com/gin-gonic/gin</span><span style="color: rgba(128, 0, 0, 1)">"</span>

<span style="color: rgba(0, 0, 255, 1)">func</span><span style="color: rgba(0, 0, 0, 1)"> main() {
  router :</span>=<span style="color: rgba(0, 0, 0, 1)"> gin.Default()
  router.GET(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/hello</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(0, 0, 255, 1)">func</span>(c *<span style="color: rgba(0, 0, 0, 1)">gin.Context) {
    c.JSON(</span><span style="color: rgba(128, 0, 128, 1)">200</span><span style="color: rgba(0, 0, 0, 1)">, gin.H{
      </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">message</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">heelo world！</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    })
  })
  router.Run()</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">默认127.0.0.1:8080上启动服务</span>
}</pre>
</div>
<p>&nbsp;</p>
</div>
<p data-pid="ZWrKWPJo">直接先运行</p>
<div class="highlight">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">go</span><span style="color: rgba(0, 0, 0, 1)"> mod tidy
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">再执行</span>
<span style="color: rgba(0, 0, 255, 1)">go</span> run main.<span style="color: rgba(0, 0, 255, 1)">go</span></pre>
</div>
<p>&nbsp;</p>
</div>
<p data-pid="2wlUql8r">启动程序</p>
<p><img src="https://pic1.zhimg.com/v2-83d1a2deea557218a5b8181bc477fcbc_1440w.jpg" width="1348" class="origin_image zh-lightbox-thumb" data-caption="" data-size="normal" data-rawwidth="1348" data-rawheight="546" data-original-token="v2-ad4fc0991579574471dbcba81e0d3b0c" data-original="https://pic1.zhimg.com/v2-83d1a2deea557218a5b8181bc477fcbc_r.jpg"></p>
<p data-pid="RT6OqiT-">这样则表示调用成功。</p>
<h3>四、路由和控制器</h3>
<div class="highlight">
<div class="cnblogs_code">
<pre>router.GET(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/account/:name</span><span style="color: rgba(128, 0, 0, 1)">"</span>,<span style="color: rgba(0, 0, 255, 1)">func</span>(c *<span style="color: rgba(0, 0, 0, 1)">gin.Context){
    name:</span>=c.Param(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">name</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    c.String(http.StatusOK, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">hello %s</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, name)
})</span></pre>
</div>
<p>&nbsp;</p>
</div>
<p data-pid="ftILh2C-">注⚠️：冒号"："加上一个参数组成路由参数，而且可以使用c.Param方法都去值。</p>
<p data-pid="j0IVvtkM"><a class="RichContent-EntityWord css-b7erz1" href="https://zhida.zhihu.com/search?content_id=257202422&amp;content_type=Article&amp;match_order=1&amp;q=http%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95&amp;zhida_source=entity" target="_blank" data-za-not-track-link="true" data-paste-text="true" rel="noopener nofollow">http请求方法</a>：常用的http请求方法有下面4种:GET、POST、PUT、DELETE</p>
<p data-pid="RCRW47-y">带星号* 模糊匹配参数的url路径<br>星号代表匹配任意路径的意思, 必须在*号后面指定一个参数名，后面可以通过这个参数获取*号匹配的内容。</p>
<div class="highlight">
<div class="cnblogs_code">
<pre>router.GET(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/account/:name/*act</span><span style="color: rgba(128, 0, 0, 1)">"</span>,<span style="color: rgba(0, 0, 255, 1)">func</span>(c *<span style="color: rgba(0, 0, 0, 1)">gin.Context){
    name:</span>=c.Param(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">name</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    act :</span>= c.Param(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">act</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    msg :</span>= name+<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)"> is </span><span style="color: rgba(128, 0, 0, 1)">"</span>+<span style="color: rgba(0, 0, 0, 1)"> act
    c.String(http.StatusOK, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">hello %s</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, msg)
})</span></pre>
</div>
<p>&nbsp;</p>
</div>
<p class="ztext-empty-paragraph">&nbsp;</p>
<h3>五、Gin中间件</h3>
<p data-pid="uUluOzGd">例如我们设定了一个AuthMiddle权限中间件</p>
<p data-pid="mR9B-N0H">我们就可以在接口中这么写</p>
<div class="highlight">
<div class="cnblogs_code">
<pre>router.GET(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/account</span><span style="color: rgba(128, 0, 0, 1)">"</span>,AuthMiddle(),<span style="color: rgba(0, 0, 255, 1)">func</span>(c *<span style="color: rgba(0, 0, 0, 1)">gin.Context){
    name:</span>=c.Param(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">name</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    c.String(http.StatusOK, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">hello %s</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, name)
})</span></pre>
</div>
<p>&nbsp;</p>
</div>
<p data-pid="duZ7Vt7j">这样可以实现横切关注点问题，通常对于记录Log，error handler和接口鉴权等问题。</p>
<h3><br>六、路由</h3>
<p data-pid="6XzuM8D7">比如：</p>
<div class="highlight">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">实例化gin实例</span>
r :=<span style="color: rgba(0, 0, 0, 1)"> gin.Default()
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">post请求</span>
r.POST(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/account</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, SendUser)
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">get请求：</span>
r.GET(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/account/:id</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, GetUserInfo)
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">put请求</span>
r.PUT(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/account/:id</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, UpdateUser)
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">delete请求</span>
r.DELETE(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/account/:id</span><span style="color: rgba(128, 0, 0, 1)">"</span>, DelUser)</pre>
</div>
<p>&nbsp;</p>
</div>
<p data-pid="Ag6modR4">分组管理</p>
<div class="highlight">
<div class="cnblogs_code">
<pre>r :=<span style="color: rgba(0, 0, 0, 1)"> gin.Default()
apiv1 :</span>= r.Group(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/api/v1</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
apiv1.Use(jwt.JWT())
{
      apiv1.GET(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/tags</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, v1.GetTags)
      apiv1.POST(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/tags</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, v1.AddTag)
      apiv1.PUT(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/tags/:id</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, v1.EditTag)
      apiv1.DELETE(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/tags/:id</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, v1.DelTag)
}</span></pre>
</div>
<p>&nbsp;</p>
</div>
<hr>
<p data-pid="MwgNaRN7">结尾：</p>
<p data-pid="FOEZ8yjI">学习永无止境，有喜欢学习golang的朋友，具体可以参考官方文档进一步学习Gin这个Web框架。</p>
<div class="RichText-LinkCardContainer"><a class="LinkCard new css-biylet" href="https://link.zhihu.com/?target=https%3A//gin-gonic.com/zh-cn/docs/introduction/" target="_blank" data-draft-node="block" data-draft-type="link-card" data-text="Gin官方文档" data-za-detail-view-id="172" rel="noopener nofollow"><span class="LinkCard-contents"><span class="LinkCard-title two-line">Gin官方文档<span class="LinkCard-desc">​gin-gonic.com/zh-cn/docs/introduction/</span></span></span></a></div>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0007117088159722222" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-17 20:26">2025-05-17 20:23</span>&nbsp;
<a href="https://www.cnblogs.com/ggtop">小G同学</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18881543);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18881543', targetLink: 'https://www.cnblogs.com/ggtop/p/18881543', title: 'golang+gin实现api接口开发' })">举报</a>
</div>
        