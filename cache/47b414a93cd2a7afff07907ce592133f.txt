
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ThinkerQAQ/p/18947211" title="发布于 2025-06-25 07:30">
    <span role="heading" aria-level="2">Java源码分析系列笔记-8.CyclicBarrier</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p></p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#1-是什么" rel="noopener nofollow">1. 是什么</a></li><li><a href="#2-如何使用" rel="noopener nofollow">2. 如何使用</a><ul><li><a href="#21-不带runnable" rel="noopener nofollow">2.1. 不带Runnable</a></li><li><a href="#22-带runnale" rel="noopener nofollow">2.2. 带Runnale</a></li></ul></li><li><a href="#3-原理分析" rel="noopener nofollow">3. 原理分析</a><ul><li><a href="#31-uml" rel="noopener nofollow">3.1. uml</a></li><li><a href="#32-构造方法" rel="noopener nofollow">3.2. 构造方法</a><ul><li><a href="#321-使用lock和condition实现" rel="noopener nofollow">3.2.1. 使用Lock和Condition实现</a></li></ul></li><li><a href="#33-await方法" rel="noopener nofollow">3.3. await方法</a><ul><li><a href="#331-首先是加锁" rel="noopener nofollow">3.3.1. 首先是加锁</a></li><li><a href="#332-然后减信号量" rel="noopener nofollow">3.3.2. 然后减信号量</a></li><li><a href="#333-最后一个到达的需要执行prepareaction唤醒线程并换代" rel="noopener nofollow">3.3.3. 最后一个到达的需要执行prepareAction、唤醒线程并换代</a><ul><li><a href="#3331-怎么唤醒并换代的" rel="noopener nofollow">3.3.3.1. 怎么唤醒并换代的</a></li></ul></li><li><a href="#334-最后一个线程未到达前其他线程阻塞等待唤醒" rel="noopener nofollow">3.3.4. 最后一个线程未到达前，其他线程阻塞等待唤醒</a><ul><li><a href="#3341-线程被中断置当前代失效的操作" rel="noopener nofollow">3.3.4.1. 线程被中断，置当前代失效的操作</a></li></ul></li><li><a href="#335-最后一个线程到达唤醒其他所有线程后其他所有线程退出循环" rel="noopener nofollow">3.3.5. 最后一个线程到达唤醒其他所有线程后，其他所有线程退出循环</a></li></ul></li></ul></li><li><a href="#4-总结" rel="noopener nofollow">4. 总结</a></li><li><a href="#5-参考" rel="noopener nofollow">5. 参考</a></li></ul></div><p></p>
<h2 id="1-是什么">1. 是什么</h2>
<p>可重复使用的计数器，让一堆线程互相等待，条件满足时一起往下执行<br>
底层使用Lock+Condition实现阻塞等待和唤醒</p>
<h2 id="2-如何使用">2. 如何使用</h2>
<h3 id="21-不带runnable">2.1. 不带Runnable</h3>
<p>当所有线程都到达await点的时候才一起往下执行</p>
<pre><code class="language-java">public class CyclicBarrierTest
{
    private static final int count = 20;
    private static final AtomicInteger val = new AtomicInteger();
    private static final CyclicBarrier barrier = new CyclicBarrier(count);

    private static class CalcAction implements Runnable
    {
        @Override
        public void run()
        {
            try
            {
                System.out.println("1." + Thread.currentThread().getName() + "到达await点");
                int result = val.incrementAndGet();
                if (result % 5 == 0)
                {
                    System.out.println("2." + Thread.currentThread().getName() + "休眠3s");
                    TimeUnit.SECONDS.sleep(3);
                }
                barrier.await();
            }
            catch (InterruptedException | BrokenBarrierException e)
            {
                e.printStackTrace();
            }

            System.out.println("3." + Thread.currentThread().getName() + "继续执行");


        }

    }

    public static void main(String[] args)
    {
        for (int i = 0; i &lt; count; i++)
        {
            new Thread(new CalcAction()).start();
        }
    }
}
</code></pre>
<h3 id="22-带runnale">2.2. 带Runnale</h3>
<p>当所有线程都到达await点的时候，最后一个到达的线程执行prepare，再一起往下执行</p>
<pre><code class="language-java">public class CyclicBarrierTest
{
    private static final int count = 20;
    private static final AtomicInteger val = new AtomicInteger();
    private static final CyclicBarrier barrier = new CyclicBarrier(count, new PrepareAction());

    private static class PrepareAction implements Runnable
    {
        @Override
        public void run()
        {
            try
            {
                System.out.println("2.所有线程到达await，最后一个到达的线程" + Thread.currentThread().getName() + "先执行PrepareAction，休眠3s");
                TimeUnit.SECONDS.sleep(3);
            }
            catch (InterruptedException e)
            {
                e.printStackTrace();
            }

            System.out.println("3.执行PrepareAction完毕");

        }
    }

    private static class CalcAction implements Runnable
    {
        @Override
        public void run()
        {
            try
            {
                System.out.println("1." + Thread.currentThread().getName() + "到达await点");
                barrier.await();
            }
            catch (InterruptedException | BrokenBarrierException e)
            {
                e.printStackTrace();
            }

            int result = val.incrementAndGet();
            System.out.println("4." + Thread.currentThread().getName() + "执行计算：result: " + result);

        }
    }

    public static void main(String[] args)
    {
        for (int i = 0; i &lt; count; i++)
        {
            new Thread(new CalcAction()).start();
        }
    }
}
</code></pre>
<h2 id="3-原理分析">3. 原理分析</h2>
<h3 id="31-uml">3.1. uml</h3>
<p><img alt="" loading="lazy" data-src="https://raw.githubusercontent.com/TDoct/images/master/img/20191230160610.png" class="lazyload"></p>
<h3 id="32-构造方法">3.2. 构造方法</h3>
<h4 id="321-使用lock和condition实现">3.2.1. 使用Lock和Condition实现</h4>
<pre><code class="language-java">public class CyclicBarrier {
	//CyclicBarrier可以循环使用
	private static class Generation {
		//当前代是否损坏
	    boolean broken = false;
	}

    //使用lock阻塞在await点等待
    private final ReentrantLock lock = new ReentrantLock();
    //使用lock.condition唤醒阻塞的所有线程往下执行
    private final Condition trip = lock.newCondition();
    //总共的信号量
    private final int parties;
    //最后一个到达的线程先执行barrierCommand，所有线程再一起继续往下执行
    private final Runnable barrierCommand;
    //CyclicBarrier可以重复使用，每次使用都是一个generation
    private Generation generation = new Generation();

    //剩下多少个线程没有到达await点
    private int count;

	public CyclicBarrier(int parties, Runnable barrierAction) {
		if (parties &lt;= 0) throw new IllegalArgumentException();
		//初始化总的信号量
		this.parties = parties;
		//初始化剩余未使用的信号量=总的信号量
		//相当于一开始就加锁了parties次，那么也就需要解锁parties次
		this.count = parties;
		this.barrierCommand = barrierAction;
	}

}
</code></pre>
<h3 id="33-await方法">3.3. await方法</h3>
<pre><code class="language-java">public int await() throws InterruptedException, BrokenBarrierException {
    try {
    	//调用dowait并且默认不设置超时
        return dowait(false, 0L);
    } catch (TimeoutException toe) {
        throw new Error(toe); // cannot happen
    }
}
</code></pre>
<ul>
<li>dowait方法</li>
</ul>
<pre><code class="language-java">private int dowait(boolean timed, long nanos)
        throws InterruptedException, BrokenBarrierException,
               TimeoutException {
        final ReentrantLock lock = this.lock;
        //1.先获取锁才能往下执行
        lock.lock();
        try {
        	//当前代，每reset一次代+1
            final Generation g = generation;

			//当前代已损坏--什么情况会导致损坏？--线程被中断，执行breakBarrier方法
            if (g.broken)
                throw new BrokenBarrierException();

			//如果线程被中断，那么置当前代失效
            if (Thread.interrupted()) {
                breakBarrier();
                throw new InterruptedException();
            }

            int index = --count;
            //剩余的信号量为0,那么可以继续往下执行了
            //即最后一个线程到达
            if (index == 0) {  // tripped
                boolean ranAction = false;
                try {
                    final Runnable command = barrierCommand;
                    //3.最后一个到达的线程先执行Runnable
                    if (command != null)
                        command.run();
                    ranAction = true;
                    //4.唤醒所有线程继续往下执行（46行）并且换代
                    nextGeneration();
                    //5.返回，不往下执行死循环
                    return 0;
                } finally {
                    if (!ranAction)
                        breakBarrier();
                }
            }

            // 死循环直到超时或者信号量都用完或者中断
            for (;;) {
                try {
                    if (!timed)
                    	//2.未设置超时，那么调用Condition.await()方法等待唤醒
                        trip.await();
                    else if (nanos &gt; 0L)
                    	//设置超时，那么调用Condition.await(超时)方法等待唤醒或者超时
                        nanos = trip.awaitNanos(nanos);
                } catch (InterruptedException ie) {
                	//发生了中断，break当前代
                    if (g == generation &amp;&amp; ! g.broken) {
                        breakBarrier();
                        throw ie;
                    } else {
                        
                        Thread.currentThread().interrupt();
                    }
                }

				//break当前代只是个标记，这里才会抛出break异常
                if (g.broken)
                    throw new BrokenBarrierException();

				//6.正常执行并且已经换代，退出循环
                if (g != generation)
                    return index;

				//超时时间设置不对，直接break当前代
                if (timed &amp;&amp; nanos &lt;= 0L) {
                    breakBarrier();
                    throw new TimeoutException();
                }
            }
        } finally {
        	//7.解锁
            lock.unlock();
        }
    }
    
</code></pre>
<p>上面的逻辑主要分为以下几步：</p>
<ul>
<li>6行：加锁</li>
<li>21行：减信号量</li>
<li>43-60行：最后一个线程未到达前，其他线程阻塞等待唤醒</li>
<li>21-40行：最后一个到达的需要执行prepareAction、唤醒线程并换代<br>
下面详细分析这几个步骤：</li>
</ul>
<h4 id="331-首先是加锁">3.3.1. 首先是加锁</h4>
<pre><code class="language-java">lock.lock();
</code></pre>
<p>一方面后续的所有操作必须保证是线程安全的，比如count--操作，所以需要加锁；<br>
另一方面使用condition唤醒必须在加锁的逻辑中</p>
<h4 id="332-然后减信号量">3.3.2. 然后减信号量</h4>
<pre><code class="language-java">int index = --count;
</code></pre>
<p>每个线程进来正常情况都会对信号量-1，减为0的时候说明所有线程准备就绪。<br>
对于最后一个到达的线程还有特殊处理</p>
<h4 id="333-最后一个到达的需要执行prepareaction唤醒线程并换代">3.3.3. 最后一个到达的需要执行prepareAction、唤醒线程并换代</h4>
<pre><code class="language-java">if (index == 0) {  // 最后一个到达
    boolean ranAction = false;
    try {
        final Runnable command = barrierCommand;
        //最后一个到达的线程先执行Runnable
        if (command != null)
            command.run();
        ranAction = true;
        //唤醒所有线程继续往下执行（46行）并且换代
        nextGeneration();
        //返回，不往下执行死循环
        return 0;
    } finally {
        if (!ranAction)
            breakBarrier();
    }
}
</code></pre>
<h5 id="3331-怎么唤醒并换代的">3.3.3.1. 怎么唤醒并换代的</h5>
<ul>
<li>nextGeneration</li>
</ul>
<pre><code class="language-java">private void nextGeneration() {
    // signal completion of last generation
    //唤醒所有线程
    trip.signalAll();
    //换代
    count = parties;
    generation = new Generation();
}
</code></pre>
<h4 id="334-最后一个线程未到达前其他线程阻塞等待唤醒">3.3.4. 最后一个线程未到达前，其他线程阻塞等待唤醒</h4>
<pre><code class="language-java">死循环直到超时或者信号量都用完或者中断
for (;;) {
    try {
        if (!timed)
        	//未设置超时，那么调用Condition.await()方法等待唤醒
            trip.await();
        else if (nanos &gt; 0L)
        	//设置超时，那么调用Condition.await(超时)方法等待唤醒或者超时
            nanos = trip.awaitNanos(nanos);
    } catch (InterruptedException ie) {
    	//发生了中断，break当前代
        if (g == generation &amp;&amp; ! g.broken) {
            breakBarrier();
            throw ie;
        } else {
            
            Thread.currentThread().interrupt();
        }
    }
</code></pre>
<h5 id="3341-线程被中断置当前代失效的操作">3.3.4.1. 线程被中断，置当前代失效的操作</h5>
<ul>
<li>breakBarrier</li>
</ul>
<pre><code class="language-java">private void breakBarrier() {
	//标志当前代损坏
    generation.broken = true;
    //重新计数
    count = parties;
    //唤醒什么？？
    trip.signalAll();
}
</code></pre>
<h4 id="335-最后一个线程到达唤醒其他所有线程后其他所有线程退出循环">3.3.5. 最后一个线程到达唤醒其他所有线程后，其他所有线程退出循环</h4>
<pre><code class="language-java"> // 死循环直到超时或者信号量都用完或者中断
            for (;;) {
                    //...
                    if (!timed)
                    	//2.未设置超时，那么调用Condition.await()方法等待唤醒
                        trip.await();
                 
                //...

				//6.正常执行并且已经换代，退出循环
                if (g != generation)
                    return index;

				//...

            }
</code></pre>
<h2 id="4-总结">4. 总结</h2>
<ul>
<li>
<p>让一堆线程互相等待，条件满足（信号量降为0）时最后一个到达的线程先执行Runnable，接着所有线程一起往下执行</p>
</li>
<li>
<p>调用await的时候</p>
<ul>
<li>除了最后一个线程外，其他所有线程依次获取lock，对信号量-1，阻塞等待唤醒（加入condition队列并释放锁）</li>
<li>最后一个线程到达后执行Runnable，唤醒所有线程（把所有condition队列中的节点转到AQS中）</li>
<li>唤醒的所有线程依次抢占到锁（从AQS队列中移除）后往下执行，检查代后退出循环，解锁</li>
</ul>
</li>
</ul>
<h2 id="5-参考">5. 参考</h2>
<ul>
<li><a href="http://ifeve.com/concurrency-cyclicbarrier/" target="_blank" rel="noopener nofollow">并发工具类（二）同步屏障CyclicBarrier | 并发编程网 – ifeve.com</a></li>
<li><a href="https://juejin.im/entry/596a05fdf265da6c4f34f2f9" target="_blank" rel="noopener nofollow">Java并发之CyclicBarrier - 后端 - 掘金</a></li>
<li><a href="http://www.iocoder.cn/JUC/sike/CyclicBarrier/" target="_blank" rel="noopener nofollow">【死磕 Java 并发】—- J.U.C 之并发工具类：CyclicBarrier | 芋道源码 —— 纯源码解析博客</a></li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-25 07:30">2025-06-25 07:30</span>&nbsp;
<a href="https://www.cnblogs.com/ThinkerQAQ">ThinkerQAQ</a>&nbsp;
阅读(<span id="post_view_count">50</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18947211);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18947211', targetLink: 'https://www.cnblogs.com/ThinkerQAQ/p/18947211', title: 'Java源码分析系列笔记-8.CyclicBarrier' })">举报</a>
</div>
        