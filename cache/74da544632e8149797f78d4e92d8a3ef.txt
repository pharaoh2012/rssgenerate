
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/coco1s/p/18699898" title="发布于 2025-02-05 17:48">
    <span role="heading" aria-level="2">巧用 CSS 实现高频出现的复杂怪状按钮 - 镂空的内凹圆角边框</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在之前，我们有些过这么一篇文章 - <a href="https://github.com/chokcoco/iCSS/issues/152" target="_blank" rel="noopener nofollow">使用 CSS 轻松实现高频出现的各类奇形怪状按钮</a>。</p>
<p>里面包含了如下这些图形：</p>
<p><img src="https://img2024.cnblogs.com/blog/608782/202502/608782-20250205174645459-1573458140.png" alt="" loading="lazy"></p>
<p>你可以在这里看到：<a href="https://codepen.io/Chokcoco/pen/QWMoBGO?editors=1100" target="_blank" rel="noopener nofollow">CodePen Demo -- CSS Various Button Shapes | CSS 各种造型按钮</a></p>
<p>接下来几篇文章中，将在上述基础上，额外补充一些在日常设计稿中，常见的，可能出现的更为复杂的几个按钮，本文，我们来尝试实现这个造型：</p>
<p><img src="https://img2024.cnblogs.com/blog/608782/202502/608782-20250205174651748-101169328.png" alt="" loading="lazy"></p>
<h2 id="不镂空的内凹圆角按钮">不镂空的内凹圆角按钮</h2>
<p>在文章开头的贴图中，其实是有和这个按钮非常类似的造型：</p>
<p><img src="https://img2024.cnblogs.com/blog/608782/202502/608782-20250205174657170-1418332646.png" alt="" loading="lazy"></p>
<p>此造型如果内部无需镂空，整体还是比较简单的，利用 <code>background: radial-gradient()</code> 径向渐变或者 <code>mask</code>，都能比较轻松的实现。</p>
<p>我们快速回顾一下，看这样一个简单的例子：</p>
<pre><code class="language-HTML">&lt;div&gt;&lt;/div&gt;
</code></pre>
<pre><code class="language-CSS">div {
    background-image: radial-gradient(circle at 100% 100%, transparent 0, transparent 12px, #2179f5 12px);
}
</code></pre>
<p>可以得到这样一个图形：</p>
<p><img src="https://img2024.cnblogs.com/blog/608782/202502/608782-20250205174704587-660412563.png" alt="" loading="lazy"></p>
<p>所以，只需控制下 <code>background-size</code>，在 4 个角实现 4 个这样的图形即可：</p>
<pre><code class="language-HTML">&lt;div class="inset-circle"&gt;inset-circle&lt;/div&gt;
</code></pre>
<pre><code class="language-CSS">&amp;.inset-circle {
    background-size: 70% 70%;
    background-image: radial-gradient(
            circle at 100% 100%,
            transparent 0,
            transparent 12px,
            #2179f5 13px
        ),
        radial-gradient(
            circle at 0 0,
            transparent 0,
            transparent 12px,
            #2179f5 13px
        ),
        radial-gradient(
            circle at 100% 0,
            transparent 0,
            transparent 12px,
            #2179f5 13px
        ),
        radial-gradient(
            circle at 0 100%,
            transparent 0,
            transparent 12px,
            #2179f5 13px
        );
    background-repeat: no-repeat;
    background-position: right bottom, left top, right top, left bottom;
}
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/608782/202502/608782-20250205174711971-1863931392.png" alt="" loading="lazy"></p>
<h3 id="借助-mask-实现渐变的内切圆角按钮">借助 mask 实现渐变的内切圆角按钮</h3>
<p>如果背景色要求渐变怎么办呢？</p>
<p>假设我们有一张矩形背景图案，我们只需要使用 <code>mask</code> 实现一层遮罩，利用 <code>mask</code> 的特性，把 4 个角给遮住即可。</p>
<p><code>mask</code> 的代码和上述的圆角切角代码非常类似，简单改造下即可得到渐变的内切圆角按钮：</p>
<pre><code class="language-HTML">&lt;div class="mask-inset-circle"&gt;inset-circle&lt;/div&gt;
</code></pre>
<pre><code class="language-CSS">.mask-inset-circle {
    background: linear-gradient(45deg, #2179f5, #e91e63);
    mask: radial-gradient(
            circle at 100% 100%,
            transparent 0,
            transparent 12px,
            #2179f5 13px
        ),
        radial-gradient(
            circle at 0 0,
            transparent 0,
            transparent 12px,
            #2179f5 13px
        ),
        radial-gradient(
            circle at 100% 0,
            transparent 0,
            transparent 12px,
            #2179f5 13px
        ),
        radial-gradient(
            circle at 0 100%,
            transparent 0,
            transparent 12px,
            #2179f5 13px
        );
    mask-repeat: no-repeat;
    mask-position: right bottom, left top, right top, left bottom;
    mask-size: 70% 70%;
}
</code></pre>
<p>这样，我们就得到了这样一个图形：</p>
<p><img src="https://img2024.cnblogs.com/blog/608782/202502/608782-20250205174718373-1993104007.png" alt="" loading="lazy"></p>
<h2 id="镂空的内凹圆角边框">镂空的内凹圆角边框</h2>
<p>但是，如果要求内部是整体镂空，只展示<strong>内凹圆角边框</strong>，整个复杂度一下就上来了。</p>
<p>上面的方法以及不适用了，原因在于很难利用 <code>mask</code> 制造一个不规则的内凹圆角形状进行裁剪，因此，我们必须另辟蹊径。</p>
<h3 id="渐变偏移技巧">渐变偏移技巧</h3>
<p>在 <a href="https://github.com/chokcoco/iCSS/issues/227" target="_blank" rel="noopener nofollow">CSS 高阶小技巧 - 角向渐变的妙用！</a> 一文中，我们介绍了渐变一个非常有意思的偏移技巧：</p>
<p>举个例子，下面是角向渐变 <code>conic-gradient()</code> 的简单介绍：</p>
<pre><code class="language-CSS">{
    background: conic-gradient(deeppink, yellowgreen);
}
</code></pre>
<p>从渐变的圆心、渐变起始角度以及渐变方向上来说，是这样的：</p>
<p><img src="https://img2024.cnblogs.com/blog/608782/202502/608782-20250205174726113-1601068749.png" alt="" loading="lazy"></p>
<p>划重点：</p>
<p>从图中可以看到，角向渐变的起始圆心点、起始角度和渐变方向为：</p>
<ol>
<li>起始点是图形中心，</li>
<li>默认渐变角度 0deg 是从上方垂直于圆心的</li>
<li>渐变方向以顺时针方向绕中心实现</li>
</ol>
<p>当然，我们也可以控制角向渐变的<strong>起始角度</strong>以及<strong>角向渐变的圆心</strong>。</p>
<p>稍微改一下上述代码：</p>
<pre><code class="language-CSS">{
    background: conic-gradient(from 270deg at 50px 50px, deeppink, yellowgreen);
}
</code></pre>
<p>效果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/608782/202502/608782-20250205174734762-2093966707.png" alt="" loading="lazy"></p>
<p>我们改变了<strong>起始角度</strong>以及<strong>角向渐变的圆心</strong>：</p>
<p><img src="https://img2024.cnblogs.com/blog/608782/202502/608782-20250205174740370-1077989746.png" alt="" loading="lazy"></p>
<p>了解了这个之后。我们基于上述的图形，重新绘制一个图形：</p>
<pre><code class="language-CSS">div {
    margin: auto;
    width: 200px;
    height: 200px;
    background: conic-gradient(from 270deg at 50px 50px, deeppink 0%, deeppink 90deg, transparent 90deg, transparent 
 360deg);
    border: 1px solid #000;
}
</code></pre>
<p>效果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/608782/202502/608782-20250205174746767-1606395170.png" alt="" loading="lazy"></p>
<p><strong>起始角度</strong>以及<strong>角向渐变的圆心</strong>没有改变，但是只让前 90deg 的图形为粉色，而后 270deg 的图形，设置为了透明色。</p>
<p>我们利用角向渐变，在图像内部，又实现了一个小的矩形！</p>
<p>接下来，我们再给上述图形，增加一个 <code>background-position: -25px, -25px</code>：</p>
<pre><code class="language-CSS">div {
    margin: auto;
    width: 200px;
    height: 200px;
    background: conic-gradient(from 270deg at 50px 50px, deeppink 0%, deeppink 90deg, transparent 90deg, transparent 
 360deg);
    background-position: -25px -25px;
    border: 1px solid #000;
}
</code></pre>
<p>这样，我们就神奇的得到了这样一个图形：</p>
<p><img src="https://img2024.cnblogs.com/blog/608782/202502/608782-20250205174753248-1195046542.png" alt="" loading="lazy"></p>
<p>为什么会有这样一种现象？如果我们在代码中加入 <code>background-repeat: no-repeat</code>：</p>
<pre><code class="language-CSS">div {
    width: 200px;
    height: 200px;
    background: conic-gradient(from 270deg at 50px 50px, deeppink 0%, deeppink 90deg, transparent 90deg, transparent 
 360deg);
    background-position: -25px -25px;
    background-repeat: no-repeat;
    border: 1px solid #000;
}
</code></pre>
<p>那么就只会剩下左上角一个角：</p>
<p><img src="https://img2024.cnblogs.com/blog/608782/202502/608782-20250205174759549-147642128.png" alt="" loading="lazy"></p>
<p>因此，这里实际上利用了渐变图形默认会 repeat 的特性，实际上是这么个意思：</p>
<p><img src="https://img2024.cnblogs.com/blog/608782/202502/608782-20250205174806137-1220403545.png" alt="" loading="lazy"></p>
<p><strong>理解了这张图，也就理解了整个技巧的核心所在</strong>！</p>
<h3 id="利用径向渐变实现圆环偏移">利用径向渐变实现圆环偏移</h3>
<p>掌握了上述渐变的偏移技巧后，我们将上述的角向渐变的案例，移植到径向渐变。</p>
<p>首先，我们利用径向渐变，实现一个小圆环：</p>
<pre><code class="language-HTML">&lt;div&gt;&lt;/div&gt;
</code></pre>
<pre><code class="language-CSS">div {
    width: 300px;
    height: 120px;
    border: 1px solid #ddd;
    background: radial-gradient(30px at 30px 30px, transparent calc(98% - 5px),#000 calc(100% - 5px) 98%, transparent);
}
</code></pre>
<p>解释一下，上述渐变语句的含义是在 <code>30px 30px</code> 处，实现一个半径为 <code>30px</code> 的径向渐变，渐变颜色为透明到黑色到透明，因此可以得到一个圆环：</p>
<p><img src="https://img2024.cnblogs.com/blog/608782/202502/608782-20250205174812745-1824142765.png" alt="" loading="lazy"></p>
<blockquote>
<p>为了方便大家看清楚 div 整体大小，利用 <code>border: 1px solid #ddd</code> 展示了整个 div 的轮廓，下图开始隐藏 border</p>
</blockquote>
<p>然后，利用上述的技巧，我们让渐变图形，整体偏移 <code>-30px -30px</code>，也就是让径向渐变图形的圆心，处于div的左上角 <code>0 0</code> 坐标处。</p>
<pre><code class="language-CSS">div {
    width: 300px;
    height: 120px;
    border: 1px solid #ddd;
    background: radial-gradient(30px at 30px 30px, transparent calc(98% - 5px),#000 calc(100% - 5px) 98%, transparent);
    background-position: -30px -30px;
}
</code></pre>
<p>此时，图形就变成了这样（下图去掉了 border）：</p>
<p><img src="https://img2024.cnblogs.com/blog/608782/202502/608782-20250205174817560-424022544.png" alt="" loading="lazy"></p>
<p>到这，大家应该能恍然大悟了吧。剩下的工作就比较简单了，我们只需要利用多重线性渐变，把剩余的线条补充出来即可，整个图形完整的代码如下：</p>
<pre><code class="language-CSS">div {
    width: 300px;
    height: 120px;
    background: 
        radial-gradient(30px at 30px 30px, transparent calc(98% - 5px),#ff2287 calc(100% - 5px) 98%, transparent),
        linear-gradient(#ff2287, #ff2287),
        linear-gradient(#ff2287, #ff2287),
        linear-gradient(#ff2287, #ff2287),
        linear-gradient(#ff2287, #ff2287);
    background-position: 
        -30px -30px, 
        29px 0, 29px 100%, // 两条横边
        0 29px, 100% 29px; // 两条纵边
    background-size: 
        100% 100%, 
        calc(100% - 58px) 5px, calc(100% - 58px) 5px, 
        5px calc(100% - 58px), 5px calc(100% - 58px);
    background-repeat: 
        repeat, 
        no-repeat, no-repeat, 
        no-repeat, no-repeat;
}    
</code></pre>
<p>这样，我们就成功得到了我们想要的不镂空的内凹圆角边框：</p>
<p><img src="https://img2024.cnblogs.com/blog/608782/202502/608782-20250205174826674-1281602345.png" alt="" loading="lazy"></p>
<p>当然，我们肯定是需要不同边框大小、颜色的各种不镂空的内凹圆角边框，我们利用 CSS 变量再进行一下封装：</p>
<pre><code class="language-CSS">.g-custom {    
    background: 
        radial-gradient(var(--border_radius) at var(--border_radius) var(--border_radius), transparent calc(97% - var(--border_width)),var(--color) calc(100% - var(--border_width)) 98%, transparent),
        linear-gradient(var(--color), var(--color)),
        linear-gradient(var(--color), var(--color)),
        linear-gradient(var(--color), var(--color)),
        linear-gradient(var(--color), var(--color));
    background-position: 
        calc(-1 * var(--border_radius)) calc(-1 * var(--border_radius)), 
        calc(var(--border_radius) - 1px) 0, calc(var(--border_radius) - 1px) 100%, // 两条横边
        0 calc(var(--border_radius) - 1px), 100% calc(var(--border_radius) - 1px); // 两条纵边
    background-size: 
        100% 100%, 
        calc(100% - calc(var(--border_radius) * 2 - 2px)) var(--border_width), calc(100% - calc(var(--border_radius) * 2 - 2px)) var(--border_width), 
        var(--border_width) calc(100% - calc(var(--border_radius) * 2 - 2px)), var(--border_width) calc(100% - calc(var(--border_radius) * 2 - 2px));
    background-repeat: 
        repeat, 
        no-repeat, no-repeat, 
        no-repeat, no-repeat;
}

.g-custom-1 {
    width: 200px;
    height: 120px;
    --color: #6678ff;
    --border_radius: 15px;
    --border_width: 1px;
}

.g-custom-2 {
    width: 240px;
    height: 160px;
    --color: #448800;
    --border_radius: 35px;
    --border_width: 3px;
}

.g-custom-3 {
    width: 180px;
    height: 180px;
    --color: #df73a0;
    --border_radius: 40px;
    --border_width: 6px;
}
</code></pre>
<p>这样，控制三个 CSS 变量，就可以得到各种不同样式的边框了：</p>
<p><img src="https://img2024.cnblogs.com/blog/608782/202502/608782-20250205174834383-551314766.png" alt="" loading="lazy"></p>
<p>完整的代码，你可以戳这里：<a href="https://codepen.io/Chokcoco/pen/dyxEoGM?editors=1100" target="_blank" rel="noopener nofollow">CodePen Demo -- 内凹角边框 &amp; inner-corner-border</a></p>
<p>怎么样，一个非常有技巧性的 CSS 图形，你 Get 到了吗？</p>
<h2 id="最后">最后</h2>
<p>好了，本文到此结束，希望本文对你有所帮助 😃</p>
<p>想 Get 到最有意思的 CSS 资讯，千万不要错过我的公众号 -- <strong>iCSS前端趣闻</strong> 😄</p>
<p>更多精彩 CSS 技术文章汇总在我的 <a href="https://github.com/chokcoco/iCSS" target="_blank" rel="noopener nofollow">Github -- iCSS</a> ，持续更新，欢迎点个 star 订阅收藏。</p>
<p>如果还有什么疑问或者建议，可以多多交流，原创文章，文笔有限，才疏学浅，文中若有不正之处，万望告知。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-02-05 17:49">2025-02-05 17:48</span>&nbsp;
<a href="https://www.cnblogs.com/coco1s">ChokCoco</a>&nbsp;
阅读(<span id="post_view_count">3156</span>)&nbsp;
评论(<span id="post_comment_count">3</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18699898);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18699898', targetLink: 'https://www.cnblogs.com/coco1s/p/18699898', title: '巧用 CSS 实现高频出现的复杂怪状按钮 - 镂空的内凹圆角边框' })">举报</a>
</div>
        