
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18847072" title="发布于 2025-04-25 17:28">
    <span role="heading" aria-level="2">『Plotly实战指南』--样式定制高级篇</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在数据可视化领域，<code>Plotly</code>不仅是高效的绘图工具，更是设计师的创意画布。</p>
<p>当基础图表已无法满足品牌化需求时，样式定制能力将成为数据叙事的关键武器。</p>
<p>深入的样式定制能够帮助我们打造品牌化图表、实现精准的视觉表达，并显著提升交互体验。</p>
<p>本文将深入探讨<code>Plotly</code>的样式定制高级技巧，从自定义模板的创建到颜色映射与字体的高级应用，希望能帮助你更好的实现数据可视化项目。</p>
<h1 id="1-自定义模板">1. 自定义模板</h1>
<p>自定义模板是 <code>Plotly</code> 样式定制的核心工具之一。</p>
<p>通过模板，我们可以定义图表的整体风格，包括布局、颜色和字体等，从而实现一致性和可复用性。</p>
<h2 id="11-模板的创建">1.1. 模板的创建</h2>
<p>模板的创建基于一个字典结构，其中包含多个关键配置项。</p>
<pre><code class="language-python">import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio

# 创建自定义模板
custom_template = go.layout.Template()
custom_template.layout.paper_bgcolor = 'lightgray'
custom_template.layout.plot_bgcolor = 'white'
custom_template.layout.xaxis.gridcolor = '#f5b7b1'
custom_template.layout.yaxis.gridcolor = '#abebc6'
custom_template.layout.font.family = 'Arial'
custom_template.layout.font.size = 12

# 自定义模板的名称
pio.templates["my_theme"] = custom_template

df = px.data.iris()
fig = px.scatter(df, x="sepal_width", y="sepal_length", template="my_theme")

fig.show()
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202504/83005-20250425172754601-1612338860.png" alt="" loading="lazy"></p>
<p>借助 <code>go.layout.Template()</code> 创建一个新的模板对象，并且对模板的各项属性进行设置，例如背景颜色、网格颜色、字体等。</p>
<p>利用 <code>pio.templates</code> 把自定义模板添加到可用模板列表中。</p>
<h2 id="12-模板的保存与复用">1.2. 模板的保存与复用</h2>
<p>创建好自定义模板后，可以将其保存为 <code>JSON</code> 文件，方便在其他项目中复用。</p>
<pre><code class="language-python">import json

# 将模板的布局转换为字典
template_dict = {
    'layout': custom_template.layout.to_plotly_json()
}

# 保存为 JSON 文件
with open('custom_template.json', 'w') as f:
    json.dump(template_dict, f, indent=4)
</code></pre>
<p>其他项目通过加载<code>custom_template.json</code>来复用模板。</p>
<pre><code class="language-python"># 从 JSON 文件加载模板
with open("custom_template.json", "r") as f:
    loaded_template_dict = json.load(f)

# 将加载的模板添加到可用模板列表中
pio.templates["loaded_custom_template"] = loaded_template_dict

# 使用加载的自定义模板创建图表
df = px.data.iris()
fig = px.scatter(
    df,
    x="sepal_width",
    y="sepal_length",
    template="loaded_custom_template",
)

# 显示图表
fig.show()
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202504/83005-20250425172754592-347620319.png" alt="" loading="lazy"></p>
<h1 id="2-自定义颜色和字体">2. 自定义颜色和字体</h1>
<p>颜色和字体是视觉表达的关键元素。</p>
<p>通过自定义颜色映射和字体，我们可以进一步提升图表的视觉效果。</p>
<h2 id="21-离散颜色">2.1. 离散颜色</h2>
<p><strong>离散颜色</strong>映射通常用于分类数据。以下是一个使用离散颜色映射的柱状图示例：</p>
<pre><code class="language-python">import plotly.express as px

# 加载数据
df = px.data.tips()

# 定义离散颜色映射
discrete_colorscale = ["#4C72B0", "#55A868", "#C44E52", "#8172B2", "#CCB974"]

# 绘制柱状图并应用离散颜色映射
fig = px.bar(
    df,
    x="day",
    y="total_bill",
    color="sex",
    color_discrete_sequence=discrete_colorscale,  # 使用离散颜色映射
    title="按日和性别统计的总账单",
)

# 显示图表
fig.show()
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202504/83005-20250425172754529-2121975662.png" alt="" loading="lazy"></p>
<p>在这个示例中：</p>
<ul>
<li><code>color_discrete_sequence</code>参数用于指定离散颜色映射</li>
<li><code>color</code>参数指定了分类变量<code>sex</code>，<code>Plotly</code>根据这个变量为不同类别分配颜色</li>
</ul>
<h2 id="22-连续颜色">2.2. 连续颜色</h2>
<p><strong>连续颜色</strong>映射通常用于数值范围数据。以下是一个使用连续颜色映射的散点图示例：</p>
<pre><code class="language-python">import plotly.express as px

# 加载数据
df = px.data.iris()

# 定义连续颜色映射
continuous_colorscale = [[0, "#FFEDA0"], [0.5, "#FEB24C"], [1, "#E6550D"]]

# 绘制散点图并应用连续颜色映射
fig = px.scatter(
    df,
    x="sepal_width",
    y="sepal_length",
    size="petal_length",
    color="petal_width",
    color_continuous_scale=continuous_colorscale,  # 使用连续颜色映射
    title="Iris 数据集：萼片宽度与萼片长度",
)

# 显示图表
fig.show()
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202504/83005-20250425172754581-568740737.png" alt="" loading="lazy"></p>
<p>在这个示例中：</p>
<p><code>color_continuous_scale</code>参数使用了<code>Plotly</code>内置的颜色映射方案<code>Viridis</code>。</p>
<p><code>Plotly</code> 提供了许多其他内置颜色映射方案，如<code>Plasma</code>、<code>Inferno</code>、<code>Magma</code>等。</p>
<h2 id="23-分级字体控制">2.3. 分级字体控制</h2>
<p><strong>分级字体</strong>控制允许你为不同的图表元素（如标题、图例、坐标轴标签等）设置不同的字体样式。</p>
<pre><code class="language-python">import plotly.express as px

# 加载数据
df = px.data.tips()

# 绘制柱状图
fig = px.bar(
    df, x="day", y="total_bill", color="sex", title="按日和性别统计的总账单"
)

# 分级字体设置
fig.update_layout(
    title_font={"family": "Roboto", "size": 24, "color": "#333333"},  # 标题字体
    legend_font={"family": "Open Sans", "size": 14, "color": "#555555"},  # 图例字体
    xaxis_title_font={"family": "Lato", "size": 16, "color": "#333333"},  # X 轴标题字体
    yaxis_title_font={"family": "Lato", "size": 16, "color": "#333333"},  # Y 轴标题字体
    xaxis_tickfont={"family": "Arial", "size": 12, "color": "#666666"},  # 坐标轴刻度字体
    yaxis_tickfont={"family": "Arial", "size": 15, "color": "#666666"},  # 坐标轴刻度字体
)

# 显示图表
fig.show()
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202504/83005-20250425172754531-1145968742.png" alt="" loading="lazy"></p>
<p>在这个示例中：</p>
<ul>
<li><code>title_font</code>设置了标题的字体样式</li>
<li><code>legend_font</code>设置了图例的字体样式</li>
<li><code>xaxis_title_font</code>和<code>yaxis_title_font</code>分别设置了 X 轴和 Y 轴标题的字体样式</li>
<li><code>xaxis_tickfont</code>和<code>yaxis_tickfont</code>设置了坐标轴刻度的字体样式</li>
</ul>
<h1 id="3-总结">3. 总结</h1>
<p>通过深入的样式定制，<code>Plotly</code>能够实现可视化的一致性、提升信息传达效率和优化用户体验。</p>
<p>以下是几点实践建议：</p>
<ul>
<li>模板设计遵循<strong>「颜色-布局-字体」</strong>优先级原则：颜色是视觉的第一印象，布局决定了整体结构，字体则影响细节体验</li>
<li>颜色映射需保证<strong>色盲友好性</strong>：避免红绿直接对比，选择色盲友好的配色方案。</li>
<li>字体选择需考虑<strong>多平台兼容性</strong>：优先使用 Web 安全字体，并为自定义字体设置回退选项。</li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5383836515023148" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-25 17:28">2025-04-25 17:28</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">39</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18847072);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18847072', targetLink: 'https://www.cnblogs.com/wang_yb/p/18847072', title: '『Plotly实战指南』--样式定制高级篇' })">举报</a>
</div>
        