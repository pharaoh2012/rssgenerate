
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/SilverGo/p/19055961" title="发布于 2025-08-24 21:57">
    <span role="heading" aria-level="2">关于并查集</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="table-of-contents">Table of Contents</h1>
<ol>
<li><a href="#org60de1c6" rel="noopener nofollow">何为并查集</a></li>
<li><a href="#org14e5e3b" rel="noopener nofollow">模版</a>
<ol>
<li><a href="#orgca00ac4" rel="noopener nofollow">题目描述</a></li>
<li><a href="#orge640182" rel="noopener nofollow">WriteUp</a></li>
</ol>
</li>
<li><a href="#org5e55dca" rel="noopener nofollow">一些补充：</a></li>
<li><a href="#orgee64a42" rel="noopener nofollow">结语&amp;一些题目：</a></li>
</ol>
<p>P.S.:当前是挑战3个月冲击省一的第14天，距离CSP-J2开赛还有68天<br>
这篇文章是由于昨天晚上做了一个有捆绑的01背包，需要使用并查集，我暂时使用dfs代替，遂决定，今天拿下<br>
（毕竟数据结构这种东西什么 <del>猎奇</del> 算法都有可能用）</p>
<p><a id="org60de1c6"></a></p>
<h1 id="何为并查集">何为并查集</h1>
<p>简单来说，就是需要对集合进行操作，包括：<strong>确认一个元素属于哪一个集合（或判断两个元素是否在同一个集合中）、合并两个集合；</strong></p>
<p>而能做到以非常快的速度完成上面两个操作的数据结构就是————可以快速合并、查询的集合，简称 <strong>“并查集”</strong></p>
<p><a id="org14e5e3b"></a></p>
<h1 id="模版">模版</h1>
<p>下面是并查集的模版题：洛谷 P3367 【模板】并查集（难度：提高-）<br>
我们借助这道题目进行对并查集的讲解</p>
<p><a id="orgca00ac4"></a></p>
<h2 id="题目描述">题目描述</h2>
<p>如题，现在有一个并查集，你需要完成合并和查询操作。</p>
<p>## 输入格式<br>
第一行包含两个整数 <span class="math inline">\(N,M\)</span> ,表示共有 <span class="math inline">\(N\)</span> 个元素和 <span class="math inline">\(M\)</span> 个操作。<br>
接下来 <span class="math inline">\(M\)</span> 行，每行包含三个整数 <span class="math inline">\(Z_i,X_i,Y_i\)</span> 。<br>
当 <span class="math inline">\(Z_i=1\)</span> 时，将 <span class="math inline">\(X_i\)</span> 与 <span class="math inline">\(Y_i\)</span> 所在的集合合并。<br>
当 <span class="math inline">\(Z_i=2\)</span> 时，输出 <span class="math inline">\(X_i\)</span> 与 <span class="math inline">\(Y_i\)</span> 是否在同一集合内，是的输出<br>
`Y` ；否则输出 `N` 。</p>
<p>## 输出格式<br>
对于每一个 <span class="math inline">\(Z_i=2\)</span> 的操作，都有一行输出，每行包含一个大写字母，为 `Y` 或者 `N` 。</p>
<p>## 数据范围：<br>
对于 <span class="math inline">\(100\%\)</span> 的数据，<span class="math inline">\(1\le N\le 2\times 10^5\)</span>，<span class="math inline">\(1\le M\le 10^6\)</span>，<span class="math inline">\(1 \le X_i, Y_i \le N\)</span>，<span class="math inline">\(Z_i \in \{ 1, 2 \}\)</span>。</p>
<p><a id="orge640182"></a></p>
<h2 id="writeup">WriteUp</h2>
<p>并查集的时间复杂度为 <span class="math inline">\(\Theta(\alpha(n))\)</span> ，将其换为大O标记，就是平均复杂度；<br>
这里的 <span class="math inline">\(\alpha(n)\)</span> 为反阿克曼函数，增长极其缓慢，可以认为一般小于4，也就是常数级；</p>
<p>这里先讲讲并查集是如何做到快速操作的：<br>
对于每个集合，并查集都选取一个代表元素，简称<strong>代表元</strong>，对于查询两个元素是否在同一个集合中的操作，只需要看看<strong>这两个元素所在集合的代表元是否一样即可</strong>；</p>
<p>那么如何找代表元呢：<br>
当每个元素各自属于一个集合时，他们的代表元为自己，记为 <span class="math inline">\(w_x\)</span> ；<br>
若一个集合中有不止1个元素，证明这个集合是由另外的集合合并过来的，因此现在的问题转换成了：合并时如何修改代表元；</p>
<p>每次当我们合并两个集合时（注意：也包括上面单一元素的情况），我们只需要将一个集合中所有元素的代表元设为另一个集合的代表元即可，现在请读者思考一下这样做的时间复杂度是多少；<br>
显然，是线性的，即 <span class="math inline">\(O(n)\)</span> 级别，但是我们注意到，查询操作是 <span class="math inline">\(O(1)\)</span> 的，这提示我们，通过提高查询操作的时间，有可能能够降低合并操作的时间；</p>
<p>这里补充一点树的知识：众所周知，树的一枝上会有分叉，分叉之后可能会有叶，也可能再分叉，我们如果将分叉点和叶都抽象成点，那么紧跟着一个分叉点的叶和这个分叉点就有“父子关系”，称<strong>分叉点为叶节点的直接父亲（直接前驱），叶节点称为子节点，分叉点称为父节点</strong>；</p>
<p>还记得何为 <span class="math inline">\(w_x\)</span> 吗，我们定义为元素 <span class="math inline">\(x\)</span> 所在集合的代表元；<br>
我们修改一下： <span class="math inline">\(w_x\)</span> 为元素 <span class="math inline">\(x\)</span> 的直接父亲，特别的，当这个元素为某个集合的代表元时，它的直接父亲为它自己；</p>
<p>每次合并时，我们先令一个集合为父，另一个为子，找到父集的代表元，将子集的代表元的直接父亲设为父集代表元；<br>
打个比方：如果小A是B的员工，现在B所在部门要合并到C的部门，那么B的上司为C，C自然也是A的一个领导了；<br>
这里A、B的所在集合的代表元就是B，而与C合并时直接将B的父亲设为C，自然A也属于C了；</p>
<p>下一个问题是：<strong>如何寻找一个集合的代表元</strong>：</p>
<p>我们定义： <span class="math inline">\(find(x)\)</span> 为寻找一个元素所在集合的代表元的函数，显然，当 <span class="math inline">\(w_x = x\)</span> 时，就找到了代表元，因为根据定义，只有代表元的父节点是其本身；<br>
现在我们还是回到刚才的比喻：小A现在想找到管自己的最大的一个人，它就先找了B，问了B同样的问题，B又去找了自己的顶头上司C，C发现自己就是最大的，于是告诉B，B告诉A，小A就知道了；<br>
所以当 <span class="math inline">\(w_x \not= x\)</span> 时，我们就需要对父节点继续进行 <span class="math inline">\(find(x)\)</span> 这个操作，直到找到了代表元；</p>
<p>如果读者比较细心，就会发现，目前的复杂度仍然不是常数级，在每次合并时，都需要进行一次 <span class="math inline">\(find(x)\)</span> ，而 <span class="math inline">\(find(x)\)</span> 的复杂度是跟深度有关的（比如小A有100个上司，那么查找自己的总经理的询问次数就是100次），是 <span class="math inline">\(O(n)\)</span> 线性级；</p>
<p>所以，目前的并查集仍然不是完全体，我们需要进一步优化；<br>
如果我们在小A得到了自己的总经理是C这个结果之后，直接让小A的父节点为C，那么下次小A的下级（如果有的话）询问自己的总经理是谁是，就能跳过B这一步，直接从小A这里得到了答案；<br>
更一般的，我们如果小A到C之间有100个人，当小A询问完之后，让这里每一个人的父节点都是C，那么下次任何一个人询问的成本都将是1次，常数级，这就是我们想要的；<br>
也就是大名鼎鼎的————“并查集之 路径压缩”</p>
<p>具体的讲，就是每次执行 <span class="math inline">\(find(x)\)</span> 这个操作时，我们把所有节点的父节点都设为代表元，这样下一次的合并操作就是 <span class="math inline">\(O(1)\)</span> 的；<br>
当然，第一次执行 <span class="math inline">\(find(x)\)</span> 这个操作时没有这种优化效果；</p>
<p>我们回到最开始的问题：<br>
我们需要并查集能够在常数时间内完成：1.合并两个元素所在集合 2.判断两个元素是否在同一个集合中；<br>
现在显然，1我们已经通过代表元和路径压缩做到了，那么2呢；（这里如果读者反应过来了，可以略过）<br>
对于2，我们只需要判断 <span class="math inline">\(find(x)\)</span> 是否等于 <span class="math inline">\(find(y)\)</span> ，就OK了；<br>
而 <span class="math inline">\(find(x)\)</span> 在路径压缩下是近似 <span class="math inline">\(O(1)\)</span> 的，所以，全部的目标达成；</p>
<p>下面给出C++的代码：</p>
<pre><code>#include&lt;iostream&gt;
using namespace std;
const int MAXN = 2e5+7;
int fa[MAXN];
int n,m;
int op,u,v;
int find(int x){
    if(fa[x]==x) return x; //找到了代表元
    fa[x] = find(fa[x]);   //询问父节点，并将代表元设为询问节点的父节点
    return fa[x];
}
void union_set(int x,int y){
    int p = find(x),q = find(y);
    fa[q] = p;    //将y所在集合的代表元的父节点设为x所在集合的代表元
}
bool if_same(int x,int y){
    return find(x)==find(y);
}
/*
  初始化函数，参数为元素数量；
*/
void init(int x) {
    for (int i=1;i&lt;=x;i++) {
        fa[i] = i;
    }
}
int main() {
    cin&gt;&gt;n&gt;&gt;m;
    init(n);
    for(int i=0;i&lt;m;i++) {
        cin&gt;&gt;op&gt;&gt;u&gt;&gt;v;
        if (op==1) union_set(u,v);
        else {
            bool tmp = if_same(u,v);
            if (tmp) {
                cout&lt;&lt;"Y"&lt;&lt;endl;
            }else {
                cout&lt;&lt;"N"&lt;&lt;endl;
            }
        }
    }
    return 0;
}
</code></pre>
<p><a id="org5e55dca"></a></p>
<h1 id="一些补充">一些补充：</h1>
<p>1.反阿克曼函数的增长真的非常非常慢，在操作数 <span class="math inline">\(N \le 10^{18}\)</span> 的情况下都小于4<br>
2.平均复杂度的说法是不严谨的，应该是均摊复杂度接近常数级<br>
3.这里没有提到“按秩合并”的方法，在一般情况下，路径压缩的算法已经很优，再使用按秩合并意义不大，不过如果是OI竞赛，建议带上，这里受限于篇幅，暂不介绍</p>
<p>不过提一嘴：所谓的秩，就是树的高度，当合并两个集合时，将树矮的集合并到树高的集比较好，具体原因可以想想有100个上司的小A<br>
实现很简单，增加一个辅助数组即可；</p>
<p>4.find函数在递归深度比较大时可能爆栈，可以改成循环实现，也很简单；</p>
<p><a id="orgee64a42"></a></p>
<h1 id="结语一些题目">结语&amp;一些题目：</h1>
<blockquote>
<p>“命运要靠自己来把握”————《强风吹拂》</p>
</blockquote>
<p>并查集的题目：<a href="https://www.luogu.com.cn/training/3065#problems" target="_blank" rel="noopener nofollow">https://www.luogu.com.cn/training/3065#problems</a><br>
相当一部分是模版题，欢迎挑战</p>
<p>如有笔误，欢迎指正，不吝赐教</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.001388888888888889" data-date-updated="2025-08-24 21:59">2025-08-24 21:57</span>&nbsp;
<a href="https://www.cnblogs.com/SilverGo">Ghost-Face</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19055961);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19055961', targetLink: 'https://www.cnblogs.com/SilverGo/p/19055961', title: '关于并查集' })">举报</a>
</div>
        