
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/12lisu/p/18880196" title="发布于 2025-05-16 16:21">
    <span role="heading" aria-level="2">打印高质量日志的10条军规</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>去年双十一大促，我面对监控大屏上疯狂跳动的红色指标，颤抖着打开服务器日志，看到的却是这样的画面：</p>
<pre><code>用户登录失败  
订单创建出错 null  
ERROR 非法参数
</code></pre>
<p>那一刻我突然顿悟：<strong>写不好日志的程序员，就像不会写病历的医生</strong>。</p>
<p>这篇文章跟大家一起聊聊打印优质日志的10条军规，希望对你会有所帮助。</p>
<p><img src="https://files.mdnice.com/user/5303/bd88aa6f-7f98-4fe2-b1d4-508f321421ef.png" alt="" loading="lazy"></p>
<h2 id="第1条格式统一">第1条：格式统一</h2>
<p><strong>反例（管理看到会扣钱）</strong>：</p>
<pre><code class="language-java">log.info("start process");
log.error("error happen"); 
</code></pre>
<p>无时间戳，无上下文。</p>
<p><strong>正解代码</strong>：</p>
<pre><code class="language-xml">&lt;!-- logback.xml核心配置 --&gt;
&lt;pattern&gt;
    %d{yy-MM-dd HH:mm:ss.SSS} 
    |%X{traceId:-NO_ID} 
    |%thread 
    |%-5level 
    |%logger{36} 
    |%msg%n
&lt;/pattern&gt;
</code></pre>
<p>在logback.xml中统一配置了日志的时间格式、tradeId，线程、等级、日志详情都信息。</p>
<p>日志的格式统一了，更方便点位问题。</p>
<p><img src="https://files.mdnice.com/user/5303/c0c9c38a-7684-4597-9b20-5959c804fba6.png" alt="" loading="lazy"></p>
<h2 id="第2条异常必带堆栈">第2条：异常必带堆栈</h2>
<p><strong>反例（同事看了想打人）</strong>：</p>
<pre><code class="language-java">try {
    processOrder();
} catch (Exception e) {
    log.error("处理失败"); 
}
</code></pre>
<p>出现异常了，日志中没打印任何的异常堆栈信息。</p>
<p>相当于自己把异常吃掉了。</p>
<p>非常不好排查问题。</p>
<p><strong>正确姿势</strong>：</p>
<pre><code class="language-java">log.error("订单处理异常 orderId={}", orderId, e); // e必须存在！
</code></pre>
<p>日志中记录了出现异常的订单号orderId和异常的堆栈信息e。</p>
<h2 id="第3条级别合理">第3条：级别合理</h2>
<p><strong>反面教材</strong>：</p>
<pre><code class="language-java">log.debug("用户余额不足 userId={}", userId); // 业务异常应属WARN
log.error("接口响应稍慢"); // 普通超时属INFO
</code></pre>
<p>接口响应稍慢，打印了error级别的日志，显然不太合理。</p>
<p>正常情况下，普通超时属INFO级别。</p>
<p><strong>级别定义表</strong>：</p>
<table>
<thead>
<tr>
<th>级别</th>
<th>正确使用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>FATAL</td>
<td>系统即将崩溃（OOM、磁盘爆满）</td>
</tr>
<tr>
<td>ERROR</td>
<td>核心业务失败（支付失败、订单创建异常）</td>
</tr>
<tr>
<td>WARN</td>
<td>可恢复异常（重试成功、降级触发）</td>
</tr>
<tr>
<td>INFO</td>
<td>关键流程节点（订单状态变更）</td>
</tr>
<tr>
<td>DEBUG</td>
<td>调试信息（参数流水、中间结果）</td>
</tr>
</tbody>
</table>
<h2 id="第4条参数完整">第4条：参数完整</h2>
<p><strong>反例（让运维骂娘）</strong>：</p>
<pre><code class="language-java">log.info("用户登录失败");
</code></pre>
<p>上面这个日志只打印了“用户登录失败”这个文案。</p>
<p>谁在哪登录失败？</p>
<p><strong>侦探式日志</strong>：</p>
<pre><code class="language-java">log.warn("用户登录失败 username={}, clientIP={}, failReason={}", 
    username, clientIP, "密码错误次数超限");
</code></pre>
<p>登录失败的业务场景，需要记录哪个用户，ip是多少，在什么时间，登录失败了，失败的原因是什么。</p>
<p>时间在logback.xml中统一配置了格式。</p>
<p>这样才方便快速定位问题：</p>
<p><img src="https://files.mdnice.com/user/5303/ba602201-dcce-4b7c-9d49-c5ae0d64431e.png" alt="" loading="lazy"></p>
<h2 id="第5条数据脱敏">第5条：数据脱敏</h2>
<p><strong>血泪案例</strong>：<br>
某同事打印日志泄露用户手机号被投诉。</p>
<p>我在记录的日志中，需要对一下用户的个人敏感数据做脱敏处理。</p>
<p>例如下面这样：</p>
<pre><code class="language-java">// 脱敏工具类
public class LogMasker {
    public static String maskMobile(String mobile) {
        return mobile.replaceAll("(\\d{3})\\d{4}(\\d{4})", "$1****$2");
    }
}

// 使用示例
log.info("用户注册 mobile={}", LogMasker.maskMobile("13812345678"));
</code></pre>
<h2 id="第6条异步保性能">第6条：异步保性能</h2>
<p><strong>问题复现</strong><br>
某次秒杀活动中直接同步写日志，导致大量线程阻塞：</p>
<pre><code class="language-java">log.info("秒杀请求 userId={}, itemId={}", userId, itemId); 
</code></pre>
<p>高并发下IO阻塞。</p>
<p>致命伤害分析：</p>
<ol>
<li>同步写日志导致线程上下文切换频繁</li>
<li>磁盘IO成为系统瓶颈</li>
<li>高峰期日志打印耗时占总RT的25%</li>
</ol>
<p><strong>正确示范（三步配置法）</strong></p>
<h3 id="步骤1logbackxml配置异步通道">步骤1：logback.xml配置异步通道</h3>
<pre><code>&lt;!-- 异步Appender核心配置 --&gt;  
&lt;appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender"&gt;  
    &lt;!-- 不丢失日志的阈值：当队列剩余容量＜此值时，TRACE/DEBUG级别日志将被丢弃 --&gt;  
    &lt;discardingThreshold&gt;0&lt;/discardingThreshold&gt;  
    &lt;!-- 队列深度：建议设为 (最大并发线程数 × 2) --&gt;  
    &lt;queueSize&gt;4096&lt;/queueSize&gt;  
    &lt;!-- 关联真实Appender --&gt;  
    &lt;appender-ref ref="FILE"/&gt;  
&lt;/appender&gt;  

</code></pre>
<h3 id="步骤2日志输出优化代码">步骤2：日志输出优化代码</h3>
<pre><code>// 无需前置判断，框架自动处理  
log.debug("接收到MQ消息：{}", msg.toSimpleString()); // 自动异步写入队列  

// 不应做复杂计算后再打印（异步前仍在业务线程执行）  
// 错误做法：  
log.debug("详细内容：{}", computeExpensiveLog());  

</code></pre>
<p>流程图如下：<br>
<img src="https://files.mdnice.com/user/5303/16044563-27fb-4434-8dba-b7fc7f7a4db4.png" alt="" loading="lazy"></p>
<h3 id="步骤3性能关键参数公式">步骤3：性能关键参数公式</h3>
<pre><code>最大内存占用 ≈ 队列长度 × 平均单条日志大小  
推荐队列深度 = 峰值TPS × 容忍最大延迟(秒)  
例如：10000 TPS × 0.5s容忍 ⇒ 5000队列大小  
</code></pre>
<p><strong>风险规避策略</strong></p>
<ol>
<li>防队列堆积：监控队列使用率，达80%触发告警</li>
<li>防OOM：严格约束大对象toString()的调用</li>
<li>紧急逃生：预设JMX接口用于快速切换同步模式</li>
</ol>
<h2 id="第7条链路追踪">第7条：链路追踪</h2>
<p><strong>混沌场景</strong>：<br>
跨服务调用无法关联日志。</p>
<p>我们需要有链路追踪方案。</p>
<p><strong>全链路方案</strong>：</p>
<pre><code class="language-java">// 拦截器注入traceId
MDC.put("traceId", UUID.randomUUID().toString().substring(0,8));

// 日志格式包含traceId
&lt;pattern&gt;%d{HH:mm:ss} |%X{traceId}| %msg%n&lt;/pattern&gt;
</code></pre>
<p>可以在MDC中设置traceId。</p>
<p>后面可以通过traceId全链路追踪日志。</p>
<p>流程图如下：<br>
<img src="https://files.mdnice.com/user/5303/6444f619-4f0b-49a9-a9d3-598c962cc498.png" alt="" loading="lazy"></p>
<h2 id="第8条动态调参">第8条：动态调参</h2>
<p><strong>半夜重启的痛</strong>：<br>
线上问题需要临时开DEBUG日志，比如：查询用户的某次异常操作的日志。</p>
<p><strong>热更新方案</strong>：</p>
<pre><code class="language-java">@GetMapping("/logLevel")
public String changeLogLevel(
    @RequestParam String loggerName, 
    @RequestParam String level) {
    
    Logger logger = (Logger) LoggerFactory.getLogger(loggerName);
    logger.setLevel(Level.valueOf(level)); // 立即生效
    return "OK";
}
</code></pre>
<p>有时候我们需要临时打印DEBUG日志，这就需要有个动态参数控制了。</p>
<p>否则每次调整打印日志级别都需要重启服务，可能会影响用户的正常使用。</p>
<pre><code class="language-plain">journey
    title 日志级别动态调整
    section 旧模式
        发现问题 --&gt; 修改配置 --&gt; 重启应用 --&gt; 丢失现场
    section 新模式
        发现问题 --&gt; 动态调整 --&gt; 立即生效 --&gt; 保持现场
</code></pre>
<h2 id="第9条结构化存储">第9条：结构化存储</h2>
<p><strong>混沌日志</strong>：</p>
<pre><code class="language-java">用户购买了苹果手机 订单号1001 金额8999
</code></pre>
<p>上面的日志拼接成了一个字符串，虽说中间有空格分隔了，但哪些字段对应了哪些值，看起来不是很清楚。</p>
<p>我们在存储日志的时候，需要做结构化存储，方便快速的查询和搜索。</p>
<p><strong>机器友好式日志</strong>：</p>
<pre><code class="language-json">{
  "event": "ORDER_CREATE",
  "orderId": 1001,
  "amount": 8999,
  "products": [{"name":"iPhone", "sku": "A123"}]
}
</code></pre>
<p>这里使用了json格式存储日志。</p>
<p>日志中的数据一目了然。</p>
<h2 id="第10条智能监控">第10条：智能监控</h2>
<p><strong>最失败案例</strong>：<br>
某次用户开通会员操作，错误日志堆积3天才被发现，黄花菜都凉了。</p>
<p>我们需要在项目中引入智能监控。</p>
<p><strong>ELK监控方案</strong>：</p>
<p><img src="https://files.mdnice.com/user/5303/da115ed7-c544-4c26-a59b-94a23a3ebdab.png" alt="" loading="lazy"></p>
<p><strong>报警规则示例</strong>：</p>
<pre><code class="language-java">ERROR日志连续5分钟 &gt; 100条 → 电话告警  
WARN日志持续1小时 → 邮件通知
</code></pre>
<h2 id="总结">总结</h2>
<p><strong>研发人员的三大境界</strong>：</p>
<ol>
<li><strong>青铜</strong>：<code>System.out.println("error！")</code></li>
<li><strong>钻石</strong>：标准化日志 + ELK监控</li>
<li><strong>王者</strong>：
<ul>
<li>日志驱动代码优化</li>
<li>异常预测系统</li>
<li>根因分析AI模型</li>
</ul>
</li>
</ol>
<p><strong>最后的灵魂拷问</strong>：<br>
下次线上故障时，你的日志能让新人5分钟定位问题吗？</p>
<h2 id="最后说一句求关注别白嫖我">最后说一句(求关注，别白嫖我)</h2>
<p>如果这篇文章对您有所帮助，或者有所启发的话，帮忙关注一下我的同名公众号：苏三说技术，我的所有文章都会在公众号上首发，您的支持是我坚持写作最大的动力。</p>
<p>求一键三连：点赞、转发、在看。</p>
<p>关注公众号：【苏三说技术】，在公众号中回复：进大厂，可以免费获取我最近整理的10万字的面试宝典，好多小伙伴靠这个宝典拿到了多家大厂的offer。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0803793178599537" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-16 16:21">2025-05-16 16:21</span>&nbsp;
<a href="https://www.cnblogs.com/12lisu">苏三说技术</a>&nbsp;
阅读(<span id="post_view_count">211</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18880196);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18880196', targetLink: 'https://www.cnblogs.com/12lisu/p/18880196', title: '打印高质量日志的10条军规' })">举报</a>
</div>
        