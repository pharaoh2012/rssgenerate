
		<h2>
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lmy5215006/p/18798309" title="发布于 2025-03-30 16:59">
    <span role="heading" aria-level="2">Nginx学习笔记</span>
    

</a>

		</h2>
		<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="简介">简介</h1>
<p>为什么要用Nginx,比如ASP.NET的kestrel本身就可以作为Web服务器使用。<br>
主要从两点角度考虑：</p>
<ol>
<li>高可用<br>
nginx的高可用主要体现在反向代理实现负载均衡，并衍生出当web发版更新后，实现滚动更新(<code>热更新</code>)。使得用户无感</li>
<li>对运维友好<br>
通过简单的配置即可实现负载均衡</li>
<li>其它<br>
并发请求，实现不停机更新，负载均衡，以及处理流量高峰期。此外，Nginx还可以帮助更新网站域名，证书更新，限制用户访问和爬虫等。</li>
</ol>
<p>而以上几个优点，对于kestrel/tomcat 是比较复杂的。<br>
Nginx主要支持如下几个功能</p>
<ol>
<li>HTTP服务器<br>
web服务器，性能非常高</li>
<li>动静分离<br>
术业有专攻，kertrel服务器擅长处理http请求和响应，静态资源需要app.UseStaticFiles()来启用，其侧重点在于动态请求的处理。在生产环境中面对大量的静态资源，Nginx更擅长处理静态/FTP等资源。因此可以使用Nginx来实现动静分离</li>
<li>反向代理<br>
什么是正向代理？类似VPN，你需要访问google，但是被墙。所有你需要一个代理来帮你访问，然后再把内容转发给你。在浏览器中配置代理服务器的相关信息。<br>
什么是反向代理？对比正向代理，屏蔽了细节。浏览器不需要配置代理服务器，也不需要知道原来服务器的地址。通过nginx反向代理，nginx帮你全权管理好后续的操作。</li>
<li>负载均衡<br>
web服务器集群，将请求相对均匀的分配到不同的服务器上。</li>
</ol>
<h1 id="常见的nginx命令">常见的nginx命令</h1>
<ol>
<li>nginx -v/V<br>
查看版本</li>
<li>systemctl enable nginx<br>
设置自启动</li>
<li>nginx -t<br>
检查文件是否有误</li>
<li>nginx -s reload<br>
重新加载配置</li>
<li>nginx -s stop<br>
终止,也可通过Kill命令杀掉</li>
</ol>
<h1 id="核心配置文件">核心配置文件</h1>
<p>nginx的核心配置文件为nginx.conf主要分为四个部分</p>
<ol>
<li>全局块<br>
这一部分主要是设置一些全局生效的配置，比如工作进程，日志存放位置等<br>
<img src="https://img2024.cnblogs.com/blog/1084317/202503/1084317-20250329180027677-1136700797.png" alt="image" loading="lazy"></li>
<li>events事件块<br>
主要是设置单个进程的最大并发数<br>
<img src="https://img2024.cnblogs.com/blog/1084317/202503/1084317-20250329180114259-1101261464.png" alt="image" loading="lazy"></li>
<li>http块<br>
这里就是配置最多的地方了，比如协议支持，gzip压缩，端口监听，请求转发等<br>
<img src="https://img2024.cnblogs.com/blog/1084317/202503/1084317-20250329180219658-2096020888.png" alt="image" loading="lazy"></li>
<li>mail块<br>
nginx的额外功能，也可以当作邮件代理服务器<br>
<img src="https://img2024.cnblogs.com/blog/1084317/202503/1084317-20250329180344691-62596188.png" alt="image" loading="lazy"></li>
</ol>
<h1 id="nginx反向代理">Nginx反向代理</h1>
<p><img src="https://img2024.cnblogs.com/blog/1084317/202503/1084317-20250330135533882-143702384.png" alt="image" loading="lazy"></p>
<pre><code>	location / {
		proxy_pass         http://127.0.0.1:5000/;
	}
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1084317/202503/1084317-20250330135719526-198871007.png" alt="image" loading="lazy"></p>
<pre><code>	location /abc {
		proxy_pass         http://127.0.0.1:5000/;
	}
	location /def {
		proxy_pass         http://127.0.0.1:5001/;
	}
</code></pre>
<h2 id="奇技淫巧反向代理实现域名免备案">奇技淫巧:反向代理实现域名免备案</h2>
<p>原理：如果你的服务器是国内云服务器，那么通过域名访问就需要备案。但国外服务器不需要。因此可以通过国外服务器的反向代理，实现免备案访问。</p>
<pre><code>server {
    listen 80;
    server_name xxxx.com;#你的域名
    location / {
        proxy_pass xxxx  #你国内服务器的ip
    }
}
</code></pre>
<h1 id="nginx负载均衡">Nginx负载均衡</h1>
<p><img src="https://img2024.cnblogs.com/blog/1084317/202503/1084317-20250330135851104-1012500551.png" alt="image" loading="lazy"></p>
<pre><code>server {
	listen 80 default_server;
	listen [::]:80 default_server;

	upstream TestServer{
		server 127.0.0.1:5000;
		server 127.0.0.1:5001;
		server 127.0.0.1:5002;
	}
	location / {
		proxy_pass http://TestServer/;
	}
}

</code></pre>
<h2 id="负载均衡策略">负载均衡策略</h2>
<ol>
<li>轮询（Round Robin）<br>
原理：这是 Nginx 默认的负载均衡策略。它按顺序依次将客户端请求分发到后端服务器列表中的每一台服务器，当所有服务器都被轮询过一次后，又会重新从第一台服务器开始。<br>
适用场景：服务器性能相近、处理能力相当的场景。</li>
</ol>
<pre><code>upstream backend {
    server backend1.example.com;
    server backend2.example.com;
}

server {
    location / {
        proxy_pass http://backend;
    }
}
</code></pre>
<ol start="2">
<li>加权轮询（Weighted Round Robin）<br>
原理：在轮询策略的基础上，为每台后端服务器分配一个权重值。权重值越高的服务器，被分配到请求的概率就越大。这使得性能更强的服务器能够处理更多的请求。<br>
适用场景：硬件配置、性能等存在差异时，使用加权轮询可以更合理地分配请求</li>
</ol>
<pre><code>upstream backend {
    server backend1.example.com weight=3;
    server backend2.example.com weight=1;
}

server {
    location / {
        proxy_pass http://backend;
    }
}
</code></pre>
<ol start="3">
<li>IP 哈希（IP Hash）<br>
原理：根据客户端的 IP 地址进行哈希计算，将相同 IP 地址的客户端请求始终分发到同一台后端服务器上。这样可以保证客户端与服务器之间的会话一致性。<br>
适用场景：适用于需要保持会话状态的应用，如购物车、用户登录等<code>单机部署</code>场景。</li>
</ol>
<pre><code>upstream backend {
    ip_hash;
    server backend1.example.com;
    server backend2.example.com;
}

server {
    location / {
        proxy_pass http://backend;
    }
}
</code></pre>
<ol start="4">
<li>最少连接<br>
原理：将新的客户端请求分发到当前连接数最少的后端服务器上。这样可以确保每台服务器的负载相对均衡，避免某些服务器因连接过多而性能下降。<br>
适用场景：适用于处理请求时间差异较大的场景，比如不同的后端服务器处理复杂业务逻辑的能力不同。</li>
</ol>
<pre><code>upstream backend {
    least_conn;
    server backend1.example.com;
    server backend2.example.com;
}

server {
    location / {
        proxy_pass http://backend;
    }
}
</code></pre>
<ol start="5">
<li><span style="color: rgba(255, 0, 0, 1)">加权最少连接（Weighted Least Connections）</span><br>
这是目前最优解，综合考虑了服务器性能差异与业务逻辑性能占用差异<br>
原理：结合了加权轮询和最少连接的思想。在选择连接数最少的服务器时，还会考虑服务器的权重。权重高的服务器即使连接数稍多，也更有可能被选中。<br>
适用场景：在后端服务器性能有差异且请求处理时间不同的情况下使用。</li>
</ol>
<pre><code>upstream backend {
    least_conn;
    server backend1.example.com weight=3;
    server backend2.example.com weight=1;
}

server {
    location / {
        proxy_pass http://backend;
    }
}
</code></pre>
<ol start="6">
<li>随机（Random）<br>
原理：随机地将客户端请求分发到后端服务器列表中的某一台服务器上。<br>
适用场景：在对负载均衡的精确性要求不高，且后端服务器性能差异不大的场景中可以使用。</li>
</ol>
<pre><code>upstream backend {
    random;
    server backend1.example.com;
    server backend2.example.com;
}

server {
    location / {
        proxy_pass http://backend;
    }
}
</code></pre>
<ol start="7">
<li>随机加权（Random with Weight）<br>
原理：在随机分配的基础上，考虑服务器的权重。权重高的服务器被随机选中的概率更大。<br>
适用场景：综合了随机和加权的优点，适用于多种复杂场景。</li>
</ol>
<pre><code>upstream backend {
    random two least-time=header;
    server backend1.example.com weight=3;
    server backend2.example.com weight=1;
}

server {
    location / {
        proxy_pass http://backend;
    }
}
</code></pre>
<h2 id="健康度检查">健康度检查</h2>
<p>当我们配置负载均衡后，如果某一台服务器挂了。Nginx不会主动感知服务器是否挂掉，所以请求可能会超时无响应。<br>
因此可以通过 Nginx 的 ngx_http_upstream_module 模块配置<code>主动健康检查</code>，或者使用第三方模块（如 ngx_http_upstream_check_module）来实现更完善的健康检查功能</p>
<pre><code>http {
    upstream backend {
        # 定义后端服务器
        server backend1.example.com;
        server backend2.example.com;

        # 配置健康检查
		# interval=3000：每隔3秒对后端服务器进行一次健康检查
		# rise=2：连续两次检查结果正常时，才标记为可用
		# fall=3：连续3次检查结果异常，标记为不可用
		# timeout=1000：检查的超时时间
		# type=http：使用htpp协议进行检查
        check interval=3000 rise=2 fall=3 timeout=1000 type=http;
		# 对应服务器的检查检查地址
        check_http_send "HEAD /healthcheck HTTP/1.0\r\n\r\n";
		# 设置当服务器返回2xx 3xx 状态码时，认为服务器正常
        check_http_expect_alive http_2xx http_3xx;
    }

    server {
        listen 80;
        server_name example.com;

        location / {
            proxy_pass http://backend;
        }
    }
}
</code></pre>
<h1 id="动静分离">动静分离</h1>
<p><img src="https://img2024.cnblogs.com/blog/1084317/202503/1084317-20250330141544458-1124131716.png" alt="image" loading="lazy"></p>
<pre><code>http {
    # 定义后端应用服务器地址
    upstream backend {
        server 127.0.0.1:8080; # 假设后端应用服务器监听 8080 端口
    }

    server {
        listen 80;
        server_name example.com; # 替换为你的域名

        # 处理静态资源请求
        location ~* \.(jpg|jpeg|png|gif|css|js|ico)$ {
            root /var/www/static; # 静态资源存放目录
            expires 30d; # 设置缓存时间为 30 天
            add_header Cache-Control "public, no-transform";
        }

        # 处理动态资源请求
        location / {
            proxy_pass http://backend; # 将请求转发到后端应用服务器
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
} 
</code></pre>
<h1 id="nginx进程机制">Nginx进程机制</h1>
<p>Nginx是以多进程的方式来运行。<br>
<img src="https://img2024.cnblogs.com/blog/1084317/202503/1084317-20250330143007188-990325853.png" alt="image" loading="lazy"></p>
<ol>
<li>master进程<br>
管理配置文件、启动 / 停止工作进程、监控子进程状态(worker进程意外退出负责重启)、接收外界信号(nginx -s reload)</li>
<li>worker进程<br>
监听客户端请求，具体处理网络请求，多个worker进程之间互相独立,采用异步非阻塞（事件驱动）机制</li>
</ol>
<p><img src="https://img2024.cnblogs.com/blog/1084317/202503/1084317-20250330144604810-1121339434.png" alt="image" loading="lazy"></p>
<h2 id="reload-如何实现热更新">reload 如何实现热更新</h2>
<ol>
<li>master进程对配置文件进行语法检查</li>
<li>通过后使用新的配置</li>
<li>修改配置成功后，新建worker进程</li>
<li>新建成功，给旧的worker进程发送关闭信息</li>
<li>旧worker进程收到信号后会继续服务，直到处理完接收到的请求</li>
<li>关闭旧worker进程</li>
</ol>
<h3 id="眼见为实">眼见为实</h3>
<p><img src="https://img2024.cnblogs.com/blog/1084317/202503/1084317-20250330144954321-1299760331.png" alt="image" loading="lazy"><br>
当我们执行nginx -s reload时，会发现worker进程id变了。这说明被重启过。</p>
<h2 id="worker进程如何避免竞争">worker进程如何避免竞争</h2>
<p>master进程创建后，会建立好要监听的socket。 然后再创建worker进程。因此当worker进程创建成功时，当listenfd新连接到达时，所有worker进程都会一拥而上造成<code>惊群效应</code>。<br>
因此nginx使用进程互斥锁来保证只有一个worker进程能够处理请求。来解决惊群效应带来的<code>fd竞争</code>。</p>
<h1 id="几个常用实践的简单介绍">几个常用实践的简单介绍</h1>
<h2 id="合并请求">合并请求</h2>
<p><img src="https://img2024.cnblogs.com/blog/1084317/202503/1084317-20250330152007911-1774653298.png" alt="image" loading="lazy"><br>
举个例子，当我们打开百度时，光一个js文件旧加载了36个。也就是36个tcp连接。这对服务器的压力也是不小的。<br>
因此，当多个客户端同时请求<code>相同或相似的资源</code>时,能否将这些资源合并为一个，从而降低服务器的资源消耗呢？<br>
Nginx提供了ngx_http_slice_module/ngx_http_v2_module模块，可以多个用户同时下载大文件,CSS,JS,IMG等静态资源时，将请求合并，从而降低服务器tcp/ip压力与网络带宽<br>
当然，模块还有很多第三方支持，比如nginx-http-concat/ nginx-merge-filter-module/ngx_http_combined_static_module 等</p>
<pre><code>#ngx_http_slice_module
http {
    # 开启请求合并功能
    slice 1m; 

    server {
        listen 80;
        server_name example.com;

        location /large-file {
            # 对 /large-file 路径下的请求启用请求合并
            slice 1m; 
            proxy_pass http://backend_server;
        }
    }
} 
</code></pre>
<pre><code>#nginx-http-concat
http {
    server {
        listen 80;
        server_name example.com;

        # 合并 JS 文件
        location ~* ^/js/(.*)\.js$ {
            concat on;                # 开启合并功能
            concat_types application/javascript; # 指定合并文件类型
            concat_max_files 10;     # 最多合并 10 个文件
            concat_unique on;        # 去重相同文件
            root /var/www/static;    # 文件根目录
        }

        # 合并 CSS 文件
        location ~* ^/css/(.*)\.css$ {
            concat on;
            concat_types text/css;
            concat_max_files 5;
            root /var/www/static;
        }
    }
}
</code></pre>
<h2 id="限流">限流</h2>
<h3 id="常见限流算法">常见限流算法</h3>
<ol>
<li>固定窗口算法<br>
将时间划分为固定窗口，统计窗口内请求数，超过阈值则限流。<br>
优点：实现简单，内存占用低。<br>
缺点：窗口切换时可能触发双倍突发（如窗口最后 1 秒和新窗口前 1 秒各 100 次）。<br>
应用场景：对精度要求不高的轻量级限流。</li>
<li>滑动窗口算法<br>
将时间窗口划分为多个子窗口，统计滑动时间范围内的请求数。<br>
比如将 1 分钟分为 6 个 10 秒的子窗口，统计最近 6 个子窗口的总和。<br>
优点：解决临界问题，限流更平滑。<br>
缺点：实现复杂度较高，需维护多个子窗口数据。<br>
应用场景：高并发且对精度要求高的场景。</li>
<li>漏桶算法<br>
请求进入漏桶后，以固定速率流出，超出容量的请求被丢弃。<br>
优点：有效削峰填谷，保证稳定输出。<br>
缺点：无法利用突发流量，可能降低资源利用率。<br>
应用场景：严格限制平均速率的场景（如 API 接口限流）。</li>
<li>令牌桶算法<br>
以固定速率生成令牌存入桶中，请求需消耗令牌才能通过，允许突发。<br>
优点：支持突发流量，同时控制平均速率。<br>
缺点：实现复杂度高于固定窗口。<br>
应用场景：允许瞬时高峰但需控制整体速率的场景（如 CDN 加速）。</li>
</ol>
<h3 id="限流模块">限流模块</h3>
<ol>
<li>ngx_http_limit_conn_module<br>
限制同一客户端的并发连接数，保护服务器资源。</li>
</ol>
<pre><code>http {
    limit_conn_zone $binary_remote_addr zone=addr:10m;  # 按IP分组，共享内存10MB
    server {
        location / {
            limit_conn addr 2;  # 每个IP最多2个并发连接
            proxy_pass http://backend;
        }
    }
}
</code></pre>
<ol start="2">
<li>ngx_http_limit_req_module<br>
基于漏桶算法限制请求速率，支持突发请求缓冲。</li>
</ol>
<pre><code>http {
    limit_req_zone $binary_remote_addr zone=req:10m rate=10r/m;  # 每分钟10请求
    server {
        location /api {
            limit_req zone=req burst=5 nodelay;  # 允许5个突发请求
            proxy_pass http://api_backend;
        }
    }
}
</code></pre>
<ol start="3">
<li>ngx_http_limit_rate_module<br>
限制客户端下载速度</li>
</ol>
<pre><code>location /downloads {
    limit_rate 200k;  # 200KB/s
    alias /data/downloads;
}
</code></pre>
<blockquote>
<p>限流模块还有很多，可以自行查阅AI。</p>
</blockquote>
<h2 id="防盗链">防盗链</h2>
<p>原理：通过Request Header中的referer是否是自己的域名，如果是，说明请求合法。如果不是，说明资源被其它网站盗链</p>
<pre><code>server {
    location ~* \.(jpg|jpeg|png|gif|css|js)$ {
        valid_referers none blocked example.com www.example.com;
        if ($invalid_referer) {
            return 403;
        }
    }
}
</code></pre>
<h3 id="反防盗链">反防盗链</h3>
<p>防盗链的本质，是设置一个标识，不仅仅是referer，也可以是签名等其它信息。http协议注定了，这些信息都是可以篡改的。<br>
比如直接加入&lt;meta name='referer' content='no-referrer'/ &gt; ，或者通过反向代理篡改referer信息，都是可以破解的<br>
因此，更多的时候，我们都是通过<code>url签名+有效期控制，访问限流，IP白名单</code>的形式来进行高级防盗链</p>
<h2 id="压缩">压缩</h2>
<h3 id="gzip">gzip</h3>
<p>gzip是一种广泛使用的数据压缩算法。当客户端向 Nginx 服务器请求资源时，若客户端支持gzip压缩（通过Accept-Encoding请求头表明），Nginx 会对响应内容进行gzip压缩，然后将压缩后的数据发送给客户端。客户端接收到数据后，再进行解压缩。</p>
<ol>
<li>优点：<br>
兼容性好，几乎所有现代浏览器都支持gzip压缩。<br>
配置简单，Nginx 默认支持gzip模块，无需额外编译。</li>
<li>缺点：<br>
压缩比相对 Brotli 较低，在某些情况下，数据压缩后的大小不如 Brotli。</li>
</ol>
<pre><code>http {
    # 开启gzip压缩
    gzip on;
    # 最小压缩文件大小，小于该值的文件不进行压缩
    gzip_min_length 1k;
    # 压缩级别，取值1 - 9，值越大压缩比越高，但CPU消耗也越大，一般设置为6
    gzip_comp_level 6;
    # 允许压缩的文件类型
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    # 为老的代理服务器添加Vary头
    gzip_vary on;
    # 禁用对IE 6以下版本的压缩
    gzip_disable "msie6";

    server {
        listen 80;
        server_name example.com;

        location / {
            root /var/www/html;
        }
    }
}  
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1084317/202503/1084317-20250330164339688-1189152537.png" alt="image" loading="lazy"></p>
<h3 id="brotli">brotli</h3>
<p>Brotli 是 Google 开发的一种新的压缩算法，它基于 LZ77 算法的现代变体、霍夫曼编码和二阶上下文建模。与gzip相比，Brotli 通常能提供更高的压缩比，从而进一步减少数据传输大小。</p>
<ol>
<li>优点：<br>
压缩比高，能显著减少数据传输大小，加快页面加载速度。<br>
对于文本类文件（如 HTML、CSS、JavaScript）的压缩效果尤其明显。</li>
<li>缺点：<br>
兼容性不如gzip，虽然大多数现代浏览器都支持 Brotli，但仍有一小部分旧浏览器不支持。<br>
需要额外安装ngx_brotli模块，配置相对复杂。<br>
要在 Nginx 中使用 Brotli 压缩，需要安装ngx_brotli模块</li>
</ol>
<pre><code>http {
    # 开启Brotli压缩
    brotli on;
    # 压缩级别，取值0 - 11，值越大压缩比越高，但CPU消耗也越大，一般设置为6
    brotli_comp_level 6;
    # 允许压缩的文件类型
    brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    server {
        listen 80;
        server_name example.com;

        location / {
            root /var/www/html;
        }
    }
}    
</code></pre>

</div>
<div class="clear"></div>

		<p class="postfoot">
			posted on 
<span id="post-date" data-last-update-days="0.5518856061064815" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-30 16:59">2025-03-30 16:59</span>&nbsp;
<a href="https://www.cnblogs.com/lmy5215006">叫我安不理</a>&nbsp;
阅读(<span id="post_view_count">76</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18798309" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18798309);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18798309', targetLink: 'https://www.cnblogs.com/lmy5215006/p/18798309', title: 'Nginx学习笔记' })">举报</a>

		</p>
	