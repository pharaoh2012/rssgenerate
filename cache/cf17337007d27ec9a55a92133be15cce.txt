
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Amd794/p/18853550" title="发布于 2025-04-29 13:49">
    <span role="heading" aria-level="2">异步IO与Tortoise-ORM的数据库</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<hr>
<p>title: 异步IO与Tortoise-ORM的数据库<br>
date: 2025/04/29 13:21:47<br>
updated: 2025/04/29 13:21:47<br>
author: cmdragon</p>
<p>excerpt:<br>
异步IO与同步IO的核心区别在于阻塞与非阻塞模式。Tortoise-ORM通过协议层、连接池层和ORM层实现异步数据库操作，支持高效的并发处理。用户管理系统搭建中，Tortoise-ORM与FastAPI结合，实现了用户创建和查询功能，并通过Pydantic进行数据校验。异步ORM适用于高并发场景，参数化查询可防止SQL注入。最佳实践包括连接池配置、查询优化和事务管理，确保系统性能和数据一致性。</p>
<p>categories:</p>
<ul>
<li>后端开发</li>
<li>FastAPI</li>
</ul>
<p>tags:</p>
<ul>
<li>异步IO</li>
<li>Tortoise-ORM</li>
<li>数据库操作</li>
<li>FastAPI</li>
<li>异步编程</li>
<li>连接池</li>
<li>事务管理</li>
</ul>
<hr>
<img src="https://static.shutu.cn/shutu/jpeg/open6a/2025/04/29/f09146a0e9eb787bd773e557e4dd75d1.jpeg" title="cmdragon_cn.png" alt="cmdragon_cn.png">
<img src="https://api2.cmdragon.cn/upload/cmder/20250304_012821924.jpg" title="cmdragon_cn.png" alt="cmdragon_cn.png">
<p>扫描<a href="https://api2.cmdragon.cn/upload/cmder/20250304_012821924.jpg" target="_blank" rel="noopener nofollow">二维码</a><br>
关注或者微信搜一搜：<code>编程智域 前端至全栈交流与成长</code></p>
<p><a href="https://tools.cmdragon.cn/zh/apps?category=ai_chat" target="_blank" rel="noopener nofollow">探索数千个预构建的 AI 应用，开启你的下一个伟大创意</a>：<a href="https://tools.cmdragon.cn/" target="_blank" rel="noopener nofollow">https://tools.cmdragon.cn/</a></p>
<h1 id="第一章异步io与tortoise-orm原理剖析">第一章：异步IO与Tortoise-ORM原理剖析</h1>
<h2 id="11-同步与异步的本质区别">1.1 同步与异步的本质区别</h2>
<p>想象你在快餐店点餐：</p>
<ul>
<li><strong>同步模式</strong>：收银员接单后站在炸薯条机前等待，直到薯条炸好才接待下一位顾客</li>
<li><strong>异步模式</strong>：收银员接单后立即将订单交给后厨，转身接待下一位顾客，后厨准备好餐点会主动通知收银员</li>
</ul>
<p>计算机领域的异步IO正是采用这种"非阻塞"模式：</p>
<pre><code class="language-python"># 同步操作（线程阻塞）
def sync_query():
    result = db.execute("SELECT * FROM users")  # 线程在此等待
    process(result)


# 异步操作（事件驱动）
async def async_query():
    result = await db.execute("SELECT * FROM users")  # 释放控制权
    process(result)
</code></pre>
<h2 id="12-tortoise-orm的异步实现">1.2 Tortoise-ORM的异步实现</h2>
<p>Tortoise-ORM通过三层架构实现异步操作：</p>
<table>
<thead>
<tr>
<th>层级</th>
<th>职责</th>
<th>关键技术</th>
</tr>
</thead>
<tbody>
<tr>
<td>协议层</td>
<td>数据库通信协议解析</td>
<td>asyncpg/aiomysql</td>
</tr>
<tr>
<td>连接池层</td>
<td>管理异步数据库连接</td>
<td>asyncio.Queue</td>
</tr>
<tr>
<td>ORM层</td>
<td>模型映射与查询构建</td>
<td>Python元类编程</td>
</tr>
</tbody>
</table>
<p>典型查询流程解析：</p>
<pre><code class="language-python">async def get_users():
    # 以下三个步骤交替执行，全程无阻塞
    users = await User.filter(age__gt=18)  # 1.生成SQL语句
    # 2.从连接池获取连接
    # 3.等待数据库响应
    return users
</code></pre>
<h2 id="13-实战用户管理系统搭建">1.3 实战：用户管理系统搭建</h2>
<h3 id="环境准备">环境准备</h3>
<pre><code class="language-bash">pip install fastapi uvicorn tortoise-orm aiosqlite pydantic
</code></pre>
<h3 id="项目结构">项目结构</h3>
<pre><code>project/
├── config.py
├── models.py
├── schemas.py
└── main.py
</code></pre>
<h3 id="模型定义modelspy">模型定义（models.py）</h3>
<pre><code class="language-python">from tortoise.models import Model
from tortoise import fields


class User(Model):
    id = fields.IntField(pk=True)
    username = fields.CharField(max_length=50, unique=True)
    hashed_password = fields.CharField(max_length=128)
    email = fields.CharField(max_length=100)
    created_at = fields.DatetimeField(auto_now_add=True)

    class Meta:
        table = "users"
</code></pre>
<h3 id="数据校验schemaspy">数据校验（schemas.py）</h3>
<pre><code class="language-python">from pydantic import BaseModel, EmailStr


class UserCreate(BaseModel):
    username: str
    password: str
    email: EmailStr

    class Config:
        schema_extra = {
            "example": {
                "username": "fastapi_user",
                "password": "strongpassword123",
                "email": "user@example.com"
            }
        }
</code></pre>
<h3 id="核心逻辑mainpy">核心逻辑（main.py）</h3>
<pre><code class="language-python">from fastapi import FastAPI, Depends, HTTPException
from tortoise.contrib.fastapi import register_tortoise
from models import User
from schemas import UserCreate

app = FastAPI()

# 初始化数据库
register_tortoise(
    app,
    db_url="sqlite://db.sqlite3",
    modules={"models": ["models"]},
    generate_schemas=True,
    add_exception_handlers=True,
)


@app.post("/users/", status_code=201)
async def create_user(user_data: UserCreate):
    # 密码哈希处理（实际项目应使用passlib）
    hashed_password = f"hashed_{user_data.password}"

    try:
        user = await User.create(
            username=user_data.username,
            hashed_password=hashed_password,
            email=user_data.email
        )
    except Exception as e:
        raise HTTPException(
            status_code=400,
            detail="Username already exists"
        )

    return {
        "id": user.id,
        "username": user.username,
        "email": user.email
    }


@app.get("/users/{user_id}")
async def get_user(user_id: int):
    user = await User.get_or_none(id=user_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    return {
        "id": user.id,
        "username": user.username,
        "email": user.email,
        "created_at": user.created_at.isoformat()
    }
</code></pre>
<h2 id="课后quiz">课后Quiz</h2>
<p><strong>问题1</strong>：以下哪种场景最适合使用异步ORM？<br>
A) 单用户的桌面应用程序<br>
B) 需要处理数千并发请求的API服务<br>
C) 执行复杂事务的财务系统<br>
D) 数据仓库的批量数据处理</p>
<p><strong>答案</strong>：B<br>
解析：异步ORM在高并发IO密集型场景下能显著提升吞吐量，而ACD场景更多需要的是事务完整性或计算能力。</p>
<p><strong>问题2</strong>：如何避免在ORM查询时发生SQL注入？<br>
A) 直接拼接字符串<br>
B) 使用ORM的参数化查询<br>
C) 手动过滤特殊字符<br>
D) 限制查询字段长度</p>
<p><strong>答案</strong>：B<br>
解析：Tortoise-ORM的查询方法会自动进行参数化处理，有效防止SQL注入，这是最安全的做法。</p>
<h2 id="常见报错解决方案">常见报错解决方案</h2>
<p><strong>错误1</strong>：<code>422 Validation Error</code><br>
原因分析：请求体不符合Pydantic模型要求<br>
解决方法：</p>
<ol>
<li>检查请求头<code>Content-Type</code>是否为<code>application/json</code></li>
<li>使用Swagger文档测试接口</li>
<li>查看返回信息中的错误字段提示</li>
</ol>
<p><strong>错误2</strong>：<code>RuntimeError: Event loop is closed</code><br>
原因分析：异步代码在错误的位置执行<br>
解决方法：</p>
<ol>
<li>确保所有异步操作都在async函数内</li>
<li>使用<code>asyncio.run()</code>正确启动事件循环</li>
<li>检查数据库连接是否正确关闭</li>
</ol>
<p><strong>错误3</strong>：<code>OperationalError: Connection refused</code><br>
原因分析：数据库连接配置错误<br>
解决方法：</p>
<ol>
<li>检查<code>db_url</code>格式：<code>dialect://user:password@host:port/database</code></li>
<li>确认数据库服务是否正常运行</li>
<li>验证网络防火墙设置</li>
</ol>
<h2 id="最佳实践建议">最佳实践建议</h2>
<ol>
<li><strong>连接池配置</strong>：根据数据库最大连接数设置<code>maxsize</code></li>
</ol>
<pre><code class="language-python">register_tortoise(
    app,
    db_url="postgres://user:pass@localhost:5432/mydb",
    modules={"models": ["models"]},
    generate_schemas=True,
    add_exception_handlers=True,
    connection_params={
        "maxsize": 20  # 控制连接池大小
    }
)
</code></pre>
<ol start="2">
<li><strong>查询优化</strong>：使用<code>select_related</code>预加载关联数据</li>
</ol>
<pre><code class="language-python"># 获取用户及其所有文章
async def get_user_with_posts(user_id: int):
    user = await User.get(id=user_id).prefetch_related('posts')
    return user
</code></pre>
<ol start="3">
<li><strong>事务管理</strong>：确保数据一致性</li>
</ol>
<pre><code class="language-python">async def transfer_funds(from_id, to_id, amount):
    async with in_transaction() as conn:
        from_user = await User.get(id=from_id).for_update()
        to_user = await User.get(id=to_id).for_update()

        if from_user.balance &lt; amount:
            raise ValueError("Insufficient balance")

        from_user.balance -= amount
        to_user.balance += amount

        await from_user.save(using_db=conn)
        await to_user.save(using_db=conn)
</code></pre>
<p>余下文章内容请点击跳转至 个人博客页面 或者 扫码关注或者微信搜一搜：<code>编程智域 前端至全栈交流与成长</code>，阅读完整的文章：</p>
<h2 id="往期文章归档">往期文章归档：</h2>
<ul>
<li><a href="https://blog.cmdragon.cn/posts/74b39391a524/" target="_blank" rel="noopener nofollow">FastAPI数据库连接池配置与监控 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/f05753c1a8af/" target="_blank" rel="noopener nofollow">分布式事务在点赞功能中的实现 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/644d88ac6ff1/" target="_blank" rel="noopener nofollow">Tortoise-ORM级联查询与预加载性能优化 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/d7fcb94d965b/" target="_blank" rel="noopener nofollow">使用Tortoise-ORM和FastAPI构建评论系统 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/a344f0dfbdbf/" target="_blank" rel="noopener nofollow">分层架构在博客评论功能中的应用与实现 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/823cb13844de/" target="_blank" rel="noopener nofollow">深入解析事务基础与原子操作原理 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/0df919d7ff39/" target="_blank" rel="noopener nofollow">掌握Tortoise-ORM高级异步查询技巧 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/2c8d6d6e8c53/" target="_blank" rel="noopener nofollow">FastAPI与Tortoise-ORM实现关系型数据库关联 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/4b40fac9a431/" target="_blank" rel="noopener nofollow">Tortoise-ORM与FastAPI集成：异步模型定义与实践 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/ec70904aad68/" target="_blank" rel="noopener nofollow">异步编程与Tortoise-ORM框架 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/7112d376156d/" target="_blank" rel="noopener nofollow">FastAPI数据库集成与事务管理 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/ac94f11d8558/" target="_blank" rel="noopener nofollow">FastAPI与SQLAlchemy数据库集成 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/b64fbd2d819d/" target="_blank" rel="noopener nofollow">FastAPI与SQLAlchemy数据库集成与CRUD操作 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/05564696277e/" target="_blank" rel="noopener nofollow">FastAPI与SQLAlchemy同步数据库集成 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/dc3f1adccf0a/" target="_blank" rel="noopener nofollow">SQLAlchemy 核心概念与同步引擎配置详解 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/5c3e3f847f09/" target="_blank" rel="noopener nofollow">FastAPI依赖注入性能优化策略 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/d1b6b80e8665/" target="_blank" rel="noopener nofollow">FastAPI安全认证中的依赖组合 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/f5d382bc5354/" target="_blank" rel="noopener nofollow">FastAPI依赖注入系统及调试技巧 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/88761b137b82/" target="_blank" rel="noopener nofollow">FastAPI依赖覆盖与测试环境模拟 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/ef1282d9c9b8/" target="_blank" rel="noopener nofollow">FastAPI中的依赖注入与数据库事务管理 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/8b8658ec8dab/" target="_blank" rel="noopener nofollow">FastAPI依赖注入实践：工厂模式与实例复用的优化策略 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/0b359086bd7d/" target="_blank" rel="noopener nofollow">FastAPI依赖注入：链式调用与多级参数传递 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/ef71d1b7ddfb/" target="_blank" rel="noopener nofollow">FastAPI依赖注入：从基础概念到应用 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/1b01bf90607f/" target="_blank" rel="noopener nofollow">FastAPI中实现动态条件必填字段的实践 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/cda2eb13bf31/" target="_blank" rel="noopener nofollow">FastAPI中Pydantic异步分布式唯一性校验 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/18ef84c3b234/" target="_blank" rel="noopener nofollow">掌握FastAPI与Pydantic的跨字段验证技巧 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/9b9eb7489096/" target="_blank" rel="noopener nofollow">FastAPI中的Pydantic密码验证机制与实现 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/6e2a1c070e32/" target="_blank" rel="noopener nofollow">深入掌握FastAPI与OpenAPI规范的高级适配技巧 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/11d2c39a300b/" target="_blank" rel="noopener nofollow">Pydantic字段元数据指南：从基础到企业级文档增强 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/3bd5ffd5fdcb/" target="_blank" rel="noopener nofollow">Pydantic Schema生成指南：自定义JSON Schema | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/614488cbbf44/" target="_blank" rel="noopener nofollow">Pydantic递归模型深度校验36计：从无限嵌套到亿级数据的优化法则 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/6ed5f943c599/" target="_blank" rel="noopener nofollow">Pydantic异步校验器深：构建高并发验证系统 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/60d359baeb6c/" target="_blank" rel="noopener nofollow">Pydantic根校验器：构建跨字段验证系统 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/fa86615d7d3a/" target="_blank" rel="noopener nofollow">Pydantic配置继承抽象基类模式 | cmdragon's Blog</a></li>
<li></li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.023449147474537038" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-29 13:49">2025-04-29 13:49</span>&nbsp;
<a href="https://www.cnblogs.com/Amd794">Amd794</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18853550);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18853550', targetLink: 'https://www.cnblogs.com/Amd794/p/18853550', title: '异步IO与Tortoise-ORM的数据库' })">举报</a>
</div>
        