
        <div class="postTitle">
            <h1><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenyishi/p/18682492" title="发布于 2025-01-21 09:11">
    <span role="heading" aria-level="2">.NET 中 Logger 常被忽视的方法 BeginScope</span>
    

</a>
</h1>
        </div>
        <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><code>BeginScope</code> 方法是 .NET 中 <code>ILogger</code> 接口的一部分，用于创建日志记录的作用域（Scope）。这种作用域可以将特定的上下文信息包含在日志中，从而提高日志的可读性和调试效率。</p>
<h4>配置日志包含作用域信息</h4>
<p>首先，需要在日志配置中启用包含作用域信息。以 <code>appsettings.json</code> 为例，以下是配置示例：</p>
<pre><code class="language-json">{
  "Logging": {
    "Console": {
      "IncludeScopes": true,
      "LogLevel": {
        "Default": "Information",
        "Microsoft.AspNetCore": "Warning"
      }
    }
  }
}
</code></pre>
<p>在该配置中，<code>IncludeScopes</code> 被设置为 <code>true</code>，这意味着在控制台日志中将包含作用域信息。</p>
<h4>在代码中使用 <code>BeginScope</code></h4>
<p>使用 <code>BeginScope</code> 方法在日志中添加上下文信息，如下代码手动显示：</p>
<pre><code class="language-csharp">[HttpGet(Name = "Get")]
public string Get()
{
    using (_logger.BeginScope("TenantName {TenantName}", "test"))
    {
        _logger.LogInformation("这是一条测试日志信息");
    }

    return "ok";
}
</code></pre>
<p>在这段代码中，我们使用 <code>BeginScope</code> 创建了一个作用域，并设置了一个上下文变量。在这个作用域之内，日志信息将包含这个上下文变量。</p>
<p><img src="https://img2024.cnblogs.com/blog/1033233/202501/1033233-20250120203121238-1497839503.png" alt="" width="623" height="134" loading="lazy"></p>
<p>&nbsp;</p>
<h4>将作用域信息 JSON化</h4>
<p>通过实现自己的 <code>ILogger</code> 接口，我们可以将作用域信息以 JSON 格式输出：</p>
<pre><code class="language-csharp">public class ScopeLogger : ILogger
{
    private readonly string _categoryName;
    private static readonly AsyncLocal&lt;Stack&lt;object&gt;&gt; _scopeStack = new AsyncLocal&lt;Stack&lt;object&gt;&gt;();

    public ScopeLogger(string categoryName)
    {
        _categoryName = categoryName;
    }

    public IDisposable BeginScope&lt;TState&gt;(TState state) where TState : notnull
    {
        if (_scopeStack.Value == null)
        {
            _scopeStack.Value = new Stack&lt;object&gt;();
        }
        _scopeStack.Value.Push(state);

        return new Scope(() =&gt; _scopeStack.Value.Pop());
    }

    public bool IsEnabled(LogLevel logLevel) =&gt; true;

    public void Log&lt;TState&gt;(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func&lt;TState, Exception, string&gt; formatter)
    {
        var logEntry = new Dictionary&lt;string, object&gt;
        {
            ["Timestamp"] = DateTime.UtcNow,
            ["LogLevel"] = logLevel.ToString(),
            ["Category"] = _categoryName,
            ["Message"] = formatter(state, exception),
            ["Exception"] = exception?.ToString()
        };

        if (_scopeStack.Value != null &amp;&amp; _scopeStack.Value.Count &gt; 0)
        {
            var scopes = new List&lt;object&gt;();
            foreach (var scope in _scopeStack.Value)
            {
                scopes.Add(scope);
            }
            logEntry["Scopes"] = scopes;
        }

        var json = JsonSerializer.Serialize(logEntry, new JsonSerializerOptions { WriteIndented = true });
        Console.WriteLine(json);
    }

    private class Scope : IDisposable
    {
        private readonly Action _onDispose;

        public Scope(Action onDispose)
        {
            _onDispose = onDispose;
        }

        public void Dispose()
        {
            _onDispose?.Invoke();
        }
    }
}

public class ScopeLoggerProvider : ILoggerProvider
{
    public ILogger CreateLogger(string categoryName)
    {
        return new ScopeLogger(categoryName);
    }

    public void Dispose() { }
}

builder.Logging.ClearProviders();
builder.Logging.AddProvider(new ScopeLoggerProvider());
</code></pre>
<p>上面的代码创建了自己的 <code>ILogger</code> 实现，并将作用域信息以 JSON 格式输出。</p>
<p><img src="https://img2024.cnblogs.com/blog/1033233/202501/1033233-20250120203232713-920085897.png" alt="" width="725" height="651" loading="lazy"></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

        <div class="postDesc">posted on 
<span id="post-date" data-last-update-days="0.87610913521875" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-21 09:11">2025-01-21 09:11</span>&nbsp;
<a href="https://www.cnblogs.com/chenyishi">chester·chen</a>&nbsp;
阅读(<span id="post_view_count">327</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18682492" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18682492);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18682492', targetLink: 'https://www.cnblogs.com/chenyishi/p/18682492', title: '.NET 中 Logger 常被忽视的方法 BeginScope' })">举报</a>
</div>
    