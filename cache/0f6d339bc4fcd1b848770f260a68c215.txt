
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18816278" title="发布于 2025-04-09 11:34">
    <span role="heading" aria-level="2">决策树：机器学习中的“智慧树”</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在机器学习的广阔森林中，<strong>决策树</strong>（<code>Decision Tree</code>）是一棵独特而强大的<strong>“智慧树”</strong>。</p>
<p>它是一种监督学习算法，既可以用于分类任务，也能用于回归任务，通过树形结构模拟人类决策过程。</p>
<p>这篇文章会带你了解<strong>决策树</strong>，从基础概念开始，一步步讲解如何构建决策树、常用的算法以及它的实际应用。</p>
<h1 id="1-概述">1. 概述</h1>
<p><strong>决策树</strong>（<code>Decision Tree</code>）作为机器学习中的一种经典的监督学习算法，通过树形结构模拟人类决策过程。</p>
<p>它既可以处理分类问题（如判断邮件是否为垃圾邮件），也能解决回归问题（如预测房价）。</p>
<p><strong>决策树</strong>通过一系列的决策规则，将数据划分到不同的类别或预测目标值。</p>
<p>它的结构就像一棵<strong>倒立的树</strong>，顶部是根节点，代表整个数据集，然后通过一系列的特征判断，不断分叉出分支，最终到达叶节点，每个叶节点代表一个决策结果。</p>
<p><strong>决策树</strong>的最大优点是<strong>可解释性强</strong>。它的决策过程就像人类的思考过程一样，通过一系列的“如果……那么……”的规则来做出判断。</p>
<p>例如，在一个简单的贷款审批决策树中，它可能会先判断申请人的收入是否高于某个阈值，如果高于，再判断信用记录是否良好，最终决定是否批准贷款。</p>
<p>这种直观的决策过程使得决策树在许多需要可解释性的场景中非常受欢迎，比如医疗诊断、金融风险评估等领域。</p>
<h1 id="2-基本流程">2. 基本流程</h1>
<p>决策树的基本流程有<code>4</code>步：</p>
<ol>
<li><strong>特征选择</strong>：这是决策树构建的起点。我们需要从众多特征中选择一个最能区分数据的特征作为当前节点的划分依据。</li>
<li><strong>创建节点</strong>：根据所选特征，创建一个决策节点。这个节点会根据特征的不同取值将数据划分为若干子集。</li>
<li><strong>递归划分</strong>：对于每个子集，重复上述过程，继续选择特征并创建节点，直到满足停止条件。</li>
<li><strong>剪枝</strong>（<strong>可选</strong>）：为了避免决策树过于复杂而导致过拟合，通常需要对树进行剪枝。</li>
</ol>
<p>其中，关于<strong>剪枝</strong>的步骤，后续其他文章中再详细介绍，本文主要讨论<strong>前3个</strong>步骤。</p>
<p>前3个步骤中，最重要的就是第一个步骤<strong>特征选择</strong>，也就是如何在决策树的每次分叉时划分数据集。</p>
<h1 id="3-划分数据集常用算法">3. 划分数据集常用算法</h1>
<p>生成<strong>决策树</strong>的过程中，划分数据集的常用算法主要有3个。</p>
<h2 id="31-基于信息增益id3">3.1. 基于信息增益（ID3）</h2>
<p><strong>信息增益</strong>是基于信息论的概念。它衡量的是使用某个特征进行划分后，数据的不确定性减少了多少。</p>
<p>具体来说，<strong>信息增益</strong>计算的是划分前数据的熵（表示数据的混乱程度）与划分后各子集熵的加权平均值之差。</p>
<p>如果一个特征的信息增益越大，说明使用这个特征划分后，数据的不确定性减少得越多，这个特征就越有价值。</p>
<p>它的计算公式：$ \text{Gain}(D,A) = H(D) - \sum_{v \in Values(A)} \frac{|D^v|}{|D|} H(D^v) $</p>
<p>其中 $ H(D) = -\sum p_i \log p_i $为信息熵。</p>
<p>通过scikit-learn库使用它非常简单：</p>
<pre><code class="language-python">from sklearn.tree import DecisionTreeClassifier
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# 加载数据集
iris = load_iris()
X = iris.data
y = iris.target

# 划分训练集和测试集
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# 使用信息增益构建决策树
clf = DecisionTreeClassifier(criterion='entropy', random_state=42)
clf.fit(X_train, y_train)

# 预测并计算准确率
y_pred = clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f'基于信息增益的决策树准确率：{accuracy}')

## 输出结果：
'''
基于信息增益的决策树准确率：0.9777777777777777
'''
</code></pre>
<p>这里参数<code>criterion='entropy'</code>就表示使用<code>ID3</code>算法来划分决策树。</p>
<h2 id="32-基于增益率c45">3.2. 基于增益率（C4.5）</h2>
<p><strong>增益率</strong>是信息增益的一个改进版本，它考虑了特征划分后产生的分支数量对信息增益的影响。</p>
<p>因为如果一个特征有很多取值，那么即使它划分后的熵减少得不多，也可能得到一个较大的信息增益，这可能会导致决策树偏向于选择取值多的特征。</p>
<p>增益率通过将信息增益除以该特征划分产生的信息熵（称为分裂信息），来修正这种偏向。</p>
<p>它的公式是：$ \text{Gain_Ratio}(D,A) = \frac{\text{Gain}(D,A)}{\text{IV}(A)} $</p>
<p>其中 $ \text{IV}(A) = -\sum_{v} \frac{|D^v|}{|D|} \log \frac{|D^v|}{|D|} $</p>
<p>在 <code>scikit-learn</code> 中，没有直接实现增益率的选项，但可以通过调整参数来近似实现。</p>
<p><code>C4.5</code>算法在<code>ID3</code>算法的基础上加入了增益率的概念，同时支持连续值的处理。</p>
<pre><code class="language-python"># 使用 C4.5 算法（近似实现）
clf_c45 = DecisionTreeClassifier(criterion='entropy', splitter='best', random_state=42)
clf_c45.fit(X_train, y_train)

# 预测并计算准确率
y_pred_c45 = clf_c45.predict(X_test)
accuracy_c45 = accuracy_score(y_test, y_pred_c45)
print(f'基于增益率的决策树准确率：{accuracy_c45}')

## 输出结果：
'''
基于信息增益的决策树准确率：0.9777777777777777
'''
</code></pre>
<p>这里近似的实现方法得到的准确率和ID3算法一样。</p>
<h2 id="33-基于基尼系数cart">3.3. 基于基尼系数（CART）</h2>
<p><strong>基尼指数</strong>是衡量数据不纯度的另一种方法，它的计算相对简单，基尼指数越小，表示数据的纯度越高。</p>
<p>对于一个特征，我们计算按照该特征划分后各子集的基尼指数加权平均值，然后选择基尼指数降低最多的特征作为划分特征。</p>
<p><strong>基尼指数</strong>更倾向于选择那些能够将数据划分得更“纯净”的特征。</p>
<p>它的计算公式是：$ \text{Gini}(D) = 1 - \sum p_i^2 $</p>
<p>选择使基尼指数最小的特征进行划分。</p>
<p>实现示例如下：</p>
<pre><code class="language-python"># 使用基尼指数构建决策树
clf_cart = DecisionTreeClassifier(criterion='gini', random_state=42)
clf_cart.fit(X_train, y_train)

# 预测并计算准确率
y_pred_cart = clf_cart.predict(X_test)
accuracy_cart = accuracy_score(y_test, y_pred_cart)
print(f'基于基尼指数的决策树准确率：{accuracy_cart}')

## 输出结果：
'''
基于信息增益的决策树准确率：1.0
'''
</code></pre>
<p>从结果来看，<code>CART</code>算法的准确率比前两种要高。</p>
<h1 id="4-不同算法的比较">4. 不同算法的比较</h1>
<p>这三种算法各有优缺点和适用场景，使用时根据实际的数据情况来选择。</p>
<table>
<thead>
<tr>
<th><strong><font style="color: rgba(0, 24, 70, 1)">算法</font></strong></th>
<th><strong><font style="color: rgba(0, 24, 70, 1)">优点</font></strong></th>
<th>缺点</th>
<th><strong><font style="color: rgba(0, 24, 70, 1)">适用场景</font></strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><font style="color: rgba(18, 6, 73, 1)">信息增益</font></td>
<td>可解释性强</td>
<td>偏向于选择取值多的特征</td>
<td>特征取值较少的数据集</td>
</tr>
<tr>
<td><font style="color: rgba(18, 6, 73, 1)">增益率</font></td>
<td>抑制过拟合</td>
<td>计算相对复杂</td>
<td>类别较多的分类任务</td>
</tr>
<tr>
<td><font style="color: rgba(18, 6, 73, 1)">基尼指数</font></td>
<td>计算效率高</td>
<td>某些情况下可能会过于敏感，导致过拟合</td>
<td>大规模数据/需要快速训练的场景</td>
</tr>
</tbody>
</table>
<h1 id="5-总结">5. 总结</h1>
<p><strong>决策树</strong>是一种强大而直观的机器学习算法，它通过一系列的决策规则来对数据进行分类或回归。</p>
<p><strong>信息增益</strong>、<strong>增益率</strong>和<strong>基尼指数</strong>是三种常用的特征选择标准，它们各有优缺点，适用于不同的应用场景。</p>
<p>通过<code>scikit-learn</code>这个强大的机器学习库，我们可以轻松地实现基于这些标准的决策树模型，并应用于实际问题中。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.6957251393495371" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-09 11:35">2025-04-09 11:34</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">99</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18816278" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18816278);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18816278', targetLink: 'https://www.cnblogs.com/wang_yb/p/18816278', title: '决策树：机器学习中的“智慧树”' })">举报</a>
</div>
        