
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/io-T-T/p/18658613" title="发布于 2025-01-07 23:01">
    <span role="heading" aria-level="2">python SQLAlchemy ORM——从零开始学习 01 安装库</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h3 id="01基础库">01基础库</h3>
<h4 id="1-1安装">1-1安装</h4>
<p>依赖库：<code>sqlalchemy</code></p>
<pre><code class="language-python">pip install sqlalchemy
#直接安装即可
</code></pre>
<h4 id="1-2导入使用">1-2导入使用</h4>
<p>这里讲解思路【个人的理解】，具体写其实就是这个框架：</p>
<ol>
<li>
<p>导入必要的接口【有创建<code>engine</code>以及<code>declarative_base</code>】</p>
<ol>
<li>通过<code>create_engine</code>接口创建<code>engine</code>，根据翻译可以翻译成引擎，和发动机一样，有了这个才能驱动数据库启动，但创建<code>engine</code>的接口接受的是一个针对 PostgreSQL的对象，对象的示例如：<code>postgresql+psycopg2://scott:tiger@localhost:5432/mydatabase</code></li>
</ol>
<ul>
<li><strong>以下是官方对于这个<code>engine</code>的解释</strong>：</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/3244923/202501/3244923-20250107224723131-1370664729.png" alt="image-20250104004137424" loading="lazy"></p>
</li>
<li>
<p>创建引擎</p>
<pre><code class="language-python">db_url = "sqlite:///database.db"	#本地的sqlite数据库的地址，没有则自动创建
engine = create_engine(db_url)		#调用数据库的url地址创建引擎
</code></pre>
<p>其中主要根据 <code>sqlalchemy</code>中的<code>create_engine</code>接口进行引擎的创建</p>
<blockquote>
<p>create_engine(url: str | URL) -&gt; Engine</p>
</blockquote>
<p>其中URL就是上文提到的PostgreSQL的对象。这里是用sqlite，其他兼容数据库也可以使用，参照下图：</p>
<p><img alt="image-20250105212817594" loading="lazy"></p>
</li>
<li>
<p>定义一个 <code>sqlalchemy</code>ORM接口的基类，用于后续创建自定义的表、以及增删查改</p>
<pre><code class="language-python">Base = declarative_base()
</code></pre>
</li>
</ol>
<h4 id="1-3-创建自己的表">1-3 创建自己的表</h4>
<ul>
<li>
<p>前面的逻辑和导入使用是重合的，主要就是创建一个自己<strong>自定义的数据库表类</strong>-&gt;继承于上文提到的接口基类，进行表的创建</p>
</li>
<li>
<p>其中，使用<code>Column</code>接口来创建表的列，这个接口接受主要两个变量：第一个是类型【Column, Integer, String, Float】。第二个使用到的是<code>primary_key</code>，即数据库的主键（数据库中数值唯一的一种属性，一般是数据库自动添加的，例如作为整形<code>id</code>，如果主键为TURE，则<code>id</code>这个属性的数值不会重复）</p>
</li>
<li>
<p><code>Column(type_, *args, **kwargs)</code></p>
<ul>
<li><strong><code>type_</code></strong>（必填）：指定列的数据类型，例如 <code>Integer</code>、<code>String</code>、<code>DateTime</code> 等。</li>
<li><strong><code>primary_key</code></strong>（可选）：是否为主键，默认为 <code>False</code>。</li>
</ul>
<pre><code class="language-python">from sqlalchemy import create_engine, Column, Integer, String, Float
from sqlalchemy.orm import declarative_base

db_url = "sqlite:///database.db"

engine = create_engine(db_url)

Base = declarative_base()


class User(Base):
    __tablename__ = "user"
    id = Column(Integer, primary_key=True)
    name = Column(String)
    age = Column(Integer)

Base.metadata.create_all(engine)
</code></pre>
</li>
<li>
<p>最后使用<code>Base.metadata.create_all(engine)</code>接口创建这个数据库的所有表</p>
<ul>
<li>
<p>功能：</p>
<p><strong>自动创建表</strong>：<code>create_all()</code> 会基于模型中定义的表结构自动创建数据库表。如果表已经存在，则不会重新创建。</p>
<p><strong>数据库初始化</strong>：通常在应用程序第一次启动时，调用 <code>create_all()</code> 来创建数据库结构。</p>
<p><strong>支持多个表</strong>：<code>create_all()</code> 会创建所有在 <code>Base</code> 中定义的模型所对应的表。</p>
</li>
</ul>
<h4 id="1-4-all-code">1-4 all code</h4>
<pre><code class="language-python">from sqlalchemy import create_engine, Column, Integer, String, Float
from sqlalchemy.orm import declarative_base

db_url = "sqlite:///database.db"

engine = create_engine(db_url)

Base = declarative_base()


class User(Base):
    __tablename__ = "user"
    id = Column(Integer, primary_key=True)
    name = Column(String)
    age = Column(Integer)

    def __repr__(self):#这个函数可以不用，不影响，为了能直接print这个类对象
        return f"id:{self.id}, name:{self.name}, age:{self.age}" 


Base.metadata.create_all(engine)
</code></pre>
<blockquote>
<p>鸣谢以及参考：</p>
<p><a href="https://www.youtube.com/watch?v=Z2zD3EdjpNo&amp;list=PLKm_OLZcymWhtiM-0oQE2ABrrbgsndsn0" target="_blank" rel="noopener nofollow">参考教程</a></p>
</blockquote>
</li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.13817556106828704" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-07 23:01">2025-01-07 23:01</span>&nbsp;
<a href="https://www.cnblogs.com/io-T-T">io_T_T</a>&nbsp;
阅读(<span id="post_view_count">18</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18658613" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18658613);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18658613', targetLink: 'https://www.cnblogs.com/io-T-T/p/18658613', title: 'python SQLAlchemy ORM——从零开始学习 01 安装库' })">举报</a>
</div>
        