<!----> <meta itemprop="headline" content="因为写了一个前端脚手架，这个月的KPI 打满了！！！"> <meta itemprop="keywords" content="前端"> <meta itemprop="datePublished" content="2025-01-10T06:53:34.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="赵小川"> <meta itemprop="url" content="https://juejin.cn/user/2963939081585479"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-7cdd11fb="">
            因为写了一个前端脚手架，这个月的KPI 打满了！！！
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-7cdd11fb=""><div class="author-info-box" data-v-7cdd11fb=""><div class="author-name" data-v-7cdd11fb=""><a href="/user/2963939081585479/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-7cdd11fb=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    赵小川
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-7cdd11fb=""><time datetime="2025-01-10T06:53:34.000Z" title="Fri Jan 10 2025 06:53:34 GMT+0000 (Coordinated Universal Time)" class="time" data-v-7cdd11fb="">
                    2025-01-10
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-7cdd11fb=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-7cdd11fb=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-7cdd11fb=""></circle></svg> <span class="views-count" data-v-7cdd11fb="">
                    6,514
                  </span> <span class="read-time" data-v-7cdd11fb=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-7cdd11fb=""><rect width="16" height="16" fill="none" data-v-7cdd11fb=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-7cdd11fb=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-7cdd11fb=""></path></svg>
                    阅读10分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-7cdd11fb=""></div> <!----> <!----></div> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-7cdd11fb=""><div class="article-viewer markdown-body result"><blockquote>
<p>年底了，大家都在冲最后的绩效了，为了 我的💰，满心欢喜（<del>迫不得已</del>）利用自己宝贵的时间，帮公司写了一个通用项目框架 cli，希望大家用好，给一个好的反馈，让我钱包🥁🥁，过好年</p>
</blockquote>
<h2 data-id="heading-0">背景</h2>
<p>在现代前端开发中，脚手架工具（CLI）在团队项目中扮演着重要角色。我们的团队在项目开发中面临以下挑战：</p>
<ul>
<li>开发效率低：项目初始化、代码生成和重复性操作耗费了大量时间。</li>
<li>缺乏统一规范：不同成员的代码风格不一致，提交记录混乱，影响项目质量。</li>
<li>构建部署复杂：手动构建和部署容易出错，影响交付效率。</li>
</ul>
<p>为了提升团队开发效率、规范化流程和减少重复性工作，主人公主导了前端 CLI 脚手架工具的设计与开发。通过这个工具，我们实现了项目初始化、代码生成、规范化操作以及自动化 CI/CD 流程。</p>
<h3 data-id="heading-1">最终效果</h3>
<h3 data-id="heading-2">命令行交互工具</h3>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/00eda06e62ab421fa226bf573e1eceac~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6LW15bCP5bed:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741388815&amp;x-signature=j20m%2BQWvCxbUhxX93PWvf9n9HZg%3D" alt="image.png" loading="lazy"></p>
<h3 data-id="heading-3">CI / CD</h3>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/7b8c33e69f4d4bb2ace7e602d17fefa5~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6LW15bCP5bed:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741388815&amp;x-signature=4kTwHat%2Fw4q8eLmogrKvm6gGSLM%3D" alt="image.png" loading="lazy"></p>
<h3 data-id="heading-4">技术要点</h3>
<h4 data-id="heading-5"><strong>Node.js 开发</strong></h4>
<p>整个 CLI 工具基于 Node.js 开发。核心功能通过处理命令行参数实现，灵活满足不同开发场景。</p>
<h4 data-id="heading-6"><strong>依赖库</strong></h4>
<ol>
<li><strong>命令参数解析</strong>：<code>commander</code> 用于处理命令行参数和选项。</li>
<li><strong>人机交互</strong>：<code>prompts</code> 实现与用户的动态交互，支持多选、确认等操作(inquirer/input / select)。</li>
<li><strong>控制台高亮</strong>：<code>chalk</code> 和 <code>picocolors</code> 用于美化控制台输出，提高可读性。</li>
<li><strong>ora:</strong> 终端<code>loading</code>美化工具</li>
<li><strong>figlet:</strong> 终端生成<code>艺术字</code></li>
<li><strong>git-clone:</strong> 下载项目<code>模版工具</code></li>
<li><strong>模板处理</strong>：<code>handlebars</code> 作为模板引擎，用于生成动态代码片段。</li>
<li><strong>私有 NPM 仓库</strong>：<code>verdaccio</code> / <code>nexus</code> 用于搭建团队的 NPM 私有仓库，实现包管理的自主化。</li>
<li><strong>fs-etra:</strong> 用来操作<code>文件目录</code> 瑞士军刀</li>
</ol>
<h3 data-id="heading-7">概念引入</h3>
<p>cli 大家都熟悉，大家熟悉的vue，在 终端 cv这个命令，然后 一个项目就 <code>clone</code> 到你的本地了</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/98fd6219dee0430d905f13a4d12ba5bb~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6LW15bCP5bed:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741388815&amp;x-signature=w1DoNFSfFdyTc91ElhWtT3Rl%2FIM%3D" alt="image.png" loading="lazy"></p>
<p>再比如 vite 提供的cli</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f60f98a68361448d8974f3f16db23cbe~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6LW15bCP5bed:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741388815&amp;x-signature=CjyrazyQkzuvgTWQQvybbY5JCS8%3D" alt="image.png" loading="lazy"></p>
<p>cli，其实也很简单，就两个核心的点</p>
<ol>
<li>
<p>通过<code>读取本地文件 / clone</code> 的方式  去<code>拉取已经存在的项目base 模版</code></p>
</li>
<li>
<p>为了提供<code>可选择/可配置性</code>，需要通过命令行界面（CLI），来实现<code>读取 / clone </code> 已经存在的文件模版</p>
</li>
</ol>
<h2 data-id="heading-8">整体开发流程</h2>
<ol>
<li>项目组 定制好 项目模版，规定存放的目录位置（直接放到cli 目录 / 存放在单独的私有仓库）</li>
<li>协定使用方式，采用全局 安装 / npm 安装</li>
</ol>
<h3 data-id="heading-9">定制开发模版</h3>
<p>可以是基本架子，比如代码规范化 / eslint / prettier / / styleLint / commintlint / ci/cd / 基本配置...</p>
<p>也可以是一个完整的成熟的项目，比如包括基本组件（404/login/layout） / 路由 / store 配置 等等</p>
<p>根据情况定制即可</p>
<h3 data-id="heading-10">初始化项目</h3>
<pre><code class="hljs language-js" lang="js">mkdir vp-cli-tools
cd vp-cli-tools
npm init -y
</code></pre>
<h3 data-id="heading-11">目录结构</h3>
<pre><code class="hljs language-js" lang="js">vp-cli-tools/
    |- src/ # 项目资源
        |- command/  # 命令逻辑
        |- utils/   # 公共方法
        |- index.<span class="hljs-property">ts</span>  # 命令入口文件
    |- rollup.<span class="hljs-property">config</span>.<span class="hljs-property">js</span>  # rollip 配置文件
</code></pre>
<h3 data-id="heading-12">package.json</h3>
<pre><code class="hljs language-js" lang="js">{
  <span class="hljs-string">"name"</span>: <span class="hljs-string">"vp-cli-tools"</span>,
  <span class="hljs-string">"version"</span>: <span class="hljs-string">"0.3.0"</span>,
  <span class="hljs-string">"main"</span>: <span class="hljs-string">"index.js"</span>,
  <span class="hljs-string">"scripts"</span>: {
    <span class="hljs-string">"test"</span>: <span class="hljs-string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,
    <span class="hljs-string">"build"</span>: <span class="hljs-string">"rollup -c rollup.config.js --bundleConfigAsCjs"</span>
  },
  <span class="hljs-string">"keywords"</span>: [
    <span class="hljs-string">"Vite"</span>,
    <span class="hljs-string">"VUE3"</span>,
    <span class="hljs-string">"Typescript"</span>,
    <span class="hljs-string">"Element-Plus"</span>
  ],
  <span class="hljs-string">"author"</span>: <span class="hljs-string">"we"</span>,
  <span class="hljs-string">"bin"</span>: {
    <span class="hljs-string">"vp-cli-tools"</span>: <span class="hljs-string">"bin/index.js"</span>
  },
  <span class="hljs-string">"files"</span>: [
    <span class="hljs-string">"dist"</span>,
    <span class="hljs-string">"bin"</span>,
    <span class="hljs-string">"README"</span>
  ],
  <span class="hljs-string">"license"</span>: <span class="hljs-string">"ISC"</span>,
  <span class="hljs-string">"description"</span>: <span class="hljs-string">""</span>,
  <span class="hljs-string">"devDependencies"</span>: {
    <span class="hljs-string">"@inquirer/prompts"</span>: <span class="hljs-string">"^3.3.0"</span>,
    <span class="hljs-string">"@rollup/plugin-commonjs"</span>: <span class="hljs-string">"^25.0.3"</span>,
    <span class="hljs-string">"@rollup/plugin-json"</span>: <span class="hljs-string">"^6.0.1"</span>,
    <span class="hljs-string">"@rollup/plugin-node-resolve"</span>: <span class="hljs-string">"^15.1.0"</span>,
    <span class="hljs-string">"@rollup/plugin-terser"</span>: <span class="hljs-string">"^0.4.3"</span>,
    <span class="hljs-string">"@types/figlet"</span>: <span class="hljs-string">"^1.7.0"</span>,
    <span class="hljs-string">"@types/fs-extra"</span>: <span class="hljs-string">"^11.0.2"</span>,
    <span class="hljs-string">"@types/lodash"</span>: <span class="hljs-string">"^4.14.202"</span>,
    <span class="hljs-string">"@types/node"</span>: <span class="hljs-string">"^20.10.4"</span>,
    <span class="hljs-string">"axios"</span>: <span class="hljs-string">"^1.6.2"</span>,
    <span class="hljs-string">"chalk"</span>: <span class="hljs-string">"^4.1.2"</span>,
    <span class="hljs-string">"commander"</span>: <span class="hljs-string">"^11.1.0"</span>,
    <span class="hljs-string">"figlet"</span>: <span class="hljs-string">"^1.7.0"</span>,
    <span class="hljs-string">"fs-extra"</span>: <span class="hljs-string">"^11.1.1"</span>,
    <span class="hljs-string">"lodash"</span>: <span class="hljs-string">"^4.17.21"</span>,
    <span class="hljs-string">"log-symbols"</span>: <span class="hljs-string">"4.1.0"</span>,
    <span class="hljs-string">"ora"</span>: <span class="hljs-string">"5"</span>,
    <span class="hljs-string">"progress-estimator"</span>: <span class="hljs-string">"^0.3.1"</span>,
    <span class="hljs-string">"rollup"</span>: <span class="hljs-string">"^4.6.1"</span>,
    <span class="hljs-string">"rollup-plugin-node-externals"</span>: <span class="hljs-string">"^5.1.2"</span>,
    <span class="hljs-string">"rollup-plugin-typescript2"</span>: <span class="hljs-string">"^0.36.0"</span>,
    <span class="hljs-string">"simple-git"</span>: <span class="hljs-string">"^3.21.0"</span>,
    <span class="hljs-string">"tslib"</span>: <span class="hljs-string">"^2.6.2"</span>,
    <span class="hljs-string">"typescript"</span>: <span class="hljs-string">"^5.3.3"</span>
  }
}

</code></pre>
<h3 data-id="heading-13">package.json 中build  / bin / files / name  / version /  配置</h3>
<pre><code class="hljs language-js" lang="js"><span class="hljs-string">"build"</span>: <span class="hljs-string">"rollup -c rollup.config.js --bundleConfigAsCjs"</span>,
<span class="hljs-string">"name"</span>: <span class="hljs-string">"vp-cli-tools"</span>,
<span class="hljs-string">"bin"</span>: {
    <span class="hljs-string">"vp-cli-tools"</span>: <span class="hljs-string">"bin/index.js"</span>
  },
  
 <span class="hljs-string">"files"</span>: [
    <span class="hljs-string">"dist"</span>,
    <span class="hljs-string">"bin"</span>,
    <span class="hljs-string">"README"</span>
  ],
  

</code></pre>
<h4 data-id="heading-14">输出格式</h4>
<ul>
<li>使用 rollup  通过 -c 制定打包的 文件<code>rollup.config.js</code>,最后通过<code>bundleConfigAsCjs</code>输出为commonjs</li>
</ul>
<h4 data-id="heading-15">bin 配置</h4>
<ul>
<li>
<p>bin中的配置是一个对象，需要有 "key" 和 "value"。</p>
<ul>
<li>key 会被放置在 node_modules 的 .bin 目录中，value 是 key 对应需要执行的文件。</li>
<li>我们使用 vp-cli-tools  就会调用我们的 bin/index.js。</li>
<li>当我们全局安装对应包的时候会放在全局的 node_modules 的 .bin 目录中，相当于添加了系统环境变量，这样我们就可以直接在终端中调用。</li>
</ul>
</li>
</ul>
<p><code>#!/usr/bin/env node</code>  通常称为 <strong>shebang</strong> 机制，有以下优点</p>
<ul>
<li>通过&nbsp;<code>env</code>&nbsp;查找 Node.js，确保你写的脚本能够在各种环境下运行</li>
<li>简化脚本的开发和调试工作，让脚本 成为可执行文件，不需要始终使用 <code>node</code> 来执行</li>
<li>node xxx  =&gt; xxx</li>
</ul>
<h3 data-id="heading-16">rollup.config.js 入口编写</h3>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">'rollup'</span>;
<span class="hljs-keyword">import</span> nodeResolve <span class="hljs-keyword">from</span> <span class="hljs-string">'@rollup/plugin-node-resolve'</span>;
<span class="hljs-keyword">import</span> commonjs <span class="hljs-keyword">from</span> <span class="hljs-string">'@rollup/plugin-commonjs'</span>;
<span class="hljs-keyword">import</span> externals <span class="hljs-keyword">from</span> <span class="hljs-string">'rollup-plugin-node-externals'</span>;
<span class="hljs-keyword">import</span> json <span class="hljs-keyword">from</span> <span class="hljs-string">'@rollup/plugin-json'</span>;
<span class="hljs-keyword">import</span> terser <span class="hljs-keyword">from</span> <span class="hljs-string">'@rollup/plugin-terser'</span>;
<span class="hljs-keyword">import</span> typescript <span class="hljs-keyword">from</span> <span class="hljs-string">'rollup-plugin-typescript2'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>([
  {
    <span class="hljs-attr">input</span>: {
      <span class="hljs-attr">index</span>: <span class="hljs-string">'src/index.ts'</span>, <span class="hljs-comment">// 打包入口文件</span>
    },
    <span class="hljs-attr">output</span>: [
      {
        <span class="hljs-attr">dir</span>: <span class="hljs-string">'dist'</span>, <span class="hljs-comment">// 输出目标文件夹</span>
        <span class="hljs-attr">format</span>: <span class="hljs-string">'cjs'</span>, <span class="hljs-comment">// 输出 commonjs 文件</span>
      },
    ],
    <span class="hljs-comment">// 这些依赖的作用上文提到过</span>
    <span class="hljs-attr">plugins</span>: [
      <span class="hljs-title function_">nodeResolve</span>(),
      <span class="hljs-title function_">externals</span>({
        <span class="hljs-attr">devDeps</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 可以识别我们 package.json 中的依赖当作外部依赖处理 不会直接将其中引用的方法打包出来</span>
      }),
      <span class="hljs-title function_">typescript</span>(),
      <span class="hljs-title function_">json</span>(),
      <span class="hljs-title function_">commonjs</span>(),
      <span class="hljs-title function_">terser</span>(),
    ],
  },
]);

</code></pre>
<h3 data-id="heading-17">实现场景</h3>
<h4 data-id="heading-18">实现的命令</h4>
<p><code>vp-create-tool create</code>
自动初始化项目，提供多种模板选择（如 Vue 2、Vue 3、TypeScript 支持），并通过交互式配置生成项目结构。</p>
<p><code>vp-create-tool update</code>
更新命令行工具</p>
<h4 data-id="heading-19">create 编写</h4>
<h5 data-id="heading-20">commander()</h5>
<ol>
<li>首先初始化一个Command对象，传入的参数作为我们的指令名称。</li>
<li>通过program可以执行cli的一些提示，比如-v,--version, create,description 等</li>
<li>在 action 可以放要处理的的逻辑</li>
</ol>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// index.ts</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Command</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"commander"</span>;
<span class="hljs-keyword">import</span> { version } <span class="hljs-keyword">from</span> <span class="hljs-string">"../package.json"</span>;
<span class="hljs-keyword">import</span> create <span class="hljs-keyword">from</span> <span class="hljs-string">"./command/create"</span>;
<span class="hljs-keyword">import</span> update <span class="hljs-keyword">from</span> <span class="hljs-string">"./command/update"</span>;
<span class="hljs-comment">// 命令行中使用 vp-cli-tools xxx 即可触发</span>
<span class="hljs-keyword">const</span> program = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Command</span>(<span class="hljs-string">"vp-cli-tools"</span>);
program.<span class="hljs-title function_">version</span>(version, <span class="hljs-string">"-v , --version"</span>);

program
  .<span class="hljs-title function_">command</span>(<span class="hljs-string">"create"</span>)
  .<span class="hljs-title function_">description</span>(<span class="hljs-string">"创建一个新项目"</span>)
  .<span class="hljs-title function_">argument</span>(<span class="hljs-string">"[name]"</span>, <span class="hljs-string">"项目名称"</span>)
  .<span class="hljs-title function_">action</span>(<span class="hljs-keyword">async</span> (name?: string) =&gt; {
    <span class="hljs-keyword">await</span> <span class="hljs-title function_">create</span>(name);
  });

program
  .<span class="hljs-title function_">command</span>(<span class="hljs-string">"update"</span>)
  .<span class="hljs-title function_">description</span>(<span class="hljs-string">"更新vp-cli-tools"</span>)
  .<span class="hljs-title function_">action</span>(<span class="hljs-function">() =&gt;</span> {
    <span class="hljs-title function_">update</span>();
  });
program.<span class="hljs-title function_">parse</span>();

</code></pre>
<p>执行完 npm install vp-cli-tools -g 之后，在任意目录执行 vp-cli-tools，就会输出我们的通过 commander 配置的属性和方法</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/80cdd290802a4cac8375754875f102b1~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6LW15bCP5bed:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741388815&amp;x-signature=EKZ0zSjIND1P3aBcj%2FvD9tDqGHY%3D" alt="image.png" loading="lazy"></p>
<h4 data-id="heading-21">create(name) 方法的具体实现</h4>
<ol>
<li>执行vp-cli-tools create 时，检查是否传入项目名</li>
</ol>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// command/create.ts</span>
<span class="hljs-keyword">import</span> { select, input } <span class="hljs-keyword">from</span> <span class="hljs-string">"@inquirer/prompts"</span>; <span class="hljs-comment">// 交互工具库：input 代表直接输入，select 代表选择</span>
<span class="hljs-keyword">import</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">"fs-extra"</span>; <span class="hljs-comment">//fs-extra</span>
<span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">"path"</span>;
<span class="hljs-keyword">import</span> { clone } <span class="hljs-keyword">from</span> <span class="hljs-string">"../utils/clone"</span>;
<span class="hljs-keyword">import</span> { log } <span class="hljs-keyword">from</span> <span class="hljs-string">"../utils/log"</span>;
<span class="hljs-keyword">import</span> axios, { <span class="hljs-title class_">AxiosResponse</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"axios"</span>;
<span class="hljs-keyword">import</span> lodash <span class="hljs-keyword">from</span> <span class="hljs-string">"lodash"</span>;
<span class="hljs-keyword">import</span> chalk <span class="hljs-keyword">from</span> <span class="hljs-string">"chalk"</span>;
<span class="hljs-keyword">import</span> { name, version } <span class="hljs-keyword">from</span> <span class="hljs-string">"../../package.json"</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">prjName?: string</span>) {
  <span class="hljs-comment">// 文件名称未传入需要输入</span>
  <span class="hljs-keyword">if</span> (!prjName) {
    prjName = <span class="hljs-keyword">await</span> <span class="hljs-title function_">input</span>({ <span class="hljs-attr">message</span>: <span class="hljs-string">"请输入项目名称"</span> });
  }
 
</code></pre>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/545652fb30e9479cbdc01a0c03d384cd~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6LW15bCP5bed:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741388815&amp;x-signature=WdLkUh8lwMdRZ79bw81NglovZaQ%3D" alt="image.png" loading="lazy">
2. 如果文件已存在需要让用户判断是否覆盖原文件</p>
<pre><code class="hljs language-js" lang="js">  <span class="hljs-keyword">const</span> filePath = path.<span class="hljs-title function_">resolve</span>(process.<span class="hljs-title function_">cwd</span>(), prjName);

  <span class="hljs-keyword">if</span> (fs.<span class="hljs-title function_">existsSync</span>(filePath)) {
    <span class="hljs-keyword">const</span> run = <span class="hljs-keyword">await</span> <span class="hljs-title function_">isOverWrite</span>(prjName);
    <span class="hljs-keyword">if</span> (run) {
      <span class="hljs-keyword">await</span> fs.<span class="hljs-title function_">remove</span>(filePath);
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span>;
  }
  
  <span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">isOverWrite</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">fileName: string</span>) =&gt; {
  log.<span class="hljs-title function_">warning</span>(<span class="hljs-string">`<span class="hljs-subst">${fileName}</span> 文件已存在 !`</span>);
  <span class="hljs-keyword">return</span> <span class="hljs-title function_">select</span>({
    <span class="hljs-attr">message</span>: <span class="hljs-string">"是否覆盖原文件: "</span>,
    <span class="hljs-attr">choices</span>: [
      { <span class="hljs-attr">name</span>: <span class="hljs-string">"覆盖"</span>, <span class="hljs-attr">value</span>: <span class="hljs-literal">true</span> },
      { <span class="hljs-attr">name</span>: <span class="hljs-string">"取消"</span>, <span class="hljs-attr">value</span>: <span class="hljs-literal">false</span> },
    ],
  });
};
</code></pre>
<ol start="3">
<li>选择模板</li>
</ol>
<p>就是预设了一个模版，将模版转为  select中 choices 需要的格式</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 这里保存了我写好的预设模板</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-attr">templates</span>: <span class="hljs-title class_">Map</span>&lt;string, <span class="hljs-title class_">TemplateInfo</span>&gt; = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([
  [
    <span class="hljs-string">"Vite5-Vue3-Typescript-template"</span>,
    {
      <span class="hljs-attr">name</span>: <span class="hljs-string">"Vue-admin-template"</span>,
      <span class="hljs-attr">downloadUrl</span>: <span class="hljs-string">"https://github.com/github-learning/vue3-admin"</span>, <span class="hljs-comment">// 为提高github 访问速度，使用 kk 来加速</span>
      <span class="hljs-attr">description</span>: <span class="hljs-string">"Vue3技术栈前端开发模板"</span>,
      <span class="hljs-attr">branch</span>: <span class="hljs-string">"main"</span>,
    },
  ],
  [
    <span class="hljs-string">"React-template"</span>,
    {
      <span class="hljs-attr">name</span>: <span class="hljs-string">"React-admin-template"</span>,
      <span class="hljs-attr">downloadUrl</span>: <span class="hljs-string">"https://github.com/github-learning/vue3-admin"</span>, <span class="hljs-comment">// 目前还没有开发React 技术栈模版，暂时用Vue 替代</span>
      <span class="hljs-attr">description</span>: <span class="hljs-string">"React技术栈前端开发模板"</span>,
      <span class="hljs-attr">branch</span>: <span class="hljs-string">"main"</span>,
    },
  ],
]);
<span class="hljs-keyword">const</span> templateName = <span class="hljs-keyword">await</span> <span class="hljs-title function_">select</span>({
    <span class="hljs-attr">message</span>: <span class="hljs-string">"请选择需要初始化的模板:"</span>,
    <span class="hljs-attr">choices</span>: templateList,
  });

</code></pre>
<ol start="4">
<li>下载模版（这里主要逻辑封装在utils 里的 clone 函数中）</li>
</ol>
<pre><code class="hljs language-js" lang="js">
<span class="hljs-comment">//  下载模板</span>
  <span class="hljs-keyword">const</span> gitRepoInfo = templates.<span class="hljs-title function_">get</span>(templateName);

  <span class="hljs-keyword">if</span> (gitRepoInfo) {
    <span class="hljs-keyword">await</span> <span class="hljs-title function_">clone</span>(gitRepoInfo.<span class="hljs-property">downloadUrl</span>, prjName, [
      <span class="hljs-string">"-b"</span>,
      <span class="hljs-string">`<span class="hljs-subst">${gitRepoInfo.branch}</span>`</span>,
    ]);
  } <span class="hljs-keyword">else</span> {
    log.<span class="hljs-title function_">error</span>(<span class="hljs-string">`<span class="hljs-subst">${templateName}</span> 模板不存在`</span>);
  }
</code></pre>
<ol start="5">
<li>clone 函数</li>
</ol>
<p>主要就是利用 simple-git 去拉取git 仓库代码</p>
<p><strong>git.clone(url, prjName, options), "代码下载中: ", {
estimate: 8000, // 展示预估时间
})</strong></p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">import</span> simpleGit, { <span class="hljs-title class_">SimpleGit</span>, <span class="hljs-title class_">SimpleGitOptions</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"simple-git"</span>;
<span class="hljs-keyword">import</span> { log } <span class="hljs-keyword">from</span> <span class="hljs-string">"./log"</span>;
<span class="hljs-keyword">import</span> createLogger <span class="hljs-keyword">from</span> <span class="hljs-string">"progress-estimator"</span>;
<span class="hljs-keyword">import</span> chalk <span class="hljs-keyword">from</span> <span class="hljs-string">"chalk"</span>;

<span class="hljs-keyword">const</span> figlet = <span class="hljs-built_in">require</span>(<span class="hljs-string">"figlet"</span>);

<span class="hljs-keyword">const</span> logger = <span class="hljs-title function_">createLogger</span>({
  <span class="hljs-comment">// 初始化进度条</span>
  <span class="hljs-attr">spinner</span>: {
    <span class="hljs-attr">interval</span>: <span class="hljs-number">300</span>, <span class="hljs-comment">// 变换时间 ms</span>
    <span class="hljs-attr">frames</span>: [<span class="hljs-string">"⠋"</span>, <span class="hljs-string">"⠙"</span>, <span class="hljs-string">"⠹"</span>, <span class="hljs-string">"⠸"</span>, <span class="hljs-string">"⠼"</span>, <span class="hljs-string">"⠴"</span>, <span class="hljs-string">"⠦"</span>, <span class="hljs-string">"⠧"</span>, <span class="hljs-string">"⠇"</span>, <span class="hljs-string">"⠏"</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span>
      chalk.<span class="hljs-title function_">blue</span>(item)
    ), <span class="hljs-comment">// 设置加载动画</span>
  },
});
<span class="hljs-keyword">const</span> <span class="hljs-title function_">goodPrinter</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> figlet.<span class="hljs-title function_">textSync</span>(<span class="hljs-string">"欢迎使用 vp-cli-tools 脚手架"</span>, {
    <span class="hljs-attr">font</span>: <span class="hljs-string">"Standard"</span>,
  });
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chalk.<span class="hljs-title function_">rgb</span>(<span class="hljs-number">40</span>, <span class="hljs-number">156</span>, <span class="hljs-number">193</span>).<span class="hljs-title function_">visible</span>(data));
};

<span class="hljs-comment">// 下面就是一些相关的提示</span>

<span class="hljs-keyword">const</span> <span class="hljs-attr">gitOptions</span>: <span class="hljs-title class_">Partial</span>&lt;<span class="hljs-title class_">SimpleGitOptions</span>&gt; = {
  <span class="hljs-attr">baseDir</span>: process.<span class="hljs-title function_">cwd</span>(), <span class="hljs-comment">// 根目录</span>
  <span class="hljs-attr">binary</span>: <span class="hljs-string">"git"</span>,
  <span class="hljs-attr">maxConcurrentProcesses</span>: <span class="hljs-number">6</span>, <span class="hljs-comment">// 最大并发进程数</span>
};

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> clone = <span class="hljs-keyword">async</span> (
  <span class="hljs-attr">url</span>: string,
  <span class="hljs-attr">prjName</span>: string,
  <span class="hljs-attr">options</span>: string[]
): <span class="hljs-title class_">Promise</span>&lt;any&gt; =&gt; {
  <span class="hljs-keyword">const</span> <span class="hljs-attr">git</span>: <span class="hljs-title class_">SimpleGit</span> = <span class="hljs-title function_">simpleGit</span>(gitOptions);
  <span class="hljs-keyword">try</span> {
    <span class="hljs-comment">// 开始下载代码并展示预估时间进度条</span>
    <span class="hljs-keyword">await</span> <span class="hljs-title function_">logger</span>(git.<span class="hljs-title function_">clone</span>(url, prjName, options), <span class="hljs-string">"代码下载中: "</span>, {
      <span class="hljs-attr">estimate</span>: <span class="hljs-number">8000</span>, <span class="hljs-comment">// 展示预估时间</span>
    });

    <span class="hljs-comment">// 下面就是一些相关的提示</span>
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chalk.<span class="hljs-title function_">blueBright</span>(<span class="hljs-string">`==================================`</span>));
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chalk.<span class="hljs-title function_">blueBright</span>(<span class="hljs-string">`=== 欢迎使用 vp-cli-tools 脚手架 ===`</span>));
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chalk.<span class="hljs-title function_">blueBright</span>(<span class="hljs-string">`==================================`</span>));
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();

    log.<span class="hljs-title function_">success</span>(<span class="hljs-string">`项目创建成功 <span class="hljs-subst">${chalk.blueBright(prjName)}</span>`</span>);
    log.<span class="hljs-title function_">success</span>(<span class="hljs-string">`执行以下命令启动项目：`</span>);
    log.<span class="hljs-title function_">info</span>(<span class="hljs-string">`cd <span class="hljs-subst">${chalk.blueBright(prjName)}</span>`</span>);
    log.<span class="hljs-title function_">info</span>(<span class="hljs-string">`<span class="hljs-subst">${chalk.yellow(<span class="hljs-string">"pnpm"</span>)}</span> install`</span>);
    log.<span class="hljs-title function_">info</span>(<span class="hljs-string">`<span class="hljs-subst">${chalk.yellow(<span class="hljs-string">"pnpm"</span>)}</span> run dev`</span>);
    <span class="hljs-title function_">goodPrinter</span>();
  } <span class="hljs-keyword">catch</span> (<span class="hljs-attr">err</span>: any) {
    log.<span class="hljs-title function_">error</span>(<span class="hljs-string">"下载失败"</span>);
    log.<span class="hljs-title function_">error</span>(<span class="hljs-title class_">String</span>(err));
  }
};

</code></pre>
<p>至此 代码就 就clone 到本地了</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a4ef15488773438a9a88a724910280ed~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6LW15bCP5bed:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741388815&amp;x-signature=Yo4jiuu%2FdwYu07BE4l7I8PvHMgE%3D" alt="image.png" loading="lazy"></p>
<h3 data-id="heading-22">npm 发包</h3>
<ol>
<li>npm login</li>
<li>npm publish</li>
</ol>
<h3 data-id="heading-23">难点疑点</h3>
<h4 data-id="heading-24">1. 不同系统的兼容性问题</h4>
<p>终归到底，实现的是一个node js 脚本，最后使用 node xxx.js 执行，那有没有一种方案，解决不同系统的兼容性问题，将其转变为可执行的文件， <code>shebang</code> 机制，详见上面</p>
<h4 data-id="heading-25">2. 调用方式的选择</h4>
<p>目前使用的 <code>node ./dist/index.js create xxx</code>, 等安装vp-cli-tools 后，在生产环境就可以使用<code>vp-cli-tools</code>  来替代开发环境中 <code>node ./dist/index.js</code>，比如 <code>vp-cli-tools create xxx</code></p>
<h5 data-id="heading-26">全局调用方式的弊端（更新不及时）</h5>
<p>当我们使用vite / vue 的时候，官方的cli 更新，对我们是无感的，因为他是放在npm 上，我们使用<code>npm create vite</code> 的时候，会自动拉取最新版本</p>
<p>但是当我们把 脚手架当成全局 脚本 执行，  <code>vp-cli-tools create xxx</code> 就相当于
<code>npm create xxx</code>, 没有npm 做屏障，需要自己维<code>vp-cli-tools</code> 的版本，做一个checkVseriosn的 校验</p>
<h5 data-id="heading-27">npm create xxx 怎么实现</h5>
<p>当我们尝试通过 npm create vp-cli-tools 来运行cli</p>
<p>会报错  <a href="https://link.juejin.cn?target=https%3A%2F%2Fregistry.npmjs.org%2Fcreate-vp-cli-tools" target="_blank" title="https://registry.npmjs.org/create-vp-cli-tools" ref="nofollow noopener noreferrer">registry.npmjs.org/create-vp-c…</a>
但其实我们的名字是vp-cli-tools，说明对于npm 上面的cli ,需要满足他的规范，将名字 以<code>create-</code> 开头，
那么我们修改package.json 中的name 即可，然后就可以使用 <code>npm create vp-cli-tools</code> ,</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f371a61940f1460282d171777438a8a3~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6LW15bCP5bed:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741388815&amp;x-signature=sm4TMooqmLdHA9ok3Oh8ec69O%2FA%3D" alt="image.png" loading="lazy"></p>
<h5 data-id="heading-28">如果使用全局的调用方式，该怎么更新版本 ?</h5>
<p>安装依赖时，检测当前本地的版本，和线上版本做一个对比，如果低于线上版本，则waring 提示用户，cli 升级（npm install vp-cli-tools -g），也可以实现一个update 函数，内部其实也是执行 <code>npm install vp-cli-tools -g</code></p>
<h6 data-id="heading-29">checkVersion</h6>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 入口指令 index.ts</span>
program
  .<span class="hljs-title function_">command</span>(<span class="hljs-string">"update"</span>)
  .<span class="hljs-title function_">description</span>(<span class="hljs-string">"更新vp-cli-tools"</span>)
  .<span class="hljs-title function_">action</span>(<span class="hljs-function">() =&gt;</span> {
    <span class="hljs-title function_">update</span>();
  });
</code></pre>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// create 时 version 对比  create.ts</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getNpmLatestVersion</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">npmName: string</span>) =&gt; {
  <span class="hljs-comment">// data['dist-tags'].latest 为最新版本号</span>
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"name"</span>, npmName);
  <span class="hljs-keyword">try</span> {
    <span class="hljs-keyword">const</span> { data } = (<span class="hljs-keyword">await</span> <span class="hljs-title function_">getNpmInfo</span>(npmName)) <span class="hljs-keyword">as</span> <span class="hljs-title class_">AxiosResponse</span>;
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(
      <span class="hljs-string">"%c [  ]-57"</span>,
      <span class="hljs-string">"font-size:13px; background:pink; color:#bf2c9f;"</span>,
      data
    );
    <span class="hljs-keyword">return</span> data[<span class="hljs-string">"dist-tags"</span>].<span class="hljs-property">latest</span>;
  } <span class="hljs-keyword">catch</span> (error) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"error"</span>, error);
  }
};
<span class="hljs-comment">// npm 包提供了根据包名称查询包信息的接口// 我们在这里直接使用 axios 请求调用即可</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getNpmInfo</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">npmName: string</span>) =&gt; {
  <span class="hljs-keyword">const</span> npmUrl = <span class="hljs-string">"https://registry.npmjs.org/"</span> + npmName;
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"npmUrl"</span>, npmUrl);
  <span class="hljs-keyword">let</span> res = {};
  <span class="hljs-keyword">try</span> {
    res = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(npmUrl);
  } <span class="hljs-keyword">catch</span> (err) {
    log.<span class="hljs-title function_">error</span>(err <span class="hljs-keyword">as</span> string);
  }
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"res"</span>, res);
  <span class="hljs-keyword">return</span> res;
};

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">checkVersion</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">name: string, curVersion: string</span>) =&gt; {
  <span class="hljs-keyword">const</span> latestVersion = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getNpmLatestVersion</span>(name);
  <span class="hljs-keyword">const</span> need = lodash.<span class="hljs-title function_">gt</span>(latestVersion, curVersion);
  <span class="hljs-keyword">if</span> (need) {
    log.<span class="hljs-title function_">info</span>(
      <span class="hljs-string">`-----检测到 vp-cli-tools 最新版:<span class="hljs-subst">${chalk.blueBright(
        latestVersion
      )}</span> 当前版本:<span class="hljs-subst">${chalk.blueBright(curVersion)}</span> ~`</span>
    );
    log.<span class="hljs-title function_">info</span>(
      <span class="hljs-string">`可使用 <span class="hljs-subst">${chalk.yellow(<span class="hljs-string">"pnpm"</span>)}</span> install vp-cli-tools@latest 更新 ~`</span>
    );
  }
  <span class="hljs-keyword">return</span> need;
};
<span class="hljs-comment">// create  主函数 调用 </span>
<span class="hljs-keyword">await</span> <span class="hljs-title function_">checkVersion</span>(name, version); <span class="hljs-comment">// 检测版本更新</span>
</code></pre>
<h6 data-id="heading-30">update</h6>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">import</span> process <span class="hljs-keyword">from</span> <span class="hljs-string">"child_process"</span>;
<span class="hljs-keyword">import</span> chalk <span class="hljs-keyword">from</span> <span class="hljs-string">"chalk"</span>;
<span class="hljs-keyword">import</span> ora <span class="hljs-keyword">from</span> <span class="hljs-string">"ora"</span>;
<span class="hljs-keyword">import</span> os <span class="hljs-keyword">from</span> <span class="hljs-string">"os"</span>; <span class="hljs-comment">// 导入 os 模块</span>
<span class="hljs-keyword">const</span> spinner = <span class="hljs-title function_">ora</span>({
  <span class="hljs-attr">text</span>: <span class="hljs-string">"vp-cli-tools 正在更新"</span>,
  <span class="hljs-attr">spinner</span>: {
    <span class="hljs-attr">interval</span>: <span class="hljs-number">300</span>,
    <span class="hljs-attr">frames</span>: [<span class="hljs-string">"⠋"</span>, <span class="hljs-string">"⠙"</span>, <span class="hljs-string">"⠹"</span>, <span class="hljs-string">"⠸"</span>, <span class="hljs-string">"⠼"</span>, <span class="hljs-string">"⠴"</span>, <span class="hljs-string">"⠦"</span>, <span class="hljs-string">"⠧"</span>, <span class="hljs-string">"⠇"</span>, <span class="hljs-string">"⠏"</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span>
      chalk.<span class="hljs-title function_">blue</span>(item)
    ), <span class="hljs-comment">// 设置加载动画</span>
  },
});

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) {
  spinner.<span class="hljs-title function_">start</span>();

  process.<span class="hljs-title function_">exec</span>(
    <span class="hljs-string">"npm install vp-cli-tools@latest -g"</span>,
    <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> {
      spinner.<span class="hljs-title function_">stop</span>();

      <span class="hljs-comment">// 判断操作系统类型</span>
      <span class="hljs-keyword">const</span> platform = os.<span class="hljs-title function_">platform</span>();

      <span class="hljs-comment">// 如果安装没有权限</span>
      <span class="hljs-keyword">if</span> (error &amp;&amp; stderr.<span class="hljs-title function_">includes</span>(<span class="hljs-string">"EACCES"</span>)) {
        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(
          chalk.<span class="hljs-title function_">red</span>(<span class="hljs-string">"没有权限进行全局安装。请尝试使用以下命令重试："</span>)
        );
        <span class="hljs-keyword">if</span> (platform === <span class="hljs-string">"linux"</span> || platform === <span class="hljs-string">"darwin"</span>) {
          <span class="hljs-comment">// 针对 Linux/macOS 系统</span>
          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(
            chalk.<span class="hljs-title function_">yellow</span>(
              <span class="hljs-string">"sudo npm install vp-cli-tools@latest -g  // 对于 Linux/macOS 用户"</span>
            )
          );
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (platform === <span class="hljs-string">"win32"</span>) {
          <span class="hljs-comment">// 针对 Windows 系统</span>
          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chalk.<span class="hljs-title function_">yellow</span>(<span class="hljs-string">"管理员权限执行命令 // 对于 Windows 用户"</span>));
        }
        <span class="hljs-keyword">return</span>;
      }

      <span class="hljs-keyword">if</span> (!error) {
        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chalk.<span class="hljs-title function_">green</span>(<span class="hljs-string">"更新成功"</span>));
      } <span class="hljs-keyword">else</span> {
        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chalk.<span class="hljs-title function_">red</span>(error));
      }
    }
  );
}

</code></pre>
<h3 data-id="heading-31">自动安装依赖 / 启动项目</h3>
<p>上面我们下载完项目，会返回下载成功的提示，但是我们直<code>接用脚本安装依赖</code>，<code>运行项目</code>，不是更方便</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 在 utils/clone.ts 中，新增 自动安装 依赖和 自动运行项目</span>


<span class="hljs-comment">// 安装项目依赖</span>
<span class="hljs-keyword">const</span> installDependencies = (<span class="hljs-attr">prjName</span>: string): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-keyword">void</span>&gt; =&gt; {
  <span class="hljs-keyword">const</span> projectDir = path.<span class="hljs-title function_">join</span>(process.<span class="hljs-title function_">cwd</span>(), prjName);

  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {
    <span class="hljs-keyword">const</span> npmInstall = <span class="hljs-title function_">spawn</span>(<span class="hljs-string">"npm"</span>, [<span class="hljs-string">"install"</span>, <span class="hljs-string">"--verbose"</span>, <span class="hljs-string">"--force"</span>], {
      <span class="hljs-attr">cwd</span>: projectDir,
      <span class="hljs-attr">stdio</span>: <span class="hljs-string">"inherit"</span>, <span class="hljs-comment">// 将子进程的输出直接映射到父进程（当前进程）的输出</span>
      <span class="hljs-attr">shell</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 使用 shell，确保命令在 Windows 和其他平台上都能运行</span>
    });

    npmInstall.<span class="hljs-title function_">on</span>(<span class="hljs-string">"close"</span>, <span class="hljs-function">(<span class="hljs-params">code</span>) =&gt;</span> {
      <span class="hljs-keyword">if</span> (code === <span class="hljs-number">0</span>) {
        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chalk.<span class="hljs-title function_">green</span>(<span class="hljs-string">"依赖安装成功"</span>));
        <span class="hljs-title function_">resolve</span>();
      } <span class="hljs-keyword">else</span> {
        <span class="hljs-title function_">reject</span>(<span class="hljs-string">`依赖安装失败，退出代码: <span class="hljs-subst">${code}</span>`</span>);
      }
    });

    npmInstall.<span class="hljs-title function_">on</span>(<span class="hljs-string">"error"</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {
      <span class="hljs-title function_">reject</span>(<span class="hljs-string">`依赖安装时发生错误: <span class="hljs-subst">${err.message}</span>`</span>);
    });
  });
};

<span class="hljs-comment">// 运行项目</span>
<span class="hljs-keyword">const</span> runProject = (<span class="hljs-attr">prjName</span>: string): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-keyword">void</span>&gt; =&gt; {
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {
    <span class="hljs-keyword">const</span> projectDir = path.<span class="hljs-title function_">join</span>(process.<span class="hljs-title function_">cwd</span>(), prjName);
    <span class="hljs-keyword">const</span> spinnerTip = <span class="hljs-title function_">ora</span>(<span class="hljs-string">"项目启动中..."</span>).<span class="hljs-title function_">start</span>();

    <span class="hljs-comment">// 检查项目目录是否存在</span>
    <span class="hljs-keyword">if</span> (!fs.<span class="hljs-title function_">existsSync</span>(projectDir)) {
      spinnerTip.<span class="hljs-title function_">fail</span>(<span class="hljs-string">"项目目录不存在"</span>);
      <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">"项目目录不存在"</span>));
      <span class="hljs-keyword">return</span>;
    }

    <span class="hljs-comment">// 使用 spawn 执行 pnpm run serve</span>
    <span class="hljs-keyword">const</span> serveProcess = <span class="hljs-title function_">spawn</span>(<span class="hljs-string">"pnpm"</span>, [<span class="hljs-string">"run"</span>, <span class="hljs-string">"serve"</span>], {
      <span class="hljs-attr">cwd</span>: projectDir,
      <span class="hljs-attr">stdio</span>: <span class="hljs-string">"pipe"</span>, <span class="hljs-comment">// 子进程的输出流式处理</span>
      <span class="hljs-attr">shell</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 确保在跨平台运行时正常</span>
    });

    serveProcess.<span class="hljs-property">stdout</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">"data"</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {
      <span class="hljs-keyword">const</span> output = data.<span class="hljs-title function_">toString</span>();
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chalk.<span class="hljs-title function_">green</span>(output)); <span class="hljs-comment">// 实时打印日志</span>

      <span class="hljs-comment">// 检测到启动完成的标志</span>
      <span class="hljs-keyword">if</span> (output.<span class="hljs-title function_">includes</span>(<span class="hljs-string">"App running at"</span>)) {
        spinnerTip.<span class="hljs-title function_">succeed</span>(<span class="hljs-string">"项目启动成功！"</span>);
        <span class="hljs-title function_">resolve</span>(); <span class="hljs-comment">// 完成 Promise</span>
      }
    });

    serveProcess.<span class="hljs-property">stderr</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">"data"</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(chalk.<span class="hljs-title function_">red</span>(data.<span class="hljs-title function_">toString</span>()));
    });

    serveProcess.<span class="hljs-title function_">on</span>(<span class="hljs-string">"close"</span>, <span class="hljs-function">(<span class="hljs-params">code</span>) =&gt;</span> {
      <span class="hljs-keyword">if</span> (code !== <span class="hljs-number">0</span>) {
        spinnerTip.<span class="hljs-title function_">fail</span>(<span class="hljs-string">"项目启动失败"</span>);
        <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`项目启动失败，退出代码: <span class="hljs-subst">${code}</span>`</span>));
      }
    });

    serveProcess.<span class="hljs-title function_">on</span>(<span class="hljs-string">"error"</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {
      spinnerTip.<span class="hljs-title function_">fail</span>(<span class="hljs-string">"项目启动失败"</span>);
      <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`项目启动失败: <span class="hljs-subst">${err.message}</span>`</span>));
    });
  });
};


<span class="hljs-keyword">await</span> <span class="hljs-title function_">installDependencies</span>(prjName);
<span class="hljs-keyword">await</span> <span class="hljs-title function_">runProject</span>(prjName);
    
    
</code></pre>
<p>这里遇到一个问题，就是使用 exec 去执行逻辑，无法实时输出流信息，<code>在网络比较卡的时候，卡在哪里，就跟尴尬</code>，了解到 exec 主要是将子进程的输出缓冲到内存中，并在子进程执行完毕后一次性通过回调返回，并不适合 我们实时交互的功能，后来采用 <strong><code>spawn</code></strong> 实时地与子进程进行交互并获取其输出，但是 一般项目的流到 App running at 就终止后续流的输出，我们可以在这个时候resolve， 等待下次文件变更，再更新流</p>
<h3 data-id="heading-32">内部私有 / 存放在 npm 上</h3>
<p>以上都是 发布到npm 公共区，但是当我们有自己的服务器，并不想公开，比如我们使用的是 Nexus，那么就可以使用</p>
<h4 data-id="heading-33">步骤 1：将包发布到 Nexus</h4>
<p>你可以使用 <code>npm publish</code> 命令将包发布到你在 Nexus 中创建的私有仓库。</p>
<ol>
<li>确保你已经在 Nexus 上配置了适当的权限。如果你还没有配置，可以在 Nexus 的用户管理页面中创建用户并为其分配适当的权限。</li>
<li>登录 Nexus：</li>
</ol>
<pre><code class="hljs language-js" lang="js">npm login --registry=<span class="hljs-attr">http</span>:<span class="hljs-comment">//localhost:8081/repository/npm-private-repo/</span>
</code></pre>
<p>你需要输入用户名、密码和邮箱（这些信息是你在 Nexus 中配置的）。</p>
<ol start="3">
<li>发布 npm 包到 Nexus：</li>
</ol>
<pre><code class="hljs language-js" lang="js">npm publish --registry=<span class="hljs-attr">http</span>:<span class="hljs-comment">//localhost:8081/repository/npm-private-repo/</span>
</code></pre>
<p>此时，npm 包就会上传到 Nexus 的私有仓库中。</p>
<h4 data-id="heading-34">步骤 2：安装私有仓库中的包</h4>
<p>现在，你可以从你的私有仓库安装包。如果你已经在 <code>.npmrc</code> 中配置了仓库地址，你可以直接通过 <code>npm install</code> 安装私有包：</p>
<pre><code class="hljs language-js" lang="js">
npm install &lt;package-name&gt;
</code></pre>
<p>源设置</p>
<ol>
<li>在 <code>.npmrc</code> 文件中添加以下配置，将 Nexus 的 npm 仓库作为默认仓库：</li>
</ol>
<pre><code class="hljs language-js" lang="js">registry=<span class="hljs-attr">http</span>:<span class="hljs-comment">//localhost:8081/repository/npm-private-repo/</span>
</code></pre>
<ol start="2">
<li>或者使用nrm 工具</li>
</ol>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f68e476c58c44ae1a0469e26a5479191~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6LW15bCP5bed:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741388815&amp;x-signature=SIpyuy75WHFViinCkbri8A%2F9R3o%3D" alt="image.png" loading="lazy"></p>
<ol start="3">
<li>通过 配置package.json</li>
</ol>
<p>这样就和发布到npm一样了，不需要在制定publish 的源头</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-string">"publishConfig"</span>: {
    <span class="hljs-string">"registry"</span>: <span class="hljs-string">"http://192.168.xx.xx:6056/repository/npm-hosted/"</span>,
    <span class="hljs-string">"access"</span>: <span class="hljs-string">"public"</span>
  },
</code></pre>
<h3 data-id="heading-35">fs / fs-extra 相关</h3>
<h4 data-id="heading-36">2.&nbsp;<strong>增强功能（<code>fs-extra</code>）</strong></h4>
<p><code>fs-extra</code> 是对 <code>fs</code> 模块的增强，它是基于 <code>fs</code> 构建的，但提供了更多的功能和便捷的 API，特别是一些常用的文件操作功能。<code>fs-extra</code> 包含 <code>fs</code> 模块的所有方法，并添加了以下几个有用的扩展功能：</p>
<h5 data-id="heading-37">a)&nbsp;<strong><code>fs-extra</code>&nbsp;提供的额外功能</strong></h5>
<ul>
<li>
<p><strong><code>fs.copy()</code></strong> ：用来复制文件或目录，可以进行深度复制（递归复制目录）。<code>fs</code>&nbsp;本身没有&nbsp;<code>copy</code>&nbsp;方法，需要手动实现。</p>
</li>
<li>
<p><strong><code>fs.remove()</code></strong> ：删除文件或目录，包括非空目录。<code>fs.rmdir</code>&nbsp;只支持删除空目录，而&nbsp;<code>fs.remove</code>&nbsp;则可以删除非空目录。</p>
</li>
<li>
<p><strong><code>fs.ensureFile()</code></strong> ：确保文件存在，如果文件不存在，则创建文件。等价于&nbsp;<code>fs.writeFile</code>，但如果目标文件不存在，会先创建空文件，再写入数据。</p>
</li>
<li>
<p><strong><code>fs.ensureDir()</code></strong> ：确保目录存在。如果目录不存在，创建目录。类似于&nbsp;<code>fs.mkdir</code>，但它会自动创建不存在的父目录（递归创建）。</p>
</li>
<li>
<p><strong><code>fs.emptyDir()</code></strong> ：清空目录中的所有文件和子目录。</p>
</li>
<li>
<p><strong><code>fs.move()</code></strong> ：用来移动文件或目录，类似于&nbsp;<code>fs.rename</code>，但&nbsp;<code>fs.rename</code>&nbsp;在某些文件系统上可能不起作用（例如，跨越不同的文件系统时）。</p>
</li>
<li>
<p>如果你只需要简单的文件操作，<code>fs</code>&nbsp;是足够的。</p>
</li>
<li>
<p>如果你需要更多便捷的文件操作，像递归复制、删除非空目录等，或者希望使用更现代的 API（如&nbsp;<code>async/await</code>），<code>fs-extra</code>&nbsp;提供了更多功能和更易用的接口。</p>
</li>
</ul>
<h3 data-id="heading-38">源代码地址</h3>
<p>github <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fgithub-learning%2Fvp-cli-tools" target="_blank" title="https://github.com/github-learning/vp-cli-tools" ref="nofollow noopener noreferrer">github.com/github-lear…</a></p>
<p>npm <a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fvp-cli-tools" target="_blank" title="https://www.npmjs.com/package/vp-cli-tools" ref="nofollow noopener noreferrer">www.npmjs.com/package/vp-…</a></p></div></div>