
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/noear/p/18871489" title="发布于 2025-05-11 17:54">
    <span role="heading" aria-level="2">Java Solon-MCP 实现 MCP 实践全解析：SSE 与 STDIO 通信模式详解</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        MCP（Model Context Protocol，模型上下文协议）是由Anthropic公司于2024年推出的开放标准，旨在统一AI模型与外部数据源、工具之间的通信方式。MCP提供了一套规范化的接口，使大语言模型（LLM）能够更便捷地与各类外部工具和资源进行交互。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="一mcp简介">一、MCP简介</h2>
<p>MCP（Model Context Protocol，模型上下文协议）是由Anthropic公司于2024年推出的开放标准，旨在统一AI模型与外部数据源、工具之间的通信方式。MCP提供了一套规范化的接口，使大语言模型（LLM）能够更便捷地与各类外部工具和资源进行交互。</p>
<p>通俗点讲是：</p>
<pre><code class="language-java">一个专属的 RPC 协议
</code></pre>
<p>MCP的核心价值在于：</p>
<ul>
<li>标准化接口：为AI模型提供统一的工具发现和使用接口</li>
<li>安全通信：定义了一套安全的模型与工具之间的通信协议</li>
<li>跨平台兼容：适用于不同AI提供商的模型</li>
<li>提升AI能力：让AI能够访问最新数据和执行复杂操作</li>
</ul>
<h2 id="二solon-mcp-简介">二、Solon-MCP 简介</h2>
<p>Solon-MCP（全名 Solon-AI-MCP）是一个基于 Java 的高级框架，专为构建 MCP 服务器而设计。它极大简化了 MCP 服务器的开发流程，让开发者能够以最小的代码量创建功能强大的MCP服务器。</p>
<p>Solon-MCP 的主要特点包括：</p>
<ul>
<li>简洁的 API：通过注解形式，简化MCP服务器的创建</li>
<li>丰富的功能：支持工具（Tools）、资源（Resources）、提示模板（Prompts）等MCP核心元素</li>
<li>多种传输方式：支持 STDIO 和 SSE 等不同传输协议</li>
<li>类型安全：利用 Java 的类型提示，自动生成 MCP 协议所需的模式定义</li>
<li>内置图像处理：支持图像数据的自动格式转换和处理</li>
<li>使用 Solon-MCP，开发者可以专注于业务逻辑，而不必过多关注底层协议细节。</li>
</ul>
<h2 id="三java-solon-mcp-实现-stdio-方式">三、Java Solon-MCP 实现 STDIO 方式</h2>
<h3 id="1基本示例">（1）基本示例</h3>
<p>下面是一个使用 Solon-MCP 实现 STDIO 通信方式的基本示例，创建一个简单的计算器工具 CalculatorTools：</p>
<pre><code class="language-java">@McpServerEndpoint(channel = McpChannel.STDIO)
public class CalculatorTools {
    @ToolMapping(description = "将两个数字相加")
    public int add(@Param int a, @Param int b) {
        return a + b;
    }

    @ToolMapping(description = "从第一个数中减去第二个数")
    public int subtract(@Param int a, @Param int b) {
        return a - b;
    }

    @ToolMapping(description = "将两个数相乘")
    public int multiply(@Param int a, @Param int b) {
        return a * b;
    }

    @ToolMapping(description = "将第一个数除以第二个数")
    public float divide(@Param float a, @Param float b) {
        return a / b;
    }
}
</code></pre>
<p>在这个示例中，我们：</p>
<ul>
<li>创建了一个名为 <code>CalculatorTools</code> 的 MCP 服务器实例</li>
<li>使用 <code>@ToolMapping</code> 注解定义了四个计算工具</li>
<li>通过 <code>@McpServerEndpoint(channel = McpChannel.STDIO)</code> 以 STDIO 模式启动服务器</li>
</ul>
<h3 id="42-运行和使用">4.2 运行和使用</h3>
<p>（先打包成 jar 胖包）运行 STDIO 模式的 MCP 服务器：</p>
<pre><code class="language-java">java -jar demo.jar
</code></pre>
<p>在这种模式下，服务器将等待标准输入上的请求，然后通过标准输出返回响应。所有支持 STDIO 模式的 MCP 客户端（或工具，或中间件），都可以连接使用。</p>
<h2 id="五java-solon-mcp-实现-sse-方式">五、Java Solon-MCP 实现 SSE 方式</h2>
<h3 id="51-基本示例">5.1 基本示例</h3>
<p>下面是使用 Solon-MCP 实现 SSE 通信方式的示例，创建一个简单的天气服务：</p>
<pre><code class="language-java">@McpServerEndpoint(sseEndpoint = "/mcp/sse")
public class WeatherTools {
    @ToolMapping(description = "获取指定城市的当前天气")
    public String get_weather(@Param String city) {
        return "{city: '" + city + "', temperature:[10,25], condition:['sunny', 'clear', 'hot'], unit:celsius}";
    }

    //给前端用，需要严格的 json 格式
    @Produces(MimeType.APPLICATION_JSON_VALUE)
    @ResourceMapping(uri = "weather://cities", description = "获取所有可用的城市列表")
    public List&lt;String&gt; get_available_cities() {
        return Arrays.asList("Tokyo", "Sydney", "Tokyo");
    }

    @ResourceMapping(uri = "weather://forecast/{city}", description = "获取指定城市的天气预报资源")
    public String get_forecast(@Param String city) {
         return "{city: '" + city + "', temperature:[10,25], condition:['sunny', 'clear', 'hot'], unit:celsius}";
    }
}
</code></pre>
<p>在这个示例中：</p>
<ul>
<li>我们创建了一个名为 "Weather Service" 的 MCP 服务器</li>
<li>定义了一个 get_weather 工具函数，用于获取城市的当前天气</li>
<li>添加了两个资源：一个返回所有可用城市的列表，另一个返回指定城市的天气预报</li>
<li>通过指定 <code>sseEndpoint</code> 以 SSE 模式启动服务器</li>
</ul>
<h3 id="52-运行和使用">5.2 运行和使用</h3>
<p>运行 SSE 模式的 MCP 服务器：</p>
<pre><code>java -jar demo.jar
</code></pre>
<p>服务器将在指定端口（默认为 8080）启动，并监听HTTP连接。您可以通过浏览器访问：</p>
<pre><code>http://localhost:8080/mcp/sse
</code></pre>
<p>要与此服务器交互，可以使用支持 SSE 传输的 MCP 客户端，或者使用如下 Java 代码创建一个简单的客户端：</p>
<pre><code class="language-java">public void test() {
    McpClientProvider clientProvider = McpClientProvider.builder()
                .apiUrl("http://localhost:8080/mcp/sse")
                .build();

    String rst1 = clientProvider.callToolAsText("get_weather", Map.of("city", "杭州"))
                                .getContent();
                                   
    String rst2 = clientProvider.readResourceAsText("weather://cities")
                                .getContent();
}
</code></pre>
<h2 id="六总结">六、总结</h2>
<p>Java Solon-MCP 为开发者提供了一种简单高效的方式来构建 MCP 服务器，无论是使用 STDIO 还是 SSE 传输方式。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.488453366244213" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-11 18:31">2025-05-11 17:54</span>&nbsp;
<a href="https://www.cnblogs.com/noear">带刺的坐椅</a>&nbsp;
阅读(<span id="post_view_count">24</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18871489);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18871489', targetLink: 'https://www.cnblogs.com/noear/p/18871489', title: 'Java Solon-MCP 实现 MCP 实践全解析：SSE 与 STDIO 通信模式详解' })">举报</a>
</div>
        