
	<h1 class="postTitle"><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/MikeZhang/p/18648634/mylogger20250102" title="发布于 2025-01-02 19:56">
    <span role="heading" aria-level="2">FreeSWITCH日志功能分析及apr模拟</span>
    

</a>
</h1>
	<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div>操作系统版本：Debian 12.5_x64</div>
<div>FreeSWITCH版本： 1.10.11</div>
<div>apr库版本：apr-1.7.4 &amp; apr-util-1.6.3</div>
<div>gcc版本： 12.2.0</div>
<div>&nbsp;</div>
<div>
<div>日志功能在python等脚本里面是标准库提供的，使用起来非常方便，如果在新开发的C程序里面实现该功能，比如将系统时间、文件名称、代码行数都打印出来，该如何实现呢？</div>
<div>最近就遇到了这个问题，是通过参考freeswitch代码实现的。</div>
<div>今天整理下这方面的内容，我将从以下几个方面进行展开：</div>
<div>
<ul>
<li>freeswitch日志功能及相关源码分析</li>
<li>日志功能实现可行性分析</li>
<li>使用示例及运行效果</li>
<li>资源获取</li>
</ul>
<h2 id="LfNe-1735815310528">一、功能说明及源码分析</h2>
<div>在freeswitch中，可通过如下方式打印日志：</div>
<div>
<div class="cnblogs_code">
<pre>switch_log_printf(SWITCH_CHANNEL_LOG, SWITCH_LOG_INFO, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ENUM Reloaded\n</span><span style="color: rgba(128, 0, 0, 1)">"</span>);</pre>
</div>
<div>日志配置文件路径：</div>
<div>/usr/local/freeswitch/conf/autoload_configs/logfile.conf.xml</div>
<div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202501/300959-20250102185552116-1614132531.png" alt="" loading="lazy"></p>
<div>日志文件路径：</div>
<div>/usr/local/freeswitch/log/freeswitch.log</div>
<div>
<div>日志效果：</div>
<div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202501/300959-20250102185659744-74706870.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<div>由图可以看出，添加简单的日志代码，可将系统时间、文件名称、代码行数都打印出来。</div>
<div>这些功能在python等脚本里面很好实现，如果在c程序里面实现该功能，freeswitch的代码值得参考。</div>
<div>&nbsp;</div>
<div>下面就结合上述示例，分析下freeswitch日志功能源码。</div>
<h3 id="ylS6-1735815445775">1、switch_log_printf函数分析</h3>
<div>文件： switch_log.c</div>
<div>函数实现如下：</div>
</div>
</div>
<div class="cnblogs_code">
<pre>SWITCH_DECLARE(<span style="color: rgba(0, 0, 255, 1)">void</span>) switch_log_printf(switch_text_channel_t channel, <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *file, <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *func, <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> line,
                                       </span><span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *userdata, switch_log_level_t level, <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *<span style="color: rgba(0, 0, 0, 1)">fmt, ...)
{
    va_list ap;

    va_start(ap, fmt);
    switch_log_meta_vprintf(channel, file, func, line, userdata, level, NULL, fmt, ap);
    va_end(ap);
}</span></pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202501/300959-20250102185750111-14167315.png" alt="" loading="lazy"></p>
<p>从实现代码可以看出，switch_log_printf函数的参数列表里面有channel、file、func、line等参数，但调用时并未传入。</p>
<div>接下来看下调用时使用的参数。</div>
<div><strong>1）SWITCH_CHANNEL_LOG宏</strong></div>
<div>定义如下：</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">#define</span> SWITCH_CHANNEL_LOG SWITCH_CHANNEL_ID_LOG, __FILE__, __SWITCH_FUNC__, __LINE__, NULL</pre>
</div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202501/300959-20250102185828536-168737299.png" alt="" loading="lazy"></p>
<p>从代码实现来看，这个宏把需要的参数都传入了。</p>
<div><strong>2）SWITCH_LOG_INFO参数</strong></div>
<div>这个参数是enum类型，定义如下：</div>
<div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202501/300959-20250102185918129-1198374165.png" alt="" loading="lazy"></p>
<p>&nbsp;<strong>2、switch_log_meta_vprintf函数分析</strong></p>
<div>文件： switch_log.c</div>
<div>函数实现如下：</div>
</div>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_65479f8d-12ce-4be0-b277-408dd9814a1b" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_65479f8d-12ce-4be0-b277-408dd9814a1b" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_65479f8d-12ce-4be0-b277-408dd9814a1b" class="cnblogs_code_hide">
<pre>SWITCH_DECLARE(<span style="color: rgba(0, 0, 255, 1)">void</span>) switch_log_meta_vprintf(switch_text_channel_t channel, <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *file, <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *func, <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> line,
                                        </span><span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *userdata, switch_log_level_t level, cJSON **meta, <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *<span style="color: rgba(0, 0, 0, 1)">fmt, va_list ap)
{
    cJSON </span>*log_meta =<span style="color: rgba(0, 0, 0, 1)"> NULL;
    </span><span style="color: rgba(0, 0, 255, 1)">char</span> *data =<span style="color: rgba(0, 0, 0, 1)"> NULL;
    </span><span style="color: rgba(0, 0, 255, 1)">char</span> *new_fmt =<span style="color: rgba(0, 0, 0, 1)"> NULL;
    </span><span style="color: rgba(0, 0, 255, 1)">int</span> ret = <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    FILE </span>*<span style="color: rgba(0, 0, 0, 1)">handle;
    </span><span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *filep = (file ? switch_cut_path(file) : <span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *funcp = (func ? func : <span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 0, 255, 1)">char</span> *content =<span style="color: rgba(0, 0, 0, 1)"> NULL;
    switch_time_t now </span>=<span style="color: rgba(0, 0, 0, 1)"> switch_micro_time_now();
    uint32_t len;
#ifdef SWITCH_FUNC_IN_LOG
    </span><span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *extra_fmt = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%s [%s] %s:%d %s()%c%s</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 0, 255, 1)">#else</span>
    <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *extra_fmt = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%s [%s] %s:%d%c%s</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 0, 255, 1)">#endif</span><span style="color: rgba(0, 0, 0, 1)">
    switch_log_level_t limit_level </span>=<span style="color: rgba(0, 0, 0, 1)"> runtime.hard_log_level;
    switch_log_level_t special_level </span>=<span style="color: rgba(0, 0, 0, 1)"> SWITCH_LOG_UNINIT;

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (meta &amp;&amp; *<span style="color: rgba(0, 0, 0, 1)">meta) {
        log_meta </span>= *<span style="color: rgba(0, 0, 0, 1)">meta;
        </span>*meta =<span style="color: rgba(0, 0, 0, 1)"> NULL;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (limit_level ==<span style="color: rgba(0, 0, 0, 1)"> SWITCH_LOG_DISABLE) {
        </span><span style="color: rgba(0, 0, 255, 1)">goto</span><span style="color: rgba(0, 0, 0, 1)"> end;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (channel == SWITCH_CHANNEL_ID_SESSION &amp;&amp;<span style="color: rgba(0, 0, 0, 1)"> userdata) {
        switch_core_session_t </span>*session = (switch_core_session_t *<span style="color: rgba(0, 0, 0, 1)">) userdata;
        special_level </span>= session-&gt;<span style="color: rgba(0, 0, 0, 1)">loglevel;
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (limit_level &lt; session-&gt;<span style="color: rgba(0, 0, 0, 1)">loglevel) {
            limit_level </span>= session-&gt;<span style="color: rgba(0, 0, 0, 1)">loglevel;
        }
    }

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (level &gt; <span style="color: rgba(128, 0, 128, 1)">100</span><span style="color: rgba(0, 0, 0, 1)">) {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> ((uint32_t) (level - <span style="color: rgba(128, 0, 128, 1)">100</span>) &gt;<span style="color: rgba(0, 0, 0, 1)"> runtime.debug_level) {
            </span><span style="color: rgba(0, 0, 255, 1)">goto</span><span style="color: rgba(0, 0, 0, 1)"> end;
        }

        level </span>= <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (level &gt;<span style="color: rgba(0, 0, 0, 1)"> limit_level) {
        </span><span style="color: rgba(0, 0, 255, 1)">goto</span><span style="color: rgba(0, 0, 0, 1)"> end;
    }

    switch_assert(level </span>&lt;<span style="color: rgba(0, 0, 0, 1)"> SWITCH_LOG_INVALID);

    handle </span>=<span style="color: rgba(0, 0, 0, 1)"> switch_core_data_channel(channel);

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (channel !=<span style="color: rgba(0, 0, 0, 1)"> SWITCH_CHANNEL_ID_LOG_CLEAN) {
        </span><span style="color: rgba(0, 0, 255, 1)">char</span> date[<span style="color: rgba(128, 0, 128, 1)">80</span>] = <span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">switch_size_t retsize;</span>
<span style="color: rgba(0, 0, 0, 1)">        switch_time_exp_t tm;

        switch_time_exp_lt(</span>&amp;<span style="color: rgba(0, 0, 0, 1)">tm, now);
        switch_snprintf(date, </span><span style="color: rgba(0, 0, 255, 1)">sizeof</span>(date), <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%0.4d-%0.2d-%0.2d %0.2d:%0.2d:%0.2d.%0.6d %0.2f%%%%</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                        tm.tm_year </span>+ <span style="color: rgba(128, 0, 128, 1)">1900</span>, tm.tm_mon + <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">, tm.tm_mday, tm.tm_hour, tm.tm_min, tm.tm_sec, tm.tm_usec, switch_core_idle_cpu());

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">switch_strftime_nocheck(date, &amp;retsize, sizeof(date), "%Y-%m-%d %T", &amp;tm);</span>
<span style="color: rgba(0, 0, 0, 1)">
#ifdef SWITCH_FUNC_IN_LOG
        len </span>= (uint32_t) (strlen(extra_fmt) + strlen(date) + strlen(filep) + <span style="color: rgba(128, 0, 128, 1)">32</span> + strlen(funcp) +<span style="color: rgba(0, 0, 0, 1)"> strlen(fmt));
</span><span style="color: rgba(0, 0, 255, 1)">#else</span><span style="color: rgba(0, 0, 0, 1)">
        len </span>= (uint32_t) (strlen(extra_fmt) + strlen(date) + strlen(filep) + <span style="color: rgba(128, 0, 128, 1)">32</span> +<span style="color: rgba(0, 0, 0, 1)"> strlen(fmt));
</span><span style="color: rgba(0, 0, 255, 1)">#endif</span><span style="color: rgba(0, 0, 0, 1)">
        new_fmt </span>= <span style="color: rgba(0, 0, 255, 1)">malloc</span>(len + <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">);
        switch_assert(new_fmt);
#ifdef SWITCH_FUNC_IN_LOG
        switch_snprintf(new_fmt, len, extra_fmt, date, switch_log_level2str(level), filep, line, funcp, </span><span style="color: rgba(128, 0, 128, 1)">128</span><span style="color: rgba(0, 0, 0, 1)">, fmt);
</span><span style="color: rgba(0, 0, 255, 1)">#else</span><span style="color: rgba(0, 0, 0, 1)">
        switch_snprintf(new_fmt, len, extra_fmt, date, switch_log_level2str(level), filep, line, </span><span style="color: rgba(128, 0, 128, 1)">128</span><span style="color: rgba(0, 0, 0, 1)">, fmt);
</span><span style="color: rgba(0, 0, 255, 1)">#endif</span><span style="color: rgba(0, 0, 0, 1)">

        fmt </span>=<span style="color: rgba(0, 0, 0, 1)"> new_fmt;
    }

    ret </span>= switch_vasprintf(&amp;<span style="color: rgba(0, 0, 0, 1)">data, fmt, ap);

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (ret == -<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">) {
        fprintf(stderr, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Memory Error\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">goto</span><span style="color: rgba(0, 0, 0, 1)"> end;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (channel ==<span style="color: rgba(0, 0, 0, 1)"> SWITCH_CHANNEL_ID_LOG_CLEAN) {
        content </span>=<span style="color: rgba(0, 0, 0, 1)"> data;
    } </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> ((content = strchr(data, <span style="color: rgba(128, 0, 128, 1)">128</span><span style="color: rgba(0, 0, 0, 1)">))) {
            </span>*content = <span style="color: rgba(128, 0, 0, 1)">'</span> <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">;
        }
    }

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (channel ==<span style="color: rgba(0, 0, 0, 1)"> SWITCH_CHANNEL_ID_EVENT) {
        switch_event_t </span>*<span style="color: rgba(0, 0, 255, 1)">event</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (switch_event_running() == SWITCH_STATUS_SUCCESS &amp;&amp; switch_event_create(&amp;<span style="color: rgba(0, 0, 255, 1)">event</span>, SWITCH_EVENT_LOG) ==<span style="color: rgba(0, 0, 0, 1)"> SWITCH_STATUS_SUCCESS) {
            switch_event_add_header_string(</span><span style="color: rgba(0, 0, 255, 1)">event</span>, SWITCH_STACK_BOTTOM, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Log-Data</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, data);
            switch_event_add_header_string(</span><span style="color: rgba(0, 0, 255, 1)">event</span>, SWITCH_STACK_BOTTOM, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Log-File</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, filep);
            switch_event_add_header_string(</span><span style="color: rgba(0, 0, 255, 1)">event</span>, SWITCH_STACK_BOTTOM, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Log-Function</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, funcp);
            switch_event_add_header(</span><span style="color: rgba(0, 0, 255, 1)">event</span>, SWITCH_STACK_BOTTOM, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Log-Line</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%d</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, line);
            switch_event_add_header(</span><span style="color: rgba(0, 0, 255, 1)">event</span>, SWITCH_STACK_BOTTOM, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Log-Level</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%d</span><span style="color: rgba(128, 0, 0, 1)">"</span>, (<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)">) level);
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">zstr(userdata)) {
                switch_event_add_header_string(</span><span style="color: rgba(0, 0, 255, 1)">event</span>, SWITCH_STACK_BOTTOM, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">User-Data</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, userdata);
            }
            switch_event_fire(</span>&amp;<span style="color: rgba(0, 0, 255, 1)">event</span><span style="color: rgba(0, 0, 0, 1)">);
            data </span>=<span style="color: rgba(0, 0, 0, 1)"> NULL;
        }

        </span><span style="color: rgba(0, 0, 255, 1)">goto</span><span style="color: rgba(0, 0, 0, 1)"> end;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (console_mods_loaded == <span style="color: rgba(128, 0, 128, 1)">0</span> || !<span style="color: rgba(0, 0, 0, 1)">do_mods) {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (handle) {
            </span><span style="color: rgba(0, 0, 255, 1)">int</span> aok = <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
#ifndef WIN32

            fd_set can_write;
            </span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> fd;
            </span><span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> timeval to;

            fd </span>=<span style="color: rgba(0, 0, 0, 1)"> fileno(handle);
            memset(</span>&amp;to, <span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(0, 0, 255, 1)">sizeof</span><span style="color: rgba(0, 0, 0, 1)">(to));
            FD_ZERO(</span>&amp;<span style="color: rgba(0, 0, 0, 1)">can_write);
            FD_SET(fd, </span>&amp;<span style="color: rgba(0, 0, 0, 1)">can_write);
            to.tv_sec </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
            to.tv_usec </span>= <span style="color: rgba(128, 0, 128, 1)">100000</span><span style="color: rgba(0, 0, 0, 1)">;
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(0, 0, 255, 1)">select</span>(fd + <span style="color: rgba(128, 0, 128, 1)">1</span>, NULL, &amp;can_write, NULL, &amp;to) &gt; <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">) {
                aok </span>= FD_ISSET(fd, &amp;<span style="color: rgba(0, 0, 0, 1)">can_write);
            } </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
                aok </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
            }
</span><span style="color: rgba(0, 0, 255, 1)">#endif</span>
            <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (aok) {
                </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (COLORIZE) {

#ifdef WIN32
                    SetConsoleTextAttribute(hStdout, COLORS[level]);
                    WriteFile(hStdout, data, (DWORD) strlen(data), NULL, NULL);
                    SetConsoleTextAttribute(hStdout, wOldColorAttrs);
</span><span style="color: rgba(0, 0, 255, 1)">#else</span><span style="color: rgba(0, 0, 0, 1)">
                    fprintf(handle, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%s%s%s</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, COLORS[level], data, SWITCH_SEQ_DEFAULT_COLOR);
</span><span style="color: rgba(0, 0, 255, 1)">#endif</span><span style="color: rgba(0, 0, 0, 1)">
                } </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
                    fprintf(handle, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%s</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, data);
                }
            }
        }
    }

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (do_mods &amp;&amp; level &lt;=<span style="color: rgba(0, 0, 0, 1)"> MAX_LEVEL) {
        switch_log_node_t </span>*node =<span style="color: rgba(0, 0, 0, 1)"> switch_log_node_alloc();

        node</span>-&gt;data =<span style="color: rgba(0, 0, 0, 1)"> data;
        data </span>=<span style="color: rgba(0, 0, 0, 1)"> NULL;
        switch_set_string(node</span>-&gt;<span style="color: rgba(0, 0, 0, 1)">file, filep);
        switch_set_string(node</span>-&gt;<span style="color: rgba(0, 0, 0, 1)">func, funcp);
        node</span>-&gt;line =<span style="color: rgba(0, 0, 0, 1)"> line;
        node</span>-&gt;level =<span style="color: rgba(0, 0, 0, 1)"> level;
        node</span>-&gt;slevel =<span style="color: rgba(0, 0, 0, 1)"> special_level;
        node</span>-&gt;content =<span style="color: rgba(0, 0, 0, 1)"> content;
        node</span>-&gt;timestamp =<span style="color: rgba(0, 0, 0, 1)"> now;
        node</span>-&gt;channel =<span style="color: rgba(0, 0, 0, 1)"> channel;
        node</span>-&gt;tags =<span style="color: rgba(0, 0, 0, 1)"> NULL;
        node</span>-&gt;meta =<span style="color: rgba(0, 0, 0, 1)"> log_meta;
        log_meta </span>=<span style="color: rgba(0, 0, 0, 1)"> NULL;
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (channel ==<span style="color: rgba(0, 0, 0, 1)"> SWITCH_CHANNEL_ID_SESSION) {
            switch_core_session_t </span>*session = (switch_core_session_t *<span style="color: rgba(0, 0, 0, 1)">) userdata;
            node</span>-&gt;userdata = userdata ?<span style="color: rgba(0, 0, 0, 1)"> strdup(switch_core_session_get_uuid(session)) : NULL;
            </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (session) {
                switch_channel_get_log_tags(switch_core_session_get_channel(session), </span>&amp;node-&gt;<span style="color: rgba(0, 0, 0, 1)">tags);
            }
        } </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
            node</span>-&gt;userdata = !zstr(userdata) ?<span style="color: rgba(0, 0, 0, 1)"> strdup(userdata) : NULL;
        }

        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (switch_queue_trypush(LOG_QUEUE, node) !=<span style="color: rgba(0, 0, 0, 1)"> SWITCH_STATUS_SUCCESS) {
            switch_log_node_free(</span>&amp;<span style="color: rgba(0, 0, 0, 1)">node);
        }
    }

  end:

    cJSON_Delete(log_meta);
    switch_safe_free(data);
    switch_safe_free(new_fmt);

}</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202501/300959-20250102190006745-1576951164.png" alt="" loading="lazy"></p>
<p>会使用 switch_queue_trypush 函数进行入队操作：</p>
<p><img src="https://img2024.cnblogs.com/blog/300959/202501/300959-20250102190026414-2059923555.png" alt="" loading="lazy"></p>
<p>说明：</p>
<div>MAX_LEVEL的值会变，在 switch_log_bind_logger 时修改该值。</div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202501/300959-20250102190048798-692496769.png" alt="" loading="lazy"></p>
<h3>3、mod_logfile_load函数分析</h3>
<div>文件： mod_logfile.c</div>
<div>freeswitch的日志是通过mod_logfile来配置的，在模块加载时，主要做以下事项：</div>
<div>1）解析配置文件；</div>
<div>2）通过switch_log_bind_logger函数来注册日志回调函数；</div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202501/300959-20250102190115312-1790113279.png" alt="" loading="lazy"></p>
<h3>4、switch_log_bind_logger函数分析</h3>
<div>文件： switch_log.c</div>
<div>主要用于注册回调函数，供后续流程使用。</div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202501/300959-20250102190140155-332505140.png" alt="" loading="lazy"></p>
<h3 id="qUEn-1735815723440">5、log_thread函数</h3>
<div>文件： switch_log.c</div>
<div>主要用于注册回调函数，供后续流程使用。</div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202501/300959-20250102190204957-485303171.png" alt="" loading="lazy"></p>
<p>日志线程在初始化时就启动了。</p>
<p><img src="https://img2024.cnblogs.com/blog/300959/202501/300959-20250102190229497-1153127080.png" alt="" loading="lazy"></p>
<h3>6、mod_logfile_raw_write函数</h3>
<div>文件： mod_logfile.c</div>
<div>功能：</div>
<div>1）写日志内容到文件；</div>
<div>2）日志文件轮转（rotate）；</div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202501/300959-20250102190254778-1276141934.png" alt="" loading="lazy"></p>
<p>函数调用链如下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">mod_logfile_load
    </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> mod_logfile_logger
        </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> process_node
            </span>=&gt; mod_logfile_raw_write</pre>
</div>
<h3 id="VoKy-1735815817248">7、mod_logfile_rotate函数</h3>
<div>文件： mod_logfile.c</div>
<div>功能：</div>
<div>通过修改文件名的方式，实现日志文件轮转（rotate）。</div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202501/300959-20250102190343601-905536332.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h2 id="oCHO-1735815847068">二、实现可行性分析</h2>
<h3>1、配置文件</h3>
<div>参考freeswitch，使用xml作为配置文件，可借助libxml2来解析。</div>
<div>该库的GitHub地址：<a target="_blank"> https://github.com/GNOME/libxml2</a></div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202501/300959-20250102190541413-1813780767.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<div>可以直接使用软件源安装。</div>
<div>debian下：</div>
<div>apt install libxml2-dev</div>
<div>&nbsp;</div>
<div>依赖安装（centos7）：</div>
<div>yum install libxml2-devel.x86_64</div>
<div>&nbsp;</div>
<div><strong>结论：配置功能可行，可基于libxml2实现。</strong></div>
<h3 id="9Svf-1735815967654">2、基于队列实现日志功能</h3>
<div>apr队列是个线程安全的FIFO队列，arp库编译、队列接口及使用示例，可参考如下文章：</div>
<div><a href="https://www.cnblogs.com/MikeZhang/p/18378340/aprQueueTest20240824" target="_blank">https://www.cnblogs.com/MikeZhang/p/18378340/aprQueueTest20240824</a></div>
<div>&nbsp;</div>
<div>可基于apr队列实现日志功能：</div>
<div>1）日志线程提供队列用于存储日志数据；</div>
<div>2）工作线程向队列中添加日志；</div>
<div>3）日志线程输出日志内容到文件；</div>
<div>&nbsp;</div>
<div><strong>结论：基于队列实现日志功能可行。</strong></div>
<div>&nbsp;</div>
<h3 id="XedW-1735815967681">3、日志轮转</h3>
<div>可仿照freeswitch的实现，使用apr库进行文件名称修改操作。</div>
<div>&nbsp;</div>
<div><strong>综上，使用apr模拟freeswitch的日志功能可行。</strong></div>
<div>&nbsp;</div>
<h2 id="F9e3-1735815967695">三、使用示例及运行效果</h2>
<h3 id="tAK3-1735815967697">1、配置文件添加及解析</h3>
<div>配置文件示例（conf.xml）：</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">setting</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">server</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>192.168.137.100:5060<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">server</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">log</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">dirPath</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>/tmp/log<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">dirPath</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">fileName</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>test.log<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">fileName</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">rollSize</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>100<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">rollSize</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)"> MB
        </span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">rollCount</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>5<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">rollCount</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">log</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">setting</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre>
</div>
<div>对应的解析代码：</div>
<div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202501/300959-20250102190804240-1519874874.png" alt="" loading="lazy"></p>
<p>完整代码可从如下渠道获取：</p>
<p>关注微信公众号（聊聊博文，文末可扫码）后回复 20250102 获取。</p>
</div>
<h3 id="J2Ky-1735816207417">2、logger实现</h3>
<div>头文件内容如下（logger.h）：</div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202501/300959-20250102191244835-301662789.png" alt="" loading="lazy"></p>
<p>完整代码可从如下渠道获取：</p>
<p>关注微信公众号（聊聊博文，文末可扫码）后回复 20250102 获取。</p>
<div><strong>日志功能内容如下（logger.c）：</strong></div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202501/300959-20250102191705206-587478467.png" alt="" loading="lazy"></p>
<p>完整代码可从如下渠道获取：</p>
<p>关注微信公众号（聊聊博文，文末可扫码）后回复 20250102 获取。</p>
<h3 id="mhZ6-1735816662995">3、主程序实现</h3>
<div>头文件内容如下（testMain.h）：</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">#pragma</span> once<span style="color: rgba(0, 0, 0, 1)">

#include </span>&lt;stdio.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;stdlib.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;unistd.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;time.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;sys/stat.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;sys/types.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;sys/resource.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;sys/prctl.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;arpa/inet.h&gt;<span style="color: rgba(0, 0, 0, 1)">

#include </span>&lt;apr_portable.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">apr_queue.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">apr_thread_pool.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">apr_time.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">apr_hash.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">apr_thread_mutex.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;pthread.h&gt;<span style="color: rgba(0, 0, 0, 1)">

#include </span>&lt;libxml/parser.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;libxml/tree.h&gt;<span style="color: rgba(0, 0, 0, 1)">


typedef </span><span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> logger_vars_t {
    apr_pool_t </span>*<span style="color: rgba(0, 0, 0, 1)">apr_pool;

    </span><span style="color: rgba(0, 0, 255, 1)">char</span> server[<span style="color: rgba(128, 0, 128, 1)">256</span><span style="color: rgba(0, 0, 0, 1)">];
    </span><span style="color: rgba(0, 0, 255, 1)">char</span> log_dirname[<span style="color: rgba(128, 0, 128, 1)">256</span><span style="color: rgba(0, 0, 0, 1)">];
    </span><span style="color: rgba(0, 0, 255, 1)">char</span> log_filename[<span style="color: rgba(128, 0, 128, 1)">128</span><span style="color: rgba(0, 0, 0, 1)">];
    </span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> log_rollsize;
    </span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> log_rollcount;

}logger_vars_t;</span></pre>
</div>
<div>主程序内容如下（testMain.c）：</div>
<div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202501/300959-20250102192617195-155940272.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>完整代码可从如下渠道获取：<br>关注微信公众号（聊聊博文，文末可扫码）后回复 20250102 获取。</p>
<h3 id="hFd1-1735817236477">4、编译脚本及Makefile</h3>
<div>&nbsp;编译脚本内容如下（doBuild.sh）：</div>
</div>
<div class="cnblogs_code">
<pre>#! /bin/<span style="color: rgba(0, 0, 0, 1)">bash

BASEDIR</span>=<span style="color: rgba(0, 0, 0, 1)">${PWD}
APRDIR</span>=${BASEDIR}/libs/apr-<span style="color: rgba(128, 0, 128, 1)">1.7</span>.<span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">
APRUTILDIR</span>=${BASEDIR}/libs/apr-util-<span style="color: rgba(128, 0, 128, 1)">1.6</span>.<span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">

echo ${BASEDIR}
#exit </span><span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">
cd ${APRDIR}
.</span>/configure --enable-<span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 0, 1)">
make 

cd ${APRUTILDIR}
.</span>/buildconf --with-apr=<span style="color: rgba(0, 0, 0, 1)">${APRDIR}
.</span>/configure --with-apr=<span style="color: rgba(0, 0, 0, 1)">${APRDIR}
make

cd ${BASEDIR}
make testMain</span></pre>
</div>
<div>Makefile文件内容如下：</div>
<div>
<div class="cnblogs_code">
<pre>CC=<span style="color: rgba(0, 0, 0, 1)">gcc
CFLAGS</span>=-g -gstabs+ -I/usr/include/libks  -Ilibs/apr-<span style="color: rgba(128, 0, 128, 1)">1.7</span>.<span style="color: rgba(128, 0, 128, 1)">4</span>/include -Ilibs/apr-util-<span style="color: rgba(128, 0, 128, 1)">1.6</span>.<span style="color: rgba(128, 0, 128, 1)">3</span>/include  -I/usr/include/libxml2/<span style="color: rgba(0, 0, 0, 1)"> 
LIBS</span>=libs/apr-util-<span style="color: rgba(128, 0, 128, 1)">1.6</span>.<span style="color: rgba(128, 0, 128, 1)">3</span>/.libs/libaprutil-<span style="color: rgba(128, 0, 128, 1)">1</span>.a libs/apr-<span style="color: rgba(128, 0, 128, 1)">1.7</span>.<span style="color: rgba(128, 0, 128, 1)">4</span>/.libs/libapr-<span style="color: rgba(128, 0, 128, 1)">1</span>.a -lpthread -<span style="color: rgba(0, 0, 0, 1)">lxml2

#
BASEDIR</span>=<span style="color: rgba(0, 0, 0, 1)">${PWD}
APRDIR</span>=${BASEDIR}/libs/apr-<span style="color: rgba(128, 0, 128, 1)">1.7</span>.<span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">
APRUTILDIR</span>=${BASEDIR}/libs/apr-util-<span style="color: rgba(128, 0, 128, 1)">1.6</span>.<span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">

all:
    #make apr
    #make apr</span>-<span style="color: rgba(0, 0, 0, 1)">util
    make testMain

apr:
    cd $(APRDIR) </span>&amp;&amp; ./configure --enable-<span style="color: rgba(0, 0, 255, 1)">static</span> &amp;&amp;<span style="color: rgba(0, 0, 0, 1)"> make

apr</span>-<span style="color: rgba(0, 0, 0, 1)">util:
    cd $(APRUTILDIR) </span>&amp;&amp; ./buildconf --with-apr=$(APRDIR) &amp;&amp; ./configure --with-apr=$(APRDIR) &amp;&amp;<span style="color: rgba(0, 0, 0, 1)"> make
    
testMain: testMain.o logger.o
    $(CC) </span>-<span style="color: rgba(0, 0, 0, 1)">o testMain testMain.o logger.o $(LIBS) 

clean: 
    rm </span>-<span style="color: rgba(0, 0, 0, 1)">f testMain 
    rm </span>-f *<span style="color: rgba(0, 0, 0, 1)">.o

.c.o:
    $(CC) $(CFLAGS) </span>-c -o $*.o $&lt;</pre>
</div>
<div>执行 doBuild.sh 即可编译。</div>
<div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202501/300959-20250102192814954-1402082235.png" alt="" loading="lazy"></p>
<h3 id="UHmL-1735817317476">5、示例效果</h3>
<div>运行效果如下：</div>
</div>
</div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202501/300959-20250102192855013-651247515.png" alt="" loading="lazy"></p>
<div>打包的工程文件，可从如下渠道获取：
<p>关注微信公众号（聊聊博文，文末可扫码）后回复 20250102 获取。</p>
</div>
<h2 id="1an1-1735817417476">四、其它</h2>
<h3 id="qcY4-1735817417480">1、添加core dump支持</h3>
<div>当程序crash时产生core dump文件，便于程序调试使用。</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">void</span> core_setrlimits(<span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">)
{
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> set core dump </span>
    <span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> rlimit rlp;

    memset(</span>&amp;rlp, <span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(0, 0, 255, 1)">sizeof</span><span style="color: rgba(0, 0, 0, 1)">(rlp));
    rlp.rlim_cur </span>= <span style="color: rgba(128, 0, 128, 1)">999999</span><span style="color: rgba(0, 0, 0, 1)">;
    rlp.rlim_max </span>= <span style="color: rgba(128, 0, 128, 1)">999999</span><span style="color: rgba(0, 0, 0, 1)">;
    setrlimit(RLIMIT_NOFILE, </span>&amp;<span style="color: rgba(0, 0, 0, 1)">rlp);

    memset(</span>&amp;rlp, <span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(0, 0, 255, 1)">sizeof</span><span style="color: rgba(0, 0, 0, 1)">(rlp));
    rlp.rlim_cur </span>=<span style="color: rgba(0, 0, 0, 1)"> RLIM_INFINITY;
    rlp.rlim_max </span>=<span style="color: rgba(0, 0, 0, 1)"> RLIM_INFINITY;

    setrlimit(RLIMIT_CPU, </span>&amp;<span style="color: rgba(0, 0, 0, 1)">rlp);
    setrlimit(RLIMIT_DATA, </span>&amp;<span style="color: rgba(0, 0, 0, 1)">rlp);
    setrlimit(RLIMIT_FSIZE, </span>&amp;<span style="color: rgba(0, 0, 0, 1)">rlp);

    setrlimit(RLIMIT_CORE, </span>&amp;<span style="color: rgba(0, 0, 0, 1)">rlp);

    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
}</span></pre>
</div>
<div>在main函数中调用 core_setrlimits 函数即可。</div>
<h3 id="Unwo-1735817451825">2、日志乱码问题及队列操作注意事项</h3>
<div>可从如下渠道获取：
<p>关注微信公众号（聊聊博文，文末可扫码）后回复 20250102 获取。</p>
</div>
<h2 id="YWjx-1735817533937">五、资源获取</h2>
<div>本文涉及源码及相关文件，可从如下途径获取：</div>
<div>关注微信公众号（聊聊博文，文末可扫码）后回复 20250102 获取。</div>
<div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202501/300959-20250102193437048-1003126593.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
</div>
</div>
</div>
</div>
</div>
</div>
<div id="MySignature" role="contentinfo">
    如果你对该文章有疑问，可通过微信公众号（聊聊博文）向我提问：<br>
<a href="https://files.cnblogs.com/files/MikeZhang/201804weixingongzhong1.gif" target="_blank">
<img src="https://files.cnblogs.com/files/MikeZhang/201804weixingongzhong1.gif" width="170"></a><br>
转载请注明出处，谢谢！
</div>
<div class="clear"></div>

	<div class="postDesc">posted on 
<span id="post-date" data-last-update-days="0.02103400803472222" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-02 19:56">2025-01-02 19:56</span>&nbsp;
<a href="https://www.cnblogs.com/MikeZhang">Mike_Zhang</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18648634" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18648634);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18648634', targetLink: 'https://www.cnblogs.com/MikeZhang/p/18648634/mylogger20250102', title: 'FreeSWITCH日志功能分析及apr模拟' })">举报</a>
</div>
