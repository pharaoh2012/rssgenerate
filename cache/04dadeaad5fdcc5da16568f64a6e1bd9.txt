<!----> <meta itemprop="headline" content="史诗级 ⚡ 宇宙最强 🏆 vue3 函数式弹窗 🚀"> <meta itemprop="keywords" content="前端,Vue.js"> <meta itemprop="datePublished" content="2025-01-10T07:45:13.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="一路向北wow"> <meta itemprop="url" content="https://juejin.cn/user/3400105472033639"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-7cdd11fb="">
            史诗级 ⚡ 宇宙最强 🏆 vue3 函数式弹窗 🚀
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-7cdd11fb=""><div class="author-info-box" data-v-7cdd11fb=""><div class="author-name" data-v-7cdd11fb=""><a href="/user/3400105472033639/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-7cdd11fb=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    一路向北wow
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-7cdd11fb=""><time datetime="2025-01-10T07:45:13.000Z" title="Fri Jan 10 2025 07:45:13 GMT+0000 (Coordinated Universal Time)" class="time" data-v-7cdd11fb="">
                    2025-01-10
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-7cdd11fb=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-7cdd11fb=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-7cdd11fb=""></circle></svg> <span class="views-count" data-v-7cdd11fb="">
                    8,494
                  </span> <span class="read-time" data-v-7cdd11fb=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-7cdd11fb=""><rect width="16" height="16" fill="none" data-v-7cdd11fb=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-7cdd11fb=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-7cdd11fb=""></path></svg>
                    阅读5分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-7cdd11fb=""></div> <!----> <!----></div> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-7cdd11fb=""><div class="article-viewer markdown-body result"><h2 data-id="heading-0">前言</h2>
<p>前几天分享了一个优雅展示大量弹窗组件的方式，原文： <a href="https://juejin.cn/post/7454394839461249087" target="_blank" title="https://juejin.cn/post/7454394839461249087">假如你的页面上有几十个弹窗，你会怎样优雅地展示它们？🧐</a> 评论区也有一些讨论：比如不支持插槽，还有就是虽然 template 变得简洁了，但是还是要引入一个动态组件 <strong>unityModal.vue</strong> ，具有一定的心智负担。那我们今天就一不做二不休，封装一个宇宙最强级别函数式弹窗方法， 使用时只需调用即可。<br>
我希望这个方法满足以下条件：</p>
<ul>
<li>支持懒加载（异步加载函数）</li>
<li>props传参</li>
<li>事件绑定</li>
<li>provide inject 注入数据</li>
<li>各种自定义插槽</li>
<li>暴露内部方法</li>
</ul>
<p>接下来让我们一步一步实现它。</p>
<h2 data-id="heading-1">一、基本实现</h2>
<p>在实际开发中，最基本的弹窗组件需要满足以下几点要求：</p>
<ul>
<li>能够接收父组件传进来的参数</li>
<li>能够绑定自定义事件接收子组件的通知</li>
</ul>
<h4 data-id="heading-2">弹窗组件</h4>
<p>以下是一个基本弹窗组件：</p>
<pre><code class="hljs language-js" lang="js">&lt;template&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a-modal</span> <span class="hljs-attr">v-model:open</span>=<span class="hljs-string">"bindVisible"</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">"title"</span> @<span class="hljs-attr">ok</span>=<span class="hljs-string">"handleOk"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>父组件传入的 prop：{{ prop }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">a-modal</span>&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { useVModel } <span class="hljs-keyword">from</span> <span class="hljs-string">'@vueuse/core'</span>

<span class="hljs-keyword">const</span> props = defineProps&lt;{
  <span class="hljs-attr">visible</span>: boolean
  <span class="hljs-attr">title</span>: string
  <span class="hljs-attr">prop</span>: string
}&gt;()

<span class="hljs-keyword">const</span> emit = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">'update:visible'</span>, <span class="hljs-string">'loadList'</span>])
<span class="hljs-keyword">const</span> bindVisible = <span class="hljs-title function_">useVModel</span>(props, <span class="hljs-string">'visible'</span>, emit)

<span class="hljs-keyword">const</span> <span class="hljs-title function_">handleOk</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-comment">// 假装请求业务接口...</span>
  bindVisible.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span>
  <span class="hljs-title function_">emit</span>(<span class="hljs-string">'loadList'</span>)
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
</code></pre>
<h4 data-id="heading-3">使用方式</h4>
<p>我想要在页面中这样使用它：仅需要通过调用函数的形式让弹窗显示，其他什么都不用写，这样开发时把注意力都聚集在这个函数上，逻辑高度内聚。</p>
<pre><code class="hljs language-js" lang="js">&lt;template&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">a-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"onClick"</span>&gt;</span>弹窗按钮<span class="hljs-tag">&lt;/<span class="hljs-name">a-button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { message } <span class="hljs-keyword">from</span> <span class="hljs-string">'ant-design-vue'</span>

<span class="hljs-keyword">const</span> <span class="hljs-title function_">onClick</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-title function_">showModal</span>({
    <span class="hljs-attr">modalComponent</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">'@/pages/home/components/modal.vue'</span>),
    <span class="hljs-attr">title</span>: <span class="hljs-string">'弹窗标题'</span>,
    <span class="hljs-attr">prop</span>: <span class="hljs-string">'弹窗组件需要的参数'</span>,
    <span class="hljs-attr">onLoadList</span>: <span class="hljs-function">() =&gt;</span> message.<span class="hljs-title function_">success</span>(<span class="hljs-string">'表单已经提交，刷新列表'</span>)
  })
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
</code></pre>
<h4 data-id="heading-4">showModal 具体实现</h4>
<p>确定了 showModal 的使用方式之后，我们着手去实现它：</p>
<ol>
<li>首先函数必须接收一个弹窗组件，这个组件可以是懒加载的（一个异步加载函数），如果懒加载，我们会用 <strong>defineAsyncComponent</strong> 把它定义为一个异步组件。</li>
<li>可以通过 appendTo 参数指定挂载的位置（默认为 document.body)</li>
<li>拿到传进来的参数、事件。</li>
<li>使用 <strong>h</strong> 函数创建虚拟节点，并且通过 <strong>render</strong> 函数把节点渲染到需要挂载的DOM上。</li>
</ol>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">import</span> { defineAsyncComponent, h, nextTick, render } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> type { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>

interface <span class="hljs-title class_">IModalOptions</span> {
  <span class="hljs-attr">modalComponent</span>: <span class="hljs-title class_">Component</span> | any
  appendTo?: <span class="hljs-title class_">HTMLElement</span> | string
  [<span class="hljs-attr">name</span>: string]: unknown
}

<span class="hljs-keyword">const</span> getAppendToElement = (<span class="hljs-attr">appendTo</span>: <span class="hljs-title class_">IModalOptions</span>[<span class="hljs-string">'appendTo'</span>]): <span class="hljs-function"><span class="hljs-params">HTMLElement</span> =&gt;</span> {
  <span class="hljs-keyword">let</span> <span class="hljs-attr">appendToEL</span>: <span class="hljs-title class_">HTMLElement</span> | <span class="hljs-literal">null</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>
  <span class="hljs-keyword">if</span> (appendTo) {
    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> appendTo === <span class="hljs-string">'string'</span>) {
      appendToEL = <span class="hljs-variable language_">document</span>.<span class="hljs-property">querySelector</span>&lt;<span class="hljs-title class_">HTMLElement</span>&gt;(appendTo)
    }
    <span class="hljs-keyword">if</span> (appendTo <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">HTMLElement</span>) {
      appendToEL = appendTo
    }
    <span class="hljs-keyword">if</span> (!(appendToEL <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">HTMLElement</span>)) {
      appendToEL = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>
    }
  }
  <span class="hljs-keyword">return</span> appendToEL
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">showModal</span>(<span class="hljs-params">options: IModalOptions</span>) {
  <span class="hljs-keyword">const</span> container = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">'div'</span>)
  <span class="hljs-keyword">const</span> isAsync = <span class="hljs-keyword">typeof</span> options.<span class="hljs-property">modalComponent</span> === <span class="hljs-string">'function'</span>

  <span class="hljs-keyword">const</span> modalComponent = isAsync
    ? <span class="hljs-title function_">defineAsyncComponent</span>(options.<span class="hljs-property">modalComponent</span>)
    : options.<span class="hljs-property">modalComponent</span>

  <span class="hljs-keyword">const</span> <span class="hljs-attr">props</span>: <span class="hljs-title class_">Record</span>&lt;string, any&gt; = {}
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> options) {
    <span class="hljs-keyword">if</span> (![<span class="hljs-string">'modalComponent'</span>, <span class="hljs-string">'appendTo'</span>].<span class="hljs-title function_">includes</span>(key)) props[key] = options[key]
  }

  <span class="hljs-keyword">const</span> vNode = <span class="hljs-title function_">h</span>(modalComponent, {
    <span class="hljs-attr">visible</span>: <span class="hljs-literal">true</span>,
    ...props,
    <span class="hljs-string">'onUpdate:visible'</span>: <span class="hljs-function">() =&gt;</span> {
      <span class="hljs-title function_">nextTick</span>(<span class="hljs-function">() =&gt;</span> {
        <span class="hljs-title function_">close</span>()
      })
    }
  })

  <span class="hljs-title function_">render</span>(vNode, container)
  <span class="hljs-title function_">getAppendToElement</span>(options.<span class="hljs-property">appendTo</span>).<span class="hljs-title function_">appendChild</span>(container)

  <span class="hljs-keyword">function</span> <span class="hljs-title function_">close</span>(<span class="hljs-params"></span>) {
    <span class="hljs-title function_">render</span>(<span class="hljs-literal">null</span>, container)
    container.<span class="hljs-property">parentNode</span>?.<span class="hljs-title function_">removeChild</span>(container)
  }
}
</code></pre>
<h2 data-id="heading-5">二、注入数据</h2>
<p>在实际开发中，我们很有可能会使用 provide 给下级组件提供数据。从 showModal 函数的实现中我们可以看到弹窗组件默认是挂载到 document.body 下的，这会使弹窗组件脱离原有组件树，内部就无法通过 inject 拿到上级组件 provide 的数据了。所以我们需要改造一下我们的 showModal 函数。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">import</span> { defineAsyncComponent, getCurrentInstance, h, nextTick, render, createVNode } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> type { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>

<span class="hljs-comment">// 省略部分代码...</span>

<span class="hljs-comment">// start</span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">getProvides</span>(<span class="hljs-params">instance: any</span>) {
  <span class="hljs-keyword">let</span> provides = instance?.<span class="hljs-property">provides</span> || {}
  <span class="hljs-keyword">if</span> (instance.<span class="hljs-property">parent</span>) {
    provides = { ...provides, ...<span class="hljs-title function_">getProvides</span>(instance.<span class="hljs-property">parent</span>) }
  }
  <span class="hljs-keyword">return</span> provides
}
<span class="hljs-comment">// end</span>

<span class="hljs-comment">// 修改后的 useShowModal</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useShowModal</span>(<span class="hljs-params"></span>) {
  <span class="hljs-comment">// start</span>
  <span class="hljs-keyword">const</span> currentInstance = <span class="hljs-title function_">getCurrentInstance</span>() <span class="hljs-keyword">as</span> any
  <span class="hljs-keyword">const</span> provides = <span class="hljs-title function_">getProvides</span>(currentInstance)
  <span class="hljs-comment">// end</span>
  
  <span class="hljs-keyword">function</span> <span class="hljs-title function_">showModal</span>(<span class="hljs-params">options: IModalOptions</span>) {
    <span class="hljs-keyword">const</span> container = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">'div'</span>)
    <span class="hljs-keyword">const</span> isAsync = <span class="hljs-keyword">typeof</span> options.<span class="hljs-property">modalComponent</span> === <span class="hljs-string">'function'</span>

    <span class="hljs-keyword">const</span> modalComponent = isAsync
      ? <span class="hljs-title function_">defineAsyncComponent</span>(options.<span class="hljs-property">modalComponent</span>)
      : options.<span class="hljs-property">modalComponent</span>

    <span class="hljs-keyword">const</span> <span class="hljs-attr">props</span>: <span class="hljs-title class_">Record</span>&lt;string, any&gt; = {}
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> options) {
      <span class="hljs-keyword">if</span> (![<span class="hljs-string">'modalComponent'</span>, <span class="hljs-string">'appendTo'</span>].<span class="hljs-title function_">includes</span>(key)) props[key] = options[key]
    }

    <span class="hljs-comment">// start</span>
    <span class="hljs-keyword">const</span> vNode = <span class="hljs-title function_">createVNode</span>({
      <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {
        <span class="hljs-keyword">const</span> instance = <span class="hljs-title function_">getCurrentInstance</span>() <span class="hljs-keyword">as</span> any
        <span class="hljs-keyword">if</span> (instance) {
          instance.<span class="hljs-property">provides</span> = { ...instance.<span class="hljs-property">provides</span>, ...provides }
        }
      },
      <span class="hljs-attr">render</span>: <span class="hljs-function">() =&gt;</span>
        <span class="hljs-title function_">h</span>(modalComponent, {
          <span class="hljs-attr">visible</span>: <span class="hljs-literal">true</span>,
          ...props,
          <span class="hljs-string">'onUpdate:visible'</span>: <span class="hljs-function">() =&gt;</span> {
            <span class="hljs-title function_">nextTick</span>(<span class="hljs-function">() =&gt;</span> {
              <span class="hljs-title function_">close</span>()
            })
          }
        })
    })
    <span class="hljs-comment">// end</span>

    <span class="hljs-title function_">render</span>(vNode, container)
    <span class="hljs-title function_">getAppendToElement</span>(options.<span class="hljs-property">appendTo</span>).<span class="hljs-title function_">appendChild</span>(container)

    <span class="hljs-keyword">function</span> <span class="hljs-title function_">close</span>(<span class="hljs-params"></span>) {
      <span class="hljs-title function_">render</span>(<span class="hljs-literal">null</span>, container)
      container.<span class="hljs-property">parentNode</span>?.<span class="hljs-title function_">removeChild</span>(container)
    }
  }

  <span class="hljs-keyword">return</span> showModal
}
</code></pre>
<p>可以看出我们的 showModal 核心实现几乎没有变化。改动的只有两点：</p>
<ol>
<li>把 showModal 放到了 useShowModal 这个组合式函数里面并且返回给使用者。目的是当使用者在组件内调用 useShowModal 的时候，可以通过 <strong>getCurrentInstance</strong> 获取当前组件实例，并把所有上级组件 provide 的数据全部取出来，添加到弹窗组件的实例上。</li>
<li>使用 <strong>createVNode</strong> 创建虚拟节点，这样可以在 setup 函数中获取到弹窗组件实例，就可以添加上级组件 provide 的数据了。</li>
</ol>
<p>这样不管是在根组件 App.vue 里 provide 的数据，还是父组件 provide 的数据（只要是上级组件都可以），弹窗内部统统都能拿到，解决了弹窗脱离组件树引起的数据丢失问题。</p>
<h2 data-id="heading-6">三、实现插槽</h2>
<p>这个很好解决，因为在 vue 中，我们在 template 里写的插槽，最终都会被编译成一个个函数。刚好 h 函数的第三个参数是可以接收插槽函数的。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 完整参数签名</span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">h</span>(<span class="hljs-params">
  type: string | Component,
  props?: object | <span class="hljs-literal">null</span>,
  children?: Children | Slot | Slots
</span>): <span class="hljs-title class_">VNode</span>

<span class="hljs-comment">// 省略 props</span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">h</span>(<span class="hljs-params">type: string | Component, children?: Children | Slot</span>): <span class="hljs-title class_">VNode</span>

type <span class="hljs-title class_">Children</span> = string | number | boolean | <span class="hljs-title class_">VNode</span> | <span class="hljs-literal">null</span> | <span class="hljs-title class_">Children</span>[]

type <span class="hljs-title class_">Slot</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">Children</span>

type <span class="hljs-title class_">Slots</span> = { [<span class="hljs-attr">name</span>: string]: <span class="hljs-title class_">Slot</span> }
</code></pre>
<p>那我们只需要给我们的 showModal 函数再添加一个 slots 参数即可。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">import</span> { defineAsyncComponent, getCurrentInstance, h, nextTick, render, createVNode } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> type { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>

<span class="hljs-comment">// 新增</span>
type <span class="hljs-title class_">RawSlots</span> = {
  [<span class="hljs-attr">name</span>: string]: unknown
  $stable?: boolean
}
interface <span class="hljs-title class_">IModalOptions</span> {
  <span class="hljs-attr">modalComponent</span>: <span class="hljs-title class_">Component</span> | any
  appendTo?: <span class="hljs-title class_">HTMLElement</span> | string
  slots?: <span class="hljs-title class_">RawSlots</span>  <span class="hljs-comment">// 新增</span>
  [<span class="hljs-attr">name</span>: string]: unknown
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useShowModal</span>(<span class="hljs-params"></span>) {
  <span class="hljs-comment">// ...</span>
  <span class="hljs-keyword">const</span> vNode = <span class="hljs-title function_">createVNode</span>({
      <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {
        <span class="hljs-keyword">const</span> instance = <span class="hljs-title function_">getCurrentInstance</span>() <span class="hljs-keyword">as</span> any
        <span class="hljs-keyword">if</span> (instance) {
          instance.<span class="hljs-property">provides</span> = { ...instance.<span class="hljs-property">provides</span>, ...provides }
        }
      },
      <span class="hljs-attr">render</span>: <span class="hljs-function">() =&gt;</span>
        <span class="hljs-title function_">h</span>(
          modalComponent,
          {
            <span class="hljs-attr">visible</span>: <span class="hljs-literal">true</span>,
            ...props,
            <span class="hljs-string">'onUpdate:visible'</span>: <span class="hljs-function">() =&gt;</span> {
              <span class="hljs-title function_">nextTick</span>(<span class="hljs-function">() =&gt;</span> {
                <span class="hljs-title function_">close</span>()
              })
            }
          },
          options.<span class="hljs-property">slots</span> <span class="hljs-comment">// 新增</span>
        )
    })
  <span class="hljs-comment">// ...</span>
}
</code></pre>
<p>使用的时候直接传入插槽函数：</p>
<pre><code class="hljs language-js" lang="js">&lt;template&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a-modal</span> <span class="hljs-attr">v-model:open</span>=<span class="hljs-string">"bindVisible"</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">"title"</span> @<span class="hljs-attr">ok</span>=<span class="hljs-string">"handleOk"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>父组件传入的 prop：{{ prop }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- 注入的数据 --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>父组件 provide 的信息：{{ message }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>App根组件 provide 的信息：{{ appMessage }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- 插槽 --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"{ type: '默认插槽' }"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"footer"</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"{ type: '具名插槽' }"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">a-modal</span>&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { inject } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> { useVModel } <span class="hljs-keyword">from</span> <span class="hljs-string">'@vueuse/core'</span>

<span class="hljs-keyword">const</span> props = defineProps&lt;{
  <span class="hljs-attr">visible</span>: boolean
  <span class="hljs-attr">title</span>: string
  <span class="hljs-attr">prop</span>: string
}&gt;()

<span class="hljs-keyword">const</span> emit = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">'update:visible'</span>, <span class="hljs-string">'loadList'</span>])
<span class="hljs-keyword">const</span> bindVisible = <span class="hljs-title function_">useVModel</span>(props, <span class="hljs-string">'visible'</span>, emit)
<span class="hljs-keyword">const</span> message = <span class="hljs-title function_">inject</span>(<span class="hljs-string">'message'</span>)
<span class="hljs-keyword">const</span> appMessage = <span class="hljs-title function_">inject</span>(<span class="hljs-string">'appMessage'</span>)

<span class="hljs-keyword">const</span> <span class="hljs-title function_">handleOk</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-comment">// 假装请求业务接口...</span>
  bindVisible.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span>
  <span class="hljs-title function_">emit</span>(<span class="hljs-string">'loadList'</span>)
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
</code></pre>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 使用</span>
 <span class="hljs-title function_">showModal2</span>({
    <span class="hljs-attr">modalComponent</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">'@/pages/home/components/modal.vue'</span>),
    <span class="hljs-attr">title</span>: <span class="hljs-string">'弹窗标题'</span>,
    <span class="hljs-attr">prop</span>: <span class="hljs-string">'弹窗组件需要的参数'</span>,
    <span class="hljs-attr">slots</span>: {
      <span class="hljs-attr">default</span>: <span class="hljs-function">(<span class="hljs-params">arg: any</span>) =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-string">'button'</span>, arg.<span class="hljs-property">type</span>), <span class="hljs-comment">// 默认插槽</span>
      <span class="hljs-attr">footer</span>: <span class="hljs-function">(<span class="hljs-params">arg: any</span>) =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-string">'button'</span>, arg.<span class="hljs-property">type</span>)  <span class="hljs-comment">// 具名插槽</span>
    },
    <span class="hljs-attr">onLoadList</span>: <span class="hljs-function">() =&gt;</span> message.<span class="hljs-title function_">success</span>(<span class="hljs-string">'表单已经提交，刷新列表'</span>)
  })
</code></pre>
<p>效果：<br></p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/0b07e7651c894ae4b9e49fd6feb01824~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5LiA6Lev5ZCR5YyXd293:q75.awebp?rk3s=f64ab15b&amp;x-expires=1739721890&amp;x-signature=UyOingvhm%2FG1ipW%2FWuS566W18WY%3D" alt="image.png" loading="lazy"></p>
<h2 data-id="heading-7">四、暴露方法</h2>
<p>这里暴露方法的方式其实与平时我们在vue组件中实现原理方式一样，都是给组件绑定 ref，然后通过 ref 拿到组件实例进而操作组件暴露的方法，来看一下具体实现：</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// ...</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useShowModal</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">function</span> <span class="hljs-title function_">showModal</span>(<span class="hljs-params">options: IModalOptions</span>) {
    <span class="hljs-comment">// ...</span>
    <span class="hljs-keyword">const</span> isAsync = <span class="hljs-keyword">typeof</span> options.<span class="hljs-property">modalComponent</span> === <span class="hljs-string">'function'</span>
    <span class="hljs-keyword">const</span> innerRef = <span class="hljs-title function_">ref</span>()  <span class="hljs-comment">// 新增</span>

    <span class="hljs-keyword">const</span> vNode = <span class="hljs-title function_">createVNode</span>({
      <span class="hljs-comment">// ...</span>
      <span class="hljs-attr">render</span>: <span class="hljs-function">() =&gt;</span>
        <span class="hljs-title function_">h</span>(
          modalComponent,
          {
            <span class="hljs-attr">visible</span>: <span class="hljs-literal">true</span>,
            ...props,
            <span class="hljs-attr">ref</span>: innerRef,  <span class="hljs-comment">// 新增</span>
            <span class="hljs-string">'onUpdate:visible'</span>: <span class="hljs-function">() =&gt;</span> {
              <span class="hljs-title function_">nextTick</span>(<span class="hljs-function">() =&gt;</span> {
                <span class="hljs-title function_">close</span>()
              })
            }
          },
          options.<span class="hljs-property">slots</span>
        )
    })

    <span class="hljs-comment">// 新增</span>
    <span class="hljs-keyword">if</span> (!isAsync) {
      <span class="hljs-keyword">return</span> innerRef.<span class="hljs-property">value</span>
    } <span class="hljs-keyword">else</span> {
      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {
        <span class="hljs-title function_">watch</span>(
          innerRef,
          <span class="hljs-function">() =&gt;</span> {
            <span class="hljs-title function_">resolve</span>(innerRef.<span class="hljs-property">value</span>)
          },
          {
            <span class="hljs-attr">once</span>: <span class="hljs-literal">true</span>
          }
        )
      })
    }
  }
  <span class="hljs-keyword">return</span> showModal
}
</code></pre>
<p>这里我区分了两种情况：</p>
<ol>
<li>异步组件：h 函数创建虚拟节点时，如果是动态导入的组件，ref 的绑定是异步的（挂载需要时间），没法同步地获取组件实例，所以需要监听 ref 值的变化，当值发生变化时就是代表挂载完毕了，这个时候再 resolve 结果。</li>
<li>同步组件：直接返回组件实例。</li>
</ol>
<p>使用方式：</p>
<ul>
<li>如果你传入的组件是异步加载函数，请通过 await 去获取异步组件实例。</li>
<li>如果同步组件，直接接收组件实例即可。</li>
</ul>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Modal</span> = <span class="hljs-keyword">await</span> <span class="hljs-title function_">showModal</span>({
    <span class="hljs-attr">modalComponent</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">'@/pages/home/components/modal.vue'</span>),
    <span class="hljs-attr">title</span>: <span class="hljs-string">'弹窗标题'</span>,
    <span class="hljs-attr">prop</span>: <span class="hljs-string">'弹窗组件需要的参数'</span>,
    <span class="hljs-attr">slots</span>: {
      <span class="hljs-attr">default</span>: <span class="hljs-function">(<span class="hljs-params">arg: any</span>) =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-string">'button'</span>, arg.<span class="hljs-property">type</span>),
      <span class="hljs-attr">footer</span>: <span class="hljs-function">(<span class="hljs-params">arg: any</span>) =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-string">'button'</span>, arg.<span class="hljs-property">type</span>)
    },
    <span class="hljs-attr">onLoadList</span>: <span class="hljs-function">() =&gt;</span> message.<span class="hljs-title function_">success</span>(<span class="hljs-string">'表单已经提交，刷新列表'</span>)
  })
<span class="hljs-title class_">Modal</span>.<span class="hljs-title function_">getInfo</span>()
</code></pre>
<h2 data-id="heading-8">五、总结</h2>
<p>最终，我们实现了一个宇宙最强级别函数式弹窗组件的方法，它适应绝大多数使用场景：</p>
<ul>
<li>支持懒加载（异步加载函数）</li>
<li>props传参</li>
<li>事件绑定</li>
<li>provide inject 注入数据</li>
<li>各种自定义插槽</li>
<li>暴露内部方法</li>
</ul>
<h2 data-id="heading-9">六、源码</h2>
<h4 data-id="heading-10">modal.vue</h4>
<pre><code class="hljs language-js" lang="js">&lt;template&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a-modal</span> <span class="hljs-attr">v-model:open</span>=<span class="hljs-string">"bindVisible"</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">"title"</span> @<span class="hljs-attr">ok</span>=<span class="hljs-string">"handleOk"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>父组件传入的 prop：{{ prop }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>父组件 provide 的信息：{{ message }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>App根组件 provide 的信息：{{ appMessage }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"{ type: '默认插槽' }"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"footer"</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"{ type: '具名插槽' }"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">a-modal</span>&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { inject } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> { useVModel } <span class="hljs-keyword">from</span> <span class="hljs-string">'@vueuse/core'</span>

<span class="hljs-keyword">const</span> props = defineProps&lt;{
  <span class="hljs-attr">visible</span>: boolean
  <span class="hljs-attr">title</span>: string
  <span class="hljs-attr">prop</span>: string
}&gt;()

<span class="hljs-keyword">const</span> emit = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">'update:visible'</span>, <span class="hljs-string">'loadList'</span>])
<span class="hljs-keyword">const</span> bindVisible = <span class="hljs-title function_">useVModel</span>(props, <span class="hljs-string">'visible'</span>, emit)
<span class="hljs-keyword">const</span> message = <span class="hljs-title function_">inject</span>(<span class="hljs-string">'message'</span>)
<span class="hljs-keyword">const</span> appMessage = <span class="hljs-title function_">inject</span>(<span class="hljs-string">'appMessage'</span>)

<span class="hljs-keyword">const</span> <span class="hljs-title function_">handleOk</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-comment">// 假装请求业务接口...</span>
  bindVisible.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span>
  <span class="hljs-title function_">emit</span>(<span class="hljs-string">'loadList'</span>)
}

<span class="hljs-title function_">defineExpose</span>({
  <span class="hljs-title function_">getInfo</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> {
      message,
      appMessage
    }
  }
})
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
</code></pre>
<h4 data-id="heading-11">index.vue</h4>
<pre><code class="hljs language-js" lang="js">&lt;template&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">a-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"onClick"</span>&gt;</span>弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">a-button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
&lt;/template&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { provide, h } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> { message } <span class="hljs-keyword">from</span> <span class="hljs-string">'ant-design-vue'</span>
<span class="hljs-keyword">import</span> useShowModal <span class="hljs-keyword">from</span> <span class="hljs-string">'@/utils/useShowModal'</span>

<span class="hljs-title function_">provide</span>(<span class="hljs-string">'message'</span>, <span class="hljs-string">'我是父组件home页面'</span>)
<span class="hljs-keyword">const</span> showModal = <span class="hljs-title function_">useShowModal</span>()
<span class="hljs-keyword">const</span> <span class="hljs-title function_">onClick</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">const</span> <span class="hljs-title class_">Modal</span> = <span class="hljs-keyword">await</span> <span class="hljs-title function_">showModal</span>({
    <span class="hljs-attr">modalComponent</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">'@/pages/home/components/modal.vue'</span>),
    <span class="hljs-attr">title</span>: <span class="hljs-string">'弹窗标题'</span>,
    <span class="hljs-attr">prop</span>: <span class="hljs-string">'弹窗组件需要的参数'</span>,
    <span class="hljs-attr">slots</span>: {
      <span class="hljs-attr">default</span>: <span class="hljs-function">(<span class="hljs-params">arg: any</span>) =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-string">'button'</span>, arg.<span class="hljs-property">type</span>),
      <span class="hljs-attr">footer</span>: <span class="hljs-function">(<span class="hljs-params">arg: any</span>) =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-string">'button'</span>, arg.<span class="hljs-property">type</span>)
    },
    <span class="hljs-attr">onLoadList</span>: <span class="hljs-function">() =&gt;</span> message.<span class="hljs-title function_">success</span>(<span class="hljs-string">'表单已经提交，刷新列表'</span>)
  })
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Modal</span>.<span class="hljs-title function_">getInfo</span>())
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>
</code></pre>
<h4 data-id="heading-12">useShowModal.ts</h4>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">import</span> {
  defineAsyncComponent,
  getCurrentInstance,
  h,
  nextTick,
  render,
  createVNode,
  ref,
  watch
} <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> type { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>

type <span class="hljs-title class_">RawSlots</span> = {
  [<span class="hljs-attr">name</span>: string]: unknown
  $stable?: boolean
}
interface <span class="hljs-title class_">IModalOptions</span> {
  <span class="hljs-attr">modalComponent</span>: <span class="hljs-title class_">Component</span> | any
  appendTo?: <span class="hljs-title class_">HTMLElement</span> | string
  slots?: <span class="hljs-title class_">RawSlots</span>
  [<span class="hljs-attr">name</span>: string]: unknown
}

<span class="hljs-keyword">const</span> getAppendToElement = (<span class="hljs-attr">appendTo</span>: <span class="hljs-title class_">IModalOptions</span>[<span class="hljs-string">'appendTo'</span>]): <span class="hljs-function"><span class="hljs-params">HTMLElement</span> =&gt;</span> {
  <span class="hljs-keyword">let</span> <span class="hljs-attr">appendToEL</span>: <span class="hljs-title class_">HTMLElement</span> | <span class="hljs-literal">null</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>
  <span class="hljs-keyword">if</span> (appendTo) {
    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> appendTo === <span class="hljs-string">'string'</span>) {
      appendToEL = <span class="hljs-variable language_">document</span>.<span class="hljs-property">querySelector</span>&lt;<span class="hljs-title class_">HTMLElement</span>&gt;(appendTo)
    }
    <span class="hljs-keyword">if</span> (appendTo <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">HTMLElement</span>) {
      appendToEL = appendTo
    }
    <span class="hljs-keyword">if</span> (!(appendToEL <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">HTMLElement</span>)) {
      appendToEL = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>
    }
  }
  <span class="hljs-keyword">return</span> appendToEL
}

<span class="hljs-keyword">function</span> <span class="hljs-title function_">getProvides</span>(<span class="hljs-params">instance: any</span>) {
  <span class="hljs-keyword">let</span> provides = instance?.<span class="hljs-property">provides</span> || {}
  <span class="hljs-keyword">if</span> (instance.<span class="hljs-property">parent</span>) {
    provides = { ...provides, ...<span class="hljs-title function_">getProvides</span>(instance.<span class="hljs-property">parent</span>) }
  }
  <span class="hljs-keyword">return</span> provides
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useShowModal</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> currentInstance = <span class="hljs-title function_">getCurrentInstance</span>() <span class="hljs-keyword">as</span> any
  <span class="hljs-keyword">const</span> provides = <span class="hljs-title function_">getProvides</span>(currentInstance)

  <span class="hljs-keyword">function</span> <span class="hljs-title function_">showModal</span>(<span class="hljs-params">options: IModalOptions</span>) {
    <span class="hljs-keyword">const</span> container = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">'div'</span>)
    <span class="hljs-keyword">const</span> isAsync = <span class="hljs-keyword">typeof</span> options.<span class="hljs-property">modalComponent</span> === <span class="hljs-string">'function'</span>
    <span class="hljs-keyword">const</span> innerRef = <span class="hljs-title function_">ref</span>()

    <span class="hljs-keyword">const</span> modalComponent = isAsync
      ? <span class="hljs-title function_">defineAsyncComponent</span>(options.<span class="hljs-property">modalComponent</span>)
      : options.<span class="hljs-property">modalComponent</span>

    <span class="hljs-keyword">const</span> <span class="hljs-attr">props</span>: <span class="hljs-title class_">Record</span>&lt;string, any&gt; = {}
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> options) {
      <span class="hljs-keyword">if</span> (![<span class="hljs-string">'modalComponent'</span>, <span class="hljs-string">'appendTo'</span>, <span class="hljs-string">'slots'</span>].<span class="hljs-title function_">includes</span>(key)) props[key] = options[key]
    }

    <span class="hljs-keyword">const</span> vNode = <span class="hljs-title function_">createVNode</span>({
      <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {
        <span class="hljs-keyword">const</span> instance = <span class="hljs-title function_">getCurrentInstance</span>() <span class="hljs-keyword">as</span> any
        <span class="hljs-keyword">if</span> (instance) {
          instance.<span class="hljs-property">provides</span> = { ...instance.<span class="hljs-property">provides</span>, ...provides }
        }
      },
      <span class="hljs-attr">render</span>: <span class="hljs-function">() =&gt;</span>
        <span class="hljs-title function_">h</span>(
          modalComponent,
          {
            <span class="hljs-attr">visible</span>: <span class="hljs-literal">true</span>,
            ...props,
            <span class="hljs-attr">ref</span>: innerRef,
            <span class="hljs-string">'onUpdate:visible'</span>: <span class="hljs-function">() =&gt;</span> {
              <span class="hljs-title function_">nextTick</span>(<span class="hljs-function">() =&gt;</span> {
                <span class="hljs-title function_">close</span>()
              })
            }
          },
          options.<span class="hljs-property">slots</span>
        )
    })

    <span class="hljs-title function_">render</span>(vNode, container)
    <span class="hljs-title function_">getAppendToElement</span>(options.<span class="hljs-property">appendTo</span>).<span class="hljs-title function_">appendChild</span>(container)

    <span class="hljs-keyword">function</span> <span class="hljs-title function_">close</span>(<span class="hljs-params"></span>) {
      <span class="hljs-title function_">render</span>(<span class="hljs-literal">null</span>, container)
      container.<span class="hljs-property">parentNode</span>?.<span class="hljs-title function_">removeChild</span>(container)
    }

    <span class="hljs-keyword">if</span> (!isAsync) {
      <span class="hljs-keyword">return</span> innerRef.<span class="hljs-property">value</span>
    } <span class="hljs-keyword">else</span> {
      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {
        <span class="hljs-title function_">watch</span>(
          innerRef,
          <span class="hljs-function">() =&gt;</span> {
            <span class="hljs-title function_">resolve</span>(innerRef.<span class="hljs-property">value</span>)
          },
          {
            <span class="hljs-attr">once</span>: <span class="hljs-literal">true</span>
          }
        )
      })
    }
  }

  <span class="hljs-keyword">return</span> showModal
}
</code></pre></div></div>