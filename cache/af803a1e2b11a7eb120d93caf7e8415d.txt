
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/huangSir-devops/p/18856547" title="发布于 2025-05-02 13:41">
    <span role="heading" aria-level="2">K8s新手系列之Pod容器中的command和args指令</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="概述">概述</h2>
<p>command和args是containers下的两个指令，类似Dockerfile中的ENTRYPONIT和CMD指令。</p>
<p>官方文档地址：<a href="https://kubernetes.io/zh-cn/docs/tasks/inject-data-application/define-command-argument-container/" target="_blank" rel="noopener nofollow">https://kubernetes.io/zh-cn/docs/tasks/inject-data-application/define-command-argument-container/</a></p>
<h2 id="command">command</h2>
<p>command功能同Dockerfile中的ENTRYPONIT指令，用于指定容器启动时要执行的命令。如果不设置command，容器将使用基础镜像中默认的启动命令，也就是ENTRYPONIT指定的启动命令。</p>
<p>可以通过<code>kubectl explain pod.spec.containers.command</code>查看对应的资源信息<br>
示例：</p>
<pre><code>[root@master01 ~]# kubectl explain pod.spec.containers.command
KIND:     Pod
VERSION:  v1

FIELD:    command &lt;[]string&gt;

DESCRIPTION:
     Entrypoint array. Not executed within a shell. The container image's
     ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME)
     are expanded using the container's environment. If a variable cannot be
     resolved, the reference in the input string will be unchanged. Double $$
     are reduced to a single $, which allows for escaping the $(VAR_NAME)
     syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
     Escaped references will never be expanded, regardless of whether the
     variable exists or not. Cannot be updated. More info:
     https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
</code></pre>
<h2 id="args">args</h2>
<p>args功能同Dockerfile中的CMD指令，用于为command指定的命令提供参数。如果command没有指定，则args中的参数将作为基础镜像中默认命令的参数，也就是ENTRYPONIT指令的参数。</p>
<p>可以通过<code>kubectl explain pod.spec.containers.args</code>查看对应的资源信息<br>
示例：</p>
<pre><code>[root@master01 ~]# kubectl explain pod.spec.containers.args
KIND:     Pod
VERSION:  v1

FIELD:    args &lt;[]string&gt;

DESCRIPTION:
     Arguments to the entrypoint. The container image's CMD is used if this is
     not provided. Variable references $(VAR_NAME) are expanded using the
     container's environment. If a variable cannot be resolved, the reference in
     the input string will be unchanged. Double $$ are reduced to a single $,
     which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
     produce the string literal "$(VAR_NAME)". Escaped references will never be
     expanded, regardless of whether the variable exists or not. Cannot be
     updated. More info:
     https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
</code></pre>
<h2 id="示例">示例</h2>
<pre><code># 定义资源清单
[root@master01 ~/pod]# cat command-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: command-demo
  labels:
    purpose: demonstrate-command
spec:
  containers:
  - name: command-demo-container
    image: debian
    command: ["printenv"]
    args: ["HOSTNAME", "KUBERNETES_PORT"]
  restartPolicy: OnFailure

# 创建pod
[root@master01 ~/pod]# kubectl apply -f command-pod.yaml
pod/command-demo created

# 查看Pod日志打印信息
[root@master01 ~/pod]# kubectl logs command-demo
command-demo
tcp://10.96.0.1:443
</code></pre>
<h2 id="使用注意事项">使用注意事项</h2>
<ul>
<li>
<p>如果command和args均没有写，那么用Dockerfile的配置。</p>
</li>
<li>
<p>如果command写了，但args没有写，那么Dockerfile默认的配置会被忽略，执行输入的command</p>
</li>
<li>
<p>如果command没写，但args写了，那么Dockerfile中配置的ENTRYPOINT的命令会被执行，使用当前args的参数</p>
</li>
<li>
<p>如果command和args都写了，那么Dockerfile的配置被忽略，执行command并追加上args参数</p>
</li>
</ul>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/huangSir-devops/" target="_blank">huangSir-devops</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/huangSir-devops/p/18856547" target="_blank">https://www.cnblogs.com/huangSir-devops/p/18856547</a>，微信Vac666666，欢迎交流</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.028414335599537037" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-02 13:41">2025-05-02 13:41</span>&nbsp;
<a href="https://www.cnblogs.com/huangSir-devops">huangSir-devops</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18856547);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18856547', targetLink: 'https://www.cnblogs.com/huangSir-devops/p/18856547', title: 'K8s新手系列之Pod容器中的command和args指令' })">举报</a>
</div>
        