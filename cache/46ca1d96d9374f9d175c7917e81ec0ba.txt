
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lanfengqi/p/18939605" title="发布于 2025-06-21 07:08">
    <span role="heading" aria-level="2">使用minio + iceberg-rest + amoro+ + trino搭建iceberg数据湖架构</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>该架构（MinIO + Iceberg REST Catalog + Amoro + Trino）的设计融合了现代数据湖的核心需求，旨在实现‌<strong>存储解耦、计算灵活、管理自动化及高性能查询</strong>‌的综合目标。<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2686276/202506/2686276-20250621071032944-1403581692.png" class="lazyload"></p>
<h3 id="一核心设计理念">一、核心设计理念</h3>
<ol>
<li><strong>存储与计算分离</strong>‌</li>
</ol>
<ul>
<li>‌<strong>MinIO</strong>‌ 作为底层对象存储，提供高扩展、低成本的云原生存储能力，兼容 S3 API 简化多引擎接入。</li>
</ul>
<ol start="2">
<li>‌<strong>统一元数据治理</strong>‌</li>
</ol>
<ul>
<li>‌<strong>Iceberg REST Catalog</strong>‌ 替代 Hive Metastore，提供标准化 RESTful 接口管理表元数据（如分区、Schema、快照）。</li>
<li>‌<strong>优势</strong>‌：解耦元数据服务，避免单点故障，支持多引擎并发读写（Flink/Spark/Trino）。</li>
</ul>
<ol start="3">
<li>‌<strong>自动化湖仓管理</strong>‌</li>
</ol>
<ul>
<li>‌<strong>Amoro</strong>‌ 填补了 Iceberg 原生能力的空白，提供：
<ul>
<li>‌<strong>小文件自动合并</strong>‌（通过 Flink 作业优化存储）</li>
<li>‌<strong>多引擎协调</strong>‌（保证 Trino、Flink、Spark 的事务一致性）</li>
<li>‌<strong>表生命周期管理</strong>‌（如分区清理、数据归档）</li>
</ul>
</li>
</ul>
<ol start="4">
<li>‌<strong>高性能分析查询</strong>‌</li>
</ol>
<ul>
<li>‌<strong>Trino</strong>‌ 作为统一 SQL 查询层，支持：
<ul>
<li>秒级响应复杂分析；</li>
<li>Iceberg 高级特性（时间旅行、增量扫描）</li>
</ul>
</li>
</ul>
<p>数据写入建议使用spark、flink等引擎直接通过iceberg rest catalog写入minio存储。可实现批流、实时流。</p>
<p>上一篇文章中是 trino直接访问amoro，<strong>amoro存在单一节点存在性能瓶颈，amoro还在孵化阶段</strong>，为了解决上面的问题，因此引入iceberg rest catalog 元数据管理，让amoro接管外部 External Catalog，trino直接配置访问 rest catalog。</p>
<p>另外，<strong>大家会问为什么数据查询分析不适用doris</strong>? 其实是可以的。考虑一点：doris数仓分析访问iceberg时，它有一个10分钟的元数据同步时间，会导致实时写入iceberg的数据，不能第一时间查询到。因此引入doris 会导致只能达到分钟级的实时数仓。</p>
<h2 id="二部署流程"><strong>二、部署流程</strong></h2>
<p>以下是使用docker-compose搭建，可用于日常开发环境。</p>
<p>确保已安装Docker 27.0.3 和Docker Compose。</p>
<p>把下面的yaml保存到docker-compose.yml的文件中：</p>
<pre><code>version: "3"

services:
  minio:
    image: minio/minio
    container_name: minio
    networks:
      demo-iceberg:
        aliases:
          - warehouse.minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=minio
    ports:
      - 9001:9001
      - 9000:9000
    command: [ "server", "/data", "--console-address", ":9001" ]
  rest:
    image: tabulario/iceberg-rest
    container_name: iceberg-rest
    networks:
      demo-iceberg:
        aliases:
          - warehouse.rest
    ports:
      - 8181:8181
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - CATALOG_WAREHOUSE=s3://warehouse/
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=http://minio:9000
  amoro:
    image: apache/amoro
    container_name: amoro
    ports:
      - 8081:8081
      - 1630:1630
      - 1260:1260
    environment:
      - JVM_XMS=1024
    networks:
      demo-iceberg:
    volumes:
      - ./amoro:/tmp/warehouse
    command: ["/entrypoint.sh", "ams"]
    tty: true
    stdin_open: true
  trino:
    image: trinodb/trino:419
    container_name: trino
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    volumes:
      - ./example.properties:/etc/trino/catalog/example.properties
    networks:
      demo-iceberg:
        aliases:
          - warehouse.trino
    ports:
      - 8080:8080
networks:
  demo-iceberg:
    ipam:
      driver: default
</code></pre>
<p>iceberg rest 镜像使用 tabulario/iceberg-rest。不要去使用iceberg官网上的 apache/iceberg-rest-fixture，会报错。</p>
<p>接下来，在docker-compose.yml所在的目录下创建example.properties文件:</p>
<pre><code>connector.name=iceberg
iceberg.catalog.type=rest
iceberg.rest-catalog.uri=http://&lt;IP地址&gt;:8181
fs.native-s3.enabled=true
s3.endpoint=http://&lt;IP地址&gt;:9000
s3.region=us-east-1
s3.aws-access-key=admin
s3.aws-secret-key=password
</code></pre>
<p>最后一步骤：使用以下命令启动docker容器：</p>
<pre><code>docker-compose up minio rest amoro
</code></pre>
<h2 id="配置">配置</h2>
<h3 id="minio-创建-bucket">minio 创建 bucket</h3>
<p>打开http://localhost:9000在浏览器中，输入admin/password登录minio界面。</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2686276/202506/2686276-20250621070616289-23387992.png" class="lazyload"></p>
<h3 id="amoro-配置">amoro 配置</h3>
<h4 id="create-optimizer-group">Create optimizer group</h4>
<p>Open&nbsp;<a href="http://localhost:1630/" target="_blank" rel="noopener nofollow">http://localhost:1630</a>&nbsp;in a browser, enter&nbsp;<code>admin/admin</code>&nbsp;to log in to the dashboard.</p>
<p>Click on&nbsp;<code>Optimizing</code>&nbsp;in the sidebar, choose&nbsp;<code>Optimizer Groups</code>&nbsp;and click&nbsp;<code>Add Group</code>&nbsp;button to create a new group befre creating catalog</p>
<p><img alt="Create group" loading="lazy" data-src="https://amoro.apache.org/images/quickstart/create-group.png" class="lazyload"></p>
<h3 id="create-catalog">Create catalog</h3>
<p>Click on&nbsp;<code>Catalogs</code>&nbsp;in the sidebar, click on the&nbsp;<code>+</code>&nbsp;button under Catalog List to create a test catalog, and name it to&nbsp;<code>demo_catalog</code>:</p>
<p>o use the Iceberg Format, select&nbsp;<code>Type</code>&nbsp;as&nbsp;<code>External Catalog</code>, and choose&nbsp;<code>Metastore</code>&nbsp;as&nbsp;<code>Custom</code>, and choose&nbsp;<code>Iceberg</code>&nbsp;as&nbsp;<code>Table Format</code>.</p>
<p><strong>key catalog-impl in to <code>org.apache.iceberg.rest.RESTCatalog</code></strong></p>
<p><strong>add key as <code>uri</code> in in to <code>http://&lt;rest ip address&gt;:8181</code></strong></p>
<p><strong>这一步非常重要，请查看下面的图片填写。</strong></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2686276/202506/2686276-20250621070631551-1086179383.png" class="lazyload"></p>
<p>按照上面配置的，修改example.properties文件。然后执行以下命令：</p>
<pre><code>docker-compose up trino
</code></pre>
<h2 id="demo-steps">Demo steps</h2>
<h3 id="initialize-tables">Initialize tables</h3>
<p>Click on amoro system&nbsp;<code>Terminal</code>&nbsp;in the sidebar, you can create the test tables here using SQL. Terminal supports executing Spark SQL statements for now.</p>
<pre><code>CREATE DATABASE IF NOT EXISTS db;
CREATE TABLE IF NOT EXISTS db.tb_users (
    id INT,
    name string,
    ts TIMESTAMP
) 
PARTITIONED BY (days(ts));

INSERT OVERWRITE db.tb_users VALUES 
(1, "eric", timestamp("2022-07-01 12:32:00")),
(2, "frank", timestamp("2022-07-02 09:11:00")),
(3, "lee", timestamp("2022-07-02 10:11:00"));

SELECT * FROM db.tb_users;
</code></pre>
<p>Click on the&nbsp;<code>RUN</code>&nbsp;button uppon the SQL editor, and wait for the SQL query to finish executing. You can then see the query results under the SQL editor.</p>
<h3 id="initialize-tables-1">Initialize tables</h3>
<p>start up the docker containers with this command:</p>
<pre><code>docker exec -it tirno trino
</code></pre>
<pre><code>trino&gt; show catalogs;
 Catalog 
---------
 example 
 jmx     
 memory  
 system  
 tpcds   
 tpch    
(6 rows)

trino&gt; show schemas in example;
       Schema       
--------------------
 db                 
 information_schema 
(2 rows)

trino&gt; show tables in example.db;
 Table 
-------
 tb_users
(1 row)


trino&gt; select * from example.db.tb_users;
 id | name  |               ts               
----+-------+--------------------------------
  1 | eric  | 2022-07-01 12:32:00.000000 UTC  
  2 | frank | 2022-07-02 09:11:00.000000 UTC 
  3 | lee   | 2022-07-02 10:11:00.000000 UTC  
(3 rows)
</code></pre>
<p>到此为止，我们的架构就搭建完成。</p>
<p>关键注意事项</p>
<ul>
<li>生产环境建议配置持久化卷和网络隔离</li>
<li>服务器要配置 limits.conf、 sysctl.conf。可参考https://www.oceanbase.com/docs/common-oceanbase-database-cn-1000000002016077</li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.007638888888888889" data-date-updated="2025-06-21 07:19">2025-06-21 07:08</span>&nbsp;
<a href="https://www.cnblogs.com/lanfengqi">兰丰岐</a>&nbsp;
阅读(<span id="post_view_count">2</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18939605);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18939605', targetLink: 'https://www.cnblogs.com/lanfengqi/p/18939605', title: '使用minio + iceberg-rest + amoro+ + trino搭建iceberg数据湖架构' })">举报</a>
</div>
        