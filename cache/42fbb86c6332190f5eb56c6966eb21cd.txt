
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wgjava/p/18729759" title="发布于 2025-02-21 18:01">
    <span role="heading" aria-level="2">40个JS常用使用技巧案例</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>大家好，我是 V 哥。在日常开发中，我们经常会使用 JS 解决页面的交互，在 JS 使用过程 V 哥总结了40个小技巧，分享给大家，废话不多说，马上开干。<code>先赞再看后评论，腰缠万贯财进门</code>。</p>
</blockquote>
<h2 id="js常用技巧案例">JS常用技巧案例</h2>
<p>以下是 40 个常用的 JavaScript 使用技巧，包含案例代码和解释：</p>
<h3 id="1-数组去重">1. 数组去重</h3>
<pre><code class="language-javascript">const arr = [1, 2, 2, 3, 4, 4, 5];
const uniqueArr = [...new Set(arr)];
console.log(uniqueArr); // [1, 2, 3, 4, 5]
</code></pre>
<p>解释：<code>Set</code> 对象是一种无序且唯一的数据结构，使用扩展运算符 <code>...</code> 将 <code>Set</code> 转换回数组，从而实现去重。</p>
<h3 id="2-合并多个数组">2. 合并多个数组</h3>
<pre><code class="language-javascript">const arr1 = [1, 2];
const arr2 = [3, 4];
const arr3 = [5, 6];
const mergedArr = [...arr1, ...arr2, ...arr3];
console.log(mergedArr); // [1, 2, 3, 4, 5, 6]
</code></pre>
<p>解释：使用扩展运算符可以轻松地将多个数组合并成一个新数组。</p>
<h3 id="3-数组解构赋值">3. 数组解构赋值</h3>
<pre><code class="language-javascript">const arr = [1, 2, 3];
const [a, b, c] = arr;
console.log(a); // 1
console.log(b); // 2
console.log(c); // 3
</code></pre>
<p>解释：通过解构赋值，可以方便地从数组中提取值并赋给变量。</p>
<h3 id="4-对象解构赋值">4. 对象解构赋值</h3>
<pre><code class="language-javascript">const obj = { name: 'John', age: 30 };
const { name, age } = obj;
console.log(name); // 'John'
console.log(age); // 30
</code></pre>
<p>解释：可以从对象中提取属性并赋给变量。</p>
<h3 id="5-交换变量值">5. 交换变量值</h3>
<pre><code class="language-javascript">let a = 1;
let b = 2;
[a, b] = [b, a];
console.log(a); // 2
console.log(b); // 1
</code></pre>
<p>解释：使用数组解构赋值可以简洁地交换两个变量的值。</p>
<h3 id="6-可选链操作符">6. 可选链操作符</h3>
<pre><code class="language-javascript">const obj = {
  person: {
    name: 'John'
  }
};
const name = obj?.person?.name;
console.log(name); // 'John'
</code></pre>
<p>解释：可选链操作符 <code>?.</code> 可以避免在访问嵌套对象属性时出现 <code>TypeError</code>。</p>
<h3 id="7-空值合并操作符">7. 空值合并操作符</h3>
<pre><code class="language-javascript">const value = null;
const result = value ?? 'default';
console.log(result); // 'default'
</code></pre>
<p>解释：空值合并操作符 <code>??</code> 用于在变量为 <code>null</code> 或 <code>undefined</code> 时提供默认值。</p>
<h3 id="8-箭头函数">8. 箭头函数</h3>
<pre><code class="language-javascript">const numbers = [1, 2, 3];
const squared = numbers.map(num =&gt; num * num);
console.log(squared); // [1, 4, 9]
</code></pre>
<p>解释：箭头函数是一种简洁的函数定义方式，适用于简单的函数逻辑。</p>
<h3 id="9-函数默认参数">9. 函数默认参数</h3>
<pre><code class="language-javascript">function greet(name = 'Guest') {
  console.log(`Hello, ${name}!`);
}
greet(); // 'Hello, Guest!'
greet('John'); // 'Hello, John!'
</code></pre>
<p>解释：可以为函数参数提供默认值，当调用函数时未传递该参数时，将使用默认值。</p>
<h3 id="10-展开对象">10. 展开对象</h3>
<pre><code class="language-javascript">const obj1 = { a: 1, b: 2 };
const obj2 = { ...obj1, c: 3 };
console.log(obj2); // { a: 1, b: 2, c: 3 }
</code></pre>
<p>解释：使用扩展运算符可以将一个对象的属性展开到另一个对象中。</p>
<h3 id="11-数组过滤">11. 数组过滤</h3>
<pre><code class="language-javascript">const numbers = [1, 2, 3, 4, 5];
const evenNumbers = numbers.filter(num =&gt; num % 2 === 0);
console.log(evenNumbers); // [2, 4]
</code></pre>
<p>解释：<code>filter</code> 方法用于创建一个新数组，其中包含满足指定条件的元素。</p>
<h3 id="12-数组映射">12. 数组映射</h3>
<pre><code class="language-javascript">const numbers = [1, 2, 3];
const doubled = numbers.map(num =&gt; num * 2);
console.log(doubled); // [2, 4, 6]
</code></pre>
<p>解释：<code>map</code> 方法用于创建一个新数组，其中每个元素都是原数组中对应元素经过某种处理后的结果。</p>
<h3 id="13-数组归约">13. 数组归约</h3>
<pre><code class="language-javascript">const numbers = [1, 2, 3, 4];
const sum = numbers.reduce((acc, num) =&gt; acc + num, 0);
console.log(sum); // 10
</code></pre>
<p>解释：<code>reduce</code> 方法用于将数组元素归约为一个值。</p>
<h3 id="14-数组查找">14. 数组查找</h3>
<pre><code class="language-javascript">const numbers = [1, 2, 3, 4, 5];
const found = numbers.find(num =&gt; num &gt; 3);
console.log(found); // 4
</code></pre>
<p>解释：<code>find</code> 方法用于查找数组中第一个满足指定条件的元素。</p>
<h3 id="15-数组查找索引">15. 数组查找索引</h3>
<pre><code class="language-javascript">const numbers = [1, 2, 3, 4, 5];
const index = numbers.findIndex(num =&gt; num &gt; 3);
console.log(index); // 3
</code></pre>
<p>解释：<code>findIndex</code> 方法用于查找数组中第一个满足指定条件的元素的索引。</p>
<h3 id="16-字符串转数字">16. 字符串转数字</h3>
<pre><code class="language-javascript">const str = '123';
const num = +str;
console.log(num); // 123
</code></pre>
<p>解释：使用一元加号 <code>+</code> 可以将字符串转换为数字。</p>
<h3 id="17-数字转字符串">17. 数字转字符串</h3>
<pre><code class="language-javascript">const num = 123;
const str = num.toString();
console.log(str); // '123'
</code></pre>
<p>解释：<code>toString</code> 方法可以将数字转换为字符串。</p>
<h3 id="18-检查变量是否为数组">18. 检查变量是否为数组</h3>
<pre><code class="language-javascript">const arr = [1, 2, 3];
const isArray = Array.isArray(arr);
console.log(isArray); // true
</code></pre>
<p>解释：<code>Array.isArray</code> 方法用于检查一个变量是否为数组。</p>
<h3 id="19-检查变量是否为对象">19. 检查变量是否为对象</h3>
<pre><code class="language-javascript">const obj = { a: 1 };
const isObject = typeof obj === 'object' &amp;&amp; obj!== null;
console.log(isObject); // true
</code></pre>
<p>解释：使用 <code>typeof</code> 检查变量类型，并排除 <code>null</code> 的情况。</p>
<h3 id="20-动态创建对象属性">20. 动态创建对象属性</h3>
<pre><code class="language-javascript">const key = 'name';
const value = 'John';
const obj = { [key]: value };
console.log(obj); // { name: 'John' }
</code></pre>
<p>解释：使用方括号语法可以动态创建对象属性。</p>
<h3 id="21-延迟执行函数">21. 延迟执行函数</h3>
<pre><code class="language-javascript">function greet() {
  console.log('Hello!');
}
setTimeout(greet, 2000); // 2 秒后输出 'Hello!'
</code></pre>
<p>解释：<code>setTimeout</code> 方法用于在指定的时间后执行一个函数。</p>
<h3 id="22-定时执行函数">22. 定时执行函数</h3>
<pre><code class="language-javascript">function greet() {
  console.log('Hello!');
}
setInterval(greet, 2000); // 每 2 秒输出一次 'Hello!'
</code></pre>
<p>解释：<code>setInterval</code> 方法用于每隔指定的时间执行一次函数。</p>
<h3 id="23-取消定时任务">23. 取消定时任务</h3>
<pre><code class="language-javascript">function greet() {
  console.log('Hello!');
}
const intervalId = setInterval(greet, 2000);
clearInterval(intervalId); // 取消定时任务
</code></pre>
<p>解释：使用 <code>clearInterval</code> 方法可以取消由 <code>setInterval</code> 创建的定时任务。</p>
<h3 id="24-浅拷贝对象">24. 浅拷贝对象</h3>
<pre><code class="language-javascript">const obj1 = { a: 1, b: 2 };
const obj2 = { ...obj1 };
console.log(obj2); // { a: 1, b: 2 }
</code></pre>
<p>解释：使用扩展运算符可以实现对象的浅拷贝。</p>
<h3 id="25-深拷贝对象">25. 深拷贝对象</h3>
<pre><code class="language-javascript">const obj1 = { a: 1, b: { c: 2 } };
const obj2 = JSON.parse(JSON.stringify(obj1));
console.log(obj2); // { a: 1, b: { c: 2 } }
</code></pre>
<p>解释：使用 <code>JSON.parse</code> 和 <code>JSON.stringify</code> 可以实现对象的深拷贝，但这种方法有局限性，不能处理函数、正则表达式等特殊对象。</p>
<h3 id="26-检查对象是否有某个属性">26. 检查对象是否有某个属性</h3>
<pre><code class="language-javascript">const obj = { name: 'John' };
const hasName = 'name' in obj;
console.log(hasName); // true
</code></pre>
<p>解释：使用 <code>in</code> 运算符可以检查对象是否有某个属性。</p>
<h3 id="27-获取对象的所有属性名">27. 获取对象的所有属性名</h3>
<pre><code class="language-javascript">const obj = { a: 1, b: 2 };
const keys = Object.keys(obj);
console.log(keys); // ['a', 'b']
</code></pre>
<p>解释：<code>Object.keys</code> 方法用于获取对象的所有属性名。</p>
<h3 id="28-获取对象的所有属性值">28. 获取对象的所有属性值</h3>
<pre><code class="language-javascript">const obj = { a: 1, b: 2 };
const values = Object.values(obj);
console.log(values); // [1, 2]
</code></pre>
<p>解释：<code>Object.values</code> 方法用于获取对象的所有属性值。</p>
<h3 id="29-获取对象的所有属性键值对">29. 获取对象的所有属性键值对</h3>
<pre><code class="language-javascript">const obj = { a: 1, b: 2 };
const entries = Object.entries(obj);
console.log(entries); // [['a', 1], ['b', 2]]
</code></pre>
<p>解释：<code>Object.entries</code> 方法用于获取对象的所有属性键值对。</p>
<h3 id="30-类的继承">30. 类的继承</h3>
<pre><code class="language-javascript">class Animal {
  constructor(name) {
    this.name = name;
  }
  speak() {
    console.log(`${this.name} makes a noise.`);
  }
}

class Dog extends Animal {
  speak() {
    console.log(`${this.name} barks.`);
  }
}

const dog = new Dog('Buddy');
dog.speak(); // 'Buddy barks.'
</code></pre>
<p>解释：使用 <code>extends</code> 关键字可以实现类的继承。</p>
<h3 id="31-模块化导入导出">31. 模块化导入导出</h3>
<pre><code class="language-javascript">// module.js
export const message = 'Hello!';

// main.js
import { message } from './module.js';
console.log(message); // 'Hello!'
</code></pre>
<p>解释：使用 <code>export</code> 关键字导出模块中的变量或函数，使用 <code>import</code> 关键字导入模块。</p>
<h3 id="32-三元运算符">32. 三元运算符</h3>
<pre><code class="language-javascript">const age = 20;
const canVote = age &gt;= 18? 'Yes' : 'No';
console.log(canVote); // 'Yes'
</code></pre>
<p>解释：三元运算符是一种简洁的条件判断语句。</p>
<h3 id="33-短路求值">33. 短路求值</h3>
<pre><code class="language-javascript">const name = null;
const displayName = name || 'Guest';
console.log(displayName); // 'Guest'
</code></pre>
<p>解释：使用逻辑或 <code>||</code> 运算符可以实现短路求值，当第一个值为假时，返回第二个值。</p>
<h3 id="34-函数柯里化">34. 函数柯里化</h3>
<pre><code class="language-javascript">function add(a, b) {
  if (b === undefined) {
    return function (b) {
      return a + b;
    };
  }
  return a + b;
}

const add5 = add(5);
console.log(add5(3)); // 8
</code></pre>
<p>解释：函数柯里化是指将一个多参数函数转换为一系列单参数函数。</p>
<h3 id="35-防抖函数">35. 防抖函数</h3>
<pre><code class="language-javascript">function debounce(func, delay) {
  let timer;
  return function () {
    const context = this;
    const args = arguments;
    clearTimeout(timer);
    timer = setTimeout(() =&gt; {
      func.apply(context, args);
    }, delay);
  };
}

function search() {
  console.log('Searching...');
}

const debouncedSearch = debounce(search, 500);
window.addEventListener('input', debouncedSearch);
</code></pre>
<p>解释：防抖函数用于限制函数的调用频率，在一定时间内只执行最后一次调用。</p>
<h3 id="36-节流函数">36. 节流函数</h3>
<pre><code class="language-javascript">function throttle(func, limit) {
  let inThrottle;
  return function () {
    const context = this;
    const args = arguments;
    if (!inThrottle) {
      func.apply(context, args);
      inThrottle = true;
      setTimeout(() =&gt; (inThrottle = false), limit);
    }
  };
}

function scroll() {
  console.log('Scrolling...');
}

const throttledScroll = throttle(scroll, 500);
window.addEventListener('scroll', throttledScroll);
</code></pre>
<p>解释：节流函数用于限制函数的调用频率，在一定时间内只执行一次调用。</p>
<h3 id="37-异步函数">37. 异步函数</h3>
<pre><code class="language-javascript">async function fetchData() {
  try {
    const response = await fetch('https://api.example.com/data');
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error(error);
  }
}

fetchData();
</code></pre>
<p>解释：异步函数使用 <code>async/await</code> 语法，可以更方便地处理异步操作。</p>
<h3 id="38-生成器函数">38. 生成器函数</h3>
<pre><code class="language-javascript">function* generateNumbers() {
  let i = 0;
  while (true) {
    yield i++;
  }
}

const generator = generateNumbers();
console.log(generator.next().value); // 0
console.log(generator.next().value); // 1
</code></pre>
<p>解释：生成器函数使用 <code>function*</code> 定义，使用 <code>yield</code> 关键字暂停和恢复函数执行。</p>
<h3 id="39-事件委托">39. 事件委托</h3>
<pre><code class="language-javascript">const ul = document.querySelector('ul');
ul.addEventListener('click', function (event) {
  if (event.target.tagName === 'LI') {
    console.log('Clicked on a list item:', event.target.textContent);
  }
});
</code></pre>
<p>解释：事件委托是指将事件监听器添加到父元素上，利用事件冒泡机制处理子元素的事件。</p>
<h3 id="40-随机数生成">40. 随机数生成</h3>
<pre><code class="language-javascript">const randomNum = Math.floor(Math.random() * 10);
console.log(randomNum); // 0 - 9 之间的随机整数
</code></pre>
<p>解释：使用 <code>Math.random()</code> 生成 0 到 1 之间的随机小数，使用 <code>Math.floor()</code> 向下取整。</p>
<h2 id="最后">最后</h2>
<p>以上是 V 哥总结的40个常用的 JS 小案例，日常开发中也许能用得着，收藏起来，以备不时之需，关注威哥爱编程，全栈开发就你行。</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/wgjava/" target="_blank">威哥爱编程</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/wgjava/p/18729759" target="_blank">https://www.cnblogs.com/wgjava/p/18729759</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="17.633985247752314" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-21 18:01">2025-02-21 18:01</span>&nbsp;
<a href="https://www.cnblogs.com/wgjava">威哥爱编程</a>&nbsp;
阅读(<span id="post_view_count">81</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18729759" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18729759);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18729759', targetLink: 'https://www.cnblogs.com/wgjava/p/18729759', title: '40个JS常用使用技巧案例' })">举报</a>
</div>
        