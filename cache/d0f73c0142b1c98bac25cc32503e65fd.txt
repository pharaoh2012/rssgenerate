
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ywbmaster/p/18627038" title="发布于 2024-12-24 14:50">
    <span role="heading" aria-level="2">Web浏览器播放rtsp视频流详细解决方案</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><img src="https://img2024.cnblogs.com/blog/1431659/202412/1431659-20241224143829426-989405428.png" alt="" loading="lazy"></p>
<h2><span style="font-size: 16px">1、背景</span></h2>
<p><span style="font-size: 16px">在当前项目中，需要实现Web端直接播放RTSP视频流。该功能的核心目标是使得用户能够通过浏览器观看来自不同品牌的IPC（Internet Protocol Camera）设备的实时视频流。主要的IPC设备来自海康威视、大华科技以及宇视等厂商，这些设备普遍使用RTSP协议来传输视频数据。</span></p>
<ul>
<li><span style="font-size: 16px"><strong>点播视频</strong>：MP4, WebM, MKV, AVI。</span></li>
<li><span style="font-size: 16px"><strong>实时流媒体</strong>：RTMP, HLS, DASH, RTSP, WebRTC。</span></li>
<li><span style="font-size: 16px"><strong>编码格式</strong>：H.264, H.265, VP8, VP9, AV1。</span></li>
</ul>
<h2><span style="font-size: 16px">2、基于协议的视频流格式</span></h2>
<p><span style="font-size: 16px">这些格式用于实时视频传输和直播，通常用于广播、实时互动视频或流媒体平台：</span></p>
<ul>
<li>
<p><span style="font-size: 16px"><strong>RTMP (Real-Time Messaging Protocol)</strong>：</span></p>
<ul>
<li><span style="font-size: 16px">由Adobe开发，主要用于直播流媒体传输，通常结合Flash播放器使用。</span></li>
<li><span style="font-size: 16px">具有低延迟的特点，适合实时视频流和互动性强的视频。</span></li>
<li><span style="font-size: 16px"><strong>适用场景</strong>：直播平台（如Twitch、YouTube Live），实时互动视频。</span></li>
</ul>
</li>
<li>
<p><span style="font-size: 16px"><strong>HLS (HTTP Live Streaming)</strong>：</span></p>
<ul>
<li><span style="font-size: 16px">由Apple提出，基于HTTP协议，能够将视频文件分割成一系列小片段（TS文件），并通过M3U8播放列表传输。</span></li>
<li><span style="font-size: 16px">HLS支持自适应比特率，能够根据网络状况调整视频质量。</span></li>
<li><span style="font-size: 16px"><strong>适用场景</strong>：直播和点播流媒体，广泛应用于iOS和Web端（如Netflix、Hulu）。<span style="color: rgba(255, 0, 0, 1)">video.js可直接播放HLS（H264）视频流</span></span></li>
</ul>
</li>
<li>
<p><span style="font-size: 16px"><strong>DASH (Dynamic Adaptive Streaming over HTTP)</strong>：</span></p>
<ul>
<li><span style="font-size: 16px">又称MPEG-DASH，是HLS的开源替代品，支持自适应比特率流，能够根据网络条件动态调整视频质量。</span></li>
<li><span style="font-size: 16px">与HLS类似，但不依赖Apple技术，更加开放。</span></li>
<li><span style="font-size: 16px"><strong>适用场景</strong>：视频点播、直播流媒体。</span></li>
</ul>
</li>
<li>
<p><span style="font-size: 16px"><strong>RTSP (Real-Time Streaming Protocol)</strong>：</span></p>
<ul>
<li><span style="font-size: 16px">主要用于控制流媒体服务器，支持实时流传输。RTSP本身并不传输视频数据，通常结合RTP（Real-Time Transport Protocol）一起使用。</span></li>
<li><span style="font-size: 16px"><strong>适用场景</strong>：视频监控、IP摄像头、实时视频播放。</span></li>
</ul>
</li>
<li>
<p><span style="font-size: 16px"><strong>WebRTC (Web Real-Time Communication)</strong>：</span></p>
<ul>
<li><span style="font-size: 16px">主要用于浏览器之间的实时视频通话，不需要插件，直接通过WebRTC协议进行音视频流的传输。</span></li>
<li><span style="font-size: 16px"><strong>适用场景</strong>：视频会议、P2P视频通话。</span></li>
</ul>
</li>
</ul>
<h2><span style="font-size: 16px">3、直播视频编码格式</span></h2>
<p><span style="font-size: 16px">这些编码格式用于压缩视频数据，降低带宽需求，提供更好的视频质量：</span></p>
<ul>
<li>
<p><span style="font-size: 16px"><strong>H.264 (AVC, Advanced Video Coding)</strong>：</span></p>
<ul>
<li><span style="font-size: 16px">最常用的视频编码格式，广泛应用于Web视频、流媒体、高清视频录制等场景。</span></li>
<li><span style="font-size: 16px"><strong>适用场景</strong>：几乎所有的视频流和播放设备，尤其是Web视频、4K视频。</span></li>
</ul>
</li>
<li>
<p><span style="font-size: 16px"><strong>H.265 (HEVC, High Efficiency Video Coding)</strong>：</span></p>
<ul>
<li><span style="font-size: 16px">是H.264的后继者，提供比H.264更高的压缩效率，适合4K视频流和高质量视频存储。</span></li>
<li><span style="font-size: 16px">需要更高的解码能力，适用于现代硬件。</span></li>
<li><span style="font-size: 16px"><strong>适用场景</strong>：4K视频流、超高清视频、网络视频流。</span></li>
</ul>
</li>
<li>
<p><span style="font-size: 16px"><strong>VP8/VP9</strong>：</span></p>
<ul>
<li><span style="font-size: 16px">由Google推出，VP8是WebM的标准视频编码，VP9是其后继者，提供类似H.265的压缩效率。</span></li>
<li><span style="font-size: 16px"><strong>适用场景</strong>：YouTube等视频平台，尤其是需要开放格式的场景。</span></li>
</ul>
</li>
<li>
<p><span style="font-size: 16px"><strong>AV1</strong>：</span></p>
<ul>
<li><span style="font-size: 16px">开放且高效的视频编码格式，目标是提供更高的压缩效率，适用于未来的视频流和存储需求。</span></li>
<li><span style="font-size: 16px">目前的硬件支持较少，但越来越多的浏览器和平台开始支持AV1。</span></li>
<li><span style="font-size: 16px"><strong>适用场景</strong>：未来的视频流、4K及以上视频内容。</span></li>
</ul>
</li>
</ul>
<h2><span style="font-size: 16px">4、实时视频流格式</span></h2>
<p><span style="font-size: 16px">适用于需要低延迟的实时视频流，常见于直播、视频会议、IP摄像头等场景：</span></p>
<ul>
<li>
<p><span style="font-size: 16px"><strong>MJPEG (Motion JPEG)</strong>：</span></p>
<ul>
<li><span style="font-size: 16px">每一帧图像都以JPEG格式压缩，适合低延迟要求的视频流，通常用于监控和摄像头。</span></li>
<li><span style="font-size: 16px"><strong>适用场景</strong>：视频监控、IP摄像头。</span></li>
</ul>
</li>
<li>
<p><span style="font-size: 16px"><strong>VP8/VP9</strong>：</span></p>
<ul>
<li><span style="font-size: 16px">与视频流格式一样，VP8/VP9也适用于实时视频流传输，特别是在WebRTC中广泛使用。</span></li>
</ul>
</li>
</ul>
<h2><span style="font-size: 16px">5、其他协议和格式</span></h2>
<ul>
<li>
<p><span style="font-size: 16px"><strong>MPEG-2</strong>：</span></p>
<ul>
<li><span style="font-size: 16px">传统的视频流格式，广泛用于电视广播和DVD视频，虽然现在被H.264和H.265替代，但仍在某些场合使用。</span></li>
<li><span style="font-size: 16px"><strong>适用场景</strong>：电视广播、卫星电视、DVD视频播放。</span></li>
</ul>
</li>
<li>
<p><span style="font-size: 16px"><strong>SRT (Secure Reliable Transport)</strong>：</span></p>
<ul>
<li><span style="font-size: 16px">一种低延迟、安全的视频流协议，特别适用于直播内容传输，确保在不稳定的网络条件下也能保证视频质量。</span></li>
<li><span style="font-size: 16px"><strong>适用场景</strong>：实时直播、电视台直播。</span></li>
</ul>
</li>
</ul>
<h2><span style="font-size: 16px">&nbsp;6、在web上实现播放rtsp/rtmp视频流，由于浏览器不&nbsp;能自定义协议，不能直接播放，主要解决方案如下：</span></h2>
<p><strong><span style="font-size: 16px">（1）、浏览器插件方案</span></strong></p>
<p><span style="font-size: 16px">　　这种方案依赖于浏览器插件或者控件，在浏览器中播放 RTSP/RTMP 流，但这种方法存在一些局限性，尤其在移动平台上不可用。</span></p>
<h4><span style="font-size: 16px">a. <strong>VLC浏览器控件（已过期）</strong></span></h4>
<ul>
<li><span style="font-size: 16px"><strong>简介</strong>：VLC是一个开源的媒体播放器，曾经可以通过浏览器插件来播放RTSP流。</span></li>
<li><span style="font-size: 16px"><strong>缺点</strong>：VLC控件已经过时，仅支持老版本的浏览器，而且在移动端完全不支持。</span></li>
<li><span style="font-size: 16px"><strong>推荐度</strong>：不推荐，已经过时，无法满足现代Web的需求。</span></li>
</ul>
<h4><span style="font-size: 16px">b. <strong>Flash控件（已淘汰）</strong></span></h4>
<ul>
<li><span style="font-size: 16px"><strong>简介</strong>：Flash曾是Web视频流的标准，通过Flash插件可以播放RTMP流。</span></li>
<li><span style="font-size: 16px"><strong>缺点</strong>：Flash已被大多数现代浏览器淘汰，不支持移动平台，且存在安全问题。</span></li>
<li><span style="font-size: 16px"><strong>推荐度</strong>：不推荐，已经被现代浏览器废弃。</span></li>
</ul>
<h4><span style="font-size: 16px"><strong>总结</strong>：浏览器插件方案已经过时，不能满足现代Web应用的需求，不推荐在新项目中使用。</span></h4>
<p><strong><span style="font-size: 16px">（2）、中间服务器方案</span></strong></p>
<p><span style="font-size: 16px">为了在Web端播放RTSP流，通常需要通过某些中间服务进行转换或处理，以下是几种主流的方案：</span></p>
<h4><span style="font-size: 16px">a. <strong>RTSP转换为HTTP流</strong></span></h4>
<ul>
<li><span style="font-size: 16px"><strong>工作原理</strong>：在服务器端使用工具（如FFmpeg）将RTSP流转为HTTP流（如HLS、DASH等），然后通过常规的HTML5 <code>&lt;video&gt;</code> 标签进行播放。</span></li>
<li><span style="font-size: 16px"><strong>优点</strong>：</span>
<ul>
<li><span style="font-size: 16px">支持现代浏览器和移动设备（因为HLS是基于HTTP的，支持跨平台）。</span></li>
<li><span style="font-size: 16px">使用FFmpeg等工具进行流转换，广泛支持。</span></li>
</ul>
</li>
<li><span style="font-size: 16px"><strong>缺点</strong>：<strong>适用场景</strong>：播放静态的RTSP流、点播视频流。</span>
<ul>
<li><span style="font-size: 16px">转码延迟较高，实时性差，适用于点播或低延迟要求不高的场景。</span></li>
<li><span style="font-size: 16px">需要消耗较多的服务器资源进行转码。</span></li>
</ul>
</li>
</ul>
<h4><span style="font-size: 16px">b. <strong>WebRTC技术</strong></span></h4>
<ul>
<li><span style="font-size: 16px"><strong>工作原理</strong>：通过WebRTC将RTSP流转换为WebRTC流（RTSP to WebRTC），并在浏览器中播放。</span></li>
<li><span style="font-size: 16px"><strong>优点</strong>：</span>
<ul>
<li><span style="font-size: 16px">支持低延迟，适用于实时视频流（如视频会议、实时直播等）。</span></li>
<li><span style="font-size: 16px">无需插件，直接在浏览器中运行，支持现代浏览器（如Chrome、Firefox等）。</span></li>
</ul>
</li>
<li><span style="font-size: 16px"><strong>缺点</strong>：<strong>适用场景</strong>：实时视频流、低延迟直播。</span>
<ul>
<li><span style="font-size: 16px">设置复杂，需要专门的服务器和协议转换。</span></li>
<li><span style="font-size: 16px">需要较高的技术要求和服务器支持。</span></li>
</ul>
</li>
</ul>
<h4><span style="font-size: 16px">c. <strong>流媒体服务器</strong></span></h4>
<ul>
<li><span style="font-size: 16px"><strong>工作原理</strong>：使用流媒体服务器（如Nginx-RTMP、Wowza Streaming Engine等）来处理RTSP流，并通过HTTP协议（如HLS、DASH、RTMP等）转发到Web端。</span></li>
<li><span style="font-size: 16px"><strong>优点</strong>：</span>
<ul>
<li><span style="font-size: 16px">适用于大规模的流媒体分发，支持RTSP、RTMP等协议。</span></li>
<li><span style="font-size: 16px">HLS或DASH格式支持所有现代浏览器，尤其是移动设备。</span></li>
<li><span style="font-size: 16px">支持负载均衡、高可用性等企业级功能。</span></li>
</ul>
</li>
<li><span style="font-size: 16px"><strong>缺点</strong>：<strong>适用场景</strong>：大规模直播分发、点播视频</span>。
<ul>
<li><span style="font-size: 16px">需要搭建并维护流媒体服务器。</span></li>
<li><span style="font-size: 16px">服务器资源消耗较大，特别是在高并发下。</span></li>
</ul>
</li>
</ul>
<h4><span style="font-size: 16px">d. <strong>使用第三方云服务</strong></span></h4>
<ul>
<li><span style="font-size: 16px"><strong>工作原理</strong>：将RTSP流上传到云服务提供商（如AWS、Google Cloud、Alibaba Cloud等）的服务器，然后通过他们提供的API或者工具进行播放。</span></li>
<li><span style="font-size: 16px"><strong>优点</strong>：</span>
<ul>
<li><span style="font-size: 16px">省去自己搭建和维护流媒体服务器的麻烦。</span></li>
<li><span style="font-size: 16px">高可用、低延迟，支持全球分发。</span></li>
<li><span style="font-size: 16px">通常具有强大的后台分析、监控功能。</span></li>
</ul>
</li>
<li><span style="font-size: 16px"><strong>缺点</strong>：<strong>适用场景</strong>：需要稳定、高可用的视频流服务，适用于直播、实时流媒体服务。</span>
<ul>
<li><span style="font-size: 16px">成本较高，特别是在流量大的情况下。</span></li>
<li><span style="font-size: 16px">依赖第三方服务，可能存在网络延迟或服务中断的风险。</span></li>
</ul>
</li>
</ul>
<h2><span style="font-size: 16px">7、本案例使用开源项目webRTC实时播放视频流</span></h2>
<p><span style="font-size: 16px">前端页面使用vue.js+elementui框架集成（<strong><span style="color: rgba(255, 0, 0, 1)">webrtc-streamer</span><span style="color: rgba(255, 0, 0, 1)">目前rtsp视频流仅支持H264,目前不支持H265视频格式，下面有讲解另外一种模式播放H265的视频流</span></strong>）</span></p>
<p><span style="font-size: 16px">　　webrtc开源项目地址：https://github.com/mpromonet/webrtc-streamer/releases</span></p>
<p><span style="font-size: 16px"><img src="https://img2024.cnblogs.com/blog/1431659/202412/1431659-20241224115202361-624717383.jpg" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></span></p>
<p><span style="font-size: 16px">&nbsp;　　webrtc-streamer启动页面</span></p>
<p><span style="font-size: 16px"><img src="https://img2024.cnblogs.com/blog/1431659/202412/1431659-20241224115353562-105583649.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></span></p>
<p><span style="font-size: 16px">&nbsp;集成页面vue代码（组件）</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">&lt;template&gt;
    &lt;div id="video-contianer"&gt;
      &lt;<span style="color: rgba(0, 0, 0, 1)">video
        class</span>="video"<span style="color: rgba(0, 0, 0, 1)">
        ref</span>="video"<span style="color: rgba(0, 0, 0, 1)">
        preload</span>="auto"<span style="color: rgba(0, 0, 0, 1)">
        autoplay</span>="autoplay"<span style="color: rgba(0, 0, 0, 1)">
        muted
        controls
        :width</span>="width"<span style="color: rgba(0, 0, 0, 1)">
        :height</span>="height"
      /&gt;
      &lt;!-- &lt;<span style="color: rgba(0, 0, 0, 1)">div
        class</span>="mask"<span style="color: rgba(0, 0, 0, 1)">
        @click</span>="handleClickVideo"<span style="color: rgba(0, 0, 0, 1)">
        :class</span>="{ 'active-video-border': selectStatus }"
      &gt;&lt;/div&gt; --&gt;
    &lt;/div&gt;
  &lt;/template&gt;

  &lt;script&gt;<span style="color: rgba(0, 0, 0, 1)">
  import WebRtcStreamer from </span>"../../../public/webrtcstreamer"<span style="color: rgba(0, 0, 0, 1)">;
  const WEBRTC_STREAMER_URL </span>= 'http://192.168.168.194:8000'<span style="color: rgba(0, 0, 0, 1)">

  export </span><span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)"> {
    name: </span>"videoCom"<span style="color: rgba(0, 0, 0, 1)">,
    props: {
      rtsp: {
        type: String,
        required: </span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">,
      },
      isOn: {
        type: Boolean,
        </span><span style="color: rgba(0, 0, 255, 1)">default</span>: <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">,
      },
      spareId: {
        type: Number,
      },
      selectStatus: {
        type: Boolean,
        </span><span style="color: rgba(0, 0, 255, 1)">default</span>: <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">,
      },
      height: {
        type: Number,
        </span><span style="color: rgba(0, 0, 255, 1)">default</span>: 360<span style="color: rgba(0, 0, 0, 1)">,
      },
      width: {
        type: Number,
        </span><span style="color: rgba(0, 0, 255, 1)">default</span>: 440<span style="color: rgba(0, 0, 0, 1)">
      },
    },
    data() {
      </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> {
        socket: </span><span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">,
        result: </span><span style="color: rgba(0, 0, 255, 1)">null</span>, <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 返回值</span>
        pic: <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">,
        webRtcServer: </span><span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">,
        clickCount: </span>0, <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 用来计数点击次数</span>
<span style="color: rgba(0, 0, 0, 1)">      };
    },
    watch: {
      rtsp() {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> do something</span>
        console.log(<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.rtsp);
        </span><span style="color: rgba(0, 0, 255, 1)">this</span>.webRtcServer &amp;&amp; <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.webRtcServer.disconnect();
        </span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.initVideo();
      },
    },
    destroyed() {
      </span><span style="color: rgba(0, 0, 255, 1)">this</span>.webRtcServer &amp;&amp; <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.webRtcServer.disconnect();
    },
    beforeCreate() {
      window.onbeforeunload </span>= () =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
        </span><span style="color: rgba(0, 0, 255, 1)">this</span>.webRtcServer &amp;&amp; <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.webRtcServer.disconnect();
      };
    },
    created() {},
    mounted() {
      </span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.initVideo();
    },
    methods: {
      initVideo() {
        </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">连接后端的IP地址和端口</span>
          <span style="color: rgba(0, 0, 255, 1)">this</span>.webRtcServer &amp;&amp; <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.webRtcServer.disconnect();
          </span><span style="color: rgba(0, 0, 255, 1)">var</span> url =<span style="color: rgba(0, 0, 0, 1)"> WEBRTC_STREAMER_URL;
          </span><span style="color: rgba(0, 0, 255, 1)">this</span>.webRtcServer = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> WebRtcStreamer(
            </span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.$refs.video,
            url
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">此处需要改为所部署的服务器IP</span>
<span style="color: rgba(0, 0, 0, 1)">          );
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">向后端发送rtsp地址</span>
          <span style="color: rgba(0, 0, 255, 1)">this</span>.webRtcServer.connect(<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.rtsp);
        } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (error) {
          console.log(error);
        }
      },
      </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 处理双击 单机 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
      dbClick() {
        </span><span style="color: rgba(0, 0, 255, 1)">this</span>.clickCount++<span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(0, 0, 255, 1)">this</span>.clickCount === 2<span style="color: rgba(0, 0, 0, 1)">) {
          </span><span style="color: rgba(0, 0, 255, 1)">this</span>.btnFull(); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 双击全屏</span>
          <span style="color: rgba(0, 0, 255, 1)">this</span>.clickCount = 0<span style="color: rgba(0, 0, 0, 1)">;
        }
        setTimeout(() </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> {
          </span><span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(0, 0, 255, 1)">this</span>.clickCount === 1<span style="color: rgba(0, 0, 0, 1)">) {
            </span><span style="color: rgba(0, 0, 255, 1)">this</span>.clickCount = 0<span style="color: rgba(0, 0, 0, 1)">;
          }
        }, </span>250<span style="color: rgba(0, 0, 0, 1)">);
      },
      </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 视频全屏 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
      btnFull() {
        const elVideo </span>= <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.$refs.video;
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (elVideo.webkitRequestFullScreen) {
          elVideo.webkitRequestFullScreen();
        } </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (elVideo.mozRequestFullScreen) {
          elVideo.mozRequestFullScreen();
        } </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (elVideo.requestFullscreen) {
          elVideo.requestFullscreen();
        }
      },
      </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">
      ison用来判断是否需要更换视频流
      dbclick函数用来双击放大全屏方法
      </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
      handleClickVideo() {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.isOn) {
          </span><span style="color: rgba(0, 0, 255, 1)">this</span>.$emit("selectVideo", <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.spareId);
          </span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.dbClick();
        } </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
          </span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.btnFull();
        }
      },
    },
  };
  </span>&lt;/script&gt;

  &lt;style scoped lang="scss"&gt;<span style="color: rgba(0, 0, 0, 1)">
  .active</span>-video-<span style="color: rgba(0, 0, 0, 1)">border {
    border: 2px salmon solid;
  }
  #video</span>-<span style="color: rgba(0, 0, 0, 1)">contianer {
    position: relative;
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> width: 100%;</span>
    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> height: 100%;</span>
    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> .video {</span>
    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   // width: 100%;</span>
    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   // height: 100%;</span>
    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">   // object-fit: cover;</span>
    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> }</span>
<span style="color: rgba(0, 0, 0, 1)">    .mask {
      position: absolute;
      top: </span>0<span style="color: rgba(0, 0, 0, 1)">;
      left: </span>0<span style="color: rgba(0, 0, 0, 1)">;
      width: </span>100%<span style="color: rgba(0, 0, 0, 1)">;
      height: </span>100%<span style="color: rgba(0, 0, 0, 1)">;
      cursor: pointer;
    }
  }
  </span>&lt;/style&gt;</span></pre>
</div>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">&lt;Vedio rtsp="rtsp://admin:abc123456@192.168.168.168/video" :height="height" :width="width" ref="vedioSon"&gt;&lt;/Vedio&gt;</span></pre>
<div><span style="font-size: 16px">&lt;script&gt;</span></div>
<div>
<div><span style="font-size: 16px">import Vedio from "../../vedio/vedio.vue";</span></div>
<div><span style="font-size: 16px">export default {</span></div>
<div><span style="font-size: 16px">&nbsp; name: "User",</span></div>
<div><span style="font-size: 16px">&nbsp; components: {Vedio },</span></div>
<div><span style="font-size: 16px">}</span></div>
<div><span style="font-size: 16px">&lt;/srcipt&gt;</span></div>
</div>
</div>
<p><span style="font-size: 16px">注意摄像头视频编码格式H264,webrtc目前不支持H265编码格式</span></p>
<p><span style="font-size: 16px"><img src="https://img2024.cnblogs.com/blog/1431659/202412/1431659-20241224140511320-1258543296.png" alt="" loading="lazy"></span></p>
<p><span style="font-size: 16px">&nbsp;</span></p>
<p><span style="font-size: 16px"><img src="https://img2024.cnblogs.com/blog/1431659/202412/1431659-20241224140123482-9803187.png" alt="" loading="lazy"></span></p>
<h2><span style="font-size: 16px">&nbsp;8、使用<span class="mr-2 flex-self-stretch d-none d-md-block no-wrap overflow-x-hidden"><span class="mr-2 flex-self-stretch d-none d-md-block no-wrap overflow-x-hidden"><a class="d-block overflow-x-hidden color-fg-default" href="https://github.com/Janix520/EasyMedia" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" rel="noopener nofollow">EasyMedia</a>流媒体服务进行视频转码，支持H265编码格式，还可以直接将海康视频直接解码播放<br></span></span></span></h2>
<div><span style="font-size: 16px">&nbsp;github地址：https://github.com/Janix520/EasyMedia</span></div>
<div><span style="font-size: 16px">Springboot、netty实现的http-flv、websocket-flv流媒体服务（可用于直播点播），支持rtsp、h264、h265等、rtmp等多种源，h5纯js播放（不依赖flash），不需要依赖nginx等第三方，延迟大部分在1-5秒内（已经支持转复用，h264的流自动转封装，超低延迟）。</span></div>
<div><span style="font-size: 16px">播放地址：http://192.168.168.154:8866/live?url=rtsp://admin:abc123456@192.168.168.168/video</span></div>
<p><span style="font-size: 16px"><img src="https://img2024.cnblogs.com/blog/1431659/202412/1431659-20241224141830504-1834945304.png" alt="" loading="lazy"></span></p>
<p><span style="font-size: 16px">&nbsp;前端使用flv.js就能直接播放视频流，或者使用西瓜播放器（npm install xgplayer npm install xgplayer-flv）</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px"><span style="color: rgba(0, 0, 255, 1)">&lt;!</span><span style="color: rgba(255, 0, 255, 1)">DOCTYPE html</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">html </span><span style="color: rgba(255, 0, 0, 1)">lang</span><span style="color: rgba(0, 0, 255, 1)">="en"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">head</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">meta </span><span style="color: rgba(255, 0, 0, 1)">charset</span><span style="color: rgba(0, 0, 255, 1)">="UTF-8"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">meta </span><span style="color: rgba(255, 0, 0, 1)">name</span><span style="color: rgba(0, 0, 255, 1)">="viewport"</span><span style="color: rgba(255, 0, 0, 1)"> content</span><span style="color: rgba(0, 0, 255, 1)">="width=device-width, initial-scale=1.0"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">title</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>FLV.js Demo<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">title</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">script </span><span style="color: rgba(255, 0, 0, 1)">src</span><span style="color: rgba(0, 0, 255, 1)">="https://cdn.jsdelivr.net/npm/flv.js/dist/flv.min.js"</span><span style="color: rgba(0, 0, 255, 1)">&gt;&lt;/</span><span style="color: rgba(128, 0, 0, 1)">script</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">head</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">body</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">h1</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>FLV.js <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">h1</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">video </span><span style="color: rgba(255, 0, 0, 1)">id</span><span style="color: rgba(0, 0, 255, 1)">="videoElement"</span><span style="color: rgba(255, 0, 0, 1)"> controls width</span><span style="color: rgba(0, 0, 255, 1)">="640"</span><span style="color: rgba(255, 0, 0, 1)"> height</span><span style="color: rgba(0, 0, 255, 1)">="360"</span><span style="color: rgba(0, 0, 255, 1)">&gt;&lt;/</span><span style="color: rgba(128, 0, 0, 1)">video</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">script</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 检查浏览器是否支持 MSE (Media Source Extensions)</span>
    <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">if</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> (flvjs.isSupported()) {
      </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 初始化 FLV.js 播放器</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">      const videoElement </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> document.getElementById(</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">videoElement</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">);
      const flvPlayer </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> flvjs.createPlayer({
        type: </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">flv</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">,
        url: </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">ws://192.168.168.154:8866/live?url=rtsp://admin:abc123456@192.168.168.168/video</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">,
      });
      flvPlayer.attachMediaElement(videoElement);
      flvPlayer.load();
      flvPlayer.play();
    } </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">else</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> {
      alert(</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">FLV.js 不支持您的浏览器</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">);
    }
  </span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">script</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">body</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">html</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></span></pre>
</div>
<p><span style="font-size: 16px"><img src="https://img2024.cnblogs.com/blog/1431659/202412/1431659-20241224142705468-1071076415.png" alt="" width="1070" height="573" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></span></p>
<p><span style="font-size: 16px">西瓜视频播放器vue demo&nbsp;</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px"><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">template</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> 视频播放器容器 </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">div </span><span style="color: rgba(255, 0, 0, 1)">id</span><span style="color: rgba(0, 0, 255, 1)">="video-container"</span> <span style="color: rgba(0, 0, 255, 1)">/&gt;</span>
  <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">template</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

<span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">script</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 引入西瓜播放器</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">import Player from </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">xgplayer</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;
import FlvPlugin from </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">xgplayer-flv</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;
import </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">xgplayer/dist/index.min.css</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">

export </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">default</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> {
  name: </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">XGPlayerFlvComponent</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">,
  data() {
    </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">return</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> {
      player: </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">null</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 存储播放器实例</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">    };
  },
  mounted() {
    </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 初始化西瓜播放器</span>
    <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">this</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">.player </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">new</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> Player({
      id: </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">video-container</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 对应 HTML 容器的 ID</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">      url: </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">http://192.168.168.154:8866/live?url=rtsp://admin:abc123456@192.168.168.168/video</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 视频 URL</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">      poster: </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">https://lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/byted-player-videos/1.0.0/xgplayer-demo-thumbnail.jpg</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 视频封面</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">      volume: </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">0.6</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 默认音量</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">      playsinline: </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">true</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 移动端内嵌播放</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">      autoplay: </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">false</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 是否自动播放</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">      pip: </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">true</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 画中画支持</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">      keyShortcut: </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">on</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 启用快捷键</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">      playbackRate: [</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">0.5</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">1</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">1.5</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">2</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">], </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 倍速播放选项</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">      plugins: [FlvPlugin]
    });
  },
  beforeDestroy() {
    </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 销毁播放器，防止内存泄漏</span>
    <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">if</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> (</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">this</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">.player) {
      </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">this</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">.player.destroy();
      </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">this</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">.player </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">null</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;
    }
  },
};
</span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">script</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

<span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">style </span><span style="color: rgba(255, 0, 0, 1)">scoped</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(128, 0, 0, 1)">
#video-container </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">{</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(255, 0, 0, 1)">
  margin</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">:</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)"> 0 auto</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(255, 0, 0, 1)">
  display</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">:</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)"> flex</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(255, 0, 0, 1)">
  justify-content</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">:</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)"> center</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(255, 0, 0, 1)">
  align-items</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">:</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)"> center</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(255, 0, 0, 1)">
  background-color</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">:</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)"> #000</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">}</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">style</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></span></pre>
</div>
<p><span style="font-size: 16px">视频流地址测试工具VLC，万能解码器</span></p>
<p><span style="font-size: 16px"><img src="https://img2024.cnblogs.com/blog/1431659/202412/1431659-20241224143248634-1673566894.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></span></p>
<p><span style="font-size: 16px">&nbsp;</span></p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.023188018550925928" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-24 15:46">2024-12-24 14:50</span>&nbsp;
<a href="https://www.cnblogs.com/ywbmaster">yiwanbin</a>&nbsp;
阅读(<span id="post_view_count">88</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18627038" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18627038);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18627038', targetLink: 'https://www.cnblogs.com/ywbmaster/p/18627038', title: 'Web浏览器播放rtsp视频流详细解决方案' })">举报</a>
</div>
	