
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fanliang11/p/19050493" title="发布于 2025-08-21 12:39">
    <span role="heading" aria-level="2">使用surging 常见的几个问题</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h2>一、前言</h2>
<p>对于surging 存在的一些问题，在这里进行解答。</p>
<p>HttpFlv:<a href="http://demo.kayakiot.cn:281/httpflv.html" rel="noopener nofollow" target="_blank">http://demo.kayakiot.cn:281/httpflv.html</a>&nbsp; <a target="_blank">（黑衣人）</a></p>
<p>&nbsp;HttpFlv:<a href="http://demo.kayakiot.cn:281/httpflv1.html" rel="noopener nofollow" target="_blank">http://demo.kayakiot.cn:281/httpflv1.html&nbsp;</a> <a target="_blank">（大红包）</a></p>
<p>HttpFlv:<a href="http://demo.kayakiot.cn:281/httpflv2.html" rel="noopener nofollow" target="_blank">http://demo.kayakiot.cn:281/httpflv2.html&nbsp;</a> <a target="_blank">（鹿鼎记）</a></p>
<p>rtmp:<a target="_blank">rtmp://demo.kayakiot.cn:76/live1/livestream2&nbsp;&nbsp; （黑衣人）</a></p>
<p>rtmp:<a target="_blank">rtmp://demo.kayakiot.cn:76/live1/livestream3&nbsp;&nbsp; （大红包）</a></p>
<p>rtmp:<a target="_blank">rtmp://demo.kayakiot.cn:76/live1/livestream4</a><a target="_blank">（鹿鼎记）</a></p>
<p>注：测试服务器带宽只有8MB,&nbsp;httpflv&nbsp; 缓冲做的没有rtmp好，然后httpflv卡就多刷新几次</p>
<p>&nbsp; 凯亚 (Kayak) 是什么?</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 凯亚(Kayak)是基于.NET8.0软件环境下的surging微服务引擎进行开发的, 平台包含了微服务和物联网平台。支持异步和响应式编程开发，功能包含了物模型,设备,产品,网络组件的统一管理和微服务平台下的注册中心，服务路由，模块，中间服务等管理。还有多协议适配(TCP,MQTT,UDP,CoAP,HTTP,Grpc,websocket,rtmp,httpflv,webservice,等),通过灵活多样的配置适配能够接入不同厂家不同协议等设备。并且通过设备告警,消息通知,数据可视化等功能。能够让你能快速建立起微服务物联网平台系统。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp; 凯亚物联网平台：<a href="http://demo.kayakiot.cn:3100" rel="noopener nofollow" target="_blank">http://demo.kayakiot.cn:3100</a>（用户名：fanly&nbsp; 密码：123456）</p>
<p>&nbsp; &nbsp; 链路跟踪Skywalking V8:<a href="http://117.72.121.2:8080/" rel="noopener nofollow" target="_blank">http://117.72.121.2:8080/</a></p>
<p>&nbsp; &nbsp;dotnetty:<a href="https://github.com/microsurging/DotNetty" rel="noopener nofollow" target="_blank">https://github.com/microsurging/DotNetty</a></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; surging 微服务引擎开源地址：<a href="https://github.com/fanliang11/surging" rel="noopener nofollow" target="_blank">https://github.com/fanliang11/surging</a>（后面surging 会移动到<a href="https://github.com/microsurging/" rel="noopener nofollow" target="_blank">microsurging</a>进行维护）</p>
<h2>二、是否存在内存泄漏</h2>
<p>前期因为dotnetty 问题，threadpool 线程占用而得不到释放导致内存泄漏，直到程序崩溃的问题已经解决进行修复，这是修复后的<a href="https://github.com/microsurging/DotNetty" target="_blank" rel="noopener nofollow">https://github.com/microsurging/DotNetty</a>, 有人要问怎么证明呢？</p>
<p><img alt="屏幕截图 2025-08-21 002208" loading="lazy" data-src="https://img2024.cnblogs.com/blog/192878/202508/192878-20250821105918240-706991478.png" class="lazyload"></p>
<p>&nbsp;以上是凯亚(Kayak)物联网平台运行6天资源占用情况，内存占用50Mb左右，rtmp视频推流3个通道, cpu 只占用0.2%左右，配置是4核16G的，从截图来看，大家也可以对比一下，各个语言资源占用情况，所以有人说.net 8.0 性能不行，我看是他能力不行把。</p>
<h2>三、如何保证非阻塞推流</h2>
<p>1. 集群RPC推流</p>
<p>在集群情况下， 必然会有网络抖动的情况，如果不加处理就会导致整个调用链路进行阻塞，所以必然会有健康检查，再通过容错规则进行可靠性调用</p>
<p>2. 客户终端推流</p>
<p>针对于客户终端推流，会有多种情况，比如客户端抖动或者突然断网，导致发送的视频流产生堆积，内存，cpu增加，那么这个问题怎么解决呢？碰到这个问题就可以设置超时时间，超过了就把添加到不健康列表中，超过5次，就直接断开连接，就比如以下代码，推流超过200ms就会超时抛出TimeoutException异常。</p>
<div class="cnblogs_code">
<pre>&nbsp; &nbsp; public async Task AddSubscriber(IChannel channel)<br>&nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; var key = channel.RemoteAddress.ToString();<br>&nbsp; &nbsp; &nbsp; &nbsp; var promise = new DefaultPromise();<br>&nbsp; &nbsp; &nbsp; &nbsp; try<br>&nbsp; &nbsp; &nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; logger.Info($"subscriber : {channel.RemoteAddress} is added to stream :{_streamName}");<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _subscribers.GetOrAdd(channel.RemoteAddress.ToString(), p =&gt; channel);<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _avcDecoderConfigurationRecord.Timestamp = _content[0].Timestamp;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; await channel.WriteAndFlushAsync(_avcDecoderConfigurationRecord);<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var content1 = new List&lt;AbstractRtmpMediaMessage&gt;(_content);<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; foreach (var msg in content1)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; using (var cancellation = new CancellationTokenSource())<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; promise = new DefaultPromise();&nbsp;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (channel.IsActive &amp;&amp; channel.IsWritable)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; await channel.WriteAndFlushAsync(msg, promise).WithTimeout(cancellation, 200);<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; writeTimeout.TryRemove(key,out _);<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>&nbsp; &nbsp; &nbsp; &nbsp; }<br>&nbsp; &nbsp; &nbsp; &nbsp; catch (TimeoutException)<br>&nbsp; &nbsp; &nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; await HandleWriteTimeout(promise, channel, _subscribers, key);&nbsp;<br>&nbsp; &nbsp; &nbsp; &nbsp; }<br>&nbsp; &nbsp; }</pre>
</div>
<h2>四、和别的微服务有什么区别</h2>
<p>&nbsp; &nbsp; &nbsp; &nbsp;首先问这个问题，你就要了解什么是真正的微服务，如果你不了解你就会把中心化的服务治理当做微服务，还有之前宣传的什么代码侵入性作为缺点进行攻击，我就反问了，如果没有代码侵入性，怎么应对多种业务场景，怎么应对去中心化系统化部署，那么微服务必然要满足以下特征：</p>
<p>1.去中心化，架构部署存在多样性</p>
<p>如果你的系统需要依赖于第三方才能做到服务治理，那么你与微服务去中心化理念相违背，对于多种业务场景不能坦然面对,难道你要求你的客户一定要装此系统工具，不装就用不了，想必微服务不是这样的吧。</p>
<p>2.独立的服务治理</p>
<p>有的人在外层架设一层网关就是微服务，因为网关包含服务治理，那么如果服务聚合要调用多个服务，那又怎么办呢？所以必然需要独立的服务治理模块。这样才能做到系统的高内聚低耦合</p>
<p>3. 组件模块化</p>
<p>对于组件功能，应该热部署模块化，不能仅支持显示调用，应该能支持扫描热部署加载</p>
<p>4. 业务领域驱动化设计</p>
<p>一直认为领域驱动是为微服务而设计的，通过领域驱动设计就能拆分服务，所以要分清楚领域服务，仓储服务，聚合服务，这样拆分出的业务才能部署在微服务引擎中。</p>
<p>5. 协议扩展</p>
<p>在现在多种业务环境下，必然需要有扩展协议模块的功能，可以加载自定义的协议中间服务，这样才能应对现在多变的环境，比如物联网，AI</p>
<h2>五、修改默认的服务规则</h2>
<p><img alt="图片" loading="lazy" data-src="https://img2024.cnblogs.com/blog/192878/202508/192878-20250821130409308-879562454.png" class="lazyload"></p>
<p>&nbsp;如果你的并发压测上不去，请修改服务规则，比如executionTimeoutInMilliseconds，maxConcurrentRequests， 默认maxConcurrentRequests可只有20，修改可以在surgingsetting.json 里进行全局修改</p>
<h2>六、未授权的不能申请著作权</h2>
<p>没有和作者签订合同同意的，冒然违反申请微服务，微服务引擎著作权的，后果必究。</p>
<p>然后对于经过作者同意授权的，你只能对于你的产品申请著作权,不允许原封不动，未加入新的构思形成自己体系的产品申请著作权的，后果必究。</p>
<h2>七、MIT协议可以进行修改</h2>
<p>surging 是MIT协议，可以随意修改， 修改命名空间，把surging 说成是你自己开发，应聘上架构师后，这些都没关系，因为谁都要吃饭，你能吃透，回答面试官的问题，也是你的能力，但是你不能后面又来找到我来解决问题 ，这种你享受福报，我承受业力的事情，希望以后不要发生了，要不然我就要在博客园公布出来了。</p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.02013888888888889" data-date-updated="2025-08-21 13:08">2025-08-21 12:39</span>&nbsp;
<a href="https://www.cnblogs.com/fanliang11">fanly11</a>&nbsp;
阅读(<span id="post_view_count">110</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19050493);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19050493', targetLink: 'https://www.cnblogs.com/fanliang11/p/19050493', title: '使用surging 常见的几个问题' })">举报</a>
</div>
        