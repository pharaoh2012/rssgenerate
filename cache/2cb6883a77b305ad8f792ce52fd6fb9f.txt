
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/liyongqiang-cc/p/18648408" title="发布于 2025-01-16 13:37">
    <span role="heading" aria-level="2">在 ASP.NET Core WebAPI如何实现版本控制？</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在 ASP.NET Core WebAPI 中实现版本控制（Versioning）是一种常见的做法，用于管理 API 的演进和兼容性。通过版本控制，我们可以在不破坏现有客户端的情况下引入新功能或修改现有功能。以下是实现版本控制的几种常见方法：</p>
<hr>
<h3 id="1-使用-url-路径版本控制"><strong>1. 使用 URL 路径版本控制</strong></h3>
<p>将版本号嵌入到 URL 路径中，例如 <code>/api/v1/controller</code> 和 <code>/api/v2/controller</code>。</p>
<h4 id="实现步骤"><strong>实现步骤</strong></h4>
<p>安装 <code>Microsoft.AspNetCore.Mvc.Versioning</code> 包：</p>
<pre><code>dotnet&nbsp;add&nbsp;package&nbsp;Microsoft.AspNetCore.Mvc.Versioning
</code></pre>
<p>在 <code>Program.cs</code> 中配置版本控制：</p>
<pre><code>var&nbsp;builder&nbsp;=&nbsp;WebApplication.CreateBuilder(args);

builder.Services.AddControllers();
builder.Services.AddApiVersioning(options&nbsp;=&gt;
{
&nbsp;&nbsp;&nbsp;&nbsp;options.DefaultApiVersion&nbsp;=&nbsp;new&nbsp;ApiVersion(1,&nbsp;0);
&nbsp;&nbsp;&nbsp;&nbsp;options.AssumeDefaultVersionWhenUnspecified&nbsp;=&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;options.ReportApiVersions&nbsp;=&nbsp;true;
});

var&nbsp;app&nbsp;=&nbsp;builder.Build();
app.MapControllers();
app.Run();
</code></pre>
<p>在控制器中指定版本：</p>
<pre><code>[ApiController]
[ApiVersion("1.0")]
[Route("api/v{version:apiVersion}/[controller]")]
public&nbsp;class&nbsp;UsersController&nbsp;:&nbsp;ControllerBase
{
&nbsp;&nbsp;&nbsp;&nbsp;[HttpGet]
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;IActionResult&nbsp;Get()
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Ok("Version&nbsp;1.0");
&nbsp;&nbsp;&nbsp;&nbsp;}
}

[ApiController]
[ApiVersion("2.0")]
[Route("api/v{version:apiVersion}/[controller]")]
public&nbsp;class&nbsp;UsersV2Controller&nbsp;:&nbsp;ControllerBase
{
&nbsp;&nbsp;&nbsp;&nbsp;[HttpGet]
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;IActionResult&nbsp;Get()
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Ok("Version&nbsp;2.0");
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</code></pre>
<p>测试：</p>
<ul>
<li><code>/api/v1/users</code> 返回 <code>Version 1.0</code></li>
<li><code>/api/v2/users</code> 返回 <code>Version 2.0</code></li>
</ul>
<hr>
<h3 id="2-使用查询字符串版本控制"><strong>2. 使用查询字符串版本控制</strong></h3>
<p>将版本号作为查询参数传递，例如 <code>/api/users?api-version=1.0</code>。</p>
<h4 id="实现步骤-1"><strong>实现步骤</strong></h4>
<p>在 <code>Program.cs</code> 中配置版本控制：</p>
<pre><code>builder.Services.AddApiVersioning(options&nbsp;=&gt;
{
&nbsp;&nbsp;&nbsp;&nbsp;options.DefaultApiVersion&nbsp;=&nbsp;new&nbsp;ApiVersion(1,&nbsp;0);
&nbsp;&nbsp;&nbsp;&nbsp;options.AssumeDefaultVersionWhenUnspecified&nbsp;=&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;options.ReportApiVersions&nbsp;=&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;options.ApiVersionReader&nbsp;=&nbsp;new&nbsp;QueryStringApiVersionReader("api-version");
});
</code></pre>
<p>在控制器中指定版本（与 URL 路径版本控制相同）。</p>
<p>测试：</p>
<ul>
<li><code>/api/users?api-version=1.0</code> 返回 <code>Version 1.0</code></li>
<li><code>/api/users?api-version=2.0</code> 返回 <code>Version 2.0</code></li>
</ul>
<hr>
<h3 id="3-使用请求头版本控制"><strong>3. 使用请求头版本控制</strong></h3>
<p>将版本号放在 HTTP 请求头中，例如 <code>api-version: 1.0</code>。</p>
<h4 id="实现步骤-2"><strong>实现步骤</strong></h4>
<p>在 <code>Program.cs</code> 中配置版本控制：</p>
<pre><code>builder.Services.AddApiVersioning(options&nbsp;=&gt;
{
&nbsp;&nbsp;&nbsp;&nbsp;options.DefaultApiVersion&nbsp;=&nbsp;new&nbsp;ApiVersion(1,&nbsp;0);
&nbsp;&nbsp;&nbsp;&nbsp;options.AssumeDefaultVersionWhenUnspecified&nbsp;=&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;options.ReportApiVersions&nbsp;=&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;options.ApiVersionReader&nbsp;=&nbsp;new&nbsp;HeaderApiVersionReader("api-version");
});
</code></pre>
<p>在控制器中指定版本（与 URL 路径版本控制相同）。</p>
<p>测试：</p>
<ul>
<li>请求头中添加 <code>api-version: 1.0</code>，返回 <code>Version 1.0</code></li>
<li>请求头中添加 <code>api-version: 2.0</code>，返回 <code>Version 2.0</code></li>
</ul>
<hr>
<h3 id="4-使用媒体类型版本控制"><strong>4. 使用媒体类型版本控制</strong></h3>
<p>将版本号嵌入到 <code>Accept</code> 请求头中，例如 <code>application/json;v=1.0</code>。</p>
<h4 id="实现步骤-3"><strong>实现步骤</strong></h4>
<p>在 <code>Program.cs</code> 中配置版本控制：</p>
<pre><code>builder.Services.AddApiVersioning(options&nbsp;=&gt;
{
&nbsp;&nbsp;&nbsp;&nbsp;options.DefaultApiVersion&nbsp;=&nbsp;new&nbsp;ApiVersion(1,&nbsp;0);
&nbsp;&nbsp;&nbsp;&nbsp;options.AssumeDefaultVersionWhenUnspecified&nbsp;=&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;options.ReportApiVersions&nbsp;=&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;options.ApiVersionReader&nbsp;=&nbsp;new&nbsp;MediaTypeApiVersionReader("v");
});
</code></pre>
<p>在控制器中指定版本（与 URL 路径版本控制相同）。</p>
<p>测试：</p>
<ul>
<li>请求头中添加 <code>Accept: application/json;v=1.0</code>，返回 <code>Version 1.0</code></li>
<li>请求头中添加 <code>Accept: application/json;v=2.0</code>，返回 <code>Version 2.0</code></li>
</ul>
<hr>
<h3 id="5-组合多种版本控制方式"><strong>5. 组合多种版本控制方式</strong></h3>
<p>你可以同时支持多种版本控制方式，例如 URL 路径和查询字符串。</p>
<h4 id="实现步骤-4"><strong>实现步骤</strong></h4>
<p>在 <code>Program.cs</code> 中配置版本控制：</p>
<pre><code>builder.Services.AddApiVersioning(options&nbsp;=&gt;
{
&nbsp;&nbsp;&nbsp;&nbsp;options.DefaultApiVersion&nbsp;=&nbsp;new&nbsp;ApiVersion(1,&nbsp;0);
&nbsp;&nbsp;&nbsp;&nbsp;options.AssumeDefaultVersionWhenUnspecified&nbsp;=&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;options.ReportApiVersions&nbsp;=&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;options.ApiVersionReader&nbsp;=&nbsp;ApiVersionReader.Combine(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;QueryStringApiVersionReader("api-version"),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;HeaderApiVersionReader("api-version")
&nbsp;&nbsp;);
});
</code></pre>
<p>在控制器中指定版本（与 URL 路径版本控制相同）。</p>
<p>测试：</p>
<ul>
<li><code>/api/v1/users</code> 返回 <code>Version 1.0</code></li>
<li><code>/api/users?api-version=2.0</code> 返回 <code>Version 2.0</code></li>
<li>请求头中添加 <code>api-version: 3.0</code>，返回 <code>Version 3.0</code></li>
</ul>
<hr>
<h3 id="总结"><strong>总结</strong></h3>
<p>在 ASP.NET Core WebAPI 中实现版本控制的方式包括：</p>
<ol>
<li><strong>URL 路径版本控制</strong>：将版本号嵌入 URL 路径。</li>
<li><strong>查询字符串版本控制</strong>：将版本号作为查询参数传递。</li>
<li><strong>请求头版本控制</strong>：将版本号放在 HTTP 请求头中。</li>
<li><strong>媒体类型版本控制</strong>：将版本号嵌入到 <code>Accept</code> 请求头中。</li>
<li><strong>组合多种方式</strong>：同时支持多种版本控制方式。</li>
</ol>
<p>通过版本控制，我们可以更好地管理 API 的演进，确保新旧版本的兼容性，同时为客户端提供清晰的版本选择。</p>
<p><img src="https://img2024.cnblogs.com/blog/2063798/202501/2063798-20250116133829286-1863866594.png" alt="" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.8749468980868056" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-16 13:39">2025-01-16 13:37</span>&nbsp;
<a href="https://www.cnblogs.com/liyongqiang-cc">代码拾光</a>&nbsp;
阅读(<span id="post_view_count">649</span>)&nbsp;
评论(<span id="post_comment_count">4</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18648408" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18648408);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18648408', targetLink: 'https://www.cnblogs.com/liyongqiang-cc/p/18648408', title: '在 ASP.NET Core WebAPI如何实现版本控制？' })">举报</a>
</div>
        