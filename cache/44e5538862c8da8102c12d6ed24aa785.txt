
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/yuziyue/p/19027637" title="发布于 2025-08-07 22:38">
    <span role="heading" aria-level="2">Python 错误处理详解</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>Python 写代码时，错误是常有的事。为了让程序更健壮，我们需要学会如何处理这些错误。这篇文章会带你从零开始了解 Python 的错误处理。</p>
<hr>
<p>参考文章：</p>
<ul>
<li><a href="https://easyeasy.me/02cc16e/" target="_blank" rel="noopener nofollow">Python 错误处理基础 | 简单一点学习 easyeasy.me</a></li>
<li><a href="https://easyeasy.me/3ea1323/" target="_blank" rel="noopener nofollow">Python 错误处理高级编程 | 简单一点学习 easyeasy.me</a></li>
</ul>
<hr>
<ol>
<li><strong>什么是异常？</strong></li>
<li><strong>常见的 Python 异常类型</strong></li>
<li><strong>基本的 try-except 结构</strong></li>
<li><strong>捕获特定异常</strong></li>
<li><strong>使用 else 和 finally</strong></li>
<li><strong>抛出异常</strong></li>
<li><strong>自定义异常</strong></li>
<li><strong>错误处理的最佳实践</strong></li>
</ol>
<h2 id="1-什么是异常">1. 什么是异常？</h2>
<p>异常（Exception）就是程序运行时发生的错误，比如试图打开一个不存在的文件、除以零或者输入了非法数据。Python 会抛出异常来告诉你“嘿，这里出问题了！”。如果不处理，程序会直接崩溃，打印一堆错误信息（就是 traceback）。</p>
<p>异常处理的核心是用代码“捕获”这些错误，防止程序崩掉，还能给用户友好的提示。</p>
<h2 id="2-常见的-python-异常类型">2. 常见的 Python 异常类型</h2>
<p>Python 内置了很多异常类型，了解它们能帮你更好地处理问题。以下是一些常见的异常：</p>
<ul>
<li><code>ZeroDivisionError</code>：除以零时触发。</li>
<li><code>FileNotFoundError</code>：试图打开不存在的文件。</li>
<li><code>ValueError</code>：函数接收到不合适的参数，比如把字符串传给 <code>int()</code>。</li>
<li><code>TypeError</code>：类型错误，比如试图把字符串和整数相加。</li>
<li><code>IndexError</code>：列表索引超出范围。</li>
<li><code>KeyError</code>：访问字典中不存在的键。</li>
</ul>
<p>这些异常都是 Python 的内置类，继承自 <code>Exception</code> 类。你可以在代码中捕获它们。</p>
<h2 id="3-基本的-try-except-结构">3. 基本的 try-except 结构</h2>
<p>Python 用 <code>try-except</code> 块来处理异常。基本思路是：把可能出错的代码放进 <code>try</code> 块，如果出错了，就跳到 <code>except</code> 块执行。</p>
<p>来看个简单的例子：</p>
<pre><code class="language-python">try:
    num = int(input("请输入一个数字: "))
    result = 10 / num
    print(f"10 除以 {num} 等于 {result}")
except:
    print("出错了！可能输入了非法数字或除以零。")
</code></pre>
<p>运行这段代码：</p>
<ul>
<li>如果用户输入一个合法数字，比如 <code>5</code>，程序会打印 <code>10 除以 5 等于 2.0</code>。</li>
<li>如果输入了非数字（比如 <code>"abc"</code>）或 <code>0</code>，程序会跳到 <code>except</code> 块，打印错误提示，而不会崩溃。</li>
</ul>
<p>这个 <code>except</code> 是个“通吃”模式，捕获所有异常。但最好别这样用，因为你不知道具体出了啥问题。接下来我们改进它。</p>
<h2 id="4-捕获特定异常">4. 捕获特定异常</h2>
<p>与其捕获所有异常，不如只捕获你关心的特定异常类型。这样能更精准地处理问题。Python 允许在 <code>except</code> 后指定异常类型。</p>
<p>改写上面的例子：</p>
<pre><code class="language-python">try:
    num = int(input("请输入一个数字: "))
    result = 10 / num
    print(f"10 除以 {num} 等于 {result}")
except ValueError:
    print("请输入一个合法的数字！")
except ZeroDivisionError:
    print("不能除以零！")
</code></pre>
<p>现在：</p>
<ul>
<li>如果输入 <code>"abc"</code>，会触发 <code>ValueError</code>，打印“请输入一个合法的数字！”。</li>
<li>如果输入 <code>0</code>，会触发 <code>ZeroDivisionError</code>，打印“不能除以零！”。</li>
<li>其他异常（比如 <code>KeyboardInterrupt</code>）不会被捕获，程序会照常报错。</li>
</ul>
<p>你可以捕获多个异常，也可以把异常对象保存下来，查看具体错误信息：</p>
<pre><code class="language-python">try:
    num = int(input("请输入一个数字: "))
    result = 10 / num
except ValueError as e:
    print(f"输入错误: {e}")
except ZeroDivisionError as e:
    print(f"除零错误: {e}")
</code></pre>
<p>这里 <code>as e</code> 把异常对象存到变量 <code>e</code>，可以打印更详细的错误信息。</p>
<h2 id="5-使用-else-和-finally">5. 使用 else 和 finally</h2>
<p><code>try-except</code> 还有两个好用的伙伴：<code>else</code> 和 <code>finally</code>。</p>
<ul>
<li><code>else</code>：如果 <code>try</code> 块没出错，就执行 <code>else</code> 块。适合放那些依赖 <code>try</code> 块成功的代码。</li>
<li><code>finally</code>：不管 <code>try</code> 块有没有出错，<code>finally</code> 块都会执行。常用来做清理工作，比如关闭文件。</li>
</ul>
<p>来看个例子：</p>
<pre><code class="language-python">try:
    num = int(input("请输入一个数字: "))
    result = 10 / num
except ValueError:
    print("请输入合法数字！")
except ZeroDivisionError:
    print("不能除以零！")
else:
    print(f"计算成功！结果是: {result}")
finally:
    print("程序结束，清理完成！")
</code></pre>
<p>运行效果：</p>
<ul>
<li>输入 <code>5</code>：打印“计算成功！结果是: 2.0”和“程序结束，清理完成！”。</li>
<li>输入 <code>"abc"</code>：打印“请输入合法数字！”和“程序结束，清理完成！”。</li>
<li>输入 <code>0</code>：打印“不能除以零！”和“程序结束，清理完成！”。</li>
</ul>
<p><code>finally</code> 特别适合确保资源被正确释放，比如：</p>
<pre><code class="language-python">try:
    file = open("data.txt", "r")
    content = file.read()
except FileNotFoundError:
    print("文件没找到！")
else:
    print(f"文件内容: {content}")
finally:
    try:
        file.close()
        print("文件已关闭")
    except NameError:
        print("文件从未打开，无需关闭")
</code></pre>
<p>这里 <code>finally</code> 确保文件被关闭，即使文件没找到（导致 <code>file</code> 未定义）也能安全处理。</p>
<h2 id="6-抛出异常">6. 抛出异常</h2>
<p>有时候你想主动抛出异常，比如检查到用户输入不符合要求。可以用 <code>raise</code> 关键字抛出异常。</p>
<p>例子：</p>
<pre><code class="language-python">def divide(a, b):
    if b == 0:
        raise ZeroDivisionError("除数不能为零！")
    return a / b

try:
    result = divide(10, 0)
except ZeroDivisionError as e:
    print(f"错误: {e}")
</code></pre>
<p>运行会打印“错误: 除数不能为零！”。你可以用 <code>raise</code> 抛出任何内置异常，或者直接用 <code>raise Exception("自定义消息")</code>。</p>
<p>还可以“重新抛出”异常：</p>
<pre><code class="language-python">try:
    num = int(input("请输入一个数字: "))
except ValueError as e:
    print(f"输入错误: {e}")
    raise  # 重新抛出原异常
</code></pre>
<p>这样会在处理完错误后，继续把异常抛给上层调用者。</p>
<h2 id="7-自定义异常">7. 自定义异常</h2>
<p>当内置异常不够用时，你可以定义自己的异常类。自定义异常通常继承自 <code>Exception</code> 类。</p>
<p>例子：</p>
<pre><code class="language-python">class CustomValueError(Exception):
    """自定义异常，用于值不符合要求"""
    pass

def check_age(age):
    if age &lt; 0 or age &gt; 150:
        raise CustomValueError("年龄必须在0到150之间！")
    return age

try:
    age = check_age(200)
except CustomValueError as e:
    print(f"错误: {e}")
</code></pre>
<p>运行会打印“错误: 年龄必须在0到150之间！”。自定义异常让代码更清晰，尤其在复杂项目中。</p>
<h2 id="8-错误处理的最佳实践">8. 错误处理的最佳实践</h2>
<p>最后，分享一些写错误处理代码的建议：</p>
<ol>
<li><strong>捕获特定异常</strong>：别用“通吃”的 <code>except</code>，尽量指定具体的异常类型。</li>
<li><strong>提供清晰的错误信息</strong>：用户看到错误时，应该知道问题出在哪，怎么解决。</li>
<li><strong>用 else 和 finally 合理组织代码</strong>：<code>else</code> 放依赖 <code>try</code> 成功的逻辑，<code>finally</code> 放清理工作。</li>
<li><strong>别滥用异常</strong>：异常是用来处理“异常情况”的，别用它来控制正常流程（比如代替 <code>if</code> 判断）。</li>
<li><strong>记录错误日志</strong>：在实际项目中，用 <code>logging</code> 模块记录异常，方便调试。</li>
</ol>
<p>例子（带日志）：</p>
<pre><code class="language-python">import logging

logging.basicConfig(level=logging.ERROR, filename="app.log")

try:
    num = int(input("请输入一个数字: "))
    result = 10 / num
except ValueError as e:
    logging.error(f"输入错误: {e}")
    print("请输入合法数字！")
except ZeroDivisionError as e:
    logging.error(f"除零错误: {e}")
    print("不能除以零！")
else:
    print(f"结果: {result}")
finally:
    print("程序结束！")
</code></pre>
<p>这个例子会把错误记录到 <code>app.log</code> 文件，方便排查问题。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-07 22:39">2025-08-07 22:38</span>&nbsp;
<a href="https://www.cnblogs.com/yuziyue">余子越的博客</a>&nbsp;
阅读(<span id="post_view_count">45</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19027637);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19027637', targetLink: 'https://www.cnblogs.com/yuziyue/p/19027637', title: 'Python 错误处理详解' })">举报</a>
</div>
        