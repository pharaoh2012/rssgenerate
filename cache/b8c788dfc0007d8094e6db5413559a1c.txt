
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zhaloe/p/18919770" title="发布于 2025-06-10 22:13">
    <span role="heading" aria-level="2">ArkUI-X与Android桥接通信之方法回调</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>平台桥接用于客户端（ArkUI）和平台（Android或iOS）之间传递消息，即用于ArkUI与平台双向数据传递、ArkUI侧调用平台的方法、平台调用ArkUI侧的方法。本文主要介绍Android平台与ArkUI交互，ArkUI侧具体用法请参考Bridge API，Android侧参考BridgePlugin。</p>
<h2 id="arkui侧调用android侧的方法">ArkUI侧调用Android侧的方法</h2>
<p>1.在ArkUI侧调用Android侧的方法。</p>
<pre><code class="language-typescript">// xxx.ets

private bridgeImpl = bridge.createBridge('Bridge');

this.bridgeImpl.callMethod('platformCallMethod').then((res)=&gt;{
    console.log('result: ' + res);
}).catch((err: Error) =&gt; {
    console.error('error: ' + JSON.stringify(err));
});
</code></pre>
<p>2.在Android侧实现被调用的方法。</p>
<pre><code class="language-java">// xxx.java

public String platformCallMethod() {
  return "call java platformCallMethod success";
}
</code></pre>
<h2 id="android侧调用arkui侧的方法">Android侧调用ArkUI侧的方法</h2>
<p>1.注册ArkUI侧方法，供Android侧调用。</p>
<pre><code class="language-typescript">// xxx.ets

private bridgeImpl = bridge.createBridge('Bridge');
private getString() : bridge.ResultValue {
    return 'call js getString success';
}

this.bridgeImpl.registerMethod({ name: 'getString', method: this.getString });
</code></pre>
<p>2.Android侧调用ArkUI侧的方法。</p>
<pre><code class="language-java">// 方式一: 构造ArkUI侧方法描述对象实例调用
Object[] paramObject = {};
MethodData methodData = new MethodData("getString", paramObject);
bridge.callMethod(methodData);
// 方式二: ArkUI侧函数名加ArkUI侧方法形参对应的实参调用
bridge.callMethod("getString");
</code></pre>
<h2 id="arkui侧监听android侧的方法">ArkUI侧监听Android侧的方法</h2>
<p>1.注册ArkUI侧方法，供Android侧调用。</p>
<pre><code class="language-typescript">// xxx.ets

private bridgeImpl = bridge.createBridge('Bridge');
private getString() : bridge.ResultValue {
    return 'call js getString success';
}

this.bridgeImpl.registerMethod({ name: 'getString', method: this.getString });
</code></pre>
<p>2.移除已注册的ArkUI侧方法。</p>
<pre><code class="language-typescript">// xxx.ets

bridgeImpl.unRegisterMethod('getString');
</code></pre>
<p>3.在Android侧注册回调，监听方法注册、注销。</p>
<pre><code class="language-java">// xxx.java

public Bridge(Context context, String name, int id) {
    super(context, name, id);
}

public Bridge(Context context, String name, BridgeManager bridgeManager) {
    super(context, name, bridgeManager);
    setMethodResultListener(this);
}

@Override
public void onSuccess(Object o) {}

@Override
public void onError(String s, int i, String s1) {}

@Override
public void onMethodCancel(String s) {}
</code></pre>
<h2 id="arkui侧注册callback且调用android侧的方法无参">ArkUI侧注册callBack且调用Android侧的方法（无参）</h2>
<p>1.在ArkUI侧注册callBack且调用Android侧的方法。</p>
<pre><code class="language-typescript">// xxx.ets
function testCallBackOfJs() {
  console.log("bridge js testCallBackOfJs run")
}

this.bridgeCodec.callMethodWithCallBack("testCallBack", testCallBackOfJs).then((res)=&gt;{
    console.log('result: ' + res);
}).catch((err) =&gt; {
    console.error('error: ' + JSON.stringify(err));
});
</code></pre>
<p>2.在Android侧实现被调用的方法，调用ArkUI侧的方法。</p>
<pre><code class="language-java">// xxx.java

public String testCallBack() {
  return "call android testCallBack success";
}

Object[] paramObject = {};
MethodData methodData = new MethodData("testCallBack", paramObject);
bridge.callMethod(methodData);
</code></pre>
<h2 id="arkui侧注册callback且调用android侧的方法有参">ArkUI侧注册callBack且调用Android侧的方法（有参）</h2>
<p>1.在ArkUI侧注册callBack且调用Android侧的方法。</p>
<pre><code class="language-typescript">// xxx.ets
function testCallBackOfJs(stringParam) {
  console.log("Js received a parameter of " + stringParam)
  return "js testCallBackReturn call success."
}

this.bridgeCodec.callMethodWithCallBack("testCallBack", testCallBackOfJs, "js sends parameter").then((res)=&gt;{
    console.log('result: ' + res);
}).catch((err) =&gt; {
    console.error('error: ' + JSON.stringify(err));
});
</code></pre>
<p>2.在Android侧实现被调用的方法，调用ArkUI侧的方法。</p>
<pre><code class="language-java">// xxx.java

public String testCallBack(String sParam) {
	ALog.i("Android received a parameter of ", sParam);
    return "call android testCallBack success";
}

Object[] paramObject = {"android sends parameter"};
MethodData methodData = new MethodData("testCallBack", paramObject);
bridge.callMethod(methodData);
</code></pre>
<h2 id="callmethod不同数据类型">callMethod不同数据类型</h2>
<pre><code class="language-typescript">import bridge from '@arkui-x.bridge'

@Entry
@Component
struct Index {
  @State bridgeImpl: bridge.BridgeObject = bridge.createBridge("BridgeName");

  private funTest(p1: string, p2: number, p3: boolean) : bridge.ResultValue {
    console.info('Java-&gt;Ts bridge funTest p1 is ' + p1);
    console.info('Java-&gt;Ts bridge funTest p2 is ' + p2);
    console.info('Java-&gt;Ts bridge funTest p3 is ' + p3);
    return "call success"
  }

  private funTestArray(p1: Array&lt;string&gt;, p2: Array&lt;number&gt;, p3: Array&lt;boolean&gt;) : bridge.ResultValue {
    console.log('Java-&gt;Ts bridge funTestArray p1 is ' + p1.toString());
    console.log('Java-&gt;Ts bridge funTestArray p2 is ' + p2.toString());
    console.log('Java-&gt;Ts bridge funTestArray p3 is ' + p3.toString());
    return "call success"
  }

  private funTestRecord(p1: Record&lt;string, string&gt;, p2: Record&lt;string, number&gt;, p3: Record&lt;string, boolean&gt;) : bridge.ResultValue {
    console.log('Java-&gt;Ts bridge funTestRecord p1 is ' + p1.toString());
    console.log('Java-&gt;Ts bridge funTestRecord p2 is ' + p2.toString());
    console.log('Java-&gt;Ts bridge funTestRecord p3 is ' + p3.toString());
    return "call success"
  }

  onPageShow() {
    // Register ArkUI侧 functions
    this.bridgeImpl.registerMethod({name: "funTest", method: this.funTest});
    this.bridgeImpl.registerMethod({name: "funTestArray", method: this.funTestArray});
    this.bridgeImpl.registerMethod({name: "funTestRecord", method: this.funTestRecord});
  }

  build() {
    Row() {
      Column() {
          
      }
      .width('100%')
    }
    .height('100%')
  }
}
</code></pre>
<pre><code class="language-java">// EntryEntryAbilityActivity.java
package com.example.androidTestDemo;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;

import java.util.HashMap;
import java.util.Map;

import ohos.ace.adapter.capability.bridge.BridgePlugin;
import ohos.ace.adapter.capability.bridge.MethodData;
import ohos.stage.ability.adapter.StageActivity;

public class EntryEntryAbilityActivity extends StageActivity {
    private BridgeImpl bridgeImpl = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        bridgeImpl = new BridgeImpl(this, "BridgeName", getBridgeManager());
        setInstanceName("com.example.basebridge:entry:EntryAbility:");
        super.onCreate(savedInstanceState);
        // 显示应用程序界面布局(在项目的 res/layout 目录下，添加main_activity.xml文件)
        setContentView(R.layout.main_activity);
        // 注册按钮
        testCallMethod1();
        testCallMethod2();
        testCallMethod3();
    }
    
    public void testCallMethod1() {
        // 使用button按钮点击，发送信息。
        Button button = (Button) findViewById(R.id.TestCallMethod1);
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // 定义对象数组，存放ArkUI侧方法形参对应的实参
                Object[] paramObject = { "param1", 1, true};
                // 方式一: 构造ArkUI侧方法描述对象实例调用
                MethodData methodData = new MethodData("funTest", paramObject);
                bridgeImpl.callMethod(methodData);
                // 方式二: ArkUI侧函数名加ArkUI侧方法形参对应的实参调用
                bridgeImpl.callMethod("funTest", "param1", 1, true);
            }
        });
    }
    public void testCallMethod2() {
        // 使用button按钮点击，发送信息。
        Button button = (Button) findViewById(R.id.TestCallMethod2);
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // 定义对象数组，存放ArkUI侧方法形参对应的实参
                String[] sArray = {"hello", "world"};
                int[] iArray = {123, 456};
                boolean[] bArray = {true, false};
                Object[] paramObject = {sArray, iArray, bArray};
                // 方式一: 构造ArkUI侧方法描述对象实例调用
                MethodData methodData = new MethodData("funTestArray", paramObject);
                bridgeImpl.callMethod(methodData);
                // 方式二: ArkUI侧函数名加ArkUI侧方法形参对应的实参调用
                bridgeImpl.callMethod("funTestArray", sArray, iArray, bArray);
            }
        });
    }
    public void testCallMethod3() {
        // 使用button按钮点击，发送信息。
        Button button = (Button) findViewById(R.id.TestCallMethod3);
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // 定义对象数组，存放ArkUI侧方法形参对应的实参
                Map&lt;String, String&gt; map1 = new HashMap&lt;&gt;();
                map1.put("one", "hello");
                map1.put("two", "world");
                Map&lt;String, Integer&gt; map2 = new HashMap&lt;&gt;();
                map2.put("one", 1);
                map2.put("two", 2);
                Map&lt;String, Boolean&gt; map3 = new HashMap&lt;&gt;();
                map3.put("one", true);
                map3.put("two", false);

                Object[] paramObject = {map1, map2, map3};
                // 方式一: 构造ArkUI侧方法描述对象实例调用
                MethodData methodData = new MethodData("funTestRecord", paramObject);
                bridgeImpl.callMethod(methodData);
                // 方式二: ArkUI侧函数名加ArkUI侧方法形参对应的实参调用
                bridgeImpl.callMethod("funTestRecord", map1, map2, map3);
            }
        });
    }
}
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-10 22:14">2025-06-10 22:13</span>&nbsp;
<a href="https://www.cnblogs.com/zhaloe">龙儿筝</a>&nbsp;
阅读(<span id="post_view_count">7</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18919770);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18919770', targetLink: 'https://www.cnblogs.com/zhaloe/p/18919770', title: 'ArkUI-X与Android桥接通信之方法回调' })">举报</a>
</div>
        