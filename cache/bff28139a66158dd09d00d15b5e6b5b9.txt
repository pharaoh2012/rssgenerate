
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mingupupu/p/18724899" title="发布于 2025-02-19 18:11">
    <span role="heading" aria-level="2">使用crewai创建属于你自己的AI团队</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 class="md-end-block md-heading md-focus"><span class="md-plain md-expand">crewai介绍</span></h2>
<p class="md-end-block md-p"><span class="md-pair-s"><strong>CrewAI 是一个用于协调自主 AI 代理的前沿框架。</strong></span></p>
<p class="md-end-block md-p"><span class="md-plain">CrewAI 允许你创建 AI 团队，其中每个代理都有特定的角色、工具和目标，协同工作以完成复杂任务。</span></p>
<p class="md-end-block md-p"><span class="md-plain">把它想象成组建你的梦之队——每个成员（代理）都带来独特的技能和专业知识，无缝协作以实现你的目标。</span></p>
<p class="md-end-block md-p"><span class="md-plain">最近使用了crewai这个框架，我觉得是一个比较好用的AI Agent框架，因此推荐给大家。</span></p>
<p class="md-end-block md-p"><span class="md-plain">在crewai中涵盖了<span class="md-pair-s "><strong>Agents</strong><span class="md-plain">、<span class="md-pair-s "><strong>Tasks</strong><span class="md-plain">、<span class="md-pair-s "><strong>Crews</strong><span class="md-plain">、<span class="md-pair-s "><strong>Flows</strong><span class="md-plain">、<span class="md-pair-s "><strong>Knowledge</strong><span class="md-plain">、<span class="md-pair-s "><strong>LLMs</strong><span class="md-plain">与<span class="md-pair-s"><strong>Tools</strong><span class="md-plain">等这些核心概念。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">接下来我将以一个具体的例子，介绍一下crewai的使用。</span></p>
<p class="md-end-block md-p"><span class="md-plain">crewai的GitHub地址为：<span class="md-link md-pair-s"><a href="https://github.com/crewAIInc/crewAI" rel="noopener nofollow">https://github.com/crewAIInc/crewAI</a></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250219181057121-551147227.png"><img src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250219181057121-551147227.png" alt="image-20250219164001573"></span></p>
<h2 class="md-end-block md-heading"><span class="md-plain">使用crewai构建一个翻译代理</span></h2>
<p class="md-end-block md-p"><span class="md-plain">创建一个python虚拟环境，安装crewai与crewai-tools。</span></p>
<p class="md-end-block md-p"><span class="md-plain">运行命令：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>crewai create crew translation_agent</span></pre>
<p class="md-end-block md-p"><span class="md-plain">会出现一个模板项目。</span></p>
<p class="md-end-block md-p"><span class="md-plain">在config目录下，使用yaml配置agent与task：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250219181057167-1945861744.png"><img src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250219181057167-1945861744.png" alt="image-20250219164418938"></span></p>
<p class="md-end-block md-p"><span class="md-plain">先来设置一下代理：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-atom">file_reader<span class="cm-meta">:<br><span><span class="cm-atom">  role<span class="cm-meta">: &gt;<br><span><span class="cm-string"> &nbsp;  读取文件代理<br><span><span class="cm-atom">  goal<span class="cm-meta">: &gt;<br><span><span class="cm-string"> &nbsp;  根据文件路径，读取文件内容<br><span><span class="cm-atom">  backstory<span class="cm-meta">: &gt;<br><span><span class="cm-string"> &nbsp;  你是一个文件读取代理，你的任务是根据文件路径，读取文件内容<br><span><span>​<br><span><span class="cm-atom">translation_agent<span class="cm-meta">:<br><span><span class="cm-atom">  role<span class="cm-meta">: &gt;<br><span><span class="cm-string"> &nbsp;  翻译代理<br><span><span class="cm-atom">  goal<span class="cm-meta">: &gt;<br><span><span class="cm-string"> &nbsp;  根据用户需求翻译文本<br><span><span class="cm-atom">  backstory<span class="cm-meta">: &gt;<br><span><span class="cm-string"> &nbsp;  你是一个翻译代理，你的任务是根据用户需求翻译文本<br><span><span>​<br><span><span class="cm-atom">file_saver<span class="cm-meta">:<br><span><span class="cm-atom">  role<span class="cm-meta">: &gt;<br><span><span class="cm-string"> &nbsp;  文件保存代理<br><span><span class="cm-atom">  goal<span class="cm-meta">: &gt;<br><span><span class="cm-string"> &nbsp;  根据用户需求保存文件<br><span><span class="cm-atom">  backstory<span class="cm-meta">: &gt;<br><span><span class="cm-string"> &nbsp;  你是一个文件保存代理，你的任务是根据用户需求保存文件</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">在这里设置了三个代理，分别是读取文件代理、翻译代理与文件保存代理。</span></p>
<p class="md-end-block md-p"><span class="md-plain">再来配置一下task：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-atom">file_read_task<span class="cm-meta">:<br><span><span class="cm-atom">  description<span class="cm-meta">: &gt;<br><span><span class="cm-string"> &nbsp;  根据用户需求：{question}<br><span><span class="cm-string"> &nbsp;  获取需要读取的文件路径<br><span><span class="cm-string"> &nbsp;  使用工具读取文件内容<br><span><span class="cm-atom">  expected_output<span class="cm-meta">: &gt;<br><span><span class="cm-string"> &nbsp;  返回文件内容<br><span><span class="cm-atom">  agent<span class="cm-meta">: file_reader<br><span><span>​<br><span><span class="cm-atom">translation_task<span class="cm-meta">:<br><span><span class="cm-atom">  description<span class="cm-meta">: &gt;<br><span><span class="cm-string"> &nbsp;  根据file_reader获取的文件内容，将文本翻译成英文<br><span><span class="cm-atom">  expected_output<span class="cm-meta">: &gt;<br><span><span class="cm-string"> &nbsp;  返回翻译后的文本内容<br><span><span class="cm-atom">  agent<span class="cm-meta">: translation_agent<br><span><span>​<br><span><span class="cm-atom">file_save_task<span class="cm-meta">:<br><span><span class="cm-atom">  description<span class="cm-meta">: &gt;<br><span><span class="cm-string"> &nbsp; 根据用户需求：{question}提取出需要保存到的文件路径及相关信息<br><span><span class="cm-string"> &nbsp; 将translation_agent的翻译内容，保存至指定文件<br><span><span class="cm-atom">  expected_output<span class="cm-meta">: &gt;<br><span><span class="cm-string"> &nbsp;  返回保存结果<br><span><span class="cm-atom">  agent<span class="cm-meta">: file_saver</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">设置了三个任务，分别是file_read_task、translation_task与file_save_task。</span></p>
<p class="md-end-block md-p"><span class="md-plain">完成这些任务，需要代理能够使用读取文件与保存文件的工具。</span></p>
<p class="md-end-block md-p"><span class="md-plain">在tools目录下可以写工具代码：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250219181057103-1003195230.png"><img src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250219181057103-1003195230.png" alt="image-20250219165027457"></span></p>
<p class="md-end-block md-p"><span class="md-plain">file_read_tool工具代码：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-keyword">from <span class="cm-variable">typing <span class="cm-keyword">import <span class="cm-variable">Any, <span class="cm-variable">Optional, <span class="cm-variable">Type<br><span><span>​<br><span><span class="cm-keyword">from <span class="cm-variable">crewai.<span class="cm-property">tools <span class="cm-keyword">import <span class="cm-variable">BaseTool<br><span><span class="cm-keyword">from <span class="cm-variable">pydantic <span class="cm-keyword">import <span class="cm-variable">BaseModel, <span class="cm-variable">Field<br><span><span>​<br><span><span>​<br><span><span class="cm-keyword">class <span class="cm-def">FileReadToolSchema(<span class="cm-variable">BaseModel):<br><span> &nbsp; &nbsp;<span class="cm-string">"""Input for FileReadTool."""<br><span><span>​<br><span> &nbsp; &nbsp;<span class="cm-comment"># Mandatory file full path to read the file<br><span> &nbsp; &nbsp;<span class="cm-comment"># 必须的文件全路径，以读取文件<br><span> &nbsp; &nbsp;<span class="cm-variable">file_path: <span class="cm-builtin">str <span class="cm-operator">= <span class="cm-variable">Field(<span class="cm-operator">..., <span class="cm-variable">description<span class="cm-operator">=<span class="cm-string">"Mandatory file full path to read the file")<br><span><span>​<br><span><span>​<br><span><span class="cm-keyword">class <span class="cm-def">FileReadTool(<span class="cm-variable">BaseTool):<br><span> &nbsp; &nbsp;<span class="cm-string">"""A tool for reading file contents.<br><span><span>​<br><span><span class="cm-string"> &nbsp;  This tool inherits its schema handling from BaseTool to avoid recursive schema<br><span><span class="cm-string"> &nbsp;  definition issues. The args_schema is set to FileReadToolSchema which defines<br><span><span class="cm-string"> &nbsp;  the required file_path parameter. The schema should not be overridden in the<br><span><span class="cm-string"> &nbsp;  constructor as it would break the inheritance chain and cause infinite loops.<br><span><span>​<br><span><span class="cm-string"> &nbsp;  The tool supports two ways of specifying the file path:<br><span><span class="cm-string"> &nbsp;  1. At construction time via the file_path parameter<br><span><span class="cm-string"> &nbsp;  2. At runtime via the file_path parameter in the tool's input<br><span><span>​<br><span><span class="cm-string"> &nbsp;  Args:<br><span><span class="cm-string"> &nbsp; &nbsp; &nbsp;  file_path (Optional[str]): Path to the file to be read. If provided,<br><span><span class="cm-string"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  this becomes the default file path for the tool.<br><span><span class="cm-string"> &nbsp; &nbsp; &nbsp;  **kwargs: Additional keyword arguments passed to BaseTool.<br><span><span>​<br><span><span class="cm-string"> &nbsp;  Example:<br><span><span class="cm-string"> &nbsp; &nbsp; &nbsp;  &gt;&gt;&gt; tool = FileReadTool(file_path="/path/to/file.txt")<br><span><span class="cm-string"> &nbsp; &nbsp; &nbsp;  &gt;&gt;&gt; content = tool.run()  # Reads /path/to/file.txt<br><span><span class="cm-string"> &nbsp; &nbsp; &nbsp;  &gt;&gt;&gt; content = tool.run(file_path="/path/to/other.txt")  # Reads other.txt<br><span><span>​<br><span><span class="cm-string"> &nbsp;  用于读取文件内容的工具。<br><span><span>​<br><span><span class="cm-string"> &nbsp;  该工具继承自 BaseTool 的 schema 处理，以避免递归 schema 定义问题。args_schema 设置为 FileReadToolSchema，定义了必需的 file_path 参数。构造函数中不应该覆盖 schema，否则会破坏继承链并导致无限循环。<br><span><span>​<br><span><span class="cm-string"> &nbsp;  该工具支持两种指定文件路径的方法：<br><span><span>​<br><span><span class="cm-string"> &nbsp;  在构造时通过 file_path 参数<br><span><span class="cm-string"> &nbsp;  在运行时通过工具的输入参数 file_path<br><span><span>​<br><span><span class="cm-string"> &nbsp;  参数：<br><span><span class="cm-string"> &nbsp;  file_path (可选[str]): 要读取的文件路径。如果提供，则成为工具的默认文件路径。<br><span><span class="cm-string"> &nbsp;  **kwargs: 传递给 BaseTool 的其他关键字参数。<br><span><span>​<br><span><span class="cm-string"> &nbsp;  示例：<br><span><span class="cm-string"> &nbsp;  &gt;&gt;&gt; tool = FileReadTool(file_path="/path/to/file.txt")<br><span><span class="cm-string"> &nbsp;  &gt;&gt;&gt; content = tool.run()  # 读取 /path/to/file.txt<br><span><span class="cm-string"> &nbsp;  &gt;&gt;&gt; content = tool.run(file_path="/path/to/other.txt")  # 读取 other.txt<br><span><span class="cm-string"> &nbsp;  """<br><span><span>​<br><span> &nbsp; &nbsp;<span class="cm-variable">name: <span class="cm-builtin">str <span class="cm-operator">= <span class="cm-string">"Read a file's content"<br><span> &nbsp; &nbsp;<span class="cm-variable">description: <span class="cm-builtin">str <span class="cm-operator">= <span class="cm-string">"A tool that reads the content of a file. To use this tool, provide a 'file_path' parameter with the path to the file you want to read."<br><span> &nbsp; &nbsp;<span class="cm-variable">args_schema: <span class="cm-variable">Type[<span class="cm-variable">BaseModel] <span class="cm-operator">= <span class="cm-variable">FileReadToolSchema<br><span> &nbsp; &nbsp;<span class="cm-variable">file_path: <span class="cm-variable">Optional[<span class="cm-builtin">str] <span class="cm-operator">= <span class="cm-keyword">None<br><span><span>​<br><span> &nbsp; &nbsp;<span class="cm-keyword">def <span class="cm-def">__init__(<span class="cm-variable-2">self, <span class="cm-variable">file_path: <span class="cm-variable">Optional[<span class="cm-builtin">str] <span class="cm-operator">= <span class="cm-keyword">None, <span class="cm-operator">**<span class="cm-variable">kwargs: <span class="cm-variable">Any) <span class="cm-operator">-&gt; <span class="cm-keyword">None:<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"""<br><span><span class="cm-string"> &nbsp; &nbsp; &nbsp;  Initialize the FileReadTool.<br><span><span>​<br><span><span class="cm-string"> &nbsp; &nbsp; &nbsp;  Args:<br><span><span class="cm-string"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  file_path (Optional[str]): Path to the file to be read. If provided,<br><span><span class="cm-string"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  this becomes the default file path for the tool.<br><span><span class="cm-string"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  **kwargs: Additional keyword arguments passed to BaseTool.<br><span><span>​<br><span><span class="cm-string"> &nbsp; &nbsp; &nbsp;  初始化 FileReadTool。<br><span><span>​<br><span><span class="cm-string"> &nbsp; &nbsp; &nbsp;  参数：<br><span><span class="cm-string"> &nbsp; &nbsp; &nbsp;  file_path（可选[str]）：要读取的文件路径。如果提供，则此路径成为工具的默认文件路径。<br><span><span class="cm-string"> &nbsp; &nbsp; &nbsp;  **kwargs：传递给 BaseTool 的其他关键字参数。<br><span><span class="cm-string"> &nbsp; &nbsp; &nbsp;  """<br><span><span>​<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">if <span class="cm-variable">file_path <span class="cm-keyword">is <span class="cm-keyword">not <span class="cm-keyword">None:<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">kwargs[<span class="cm-string">'description'] <span class="cm-operator">= <span class="cm-string">f"A tool that reads file content. The default file is {<span class="cm-variable">file_path}<span class="cm-string">, but you can provide a different 'file_path' parameter to read another file."<br><span><span>​<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-builtin">super().<span class="cm-property">__init__(<span class="cm-operator">**<span class="cm-variable">kwargs)<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-2">self.<span class="cm-property">file_path <span class="cm-operator">= <span class="cm-variable">file_path<br><span><span>​<br><span> &nbsp; &nbsp;<span class="cm-keyword">def <span class="cm-def">_run(<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-2">self,<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-operator">**<span class="cm-variable">kwargs: <span class="cm-variable">Any,<br><span> &nbsp;  ) <span class="cm-operator">-&gt; <span class="cm-builtin">str:<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">file_path <span class="cm-operator">= <span class="cm-variable">kwargs.<span class="cm-property">get(<span class="cm-string">"file_path", <span class="cm-variable-2">self.<span class="cm-property">file_path)<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">if <span class="cm-variable">file_path <span class="cm-keyword">is <span class="cm-keyword">None:<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return <span class="cm-string">"Error: No file path provided. Please provide a file path either in the constructor or as an argument."<br><span><span>​<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">try:<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">with <span class="cm-builtin">open(<span class="cm-variable">file_path, <span class="cm-string">"r",<span class="cm-variable">encoding<span class="cm-operator">=<span class="cm-string">'utf-8') <span class="cm-keyword">as <span class="cm-variable">file:<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return <span class="cm-variable">file.<span class="cm-property">read()<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">except <span class="cm-variable">FileNotFoundError:<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return <span class="cm-string">f"Error: File not found at path: {<span class="cm-variable">file_path}<span class="cm-string">"<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">except <span class="cm-variable">PermissionError:<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return <span class="cm-string">f"Error: Permission denied when trying to read file: {<span class="cm-variable">file_path}<span class="cm-string">"<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">except <span class="cm-variable">Exception <span class="cm-keyword">as <span class="cm-variable">e:<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return <span class="cm-string">f"Error: Failed to read file {<span class="cm-variable">file_path}<span class="cm-string">. {<span class="cm-builtin">str(<span class="cm-variable">e)}<span class="cm-string">"</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">file_writer_tool工具代码：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-keyword">import <span class="cm-variable">os<br><span><span class="cm-keyword">from <span class="cm-variable">ast <span class="cm-keyword">import <span class="cm-variable">literal_eval<br><span><span class="cm-keyword">from <span class="cm-variable">typing <span class="cm-keyword">import <span class="cm-variable">Any, <span class="cm-variable">Optional, <span class="cm-variable">Type<br><span><span>​<br><span><span class="cm-keyword">from <span class="cm-variable">crewai.<span class="cm-property">tools <span class="cm-keyword">import <span class="cm-variable">BaseTool<br><span><span class="cm-keyword">from <span class="cm-variable">pydantic <span class="cm-keyword">import <span class="cm-variable">BaseModel<br><span><span>​<br><span><span>​<br><span><span class="cm-keyword">class <span class="cm-def">FileWriterToolInput(<span class="cm-variable">BaseModel):<br><span> &nbsp; &nbsp;<span class="cm-variable">filename: <span class="cm-builtin">str<br><span> &nbsp; &nbsp;<span class="cm-variable">directory: <span class="cm-variable">Optional[<span class="cm-builtin">str] <span class="cm-operator">= <span class="cm-string">"./"<br><span> &nbsp; &nbsp;<span class="cm-variable">overwrite: <span class="cm-builtin">str <span class="cm-operator">= <span class="cm-string">"False"<br><span> &nbsp; &nbsp;<span class="cm-variable">content: <span class="cm-builtin">str<br><span><span>​<br><span><span>​<br><span><span class="cm-keyword">class <span class="cm-def">FileWriterTool(<span class="cm-variable">BaseTool):<br><span> &nbsp; &nbsp;<span class="cm-variable">name: <span class="cm-builtin">str <span class="cm-operator">= <span class="cm-string">"File Writer Tool"<br><span> &nbsp; &nbsp;<span class="cm-variable">description: <span class="cm-builtin">str <span class="cm-operator">= <span class="cm-string">"A tool to write content to a specified file. Accepts filename, content, and optionally a directory path and overwrite flag as input,overwrite flag is True or False."<br><span> &nbsp; &nbsp;<span class="cm-variable">args_schema: <span class="cm-variable">Type[<span class="cm-variable">BaseModel] <span class="cm-operator">= <span class="cm-variable">FileWriterToolInput<br><span><span>​<br><span> &nbsp; &nbsp;<span class="cm-keyword">def <span class="cm-def">_run(<span class="cm-variable-2">self, <span class="cm-operator">**<span class="cm-variable">kwargs: <span class="cm-variable">Any) <span class="cm-operator">-&gt; <span class="cm-builtin">str:<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">try:<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment"># Create the directory if it doesn't exist<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">if <span class="cm-variable">kwargs.<span class="cm-property">get(<span class="cm-string">"directory") <span class="cm-keyword">and <span class="cm-keyword">not <span class="cm-variable">os.<span class="cm-property">path.<span class="cm-property">exists(<span class="cm-variable">kwargs[<span class="cm-string">"directory"]):<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">os.<span class="cm-property">makedirs(<span class="cm-variable">kwargs[<span class="cm-string">"directory"])<br><span><span>​<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment"># Construct the full path<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">filepath <span class="cm-operator">= <span class="cm-variable">os.<span class="cm-property">path.<span class="cm-property">join(<span class="cm-variable">kwargs.<span class="cm-property">get(<span class="cm-string">"directory") <span class="cm-keyword">or <span class="cm-string">"", <span class="cm-variable">kwargs[<span class="cm-string">"filename"])<br><span><span>​<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment"># Convert overwrite to boolean<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">kwargs[<span class="cm-string">"overwrite"] <span class="cm-operator">= <span class="cm-builtin">bool(<span class="cm-variable">literal_eval(<span class="cm-variable">kwargs[<span class="cm-string">"overwrite"]))<br><span><span>​<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment"># Check if file exists and overwrite is not allowed<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">if <span class="cm-variable">os.<span class="cm-property">path.<span class="cm-property">exists(<span class="cm-variable">filepath) <span class="cm-keyword">and <span class="cm-keyword">not <span class="cm-variable">kwargs[<span class="cm-string">"overwrite"]:<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return <span class="cm-string">f"File {<span class="cm-variable">filepath}<span class="cm-string"> already exists and overwrite option was not passed."<br><span><span>​<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment"># Write content to the file<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">mode <span class="cm-operator">= <span class="cm-string">"w" <span class="cm-keyword">if <span class="cm-variable">kwargs[<span class="cm-string">"overwrite"] <span class="cm-keyword">else <span class="cm-string">"x"<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">with <span class="cm-builtin">open(<span class="cm-variable">filepath, <span class="cm-variable">mode) <span class="cm-keyword">as <span class="cm-variable">file:<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">content <span class="cm-operator">= <span class="cm-variable">kwargs[<span class="cm-string">"content"]<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">file.<span class="cm-property">write(<span class="cm-variable">content)<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return <span class="cm-string">f"Content successfully written to {<span class="cm-variable">filepath}<span class="cm-string">"<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">except <span class="cm-variable">FileExistsError:<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return (<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">f"File {<span class="cm-variable">filepath}<span class="cm-string"> already exists and overwrite option was not passed."<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  )<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">except <span class="cm-variable">KeyError <span class="cm-keyword">as <span class="cm-variable">e:<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return <span class="cm-string">f"An error occurred while accessing key: {<span class="cm-builtin">str(<span class="cm-variable">e)}<span class="cm-string">"<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">except <span class="cm-variable">Exception <span class="cm-keyword">as <span class="cm-variable">e:<br><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return <span class="cm-string">f"An error occurred while writing to the file: {<span class="cm-builtin">str(<span class="cm-variable">e)}<span class="cm-string">"</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">现在需要构建一个团队。</span></p>
<p class="md-end-block md-p"><span class="md-plain">构建团队的代码：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-keyword">from <span class="cm-variable">crewai <span class="cm-keyword">import <span class="cm-variable">Agent, <span class="cm-variable">Crew, <span class="cm-variable">Process, <span class="cm-variable">Task,<span class="cm-variable">LLM<br><span><span class="cm-keyword">from <span class="cm-variable">crewai.<span class="cm-property">project <span class="cm-keyword">import <span class="cm-variable">CrewBase, <span class="cm-variable">agent, <span class="cm-variable">crew, <span class="cm-variable">task<br><span><span class="cm-keyword">from <span class="cm-variable">translation_agent.<span class="cm-property">tools.<span class="cm-property">file_read_tool <span class="cm-keyword">import <span class="cm-variable">FileReadTool<br><span><span class="cm-keyword">from <span class="cm-variable">translation_agent.<span class="cm-property">tools.<span class="cm-property">file_writer_tool <span class="cm-keyword">import <span class="cm-variable">FileWriterTool<br><span><span class="cm-keyword">import <span class="cm-variable">os<br><span><span class="cm-keyword">from <span class="cm-variable">dotenv <span class="cm-keyword">import <span class="cm-variable">load_dotenv<br><span><span class="cm-variable">load_dotenv()<br><span><span>​<br><span><span class="cm-variable">file_read_tool <span class="cm-operator">= <span class="cm-variable">FileReadTool()<br><span><span class="cm-variable">file_writer_tool <span class="cm-operator">= <span class="cm-variable">FileWriterTool()<br><span><span>​<br><span><span class="cm-variable">api_key <span class="cm-operator">= <span class="cm-variable">os.<span class="cm-property">getenv(<span class="cm-string">'OPENAI_API_KEY')<br><span><span class="cm-variable">base_url <span class="cm-operator">= <span class="cm-variable">os.<span class="cm-property">getenv(<span class="cm-string">'OPENAI_API_BASE')<br><span><span class="cm-variable">model <span class="cm-operator">= <span class="cm-variable">os.<span class="cm-property">getenv(<span class="cm-string">'OPENAI_MODEL_NAME', <span class="cm-string">'Qwen/Qwen2.5-72B-Instruct') &nbsp;<span class="cm-comment"># Provide a default model if not set<br><span><span class="cm-variable">agent_llm <span class="cm-operator">= <span class="cm-variable">LLM(<br><span><span class="cm-tab">    <span class="cm-variable">model<span class="cm-operator">=<span class="cm-variable">model,<br><span> &nbsp; &nbsp;<span class="cm-variable">base_url<span class="cm-operator">=<span class="cm-variable">base_url,<br><span> &nbsp; &nbsp;<span class="cm-variable">api_key<span class="cm-operator">=<span class="cm-variable">api_key<br><span><span class="cm-tab">    )<br><span><span>​<br><span><span class="cm-comment"># If you want to run a snippet of code before or after the crew starts, <br><span><span class="cm-comment"># you can use the @before_kickoff and @after_kickoff decorators<br><span><span class="cm-comment"># https://docs.crewai.com/concepts/crews#example-crew-class-with-decorators<br><span><span>​<br><span><span>​<br><span><span class="cm-meta">@CrewBase<br><span><span class="cm-keyword">class <span class="cm-def">TranslationAgent():<br><span><span class="cm-tab">    <span class="cm-string">"""TranslationAgent crew"""<br><span><span>​<br><span><span class="cm-tab">    <span class="cm-comment"># Learn more about YAML configuration files here:<br><span><span class="cm-tab">    <span class="cm-comment"># Agents: https://docs.crewai.com/concepts/agents#yaml-configuration-recommended<br><span><span class="cm-tab">    <span class="cm-comment"># Tasks: https://docs.crewai.com/concepts/tasks#yaml-configuration-recommended<br><span><span class="cm-tab">    <span class="cm-variable">agents_config <span class="cm-operator">= <span class="cm-string">'config/agents.yaml'<br><span><span class="cm-tab">    <span class="cm-variable">tasks_config <span class="cm-operator">= <span class="cm-string">'config/tasks.yaml'<br><span class="cm-tab-wrap-hack"><span class="cm-tab">    <br><span><span class="cm-tab">    <span class="cm-comment"># If you would like to add tools to your agents, you can learn more about it here:<br><span><span class="cm-tab">    <span class="cm-comment"># https://docs.crewai.com/concepts/agents#agent-tools<br><span><span class="cm-tab">    <span class="cm-comment"># @agent<br><span><span class="cm-tab">    <span class="cm-comment"># def researcher(self) -&gt; Agent:<br><span class="cm-tab-wrap-hack"><span class="cm-tab">    <span class="cm-comment"># <span class="cm-tab">  return Agent(<br><span class="cm-tab-wrap-hack"><span class="cm-tab">    <span class="cm-comment"># <span class="cm-tab">  <span class="cm-tab">    config=self.agents_config['researcher'],<br><span class="cm-tab-wrap-hack"><span class="cm-tab">    <span class="cm-comment"># <span class="cm-tab">  <span class="cm-tab">    verbose=True<br><span class="cm-tab-wrap-hack"><span class="cm-tab">    <span class="cm-comment"># <span class="cm-tab">  )<br><span><span>​<br><span><span class="cm-tab">    <span class="cm-comment"># @agent<br><span><span class="cm-tab">    <span class="cm-comment"># def reporting_analyst(self) -&gt; Agent:<br><span class="cm-tab-wrap-hack"><span class="cm-tab">    <span class="cm-comment"># <span class="cm-tab">  return Agent(<br><span class="cm-tab-wrap-hack"><span class="cm-tab">    <span class="cm-comment"># <span class="cm-tab">  <span class="cm-tab">    config=self.agents_config['reporting_analyst'],<br><span class="cm-tab-wrap-hack"><span class="cm-tab">    <span class="cm-comment"># <span class="cm-tab">  <span class="cm-tab">    verbose=True<br><span class="cm-tab-wrap-hack"><span class="cm-tab">    <span class="cm-comment"># <span class="cm-tab">  )<br><span> &nbsp; &nbsp;<br><span><span class="cm-tab">    <span class="cm-meta">@agent<br><span class="cm-tab-wrap-hack"><span class="cm-tab">    <span class="cm-keyword">def <span class="cm-def">file_reader(<span class="cm-variable-2">self) <span class="cm-operator">-&gt; <span class="cm-variable">Agent:<span class="cm-tab"> <span class="cm-tab">    <br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-keyword">return <span class="cm-variable">Agent(<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-variable">config<span class="cm-operator">=<span class="cm-variable-2">self.<span class="cm-property">agents_config[<span class="cm-string">'file_reader'],<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-variable">verbose<span class="cm-operator">=<span class="cm-keyword">True,<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-variable">llm<span class="cm-operator">=<span class="cm-variable">agent_llm,<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-variable">tools<span class="cm-operator">=[<span class="cm-variable">file_read_tool],<br><span><span class="cm-tab">    <span class="cm-tab">    )<br><span class="cm-tab-wrap-hack"><span class="cm-tab">    <br><span><span class="cm-tab">    <span class="cm-meta">@agent<br><span class="cm-tab-wrap-hack"><span class="cm-tab">    <span class="cm-keyword">def <span class="cm-def">translation_agent(<span class="cm-variable-2">self) <span class="cm-operator">-&gt; <span class="cm-variable">Agent:<span class="cm-tab">   <span class="cm-tab">    <br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-keyword">return <span class="cm-variable">Agent(<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-variable">config<span class="cm-operator">=<span class="cm-variable-2">self.<span class="cm-property">agents_config[<span class="cm-string">'translation_agent'],<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-variable">verbose<span class="cm-operator">=<span class="cm-keyword">True,<br><span class="cm-tab-wrap-hack"><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-variable">llm<span class="cm-operator">=<span class="cm-variable">agent_llm,<span class="cm-tab">  <span class="cm-tab">    <br><span><span class="cm-tab">    <span class="cm-tab">    )<br><span class="cm-tab-wrap-hack"><span class="cm-tab">    <br><span><span class="cm-tab">    <span class="cm-meta">@agent<br><span class="cm-tab-wrap-hack"><span class="cm-tab">    <span class="cm-keyword">def <span class="cm-def">file_saver(<span class="cm-variable-2">self) <span class="cm-operator">-&gt; <span class="cm-variable">Agent:<span class="cm-tab">  <span class="cm-tab">    <br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-keyword">return <span class="cm-variable">Agent(<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-variable">config<span class="cm-operator">=<span class="cm-variable-2">self.<span class="cm-property">agents_config[<span class="cm-string">'file_saver'],<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-variable">verbose<span class="cm-operator">=<span class="cm-keyword">True,<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-variable">llm<span class="cm-operator">=<span class="cm-variable">agent_llm,<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-variable">tools<span class="cm-operator">=[<span class="cm-variable">file_writer_tool],<br><span><span class="cm-tab">    <span class="cm-tab">    )<br><span class="cm-tab-wrap-hack"><span class="cm-tab">    <br><span><span class="cm-tab">    <span class="cm-comment"># To learn more about structured task outputs, <br><span><span class="cm-tab">    <span class="cm-comment"># task dependencies, and task callbacks, check out the documentation:<br><span><span class="cm-tab">    <span class="cm-comment"># https://docs.crewai.com/concepts/tasks#overview-of-a-task<br><span><span class="cm-tab">    <span class="cm-meta">@task<br><span><span class="cm-tab">    <span class="cm-keyword">def <span class="cm-def">file_read_task(<span class="cm-variable-2">self) <span class="cm-operator">-&gt; <span class="cm-variable">Task:<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-keyword">return <span class="cm-variable">Task(<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-variable">config<span class="cm-operator">=<span class="cm-variable-2">self.<span class="cm-property">tasks_config[<span class="cm-string">'file_read_task'],<br><span><span class="cm-tab">    <span class="cm-tab">    )<br><span><span>​<br><span><span class="cm-tab">    <span class="cm-meta">@task<br><span><span class="cm-tab">    <span class="cm-keyword">def <span class="cm-def">translation_task(<span class="cm-variable-2">self) <span class="cm-operator">-&gt; <span class="cm-variable">Task:<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-keyword">return <span class="cm-variable">Task(<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-variable">config<span class="cm-operator">=<span class="cm-variable-2">self.<span class="cm-property">tasks_config[<span class="cm-string">'translation_task'],<br><span><span class="cm-tab">    <span class="cm-tab">    )<br><span class="cm-tab-wrap-hack"><span class="cm-tab">    <br><span><span class="cm-tab">    <span class="cm-meta">@task<br><span><span class="cm-tab">    <span class="cm-keyword">def <span class="cm-def">file_save_task(<span class="cm-variable-2">self) <span class="cm-operator">-&gt; <span class="cm-variable">Task:<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-keyword">return <span class="cm-variable">Task(<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-variable">config<span class="cm-operator">=<span class="cm-variable-2">self.<span class="cm-property">tasks_config[<span class="cm-string">'file_save_task'],<br><span><span class="cm-tab">    <span class="cm-tab">    )<br><span><span>​<br><span><span class="cm-tab">    <span class="cm-meta">@crew<br><span><span class="cm-tab">    <span class="cm-keyword">def <span class="cm-def">crew(<span class="cm-variable-2">self) <span class="cm-operator">-&gt; <span class="cm-variable">Crew:<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-string">"""Creates the TranslationAgent crew"""<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-comment"># To learn how to add knowledge sources to your crew, check out the documentation:<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-comment"># https://docs.crewai.com/concepts/knowledge#what-is-knowledge<br><span><span>​<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-keyword">return <span class="cm-variable">Crew(<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-variable">agents<span class="cm-operator">=<span class="cm-variable-2">self.<span class="cm-property">agents, <span class="cm-comment"># Automatically created by the @agent decorator<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-variable">tasks<span class="cm-operator">=<span class="cm-variable-2">self.<span class="cm-property">tasks, <span class="cm-comment"># Automatically created by the @task decorator<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-variable">process<span class="cm-operator">=<span class="cm-variable">Process.<span class="cm-property">sequential,<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-variable">verbose<span class="cm-operator">=<span class="cm-keyword">True,<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-comment"># process=Process.hierarchical, # In case you wanna use that instead https://docs.crewai.com/how-to/Hierarchical/<br><span><span class="cm-tab">    <span class="cm-tab">    )</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">其中我想让代理使用硅基流动的模型可以这样写：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250219181057083-390713659.png"><img src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250219181057083-390713659.png" alt="image-20250219165445665"></span></p>
<p class="md-end-block md-p"><span class="md-plain">需要在模型名称前加上openai才行，不如会报错。</span></p>
<p class="md-end-block md-p"><span class="md-plain">如果你还没注册的话，可以点击邀请链接进行注册：<span class="md-link md-pair-s"><a href="https://cloud.siliconflow.cn/i/Ia3zOSCU" rel="noopener nofollow">https://cloud.siliconflow.cn/i/Ia3zOSCU</a><span class="md-plain">。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">这里我以具有工具调用能力的meta-llama/Llama-3.3-70B-Instruct为例。</span></p>
<p class="md-end-block md-p"><span class="md-plain">然后可以这样使用：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-keyword">import <span class="cm-variable">os<br><span><span class="cm-keyword">from <span class="cm-variable">dotenv <span class="cm-keyword">import <span class="cm-variable">load_dotenv<br><span><span class="cm-variable">load_dotenv()<br><span><span>​<br><span><span class="cm-variable">file_read_tool <span class="cm-operator">= <span class="cm-variable">FileReadTool()<br><span><span class="cm-variable">file_writer_tool <span class="cm-operator">= <span class="cm-variable">FileWriterTool()<br><span><span>​<br><span><span class="cm-variable">api_key <span class="cm-operator">= <span class="cm-variable">os.<span class="cm-property">getenv(<span class="cm-string">'OPENAI_API_KEY')<br><span><span class="cm-variable">base_url <span class="cm-operator">= <span class="cm-variable">os.<span class="cm-property">getenv(<span class="cm-string">'OPENAI_API_BASE')<br><span><span class="cm-variable">model <span class="cm-operator">= <span class="cm-variable">os.<span class="cm-property">getenv(<span class="cm-string">'OPENAI_MODEL_NAME', <span class="cm-string">'Qwen/Qwen2.5-72B-Instruct') &nbsp;<span class="cm-comment"># Provide a default model if not set<br><span><span class="cm-variable">agent_llm <span class="cm-operator">= <span class="cm-variable">LLM(<br><span><span class="cm-tab">    <span class="cm-variable">model<span class="cm-operator">=<span class="cm-variable">model,<br><span> &nbsp; &nbsp;<span class="cm-variable">base_url<span class="cm-operator">=<span class="cm-variable">base_url,<br><span> &nbsp; &nbsp;<span class="cm-variable">api_key<span class="cm-operator">=<span class="cm-variable">api_key<br><span><span class="cm-tab">    )</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">在创建代理时，记得使用这个大模型，并且记得使用工具：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@agent<br><span class="cm-tab-wrap-hack"><span class="cm-keyword">def <span class="cm-def">file_reader(<span class="cm-variable-2">self) <span class="cm-operator">-&gt; <span class="cm-variable">Agent:<span class="cm-tab"> <span class="cm-tab">    <br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-keyword">return <span class="cm-variable">Agent(<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-variable">config<span class="cm-operator">=<span class="cm-variable-2">self.<span class="cm-property">agents_config[<span class="cm-string">'file_reader'],<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-variable">verbose<span class="cm-operator">=<span class="cm-keyword">True,<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-variable">llm<span class="cm-operator">=<span class="cm-variable">agent_llm,<br><span><span class="cm-tab">    <span class="cm-tab">    <span class="cm-tab">    <span class="cm-variable">tools<span class="cm-operator">=[<span class="cm-variable">file_read_tool],<br><span><span class="cm-tab">    <span class="cm-tab">    )</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">这样这个团队就构建成功了。</span></p>
<p class="md-end-block md-p"><span class="md-plain">在main.py中这样写：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">#!/usr/bin/env python<br><span><span class="cm-keyword">import <span class="cm-variable">sys<br><span><span class="cm-keyword">import <span class="cm-variable">warnings<br><span><span>​<br><span><span class="cm-keyword">from <span class="cm-variable">datetime <span class="cm-keyword">import <span class="cm-variable">datetime<br><span><span>​<br><span><span class="cm-keyword">from <span class="cm-variable">translation_agent.<span class="cm-property">crew <span class="cm-keyword">import <span class="cm-variable">TranslationAgent<br><span><span>​<br><span><span class="cm-variable">warnings.<span class="cm-property">filterwarnings(<span class="cm-string">"ignore", <span class="cm-variable">category<span class="cm-operator">=<span class="cm-variable">SyntaxWarning, <span class="cm-variable">module<span class="cm-operator">=<span class="cm-string">"pysbd")<br><span><span>​<br><span><span class="cm-comment"># This main file is intended to be a way for you to run your<br><span><span class="cm-comment"># crew locally, so refrain from adding unnecessary logic into this file.<br><span><span class="cm-comment"># Replace with inputs you want to test with, it will automatically<br><span><span class="cm-comment"># interpolate any tasks and agents information<br><span><span>​<br><span><span class="cm-keyword">def <span class="cm-def">run():<br><span> &nbsp; &nbsp;<span class="cm-string">"""<br><span><span class="cm-string"> &nbsp;  Run the crew.<br><span><span class="cm-string"> &nbsp;  """<br><span> &nbsp; &nbsp;<span class="cm-variable">inputs <span class="cm-operator">= {<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">'question': <span class="cm-string">'读取test.txt文件内容，将其翻译为英文，然后写入test4.txt文件',<br><span> &nbsp;  }<br><span> &nbsp; &nbsp;<br><span> &nbsp; &nbsp;<span class="cm-keyword">try:<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">TranslationAgent().<span class="cm-property">crew().<span class="cm-property">kickoff(<span class="cm-variable">inputs<span class="cm-operator">=<span class="cm-variable">inputs)<br><span> &nbsp; &nbsp;<span class="cm-keyword">except <span class="cm-variable">Exception <span class="cm-keyword">as <span class="cm-variable">e:<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">raise <span class="cm-variable">Exception(<span class="cm-string">f"An error occurred while running the crew: {<span class="cm-variable">e}<span class="cm-string">")<br><span><span>​<br><span><span>​<br><span><span class="cm-keyword">def <span class="cm-def">train():<br><span> &nbsp; &nbsp;<span class="cm-string">"""<br><span><span class="cm-string"> &nbsp;  Train the crew for a given number of iterations.<br><span><span class="cm-string"> &nbsp;  """<br><span> &nbsp; &nbsp;<span class="cm-variable">inputs <span class="cm-operator">= {<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"topic": <span class="cm-string">"AI LLMs"<br><span> &nbsp;  }<br><span> &nbsp; &nbsp;<span class="cm-keyword">try:<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">TranslationAgent().<span class="cm-property">crew().<span class="cm-property">train(<span class="cm-variable">n_iterations<span class="cm-operator">=<span class="cm-builtin">int(<span class="cm-variable">sys.<span class="cm-property">argv[<span class="cm-number">1]), <span class="cm-variable">filename<span class="cm-operator">=<span class="cm-variable">sys.<span class="cm-property">argv[<span class="cm-number">2], <span class="cm-variable">inputs<span class="cm-operator">=<span class="cm-variable">inputs)<br><span><span>​<br><span> &nbsp; &nbsp;<span class="cm-keyword">except <span class="cm-variable">Exception <span class="cm-keyword">as <span class="cm-variable">e:<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">raise <span class="cm-variable">Exception(<span class="cm-string">f"An error occurred while training the crew: {<span class="cm-variable">e}<span class="cm-string">")<br><span><span>​<br><span><span class="cm-keyword">def <span class="cm-def">replay():<br><span> &nbsp; &nbsp;<span class="cm-string">"""<br><span><span class="cm-string"> &nbsp;  Replay the crew execution from a specific task.<br><span><span class="cm-string"> &nbsp;  """<br><span> &nbsp; &nbsp;<span class="cm-keyword">try:<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">TranslationAgent().<span class="cm-property">crew().<span class="cm-property">replay(<span class="cm-variable">task_id<span class="cm-operator">=<span class="cm-variable">sys.<span class="cm-property">argv[<span class="cm-number">1])<br><span><span>​<br><span> &nbsp; &nbsp;<span class="cm-keyword">except <span class="cm-variable">Exception <span class="cm-keyword">as <span class="cm-variable">e:<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">raise <span class="cm-variable">Exception(<span class="cm-string">f"An error occurred while replaying the crew: {<span class="cm-variable">e}<span class="cm-string">")<br><span><span>​<br><span><span class="cm-keyword">def <span class="cm-def">test():<br><span> &nbsp; &nbsp;<span class="cm-string">"""<br><span><span class="cm-string"> &nbsp;  Test the crew execution and returns the results.<br><span><span class="cm-string"> &nbsp;  """<br><span> &nbsp; &nbsp;<span class="cm-variable">inputs <span class="cm-operator">= {<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"topic": <span class="cm-string">"AI LLMs"<br><span> &nbsp;  }<br><span> &nbsp; &nbsp;<span class="cm-keyword">try:<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">TranslationAgent().<span class="cm-property">crew().<span class="cm-property">test(<span class="cm-variable">n_iterations<span class="cm-operator">=<span class="cm-builtin">int(<span class="cm-variable">sys.<span class="cm-property">argv[<span class="cm-number">1]), <span class="cm-variable">openai_model_name<span class="cm-operator">=<span class="cm-variable">sys.<span class="cm-property">argv[<span class="cm-number">2], <span class="cm-variable">inputs<span class="cm-operator">=<span class="cm-variable">inputs)<br><span><span>​<br><span> &nbsp; &nbsp;<span class="cm-keyword">except <span class="cm-variable">Exception <span class="cm-keyword">as <span class="cm-variable">e:<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">raise <span class="cm-variable">Exception(<span class="cm-string">f"An error occurred while testing the crew: {<span class="cm-variable">e}<span class="cm-string">")</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">主要关注这里：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-keyword">def <span class="cm-def">run():<br><span> &nbsp; &nbsp;<span class="cm-string">"""<br><span><span class="cm-string"> &nbsp;  Run the crew.<br><span><span class="cm-string"> &nbsp;  """<br><span> &nbsp; &nbsp;<span class="cm-variable">inputs <span class="cm-operator">= {<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">'question': <span class="cm-string">'读取test.txt文件内容，将其翻译为英文，然后写入test4.txt文件',<br><span> &nbsp;  }<br><span> &nbsp; &nbsp;<br><span> &nbsp; &nbsp;<span class="cm-keyword">try:<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">TranslationAgent().<span class="cm-property">crew().<span class="cm-property">kickoff(<span class="cm-variable">inputs<span class="cm-operator">=<span class="cm-variable">inputs)<br><span> &nbsp; &nbsp;<span class="cm-keyword">except <span class="cm-variable">Exception <span class="cm-keyword">as <span class="cm-variable">e:<br><span> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">raise <span class="cm-variable">Exception(<span class="cm-string">f"An error occurred while running the crew: {<span class="cm-variable">e}<span class="cm-string">")</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">在inputs中输入task中的question占位符的内容。</span></p>
<p class="md-end-block md-p"><span class="md-plain">现在创建一个test.txt，输入内容为：</span></p>
<p class="md-end-block md-p"><span class="md-plain">CrewAI：用于编排复杂 AI 代理系统的生产级框架。从简单的自动化到复杂的现实世界应用，CrewAI 提供精确控制和深度定制。通过灵活的、可投入生产的架构促进协作智能，CrewAI 使代理能够无缝协作，以可预测和一致的结果解决复杂的商业挑战。</span></p>
<p class="md-end-block md-p"><span class="md-plain">现在输入crewai run，看看这个翻译代理的效果。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250219181057138-162071249.png"><img src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250219181057138-162071249.png" alt="image-20250219171523468"></span></p>
<p class="md-end-block md-p"><span class="md-plain">可以发现读取文件代理做的不够好的地方是多了一些内容。</span></p>
<p class="md-end-block md-p"><span class="md-plain">需要进行改进。</span></p>
<p class="md-end-block md-p"><span class="md-plain">改成这样再试试：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-atom">file_reader<span class="cm-meta">:<br><span><span class="cm-atom">  role<span class="cm-meta">: &gt;<br><span><span class="cm-string"> &nbsp;  读取文件代理<br><span><span class="cm-atom">  goal<span class="cm-meta">: &gt;<br><span><span class="cm-string"> &nbsp;  根据文件路径，读取文件内容<br><span><span class="cm-atom">  backstory<span class="cm-meta">: &gt;<br><span><span class="cm-string"> &nbsp;  你是一个文件读取代理，你的任务是根据文件路径，读取文件内容,只需返回文件内容即可</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">现在效果就很好了，如下所示：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250219181057164-1431595453.png"><img src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250219181057164-1431595453.png" alt="image-20250219172033798"></span></p>
<p class="md-end-block md-p"><span class="md-plain">翻译代理很好地进行翻译了，如下所示：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250219181057133-1141631524.png"><img src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250219181057133-1141631524.png" alt="image-20250219172055009"></span></p>
<p class="md-end-block md-p"><span class="md-plain">文件保存代理将翻译结果进行保存，如下所示：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250219181057123-1995405634.png"><img src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250219181057123-1995405634.png" alt="image-20250219172229853"></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250219181057129-2125175628.png"><img src="https://img2024.cnblogs.com/blog/3288240/202502/3288240-20250219181057129-2125175628.png" alt="image-20250219172317889"></span></p>
<h2 class="md-end-block md-heading"><span class="md-plain">最后</span></h2>
<p class="md-end-block md-p md-focus"><span class="md-plain md-expand">这就是使用crewai构建一个翻译代理的步骤与效果。在crewai中还有很多很有趣的工具值得探索，下期介绍代码解释器工具的使用。</span></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0036829295" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-19 18:11">2025-02-19 18:11</span>&nbsp;
<a href="https://www.cnblogs.com/mingupupu">mingupupup</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18724899" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18724899);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18724899', targetLink: 'https://www.cnblogs.com/mingupupu/p/18724899', title: '使用crewai创建属于你自己的AI团队' })">举报</a>
</div>
        