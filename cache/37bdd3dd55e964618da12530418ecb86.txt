
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/test-gang/p/18707185" title="发布于 2025-02-10 09:57">
    <span role="heading" aria-level="2">SQL注入之布尔盲注</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="sql注入之布尔盲注">SQL注入之布尔盲注</h1>
<h2 id="一布尔盲注原理">一、布尔盲注原理</h2>
<p>布尔盲注是一种基于布尔逻辑的SQL注入攻击技术，其核心原理是通过构造特定的SQL查询语句，利用应用程序对查询结果的不同响应（通常是真或假）来逐步推断数据库中的信息。由于这种攻击方式不会直接返回数据库的具体内容，而是通过观察应用程序的响应行为（如页面内容的变化、HTTP状态码、响应时间等）来间接获取数据，因此被称为“盲注”。</p>
<h2 id="二布尔盲注方法">二、布尔盲注方法</h2>
<p>通过构造特定的SQL语句，使 <code>WHERE</code> 子句的条件分别为 <code>True</code> 或 <code>False</code>，从而观察应用程序的响应差异（例如页面内容的变化、HTTP状态码的不同或响应时间的延迟等），进而判断布尔条件的真假。例如：</p>
<ul>
<li>如果条件为真，页面显示正常。</li>
<li>如果条件为假，页面显示错误或为空。</li>
</ul>
<p>我们通常使用 <code>AND</code> 或 <code>OR</code> 将 <code>WHERE</code> 子句的条件分别为 <code>True</code> 或 <code>False</code>，例如：</p>
<ul>
<li>原功能SQL：</li>
</ul>
<pre><code class="language-sql">SELECT id, name, age, sex FROM students WHERE name LIKE '%用户输入%'
</code></pre>
<ul>
<li>攻击者构造后的SQL：</li>
</ul>
<pre><code class="language-sql">SELECT id, name, age, sex FROM students WHERE name LIKE '%name%' AND 1=1 --%'
SELECT id, name, age, sex FROM students WHERE name LIKE '%name%' AND 1=2 --%'
</code></pre>
<p>我们可以将 <code>1=1</code> 替换为 <code>database()='pikachu'</code> 或其他布尔表达式，用来判断数据库的信息。</p>
<h2 id="三布尔盲注实例">三、布尔盲注实例</h2>
<p>在Pikachu平台上进行实践时，我们在输入框内分别输入SQL注入测试字符串：<code>' and 1=1 #</code> 和 <code>' and 1=2 #</code>。</p>
<ul>
<li><code>' and 1=1 #</code><br>
<img src="https://img2024.cnblogs.com/blog/2972727/202502/2972727-20250210094620284-151322046.png" alt="image" loading="lazy"></li>
<li><code>' and 1=2 #</code><br>
<img src="https://img2024.cnblogs.com/blog/2972727/202502/2972727-20250210094650517-247559510.png" alt="image" loading="lazy"></li>
</ul>
<p>当条件为 <code>1=1</code>（<code>True</code>）时，应用程序能够正常返回查询结果；而当条件为 <code>1=2</code>（<code>False</code>）时，页面则会提示“未找到相关信息”。这两种截然不同的响应状态为我们提供了判断依据。通过精心构造 <code>WHERE</code> 子句，并观察页面在不同条件下的显示状态，我们可以有效区分 <code>WHERE</code> 子句的真假，从而逐步推断出数据库中隐藏的信息。</p>
<p>我们再在输入框输入：<code>' and SUBSTRING((SELECT DATABASE()), 1, 1) = 'p' #</code><br>
<img src="https://img2024.cnblogs.com/blog/2972727/202502/2972727-20250210095357728-1229157707.png" alt="image" loading="lazy"></p>
<p><strong>解析</strong></p>
<p><code>SUBSTRING(string, start, length)</code> 函数：</p>
<ul>
<li><code>string</code>：要从中提取子字符串的原始字符串。</li>
<li><code>start</code>：子字符串的起始位置。在SQL中，这个位置通常是从1开始的。如果start为负数，则表示从字符串的尾部开始计数。</li>
<li><code>length</code>：要提取的字符数。这是一个可选参数。如果省略此参数，则将从起始位置提取到字符串的末尾。</li>
</ul>
<p>页面能够正常返回查询结果，所以证明数据库名的第一个字符为 <code>p</code>。通过这种方法，我们可以逐步推断出数据库名称的每一位字符。至于后续如何获取数据库第二位及更多位字符的操作，原理相同，此处不再赘述。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.032716736895833334" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-10 09:58">2025-02-10 09:57</span>&nbsp;
<a href="https://www.cnblogs.com/test-gang">测试小罡</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18707185" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18707185);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18707185', targetLink: 'https://www.cnblogs.com/test-gang/p/18707185', title: 'SQL注入之布尔盲注' })">举报</a>
</div>
        