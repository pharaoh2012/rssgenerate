<!----> <meta itemprop="headline" content="甲方嫌弃，项目首页加载太慢"> <meta itemprop="keywords" content="前端"> <meta itemprop="datePublished" content="2025-06-11T07:58:11.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="curdcv_po"> <meta itemprop="url" content="https://juejin.cn/user/207159605068189"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-61fb5e44="">
            甲方嫌弃，项目首页加载太慢
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-61fb5e44=""><div class="author-info-box" data-v-61fb5e44=""><div class="author-name" data-v-61fb5e44=""><a href="/user/207159605068189/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-292f6e48="" data-v-61fb5e44=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-292f6e48="">
    curdcv_po
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-61fb5e44=""><time datetime="2025-06-11T07:58:11.000Z" title="Wed Jun 11 2025 07:58:11 GMT+0000 (Coordinated Universal Time)" class="time" data-v-61fb5e44="">
                    2025-06-11
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-61fb5e44=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-61fb5e44=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-61fb5e44=""></circle></svg> <span class="views-count" data-v-61fb5e44="">
                    7,184
                  </span> <span class="read-time" data-v-61fb5e44=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-61fb5e44=""><rect width="16" height="16" fill="none" data-v-61fb5e44=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-61fb5e44=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-61fb5e44=""></path></svg>
                    阅读5分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-61fb5e44=""></div> <!----> <!----></div> <!----> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-61fb5e44=""><div class="article-viewer markdown-body result"><blockquote>
<p>有一天，甲方打开一个后台管理的项目，说有点卡，不太满意，项目经理叫我优化，重新打包一下。</p>
</blockquote>
<blockquote>
<blockquote>
<p>从输入地址 到 展示 首屏，最佳时间在 3秒内，否则，甲方挂脸，咱就有可能有被裁的风险，understand?</p>
</blockquote>
</blockquote>
<blockquote>
<p>废话不多说，先来看一下怎么个优化法吧。</p>
</blockquote>
<h2 data-id="heading-0">优化</h2>
<h3 data-id="heading-1">✅ cdn</h3>
<h4 data-id="heading-2">分析</h4>
<p>用Webpack Bundle Analyzer分析依赖，安装webpack-bundle-analyzer打包分析插件：</p>
<pre><code class="hljs language-js" lang="js"># <span class="hljs-variable constant_">NPM</span>
npm install --save-dev webpack-bundle-analyzer
</code></pre>
<pre><code class="hljs language-js" lang="js"># <span class="hljs-title class_">Yarn</span>
yarn add -D webpack-bundle-analyzer
</code></pre>
<p>反正都是装，看着来。</p>
<p>配一下：</p>
<p>// vue.config.js 文件里。（没有就要新建一下）</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">BundleAnalyzerPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack-bundle-analyzer'</span>).<span class="hljs-property">BundleAnalyzerPlugin</span>;
 
<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
  <span class="hljs-attr">plugins</span>: [
    <span class="hljs-keyword">new</span> <span class="hljs-title class_">BundleAnalyzerPlugin</span>()
  ]
}
</code></pre>
<h4 data-id="heading-3">打包</h4>
<p>执行打包命令并查看分析</p>
<pre><code class="hljs language-js" lang="js">npm run build --report
</code></pre>
<p>打包结束后，会在项目根目录下生成dist文件。自动跳到<code>127.0.0.1:8888</code>（没有跳的话，手动打开dist文件夹下的report.html），这个网址就是<code>打包分析报告</code>。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/3dae4d77dafa405f9eb4668a6d08d32f~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgY3VyZGN2X3Bv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1753844819&amp;x-signature=tbpIrVp%2Fzek7U0doksy00dniJhM%3D" alt="image.png" loading="lazy"></p>
<p>占得比较大的块，就是Element UI组件库和echarts库占的空间比相对较大。</p>
<p>这就要考虑，第一，要按需，要啥再用啥，不要一股脑啥都装。按需安装，按需加载。</p>
<p>第二，考虑单独引入这些组件库的<code>cdn</code>，这样速度也会咔咔提升。</p>
<p>详细讲一下怎么搞<code>cdn</code>。</p>
<p>按需大家都知道，要啥再引入啥，再装啥。</p>
<p>比如<code>element-ui</code>，我要<code>uninstall</code>掉，然后呢，去引入cdn，不要装库了，用cdn。</p>
<p>去<code>package.json</code>里面看<code>element-ui</code>装了啥版本，然后看完之后，就<code>npm uninstall element-ui</code>卸载掉。</p>
<p>去cdn库里面去找<code>https://www.staticfile.org/</code>，(首先先说一下，要找免费的开放的那种，因为一般有的公司没有自家的cdn，没有自家的桶，有的话，直接把js文件地址拖上去，然后得到一个地址，这样也安全，也方便，但没有的话另说)。</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/182422c7f9594caf95eebc52c6032366~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgY3VyZGN2X3Bv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1753844819&amp;x-signature=cdCt%2BdxveR1Jc666jCJr9PU%2FPLA%3D" alt="image.png" loading="lazy"></p>
<pre><code class="hljs language-js" lang="js">样式库: <span class="hljs-attr">https</span>:<span class="hljs-comment">//cdn.staticfile.org/element-ui/2.15.12/theme-chalk/index.min.css </span>
组件库：<span class="hljs-attr">https</span>:<span class="hljs-comment">//cdn.staticfile.org/element-ui/2.15.12/index.min.js</span>
</code></pre>
<p>然后去<code>public/index.html</code>入口文件中，去加入这个东西，像咱以前写原生一样引入就好,body里面引入js，head里面引入css。：</p>
<pre><code class="hljs language-js" lang="js">&lt;head&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://cdn.staticfile.org/element-ui/2.15.12/theme-chalk/index.min.css"</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span>

<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.staticfile.org/element-ui/2.15.12/index.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span>
</code></pre>
<p>所以这样子，就引入好了。接着在<code>main.js</code>里面，把之前<code>import</code>的所有<code>element</code>的样式删掉。</p>
<p>接着，<code>vue.config.js</code>的<code>configureWebpack</code>加个<code>externals</code>字段：</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">BundleAnalyzerPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack-bundle-analyzer'</span>).<span class="hljs-property">BundleAnalyzerPlugin</span>;
 
<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
  <span class="hljs-attr">plugins</span>: [
    <span class="hljs-keyword">new</span> <span class="hljs-title class_">BundleAnalyzerPlugin</span>()
  ],
  <span class="hljs-attr">externals</span>: {
    <span class="hljs-string">'element-ui'</span>: <span class="hljs-string">'ELEMENT'</span> <span class="hljs-comment">// key 是之前install下下来的包名，element-ui。value是全局变量名(ELEMENT)</span>
  }
}
</code></pre>
<p><strong>externals</strong>: Webpack 的 <code>externals</code> 配置用于声明某些依赖应该从外部获取，而不是打包到最终的 bundle 中。这样可以减小打包体积，前提是这些依赖已经在运行环境中存在。</p>
<p><strong><code>'element-ui': 'ELEMENT'</code> 的含义</strong></p>
<ul>
<li>当你的代码中 <code>import 'element-ui'</code> 时，Webpack 不会打包 <code>element-ui</code>，而是会从全局变量 <code>ELEMENT</code> 中获取它。</li>
<li><code>ELEMENT</code> 是 <code>element-ui</code> 库通过 <code>&lt;script&gt;</code> 标签引入时，在全局（<code>window</code>）中暴露的变量名。<br>
例如，如果你在 HTML 中这样引入：
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://unpkg.com/element-ui/lib/index.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
那么 <code>element-ui</code> 会挂载到 <code>window.ELEMENT</code> 上。</li>
</ul>
<p><strong>为什么这样配置？</strong></p>
<ul>
<li>通常是为了通过 CDN 引入 <code>element-ui</code>（而不是打包它），从而优化构建速度和体积。</li>
<li>你需要确保在 HTML 中通过 <code>&lt;script&gt;</code> 提前加载了 <code>element-ui</code>，否则运行时 <code>ELEMENT</code> 会是 <code>undefined</code>。</li>
</ul>
<hr>
<pre><code class="hljs language-html" lang="html"><span class="hljs-comment">&lt;!-- HTML 中通过 CDN 引入 element-ui --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://unpkg.com/element-ui/lib/index.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// webpack.config.js</span>
<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
  <span class="hljs-attr">externals</span>: {
    <span class="hljs-string">'element-ui'</span>: <span class="hljs-string">'ELEMENT'</span> <span class="hljs-comment">// 告诉 Webpack：import 'element-ui' 时，返回全局的 ELEMENT</span>
  }
};
</code></pre>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// 你的代码中依然可以正常 import（但实际用的是全局变量）</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementUI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'element-ui'</span>;
<span class="hljs-comment">// 相当于：const ElementUI = window.ELEMENT;</span>
</code></pre>
<p><strong>注意事项：</strong></p>
<ul>
<li>确保全局变量名（<code>ELEMENT</code>）和 <code>element-ui</code> 的 CDN 版本一致。不同版本的库可能有不同的全局变量名。</li>
<li>如果使用模块化打包（如 npm + Webpack 全量打包），则不需要配置 <code>externals</code>。</li>
</ul>
<hr>
<p>这里有的伙伴就说，我咋知道是<code>ELEMENT</code>，而不是<code>element</code>呢。</p>
<p>这里是这么找的：</p>
<p>直接在浏览器控制台检查
在 HTML 中通过 CDN 引入该库：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.staticfile.org/element-ui/2.15.12/index.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<p>打开浏览器开发者工具（F12），在 Console 中输入：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>);
</code></pre>
<p>然后查找可能的全局变量名（如 ELEMENT、ElementUI 等）。</p>
<h4 data-id="heading-4">cdn配置之后，重新分析</h4>
<pre><code class="hljs language-js" lang="js">npm run build --report
</code></pre>
<p>重新用<code>cdn</code>的去分析，</p>
<p>那么就很舒服了，也因此，这个就是cdn优化的方法。</p>
<h3 data-id="heading-5">✅ nginx gzip压缩</h3>
<pre><code class="hljs language-js" lang="js">server {
        listen       <span class="hljs-number">8103</span>;
        server_name  ************;
		# 开启gzip
	    gzip on;
	    # 进行压缩的文件类型。
	   	gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
	    # 是否在http header中添加<span class="hljs-title class_">Vary</span>: <span class="hljs-title class_">Accept</span>-<span class="hljs-title class_">Encoding</span>，建议开启
	    gzip_vary on;
}

</code></pre>
<h3 data-id="heading-6">✅vue gzip压</h3>
<p>安包：<code>npm i compression-webpack-plugin@1.1.12 --save-dev </code></p>
<p>注意版本匹配问题。</p>
<p>vue配置，这段配置是 Webpack 构建中关于 <strong>Gzip 压缩</strong> 的设置，位于 <code>config/index.js</code> 文件中。:</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">//文件路径  config --&gt; index.js</span>
<span class="hljs-attr">build</span>: {
  <span class="hljs-attr">productionGzip</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 启用生产环境的 Gzip 压缩</span>
  <span class="hljs-attr">productionGzipExtensions</span>: [<span class="hljs-string">'js'</span>, <span class="hljs-string">'css'</span>], <span class="hljs-comment">// 需要压缩的文件类型</span>
}
</code></pre>
<ol>
<li>
<p><strong><code>productionGzip: true</code></strong></p>
<ul>
<li>作用：开启 Gzip 压缩，减少静态资源（JS、CSS）的体积，提升页面加载速度。</li>
<li>要求：需要安装 <code>compression-webpack-plugin</code>（如注释所述）。
<pre><code class="hljs language-bash" lang="bash">npm install --save-dev compression-webpack-plugin
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong><code>productionGzipExtensions: ['js', 'css']</code></strong></p>
<ul>
<li>指定需要压缩的文件扩展名（默认压缩 JS 和 CSS 文件）。</li>
</ul>
</li>
</ol>
<p><strong>为什么需要 Gzip？</strong></p>
<ul>
<li><strong>优化性能</strong>：Gzip 压缩后的资源体积可减少 60%~70%，显著降低网络传输时间。</li>
<li><strong>服务器支持</strong>：大多数现代服务器（如 Nginx、Netlify）会自动对静态资源进行 Gzip 压缩，但本地构建时提前生成 <code>.gz</code> 文件可以避免服务器实时压缩的开销。</li>
</ul>
<h3 data-id="heading-7">✅ 按需加载路由</h3>
<p>路由级代码分割（动态导入）</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 原写法</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./views/About.vue'</span>

<span class="hljs-comment">// 优化后写法</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">About</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: "about" */</span> <span class="hljs-string">'./views/About.vue'</span>)
</code></pre>
<ul>
<li>首页只加载核心代码（home路由）</li>
<li>about模块会在用户点击about路由时才加载</li>
<li>显著减少首屏加载资源体积</li>
</ul>
<h3 data-id="heading-8">✅ 合理配置 prefetch策略</h3>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// vue.config.js</span>
<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
  <span class="hljs-attr">chainWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> {
    <span class="hljs-comment">// 移除prefetch插件</span>
    config.<span class="hljs-property">plugins</span>.<span class="hljs-title function_">delete</span>(<span class="hljs-string">'prefetch'</span>)
    
    <span class="hljs-comment">// 或者更精细控制</span>
    config.<span class="hljs-title function_">plugin</span>(<span class="hljs-string">'prefetch'</span>).<span class="hljs-title function_">tap</span>(<span class="hljs-function"><span class="hljs-params">options</span> =&gt;</span> {
      options[<span class="hljs-number">0</span>].<span class="hljs-property">fileBlacklist</span> = options[<span class="hljs-number">0</span>].<span class="hljs-property">fileBlacklist</span> || []
      options[<span class="hljs-number">0</span>].<span class="hljs-property">fileBlacklist</span>.<span class="hljs-title function_">push</span>(<span class="hljs-regexp">/myasyncRoute(.)+?\.js$/</span>)
      <span class="hljs-keyword">return</span> options
    })
  }
}
</code></pre>
<ul>
<li><strong>禁用prefetch</strong>：减少不必要的带宽消耗，但可能增加后续路由切换等待时间</li>
<li><strong>启用prefetch</strong>：利用浏览器空闲时间预加载，提升用户体验但可能浪费带宽</li>
<li><strong>折中方案</strong>：只对关键路由或高概率访问的路由启用prefetch</li>
</ul>
<h3 data-id="heading-9">✅ splitChunks 将node_modules中的依赖单独打包</h3>
<p><strong>拆分vendor</strong>：将node_modules中的依赖单独打包</p>
<pre><code class="hljs language-javascript" lang="javascript">config.<span class="hljs-property">optimization</span>.<span class="hljs-title function_">splitChunks</span>({
 <span class="hljs-attr">chunks</span>: <span class="hljs-string">'all'</span>,
 <span class="hljs-attr">cacheGroups</span>: {
   <span class="hljs-attr">vendors</span>: {
     <span class="hljs-attr">name</span>: <span class="hljs-string">'chunk-vendors'</span>,
     <span class="hljs-attr">test</span>: <span class="hljs-regexp">/[\\/]node_modules[\\/]/</span>,
     <span class="hljs-attr">priority</span>: -<span class="hljs-number">10</span>,
     <span class="hljs-attr">chunks</span>: <span class="hljs-string">'initial'</span>
   }
 }
})
</code></pre>
<h3 data-id="heading-10">✅ 按需引入 lodash</h3>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> debounce <span class="hljs-keyword">from</span> <span class="hljs-string">'lodash/debounce'</span>
</code></pre>
<p>用啥再引啥。</p>
<h2 data-id="heading-11">甲方笑了</h2>
<p>打开首页闪电一进，完美ending！！！</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/b055c85341084396b8a74dc050907056~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgY3VyZGN2X3Bv:q75.awebp?rk3s=f64ab15b&amp;x-expires=1753844819&amp;x-signature=1bORqOJwZ7A%2BP8UCzPNPOTeF2oA%3D" alt="1.gif" loading="lazy"></p>
<p>散会啦😊</p></div></div>