
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/sheng_chao/p/18695542" title="发布于 2025-01-31 00:03">
    <span role="heading" aria-level="2">独立开发经验谈：如何通过 Docker 让潜在客户快速体验你的系统</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        如果你的产品是和我的在线客服系统一样，100% 允许用户私有化部署的，那你一定要使用 Docker 技术，让用户能够快速体验到你的系统，以及能够在生产环境中非常轻松的把你的产品用起来。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>我在业余时间开发了一款自己的独立产品：升讯威在线客服与营销系统。陆陆续续开发了几年，从一开始的偶有用户尝试，到如今线上环境和私有化部署均有了越来越多的稳定用户，在这个过程中，我也积累了不少如何开发运营一款独立产品的经验。我将在本文中介绍如何通过 Docker 让潜在客户快速体验你的独立产品。</p>
<p>如果你的产品是和我的在线客服系统一样，100% 允许用户私有化部署的，那你一定要使用 Docker 技术，让用户能够快速体验到你的系统，以及能够在生产环境中非常轻松的把你的产品用起来。千万不要把安装部署的过程弄得太复杂。</p>
<h3 id="把产品做成-docker-镜像提供给用户有很多好处">把产品做成 Docker 镜像提供给用户有很多好处：</h3>
<ol>
<li>
<p><strong>一致的运行环境</strong>：Docker 容器能确保你的产品在不同环境中以相同的方式运行，避免了因操作系统、依赖版本不同而产生的兼容性问题。无论用户的系统是 Windows、Linux 还是 macOS，都能以一致的方式运行。</p>
</li>
<li>
<p><strong>简化部署和安装</strong>：用户无需手动配置环境，直接运行 Docker 容器就可以启动产品。这对没有相关技术背景的用户尤其友好。</p>
</li>
<li>
<p><strong>快速启动和隔离</strong>：Docker 镜像启动速度快，容器内的应用与外部环境隔离，避免了对宿主系统的干扰，也使得产品更容易进行升级和更新。</p>
</li>
<li>
<p><strong>可移植性</strong>：Docker 镜像可以轻松地在不同的机器、云平台甚至是开发和生产环境之间移植，确保产品的跨平台兼容性。</p>
</li>
<li>
<p><strong>资源隔离与优化</strong>：Docker 通过容器化技术使得每个应用有自己独立的资源和依赖，可以有效避免应用之间的冲突，提高资源使用效率。</p>
</li>
<li>
<p><strong>易于维护与版本管理</strong>：Docker 镜像的版本管理简单，可以轻松切换不同版本的产品，用户可以根据需要选择合适的版本，也能快速修复或迭代。</p>
</li>
<li>
<p><strong>增强安全性</strong>：Docker 提供了容器级别的隔离，减少了不同应用之间的安全风险。此外，可以在容器中定义安全策略，如限制容器的资源访问权限。</p>
</li>
<li>
<p><strong>自动化和 CI/CD 集成</strong>：使用 Docker 可以与自动化部署工具结合，支持持续集成和持续部署（CI/CD），使得产品的发布流程更加高效、自动化。</p>
</li>
</ol>
<h3 id="我的例子">我的例子</h3>
<p>以我制作的在线客服系统 Docker 镜像为例，只需要 2 个命令，就能在用户自己的服务器上跑起来，如果用户本地安装了 Windows Docker Desktop，那只需要 1 分钟便能在电脑上体验整个系统。</p>
<ol>
<li>
<p>从 Docker Hub 下载升讯威在线客服系统镜像<br>
<code>docker pull iccb1013/linkup:latest</code></p>
</li>
<li>
<p>启动容器<br>
<code>docker run -p 8021:8021 -p 8022:8022 -p 8023:8023 -p 9527:9527 -dit --restart=always --privileged=true --name=linkup_latest iccb1013/linkup:latest</code></p>
</li>
<li>
<p>在本机访问测试<br>
首次启动容器时将自动执行数据库初始化等操作，请稍等片刻再访问。</p>
</li>
</ol>
<blockquote>
<p>localhost:8021 为服务器主程序，可以使用 <a href="http://localhost:8021/status" target="_blank" rel="noopener nofollow">http://localhost:8021/status</a> 来查看其运行状态。<br>
localhost:8022 为静态资源站点，可以使用 <a href="http://localhost:8022/v.html" target="_blank" rel="noopener nofollow">http://localhost:8022/v.html</a> 来查看其版本。<br>
localhost:8023 为 Web 管理后台，可以使用 <a href="http://localhost:8023" target="_blank" rel="noopener nofollow">http://localhost:8023</a> 来登录。</p>
</blockquote>
<blockquote>
<p>下载客服端程序（私有化部署专用版）<br>
<a href="http://localhost:8022/shell.zip" target="_blank" rel="noopener nofollow">http://localhost:8022/shell.zip</a><br>
在登录界面，点击下方“修改”，填入服务器地址 <a href="http://localhost:8021" target="_blank" rel="noopener nofollow">http://localhost:8021</a>，然后使用默认站点代码和账户密码登录即可。<br>
默认站点代码 ：freesite，账户： kf1 ，密码 ：123 。</p>
</blockquote>
<blockquote>
<p>如果使用 Windows Docker Desktop，那么在启动容器后，通过 <a href="http://localhost" target="_blank" rel="noopener nofollow">http://localhost</a> 主机地址即可直接体验。如果是部署在服务器上，只需<a href="https://docs.shengxunwei.com/Post/f7bc8496-14ee-4a53-07b4-08d8e3da6269/412a2027-f516-4c42-afbc-a83a48a4573d" target="_blank" rel="noopener nofollow">进入容器修改配置文件</a>即可。</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/78019/202501/78019-20250130235515632-1271997542.jpg" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/78019/202501/78019-20250131173817869-1860550420.png" alt="" loading="lazy"></p>
<h3 id="如何快速为你的产品制作一个docker镜像">如何快速为你的产品制作一个docker镜像</h3>
<p>下面我将详细介绍如何通过 Docker 技术，制作出这样的产品镜像。</p>
<h3 id="1-安装-docker">1. <strong>安装 Docker</strong></h3>
<p>确保你的机器上已安装 Docker。如果还没有安装，可以按照 <a href="https://www.docker.com/get-started" target="_blank" rel="noopener nofollow">Docker 官网</a> 的安装指南进行安装。</p>
<h3 id="2-创建-dockerfile">2. <strong>创建 Dockerfile</strong></h3>
<p>Dockerfile 是一个文本文件，包含了构建 Docker 镜像的所有指令。你需要在项目目录下创建一个 <code>Dockerfile</code> 文件，通常命名为 <code>Dockerfile</code>，而不带扩展名。</p>
<p>以下是一个基本的 Dockerfile 示例：</p>
<pre><code class="language-Dockerfile"># 使用官方的基础镜像作为起点
FROM ubuntu:20.04

# 设置维护者信息
LABEL maintainer="yourname@example.com"

# 将当前目录下的所有文件复制到镜像内的 /app 目录
COPY . /app

# 安装项目依赖（假设有 requirements.txt 文件）
RUN pip3 install -r requirements.txt

### 3. **构建 Docker 镜像**

在包含 `Dockerfile` 的目录下，打开终端或命令行工具，然后运行以下命令来构建镜像：

```bash
docker build -t my-image-name .
</code></pre>
<p>这里的 <code>-t my-image-name</code> 指定了镜像的名称，<code>.</code> 表示当前目录。</p>
<p>Docker 会根据 <code>Dockerfile</code> 的指令，逐步构建镜像。</p>
<h3 id="4-运行-docker-容器">4. <strong>运行 Docker 容器</strong></h3>
<p>构建完成后，你可以使用以下命令来启动一个容器：</p>
<pre><code class="language-bash">docker run -d -p 8080:80 my-image-name
</code></pre>
<ul>
<li><code>-d</code>：后台运行容器。</li>
<li><code>-p 8080:80</code>：将容器内的 80 端口映射到本地的 8080 端口。</li>
<li><code>my-image-name</code>：指定要运行的镜像名称。</li>
</ul>
<h3 id="5-检查镜像和容器">5. <strong>检查镜像和容器</strong></h3>
<ul>
<li>查看本地的镜像列表：</li>
</ul>
<pre><code class="language-bash">docker images
</code></pre>
<ul>
<li>查看运行中的容器：</li>
</ul>
<pre><code class="language-bash">docker ps
</code></pre>
<ul>
<li>如果你需要停止容器，可以使用以下命令：</li>
</ul>
<pre><code class="language-bash">docker stop &lt;container-id&gt;
</code></pre>
<h3 id="6-分享镜像">6. <strong>分享镜像</strong></h3>
<p>如果你希望分享镜像，可以将其推送到 Docker Hub 或其他 Docker 镜像仓库：</p>
<ol>
<li>首先，登录到 Docker Hub：</li>
</ol>
<pre><code class="language-bash">docker login
</code></pre>
<ol start="2">
<li>然后，将镜像推送到 Docker Hub：</li>
</ol>
<pre><code class="language-bash">docker tag my-image-name your-dockerhub-username/my-image-name
docker push your-dockerhub-username/my-image-name
</code></pre>
<p>这样，别人就可以从 Docker Hub 拉取并使用你的镜像了。</p>
<hr>
<h3 id="钟意的话请给个赞支持一下吧谢谢">钟意的话请给个赞支持一下吧，谢谢~</h3>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.7771283514652778" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-31 17:38">2025-01-31 00:03</span>&nbsp;
<a href="https://www.cnblogs.com/sheng_chao">升讯威在线客服系统</a>&nbsp;
阅读(<span id="post_view_count">166</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18695542" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18695542);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18695542', targetLink: 'https://www.cnblogs.com/sheng_chao/p/18695542', title: '独立开发经验谈：如何通过 Docker 让潜在客户快速体验你的系统' })">举报</a>
</div>
        