<!----> <meta itemprop="headline" content="不是哥们🤡，滚动动画你还需要用库和JavaScript😱？两行CSS实现，颠覆你的认知"> <meta itemprop="keywords" content="前端,CSS,JavaScript"> <meta itemprop="datePublished" content="2024-12-27T16:28:15.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="Embrace"> <meta itemprop="url" content="https://juejin.cn/user/763493913998601"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-7cdd11fb="">
            不是哥们🤡，滚动动画你还需要用库和JavaScript😱？两行CSS实现，颠覆你的认知
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-7cdd11fb=""><div class="author-info-box" data-v-7cdd11fb=""><div class="author-name" data-v-7cdd11fb=""><a href="/user/763493913998601/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-7cdd11fb=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    Embrace
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-7cdd11fb=""><time datetime="2024-12-27T16:28:15.000Z" title="Fri Dec 27 2024 16:28:15 GMT+0000 (Coordinated Universal Time)" class="time" data-v-7cdd11fb="">
                    2024-12-27
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-7cdd11fb=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-7cdd11fb=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-7cdd11fb=""></circle></svg> <span class="views-count" data-v-7cdd11fb="">
                    9,850
                  </span> <span class="read-time" data-v-7cdd11fb=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-7cdd11fb=""><rect width="16" height="16" fill="none" data-v-7cdd11fb=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-7cdd11fb=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-7cdd11fb=""></path></svg>
                    阅读8分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-7cdd11fb=""></div> <!----> <!----></div> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-7cdd11fb=""><div class="article-viewer markdown-body result"><blockquote>
<p>这是整个掘金社区绝仅有的讲解，学好它你将逐渐摆脱JavaScript，减少对库的使用，极大提高了你网站的渲染速度</p>
</blockquote>
<p>作为前端工作人员， 滚动动画大家再也熟悉不过。不过很多前端工程师对于这块的实现是头疼的。
这里我准备了iphone16官网来作为例子，<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.apple.com%2Fiphone-16-pro%2F" target="_blank" title="https://www.apple.com/iphone-16-pro/" ref="nofollow noopener noreferrer">www.apple.com/iphone-16-p…</a>
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ef0c237c672c4b6a949980abf06e17f7~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgRW1icmFjZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741303330&amp;x-signature=vcb%2BlaLVXtXGgq520yuRTN5gvX0%3D" alt="d5bcb342-a64a-46c4-a9a9-d285d43789f9.gif" loading="lazy"></p>
<blockquote>
<p>提一嘴，如果大家想知道iphone 16这个官网是怎么实现的，可以在评论区说出来，如果呼声高的话，我会专门出一篇文章复刻它</p>
</blockquote>
<p>我看了很多工作几年的前端工程师，95%都要使用大量<code>JavaScript</code>，甚至是库来实现。</p>
<p>我们都知道<code>JavaScript</code>相关的操作，对于浏览器进行渲染是非常不利的。我看到那些代码，我都为浏览器需要渲染它感到心痛😭💔</p>
<p>如果您也是其中的一员，那么这篇文章将颠覆你以前的做法，提高你的coding水平，并且代码量也不多。</p>
<blockquote>
<p>看完后，随便说点关于对本文章的见解，不论是夸赞还是批评。这对作者对于日后更新的文章非常重要🚀</p>
</blockquote>
<blockquote>
<p>先叠个甲，作者目前才大二，能力有限，各位大佬轻点骂。</p>
</blockquote>
<h2 data-id="heading-0">正式讲解</h2>
<blockquote>
<p>很多页面效果因为做成了gif被抽帧了，这我也没办法，大家懂我意思就行</p>
</blockquote>
<blockquote>
<p>全文不长，请大家耐心看完，你会拥有巨大的收获🔥🚀🚀。</p>
</blockquote>
<h2 data-id="heading-1">第一个动画，随着页面滚动进行旋转</h2>
<p>我这里自己准备了一个网页，首先看这里
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/59db22fb948c4c45999c9b7016b3dbec~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgRW1icmFjZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741303330&amp;x-signature=s1ItaLX1r0Mq102Kseo%2Fkde6vjw%3D" alt="image.png" loading="lazy">
我们如何让网页这个球随着我们滑动网页转动起来？你的想法是不是用<code>JavaScript</code>监听滚动时间然后……🌚</p>
<p>抱歉不需要，我们只需要CSS几行代码搞定，这里我准备讲解两个动画案例带你彻底搞懂，诸君且看我如何操作。</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">figure</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"images/3.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"autoRotate"</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span>
</code></pre>
<pre><code class="hljs language-css" lang="css"><span class="hljs-selector-class">.autoRotate</span>{
    <span class="hljs-attribute">animation</span>: autoRotateAnimation;
    <span class="hljs-attribute">animation</span>-timeline: <span class="hljs-built_in">view</span>();
}
<span class="hljs-keyword">@keyframes</span> autoRotateAnimation{
    <span class="hljs-selector-tag">from</span>{
        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>);
    }
    <span class="hljs-selector-tag">to</span>{
        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">360deg</span>);
    }
}
</code></pre>
<pre><code class="hljs language-css" lang="css"><span class="hljs-selector-class">.autoRotate</span>{
    <span class="hljs-attribute">animation</span>: autoRotateAnimation;
}
</code></pre>
<p>这段代码我想不说大家也知道，给类名叫定义了叫<code>autoRotate</code>的元素定义一个叫<code>autoRotateAnimation</code>的动画。</p>
<pre><code class="hljs language-css" lang="css"><span class="hljs-keyword">@keyframes</span> autoRotateAnimation{
    <span class="hljs-selector-tag">from</span>{
        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>);
    }
    <span class="hljs-selector-tag">to</span>{
        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">360deg</span>);
    }
}
</code></pre>
<p>这段代码就是动画的具体实现，表示该动画会从 0 度旋转到 360 度，从而使元素绕其中心点顺时针旋转一圈。</p>
<p>运行后，我们发现并没有动
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ba9000617711482f9db4266a74978794~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgRW1icmFjZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741303330&amp;x-signature=Z5INRXxfy4KrS5udzZOxH0x5sR8%3D" alt="8d2e2de7-3ad8-4a82-bbe8-0f554cfc62fd.gif" loading="lazy"></p>
<blockquote>
<p>重点来了，请大家打起精神！👀</p>
</blockquote>
<h3 data-id="heading-2">animation-timeline: view();</h3>
<p>为什么会这样？🤔因为通常情况下，我们进行动画活动都需要添加动画的时间线，也就是动画发生的时机，这里我们只是说了动画要怎么做而已。</p>
<blockquote>
<p>那我们怎么解决呢？🤔我们只需要加一行代码就可以了</p>
</blockquote>
<pre><code class="hljs language-css" lang="css"><span class="hljs-attribute">animation</span>-timeline: <span class="hljs-built_in">view</span>();
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/41670750fa34432daeb27d26267eeeb8~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgRW1icmFjZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741303330&amp;x-signature=ezMQ5LFgRbclPcB2NpwgVYlZbKQ%3D" alt="dd6ad816-f8dd-4dfb-90bf-d08125a22534.gif" loading="lazy">
Perfect!动起来了！是不是比用<code>JavaScript</code>简单多了？我们来解释下这段代码什么意思</p>
<p><code>animation-timeline</code>用于指定动画的时间线，<code>view()</code>，它可以使动画的时间线基于视口的滚动或其他动态因素进行控制。</p>
<blockquote>
<p>这段代码可以令我们做到根据页面的滚动视图来<strong>自动</strong>控制动画的开始、暂停或进度。</p>
</blockquote>
<h3 data-id="heading-3">文字随着页面滚动出现。</h3>
<p>很多时候我们需要文字随着页面滚动到一定位置的时候才出现，我们该怎么做呢？通过上面的讲解，大家肯定能反应到我们可以用<code>animation-timeline: view();</code></p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"autoShow"</span>&gt;</span>Introduce<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
</code></pre>
<pre><code class="hljs language-css" lang="css"><span class="hljs-selector-class">.autoShow</span>{
    <span class="hljs-attribute">animation</span>: autoShowAnimation;
    <span class="hljs-attribute">animation</span>-timeline: <span class="hljs-built_in">view</span>();
}
<span class="hljs-keyword">@keyframes</span> autoShowAnimation{
    <span class="hljs-selector-tag">from</span>{
        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;
        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">200px</span>) <span class="hljs-built_in">scale</span>(<span class="hljs-number">0.3</span>);
    }<span class="hljs-selector-tag">to</span>{
        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;
        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>) <span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>);
    }
}
</code></pre>
<p>我们可以看到文字出现时刚好上面的球转我一圈，那种局限性太大了，并且动画效果消失后我们要划到很后面，假如还有其他动画效果我们根本就无法看到，这太糟糕了😵‍💫。</p>
<p>我们有没有办法指定文字出现的时机呢？当然有，只需要在<code>view()</code>里面填写参数即可。</p>
<h2 data-id="heading-4">view的两个参数</h2>
<blockquote>
<p>为了写这个我看MD5文档看了有几个小时，我只能说，大家把英语学好吧，依靠浏览器翻译，呵呵……很难去学习到新技术。</p>
</blockquote>
<p>上面那个案例不好演示效果，这里我重新写了一个,用这个更好演示。</p>
<pre><code class="hljs language-html" lang="html">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"content"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Content<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>
    ...此处省略一大段文字
    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> 
    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>
    ...此处省略一大段文字
    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"subject-container"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"subject animation"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  
    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>
    ...此处省略一大段文字
    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>
<pre><code class="hljs language-css" lang="css">...此处省略一大段布局代码
<span class="hljs-selector-class">.animation</span> {
  <span class="hljs-attribute">animation</span>-timeline: <span class="hljs-built_in">view</span>(block auto <span class="hljs-number">20%</span>);

  <span class="hljs-attribute">animation-name</span>: grow;
  <span class="hljs-attribute">animation-fill-mode</span>: both;
  <span class="hljs-attribute">animation-duration</span>: <span class="hljs-number">1ms</span>; <span class="hljs-comment">/* Firefox requires this to apply the animation */</span>
  <span class="hljs-attribute">animation-timing-function</span>: linear;
}

<span class="hljs-keyword">@keyframes</span> grow {
  <span class="hljs-selector-tag">from</span> {
    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scaleX</span>(<span class="hljs-number">0</span>);
  }

  <span class="hljs-selector-tag">to</span> {
    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scaleX</span>(<span class="hljs-number">1</span>);
  }
}
</code></pre>
<blockquote>
<p>补充一下，<strong><code>block</code></strong>：表示相对于 <strong>块级轴</strong>（通常是垂直方向，或称为“y 轴”）的定位，这个不做详细介绍，不是这篇文章的重点。</p>
</blockquote>
<h3 data-id="heading-5">控制动画开始时机</h3>
<pre><code class="hljs language-css" lang="css"><span class="hljs-attribute">animation</span>-timeline: <span class="hljs-built_in">view</span>(block auto <span class="hljs-number">20%</span>);
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/64623c78ba954745995d119ca0b185c2~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgRW1icmFjZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741303330&amp;x-signature=6lhA07Rn5nCpqFr4ijwnXpSws6w%3D" alt="6f8f8f1e-b352-4e37-a4e2-9dc956df2e90.gif" loading="lazy"></p>
<p>20%表示等而目标元素的<strong>顶部</strong>距离<strong>视口高度底部</strong>20%的时候才会开始执行动画
，不直观我们直接看图。
<img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f752edfd99294984bbff86549c4ce622~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgRW1icmFjZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741303330&amp;x-signature=v8MLWldAe7lWTdT2W9gCwQmrr7E%3D" alt="image.png" loading="lazy"></p>
<h3 data-id="heading-6">控制动画结束时机</h3>
<blockquote>
<p>我们知道了控制动画开始，如何控制动画什么时机结束呢?🤔</p>
</blockquote>
<pre><code class="hljs language-css" lang="css"><span class="hljs-attribute">animation</span>-timeline: <span class="hljs-built_in">view</span>(block <span class="hljs-number">50%</span> auto);
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/3e0d9a92504d43e9a37904b0eead4ae6~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgRW1icmFjZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741303330&amp;x-signature=xoaBWdHfotMybDYcuRdV7tXsnsk%3D" alt="01ec559f-58e8-4f9c-84c5-33c5dac46d4d.gif" loading="lazy"></p>
<p>这里的50%表示目标元素的<strong>底部</strong>距离<strong>视口高度顶部部</strong>50%的时候才会结束动画执行，这么说不直观我们直接看图</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/1531b44d05d04084be92341feb4dfbed~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgRW1icmFjZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741303330&amp;x-signature=qfN3UEZ2G%2FRGz%2FvG6UlsXdH5ffU%3D" alt="Snipaste_2024-12-27_23-12-07.png" loading="lazy"></p>
<h2 data-id="heading-7">知道了这些我们就可以进行骚操作</h2>
<pre><code class="hljs language-css" lang="css"><span class="hljs-selector-class">.autoShow</span>{
    <span class="hljs-attribute">animation</span>: autoShowAnimation both;
    <span class="hljs-attribute">animation</span>-timeline: <span class="hljs-built_in">view</span>(<span class="hljs-number">50%</span> <span class="hljs-number">5%</span>);
}
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f630a6cb3de843e99e70cea9db456675~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgRW1icmFjZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741303330&amp;x-signature=d%2FFtPuxiGsmpstgckiB8xfO77R4%3D" alt="63253cdf-fb4c-4a2c-967b-f82350082e39.gif" loading="lazy">
是不是和你在很多网页上的效果很像😄🕶？我们不用JavaScript代码就实现了🎇，这简直泰裤辣！</p>
<p>关于代码什么意思相信大家都知道这是什么意思了，表示目标元素远底部距离视口高度顶部50%结束动画，目标元素顶部距离视口底部5%开始动画。</p>
<blockquote>
<p>注意：上面的讲解都是从上往下滑动，如果你是从下往上滑动，把这些结论返回来理解就行。</p>
</blockquote>
<h2 data-id="heading-8">both</h2>
<p>现在我们给所有文字添加上<code>animation-timeline: view(75% 20%);</code></p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/743876c0afd44d949ded267864627709~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgRW1icmFjZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741303330&amp;x-signature=Ewo543Ofb3U%2B9XxBxWhFlCela4I%3D" alt="2af2c2a3-9b35-4932-a68f-e1185bef2b01.gif" loading="lazy"></p>
<blockquote>
<p>诶嘿?这是怎么回事?🤔我们发现我们从上往下滑动没事，但是从下往上滑的时候有段文字很突兀，它是瞬间出现的，这显然是很不优雅的。</p>
</blockquote>
<blockquote>
<p>如何解决呢？🤔难道终于要使用JavaScript吗？</p>
</blockquote>
<p>哈哈😄，其实我们也只需要加一个代码<code>both</code></p>
<pre><code class="hljs language-css" lang="css">    <span class="hljs-attribute">animation</span>: autoShowAnimation both;
    <span class="hljs-attribute">animation</span>-timeline: <span class="hljs-built_in">view</span>(<span class="hljs-number">40%</span> auto);
</code></pre>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/97064633cd024e619e9f0fd1a0d835d9~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgRW1icmFjZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1741303330&amp;x-signature=95vzIXPZY1haPmgJI%2BkswwU335Q%3D" alt="9c1dafe0-2fe0-4f1b-9144-6433b0e4f016.gif" loading="lazy">
发现此时不会出现瞬间出现的问题了。</p>
<p>现在我们来解释在<code>both</code>是什么：<code>both</code>&nbsp;是&nbsp;<code>animation-fill-mode</code>&nbsp;的一个值，它表示动画将在动画执行前和执行后都应用动画的效果。</p>
<p>使用这种&nbsp;<code>both</code>&nbsp;填充模式，可以<strong>确保元素在动画前后都具有相应的样式</strong>，为元素的显示提供更流畅的过渡效果，<strong>避免了动画结束后元素突然回到初始状态或未应用动画开始前样式的问题</strong>。</p>
<h2 data-id="heading-9">总结</h2>
<ul>
<li>学好英语🤡，为了解释这些概念，我因为英语不好误解了将近2个多小时。</li>
<li><code>animation-timeline</code>用于指定动画的时间线。</li>
<li><code>view()</code>，它可以使动画的时间线基于视口的滚动或其他动态因素进行控制。</li>
<li>知道了如何使用<code>view()</code>控制动画的开启和结束</li>
</ul>
<blockquote>
<p>如果这个文章对您有用的话，不妨给作者留下个宝贵的评论（这个是最重要的），以及点赞关注➕收藏。🤩🤩</p>
</blockquote></div></div>