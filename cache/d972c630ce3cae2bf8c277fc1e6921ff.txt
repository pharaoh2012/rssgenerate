
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/OIer-QAQ/p/18837499/Kruskal" title="发布于 2025-04-23 21:45">
    <span role="heading" aria-level="2">图论-最小生成树-基础</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="0x0f-前置">0x0f 前置</h2>
<blockquote>
<p>前置芝士：<a href="https://blog.csdn.net/the_zed/article/details/105126583" target="_blank" rel="noopener nofollow">并查集</a>，<a href="https://oi-wiki.org/graph/concept/" target="_blank" rel="noopener nofollow">图论基础</a>，<a href="" rel="noopener nofollow">数论基础</a><br>
其实最小生成树只是某个人用来装*的   ——  某老师</p>
</blockquote>
<h2 id="1x0f-简介">1x0f 简介</h2>
<p>首先给出生成子图的定义（From OI Wiki）：<br>
<img src="https://img2024.cnblogs.com/blog/3247264/202504/3247264-20250420203226380-1865789564.png" alt="image" loading="lazy"><br>
嗯……有点抽象，不妨简化一下：<br>
有一个图 <span class="math inline">\(G\)</span>，如果删去 <span class="math inline">\(G\)</span> 中的若干条边与若干个点得到一个图 <span class="math inline">\(G'\)</span>，且图 <span class="math inline">\(G'\)</span> 还保证连通，则称 <span class="math inline">\(G'\)</span> 为 <span class="math inline">\(G\)</span> 的生成子图。</p>
<p>那么显然，如果 <span class="math inline">\(G'\)</span> 是一棵树，那么 <span class="math inline">\(G'\)</span> 称为 <span class="math inline">\(G\)</span> 的生成树。</p>
<p>显然，生成树不一定唯一。</p>
<p>那么，最小生成树的“最小”决定于你要求什么，是点权或是边权？由你自己决定。</p>
<h2 id="1x1f-分析">1x1f 分析</h2>
<p>这是一张较为经典的图：<br>
<img src="https://img2024.cnblogs.com/blog/3247264/202504/3247264-20250420210601656-1885095321.png" alt="image" loading="lazy"></p>
<p>那么这方案求最小生成树：</p>
<ul>
<li>使用 dfs 递归选或不选，再判断是否联通<br>
但是 dfs 递归时间本来就慢，而判连通则需更多的时间复杂度，显然不可行。</li>
</ul>
<p>但是，我们可以<s>当和珅</s>贪心！</p>
<blockquote>
<ol>
<li>按照边权排序</li>
<li>选择边7-4，连通7,4</li>
<li>选择边2-8，连通2,8</li>
<li>选择边1-0，连通1,0</li>
<li>选择边0-5，连通0,5</li>
<li>选择边1-8，连通1,8</li>
<li>选择边1-6，连通1-6</li>
<li>选择边3-7，连通3,7</li>
<li>选择边6-5，但是由于6,5已经连通，所以可以不加此边</li>
<li>选择边1-2，但是由于1,2已经连通，所以可以不加此边</li>
<li>选择边6-7，连通6,7</li>
<li>已经形成一棵树，后面的边都不选了</li>
</ol>
</blockquote>
<p>那么我们发现，这个方法需要两种操作：</p>
<ul>
<li>判断两个点是否在同一连通块内</li>
<li>将两个点添加到同一个连通块内<br>
于是，基于并查集与贪心实现的Kruskal闪亮登场！！！</li>
</ul>
<h2 id="1x2f-实现">1x2f 实现</h2>
<h3 id="1x2f0fluogu-p3366模板最小生成树">1x2f0f<a href="https://www.luogu.com.cn/problem/P3366" target="_blank" rel="noopener nofollow">Luogu P3366【模板】最小生成树</a></h3>
<p>首先，定义结构体数组Edge{u,v,w}来表示一条边，使用fa数组来表示并查集</p>
<p>输入及初始化：<img src="https://img2024.cnblogs.com/blog/3247264/202504/3247264-20250420213124432-1281794320.png" alt="image" loading="lazy"></p>
<p>并查集基本操作：<img src="https://img2024.cnblogs.com/blog/3247264/202504/3247264-20250420213227505-92361832.png" alt="image" loading="lazy"></p>
<p>kruskal操作：<br>
特殊处理：<br>
可以发现，在最后如果图本身不连通，还需输出 <code>orz</code> ，我们可以发现，如果图本身不连通，那么最后就不会是一棵树，即 <span class="math inline">\(n-1\not=m\)</span>，判断即可。<br>
<img src="https://img2024.cnblogs.com/blog/3247264/202504/3247264-20250423211056464-1320218342.png" alt="image" loading="lazy"></p>
<h3 id="1x2f1f-luogu-p2820-局域网">1x2f1f <a href="https://www.luogu.com.cn/problem/P2820" target="_blank" rel="noopener nofollow">Luogu P2820 局域网</a></h3>
<p>读题后可以发现，依旧是求最小生成树，只需在一开始求出边权总和，在最后求差值即可。</p>
<p>主要代码：<img src="https://img2024.cnblogs.com/blog/3247264/202504/3247264-20250423212239733-416601894.png" alt="image" loading="lazy"></p>
<h2 id="3x0f-练习题">3x0f 练习题</h2>
<p>基础题：</p>
<ol>
<li><a href="https://www.luogu.com.cn/problem/P1195" target="_blank" rel="noopener nofollow">Luogu P1195 口袋的天空</a></li>
<li><a href="https://www.luogu.com.cn/problem/P1194" target="_blank" rel="noopener nofollow">Luogu P1194 买礼物</a></li>
<li><a href="https://www.luogu.com.cn/problem/P2916" target="_blank" rel="noopener nofollow">Luogu P2916 [USACO08NOV] Cheering up the Cow G</a></li>
<li><a href="https://atcoder.jp/contests/abc328/tasks/abc328_e" target="_blank" rel="noopener nofollow">ATcoder abc328_e</a></li>
</ol>
<p>附加题：</p>
<ol>
<li><a href="https://www.luogu.com.cn/problem/P1265" target="_blank" rel="noopener nofollow">Luogu P1265 公路修建</a></li>
<li><a href="https://www.luogu.com.cn/problem/P2323" target="_blank" rel="noopener nofollow">Luogu P2323 [HNOI2006] 公路修建问题</a></li>
<li><a href="https://www.luogu.com.cn/problem/P2573" target="_blank" rel="noopener nofollow">Luogu P2573 [SCOI2012] 滑雪</a></li>
<li><a href="https://www.luogu.com.cn/problem/P3623" target="_blank" rel="noopener nofollow">Luogu P3623 [APIO2008] 免费道路</a></li>
<li><a href="https://www.luogu.com.cn/problem/P4047" target="_blank" rel="noopener nofollow">Luogu P4047 [JSOI2010] 部落划分</a></li>
</ol>

</div>
<div id="MySignature" role="contentinfo">
    <p>本人（<a href="https://www.cnblogs.com/OIer-QAQ/" target="_blank">KK_SpongeBob</a>）蒟蒻，写不出好文章，但转载请注明原文链接：<a href="https://www.cnblogs.com/OIer-QAQ/p/18837499/Kruskal" target="_blank">https://www.cnblogs.com/OIer-QAQ/p/18837499/Kruskal</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5887604722835648" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-23 22:12">2025-04-23 21:45</span>&nbsp;
<a href="https://www.cnblogs.com/OIer-QAQ">KK_SpongeBob</a>&nbsp;
阅读(<span id="post_view_count">36</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18837499);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18837499', targetLink: 'https://www.cnblogs.com/OIer-QAQ/p/18837499/Kruskal', title: '图论-最小生成树-基础' })">举报</a>
</div>
        