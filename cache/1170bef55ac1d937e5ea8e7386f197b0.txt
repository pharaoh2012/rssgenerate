
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/sdcb/p/19009854/dotnet9-zlib-perf" title="发布于 2025-07-29 08:45">
    <span role="heading" aria-level="2">.NET 9 的免费午餐：GZip 性能提升38.3%</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>大家好，今天我们来聊聊 .NET 9 中一项令人兴奋的性能优化：<strong>zlib-ng</strong> 的集成。这顿“免费的午餐”，我们只需升级框架版本即可享用。</p>
<h2 id="zlib-ng更快的压缩引擎">zlib-ng：更快的压缩引擎</h2>
<p>在.NET 9中，运行时团队将原有的 zlib 库换成了 <strong>zlib-ng</strong>。zlib-ng 是 zlib 的一个现代化分支，专注于性能和功能的增强。简单来说，它在压缩和解压缩操作中提供了更快的速度和更高的效率，尤其是在处理大数据量时，这种优势会更加明显。</p>
<p>口说无凭，实践是检验真理的唯一标准。我专门编写了一个性能测试来直观地评测 .NET 9 和 .NET 8 在压缩与解压缩操作上的性能差异。</p>
<h2 id="性能基准测试">性能基准测试</h2>
<p>这个测试使用了强大的 <code>BenchmarkDotNet</code> 库来进行基准测试，旨在公平地比较两者在处理相同数据集时的表现。</p>
<h3 id="测试代码">测试代码</h3>
<p>测试逻辑很简单：</p>
<ol>
<li><strong>GlobalSetup</strong>: 在所有测试开始前，从微软官方文档页抓取一篇关于 .NET 9 新特性的文章作为原始数据。</li>
<li><strong>预压缩</strong>: 对原始数据进行一次预压缩，为后续的解压缩测试准备好输入数据。</li>
<li><strong>Benchmark (压缩)</strong>: 测试 <code>GZipStream</code> 将原始数据压缩到内存流中的速度。</li>
<li><strong>Benchmark (解压)</strong>: 测试 <code>GZipStream</code> 从内存流中解压数据的速度。</li>
</ol>
<pre><code class="language-csharp">using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Running;
using BenchmarkDotNet.Jobs;
using System.IO.Compression;
using System.Text;

[MemoryDiagnoser]
[RPlotExporter]
[SimpleJob(RuntimeMoniker.Net80)]
[SimpleJob(RuntimeMoniker.Net90)]
public class GZipBenchmark
{
    private byte[] _dataToCompress = null!;
    private byte[] _compressedData = null!;
    private MemoryStream _compressedStream = null!;

    // GlobalSetup: 在所有基准测试运行之前执行一次
    // 用于初始化测试所需的数据，避免将数据准备时间计入测试结果
    [GlobalSetup]
    public async Task GlobalSetup()
    {
        // 从网络获取原始数据
        string originalData = await new HttpClient().GetStringAsync("https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/libraries");
        _dataToCompress = Encoding.UTF8.GetBytes(originalData);
        Console.WriteLine($"压缩前的数据长度: {_dataToCompress.Length}");

        // 预先执行一次压缩，以便为解压缩基准测试准备数据
        using (var memoryStream = new MemoryStream())
        {
            using (var gzipStream = new GZipStream(memoryStream, CompressionLevel.Optimal, leaveOpen: false))
            {
                gzipStream.Write(_dataToCompress, 0, _dataToCompress.Length);
            }
            _compressedData = memoryStream.ToArray();
            _compressedStream = new MemoryStream(_compressedData); // 创建一个用于解压测试的流
        }
        Console.WriteLine($"压缩后的数据长度: {_compressedData.Length}");
    }

    // Benchmark: 标记这是一个需要进行基准测试的方法
    [Benchmark(Description = "GZip 压缩")]
    public void Compress()
    {
        // 使用一个可复用的MemoryStream来接收压缩数据
        using (var compressedStream = new MemoryStream())
        {
            using (var gzipStream = new GZipStream(compressedStream, CompressionLevel.Optimal, leaveOpen: true))
            {
                gzipStream.Write(_dataToCompress, 0, _dataToCompress.Length);
            }
        }
    }

    // Benchmark: 标记这是另一个需要进行基准测试的方法
    [Benchmark(Description = "GZip 解压")]
    public void Decompress()
    {
        // 重置流的位置，以便每次解压都从头开始
        _compressedStream.Position = 0;
        using (var decompressedStream = new MemoryStream())
        {
            using (var decompressionStream = new GZipStream(_compressedStream, CompressionMode.Decompress, leaveOpen: true))
            {
                // 将解压后的数据读出
                decompressionStream.CopyTo(decompressedStream);
            }
        }
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        // 启动BenchmarkDotNet的测试运行器
        var summary = BenchmarkRunner.Run&lt;GZipBenchmark&gt;();
    }
}
</code></pre>
<h3 id="测试结果与分析">测试结果与分析</h3>
<p>话不多说，直接上 <code>BenchmarkDotNet</code> 跑出来的结果：</p>
<pre><code class="language-shell">BenchmarkDotNet v0.15.2, Windows 11 (10.0.26100.4652/24H2/2024Update/HudsonValley)
AMD Ryzen 7 5800X 3.80GHz, 1 CPU, 16 logical and 8 physical cores
.NET SDK 10.0.100-preview.5.25277.114
  [Host]   : .NET 9.0.6 (9.0.625.26613), X64 RyuJIT AVX2
  .NET 8.0 : .NET 8.0.17 (8.0.1725.26602), X64 RyuJIT AVX2
  .NET 9.0 : .NET 9.0.6 (9.0.625.26613), X64 RyuJIT AVX2
</code></pre>
<table>
<thead>
<tr>
<th>Method</th>
<th>Job</th>
<th>Runtime</th>
<th>Mean</th>
<th>Error</th>
<th>StdDev</th>
<th>Gen0</th>
<th>Gen1</th>
<th>Gen2</th>
<th>Allocated</th>
</tr>
</thead>
<tbody>
<tr>
<td>GZip 压缩</td>
<td>.NET 8.0</td>
<td>.NET 8.0</td>
<td>2,201.7 us</td>
<td>23.15 us</td>
<td>21.66 us</td>
<td>3.9063</td>
<td>-</td>
<td>-</td>
<td>120.39 KB</td>
</tr>
<tr>
<td>GZip 解压</td>
<td>.NET 8.0</td>
<td>.NET 8.0</td>
<td>290.3 us</td>
<td>4.97 us</td>
<td>4.65 us</td>
<td>124.5117</td>
<td>124.5117</td>
<td>124.5117</td>
<td>384.53 KB</td>
</tr>
<tr>
<td>GZip 压缩</td>
<td>.NET 9.0</td>
<td>.NET 9.0</td>
<td>1,358.2 us</td>
<td>25.52 us</td>
<td>26.21 us</td>
<td>5.8594</td>
<td>-</td>
<td>-</td>
<td>120.38 KB</td>
</tr>
<tr>
<td>GZip 解压</td>
<td>.NET 9.0</td>
<td>.NET 9.0</td>
<td>207.7 us</td>
<td>3.80 us</td>
<td>5.20 us</td>
<td>124.7559</td>
<td>124.7559</td>
<td>124.7559</td>
<td>384.56 KB</td>
</tr>
</tbody>
</table>
<p>从数据中可以清晰地看到：</p>
<ul>
<li><strong>GZip 压缩</strong>：.NET 9 的平均耗时为 <strong>1,358.2 us</strong>，相比 .NET 8 的 <strong>2,201.7 us</strong>，性能提升了约 <strong>38.3%</strong>！这是一个非常显著的进步。</li>
<li><strong>GZip 解压</strong>：.NET 9 的平均耗时为 <strong>207.7 us</strong>，相比 .NET 8 的 <strong>290.3 us</strong>，性能提升了约 <strong>28.5%</strong>。</li>
</ul>
<p>可见，.NET 9 无论是在压缩还是解压缩操作上，都表现出了远超 .NET 8 的性能。尤其是在压缩速度上，提升幅度巨大，几乎快了四成。</p>
<p><img src="https://img2024.cnblogs.com/blog/233608/202507/233608-20250728230854959-1046370526.png" alt="image" loading="lazy"></p>
<h2 id="总结升级即优化">总结：升级即优化</h2>
<p>.NET 9 中的 zlib-ng 集成为我们开发者提供了一个开箱即用、性能更强的压缩解决方案。通过简单的升级，我们的应用程序就能在处理大数据量时获得更快的压缩和解压缩速度，从而有效提升整体性能。对于任何需要频繁进行数据压缩和解压缩的应用场景（例如 Web API、数据处理管道、文件服务等），.NET 9 无疑是一个值得光速升级的版本。</p>
<p>对我们 .NET 开发者来说，最幸福的事情莫过于此：<strong>想得到性能提升，往往只需要将 <code>csproj</code> 文件中的 <code>TargetFramework</code> 里面的数字调大即可</strong>。这就是 .NET 生态的魅力所在。</p>
<p>通过简单的版本升级，开发者可以轻松享受到框架底层的性能优化和功能增强，而无需进行复杂的代码修改或重构，同时还能保持代码的兼容性和稳定性。这种“无痛升级”的设计理念，使得 .NET 成为一个非常适合快速开发和迭代的平台，尤其是在如今这个对性能和效率要求极高的时代。</p>
<hr>
<p>感谢阅读到这里，如果感觉本文对您有帮助，请不吝<strong>评论</strong>和<strong>点赞</strong>，这也是我持续创作的动力！</p>
<p>也欢迎加入我的 <strong>.NET骚操作 QQ群：495782587</strong>，一起交流 .NET 和 AI 的各种有趣玩法！</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-29 08:45">2025-07-29 08:45</span>&nbsp;
<a href="https://www.cnblogs.com/sdcb">.NET骚操作</a>&nbsp;
阅读(<span id="post_view_count">240</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19009854);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19009854', targetLink: 'https://www.cnblogs.com/sdcb/p/19009854/dotnet9-zlib-perf', title: '.NET 9 的免费午餐：GZip 性能提升38.3%' })">举报</a>
</div>
        