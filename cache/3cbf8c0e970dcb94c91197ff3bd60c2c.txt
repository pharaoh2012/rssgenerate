
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/z4t15/p/18970314" title="发布于 2025-07-07 12:26">
    <span role="heading" aria-level="2">毕昇编译器循环优化实验————一文读懂如何使用毕昇编译器自动调优（openEuler系统）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="毕昇编译器循环优化实验一文读懂如何使用毕昇编译器自动调优openeuler系统">毕昇编译器循环优化实验————一文读懂如何使用毕昇编译器自动调优（openEuler系统）</h1>
<h2 id="前言">前言：</h2>
<p>一次酣畅淋漓得配置与调试过程，个中艰辛不足外人道哉，希望以后的同学可以查阅本篇文章获得一点帮助，这是我最后得波纹了（笑），自动调优确实挺猛得倒是。</p>
<h2 id="一实验目的">（一）实验目的</h2>
<p>通过毕昇编译器对循环进行优化，减少循环控制开销，提高程序的执行效率。</p>
<h2 id="二实验内容">（二）实验内容</h2>
<p>使用毕昇编译器对包含循环的代码进行编译，对比优化前后的性能差异。</p>
<h2 id="三实验过程">（三）实验过程</h2>
<h3 id="1-准备实验环境">1. 准备实验环境</h3>
<ul>
<li>
<p><strong>实验环境要求：</strong></p>
<ul>
<li>参考官方文档要求：<a href="https://www.hikunpeng.com/document/detail/zh/kunpengdevps/compiler/ug-bisheng/kunpengbisheng_06_0005.html#kunpengbisheng_06_0005__section5320285139" target="_blank" rel="noopener nofollow">鲲鹏社区:安装毕昇编译器</a></li>
<li>系统：<strong>openEuler 22.03 LTS SP3</strong>（官方网站上写的是：openEuler 24.03 LTS、openEuler 22.03 LTS、openEuler 20.03 LTS SP1、CentOS 7.6、Ubuntu 18.04、Ubuntu 20.04、麒麟V10、UOS 20，<strong>由于SP版本是补丁版本，基本功能应该和LTS一样，同时华为云上我没找到怎么选择openEuler 22.03 LTS、openEuler 20.03 LTS SP1，因此选择了SP3</strong>）</li>
<li>架构：AArch64</li>
<li>内存：8GB以上</li>
</ul>
</li>
<li>
<p><strong>实验环境配置：</strong></p>
<ul>
<li><strong>注意本实验使用的是系统镜像是SP3，因为当时写博客的时候只有SP2，所以博客中是SP2</strong></li>
<li>云服务器购买：参考我的这篇博客前面的配置过程：<a href="https://www.cnblogs.com/z4t15/p/18491602" target="_blank">在华为云服务器上测试GCC for OpenEuler的特性</a></li>
<li>最终配置：
<ul>
<li>
<p><strong>虚拟云VPC：</strong><br>
<img src="https://img2024.cnblogs.com/blog/3311603/202507/3311603-20250701231256636-1304369387.png" alt="img" loading="lazy"></p>
</li>
<li>
<p><strong>安全组：</strong><br>
<img src="https://img2024.cnblogs.com/blog/3311603/202507/3311603-20250701231426365-1397891946.png" alt="img" loading="lazy"></p>
</li>
<li>
<p><strong>密码：</strong></p>
</li>
<li>
<p><strong>配置表：</strong></p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>配置值</th>
</tr>
</thead>
<tbody>
<tr>
<td>计费模式</td>
<td>按需计费</td>
</tr>
<tr>
<td>区域/可用区</td>
<td>华北-北京四 | 可用区1</td>
</tr>
<tr>
<td>实例规格</td>
<td>鲲鹏通用计算增强型 | kc1.xlarge.4 | 4vCPUs | 16GiB</td>
</tr>
<tr>
<td>操作系统镜像</td>
<td>openEuler-22.03-LTS-SP3 (aarch64)(V22.03)</td>
</tr>
<tr>
<td>系统盘</td>
<td>通用型SSD, 50GiB</td>
</tr>
<tr>
<td>虚拟私有云</td>
<td>vpc-bisheng(192.168.0.0/16)</td>
</tr>
<tr>
<td>主网卡</td>
<td>subnet-bisheng(192.168.0.0/24)</td>
</tr>
<tr>
<td>源/目的检查</td>
<td>开启</td>
</tr>
<tr>
<td>安全组</td>
<td>sg-bisheng（通用web服务器）</td>
</tr>
<tr>
<td>弹性公网IP</td>
<td>全动态BGP | 按流量计费 | 5 Mbit/s</td>
</tr>
<tr>
<td>云服务器名称</td>
<td>ecs-bisheng</td>
</tr>
<tr>
<td>登录凭证</td>
<td>密码</td>
</tr>
<tr>
<td>购买数量</td>
<td>1</td>
</tr>
</tbody>
</table>
<p><img src="https://img2024.cnblogs.com/blog/3311603/202507/3311603-20250701231930682-22109713.png" alt="img" loading="lazy"></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-进入服务器">2. <strong>进入服务器</strong></h3>
<ul>
<li>
<p><strong>连接服务器</strong></p>
<ul>
<li>可以使用终端（cmd或者powershelL）ssh连接服务器，或者使用putty等工具连接服务器。当然这是对于使用windows的同学，如果是mac则使用zsh等工具连接服务器。当然，如果可以的话，还可以使用vscode ssh远程连接，更方便（<strong>可惜我没成功用vscode ssh远程连接</strong>）。</li>
<li>连接服务器需要使用公网ip，可以参考我的博客：<a href="https://www.cnblogs.com/z4t15/p/18491602" target="_blank">在华为云服务器上测试GCC for OpenEuler的特性</a>中的查看方式。<br>
<strong>例如我在实验时，公网ip地址为：124.70.90.76</strong></li>
<li><strong>连接命令：</strong><pre><code class="language-bash">ssh root@&lt;服务器公网IP&gt;
</code></pre>
例：<pre><code class="language-bash">ssh root@124.70.90.76
</code></pre>
</li>
<li><strong>注意：</strong> 连接时需要输入密码，密码是你在购买云服务器时设置的密码。</li>
<li>也可以使用putty连接，同样是参考博客：<a href="https://www.cnblogs.com/z4t15/p/18491602" target="_blank">在华为云服务器上测试GCC for OpenEuler的特性</a>中的连接方式。</li>
<li><strong>连接成功后，进入服务器的命令行界面。</strong>
<ul>
<li>如果不成功请看下一点：<strong>可能会遇到的问题</strong>，或那篇博客<a href="https://www.cnblogs.com/z4t15/p/18491602" target="_blank">在华为云服务器上测试GCC for OpenEuler的特性</a>**</li>
<li>如果成功就是这样的，记得要输入密码，输入密码时看不到输入。<br>
<img src="https://img2024.cnblogs.com/blog/3311603/202507/3311603-20250702002601628-1717024767.png" alt="img" loading="lazy"></li>
<li>接下来要安装毕昇编译器。</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>可能会遇到的问题</strong>：</p>
<ul>
<li><strong>没有密码登录方式</strong>：
<ul>
<li>这是因为<code>sshd_config</code>文件中的<code>PasswordAuthentication</code>设置为<code>no</code>，需要修改为<code>yes</code>。在华为云控制台中找到服务器，点击右侧的管理，然后点击远程登录。</li>
<li><strong>这个图是之前的了，现在的样式如下，但是总归是找到VNC登录</strong></li>
<li><img src="https://img2024.cnblogs.com/blog/3311603/202507/3311603-20250701234704071-1874393250.png" alt="img" loading="lazy"></li>
<li>随后可以在这个页面通过密码登录（输入root，回车，然后输入密码，注意输入密码时你看不到输入）：</li>
<li><img src="https://img2024.cnblogs.com/blog/3311603/202507/3311603-20250701234852832-1157759264.png" alt="img" loading="lazy"></li>
<li>然后打开<code>/etc/ssh/sshd_config</code>文件，找到<code>PasswordAuthentication no</code>，修改为<code>yes</code>：</li>
<li>（需要说明的是，在vnc页面，输入命令必须自己手打，很麻烦，也很慢）</li>
</ul>
<pre><code class="language-shell">vi /etc/ssh/sshd_config
</code></pre>
<ul>
<li><img src="https://img2023.cnblogs.com/blog/3311603/202410/3311603-20241023015939778-2099205429.png" alt="img" loading="lazy"></li>
<li><img src="https://img2023.cnblogs.com/blog/3311603/202410/3311603-20241023021105995-148452958.png" alt="img" loading="lazy"></li>
<li>然后按<code>i</code>进入编辑模式，找到<code>PasswordAuthentication no</code>，修改为<code>yes</code>，同时<code>PermitRootLogin</code>也修改为<code>yes</code>，注意这里一共修改三个位置。不过这是我之前的截图，如果你只找到两个也是正常的，可能是因为配置安全组的时候没有配置2端口。反正只要port22对应的配置修改了就可以。</li>
<li>修改完之后按esc退出编辑模式，输入<code>:wq</code>退出并保存。</li>
<li>然后重启配置文件服务：</li>
</ul>
<pre><code class="language-shell">sudo systemctl restart sshd
service sshd restart
</code></pre>
<ul>
<li>之后就可以通过密码登录了。</li>
</ul>
</li>
<li><strong>vscode无法远程连接(未解决)</strong>：
<ul>
<li>在你配置好密码登录之后，应当可以在powershell或者cmd ssh连接了，但是还可能遇到的是vscode无法远程连接的问题：</li>
<li><img src="https://img2024.cnblogs.com/blog/3311603/202507/3311603-20250702001617370-1705670312.png" alt="img" loading="lazy"></li>
<li><img src="https://img2024.cnblogs.com/blog/3311603/202507/3311603-20250702001237743-2145267376.png" alt="img" loading="lazy"></li>
<li>解决办法是通过终端直接ssh连接，然后同样的修改<code>/etc/ssh/sshd_config</code>文件，将<code>PasswordAuthentication no</code>修改为<code>yes</code>，或者是把原本是注释的<code>#PasswordAuthentication yes</code>去掉注释，然后重启服务。</li>
</ul>
<pre><code class="language-shell">sudo systemctl restart sshd
service sshd restart
</code></pre>
<ul>
<li><img src="https://img2024.cnblogs.com/blog/3311603/202507/3311603-20250702001144125-1089513452.png" alt="img" loading="lazy"></li>
<li>然后，不报错了，但是还是登陆不了，我也没找到原因。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="3安装毕昇编译器">3.<strong>安装毕昇编译器</strong></h3>
<ul>
<li>
<p><strong>添加源</strong>：因openEuler的仓库网址可能会更新，所以请访问oepkgs获取最新的仓库网址。使用以下命令添加源：</p>
<pre><code class="language-bash">添加源
dnf config-manager --add-repo https://repo.oepkgs.net/openeuler/rpm/openEuler-22.03-LTS/extras/aarch64/
</code></pre>
<h3 id="关于这里为什么不是sp3因为用sp3下载的源无法下载毕昇编译器不过用了这个命令后后面还是遇到bug了">关于这里为什么不是sp3,因为用sp3下载的源无法下载毕昇编译器，不过用了这个命令后，后面还是遇到bug了</h3>
<p><strong>注意，上面这个指令疑似有问题</strong>，我后面遇到下载编译python3.11得工具无法下载时，运行得下面这些操作<br>
首先备份</p>
<pre><code>
# 进入仓库配置目录
cd /etc/yum.repos.d/

# 创建一个备份文件夹
sudo mkdir repo_backup

# 把所有 .repo 文件移入备份文件夹
sudo mv *.repo repo_backup/
</code></pre>
<p>之后，执行</p>
<pre><code class="language-bash">sudo tee /etc/yum.repos.d/openEuler.repo &gt; /dev/null &lt;&lt;'EOF'
[OS]
name=openEuler-22.03-LTS-SP3-OS
baseurl=https://repo.openeuler.org/openEuler-22.03-LTS-SP3/OS/aarch64/
enabled=1
gpgcheck=1
gpgkey=https://repo.openeuler.org/openEuler-22.03-LTS-SP3/OS/aarch64/RPM-GPG-KEY-openEuler

[everything]
name=openEuler-22.03-LTS-SP3-everything
baseurl=https://repo.openeuler.org/openEuler-22.03-LTS-SP3/everything/aarch64/
enabled=1
gpgcheck=1
gpgkey=https://repo.openeuler.org/openEuler-22.03-LTS-SP3/everything/aarch64/RPM-GPG-KEY-openEuler

[EPOL]
name=openEuler-22.03-LTS-SP3-EPOL
baseurl=https://repo.openeuler.org/openEuler-22.03-LTS-SP3/EPOL/main/aarch64/
enabled=1
gpgcheck=1
gpgkey=https://repo.openeuler.org/openEuler-22.03-LTS-SP3/EPOL/main/aarch64/RPM-GPG-KEY-openEuler

[update]
name=openEuler-22.03-LTS-SP3-update
baseurl=https://repo.openeuler.org/openEuler-22.03-LTS-SP3/update/aarch64/
enabled=1
gpgcheck=1
gpgkey=https://repo.openeuler.org/openEuler-22.03-LTS-SP3/update/aarch64/RPM-GPG-KEY-openEuler
EOF
</code></pre>
<p>之后再：</p>
<pre><code class="language-bash">sudo dnf clean all
sudo dnf makecache
</code></pre>
</li>
<li>
<p><strong>更新源索引</strong>：</p>
<pre><code class="language-bash">dnf update
</code></pre>
<p>如果遇到这样的错误：</p>
<pre><code class="language-bash">Error: GPG check FAILED
</code></pre>
<p>这是因为openEuler的仓库没有签名，导致dnf无法验证包的完整性。可以通过以下命令禁用GPG检查来更新：</p>
<pre><code class="language-bash">dnf update --nogpgcheck
</code></pre>
</li>
<li>
<p><strong>判断是否安装LLVM编译器</strong>：可以通过运行<code>llc --version</code>命令来判断是否安装了LLVM编译器。如果系统输出LLVM的版本信息，则说明已经安装；如果提示命令未找到，则说明系统未安装LLVM编译器。</p>
</li>
<li>
<p><strong>安装BiShengCompiler软件包</strong>：</p>
<pre><code class="language-bash">dnf install BiShengCompiler.aarch64 --nogpgcheck
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3311603/202507/3311603-20250703174455889-46717461.png" alt="img" loading="lazy"></p>
<p>此时运行<code>llc --version</code>命令，输出结果如下：<br>
<img src="https://img2024.cnblogs.com/blog/3311603/202507/3311603-20250703174548549-986235091.png" alt="img" loading="lazy"><br>
则不用运行<code>hash -r</code>命令。</p>
</li>
<li>
<p><strong>（可选）清空当前窗口的hash缓存表</strong>：如果系统中有其他版本的LLVM编译器，（即判断是否安装LLVM编译器这一步发现有其他得LLVM得编译器），请在安装毕昇编译器之后立即运行如下命令：</p>
<pre><code class="language-bash">hash -r
</code></pre>
</li>
<li>
<p><strong>验证安装是否成功</strong>：安装完毕后执行如下命令验证毕昇编译器版本：</p>
<pre><code class="language-bash">clang -v
</code></pre>
<p>若返回结果已包含BiSheng compiler版本信息，说明安装成功。<br>
<img src="https://img2024.cnblogs.com/blog/3311603/202507/3311603-20250703174647067-1995145727.png" alt="img" loading="lazy"></p>
</li>
</ul>
<h3 id="4-安装autotuner工具">4. <strong>安装AutoTuner工具</strong></h3>
<p>需要先环境变量配置:<br>
<code>bash     export PATH=/usr/local/bin:$PATH     export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH     </code><br>
运行下列命令，让环境变量临时生效：<br>
<code>bash     source ~/.bashrc     </code></p>
<p>之后要运行脚本下载autotuner，这需要python版本为3.11以上，但是自带得python是3.9，所以需要先编译python3.11</p>
<pre><code class="language-bash">sudo dnf groupinstall "Development Tools" -y

sudo dnf install openssl-devel bzip2-devel libffi-devel xz-devel sqlite-devel -y

# 之后进入家目录
cd ~

# 下载Python 3.11.9的源代码
wget https://registry.npmmirror.com/-/binary/python/3.11.9/Python-3.11.9.tgz

# 解压下载的源代码包
tar -xf Python-3.11.9.tgz


# 进入解压后的源代码目录
cd Python-3.11.9

# 1. 配置构建过程（--enable-optimizations 会让最终的 Python 运行得更快）
./configure --enable-optimizations

# 2. 开始编译（-j $(nproc) 会使用你服务器的所有CPU核心来加速编译）
make -j $(nproc)

# 3. 执行安装（使用 altinstall 会安装成 python3.11，不会覆盖系统自带的 python3.9，非常安全）
sudo make altinstall
</code></pre>
<p>之后运行以下命令检查python版本：</p>
<pre><code class="language-bash">python3.11 --version
</code></pre>
<p>如果输出类似 <code>Python 3.11.9</code>，则说明安装成功。</p>
<p>之后我们要创建并激活虚拟环境<br>
这是为了给 autotuner 一个干净的家，不会和系统其他部分冲突。</p>
<pre><code class="language-Bash">
# 使用 python3.11 创建一个名为 autotuner_env 的环境
python3.11 -m venv --system-site-packages ~/autotuner_env

# 激活这个环境
source ~/autotuner_env/bin/activate
</code></pre>
<p>(激活后，你的命令行提示符前面会出现 (autotuner_env) 字样)<br>
<img src="https://img2024.cnblogs.com/blog/3311603/202507/3311603-20250706020902108-1885865444.png" alt="img" loading="lazy"></p>
<p>之后安装 Autotuner<br>
现在，在虚拟环境中，运行安装脚本：</p>
<pre><code class="language-bash">    
# 确保你在正确的实验目录下
cd ~/bisheng_compiler_experiments/exp1_loop_unrolling/

# 运行安装脚本
install-autotuner.sh
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3311603/202507/3311603-20250706021645951-1261658918.png" alt="img" loading="lazy"></p>
<h3 id="5规范实验文件结构">5.规范实验文件结构</h3>
<p>为了保持实验过程的清晰和有序，需为本次所有实验创建标准化的目录结构。</p>
<ol>
<li>
<p><strong>创建主实验目录并进入</strong></p>
<pre><code class="language-bash">cd ~
mkdir bisheng_compiler_experiments
cd bisheng_compiler_experiments
</code></pre>
</li>
<li>
<p><strong>为所有实验创建子目录</strong></p>
<pre><code class="language-bash">mkdir exp1_loop_unrolling exp2_loop_fusion exp3_strength_reduction exp4_tiling
</code></pre>
<p>后续每个实验都应在其对应的子目录中进行。</p>
</li>
</ol>
<hr>
<h3 id="实验一循环展开-loop-unrolling">实验一：循环展开 (Loop Unrolling)</h3>
<h4 id="一实验目的-1">（一）实验目的</h4>
<p>理解循环展开的基本原理，并通过毕昇编译器实践该优化，分析其对程序性能的影响。循环展开是一种通过减少循环迭代次数和控制开销来提升性能的技巧。</p>
<h4 id="二实验内容-1">（二）实验内容</h4>
<p>编写一个包含密集计算的循环程序，分别在开启和关闭循环展开优化的情况下编译并运行，对比两者的执行效率。</p>
<h4 id="三实验过程-1">（三）实验过程</h4>
<ol>
<li>
<p><strong>进入实验目录</strong></p>
<pre><code class="language-bash">cd ~/bisheng_compiler_experiments/exp1_loop_unrolling/
</code></pre>
</li>
<li>
<p><strong>编写测试代码</strong><br>
<strong>下面这部分编写代码部分不用了</strong><br>
为了有效衡量性能差异，需编写一个计算量足够大的程序。创建 <code>loop_unroll_test.c</code> 文件。</p>
<pre><code class="language-bash">vim loop_unroll_test.c
</code></pre>
<p>没有vim可以运行下面的命令下载vim：</p>
<pre><code class="language-bash">dnf install vim -y --nogpgcheck
</code></pre>
<p>将以下代码粘贴入文件并保存：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;

#define ARRAY_SIZE 10000
#define OUTER_LOOPS 50000

int main() {
    int *arr = (int *)malloc(ARRAY_SIZE * sizeof(int));
    if (arr == NULL) { return 1; }

    for (int i = 0; i &lt; ARRAY_SIZE; i++) { arr[i] = i % 10; }

    long long total_sum = 0;
    clock_t start = clock();

    for (int j = 0; j &lt; OUTER_LOOPS; j++) {
        int sum = 0;
        for (int i = 0; i &lt; ARRAY_SIZE; i++) {
            sum += arr[i];
        }
        total_sum += sum;
    }

    clock_t end = clock();
    double cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;

    // 将结果重定向到stderr，以便stdout只输出性能指标
    fprintf(stderr, "计算完成，总和的低32位是: %lld\n", total_sum &amp; 0xFFFFFFFF);
    // AI调优工具通过捕捉stdout来获取性能数据，因此这里只打印关键的执行时间
    printf("%f\n", cpu_time_used);

    free(arr);
    return 0;
}
</code></pre>
<h4 id="上面这份代码弃用因为autotune找不到优化的点应该是太简单了"><strong>上面这份代码弃用，因为autotune找不到优化的点，应该是太简单了</strong></h4>
<h4 id="使用官方文档中用的coremark的代码">使用官方文档中用的coremark的代码：</h4>
<pre><code class="language-bash"># 确保你在实验主目录下
cd ~/bisheng_compiler_experiments/

# 使用git下载coremark
git clone https://github.com/eembc/coremark.git

# 也可以用gitee
git clone https://gitee.com/chainsx/coremark.git
</code></pre>
</li>
<li>
<p><strong>编译优化版本 (开启循环展开)，使用AutoTuner进行调优</strong></p>
<pre><code class="language-bash"># 进入 coremark 目录
cd coremark/

# 步骤1：配置环境变量 (我们指定一个新目录，确保是干净的)
export AUTOTUNE_DATADIR=~/autotuner_coremark_data/
rm -rf $AUTOTUNE_DATADIR
mkdir -p $AUTOTUNE_DATADIR

# 步骤2：执行与官方文档完全一致的初始编译命令
# 这个命令会分析 coremark 的多个源文件并生成调优机会
clang -O2 -o coremark core_list_join.c core_main.c core_matrix.c core_state.c core_util.c posix/core_portme.c -DPERFORMANCE_RUN=1 -DITERATIONS=300000 -I. -Iposix -g -DFLAGS_STR=\"\" -fautotune-generate
</code></pre>
<p>检查一下是否生成内容：</p>
<pre><code class="language-bash">ls -R $AUTOTUNE_DATADIR
</code></pre>
<p>应当出现：</p>
<pre><code class="language-bash">[root@ecs-bisheng coremark]# ls -R $AUTOTUNE_DATADIR
/root/autotuner_coremark_data/:
opp

/root/autotuner_coremark_data/opp:
core_list_join.c.yaml  core_main.c.yaml  core_matrix.c.yaml  core_state.c.yaml  core_util.c.yaml
</code></pre>
<p>之后：</p>
<pre><code class="language-bash"># (记得进虚拟环境，如果你发现你现在不在虚拟环境中)
source ~/autotuner_env/bin/activate
# 步骤3：初始化调优
llvm-autotune minimize
</code></pre>
<p>应当看到：</p>
<pre><code class="language-bash">(autotuner_env) [root@ecs-bisheng coremark]# llvm-autotune minimize
[     0s] WARNING autotuner.resumable.interface: Environment variable CONFIG_DB_DIR is not set; a default directory is used for saving the config database: /root/autotuner_coremark_data/
[     1s]    INFO autotuner.resumable.interface: Initialized a new tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 1)
(autotuner_env) [root@ecs-bisheng coremark]#
</code></pre>
<p>之后</p>
<pre><code class="language-bash"># 步骤4、5、6：迭代调优（这里以20次为例）
for i in $(seq 20)
do
# 步骤4：调优编译
clang -O2 -o coremark core_list_join.c core_main.c core_matrix.c core_state.c core_util.c posix/core_portme.c -DPERFORMANCE_RUN=1 -DITERATIONS=300000 -I. -Iposix -g -DFLAGS_STR=\"\" -fautotune

# 步骤5：性能反馈 (使用程序自带的计时输出，更可靠)
time_cost=$(./coremark 0x0 0x0 0x66 300000 | grep "Total time" | awk '{print $4}')

echo "Iteration $i -&gt; Captured time: $time_cost"

# 反馈给tuner
llvm-autotune feedback $time_cost
done
</code></pre>
<p>应当看到类似以下输出：</p>
<pre><code class="language-bash">Iteration 1 -&gt; Captured time: 19.464000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 19.464000 for configuration (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 2)
Iteration 2 -&gt; Captured time: 19.508000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 19.508000 for configuration (ID: 2)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 3)
Iteration 3 -&gt; Captured time: 19.425000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 19.425000 for configuration (ID: 3)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 4)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3311603/202507/3311603-20250706140953633-1978324847.png" alt="img" loading="lazy"></p>
<p>这一步得执行和效果：</p>
<pre><code class="language-bash">(autotuner_env) [root@ecs-bisheng coremark]# for i in $(seq 20)
&gt; do
&gt;   # 步骤4：调优编译 (这一步不变)
&gt;   clang -O2 -o coremark core_list_join.c core_main.c core_matrix.c core_state.c core_util.c posix/core_portme.c -DPERFORMANCE_RUN=1 -DITERATIONS=300000 -I. -Iposix -g -DFLAGS_STR=\"\" -fautotune
&gt;
&gt;   # 步骤5：性能反馈 (使用程序自带的计时输出，更可靠)
&gt;   time_cost=$(./coremark 0x0 0x0 0x66 300000 | grep "Total time" | awk '{print $4}')
&gt;
&gt;   echo "Iteration $i -&gt; Captured time: $time_cost"
&gt;
&gt;   # 反馈给tuner (这一步不变)
&gt;   llvm-autotune feedback $time_cost
&gt; done
Iteration 1 -&gt; Captured time: 19.464000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 19.464000 for configuration (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 2)
Iteration 2 -&gt; Captured time: 19.508000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 19.508000 for configuration (ID: 2)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 3)
Iteration 3 -&gt; Captured time: 19.425000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 19.425000 for configuration (ID: 3)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 4)
Iteration 4 -&gt; Captured time: 18.588000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 18.588000 for configuration (ID: 4)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 5)
Iteration 5 -&gt; Captured time: 18.618000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 18.618000 for configuration (ID: 5)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 6)
Iteration 6 -&gt; Captured time: 18.761000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 18.761000 for configuration (ID: 6)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 7)
Iteration 7 -&gt; Captured time: 18.753000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 18.753000 for configuration (ID: 7)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 8)
Iteration 8 -&gt; Captured time: 19.039000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 19.039000 for configuration (ID: 8)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 9)
Iteration 9 -&gt; Captured time: 18.625000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 18.625000 for configuration (ID: 9)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 10)
Iteration 10 -&gt; Captured time: 19.108000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 19.108000 for configuration (ID: 10)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 11)
Iteration 11 -&gt; Captured time: 19.123000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 19.123000 for configuration (ID: 11)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 12)
Iteration 12 -&gt; Captured time: 19.251000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 19.251000 for configuration (ID: 12)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 13)
Iteration 13 -&gt; Captured time: 19.404000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 19.404000 for configuration (ID: 13)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 14)
Iteration 14 -&gt; Captured time: 19.132000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 19.132000 for configuration (ID: 14)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 16)
Iteration 15 -&gt; Captured time: 19.058000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 19.058000 for configuration (ID: 16)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 17)
Iteration 16 -&gt; Captured time: 18.626000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 18.626000 for configuration (ID: 17)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 18)
Iteration 17 -&gt; Captured time: 18.292000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 18.292000 for configuration (ID: 18)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 19)
Iteration 18 -&gt; Captured time: 19.028000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 19.028000 for configuration (ID: 19)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 20)
Iteration 19 -&gt; Captured time: 18.789000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 18.789000 for configuration (ID: 20)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 21)
Iteration 20 -&gt; Captured time: 18.498000
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Received performance feedback 18.498000 for configuration (ID: 21)
[     1s]    INFO autotuner.resumable.interface: Generated a new configuration (ID: 22)

</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3311603/202507/3311603-20250706141651837-1854132833.png" alt="img" loading="lazy"><br>
可以看到，是在优化的</p>
<pre><code class="language-bash"># 步骤7：结束调优，保存最终配置
llvm-autotune finalize
</code></pre>
<p>这一步是这样得：</p>
<pre><code class="language-bash">(autotuner_env) [root@ecs-bisheng coremark]# llvm-autotune finalize
[     1s]    INFO autotuner.resumable.interface: Resumed a tuning run (ID: 1)
[     1s]    INFO autotuner.resumable.interface: Best performance feedback is 18.292
[     1s]    INFO autotuner.resumable.interface: Wrote optimal configuration to /root/autotuner_coremark_data/config.yaml; re-compile with -fautotune to apply it
[     1s]    INFO autotuner.resumable.interface: Finalized a tuning run (ID: 1)
(autotuner_env) [root@ecs-bisheng coremark]#
</code></pre>
<p>然后，我们要用最终配置重新编译 coremark：</p>
<pre><code class="language-bash">
# 下面得命令可以自动加载最优配置文件，但是需要是你配置的环境变量都还有效。
clang -O2 -o coremark_autotuned core_list_join.c core_main.c core_matrix.c core_state.c core_util.c posix/core_portme.c -DPERFORMANCE_RUN=1 -DITERATIONS=300000 -I. -Iposix -g -DFLAGS_STR=\"\" -fautotune

# 官方文档还说可以直接指定得配置文件路径，如果你和我步骤一样，就直接用这个
clang -O2 -o coremark_autotuned core_list_join.c core_main.c core_matrix.c core_state.c core_util.c posix/core_portme.c -DPERFORMANCE_RUN=1 -DITERATIONS=300000 -I. -Iposix -g -DFLAGS_STR=\"\" -mllvm -auto-tuning-input=/root/autotuner_coremark_data/config.yaml


</code></pre>
<p>这一步我用的就是</p>
<pre><code class="language-bash">clang -O2 -o coremark_autotuned core_list_join.c core_main.c core_matrix.c core_state.c core_util.c posix/core_portme.c -DPERFORMANCE_RUN=1 -DITERATIONS=300000 -I. -Iposix -g -DFLAGS_STR=\"\" -fautotune
</code></pre>
<p>编译出的可执行文件 <code>coremark_autotuned</code>。</p>
</li>
<li>
<p>性能对比</p>
<pre><code class="language-bash"># 编译一个最新的基准版做对比
    clang -O2 -o coremark_original core_list_join.c core_main.c core_matrix.c core_state.c core_util.c posix/core_portme.c -DPERFORMANCE_RUN=1 -DITERATIONS=300000 -I. -Iposix -g -DFLAGS_STR=\"\"

    echo "--- 运行基准版本 ---"
    ./coremark_original 0x0 0x0 0x66 300000

    echo ""
    echo "--- 运行 Autotuner 调优后的最终版本 ---"
    ./coremark_autotuned 0x0 0x0 0x66 300000
</code></pre>
<p>结果：</p>
<pre><code class="language-bash"># 优化后的
(autotuner_env) [root@ecs-bisheng coremark]# ./coremark_autotuned 0x0 0x0 0x66 300000
2K performance run parameters for coremark.
CoreMark Size    : 666
Total ticks      : 18289
Total time (secs): 18.289000
Iterations/Sec   : 16403.302532
Iterations       : 300000
Compiler version : BiSheng Enterprise 4.2.0.B009 Clang 17.0.6 (958fd14d28f0)
Compiler flags   :
Memory location  : Please put data memory location here
                        (e.g. code in flash, data on heap etc)
seedcrc          : 0xe9f5
[0]crclist       : 0xe714
[0]crcmatrix     : 0x1fd7
[0]crcstate      : 0x8e3a
[0]crcfinal      : 0xcc42
Correct operation validated. See README.md for run and reporting rules.
CoreMark 1.0 : 16403.302532 / BiSheng Enterprise 4.2.0.B009 Clang 17.0.6 (958fd14d28f0)  / Heap
# 原始版本
(autotuner_env) [root@ecs-bisheng coremark]# ./coremark_original 0x0 0x0 0x66 300000
2K performance run parameters for coremark.
CoreMark Size    : 666
Total ticks      : 18742
Total time (secs): 18.742000
Iterations/Sec   : 16006.829581
Iterations       : 300000
Compiler version : BiSheng Enterprise 4.2.0.B009 Clang 17.0.6 (958fd14d28f0)
Compiler flags   :
Memory location  : Please put data memory location here
                        (e.g. code in flash, data on heap etc)
seedcrc          : 0xe9f5
[0]crclist       : 0xe714
[0]crcmatrix     : 0x1fd7
[0]crcstate      : 0x8e3a
[0]crcfinal      : 0xcc42
Correct operation validated. See README.md for run and reporting rules.
CoreMark 1.0 : 16006.829581 / BiSheng Enterprise 4.2.0.B009 Clang 17.0.6 (958fd14d28f0)  / Heap
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3311603/202507/3311603-20250706143353948-173388338.png" alt="img" loading="lazy"></p>
</li>
</ol>
<h4 id="四结果与分析">（四）结果与分析</h4>
<table>
<thead>
<tr>
<th>版本</th>
<th>总时间（秒）</th>
<th>CoreMark 分数（迭代次数/秒）</th>
<th>性能更改</th>
</tr>
</thead>
<tbody>
<tr>
<td>基线 （coremark_original）</td>
<td>18.726</td>
<td>16020.5</td>
<td>—</td>
</tr>
<tr>
<td>Autotuner 优化 （coremark_autotuned）</td>
<td>18.289</td>
<td>16403.3</td>
<td>快 ~2.4%</td>
</tr>
</tbody>
</table>
<p>从实验结果可以看出，通过毕昇编译器的 AutoTuner 工具进行循环展开优化后：</p>
<ol>
<li><strong>执行时间减少</strong>：从 18.726 秒优化到 18.289 秒，减少了约 0.437 秒</li>
<li><strong>性能提升显著</strong>：CoreMark 分数从 16020.5 提升到 16403.3，性能提升约 2.4%</li>
<li><strong>优化效果明显</strong>：在相同的计算负载下，优化版本能够更高效地完成任务</li>
</ol>
<p>这一结果验证了循环展开优化的有效性。AutoTuner 通过自动调整循环展开参数，找到了最优的配置，减少了循环控制开销，提高了程序的执行效率。</p>
<hr>
<h3 id="实验二循环合并-loop-fusion">实验二：循环合并 (Loop Fusion)</h3>
<h4 id="一实验目的-2">（一）实验目的</h4>
<p>理解循环合并的条件与优势，并通过毕昇编译器实践该优化。循环合并（或称循环融合）将两个具有相同循环次数且数据无依赖的相邻循环合并为一个，以减少循环开销并改善数据局部性。</p>
<h4 id="二实验内容-2">（二）实验内容</h4>
<p>编写包含两个可合并循环的程序，对比优化前后的性能。</p>
<h4 id="三实验过程-2">（三）实验过程</h4>
<ol>
<li>
<p><strong>进入实验目录</strong></p>
<pre><code class="language-bash"># (确保已激活虚拟环境)
source ~/autotuner_env/bin/activate
cd ~/bisheng_compiler_experiments/exp2_loop_fusion/
</code></pre>
</li>
<li>
<p><strong>编写测试代码</strong><br>
创建 <code>loop_fusion_test.c</code> 文件。此代码包含两个独立的、可被合并的循环。</p>
<pre><code class="language-bash">vim loop_fusion_test.c
</code></pre>
<p>粘贴以下代码并保存：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;

// 使用足够大的数组尺寸来突出缓存和循环开销的影响
#define N 30000000

int main() {
    // 分配4个大数组以增加内存访问压力
    float *a = (float*)malloc(N * sizeof(float));
    float *b = (float*)malloc(N * sizeof(float));
    float *c = (float*)malloc(N * sizeof(float));
    float *d = (float*)malloc(N * sizeof(float));

    if (!a || !b || !c || !d) {
        fprintf(stderr, "Memory allocation failed\n");
        return 1;
    }

    // 初始化数据
    for (int i = 0; i &lt; N; i++) {
        a[i] = (float)i;
        b[i] = (float)(N - i);
        c[i] = 0.0f;
        d[i] = 0.0f;
    }

    clock_t start = clock();

    // 这两个循环数据独立，是循环合并的完美候选
    // 第一个循环
    for (int i = 0; i &lt; N; i++) {
        c[i] = a[i] + b[i];
    }

    // 第二个循环
    for (int i = 0; i &lt; N; i++) {
        d[i] = a[i] * 0.5f;
    }

    clock_t end = clock();
    double cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;

    // 使用c和d的结果来防止死代码消除
    float checksum = 0.0f;
    for(int i = 0; i &lt; N; i++) {
        checksum += c[i] + d[i];
    }
    fprintf(stderr, "Checksum: %f\n", checksum);

    printf("执行时间: %f 秒\n", cpu_time_used);

    free(a);
    free(b);
    free(c);
    free(d);

    return 0;
}
</code></pre>
</li>
<li>
<p><strong>编译基准版本</strong></p>
<pre><code class="language-bash">clang -O0 -o fusion_test_O0 loop_fusion_test.c
clang -O1 -o fusion_test_O1 loop_fusion_test.c
clang -O2 -o fusion_test_O2 loop_fusion_test.c
</code></pre>
</li>
<li>
<p><strong>使用 Autotuner 进行调优</strong></p>
<p>现在使用 Autotuner 来查看它是否能在默认优化的基础上找到更好的配置。</p>
<pre><code class="language-bash"># 1. 配置环境并分析代码
export AUTOTUNE_DATADIR=~/autotuner_fusion_data/
rm -rf $AUTOTUNE_DATADIR
mkdir -p $AUTOTUNE_DATADIR
clang -O2 -o fusion_test_autotuned loop_fusion_test.c -fautotune-generate

# 2. 初始化调优
llvm-autotune minimize

# 3. 迭代调优（以5-10次为例）
for i in $(seq 10)
do
clang -O2 -o fusion_test_autotuned loop_fusion_test.c -fautotune
time_cost=$(./fusion_test_autotuned | grep "执行时间" | awk '{print $2}')
echo "Iteration $i -&gt; Time: $time_cost"
llvm-autotune feedback $time_cost
done

# 4. 结束调优并生成最终版本
llvm-autotune finalize
clang -O2 -o fusion_test_autotuned loop_fusion_test.c -fautotune
</code></pre>
</li>
<li>
<p><strong>性能对比</strong></p>
<pre><code class="language-bash"># echo "--- O0 (无优化, 无合并) 版本 ---"
./fusion_test_O0

# echo "--- O1 (带合并) 版本 ---"
./fusion_test_O1

# echo "--- O2 (带合并) 版本 ---"
./fusion_test_O2

# echo "--- Autotuner 优化版本 ---"
./fusion_test_autotuned
</code></pre>
<p>结果：</p>
<pre><code class="language-bash">(autotuner_env) [root@ecs-bisheng exp2_loop_fusion]# ./fusion_test_O0
Checksum: 1125899906842624.000000
执行时间: 0.419147 秒
(autotuner_env) [root@ecs-bisheng exp2_loop_fusion]# ./fusion_test_O1
Checksum: 1125899906842624.000000
执行时间: 0.077520 秒
(autotuner_env) [root@ecs-bisheng exp2_loop_fusion]# ./fusion_test_O2
Checksum: 1125899906842624.000000
执行时间: 0.047117 秒
(autotuner_env) [root@ecs-bisheng exp2_loop_fusion]# ./fusion_test_autotuned
Checksum: 1125899906842624.000000
执行时间: 0.041144 秒
</code></pre>
</li>
</ol>
<h4 id="四结果与分析-1">（四）结果与分析</h4>
<p>在实验中，我们将观察到以下结果：<br>
<img src="https://img2024.cnblogs.com/blog/3311603/202507/3311603-20250706154358040-240422603.png" alt="img" loading="lazy"></p>
<table>
<thead>
<tr>
<th style="text-align: left">版本</th>
<th style="text-align: left">编译选项</th>
<th style="text-align: left">执行时间 (秒)</th>
<th style="text-align: left">性能对比 (相对-O0)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left"><strong>基准版 (O0)</strong></td>
<td style="text-align: left"><code>-O0</code></td>
<td style="text-align: left">0.419</td>
<td style="text-align: left">1.00x</td>
</tr>
<tr>
<td style="text-align: left"><strong>基础优化版 (O1)</strong></td>
<td style="text-align: left"><code>-O1</code></td>
<td style="text-align: left">0.078</td>
<td style="text-align: left"><strong>快 5.4 倍</strong></td>
</tr>
<tr>
<td style="text-align: left"><strong>标准优化版 (O2)</strong></td>
<td style="text-align: left"><code>-O2</code></td>
<td style="text-align: left">0.047</td>
<td style="text-align: left"><strong>快 8.9 倍</strong></td>
</tr>
<tr>
<td style="text-align: left"><strong>Autotuner 优化版</strong></td>
<td style="text-align: left"><code>-O2</code> + Autotuner</td>
<td style="text-align: left"><strong>0.041</strong></td>
<td style="text-align: left"><strong>快 10.2 倍</strong></td>
</tr>
</tbody>
</table>
<hr>
<h3 id="结论分析"><strong>结论分析</strong></h3>
<ol>
<li>
<p><strong>循环合并的巨大威力 (<code>-O0</code> vs <code>-O1</code>)</strong>:<br>
从 <code>-O0</code> 到 <code>-O1</code>，性能提升了超过5倍。这主要归功于编译器执行了<strong>循环合并</strong>。将两个独立的循环合并成一个，不仅将循环控制的开销减半，更重要的是<strong>极大地提升了数据局部性</strong>。CPU一次将 <code>a[i]</code> 和 <code>b[i]</code> 读入缓存后，可以立刻完成两次计算 (<code>c[i] = a[i] + b[i]</code> 和 <code>d[i] = a[i] * 0.5f</code>)，而无需在第二个循环开始时重新从内存中读取 <code>a[i]</code> 和 <code>b[i]</code>。</p>
</li>
<li>
<p><strong><code>-O2</code> 的进一步优化 (<code>-O1</code> vs <code>-O2</code>)</strong>:<br>
从 <code>-O1</code> 到 <code>-O2</code>，性能几乎又翻了一倍。这表明 <code>-O2</code> 级别在循环合并的基础上，启动了更多强大的优化，最主要的是<strong>自动向量化 (Auto-Vectorization)</strong>。编译器利用了CPU的SIMD（单指令多数据）单元，使得一次可以对多个浮点数（例如4个或8个）同时执行加法或乘法运算，从而带来性能的巨大飞跃。</p>
</li>
<li>
<p><strong>Autotuner 的效果 (<code>-O2</code> vs <code>Autotuner</code>)</strong>:<br>
在强大的 <code>-O2</code> 优化基础上，Autotuner 再次将性能提升了约 <strong>14.5%</strong>（<code>0.047 / 0.041 ≈ 1.146</code>）。这证明，对于这个计算和访存都足够复杂的场景，编译器的默认 <code>-O2</code> 启发式策略虽然已经很优秀，但仍未达到最优。Autotuner 通过10次迭代搜索，成功找到了一个更极致的参数组合（可能涉及更优的循环展开因子、指令预取距离或向量化策略），从而压榨出了最后的性能潜力。</p>
</li>
</ol>
<p><strong>总而言之</strong>，本实验展示了从无优化、到基础优化（循环合并）、到高级优化（向量化）、再到AI自动调优的完整性能提升路径，并成功验证了 <code>llvm-autotune</code> 在复杂场景下超越标准优化的能力。</p>
<h5 id="实验结论"><strong>实验结论</strong></h5>
<p>根据以上数据，我们可以得出以下两点重要结论：</p>
<ol>
<li>
<p><strong>循环合并效果极其显著</strong>：从未优化的 <code>-O0</code> 版本（<code>0.241</code>秒）到开启了标准优化的 <code>-O2</code> 版本（<code>0.056</code>秒），性能获得了<strong>超过4倍</strong>的巨大提升。这清晰地证明了<strong>循环合并</strong>作为一项基础优化，通过减少循环开销和改善数据局部性，能够极大地提高程序效率。</p>
</li>
<li>
<p><strong>Autotuner 未找到额外优化空间</strong>：<code>Autotuner</code> 调优后的版本（<code>0.057</code>秒）与标准的 <code>-O2</code> 版本性能基本持平（存在微小的性能波动）。这说明对于这个特定的<code>loop_fusion_test.c</code>程序，<code>-O2</code> 级别所执行的循环合并已经是非常有效的优化，几乎达到了性能极限，因此 <code>Autotuner</code> 未能在此基础上找到更优的微调参数组合。</p>
</li>
</ol>
<p>通过对比，我们看到毕昇编译器在 <code>-O2</code> 优化级别下能够自动执行此项优化，带来显著的性能增益。而对于这个已经几乎达到最优的案例，Autotuner 未能发现进一步的提升空间</p>
<h3 id="实验三循环强度削弱-loop-strength-reduction">实验三：循环强度削弱 (Loop Strength Reduction)</h3>
<h4 id="一实验目的-3">（一）实验目的</h4>
<p>理解强度削弱优化的概念，即在循环中将高开销的运算（如乘法）替换为等效的低开销运算（如加法）。本实验旨在观察并验证毕昇编译器在标准优化下自动执行此项优化的能力。</p>
<h4 id="二实验内容-3">（二）实验内容</h4>
<p>编写一个循环内包含乘法运算的程序，通过对比不同优化级别生成的汇编代码，来验证强度削弱的发生。</p>
<h4 id="三实验过程-3">（三）实验过程</h4>
<ol>
<li><strong>进入实验目录</strong><pre><code class="language-bash"># (确保已激活虚拟环境)
# source ~/autotuner_env/bin/activate
cd ~/bisheng_compiler_experiments/exp3_strength_reduction/
</code></pre>
</li>
<li><strong>编写测试代码</strong><br>
创建 <code>strength_reduction_test_enhanced.c</code> 文件。<pre><code class="language-bash">vim strength_reduction_test_enhanced.c
</code></pre>
粘贴以下代码：<pre><code class="language-c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;

#define ARRAY_SIZE 20000000
#define STRIDE 7 // 非2次幂的步长
#define OUTER_LOOPS 100

int main() {
    int *data = (int*)malloc(ARRAY_SIZE * sizeof(int));
    if (!data) return 1;

    for(int i = 0; i &lt; ARRAY_SIZE; i++) data[i] = i;

    long long total_sum = 0;
    clock_t start = clock();

    for (int k = 0; k &lt; OUTER_LOOPS; k++) {
        for (int i = 0; i &lt; (ARRAY_SIZE / STRIDE); i++) {
            // 这里的 data[i * STRIDE] 包含了一个高强度运算
            total_sum += data[i * STRIDE];
        }
    }

    clock_t end = clock();
    double cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;

    fprintf(stderr, "Checksum: %lld\n", total_sum &amp; 0xFFFFFFFF);
    printf("执行时间: %f 秒\n", cpu_time_used);

    free(data);
    return 0;
}
</code></pre>
</li>
<li><strong>生成O0,O1,O2版本</strong><pre><code class="language-bash"># (确保已激活虚拟环境)
# 编译 O0 版本 (无优化)
clang -O0 -o strength_test_O0 strength_reduction_test_enhanced.c

# 编译 O1 版本 (基础优化)
clang -O1 -o strength_test_O1 strength_reduction_test_enhanced.c

# 编译 O2 版本 (标准优化)
clang -O2 -o strength_test_O2 strength_reduction_test_enhanced.c
</code></pre>
</li>
<li><strong>Autotuner调优</strong><pre><code class="language-bash"># 1. 配置环境并分析代码
export AUTOTUNE_DATADIR=~/autotuner_strength_data/
rm -rf $AUTOTUNE_DATADIR
mkdir -p $AUTOTUNE_DATADIR
clang -O2 -o strength_test_autotuned strength_reduction_test_enhanced.c -fautotune-generate

# 2. 初始化
llvm-autotune minimize

# 3. 迭代 (10次)
for i in $(seq 10)
do
clang -O2 -o strength_test_autotuned strength_reduction_test_enhanced.c -fautotune
time_cost=$(./strength_test_autotuned | grep "执行时间" | awk '{print $2}')
echo "Iteration $i -&gt; Time: $time_cost"
llvm-autotune feedback $time_cost
done
</code></pre>
<img src="https://img2024.cnblogs.com/blog/3311603/202507/3311603-20250706150529406-390218248.png" alt="img" loading="lazy"><pre><code class="language-bash"># 4. 结束并生成最终版
llvm-autotune finalize
clang -O2 -o strength_test_autotuned strength_reduction_test_enhanced.c -fautotune
</code></pre>
</li>
<li><strong>性能对比</strong><pre><code class="language-bash">echo "--- O0 (无优化) 版本 ---"
./strength_test_O0

echo "--- O1 (基础优化) 版本 ---"
./strength_test_O1

echo "--- O2 (标准优化) 版本 ---"
./strength_test_O2

echo "--- Autotuner 优化版本 ---"
./strength_test_autotuned
</code></pre>
</li>
</ol>
<h4 id="四结果与分析-2">（四）结果与分析</h4>
<p><img src="https://img2024.cnblogs.com/blog/3311603/202507/3311603-20250706150654162-192451412.png" alt="img" loading="lazy"></p>
<table>
<thead>
<tr>
<th style="text-align: left">版本</th>
<th style="text-align: left">编译选项</th>
<th style="text-align: left">执行时间 (秒)</th>
<th style="text-align: left">性能对比 (相对-O0)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left"><strong>基准版 (O0)</strong></td>
<td style="text-align: left"><code>-O0</code></td>
<td style="text-align: left">1.217</td>
<td style="text-align: left">1.00x</td>
</tr>
<tr>
<td style="text-align: left"><strong>基础优化版 (O1)</strong></td>
<td style="text-align: left"><code>-O1</code></td>
<td style="text-align: left">0.627</td>
<td style="text-align: left"><strong>快 1.94 倍</strong></td>
</tr>
<tr>
<td style="text-align: left"><strong>标准优化版 (O2)</strong></td>
<td style="text-align: left"><code>-O2</code></td>
<td style="text-align: left">0.611</td>
<td style="text-align: left"><strong>快 1.99 倍</strong></td>
</tr>
<tr>
<td style="text-align: left"><strong>Autotuner 优化版</strong></td>
<td style="text-align: left"><code>-O2</code> + Autotuner</td>
<td style="text-align: left"><strong>0.553</strong></td>
<td style="text-align: left"><strong>快 2.20 倍</strong></td>
</tr>
</tbody>
</table>
<hr>
<h5 id="结论分析-1"><strong>结论分析</strong></h5>
<ol>
<li>
<p><strong>强度削弱效果显著 (<code>-O0</code> vs <code>-O1</code>)</strong>:<br>
从未优化的 <code>-O0</code> 到仅开启基础优化的 <code>-O1</code>，性能直接提升了近一倍（快了94%）。这清晰地证明了<strong>循环强度削弱</strong>的巨大威力。编译器在 <code>-O1</code> 级别就已经将循环内开销高昂的乘法运算 <code>data[i * STRIDE]</code> 转换为了效率极高的指针累加操作，极大地减少了计算量。</p>
</li>
<li>
<p><strong><code>-O1</code> 与 <code>-O2</code> 差别不大</strong>:<br>
从 <code>-O1</code> 到 <code>-O2</code> 的性能提升非常微小。这说明对于这个特定的程序，最重要的优化（强度削弱）在 <code>-O1</code> 就已经完成了。</p>
</li>
<li>
<p><strong>Autotuner 发现额外优化空间 (<code>-O2</code> vs <code>Autotuner</code>)</strong>:<br>
这是本次增强实验最有价值的发现。在编译器强大的 <code>-O2</code> 优化基础上，Autotuner 依然找到了进一步的优化空间，将执行时间从 <code>0.611</code> 秒缩短到 <code>0.553</code> 秒，获得了<strong>约 10.5% 的额外性能提升</strong>。这很可能是因为它在强度削弱的基础上，通过迭代测试找到了更优的循环展开次数、指令调度或其他微调参数的组合，而这是标准的 <code>-O2</code> 策略未能覆盖到的。</p>
</li>
</ol>
<p><strong>总而言之</strong>，本次实验不仅成功验证了循环强度削弱这一经典优化，更重要的是，通过增强代码的复杂性，我们成功地创造出了一个能让 <strong>Autotuner</strong> 发挥其价值的场景，证明了它作为一种AI调优工具，有能力在强大的常规优化等级之上“压榨”出更多的性能。</p>
<h3 id="实验四循环分块-loop-tiling">实验四：循环分块 (Loop Tiling)</h3>
<h4 id="一实验目的-4">（一）实验目的</h4>
<p>理解循环分块（或称循环切块）对于改善缓存性能的重要作用，并通过实验观察其带来的性能提升。此优化主要应用于处理大型数据集（如矩阵）的多重循环中。</p>
<p><strong>注意</strong>：原始指导手册中提供的一维数组求和无法体现循环分块的优势。本实验将使用经典的矩阵乘法作为示例。</p>
<h4 id="二实验内容-4">（二）实验内容</h4>
<p>编写一个标准的矩阵乘法程序，对比在不同优化等级下，由于编译器可能采用类似循环分块的策略进行访存优化，所带来的性能差异。</p>
<h4 id="三实验过程-4">（三）实验过程</h4>
<ol>
<li>
<p><strong>进入实验目录</strong></p>
<pre><code class="language-bash"># (确保已激活虚拟环境)
source ~/autotuner_env/bin/activate
cd ~/bisheng_compiler_experiments/exp4_tiling/
</code></pre>
</li>
<li>
<p><strong>编写测试代码</strong><br>
创建 <code>loop_tiling_test.c</code> 文件，实现一个 <code>N*N</code> 矩阵乘法。</p>
<pre><code class="language-bash">vim loop_tiling_test.c
</code></pre>
<p>粘贴以下代码并保存：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;

// 矩阵尺寸保持不变，1024x1024
#define N 1024

void init_matrix(double* matrix) {
    for (int i = 0; i &lt; N * N; i++) {
        matrix[i] = (double)rand() / RAND_MAX;
    }
}

void matrix_multiply(double* a, double* b, double* c) {
    for (int i = 0; i &lt; N; i++) {
        for (int j = 0; j &lt; N; j++) {
            double sum = 0.0;
            for (int k = 0; k &lt; N; k++) {
                sum += a[i * N + k] * b[k * N + j];
            }
            c[i * N + j] = sum;
        }
    }
}

int main() {
    double *a = (double*)malloc(N * N * sizeof(double));
    double *b = (double*)malloc(N * N * sizeof(double));
    double *c = (double*)malloc(N * N * sizeof(double));

    if (a == NULL || b == NULL || c == NULL) {
        fprintf(stderr, "Error: Memory allocation failed.\n");
        return 1;
    }

    srand(time(NULL));
    init_matrix(a);
    init_matrix(b);

    clock_t start = clock();
    matrix_multiply(a, b, c);
    clock_t end = clock();

    // ================== 新增部分 ==================
    // 计算结果矩阵c中所有元素的总和，以确保c被“使用”
    double checksum = 0.0;
    for (int i = 0; i &lt; N * N; i++) {
        checksum += c[i];
    }
    // 将checksum打印到stderr，这样它不会干扰我们从stdout捕获执行时间
    fprintf(stderr, "Checksum: %f\n", checksum);
    // ===============================================

    double cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("执行时间: %f 秒\n", cpu_time_used);

    free(a);
    free(b);
    free(c);

    return 0;
}
</code></pre>
</li>
<li>
<p>**编译基准版本 **</p>
<pre><code class="language-bash"># 编译 O0 版本 (无优化)
clang -O0 -o tiling_test_O0 loop_tiling_test.c

# 编译 O1 版本 (基础优化)
clang -O1 -o tiling_test_O1 loop_tiling_test.c

# 编译 O2 版本 (标准优化)
clang -O2 -o tiling_test_O2 loop_tiling_test.c

</code></pre>
</li>
<li>
<p>**Autotuner **</p>
<pre><code class="language-bash"># 1. 配置环境并分析代码
export AUTOTUNE_DATADIR=~/autotuner_tiling_data/
rm -rf $AUTOTUNE_DATADIR &amp;&amp; mkdir -p $AUTOTUNE_DATADIR
clang -O2 -o tiling_test_autotuned loop_tiling_test.c -fautotune-generate

# 2. 初始化
llvm-autotune minimize

# 3. 迭代 (矩阵乘法计算量大，10次迭代可以看到效果)
for i in $(seq 10)
do
clang -O2 -o tiling_test_autotuned loop_tiling_test.c -fautotune
time_cost=$(./tiling_test_autotuned | grep "执行时间" | awk '{print $2}')
echo "Iteration $i -&gt; Time: $time_cost"
llvm-autotune feedback $time_cost
done
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3311603/202507/3311603-20250706152048191-1256334004.png" alt="img" loading="lazy"></p>
<pre><code class="language-bash"># 4. 结束并生成最终版
llvm-autotune finalize
clang -O2 -o tiling_test_autotuned loop_tiling_test.c -fautotune
</code></pre>
</li>
<li>
<p><strong>性能测试与数据记录</strong></p>
<pre><code class="language-bash">./tiling_test_O0
./tiling_test_O1
./tiling_test_O2
./tiling_test_autotuned
</code></pre>
<p>结果：</p>
<pre><code class="language-bash">(autotuner_env) [root@ecs-bisheng exp4_tiling]# ./tiling_test_O0
Checksum: 268376973.259199
执行时间: 16.459029 秒
(autotuner_env) [root@ecs-bisheng exp4_tiling]# ./tiling_test_O1
Checksum: 268058282.544395
执行时间: 9.012797 秒
(autotuner_env) [root@ecs-bisheng exp4_tiling]#     ./tiling_test_O2
Checksum: 268437667.232841
执行时间: 7.997973 秒
(autotuner_env) [root@ecs-bisheng exp4_tiling]#     ./tiling_test_autotuned
Checksum: 268593822.027724
执行时间: 9.023929 秒
</code></pre>
</li>
</ol>
<h4 id="四结果与分析-3">（四）结果与分析</h4>
<h5 id="性能对比表格">性能对比表格</h5>
<table>
<thead>
<tr>
<th style="text-align: left">版本</th>
<th style="text-align: left">编译选项</th>
<th style="text-align: left">Checksum</th>
<th style="text-align: left">执行时间 (秒)</th>
<th style="text-align: left">性能对比 (相对-O0)</th>
<th style="text-align: left">性能提升</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left"><strong>基准版 (O0)</strong></td>
<td style="text-align: left"><code>-O0</code></td>
<td style="text-align: left">268376973.259</td>
<td style="text-align: left">16.459</td>
<td style="text-align: left">1.00x</td>
<td style="text-align: left">—</td>
</tr>
<tr>
<td style="text-align: left"><strong>基础优化版 (O1)</strong></td>
<td style="text-align: left"><code>-O1</code></td>
<td style="text-align: left">268058282.544</td>
<td style="text-align: left">9.013</td>
<td style="text-align: left"><strong>快 1.83 倍</strong></td>
<td style="text-align: left">45.2%</td>
</tr>
<tr>
<td style="text-align: left"><strong>标准优化版 (O2)</strong></td>
<td style="text-align: left"><code>-O2</code></td>
<td style="text-align: left">268437667.233</td>
<td style="text-align: left"><strong>7.998</strong></td>
<td style="text-align: left"><strong>快 2.06 倍</strong></td>
<td style="text-align: left">51.4%</td>
</tr>
<tr>
<td style="text-align: left"><strong>Autotuner 优化版</strong></td>
<td style="text-align: left"><code>-O2</code> + Autotuner</td>
<td style="text-align: left">268593822.028</td>
<td style="text-align: left">9.024</td>
<td style="text-align: left">快 1.82 倍</td>
<td style="text-align: left">45.2%</td>
</tr>
</tbody>
</table>
<h5 id="分析结论">分析结论</h5>
<p>从实验结果可以看出：</p>
<ol>
<li>
<p><strong>编译器优化效果显著</strong>：</p>
<ul>
<li><code>-O1</code> 优化相比 <code>-O0</code> 带来了 <strong>83%</strong> 的性能提升</li>
<li><code>-O2</code> 优化是最佳表现，相比基准版本快了 <strong>2.06倍</strong></li>
</ul>
</li>
<li>
<p><strong>O2优化级别表现最佳</strong>：</p>
<ul>
<li><code>-O2</code> 版本以 <strong>7.998秒</strong> 的执行时间获得最佳性能</li>
<li>相比 <code>-O1</code> 还有约 <strong>11%</strong> 的额外提升</li>
</ul>
</li>
<li>
<p><strong>Autotuner在此场景下表现一般</strong>：</p>
<ul>
<li>Autotuner 优化后的执行时间为 <strong>9.024秒</strong>，反而比 <code>-O2</code> 慢了约 <strong>12.8%</strong></li>
<li>这可能说明对于这个特定的矩阵乘法程序，标准的 <code>-O2</code> 优化已经非常有效</li>
<li>Autotuner 可能在某些参数调整上未能找到更优解，或者陷入了局部最优</li>
</ul>
</li>
<li>
<p><strong>循环分块优化的体现</strong>：</p>
<ul>
<li>从 <code>-O0</code> 到 <code>-O2</code> 的巨大性能提升，很可能包含了编译器自动应用的循环分块等缓存友好优化</li>
<li>矩阵乘法这类内存密集型计算对缓存局部性非常敏感，编译器优化的效果特别明显</li>
</ul>
</li>
</ol>
<p><strong>总结</strong>：在这个循环分块实验中，传统的 <code>-O2</code> 编译优化表现最佳，证明了现代编译器在处理矩阵运算时已经具备了相当成熟的优化策略。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.002777777777777778" data-date-updated="2025-07-07 12:30">2025-07-07 12:26</span>&nbsp;
<a href="https://www.cnblogs.com/z4t15">NOTHINGBUTNOTHING</a>&nbsp;
阅读(<span id="post_view_count">133</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18970314);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18970314', targetLink: 'https://www.cnblogs.com/z4t15/p/18970314', title: '毕昇编译器循环优化实验————一文读懂如何使用毕昇编译器自动调优（openEuler系统）' })">举报</a>
</div>
        