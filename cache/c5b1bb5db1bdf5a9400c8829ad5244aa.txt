<!----> <meta itemprop="headline" content="😲我又写出了被 Three.js 官推转发的项目？！🥳🥳(源码分享)"> <meta itemprop="keywords" content="前端,开源,three.js"> <meta itemprop="datePublished" content="2025-05-30T05:56:17.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="何贤"> <meta itemprop="url" content="https://juejin.cn/user/277499952247869"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-61fb5e44="">
            😲我又写出了被 Three.js 官推转发的项目？！🥳🥳(源码分享)
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-61fb5e44=""><div class="author-info-box" data-v-61fb5e44=""><div class="author-name" data-v-61fb5e44=""><a href="/user/277499952247869/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-292f6e48="" data-v-61fb5e44=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-292f6e48="">
    何贤
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-61fb5e44=""><time datetime="2025-05-30T05:56:17.000Z" title="Fri May 30 2025 05:56:17 GMT+0000 (Coordinated Universal Time)" class="time" data-v-61fb5e44="">
                    2025-05-30
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-61fb5e44=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-61fb5e44=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-61fb5e44=""></circle></svg> <span class="views-count" data-v-61fb5e44="">
                    8,994
                  </span> <span class="read-time" data-v-61fb5e44=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-61fb5e44=""><rect width="16" height="16" fill="none" data-v-61fb5e44=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-61fb5e44=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-61fb5e44=""></path></svg>
                    阅读22分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-61fb5e44=""></div> <!----> <!----></div> <!----> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-61fb5e44=""><div class="article-viewer markdown-body result"><h2 data-id="heading-0">0.👁️前置条件</h2>
<p>🎉 🎉 好久不见，亲爱的小伙伴们！欢迎来到这个充满童趣的技术分享！在儿童节即将到来之际，我特别准备了这篇轻松有趣的<code> Three.js 实战指南</code>。</p>
<h3 data-id="heading-1">🎮 你将学到什么？</h3>
<ul>
<li><code>Three.js</code> 基础应用</li>
<li><code>3D</code> 定制化资源获取技巧</li>
<li>简易 <code>Three.js</code> 游戏开发思路</li>
</ul>
<p>💡 无需担心难度！本文专为儿童节设计，技术内容简单易懂，只要掌握<code>Three.js </code>基础用法就能轻松上手！</p>
<h2 data-id="heading-2">1. 🚀Page 预览</h2>
<p>🎂 又一年儿童节将至，看着日历上跳动的数字，忽然意识到自己早已不是那个会收到节日礼物的小朋友了。现在的我，日复一日地在公司里：</p>
<ul>
<li>敲着后台管理系统的<code>CURD</code></li>
<li>调试着微信小程序的接口</li>
<li>对着需求文档发呆</li>
</ul>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/6c88037cbd57419bb045ae64a18bbf32~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=7amEmWk9wGV3%2FRcu3sM3XuFMeDw%3D" alt="1.jpg" loading="lazy"></p>
<p><strong>⚠️ 系统警报：检测到开发者快乐指数跌破警戒线！</strong></p>
<p><strong>🚀 正在注入童趣补丁...</strong></p>
<p><strong>🎮 强制启动儿童节特别模式....</strong></p>
<h3 data-id="heading-3">画面预览</h3>
<p>小心飞驰的车辆，收集道具，创造你的最高纪录！</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/2fdec904f44d438ab1205ef6cc15da4d~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=%2FF7PX%2FRvFqrmNTly5n8%2BfEnRd7U%3D" alt="2.png" loading="lazy"></p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/fb9707d36a8446329d76ae31ee9f0081~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=QTSvOp3k916yOITDicLN84aN%2FrU%3D" alt="1.gif" loading="lazy"></p>
<h3 data-id="heading-4">新手指南</h3>
<ul>
<li>PC端：使用方向键或WASD控制小鸡移动</li>
<li>手机端：滑动屏幕即可轻松操控（适配完美！）</li>
<li>游玩的新手指南您可以在点击右上角的暂停按钮看到，并且您可以再此为自己的角色取名，以便可以在排行榜上找到自己</li>
</ul>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/87692f7bc14a4161a0710847441ff845~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=75GEurNxr4UUTzCS88bk2vG%2BoCE%3D" alt="3.png" loading="lazy"></p>
<h3 data-id="heading-5">相关地址</h3>
<ul>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fcross-road-eight.vercel.app%2F" target="_blank" title="https://cross-road-eight.vercel.app/" ref="nofollow noopener noreferrer">🖥️ PC端正式版（建议使用魔法上网） </a> : <a href="https://link.juejin.cn?target=https%3A%2F%2Fcross-road-eight.vercel.app%2F" target="_blank" title="https://cross-road-eight.vercel.app/" ref="nofollow noopener noreferrer">cross-road-eight.vercel.app/</a></li>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fcross-road-eight.vercel.app%2F" target="_blank" title="https://cross-road-eight.vercel.app/" ref="nofollow noopener noreferrer">🛠️ PC调试模式（开发者专用，请勿作弊哦）</a>: <a href="https://link.juejin.cn?target=https%3A%2F%2Fcross-road-eight.vercel.app%2F%23debug" target="_blank" title="https://cross-road-eight.vercel.app/#debug" ref="nofollow noopener noreferrer">cross-road-eight.vercel.app/#debug</a></li>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FhexianWeb%2FCrossRoad" target="_blank" title="https://github.com/hexianWeb/CrossRoad" ref="nofollow noopener noreferrer">👨‍💻 GitHub源码（欢迎Star⭐） </a> :<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FhexianWeb%2FCrossRoad" target="_blank" title="https://github.com/hexianWeb/CrossRoad" ref="nofollow noopener noreferrer">github.com/hexianWeb/C…</a></li>
</ul>
<p>另外当前小游戏已经<a href="https://link.juejin.cn?target=https%3A%2F%2Fsynthgamer.com%2Fgame%2F34" target="_blank" title="https://synthgamer.com/game/34" ref="nofollow noopener noreferrer">国际知名小游戏平台收录</a>:<a href="https://link.juejin.cn?target=https%3A%2F%2Fsynthgamer.com%2Fgame%2F34" target="_blank" title="https://synthgamer.com/game/34" ref="nofollow noopener noreferrer">synthgamer.com/game/34</a> ，此网站不需要魔法。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f07d7187c32a4d81a97d597f1fcdba60~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=ijeZzJzq%2FHOFrs1J%2Fsq7GRc0YoA%3D" alt="4.png" loading="lazy">
此外如果您正在使用手机浏览这篇文章，我非常建议您直接点击进入游玩，因为这个游戏我已经做了移动端适配。滑动将会以最符合操纵直觉的操控方式呈现在您面前</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/1c939e4aae0043dda20f7930fea09e97~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=VIhnrbShM4msLuoDglGiyCjrvqE%3D" alt="2.gif" loading="lazy">
(<em>小提示： 游戏会记录你的最佳成绩，在死亡时将成绩发送至排行榜单！快来挑战好友吧！🐣💨</em>)</p>
<p>本着开源精神与诚实创作的原则，我必须说明：本项目的核心机制灵感来源于业界前辈的智慧结晶。特别感谢：<strong>Hunor Borbely</strong> 的优秀教程：<a href="https://link.juejin.cn?target=https%3A%2F%2Fjavascriptgametutorials.com%2Ftutorials%2Fthree-js%2Fcrossy-road" target="_blank" title="https://javascriptgametutorials.com/tutorials/three-js/crossy-road" ref="nofollow noopener noreferrer">《Crossy Road风格游戏开发指南》</a></p>
<p>参考内容有：</p>
<ul>
<li>游戏元数据(metadata)的结构设计</li>
<li>角色与车辆的碰撞检测逻辑</li>
</ul>
<p>(指路原作者)
<img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a4348f4520d44d3790a2af63e5486c73~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=5FC3P%2FHsd5Njtx1I6ufVQoUyNPQ%3D" alt="5.png" loading="lazy"></p>
<h3 data-id="heading-6">🌟 官方认可</h3>
<p>很荣幸这个项目同样获得了Three.js官推的转发认可：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/e8575d5691c0455595bef77de8147a22~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=SFEYdkqXNnlu6%2BI6rXtMs4DNaZA%3D" alt="6.png" loading="lazy"></p>
<p>( <em>Tips: 站在巨人的肩膀上，我们才能看得更远！🚀</em>)</p>
<h2 data-id="heading-7">2.🎮 Three.js 游戏三要素</h2>
<p>我之前在 <a href="https://juejin.cn/post/7472650702340046886" target="_blank" title="https://juejin.cn/post/7472650702340046886">2025 年了，我不允许有前端不会用 Trae 让页面 Hero Section 变得高级！！！(Threejs)</a> 提到过 <code>Three.js</code>三要素，他们分别是场景、相机以及渲染器。</p>
<h3 data-id="heading-8">什么是游戏开发三要素？</h3>
<p>而在Three.js游戏开发中，我们同样有三大核心架构：</p>

























<table><thead><tr><th>要素</th><th>作用</th><th>类比现实</th></tr></thead><tbody><tr><td><strong>Scene</strong></td><td>游戏世界的3D环境</td><td>就像游乐场的场地</td></tr><tr><td><strong>Game UI</strong></td><td>用户界面和交互层</td><td>相当于游乐场的指示牌和售票处</td></tr><tr><td><strong>Metadata</strong></td><td>游戏数据和逻辑</td><td>类似游乐场的运营规则和游客数据</td></tr></tbody></table>
<h3 data-id="heading-9">为什么这很重要？</h3>
<p>理解这三个要素的关系至关重要：</p>
<ol>
<li><strong>Scene</strong>负责"演什么" - 处理3D模型、光照、物理效果</li>
<li><strong>UI</strong>负责"怎么看" - 控制分数显示、菜单系统</li>
<li><strong>Metadata</strong>负责"怎么玩" - 管理游戏状态、得分规则、角色属性</li>
</ol>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a6205239b9fa4225ba3b0e9777ec5e00~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=yIfTayyQDEVvQaMCDZo5Lb56orA%3D" alt="7.png" loading="lazy"></p>
<h2 data-id="heading-10">3.📦资源获取</h2>
<h3 data-id="heading-11">3D Model 资源生成</h3>
<p>在<a href="https://juejin.cn/post/7498914140166799397#heading-3" target="_blank" title="https://juejin.cn/post/7498914140166799397#heading-3">😮😮😮 我写出了被 Threejs 官推转发的项目🚀✨？！</a> 文章中我曾写过 <strong>3D 客制化资源的获取与处理</strong>，这里我不做过多赘述，只做简单举例</p>
<p>就比小鸡模型的获取我先通过<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fjamez-bondos%2Fawesome-gpt4o-images" target="_blank" title="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fjamez-bondos%2Fawesome-gpt4o-images">awesome-gpt4o-images</a> 给的提示参考图以及相应的提示语生成一张背景单一，结构合理的 <code>2.5D</code> 小鸡图片,</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/fc3c1b43e1ec4f4e9332d56d33afb240~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=YeZgA34py6zSAYTxvi%2BbbAOb6dw%3D" alt="9.png" loading="lazy"></p>
<p>我这里将参考图奉上，您有空也可以试试这些神奇的提示词</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/20ada91dca1a4e16bbe23c2af2a3172c~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=5QyvLwKdWWuOtHzYrqdFDQwiO%2Bk%3D" alt="8.jpeg" loading="lazy"></p>
<p>随后再将图片导入 <code>AI 3D generation</code> 平台，我比较喜欢的是<a href="https://link.juejin.cn?target=https%3A%2F%2Fhyper3d.ai%2F%3Fgad_source%3D1%26gad_campaignid%3D21669797681%26gbraid%3D0AAAAA-LCI71i6HKVgF2iPaQFnFhMZFNp_%26gclid%3DCj0KCQjwxdXBBhDEARIsAAUkP6hF1byK_-pADzmrFbH7xI1w48l3sfcKxElJG4cPz4m3RCPG9BJis8UaAqcyEALw_wcB" target="_blank" title="https://hyper3d.ai/?gad_source=1&amp;gad_campaignid=21669797681&amp;gbraid=0AAAAA-LCI71i6HKVgF2iPaQFnFhMZFNp_&amp;gclid=Cj0KCQjwxdXBBhDEARIsAAUkP6hF1byK_-pADzmrFbH7xI1w48l3sfcKxElJG4cPz4m3RCPG9BJis8UaAqcyEALw_wcB" ref="nofollow noopener noreferrer">hyper3D</a>。 过30秒即可生成对应的模型。看起来还不错。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/287ba01f61bc493993229a0f6d1c4b54~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=6mgdhAiHZssC6cx9zjG1Q9oDqYI%3D" alt="3.gif" loading="lazy"></p>
<h3 data-id="heading-12">游戏背景音乐资源获取</h3>
<p>游戏背景音乐则是使用 <a href="https://link.juejin.cn?target=https%3A%2F%2Fsuno.com%2F" target="_blank" title="https://suno.com/" ref="nofollow noopener noreferrer">Suno AI</a> 进行生成的。老实说我觉得还挺好听的。</p>
<p>但是如果想要获取真正的游戏背景音乐以及各种游戏音效可以访问<a href="https://link.juejin.cn?target=https%3A%2F%2Fopengameart.org%2Fart-search-advanced%3Fkeys%3D%26field_art_type_tid%255B%255D%3D12%26sort_by%3Dcount%26sort_order%3DDESC" target="_blank" title="https://opengameart.org/art-search-advanced?keys=&amp;field_art_type_tid%5B%5D=12&amp;sort_by=count&amp;sort_order=DESC" ref="nofollow noopener noreferrer">Opengameart 的音乐板块</a></p>
<blockquote>
<p>输入风格描述："8-bit retro game music with cheerful melody"</p>
</blockquote>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/7a1f588cfedb42d88fa8fb7f93f8af2b~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=o3WpE8%2FHWfTaU3MLvVzZA7DHMWE%3D" alt="10.png" loading="lazy"></p>
<p>如果对于这块教程还有疑惑可以<a href="https://juejin.cn/post/7498914140166799397#heading-3" target="_blank" title="https://juejin.cn/post/7498914140166799397#heading-3">点击这里</a>，在前一篇文章中我有着详细的介绍。</p>
<p>AI工具让独立开发者也能拥有专业级美术资源, 随着 AI 数字资产的获取门槛降低，我相信未来对于我们网站开发人员来说真正的上限应该是<strong>视觉想象力</strong>与<strong>数字美感素养</strong>。</p>
<h2 data-id="heading-13">4.🤖metadata &amp; 基础场景搭建</h2>
<p>现在让我们来看一看原版的小鸡过马路游戏场景</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/63bcc0a54159445c88c7b2b28d396072~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=L0cu7n7P5MLcYAMNPUP1k1cg8jg%3D" alt="11.png" loading="lazy"></p>
<p>现在的首要目的是分析出当前场景所需的 <code>metadata</code>, 在不考虑场景自生成的情况下利用<code>metadata</code>在 <code>Threejs</code>中搭建出游戏的基本场景。</p>
<ul>
<li>首先我们可以看到图中小鸡不断前进，场景会由数个不同的“行”拼接而成，他们可能是“草地“，也可能是”柏油路“</li>
<li>然后每个行上都有着相应的物体，"草地"上会出现高矮不一的"树木"，而"柏油路"上会出现行驶方向向左或者向右的汽车</li>
</ul>
<p>那么<code>metadata</code>应该如何更好的囊括这些信息呢？我是这样做的：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f7520ea8fc8b49f2baf225773cf3c433~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=JRmHIlyNn%2FV0ZUrPll5z3Bd9pds%3D" alt="12.png" loading="lazy"></p>
<p>现在我们先采用静态<code>metadata</code>来构建初始游戏场景，通过模块化的设计实现草地、道路、树木和车辆的动态生成。</p>
<h3 data-id="heading-14">静态 metadata 结构</h3>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> metadata = [
  <span class="hljs-comment">// 第一行 </span>
  {
    <span class="hljs-attr">type</span>: <span class="hljs-string">'forest'</span>,
    <span class="hljs-attr">trees</span>: [
      { <span class="hljs-attr">tileIndex</span>: -<span class="hljs-number">7</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">'tree01'</span> },
      { <span class="hljs-attr">tileIndex</span>: -<span class="hljs-number">3</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">'tree02'</span> },
    ],
  },
  <span class="hljs-comment">// 第二行 </span>
  {
    <span class="hljs-attr">type</span>: <span class="hljs-string">'road'</span>,
    <span class="hljs-attr">direction</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">speed</span>: <span class="hljs-number">1</span>,
    <span class="hljs-attr">vehicles</span>: [
      {
        <span class="hljs-attr">initialTileIndex</span>: <span class="hljs-number">12</span>,
        <span class="hljs-attr">type</span>: <span class="hljs-string">'car04'</span>,
      },
      {
        <span class="hljs-attr">initialTileIndex</span>: <span class="hljs-number">2</span>,
        <span class="hljs-attr">type</span>: <span class="hljs-string">'car08'</span>,
      },
      {
        <span class="hljs-attr">initialTileIndex</span>: -<span class="hljs-number">2</span>,
        <span class="hljs-attr">type</span>: <span class="hljs-string">'car01'</span>,
      },
    ],
  },
]
</code></pre>
<h3 data-id="heading-15">地形生成</h3>
<p>而铺设路面的函数就较为简单，就是将传入的<code>mesh</code>在<code>scene</code>中排成一排，随后根据当前行数为 <code>metadata</code>中的所属行的数组下标对其位置在进行调整。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Grass</span> {
  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">scene, object3d, rowIndex = <span class="hljs-number">0</span></span>) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">scene</span> = scene
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">object3d</span> = object3d
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">rowIndex</span> = rowIndex
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">tiles</span> = []
    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createGrassRow</span>()
  }

  <span class="hljs-comment">// 生成一行草地</span>
  <span class="hljs-title function_">createGrassRow</span>(<span class="hljs-params"></span>) {
    <span class="hljs-comment">// 获取 tile 资源（假设资源名为 'grass'，如有不同请调整）</span>
    <span class="hljs-keyword">const</span> tileResource = <span class="hljs-variable language_">this</span>.<span class="hljs-property">object3d</span>
    tileResource.<span class="hljs-property">scene</span>.<span class="hljs-title function_">updateMatrixWorld</span>()
    <span class="hljs-keyword">if</span> (!tileResource) {
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">'未找到 grass 资源'</span>)
      <span class="hljs-keyword">return</span>
    }
   <span class="hljs-comment">// 生成16个连续的草地瓦片</span>
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++) {
      <span class="hljs-comment">// 计算当前tile的地图下标</span>
      <span class="hljs-keyword">const</span> tileIndex = <span class="hljs-variable constant_">MIN_TILE_INDEX</span> + i
      <span class="hljs-comment">// 克隆tile模型</span>
      <span class="hljs-keyword">const</span> tileMesh = tileResource.<span class="hljs-property">scene</span>.<span class="hljs-title function_">clone</span>()
      <span class="hljs-comment">// 设置tile在世界坐标中的位置</span>
      tileMesh.<span class="hljs-property">position</span>.<span class="hljs-title function_">set</span>(tileIndex, <span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">rowIndex</span>)	<span class="hljs-comment">// 将 tileMesh 沿着 X 轴排成一排，随后根据 this.rowIndex 调整 Z 轴位置</span>
      <span class="hljs-comment">// 添加到场景</span>
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">scene</span>.<span class="hljs-title function_">add</span>(tileMesh)
      <span class="hljs-comment">// 存储tile对象</span>
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">tiles</span>.<span class="hljs-title function_">push</span>(tileMesh)
    }
  }
}
</code></pre>
<p>路面行生成也是同理，这里就不反复贴类似功能的代码了。随后在场景中根据 <code>metadata</code>生成对应类实例</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">metadata</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">rowData</span>) =&gt;</span> {
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">rowIndex</span>++
      <span class="hljs-comment">// 如果是森林行，添加树</span>
      <span class="hljs-keyword">if</span> (rowData &amp;&amp; rowData.<span class="hljs-property">type</span> === <span class="hljs-string">'forest'</span>) {
        <span class="hljs-comment">// 先生成草地</span>
        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addGrassRow</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">rowIndex</span>)
      }
      <span class="hljs-keyword">if</span> (rowData &amp;&amp; rowData.<span class="hljs-property">type</span> === <span class="hljs-string">'road'</span>) {
        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addRoadRow</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">rowIndex</span>)
      }
})


  <span class="hljs-comment">// 添加一行草地</span>
  <span class="hljs-title function_">addGrassRow</span>(<span class="hljs-params">rowIndex = <span class="hljs-number">0</span></span>) {
    <span class="hljs-keyword">const</span> grass = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Grass</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">scene</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">resources</span>.<span class="hljs-property">items</span>.<span class="hljs-property">grass</span>, rowIndex)
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">grassRows</span>.<span class="hljs-title function_">push</span>(grass)
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">tiles</span>.<span class="hljs-title function_">push</span>(...grass.<span class="hljs-property">tiles</span>)
  }

  <span class="hljs-comment">// 添加一行道路</span>
  <span class="hljs-title function_">addRoadRow</span>(<span class="hljs-params">rowIndex = <span class="hljs-number">0</span></span>) {
    <span class="hljs-keyword">const</span> road = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Road</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">scene</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">resources</span>, rowIndex)
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">roadRows</span>.<span class="hljs-title function_">push</span>(road)
  }
</code></pre>
<p>我们就能得到场景如图( 行上的数字对应了当前行对应的 TileIndex )</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/855e9d9bc41f4c37aa082ab17968fc8c~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=o%2B%2FSGYwzza8nVMlhBQ33TvHQyrU%3D" alt="13.png" loading="lazy"></p>
<h3 data-id="heading-16">动态元素生成</h3>
<p>现在我们需要向森林行和道路行上添加对应的物体，这些物体并不是固定的某一行有多少多少个，而是根据在<code>metadata</code>相对应的物体数组决定，森林行根据<code>tree</code>数组添加对应的树木，道路类根据<code>vehicles</code>添加对应的车辆。</p>
<h4 data-id="heading-17">树木生成</h4>
<p>就比如树木数组</p>
<pre><code class="hljs language-js" lang="js">    <span class="hljs-attr">trees</span>: [
      { <span class="hljs-attr">tileIndex</span>: -<span class="hljs-number">7</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">'tree01'</span> },
      { <span class="hljs-attr">tileIndex</span>: -<span class="hljs-number">3</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">'tree02'</span> },
    ],
</code></pre>
<p>他就分别代表</p>
<ul>
<li>模型名为<code>tree01</code>的树木模型在<code>tileIndex</code>位置为 -7 的位置。</li>
<li>模型名为<code>tree02</code>的树木模型在<code>tileIndex</code>位置为 -3 的位置。</li>
</ul>
<p>(ps: 我对单个路面块再建模软件中进行过预处理，确保他们引入后长度大小刚好为1m，所以后续<code>tileIndex</code>会和<code>position</code>的 X 轴对应）</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tree</span> {
  <span class="hljs-comment">/**
   * <span class="hljs-doctag">@param</span> {<span class="hljs-type">THREE.Scene</span>} <span class="hljs-variable">scene</span> - threejs场景
   * <span class="hljs-doctag">@param</span> {<span class="hljs-type">object</span>} <span class="hljs-variable">resources</span> - 资源加载器实例
   * <span class="hljs-doctag">@param</span> {<span class="hljs-type">Array</span>} <span class="hljs-variable">trees</span> - 当前行的树木数组，每项包含tileIndex和type
   * <span class="hljs-doctag">@param</span> {<span class="hljs-type">number</span>} <span class="hljs-variable">rowIndex</span> - 当前行的z坐标
   */</span>
  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">scene, resources, trees, rowIndex = <span class="hljs-number">0</span></span>) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">scene</span> = scene
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">resources</span> = resources
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">trees</span> = trees
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">rowIndex</span> = rowIndex
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">treeMeshes</span> = []
    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addTrees</span>()
  }

  <span class="hljs-comment">// 添加所有树木到当前行</span>
  <span class="hljs-title function_">addTrees</span>(<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">trees</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">treeData</span>) =&gt;</span> {
      <span class="hljs-keyword">const</span> { tileIndex, type } = treeData
      <span class="hljs-comment">// 获取对应类型的树模型</span>
      <span class="hljs-keyword">const</span> treeResource = <span class="hljs-variable language_">this</span>.<span class="hljs-property">resources</span>.<span class="hljs-property">items</span>[type]
      <span class="hljs-comment">// 克隆树模型</span>
      <span class="hljs-keyword">const</span> treeMesh = treeResource.<span class="hljs-property">scene</span>.<span class="hljs-title function_">clone</span>()
      <span class="hljs-comment">// 设置树的位置（x轴为tileIndex，z轴为rowIndex）</span>
      treeMesh.<span class="hljs-property">position</span>.<span class="hljs-title function_">set</span>(tileIndex, <span class="hljs-number">0.2</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">rowIndex</span>)
      <span class="hljs-comment">// 添加到场景</span>
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">scene</span>.<span class="hljs-title function_">add</span>(treeMesh)
      <span class="hljs-comment">// 存储树对象，便于后续移除</span>
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">treeMeshes</span>.<span class="hljs-title function_">push</span>(treeMesh)
    })
  }
}
</code></pre>
<h4 data-id="heading-18">车辆生成</h4>
<p>车辆类相比树木类需要多一层“调整车辆方向逻辑”，这不仅需要代码配合，还需要对静态资源进行预处理，确保所有车辆朝向一致。</p>
<pre><code class="hljs language-js" lang="js">  {
    <span class="hljs-attr">type</span>: <span class="hljs-string">'road'</span>,
    <span class="hljs-attr">direction</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">speed</span>: <span class="hljs-number">1</span>,
    <span class="hljs-attr">vehicles</span>: [
      {
        <span class="hljs-attr">initialTileIndex</span>: <span class="hljs-number">12</span>,
        <span class="hljs-attr">type</span>: <span class="hljs-string">'car04'</span>,
      },
      {
        <span class="hljs-attr">initialTileIndex</span>: <span class="hljs-number">2</span>,
        <span class="hljs-attr">type</span>: <span class="hljs-string">'car08'</span>,
      },
      {
        <span class="hljs-attr">initialTileIndex</span>: -<span class="hljs-number">2</span>,
        <span class="hljs-attr">type</span>: <span class="hljs-string">'car01'</span>,
      },
    ],
  },
</code></pre>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> {
  <span class="hljs-comment">/**
   * <span class="hljs-doctag">@param</span> {<span class="hljs-type">THREE.Scene</span>} <span class="hljs-variable">scene</span> - threejs场景
   * <span class="hljs-doctag">@param</span> {<span class="hljs-type">object</span>} <span class="hljs-variable">resources</span> - 资源加载器实例
   * <span class="hljs-doctag">@param</span> {<span class="hljs-type">Array</span>} <span class="hljs-variable">vehicles</span> - 当前行的车辆数组，每项包含 initialTileIndex 和 type
   * <span class="hljs-doctag">@param</span> {<span class="hljs-type">number</span>} <span class="hljs-variable">rowIndex</span> - 当前行的z坐标
   * <span class="hljs-doctag">@param</span> {<span class="hljs-type">boolean</span>} <span class="hljs-variable">direction</span> - 车辆方向，true 向右，false 向左
   * <span class="hljs-doctag">@param</span> {<span class="hljs-type">number</span>} <span class="hljs-variable">speed</span> - 车辆速度
   */</span>
  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">scene, resources, vehicles, rowIndex = <span class="hljs-number">0</span>, direction = <span class="hljs-literal">false</span>, speed = <span class="hljs-number">1</span></span>) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">experience</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Experience</span>()
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">scene</span> = scene
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">resources</span> = resources
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">time</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">experience</span>.<span class="hljs-property">time</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">vehicles</span> = vehicles
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">rowIndex</span> = rowIndex
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">direction</span> = direction
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> = speed
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">timeMultiplier</span> = <span class="hljs-number">1</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">carMeshes</span> = []
    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addCars</span>()
  }

  <span class="hljs-comment">// 添加所有车辆到当前行</span>
  <span class="hljs-title function_">addCars</span>(<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">vehicles</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">carData, _idx</span>) =&gt;</span> {
      <span class="hljs-keyword">const</span> { initialTileIndex, type } = carData
      <span class="hljs-comment">// 获取对应类型的车辆模型</span>
      <span class="hljs-keyword">const</span> carResource = <span class="hljs-variable language_">this</span>.<span class="hljs-property">resources</span>.<span class="hljs-property">items</span>[type]
      <span class="hljs-keyword">if</span> (!carResource) {
        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">`未找到资源: <span class="hljs-subst">${type}</span>`</span>)
        <span class="hljs-keyword">return</span>
      }
      <span class="hljs-comment">// 克隆车辆模型</span>
      <span class="hljs-keyword">const</span> carMesh = carResource.<span class="hljs-property">scene</span>.<span class="hljs-title function_">clone</span>()
      carMesh.<span class="hljs-property">scale</span>.<span class="hljs-title function_">set</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>)
      <span class="hljs-comment">// 递归设置所有 mesh 可投射阴影</span>
      carMesh.<span class="hljs-title function_">traverse</span>(<span class="hljs-function">(<span class="hljs-params">child</span>) =&gt;</span> {
        <span class="hljs-keyword">if</span> (child.<span class="hljs-property">isMesh</span>) {
          child.<span class="hljs-property">castShadow</span> = <span class="hljs-literal">true</span> <span class="hljs-comment">// 车辆产生阴影</span>
        }
      })
      <span class="hljs-comment">// 设置车辆位置（x轴为tileIndex*4，z轴为rowIndex）</span>
      carMesh.<span class="hljs-property">position</span>.<span class="hljs-title function_">set</span>(initialTileIndex, <span class="hljs-number">0.35</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">rowIndex</span>)
      <span class="hljs-comment">// 设置车辆朝向</span>
      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">direction</span>) {
        carMesh.<span class="hljs-property">rotation</span>.<span class="hljs-property">y</span> = <span class="hljs-number">0</span> <span class="hljs-comment">// 向右</span>
      }
      <span class="hljs-keyword">else</span> {
        carMesh.<span class="hljs-property">rotation</span>.<span class="hljs-property">y</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> <span class="hljs-comment">// 向左</span>
      }
      <span class="hljs-comment">// 添加到场景</span>
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">scene</span>.<span class="hljs-title function_">add</span>(carMesh)
      <span class="hljs-comment">// 存储车辆对象，便于后续移除和动画</span>
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">carMeshes</span>.<span class="hljs-title function_">push</span>(carMesh)
    })
  }
}
</code></pre>
<h3 data-id="heading-19">场景组装搭建</h3>
<p>随后在前面遍历<code>metadata</code>的地方将<code>tree</code> &amp; <code>car</code>的生成函数以同样方式调用</p>
<pre><code class="hljs language-js" lang="js">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">metadata</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">rowData</span>) =&gt;</span> {
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">rowIndex</span>++
      <span class="hljs-comment">// 如果是森林行，添加树</span>
      <span class="hljs-keyword">if</span> (rowData &amp;&amp; rowData.<span class="hljs-property">type</span> === <span class="hljs-string">'forest'</span>) {
        <span class="hljs-comment">// 先生成草地</span>
        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addGrassRow</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">rowIndex</span>)
        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addTreeRow</span>(rowData.<span class="hljs-property">trees</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">rowIndex</span>)
      }
      <span class="hljs-keyword">if</span> (rowData &amp;&amp; rowData.<span class="hljs-property">type</span> === <span class="hljs-string">'road'</span>) {
        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addRoadRow</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">rowIndex</span>)
        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addCarRow</span>(rowData.<span class="hljs-property">vehicles</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">rowIndex</span>, rowData.<span class="hljs-property">direction</span>, rowData.<span class="hljs-property">speed</span>)
      }
    })
  }

  <span class="hljs-comment">// 添加一行树</span>
  <span class="hljs-title function_">addTreeRow</span>(<span class="hljs-params">trees, rowIndex</span>) {
    <span class="hljs-keyword">const</span> treeRow = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tree</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">scene</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">resources</span>, trees, rowIndex)
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">treeRows</span>.<span class="hljs-title function_">push</span>(treeRow)
  }

  <span class="hljs-comment">// 添加一行车辆</span>
  <span class="hljs-title function_">addCarRow</span>(<span class="hljs-params">vehicles, rowIndex = <span class="hljs-number">0</span>, direction = <span class="hljs-literal">false</span>, speed = <span class="hljs-number">1</span></span>) {
    <span class="hljs-keyword">const</span> carRow = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">scene</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">resources</span>, vehicles, rowIndex, direction, speed)
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">carRows</span>.<span class="hljs-title function_">push</span>(carRow)
    <span class="hljs-comment">// 新增：记录每行车辆mesh</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">carMeshDict</span>[rowIndex] = carRow.<span class="hljs-title function_">getCarMeshes</span>()
  }
</code></pre>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/90fa72ba00ac4f5aa1affd1b3256f1e4~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=Cll0Sgg2Jfovm2e3%2F6uUIFef52Y%3D" alt="14.png" loading="lazy"></p>
<p>最后我们只需要在给车辆增加移动效果，让车辆随着<code>requestAnimationFrame</code>更新不断更新<code>mesh</code>的位移， 向指定方向<code>direction</code>移动即可。记得别忘了超出边界要及时重置车辆位置哦。</p>
<pre><code class="hljs language-js" lang="js">  <span class="hljs-comment">// 更新车辆位置（可用于动画）</span>
  <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) {
    <span class="hljs-comment">// 获取全局已用时间，单位ms，转为秒</span>
    <span class="hljs-keyword">const</span> t = <span class="hljs-variable language_">this</span>.<span class="hljs-property">time</span>.<span class="hljs-property">elapsed</span> * <span class="hljs-number">0.03</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">timeMultiplier</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">carMeshes</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">car, idx</span>) =&gt;</span> {
      <span class="hljs-comment">// 车辆移动方向</span>
      <span class="hljs-keyword">const</span> dir = <span class="hljs-variable language_">this</span>.<span class="hljs-property">direction</span> ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>
      <span class="hljs-comment">// 边界判断与循环 重置车辆位置</span>
      <span class="hljs-keyword">if</span> (dir === <span class="hljs-number">1</span> &amp;&amp; car.<span class="hljs-property">position</span>.<span class="hljs-property">x</span> &gt; <span class="hljs-variable constant_">CAR_BOUNDARY_MAX</span>) {
        car.<span class="hljs-property">position</span>.<span class="hljs-property">x</span> = <span class="hljs-variable constant_">CAR_BOUNDARY_MIN</span>
      }
      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dir === -<span class="hljs-number">1</span> &amp;&amp; car.<span class="hljs-property">position</span>.<span class="hljs-property">x</span> &lt; <span class="hljs-variable constant_">CAR_BOUNDARY_MIN</span>) {
        car.<span class="hljs-property">position</span>.<span class="hljs-property">x</span> = <span class="hljs-variable constant_">CAR_BOUNDARY_MAX</span>
      }

      car.<span class="hljs-property">position</span>.<span class="hljs-property">x</span> += dir * <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">time</span>.<span class="hljs-property">delta</span> * <span class="hljs-number">1</span> / <span class="hljs-number">60</span> * <span class="hljs-number">0.23</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">timeMultiplier</span>

      <span class="hljs-comment">// === 车身抖动：模拟不平路面 ===</span>
      <span class="hljs-comment">// 抖动参数</span>
      <span class="hljs-keyword">const</span> shake = <span class="hljs-variable language_">this</span>.<span class="hljs-property">carShakeParams</span>[idx]
      <span class="hljs-comment">// 叠加两组不同频率的正弦波，幅度小</span>
      <span class="hljs-keyword">const</span> freq1 = <span class="hljs-number">2.5</span>
      <span class="hljs-keyword">const</span> amp1 = <span class="hljs-number">0.02</span>
      <span class="hljs-keyword">const</span> freq2 = <span class="hljs-number">4.3</span>
      <span class="hljs-keyword">const</span> amp2 = <span class="hljs-number">0.01</span>
      <span class="hljs-comment">// 计算抖动偏移</span>
      <span class="hljs-keyword">const</span> offsetY = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(t * freq1 + shake.<span class="hljs-property">phase</span>) * amp1 + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(t * freq2 + shake.<span class="hljs-property">phase</span> * <span class="hljs-number">1.3</span>) * amp2
      car.<span class="hljs-property">position</span>.<span class="hljs-property">y</span> = shake.<span class="hljs-property">baseY</span> + offsetY
    })
  }
</code></pre>
<p>( 最后效果图 )
<img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/34eff9c68d10466e9059c6d09a530240~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=8JRnr99PFOgxIhH6ZIa%2Ff3hmTJ8%3D" alt="4.gif" loading="lazy"></p>
<p>这个我们就已经完成了根据 <code>metadata</code>生成对应的场景内容的功能，现在您可以为用户生成一个较为简单的初始场景，虽然我们后面会利用随机生成的<code>metadata</code>数据生成地形，但相信我，我曾经生成过除去出生点后面6、7行都是马路。毕竟玩家刚复活下一步就要开始过马路不是一个很好的游戏体验。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/d12fb7755a7647f6901846cb34d48421~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=%2Fd0xGaNEnJE00Ic%2Fw3YpncGW5p8%3D" alt="15.png" loading="lazy"></p>
<h2 data-id="heading-20">5.🐤角色移动与场景生成</h2>
<h3 data-id="heading-21">引入角色</h3>
<p>首先，我们需要将小鸡模型添加到场景中并进行适当调整：</p>
<pre><code class="hljs language-js" lang="js">  <span class="hljs-comment">// 加载并放置小鸡模型</span>
  <span class="hljs-title function_">initChicken</span>(<span class="hljs-params"></span>) {
    <span class="hljs-comment">// 获取 instance 资源</span>
    <span class="hljs-keyword">const</span> chickenResource = <span class="hljs-variable language_">this</span>.<span class="hljs-property">resources</span>.<span class="hljs-property">items</span>.<span class="hljs-property">bigChicken</span>
    <span class="hljs-keyword">if</span> (!chickenResource) {
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">'未找到 instance 资源'</span>)
      <span class="hljs-keyword">return</span>
    }
    <span class="hljs-comment">// 克隆模型，避免资源污染</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span> = chickenResource.<span class="hljs-property">scene</span>.<span class="hljs-title function_">clone</span>()
    <span class="hljs-comment">// 显示阴影</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>.<span class="hljs-title function_">traverse</span>(<span class="hljs-function">(<span class="hljs-params">child</span>) =&gt;</span> {
      <span class="hljs-keyword">if</span> (child <span class="hljs-keyword">instanceof</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-property">Mesh</span>) {
        child.<span class="hljs-property">castShadow</span> = <span class="hljs-literal">true</span>
      }
    })
    <span class="hljs-comment">// 只设置 y 方向初始高度</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>.<span class="hljs-property">position</span>.<span class="hljs-title function_">set</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0.22</span>, <span class="hljs-number">0</span>)
    <span class="hljs-comment">// 设置初始等比例缩放</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>.<span class="hljs-property">scale</span>.<span class="hljs-title function_">set</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">scale</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">scale</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">scale</span>)
    <span class="hljs-comment">// 添加到 agentGroup</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">agentGroup</span>.<span class="hljs-title function_">add</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>)
  }

</code></pre>
<h3 data-id="heading-22">角色移动</h3>
<p>随后需要对小鸡加入按键监听以及移动控制，在之前的项目<a href="https://juejin.cn/post/7498914140166799397#heading-9" target="_blank" title="https://juejin.cn/post/7498914140166799397#heading-9">😮😮😮 我写出了被 Threejs 官推转发的项目🚀✨？！</a>中，我们已经探讨过角色移动的基本原理。这个项目我沿用了当时的角色按键移动响应和转向逻辑，在这里就不炒冷饭去解释<em>为什么使用event.code</em>或者<em>角色转向 BUG</em>。
<strong>直接重点解释当前项目和上一个项目移动的不同点：引入入了移动队列(<code>movesQueue</code>)机制</strong></p>
<p>首先我们来看在游戏中正常移动是什么样的。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a3f94117167242ad9aa75a2b22482e5e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=UqymUpwbbElSohumnkhQ7%2BgOx0g%3D" alt="5.gif" loading="lazy"></p>
<p>可以看到小鸡在场景中每次都是<strong>每次按键都对应一个完整的移动单位，不会因按键时间长短影响移动距离</strong>。这就是为什么我们相较于前作的移动逻辑多了一个<code>movesQueue</code>，<code>movesQueue</code>的作用是作为移动指令队列，存储待执行的移动方向（如 forward、left）。用户可以连续输入多个移动指令，使动画未完成，用户的后续输入也会被记录。避免了突然变向等不自然现象。</p>
<p>以下是 <code>this.movesQueue</code> 的监听逻辑</p>
<pre><code class="hljs language-js" lang="js">  <span class="hljs-title function_">listenKeyboard</span>(<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'keydown'</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {
      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">experience</span>.<span class="hljs-property">isPaused</span>) {
        <span class="hljs-keyword">return</span>
      }
      <span class="hljs-keyword">let</span> move = <span class="hljs-literal">null</span>
      <span class="hljs-keyword">switch</span> (event.<span class="hljs-property">code</span>) {
        <span class="hljs-keyword">case</span> <span class="hljs-string">'ArrowUp'</span>:
        <span class="hljs-keyword">case</span> <span class="hljs-string">'KeyW'</span>:
          move = <span class="hljs-string">'forward'</span>
          <span class="hljs-keyword">break</span>
        <span class="hljs-keyword">case</span> <span class="hljs-string">'ArrowDown'</span>:
        <span class="hljs-keyword">case</span> <span class="hljs-string">'KeyS'</span>:
          move = <span class="hljs-string">'backward'</span>
          <span class="hljs-keyword">break</span>
        <span class="hljs-keyword">case</span> <span class="hljs-string">'ArrowLeft'</span>:
        <span class="hljs-keyword">case</span> <span class="hljs-string">'KeyA'</span>:
          move = <span class="hljs-string">'left'</span>
          <span class="hljs-keyword">break</span>
        <span class="hljs-keyword">case</span> <span class="hljs-string">'ArrowRight'</span>:
        <span class="hljs-keyword">case</span> <span class="hljs-string">'KeyD'</span>:
          move = <span class="hljs-string">'right'</span>
          <span class="hljs-keyword">break</span>
        <span class="hljs-attr">default</span>:
          <span class="hljs-keyword">break</span>
      }
      <span class="hljs-comment">// 只在首次按下时 push</span>
      <span class="hljs-keyword">if</span> (move &amp;&amp; !<span class="hljs-variable language_">this</span>.<span class="hljs-property">pressedKeys</span>.<span class="hljs-title function_">has</span>(event.<span class="hljs-property">code</span>)) {
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">movesQueue</span>.<span class="hljs-title function_">push</span>(move)
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">pressedKeys</span>.<span class="hljs-title function_">add</span>(event.<span class="hljs-property">code</span>)
      }
    })
    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'keyup'</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">pressedKeys</span>.<span class="hljs-title function_">delete</span>(event.<span class="hljs-property">code</span>)
    })
  }
</code></pre>
<p>随后<code>this.movesQueue</code> 会在<code>requestAnimationFrame</code>中进行相应指令的执行和释放。这里有一个具体的流程图如下：</p>
<p>（移动流程图）</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/dd1a94e7b8d44eb5b2f4ca56569c791d~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=iaKOZ5w6Taywc9pO65hM5fnG42k%3D" alt="16.png" loading="lazy"></p>
<p>核心逻辑可简化为三个步骤：</p>
<ol>
<li>根据指令计算目标格子</li>
<li>执行动画插值</li>
<li>移除已完成的指令</li>
</ol>
<p>以下是核心代码片段</p>
<pre><code class="hljs language-js" lang="js">  <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>)
      <span class="hljs-keyword">return</span>
    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">movesQueue</span>.<span class="hljs-property">length</span>)
      <span class="hljs-keyword">return</span>

    <span class="hljs-comment">// 计算下一步目标格子</span>
    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">isMoving</span>) {
      <span class="hljs-keyword">const</span> dir = <span class="hljs-variable language_">this</span>.<span class="hljs-property">movesQueue</span>[<span class="hljs-number">0</span>]
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">targetTile</span> = { ...<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentTile</span> }
      <span class="hljs-keyword">switch</span> (dir) {
        <span class="hljs-keyword">case</span> <span class="hljs-string">'forward'</span>:
          <span class="hljs-variable language_">this</span>.<span class="hljs-property">targetTile</span>.<span class="hljs-property">z</span> -= <span class="hljs-number">1</span>
          <span class="hljs-keyword">break</span>
        <span class="hljs-keyword">case</span> <span class="hljs-string">'backward'</span>:
          <span class="hljs-variable language_">this</span>.<span class="hljs-property">targetTile</span>.<span class="hljs-property">z</span> += <span class="hljs-number">1</span>
          <span class="hljs-keyword">break</span>
        <span class="hljs-keyword">case</span> <span class="hljs-string">'left'</span>:
          <span class="hljs-variable language_">this</span>.<span class="hljs-property">targetTile</span>.<span class="hljs-property">x</span> -= <span class="hljs-number">1</span>
          <span class="hljs-keyword">break</span>
        <span class="hljs-keyword">case</span> <span class="hljs-string">'right'</span>:
          <span class="hljs-variable language_">this</span>.<span class="hljs-property">targetTile</span>.<span class="hljs-property">x</span> += <span class="hljs-number">1</span>
          <span class="hljs-keyword">break</span>
      }

      <span class="hljs-comment">// 先设置旋转，让小鸡朝向尝试方向</span>
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">startRot</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>.<span class="hljs-property">rotation</span>.<span class="hljs-property">y</span>
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">endRot</span> = <span class="hljs-title function_">getTargetRotation</span>(dir)

      <span class="hljs-comment">// 启动移动</span>
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">isMoving</span> = <span class="hljs-literal">true</span>
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">moveClock</span>.<span class="hljs-title function_">start</span>()
      <span class="hljs-comment">// 记录起始位置</span>
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">startPos</span> = {
        <span class="hljs-attr">x</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentTile</span>.<span class="hljs-property">x</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">stepLength</span>,
        <span class="hljs-attr">z</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentTile</span>.<span class="hljs-property">z</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">stepLength</span>,
      }
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">endPos</span> = {
        <span class="hljs-attr">x</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">targetTile</span>.<span class="hljs-property">x</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">stepLength</span>,
        <span class="hljs-attr">z</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">targetTile</span>.<span class="hljs-property">z</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">stepLength</span>,
      }
    }

    <span class="hljs-comment">// 步进动画</span>
    <span class="hljs-keyword">const</span> stepTime = <span class="hljs-variable language_">this</span>.<span class="hljs-property">isSpeedUp</span> ? <span class="hljs-variable constant_">SPEEDUP_STEP_TIME</span> : <span class="hljs-variable constant_">NORMAL_STEP_TIME</span> <span class="hljs-comment">// 根据加速状态调整步进时长</span>
    <span class="hljs-keyword">const</span> progress = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(<span class="hljs-number">1</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">moveClock</span>.<span class="hljs-title function_">getElapsedTime</span>() / stepTime)
    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setPosition</span>(progress)
    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setRotation</span>(progress)

    <span class="hljs-comment">// 步进结束</span>
    <span class="hljs-keyword">if</span> (progress &gt;= <span class="hljs-number">1</span>) {
      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">stepCompleted</span>()
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">moveClock</span>.<span class="hljs-title function_">stop</span>()
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">isMoving</span> = <span class="hljs-literal">false</span>
      <span class="hljs-comment">// 移除已完成的指令</span>
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">movesQueue</span>.<span class="hljs-title function_">shift</span>()
    }
  }
</code></pre>
<p>角色现在是可以移动了，但是当玩家移动到场景边界时会出现...</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c17d4ad394704372b3803b84d5268e91~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=U2004sd0NUddg7q0kPptGVZwvjw%3D" alt="6.gif" loading="lazy"></p>
<p>下面我们需要解决场景生成问题？不能一次生成太多，也不能让用户看到场景边界！</p>
<h3 data-id="heading-23">场景生成</h3>
<p>我们需要实现动态地形生成来解决这个问题，主要考虑两个关键点：</p>
<ol>
<li><strong>生成时机</strong>：何时触发地形扩展？</li>
<li><strong>生成方式</strong>：如何生成新的地形？</li>
</ol>
<h4 data-id="heading-24">生成时机判定</h4>
<p>让我们来看一张图</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/6a18db3d2959440caaee9b95649d768a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=pGS%2FMWktsrqnTd5nV7syRsi%2Fttc%3D" alt="17.png" loading="lazy"></p>
<p>这里我将<strong>刷新时机可以被认定为当用户距离地图板边小于一定距离时触发</strong>，用户的位置我们很容易获取到，而地图板边呢？</p>
<p>我们可以将<code>this.metadata.length</code>作为地图板边距离，毕竟在<code>scene</code>里，一个<code>row</code>的<code>Z</code>轴长度就为 <code>1</code></p>
<pre><code class="hljs language-js" lang="js">  <span class="hljs-comment">// 检查玩家距离地图末尾距离，自动扩展</span>
  <span class="hljs-title function_">checkAndExtendMap</span>(<span class="hljs-params">userZ</span>) {
    <span class="hljs-comment">// userZ 为玩家当前 z 坐标（负数，越小越远）</span>
    <span class="hljs-keyword">const</span> remainRows = <span class="hljs-variable language_">this</span>.<span class="hljs-property">metadata</span>.<span class="hljs-property">length</span> - <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(userZ) <span class="hljs-comment">//距离板边的距离</span>
    <span class="hljs-keyword">if</span> (remainRows &lt; <span class="hljs-variable constant_">GENERATION_COUNT</span>) {
      <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 扩充地形</span>
    }
  }
</code></pre>
<h4 data-id="heading-25">地形生成</h4>
<p>地形生成逻辑如下，而对于<code>generateMetaRows</code>的逻辑我不想过多赘述，使用<code>AI</code>将现有的<code>metadata</code>数据贴入上下文，大概半分钟就能生成这样一个函数。</p>
<pre><code class="hljs language-js" lang="js">  <span class="hljs-comment">// 扩展地图，生成并渲染 N 个新行</span>
  <span class="hljs-title function_">extendMap</span>(<span class="hljs-params">N = <span class="hljs-number">10</span></span>) {
    <span class="hljs-keyword">const</span> startRowIndex = <span class="hljs-variable language_">this</span>.<span class="hljs-property">metadata</span>.<span class="hljs-property">length</span>
    <span class="hljs-keyword">const</span> newRows = <span class="hljs-title function_">generateMetaRows</span>( N)
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">metadata</span>.<span class="hljs-title function_">push</span>(...newRows)

    <span class="hljs-comment">// 渲染新行</span>
    newRows.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">rowData</span>) =&gt;</span> {
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">rowIndex</span>++
      <span class="hljs-keyword">if</span> (rowData.<span class="hljs-property">type</span> === <span class="hljs-string">'forest'</span>) {
        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addGrassRow</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">rowIndex</span>)
        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addTreeRow</span>(rowData.<span class="hljs-property">trees</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">rowIndex</span>)
      }
      <span class="hljs-keyword">if</span> (rowData.<span class="hljs-property">type</span> === <span class="hljs-string">'road'</span>) {
        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addRoadRow</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">rowIndex</span>)
        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addCarRow</span>(rowData.<span class="hljs-property">vehicles</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">rowIndex</span>, rowData.<span class="hljs-property">direction</span>, rowData.<span class="hljs-property">speed</span>)
      }
    })
  }

  <span class="hljs-comment">// 检查玩家距离地图末尾距离，自动扩展</span>
  <span class="hljs-title function_">checkAndExtendMap</span>(<span class="hljs-params">userZ</span>) {
    <span class="hljs-comment">// userZ 为玩家当前 z 坐标（负数，越小越远）</span>
    <span class="hljs-keyword">const</span> remainRows = <span class="hljs-variable language_">this</span>.<span class="hljs-property">metadata</span>.<span class="hljs-property">length</span> - <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(userZ)
    <span class="hljs-keyword">if</span> (remainRows &lt; <span class="hljs-variable constant_">GENERATION_COUNT</span>) {
      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">extendMap</span>(<span class="hljs-variable constant_">GENERATION_COUNT</span>)
    }
  }
</code></pre>
<p>最后在让我们进入游戏中试试</p>
<p>( 这里特地把视角调远 )
<img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/1b9ff34b2e5c424f845e11a069a4aff3~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=H3BfcMCCkNAq%2BT7Ca0axxK%2BGEhk%3D" alt="7.gif" loading="lazy"></p>
<h2 data-id="heading-26">6.🚗用户碰撞检测</h2>
<h3 data-id="heading-27">当前问题：无所不能的小鸡！！</h3>
<p>目前游戏完全没有碰撞检测，玩家可以随心所欲地穿过任何物体：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/232319cd643748109f4a80504fbbed8f~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=wWKFZP78fPxWN%2FAeKYtkAoa5qrk%3D" alt="8.gif" loading="lazy"></p>
<p>我只能说小鸡是懂刷分这一块的！</p>
<h3 data-id="heading-28">树木碰撞检测</h3>
<p>树木碰撞其实要比想象中的要简单，还记得在角色移动前我们会计算下一个目标格得到一个 <code>this.targetTile</code>吗？我们可以根据 <code>this.targetTile</code>在<code>metadata</code>相应位置上是否存在<code>tree</code>而判断是否触发了树木碰撞。那么此时原先流程图的相应部分现在变成了</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ef18317c974d486e8753be8f49c96ad3~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=%2Bsk7oqXiISUIlzMB8S%2Fx97WF0ys%3D" alt="18.png" loading="lazy"></p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">/**
 * 判断目标格子是否为有效位置
 * <span class="hljs-doctag">@param</span> {<span class="hljs-type">{x:number, z:number</span>}} targetTile 目标格子坐标
 * <span class="hljs-doctag">@param</span> {<span class="hljs-type">Array</span>} metaData 地图元数据数组
 * <span class="hljs-doctag">@returns</span> {<span class="hljs-type">boolean</span>} 是否为有效位置
 */</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">endsUpInValidPosition</span>(<span class="hljs-params">targetTile, metaData</span>) {
  <span class="hljs-comment">// 1. 边界检查</span>
  <span class="hljs-keyword">if</span> (targetTile.<span class="hljs-property">x</span> &lt; <span class="hljs-variable constant_">MIN_TILE_INDEX</span> || targetTile.<span class="hljs-property">x</span> &gt; <span class="hljs-variable constant_">MAX_TILE_INDEX</span>)
    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>
  <span class="hljs-keyword">if</span> (targetTile.<span class="hljs-property">z</span> &lt;= -<span class="hljs-number">5</span>)
    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>

  <span class="hljs-comment">// 2. 检查 metaData 是否有树</span>
  <span class="hljs-keyword">const</span> rowIndex = targetTile.<span class="hljs-property">z</span>
  <span class="hljs-keyword">const</span> row = metaData[rowIndex - <span class="hljs-number">1</span>]
  <span class="hljs-keyword">if</span> (row &amp;&amp; row.<span class="hljs-property">type</span> === <span class="hljs-string">'forest'</span>) {
    <span class="hljs-comment">// 检查该行是否有树在目标 x</span>
    <span class="hljs-keyword">if</span> (row.<span class="hljs-property">trees</span>.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">tree</span> =&gt;</span> tree.<span class="hljs-property">tileIndex</span> === targetTile.<span class="hljs-property">x</span>)) {
      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>
    }
  }
  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>
}

  <span class="hljs-comment">// update方法：每帧调用，处理移动逻辑</span>
  <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>)
      <span class="hljs-keyword">return</span>
    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">movesQueue</span>.<span class="hljs-property">length</span>)
      <span class="hljs-keyword">return</span>

    <span class="hljs-comment">// 计算下一步目标格子</span>
    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">isMoving</span>) {
      <span class="hljs-keyword">const</span> dir = <span class="hljs-variable language_">this</span>.<span class="hljs-property">movesQueue</span>[<span class="hljs-number">0</span>]
      <span class="hljs-keyword">const</span> nextTarget = { ...<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentTile</span> }
      <span class="hljs-keyword">switch</span> (dir) {
        <span class="hljs-keyword">case</span> <span class="hljs-string">'forward'</span>:
          nextTarget.<span class="hljs-property">z</span> -= <span class="hljs-number">1</span>
          <span class="hljs-keyword">break</span>
        <span class="hljs-keyword">case</span> <span class="hljs-string">'backward'</span>:
          nextTarget.<span class="hljs-property">z</span> += <span class="hljs-number">1</span>
          <span class="hljs-keyword">break</span>
        <span class="hljs-keyword">case</span> <span class="hljs-string">'left'</span>:
          nextTarget.<span class="hljs-property">x</span> -= <span class="hljs-number">1</span>
          <span class="hljs-keyword">break</span>
        <span class="hljs-keyword">case</span> <span class="hljs-string">'right'</span>:
          nextTarget.<span class="hljs-property">x</span> += <span class="hljs-number">1</span>
          <span class="hljs-keyword">break</span>
      }
        
      <span class="hljs-comment">// 检查是否合法</span>
      <span class="hljs-keyword">const</span> mapMetadata = <span class="hljs-variable language_">this</span>.<span class="hljs-property">experience</span>.<span class="hljs-property">world</span>.<span class="hljs-property">map</span>.<span class="hljs-property">metadata</span>
      <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">endsUpInValidPosition</span>(nextTarget, mapMetadata)) { <span class="hljs-comment">// 不合法则丢弃指令</span>
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">movesQueue</span>.<span class="hljs-title function_">shift</span>()
        <span class="hljs-keyword">return</span>
      }
	<span class="hljs-comment">//后续逻辑不变...</span>
  }
</code></pre>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/df64d1a4eb8040129de7785b3c648215~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=fzRiwdyEK0l9BopOBvLbS4fDVss%3D" alt="9.gif" loading="lazy"></p>
<h4 data-id="heading-29">增强碰撞反馈</h4>
<p>但是这样碰撞虽然发生，但给人一点反馈没有，为了让碰撞更有感觉，我们增加了两个效果：</p>
<ul>
<li>虽然撞墙但也转向行为</li>
<li>原地蹦跶两下意思意思行为</li>
</ul>
<pre><code class="hljs language-js" lang="js">      <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">endsUpInValidPosition</span>(nextTarget, mapMetadata)) {
        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setRotation</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// 虽然撞墙但也转向行为</span>
        <span class="hljs-comment">// 不合法，执行 yoyo 动画并丢弃本次指令</span>
        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">playYoyoAnimation</span>(nextTarget) <span class="hljs-comment">//原地蹦跶两下意思意思行为</span>
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">movesQueue</span>.<span class="hljs-title function_">shift</span>()原地蹦跶两下意思意思行为
        <span class="hljs-keyword">return</span>
      }
</code></pre>
<p><code>this.playYoyoAnimation</code>效果类似 <code>gsap</code>的<code>yoyo</code>行为，跳向目标点随后返回原<code>tile</code>。</p>
<p>最终效果如下：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/5e7e35bf7bb048cfb47bb1d42c14eb24~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=6vMS%2FiOKtgnDCjc28v6W%2BKAGmNU%3D" alt="10.gif" loading="lazy"></p>
<h3 data-id="heading-30">汽车碰撞</h3>
<p>那么汽车碰撞是怎么实现的呢？毕竟场景里动态元素这么多，使用<code>octree</code>肯定不行。我这里使用了 <code>BOX3</code>为车辆和用户创建了包围盒，随后判断是否车辆和用户相交进而确定游戏进程是否继续。</p>
<p><code>AABB</code>？！这场景这么多车你用这方法？这不是越玩越卡，开头 <code>120FPS</code>，结尾卡成<code>PPT</code>。可是。。。。为什么你的电脑这么流畅，难道你用 <code>4090</code>来玩这个<code>4399</code>小游戏？</p>
<h4 data-id="heading-31"><strong>空间分区</strong>：只检测玩家当前所在道路行的车辆</h4>
<p><strong>参考文章: <a href="https://link.juejin.cn?target=https%3A%2F%2Fjavascriptgametutorials.com%2Ftutorials%2Fthree-js%2Fcrossy-road%2Fhit-detection" target="_blank" title="https://javascriptgametutorials.com/tutorials/three-js/crossy-road/hit-detection" ref="nofollow noopener noreferrer">crossRoad 撞击检测章节</a></strong></p>
<p>答案是只对玩家当前所在的道路行进行碰撞测试，比如玩家 A 在道路行 31 行，那么只要求第 31 行的车辆生成包围盒并判断是否与用户相交。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/9ba8c5179d5c4171a07023358f57fd57~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=biRiYXrby4ZWupjPDKSItxExDRs%3D" alt="19.png" loading="lazy"></p>
<p>那么首先我们需要解决的问题是 如何获取玩家当前所在行的所有汽车<code>mesh</code>,这就需要我们提前维护一个汽车快表,将每个行的行数以及当前汽车mesh 映射起来</p>
<p>这里我们回到<strong>车辆生成</strong>相关代码，在这里维护一个<code>this.carMeshDict</code>字典</p>
<pre><code class="hljs language-js" lang="js">    <span class="hljs-comment">// 新增：行号到车辆mesh数组的映射</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">carMeshDict</span> = {}

 <span class="hljs-comment">// 初始化地图内容</span>
  <span class="hljs-title function_">initializeMap</span>(<span class="hljs-params"></span>) {
	<span class="hljs-comment">//....逻辑不变</span>
  }

  <span class="hljs-comment">// 添加一行车辆</span>
  <span class="hljs-title function_">addCarRow</span>(<span class="hljs-params">vehicles, rowIndex = <span class="hljs-number">0</span>, direction = <span class="hljs-literal">false</span>, speed = <span class="hljs-number">1</span></span>) {
    <span class="hljs-keyword">const</span> carRow = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">scene</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">resources</span>, vehicles, rowIndex, direction, speed)
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">carRows</span>.<span class="hljs-title function_">push</span>(carRow)
    <span class="hljs-comment">// 新增：记录每行车辆mesh</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">carMeshDict</span>[rowIndex] = carRow.<span class="hljs-title function_">getCarMeshes</span>()
  }
</code></pre>
<p>随后封装一个方法来帮助快速获取某行车辆,并解决判空问题。</p>
<pre><code class="hljs language-js" lang="js">  <span class="hljs-comment">// 新增：获取指定行的车辆mesh数组</span>
  <span class="hljs-title function_">getCarMeshesByRow</span>(<span class="hljs-params">rowIndex</span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">carMeshDict</span>[rowIndex] || []
  }
</code></pre>
<p>最后遍历每辆汽车，逐一检测碰撞</p>
<ul>
<li>
<p>对每个汽车 Mesh，分别构建包围盒（THREE.Box3）。</p>
</li>
<li>
<p>构建玩家的包围盒。</p>
</li>
<li>
<p>使用 Box3.intersectsBox() 判断玩家和汽车是否有包围盒重叠（即发生碰撞）。</p>
</li>
</ul>
<pre><code class="hljs language-js" lang="js">  <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) {
    <span class="hljs-comment">// 如果游戏已结束，直接返回，防止继续执行 update 逻辑</span>
    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span>) {
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span>.<span class="hljs-title function_">update</span>()
      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span> &amp;&amp; !<span class="hljs-variable language_">this</span>.<span class="hljs-property">isGameOver</span>) {
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span>.<span class="hljs-title function_">checkAndExtendMap</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-property">currentTile</span>.<span class="hljs-property">z</span>)
        <span class="hljs-comment">// === 碰撞检测 ===</span>
        <span class="hljs-comment">// 获取玩家mesh和所在行</span>
        <span class="hljs-keyword">const</span> playerMesh = <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-property">instance</span>
        <span class="hljs-keyword">if</span> (playerMesh) {
          <span class="hljs-keyword">const</span> playerRow = <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-property">currentTile</span>.<span class="hljs-property">z</span>
          <span class="hljs-keyword">const</span> carMeshes = <span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span>.<span class="hljs-title function_">getCarMeshesByRow</span>(playerRow)
          <span class="hljs-keyword">if</span> (carMeshes.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) {
            <span class="hljs-comment">// 构建玩家包围盒</span>
            <span class="hljs-keyword">const</span> playerBox = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Box3</span>().<span class="hljs-title function_">setFromObject</span>(playerMesh)
            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> carMesh <span class="hljs-keyword">of</span> carMeshes) {
              <span class="hljs-keyword">const</span> carBox = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Box3</span>().<span class="hljs-title function_">setFromObject</span>(carMesh)
              <span class="hljs-keyword">if</span> (playerBox.<span class="hljs-title function_">intersectsBox</span>(carBox)) {
                  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">onGameOver</span>() <span class="hljs-comment">//撰写你想要的结束效果</span>
              }
            }
          }
        }
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-title function_">update</span>()
      }
    }
  }
</code></pre>
<p>(顺便在这贴上<a href="https://link.juejin.cn?target=https%3A%2F%2Fdiscourse.threejs.org%2Ft%2Fhowto-dispose-box3%2F75299" target="_blank" title="https://discourse.threejs.org/t/howto-dispose-box3/75299" ref="nofollow noopener noreferrer"><code>BOX3</code>资源释放相关帖</a>)</p>
<p>简单的游戏结束效果包括：</p>
<ul>
<li>玩家位置重置</li>
<li>显示结束UI</li>
<li>上传分数</li>
</ul>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ee1406f4066746079addd8fcb8d2b96e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=D3%2B%2BLXlIjjEDbxLlfGV1VOqVlcs%3D" alt="11.gif" loading="lazy"></p>
<p>这种实现方式既保证了碰撞检测的准确性，又通过空间分区优化确保了游戏性能，即使在低端设备上也能流畅运行。</p>
<h2 data-id="heading-32">7.📞GAME UI 通信</h2>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/5a1e8e2f288e44428898e0656ceee609~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=EIwb1z7HTtIG5Gccf%2F9WF36KI4M%3D" alt="12.gif" loading="lazy"></p>
<p>在撰写<code>Threejs</code>项目时，我们常常面临一个关键挑战：如何将3D场景(Scene)中的动态信息有效地传递到2D游戏界面(Game UI)。就比如在这个游戏中当用户获取特殊道具时，虽然放慢周围车辆的特效很炫酷，但如果缺少清晰的道具倒计时提示和氛围光晕效果，整个体验就会显得不够完整。</p>
<h3 data-id="heading-33">框架解决方案的利与弊</h3>
<p>目前市场上已有<a href="https://link.juejin.cn?target=https%3A%2F%2Fr3f.docs.pmnd.rs%2Fgetting-started%2Fintroduction%3Ftrk%3Dpublic_post_comment-text" target="_blank" title="https://r3f.docs.pmnd.rs/getting-started/introduction?trk=public_post_comment-text" ref="nofollow noopener noreferrer">React Three Fiber</a>和<a href="https://link.juejin.cn?target=https%3A%2F%2Ftresjs.org%2F" target="_blank" title="https://tresjs.org/" ref="nofollow noopener noreferrer">Tresjs</a>等响应式框架，它们通过内置机制简化了3D场景与UI之间的数据交互(<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Forgs%2FTresjs%2Fdiscussions%2F578" target="_blank" title="https://github.com/orgs/Tresjs/discussions/578" ref="nofollow noopener noreferrer">类似的issue</a>)。这些框架确实提供了便捷的解决方案。然而，框架学习本身需要时间成本，且可能带来项目依赖性的问题。如果用户是在一个老的<code>3D</code>项目上维护场景呢？</p>
<h3 data-id="heading-34">回归本质：事件驱动架构</h3>
<p>当我们希望保持项目轻量级，或者需要更灵活的解决方案时，可以回归到事件驱动架构（风水轮流转了属于是，没准前端真的是个圈）。这种发布-订阅模式(Pub-Sub)完美适用于处理事件触发和状态变更的场景：</p>
<p>首先让我们看<code>threejs</code>的入口文件<code>Experience</code>实体类，他负责接受页面<code>canvas</code>元素，随后将<code>Render</code>挂载到对应<code>canvas</code>上，这里我们让Experience 类继承自 EventEmitter（事件发射器），具备事件注册、触发、移除等能力。</p>
<ul>
<li>
<p>组件/模块通过 on('事件名', 回调) 订阅事件。</p>
</li>
<li>
<p>其他地方通过 trigger('事件名', [参数]) 触发事件，所有订阅者收到通知。</p>
</li>
</ul>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">THREE</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'three'</span>

<span class="hljs-keyword">import</span> <span class="hljs-title class_">Camera</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./camera.js'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Renderer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./renderer.js'</span>
<span class="hljs-keyword">import</span> sources <span class="hljs-keyword">from</span> <span class="hljs-string">'./sources.js'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Debug</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./utils/debug.js'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">EventEmitter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./utils/event-emitter.js'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">IMouse</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./utils/imouse.js'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Resources</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./utils/resources.js'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Sizes</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./utils/sizes.js'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Stats</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./utils/stats.js'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Time</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./utils/time.js'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">PhysicsWorld</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./world/physics-world.js'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">World</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./world/world.js'</span>

<span class="hljs-keyword">let</span> instance

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Experience</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">EventEmitter</span> {
  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">canvas</span>) {
    <span class="hljs-comment">// 确保单一实例</span>
    <span class="hljs-keyword">if</span> (instance) {
      <span class="hljs-keyword">return</span> instance
    }

    <span class="hljs-variable language_">super</span>()
    instance = <span class="hljs-variable language_">this</span>

    <span class="hljs-comment">// Global access</span>
    <span class="hljs-variable language_">window</span>.<span class="hljs-property">Experience</span> = <span class="hljs-variable language_">this</span>

    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvas</span> = canvas

    <span class="hljs-comment">// 实例化所有类组件</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">debug</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Debug</span>()
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">stats</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stats</span>()
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sizes</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sizes</span>()
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">time</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Time</span>()
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">scene</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Scene</span>()
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">camera</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Camera</span>(<span class="hljs-literal">true</span>)
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">renderer</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Renderer</span>()
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">resources</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Resources</span>(sources)
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">physics</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PhysicsWorld</span>()
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">iMouse</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IMouse</span>()
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">world</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">World</span>()

    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sizes</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">'resize'</span>, <span class="hljs-function">() =&gt;</span> {
      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">resize</span>()
    })

    <span class="hljs-variable language_">this</span>.<span class="hljs-property">time</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">'tick'</span>, <span class="hljs-function">() =&gt;</span> {
      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">update</span>()
    })

    <span class="hljs-comment">// 事件监听测试</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">'pause'</span>, <span class="hljs-function">() =&gt;</span> {
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">isPaused</span> = <span class="hljs-literal">true</span> <span class="hljs-comment">// 设置为暂停</span>
    })
    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">'resume'</span>, <span class="hljs-function">() =&gt;</span> {
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">isPaused</span> = <span class="hljs-literal">false</span>
    })
  }

  <span class="hljs-title function_">resize</span>(<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">camera</span>.<span class="hljs-title function_">resize</span>()
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">renderer</span>.<span class="hljs-title function_">resize</span>()
  }

  <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">isPaused</span>)
      <span class="hljs-keyword">return</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">camera</span>.<span class="hljs-title function_">update</span>()
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">world</span>.<span class="hljs-title function_">update</span>()
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">renderer</span>.<span class="hljs-title function_">update</span>() 
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">stats</span>.<span class="hljs-title function_">update</span>()
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">iMouse</span>.<span class="hljs-title function_">update</span>()
  }
}

</code></pre>
<h3 data-id="heading-35">页面 UI 操控 游戏场景</h3>
<p>完成<code>threejs</code>项目入口文件继承了发布订阅类之后，我们就能在获取唯一实例并调用<code>trigger</code>&amp;<code>on</code>方法来进行<code>Threejs scene</code> &amp; <code>game UI</code>之间的信息传输
<img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/08a665dcfa67412b907dcba5eae03637~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=ibTGb%2FYTe8xIdtqqu0rZ9rMWMrI%3D" alt="20.png" loading="lazy"></p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a115d52e83ad4fe6807e81fe641cf006~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=QDwe77fJnG8WprFhPMdtCVkwKlo%3D" alt="13.gif" loading="lazy"></p>
<h3 data-id="heading-36">游戏场景操作页面UI</h3>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/4a5d9319665c445ab0c953685d3e63e4~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=qVX%2BpzsU9fcyDBum9Hp0%2BAzV%2F00%3D" alt="21.png" loading="lazy"></p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/e18ad4235c9d453687d1a3ff130fe92a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=IQ8j9BFxUFDfBnx3A2nQ9efe2ko%3D" alt="14.gif" loading="lazy"></p>
<h2 data-id="heading-37">8.🎊朋友，端午节快乐！六一儿童节快乐！</h2>
<p>随着最后一个<code>commit</code>被<code>push</code>到远端，这个承载着心意的小项目安静地躺在GitHub上。还记得第一次敲下前端代码时的纯粹吗？那时的我，不在乎deadline的催促，不关心KPI的考核，只想要创造一个能让人眼前一亮的页面。</p>
<p>是时候将他分享出去了！</p>
<p>**项目的开源方便给你的小孩、身边朋友、所爱之人埋下彩蛋，我只希望这个游戏能带来单纯的快乐，所以右上角的排行榜会在每天凌晨刷新，弱化他的竞技性。**Work Life Balance`不只是口号，这个小游戏就是我的践行方式。愿这些跳动的代码能为你和所爱之人带来欢乐！
<strong>各位掘友，端午节和六一儿童节 节日快乐</strong>！</p>
<p>愿我们永远保持对生活的热爱，对代码的激情，就像第一次写出"Hello World"时那样满怀欣喜。</p>
<p>（小提示：试着在游戏里寻找隐藏的粽子图案哦～）</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/3e322127252a48209f90477d522bc215~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=lH0Wr9ZwKkGpouUwpVWsZ%2FKEawU%3D" alt="22.png" loading="lazy"></p>
<h2 data-id="heading-38">9.最后的一些话</h2>
<h3 data-id="heading-39">技术的未来与前端迁移</h3>
<p>随着 AI 技术的快速发展，各类技术的门槛正在大幅降低，以往被视为高门槛的 <code>3D</code> 技术也不例外。与此同时，过去困扰开发者的数字资产构建成本问题，也正在被最新的 <code>3D generation</code> 技术所攻克。这意味着，在不久的将来，前端开发将迎来一次技术迁移，开发者需要掌握更新颖的交互方式和更出色的视觉效果。</p>
<h3 data-id="heading-40">本专栏的愿景</h3>
<p>本专栏的愿景是通过分享 <code>Three.js</code> 的中高级应用和实战技巧，帮助开发者更好地将 <code>3D</code> 技术应用到实际项目中，打造令人印象深刻的 <code>Hero Section</code>。我们希望通过本专栏的内容，能够激发开发者的创造力，推动 <code>Web3D</code> 技术的普及和应用。</p>
<h3 data-id="heading-41">加入社区，共同成长</h3>
<p>如果您对 <code>Threejs</code> 这个 <code>3D</code> 图像框架很感兴趣，或者您也深信未来国内会涌现越来越多 <code>3D</code> 设计风格的网站，欢迎加入 <strong><a href="https://link.juejin.cn?target=https%3A%2F%2Ficegl.cn%2F" target="_blank" title="https://icegl.cn/" ref="nofollow noopener noreferrer">ice 图形学社区</a></strong>。这里是国内 Web 图形学最全的知识库，致力于打造一个全新的图形学生态体系！您可以在认证达人里找到我这个 <code>Threejs</code> 爱好者和其他大佬。</p>
<p>此外，如果您很喜欢 <code>Threejs </code>又在烦恼其原生开发的繁琐，那么我诚邀您尝试 <strong><a href="https://link.juejin.cn?target=https%3A%2F%2Ftresjs.org%2F" target="_blank" title="https://tresjs.org/" ref="nofollow noopener noreferrer">Tresjs</a></strong> 和 <strong><a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.icegl.cn%2F" target="_blank" title="https://docs.icegl.cn/" ref="nofollow noopener noreferrer">TvTjs</a></strong>, 他们都是基于 <code>Vue</code> 的 <code>Threejs</code> 框架。 <strong><a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.icegl.cn%2F" target="_blank" title="https://docs.icegl.cn/" ref="nofollow noopener noreferrer">TvTjs</a></strong> 也为您提供了大量的可使用案例，并且拥有较为活跃的开发社区，在这里你能碰到志同道合的朋友一起做开源！</p>
<h3 data-id="heading-42">上期回顾： 我写出了被 Threejs 官推转发的项目——3D 个人简历</h3>
<p>掘金站内链接: <a href="https://juejin.cn/post/7498914140166799397" target="_blank" title="https://juejin.cn/post/7498914140166799397">juejin.cn/post/749891…</a></p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/123d8e2ea3054678a3119d5e6971e309~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=%2Bhn2PtAJR8NUw8Gl9iM7KtkuRrE%3D" alt="16.gif" loading="lazy"></p>
<h3 data-id="heading-43">下期预告： 😲我写出了 Threejs 版城市天际线？！（官推转发🥳+ 源码分享🚀</h3>
<p>文章已于 8月15日撰写完毕，掘金站内链接：<a href="https://juejin.cn/post/7538715423534399534" target="_blank" title="https://juejin.cn/post/7538715423534399534">juejin.cn/post/753871…</a></p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/fd3d1b3579784de4a820eee1f49c7d35~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5L2V6LSk:q75.awebp?rk3s=f64ab15b&amp;x-expires=1756688815&amp;x-signature=%2F87HTj%2F3P8fs8%2FqBG0%2FdAX4nHNM%3D" alt="01.gif" loading="lazy"></p></div></div>