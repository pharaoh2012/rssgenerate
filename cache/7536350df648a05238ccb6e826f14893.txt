<!----> <meta itemprop="headline" content="2025新春版：轻松搞定Vite6+React19全家桶"> <meta itemprop="keywords" content="React.js,Vite"> <meta itemprop="datePublished" content="2024-12-30T00:37:38.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="Mr_兔子先生"> <meta itemprop="url" content="https://juejin.cn/user/4195392103393406"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-b21437b8="">
            2025新春版：轻松搞定Vite6+React19全家桶
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-b21437b8=""><div class="author-info-box" data-v-b21437b8=""><div class="author-name" data-v-b21437b8=""><a href="/user/4195392103393406/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-b21437b8=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    Mr_兔子先生
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-b21437b8=""><time datetime="2024-12-30T00:37:38.000Z" title="Mon Dec 30 2024 00:37:38 GMT+0000 (Coordinated Universal Time)" class="time" data-v-b21437b8="">
                    2024-12-30
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-b21437b8=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-b21437b8=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-b21437b8=""></circle></svg> <span class="views-count" data-v-b21437b8="">
                    4,995
                  </span> <span class="read-time" data-v-b21437b8=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-b21437b8=""><rect width="16" height="16" fill="none" data-v-b21437b8=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-b21437b8=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-b21437b8=""></path></svg>
                    阅读44分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-b21437b8=""></div> <!----> <!----></div> <!----> <!----> <!----> <img src="//lf-web-assets.juejin.cn/obj/juejin-web/xitu_juejin_web/img/banner.a5c9f88.jpg" style="width:100%;height:auto;display:block;" data-v-b21437b8=""> <div id="article-root" itemprop="articleBody" class="main" data-v-b21437b8=""><div class="article-viewer markdown-body cache result"><p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/01f75ba9c74b4703bc3c58ae0652e0d8~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=HuV%2BaKVvl7v8Kni8CtPvY3tz3zs%3D" alt="封面_掘金.png" loading="lazy"></p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3c7eaba051f47a98127b146170fb335~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1205&amp;h=155&amp;s=32739&amp;e=png&amp;a=1&amp;b=feb333" alt="原创声明-掘金.png" loading="lazy"></p>
<p>最近真是赶上了大版本升级高峰期，2024年11月26日Vite6正式发布了，紧接着12月5日React19又发布了。Vite6进一步提升了启动和构建性能，增强了TypeScript和原生ESM支持，改进了CSS、插件和SSR 配置，优化了错误提示和调试，强化了生态兼容性，并且支持了最新框架和Node.js版本，为现代浏览器提供更高效的开发体验。随着React19的发布，相关的开源包（Redux Toolkit、Antd等）也随之更新。Antd从5.22.5版本开始逐步适配React19，按照Ant Design官方的计划，Antd v6发布还需要一段时间。为了赶上大版本的首发车，本教程就不等Antd v6了。2023年6月我发布了《2023盛夏版：轻松搞定基于Vite4的React项目全家桶》，时隔一年半，旧版教程已经有些过时了，因此对本系列教程进行全面更新。</p>
<p>本教程的目的就是帮助大家快速掌握当前最新的Vite6+React19全家桶技术栈，跟上前端技术的快车，省去自行摸索的时间，特别适合作为初学者的入门教程。</p>
<h2 data-id="heading-0">先睹为快</h2>
<p>先看下目录了解本教程都有哪些内容。</p>
<p><strong>章节目录</strong></p>
<pre><code class="hljs language-css" lang="css"><span class="hljs-number">1</span> 初始化项目
• <span class="hljs-number">1.1</span> 配置npm国内镜像源
• <span class="hljs-number">1.2</span> 使用Vite新建项目
• <span class="hljs-number">1.3</span> 安装并运行项目
• <span class="hljs-number">1.4</span> 精简项目
<span class="hljs-number">2</span> Vite基础配置
• <span class="hljs-number">2.1</span> 支持Sass/Scss/Less/Stylus
• <span class="hljs-number">2.2</span> 设置Vite服务监听端口
• <span class="hljs-number">2.3</span> 设置dev环境的Server端口号
• <span class="hljs-number">2.4</span> 设置dev环境自动打开浏览器
• <span class="hljs-number">2.5</span> 设置路径别名
<span class="hljs-number">3</span> 项目架构搭建
• <span class="hljs-number">3.1</span> 项目目录结构设计
• <span class="hljs-number">3.2</span> 关于样式命名规范
• <span class="hljs-number">3.3</span> 设置全局公用样式
<span class="hljs-number">4</span> 引入Ant Design <span class="hljs-number">5</span><span class="hljs-selector-class">.x</span>
• <span class="hljs-number">4.1</span> 安装Ant Design
• <span class="hljs-number">4.2</span> 设置Antd为中文语言
• <span class="hljs-number">4.3</span> 兼容React19
• <span class="hljs-number">4.4</span> 批量升级全部项目npm依赖包到最新版本
<span class="hljs-number">5</span> 页面开发
• <span class="hljs-number">5.1</span> 构建Login页面
• <span class="hljs-number">5.2</span> 构建公共组件PageHeaderWrapper
• <span class="hljs-number">5.3</span> 构建Home页面
• <span class="hljs-number">5.4</span> 构建Users页面
<span class="hljs-number">6</span> 页面路由
• <span class="hljs-number">6.1</span> 构建全局路由
• <span class="hljs-number">6.2</span> 构建框架页面Entry
• <span class="hljs-number">6.3</span> 引入路由
• <span class="hljs-number">6.4</span> 路由跳转：构建左侧导航Sider组件
<span class="hljs-number">7</span> React Developer Tools浏览器插件
<span class="hljs-number">8</span> Redux及Redux Toolkit
• <span class="hljs-number">8.1</span> 安装Redux及Redux Toolkit
• <span class="hljs-number">8.2</span> 创建全局配置文件
• <span class="hljs-number">8.3</span> 创建用于主题换肤的store分库
• <span class="hljs-number">8.4</span> 创建store总库
• <span class="hljs-number">8.5</span> 引入store到项目
• <span class="hljs-number">8.6</span> store的读取：将主题色和亮暗模式应用于项目
• <span class="hljs-number">8.7</span> store的变更：在<span class="hljs-selector-tag">Header</span>组件中实现亮暗模式切换
• <span class="hljs-number">8.8</span> 自建组件使用Antd的主题色：完善Sider
• <span class="hljs-number">8.9</span> store的使用：实现主题色切换
• <span class="hljs-number">8.9</span>.<span class="hljs-number">1</span> 创建主题色选择对话框组件
• <span class="hljs-number">8.9</span>.<span class="hljs-number">2</span> 创建自定义SVG图标<span class="hljs-attribute">Icon</span>组件
• <span class="hljs-number">8.9</span>.<span class="hljs-number">3</span> 在<span class="hljs-selector-tag">Header</span>组件中实现主题色切换
• <span class="hljs-number">8.10</span> 安装Redux调试浏览器插件
<span class="hljs-number">9</span> 基于axios封装公用API库
• <span class="hljs-number">9.1</span> 安装axios
• <span class="hljs-number">9.2</span> 封装公用API库
• <span class="hljs-number">9.3</span> Mock<span class="hljs-selector-class">.js</span>安装与使用
• <span class="hljs-number">9.4</span> 发起API请求：实现登录功能
<span class="hljs-number">10</span> 其他优化
• <span class="hljs-number">10.1</span> 路由守卫
• <span class="hljs-number">10.2</span> 设置开发环境的反向代理请求
• <span class="hljs-number">10.3</span> 使用ESLint9实时检查代码
• <span class="hljs-number">10.4</span> 针对Windows系统的页面滚动条样式优化
<span class="hljs-number">11</span> build项目
• <span class="hljs-number">11.1</span> 设置静态资源引用路径
• <span class="hljs-number">11.2</span> 设置build目录名称及静态资源存放目录（选读）
• <span class="hljs-number">11.3</span> 执行build项目
<span class="hljs-number">12</span> 项目Git源码
结束语
</code></pre>
<p>本教程的主要依赖包版本：</p>
<pre><code class="hljs language-bash" lang="bash">Node.js 22.12.0
vite 6.0.6
antd 5.22.7
axios 1.7.9
mockjs 1.1.0
react 19.0.0
react-redux 9.2.0
react-router-dom 7.1.1
@reduxjs/toolkit 2.5.0
eslint 9.17.0
less 4.2.1
sass 1.83.0
stylus 0.64.0
vite-plugin-checker 0.8.0
@ant-design/v5-patch-for-react-19 1.0.3
</code></pre>
<blockquote>
<p>※注：</p>
<p>代码区域每行开头的：</p>
<p>"+" 表示新增</p>
<p>"-" 表示删除</p>
</blockquote>
<p>跟着操作一遍，就可以快速上手Vite6啦！下面请跟着新版教程一步步操作。</p>
<h2 data-id="heading-1">1 初始化项目</h2>
<h3 data-id="heading-2">1.1 配置npm国内镜像源</h3>
<p>npm默认是从国外源站拉取依赖包的，为提高下载速度和稳定性，建议配置为国内镜像源。</p>
<p>执行：</p>
<pre><code class="hljs language-arduino" lang="arduino">npm config set registry https:<span class="hljs-comment">//registry.npmmirror.com</span>
</code></pre>
<p>执行后，可以通过以下命令查看npm配置，确认是否设置成功：</p>
<pre><code class="hljs language-arduino" lang="arduino">npm config list
</code></pre>
<p>输出的内容中，检查registry的值是否已改为国内镜像源地址：</p>
<pre><code class="hljs language-ini" lang="ini"><span class="hljs-attr">registry</span> = <span class="hljs-string">"https://registry.npmmirror.com/"</span>
</code></pre>
<h3 data-id="heading-3">1.2 使用Vite新建项目</h3>
<blockquote>
<p>※注：Vite6要Node.js版本18+或20+。然而，有些模板需要依赖更高的Node 版本才能正常运行，当你的包管理器发出警告时，请注意升级你的 Node 版本。</p>
</blockquote>
<p>先进入想要创建项目的目录，在这个目录下执行安装命令：</p>
<pre><code class="hljs language-sql" lang="sql">npm <span class="hljs-keyword">create</span> vite<span class="hljs-variable">@latest</span>
</code></pre>
<p>执行后，会要求填写项目名称，这里我填写的是vite-react-app，可根据情况自定。</p>
<pre><code class="hljs language-yaml" lang="yaml"><span class="hljs-string">?</span> <span class="hljs-attr">Project name:</span> <span class="hljs-string">»</span> <span class="hljs-string">vite-react-app</span>  
</code></pre>
<p>然后，会要求选择框架，选择React：</p>
<pre><code class="hljs language-css" lang="css">? Select <span class="hljs-selector-tag">a</span> framework: 
    Vanilla
    Vue
&gt;   React
    Preact
    Lit
    Svelte
    Solid
    Qwik
    Angular
    Others
</code></pre>
<p>最后，选择开发语言，本教程选择JavaScript：</p>
<pre><code class="hljs language-arduino" lang="arduino">? Select a variant:
    TypeScript
    TypeScript + SWC
&gt;   JavaScript
    JavaScript + SWC
    React Router v7 ↗
</code></pre>
<p>回答以上“灵魂三问”后，即可完成Vite项目创建。</p>
<h3 data-id="heading-4">1.3 安装并运行项目</h3>
<p>进入项目目录，运行命令进行项目依赖包的安装。</p>
<pre><code class="hljs language-bash" lang="bash"><span class="hljs-built_in">cd</span> vite-react-app
npm install
</code></pre>
<p>稍等片刻，安装完成后，执行以下命令运行项目：</p>
<pre><code class="hljs language-arduino" lang="arduino">npm run dev
</code></pre>
<p>需要手动打开以下地址访问项目：</p>
<pre><code class="hljs language-arduino" lang="arduino">http:<span class="hljs-comment">//localhost:5173/</span>
</code></pre>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/235cea5420ae4a4d813fbc80374f2171~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=Gn6yKxdN8YEm%2BJZugSHIg2y0nNc%3D" alt="1.3_安装并运行项目.png" loading="lazy"></p>
<p>Vite默认开启的端口是5173，后续章节会讲解怎么修改端口号。</p>
<h3 data-id="heading-5">1.4 精简项目</h3>
<p>接下来，删除用不到的文件，最简化项目。</p>
<pre><code class="hljs language-diff" lang="diff">   ├─ /node_modules
   ├─ /public
<span class="hljs-deletion">-  |  └─ vite.svg</span>
   ├─ /src
<span class="hljs-deletion">-  |  ├─ /assets</span>
<span class="hljs-deletion">-  |  |  └─ react.svg</span>
<span class="hljs-deletion">-  |  ├─ App.css</span>
   |  ├─ App.jsx
<span class="hljs-deletion">-  |  ├─ index.css</span>
   |  └─ main.jsx
   ├─ .gitignore
   ├─ eslint.config.js
   ├─ index.html
   ├─ package-lock.json
   ├─ package.json
   ├─ README.md
   └─ vite.config.js
</code></pre>
<p>现在目录结构如下，清爽许多：</p>
<pre><code class="hljs language-lua" lang="lua">├─ /node_modules
├─ /public
├─ /src
|  ├─ App.jsx
|  └─ main.jsx
├─ .gitignore
├─ eslint.<span class="hljs-built_in">config</span>.js
├─ index.html
├─ <span class="hljs-built_in">package</span>-lock.json
├─ <span class="hljs-built_in">package</span>.json
├─ README.md
└─ vite.<span class="hljs-built_in">config</span>.js
</code></pre>
<p>以上文件删除后，页面会报错。这是因为相应的文件引用已不存在。需要继续修改代码，先让项目正常运行起来。</p>
<p>逐个修改以下文件。</p>
<p>src/App.jsx：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"App"</span>&gt;</span>Vite-React-App<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>
</code></pre>
<p>src/main.jsx：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom/client'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./App'</span>

<span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'root'</span>)).<span class="hljs-title function_">render</span>(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>)
</code></pre>
<p>index.html：</p>
<pre><code class="hljs language-xml" lang="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"icon"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"image/svg+xml"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/favicon.ico"</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vite React App<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"root"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"module"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/src/main.jsx"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>
</code></pre>
<p>在上述<code>index.html</code>代码中，修改了网站图标，因此需要自行准备一个图标文件<code>favicon.ico</code>，存放在<code>/public</code>目录下。当然，也可以使用svg格式。</p>
<pre><code class="hljs language-lua" lang="lua">   ├─ /node_modules
   ├─ /public
+  |  └─ favicon.ico
   ├─ /src
   |  ├─ App.jsx
   |  └─ main.jsx
   ├─ .gitignore
   ├─ eslint.<span class="hljs-built_in">config</span>.js
   ├─ index.html
   ├─ <span class="hljs-built_in">package</span>-lock.json
   ├─ <span class="hljs-built_in">package</span>.json
   ├─ README.md
   └─ vite.<span class="hljs-built_in">config</span>.js
</code></pre>
<p>这里你可能会问，为什么在<code>index.html</code>的<code>&lt;link&gt;</code>中引入图标的路径是<code>/favicon.ico</code>，而favicon.ico明明是放在<code>/public</code>目录下，却不是<code>/public/favicon.ico</code>呢？
按照Vite官方说明：引入public中的资源永远应该使用<code>根绝对路径</code>，并且，public中的资源不应该被JavaScript文件引用。</p>
<blockquote>
<p>public目录Vite官方说明：</p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fguide%2Fassets%23the-public-directory" target="_blank" title="https://cn.vitejs.dev/guide/assets#the-public-directory" ref="nofollow noopener noreferrer">cn.vitejs.dev/guide/asset…</a></p>
</blockquote>
<p>运行项目，执行：</p>
<pre><code class="hljs language-arduino" lang="arduino">npm run dev
</code></pre>
<p>页面效果如下：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/b8a16563d1ff40f696d95c0823fa0caf~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=t7GWfNuZT0Sxx%2FWb0YbYThvVMQc%3D" alt="1.4_精简项目.png" loading="lazy"></p>
<h2 data-id="heading-6">2 Vite基础配置</h2>
<h3 data-id="heading-7">2.1 支持Sass/Scss/Less/Stylus</h3>
<p>Vite本身提供了对.scss/.sass/.less/.styl/.stylus文件的内置支持。无需再安装特定的Vite插件，但必须安装相应的预处理器依赖。</p>
<p>支持Sass/Scss，执行以下命令安装：</p>
<pre><code class="hljs">npm install -D sass
</code></pre>
<p>支持Less，执行以下命令安装：</p>
<pre><code class="hljs">npm install -D less
</code></pre>
<p>支持Stylus，执行以下命令安装：</p>
<pre><code class="hljs">npm install -D stylus
</code></pre>
<p>安装后，就可以直接使用以上对应的CSS预处理语言了，非常方便。</p>
<blockquote>
<p>CSS预处理器Vite官方说明：</p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fguide%2Ffeatures.html%23css-pre-processors" target="_blank" title="https://cn.vitejs.dev/guide/features.html#css-pre-processors" ref="nofollow noopener noreferrer">cn.vitejs.dev/guide/featu…</a></p>
</blockquote>
<h3 data-id="heading-8">2.2 设置Vite服务监听端口</h3>
<p>默认情况下，在执行<code>npm run dev</code>后，Vite只允许通过localhost访问。有时候，需要让其他人通过你的IP访问你的Vite项目，这就需要开放所有IP，设置如下：</p>
<p>修改<code>vite.config.js</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript">    <span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">'vite'</span>
    <span class="hljs-keyword">import</span> react <span class="hljs-keyword">from</span> <span class="hljs-string">'@vitejs/plugin-react'</span>

    <span class="hljs-comment">// https://vitejs.dev/config/</span>
    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({
+       <span class="hljs-attr">server</span>: {
+           <span class="hljs-comment">// 监听所有IP地址</span>
+           <span class="hljs-attr">host</span>: <span class="hljs-string">'0.0.0.0'</span>,
+       },
        <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">react</span>()],
    })
</code></pre>
<h3 data-id="heading-9">2.3 设置dev环境的Server端口号</h3>
<p>dev server默认端口是5173，如果想修改为其他端口（例如：3000端口），可以进行以下设置。</p>
<p>修改<code>vite.config.js</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript">    <span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">'vite'</span>
    <span class="hljs-keyword">import</span> react <span class="hljs-keyword">from</span> <span class="hljs-string">'@vitejs/plugin-react'</span>

    <span class="hljs-comment">// https://vitejs.dev/config/</span>
    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({
        <span class="hljs-attr">server</span>: {
            <span class="hljs-comment">// 监听所有IP地址</span>
            <span class="hljs-attr">host</span>: <span class="hljs-string">'0.0.0.0'</span>,
+           <span class="hljs-comment">// 指定dev sever的端口号，默认为5173</span>
+           <span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>,
        },
        <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">react</span>()],
    })
</code></pre>
<h3 data-id="heading-10">2.4 设置dev环境自动打开浏览器</h3>
<p>Vite在启动dev环境时，默认情况并不会自动打开浏览器。如果想自动打开浏览器，可进行以下设置。</p>
<p>修改<code>vite.config.js</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript">    <span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">'vite'</span>
    <span class="hljs-keyword">import</span> react <span class="hljs-keyword">from</span> <span class="hljs-string">'@vitejs/plugin-react'</span>
    
    <span class="hljs-comment">// https://vitejs.dev/config/</span>
    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({
        <span class="hljs-attr">server</span>: {
            <span class="hljs-comment">// 监听所有IP地址</span>
            <span class="hljs-attr">host</span>: <span class="hljs-string">'0.0.0.0'</span>,
            <span class="hljs-comment">// 指定dev sever的端口号，默认为5173</span>
            <span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>,
+           <span class="hljs-comment">// 自动打开浏览器运行以下路径的页面</span>
+           <span class="hljs-attr">open</span>: <span class="hljs-string">'/'</span>,
        },
        ...（略）
    })
</code></pre>
<p>open的"/"值，表示打开<code>localhost:3000/</code>。</p>
<p>如果想直接打开其他页面，例如<code>localhost:3000/#/home</code>，将open的值设置为<code>/#/home</code>即可。</p>
<blockquote>
<p>※注：open的值修改后，虽然已经生效，但不会直接触发打开浏览器的行为。这个行为只发生在通过命令启动项目的时候，也就是执行npm run dev的时候。</p>
</blockquote>
<h3 data-id="heading-11">2.5 设置路径别名</h3>
<p>为了避免使用相对路径的麻烦，可以设置路径别名。</p>
<p>修改<code>vite.config.js</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript">   <span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">'vite'</span>
   <span class="hljs-keyword">import</span> react <span class="hljs-keyword">from</span> <span class="hljs-string">'@vitejs/plugin-react'</span>
+  <span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">'path'</span>

   <span class="hljs-comment">// https://vite.dev/config/</span>
   <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({
        <span class="hljs-attr">server</span>: {
            <span class="hljs-comment">// 监听所有IP地址</span>
            <span class="hljs-attr">host</span>: <span class="hljs-string">'0.0.0.0'</span>,
            <span class="hljs-comment">// 指定dev sever的端口号，默认为5173</span>
            <span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>,
            <span class="hljs-comment">// 自动打开浏览器运行以下路径的页面</span>
            <span class="hljs-attr">open</span>: <span class="hljs-string">'/'</span>,
        },
+       <span class="hljs-attr">resolve</span>: {
+           <span class="hljs-comment">// 路径别名配置</span>
+           <span class="hljs-attr">alias</span>: {
+               <span class="hljs-string">'@'</span>: path.<span class="hljs-title function_">resolve</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">dirname</span>, <span class="hljs-string">'src'</span>),
+           },
+       },
        <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">react</span>()],
   })
</code></pre>
<p>这样在js代码开头的import路径中，直接使用<code>@</code>表示“src根目录”，不用去自己去数有多少个"../"了。</p>
<p>例如，<code>src/main.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// 表示该文件当前路径下的App.jsx（相对路径）</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./App'</span>
<span class="hljs-comment">// 表示src/App.jsx，等价于上面的文件地址（绝对路径）</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/App'</span>
</code></pre>
<h2 data-id="heading-12">3 项目架构搭建</h2>
<h3 data-id="heading-13">3.1 项目目录结构设计</h3>
<p>项目目录结构可根据项目实际灵活制定。这里分享下我常用的结构，主要分为公用模块目录、组件模块目录、页面模块目录、路由配置目录、Redux目录等几个部分，让项目结构更加清晰合理。</p>
<pre><code class="hljs language-lua" lang="lua">├─ /node_modules
├─ /public
|  └─ favicon.ico        &lt;<span class="hljs-comment">-- 网页图标</span>
├─ /src
|  ├─ /api               &lt;<span class="hljs-comment">-- api目录</span>
|  |  └─ index.jsx       &lt;<span class="hljs-comment">-- api库</span>
|  ├─ /common            &lt;<span class="hljs-comment">-- 全局公用目录</span>
|  |  ├─ /fonts          &lt;<span class="hljs-comment">-- 字体文件目录</span>
|  |  ├─ /images         &lt;<span class="hljs-comment">-- 图片文件目录</span>
|  |  ├─ /js             &lt;<span class="hljs-comment">-- 公用js文件目录</span>
|  |  └─ /styles         &lt;<span class="hljs-comment">-- 公用样式文件目录</span>
|  |  |  ├─ frame.styl   &lt;<span class="hljs-comment">-- 全部公用样式（import本目录其他全部styl）</span>
|  |  |  ├─ reset.styl   &lt;<span class="hljs-comment">-- 清零样式</span>
|  |  |  └─ global.styl  &lt;<span class="hljs-comment">-- 全局公用样式</span>
|  ├─ /components        &lt;<span class="hljs-comment">-- 公共模块组件目录</span>
|  |  ├─ /header         &lt;<span class="hljs-comment">-- 头部导航模块</span>
|  |  |  ├─ index.jsx    &lt;<span class="hljs-comment">-- header主文件</span>
|  |  |  └─ header.styl  &lt;<span class="hljs-comment">-- header样式文件</span>
|  |  └─ ...             &lt;<span class="hljs-comment">-- 其他模块</span>
|  ├─ /pages             &lt;<span class="hljs-comment">-- 页面组件目录</span>
|  |  ├─ /home           &lt;<span class="hljs-comment">-- home页目录</span>
|  |  |  ├─ index.jsx    &lt;<span class="hljs-comment">-- home主文件</span>
|  |  |  └─ home.styl    &lt;<span class="hljs-comment">-- home样式文件</span>
|  |  ├─ /login          &lt;<span class="hljs-comment">-- login页目录</span>
|  |  |  ├─ index.jsx    &lt;<span class="hljs-comment">-- login主文件</span>
|  |  |  └─ login.styl   &lt;<span class="hljs-comment">-- login样式文件</span>
|  |  └─ ...             &lt;<span class="hljs-comment">-- 其他页面</span>
|  ├─ /route             &lt;<span class="hljs-comment">-- 路由配置目录</span>
|  ├─ /store             &lt;<span class="hljs-comment">-- Redux配置目录</span>
|  ├─ globalConfig.jsx   &lt;<span class="hljs-comment">-- 全局配置文件</span>
|  ├─ main.jsx           &lt;<span class="hljs-comment">-- 项目入口文件</span>
|  └─ mock.jsx           &lt;<span class="hljs-comment">-- mock数据文件</span>
├─.gitignore
├─ eslint.<span class="hljs-built_in">config</span>.js      &lt;<span class="hljs-comment">-- ESLint配置文件</span>
├─ index.html            &lt;<span class="hljs-comment">-- HTML页模板</span>
├─ <span class="hljs-built_in">package</span>-lock.json
├─ <span class="hljs-built_in">package</span>.json
├─ README.md
└─ vite.<span class="hljs-built_in">config</span>.js        &lt;<span class="hljs-comment">-- Vite配置文件</span>
</code></pre>
<p>这里需要注意的是，基于Vite脚手架的工程在src目录中是以jsx文件进行开发。虽然可以通过修改Vite配置来兼容js文件，但不建议这么做。相反，在src目录之外，则可以使用js文件（例如：vite.config.js、eslint.config.js）。</p>
<p>另外，以上项目结构已经没有src/App.jsx了，现在先不用删除，随着后续章节的讲解再删除。</p>
<p>接下来，就按照上面的目录结构设计开始构建项目。</p>
<h3 data-id="heading-14">3.2 关于样式命名规范</h3>
<p>以我多年来的开发经验来讲，合理的样式命名规范对项目开发有很大的帮助，主要体现在以下方面：
（1）避免因样式名重复导致的污染。
（2）从命名上可直观区分“组件样式”、“页面样式”（用于给在此页面的组件样式做定制调整）、“全局样式”。
（3）快速定位模块，便于查找问题。
分享一下本教程的样式命名规范：</p>
<blockquote>
<p>G-xx： 表示全局样式，用来定义公用样式。</p>
<p>P-xx: 表示页面样式，用来设置页面的背景色、尺寸、定制化调整在此页面的组件样式。</p>
<p>M-xx: 表示组件样式，专注组件本身样式。</p>
</blockquote>
<p>后续教程中，可以具体看到以上规范是如何应用的。</p>
<h3 data-id="heading-15">3.3 设置全局公用样式</h3>
<p>我个人比较喜欢Stylus简洁的语法，因此本教程以Stylus作为css预处理语言。各位可以根据自己的习惯，自由选择Sass/Scss、Less、Stylus。</p>
<p>新建清零样式文件，<code>src/common/styles/reset.styl</code>。</p>
<p>由于reset.styl代码较多，这里不再放出。非常推荐参考这个reset css，代码比较全面，更新也比较及时（截至本文写作时，是2024年8月25日更新的）。</p>
<blockquote>
<p>具体代码详见：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Felad2412%2Fthe-new-css-reset%2Fblob%2Fmain%2Fcss%2Freset.css" target="_blank" title="https://github.com/elad2412/the-new-css-reset/blob/main/css/reset.css" ref="nofollow noopener noreferrer">github.com/elad2412/th…</a></p>
</blockquote>
<p>新建全局样式文件，<code>src/common/styles/global.styl</code>：</p>
<pre><code class="hljs language-yaml" lang="yaml"><span class="hljs-string">html,</span> <span class="hljs-string">body,</span> <span class="hljs-comment">#root</span>
  <span class="hljs-attr">height:</span> <span class="hljs-number">100</span><span class="hljs-string">%</span>
<span class="hljs-string">.G-main</span>
  <span class="hljs-attr">padding:</span> <span class="hljs-string">20px</span>
<span class="hljs-string">.G-fullpage</span>
  <span class="hljs-attr">display:</span> <span class="hljs-string">flex</span>
  <span class="hljs-attr">height:</span> <span class="hljs-number">100</span><span class="hljs-string">%</span>
<span class="hljs-string">.G-layout-main</span>
  <span class="hljs-attr">flex:</span> <span class="hljs-number">1</span>
  <span class="hljs-attr">overflow:</span> <span class="hljs-string">auto</span>
</code></pre>
<p>全局样式将应用于项目的所有页面和组件，可根据需要自行补充或调整。</p>
<p>新建全局样式总入口文件，<code>src/common/styles/frame.styl</code>：</p>
<pre><code class="hljs language-scss" lang="scss"><span class="hljs-keyword">@import</span> <span class="hljs-string">'./reset.styl'</span>;
<span class="hljs-keyword">@import</span> <span class="hljs-string">'./global.styl'</span>;
</code></pre>
<p>在<code>frame.styl</code>里引入其他公用样式，就方便一次性全部应用到项目中了。</p>
<p>然后在<code>src/main.jsx</code>里引入<code>frame.styl</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript">   <span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom/client'</span>
   <span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/App'</span>
+  <span class="hljs-comment">// 全局样式</span>
+  <span class="hljs-keyword">import</span> <span class="hljs-string">'@/common/styles/frame.styl'</span>
   
   <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'root'</span>)).<span class="hljs-title function_">render</span>(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>)
</code></pre>
<p>这样在所有页面里就可以直接使用全局样式了。</p>
<p>现在运行项目，可以发现reset.styl、global.styl中的样式已经生效。</p>
<h2 data-id="heading-16">4 引入Ant Design 5.x</h2>
<p>Ant Design是一款非常优秀的UI库，在React项目开发中使用非常广泛。Ant Design发布5.x后，使用起来更加快捷，而且在主题换肤方面更加便捷。本次分享也特别说明下如何使用Ant Design（以下简称Antd）。</p>
<h3 data-id="heading-17">4.1 安装Ant Design</h3>
<p>执行：</p>
<pre><code class="hljs">npm install antd
</code></pre>
<p>然后修改src/App.jsx 来验证下Antd：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Button</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>

<span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"App"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Vite-React-App<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
    )
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>
</code></pre>
<p>可以看到Antd的Button组件正常显示出来了。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/98be0e9983be41b79ceeb18d50ca07cc~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=5Bo6VUqIXcWrCkVUKA4XMF%2FEpio%3D" alt="4.1_安装Ant Design.png" loading="lazy"></p>
<blockquote>
<p>※注：Antd 5.x已经没有全局污染的reset样式了。因此不用再担心使用了Antd会影响页面样式。</p>
</blockquote>
<h3 data-id="heading-18">4.2 设置Antd为中文语言</h3>
<p>Antd默认语言是英文，需进行以下设置调整为中文。</p>
<p>修改<code>src/main.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript">   <span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom/client'</span>
   <span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/App'</span>
+  <span class="hljs-keyword">import</span> { <span class="hljs-title class_">ConfigProvider</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
+  <span class="hljs-comment">// 引入Ant Design中文语言包</span>
+  <span class="hljs-keyword">import</span> zhCN <span class="hljs-keyword">from</span> <span class="hljs-string">'antd/locale/zh_CN'</span>
   <span class="hljs-comment">// 全局样式</span>
   <span class="hljs-keyword">import</span> <span class="hljs-string">'@/common/styles/frame.styl'</span>
   
-  <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'root'</span>)).<span class="hljs-title function_">render</span>(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>)
+  <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'root'</span>)).<span class="hljs-title function_">render</span>(
+      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ConfigProvider</span> <span class="hljs-attr">locale</span>=<span class="hljs-string">{zhCN}</span>&gt;</span>
+          <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span>
+      <span class="hljs-tag">&lt;/<span class="hljs-name">ConfigProvider</span>&gt;</span></span>
+  )
</code></pre>
<p>现在还没开始构建页面，因此关于Antd 5.x酷炫的主题换肤在后续章节再讲解，先别着急。</p>
<h3 data-id="heading-19">4.3 兼容React19</h3>
<p>目前，Antd 5.x并没有完全适配React19，在使用过程中会有警告或者错误。</p>
<p>但是，Antd官方已经推出了兼容方案，就是安装兼容包@ant-design/v5-patch-for-react-19。</p>
<p>执行安装命令：</p>
<pre><code class="hljs language-css" lang="css">npm install <span class="hljs-attr">--save-dev</span> <span class="hljs-keyword">@ant-design</span>/v5-patch-for-react-19
</code></pre>
<p>然后，在项目的入口文件引入兼容包。</p>
<p>修改src/main.jsx：</p>
<pre><code class="hljs language-javascript" lang="javascript">    ...（略）
    <span class="hljs-keyword">import</span> { <span class="hljs-title class_">ConfigProvider</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
+   <span class="hljs-keyword">import</span> <span class="hljs-string">'@ant-design/v5-patch-for-react-19'</span>
    ...（略）
</code></pre>
<p>这样就可以让Antd 5.x兼容React19了。</p>
<p>尽管如此，还是非常期待Antd v6的发布，能够更好地发挥性能与React19搭配使用。</p>
<blockquote>
<p>Ant Design官方说明：React 19 兼容</p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fant.design%2Fdocs%2Freact%2Fv5-for-19-cn" target="_blank" title="https://ant.design/docs/react/v5-for-19-cn" ref="nofollow noopener noreferrer">ant.design/docs/react/…</a></p>
</blockquote>
<h3 data-id="heading-20">4.4 批量升级全部项目npm依赖包到最新版本</h3>
<p>本教程在创建vite项目时使用的create-vite版本为6.1.1，其生成的项目所依赖的React版本为18.3.1，并不是19。</p>
<p>推荐一个快速检测package.json是否都为最新版的工具。</p>
<p>执行以下命令进行全局安装：</p>
<pre><code class="hljs language-sql" lang="sql">npm install <span class="hljs-operator">-</span>g npm<span class="hljs-operator">-</span><span class="hljs-keyword">check</span><span class="hljs-operator">-</span>updates
</code></pre>
<p>然后在项目根目录（有package.json文件的目录）下执行：</p>
<pre><code class="hljs">ncu
</code></pre>
<p>就会快速检查所有依赖是否存在更新版本。</p>
<p>执行：</p>
<pre><code class="hljs">ncu -u
</code></pre>
<p>则会将package.json中所有依赖修改为最新版本。</p>
<p>最后，再执行：</p>
<pre><code class="hljs">npm install
</code></pre>
<p>进行依赖包的更新安装即可。</p>
<blockquote>
<p>※注：更新依赖包有可能会出现不兼容的情况，更新前请先备份好package.json，以便恢复。</p>
</blockquote>
<p>经过以上批量升级操作，项目的全部依赖包会升级到最新版本。</p>
<p>编写本教程时，react及相关依赖包升级到的最新版本如下：</p>
<pre><code class="hljs language-bash" lang="bash">react 19.0.0
react-dom 19.0.0
@types/react 19.0.2
@types/react-dom 19.0.2
eslint-plugin-react 7.37.3
eslint-plugin-react-hooks 5.1.0
vite 6.0.6
</code></pre>
<h2 data-id="heading-21">5 页面开发</h2>
<p>本次教程将基于Ant Design搭建一个简易的管理系统DEMO，涉及以下知识点：</p>
<ol>
<li>页面路由跳转</li>
<li>二级路由</li>
<li>登录状态验证（路由守卫）</li>
<li>主题色换肤</li>
<li>亮色/暗色模式</li>
</ol>
<p>特例是：登录页Login不参与主题色换肤、亮色/暗色模式、不验证登录状态。</p>
<h3 data-id="heading-22">5.1 构建Login页面</h3>
<p>页面构建代码不再详述，都是很基础的内容了。</p>
<p>新建<code>src/pages/login/index.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Button</span>, <span class="hljs-title class_">Form</span>, <span class="hljs-title class_">Input</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">KeyOutlined</span>, <span class="hljs-title class_">UserOutlined</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'@ant-design/icons'</span>
<span class="hljs-keyword">import</span> imgLogo <span class="hljs-keyword">from</span> <span class="hljs-string">'@/common/images/logo.png'</span>
<span class="hljs-keyword">import</span> imgCover <span class="hljs-keyword">from</span> <span class="hljs-string">'./cover.svg'</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">'./login.styl'</span>

<span class="hljs-keyword">function</span> <span class="hljs-title function_">Login</span>(<span class="hljs-params"></span>) {
    <span class="hljs-comment">// 登录按钮loading状态</span>
    <span class="hljs-keyword">const</span> [loading, setLoading] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>)

    <span class="hljs-comment">// 提交登录</span>
    <span class="hljs-keyword">const</span> <span class="hljs-title function_">loginSubmit</span> = (<span class="hljs-params">values</span>) =&gt; {
        <span class="hljs-title function_">setLoading</span>(<span class="hljs-literal">true</span>)

        <span class="hljs-keyword">let</span> data = {
            <span class="hljs-attr">account</span>: values.<span class="hljs-property">account</span>,
            <span class="hljs-attr">password</span>: values.<span class="hljs-property">password</span>,
        }

        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'submitData'</span>, data)
    }

    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"P-login"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"login-con"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"cover-con"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{imgLogo}</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"img-logo"</span> /&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Vite React APP<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{imgCover}</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"img-cover"</span> /&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"m-footer"</span>&gt;</span>公众号：卧梅又闻花<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"pannel-con"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Welcome!<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"subtext"</span>&gt;</span>请登录您的账号<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">Form</span> <span class="hljs-attr">onFinish</span>=<span class="hljs-string">{loginSubmit}</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-name">Form.Item</span>
                            <span class="hljs-attr">name</span>=<span class="hljs-string">"account"</span>
                            <span class="hljs-attr">rules</span>=<span class="hljs-string">{[</span>
                                { <span class="hljs-attr">required:</span> <span class="hljs-attr">true</span>, <span class="hljs-attr">message:</span> '<span class="hljs-attr">请输入您的账号</span>' },
                            ]}
                        &gt;</span>
                            <span class="hljs-tag">&lt;<span class="hljs-name">Input</span>
                                <span class="hljs-attr">size</span>=<span class="hljs-string">"large"</span>
                                <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入账号"</span>
                                <span class="hljs-attr">prefix</span>=<span class="hljs-string">{</span>&lt;<span class="hljs-attr">UserOutlined</span> /&gt;</span>}
                                autoComplete="account"
                            /&gt;
                        <span class="hljs-tag">&lt;/<span class="hljs-name">Form.Item</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-name">Form.Item</span>
                            <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span>
                            <span class="hljs-attr">rules</span>=<span class="hljs-string">{[</span>
                                {
                                    <span class="hljs-attr">required:</span> <span class="hljs-attr">true</span>,
                                    <span class="hljs-attr">message:</span> '<span class="hljs-attr">请输入您的密码</span>',
                                },
                            ]}
                        &gt;</span>
                            <span class="hljs-tag">&lt;<span class="hljs-name">Input.Password</span>
                                <span class="hljs-attr">size</span>=<span class="hljs-string">"large"</span>
                                <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入密码"</span>
                                <span class="hljs-attr">prefix</span>=<span class="hljs-string">{</span>&lt;<span class="hljs-attr">KeyOutlined</span> /&gt;</span>}
                                autoComplete="password"
                            /&gt;
                        <span class="hljs-tag">&lt;/<span class="hljs-name">Form.Item</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-name">Form.Item</span>&gt;</span>
                            <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>
                                <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span>
                                <span class="hljs-attr">htmlType</span>=<span class="hljs-string">"submit"</span>
                                <span class="hljs-attr">size</span>=<span class="hljs-string">"large"</span>
                                <span class="hljs-attr">block</span>=<span class="hljs-string">{true}</span>
                                <span class="hljs-attr">loading</span>=<span class="hljs-string">{loading}</span>
                            &gt;</span>
                                登录
                            <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>
                        <span class="hljs-tag">&lt;/<span class="hljs-name">Form.Item</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-name">Form</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
    )
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Login</span>
</code></pre>
<p>别忘了以上代码中有两张图片文件要添加到项目中：
<code>src/common/images/logo.png</code>
<code>src/pages/login/cover.svg</code></p>
<p>新建<code>src/pages/login/login.styl</code>：</p>
<pre><code class="hljs language-yaml" lang="yaml"><span class="hljs-string">.P-login</span>
    <span class="hljs-attr">position:</span> <span class="hljs-string">absolute</span>
    <span class="hljs-attr">top:</span> <span class="hljs-number">0</span>
    <span class="hljs-attr">bottom:</span> <span class="hljs-number">0</span>
    <span class="hljs-attr">left:</span> <span class="hljs-number">0</span>
    <span class="hljs-attr">right:</span> <span class="hljs-number">0</span>
    <span class="hljs-attr">background:</span> <span class="hljs-comment">#4b72fe</span>
    <span class="hljs-attr">overflow:</span> <span class="hljs-string">hidden</span>
    <span class="hljs-string">.login-con</span>
        <span class="hljs-attr">position:</span> <span class="hljs-string">absolute</span>
        <span class="hljs-attr">top:</span> <span class="hljs-number">50</span><span class="hljs-string">%</span>
        <span class="hljs-attr">left:</span> <span class="hljs-number">50</span><span class="hljs-string">%</span>
        <span class="hljs-attr">z-index:</span> <span class="hljs-number">10</span>
        <span class="hljs-attr">display:</span> <span class="hljs-string">flex</span>
        <span class="hljs-attr">margin:</span> <span class="hljs-string">-280px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-string">-450px</span>
        <span class="hljs-attr">width:</span> <span class="hljs-string">900px</span>
        <span class="hljs-attr">height:</span> <span class="hljs-string">560px</span>
        <span class="hljs-attr">background:</span> <span class="hljs-comment">#fff</span>
        <span class="hljs-attr">border-radius:</span> <span class="hljs-string">8px</span>
        <span class="hljs-attr">box-shadow:</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-string">6px</span> <span class="hljs-string">rgba(0,0,0,0.4)</span>
        <span class="hljs-attr">overflow:</span> <span class="hljs-string">hidden</span>
        <span class="hljs-string">.cover-con</span> 
            <span class="hljs-attr">position:</span> <span class="hljs-string">relative</span>
            <span class="hljs-attr">width:</span> <span class="hljs-string">500px</span>
            <span class="hljs-attr">height:</span> <span class="hljs-number">100</span><span class="hljs-string">%</span>
            <span class="hljs-attr">background:</span> <span class="hljs-comment">#f1f3ff</span>
            <span class="hljs-string">.img-logo</span>
                <span class="hljs-attr">display:</span> <span class="hljs-string">block</span>
                <span class="hljs-attr">margin:</span> <span class="hljs-string">50px</span> <span class="hljs-string">auto</span> <span class="hljs-string">20px</span>
                <span class="hljs-attr">height:</span> <span class="hljs-string">60px</span>
            <span class="hljs-string">h2</span>
                <span class="hljs-attr">margin-bottom:</span> <span class="hljs-string">30px</span>
                <span class="hljs-attr">text-align:</span> <span class="hljs-string">center</span>
                <span class="hljs-attr">font-size:</span> <span class="hljs-string">20px</span>
                <span class="hljs-attr">font-weight:</span> <span class="hljs-string">bold</span>
                <span class="hljs-attr">color:</span> <span class="hljs-comment">#646672</span>
            <span class="hljs-string">.img-cover</span>
                <span class="hljs-attr">display:</span> <span class="hljs-string">block</span>
                <span class="hljs-attr">margin:</span> <span class="hljs-number">0</span> <span class="hljs-string">auto</span>
                <span class="hljs-attr">width:</span> <span class="hljs-string">300px</span>
            <span class="hljs-string">.m-footer</span>
                <span class="hljs-attr">margin-top:</span> <span class="hljs-string">55px</span>
                <span class="hljs-attr">text-align:</span> <span class="hljs-string">center</span>
                <span class="hljs-attr">font-size:</span> <span class="hljs-string">12px</span>
                <span class="hljs-attr">color:</span> <span class="hljs-comment">#646672  </span>
        <span class="hljs-string">.pannel-con</span>
            <span class="hljs-attr">flex:</span> <span class="hljs-number">1</span>
            <span class="hljs-attr">padding:</span> <span class="hljs-string">100px</span> <span class="hljs-string">60px</span> <span class="hljs-number">0</span>
            <span class="hljs-string">height</span> <span class="hljs-number">100</span><span class="hljs-string">%</span>
            <span class="hljs-attr">background:</span> <span class="hljs-comment">#fff</span>
            <span class="hljs-string">color:#333</span>
            <span class="hljs-string">.img-con</span>
                <span class="hljs-attr">margin-top:</span> <span class="hljs-string">100px</span>
                <span class="hljs-attr">text-align:</span> <span class="hljs-string">center</span>
                <span class="hljs-string">img</span>
                    <span class="hljs-attr">width:</span> <span class="hljs-string">300px</span>
            <span class="hljs-string">h3</span>
                <span class="hljs-attr">margin-bottom:</span> <span class="hljs-string">10px</span>
                <span class="hljs-attr">font-size:</span> <span class="hljs-string">30px</span>
                <span class="hljs-attr">font-weight:</span> <span class="hljs-string">bold</span>
                <span class="hljs-attr">text-align:</span> <span class="hljs-string">center</span>   
            <span class="hljs-string">.subtext</span>
                <span class="hljs-attr">margin-bottom:</span> <span class="hljs-string">40px</span>
                <span class="hljs-attr">text-align:</span> <span class="hljs-string">center</span>
</code></pre>
<p>暂时修改下入口文件代码，把原App页面换成Login页面。</p>
<p>修改<code>src/main.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript">-  <span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/App'</span>
+  <span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/pages/login'</span>
</code></pre>
<p>运行效果如下：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/150fe9eb3e5b4cc1b60ef791f7ae91fc~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=6HxqQMRz0RzxEIJLwZe6gb6Wcrc%3D" alt="5.1_构建Login页面-1.png" loading="lazy"></p>
<p>输入账号和密码，然后点击登录，可以看到登录按钮变成了loading状态。在调试工具中可以看到提交的账号和密码数据。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/217a5ec7484b41d0bb47e4c662a2a9b7~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=TTIi%2BKwFKZe%2FR9LseITkIEUhC1c%3D" alt="5.1_构建Login页面-2.png" loading="lazy"></p>
<h3 data-id="heading-23">5.2 构建公共组件PageHeaderWrapper</h3>
<p>PageHeaderWrapper放置于每个页面中，用来显示当前页面的名称或者面包屑导航。</p>
<p>新建<code>src/components/pageHeaderWrapper/index.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Card</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">'./pageHeaderWrapper.styl'</span>

<span class="hljs-keyword">function</span> <span class="hljs-title function_">PageHeaderWrapper</span>(<span class="hljs-params">props</span>) {
    <span class="hljs-keyword">const</span> { title, subtitle } = props

    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Card</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"M-pageHeaderWrapper"</span> <span class="hljs-attr">bordered</span>=<span class="hljs-string">{false}</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"page-header-title"</span>&gt;</span>{title}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"page-header-subtitle"</span>&gt;</span>{subtitle}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">Card</span>&gt;</span></span>
    )
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">PageHeaderWrapper</span>
</code></pre>
<p>新建<code>src/components/pageHeaderWrapper/pageHeaderWrapper.styl</code>：</p>
<pre><code class="hljs language-yaml" lang="yaml"><span class="hljs-string">.M-pageHeaderWrapper</span>
    <span class="hljs-attr">border-radius:</span> <span class="hljs-number">0</span>
    <span class="hljs-string">.ant-card-body</span>
        <span class="hljs-attr">padding:</span> <span class="hljs-string">16px</span> <span class="hljs-string">24px</span>
    <span class="hljs-string">.page-header-title</span>
        <span class="hljs-attr">margin-right:</span> <span class="hljs-string">10px</span>
        <span class="hljs-attr">font-size:</span> <span class="hljs-string">20px</span>
        <span class="hljs-attr">font-weight:</span> <span class="hljs-string">bold</span>
</code></pre>
<p>实际效果将在后续的页面中展示。</p>
<h3 data-id="heading-24">5.3 构建Home页面</h3>
<p>直接上代码。</p>
<p>新建<code>src/pages/home/index.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Card</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">PageHeaderWrapper</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/pageHeaderWrapper'</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">'./home.styl'</span>

<span class="hljs-keyword">function</span> <span class="hljs-title function_">Home</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">PageHeaderWrapper</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"首页"</span> <span class="hljs-attr">subtitle</span>=<span class="hljs-string">"(副标题)"</span> /&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"G-main P-home"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">Card</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"主题换肤说明"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>
                        1. 管理后台中，每一个面板模块，使用Antd的<span class="hljs-symbol">&amp;lt;</span>Card
                        /<span class="hljs-symbol">&amp;gt;</span>组件进行作为最外层，以便适用主题换肤。
                    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>
                        2.
                        任何自行写的样式颜色，都不会换肤。如需换肤，使用Antd的useToken获取当前主题token中对应的颜色值进行换肤。
                    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">Card</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">Card</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"版权声明"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>公众号：卧梅又闻花<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>掘金：Mr_兔子先生<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>知乎：兔子先生<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">Card</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>
        <span class="hljs-tag">&lt;/&gt;</span></span>
    )
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span>
</code></pre>
<p>Home页面引入了公共组件<code>&lt;PageHeaderWrapper&gt;</code>。</p>
<p>新建<code>src/pages/home/home.styl</code>：</p>
<pre><code class="hljs language-yaml" lang="yaml"><span class="hljs-string">.P-home</span>
    <span class="hljs-attr">display:</span> <span class="hljs-string">flex</span>
    <span class="hljs-attr">flex-direction:</span> <span class="hljs-string">column</span>
    <span class="hljs-attr">gap:</span> <span class="hljs-string">20px</span>
</code></pre>
<p>暂时修改下入口文件代码，把初始页面换成Home页面。</p>
<p>修改<code>src/main.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript">-   <span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/pages/login'</span>
+   <span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/pages/home'</span>
</code></pre>
<p>运行效果如下：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/5e2047c3ab734848aac6c61b6d95c641~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=sq0OncrJCa2FUUgRVEdFUQb5xr8%3D" alt="5.3_构建Home页面.png" loading="lazy"></p>
<h3 data-id="heading-25">5.4 构建Users页面</h3>
<p>基本与Home页面一样，直接上代码。</p>
<p>新建<code>src/pages/users/index.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Card</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">PageHeaderWrapper</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/pageHeaderWrapper'</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">'./users.styl'</span>

<span class="hljs-keyword">function</span> <span class="hljs-title function_">Users</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">PageHeaderWrapper</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"用户管理"</span> <span class="hljs-attr">subtitle</span>=<span class="hljs-string">"(副标题)"</span> /&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"G-main P-users"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">Card</span>&gt;</span>Users页面<span class="hljs-tag">&lt;/<span class="hljs-name">Card</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>
        <span class="hljs-tag">&lt;/&gt;</span></span>
    )
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Users</span>
</code></pre>
<p>先创建Users页面对应的样式文件，新建<code>src/pages/users/users.styl</code>。</p>
<p>代码先空着。</p>
<p>同样，暂时修改下入口文件代码，把初始页面换成Users页面。</p>
<p>修改src/main.jsx：</p>
<pre><code class="hljs language-javascript" lang="javascript">-   <span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/pages/home'</span>
+   <span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/pages/users'</span>
</code></pre>
<p>运行效果如下：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/688f6b81bda04dd1beedaefc556df442~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=3ZE2uiypi36tvkxiUmVE5c4r37M%3D" alt="5.4_构建Users页面.png" loading="lazy"></p>
<h2 data-id="heading-26">6 页面路由</h2>
<p>本章节将基于react-router-dom，实现Login、Home、Users三个页面的跳转。</p>
<p>但是，Login、Home、Users三个页面并不是平级的关系。这是因为，大多数的管理系统界面主要由顶部、左侧导航、主区域三部分组成。Home页面和Users页面就是嵌套框架页面的主区域中的。本教程将框架页面起名为<code>Entry</code>。</p>
<p>因此：</p>
<p>一级路由页面包括：Login、Entry</p>
<p>二级路由页面包括：Home、Users</p>
<h3 data-id="heading-27">6.1 构建全局路由</h3>
<p>安装react-router-dom，执行：</p>
<pre><code class="hljs">npm install react-router-dom
</code></pre>
<p>接下来进行路由配置。</p>
<p>新建<code>src/router/globalRouter.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Suspense</span>, lazy } <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>
<span class="hljs-keyword">import</span> { createHashRouter, <span class="hljs-title class_">Navigate</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router-dom'</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Spin</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Login</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/pages/login'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/pages/home'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Users</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/pages/users'</span>

<span class="hljs-comment">// 全局路由</span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">globalRoute</span>(<span class="hljs-params"></span>) {
    <span class="hljs-comment">// 二级路由框架页面采用懒加载方式</span>
    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Entry</span> = <span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">'@/pages/entry'</span>))

    <span class="hljs-keyword">return</span> <span class="hljs-title function_">createHashRouter</span>([
        {
            <span class="hljs-comment">// 精确匹配"/login"，跳转Login页面</span>
            <span class="hljs-attr">path</span>: <span class="hljs-string">'/login'</span>,
            <span class="hljs-attr">element</span>: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Login</span> /&gt;</span></span>,
        },
        {
            <span class="hljs-comment">// 未匹配"/login"，则进入到Entry页面</span>
            <span class="hljs-attr">path</span>: <span class="hljs-string">'/'</span>,
            <span class="hljs-attr">element</span>: (
                <span class="hljs-comment">// 懒加载过程中先使用Spin组件占位</span>
                <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">{</span>&lt;<span class="hljs-attr">Spin</span> /&gt;</span>}&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-name">Entry</span> /&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span>
            ),
            <span class="hljs-comment">// 定义Entry二级路由</span>
            <span class="hljs-attr">children</span>: [
                {
                    <span class="hljs-comment">// 精确匹配"/home"，跳转Home页面</span>
                    <span class="hljs-attr">path</span>: <span class="hljs-string">'/home'</span>,
                    <span class="hljs-attr">element</span>: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span>,
                },
                {
                    <span class="hljs-comment">// 精确匹配"/users"，跳转Home页面</span>
                    <span class="hljs-attr">path</span>: <span class="hljs-string">'/users'</span>,
                    <span class="hljs-attr">element</span>: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Users</span> /&gt;</span></span>,
                },
                {
                    <span class="hljs-comment">// 如果URL没有"#路由"，跳转Home页面</span>
                    <span class="hljs-attr">path</span>: <span class="hljs-string">'/'</span>,
                    <span class="hljs-attr">element</span>: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/home"</span> /&gt;</span></span>,
                },
                {
                    <span class="hljs-comment">// 未匹配，跳转Login页面</span>
                    <span class="hljs-attr">path</span>: <span class="hljs-string">'*'</span>,
                    <span class="hljs-attr">element</span>: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/login"</span> /&gt;</span></span>,
                },
            ],
        },
    ])
}

<span class="hljs-keyword">const</span> globalRouter = <span class="hljs-title function_">globalRoute</span>()

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> globalRouter
</code></pre>
<p>构建路由组件。</p>
<p>新建<code>src/router/index.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> {  <span class="hljs-title class_">RouterProvider</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router-dom'</span>
<span class="hljs-keyword">import</span> globalRouter <span class="hljs-keyword">from</span> <span class="hljs-string">'@/router/globalRouter'</span>


<span class="hljs-keyword">function</span> <span class="hljs-title function_">Routers</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">RouterProvider</span> <span class="hljs-attr">router</span>=<span class="hljs-string">{globalRouter}</span> /&gt;</span></span>
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Routers</span>
</code></pre>
<p>以上代码，使用<code>&lt;RouterProvider&gt;</code>实现了路由跳转。</p>
<h3 data-id="heading-28">6.2 构建框架页面Entry</h3>
<p>接下来开始构建框架页面，把页面和组件的“坑”挖好。</p>
<p>新建<code>src/pages/entry/index.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Outlet</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router-dom'</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Layout</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
<span class="hljs-keyword">const</span> { <span class="hljs-title class_">Content</span>, <span class="hljs-title class_">Sider</span> } = <span class="hljs-title class_">Layout</span>

<span class="hljs-keyword">function</span> <span class="hljs-title function_">Entry</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Layout</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"G-fullpage"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">height:</span> <span class="hljs-attr">70</span>, <span class="hljs-attr">background:</span> '#<span class="hljs-attr">bae0ff</span>', <span class="hljs-attr">fontSize:</span> <span class="hljs-attr">20</span> }}&gt;</span>Header<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">Layout</span> <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">overflow:</span> '<span class="hljs-attr">hidden</span>', <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span> }}&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">Sider</span> /&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">Layout</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"G-layout-main"</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-name">Content</span> <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">minWidth:</span> <span class="hljs-attr">800</span> }}&gt;</span>
                            {/* Outlet用来放置二级路由页面 */}
                            <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> /&gt;</span>
                        <span class="hljs-tag">&lt;/<span class="hljs-name">Content</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">Layout</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">Layout</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">Layout</span>&gt;</span></span>
    )
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Entry</span>
</code></pre>
<p>以上代码，使用Antd的Layout组件，为Header、Sider和主区域划分好了空间。<code>&lt;Outlet&gt;</code>就是为Home和Users页面挖好的“坑”。</p>
<h3 data-id="heading-29">6.3 引入路由</h3>
<p>下面将路由引入到项目中。</p>
<p>修改<code>src/main.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript">    <span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom/client'</span>
-   <span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/pages/users'</span>
+   <span class="hljs-keyword">import</span> <span class="hljs-title class_">Routers</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/router'</span>
    <span class="hljs-keyword">import</span> { <span class="hljs-title class_">ConfigProvider</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
    <span class="hljs-comment">// 引入Ant Design中文语言包</span>
    <span class="hljs-keyword">import</span> zhCN <span class="hljs-keyword">from</span> <span class="hljs-string">'antd/locale/zh_CN'</span>
    <span class="hljs-comment">// 全局样式</span>
    <span class="hljs-keyword">import</span> <span class="hljs-string">'@/common/styles/frame.styl'</span>
    
    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'root'</span>)).<span class="hljs-title function_">render</span>(
        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ConfigProvider</span> <span class="hljs-attr">locale</span>=<span class="hljs-string">{zhCN}</span>&gt;</span>
-           <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span>
+           <span class="hljs-tag">&lt;<span class="hljs-name">Routers</span> /&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">ConfigProvider</span>&gt;</span></span>
    )
</code></pre>
<p>路由组件<code>&lt;Routers&gt;</code>替换掉了原来的<code>&lt;App&gt;</code>，从此与<code>src/App.jsx</code>文件告别了。</p>
<p>记得删掉<code>src/App.jsx</code>。</p>
<p>页面对应的地址如下：</p>
<blockquote>
<p>Login页面： <a href="https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A3000%2F%23%2Flogin" target="_blank" title="http://localhost:3000/#/login" ref="nofollow noopener noreferrer">http://localhost:3000/#/login</a></p>
<p>Home页面： <a href="https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A3000%2F%23%2Fhome" target="_blank" title="http://localhost:3000/#/home" ref="nofollow noopener noreferrer">http://localhost:3000/#/home</a></p>
<p>Users页面： <a href="https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A3000%2F%23%2Fusers" target="_blank" title="http://localhost:3000/#/users" ref="nofollow noopener noreferrer">http://localhost:3000/#/users</a></p>
</blockquote>
<p>嵌入Entry的Home页面效果：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/aaa10ea76939410a9540e833607f51aa~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=mRwaD%2FVIPCuKC9TIIfOzZCop2jc%3D" alt="6.3_引入路由-1-home.png" loading="lazy"></p>
<p>嵌入Entry的Users页面效果：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/e499fcccfdac4acfbd6e2ab3a035e800~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=pZPH0CDf9joyyAvkmELwo4dwFLM%3D" alt="6.3_引入路由-2-users.png" loading="lazy"></p>
<h3 data-id="heading-30">6.4 路由跳转：构建左侧导航Sider组件</h3>
<p>目前，框架页面Entry里的Sider只是一个临时占位。本小节来构建一个完整的Sider组件。</p>
<p>新建<code>src/components/sider/index.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Layout</span>, <span class="hljs-title class_">Menu</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
<span class="hljs-keyword">import</span> { useNavigate, useLocation } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router-dom'</span>
<span class="hljs-keyword">import</span> {
    <span class="hljs-title class_">HomeOutlined</span>,
    <span class="hljs-title class_">MenuFoldOutlined</span>,
    <span class="hljs-title class_">MenuUnfoldOutlined</span>,
    <span class="hljs-title class_">UserOutlined</span>,
} <span class="hljs-keyword">from</span> <span class="hljs-string">'@ant-design/icons'</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">'./sider.styl'</span>

<span class="hljs-keyword">const</span> <span class="hljs-title class_">AntdSider</span> = <span class="hljs-title class_">Layout</span>.<span class="hljs-property">Sider</span>

<span class="hljs-keyword">function</span> <span class="hljs-title function_">Sider</span>(<span class="hljs-params"></span>) {
    <span class="hljs-comment">// 当前路由地址</span>
    <span class="hljs-keyword">const</span> location = <span class="hljs-title function_">useLocation</span>()

    <span class="hljs-comment">// 路由hook</span>
    <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>()

    <span class="hljs-comment">// 左侧导航的开合状态</span>
    <span class="hljs-keyword">const</span> [collapsed, setCollapsed] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>)

    <span class="hljs-comment">// 左侧导航列表</span>
    <span class="hljs-keyword">const</span> items = [
        {
            <span class="hljs-attr">label</span>: <span class="hljs-string">'首页'</span>,
            <span class="hljs-attr">key</span>: <span class="hljs-string">'/home'</span>,
            <span class="hljs-attr">icon</span>: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">HomeOutlined</span> /&gt;</span></span>,
            <span class="hljs-attr">children</span>: <span class="hljs-literal">null</span>,
            <span class="hljs-attr">type</span>: <span class="hljs-literal">null</span>,
            <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> {
                <span class="hljs-comment">// 跳转至路径地址/home</span>
                <span class="hljs-title function_">navigate</span>(<span class="hljs-string">'/home'</span>)
            },
        },
        {
            <span class="hljs-attr">label</span>: <span class="hljs-string">'用户管理'</span>,
            <span class="hljs-attr">key</span>: <span class="hljs-string">'/users'</span>,
            <span class="hljs-attr">icon</span>: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UserOutlined</span> /&gt;</span></span>,
            <span class="hljs-attr">children</span>: <span class="hljs-literal">null</span>,
            <span class="hljs-attr">type</span>: <span class="hljs-literal">null</span>,
            <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> {
                <span class="hljs-comment">// 跳转至路径地址/users</span>
                <span class="hljs-title function_">navigate</span>(<span class="hljs-string">'/users'</span>)
            },
        },
    ]

    <span class="hljs-comment">// 切换左侧导航开合状态</span>
    <span class="hljs-keyword">const</span> <span class="hljs-title function_">onCollapse</span> = (<span class="hljs-params"></span>) =&gt; {
        <span class="hljs-title function_">setCollapsed</span>(!collapsed)
    }

    <span class="hljs-comment">// 左侧导航展开时的宽度</span>
    <span class="hljs-keyword">const</span> fullWidth = <span class="hljs-number">200</span>
    <span class="hljs-comment">// 左侧导航收起时的宽度</span>
    <span class="hljs-keyword">const</span> collapsedWidth = <span class="hljs-number">49</span>

    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">AntdSider</span>
            <span class="hljs-attr">className</span>=<span class="hljs-string">"M-sider"</span>
            <span class="hljs-attr">trigger</span>=<span class="hljs-string">{null}</span>
            <span class="hljs-attr">collapsible</span>
            <span class="hljs-attr">collapsed</span>=<span class="hljs-string">{collapsed}</span>
            <span class="hljs-attr">collapsedWidth</span>=<span class="hljs-string">{collapsedWidth}</span>
            <span class="hljs-attr">width</span>=<span class="hljs-string">{fullWidth}</span>
        &gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"sider-main"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">Menu</span>
                    <span class="hljs-attr">mode</span>=<span class="hljs-string">"inline"</span>
                    <span class="hljs-attr">selectedKeys</span>=<span class="hljs-string">{location.pathname}</span>
                    <span class="hljs-attr">items</span>=<span class="hljs-string">{items}</span>
                    <span class="hljs-attr">className</span>=<span class="hljs-string">"sider-menu"</span>
                &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Menu</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"sider-footer"</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{onCollapse}</span> <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">color:</span> '#<span class="hljs-attr">ffffff</span>' }}&gt;</span>
                    {collapsed ? <span class="hljs-tag">&lt;<span class="hljs-name">MenuUnfoldOutlined</span> /&gt;</span> : <span class="hljs-tag">&lt;<span class="hljs-name">MenuFoldOutlined</span> /&gt;</span>}
                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">AntdSider</span>&gt;</span></span>
    )
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Sider</span>
</code></pre>
<p>新建<code>src/components/sider/sider.styl</code>：</p>
<pre><code class="hljs language-yaml" lang="yaml"><span class="hljs-string">.M-sider</span>
    <span class="hljs-attr">overflow:</span> <span class="hljs-string">hidden</span>
    <span class="hljs-attr">border-right-style:</span> <span class="hljs-string">solid</span>
    <span class="hljs-attr">border-right-width:</span> <span class="hljs-string">1px</span>
    <span class="hljs-string">.sider-main</span>
        <span class="hljs-attr">display:</span> <span class="hljs-string">flex</span>
        <span class="hljs-attr">flex-direction:</span> <span class="hljs-string">column</span>
        <span class="hljs-attr">height:</span> <span class="hljs-number">100</span><span class="hljs-string">%</span>
    <span class="hljs-string">.sider-menu</span>
        <span class="hljs-attr">flex:</span> <span class="hljs-number">1</span>
        <span class="hljs-attr">overflow:</span> <span class="hljs-string">hidden</span>
        <span class="hljs-attr">overflow-y:</span> <span class="hljs-string">auto</span>
    <span class="hljs-string">.sider-footer</span>
        <span class="hljs-attr">padding:</span> <span class="hljs-string">10px</span> <span class="hljs-string">14px</span>
        <span class="hljs-attr">height:</span> <span class="hljs-string">40px</span>
        <span class="hljs-attr">cursor:</span> <span class="hljs-string">pointer</span>
        <span class="hljs-attr">border-top-style:</span> <span class="hljs-string">solid</span>
        <span class="hljs-attr">border-top-width:</span> <span class="hljs-string">1px</span>
        <span class="hljs-string">.anticon</span>
            <span class="hljs-attr">font-size:</span> <span class="hljs-string">20px</span>
</code></pre>
<p>在Entry中引入Sider组件，修改<code>src/pages/entry/index.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript">    <span class="hljs-keyword">import</span> { <span class="hljs-title class_">Outlet</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router-dom'</span>
    <span class="hljs-keyword">import</span> { <span class="hljs-title class_">Layout</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
+   <span class="hljs-keyword">import</span> <span class="hljs-title class_">Sider</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/sider'</span>
-   <span class="hljs-keyword">const</span> { <span class="hljs-title class_">Content</span>, <span class="hljs-title class_">Sider</span> } = <span class="hljs-title class_">Layout</span>
+   <span class="hljs-keyword">const</span> { <span class="hljs-title class_">Content</span> } = <span class="hljs-title class_">Layout</span>

    ...（略）
</code></pre>
<p>替换掉了原来的Sider占位，应用自建的Sider。</p>
<p>效果如下：</p>
<p>Home页面：<code>http://localhost:3000/#/home</code></p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/d157036676c247bda7af521505538cf1~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=0Fa8qSXFcSj08v%2BzBUP4kW%2BKJg8%3D" alt="6.4_路由跳转：构建左侧导航Sider组件-1-home.png" loading="lazy"></p>
<p>Users页面：<code>http://localhost:3000/#/users</code></p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ab3e41c7a9e5449db8834335e66b3dab~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=6RMJlO93RFlQPW%2B4DN6OpSm34Lw%3D" alt="6.4_路由跳转：构建左侧导航Sider组件-2-users.png" loading="lazy"></p>
<p>左侧导航收起状态：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a6239d5f391d4ff7bda32d8560d8ed2e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=txYhFmh9WsAxY1ZQH41OqLD0LDU%3D" alt="6.4_路由跳转：构建左侧导航Sider组件-3-收起状态.png" loading="lazy"></p>
<p>现在看上去还挺丑的，别着急，后续章节会讲解Antd主题色及暗色模式，会再次修改Sider组件样式的。</p>
<h2 data-id="heading-31">7 React Developer Tools浏览器插件</h2>
<p>为了更方便调试React项目，建议安装Chrome插件。</p>
<p>先科学上网，在Chrome网上应用店里搜索“React Developer Tools”并安装。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/069b6cfb05d84bfb8a97b2ba18cdc040~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=Uv0XyBg1VUj57wL%2BdQ1kjd4hWJ0%3D" alt="7_React Developer Tools浏览器插件-1.png" loading="lazy"></p>
<p>安装完成后，打开Chrome DevTools，点击Components按钮，可以清晰的看到React项目代码结构以及各种传参。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/1e671880ddd64eb899b55280f6fc1a84~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=PAF9tP6n0quv7euaS1rD7O1O8Qs%3D" alt="7_React Developer Tools浏览器插件-2.png" loading="lazy"></p>
<h2 data-id="heading-32">8 Redux及Redux Toolkit</h2>
<p>Redux是用来做什么的？简单通俗的解释，Redux是用来管理项目级别的全局变量，而且是可以实时监听变化并改变DOM的。当多个模块都需要动态显示同一个数据，并且这些模块从属于不同的父组件，或者在不同的页面中，如果没有Redux，那实现起来就很麻烦了，问题追踪也很痛苦。Redux就是解决这个问题的。</p>
<p>做过Vue开发的同学都知道Vuex，React对应的工具就是Redux。React官方推出了Redux Toolkit，一个开箱即用的高效的Redux开发工具集，使用起来也很简洁。</p>
<h3 data-id="heading-33">8.1 安装Redux及Redux Toolkit</h3>
<p>执行：</p>
<pre><code class="hljs language-bash" lang="bash">npm install @reduxjs/toolkit react-redux
</code></pre>
<h3 data-id="heading-34">8.2 创建全局配置文件</h3>
<p>新建<code>src/globalConfig.jsx</code>：</p>
<pre><code class="hljs language-arduino" lang="arduino"><span class="hljs-comment">/**
 * 全局配置
 */</span>
<span class="hljs-keyword">export</span> <span class="hljs-type">const</span> globalConfig = {
    <span class="hljs-comment">// 初始主题（localStorage未设定的情况）</span>
    initTheme: {
        <span class="hljs-comment">// 初始深色主题</span>
        dark: <span class="hljs-literal">false</span>,
        <span class="hljs-comment">// 初始主题色</span>
        <span class="hljs-comment">// 与customColorPrimarys数组中的某个值对应</span>
        <span class="hljs-comment">// null表示默认使用Ant Design默认主题色或customColorPrimarys第一种主题色方案</span>
        colorPrimary: null,
    },
    <span class="hljs-comment">// 供用户选择的主题色，如不提供该功能，则设为空数组</span>
    customColorPrimarys: [
        <span class="hljs-string">'#1677ff'</span>,
        <span class="hljs-string">'#f5222d'</span>,
        <span class="hljs-string">'#fa8c16'</span>,
        <span class="hljs-string">'#722ed1'</span>,
        <span class="hljs-string">'#13c2c2'</span>,
        <span class="hljs-string">'#52c41a'</span>,
    ],
    <span class="hljs-comment">// 左侧导航sider主题，light=亮色，dark=暗色，theme=跟随主题</span>
    siderTheme: <span class="hljs-string">'theme'</span>,
    <span class="hljs-comment">// localStroge用户登录信息标识</span>
    SESSION_LOGIN_INFO: <span class="hljs-string">'userLoginInfo'</span>,
    <span class="hljs-comment">// localStroge用户主题信息标识:</span>
    SESSION_LOGIN_THEME: <span class="hljs-string">'userTheme'</span>,
}
</code></pre>
<p>globalConfig.jsx其实与Redux没有太深入的关系，只是为了方便配置一些初始化默认值而已，以及定义localStorage的变量名，这么做就是为了把配置项都抽离出来方便维护。</p>
<h3 data-id="heading-35">8.3 创建用于主题换肤的store分库</h3>
<p>为了便于讲解，先创建分库。按照官方的概念，分库叫做slice。可以为不同的业务创建多个slice，便于独立维护。这里结合主题换肤功能，创建对应的分库。</p>
<p>新建<code>store/slices/theme.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> { createSlice } <span class="hljs-keyword">from</span> <span class="hljs-string">'@reduxjs/toolkit'</span>
<span class="hljs-keyword">import</span> { globalConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">'@/globalConfig'</span>

<span class="hljs-comment">// 先从localStorage里获取主题配置</span>
<span class="hljs-keyword">const</span> sessionTheme = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">getItem</span>(globalConfig.<span class="hljs-property">SESSION_LOGIN_THEME</span>))

<span class="hljs-comment">// 如果localStorage里没有主题配置，则使用globalConfig里的初始化配置</span>
<span class="hljs-keyword">const</span> initTheme =  sessionTheme?<span class="hljs-attr">sessionTheme</span>: globalConfig.<span class="hljs-property">initTheme</span>

<span class="hljs-comment">//该store分库的初始值</span>
<span class="hljs-keyword">const</span> initialState = {
    <span class="hljs-attr">dark</span>: initTheme.<span class="hljs-property">dark</span>,
    <span class="hljs-attr">colorPrimary</span>: initTheme.<span class="hljs-property">colorPrimary</span>
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> themeSlice = <span class="hljs-title function_">createSlice</span>({
    <span class="hljs-comment">// store分库名称</span>
    <span class="hljs-attr">name</span>: <span class="hljs-string">'theme'</span>,
    <span class="hljs-comment">// store分库初始值</span>
    initialState,
    <span class="hljs-attr">reducers</span>: {
        <span class="hljs-comment">// redux方法：设置亮色/暗色主题</span>
        <span class="hljs-attr">setDark</span>: <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> {
            <span class="hljs-comment">// 修改了store分库里dark的值（用于让全项目动态生效）</span>
            state.<span class="hljs-property">dark</span> = action.<span class="hljs-property">payload</span>
            <span class="hljs-comment">// 更新localStorage的主题配置（用于长久保存主题配置）</span>
            <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">setItem</span>(globalConfig.<span class="hljs-property">SESSION_LOGIN_THEME</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(state))
        },
        <span class="hljs-comment">// redux方法：设置主题色</span>
        <span class="hljs-attr">setColorPrimary</span>: <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> {
            <span class="hljs-comment">// 修改了store分库里colorPrimary的值（用于让全项目动态生效）</span>
            state.<span class="hljs-property">colorPrimary</span> = action.<span class="hljs-property">payload</span>
            <span class="hljs-comment">// 更新localStorage的主题配置（用于长久保存主题配置）</span>
            <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">setItem</span>(globalConfig.<span class="hljs-property">SESSION_LOGIN_THEME</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(state))
        },
    },
})

<span class="hljs-comment">// 将setDark和setColorPrimary方法抛出</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> { setDark } = themeSlice.<span class="hljs-property">actions</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> { setColorPrimary } = themeSlice.<span class="hljs-property">actions</span>

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> themeSlice.<span class="hljs-property">reducer</span>
</code></pre>
<p>再啰嗦一下这部分的关键逻辑：</p>
<p>先从localStorage里获取主题配置，这么做是为了将用户的主题配置保存在浏览器中，用户在刷新或者重新打开该项目的时候，会直接应用之前设置的主题配置。</p>
<p>如果localStorage没有主题配置，则从globalConfig读取默认值，然后再写入localStorage。这种情况一般是用户使用当前浏览器第一次浏览该项目时会用到。</p>
<p>setDark用来设置“亮色/暗色主题”，setColorPrimary用来设置“主题色”。每次设置后，除了变更store里的值（为了项目全局动态及时生效），还要同步写入localStorage（为了刷新或重新打开时及时生效）。</p>
<p>“亮色/暗色主题”和“主题色”虽然都是颜色改变，但是完全不同的两个维度的换肤。“亮色/暗色主题”主要是对默认的文字、背景、边框等基础元素进行黑白切换，而“主题色”则是对带有“品牌色”的按钮等控件进行不同色系的颜色切换。</p>
<h3 data-id="heading-36">8.4 创建store总库</h3>
<p>新建<code>store/index.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> { configureStore } <span class="hljs-keyword">from</span> <span class="hljs-string">'@reduxjs/toolkit'</span>
<span class="hljs-comment">// 引入主题换肤store分库</span>
<span class="hljs-keyword">import</span> themeReducer <span class="hljs-keyword">from</span> <span class="hljs-string">'@/store/slices/theme'</span>

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">configureStore</span>({
  <span class="hljs-attr">reducer</span>: {
    <span class="hljs-comment">// 主题换肤store分库</span>
    <span class="hljs-attr">theme</span>: themeReducer
    <span class="hljs-comment">// 可以根据需要在这里继续追加其他分库</span>
  },
})
</code></pre>
<p>原理就是创建总库，把各个分库都汇总起来。注释已写明，不再赘述。</p>
<h3 data-id="heading-37">8.5 引入store到项目</h3>
<p>首先，将store引入到项目工程中。</p>
<p>修改<code>src/main.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript">    <span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom/client'</span>
    <span class="hljs-keyword">import</span> <span class="hljs-title class_">Routers</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/router'</span>
    <span class="hljs-keyword">import</span> { <span class="hljs-title class_">ConfigProvider</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
+   <span class="hljs-keyword">import</span> { store } <span class="hljs-keyword">from</span> <span class="hljs-string">'@/store'</span>
+   <span class="hljs-keyword">import</span> { <span class="hljs-title class_">Provider</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>
    <span class="hljs-comment">// 引入Ant Design中文语言包</span>
    <span class="hljs-keyword">import</span> zhCN <span class="hljs-keyword">from</span> <span class="hljs-string">'antd/locale/zh_CN'</span>
    <span class="hljs-comment">// 全局样式</span>
    <span class="hljs-keyword">import</span> <span class="hljs-string">'@/common/styles/frame.styl'</span>
    
    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'root'</span>)).<span class="hljs-title function_">render</span>(
+       <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">{store}</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">ConfigProvider</span> <span class="hljs-attr">locale</span>=<span class="hljs-string">{zhCN}</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">Routers</span> /&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">ConfigProvider</span>&gt;</span>
+       <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span>
    )
</code></pre>
<p>其实就是用react-redux提供的Provider带上store把项目包起来，这样整个项目就可以随时随地访问store了。</p>
<h3 data-id="heading-38">8.6 store的读取：将主题色和亮暗模式应用于项目</h3>
<p>接下来，让Antd组件从redux中读取主题色和亮暗模式配置。</p>
<p>修改<code>src/pages/entry/index.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript">    <span class="hljs-keyword">import</span> { <span class="hljs-title class_">Outlet</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router-dom'</span>
+   <span class="hljs-keyword">import</span> { useSelector } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>
-   <span class="hljs-keyword">import</span> { <span class="hljs-title class_">Layout</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
+   <span class="hljs-keyword">import</span> { <span class="hljs-title class_">ConfigProvider</span>, <span class="hljs-title class_">Layout</span>, theme } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
    <span class="hljs-keyword">import</span> <span class="hljs-title class_">Sider</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/sider'</span>
    
+   <span class="hljs-keyword">const</span> { darkAlgorithm, defaultAlgorithm } = theme
    <span class="hljs-keyword">const</span> { <span class="hljs-title class_">Content</span> } = <span class="hljs-title class_">Layout</span>
    
    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Entry</span>(<span class="hljs-params"></span>) {
+       <span class="hljs-comment">// 使用useSelector获取store中的theme    </span>
+       <span class="hljs-keyword">const</span> globalTheme = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.<span class="hljs-property">theme</span>)
+    
+       <span class="hljs-comment">// 在body上添加theme-mode属性，标记当前主题模式（便于实现亮暗模式下的CSS差异化）</span>
+       globalTheme.<span class="hljs-property">dark</span>
+           ? <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">'theme-mode'</span>, <span class="hljs-string">'dark'</span>)
+           : <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">'theme-mode'</span>, <span class="hljs-string">'light'</span>)
+    
+      <span class="hljs-comment">// Ant Design主题</span>
+       <span class="hljs-keyword">let</span> antdTheme = {
+           <span class="hljs-attr">algorithm</span>: globalTheme.<span class="hljs-property">dark</span> ? darkAlgorithm : defaultAlgorithm,
+       }
+       <span class="hljs-comment">// 应用自定义主题色</span>
+       <span class="hljs-keyword">if</span> (globalTheme.<span class="hljs-property">colorPrimary</span>) {
+           antdTheme.<span class="hljs-property">token</span> = {
+               <span class="hljs-attr">colorPrimary</span>: globalTheme.<span class="hljs-property">colorPrimary</span>,
+           }
+       }
    
        <span class="hljs-keyword">return</span> (
+           <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ConfigProvider</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">{antdTheme}</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">Layout</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"G-fullpage"</span>&gt;</span>
                    ...（略）
                <span class="hljs-tag">&lt;/<span class="hljs-name">Layout</span>&gt;</span>
+           <span class="hljs-tag">&lt;/<span class="hljs-name">ConfigProvider</span>&gt;</span></span>
        )
    }
    
    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Entry</span>
</code></pre>
<p>必要的地方已添加注释，不再赘述。核心就是使用Redux提供的useSelector来获取store中的theme。当store中的theme发生改变时，使用它的组件也会及时更新。</p>
<blockquote>
<p>※注： 因为Login页面不参与主题色换肤，所以只对Entry页面套用了Antd的主题色。</p>
</blockquote>
<h3 data-id="heading-39">8.7 store的变更：在Header组件中实现亮暗模式切换</h3>
<p>在上一章节中，通过useSelector实现了store的读取。本章节介绍如何使用useDispatch进行store的变更。</p>
<p>主题换肤的交互操作位于Header组件。</p>
<p>新建<code>src/components/header/index.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> { useSelector, useDispatch } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>
<span class="hljs-keyword">import</span> { setDark } <span class="hljs-keyword">from</span> <span class="hljs-string">'@/store/slices/theme'</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Button</span>, <span class="hljs-title class_">Card</span>, <span class="hljs-title class_">Dropdown</span>, <span class="hljs-title class_">Modal</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
<span class="hljs-keyword">import</span> {
    <span class="hljs-title class_">ExportOutlined</span>,
    <span class="hljs-title class_">CaretDownOutlined</span>,
    <span class="hljs-title class_">SunOutlined</span>,
    <span class="hljs-title class_">MoonOutlined</span>,
} <span class="hljs-keyword">from</span> <span class="hljs-string">'@ant-design/icons'</span>
<span class="hljs-keyword">import</span> { globalConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">'@/globalConfig'</span>
<span class="hljs-keyword">import</span> { useNavigate } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router-dom'</span>
<span class="hljs-keyword">import</span> logoImg <span class="hljs-keyword">from</span> <span class="hljs-string">'@/common/images/logo.png'</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">'./header.styl'</span>

<span class="hljs-keyword">function</span> <span class="hljs-title function_">Header</span>(<span class="hljs-params"></span>) {
    <span class="hljs-comment">// 获取redux派发钩子</span>
    <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>()

    <span class="hljs-comment">// 路由hook</span>
    <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>()

    <span class="hljs-comment">// 主题配置</span>
    <span class="hljs-keyword">const</span> theme = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.<span class="hljs-property">theme</span>)

    <span class="hljs-comment">// Antd的Modal组件API</span>
    <span class="hljs-keyword">const</span> [modal, contextHolder] = <span class="hljs-title class_">Modal</span>.<span class="hljs-title function_">useModal</span>()
    
    <span class="hljs-comment">// 退出登录</span>
    <span class="hljs-keyword">const</span> <span class="hljs-title function_">logout</span> = (<span class="hljs-params"></span>) =&gt; {
        modal.<span class="hljs-title function_">confirm</span>({
            <span class="hljs-attr">title</span>: <span class="hljs-string">'确定要退出系统么？'</span>,
            <span class="hljs-attr">okText</span>: <span class="hljs-string">'退出'</span>,
            <span class="hljs-attr">onOk</span>: <span class="hljs-function">() =&gt;</span> {
                <span class="hljs-comment">// 清空localStorage</span>
                <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">removeItem</span>(globalConfig.<span class="hljs-property">SESSION_LOGIN_INFO</span>)
                <span class="hljs-comment">// 跳转至路径地址/login</span>
                <span class="hljs-title function_">navigate</span>(<span class="hljs-string">'/login'</span>)
            },
        })
    }

    <span class="hljs-keyword">const</span> loginInfo = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(
        <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">getItem</span>(globalConfig.<span class="hljs-property">SESSION_LOGIN_INFO</span>)
    )

    <span class="hljs-keyword">const</span> menuItems = [
        {
            <span class="hljs-attr">label</span>: <span class="hljs-string">'退出登录'</span>,
            <span class="hljs-attr">key</span>: <span class="hljs-string">'exit'</span>,
            <span class="hljs-attr">icon</span>: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ExportOutlined</span> /&gt;</span></span>,
            <span class="hljs-attr">onClick</span>: logout,
        },
    ]

    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Card</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"M-header"</span> <span class="hljs-attr">bordered</span>=<span class="hljs-string">{false}</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"header-wrapper"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"logo-con"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{logoImg}</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span> /&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"logo-text"</span>&gt;</span>Vite React APP<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"header-con"</span>&gt;</span>
                    {theme.dark ? (
                        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>
                            <span class="hljs-attr">icon</span>=<span class="hljs-string">{</span>&lt;<span class="hljs-attr">SunOutlined</span> /&gt;</span>}
                            shape="circle"
                            onClick={() =&gt; {
                                dispatch(setDark(false))
                            }}
                        &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>
                    ) : (
                        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>
                            <span class="hljs-attr">icon</span>=<span class="hljs-string">{</span>&lt;<span class="hljs-attr">MoonOutlined</span> /&gt;</span>}
                            shape="circle"
                            onClick={() =&gt; {
                                dispatch(setDark(true))
                            }}
                        &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>
                    )}

                    <span class="hljs-tag">&lt;<span class="hljs-name">Dropdown</span> <span class="hljs-attr">menu</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">items:</span> <span class="hljs-attr">menuItems</span> }}&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"user-menu"</span>&gt;</span>
                            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>
                                {loginInfo ? loginInfo.nickname : '未登录'}
                            <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
                            <span class="hljs-tag">&lt;<span class="hljs-name">CaretDownOutlined</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"arrow"</span> /&gt;</span>
                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-name">Dropdown</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
            {contextHolder}
        <span class="hljs-tag">&lt;/<span class="hljs-name">Card</span>&gt;</span></span>
    )
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Header</span>
</code></pre>
<p>需要说明以下4点：</p>
<ol>
<li>使用useDispatch来派发对store的修改，使用方式就是<code>dispatch(setDark(false))</code>。<code>setDark</code>是在theme的reducer（<code>src/store/slices/theme.jsx</code>）中定义好的方法。</li>
<li>使用useModal来调用Antd的Modal组件，<code>contextHolder</code>随意放置在组件任何位置即可（建议放置组件内部的最下面）。</li>
<li>使用useNavigate来实现路由跳转。</li>
<li>使用useSelector来获取store中的theme。</li>
</ol>
<p>一个小小的Header组件，容纳了很多核心知识点。</p>
<p>新建<code>src/components/header/header.styl</code>：</p>
<pre><code class="hljs language-yaml" lang="yaml"><span class="hljs-string">.M-header</span>
    <span class="hljs-attr">position:</span> <span class="hljs-string">relative</span>
    <span class="hljs-attr">z-index:</span> <span class="hljs-number">10</span>
    <span class="hljs-attr">margin-bottom:</span> <span class="hljs-string">2px</span>
    <span class="hljs-attr">border-radius:</span> <span class="hljs-number">0</span>
    <span class="hljs-string">overflow</span> <span class="hljs-string">hidden</span>
    <span class="hljs-string">.ant-card-body</span>
        <span class="hljs-attr">padding:</span> <span class="hljs-string">16px</span> <span class="hljs-string">24px</span>
        <span class="hljs-attr">height:</span> <span class="hljs-string">62px</span>
        <span class="hljs-attr">line-height:</span> <span class="hljs-string">32px</span>
    <span class="hljs-string">.header-wrapper</span>
        <span class="hljs-attr">display:</span> <span class="hljs-string">flex</span>
        <span class="hljs-attr">min-width:</span> <span class="hljs-string">520px</span>
        
    <span class="hljs-string">.logo-con</span>
        <span class="hljs-attr">display:</span> <span class="hljs-string">flex</span>
        <span class="hljs-string">img</span>
            <span class="hljs-attr">height:</span> <span class="hljs-string">32px</span>
        <span class="hljs-string">.logo-text</span>
            <span class="hljs-attr">margin-left:</span> <span class="hljs-string">10px</span>
            <span class="hljs-attr">font-size:</span> <span class="hljs-string">18px</span>
            <span class="hljs-attr">font-weight:</span> <span class="hljs-string">bold</span>
    <span class="hljs-string">.header-con</span>
        <span class="hljs-attr">display:</span> <span class="hljs-string">flex</span>
        <span class="hljs-attr">flex:</span> <span class="hljs-number">1</span>
        <span class="hljs-attr">justify-content:</span> <span class="hljs-string">flex-end</span>
        <span class="hljs-attr">gap:</span> <span class="hljs-string">20px</span>
        <span class="hljs-string">.user-menu</span>
            <span class="hljs-string">cursor</span> <span class="hljs-string">pointer</span>
            <span class="hljs-string">.avatar</span>
                <span class="hljs-attr">width:</span> <span class="hljs-string">42px</span>
                <span class="hljs-attr">height:</span> <span class="hljs-string">42px</span>
                <span class="hljs-attr">border-radius:</span> <span class="hljs-number">50</span><span class="hljs-string">%</span>
            <span class="hljs-string">.arrow</span>
                <span class="hljs-attr">margin-left:</span> <span class="hljs-string">10px</span>
</code></pre>
<p>在Entry中引入Header组件。</p>
<p>修改<code>src/pages/entry/index.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript">    <span class="hljs-keyword">import</span> { <span class="hljs-title class_">Outlet</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router-dom'</span>
    <span class="hljs-keyword">import</span> { useSelector } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>
    <span class="hljs-keyword">import</span> { <span class="hljs-title class_">ConfigProvider</span>, <span class="hljs-title class_">Layout</span>, theme } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
    <span class="hljs-keyword">import</span> <span class="hljs-title class_">Sider</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/sider'</span>
+   <span class="hljs-keyword">import</span> <span class="hljs-title class_">Header</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/header'</span>
    
    <span class="hljs-keyword">const</span> { darkAlgorithm, defaultAlgorithm } = theme
    <span class="hljs-keyword">const</span> { <span class="hljs-title class_">Content</span> } = <span class="hljs-title class_">Layout</span>
    
    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Entry</span>(<span class="hljs-params"></span>) {
    
        ...（略）
        
        <span class="hljs-keyword">return</span> (
            &lt;ConfigProvider theme={antdTheme}&gt;
                &lt;Layout className="G-fullpage"&gt;
-                   &lt;div style={{ height: 70, background: '#bae0ff', fontSize: 20 }}&gt;Header&lt;/div&gt;
+                   &lt;Header /&gt;
                    &lt;Layout style={{ overflow: 'hidden', flex: 1 }}&gt;
                    ...（略）
</code></pre>
<p>运行效果如下：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a2a58a6b86924b1d8277c000bee81425~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=Zc2tRjQbbN6x0jpWT%2Bob%2FSFSVb4%3D" alt="8.7_store的变更-1.png" loading="lazy"></p>
<p>点击“月亮”小图标按钮后，即可切换到暗色模式：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/6c1d5b78173c445f886576d3420ad0b0~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=wQaKRNFdyVB%2BTG68N%2FZREiMvNO0%3D" alt="8.7_store的变更-2.png" loading="lazy"></p>
<p>细心的你应该会发现，左侧导航Sider的底部没有跟随亮暗模式。接下来，结合下一章节的知识点来完善Sider组件。</p>
<h3 data-id="heading-40">8.8 自建组件使用Antd的主题色：完善Sider</h3>
<p>修改<code>src/components/sider/index.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript">    <span class="hljs-keyword">import</span> { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>
-   <span class="hljs-keyword">import</span> { <span class="hljs-title class_">Layout</span>, <span class="hljs-title class_">Menu</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
+   <span class="hljs-keyword">import</span> { <span class="hljs-title class_">Layout</span>, <span class="hljs-title class_">Menu</span>, theme } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
+   <span class="hljs-keyword">import</span> { useSelector } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>
+   <span class="hljs-keyword">import</span> { globalConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">'@/globalConfig'</span>
    <span class="hljs-keyword">import</span> { useNavigate, useLocation } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router-dom'</span>
    <span class="hljs-keyword">import</span> {
        <span class="hljs-title class_">HomeOutlined</span>,
        <span class="hljs-title class_">MenuFoldOutlined</span>,
        <span class="hljs-title class_">MenuUnfoldOutlined</span>,
        <span class="hljs-title class_">UserOutlined</span>,
    } <span class="hljs-keyword">from</span> <span class="hljs-string">'@ant-design/icons'</span>
    <span class="hljs-keyword">import</span> <span class="hljs-string">'./sider.styl'</span>
    
    <span class="hljs-keyword">const</span> <span class="hljs-title class_">AntdSider</span> = <span class="hljs-title class_">Layout</span>.<span class="hljs-property">Sider</span>
+   <span class="hljs-keyword">const</span> { useToken } = theme
    
    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Sider</span>(<span class="hljs-params"></span>) {
+       <span class="hljs-comment">// 获取store中的主题色配置</span>
+       <span class="hljs-keyword">const</span> globalTheme = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.<span class="hljs-property">theme</span>)
    
+       <span class="hljs-comment">// Antd的主题色hook</span>
+       <span class="hljs-keyword">const</span> { token } = <span class="hljs-title function_">useToken</span>()
    
        <span class="hljs-comment">// 当前路由地址</span>
        <span class="hljs-keyword">const</span> location = <span class="hljs-title function_">useLocation</span>()
    
        <span class="hljs-comment">// 路由hook</span>
        <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>()
    
        <span class="hljs-comment">// 左侧导航的开合状态</span>
        <span class="hljs-keyword">const</span> [collapsed, setCollapsed] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>)
    
        <span class="hljs-comment">// 左侧导航列表</span>
        <span class="hljs-keyword">const</span> items = [
            ...（略）
        ]
    
        <span class="hljs-comment">// 切换左侧导航开合状态</span>
        <span class="hljs-keyword">const</span> <span class="hljs-title function_">onCollapse</span> = (<span class="hljs-params"></span>) =&gt; {
            <span class="hljs-title function_">setCollapsed</span>(!collapsed)
        }
    
+       <span class="hljs-comment">// 判断sider主题色</span>
+       <span class="hljs-keyword">let</span> siderTheme = <span class="hljs-string">'dark'</span>
+       <span class="hljs-keyword">if</span> (globalConfig.<span class="hljs-property">siderTheme</span> === <span class="hljs-string">'light'</span>) {
+           siderTheme = <span class="hljs-string">'light'</span>
+       } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (globalConfig.<span class="hljs-property">siderTheme</span> === <span class="hljs-string">'theme'</span>) {
+           globalTheme.<span class="hljs-property">dark</span> ? (siderTheme = <span class="hljs-string">'dark'</span>) : (siderTheme = <span class="hljs-string">'light'</span>)
+       }
    
        <span class="hljs-comment">// 左侧导航展开时的宽度</span>
        <span class="hljs-keyword">const</span> fullWidth = <span class="hljs-number">200</span>
        <span class="hljs-comment">// 左侧导航收起时的宽度</span>
        <span class="hljs-keyword">const</span> collapsedWidth = <span class="hljs-number">49</span>
    
        <span class="hljs-keyword">return</span> (
            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">AntdSider</span>
                <span class="hljs-attr">className</span>=<span class="hljs-string">"M-sider"</span>
                <span class="hljs-attr">trigger</span>=<span class="hljs-string">{null}</span>
                <span class="hljs-attr">collapsible</span>
                <span class="hljs-attr">collapsed</span>=<span class="hljs-string">{collapsed}</span>
                <span class="hljs-attr">collapsedWidth</span>=<span class="hljs-string">{collapsedWidth}</span>
                <span class="hljs-attr">width</span>=<span class="hljs-string">{fullWidth}</span>
+               <span class="hljs-attr">theme</span>=<span class="hljs-string">{siderTheme}</span>
+               <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span>
+                   <span class="hljs-attr">backgroundColor:</span> <span class="hljs-attr">token.colorBgContainer</span>,
+                   <span class="hljs-attr">borderColor:</span> <span class="hljs-attr">token.colorBorderSecondary</span>,
+               }}
            &gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"sider-main"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">Menu</span>
                        <span class="hljs-attr">mode</span>=<span class="hljs-string">"inline"</span>
                        <span class="hljs-attr">selectedKeys</span>=<span class="hljs-string">{location.pathname}</span>
                        <span class="hljs-attr">items</span>=<span class="hljs-string">{items}</span>
                        <span class="hljs-attr">className</span>=<span class="hljs-string">"sider-menu"</span>
                    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Menu</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>
                        <span class="hljs-attr">className</span>=<span class="hljs-string">"sider-footer"</span>
                        <span class="hljs-attr">onClick</span>=<span class="hljs-string">{onCollapse}</span>
<span class="hljs-attr">-</span>                       <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">color:</span> '#<span class="hljs-attr">ffffff</span>' }}
+                       <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span>
+                           <span class="hljs-attr">color:</span> <span class="hljs-attr">token.colorTextBase</span>,
+                           <span class="hljs-attr">borderTopColor:</span> <span class="hljs-attr">token.colorBorder</span>,
+                       }}
                    &gt;</span>
                        {collapsed ? <span class="hljs-tag">&lt;<span class="hljs-name">MenuUnfoldOutlined</span> /&gt;</span> : <span class="hljs-tag">&lt;<span class="hljs-name">MenuFoldOutlined</span> /&gt;</span>}
                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">AntdSider</span>&gt;</span></span>
        )
    }
    
    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Sider</span>
</code></pre>
<p>Sider底部的<code>&lt;div className="sider-footer&gt;</code>是自建的元素，除了文字色，其他并不会跟随Antd主题色。这里使用了Antd的<code>useToken</code>来实现主题色跟随，从<code>token</code>中可以选择Antd提供的各种颜色变量。因此，在Antd项目中，对于自建元素的颜色，要重点考虑使用Antd的<code>useToken</code>。</p>
<p>至于都有哪些主题色变量，可以前往Ant Design主题编辑器查看。</p>
<blockquote>
<p>Ant Design主题编辑器</p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fant-design.antgroup.com%2Ftheme-editor-cn%23Style" target="_blank" title="https://ant-design.antgroup.com/theme-editor-cn#Style" ref="nofollow noopener noreferrer">ant-design.antgroup.com/theme-edito…</a></p>
</blockquote>
<p>再来看看Sider的效果，舒服多了：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/9eb4ab865fd84f3b911bbff2e27cdea0~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=Er9gMHgULTztIuSmYlcsw9gBbrc%3D" alt="8.8_自建组件使用Antd的主题色.png" loading="lazy"></p>
<h3 data-id="heading-41">8.9 store的使用：实现主题色切换</h3>
<p>在<code>src/globalConfig.jsx</code>里的customColorPrimarys就是留给主题色换肤的。接下来讲解下具体实现方法。为了让交互体验稍微好一点，通过Antd的Modal组件来制作主题色选择功能。</p>
<h4 data-id="heading-42">8.9.1 创建主题色选择对话框组件</h4>
<p>新建<code>src/components/themeModal/index.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Modal</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
<span class="hljs-keyword">import</span> { useSelector, useDispatch } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">CheckCircleFilled</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'@ant-design/icons'</span>
<span class="hljs-keyword">import</span> { setColorPrimary } <span class="hljs-keyword">from</span> <span class="hljs-string">'@/store/slices/theme'</span>
<span class="hljs-keyword">import</span> { globalConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">'@/globalConfig'</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">'./themeModal.styl'</span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">ThemeModal</span>(<span class="hljs-params">{ onClose }</span>) {
    <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>()
    <span class="hljs-comment">// 主题配置</span>
    <span class="hljs-keyword">const</span> theme = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.<span class="hljs-property">theme</span>)

    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Modal</span>
            <span class="hljs-attr">className</span>=<span class="hljs-string">"M-themeModal"</span>
            <span class="hljs-attr">open</span>=<span class="hljs-string">{true}</span>
            <span class="hljs-attr">title</span>=<span class="hljs-string">"主题色"</span>
            <span class="hljs-attr">onCancel</span>=<span class="hljs-string">{()</span> =&gt;</span> {
                onClose()
            }}
            maskClosable={false}
            footer={null}
        &gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"colors-con"</span>&gt;</span>
                {globalConfig.customColorPrimarys &amp;&amp;
                    globalConfig.customColorPrimarys.map((item, index) =&gt; {
                        return (
                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>
                                <span class="hljs-attr">className</span>=<span class="hljs-string">"theme-color"</span>
                                <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">backgroundColor:</span> <span class="hljs-attr">item</span> }}
                                <span class="hljs-attr">key</span>=<span class="hljs-string">{index}</span>
                                <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> {
                                    dispatch(setColorPrimary(item))
                                }}
                            &gt;
                                {theme.colorPrimary === item &amp;&amp; (
                                    <span class="hljs-tag">&lt;<span class="hljs-name">CheckCircleFilled</span>
                                        <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span>
                                            <span class="hljs-attr">fontSize:</span> <span class="hljs-attr">28</span>,
                                            <span class="hljs-attr">color:</span> '#<span class="hljs-attr">fff</span>',
                                        }}
                                    /&gt;</span>
                                )}
                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
                        )
                    })}
            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">Modal</span>&gt;</span></span>
    )
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">ThemeModal</span>
</code></pre>
<p>补充相应的样式，新建<code>src/components/themeModal/themeModal.styl</code>：</p>
<pre><code class="hljs language-yaml" lang="yaml"><span class="hljs-string">.M-themeModal</span>
    <span class="hljs-string">.colors-con</span>
        <span class="hljs-attr">margin-top:</span> <span class="hljs-string">20px</span>
        <span class="hljs-attr">display:</span> <span class="hljs-string">grid</span>
        <span class="hljs-attr">grid-template-columns:</span> <span class="hljs-string">repeat(6,</span> <span class="hljs-string">1fr)</span>
        <span class="hljs-attr">row-gap:</span> <span class="hljs-string">10px</span>
    <span class="hljs-string">.theme-color</span>
        <span class="hljs-attr">margin:</span> <span class="hljs-number">0</span> <span class="hljs-string">auto</span>
        <span class="hljs-attr">width:</span> <span class="hljs-string">60px</span>
        <span class="hljs-attr">height:</span> <span class="hljs-string">60px</span>
        <span class="hljs-attr">line-height:</span> <span class="hljs-string">68px</span>
        <span class="hljs-attr">border-radius:</span> <span class="hljs-string">6px</span>
        <span class="hljs-attr">cursor:</span> <span class="hljs-string">pointer</span>
        <span class="hljs-attr">text-align:</span> <span class="hljs-string">center</span>
</code></pre>
<p>这个组件将在<code>&lt;Header&gt;</code>组件中调用，详见后续第8.9.3章节。</p>
<h4 data-id="heading-43">8.9.2 创建自定义SVG图标Icon组件</h4>
<p>Antd自带了很多Icon，非常方便直接使用。但在项目中遇到Antd没有的图标怎么办？当然，前提要求是自己构建的图标也能支持随时改变颜色和大小等样式。</p>
<p>上一章节创建的<code>&lt;ThemeModal&gt;</code>组件将引入到<code>&lt;Header&gt;</code>中，但是Antd没有提供主题色换肤的Icon。正好，来讲解一下如何创建自定义SVG图标Icon组件。</p>
<p>第一步：创建自定义图标库</p>
<p>新建<code>src/components/extraIcons/index.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Icon</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@ant-design/icons'</span>

<span class="hljs-keyword">const</span> <span class="hljs-title function_">ThemeSvg</span> = (<span class="hljs-params"></span>) =&gt; (
    <span class="hljs-comment">// 这里粘贴“主题色”图标的SVG代码</span>
)

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">ThemeOutlined</span> = (<span class="hljs-params">props</span>) =&gt; <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Icon</span> <span class="hljs-attr">component</span>=<span class="hljs-string">{ThemeSvg}</span> {<span class="hljs-attr">...props</span>} /&gt;</span></span>
</code></pre>
<p>第二步：在iconfont网站(<a href="https://link.juejin.cn?target=http%3A%2F%2Fwww.iconfont.cn%2F)" target="_blank" title="http://www.iconfont.cn/)" ref="nofollow noopener noreferrer">www.iconfont.cn</a>)找到心仪的图片，然后点击下载按钮。找到心仪的图片，然后点击下载按钮。)</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/6f53f4edfdf14296ad4160c38884b02b~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=oyLg9OzNSuqiFUzDuRHctZ9xDA0%3D" alt="8.9.2_创建自定义SVG图标Icon组件-1.png" loading="lazy"></p>
<p>第三步：在弹出的图标详情弹层里，点击“复制SVG代码”。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/71759298c0c444a6a73d2684f0ea3e87~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=5QcQlZ7ElBxzaFDkjYy6AN3xMHc%3D" alt="8.9.2_创建自定义SVG图标Icon组件-2.png" loading="lazy"></p>
<p>第四步：将选好的SVG代码依次粘贴到<code>src/components/extraIcons/index.jsx</code>中对应的位置。</p>
<blockquote>
<p>※注：一定要仔细坚持以下三方面。</p>
<ol>
<li>
<p>检查svg代码中是否有class以及与颜色相关的fill、stroke等属性，如有，必须连带属性一起删除。像p-id这种自定义的属性也可以删除。</p>
</li>
<li>
<p>确保&lt;SVG&gt;标签中有fill="currentColor"，否则图标的颜色将不能改变。</p>
</li>
<li>
<p>确保&lt;SVG&gt;标签中width和height属性的值为1em，否则图标的大小将不能改变。</p>
</li>
</ol>
</blockquote>
<p>这里以“主题色”图标为例：</p>
<pre><code class="hljs language-ini" lang="ini">    &lt;svg
-       <span class="hljs-attr">t</span>=<span class="hljs-string">"1733378443800"</span>
-       <span class="hljs-attr">class</span>=<span class="hljs-string">"icon"</span>
        <span class="hljs-attr">viewBox</span>=<span class="hljs-string">"0 0 1024 1024"</span>
        <span class="hljs-attr">version</span>=<span class="hljs-string">"1.1"</span>
        <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.w3.org/2000/svg"</span>
-       <span class="hljs-attr">p-id</span>=<span class="hljs-string">"5017"</span>
-       <span class="hljs-attr">width</span>=<span class="hljs-string">"512"</span>
+       <span class="hljs-attr">width</span>=<span class="hljs-string">"1em"</span>
-       <span class="hljs-attr">height</span>=<span class="hljs-string">"512"</span>
+       <span class="hljs-attr">height</span>=<span class="hljs-string">"1em"</span>
+       <span class="hljs-attr">fill</span>=<span class="hljs-string">"currentColor"</span>
    &gt;
        &lt;path
            <span class="hljs-attr">d</span>=<span class="hljs-string">"...（略）"</span>
-           <span class="hljs-attr">p-id</span>=<span class="hljs-string">"5018"</span>
-           <span class="hljs-attr">fill</span>=<span class="hljs-string">"#666666"</span>
        &gt;&lt;/path&gt;
        &lt;path
            <span class="hljs-attr">d</span>=<span class="hljs-string">"...（略）"</span>
-           <span class="hljs-attr">p-id</span>=<span class="hljs-string">"5019"</span>
-           <span class="hljs-attr">fill</span>=<span class="hljs-string">"#666666"</span>
        &gt;&lt;/path&gt;
        &lt;path
            <span class="hljs-attr">d</span>=<span class="hljs-string">"...（略）"</span>
-           <span class="hljs-attr">p-id</span>=<span class="hljs-string">"5019"</span>
-           <span class="hljs-attr">fill</span>=<span class="hljs-string">"#666666"</span>
        &gt;&lt;/path&gt;
        &lt;path
            <span class="hljs-attr">d</span>=<span class="hljs-string">"...（略）"</span>
-           <span class="hljs-attr">p-id</span>=<span class="hljs-string">"5020"</span>
-           <span class="hljs-attr">fill</span>=<span class="hljs-string">"#666666"</span>
        &gt;&lt;/path&gt;
    &lt;/svg&gt;
</code></pre>
<p>这样，自定义Icon就制作好了。使用方法在下一小节介绍。</p>
<h4 data-id="heading-44">8.9.3 在Header组件中实现主题色切换</h4>
<p>修改<code>src/components/header/jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript">+   <span class="hljs-keyword">import</span> { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>
    <span class="hljs-keyword">import</span> { useSelector, useDispatch } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>
    <span class="hljs-keyword">import</span> { setDark } <span class="hljs-keyword">from</span> <span class="hljs-string">'@/store/slices/theme'</span>
    <span class="hljs-keyword">import</span> { <span class="hljs-title class_">Button</span>, <span class="hljs-title class_">Card</span>, <span class="hljs-title class_">Dropdown</span>, <span class="hljs-title class_">Modal</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
    <span class="hljs-keyword">import</span> {
        <span class="hljs-title class_">ExportOutlined</span>,
        <span class="hljs-title class_">CaretDownOutlined</span>,
        <span class="hljs-title class_">SunOutlined</span>,
        <span class="hljs-title class_">MoonOutlined</span>,
    } <span class="hljs-keyword">from</span> <span class="hljs-string">'@ant-design/icons'</span>
+   <span class="hljs-keyword">import</span> { <span class="hljs-title class_">ThemeOutlined</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/extraIcons'</span>
+   <span class="hljs-keyword">import</span> <span class="hljs-title class_">ThemeModal</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/themeModal'</span>
    <span class="hljs-keyword">import</span> { globalConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">'@/globalConfig'</span>
    <span class="hljs-keyword">import</span> { useNavigate } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router-dom'</span>
    <span class="hljs-keyword">import</span> logoImg <span class="hljs-keyword">from</span> <span class="hljs-string">'@/common/images/logo.png'</span>
    <span class="hljs-keyword">import</span> <span class="hljs-string">'./header.styl'</span>
    
    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Header</span>(<span class="hljs-params"></span>) {
        <span class="hljs-comment">// 获取redux派发钩子</span>
        <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>()
    
        <span class="hljs-comment">// 路由hook</span>
        <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>()
    
        <span class="hljs-comment">// 主题配置</span>
        <span class="hljs-keyword">const</span> theme = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.<span class="hljs-property">theme</span>)
    
        <span class="hljs-comment">// Antd的Modal组件API</span>
        <span class="hljs-keyword">const</span> [modal, contextHolder] = <span class="hljs-title class_">Modal</span>.<span class="hljs-title function_">useModal</span>()

+       <span class="hljs-comment">// 是否显示主题色Modal</span>
+       <span class="hljs-keyword">const</span> [showThemeModal, setShowThemeModal] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>)
    
        <span class="hljs-comment">// 退出登录</span>
        <span class="hljs-keyword">const</span> <span class="hljs-title function_">logout</span> = (<span class="hljs-params"></span>) =&gt; {
            ...（略）
        }
    
        <span class="hljs-keyword">const</span> loginInfo = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(
            <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">getItem</span>(globalConfig.<span class="hljs-property">SESSION_LOGIN_INFO</span>)
        )
    
        <span class="hljs-keyword">const</span> menuItems = [
            ...（略）
        ]
    
        <span class="hljs-keyword">return</span> (
            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Card</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"M-header"</span> <span class="hljs-attr">bordered</span>=<span class="hljs-string">{false}</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"header-wrapper"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"logo-con"</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{logoImg}</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span> /&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"logo-text"</span>&gt;</span>Vite React APP<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"header-con"</span>&gt;</span>
                        {theme.dark ? (
                            <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>
                                <span class="hljs-attr">icon</span>=<span class="hljs-string">{</span>&lt;<span class="hljs-attr">SunOutlined</span> /&gt;</span>}
                                shape="circle"
                                onClick={() =&gt; {
                                    dispatch(setDark(false))
                                }}
                            &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>
                        ) : (
                            <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>
                                <span class="hljs-attr">icon</span>=<span class="hljs-string">{</span>&lt;<span class="hljs-attr">MoonOutlined</span> /&gt;</span>}
                                shape="circle"
                                onClick={() =&gt; {
                                    dispatch(setDark(true))
                                }}
                            &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>
                        )}
+                       {globalConfig.customColorPrimarys &amp;&amp;
+                           globalConfig.customColorPrimarys.length &gt; 0 &amp;&amp; (
+                               <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>
+                                   <span class="hljs-attr">icon</span>=<span class="hljs-string">{</span>&lt;<span class="hljs-attr">ThemeOutlined</span> /&gt;</span>}
+                                   shape="circle"
+                                   onClick={() =&gt; {
+                                       setShowThemeModal(true)
+                                   }}
+                               &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>
+                           )}
                        <span class="hljs-tag">&lt;<span class="hljs-name">Dropdown</span> <span class="hljs-attr">menu</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">items:</span> <span class="hljs-attr">menuItems</span> }}&gt;</span>
                            ...（略）
                        <span class="hljs-tag">&lt;/<span class="hljs-name">Dropdown</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
+               {showThemeModal &amp;&amp; (
+                   <span class="hljs-tag">&lt;<span class="hljs-name">ThemeModal</span>
+                       <span class="hljs-attr">onClose</span>=<span class="hljs-string">{()</span> =&gt;</span> {
+                           setShowThemeModal(false)
+                       }}
+                   /&gt;
+               )}
                {contextHolder}
            <span class="hljs-tag">&lt;/<span class="hljs-name">Card</span>&gt;</span></span>
        )
    }
    
    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Header</span>
</code></pre>
<p>运行效果：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/e5d35bfef2fe46e691d09f43f363d3d4~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=ebfHpuN0ibrRvC7jscutzJSSmrM%3D" alt="8.9.3_在Header组件中实现主题色切换-1.png" loading="lazy"></p>
<p>点击主题色对话框里的颜色，主题色切换就会立即生效了。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/b274f09ae5ba4a818cf4db2c48b445a8~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=lUGc70FRYCbeUZtcD1JlalXemHM%3D" alt="8.9.3_在Header组件中实现主题色切换-2.png" loading="lazy"></p>
<p>刷新页面或者重新打开网页也会保留上次的主题色。这是因为主题色在localStorage和Redux的store中都同步保存了。</p>
<h2 data-id="heading-45">8.10 安装Redux调试浏览器插件</h2>
<p>本章节讲解的Redux使用，每次对store的操作变化跟踪如果用<code>console.log()</code>显然很麻烦，也不及时。为了更方便地跟踪Redux状态，建议安装Chrome插件。这个插件可记录每次Redux的变化，非常便于跟踪调式。
先科学上网，在Chrome网上应用店里搜索“Redux DevTools”并安装。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/9c45cfbe9a124ec1866d760d44910f3e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=m8NOhcJO36UtUU1rdQiEI1Uv4RY%3D" alt="8.10_安装Redux调试浏览器插件-1.png" loading="lazy"></p>
<p>在Redux DevTools插件中，可以清晰地看到Redux数据的状态变化，非常便于调试。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/772726142b36420bbd30727f7577f350~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=SUqSWGr%2B4%2F9G%2FU3qCR0UyCUUimQ%3D" alt="8.10_安装Redux调试浏览器插件-2.png" loading="lazy"></p>
<h2 data-id="heading-46">9 基于axios封装公用API库</h2>
<p>为了方便API的维护，把各个API地址和相关方法集中管理是一个很不错的方案。</p>
<h3 data-id="heading-47">9.1 安装axios</h3>
<p>axios是一款非常流行的API请求工具，先来安装一下。</p>
<p>执行：</p>
<pre><code class="hljs">npm install axios
</code></pre>
<h3 data-id="heading-48">9.2 封装公用API库</h3>
<p>直接上代码。</p>
<p>新建<code>src/api/index.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">'axios'</span>
<span class="hljs-keyword">import</span> globalRouter <span class="hljs-keyword">from</span> <span class="hljs-string">'@/router/globalRouter'</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Modal</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
<span class="hljs-keyword">import</span> { globalConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">'@/globalConfig'</span>

<span class="hljs-comment">// 开发环境地址</span>
<span class="hljs-keyword">let</span> <span class="hljs-variable constant_">API_DOMAIN</span> = <span class="hljs-string">'/api/'</span>
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">MODE</span> === <span class="hljs-string">'production'</span>) {
    <span class="hljs-comment">// 正式环境地址</span>
    <span class="hljs-variable constant_">API_DOMAIN</span> = <span class="hljs-string">'http://xxxxx/api/'</span>
}

<span class="hljs-comment">// 用户登录信息在localStorage中存放的名称</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SESSION_LOGIN_INFO</span> = globalConfig.<span class="hljs-property">SESSION_LOGIN_INFO</span>

<span class="hljs-comment">// API请求正常，数据正常</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">API_CODE</span> = {
    <span class="hljs-comment">// API请求正常</span>
    <span class="hljs-attr">OK</span>: <span class="hljs-number">200</span>,
    <span class="hljs-comment">// API请求正常，数据异常</span>
    <span class="hljs-attr">ERR_DATA</span>: <span class="hljs-number">403</span>,
    <span class="hljs-comment">// API请求正常，空数据</span>
    <span class="hljs-attr">ERR_NO_DATA</span>: <span class="hljs-number">301</span>,
    <span class="hljs-comment">// API请求正常，登录异常</span>
    <span class="hljs-attr">ERR_LOGOUT</span>: <span class="hljs-number">401</span>,
}

<span class="hljs-comment">// API请求异常统一报错提示</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">API_FAILED</span> = <span class="hljs-string">'网络连接异常，请稍后再试'</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">API_LOGOUT</span> = <span class="hljs-string">'您的账号已在其他设备登录，请重新登录'</span>

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> apiReqs = {
    <span class="hljs-comment">// 登录（成功后将登录信息存入localStorage）</span>
    <span class="hljs-attr">signIn</span>: <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> {
        axios
            .<span class="hljs-title function_">post</span>(<span class="hljs-variable constant_">API_DOMAIN</span> + <span class="hljs-string">'login'</span>, config.<span class="hljs-property">data</span>)
            .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {
                <span class="hljs-keyword">let</span> result = res.<span class="hljs-property">data</span>
                config.<span class="hljs-property">done</span> &amp;&amp; config.<span class="hljs-title function_">done</span>(result)
                <span class="hljs-keyword">if</span> (result.<span class="hljs-property">code</span> === <span class="hljs-variable constant_">API_CODE</span>.<span class="hljs-property">OK</span>) {
                    <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">setItem</span>(
                        <span class="hljs-variable constant_">SESSION_LOGIN_INFO</span>,
                        <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>({
                            <span class="hljs-attr">uid</span>: result.<span class="hljs-property">data</span>.<span class="hljs-property">loginUid</span>,
                            <span class="hljs-attr">nickname</span>: result.<span class="hljs-property">data</span>.<span class="hljs-property">nickname</span>,
                            <span class="hljs-attr">token</span>: result.<span class="hljs-property">data</span>.<span class="hljs-property">token</span>,
                        })
                    )
                    config.<span class="hljs-property">success</span> &amp;&amp; config.<span class="hljs-title function_">success</span>(result)
                } <span class="hljs-keyword">else</span> {
                    config.<span class="hljs-property">fail</span> &amp;&amp; config.<span class="hljs-title function_">fail</span>(result)
                }
            })
            .<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> {
                config.<span class="hljs-property">done</span> &amp;&amp; config.<span class="hljs-title function_">done</span>()
                config.<span class="hljs-property">fail</span> &amp;&amp;
                    config.<span class="hljs-title function_">fail</span>({
                        <span class="hljs-attr">message</span>: <span class="hljs-variable constant_">API_FAILED</span>,
                    })
                <span class="hljs-title class_">Modal</span>.<span class="hljs-title function_">error</span>({
                    <span class="hljs-attr">title</span>: <span class="hljs-string">'登录失败'</span>,
                })
            })
    },
    <span class="hljs-comment">// 管登出（登出后将登录信息从localStorage删除）</span>
    <span class="hljs-attr">signOut</span>: <span class="hljs-function">() =&gt;</span> {
        <span class="hljs-keyword">const</span> { uid, token } = <span class="hljs-title function_">getLocalLoginInfo</span>()
        <span class="hljs-keyword">let</span> headers = {
            <span class="hljs-attr">loginUid</span>: uid,
            <span class="hljs-string">'access-token'</span>: token,
        }
        <span class="hljs-keyword">let</span> axiosConfig = {
            <span class="hljs-attr">method</span>: <span class="hljs-string">'post'</span>,
            <span class="hljs-attr">url</span>: <span class="hljs-variable constant_">API_DOMAIN</span> + <span class="hljs-string">'logout'</span>,
            headers,
        }
        <span class="hljs-title function_">axios</span>(axiosConfig)
            .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {
                <span class="hljs-title function_">logout</span>()
            })
            .<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> {
                <span class="hljs-title function_">logout</span>()
            })
    },
    <span class="hljs-comment">// 获取用户列表（仅做示例）</span>
    <span class="hljs-attr">getUserList</span>: <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> {
        config.<span class="hljs-property">method</span> = <span class="hljs-string">'get'</span>
        config.<span class="hljs-property">url</span> = <span class="hljs-variable constant_">API_DOMAIN</span> + <span class="hljs-string">'user/getUserList'</span>
        <span class="hljs-title function_">apiRequest</span>(config)
    },
    <span class="hljs-comment">// 修改用户信息（仅做示例）</span>
    <span class="hljs-attr">modifyUser</span>: <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> {
        config.<span class="hljs-property">url</span> = <span class="hljs-variable constant_">API_DOMAIN</span> + <span class="hljs-string">'user/modify'</span>
        <span class="hljs-title function_">apiRequest</span>(config)
    },
}

<span class="hljs-comment">// 从localStorage获取用户信息</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getLocalLoginInfo</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>[<span class="hljs-variable constant_">SESSION_LOGIN_INFO</span>])
}

<span class="hljs-comment">// 退出登录</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">logout</span>(<span class="hljs-params"></span>) {
    <span class="hljs-comment">// 清除localStorage中的登录信息</span>
    <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">removeItem</span>(<span class="hljs-variable constant_">SESSION_LOGIN_INFO</span>)
    <span class="hljs-comment">// 跳转至Login页面</span>
    globalRouter.<span class="hljs-title function_">navigate</span>(<span class="hljs-string">'/login'</span>)
}

<span class="hljs-comment">/*
 * API请求封装（带验证信息）
 * config.method: [必须]请求method
 * config.url: [必须]请求url
 * config.data: 请求数据
 * config.formData: 是否以formData格式提交（用于上传文件）
 * config.success(res): 请求成功回调
 * config.fail(err): 请求失败回调
 * config.done(): 请求结束回调
 */</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">apiRequest</span>(<span class="hljs-params">config</span>) {
    <span class="hljs-keyword">const</span> loginInfo = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(
        <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-variable constant_">SESSION_LOGIN_INFO</span>)
    )
    <span class="hljs-keyword">if</span> (config.<span class="hljs-property">data</span> === <span class="hljs-literal">undefined</span>) {
        config.<span class="hljs-property">data</span> = {}
    }
    config.<span class="hljs-property">method</span> = config.<span class="hljs-property">method</span> || <span class="hljs-string">'post'</span>

    <span class="hljs-comment">// 封装header信息</span>
    <span class="hljs-keyword">let</span> headers = {
        <span class="hljs-attr">loginUid</span>: loginInfo ? loginInfo.<span class="hljs-property">uid</span> : <span class="hljs-literal">null</span>,
        <span class="hljs-string">'access-token'</span>: loginInfo ? loginInfo.<span class="hljs-property">token</span> : <span class="hljs-literal">null</span>,
    }

    <span class="hljs-keyword">let</span> data = <span class="hljs-literal">null</span>

    <span class="hljs-comment">// 判断是否使用formData方式提交</span>
    <span class="hljs-keyword">if</span> (config.<span class="hljs-property">formData</span>) {
        headers[<span class="hljs-string">'Content-Type'</span>] = <span class="hljs-string">'multipart/form-data'</span>
        data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>()
        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(config.<span class="hljs-property">data</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) {
            data.<span class="hljs-title function_">append</span>(key, config.<span class="hljs-property">data</span>[key])
        })
    } <span class="hljs-keyword">else</span> {
        data = config.<span class="hljs-property">data</span>
    }

    <span class="hljs-comment">// 组装axios数据</span>
    <span class="hljs-keyword">let</span> axiosConfig = {
        <span class="hljs-attr">method</span>: config.<span class="hljs-property">method</span>,
        <span class="hljs-attr">url</span>: config.<span class="hljs-property">url</span>,
        headers,
    }

    <span class="hljs-comment">// 判断是get还是post，并加入发送的数据</span>
    <span class="hljs-keyword">if</span> (config.<span class="hljs-property">method</span> === <span class="hljs-string">'get'</span>) {
        axiosConfig.<span class="hljs-property">params</span> = data
    } <span class="hljs-keyword">else</span> {
        axiosConfig.<span class="hljs-property">data</span> = data
    }

    <span class="hljs-comment">// 发起请求</span>
    <span class="hljs-title function_">axios</span>(axiosConfig)
        .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {
            <span class="hljs-keyword">let</span> result = res.<span class="hljs-property">data</span>
            config.<span class="hljs-property">done</span> &amp;&amp; config.<span class="hljs-title function_">done</span>()

            <span class="hljs-keyword">if</span> (result.<span class="hljs-property">code</span> === <span class="hljs-variable constant_">API_CODE</span>.<span class="hljs-property">ERR_LOGOUT</span>) {
                <span class="hljs-comment">// 如果是登录信息失效，则弹出Antd的Modal对话框</span>
                <span class="hljs-title class_">Modal</span>.<span class="hljs-title function_">error</span>({
                    <span class="hljs-attr">title</span>: result.<span class="hljs-property">message</span>,
                    <span class="hljs-comment">// 点击OK按钮后，直接跳转至登录界面</span>
                    <span class="hljs-attr">onOk</span>: <span class="hljs-function">() =&gt;</span> {
                        <span class="hljs-title function_">logout</span>()
                    },
                })
            } <span class="hljs-keyword">else</span> {
                <span class="hljs-comment">// 如果登录信息正常，则执行success的回调</span>
                config.<span class="hljs-property">success</span> &amp;&amp; config.<span class="hljs-title function_">success</span>(result)
            }
        })
        .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {
            <span class="hljs-comment">// 如果接口不通或出现错误，则弹出Antd的Modal对话框</span>
            <span class="hljs-title class_">Modal</span>.<span class="hljs-title function_">error</span>({
                <span class="hljs-attr">title</span>: <span class="hljs-variable constant_">API_FAILED</span>,
            })
            <span class="hljs-comment">// 执行fail的回调</span>
            config.<span class="hljs-property">fail</span> &amp;&amp; config.<span class="hljs-title function_">fail</span>()
            <span class="hljs-comment">// 执行done的回调</span>
            config.<span class="hljs-property">done</span> &amp;&amp; config.<span class="hljs-title function_">done</span>()
        })
}
</code></pre>
<p>代码比较多，必要的备注都写了，不再赘述。</p>
<p>这里主要实现了以下几方面：</p>
<ol>
<li>通过apiReqs把项目所有API进行统一管理。</li>
<li>通过apiRequest方法，实现了统一的token验证、登录状态失效报错以及请求错误报错等业务逻辑。</li>
<li>通过globalRouter.navigate实现了在React组件外的路由跳转（<code>src/api/index.jsx</code>并不是React组件，只是一个简易的js变量和方法库而已）。</li>
</ol>
<blockquote>
<p>Q：为什么signIn和signOut方法没有像getUserList和modifyUser一样调用apiRequest呢？</p>
<p>A：因为signIn和signOut的逻辑比较特殊，signIn并没有读取localStorage，而signOut需要清除localStorage，这两个逻辑是与其他API不同的，所以单独实现了。</p>
</blockquote>
<h3 data-id="heading-49">9.3 Mock.js安装与使用</h3>
<p>在开发过程中，为了方便前端独自调试接口，经常使用Mock.js拦截Ajax请求，并返回预置好的数据。本小节介绍下如何在React项目中使用Mock.js。</p>
<p>执行安装：</p>
<pre><code class="hljs">npm install mockjs
</code></pre>
<p>新建<code>src/mock.jsx</code>，代码如下：</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Mock</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'mockjs'</span>

<span class="hljs-keyword">const</span> domain = <span class="hljs-string">'/api/'</span>

<span class="hljs-comment">// 模拟login接口</span>
<span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(domain + <span class="hljs-string">'login'</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
    <span class="hljs-keyword">let</span> result = {
        <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,
        <span class="hljs-attr">message</span>: <span class="hljs-string">'OK'</span>,
        <span class="hljs-attr">data</span>: {
            <span class="hljs-attr">loginUid</span>: <span class="hljs-number">10000</span>,
            <span class="hljs-attr">nickname</span>: <span class="hljs-string">'兔子先生'</span>,
            <span class="hljs-attr">token</span>: <span class="hljs-string">'yyds2023'</span>,
        },
    }
    <span class="hljs-keyword">return</span> result
})
</code></pre>
<p>然后在<code>src/main.jsx</code>中引入mock.jsx：</p>
<pre><code class="hljs language-javascript" lang="javascript">    ...（略）
    <span class="hljs-comment">// 引入Ant Design中文语言包</span>
    <span class="hljs-keyword">import</span> zhCN <span class="hljs-keyword">from</span> <span class="hljs-string">'antd/locale/zh_CN'</span>
    <span class="hljs-comment">// 全局样式</span>
    <span class="hljs-keyword">import</span> <span class="hljs-string">'@/common/styles/frame.styl'</span>
+   <span class="hljs-comment">// mock.js模拟数据</span>
+   <span class="hljs-keyword">import</span> <span class="hljs-string">'./mock'</span>
    ...（略）
</code></pre>
<p>如此简单。这样，在项目中请求<code>/api/login</code>的时候，就会被Mock.js拦截，并返回Mock.js中模拟好的数据。</p>
<blockquote>
<p>※注：正式上线前，一定不要忘记关掉Mock.js！！！直接在<code>src/main.jsx</code>中注释掉<code>import './mock'</code>这段代码即可。</p>
</blockquote>
<h3 data-id="heading-50">9.4 发起API请求：实现登录功能</h3>
<p>继续完善Login页面，实现一个API请求。</p>
<p>修改<code>src/pages/login/index.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript">    <span class="hljs-keyword">import</span> { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>
    <span class="hljs-keyword">import</span> { <span class="hljs-title class_">Button</span>, <span class="hljs-title class_">Form</span>, <span class="hljs-title class_">Input</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
+   <span class="hljs-keyword">import</span> { apiReqs } <span class="hljs-keyword">from</span> <span class="hljs-string">'@/api'</span>
+   <span class="hljs-keyword">import</span> { useNavigate } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router-dom'</span>
    <span class="hljs-keyword">import</span> { <span class="hljs-title class_">KeyOutlined</span>, <span class="hljs-title class_">UserOutlined</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'@ant-design/icons'</span>
    <span class="hljs-keyword">import</span> imgLogo <span class="hljs-keyword">from</span> <span class="hljs-string">'@/common/images/logo.png'</span>
    <span class="hljs-keyword">import</span> imgCover <span class="hljs-keyword">from</span> <span class="hljs-string">'./cover.svg'</span>
    <span class="hljs-keyword">import</span> <span class="hljs-string">'./login.styl'</span>
    
    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Login</span>(<span class="hljs-params"></span>) {
+       <span class="hljs-comment">// 创建路由hook</span>
+       <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>()

        <span class="hljs-comment">// 登录按钮loading状态</span>
        <span class="hljs-keyword">const</span> [loading, setLoading] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>)
    
        <span class="hljs-comment">// 提交登录</span>
        <span class="hljs-keyword">const</span> <span class="hljs-title function_">loginSubmit</span> = (<span class="hljs-params">values</span>) =&gt; {
            <span class="hljs-title function_">setLoading</span>(<span class="hljs-literal">true</span>)
    
            <span class="hljs-keyword">let</span> data = {
                <span class="hljs-attr">account</span>: values.<span class="hljs-property">account</span>,
                <span class="hljs-attr">password</span>: values.<span class="hljs-property">password</span>,
            }
    
-           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'submitData'</span>, data)
+           apiReqs.<span class="hljs-title function_">signIn</span>({
+               data,
+               <span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {
+                   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)
+                   <span class="hljs-title function_">navigate</span>(<span class="hljs-string">'/home'</span>)
+               },
+           })
        }
    
        <span class="hljs-keyword">return</span> ...（略）
    }
    
    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Login</span>
</code></pre>
<p>运行项目，打开登录界面：</p>
<pre><code class="hljs language-bash" lang="bash">http://localhost:3000/<span class="hljs-comment">#/login</span>
</code></pre>
<p>随便输入账号和密码，点击登录按钮后，登录成功，并且用户昵称也如期显示到了<code>&lt;Header&gt;</code>组件的右上角。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/0f933e3a2fd74e2bba039857fa4e473a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=5Dddkl9jOZTk5%2BO1FoNXUpCa6UA%3D" alt="9.4_发起API请求：实现登录功能-1.png" loading="lazy"></p>
<p>通过调试工具查看localStorage，可以看到登录信息已正确保存。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/81fc05004bbe4d178102ca2a2e184afa~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=%2F7%2FHCuAlhS1FjSgrNMdA%2BMoUx0A%3D" alt="9.4_发起API请求：实现登录功能-2.png" loading="lazy"></p>
<h2 data-id="heading-51">10 其他优化</h2>
<h3 data-id="heading-52">10.1 路由守卫</h3>
<p>现在实现一个简单的路由守卫，通过Entry进行登录状态验证，未登录用户访问Home或者AUsers页面则强制跳转至Login页面。</p>
<p>修改<code>src/pages/entry/index.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript">    <span class="hljs-keyword">import</span> { <span class="hljs-title class_">Outlet</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router-dom'</span>
    <span class="hljs-keyword">import</span> { useSelector } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>
    <span class="hljs-keyword">import</span> { <span class="hljs-title class_">ConfigProvider</span>, <span class="hljs-title class_">Layout</span>, theme } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>
+   <span class="hljs-keyword">import</span> { <span class="hljs-title class_">Navigate</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router-dom'</span>
+   <span class="hljs-keyword">import</span> { globalConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">'@/globalConfig'</span>
    <span class="hljs-keyword">import</span> <span class="hljs-title class_">Header</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/header'</span>
    <span class="hljs-keyword">import</span> <span class="hljs-title class_">Sider</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/sider'</span>
    
    <span class="hljs-keyword">const</span> { darkAlgorithm, defaultAlgorithm } = theme
    <span class="hljs-keyword">const</span> { <span class="hljs-title class_">Content</span> } = <span class="hljs-title class_">Layout</span>

+   <span class="hljs-keyword">function</span> <span class="hljs-title function_">PrivateRoute</span>(<span class="hljs-params">props</span>) {
+       <span class="hljs-comment">// 判断localStorage是否有登录用户信息，如果没有则跳转登录页</span>
+       <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">getItem</span>(globalConfig.<span class="hljs-property">SESSION_LOGIN_INFO</span>) ? (
+           props.<span class="hljs-property">children</span>
+       ) : (
+           <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/login"</span> /&gt;</span></span>
+       )
+   }
    
    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Entry</span>(<span class="hljs-params"></span>) {
    
        ...（略）
    
        <span class="hljs-keyword">return</span> (
+           <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">PrivateRoute</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">ConfigProvider</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">{antdTheme}</span>&gt;</span>
                    ...（略）
                <span class="hljs-tag">&lt;/<span class="hljs-name">ConfigProvider</span>&gt;</span>
+           <span class="hljs-tag">&lt;/<span class="hljs-name">PrivateRoute</span>&gt;</span></span>
        )
    }
    
    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Entry</span>
</code></pre>
<p>再次运行项目，这时，如果未经Login页面正常登录（即localStorage里没有登录信息），直接通过浏览器访问<code>http://localhost:3000/#/home</code>或者<code>http://localhost:3000/#/users</code>则会直接返回到Login页面。这是因为在Entry框架页面中引入了<code>PrivateRoute</code>，先检查localStorage是否有登录用户信息，没有则强制跳转至Login页面。</p>
<p>当然，如果你想在路由守卫中实现更多的业务逻辑判断，请自行丰富<code>PrivateRoute</code>逻辑。</p>
<h3 data-id="heading-53">10.2 设置开发环境的反向代理请求</h3>
<p>基于Vite架构的工程，设置反向代理就很容易了，无需安装额外的依赖包。</p>
<p>修改<code>vite.config.js</code>：</p>
<pre><code class="hljs language-php" lang="php">    ...（略）
    
    <span class="hljs-comment">// https://vitejs.dev/config/</span>
    export <span class="hljs-keyword">default</span> <span class="hljs-title function_ invoke__">defineConfig</span>({
        <span class="hljs-attr">server</span>: {
            // 监听所有IP地址
            <span class="hljs-attr">host</span>: <span class="hljs-string">'0.0.0.0'</span>,
            // 指定dev sever的端口号
            <span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>,
            // 自动打开浏览器运行以下页面
            <span class="hljs-attr">open</span>: <span class="hljs-string">'/'</span>,
+           // 设置反向代理
+           <span class="hljs-attr">proxy</span>: {
+               // 以下示例表示：请求URL中含有<span class="hljs-string">"/api"</span>，则反向代理到<span class="hljs-attr">http</span>://localhost
+               // 例如: <span class="hljs-attr">http</span>://<span class="hljs-attr">localhost</span>:<span class="hljs-number">3000</span>/api/login -&gt; <span class="hljs-attr">http</span>://localhost/api/login
+               <span class="hljs-string">'/api'</span>: {
+                   <span class="hljs-attr">target</span>: <span class="hljs-string">'http://localhost/'</span>,
+                   <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,
+               },
+           },
        },
        ...（略）
    })

</code></pre>
<p>这代码的意思就是，只要请求地址是以"/api"开头，那就反向代理到<code>http://localhost</code>域名下，跨域问题解决！大家可以根据实际需求进行修改。</p>
<blockquote>
<p>更详细的Vite反向代理设置，请参阅官方说明：</p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vite.dev%2Fconfig%2Fserver-options.html%23server-proxy" target="_blank" title="https://cn.vite.dev/config/server-options.html#server-proxy" ref="nofollow noopener noreferrer">cn.vite.dev/config/serv…</a></p>
</blockquote>
<p>一定记得要把mock.js注释掉，否则会先被mock.js拦截，到不了反向代理这一步。</p>
<h3 data-id="heading-54">10.3 使用ESLint9实时检查代码</h3>
<p>如果想在保存代码的时候，实时检查代码语法格式，可以在<code>vite.config.js</code>中配置ESlint9。</p>
<p>安装Vite官方推荐的插件<code>vite-plugin-checker</code>，执行：</p>
<pre><code class="hljs">npm install -D vite-plugin-checker
</code></pre>
<p>修改<code>vite.config.js</code>：</p>
<pre><code class="hljs language-php" lang="php">    import { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">'vite'</span>
    import react <span class="hljs-keyword">from</span> <span class="hljs-string">'@vitejs/plugin-react'</span>
    import path <span class="hljs-keyword">from</span> <span class="hljs-string">'path'</span>
+   import checker <span class="hljs-keyword">from</span> <span class="hljs-string">'vite-plugin-checker'</span>
    
    <span class="hljs-comment">// https://vite.dev/config/</span>
    export <span class="hljs-keyword">default</span> <span class="hljs-title function_ invoke__">defineConfig</span>({
        <span class="hljs-attr">server</span>: {
            ...（略）
        },
        <span class="hljs-attr">resolve</span>: {
            ...（略）
        },
-       <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_ invoke__">react</span>()],
+       <span class="hljs-attr">plugins</span>: [
+           <span class="hljs-title function_ invoke__">react</span>(),
+           <span class="hljs-title function_ invoke__">checker</span>({
+               <span class="hljs-attr">eslint</span>: {
+                   // <span class="hljs-attr">useFlatConfig</span>: <span class="hljs-literal">true</span> 表示使用扁平模式配置（eslint.config.js）
+                   // <span class="hljs-attr">useFlatConfig</span>: <span class="hljs-literal">false</span> 表示使用传统模式配置（如.eslintrc.json、.eslintrc.cjs）
+                   <span class="hljs-attr">useFlatConfig</span>: <span class="hljs-literal">true</span>,
+                   <span class="hljs-attr">lintCommand</span>: <span class="hljs-string">'eslint "./src/**/*.{js,jsx,ts,tsx}"'</span>,
+               },
+           }),
+       ],
    })
</code></pre>
<p>运行项目，页面效果如下：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/658e69ade89b485aa12716bf566534be~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=5GwZa9z6BgsiPKt76OzAm44X0Uc%3D" alt="10.3_使用ESLint 9实时检查代码.png" loading="lazy"></p>
<p>可以看到，ESlint9直接将语法告警显式在页面中了，相比之前只是在终端窗口中告警，这种显示方式更加督促开发者尽快修改，特别适合代码格式强迫症。</p>
<p>当然，有些ESlint语法校验过于严格，可以对校验规则进行修改。</p>
<p>修改<code>eslint.config.js</code>：</p>
<pre><code class="hljs language-arduino" lang="arduino">    ...（略）
    rules: {
        ...js.configs.recommended.rules,
        ...react.configs.recommended.rules,
        ...react.configs[<span class="hljs-string">'jsx-runtime'</span>].rules,
        ...reactHooks.configs.recommended.rules,
        <span class="hljs-string">'react/jsx-no-target-blank'</span>: <span class="hljs-string">'off'</span>,
        <span class="hljs-string">'react-refresh/only-export-components'</span>: [
            <span class="hljs-string">'warn'</span>,
            { allowConstantExport: <span class="hljs-literal">true</span> },
        ],
+       <span class="hljs-comment">// 设置未使用变量的检查规则</span>
+       <span class="hljs-string">'no-unused-vars'</span>: [
+           <span class="hljs-string">'warn'</span>,
+           { vars: <span class="hljs-string">'all'</span>, args: <span class="hljs-string">'none'</span>, ignoreRestSiblings: <span class="hljs-literal">false</span> },
+       ],
+       <span class="hljs-comment">// 取消对react prop传参的检查</span>
+       <span class="hljs-string">'react/prop-types'</span>: <span class="hljs-string">'off'</span>,
+       <span class="hljs-comment">// 取消对自定义HTML属性的检查 react/no-unknown-property</span>
+       <span class="hljs-string">'react/no-unknown-property'</span>: <span class="hljs-string">'off'</span>,
    },
    ...（略）
</code></pre>
<p>修改<code>eslint.config.js</code>配置，需要重启服务才能生效。经过以上规则调整，相应的警告已消除。</p>
<h3 data-id="heading-55">10.4 针对Windows系统的页面滚动条样式优化</h3>
<p>基于Antd可以快速搭建美观的UI，macOS系统默认的页面滚动条已经很完美了，不需要修改。但在Windows系统中，系统默认的滚动条样式显得有点“出戏”。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a3218f13ce4648ba9ed828c31503e311~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=w32hUs62SzBGAT6a50hm5CoWb8Y%3D" alt="10.4_针对Windows系统的页面滚动条样式优化-1.png" loading="lazy"></p>
<p>可以通过自定义样式，并与Antd的亮暗模式配合优化。</p>
<p>首先，要先判断当前是否为Windows系统。</p>
<p>新建<code>src/common/js/commonLib.jsx</code>：</p>
<pre><code class="hljs language-ini" lang="ini">/**
 * 判断系统类型
 */
export function detectOS() {
    let <span class="hljs-attr">sUserAgent</span> = navigator.userAgent
    const <span class="hljs-attr">platform</span> = navigator?.userAgentData?.platform || navigator?.platform || <span class="hljs-string">'unknown'</span>
    let <span class="hljs-attr">isWin</span> = platform === <span class="hljs-string">'Win32'</span> || platform === <span class="hljs-string">'Windows'</span>
    if (isWin) return 'windows'
    let <span class="hljs-attr">isMac</span> =
        <span class="hljs-attr">platform</span> === <span class="hljs-string">'macOS'</span> ||
        <span class="hljs-attr">platform</span> === <span class="hljs-string">'Mac68K'</span> ||
        <span class="hljs-attr">platform</span> === <span class="hljs-string">'MacPPC'</span> ||
        <span class="hljs-attr">platform</span> === <span class="hljs-string">'Macintosh'</span> ||
        <span class="hljs-attr">platform</span> === <span class="hljs-string">'MacIntel'</span>
    if (isMac) return 'mac'
    let <span class="hljs-attr">isUnix</span> = platform === <span class="hljs-string">'X11'</span> &amp;&amp; !isWin &amp;&amp; !isMac
    if (isUnix) return 'unix'
    var <span class="hljs-attr">isLinux</span> = String(platform).indexOf(<span class="hljs-string">'Linux'</span>) &gt; -<span class="hljs-number">1</span>

    var <span class="hljs-attr">bIsAndroid</span> = sUserAgent.toLowerCase().match(/android/i) === <span class="hljs-string">'android'</span>
    if (isLinux) {
        if (bIsAndroid) return 'android'
        else return 'linux'
    }
}
</code></pre>
<p>修改<code>src/main.jsx</code>：</p>
<pre><code class="hljs language-javascript" lang="javascript">    ...（略）
    <span class="hljs-comment">// mock.js模拟数据</span>
    <span class="hljs-keyword">import</span> <span class="hljs-string">'./mock'</span>
+   <span class="hljs-keyword">import</span> { detectOS } <span class="hljs-keyword">from</span> <span class="hljs-string">'@/common/js/commonLib'</span>
    
+   <span class="hljs-comment">// 判断操作系统</span>
+   <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">'os'</span>, <span class="hljs-title function_">detectOS</span>())
    
    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'root'</span>)).<span class="hljs-title function_">render</span>(
        ...（略）
    )
</code></pre>
<p>以上js代码，会在页面HTML的body标签上加上os属性。</p>
<p>在第8.6章节，还通过判断当前Antd的亮暗模式，在body上添加theme-mode属性。</p>
<p>因此最终结果为如下：</p>
<p>例如：在Windows系统中，亮色模式的结果为：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/48cd15fb22bf4678aeaa06f316633500~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=XJ%2BLlvxPpP1DEBQ3swej0Okz7H4%3D" alt="10.4_针对Windows系统的页面滚动条样式优化-2.png" loading="lazy"></p>
<p>补充滚动条样式，修改<code>src/common/styles/globals.styl</code>：</p>
<pre><code class="hljs language-ruby" lang="ruby">    html, body, <span class="hljs-comment">#root</span>
      <span class="hljs-symbol">height:</span> <span class="hljs-number">100</span>%
    .G-main
      <span class="hljs-symbol">padding:</span> 20px
    .G-fullpage
      <span class="hljs-symbol">display:</span> flex
      <span class="hljs-symbol">height:</span> <span class="hljs-number">100</span>%
    .G-layout-main
      <span class="hljs-symbol">flex:</span> <span class="hljs-number">1</span>
      <span class="hljs-symbol">overflow:</span> auto
    
+   <span class="hljs-symbol">:root</span>
+     <span class="hljs-regexp">//</span> 滚动条样式
+     --theme-scrollbar-color-<span class="hljs-symbol">track:</span> rgb(<span class="hljs-number">241</span>,<span class="hljs-number">241</span>,<span class="hljs-number">241</span>)
+     --theme-scrollbar-color-track-<span class="hljs-symbol">border:</span> rgb(<span class="hljs-number">230</span>,<span class="hljs-number">230</span>,<span class="hljs-number">230</span>)
+     --theme-scrollbar-color-<span class="hljs-symbol">thumb:</span> rgb(<span class="hljs-number">193</span>,<span class="hljs-number">193</span>,<span class="hljs-number">193</span>)
+     --theme-scrollbar-color-thumb-<span class="hljs-symbol">hover:</span> rgb(<span class="hljs-number">168</span>,<span class="hljs-number">168</span>,<span class="hljs-number">168</span>)
+     [theme-mode=dark]
+       --theme-scrollbar-color-<span class="hljs-symbol">track:</span> rgb(<span class="hljs-number">44</span>,<span class="hljs-number">44</span>,<span class="hljs-number">44</span>)
+       --theme-scrollbar-color-track-<span class="hljs-symbol">border:</span> rgb(<span class="hljs-number">56</span>,<span class="hljs-number">56</span>,<span class="hljs-number">56</span>)
+       --theme-scrollbar-color-<span class="hljs-symbol">thumb:</span> rgb(<span class="hljs-number">107</span>,<span class="hljs-number">107</span>,<span class="hljs-number">107</span>)
+       --theme-scrollbar-color-thumb-<span class="hljs-symbol">hover:</span> rgb(<span class="hljs-number">115</span>,<span class="hljs-number">115</span>,<span class="hljs-number">115</span>)
+   
+   <span class="hljs-regexp">/* 全局滚动条样式 */</span>
+   <span class="hljs-regexp">//</span> 滚动条厚度
+   body[os=windows] *<span class="hljs-symbol">:</span><span class="hljs-symbol">:-webkit-scrollbar</span>
+   	<span class="hljs-symbol">width:</span>14px
+   	<span class="hljs-symbol">height:</span>14px
+   <span class="hljs-regexp">//</span> 滚动条（水平+垂直）样式
+   body[os=windows] *<span class="hljs-symbol">:</span><span class="hljs-symbol">:-webkit-scrollbar-track</span>
+   	<span class="hljs-symbol">background:</span> var(--theme-scrollbar-color-track)
+   <span class="hljs-regexp">//</span> 滚动条（水平+垂直）hover样式
+   body[os=windows] *<span class="hljs-symbol">:</span><span class="hljs-symbol">:-webkit-scrollbar-track</span><span class="hljs-symbol">:hover</span>
+   	<span class="hljs-symbol">background:</span> var(--theme-scrollbar-color-track)
+   <span class="hljs-regexp">//</span> 滚动条（水平）样式
+   body[os=<span class="hljs-string">"windows"</span>] *<span class="hljs-symbol">:</span><span class="hljs-symbol">:-webkit-scrollbar-track</span><span class="hljs-symbol">:horizontal</span>
+     border-<span class="hljs-symbol">top:</span> solid 1px var(--theme-scrollbar-color-track-border)
+   <span class="hljs-regexp">//</span> 滚动条（垂直）样式
+   body[os=<span class="hljs-string">"windows"</span>] *<span class="hljs-symbol">:</span><span class="hljs-symbol">:-webkit-scrollbar-track</span><span class="hljs-symbol">:vertical</span> 
+     border-<span class="hljs-symbol">left:</span> solid 1px var(--theme-scrollbar-color-track-border)
+   <span class="hljs-regexp">//</span> 滚动滑块（水平+垂直）样式
+   body[os=windows] *<span class="hljs-symbol">:</span><span class="hljs-symbol">:-webkit-scrollbar-thumb</span>
+     <span class="hljs-symbol">background:</span> var(--theme-scrollbar-color-thumb)
+     border-<span class="hljs-symbol">radius:</span> 14px
+     <span class="hljs-symbol">border:</span> 3px solid transparent
+     <span class="hljs-regexp">//</span> 解决滑块边框遮挡滚动条背景边框
+     background-<span class="hljs-symbol">clip:</span> padding-box
+   body[os=windows] *<span class="hljs-symbol">:</span><span class="hljs-symbol">:-webkit-scrollbar-thumb</span><span class="hljs-symbol">:hover</span>
+     <span class="hljs-symbol">background:</span> var(--theme-scrollbar-color-thumb-hover)
+     <span class="hljs-regexp">//</span> 解决滑块边框遮挡滚动条背景边框
+     background-<span class="hljs-symbol">clip:</span> padding-box
+   <span class="hljs-regexp">//</span> 滚动滑块（水平）样式
+   body[os=windows] *<span class="hljs-symbol">:</span><span class="hljs-symbol">:-webkit-scrollbar-thumb</span><span class="hljs-symbol">:horizontal</span>
+     <span class="hljs-regexp">//</span> 解决滑块与背景上下边距不统一的问题
+     border-top-<span class="hljs-symbol">width:</span> 4px
+   <span class="hljs-regexp">//</span> 滚动滑块（垂直）样式
+   body[os=windows] *<span class="hljs-symbol">:</span><span class="hljs-symbol">:-webkit-scrollbar-thumb</span><span class="hljs-symbol">:vertical</span>
+     <span class="hljs-regexp">//</span> 解决滑块与背景左右边距不统一的问题
+     border-left-<span class="hljs-symbol">width:</span> 4px
+   <span class="hljs-regexp">//</span> 滚动条首尾的按钮样式
+   body[os=windows] *<span class="hljs-symbol">:</span><span class="hljs-symbol">:-webkit-scrollbar-button</span>
+   	<span class="hljs-symbol">display:</span>none
+   <span class="hljs-regexp">//</span> 水平和垂直滚动条在页面右下角交叉处产生的空白区域样式
+   body[os=windows] *<span class="hljs-symbol">:</span><span class="hljs-symbol">:-webkit-scrollbar-corner</span>
+     <span class="hljs-symbol">background:</span> var(--theme-scrollbar-color-track)
</code></pre>
<p>最终呈现的滚动条视觉效果如图所示，基本与macOS的原生滚动条一致。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f477e9321fc44f4790133e36b3254fb3~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=cvUa26mKLRdn8d5ZXrlzYa6VI6w%3D" alt="10.4_针对Windows系统的页面滚动条样式优化-3.png" loading="lazy"></p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/4fbd9e6bec6b46c68f44891613f566b8~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTXJf5YWU5a2Q5YWI55Sf:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742798971&amp;x-signature=efsM%2FVJul3%2B3Sb53cyTs106Am%2FQ%3D" alt="10.4_针对Windows系统的页面滚动条样式优化-4.png" loading="lazy"></p>
<h2 data-id="heading-56">11 build项目</h2>
<p>在build前还可以做一些配置，以下简述几个常用的配置。</p>
<h3 data-id="heading-57">11.1 设置静态资源引用路径</h3>
<p>默认情况下，build出来的项目，静态资源引用的一级路径都是"/"，建议修改成相对路径"./"，这样在部署上线的时候不需要太关注访问目录的问题。</p>
<p>修改<code>vite.config.js</code>：</p>
<pre><code class="hljs language-arduino" lang="arduino">    ...（略）
    
    <span class="hljs-comment">// https://vitejs.dev/config/</span>
    <span class="hljs-function"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title">defineConfig</span><span class="hljs-params">({
+       <span class="hljs-comment">// 静态资源引用路径，默认为"/"</span>
+       base: <span class="hljs-string">'./'</span>,
        ...（略）
    })</span>
</span></code></pre>
<h3 data-id="heading-58">11.2 设置build目录名称及静态资源存放目录（选读）</h3>
<p>默认情况下，build出来的项目，将静态文件（js、图片等）都存放在assets目录下。也可以通过配置，改为其他名称（例如：static）。</p>
<p>同样，Vite默认build生成的项目目录名为dist，也可以改为其他名称（例如：build）。</p>
<p>修改vite.config.js：</p>
<pre><code class="hljs language-php" lang="php">    ...（略）
    
    <span class="hljs-comment">// https://vitejs.dev/config/</span>
    export <span class="hljs-keyword">default</span> <span class="hljs-title function_ invoke__">defineConfig</span>({
+       <span class="hljs-attr">build</span>: {
+           // build目录名称，默认为<span class="hljs-string">"dist"</span>
+           <span class="hljs-attr">outDir</span>: <span class="hljs-string">'build'</span>,
+           // 静态资源存放目录名称，默认为<span class="hljs-string">"assets"</span>
+           <span class="hljs-attr">assetsDir</span>: <span class="hljs-string">'static'</span>,
+       },
        ...（略）
    })
</code></pre>
<h3 data-id="heading-59">11.3 执行build项目</h3>
<p>执行以下命令即可build项目：</p>
<pre><code class="hljs language-arduino" lang="arduino">npm run build
</code></pre>
<p>build生成的项目文件位于项目根目录的dist目录中。</p>
<h2 data-id="heading-60">12 项目Git源码</h2>
<p>本项目已上传至Gitee和GitHub，方便各位下载。</p>
<blockquote>
<p>Gitee:
<a href="https://link.juejin.cn?target=https%3A%2F%2Fgitee.com%2Fbetaq%2Fvite-react-app-2025spring" target="_blank" title="https://gitee.com/betaq/vite-react-app-2025spring" ref="nofollow noopener noreferrer">gitee.com/betaq/vite-…</a></p>
</blockquote>
<blockquote>
<p>GitHub:</p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FYuezi32%2Fvite-react-app-2025spring" target="_blank" title="https://github.com/Yuezi32/vite-react-app-2025spring" ref="nofollow noopener noreferrer">github.com/Yuezi32/vit…</a></p>
</blockquote>
<h2 data-id="heading-61">结束语</h2>
<p>以上就是本次基于Vite的React全家桶教程的全部内容。篇幅较长，确实是花了很长时间精心整理、反复验证、句句斟酌的完整教程，希望能够帮助到你。更多精彩详实的开发教程，欢迎阅读我的微信公众号<code>卧梅又闻花</code>。</p>
<p>原文：<a href="https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F1n_AGmKpSwYsMkTpgW6Bsg" target="_blank" title="https://mp.weixin.qq.com/s/1n_AGmKpSwYsMkTpgW6Bsg" ref="nofollow noopener noreferrer">《2025新春版：轻松搞定Vite6+React19全家桶》</a></p>
<h2 data-id="heading-62">更多精品阅读</h2>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FfiYFT4ALxZWYIcquQpzI5w" target="_blank" title="https://mp.weixin.qq.com/s/fiYFT4ALxZWYIcquQpzI5w" ref="nofollow noopener noreferrer">《2024金秋版：Django5开发与部署保姆级零基础教程（上篇）》</a></p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fsm2dU5LwjHwVTSF8DcHUFA" target="_blank" title="https://mp.weixin.qq.com/s/sm2dU5LwjHwVTSF8DcHUFA" ref="nofollow noopener noreferrer">《2024金秋版：Django5开发与部署保姆级零基础教程（下篇）》</a></p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F2jVWohWr5vqXHrZhaM1nAQ" target="_blank" title="https://mp.weixin.qq.com/s/2jVWohWr5vqXHrZhaM1nAQ" ref="nofollow noopener noreferrer">《2024新春版：零基础Docker全栈开发部署速通攻略》</a></p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F7EMjVSZAEyz6dmrO5Vs8YA" target="_blank" title="https://mp.weixin.qq.com/s/7EMjVSZAEyz6dmrO5Vs8YA" ref="nofollow noopener noreferrer">《2023金秋版：基于electron-vite构建Vue桌面客户端》</a></p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FkUGPx5Uo2l54RRTCFY1OxA" target="_blank" title="https://mp.weixin.qq.com/s/kUGPx5Uo2l54RRTCFY1OxA" ref="nofollow noopener noreferrer">《2023金秋版：基于electron-vite构建React桌面客户端》</a></p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FsQI1gvMFu8W2SrWNm0WvYw" target="_blank" title="https://mp.weixin.qq.com/s/sQI1gvMFu8W2SrWNm0WvYw" ref="nofollow noopener noreferrer">《2023金秋版：基于Vite4+Vue3的Chrome插件开发教程》</a></p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fl4G399Br4-AlwssshydWLA" target="_blank" title="https://mp.weixin.qq.com/s/l4G399Br4-AlwssshydWLA" ref="nofollow noopener noreferrer">《2023金秋版：基于Vite4+React的Chrome插件开发教程》</a></p></div></div>