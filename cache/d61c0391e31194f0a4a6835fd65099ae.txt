
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/henjay724/p/18849909" title="发布于 2025-04-27 17:06">
    <span role="heading" aria-level="2">痞子衡嵌入式：在含多个i.MXRT的主从系统中共享一颗Flash启动的方法与实践(上篇)</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<hr>
<p>　　大家好，我是痞子衡，是正经搞技术的痞子。今天痞子衡给大家介绍的是<strong>多个i.MXRT共享一颗Flash启动的方法</strong>。</p>
<p>　　有些特殊的客户应用会采用多颗 i.MXRT 芯片设计一主多从的硬件架构（目的不一，或仿多核 MCU 系统、或拓展 GPIO 数量），因为 i.MXRT 片内无非易失性存储器，这时候为整个系统配置合适的启动设备保证每个 i.MXRT 都能加载程序正常启动是头等大事。</p>
<p>　　因为 i.MXRT 支持的启动设备类型众多，此处我们暂讨论连接在 FlexSPI 外设上的 NOR Flash 作为启动设备。熟悉 i.MXRT 的 朋友都知道，其片内 ROM 功能强大，这种情况下系统可采用的 Flash 连接启动方式并不单一，今天痞子衡就和大家讨论下这个话题并且给大家介绍一种创新方法：</p>
<blockquote>
<ul>
<li>Note：本篇是上篇，主要介绍理论方法，下篇为具体实践。</li>
</ul>
</blockquote>
<h3 id="一多imxrt系统启动的传统设计">一、多i.MXRT系统启动的传统设计</h3>
<h4 id="11-每个imxrt独享一个flash">1.1 每个i.MXRT独享一个Flash</h4>
<p>　　首先介绍得是大家直觉里第一反应的方案，那就是每个 i.MXRT 都有专属 Flash，互不干扰，这种方案没啥好说的，就是简单粗暴，但是它也有明显的优缺点：</p>
<pre><code class="language-text">- 优点：
1. 系统启动快，多 i.MXRT 同时启动
2. 每个 i.MXRT 均可以 XiP 启动
3. 每个 i.MXRT 单独更新专属 Flash（可同时进行，OTA 加速且程序版本管理简单）
- 缺点：
1. 硬件设计稍复杂，PCB 面积大，Flash 数量多导致成本高
2. 程序烧写流程增多（需烧写多颗 Flash），量产不便
</code></pre>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/cnblogs/i.MXRT_ShareFlashBoot_method1.png" alt="" loading="lazy"></p>
<h4 id="12-仅主imxrt连接一个flash">1.2 仅主i.MXRT连接一个Flash</h4>
<p>　　当主从系统里从 i.MXRT 数量多到一定程度，上述方法里的缺点就被无限放大了，Flash 数量扎眼，量产时间过长，这时候项目经理一定会跳出来让你降成本（Flash成本，产线时间成本），于是你就开始想办法减少 Flash 数量。</p>
<p>　　此时我们可以借助 i.MXRT 的 ROM ISP 功能，由主 i.MXRT 先启动运行 Flash 里的 bootloader ，然后由 bootloader 来读取 Flash 里的应用程序并通过 ISP 接口直接加载到从 i.MXRT 的内部 SRAM 里运行（多个从 i.MXRT 可按序串行下载也可并行下载，从 bootloader 设计角度来说一般是按序串行下载），当然这种方式同样有明显的优缺点：</p>
<pre><code class="language-text">- 优点：
1. 简化了硬件设计，PCB 面积减小，仅需一颗 Flash
2. 简化了程序烧写流程（仅需烧写一颗 Flash），方便量产
- 中性：
1. 仅有主 i.MXRT 可以 XiP 启动，从 i.MXRT 都只能 Non-XiP 启动
2. 主 i.MXRT 统一负责 OTA 升级任务（loading 较大）
- 缺点：
1. 需要额外设计符合 ROM ISP 协议的 bootloader 让主 i.MXRT 执行去加载从 i.MXRT 程序
2. 整个系统启动时间变长（如果从 i.MXRT 程序由 bootloader 按序串行下载，UART 接口速度慢）
3. 如果从 i.MXRT 程序不同，Flash 里会分区域存储不同程序，带来复杂的 OTA 版本管理问题
</code></pre>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/cnblogs/i.MXRT_ShareFlashBoot_method2.png" alt="" loading="lazy"></p>
<h3 id="二一种共享flash启动的创新方法">二、一种共享Flash启动的创新方法</h3>
<p>　　上述改进方法达到了降硬件成本的目的，但是也带来了一个无法避免的系统整体启动时间过长的问题（bootloader 实现 ROM ISP 功能如果选择 USB 接口，需要额外加 Hub，还是存在硬件成本问题；如果选择 UART 接口，速度较低，程序加载时间无法忍受）。</p>
<p>　　有没有更好的方法？痞子衡既然这么问了，那就一定是有！我们可以创新地把一颗 Flash 同时连到多个 i.MXRT 上，主 i.MXRT 能够控制所有从 i.MXRT 的 POR_B 电平。系统上电，主 i.MXRT 先 Non-XIP 启动，然后主 i.MXRT 逐一释放从 i.MXRT 的 POR_B 让它们分时占用 Flash 去 Non-XIP 启动，现在我们再来分析下它的优缺点：</p>
<pre><code class="language-text">- 优点：
1. 简化了硬件设计，PCB 面积减小，仅需一颗 Flash
2. 简化了程序烧写流程（仅需烧写一颗 Flash），方便量产
- 中性：
1. bootloader 可有可无，即使有也非常简单，无需承担程序加载任务
2. 整个系统启动时间可控（分时复用 Flash 启动，FlexSPI 接口加载速度较高）
3. 系统里仅有一个 i.MXRT（可主可从）可以 XiP 启动，其余 i.MXRT 都只能 Non-XiP 启动
4. 每个 i.MXRT 均可承担 OTA 升级任务，具有一定灵活性
- 缺点：
1. 如果从 i.MXRT 程序不同，Flash 里会分区域存储不同程序，带来复杂的 OTA 版本管理问题
</code></pre>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/cnblogs/i.MXRT_ShareFlashBoot_method3.png" alt="" loading="lazy"></p>
<p>　　至此，多个i.MXRT共享一颗Flash启动的方法痞子衡便介绍完毕了，掌声在哪里~~~</p>
<h3 id="欢迎订阅">欢迎订阅</h3>
<p>文章会同时发布到我的 <a href="https://www.cnblogs.com/henjay724/" target="_blank">博客园</a>、<a href="https://blog.csdn.net/henjay724" target="_blank" rel="noopener nofollow">CSDN</a>、<a href="http://weixin.sogou.com/weixin?type=1&amp;query=%E7%97%9E%E5%AD%90%E8%A1%A1%E5%B5%8C%E5%85%A5%E5%BC%8F" target="_blank" rel="noopener nofollow">微信公众号</a>、<a href="https://www.zhihu.com/people/henjay724" target="_blank" rel="noopener nofollow">知乎</a>、<a href="https://www.eefocus.com/user/3876937/article/" target="_blank" rel="noopener nofollow">与非网</a>、<a href="https://blog.chinaaet.com/henjay724" target="_blank" rel="noopener nofollow">电子技术应用AET</a>、<a href="https://www.dianyuan.com/people/912268" target="_blank" rel="noopener nofollow">电子星球</a>、<a href="https://blog.51cto.com/henjay724" target="_blank" rel="noopener nofollow">51CTO</a> 平台上。</p>
<p>微信搜索"<strong>痞子衡嵌入式</strong>"或者扫描下面二维码，就可以在手机上第一时间看了哦。</p>
<p><img src="https://raw.githubusercontent.com/JayHeng/pzhmcu-picture/master/github/pzhMcu_qrcode_258x258.jpg" alt="" loading="lazy"></p>

</div>
<div id="MySignature" role="contentinfo">
    <div class="autograph"> 
  <p style="font-family: 楷体; font-size: 15px">&nbsp;&nbsp;最后欢迎关注痞子衡个人微信公众号【痞子衡嵌入式】，一个专注嵌入式技术的公众号，跟着痞子衡一起玩转嵌入式。</p>

  <img style="float: left" src="https://img2022.cnblogs.com/blog/623659/202211/623659-20221116165755872-427238307.jpg" alt="痞子衡嵌入式-微信二维码" class="img_avatar">

  <img style="float: right" src="http://henjay724.com/image/cnblogs/baogeMcu_payment_wechat_150x150.png" alt="痞子衡嵌入式-微信收款二维码" class="img_avatar">

  <img style="float: right" src="http://henjay724.com/image/cnblogs/baogeMcu_payment_alipay_150x150.jpg" alt="痞子衡嵌入式-支付宝收款二维码" class="img_avatar">

<br>
  <p>&nbsp;&nbsp;衡杰(痞子衡)，目前就职于某全球顶级半导体原厂MCU系统部门，担任高级嵌入式系统应用工程师。</p>

  <p>&nbsp;&nbsp;专栏内所有文章的转载请注明出处：<a href="http://www.cnblogs.com/henjay724/" target="_blank">http://www.cnblogs.com/henjay724/</a></p>

  <p>&nbsp;&nbsp;与痞子衡进一步交流或咨询业务合作请发邮件至 <a href="hengjie1989@foxmail.com" target="_blank">hengjie1989@foxmail.com</a></p>

  <p>&nbsp;&nbsp;可以关注痞子衡的Github主页 <a href="https://github.com/JayHeng" target="_blank">https://github.com/JayHeng</a>，有很多好玩的嵌入式项目。</p>

  <p><font color="yellow">&nbsp;&nbsp;关于专栏文章有任何疑问请直接在博客下面留言，痞子衡会及时回复免费(划重点)答疑。</font></p>

  <p><font color="red">&nbsp;&nbsp;痞子衡邮箱已被私信挤爆，技术问题不推荐私信，坚持私信请先扫码付款(5元起步)再发。</font></p>
<br>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.4650828281377315" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-27 17:06">2025-04-27 17:06</span>&nbsp;
<a href="https://www.cnblogs.com/henjay724">痞子衡</a>&nbsp;
阅读(<span id="post_view_count">49</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18849909);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18849909', targetLink: 'https://www.cnblogs.com/henjay724/p/18849909', title: '痞子衡嵌入式：在含多个i.MXRT的主从系统中共享一颗Flash启动的方法与实践(上篇)' })">举报</a>
</div>
        