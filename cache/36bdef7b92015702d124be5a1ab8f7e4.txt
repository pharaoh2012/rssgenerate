
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/minuhy/p/18816568" title="发布于 2025-04-09 14:29">
    <span role="heading" aria-level="2">【Linux】编译用于exynos4412（ARM）的Linux-3.14内核</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="linux编译用于exynos4412arm的linux-314内核">【Linux】编译用于exynos4412（ARM）的Linux-3.14内核</h1>
<h2 id="零准备">零、准备</h2>
<h3 id="1下载">1、下载</h3>
<p><em>Linux-3.14内核源代码</em></p>
<ul>
<li>下载页面：<a href="https://www.kernel.org/pub/linux/kernel/v3.x/" target="_blank" rel="noopener nofollow">https://www.kernel.org/pub/linux/kernel/v3.x/</a></li>
<li>下载链接：<a href="https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.14.tar.xz" target="_blank" rel="noopener nofollow">https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.14.tar.xz</a></li>
</ul>
<p>下载后得到以下文件：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel$ ls -l
总计 76568
-rw-rw-r-- 1 yu yu 78399152  4月  9 01:21 linux-3.14.tar.xz
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250409141514310-28648609.png" alt="image" loading="lazy"></p>
<h3 id="2解压">2、解压</h3>
<pre><code class="language-bash">yu@Yubuntu:~/kernel$ tar -vxf linux-3.14.tar.xz
</code></pre>
<p>解压后得到如下文件：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel$ ls -l
总计 76572
drwxrwxr-x 23 yu yu     4096  3月 31  2014 linux-3.14
-rw-rw-r--  1 yu yu 78399152  4月  9 01:21 linux-3.14.tar.xz
</code></pre>
<h2 id="壹编译">壹、编译</h2>
<h3 id="1设置cpu架构和交叉编译器">1、设置CPU架构和交叉编译器</h3>
<p>设置CPU架构和交叉编译器的方法有几种，临时设置、通过环境变量设置和修改<code>Makefile</code>设置。基于实际情况，在本次编译中，我希望我把我修改好的内核发给别人同样有效，而且我只针对一种CPU指令集来配置的，所以我选择修改<code>Makefile</code>。</p>
<p>使用<code>vi</code>编辑<code>Makefile</code>：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel$ cd linux-3.14/
  
yu@Yubuntu:~/kernel/linux-3.14$ vi Makefile
</code></pre>
<p>把198、199行的</p>
<pre><code class="language-makefile">ARCH        ?= $(SUBARCH)
CROSS_COMPILE   ?= $(CONFIG_CROSS_COMPILE:"%"=%)
</code></pre>
<p>改为</p>
<pre><code class="language-makefile">ARCH        ?= arm
CROSS_COMPILE   ?= $(CONFIG_CROSS_COMPILE:"%"=%)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250409141435659-1760989317.png" alt="image" loading="lazy"><br>
保存并退出~</p>
<p><em>注：这里关于交叉编译器的安装和配置就不再介绍了。</em></p>
<h3 id="2设置处理器">2、设置处理器</h3>
<p>使用如下命令设置处理器：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ make exynos_defconfig
</code></pre>
<p>难搞，报警告了，具体情况如下：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250409141547245-1525424588.png" alt="image" loading="lazy"></p>
<pre><code class="language-bash">In file included from scripts/kconfig/zconf.tab.c:2537:
scripts/kconfig/menu.c: In function ‘get_symbol_str’:
scripts/kconfig/menu.c:587:46: warning: ‘jump’ may be used uninitialized in this function [-Wmaybe-uninitialized]
  587 |                                 jump-&gt;offset = strlen(r-&gt;s);
      |                                 ~~~~~~~~~~~~~^~~~~~~~~~~~~~
scripts/kconfig/menu.c:548:26: note: ‘jump’ was declared here
  548 |         struct jump_key *jump;
      |                          ^~~~
</code></pre>
<p>没关系，Linux论坛上已有解决方案了：<br>
<a href="https://patchwork.kernel.org/project/linux-kbuild/patch/1415098919-21836-1-git-send-email-syntheticpp@gmx.net/" target="_blank" rel="noopener nofollow">https://patchwork.kernel.org/project/linux-kbuild/patch/1415098919-21836-1-git-send-email-syntheticpp@gmx.net/</a><br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250409141636719-556418467.png" alt="image" loading="lazy"></p>
<p>我们按照这个页面上的来修改我们的代码：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ vi scripts/kconfig/menu.c
</code></pre>
<p>把548行的<code>struct jump_key *jump;</code>改为<code>struct jump_key *jump = NULL;</code>：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250409141900916-1414250633.png" alt="image" loading="lazy"></p>
<p>把586行的<code>if (head &amp;&amp; location &amp;&amp; menu == location)</code>改为<code>if (jump &amp;&amp; menu == location)</code>（由于我上一个修改我是注释掉原有行，再在下面添加的新行，所以这边我的第二个位置显示的是587行了）：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250409141726208-149865725.png" alt="image" loading="lazy"><br>
保存退出~</p>
<p>重新使用如下命令设置处理器：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ make exynos_defconfig
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250409141750748-763844651.png" alt="image" loading="lazy"></p>
<p>搞定！</p>
<h3 id="3配置linux系统内核">3、配置Linux系统内核</h3>
<p>Linux系统内核的配置文件在上一个步骤中，被我们写到了<code>.config</code>文件中了，感兴趣的同学可以打开看看，很复杂，新手不建议修改。对于大多数情况，我们可以使用Linux内核源码这边给我们提供的配置工具来配置，配置工具在<code>README</code>中有介绍，大致有这么些：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250409141940442-256185762.png" alt="image" loading="lazy"></p>
<p>其中，我们比较常用的是<code>make menuconfig</code>，对于远程使用SSH连接的同学友好些。</p>
<p>但是它需要一些依赖，可以使用如下命令安装对应的依赖：</p>
<pre><code class="language-bash">sudo apt-get install libncurses5-dev
</code></pre>
<p><code>libncurses5-dev</code>是一个基于文本的GUI开发库，用于支持在C等编程语言中开发基于文本终端的交互式应用程序，提供了屏幕绘制、键盘输入处理等功能。</p>
<p>另外，<code>make menuconfig</code>对屏幕大小有一定要求，<em>把当前命令窗口拉伸到最大后</em>执行如下命令开始配置：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ make menuconfig
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250409142028294-785495026.png" alt="image" loading="lazy"><br>
界面上方的文本即是使用帮助，同学们可以自己阅读一下，本文不介绍如何配置Linux内核，同学们根据自己的需要在此界面修改好Linux内核配置后再往下。</p>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250409142045247-725449526.png" alt="image" loading="lazy"><br>
配置并保存成功~</p>
<h3 id="4编译linux系统内核">4、编译Linux系统内核</h3>
<p>因为是针对的exynos4412编译的Linux内核，而exynos4412使用的引导程序是U-Boot，所以把编译好的Linux内核文件封装成uImage格式是比较好的选择。<br>
uImage是一种经过封装的内核镜像格式，它在嵌入式系统中较为常用，特别是使用U-Boot作为引导加载器的系统。这种格式在普通的内核镜像基础上添加了一个头部信息，该头部信息包含了镜像的加载地址、入口地址、镜像大小等内容，便于U-Boot识别和加载内核。<br>
命令<code>make uImage</code>的意思是让<code>make</code>工具依据<code>Makefile</code>里的规则来构建uImage格式的内核镜像。</p>
<p>那么，我们执行如下代码开始编译Linux系统内核：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ make uImage
</code></pre>
<p>难搞，刚开始编译就报错了：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250409142137697-1397175571.png" alt="image" loading="lazy"></p>
<pre><code class="language-bash">/usr/bin/ld: scripts/dtc/dtc-parser.tab.o:(.bss+0x50): multiple definition of `yylloc'; scripts/dtc/dtc-lexer.lex.o:(.bss+0x0): first defined here
collect2: error: ld returned 1 exit status
make[2]: *** [scripts/Makefile.host:127：scripts/dtc/dtc] 错误 1
make[1]: *** [scripts/Makefile.build:455：scripts/dtc] 错误 2
make: *** [Makefile:527：scripts] 错误 2
</code></pre>
<p>经查询，是因为GCC版本太高了导致的，我们可以稍作修改，使用如下命令编辑<code>dtc-lexer.lex.c_shipped</code>文件：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ vi scripts/dtc/dtc-lexer.lex.c_shipped
</code></pre>
<p>在640行，在<code>YYLTYPE yylloc;</code>前面加上<code>extern</code>，即把<code>YYLTYPE yylloc;</code>改为<code>extern YYLTYPE yylloc;</code>：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250409142152973-1761066531.png" alt="image" loading="lazy"><br>
保存并退出。</p>
<p>重新编译：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ make uImage
</code></pre>
<p>好，这次编译了大概3分钟，现在又又出错了：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250409142238259-488240831.png" alt="image" loading="lazy"></p>
<pre><code class="language-bash">"mkimage" command not found - U-Boot images will not be built
make[1]: *** [/home/yu/kernel/linux-3.14/arch/arm/boot/Makefile:80：arch/arm/boot/uImage] 错误 1
make: *** [/home/yu/kernel/linux-3.14/arch/arm/Makefile:305：uImage] 错误 2
</code></pre>
<p>本次出错的原因在于找不到<code>mkimage</code>命令，我们需要安装U-Boot工具（<code>u-boot-tools</code>），这个是用于U-Boot引导加载程序的辅助工具集，可帮助我们进行U-Boot的配置、编译、调试以及映像文件处理等工作。</p>
<p>我们使用如下命令安装U-Boot工具：</p>
<pre><code class="language-bash">sudo apt-get install u-boot-tools
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250409142308784-2029766550.png" alt="image" loading="lazy"></p>
<p>好，继续编译：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ make uImage
</code></pre>
<p>经过大约4分钟，编译完成~<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250409142348530-966122178.png" alt="image" loading="lazy"></p>
<p>编译好的文件在<code>arch/arm/boot</code>目录下：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250409142420818-487044918.png" alt="image" loading="lazy"></p>
<h3 id="5编译内核模块">5、编译内核模块</h3>
<p>在使用<code>make menuconfig</code>配置Linux内核时，有的功能被设置为模块（<code>M</code>），模块不会在上一个步骤被编译进内核，我们需要单独编译，使用如下命令开始编译内核模块：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ make modules
</code></pre>
<p>编译内核模块成功：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250409142452850-1150265674.png" alt="image" loading="lazy"><br>
其中，以<code>.ko</code>结尾的即为内核模块（Kernel Object）文件。<br>
我们将来在Linux中可以使用<code>insmod</code>或<code>modprobe</code>命令来加载<code>.ko</code>内核模块，使用<code>rmmod </code>命令卸载内核模块。</p>
<h3 id="6查看编译耗时">6、查看编译耗时</h3>
<p>使用如下命令可以查看编译耗时：</p>
<pre><code class="language-bash">yu@Yubuntu:~/kernel/linux-3.14$ $(which time) -v make uImage
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250409142519141-782329568.png" alt="image" loading="lazy"></p>
<h2 id="贰参考资料">贰、参考资料</h2>
<ol>
<li><a href="https://patchwork.kernel.org/project/linux-kbuild/patch/1415098919-21836-1-git-send-email-syntheticpp@gmx.net/" target="_blank" rel="noopener nofollow">https://patchwork.kernel.org/project/linux-kbuild/patch/1415098919-21836-1-git-send-email-syntheticpp@gmx.net/</a></li>
<li><a href="https://www.kernel.org/pub/linux/kernel/v3.x/" target="_blank" rel="noopener nofollow">https://www.kernel.org/pub/linux/kernel/v3.x/</a></li>
<li><a href="https://www.kernel.org/" target="_blank" rel="noopener nofollow">https://www.kernel.org/</a></li>
<li><a href="https://blog.csdn.net/zhoukaiqili/article/details/126191871" target="_blank" rel="noopener nofollow">https://blog.csdn.net/zhoukaiqili/article/details/126191871</a></li>
<li><a href="https://blog.csdn.net/eibo51/article/details/51901480" target="_blank" rel="noopener nofollow">https://blog.csdn.net/eibo51/article/details/51901480</a></li>
</ol>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.9107788654930555" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-09 14:29">2025-04-09 14:29</span>&nbsp;
<a href="https://www.cnblogs.com/minuhy">清风来叙</a>&nbsp;
阅读(<span id="post_view_count">85</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18816568" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18816568);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18816568', targetLink: 'https://www.cnblogs.com/minuhy/p/18816568', title: '【Linux】编译用于exynos4412（ARM）的Linux-3.14内核' })">举报</a>
</div>
        