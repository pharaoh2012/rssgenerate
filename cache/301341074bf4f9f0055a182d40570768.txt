
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/sharpeye/p/18741943" title="发布于 2025-02-27 22:50">
    <span role="heading" aria-level="2">批处理脚本(.bat)实现实时监测文件夹并执行命令 [假设有新文件则拷贝到远程文件夹内]</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>想到一个情景。程序实时监测文件夹情况，如果有新文件进入，分析其文件名，然后如果满足预设条件，则做相应操作。比如扫描仪扫描了文件，会将新文件保存进特定文件夹内，可以使用该程序来做处理。</p>
<p>&nbsp;</p>
<p>在Windows端最直接的就是用.bat批处理，当然使用Powershell或者C#、python语言平台更轻松专业，这里使用 .bat 实现。笔者喜欢<span style="color: rgba(0, 0, 0, 1)"><strong><span style="font-size: 16px">黑</span></strong><strong><span style="font-size: 16px">窗口下，看着字符串一行行打印出来的感觉，啊哈哈~~~</span></strong></span></p>
<p>&nbsp;</p>
<p><span style="font-size: 16px"><strong>【设计需求】</strong></span></p>
<div class="fa81">
<div class="fbb737a4"><span style="color: rgba(0, 0, 0, 1); font-size: 14px"><strong>使用cmd实现：检测文件夹(D:\projects\cmd\targetdir) 内是否有新文件出现，如果有，查看该文件的文件名，如果是以A字符打头的，那么将该文件发送给远程文件夹（\\DESKTOP-JL8BQNM\temp4share） 程序不断地去检测，注意生成日志方便调式和日后维护。</strong></span></div>
</div>
<p>&nbsp;</p>
<p><span style="font-size: 16px"><strong>【设计思路】</strong></span></p>
<p>1.&nbsp; 要想监测文件夹内是否有新文件，需要对比当前的文件列表和之前的文件列表，如果有出入，则有增添删减文件</p>
<p>2.&nbsp; &nbsp;把新文件名称记录下来，解析字符并做比较，得出满足条件的文件对象。</p>
<p>3.&nbsp; 将满足条件的文件拷贝到远程文件夹中。其中远程通讯需要双方都开启共享。</p>
<p>4.&nbsp; 每个关键操作需要概括为描述性字符，写入日志文件中。</p>
<p>5.&nbsp; 程序需要有死循环机制，让其不断监测，Ctrl+C 可退出。</p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 16px">【设计脚本】</span></strong></p>
<p>首先必要的变量先定义好：</p>
<pre class="language-csharp highlighter-hljs"><code>set "script_dir=%~dp0"    %定义当前脚本目录%
set "target_dir=D:\projects\cmd\targetdir"    %定义监测的目录地址%
set "remote_dir=\\DESKTOP-JL8BQNM\temp4share"    %定义远程的目录地址%
set "log_file=%script_dir%FileMonitor.log"    %日志文件存放地址%
set "check_interval=5"    %重新执行的间隔时间 5秒%</code></pre>
<p>之后编写cmd界面，做必要解释：</p>
<pre class="language-csharp highlighter-hljs"><code>echo ================================================
echo              █ 文件监控传输工具 █  
echo ================================================
echo   [版本特性]
echo   √ 严格匹配大写A开头文件 √ 特殊字符支持
echo   √ 实时传输状态提示   √ 详细日志记录
echo   监控目录    : "%target_dir%"
echo   远程目录    : "%remote_dir%"
echo   日志文件    : "%log_file%"
echo   检测间隔    : 每%check_interval%秒
echo ================================================
echo   [注意] 大文件传输时会暂停监控，保持窗口开启
echo   按 Ctrl+C 安全终止程序
echo ================================================</code></pre>
<p>&nbsp;然后，编写核心算法：</p>
<pre class="language-csharp highlighter-hljs"><code>:: 生成初始文件快照
dir /b "%target_dir%" &gt; "%script_dir%prevfiles.txt"</code></pre>
<p>&nbsp;再次生成文件快照，和之前的作对比：</p>
<pre class="language-csharp highlighter-hljs"><code>dir /b "%target_dir%" &gt; "%script_dir%currentfiles.txt"
findstr /v /g:"%script_dir%prevfiles.txt" "%script_dir%currentfiles.txt" &gt; "%script_dir%newfiles.txt"</code></pre>
<p>如果有新增文件，做对应处理：</p>
<pre class="language-csharp highlighter-hljs"><code>for /f "usebackq tokens=*" %%f in ("%script_dir%newfiles.txt") do (
    call :process_file "%%~f"
)</code></pre>
<p>提取文件名首字母：</p>
<pre class="language-csharp highlighter-hljs"><code>set "first_char=!filename:~0,1!"</code></pre>
<p>然后做判断，如果符合首字母"A"，则做拷贝操作，如果不是忽略文件：</p>
<pre class="language-csharp highlighter-hljs"><code>if "!first_char!"=="A" (
    color 0A
    echo    符合条件：大写A开头文件
    echo    开始传输，请勿关闭窗口...
    
    :: 使用robocopy增强传输（显示进度但保持静默）
    robocopy "%target_dir%" "%remote_dir%" "!filename!" /njh /njs /ndl /nc /np
    
    :: 错误代码处理（ROBOCOPY特有代码）
    if errorlevel 8 (
        color 0C
        echo    [严重错误] 代码!errorlevel! 磁盘空间不足
        echo [%timestamp%] ERROR: 传输失败 → "!safe_filename!" [代码!errorlevel!] &gt;&gt; "%log_file%"
    ) else if errorlevel 4 (
        color 0E
        echo    [警告] 代码!errorlevel! 文件不匹配
        echo [%timestamp%] WARN: 传输异常 → "!safe_filename!" [代码!errorlevel!] &gt;&gt; "%log_file%"
    ) else if errorlevel 1 (
        color 0A
        echo    [成功] 传输完成
        echo [%timestamp%] SUCCESS: 已传输 → "!safe_filename!" &gt;&gt; "%log_file%"
    )
    color 0F
) else (
    echo    忽略：非大写A开头文件
    echo [%timestamp%] INFO: 忽略文件 → "!safe_filename!" &gt;&gt; "%log_file%"
)</code></pre>
<p>因为想要生成日志，因此每做一个操作，获取时间并输入给 .log。</p>
<pre class="language-csharp highlighter-hljs"><code>:get_timestamp
for /f "tokens=2 delims==." %%t in ('wmic os get localdatetime /value 2^&gt;nul') do set "datetime=%%t"
set "timestamp=!datetime:~0,4!-!datetime:~4,2!-!datetime:~6,2! !datetime:~8,2!:!datetime:~10,2!:!datetime:~12,2!"</code></pre>
<p>另外想要不断监测，程序需要循环执行：</p>
<pre class="language-csharp highlighter-hljs"><code>rem ...
:: ==================== 主监控循环 =====================
:monitor_loop
call :get_timestamp

rem ...

:: 间隔检测（非阻塞等待）
timeout /t %check_interval% /nobreak &gt;nul
goto monitor_loop</code></pre>
<p>&nbsp;还有一些细节：</p>
<p>使用robocopy命令传输：</p>
<div class="md-code-block">
<pre class="highlighter-hljs"><code>robocopy "%target_dir%" "%remote_dir%" "!filename!" /njh /njs /ndl /nc /np /ns /nfl
if errorlevel 8 (
    ...错误处理...
)</code></pre>
</div>
<p>更科学更安全，提升特殊字符处理能力，也可以返回错误信息。</p>
<ul>
<li>
<p><strong>ROBOCOPY错误代码表</strong>：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>代码</th>
<th>含义</th>
<th>处理建议</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>无变化</td>
<td>正常情况</td>
</tr>
<tr>
<td>1</td>
<td>文件复制成功</td>
<td>记录日志</td>
</tr>
<tr>
<td>4</td>
<td>不匹配文件</td>
<td>检查文件系统</td>
</tr>
<tr>
<td>8</td>
<td>磁盘空间不足</td>
<td>紧急处理</td>
</tr>
<tr>
<td>16</td>
<td>无效参数</td>
<td>检查脚本配置</td>
</tr>
</tbody>
</table>
<p>因此可以对错误码进行逐一对比操作：</p>
<pre class="language-csharp highlighter-hljs"><code> :: 错误代码处理（ROBOCOPY特有代码）
    if errorlevel 8 (
        color 0C
        echo    [严重错误] 代码!errorlevel! 磁盘空间不足
        echo [%timestamp%] ERROR: 传输失败 → "!safe_filename!" [代码!errorlevel!] &gt;&gt; "%log_file%"
    ) else if errorlevel 4 (
        color 0E
        echo    [警告] 代码!errorlevel! 文件不匹配
        echo [%timestamp%] WARN: 传输异常 → "!safe_filename!" [代码!errorlevel!] &gt;&gt; "%log_file%"
    ) else if errorlevel 1 (
        color 0A
        echo    [成功] 传输完成
        echo [%timestamp%] SUCCESS: 已传输 → "!safe_filename!" &gt;&gt; "%log_file%"
    )</code></pre>
<p>&nbsp;还有<strong>特殊字符&nbsp; &amp;&nbsp; </strong>的处理</p>
<div class="md-code-block">
<pre class="highlighter-hljs"><code>set "safe_filename=!filename:^&amp;=^^^&amp;!"</code></pre>
</div>
<p>避免文件名称有特殊字符。（实际上作为文件名，本身不允许特殊字符，这里做保险之用）</p>
<p><strong>另外</strong>：</p>
<p><code>@echo off</code>：关闭命令回显，提升界面整洁度</p>
<p><code>setlocal enabledelayedexpansion</code>：启用延迟变量扩展，正确处理动态变量，始终在脚本开头使用<code>setlocal</code>防止污染系统环境变量</p>
<p><code>title</code>：自定义控制台窗口标题</p>
<p><code>color 0F &amp; cls</code>：设定白色文本并清空内容</p>
<p>还有时刻注意做日志备份信息。如：</p>
<div class="md-code-block">
<pre class="highlighter-hljs"><code>echo [%timestamp%] INFO: 发现文件 → "!safe_filename!" &gt;&gt; "%log_file%"</code></pre>
<p>&nbsp;</p>
</div>
<p><strong>完整脚本代码</strong>如下：</p>
<pre class="language-vbnet highlighter-hljs"><code>@echo off
setlocal enabledelayedexpansion
title 文件监控传输工具  V1.4

:: ======================= 配置参数 ========================
set "script_dir=%~dp0"                    &amp; rem 获取脚本所在目录
set "target_dir=D:\projects\cmd\targetdir" &amp; rem 监控目录
set "remote_dir=\\DESKTOP-JL8BQNM\temp4share" &amp; rem 远程目录
set "log_file=%script_dir%FileMonitor.log"  &amp; rem 日志文件路径
set "check_interval=5"                     &amp; rem 检测间隔(秒)

:: ====================== 初始化界面 =======================
color 0F &amp; cls
echo ================================================
echo              █ 文件监控传输工具 █  
echo ================================================
echo   [版本特性]
echo   √ 严格匹配大写A开头文件 √ 特殊字符支持
echo   √ 实时传输状态提示   √ 详细日志记录
echo   监控目录    : "%target_dir%"
echo   远程目录    : "%remote_dir%"
echo   日志文件    : "%log_file%"
echo   检测间隔    : 每%check_interval%秒
echo ================================================
echo   [注意] 大文件传输时会暂停监控，保持窗口开启
echo   按 Ctrl+C 安全终止程序
echo ================================================

:: ================== 文件列表初始化 ====================
dir /b "%target_dir%" &gt; "%script_dir%prevfiles.txt"

:: ==================== 主监控循环 =====================
:monitor_loop
call :get_timestamp
echo [%timestamp%] 扫描进行中...

:: 生成当前文件列表（安全模式）
dir /b "%target_dir%" &gt; "%script_dir%currentfiles.txt"

:: 检测新增文件（增强模式）
findstr /v /g:"%script_dir%prevfiles.txt" "%script_dir%currentfiles.txt" &gt; "%script_dir%newfiles.txt"

:: 处理新增文件（支持特殊字符）
for /f "usebackq tokens=*" %%f in ("%script_dir%newfiles.txt") do (
    call :process_file "%%~f"
)

:: 更新文件列表缓存
move /y "%script_dir%currentfiles.txt" "%script_dir%prevfiles.txt" &gt;nul
del "%script_dir%newfiles.txt" 2&gt;nul

:: 间隔检测（非阻塞等待）
timeout /t %check_interval% /nobreak &gt;nul
goto monitor_loop

:: ================== 文件处理模块 =====================
:process_file
set "filename=%~1"
set "safe_filename=!filename:^&amp;=^^^&amp;!"  &amp; rem 转义特殊字符

:: 获取首字符（ASCII值方式更可靠）
set "first_char=!filename:~0,1!"
call :get_timestamp

:: 日志记录（双重写入）
echo [%timestamp%] 发现文件: "!safe_filename!"
echo [%timestamp%] INFO: 发现文件 → "!safe_filename!" &gt;&gt; "%log_file%"

:: ============ 严格大写A检测（ASCII值65） =============
if "!first_char!"=="A" (
    color 0A
    echo    符合条件：大写A开头文件
    echo    开始传输，请勿关闭窗口...
    
    :: 使用robocopy增强传输（显示进度但保持静默）
    robocopy "%target_dir%" "%remote_dir%" "!filename!" /njh /njs /ndl /nc /np
    
    :: 错误代码处理（ROBOCOPY特有代码）
    if errorlevel 8 (
        color 0C
        echo    [严重错误] 代码!errorlevel! 磁盘空间不足
        echo [%timestamp%] ERROR: 传输失败 → "!safe_filename!" [代码!errorlevel!] &gt;&gt; "%log_file%"
    ) else if errorlevel 4 (
        color 0E
        echo    [警告] 代码!errorlevel! 文件不匹配
        echo [%timestamp%] WARN: 传输异常 → "!safe_filename!" [代码!errorlevel!] &gt;&gt; "%log_file%"
    ) else if errorlevel 1 (
        color 0A
        echo    [成功] 传输完成
        echo [%timestamp%] SUCCESS: 已传输 → "!safe_filename!" &gt;&gt; "%log_file%"
    )
    color 0F
) else (
    echo    忽略：非大写A开头文件
    echo [%timestamp%] INFO: 忽略文件 → "!safe_filename!" &gt;&gt; "%log_file%"
)

echo --------------------------------------------------------
exit /b

:: ================== 时间戳生成模块 ====================
:get_timestamp
for /f "tokens=2 delims==." %%t in ('wmic os get localdatetime /value 2^&gt;nul') do set "datetime=%%t"
set "timestamp=!datetime:~0,4!-!datetime:~4,2!-!datetime:~6,2! !datetime:~8,2!:!datetime:~10,2!:!datetime:~12,2!"
exit /b

endlocal</code></pre>
<p>&nbsp;</p>
<p><span style="font-size: 16px"><strong>【设计小结】</strong></span></p>
<p>后期还可以优化程序，比如可以引入配置文件----config.ini，如：</p>
<pre class="highlighter-hljs"><code>[Settings]
TargetDir=D:\projects\cmd\targetdir
RemoteDir=\\DESKTOP-JL8BQNM\temp4share
CheckInterval=5</code></pre>
<p>还有，对于转义算法，为了处理文件名称带有<code>&amp;</code>字符：</p>
<pre class="highlighter-hljs"><code>set "safe_filename=!filename:^&amp;=^^^&amp;!"</code></pre>
<div class="MuiStack-root css-1s00no3">
<p><code>!filename:原字符串=新字符串!</code>&nbsp;表示对变量&nbsp;<code>filename</code>&nbsp;进行字符串替换。</p>
<p><code>原字符串</code>&nbsp;是&nbsp;<code>^&amp;</code>（实际匹配&nbsp;<code>&amp;</code>&nbsp;符号）</p>
<p><code>新字符串</code>&nbsp;是&nbsp;<code>^^^&amp;</code>（实际生成转义后的&nbsp;<code>^&amp;</code>）</p>
<p>转义逻辑：</p>
<p><strong><code>原字符串</code>&nbsp;</strong>中的<strong>&nbsp;<code>^&amp;</code></strong>：<code>^</code>&nbsp;在这里是转义符，表示要匹配实际的&nbsp;<code>&amp;</code>&nbsp;符号。</p>
<p><strong><code>新字符串</code>&nbsp;</strong>中的<strong>&nbsp;<code>^^^&amp;</code></strong>：第一个&nbsp;<code>^</code>&nbsp;转义第二个&nbsp;<code>^</code>，生成一个普通&nbsp;<code>^</code>，第三个&nbsp;<code>^</code>&nbsp;转义&nbsp;<code>&amp;</code>，生成&nbsp;<code>^&amp;</code></p>
</div>
<p>当然该操作仅转义了&nbsp;<code>&amp;</code>&nbsp;符号，其他特殊字符如&nbsp;<code>|</code>、<code>&gt;</code>、<code>&lt;</code> 仍需额外处理。</p>
<p>不过正常情况下，文件名称不应该出现特殊字符，所以不用深究。</p>
<p>还有对于：</p>
<pre class="highlighter-hljs"><code>for /f "usebackq tokens=*" %%f in ("%script_dir%newfiles.txt") do (</code></pre>
<p>为了防止反引号和括号给文本处理带来干扰。</p>
<p><code>usebackq</code>参数是为了反引号的正常处理，<code>"%script_dir%newfiles.txt"</code>，加上双引号，防止括号被解析为命令的一部分，建议所有路径操作强制使用引号包裹，避免解析错误。</p>
<p>还可<strong>优化</strong>的部分：</p>
<p>1.&nbsp; 临时的<strong>prevfiles.txt</strong>文件可以不用展现出来，在退出程序前将其消除。</p>
<p>2.&nbsp; 拷贝文件实际上是阻塞程序继续监测的，如果可以，设置成非阻塞的。</p>
<p>3.&nbsp; 设置日志轮转，更科学得管理日志。</p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 16px">【设计展示】</span></strong></p>
<p><img src="https://img2024.cnblogs.com/blog/944545/202502/944545-20250227225947829-1877828503.gif" width="800"></p>
<p><img src="https://img2024.cnblogs.com/blog/944545/202502/944545-20250227230005652-366960815.gif" width="800"></p>
<p id="1740668398542"></p>
<p id="1740668392937"></p>
<p>该<strong>脚本</strong>可以作为一个轻量级解决方案案例，展现了实时监控逻辑的实现范式，为复杂系统开发提供了基础设计模式参考。希望给读者一些灵感。<strong>CMD，你老爹永远是你老爹~~~~</strong></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.05436304609837963" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-27 23:01">2025-02-27 22:50</span>&nbsp;
<a href="https://www.cnblogs.com/sharpeye">SHARP-EYE</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18741943" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18741943);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18741943', targetLink: 'https://www.cnblogs.com/sharpeye/p/18741943', title: '批处理脚本(.bat)实现实时监测文件夹并执行命令 [假设有新文件则拷贝到远程文件夹内]' })">举报</a>
</div>
        