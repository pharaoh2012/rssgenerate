
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/vipstone/p/18900774" title="发布于 2025-05-28 15:52">
    <span role="heading" aria-level="2">重磅！SpringBoot4发布，11项重大变更全解析！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>不知道大家最近没有发现？在我们新创建 Spring Boot 项目的时候，已经有了 Spring Boot 4.0.0 预览版这个选项了，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/172074/202505/172074-20250528155133578-646922934.png" alt="" loading="lazy"></p>
<p>并且 Spring Boot 4 底层是基于全新的 Spring Framework 7.0.0 实现的，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/172074/202505/172074-20250528155141938-1362975750.png" alt="" loading="lazy"></p>
<p>那么问题来了，新版本都有哪些重要的变更呢？接下来由磊哥带着大家抢先来看。</p>
<h2 id="1优雅版本控制">1.优雅版本控制</h2>
<p>新版本引入了优雅的 API 版本控制支持，允许开发者通过 @RequestMapping 注解中的 version 参数来实现版本控制，如下代码所示：</p>
<pre><code class="language-java">import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api")
public class VersionedController {

    @RequestMapping(value = "/user", version = "1")
    public String getUserV1() {
        // 版本1实现
        System.out.println("Version 1");
        return "Version 1";
    }

    @RequestMapping(value = "/user", version = "2")
    public String getUserV2() {
        // 版本2实现
        System.out.println("Version 2");
        return "Version 2";
    }
}
</code></pre>
<p>程序执行效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/172074/202505/172074-20250528155152694-1043341991.png" alt="" loading="lazy"></p>
<h2 id="2方便的bean注入">2.方便的Bean注入</h2>
<p>新版本引入了新的 BeanRegistrar 合约，允许更灵活地注册 Bean（一次性注入多个 Bean），示例代码如下：</p>
<pre><code class="language-java">import org.springframework.beans.factory.BeanRegistrar;
import org.springframework.beans.factory.BeanRegistry;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.core.env.Environment;

@Configuration
@Import(MyBeansRegistrar.class)
public class MyConfiguration {
}

class MyBeansRegistrar implements BeanRegistrar {

    @Override
    public void register(BeanRegistry registry,
                         Environment env) {
        registry.registerBean("user", User.class);
        if (env.matchesProfiles("dev")) {
            registry.registerBean(Order.class, spec -&gt; spec
                    .supplier(context -&gt; new Order("order_001")));
        }
    }
}

class User {
    private String name;
}

class Order {
    public Order(String name) {
        this.name = name;
    }

    private String name;
}
</code></pre>
<p>写一个单元测试证明注册的 Bean 是可以正常使用的：</p>
<p><img src="https://img2024.cnblogs.com/blog/172074/202505/172074-20250528155201605-907147496.png" alt="" loading="lazy"></p>
<h2 id="3null安全改进">3.Null安全改进</h2>
<p>新版本采用 JSpecify 注解来声明 API 的空值安全性，使用 @Nullable 表示可为 Null，使用 @NonNull 表示不能为空，并且会通过 Idea 配合提示警告或错误信息，例如以下代码：</p>
<pre><code class="language-java">import org.jspecify.annotations.NonNull;
import org.jspecify.annotations.Nullable;

public class Person {
    private String name;

    public void setName(@NonNull String name) {
        this.name = name;
    }

    @Nullable
    public String getName() {
        return this.name;
    }
}
</code></pre>
<p>在 Idea 中也能看到警告信息：</p>
<p><img src="https://img2024.cnblogs.com/blog/172074/202505/172074-20250528155211692-186745424.png" alt="" loading="lazy"></p>
<blockquote>
<p>不同 Idea 版本展现形式不一样，博主使用的是 Idea 2024，新版本应该才会支持新特性。</p>
</blockquote>
<h2 id="4http代理轻松创建">4.HTTP代理轻松创建</h2>
<p>新版本提供了 @ImportHttpServices 注解，<strong>让你为 HTTP 接口创建代理更加容易</strong>，示例代码如下（它允许您轻松声明、检测和配置整个 HTTP 服务组）：</p>
<pre><code class="language-java">@Configuration(proxyBeanMethods = false)
@ImportHttpServices(group = "weather", types = {FreeWeather.class, CommercialWeather.class})
@ImportHttpServices(group = "user", types = {UserServiceInternal.class, UserServiceOfficial.class})
static class HttpServicesConfiguration extends AbstractHttpServiceRegistrar {
    @Bean
    public RestClientHttpServiceGroupConfigurer groupConfigurer() {
        return groups -&gt; groups.filterByName("weather", "user")
                .configureClient((group, builder) -&gt; builder.defaultHeader("User-Agent", "My-Application"));
    }
}
</code></pre>
<h2 id="5其他七个变更">5.其他七个变更</h2>
<p>其他升级的特性还包括：</p>
<ol>
<li>
<p><strong>SPEL 表达式升级</strong>：<font style="color: rgba(31, 35, 40, 1)">SPEL 表达式中支持空安全和 Elvis 运算符，例如以下代码：</font></p>
<pre><code class="language-java">@Value("#{systemProperties['pop3.port'] ?: 25}")
</code></pre>
<p>它表示，将注入系统属性 pop3.port 的值，如果未定义该属性值，注入 25 这个值。</p>
</li>
<li>
<p><strong>GraalVM 原生应用支持</strong>：借助 Spring AOT 技术，将应用编译成原生镜像，极大地缩短了启动时间。</p>
</li>
<li>
<p><strong>支持 Jackson 3.x</strong>：放弃对 Jackson 2.x 的支持，升级为 Jackson 3.x。</p>
</li>
<li>
<p><strong>Servlet 和 WebSocket 版本升级</strong>：使用 Servlet 6.1 和 WebSocket 2.2 作为 Web 应用程序的底层实现，这意味着应用程序应该部署在最新的 Servlet 容器上，比如 Tomcat 11+ 和 Jetty 12.1+。</p>
</li>
<li>
<p><strong>HttpHeaders 优化</strong>：HttpHeaders 操作如下：</p>
<pre><code class="language-java">@RestController
public class MyController {

    @GetMapping("/headers")
    public ResponseEntity&lt;String&gt; handleRequest(HttpHeaders headers) {
        // 旧方式（已废弃）
        // headers.getFirst("X-Custom-Header");

        // 新方式
        String value = headers.firstValue("X-Custom-Header").orElse(null);

        // 遍历所有头部
        headers.forEach((name, values) -&gt; {
            System.out.println(name + ": " + values);
        });

        return ResponseEntity.ok("Processed");
    }
}
</code></pre>
</li>
<li>
<p><strong>功能删除</strong>：新版本中的删除的内容如下：</p>
<ul>
<li>Spring MVC 的 XML 配置名称空间现在被弃用，取而代之的是 Java 配置体。</li>
<li>Spring TestContext 框架中的 JUnit 4 支持现在已经被弃用。</li>
<li>Jackson 2.x 支持已被弃用，取而代之的是 Jackson 3.x。</li>
<li><font style="color: rgba(31, 35, 40, 1)">Spring JCL 停用。</font></li>
</ul>
</li>
<li>
<p><strong>最低环境要求提高</strong>：</p>
<ul>
<li>Jakarta EE 11 (Tomcat 11+)</li>
<li>Kotlin 2.x</li>
<li>JSONassert 2.0</li>
<li>GraalVM 23</li>
</ul>
</li>
</ol>
<blockquote>
<p>更多升级信息参考官网：<a href="https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-7.0-Release-Notes" target="_blank" rel="noopener nofollow">https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-7.0-Release-Notes</a></p>
</blockquote>
<h2 id="小结">小结</h2>
<p>程序员是干到老学到老的行业，框架和工具的变更意味着我们会有更便利、更友好的调用方式，所以对于程序员是利好的，因此一起学起来、用起来、折腾起来吧。</p>
<blockquote>
<p>本文已收录到我的技术小站 <a href="https://www.javacn.site" target="_blank" rel="noopener nofollow">www.javacn.site</a>，其中包含的内容有：Spring Boot、Spring Cloud、Spring AI、LangChain4j、Dify、AI Agent、MCP、Function Call、RAG、向量数据库、Prompt、多模态、向量数据库、嵌入模型等内容。</p>
</blockquote>

</div>
<div id="MySignature" role="contentinfo">
    <div style="text-align: center; color: red">
关注下面二维码，订阅更多精彩内容。
<br>
<img style="margin-left: 0px" src="https://images.cnblogs.com/cnblogs_com/vipstone/848916/o_211225130402_gognzhonghao.jpg">
</div>

<div style="display: none">
    <img src="http://icdn.apigo.cn/gitchat/rabbitmq.png?imageView2/0/w/500/h/400">
</div>
<div style="margin-bottom: 50px; display: none">

<img title="微信打赏" src="http://icdn.apigo.cn/myinfo/wchat-pay.png" alt="微信打赏">
<br>

<div style="display: none">
<span style="display: block; position: absolute; height: 40px; top: 50%; margin-top: -20px">关注公众号（加好友）：</span>

<img style="margin-left: 144px" src="http://icdn.apigo.cn/gongzhonghao2.png?imageView2/0/w/120/h/120">
</div>
<p></p>

<div id="AllanboltSignature">
    <p style="border-top: #e0e0e0 1px dashed; border-right: #e0e0e0 1px dashed; border-bottom: #e0e0e0 1px dashed; border-left: #e0e0e0 1px dashed; padding-top: 10px; padding-right: 10px; padding-bottom: 10px; padding-left: 60px; background: url(&quot;https://images.cnblogs.com/cnblogs_com/lloydsheng/239039/o_copyright.gif&quot;) #e5f1f4 no-repeat 1% 50%; font-family: 微软雅黑; font-size: 11px" id="PSignature">
        <br> 作者：
        <a href="http://vipstone.cnblogs.com/" target="_blank">王磊的博客</a>
        <br> 出处：
        <a href="http://vipstone.cnblogs.com/" target="_blank">http://vipstone.cnblogs.com/</a>
        <br>
    </p>
</div></div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.599144892099537" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-28 15:52">2025-05-28 15:52</span>&nbsp;
<a href="https://www.cnblogs.com/vipstone">磊哥|www.javacn.site</a>&nbsp;
阅读(<span id="post_view_count">263</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18900774);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18900774', targetLink: 'https://www.cnblogs.com/vipstone/p/18900774', title: '重磅！SpringBoot4发布，11项重大变更全解析！' })">举报</a>
</div>
        