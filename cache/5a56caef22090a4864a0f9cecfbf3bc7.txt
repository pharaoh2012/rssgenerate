
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/yayujs/p/18802929" title="发布于 2025-03-31 20:49">
    <span role="heading" aria-level="2">SvelteKit 最新中文文档教程（16）—— Service workers</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p><a href="https://svelte.yayujs.com" target="_blank" rel="noopener nofollow">Svelte</a>，一个语法简洁、入门容易，面向未来的前端框架。</p>
<p>从 Svelte 诞生之初，就备受开发者的喜爱，根据统计，<strong>从 2019 年到 2024 年，连续 6 年一直是开发者最感兴趣的前端框架 No.1</strong>：</p>
<p><img src="https://yayujs-blog.oss-cn-beijing.aliyuncs.com/405488775-48df16b1-939c-489b-8d52-6071869893f0.png" alt="image.png" loading="lazy"></p>
<p>Svelte 以其独特的编译时优化机制著称，具有<strong>轻量级</strong>、<strong>高性能</strong>、<strong>易上手</strong>等特性，<strong>非常适合构建轻量级 Web 项目</strong>。</p>
<p>为了帮助大家学习 Svelte，我同时搭建了 Svelte 最新的<a href="https://svelte.yayujs.com" target="_blank" rel="noopener nofollow">中文文档</a>站点。</p>
<p>如果需要进阶学习，也可以入手我的小册<a href="https://s.juejin.cn/ds/iycmvygA/" target="_blank" rel="noopener nofollow">《Svelte 开发指南》</a>，语法篇、实战篇、原理篇三大篇章带你系统掌握 Svelte！</p>
<p>欢迎围观我的<a href="https://yayujs.com" target="_blank" rel="noopener nofollow">“网页版朋友圈”</a>、加入<a href="https://www.yuque.com/yayu/nice-people/xou8qr" target="_blank" rel="noopener nofollow">“冴羽·成长陪伴社群”</a>，踏上<a href="https://t.zsxq.com/DfGhx" target="_blank" rel="noopener nofollow">“前端大佬成长之路”</a>。</p>
<h2 id="service-workers">Service workers</h2>
<p>Service workers 作为代理服务端，处理应用程序内部的网络请求。这使得您的应用程序能够离线工作，但即使您不需要离线支持（或由于您正在构建的应用程序类型而无法实现它），使用 service workers 预缓存构建的 JS 和 CSS 来加快导航速度，通常也是值得的。</p>
<p>在 SvelteKit 中，如果您有一个 <code>src/service-worker.js</code> 文件（或 <code>src/service-worker/index.js</code>），它将被打包并自动注册。如果需要，您可以更改 <a href="https://svelte.yayujs.com/docs/kit/configuration#files" target="_blank" rel="noopener nofollow">service worker 的位置</a>。</p>
<p>如果您需要使用自己的逻辑注册 service worker 或使用其他解决方案，可以<a href="https://svelte.yayujs.com/docs/kit/configuration#serviceWorker" target="_blank" rel="noopener nofollow">禁用自动注册</a>。默认注册看起来类似这样：</p>
<pre><code class="language-js">if ('serviceWorker' in navigator) {
	addEventListener('load', function () {
		navigator.serviceWorker.register('./path/to/service-worker.js');
	});
}
</code></pre>
<h2 id="service-worker-内部">Service Worker 内部</h2>
<p>在 service worker 内部，您可以访问 <a href="https://svelte.yayujs.com/docs/kit/$service-worker" target="_blank" rel="noopener nofollow"><code>$service-worker</code> 模块</a>，它为您提供所有静态资源、构建文件和预渲染页面的路径。您还会获得一个应用程序版本字符串，可用于创建唯一的缓存名称，以及部署的 <code>base</code> 路径。如果您的 Vite 配置指定了 <code>define</code>（用于全局变量替换），这也将应用于 service workers 以及服务端/客户端构建。</p>
<p>以下示例会尽可能早的缓存构建的应用程序和 <code>static</code> 中的所有文件，并在访问时缓存所有其他请求。这将使每个页面在访问后都能离线工作。</p>
<pre><code class="language-js">// @errors: 2339
/// &lt;reference types="@sveltejs/kit" /&gt;
import { build, files, version } from '$service-worker';

// 为此部署创建唯一的缓存名称
const CACHE = `cache-${version}`;

const ASSETS = [
	...build, // 应用程序本身
	...files // `static` 中的所有内容
];

self.addEventListener('install', (event) =&gt; {
	// 创建新缓存并添加所有文件
	async function addFilesToCache() {
		const cache = await caches.open(CACHE);
		await cache.addAll(ASSETS);
	}

	event.waitUntil(addFilesToCache());
});

self.addEventListener('activate', (event) =&gt; {
	// 从磁盘删除以前的缓存数据
	async function deleteOldCaches() {
		for (const key of await caches.keys()) {
			if (key !== CACHE) await caches.delete(key);
		}
	}

	event.waitUntil(deleteOldCaches());
});

self.addEventListener('fetch', (event) =&gt; {
	// 忽略 POST 请求等
	if (event.request.method !== 'GET') return;

	async function respond() {
		const url = new URL(event.request.url);
		const cache = await caches.open(CACHE);

		// `build`/`files` 始终可以从缓存中提供服务
		if (ASSETS.includes(url.pathname)) {
			const response = await cache.match(url.pathname);

			if (response) {
				return response;
			}
		}

		// 对于其他所有内容，首先尝试网络
		// 但如果我们离线，则回退到缓存
		try {
			const response = await fetch(event.request);

			// 如果我们离线，fetch 可能返回非 Response 值
			// 而不是抛出错误 - 我们不能将这个非 Response 传递给 respondWith
			if (!(response instanceof Response)) {
				throw new Error('invalid response from fetch');
			}

			if (response.status === 200) {
				cache.put(event.request, response.clone());
			}

			return response;
		} catch (err) {
			const response = await cache.match(event.request);

			if (response) {
				return response;
			}

			// 如果没有缓存，就直接报错
			// 因为我们无法对这个请求做任何响应
			throw err;
		}
	}

	event.respondWith(respond());
});
</code></pre>
<blockquote>
<p>[!NOTE] 缓存时要小心！在某些情况下，过时的数据可能比离线时无法获取的数据更糟糕。由于浏览器会在缓存太满时清空缓存，因此您还应该谨慎缓存大型资源，如视频文件。</p>
</blockquote>
<h2 id="在开发过程中">在开发过程中</h2>
<p>service worker 在生产环境中会被打包，但在开发过程中不会。因此，只有支持 <a href="https://web.dev/es-modules-in-sw" target="_blank" rel="noopener nofollow">service workers 中的模块</a> 的浏览器才能在开发时使用它们。如果您手动注册 service worker，在开发时需要传递 <code>{ type: 'module' }</code> 选项：</p>
<pre><code class="language-js">import { dev } from '$app/environment';

navigator.serviceWorker.register('/service-worker.js', {
	type: dev ? 'module' : 'classic'
});
</code></pre>
<blockquote>
<p>[!NOTE] 在开发环境中，<code>build</code> 和 <code>prerendered</code> 是空数组</p>
</blockquote>
<h2 id="类型安全">类型安全</h2>
<p>为 service workers 设置适当的类型需要一些手动设置。在您的 <code>service-worker.js</code> 中，在文件顶部添加以下内容：</p>
<pre><code class="language-original-js">/// &lt;reference types="@sveltejs/kit" /&gt;
/// &lt;reference no-default-lib="true"/&gt;
/// &lt;reference lib="esnext" /&gt;
/// &lt;reference lib="webworker" /&gt;

const sw = /** @type {ServiceWorkerGlobalScope} */ (/** @type {unknown} */ (self));
</code></pre>
<pre><code class="language-generated-ts">/// &lt;reference types="@sveltejs/kit" /&gt;
/// &lt;reference no-default-lib="true"/&gt;
/// &lt;reference lib="esnext" /&gt;
/// &lt;reference lib="webworker" /&gt;

const sw = self as unknown as ServiceWorkerGlobalScope;
</code></pre>
<p>这会禁用对 service worker 中不可用的 DOM 类型（如 <code>HTMLElement</code>）的访问，并实例化正确的全局变量。将 <code>self</code> 重新赋值给 <code>sw</code> 允许您在此过程中进行类型转换（有几种方法可以做到这一点，但这是最简单的，不需要额外的文件）。在文件的其余部分使用 <code>sw</code> 而不是 <code>self</code>。</p>
<p>对 SvelteKit 类型的引用确保 <code>$service-worker</code> 导入具有适当的类型定义。如果您导入 <code>$env/static/public</code>，您要么必须使用 <code>// @ts-ignore</code> 注释导入，要么添加 <code>/// &lt;reference types="../.svelte-kit/ambient.d.ts" /&gt;</code> 到引用类型中。</p>
<h2 id="其他解决方案">其他解决方案</h2>
<p>SvelteKit 的 service worker 实现故意保持低级别。如果您需要更全功能但也更有主见的解决方案，我们建议查看像 <a href="https://vite-pwa-org.netlify.app/frameworks/sveltekit.html" target="_blank" rel="noopener nofollow">Vite PWA 插件</a> 这样的解决方案，它使用 <a href="https://web.dev/learn/pwa/workbox" target="_blank" rel="noopener nofollow">Workbox</a>。有关 service workers 的更多一般信息，我们推荐 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers" target="_blank" rel="noopener nofollow">MDN web 文档</a>。</p>
<h2 id="svelte-中文文档">Svelte 中文文档</h2>
<p>点击查看中文文档：<a href="https://svelte.yayujs.com/docs/kit/service-workers" target="_blank" rel="noopener nofollow">SvelteKit Service workers</a></p>
<p>系统学习 Svelte，欢迎入手小册<a href="https://s.juejin.cn/ds/iycmvygA/" target="_blank" rel="noopener nofollow">《Svelte 开发指南》</a>。语法篇、实战篇、原理篇三大篇章带你系统掌握 Svelte！</p>
<p>此外我还写过 <a href="https://juejin.cn/column/7035531575974592520" target="_blank" rel="noopener nofollow">JavaScript 系列</a>、<a href="https://juejin.cn/column/7029490086710345742" target="_blank" rel="noopener nofollow">TypeScript 系列</a>、<a href="https://juejin.cn/column/7142674773930147853" target="_blank" rel="noopener nofollow">React 系列</a>、<a href="https://juejin.cn/column/7343569488744611849" target="_blank" rel="noopener nofollow">Next.js 系列</a>、<a href="https://juejin.cn/column/7039526067891077151" target="_blank" rel="noopener nofollow">冴羽答读者问</a>等 14 个系列文章， 全系列文章目录：<a href="https://github.com/mqyqingfeng/Blog" target="_blank" rel="noopener nofollow">https://github.com/mqyqingfeng/Blog</a></p>
<p>欢迎围观我的<a href="https://yayujs.com" target="_blank" rel="noopener nofollow">“网页版朋友圈”</a>、加入<a href="https://www.yuque.com/yayu/nice-people/xou8qr" target="_blank" rel="noopener nofollow">“冴羽·成长陪伴社群”</a>，踏上<a href="https://t.zsxq.com/DfGhx" target="_blank" rel="noopener nofollow">“前端大佬成长之路”</a>。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="10.393362413868056" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-31 20:49">2025-03-31 20:49</span>&nbsp;
<a href="https://www.cnblogs.com/yayujs">冴羽</a>&nbsp;
阅读(<span id="post_view_count">30</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18802929" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18802929);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18802929', targetLink: 'https://www.cnblogs.com/yayujs/p/18802929', title: 'SvelteKit 最新中文文档教程（16）—— Service workers' })">举报</a>
</div>
        