
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ghostmen/p/18846749" title="发布于 2025-04-25 15:04">
    <span role="heading" aria-level="2">Centos 实现 MySql 8.0.40 主从配置</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>MySql 版本：8.0.40</p>
<p>服务器：10.120.75.50，10.120.75.51（共两台）</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1744503/202504/1744503-20250425150347778-325526682.png" alt="image" loading="lazy"></p>
<h3 id="1-配置主服务器101207550">1. 配置主服务器（<code>10.120.75.50</code>）</h3>
<h4 id="11-编辑-mysql-配置文件">1.1 编辑 MySQL 配置文件</h4>
<p>首先，登录到主服务器，编辑 MySQL 配置文件（通常位于 <code>/etc/my.cnf</code> 或 <code>/etc/mysql/my.cnf</code>）。</p>
<pre><code class="language-bash">vim /etc/my.cnf
</code></pre>
<pre><code class="language-shell">[mysqld]
# 基础配置
port=6305                    # MySQL 服务监听端口（需与客户端连接配置一致）
basedir=/usr/local/mysql     # MySQL 安装目录
datadir=/usr/local/mysql/data # 数据文件存储目录（包含数据库文件、日志等）
socket=/usr/local/mysql/data/mysql.sock # Unix 套接字文件路径（本地连接使用）

# 连接与安全
max_connect_errors=10000     # 允许的最大连接错误次数（防暴力破解，建议设为较大值）
character-set-server=utf8mb4 # 默认字符集（支持 Emoji 和扩展字符）
default-storage-engine=INNODB # 默认存储引擎（推荐 InnoDB，支持事务、行级锁）
user=ydroot                  # MySQL 服务运行用户（需与系统用户一致）

# 复制相关配置
# skip-grant-tables          # 跳过权限验证（谨慎使用，仅用于密码恢复）
skip-name-resolve            # 禁用 DNS 解析（加快连接速度，但禁用主机名验证）

# 唯一服务器标识（主从复制必须唯一）
server-id = 1               

# 二进制日志配置（复制和恢复的核心）
log-bin = mysql-bin          # 启用二进制日志（文件名前缀）
binlog-do-db = datasynchron # 仅同步指定数据库（若需全库同步，删除此行）

# 数据包与通信
max_allowed_packet=512M      # 允许的最大数据包大小（大文件传输需调大）

# GTID 配置（增强复制可靠性）
gtid_mode = ON               # 启用全局事务标识符
enforce_gtid_consistency = ON # 强制 GTID 一致性（禁止非事务性操作）

# 二进制日志格式（ROW 模式记录行级变化，推荐用于复制）
binlog_format = ROW 

# 日志清理策略（自动清理 7 天前的二进制日志）
binlog_expire_logs_seconds = 604800  # 7 天（单位：秒）

[client]
port=6305                    			# 客户端连接端口（需与服务器端一致）
socket=/usr/local/mysql/data/mysql.sock # 客户端套接字路径（本地连接使用）
default-character-set=utf8mb4 			# 客户端默认字符集

[mysqld_safe]
log-error=/usr/local/mysql/data/localhost.localdomain.err # 错误日志路径
pid-file=/usr/local/mysql/data/localhost.localdomain.pid  # PID 文件路径（记录进程 ID）
</code></pre>
<h4 id="12-重启-mysql-服务">1.2 重启 MySQL 服务</h4>
<p>配置完毕后，重启 MySQL 服务使配置生效：</p>
<pre><code class="language-bash">sudo systemctl restart mysql
</code></pre>
<pre><code class="language-bash">或手动关闭后启动
pkill mysqld
/usr/local/mysql/bin/mysqld_safe --defaults-file=/etc/my.cnf &amp;
</code></pre>
<h4 id="13-创建复制账号">1.3 创建复制账号</h4>
<p>在主服务器上创建一个用于复制的 MySQL 用户：</p>
<pre><code class="language-sql">CREATE USER 'replication_user'@'%' IDENTIFIED BY 'password'; #生产环境禁止这样使用
CREATE USER 'replication_user'@'specific_ip' IDENTIFIED BY 'password' REQUIRE SSL; #产环境使用，强制使用 SSL 加密
-- 授予全局复制权限
GRANT REPLICATION SLAVE ON *.* TO 'replication_user'@'specific_ip';
#刷新权限
FLUSH PRIVILEGES;
</code></pre>
<h4 id="14-获取二进制日志文件和位置">1.4 获取二进制日志文件和位置</h4>
<p>运行以下命令，记录当前二进制日志文件和位置，这些信息会在从服务器上配置时使用。</p>
<pre><code class="language-sql">SHOW MASTER STATUS;
</code></pre>
<p>例如，您可能会得到如下输出：</p>
<pre><code class="language-sql">+------------------+----------+--------------+------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+------------------+
| mysql-bin.000001 | 107      | your_database|                  |
+------------------+----------+--------------+------------------+
</code></pre>
<p>记下 <code>File</code> 和 <code>Position</code> 字段的值，稍后在从服务器上使用。</p>
<pre><code class="language-sql">mysql&gt; SHOW MASTER STATUS;
+------------------+----------+--------------+------------------+-------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+------------------+----------+--------------+------------------+-------------------+
| mysql-bin.00003 |    157   | datasynchron |                  |                   |
+------------------+----------+--------------+------------------+-------------------+
</code></pre>
<h3 id="2-配置从服务器101207551">2. 配置从服务器（<code>10.120.75.51</code>）</h3>
<h4 id="21-编辑-mysql-配置文件">2.1 编辑 MySQL 配置文件</h4>
<p>登录到从服务器，编辑 MySQL 配置文件：</p>
<pre><code class="language-bash">sudo vi /etc/my.cnf
</code></pre>
<pre><code class="language-shell">[mysqld]
# MySQL服务基础配置
port=6306                    # MySQL服务监听端口（非默认3306，避免冲突）
basedir=/usr/local/mysql     # MySQL安装根目录
datadir=/usr/local/mysql/data # 数据库文件存储路径
socket=/usr/local/mysql/data/mysql.sock # 本地连接使用的套接字文件

# 连接安全配置
max_connect_errors=10000     # 允许的最大连接错误次数（防暴力破解）
skip-name-resolve            # 禁用DNS解析（提升连接速度，但要求授权使用IP而非主机名）

# 字符集与存储引擎
character-set-server=utf8mb4 # 设置默认字符集（支持emoji及扩展字符）
default-storage-engine=INNODB # 设置默认存储引擎

# 主从复制相关配置
server-id = 100              # 服务器唯一标识（主从节点必须不同）
relay-log = mysql-relay-bin  # 中继日志文件（用于主从同步）
log-bin = mysql-bin          # 二进制日志文件（记录所有更改数据的SQL）

# GTID（全局事务标识）配置（用于增强主从复制可靠性）
gtid_mode = ON               # 启用GTID模式
enforce-gtid-consistency = ON # 强制GTID一致性（防止非事务性操作破坏复制）

# 性能与网络配置
max_allowed_packet=512M      # 允许的最大数据包大小（处理大字段查询/传输）
binlog-do-db = datasynchron  # 指定需要同步的数据库（主从复制过滤）

[client]
# 客户端连接配置
port=6306                    # 客户端连接端口
socket=/usr/local/mysql/data/mysql.sock # 客户端使用的套接字文件
default-character-set=utf8mb4 # 设置客户端默认字符集
</code></pre>
<h4 id="22-重启-mysql-服务">2.2 重启 MySQL 服务</h4>
<p>配置完毕后，重启 MySQL 服务使配置生效：</p>
<pre><code class="language-bash">sudo systemctl restart mysql
</code></pre>
<h4 id="23-配置从服务器的主服务器信息">2.3 配置从服务器的主服务器信息</h4>
<p><strong>在从库停止复制并重置状态</strong>：</p>
<pre><code class="language-sql">STOP REPLICA;
RESET REPLICA;
</code></pre>
<p>在从服务器上，运行以下命令来配置主服务器的信息：</p>
<pre><code class="language-sql">CHANGE MASTER TO
  MASTER_HOST='10.120.75.50',			# 主服务器的IP地址
  MASTER_USER='replication_user',	 	# 主服务器上创建的复制账号
  MASTER_PASSWORD='your_password',  	# 替换为实际密码
  MASTER_LOG_FILE='mysql-bin.000003', 	# 主库当前日志文件
  MASTER_LOG_POS=197;                	# 主库当前日志位置
</code></pre>
<p>确保将 <code>MASTER_LOG_FILE</code> 和 <code>MASTER_LOG_POS</code> 设置为从主服务器上获取的值。</p>
<h4 id="24-启动从服务器复制进程">2.4 启动从服务器复制进程</h4>
<p>运行以下命令启动复制：</p>
<pre><code class="language-sql">start replica;
</code></pre>
<h4 id="25-检查复制状态">2.5 检查复制状态</h4>
<p>通过以下命令检查从服务器的复制状态：</p>
<pre><code class="language-sql">SHOW REPLICA STATUS\G
</code></pre>
<p>确保 <code>Slave_IO_Running</code> 和 <code>Slave_SQL_Running</code> 都是 <code>Yes</code>，这表示主从复制已经正常运行。</p>
<h3 id="3-测试主从复制">3. 测试主从复制</h3>
<p>在主服务器上插入数据，检查从服务器是否同步：</p>
<pre><code class="language-sql">INSERT INTO your_database.table_name (column1, column2) VALUES ('value1', 'value2');
</code></pre>
<p>然后，在从服务器上查询是否同步：</p>
<pre><code class="language-sql">SELECT * FROM your_database.table_name;
</code></pre>
<p>如果从服务器正确同步数据，则表示主从复制已成功配置。</p>
<h3 id="4-解决常见问题">4. 解决常见问题</h3>
<ul>
<li><strong>网络问题</strong>：确保从服务器能访问主服务器，且防火墙允许 MySQL 端口（通常是 3306）的连接。</li>
<li><strong>复制延迟</strong>：如果出现复制延迟，可以检查 <code>SHOW SLAVE STATUS</code> 输出中的 <code>Seconds_Behind_Master</code> 字段，查看是否存在延迟。</li>
<li><strong>权限问题</strong>：确保在主服务器上创建的复制账号具有正确的权限。</li>
</ul>
<p>通过这些步骤，您就可以成功配置 MySQL 主从复制。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.05365182730092593" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-25 15:04">2025-04-25 15:04</span>&nbsp;
<a href="https://www.cnblogs.com/ghostmen">ghostmen</a>&nbsp;
阅读(<span id="post_view_count">43</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18846749);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18846749', targetLink: 'https://www.cnblogs.com/ghostmen/p/18846749', title: 'Centos 实现 MySql 8.0.40 主从配置' })">举报</a>
</div>
        