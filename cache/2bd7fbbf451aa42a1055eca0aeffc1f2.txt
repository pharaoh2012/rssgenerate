
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/whuanle/p/18817790" title="发布于 2025-04-10 08:50">
    <span role="heading" aria-level="2">.NET 平台上的开源模型训练与推理进展</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="net-平台上的开源模型训练与推理进展">.NET 平台上的开源模型训练与推理进展</h1>
<p>作者：痴者工良</p>
<p>博客：<a href="https://www.whuanle.cn" target="_blank" rel="noopener nofollow">https://www.whuanle.cn</a></p>
<p>电子书仓库：<a href="https://github.com/whuanle/cs_pytorch" target="_blank" rel="noopener nofollow">https://github.com/whuanle/cs_pytorch</a></p>
<p>Maomi.Torch 项目仓库：<a href="https://github.com/whuanle/Maomi.Torch" target="_blank" rel="noopener nofollow">https://github.com/whuanle/Maomi.Torch</a></p>
<h2 id="一-net-ai-生态概述">一、 .NET AI 生态概述</h2>
<h3 id="背景介绍">背景介绍</h3>
<p>.NET 生态系统已经成为支持多种编程语言、多种平台和大量开发工具的强大生态系统。最近几年，随着人工智能和机器学习的迅猛发展，.NET 平台也相应地发展出了一系列支持模型训练、推理和部署的工具和框架，这使得开发者能够在熟悉的 .NET 环境中更高效地进行 AI 应用开发。</p>
<h3 id="net-ai-生态图">.NET AI 生态图</h3>
<p><img src="https://img2024.cnblogs.com/blog/1315495/202504/1315495-20250410084744221-2147275459.png" alt="" loading="lazy"></p>
<h4 id="机器学习和数据科学库machine-learning-and-data-science-libraries">机器学习和数据科学库（Machine Learning and Data Science Libraries）</h4>
<h5 id="mathnetnumerics">MathNet.Numerics</h5>
<p>支持: 社区支持，成熟稳定。</p>
<p>Star: <code>3.6k</code></p>
<p>Github: <a href="https://github.com/mathnet/mathnet-numerics" target="_blank" rel="noopener nofollow">https://github.com/mathnet/mathnet-numerics</a></p>
<p>NET Numerics 是 Math.NET 计划的数值基础，旨在为科学、工程和日常使用中的数值计算提供方法和算法。涵盖的主题包括特殊函数，线性代数，概率模型，随机数，统计，插值，积分，回归，曲线拟合，积分变换 (FFT) 等。</p>
<h4 id="深度学习框架deep-learning-frameworks">深度学习框架（Deep Learning Frameworks）</h4>
<h5 id="mlnet">ML.NET</h5>
<p>支持: Microsoft 官方支持，成熟的项目，生态强势、社区活跃、应用广泛。</p>
<p>Star: <code>9.1k</code></p>
<p>Github: <a href="https://github.com/dotnet/machinelearning" target="_blank" rel="noopener nofollow">https://github.com/dotnet/machinelearning</a></p>
<p>ML.NET 是一个跨平台的开源机器学习框架，专为 .NET 开发者设计，提供丰富的工具和API，涵盖模型训练、评估和部署等整个流程，支持回归、分类、聚类及自然语言处理等多种任务，帮助开发者在熟悉的 .NET 环境中高效构建和优化 AI 解决方案。</p>
<h5 id="tensorflownet">TensorFlow.NET</h5>
<p>支持: SciSharp 支持，成熟的项目，社区生态和应用领域都很好。</p>
<p>Star: <code>3.3k</code></p>
<p>Github: <a href="https://github.com/SciSharp/TensorFlow.NET" target="_blank" rel="noopener nofollow">https://github.com/SciSharp/TensorFlow.NET</a></p>
<p>TensorFlow.NET 的目标是在 C# 中实现全面的 TensorFlow API，便于 .NET 开发者开发、训练和部署跨平台的机器学习模型。</p>
<h5 id="torchsharp">TorchSharp</h5>
<p>支持: dotnet 开源社区支持，不成熟，生态较差、跟不上发展、应用领域太少、应用开发局限。</p>
<p>Star: <code>1.5k</code></p>
<p>Github: <a href="https://github.com/dotnet/TorchSharp" target="_blank" rel="noopener nofollow">https://github.com/dotnet/TorchSharp</a></p>
<p>TorchSharp 通过绑定 libtorch 实现利用与 Pytorch 类似功能的深度学习框架。</p>
<h4 id="ai-推理平台和工具ai-inference-platforms-and-tools">AI 推理平台和工具（AI Inference Platforms and Tools）</h4>
<h5 id="onnx-runtime">ONNX Runtime</h5>
<p>支持: Microsoft 官方支持，成熟的项目，生态强势、社区活跃、应用广泛，支持 C#、C++、Python 等。</p>
<p>Star: <code>16k</code></p>
<p>Github: <a href="https://github.com/microsoft/onnxruntime" target="_blank" rel="noopener nofollow">https://github.com/microsoft/onnxruntime</a></p>
<p>ONNX 运行时是一个跨平台的推理和训练机器学习加速器，可以提供更快的客户体验和更低的成本，它能够通过灵活的接口集成特定硬件库，支持的模型包括来自 PyTorch、TensorFlow/Keras、TFLite 和 Scikit-Learn 等框架。</p>
<h5 id="其它">其它</h5>
<p>LLamaSharp: <a href="https://github.com/SciSharp/LLamaSharp" target="_blank" rel="noopener nofollow">https://github.com/SciSharp/LLamaSharp</a></p>
<p>OllamaSharp: <a href="https://github.com/awaescher/OllamaSharp" target="_blank" rel="noopener nofollow">https://github.com/awaescher/OllamaSharp</a></p>
<h4 id="ai-sdk-和-框架ai-sdks-and-frameworks">AI SDK 和 框架（AI SDKs and Frameworks）</h4>
<h5 id="semantic-kernel">Semantic Kernel</h5>
<p>社区：Microsoft 官方支持，生态非常好，功能强劲，支持 C#、Python 等语言。</p>
<p>Star: <code>23k</code></p>
<p>Github: <a href="https://github.com/microsoft/semantic-kernel" target="_blank" rel="noopener nofollow">https://github.com/microsoft/semantic-kernel</a></p>
<p>Semantic Kernel是一个 SDK，它集成了大型语言模型 (LLM) ，如 OpenAI、 Azure OpenAI 和 Hugging Face。</p>
<h5 id="kernel-memory">kernel memory</h5>
<p>社区：Microsoft 官方支持，生态较好，功能强劲。</p>
<p>Star: <code>1.8k</code></p>
<p>Github: <a href="https://github.com/microsoft/kernel-memory" target="_blank" rel="noopener nofollow">https://github.com/microsoft/kernel-memory</a></p>
<p>此存储库提供了特定 AI 和 LLM 应用场景中的 Memory 的最佳实践和参考实现，主要包括文档处理、内容检索、RAG 等能力。</p>
<h4 id="ai-应用ai-application">AI 应用（AI Application）</h4>
<p>AntSK : <a href="https://github.com/AIDotNet/AntSK" target="_blank" rel="noopener nofollow">https://github.com/AIDotNet/AntSK</a></p>
<p>fast-wiki: <a href="https://github.com/AIDotNet/fast-wiki" target="_blank" rel="noopener nofollow">https://github.com/AIDotNet/fast-wiki</a></p>
<h2 id="二torchsharp">二、TorchSharp</h2>
<h3 id="torchsharp简介">TorchSharp简介</h3>
<p>TorchSharp 是由 .NET 开源基金会主导开发的项目，旨在为 .NET 社区带来 PyTorch 类似的深度学习开发体验，目前主要在主要提供图像识别领域接口，在自然语言处理、语音识别和合成领域没有成熟的案例。</p>
<h4 id="为什么使用-pytorch">为什么使用 PyTorch</h4>
<ul>
<li>目前 Pytorch 是 AI 社区中使用最广泛的深度学习框架，有强大的社区支持和丰富的资源，包括教程、示例和预训练模型。</li>
<li>拥有丰富的生态系统和工具，如 torchvision、torchaudio 和 torchtext，用于各种数据处理任务。</li>
<li>Pytorch 拥有高度模块化和可扩展的设计，使其易于研究和开发。</li>
<li>与其他流行框架（如 TensorFlow、Onnx Runtime）的互操作性较强，方便迁移和集成。</li>
<li>深入的硬件支持，从 GPU 到 TPU，再到基于 AI 的专用加速器。</li>
<li>被许多世界顶尖的研究机构和工业界公司使用和认可，确保其前沿技术和稳定性。</li>
</ul>
<p>在主流 AI 模型仓库中大多数 Pytorch 格式的模型。</p>
<p><a href="https://huggingface.co/models" target="_blank" rel="noopener nofollow">https://huggingface.co/models</a></p>
<p><a href="https://www.modelscope.cn/models" target="_blank" rel="noopener nofollow">https://www.modelscope.cn/models</a></p>
<p><img src="https://img2024.cnblogs.com/blog/1315495/202504/1315495-20250410084757364-1970242373.png" alt="" loading="lazy"></p>
<h3 id="pytorch-和-torchsharp-对比">Pytorch 和 TorchSharp 对比</h3>
<h5 id="pytorch-能力">Pytorch 能力</h5>
<p><strong>计算机视觉</strong></p>
<p><code>视觉检测跟踪</code>、<code>光学字符识别</code>、<code>人脸人体</code>、<code>视觉分类</code>、<code>视觉编辑</code>、<code>视觉分割</code>、<code>视觉生成</code>、<code>视觉表征</code>、<code>视觉评价</code>、<code>底层视觉</code>、<code>三维视觉</code>、<code>基础模型应用</code>、<code>自然语言处理</code></p>
<p><strong>文本分类</strong></p>
<p><code>文本生成</code>、<code>分词</code>、<code>命名实体识别</code>、<code>翻译</code>、<code>文本摘要</code>、<code>句子相似度</code>、<code>预训练</code>、<code>自然语言推理</code>、<code>文本纠错</code>、<code>文本向量</code>、<code>特征抽取</code>、<code>情感分析</code>、<code>关系抽取</code>、<code>零样本分类</code>、<code>表格问答</code>、<code>问答</code>、<code>词性标注</code>、<code>实体分类</code>、<code>序列标注</code>、<code>任务型对话</code></p>
<p><strong>语音</strong></p>
<p><code>语音识别</code>、<code>语音合成</code>、<code>语音唤醒</code>、<code>语音降噪</code>、<code>回声消除</code>、<code>语音分离</code>、<code>音频分类</code>、<code>音频生成</code>、<code>说话人确认</code>、<code>说话人日志</code>、<code>标点预测</code>、<code>时间戳预测</code>、<code>语音端点检测</code>、<code>困惑度计算</code>、<code>语音语种识别</code>、<code>音频量化编码</code>、<code>音视频语音识别</code>、<code>情绪识别</code>、<code>逆文本正则化</code></p>
<h5 id="对比">对比</h5>
<p>Pytorch</p>
<ul>
<li>计算机视觉（Computer Vision）</li>
<li>自然语言处理 (NLP)</li>
<li>生成型人工智能（Generative AI）</li>
<li>图形机器学习（Graph Machine Learning）</li>
</ul>
<p>TorchSharp</p>
<ul>
<li>计算机视觉（Computer Vision）</li>
<li>其它能力 TorchVision、TorchAudio、TorchScript 功能不完善，案例非常少。</li>
</ul>
<h3 id="torchsharp-进行模型训练的过程">TorchSharp 进行模型训练的过程</h3>
<div class="mermaid">graph LR
    A[数据收集] --&gt; B[数据准备]
    B --&gt; C[特征工程]
    C --&gt; D[模型选择]
    D --&gt; E[模型训练]
    E --&gt; F[模型评估]
    F --&gt; G[输出模型]
    
    subgraph 训练
      A
      B
      C
      D
      E
      F
    end
</div><h4 id="数据集">数据集</h4>
<p><a href="https://opendatalab.com/" target="_blank" rel="noopener nofollow">https://opendatalab.com/</a></p>
<pre><code>├─test
│  ├─airplane
│  ├─automobile
│  ├─bird
│  ├─cat
│  ├─deer
│  ├─dog
│  ├─frog
│  ├─horse
│  ├─ship
│  └─truck
└─train
│  ├─airplane
│  ├─automobile
│  ├─bird
│  ├─cat
│  ├─deer
│  ├─dog
│  ├─frog
│  ├─horse
│  ├─ship
│  └─truck
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1315495/202504/1315495-20250410084811294-277944170.png" alt="" loading="lazy"></p>
<h4 id="定义神经网络架构">定义神经网络架构</h4>
<p>根据需求设计神经网络架构或使用开源网络架构。</p>
<p>案例代码教程地址：<a href="https://torch.whuanle.cn/02.start/02.start_torch.html" target="_blank" rel="noopener nofollow">https://torch.whuanle.cn/02.start/02.start_torch.html</a></p>
<pre><code class="language-csharp">using TorchSharp.Modules;
using static TorchSharp.torch;
using nn = TorchSharp.torch.nn;

public class NeuralNetwork : nn.Module&lt;Tensor, Tensor&gt;
{
    // 传递给基类的参数是模型的名称
    public NeuralNetwork() : base(nameof(NeuralNetwork))
    {
        flatten = nn.Flatten();
        linear_relu_stack = nn.Sequential(
            nn.Linear(28 * 28, 512),
            nn.ReLU(),
            nn.Linear(512, 512),
            nn.ReLU(),
            nn.Linear(512, 10));

        // C# 版本需要调用这个函数，将模型的组件注册到模型中
        RegisterComponents();
    }

    Flatten flatten;
    Sequential linear_relu_stack;

    public override Tensor forward(Tensor input)
    {
        // 将输入一层层处理并传递给下一层
        var x = flatten.call(input);
        var logits = linear_relu_stack.call(x);
        return logits;
    }
}
</code></pre>
<p>TorchSharp 自带的网络架构：</p>
<pre><code>alexnet
googlenet
inception_v3
mobilenet_v2
mobilenet_v3_large
mobilenet_v3_small
resnet18
resnet34
resnet50
wide_resnet50_2
resnext50_32x4d
resnet101
resnext101_32x8d
resnext101_64x4d
wide_resnet101_2
resnet152
vgg11
vgg11_bn
vgg13
vgg13_bn
vgg16
vgg16_bn
vgg19
vgg19_bn
</code></pre>
<h4 id="训练模型">训练模型</h4>
<pre><code class="language-csharp">static void Train(DataLoader dataloader, NeuralNetwork model, CrossEntropyLoss loss_fn, SGD optimizer)
{
    var size = dataloader.dataset.Count;
    model.train();

    int batch = 0;
    foreach (var item in dataloader)
    {
        var x = item["data"];
        var y = item["label"];

        // 第一步
        // 训练当前图片
        var pred = model.call(x);

        // 通过损失函数得出与真实结果的误差
        var loss = loss_fn.call(pred, y);

        // 第二步，反向传播
        loss.backward();

        // 计算梯度并优化参数
        optimizer.step();

        // 清空优化器当前的梯度
        optimizer.zero_grad();

        // 每 100 次打印损失值和当前训练的图片数量
        if (batch % 100 == 0)
        {
            loss = loss.item&lt;float&gt;();

            // Pytorch 框架会在 x.shape[0] 存储当前批的位置
            var current = (batch + 1) * x.shape[0];

            Console.WriteLine("loss: {loss.item&lt;float&gt;(),7}  [{current,5}/{size,5}]");
        }

        batch++;
    }
}
</code></pre>
<h3 id="torchsharp-案例">TorchSharp 案例</h3>
<p><a href="https://torch.whuanle.cn" target="_blank" rel="noopener nofollow">https://torch.whuanle.cn</a></p>
<blockquote>
<p>深度学习基础知识和 TorchSharp 教程。</p>
</blockquote>
<p><a href="https://github.com/dotnet/TorchSharp/network/dependents" target="_blank" rel="noopener nofollow">https://github.com/dotnet/TorchSharp/network/dependents</a></p>
<blockquote>
<p>使用 TorchSharp 开的项目。</p>
</blockquote>
<p><a href="https://github.com/IntptrMax/YoloSharp" target="_blank" rel="noopener nofollow">https://github.com/IntptrMax/YoloSharp</a></p>
<blockquote>
<p>用 TorchSharp 实现 C # 中的 Yolo 模型，支持 yolov8、yolov11，可以直接使用 <code>.pt</code> 模型。</p>
</blockquote>
<p><a href="https://github.com/IntptrMax/StableDiffusionSharp/tree/master/StableDiffusionSharp" target="_blank" rel="noopener nofollow">https://github.com/IntptrMax/StableDiffusionSharp/tree/master/StableDiffusionSharp</a></p>
<blockquote>
<p>能够加载 StableDiffusion 的模型（safetensors 格式）并工具提示词生成图像。</p>
</blockquote>
<h3 id="未来展望">未来展望</h3>
<h4 id="计算机视觉">计算机视觉</h4>
<ul>
<li>图像分类</li>
<li>目标检测和图像分割</li>
<li>物体追踪、人体（身体、面部、手势）分析</li>
<li>图像处理、图像生成</li>
</ul>
<h4 id="语音及音频处理">语音及音频处理</h4>
<p>这类模型使用音频数据来训练模型，这些模型可以识别声音、生成音乐。</p>
<ul>
<li>语音识别</li>
<li>语音合成</li>
</ul>
<h4 id="自然语言处理">自然语言处理</h4>
<p>大语言模型。</p>
<ul>
<li>机器理解</li>
<li>机器翻译</li>
<li>语言建模</li>
</ul>
<h2 id="三mlnet简介">三、ML.NET简介</h2>
<p>ONNX Runtime 是一个高性能推理引擎，用于执行通过 ONNX 格式表示的机器学习模型，提供数据处理、模型训练、模型评估和推理等功能，支持多种机器学习任务。</p>
<p>ML.NET 是一个开源的跨平台机器学习框架，专门为 .NET 开发者提供易用的工具和算法库来构建和部署机器学习模型。</p>
<p>优点：</p>
<ul>
<li><strong>易于集成</strong> ：ML.NET 可以轻松集成到现有的 .NET 应用程序中，无需离开 .NET 环境。</li>
<li><strong>跨平台支持</strong> ：ML.NET 支持在 Windows、Linux 和 macOS 上运行，具备良好的跨平台兼容性。</li>
<li><strong>对性能要求不高</strong> ：ML.NET 针对性能进行了优化，可以在性能不高的环境中运行，适合各种应用场景。</li>
<li><strong>CPU 和 GPU 支持</strong> ：ML.NET 可以在 CPU 上运行，也可以利用 GPU 进行加速，适合不同硬件条件的应用。</li>
<li><strong>嵌入式设备支持</strong> ：ML.NET 可以在一些嵌入式设备上运行，提供更广泛的硬件兼容性。</li>
<li><strong>扩展性</strong> ：ML.NET 允许集成其它机器学习库（如 TensorFlow 和 ONNX），使得开发者可以使用最先进的机器学习技术。</li>
<li><strong>自动化机器学习</strong> ：ML.NET 包含 AutoML 功能，可以自动化地选择和调优模型，减少了机器学习过程中的人工干预。</li>
<li><strong>丰富的算法支持</strong> ：ML.NET 支持多种机器学习算法，包括分类、回归、聚类、推荐等多类型算法，满足不同的业务需求。</li>
<li><strong>易于使用</strong> ：提供了丰富的 API 和文档，开发者可以快速上手，学习曲线相对较低。</li>
<li><strong>社区支持</strong> ：作为一个开源项目，ML.NET 拥有一个活跃的社区，开发者可以获得支持并参与到项目的改进中。</li>
</ul>
<div class="mermaid">graph LR
    F[模型文件] --&gt; G[载入模型]
    
    G --&gt; H[输入数据准备]
    H --&gt; I[进行推理]
    I --&gt; J[输出结果处理]
    
    subgraph 推理
      G
      H
      I
      J
    end
</div><h3 id="功能">功能</h3>
<ul>
<li>分类（Classification）</li>
<li>回归（Regression）</li>
<li>聚类（Clustering）</li>
<li>推荐系统（Recommendation）</li>
<li>排序（Ranking）</li>
<li>异常检测（Anomaly Detection）</li>
<li>图像处理（Image Processing）</li>
<li>文本处理（Text Processing）</li>
<li>时间序列预测（Time Series Forecasting）</li>
</ul>
<h3 id="案例">案例</h3>
<h4 id="mlnet-官方示例">ML.NET 官方示例</h4>
<p>官方仓库:  <a href="https://github.com/dotnet/machinelearning-samples" target="_blank" rel="noopener nofollow">https://github.com/dotnet/machinelearning-samples</a></p>
<ol>
<li><strong>情绪分析</strong>: 使用二进制分类算法分析客户评论情感。</li>
<li><strong>产品推荐</strong>: 使用矩阵分解算法根据购买历史推荐产品。</li>
<li><strong>价格预测</strong>: 使用回归算法预测出租车费用。</li>
<li><strong>客户细分</strong>: 使用聚类分析算法识别客户组。</li>
<li><strong>目标检测</strong>: 使用 ONNX 模型识别图像中的对象。</li>
<li><strong>欺诈检测</strong>: 使用二进制分类算法检测欺诈交易。</li>
<li><strong>销售高峰检测</strong>: 使用异常情况检测模型识别销售高峰。</li>
<li><strong>图像分类</strong>: 使用 TensorFlow 模型对图像分类。</li>
<li><strong>销售预测</strong>: 使用回归算法预测未来销量。</li>
</ol>
<h4 id="phi-系列模型案例">Phi 系列模型案例</h4>
<p>项目地址: <a href="https://github.com/microsoft/PhiCookBook" target="_blank" rel="noopener nofollow">https://github.com/microsoft/PhiCookBook</a></p>
<p><img src="https://img2024.cnblogs.com/blog/1315495/202504/1315495-20250410084823041-2057635791.png" alt="" loading="lazy"></p>
<p>部署推理 Phi-4-mini-instruct-onnx （32B，int4 量化），CPU：AMD 8745H，内存 32GB。</p>
<table>
<thead>
<tr>
<th>Hardware</th>
<th>ONNX</th>
<th>PyTorch</th>
<th>speedup</th>
</tr>
</thead>
<tbody>
<tr>
<td>RTX 4090 GPU</td>
<td>int4: 260.045 tokens/sec fp16: 97.463 tokens/se fp32: 19.320 tokens/sec</td>
<td>fp16: 43.957 tokens/sec</td>
<td>5x(fp16)</td>
</tr>
<tr>
<td>Intel Xeon Platinum 8272CL CPU</td>
<td>int4: 16.89 tokens/sec</td>
<td>fp32: 1.636 tokens/sec</td>
<td>10x</td>
</tr>
<tr>
<td>Intel Xeon Platinum 8573B CPU</td>
<td>int4: 23.978 tokens/sec</td>
<td>fp32: 4.479 tokens/sec</td>
<td>5.35X</td>
</tr>
<tr>
<td>AMD EPYC 7763v CPU</td>
<td>int4: 19.884 tokens/sec</td>
<td>fp32: 1.599 tokens/sec</td>
<td>12.4x</td>
</tr>
<tr>
<td>Intel Core Ultra 7 165H Laptop CPU</td>
<td>int4: 4.863 tokens/sec</td>
<td>fp32: 1.699 tokens/sec</td>
<td>2.8x</td>
</tr>
<tr>
<td>Intel i7 processor</td>
<td>int4: 3.474 tokens/sec fp32: 1.800 tokens/sec</td>
<td>fp32: 0.702 tokens/sec</td>
<td>4.85x</td>
</tr>
</tbody>
</table>
<p><img src="https://img2024.cnblogs.com/blog/1315495/202504/1315495-20250410085043495-1566747583.gif" alt="" loading="lazy"></p>
<h4 id="基于-mlnet-的开源项目">基于 ML.NET 的开源项目</h4>
<p>开源项目：</p>
<p><a href="https://github.com/gerardo-lijs/MachineLearning-ObjectDetect-WPF" target="_blank" rel="noopener nofollow">https://github.com/gerardo-lijs/MachineLearning-ObjectDetect-WPF</a></p>
<p><a href="https://github.com/dme-compunet/YoloSharp" target="_blank" rel="noopener nofollow">https://github.com/dme-compunet/YoloSharp</a></p>
<p><a href="https://github.com/NickSwardh/YoloDotNet" target="_blank" rel="noopener nofollow">https://github.com/NickSwardh/YoloDotNet</a></p>

</div>
<div id="MySignature" role="contentinfo">
    痴者工良(https://whuanle.cn)
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.011411260162037038" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-10 08:51">2025-04-10 08:50</span>&nbsp;
<a href="https://www.cnblogs.com/whuanle">痴者工良</a>&nbsp;
阅读(<span id="post_view_count">17</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18817790" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18817790);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18817790', targetLink: 'https://www.cnblogs.com/whuanle/p/18817790', title: '.NET 平台上的开源模型训练与推理进展' })">举报</a>
</div>
        