
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/DOMLX/p/18781187" title="发布于 2025-03-19 16:01">
    <span role="heading" aria-level="2">halcon 入门教程（二）Blob分析（二值化，联通区域，分割区域，提取区域）保姆级教程</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><span style="font-size: 14pt">原文作者：aircraft</span></p>
<p><span style="font-size: 14pt">原文链接：<a href="https://www.cnblogs.com/DOMLX/p/18781187" target="_blank">https://www.cnblogs.com/DOMLX/p/18781187</a></span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;<span style="font-size: 18px">有兴趣可以多看其他的halcon教程</span></p>
<p><span style="font-size: 18pt">&nbsp;<a id="cb_post_title_url" class="postTitle2 vertical-middle" title="发布于 2025-03-18 17:21" href="https://www.cnblogs.com/DOMLX/p/18779348">halcon 学习教程目录</a></span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt">　　　　　　<span style="font-size: 18px">OK，今天讲halcon入门教程第二篇，比较常用的一篇Blob分析（今天主要讲简单的，好理解的为主）,本篇的预处理就不详细讲了，想了解预处理的参考第一篇入门教程----------</span></span></p>
<p>&nbsp;</p>
<h1 class="postTitle"><a id="cb_post_title_url" class="postTitle2 vertical-middle" title="发布于 2025-03-18 17:17" href="https://www.cnblogs.com/DOMLX/p/18779326"><span>halcon 入门教程（一） 预处理图像 （图像平滑，图像增强，二值化，形态学分析）</span></a></h1>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt"><span style="font-size: 18px">　　最后也有两个实例代码，一个超简单的车牌字符的分割，一个入门最经典的豆子分割案例，而且每行代码我都会打上注释！！! 上来就是这么简单好学的示例就是让大家学起来有信心，不吃力，免得看的一脸懵逼就开始打退堂鼓觉得自己学不会那就蛋糕咯~。</span></span></p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt"><span style="font-size: 18px">主要的示例代码都在halcon的实例程序集Blob分析里的车牌分割 threshold.hdev 和 豆子分割计数 count_pellets.hdev<strong> <br></strong></span></span></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250319135815642-1368229187.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 18pt">一.Blob分析简介</span></strong></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="para_WzwJ3 summary_LJIiC MARK_MODULE" data-tag="paragraph" data-uuid="go0bqfwzmg" data-idx="">
<div class="para_WzwJ3 summary_LJIiC MARK_MODULE" data-tag="paragraph" data-uuid="go0bqfwzmg" data-idx=""><span style="font-size: 18px">Blob的定义：Blob是图像中具有相同或相似属性的连通区域（例如相同的灰度值、颜色或纹理）。</span></div>
<p>&nbsp;</p>
<div class="para_WzwJ3 summary_LJIiC MARK_MODULE" data-tag="paragraph" data-uuid="go0bqfwzmg" data-idx="">
<h3><span style="font-size: 14pt"><strong>Blob分析的步骤</strong></span></h3>
<ol>
<li>
<p>​<span style="font-size: 18px"><strong>预处理</strong>：</span></p>
<ul>
<li><span style="font-size: 18px">去噪（如高斯滤波、中值滤波）。</span></li>
<li><span style="font-size: 18px">增强对比度或调整光照不均。</span></li>
</ul>
</li>
<li>
<p>​<span style="font-size: 18px"><strong>二值化</strong>：</span></p>
<ul>
<li><span style="font-size: 18px">将图像转换为黑白二值图（例如通过阈值分割），使目标区域（Blob）与背景分离。</span></li>
</ul>
</li>
<li>
<p>​<span style="font-size: 18px"><strong>连通区域标记</strong>：</span></p>
<ul>
<li><span style="font-size: 18px">扫描图像，为每个连通区域分配唯一标签（如使用种子填充法或两次扫描算法）。</span></li>
</ul>
</li>
<li>
<p>​<span style="font-size: 18px"><strong>特征提取</strong>：</span></p>
<ul>
<li><span style="font-size: 18px"><span style="font-size: 18px"><span style="font-size: 18px">计算每个Blob的特征，例如：</span></span></span>
<ul>
<li><span style="font-size: 18px">​<strong>几何特征</strong>：面积、周长、质心、外接矩形、长宽比、圆形度。</span></li>
<li><span style="font-size: 18px">​<strong>灰度/颜色特征</strong>：平均灰度、颜色分布。</span></li>
<li><span style="font-size: 18px">​<strong>高阶特征</strong>：方向（主轴）、矩（用于形状描述）。</span></li>
</ul>
</li>
</ul>
</li>
<li>
<p><span style="font-size: 18px">​<strong>筛选与分析</strong>：</span></p>
<ul>
<li><span style="font-size: 18px">根据特征过滤无关区域（例如排除面积过小的噪声点）。</span></li>
<li><span style="font-size: 18px">分类或统计目标Blob的数量、位置、形状等。</span></li>
</ul>
</li>
</ol></div>
<p>&nbsp;</p>
<h3><span style="font-size: 14pt"><strong>Blob分析的优缺点</strong></span></h3>
<p><span style="font-size: 18px"><strong>1.优点：</strong></span></p>
<p><span style="font-size: 18px">灵活性高：Blob分析可以应用于多种类型的图像，包括高对比度图像、二维目标图像等。</span><br><span style="font-size: 18px">特征丰富：通过Blob分析，可以提取出多种特征，为后续的图像处理和分析提供丰富的信息。</span><br><span style="font-size: 18px">直观易懂：Blob分析的结果通常以图像的形式呈现出来，便于直观地了解和分析。</span><strong><br><br></strong></p>
<p><span style="font-size: 18px"><strong>2.缺点：</strong></span></p>
<p><span style="font-size: 18px">计算量大：Blob分析需要对图像中的每个像素进行逐点扫描和处理，因此计算量较大，处理速度相对较慢。</span><br><span style="font-size: 18px">对光源敏感：Blob分析的结果容易受到光源的影响，如光照强度、光照方向等。因此，在实际应用中需要确保光源的稳定性和一致性。</span><br><span style="font-size: 18px">局限性：Blob分析主要适用于具有明显灰度突变或颜色差异的图像区域。对于低对比度或颜色相近的图像区域，Blob分析的准确性可能会降低。</span><br><br></p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 18pt">二.Blob分析简单车牌分割实例和常用的算子学习</span></strong></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">先看示例，这样理解起来才比较快（图片可直接拿去用）：</span></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250319142212672-1846392990.bmp" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">提取车牌字符：</span></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250319142342251-746224665.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 18px">* 读取图像文件<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">audi2</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">到变量Audi2
read_image (Audi2, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">E:/学习测试/halcon/Blob分析/1.bmp</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 修复隔行扫描图像的奇数行伪影（消除交錯扫描效应） 图像增强 用一些其他滤波也可以 哪个效果好 用哪个要灵活
fill_interlace (Audi2, ImageFilled, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">odd</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)

</span>* 对图像进行阈值分割（<span style="color: rgba(128, 0, 128, 1)">0</span>-<span style="color: rgba(0, 0, 0, 1)">90灰度范围），提取较暗区域
threshold (ImageFilled, Region, </span><span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">90</span><span style="color: rgba(0, 0, 0, 1)">)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 将连通区域分割为独立区域（分离不连通的像素块）
connection (Region, ConnectedRegions)

</span>* 筛选宽度在30-70像素之间的区域（过滤过宽/<span style="color: rgba(0, 0, 0, 1)">过窄的干扰区域）
select_shape (ConnectedRegions, SelectedRegions, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">width</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">and</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">30</span>, <span style="color: rgba(128, 0, 128, 1)">70</span><span style="color: rgba(0, 0, 0, 1)">)

</span>* 进一步筛选高度在60-<span style="color: rgba(0, 0, 0, 1)">110像素之间的区域（聚焦字母特征）
select_shape (SelectedRegions, Letters, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">height</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">and</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">60</span>, <span style="color: rgba(128, 0, 128, 1)">110</span><span style="color: rgba(0, 0, 0, 1)">)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 将筛选后的多个独立区域合并为一个整体区域
union1 (Letters, RegionUnion)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 清空图形窗口准备显示结果
dev_clear_window ()

</span>*<span style="color: rgba(0, 0, 0, 1)"> 设置显示颜色为12色模式（多色高亮显示）
dev_set_colored (</span><span style="color: rgba(128, 0, 128, 1)">12</span><span style="color: rgba(0, 0, 0, 1)">)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 显示预处理后的图像背景
dev_display (ImageFilled)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 在背景图上叠加显示最终筛选的字母区域
dev_display (Letters)</span></span></pre>
</div>
<p>&nbsp;</p>
<p><span style="font-size: 18px">OK，非常简短的代码用来入门最好不过了。首先第一行我们先读取车牌图片进来</span></p>
<p><span style="font-size: 18px"><span style="font-size: 18px"><span style="color: rgba(0, 0, 0, 1)">read_image (Audi2, <span style="color: rgba(128, 0, 0, 1)">'<span style="color: rgba(128, 0, 0, 1)">E:/学习测试/halcon/Blob分析/1.bmp<span style="color: rgba(128, 0, 0, 1)">'<span style="color: rgba(0, 0, 0, 1)">)</span></span></span></span></span></span>（这是我保存图片的路径，你们填你们自己的好吧！）</span></p>
<p><span style="font-size: 18px">第二行使用图像增强算子<span style="font-size: 18px"><span style="color: rgba(0, 0, 0, 1)">fill_interlace（），这里增强也可以换起来的算子比如高斯，直方图均衡化和一些其他的都行。即使你把这行注释掉也没关系也不影响后面的分割字符。锦上添花罢了。</span></span></span></p>
<p><span style="font-size: 18px"><span style="font-size: 18px"><span style="color: rgba(0, 0, 0, 1)">第三行我们使用全局阈值分割算子<span style="font-size: 18px"><span style="color: rgba(0, 0, 0, 1)">threshold</span></span>对图像中灰度分布在0-90之间的图像区域，这边在halcon的HDevelop软件上把鼠标放在图片内就可以看到图像鼠标位置的灰度分布了，移动一下确定字符区域的灰度基本是在这个范围就直接提取他们出来。</span></span></span></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250319143219387-489188814.png" alt="" loading="lazy"></p>
<p><span style="font-size: 18px">看一下提取后的区域范围是：</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250319143410971-2041489592.png" alt="" loading="lazy"></p>
<p><span style="font-size: 18px">&nbsp;可以看到提取了很多其他区域一起进来，而这时候我们就要对其进行分割选取，真正得到我们想要的一个字符区域。</span></p>
<p><span style="font-size: 18px">先使用connection（）算子，这个算子的作用是在阈值提取后，将一个总的区域划分成一个个不连通小区域，只要字母在图上与其他区域没有连接在一起，经过这个算子函数后都会变成一个个单独的小区域，存放在区域数组里。将一个个小区域联通起来就是union算子了。</span></p>
<p><span style="font-size: 18px">接下来我们使用select_shape（）算子，这个算子主要就是用来筛选作用的，筛选出符合你需要特征的区域。这里选择的是width宽度属性，宽度在30-70个像素点之间的区域。</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250319144010355-1146126193.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">&nbsp;宽度筛选后还多了个圆圈的东西在上面，那我们就要进行二次筛选，在第一次筛选后的区域数组里继续使用<span style="font-size: 18px">select_shape（）算子</span>筛选height高度在60-110个像素之间的区域提取。不知道怎么看高度宽度的，鼠标放在图上右下角有鼠标位置的行列坐标，移动一下就知道了。</span></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250319144215412-1416730792.png" alt="" loading="lazy"></p>
<p><span style="font-size: 18px">OK，经过了两次筛选，以及将字符区域都提取出来了。最后用union1（）算子合并成整体显示一下，该示例就结束了，非常简单好理解。</span></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250319151526060-708281898.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250319151650098-1707454364.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">上面的程序的大概意思理解一下就行了，就是为了学习起来有信心，现在详细的看看一些常用的算子：</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 14pt">&nbsp;<strong>1.全局阈值分割算子</strong><strong>threshold</strong>(<a href="#Image" rel="noopener nofollow"><em>Image</em></a>&nbsp;:&nbsp;<a href="#Region" rel="noopener nofollow"><em>Region</em></a>&nbsp;:&nbsp;<a href="#MinGray" rel="noopener nofollow"><em>MinGray</em></a>,&nbsp;<a href="#MaxGray" rel="noopener nofollow"><em>MaxGray</em></a>&nbsp;: )详解：</span></p>
<div class="para_WzwJ3 summary_LJIiC MARK_MODULE" data-tag="paragraph" data-uuid="go0bqfwzmg" data-idx="">
<ul>
<li><span style="font-size: 18px"><span style="font-size: 18px"><strong>输入参数</strong>：</span></span>
<ul>
<li><span style="font-size: 18px"><code>Image</code>：输入图像（单通道灰度图像）。</span></li>
<li><span style="font-size: 18px"><code>MinGray</code>, <code>MaxGray</code>：灰度阈值范围，闭区间 <code>[MinGray, MaxGray]</code>。</span></li>
</ul>
</li>
<li><span style="font-size: 18px"><span style="font-size: 18px">​<strong>输出参数</strong>：</span></span>
<ul>
<li><span style="font-size: 18px"><code>Region</code>：输出区域，包含所有灰度值在阈值范围内的像素。白话将就是提取灰度在<span style="font-size: 18px"><code>MinGray</code>到<span style="font-size: 18px"><code>MaxGray</code>之间的像素区域</span></span></span></li>
</ul>
</li>
</ul>
</div>
<p>&nbsp;</p>
<div class="para_WzwJ3 summary_LJIiC MARK_MODULE" data-tag="paragraph" data-uuid="go0bqfwzmg" data-idx="">&nbsp;</div>
<div class="para_WzwJ3 summary_LJIiC MARK_MODULE" data-tag="paragraph" data-uuid="go0bqfwzmg" data-idx=""><span class="text_tJaKK" style="font-size: 18px" data-text="true"><span class="text_tJaKK bold_wJa3d" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true">实例代码：</span></span></span></span></span></span></span></span></span></span></span></span></span></div>
<div class="para_WzwJ3 summary_LJIiC MARK_MODULE" data-tag="paragraph" data-uuid="go0bqfwzmg" data-idx="">
<div class="cnblogs_code">
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="font-size: 18px">*<span style="color: rgba(0, 0, 0, 1)"> 读取图像
read_image(Image, <span style="color: rgba(128, 0, 0, 1)">'<span style="color: rgba(128, 0, 0, 1)">metal_part.jpg<span style="color: rgba(128, 0, 0, 1)">'<span style="color: rgba(0, 0, 0, 1)">)

* 设定阈值范围（假设目标灰度在120-<span style="color: rgba(0, 0, 0, 1)">220之间）
threshold(Image, Region, <span style="color: rgba(128, 0, 128, 1)">120, <span style="color: rgba(128, 0, 128, 1)">220<span style="color: rgba(0, 0, 0, 1)">)

*<span style="color: rgba(0, 0, 0, 1)"> 显示分割结果
dev_display(Image)
dev_display(Region)</span></span></span></span></span></span></span></span></span></span></span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
</div>
<p>&nbsp;</p>
</div>
<p><span style="font-size: 14pt">&nbsp;<strong>2.局部阈值分割算子</strong><span class="text_tJaKK" style="font-size: 18px" data-text="true"><span class="text_tJaKK bold_wJa3d" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" style="font-size: 18px" data-text="true"><span class="text_tJaKK bold_wJa3d" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><strong>dyn_threshold</strong>(<a href="https://www.cnblogs.com/DOMLX/p/18779326#OrigImage" rel="noopener nofollow"><em>OrigImage</em></a>,&nbsp;<a href="https://www.cnblogs.com/DOMLX/p/18779326#ThresholdImage" rel="noopener nofollow"><em>ThresholdImage</em></a>&nbsp;:&nbsp;<a href="https://www.cnblogs.com/DOMLX/p/18779326#RegionDynThresh" rel="noopener nofollow"><em>RegionDynThresh</em></a>&nbsp;:&nbsp;<a href="https://www.cnblogs.com/DOMLX/p/18779326#Offset" rel="noopener nofollow"><em>Offset</em></a>,&nbsp;<a href="https://www.cnblogs.com/DOMLX/p/18779326#LightDark" rel="noopener nofollow"><em>LightDark</em></a>&nbsp;: )</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>详解：</span></p>
<p>&nbsp;</p>
<div class="para_WzwJ3 summary_LJIiC MARK_MODULE" data-tag="paragraph" data-uuid="go0bqfwzmg" data-idx="">
<ul>
<li><span style="font-size: 18px"><span style="font-size: 18px"><strong>输入参数</strong>：</span></span>
<ul>
<li><span style="font-size: 18px"><code>OrigImage</code>：原始输入图像（单通道灰度图像）。</span></li>
<li><span style="font-size: 18px"><code>ThresholdImage</code>：参考图像（通常为模糊后的图像，如高斯滤波或均值滤波结果）。</span></li>
<li><span style="font-size: 18px"><code>Offset</code>：阈值偏移量（用于放宽或收紧比较条件）。</span></li>
<li><span style="font-size: 18px"><code>LightDark</code>：比较模式，可选 <code>'light'</code>、<code>'dark'</code> 或 <code>'equal'</code>。</span></li>
</ul>
</li>
<li><span style="font-size: 18px"><span style="font-size: 18px">​<strong>输出参数</strong>：</span></span>
<ul>
<li><span style="font-size: 18px"><code>RegionDynThresh</code>：满足条件的区域。</span></li>
</ul>
</li>
</ul>
</div>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250319152105090-818900020.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<div class="para_WzwJ3 summary_LJIiC MARK_MODULE" data-tag="paragraph" data-uuid="go0bqfwzmg" data-idx=""><span class="text_tJaKK" style="font-size: 18px" data-text="true"><span class="text_tJaKK bold_wJa3d" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" style="font-size: 18px" data-text="true"><span class="text_tJaKK bold_wJa3d" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true">（解释的话这里假定参考图像就是做过均值滤波的图像，此函数适用于缺陷提取中总是存在图像灰度均匀区域中总有特别亮于此区域或者暗于此区域的瑕疵提取）</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></div>
<div class="para_WzwJ3 summary_LJIiC MARK_MODULE" data-tag="paragraph" data-uuid="go0bqfwzmg" data-idx=""><span class="text_tJaKK" style="font-size: 18px" data-text="true"><span class="text_tJaKK bold_wJa3d" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><code>LightDark</code>参数为<span style="font-size: 18px"><code>'light'</code>时意思就是：提取原图中相对于均值图像灰度值还要大<span style="font-size: 18px"><code>Offset</code>的灰度值像素区域。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></div>
<div class="para_WzwJ3 summary_LJIiC MARK_MODULE" data-tag="paragraph" data-uuid="go0bqfwzmg" data-idx=""><span class="text_tJaKK" style="font-size: 18px" data-text="true"><span class="text_tJaKK bold_wJa3d" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" style="font-size: 18px" data-text="true"><span class="text_tJaKK bold_wJa3d" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><code>LightDark</code>参数为<span style="font-size: 18px"><code>'dark'</code>时意思就是：提取原图中相对于均值图像灰度值还要<code>小</code><span style="font-size: 18px"><code>Offset</code>的灰度值像素区域。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></div>
<div class="para_WzwJ3 summary_LJIiC MARK_MODULE" data-tag="paragraph" data-uuid="go0bqfwzmg" data-idx="">
<div class="para_WzwJ3 summary_LJIiC MARK_MODULE" data-tag="paragraph" data-uuid="go0bqfwzmg" data-idx=""><span class="text_tJaKK" style="font-size: 18px" data-text="true"><span class="text_tJaKK bold_wJa3d" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" style="font-size: 18px" data-text="true"><span class="text_tJaKK bold_wJa3d" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><code>LightDark</code>参数为<span style="font-size: 18px"><code>'equal'</code>时意思就是：提取原图中相对于均值图像灰度值灰度差值在<span style="font-size: 18px"><code>Offset范围内</code>的灰度值像素区域。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></div>
</div>
<div class="para_WzwJ3 summary_LJIiC MARK_MODULE" data-tag="paragraph" data-uuid="go0bqfwzmg" data-idx="">&nbsp;</div>
<div class="para_WzwJ3 summary_LJIiC MARK_MODULE" data-tag="paragraph" data-uuid="go0bqfwzmg" data-idx=""><span class="text_tJaKK" style="font-size: 18px" data-text="true"><span class="text_tJaKK bold_wJa3d" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true">实例代码：</span></span></span></span></span></span></span></span></span></span></span></span></span></div>
<div class="para_WzwJ3 summary_LJIiC MARK_MODULE" data-tag="paragraph" data-uuid="go0bqfwzmg" data-idx="">
<div class="cnblogs_code">
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="font-size: 18px">read_image(OrigImage, <span style="color: rgba(128, 0, 0, 1)">'<span style="color: rgba(128, 0, 0, 1)">scratched_metal.jpg<span style="color: rgba(128, 0, 0, 1)">'<span style="color: rgba(0, 0, 0, 1)">)
*<span style="color: rgba(0, 0, 0, 1)"> 生成参考图像（高斯模糊）
gauss_filter(OrigImage, ThresholdImage, <span style="color: rgba(128, 0, 128, 1)">15<span style="color: rgba(0, 0, 0, 1)">)
*<span style="color: rgba(0, 0, 0, 1)"> 动态阈值分割（提取暗缺陷）
dyn_threshold(OrigImage, ThresholdImage, Scratches, <span style="color: rgba(128, 0, 128, 1)">10, <span style="color: rgba(128, 0, 0, 1)">'<span style="color: rgba(128, 0, 0, 1)">dark<span style="color: rgba(128, 0, 0, 1)">'<span style="color: rgba(0, 0, 0, 1)">)
*<span style="color: rgba(0, 0, 0, 1)"> 显示结果
dev_display(OrigImage)
dev_display(Scratches)</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 14pt"><strong>3.<strong>自动阈值分割</strong>算子</strong><span class="text_tJaKK" style="font-size: 18px" data-text="true"><span class="text_tJaKK bold_wJa3d" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" style="font-size: 18px" data-text="true"><span class="text_tJaKK bold_wJa3d" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><strong>binary_threshold</strong>(<a href="#Image" rel="noopener nofollow"><em>Image</em></a>&nbsp;:&nbsp;<a href="#Region" rel="noopener nofollow"><em>Region</em></a>&nbsp;:&nbsp;<a href="#Method" rel="noopener nofollow"><em>Method</em></a>,&nbsp;<a href="#LightDark" rel="noopener nofollow"><em>LightDark</em></a>&nbsp;:&nbsp;<a href="#UsedThreshold" rel="noopener nofollow"><em>UsedThreshold</em></a>)详解：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>&nbsp;</p>
<ul>
<li><span style="font-size: 18px"><strong>输入参数</strong>：</span>
<ul>
<li><span style="font-size: 18px"><code>Image</code>：单通道灰度图像（需处理图像）。</span></li>
<li><span style="font-size: 18px"><code>Method</code>：阈值选择方法（如 <code>'smooth'</code> 或 <code>'max_separability'</code>）。</span></li>
<li><span style="font-size: 18px"><code>LightDark</code>：提取区域类型（<code>'light'</code> 提取亮区域，<code>'dark'</code> 提取暗区域）。</span></li>
</ul>
</li>
<li><span style="font-size: 18px">​<strong>输出参数</strong>：</span>
<ul>
<li><span style="font-size: 18px"><code>Region</code>：二值化后的目标区域。</span></li>
<li><span style="font-size: 18px"><code>UsedThreshold</code>：算法自动计算的实际阈值（可输出用于调试）。</span></li>
</ul>
</li>
</ul>
<h3><span style="font-size: 18px"><strong>核心功能</strong></span></h3>
<ol>
<li><span style="font-size: 18px">​<strong>自动阈值分割</strong>：</span>
<ul>
<li><span style="font-size: 18px">根据图像直方图特性，自动选择最佳阈值分离目标与背景。</span></li>
</ul>
</li>
<li><span style="font-size: 18px">​<strong>适用场景</strong>：</span>
<ul>
<li>​<span style="font-size: 18px"><strong>工业检测</strong>：分离零件与背景（如金属表面缺陷检测）。</span></li>
<li><span style="font-size: 18px">​<strong>OCR预处理</strong>：提取深色文字或浅色背景。</span></li>
<li><span style="font-size: 18px">​<strong>生物医学</strong>：分割细胞或组织区域。</span></li>
</ul>
</li>
</ol>
<h3><span style="font-size: 18px"><strong>参数详解</strong></span></h3>
<h4><span style="font-size: 18px">1. ​**<code>Method</code>（阈值选择方法）​**</span></h4>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 18px">方法</span></th><th><span style="font-size: 18px">原理</span></th><th><span style="font-size: 18px">适用场景</span></th></tr>
</thead>
<tbody>
<tr>
<td><span style="font-size: 18px"><code>'max_separability'</code></span></td>
<td><span style="font-size: 18px">最大化前景与背景的类间方差（Otsu算法）</span></td>
<td><span style="font-size: 18px">高对比度图像，双峰直方图</span></td>
</tr>
<tr>
<td><span style="font-size: 18px"><code>'smooth'</code></span></td>
<td><span style="font-size: 18px">平滑直方图后寻找最大曲率点（类似Renyi熵法）</span></td>
<td><span style="font-size: 18px">渐變背景，目标边缘清晰</span></td>
</tr>
<tr>
<td><span style="font-size: 18px"><code>'between_clusters'</code></span></td>
<td><span style="font-size: 18px">基于聚类分析选择阈值（类似k-means）</span></td>
<td><span style="font-size: 18px">多目标复杂场景</span></td>
</tr>
</tbody>
</table>
</div>
<h4><span style="font-size: 18px">2. ​**<code>LightDark</code>（区域极性）​**</span></h4>
<ul>
<li><span style="font-size: 18px"><code>'light'</code>：提取<strong>高于阈值</strong>的亮区域（如白色零件、反光缺陷）。</span></li>
<li><span style="font-size: 18px"><code>'dark'</code>：提取<strong>低于阈值</strong>的暗区域（如黑色文字、深色污渍）。</span></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3><span style="font-size: 18px"><strong>与其他阈值算子对比</strong></span></h3>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 18px">算子</span></th><th><span style="font-size: 18px">优点</span></th><th><span style="font-size: 18px">缺点</span></th></tr>
</thead>
<tbody>
<tr>
<td><span style="font-size: 18px"><code>binary_threshold</code></span></td>
<td><span style="font-size: 18px">全自动，适合快速部署</span></td>
<td><span style="font-size: 18px">依赖直方图分布</span></td>
</tr>
<tr>
<td><span style="font-size: 18px"><code>threshold</code></span></td>
<td><span style="font-size: 18px">手动控制范围，灵活</span></td>
<td><span style="font-size: 18px">需人工干预，效率低</span></td>
</tr>
<tr>
<td><span style="font-size: 18px"><code>auto_threshold</code></span></td>
<td><span style="font-size: 18px">多阈值分割</span></td>
<td><span style="font-size: 18px">计算复杂，适用性受限</span></td>
</tr>
</tbody>
</table>
</div>
<p><br><br></p>
<p><span style="font-size: 18px">示例代码：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 18px">*<span style="color: rgba(0, 0, 0, 1)"> 读取图像并自动分割亮区域（如金属零件）
read_image(Image, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">metal_part.jpg</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
binary_threshold(Image, Region, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">max_separability</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">light</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, UsedThreshold)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 显示结果及实际阈值
dev_display(Image)
dev_set_color(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">red</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
dev_display(Region)
disp_message(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Used Threshold: </span><span style="color: rgba(128, 0, 0, 1)">'</span> + UsedThreshold, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">window</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">12</span>, <span style="color: rgba(128, 0, 128, 1)">12</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span>)</span></pre>
</div>
<br>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 14pt">&nbsp;4<strong>.分割联通区域算子</strong><span class="text_tJaKK" style="font-size: 18px" data-text="true"><span class="text_tJaKK bold_wJa3d" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" style="font-size: 18px" data-text="true"><span class="text_tJaKK bold_wJa3d" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><strong>connection</strong>(<a href="#Region" rel="noopener nofollow"><em>Region</em></a>&nbsp;:&nbsp;<a href="#ConnectedRegions" rel="noopener nofollow"><em>ConnectedRegions</em></a>&nbsp;: : )详解：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<ul>
<li><span style="font-size: 18px"><strong>输入参数</strong>：</span>
<ul>
<li><span style="font-size: 18px"><code>Region</code>：输入的二值化区域（可能包含多个连通或非连通的部分）。</span></li>


</ul>


</li>
<li><span style="font-size: 18px">​<strong>输出参数</strong>：</span>
<ul>
<li><span style="font-size: 18px"><code>ConnectedRegions</code>：输出的一组独立连通区域（每个连通区域作为一个单独对象存储）。</span></li>


</ul>


</li>


</ul>
<h3><span style="font-size: 18px"><strong>功能与作用</strong></span></h3>
<ol>
<li><span style="font-size: 18px">​<strong>区域分离</strong>：</span>
<ul>
<li><span style="font-size: 18px">将粘连或重叠的目标分离为独立区域（如分离接触的零件或字符）。一般配合阈值提取分割threshold算子后使用</span></li>


</ul>


</li>
<li><span style="font-size: 18px">​<strong>噪声过滤</strong>：</span>
<ul>
<li><span style="font-size: 18px">通过后续操作（如<code>select_shape</code>）筛选有效区域，去除孤立噪点。</span></li>


</ul>


</li>
<li><span style="font-size: 18px">​<strong>应用场景</strong>：</span>
<ul>
<li><span style="font-size: 18px">​<strong>OCR</strong>：分割图像中的独立字符。</span></li>
<li><span style="font-size: 18px">​<strong>目标计数</strong>：统计图像中的物体数量（如药片、细胞）。</span></li>
<li><span style="font-size: 18px">​<strong>缺陷检测</strong>：分离缺陷区域以便单独分析。</span></li>


</ul>


</li>


</ol>
<p><span style="font-size: 18px">示例代码：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 18px">*<span style="color: rgba(0, 0, 0, 1)"> 读取图像并二值化
read_image(Image, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">particles.jpg</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
threshold(Image, Region, </span><span style="color: rgba(128, 0, 128, 1)">128</span>, <span style="color: rgba(128, 0, 128, 1)">255</span><span style="color: rgba(0, 0, 0, 1)">)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 分割连通区域
connection(Region, ConnectedRegions)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 筛选面积大于100像素的区域
select_shape(ConnectedRegions, LargeRegions, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">area</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">and</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">100</span>, <span style="color: rgba(128, 0, 128, 1)">99999</span><span style="color: rgba(0, 0, 0, 1)">)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 显示结果
dev_display(Image)
dev_set_color(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">red</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
dev_display(LargeRegions)</span></span></pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 14pt">&nbsp;<strong>5.筛选区域算子</strong><span class="text_tJaKK" style="font-size: 18px" data-text="true"><span class="text_tJaKK bold_wJa3d" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" style="font-size: 18px" data-text="true"><span class="text_tJaKK bold_wJa3d" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><strong>select_shape</strong>(<a href="#Regions" rel="noopener nofollow"><em>Regions</em></a>&nbsp;:&nbsp;<a href="#SelectedRegions" rel="noopener nofollow"><em>SelectedRegions</em></a>&nbsp;:&nbsp;<a href="#Features" rel="noopener nofollow"><em>Features</em></a>,&nbsp;<a href="#Operation" rel="noopener nofollow"><em>Operation</em></a>,&nbsp;<a href="#Min" rel="noopener nofollow"><em>Min</em></a>,&nbsp;<a href="#Max" rel="noopener nofollow"><em>Max</em></a>&nbsp;: )详解：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>&nbsp;</p>
<ul>
<li><span style="font-size: 18px"><strong>输入参数</strong>：</span>
<ul>
<li><span style="font-size: 18px"><code>Regions</code>：待筛选的输入区域（通常来自 <code>connection</code> 或 <code>threshold</code> 等操作）。</span></li>
<li><span style="font-size: 18px"><code>Features</code>：筛选依据的几何特征（支持单特征或多特征组合）。</span></li>
<li><span style="font-size: 18px"><code>Operation</code>：逻辑运算符（<code>'and'</code>、<code>'or'</code>），用于多特征筛选时的逻辑组合。</span></li>
<li><span style="font-size: 18px"><code>Min</code>, <code>Max</code>：特征值的允许范围（闭区间 <code>[Min, Max]</code>）。</span></li>
</ul>
</li>
<li><span style="font-size: 18px">​<strong>输出参数</strong>：</span>
<ul>
<li><span style="font-size: 18px"><code>SelectedRegions</code>：符合筛选条件的区域集合。</span></li>
</ul>
</li>
</ul>
<h3><span style="font-size: 18px"><strong>核心功能</strong></span></h3>
<ol>
<li><span style="font-size: 18px">​<strong>特征筛选</strong>：</span>
<ul>
<li><span style="font-size: 18px">根据形状、尺寸或位置特征过滤区域，保留有效目标，去除噪声或干扰区域。</span></li>
</ul>
</li>
<li><span style="font-size: 18px">​<strong>应用场景</strong>：</span>
<ul>
<li><span style="font-size: 18px">​<strong>工业检测</strong>：筛选符合尺寸标准的零件。</span></li>
<li><span style="font-size: 18px">​<strong>OCR</strong>：提取特定宽高比的字符区域。</span></li>
<li><span style="font-size: 18px">​<strong>医学成像</strong>：分离符合生物学特征的细胞或组织。</span></li>
</ul>
</li>
</ol>
<p>&nbsp;</p>
<p><span style="font-size: 18px">以下参数都是举例常用的 算子内部还有很多参数可以去halcon算子手册里看</span></p>
<h4><span style="font-size: 18px">1. ​**<code>Features</code>（特征列表）​**</span></h4>
<div class="hyc-common-markdown__table-wrapper">
<table>
<thead>
<tr><th><span style="font-size: 18px">特征名称</span></th><th><span style="font-size: 18px">描述</span></th><th><span style="font-size: 18px">计算公式/说明</span></th></tr>
</thead>
<tbody>
<tr>
<td><span style="font-size: 18px"><code>'area'</code></span></td>
<td><span style="font-size: 18px">区域面积（像素数）</span></td>
<td><span style="font-size: 18px">直接统计像素数量</span></td>
</tr>
<tr>
<td><span style="font-size: 18px"><code>'width'</code></span></td>
<td><span style="font-size: 18px">区域外接矩形的宽度</span></td>
<td><span class="katex" style="font-size: 18px"><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6944em"><span class="mord text"><span class="mord">width<span class="mspace" style="margin-right: 0.2778em"><span class="mrel">=<span class="mspace" style="margin-right: 0.2778em"><span class="base"><span class="strut" style="height: 0.7333em; vertical-align: -0.15em"><span class="mord"><span class="mord mathnormal">c<span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em"><span style="top: -2.55em; margin-left: 0; margin-right: 0.05em"><span class="pstrut" style="height: 2.7em"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2<span class="vlist-s">​<span class="vlist-r"><span class="vlist" style="height: 0.15em"><span class="mspace" style="margin-right: 0.2222em"><span class="mbin">−<span class="mspace" style="margin-right: 0.2222em"><span class="base"><span class="strut" style="height: 0.7333em; vertical-align: -0.15em"><span class="mord"><span class="mord mathnormal">c<span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em"><span style="top: -2.55em; margin-left: 0; margin-right: 0.05em"><span class="pstrut" style="height: 2.7em"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1<span class="vlist-s">​<span class="vlist-r"><span class="vlist" style="height: 0.15em"><span class="mspace" style="margin-right: 0.2222em"><span class="mbin">+<span class="mspace" style="margin-right: 0.2222em"><span class="base"><span class="strut" style="height: 0.6444em"><span class="mord">1</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></td>
</tr>
<tr>
<td><span style="font-size: 18px"><code>'height'</code></span></td>
<td><span style="font-size: 18px">区域外接矩形的高度</span></td>
<td><span class="katex" style="font-size: 18px"><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em"><span class="mord text"><span class="mord">height<span class="mspace" style="margin-right: 0.2778em"><span class="mrel">=<span class="mspace" style="margin-right: 0.2778em"><span class="base"><span class="strut" style="height: 0.7333em; vertical-align: -0.15em"><span class="mord"><span class="mord mathnormal" style="margin-right: 0.02778em">r<span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em"><span style="top: -2.55em; margin-left: -0.0278em; margin-right: 0.05em"><span class="pstrut" style="height: 2.7em"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2<span class="vlist-s">​<span class="vlist-r"><span class="vlist" style="height: 0.15em"><span class="mspace" style="margin-right: 0.2222em"><span class="mbin">−<span class="mspace" style="margin-right: 0.2222em"><span class="base"><span class="strut" style="height: 0.7333em; vertical-align: -0.15em"><span class="mord"><span class="mord mathnormal" style="margin-right: 0.02778em">r<span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em"><span style="top: -2.55em; margin-left: -0.0278em; margin-right: 0.05em"><span class="pstrut" style="height: 2.7em"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1<span class="vlist-s">​<span class="vlist-r"><span class="vlist" style="height: 0.15em"><span class="mspace" style="margin-right: 0.2222em"><span class="mbin">+<span class="mspace" style="margin-right: 0.2222em"><span class="base"><span class="strut" style="height: 0.6444em"><span class="mord">1</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></td>
</tr>
<tr>
<td><span style="font-size: 18px"><code>'roundness'</code></span></td>
<td><span style="font-size: 18px">圆度（1表示完美圆，值越小越不规则）</span></td>
<td><span class="katex" style="font-size: 18px"><span class="katex-html"><span class="base"><span class="strut" style="height: 1.3339em; vertical-align: -0.4888em"><span class="mord"><span class="mopen nulldelimiter"><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.8451em"><span style="top: -2.6473em"><span class="pstrut" style="height: 3em"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">perimeter<span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height: 0.7753em"><span style="top: -2.815em; margin-right: 0.0714em"><span class="pstrut" style="height: 2.5em"><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2<span style="top: -3.23em"><span class="pstrut" style="height: 3em"><span class="frac-line" style="border-bottom-width: 0.04em"><span style="top: -3.394em"><span class="pstrut" style="height: 3em"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4<span class="mord mathnormal mtight" style="margin-right: 0.03588em">π<span class="mbin mtight">×<span class="mord text mtight"><span class="mord mtight">area<span class="vlist-s">​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></td>
</tr>
<tr>
<td><span style="font-size: 18px"><code>'compactness'</code></span></td>
<td><span style="font-size: 18px">紧凑度（类似圆度，计算方式不同）</span></td>
<td><span class="katex" style="font-size: 18px"><span class="katex-html"><span class="base"><span class="strut" style="height: 1.2772em; vertical-align: -0.345em"><span class="mord"><span class="mopen nulldelimiter"><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.9322em"><span style="top: -2.655em"><span class="pstrut" style="height: 3em"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">width<span style="top: -3.23em"><span class="pstrut" style="height: 3em"><span class="frac-line" style="border-bottom-width: 0.04em"><span style="top: -3.4461em"><span class="pstrut" style="height: 3em"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">height<span class="vlist-s">​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></td>
</tr>
<tr>
<td><span style="font-size: 18px"><code>'row'</code>, <code>'column'</code></span></td>
<td><span style="font-size: 18px">区域中心坐标</span></td>
<td><span style="font-size: 18px">基于区域重心计算</span></td>
</tr>
</tbody>
</table>
</div>
<h4><span style="font-size: 18px">2. ​**<code>Operation</code>（逻辑运算）​**</span></h4>
<ul>
<li><span style="font-size: 18px"><code>'and'</code>：所有特征条件<strong>同时满足</strong>​（交集）。</span></li>
<li><span style="font-size: 18px"><code>'or'</code>：任意特征条件满足（并集）。</span></li>
</ul>
<h4><span style="font-size: 18px">3. ​**<code>Min</code> 和 <code>Max</code>（范围阈值）​**</span></h4>
<ul>
<li><span style="font-size: 18px">定义特征值的有效区间，例如：</span>
<ul>
<li><span style="font-size: 18px">筛选面积在 100~500 像素的区域：<code>Features='area', Min=100, Max=500</code></span></li>
<li><span style="font-size: 18px">筛选宽度≥30且高度≤80的区域：<code>Features=['width','height'], Operation='and', Min=[30,0], Max=[9999,80]</code></span></li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<h4><span style="font-size: 18px">示例1：筛选面积在50-200像素的圆形区域</span></h4>
<div class="hyc-common-markdown__code">
<div class="cnblogs_code">
<pre><span style="font-size: 18px">*<span style="color: rgba(0, 0, 0, 1)"> 分割连通区域
connection(Region, ConnectedRegions)

</span>* 筛选圆形区域（圆度≥<span style="color: rgba(128, 0, 128, 1)">0.85</span><span style="color: rgba(0, 0, 0, 1)">）
select_shape(ConnectedRegions, Circles, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">roundness</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">and</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">0.85</span>, <span style="color: rgba(128, 0, 128, 1)">1.0</span><span style="color: rgba(0, 0, 0, 1)">)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 进一步筛选面积范围
select_shape(Circles, SelectedRegions, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">area</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">and</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">50</span>, <span style="color: rgba(128, 0, 128, 1)">200</span>)</span></pre>
</div>
<p>&nbsp;</p>
</div>
<p><span style="font-size: 14pt">&nbsp;<strong>6.联合区域算子</strong><span class="text_tJaKK" style="font-size: 18px" data-text="true"><span class="text_tJaKK bold_wJa3d" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" style="font-size: 18px" data-text="true"><span class="text_tJaKK bold_wJa3d" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><span class="text_tJaKK" data-text="true"><strong>union1</strong>(<a href="#Region" rel="noopener nofollow"><em>Region</em></a>&nbsp;:&nbsp;<a href="#RegionUnion" rel="noopener nofollow"><em>RegionUnion</em></a>&nbsp;: : )详解：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<ul>
<li><span style="font-size: 18px"><strong>输入参数</strong>：</span>
<ul>
<li><span style="font-size: 18px"><code>Regions</code>：输入的区域集合（多个独立区域组成的数组）。</span></li>
</ul>
</li>
<li><span style="font-size: 18px">​<strong>输出参数</strong>：</span>
<ul>
<li><span style="font-size: 18px"><code>RegionUnion</code>：合并后的单一区域，包含所有输入区域的并集。</span></li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<h3><span style="font-size: 18px"><strong>核心功能</strong></span></h3>
<ol>
<li><span style="font-size: 18px">​<strong>区域合并</strong>：</span>
<ul>
<li><span style="font-size: 18px">将多个离散区域合并为一个整体区域，忽略区域之间的空间关系（无论是否重叠）。</span></li>
</ul>
</li>
<li><span style="font-size: 18px">​<strong>应用场景</strong>：</span>
<ul>
<li><span style="font-size: 18px">​<strong>OCR预处理</strong>：将分割后的字符区域合并为文本行。</span></li>
<li><span style="font-size: 18px">​<strong>缺陷检测</strong>：聚合分散的缺陷区域，便于统一分析。</span></li>
<li><span style="font-size: 18px">​<strong>目标增强</strong>：合并同一物体的多个碎片化区域，提升后续处理效率。</span></li>
</ul>
</li>
</ol>
<p>&nbsp;</p>
<p><span style="font-size: 18px">示例代码片段：合并分散的缺陷区域</span></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-size: 18px">*<span style="color: rgba(0, 0, 0, 1)"> 检测金属表面的划痕（可能分散为多个小区域）
threshold(Image, Scratches, </span><span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">90</span><span style="color: rgba(0, 0, 0, 1)">)
connection(Scratches, ConnectedScratches)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 合并所有划痕区域，计算总缺陷面积
union1(ConnectedScratches, TotalScratches)
area_center(TotalScratches, Area, Row, Column)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 判断是否超出允许阈值
</span><span style="color: rgba(0, 0, 255, 1)">if</span> (Area &gt; <span style="color: rgba(128, 0, 128, 1)">1000</span><span style="color: rgba(0, 0, 0, 1)">)
    dev_set_color(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">red</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
    dev_display(TotalScratches)
endif</span></span></pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 18pt">三.豆子分割实例代码</span></strong></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">此程序演示基础形态学算子，联通区域分割，二值化算子等综合的使用<code>。</code></span></p>
<p><strong><span style="font-size: 18px"><code>流程为：原始图像 → 阈值分割 → 开运算去噪 → 腐蚀分离 → 连通分析 → 膨胀恢复 → 结果计数</code></span></strong></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250319155848289-1541938862.bmp" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250319155718272-1292743513.png" alt=""></p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt">豆子分割计数 count_pellets.hdev</span><span style="font-size: 18px">示例代码：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 18px">*<span style="color: rgba(0, 0, 0, 1)"> 此程序演示基础形态学算子的使用<span style="font-size: 18px">，联通区域分割，二值化算子等综合的使用<code>。</code></span>
</span>*<span style="color: rgba(0, 0, 0, 1)"> 目标：检测图像中的每个颗粒（深色背景上的亮色颗粒数）
</span>* 
*<span style="color: rgba(0, 0, 0, 1)"> 关闭设备更新（提升执行效率）
dev_update_off ()

</span>*<span style="color: rgba(0, 0, 0, 1)"> 读取颗粒图像到Image变量
read_image (Image, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">pellets</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 关闭可能存在的旧图形窗口
dev_close_window ()

</span>*<span style="color: rgba(0, 0, 0, 1)"> 获取图像尺寸用于新窗口设置
get_image_size (Image, Width, Height)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 打开与图像同尺寸的黑色背景窗口
dev_open_window (</span><span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0</span>, Width, Height, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, WindowID)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 设置显示区域为完整图像尺寸（避免缩放）
dev_set_part (</span><span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">0</span>, Height - <span style="color: rgba(128, 0, 128, 1)">1</span>, Width - <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 设置显示字体为等宽字体，字号16
set_display_font (WindowID, </span><span style="color: rgba(128, 0, 128, 1)">16</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">mono</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">false</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 使用6种颜色高亮显示不同区域
dev_set_colored (</span><span style="color: rgba(128, 0, 128, 1)">6</span><span style="color: rgba(0, 0, 0, 1)">)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 设置区域显示模式为轮廓（节省显示资源）
dev_set_draw (</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">margin</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 设置轮廓线宽为3像素（更显眼）
dev_set_line_width (</span><span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 显示原始图像
dev_display (Image)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 在窗口左上角显示提示信息（黑色文字）
disp_message (WindowID, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Detect each single pellet</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">window</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">12</span>, <span style="color: rgba(128, 0, 128, 1)">12</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 显示继续提示并等待用户按键
disp_continue_message (WindowID, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
stop ()


</span>*<span style="color: rgba(0, 0, 0, 1)"> 【步骤1：颗粒区域分割】
</span>*<span style="color: rgba(0, 0, 0, 1)"> 使用最大可分性阈值分割亮色区域（自动计算最佳阈值）  使用其他阈值分割也可以 自己可以尝试一下
binary_threshold (Image, LightRegion, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">max_separability</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">light</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">, UsedThreshold)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 使用半径3.5的圆形结构元素做开运算（平滑边界，去除小噪点）
opening_circle (LightRegion, Region, </span><span style="color: rgba(128, 0, 128, 1)">3.5</span><span style="color: rgba(0, 0, 0, 1)">)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 显示预处理后的区域
dev_display (Region)
disp_message (WindowID, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">First, segment the pellets</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">window</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">12</span>, <span style="color: rgba(128, 0, 128, 1)">12</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
disp_continue_message (WindowID, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
stop ()


</span>*<span style="color: rgba(0, 0, 0, 1)"> 【步骤2：直接连通域分析（会失败）】
</span>*<span style="color: rgba(0, 0, 0, 1)"> 尝试直接计算连通区域（因颗粒粘连导致部分区域无法分离）
connection (Region, ConnectedRegionsWrong)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 显示失败结果：粘连区域被识别为同一区域
dev_display (Image)
dev_display (ConnectedRegionsWrong)
disp_message (WindowID, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Simple connection fails</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">window</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">12</span>, <span style="color: rgba(128, 0, 128, 1)">12</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
disp_continue_message (WindowID, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
stop ()


</span>*<span style="color: rgba(0, 0, 0, 1)"> 【步骤3：形态学腐蚀分离粘连】
</span>*<span style="color: rgba(0, 0, 0, 1)"> 使用半径7.5的圆形结构元素腐蚀区域（缩小颗粒以分离粘连）
erosion_circle (Region, RegionErosion, </span><span style="color: rgba(128, 0, 128, 1)">7.5</span><span style="color: rgba(0, 0, 0, 1)">)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 显示腐蚀后的分离效果
dev_display (Image)
dev_display (RegionErosion)
disp_message (WindowID, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Erosion of the pellet regions</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">window</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">12</span>, <span style="color: rgba(128, 0, 128, 1)">12</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
disp_continue_message (WindowID, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
stop ()


</span>*<span style="color: rgba(0, 0, 0, 1)"> 【步骤4：正确连通域分析】
</span>*<span style="color: rgba(0, 0, 0, 1)"> 对腐蚀后的区域进行连通域分析（此时颗粒已分离）
connection (RegionErosion, ConnectedRegions)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 显示正确的独立连通区域
dev_display (Image)
dev_display (ConnectedRegions)
disp_message (WindowID, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Perform connection now</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">window</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">12</span>, <span style="color: rgba(128, 0, 128, 1)">12</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
disp_continue_message (WindowID, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
stop ()


</span>*<span style="color: rgba(0, 0, 0, 1)"> 【步骤5：恢复原始颗粒尺寸】
</span>*<span style="color: rgba(0, 0, 0, 1)"> 使用半径7.5的圆形结构元素膨胀区域（恢复原始颗粒大小）
dilation_circle (ConnectedRegions, RegionDilation, </span><span style="color: rgba(128, 0, 128, 1)">7.5</span><span style="color: rgba(0, 0, 0, 1)">)

</span>*<span style="color: rgba(0, 0, 0, 1)"> 统计并显示最终检测到的颗粒数量
count_obj (RegionDilation, Number)
dev_display (Image)
dev_display (RegionDilation)
disp_message (WindowID, Number </span>+ <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)"> pellets detected</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">window</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 128, 1)">12</span>, <span style="color: rgba(128, 0, 128, 1)">12</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">true</span><span style="color: rgba(128, 0, 0, 1)">'</span>)</span></pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">1.先读取图片</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250319154405379-1656064173.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">2.利用自动阈值分割算子binary_threshold（）提取图片中偏亮色的区域</span></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250319155056464-360176265.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">3.使用connection（）算子分割成小区域集合数组</span></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250319155309485-1711438914.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">4.使用腐蚀erosion_circle（）算子腐蚀掉相互连接的区域，让豆子区域独立无连接</span></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250319155340217-341395155.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">5.在分割小区域connection（）算子，这个时候的豆子都是各自独立无连接的，这时候计算数目就对了</span></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250319155516142-1056623257.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">6.在使用dilation_circle（）膨胀算子，同样的膨胀腐蚀滤波参数，将豆子区域大小还原。在使用区域数目统计算子count_obj（）得出结果</span></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250319155718272-1292743513.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">OK，本篇的教程就到这里了，有兴趣慢慢学习halcon的入门教程的可以关注一下我后面的更新，会一步步由浅入深的更新。</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">最后的最后，想要学习更多的Blob分析还是需要去看halcon的自带的实例。</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1251892/202503/1251892-20250319135815642-1368229187.png" alt=""></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
<p>&nbsp;</p>
</div>
<div id="MySignature" role="contentinfo">
    转发和使用本文，请注明作者信息和原文地址---本文原作者为aircraft

---大家好我是徐飞机，有没有大佬们的公司招c++开发/图像处理/opengl/opencv/halcon实习的啊，带上我一个呗QAQ。。。hhhhhh  想要免费获取前端，后端，c/c++,matlab，Python，opencv，机器学习，深度学习，安卓，java，等等全套视频教程请关注机器视觉开发公众号，转发集赞28即可百度云获得hhhhhhhh
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.18592264917592594" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-19 16:03">2025-03-19 16:01</span>&nbsp;
<a href="https://www.cnblogs.com/DOMLX">aircraft</a>&nbsp;
阅读(<span id="post_view_count">15</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18781187" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18781187);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18781187', targetLink: 'https://www.cnblogs.com/DOMLX/p/18781187', title: 'halcon 入门教程（二）Blob分析（二值化，联通区域，分割区域，提取区域）保姆级教程' })">举报</a>
</div>
        