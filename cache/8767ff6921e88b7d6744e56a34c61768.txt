
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lmy5215006/p/18851138" title="发布于 2025-04-29 14:24">
    <span role="heading" aria-level="2">C#网络编程(二)----网络层/链路层</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="网络层协议">网络层协议</h1>
<blockquote>
<p>网络层（Network Layer） 的主要功能是实现主机之间的逻辑寻址、路由选择和分组转发，确保数据在不同网络（如局域网、广域网）之间的传输</p>
</blockquote>
<table>
<thead>
<tr>
<th><strong>协议类别</strong></th>
<th><strong>核心协议</strong></th>
<th><strong>路由协议</strong></th>
<th><strong>辅助协议</strong></th>
<th><strong>扩展协议</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>功能</strong></td>
<td>逻辑寻址、分组转发</td>
<td>路径计算与路由表维护</td>
<td>地址解析、错误控制、组播管理</td>
<td>安全、NAT、QoS等</td>
</tr>
<tr>
<td><strong>典型协议</strong></td>
<td>IPv4/IPv6、IPSec</td>
<td>OSPF、BGP、RIP</td>
<td>ARP、ICMP、IGMP</td>
<td>NAT、GRE、DiffServ</td>
</tr>
</tbody>
</table>
<h2 id="ip">IP</h2>
<p>IP(Internet Protocol)，是分配给连接到计算机网络的每个设备唯一标识符，用于在网络中通信。IP地址使数据包能够在网络上找到其位置，将数据从源主机路送到目的主机，跨越多个中间网络设备(路由器)，屏蔽底层网络差异（如以太网、Wi-Fi、广域网）。</p>
<p>但IP协议有点类似渣男，秉承着<code>不主动，不拒绝，不负责</code>原则：</p>
<ol>
<li>无连接<br>
不预先建立建立，直接发送数据包(Packet)。</li>
<li>不可靠<br>
不保证数据一定到达，不检查错误，不重传丢失的数据</li>
</ol>
<p>它来鹅城只做三件事：</p>
<ol>
<li>编址与标识(寻址)<br>
每个连接到网络的设备，都会有一个IP地址。IP协议使用这个地址来表示源地址与目标地址。</li>
<li>路由与转发<br>
每个数据包<strong>携带源IP与目IP</strong>，路由器根据"路由表"选择最佳转发路径。<br>
路由表通过静态配置或动态协议（如 BGP、OSPF）生成，核心依据是 “最长前缀匹配” 原则</li>
<li>分片与重组（仅接收端）<br>
当数据包超过链路层的MTU时(如以太网MTU为1500字节)，IP层将数据包拆分为多个分片(Fragment)，每个分片包含独立的IP头。<br>
接收端会根据分布信息将这些片段重新组装成完整的数据包。</li>
</ol>
<h3 id="ip数据包格式">IP数据包格式</h3>
<p><img src="https://img2024.cnblogs.com/blog/1084317/202504/1084317-20250429103413783-963881341.png" alt="image" loading="lazy"></p>
<table>
<thead>
<tr>
<th>字段</th>
<th>长度</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>版本</strong></td>
<td>4位</td>
<td>IPv4（值为4）或IPv6（值为6）</td>
</tr>
<tr>
<td><strong>首部长度</strong></td>
<td>4位</td>
<td>以32位字为单位，最小5（20字节），最大60字节（含可选字段）</td>
</tr>
<tr>
<td><strong>区分服务</strong></td>
<td>8位</td>
<td>旧称TOS（服务类型），用于QoS（服务质量），如优先级、延迟、吞吐量配置</td>
</tr>
<tr>
<td><strong>总长度</strong></td>
<td>16位</td>
<td>数据报总字节数（首部+数据），最大65535字节</td>
</tr>
<tr>
<td><strong>标识</strong></td>
<td>16位</td>
<td>唯一标识同一原始数据报的分片，用于重组</td>
</tr>
<tr>
<td><strong>标志</strong></td>
<td>3位</td>
<td>包括“保留位”、“不分片（DF）”、“更多分片（MF）”标志</td>
</tr>
<tr>
<td><strong>片偏移</strong></td>
<td>13位</td>
<td>分片数据在原始数据报中的偏移量（以8字节为单位）</td>
</tr>
<tr>
<td><strong>生存时间（TTL）</strong></td>
<td>8位</td>
<td>数据报最大跳数（每经一个路由器减1，为0时丢弃，防止环路）</td>
</tr>
<tr>
<td><strong>协议</strong></td>
<td>8位</td>
<td>上层协议类型（如TCP=6，UDP=17，ICMP=1）</td>
</tr>
<tr>
<td><strong>首部校验和</strong></td>
<td>16位</td>
<td>仅校验IP首部，不校验数据（提高效率，可靠性由上层协议处理）</td>
</tr>
<tr>
<td><strong>源IP地址</strong></td>
<td>32位</td>
<td>发送方IP</td>
</tr>
<tr>
<td><strong>目的IP地址</strong></td>
<td>32位</td>
<td>接收方IP</td>
</tr>
<tr>
<td><strong>可选字段</strong></td>
<td>0-40字节</td>
<td>用于调试、安全等（如记录路由、时间戳），较少使用</td>
</tr>
</tbody>
</table>
<h3 id="ip的分类">IP的分类</h3>
<ol>
<li>IPv4<br>
最早和最常用的IP协议版本，使用32位地址，范围从0.0.0.0到255.255.255.255。约为43亿个，由于互联网的增长，已经快枯竭了。</li>
<li>IPv6<br>
为了解决IPv4地址枯竭，而设计的新一代IP协议。使用128位地址，提供海量的IP池。比如：fe80::a00e:9ff2:c15f:e833%21</li>
</ol>
<blockquote>
<p>IPv4地址已经快枯竭了，但依旧是互联网的主流。因为还有DHCP，CIDR，NAT为它续命。<br>
看过&lt;三体&gt;的小伙伴一定对647号小宇宙不陌生，路由器就是为IPv4构建了一个又一个的小宇宙，不至于枯竭。</p>
</blockquote>
<table>
<thead>
<tr>
<th>特性</th>
<th>IPv4</th>
<th>IPv6</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>地址长度</strong></td>
<td>32位（约43亿地址）</td>
<td>128位（足够为每粒沙子分配地址）</td>
</tr>
<tr>
<td><strong>地址空间</strong></td>
<td>分类严格（A/B/C类），浪费严重</td>
<td>无类别（CIDR），地址分配灵活</td>
</tr>
<tr>
<td><strong>首部长度</strong></td>
<td>可变（20~60字节），处理复杂</td>
<td>固定40字节，效率更高</td>
</tr>
<tr>
<td><strong>安全性</strong></td>
<td>依赖IPsec（可选）</td>
<td>强制支持IPsec（加密与认证）</td>
</tr>
<tr>
<td><strong>移动性</strong></td>
<td>需额外协议（如MIP）</td>
<td>内置移动性支持（家乡地址）</td>
</tr>
<tr>
<td><strong>分片</strong></td>
<td>源主机和路由器均可分片</td>
<td>仅源主机分片，路由器不处理</td>
</tr>
<tr>
<td><strong>兼容性</strong></td>
<td>与IPv6不直接兼容</td>
<td>支持双栈（同时运行IPv4/IPv6）</td>
</tr>
</tbody>
</table>
<h3 id="ip地址分类">IP地址分类</h3>
<blockquote>
<p>根据作用范围，IP地址可以分为两种</p>
</blockquote>
<ol>
<li>私有IP地址<br>
用于局域网内部(LAN)，不能在互联网中传输<br>
10.0.0.0-10.255.255.255<br>
172.16.0.0-172.31.255.255<br>
192.168.0.0-192.168.255.255</li>
<li>公有IP地址<br>
有互联网服务商分配，可以在全球互联网中识别。</li>
</ol>
<blockquote>
<p>根据是否可以更改</p>
</blockquote>
<ol>
<li>静态IP地址<br>
手动分配，不会改变。适合用于长期保持相同IP的设备，比如服务器。</li>
<li>动态IP地址<br>
由DHCP服务器给你自动分配，每次连接网络或者超过一定时间都会改变。</li>
</ol>
<h2 id="icmp">ICMP</h2>
<p>ICMP（Internet Control Message Protocol），用于IP层的错误报告和网络诊断，是一种面向无连接的协议。当IP数据无法访问目标IP，目标路由器时，会<code>自动发送</code>ICMP消息。</p>
<blockquote>
<p>我们常用的Ping命令就是基于ICMP<br>
<img src="https://img2024.cnblogs.com/blog/1084317/202504/1084317-20250429110035392-1745654965.png" alt="image" loading="lazy"></p>
</blockquote>
<h1 id="链路层协议">链路层协议</h1>
<blockquote>
<p>数据链路层是 物理层（硬件连接）与 网络层（IP 寻址）的桥梁，负责在相邻节点之间传输数据帧，处理物理寻址、接入控制和错误检测。</p>
</blockquote>
<h2 id="mac">MAC</h2>
<p>数据链路层分为两个子层：</p>
<ol>
<li>逻辑链路控制子层(Logical Link Control,LLC)<br>
为网络层提供统一接口（支持多协议如 IP、IPX），处理流量控制和链路管理（IEEE 802.2 标准，现代网络中功能多集成到 MAC 子层）。</li>
</ol>
<blockquote>
<p>LLC层常被简化，属于被抛弃的小孩</p>
</blockquote>
<ol start="2">
<li>媒体访问控制(Media Access Control,MAC)<br>
负责物理寻址(MAC地址)，接入控制(CSMA/CD)和数据帧的传输</li>
</ol>
<blockquote>
<p>MAC地址:Media Access Control Address，是网络设备的硬件地址，用于在局域网中标识设备。MAC工作在链路层，用于设备间通信。</p>
</blockquote>
<h3 id="mac帧格式">MAC帧格式</h3>
<p><img src="https://img2024.cnblogs.com/blog/1084317/202504/1084317-20250429134520377-708806580.png" alt="image" loading="lazy"></p>
<table>
<thead>
<tr>
<th><strong>字段</strong></th>
<th><strong>长度（字节）</strong></th>
<th><strong>功能描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>前导码（Preamble）</strong></td>
<td>7</td>
<td>由 <code>1010...10</code> 交替的二进制位组成，用于接收端同步时钟，使物理层设备调整接收速率。</td>
</tr>
<tr>
<td><strong>帧开始定界符（SFD）</strong></td>
<td>1</td>
<td>固定为 <code>10101011</code>，标识MAC帧的开始，通知接收端后续为有效数据帧。</td>
</tr>
<tr>
<td><strong>目的MAC地址（DMAC）</strong></td>
<td>6</td>
<td>接收方网卡的物理地址（48位），最高位为 <code>0</code> 表示单播地址，<code>1</code> 表示组播地址，全 <code>1</code>（<code>FF:FF:FF:FF:FF:FF</code>）为广播地址。</td>
</tr>
<tr>
<td><strong>源MAC地址（SMAC）</strong></td>
<td>6</td>
<td>发送方网卡的物理地址（48位），无组播/广播标识，始终为单播地址。</td>
</tr>
<tr>
<td><strong>类型字段（Type）</strong></td>
<td>2</td>
<td>标识上层协议类型：<br> - <code>0x0800</code>：IP协议<br> - <code>0x0806</code>：ARP协议<br> - <code>0x86DD</code>：IPv6协议<br> 该字段区分帧承载的是哪种网络层数据。</td>
</tr>
<tr>
<td><strong>数据字段（Data）</strong></td>
<td>46~1500</td>
<td>封装上层（网络层）的数据包（如IP数据报、ARP报文）。<br> - 最小长度46字节：若上层数据不足，需填充（Pad）至46字节，确保CSMA/CD机制正常工作（最小帧长64字节，减去14字节头部和4字节FCS，剩余46字节）。<br> - 最大长度1500字节：即MTU（最大传输单元），超过则需在网络层分片。</td>
</tr>
<tr>
<td><strong>帧校验序列（FCS）</strong></td>
<td>4</td>
<td>基于CRC（循环冗余校验）算法生成的校验码，用于检测帧在传输过程中是否发生错误，校验范围包括DMAC、SMAC、Type、Data和Pad字段（不包括前导码和SFD）。</td>
</tr>
</tbody>
</table>
<h1 id="网络层与链路层的桥梁arp">网络层与链路层的桥梁，ARP</h1>
<p><strong>Address Resolution Protocol（ARP，地址解析协议）</strong> 是计算机网络中用于将 IP 地址（网络层地址）解析为 MAC 地址（数据链路层地址） 的关键协议。它是局域网（LAN）通信的基础，主要解决 “已知 IP 地址，如何获取对应物理地址” 的问题。<code>其帧直接封装在数据链路层（如以太网）的帧中</code></p>
<p><img src="https://img2024.cnblogs.com/blog/1084317/202504/1084317-20250429104400501-1762065416.png" alt="image" loading="lazy"></p>
<p><strong>场景</strong>：主机 A（IP: 192.168.1.1）要向主机 B（IP: 192.168.1.4）发送数据，但不知道 B 的 MAC 地址。</p>
<ol>
<li>ARP请求<br>
主机 A 构造一个 ARP 请求数据包，包含自身 IP 和 MAC 地址，以及目标 IP（192.168.1.4）。<br>
该请求以<code>广播形式</code>发送到<code>局域网（所有主机都会收到）</code>。</li>
<li>ARP响应<br>
所有主机收到广播后，检查目标 IP 是否为自身。<br>
只有目标设备会响应，并发送一个包含其MAC地址的ARP响应帧。</li>
<li>地址缓存<br>
发送方收到ARP响应后，会将目标设备的IP地址和MAC地址映射关系缓存到本地。以便下次发送数据时，无需再进行地址解析。<br>
<img src="https://img2024.cnblogs.com/blog/1084317/202504/1084317-20250429112857786-938424344.png" alt="image" loading="lazy"></li>
</ol>
<h2 id="arp数据帧格式">ARP数据帧格式</h2>
<p><img src="https://img2024.cnblogs.com/blog/1084317/202504/1084317-20250429135241120-568853301.png" alt="image" loading="lazy"></p>
<table>
<thead>
<tr>
<th><strong>字段</strong></th>
<th><strong>长度（字节）</strong></th>
<th><strong>描述</strong></th>
<th><strong>示例值（以太网 + IPv4）</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>硬件类型（Hardware Type）</strong></td>
<td>2</td>
<td>标识底层硬件类型（如以太网、令牌环等）。<br>以太网对应值为 <code>0x0001</code>。</td>
<td><code>0x0001</code>（以太网）</td>
</tr>
<tr>
<td><strong>协议类型（Protocol Type）</strong></td>
<td>2</td>
<td>标识上层协议类型（如 IPv4、IPv6 等）。<br>IPv4 对应值为 <code>0x0800</code>。</td>
<td><code>0x0800</code>（IPv4）</td>
</tr>
<tr>
<td><strong>硬件地址长度（Hardware Address Length）</strong></td>
<td>1</td>
<td>硬件地址（如 MAC 地址）的长度（单位：字节）。<br>以太网 MAC 地址为 <code>6</code>。</td>
<td><code>0x06</code></td>
</tr>
<tr>
<td><strong>协议地址长度（Protocol Address Length）</strong></td>
<td>1</td>
<td>协议地址（如 IP 地址）的长度（单位：字节）。<br>IPv4 地址为 <code>4</code>。</td>
<td><code>0x04</code></td>
</tr>
<tr>
<td><strong>操作码（Operation Code）</strong></td>
<td>2</td>
<td>标识 ARP 操作类型：<br><code>1</code> = ARP 请求（Request），<br><code>2</code> = ARP 响应（Reply），<br><code>3</code> = RARP 请求（反向解析，已过时），<br><code>4</code> = RARP 响应。</td>
<td><code>0x0001</code>（请求）、<code>0x0002</code>（响应）</td>
</tr>
<tr>
<td><strong>发送方硬件地址（Sender Hardware Address）</strong></td>
<td>可变（依硬件地址长度）</td>
<td>发送方的硬件地址（如发送方 MAC 地址）。<br>以太网中为 <code>6</code> 字节。</td>
<td>发送方 MAC 地址（例：<code>00-0C-29-12-34-56</code>，二进制填充）</td>
</tr>
<tr>
<td><strong>发送方协议地址（Sender Protocol Address）</strong></td>
<td>可变（依协议地址长度）</td>
<td>发送方的协议地址（如发送方 IP 地址）。<br>IPv4 中为 <code>4</code> 字节。</td>
<td>发送方 IP 地址（例：<code>192.168.1.100</code>，点分十进制转换为 4 字节）</td>
</tr>
<tr>
<td><strong>目标硬件地址（Target Hardware Address）</strong></td>
<td>可变（依硬件地址长度）</td>
<td>目标的硬件地址：<br>- ARP 请求时，因目标 MAC 未知，填全 <code>0</code>（<code>6</code> 字节全 0）；<br>- ARP 响应时，填入目标真实 MAC 地址。</td>
<td>请求时：<code>00-00-00-00-00-00</code>（全 0）；<br>响应时：目标 MAC 地址</td>
</tr>
<tr>
<td><strong>目标协议地址（Target Protocol Address）</strong></td>
<td>可变（依协议地址长度）</td>
<td>目标的协议地址（如目标 IP 地址，需解析的 IP）。</td>
<td>目标 IP 地址（例：<code>192.168.1.200</code>，点分十进制转换为 4 字节）</td>
</tr>
</tbody>
</table>
<h2 id="既生瑜何生亮">既生瑜何生亮？</h2>
<p>IP地址与MAC地址都能表示唯一，那为什么既有IP，又有MAC呢？</p>
<ol>
<li>解决的问题不同<br>
MAC地址作用于链路层，是区分硬件的物理地址，MAC 地址负责<code>每个网段内的微观传输</code>。<br>
IP地址作用于网络层，是区分主机的逻辑地址，IP地址指导<code>跨网段的宏观路由</code>。</li>
</ol>
<blockquote>
<p>如果只用MAC地址进行网络寻址的话，MAC地址长度48位。2^48=256TB内存。这将会是你负担不起的路由器价格。</p>
</blockquote>
<h2 id="arp的变种与扩展">ARP的变种与扩展</h2>
<ol>
<li>
<p>反向地址解析协议（RARP）<br>
功能与 ARP 相反：已知 MAC 地址，解析对应的 IP 地址。<br>
现已很少使用，被 DHCP 等协议替代。</p>
</li>
<li>
<p>免费 ARP（Gratuitous ARP）<br>
主机主动发送 ARP 广播（即使无通信需求），属于ARP reply帧，但<code>请求的目标是自己</code>。<br>
用于是告诉广播域中其它主机自己的存在，更新其他主机的 ARP 缓存（如虚拟机迁移后，负载均衡的主备切换）。<br>
判断广播域中是否存在IP冲突</p>
</li>
<li>
<p>无状态 ARP（Stateless ARP）<br>
主机不维护 ARP 缓存，每次通信前都发送 ARP 请求（适用于低功耗设备或动态网络）。</p>
</li>
</ol>
<h1 id="眼见为实">眼见为实</h1>
<h2 id="arp">ARP</h2>
<p><img src="https://img2024.cnblogs.com/blog/1084317/202504/1084317-20250429141201519-1926434836.png" alt="image" loading="lazy"></p>
<h2 id="icmp-1">ICMP</h2>
<p><img src="https://img2024.cnblogs.com/blog/1084317/202504/1084317-20250429142056485-1488089003.png" alt="image" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.474389536443287" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-29 21:47">2025-04-29 14:24</span>&nbsp;
<a href="https://www.cnblogs.com/lmy5215006">叫我安不理</a>&nbsp;
阅读(<span id="post_view_count">181</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18851138);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18851138', targetLink: 'https://www.cnblogs.com/lmy5215006/p/18851138', title: 'C#网络编程(二)----网络层/链路层' })">举报</a>
</div>
        