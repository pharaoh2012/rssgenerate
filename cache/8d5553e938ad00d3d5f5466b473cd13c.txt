
	<h1 class="postTitle"><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/szw/p/19051823" title="发布于 2025-08-22 08:00">
    <span role="heading" aria-level="2">微信 SDK + Senparc.AI + MCP 打造微信 AI 开发助手（一）：网页版</span>
    

</a>
</h1>
	<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h2>概述</h2>
<p>　　在另外一个《Senparc.AI 系列教程》（<a href="https://www.cnblogs.com/szw/p/18004568" target="_blank">Senparc.AI 系列教程（一）：概要</a>&nbsp;，<a id="cb_post_title_url" class="postTitle2 vertical-middle" title="发布于 2025-08-21 21:57" href="https://www.cnblogs.com/szw/p/19051631">Senparc.AI 系列教程（二）：配置大模型，开始开发应用</a>）中简要介绍了 Senparc.AI 所支撑的底层能力（持续更新中），从这个系列开始，我们将逐步探索其强大的扩展和落地能力。</p>
<p>　　本文介绍的案例中，我们使用微信 SDK，借助 Senparc.AI，结合 MCP，打通了微信接口的自动搜索和代码生成，使开发者可以在网页、IDE，甚至 Dfiy、n8n 等框架中高效开发或让微信程序自动化运行。</p>
<p>　　微信的案例我将分为（上）（中）（下）三篇，分别介绍<strong>网页版助手</strong>、<strong>IDE 端 AI 辅助编程</strong>，以及参与到<strong>工作流的智能体</strong>互动中。</p>
<p>&nbsp;</p>
<h2>案例资源</h2>
<p>　　当前展示的案例已经全部开源（可商用），可在&nbsp; <a href="https://sdk.weixin.senparc.com" target="_blank" rel="noopener nofollow">https://sdk.weixin.senparc.com</a>&nbsp;在线体验，同时也支持本地部署，涉及到的开源项目如下：</p>
<ol>
<li>微信 SDK：<a href="https://github.com/JeffreySu/WeiXinMPSDK" target="_blank" rel="noopener nofollow">https://github.com/JeffreySu/WeiXinMPSDK</a></li>
<li>NeuCharFramework：<br>源码：<a href="https://github.com/NeuCharFramework/NcfPackageSources%20" target="_blank" rel="noopener nofollow">https://github.com/NeuCharFramework/NcfPackageSources&nbsp;</a><br>可直接运行的模板：<a href="https://github.com/NeuCharFramework/NCF" target="_blank" rel="noopener nofollow">https://github.com/NeuCharFramework/NCF</a>&nbsp;（桌面版下载：<a href="https://github.com/NeuCharFramework/NCF/releases" target="_blank" rel="noopener nofollow">https://github.com/NeuCharFramework/NCF/releases</a>）</li>
<li>QQ 交流群：553198593</li>




</ol>
<p>　　本文的网页版案例主要集中在微信 SDK。</p>
<p>&nbsp;</p>
<h2>案例功能介绍（网页版助手）</h2>
<p>　　这个工具的诞生，源于目前 AI 编程的巨大痛点：即使大模型已经学习了大量编程知识，但是对于特定 SDK 内部编程接口的幻觉依然非常严重，准确率低。而各类 SDK，尤其 API 的对接精准度要求通常又比较高，所以光使用大模型辅助编程效率仍然很低，经常发生的情况是：<strong>生成 3 分钟，修改 3 小时</strong>。</p>
<p>　　尤其对于 SDK 类型和基础库，程序能否成功运行，高度依赖方法生成的准确性，否则一旦出现任何问题，开发人员需要花费更多的时间重新阅读文档、研究接口、排查错误，修复错误，痛苦不堪。</p>
<p>　　为此我们推出了基于 MCP 的整体解决方案，当前章节主要介绍网页版。</p>
<p>　　先上效果，然后我们再分析原理。</p>
<p>　　打开页面（或从微信 SDK 开源项目下载到本地）：&nbsp;&nbsp;<a href="https://sdk.weixin.senparc.com" target="_blank" rel="noopener nofollow">https://sdk.weixin.senparc.com</a>，在首页即可看到 AI 助手（或从顶部菜单【工具箱】&gt;【<a href="https://sdk.weixin.senparc.com/AiDoc" target="_blank" rel="noopener nofollow">AI 开发助手</a>】进入）：</p>
<p><img src="https://img2024.cnblogs.com/blog/28384/202508/28384-20250821123422180-2076373511.png" alt="image" width="1171" height="832" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>&nbsp;</p>
<p>　　输入你想实现的功能：</p>
<p><img src="https://img2024.cnblogs.com/blog/28384/202508/28384-20250821123700825-1941012795.png" alt="image" width="968" height="469" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>&nbsp;</p>
<p>　　稍等片刻，即可收到 AI 助手回复：</p>
<p><img src="https://img2024.cnblogs.com/blog/28384/202508/28384-20250821123753314-1413728434.png" alt="image" width="932" height="1262" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>&nbsp;</p>
<p>&nbsp;　　AI 回复内容中包含了自动识别的模块（公众号/小程序/企业微信/开放平台等），以及接口的说明、可直接复制使用的代码示例以及使用提示，同时也可以点击“接口参数说明”，查看每个参数详细的介绍：</p>
<p style="text-align: center"><img src="https://img2024.cnblogs.com/blog/28384/202508/28384-20250821123919236-717674896.png" alt="image" width="788" height="505" loading="lazy"></p>
<p>&nbsp;</p>
<p>　　当然你可以对此并不满意，并且提出了更加复杂的需求，AI 也会回你自动生成精准代码。点击编辑图标：</p>
<p style="text-align: center"><img src="https://img2024.cnblogs.com/blog/28384/202508/28384-20250821124035357-1022785454.png" alt="image" width="437" height="89" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;　　重新编辑内容：</p>
<p style="text-align: center"><img src="https://img2024.cnblogs.com/blog/28384/202508/28384-20250821125051608-369270417.png" alt="image" width="900" height="362" loading="lazy"></p>
<p style="text-align: left">&nbsp;</p>
<p style="text-align: left">　　发送并获取结果：</p>
<p><img src="https://img2024.cnblogs.com/blog/28384/202508/28384-20250821125151253-534001308.png" alt="image" width="955" height="1390" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>&nbsp;　　</p>
<p>　　如果代码中包含了多个接口，相关参数也一览无余：</p>
<p><img src="https://img2024.cnblogs.com/blog/28384/202508/28384-20250822014102597-1364886069.png" alt="image" width="700" height="905" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>　　至此，AI 已经帮你完成了大部分的关键接口开发，至少省掉了几个小时的接口研究和测试（接口调用是非常精准的）。</p>
<blockquote>
<p>　　小彩蛋：你可以要求 AI 使用异步方法，看看是否能同样能准确响应。</p>




</blockquote>
<p>&nbsp;</p>
<h2>原理解析</h2>
<p>　　先上图：</p>
<p><img src="https://img2024.cnblogs.com/blog/28384/202508/28384-20250821235811978-286335626.png" alt="image" width="1124" height="1226" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>&nbsp;</p>
<h3>　　关键过程解析</h3>
<p><strong>　　</strong>服务起始于<strong>&nbsp;2.1 处理请求并连接 MCP 服务</strong>，相关任务提交至位于 Sample 的 <a href="https://github.com/JeffreySu/WeiXinMPSDK/blob/master/Samples/All/net8-mvc/Senparc.Weixin.Sample.Net8/Controllers/Tools/AiDocController.cs" target="_blank" rel="noopener nofollow">AiDocController</a> 中的&nbsp;ProcessQuery() 方法中，随后尝试连接 MCP 服务并获取工具列表（tool-list）（图中 3.1），核心代码如下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">建立 MCP 连接，并获取信息</span>
<span style="color: rgba(0, 128, 128, 1)"> 2</span> <span style="color: rgba(0, 0, 255, 1)">var</span> mcpEndpoint = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://www.ncf.pub/mcp-senparc-xncf-weixinmanager/sse</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 3</span> <span style="color: rgba(0, 0, 255, 1)">var</span> clientTransport = <span style="color: rgba(0, 0, 255, 1)">new</span> SseClientTransport(<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> SseClientTransportOptions()
</span><span style="color: rgba(0, 128, 128, 1)"> 4</span> <span style="color: rgba(0, 0, 0, 1)">{
</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>     Endpoint = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Uri(mcpEndpoint),
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span>     Name = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">NCF-Server</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 128, 128, 1)"> 7</span> <span style="color: rgba(0, 0, 0, 1)">});
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span> 
<span style="color: rgba(0, 128, 128, 1)"> 9</span> <span style="color: rgba(0, 0, 255, 1)">var</span> client = <span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> McpClientFactory.CreateAsync(clientTransport);
</span><span style="color: rgba(0, 128, 128, 1)">10</span> <span style="color: rgba(0, 0, 255, 1)">var</span> tools = <span style="color: rgba(0, 0, 255, 1)">await</span> client.ListToolsAsync();</pre>
</div>
<p>　　上述 mcpEndpoint 所对应的 Server 中，部署了一系列为 AI 助手服务的 MCP 工具（原理在后续章节介绍）。</p>
<p>　　获取到 tools 后（图中 2.2），我们使用 Senparc.AI 完成请求基础配置（图中 2.3），并发起一个 AI 请求（图中 2.4）：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 255, 1)">var</span> aiSetting =<span style="color: rgba(0, 0, 0, 1)"> Senparc.AI.Config.SenparcAiSetting;
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span> <span style="color: rgba(0, 0, 255, 1)">var</span> semanticAiHandler = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> SemanticAiHandler(aiSetting);
</span><span style="color: rgba(0, 128, 128, 1)"> 3</span> 
<span style="color: rgba(0, 128, 128, 1)"> 4</span> <span style="color: rgba(0, 0, 255, 1)">var</span> parameter = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> PromptConfigParameter()
</span><span style="color: rgba(0, 128, 128, 1)"> 5</span> <span style="color: rgba(0, 0, 0, 1)">{
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span>     MaxTokens = <span style="color: rgba(128, 0, 128, 1)">2000</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)"> 7</span>     Temperature = <span style="color: rgba(128, 0, 128, 1)">0.7</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>     TopP = <span style="color: rgba(128, 0, 128, 1)">0.5</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)"> 9</span>     StopSequences = <span style="color: rgba(0, 0, 255, 1)">new</span> List&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt; { <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">&lt;END&gt;</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> }
</span><span style="color: rgba(0, 128, 128, 1)">10</span> <span style="color: rgba(0, 0, 0, 1)">};
</span><span style="color: rgba(0, 128, 128, 1)">11</span> 
<span style="color: rgba(0, 128, 128, 1)">12</span> <span style="color: rgba(0, 0, 255, 1)">var</span> systemMessage = $<span style="color: rgba(128, 0, 0, 1)">@"</span><span style="color: rgba(128, 0, 0, 1)">你是一位智能助手，帮我选择最适合的 API 方案。</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">13</span> 
<span style="color: rgba(0, 128, 128, 1)">14</span> <span style="color: rgba(0, 0, 255, 1)">var</span> iWantToRun =<span style="color: rgba(0, 0, 0, 1)"> semanticAiHandler.ChatConfig(parameter,
</span><span style="color: rgba(0, 128, 128, 1)">15</span>     userId: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Jeffrey</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)">16</span>     maxHistoryStore:  <span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)">17</span> <span style="color: rgba(0, 0, 0, 1)">    chatSystemMessage: systemMessage,
</span><span style="color: rgba(0, 128, 128, 1)">18</span> <span style="color: rgba(0, 0, 0, 1)">    senparcAiSetting: aiSetting,
</span><span style="color: rgba(0, 128, 128, 1)">19</span>     kernelBuilderAction: kh =&gt;
<span style="color: rgba(0, 128, 128, 1)">20</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">21</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> kh.Plugins.AddMcpFunctionsFromSseServerAsync("NCF-Server", "</span><span style="color: rgba(0, 128, 0, 1); text-decoration: underline">http://localhost</span><span style="color: rgba(0, 128, 0, 1)">:5000/sse/sse");</span>
<span style="color: rgba(0, 128, 128, 1)">22</span>         kh.Plugins.AddFromFunctions(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">WeixinMpRouter</span><span style="color: rgba(128, 0, 0, 1)">"</span>, tools.Select(z =&gt;<span style="color: rgba(0, 0, 0, 1)"> z.AsKernelFunction()));
</span><span style="color: rgba(0, 128, 128, 1)">23</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">24</span> <span style="color: rgba(0, 0, 0, 1)">        );
</span><span style="color: rgba(0, 128, 128, 1)">25</span> <span style="color: rgba(0, 0, 255, 1)">var</span> executionSettings = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> OpenAIPromptExecutionSettings
</span><span style="color: rgba(0, 128, 128, 1)">26</span> <span style="color: rgba(0, 0, 0, 1)">{
</span><span style="color: rgba(0, 128, 128, 1)">27</span>     Temperature = <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)">28</span>     FunctionChoiceBehavior =<span style="color: rgba(0, 0, 0, 1)"> FunctionChoiceBehavior.Auto()
</span><span style="color: rgba(0, 128, 128, 1)">29</span> <span style="color: rgba(0, 0, 0, 1)">};
</span><span style="color: rgba(0, 128, 128, 1)">30</span> <span style="color: rgba(0, 0, 255, 1)">var</span> ka = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> KernelArguments(executionSettings) { };
</span><span style="color: rgba(0, 128, 128, 1)">31</span> 
<span style="color: rgba(0, 128, 128, 1)">32</span> <span style="color: rgba(0, 0, 255, 1)">var</span> prompt = $<span style="color: rgba(128, 0, 0, 1)">@"</span><span style="color: rgba(128, 0, 0, 1)">...</span><span style="color: rgba(128, 0, 0, 1)">"</span>;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">发送到 AI 的要求
</span><span style="color: rgba(0, 128, 128, 1)">33</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">输出结果</span>
<span style="color: rgba(0, 128, 128, 1)">34</span> <span style="color: rgba(0, 0, 255, 1)">var</span> resultRaw = <span style="color: rgba(0, 0, 255, 1)">await</span> iWantToRun.Kernel.InvokePromptAsync(prompt, ka);</pre>
</div>
<p>　　上述代码中：</p>
<ul>
<li>相关 AI 配置需要提前完成，参考《<a id="cb_post_title_url" class="postTitle2 vertical-middle" title="发布于 2025-08-21 21:57" href="https://www.cnblogs.com/szw/p/19051631">Senparc.AI 系列教程（二）：配置大模型，开始开发应用</a>》）</li>
<li>第 1 行：使用 Senparc.AI.Config.SenparcAiSetting 对象获取到当前默认 AI 模型配置。</li>
<li>第 2 行：构建 SemanticAiHandler 对象，构造函数中的 aiSetting 如果传入 null，则会默认从&nbsp;Senparc.AI.Config.SenparcAiSetting 获取（所以示例代码中的效果等同于传入 null，只是为了做演示）。如果这里希望使用 appsettings.json 默认配置意外的模型，那么可以在这里进行修改。</li>
<li>第 4-10 行：进行模型参数配置。</li>
<li>第 12-30 行（图中 2.3）：完成 Senparc.AI 中另外一个重要对象：IWantToRun 的构建，相关代码完成了一个 Chat（聊天）场景的配置（注意：使用 MCP 或者 function-calling 推荐使用 Chat 模式，而不是 Completion 模式）。</li>
<li>第 28 行：这里设置 FunctionChoiceBehavior 非常重要，否则模型不一定会执行 function-calling 或 MCP（本质上还是 function-calling 同样的原理），这里根据需要，我默认选择了 FunctionChoiceBehavior.Auto()，如果需要每次都强制调用工具，那么可以设置为&nbsp;FunctionChoiceBehavior.Required()。</li>
<li>第 32 行：需要传入 AI 的 Prompt，由于内容比较多，此处略，可以参考源码，其中包含了大量<strong>提示词工程</strong>的经验。</li>
<li>第 34 行：发送获取结果（图中 2.4-2.7）。</li>
<li>后续部分都是 UI 渲染相关。</li>
</ul>
<p style="text-align: left">&nbsp;</p>
<h2 style="text-align: left">MCP 服务</h2>
<p style="text-align: left">　　上述过程中的 MCP 服务，部署到了一个独立站点中（即代码中的 mcpEndpoint：<a href="https://www.ncf.pub/mcp-senparc-xncf-weixinmanager/sse" target="_blank" rel="noopener nofollow">https://www.ncf.pub/mcp-senparc-xncf-weixinmanager/sse</a>），您可以尝试打开这个连接，将会看到一个 SSE 连接的内容，如：</p>
<p style="text-align: center"><img src="https://img2024.cnblogs.com/blog/28384/202508/28384-20250821232040467-1257143897.png" alt="image" width="732" height="129" loading="lazy"></p>
<p>&nbsp;　　这说明这个 SSE 的链接同样可以被 Cursor、GitHub Copilot 等 IDE 和工具所使用（我们会在下一篇文章中具体介绍）。</p>
<p>　　这个 MCP Server 的服务由 NeuCharFramework 框架自动生成（无需编写额外代码），其中的工具（Tools）则是由 <a href="https://github.com/NeuCharFramework/NcfPackageSources/tree/master/src/Extensions/Senparc.Xncf.WeixinManager" target="_blank" rel="noopener nofollow">Senparc.Xncf.WeixinManager</a> 模块提供。</p>
<p>　　这个模块中又引用了微信 SDK 的 <a href="https://github.com/JeffreySu/WeiXinMPSDK/tree/master/src/Senparc.Weixin.AspNet" target="_blank" rel="noopener nofollow">Senparc.Weixin.AspNet</a> 包，其中使用到了我设计的名为 McpRouter 的一种模式：先对资源进行分类，然后通过 NextRoundTip 指定下一级运行的路由指令，达到了 AI 动态生成和工作流的融合，同时又摆脱了传统 Planner 过早制定完整计划的弊端，以及过多 Tools 对于 MCP 调用的压力（Cursor 推荐 40 个以内，而光微信拥有上千个 API，如果同时给到 MCP 将是一场灾难）。</p>
<p>　　相关 MCP 方法提供了微信 SDK 中不同层级接口的信息，并根据 AI 的 MCP 请求动态输出。</p>
<p>　　上述方法有效弥补了纯靠 AI 生成代码可能出现幻觉的问题，由于 MCP 返回的是精准 SDK 中的方法信息，因此准确度得到了大幅提升。</p>
<p style="text-align: left">&nbsp;</p>
<h2 style="text-align: left">后续</h2>
<ol>
<li>上述展示了 McpRouter 模式在网页端的强大能力，下一篇，我们将介绍使用相同的 MCP 工具，在 Cursor、VS Code 等 IDE 中直接编写代码。</li>
<li>接下去，我们也将在微信 McpRouter 的基础上，进行升级和抽象重构，使其可以服务于更多的 SDK 和基础库，实现更大程度的编程效率、准确性的提升。</li>
</ol>
<p>&nbsp;</p>
</div>
<div id="MySignature" role="contentinfo">
    <p>&nbsp;</p>

<p>
转载请注明出处和作者，谢谢！<br>
作者：JeffreySu  /  <a href="https://github.com/JeffreySu/" target="_blank">https://github.com/JeffreySu/</a><br>
博客：<a href="https://szw.cnblogs.com/" target="_blank">https://szw.cnblogs.com/</a><br>
</p>

<!--
<p>&nbsp;</p>
<p>
Senparc官方教程《微信开发深度解析：微信公众号、小程序高效开发秘籍》，耗时2年精心打造的微信开发权威教程，<a href="https://book.weixin.senparc.com/book/link?code=cnblogs-sign" target="_blank">点击这里，购买正版</a>！<br>
<a href="https://book.weixin.senparc.com/book/link?code=cnblogs-sign" target="_blank"><img src="https://images2017.cnblogs.com/blog/28384/201707/28384-20170730224601537-1461862917.png" width="300" alt="
微信开发深度解析：微信公众号、小程序高效开发秘籍"></a><br>

</p><a href="https://book.weixin.senparc.com/book/link?code=cnblogs-sign" target="_blank">
<p>&nbsp;</p></a>


<div style="margin-bottom: 30px">
Senparc 官方微信开发视频教程：《微信公众号+小程序快速开发》，<a href="https://book.weixin.senparc.com/book/videolinknetease?code=sdk-sign" target="_blank">点击这里点击观看</a>。<br>

<a href="https://book.weixin.senparc.com/book/videolinknetease?code=sdk-sign" target="_blank"><img src="https://images2017.cnblogs.com/blog/28384/201802/28384-20180208161432998-278885671.png" width="300" alt="Senparc 官方微信开发视频教程：《微信公众号+小程序快速开发》"></a>

</div>-->
</div>
<div class="clear"></div>

	<div class="postDesc">posted on 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-22 08:00">2025-08-22 08:00</span>&nbsp;
<a href="https://www.cnblogs.com/szw">SZW</a>&nbsp;
阅读(<span id="post_view_count">175</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19051823);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19051823', targetLink: 'https://www.cnblogs.com/szw/p/19051823', title: '微信 SDK + Senparc.AI + MCP 打造微信 AI 开发助手（一）：网页版' })">举报</a>
</div>
