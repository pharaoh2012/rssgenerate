
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ltwlh/p/18939770" title="发布于 2025-06-21 11:10">
    <span role="heading" aria-level="2">Vue2和Vue3的差异化（通俗易懂）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h2 data-start="222" data-end="230">一、相同点</h2>
<ol data-start="232" data-end="724">
<li data-start="232" data-end="365">
<p data-start="235" data-end="256"><strong data-start="235" data-end="254">响应式系统（Reactive）</strong></p>
<ul data-start="260" data-end="365">
<li data-start="260" data-end="301">
<p data-start="262" data-end="301">两者都采用 “模板 + 响应式” 的开发模式，视图自动随着状态变化而更新。</p>
</li>
<li data-start="305" data-end="365">
<p data-start="307" data-end="365">都支持双向绑定（<code data-start="315" data-end="324">v-model</code>）、条件渲染（<code data-start="331" data-end="337">v-if</code>/<code data-start="338" data-end="346">v-show</code>）、列表渲染（<code data-start="353" data-end="360">v-for</code>）等指令。</p>
</li>
</ul>
</li>
<li data-start="367" data-end="462">
<p data-start="370" data-end="379"><strong data-start="370" data-end="377">组件化</strong></p>
<ul data-start="383" data-end="462">
<li data-start="383" data-end="425">
<p data-start="385" data-end="425">都以组件为最小单元，支持父子组件通信（<code data-start="404" data-end="411">props</code> / <code data-start="414" data-end="421">$emit</code>）。</p>
</li>
<li data-start="429" data-end="462">
<p data-start="431" data-end="462">都可以通过 <code data-start="437" data-end="443">slot</code> 插槽机制实现组件内容分发和复用。</p>
</li>
</ul>
</li>
<li data-start="464" data-end="569">
<p data-start="467" data-end="477"><strong data-start="467" data-end="475">指令体系</strong></p>
<ul data-start="481" data-end="569">
<li data-start="481" data-end="569">
<p data-start="483" data-end="569">Vue&nbsp;2 的官方指令（<code data-start="495" data-end="503">v-bind</code>、<code data-start="504" data-end="510">v-on</code>、<code data-start="511" data-end="520">v-model</code>、<code data-start="521" data-end="529">v-show</code>、<code data-start="530" data-end="536">v-if</code>、<code data-start="537" data-end="544">v-for</code>……）在 Vue&nbsp;3 保持一致，仅在细节上有增强。</p>
</li>
</ul>
</li>
<li data-start="571" data-end="724">
<p data-start="574" data-end="586"><strong data-start="574" data-end="584">生命周期钩子</strong></p>
<ul data-start="590" data-end="724">
<li data-start="590" data-end="696">
<p data-start="592" data-end="696">大部分钩子名称保持一致：<code data-start="604" data-end="613">created</code> / <code data-start="616" data-end="625">mounted</code> / <code data-start="628" data-end="637">updated</code> / <code data-start="640" data-end="651">destroyed</code>（Vue&nbsp;3 中改称为 <code data-start="663" data-end="678">beforeUnmount</code> / <code data-start="681" data-end="692">unmounted</code>）。</p>
</li>
<li data-start="700" data-end="724">
<p data-start="702" data-end="724">钩子触发顺序与逻辑和 Vue&nbsp;2 基本相同。</p>
</li>
</ul>
</li>
</ol><hr data-start="726" data-end="729">
<h2 data-start="731" data-end="741">二、核心不同点</h2>
<div class="_tableContainer_16hzy_1">
<div class="_tableWrapper_16hzy_14 group flex w-fit flex-col-reverse">
<table class="w-fit min-w-(--thread-content-width)" data-start="743" data-end="2070">
<thead data-start="743" data-end="850">
<tr data-start="743" data-end="850"><th data-start="743" data-end="760" data-col-size="sm">维度</th><th data-start="760" data-end="803" data-col-size="md">Vue&nbsp;2</th><th data-start="803" data-end="850" data-col-size="md">Vue&nbsp;3</th></tr>
</thead>
<tbody data-start="961" data-end="2070">
<tr data-start="961" data-end="1066">
<td data-start="961" data-end="976" data-col-size="sm">核心实现</td>
<td data-col-size="md" data-start="976" data-end="1020">基于 <code data-start="981" data-end="1004">Object.defineProperty</code>（getter/setter）</td>
<td data-col-size="md" data-start="1020" data-end="1066">基于 ES6 <code data-start="1029" data-end="1036">Proxy</code></td>
</tr>
<tr data-start="1067" data-end="1183">
<td data-start="1067" data-end="1083" data-col-size="sm">响应式 API</td>
<td data-col-size="md" data-start="1083" data-end="1124"><code data-start="1085" data-end="1091">data</code>、<code data-start="1092" data-end="1102">computed</code>、<code data-start="1103" data-end="1110">watch</code></td>
<td data-col-size="md" data-start="1124" data-end="1183">新增 <code data-start="1129" data-end="1139">reactive</code>、<code data-start="1140" data-end="1145">ref</code>、<code data-start="1146" data-end="1156">computed</code>、<code data-start="1157" data-end="1164">watch</code>（Composition API）</td>
</tr>
<tr data-start="1184" data-end="1292">
<td data-start="1184" data-end="1199" data-col-size="sm">组件写法</td>
<td data-start="1199" data-end="1251" data-col-size="md">Options API（<code data-start="1213" data-end="1219">data</code>、<code data-start="1220" data-end="1229">methods</code>、<code data-start="1230" data-end="1240">computed</code>、<code data-start="1241" data-end="1248">watch</code>…）</td>
<td data-col-size="md" data-start="1251" data-end="1292">同时支持 Options API 和 Composition API</td>
</tr>
<tr data-start="1293" data-end="1377">
<td data-start="1293" data-end="1310" data-col-size="sm">性能</td>
<td data-col-size="md" data-start="1310" data-end="1342">启动慢、体积较大，大约 33KB gzip</td>
<td data-col-size="md" data-start="1342" data-end="1377">启动更快、体积更小，大约 23KB gzip</td>
</tr>
<tr data-start="1378" data-end="1469">
<td data-start="1378" data-end="1395" data-col-size="sm">Tree-shaking 支持</td>
<td data-col-size="md" data-start="1395" data-end="1432">几乎不支持</td>
<td data-col-size="md" data-start="1432" data-end="1469">完全支持，可按需打包</td>
</tr>
<tr data-start="1470" data-end="1545">
<td data-start="1470" data-end="1487" data-col-size="sm">TypeScript 支持</td>
<td data-col-size="md" data-start="1487" data-end="1515">社区维护的声明文件，体验一般</td>
<td data-col-size="md" data-start="1515" data-end="1545">官方支持、原生 TS 编写，类型推导更完善</td>
</tr>
<tr data-start="1546" data-end="1652">
<td data-start="1546" data-end="1561" data-col-size="sm">新增特性</td>
<td data-col-size="md" data-start="1561" data-end="1604">—</td>
<td data-col-size="md" data-start="1604" data-end="1652">Fragment、Teleport、Suspense、 <code data-start="1634" data-end="1650">&lt;script setup&gt;</code></td>
</tr>
<tr data-start="1653" data-end="1785">
<td data-start="1653" data-end="1670" data-col-size="sm">全局 API</td>
<td data-col-size="md" data-start="1670" data-end="1718"><code data-start="1672" data-end="1687">Vue.component</code>、<code data-start="1688" data-end="1703">Vue.directive</code>、<code data-start="1704" data-end="1715">Vue.mixin</code> 等</td>
<td data-col-size="md" data-start="1718" data-end="1785">迁移到 <code data-start="1724" data-end="1739">app.component</code>、<code data-start="1740" data-end="1755">app.directive</code>，并通过 <code data-start="1760" data-end="1771">createApp</code> 获取 <code data-start="1775" data-end="1780">app</code> 实例</td>
</tr>
<tr data-start="1786" data-end="1879">
<td data-start="1786" data-end="1798" data-col-size="sm">生命周期钩子</td>
<td data-col-size="md" data-start="1798" data-end="1840"><code data-start="1800" data-end="1815">beforeDestroy</code>、<code data-start="1816" data-end="1827">destroyed</code></td>
<td data-col-size="md" data-start="1840" data-end="1879"><code data-start="1842" data-end="1857">beforeUnmount</code>、<code data-start="1858" data-end="1869">unmounted</code>（名称更语义化）</td>
</tr>
<tr data-start="1880" data-end="1977">
<td data-start="1880" data-end="1897" data-col-size="sm"><code data-start="1882" data-end="1891">v-model</code> 语法</td>
<td data-start="1897" data-end="1934" data-col-size="md">单一语法（<code data-start="1904" data-end="1921">v-model="value"</code>）</td>
<td data-col-size="md" data-start="1934" data-end="1977">多个 <code data-start="1939" data-end="1948">v-model</code> 支持，语法改为 <code data-start="1957" data-end="1975">v-model:propName</code></td>
</tr>
<tr data-start="1978" data-end="2070">
<td data-start="1978" data-end="1993" data-col-size="sm">异步组件</td>
<td data-col-size="md" data-start="1993" data-end="2039"><code data-start="1995" data-end="2038">Vue.component('async', () =&gt; import(...))</code></td>
<td data-col-size="md" data-start="2039" data-end="2070">同上，但更便捷，并支持 Suspense 包裹等待状态</td>
</tr>
</tbody>
</table>
<div class="sticky end-(--thread-content-margin) h-0 self-end select-none">&nbsp;</div>
</div>
</div>
<hr data-start="2072" data-end="2075">
<h3 data-start="2077" data-end="2089">1. 响应式底层</h3>
<ul data-start="2091" data-end="2296">
<li data-start="2091" data-end="2216">
<p data-start="2093" data-end="2104"><strong data-start="2093" data-end="2102">Vue&nbsp;2</strong></p>
<ul data-start="2107" data-end="2216">
<li data-start="2107" data-end="2170">
<p data-start="2109" data-end="2170">利用 <code data-start="2112" data-end="2135">Object.defineProperty</code> 拦截属性的 getter/setter，实现依赖收集与派发更新。</p>
</li>
<li data-start="2173" data-end="2216">
<p data-start="2175" data-end="2216">对于新增属性或删除属性需手动用 <code data-start="2191" data-end="2200">Vue.set</code> / <code data-start="2203" data-end="2215">Vue.delete</code>。</p>
</li>
</ul>
</li>
<li data-start="2218" data-end="2296">
<p data-start="2220" data-end="2231"><strong data-start="2220" data-end="2229">Vue&nbsp;3</strong></p>
<ul data-start="2234" data-end="2296">
<li data-start="2234" data-end="2279">
<p data-start="2236" data-end="2279">改用 ES6 <code data-start="2243" data-end="2250">Proxy</code>，可直接监听整个对象、数组的增删改，无需额外 API。</p>
</li>
<li data-start="2282" data-end="2296">
<p data-start="2284" data-end="2296">性能更优，内存占用更低。</p>
</li>
</ul>
</li>
</ul>
<hr data-start="2298" data-end="2301">
<h3 data-start="2303" data-end="2339">2. API 设计：Options vs Composition</h3>
<ul data-start="2341" data-end="2988">
<li data-start="2341" data-end="2593">
<p data-start="2343" data-end="2366"><strong data-start="2343" data-end="2364">Options API（两者通用）</strong></p>
<div class="contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary">
<div class="flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between h-9 bg-token-sidebar-surface-primary select-none rounded-t-2xl">　　
<div class="cnblogs_code">
<pre>export <span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)"> {
  data() { </span><span style="color: rgba(0, 0, 255, 1)">return</span> { count: 0<span style="color: rgba(0, 0, 0, 1)"> } },
  computed: { </span><span style="color: rgba(0, 0, 255, 1)">double</span>() { <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">this</span>.count * 2<span style="color: rgba(0, 0, 0, 1)"> } },
  methods: { increment() { </span><span style="color: rgba(0, 0, 255, 1)">this</span>.count++<span style="color: rgba(0, 0, 0, 1)"> } },
  watch: { count(newVal) { console.log(newVal) } }
}</span></pre>
</div>
<p>&nbsp;</p>
</div>
</div>
</li>
<li data-start="2595" data-end="2988">
<p data-start="2597" data-end="2628"><strong data-start="2597" data-end="2626">Composition API（Vue&nbsp;3 新增）</strong></p>
<div class="contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary">
<div class="overflow-y-auto p-4" dir="ltr">
<div class="cnblogs_code">
<pre>import { ref, computed, watch } from 'vue'<span style="color: rgba(0, 0, 0, 1)">

export </span><span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)"> {
  setup() {
    const count </span>= ref(0<span style="color: rgba(0, 0, 0, 1)">)
    const </span><span style="color: rgba(0, 0, 255, 1)">double</span> = computed(() =&gt; count.value * 2<span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">function</span> increment() { count.value++<span style="color: rgba(0, 0, 0, 1)"> }
    watch(count, (newVal) </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> console.log(newVal))
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> { count, <span style="color: rgba(0, 0, 255, 1)">double</span><span style="color: rgba(0, 0, 0, 1)">, increment }
  }
}</span></pre>
</div>
<p>&nbsp;</p>
</div>
</div>
<ul data-start="2953" data-end="2988">
<li data-start="2953" data-end="2988">
<p data-start="2955" data-end="2988"><strong data-start="2955" data-end="2961">优点</strong>：逻辑关注点聚合，代码更 “扁平化”，便于复用和测试。</p>
</li>
</ul>
</li>
</ul>
<hr data-start="2990" data-end="2993">
<h3 data-start="2995" data-end="3009">3. 性能与打包体积</h3>
<ul data-start="3011" data-end="3088">
<li data-start="3011" data-end="3054">
<p data-start="3013" data-end="3054">Vue&nbsp;3 内部重写了虚拟 DOM、模板编译器、响应式系统，显著提升渲染性能。</p>
</li>
<li data-start="3055" data-end="3088">
<p data-start="3057" data-end="3088">原生支持 Tree-shaking，生产包体积更小、加载更快。</p>
</li>
</ul>
<hr data-start="3090" data-end="3093">
<h3 data-start="3095" data-end="3115">4. TypeScript 支持</h3>
<ul data-start="3117" data-end="3279">
<li data-start="3117" data-end="3204">
<p data-start="3119" data-end="3204">Vue&nbsp;2 的 TypeScript 支持依赖社区维护的 <code data-start="3148" data-end="3169">vue-class-component</code>、<code data-start="3170" data-end="3194">vue-property-decorator</code>，体验不够流畅。</p>
</li>
<li data-start="3205" data-end="3279">
<p data-start="3207" data-end="3279">Vue&nbsp;3 从内核开始设计，所有 API 都带有类型声明，<code data-start="3236" data-end="3262">&lt;script setup lang="ts"&gt;</code> 让组件编写更简洁，类型推导到位。</p>
</li>
</ul>
<hr data-start="3281" data-end="3284">
<h3 data-start="3286" data-end="3299">5. 新增核心特性</h3>
<div class="_tableContainer_16hzy_1">
<div class="_tableWrapper_16hzy_14 group flex w-fit flex-col-reverse">
<table class="w-fit min-w-(--thread-content-width)" data-start="3301" data-end="3695">
<thead data-start="3301" data-end="3376">
<tr data-start="3301" data-end="3376"><th data-start="3301" data-end="3314" data-col-size="sm">特性</th><th data-start="3314" data-end="3376" data-col-size="sm">说明</th></tr>
</thead>
<tbody data-start="3457" data-end="3695">
<tr data-start="3457" data-end="3518">
<td data-start="3457" data-end="3472" data-col-size="sm">Fragment</td>
<td data-start="3472" data-end="3518" data-col-size="sm">组件可返回多个根节点，无需额外包裹元素</td>
</tr>
<tr data-start="3519" data-end="3574">
<td data-start="3519" data-end="3534" data-col-size="sm">Teleport</td>
<td data-start="3534" data-end="3574" data-col-size="sm">将子组件渲染到 DOM 的任意位置，常用于模态框、提示框等</td>
</tr>
<tr data-start="3575" data-end="3634">
<td data-start="3575" data-end="3590" data-col-size="sm">Suspense</td>
<td data-start="3590" data-end="3634" data-col-size="sm">异步组件加载时可展示占位内容，提升用户体验</td>
</tr>
<tr data-start="3635" data-end="3695">
<td data-start="3635" data-end="3654" data-col-size="sm"><code data-start="3637" data-end="3653">&lt;script setup&gt;</code></td>
<td data-start="3654" data-end="3695" data-col-size="sm">单文件组件的简写语法，更简洁，自动推导 <code data-start="3676" data-end="3685">setup()</code> 返回值</td>
</tr>
</tbody>
</table>
<div class="sticky end-(--thread-content-margin) h-0 self-end select-none">&nbsp;</div>
</div>
</div>
<hr data-start="3697" data-end="3700">
<h2 data-start="3702" data-end="3713">三、迁移与兼容性</h2>
<ol data-start="3715" data-end="4632">
<li data-start="3715" data-end="3906">
<p data-start="3718" data-end="3733"><strong data-start="3718" data-end="3731">全局 API 变化</strong></p>
<div class="contain-inline-size rounded-2xl relative bg-token-sidebar-surface-primary">
<div class="flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between h-9 bg-token-sidebar-surface-primary select-none rounded-t-2xl">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Vue2</span>
     Vue.component('MyComp'<span style="color: rgba(0, 0, 0, 1)">, MyComp) 
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Vue3 import { createApp } from 'vue'</span>
    const app =<span style="color: rgba(0, 0, 0, 1)"> createApp(App) 
    app.component(</span>'MyComp', MyComp)</pre>
</div>
<p>&nbsp;</p>
</div>
</div>
</li>
<li data-start="3908" data-end="4384">
<p data-start="3911" data-end="3925"><strong data-start="3911" data-end="3923">生命周期钩子命名</strong></p>
<div class="_tableContainer_16hzy_1">
<div class="_tableWrapper_16hzy_14 group flex w-fit flex-col-reverse">
<table class="w-fit min-w-(--thread-content-width)" data-start="3929" data-end="4384">
<thead data-start="3929" data-end="3970">
<tr data-start="3929" data-end="3970"><th data-start="3929" data-end="3948" data-col-size="sm">Vue&nbsp;2</th><th data-start="3948" data-end="3970" data-col-size="sm">Vue&nbsp;3</th></tr>
</thead>
<tbody data-start="4020" data-end="4384">
<tr data-start="4020" data-end="4062">
<td data-start="4020" data-end="4039" data-col-size="sm">beforeCreate</td>
<td data-start="4039" data-end="4062" data-col-size="sm">beforeCreate</td>
</tr>
<tr data-start="4066" data-end="4108">
<td data-start="4066" data-end="4085" data-col-size="sm">created</td>
<td data-start="4085" data-end="4108" data-col-size="sm">created</td>
</tr>
<tr data-start="4112" data-end="4154">
<td data-start="4112" data-end="4131" data-col-size="sm">beforeMount</td>
<td data-start="4131" data-end="4154" data-col-size="sm">beforeMount</td>
</tr>
<tr data-start="4158" data-end="4200">
<td data-start="4158" data-end="4177" data-col-size="sm">mounted</td>
<td data-start="4177" data-end="4200" data-col-size="sm">mounted</td>
</tr>
<tr data-start="4204" data-end="4246">
<td data-start="4204" data-end="4223" data-col-size="sm">beforeUpdate</td>
<td data-start="4223" data-end="4246" data-col-size="sm">beforeUpdate</td>
</tr>
<tr data-start="4250" data-end="4292">
<td data-start="4250" data-end="4269" data-col-size="sm">updated</td>
<td data-start="4269" data-end="4292" data-col-size="sm">updated</td>
</tr>
<tr data-start="4296" data-end="4338">
<td data-start="4296" data-end="4315" data-col-size="sm">beforeDestroy</td>
<td data-start="4315" data-end="4338" data-col-size="sm">beforeUnmount</td>
</tr>
<tr data-start="4342" data-end="4384">
<td data-start="4342" data-end="4361" data-col-size="sm">destroyed</td>
<td data-start="4361" data-end="4384" data-col-size="sm">unmounted</td>
</tr>
</tbody>
</table>
<div class="sticky end-(--thread-content-margin) h-0 self-end select-none">&nbsp;</div>
</div>
</div>
</li>
<li data-start="4386" data-end="4479">
<p data-start="4389" data-end="4407"><strong data-start="4389" data-end="4405"><code data-start="4391" data-end="4400">v-model</code> 改动</strong></p>
<ul data-start="4411" data-end="4479">
<li data-start="4411" data-end="4439">
<p data-start="4413" data-end="4439">Vue&nbsp;2 只能对 <code data-start="4423" data-end="4430">value</code> 做双向绑定。</p>
</li>
<li data-start="4443" data-end="4479">
<p data-start="4445" data-end="4479">Vue&nbsp;3 支持多个 <code data-start="4456" data-end="4465">v-model</code>，并可绑定自定义 prop。</p>
</li>
</ul>
</li>
<li data-start="4481" data-end="4632">
<p data-start="4484" data-end="4495"><strong data-start="4484" data-end="4493">跨版本插件</strong></p>
<ul data-start="4499" data-end="4632">
<li data-start="4499" data-end="4589">
<p data-start="4501" data-end="4589">大多数 Vue&nbsp;2 插件在 Vue&nbsp;3 下需升级才能兼容，Vue&nbsp;3 官方提供 <a class="cursor-pointer" rel="noopener" target="_new" data-start="4541" data-end="4588">兼容构建版本</a>.</p>
</li>
<li data-start="4593" data-end="4632">
<p data-start="4595" data-end="4632">推荐逐渐迁移业务逻辑到 Composition API，再切换核心库版本。</p>
</li>
</ul>
</li>
</ol><hr data-start="4634" data-end="4637">
<h2 data-start="4639" data-end="4646">四、总结</h2>
<ul data-start="4648" data-end="4783">
<li data-start="4648" data-end="4691">
<p data-start="4650" data-end="4691"><strong data-start="4650" data-end="4657">相同点</strong>：核心思想不变，模板+组件+响应式，指令体系、生命周期钩子保留。</p>
</li>
<li data-start="4692" data-end="4783">
<p data-start="4694" data-end="4783"><strong data-start="4694" data-end="4701">不同点</strong>：Vue&nbsp;3 在响应式底层（Proxy）、API（Composition）、性能、体积、Tree‑shaking、TypeScript 支持及新特性上都有重大改进。</p>
</li>
</ul>
<p data-start="4785" data-end="4888">对于新项目，推荐直接使用 Vue&nbsp;3，享受更好性能和更现代的开发体验；对于已有 Vue&nbsp;2 项目，则可以先引入 Vue&nbsp;3 的 Composition API 插件，逐步重构业务逻辑，再升级到 Vue&nbsp;3。</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-21 11:10">2025-06-21 11:10</span>&nbsp;
<a href="https://www.cnblogs.com/ltwlh">LT先生</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18939770);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18939770', targetLink: 'https://www.cnblogs.com/ltwlh/p/18939770', title: 'Vue2和Vue3的差异化（通俗易懂）' })">举报</a>
</div>
        