
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/goldsunshine/p/18889537" title="发布于 2025-05-21 18:21">
    <span role="heading" aria-level="2">f-string 高效的字符串格式化</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        f-string，称为格式化字符串常量（formatted string literals），是Python3.6新引入的一种字符串格式化方法，该方法源于PEP 498 – Literal String Interpolation，主要目的是使格式化字符串的操作更加简便。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><img src="https://img2024.cnblogs.com/blog/1060878/202505/1060878-20250521181518197-1684887399.png" alt="" loading="lazy"></p>
<p>f-string，称为格式化字符串常量（formatted string literals），是Python3.6新引入的一种字符串格式化方法，该方法源于PEP 498 – Literal String Interpolation，主要目的是使格式化字符串的操作更加简便。</p>
<p>python中常用有3种字符串格式化的方法：</p>
<ul>
<li>占位符 例如 print("my name is " % "hanmeimei")</li>
<li>format  例如 print("my name is {}".format("hanmeimei"))</li>
<li>f-string  例如 print(f"my name is {'hanmeimei'}")</li>
</ul>
<p>其中f-string是推荐的最清晰，效率最高的方法。本篇主要讲解f-string常见的使用方法。</p>
<h1 id="语法">语法</h1>
<p>f-string采用<code>content:format}</code> 设置字符串格式，其中 content 是替换并填入字符串的内容，可以是变量、表达式、函数等，format 是格式描述符，可以省略。</p>
<p>Python <code>f-string</code> 格式化字符串的完整格式说明是通过冒号（<code>:</code>）后面的格式规范符来实现的。这个格式化规范符可以用来控制数字、字符串、时间日期等数据类型的输出格式。以下是完整的格式说明，包括常见的格式化选项及其用法。</p>
<pre><code class="language-python">f"{expression:{flags}{width}{precision}{type}}"
</code></pre>
<ul>
<li><strong>expression</strong>: 要格式化的值（例如数字、字符串等）。</li>
<li><strong>flags</strong>: 用于指定填充方式、对齐方式等。</li>
<li><strong>width</strong>: 输出的最小宽度。如果输出的值宽度小于指定的宽度，则会进行填充。</li>
<li><strong>precision</strong>: 用于控制浮动点数的小数点精度或其他数值精度。</li>
<li><strong>type</strong>: 用于指定格式类型，例如浮动点数、整数、字符串等。</li>
</ul>
<p><font style="color: rgba(51, 65, 85, 1)"></font></p>
<p>简单使用</p>
<p>f-string用大括号 <code>{}</code> 表示被替换字段，其中直接填入替换内容：</p>
<pre><code class="language-python">&gt;&gt;&gt; name = 'Eric'
&gt;&gt;&gt; f'Hello, my name is {name}'
'Hello, my name is Eric'

&gt;&gt;&gt; number = 7
&gt;&gt;&gt; f'My lucky number is {number}'
'My lucky number is 7'

&gt;&gt;&gt; price = 19.99
&gt;&gt;&gt; f'The price of this book is {price}'
'The price of this book is 19.99'

</code></pre>
<p>注意：不管变量的类型是什么，最后都会得到字符串类型的结果</p>
<h1 id="使用方法">使用方法</h1>
<h2 id="宽度控制">宽度控制</h2>
<p>使用f-string最常见的就是控制变量精度和输出宽度</p>
<table>
<thead>
<tr>
<th>格式描述符</th>
<th>含义与作用</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>width</td>
<td>整数 width 指定宽度</td>
<td>0width：整数 width 指定宽度，开头的 0 指定高位用 0 补足宽度</td>
</tr>
<tr>
<td>width.precision</td>
<td>整数 width 指定宽度，整数 precision 指定显示精度</td>
<td></td>
</tr>
</tbody>
</table>
<p>以圆点为分割，圆点之前控制输出宽度，原点之后控制输出精度。</p>
<p><strong>控制输出宽度，不管是数值类型和字符串类型都可以。语法：f"{变量: <strong><strong><font style="color: rgba(47, 75, 218, 1)">宽度</font></strong></strong>}"</strong></p>
<ul>
<li>指定宽度小于变量宽度：正常输出</li>
<li>指定宽度大于变量宽度：输出指定宽度，以空格补齐。字符串右补齐，数值左补齐</li>
</ul>
<pre><code class="language-python">&gt;&gt;&gt; a = 3.1415926
# 变量宽度9，指定宽度20，数值左补齐
&gt;&gt;&gt; print(f"{a:20}")
           3.1415926
&gt;&gt;&gt; print(len(f"{a:20}"))
20


&gt;&gt;&gt; c = "hello world"

&gt;&gt;&gt; print(f"{c:5}")
hello world

&gt;&gt;&gt; print(f"{c:25}")
hello world          

# 变量只有11个字符串，指定宽度为25，输出长度为25，以空格补齐
&gt;&gt;&gt; print(len(f"{c:25}"))
25
</code></pre>
<p>有一个特别使用<strong>f"{变量: 0宽度}"，在宽度前面加0可以实现变量显示前面用0补齐</strong></p>
<pre><code class="language-python">&gt;&gt;&gt; a = 3.1415926

&gt;&gt;&gt; print(f"{a:020}")
000000000003.1415926
&gt;&gt;&gt; 

</code></pre>
<h2 id="精度控制">精度控制</h2>
<p>数值</p>
<p>整型和浮点数使用f-string可以控制输出的精度。语法是 <strong>f"{变量: <strong><strong><font style="color: rgba(47, 75, 218, 1)">.4f</font></strong></strong>}"</strong>，其中4f是指小数点后的位数，可以实现精度截断或扩充。其中截断的规则是四舍五入，扩充是将精度增加到指定位数</p>
<pre><code class="language-python">&gt;&gt;&gt; a = 3.1415926

&gt;&gt;&gt; print(f"{a:.4f}")
3.1416

&gt;&gt;&gt; b = 100

&gt;&gt;&gt; print(f"{b}")
'100'

&gt;&gt;&gt; print(f"{b:.6f}")
'100.000000'
&gt;&gt;&gt; 
</code></pre>
<p>字符串</p>
<p>字符串同样可以控制输出精度，使用语法** f"{变量:.4s}"**, 其中4s指字符串的长度，s可以省略，可以实现截断，但不会填充。设置的长度大于变量长度，输出仍然是变量的长度。</p>
<pre><code class="language-python">&gt;&gt;&gt; c = "hello world"

&gt;&gt;&gt; print(f"{c:.2}")
he

&gt;&gt;&gt; print(f"{c:.10s}")
hello worl
    
&gt;&gt;&gt; print(f"{c:.5s}")
hello

# 精度超出长度不会填充
&gt;&gt;&gt; print(f"{c:.20s}")
hello world

&gt;&gt;&gt; print(len(f"{c:.20s}"))
11
</code></pre>
<p>可以同时控制宽度和精度</p>
<pre><code class="language-python">&gt;&gt;&gt; a = 3.1415926
&gt;&gt;&gt; print(f"{a:14.4f}")
        3.1416

&gt;&gt;&gt; c = "hello world"
&gt;&gt;&gt; print(f"{c:25.4s}")
hell 
</code></pre>
<h2 id="对齐">对齐</h2>
<p>对齐是指输出时当指定宽度大于变量宽度时如何显示，可以选择的包括：</p>
<ul>
<li><code>&gt;: 右对齐</code></li>
<li><code>&lt;: 左对齐 （默认行为）</code></li>
<li><code>^: 居中对齐 </code></li>
</ul>
<pre><code class="language-python">&gt;&gt;&gt; c = "hello world"

# 设置宽度之后就会出现空格填充，字符串默认右填充即左对齐
&gt;&gt;&gt; print(f"{c:20}")
hello world         

&gt;&gt;&gt; print(len(f"{c:20}"))
20

&gt;&gt;&gt; print(f"{c:&lt;20}")
hello world         
&gt;&gt;&gt; 

&gt;&gt;&gt; print(f"{c:&gt;20}")
         hello world

&gt;&gt;&gt; print(f"{c:^20}")
    hello world     

</code></pre>
<h2 id="填充">填充</h2>
<p>在对齐时默认使用空格填充，也可以使用指定字符填充。使用语法 **f"{变量: 填充字符&lt;宽度}" **，填充字符常见：-、+、*、0等等</p>
<pre><code class="language-python">&gt;&gt;&gt; c = "hello world"

&gt;&gt;&gt; print(f"{c:&lt;20}")
hello world         

&gt;&gt;&gt; print(f"{c:-&lt;20}")
hello world---------

&gt;&gt;&gt; print(f"{c:-&gt;20}")
---------hello world
&gt;&gt;&gt; 
&gt;&gt;&gt; print(f"{c:-^20}")
----hello world-----

&gt;&gt;&gt; print(f"{c:*^20}")
****hello world*****

&gt;&gt;&gt; print(f"{c:0^20}")
0000hello world00000

</code></pre>
<h2 id="数据格式">数据格式</h2>
<p>类型标识符 (type) 类型标识符决定了如何表示和格式化数值、字符串等常见数据类型。常见的类型标识符包括：</p>
<ul>
<li>s: 字符串。</li>
<li>b: 二进制整数格式</li>
<li>d: 十进制整数（整数）</li>
<li>o: 八进制整数格式</li>
<li>x: 十六进制小写。</li>
<li>X: 十六进制大写。</li>
<li>c: 字符格式，按unicode编码将整数转换为对应字符</li>
<li>f: 浮动点数（默认的浮动点数）。</li>
<li>e: 科学计数法表示浮动点数。</li>
<li>g: 科学计数法或浮动点数（根据精度选择合适格式）。</li>
<li>%: 百分比格式，将浮动点数乘以 100 并附加 % 符号。</li>
</ul>
<p>数值转十进制</p>
<pre><code class="language-python">&gt;&gt;&gt; value = 0xff
&gt;&gt;&gt; value
255
&gt;&gt;&gt; print(f"{value:d}")
255

</code></pre>
<p>进制转换</p>
<pre><code class="language-python">&gt;&gt;&gt; a = 378297640000
&gt;&gt;&gt; 

# 10转2
&gt;&gt;&gt; print(f"{a:b}")
101100000010100010010111110010001000000

# 10转8
&gt;&gt;&gt; print(f"{a:d}")
378297640000

# 10转16
&gt;&gt;&gt; print(f"{a:x}")
58144be440
</code></pre>
<p>默认不添加进制的前缀，使用# 可以添加</p>
<pre><code class="language-python">&gt;&gt;&gt; a = 378297640000

&gt;&gt;&gt; print(f"{a:#b}")
0b101100000010100010010111110010001000000

&gt;&gt;&gt; print(f"{a:#d}")
378297640000

&gt;&gt;&gt; print(f"{a:#x}")
0x58144be440

&gt;&gt;&gt; print(f"{a:#X}")
0X58144BE440

</code></pre>
<p>变量转浮点数</p>
<pre><code class="language-python">&gt;&gt;&gt; value = 0xff

&gt;&gt;&gt; print(f"{value:f}")
255.000000
&gt;&gt;&gt; 

</code></pre>
<p>将整数转换为unicode编码对应字符</p>
<pre><code class="language-python">&gt;&gt;&gt; a = 69
&gt;&gt;&gt; print(f"{a:c}")
E
&gt;&gt;&gt; a = 290
&gt;&gt;&gt; print(f"{a:c}")
Ģ
&gt;&gt;&gt; a = 2736
&gt;&gt;&gt; print(f"{a:c}")
ર
</code></pre>
<p>科学计数法</p>
<pre><code class="language-python">&gt;&gt;&gt; a = 378297640000
&gt;&gt;&gt; 
&gt;&gt;&gt; print(f"{a:e}")
3.782976e+11

&gt;&gt;&gt; b = -0.132465
&gt;&gt;&gt; 
&gt;&gt;&gt; print(f"{b:e}")
-1.324650e-01
</code></pre>
<p>百分号</p>
<p>将浮动点数乘以 100 并附加 % 符号</p>
<pre><code class="language-python">&gt;&gt;&gt; a = 0.5473
&gt;&gt;&gt; print(f"{a:%}")
54.730000%

</code></pre>
<h2 id="时间格式">时间格式</h2>
<p>fstring 以通过结合 datetime 模块来实现时间的格式化。更多格式可自行查阅。</p>
<pre><code class="language-python">&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; 
&gt;&gt;&gt; now = datetime.now()
&gt;&gt;&gt; 
&gt;&gt;&gt; now
datetime.datetime(2025, 5, 15, 17, 42, 6, 490934)
&gt;&gt;&gt; formatted_time = f"{now:%Y-%m-%d %H:%M:%S}"
&gt;&gt;&gt; print(formatted_time)
2025-05-15 17:42:06
&gt;&gt;&gt; 

</code></pre>
<h1 id="综合使用">综合使用</h1>
<p>浮点数填充到20位中间对齐保留2位小数点</p>
<pre><code class="language-python">&gt;&gt;&gt; a = 3.1415926

&gt;&gt;&gt; print(f"{a:-^20.2f}")
--------3.14--------

</code></pre>
<p>整数填充到30位右对齐转换成十六进制</p>
<pre><code class="language-python">&gt;&gt;&gt; a = 378297640000

&gt;&gt;&gt; print(f"{a:+&gt;30x}")
++++++++++++++++++++58144be440

</code></pre>
<p>参考：</p>
<p><a href="https://www.wangxhub.com/2024/12/08/python-f-string-format/" target="_blank" rel="noopener nofollow">https://www.wangxhub.com/2024/12/08/python-f-string-format/</a></p>
<p><a href="https://blog.csdn.net/sunxb10/article/details/81036693" target="_blank" rel="noopener nofollow">https://blog.csdn.net/sunxb10/article/details/81036693</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.08845469211111111" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-21 18:22">2025-05-21 18:21</span>&nbsp;
<a href="https://www.cnblogs.com/goldsunshine">金色旭光</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18889537);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18889537', targetLink: 'https://www.cnblogs.com/goldsunshine/p/18889537', title: 'f-string 高效的字符串格式化' })">举报</a>
</div>
        