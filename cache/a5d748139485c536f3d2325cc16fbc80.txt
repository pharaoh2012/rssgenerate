
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/JulianHuang/p/19040265" title="发布于 2025-08-15 19:53">
    <span role="heading" aria-level="2">JWT 这点小秘密，你们肯定知道！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h3 id="1-在微服务背景和前后端分离开发风格下-jwt作为授权和信息交换的技术方案得以广泛梭哈">1. 在微服务背景和前后端分离开发风格下， jwt作为授权和信息交换的技术方案，得以广泛梭哈。</h3>
<p><img src="https://files.mdnice.com/user/4236/2de3bba1-17c9-4dec-8025-05a1785100c3.png" alt="" loading="lazy"></p>
<p>1&gt; 授权<br>
用户一旦通过登录认证， 会被下发一个token， 之后的每次请求都会带上这个token， 将能访问该token允许的资源/服务， 单点登录广泛采用了jwt， 因为它负载轻量且自然跨域使用。</p>
<p>2&gt; 信息交换<br>
jwt中含有轻量用户数据，有效使用JWT，可以降低服务器查询数据库的次数。利用非对称的公钥私钥，还可以做到可信的信息交换。</p>
<p>核心优势：</p>
<ul>
<li>无状态</li>
<li>自包含</li>
<li>天然跨域支持</li>
<li>可扩展（自定义claims）</li>
</ul>
<h3 id="2-jwtjson-web-token明面上是一个based64字符串-那json从何而来">2. jwt（json web token）明面上是一个based64字符串， 那json从何而来？</h3>
<p>jwt一般附加在请求头：<br>
<code>Authorization：Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzU1MTkwNTEyLCJpYXQiOjE3NTQ4MzA1MTIsImp0aSI6ImRiY2M2ZjE4ODVlZjRmNTliODgxMzUyNzBiYWY1NTU2IiwidXNlcl9pZCI6MX0.JBQD87mcrRm6dG4tYdrxqV_fVDeuonsbPyJr2mgiFiM</code></p>
<p>静态结构有点类似基本身份认证basic authentication：<br>
<code>Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l</code></p>
<p>jwt token分为三块， 中间用.连接</p>
<ul>
<li>
<p>header：  明文记录了token校验的算法（base64 算作明文）</p>
<p>base64({"alg": "HS256","typ": "jWT"})</p>
</li>
<li>
<p>payload： 记录了下发身份信息的发牌人、发牌时间、过期时间、待传递身份信息</p>
</li>
</ul>
<pre><code>  base64({
  "token_type": "access",
  "exp": 1755190512,
  "iat": 1754830512,
  "jti": "dbcc6f1885ef4f59b88135270baf5556",
  "user_id": 1
})
</code></pre>
<ul>
<li>sign： 通过算法（header中alg标记的算法）对header和payload做计算产生的签名字符串.</li>
</ul>
<p>如果使用HS256对称加密算法：<br>
<code>sign= HMACSHA256(base64(header) + "." +base64(payload),secret)</code></p>
<hr>
<p>jwt payload中的claims</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>iss</td>
<td>Issuer</td>
<td>发牌人</td>
</tr>
<tr>
<td>sub</td>
<td>Subject</td>
<td>主题</td>
</tr>
<tr>
<td>aud</td>
<td>Audience</td>
<td>claim的受众</td>
</tr>
<tr>
<td>exp</td>
<td>Expiration Time</td>
<td>过期时间</td>
</tr>
<tr>
<td>iat</td>
<td>Issued At</td>
<td>发牌时间</td>
</tr>
<tr>
<td>jti</td>
<td>JWT ID</td>
<td>jwt 的唯一id，用于防止重放攻击、或注销token</td>
</tr>
</tbody>
</table>
<h3 id="拒绝重放攻击">拒绝重放攻击</h3>
<ul>
<li>攻击者截获了一个有效的 Token，试图重复使用。</li>
<li>服务端可以通过检查<code>jti</code>是否已在“已使用列表”或“黑名单”中来拒绝重复请求。</li>
</ul>
<h3 id="注销token">注销token</h3>
<ul>
<li>可以用<code>jti</code>作为 key 存储在 Redis 中，实现 Token 注销（logout）功能。<br>
例如：用户登出后，将 <code>jti</code> 加入黑名单，后续请求即使有有效签名也会被拒绝。</li>
</ul>
<h3 id="3使用jwt-token我们还应该知道什么">3.使用jwt token我们还应该知道什么？</h3>
<ul>
<li>
<p>JWT 默认是不加密，不能将敏感关键信息写入JWT。</p>
</li>
<li>
<p>JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</p>
</li>
<li>
<p>JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT的有效期应该设置得比较短，且使用HTTPS传输。对于一些比较重要的权限，使用时应该再次对用户进行认证。</p>
</li>
</ul>
<h3 id="4-jwt校验和jwt验证">4. jwt校验和jwt验证</h3>
<p>客户端携带jwt token，服务端完整的校验流程</p>
<p>1&gt;  validation</p>
<ul>
<li>结构校验： 是否包含header，payload，sign 并以点号分割</li>
<li>格式校验：每一部分是否都是base64 编码</li>
<li>内容校验：检查payload 携带的claims是否正确： 过期时间exp、发牌时间iat， 令牌可用时间nbf</li>
</ul>
<p>2&gt;  verification</p>
<ul>
<li>签名验证： 使用header 中约定的算法，服务器利用内置的secret key 或者 public key产生签名sign2，如果签名sign2 !=sign, 则令牌可能被篡改或并非来自可信来源。</li>
</ul>
<p>密码学原理：</p>
<ul>
<li>如果header中约定使用对称加密， 那么发牌人和验证服务器共享密钥 secret key， 这个需要双方都妥善保管。</li>
<li>如果header中约定使用非对称加密， 那么是由发牌人持私钥签名， 验证服务器持公钥public key验签。</li>
</ul>
<table>
<thead>
<tr>
<th>特性</th>
<th>对称加密</th>
<th>非对称加密</th>
</tr>
</thead>
<tbody>
<tr>
<td>加解密效率</td>
<td>✅ 高</td>
<td>❌ 较低</td>
</tr>
<tr>
<td>密钥管理</td>
<td>❌ 难（需安全分发）</td>
<td>✅ 易（公钥可公开）</td>
</tr>
<tr>
<td>能否确认发送者身份？</td>
<td>❌ 不能（无不可否认性）</td>
<td>✅ 能（通过数字签名</td>
</tr>
</tbody>
</table>

</div>
<div id="MySignature" role="contentinfo">
    <hr style="FILTER: alpha(opacity=100,finishopacity=0,style=3)" width="80%" color="#987cb9" size="3">
<div style="text-align:center;">
<p>本文来自博客园，作者：{有态度的马甲}，转载请注明原文链接：<a href="https://www.cnblogs.com/JulianHuang/p/19040265" target="_blank">https://www.cnblogs.com/JulianHuang/p/19040265</a></p>
<strong style="color: red; ">欢迎关注我的原创技术、职场公众号， 加好友谈天说地，一起进化</strong>
<div><img style="width: 250px;height:250px;" src="https://blog-static.cnblogs.com/files/JulianHuang/QR.gif"> </div>

</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-15 19:53">2025-08-15 19:53</span>&nbsp;
<a href="https://www.cnblogs.com/JulianHuang">码甲哥不卷</a>&nbsp;
阅读(<span id="post_view_count">70</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19040265);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19040265', targetLink: 'https://www.cnblogs.com/JulianHuang/p/19040265', title: 'JWT 这点小秘密，你们肯定知道！' })">举报</a>
</div>
        