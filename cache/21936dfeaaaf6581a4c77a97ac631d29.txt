
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/edisonchou/p/-/introduction-to-vector-rag-demo" title="发布于 2025-03-06 18:30">
    <span role="heading" aria-level="2">基于Microsoft.Extensions.AI核心库实现RAG应用</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/381412/202503/381412-20250302211639096-89104028.png" alt="基于Microsoft.Extensions.AI核心库实现RAG应用" class="desc_img">
        本文介绍了如何基于Microsoft.Extensions.AI + Microsoft.Extensions.VectorData 一步一步地实现一个RAG（检索增强生成）应用，相信会对你有所帮助。如果你也是.NET程序员希望参与AI应用的开发，那就快快了解和使用基于Microsoft.Extensioins.AI + Microsoft.Extensions.VectorData 的生态组件库吧。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>大家好，我是Edison。</p>
<p>之前我们了解&nbsp;<a href="https://mp.weixin.qq.com/s?__biz=MzA4NzQzNTg4Ng==&amp;mid=2651743854&amp;idx=1&amp;sn=20d77c04caac4e011bc9b122796a4178&amp;scene=21#wechat_redirect" target="_blank" data-itemshowtype="0" data-linktype="2" rel="noopener nofollow">Microsoft.Extensions.AI</a>&nbsp;和&nbsp;<a href="https://mp.weixin.qq.com/s?__biz=MzA4NzQzNTg4Ng==&amp;mid=2651743879&amp;idx=1&amp;sn=44074a36dfc7a0b01a5f9bba808f706a&amp;scene=21#wechat_redirect" target="_blank" data-itemshowtype="0" data-linktype="2" rel="noopener nofollow">Microsoft.Extensions.VectorData</a>&nbsp;两个重要的AI应用核心库。基于对他们的了解，今天我们就可以来实战一个RAG问答应用，把之前所学的串起来。</p>
<p>前提知识点：向量存储、词嵌入、向量搜索、提示词工程、函数调用。</p>
<h1><strong>案例需求背景</strong></h1>
<p>假设我们在一家名叫“易速鲜花”的电商网站工作，顾名思义，这是一家从事鲜花电商的网站。我们有一些运营手册、员工手册之类的文档（例如下图所示的一些pdf文件），想要将其导入知识库并创建一个AI机器人，负责日常为员工解答一些政策性的问题。</p>
<p>例如，员工想要了解奖励标准、行为准备、报销流程等等，都可以通过和这个AI机器人对话就可以快速了解最新的政策和流程。</p>
<p>在接下来的Demo中，我们会使用以下工具：</p>
<p>(1) LLM 采用 Qwen2.5-7B-Instruct，可以使用SiliconFlow平台提供的API，你也可以改为你喜欢的其他模型如DeepSeek，但是建议不要用大炮打蚊子哈。</p>
<p>注册地址：<a href="https://cloud.siliconflow.cn/i/DomqCefW" target="_blank" rel="noopener nofollow">点此注册</a></p>
<p>(2) Qdrant 作为 向量数据库，可以使用Docker在你本地运行一个：</p>
<div class="cnblogs_code">
<pre>docker run -p <span style="color: rgba(128, 0, 128, 1)">6333</span>:<span style="color: rgba(128, 0, 128, 1)">6333</span> -p <span style="color: rgba(128, 0, 128, 1)">6334</span>:<span style="color: rgba(128, 0, 128, 1)">6334</span><span style="color: rgba(0, 0, 0, 1)"> \
</span>-v $(<span style="color: rgba(0, 0, 255, 1)">pwd</span>)/qdrant_storage:/qdrant/<span style="color: rgba(0, 0, 0, 1)">storage \
qdrant</span>/qdrant</pre>
</div>
<p>(3) Ollama 运行 bge-m3 模型 作为 Emedding生成器，可以自行拉取一个在你本地运行：</p>
<div class="cnblogs_code">
<pre>ollama pull bge-m3</pre>
</div>
<h1><strong>构建你的RAG应用</strong></h1>
<p>创建一个控制台应用程序，添加一些必要的文件目录 和 配置文件（json），最终的解决方案如下图所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202503/381412-20250302203911548-1462239552.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>在Documents目录下放了我们要导入的一些pdf文档，例如公司运营手册、员工手册等等。</p>
<p>在Models目录下放了一些公用的model类，其中TextSnippet类作为向量存储的实体类，而TextSearchResult类则作为向量搜索结果的模型类。</p>
<p><strong>（1）TextSnippet</strong></p>
<p>这里我们的TextEmbedding字段就是我们的向量值，它有1024维。</p>
<p>注意：这里的维度是我们自己定义的，你也可以改为你想要的维度数量，但是你的词嵌入模型需要支持你想要的维度数量。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">sealed</span> <span style="color: rgba(0, 0, 255, 1)">class</span> TextSnippet&lt;TKey&gt;<span style="color: rgba(0, 0, 0, 1)">
{
    [VectorStoreRecordKey]
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> required TKey Key { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }

    [VectorStoreRecordData]
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span>? Text { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }

    [VectorStoreRecordData]
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span>? ReferenceDescription { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }

    [VectorStoreRecordData]
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span>? ReferenceLink { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }

    [VectorStoreRecordVector(Dimensions: </span><span style="color: rgba(128, 0, 128, 1)">1024</span><span style="color: rgba(0, 0, 0, 1)">)]
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> ReadOnlyMemory&lt;<span style="color: rgba(0, 0, 255, 1)">float</span>&gt; TextEmbedding { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
}</span></pre>
</div>
<p><strong>（2）TextSearchResult</strong></p>
<p>这个类主要用来返回给LLM做推理用的，我这里只需要三个字段：Value, Link 和 Score 即可。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> TextSearchResult
{
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span>  Value { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span>? Link { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">double</span>? Score { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
}</span></pre>
</div>
<p><strong>（3）RawContent</strong></p>
<p>这个类主要用来在PDF导入时作为一个临时存储源数据文档内容。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">sealed</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> RawContent
{
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span>? Text { <span style="color: rgba(0, 0, 255, 1)">get</span><span style="color: rgba(0, 0, 0, 1)">; init; }

    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">int</span> PageNumber { <span style="color: rgba(0, 0, 255, 1)">get</span><span style="color: rgba(0, 0, 0, 1)">; init; }
<strong>}</strong></span></pre>
</div>
<p>在Plugins目录下放了一些公用的帮助类，如PdfDataLoader可以实现PDF文件的读取和导入向量数据库，VectorDataSearcher可以实现根据用户的query搜索向量数据库获取TopN个近似文档，而UniqueKeyGenerator则用来生成唯一的ID Key。</p>
<p><strong>（1）PdfDataLoader</strong></p>
<p>作为PDF文件的导入核心逻辑，它实现了PDF文档读取、切分、生成指定维度的向量 并 存入向量数据库。</p>
<p>注意：这里只考虑了文本格式的内容，如果你还想考虑文件中的图片将其转成文本，你需要增加一个LLM来帮你做图片转文本的工作。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">sealed</span> <span style="color: rgba(0, 0, 255, 1)">class</span> PdfDataLoader&lt;TKey&gt; <span style="color: rgba(0, 0, 255, 1)">where</span><span style="color: rgba(0, 0, 0, 1)"> TKey : notnull
{
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">readonly</span> IVectorStoreRecordCollection&lt;TKey, TextSnippet&lt;TKey&gt;&gt;<span style="color: rgba(0, 0, 0, 1)"> _vectorStoreRecordCollection;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">readonly</span> UniqueKeyGenerator&lt;TKey&gt;<span style="color: rgba(0, 0, 0, 1)"> _uniqueKeyGenerator;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">readonly</span> IEmbeddingGenerator&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, Embedding&lt;<span style="color: rgba(0, 0, 255, 1)">float</span>&gt;&gt;<span style="color: rgba(0, 0, 0, 1)"> _embeddingGenerator;

    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> PdfDataLoader(
        UniqueKeyGenerator</span>&lt;TKey&gt;<span style="color: rgba(0, 0, 0, 1)"> uniqueKeyGenerator,
        IVectorStoreRecordCollection</span>&lt;TKey, TextSnippet&lt;TKey&gt;&gt;<span style="color: rgba(0, 0, 0, 1)"> vectorStoreRecordCollection,
        IEmbeddingGenerator</span>&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, Embedding&lt;<span style="color: rgba(0, 0, 255, 1)">float</span>&gt;&gt;<span style="color: rgba(0, 0, 0, 1)"> embeddingGenerator)
    {
        _vectorStoreRecordCollection </span>=<span style="color: rgba(0, 0, 0, 1)"> vectorStoreRecordCollection;
        _uniqueKeyGenerator </span>=<span style="color: rgba(0, 0, 0, 1)"> uniqueKeyGenerator;
        _embeddingGenerator </span>=<span style="color: rgba(0, 0, 0, 1)"> embeddingGenerator;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">async</span> Task LoadPdf(<span style="color: rgba(0, 0, 255, 1)">string</span> pdfPath, <span style="color: rgba(0, 0, 255, 1)">int</span> batchSize, <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> betweenBatchDelayInMs)
    {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Create the collection if it doesn't exist.</span>
        <span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> _vectorStoreRecordCollection.CreateCollectionIfNotExistsAsync();

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Load the text and images from the PDF file and split them into batches.</span>
        <span style="color: rgba(0, 0, 255, 1)">var</span> sections =<span style="color: rgba(0, 0, 0, 1)"> LoadAllTexts(pdfPath);
        </span><span style="color: rgba(0, 0, 255, 1)">var</span> batches =<span style="color: rgba(0, 0, 0, 1)"> sections.Chunk(batchSize);

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Process each batch of content items.</span>
        <span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> batch <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> batches)
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Get text contents</span>
            <span style="color: rgba(0, 0, 255, 1)">var</span> textContentTasks = batch.Select(<span style="color: rgba(0, 0, 255, 1)">async</span> content =&gt;<span style="color: rgba(0, 0, 0, 1)">
            {
                </span><span style="color: rgba(0, 0, 255, 1)">if</span> (content.Text != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
                    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> content;

                </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> RawContent { Text = <span style="color: rgba(0, 0, 255, 1)">string</span>.Empty, PageNumber =<span style="color: rgba(0, 0, 0, 1)"> content.PageNumber };
            });
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> textContent = (<span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> Task.WhenAll(textContentTasks))
                .Where(c </span>=&gt; !<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.IsNullOrEmpty(c.Text))
                .ToList();

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Map each paragraph to a TextSnippet and generate an embedding for it.</span>
            <span style="color: rgba(0, 0, 255, 1)">var</span> recordTasks = textContent.Select(<span style="color: rgba(0, 0, 255, 1)">async</span> content =&gt; <span style="color: rgba(0, 0, 255, 1)">new</span> TextSnippet&lt;TKey&gt;<span style="color: rgba(0, 0, 0, 1)">
            {
                Key </span>=<span style="color: rgba(0, 0, 0, 1)"> _uniqueKeyGenerator.GenerateKey(),
                Text </span>=<span style="color: rgba(0, 0, 0, 1)"> content.Text,
                ReferenceDescription </span>= $<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{new FileInfo(pdfPath).Name}#page={content.PageNumber}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                ReferenceLink </span>= $<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{new Uri(new FileInfo(pdfPath).FullName).AbsoluteUri}#page={content.PageNumber}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                TextEmbedding </span>= <span style="color: rgba(0, 0, 255, 1)">await</span> _embeddingGenerator.GenerateEmbeddingVectorAsync(content.Text!<span style="color: rgba(0, 0, 0, 1)">)
            });

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Upsert the records into the vector store.</span>
            <span style="color: rgba(0, 0, 255, 1)">var</span> records = <span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> Task.WhenAll(recordTasks);
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> upsertedKeys =<span style="color: rgba(0, 0, 0, 1)"> _vectorStoreRecordCollection.UpsertBatchAsync(records);
            </span><span style="color: rgba(0, 0, 255, 1)">await</span> <span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> key <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> upsertedKeys)
            {
                Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Upserted record '{key}' into VectorDB</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            }

            </span><span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> Task.Delay(betweenBatchDelayInMs);
        }
    }

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> IEnumerable&lt;RawContent&gt; LoadAllTexts(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> pdfPath)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">using</span> (PdfDocument document =<span style="color: rgba(0, 0, 0, 1)"> PdfDocument.Open(pdfPath))
        {
            </span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (Page page <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> document.GetPages())
            {
                </span><span style="color: rgba(0, 0, 255, 1)">var</span> blocks =<span style="color: rgba(0, 0, 0, 1)"> DefaultPageSegmenter.Instance.GetBlocks(page.GetWords());
                </span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> block <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> blocks)
                    </span><span style="color: rgba(0, 0, 255, 1)">yield</span> <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> RawContent { Text = block.Text, PageNumber =<span style="color: rgba(0, 0, 0, 1)"> page.Number };
            }
        }
    }
}</span></pre>
</div>
<p><strong>（2）VectorDataSearcher</strong></p>
<p><span><span>和<a href="https://mp.weixin.qq.com/s?__biz=MzA4NzQzNTg4Ng==&amp;mid=2651743879&amp;idx=1&amp;sn=44074a36dfc7a0b01a5f9bba808f706a&amp;scene=21#wechat_redirect" target="_blank" data-itemshowtype="0" data-linktype="2" rel="noopener nofollow"><span>上一篇文章</span></a><span>介绍的内容类似，主要做语义搜索，获取TopN个近似内容。</span></span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span> VectorDataSearcher&lt;TKey&gt; <span style="color: rgba(0, 0, 255, 1)">where</span><span style="color: rgba(0, 0, 0, 1)"> TKey : notnull
{
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">readonly</span> IVectorStoreRecordCollection&lt;TKey, TextSnippet&lt;TKey&gt;&gt;<span style="color: rgba(0, 0, 0, 1)"> _vectorStoreRecordCollection;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">readonly</span> IEmbeddingGenerator&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, Embedding&lt;<span style="color: rgba(0, 0, 255, 1)">float</span>&gt;&gt;<span style="color: rgba(0, 0, 0, 1)"> _embeddingGenerator;

    </span><span style="color: rgba(0, 0, 255, 1)">public</span> VectorDataSearcher(IVectorStoreRecordCollection&lt;TKey, TextSnippet&lt;TKey&gt;&gt; vectorStoreRecordCollection, IEmbeddingGenerator&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, Embedding&lt;<span style="color: rgba(0, 0, 255, 1)">float</span>&gt;&gt;<span style="color: rgba(0, 0, 0, 1)"> embeddingGenerator)
    {
        _vectorStoreRecordCollection </span>=<span style="color: rgba(0, 0, 0, 1)"> vectorStoreRecordCollection;
        _embeddingGenerator </span>=<span style="color: rgba(0, 0, 0, 1)"> embeddingGenerator;
    }

    [Description(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Get top N text search results from vector store by user's query (N is 1 by default)</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
    [</span><span style="color: rgba(0, 0, 255, 1)">return</span>: Description(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Collection of text search result</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">async</span> Task&lt;IEnumerable&lt;TextSearchResult&gt;&gt; GetTextSearchResults(<span style="color: rgba(0, 0, 255, 1)">string</span> query, <span style="color: rgba(0, 0, 255, 1)">int</span> topN = <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">var</span> queryEmbedding = <span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> _embeddingGenerator.GenerateEmbeddingVectorAsync(query);
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Query from vector data store</span>
        <span style="color: rgba(0, 0, 255, 1)">var</span> searchOptions = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> VectorSearchOptions()
        {
            Top </span>=<span style="color: rgba(0, 0, 0, 1)"> topN,
            VectorPropertyName </span>= nameof(TextSnippet&lt;TKey&gt;<span style="color: rgba(0, 0, 0, 1)">.TextEmbedding)
        };
        </span><span style="color: rgba(0, 0, 255, 1)">var</span> searchResults = <span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> _vectorStoreRecordCollection.VectorizedSearchAsync(queryEmbedding, searchOptions);
        </span><span style="color: rgba(0, 0, 255, 1)">var</span> responseResults = <span style="color: rgba(0, 0, 255, 1)">new</span> List&lt;TextSearchResult&gt;<span style="color: rgba(0, 0, 0, 1)">();
        </span><span style="color: rgba(0, 0, 255, 1)">await</span> <span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> result <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> searchResults.Results)
        {
            responseResults.Add(</span><span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> TextSearchResult()
            {
                Value </span>= result.Record.Text ?? <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.Empty,
                Link </span>= result.Record.ReferenceLink ?? <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.Empty,
                Score </span>=<span style="color: rgba(0, 0, 0, 1)"> result.Score
            });
        }

        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> responseResults;
    }
}</span></pre>
</div>
<p><strong>（3）UniqueKeyGenerator</strong></p>
<p><span><span>这个主要是一个代理，后续我们主要使用Guid作为Key。</span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">sealed</span> <span style="color: rgba(0, 0, 255, 1)">class</span> UniqueKeyGenerator&lt;TKey&gt;(Func&lt;TKey&gt;<span style="color: rgba(0, 0, 0, 1)"> generator)
    </span><span style="color: rgba(0, 0, 255, 1)">where</span><span style="color: rgba(0, 0, 0, 1)"> TKey : notnull
{
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> Generate a unique key.
    </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
    <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;returns&gt;</span><span style="color: rgba(0, 128, 0, 1)">The unique key that was generated.</span><span style="color: rgba(128, 128, 128, 1)">&lt;/returns&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span> TKey GenerateKey() =&gt;<span style="color: rgba(0, 0, 0, 1)"> generator();
}</span></pre>
</div>
<h1><strong>串联实现RAG问答</strong></h1>
<p>安装NuGet包：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">Microsoft.Extensions.AI (preview)
Microsoft.Extensions.Ollama (preivew)
Microsoft.Extensions.AI.OpenAI (preivew)
Microsoft.Extensions.VectorData.Abstractions (preivew)
Microsoft.SemanticKernel.Connectors.Qdrant (preivew)
PdfPig (</span><span style="color: rgba(128, 0, 128, 1)">0.1</span>.<span style="color: rgba(128, 0, 128, 1)">9</span><span style="color: rgba(0, 0, 0, 1)">)
Microsoft.Extensions.Configuration (</span><span style="color: rgba(128, 0, 128, 1)">8.0</span>.<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
Microsoft.Extensions.Configuration.Json (</span><span style="color: rgba(128, 0, 128, 1)">8.0</span>.<span style="color: rgba(128, 0, 128, 1)">0</span>)</pre>
</div>
<p>下面我们分解几个核心步骤来实现RAG问答。</p>
<p><strong>Step1. 配置文件appsettings.json：</strong></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">{
  </span>"LLM"<span style="color: rgba(0, 0, 0, 1)">: {
    </span>"EndPoint": "https://api.siliconflow.cn",
    "ApiKey": "sk-**********************",<span style="color: rgba(0, 0, 0, 1)"> // Replace with your ApiKey
    </span>"ModelId": "Qwen/Qwen2.5-7B-Instruct"<span style="color: rgba(0, 0, 0, 1)">
  }</span>,
  "Embeddings"<span style="color: rgba(0, 0, 0, 1)">: {
    </span>"Ollama"<span style="color: rgba(0, 0, 0, 1)">: {
      </span>"EndPoint": "http://localhost:11434",
      "ModelId": "bge-m3"<span style="color: rgba(0, 0, 0, 1)">
    }
  }</span>,
  "VectorStores"<span style="color: rgba(0, 0, 0, 1)">: {
    </span>"Qdrant"<span style="color: rgba(0, 0, 0, 1)">: {
      </span>"Host": "edt-dev-server",
      "Port": 6334,
      "ApiKey": "EdisonTalk@2025"<span style="color: rgba(0, 0, 0, 1)">
    }
  }</span>,
  "RAG"<span style="color: rgba(0, 0, 0, 1)">: {
    </span>"CollectionName": "oneflower",
    "DataLoadingBatchSize": 10,
    "DataLoadingBetweenBatchDelayInMilliseconds": 1000,
    "PdfFileFolder": "Documents"<span style="color: rgba(0, 0, 0, 1)">
  }
}</span></pre>
</div>
<p><strong>Step2.&nbsp;加载配置：</strong></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> config = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ConfigurationBuilder()
    .AddJsonFile($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">appsettings.json</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    .Build();</span></pre>
</div>
<p><strong>Step3. 初始化ChatClient、Embedding生成器 以及 VectorStore：</strong></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># ChatClient
</span><span style="color: rgba(0, 0, 255, 1)">var</span> apiKeyCredential = <span style="color: rgba(0, 0, 255, 1)">new</span> ApiKeyCredential(config[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">LLM:ApiKey</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> aiClientOptions = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> OpenAIClientOptions();
aiClientOptions.Endpoint </span>= <span style="color: rgba(0, 0, 255, 1)">new</span> Uri(config[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">LLM:EndPoint</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> aiClient = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> OpenAIClient(apiKeyCredential, aiClientOptions)
    .AsChatClient(config[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">LLM:ModelId</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> chatClient = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatClientBuilder(aiClient)
    .UseFunctionInvocation()
    .Build();
# EmbeddingGenerator
</span><span style="color: rgba(0, 0, 255, 1)">var</span> embedingGenerator =
    <span style="color: rgba(0, 0, 255, 1)">new</span> OllamaEmbeddingGenerator(<span style="color: rgba(0, 0, 255, 1)">new</span> Uri(config[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Embeddings:Ollama:EndPoint</span><span style="color: rgba(128, 0, 0, 1)">"</span>]), config[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Embeddings:Ollama:ModelId</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]);
# VectorStore
</span><span style="color: rgba(0, 0, 255, 1)">var</span> vectorStore = 
    <span style="color: rgba(0, 0, 255, 1)">new</span> QdrantVectorStore(<span style="color: rgba(0, 0, 255, 1)">new</span> QdrantClient(host: config[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">VectorStores:Qdrant:Host</span><span style="color: rgba(128, 0, 0, 1)">"</span>], port: <span style="color: rgba(0, 0, 255, 1)">int</span>.Parse(config[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">VectorStores:Qdrant:Port</span><span style="color: rgba(128, 0, 0, 1)">"</span>]), apiKey: config[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">VectorStores:Qdrant:ApiKey</span><span style="color: rgba(128, 0, 0, 1)">"</span>]));</pre>
</div>
<p><strong>Step4. 导入PDF文档到VectorStore：</strong></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">var</span> ragConfig = config.GetSection(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">RAG</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Get the unique key genrator</span>
<span style="color: rgba(0, 0, 255, 1)">var</span> uniqueKeyGenerator = <span style="color: rgba(0, 0, 255, 1)">new</span> UniqueKeyGenerator&lt;Guid&gt;(() =&gt;<span style="color: rgba(0, 0, 0, 1)"> Guid.NewGuid());
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Get the collection in qdrant</span>
<span style="color: rgba(0, 0, 255, 1)">var</span> ragVectorRecordCollection = vectorStore.GetCollection&lt;Guid, TextSnippet&lt;Guid&gt;&gt;(ragConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">CollectionName</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]);
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Get the PDF loader</span>
<span style="color: rgba(0, 0, 255, 1)">var</span> pdfLoader = <span style="color: rgba(0, 0, 255, 1)">new</span> PdfDataLoader&lt;Guid&gt;<span style="color: rgba(0, 0, 0, 1)">(uniqueKeyGenerator, ragVectorRecordCollection, embedingGenerator);
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Start to load PDF to VectorStore</span>
<span style="color: rgba(0, 0, 255, 1)">var</span> pdfFilePath = ragConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">PdfFileFolder</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">];
</span><span style="color: rgba(0, 0, 255, 1)">var</span> pdfFiles =<span style="color: rgba(0, 0, 0, 1)"> Directory.GetFiles(pdfFilePath);
</span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">
{
    </span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> pdfFile <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> pdfFiles)
    {
        Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[LOG] Start Loading PDF into vector store: {pdfFile}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">await</span><span style="color: rgba(0, 0, 0, 1)"> pdfLoader.LoadPdf(
            pdfFile,
            </span><span style="color: rgba(0, 0, 255, 1)">int</span>.Parse(ragConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">DataLoadingBatchSize</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]),
            </span><span style="color: rgba(0, 0, 255, 1)">int</span>.Parse(ragConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">DataLoadingBetweenBatchDelayInMilliseconds</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]));
        Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[LOG] Finished Loading PDF into vector store: {pdfFile}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    }
    Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[LOG] All PDFs loaded into vector store succeed!</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
}
</span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (Exception ex)
{
    Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[ERROR] Failed to load PDFs: {ex.Message}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
}</span></pre>
</div>
<p><strong>Step5. 构建AI对话机器人：</strong></p>
<p>重点关注这里的提示词模板，我们做了几件事情：</p>
<p>（1）给AI设定一个人设：鲜花网站的AI对话机器人，告知其负责的职责。</p>
<p>（2）告诉AI要使用相关工具（向量搜索插件）进行相关背景信息的搜索获取，然后将结果 连同 用户的问题 组成一个新的提示词，最后将这个新的提示词发给大模型进行处理。</p>
<p>（3）告诉AI在输出信息时要把引用的文档信息链接也一同输出。</p>
<div class="cnblogs_code">
<pre>Console.WriteLine(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[LOG] Now starting the chatting window for you...</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
Console.ForegroundColor </span>=<span style="color: rgba(0, 0, 0, 1)"> ConsoleColor.Green;
</span><span style="color: rgba(0, 0, 255, 1)">var</span> promptTemplate = <span style="color: rgba(128, 0, 0, 1)">"""
</span><span style="color: rgba(0, 0, 0, 1)">          你是一个专业的AI聊天机器人，为易速鲜花网站的所有员工提供信息咨询服务。
          请使用下面的提示使用工具从向量数据库中获取相关信息来回答用户提出的问题：
          {{#with (SearchPlugin</span>-<span style="color: rgba(0, 0, 0, 1)">GetTextSearchResults question)}}  
            {{#each </span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">}}  
              Value: {{Value}}
              Link: {{Link}}
              Score: {{Score}}
              </span>-----------------<span style="color: rgba(0, 0, 0, 1)">
             {{</span>/<span style="color: rgba(0, 0, 0, 1)">each}}
            {{</span>/<span style="color: rgba(0, 0, 0, 1)">with}}
            
            输出要求：请在回复中引用相关信息的地方包括对相关信息的引用。

            用户问题: {{question}}
            </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">;</span>
<span style="color: rgba(0, 0, 255, 1)">var</span> history = <span style="color: rgba(0, 0, 255, 1)">new</span> List&lt;ChatMessage&gt;<span style="color: rgba(0, 0, 0, 1)">();
</span><span style="color: rgba(0, 0, 255, 1)">var</span> vectorSearchTool = <span style="color: rgba(0, 0, 255, 1)">new</span> VectorDataSearcher&lt;Guid&gt;<span style="color: rgba(0, 0, 0, 1)">(ragVectorRecordCollection, embedingGenerator);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> chatOptions = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatOptions()
{
    Tools </span>=<span style="color: rgba(0, 0, 0, 1)">
    [
      AIFunctionFactory.Create(vectorSearchTool.GetTextSearchResults)
    ]
};
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Prompt the user for a question.</span>
Console.ForegroundColor =<span style="color: rgba(0, 0, 0, 1)"> ConsoleColor.Green;
Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">助手&gt; 今天有什么可以帮到你的?</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 0, 255, 1)">while</span> (<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">)
{
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Read the user question.</span>
    Console.ForegroundColor =<span style="color: rgba(0, 0, 0, 1)"> ConsoleColor.White;
    Console.Write(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">用户&gt; </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 0, 255, 1)">var</span> question =<span style="color: rgba(0, 0, 0, 1)"> Console.ReadLine();
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Exit the application if the user didn't type anything.</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 255, 1)">string</span>.IsNullOrWhiteSpace(question) &amp;&amp; question.ToUpper() == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">EXIT</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;

    </span><span style="color: rgba(0, 0, 255, 1)">var</span> ragPrompt = promptTemplate.Replace(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{question}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, question);
    history.Add(</span><span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatMessage(ChatRole.User, ragPrompt));
    Console.ForegroundColor </span>=<span style="color: rgba(0, 0, 0, 1)"> ConsoleColor.Green;
    Console.Write(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">助手&gt; </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    var result = await chatClient.GetResponseAsync(history, chatOptions);<br></span><span style="color: rgba(0, 0, 255, 1)">    var</span> response =<span style="color: rgba(0, 0, 0, 1)"> result.ToString();
    Console.Write(response);
    history.Add(</span><span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ChatMessage(ChatRole.Assistant, response));

    Console.WriteLine();
}</span></pre>
</div>
<h1><span><span>调试验证</span></span></h1>
<p>首先，看看PDF导入中的log显示：</p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202503/381412-20250302204353638-1173492718.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p><span>其次，验证下Qdrant中是否新增了导入的PDF文档数据：</span></p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202503/381412-20250302204402250-1624659470.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p><span>最后，和AI机器人对话咨询问题：</span></p>
<p><span>问题1及其回复：</span></p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202503/381412-20250302204413117-248575017.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p><span>问题2及其回复：</span></p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202503/381412-20250302204421824-1139980783.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p><span>更多的问题，就留给你去调戏了。</span></p>
<h1><span><span><span><span><span>小结</span></span></span></span></span></h1>
<p><span><span><span>本文介绍了如何基于Microsoft.Extensions.AI + Microsoft.Extensions.VectorData 一步一步地实现一个RAG（检索增强生成）应用，相信会对你有所帮助。</span></span></span></p>
<p><span><span><span>如果你也是.NET程序员希望参与AI应用的开发，那就快快了解和使用基于Microsoft.Extensioins.AI + Microsoft.Extensions.VectorData 的生态组件库吧。</span></span></span></p>
<h1><span><span><span><span><span>示例源码</span></span></span></span></span></h1>
<p><span><span>GitHub：<a href="https://github.com/edisontalk/EdisonTalk.AI.Agents?wt.mc_id=MVP_397012" target="_blank" rel="noopener nofollow">点此查看</a><span><span><br></span></span></span></span></p>
<h1><span><span><strong>参考内容</strong></span></span></h1>
<p>Semantic Kernel 《<a href="https://github.com/microsoft/semantic-kernel/tree/main/dotnet/samples/Demos?wt.mc_id=MVP_397012" target="_blank" rel="noopener nofollow">.NET Sample Demos</a>》</p>
<h1><span><span>推荐内容</span></span></h1>
<p><a href="https://learn.microsoft.com/zh-cn/dotnet/ai/ai-extensions?wt.mc_id=MVP_397012" target="_blank" rel="noopener nofollow"><span><span>Microsoft Learn</span></span></a></p>
<p><a href="https://github.com/dotnet/eShopSupport?wt.mc_id=MVP_397012" target="_blank" rel="noopener nofollow"><span><span>eShopSupport</span></span></a></p>
<p><a href="https://devblogs.microsoft.com/dotnet/e-shop-infused-with-ai-comprehensive-intelligent-dotnet-app-sample?wt.mc_id=MVP_397012" target="_blank" rel="noopener nofollow"><span><span>devblogs</span></span></a></p>
<p>&nbsp;</p>
<p style="text-align: center"><img src="https://images.cnblogs.com/cnblogs_com/edisonchou/1647700/o_200902144330EdisonTalk-Footer.jpg" alt="" style="width: 65%; border: 1px solid rgba(221, 221, 221, 1); border-radius: 3px; box-shadow: 0 4px 8px rgba(3, 27, 78, 0.12)"></p>
<div id="Copyright">
<p>作者：<a title="author" href="https://edisonchou.cnblogs.com" target="_blank">周旭龙</a></p>
<p>出处：<a title="from" href="https://edisonchou.cnblogs.com" target="_blank">https://edisonchou.cnblogs.com</a></p>
<p>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。</p>





</div>
<pre><span style="color: rgba(0, 0, 255, 1)">var</span></pre>
</div>
<div id="MySignature" role="contentinfo">
    <div align="center"><a href="https://weibo.com/u/2068032061?s=6uyXnP" target="_blank"><img border="0" src="http://service.t.sina.com.cn/widget/qmd/2068032061/d643d182/10.png"></a></div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.488933889912037" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-06 18:30">2025-03-06 18:30</span>&nbsp;
<a href="https://www.cnblogs.com/edisonchou">EdisonZhou</a>&nbsp;
阅读(<span id="post_view_count">88</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18746793" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18746793);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18746793', targetLink: 'https://www.cnblogs.com/edisonchou/p/-/introduction-to-vector-rag-demo', title: '基于Microsoft.Extensions.AI核心库实现RAG应用' })">举报</a>
</div>
        