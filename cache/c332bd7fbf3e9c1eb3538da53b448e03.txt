<!----> <meta itemprop="headline" content="🌿一个vue3指令让el-table自动轮播"> <meta itemprop="keywords" content="Vue.js,前端,JavaScript"> <meta itemprop="datePublished" content="2024-12-26T15:13:10.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="贾斯克"> <meta itemprop="url" content="https://juejin.cn/user/3738785874458039"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-a534e47e="">
            🌿一个vue3指令让el-table自动轮播
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-a534e47e=""><div class="author-info-box" data-v-a534e47e=""><div class="author-name" data-v-a534e47e=""><a href="/user/3738785874458039/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-a534e47e=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    贾斯克
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-a534e47e=""><time datetime="2024-12-26T15:13:10.000Z" title="Thu Dec 26 2024 15:13:10 GMT+0000 (Coordinated Universal Time)" class="time" data-v-a534e47e="">
                    2024-12-26
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-a534e47e=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-a534e47e=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-a534e47e=""></circle></svg> <span class="views-count" data-v-a534e47e="">
                    7,170
                  </span> <span class="read-time" data-v-a534e47e=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-a534e47e=""><rect width="16" height="16" fill="none" data-v-a534e47e=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-a534e47e=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-a534e47e=""></path></svg>
                    阅读3分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-a534e47e=""></div> <!----> <!----></div> <!----> <!----> <!----> <img src="https://p26-piu.byteimg.com/tos-cn-i-8jisjyls3a/56f1f29e316346e4bf4d8d5562a7cd25~tplv-8jisjyls3a-image.image" style="width:100%;height:auto;display:block;" data-v-a534e47e=""> <div id="article-root" itemprop="articleBody" class="main" data-v-a534e47e=""><div class="article-viewer markdown-body result"><p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/4acaf9e4b67342afb4530bf7168db123~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6LS-5pav5YWL:q75.awebp?rk3s=f64ab15b&amp;x-expires=1743552027&amp;x-signature=NXNsjOTJKYBTKEKY3frSVpftt3w%3D" alt="img" loading="lazy"></p>
<h2 data-id="heading-0">前言</h2>
<blockquote>
<p>本文开发的工具，是vue3 element-plus ui库专用的，需要对vue3指令概念有一定的了解</p>
</blockquote>
<p>​	最近开发的项目中,需要对项目中大量的列表实现轮播效果,经过一番折腾.最终决定不使用第三方插件,手搓一个滚动指令.</p>
<h2 data-id="heading-1">效果展示</h2>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/bfed002d5b8d4d7ba55ac0763f23bf3b~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6LS-5pav5YWL:q75.awebp?rk3s=f64ab15b&amp;x-expires=1743552027&amp;x-signature=dVXP98sseWpjKkoHzjK7YwqZ%2FOg%3D" alt="列表滚动.webp" loading="lazy"></p>
<h2 data-id="heading-2">实现思路</h2>
<p>第一步先确定功能</p>
<ul>
<li>列表自动滚动</li>
<li>鼠标移入停止滚动</li>
<li>鼠标移出继续滚动</li>
<li>滚轮滚动完成，还可以继续在当前位置滚动</li>
<li>元素少于一定条数时，不滚动</li>
</ul>
<h3 data-id="heading-3"><strong>滚动思路</strong></h3>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/e603ff8a1fb24516933f923a899fadac~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6LS-5pav5YWL:q75.awebp?rk3s=f64ab15b&amp;x-expires=1743552027&amp;x-signature=Yz%2BLsTyvWgwbiZzO9SOo%2BiQ4jkc%3D" alt="image-20241226223121217.png" loading="lazy"></p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/3c228e6f401f4506b8de35bb6bf25278~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6LS-5pav5YWL:q75.awebp?rk3s=f64ab15b&amp;x-expires=1743552027&amp;x-signature=SPDb7xKVuHaR2ScvlIOgvt6Zpq0%3D" alt="image-20241226223310536.png" loading="lazy"></p>
<p>通过观察<code>el-table</code>的结构可以发现<code>el-scrollbar__view</code>里面放着所有的元素，而<code>el-scrollbar__wrap</code>是一个固定高度的容器，那么只需要获取到<code>el-scrollbar__wrap</code>这个DOM，并且再给一个定时器，不断的改变它的<code>scrollTop</code>值，就可以实现自动滚动的效果，这个值必须要用一个变量来存储，不然会失效</p>
<h3 data-id="heading-4">停止和继续滚动思路</h3>
<p>设置一个<code>boolean</code>类型变量，每次执行定时器的时候判断一下,<code>true</code>就滚动，否则就不滚动</p>
<h3 data-id="heading-5">滚轮事件思路</h3>
<p>为了每次鼠标在列表中滚动之后，我们的轮播还可以在当前滚动的位置，继续轮播，只需要在鼠标移出的时候，将当前<code>el-scrollbar__wrap</code>的<code>scrollTop</code>赋给前面存储的变量，这样执行定时器的时候，就可以继续在当前位置滚动</p>
<h3 data-id="heading-6">不滚动的思路</h3>
<p>​	只需要判断<code>el-scrollbar__view</code>这个容器的高度，是否大于<code>el-scrollbar__wrap</code>的高度，是就可以滚动，不是就不滚动。</p>
<p>大致的思路是这样的，下面上源码</p>
<h2 data-id="heading-7">实现代码</h2>
<p>文件名：tableAutoScroll.ts</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ElType</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HTMLElement</span> {
  <span class="hljs-attr">timer</span>: <span class="hljs-built_in">number</span> | <span class="hljs-literal">null</span>
  <span class="hljs-attr">isScroll</span>: <span class="hljs-built_in">boolean</span>
  <span class="hljs-attr">curTableTopValue</span>: <span class="hljs-built_in">number</span>
}
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
  <span class="hljs-title function_">created</span>(<span class="hljs-params">el: ElType</span>) {
    el.<span class="hljs-property">timer</span> = <span class="hljs-literal">null</span>
    el.<span class="hljs-property">isScroll</span> = <span class="hljs-literal">true</span>
    el.<span class="hljs-property">curTableTopValue</span> = <span class="hljs-number">0</span>
  },
  <span class="hljs-title function_">mounted</span>(<span class="hljs-params">el: ElType, binding: { value?: { delay?: <span class="hljs-built_in">number</span> } }</span>) {
    <span class="hljs-keyword">const</span> { delay = <span class="hljs-number">15</span> } = binding.<span class="hljs-property">value</span> || {}
    <span class="hljs-keyword">const</span> tableDom = el.<span class="hljs-title function_">getElementsByClassName</span>(
      <span class="hljs-string">'el-scrollbar__wrap'</span>
    )[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>
    <span class="hljs-keyword">const</span> viewDom = el.<span class="hljs-title function_">getElementsByClassName</span>(
      <span class="hljs-string">'el-scrollbar__view'</span>
    )[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>

    <span class="hljs-keyword">const</span> <span class="hljs-title function_">onMouseOver</span> = (<span class="hljs-params"></span>) =&gt; (el.<span class="hljs-property">isScroll</span> = <span class="hljs-literal">false</span>)
    <span class="hljs-keyword">const</span> <span class="hljs-title function_">onMouseOut</span> = (<span class="hljs-params"></span>) =&gt; {
      el.<span class="hljs-property">curTableTopValue</span> = tableDom.<span class="hljs-property">scrollTop</span>
      el.<span class="hljs-property">isScroll</span> = <span class="hljs-literal">true</span>
    }

    tableDom.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'mouseover'</span>, onMouseOver)
    tableDom.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'mouseout'</span>, onMouseOut)

    el.<span class="hljs-property">timer</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> {
      <span class="hljs-keyword">const</span> viewDomClientHeight = viewDom.<span class="hljs-property">scrollHeight</span>
      <span class="hljs-keyword">const</span> tableDomClientHeight = el.<span class="hljs-property">clientHeight</span>

      <span class="hljs-keyword">if</span> (el.<span class="hljs-property">isScroll</span> &amp;&amp; viewDomClientHeight &gt; tableDomClientHeight) {
        <span class="hljs-keyword">const</span> curScrollPosition = tableDom.<span class="hljs-property">clientHeight</span> + el.<span class="hljs-property">curTableTopValue</span>
        el.<span class="hljs-property">curTableTopValue</span> =
          curScrollPosition === tableDom.<span class="hljs-property">scrollHeight</span>
            ? <span class="hljs-number">0</span>
            : el.<span class="hljs-property">curTableTopValue</span> + <span class="hljs-number">1</span>
        tableDom.<span class="hljs-property">scrollTop</span> = el.<span class="hljs-property">curTableTopValue</span>
      }
    }, delay)
  },
  <span class="hljs-title function_">unmounted</span>(<span class="hljs-params">el: ElType</span>) {
    <span class="hljs-keyword">if</span> (el.<span class="hljs-property">timer</span> !== <span class="hljs-literal">null</span>) {
      <span class="hljs-built_in">clearInterval</span>(el.<span class="hljs-property">timer</span>)
    }
    el.<span class="hljs-property">timer</span> = <span class="hljs-literal">null</span>

    <span class="hljs-keyword">const</span> tableDom = el.<span class="hljs-title function_">getElementsByClassName</span>(
      <span class="hljs-string">'el-scrollbar__wrap'</span>
    )[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>
    tableDom.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">'mouseover'</span>, <span class="hljs-function">() =&gt;</span> (el.<span class="hljs-property">isScroll</span> = <span class="hljs-literal">false</span>))
    tableDom.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">'mouseout'</span>, <span class="hljs-function">() =&gt;</span> {
      el.<span class="hljs-property">curTableTopValue</span> = tableDom.<span class="hljs-property">scrollTop</span>
      el.<span class="hljs-property">isScroll</span> = <span class="hljs-literal">true</span>
    })
  },
}
</code></pre>
<p>上面代码中，我在 <strong>created</strong>中初始化了三个变量，分别用于存储，定时器对象 、是否滚动判断、滚动当前位置。</p>
<p>在 <strong>mounted</strong>中我还获取了一个<strong>options</strong>，主要是为了可以定制滚动速度</p>
<h2 data-id="heading-8"><strong>用法</strong></h2>
<ol>
<li>
<p>将这段代码放在你的文件夹中</p>
</li>
<li>
<p>在<code>main.ts</code>中注册这个指令</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">import</span> tableAutoScroll <span class="hljs-keyword">from</span> <span class="hljs-string">'./modules/tableAutoScroll.ts'</span>
<span class="hljs-keyword">const</span> <span class="hljs-attr">directives</span>: <span class="hljs-built_in">any</span> = {
  tableAutoScroll,
}
<span class="hljs-comment">/**
 * <span class="hljs-doctag">@function</span> 批量注册指令
 * <span class="hljs-doctag">@param</span> app vue 实例对象
 */</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">install</span> = (<span class="hljs-params">app: <span class="hljs-built_in">any</span></span>) =&gt; {
  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(directives).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> {
    app.<span class="hljs-title function_">directive</span>(key, directives[key]) <span class="hljs-comment">// 将每个directive注册到app中</span>
  })
}
</code></pre>
</li>
</ol>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/073df741205f4fc9be63475370bb4b00~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6LS-5pav5YWL:q75.awebp?rk3s=f64ab15b&amp;x-expires=1743552027&amp;x-signature=c6OPrAYWuaQpgNPczJ07yqpkA%2FQ%3D" alt="image-20241226224940418.png" loading="lazy">
<img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ca67d356a4e84242a96633f7fd5511ea~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6LS-5pav5YWL:q75.awebp?rk3s=f64ab15b&amp;x-expires=1743552027&amp;x-signature=TSDFM7bea2sCD32SM6miZOXREg0%3D" alt="image-20241226225027524.png" loading="lazy"></p>
<p>我这边是将自己的弄了一个批量注册，正常使用就像官网里面注册指令就可以了</p>
<p>在需要滚动的<code>el-table</code>上使用这个指令就可以</p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/8269a158eed74768a01ccb15e354f1cb~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6LS-5pav5YWL:q75.awebp?rk3s=f64ab15b&amp;x-expires=1743552027&amp;x-signature=QvgSzJbzQI7V0fabL9WjIpx8qNw%3D" alt="image-20241226225257264.png" loading="lazy"></p>
<pre><code class="hljs language-vue" lang="vue">&lt;!-- element 列表滚动指令插件 --&gt;
&lt;template&gt;
  &lt;div class="container"&gt;
    &lt;el-table v-tableAutoScroll :data="tableData" height="300"&gt;
      &lt;el-table-column prop="date" label="时间" /&gt;
      &lt;el-table-column prop="name" label="名称" /&gt;
      &lt;el-table-column prop="address" label="Address" /&gt;
    &lt;/el-table&gt;
    &lt;!-- delay：多少毫秒滚动一次 --&gt;
    &lt;el-table
      v-tableAutoScroll="{
        delay: 50,
      }"
      :data="tableData"
      height="300"
    &gt;
      &lt;el-table-column prop="date" label="时间" /&gt;
      &lt;el-table-column prop="name" label="名称" /&gt;
      &lt;el-table-column prop="address" label="Address" /&gt;
    &lt;/el-table&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script setup lang="ts"&gt;
import { ref, onMounted } from 'vue'
const tableData = ref&lt;any&gt;([])
onMounted(() =&gt; {
  tableData.value = Array.from(Array(100), (item, index) =&gt; ({
    date: '时间' + index,
    name: '名称' + index,
    address: '地点' + index,
  }))
  console.log('👉 ~ tableData.value=Array.from ~ tableData:', tableData)
})
&lt;/script&gt;

&lt;style lang="scss" scoped&gt;
.container {
  height: 100%;
  display: flex;
  align-items: flex-start;
  justify-content: center;
  gap: 100px;
  .el-table {
    width: 500px;
  }
}
&lt;/style&gt;
</code></pre>
<p>上面这个例子，分别演示两种调用方法，带参数和不带参数</p>
<h2 data-id="heading-9">最后</h2>
<p>做了这个工具之后，突然有很多思路，打算后面再做几个，做成一个开源项目，一个开源的vue3指令集</p></div></div>