
        <h2>
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/blue-fire/p/18618058" title="发布于 2024-12-19 22:38">
    <span role="heading" aria-level="2">2024年，WinUI3 使用 AccountsSettingsPane 获取微软账户信息</span>
    

</a>

        </h2>
        <div class="postbody">
                <div id="cnblogs_post_description" style="display: none">
        
        2024年使用 AccountsSettingsPane 获取微软账户信息
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>背景介绍：UWP 应用可以使用 <a href="https://learn.microsoft.com/zh-cn/windows/uwp/security/web-account-manager" target="_blank" rel="noopener nofollow">AccountsSettingsPane</a> 调用系统 UI 实现授权登录功能，相比跳转到网页可以获得更流畅的体验。</p>
<h2 id="起">起</h2>
<p>动手写代码之前，看文档的介绍非常美好。只需要处理 WebAccountProvider 和 WebTokenRequest 对象就能完成授权登录，简直可以说是少有的清晰明了的文档。文档中还提供了 <a href="https://github.com/Microsoft/Windows-universal-samples/tree/master/Samples/WebAccountManagement" target="_blank" rel="noopener nofollow">WebAccountManagement Sample</a>，列举了多种授权用法。</p>
<h2 id="承">承</h2>
<p>真的动手开始接入的时候，问题接踵而至。使用官方文档提供的代码和 WebAccountManagement Sample 中的代码都不能成功获取授权。</p>
<p>文档中获取授权的核心逻辑分两段，首先在 <code>AccountsSettingsPane</code> 中配置微软账户的 <code>WebAccountProvider</code> ，然后创建 <code>WebTokenRequest</code> 通过 <code>WebAccountProvider</code> 请求 Token。</p>
<p>官方文档中的 GetMsaTokenAsync 方法是创建 <code>WebTokenRequest</code> 的方法，内容如下：</p>
<pre><code class="language-csharp">private async void GetMsaTokenAsync(WebAccountProviderCommand command)
{
	WebTokenRequest request = new WebTokenRequest(command.WebAccountProvider, "wl.basic");
	WebTokenRequestResult result = await WebAuthenticationCoreManager.RequestTokenAsync(request);
}
</code></pre>
<p>执行后 <code>result.ProviderError</code> 值为 <code>WebTokenRequestStatus.ProviderError</code> ，<code>result.ResponseError.ErrorMessage</code> 内提示 <code>0x80070057 参数错误</code>。</p>
<p>类似的， WebAccountManagement Sample 中给出的代码为 <a href="https://github.com/microsoft/Windows-universal-samples/blob/main/Samples/WebAccountManagement/cs/SingleMicrosoftAccountScenario.xaml.cs#L179" target="_blank" rel="noopener nofollow">RequestTokenAndSaveAccount</a> 。</p>
<p>此时报错信息变成了 <code>0x80860003 应用程序请求身份验证令牌被禁用或者配置错误</code>。</p>
<p>可以注意到二者的区别其实只有 <code>clientId</code> 参数不同。</p>
<h2 id="转">转</h2>
<p>通过多多多多多多方查阅资料，发现微软的授权体系一直在变，改名部立大功。而许多历史文档和问答都被微软删掉了，砍刀部立大功。</p>
<p>很久以前的 Live SDK 完全找不到文档了，相关的设置因为微软商店开发者后台变来变去也早已经废弃了，Live SDK 设置似乎在 <a href="https://apps.dev.microsoft.com/" target="_blank" rel="noopener nofollow">Application Registration Portal</a> 页面，可以找到一个隐藏的 check box，打勾之后没办法保存配置。这个页面有一个应用程序 ID ，传到上面的 api 里结果依旧失败。</p>
<p>Application Registration Portal 也已经废弃了，微软推荐使用 Microsoft AAD Registered Apps 。</p>
<p>经过观察和实践得知，某个时间之前创建的应用会在 Application Registration Portal 列表中展示，在此之后创建的应用需要在 Microsoft AAD Registered Apps 中进行相关配置。但微软并不会自动创建一个 Azure 账户，所以需要使用与 Partner Center 登录的同一个邮箱注册 Azure 账户，之后在 <strong>应用注册</strong> 功能的 <strong>个人帐户中的应用程序</strong> 列表中就能看到对应的应用了。</p>
<p>对于 Microsoft AAD Registered App 中自动创建的应用，它的 Client ID 与 Partner Center 中对应的应用的 MSA 应用 ID 是一致的，都是 GUID 格式，无需任何配置即可使用；</p>
<p>对于 Application Registration Portal 中的应用， MSA 应用 ID 为 16 位数字和大写字母组成的字符串，此类应用无法转移到 Microsoft AAD Registered App 中。微软的授权登录已经不支持这种 Client ID了，所以需要在 Microsoft AAD Registered App 中手动创建一个应用注册，并进行如 <a href="https://learn.microsoft.com/zh-cn/entra/identity-platform/quickstart-desktop-app-wpf-sign-in#option-2-register-and-manually-configure-your-application-and-code-sample" target="_blank" rel="noopener nofollow">文档</a> 所述的相关配置。</p>
<p>使用 Microsoft AAD Registered App 中应用的 Client ID，运行代码结果依旧失败。</p>
<h4 id="注意">注意</h4>
<p>创建应用注册时，受支持的账户类型一定要选第三项 <strong>任何组织目录(任何 Microsoft Entra ID 租户 - 多租户)中的帐户和个人 Microsoft 帐户(例如 Skype、Xbox)</strong> ，否则将不能使用未在"目录"中配置过的账户获得授权，并且应用注册的管理页面 <strong>没有任何 UI 选项</strong> 可以修改这个配置，唯一的解决方法是在应用注册的清单页面做如下配置</p>
<pre><code class="language-json">//...
"signInAudience": "AzureADandPersonalMicrosoftAccount",
//...
"api": {
    //... 
    "requestedAccessTokenVersion": 2,
    //...
},
//...
</code></pre>
<p>这时我注意到微软提供了一个 Microsoft Entra ID 的授权库</p>
<pre><code>Microsoft.Identity.Client
Microsoft.Identity.Client.Broker
</code></pre>
<p>使用 <a href="https://learn.microsoft.com/en-us/entra/msal/dotnet/acquiring-tokens/desktop-mobile/wam#enabling-wam" target="_blank" rel="noopener nofollow">文档</a> 中的 <code>BrokerOptions(BrokerOptions.OperatingSystems.Windows)</code> 配置能成功调起系统的账户授权窗口，并且能完成授权拿到用户信息和令牌，但又不想引入额外依赖，故而抓包看了一下请求。</p>
<h2 id="合">合</h2>
<p>根据抓包的结果，在多次尝试之后找到了正确配置 WebTokenRequest 的方法：</p>
<pre><code class="language-csharp">var webTokenRequest = new WebTokenRequest(provider, scope: "User.Read openid profile", clientId);

webTokenRequest.Properties.Add("resource", "https://graph.microsoft.com");
webTokenRequest.Properties.Add("api-version", "2.0");
webTokenRequest.Properties.Add("oauth2_batch", "1");
</code></pre>
<p>此处 clientId 是 Microsoft AAD Registered Apps 中给出的 <code>应用程序(客户端) ID</code> ，而且注意到 scope 传入 <code>User.Read openid profile</code> 时， <code>result.ResponseData[0].Token</code> 的值为 x-www-form-urlencoded 格式的数据，可以手动解析出 <code>access_token</code> 字段；而 scope 仅传入 <code>User.Read</code> 时， <code>result.ResponseData[0].Token</code> 无任何前后缀，是完整的令牌。建议和 Microsoft.Identity.Client 库保持一致，传入 <code>User.Read openid profile</code> 。</p>
<p>至此，我们已经可以从系统的 AccountsSettingsPane 获取到个人微软账户的 access token 了。</p>
<p>最后提供一套简单的 Win32 应用获取 token 和用户信息的代码：<br>
<a href="https://gist.github.com/cnbluefire/4721d8bcf90773bd1bce1344d33f7e7c" target="_blank" rel="noopener nofollow">https://gist.github.com/cnbluefire/4721d8bcf90773bd1bce1344d33f7e7c</a></p>

</div>
<div class="clear"></div>

        </div>
        <p class="postfoot">
            posted on 
<span id="post-date" data-last-update-days="2.5931810642974535" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-21 00:45">2024-12-19 22:38</span>&nbsp;
<a href="https://www.cnblogs.com/blue-fire">叫我蓝火火</a>&nbsp;
阅读(<span id="post_view_count">33</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18618058" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18618058);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18618058', targetLink: 'https://www.cnblogs.com/blue-fire/p/18618058', title: '2024年，WinUI3 使用 AccountsSettingsPane 获取微软账户信息' })">举报</a>

        </p>
    