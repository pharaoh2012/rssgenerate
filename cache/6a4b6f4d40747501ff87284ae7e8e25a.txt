
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/noear/p/18691100" title="发布于 2025-01-25 18:04">
    <span role="heading" aria-level="2">drools 规则引擎和 solon-flow 哪个好？ 规则引擎 solon-flow  简明教程</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        做电子政务的项目时，经常会有大量的业务逻辑变更，但其实里面的业务改动，其实就是一些业务逻辑变动。

而程序员编写的代码也没有任何技术含量，跟着式样书逐字逐句的翻译就行。大量的 `if/else` 判断遍布整个项目，维护难度极大。

而这个 solon-flow 流引擎，可以方便的将业务的整体逻辑移出，更加方便程序的可读性。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h3 id="前言">前言</h3>
<p>做电子政务的项目时，经常会有大量的业务逻辑变更，但其实里面的业务改动，其实就是一些业务逻辑变动。</p>
<p>而程序员编写的代码也没有任何技术含量，跟着式样书逐字逐句的翻译就行。大量的 <code>if/else</code> 判断遍布整个项目，维护难度极大。</p>
<p>而这个 solon-flow 流引擎，可以方便的将业务的整体逻辑移出，更加方便程序的可读性。</p>
<h3 id="准备">准备</h3>
<p>第一步 随便建个 maven 项目</p>
<p>第二步 添加 solon-flow 依赖</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.noear&lt;/groupId&gt;
    &lt;artifactId&gt;solon-flow&lt;/artifactId&gt;
    &lt;version&gt;3.0.7&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>第三步 在 <code>src\main\resources\flow</code> 下面添加规则文件，规则文件可以是 json 或者 yml 结尾（这里用 yml 格式，简明些）</p>
<h3 id="案例一">案例一</h3>
<p>先创建个实体类：</p>
<pre><code class="language-java">public class Order {
    private Double originalPrice;//订单原始价格，即优惠前价格
    private Double realPrice;//订单真实价格，即优惠后价格

    public String toString() {
        return "Order{" + "originalPrice=" + originalPrice + ", realPrice=" + realPrice + '}';
    }

    public Double getOriginalPrice() {
        return originalPrice;
    }

    public void setOriginalPrice(Double originalPrice) {
        this.originalPrice = originalPrice;
    }

    public Double getRealPrice() {
        return realPrice;
    }

    public void setRealPrice(Double realPrice) {
        this.realPrice = realPrice;
    }
}
</code></pre>
<p>创建 bookDiscount.yml 文件，建立相应处理链（或者规则链）。链有3个节点， start 和 end 表示链条的开头与结尾，book_discount_1 为规则执行节点：</p>
<pre><code class="language-yml">id: "book_discount"
nodes:
  - type: "start"
  - id: "book_discount_1"
    when: "order.getOriginalPrice() &lt; 100"
    task: |
      order.setRealPrice(order.getOriginalPrice());
      System.out.println("没有优惠");
  - type: "end"
</code></pre>
<pre><code class="language-java">@Test
public void case1()  throws Throwable {
    FlowEngine flowEngine = FlowEngine.newInstance();
    flowEngine.load(Chain.parseByUri("classpath:flow/bookDiscount.yml"));

    BookOrder bookOrder = new BookOrder();
    bookOrder.setOriginalPrice(10);

    ChainContext ctx = new ChainContext();
    ctx.put("order", bookOrder);

    flowEngine.eval("book_discount", ctx);

    //价格没变，还是10块
    assert bookOrder.getRealPrice() == 10;
}
</code></pre>
<p>单测运行结果：</p>
<pre><code>没有优惠
</code></pre>
<h3 id="案例二">案例二</h3>
<p>在原来的处理链上，添加新的规则</p>
<pre><code class="language-yml">id: "book_discount"
nodes:
  - type: "start"
  - id: "book_discount_1"
    when: "order.getOriginalPrice() &lt; 100"
    task: |
      order.setRealPrice(order.getOriginalPrice());
      System.out.println("没有优惠");
  - id: "book_discount_4"
    when: "order.getOriginalPrice() &gt;= 300"
    task: |
      order.setRealPrice(order.getOriginalPrice() - 100);
      System.out.println("优惠100元");
  - id: "book_discount_2"
    when: "order.getOriginalPrice() &lt; 200 &amp;&amp; order.getOriginalPrice() &gt; 100"
    task: |
      order.setRealPrice(order.getOriginalPrice() - 20);
      System.out.println("优惠20元");
  - type: "end"
</code></pre>
<p>流处理示意图：</p>
<img src="https://teamx.noear.org/img/18f97df4fbd9412bb11bc30454b01c24.png" width="600">
<p>单测参考：</p>
<pre><code class="language-java">@Test
public void case4()  throws Throwable {
    FlowEngine flowEngine = FlowEngine.newInstance();
    flowEngine.load(Chain.parseByUri("classpath:flow/bookDiscount.yml"));

    BookOrder bookOrder = new BookOrder();
    bookOrder.setOriginalPrice(500);

    ChainContext ctx = new ChainContext();
    ctx.put("order", bookOrder);

    flowEngine.eval("book_discount", ctx);

    //价格变了，省了100块
    assert bookOrder.getRealPrice() == 400;
}


@Test
public void case2()  throws Throwable {
    FlowEngine flowEngine = FlowEngine.newInstance();
    flowEngine.load(Chain.parseByUri("classpath:flow/bookDiscount.yml"));

    BookOrder bookOrder = new BookOrder();
    bookOrder.setOriginalPrice(120);

    ChainContext ctx = new ChainContext();
    ctx.put("order", bookOrder);

    flowEngine.eval("book_discount", ctx);

    //省了20块
    assert bookOrder.getRealPrice() == 100;
}
</code></pre>
<h3 id="内置脚本能力说明">内置脚本能力说明</h3>
<ul>
<li>when，使用 java 完整语法的表达式，可以直接使用链上下里的模块变量，要求返回布尔值</li>
<li>task，使用 java 完整语法的代码块，可以直接使用链上下里的模块变量</li>
</ul>
<p>更多 solon-flow 的说明，可参考 <a href="https://solon.noear.org/article/learn-solon-flow" target="_blank" rel="noopener nofollow">solon-flow 官网资料</a>。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0069163620891203705" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-25 18:04">2025-01-25 18:04</span>&nbsp;
<a href="https://www.cnblogs.com/noear">带刺的坐椅</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18691100" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18691100);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18691100', targetLink: 'https://www.cnblogs.com/noear/p/18691100', title: 'drools 规则引擎和 solon-flow 哪个好？ 规则引擎 solon-flow  简明教程' })">举报</a>
</div>
        