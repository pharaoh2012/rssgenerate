
		<h2>
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xiangji/p/18909458" title="发布于 2025-06-04 08:23">
    <span role="heading" aria-level="2">ShadowSql.net之正确使用方式</span>
    

</a>

		</h2>
		<div class="postText"><div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>ShadowSql是面向接口模块化可插拔可扩展的工具</p>
<blockquote>
<ul>
<li>ShadowSql不是全家桶</li>
<li>不把所有功能都做一个项目里面就是为了大家不一次引用所有的nuget包</li>
<li>大家可以先判断需要哪些功能,再引用对应的nuget包</li>
<li>当然同时引用这6个nuget包也是可以的</li>
</ul>
</blockquote>
<h2 id="一相关项目简介">一、相关项目简介</h2>
<table>
<thead>
<tr>
<th style="text-align: left">名称</th>
<th style="text-align: left">项目</th>
<th style="text-align: left">Nuget包</th>
<th style="text-align: left">依赖</th>
<th style="text-align: left">大小</th>
<th style="text-align: left">主要用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left">精简版</td>
<td style="text-align: left">ShadowSql.Core</td>
<td style="text-align: left">ShadowSql.Core</td>
<td style="text-align: left">无</td>
<td style="text-align: left">147K</td>
<td style="text-align: left">简洁高效拼接sql</td>
</tr>
<tr>
<td style="text-align: left">易用版</td>
<td style="text-align: left">ShadowSql</td>
<td style="text-align: left">ShadowSql</td>
<td style="text-align: left">ShadowSql.Core</td>
<td style="text-align: left">96K(+147K)</td>
<td style="text-align: left">泛型表操作、链式拼接sql</td>
</tr>
<tr>
<td style="text-align: left">表达式版</td>
<td style="text-align: left">ShadowSql.Expressions</td>
<td style="text-align: left">ShadowSql.Expressions</td>
<td style="text-align: left">ShadowSql.Core</td>
<td style="text-align: left">75K(+147K)</td>
<td style="text-align: left">表达式树操作、链式拼接sql</td>
</tr>
<tr>
<td style="text-align: left">DDL</td>
<td style="text-align: left">Shadow.DDL</td>
<td style="text-align: left">Shadow.DDL</td>
<td style="text-align: left">ShadowSql.Core</td>
<td style="text-align: left">15K(+147K)</td>
<td style="text-align: left">拼接CreateTable、表Schema支持</td>
</tr>
<tr>
<td style="text-align: left">Dapper</td>
<td style="text-align: left">Dapper</td>
<td style="text-align: left">Dapper</td>
<td style="text-align: left">无</td>
<td style="text-align: left">240K</td>
<td style="text-align: left">执行sql、类型Mapping</td>
</tr>
<tr>
<td style="text-align: left">精简版扩展</td>
<td style="text-align: left">Dapper.Shadow.Core</td>
<td style="text-align: left">ShadowSql.Dapper.Core</td>
<td style="text-align: left">ShadowSql.Core和Dapper</td>
<td style="text-align: left">17K(+387K)</td>
<td style="text-align: left">执行ShadowSql.Core拼接的sql</td>
</tr>
<tr>
<td style="text-align: left">易用版扩展</td>
<td style="text-align: left">Dapper.Shadow</td>
<td style="text-align: left">ShadowSql.Dapper</td>
<td style="text-align: left">ShadowSql.Dapper.Core、ShadowSql.Core、ShadowSql和Dapper</td>
<td style="text-align: left">35K(+500K)</td>
<td style="text-align: left">执行ShadowSql拼接的sql</td>
</tr>
</tbody>
</table>
<h2 id="二如果选型">二、如果选型</h2>
<blockquote>
<ul>
<li>主要看个人或团队偏好</li>
</ul>
</blockquote>
<h3 id="1-偏好lambda选表达式版">1. 偏好Lambda选表达式版</h3>
<blockquote>
<ul>
<li>表达式树是Lambda的影子,可以生成委托,但这里只解析表达式树</li>
<li>表达式版提供类EF的查询体验</li>
<li>表达式树会用到反射,性能上会有点损耗,对比带来的便利性完全是可以接受的</li>
<li>如果使用参数查询并缓存sql复用,完全可以忽略这个性能损耗,甚至可以忽略整个拼写sql的性能消耗</li>
<li>表达式版搭配Dapper.Shadow.Core或者直接搭配Dapper甚至ADO.NET使用</li>
</ul>
</blockquote>
<h4 id="11-efcore示例">1.1 EFCore示例</h4>
<blockquote>
<ul>
<li>ShadowSql不含EFCore的功能,这个示例是为了和表达式版对比</li>
</ul>
</blockquote>
<pre><code class="language-csharp">var query = context.Set&lt;User&gt;("Users")
    .Where(u =&gt; u.Status)
    .Take(10)
    .Skip(20)
    .OrderByDescending(u =&gt; u.Id)
    .Select(u =&gt; new { u.Id, u.Name });
</code></pre>
<h4 id="12-表达式版示例">1.2 表达式版示例</h4>
<blockquote>
<ul>
<li>表达式版可以写出与EFCore类似的代码</li>
</ul>
</blockquote>
<pre><code class="language-csharp">var select = db.From("Users")
    .ToSqlQuery&lt;User&gt;()
    .Where(u =&gt; u.Status)
    .Take(10)
    .Skip(20)
    .Desc(u =&gt; u.Id)
    .ToSelect()
    .Select(u =&gt; new { u.Id, u.Name });
</code></pre>
<h4 id="13-表达式版参数化查询示例">1.3 表达式版参数化查询示例</h4>
<pre><code class="language-csharp">var select = db.From("Users")
    .ToSqlQuery&lt;User&gt;()
    .Where&lt;UserParameter&gt;((u, p) =&gt; u.Id == p.Id2 &amp;&amp; u.Status)
    .Take(10)
    .Skip(20)
    .Desc(u =&gt; u.Id)
    .ToSelect()
    .Select(u =&gt; new { u.Id, u.Name });
// MsSql生成sql: SELECT [Id],[Name] FROM [Users] WHERE [Id]=@Id2 AND [Status]=1 ORDER BY [Id] DESC OFFSET 20 ROWS FETCH NEXT 10 ROWS ONLY
</code></pre>
<h4 id="14-表达式版更多功能">1.4 表达式版更多功能</h4>
<blockquote>
<ul>
<li>参看<a href="https://donetsoftwork.github.io/Shadow/expression/index.html" target="_blank" rel="noopener nofollow">表达式版简介</a></li>
</ul>
</blockquote>
<h3 id="2-偏好链式查询选易用版">2. 偏好链式查询选易用版</h3>
<blockquote>
<ul>
<li>易用版支持泛型表操作几乎无性能损耗(对比精简版)</li>
<li>每个模型类最好定义数据表影子类(联表定义别名表),以便做到sql编译检测</li>
<li>不定义数据表影子类可以用<a href="https://donetsoftwork.github.io/Shadow/shadow/sqlquery/fieldquery.html" target="_blank" rel="noopener nofollow">按字段查询</a>或<a href="https://donetsoftwork.github.io/Shadow/shadow/sqlquery/columnquery.html" target="_blank" rel="noopener nofollow">严格查询</a></li>
<li>ShadowSql搭配Dapper.Shadow或Dapper.Shadow.Core或直接搭配Dapper甚至ADO.NET使用</li>
</ul>
</blockquote>
<h4 id="21-易用版示例">2.1 易用版示例</h4>
<pre><code class="language-csharp">var select = new UserTable()
    .ToSqlQuery()
    .Where(table =&gt; table.Status.EqualValue(true))
    .Take(10, 20)
    .Asc(table =&gt; table.Id)
    .ToSelect()
    .Select(table =&gt; [table.Id, table.Name]);
// MsSql生成sql: SELECT [Id],[Name] FROM [Users] WHERE [Id]=@Id2 AND [Status]=1 ORDER BY [Id] DESC OFFSET 20 ROWS FETCH NEXT 10 ROWS ONLY
</code></pre>
<h4 id="22-易用版更多功能">2.2 易用版更多功能</h4>
<blockquote>
<ul>
<li>参看<a href="https://donetsoftwork.github.io/Shadow/shadow/index.html" target="_blank" rel="noopener nofollow">易用版版简介</a></li>
</ul>
</blockquote>
<h3 id="3-有洁癖选精简版">3. 有“洁癖”选精简版</h3>
<blockquote>
<ul>
<li>使用精简版也可以定义数据表影子类(联表定义别名表)</li>
<li>查询时使用列或者数据表的列,这样代码可读性高,也可以做到sql编译检测</li>
<li>ShadowSql.Core搭配Dapper.Shadow.Core或者直接搭配Dapper甚至ADO.NET使用</li>
</ul>
</blockquote>
<h4 id="31-精简版示例">3.1 精简版示例</h4>
<pre><code class="language-csharp">var table = new UserTable();
var query = new TableSqlQuery(table)
    .Where(table.Status.EqualValue(true));
var cursor = new TableCursor(query)
    .Take(10)
    .Skip(20)
    .Asc(table.Id);
var select = new CursorSelect(cursor)
    .Select(table.Id, table.Name);
</code></pre>
<h4 id="32-易用版更多功能">3.2 易用版更多功能</h4>
<blockquote>
<ul>
<li>参看<a href="https://donetsoftwork.github.io/Shadow/shadowcore/quick.html" target="_blank" rel="noopener nofollow">易用版简介</a></li>
</ul>
</blockquote>
<h3 id="4-需要createtable或表schema的选ddl">4. 需要CreateTable或表Schema的选DDL</h3>
<blockquote>
<ul>
<li>DDL可以搭配易用版或表达式版</li>
<li>参看<a href="https://donetsoftwork.github.io/Shadow/ddl/schema.html" target="_blank" rel="noopener nofollow">DDL简介</a></li>
</ul>
</blockquote>
<h4 id="41-createtable">4.1 CreateTable</h4>
<pre><code class="language-csharp">    ColumnSchema id = new("Id", "INTEGER") { ColumnType = ColumnType.Identity | ColumnType.Key };
    ColumnSchema name = new("Name", "TEXT");
    TableSchema table = new("Students", [id, name]);
    CreateTable create = new(table);
// Sqlite生成sql: CREATE TABLE "Students"("Id" INTEGER PRIMARY KEY AUTOINCREMENT,"Name" TEXT)
</code></pre>
<h4 id="42-表schema查询示例">4.2 表Schema查询示例</h4>
<pre><code class="language-csharp">UserTable table = new("Users", "tenant1");
var query = new TableQuery(table)
    .And(table.Status.EqualValue(true));
var cursor = new TableCursor(query, 10, 20)
    .Desc(table.Id);
var select = new CursorSelect(cursor)
    .Select(table.Id, table.Name);
// MsSql生成sql: SELECT [Id],[Name] FROM [tenant1].[Users] WHERE [Status]=1 ORDER BY [Id] DESC OFFSET 20 ROWS FETCH NEXT 10 ROWS ONLY
</code></pre>
<pre><code class="language-csharp">public class UserTable(string tableName = "Users", string schema = "")
    : TableSchema(tableName, [Defines.Id, Defines.Name, Defines.Status], schema)
{
    #region Columns
    public readonly ColumnSchema Id = Defines.Id;
    new public readonly ColumnSchema Name  = Defines.Name;
    public readonly ColumnSchema Status = Defines.Status;
    #endregion

    class Defines
    {
        public static readonly ColumnSchema Id = new("Id") { ColumnType = ColumnType.Key };
        public static readonly ColumnSchema Name = new("Name");
        public static readonly ColumnSchema Status = new("Status");
    }
}
</code></pre>
<h4 id="43-ddl表达式版查询示例">4.3 DDL+表达式版查询示例</h4>
<pre><code class="language-csharp">var select = new TableSchema("Users", [], "tenant1")
    .ToSqlQuery&lt;User&gt;()
    .Where(u =&gt; u.Status)
    .Take(10, 20)
    .Desc(u =&gt; u.Id)
    .ToSelect();
// MsSql生成sql: SELECT * FROM [tenant1].[Users] WHERE [Status]=1 ORDER BY [Id] DESC OFFSET 20 ROWS FETCH NEXT 10 ROWS ONLY
</code></pre>
<h3 id="5-易用版和表达式版一般不一起使用">5. 易用版和表达式版一般不一起使用</h3>
<blockquote>
<ul>
<li>易用版和表达式版有同名类和方法,在不同命名空间</li>
<li>同一个类引用命名空间ShadowSql和ShadowSql.Expressions调用某些方法会报不明确引用错误</li>
<li>同一项目一个类用易用版,另一个类用表达式版是可行的</li>
</ul>
</blockquote>
<p>我们可以把ShadowSql当做乐高玩具一样看待,通过自己的组装可以实现意想不到的美妙效果</p>
<p>源码托管地址: <a href="https://github.com/donetsoftwork/Shadow" target="_blank" rel="noopener nofollow">https://github.com/donetsoftwork/Shadow</a> ，也欢迎大家直接查看源码。<br>
gitee同步更新:<a href="https://gitee.com/donetsoftwork/Shadow" target="_blank" rel="noopener nofollow">https://gitee.com/donetsoftwork/Shadow</a><br>
文档地址: <a href="https://donetsoftwork.github.io/Shadow/expression/index.html" target="_blank" rel="noopener nofollow">https://donetsoftwork.github.io/Shadow/expression/index.html</a></p>
<p>如果大家喜欢请动动您发财的小手手帮忙点一下Star。</p>

</div>
<div class="clear"></div>
</div>
		<p class="postfoot">
			posted on 
<span id="post-date" data-last-update-days="0.014231492886574075" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-06-04 08:52">2025-06-04 08:23</span>&nbsp;
<a href="https://www.cnblogs.com/xiangji">xiangji</a>&nbsp;
阅读(<span id="post_view_count">82</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18909458);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18909458', targetLink: 'https://www.cnblogs.com/xiangji/p/18909458', title: 'ShadowSql.net之正确使用方式' })">举报</a>

		</p>
	