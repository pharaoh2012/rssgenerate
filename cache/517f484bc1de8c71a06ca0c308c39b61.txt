
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/hunterxiong/p/18971701" title="发布于 2025-07-07 21:51">
    <span role="heading" aria-level="2">Golang基础笔记九之方法与接口</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>本文首发于公众号：Hunter后端</p>
<p>原文链接：<a href="https://mp.weixin.qq.com/s/Qqynk1KPYLi_6aQv20nTJQ" target="_blank" rel="noopener nofollow">Golang基础笔记九之方法与接口</a></p>
</blockquote>
<p>本篇笔记介绍 Golang 里方法和接口，以下是本篇笔记目录：</p>
<ol>
<li>方法</li>
<li>接口</li>
<li>用结构体实现类的功能</li>
</ol>
<h3 id="1方法">1、方法</h3>
<p>首先介绍一下方法。</p>
<p>方法是与特定类型关联的函数，我们在实现一个函数前，绑定一个类型，就实现了这个类型的方法。</p>
<p>比如我们想实现一个结构体的方法，可以如下操作：</p>
<pre><code class="language-go">type Person struct {
&nbsp; &nbsp; Name string
&nbsp; &nbsp; Age &nbsp;int
}
func (person Person) fmtPersonInfo() {
&nbsp; &nbsp; fmt.Printf("person name is %s, age is %d\n", person.Name, person.Age)
}
</code></pre>
<p>在上面的操作中，我们就为 Person 这个结构体绑定了一个方法，而其调用也很简单，就是实例化一个 Person 结构体后，就可以对其进行调用：</p>
<pre><code class="language-go">person := Person{Name: "Hunter", Age: 28}
person.fmtPersonInfo()
</code></pre>
<h4 id="方法支持的类型">方法支持的类型</h4>
<p>方法支持绑定的类型有结构体、指针类型、接口类型以及自定义类型，但是不支持绑定 Golang 内置的类型包括 int、slice、map 等。</p>
<h5 id="方法绑定到指针类型">方法绑定到指针类型</h5>
<p>前面介绍了方法绑定到结构体上，这里再介绍一个绑定到指针类型上，还是前面的 Person 结构体，绑定到其指针上，来实现更改 Age 字段的操作：</p>
<pre><code class="language-go">func (person *Person) ChangeAge(age int) {
&nbsp; &nbsp; person.Age = age
}
person := Person{Name: "Hunter", Age: 28}
person.fmtPersonInfo()
person.ChangeAge(18)
person.fmtPersonInfo()
</code></pre>
<p>第二次打印信息就可以看到 person 的 age 已经发生了变化。</p>
<p>这里需要注意一点，Person 结构体是值类型，如果绑定的是其结构体本身，而非其指针类型，在方法中对其更改后，并不会影响结构体本身，比如下面的操作：</p>
<pre><code class="language-go">func (person Person) NewChangeAge(age int) {
&nbsp; &nbsp; person.Age = age
}
person := Person{Name: "Hunter", Age: 28}
person.fmtPersonInfo()
person.NewChangeAge(18)
person.fmtPersonInfo()
</code></pre>
<p>可以看到，这里调用 NewChangeAge() 方法后，没有对 person 这个结构体本身进行更改。</p>
<h5 id="方法绑定到自定义类型">方法绑定到自定义类型</h5>
<p>而如果想要绑定 int、slice、map 等内置类型，可以通过方法支持的自定义类型来绑定。</p>
<p>比如我们想要实现使用 slice 绑定一个打印其长度的方法，可以通过自定义类型设置一个别名，通过别名来绑定一个方法：</p>
<pre><code class="language-go">type MySlce []int
func (mySlice MySlce) printSliceLength() {
&nbsp; &nbsp; fmt.Printf("mySliceLength is %d\n", len(mySlice))
}
slice := MySlce{1, 2, 3}
slice.printSliceLength()
</code></pre>
<h3 id="2接口">2、接口</h3>
<h4 id="1-接口的定义和实现">1. 接口的定义和实现</h4>
<p>接口是一组方法签名的集合，任何类型只要实现了接口中的所有方法，就被认为实现了该接口。</p>
<p>比如下面我们定义了一个形状的接口，内部有面积和周长两个空方法：</p>
<pre><code class="language-go">type Shape interface {
&nbsp; &nbsp; Area() float64
&nbsp; &nbsp; Perimeter() float64
}
</code></pre>
<p>这样我们就定义了一个接口。</p>
<p>而如果我们要实现这个接口，只需要实现这个接口里的两个方法 Area() 和 Perimeter() 就是实现了这个接口，这个过程是隐式的，不需要显式声明或者绑定。</p>
<p>接下来我们定义 Rectangle 和 Circle 两个结构体，并且实现 Area() 和 Perimeter() 两个方法：</p>
<pre><code class="language-go">type Rectangle struct {
&nbsp; &nbsp; Width, Height float64
}
func (r Rectangle) Area() float64 {
&nbsp; &nbsp; return r.Width * r.Height
}
func (r Rectangle) Perimeter() float64 {
&nbsp; &nbsp; return 2 * (r.Width + r.Height)
}
type Circle struct {
&nbsp; &nbsp; radius float64
}
func (c Circle) Area() float64 {
&nbsp; &nbsp; return 3.14 * c.radius * c.radius
}
func (c Circle) Perimeter() float64 {
&nbsp; &nbsp; return 2 * 3.14 * c.radius
}
</code></pre>
<p>我们已经分别用 Rectangle 和 Circle 这两个结构体实现了 Shape 接口。</p>
<p>那么这个接口在这里有什么作用呢，我们可以实现一个函数，接收接口类型的参数，那么实现了这个接口的结构体都可以作为传入：</p>
<pre><code class="language-go">func PrintShapeInfo(s Shape) {
&nbsp; &nbsp; fmt.Println("Area: ", s.Area())
&nbsp; &nbsp; fmt.Println("Perimeter: ", s.Perimeter())
}
func main() {
&nbsp; &nbsp; r := Rectangle{Width: 2, Height: 3}
&nbsp; &nbsp; PrintShapeInfo(r)
&nbsp; &nbsp; c := Circle{Radius: 5}
&nbsp; &nbsp; PrintShapeInfo(c)
}
</code></pre>
<h4 id="2-类型断言">2. 类型断言</h4>
<p>类型断言用于检查接口值的底层具体类型，并提取该类型的值，其用法示例如下：</p>
<pre><code class="language-go">value, ok := interfaceValue.(ConcreteType)
</code></pre>
<ol>
<li>value 是转换后的具体类型值</li>
<li>ok 是一个布尔值，表示是否断言成功</li>
<li>interfaceValue 是接口类型的变量</li>
<li>ConcreteType 是目标具体类型。<br>
比如我们可以修改 PrintShapeInfo 函数，在内部对其进行类型断言：</li>
</ol>
<pre><code class="language-go">func PrintShapeInfo(s Shape) {
&nbsp; &nbsp; circle, ok := s.(Circle)
&nbsp; &nbsp; if ok {
&nbsp; &nbsp; &nbsp; &nbsp; fmt.Println("ths shape is circle, the area is: ", circle.Area())
&nbsp; &nbsp; } else {
&nbsp; &nbsp; &nbsp; &nbsp; fmt.Println("this shape is not circle")
&nbsp; &nbsp; }
&nbsp; &nbsp; fmt.Println("Area: ", s.Area())
&nbsp; &nbsp; fmt.Println("Perimeter: ", s.Perimeter())
}
</code></pre>
<h4 id="3-空接口">3. 空接口</h4>
<p>空接口（interface{}） 可以表示任何类型的值，常用于处理不确定类型的数据。</p>
<p>比如我们想打印一个输入的变量，但是这个变量的类型不确定，我们可以使用空接口来处理这种情况。</p>
<pre><code class="language-go">func PrintType(a interface{}) {
&nbsp; &nbsp; switch v := a.(type) {
&nbsp; &nbsp; case int:
&nbsp; &nbsp; &nbsp; &nbsp; fmt.Println("this is int: ", v)
&nbsp; &nbsp; case float64:
&nbsp; &nbsp; &nbsp; &nbsp; fmt.Println("this is float64: ", v)
&nbsp; &nbsp; case string:
&nbsp; &nbsp; &nbsp; &nbsp; fmt.Println("this is string: ", v)
&nbsp; &nbsp; default:
&nbsp; &nbsp; &nbsp; &nbsp; fmt.Println("this is other type: ", v)
&nbsp; &nbsp; }
}

func main() {
&nbsp; &nbsp; PrintType(1)
&nbsp; &nbsp; PrintType(3.4)
&nbsp; &nbsp; PrintType("abc")
}
</code></pre>
<h3 id="3用结构体实现类的功能">3、用结构体实现类的功能</h3>
<p>在 Golang 里没有类的相关定义，但是我们可以使用结构体和方法的组合来实现类的相关特性。</p>
<h4 id="1-封装">1. 封装</h4>
<p>我们可以通过结构体字段的首字母大小写控制访问权限，然后提供公共方法来操作私有字段。</p>
<p>在结构体中，大写开头的字段为公开字段，小写开头的字段为私有字段。</p>
<p>我们用下面的示例来展示一下用结构体和方法来实现封装功能。<br>
文件目录如下：</p>
<pre><code class="language-shell">.
├── main.go
├── service
│ &nbsp; └── person_operation.go
</code></pre>
<p>其中 person_operation.go 的内容如下：</p>
<pre><code class="language-go">package service

type Person struct {
&nbsp; &nbsp; Name &nbsp; string
&nbsp; &nbsp; Age &nbsp; &nbsp;int
&nbsp; &nbsp; gender string
}

func (p *Person) SetGender(gender string) {
&nbsp; &nbsp; p.gender = gender
}

func (p *Person) GetGender() string {
&nbsp; &nbsp; return p.gender
}
</code></pre>
<p>其中，Person 这个结构体的 Name 和 Age 字段首字母都为大写，为公共字段，而 gender 首字母为小写，在 main.go 里不能直接引用，所以下面定义了两个公有接口提供设置和访问。</p>
<p>以下是 main.go 里的内容：</p>
<pre><code class="language-go">package main

import (
&nbsp; &nbsp; "fmt"
&nbsp; &nbsp; "go_proj/service"
)

func main() {
&nbsp; &nbsp; person := service.Person{
&nbsp; &nbsp; &nbsp; &nbsp; Name: "张三",
&nbsp; &nbsp; &nbsp; &nbsp; Age: &nbsp;18,
&nbsp; &nbsp; &nbsp; &nbsp; // gender: "男", &nbsp;// gender是私有属性，不能直接访问
&nbsp; &nbsp; }
&nbsp; &nbsp; // fmt.Println(person.gender) // gender是私有属性，不能直接访问
&nbsp; &nbsp; fmt.Println(person.GetGender())
&nbsp; &nbsp; person.SetGender("男")
&nbsp; &nbsp; fmt.Println(person.GetGender())
}
</code></pre>
<p>在这里，gender 字段在 Person 定义和访问的时候都不能直接操作，需要通过设置的方法来进行定义以及访问。</p>
<h4 id="2-继承">2. 继承</h4>
<p>我们可以通过结构体的嵌套来实现继承，比如下面新建一个 Chinese 结构体：</p>
<pre><code class="language-go">type Chinese struct {
&nbsp; &nbsp; Person
}
</code></pre>
<p>然后我们定义的 Chinese 实例可以调用 Person 结构体的方法：</p>
<pre><code class="language-go">chinese := service.Chinese{
&nbsp; &nbsp; Person: service.Person{
&nbsp; &nbsp; &nbsp; &nbsp; Name: "张三",
&nbsp; &nbsp; &nbsp; &nbsp; Age: &nbsp;18,
&nbsp; &nbsp; },
}
chinese.SetGender("男")
fmt.Println(chinese.GetGender())
</code></pre>
<h4 id="3-多态">3. 多态</h4>
<p>多态则是同一方法名在不同的类型中有不同的实现，这个操作在前面介绍接口的就已经实现过了，这里不再做赘述。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-07 21:52">2025-07-07 21:51</span>&nbsp;
<a href="https://www.cnblogs.com/hunterxiong">XHunter</a>&nbsp;
阅读(<span id="post_view_count">28</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18971701);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18971701', targetLink: 'https://www.cnblogs.com/hunterxiong/p/18971701', title: 'Golang基础笔记九之方法与接口' })">举报</a>
</div>
        