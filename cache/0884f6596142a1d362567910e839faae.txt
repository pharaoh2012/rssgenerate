
        <h2>
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/shengzhang/p/18701080" title="发布于 2025-02-06 15:11">
    <span role="heading" aria-level="2">Sa-Token v1.40.0 发布 🚀，来看看有没有令你心动的功能！</span>
    

</a>

        </h2>
        <div class="postbody">
            <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>Sa-Token 是一个轻量级 Java 权限认证框架，主要解决：<strong>登录认证</strong>、<strong>权限认证</strong>、<strong>单点登录</strong>、<strong>OAuth2.0</strong>、<strong>微服务网关鉴权</strong> 等一系列权限相关问题。🔐</p>
<p><strong>目前最新版本 <code>v1.40.0</code> 已发布至 <code>Maven</code> 中央仓库</strong> 🎉，大家可以通过如下方式引入：</p>
<pre><code class="language-xml">&lt;!-- Sa-Token 权限认证 --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;cn.dev33&lt;/groupId&gt;
    &lt;artifactId&gt;sa-token-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;1.40.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>该版本包含大量 ⛏️️️新增特性、⛏️️️️漏洞修复、⛏️️️代码优化 等，下面容我列举几条比较重要的更新内容供大家参阅：</p>
<h3 id="️-更新点1新增-cookie-自定义属性支持">🍪️ 更新点1：新增 Cookie 自定义属性支持</h3>
<p>这是来自名为 “@massinger” 的用户创建的 GitHub issue <a href="https://github.com/dromara/Sa-Token/issues/693" target="_blank" rel="noopener nofollow">#693</a> ，<br>
该开发者提出“是否可以为 <code>Cookie</code> 添加 <code>Partitioned</code> 属性，用于支持 iframe 嵌入跨域” 💡。</p>
<p>起初我以为 http 响应头 <code>Cookie</code> 参数只有 <code>domain</code>、<code>path</code>、<code>secure</code>、<code>httpOnly</code>、<code>sameSite</code> 等几个扩展属性😶，<br>
顺着这个 issue，我查阅了一下相关资料，这不查不知道，一查吓一跳 😱。</p>
<p>原来 <code>Cookie</code> 还有这么多我不知道的扩展属性🔍：</p>
<p><img src="https://oss.dev33.cn/sa-token/blog/2025-2/cookie-extra-prop.png" alt="Cookie扩展属性" loading="lazy"></p>
<p>（参考文章：<a href="https://blog.csdn.net/fengbin2005/article/details/136544226%EF%BC%89" target="_blank" rel="noopener nofollow">https://blog.csdn.net/fengbin2005/article/details/136544226）</a></p>
<p>本着“可扩展性”的原则，本次版本更新没有补充这些属性的配置定义，而是直接增加了一个 <code>extraAttrs</code> 字段，你可以借助该字段扩展任意自定义属性✨。</p>
<p>举个例子，如下代码配置：</p>
<pre><code class="language-yml">sa-token: 
    cookie:
        domain: ""
        path: /
        secure: false
        httpOnly: true
        sameSite: Lax
        extraAttrs:
            Priority: Medium
            Partitioned: ""
            abc: def
</code></pre>
<p>将会促使 Sa-Token 框架生成以下格式的 Cookie 响应头🍪️：</p>
<pre><code class="language-txt">Set-Cookie: satoken=4d1a2052-29e0-4302-9ecd-ac54dece5fde; Max-Age=2592000; Expires=Tue, 4 Mar 2025 00:49:03 +0800; Path=/; HttpOnly; SameSite=Lax; Priority=Medium; Partitioned; abc=def
</code></pre>
<h3 id="️-更新点2新增-safirewallstrategy-防火墙策略">🛡️ 更新点2：新增 SaFirewallStrategy 防火墙策略</h3>
<p>危险 path 路径符校验是在最早 v1.37.0 就支持的功能，如果前端提交的请求 path 包含 “<code>//、\、%2e、%2f、%5c、%25</code>” 等特殊字符时，Sa-Token 全局过滤器将会截断请求，<br>
返回类似 “非法请求：/test/login//” 的响应提示⚠️。</p>
<p>因为包含这些特殊字符的请求通常被用于路径遍历、请求绕行等网络攻击行为💻⚔️。</p>
<p>本次更新重构了该功能的架构设计，抽离了一个统一的 <code>SaFirewallStrategy</code> “防火墙”组件🧩，目前包含以下能力：</p>
<ul>
<li>请求 path 黑名单拦截。</li>
<li>非法字符校验。</li>
<li>白名单放行。</li>
</ul>
<p>该组件在后续版本中还将计划增加ip校验、请求头校验等能力，并尝试引入 hooks 机制，以方便开发者更自由的进行功能扩展 🚀。</p>
<h3 id="-更新点3新增对分号字符的-path-路径校验以预防潜在的网络攻击">🔍 更新点3：新增对分号字符的 path 路径校验，以预防潜在的网络攻击</h3>
<p>此功能提案来源于 “船山信安” 公众号的一篇漏洞报告📄：<a href="https://mp.weixin.qq.com/s/77CIDZbgBwRunJeluofPTA" target="_blank" rel="noopener nofollow">Sa-Token对url过滤不全存在的风险点</a> 🔗</p>
<p>该文章指出了 Sa-Token 对包含 “;” 字符过滤不全存在的风险点⚠️：由于 Sa-Token 与底层 WebMVC 框架对 path 路径匹配的方式存在部分差异，<br>
当前端提交的请求 path 中包含 “;” 字符，将可能导致请求绕过过滤器的权限检测，执行对应的 <code>Controller</code> 方法，从而导致越权问题💥。</p>
<p>目前在最新 v1.40.0 版本中已修复此问题，框架将从最顶层过滤器直接截断 path 中包含“;”字符的请求，避免鉴权被绕过的问题🔒。</p>
<p>感谢“船山信安”团队做出的贡献🙏🌟。</p>
<h3 id="-更新点4新增-oauth2-client-前端测试页助你快速对接调试-oauth2-server">🚀 更新点4：新增 OAuth2 Client 前端测试页，助你快速对接调试 OAuth2-Server</h3>
<p>对于刚刚接触 OAuth2 概念的初学者来说，不仅 OAuth2 Server 端的搭建比较困难，其接入与测试也是一件极其繁琐的事情😫。</p>
<p>OAuth2 对接涉及大量繁琐的参数拼接、响应报文解析等步骤，仅一个授权码式的对接，其调试过程可能也要可能耗费数小时乃至数天⏳。</p>
<p>为此，我们提供了一个专门对接 OAuth2 Server 的前端测试页🖥️：</p>
<p><img src="https://oss.dev33.cn/sa-token/blog/2025-2/sa-oauth2-client-test-h5-page.png" alt="OAuth2 前端测试页" loading="lazy"></p>
<p>该测试页允许你：</p>
<ul>
<li>1️⃣ 在前端直接配置 OAuth2 Server 的主机地址、授权页地址、token接口地址、Scope参数 等信息。</li>
<li>2️⃣ 一键拼接授权URL地址，一键测试对应平台 授权码式、隐藏式、密码式和客户端凭证式 的完整授权流程。</li>
<li>3️⃣ 离线化自由部署，所有代码均在前端实现，敏感数据全程不经过第三方服务器，完整开源可自由二开。</li>
</ul>
<p>通过该测试页面，你将非常直观的 get 到 OAuth2 四种模式的对接步骤、响应报文等信息，帮助你快速定位和解决 OAuth2 对接流程中的大部分问题 💡✨。</p>
<p>详情可参考该视频：<a href="https://www.bilibili.com/video/BV13LSMYzEmE/" target="_blank" rel="noopener nofollow">Sa-Token v1.40 新功能预览：OAuth2 四种模式 一键测试页</a> 🔗</p>
<h3 id="-更新点5新增-unionid-联合-id-实现方便跨应用识别用户">🤝 更新点5：新增 UnionId 联合 ID 实现，方便跨应用识别用户</h3>
<p>此提案来自于一位开发者对 官网 sa-token 小助手的咨询 💬：</p>
<p><img src="https://oss.dev33.cn/sa-token/blog/2025-2/sa-oauth-unionid-xzs-zixun.png" alt="有关 UnionId 功能的 sa-token 小助手咨询 " loading="lazy"></p>
<p>这位开发者在使用 Sa-Token 的 OAuth2 模块时，需要一个叫做 <code>UnionId</code> 的功能。简单来讲：<code>UnionId</code> 可以帮助开发者在同主体的多个应用下定位到同一用户 🔍。</p>
<p>作为立志要成为国内第一 java 权限认证框架的 Sa-Token 来讲，这是必须给安排上的💪🏆。</p>
<p>详情可参考该视频️：<a href="https://www.bilibili.com/video/BV1oz6AY5ERJ/" target="_blank" rel="noopener nofollow">OAuth2 授权流程中的 clientId、openId、unionId、userId 都是干嘛的？Sa-Token v1.40 预览：新增unionid支持</a> 🔗</p>
<h3 id="-更新点6新增-oauth2-server-端前后台分离示例与文档">🌐 更新点6：新增 OAuth2-Server 端前后台分离示例与文档</h3>
<p>有 Web Page 服务的地方就有前后台分离，当然 OAuth2 也不例外🌍。</p>
<p>之前的版本 本质也是支持搭建 OAuth2-Server 端前后台分离服务的，但是由于官网仓库缺乏 Demo示例和相关介绍文档，导致 “OAuth2-Server 端能否前后台分离？” 成为点击量特别高的一个问题🔥。</p>
<p><img src="https://oss.dev33.cn/sa-token/blog/2025-2/sa-oauth2-qhdfl-wx-zixun.png" alt="OAuth2-Server 端能否前后台分离？微信咨询" loading="lazy"></p>
<p>参考 issue:</p>
<ul>
<li><a href="https://gitee.com/dromara/sa-token/issues/I9DQGA" target="_blank" rel="noopener nofollow">https://gitee.com/dromara/sa-token/issues/I9DQGA</a></li>
<li><a href="https://gitee.com/dromara/sa-token/issues/I9W2RU" target="_blank" rel="noopener nofollow">https://gitee.com/dromara/sa-token/issues/I9W2RU</a></li>
</ul>
<p>本次 v1.40.0 版本针对 OAuth2-Server 端的前后台分离搭建补充了详细的 demo示例📦 与 说明文档📚。</p>
<p>在线官网直达地址：<a href="https://sa-token.cc/doc.html#/oauth2/oauth2-h5" target="_blank" rel="noopener nofollow">OAuth2-Server 端前后台分离</a> 🔗</p>
<h3 id="-更新点7新增-sa-token-freemarker-插件整合-freemarker-视图引擎">🔌 更新点7：新增 <code>sa-token-freemarker</code> 插件，整合 <code>Freemarker</code> 视图引擎。</h3>
<p>来源 issue：<a href="https://github.com/dromara/sa-token/issues/651" target="_blank" rel="noopener nofollow">#651</a> 💡</p>
<p>虽然前后台分离已成为当今的主流架构模式 🌊，但仍有一部分系统依旧采用前后台一体的方式进行搭建开发🏗️。</p>
<p>在这部分应用中，80%的系统会采用 <code>SpringBoot</code> 官方推荐的 <code>Thymeleaf</code> 作为视图引擎组件📊。只有很少一部分才会采用 <code>Freemarker</code>、<code>jsp</code>、<code>beetl</code> 等技术🛠️。</p>
<p>但是！少~（三声转折），我们也要支持！💪✨</p>
<p>本次新增的 <code>sa-token-freemarker</code> 插件，用于整合 <code>Freemarker</code> 视图引擎。该插件使用方式非常简单，你只需要在 <code>pom.xml</code> 中引入如下依赖👇：</p>
<pre><code class="language-xml">&lt;!-- 在 Freemarker 页面中使用 Sa-Token 自定义标签 --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;cn.dev33&lt;/groupId&gt;
    &lt;artifactId&gt;sa-token-freemarker&lt;/artifactId&gt;
    &lt;version&gt;1.40.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>然后便可以愉快的在 <code>Freemarker Page</code> 中🎉，使用 Sa-Token 自定义标签控制某些内容是否显示，把权限精确到按钮级🎛️：</p>
<pre><code class="language-html">&lt;!-- 有user-add权限才显示按钮 --&gt;  
&lt;@sa.hasPermission value="user-add"&gt;
  &lt;button class="btn-danger"&gt;点击发射核弹&lt;/button&gt;
&lt;/@sa.hasPermission&gt;
</code></pre>
<p>完整示例代码参考如下📑：</p>
<pre><code class="language-html">&lt;div class="view-box" style="padding: 30px;"&gt;
	&lt;h2&gt;Sa-Token 集成 Freemarker 标签方言 —— 测试页面&lt;/h2&gt;
	&lt;p&gt;当前是否登录：&lt;#if stp.isLogin()&gt;是&lt;#else&gt;否&lt;/#if&gt;&lt;/p&gt;
	&lt;p&gt;
		&lt;a href="login" target="_blank"&gt;登录&lt;/a&gt;
		&lt;a href="logout" target="_blank"&gt;注销&lt;/a&gt;
	&lt;/p&gt;

	&lt;p&gt;登录之后才能显示：&lt;@sa.login&gt;value&lt;/@sa.login&gt;&lt;/p&gt;
	&lt;p&gt;不登录才能显示：&lt;@sa.notLogin&gt;value&lt;/@sa.notLogin&gt;&lt;/p&gt;

	&lt;p&gt;具有角色 admin 才能显示：&lt;@sa.hasRole value="admin"&gt;value&lt;/@sa.hasRole&gt;&lt;/p&gt;
	&lt;p&gt;同时具备多个角色才能显示：&lt;@sa.hasRoleAnd value="admin, ceo, cto"&gt;value&lt;/@sa.hasRoleAnd&gt;&lt;/p&gt;
	&lt;p&gt;只要具有其中一个角色就能显示：&lt;@sa.hasRoleOr value="admin, ceo, cto"&gt;value&lt;/@sa.hasRoleOr&gt;&lt;/p&gt;
	&lt;p&gt;不具有角色 admin 才能显示：&lt;@sa.notRole value="admin"&gt;value&lt;/@sa.notRole&gt;&lt;/p&gt;

	&lt;p&gt;具有权限 user-add 才能显示：&lt;@sa.hasPermission value="user-add"&gt;value&lt;/@sa.hasPermission&gt;&lt;/p&gt;
	&lt;p&gt;同时具备多个权限才能显示：&lt;@sa.hasPermissionAnd value="user-add, user-delete, user-get"&gt;value&lt;/@sa.hasPermissionAnd&gt;&lt;/p&gt;
	&lt;p&gt;只要具有其中一个权限就能显示：&lt;@sa.hasPermissionOr value="user-add, user-delete, user-get"&gt;value&lt;/@sa.hasPermissionOr&gt;&lt;/p&gt;
	&lt;p&gt;不具有权限 user-add 才能显示：&lt;@sa.notPermission value="user-add"&gt;value&lt;/@sa.notPermission&gt;&lt;/p&gt;

	&lt;p&gt;
		从SaSession中取值：
		&lt;#if stp.isLogin()&gt;
			&lt;span&gt;${stp.getSession().get('name')}&lt;/span&gt;
		&lt;/#if&gt;
	&lt;/p&gt;

&lt;/div&gt;
</code></pre>
<p>在线文档直达链接：<a href="https://sa-token.cc/doc.html#/plugin/freemarker-extend" target="_blank" rel="noopener nofollow">Sa-Token 整合 Freemarker</a> 📚</p>
<h3 id="-更新点8新增-sa-token-spring-el-插件用于支持-spel-表达式注解鉴权">💡 更新点8：新增 <code>sa-token-spring-el</code> 插件，用于支持 SpEL 表达式注解鉴权。</h3>
<p>fix issue：</p>
<ul>
<li><a href="https://gitee.com/dromara/sa-token/issues/IB3GBB" target="_blank" rel="noopener nofollow">#IB3GBB</a></li>
<li><a href="https://gitee.com/dromara/sa-token/issues/IAIXSL" target="_blank" rel="noopener nofollow">#IAIXSL</a></li>
<li><a href="https://gitee.com/dromara/sa-token/issues/I9P24F" target="_blank" rel="noopener nofollow">#I9P24F</a></li>
</ul>
<p>“注解鉴权动态传递参数，支持‌SpEL表达式” 是呼声很高的一个提案📢，之前由于我本人对 <code>SpringEL</code> 表达式的了解非常有限，一直没有实现此功能。</p>
<p>在开发前，我构思了好几种实现方案🤔，比如对 <code>@SaCheckPermission("xxx")</code> 注解支持动态表达式，或者手写一个简单的表达式解析引擎等。</p>
<p>最终权衡功能性、扩展性以及代码性能等 多个维度考虑⚖️，实现方案为新增一个独立的插件 <code>sa-token-spring-el</code>，该插件借助 <code>SpringAOP</code> 能力，提供一个 <code>@SaCheckEL</code> 鉴权注解，<br>
用于书写 <code>SpringEL</code> 表达式进行鉴权✍️。</p>
<p>简单示例：</p>
<pre><code class="language-java">@RestController
@RequestMapping("/check-el/")
public class SaCheckELController {

    // 登录校验 
    @SaCheckEL("stp.checkLogin()")
    @RequestMapping("test1")
    public SaResult test1() {
        return SaResult.ok();
    }

    // 权限校验 
    @SaCheckEL("stp.checkPermission('user:edit')")
    @RequestMapping("test3")
    public SaResult test3() {
        return SaResult.ok();
    }

    // 参数长度校验 
    @SaCheckEL("NEED( #name.length() &gt; 3 )")
    @RequestMapping("test5")
    public SaResult test5(@RequestParam(defaultValue = "") String name) {
        return SaResult.ok().set("name", name);
    }

    // SaSession 里取值校验 
    @SaCheckEL("NEED( stp.getSession().get('name') == 'zhangsan' )")
    @RequestMapping("test8")
    public SaResult test8() {
        return SaResult.ok();
    }

}
</code></pre>
<p>在线文档直达链接：<a href="https://sa-token.cc/doc.html#/plugin/spel-at" target="_blank" rel="noopener nofollow">SpEL 表达式注解鉴权</a> 📚</p>
<p>值得一提的是：在本次更新中，<code>@ly-chn</code> 同学给了我很大的技术支持🙏。是他提供的 demo 案例才让我顺利完成了 <code>sa-token-spring-el</code> 插件开发🚀。</p>
<p>同时他也是 idea 插件 <code>SpEL Assistant</code> 的开发作者💡，该插件允许为自定义注解书写 <code>SpEL</code> 表达式时增加代码提示功能，<br>
开源地址：<a href="https://github.com/ly-chn/SpEL-Assistant" target="_blank" rel="noopener nofollow">https://github.com/ly-chn/SpEL-Assistant</a>🔗</p>
<h3 id="-更新点9新增-mongodb-集成示例权限数据可以缓存到-mongodb-中了">🍃 更新点9：新增 <code>MongoDB</code> 集成示例，权限数据可以缓存到 MongoDB 中了！</h3>
<p>merge pr:</p>
<ul>
<li><a href="https://gitee.com/dromara/sa-token/pulls/322" target="_blank" rel="noopener nofollow">pr322</a></li>
<li><a href="https://github.com/dromara/Sa-Token/pull/667" target="_blank" rel="noopener nofollow">pr667</a></li>
</ul>
<p>集成 <code>MongoDB</code> 是我一直想做而没有做的一个功能，一来是因为我对 <code>MongoDB</code> 了解有限📉，二来我感觉 <code>MongoDB</code> 的数据存储格式也不如 <code>Redis</code> 更加合适🔍。</p>
<p>有太多更加紧迫的提案需要我去实现，所以整合 <code>MongoDB</code> 一直处于搁置状态⏳。</p>
<p>感谢来自 <code>@lilihao</code> 提供的 demo 示例🙏，也算是补充了 Sa-Token 在这块的缺失✅。</p>
<p>在线文档直达链接：</p>
<ul>
<li><a href="https://sa-token.cc/doc.html#/up/integ-spring-mongod-1" target="_blank" rel="noopener nofollow">Sa-Token 集成 MongoDB 参考一</a> 📘。</li>
<li><a href="https://sa-token.cc/doc.html#/up/integ-spring-mongod-2" target="_blank" rel="noopener nofollow">Sa-Token 集成 MongoDB 参考二</a> 📙。</li>
</ul>
<h3 id="-更新点10封禁模块新增支持实时从数据库查询数据">💾 更新点10：封禁模块新增支持实时从数据库查询数据</h3>
<p>Sa-Token 默认将封禁信息储存在缓存中，缓存中的数据是 “临时性的⏳”、“易丢失的💨”，而在大多数系统的设计中，需要将封禁数据持久化到数据库中💾。</p>
<p>要使封禁信息持久化，你只需要在调用 Sa-Token 的封禁 API 后，再继续调用插入数据库的代码即可</p>
<pre><code class="language-java">// 在 Sa-Token 框架中封禁指定账号
StpUtil.disable(10001, 86400); 

// 更改数据库中此人信息 (举例代码)
userMapper.disableUser(10001);
</code></pre>
<p>这样即可保证封禁数据同步插入到缓存和数据库中，但是还有一个问题，如果我们的程序或缓存中间件重启了，导致缓存数据丢失⚠️， 那再调用 <code>StpUtil.checkDisable(10001)</code> 代码将没有效果，无法约束到此用户🚫。</p>
<p>比较次的解决方案是在程序启动时，读取数据库中所有封禁信息同步到缓存中去，但是如果封禁记录较多这样将会严重拖慢程序启动时间⏱️💣。</p>
<p>v1.40.0 版本提供一种新的方案🌟，你只需要实现 <code>StpInterface</code> 接口的 <code>isDisabled</code> 方法，即可让 Sa-Token 实时查询某个账号是否被封禁了指定业务。</p>
<pre><code class="language-java">@Component
public class StpInterfaceImpl implements StpInterface {

    /**
     * 返回指定账号 id 是否被封禁
     *
     * @param loginId  账号id
     * @param service 业务标识符
     * @return 描述该账号是否封禁的包装信息对象
     */
    public SaDisableWrapperInfo isDisabled(Object loginId, String service) {
        // 查库操作 ...  (此处仅做示例代码)
        return SaDisableWrapperInfo.createDisabled(86400, 1);
    }

}
</code></pre>
<p>该方法返回值具有多种写法，分别代表不同的封禁策略🔧，详细可参考在线文档：<br>
<a href="https://sa-token.cc/doc.html#/up/disable" target="_blank" rel="noopener nofollow">Sa-Token 账号封禁</a> 📚</p>
<h3 id="-更新点11文档新增内容">📚 更新点11：文档新增内容</h3>
<ul>
<li>文档首页新增：哔哩哔哩、抖音、微信视频号链接，欢迎大家关注❤️。</li>
<li>导航栏视频新增👉 [fox说技术] 录制的 Sa-Token 课程链接 🎓。</li>
<li>“API接口参数签名”章节 新增视频讲解链接📹（该课程由B站up主 [抓蛙师] 讲解录制👨🏫）。</li>
<li>文档首页首屏增加 “需求提交” 按钮，欢迎各位同学对 Sa-Token 后续版本提出你的需求与建议💡。</li>
<li>文档首页以及 Readme 新增 <code>gitcode</code> G-Star badge 展示🏅🌟。</li>
<li>文档新增新增团队成员展示👥。</li>
<li>补全赞助者名单：v1.40 版本开发期间，共有20+用户进行打赏💰，总金额超过500元+，感谢这些用户的充电支持🙏。</li>
</ul>
<h3 id="-完整更新日志">📜 完整更新日志</h3>
<p>除了以上提到的几点以外，还有更多更新点无法逐一详细介绍，下面是 v1.40.0 版本的完整更新日志：</p>
<ul>
<li>core:
<ul>
<li>新增：新增 <code>Cookie</code> 自定义属性支持。  fix: <a href="https://github.com/dromara/Sa-Token/issues/693" target="_blank" rel="noopener nofollow">#693</a>   <strong>[重要]</strong></li>
<li>新增：<code>SaFirewallStrategy</code> 防火墙策略：请求 path 黑名单校验、非法字符校验、白名单放行。  <strong>[重要]</strong></li>
<li>修复：新增对分号字符的 path 路径校验。   参考：<a href="https://mp.weixin.qq.com/s/77CIDZbgBwRunJeluofPTA" target="_blank" rel="noopener nofollow">Sa-Token对url过滤不全存在的风险点</a>   <strong>[漏洞修复]</strong></li>
<li>修复: 修复部分场景下登录后已存在的 <code>token-session</code> 没有被续期的问题。  fix: <a href="https://gitee.com/dromara/sa-token/issues/IA8U1O" target="_blank" rel="noopener nofollow">#IA8U1O</a></li>
<li>优化：优化 <code>active-timeout</code> 的检查与续期操作，同一请求内只会检查与续期一次。</li>
<li>修复：<code>SaFoxUtil.joinSharpParam</code> 方法中不正确的注释。</li>
<li>新增：封禁模块新增支持实时从数据库查询数据。</li>
</ul>
</li>
<li>SSO：
<ul>
<li>优化：SSO 示例代码的跨域处理由原生方式改为 Sa-Token 过滤器模式。</li>
<li>新增：文档新增 “SSO整合 - NoSdk 模式与非 java 项目” 章节。</li>
<li>新增：“不同 SSO Client 配置不同秘钥” 章节增加部分异常的处理方案提示，fix: <a href="https://gitee.com/dromara/sa-token/issues/IAFZXL" target="_blank" rel="noopener nofollow">#IAFZXL</a></li>
<li>删除：sso demo 示例中部分不必要的代码内容。</li>
</ul>
</li>
<li>OAuth2：
<ul>
<li>新增：OAuth2 Client 前端测试页。   <strong>[重要]</strong></li>
<li>新增：<code>UnionId</code> 联合id 实现。   <strong>[重要]</strong></li>
<li>新增：<code>oauth2-server</code> 端前后台分离示例与文档。 fix: <a href="https://gitee.com/dromara/sa-token/issues/I9DQGA" target="_blank" rel="noopener nofollow">#I9DQGA</a>、<a href="https://gitee.com/dromara/sa-token/issues/I9W2RU" target="_blank" rel="noopener nofollow">#I9W2RU</a>    <strong>[重要]</strong></li>
<li>新增：<code>OIDC</code> 模式 <code>nonce</code> 随机数响应校验。 merge: <a href="https://gitee.com/dromara/sa-token/pulls/311" target="_blank" rel="noopener nofollow">pr311</a></li>
<li>修复：错误方法名 <code>deleteGrantScope(String state)</code> -&gt; <code>deleteState(String state)</code>。</li>
<li>修复：全局配置项 <code>sa-token.oauth2-server.oidc.iss</code> 无效的问题。</li>
<li>新增：回收 Refresh-Token 方法: <code>revokeRefreshToken</code>、<code>revokeRefreshTokenByIndex</code>。</li>
<li>新增：为 <code>CodeModel</code>、<code>AccessTokenModel</code>、<code>RefreshTokenModel</code>、<code>ClientTokenModel</code> 添加 <code>createTime</code> 字段，以记录该数据的创建时间。</li>
<li>新增：为 Access-Token、Client-Token 添加 <code>grantType</code> 字段，以记录该数据的授权类型。</li>
<li>新增：<code>SaOAuth2Util.getCode</code> 等方法，以更方便的获取、校验授权码。</li>
</ul>
</li>
<li>插件：
<ul>
<li>新增：新增 <code>sa-token-freemarker</code> 插件，整合 <code>Freemarker</code> 视图引擎。 fix: <a href="https://github.com/dromara/sa-token/issues/651" target="_blank" rel="noopener nofollow">#651</a>   <strong>[重要]</strong></li>
<li>新增：新增 <code>sa-token-spring-el</code> 插件，用于支持 SpEL 表达式注解鉴权。 fix: <a href="https://gitee.com/dromara/sa-token/issues/IB3GBB" target="_blank" rel="noopener nofollow">#IB3GBB</a>、fix: <a href="https://gitee.com/dromara/sa-token/issues/IAIXSL" target="_blank" rel="noopener nofollow">#IAIXSL</a>、fix: <a href="https://gitee.com/dromara/sa-token/issues/I9P24F" target="_blank" rel="noopener nofollow">#I9P24F</a>   <strong>[重要]</strong></li>
</ul>
</li>
<li>文档：
<ul>
<li>新增：新增 <code>MongoDB</code> 集成示例。 感谢 <code>@lilihao</code> 提供的示例。 merge: <a href="https://gitee.com/dromara/sa-token/pulls/322" target="_blank" rel="noopener nofollow">pr322</a>、<a href="https://github.com/dromara/Sa-Token/pull/667" target="_blank" rel="noopener nofollow">pr667</a>   <strong>[重要]</strong></li>
<li>新增：“fox说技术” 视频教程链接。</li>
<li>新增：“API接口参数签名”章节 视频讲解链接（B站抓蛙师）。</li>
<li>优化：文档首页首屏增加需求提交按钮。</li>
<li>其它：补全赞助者名单、<code>Dromara</code> 项目链接等信息。</li>
<li>新增：<code>SpringBoot3.x</code> 版本配置 Redis 注意事项。fix: <a href="https://github.com/dromara/Sa-Token/issues/688" target="_blank" rel="noopener nofollow">#688</a></li>
<li>新增：<code>gitcode</code> g-star badge 展示。</li>
<li>修复：<code>OAuth2</code> 滞后的配置信息示例。</li>
<li>新增：新增视频账号链接。</li>
<li>新增：新增团队成员展示。</li>
</ul>
</li>
</ul>
<p>更新日志在线文档直达链接：<a href="https://sa-token.cc/doc.html#/more/update-log" target="_blank" rel="noopener nofollow">https://sa-token.cc/doc.html#/more/update-log</a></p>
<h3 id="-其它">🌟 其它</h3>
<p>代码仓库地址：<a href="https://gitee.com/dromara/sa-token" target="_blank" rel="noopener nofollow">https://gitee.com/dromara/sa-token</a></p>
<p>框架功能结构图：</p>
<p><img src="https://oss.dev33.cn/sa-token/art/sa-token-js4.png" alt="js" loading="lazy"></p>
<p>本文章由 DeepSeek 参与指导与润色，感谢 DeepSeek 团队。</p>

</div>
<div class="clear"></div>

        </div>
        <p class="postfoot">
            posted on 
<span id="post-date" data-last-update-days="0.04581037961574074" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-06 15:12">2025-02-06 15:11</span>&nbsp;
<a href="https://www.cnblogs.com/shengzhang">孔明click33</a>&nbsp;
阅读(<span id="post_view_count">58</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18701080" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18701080);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18701080', targetLink: 'https://www.cnblogs.com/shengzhang/p/18701080', title: 'Sa-Token v1.40.0 发布 &amp;#128640;，来看看有没有令你心动的功能！' })">举报</a>

        </p>
    