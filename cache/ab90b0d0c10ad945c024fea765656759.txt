<!----> <meta itemprop="headline" content="不是吧，刚毕业几个月的前端，就写这么复杂的表格？？"> <meta itemprop="keywords" content="前端,JavaScript"> <meta itemprop="datePublished" content="2024-10-23T15:29:23.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="落课"> <meta itemprop="url" content="https://juejin.cn/user/152156253718208"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-7cdd11fb="">
            不是吧，刚毕业几个月的前端，就写这么复杂的表格？？
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-7cdd11fb=""><div class="author-info-box" data-v-7cdd11fb=""><div class="author-name" data-v-7cdd11fb=""><a href="/user/152156253718208/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-7cdd11fb=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    落课
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-7cdd11fb=""><time datetime="2024-10-23T15:29:23.000Z" title="Wed Oct 23 2024 15:29:23 GMT+0000 (Coordinated Universal Time)" class="time" data-v-7cdd11fb="">
                    2024-10-23
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-7cdd11fb=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-7cdd11fb=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-7cdd11fb=""></circle></svg> <span class="views-count" data-v-7cdd11fb="">
                    21,332
                  </span> <span class="read-time" data-v-7cdd11fb=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-7cdd11fb=""><rect width="16" height="16" fill="none" data-v-7cdd11fb=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-7cdd11fb=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-7cdd11fb=""></path></svg>
                    阅读8分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-7cdd11fb=""></div> <!----> <!----></div> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-7cdd11fb=""><div class="article-viewer markdown-body result"><h2 data-id="heading-0">前言</h2>
<p>最近负责了项目的一个大迭代，但是有一个非常复杂的表格，怎么个复杂法呢。正常来说，我们前端的一个表格大多是使用ui框架中的现成表格组件，顶多就在表格里面内嵌一些输入框，选择框，改改内嵌样式什么的！但是这个表格，就真的很牛逼，给大家分享一下（如下），顺便记录一下。然后本人很菜，是个刚毕业的前端彩笔，看个乐子就行。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/468f86f6f390487b8a8c3d5c129e3a98~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6JC96K--:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735528263&amp;x-signature=nFHC6CbcCYnbR9F5D43qouF1%2BZw%3D" alt="2.gif" loading="lazy">
乍一看是不是也挺简单，就这？反正对我来说，是开发的想死了，我写这个表格使用三个饿了么的表格组件。是的，三个表格组件实现成同一个表格，经常写表格的大佬们应该一看就知道痛点在哪里了。</p>
<blockquote>
<p>技术难点</p>
<ol>
<li>表格的协同滚动</li>
<li>左右两个表格是要能够左右滚动</li>
<li>表格悬浮展示操作栏</li>
<li>屏幕中间有个信息栏穿越整个表格的</li>
<li>改变el-table的内置样式</li>
</ol>
</blockquote>
<h2 data-id="heading-1">为什么我要使用三个表格</h2>
<p>如下图，左中右分别都是一个表格组件，为什么要这个写，细心的盆友可以看到1和3的表格是可以<strong>左右滚动</strong>的，从<strong>盒模型</strong>的角度来看，就不可能写在同一个元素中了，而且以我目前的工作经验来看，滚动好像只能使用原生的，顶多改变一下样式。至于2的话，应该是可以不用这个表格组件也能写的，但是我为了方便就这样写了，使用组件的话很多样式就可以cv了。
<img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/6d600c3fb0f448ab802de6fe34650495~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6JC96K--:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735528263&amp;x-signature=j3YULP45bUvXFWjyY8UrhXD4D0U%3D" alt="image.png" loading="lazy"></p>
<h2 data-id="heading-2">表格的协同滚动</h2>
<p>前面说过，这个表格是由三个表格组件实现的，所以这个三个表格之间的协同滚动就非常的重要了，<strong>比如我在1表格上下滚动，2和3表格也要对应的进行滚动</strong>，同理在2或者3表格中上下滚动，对应的其他两个表格也应该进行滚动。
还有就是<strong>1表格和3表格是有一个镜像左右滚动</strong>的。</p>
<p>这样听起来好像非常easy是吧，就是<strong>给每个表格都监听滚动事件，滚动的时候去改变其余的两个表格滚动条</strong>。对整体思路就是这样，但是我写着写着就<strong>死循环</strong>了哈哈哈哈哈。</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">
        * {
            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;
            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;
        }

        <span class="hljs-selector-class">.box</span> {
            <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;
            <span class="hljs-attribute">height</span>: <span class="hljs-number">450px</span>;
            <span class="hljs-comment">/* background-color: red; */</span>
            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;
            <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">200px</span>;
            <span class="hljs-attribute">display</span>: flex;
        }

        <span class="hljs-selector-class">.common</span> {
            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;
            <span class="hljs-attribute">height</span>: <span class="hljs-number">450px</span>;
            <span class="hljs-attribute">background-color</span>: blue;
            <span class="hljs-attribute">overflow</span>: auto;
        }

        <span class="hljs-selector-class">.middle</span> {
            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;
            <span class="hljs-attribute">background-color</span>: aqua;
            <span class="hljs-attribute">overflow</span>: auto;
        }

        <span class="hljs-selector-class">.content</span> {
            <span class="hljs-attribute">height</span>: <span class="hljs-number">1000px</span>;
        }
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"common"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"left"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"content"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 500px;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"middle"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"middle"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"content"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"common"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"right"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"content"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 500px;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
        <span class="hljs-keyword">const</span> leftO = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">"#left"</span>)
        <span class="hljs-keyword">const</span> middleO = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">"#middle"</span>)
        <span class="hljs-keyword">const</span> rightO = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">"#right"</span>)

        leftO.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"scroll"</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {
            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"左表格"</span>)
            <span class="hljs-keyword">const</span> top = e.<span class="hljs-property">target</span>.<span class="hljs-property">scrollTop</span>
            <span class="hljs-keyword">const</span> left = e.<span class="hljs-property">target</span>.<span class="hljs-property">scrollLeft</span>
            middleO.<span class="hljs-property">scrollTop</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">scrollTop</span>
            rightO.<span class="hljs-property">scrollTop</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">scrollTop</span>
            rightO.<span class="hljs-property">scrollLeft</span> = left
        },<span class="hljs-literal">true</span>)
        middleO.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"scroll"</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {
            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"中表格"</span>)
            <span class="hljs-keyword">const</span> top = e.<span class="hljs-property">target</span>.<span class="hljs-property">scrollTop</span>
            leftO.<span class="hljs-property">scrollTop</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">scrollTop</span>
            rightO.<span class="hljs-property">scrollTop</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">scrollTop</span>
        },<span class="hljs-literal">true</span>)
        rightO.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">"scroll"</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {
            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"右表格"</span>)
            <span class="hljs-keyword">const</span> left = e.<span class="hljs-property">target</span>.<span class="hljs-property">scrollLeft</span>
            <span class="hljs-keyword">const</span> top = e.<span class="hljs-property">target</span>.<span class="hljs-property">scrollTop</span>
            leftO.<span class="hljs-property">scrollTop</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">scrollTop</span>
            middleO.<span class="hljs-property">scrollTop</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">scrollTop</span>
            leftO.<span class="hljs-property">scrollLeft</span> = left
        },<span class="hljs-literal">true</span>)
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>
</code></pre>
<p>这是一个小demo，大家可以复制一下去本地跑一下，可以发现</p>
<blockquote>
<ol>
<li>不管是上下滚动，还是左右滚动，都是触发同一个滚动事件</li>
<li>去设置scrollTop或者scrollLeft也会触发滚动事件函数</li>
</ol>
</blockquote>
<p>也就是说，这三个表格，<strong>任意一个表格滚动其实都是触发了三个表格的滚动事件</strong>，当然这里是没有死循环的，因为我还有一个需求是在上下滚动的时候同时去改变左右滚动地方，所以就会导致<strong>他调用她，她反过来又调用他</strong>，所以就死循环了，后面是通过类似<strong>防抖</strong>的写法去解决的（如下vue3的写法），为什么说他是类似呢，因为它是三个事件函数去共用同一个防抖开关，所以他最后还是会多执行一次，有兴趣的大佬可以去试试。用这种写法也可以<strong>减少函数执行次数</strong>，也是一种<strong>性能优化</strong>哈哈哈哈。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// updateMassge和setLeftFn是两个方法就不具体写了</span>

<span class="hljs-comment">// 防抖开关</span>
<span class="hljs-keyword">const</span> flag = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>)
<span class="hljs-comment">// 左表格滚动事件</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">scrollLeftFn</span> = e =&gt; {
&nbsp; <span class="hljs-keyword">const</span> scrollLeft = e.<span class="hljs-property">target</span>.<span class="hljs-property">scrollLeft</span>
&nbsp; <span class="hljs-keyword">const</span> scrollTop = e.<span class="hljs-property">target</span>.<span class="hljs-property">scrollTop</span>
&nbsp; <span class="hljs-built_in">clearTimeout</span>(flag.<span class="hljs-property">value</span>)
&nbsp; flag.<span class="hljs-property">value</span> = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {
&nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"左表格执行"</span>)
    <span class="hljs-comment">// updateMassge这个方法是去更新信息栏的一个方法，后面会有提到</span>
&nbsp; &nbsp; <span class="hljs-title function_">updateMassge</span>(scrollTop)
&nbsp; &nbsp; middleTable.<span class="hljs-property">value</span>.<span class="hljs-title function_">setScrollTop</span>(scrollTop)
&nbsp; &nbsp; rightTable.<span class="hljs-property">value</span>.<span class="hljs-title function_">setScrollTop</span>(scrollTop)
    <span class="hljs-comment">// 设置左右滚动</span>
    <span class="hljs-title function_">setLeftFn</span>(scrollLeft)
&nbsp; })
}
<span class="hljs-comment">// 右表格滚动事件</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">scrollRightFn</span> = e =&gt; {
&nbsp; <span class="hljs-keyword">const</span> scrollLeft = e.<span class="hljs-property">target</span>.<span class="hljs-property">scrollLeft</span>
&nbsp; <span class="hljs-keyword">const</span> scrollTop = e.<span class="hljs-property">target</span>.<span class="hljs-property">scrollTop</span>
&nbsp; <span class="hljs-built_in">clearTimeout</span>(flag.<span class="hljs-property">value</span>)
&nbsp; flag.<span class="hljs-property">value</span> = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {
&nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"右表格执行"</span>)
    <span class="hljs-comment">// updateMassge这个方法是去更新信息栏的一个方法，后面会有提到</span>
&nbsp; &nbsp; <span class="hljs-title function_">updateMassge</span>(scrollTop)
&nbsp; &nbsp; middleTable.<span class="hljs-property">value</span>.<span class="hljs-title function_">setScrollTop</span>(scrollTop)
&nbsp; &nbsp; leftTable.<span class="hljs-property">value</span>.<span class="hljs-title function_">setScrollTop</span>(scrollTop)
    <span class="hljs-comment">// 设置左右滚动</span>
    <span class="hljs-title function_">setLeftFn</span>(scrollLeft)
&nbsp; })
}
<span class="hljs-comment">// 中间表格滚动事件</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">scrollMiddleFn</span> = e =&gt; {
&nbsp; <span class="hljs-keyword">const</span> scrollTop = e.<span class="hljs-property">target</span>.<span class="hljs-property">scrollTop</span>
&nbsp; <span class="hljs-built_in">clearTimeout</span>(flag.<span class="hljs-property">value</span>)
&nbsp; flag.<span class="hljs-property">value</span> = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {
&nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"中间表格执行"</span>)
    <span class="hljs-comment">// updateMassge这个方法是去更新信息栏的一个方法，后面会有提到</span>
&nbsp; &nbsp; <span class="hljs-title function_">updateMassge</span>(scrollTop)
&nbsp; })
}
</code></pre>
<h2 data-id="heading-3">信息栏该怎么实现呢</h2>
<p>我觉得这应该是这个表格最抓马的地方了，为什么呢，这个表格整体由三个表格组件<strong>横向排列</strong>形成的，所以想要横穿这三个表格放一个div，只能让它<strong>脱离文档流</strong>，去父相子绝的定位它。更恶心的地方是这个信息栏的位置是<strong>需要根据表格的数据去确定位置</strong>，如下图，信息栏中的数字是143.59，那它的位置就应该是在143和144之间。大佬们可以思考一下要怎么实现呢？</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/989530b617734dc09d35bbd5ce95a4a9~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6JC96K--:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735528263&amp;x-signature=E8ecYZIxeNe75KWj7Im8MyD%2Fqi0%3D" alt="image.png" loading="lazy">
我说说我是怎么做的。首先，前面说过只能通过<strong>绝对定位</strong>去脱离文档流，将它放到它应该放到的地方去。应该说是<strong>覆盖</strong>，对！在这个信息栏的下面其实是有一行假数据的。所以最重要是去<strong>正确的找到它的位置</strong>（top）然后在表格滚动的时候<strong>动态</strong>的去更新它的位置也就是前面说的 <em><strong>updateMassge</strong></em> 方法，以及<strong>如何控制它正确的显示和隐藏</strong>（display）因为在它滚动到顶部或者底部的时候应该把它隐藏掉。</p>
<h3 data-id="heading-4">寻找top</h3>
<p>如何寻找top呢，首先就是维护好一个下标变量，有点像之前写过的一个算法题，<strong>一个有顺序的数组，去找到他的插入位置，让这个数组依然有序</strong>，我一开始使用的findIndex写的，然后项目提测
后在一些特定的数据会有bug哈哈哈，因为在findIndex没找到的时候返回值是-1，就会有一些问题。其实就是一个<strong>二分法</strong>就能解决！</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">findInsertPosition</span>(<span class="hljs-params">nums, target</span>) {
  <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>;
  <span class="hljs-keyword">let</span> right = nums.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;
  <span class="hljs-keyword">while</span> (left &lt;= right) {
    <span class="hljs-keyword">let</span> mid = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(left + (right - left) / <span class="hljs-number">2</span>);
    <span class="hljs-keyword">if</span> (nums[mid] === target) {
      <span class="hljs-keyword">return</span> mid;
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) {
      left = mid + <span class="hljs-number">1</span>;
    } <span class="hljs-keyword">else</span> {
      right = mid - <span class="hljs-number">1</span>;
    }
  }
  <span class="hljs-keyword">return</span> left;
}
</code></pre>
<p>拿到这个下标索引之后，就是一些把他的计算公式写出来，我当时搁那拿本子画了好久哈哈哈，要找到表格滚动高度scrollTop和top的一个关系。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/b200685768f341b38e4dcd22f731d15b~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6JC96K--:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735528263&amp;x-signature=bFTAPtD4a%2B1Gzicmy%2Byj4fGnUWE%3D" alt="image.png" loading="lazy">
如图，可以得出</p>
<blockquote>
<p>index * 行高 + 表头高 = scrollTop + top</p>
</blockquote>
<p>所以</p>
<blockquote>
<p>top = (index * 行高 + 表头高) - scrollTop</p>
</blockquote>
<p>然后就是在<strong>滚动的事件函数中去动态的更新top</strong>以及去<strong>寻找出现信息栏和隐藏信息栏的临界点</strong>。</p>
<p>这个临界点也很好找，当<strong>top小于0或者大于表格高度</strong>的时候就隐藏，其他时候就显示</p>
<h2 data-id="heading-5">表格悬浮展示操作栏</h2>
<p>在前面的动态图中，可以看到这个表格，每<strong>悬浮一列最左边或者最右边都会出现一个操作栏</strong>，这个一开始不知道从何下手，因为我看element-ui中并没有提供能实现的这种效果的属性或者方法。不过还是给我想出来办法来了，不得不说我还是有点实力的哈哈哈哈哈。</p>
<p>其实实现起来也非常简单，就是通过css的hover选择器去实现的，大家看一下伪代码应该就能明白是怎么实现的。</p>
<h3 data-id="heading-6">dom结构</h3>
<pre><code class="hljs language-js" lang="js">&lt;el-table ref=<span class="hljs-string">"leftTable"</span> :data=<span class="hljs-string">"KZData"</span>&gt;
        <span class="hljs-comment">// 操作列</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">""</span> <span class="hljs-attr">fixed</span>=<span class="hljs-string">"left"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"100px"</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"center"</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">"scope"</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"operation-show red"</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"function-box"</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"图标地址"</span>/&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>买<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>卖<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span>
        <span class="hljs-comment">// 其他列</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item, index) in Column"</span>&gt;</span>
            {{ scope.row[item.prop] }}
        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span>
&lt;/el-table&gt;

</code></pre>
<h3 data-id="heading-7">样式</h3>
<pre><code class="hljs language-sass" lang="sass">// 悬浮操作栏
.operation-show {
&nbsp; display: none;
}

.el-table__body tr:hover &gt; td .operation-show {
&nbsp; display: block;
}
</code></pre>
<p>是吧，是不是非常简单，在最左边去<strong>固定一个列去存放这些操作图标</strong>，然后就是<strong>css选择器</strong>的使用，悬浮列的时候用选择器去选择到对应的div去改变他的display属性。</p>
<h2 data-id="heading-8">如何去改变饿了么组件的内部样式</h2>
<p>这些ui组件都是自带样式的，而我们要根据ui设计图去开发，所以学会去改变ui组件的内部样式是非常重要的，而一般我们都是通过<strong>样式穿透</strong>去改变的</p>
<p>举个例子，当我们要改变el-table的样式时，首先需要将这个ui组件用盒子去包裹一层，并给定一个类名，用这个类名进行样式穿透。</p>
<pre><code class="hljs language-js" lang="js">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">"left-table"</span>&gt;
&nbsp; &nbsp;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-table</span>&gt;</span>
&nbsp; &nbsp;<span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span></span>
&lt;/div&gt;
</code></pre>
<p>然后就是使用<code>::v-deep</code>去选定内置组件的类名或者标签名，然后在里面编写你想要的样式，至于内置组件的相关信息就需要使用<code>F12</code><strong>检查</strong>去查看了。</p>
<pre><code class="hljs language-sass" lang="sass">.left-table {
&nbsp; &nbsp; ::v-deep(.el-table-fixed-column--left) {
&nbsp; &nbsp; &nbsp; border-right: 1px solid red;
&nbsp; &nbsp; }
&nbsp; &nbsp; ::v-deep(.el-table-fixed-column--right) {
&nbsp; &nbsp; &nbsp; border-right: 1px solid red;
&nbsp; &nbsp; }
&nbsp; &nbsp; ::v-deep(.cell) {
&nbsp; &nbsp; &nbsp; padding: 0;
&nbsp; &nbsp; &nbsp; white-space: nowrap;
&nbsp; &nbsp; &nbsp; overflow: hidden;
&nbsp; &nbsp; &nbsp; text-overflow: ellipsis;
&nbsp; &nbsp; }
&nbsp; &nbsp; ::v-deep(.el-table thead th) {
&nbsp; &nbsp; &nbsp; font-weight: 400;
&nbsp; &nbsp; }
}
</code></pre>
<h2 data-id="heading-9">总结</h2>
<p>这个表格除了这些主要的功能，还有很多小小的功能，其实现在都还在优化，特别是性能卡顿问题，因为这个表格还要实时的更新数据，所以在数据大量更新的时候根本使用不了，卡死了，也不知道我能不能把这个卡顿的问题优化好。<strong>表格优化</strong>的文章 <a href="https://juejin.cn/post/7430026536215281698" target="_blank" title="https://juejin.cn/post/7430026536215281698">juejin.cn/post/743002…</a></p></div></div>