
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fanliang11/p/18845574" title="发布于 2025-04-24 22:44">
    <span role="heading" aria-level="2">凯亚物联网平台如何通过MQTT网络组件接入设备</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1 class="postTitle">一、概述</h1>
<p>&nbsp;&nbsp;&nbsp; 有人提议我用kestrel代替Dotnetty ，那是不可能的, 物联网平台MQTT，rtmp,rtsp,httpflv,tcp,udp,rpc 都是基于dotnetty实现，压测没有问题，每秒可以达到20w/s，当中因为SingleThreadEventExecutor的问题 导致每天内存会增加的问题，我会通过源码修复，修复完成我会开通MQTT,http,tcp,udp,coap端口提供给大家测试。</p>
<p>&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 凯亚 (Kayak) 是什么?</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 凯亚(Kayak)是基于.NET6.0软件环境下的surging微服务引擎进行开发的, 平台包含了微服务和物联网平台。支持异步和响应式编程开发，功能包含了物模型,设备,产品,网络组件的统一管理和微服务平台下的注册中心，服务路由，模块，中间服务等管理。还有多协议适配(TCP,MQTT,UDP,CoAP,HTTP,Grpc,websocket,rtmp,httpflv,webservice,等),通过灵活多样的配置适配能够接入不同厂家不同协议等设备。并且通过设备告警,消息通知,数据可视化等功能。能够让你能快速建立起微服务物联网平台系统。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp; 凯亚物联网平台：<a href="http://117.72.121.2:3100" rel="noopener nofollow" target="_blank">http://117.72.121.2:3100</a>（用户名：fanly&nbsp; 密码：123456）</p>
<p>&nbsp; &nbsp; 链路跟踪Skywalking V8:<a href="http://117.72.121.2:8080/" rel="noopener nofollow" target="_blank">http://117.72.121.2:8080/</a></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; surging 微服务引擎开源地址：<a href="https://github.com/fanliang11/surging" rel="noopener nofollow" target="_blank">https://github.com/fanliang11/surging</a>（后面surging 会移动到<a href="https://github.com/microsurging/" rel="noopener nofollow" target="_blank">microsurging</a>进行维护）</p>
<h2>二、网络组件</h2>
<p>1.编辑创建MQTT协议的网络组件，可以选择共享配置和独立配置(独立配置是集群模式)</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202504/192878-20250424220623952-458296128.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h2>三、自定义协议</h2>
<ul>
<li>如何创建自定义协议模块</li>
</ul>
<p>如果是网络编程开发，必然会涉及到协议报文的编码解码处理，那么对于平台也是做到了灵活处理，首先是协议模块创建，通过以下代码看出协议模块可以添加协议说明md文档, 身份鉴权处理，HTTP路由,消息编解码，元数据配置。下面一一介绍如何进行编写</p>
<div class="cnblogs_code">
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
<pre>  <span style="color: rgba(0, 0, 255, 1)">public <span style="color: rgba(0, 0, 255, 1)">class<span style="color: rgba(0, 0, 0, 1)"> Demo5ProtocolSupportProvider : ProtocolSupportProvider
    {<br>     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private readonly DefaultConfigMetadata _mqttConfig = new DefaultConfigMetadata(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Mqtt认证配置"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; , "secureId以及secureKey在创建设备产品或设备实例时进行配置.\r\n&nbsp;&nbsp;&nbsp; timestamp为当前时间戳(毫秒), 与服务器时间不能相差5分钟.\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; md5为32位, 不区分大小写")<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Add("secureId", "secureId", "用户唯一标识编号", StringType.Instance)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Add("secureKey", "secureKey", "密钥", StringType.Instance);<br>
        <span style="color: rgba(0, 0, 255, 1)">public <span style="color: rgba(0, 0, 255, 1)">override IObservable&lt;ProtocolSupport&gt;<span style="color: rgba(0, 0, 0, 1)"> Create(ProtocolContext context)
        {<br>&nbsp;&nbsp;&nbsp;　　       var support = new ComplexProtocolSupport();<br>&nbsp;&nbsp;&nbsp;           support.Id = "demo5";<br>&nbsp;&nbsp;&nbsp;           support.Name = "演示协议5";<br>&nbsp;&nbsp;&nbsp;           support.Description = "演示协议5";
      <span style="color: rgba(128, 0, 0, 1)"><span style="color: rgba(128, 0, 0, 1)"><span style="color: rgba(128, 0, 0, 1)"><span style="color: rgba(0, 0, 0, 1)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;support.AddDocument(MessageTransport.Mqtt, "Document/document-mqtt.md");
       　　　<span style="color: rgba(0, 0, 255, 1)"><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(0, 0, 255, 1)"><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(0, 0, 0, 1)">&nbsp;support.AddAuthenticator(MessageTransport.Mqtt, new DefaultAuthenticator());<br>&nbsp;support.AddRoutes(MessageTransport.Mqtt, new List&lt;TopicMessageCodec&gt;() {<br>&nbsp;&nbsp;&nbsp; TopicMessageCodec.DeviceOnline,<br>&nbsp;&nbsp;&nbsp;&nbsp; TopicMessageCodec.ReportProperty,<br>&nbsp;&nbsp;&nbsp;&nbsp; TopicMessageCodec.WriteProperty,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TopicMessageCodec.ReadProperty,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TopicMessageCodec.Event<br>&nbsp;}.Select(p =&gt; MqttDescriptor.Instance(p.Pattern)<br>&nbsp;&nbsp;&nbsp;&nbsp; .GroupName(p.Route.GroupName())<br>&nbsp;&nbsp;&nbsp;&nbsp; .Path(p.Pattern)<br>&nbsp;&nbsp;&nbsp;&nbsp; .ContentType(MediaType.ToString(MediaType.ApplicationJson))<br>&nbsp;&nbsp;&nbsp;&nbsp; .Description(p.Route.Description())<br>&nbsp;&nbsp;&nbsp;&nbsp; .Example(p.Route.Example())<br>).ToList());
   <span style="color: rgba(0, 0, 255, 1)"><span style="color: rgba(0, 0, 0, 1)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; support.AddMessageCodecSupport(MessageTransport.Mqtt, () =&gt; Observable.Return(new ScriptDeviceMessageCodec(support.Script)));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; support.AddConfigMetadata(MessageTransport.Mqtt, _mqttConfig);
       <span style="color: rgba(0, 0, 255, 1)">return<span style="color: rgba(0, 0, 0, 1)"> Observable.Return(support);
               
        }
     
     }                </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
</div>
<p>1. 添加协议说明文档如代码:<span style="color: rgba(0, 0, 0, 1)"> support.AddDocument(MessageTransport.Http, <span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">Document/document-http.md<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">);，文档仅支持<span class="c-color-gray2"> <span class="content-right_2s-H4">markdown文件，如下所示</span></span></span></span></span></span></span></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
<pre>### 认证说明<br><br>CONNECT报文:<br>```text<br>clientId: 设备ID<br>username: secureId+"&amp;"+timestamp<br>password: md5(secureId+"&amp;"+timestamp+"&amp;"+secureKey)<br>&nbsp;```<br><br>说明: secureId以及secureKey在创建设备产品或设备实例时进行配置.<br>&nbsp;&nbsp;&nbsp; timestamp为当前时间戳(毫秒), 与服务器时间不能相差5分钟.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; md5为32位, 不区分大小写.</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
</div>
<p>&nbsp;</p>
<p>2. 添加身份鉴权如代码:<span style="color: rgba(0, 0, 0, 1)"> <span style="color: rgba(128, 0, 0, 1)"><span style="color: rgba(128, 0, 0, 1)"><span style="color: rgba(128, 0, 0, 1)"><span style="color: rgba(0, 0, 0, 1)"> support.AddAuthenticator(MessageTransport.Http, new Demo5Authenticator()) ，自定义身份鉴权<span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(128, 0, 0, 1)"><span style="color: rgba(128, 0, 0, 1)"><span style="color: rgba(128, 0, 0, 1)"><span style="color: rgba(0, 0, 0, 1)">Demo5Authenticator 代码如下：<br></span></span></span></span></span></span></span></span></span></span></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
<pre>&nbsp;&nbsp;&nbsp; public class DefaultAuthenticator : IAuthenticator<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public IObservable&lt;AuthenticationResult&gt; Authenticate(IAuthenticationRequest request, IDeviceOperator deviceOperation)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var result = Observable.Return&lt;AuthenticationResult&gt;(default);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (request is DefaultAuthRequest)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var authRequest = request as DefaultAuthRequest; &nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var username = authRequest.UserName; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var password = authRequest.Password;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String[] arr = username.Split("&amp;");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (arr.Length &lt;= 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return Observable.Return(AuthenticationResult.Failure(StatusCode.CUSTOM_ERROR, "用户名格式错误"));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var requestSecureId = arr[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long.TryParse(arr[1], out long time);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (Math.Abs(Utility.CurrentTimeMillis() - time) &gt; TimeSpan.FromMinutes(10).TotalMilliseconds)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return Observable.Return(AuthenticationResult.Failure(StatusCode.CUSTOM_ERROR, "时间不一致"));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var configs = deviceOperation.GetConfigs("secureId", "secureKey").Subscribe(p =&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var secureId = p.GetValue("secureId").Convert&lt;string&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var secureKey = p.GetValue("secureKey").Convert&lt;string&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var encryptStr = $"{username}&amp;{secureKey}".GetMd5Hash();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (requestSecureId.Equals(secureId) &amp;&amp; encryptStr.Equals(password))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result= result.Publish(AuthenticationResult.Success(deviceOperation.GetDeviceId()));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result= result.Publish(AuthenticationResult.Failure(StatusCode.CUSTOM_ERROR, "验证失败,密钥错误"));<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; catch (Exception ex)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result = result.Publish(AuthenticationResult.Failure(StatusCode.CUSTOM_ERROR, "请求参数格式错误"));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result = Observable.Return&lt;AuthenticationResult&gt;(AuthenticationResult.Failure(StatusCode.CUSTOM_ERROR, "不支持请求参数类型"));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return result;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public IObservable&lt;AuthenticationResult&gt; Authenticate(IAuthenticationRequest request, IDeviceRegistry registry)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var result = Observable.Return&lt;AuthenticationResult&gt;(default);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var authRequest = request as DefaultAuthRequest;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; registry<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .GetDevice(authRequest.DeviceId)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Subscribe( p =&gt;Authenticate(request, p).Subscribe(authResult =&gt; result = result.Publish(authResult)));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return result;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; }</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://assets.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
</div>
<p>&nbsp;</p>
<p>3. 添加Http路由代码<span style="color: rgba(0, 0, 0, 1)">support.AddRoutes，那么如何配置呢，代码如下：</span></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre>    <span style="color: rgba(0, 0, 255, 1)">public <span style="color: rgba(0, 0, 255, 1)">static BasicMessageCodec ReportProperty =&gt;
 <span style="color: rgba(0, 0, 255, 1)">new BasicMessageCodec(<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">/*/properties/report<span style="color: rgba(128, 0, 0, 1)">", <span style="color: rgba(0, 0, 255, 1)">typeof(ReadPropertyMessage), route =&gt; route.GroupName(<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">属性上报<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">) <span style="color: rgba(128, 0, 0, 1)"><span style="color: rgba(128, 0, 0, 1)"><span style="color: rgba(128, 0, 0, 1)"><span style="color: rgba(0, 0, 0, 1)">
                     .Description(<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">上报物模型属性数据<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(0, 0, 0, 1)">)
                     .Example(<span style="color: rgba(128, 0, 0, 1)">"<span style="color: rgba(128, 0, 0, 1)">{\"properties\":{\"属性ID\":\"属性值\"}}<span style="color: rgba(128, 0, 0, 1)">"));</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<p>&nbsp;</p>
<br>
<p>4.添加元数据配置代码<span style="color: rgba(0, 0, 0, 1)"> support.AddConfigMetadata(MessageTransport.Http, _httpConfig);&nbsp; <span style="color: rgba(0, 0, 0, 1)">_httpConfig代码如下</span></span></p>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 0, 255, 1)">private <span style="color: rgba(0, 0, 255, 1)">readonly DefaultConfigMetadata _mqttConfig = <span style="color: rgba(0, 0, 255, 1)">new<span style="color: rgba(0, 0, 0, 1)"> DefaultConfigMetadata(
"Mqtt认证配置"<br>, "secureId以及secureKey在创建设备产品或设备实例时进行配置.\r\n&nbsp;&nbsp;&nbsp; timestamp为当前时间戳(毫秒), 与服务器时间不能相差5分钟.\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; md5为32位, 不区分大小写")<br>.Add("secureId", "secureId", "用户唯一标识编号", StringType.Instance)<br>.Add("secureKey", "secureKey", "密钥", StringType.Instance);<br></span></span></span></span></pre>
</div>
<ul>
<li>如何加载协议模块，协议模块包含了协议模块支持添加引用加载和上传热部署加载。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
</ul>
<p>&nbsp;&nbsp; 引用加载模块</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202504/192878-20250424222335958-1801810458.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;上传热部署协议模块</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202411/192878-20241105140335056-839278190.png" alt="" class="medium-zoom-image"></p>
<h2>&nbsp;四、设备网关</h2>
<p>创建设备网关</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202411/192878-20241105140841778-1098901347.png" alt="" class="medium-zoom-image"></p>
<h2>&nbsp;五、产品管理</h2>
<p>以下是添加产品。</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202504/192878-20250424222522714-528107363.png" alt="" loading="lazy"></p>
<p>&nbsp;&nbsp;设备接入</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202504/192878-20250424222713465-880042773.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h2>&nbsp;六、设备管理</h2>
<p>添加设备</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202504/192878-20250424222813744-1936818625.png" alt="" loading="lazy"></p>
<p>&nbsp;mqtt 认证配置</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202504/192878-20250424222919455-1871011856.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>创建告警阈值</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202504/192878-20250424223050797-966402374.png" alt="" loading="lazy"></p>
<h2>&nbsp;七、测试</h2>
<p>利用工具进行连接MQTT</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202504/192878-20250424223242512-152148358.png" alt="" loading="lazy"></p>
<p>&nbsp;然后可以在平台看到设备日志，看下连接失败成功情况</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202504/192878-20250424223400632-1870124718.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.23102005472106482" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-24 22:45">2025-04-24 22:44</span>&nbsp;
<a href="https://www.cnblogs.com/fanliang11">fanly11</a>&nbsp;
阅读(<span id="post_view_count">3</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18845574);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18845574', targetLink: 'https://www.cnblogs.com/fanliang11/p/18845574', title: '凯亚物联网平台如何通过MQTT网络组件接入设备' })">举报</a>
</div>
        