
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/huangSir-devops/p/18841063" title="发布于 2025-04-22 16:26">
    <span role="heading" aria-level="2">Linux系统中的软件管理</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="简介">简介</h2>
<p>Linux 系统中的软件管理体系主要包括软件包管理工具、软件仓库以及相关的依赖管理等方面。以下是详细介绍：</p>
<h3 id="软件包管理工具">软件包管理工具</h3>
<ul>
<li>
<p>dpkg：Debian 及其衍生系统（如 Ubuntu）使用的底层软件包管理工具。它用于安装、卸载、查询和管理.deb 格式的软件包。例如，使用 <code>dpkg -i package.deb</code> 命令可以安装名为 package.deb 的软件包。</p>
</li>
<li>
<p>apt：基于 dpkg 的高级软件包管理工具，提供了更方便的命令行接口和软件仓库管理功能。可以通过 <code>apt update</code> 命令更新软件包列表，使用 <code>apt install package_name</code> 命令安装软件包。</p>
</li>
<li>
<p>rpm：Red Hat 及其衍生系统（如 CentOS、Fedora）使用的软件包管理工具，用于管理.rpm 格式的软件包。例如，<code>rpm -ivh package.rpm</code> 命令可用于安装软件包。</p>
</li>
<li>
<p>yum：基于 rpm 的软件包管理工具，能自动处理软件包的依赖关系，从指定的软件仓库中下载并安装软件包。通过 yum install package_name 可以安装软件包，yum update 可以更新系统软件包。</p>
</li>
<li>
<p>dnf：新一代的包管理工具，在 Fedora 等系统中逐渐取代 yum。它具有更快的运行速度和更简洁的命令语法，功能与 yum 类似，例如 dnf install package_name 用于安装软件包。</p>
</li>
</ul>
<h3 id="软件仓库">软件仓库</h3>
<p>官方软件仓库：由 Linux 发行版官方维护，包含了经过测试和认证的软件包，具有较高的稳定性和安全性。例如，Ubuntu 的官方软件仓库包含了大量的开源软件，用户可以通过 apt 工具方便地获取和安装。</p>
<p>第三方软件仓库：一些软件开发商或社区会提供自己的软件仓库，以方便用户获取最新版本或特定的软件。例如，Google Chrome 浏览器的官方网站提供了适用于 Linux 系统的软件仓库，用户可以将其添加到系统中，通过包管理工具进行安装和更新。</p>
<h3 id="依赖管理">依赖管理</h3>
<p>软件包之间可能存在依赖关系，即一个软件包需要依赖其他软件包才能正常运行。Linux 的软件管理体系能够自动处理这些依赖关系。当使用包管理工具安装软件包时，它会检查软件包的依赖关系，并自动下载和安装所需的依赖软件包。例如，安装一个图形化应用程序时，可能需要依赖某些图形库，apt 或 yum 等工具会自动识别并安装这些依赖库。</p>
<h3 id="软件编译与安装">软件编译与安装</h3>
<p>除了使用软件包管理工具安装软件外，还可以从源代码编译安装软件。这种方式可以让用户根据自己的需求对软件进行定制，但需要用户具备一定的编译知识和工具。通常，需要先下载软件的源代码，然后使用 configure 脚本进行配置，再使用 make 命令进行编译，最后使用 make install 命令将软件安装到系统中。</p>
<h2 id="linux软件包安装方式">linux软件包安装方式</h2>
<ul>
<li>
<p>yum/apt：<code>yum/apt</code>命令替我们从网络下载软件包，替我们安装，如果软件包有依赖，<code>yum/apt</code>也会替我们下载并安装，但是需要网络</p>
</li>
<li>
<p>rpm/dpkg：手动下载rpm/deb包，<code>rpm/dpkg</code>命令手动安装，如果有依赖手动解决</p>
</li>
<li>
<p>二进制软件包：类似于绿色软件，解压即用，一般需要简单配置，如果有依赖也需要自己解决</p>
</li>
<li>
<p>编译安装：下载软件源代码，配置、编译安装、高度自定义，遇到依赖问题自己解决</p>
</li>
</ul>
<h2 id="软件安装命令之apt">软件安装命令之<code>apt</code></h2>
<p>apt 是 Debian、Ubuntu 等 Linux 发行版中常用的高级软件包管理工具，基于 dpkg 构建，它能自动处理软件包之间的依赖关系，从软件仓库中获取并安装软件。</p>
<h3 id="配置apt源">配置apt源</h3>
<p>将apt源替换成国内的，有助于下载、更新软件包时提速.<br>
参考：<a href="https://developer.aliyun.com/mirror/ubuntu?spm=a2c6h.13651102.0.0.3e221b11dJt3Ko" target="_blank" rel="noopener nofollow">https://developer.aliyun.com/mirror/ubuntu?spm=a2c6h.13651102.0.0.3e221b11dJt3Ko</a></p>
<p><strong>以Ubuntu22.04为例：</strong></p>
<pre><code># 修改/etc/apt/sources.list文件
vim /etc/apt/sources.list

# 将文件内容替换成下列内容
deb https://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse
deb-src https://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse

deb https://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse
deb-src https://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse

deb https://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse
deb-src https://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse

# deb https://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse
# deb-src https://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse

deb https://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse
deb-src https://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse

</code></pre>
<h3 id="apt之查询软件">apt之查询软件</h3>
<p>查询已经安装的所有软件</p>
<pre><code>apt list

# 查询已经安装的所有软件
apt list --installed

# 查询可升级的软件包
apt list --upgradable
</code></pre>
<p>查询指定的安装包</p>
<pre><code># 搜索已经安装的软件包，根据关键字模糊搜索
apt search [keywords]

# 查看指定软件包的详细信息，查看指定软件包的详细信息，如版本、依赖关系等。
apt show [package_name]

# 示例apt show [package_name]
root@master:~$ apt show nginx
Package: nginx
Version: 1.24.0-2ubuntu7.3
Priority: optional
Section: web
Origin: Ubuntu
Maintainer: Ubuntu Developers &lt;ubuntu-devel-discuss@lists.ubuntu.com&gt;
Original-Maintainer: Debian Nginx Maintainers &lt;pkg-nginx-maintainers@alioth-lists.debian.net&gt;
Bugs: https://bugs.launchpad.net/ubuntu/+filebug
Installed-Size: 1352 kB
Provides: httpd, httpd-cgi, nginx-abi-1.24.0-1
Depends: libc6 (&gt;= 2.34), libcrypt1 (&gt;= 1:4.1.0), libpcre2-8-0 (&gt;= 10.22), libssl3t64 (&gt;= 3.0.0), zlib1g (&gt;= 1:1.1.4), iproute2, nginx-common (= 1.24.0-2ubuntu7.3)
Breaks: nginx-core (&lt;&lt; 1.22.1-6~), nginx-extras (&lt;&lt; 1.22.1-6~), nginx-light (&lt;&lt; 1.22.1-6~)
Replaces: nginx-core (&lt;&lt; 1.22.1-6~), nginx-extras (&lt;&lt; 1.22.1-6~), nginx-light (&lt;&lt; 1.22.1-6~)
Homepage: https://nginx.org
Download-Size: 520 kB
APT-Sources: http://archive.ubuntu.com/ubuntu noble-updates/main amd64 Packages
Description: small, powerful, scalable web/proxy server
 Nginx ("engine X") is a high-performance web and reverse proxy server
 created by Igor Sysoev. It can be used both as a standalone web server
 and as a proxy to reduce the load on back-end HTTP or mail servers.

</code></pre>
<h3 id="apt之安装软件">apt之安装软件</h3>
<p>使用<code>apt install</code>可以安装软件，有<code>-y</code>选项，作用是自动回答所有询问为 “是（yes）”，避免在执行操作过程中出现交互式确认提示。</p>
<p>用法示例：</p>
<pre><code># 安装nginx
apt install -y nginx

# 批量安装
apt install -y nginx git jdk
</code></pre>
<p>清理缓存并重新安装<br>
有时，损坏的软件包可能是由于缓存文件损坏导致的。你可以清理 apt 的缓存，然后重新安装有问题的软件包。</p>
<pre><code># 清理缓存
apt clean
# 重新安装
apt install --reinstall [package_name]
</code></pre>
<h3 id="apt之更新软件">apt之更新软件</h3>
<p>更新软件包列表，确保获取到最新的软件包信息。这有助于解决因软件包信息过时导致的问题。</p>
<pre><code># 更新所有软件包列表
apt update -y
</code></pre>
<p>升级软件包</p>
<pre><code># 升级所有的已安装的软件包
apt upgrade -y

# 升级指定的软件包
apt upgrade [pakage_name]

# 系统全面升级,不仅会更新已安装的软件包，还会处理因依赖关系变化而需要升级的软件包。
apt full-upgrade
</code></pre>
<h3 id="apt之卸载软件">apt之卸载软件</h3>
<p>卸载软件包：卸载软件包但会保留配置文件。</p>
<pre><code>apt remove package_name
</code></pre>
<p>彻底卸载软件包：既卸载软件包，也会删除其配置文件。</p>
<pre><code>apt purge package_name
</code></pre>
<h3 id="apt之清理软件">apt之清理软件</h3>
<p>清理缓存：删除 /var/cache/apt/archives 目录下所有已下载的软件包文件，以释放磁盘空间。</p>
<pre><code>apt clean
</code></pre>
<p>自动清理：仅删除那些无法再被下载的软件包文件。</p>
<pre><code>apt autoclean
</code></pre>
<p>自动移除：移除那些因其他软件包的卸载而不再需要的依赖软件包。</p>
<pre><code>sudo apt autoremove
</code></pre>
<h2 id="dpkg">dpkg</h2>
<p><code>dpkg</code> 是 Debian 及其衍生系统（如 Ubuntu）使用的底层软件包管理工具，主要用于管理 <code>.deb</code> 格式的软件包</p>
<h3 id="dpkg之安装软件包">dpkg之安装软件包</h3>
<p>使用 <code>-i</code> 选项可以安装指定的 <code>.deb </code>软件包。</p>
<pre><code># 需要将 package.deb 替换为实际的软件包文件名。不过，dpkg 安装时不会自动处理软件包的依赖关系，如果软件包有未满足的依赖，安装可能会失败。
dpkg -i package.deb
</code></pre>
<h3 id="dpkg之卸载软件包">dpkg之卸载软件包</h3>
<p>移除软件包：使用 <code>-r</code> 选项可以移除指定的软件包，但会保留其配置文件。</p>
<pre><code>dpkg -r package_name
</code></pre>
<p>使用 <code>-P </code>选项可以彻底移除软件包及其配置文件。</p>
<pre><code>dpkg -P package_name
</code></pre>
<h3 id="dpkg查询软件包">dpkg查询软件包</h3>
<p><strong>列出已安装的软件包</strong><br>
使用 <code>-l</code> 选项可以列出系统中所有已安装的软件包，也可以通过指定软件包名称或通配符来列出特定的软件包。</p>
<pre><code># 列出所有的已安装的软件包
dpkg -l

# 查询指定的软件包
dpkg -l nginx
</code></pre>
<p>查看软件包详细信息：使用 <code>-s</code> 选项可以查看指定软件包的详细信息，包括版本、状态、依赖关系等。</p>
<pre><code>dpkg -s package_name
</code></pre>
<p>查找文件所属的软件包：使用 -S 选项可以查找指定文件是由哪个软件包安装的。</p>
<pre><code>dpkg -S /path/to/file
</code></pre>
<p>yum和rpm后续有时间再写入</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/huangSir-devops/" target="_blank">huangSir-devops</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/huangSir-devops/p/18841063" target="_blank">https://www.cnblogs.com/huangSir-devops/p/18841063</a>，微信Vac666666，欢迎交流</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.07730577268402777" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-22 16:27">2025-04-22 16:26</span>&nbsp;
<a href="https://www.cnblogs.com/huangSir-devops">huangSir-devops</a>&nbsp;
阅读(<span id="post_view_count">17</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18841063);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18841063', targetLink: 'https://www.cnblogs.com/huangSir-devops/p/18841063', title: 'Linux系统中的软件管理' })">举报</a>
</div>
        