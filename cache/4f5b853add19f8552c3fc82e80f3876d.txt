
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/noear/p/19010234" title="发布于 2025-07-29 09:51">
    <span role="heading" aria-level="2">Solon 集成 LiteFlow：轻量级工作流引擎的极简实践指南</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        本文介绍了轻量级流程引擎LiteFlow与Solon框架的集成实践。LiteFlow具有零学习成本、组件化设计和高性能等特点，支持多种流程类型。通过添加依赖、定义组件、配置规则等步骤，开发者可以快速实现业务流程编排。文章还展示了异步并行、嵌套子流程等高级特性，以及监控调试方法，建议遵循上下文设计、组件规范和异常处理等最佳实践。该方案适用于微服务架构，能实现可视化编排和热插拔组件，满足高并发场景需求。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在复杂的业务场景中，工作流引擎是解耦业务逻辑、提升可维护性的核心组件。传统的BPM引擎（如 Activiti、Flowable）虽功能强大，但学习曲线陡峭且资源消耗较大。LiteFlow 作为一款国产轻量级规则引擎/流程引擎，以其零学习成本、高可扩展性和极致性能成为微服务架构下的理想选择。本文将详细讲解 Solon 集成 LiteFlow 的全过程，助你轻松驾驭轻量级流程编排。</p>
<h2 id="一liteflow核心优势">一、LiteFlow核心优势</h2>
<ul>
<li>轻量嵌入：仅需2个核心JAR包，无数据库依赖</li>
<li>规则驱动：基于EL表达式的链式规则配置，变更实时生效</li>
<li>组件化设计：业务逻辑封装为可复用组件，支持热插拔</li>
<li>高性能：无反射执行，单线程每秒可处理万级任务</li>
<li>多类型支持：顺序流、条件分支、循环、嵌套、异步并行</li>
</ul>
<h2 id="二solon-集成实战">二、Solon 集成实战</h2>
<h3 id="准备添加依赖包">准备：添加依赖包</h3>
<pre><code class="language-xml">&lt;!-- pom.xml 依赖 --&gt;
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.yomahub&lt;/groupId&gt;
        &lt;artifactId&gt;liteflow-solon-plugin&lt;/artifactId&gt;
        &lt;version&gt;最新版&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<h3 id="步骤1定义流程组件">步骤1：定义流程组件</h3>
<pre><code>import com.yomahub.liteflow.core.NodeComponent;
import org.noear.solon.annotation.Managed;

// 普通组件示例
@Managed("paymentAction")
public class PaymentAction extends NodeComponent {
    @Override
    public void process() {
        PaymentContext context = this.getContextBean(PaymentContext.class);
        // 执行支付逻辑
        System.out.println("处理支付, 订单:" + context.getOrderId());
    }
}

// 条件组件示例（用于分支判断）
@Managed("userCheck")
public class UserCheck extends NodeComponent {
    @Override
    public void process() {
        UserContext context = this.getContextBean(UserContext.class);
        if(context.isVip()) {
            this.setIsEnd(true);  // 终止流程
        }
    }
}
</code></pre>
<h3 id="步骤2配置流程规则">步骤2：配置流程规则</h3>
<p><code>resources/flow.yml</code> 配置EL表达式规则：</p>
<pre><code class="language-yaml">liteflow:
  rule-source: config/flow.el.xml
</code></pre>
<p><code>resources/config/flow.el.xml</code>：</p>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;flow&gt;
    &lt;chain name="orderProcess"&gt;
        THEN(
            initOrder, 
            WHEN(
                checkInventory, 
                checkUserCredit
            ),
            SWITCH(choosePayWay).TO(
                CASE(aliPay).DO(aliPayAction),
                CASE(wechatPay).DO(wechatPayAction)
            ),
            AFTER(paymentAction).WHEN(userCheck)
        );
    &lt;/chain&gt;
&lt;/flow&gt;
</code></pre>
<h3 id="步骤3初始化上下文并执行流程">步骤3：初始化上下文并执行流程</h3>
<pre><code class="language-java">import com.yomahub.liteflow.core.FlowExecutor;
import com.yomahub.liteflow.flow.LiteflowResponse;
import org.noear.solon.annotation.*;

@Controller
public class OrderController {

    @Inject
    private FlowExecutor flowExecutor;

    @Post
    @Mapping("/submitOrder")
    public String submitOrder(@Body OrderDTO order) {
        OrderContext context = new OrderContext();
        context.setOrderId(order.getId());
        context.setAmount(order.getAmount());
        
        LiteflowResponse response = flowExecutor.execute2Resp(
            "orderProcess", 
            context, 
            OrderContext.class
        );
        
        return response.isSuccess() ? "订单成功" : "流程失败";
    }
}
</code></pre>
<h2 id="三高级特性应用">三、高级特性应用</h2>
<h3 id="异步并行执行">异步并行执行</h3>
<pre><code class="language-xml">&lt;!-- 配置并行节点 --&gt;
&lt;chain name="parallelChain"&gt;
    THEN(
        a, 
        WHEN(b, c, d),  &lt;!-- b,c,d并行执行 --&gt;
        e
    );
&lt;/chain&gt;
</code></pre>
<h3 id="嵌套子流程">嵌套子流程</h3>
<pre><code class="language-xml">&lt;chain name="mainFlow"&gt;
    THEN(prepare, SUB(orderProcess), notify);
&lt;/chain&gt;
</code></pre>
<h3 id="组件降级处理">组件降级处理</h3>
<pre><code class="language-java">import com.yomahub.liteflow.core.NodeComponent;
import org.noear.solon.annotation.Managed;

@Managed("paymentAction")
public class PaymentAction extends NodeComponent {
    @Inject
    FallbackService fallbackService;
    
    @Override
    public void process() {...}

    @Override
    public void onError() {
        // 支付失败时执行补偿逻辑
        fallbackService.compensate();
    }
}
</code></pre>
<h3 id="规则热更新">规则热更新</h3>
<pre><code class="language-java">import com.yomahub.liteflow.flow.FlowBus;
import org.noear.solon.annotation.Managed;
import org.noear.solon.core.bean.LifecycleBean;

// 动态添加规则
FlowBus.addChain("newChain", "THEN(a,b,c)");

// 监听规则变化
@Managed
public class FlowConfig implements LifecycleBean {
    @Override
    public void postStart() throws Throwable {
        FileWatcher.watch(Paths.get("config/flow"),
                () -&gt; FlowBus.reloadRule());
    }
}
</code></pre>
<h2 id="四监控与调试">四、监控与调试</h2>
<h3 id="流程跟踪">流程跟踪</h3>
<pre><code class="language-java">LiteflowResponse response = flowExecutor.execute2Resp(
    "orderProcess", 
    context, 
    OrderContext.class,
    // 开启执行链路跟踪
    SlotCallbackBuilder.builder().build()
);

System.out.println(response.getExecuteStepStr());
</code></pre>
<p>输出示例：<code>initOrder[✓] =&gt; checkInventory[✓] =&gt; checkUserCredit[✓] =&gt; ...</code></p>
<h3 id="可视化监控需企业版">可视化监控（需企业版）</h3>
<pre><code class="language-yaml">liteflow:
  monitor:
    enable-log: true
    queue-limit: 200
    delay: 30
    period: 120
</code></pre>
<h2 id="五最佳实践建议">五、最佳实践建议</h2>
<h3 id="上下文设计原则">上下文设计原则</h3>
<ul>
<li>使用独立Context对象传递流程数据</li>
<li>避免在组件中操作数据库事务（应在Service层控制）</li>
</ul>
<h3 id="组件规范">组件规范</h3>
<ul>
<li>单个组件代码不超过200行</li>
<li>组件命名采用"业务域+操作"格式（如：stockDeduct）</li>
</ul>
<h3 id="异常处理">异常处理</h3>
<ul>
<li>业务异常通过 throw BusinessException 中断流程</li>
<li>系统异常自动触发 onError 回调</li>
</ul>
<h3 id="规则管理进阶">规则管理进阶</h3>
<pre><code class="language-java">// 从数据库加载规则
@Managed
public class DBRuleLoader implements RuleSource {
    @Override
    public String loadRules() {
        return ruleMapper.selectByApp("order-service");
    }
}
</code></pre>
<h2 id="结语">结语</h2>
<p>通过 Solon 集成 LiteFlow，我们实现了：</p>
<ul>
<li>业务可视化编排：复杂流程通过EL表达式清晰定义</li>
<li>组件热插拔：新增业务节点无需停服</li>
<li>极致性能：单机万级TPS满足高并发场景</li>
<li>灵活扩展：支持自定义节点、拦截器、上下文</li>
</ul>
<p>在微服务架构下，LiteFlow 的轻量级特性使其成为业务流程编排的理想选择。其简洁的API设计让开发者能快速上手，而强大的异步并行、嵌套流程等特性又能支撑复杂业务场景。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-29 09:51">2025-07-29 09:51</span>&nbsp;
<a href="https://www.cnblogs.com/noear">带刺的坐椅</a>&nbsp;
阅读(<span id="post_view_count">230</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19010234);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19010234', targetLink: 'https://www.cnblogs.com/noear/p/19010234', title: 'Solon 集成 LiteFlow：轻量级工作流引擎的极简实践指南' })">举报</a>
</div>
        