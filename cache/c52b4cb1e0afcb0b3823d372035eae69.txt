
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/changelzj/p/18686857" title="发布于 2025-01-22 22:00">
    <span role="heading" aria-level="2">开源项目芋道源码解析 [开篇]</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><strong><a href="https://blog.liuzijian.com/post/source-code-about-ruoyi-vue-pro.html" target="_blank" rel="noopener nofollow">文章首发于我的博客：https://blog.liuzijian.com/post/source-code-about-ruoyi-vue-pro.html</a></strong></p>
<h2 id="1引言">1.引言</h2>
<p>芋道(又名yudao，ruoyi-vue-pro)是一个基于spring-boot框架的单体Java后端开源项目，拥有基于RBAC模型的组织架构管理、CRM、ERP、商城、代码生成、AI等多个功能模块。封装了多租户、数据权限、工作流、OAuth，邮件、短信、定时任务、日志、链路追踪等多种技术和业务组件。其在GitHub上的地址是：<a href="https://github.com/YunaiV/ruoyi-vue-pro" target="_blank" rel="noopener nofollow">https://github.com/YunaiV/ruoyi-vue-pro</a></p>
<p>因工作中会用到这个框架，为了更好的定制和更新功能，所以决定把它的源码核心部分都读一遍，博客持续更新，边学习，边输出，做知识积累整理输出。对学过的做过的东西，有个痕迹与存档，可以随时做归纳总结。</p>
<p>本文基于<code>2.4.0-jdk8-SNAPSHOT</code>版本的源码。</p>
<h2 id="2项目总体结构">2.项目总体结构</h2>
<p>项目基于传统的maven构建，大致结构如下，整个项目是多模块结构，分为1个父模块和多个子模块。</p>
<pre><code>ruoyi-vue-pro [yudao]
    │
    ├── yudao-dependencies
    │     └── pom.xml
    │
    ├── yudao-framework
    │     ├── yudao-common
    │     │       └── src
    │     │       └── pom.xml
    │     ├── yudao-spring-boot-starter-biz-xxxxxxx
    │     │       └── src
    │     │       └── pom.xml 
    │     ├── yudao-spring-boot-starter-xxxxxxx
    │     │       └── src
    │     │       └── pom.xml 
    │     └── pom.xml   
    │
    │── yudao-module-aaa   
    │     ├── yudao-module-aaa-api
    │     │       └── src
    │     │       └── pom.xml       
    │     ├── yudao-module-aaa-biz
    │     │       └── src
    │     │       └── pom.xml  
    │     └── pom.xml              
    │
    │── yudao-module-bbb   
    │     ├── yudao-module-bbb-api
    │     │       └── src
    │     │       └── pom.xml       
    │     ├── yudao-module-bbb-biz
    │     │       └── src
    │     │       └── pom.xml  
    │     └── pom.xml
    │        
    │── yudao-server
    │     └── src
    │     └── pom.xml
    │
    └── pom.xml
</code></pre>
<h2 id="3模块的结构功能和依赖关系">3.模块的结构，功能和依赖关系</h2>
<h3 id="31-root">3.1 root</h3>
<ul>
<li>最外层的/pom.xml作为root模块的配置，通过<code>&lt;modules/&gt;</code>包含了yudao-framework，yudao-module-xxxxxx，yudao-server，yudao-dependencies等众多模块。</li>
</ul>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    ......
    &lt;modules&gt;
        &lt;module&gt;yudao-dependencies&lt;/module&gt;
        &lt;module&gt;yudao-framework&lt;/module&gt;
        &lt;!-- Server 主项目 --&gt;
        &lt;module&gt;yudao-server&lt;/module&gt;
        &lt;!-- 各种 module 拓展 --&gt;
        &lt;module&gt;yudao-module-system&lt;/module&gt;
        &lt;module&gt;yudao-module-infra&lt;/module&gt;
    &lt;/modules&gt;
    ......
&lt;/project&gt;
</code></pre>
<ul>
<li>root模块通过引用负责统一依赖版本的模块yudao-dependencies来将依赖的版本号传递给所有子模块，从而统一整个项目的依赖版本</li>
</ul>
<pre><code class="language-xml">&lt;dependencyManagement&gt;
   &lt;dependencies&gt;
       &lt;dependency&gt;
           &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
           &lt;artifactId&gt;yudao-dependencies&lt;/artifactId&gt;
           &lt;version&gt;${revision}&lt;/version&gt;
           &lt;type&gt;pom&lt;/type&gt;
           &lt;scope&gt;import&lt;/scope&gt;
       &lt;/dependency&gt;
   &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
</code></pre>
<ul>
<li>
<p>root模块使用<code>&lt;version&gt;${revision}&lt;/version&gt;</code>来设置自身的版本号，子模块的<code>&lt;version/&gt;</code>如果也设置为<code>${revision}</code>的话，就继承了root模块的版本号了，子模块的子模块也是一样的道理，这样整个工程所有子孙模块的版本号就都统一起来了，需要升级版本时，只需要在root模块的pom.xml文件中，把<code>&lt;properties/&gt;</code>里面的版本号一改，整个工程所有子孙模块的版本号便全部跟着变了。</p>
<p>例：<br>
/pom.xml</p>
</li>
</ul>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;

   &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
   &lt;artifactId&gt;yudao&lt;/artifactId&gt;
   &lt;version&gt;${revision}&lt;/version&gt;
   &lt;packaging&gt;pom&lt;/packaging&gt;

   ... ...

   &lt;properties&gt;
       &lt;revision&gt;2.4.0-jdk8-SNAPSHOT&lt;/revision&gt;
   &lt;/properties&gt;
&lt;/project&gt;
</code></pre>
<p>yudao-module-system/pom.xml</p>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
   &lt;parent&gt;
       &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
       &lt;artifactId&gt;yudao&lt;/artifactId&gt;
       &lt;version&gt;${revision}&lt;/version&gt;
   &lt;/parent&gt;
   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
   &lt;modules&gt;
       &lt;module&gt;yudao-module-system-api&lt;/module&gt;
       &lt;module&gt;yudao-module-system-biz&lt;/module&gt;
   &lt;/modules&gt;
   &lt;artifactId&gt;yudao-module-system&lt;/artifactId&gt;
   &lt;packaging&gt;pom&lt;/packaging&gt;

   &lt;name&gt;${project.artifactId}&lt;/name&gt;
   &lt;description&gt;
       system 模块下，我们放通用业务，支撑上层的核心业务。
       例如说：用户、部门、权限、数据字典等等
   &lt;/description&gt;

&lt;/project&gt;
</code></pre>
<p>yudao-module-system/yudao-module-system-api/pom.xml</p>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
   
   &lt;parent&gt;
       &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
       &lt;artifactId&gt;yudao-module-system&lt;/artifactId&gt;
       &lt;version&gt;${revision}&lt;/version&gt;
   &lt;/parent&gt;
   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
   &lt;artifactId&gt;yudao-module-system-api&lt;/artifactId&gt;
   &lt;packaging&gt;jar&lt;/packaging&gt;

   &lt;name&gt;${project.artifactId}&lt;/name&gt;
   &lt;description&gt;
       system 模块 API，暴露给其它模块调用
   &lt;/description&gt;

   ......

&lt;/project&gt;

</code></pre>
<ul>
<li>通过插件<code>org.codehaus.mojo:flatten-maven-plugin</code>来防止不必要的依赖传递</li>
</ul>
<pre><code class="language-xml">&lt;build&gt;
   &lt;pluginManagement&gt;
       &lt;plugins&gt;
           &lt;plugin&gt;
               &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
               &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
               &lt;version&gt;${maven-surefire-plugin.version}&lt;/version&gt;
           &lt;/plugin&gt;

           &lt;plugin&gt;
               &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
               &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
               &lt;version&gt;${maven-compiler-plugin.version}&lt;/version&gt;
               &lt;configuration&gt;
                   &lt;annotationProcessorPaths&gt;
                       &lt;path&gt;
                           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                           &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;
                           &lt;version&gt;${spring.boot.version}&lt;/version&gt;
                       &lt;/path&gt;
                       &lt;path&gt;
                           &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
                           &lt;artifactId&gt;lombok&lt;/artifactId&gt;
                           &lt;version&gt;${lombok.version}&lt;/version&gt;
                       &lt;/path&gt;
                       &lt;path&gt;
                           &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;
                           &lt;artifactId&gt;mapstruct-processor&lt;/artifactId&gt;
                           &lt;version&gt;${mapstruct.version}&lt;/version&gt;
                       &lt;/path&gt;
                   &lt;/annotationProcessorPaths&gt;
               &lt;/configuration&gt;
           &lt;/plugin&gt;
           &lt;plugin&gt;
               &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
               &lt;artifactId&gt;flatten-maven-plugin&lt;/artifactId&gt;
           &lt;/plugin&gt;
       &lt;/plugins&gt;
   &lt;/pluginManagement&gt;

   &lt;plugins&gt;
       &lt;plugin&gt;
           &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
           &lt;artifactId&gt;flatten-maven-plugin&lt;/artifactId&gt;
           &lt;version&gt;${flatten-maven-plugin.version}&lt;/version&gt;
           &lt;configuration&gt;
               &lt;flattenMode&gt;oss&lt;/flattenMode&gt;
               &lt;updatePomFile&gt;true&lt;/updatePomFile&gt;
           &lt;/configuration&gt;
           &lt;executions&gt;
               &lt;execution&gt;
                   &lt;goals&gt;
                       &lt;goal&gt;flatten&lt;/goal&gt;
                   &lt;/goals&gt;
                   &lt;id&gt;flatten&lt;/id&gt;
                   &lt;phase&gt;process-resources&lt;/phase&gt;
               &lt;/execution&gt;
               &lt;execution&gt;
                   &lt;goals&gt;
                       &lt;goal&gt;clean&lt;/goal&gt;
                   &lt;/goals&gt;
                   &lt;id&gt;flatten.clean&lt;/id&gt;
                   &lt;phase&gt;clean&lt;/phase&gt;
               &lt;/execution&gt;
           &lt;/executions&gt;
       &lt;/plugin&gt;
   &lt;/plugins&gt;

&lt;/build&gt;
</code></pre>
<h3 id="32-yudao-dependencies">3.2 yudao-dependencies</h3>
<p>这个模块内仅有一个pom.xml文件，该模块的作用仅仅是统一整个项目的依赖版本，因为yudao-dependencies模块没有指定<code>&lt;parent/&gt;</code>，因此不能从父(即root)模块继承<code>${revision}</code>，需要在自己的<code>&lt;properties/&gt;</code>里面维护自己的<code>${revision}</code>版本供自己引用，版本号的值一般要与root模块中的版本号要保持一致。</p>
<p>{% note warning %}<br>
yudao-dependencies模块并不是root模块的子模块，因为如果root模块成了yudao-dependencies的父模块的同时还引用了子模块yudao-dependencies的话，就会导致循环引用，因此yudao-dependencies没有指定<code>&lt;parent/&gt;</code>，只是由root模块通过<code>&lt;modules/&gt;</code>包含进去进行代管，root模块构建时，yudao-dependencies会一并构建。</p>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
    &lt;artifactId&gt;yudao-dependencies&lt;/artifactId&gt;
    &lt;version&gt;${revision}&lt;/version&gt;
    &lt;packaging&gt;pom&lt;/packaging&gt;

    ... ...

    &lt;properties&gt;
        &lt;revision&gt;2.4.0-jdk8-SNAPSHOT&lt;/revision&gt;
    &lt;/properties&gt;
    ... ...
&lt;/project&gt;
</code></pre>
<p>yudao-dependencies里面只有一个pom.xml文件，其使用<code>&lt;dependencyManagement/&gt;</code>声明了整个项目所需要的依赖，并被root模块引入，从而统一整个工程的依赖版本。</p>
<p>yudao-dependencies不仅通过引用springframework，spring-boot-dependencies等type为pom的依赖项来继承第三方框架的版本，还规定了项目自身封装的一些框架(yudao-framework)的版本号。</p>
<pre><code class="language-xml">&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-framework-bom&lt;/artifactId&gt; &lt;!-- JDK8 版本独有：保证 Spring Framework 尽量高 --&gt;
            &lt;version&gt;${spring.framework.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;
            &lt;artifactId&gt;spring-security-bom&lt;/artifactId&gt; &lt;!-- JDK8 版本独有：保证 Spring Security 尽量高 --&gt;
            &lt;version&gt;${spring.security.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring.boot.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
            &lt;artifactId&gt;yudao-spring-boot-starter-biz-tenant&lt;/artifactId&gt;
            &lt;version&gt;${revision}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
            &lt;artifactId&gt;yudao-spring-boot-starter-biz-data-permission&lt;/artifactId&gt;
            &lt;version&gt;${revision}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
            &lt;artifactId&gt;yudao-spring-boot-starter-biz-ip&lt;/artifactId&gt;
            &lt;version&gt;${revision}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
            &lt;artifactId&gt;yudao-common&lt;/artifactId&gt;
            &lt;version&gt;${revision}&lt;/version&gt;
        &lt;/dependency&gt;

        ... ...

    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
</code></pre>
<p>通过插件<code>org.codehaus.mojo:flatten-maven-plugin</code>来防止不必要的依赖传递</p>
<pre><code class="language-xml">&lt;build&gt;
    &lt;plugins&gt;
        &lt;!-- 统一 revision 版本 --&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
            &lt;artifactId&gt;flatten-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${flatten-maven-plugin.version}&lt;/version&gt;
            &lt;configuration&gt;
                &lt;flattenMode&gt;bom&lt;/flattenMode&gt;
                &lt;updatePomFile&gt;true&lt;/updatePomFile&gt;
            &lt;/configuration&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;flatten&lt;/goal&gt;
                    &lt;/goals&gt;
                    &lt;id&gt;flatten&lt;/id&gt;
                    &lt;phase&gt;process-resources&lt;/phase&gt;
                &lt;/execution&gt;
                &lt;execution&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;clean&lt;/goal&gt;
                    &lt;/goals&gt;
                    &lt;id&gt;flatten.clean&lt;/id&gt;
                    &lt;phase&gt;clean&lt;/phase&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>
<h3 id="33-yudao-framework">3.3 yudao-framework</h3>
<p>该模块内主要是需要用到的公共依赖和一些对常用框架和功能组件的封装，大致结构如下</p>
<pre><code>yudao-framework
      │
      │── yudao-common
      │     ├─ src
      │     │   └─ main
      │     │       └─ java
      │     │            └─ cn.iocoder.yudao.framework.common
      │     │                  └─ core
      │     │                  └─ enums
      │     │                  └─ exception
      │     │                  └─ pojo
      │     │                  └─ util
      │     │                  └─ validation
      │     │
      │     └─ pom.xml
      │
      │── yudao-spring-boot-starter-xxxxxx
      │     ├─ src
      │     │   └─ main
      │     │       ├─ java
      │     │       |    ├─ cn.iocoder.yudao.framework.xxxxxx 
      │     │       |    │     └─ config
      │     │       |    │     └─ core
      │     │       |    │     └─ aaa
      │     │       |    │          
      │     │       |    └─ bbb.ccc.ddd                      
      │     │       │
      │     │       └─ resources
      │     │            └─ META-INF.spring
      │     │                  └─ org.springframework.boot.autoconfigure.AutoConfiguration.imports
      │     │                               
      │     └── pom.xml 
      │
      └── pom.xml
</code></pre>
<p>yudao-framework下没有其他依赖，只是简单的将所有封装的组件聚合起来</p>
<p>yudao-framework/pom.xml</p>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;yudao&lt;/artifactId&gt;
        &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
        &lt;version&gt;${revision}&lt;/version&gt;
    &lt;/parent&gt;
    &lt;packaging&gt;pom&lt;/packaging&gt;
    &lt;modules&gt;
        &lt;module&gt;yudao-common&lt;/module&gt;
        &lt;module&gt;yudao-spring-boot-starter-mybatis&lt;/module&gt;
        &lt;module&gt;yudao-spring-boot-starter-redis&lt;/module&gt;
        &lt;module&gt;yudao-spring-boot-starter-web&lt;/module&gt;
        &lt;module&gt;yudao-spring-boot-starter-security&lt;/module&gt;
        &lt;module&gt;yudao-spring-boot-starter-websocket&lt;/module&gt;

        &lt;module&gt;yudao-spring-boot-starter-monitor&lt;/module&gt;
        &lt;module&gt;yudao-spring-boot-starter-protection&lt;/module&gt;
        &lt;module&gt;yudao-spring-boot-starter-job&lt;/module&gt;
        &lt;module&gt;yudao-spring-boot-starter-mq&lt;/module&gt;

        &lt;module&gt;yudao-spring-boot-starter-excel&lt;/module&gt;
        &lt;module&gt;yudao-spring-boot-starter-test&lt;/module&gt;

        &lt;module&gt;yudao-spring-boot-starter-biz-tenant&lt;/module&gt;
        &lt;module&gt;yudao-spring-boot-starter-biz-data-permission&lt;/module&gt;
        &lt;module&gt;yudao-spring-boot-starter-biz-ip&lt;/module&gt;
    &lt;/modules&gt;

    &lt;artifactId&gt;yudao-framework&lt;/artifactId&gt;
    &lt;description&gt;
        该包是技术组件，每个子包，代表一个组件。每个组件包括两部分：
            1. core 包：是该组件的核心封装
            2. config 包：是该组件基于 Spring 的配置

        技术组件，也分成两类：
            1. 框架组件：和我们熟悉的 MyBatis、Redis 等等的拓展
            2. 业务组件：和业务相关的组件的封装，例如说数据字典、操作日志等等。
        如果是业务组件，Maven 名字会包含 biz
    &lt;/description&gt;
    &lt;url&gt;https://github.com/YunaiV/ruoyi-vue-pro&lt;/url&gt;

&lt;/project&gt;
</code></pre>
<p>yudao-common模块封装了一些项目公共的枚举类，异常类，公共的实体类，和一些工具类，在这个项目中通常会被其他组件模块(yudao-spring-boot-starter-xxxx)和业务模块的api模块(yudao-module-xxxxx-api)所引用。</p>
<p>除了yudao-common外其余的都是封装的框架功能模块，模块名格式为yudao-spring-boot-starter-xxxx，分为业务组件和技术组件。技术组件模块名中没有biz，业务组件是有的。业务组件通常会引用业务模块的api模块(yudao-module-xxxxx-api)</p>
<p>例如数据权限yudao-spring-boot-starter-biz-data-permission组件依赖了系统管理业务模块的api：yudao-module-system-api</p>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;yudao-framework&lt;/artifactId&gt;
        &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
        &lt;version&gt;${revision}&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;artifactId&gt;yudao-spring-boot-starter-biz-data-permission&lt;/artifactId&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;

    ......

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
            &lt;artifactId&gt;yudao-common&lt;/artifactId&gt;
        &lt;/dependency&gt;

        .........

        &lt;!-- 业务组件 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
            &lt;artifactId&gt;yudao-module-system-api&lt;/artifactId&gt; &lt;!-- 需要使用它，进行数据权限的获取 --&gt;
            &lt;version&gt;${revision}&lt;/version&gt;
        &lt;/dependency&gt;

        .........

&lt;/project&gt;

</code></pre>
<p>该模块下的包名都以cn.iocoder.yudao.framework开头，后面是组件名称，然后再往下大多又分成config和core两个包，config包下是spring-boot的配置类，与组件本身的配置有关，core包下是组件具体功能的实现代码，需要注意的是config包下的配置类会配合resources/META-INF.spring下的org.springframework.boot.autoconfigure.AutoConfiguration.imports文件使用，配置类的类路径只有配在这个文件中，才会被spring扫描到，然后将组件注入spring容器中，供其他业务模块使用。</p>
<p>framework模块之间也可以相互引用，例如yudao-spring-boot-starter-biz-data-permission就依赖了yudao-spring-boot-starter-security，yudao-spring-boot-starter-mybatis和yudao-spring-boot-starter-test</p>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;yudao-framework&lt;/artifactId&gt;
        &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
        &lt;version&gt;${revision}&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;artifactId&gt;yudao-spring-boot-starter-biz-data-permission&lt;/artifactId&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;

    &lt;name&gt;${project.artifactId}&lt;/name&gt;
    &lt;description&gt;数据权限&lt;/description&gt;
    &lt;url&gt;https://github.com/YunaiV/ruoyi-vue-pro&lt;/url&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
            &lt;artifactId&gt;yudao-common&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;!-- Web 相关 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
            &lt;artifactId&gt;yudao-spring-boot-starter-security&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt; &lt;!-- 可选，如果使用 DeptDataPermissionRule 必须提供 --&gt;
        &lt;/dependency&gt;

        &lt;!-- DB 相关 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
            &lt;artifactId&gt;yudao-spring-boot-starter-mybatis&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;!-- 业务组件 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
            &lt;artifactId&gt;yudao-module-system-api&lt;/artifactId&gt; &lt;!-- 需要使用它，进行数据权限的获取 --&gt;
            &lt;version&gt;${revision}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;!-- Test 测试相关 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
            &lt;artifactId&gt;yudao-spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

&lt;/project&gt;

</code></pre>
<h3 id="34-yudao-module-xxxxx">3.4 yudao-module-xxxxx</h3>
<p>yudao-module-xxxxx模块是实现具体业务的模块，具体结构如下:<br>
(xxxxx为业务名，aaa，bbb为业务下的具体功能名)</p>
<pre><code>yudao-module-xxxxx
    │
    │── yudao-module-xxxxx-api
    │     ├─ src
    │     │   └─ main
    │     │       └─ java
    │     │            └─ cn.iocoder.yudao.module.xxxxx
    │     │                ├─ api
    │     │                │   ├─ aaa
    │     │                │   │    ├─ dto
    │     │                │   │    │   └─ AaaRespDTO.java
    │     │                │   │    └─ AaaApi.java                    
    │     │                │   └─ bbb
    │     │                │        ├─ dto
    │     │                │        │   └─ BbbRespDTO.java
    │     │                │        └─ BbbApi.java
    │     │                └─ enums
    │     │                    ├─ aaa
    │     │                    │    └─ AaaCccEnum.java   
    │     │                    │    └─ AaaDdddEnum.java                 
    │     │                    ├─ bbb
    │     │                    │    └─ BbbCccEnum.java   
    │     │                    │    └─ BbbDdddEnum.java
    │     │                    │          
    │     │                    ├─ AaaTypeConstants.java    
    │     │                    └─ BbbTypeConstants.java                
    │     │
    │     └─ pom.xml
    │
    │── yudao-module-xxxxx-biz
    │     ├─ src
    │     │   └─ main
    │     │       ├─ java
    │     │       |    └─ cn.iocoder.yudao.module.xxxxx 
    │     │       |        ├─ api
    │     │       |        │   ├─ aaa   
    │     │       |        │   │   └─ AaaApiImpl.java  
    │     │       |        │   └─ bbb   
    │     │       |        │       └─ BbbApiImpl.java  
    │     │       |        │                                 
    │     │       |        ├─ controller
    │     │       |        │   ├─ admin   
    │     │       |        │   │   ├─ aaa
    │     │       |        │   │   │   ├─ vo
    │     │       |        │   │   │   │   └─ AaaReqVO.java                    
    │     │       |        │   │   │   └─ AaaController.java
    │     │       |        │   │   └─ bbb
    │     │       |        │   │       ├─ vo
    │     │       |        │   │       │   └─ BbbReqVO.java                    
    │     │       |        │   │       └─ BbbController.java    
    │     │       |        │   │                
    │     │       |        │   └─ app   
    │     │       |        │       └─ aaa
    │     │       |        │           ├─ vo
    │     │       |        │           │   └─ AaaAppReqVO.java          
    │     │       |        │           └─ AaaAppController.java
    │     │       |        │              
    │     │       |        ├─ convert  
    │     │       |        │   ├─ aaa
    │     │       |        │   │   └─ AaaConvert.java          
    │     │       |        │   └─ bbb
    │     │       |        │       └─ BbbConvert.java
    │     │       |        │        
    │     │       |        ├─ framework
    │     │       |        ├─ job
    │     │       |        ├─ mq
    │     │       |        ├─ service
    │     │       |        │   ├─ aaa
    │     │       |        │   │   └─ AaaService.java
    │     │       |        │   │   └─ AaaServiceImpl.java                    
    │     │       |        │   └─ bbb
    │     │       |        │       └─ BbbService.java
    │     │       |        │       └─ BbbServiceImpl.java
    │     │       |        │ 
    │     │       |        │
    │     │       |        └─ dal
    │     │       |            ├─ dataobject
    │     │       |            │   ├─ aaa
    │     │       |            │   │   └─ AaaDO.java          
    │     │       |            │   └─ bbb
    │     │       |            │       └─ BbbDO.java                    
    │     │       |            └─ mysql  
    │     │       |                ├─ aaa
    │     │       |                │   └─ AaaMapper.java          
    │     │       |                └─ bbb
    │     │       |                    └─ BbbMapper.java                            
    │     │       │  
    │     │       └─ resource
    │     │              └─ mapper
    │     │                  ├─ aaa 
    │     │                  │   └─ AaaMapper.xml          
    │     │                  └─ bbb
    │     │                      └─ BbbMapper.xml                             
    │     └── pom.xml 
    │
    └── pom.xml  
</code></pre>
<p>整个项目的Controller， Service， Mapper都封装在业务模块里，业务模块是根据具体的业务来建立的。</p>
<p>每个业务模块都由yudao-module-xxxxx-api和yudao-module-xxxxx-biz两个子模块组成。yudao-module-xxxxx-api模块中是开放给其他业务模块或业务组件调用的接口代码和一些公共的枚举和常量，yudao-module-xxxxx-biz模块中是具体业务的实现代码，因为api定义的接口是biz实现的，因此biz模块首先要依赖它自己要实现的api模块。</p>
<p>模块内包名都是固定前缀cn.iocoder.yudao加module再加业务模块名的形式，例如：cn.iocoder.yudao.module.xxxxx，在此基础上根据<strong>所属层级</strong>建立下一级包名，例如cn.iocoder.yudao.module.xxxxx.controller.admin，cn.iocoder.yudao.module.xxxxx.service，然后根据<strong>具体业务功能</strong>再建立更深层级的包名和包下的类，例如：cn.iocoder.yudao.module.xxxxx.controller.admin.aaa.vo。</p>
<hr>
<p><strong>包名解释：</strong></p>
<ul>
<li>
<p><strong>yudao-module-xxxxx-api</strong></p>
<ul>
<li>
<p><strong>cn.iocoder.yudao.module.xxxxx.api</strong> 包存放业务模块需要对外暴漏的接口，以及用于传输数据的DTO对象。</p>
</li>
<li>
<p><strong>cn.iocoder.yudao.module.xxxxx.enums</strong> 包存放该业务模块的枚举类和常量类，既供自己使用，也供调用方使用。</p>
</li>
</ul>
</li>
<li>
<p><strong>yudao-module-xxxxx-biz</strong></p>
<ul>
<li>
<p><strong>cn.iocoder.yudao.module.xxxxx.api</strong> 包存放对api模块定义的接口类的实现(***ApiImpl)，实现类为Spring容器管理，被Spring注入到调用者引用的Api接口上，ApiImpl和Controller一样，接收到调用后再调用业务层Service代码。</p>
</li>
<li>
<p><strong>cn.iocoder.yudao.module.xxxxx.controller</strong> 分为admin和app两个子包，分别放置管理员接口和会员接口，包中存放Controller类及接收和生成JSON的实体类VO，接收http请求并返回数据。</p>
</li>
<li>
<p><strong>cn.iocoder.yudao.module.xxxxx.service</strong> 包下是具体的Service业务接口和实现类。</p>
</li>
<li>
<p><strong>cn.iocoder.yudao.module.xxxxx.dal</strong> 包是负责数据库访问的DAO层，分为dataobject和mysql两个包，dataobject包内存放的是DO对象，mysql包内存放的是Mybatis/Mybatis-Plus的Mapper类，Java代码无法实现的复杂SQL，可在resources文件夹内定义"*Mapper.xml"文件实现。</p>
</li>
<li>
<p><strong>cn.iocoder.yudao.module.xxxxx.convert</strong> 包功能比较简单，用于存放mapstruct转换器类，用于各种不同类型的实体类对象之间的深拷贝互相转换。</p>
</li>
<li>
<p><strong>cn.iocoder.yudao.module.xxxxx.mq</strong> 消息发送接收。</p>
</li>
<li>
<p><strong>cn.iocoder.yudao.module.xxxxx.job</strong> 定时任务。</p>
</li>
<li>
<p><strong>cn.iocoder.yudao.module.xxxxx.framework</strong> 配合yudao-framework模块封装的框架和功能来实现一些更高级的功能，例如文档生成，数据权限等等。</p>
</li>
<li>
<p>......</p>
</li>
</ul>
</li>
</ul>
<hr>
<p><strong>业务模块biz之间是相互独立的</strong>，如biz模块间要相互调用，只要互相引用对方的api模块坐标到自己biz的pom.xml即可，这样的模块依赖方式完美遵循<strong>依赖倒置原则</strong>，如果是biz直接引用biz不但违背依赖倒置原则，而且可能还会导致maven构建时报出循环引用的错误。本项目中后续还会出现业务组件框架模块(yudao-spring-boot-starter-biz-xxxxxxxx)依赖具体业务模块的情况，同样也是需要引用业务模块的api。</p>
<p>例:</p>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    
    &lt;parent&gt;
        &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
        &lt;artifactId&gt;yudao-module-system&lt;/artifactId&gt;
        &lt;version&gt;${revision}&lt;/version&gt;
    &lt;/parent&gt;

    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;!-- 业务模块 --&gt;
    &lt;artifactId&gt;yudao-module-system-biz&lt;/artifactId&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;

    ... ...

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
            &lt;!-- 自身业务的api --&gt;
            &lt;artifactId&gt;yudao-module-system-api&lt;/artifactId&gt;
            &lt;version&gt;${revision}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
            &lt;!-- 要调用的其他业务模块的api --&gt;
            &lt;artifactId&gt;yudao-module-infra-api&lt;/artifactId&gt;
            &lt;version&gt;${revision}&lt;/version&gt;
    &lt;/dependency&gt;

    ... ...

&lt;/project&gt;

</code></pre>
<h3 id="35-yudao-server">3.5 yudao-server</h3>
<p>yudao-server是启动项目的模块，里面有spring-boot主启动类cn.iocoder.yudao.server.YudaoServerApplication，缺省的请求处理类cn.iocoder.yudao.server.controller.DefaultController，不同环境的配置文件application-*.yml，还有一个logback的日志配置文件logback-spring.xml。</p>
<pre><code>yudao-server
    |
    ├─ src
    |   └─ main
    |        ├─ java
    |        |    └─ cn.iocoder.yudao.server
    |        |        └─ controller
    |        |            └─ DefaultController.java        
    |        |        └─ YudaoServerApplication.java  
    |        |
    |        └─ resources
    |             └─ application.yaml
    |             └─ application-dev.yaml
    |             └─ application-local.yaml
    |             └─ logback-spring.xml
    |     
    └─ pox.xml
</code></pre>
<p>yudao-server模块汇聚了所有的业务模块，打包上线的可执行jar包就是这个模块编译而成的，该模块聚合了所有的业务模块的biz模块(yudao-module-***-biz)以及一些需要直接引用的starter，需要启用哪个业务模块就可以按需引入哪个业务模块。</p>
<p>/yudao-server/pom.xml中，引入了项目最核心的两个业务模块：系统管理yudao-module-system-biz和服务保障yudao-module-infra-biz，默认不引入其他业务模块从而加快编译速度，还引入了一些其他的starter，最后通过spring-boot-maven-plugin插件将此模块代码打包为可执行的jar包，从而启动整个项目。</p>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
   
    &lt;parent&gt;
        &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
        &lt;artifactId&gt;yudao&lt;/artifactId&gt;
        &lt;version&gt;${revision}&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;artifactId&gt;yudao-server&lt;/artifactId&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;

    &lt;name&gt;${project.artifactId}&lt;/name&gt;
    &lt;description&gt;
        后端 Server 的主项目，通过引入需要 yudao-module-xxx 的依赖，
        从而实现提供 RESTful API 给 yudao-ui-admin、yudao-ui-user 等前端项目。
        本质上来说，它就是个空壳（容器）！
    &lt;/description&gt;
    &lt;url&gt;https://github.com/YunaiV/ruoyi-vue-pro&lt;/url&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
            &lt;artifactId&gt;yudao-module-system-biz&lt;/artifactId&gt;
            &lt;version&gt;${revision}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
            &lt;artifactId&gt;yudao-module-infra-biz&lt;/artifactId&gt;
            &lt;version&gt;${revision}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;!-- spring boot 配置所需依赖 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;

        &lt;!-- 服务保障相关 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;cn.iocoder.boot&lt;/groupId&gt;
            &lt;artifactId&gt;yudao-spring-boot-starter-protection&lt;/artifactId&gt;
        &lt;/dependency&gt;

    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;!-- 设置构建的 jar 包名 --&gt;
        &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;
        &lt;plugins&gt;
            &lt;!-- 打包 --&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${spring.boot.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt; &lt;!-- 将引入的 jar 打入其中 --&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;

</code></pre>
<p>cn.iocoder.yudao.server.YudaoServerApplication是整个项目的主启动类，通过注解<code>@SpringBootApplication(scanBasePackages = {"${yudao.info.base-package}.server", "${yudao.info.base-package}.module"})</code>将cn.iocoder.yudao.module下的包列入Spring扫描范围，用于实例化module模块中的类，并纳入Spring容器管理，这也是业务模块(yudao-module-xxx-xxx)下的子包和类必须放在cn.iocoder.yudao.module包下的原因。</p>
<pre><code class="language-java">package cn.iocoder.yudao.server;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * 项目的启动类
 * @author 芋道源码
 */
@SuppressWarnings("SpringComponentScan") // 忽略 IDEA 无法识别 ${yudao.info.base-package}
@SpringBootApplication(scanBasePackages = {"${yudao.info.base-package}.server", "${yudao.info.base-package}.module"})
public class YudaoServerApplication {

    public static void main(String[] args) {
        SpringApplication.run(YudaoServerApplication.class, args);
    }

}

</code></pre>
<p>controller包下定义了一个缺省的cn.iocoder.yudao.server.controller.DefaultController类，如果被调用的接口所在的模块没有被yudao-server引入，就会被这个类中带着路径通配符的接口方法“兜底”，给出对应的错误提示，这个也是芋道源码中比较精巧的设计之一。</p>
<pre><code class="language-java">package cn.iocoder.yudao.server.controller;

import cn.iocoder.yudao.framework.common.pojo.CommonResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import static cn.iocoder.yudao.framework.common.exception.enums.GlobalErrorCodeConstants.NOT_IMPLEMENTED;

/**
 * 默认 Controller，解决部分 module 未开启时的 404 提示。
 * 例如说，/bpm/** 路径，工作流
 *
 * @author 芋道源码
 */
@RestController
public class DefaultController {

    @RequestMapping("/admin-api/bpm/**")
    public CommonResult&lt;Boolean&gt; bpm404() {
        return CommonResult.error(NOT_IMPLEMENTED.getCode(),
                "[工作流模块 yudao-module-bpm - 已禁用][参考 https://doc.iocoder.cn/bpm/ 开启]");
    }

    @RequestMapping("/admin-api/mp/**")
    public CommonResult&lt;Boolean&gt; mp404() {
        return CommonResult.error(NOT_IMPLEMENTED.getCode(),
                "[微信公众号 yudao-module-mp - 已禁用][参考 https://doc.iocoder.cn/mp/build/ 开启]");
    }

    @RequestMapping(value = {"/admin-api/product/**", // 商品中心
            "/admin-api/trade/**", // 交易中心
            "/admin-api/promotion/**"})  // 营销中心
    public CommonResult&lt;Boolean&gt; mall404() {
        return CommonResult.error(NOT_IMPLEMENTED.getCode(),
                "[商城系统 yudao-module-mall - 已禁用][参考 https://doc.iocoder.cn/mall/build/ 开启]");
    }

    @RequestMapping("/admin-api/erp/**")
    public CommonResult&lt;Boolean&gt; erp404() {
        return CommonResult.error(NOT_IMPLEMENTED.getCode(),
                "[ERP 模块 yudao-module-erp - 已禁用][参考 https://doc.iocoder.cn/erp/build/ 开启]");
    }

    @RequestMapping("/admin-api/crm/**")
    public CommonResult&lt;Boolean&gt; crm404() {
        return CommonResult.error(NOT_IMPLEMENTED.getCode(),
                "[CRM 模块 yudao-module-crm - 已禁用][参考 https://doc.iocoder.cn/crm/build/ 开启]");
    }

    @RequestMapping(value = {"/admin-api/report/**"})
    public CommonResult&lt;Boolean&gt; report404() {
        return CommonResult.error(NOT_IMPLEMENTED.getCode(),
                "[报表模块 yudao-module-report - 已禁用][参考 https://doc.iocoder.cn/report/ 开启]");
    }

    @RequestMapping(value = {"/admin-api/pay/**"})
    public CommonResult&lt;Boolean&gt; pay404() {
        return CommonResult.error(NOT_IMPLEMENTED.getCode(),
                "[支付模块 yudao-module-pay - 已禁用][参考 https://doc.iocoder.cn/pay/build/ 开启]");
    }

    @RequestMapping(value = {"/admin-api/ai/**"})
    public CommonResult&lt;Boolean&gt; ai404() {
        return CommonResult.error(NOT_IMPLEMENTED.getCode(),
                "[AI 大模型 yudao-module-ai - 已禁用][参考 https://doc.iocoder.cn/ai/build/ 开启]");
    }

    @RequestMapping(value = {"/admin-api/iot/**"})
    public CommonResult&lt;Boolean&gt; iot404() {
        return CommonResult.error(NOT_IMPLEMENTED.getCode(),
                "[IOT 物联网 yudao-module-iot - 已禁用][参考 https://doc.iocoder.cn/iot/build/ 开启]");
    }

}

</code></pre>
<h3 id="36-关系图">3.6 关系图</h3>
<p>1.引用关系，箭头由被引用模块指向引用模块</p>
<p><img src="https://img2024.cnblogs.com/blog/3570203/202501/3570203-20250122215834503-811811876.png" alt="image" loading="lazy"></p>
<p>2.继承关系，箭头由父级指向子级</p>
<p><img src="https://img2024.cnblogs.com/blog/3570203/202501/3570203-20250122215843433-354645940.png" alt="image" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.008831393383101852" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-22 22:02">2025-01-22 22:00</span>&nbsp;
<a href="https://www.cnblogs.com/changelzj">LiuZijian</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18686857" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18686857);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18686857', targetLink: 'https://www.cnblogs.com/changelzj/p/18686857', title: '开源项目芋道源码解析 [开篇]' })">举报</a>
</div>
        