
	<h1 class="postTitle"><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/georgewing/p/19020716" title="发布于 2025-08-04 00:16">
    <span role="heading" aria-level="2">pnpm 10.14 支持JavaScript运行时的安装了</span>
    

</a>
</h1>
	    <div id="cnblogs_post_description" style="display: none">
        
        pnpm 10.14 支持JavaScript运行时的安装了
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>大家好，我是豆爸（吴玺喆）。我看pnpm 10.14支持直接JavaScript运行时的安装了，这样可以用它声明的版本进行运行时的下载安装。</p>
<p>先看看之前用corepack的“间接”方式：</p>
<h1 id="一用corepack管理pnpm来支持运行时安装功能">一、用corepack管理pnpm来支持运行时安装功能</h1>
<p>在Node.js 25之前在里面集成了一个实验性的小工具：<a href="https://github.com/nodejs/corepack" target="_blank" rel="noopener nofollow">corepack</a>，用来管理包管理器的，比如yarn、pnpm。想要支持JavaScript运行时的安装，可以先启用corepack：</p>
<p><code>corepack enable</code></p>
<p>然后指定项目所在pnpm的版本：</p>
<p><code>corepack prepare pnpm@9.15.4 --activate</code></p>
<p>接下来，安装Node.js版本：</p>
<p><code>pnpm env use --global 18</code></p>
<p>现在，pnpm 10.14 支持JavaScript运行时的安装了。</p>
<h1 id="二pnpm-1014的支持方法">二、pnpm 10.14的支持方法</h1>
<p>那我们在Monorepo项目中，要怎样配置呢？</p>
<p>具体配置步骤如下：</p>
<ol>
<li>在项目根目录的package.json中添加devEngines.runtimes，指定运行时Node.js版本的范围：</li>
</ol>
<pre><code class="language-Plain">// package.json
{
  "devEngines": {
    "runtime": {
      "name": "node",
      "version": "^22.17.0",
      "onFail": "download" // we only support the "download" value for now
    }
  }
}
</code></pre>
<ol start="2">
<li>在子目录，也就是packages/app/package.json的配置是可以覆盖根目录配置的：</li>
</ol>
<pre><code class="language-Plain">// packages/app/package.json
{
  "devEngines": {
    "runtime": {
      "name": "node",
          "version": "^18.20.8",
          "onFail": "download"
    }
  }
}
</code></pre>
<ol start="3">
<li>结合node的版本管理工具volta实现版本切换：</li>
</ol>
<pre><code class="language-Plain">{
  "volta": {
        "node": "18.20.8",
        "pnpm: "9.15.4"
  }
}
</code></pre>
<p>当执行<code>pnpm install</code>时，如果你本地的开发环境的Node.js版本比如是16.x，而与项目所需要的版本是22.17。那么，就会通过你指定的版本范围去匹配：<br>
<img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/11617/202508/11617-20250804075412493-1246040524.png" class="lazyload"></p>
<p>锁文件（lockfile）会保存运行时的版本，以及校验和（checksum)。这样，在本地运行时，也可以保证环境的一致性。</p>
<h1 id="三用volta自动切换版本">三、用Volta自动切换版本</h1>
<p>步骤的第3步，是由Volta通过<code>volta pin</code>命令在package.json中生成的volta字段。当进入项目的目录时，Volta自动切换到指定版本。不用像nvm那样手动操作了。</p>
<h2 id="安装-volta">安装 Volta</h2>
<p>在终端输入命令：</p>
<p><code>curl https://get.volta.sh | base</code></p>
<p>就会下载安装了：<br>
<img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/11617/202508/11617-20250804075353629-1754412139.png" class="lazyload"></p>
<h2 id="指定node的版本">指定Node的版本</h2>
<p>输入<code>volta pin node@22.17.0</code><br>
<img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/11617/202508/11617-20250804075341047-2034910282.png" class="lazyload"></p>
<p>就会在package.json中生成volta字段：<br>
<img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/11617/202508/11617-20250804075322760-1618893950.png" class="lazyload"></p>
<h2 id="pnpm校验devengines版本">pnpm校验devEngines版本</h2>
<p>当执行<code>pnpm install</code>时，pnpm会去校验devEngines.runtime的版本，查下版本是否符合。如果符合，就会安装依赖。如果volta指定的版本低于<code>devEngines.runtime</code>要求的版本范围，pnpm就会警告版本不匹配。</p>
<h2 id="完整的packagejson配置">完整的package.json配置：</h2>
<pre><code class="language-SQL">{
  "devEngines": {
    "runtime": {
      "name": "node",
      "version": "^22.17.0",
      "onFail": "download"
    }
  },
  "volta": {
    "node": "22.17.0"
  }
}
</code></pre>
<h1 id="四devengines字段的定义">四、devEngines字段的定义</h1>
<p><a href="https://github.com/openjs-foundation/package-metadata-interoperability-collab-space/issues/15" target="_blank" rel="noopener nofollow">devEngines.runtime</a>是使用下面这个模式来定义的字段：</p>
<pre><code class="language-TypeScript">interface DevEngines {
  os?: DevEngineDependency | DevEngineDependency[];
  cpu?: DevEngineDependency | DevEngineDependency[];
  libc?: DevEngineDependency | DevEngineDependency[];
  runtime?: DevEngineDependency | DevEngineDependency[];
  packageManager?: DevEngineDependency | DevEngineDependency[];
}

interface DevEngineDependency {
  name: string;
  version?: string;
  onFail?: 'ignore' | 'warn' | 'error' | 'download';
}
</code></pre>
<p>onFail属性是验证失败了要怎样处理，支持4个值：</p>
<ul>
<li>
<p><code>ignore</code>：无</p>
</li>
<li>
<p><code>warn</code>：打印警告的信息内容，但是不会退出，然后继续下一步的操作</p>
</li>
<li>
<p><code>error</code>：打印错误的信息内容，然后退出</p>
</li>
<li>
<p><code>download</code>：这是pnpm10.14目前支持的值，会通过下载指定的版本来解决验证失败的问题。</p>
</li>
</ul>
<p><code>download</code>值可以用pnpm在指定的版本范围中去下载。</p>
<h1 id="五总结">五、总结</h1>
<p>devEngines.runtime就是检查一下环境的兼容性，然后通过配置的"onFail": "download"来下载一个运行时安装版本。但是并没有执行版本切换，要执行的话还需要volta这个“一次配置，全自动切换”的管理运行时版本的智能工具。</p>

</div>
<div class="clear"></div>

	<div class="postDesc">posted on 
<span id="post-date" data-last-update-days="0.47708333333333336" data-date-updated="2025-08-04 11:43">2025-08-04 00:16</span>&nbsp;
<a href="https://www.cnblogs.com/georgewing">豆豆の爸爸</a>&nbsp;
阅读(<span id="post_view_count">77</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19020716);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19020716', targetLink: 'https://www.cnblogs.com/georgewing/p/19020716', title: 'pnpm 10.14 支持JavaScript运行时的安装了' })">举报</a>
</div>
