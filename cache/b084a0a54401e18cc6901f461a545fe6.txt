
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/1314520xh/p/18901494" title="发布于 2025-05-28 23:43">
    <span role="heading" aria-level="2">第2讲、从启动到表单加载：Odoo 18 的完整执行流程详解</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>了解 Odoo 在从启动到用户打开一个模型表单视图时，内部到底发生了什么，是模块开发、性能调优和故障排查的关键。本文将为你系统梳理 Odoo 18 的<strong>执行流程</strong>与<strong>关键方法调用链</strong>，适用于开发者与技术架构师快速理解 Odoo 核心机制。</p>
<hr>
<h2 id="一核心概念速查表">一、核心概念速查表</h2>
<table>
<thead>
<tr>
<th>概念</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Action</td>
<td>Odoo 前端与后端交互的动作定义，决定打开什么视图、加载哪些数据</td>
</tr>
<tr>
<td>View</td>
<td>视图，定义界面布局（如表单、列表、看板等）</td>
</tr>
<tr>
<td>Model</td>
<td>数据模型，继承自 <code>models.Model</code>，对应数据库表</td>
</tr>
<tr>
<td>Field</td>
<td>字段，模型的数据结构定义</td>
</tr>
<tr>
<td>Controller</td>
<td>控制器，处理 HTTP 路由请求</td>
</tr>
<tr>
<td>Service</td>
<td>前端服务，管理 action、数据加载、界面跳转等</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="二odoo-启动流程总览">二、Odoo 启动流程总览</h2>
<p>在运行 <code>odoo-bin</code> 启动命令后，Odoo 会执行一系列初始化步骤，为后续操作打下基础：</p>
<h3 id="-1-服务启动阶段">✅ 1. 服务启动阶段</h3>
<table>
<thead>
<tr>
<th>阶段</th>
<th>动作</th>
</tr>
</thead>
<tbody>
<tr>
<td>配置加载</td>
<td>解析 <code>odoo.conf</code> 配置项（数据库连接、模块路径等）</td>
</tr>
<tr>
<td>模块扫描</td>
<td>扫描 <code>addons_path</code> 下的所有模块，加载 <code>__manifest__.py</code></td>
</tr>
<tr>
<td>注册模型</td>
<td>加载模型、控制器、视图、安全规则等</td>
</tr>
<tr>
<td>数据库连接</td>
<td>初始化与 PostgreSQL 的连接，执行模块更新（若指定）</td>
</tr>
<tr>
<td>Web 服务启动</td>
<td>使用 <code>werkzeug</code> 启动 HTTP 服务，注册 <code>/web</code> 等路由</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="三打开表单时的请求流程">三、打开表单时的请求流程</h2>
<p>假设用户点击"客户"菜单项，打开 <code>res.partner</code> 的表单视图，大致会经历以下流程：</p>
<h3 id="-2-前端操作与服务交互流程">✅ 2. 前端操作与服务交互流程</h3>
<pre><code class="language-text">[用户点击菜单] 
    → [前端触发 web.action.load 请求] 
    → [后端加载 action &amp; view 定义] 
    → [前端渲染组件结构]
    → [前端调用 model.read 获取记录数据]
    → [渲染表单页面，等待用户交互]
</code></pre>
<h4 id="-关键请求路由">🧩 关键请求路由</h4>
<table>
<thead>
<tr>
<th>路由</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/web/action/load</code></td>
<td>加载 action 和视图结构</td>
</tr>
<tr>
<td><code>/web/dataset/call_kw</code></td>
<td>调用模型方法（如 read、write）加载记录数据</td>
</tr>
<tr>
<td><code>/web/view/view_load</code></td>
<td>异步加载视图组件（仅特殊情况）</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="四后端方法调用链详解">四、后端方法调用链详解</h2>
<p>以下是从 action 加载到表单渲染，后端执行的关键 Python 方法链：</p>
<h3 id="-31-加载-action-与视图结构">✅ 3.1 加载 action 与视图结构</h3>
<table>
<thead>
<tr>
<th>模块</th>
<th>方法</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>odoo/addons/web/controllers/main.py</code></td>
<td><code>action_load()</code>：响应前端加载 action 请求</td>
</tr>
<tr>
<td><code>odoo/models.py</code></td>
<td><code>fields_view_get()</code>：获取表单结构（arch + fields）</td>
</tr>
<tr>
<td><code>odoo/addons/base/models/ir_actions.py</code></td>
<td><code>read()</code>：加载 <code>ir.actions.act_window</code></td>
</tr>
</tbody>
</table>
<h3 id="-32-加载记录数据">✅ 3.2 加载记录数据</h3>
<table>
<thead>
<tr>
<th>模块</th>
<th>方法</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>odoo/models.py</code></td>
<td><code>read()</code>：读取记录数据</td>
</tr>
<tr>
<td><code>odoo/models.py</code></td>
<td><code>check_access_rights()</code> / <code>check_access_rule()</code>：权限校验</td>
</tr>
<tr>
<td><code>odoo/fields.py</code></td>
<td><code>convert_to_read()</code>：字段值格式转换（如 Many2one 展示 name）</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="五前端组件加载机制与进阶">五、前端组件加载机制与进阶</h2>
<p>Odoo 18 基于 <strong>OWL（Odoo Web Library）</strong> 框架实现前端渲染，其组件化结构如下：</p>
<table>
<thead>
<tr>
<th>组件</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>FormController</code></td>
<td>控制表单的交互逻辑，如保存、取消等</td>
</tr>
<tr>
<td><code>FormRenderer</code></td>
<td>渲染表单字段布局与内容</td>
</tr>
<tr>
<td><code>FieldWidget</code></td>
<td>渲染具体字段（如 Text、Many2one、Date 等）</td>
</tr>
<tr>
<td><code>ActionService</code></td>
<td>管理 action 调用及视图渲染</td>
</tr>
</tbody>
</table>
<h3 id="️-owl-组件生命周期与自定义">🛠️ OWL 组件生命周期与自定义</h3>
<ul>
<li>生命周期钩子：<code>onWillStart</code>、<code>onWillUpdateProps</code>、<code>onWillUnmount</code> 等，便于资源管理和异步加载。</li>
<li>自定义组件：可继承 <code>FieldWidget</code> 实现自定义字段渲染，注册新类型。</li>
<li>响应式机制：OWL 支持高效的状态管理和响应式 UI 更新。</li>
<li>调试技巧：用浏览器 DevTools 设置断点，跟踪 <code>action_service.js</code>、<code>form_renderer.js</code> 代码流。</li>
</ul>
<hr>
<h2 id="六用户交互与数据提交">六、用户交互与数据提交</h2>
<p>当用户填写完表单并点击"保存"按钮时：</p>
<ul>
<li>
<p>触发 <code>/web/dataset/call_kw</code>，方法为 <code>write</code>（更新）或 <code>create</code>（新增）</p>
</li>
<li>
<p>后端进入 <code>models.py → write()</code> 或 <code>create()</code> 方法</p>
</li>
<li>
<p>同时执行：</p>
<ul>
<li><code>@api.onchange</code>（界面联动）</li>
<li><code>@api.constrains</code>（校验约束）</li>
<li><code>@api.depends</code>（计算字段）</li>
</ul>
</li>
</ul>
<p>保存成功后，界面刷新或跳转到指定动作。</p>
<hr>
<h2 id="七常见性能瓶颈与优化建议">七、常见性能瓶颈与优化建议</h2>
<ul>
<li><strong>视图继承过多</strong>：合并 XML 继承，减少嵌套层级。</li>
<li><strong>字段过多/复杂计算字段</strong>：合理使用 <code>@api.depends</code>，避免循环依赖。</li>
<li><strong>SQL 查询慢</strong>：用 <code>logging_level=debug_sql</code> 分析慢查询，添加索引。</li>
<li><strong>前端卡顿</strong>：减少一次性加载数据量，利用分页、懒加载。</li>
<li><strong>缓存机制</strong>：善用 Odoo 的缓存（如 <code>@tools.ormcache</code>）。</li>
<li><strong>数据库连接池</strong>：合理配置连接池参数，避免连接耗尽。</li>
<li><strong>模块加载优化</strong>：只加载必要模块，避免无用依赖。</li>
</ul>
<hr>
<h2 id="八常见问题排查案例">八、常见问题排查案例</h2>
<h3 id="案例1表单字段不显示">案例1：表单字段不显示</h3>
<ul>
<li>检查 <code>fields_view_get()</code> 返回的 arch 是否包含该字段</li>
<li>检查字段 <code>readonly</code>、<code>invisible</code> 属性</li>
<li>检查用户权限组</li>
</ul>
<h3 id="案例2保存时报权限错误">案例2：保存时报权限错误</h3>
<ul>
<li>查看 <code>check_access_rights()</code>、<code>check_access_rule()</code> 调用栈</li>
<li>检查 <code>ir.model.access.csv</code> 配置</li>
<li>用超级管理员账号复现</li>
</ul>
<h3 id="案例3表单加载缓慢">案例3：表单加载缓慢</h3>
<ul>
<li>检查视图 XML 是否过于复杂</li>
<li>检查是否有大量计算字段或 on_change 逻辑</li>
<li>用浏览器 Network 面板分析接口耗时</li>
</ul>
<hr>
<h2 id="九开发与调试建议">九、开发与调试建议</h2>
<h3 id="-常用断点位置python">✅ 常用断点位置（Python）</h3>
<table>
<thead>
<tr>
<th>位置</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>models.py → fields_view_get()</code></td>
<td>查看视图加载结构</td>
</tr>
<tr>
<td><code>models.py → read()</code></td>
<td>检查记录数据加载</td>
</tr>
<tr>
<td><code>ir_actions.py → read()</code></td>
<td>分析 action 行为</td>
</tr>
<tr>
<td><code>ir_ui_view.py → _get_view_arch()</code></td>
<td>检查视图 XML 定义</td>
</tr>
</tbody>
</table>
<h3 id="-前端调试入口js">✅ 前端调试入口（JS）</h3>
<table>
<thead>
<tr>
<th>文件</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>action_service.js</code></td>
<td>请求 action 执行入口</td>
</tr>
<tr>
<td><code>form_controller.js</code></td>
<td>表单行为控制，如保存、返回等</td>
</tr>
<tr>
<td><code>form_renderer.js</code></td>
<td>字段渲染实现</td>
</tr>
<tr>
<td><code>dataset.js</code></td>
<td>封装的 RPC 调用逻辑，调用 <code>call_kw</code></td>
</tr>
</tbody>
</table>
<hr>
<h2 id="十表单加载时序图mermaid-示例">十、表单加载时序图（Mermaid 示例）</h2>
<div class="mermaid">sequenceDiagram
    participant U as 用户
    participant F as 前端
    participant B as Odoo 后端
    U-&gt;&gt;F: 点击菜单
    F-&gt;&gt;B: /web/action/load
    B--&gt;&gt;F: 返回视图结构
    F-&gt;&gt;B: /web/dataset/call_kw (read)
    B--&gt;&gt;F: 返回记录数据
    F-&gt;&gt;U: 渲染表单，等待交互
    U-&gt;&gt;F: 填写并保存
    F-&gt;&gt;B: /web/dataset/call_kw (write/create)
    B--&gt;&gt;F: 保存结果
    F--&gt;&gt;U: 刷新/跳转
</div><hr>
<h2 id="十一进阶阅读与资源推荐">十一、进阶阅读与资源推荐</h2>
<ul>
<li><a href="https://www.odoo.com/documentation/18.0/" target="_blank" rel="noopener nofollow">Odoo 官方文档</a></li>
<li><a href="https://github.com/odoo/odoo" target="_blank" rel="noopener nofollow">Odoo 源码 GitHub</a></li>
<li><a href="https://github.com/odoo/owl" target="_blank" rel="noopener nofollow">Odoo OWL 官方文档</a></li>
<li><a href="https://www.odoo.com/forum/help-1" target="_blank" rel="noopener nofollow">Odoo 开发者社区</a></li>
<li><a href="https://www.odoo.com/documentation/18.0/developer/howtos/performance.html" target="_blank" rel="noopener nofollow">Odoo 性能调优实战</a></li>
</ul>
<hr>
<h2 id="十二ai-与-odoo-集成展望">十二、AI 与 Odoo 集成展望</h2>
<p>随着 AI 技术发展，Odoo 可集成智能助手、自动表单填写、自然语言报表生成等能力。例如：</p>
<ul>
<li>用 ChatGPT 自动生成业务单据</li>
<li>利用 OCR 自动录入发票</li>
<li>通过 RPA 自动化重复操作</li>
<li>智能推荐字段值、自动补全表单</li>
<li>语音控制 Odoo 操作</li>
</ul>
<hr>
<h2 id="-结语">🔚 结语</h2>
<p>理解 Odoo 的完整执行流程是模块开发的基础，也是性能调优与 bug 排查的核心。掌握每个阶段调用的方法、参与的模块与执行顺序，能帮助你更高效地开发业务逻辑、扩展功能或处理视图问题。</p>
<p>如果你正在开发自定义模块、设计低代码平台或嵌入 AI 能力（如自然语言控制 Odoo 模块），也欢迎进一步交流！</p>
<hr>
<p>如果你需要此博客的 Markdown、PDF、或直接发布到 CSDN/博客园/知乎的格式版本，我也可以帮你生成。是否需要？</p>
<hr>
<h2 id="十三odoo-18-完整执行流程方法调用链补充">十三、Odoo 18 完整执行流程：方法调用链补充</h2>
<hr>
<h3 id="-一服务启动相关方法">🟦 一、服务启动相关方法</h3>
<table>
<thead>
<tr>
<th>步骤</th>
<th>模块/路径</th>
<th>关键方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>加载配置</td>
<td><code>odoo/tools/config.py</code></td>
<td><code>config.parse_config()</code></td>
</tr>
<tr>
<td>启动服务</td>
<td><code>odoo/cli/server.py</code></td>
<td><code>start()</code></td>
</tr>
<tr>
<td>加载模块</td>
<td><code>odoo/modules/registry.py</code></td>
<td><code>Registry.load()</code> / <code>load_modules()</code></td>
</tr>
<tr>
<td>启动 Web</td>
<td><code>odoo/service/server.py</code></td>
<td><code>start_wsgi_server()</code></td>
</tr>
<tr>
<td>加载视图/模型</td>
<td><code>odoo/addons/base/models/ir_model.py</code><br><code>ir_model_fields</code>, <code>ir_ui_view</code> 等</td>
<td><code>init()</code>, <code>fields_view_get()</code></td>
</tr>
</tbody>
</table>
<hr>
<h3 id="-二用户点击菜单--加载-action">🟨 二、用户点击菜单 → 加载 action</h3>
<table>
<thead>
<tr>
<th>步骤</th>
<th>路由/模块</th>
<th>关键方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>前端发送请求</td>
<td><code>/web/action/load</code></td>
<td>JS：<code>ActionService.prototype.loadAction()</code></td>
</tr>
<tr>
<td>控制器处理</td>
<td><code>odoo/addons/web/controllers/main.py</code></td>
<td><code>Home.action_load()</code></td>
</tr>
<tr>
<td>加载 action</td>
<td><code>odoo/addons/base/models/ir_actions.py</code></td>
<td><code>read()</code></td>
</tr>
<tr>
<td>加载视图</td>
<td><code>odoo/models.py</code></td>
<td><code>fields_view_get()</code>（解析 XML 为 arch）</td>
</tr>
<tr>
<td>视图解析器</td>
<td><code>odoo/tools/view_validation.py</code></td>
<td><code>_validate_form_view()</code></td>
</tr>
</tbody>
</table>
<hr>
<h3 id="-三前端接收并渲染视图结构">🟩 三、前端接收并渲染视图结构</h3>
<table>
<thead>
<tr>
<th>步骤</th>
<th>路由/模块</th>
<th>关键方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>前端接收视图结构</td>
<td>JS：<code>FormRenderer</code>, <code>FormController</code></td>
<td><code>setup()</code>, <code>onWillStart()</code></td>
</tr>
<tr>
<td>组件渲染</td>
<td>OWL 模板系统</td>
<td><code>useComponent</code>, <code>useSubEnv</code></td>
</tr>
</tbody>
</table>
<hr>
<h3 id="-四加载具体记录数据">🟧 四、加载具体记录数据</h3>
<table>
<thead>
<tr>
<th>步骤</th>
<th>路由/模块</th>
<th>关键方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>请求记录数据</td>
<td><code>/web/dataset/call_kw</code></td>
<td>method=<code>read</code></td>
</tr>
<tr>
<td>ORM 调用</td>
<td><code>odoo/models.py</code></td>
<td><code>read()</code>, <code>_read()</code></td>
</tr>
<tr>
<td>权限校验</td>
<td><code>odoo/models.py</code></td>
<td><code>check_access_rights()</code>, <code>check_access_rule()</code></td>
</tr>
<tr>
<td>字段转换</td>
<td><code>odoo/fields.py</code></td>
<td><code>convert_to_read()</code></td>
</tr>
</tbody>
</table>
<hr>
<h3 id="-五用户交互保存修改记录">🟥 五、用户交互（保存/修改记录）</h3>
<table>
<thead>
<tr>
<th>步骤</th>
<th>路由/模块</th>
<th>关键方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>保存记录</td>
<td><code>/web/dataset/call_kw</code></td>
<td>method=<code>write</code> or <code>create</code></td>
</tr>
<tr>
<td>ORM 调用</td>
<td><code>odoo/models.py</code></td>
<td><code>write()</code>, <code>create()</code>, <code>unlink()</code></td>
</tr>
<tr>
<td>校验与约束</td>
<td><code>@api.constrains</code>, <code>@api.onchange</code></td>
<td>自定义模型方法</td>
</tr>
<tr>
<td>触发计算字段</td>
<td><code>@api.depends()</code></td>
<td>被依赖字段变动后自动触发</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="-简要追踪路径以打开客户表单为例">🔁 简要追踪路径（以打开客户表单为例）</h2>
<ol>
<li>用户点击菜单：<code>web_client.js → action_service.js → web.action.load</code></li>
<li>后端加载 action：<code>ir.actions.act_window → ir.ui.view → fields_view_get</code></li>
<li>返回前端 JSON：包含 <code>arch</code>, <code>fields</code>, <code>toolbar</code>, <code>buttons</code></li>
<li>前端组件渲染：<code>FormRenderer</code>, <code>FieldWidgets</code>, <code>ControlPanel</code></li>
<li>请求记录数据：<code>dataset.call_kw → model.read</code></li>
<li>前端更新字段显示内容：<code>useState</code>, <code>patch</code>, <code>mount</code></li>
</ol>
<hr>
<h2 id="-常用调试断点位置建议">🛠 常用调试断点位置（建议）</h2>
<table>
<thead>
<tr>
<th>位置</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>models.py → fields_view_get()</code></td>
<td>追踪视图定义加载</td>
</tr>
<tr>
<td><code>ir_actions.py → read()</code></td>
<td>查看 action 内容</td>
</tr>
<tr>
<td><code>models.py → read()/write()</code></td>
<td>数据加载/保存核心点</td>
</tr>
<tr>
<td><code>base/ir_ui_view.py → _get_view_arch()</code></td>
<td>检查自定义表单 XML</td>
</tr>
<tr>
<td><code>dataset.js → call_kw()</code></td>
<td>前端调试 RPC 请求</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="-结语-1">🔚 结语</h2>
<p>理解 Odoo 的完整执行流程是模块开发的基础，也是性能调优与 bug 排查的核心。掌握每个阶段调用的方法、参与的模块与执行顺序，能帮助你更高效地开发业务逻辑、扩展功能或处理视图问题。</p>
<p>如果你正在开发自定义模块、设计低代码平台或嵌入 AI 能力（如自然语言控制 Odoo 模块），也欢迎进一步交流！</p>

</div>
<div id="MySignature" role="contentinfo">
    心有猛虎,细嗅蔷薇
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5257777321388889" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-28 23:44">2025-05-28 23:43</span>&nbsp;
<a href="https://www.cnblogs.com/1314520xh">何双新</a>&nbsp;
阅读(<span id="post_view_count">90</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18901494);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18901494', targetLink: 'https://www.cnblogs.com/1314520xh/p/18901494', title: '第2讲、从启动到表单加载：Odoo 18 的完整执行流程详解' })">举报</a>
</div>
        