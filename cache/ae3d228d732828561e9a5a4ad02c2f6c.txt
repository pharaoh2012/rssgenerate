
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/aisong/p/18851494" title="发布于 2025-04-28 14:00">
    <span role="heading" aria-level="2">如何构造一款类似One API的大模型集成平台</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/3583746/202504/3583746-20250428135955421-29146033.png" alt="如何构造一款类似One API的大模型集成平台" class="desc_img">
        本文将探讨如何实现一个兼容OpenAI API规范的大模型集成平台，重点关注**`/v1/models`和**`/v1/chat/completions`**这两个核心端点的实现。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>作为AI领域的开发者，我们经常需要调用多个不同的大语言模型，但面对各家不同的API规范和接入方式，集成工作变得繁琐。构建一个统一的大模型集成平台，能够极大地简化这一过程。</p>
<p>本文将探讨如何实现一个兼容OpenAI API规范的大模型集成平台，重点关注<strong><code>/v1/models</code>和</strong><code>/v1/chat/completions</code>**这两个核心端点的实现。</p>
<h2 id="架构设计">架构设计</h2>
<p>首先，我们需要设计一个清晰的架构，将不同的大模型API统一到一个标准接口下：</p>
<pre><code>                  ┌─────────────────────┐
                  │  统一接口层 (OpenAI兼容) │
                  └──────────┬──────────┘
                             │
                  ┌──────────▼──────────┐
                  │    路由与负载均衡层    │
                  └──────────┬──────────┘
                             │
         ┌───────────────────┴───────────────────┐
         │                                       │
┌────────▼─────────┐  ┌─────────▼─────────┐ ┌────▼───────────┐
│   模型适配器A     │  │   模型适配器B     │ │   模型适配器C   │
│ (如OpenAI适配器)  │  │ (如Claude适配器)  │ │ (如本地模型适配器)│
└────────┬─────────┘  └─────────┬─────────┘ └────┬───────────┘
         │                      │                │
┌────────▼─────────┐  ┌─────────▼─────────┐ ┌────▼───────────┐
│    OpenAI API    │  │    Claude API     │ │    本地模型     │
└──────────────────┘  └───────────────────┘ └────────────────┘
</code></pre>
<h2 id="核心组件实现">核心组件实现</h2>
<p>我们使用Python和Flask框架来实现这个平台的关键部分。</p>
<h3 id="1-项目结构">1. 项目结构</h3>
<pre><code>one_api/
├── app.py              # 主应用入口
├── config.py           # 配置文件
├── models/             # 模型相关
│   ├── __init__.py
│   ├── registry.py     # 模型注册表
│   └── adapters/       # 各模型适配器
│       ├── __init__.py
│       ├── base.py     # 基础适配器接口
│       ├── openai.py   # OpenAI适配器
│       ├── claude.py   # Claude适配器
│       └── local.py    # 本地模型适配器
├── api/                # API路由
│   ├── __init__.py
│   ├── models.py       # /v1/models 实现
│   └── chat.py         # /v1/chat/completions 实现
└── utils/              # 工具函数
    ├── __init__.py
    ├── auth.py         # 认证相关
    └── rate_limit.py   # 速率限制
</code></pre>
<h3 id="2-基础适配器接口">2. 基础适配器接口</h3>
<p>首先定义一个基础适配器接口，所有模型适配器都需要实现这个接口：</p>
<pre><code class="language-python"># models/adapters/base.py
from abc import ABC, abstractmethod
from typing import Dict, List, Any, Optional

class BaseModelAdapter(ABC):
    """所有模型适配器的基类"""
    
    @abstractmethod
    def list_models(self) -&gt; List[Dict[str, Any]]:
        """返回该适配器支持的模型列表"""
        pass
        
    @abstractmethod
    async def generate_completion(self, 
                                  model: str, 
                                  messages: List[Dict[str, str]], 
                                  temperature: Optional[float] = None,
                                  top_p: Optional[float] = None,
                                  max_tokens: Optional[int] = None,
                                  stream: bool = False,
                                  **kwargs) -&gt; Dict[str, Any]:
        """生成聊天完成结果"""
        pass
    
    @abstractmethod
    def get_model_info(self, model_id: str) -&gt; Dict[str, Any]:
        """获取特定模型的详细信息"""
        pass
</code></pre>
<p><strong>说明</strong>：</p>
<ul>
<li>使用抽象基类（ABC）设计适配器接口，确保所有子类都实现必要的方法</li>
<li><code>list_models</code> 方法用于获取每个适配器支持的模型列表</li>
<li><code>generate_completion</code> 是核心方法，负责调用实际的AI模型生成响应，使用异步设计提高性能</li>
<li><code>get_model_info</code> 用于获取模型详细信息，方便前端展示和选择</li>
</ul>
<h3 id="3-模型注册表">3. 模型注册表</h3>
<p>创建一个中央注册表来管理所有可用的模型和对应的适配器：</p>
<pre><code class="language-python"># models/registry.py
from typing import Dict, List, Any, Optional
from .adapters.base import BaseModelAdapter
import logging

logger = logging.getLogger(__name__)

class ModelRegistry:
    """中央模型注册表，管理所有模型适配器和路由逻辑"""
    
    def __init__(self):
        # 适配器映射 {adapter_name: adapter_instance}
        self.adapters: Dict[str, BaseModelAdapter] = {}
        # 模型映射 {model_id: adapter_name}
        self.model_mapping: Dict[str, str] = {}
        
    def register_adapter(self, name: str, adapter: BaseModelAdapter) -&gt; None:
        """注册一个新的模型适配器"""
        if name in self.adapters:
            logger.warning(f"适配器 '{name}' 已存在，将被覆盖")
        
        self.adapters[name] = adapter
        
        # 注册此适配器支持的所有模型
        for model_info in adapter.list_models():
            model_id = model_info["id"]
            self.model_mapping[model_id] = name
            logger.info(f"已注册模型: {model_id} -&gt; {name}")
            
    def get_adapter_for_model(self, model_id: str) -&gt; Optional[BaseModelAdapter]:
        """根据模型ID获取对应的适配器"""
        adapter_name = self.model_mapping.get(model_id)
        if not adapter_name:
            return None
        return self.adapters.get(adapter_name)
    
    def list_all_models(self) -&gt; List[Dict[str, Any]]:
        """列出所有已注册的模型"""
        all_models = []
        for adapter in self.adapters.values():
            all_models.extend(adapter.list_models())
        return all_models
    
    async def generate_completion(self, model_id: str, **kwargs) -&gt; Dict[str, Any]:
        """调用指定模型生成完成结果"""
        adapter = self.get_adapter_for_model(model_id)
        if not adapter:
            raise ValueError(f"未找到模型 '{model_id}' 的适配器")
        
        return await adapter.generate_completion(model=model_id, **kwargs)
</code></pre>
<p><strong>说明</strong>：</p>
<ul>
<li><code>ModelRegistry</code> 作为中央管理器，负责维护所有模型适配器和路由映射</li>
<li>通过 <code>register_adapter</code> 方法注册新的适配器，并自动获取该适配器支持的所有模型</li>
<li><code>model_mapping</code> 字典存储模型ID到适配器名称的映射，便于快速查找</li>
<li><code>get_adapter_for_model</code> 方法根据模型ID获取对应的适配器实例</li>
<li><code>list_all_models</code> 方法聚合所有适配器的模型列表，用于 <code>/v1/models</code> 端点</li>
<li><code>generate_completion</code> 方法是核心路由逻辑，将请求转发给正确的适配器处理</li>
</ul>
<h3 id="4-openai适配器示例">4. OpenAI适配器示例</h3>
<p>下面实现一个OpenAI的适配器示例：</p>
<pre><code class="language-python"># models/adapters/openai.py
import aiohttp
from typing import Dict, List, Any, Optional
from .base import BaseModelAdapter
import os
import logging

logger = logging.getLogger(__name__)

class OpenAIAdapter(BaseModelAdapter):
    """OpenAI API适配器"""
    
    def __init__(self, api_key: str, base_url: str = "https://api.openai.com"):
        self.api_key = api_key
        self.base_url = base_url
        self._models_cache = None
        
    async def _request(self, method: str, endpoint: str, **kwargs) -&gt; Dict[str, Any]:
        """发送请求到OpenAI API"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        url = f"{self.base_url}{endpoint}"
        
        async with aiohttp.ClientSession() as session:
            async with session.request(
                method, 
                url, 
                headers=headers, 
                **kwargs
            ) as response:
                if response.status != 200:
                    error_text = await response.text()
                    raise Exception(f"OpenAI API错误 ({response.status}): {error_text}")
                
                return await response.json()
    
    async def _fetch_models(self) -&gt; List[Dict[str, Any]]:
        """从OpenAI获取模型列表"""
        response = await self._request("GET", "/v1/models")
        return response["data"]
        
    def list_models(self) -&gt; List[Dict[str, Any]]:
        """返回OpenAI支持的模型列表"""
        if self._models_cache is None:
            # 在实际实现中，应该使用异步方式获取，这里简化处理
            import asyncio
            self._models_cache = asyncio.run(self._fetch_models())
            
        # 添加额外的平台特定信息
        for model in self._models_cache:
            model["provider"] = "openai"
            
        return self._models_cache
    
    async def generate_completion(self, 
                                 model: str, 
                                 messages: List[Dict[str, str]], 
                                 temperature: Optional[float] = None,
                                 top_p: Optional[float] = None,
                                 max_tokens: Optional[int] = None,
                                 stream: bool = False,
                                 **kwargs) -&gt; Dict[str, Any]:
        """调用OpenAI API生成聊天完成"""
        payload = {
            "model": model,
            "messages": messages,
            "stream": stream
        }
        
        # 添加可选参数
        if temperature is not None:
            payload["temperature"] = temperature
        if top_p is not None:
            payload["top_p"] = top_p
        if max_tokens is not None:
            payload["max_tokens"] = max_tokens
            
        # 添加其他传入的参数
        for key, value in kwargs.items():
            if key not in payload and value is not None:
                payload[key] = value
                
        # 调用OpenAI API
        response = await self._request(
            "POST", 
            "/v1/chat/completions",
            json=payload
        )
        
        # 确保response格式与我们的标准一致
        return self._standardize_response(response)
    
    def _standardize_response(self, response: Dict[str, Any]) -&gt; Dict[str, Any]:
        """将OpenAI的响应转换为标准格式"""
        # OpenAI已经使用标准格式，所以直接返回
        return response
    
    def get_model_info(self, model_id: str) -&gt; Dict[str, Any]:
        """获取特定模型的详细信息"""
        models = self.list_models()
        for model in models:
            if model["id"] == model_id:
                return model
        raise ValueError(f"模型 '{model_id}' 不存在")
</code></pre>
<p><strong>说明</strong>：</p>
<ul>
<li>实现了 <code>BaseModelAdapter</code> 接口的具体适配器，专门处理OpenAI API调用</li>
<li>使用 <code>aiohttp</code> 进行异步HTTP请求，提高并发处理能力</li>
<li><code>_request</code> 私有方法封装了HTTP请求逻辑，处理认证和错误情况</li>
<li><code>_fetch_models</code> 方法从OpenAI获取模型列表，实际使用时会缓存结果</li>
<li><code>list_models</code> 实现了基类接口，添加了提供商信息，便于前端区分</li>
<li><code>generate_completion</code> 是核心方法，构建请求参数并调用OpenAI的chat/completions API</li>
<li><code>_standardize_response</code> 将响应规范化为统一格式，便于后续处理</li>
<li><code>get_model_info</code> 通过模型ID获取详细信息</li>
</ul>
<h3 id="5-api路由实现">5. API路由实现</h3>
<p>现在，让我们实现符合OpenAI规范的API端点：</p>
<pre><code class="language-python"># api/models.py
from flask import Blueprint, jsonify
from ..models.registry import ModelRegistry

models_bp = Blueprint('models', __name__)

def init_routes(registry: ModelRegistry):
    """初始化模型API路由"""
    
    @models_bp.route('/v1/models', methods=['GET'])
    async def list_models():
        """列出所有可用模型 (OpenAI兼容端点)"""
        models = registry.list_all_models()
        
        # 按照OpenAI API格式返回
        return jsonify({
            "object": "list",
            "data": models
        })
    
    @models_bp.route('/v1/models/&lt;model_id&gt;', methods=['GET'])
    async def get_model(model_id):
        """获取特定模型详情 (OpenAI兼容端点)"""
        adapter = registry.get_adapter_for_model(model_id)
        if not adapter:
            return jsonify({
                "error": {
                    "message": f"模型 '{model_id}' 不存在",
                    "type": "invalid_request_error",
                    "code": "model_not_found"
                }
            }), 404
            
        model_info = adapter.get_model_info(model_id)
        return jsonify(model_info)
</code></pre>
<p><strong>说明</strong>：</p>
<ul>
<li>使用Flask的Blueprint组织路由，便于模块化管理</li>
<li><code>init_routes</code> 函数接收模型注册表实例，实现依赖注入</li>
<li><code>/v1/models</code> 端点完全兼容OpenAI API规范，返回所有已注册模型</li>
<li><code>/v1/models/&lt;model_id&gt;</code> 端点获取指定模型的详细信息</li>
<li>错误情况返回标准的OpenAI错误格式，确保客户端兼容性</li>
</ul>
<pre><code class="language-python"># api/chat.py
from flask import Blueprint, request, jsonify, Response, stream_with_context
import json
import asyncio
from ..models.registry import ModelRegistry
from ..utils.auth import verify_api_key
from ..utils.rate_limit import check_rate_limit
import logging

logger = logging.getLogger(__name__)

chat_bp = Blueprint('chat', __name__)

def init_routes(registry: ModelRegistry):
    """初始化聊天完成API路由"""
    
    @chat_bp.route('/v1/chat/completions', methods=['POST'])
    @verify_api_key
    @check_rate_limit
    async def create_chat_completion():
        """创建聊天完成 (OpenAI兼容端点)"""
        try:
            # 解析请求数据
            data = request.json
            model = data.get("model")
            
            if not model:
                return jsonify({
                    "error": {
                        "message": "必须指定'model'参数",
                        "type": "invalid_request_error",
                    }
                }), 400
            
            adapter = registry.get_adapter_for_model(model)
            if not adapter:
                return jsonify({
                    "error": {
                        "message": f"模型 '{model}' 不存在或不可用",
                        "type": "invalid_request_error",
                        "code": "model_not_found"
                    }
                }), 404
            
            # 提取参数
            messages = data.get("messages", [])
            temperature = data.get("temperature")
            top_p = data.get("top_p")
            max_tokens = data.get("max_tokens")
            stream = data.get("stream", False)
            
            # 其他参数
            kwargs = {k: v for k, v in data.items() if k not in 
                     ["model", "messages", "temperature", "top_p", "max_tokens", "stream"]}
            
            # 流式输出处理
            if stream:
                async def generate():
                    kwargs["stream"] = True
                    response_iterator = await registry.generate_completion(
                        model_id=model,
                        messages=messages,
                        temperature=temperature,
                        top_p=top_p,
                        max_tokens=max_tokens,
                        **kwargs
                    )
                    
                    # 假设response_iterator是一个异步迭代器
                    async for chunk in response_iterator:
                        yield f"data: {json.dumps(chunk)}\n\n"
                    
                    # 结束流
                    yield "data: [DONE]\n\n"
                
                return Response(
                    stream_with_context(generate()),
                    content_type='text/event-stream'
                )
            
            # 非流式输出
            response = await registry.generate_completion(
                model_id=model,
                messages=messages,
                temperature=temperature,
                top_p=top_p,
                max_tokens=max_tokens,
                **kwargs
            )
            
            return jsonify(response)
            
        except Exception as e:
            logger.exception("处理chat/completions请求时出错")
            return jsonify({
                "error": {
                    "message": str(e),
                    "type": "server_error",
                }
            }), 500
</code></pre>
<p><strong>说明</strong>：</p>
<ul>
<li>实现 <code>/v1/chat/completions</code> 端点，这是OpenAI API的核心功能</li>
<li>使用装饰器 <code>@verify_api_key</code> 和 <code>@check_rate_limit</code> 处理认证和限流</li>
<li>从请求中提取模型ID、消息内容、生成参数等信息</li>
<li>支持流式输出（stream）和常规输出两种模式
<ul>
<li>流式模式使用 <code>stream_with_context</code> 和 SSE (Server-Sent Events) 格式</li>
<li>常规模式直接返回完整的JSON响应</li>
</ul>
</li>
<li>异常处理机制确保即使出现错误也能返回友好的错误信息</li>
<li>动态参数处理，允许传递额外参数到底层模型</li>
</ul>
<h3 id="6-主应用入口">6. 主应用入口</h3>
<p>最后，我们将所有组件整合到主应用中：</p>
<pre><code class="language-python"># app.py
from flask import Flask
from flask_cors import CORS
from .config import Config
from .models.registry import ModelRegistry
from .models.adapters.openai import OpenAIAdapter
from .models.adapters.claude import ClaudeAdapter  # 假设已实现
from .models.adapters.local import LocalModelAdapter  # 假设已实现
from .api import models, chat
import logging
import os

def create_app():
    """创建并配置Flask应用"""
    # 配置日志
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # 创建Flask应用
    app = Flask(__name__)
    CORS(app)  # 启用跨域支持
    
    # 加载配置
    app.config.from_object(Config)
    
    # 创建模型注册表
    registry = ModelRegistry()
    
    # 注册模型适配器
    # OpenAI适配器
    if Config.OPENAI_API_KEY:
        openai_adapter = OpenAIAdapter(
            api_key=Config.OPENAI_API_KEY,
            base_url=Config.OPENAI_BASE_URL
        )
        registry.register_adapter("openai", openai_adapter)
        
    # Claude适配器
    if Config.CLAUDE_API_KEY:
        claude_adapter = ClaudeAdapter(
            api_key=Config.CLAUDE_API_KEY
        )
        registry.register_adapter("claude", claude_adapter)
        
    # 本地模型适配器
    if Config.LOCAL_MODELS_ENABLED:
        local_adapter = LocalModelAdapter(
            models_dir=Config.LOCAL_MODELS_DIR
        )
        registry.register_adapter("local", local_adapter)
    
    # 初始化API路由
    models.init_routes(registry)
    chat.init_routes(registry)
    
    # 注册蓝图
    app.register_blueprint(models.models_bp)
    app.register_blueprint(chat.chat_bp)
    
    @app.route('/health', methods=['GET'])
    def health_check():
        """健康检查端点"""
        return {"status": "healthy"}
    
    return app

if __name__ == "__main__":
    app = create_app()
    app.run(
        host=os.getenv("HOST", "0.0.0.0"),
        port=int(os.getenv("PORT", "8000")),
        debug=os.getenv("DEBUG", "False").lower() == "true"
    )
</code></pre>
<p><strong>说明</strong>：</p>
<ul>
<li>采用工厂模式创建Flask应用，便于测试和扩展</li>
<li>配置日志系统，方便调试和问题排查</li>
<li>启用CORS（跨域资源共享），支持前端跨域调用</li>
<li>从配置文件加载各项设置，而不是硬编码</li>
<li>创建并初始化模型注册表，根据配置动态注册不同的模型适配器</li>
<li>有条件地注册适配器，只有配置了相应API密钥的适配器才会被启用</li>
<li>初始化API路由，将模型注册表注入各个路由处理函数</li>
<li>添加健康检查端点，便于监控系统检测服务状态</li>
<li>从环境变量获取服务器启动参数，提高部署灵活性</li>
</ul>
<h3 id="7-配置文件">7. 配置文件</h3>
<pre><code class="language-python"># config.py
import os
from dotenv import load_dotenv

# 加载环境变量
load_dotenv()

class Config:
    """应用配置"""
    # API密钥
    API_KEYS = os.getenv("API_KEYS", "").split(",")
    
    # OpenAI配置
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    OPENAI_BASE_URL = os.getenv("OPENAI_BASE_URL", "https://api.openai.com")
    
    # Claude配置
    CLAUDE_API_KEY = os.getenv("CLAUDE_API_KEY")
    
    # 本地模型配置
    LOCAL_MODELS_ENABLED = os.getenv("LOCAL_MODELS_ENABLED", "False").lower() == "true"
    LOCAL_MODELS_DIR = os.getenv("LOCAL_MODELS_DIR", "./models")
    
    # 速率限制配置
    RATE_LIMIT_ENABLED = os.getenv("RATE_LIMIT_ENABLED", "True").lower() == "true"
    RATE_LIMIT_REQUESTS = int(os.getenv("RATE_LIMIT_REQUESTS", "100"))  # 每分钟请求数
</code></pre>
<p><strong>说明</strong>：</p>
<ul>
<li>使用 <code>python-dotenv</code> 加载 <code>.env</code> 文件中的环境变量，便于开发和部署配置分离</li>
<li>提供默认值，确保即使环境变量未设置，应用也能正常启动</li>
<li>通过环境变量配置多个API密钥，支持不同用户访问权限</li>
<li>可配置OpenAI的基础URL，支持使用OpenAI兼容的替代API服务</li>
<li>本地模型功能可通过环境变量开关，方便在不同环境中灵活配置</li>
<li>速率限制功能也可配置，防止API滥用</li>
</ul>
<h2 id="关键技术点分析">关键技术点分析</h2>
<h3 id="1-适配器模式">1. 适配器模式</h3>
<p>我们使用适配器模式来统一不同大模型API的接口差异。每个适配器负责将特定供应商的API转换为我们的标准接口，这使得添加新的模型变得简单，只需实现对应的适配器即可。</p>
<h3 id="2-异步处理">2. 异步处理</h3>
<p>通过使用<code>async/await</code>，我们能够高效地处理并发请求，特别是对于流式输出这样的场景，异步处理尤为重要。</p>
<h3 id="3-统一的模型表示">3. 统一的模型表示</h3>
<p>我们统一了模型的表示方式，确保在不同的适配器之间可以一致地表达模型能力和属性，这有助于用户在不同模型间进行平滑切换。</p>
<h3 id="4-中央注册表">4. 中央注册表</h3>
<p><code>ModelRegistry</code>作为中央组件，管理所有模型适配器，并提供统一的调用接口。它负责模型路由、适配器选择等核心逻辑。</p>
<h2 id="扩展与进阶功能">扩展与进阶功能</h2>
<p>实现基础功能后，可以考虑以下进阶特性：</p>
<h3 id="1-负载均衡与故障转移">1. 负载均衡与故障转移</h3>
<pre><code class="language-python"># 在ModelRegistry中添加负载均衡功能
def select_adapter_with_load_balancing(self, model_group: str) -&gt; BaseModelAdapter:
    """根据负载情况选择适配器"""
    adapters = self.model_groups.get(model_group, [])
    if not adapters:
        raise ValueError(f"未找到模型组 '{model_group}'")
    
    # 基于各种指标(延迟、成功率等)选择最优适配器
    # 此处为简化实现
    return min(adapters, key=lambda a: self.adapter_metrics[a.name]["latency"])
</code></pre>
<p><strong>说明</strong>：</p>
<ul>
<li>在高可用场景下，可以为相同模型配置多个适配器实例（可能指向不同区域或不同提供商）</li>
<li>通过收集延迟、成功率等指标，动态选择当前最优的适配器</li>
<li>当某个适配器出现问题时，系统可以自动切换到备用适配器，实现故障转移</li>
</ul>
<h3 id="2-缓存层">2. 缓存层</h3>
<p>为常见请求添加缓存层，减少对后端API的调用频率，降低成本并提高响应速度。</p>
<h2 id="总结">总结</h2>
<p>通过构建这样一个大模型集成平台，我们可以大幅简化多模型应用开发的复杂度。开发者只需调用统一的OpenAI兼容接口，平台会自动处理所有底层细节，包括API差异、认证、路由等问题。</p>
<p>这种架构不仅适用于简单的调用场景，还可以作为构建更复杂AI应用的基础设施，如通过动态选择最适合特定任务的模型，或者实现模型间的协作来解决更复杂的问题。</p>
<p>希望本文提供的技术思路和代码示例能够帮助你构建自己的大模型集成平台，为AI应用开发提供更加灵活和强大的基础设施支持。</p>
<h2 id="写在最后">写在最后</h2>
<p>如果您对本文的技术细节和源码实现感兴趣，欢迎关注我的微信公众号<strong>【松哥ai自动化】</strong>。每周我都会在公众号首发一篇深度技术文章，从源码角度剖析各种实用工具的实现原理。</p>
<p>上期回顾：（<a href="https://mp.weixin.qq.com/s/myczU-fmMRFBqjfhroGcag" target="_blank" rel="noopener nofollow">小模型工具调用能力激活：以Qwen2.5 0.5B为例的Prompt工程实践</a>）</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.7986499725451389" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-28 14:00">2025-04-28 14:00</span>&nbsp;
<a href="https://www.cnblogs.com/aisong">松哥_ai_自动化</a>&nbsp;
阅读(<span id="post_view_count">157</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18851494);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18851494', targetLink: 'https://www.cnblogs.com/aisong/p/18851494', title: '如何构造一款类似One API的大模型集成平台' })">举报</a>
</div>
        